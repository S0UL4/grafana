"use strict";
(self["webpackChunkgrafana"] = self["webpackChunkgrafana"] || []).push([["azureMonitorPlugin"],{

/***/ "./public/app/core/utils/deferred.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Deferred": () => (/* binding */ Deferred)
/* harmony export */ });
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Deferred {
  constructor() {
    _defineProperty(this, "resolve", void 0);

    _defineProperty(this, "reject", void 0);

    _defineProperty(this, "promise", void 0);

    this.resolve = undefined;
    this.reject = undefined;
    this.promise = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
    Object.freeze(this);
  }

}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/index.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "locationDisplayNames": () => (/* reexport safe */ _locations__WEBPACK_IMPORTED_MODULE_0__.locationDisplayNames),
/* harmony export */   "locationMetadata": () => (/* reexport safe */ _locations__WEBPACK_IMPORTED_MODULE_0__.locationMetadata),
/* harmony export */   "logsResourceTypes": () => (/* reexport safe */ _logsResourceTypes__WEBPACK_IMPORTED_MODULE_2__.logsResourceTypes),
/* harmony export */   "logsSupportedLocationsKusto": () => (/* reexport safe */ _locations__WEBPACK_IMPORTED_MODULE_0__.logsSupportedLocationsKusto),
/* harmony export */   "resourceTypeDisplayNames": () => (/* reexport safe */ _resourceTypes__WEBPACK_IMPORTED_MODULE_1__.resourceTypeDisplayNames),
/* harmony export */   "supportedMetricNamespaces": () => (/* reexport safe */ _metricNamespaces__WEBPACK_IMPORTED_MODULE_3__.supportedMetricNamespaces)
/* harmony export */ });
/* harmony import */ var _locations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/locations.ts");
/* harmony import */ var _resourceTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/resourceTypes.ts");
/* harmony import */ var _logsResourceTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/logsResourceTypes.ts");
/* harmony import */ var _metricNamespaces__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/metricNamespaces.ts");





/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/locations.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "locationDisplayNames": () => (/* binding */ locationDisplayNames),
/* harmony export */   "locationMetadata": () => (/* binding */ locationMetadata),
/* harmony export */   "logsSupportedLocationsKusto": () => (/* binding */ logsSupportedLocationsKusto)
/* harmony export */ });
// Unfortunately this list is manually maintained as there's no (nice) automated way to get
// data from Azure.
const locationMetadata = [{
  location: 'eastus',
  displayName: 'East US',
  supportsLogs: true
}, {
  location: 'eastus2',
  displayName: 'East US 2',
  supportsLogs: true
}, {
  location: 'southcentralus',
  displayName: 'South Central US',
  supportsLogs: true
}, {
  location: 'westus2',
  displayName: 'West US 2',
  supportsLogs: true
}, {
  location: 'westus3',
  displayName: 'West US 3',
  supportsLogs: true
}, {
  location: 'australiaeast',
  displayName: 'Australia East',
  supportsLogs: true
}, {
  location: 'southeastasia',
  displayName: 'Southeast Asia',
  supportsLogs: true
}, {
  location: 'northeurope',
  displayName: 'North Europe',
  supportsLogs: true
}, {
  location: 'uksouth',
  displayName: 'UK South',
  supportsLogs: true
}, {
  location: 'westeurope',
  displayName: 'West Europe',
  supportsLogs: true
}, {
  location: 'centralus',
  displayName: 'Central US',
  supportsLogs: true
}, {
  location: 'northcentralus',
  displayName: 'North Central US',
  supportsLogs: true
}, {
  location: 'westus',
  displayName: 'West US',
  supportsLogs: true
}, {
  location: 'southafricanorth',
  displayName: 'South Africa North',
  supportsLogs: true
}, {
  location: 'centralindia',
  displayName: 'Central India',
  supportsLogs: true
}, {
  location: 'eastasia',
  displayName: 'East Asia',
  supportsLogs: true
}, {
  location: 'japaneast',
  displayName: 'Japan East',
  supportsLogs: true
}, {
  location: 'jioindiawest',
  displayName: 'Jio India West',
  supportsLogs: true
}, {
  location: 'koreacentral',
  displayName: 'Korea Central',
  supportsLogs: true
}, {
  location: 'canadacentral',
  displayName: 'Canada Central',
  supportsLogs: true
}, {
  location: 'francecentral',
  displayName: 'France Central',
  supportsLogs: true
}, {
  location: 'germanywestcentral',
  displayName: 'Germany West Central',
  supportsLogs: true
}, {
  location: 'norwayeast',
  displayName: 'Norway East',
  supportsLogs: true
}, {
  location: 'switzerlandnorth',
  displayName: 'Switzerland North',
  supportsLogs: true
}, {
  location: 'uaenorth',
  displayName: 'UAE North',
  supportsLogs: true
}, {
  location: 'brazilsouth',
  displayName: 'Brazil South',
  supportsLogs: true
}, {
  location: 'centralusstage',
  displayName: 'Central US (Stage)',
  supportsLogs: true
}, {
  location: 'eastusstage',
  displayName: 'East US (Stage)',
  supportsLogs: true
}, {
  location: 'eastus2stage',
  displayName: 'East US 2 (Stage)',
  supportsLogs: true
}, {
  location: 'northcentralusstage',
  displayName: 'North Central US (Stage)',
  supportsLogs: true
}, {
  location: 'southcentralusstage',
  displayName: 'South Central US (Stage)',
  supportsLogs: true
}, {
  location: 'westusstage',
  displayName: 'West US (Stage)',
  supportsLogs: true
}, {
  location: 'westus2stage',
  displayName: 'West US 2 (Stage)',
  supportsLogs: true
}, {
  location: 'asia',
  displayName: 'Asia',
  supportsLogs: true
}, {
  location: 'asiapacific',
  displayName: 'Asia Pacific',
  supportsLogs: true
}, {
  location: 'australia',
  displayName: 'Australia',
  supportsLogs: true
}, {
  location: 'brazil',
  displayName: 'Brazil',
  supportsLogs: true
}, {
  location: 'canada',
  displayName: 'Canada',
  supportsLogs: true
}, {
  location: 'europe',
  displayName: 'Europe',
  supportsLogs: true
}, {
  location: 'global',
  displayName: 'Global',
  supportsLogs: true
}, {
  location: 'india',
  displayName: 'India',
  supportsLogs: true
}, {
  location: 'japan',
  displayName: 'Japan',
  supportsLogs: true
}, {
  location: 'uk',
  displayName: 'United Kingdom',
  supportsLogs: true
}, {
  location: 'unitedstates',
  displayName: 'United States',
  supportsLogs: true
}, {
  location: 'eastasiastage',
  displayName: 'East Asia (Stage)',
  supportsLogs: true
}, {
  location: 'southeastasiastage',
  displayName: 'Southeast Asia (Stage)',
  supportsLogs: true
}, {
  location: 'westcentralus',
  displayName: 'West Central US',
  supportsLogs: true
}, {
  location: 'southafricawest',
  displayName: 'South Africa West',
  supportsLogs: true
}, {
  location: 'australiacentral',
  displayName: 'Australia Central',
  supportsLogs: true
}, {
  location: 'australiacentral2',
  displayName: 'Australia Central 2',
  supportsLogs: true
}, {
  location: 'australiasoutheast',
  displayName: 'Australia Southeast',
  supportsLogs: true
}, {
  location: 'japanwest',
  displayName: 'Japan West',
  supportsLogs: true
}, {
  location: 'koreasouth',
  displayName: 'Korea South',
  supportsLogs: true
}, {
  location: 'southindia',
  displayName: 'South India',
  supportsLogs: true
}, {
  location: 'westindia',
  displayName: 'West India',
  supportsLogs: true
}, {
  location: 'canadaeast',
  displayName: 'Canada East',
  supportsLogs: true
}, {
  location: 'francesouth',
  displayName: 'France South',
  supportsLogs: true
}, {
  location: 'germanynorth',
  displayName: 'Germany North',
  supportsLogs: true
}, {
  location: 'norwaywest',
  displayName: 'Norway West',
  supportsLogs: true
}, {
  location: 'switzerlandwest',
  displayName: 'Switzerland West',
  supportsLogs: true
}, {
  location: 'ukwest',
  displayName: 'UK West',
  supportsLogs: true
}, {
  location: 'uaecentral',
  displayName: 'UAE Central',
  supportsLogs: true
}, {
  location: 'brazilsoutheast',
  displayName: 'Brazil Southeast',
  supportsLogs: true
}, {
  location: 'chinaeast',
  displayName: 'China Eest',
  supportsLogs: true
}, {
  location: 'chinaeast2',
  displayName: 'China Eest 2',
  supportsLogs: true
}, {
  location: 'chinanorth',
  displayName: 'China North',
  supportsLogs: true
}, {
  location: 'chinanorth2',
  displayName: 'China North 2',
  supportsLogs: true
}, {
  location: 'chinanorth3',
  displayName: 'China North 3',
  supportsLogs: true
}];
const logsSupportedLocationsKusto = locationMetadata.filter(v => v.supportsLogs).map(v => `"${v.location}"`).join(','); // Object, keyed by location ID

const locationDisplayNames = locationMetadata.reduce((acc, location) => Object.assign({}, acc, {
  [location.location]: location.displayName
}), {});

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/logsResourceTypes.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "logsResourceTypes": () => (/* binding */ logsResourceTypes)
/* harmony export */ });
/**
This list is obtained parsing https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/resource-logs-categories
To programatically get the list, execute in the browser console:
 
 const i = [];
 document.querySelectorAll('*[id]').forEach((el) => { 
  if(el.textContent.match(/^(microsoft|Microsoft|Wandisco)/)) {
    i.push(el.textContent.toLowerCase())
  }});
  i;
 
Note: Validate that the output makes sense, the format of the page may change.
 
That list is not complete so we should merge it with the one below. You can do with a node console:
 
  const u = require('lodash')
  const new = [list from above]
  const logsResourceTypes = [this list]
  console.dir(u.uniq(logsResourceTypes.concat(new)).sort(), {'maxArrayLength': null})
 
 */
const logsResourceTypes = ['microsoft.aad/domainservices', 'microsoft.aadiam/azureadmetrics', 'microsoft.aadiam/tenants', 'microsoft.agfoodplatform/farmbeats', 'microsoft.analysisservices/servers', 'microsoft.apimanagement/service', 'microsoft.appconfiguration/configurationstores', 'microsoft.appplatform/spring', 'microsoft.attestation/attestationproviders', 'microsoft.automation/automationaccounts', 'microsoft.autonomousdevelopmentplatform/accounts', 'microsoft.autonomousdevelopmentplatform/datapools', 'microsoft.autonomousdevelopmentplatform/workspaces', 'microsoft.avs/privateclouds', 'microsoft.azurestackresourcemonitor/storageaccountmonitor', 'microsoft.batch/batchaccounts', 'microsoft.batchai/workspaces', 'microsoft.blockchain/blockchainmembers', 'microsoft.blockchain/cordamembers', 'microsoft.botservice/botservices', 'microsoft.cache/redis', 'microsoft.cache/redisenterprise', 'microsoft.cdn/cdnwebapplicationfirewallpolicies', 'microsoft.cdn/profiles', 'microsoft.cdn/profiles/endpoints', 'microsoft.classiccompute/domainnames', 'microsoft.classiccompute/virtualmachines', 'microsoft.classicnetwork/networksecuritygroups', 'microsoft.classicstorage/storageaccounts', 'microsoft.cognitiveservices/accounts', 'microsoft.communication/communicationservices', 'microsoft.compute/disks', 'microsoft.compute/virtualmachines', 'microsoft.compute/virtualmachinescalesets', 'microsoft.connectedcache/cachenodes', 'microsoft.connectedvehicle/platformaccounts', 'microsoft.containerinstance/containergroups', 'microsoft.containerregistry/registries', 'microsoft.containerservice/managedclusters', 'microsoft.customerinsights/hubs', 'microsoft.customproviders/resourceproviders', 'microsoft.d365customerinsights/instances', 'microsoft.dashboard/grafana', 'microsoft.databoxedge/databoxedgedevices', 'microsoft.databricks/workspaces', 'microsoft.datacollaboration/workspaces', 'microsoft.datafactory/datafactories', 'microsoft.datafactory/factories', 'microsoft.datalakeanalytics/accounts', 'microsoft.datalakestore/accounts', 'microsoft.datashare/accounts', 'microsoft.dbformariadb/servers', 'microsoft.dbformysql/flexibleservers', 'microsoft.dbformysql/servers', 'microsoft.dbforpostgresql/flexibleservers', 'microsoft.dbforpostgresql/servergroupsv2', 'microsoft.dbforpostgresql/servers', 'microsoft.dbforpostgresql/serversv2', 'microsoft.desktopvirtualization/applicationgroups', 'microsoft.desktopvirtualization/hostpools', 'microsoft.desktopvirtualization/scalingplans', 'microsoft.desktopvirtualization/workspaces', 'microsoft.devices/elasticpools/iothubtenants', 'microsoft.devices/iothubs', 'microsoft.devices/provisioningservices', 'microsoft.digitaltwins/digitaltwinsinstances', 'microsoft.documentdb/cassandraclusters', 'microsoft.documentdb/databaseaccounts', 'microsoft.eventgrid/domains', 'microsoft.eventgrid/partnernamespaces', 'microsoft.eventgrid/partnertopics', 'microsoft.eventgrid/systemtopics', 'microsoft.eventgrid/topics', 'microsoft.eventhub/clusters', 'microsoft.eventhub/namespaces', 'microsoft.experimentation/experimentworkspaces', 'microsoft.fabric.admin/fabriclocations', 'microsoft.hdinsight/clusters', 'microsoft.healthcareapis/services', 'microsoft.healthcareapis/workspaces/dicomservices', 'microsoft.healthcareapis/workspaces/fhirservices', 'microsoft.insights/autoscalesettings', 'microsoft.insights/components', 'microsoft.insights/qos', 'microsoft.iotcentral/iotapps', 'microsoft.keyvault/managedhsms', 'microsoft.keyvault/vaults', 'microsoft.kubernetes/connectedclusters', 'microsoft.kusto/clusters', 'microsoft.logic/integrationaccounts', 'microsoft.logic/integrationserviceenvironments', 'microsoft.logic/workflows', 'microsoft.machinelearningservices/workspaces', 'microsoft.media/mediaservices', 'microsoft.media/mediaservices/liveevents', 'microsoft.media/mediaservices/streamingendpoints', 'microsoft.media/videoanalyzers', 'microsoft.netapp/netappaccounts/capacitypools', 'microsoft.netapp/netappaccounts/capacitypools/volumes', 'microsoft.network/applicationgateways', 'microsoft.network/azurefirewalls', 'microsoft.network/bastionhosts', 'microsoft.network/connections', 'microsoft.network/dnszones', 'microsoft.network/expressroutecircuits', 'microsoft.network/expressroutegateways', 'microsoft.network/expressrouteports', 'microsoft.network/frontdoors', 'microsoft.network/loadbalancers', 'microsoft.network/natgateways', 'microsoft.network/networkinterfaces', 'microsoft.network/networksecuritygroups', 'microsoft.network/networksecurityperimeters', 'microsoft.network/networkvirtualappliances', 'microsoft.network/networkwatchers', 'microsoft.network/networkwatchers/connectionmonitors', 'microsoft.network/p2svpngateways', 'microsoft.network/privateendpoints', 'microsoft.network/privatelinkservices', 'microsoft.network/publicipaddresses', 'microsoft.network/trafficmanagerprofiles', 'microsoft.network/virtualnetworkgateways', 'microsoft.network/virtualnetworks', 'microsoft.network/vpngateways', 'microsoft.networkfunction/azuretrafficcollectors', 'microsoft.notificationhubs/namespaces', 'microsoft.notificationhubs/namespaces/notificationhubs', 'microsoft.openlogisticsplatform/workspaces', 'microsoft.operationalinsights/workspaces', 'microsoft.operationsmanagement/solutions', 'microsoft.peering/peeringservices', 'microsoft.powerbi/tenants', 'microsoft.powerbi/tenants/workspaces', 'microsoft.powerbidedicated/capacities', 'microsoft.purview/accounts', 'microsoft.recoveryservices/vaults', 'microsoft.relay/namespaces', 'microsoft.resources/subscriptions', 'microsoft.resources/subscriptions/resourcegroups', 'microsoft.search/searchservices', 'microsoft.securityinsights/settings', 'microsoft.servicebus/namespaces', 'microsoft.signalrservice/signalr', 'microsoft.signalrservice/webpubsub', 'microsoft.singularity/accounts', 'microsoft.sql/managedinstances', 'microsoft.sql/managedinstances/databases', 'microsoft.sql/servers/databases', 'microsoft.sql/servers/elasticpools', 'microsoft.storage/storageaccounts', 'microsoft.storage/storageaccounts/blobservices', 'microsoft.storage/storageaccounts/fileservices', 'microsoft.storage/storageaccounts/queueservices', 'microsoft.storage/storageaccounts/tableservices', 'microsoft.storagecache/caches', 'microsoft.storagesync/storagesyncservices', 'microsoft.streamanalytics/streamingjobs', 'microsoft.synapse/workspaces', 'microsoft.synapse/workspaces/bigdatapools', 'microsoft.synapse/workspaces/kustopools', 'microsoft.synapse/workspaces/scopepools', 'microsoft.synapse/workspaces/sqlpools', 'microsoft.timeseriesinsights/environments', 'microsoft.timeseriesinsights/environments/eventsources', 'microsoft.videoindexer/accounts', 'microsoft.vmwarecloudsimple/virtualmachines', 'microsoft.web/hostingenvironments', 'microsoft.web/hostingenvironments/workerpools', 'microsoft.web/serverfarms', 'microsoft.web/sites', 'microsoft.web/sites/slots'];

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/metricNamespaces.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "supportedMetricNamespaces": () => (/* binding */ supportedMetricNamespaces)
/* harmony export */ });
/**
This list is obtained parsing https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/metrics-supported
To programatically get the list, execute in the browser console:
 
 const i = [];
 document.querySelectorAll('*[id]').forEach((el) => { 
  if(el.textContent.match(/^(microsoft|Microsoft|Wandisco)/)) {
    i.push(el.textContent)
  }});
  i;
 
Note: Validate that the output makes sense, the format of the page may change.
 */
const supportedMetricNamespaces = ['microsoft.aadiam/azureADMetrics', 'Microsoft.AnalysisServices/servers', 'Microsoft.ApiManagement/service', 'Microsoft.AppConfiguration/configurationStores', 'Microsoft.AppPlatform/Spring', 'Microsoft.Automation/automationAccounts', 'microsoft.avs/privateClouds', 'Microsoft.Batch/batchAccounts', 'Microsoft.BatchAI/workspaces', 'microsoft.bing/accounts', 'Microsoft.Blockchain/blockchainMembers', 'microsoft.botservice/botservices', 'Microsoft.Cache/redis', 'Microsoft.Cache/redisEnterprise', 'Microsoft.Cdn/cdnwebapplicationfirewallpolicies', 'Microsoft.Cdn/profiles', 'Microsoft.ClassicCompute/domainNames/slots/roles', 'Microsoft.ClassicCompute/virtualMachines', 'Microsoft.ClassicStorage/storageAccounts', 'Microsoft.ClassicStorage/storageAccounts/blobServices', 'Microsoft.ClassicStorage/storageAccounts/fileServices', 'Microsoft.ClassicStorage/storageAccounts/queueServices', 'Microsoft.ClassicStorage/storageAccounts/tableServices', 'Microsoft.Cloudtest/hostedpools', 'Microsoft.Cloudtest/pools', 'Microsoft.ClusterStor/nodes', 'Microsoft.CognitiveServices/accounts', 'Microsoft.Communication/CommunicationServices', 'Microsoft.Compute/cloudServices', 'Microsoft.Compute/cloudServices/roles', 'microsoft.compute/disks', 'Microsoft.Compute/virtualMachines', 'Microsoft.Compute/virtualMachineScaleSets', 'Microsoft.Compute/virtualMachineScaleSets/virtualMachines', 'Microsoft.ConnectedCache/CacheNodes', 'Microsoft.ConnectedVehicle/platformAccounts', 'Microsoft.ContainerInstance/containerGroups', 'Microsoft.ContainerRegistry/registries', 'Microsoft.ContainerService/managedClusters', 'Microsoft.CustomProviders/resourceproviders', 'Microsoft.DataBoxEdge/dataBoxEdgeDevices', 'Microsoft.DataCollaboration/workspaces', 'Microsoft.DataFactory/datafactories', 'Microsoft.DataFactory/factories', 'Microsoft.DataLakeAnalytics/accounts', 'Microsoft.DataLakeStore/accounts', 'Microsoft.DataShare/accounts', 'Microsoft.DBforMariaDB/servers', 'Microsoft.DBforMySQL/flexibleServers', 'Microsoft.DBforMySQL/servers', 'Microsoft.DBforPostgreSQL/flexibleServers', 'Microsoft.DBForPostgreSQL/serverGroupsv2', 'Microsoft.DBforPostgreSQL/servers', 'Microsoft.DBforPostgreSQL/serversv2', 'Microsoft.Devices/ElasticPools', 'Microsoft.Devices/ElasticPools/IotHubTenants', 'Microsoft.Devices/IotHubs', 'Microsoft.Devices/provisioningServices', 'Microsoft.DigitalTwins/digitalTwinsInstances', 'Microsoft.DocumentDB/cassandraClusters', 'Microsoft.DocumentDB/DatabaseAccounts', 'Microsoft.EventGrid/domains', 'Microsoft.EventGrid/eventSubscriptions', 'Microsoft.EventGrid/extensionTopics', 'Microsoft.EventGrid/partnerNamespaces', 'Microsoft.EventGrid/partnerTopics', 'Microsoft.EventGrid/systemTopics', 'Microsoft.EventGrid/topics', 'Microsoft.EventHub/clusters', 'Microsoft.EventHub/Namespaces', 'Microsoft.HDInsight/clusters', 'Microsoft.HealthcareApis/services', 'Microsoft.HealthcareApis/workspaces/fhirservices', 'Microsoft.HealthcareApis/workspaces/iotconnectors', 'microsoft.hybridnetwork/networkfunctions', 'microsoft.hybridnetwork/virtualnetworkfunctions', 'microsoft.insights/autoscalesettings', 'Microsoft.Insights/Components', 'Microsoft.IoTCentral/IoTApps', 'microsoft.keyvault/managedhsms', 'Microsoft.KeyVault/vaults', 'microsoft.kubernetes/connectedClusters', 'Microsoft.Kusto/Clusters', 'Microsoft.Logic/integrationServiceEnvironments', 'Microsoft.Logic/Workflows', 'Microsoft.MachineLearningServices/workspaces', 'Microsoft.Maps/accounts', 'Microsoft.Media/mediaservices', 'Microsoft.Media/mediaservices/liveEvents', 'Microsoft.Media/mediaservices/streamingEndpoints', 'Microsoft.Media/videoanalyzers', 'Microsoft.MixedReality/remoteRenderingAccounts', 'Microsoft.MixedReality/spatialAnchorsAccounts', 'Microsoft.NetApp/netAppAccounts/capacityPools', 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes', 'Microsoft.Network/applicationgateways', 'Microsoft.Network/azureFirewalls', 'microsoft.network/bastionHosts', 'Microsoft.Network/connections', 'Microsoft.Network/dnszones', 'Microsoft.Network/expressRouteCircuits', 'Microsoft.Network/expressRouteCircuits/peerings', 'Microsoft.Network/expressRouteGateways', 'Microsoft.Network/expressRoutePorts', 'Microsoft.Network/frontdoors', 'Microsoft.Network/loadBalancers', 'Microsoft.Network/natGateways', 'Microsoft.Network/networkInterfaces', 'Microsoft.Network/networkWatchers/connectionMonitors', 'microsoft.network/p2svpngateways', 'Microsoft.Network/privateDnsZones', 'Microsoft.Network/privateEndpoints', 'Microsoft.Network/privateLinkServices', 'Microsoft.Network/publicIPAddresses', 'Microsoft.Network/trafficManagerProfiles', 'Microsoft.Network/virtualHubs', 'microsoft.network/virtualnetworkgateways', 'Microsoft.Network/virtualNetworks', 'Microsoft.Network/virtualRouters', 'microsoft.network/vpngateways', 'Microsoft.NotificationHubs/Namespaces/NotificationHubs', 'Microsoft.OperationalInsights/workspaces', 'Microsoft.Peering/peerings', 'Microsoft.Peering/peeringServices', 'Microsoft.PowerBIDedicated/capacities', 'microsoft.purview/accounts', 'Microsoft.RecoveryServices/Vaults', 'Microsoft.Relay/namespaces', 'microsoft.resources/subscriptions', 'Microsoft.Search/searchServices', 'Microsoft.ServiceBus/Namespaces', 'Microsoft.SignalRService/SignalR', 'Microsoft.SignalRService/WebPubSub', 'Microsoft.Sql/managedInstances', 'Microsoft.Sql/servers/databases', 'Microsoft.Sql/servers/elasticPools', 'Microsoft.Storage/storageAccounts', 'Microsoft.Storage/storageAccounts/blobServices', 'Microsoft.Storage/storageAccounts/fileServices', 'Microsoft.Storage/storageAccounts/queueServices', 'Microsoft.Storage/storageAccounts/tableServices', 'Microsoft.StorageCache/caches', 'microsoft.storagesync/storageSyncServices', 'Microsoft.StreamAnalytics/streamingjobs', 'Microsoft.Synapse/workspaces', 'Microsoft.Synapse/workspaces/bigDataPools', 'Microsoft.Synapse/workspaces/kustoPools', 'Microsoft.Synapse/workspaces/sqlPools', 'Microsoft.TimeSeriesInsights/environments', 'Microsoft.TimeSeriesInsights/environments/eventsources', 'Microsoft.VMwareCloudSimple/virtualMachines', 'Microsoft.Web/connections', 'Microsoft.Web/hostingEnvironments', 'Microsoft.Web/hostingEnvironments/multiRolePools', 'Microsoft.Web/hostingEnvironments/workerPools', 'Microsoft.Web/serverfarms', 'Microsoft.Web/sites', 'Microsoft.Web/sites/slots', 'Microsoft.Web/staticSites', 'Wandisco.Fusion/migrators'];

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/resourceTypes.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "resourceTypeDisplayNames": () => (/* binding */ resourceTypeDisplayNames)
/* harmony export */ });
/**
This list is obtained parsing https://docs.microsoft.com/en-us/azure/governance/resource-graph/reference/supported-tables-resources
To programatically get the list, execute in the browser console:
 
 const i = {};
 document.querySelectorAll('li').forEach((li) => { 
    const m = li.textContent.match(/(.*\..*\/.*?)\s\((.*)\)/);
    if (m) {
      i[m[1].toLowerCase()] = m[2];
    }
  });
  i;
 
Note: Validate that the output makes sense, the format of the page may change.
 */
const resourceTypeDisplayNames = {
  'microsoft.recoveryservices/vaults/backupfabrics/protectioncontainers/protecteditems': 'Backup Items',
  'microsoft.resources/subscriptions': 'Subscriptions',
  'microsoft.resources/subscriptions/resourcegroups': 'Resource groups',
  'citrix.services/xenappessentials': 'Citrix Virtual Apps Essentials',
  'citrix.services/xendesktopessentials': 'Citrix Virtual Desktops Essentials',
  'dynatrace.observability/monitors': 'Dynatrace',
  'github.enterprise/accounts': 'GitHub AE',
  'microsoft.aad/domainservices': 'Azure AD Domain Services',
  'microsoft.aadiam/privatelinkforazuread': 'Private Link for Azure AD',
  'microsoft.agfoodplatform/farmbeats': 'Azure FarmBeats',
  'microsoft.analysisservices/servers': 'Analysis Services',
  'microsoft.anybuild/clusters': 'AnyBuild clusters',
  'microsoft.apimanagement/service': 'API Management services',
  'microsoft.appconfiguration/configurationstores': 'App Configuration',
  'microsoft.appplatform/spring': 'Azure Spring Cloud',
  'microsoft.attestation/attestationproviders': 'Attestation providers',
  'microsoft.authorization/resourcemanagementprivatelinks': 'Resource management private links',
  'microsoft.automation/automationaccounts': 'Automation Accounts',
  'microsoft.automation/automationaccounts/runbooks': 'Runbook',
  'microsoft.autonomoussystems/workspaces': 'Bonsai',
  'microsoft.avs/privateclouds': 'AVS Private clouds',
  'microsoft.azureactivedirectory/b2cdirectories': 'B2C Tenants',
  'microsoft.azureactivedirectory/guestusages': 'Guest Usages',
  'microsoft.azurearcdata/datacontrollers': 'Azure Arc data controllers',
  'microsoft.azurearcdata/postgresinstances': 'Azure Arc-enabled PostgreSQL Hyperscale server groups',
  'microsoft.azurearcdata/sqlmanagedinstances': 'SQL managed instances - Azure Arc',
  'microsoft.azurearcdata/sqlserverinstances': 'SQL Server - Azure Arc',
  'microsoft.azuredata/sqlserverregistrations': 'SQL Server registries',
  'microsoft.azurepercept/accounts': 'Azure Percept accounts',
  'microsoft.azurestackhci/clusters': 'Azure Stack HCI',
  'microsoft.azurestackhci/virtualmachines': 'Azure Stack HCI virtual machine - Azure Arc',
  'microsoft.baremetal/crayservers': 'Cray Servers',
  'microsoft.baremetal/monitoringservers': 'Monitoring Servers',
  'microsoft.baremetalinfrastructure/baremetalinstances': 'BareMetal Instances',
  'microsoft.batch/batchaccounts': 'Batch accounts',
  'microsoft.bing/accounts': 'Bing Resources',
  'microsoft.botservice/botservices': 'Bot Services',
  'microsoft.cache/redis': 'Azure Cache for Redis',
  'microsoft.cache/redisenterprise': 'Redis Enterprise',
  'microsoft.cdn/cdnwebapplicationfirewallpolicies': 'Content Delivery Network WAF policies',
  'microsoft.cdn/profiles (front doors standard/premium': 'Preview)',
  'microsoft.cdn/profiles/afdendpoints': 'Endpoints',
  'microsoft.cdn/profiles/endpoints': 'Endpoints',
  'microsoft.certificateregistration/certificateorders': 'App Service Certificates',
  'microsoft.chaos/chaosexperiments': 'Chaos Experiments (Classic)',
  'microsoft.chaos/experiments': 'Chaos Experiments',
  'microsoft.classiccompute/domainnames': 'Cloud services (classic)',
  'microsoft.classiccompute/virtualmachines': 'Virtual machines (classic)',
  'microsoft.classicnetwork/networksecuritygroups': 'Network security groups (classic)',
  'microsoft.classicnetwork/reservedips': 'Reserved IP addresses (classic)',
  'microsoft.classicnetwork/virtualnetworks': 'Virtual networks (classic)',
  'microsoft.classicstorage/storageaccounts': 'Storage accounts (classic)',
  'microsoft.cloudtest/accounts': 'CloudTest Accounts',
  'microsoft.cloudtest/hostedpools': '1ES Hosted Pools',
  'microsoft.cloudtest/images': 'CloudTest Images',
  'microsoft.cloudtest/pools': 'CloudTest Pools',
  'microsoft.clusterstor/nodes': 'ClusterStors',
  'microsoft.cognitiveservices/accounts': 'Cognitive Services',
  'microsoft.compute/availabilitysets': 'Availability sets',
  'microsoft.compute/capacityreservationgroups': 'Capacity Reservation Groups',
  'microsoft.compute/cloudservices': 'Cloud services (extended support)',
  'microsoft.compute/diskaccesses': 'Disk Accesses',
  'microsoft.compute/diskencryptionsets': 'Disk Encryption Sets',
  'microsoft.compute/disks': 'Disks',
  'microsoft.compute/galleries': 'Azure compute galleries',
  'microsoft.compute/galleries/applications': 'VM application definitions',
  'microsoft.compute/galleries/applications/versions': 'VM application versions',
  'microsoft.compute/galleries/images': 'VM image definitions',
  'microsoft.compute/galleries/images/versions': 'VM image versions',
  'microsoft.compute/hostgroups': 'Host groups',
  'microsoft.compute/hostgroups/hosts': 'Hosts',
  'microsoft.compute/images': 'Images',
  'microsoft.compute/proximityplacementgroups': 'Proximity placement groups',
  'microsoft.compute/restorepointcollections': 'Restore Point Collections',
  'microsoft.compute/snapshots': 'Snapshots',
  'microsoft.compute/sshpublickeys': 'SSH keys',
  'microsoft.compute/virtualmachines': 'Virtual machines',
  'microsoft.compute/virtualmachinescalesets': 'Virtual machine scale sets',
  'microsoft.confidentialledger/ledgers': 'Confidential Ledgers',
  'microsoft.confluent/organizations': 'Confluent organizations',
  'microsoft.connectedcache/cachenodes': 'Connected Cache Resources',
  'microsoft.connectedcache/enterprisecustomers': 'Connected Cache Resources',
  'microsoft.connectedvehicle/platformaccounts': 'Connected Vehicle Platforms',
  'microsoft.connectedvmwarevsphere/vcenters': 'VMware vCenters',
  'microsoft.connectedvmwarevsphere/virtualmachines': 'VMware + AVS virtual machines',
  'microsoft.containerinstance/containergroups': 'Container instances',
  'microsoft.containerregistry/registries': 'Container registries',
  'microsoft.containerregistry/registries/replications': 'Container registry replications',
  'microsoft.containerregistry/registries/webhooks': 'Container registry webhooks',
  'microsoft.containerservice/managedclusters': 'Kubernetes services',
  'microsoft.dashboard/grafana': 'Grafana Workspaces',
  'microsoft.databox/jobs': 'Azure Data Box',
  'microsoft.databoxedge/databoxedgedevices': 'Azure Stack Edge / Data Box Gateway',
  'microsoft.databricks/workspaces': 'Azure Databricks Services',
  'microsoft.datacatalog/catalogs': 'Data Catalog',
  'microsoft.datacollaboration/workspaces': 'Project CI',
  'microsoft.datadog/monitors': 'Datadog',
  'microsoft.datafactory/datafactories': 'Data factories',
  'microsoft.datafactory/factories': 'Data factories (V2)',
  'microsoft.datalakeanalytics/accounts': 'Data Lake Analytics',
  'microsoft.datalakestore/accounts': 'Data Lake Storage Gen1',
  'microsoft.datamigration/services': 'Azure Database Migration Services',
  'microsoft.datamigration/services/projects': 'Azure Database Migration Projects',
  'microsoft.datamigration/sqlmigrationservices': 'Azure Database Migration Services',
  'microsoft.dataprotection/backupvaults': 'Backup vaults',
  'microsoft.dataprotection/resourceguards': 'Resource Guards (Preview)',
  'microsoft.datareplication/replicationvaults': 'Site Recovery Vaults',
  'microsoft.datashare/accounts': 'Data Shares',
  'microsoft.dbformariadb/servers': 'Azure Database for MariaDB servers',
  'microsoft.dbformysql/flexibleservers': 'Azure Database for MySQL flexible servers',
  'microsoft.dbformysql/servers': 'Azure Database for MySQL servers',
  'microsoft.dbforpostgresql/flexibleservers': 'Azure Database for PostgreSQL flexible servers',
  'microsoft.dbforpostgresql/servergroups': 'Azure Database for PostgreSQL server groups',
  'microsoft.dbforpostgresql/servergroupsv2': 'Azure Database for PostgreSQL server groups',
  'microsoft.dbforpostgresql/servers': 'Azure Database for PostgreSQL servers',
  'microsoft.dbforpostgresql/serversv2': 'Azure Database for PostgreSQL servers v2',
  'microsoft.deploymentmanager/rollouts': 'Rollouts',
  'microsoft.desktopvirtualization/applicationgroups': 'Application groups',
  'microsoft.desktopvirtualization/hostpools': 'Host pools',
  'microsoft.desktopvirtualization/scalingplans': 'Scaling plans',
  'microsoft.desktopvirtualization/workspaces': 'Workspaces',
  'microsoft.devices/iothubs': 'IoT Hub',
  'microsoft.devices/provisioningservices': 'Device Provisioning Services',
  'microsoft.deviceupdate/accounts': 'Device Update for IoT Hubs',
  'microsoft.devops/pipelines': 'DevOps Starter',
  'microsoft.devtestlab/labs': 'DevTest Labs',
  'microsoft.devtestlab/labs/virtualmachines': 'Virtual machines',
  'microsoft.digitaltwins/digitaltwinsinstances': 'Azure Digital Twins',
  'microsoft.documentdb/cassandraclusters': 'Azure Managed Instance for Apache Cassandra',
  'microsoft.documentdb/databaseaccounts': 'Azure Cosmos DB accounts',
  'microsoft.domainregistration/domains': 'App Service Domains',
  'microsoft.edgeorder/addresses': 'Azure Edge Hardware Center Address',
  'microsoft.edgeorder/orderitems': 'Azure Edge Hardware Center',
  'microsoft.elastic/monitors': 'Elasticsearch (Elastic Cloud)',
  'microsoft.eventgrid/domains': 'Event Grid Domains',
  'microsoft.eventgrid/partnernamespaces': 'Event Grid Partner Namespaces',
  'microsoft.eventgrid/partnerregistrations': 'Event Grid Partner Registrations',
  'microsoft.eventgrid/partnertopics': 'Event Grid Partner Topics',
  'microsoft.eventgrid/systemtopics': 'Event Grid System Topics',
  'microsoft.eventgrid/topics': 'Event Grid Topics',
  'microsoft.eventhub/clusters': 'Event Hubs Clusters',
  'microsoft.eventhub/namespaces': 'Event Hubs Namespaces',
  'microsoft.experimentation/experimentworkspaces': 'Experiment Workspaces',
  'microsoft.extendedlocation/customlocations': 'Custom locations',
  'microsoft.fidalgo/devcenters': 'Fidalgo DevCenters',
  'microsoft.fidalgo/networksettings': 'Network Configurations',
  'microsoft.fidalgo/projects': 'Fidalgo Projects',
  'microsoft.fidalgo/projects/environments': 'Fidalgo Environments',
  'microsoft.fluidrelay/fluidrelayservers': 'Fluid Relay',
  'microsoft.genomics/accounts': 'Genomics accounts',
  'microsoft.hanaonazure/hanainstances': 'SAP HANA on Azure',
  'microsoft.hanaonazure/sapmonitors': 'Azure Monitors for SAP Solutions',
  'microsoft.hdinsight/clusterpools': 'HDInsight cluster pools',
  'microsoft.hdinsight/clusterpools/clusters': 'HDInsight gen2 clusters',
  'microsoft.hdinsight/clusterpools/clusters/sessionclusters': 'HDInsight session clusters',
  'microsoft.hdinsight/clusters': 'HDInsight clusters',
  'microsoft.healthbot/healthbots': 'Azure Health Bot',
  'microsoft.healthcareapis/services': 'Azure API for FHIR',
  'microsoft.healthcareapis/workspaces': 'Healthcare APIs Workspaces',
  'microsoft.healthcareapis/workspaces/dicomservices': 'DICOM services',
  'microsoft.healthcareapis/workspaces/fhirservices': 'FHIR services',
  'microsoft.healthcareapis/workspaces/iotconnectors': 'IoT connectors',
  'microsoft.hpcworkbench/instances': 'HPC Workbenches (preview)',
  'microsoft.hpcworkbench/instances/chambers': 'Chambers (preview)',
  'microsoft.hpcworkbench/instances/chambers/accessprofiles': 'Chamber Profiles (preview)',
  'microsoft.hpcworkbench/instances/chambers/workloads': 'Chamber VMs (preview)',
  'microsoft.hpcworkbench/instances/consortiums': 'Consortiums (preview)',
  'microsoft.hybridcompute/machines': 'Servers - Azure Arc',
  'microsoft.hybridcompute/privatelinkscopes': 'Azure Arc Private Link Scopes',
  'microsoft.hybriddata/datamanagers': 'StorSimple Data Managers',
  'microsoft.hybridnetwork/devices': 'Azure Network Function Manager – Devices',
  'microsoft.hybridnetwork/networkfunctions': 'Azure Network Function Manager – Network Functions',
  'microsoft.importexport/jobs': 'Import/export jobs',
  'microsoft.insights/components': 'Application Insights',
  'microsoft.insights/datacollectionendpoints': 'Data collection endpoints',
  'microsoft.insights/datacollectionrules': 'Data collection rules',
  'microsoft.insights/privatelinkscopes': 'Azure Monitor Private Link Scopes',
  'microsoft.insights/webtests': 'Availability tests',
  'microsoft.insights/workbooks': 'Azure Workbooks',
  'microsoft.insights/workbooktemplates': 'Azure Workbook Templates',
  'microsoft.iotcentral/iotapps': 'IoT Central Applications',
  'microsoft.keyvault/vaults': 'Key vaults',
  'microsoft.kubernetes/connectedclusters': 'Kubernetes - Azure Arc',
  'microsoft.kusto/clusters': 'Azure Data Explorer Clusters',
  'microsoft.kusto/clusters/databases': 'Azure Data Explorer Databases',
  'microsoft.labservices/labaccounts': 'Lab accounts',
  'microsoft.labservices/labplans': 'Lab plans',
  'microsoft.labservices/labs': 'Labs',
  'microsoft.loadtestservice/loadtests': 'Azure Load Testing',
  'microsoft.logic/integrationaccounts': 'Integration accounts',
  'microsoft.logic/integrationserviceenvironments': 'Integration Service Environments',
  'microsoft.logic/integrationserviceenvironments/managedapis': 'Managed Connector',
  'microsoft.logic/workflows': 'Logic apps',
  'microsoft.logz/monitors': 'Logz main account',
  'microsoft.logz/monitors/accounts': 'Logz sub account',
  'microsoft.logz/monitors/metricssource': 'Logz metrics data source',
  'microsoft.machinelearning/commitmentplans': 'Machine Learning Studio (classic) web service plans',
  'microsoft.machinelearning/webservices': 'Machine Learning Studio (classic) web services',
  'microsoft.machinelearning/workspaces': 'Machine Learning Studio (classic) workspaces',
  'microsoft.machinelearningservices/workspaces': 'Machine learning',
  'microsoft.machinelearningservices/workspaces/onlineendpoints': 'Machine learning online endpoints',
  'microsoft.machinelearningservices/workspaces/onlineendpoints/deployments': 'Machine learning online deployments',
  'microsoft.maintenance/maintenanceconfigurations': 'Maintenance Configurations',
  'microsoft.managedidentity/userassignedidentities': 'Managed Identities',
  'microsoft.maps/accounts': 'Azure Maps Accounts',
  'microsoft.maps/accounts/creators': 'Azure Maps Creator Resources',
  'microsoft.media/mediaservices': 'Media Services',
  'microsoft.media/mediaservices/liveevents': 'Live events',
  'microsoft.media/mediaservices/streamingendpoints': 'Streaming Endpoints',
  'microsoft.media/videoanalyzers': 'Video Analyzers',
  'microsoft.migrate/projects': 'Migration projects',
  'microsoft.mixedreality/objectanchorsaccounts': 'Object Anchors Accounts',
  'microsoft.mixedreality/objectunderstandingaccounts': 'Object Understanding Accounts',
  'microsoft.mixedreality/remoterenderingaccounts': 'Remote Rendering Accounts',
  'microsoft.mixedreality/spatialanchorsaccounts': 'Spatial Anchors Accounts',
  'microsoft.mobilenetwork/mobilenetworks': 'Mobile Networks',
  'microsoft.mobilenetwork/mobilenetworks/datanetworks': 'Data Networks',
  'microsoft.mobilenetwork/mobilenetworks/services': 'Services',
  'microsoft.mobilenetwork/mobilenetworks/simpolicies': 'Sim Policies',
  'microsoft.mobilenetwork/mobilenetworks/sites': 'Mobile Network Sites',
  'microsoft.mobilenetwork/mobilenetworks/slices': 'Slices',
  'microsoft.mobilenetwork/packetcorecontrolplanes': 'Packet Core Control Planes',
  'microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes': 'Packet Core Data Planes',
  'microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes/attacheddatanetworks': 'Attached Data Networks',
  'microsoft.mobilenetwork/sims': 'Sims',
  'microsoft.netapp/netappaccounts': 'NetApp accounts',
  'microsoft.netapp/netappaccounts/capacitypools': 'Capacity pools',
  'microsoft.netapp/netappaccounts/capacitypools/volumes': 'Volumes',
  'microsoft.netapp/netappaccounts/capacitypools/volumes/snapshots': 'Snapshots',
  'microsoft.netapp/netappaccounts/snapshotpolicies': 'Snapshot policies',
  'microsoft.network/applicationgateways': 'Application gateways',
  'microsoft.network/applicationgatewaywebapplicationfirewallpolicies': 'Application Gateway WAF policies',
  'microsoft.network/applicationsecuritygroups': 'Application security groups',
  'microsoft.network/azurefirewalls': 'Firewalls',
  'microsoft.network/bastionhosts': 'Bastions',
  'microsoft.network/connections': 'Connections',
  'microsoft.network/customipprefixes': 'Custom IP Prefixes',
  'microsoft.network/ddosprotectionplans': 'DDoS protection plans',
  'microsoft.network/dnsforwardingrulesets': 'Dns Forwarding Rulesets',
  'microsoft.network/dnsresolvers': 'DNS Private Resolvers',
  'microsoft.network/dnszones': 'DNS zones',
  'microsoft.network/expressroutecircuits': 'ExpressRoute circuits',
  'microsoft.network/expressrouteports': 'ExpressRoute Direct',
  'microsoft.network/firewallpolicies': 'Firewall Policies',
  'microsoft.network/frontdoors': 'Front Doors',
  'microsoft.network/frontdoorwebapplicationfirewallpolicies': 'Web Application Firewall policies (WAF)',
  'microsoft.network/ipgroups': 'IP Groups',
  'microsoft.network/loadbalancers': 'Load balancers',
  'microsoft.network/localnetworkgateways': 'Local network gateways',
  'microsoft.network/natgateways': 'NAT gateways',
  'microsoft.network/networkexperimentprofiles': 'Internet Analyzer profiles',
  'microsoft.network/networkinterfaces': 'Network interfaces',
  'microsoft.network/networkmanagers': 'Network Managers',
  'microsoft.network/networksecuritygroups': 'Network security groups',
  'microsoft.network/networkwatchers': 'Network Watchers',
  'microsoft.network/networkwatchers/flowlogs': 'NSG Flow Logs',
  'microsoft.network/privatednszones': 'Private DNS zones',
  'microsoft.network/privateendpoints': 'Private endpoints',
  'microsoft.network/privatelinkservices': 'Private link services',
  'microsoft.network/publicipaddresses': 'Public IP addresses',
  'microsoft.network/publicipprefixes': 'Public IP Prefixes',
  'microsoft.network/routefilters': 'Route filters',
  'microsoft.network/routetables': 'Route tables',
  'microsoft.network/serviceendpointpolicies': 'Service endpoint policies',
  'microsoft.network/trafficmanagerprofiles': 'Traffic Manager profiles',
  'microsoft.network/virtualnetworkgateways': 'Virtual network gateways',
  'microsoft.network/virtualnetworks': 'Virtual networks',
  'microsoft.network/virtualwans': 'Virtual WANs',
  'microsoft.notificationhubs/namespaces': 'Notification Hub Namespaces',
  'microsoft.notificationhubs/namespaces/notificationhubs': 'Notification Hubs',
  'microsoft.openenergyplatform/energyservices': 'Project Oak Forest',
  'microsoft.openlogisticsplatform/workspaces': 'Open Supply Chain Platform',
  'microsoft.operationalinsights/querypacks': 'Log Analytics query packs',
  'microsoft.operationalinsights/workspaces': 'Log Analytics workspaces',
  'microsoft.operationsmanagement/solutions': 'Solutions',
  'microsoft.orbital/contactprofiles': 'Contact Profiles',
  'microsoft.orbital/edgesites': 'Edge Sites',
  'microsoft.orbital/groundstations': 'Ground Stations',
  'microsoft.orbital/l2connections': 'L2 Connections',
  'microsoft.orbital/spacecrafts': 'Spacecrafts',
  'microsoft.peering/peerings': 'Peerings',
  'microsoft.peering/peeringservices': 'Peering Services',
  'microsoft.playfab/playeraccountpools': 'PlayFab player account pools',
  'microsoft.playfab/titles': 'PlayFab titles',
  'microsoft.portal/dashboards': 'Shared dashboards',
  'microsoft.powerbidedicated/capacities': 'Power BI Embedded',
  'microsoft.purview/accounts': 'Microsoft Purview accounts',
  'microsoft.quantum/workspaces': 'Quantum Workspaces',
  'microsoft.recommendationsservice/accounts': 'Intelligent Recommendations Accounts',
  'microsoft.recommendationsservice/accounts/modeling': 'Modeling',
  'microsoft.recommendationsservice/accounts/serviceendpoints': 'Service Endpoints',
  'microsoft.recoveryservices/vaults': 'Recovery Services vaults',
  'microsoft.redhatopenshift/openshiftclusters': 'Azure Red Hat OpenShift',
  'microsoft.relay/namespaces': 'Relays',
  'microsoft.resourceconnector/appliances': 'Resource bridges',
  'microsoft.resourcegraph/queries': 'Resource Graph queries',
  'microsoft.resources/deploymentscripts': 'Deployment Scripts',
  'microsoft.resources/templatespecs': 'Template specs',
  'microsoft.saas/applications': 'Software as a Service (classic)',
  'microsoft.saas/resources': 'SaaS',
  'microsoft.scom/managedinstances': 'Aquila Instances',
  'microsoft.scvmm/virtualmachines': 'SCVMM virtual machine - Azure Arc',
  'microsoft.scvmm/vmmservers': 'SCVMM management servers',
  'microsoft.search/searchservices': 'Search services',
  'microsoft.securitydetonation/chambers': 'Security Detonation Chambers',
  'microsoft.servicebus/namespaces': 'Service Bus Namespaces',
  'microsoft.servicefabric/clusters': 'Service Fabric clusters',
  'microsoft.servicefabric/managedclusters': 'Service Fabric managed clusters',
  'microsoft.serviceshub/connectors': 'Services Hub Connectors',
  'microsoft.signalrservice/signalr': 'SignalR',
  'microsoft.signalrservice/webpubsub': 'Web PubSub Service',
  'microsoft.solutions/applicationdefinitions': 'Service catalog managed application definitions',
  'microsoft.solutions/applications': 'Managed applications',
  'microsoft.sql/instancepools': 'Instance pools',
  'microsoft.sql/managedinstances': 'SQL managed instances',
  'microsoft.sql/managedinstances/databases': 'Managed databases',
  'microsoft.sql/servers': 'SQL servers',
  'microsoft.sql/servers/databases': 'SQL databases',
  'microsoft.sql/servers/elasticpools': 'SQL elastic pools',
  'microsoft.sql/servers/jobagents': 'Elastic Job agents',
  'microsoft.sql/virtualclusters': 'Virtual clusters',
  'microsoft.sqlvirtualmachine/sqlvirtualmachines': 'SQL virtual machines',
  'microsoft.storage/storageaccounts': 'Storage accounts',
  'microsoft.storagecache/amlfilesystems': 'Lustre File Systems',
  'microsoft.storagecache/caches': 'HPC caches',
  'microsoft.storagepool/diskpools': 'Disk Pools',
  'microsoft.storagesync/storagesyncservices': 'Storage Sync Services',
  'microsoft.storagesyncdev/storagesyncservices': 'Storage Sync Services',
  'microsoft.storagesyncint/storagesyncservices': 'Storage Sync Services',
  'microsoft.storsimple/managers': 'StorSimple Device Managers',
  'microsoft.streamanalytics/clusters': 'Stream Analytics clusters',
  'microsoft.streamanalytics/streamingjobs': 'Stream Analytics jobs',
  'microsoft.synapse/privatelinkhubs': 'Azure Synapse Analytics (private link hubs)',
  'microsoft.synapse/workspaces': 'Azure Synapse Analytics',
  'microsoft.synapse/workspaces/bigdatapools': 'Apache Spark pools',
  'microsoft.synapse/workspaces/kustopools': 'Data Explorer pools (preview)',
  'microsoft.synapse/workspaces/sqlpools': 'Dedicated SQL pools',
  'microsoft.testbase/testbaseaccounts': 'Test Base Accounts',
  'microsoft.testbase/testbaseaccounts/packages': 'Test Base Packages',
  'microsoft.timeseriesinsights/environments': 'Time Series Insights environments',
  'microsoft.timeseriesinsights/environments/eventsources': 'Time Series Insights event sources',
  'microsoft.timeseriesinsights/environments/referencedatasets': 'Time Series Insights reference data sets',
  'microsoft.videoindexer/accounts': 'Video Analyzer for Media',
  'microsoft.virtualmachineimages/imagetemplates': 'Image Templates',
  'microsoft.visualstudio/account': 'Azure DevOps organizations',
  'microsoft.visualstudio/account/project': 'DevOps Starter',
  'microsoft.vmwarecloudsimple/dedicatedcloudnodes': 'CloudSimple Nodes',
  'microsoft.vmwarecloudsimple/dedicatedcloudservices': 'CloudSimple Services',
  'microsoft.vmwarecloudsimple/virtualmachines': 'CloudSimple Virtual Machines',
  'microsoft.vsonline/plans': 'Visual Studio Online Plans',
  'microsoft.web/connectiongateways': 'On-premises data gateways',
  'microsoft.web/connections': 'API Connections',
  'microsoft.web/containerapps': 'Container Apps',
  'microsoft.web/customapis': 'Logic Apps Custom Connector',
  'microsoft.web/hostingenvironments': 'App Service Environments',
  'microsoft.web/kubeenvironments': 'App Service Kubernetes Environments',
  'microsoft.web/serverfarms': 'App Service plans',
  'microsoft.web/sites': 'App Services',
  'microsoft.web/sites/slots': 'App Service (Slots)',
  'microsoft.web/staticsites': 'Static Web Apps',
  'microsoft.windowsesu/multipleactivationkeys': 'Windows Multiple Activation Keys',
  'microsoft.windowsiot/deviceservices': 'Windows 10 IoT Core Services',
  'microsoft.workloads/monitors': 'Azure Monitors for SAP Solutions (v2)',
  'microsoft.workloads/phpworkloads': 'Scalable WordPress on Linux',
  'microsoft.workloads/sapvirtualinstances': 'SAP Virtual Instances',
  'microsoft.workloads/sapvirtualinstances/applicationinstances': 'SAP app server instances',
  'microsoft.workloads/sapvirtualinstances/centralinstances': 'SAP central server instances',
  'microsoft.workloads/sapvirtualinstances/databaseinstances': 'SAP database server instances',
  'nginx.nginxplus/nginxdeployments': 'NGINX Deployment',
  'providers.test/statefulibizaengines': 'VLCentral Help',
  'wandisco.fusion/fusiongroups': 'LiveData Planes',
  'wandisco.fusion/fusiongroups/azurezones': 'Azure Zones',
  'wandisco.fusion/fusiongroups/azurezones/plugins': 'Plugins',
  'wandisco.fusion/fusiongroups/hivereplicationrules': 'Hive Replication Rules',
  'wandisco.fusion/fusiongroups/managedonpremzones': 'On-premises Zones',
  'wandisco.fusion/fusiongroups/replicationrules': 'Replication Rules',
  'wandisco.fusion/migrators': 'LiveData Migrators',
  'wandisco.fusion/migrators/exclusiontemplates': 'Exclusions',
  'wandisco.fusion/migrators/livedatamigrations': 'Migrations',
  'wandisco.fusion/migrators/metadatamigrations': 'Metadata Migrations',
  'wandisco.fusion/migrators/metadatatargets': 'Metadata Targets',
  'wandisco.fusion/migrators/pathmappings': 'Path Mappings',
  'wandisco.fusion/migrators/targets': 'Targets',
  'microsoft.security/insights/classification': 'Data Sensitivity Security Insights (Preview)',
  'microsoft.security/locations/alerts': 'Security Alerts'
};

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AzureLogAnalyticsDatasource)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./.yarn/cache/rxjs-npm-7.5.5-d0546b1ccb-e034f60805.zip/node_modules/rxjs/dist/esm5/internal/observable/from.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./.yarn/cache/rxjs-npm-7.5.5-d0546b1ccb-e034f60805.zip/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js");
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts");
/* harmony import */ var _credentials__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/credentials.ts");
/* harmony import */ var _log_analytics_querystring_builder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/common.ts");
/* harmony import */ var _response_parser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }











class AzureLogAnalyticsDatasource extends _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.DataSourceWithBackend {
  constructor(instanceSettings) {
    super(instanceSettings);

    _defineProperty(this, "resourcePath", void 0);

    _defineProperty(this, "azurePortalUrl", void 0);

    _defineProperty(this, "defaultSubscriptionId", void 0);

    _defineProperty(this, "azureMonitorPath", void 0);

    _defineProperty(this, "firstWorkspace", void 0);

    _defineProperty(this, "cache", void 0);

    this.instanceSettings = instanceSettings;
    this.cache = new Map();
    this.resourcePath = `${_utils_common__WEBPACK_IMPORTED_MODULE_6__.routeNames.logAnalytics}`;
    this.azureMonitorPath = `${_utils_common__WEBPACK_IMPORTED_MODULE_6__.routeNames.azureMonitor}/subscriptions`;
    const cloud = (0,_credentials__WEBPACK_IMPORTED_MODULE_3__.getAzureCloud)(instanceSettings);
    this.azurePortalUrl = (0,_credentials__WEBPACK_IMPORTED_MODULE_3__.getAzurePortalUrl)(cloud);
    this.defaultSubscriptionId = this.instanceSettings.jsonData.subscriptionId || '';
  }

  isConfigured() {
    // If validation didn't return any error then the data source is properly configured
    return !this.validateDatasource();
  }

  filterQuery(item) {
    var _item$azureLogAnalyti;

    return item.hide !== true && !!((_item$azureLogAnalyti = item.azureLogAnalytics) !== null && _item$azureLogAnalyti !== void 0 && _item$azureLogAnalyti.query) && (!!item.azureLogAnalytics.resource || !!item.azureLogAnalytics.workspace);
  }

  async getSubscriptions() {
    if (!this.isConfigured()) {
      return [];
    }

    const path = `${this.azureMonitorPath}?api-version=2019-03-01`;
    return await this.getResource(path).then(result => {
      return _response_parser__WEBPACK_IMPORTED_MODULE_7__["default"].parseSubscriptions(result);
    });
  }

  async getWorkspaces(subscription) {
    const response = await this.getWorkspaceList(subscription);
    return (0,lodash__WEBPACK_IMPORTED_MODULE_0__.map)(response.value, val => {
      return {
        text: val.name,
        value: val.id
      };
    }) || [];
  }

  getWorkspaceList(subscription) {
    const subscriptionId = (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)().replace(subscription || this.defaultSubscriptionId);
    const workspaceListUrl = this.azureMonitorPath + `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;
    return this.getResource(workspaceListUrl);
  }

  async getMetadata(resourceUri) {
    const path = `${this.resourcePath}/v1${resourceUri}/metadata`;
    const resp = await this.getResource(path);
    return resp;
  }

  async getKustoSchema(resourceUri) {
    const templateSrv = (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)();
    const interpolatedUri = templateSrv.replace(resourceUri, {}, _utils_common__WEBPACK_IMPORTED_MODULE_6__.interpolateVariable);
    const metadata = await this.getMetadata(interpolatedUri);
    return (0,_response_parser__WEBPACK_IMPORTED_MODULE_7__.transformMetadataToKustoSchema)(metadata, interpolatedUri, templateSrv.getVariables());
  }

  applyTemplateVariables(target, scopedVars) {
    const item = target.azureLogAnalytics;

    if (!item) {
      return target;
    }

    const templateSrv = (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)();
    const resource = templateSrv.replace(item.resource, scopedVars);
    let workspace = templateSrv.replace(item.workspace, scopedVars);

    if (!workspace && !resource && this.firstWorkspace) {
      workspace = this.firstWorkspace;
    }

    const query = templateSrv.replace(item.query, scopedVars, _utils_common__WEBPACK_IMPORTED_MODULE_6__.interpolateVariable);
    return Object.assign({}, target, {
      queryType: _types__WEBPACK_IMPORTED_MODULE_5__.AzureQueryType.LogAnalytics,
      azureLogAnalytics: {
        resultFormat: item.resultFormat,
        query,
        resource,
        // Workspace was removed in Grafana 8, but remains for backwards compat
        workspace
      }
    });
  }
  /**
   * Augment the results with links back to the azure console
   */


  query(request) {
    return super.query(request).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.mergeMap)(res => {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(this.processResponse(res));
    }));
  }

  async processResponse(res) {
    if (res.data) {
      for (const df of res.data) {
        var _df$meta, _df$meta$custom;

        const encodedQuery = (_df$meta = df.meta) === null || _df$meta === void 0 ? void 0 : (_df$meta$custom = _df$meta.custom) === null || _df$meta$custom === void 0 ? void 0 : _df$meta$custom.encodedQuery;

        if (encodedQuery && encodedQuery.length > 0) {
          const url = await this.buildDeepLink(df.meta.custom);

          if (url !== null && url !== void 0 && url.length) {
            for (const field of df.fields) {
              field.config.links = [{
                url: url,
                title: 'View in Azure Portal',
                targetBlank: true
              }];
            }
          }
        }
      }
    }

    return res;
  }

  async buildDeepLink(customMeta) {
    const base64Enc = encodeURIComponent(customMeta.encodedQuery);
    const workspaceId = customMeta.workspace;
    const subscription = customMeta.subscription;
    const details = await this.getWorkspaceDetails(workspaceId);

    if (!details.workspace || !details.resourceGroup) {
      return '';
    }

    const url = `${this.azurePortalUrl}/#blade/Microsoft_OperationsManagementSuite_Workspace/` + `AnalyticsBlade/initiator/AnalyticsShareLinkToQuery/isQueryEditorVisible/true/scope/` + `%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F${subscription}` + `%2Fresourcegroups%2F${details.resourceGroup}%2Fproviders%2Fmicrosoft.operationalinsights%2Fworkspaces%2F${details.workspace}` + `%22%7D%5D%7D/query/${base64Enc}/isQueryBase64Compressed/true/timespanInIsoFormat/P1D`;
    return url;
  }

  async getWorkspaceDetails(workspaceId) {
    if (!this.defaultSubscriptionId) {
      return {};
    }

    const response = await this.getWorkspaceList(this.defaultSubscriptionId);
    const details = response.value.find(o => {
      return o.properties.customerId === workspaceId;
    });

    if (!details) {
      return {};
    }

    const regex = /.*resourcegroups\/(.*)\/providers.*/;
    const results = regex.exec(details.id);

    if (!results || results.length < 2) {
      return {};
    }

    return {
      workspace: details.name,
      resourceGroup: results[1]
    };
  }
  /*
    In 7.5.x it used to be possible to set a default workspace id in the config on the auth page.
    This has been deprecated, however is still used by a few legacy template queries.
  */


  getDeprecatedDefaultWorkSpace() {
    return this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace;
  }

  buildQuery(query, options, workspace) {
    const querystringBuilder = new _log_analytics_querystring_builder__WEBPACK_IMPORTED_MODULE_4__["default"]((0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)().replace(query, {}, _utils_common__WEBPACK_IMPORTED_MODULE_6__.interpolateVariable), options, 'TimeGenerated');
    const querystring = querystringBuilder.generate().uriString;
    const path = (0,_components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_2__.isGUIDish)(workspace) ? `${this.resourcePath}/v1/workspaces/${workspace}/query?${querystring}` : `${this.resourcePath}/v1${workspace}/query?${querystring}`;
    const queries = [{
      datasource: this.getRef(),
      path: path,
      resultFormat: 'table'
    }];
    return queries;
  }

  async getDefaultOrFirstSubscription() {
    var _subscriptions$;

    if (this.defaultSubscriptionId) {
      return this.defaultSubscriptionId;
    }

    const subscriptions = await this.getSubscriptions();
    return (_subscriptions$ = subscriptions[0]) === null || _subscriptions$ === void 0 ? void 0 : _subscriptions$.value;
  }

  async getFirstWorkspace() {
    var _workspaces$;

    if (this.firstWorkspace) {
      return this.firstWorkspace;
    }

    const subscriptionId = await this.getDefaultOrFirstSubscription();

    if (!subscriptionId) {
      return undefined;
    }

    const workspaces = await this.getWorkspaces(subscriptionId);
    const workspace = (_workspaces$ = workspaces[0]) === null || _workspaces$ === void 0 ? void 0 : _workspaces$.value;

    if (workspace) {
      this.firstWorkspace = workspace;
    }

    return workspace;
  }

  annotationQuery(options) {
    if (!options.annotation.rawQuery) {
      return Promise.reject({
        message: 'Query missing in annotation definition'
      });
    }

    const queries = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);
    const promises = this.doQueries(queries);
    return Promise.all(promises).then(results => {
      const annotations = new _response_parser__WEBPACK_IMPORTED_MODULE_7__["default"](results).transformToAnnotations(options);
      return annotations;
    });
  }

  doQueries(queries) {
    return (0,lodash__WEBPACK_IMPORTED_MODULE_0__.map)(queries, query => {
      return this.getResource(query.path).then(result => {
        return {
          result: result,
          query: query
        };
      }).catch(err => {
        throw {
          error: err,
          query: query
        };
      });
    });
  }

  validateDatasource() {
    const authType = (0,_credentials__WEBPACK_IMPORTED_MODULE_3__.getAuthType)(this.instanceSettings);

    if (authType === 'clientsecret') {
      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {
        return {
          status: 'error',
          message: 'The Tenant Id field is required.'
        };
      }

      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {
        return {
          status: 'error',
          message: 'The Client Id field is required.'
        };
      }
    }

    return undefined;
  }

  isValidConfigField(field) {
    return typeof field === 'string' && field.length > 0;
  }

}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/response_parser.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ResponseParser),
/* harmony export */   "transformMetadataToKustoSchema": () => (/* binding */ transformMetadataToKustoSchema)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-data/src/index.ts");


class ResponseParser {
  constructor(results) {
    this.results = results;
  }

  parseQueryResult() {
    let data = [];
    let columns = [];

    for (let i = 0; i < this.results.length; i++) {
      if (this.results[i].result.tables.length === 0) {
        continue;
      }

      columns = this.results[i].result.tables[0].columns;
      const rows = this.results[i].result.tables[0].rows;

      if (this.results[i].query.resultFormat === 'time_series') {
        data = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.concat)(data, this.parseTimeSeriesResult(this.results[i].query, columns, rows));
      } else {
        data = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.concat)(data, this.parseTableResult(this.results[i].query, columns, rows));
      }
    }

    return data;
  }

  parseTimeSeriesResult(query, columns, rows) {
    const data = [];
    let timeIndex = -1;
    let metricIndex = -1;
    let valueIndex = -1;

    for (let i = 0; i < columns.length; i++) {
      if (timeIndex === -1 && columns[i].type === 'datetime') {
        timeIndex = i;
      }

      if (metricIndex === -1 && columns[i].type === 'string') {
        metricIndex = i;
      }

      if (valueIndex === -1 && ['int', 'long', 'real', 'double'].indexOf(columns[i].type) > -1) {
        valueIndex = i;
      }
    }

    if (timeIndex === -1) {
      throw new Error('No datetime column found in the result. The Time Series format requires a time column.');
    }

    (0,lodash__WEBPACK_IMPORTED_MODULE_0__.forEach)(rows, row => {
      const epoch = ResponseParser.dateTimeToEpoch(row[timeIndex]);
      const metricName = metricIndex > -1 ? row[metricIndex] : columns[valueIndex].name;
      const bucket = ResponseParser.findOrCreateBucket(data, metricName);
      bucket.datapoints.push([row[valueIndex], epoch]);
      bucket.refId = query.refId;
      bucket.meta = {
        executedQueryString: query.query
      };
    });
    return data;
  }

  parseTableResult(query, columns, rows) {
    const tableResult = {
      type: 'table',
      columns: (0,lodash__WEBPACK_IMPORTED_MODULE_0__.map)(columns, col => {
        return {
          text: col.name,
          type: col.type
        };
      }),
      rows: rows,
      refId: query.refId,
      meta: {
        executedQueryString: query.query
      }
    };
    return tableResult;
  }

  parseToVariables() {
    const queryResult = this.parseQueryResult();
    const variables = [];
    (0,lodash__WEBPACK_IMPORTED_MODULE_0__.forEach)(queryResult, result => {
      (0,lodash__WEBPACK_IMPORTED_MODULE_0__.forEach)((0,lodash__WEBPACK_IMPORTED_MODULE_0__.flattenDeep)(result.rows), row => {
        variables.push({
          text: row,
          value: row
        });
      });
    });
    return variables;
  }

  transformToAnnotations(options) {
    const queryResult = this.parseQueryResult();
    const list = [];
    (0,lodash__WEBPACK_IMPORTED_MODULE_0__.forEach)(queryResult, result => {
      let timeIndex = -1;
      let textIndex = -1;
      let tagsIndex = -1;

      for (let i = 0; i < result.columns.length; i++) {
        if (timeIndex === -1 && result.columns[i].type === 'datetime') {
          timeIndex = i;
        }

        if (textIndex === -1 && result.columns[i].text.toLowerCase() === 'text') {
          textIndex = i;
        }

        if (tagsIndex === -1 && result.columns[i].text.toLowerCase() === 'tags') {
          tagsIndex = i;
        }
      }

      (0,lodash__WEBPACK_IMPORTED_MODULE_0__.forEach)(result.rows, row => {
        list.push({
          annotation: options.annotation,
          time: Math.floor(ResponseParser.dateTimeToEpoch(row[timeIndex])),
          text: row[textIndex] ? row[textIndex].toString() : '',
          tags: row[tagsIndex] ? row[tagsIndex].trim().split(/\s*,\s*/) : []
        });
      });
    });
    return list;
  }

  static findOrCreateBucket(data, target) {
    let dataTarget = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.find)(data, ['target', target]);

    if (!dataTarget) {
      dataTarget = {
        target: target,
        datapoints: [],
        refId: '',
        query: ''
      };
      data.push(dataTarget);
    }

    return dataTarget;
  }

  static dateTimeToEpoch(dateTimeValue) {
    return (0,_grafana_data__WEBPACK_IMPORTED_MODULE_1__.dateTime)(dateTimeValue).valueOf();
  }

  static parseSubscriptions(result) {
    const list = [];

    if (!result) {
      return list;
    }

    const valueFieldName = 'subscriptionId';
    const textFieldName = 'displayName';

    for (let i = 0; i < result.value.length; i++) {
      if (!(0,lodash__WEBPACK_IMPORTED_MODULE_0__.find)(list, ['value', (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.value[i], valueFieldName)])) {
        list.push({
          text: `${(0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.value[i], textFieldName)}`,
          value: (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.value[i], valueFieldName)
        });
      }
    }

    return list;
  }

} // matches (name):(type) = (defaultValue)
// e.g. fromRangeStart:datetime = datetime(null)
//  - name: fromRangeStart
//  - type: datetime
//  - defaultValue: datetime(null)

const METADATA_FUNCTION_PARAMS = /([\w\W]+):([\w]+)(?:\s?=\s?([\w\W]+))?/;

function transformMetadataFunction(sourceSchema) {
  if (!sourceSchema.functions) {
    return [];
  }

  return sourceSchema.functions.map(fn => {
    const params = fn.parameters && fn.parameters.split(', ').map(arg => {
      const match = arg.match(METADATA_FUNCTION_PARAMS);

      if (!match) {
        return;
      }

      const [, name, type, defaultValue] = match;
      return {
        name,
        type,
        defaultValue,
        cslDefaultValue: defaultValue
      };
    }).filter(v => !!v);
    return {
      name: fn.name,
      body: fn.body,
      inputParameters: params || []
    };
  });
}

function transformMetadataToKustoSchema(sourceSchema, nameOrIdOrSomething, templateVariables) {
  const database = {
    name: nameOrIdOrSomething,
    tables: sourceSchema.tables,
    functions: transformMetadataFunction(sourceSchema),
    majorVersion: 0,
    minorVersion: 0
  }; // Adding macros as known functions

  database.functions.push({
    name: '$__timeFilter',
    body: '{ true }',
    inputParameters: [{
      name: 'timeColumn',
      type: 'System.String',
      defaultValue: '""',
      cslDefaultValue: '""'
    }]
  }, {
    name: '$__timeFrom',
    body: '{ datetime(2018-06-05T18:09:58.907Z) }',
    inputParameters: []
  }, {
    name: '$__timeTo',
    body: '{ datetime(2018-06-05T20:09:58.907Z) }',
    inputParameters: []
  }, {
    name: '$__escapeMulti',
    body: `{ @'\\grafana-vm\Network(eth0)\Total', @'\\hello!'}`,
    inputParameters: [{
      name: '$myVar',
      type: 'System.String',
      defaultValue: '$myVar',
      cslDefaultValue: '$myVar'
    }]
  }, {
    name: '$__contains',
    body: `{ colName in ('value1','value2') }`,
    inputParameters: [{
      name: 'colName',
      type: 'System.String',
      defaultValue: 'colName',
      cslDefaultValue: 'colName'
    }, {
      name: '$myVar',
      type: 'System.String',
      defaultValue: '$myVar',
      cslDefaultValue: '$myVar'
    }]
  }); // Adding macros as global parameters

  const globalParameters = templateVariables.map(v => {
    return {
      name: `$${v.name}`,
      type: 'dynamic'
    };
  });
  return {
    clusterType: 'Engine',
    cluster: {
      connectionString: nameOrIdOrSomething,
      databases: [database]
    },
    database: database,
    globalParameters
  };
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AzureMonitorDatasource)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var app_features_dashboard_services_TimeSrv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/features/dashboard/services/TimeSrv.ts");
/* harmony import */ var _azureMetadata__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/index.ts");
/* harmony import */ var _credentials__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/credentials.ts");
/* harmony import */ var _time_grain_converter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/common.ts");
/* harmony import */ var _response_parser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts");
/* harmony import */ var _url_builder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }











const defaultDropdownValue = 'select';

function hasValue(item) {
  return !!(item && item !== defaultDropdownValue);
}

class AzureMonitorDatasource extends _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.DataSourceWithBackend {
  constructor(instanceSettings) {
    super(instanceSettings);

    _defineProperty(this, "apiVersion", '2018-01-01');

    _defineProperty(this, "apiPreviewVersion", '2017-12-01-preview');

    _defineProperty(this, "listByResourceGroupApiVersion", '2021-04-01');

    _defineProperty(this, "defaultSubscriptionId", void 0);

    _defineProperty(this, "resourcePath", void 0);

    _defineProperty(this, "azurePortalUrl", void 0);

    _defineProperty(this, "timeSrv", void 0);

    this.instanceSettings = instanceSettings;
    this.timeSrv = (0,app_features_dashboard_services_TimeSrv__WEBPACK_IMPORTED_MODULE_2__.getTimeSrv)();
    this.defaultSubscriptionId = instanceSettings.jsonData.subscriptionId;
    const cloud = (0,_credentials__WEBPACK_IMPORTED_MODULE_4__.getAzureCloud)(instanceSettings);
    this.resourcePath = _utils_common__WEBPACK_IMPORTED_MODULE_7__.routeNames.azureMonitor;
    this.azurePortalUrl = (0,_credentials__WEBPACK_IMPORTED_MODULE_4__.getAzurePortalUrl)(cloud);
  }

  isConfigured() {
    // If validation didn't return any error then the data source is properly configured
    return !this.validateDatasource();
  }

  filterQuery(item) {
    var _item$azureMonitor, _item$azureMonitor2, _item$azureMonitor3, _item$azureMonitor4, _item$azureMonitor5, _item$azureMonitor6;

    const hasResourceUri = !!(item !== null && item !== void 0 && (_item$azureMonitor = item.azureMonitor) !== null && _item$azureMonitor !== void 0 && _item$azureMonitor.resourceUri);
    const hasLegacyQuery = hasValue(item === null || item === void 0 ? void 0 : (_item$azureMonitor2 = item.azureMonitor) === null || _item$azureMonitor2 === void 0 ? void 0 : _item$azureMonitor2.resourceGroup) && hasValue(item === null || item === void 0 ? void 0 : (_item$azureMonitor3 = item.azureMonitor) === null || _item$azureMonitor3 === void 0 ? void 0 : _item$azureMonitor3.resourceName) && hasValue(item === null || item === void 0 ? void 0 : (_item$azureMonitor4 = item.azureMonitor) === null || _item$azureMonitor4 === void 0 ? void 0 : _item$azureMonitor4.metricDefinition);
    return !!(item.hide !== true && (hasResourceUri || hasLegacyQuery) && hasValue(item === null || item === void 0 ? void 0 : (_item$azureMonitor5 = item.azureMonitor) === null || _item$azureMonitor5 === void 0 ? void 0 : _item$azureMonitor5.metricName) && hasValue(item === null || item === void 0 ? void 0 : (_item$azureMonitor6 = item.azureMonitor) === null || _item$azureMonitor6 === void 0 ? void 0 : _item$azureMonitor6.aggregation));
  }

  applyTemplateVariables(target, scopedVars) {
    var _item$dimensionFilter;

    const item = target.azureMonitor;

    if (!item) {
      // return target;
      throw new Error('Query is not a valid Azure Monitor Metrics query');
    } // fix for timeGrainUnit which is a deprecated/removed field name


    if (item.timeGrain && item.timeGrainUnit && item.timeGrain !== 'auto') {
      item.timeGrain = _time_grain_converter__WEBPACK_IMPORTED_MODULE_5__["default"].createISO8601Duration(item.timeGrain, item.timeGrainUnit);
    }

    const templateSrv = (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)();
    const resourceUri = templateSrv.replace(item.resourceUri, scopedVars);
    const subscriptionId = templateSrv.replace(target.subscription || this.defaultSubscriptionId, scopedVars);
    const resourceGroup = templateSrv.replace(item.resourceGroup, scopedVars);
    const resourceName = templateSrv.replace(item.resourceName, scopedVars);
    const metricNamespace = templateSrv.replace(item.metricNamespace, scopedVars);
    const metricDefinition = templateSrv.replace(item.metricDefinition, scopedVars);
    const timeGrain = templateSrv.replace((item.timeGrain || '').toString(), scopedVars);
    const aggregation = templateSrv.replace(item.aggregation, scopedVars);
    const top = templateSrv.replace(item.top || '', scopedVars);
    const dimensionFilters = ((_item$dimensionFilter = item.dimensionFilters) !== null && _item$dimensionFilter !== void 0 ? _item$dimensionFilter : []).filter(f => f.dimension && f.dimension !== 'None').map(f => {
      var _f$filters;

      const filters = (_f$filters = f.filters) === null || _f$filters === void 0 ? void 0 : _f$filters.map(filter => templateSrv.replace(filter !== null && filter !== void 0 ? filter : '', scopedVars));
      return {
        dimension: templateSrv.replace(f.dimension, scopedVars),
        operator: f.operator || 'eq',
        filters: filters || []
      };
    });
    return Object.assign({}, target, {
      subscription: subscriptionId,
      queryType: _types__WEBPACK_IMPORTED_MODULE_6__.AzureQueryType.AzureMonitor,
      azureMonitor: {
        resourceUri,
        resourceGroup,
        resourceName,
        metricDefinition,
        timeGrain,
        allowedTimeGrainsMs: item.allowedTimeGrainsMs,
        metricName: templateSrv.replace(item.metricName, scopedVars),
        metricNamespace: metricNamespace && metricNamespace !== defaultDropdownValue ? metricNamespace : metricDefinition,
        aggregation: aggregation,
        dimensionFilters,
        top: top || '10',
        alias: item.alias
      }
    });
  }

  async getSubscriptions() {
    if (!this.isConfigured()) {
      return [];
    }

    return this.getResource(`${this.resourcePath}/subscriptions?api-version=2019-03-01`).then(result => {
      return _response_parser__WEBPACK_IMPORTED_MODULE_8__["default"].parseSubscriptions(result);
    });
  }

  getResourceGroups(subscriptionId) {
    return this.getResource(`${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups?api-version=${this.listByResourceGroupApiVersion}`).then(result => {
      return _response_parser__WEBPACK_IMPORTED_MODULE_8__["default"].parseResponseValues(result, 'name', 'name');
    });
  }

  getMetricDefinitions(subscriptionId, resourceGroup) {
    return this.getResource(`${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.listByResourceGroupApiVersion}`).then(result => {
      return _response_parser__WEBPACK_IMPORTED_MODULE_8__["default"].parseResponseValues(result, 'type', 'type');
    }).then(result => result.filter(t => {
      for (let i = 0; i < _azureMetadata__WEBPACK_IMPORTED_MODULE_3__.supportedMetricNamespaces.length; i++) {
        if (t.value.toLowerCase() === _azureMetadata__WEBPACK_IMPORTED_MODULE_3__.supportedMetricNamespaces[i].toLowerCase()) {
          return true;
        }
      }

      return false;
    })).then(result => {
      let shouldHardcodeBlobStorage = false;

      for (let i = 0; i < result.length; i++) {
        if (result[i].value === 'Microsoft.Storage/storageAccounts') {
          shouldHardcodeBlobStorage = true;
          break;
        }
      }

      if (shouldHardcodeBlobStorage) {
        result.push({
          text: 'Microsoft.Storage/storageAccounts/blobServices',
          value: 'Microsoft.Storage/storageAccounts/blobServices'
        });
        result.push({
          text: 'Microsoft.Storage/storageAccounts/fileServices',
          value: 'Microsoft.Storage/storageAccounts/fileServices'
        });
        result.push({
          text: 'Microsoft.Storage/storageAccounts/tableServices',
          value: 'Microsoft.Storage/storageAccounts/tableServices'
        });
        result.push({
          text: 'Microsoft.Storage/storageAccounts/queueServices',
          value: 'Microsoft.Storage/storageAccounts/queueServices'
        });
      }

      return result.map(v => ({
        value: v.value,
        text: _azureMetadata__WEBPACK_IMPORTED_MODULE_3__.resourceTypeDisplayNames[v.value.toLowerCase()] || v.value
      }));
    });
  }

  getResourceNames(subscriptionId, resourceGroup, metricDefinition, skipToken) {
    const validMetricDefinition = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.startsWith)(metricDefinition, 'Microsoft.Storage/storageAccounts/') ? 'Microsoft.Storage/storageAccounts' : metricDefinition;
    let url = `${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups/${resourceGroup}/resources?` + `$filter=resourceType eq '${validMetricDefinition}'&` + `api-version=${this.listByResourceGroupApiVersion}`;

    if (skipToken) {
      url += `&$skiptoken=${skipToken}`;
    }

    return this.getResource(url).then(async result => {
      let list = [];

      if ((0,lodash__WEBPACK_IMPORTED_MODULE_0__.startsWith)(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {
        list = _response_parser__WEBPACK_IMPORTED_MODULE_8__["default"].parseResourceNames(result, 'Microsoft.Storage/storageAccounts');

        for (let i = 0; i < list.length; i++) {
          list[i].text += '/default';
          list[i].value += '/default';
        }
      } else {
        list = _response_parser__WEBPACK_IMPORTED_MODULE_8__["default"].parseResourceNames(result, metricDefinition);
      }

      if (result.nextLink) {
        // If there is a nextLink, we should request more pages
        const nextURL = new URL(result.nextLink);
        const nextToken = nextURL.searchParams.get('$skiptoken');

        if (!nextToken) {
          throw Error('unable to request the next page of resources');
        }

        const nextPage = await this.getResourceNames(subscriptionId, resourceGroup, metricDefinition, nextToken);
        list = list.concat(nextPage);
      }

      return list;
    });
  }

  getMetricNamespaces(query) {
    const url = _url_builder__WEBPACK_IMPORTED_MODULE_9__["default"].buildAzureMonitorGetMetricNamespacesUrl(this.resourcePath, this.apiPreviewVersion, this.replaceTemplateVariables(query));
    return this.getResource(url).then(result => {
      return _response_parser__WEBPACK_IMPORTED_MODULE_8__["default"].parseResponseValues(result, 'name', 'properties.metricNamespaceName');
    }).then(result => {
      if (url.includes('Microsoft.Storage/storageAccounts')) {
        const storageNamespaces = ['Microsoft.Storage/storageAccounts', 'Microsoft.Storage/storageAccounts/blobServices', 'Microsoft.Storage/storageAccounts/fileServices', 'Microsoft.Storage/storageAccounts/tableServices', 'Microsoft.Storage/storageAccounts/queueServices'];

        for (const namespace of storageNamespaces) {
          if (!(0,lodash__WEBPACK_IMPORTED_MODULE_0__.find)(result, ['value', namespace.toLowerCase()])) {
            result.push({
              value: namespace,
              text: namespace
            });
          }
        }
      }

      return result;
    });
  }

  getMetricNames(query) {
    const url = _url_builder__WEBPACK_IMPORTED_MODULE_9__["default"].buildAzureMonitorGetMetricNamesUrl(this.resourcePath, this.apiVersion, this.replaceTemplateVariables(query));
    return this.getResource(url).then(result => {
      return _response_parser__WEBPACK_IMPORTED_MODULE_8__["default"].parseResponseValues(result, 'name.localizedValue', 'name.value');
    });
  }

  getMetricMetadata(query) {
    const {
      metricName
    } = query;
    const url = _url_builder__WEBPACK_IMPORTED_MODULE_9__["default"].buildAzureMonitorGetMetricNamesUrl(this.resourcePath, this.apiVersion, this.replaceTemplateVariables(query));
    return this.getResource(url).then(result => {
      return _response_parser__WEBPACK_IMPORTED_MODULE_8__["default"].parseMetadata(result, metricName);
    });
  }

  validateDatasource() {
    const authType = (0,_credentials__WEBPACK_IMPORTED_MODULE_4__.getAuthType)(this.instanceSettings);

    if (authType === 'clientsecret') {
      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {
        return {
          status: 'error',
          message: 'The Tenant Id field is required.'
        };
      }

      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {
        return {
          status: 'error',
          message: 'The Client Id field is required.'
        };
      }
    }

    return undefined;
  }

  isValidConfigField(field) {
    return typeof field === 'string' && field.length > 0;
  }

  replaceTemplateVariables(query) {
    const templateSrv = (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)();
    const workingQuery = Object.assign({}, query);
    const keys = Object.keys(query);
    keys.forEach(key => {
      workingQuery[key] = templateSrv.replace(workingQuery[key]);
    });
    return workingQuery;
  }

}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ResponseParser)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _time_grain_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts");


class ResponseParser {
  static parseResponseValues(result, textFieldName, valueFieldName) {
    const list = [];

    if (!result) {
      return list;
    }

    for (let i = 0; i < result.value.length; i++) {
      if (!(0,lodash__WEBPACK_IMPORTED_MODULE_0__.find)(list, ['value', (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.value[i], valueFieldName)])) {
        const value = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.value[i], valueFieldName);
        const text = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.value[i], textFieldName, value);
        list.push({
          text: text,
          value: value
        });
      }
    }

    return list;
  }

  static parseResourceNames(result, metricDefinition) {
    const list = [];

    if (!result) {
      return list;
    }

    for (let i = 0; i < result.value.length; i++) {
      if (typeof result.value[i].type === 'string' && result.value[i].type.toLocaleLowerCase() === metricDefinition.toLocaleLowerCase()) {
        list.push({
          text: result.value[i].name,
          value: result.value[i].name
        });
      }
    }

    return list;
  }

  static parseMetadata(result, metricName) {
    var _metricData$metricAva, _metricData$dimension;

    const defaultAggTypes = ['None', 'Average', 'Minimum', 'Maximum', 'Total', 'Count'];
    const metricData = result === null || result === void 0 ? void 0 : result.value.find(v => v.name.value === metricName);

    if (!metricData) {
      return {
        primaryAggType: '',
        supportedAggTypes: defaultAggTypes,
        supportedTimeGrains: [],
        dimensions: []
      };
    }

    return {
      primaryAggType: metricData.primaryAggregationType,
      supportedAggTypes: metricData.supportedAggregationTypes || defaultAggTypes,
      supportedTimeGrains: [{
        label: 'Auto',
        value: 'auto'
      }, ...ResponseParser.parseTimeGrains((_metricData$metricAva = metricData.metricAvailabilities) !== null && _metricData$metricAva !== void 0 ? _metricData$metricAva : [])],
      dimensions: ResponseParser.parseDimensions((_metricData$dimension = metricData.dimensions) !== null && _metricData$dimension !== void 0 ? _metricData$dimension : [])
    };
  }

  static parseTimeGrains(metricAvailabilities) {
    const timeGrains = [];

    if (!metricAvailabilities) {
      return timeGrains;
    }

    metricAvailabilities.forEach(avail => {
      if (avail.timeGrain) {
        timeGrains.push({
          label: _time_grain_converter__WEBPACK_IMPORTED_MODULE_1__["default"].createTimeGrainFromISO8601Duration(avail.timeGrain),
          value: avail.timeGrain
        });
      }
    });
    return timeGrains;
  }

  static parseDimensions(metadataDimensions) {
    return metadataDimensions.map(dimension => {
      return {
        label: dimension.localizedValue || dimension.value,
        value: dimension.value
      };
    });
  }

  static parseSubscriptions(result) {
    const list = [];

    if (!result) {
      return list;
    }

    const valueFieldName = 'subscriptionId';
    const textFieldName = 'displayName';

    for (let i = 0; i < result.value.length; i++) {
      if (!(0,lodash__WEBPACK_IMPORTED_MODULE_0__.find)(list, ['value', (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.value[i], valueFieldName)])) {
        list.push({
          text: `${(0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.value[i], textFieldName)}`,
          value: (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.value[i], valueFieldName)
        });
      }
    }

    return list;
  }

  static parseSubscriptionsForSelect(result) {
    const list = [];

    if (!result) {
      return list;
    }

    const valueFieldName = 'subscriptionId';
    const textFieldName = 'displayName';

    for (let i = 0; i < result.data.value.length; i++) {
      if (!(0,lodash__WEBPACK_IMPORTED_MODULE_0__.find)(list, ['value', (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.data.value[i], valueFieldName)])) {
        list.push({
          label: `${(0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.data.value[i], textFieldName)} - ${(0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.data.value[i], valueFieldName)}`,
          value: (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.data.value[i], valueFieldName)
        });
      }
    }

    return list;
  }

  static parseWorkspacesForSelect(result) {
    const list = [];

    if (!result) {
      return list;
    }

    const valueFieldName = 'customerId';
    const textFieldName = 'name';

    for (let i = 0; i < result.data.value.length; i++) {
      if (!(0,lodash__WEBPACK_IMPORTED_MODULE_0__.find)(list, ['value', (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.data.value[i].properties, valueFieldName)])) {
        list.push({
          label: (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.data.value[i], textFieldName),
          value: (0,lodash__WEBPACK_IMPORTED_MODULE_0__.get)(result.data.value[i].properties, valueFieldName)
        });
      }
    }

    return list;
  }

}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UrlBuilder)
/* harmony export */ });
class UrlBuilder {
  static buildResourceUri(subscriptionId, resourceGroup, metricDefinition, resourceName) {
    const metricDefinitionArray = metricDefinition.split('/');
    const resourceNameArray = resourceName.split('/');
    const provider = metricDefinitionArray.shift();
    const urlArray = ['/subscriptions', subscriptionId, 'resourceGroups', resourceGroup, 'providers', provider];

    for (const i in metricDefinitionArray) {
      urlArray.push(metricDefinitionArray[i]);
      urlArray.push(resourceNameArray[i]);
    }

    return urlArray.join('/');
  }

  static buildAzureMonitorGetMetricNamespacesUrl(baseUrl, apiVersion, query) {
    let resourceUri;

    if ('resourceUri' in query) {
      resourceUri = query.resourceUri;
    } else {
      const {
        subscription,
        resourceGroup,
        metricDefinition,
        resourceName
      } = query;
      resourceUri = UrlBuilder.buildResourceUri(subscription, resourceGroup, metricDefinition, resourceName);
    }

    return `${baseUrl}${resourceUri}/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`;
  }

  static buildAzureMonitorGetMetricNamesUrl(baseUrl, apiVersion, query) {
    let resourceUri;
    const {
      metricNamespace
    } = query;

    if ('resourceUri' in query) {
      resourceUri = query.resourceUri;
    } else {
      const {
        subscription,
        resourceGroup,
        metricDefinition,
        resourceName
      } = query;
      resourceUri = UrlBuilder.buildResourceUri(subscription, resourceGroup, metricDefinition, resourceName);
    }

    return `${baseUrl}${resourceUri}/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}` + `&metricnamespace=${encodeURIComponent(metricNamespace)}`;
  }

}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_resource_graph/azure_resource_graph_datasource.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AzureResourceGraphDatasource)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/common.ts");
// eslint-disable-next-line lodash/import-scope




class AzureResourceGraphDatasource extends _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.DataSourceWithBackend {
  filterQuery(item) {
    var _item$azureResourceGr;

    return !!((_item$azureResourceGr = item.azureResourceGraph) !== null && _item$azureResourceGr !== void 0 && _item$azureResourceGr.query);
  }

  applyTemplateVariables(target, scopedVars) {
    const item = target.azureResourceGraph;

    if (!item) {
      return target;
    }

    const templateSrv = (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)();
    const variableNames = templateSrv.getVariables().map(v => `$${v.name}`);

    const subscriptionVar = lodash__WEBPACK_IMPORTED_MODULE_0___default().find(target.subscriptions, sub => lodash__WEBPACK_IMPORTED_MODULE_0___default().includes(variableNames, sub));

    const interpolatedSubscriptions = templateSrv.replace(subscriptionVar, scopedVars, v => v).split(',').filter(v => v.length > 0);
    const subscriptions = [...interpolatedSubscriptions, ...lodash__WEBPACK_IMPORTED_MODULE_0___default().filter(target.subscriptions, sub => !lodash__WEBPACK_IMPORTED_MODULE_0___default().includes(variableNames, sub))];
    const query = templateSrv.replace(item.query, scopedVars, _utils_common__WEBPACK_IMPORTED_MODULE_3__.interpolateVariable);
    return Object.assign({}, target, {
      queryType: _types__WEBPACK_IMPORTED_MODULE_2__.AzureQueryType.AzureResourceGraph,
      subscriptions,
      azureResourceGraph: {
        resultFormat: 'table',
        query
      }
    });
  }

}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/ArgQueryEditor.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_experimental__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/__virtual__/@grafana-experimental-virtual-45ce772437/0/cache/@grafana-experimental-npm-0.0.2-canary.32-3892e62f7b-71924e6d03.zip/node_modules/@grafana/experimental/index.js");
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _SubscriptionField__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/SubscriptionField.tsx");
/* harmony import */ var _QueryField__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/QueryField.tsx");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");








const ERROR_SOURCE = 'arg-subscriptions';

const ArgQueryEditor = ({
  query,
  datasource,
  subscriptionId,
  variableOptionGroup,
  onChange,
  setError
}) => {
  const fetchedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const [subscriptions, setSubscriptions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (fetchedRef.current) {
      return;
    }

    fetchedRef.current = true;
    datasource.azureMonitorDatasource.getSubscriptions().then(results => {
      var _query$subscriptions;

      const fetchedSubscriptions = results.map(v => ({
        label: v.text,
        value: v.value,
        description: v.value
      }));
      setSubscriptions(fetchedSubscriptions);
      setError(ERROR_SOURCE, undefined);

      if (!((_query$subscriptions = query.subscriptions) !== null && _query$subscriptions !== void 0 && _query$subscriptions.length) && fetchedSubscriptions !== null && fetchedSubscriptions !== void 0 && fetchedSubscriptions.length) {
        var _query$subscription;

        onChange(Object.assign({}, query, {
          subscriptions: [(_query$subscription = query.subscription) !== null && _query$subscription !== void 0 ? _query$subscription : fetchedSubscriptions[0].value]
        }));
      }
    }).catch(err => setError(ERROR_SOURCE, err));
  }, [datasource, onChange, query, setError]);

  if (_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.config.featureToggles.azureMonitorExperimentalUI) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("span", {
      "data-testid": "azure-monitor-arg-query-editor-with-experimental-ui",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorRows, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorRow, {
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorFieldGroup, {
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_SubscriptionField__WEBPACK_IMPORTED_MODULE_4__["default"], {
              multiSelect: true,
              subscriptions: subscriptions,
              query: query,
              datasource: datasource,
              subscriptionId: subscriptionId,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError
            })
          })
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_QueryField__WEBPACK_IMPORTED_MODULE_5__["default"], {
        query: query,
        datasource: datasource,
        subscriptionId: subscriptionId,
        variableOptionGroup: variableOptionGroup,
        onQueryChange: onChange,
        setError: setError
      })]
    });
  } else {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("div", {
      "data-testid": "azure-monitor-arg-query-editor",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.InlineFieldRow, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_SubscriptionField__WEBPACK_IMPORTED_MODULE_4__["default"], {
          multiSelect: true,
          subscriptions: subscriptions,
          query: query,
          datasource: datasource,
          subscriptionId: subscriptionId,
          variableOptionGroup: variableOptionGroup,
          onQueryChange: onChange,
          setError: setError
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_QueryField__WEBPACK_IMPORTED_MODULE_5__["default"], {
        query: query,
        datasource: datasource,
        subscriptionId: subscriptionId,
        variableOptionGroup: variableOptionGroup,
        onQueryChange: onChange,
        setError: setError
      })]
    });
  }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ArgQueryEditor);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/QueryField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");




const QueryField = ({
  query,
  onQueryChange
}) => {
  var _query$azureResourceG, _query$azureResourceG2;

  const onChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(newQuery => {
    onQueryChange(Object.assign({}, query, {
      azureResourceGraph: Object.assign({}, query.azureResourceGraph, {
        query: newQuery
      })
    }));
  }, [onQueryChange, query]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.CodeEditor, {
    value: (_query$azureResourceG = (_query$azureResourceG2 = query.azureResourceGraph) === null || _query$azureResourceG2 === void 0 ? void 0 : _query$azureResourceG2.query) !== null && _query$azureResourceG !== void 0 ? _query$azureResourceG : '',
    language: "kusto",
    height: 200,
    width: "100%",
    showMiniMap: false,
    onBlur: onChange,
    onSave: onChange
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (QueryField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/index.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _ArgQueryEditor__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _ArgQueryEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/ArgQueryEditor.tsx");


/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AzureCredentialsForm": () => (/* binding */ AzureCredentialsForm),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _credentials__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/credentials.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
var _InlineFormLabel, _InlineFormLabel2, _InlineFormLabel3, _InlineFormLabel4, _div, _InlineFormLabel5, _InlineFormLabel6;







const {
  Input
} = _grafana_ui__WEBPACK_IMPORTED_MODULE_1__.LegacyForms;
const authTypeOptions = [{
  value: 'msi',
  label: 'Managed Identity'
}, {
  value: 'clientsecret',
  label: 'App Registration'
}];
const AzureCredentialsForm = props => {
  const {
    credentials,
    azureCloudOptions,
    onCredentialsChange,
    getSubscriptions,
    disabled
  } = props;
  const hasRequiredFields = (0,_credentials__WEBPACK_IMPORTED_MODULE_2__.isCredentialsComplete)(credentials);
  const [subscriptions, setSubscriptions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);
  const [loadSubscriptionsClicked, onLoadSubscriptions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(val => val + 1, 0);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!getSubscriptions || !hasRequiredFields) {
      updateSubscriptions([]);
      return;
    }

    let canceled = false;
    getSubscriptions().then(result => {
      if (!canceled) {
        updateSubscriptions(result, loadSubscriptionsClicked);
      }
    });
    return () => {
      canceled = true;
    }; // This effect is intended to be called only once initially and on Load Subscriptions click
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [loadSubscriptionsClicked]);

  const updateSubscriptions = (received, autoSelect = false) => {
    setSubscriptions(received);

    if (getSubscriptions) {
      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {
        // Selecting the default subscription if subscriptions received but no default subscription selected
        onSubscriptionChange(received[0]);
      } else if (credentials.defaultSubscriptionId) {
        const found = received.find(opt => opt.value === credentials.defaultSubscriptionId);

        if (!found) {
          // Unselecting the default subscription if it isn't found among the received subscriptions
          onSubscriptionChange(undefined);
        }
      }
    }
  };

  const onAuthTypeChange = selected => {
    if (onCredentialsChange) {
      setSubscriptions([]);
      const updated = Object.assign({}, credentials, {
        authType: selected.value || 'msi',
        defaultSubscriptionId: undefined
      });
      onCredentialsChange(updated);
    }
  };

  const onAzureCloudChange = selected => {
    if (onCredentialsChange && credentials.authType === 'clientsecret') {
      setSubscriptions([]);
      const updated = Object.assign({}, credentials, {
        azureCloud: selected.value,
        defaultSubscriptionId: undefined
      });
      onCredentialsChange(updated);
    }
  };

  const onTenantIdChange = event => {
    if (onCredentialsChange && credentials.authType === 'clientsecret') {
      setSubscriptions([]);
      const updated = Object.assign({}, credentials, {
        tenantId: event.target.value,
        defaultSubscriptionId: undefined
      });
      onCredentialsChange(updated);
    }
  };

  const onClientIdChange = event => {
    if (onCredentialsChange && credentials.authType === 'clientsecret') {
      setSubscriptions([]);
      const updated = Object.assign({}, credentials, {
        clientId: event.target.value,
        defaultSubscriptionId: undefined
      });
      onCredentialsChange(updated);
    }
  };

  const onClientSecretChange = event => {
    if (onCredentialsChange && credentials.authType === 'clientsecret') {
      setSubscriptions([]);
      const updated = Object.assign({}, credentials, {
        clientSecret: event.target.value,
        defaultSubscriptionId: undefined
      });
      onCredentialsChange(updated);
    }
  };

  const onClientSecretReset = () => {
    if (onCredentialsChange && credentials.authType === 'clientsecret') {
      setSubscriptions([]);
      const updated = Object.assign({}, credentials, {
        clientSecret: '',
        defaultSubscriptionId: undefined
      });
      onCredentialsChange(updated);
    }
  };

  const onSubscriptionChange = selected => {
    if (onCredentialsChange) {
      const updated = Object.assign({}, credentials, {
        defaultSubscriptionId: selected === null || selected === void 0 ? void 0 : selected.value
      });
      onCredentialsChange(updated);
    }
  };

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
    className: "gf-form-group",
    children: [props.managedIdentityEnabled && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
      className: "gf-form-inline",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
        className: "gf-form",
        children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {
          className: "width-12",
          tooltip: "Choose the type of authentication to Azure services",
          children: "Authentication"
        })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
          className: "width-15",
          value: authTypeOptions.find(opt => opt.value === credentials.authType),
          options: authTypeOptions,
          onChange: onAuthTypeChange,
          disabled: disabled
        })]
      })
    }), credentials.authType === 'clientsecret' && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {
      children: [azureCloudOptions && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
        className: "gf-form-inline",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
          className: "gf-form",
          children: [_InlineFormLabel2 || (_InlineFormLabel2 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {
            className: "width-12",
            tooltip: "Choose an Azure Cloud",
            children: "Azure Cloud"
          })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
            "aria-label": "Azure Cloud",
            className: "width-15",
            value: azureCloudOptions.find(opt => opt.value === credentials.azureCloud),
            options: azureCloudOptions,
            onChange: onAzureCloudChange,
            disabled: disabled
          })]
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
        className: "gf-form-inline",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
          className: "gf-form",
          children: [_InlineFormLabel3 || (_InlineFormLabel3 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {
            className: "width-12",
            children: "Directory (tenant) ID"
          })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
            className: "width-15",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(Input, {
              className: "width-30",
              placeholder: "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
              value: credentials.tenantId || '',
              onChange: onTenantIdChange,
              disabled: disabled
            })
          })]
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
        className: "gf-form-inline",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
          className: "gf-form",
          children: [_InlineFormLabel4 || (_InlineFormLabel4 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {
            className: "width-12",
            children: "Application (client) ID"
          })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
            className: "width-15",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(Input, {
              className: "width-30",
              placeholder: "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
              value: credentials.clientId || '',
              onChange: onClientIdChange,
              disabled: disabled
            })
          })]
        })
      }), !disabled && (typeof credentials.clientSecret === 'symbol' ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
        className: "gf-form-inline",
        children: [_div || (_div = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
          className: "gf-form",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {
            className: "width-12",
            children: "Client Secret"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(Input, {
            "data-testid": "client-secret",
            className: "width-25",
            placeholder: "configured",
            disabled: true
          })]
        })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
          className: "gf-form",
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
            className: "max-width-30 gf-form-inline",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {
              variant: "secondary",
              type: "button",
              onClick: onClientSecretReset,
              disabled: disabled,
              children: "reset"
            })
          })
        })]
      }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
        className: "gf-form-inline",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
          className: "gf-form",
          children: [_InlineFormLabel5 || (_InlineFormLabel5 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {
            className: "width-12",
            children: "Client Secret"
          })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
            className: "width-15",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(Input, {
              className: "width-30",
              placeholder: "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX",
              value: credentials.clientSecret || '',
              onChange: onClientSecretChange,
              disabled: disabled
            })
          })]
        })
      }))]
    }), getSubscriptions && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
        className: "gf-form-inline",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)("div", {
          className: "gf-form",
          children: [_InlineFormLabel6 || (_InlineFormLabel6 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineFormLabel, {
            className: "width-12",
            children: "Default Subscription"
          })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
            className: "width-30",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
              "aria-label": "Default Subscription",
              value: credentials.defaultSubscriptionId ? subscriptions.find(opt => opt.value === credentials.defaultSubscriptionId) : undefined,
              options: subscriptions,
              onChange: onSubscriptionChange,
              disabled: disabled
            })
          })]
        })
      }), !disabled && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
        className: "gf-form-inline",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
          className: "gf-form",
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("div", {
            className: "max-width-30 gf-form-inline",
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {
              variant: "secondary",
              size: "sm",
              type: "button",
              onClick: onLoadSubscriptions,
              disabled: !hasRequiredFields,
              children: "Load Subscriptions"
            })
          })
        })
      })]
    }), props.children]
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AzureCredentialsForm);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConfigEditor": () => (/* binding */ ConfigEditor),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-data/src/index.ts");
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _azure_monitor_response_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/response_parser.ts");
/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/common.ts");
/* harmony import */ var _MonitorConfig__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }











class ConfigEditor extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "templateSrv", (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.getTemplateSrv)());

    _defineProperty(this, "baseURL", void 0);

    _defineProperty(this, "updateOptions", optionsFunc => {
      const updated = optionsFunc(this.props.options);
      this.props.onOptionsChange(updated);
      this.setState({
        unsaved: true
      });
    });

    _defineProperty(this, "saveOptions", async () => {
      if (this.state.unsaved) {
        await (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.getBackendSrv)().put(`/api/datasources/${this.props.options.id}`, this.props.options).then(result => {
          (0,_grafana_data__WEBPACK_IMPORTED_MODULE_1__.updateDatasourcePluginOption)(this.props, 'version', result.datasource.version);
        });
        this.setState({
          unsaved: false
        });
      }
    });

    _defineProperty(this, "getSubscriptions", async () => {
      await this.saveOptions();
      const query = `?api-version=2019-03-01`;

      try {
        const result = await (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.getBackendSrv)().fetch({
          url: this.baseURL + query,
          method: 'GET'
        }).toPromise();
        this.setState({
          error: undefined
        });
        return _azure_monitor_response_parser__WEBPACK_IMPORTED_MODULE_4__["default"].parseSubscriptionsForSelect(result);
      } catch (err) {
        if ((0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.isFetchError)(err)) {
          var _err$data;

          this.setState({
            error: {
              title: 'Error requesting subscriptions',
              description: 'Could not request subscriptions from Azure. Check your credentials and try again.',
              details: err === null || err === void 0 ? void 0 : (_err$data = err.data) === null || _err$data === void 0 ? void 0 : _err$data.message
            }
          });
        }

        return Promise.resolve([]);
      }
    });

    this.state = {
      unsaved: false
    };
    this.baseURL = `/api/datasources/${this.props.options.id}/resources/${_utils_common__WEBPACK_IMPORTED_MODULE_5__.routeNames.azureMonitor}/subscriptions`;
  }

  render() {
    const {
      options
    } = this.props;
    const {
      error
    } = this.state;
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_MonitorConfig__WEBPACK_IMPORTED_MODULE_6__.MonitorConfig, {
        options: options,
        updateOptions: this.updateOptions,
        getSubscriptions: this.getSubscriptions
      }), error && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.Alert, {
        severity: "error",
        title: error.title,
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)("p", {
          children: error.description
        }), error.details && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)("details", {
          style: {
            whiteSpace: 'pre-wrap'
          },
          children: error.details
        })]
      })]
    });
  }

}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ConfigEditor);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Field": () => (/* binding */ Field)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_experimental__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/__virtual__/@grafana-experimental-virtual-45ce772437/0/cache/@grafana-experimental-npm-0.0.2-canary.32-3892e62f7b-71924e6d03.zip/node_modules/@grafana/experimental/index.js");
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
const _excluded = ["labelWidth", "inlineField"];

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }






const DEFAULT_LABEL_WIDTH = 18;
const Field = props => {
  const {
    labelWidth,
    inlineField
  } = props,
        remainingProps = _objectWithoutPropertiesLoose(props, _excluded);

  if (_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.config.featureToggles.azureMonitorExperimentalUI && !inlineField) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorField, Object.assign({
      width: labelWidth || DEFAULT_LABEL_WIDTH
    }, remainingProps));
  } else {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.InlineField, Object.assign({
      labelWidth: labelWidth || DEFAULT_LABEL_WIDTH
    }, remainingProps));
  }
};

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/FormatAsField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");





const FORMAT_OPTIONS = [{
  label: 'Time series',
  value: 'time_series'
}, {
  label: 'Table',
  value: 'table'
}];

const FormatAsField = ({
  query,
  variableOptionGroup,
  onQueryChange
}) => {
  var _query$azureLogAnalyt;

  const options = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => [...FORMAT_OPTIONS, variableOptionGroup], [variableOptionGroup]);
  const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(change => {
    const {
      value
    } = change;

    if (!value) {
      return;
    }

    const newQuery = (0,_setQueryValue__WEBPACK_IMPORTED_MODULE_3__.setFormatAs)(query, value);
    onQueryChange(newQuery);
  }, [onQueryChange, query]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_2__.Field, {
    label: "Format as",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
      inputId: "azure-monitor-logs-workspaces-field",
      value: (_query$azureLogAnalyt = query.azureLogAnalytics) === null || _query$azureLogAnalyt === void 0 ? void 0 : _query$azureLogAnalyt.resultFormat,
      onChange: handleChange,
      options: options,
      width: 38
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FormatAsField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/LogsQueryEditor.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_experimental__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/__virtual__/@grafana-experimental-virtual-45ce772437/0/cache/@grafana-experimental-npm-0.0.2-canary.32-3892e62f7b-71924e6d03.zip/node_modules/@grafana/experimental/index.js");
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _ResourceField__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourceField/index.tsx");
/* harmony import */ var _ResourcePicker_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/types.ts");
/* harmony import */ var _FormatAsField__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/FormatAsField.tsx");
/* harmony import */ var _QueryField__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/QueryField.tsx");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/setQueryValue.ts");
/* harmony import */ var _useMigrations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/useMigrations.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");













const LogsQueryEditor = ({
  query,
  datasource,
  subscriptionId,
  variableOptionGroup,
  onChange,
  setError,
  hideFormatAs
}) => {
  const migrationError = (0,_useMigrations__WEBPACK_IMPORTED_MODULE_9__["default"])(datasource, query, onChange);

  if (_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.config.featureToggles.azureMonitorExperimentalUI) {
    var _query$azureLogAnalyt;

    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)("span", {
      "data-testid": "azure-monitor-logs-query-editor-with-experimental-ui",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorRows, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorRow, {
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorFieldGroup, {
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_ResourceField__WEBPACK_IMPORTED_MODULE_4__["default"], {
              query: query,
              datasource: datasource,
              inlineField: true,
              labelWidth: 10,
              subscriptionId: subscriptionId,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError,
              selectableEntryTypes: [_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_5__.ResourceRowType.Subscription, _ResourcePicker_types__WEBPACK_IMPORTED_MODULE_5__.ResourceRowType.ResourceGroup, _ResourcePicker_types__WEBPACK_IMPORTED_MODULE_5__.ResourceRowType.Resource, _ResourcePicker_types__WEBPACK_IMPORTED_MODULE_5__.ResourceRowType.Variable],
              setResource: _setQueryValue__WEBPACK_IMPORTED_MODULE_8__.setResource,
              resourceUri: (_query$azureLogAnalyt = query.azureLogAnalytics) === null || _query$azureLogAnalyt === void 0 ? void 0 : _query$azureLogAnalyt.resource,
              queryType: "logs"
            })
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_QueryField__WEBPACK_IMPORTED_MODULE_7__["default"], {
          query: query,
          datasource: datasource,
          subscriptionId: subscriptionId,
          variableOptionGroup: variableOptionGroup,
          onQueryChange: onChange,
          setError: setError
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorRow, {
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorFieldGroup, {
            children: [!hideFormatAs && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_FormatAsField__WEBPACK_IMPORTED_MODULE_6__["default"], {
              query: query,
              datasource: datasource,
              subscriptionId: subscriptionId,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError
            }), migrationError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.Alert, {
              title: migrationError.title,
              children: migrationError.message
            })]
          })
        })]
      })
    });
  } else {
    var _query$azureLogAnalyt2;

    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsxs)("div", {
      "data-testid": "azure-monitor-logs-query-editor",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_ResourceField__WEBPACK_IMPORTED_MODULE_4__["default"], {
        query: query,
        datasource: datasource,
        subscriptionId: subscriptionId,
        variableOptionGroup: variableOptionGroup,
        onQueryChange: onChange,
        setError: setError,
        selectableEntryTypes: [_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_5__.ResourceRowType.Subscription, _ResourcePicker_types__WEBPACK_IMPORTED_MODULE_5__.ResourceRowType.ResourceGroup, _ResourcePicker_types__WEBPACK_IMPORTED_MODULE_5__.ResourceRowType.Resource, _ResourcePicker_types__WEBPACK_IMPORTED_MODULE_5__.ResourceRowType.Variable],
        setResource: _setQueryValue__WEBPACK_IMPORTED_MODULE_8__.setResource,
        resourceUri: (_query$azureLogAnalyt2 = query.azureLogAnalytics) === null || _query$azureLogAnalyt2 === void 0 ? void 0 : _query$azureLogAnalyt2.resource,
        queryType: "logs"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_QueryField__WEBPACK_IMPORTED_MODULE_7__["default"], {
        query: query,
        datasource: datasource,
        subscriptionId: subscriptionId,
        variableOptionGroup: variableOptionGroup,
        onQueryChange: onChange,
        setError: setError
      }), !hideFormatAs && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_FormatAsField__WEBPACK_IMPORTED_MODULE_6__["default"], {
        query: query,
        datasource: datasource,
        subscriptionId: subscriptionId,
        variableOptionGroup: variableOptionGroup,
        onQueryChange: onChange,
        setError: setError
      }), migrationError && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_10__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.Alert, {
        title: migrationError.title,
        children: migrationError.message
      })]
    });
  }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LogsQueryEditor);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/QueryField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var app_core_utils_deferred__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/core/utils/deferred.ts");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");






const QueryField = ({
  query,
  datasource,
  onQueryChange
}) => {
  var _query$azureLogAnalyt2, _query$azureLogAnalyt3, _query$azureLogAnalyt4;

  const monacoPromiseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();

  function getPromise() {
    if (!monacoPromiseRef.current) {
      monacoPromiseRef.current = new app_core_utils_deferred__WEBPACK_IMPORTED_MODULE_2__.Deferred();
    }

    return monacoPromiseRef.current.promise;
  }

  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    var _query$azureLogAnalyt;

    if (!((_query$azureLogAnalyt = query.azureLogAnalytics) !== null && _query$azureLogAnalyt !== void 0 && _query$azureLogAnalyt.resource)) {
      return;
    }

    const promises = [datasource.azureLogAnalyticsDatasource.getKustoSchema(query.azureLogAnalytics.resource), getPromise()]; // the kusto schema call might fail, but its okay for that to happen silently

    Promise.all(promises).then(([schema, {
      monaco,
      editor
    }]) => {
      const languages = monaco.languages;
      languages.kusto.getKustoWorker().then(kusto => {
        const model = editor.getModel();
        return model && kusto(model.uri);
      }).then(worker => {
        worker === null || worker === void 0 ? void 0 : worker.setSchema(schema, 'https://help.kusto.windows.net', 'Samples');
      });
    });
  }, [datasource.azureLogAnalyticsDatasource, (_query$azureLogAnalyt2 = query.azureLogAnalytics) === null || _query$azureLogAnalyt2 === void 0 ? void 0 : _query$azureLogAnalyt2.resource]);
  const handleEditorMount = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((editor, monaco) => {
    var _monacoPromiseRef$cur, _monacoPromiseRef$cur2;

    (_monacoPromiseRef$cur = monacoPromiseRef.current) === null || _monacoPromiseRef$cur === void 0 ? void 0 : (_monacoPromiseRef$cur2 = _monacoPromiseRef$cur.resolve) === null || _monacoPromiseRef$cur2 === void 0 ? void 0 : _monacoPromiseRef$cur2.call(_monacoPromiseRef$cur, {
      editor,
      monaco
    });
  }, []);
  const onChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(newQuery => {
    onQueryChange((0,_setQueryValue__WEBPACK_IMPORTED_MODULE_3__.setKustoQuery)(query, newQuery));
  }, [onQueryChange, query]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.CodeEditor, {
    value: (_query$azureLogAnalyt3 = (_query$azureLogAnalyt4 = query.azureLogAnalytics) === null || _query$azureLogAnalyt4 === void 0 ? void 0 : _query$azureLogAnalyt4.query) !== null && _query$azureLogAnalyt3 !== void 0 ? _query$azureLogAnalyt3 : '',
    language: "kusto",
    height: 200,
    width: "100%",
    showMiniMap: false,
    onBlur: onChange,
    onSave: onChange,
    onEditorDidMount: handleEditorMount
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (QueryField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/index.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _LogsQueryEditor__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _LogsQueryEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/LogsQueryEditor.tsx");


/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/setQueryValue.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setFormatAs": () => (/* binding */ setFormatAs),
/* harmony export */   "setKustoQuery": () => (/* binding */ setKustoQuery),
/* harmony export */   "setResource": () => (/* binding */ setResource)
/* harmony export */ });
function setKustoQuery(query, kustoQuery) {
  return Object.assign({}, query, {
    azureLogAnalytics: Object.assign({}, query.azureLogAnalytics, {
      query: kustoQuery
    })
  });
}
function setFormatAs(query, formatAs) {
  return Object.assign({}, query, {
    azureLogAnalytics: Object.assign({}, query.azureLogAnalytics, {
      resultFormat: formatAs
    })
  });
}
function setResource(query, resourceURI) {
  return Object.assign({}, query, {
    azureLogAnalytics: Object.assign({}, query.azureLogAnalytics, {
      resource: resourceURI
    })
  });
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/useMigrations.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useMigrations)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts");



async function migrateWorkspaceQueryToResourceQuery(datasource, query, onChange) {
  var _query$azureLogAnalyt;

  if (((_query$azureLogAnalyt = query.azureLogAnalytics) === null || _query$azureLogAnalyt === void 0 ? void 0 : _query$azureLogAnalyt.workspace) !== undefined && !query.azureLogAnalytics.resource) {
    const isWorkspaceGUID = (0,_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_1__.isGUIDish)(query.azureLogAnalytics.workspace);
    let resource;

    if (isWorkspaceGUID) {
      resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(query.azureLogAnalytics.workspace);
    } else {
      // The value of workspace is probably a template variable so we just migrate it over as-is
      resource = query.azureLogAnalytics.workspace;
    }

    const newQuery = Object.assign({}, query, {
      azureLogAnalytics: Object.assign({}, query.azureLogAnalytics, {
        resource: resource,
        workspace: undefined
      })
    });
    delete newQuery.azureLogAnalytics.workspace;
    onChange(newQuery);
  }
}

function useMigrations(datasource, query, onChange) {
  const [migrationError, setMigrationError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    migrateWorkspaceQueryToResourceQuery(datasource, query, onChange).catch(err => setMigrationError({
      title: 'Unable to migrate workspace as a resource',
      message: err.message
    }));
  }, [datasource, query, onChange]);
  return migrationError;
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/AggregationField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");






const AggregationField = ({
  query,
  variableOptionGroup,
  onQueryChange,
  aggregationOptions,
  isLoading
}) => {
  var _query$azureMonitor;

  const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(change => {
    if (!change.value) {
      return;
    }

    const newQuery = (0,_setQueryValue__WEBPACK_IMPORTED_MODULE_3__.setAggregation)(query, change.value);
    onQueryChange(newQuery);
  }, [onQueryChange, query]);
  const options = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => [...aggregationOptions, variableOptionGroup], [aggregationOptions, variableOptionGroup]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_2__.Field, {
    label: "Aggregation",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
      inputId: "azure-monitor-metrics-aggregation-field",
      value: (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.aggregation,
      onChange: handleChange,
      options: options,
      width: 38,
      isLoading: isLoading
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AggregationField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/DimensionFields.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");







const useDimensionLabels = (data, query) => {
  const [dimensionLabels, setDimensionLabels] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    var _data$series;

    let labelsObj = {};

    if (data !== null && data !== void 0 && (_data$series = data.series) !== null && _data$series !== void 0 && _data$series.length) {
      // Identify which series' in the dataframe are relevant to the current query
      const series = data.series.flat().filter(series => series.refId === query.refId);
      const fields = series.flatMap(series => series.fields); // Retrieve labels for series fields

      const labels = fields.map(fields => fields.labels).flat().filter(item => item);

      for (const label of labels) {
        // Labels only exist for series that have a dimension selected
        if (label) {
          for (const [dimension, value] of Object.entries(label)) {
            if (labelsObj[dimension]) {
              labelsObj[dimension].add(value);
            } else {
              labelsObj[dimension] = new Set([value]);
            }
          }
        }
      }
    }

    setDimensionLabels(prevLabels => {
      const newLabels = {};
      const currentLabels = Object.keys(labelsObj);

      if (currentLabels.length === 0) {
        return prevLabels;
      }

      for (const label of currentLabels) {
        if (prevLabels[label] && labelsObj[label].size < prevLabels[label].size) {
          newLabels[label] = prevLabels[label];
        } else {
          newLabels[label] = labelsObj[label];
        }
      }

      return newLabels;
    });
  }, [data === null || data === void 0 ? void 0 : data.series, query.refId]);
  return dimensionLabels;
};

const DimensionFields = ({
  data,
  query,
  dimensionOptions,
  onQueryChange
}) => {
  var _query$azureMonitor2;

  const dimensionFilters = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    var _query$azureMonitor$d, _query$azureMonitor;

    return (_query$azureMonitor$d = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.dimensionFilters) !== null && _query$azureMonitor$d !== void 0 ? _query$azureMonitor$d : [];
  }, [(_query$azureMonitor2 = query.azureMonitor) === null || _query$azureMonitor2 === void 0 ? void 0 : _query$azureMonitor2.dimensionFilters]);
  const dimensionLabels = useDimensionLabels(data, query);
  const dimensionOperators = [{
    label: '==',
    value: 'eq'
  }, {
    label: '!=',
    value: 'ne'
  }, {
    label: 'starts with',
    value: 'sw'
  }];
  const validDimensionOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    // We filter out any dimensions that have already been used in a filter as the API doesn't support having multiple filters with the same dimension name.
    // The Azure portal also doesn't support this feature so it makes sense for consistency.
    let t = dimensionOptions;

    if (dimensionFilters.length) {
      t = dimensionOptions.filter(val => !dimensionFilters.some(dimensionFilter => dimensionFilter.dimension === val.value));
    }

    return t;
  }, [dimensionFilters, dimensionOptions]);

  const addFilter = () => {
    onQueryChange((0,_setQueryValue__WEBPACK_IMPORTED_MODULE_3__.appendDimensionFilter)(query));
  };

  const removeFilter = index => {
    onQueryChange((0,_setQueryValue__WEBPACK_IMPORTED_MODULE_3__.removeDimensionFilter)(query, index));
  };

  const onFieldChange = (filterIndex, fieldName, value) => {
    onQueryChange((0,_setQueryValue__WEBPACK_IMPORTED_MODULE_3__.setDimensionFilterValue)(query, filterIndex, fieldName, value));
  };

  const onFilterInputChange = (index, v) => {
    var _v$value;

    onFieldChange(index, 'filters', [(_v$value = v === null || v === void 0 ? void 0 : v.value) !== null && _v$value !== void 0 ? _v$value : '']);
  };

  const getValidDimensionOptions = selectedDimension => {
    return validDimensionOptions.concat(dimensionOptions.filter(item => item.value === selectedDimension));
  };

  const getValidFilterOptions = (selectedFilter, dimension) => {
    var _dimensionLabels$dime;

    const dimensionFilters = Array.from((_dimensionLabels$dime = dimensionLabels[dimension.toLowerCase()]) !== null && _dimensionLabels$dime !== void 0 ? _dimensionLabels$dime : []);

    if (dimensionFilters.find(filter => filter === selectedFilter)) {
      return dimensionFilters.map(filter => ({
        value: filter,
        label: filter
      }));
    }

    return [...dimensionFilters, ...(selectedFilter && selectedFilter !== '*' ? [selectedFilter] : [])].map(item => ({
      value: item,
      label: item
    }));
  };

  const getValidMultiSelectOptions = (selectedFilters, dimension) => {
    const labelOptions = getValidFilterOptions(undefined, dimension);

    if (selectedFilters) {
      for (const filter of selectedFilters) {
        if (!labelOptions.find(label => label.value === filter)) {
          labelOptions.push({
            value: filter,
            label: filter
          });
        }
      }
    }

    return labelOptions;
  };

  const getValidOperators = selectedOperator => {
    if (dimensionOperators.find(operator => operator.value === selectedOperator)) {
      return dimensionOperators;
    }

    return [...dimensionOperators, ...(selectedOperator ? [{
      label: selectedOperator,
      value: selectedOperator
    }] : [])];
  };

  const onMultiSelectFilterChange = (index, v) => {
    onFieldChange(index, 'filters', v.map(item => item.value || ''));
  };

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_2__.Field, {
    label: "Dimension",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.VerticalGroup, {
      spacing: "xs",
      children: [dimensionFilters.map((filter, index) => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.HorizontalGroup, {
        spacing: "xs",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
          placeholder: "Field",
          value: filter.dimension,
          options: getValidDimensionOptions(filter.dimension),
          onChange: v => {
            var _v$value2;

            return onFieldChange(index, 'dimension', (_v$value2 = v.value) !== null && _v$value2 !== void 0 ? _v$value2 : '');
          },
          width: 38
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
          menuShouldPortal: true,
          placeholder: "Operation",
          value: filter.operator,
          options: getValidOperators(filter.operator),
          onChange: v => {
            var _v$value3;

            return onFieldChange(index, 'operator', (_v$value3 = v.value) !== null && _v$value3 !== void 0 ? _v$value3 : '');
          },
          allowCustomValue: true
        }), filter.operator === 'eq' || filter.operator === 'ne' ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.MultiSelect, {
          menuShouldPortal: true,
          placeholder: "Select value(s)",
          value: filter.filters,
          options: getValidMultiSelectOptions(filter.filters, filter.dimension),
          onChange: v => onMultiSelectFilterChange(index, v),
          "aria-label": 'dimension-labels-select',
          allowCustomValue: true
        }) :
        /*#__PURE__*/
        // The API does not currently allow for multiple "starts with" clauses to be used.
        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
          menuShouldPortal: true,
          placeholder: "Select value",
          value: filter.filters ? filter.filters[0] : '',
          allowCustomValue: true,
          options: getValidFilterOptions(filter.filters ? filter.filters[0] : '', filter.dimension),
          onChange: v => onFilterInputChange(index, v),
          isClearable: true
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {
          variant: "secondary",
          size: "md",
          icon: "trash-alt",
          "aria-label": "Remove",
          onClick: () => removeFilter(index)
        })]
      }, index)), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Button, {
        variant: "secondary",
        size: "md",
        onClick: addFilter,
        children: "Add new dimension"
      })]
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DimensionFields);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/LegendFormatField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");






const LegendFormatField = ({
  onQueryChange,
  query
}) => {
  var _query$azureMonitor$a, _query$azureMonitor;

  const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((_query$azureMonitor$a = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.alias) !== null && _query$azureMonitor$a !== void 0 ? _query$azureMonitor$a : ''); // As calling onQueryChange initiates a the datasource refresh, we only want to call it once
  // the field loses focus

  const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(ev => {
    if (ev.target instanceof HTMLInputElement) {
      setValue(ev.target.value);
    }
  }, []);
  const handleBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    const newQuery = (0,_setQueryValue__WEBPACK_IMPORTED_MODULE_3__.setLegendAlias)(query, value);
    onQueryChange(newQuery);
  }, [onQueryChange, query, value]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_2__.Field, {
    label: "Legend format",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {
      id: "azure-monitor-metrics-legend-field",
      placeholder: "Alias patterns",
      value: value,
      onChange: handleChange,
      onBlur: handleBlur,
      width: 38
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LegendFormatField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricNameField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");






const MetricNameField = ({
  metricNames,
  query,
  variableOptionGroup,
  onQueryChange
}) => {
  var _query$azureMonitor$m, _query$azureMonitor;

  const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(change => {
    if (!change.value) {
      return;
    }

    const newQuery = (0,_setQueryValue__WEBPACK_IMPORTED_MODULE_3__.setMetricName)(query, change.value);
    onQueryChange(newQuery);
  }, [onQueryChange, query]);
  const options = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => [...metricNames, variableOptionGroup], [metricNames, variableOptionGroup]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_2__.Field, {
    label: "Metric",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
      inputId: "azure-monitor-metrics-metric-field",
      value: (_query$azureMonitor$m = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.metricName) !== null && _query$azureMonitor$m !== void 0 ? _query$azureMonitor$m : null,
      onChange: handleChange,
      options: options,
      width: 38,
      allowCustomValue: true
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MetricNameField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricNamespaceField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");






const MetricNamespaceField = ({
  metricNamespaces,
  query,
  variableOptionGroup,
  onQueryChange
}) => {
  var _query$azureMonitor, _query$azureMonitor2;

  const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(change => {
    if (!change.value) {
      return;
    }

    const newQuery = (0,_setQueryValue__WEBPACK_IMPORTED_MODULE_3__.setMetricNamespace)(query, change.value);
    onQueryChange(newQuery);
  }, [onQueryChange, query]);
  const options = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => [...metricNamespaces, variableOptionGroup], [metricNamespaces, variableOptionGroup]);
  const optionValues = metricNamespaces.map(m => m.value.toLowerCase()).concat(variableOptionGroup.options.map(p => p.value));
  const value = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.metricNamespace;

  if (value && !optionValues.includes(value.toLowerCase())) {
    options.push({
      label: value,
      value
    });
  }

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_2__.Field, {
    label: "Metric namespace",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
      inputId: "azure-monitor-metrics-metric-namespace-field",
      value: (_query$azureMonitor2 = query.azureMonitor) === null || _query$azureMonitor2 === void 0 ? void 0 : _query$azureMonitor2.metricNamespace,
      onChange: handleChange,
      options: options,
      width: 38,
      allowCustomValue: true
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MetricNamespaceField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricsQueryEditor.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/__virtual__/@emotion-css-virtual-5255b58730/0/cache/@emotion-css-npm-11.9.0-e415e285ad-bd83d9af5c.zip/node_modules/@emotion/css/dist/emotion-css.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_experimental__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./.yarn/__virtual__/@grafana-experimental-virtual-45ce772437/0/cache/@grafana-experimental-npm-0.0.2-canary.32-3892e62f7b-71924e6d03.zip/node_modules/@grafana/experimental/index.js");
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _ResourceField__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourceField/index.tsx");
/* harmony import */ var _ResourcePicker_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/types.ts");
/* harmony import */ var _AggregationField__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/AggregationField.tsx");
/* harmony import */ var _DimensionFields__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/DimensionFields.tsx");
/* harmony import */ var _LegendFormatField__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/LegendFormatField.tsx");
/* harmony import */ var _MetricNameField__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricNameField.tsx");
/* harmony import */ var _MetricNamespaceField__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricNamespaceField.tsx");
/* harmony import */ var _NewDimensionFields__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/NewDimensionFields.tsx");
/* harmony import */ var _TimeGrainField__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/TimeGrainField.tsx");
/* harmony import */ var _TopField__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/TopField.tsx");
/* harmony import */ var _dataHooks__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/dataHooks.ts");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");




















const MetricsQueryEditor = ({
  data,
  query,
  datasource,
  variableOptionGroup,
  onChange,
  setError
}) => {
  const styles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_4__.useStyles2)(getStyles);
  const metricsMetadata = (0,_dataHooks__WEBPACK_IMPORTED_MODULE_15__.useMetricMetadata)(query, datasource, onChange);
  const metricNamespaces = (0,_dataHooks__WEBPACK_IMPORTED_MODULE_15__.useMetricNamespaces)(query, datasource, onChange, setError);
  const metricNames = (0,_dataHooks__WEBPACK_IMPORTED_MODULE_15__.useMetricNames)(query, datasource, onChange, setError);

  if (_grafana_runtime__WEBPACK_IMPORTED_MODULE_3__.config.featureToggles.azureMonitorExperimentalUI) {
    var _query$azureMonitor, _metricsMetadata$aggO, _metricsMetadata$time, _metricsMetadata$dime;

    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)("span", {
      "data-testid": "azure-monitor-metrics-query-editor-with-experimental-ui",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_2__.EditorRows, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_2__.EditorRow, {
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_2__.EditorFieldGroup, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_ResourceField__WEBPACK_IMPORTED_MODULE_5__["default"], {
              query: query,
              datasource: datasource,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError,
              selectableEntryTypes: [_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_6__.ResourceRowType.Resource],
              setResource: _setQueryValue__WEBPACK_IMPORTED_MODULE_16__.setResource,
              resourceUri: (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.resourceUri,
              queryType: 'metrics'
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_MetricNamespaceField__WEBPACK_IMPORTED_MODULE_11__["default"], {
              metricNamespaces: metricNamespaces,
              query: query,
              datasource: datasource,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_MetricNameField__WEBPACK_IMPORTED_MODULE_10__["default"], {
              metricNames: metricNames,
              query: query,
              datasource: datasource,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError
            })]
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_2__.EditorRow, {
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_2__.EditorFieldGroup, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_AggregationField__WEBPACK_IMPORTED_MODULE_7__["default"], {
              query: query,
              datasource: datasource,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError,
              aggregationOptions: (_metricsMetadata$aggO = metricsMetadata === null || metricsMetadata === void 0 ? void 0 : metricsMetadata.aggOptions) !== null && _metricsMetadata$aggO !== void 0 ? _metricsMetadata$aggO : [],
              isLoading: metricsMetadata.isLoading
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_TimeGrainField__WEBPACK_IMPORTED_MODULE_13__["default"], {
              query: query,
              datasource: datasource,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError,
              timeGrainOptions: (_metricsMetadata$time = metricsMetadata === null || metricsMetadata === void 0 ? void 0 : metricsMetadata.timeGrains) !== null && _metricsMetadata$time !== void 0 ? _metricsMetadata$time : []
            })]
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_2__.EditorRow, {
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_2__.EditorFieldGroup, {
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_NewDimensionFields__WEBPACK_IMPORTED_MODULE_12__["default"], {
              data: data,
              query: query,
              datasource: datasource,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError,
              dimensionOptions: (_metricsMetadata$dime = metricsMetadata === null || metricsMetadata === void 0 ? void 0 : metricsMetadata.dimensions) !== null && _metricsMetadata$dime !== void 0 ? _metricsMetadata$dime : []
            })
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_2__.EditorRow, {
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_2__.EditorFieldGroup, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_TopField__WEBPACK_IMPORTED_MODULE_14__["default"], {
              query: query,
              datasource: datasource,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_LegendFormatField__WEBPACK_IMPORTED_MODULE_9__["default"], {
              query: query,
              datasource: datasource,
              variableOptionGroup: variableOptionGroup,
              onQueryChange: onChange,
              setError: setError
            })]
          })
        })]
      })
    });
  } else {
    var _query$azureMonitor2, _metricsMetadata$aggO2, _metricsMetadata$time2, _metricsMetadata$dime2;

    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)("div", {
      "data-testid": "azure-monitor-metrics-query-editor-with-resource-picker",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_4__.InlineFieldRow, {
        className: styles.row,
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_ResourceField__WEBPACK_IMPORTED_MODULE_5__["default"], {
          query: query,
          datasource: datasource,
          variableOptionGroup: variableOptionGroup,
          onQueryChange: onChange,
          setError: setError,
          selectableEntryTypes: [_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_6__.ResourceRowType.Resource],
          setResource: _setQueryValue__WEBPACK_IMPORTED_MODULE_16__.setResource,
          resourceUri: (_query$azureMonitor2 = query.azureMonitor) === null || _query$azureMonitor2 === void 0 ? void 0 : _query$azureMonitor2.resourceUri,
          queryType: "metrics"
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)(_grafana_ui__WEBPACK_IMPORTED_MODULE_4__.InlineFieldRow, {
        className: styles.row,
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_MetricNamespaceField__WEBPACK_IMPORTED_MODULE_11__["default"], {
          metricNamespaces: metricNamespaces,
          query: query,
          datasource: datasource,
          variableOptionGroup: variableOptionGroup,
          onQueryChange: onChange,
          setError: setError
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_MetricNameField__WEBPACK_IMPORTED_MODULE_10__["default"], {
          metricNames: metricNames,
          query: query,
          datasource: datasource,
          variableOptionGroup: variableOptionGroup,
          onQueryChange: onChange,
          setError: setError
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsxs)(_grafana_ui__WEBPACK_IMPORTED_MODULE_4__.InlineFieldRow, {
        className: styles.row,
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_AggregationField__WEBPACK_IMPORTED_MODULE_7__["default"], {
          query: query,
          datasource: datasource,
          variableOptionGroup: variableOptionGroup,
          onQueryChange: onChange,
          setError: setError,
          aggregationOptions: (_metricsMetadata$aggO2 = metricsMetadata === null || metricsMetadata === void 0 ? void 0 : metricsMetadata.aggOptions) !== null && _metricsMetadata$aggO2 !== void 0 ? _metricsMetadata$aggO2 : [],
          isLoading: metricsMetadata.isLoading
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_TimeGrainField__WEBPACK_IMPORTED_MODULE_13__["default"], {
          query: query,
          datasource: datasource,
          variableOptionGroup: variableOptionGroup,
          onQueryChange: onChange,
          setError: setError,
          timeGrainOptions: (_metricsMetadata$time2 = metricsMetadata === null || metricsMetadata === void 0 ? void 0 : metricsMetadata.timeGrains) !== null && _metricsMetadata$time2 !== void 0 ? _metricsMetadata$time2 : []
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_DimensionFields__WEBPACK_IMPORTED_MODULE_8__["default"], {
        data: data,
        query: query,
        datasource: datasource,
        variableOptionGroup: variableOptionGroup,
        onQueryChange: onChange,
        setError: setError,
        dimensionOptions: (_metricsMetadata$dime2 = metricsMetadata === null || metricsMetadata === void 0 ? void 0 : metricsMetadata.dimensions) !== null && _metricsMetadata$dime2 !== void 0 ? _metricsMetadata$dime2 : []
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_TopField__WEBPACK_IMPORTED_MODULE_14__["default"], {
        query: query,
        datasource: datasource,
        variableOptionGroup: variableOptionGroup,
        onQueryChange: onChange,
        setError: setError
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__.jsx)(_LegendFormatField__WEBPACK_IMPORTED_MODULE_9__["default"], {
        query: query,
        datasource: datasource,
        variableOptionGroup: variableOptionGroup,
        onQueryChange: onChange,
        setError: setError
      })]
    });
  }
};

const getStyles = () => ({
  row: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    rowGap: 0
  })
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MetricsQueryEditor);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/NewDimensionFields.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_experimental__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/__virtual__/@grafana-experimental-virtual-45ce772437/0/cache/@grafana-experimental-npm-0.0.2-canary.32-3892e62f7b-71924e6d03.zip/node_modules/@grafana/experimental/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");








const useDimensionLabels = (data, query) => {
  const [dimensionLabels, setDimensionLabels] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    var _data$series;

    let labelsObj = {};

    if (data !== null && data !== void 0 && (_data$series = data.series) !== null && _data$series !== void 0 && _data$series.length) {
      // Identify which series' in the dataframe are relevant to the current query
      const series = data.series.flat().filter(series => series.refId === query.refId);
      const fields = series.flatMap(series => series.fields); // Retrieve labels for series fields

      const labels = fields.map(fields => fields.labels).flat().filter(item => item !== null && item !== undefined);

      for (const label of labels) {
        // Labels only exist for series that have a dimension selected
        for (const [dimension, value] of Object.entries(label)) {
          if (labelsObj[dimension]) {
            labelsObj[dimension].add(value);
          } else {
            labelsObj[dimension] = new Set([value]);
          }
        }
      }
    }

    setDimensionLabels(prevLabels => {
      const newLabels = {};
      const currentLabels = Object.keys(labelsObj);

      if (currentLabels.length === 0) {
        return prevLabels;
      }

      for (const label of currentLabels) {
        if (prevLabels[label] && labelsObj[label].size < prevLabels[label].size) {
          newLabels[label] = prevLabels[label];
        } else {
          newLabels[label] = labelsObj[label];
        }
      }

      return newLabels;
    });
  }, [data === null || data === void 0 ? void 0 : data.series, query.refId]);
  return dimensionLabels;
};

const NewDimensionFields = ({
  data,
  query,
  dimensionOptions,
  onQueryChange
}) => {
  var _query$azureMonitor2;

  const dimensionFilters = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    var _query$azureMonitor$d, _query$azureMonitor;

    return (_query$azureMonitor$d = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.dimensionFilters) !== null && _query$azureMonitor$d !== void 0 ? _query$azureMonitor$d : [];
  }, [(_query$azureMonitor2 = query.azureMonitor) === null || _query$azureMonitor2 === void 0 ? void 0 : _query$azureMonitor2.dimensionFilters]);
  const dimensionLabels = useDimensionLabels(data, query);
  const dimensionOperators = [{
    label: '==',
    value: 'eq'
  }, {
    label: '!=',
    value: 'ne'
  }, {
    label: 'starts with',
    value: 'sw'
  }];
  const validDimensionOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    // We filter out any dimensions that have already been used in a filter as the API doesn't support having multiple filters with the same dimension name.
    // The Azure portal also doesn't support this feature so it makes sense for consistency.
    let t = dimensionOptions;

    if (dimensionFilters.length) {
      t = dimensionOptions.filter(val => !dimensionFilters.some(dimensionFilter => dimensionFilter.dimension === val.value));
    }

    return t;
  }, [dimensionFilters, dimensionOptions]);

  const onFieldChange = (fieldName, item, value, onChange) => {
    item[fieldName] = value;
    onChange(item);
  };

  const getValidDimensionOptions = selectedDimension => {
    return validDimensionOptions.concat(dimensionOptions.filter(item => item.value === selectedDimension));
  };

  const getValidFilterOptions = (selectedFilter, dimension) => {
    var _dimensionLabels$dime;

    const dimensionFilters = Array.from((_dimensionLabels$dime = dimensionLabels[dimension.toLowerCase()]) !== null && _dimensionLabels$dime !== void 0 ? _dimensionLabels$dime : []);

    if (dimensionFilters.find(filter => filter === selectedFilter)) {
      return dimensionFilters.map(filter => ({
        value: filter,
        label: filter
      }));
    }

    return [...dimensionFilters, ...(selectedFilter && selectedFilter !== '*' ? [selectedFilter] : [])].map(item => ({
      value: item,
      label: item
    }));
  };

  const getValidMultiSelectOptions = (selectedFilters, dimension) => {
    const labelOptions = getValidFilterOptions(undefined, dimension);

    if (selectedFilters) {
      for (const filter of selectedFilters) {
        if (!labelOptions.find(label => label.value === filter)) {
          labelOptions.push({
            value: filter,
            label: filter
          });
        }
      }
    }

    return labelOptions;
  };

  const getValidOperators = selectedOperator => {
    if (dimensionOperators.find(operator => operator.value === selectedOperator)) {
      return dimensionOperators;
    }

    return [...dimensionOperators, ...(selectedOperator ? [{
      label: selectedOperator,
      value: selectedOperator
    }] : [])];
  };

  const changedFunc = changed => {
    const properData = changed.map(x => {
      var _x$dimension, _x$operator, _x$filters;

      return {
        dimension: (_x$dimension = x.dimension) !== null && _x$dimension !== void 0 ? _x$dimension : '',
        operator: (_x$operator = x.operator) !== null && _x$operator !== void 0 ? _x$operator : 'eq',
        filters: (_x$filters = x.filters) !== null && _x$filters !== void 0 ? _x$filters : []
      };
    });
    onQueryChange((0,_setQueryValue__WEBPACK_IMPORTED_MODULE_4__.setDimensionFilters)(query, properData));
  };

  const renderFilters = (item, onChange, onDelete) => {
    var _item$dimension, _item$dimension2;

    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.HorizontalGroup, {
      spacing: "none",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Select, {
        menuShouldPortal: true,
        placeholder: "Field",
        value: item.dimension,
        options: getValidDimensionOptions(item.dimension || ''),
        onChange: e => {
          var _e$value;

          return onFieldChange('dimension', item, (_e$value = e.value) !== null && _e$value !== void 0 ? _e$value : '', onChange);
        }
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Select, {
        menuShouldPortal: true,
        placeholder: "Operation",
        value: item.operator,
        options: getValidOperators(item.operator || 'eq'),
        onChange: e => {
          var _e$value2;

          return onFieldChange('operator', item, (_e$value2 = e.value) !== null && _e$value2 !== void 0 ? _e$value2 : '', onChange);
        },
        allowCustomValue: true
      }), item.operator === 'eq' || item.operator === 'ne' ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.MultiSelect, {
        menuShouldPortal: true,
        placeholder: "Select value(s)",
        value: item.filters,
        options: getValidMultiSelectOptions(item.filters, (_item$dimension = item.dimension) !== null && _item$dimension !== void 0 ? _item$dimension : ''),
        onChange: e => onFieldChange('filters', item, e.map(x => {
          var _x$value;

          return (_x$value = x.value) !== null && _x$value !== void 0 ? _x$value : '';
        }), onChange),
        "aria-label": 'dimension-labels-select',
        allowCustomValue: true
      }) :
      /*#__PURE__*/
      // The API does not currently allow for multiple "starts with" clauses to be used.
      (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Select, {
        menuShouldPortal: true,
        placeholder: "Select value",
        value: item.filters ? item.filters[0] : '',
        allowCustomValue: true,
        options: getValidFilterOptions(item.filters ? item.filters[0] : '', (_item$dimension2 = item.dimension) !== null && _item$dimension2 !== void 0 ? _item$dimension2 : ''),
        onChange: e => {
          var _e$value3;

          return onFieldChange('filters', item, [(_e$value3 = e === null || e === void 0 ? void 0 : e.value) !== null && _e$value3 !== void 0 ? _e$value3 : ''], onChange);
        },
        isClearable: true
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.AccessoryButton, {
        "aria-label": "Remove",
        icon: "times",
        variant: "secondary",
        onClick: onDelete,
        type: "button"
      })]
    });
  };

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_3__.Field, {
    label: "Dimensions",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorList, {
      items: dimensionFilters,
      onChange: changedFunc,
      renderItem: renderFilters
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NewDimensionFields);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/TimeGrainField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _time_grain_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");







const TimeGrainField = ({
  query,
  timeGrainOptions,
  variableOptionGroup,
  onQueryChange
}) => {
  var _query$azureMonitor;

  const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(change => {
    if (!change.value) {
      return;
    }

    const newQuery = (0,_setQueryValue__WEBPACK_IMPORTED_MODULE_4__.setTimeGrain)(query, change.value);
    onQueryChange(newQuery);
  }, [onQueryChange, query]);
  const timeGrains = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const autoInterval = _time_grain_converter__WEBPACK_IMPORTED_MODULE_2__["default"].findClosestTimeGrain('1m', timeGrainOptions.map(o => _time_grain_converter__WEBPACK_IMPORTED_MODULE_2__["default"].createKbnUnitFromISO8601Duration(o.value)) || ['1m', '5m', '15m', '30m', '1h', '6h', '12h', '1d']);
    const baseTimeGrains = timeGrainOptions.map(v => v.value === 'auto' ? Object.assign({}, v, {
      description: autoInterval
    }) : v);
    return [...baseTimeGrains, variableOptionGroup];
  }, [timeGrainOptions, variableOptionGroup]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_3__.Field, {
    label: "Time grain",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
      inputId: "azure-monitor-metrics-time-grain-field",
      value: (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.timeGrain,
      onChange: handleChange,
      options: timeGrains,
      width: 38
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TimeGrainField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/TopField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");






const TopField = ({
  onQueryChange,
  query
}) => {
  var _query$azureMonitor$t, _query$azureMonitor;

  const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)((_query$azureMonitor$t = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.top) !== null && _query$azureMonitor$t !== void 0 ? _query$azureMonitor$t : ''); // As calling onQueryChange initiates a the datasource refresh, we only want to call it once
  // the field loses focus

  const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(ev => {
    if (ev.target instanceof HTMLInputElement) {
      setValue(ev.target.value);
    }
  }, []);
  const handleBlur = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {
    const newQuery = (0,_setQueryValue__WEBPACK_IMPORTED_MODULE_3__.setTop)(query, value);
    onQueryChange(newQuery);
  }, [onQueryChange, query, value]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_2__.Field, {
    label: "Top",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {
      id: "azure-monitor-metrics-top-field",
      value: value,
      onChange: handleChange,
      onBlur: handleBlur,
      width: 16
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (TopField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/dataHooks.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useMetricMetadata": () => (/* binding */ useMetricMetadata),
/* harmony export */   "useMetricNames": () => (/* binding */ useMetricNames),
/* harmony export */   "useMetricNamespaces": () => (/* binding */ useMetricNamespaces)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-data/src/index.ts");
/* harmony import */ var _time_grain_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts");
/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/common.ts");
/* harmony import */ var _utils_useAsyncState__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/useAsyncState.ts");
/* harmony import */ var _setQueryValue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");






const useMetricNamespaces = (query, datasource, onChange, setError) => {
  var _query$azureMonitor;

  const {
    metricNamespace,
    resourceUri
  } = (_query$azureMonitor = query.azureMonitor) !== null && _query$azureMonitor !== void 0 ? _query$azureMonitor : {};
  const metricNamespaces = (0,_utils_useAsyncState__WEBPACK_IMPORTED_MODULE_4__.useAsyncState)(async () => {
    if (!resourceUri) {
      return;
    }

    const results = await datasource.azureMonitorDatasource.getMetricNamespaces({
      resourceUri
    });
    const options = formatOptions(results, metricNamespace); // Do some cleanup of the query state if need be

    if (!metricNamespace && options.length) {
      onChange((0,_setQueryValue__WEBPACK_IMPORTED_MODULE_5__.setMetricNamespace)(query, options[0].value));
    }

    return options;
  }, setError, [resourceUri]);
  return metricNamespaces;
};
const useMetricNames = (query, datasource, onChange, setError) => {
  var _query$azureMonitor2;

  const {
    metricNamespace,
    metricName,
    resourceUri
  } = (_query$azureMonitor2 = query.azureMonitor) !== null && _query$azureMonitor2 !== void 0 ? _query$azureMonitor2 : {};
  return (0,_utils_useAsyncState__WEBPACK_IMPORTED_MODULE_4__.useAsyncState)(async () => {
    if (!(metricNamespace && resourceUri)) {
      return;
    }

    const results = await datasource.azureMonitorDatasource.getMetricNames({
      resourceUri,
      metricNamespace
    });
    const options = formatOptions(results, metricName);
    return options;
  }, setError, [resourceUri, metricNamespace]);
};
const defaultMetricMetadata = {
  aggOptions: [],
  timeGrains: [],
  dimensions: [],
  isLoading: false,
  supportedAggTypes: [],
  primaryAggType: undefined
};
const useMetricMetadata = (query, datasource, onChange) => {
  var _query$azureMonitor3;

  const [metricMetadata, setMetricMetadata] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultMetricMetadata);
  const {
    resourceUri,
    metricNamespace,
    metricName,
    aggregation,
    timeGrain
  } = (_query$azureMonitor3 = query.azureMonitor) !== null && _query$azureMonitor3 !== void 0 ? _query$azureMonitor3 : {}; // Fetch new metric metadata when the fields change

  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!(resourceUri && metricNamespace && metricName)) {
      setMetricMetadata(defaultMetricMetadata);
      return;
    }

    datasource.azureMonitorDatasource.getMetricMetadata({
      resourceUri,
      metricNamespace,
      metricName
    }).then(metadata => {
      var _metadata$supportedAg;

      // TODO: Move the aggregationTypes and timeGrain defaults into `getMetricMetadata`
      const aggregations = (metadata.supportedAggTypes || [metadata.primaryAggType]).map(v => ({
        label: v,
        value: v
      }));
      setMetricMetadata({
        aggOptions: aggregations,
        timeGrains: metadata.supportedTimeGrains,
        dimensions: metadata.dimensions,
        isLoading: false,
        supportedAggTypes: (_metadata$supportedAg = metadata.supportedAggTypes) !== null && _metadata$supportedAg !== void 0 ? _metadata$supportedAg : [],
        primaryAggType: metadata.primaryAggType
      });
    });
  }, [datasource, resourceUri, metricNamespace, metricName]); // Update the query state in response to the meta data changing

  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const newAggregation = aggregation || metricMetadata.primaryAggType;
    const newTimeGrain = timeGrain || 'auto';

    if (newAggregation !== aggregation || newTimeGrain !== timeGrain) {
      onChange(Object.assign({}, query, {
        azureMonitor: Object.assign({}, query.azureMonitor, {
          aggregation: newAggregation,
          timeGrain: newTimeGrain,
          allowedTimeGrainsMs: metricMetadata.timeGrains.filter(timeGrain => timeGrain.value !== 'auto').map(timeGrain => _grafana_data__WEBPACK_IMPORTED_MODULE_1__.rangeUtil.intervalToMs(_time_grain_converter__WEBPACK_IMPORTED_MODULE_2__["default"].createKbnUnitFromISO8601Duration(timeGrain.value)))
        })
      }));
    }
  }, [onChange, metricMetadata, aggregation, timeGrain, query]);
  return metricMetadata;
};

function formatOptions(rawResults, selectedValue) {
  const options = rawResults.map(_utils_common__WEBPACK_IMPORTED_MODULE_3__.toOption); // account for custom values that might have been set in json file like ones crafted with a template variable (ex: "cloud-datasource-resource-$Environment")

  if (selectedValue && !options.find(option => option.value === selectedValue.toLowerCase())) {
    options.push({
      label: selectedValue,
      value: selectedValue
    });
  }

  return options;
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "appendDimensionFilter": () => (/* binding */ appendDimensionFilter),
/* harmony export */   "removeDimensionFilter": () => (/* binding */ removeDimensionFilter),
/* harmony export */   "setAggregation": () => (/* binding */ setAggregation),
/* harmony export */   "setDimensionFilterValue": () => (/* binding */ setDimensionFilterValue),
/* harmony export */   "setDimensionFilters": () => (/* binding */ setDimensionFilters),
/* harmony export */   "setLegendAlias": () => (/* binding */ setLegendAlias),
/* harmony export */   "setMetricName": () => (/* binding */ setMetricName),
/* harmony export */   "setMetricNamespace": () => (/* binding */ setMetricNamespace),
/* harmony export */   "setResource": () => (/* binding */ setResource),
/* harmony export */   "setTimeGrain": () => (/* binding */ setTimeGrain),
/* harmony export */   "setTop": () => (/* binding */ setTop)
/* harmony export */ });
function setResource(query, resourceURI) {
  return Object.assign({}, query, {
    azureMonitor: Object.assign({}, query.azureMonitor, {
      resourceUri: resourceURI,
      metricNamespace: undefined,
      metricName: undefined,
      aggregation: undefined,
      metricDefinition: undefined,
      timeGrain: '',
      dimensionFilters: []
    })
  });
}
function setMetricNamespace(query, metricNamespace) {
  var _query$azureMonitor, _query$azureMonitor2;

  if (((_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.metricNamespace) === metricNamespace) {
    return query;
  }

  let resourceUri = (_query$azureMonitor2 = query.azureMonitor) === null || _query$azureMonitor2 === void 0 ? void 0 : _query$azureMonitor2.resourceUri; // Storage Account URIs need to be handled differently due to the additional storage services (blob/queue/table/file).
  // When one of these namespaces is selected it does not form a part of the URI for the storage account and so must be appended.
  // The 'default' path must also be appended. Without these two paths any API call will fail.

  if (resourceUri && metricNamespace !== null && metricNamespace !== void 0 && metricNamespace.includes('Microsoft.Storage/storageAccounts')) {
    const splitUri = resourceUri.split('/');
    const accountNameIndex = splitUri.findIndex(item => item === 'storageAccounts') + 1;
    const baseUri = splitUri.slice(0, accountNameIndex + 1).join('/');

    if (metricNamespace === 'Microsoft.Storage/storageAccounts') {
      resourceUri = baseUri;
    } else {
      const subNamespace = metricNamespace.split('/')[2];
      resourceUri = `${baseUri}/${subNamespace}/default`;
    }
  }

  return Object.assign({}, query, {
    azureMonitor: Object.assign({}, query.azureMonitor, {
      metricNamespace: metricNamespace,
      metricName: undefined,
      aggregation: undefined,
      timeGrain: '',
      dimensionFilters: [],
      resourceUri
    })
  });
}
function setMetricName(query, metricName) {
  var _query$azureMonitor3;

  if (((_query$azureMonitor3 = query.azureMonitor) === null || _query$azureMonitor3 === void 0 ? void 0 : _query$azureMonitor3.metricName) === metricName) {
    return query;
  }

  return Object.assign({}, query, {
    azureMonitor: Object.assign({}, query.azureMonitor, {
      metricName: metricName,
      aggregation: undefined,
      timeGrain: '',
      dimensionFilters: []
    })
  });
}
function setAggregation(query, aggregation) {
  var _query$azureMonitor4;

  if (((_query$azureMonitor4 = query.azureMonitor) === null || _query$azureMonitor4 === void 0 ? void 0 : _query$azureMonitor4.aggregation) === aggregation) {
    return query;
  }

  return Object.assign({}, query, {
    azureMonitor: Object.assign({}, query.azureMonitor, {
      aggregation: aggregation
    })
  });
}
function setTimeGrain(query, timeGrain) {
  var _query$azureMonitor5;

  if (((_query$azureMonitor5 = query.azureMonitor) === null || _query$azureMonitor5 === void 0 ? void 0 : _query$azureMonitor5.timeGrain) === timeGrain) {
    return query;
  }

  return Object.assign({}, query, {
    azureMonitor: Object.assign({}, query.azureMonitor, {
      timeGrain: timeGrain
    })
  });
}
function setDimensionFilters(query, dimensions) {
  var _query$azureMonitor6;

  if (((_query$azureMonitor6 = query.azureMonitor) === null || _query$azureMonitor6 === void 0 ? void 0 : _query$azureMonitor6.dimensionFilters) === dimensions) {
    return query;
  }

  return Object.assign({}, query, {
    azureMonitor: Object.assign({}, query.azureMonitor, {
      dimensionFilters: dimensions
    })
  });
}
function appendDimensionFilter(query, dimension = '', operator = 'eq', filters = []) {
  var _query$azureMonitor$d, _query$azureMonitor7;

  const existingFilters = (_query$azureMonitor$d = (_query$azureMonitor7 = query.azureMonitor) === null || _query$azureMonitor7 === void 0 ? void 0 : _query$azureMonitor7.dimensionFilters) !== null && _query$azureMonitor$d !== void 0 ? _query$azureMonitor$d : [];
  return setDimensionFilters(query, [...existingFilters, {
    dimension,
    operator,
    filters
  }]);
}
function removeDimensionFilter(query, indexToRemove) {
  var _query$azureMonitor$d2, _query$azureMonitor8;

  const existingFilters = (_query$azureMonitor$d2 = (_query$azureMonitor8 = query.azureMonitor) === null || _query$azureMonitor8 === void 0 ? void 0 : _query$azureMonitor8.dimensionFilters) !== null && _query$azureMonitor$d2 !== void 0 ? _query$azureMonitor$d2 : [];
  const newFilters = [...existingFilters];
  newFilters.splice(indexToRemove, 1);
  return setDimensionFilters(query, newFilters);
}
function setDimensionFilterValue(query, index, fieldName, value) {
  var _query$azureMonitor$d3, _query$azureMonitor9;

  const existingFilters = (_query$azureMonitor$d3 = (_query$azureMonitor9 = query.azureMonitor) === null || _query$azureMonitor9 === void 0 ? void 0 : _query$azureMonitor9.dimensionFilters) !== null && _query$azureMonitor$d3 !== void 0 ? _query$azureMonitor$d3 : [];
  const newFilters = [...existingFilters];
  const newFilter = newFilters[index];
  newFilter[fieldName] = value;

  if (fieldName === 'dimension' || fieldName === 'operator') {
    newFilter.filters = [];
  }

  return setDimensionFilters(query, newFilters);
}
function setTop(query, top) {
  var _query$azureMonitor10;

  if (((_query$azureMonitor10 = query.azureMonitor) === null || _query$azureMonitor10 === void 0 ? void 0 : _query$azureMonitor10.top) === top) {
    return query;
  }

  return Object.assign({}, query, {
    azureMonitor: Object.assign({}, query.azureMonitor, {
      top: top
    })
  });
}
function setLegendAlias(query, alias) {
  var _query$azureMonitor11;

  if (((_query$azureMonitor11 = query.azureMonitor) === null || _query$azureMonitor11 === void 0 ? void 0 : _query$azureMonitor11.alias) === alias) {
    return query;
  }

  return Object.assign({}, query, {
    azureMonitor: Object.assign({}, query.azureMonitor, {
      alias: alias
    })
  });
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MonitorConfig.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MonitorConfig": () => (/* binding */ MonitorConfig),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _credentials__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/credentials.ts");
/* harmony import */ var _AzureCredentialsForm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/AzureCredentialsForm.tsx");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
var _h;








const azureClouds = [{
  value: 'azuremonitor',
  label: 'Azure'
}, {
  value: 'govazuremonitor',
  label: 'Azure US Government'
}, {
  value: 'germanyazuremonitor',
  label: 'Azure Germany'
}, {
  value: 'chinaazuremonitor',
  label: 'Azure China'
}];
const MonitorConfig = props => {
  const {
    updateOptions,
    getSubscriptions
  } = props;
  const credentials = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => (0,_credentials__WEBPACK_IMPORTED_MODULE_2__.getCredentials)(props.options), [props.options]);

  const onCredentialsChange = credentials => {
    updateOptions(options => (0,_credentials__WEBPACK_IMPORTED_MODULE_2__.updateCredentials)(options, credentials));
  };

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {
    children: [_h || (_h = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("h3", {
      className: "page-heading",
      children: "Authentication"
    })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_AzureCredentialsForm__WEBPACK_IMPORTED_MODULE_3__.AzureCredentialsForm, {
      managedIdentityEnabled: _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.config.azure.managedIdentityEnabled,
      credentials: credentials,
      azureCloudOptions: azureClouds,
      onCredentialsChange: onCredentialsChange,
      getSubscriptions: getSubscriptions,
      disabled: props.options.readOnly
    })]
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (MonitorConfig);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/QueryEditor.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var _utils_useLastError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/useLastError.ts");
/* harmony import */ var _ArgQueryEditor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/index.tsx");
/* harmony import */ var _LogsQueryEditor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/index.tsx");
/* harmony import */ var _MetricsQueryEditor_MetricsQueryEditor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricsQueryEditor.tsx");
/* harmony import */ var _QueryHeader__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryHeader.tsx");
/* harmony import */ var _Space__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Space.tsx");
/* harmony import */ var _QueryTypeField__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/QueryTypeField.tsx");
/* harmony import */ var _usePreparedQuery__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/usePreparedQuery.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
var _Space, _a;


















const QueryEditor = ({
  query: baseQuery,
  datasource,
  onChange,
  onRunQuery: baseOnRunQuery,
  data
}) => {
  const [errorMessage, setError] = (0,_utils_useLastError__WEBPACK_IMPORTED_MODULE_5__["default"])();
  const onRunQuery = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,lodash__WEBPACK_IMPORTED_MODULE_0__.debounce)(baseOnRunQuery, 500), [baseOnRunQuery]);
  const onQueryChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(newQuery => {
    onChange(newQuery);
    onRunQuery();
  }, [onChange, onRunQuery]);
  const query = (0,_usePreparedQuery__WEBPACK_IMPORTED_MODULE_12__["default"])(baseQuery, onQueryChange);
  const subscriptionId = query.subscription || datasource.azureMonitorDatasource.defaultSubscriptionId;
  const variableOptionGroup = {
    label: 'Template Variables',
    options: datasource.getVariables().map(v => ({
      label: v,
      value: v
    }))
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxs)("div", {
    "data-testid": "azure-monitor-query-editor",
    children: [_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.config.featureToggles.azureMonitorExperimentalUI && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_QueryHeader__WEBPACK_IMPORTED_MODULE_9__.QueryHeader, {
      query: query,
      onQueryChange: onQueryChange
    }), !_grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.config.featureToggles.azureMonitorExperimentalUI && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_QueryTypeField__WEBPACK_IMPORTED_MODULE_11__["default"], {
      query: query,
      onQueryChange: onQueryChange
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(EditorForQueryType, {
      data: data,
      subscriptionId: subscriptionId,
      query: query,
      datasource: datasource,
      onChange: onQueryChange,
      variableOptionGroup: variableOptionGroup,
      setError: setError
    }), errorMessage && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.Fragment, {
      children: [_Space || (_Space = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_10__.Space, {
        v: 2
      })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.Alert, {
        severity: "error",
        title: "An error occurred while requesting metadata from Azure Monitor",
        children: errorMessage
      })]
    })]
  });
};

const EditorForQueryType = ({
  data,
  subscriptionId,
  query,
  datasource,
  variableOptionGroup,
  onChange,
  setError
}) => {
  switch (query.queryType) {
    case _types__WEBPACK_IMPORTED_MODULE_4__.AzureQueryType.AzureMonitor:
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_MetricsQueryEditor_MetricsQueryEditor__WEBPACK_IMPORTED_MODULE_8__["default"], {
        data: data,
        query: query,
        datasource: datasource,
        onChange: onChange,
        variableOptionGroup: variableOptionGroup,
        setError: setError
      });

    case _types__WEBPACK_IMPORTED_MODULE_4__.AzureQueryType.LogAnalytics:
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_LogsQueryEditor__WEBPACK_IMPORTED_MODULE_7__["default"], {
        subscriptionId: subscriptionId,
        query: query,
        datasource: datasource,
        onChange: onChange,
        variableOptionGroup: variableOptionGroup,
        setError: setError
      });

    case _types__WEBPACK_IMPORTED_MODULE_4__.AzureQueryType.AzureResourceGraph:
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_ArgQueryEditor__WEBPACK_IMPORTED_MODULE_6__["default"], {
        subscriptionId: subscriptionId,
        query: query,
        datasource: datasource,
        onChange: onChange,
        variableOptionGroup: variableOptionGroup,
        setError: setError
      });

    default:
      const type = query.queryType;
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.Alert, {
        title: "Unknown query type",
        children: (type === 'Application Insights' || type === 'Insights Analytics') && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.Fragment, {
          children: [type, " was deprecated in Grafana 9. See the", ' ', _a || (_a = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)("a", {
            href: "https://grafana.com/docs/grafana/latest/datasources/azuremonitor/deprecated-application-insights/",
            target: "_blank",
            rel: "noreferrer",
            children: "deprecation notice"
          })), ' ', "to get more information about how to migrate your queries. This is the current query definition:", /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_3__.CodeEditor, {
            height: "200px",
            readOnly: true,
            language: "json",
            value: JSON.stringify(query, null, 4)
          })]
        })
      });
  }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (QueryEditor);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/QueryTypeField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");






const QueryTypeField = ({
  query,
  onQueryChange
}) => {
  const queryTypes = [{
    value: _types__WEBPACK_IMPORTED_MODULE_2__.AzureQueryType.AzureMonitor,
    label: 'Metrics'
  }, {
    value: _types__WEBPACK_IMPORTED_MODULE_2__.AzureQueryType.LogAnalytics,
    label: 'Logs'
  }, {
    value: _types__WEBPACK_IMPORTED_MODULE_2__.AzureQueryType.AzureResourceGraph,
    label: 'Azure Resource Graph'
  }];
  const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(change => {
    change.value && onQueryChange(Object.assign({}, query, {
      queryType: change.value
    }));
  }, [onQueryChange, query]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_3__.Field, {
    label: "Service",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
      inputId: "azure-monitor-query-type-field",
      value: query.queryType,
      options: queryTypes,
      onChange: handleChange,
      width: 38
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (QueryTypeField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/index.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _QueryEditor__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _QueryEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/QueryEditor.tsx");


/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/usePreparedQuery.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/fast-deep-equal-npm-3.1.3-790edcfcf5-e21a9d8d84.zip/node_modules/fast-deep-equal/index.js");
/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var _utils_migrateQuery__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateQuery.ts");





const DEFAULT_QUERY = {
  queryType: _types__WEBPACK_IMPORTED_MODULE_3__.AzureQueryType.AzureMonitor
};

const prepareQuery = query => {
  // Note: _.defaults does not apply default values deeply.
  const withDefaults = (0,lodash__WEBPACK_IMPORTED_MODULE_1__.defaults)({}, query, DEFAULT_QUERY);
  const migratedQuery = (0,_utils_migrateQuery__WEBPACK_IMPORTED_MODULE_4__["default"])(withDefaults); // If we didn't make any changes to the object, then return the original object to keep the
  // identity the same, and not trigger any other useEffects or anything.

  return fast_deep_equal__WEBPACK_IMPORTED_MODULE_0___default()(migratedQuery, query) ? query : migratedQuery;
};
/**
 * Returns queries with some defaults + migrations, and calls onChange function to notify if it changes
 */


const usePreparedQuery = (query, onChangeQuery) => {
  const preparedQuery = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => prepareQuery(query), [query]);
  (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
    if (preparedQuery !== query) {
      onChangeQuery(preparedQuery);
    }
  }, [preparedQuery, query, onChangeQuery]);
  return preparedQuery;
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (usePreparedQuery);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryHeader.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "QueryHeader": () => (/* binding */ QueryHeader)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_experimental__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/__virtual__/@grafana-experimental-virtual-45ce772437/0/cache/@grafana-experimental-npm-0.0.2-canary.32-3892e62f7b-71924e6d03.zip/node_modules/@grafana/experimental/index.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");




const QueryHeader = ({
  query,
  onQueryChange
}) => {
  const queryTypes = [{
    value: _types__WEBPACK_IMPORTED_MODULE_2__.AzureQueryType.AzureMonitor,
    label: 'Metrics'
  }, {
    value: _types__WEBPACK_IMPORTED_MODULE_2__.AzureQueryType.LogAnalytics,
    label: 'Logs'
  }, {
    value: _types__WEBPACK_IMPORTED_MODULE_2__.AzureQueryType.AzureResourceGraph,
    label: 'Azure Resource Graph'
  }];
  const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(change => {
    change.value && onQueryChange(Object.assign({}, query, {
      queryType: change.value
    }));
  }, [onQueryChange, query]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("span", {
    "data-testid": "azure-monitor-experimental-header",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.EditorHeader, {
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_experimental__WEBPACK_IMPORTED_MODULE_1__.InlineSelect, {
        label: "Service",
        value: query.queryType,
        placeholder: "Service...",
        allowCustomValue: true,
        options: queryTypes,
        onChange: handleChange
      })
    })
  });
};

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourceField/ResourceField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/__virtual__/@emotion-css-virtual-5255b58730/0/cache/@emotion-css-npm-11.9.0-e415e285ad-bd83d9af5c.zip/node_modules/@emotion/css/dist/emotion-css.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var _ResourcePicker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/index.tsx");
/* harmony import */ var _ResourcePicker_styles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/styles.ts");
/* harmony import */ var _ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
var _Icon, _Icon2, _Icon3, _Icon4;












function parseResourceDetails(resourceURI) {
  const parsed = (0,_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_6__.parseResourceURI)(resourceURI);

  if (!parsed) {
    return undefined;
  }

  return {
    subscriptionName: parsed.subscriptionID,
    resourceGroupName: parsed.resourceGroup,
    resourceName: parsed.resource
  };
}

const ResourceField = ({
  query,
  datasource,
  onQueryChange,
  setResource,
  selectableEntryTypes,
  queryType,
  resourceUri,
  inlineField,
  labelWidth
}) => {
  const styles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useStyles2)(_ResourcePicker_styles__WEBPACK_IMPORTED_MODULE_5__["default"]);
  const [pickerIsOpen, setPickerIsOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const handleOpenPicker = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {
    setPickerIsOpen(true);
  }, []);
  const closePicker = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {
    setPickerIsOpen(false);
  }, []);
  const handleApply = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(resourceURI => {
    onQueryChange(setResource(query, resourceURI));
    closePicker();
  }, [closePicker, onQueryChange, query, setResource]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Modal, {
      className: styles.modal,
      title: "Select a resource",
      isOpen: pickerIsOpen,
      onDismiss: closePicker // The growing number of rows added to the modal causes a focus
      // error in the modal, making it impossible to click on new elements
      ,
      trapFocus: false,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_ResourcePicker__WEBPACK_IMPORTED_MODULE_4__["default"], {
        resourcePickerData: datasource.resourcePickerData,
        resourceURI: resourceUri,
        onApply: handleApply,
        onCancel: closePicker,
        selectableEntryTypes: selectableEntryTypes,
        queryType: queryType
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_3__.Field, {
      label: "Resource",
      inlineField: inlineField,
      labelWidth: labelWidth,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Button, {
        className: styles.resourceFieldButton,
        variant: "secondary",
        onClick: handleOpenPicker,
        type: "button",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(ResourceLabel, {
          resource: resourceUri,
          datasource: datasource
        })
      })
    })]
  });
};

const ResourceLabel = ({
  resource,
  datasource
}) => {
  const [resourceComponents, setResourceComponents] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(parseResourceDetails(resource !== null && resource !== void 0 ? resource : ''));
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (resource && parseResourceDetails(resource)) {
      datasource.resourcePickerData.getResourceURIDisplayProperties(resource).then(setResourceComponents);
    } else {
      setResourceComponents(undefined);
    }
  }, [datasource.resourcePickerData, resource]);

  if (!resource) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {
      children: "Select a resource"
    });
  }

  if (resourceComponents) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(FormattedResource, {
      resource: resourceComponents
    });
  }

  if (resource.startsWith('$')) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)("span", {
      children: [_Icon || (_Icon = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Icon, {
        name: "x"
      })), " ", resource]
    });
  }

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {
    children: resource
  });
};

const FormattedResource = ({
  resource
}) => {
  const styles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useStyles2)(_ResourcePicker_styles__WEBPACK_IMPORTED_MODULE_5__["default"]);

  if (resource.resourceName) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)("span", {
      className: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.cx)(styles.truncated, styles.resourceField),
      children: [_Icon2 || (_Icon2 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Icon, {
        name: "cube"
      })), " ", resource.resourceName]
    });
  }

  if (resource.resourceGroupName) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)("span", {
      children: [_Icon3 || (_Icon3 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Icon, {
        name: "folder"
      })), " ", resource.resourceGroupName]
    });
  }

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)("span", {
    children: [_Icon4 || (_Icon4 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Icon, {
      name: "layer-group"
    })), " ", resource.subscriptionName]
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ResourceField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourceField/index.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _ResourceField__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _ResourceField__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourceField/ResourceField.tsx");


/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/EntryIcon.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EntryIcon": () => (/* binding */ EntryIcon)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/types.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
var _Icon, _Icon2, _Icon3, _Icon4;





const EntryIcon = ({
  isOpen,
  entry: {
    type
  }
}) => {
  switch (type) {
    case _types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.Subscription:
      return _Icon || (_Icon = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, {
        name: "layer-group"
      }));

    case _types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.ResourceGroup:
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, {
        name: isOpen ? 'folder-open' : 'folder'
      });

    case _types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.Resource:
      return _Icon2 || (_Icon2 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, {
        name: "cube"
      }));

    case _types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.VariableGroup:
      return _Icon3 || (_Icon3 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, {
        name: "x"
      }));

    case _types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.Variable:
      return _Icon4 || (_Icon4 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Icon, {
        name: "x"
      }));

    default:
      return null;
  }
};

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedEntry.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NestedEntry": () => (/* binding */ NestedEntry)
/* harmony export */ });
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/__virtual__/@emotion-css-virtual-5255b58730/0/cache/@emotion-css-npm-11.9.0-e415e285ad-bd83d9af5c.zip/node_modules/@emotion/css/dist/emotion-css.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _Space__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Space.tsx");
/* harmony import */ var _EntryIcon__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/EntryIcon.tsx");
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/styles.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
var _Space, _Space2, _Space3, _Space4;










const NestedEntry = ({
  entry,
  isSelected,
  isDisabled,
  isOpen,
  isSelectable,
  level,
  scrollIntoView,
  onToggleCollapse,
  onSelectedChange
}) => {
  const theme = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useTheme2)();
  const styles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useStyles2)(_styles__WEBPACK_IMPORTED_MODULE_5__["default"]);
  const hasChildren = !!entry.children;
  const handleToggleCollapse = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {
    onToggleCollapse(entry);
  }, [onToggleCollapse, entry]);
  const handleSelectedChanged = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(ev => {
    const isSelected = ev.target.checked;
    onSelectedChange(entry, isSelected);
  }, [entry, onSelectedChange]);
  const checkboxId = `${scrollIntoView ? 'table' : 'summary'}_checkbox_${entry.uri}`; // Scroll to the selected element if it's not in the view
  // Only do it once, when the component is mounted

  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (isSelected && scrollIntoView) {
      var _document$getElementB;

      (_document$getElementB = document.getElementById(checkboxId)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.scrollIntoView({
        behavior: 'smooth',
        block: 'center'
      });
    }
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("div", {
    className: styles.nestedEntry,
    style: {
      marginLeft: level * (3 * theme.spacing.gridSize)
    },
    children: [hasChildren ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.IconButton, {
      className: styles.collapseButton,
      name: isOpen ? 'angle-down' : 'angle-right',
      "aria-label": isOpen ? `Collapse ${entry.name}` : `Expand ${entry.name}`,
      onClick: handleToggleCollapse,
      id: entry.id
    }) : _Space || (_Space = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_3__.Space, {
      layout: "inline",
      h: 2
    })), _Space2 || (_Space2 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_3__.Space, {
      layout: "inline",
      h: 2
    })), isSelectable && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Checkbox, {
        id: checkboxId,
        onChange: handleSelectedChanged,
        disabled: isDisabled,
        value: isSelected,
        className: styles.nestedRowCheckbox
      }), _Space3 || (_Space3 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_3__.Space, {
        layout: "inline",
        h: 2
      }))]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_EntryIcon__WEBPACK_IMPORTED_MODULE_4__.EntryIcon, {
      entry: entry,
      isOpen: isOpen
    }), _Space4 || (_Space4 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_3__.Space, {
      layout: "inline",
      h: 1
    })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("label", {
      htmlFor: checkboxId,
      className: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.cx)(styles.entryContentItem, styles.truncated),
      children: entry.name
    })]
  });
};

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedRow.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/__virtual__/@emotion-css-virtual-5255b58730/0/cache/@emotion-css-npm-11.9.0-e415e285ad-bd83d9af5c.zip/node_modules/@emotion/css/dist/emotion-css.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _NestedEntry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedEntry.tsx");
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/styles.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");










const NestedRow = ({
  row,
  selectedRows,
  level,
  requestNestedRows,
  onRowSelectedChange,
  selectableEntryTypes,
  scrollIntoView
}) => {
  var _row$location;

  const styles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useStyles2)(_styles__WEBPACK_IMPORTED_MODULE_4__["default"]);
  const [rowStatus, setRowStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('closed');
  const isSelected = !!selectedRows.find(v => v.uri === row.uri);
  const isDisabled = selectedRows.length > 0 && !isSelected;
  const isOpen = rowStatus === 'open';

  const onRowToggleCollapse = async () => {
    if (rowStatus === 'open') {
      setRowStatus('closed');
      return;
    }

    setRowStatus('loading');
    requestNestedRows(row).then(() => setRowStatus('open')).catch(() => setRowStatus('closed'));
  }; // opens the resource group on load of component if there was a previously saved selection


  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    var _row$children;

    // Assuming we don't have multi-select yet
    const selectedRow = selectedRows[0];
    const containsChild = selectedRow && !!(0,_utils__WEBPACK_IMPORTED_MODULE_5__.findRow)((_row$children = row.children) !== null && _row$children !== void 0 ? _row$children : [], selectedRow.uri);

    if (containsChild) {
      setRowStatus('open');
    }
  }, [selectedRows, row]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)("tr", {
      className: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.cx)(styles.row, isDisabled && styles.disabledRow),
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("td", {
        className: styles.cell,
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_NestedEntry__WEBPACK_IMPORTED_MODULE_3__.NestedEntry, {
          level: level,
          isSelected: isSelected,
          isDisabled: isDisabled,
          isOpen: isOpen,
          entry: row,
          onToggleCollapse: onRowToggleCollapse,
          onSelectedChange: onRowSelectedChange,
          isSelectable: selectableEntryTypes.some(type => type === row.type),
          scrollIntoView: scrollIntoView
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("td", {
        className: styles.cell,
        children: row.typeLabel
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("td", {
        className: styles.cell,
        children: (_row$location = row.location) !== null && _row$location !== void 0 ? _row$location : '-'
      })]
    }, row.id), isOpen && row.children && Object.keys(row.children).length > 0 && row.children.map(childRow => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(NestedRow, {
      row: childRow,
      selectedRows: selectedRows,
      level: level + 1,
      requestNestedRows: requestNestedRows,
      onRowSelectedChange: onRowSelectedChange,
      selectableEntryTypes: selectableEntryTypes,
      scrollIntoView: scrollIntoView
    }, childRow.uri)), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.FadeTransition, {
      visible: rowStatus === 'loading',
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("tr", {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)("td", {
          className: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.cx)(styles.cell, styles.loadingCell),
          colSpan: 3,
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.LoadingPlaceholder, {
            text: "Loading...",
            className: styles.spinner
          })
        })
      })
    })]
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NestedRow);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/ResourcePicker.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/__virtual__/@emotion-css-virtual-5255b58730/0/cache/@emotion-css-npm-11.9.0-e415e285ad-bd83d9af5c.zip/node_modules/@emotion/css/dist/emotion-css.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var react_use__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./.yarn/__virtual__/react-use-virtual-cea8e826dc/0/cache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useEffectOnce.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _utils_messageFromError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/messageFromError.ts");
/* harmony import */ var _Space__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Space.tsx");
/* harmony import */ var _NestedRow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedRow.tsx");
/* harmony import */ var _Search__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/Search.tsx");
/* harmony import */ var _styles__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/styles.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
var _Space, _LoadingPlaceholder, _h, _Space2, _h2, _Space3, _Space4, _Space5, _Space6;















const ResourcePicker = ({
  resourcePickerData,
  resourceURI,
  onApply,
  onCancel,
  selectableEntryTypes,
  queryType
}) => {
  const styles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useStyles2)(_styles__WEBPACK_IMPORTED_MODULE_7__["default"]);
  const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const [rows, setRows] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);
  const [selectedRows, setSelectedRows] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);
  const [internalSelectedURI, setInternalSelectedURI] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(resourceURI);
  const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);
  const [isAdvancedOpen, setIsAdvancedOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(resourceURI === null || resourceURI === void 0 ? void 0 : resourceURI.includes('$'));
  const [shouldShowLimitFlag, setShouldShowLimitFlag] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false); // Sync the resourceURI prop to internal state

  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    setInternalSelectedURI(resourceURI);
  }, [resourceURI]);
  const loadInitialData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async () => {
    if (!isLoading) {
      try {
        setIsLoading(true);
        const resources = await resourcePickerData.fetchInitialRows(queryType, internalSelectedURI || '');
        setRows(resources);
      } catch (error) {
        setErrorMessage((0,_utils_messageFromError__WEBPACK_IMPORTED_MODULE_3__["default"])(error));
      }

      setIsLoading(false);
    }
  }, [internalSelectedURI, isLoading, resourcePickerData, queryType]);
  (0,react_use__WEBPACK_IMPORTED_MODULE_10__["default"])(() => {
    loadInitialData();
  }); // set selected row data whenever row or selection changes

  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (!internalSelectedURI) {
      setSelectedRows([]);
    }

    const found = internalSelectedURI && (0,_utils__WEBPACK_IMPORTED_MODULE_8__.findRow)(rows, internalSelectedURI);

    if (found) {
      return setSelectedRows([Object.assign({}, found, {
        children: undefined
      })]);
    }
  }, [internalSelectedURI, rows]); // Request resources for an expanded resource group

  const requestNestedRows = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async parentRow => {
    var _parentRow$children;

    // clear error message (also when loading cached resources)
    setErrorMessage(undefined); // If we already have children, we don't need to re-fetch them.

    if ((_parentRow$children = parentRow.children) !== null && _parentRow$children !== void 0 && _parentRow$children.length) {
      return;
    }

    try {
      const nestedRows = await resourcePickerData.fetchAndAppendNestedRow(rows, parentRow, queryType);
      setRows(nestedRows);
    } catch (error) {
      setErrorMessage((0,_utils_messageFromError__WEBPACK_IMPORTED_MODULE_3__["default"])(error));
      throw error;
    }
  }, [resourcePickerData, rows, queryType]);
  const handleSelectionChanged = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((row, isSelected) => {
    isSelected ? setInternalSelectedURI(row.uri) : setInternalSelectedURI(undefined);
  }, []);
  const handleApply = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {
    onApply(internalSelectedURI);
  }, [internalSelectedURI, onApply]);
  const handleSearch = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async searchWord => {
    // clear errors and warnings
    setErrorMessage(undefined);
    setShouldShowLimitFlag(false);

    if (!searchWord) {
      loadInitialData();
      return;
    }

    try {
      setIsLoading(true);
      const searchResults = await resourcePickerData.search(searchWord, queryType);
      setRows(searchResults);

      if (searchResults.length >= resourcePickerData.resultLimit) {
        setShouldShowLimitFlag(true);
      }
    } catch (err) {
      setErrorMessage((0,_utils_messageFromError__WEBPACK_IMPORTED_MODULE_3__["default"])(err));
    }

    setIsLoading(false);
  }, [loadInitialData, resourcePickerData, queryType]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_Search__WEBPACK_IMPORTED_MODULE_6__["default"], {
      searchFn: handleSearch
    }), shouldShowLimitFlag ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("p", {
      className: styles.resultLimit,
      children: ["Showing first ", resourcePickerData.resultLimit, " results"]
    }) : _Space || (_Space = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_4__.Space, {
      v: 2
    })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("table", {
      className: styles.table,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("thead", {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("tr", {
          className: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.cx)(styles.row, styles.header),
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("td", {
            className: styles.cell,
            children: "Scope"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("td", {
            className: styles.cell,
            children: "Type"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("td", {
            className: styles.cell,
            children: "Location"
          })]
        })
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
      className: styles.tableScroller,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("table", {
        className: styles.table,
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("tbody", {
          children: [isLoading && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("tr", {
            className: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.cx)(styles.row),
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("td", {
              className: styles.cell,
              children: _LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.LoadingPlaceholder, {
                text: 'Loading...'
              }))
            })
          }), !isLoading && rows.length === 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("tr", {
            className: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.cx)(styles.row),
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("td", {
              className: styles.cell,
              "aria-live": "polite",
              children: "No resources found"
            })
          }), !isLoading && rows.map(row => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_NestedRow__WEBPACK_IMPORTED_MODULE_5__["default"], {
            row: row,
            selectedRows: selectedRows,
            level: 0,
            requestNestedRows: requestNestedRows,
            onRowSelectedChange: handleSelectionChanged,
            selectableEntryTypes: selectableEntryTypes,
            scrollIntoView: true
          }, row.uri))]
        })
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("div", {
      className: styles.selectionFooter,
      children: [selectedRows.length > 0 && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.Fragment, {
        children: [_h || (_h = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("h5", {
          children: "Selection"
        })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("div", {
          className: styles.tableScroller,
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("table", {
            className: styles.table,
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)("tbody", {
              children: selectedRows.map(row => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_NestedRow__WEBPACK_IMPORTED_MODULE_5__["default"], {
                row: row,
                selectedRows: selectedRows,
                level: 0,
                requestNestedRows: requestNestedRows,
                onRowSelectedChange: handleSelectionChanged,
                selectableEntryTypes: selectableEntryTypes
              }, row.uri))
            })
          })
        }), _Space2 || (_Space2 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_4__.Space, {
          v: 2
        }))]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Collapse, {
        collapsible: true,
        label: "Advanced",
        isOpen: isAdvancedOpen,
        onToggle: () => setIsAdvancedOpen(!isAdvancedOpen),
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Label, {
          htmlFor: `input-${internalSelectedURI}`,
          children: _h2 || (_h2 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("h6", {
            children: ["Resource URI", ' ', /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Tooltip, {
              content: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.Fragment, {
                children: ["Manually edit the", ' ', /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)("a", {
                  href: "https://docs.microsoft.com/en-us/azure/azure-monitor/logs/log-standard-columns#_resourceid",
                  rel: "noopener noreferrer",
                  target: "_blank",
                  children: ["resource uri.", ' ']
                }), "Supports the use of multiple template variables (ex: /subscriptions/$subId/resourceGroups/$rg)"]
              }),
              placement: "right",
              interactive: true,
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Icon, {
                name: "info-circle"
              })
            })]
          }))
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {
          id: `input-${internalSelectedURI}`,
          value: internalSelectedURI,
          onChange: event => setInternalSelectedURI(event.currentTarget.value),
          placeholder: "ex: /subscriptions/$subId"
        }), _Space3 || (_Space3 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_4__.Space, {
          v: 2
        }))]
      }), _Space4 || (_Space4 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_4__.Space, {
        v: 2
      })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Button, {
        disabled: !!errorMessage,
        onClick: handleApply,
        children: "Apply"
      }), _Space5 || (_Space5 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_4__.Space, {
        layout: "inline",
        h: 1
      })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Button, {
        onClick: onCancel,
        variant: "secondary",
        children: "Cancel"
      })]
    }), errorMessage && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.Fragment, {
      children: [_Space6 || (_Space6 = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_4__.Space, {
        v: 2
      })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_9__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Alert, {
        severity: "error",
        title: "An error occurred while requesting resources from Azure Monitor",
        children: errorMessage
      })]
    })]
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ResourcePicker);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/Search.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
var _Icon;






const Search = ({
  searchFn
}) => {
  const [searchFilter, setSearchFilter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');
  const debouncedSearch = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,lodash__WEBPACK_IMPORTED_MODULE_0__.debounce)(searchFn, 600), [searchFn]);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    return () => {
      // Stop the invocation of the debounced function after unmounting
      debouncedSearch.cancel();
    };
  }, [debouncedSearch]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Input, {
    "aria-label": "resource search",
    prefix: _Icon || (_Icon = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.Icon, {
      name: "search"
    })),
    value: searchFilter,
    onChange: event => {
      const searchPhrase = event.currentTarget.value;
      setSearchFilter(searchPhrase);
      debouncedSearch(searchPhrase);
    },
    placeholder: "search for a resource"
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Search);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/index.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _ResourcePicker__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _ResourcePicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/ResourcePicker.tsx");


/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/styles.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/__virtual__/@emotion-css-virtual-5255b58730/0/cache/@emotion-css-npm-11.9.0-e415e285ad-bd83d9af5c.zip/node_modules/@emotion/css/dist/emotion-css.esm.js");


const getStyles = theme => ({
  table: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    width: '100%',
    tableLayout: 'fixed'
  }),
  tableScroller: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    maxHeight: '50vh',
    overflow: 'auto'
  }),
  header: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    background: theme.colors.background.secondary
  }),
  row: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    borderBottom: `1px solid ${theme.colors.border.weak}`,
    '&:last-of-type': {
      borderBottomColor: theme.colors.border.medium
    }
  }),
  disabledRow: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    opacity: 0.5
  }),
  cell: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    padding: theme.spacing(1, 1, 1, 0),
    width: '25%',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    '&:first-of-type': {
      width: '50%',
      padding: theme.spacing(1, 1, 1, 2)
    }
  }),
  collapseButton: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    margin: 0
  }),
  loadingCell: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    textAlign: 'center'
  }),
  spinner: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    marginBottom: 0
  }),
  nestedEntry: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    display: 'flex',
    alignItems: 'center'
  }),
  entryContentItem: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    margin: theme.spacing(0, 1, 0, 0)
  }),
  truncated: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    minWidth: 0,
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  }),
  resourceField: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    maxWidth: theme.spacing(36),
    overflow: 'hidden'
  }),
  resourceFieldButton: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    padding: '7px',
    textAlign: 'left'
  }),
  nestedRowCheckbox: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    zIndex: 0
  }),
  selectionFooter: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    position: 'sticky',
    bottom: 0,
    background: theme.colors.background.primary,
    paddingTop: theme.spacing(2)
  }),
  loadingWrapper: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    textAlign: 'center',
    paddingTop: theme.spacing(2),
    paddingBottom: theme.spacing(2),
    color: theme.colors.text.secondary
  }),
  resultLimit: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    margin: '4px 0',
    fontStyle: 'italic'
  }),
  modal: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)({
    width: theme.breakpoints.values.lg
  })
});

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getStyles);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/types.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResourceRowType": () => (/* binding */ ResourceRowType)
/* harmony export */ });
let ResourceRowType;

(function (ResourceRowType) {
  ResourceRowType["Subscription"] = "Subscription";
  ResourceRowType["ResourceGroup"] = "ResourceGroup";
  ResourceRowType["Resource"] = "Resource";
  ResourceRowType["VariableGroup"] = "TemplateVariableGroup";
  ResourceRowType["Variable"] = "TemplateVariable";
})(ResourceRowType || (ResourceRowType = {}));

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addResources": () => (/* binding */ addResources),
/* harmony export */   "findRow": () => (/* binding */ findRow),
/* harmony export */   "isGUIDish": () => (/* binding */ isGUIDish),
/* harmony export */   "parseResourceURI": () => (/* binding */ parseResourceURI)
/* harmony export */ });
/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/immer-npm-9.0.14-0baed19a8d-17f1365c06.zip/node_modules/immer/dist/immer.esm.mjs");

// This regex matches URIs representing:
//  - subscriptions: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572
//  - resource groups: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources
//  - resources: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources/providers/Microsoft.Compute/virtualMachines/GithubTestDataVM
const RESOURCE_URI_REGEX = /\/subscriptions\/(?<subscriptionID>[^/]+)(?:\/resourceGroups\/(?<resourceGroup>[^/]+)(?:\/providers.+\/(?<resource>[^/]+))?)?/;
function parseResourceURI(resourceURI) {
  var _matches$groups;

  const matches = RESOURCE_URI_REGEX.exec(resourceURI);
  const groups = (_matches$groups = matches === null || matches === void 0 ? void 0 : matches.groups) !== null && _matches$groups !== void 0 ? _matches$groups : {};
  const {
    subscriptionID,
    resourceGroup,
    resource
  } = groups;

  if (!subscriptionID) {
    return undefined;
  }

  return {
    subscriptionID,
    resourceGroup,
    resource
  };
}
function isGUIDish(input) {
  return !!input.match(/^[A-Z0-9]+/i);
}
function findRow(rows, uri) {
  for (const row of rows) {
    if (row.uri.toLowerCase() === uri.toLowerCase()) {
      return row;
    }

    if (row.children) {
      const result = findRow(row.children, uri);

      if (result) {
        return result;
      }
    }
  }

  return undefined;
}
function addResources(rows, targetParentId, newResources) {
  return (0,immer__WEBPACK_IMPORTED_MODULE_0__["default"])(rows, draftState => {
    const draftRow = findRow(draftState, targetParentId); // we can't find the selected resource in our list of resources,
    // probably means user has either mistyped in the input field
    // or is using template variables.
    // either way no need to throw, just show that none of the resources are checked

    if (!draftRow) {
      return;
    }

    draftRow.children = newResources;
  });
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Space.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Space": () => (/* binding */ Space)
/* harmony export */ });
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/__virtual__/@emotion-css-virtual-5255b58730/0/cache/@emotion-css-npm-11.9.0-e415e285ad-bd83d9af5c.zip/node_modules/@emotion/css/dist/emotion-css.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");




const Space = props => {
  const theme = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.useTheme2)();
  const styles = getStyles(theme, props);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)("span", {
    className: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.cx)(styles.wrapper)
  });
};
Space.defaultProps = {
  v: 0,
  h: 0,
  layout: 'block'
};
const getStyles = (0,_grafana_ui__WEBPACK_IMPORTED_MODULE_2__.stylesFactory)((theme, props) => {
  var _props$h, _props$v;

  return {
    wrapper: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_0__.css)([{
      paddingRight: theme.spacing((_props$h = props.h) !== null && _props$h !== void 0 ? _props$h : 0),
      paddingBottom: theme.spacing((_props$v = props.v) !== null && _props$v !== void 0 ? _props$v : 0)
    }, props.layout === 'inline' && {
      display: 'inline-block'
    }, props.layout === 'block' && {
      display: 'block'
    }])
  };
});

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/SubscriptionField.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/common.ts");
/* harmony import */ var _Field__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Field.tsx");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");







const SubscriptionField = ({
  query,
  subscriptions,
  variableOptionGroup,
  onQueryChange,
  multiSelect = false
}) => {
  const handleChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(change => {
    if (!change.value) {
      return;
    }

    let newQuery = Object.assign({}, query, {
      subscription: change.value
    });

    if (query.queryType === _types__WEBPACK_IMPORTED_MODULE_2__.AzureQueryType.AzureMonitor) {
      newQuery.azureMonitor = Object.assign({}, newQuery.azureMonitor, {
        resourceGroup: undefined,
        metricDefinition: undefined,
        metricNamespace: undefined,
        resourceName: undefined,
        metricName: undefined,
        aggregation: undefined,
        timeGrain: '',
        dimensionFilters: []
      });
    }

    onQueryChange(newQuery);
  }, [query, onQueryChange]);
  const onSubscriptionsChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(change => {
    if (!change) {
      return;
    }

    query.subscriptions = change.map(c => {
      var _c$value;

      return (_c$value = c.value) !== null && _c$value !== void 0 ? _c$value : '';
    });
    onQueryChange(query);
  }, [query, onQueryChange]);
  const options = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => [...subscriptions, variableOptionGroup], [subscriptions, variableOptionGroup]);
  return multiSelect ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_4__.Field, {
    label: "Subscriptions",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.MultiSelect, {
      isClearable: true,
      value: (0,_utils_common__WEBPACK_IMPORTED_MODULE_3__.findOptions)([...subscriptions, ...variableOptionGroup.options], query.subscriptions),
      inputId: "azure-monitor-subscriptions-field",
      onChange: onSubscriptionsChange,
      options: options,
      width: 38
    })
  }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_Field__WEBPACK_IMPORTED_MODULE_4__.Field, {
    label: "Subscription",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
      value: query.subscription,
      inputId: "azure-monitor-subscriptions-field",
      onChange: handleChange,
      options: options,
      width: 38,
      allowCustomValue: true
    })
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SubscriptionField);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/VariableEditor/VariableEditor.tsx":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-ui/src/index.ts");
/* harmony import */ var _grafanaTemplateVariableFns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/grafanaTemplateVariableFns.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var _utils_useLastError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/useLastError.ts");
/* harmony import */ var _LogsQueryEditor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/index.tsx");
/* harmony import */ var _Space__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/Space.tsx");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/jsx-runtime.js");
var _Space;











const AZURE_QUERY_VARIABLE_TYPE_OPTIONS = [{
  label: 'Grafana Query Function',
  value: _types__WEBPACK_IMPORTED_MODULE_3__.AzureQueryType.GrafanaTemplateVariableFn
}, {
  label: 'Logs',
  value: _types__WEBPACK_IMPORTED_MODULE_3__.AzureQueryType.LogAnalytics
}];

const GrafanaTemplateVariableFnInput = ({
  query,
  updateQuery,
  datasource
}) => {
  var _query$grafanaTemplat2;

  const [inputVal, setInputVal] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('');
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    var _query$grafanaTemplat;

    setInputVal(((_query$grafanaTemplat = query.grafanaTemplateVariableFn) === null || _query$grafanaTemplat === void 0 ? void 0 : _query$grafanaTemplat.rawQuery) || '');
  }, [(_query$grafanaTemplat2 = query.grafanaTemplateVariableFn) === null || _query$grafanaTemplat2 === void 0 ? void 0 : _query$grafanaTemplat2.rawQuery]);
  const onRunQuery = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(newQuery => {
    (0,_grafanaTemplateVariableFns__WEBPACK_IMPORTED_MODULE_2__.migrateStringQueriesToObjectQueries)(newQuery, {
      datasource
    }).then(updatedQuery => {
      if (updatedQuery.queryType === _types__WEBPACK_IMPORTED_MODULE_3__.AzureQueryType.GrafanaTemplateVariableFn) {
        updateQuery(updatedQuery);
      } else {
        updateQuery(Object.assign({}, query, {
          grafanaTemplateVariableFn: {
            kind: 'UnknownQuery',
            rawQuery: newQuery
          }
        }));
      }
    });
  }, [datasource, query, updateQuery]);

  const onChange = event => {
    setInputVal(event.target.value);
  };

  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineField, {
    label: "Grafana template variable function",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Input, {
      placeholder: 'type a grafana template variable function, ex: Subscriptions()',
      value: inputVal,
      onChange: onChange,
      onBlur: () => onRunQuery(inputVal)
    })
  });
};

const VariableEditor = props => {
  const defaultQuery = {
    refId: 'A',
    queryType: _types__WEBPACK_IMPORTED_MODULE_3__.AzureQueryType.GrafanaTemplateVariableFn
  };
  const [query, setQuery] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultQuery);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    (0,_grafanaTemplateVariableFns__WEBPACK_IMPORTED_MODULE_2__.migrateStringQueriesToObjectQueries)(props.query, {
      datasource: props.datasource
    }).then(migratedQuery => {
      setQuery(migratedQuery);
    });
  }, [props.query, props.datasource]);

  const onQueryTypeChange = selectableValue => {
    if (selectableValue.value) {
      setQuery(Object.assign({}, query, {
        queryType: selectableValue.value
      }));
    }
  };

  const onLogsQueryChange = queryChange => {
    var _queryChange$azureLog;

    setQuery(queryChange); // only hit backend if there's something to query (prevents error when selecting the resource before pinging a query)

    if ((_queryChange$azureLog = queryChange.azureLogAnalytics) !== null && _queryChange$azureLog !== void 0 && _queryChange$azureLog.query) {
      props.onChange(queryChange);
    }
  };

  const [errorMessage, setError] = (0,_utils_useLastError__WEBPACK_IMPORTED_MODULE_4__["default"])();
  const variableOptionGroup = {
    label: 'Template Variables',
    // TODO: figure out a way to filter out the current variable from the variables list
    // options: props.datasource.getVariables().map((v) => ({ label: v, value: v })),
    options: []
  };
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.InlineField, {
      label: "Select query type",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Select, {
        "aria-label": "select query type",
        onChange: onQueryTypeChange,
        options: AZURE_QUERY_VARIABLE_TYPE_OPTIONS,
        width: 25,
        value: query.queryType
      })
    }), query.queryType === _types__WEBPACK_IMPORTED_MODULE_3__.AzureQueryType.LogAnalytics && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_LogsQueryEditor__WEBPACK_IMPORTED_MODULE_5__["default"], {
        subscriptionId: query.subscription,
        query: query,
        datasource: props.datasource,
        onChange: onLogsQueryChange,
        variableOptionGroup: variableOptionGroup,
        setError: setError,
        hideFormatAs: true
      }), errorMessage && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.Fragment, {
        children: [_Space || (_Space = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_Space__WEBPACK_IMPORTED_MODULE_6__.Space, {
          v: 2
        })), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__.Alert, {
          severity: "error",
          title: "An error occurred while requesting metadata from Azure Monitor",
          children: errorMessage
        })]
      })]
    }), query.queryType === _types__WEBPACK_IMPORTED_MODULE_3__.AzureQueryType.GrafanaTemplateVariableFn && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__.jsx)(GrafanaTemplateVariableFnInput, {
      query: query,
      updateQuery: props.onChange,
      datasource: props.datasource
    })]
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VariableEditor);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/credentials.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAuthType": () => (/* binding */ getAuthType),
/* harmony export */   "getAzureCloud": () => (/* binding */ getAzureCloud),
/* harmony export */   "getAzurePortalUrl": () => (/* binding */ getAzurePortalUrl),
/* harmony export */   "getCredentials": () => (/* binding */ getCredentials),
/* harmony export */   "isCredentialsComplete": () => (/* binding */ isCredentialsComplete),
/* harmony export */   "updateCredentials": () => (/* binding */ updateCredentials)
/* harmony export */ });
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");


const concealed = Symbol('Concealed client secret');
function getAuthType(options) {
  if (!options.jsonData.azureAuthType) {
    // If authentication type isn't explicitly specified and datasource has client credentials,
    // then this is existing datasource which is configured for app registration (client secret)
    if (options.jsonData.tenantId && options.jsonData.clientId) {
      return 'clientsecret';
    } // For newly created datasource with no configuration, managed identity is the default authentication type
    // if they are enabled in Grafana config


    return _grafana_runtime__WEBPACK_IMPORTED_MODULE_0__.config.azure.managedIdentityEnabled ? 'msi' : 'clientsecret';
  }

  return options.jsonData.azureAuthType;
}

function getDefaultAzureCloud() {
  switch (_grafana_runtime__WEBPACK_IMPORTED_MODULE_0__.config.azure.cloud) {
    case _types__WEBPACK_IMPORTED_MODULE_1__.AzureCloud.Public:
    case _types__WEBPACK_IMPORTED_MODULE_1__.AzureCloud.None:
    case undefined:
      return 'azuremonitor';

    case _types__WEBPACK_IMPORTED_MODULE_1__.AzureCloud.China:
      return 'chinaazuremonitor';

    case _types__WEBPACK_IMPORTED_MODULE_1__.AzureCloud.USGovernment:
      return 'govazuremonitor';

    case _types__WEBPACK_IMPORTED_MODULE_1__.AzureCloud.Germany:
      return 'germanyazuremonitor';

    default:
      throw new Error(`The cloud '${_grafana_runtime__WEBPACK_IMPORTED_MODULE_0__.config.azure.cloud}' not supported.`);
  }
}

function getAzurePortalUrl(azureCloud) {
  switch (azureCloud) {
    case 'azuremonitor':
      return 'https://portal.azure.com';

    case 'chinaazuremonitor':
      return 'https://portal.azure.cn';

    case 'govazuremonitor':
      return 'https://portal.azure.us';

    case 'germanyazuremonitor':
      return 'https://portal.microsoftazure.de';

    default:
      throw new Error('The cloud not supported.');
  }
}
function getAzureCloud(options) {
  const authType = getAuthType(options);

  switch (authType) {
    case 'msi':
      // In case of managed identity, the cloud is always same as where Grafana is hosted
      return getDefaultAzureCloud();

    case 'clientsecret':
      return options.jsonData.cloudName || getDefaultAzureCloud();
  }
}

function getSecret(options) {
  if (options.secureJsonFields.clientSecret) {
    // The secret is concealed on server
    return concealed;
  } else {
    var _options$secureJsonDa;

    const secret = (_options$secureJsonDa = options.secureJsonData) === null || _options$secureJsonDa === void 0 ? void 0 : _options$secureJsonDa.clientSecret;
    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;
  }
}

function isCredentialsComplete(credentials) {
  switch (credentials.authType) {
    case 'msi':
      return true;

    case 'clientsecret':
      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);
  }
}
function getCredentials(options) {
  const authType = getAuthType(options);

  switch (authType) {
    case 'msi':
      if (_grafana_runtime__WEBPACK_IMPORTED_MODULE_0__.config.azure.managedIdentityEnabled) {
        return {
          authType: 'msi',
          defaultSubscriptionId: options.jsonData.subscriptionId
        };
      } else {
        // If authentication type is managed identity but managed identities were disabled in Grafana config,
        // then we should fallback to an empty app registration (client secret) configuration
        return {
          authType: 'clientsecret',
          azureCloud: getDefaultAzureCloud()
        };
      }

    case 'clientsecret':
      return {
        authType: 'clientsecret',
        azureCloud: options.jsonData.cloudName || getDefaultAzureCloud(),
        tenantId: options.jsonData.tenantId,
        clientId: options.jsonData.clientId,
        clientSecret: getSecret(options),
        defaultSubscriptionId: options.jsonData.subscriptionId
      };
  }
}
function updateCredentials(options, credentials) {
  switch (credentials.authType) {
    case 'msi':
      if (!_grafana_runtime__WEBPACK_IMPORTED_MODULE_0__.config.azure.managedIdentityEnabled) {
        throw new Error('Managed Identity authentication is not enabled in Grafana config.');
      }

      options = Object.assign({}, options, {
        jsonData: Object.assign({}, options.jsonData, {
          azureAuthType: 'msi',
          subscriptionId: credentials.defaultSubscriptionId
        })
      });
      return options;

    case 'clientsecret':
      options = Object.assign({}, options, {
        jsonData: Object.assign({}, options.jsonData, {
          azureAuthType: 'clientsecret',
          cloudName: credentials.azureCloud || getDefaultAzureCloud(),
          tenantId: credentials.tenantId,
          clientId: credentials.clientId,
          subscriptionId: credentials.defaultSubscriptionId
        }),
        secureJsonData: Object.assign({}, options.secureJsonData, {
          clientSecret: typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0 ? credentials.clientSecret : undefined
        }),
        secureJsonFields: Object.assign({}, options.secureJsonFields, {
          clientSecret: typeof credentials.clientSecret === 'symbol'
        })
      });
      return options;
  }
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Datasource)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("./.yarn/cache/rxjs-npm-7.5.5-d0546b1ccb-e034f60805.zip/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("./.yarn/cache/rxjs-npm-7.5.5-d0546b1ccb-e034f60805.zip/node_modules/rxjs/dist/esm5/internal/observable/of.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("./.yarn/cache/rxjs-npm-7.5.5-d0546b1ccb-e034f60805.zip/node_modules/rxjs/dist/esm5/internal/operators/map.js");
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-data/src/index.ts");
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var app_features_templating_template_srv__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/features/templating/template_srv.ts");
/* harmony import */ var _azure_log_analytics_azure_log_analytics_datasource__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts");
/* harmony import */ var _azure_monitor_azure_monitor_datasource__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts");
/* harmony import */ var _azure_resource_graph_azure_resource_graph_datasource__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_resource_graph/azure_resource_graph_datasource.ts");
/* harmony import */ var _resourcePicker_resourcePickerData__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/resourcePicker/resourcePickerData.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var _utils_migrateAnnotation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateAnnotation.ts");
/* harmony import */ var _utils_migrateQuery__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateQuery.ts");
/* harmony import */ var _variables__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/variables.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }















class Datasource extends _grafana_runtime__WEBPACK_IMPORTED_MODULE_2__.DataSourceWithBackend {
  constructor(instanceSettings, templateSrv = (0,app_features_templating_template_srv__WEBPACK_IMPORTED_MODULE_3__.getTemplateSrv)()) {
    super(instanceSettings);

    _defineProperty(this, "annotations", {
      prepareAnnotation: _utils_migrateAnnotation__WEBPACK_IMPORTED_MODULE_9__["default"]
    });

    _defineProperty(this, "azureMonitorDatasource", void 0);

    _defineProperty(this, "azureLogAnalyticsDatasource", void 0);

    _defineProperty(this, "resourcePickerData", void 0);

    _defineProperty(this, "azureResourceGraphDatasource", void 0);

    _defineProperty(this, "pseudoDatasource", {});

    this.templateSrv = templateSrv;
    this.azureMonitorDatasource = new _azure_monitor_azure_monitor_datasource__WEBPACK_IMPORTED_MODULE_5__["default"](instanceSettings);
    this.azureLogAnalyticsDatasource = new _azure_log_analytics_azure_log_analytics_datasource__WEBPACK_IMPORTED_MODULE_4__["default"](instanceSettings);
    this.azureResourceGraphDatasource = new _azure_resource_graph_azure_resource_graph_datasource__WEBPACK_IMPORTED_MODULE_6__["default"](instanceSettings);
    this.resourcePickerData = new _resourcePicker_resourcePickerData__WEBPACK_IMPORTED_MODULE_7__["default"](instanceSettings);
    this.pseudoDatasource = {
      [_types__WEBPACK_IMPORTED_MODULE_8__.AzureQueryType.AzureMonitor]: this.azureMonitorDatasource,
      [_types__WEBPACK_IMPORTED_MODULE_8__.AzureQueryType.LogAnalytics]: this.azureLogAnalyticsDatasource,
      [_types__WEBPACK_IMPORTED_MODULE_8__.AzureQueryType.AzureResourceGraph]: this.azureResourceGraphDatasource
    };
    this.variables = new _variables__WEBPACK_IMPORTED_MODULE_11__.VariableSupport(this);
  }

  filterQuery(item) {
    var _ds$filterQuery, _ds$filterQuery2;

    if (!item.queryType) {
      return true;
    }

    const ds = this.pseudoDatasource[item.queryType];
    return (_ds$filterQuery = ds === null || ds === void 0 ? void 0 : (_ds$filterQuery2 = ds.filterQuery) === null || _ds$filterQuery2 === void 0 ? void 0 : _ds$filterQuery2.call(ds, item)) !== null && _ds$filterQuery !== void 0 ? _ds$filterQuery : true;
  }

  query(options) {
    const byType = new Map();

    for (const baseTarget of options.targets) {
      // Migrate old query structures
      const target = (0,_utils_migrateQuery__WEBPACK_IMPORTED_MODULE_10__.datasourceMigrations)(baseTarget); // Skip hidden or invalid queries or ones without properties

      if (!target.queryType || target.hide || !hasQueryForType(target)) {
        continue;
      } // Initialize the list of queries


      if (!byType.has(target.queryType)) {
        const queryForType = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.cloneDeep)(options);
        queryForType.requestId = `${queryForType.requestId}-${target.refId}`;
        queryForType.targets = [];
        byType.set(target.queryType, queryForType);
      }

      const queryForType = byType.get(target.queryType);
      queryForType === null || queryForType === void 0 ? void 0 : queryForType.targets.push(target);
    }

    const observables = Array.from(byType.entries()).map(([queryType, req]) => {
      const ds = this.pseudoDatasource[queryType];

      if (!ds) {
        throw new Error('Data source not created for query type ' + queryType);
      }

      return ds.query(req);
    }); // Single query can skip merge

    if (observables.length === 1) {
      return observables[0];
    }

    if (observables.length > 1) {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.forkJoin)(observables).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.map)(results => {
        const data = [];

        for (const result of results) {
          for (const frame of result.data) {
            data.push(frame);
          }
        }

        return {
          state: _grafana_data__WEBPACK_IMPORTED_MODULE_1__.LoadingState.Done,
          data
        };
      }));
    }

    return (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.of)({
      state: _grafana_data__WEBPACK_IMPORTED_MODULE_1__.LoadingState.Done,
      data: []
    });
  }

  targetContainsTemplate(query) {
    if (query.subscription && this.templateSrv.containsTemplate(query.subscription)) {
      return true;
    }

    let subQuery;

    if (query.queryType === _types__WEBPACK_IMPORTED_MODULE_8__.AzureQueryType.AzureMonitor) {
      subQuery = JSON.stringify(query.azureMonitor);
    } else if (query.queryType === _types__WEBPACK_IMPORTED_MODULE_8__.AzureQueryType.LogAnalytics) {
      subQuery = JSON.stringify(query.azureLogAnalytics);
    } else if (query.queryType === _types__WEBPACK_IMPORTED_MODULE_8__.AzureQueryType.AzureResourceGraph) {
      subQuery = JSON.stringify([query.azureResourceGraph, query.subscriptions]);
    }

    return !!subQuery && this.templateSrv.containsTemplate(subQuery);
  }

  async annotationQuery(options) {
    return this.azureLogAnalyticsDatasource.annotationQuery(options);
  }
  /* Azure Monitor REST API methods */


  getResourceGroups(subscriptionId) {
    return this.azureMonitorDatasource.getResourceGroups(this.templateSrv.replace(subscriptionId));
  }

  getMetricDefinitions(subscriptionId, resourceGroup) {
    return this.azureMonitorDatasource.getMetricDefinitions(this.templateSrv.replace(subscriptionId), this.templateSrv.replace(resourceGroup));
  }

  getResourceNames(subscriptionId, resourceGroup, metricDefinition) {
    return this.azureMonitorDatasource.getResourceNames(this.templateSrv.replace(subscriptionId), this.templateSrv.replace(resourceGroup), this.templateSrv.replace(metricDefinition));
  }
  /*Azure Log Analytics */


  getAzureLogAnalyticsWorkspaces(subscriptionId) {
    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);
  }

  getSubscriptions() {
    return this.azureMonitorDatasource.getSubscriptions();
  }

  interpolateVariablesInQueries(queries, scopedVars) {
    const mapped = queries.map(query => {
      var _ds$applyTemplateVari;

      if (!query.queryType) {
        return query;
      }

      const ds = this.pseudoDatasource[query.queryType];
      return Object.assign({
        datasource: ds === null || ds === void 0 ? void 0 : ds.getRef()
      }, (_ds$applyTemplateVari = ds === null || ds === void 0 ? void 0 : ds.applyTemplateVariables(query, scopedVars)) !== null && _ds$applyTemplateVari !== void 0 ? _ds$applyTemplateVari : query);
    });
    return mapped;
  }

  getVariables() {
    return this.templateSrv.getVariables().map(v => `$${v.name}`);
  }

}

function hasQueryForType(query) {
  switch (query.queryType) {
    case _types__WEBPACK_IMPORTED_MODULE_8__.AzureQueryType.AzureMonitor:
      return !!query.azureMonitor;

    case _types__WEBPACK_IMPORTED_MODULE_8__.AzureQueryType.LogAnalytics:
      return !!query.azureLogAnalytics;

    case _types__WEBPACK_IMPORTED_MODULE_8__.AzureQueryType.AzureResourceGraph:
      return !!query.azureResourceGraph;

    case _types__WEBPACK_IMPORTED_MODULE_8__.AzureQueryType.GrafanaTemplateVariableFn:
      return !!query.grafanaTemplateVariableFn;

    default:
      return false;
  }
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/grafanaTemplateVariableFns.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "grafanaTemplateVariableFnMatches": () => (/* binding */ grafanaTemplateVariableFnMatches),
/* harmony export */   "migrateStringQueriesToObjectQueries": () => (/* binding */ migrateStringQueriesToObjectQueries)
/* harmony export */ });
/* harmony import */ var _components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");



/* 
  Grafana Template Variable Functions
  ex: Subscriptions()

  These are helper functions we have created and exposed to users to make the writing of template variables easier. 
  Due to legacy reasons, we still need to parse strings to determine if a query is a Grafana Template Variable Function 
  or if it's a KQL-type query
*/
const grafanaTemplateVariableFnMatches = query => {
  return {
    subscriptions: query.match(/^Subscriptions\(\)/i),
    resourceGroups: query.match(/^ResourceGroups\(\)/i),
    resourceGroupsWithSub: query.match(/^ResourceGroups\(([^\)]+?)(,\s?([^,]+?))?\)/i),
    metricDefinitions: query.match(/^Namespaces\(([^\)]+?)(,\s?([^,]+?))?\)/i),
    metricDefinitionsWithSub: query.match(/^Namespaces\(([^,]+?),\s?([^,]+?)\)/i),
    resourceNames: query.match(/^ResourceNames\(([^,]+?),\s?([^,]+?)\)/i),
    resourceNamesWithSub: query.match(/^ResourceNames\(([^,]+?),\s?([^,]+?),\s?(.+?)\)/i),
    metricNamespace: query.match(/^MetricNamespace\(([^,]+?),\s?([^,]+?),\s?([^,]+?)\)/i),
    metricNamespaceWithSub: query.match(/^metricnamespace\(([^,]+?),\s?([^,]+?),\s?([^,]+?),\s?([^,]+?)\)/i),
    metricNames: query.match(/^MetricNames\(([^,]+?),\s?([^,]+?),\s?([^,]+?),\s?([^,]+?)\)/i),
    metricNamesWithSub: query.match(/^MetricNames\(([^,]+?),\s?([^,]+?),\s?([^,]+?),\s?([^,]+?),\s?(.+?)\)/i),
    appInsightsMetricNameQuery: query.match(/^AppInsightsMetricNames\(\)/i),
    appInsightsGroupByQuery: query.match(/^AppInsightsGroupBys\(([^\)]+?)(,\s?([^,]+?))?\)/i),
    workspacesQuery: query.match(/^workspaces\(\)/i),
    workspacesQueryWithSub: query.match(/^workspaces\(["']?([^\)]+?)["']?\)/i)
  };
};

const isGrafanaTemplateVariableFnQuery = query => {
  const matches = grafanaTemplateVariableFnMatches(query);
  return Object.keys(matches).some(key => !!matches[key]);
};

const createGrafanaTemplateVariableQuery = (rawQuery, datasource) => {
  const matchesForQuery = grafanaTemplateVariableFnMatches(rawQuery);
  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;

  const createGrafanaTemplateVariableDetails = () => {
    // deprecated app insights template variables (will most likely remove in grafana 9)
    if (matchesForQuery.appInsightsMetricNameQuery) {
      const queryDetails = {
        rawQuery,
        kind: 'AppInsightsMetricNameQuery'
      };
      return queryDetails;
    }

    if (matchesForQuery.appInsightsGroupByQuery) {
      const queryDetails = {
        kind: 'AppInsightsGroupByQuery',
        rawQuery,
        metricName: matchesForQuery.appInsightsGroupByQuery[1]
      };
      return queryDetails;
    }

    if (matchesForQuery.subscriptions) {
      const queryDetails = {
        kind: 'SubscriptionsQuery',
        rawQuery
      };
      return queryDetails;
    }

    if (matchesForQuery.resourceGroupsWithSub) {
      const queryDetails = {
        kind: 'ResourceGroupsQuery',
        rawQuery,
        subscription: matchesForQuery.resourceGroupsWithSub[1]
      };
      return queryDetails;
    }

    if (matchesForQuery.resourceGroups && defaultSubscriptionId) {
      const queryDetails = {
        kind: 'ResourceGroupsQuery',
        rawQuery,
        subscription: defaultSubscriptionId
      };
      return queryDetails;
    }

    if (matchesForQuery.metricDefinitionsWithSub) {
      const queryDetails = {
        kind: 'MetricDefinitionsQuery',
        rawQuery,
        subscription: matchesForQuery.metricDefinitionsWithSub[1],
        resourceGroup: matchesForQuery.metricDefinitionsWithSub[2]
      };
      return queryDetails;
    }

    if (matchesForQuery.metricDefinitions && defaultSubscriptionId) {
      const queryDetails = {
        kind: 'MetricDefinitionsQuery',
        rawQuery,
        subscription: defaultSubscriptionId,
        resourceGroup: matchesForQuery.metricDefinitions[1]
      };
      return queryDetails;
    }

    if (matchesForQuery.resourceNamesWithSub) {
      const queryDetails = {
        kind: 'ResourceNamesQuery',
        rawQuery,
        subscription: matchesForQuery.resourceNamesWithSub[1],
        resourceGroup: matchesForQuery.resourceNamesWithSub[2],
        metricDefinition: matchesForQuery.resourceNamesWithSub[3]
      };
      return queryDetails;
    }

    if (matchesForQuery.resourceNames && defaultSubscriptionId) {
      const queryDetails = {
        kind: 'ResourceNamesQuery',
        rawQuery,
        subscription: defaultSubscriptionId,
        resourceGroup: matchesForQuery.resourceNames[1],
        metricDefinition: matchesForQuery.resourceNames[2]
      };
      return queryDetails;
    }

    if (matchesForQuery.metricNamespaceWithSub) {
      const queryDetails = {
        kind: 'MetricNamespaceQuery',
        rawQuery,
        subscription: matchesForQuery.metricNamespaceWithSub[1],
        resourceGroup: matchesForQuery.metricNamespaceWithSub[2],
        metricDefinition: matchesForQuery.metricNamespaceWithSub[3],
        resourceName: matchesForQuery.metricNamespaceWithSub[4]
      };
      return queryDetails;
    }

    if (matchesForQuery.metricNamespace && defaultSubscriptionId) {
      const queryDetails = {
        kind: 'MetricNamespaceQuery',
        rawQuery,
        subscription: defaultSubscriptionId,
        resourceGroup: matchesForQuery.metricNamespace[1],
        metricDefinition: matchesForQuery.metricNamespace[2],
        resourceName: matchesForQuery.metricNamespace[3]
      };
      return queryDetails;
    }

    if (matchesForQuery.metricNames && defaultSubscriptionId) {
      if (matchesForQuery.metricNames[3].indexOf(',') === -1) {
        const queryDetails = {
          kind: 'MetricNamesQuery',
          rawQuery,
          subscription: defaultSubscriptionId,
          resourceGroup: matchesForQuery.metricNames[1],
          metricDefinition: matchesForQuery.metricNames[2],
          resourceName: matchesForQuery.metricNames[3],
          metricNamespace: matchesForQuery.metricNames[4]
        };
        return queryDetails;
      }
    }

    if (matchesForQuery.metricNamesWithSub) {
      const queryDetails = {
        kind: 'MetricNamesQuery',
        rawQuery,
        subscription: matchesForQuery.metricNamesWithSub[1],
        resourceGroup: matchesForQuery.metricNamesWithSub[2],
        metricDefinition: matchesForQuery.metricNamesWithSub[3],
        resourceName: matchesForQuery.metricNamesWithSub[4],
        metricNamespace: matchesForQuery.metricNamesWithSub[5]
      };
      return queryDetails;
    }

    if (matchesForQuery.workspacesQueryWithSub) {
      const queryDetails = {
        kind: 'WorkspacesQuery',
        rawQuery,
        subscription: (matchesForQuery.workspacesQueryWithSub[1] || '').trim()
      };
      return queryDetails;
    }

    if (matchesForQuery.workspacesQuery && defaultSubscriptionId) {
      const queryDetails = {
        kind: 'WorkspacesQuery',
        rawQuery,
        subscription: defaultSubscriptionId
      };
      return queryDetails;
    } // fallback


    const queryDetails = {
      kind: 'SubscriptionsQuery',
      rawQuery
    };
    return queryDetails;
  };

  const query = {
    refId: 'A',
    queryType: _types__WEBPACK_IMPORTED_MODULE_1__.AzureQueryType.GrafanaTemplateVariableFn,
    grafanaTemplateVariableFn: createGrafanaTemplateVariableDetails(),
    subscription: defaultSubscriptionId
  };
  return query;
};

const createLogAnalyticsTemplateVariableQuery = async (rawQuery, datasource) => {
  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;
  let resource = ''; // if there's an existing query, we try to get the resourcesuri from a deprecated default workspace
  // a note this is very similar logic to what is used in useMigrations but moved out of the react-hook land

  if (rawQuery) {
    const defaultWorkspaceId = datasource.azureLogAnalyticsDatasource.getDeprecatedDefaultWorkSpace();

    if (defaultWorkspaceId) {
      const isWorkspaceGUID = (0,_components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_0__.isGUIDish)(defaultWorkspaceId);

      if (isWorkspaceGUID) {
        resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(defaultWorkspaceId);
      } else {
        resource = defaultWorkspaceId;
      }
    } else {
      const maybeFirstWorkspace = await datasource.azureLogAnalyticsDatasource.getFirstWorkspace();
      resource = maybeFirstWorkspace || '';
    }
  }

  return {
    refId: 'A',
    queryType: _types__WEBPACK_IMPORTED_MODULE_1__.AzureQueryType.LogAnalytics,
    azureLogAnalytics: {
      query: rawQuery,
      resource
    },
    subscription: defaultSubscriptionId
  };
};

const migrateStringQueriesToObjectQueries = async (rawQuery, options) => {
  // no need to migrate already migrated queries
  if (typeof rawQuery !== 'string') {
    return rawQuery;
  }

  return isGrafanaTemplateVariableFnQuery(rawQuery) ? createGrafanaTemplateVariableQuery(rawQuery, options.datasource) : createLogAnalyticsTemplateVariableQuery(rawQuery, options.datasource);
};

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LogAnalyticsQuerystringBuilder)
/* harmony export */ });
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./packages/grafana-data/src/index.ts");

class LogAnalyticsQuerystringBuilder {
  constructor(rawQueryString, options, defaultTimeField) {
    this.rawQueryString = rawQueryString;
    this.options = options;
    this.defaultTimeField = defaultTimeField;
  }

  generate() {
    let queryString = this.rawQueryString;
    const macroRegexp = /\$__([_a-zA-Z0-9]+)\(([^()]*)\)/gi;
    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {
      if (p1 === 'contains') {
        return this.getMultiContains(p2);
      }

      return match;
    });
    queryString = queryString.replace(/\$__escapeMulti\(('[^]*')\)/gi, (match, p1) => this.escape(p1));

    if (this.options) {
      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {
        if (p1 === 'timeFilter') {
          return this.getTimeFilter(p2, this.options);
        }

        if (p1 === 'timeFrom') {
          return this.getFrom(this.options);
        }

        if (p1 === 'timeTo') {
          return this.getUntil(this.options);
        }

        return match;
      });
      queryString = queryString.replace(/\$__interval/gi, this.options.interval);
    }

    const rawQuery = queryString;
    queryString = encodeURIComponent(queryString);
    const uriString = `query=${queryString}`;
    return {
      uriString,
      rawQuery
    };
  }

  getFrom(options) {
    const from = options.range.from;
    return `datetime(${(0,_grafana_data__WEBPACK_IMPORTED_MODULE_0__.dateTime)(from).startOf('minute').toISOString()})`;
  }

  getUntil(options) {
    var _options$rangeRaw;

    if (((_options$rangeRaw = options.rangeRaw) === null || _options$rangeRaw === void 0 ? void 0 : _options$rangeRaw.to) === 'now') {
      const now = Date.now();
      return `datetime(${(0,_grafana_data__WEBPACK_IMPORTED_MODULE_0__.dateTime)(now).startOf('minute').toISOString()})`;
    } else {
      const until = options.range.to;
      return `datetime(${(0,_grafana_data__WEBPACK_IMPORTED_MODULE_0__.dateTime)(until).startOf('minute').toISOString()})`;
    }
  }

  getTimeFilter(timeFieldArg, options) {
    var _options$rangeRaw2;

    const timeField = timeFieldArg || this.defaultTimeField;

    if (((_options$rangeRaw2 = options.rangeRaw) === null || _options$rangeRaw2 === void 0 ? void 0 : _options$rangeRaw2.to) === 'now') {
      return `${timeField} >= ${this.getFrom(options)}`;
    } else {
      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;
    }
  }

  getMultiContains(inputs) {
    const firstCommaIndex = inputs.indexOf(',');
    const field = inputs.substring(0, firstCommaIndex);
    const templateVar = inputs.substring(inputs.indexOf(',') + 1);

    if (templateVar && templateVar.toLowerCase().trim() === 'all') {
      return '1 == 1';
    }

    return `${field.trim()} in (${templateVar.trim()})`;
  }

  escape(inputs) {
    return inputs.substring(1, inputs.length - 1).split(`','`).map(v => `@'${v}'`).join(', ');
  }

}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/module.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "plugin": () => (/* binding */ plugin)
/* harmony export */ });
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./packages/grafana-data/src/index.ts");
/* harmony import */ var _components_ConfigEditor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx");
/* harmony import */ var _components_QueryEditor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/index.tsx");
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts");




const plugin = new _grafana_data__WEBPACK_IMPORTED_MODULE_0__.DataSourcePlugin(_datasource__WEBPACK_IMPORTED_MODULE_3__["default"]).setConfigEditor(_components_ConfigEditor__WEBPACK_IMPORTED_MODULE_1__.ConfigEditor).setQueryEditor(_components_QueryEditor__WEBPACK_IMPORTED_MODULE_2__["default"]);

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/resourcePicker/resourcePickerData.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ResourcePickerData)
/* harmony export */ });
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _azureMetadata__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azureMetadata/index.ts");
/* harmony import */ var _components_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/types.ts");
/* harmony import */ var _components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts");
/* harmony import */ var _utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/common.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






const RESOURCE_GRAPH_URL = '/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01';
const logsSupportedResourceTypesKusto = _azureMetadata__WEBPACK_IMPORTED_MODULE_1__.logsResourceTypes.map(v => `"${v}"`).join(',');
const supportedMetricNamespacesKusto = _azureMetadata__WEBPACK_IMPORTED_MODULE_1__.supportedMetricNamespaces.map(v => `"${v.toLocaleLowerCase()}"`).join(',');
class ResourcePickerData extends _grafana_runtime__WEBPACK_IMPORTED_MODULE_0__.DataSourceWithBackend {
  constructor(instanceSettings) {
    super(instanceSettings);

    _defineProperty(this, "resourcePath", void 0);

    _defineProperty(this, "resultLimit", 200);

    _defineProperty(this, "search", async (searchPhrase, searchType) => {
      let searchQuery = 'resources';

      if (searchType === 'logs') {
        searchQuery += `
      | union resourcecontainers`;
      }

      searchQuery += `
        | where id contains "${searchPhrase}"
        ${this.filterByType(searchType)}
        | order by tolower(name) asc
        | limit ${this.resultLimit}
      `;
      const {
        data: response
      } = await this.makeResourceGraphRequest(searchQuery);
      return response.map(item => {
        const parsedUri = (0,_components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_3__.parseResourceURI)(item.id);

        if (!parsedUri || !(parsedUri.resource || parsedUri.resourceGroup || parsedUri.subscriptionID)) {
          throw new Error('unable to fetch resource details');
        }

        let id = parsedUri.subscriptionID;
        let type = _components_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.Subscription;

        if (parsedUri.resource) {
          id = parsedUri.resource;
          type = _components_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.Resource;
        } else if (parsedUri.resourceGroup) {
          id = parsedUri.resourceGroup;
          type = _components_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.ResourceGroup;
        }

        return {
          name: item.name,
          id,
          uri: item.id,
          resourceGroupName: item.resourceGroup,
          type,
          typeLabel: _azureMetadata__WEBPACK_IMPORTED_MODULE_1__.resourceTypeDisplayNames[item.type] || item.type,
          location: _azureMetadata__WEBPACK_IMPORTED_MODULE_1__.locationDisplayNames[item.location] || item.location
        };
      });
    });

    _defineProperty(this, "filterByType", t => {
      return t === 'logs' ? `| where type in (${logsSupportedResourceTypesKusto})` : `| where type in (${supportedMetricNamespacesKusto})`;
    });

    this.resourcePath = `${_utils_common__WEBPACK_IMPORTED_MODULE_4__.routeNames.resourceGraph}`;
  }

  async fetchInitialRows(type, currentSelection) {
    const subscriptions = await this.getSubscriptions();

    if (!currentSelection) {
      return subscriptions;
    }

    let resources = subscriptions;
    const parsedURI = (0,_components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_3__.parseResourceURI)(currentSelection);

    if (parsedURI) {
      const resourceGroupURI = `/subscriptions/${parsedURI.subscriptionID}/resourceGroups/${parsedURI.resourceGroup}`;

      if (parsedURI.resourceGroup) {
        const resourceGroups = await this.getResourceGroupsBySubscriptionId(parsedURI.subscriptionID, type);
        resources = (0,_components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_3__.addResources)(resources, `/subscriptions/${parsedURI.subscriptionID}`, resourceGroups);
      }

      if (parsedURI.resource) {
        const resourcesForResourceGroup = await this.getResourcesForResourceGroup(resourceGroupURI, type);
        resources = (0,_components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_3__.addResources)(resources, resourceGroupURI, resourcesForResourceGroup);
      }
    }

    return resources;
  }

  async fetchAndAppendNestedRow(rows, parentRow, type) {
    const nestedRows = parentRow.type === _components_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.Subscription ? await this.getResourceGroupsBySubscriptionId(parentRow.id, type) : await this.getResourcesForResourceGroup(parentRow.id, type);
    return (0,_components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_3__.addResources)(rows, parentRow.uri, nestedRows);
  }

  // private
  async getSubscriptions() {
    const query = `
    resources
    | join kind=inner (
              ResourceContainers
                | where type == 'microsoft.resources/subscriptions'
                | project subscriptionName=name, subscriptionURI=id, subscriptionId
              ) on subscriptionId
    | summarize count() by subscriptionName, subscriptionURI, subscriptionId
    | order by subscriptionName desc
  `;
    let resources = [];
    let allFetched = false;
    let $skipToken = undefined;

    while (!allFetched) {
      // The response may include several pages
      let options = {};

      if ($skipToken) {
        options = {
          $skipToken
        };
      }

      const resourceResponse = await this.makeResourceGraphRequest(query, 1, options);

      if (!resourceResponse.data.length) {
        throw new Error('No subscriptions were found');
      }

      resources = resources.concat(resourceResponse.data);
      $skipToken = resourceResponse.$skipToken;
      allFetched = !$skipToken;
    }

    return resources.map(subscription => ({
      name: subscription.subscriptionName,
      id: subscription.subscriptionId,
      uri: `/subscriptions/${subscription.subscriptionId}`,
      typeLabel: 'Subscription',
      type: _components_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.Subscription,
      children: []
    }));
  }

  async getResourceGroupsBySubscriptionId(subscriptionId, type) {
    const query = `
    resources
     | join kind=inner (
       ResourceContainers
       | where type == 'microsoft.resources/subscriptions/resourcegroups'
       | project resourceGroupURI=id, resourceGroupName=name, resourceGroup, subscriptionId
     ) on resourceGroup, subscriptionId

     ${this.filterByType(type)}
     | where subscriptionId == '${subscriptionId}'
     | summarize count() by resourceGroupName, resourceGroupURI
     | order by resourceGroupURI asc`;
    let resourceGroups = [];
    let allFetched = false;
    let $skipToken = undefined;

    while (!allFetched) {
      // The response may include several pages
      let options = {};

      if ($skipToken) {
        options = {
          $skipToken
        };
      }

      const resourceResponse = await this.makeResourceGraphRequest(query, 1, options);
      resourceGroups = resourceGroups.concat(resourceResponse.data);
      $skipToken = resourceResponse.$skipToken;
      allFetched = !$skipToken;
    }

    return resourceGroups.map(r => {
      const parsedUri = (0,_components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_3__.parseResourceURI)(r.resourceGroupURI);

      if (!parsedUri || !parsedUri.resourceGroup) {
        throw new Error('unable to fetch resource groups');
      }

      return {
        name: r.resourceGroupName,
        uri: r.resourceGroupURI,
        id: parsedUri.resourceGroup,
        type: _components_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.ResourceGroup,
        typeLabel: 'Resource Group',
        children: []
      };
    });
  }

  async getResourcesForResourceGroup(resourceGroupId, type) {
    const {
      data: response
    } = await this.makeResourceGraphRequest(`
      resources
      | where id hasprefix "${resourceGroupId}"
      ${this.filterByType(type)} and location in (${_azureMetadata__WEBPACK_IMPORTED_MODULE_1__.logsSupportedLocationsKusto})
    `);
    return response.map(item => {
      const parsedUri = (0,_components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_3__.parseResourceURI)(item.id);

      if (!parsedUri || !parsedUri.resource) {
        throw new Error('unable to fetch resource details');
      }

      return {
        name: item.name,
        id: parsedUri.resource,
        uri: item.id,
        resourceGroupName: item.resourceGroup,
        type: _components_ResourcePicker_types__WEBPACK_IMPORTED_MODULE_2__.ResourceRowType.Resource,
        typeLabel: _azureMetadata__WEBPACK_IMPORTED_MODULE_1__.resourceTypeDisplayNames[item.type] || item.type,
        location: _azureMetadata__WEBPACK_IMPORTED_MODULE_1__.locationDisplayNames[item.location] || item.location
      };
    });
  } // used to make the select resource button that launches the resource picker show a nicer file path to users


  async getResourceURIDisplayProperties(resourceURI) {
    var _parseResourceURI;

    const {
      subscriptionID,
      resourceGroup,
      resource
    } = (_parseResourceURI = (0,_components_ResourcePicker_utils__WEBPACK_IMPORTED_MODULE_3__.parseResourceURI)(resourceURI)) !== null && _parseResourceURI !== void 0 ? _parseResourceURI : {};

    if (!subscriptionID) {
      throw new Error('Invalid resource URI passed');
    } // resourceGroupURI and resourceURI could be invalid values, but that's okay because the join
    // will just silently fail as expected


    const subscriptionURI = `/subscriptions/${subscriptionID}`;
    const resourceGroupURI = `${subscriptionURI}/resourceGroups/${resourceGroup}`;
    const query = `
    resourcecontainers
    | where type == "microsoft.resources/subscriptions"
    | where id =~ "${subscriptionURI}"
    | project subscriptionName=name, subscriptionId

    | join kind=leftouter (
      resourcecontainers            
            | where type == "microsoft.resources/subscriptions/resourcegroups"
            | where id =~ "${resourceGroupURI}"
            | project resourceGroupName=name, resourceGroup, subscriptionId
        ) on subscriptionId

        | join kind=leftouter (
          resources
            | where id =~ "${resourceURI}"
            | project resourceName=name, subscriptionId
        ) on subscriptionId

        | project subscriptionName, resourceGroupName, resourceName
    `;
    const {
      data: response
    } = await this.makeResourceGraphRequest(query);

    if (!response.length) {
      throw new Error('unable to fetch resource details');
    }

    const {
      subscriptionName,
      resourceGroupName,
      resourceName
    } = response[0]; // if the name is undefined it could be because the id is undefined or because we are using a template variable.
    // Either way we can use it as a fallback. We don't really want to interpolate these variables because we want
    // to show the user when they are using template variables `$sub/$rg/$resource`

    return {
      subscriptionName: subscriptionName || subscriptionID,
      resourceGroupName: resourceGroupName || resourceGroup,
      resourceName: resourceName || resource
    };
  }

  async getResourceURIFromWorkspace(workspace) {
    const {
      data: response
    } = await this.makeResourceGraphRequest(`
      resources
      | where properties['customerId'] == "${workspace}"
      | project id
    `);

    if (!response.length) {
      throw new Error('unable to find resource for workspace ' + workspace);
    }

    return response[0].id;
  }

  async makeResourceGraphRequest(query, maxRetries = 1, reqOptions) {
    try {
      return await this.postResource(this.resourcePath + RESOURCE_GRAPH_URL, {
        query: query,
        options: Object.assign({
          resultFormat: 'objectArray'
        }, reqOptions)
      });
    } catch (error) {
      if (maxRetries > 0) {
        return this.makeResourceGraphRequest(query, maxRetries - 1);
      }

      throw error;
    }
  }

}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TimeGrainConverter)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-data/src/index.ts");


class TimeGrainConverter {
  static createISO8601Duration(timeGrain, timeGrainUnit) {
    const timeIntervals = ['hour', 'minute', 'h', 'm'];

    if ((0,lodash__WEBPACK_IMPORTED_MODULE_0__.includes)(timeIntervals, timeGrainUnit)) {
      return `PT${timeGrain}${timeGrainUnit[0].toUpperCase()}`;
    }

    return `P${timeGrain}${timeGrainUnit[0].toUpperCase()}`;
  }

  static createISO8601DurationFromInterval(interval) {
    const timeGrain = +interval.slice(0, interval.length - 1);
    const unit = interval[interval.length - 1];

    if (interval.indexOf('ms') > -1) {
      return TimeGrainConverter.createISO8601Duration(1, 'm');
    }

    if (interval[interval.length - 1] === 's') {
      let toMinutes = timeGrain * 60 % 60;

      if (toMinutes < 1) {
        toMinutes = 1;
      }

      return TimeGrainConverter.createISO8601Duration(toMinutes, 'm');
    }

    return TimeGrainConverter.createISO8601Duration(timeGrain, unit);
  }

  static findClosestTimeGrain(interval, allowedTimeGrains) {
    const timeGrains = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.filter)(allowedTimeGrains, o => o !== 'auto');
    let closest = timeGrains[0];
    const intervalMs = _grafana_data__WEBPACK_IMPORTED_MODULE_1__.rangeUtil.intervalToMs(interval);

    for (let i = 0; i < timeGrains.length; i++) {
      // abs (num - val) < abs (num - curr):
      if (intervalMs > _grafana_data__WEBPACK_IMPORTED_MODULE_1__.rangeUtil.intervalToMs(timeGrains[i])) {
        if (i + 1 < timeGrains.length) {
          closest = timeGrains[i + 1];
        } else {
          closest = timeGrains[i];
        }
      }
    }

    return closest;
  }

  static createTimeGrainFromISO8601Duration(duration) {
    let offset = 1;

    if (duration.substring(0, 2) === 'PT') {
      offset = 2;
    }

    const value = duration.substring(offset, duration.length - 1);
    const unit = duration.substring(duration.length - 1);
    return value + ' ' + TimeGrainConverter.timeUnitToText(+value, unit);
  }

  static timeUnitToText(value, unit) {
    let text = '';

    if (unit === 'S') {
      text = 'second';
    }

    if (unit === 'M') {
      text = 'minute';
    }

    if (unit === 'H') {
      text = 'hour';
    }

    if (unit === 'D') {
      text = 'day';
    }

    if (value > 1) {
      return text + 's';
    }

    return text;
  }

  static createKbnUnitFromISO8601Duration(duration) {
    if (duration === 'auto') {
      return 'auto';
    }

    let offset = 1;

    if (duration.substring(0, 2) === 'PT') {
      offset = 2;
    }

    const value = duration.substring(offset, duration.length - 1);
    const unit = duration.substring(duration.length - 1);
    return value + TimeGrainConverter.timeUnitToKbn(+value, unit);
  }

  static timeUnitToKbn(value, unit) {
    if (unit === 'S') {
      return 's';
    }

    if (unit === 'M') {
      return 'm';
    }

    if (unit === 'H') {
      return 'h';
    }

    if (unit === 'D') {
      return 'd';
    }

    return '';
  }

}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AzureCloud": () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_2__.AzureCloud),
/* harmony export */   "AzureQueryType": () => (/* reexport safe */ _query__WEBPACK_IMPORTED_MODULE_1__.AzureQueryType)
/* harmony export */ });
/* harmony import */ var _logAnalyticsMetadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/logAnalyticsMetadata.ts");
/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/query.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/types.ts");




/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/logAnalyticsMetadata.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);


/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/query.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AzureQueryType": () => (/* binding */ AzureQueryType)
/* harmony export */ });
let AzureQueryType;
/**
 * Represents the query as it moves through the frontend query editor and datasource files.
 * It can represent new queries that are still being edited, so all properties are optional
 */

(function (AzureQueryType) {
  AzureQueryType["AzureMonitor"] = "Azure Monitor";
  AzureQueryType["LogAnalytics"] = "Azure Log Analytics";
  AzureQueryType["AzureResourceGraph"] = "Azure Resource Graph";
  AzureQueryType["GrafanaTemplateVariableFn"] = "Grafana Template Variable Function";
})(AzureQueryType || (AzureQueryType = {}));

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/types.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AzureCloud": () => (/* binding */ AzureCloud)
/* harmony export */ });
/**
 * Azure clouds known to Azure Monitor.
 */
let AzureCloud;

(function (AzureCloud) {
  AzureCloud["Public"] = "AzureCloud";
  AzureCloud["China"] = "AzureChinaCloud";
  AzureCloud["USGovernment"] = "AzureUSGovernment";
  AzureCloud["Germany"] = "AzureGermanCloud";
  AzureCloud["None"] = "";
})(AzureCloud || (AzureCloud = {}));

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/common.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertTimeGrainsToMs": () => (/* binding */ convertTimeGrainsToMs),
/* harmony export */   "findOptions": () => (/* binding */ findOptions),
/* harmony export */   "hasOption": () => (/* binding */ hasOption),
/* harmony export */   "interpolateVariable": () => (/* binding */ interpolateVariable),
/* harmony export */   "routeNames": () => (/* binding */ routeNames),
/* harmony export */   "toOption": () => (/* binding */ toOption)
/* harmony export */ });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/lodash-npm-4.17.21-6382451519-eb835a2e51.zip/node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-data/src/index.ts");
/* harmony import */ var _time_grain_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts");



const hasOption = (options, value) => options.some(v => v.options ? hasOption(v.options, value) : v.value === value);
const findOptions = (options, values = []) => {
  if (values.length === 0) {
    return [];
  }

  const set = values.reduce((accum, item) => {
    accum.add(item);
    return accum;
  }, new Set());
  return options.filter(option => set.has(option.value));
};
const toOption = v => ({
  value: v.value,
  label: v.text
});
function convertTimeGrainsToMs(timeGrains) {
  const allowedTimeGrainsMs = [];
  timeGrains.forEach(tg => {
    if (tg.value !== 'auto') {
      allowedTimeGrainsMs.push(_grafana_data__WEBPACK_IMPORTED_MODULE_1__.rangeUtil.intervalToMs(_time_grain_converter__WEBPACK_IMPORTED_MODULE_2__["default"].createKbnUnitFromISO8601Duration(tg.value)));
    }
  });
  return allowedTimeGrainsMs;
} // Route definitions shared with the backend.
// Check: /pkg/tsdb/azuremonitor/azuremonitor-resource-handler.go <registerRoutes>

const routeNames = {
  azureMonitor: 'azuremonitor',
  logAnalytics: 'loganalytics',
  appInsights: 'appinsights',
  resourceGraph: 'resourcegraph'
};
function interpolateVariable(value, variable) {
  if (typeof value === 'string') {
    // When enabling multiple responses, quote the value to mimic the array result below
    // even if only one response is selected. This does not apply if only the "include all"
    // option is enabled but with a custom value.
    if (variable.multi || variable.includeAll && !variable.allValue) {
      return "'" + value + "'";
    } else {
      return value;
    }
  }

  if (typeof value === 'number') {
    return value;
  }

  const quotedValues = (0,lodash__WEBPACK_IMPORTED_MODULE_0__.map)(value, val => {
    if (typeof value === 'number') {
      return value;
    }

    return "'" + val + "'";
  });
  return quotedValues.join(',');
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateAnnotation.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ migrateAnnotation)
/* harmony export */ });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
 // The old Angular annotations editor put some properties (rawQuery, workspace, subscription)
// on the root annotation object, rather than down in the 'targets' query value
// This migration moves them to a Log Analytics query compatible with the React query editor
// The old Angular annotations editor did not support any other query types.

function migrateAnnotation(annotation) {
  var _annotation$target, _annotation$target$az, _annotation$target2, _annotation$target$re, _annotation$target3;

  const oldQuery = typeof annotation.rawQuery === 'string' ? annotation.rawQuery : null;
  const oldWorkspace = typeof annotation.workspace === 'string' ? annotation.workspace : null;

  if (!(oldQuery && oldWorkspace && !((_annotation$target = annotation.target) !== null && _annotation$target !== void 0 && (_annotation$target$az = _annotation$target.azureLogAnalytics) !== null && _annotation$target$az !== void 0 && _annotation$target$az.query))) {
    return annotation;
  }

  const newQuery = Object.assign({}, (_annotation$target2 = annotation.target) !== null && _annotation$target2 !== void 0 ? _annotation$target2 : {}, {
    refId: (_annotation$target$re = (_annotation$target3 = annotation.target) === null || _annotation$target3 === void 0 ? void 0 : _annotation$target3.refId) !== null && _annotation$target$re !== void 0 ? _annotation$target$re : 'Anno',
    queryType: _types__WEBPACK_IMPORTED_MODULE_0__.AzureQueryType.LogAnalytics,
    azureLogAnalytics: {
      query: oldQuery,
      resource: oldWorkspace
    }
  });
  return Object.assign({}, annotation, {
    rawQuery: undefined,
    workspace: undefined,
    subscription: undefined,
    queryType: undefined,
    target: newQuery
  });
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateQuery.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "datasourceMigrations": () => (/* binding */ datasourceMigrations),
/* harmony export */   "default": () => (/* binding */ migrateQuery)
/* harmony export */ });
/* harmony import */ var _azure_monitor_url_builder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts");
/* harmony import */ var _components_LogsQueryEditor_setQueryValue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/setQueryValue.ts");
/* harmony import */ var _components_MetricsQueryEditor_setQueryValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts");
/* harmony import */ var _time_grain_converter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/time_grain_converter.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");





const OLD_DEFAULT_DROPDOWN_VALUE = 'select';
function migrateQuery(query) {
  let workingQuery = query; // The old angular controller also had a `migrateApplicationInsightsKeys` migraiton that
  // migrated old properties to other properties that still do not appear to be used anymore, so
  // we decided to not include that migration anymore
  // See https://github.com/grafana/grafana/blob/a6a09add/public/app/plugins/datasource/grafana-azure-monitor-datasource/query_ctrl.ts#L269-L288

  workingQuery = migrateTimeGrains(workingQuery);
  workingQuery = migrateLogAnalyticsToFromTimes(workingQuery);
  workingQuery = migrateToDefaultNamespace(workingQuery);
  workingQuery = migrateDimensionToDimensionFilter(workingQuery);
  workingQuery = migrateResourceUri(workingQuery);
  workingQuery = migrateDimensionFilterToArray(workingQuery);
  return workingQuery;
}

function migrateTimeGrains(query) {
  var _workingQuery$azureMo;

  let workingQuery = query;

  if ((_workingQuery$azureMo = workingQuery.azureMonitor) !== null && _workingQuery$azureMo !== void 0 && _workingQuery$azureMo.timeGrainUnit && workingQuery.azureMonitor.timeGrain !== 'auto') {
    var _workingQuery$azureMo2, _workingQuery$azureMo3;

    const newTimeGrain = _time_grain_converter__WEBPACK_IMPORTED_MODULE_3__["default"].createISO8601Duration((_workingQuery$azureMo2 = workingQuery.azureMonitor.timeGrain) !== null && _workingQuery$azureMo2 !== void 0 ? _workingQuery$azureMo2 : 'auto', workingQuery.azureMonitor.timeGrainUnit);
    workingQuery = (0,_components_MetricsQueryEditor_setQueryValue__WEBPACK_IMPORTED_MODULE_2__.setTimeGrain)(workingQuery, newTimeGrain);
    (_workingQuery$azureMo3 = workingQuery.azureMonitor) === null || _workingQuery$azureMo3 === void 0 ? true : delete _workingQuery$azureMo3.timeGrainUnit;
  }

  return workingQuery;
}

function migrateLogAnalyticsToFromTimes(query) {
  var _workingQuery$azureLo, _workingQuery$azureLo2, _workingQuery$azureLo3, _workingQuery$azureLo4;

  let workingQuery = query;

  if ((_workingQuery$azureLo = workingQuery.azureLogAnalytics) !== null && _workingQuery$azureLo !== void 0 && (_workingQuery$azureLo2 = _workingQuery$azureLo.query) !== null && _workingQuery$azureLo2 !== void 0 && _workingQuery$azureLo2.match(/\$__from\s/gi)) {
    workingQuery = (0,_components_LogsQueryEditor_setQueryValue__WEBPACK_IMPORTED_MODULE_1__.setKustoQuery)(workingQuery, workingQuery.azureLogAnalytics.query.replace(/\$__from\s/gi, '$__timeFrom() '));
  }

  if ((_workingQuery$azureLo3 = workingQuery.azureLogAnalytics) !== null && _workingQuery$azureLo3 !== void 0 && (_workingQuery$azureLo4 = _workingQuery$azureLo3.query) !== null && _workingQuery$azureLo4 !== void 0 && _workingQuery$azureLo4.match(/\$__to\s/gi)) {
    workingQuery = (0,_components_LogsQueryEditor_setQueryValue__WEBPACK_IMPORTED_MODULE_1__.setKustoQuery)(workingQuery, workingQuery.azureLogAnalytics.query.replace(/\$__to\s/gi, '$__timeTo() '));
  }

  return workingQuery;
}

function migrateToDefaultNamespace(query) {
  var _query$azureMonitor, _query$azureMonitor2;

  const haveMetricNamespace = ((_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.metricNamespace) && query.azureMonitor.metricNamespace !== OLD_DEFAULT_DROPDOWN_VALUE;

  if (!haveMetricNamespace && (_query$azureMonitor2 = query.azureMonitor) !== null && _query$azureMonitor2 !== void 0 && _query$azureMonitor2.metricDefinition) {
    return Object.assign({}, query, {
      azureMonitor: Object.assign({}, query.azureMonitor, {
        metricNamespace: query.azureMonitor.metricDefinition
      })
    });
  }

  return query;
}

function migrateDimensionToDimensionFilter(query) {
  var _workingQuery$azureMo4;

  let workingQuery = query;
  const oldDimension = (_workingQuery$azureMo4 = workingQuery.azureMonitor) === null || _workingQuery$azureMo4 === void 0 ? void 0 : _workingQuery$azureMo4.dimension;

  if (oldDimension && oldDimension !== 'None') {
    var _workingQuery$azureMo5;

    workingQuery = (0,_components_MetricsQueryEditor_setQueryValue__WEBPACK_IMPORTED_MODULE_2__.appendDimensionFilter)(workingQuery, oldDimension, 'eq', [((_workingQuery$azureMo5 = workingQuery.azureMonitor) === null || _workingQuery$azureMo5 === void 0 ? void 0 : _workingQuery$azureMo5.dimensionFilter) || '']);
  }

  return workingQuery;
} // Azure Monitor metric queries prior to Grafana version 9 did not include a `resourceUri`.
// The resourceUri was previously constructed with the subscription id, resource group,
// metric definition (a.k.a. resource type), and the resource name.


function migrateResourceUri(query) {
  const azureMonitorQuery = query.azureMonitor;

  if (!azureMonitorQuery || azureMonitorQuery.resourceUri) {
    return query;
  }

  const {
    subscription
  } = query;
  const {
    resourceGroup,
    metricDefinition,
    resourceName
  } = azureMonitorQuery;

  if (!(subscription && resourceGroup && metricDefinition && resourceName)) {
    return query;
  }

  const resourceUri = _azure_monitor_url_builder__WEBPACK_IMPORTED_MODULE_0__["default"].buildResourceUri(subscription, resourceGroup, metricDefinition, resourceName);
  return Object.assign({}, query, {
    azureMonitor: Object.assign({}, azureMonitorQuery, {
      resourceUri
    })
  });
}

function migrateDimensionFilterToArray(query) {
  const azureMonitorQuery = query.azureMonitor;

  if (!azureMonitorQuery) {
    return query;
  }

  const newFilters = [];
  const dimensionFilters = azureMonitorQuery.dimensionFilters;

  if (dimensionFilters && dimensionFilters.length > 0) {
    dimensionFilters.forEach(filter => {
      const staticProps = {
        dimension: filter.dimension,
        operator: filter.operator
      };

      if (!filter.filters && filter.filter) {
        newFilters.push(Object.assign({}, staticProps, {
          filters: [filter.filter]
        }));
      } else {
        let hasFilter = false;

        if (filter.filters && filter.filter) {
          for (const oldFilter of filter.filters) {
            if (filter.filter === oldFilter) {
              hasFilter = true;
              break;
            }
          }

          if (!hasFilter && filter.filter !== '*') {
            filter.filters.push(filter.filter);
          }

          newFilters.push(Object.assign({}, staticProps, {
            filters: filter.filters
          }));
        }
      }
    });

    if (newFilters.length > 0) {
      return Object.assign({}, query, {
        azureMonitor: Object.assign({}, azureMonitorQuery, {
          dimensionFilters: newFilters
        })
      });
    }
  }

  return query;
} // datasource.ts also contains some migrations, which have been moved to here. Unsure whether
// they should also do all the other migrations...


function datasourceMigrations(query) {
  let workingQuery = query;

  if (!workingQuery.queryType) {
    workingQuery = Object.assign({}, workingQuery, {
      queryType: _types__WEBPACK_IMPORTED_MODULE_4__.AzureQueryType.AzureMonitor
    });
  }

  if (workingQuery.queryType === _types__WEBPACK_IMPORTED_MODULE_4__.AzureQueryType.AzureMonitor && workingQuery.azureMonitor) {
    workingQuery = migrateDimensionToDimensionFilter(workingQuery);
    workingQuery = migrateResourceUri(workingQuery);
    workingQuery = migrateDimensionFilterToArray(workingQuery);
  }

  return workingQuery;
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/useAsyncState.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useAsyncState": () => (/* binding */ useAsyncState)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");

function useAsyncState(asyncFn, setError, dependencies) {
  // Use the lazy initial state functionality of useState to assign a random ID to the API call
  // to track where errors come from. See useLastError.
  const [errorSource] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => Math.random());
  const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();
  const finalValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => value !== null && value !== void 0 ? value : [], [value]);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    asyncFn().then(results => {
      setValue(results);
      setError(errorSource, undefined);
    }).catch(err => {
      setError(errorSource, err);
    }); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
  return finalValue;
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/useLastError.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ useLastError)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./.yarn/cache/react-npm-17.0.2-99ba37d931-b254cc17ce.zip/node_modules/react/index.js");
/* harmony import */ var _messageFromError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/messageFromError.ts");


function useLastError() {
  const [errors, setErrors] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]); // Handles errors from any child components that request data to display their options

  const addError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((errorSource, error) => {
    setErrors(errors => {
      const errorsCopy = [...errors];
      const index = errors.findIndex(([vSource]) => vSource === errorSource); // If there's already an error, remove it. If we're setting a new error
      // below, we'll move it to the front

      if (index > -1) {
        errorsCopy.splice(index, 1);
      } // And then add the new error to the top of the array. If error is defined, it was already
      // removed above.


      if (error) {
        errorsCopy.unshift([errorSource, error]);
      }

      return errorsCopy;
    });
  }, []);
  const errorMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const recentError = errors[0];
    return recentError && (0,_messageFromError__WEBPACK_IMPORTED_MODULE_1__["default"])(recentError[1]);
  }, [errors]);
  return [errorMessage, addError];
}

/***/ }),

/***/ "./public/app/plugins/datasource/grafana-azure-monitor-datasource/variables.ts":
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VariableSupport": () => (/* binding */ VariableSupport)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("./.yarn/cache/rxjs-npm-7.5.5-d0546b1ccb-e034f60805.zip/node_modules/rxjs/dist/esm5/internal/lastValueFrom.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("./.yarn/cache/rxjs-npm-7.5.5-d0546b1ccb-e034f60805.zip/node_modules/rxjs/dist/esm5/internal/observable/from.js");
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("./packages/grafana-data/src/index.ts");
/* harmony import */ var _grafana_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("./packages/grafana-runtime/src/index.ts");
/* harmony import */ var _components_VariableEditor_VariableEditor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/components/VariableEditor/VariableEditor.tsx");
/* harmony import */ var _grafanaTemplateVariableFns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/grafanaTemplateVariableFns.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/types/index.ts");
/* harmony import */ var _utils_messageFromError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("./public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/messageFromError.ts");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }








class VariableSupport extends _grafana_data__WEBPACK_IMPORTED_MODULE_0__.CustomVariableSupport {
  constructor(datasource) {
    super();

    _defineProperty(this, "editor", _components_VariableEditor_VariableEditor__WEBPACK_IMPORTED_MODULE_2__["default"]);

    this.datasource = datasource;
    this.datasource = datasource;
    this.query = this.query.bind(this);
  }

  query(request) {
    const promisedResults = async () => {
      const queryObj = await (0,_grafanaTemplateVariableFns__WEBPACK_IMPORTED_MODULE_3__.migrateStringQueriesToObjectQueries)(request.targets[0], {
        datasource: this.datasource
      });

      if (queryObj.queryType === _types__WEBPACK_IMPORTED_MODULE_4__.AzureQueryType.GrafanaTemplateVariableFn && queryObj.grafanaTemplateVariableFn) {
        try {
          const templateVariablesResults = await this.callGrafanaTemplateVariableFn(queryObj.grafanaTemplateVariableFn);
          return {
            data: templateVariablesResults !== null && templateVariablesResults !== void 0 && templateVariablesResults.length ? [(0,_grafana_data__WEBPACK_IMPORTED_MODULE_0__.toDataFrame)(templateVariablesResults)] : []
          };
        } catch (err) {
          return {
            data: [],
            error: {
              message: (0,_utils_messageFromError__WEBPACK_IMPORTED_MODULE_5__["default"])(err)
            }
          };
        }
      }

      request.targets[0] = queryObj;
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.lastValueFrom)(this.datasource.query(request));
    };

    return (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.from)(promisedResults());
  }

  callGrafanaTemplateVariableFn(query) {
    if (query.kind === 'SubscriptionsQuery') {
      return this.datasource.getSubscriptions();
    }

    if (query.kind === 'ResourceGroupsQuery') {
      return this.datasource.getResourceGroups(this.replaceVariable(query.subscription));
    }

    if (query.kind === 'MetricDefinitionsQuery') {
      return this.datasource.getMetricDefinitions(this.replaceVariable(query.subscription), this.replaceVariable(query.resourceGroup));
    }

    if (query.kind === 'ResourceNamesQuery') {
      return this.datasource.getResourceNames(this.replaceVariable(query.subscription), this.replaceVariable(query.resourceGroup), this.replaceVariable(query.metricDefinition));
    }

    if (query.kind === 'MetricNamespaceQuery') {
      return this.datasource.azureMonitorDatasource.getMetricNamespaces(query);
    }

    if (query.kind === 'MetricNamesQuery') {
      return this.datasource.azureMonitorDatasource.getMetricNames(query);
    }

    if (query.kind === 'WorkspacesQuery') {
      return this.datasource.azureLogAnalyticsDatasource.getWorkspaces(this.replaceVariable(query.subscription));
    }

    return null;
  }

  replaceVariable(metric) {
    return (0,_grafana_runtime__WEBPACK_IMPORTED_MODULE_1__.getTemplateSrv)().replace((metric || '').trim());
  }

}

/***/ }),

/***/ "./.yarn/cache/immer-npm-9.0.14-0baed19a8d-17f1365c06.zip/node_modules/immer/dist/immer.esm.mjs":
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Immer": () => (/* binding */ un),
/* harmony export */   "applyPatches": () => (/* binding */ pn),
/* harmony export */   "castDraft": () => (/* binding */ K),
/* harmony export */   "castImmutable": () => (/* binding */ $),
/* harmony export */   "createDraft": () => (/* binding */ ln),
/* harmony export */   "current": () => (/* binding */ D),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "enableAllPlugins": () => (/* binding */ J),
/* harmony export */   "enableES5": () => (/* binding */ N),
/* harmony export */   "enableMapSet": () => (/* binding */ C),
/* harmony export */   "enablePatches": () => (/* binding */ T),
/* harmony export */   "finishDraft": () => (/* binding */ dn),
/* harmony export */   "freeze": () => (/* binding */ d),
/* harmony export */   "immerable": () => (/* binding */ L),
/* harmony export */   "isDraft": () => (/* binding */ r),
/* harmony export */   "isDraftable": () => (/* binding */ t),
/* harmony export */   "nothing": () => (/* binding */ H),
/* harmony export */   "original": () => (/* binding */ e),
/* harmony export */   "produce": () => (/* binding */ fn),
/* harmony export */   "produceWithPatches": () => (/* binding */ cn),
/* harmony export */   "setAutoFreeze": () => (/* binding */ sn),
/* harmony export */   "setUseProxies": () => (/* binding */ vn)
/* harmony export */ });
function n(n){for(var r=arguments.length,t=Array(r>1?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];if(true){var i=Y[n],o=i?"function"==typeof i?i.apply(null,t):i:"unknown error nr: "+n;throw Error("[Immer] "+o)}throw Error("[Immer] minified error nr: "+n+(t.length?" "+t.map((function(n){return"'"+n+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function r(n){return!!n&&!!n[Q]}function t(n){return!!n&&(function(n){if(!n||"object"!=typeof n)return!1;var r=Object.getPrototypeOf(n);if(null===r)return!0;var t=Object.hasOwnProperty.call(r,"constructor")&&r.constructor;return t===Object||"function"==typeof t&&Function.toString.call(t)===Z}(n)||Array.isArray(n)||!!n[L]||!!n.constructor[L]||s(n)||v(n))}function e(t){return r(t)||n(23,t),t[Q].t}function i(n,r,t){void 0===t&&(t=!1),0===o(n)?(t?Object.keys:nn)(n).forEach((function(e){t&&"symbol"==typeof e||r(e,n[e],n)})):n.forEach((function(t,e){return r(e,t,n)}))}function o(n){var r=n[Q];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:s(n)?2:v(n)?3:0}function u(n,r){return 2===o(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function a(n,r){return 2===o(n)?n.get(r):n[r]}function f(n,r,t){var e=o(n);2===e?n.set(r,t):3===e?(n.delete(r),n.add(t)):n[r]=t}function c(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}function s(n){return X&&n instanceof Map}function v(n){return q&&n instanceof Set}function p(n){return n.o||n.t}function l(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=rn(n);delete r[Q];for(var t=nn(r),e=0;e<t.length;e++){var i=t[e],o=r[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(r[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]})}return Object.create(Object.getPrototypeOf(n),r)}function d(n,e){return void 0===e&&(e=!1),y(n)||r(n)||!t(n)?n:(o(n)>1&&(n.set=n.add=n.clear=n.delete=h),Object.freeze(n),e&&i(n,(function(n,r){return d(r,!0)}),!0),n)}function h(){n(2)}function y(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function b(r){var t=tn[r];return t||n(18,r),t}function m(n,r){tn[n]||(tn[n]=r)}function _(){return false||U||n(0),U}function j(n,r){r&&(b("Patches"),n.u=[],n.s=[],n.v=r)}function O(n){g(n),n.p.forEach(S),n.p=null}function g(n){n===U&&(U=n.l)}function w(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var r=n[Q];0===r.i||1===r.i?r.j():r.O=!0}function P(r,e){e._=e.p.length;var i=e.p[0],o=void 0!==r&&r!==i;return e.h.g||b("ES5").S(e,r,o),o?(i[Q].P&&(O(e),n(4)),t(r)&&(r=M(e,r),e.l||x(e,r)),e.u&&b("Patches").M(i[Q].t,r,e.u,e.s)):r=M(e,i,[]),O(e),e.u&&e.v(e.u,e.s),r!==H?r:void 0}function M(n,r,t){if(y(r))return r;var e=r[Q];if(!e)return i(r,(function(i,o){return A(n,e,r,i,o,t)}),!0),r;if(e.A!==n)return r;if(!e.P)return x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l(e.k):e.o;i(3===e.i?new Set(o):o,(function(r,i){return A(n,e,o,r,i,t)})),x(n,o,!1),t&&n.u&&b("Patches").R(e,t,n.u,n.s)}return e.o}function A(e,i,o,a,c,s){if( true&&c===o&&n(5),r(c)){var v=M(e,c,s&&i&&3!==i.i&&!u(i.D,a)?s.concat(a):void 0);if(f(o,a,v),!r(v))return;e.m=!1}if(t(c)&&!y(c)){if(!e.h.F&&e._<1)return;M(e,c),i&&i.A.l||x(e,c)}}function x(n,r,t){void 0===t&&(t=!1),n.h.F&&n.m&&d(r,t)}function z(n,r){var t=n[Q];return(t?p(t):n)[r]}function I(n,r){if(r in n)for(var t=Object.getPrototypeOf(n);t;){var e=Object.getOwnPropertyDescriptor(t,r);if(e)return e;t=Object.getPrototypeOf(t)}}function k(n){n.P||(n.P=!0,n.l&&k(n.l))}function E(n){n.o||(n.o=l(n.t))}function R(n,r,t){var e=s(r)?b("MapSet").N(r,t):v(r)?b("MapSet").T(r,t):n.g?function(n,r){var t=Array.isArray(n),e={i:t?1:0,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:null,o:null,j:null,C:!1},i=e,o=en;t&&(i=[e],o=on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(r,t):b("ES5").J(r,t);return(t?t.A:_()).p.push(e),e}function D(e){return r(e)||n(22,e),function n(r){if(!t(r))return r;var e,u=r[Q],c=o(r);if(u){if(!u.P&&(u.i<4||!b("ES5").K(u)))return u.t;u.I=!0,e=F(r,c),u.I=!1}else e=F(r,c);return i(e,(function(r,t){u&&a(u.t,r)===t||f(e,r,n(t))})),3===c?new Set(e):e}(e)}function F(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return l(n)}function N(){function t(n,r){var t=s[n];return t?t.enumerable=r:s[n]=t={configurable:!0,enumerable:r,get:function(){var r=this[Q];return true&&f(r),en.get(r,n)},set:function(r){var t=this[Q]; true&&f(t),en.set(t,n,r)}},t}function e(n){for(var r=n.length-1;r>=0;r--){var t=n[r][Q];if(!t.P)switch(t.i){case 5:a(t)&&k(t);break;case 4:o(t)&&k(t)}}}function o(n){for(var r=n.t,t=n.k,e=nn(t),i=e.length-1;i>=0;i--){var o=e[i];if(o!==Q){var a=r[o];if(void 0===a&&!u(r,o))return!0;var f=t[o],s=f&&f[Q];if(s?s.t!==a:!c(f,a))return!0}}var v=!!r[Q];return e.length!==nn(r).length+(v?0:1)}function a(n){var r=n.k;if(r.length!==n.t.length)return!0;var t=Object.getOwnPropertyDescriptor(r,r.length-1);if(t&&!t.get)return!0;for(var e=0;e<r.length;e++)if(!r.hasOwnProperty(e))return!0;return!1}function f(r){r.O&&n(3,JSON.stringify(p(r)))}var s={};m("ES5",{J:function(n,r){var e=Array.isArray(n),i=function(n,r){if(n){for(var e=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(e,""+i,t(i,!0));return e}var o=rn(r);delete o[Q];for(var u=nn(o),a=0;a<u.length;a++){var f=u[a];o[f]=t(f,n||!!o[f].enumerable)}return Object.create(Object.getPrototypeOf(r),o)}(e,n),o={i:e?5:4,A:r?r.A:_(),P:!1,I:!1,D:{},l:r,t:n,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,Q,{value:o,writable:!0}),i},S:function(n,t,o){o?r(t)&&t[Q].A===n&&e(n.p):(n.u&&function n(r){if(r&&"object"==typeof r){var t=r[Q];if(t){var e=t.t,o=t.k,f=t.D,c=t.i;if(4===c)i(o,(function(r){r!==Q&&(void 0!==e[r]||u(e,r)?f[r]||n(o[r]):(f[r]=!0,k(t)))})),i(e,(function(n){void 0!==o[n]||u(o,n)||(f[n]=!1,k(t))}));else if(5===c){if(a(t)&&(k(t),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)o.hasOwnProperty(l)||(f[l]=!0),void 0===f[l]&&n(o[l])}}}}(n.p[0]),e(n.p))},K:function(n){return 4===n.i?o(n):a(n)}})}function T(){function e(n){if(!t(n))return n;if(Array.isArray(n))return n.map(e);if(s(n))return new Map(Array.from(n.entries()).map((function(n){return[n[0],e(n[1])]})));if(v(n))return new Set(Array.from(n).map(e));var r=Object.create(Object.getPrototypeOf(n));for(var i in n)r[i]=e(n[i]);return u(n,L)&&(r[L]=n[L]),r}function f(n){return r(n)?e(n):n}var c="add";m("Patches",{$:function(r,t){return t.forEach((function(t){for(var i=t.path,u=t.op,f=r,s=0;s<i.length-1;s++){var v=o(f),p=""+i[s];0!==v&&1!==v||"__proto__"!==p&&"constructor"!==p||n(24),"function"==typeof f&&"prototype"===p&&n(24),"object"!=typeof(f=a(f,p))&&n(15,i.join("/"))}var l=o(f),d=e(t.value),h=i[i.length-1];switch(u){case"replace":switch(l){case 2:return f.set(h,d);case 3:n(16);default:return f[h]=d}case c:switch(l){case 1:return"-"===h?f.push(d):f.splice(h,0,d);case 2:return f.set(h,d);case 3:return f.add(d);default:return f[h]=d}case"remove":switch(l){case 1:return f.splice(h,1);case 2:return f.delete(h);case 3:return f.delete(t.value);default:return delete f[h]}default:n(17,u)}})),r},R:function(n,r,t,e){switch(n.i){case 0:case 4:case 2:return function(n,r,t,e){var o=n.t,s=n.o;i(n.D,(function(n,i){var v=a(o,n),p=a(s,n),l=i?u(o,n)?"replace":c:"remove";if(v!==p||"replace"!==l){var d=r.concat(n);t.push("remove"===l?{op:l,path:d}:{op:l,path:d,value:p}),e.push(l===c?{op:"remove",path:d}:"remove"===l?{op:c,path:d,value:f(v)}:{op:"replace",path:d,value:f(v)})}}))}(n,r,t,e);case 5:case 1:return function(n,r,t,e){var i=n.t,o=n.D,u=n.o;if(u.length<i.length){var a=[u,i];i=a[0],u=a[1];var s=[e,t];t=s[0],e=s[1]}for(var v=0;v<i.length;v++)if(o[v]&&u[v]!==i[v]){var p=r.concat([v]);t.push({op:"replace",path:p,value:f(u[v])}),e.push({op:"replace",path:p,value:f(i[v])})}for(var l=i.length;l<u.length;l++){var d=r.concat([l]);t.push({op:c,path:d,value:f(u[l])})}i.length<u.length&&e.push({op:"replace",path:r.concat(["length"]),value:i.length})}(n,r,t,e);case 3:return function(n,r,t,e){var i=n.t,o=n.o,u=0;i.forEach((function(n){if(!o.has(n)){var i=r.concat([u]);t.push({op:"remove",path:i,value:n}),e.unshift({op:c,path:i,value:n})}u++})),u=0,o.forEach((function(n){if(!i.has(n)){var o=r.concat([u]);t.push({op:c,path:o,value:n}),e.unshift({op:"remove",path:o,value:n})}u++}))}(n,r,t,e)}},M:function(n,r,t,e){t.push({op:"replace",path:[],value:r===H?void 0:r}),e.push({op:"replace",path:[],value:n})}})}function C(){function r(n,r){function t(){this.constructor=n}a(n,r),n.prototype=(t.prototype=r.prototype,new t)}function e(n){n.o||(n.D=new Map,n.o=new Map(n.t))}function o(n){n.o||(n.o=new Set,n.t.forEach((function(r){if(t(r)){var e=R(n.A.h,r,n);n.p.set(r,e),n.o.add(e)}else n.o.add(r)})))}function u(r){r.O&&n(3,JSON.stringify(p(r)))}var a=function(n,r){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,r){n.__proto__=r}||function(n,r){for(var t in r)r.hasOwnProperty(t)&&(n[t]=r[t])})(n,r)},f=function(){function n(n,r){return this[Q]={i:2,l:r,A:r?r.A:_(),P:!1,I:!1,o:void 0,D:void 0,t:n,k:this,C:!1,O:!1},this}r(n,Map);var o=n.prototype;return Object.defineProperty(o,"size",{get:function(){return p(this[Q]).size}}),o.has=function(n){return p(this[Q]).has(n)},o.set=function(n,r){var t=this[Q];return u(t),p(t).has(n)&&p(t).get(n)===r||(e(t),k(t),t.D.set(n,!0),t.o.set(n,r),t.D.set(n,!0)),this},o.delete=function(n){if(!this.has(n))return!1;var r=this[Q];return u(r),e(r),k(r),r.t.has(n)?r.D.set(n,!1):r.D.delete(n),r.o.delete(n),!0},o.clear=function(){var n=this[Q];u(n),p(n).size&&(e(n),k(n),n.D=new Map,i(n.t,(function(r){n.D.set(r,!1)})),n.o.clear())},o.forEach=function(n,r){var t=this;p(this[Q]).forEach((function(e,i){n.call(r,t.get(i),i,t)}))},o.get=function(n){var r=this[Q];u(r);var i=p(r).get(n);if(r.I||!t(i))return i;if(i!==r.t.get(n))return i;var o=R(r.A.h,i,r);return e(r),r.o.set(n,o),o},o.keys=function(){return p(this[Q]).keys()},o.values=function(){var n,r=this,t=this.keys();return(n={})[V]=function(){return r.values()},n.next=function(){var n=t.next();return n.done?n:{done:!1,value:r.get(n.value)}},n},o.entries=function(){var n,r=this,t=this.keys();return(n={})[V]=function(){return r.entries()},n.next=function(){var n=t.next();if(n.done)return n;var e=r.get(n.value);return{done:!1,value:[n.value,e]}},n},o[V]=function(){return this.entries()},n}(),c=function(){function n(n,r){return this[Q]={i:3,l:r,A:r?r.A:_(),P:!1,I:!1,o:void 0,t:n,k:this,p:new Map,O:!1,C:!1},this}r(n,Set);var t=n.prototype;return Object.defineProperty(t,"size",{get:function(){return p(this[Q]).size}}),t.has=function(n){var r=this[Q];return u(r),r.o?!!r.o.has(n)||!(!r.p.has(n)||!r.o.has(r.p.get(n))):r.t.has(n)},t.add=function(n){var r=this[Q];return u(r),this.has(n)||(o(r),k(r),r.o.add(n)),this},t.delete=function(n){if(!this.has(n))return!1;var r=this[Q];return u(r),o(r),k(r),r.o.delete(n)||!!r.p.has(n)&&r.o.delete(r.p.get(n))},t.clear=function(){var n=this[Q];u(n),p(n).size&&(o(n),k(n),n.o.clear())},t.values=function(){var n=this[Q];return u(n),o(n),n.o.values()},t.entries=function(){var n=this[Q];return u(n),o(n),n.o.entries()},t.keys=function(){return this.values()},t[V]=function(){return this.values()},t.forEach=function(n,r){for(var t=this.values(),e=t.next();!e.done;)n.call(r,e.value,e.value,this),e=t.next()},n}();m("MapSet",{N:function(n,r){return new f(n,r)},T:function(n,r){return new c(n,r)}})}function J(){N(),C(),T()}function K(n){return n}function $(n){return n}var G,U,W="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),X="undefined"!=typeof Map,q="undefined"!=typeof Set,B="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,H=W?Symbol.for("immer-nothing"):((G={})["immer-nothing"]=!0,G),L=W?Symbol.for("immer-draftable"):"__$immer_draftable",Q=W?Symbol.for("immer-state"):"__$immer_state",V="undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator",Y={0:"Illegal state",1:"Immer drafts cannot have computed properties",2:"This object has been frozen and should not be mutated",3:function(n){return"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? "+n},4:"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.",5:"Immer forbids circular references",6:"The first or second argument to `produce` must be a function",7:"The third argument to `produce` must be a function or undefined",8:"First argument to `createDraft` must be a plain object, an array, or an immerable object",9:"First argument to `finishDraft` must be a draft returned by `createDraft`",10:"The given draft is already finalized",11:"Object.defineProperty() cannot be used on an Immer draft",12:"Object.setPrototypeOf() cannot be used on an Immer draft",13:"Immer only supports deleting array indices",14:"Immer only supports setting array indices and the 'length' property",15:function(n){return"Cannot apply patch, path doesn't resolve: "+n},16:'Sets cannot have "replace" patches.',17:function(n){return"Unsupported patch operation: "+n},18:function(n){return"The plugin for '"+n+"' has not been loaded into Immer. To enable the plugin, import and call `enable"+n+"()` when initializing your application."},20:"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available",21:function(n){return"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '"+n+"'"},22:function(n){return"'current' expects a draft, got: "+n},23:function(n){return"'original' expects a draft, got: "+n},24:"Patching reserved attributes like __proto__, prototype and constructor is not allowed"},Z=""+Object.prototype.constructor,nn="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,rn=Object.getOwnPropertyDescriptors||function(n){var r={};return nn(n).forEach((function(t){r[t]=Object.getOwnPropertyDescriptor(n,t)})),r},tn={},en={get:function(n,r){if(r===Q)return n;var e=p(n);if(!u(e,r))return function(n,r,t){var e,i=I(r,t);return i?"value"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,r);var i=e[r];return n.I||!t(i)?i:i===z(n.t,r)?(E(n),n.o[r]=R(n.A.h,i,n)):i},has:function(n,r){return r in p(n)},ownKeys:function(n){return Reflect.ownKeys(p(n))},set:function(n,r,t){var e=I(p(n),r);if(null==e?void 0:e.set)return e.set.call(n.k,t),!0;if(!n.P){var i=z(p(n),r),o=null==i?void 0:i[Q];if(o&&o.t===t)return n.o[r]=t,n.D[r]=!1,!0;if(c(t,i)&&(void 0!==t||u(n.t,r)))return!0;E(n),k(n)}return n.o[r]===t&&"number"!=typeof t&&(void 0!==t||r in n.o)||(n.o[r]=t,n.D[r]=!0,!0)},deleteProperty:function(n,r){return void 0!==z(n.t,r)||r in n.t?(n.D[r]=!1,E(n),k(n)):delete n.D[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var t=p(n),e=Reflect.getOwnPropertyDescriptor(t,r);return e?{writable:!0,configurable:1!==n.i||"length"!==r,enumerable:e.enumerable,value:t[r]}:e},defineProperty:function(){n(11)},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n(12)}},on={};i(en,(function(n,r){on[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)}})),on.deleteProperty=function(r,t){return true&&isNaN(parseInt(t))&&n(13),on.set.call(this,r,t,void 0)},on.set=function(r,t,e){return true&&"length"!==t&&isNaN(parseInt(t))&&n(14),en.set.call(this,r[0],t,e,r[0])};var un=function(){function e(r){var e=this;this.g=B,this.F=!0,this.produce=function(r,i,o){if("function"==typeof r&&"function"!=typeof i){var u=i;i=r;var a=e;return function(n){var r=this;void 0===n&&(n=u);for(var t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var t;return(t=i).call.apply(t,[r,n].concat(e))}))}}var f;if("function"!=typeof i&&n(6),void 0!==o&&"function"!=typeof o&&n(7),t(r)){var c=w(e),s=R(e,r,void 0),v=!0;try{f=i(s),v=!1}finally{v?O(c):g(c)}return"undefined"!=typeof Promise&&f instanceof Promise?f.then((function(n){return j(c,o),P(n,c)}),(function(n){throw O(c),n})):(j(c,o),P(f,c))}if(!r||"object"!=typeof r){if(void 0===(f=i(r))&&(f=r),f===H&&(f=void 0),e.F&&d(f,!0),o){var p=[],l=[];b("Patches").M(r,f,p,l),o(p,l)}return f}n(21,r)},this.produceWithPatches=function(n,r){if("function"==typeof n)return function(r){for(var t=arguments.length,i=Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(i))}))};var t,i,o=e.produce(n,r,(function(n,r){t=n,i=r}));return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(n){return[n,t,i]})):[o,t,i]},"boolean"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),"boolean"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze)}var i=e.prototype;return i.createDraft=function(e){t(e)||n(8),r(e)&&(e=D(e));var i=w(this),o=R(this,e,void 0);return o[Q].C=!0,g(i),o},i.finishDraft=function(r,t){var e=r&&r[Q]; true&&(e&&e.C||n(9),e.I&&n(10));var i=e.A;return j(i,t),P(void 0,i)},i.setAutoFreeze=function(n){this.F=n},i.setUseProxies=function(r){r&&!B&&n(20),this.g=r},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&"replace"===i.op){n=i.value;break}}e>-1&&(t=t.slice(e+1));var o=b("Patches").$;return r(n)?o(n,t):this.produce(n,(function(n){return o(n,t)}))},e}(),an=new un,fn=an.produce,cn=an.produceWithPatches.bind(an),sn=an.setAutoFreeze.bind(an),vn=an.setUseProxies.bind(an),pn=an.applyPatches.bind(an),ln=an.createDraft.bind(an),dn=an.finishDraft.bind(an);/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (fn);
//# sourceMappingURL=immer.esm.js.map


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXp1cmVNb25pdG9yUGx1Z2luLjk5ZGU2ZDM2NWU0MGM2MmY2MTg5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFPLE1BQU1BLFFBQU4sQ0FBd0I7RUFLN0JDLFdBQVcsR0FBRztJQUFBOztJQUFBOztJQUFBOztJQUNaLEtBQUtDLE9BQUwsR0FBZUMsU0FBZjtJQUNBLEtBQUtDLE1BQUwsR0FBY0QsU0FBZDtJQUVBLEtBQUtFLE9BQUwsR0FBZSxJQUFJQyxPQUFKLENBQVksQ0FBQ0osT0FBRCxFQUFVRSxNQUFWLEtBQXFCO01BQzlDLEtBQUtGLE9BQUwsR0FBZUEsT0FBZjtNQUNBLEtBQUtFLE1BQUwsR0FBY0EsTUFBZDtJQUNELENBSGMsQ0FBZjtJQUlBRyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxJQUFkO0VBQ0Q7O0FBZDRCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0EvQjtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FDRkE7QUFDQTtBQUVPLE1BQU1DLGdCQUFnQixHQUFHLENBQzlCO0VBQ0VDLFFBQVEsRUFBRSxRQURaO0VBRUVDLFdBQVcsRUFBRSxTQUZmO0VBR0VDLFlBQVksRUFBRTtBQUhoQixDQUQ4QixFQU05QjtFQUNFRixRQUFRLEVBQUUsU0FEWjtFQUVFQyxXQUFXLEVBQUUsV0FGZjtFQUdFQyxZQUFZLEVBQUU7QUFIaEIsQ0FOOEIsRUFXOUI7RUFDRUYsUUFBUSxFQUFFLGdCQURaO0VBRUVDLFdBQVcsRUFBRSxrQkFGZjtFQUdFQyxZQUFZLEVBQUU7QUFIaEIsQ0FYOEIsRUFnQjlCO0VBQ0VGLFFBQVEsRUFBRSxTQURaO0VBRUVDLFdBQVcsRUFBRSxXQUZmO0VBR0VDLFlBQVksRUFBRTtBQUhoQixDQWhCOEIsRUFxQjlCO0VBQ0VGLFFBQVEsRUFBRSxTQURaO0VBRUVDLFdBQVcsRUFBRSxXQUZmO0VBR0VDLFlBQVksRUFBRTtBQUhoQixDQXJCOEIsRUEwQjlCO0VBQ0VGLFFBQVEsRUFBRSxlQURaO0VBRUVDLFdBQVcsRUFBRSxnQkFGZjtFQUdF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Q0FBMEMsSUFBSSxNQUFNLDJFQUEyRSxnQ0FBZ0MsSUFBSSxZQUFZLFFBQVEsWUFBWSw0RUFBNEUscUJBQXFCLGVBQWUsYUFBYSxtQkFBbUIsMkJBQTJCLDhEQUE4RCxjQUFjLCtCQUErQixTQUFTLFFBQVEsdUNBQXVDLDJDQUEyQyxrREFBa0QsSUFBSSx3QkFBd0IsMkNBQTJDLHFDQUFxQyxJQUFJLHVDQUF1QyxRQUFRLEdBQUcsNEVBQTRFLGNBQWMsV0FBVyxtS0FBbUssa0JBQWtCLGlDQUFpQywwQkFBMEIsaUNBQWlDLHdCQUF3Qiw2QkFBNkIsY0FBYyxLQUFtQyw0QkFBNEIsVUFBVSwwQkFBMEIsNkJBQTZCLFNBQVMsNkJBQTZCLHNCQUFzQiw4QkFBOEIsTUFBTSxpQkFBaUIsS0FBSyxLQUFLLFdBQVcsd0NBQXdDLFVBQVUsT0FBTyx1QkFBdUIscUJBQXFCLCtDQUErQyxjQUFjLEdBQUcsR0FBRyx5TUFBeU0saUVBQWUsRUFBRSxFQUF3VztBQUMvempCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvY29yZS91dGlscy9kZWZlcnJlZC50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvYXp1cmVNZXRhZGF0YS9pbmRleC50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvYXp1cmVNZXRhZGF0YS9sb2NhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2F6dXJlTWV0YWRhdGEvbG9nc1Jlc291cmNlVHlwZXMudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2F6dXJlTWV0YWRhdGEvbWV0cmljTmFtZXNwYWNlcy50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvYXp1cmVNZXRhZGF0YS9yZXNvdXJjZVR5cGVzLnRzIiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9henVyZV9sb2dfYW5hbHl0aWNzL2F6dXJlX2xvZ19hbmFseXRpY3NfZGF0YXNvdXJjZS50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvYXp1cmVfbG9nX2FuYWx5dGljcy9yZXNwb25zZV9wYXJzZXIudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2F6dXJlX21vbml0b3IvYXp1cmVfbW9uaXRvcl9kYXRhc291cmNlLnRzIiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9henVyZV9tb25pdG9yL3Jlc3BvbnNlX3BhcnNlci50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvYXp1cmVfbW9uaXRvci91cmxfYnVpbGRlci50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvYXp1cmVfcmVzb3VyY2VfZ3JhcGgvYXp1cmVfcmVzb3VyY2VfZ3JhcGhfZGF0YXNvdXJjZS50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9BcmdRdWVyeUVkaXRvci9BcmdRdWVyeUVkaXRvci50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvQXJnUXVlcnlFZGl0b3IvUXVlcnlGaWVsZC50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvQXJnUXVlcnlFZGl0b3IvaW5kZXgudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL0F6dXJlQ3JlZGVudGlhbHNGb3JtLnRzeCIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9Db25maWdFZGl0b3IudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL0ZpZWxkLnRzeCIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9Mb2dzUXVlcnlFZGl0b3IvRm9ybWF0QXNGaWVsZC50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvTG9nc1F1ZXJ5RWRpdG9yL0xvZ3NRdWVyeUVkaXRvci50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvTG9nc1F1ZXJ5RWRpdG9yL1F1ZXJ5RmllbGQudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL0xvZ3NRdWVyeUVkaXRvci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvTG9nc1F1ZXJ5RWRpdG9yL3NldFF1ZXJ5VmFsdWUudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvTG9nc1F1ZXJ5RWRpdG9yL3VzZU1pZ3JhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvTWV0cmljc1F1ZXJ5RWRpdG9yL0FnZ3JlZ2F0aW9uRmllbGQudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL01ldHJpY3NRdWVyeUVkaXRvci9EaW1lbnNpb25GaWVsZHMudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL01ldHJpY3NRdWVyeUVkaXRvci9MZWdlbmRGb3JtYXRGaWVsZC50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvTWV0cmljc1F1ZXJ5RWRpdG9yL01ldHJpY05hbWVGaWVsZC50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvTWV0cmljc1F1ZXJ5RWRpdG9yL01ldHJpY05hbWVzcGFjZUZpZWxkLnRzeCIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9NZXRyaWNzUXVlcnlFZGl0b3IvTWV0cmljc1F1ZXJ5RWRpdG9yLnRzeCIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9NZXRyaWNzUXVlcnlFZGl0b3IvTmV3RGltZW5zaW9uRmllbGRzLnRzeCIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9NZXRyaWNzUXVlcnlFZGl0b3IvVGltZUdyYWluRmllbGQudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL01ldHJpY3NRdWVyeUVkaXRvci9Ub3BGaWVsZC50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvTWV0cmljc1F1ZXJ5RWRpdG9yL2RhdGFIb29rcy50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9NZXRyaWNzUXVlcnlFZGl0b3Ivc2V0UXVlcnlWYWx1ZS50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9Nb25pdG9yQ29uZmlnLnRzeCIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9RdWVyeUVkaXRvci9RdWVyeUVkaXRvci50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvUXVlcnlFZGl0b3IvUXVlcnlUeXBlRmllbGQudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL1F1ZXJ5RWRpdG9yL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9RdWVyeUVkaXRvci91c2VQcmVwYXJlZFF1ZXJ5LnRzIiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL1F1ZXJ5SGVhZGVyLnRzeCIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9SZXNvdXJjZUZpZWxkL1Jlc291cmNlRmllbGQudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL1Jlc291cmNlRmllbGQvaW5kZXgudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL1Jlc291cmNlUGlja2VyL0VudHJ5SWNvbi50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvUmVzb3VyY2VQaWNrZXIvTmVzdGVkRW50cnkudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL1Jlc291cmNlUGlja2VyL05lc3RlZFJvdy50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvUmVzb3VyY2VQaWNrZXIvUmVzb3VyY2VQaWNrZXIudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL1Jlc291cmNlUGlja2VyL1NlYXJjaC50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvUmVzb3VyY2VQaWNrZXIvaW5kZXgudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL1Jlc291cmNlUGlja2VyL3N0eWxlcy50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9SZXNvdXJjZVBpY2tlci90eXBlcy50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9SZXNvdXJjZVBpY2tlci91dGlscy50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY29tcG9uZW50cy9TcGFjZS50c3giLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2NvbXBvbmVudHMvU3Vic2NyaXB0aW9uRmllbGQudHN4Iiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9jb21wb25lbnRzL1ZhcmlhYmxlRWRpdG9yL1ZhcmlhYmxlRWRpdG9yLnRzeCIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvY3JlZGVudGlhbHMudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2RhdGFzb3VyY2UudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL2dyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm5zLnRzIiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS9sb2dfYW5hbHl0aWNzL3F1ZXJ5c3RyaW5nX2J1aWxkZXIudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL21vZHVsZS50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvcmVzb3VyY2VQaWNrZXIvcmVzb3VyY2VQaWNrZXJEYXRhLnRzIiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS90aW1lX2dyYWluX2NvbnZlcnRlci50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvdHlwZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL3R5cGVzL2xvZ0FuYWx5dGljc01ldGFkYXRhLnRzIiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS90eXBlcy9xdWVyeS50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvdHlwZXMvdHlwZXMudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL3V0aWxzL2NvbW1vbi50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvdXRpbHMvbWlncmF0ZUFubm90YXRpb24udHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uL3B1YmxpYy9hcHAvcGx1Z2lucy9kYXRhc291cmNlL2dyYWZhbmEtYXp1cmUtbW9uaXRvci1kYXRhc291cmNlL3V0aWxzL21pZ3JhdGVRdWVyeS50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvdXRpbHMvdXNlQXN5bmNTdGF0ZS50cyIsIndlYnBhY2s6Ly9ncmFmYW5hLy4vcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvdXRpbHMvdXNlTGFzdEVycm9yLnRzIiwid2VicGFjazovL2dyYWZhbmEvLi9wdWJsaWMvYXBwL3BsdWdpbnMvZGF0YXNvdXJjZS9ncmFmYW5hLWF6dXJlLW1vbml0b3ItZGF0YXNvdXJjZS92YXJpYWJsZXMudHMiLCJ3ZWJwYWNrOi8vZ3JhZmFuYS8uLy55YXJuL2NhY2hlL2ltbWVyLW5wbS05LjAuMTQtMGJhZWQxOWE4ZC0xN2YxMzY1YzA2LnppcC9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbW1lci5lc20ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBEZWZlcnJlZDxUID0gYW55PiB7XG4gIHJlc29sdmU/OiAocmVhc29uOiBUIHwgUHJvbWlzZUxpa2U8VD4pID0+IHZvaWQ7XG4gIHJlamVjdD86IChyZWFzb24/OiBhbnkpID0+IHZvaWQ7XG4gIHByb21pc2U6IFByb21pc2U8VD47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5yZXNvbHZlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmVqZWN0ID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xuICAgIH0pO1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gJy4vbG9jYXRpb25zJztcbmV4cG9ydCAqIGZyb20gJy4vcmVzb3VyY2VUeXBlcyc7XG5leHBvcnQgKiBmcm9tICcuL2xvZ3NSZXNvdXJjZVR5cGVzJztcbmV4cG9ydCAqIGZyb20gJy4vbWV0cmljTmFtZXNwYWNlcyc7XG4iLCIvLyBVbmZvcnR1bmF0ZWx5IHRoaXMgbGlzdCBpcyBtYW51YWxseSBtYWludGFpbmVkIGFzIHRoZXJlJ3Mgbm8gKG5pY2UpIGF1dG9tYXRlZCB3YXkgdG8gZ2V0XG4vLyBkYXRhIGZyb20gQXp1cmUuXG5cbmV4cG9ydCBjb25zdCBsb2NhdGlvbk1ldGFkYXRhID0gW1xuICB7XG4gICAgbG9jYXRpb246ICdlYXN0dXMnLFxuICAgIGRpc3BsYXlOYW1lOiAnRWFzdCBVUycsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdlYXN0dXMyJyxcbiAgICBkaXNwbGF5TmFtZTogJ0Vhc3QgVVMgMicsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdzb3V0aGNlbnRyYWx1cycsXG4gICAgZGlzcGxheU5hbWU6ICdTb3V0aCBDZW50cmFsIFVTJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ3dlc3R1czInLFxuICAgIGRpc3BsYXlOYW1lOiAnV2VzdCBVUyAyJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ3dlc3R1czMnLFxuICAgIGRpc3BsYXlOYW1lOiAnV2VzdCBVUyAzJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2F1c3RyYWxpYWVhc3QnLFxuICAgIGRpc3BsYXlOYW1lOiAnQXVzdHJhbGlhIEVhc3QnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnc291dGhlYXN0YXNpYScsXG4gICAgZGlzcGxheU5hbWU6ICdTb3V0aGVhc3QgQXNpYScsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdub3J0aGV1cm9wZScsXG4gICAgZGlzcGxheU5hbWU6ICdOb3J0aCBFdXJvcGUnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAndWtzb3V0aCcsXG4gICAgZGlzcGxheU5hbWU6ICdVSyBTb3V0aCcsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICd3ZXN0ZXVyb3BlJyxcbiAgICBkaXNwbGF5TmFtZTogJ1dlc3QgRXVyb3BlJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2NlbnRyYWx1cycsXG4gICAgZGlzcGxheU5hbWU6ICdDZW50cmFsIFVTJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ25vcnRoY2VudHJhbHVzJyxcbiAgICBkaXNwbGF5TmFtZTogJ05vcnRoIENlbnRyYWwgVVMnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnd2VzdHVzJyxcbiAgICBkaXNwbGF5TmFtZTogJ1dlc3QgVVMnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnc291dGhhZnJpY2Fub3J0aCcsXG4gICAgZGlzcGxheU5hbWU6ICdTb3V0aCBBZnJpY2EgTm9ydGgnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnY2VudHJhbGluZGlhJyxcbiAgICBkaXNwbGF5TmFtZTogJ0NlbnRyYWwgSW5kaWEnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnZWFzdGFzaWEnLFxuICAgIGRpc3BsYXlOYW1lOiAnRWFzdCBBc2lhJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2phcGFuZWFzdCcsXG4gICAgZGlzcGxheU5hbWU6ICdKYXBhbiBFYXN0JyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2ppb2luZGlhd2VzdCcsXG4gICAgZGlzcGxheU5hbWU6ICdKaW8gSW5kaWEgV2VzdCcsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdrb3JlYWNlbnRyYWwnLFxuICAgIGRpc3BsYXlOYW1lOiAnS29yZWEgQ2VudHJhbCcsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdjYW5hZGFjZW50cmFsJyxcbiAgICBkaXNwbGF5TmFtZTogJ0NhbmFkYSBDZW50cmFsJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2ZyYW5jZWNlbnRyYWwnLFxuICAgIGRpc3BsYXlOYW1lOiAnRnJhbmNlIENlbnRyYWwnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnZ2VybWFueXdlc3RjZW50cmFsJyxcbiAgICBkaXNwbGF5TmFtZTogJ0dlcm1hbnkgV2VzdCBDZW50cmFsJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ25vcndheWVhc3QnLFxuICAgIGRpc3BsYXlOYW1lOiAnTm9yd2F5IEVhc3QnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnc3dpdHplcmxhbmRub3J0aCcsXG4gICAgZGlzcGxheU5hbWU6ICdTd2l0emVybGFuZCBOb3J0aCcsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICd1YWVub3J0aCcsXG4gICAgZGlzcGxheU5hbWU6ICdVQUUgTm9ydGgnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnYnJhemlsc291dGgnLFxuICAgIGRpc3BsYXlOYW1lOiAnQnJhemlsIFNvdXRoJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2NlbnRyYWx1c3N0YWdlJyxcbiAgICBkaXNwbGF5TmFtZTogJ0NlbnRyYWwgVVMgKFN0YWdlKScsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdlYXN0dXNzdGFnZScsXG4gICAgZGlzcGxheU5hbWU6ICdFYXN0IFVTIChTdGFnZSknLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnZWFzdHVzMnN0YWdlJyxcbiAgICBkaXNwbGF5TmFtZTogJ0Vhc3QgVVMgMiAoU3RhZ2UpJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ25vcnRoY2VudHJhbHVzc3RhZ2UnLFxuICAgIGRpc3BsYXlOYW1lOiAnTm9ydGggQ2VudHJhbCBVUyAoU3RhZ2UpJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ3NvdXRoY2VudHJhbHVzc3RhZ2UnLFxuICAgIGRpc3BsYXlOYW1lOiAnU291dGggQ2VudHJhbCBVUyAoU3RhZ2UpJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ3dlc3R1c3N0YWdlJyxcbiAgICBkaXNwbGF5TmFtZTogJ1dlc3QgVVMgKFN0YWdlKScsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICd3ZXN0dXMyc3RhZ2UnLFxuICAgIGRpc3BsYXlOYW1lOiAnV2VzdCBVUyAyIChTdGFnZSknLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnYXNpYScsXG4gICAgZGlzcGxheU5hbWU6ICdBc2lhJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2FzaWFwYWNpZmljJyxcbiAgICBkaXNwbGF5TmFtZTogJ0FzaWEgUGFjaWZpYycsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdhdXN0cmFsaWEnLFxuICAgIGRpc3BsYXlOYW1lOiAnQXVzdHJhbGlhJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2JyYXppbCcsXG4gICAgZGlzcGxheU5hbWU6ICdCcmF6aWwnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnY2FuYWRhJyxcbiAgICBkaXNwbGF5TmFtZTogJ0NhbmFkYScsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdldXJvcGUnLFxuICAgIGRpc3BsYXlOYW1lOiAnRXVyb3BlJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2dsb2JhbCcsXG4gICAgZGlzcGxheU5hbWU6ICdHbG9iYWwnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnaW5kaWEnLFxuICAgIGRpc3BsYXlOYW1lOiAnSW5kaWEnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnamFwYW4nLFxuICAgIGRpc3BsYXlOYW1lOiAnSmFwYW4nLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAndWsnLFxuICAgIGRpc3BsYXlOYW1lOiAnVW5pdGVkIEtpbmdkb20nLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAndW5pdGVkc3RhdGVzJyxcbiAgICBkaXNwbGF5TmFtZTogJ1VuaXRlZCBTdGF0ZXMnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnZWFzdGFzaWFzdGFnZScsXG4gICAgZGlzcGxheU5hbWU6ICdFYXN0IEFzaWEgKFN0YWdlKScsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdzb3V0aGVhc3Rhc2lhc3RhZ2UnLFxuICAgIGRpc3BsYXlOYW1lOiAnU291dGhlYXN0IEFzaWEgKFN0YWdlKScsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICd3ZXN0Y2VudHJhbHVzJyxcbiAgICBkaXNwbGF5TmFtZTogJ1dlc3QgQ2VudHJhbCBVUycsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdzb3V0aGFmcmljYXdlc3QnLFxuICAgIGRpc3BsYXlOYW1lOiAnU291dGggQWZyaWNhIFdlc3QnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnYXVzdHJhbGlhY2VudHJhbCcsXG4gICAgZGlzcGxheU5hbWU6ICdBdXN0cmFsaWEgQ2VudHJhbCcsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdhdXN0cmFsaWFjZW50cmFsMicsXG4gICAgZGlzcGxheU5hbWU6ICdBdXN0cmFsaWEgQ2VudHJhbCAyJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2F1c3RyYWxpYXNvdXRoZWFzdCcsXG4gICAgZGlzcGxheU5hbWU6ICdBdXN0cmFsaWEgU291dGhlYXN0JyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2phcGFud2VzdCcsXG4gICAgZGlzcGxheU5hbWU6ICdKYXBhbiBXZXN0JyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2tvcmVhc291dGgnLFxuICAgIGRpc3BsYXlOYW1lOiAnS29yZWEgU291dGgnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnc291dGhpbmRpYScsXG4gICAgZGlzcGxheU5hbWU6ICdTb3V0aCBJbmRpYScsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICd3ZXN0aW5kaWEnLFxuICAgIGRpc3BsYXlOYW1lOiAnV2VzdCBJbmRpYScsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdjYW5hZGFlYXN0JyxcbiAgICBkaXNwbGF5TmFtZTogJ0NhbmFkYSBFYXN0JyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2ZyYW5jZXNvdXRoJyxcbiAgICBkaXNwbGF5TmFtZTogJ0ZyYW5jZSBTb3V0aCcsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdnZXJtYW55bm9ydGgnLFxuICAgIGRpc3BsYXlOYW1lOiAnR2VybWFueSBOb3J0aCcsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdub3J3YXl3ZXN0JyxcbiAgICBkaXNwbGF5TmFtZTogJ05vcndheSBXZXN0JyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ3N3aXR6ZXJsYW5kd2VzdCcsXG4gICAgZGlzcGxheU5hbWU6ICdTd2l0emVybGFuZCBXZXN0JyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ3Vrd2VzdCcsXG4gICAgZGlzcGxheU5hbWU6ICdVSyBXZXN0JyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ3VhZWNlbnRyYWwnLFxuICAgIGRpc3BsYXlOYW1lOiAnVUFFIENlbnRyYWwnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnYnJhemlsc291dGhlYXN0JyxcbiAgICBkaXNwbGF5TmFtZTogJ0JyYXppbCBTb3V0aGVhc3QnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnY2hpbmFlYXN0JyxcbiAgICBkaXNwbGF5TmFtZTogJ0NoaW5hIEVlc3QnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnY2hpbmFlYXN0MicsXG4gICAgZGlzcGxheU5hbWU6ICdDaGluYSBFZXN0IDInLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIGxvY2F0aW9uOiAnY2hpbmFub3J0aCcsXG4gICAgZGlzcGxheU5hbWU6ICdDaGluYSBOb3J0aCcsXG4gICAgc3VwcG9ydHNMb2dzOiB0cnVlLFxuICB9LFxuICB7XG4gICAgbG9jYXRpb246ICdjaGluYW5vcnRoMicsXG4gICAgZGlzcGxheU5hbWU6ICdDaGluYSBOb3J0aCAyJyxcbiAgICBzdXBwb3J0c0xvZ3M6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBsb2NhdGlvbjogJ2NoaW5hbm9ydGgzJyxcbiAgICBkaXNwbGF5TmFtZTogJ0NoaW5hIE5vcnRoIDMnLFxuICAgIHN1cHBvcnRzTG9nczogdHJ1ZSxcbiAgfSxcbl07XG5cbmV4cG9ydCBjb25zdCBsb2dzU3VwcG9ydGVkTG9jYXRpb25zS3VzdG8gPSBsb2NhdGlvbk1ldGFkYXRhXG4gIC5maWx0ZXIoKHYpID0+IHYuc3VwcG9ydHNMb2dzKVxuICAubWFwKCh2KSA9PiBgXCIke3YubG9jYXRpb259XCJgKVxuICAuam9pbignLCcpO1xuXG4vLyBPYmplY3QsIGtleWVkIGJ5IGxvY2F0aW9uIElEXG5leHBvcnQgY29uc3QgbG9jYXRpb25EaXNwbGF5TmFtZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSBsb2NhdGlvbk1ldGFkYXRhLnJlZHVjZShcbiAgKGFjYywgbG9jYXRpb24pID0+ICh7XG4gICAgLi4uYWNjLFxuICAgIFtsb2NhdGlvbi5sb2NhdGlvbl06IGxvY2F0aW9uLmRpc3BsYXlOYW1lLFxuICB9KSxcbiAge31cbik7XG4iLCIvKipcblRoaXMgbGlzdCBpcyBvYnRhaW5lZCBwYXJzaW5nIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2F6dXJlLW1vbml0b3IvZXNzZW50aWFscy9yZXNvdXJjZS1sb2dzLWNhdGVnb3JpZXNcblRvIHByb2dyYW1hdGljYWxseSBnZXQgdGhlIGxpc3QsIGV4ZWN1dGUgaW4gdGhlIGJyb3dzZXIgY29uc29sZTpcbiBcbiBjb25zdCBpID0gW107XG4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnKltpZF0nKS5mb3JFYWNoKChlbCkgPT4geyBcbiAgaWYoZWwudGV4dENvbnRlbnQubWF0Y2goL14obWljcm9zb2Z0fE1pY3Jvc29mdHxXYW5kaXNjbykvKSkge1xuICAgIGkucHVzaChlbC50ZXh0Q29udGVudC50b0xvd2VyQ2FzZSgpKVxuICB9fSk7XG4gIGk7XG4gXG5Ob3RlOiBWYWxpZGF0ZSB0aGF0IHRoZSBvdXRwdXQgbWFrZXMgc2Vuc2UsIHRoZSBmb3JtYXQgb2YgdGhlIHBhZ2UgbWF5IGNoYW5nZS5cbiBcblRoYXQgbGlzdCBpcyBub3QgY29tcGxldGUgc28gd2Ugc2hvdWxkIG1lcmdlIGl0IHdpdGggdGhlIG9uZSBiZWxvdy4gWW91IGNhbiBkbyB3aXRoIGEgbm9kZSBjb25zb2xlOlxuIFxuICBjb25zdCB1ID0gcmVxdWlyZSgnbG9kYXNoJylcbiAgY29uc3QgbmV3ID0gW2xpc3QgZnJvbSBhYm92ZV1cbiAgY29uc3QgbG9nc1Jlc291cmNlVHlwZXMgPSBbdGhpcyBsaXN0XVxuICBjb25zb2xlLmRpcih1LnVuaXEobG9nc1Jlc291cmNlVHlwZXMuY29uY2F0KG5ldykpLnNvcnQoKSwgeydtYXhBcnJheUxlbmd0aCc6IG51bGx9KVxuIFxuICovXG5cbmV4cG9ydCBjb25zdCBsb2dzUmVzb3VyY2VUeXBlcyA9IFtcbiAgJ21pY3Jvc29mdC5hYWQvZG9tYWluc2VydmljZXMnLFxuICAnbWljcm9zb2Z0LmFhZGlhbS9henVyZWFkbWV0cmljcycsXG4gICdtaWNyb3NvZnQuYWFkaWFtL3RlbmFudHMnLFxuICAnbWljcm9zb2Z0LmFnZm9vZHBsYXRmb3JtL2Zhcm1iZWF0cycsXG4gICdtaWNyb3NvZnQuYW5hbHlzaXNzZXJ2aWNlcy9zZXJ2ZXJzJyxcbiAgJ21pY3Jvc29mdC5hcGltYW5hZ2VtZW50L3NlcnZpY2UnLFxuICAnbWljcm9zb2Z0LmFwcGNvbmZpZ3VyYXRpb24vY29uZmlndXJhdGlvbnN0b3JlcycsXG4gICdtaWNyb3NvZnQuYXBwcGxhdGZvcm0vc3ByaW5nJyxcbiAgJ21pY3Jvc29mdC5hdHRlc3RhdGlvbi9hdHRlc3RhdGlvbnByb3ZpZGVycycsXG4gICdtaWNyb3NvZnQuYXV0b21hdGlvbi9hdXRvbWF0aW9uYWNjb3VudHMnLFxuICAnbWljcm9zb2Z0LmF1dG9ub21vdXNkZXZlbG9wbWVudHBsYXRmb3JtL2FjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5hdXRvbm9tb3VzZGV2ZWxvcG1lbnRwbGF0Zm9ybS9kYXRhcG9vbHMnLFxuICAnbWljcm9zb2Z0LmF1dG9ub21vdXNkZXZlbG9wbWVudHBsYXRmb3JtL3dvcmtzcGFjZXMnLFxuICAnbWljcm9zb2Z0LmF2cy9wcml2YXRlY2xvdWRzJyxcbiAgJ21pY3Jvc29mdC5henVyZXN0YWNrcmVzb3VyY2Vtb25pdG9yL3N0b3JhZ2VhY2NvdW50bW9uaXRvcicsXG4gICdtaWNyb3NvZnQuYmF0Y2gvYmF0Y2hhY2NvdW50cycsXG4gICdtaWNyb3NvZnQuYmF0Y2hhaS93b3Jrc3BhY2VzJyxcbiAgJ21pY3Jvc29mdC5ibG9ja2NoYWluL2Jsb2NrY2hhaW5tZW1iZXJzJyxcbiAgJ21pY3Jvc29mdC5ibG9ja2NoYWluL2NvcmRhbWVtYmVycycsXG4gICdtaWNyb3NvZnQuYm90c2VydmljZS9ib3RzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuY2FjaGUvcmVkaXMnLFxuICAnbWljcm9zb2Z0LmNhY2hlL3JlZGlzZW50ZXJwcmlzZScsXG4gICdtaWNyb3NvZnQuY2RuL2NkbndlYmFwcGxpY2F0aW9uZmlyZXdhbGxwb2xpY2llcycsXG4gICdtaWNyb3NvZnQuY2RuL3Byb2ZpbGVzJyxcbiAgJ21pY3Jvc29mdC5jZG4vcHJvZmlsZXMvZW5kcG9pbnRzJyxcbiAgJ21pY3Jvc29mdC5jbGFzc2ljY29tcHV0ZS9kb21haW5uYW1lcycsXG4gICdtaWNyb3NvZnQuY2xhc3NpY2NvbXB1dGUvdmlydHVhbG1hY2hpbmVzJyxcbiAgJ21pY3Jvc29mdC5jbGFzc2ljbmV0d29yay9uZXR3b3Jrc2VjdXJpdHlncm91cHMnLFxuICAnbWljcm9zb2Z0LmNsYXNzaWNzdG9yYWdlL3N0b3JhZ2VhY2NvdW50cycsXG4gICdtaWNyb3NvZnQuY29nbml0aXZlc2VydmljZXMvYWNjb3VudHMnLFxuICAnbWljcm9zb2Z0LmNvbW11bmljYXRpb24vY29tbXVuaWNhdGlvbnNlcnZpY2VzJyxcbiAgJ21pY3Jvc29mdC5jb21wdXRlL2Rpc2tzJyxcbiAgJ21pY3Jvc29mdC5jb21wdXRlL3ZpcnR1YWxtYWNoaW5lcycsXG4gICdtaWNyb3NvZnQuY29tcHV0ZS92aXJ0dWFsbWFjaGluZXNjYWxlc2V0cycsXG4gICdtaWNyb3NvZnQuY29ubmVjdGVkY2FjaGUvY2FjaGVub2RlcycsXG4gICdtaWNyb3NvZnQuY29ubmVjdGVkdmVoaWNsZS9wbGF0Zm9ybWFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5jb250YWluZXJpbnN0YW5jZS9jb250YWluZXJncm91cHMnLFxuICAnbWljcm9zb2Z0LmNvbnRhaW5lcnJlZ2lzdHJ5L3JlZ2lzdHJpZXMnLFxuICAnbWljcm9zb2Z0LmNvbnRhaW5lcnNlcnZpY2UvbWFuYWdlZGNsdXN0ZXJzJyxcbiAgJ21pY3Jvc29mdC5jdXN0b21lcmluc2lnaHRzL2h1YnMnLFxuICAnbWljcm9zb2Z0LmN1c3RvbXByb3ZpZGVycy9yZXNvdXJjZXByb3ZpZGVycycsXG4gICdtaWNyb3NvZnQuZDM2NWN1c3RvbWVyaW5zaWdodHMvaW5zdGFuY2VzJyxcbiAgJ21pY3Jvc29mdC5kYXNoYm9hcmQvZ3JhZmFuYScsXG4gICdtaWNyb3NvZnQuZGF0YWJveGVkZ2UvZGF0YWJveGVkZ2VkZXZpY2VzJyxcbiAgJ21pY3Jvc29mdC5kYXRhYnJpY2tzL3dvcmtzcGFjZXMnLFxuICAnbWljcm9zb2Z0LmRhdGFjb2xsYWJvcmF0aW9uL3dvcmtzcGFjZXMnLFxuICAnbWljcm9zb2Z0LmRhdGFmYWN0b3J5L2RhdGFmYWN0b3JpZXMnLFxuICAnbWljcm9zb2Z0LmRhdGFmYWN0b3J5L2ZhY3RvcmllcycsXG4gICdtaWNyb3NvZnQuZGF0YWxha2VhbmFseXRpY3MvYWNjb3VudHMnLFxuICAnbWljcm9zb2Z0LmRhdGFsYWtlc3RvcmUvYWNjb3VudHMnLFxuICAnbWljcm9zb2Z0LmRhdGFzaGFyZS9hY2NvdW50cycsXG4gICdtaWNyb3NvZnQuZGJmb3JtYXJpYWRiL3NlcnZlcnMnLFxuICAnbWljcm9zb2Z0LmRiZm9ybXlzcWwvZmxleGlibGVzZXJ2ZXJzJyxcbiAgJ21pY3Jvc29mdC5kYmZvcm15c3FsL3NlcnZlcnMnLFxuICAnbWljcm9zb2Z0LmRiZm9ycG9zdGdyZXNxbC9mbGV4aWJsZXNlcnZlcnMnLFxuICAnbWljcm9zb2Z0LmRiZm9ycG9zdGdyZXNxbC9zZXJ2ZXJncm91cHN2MicsXG4gICdtaWNyb3NvZnQuZGJmb3Jwb3N0Z3Jlc3FsL3NlcnZlcnMnLFxuICAnbWljcm9zb2Z0LmRiZm9ycG9zdGdyZXNxbC9zZXJ2ZXJzdjInLFxuICAnbWljcm9zb2Z0LmRlc2t0b3B2aXJ0dWFsaXphdGlvbi9hcHBsaWNhdGlvbmdyb3VwcycsXG4gICdtaWNyb3NvZnQuZGVza3RvcHZpcnR1YWxpemF0aW9uL2hvc3Rwb29scycsXG4gICdtaWNyb3NvZnQuZGVza3RvcHZpcnR1YWxpemF0aW9uL3NjYWxpbmdwbGFucycsXG4gICdtaWNyb3NvZnQuZGVza3RvcHZpcnR1YWxpemF0aW9uL3dvcmtzcGFjZXMnLFxuICAnbWljcm9zb2Z0LmRldmljZXMvZWxhc3RpY3Bvb2xzL2lvdGh1YnRlbmFudHMnLFxuICAnbWljcm9zb2Z0LmRldmljZXMvaW90aHVicycsXG4gICdtaWNyb3NvZnQuZGV2aWNlcy9wcm92aXNpb25pbmdzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuZGlnaXRhbHR3aW5zL2RpZ2l0YWx0d2luc2luc3RhbmNlcycsXG4gICdtaWNyb3NvZnQuZG9jdW1lbnRkYi9jYXNzYW5kcmFjbHVzdGVycycsXG4gICdtaWNyb3NvZnQuZG9jdW1lbnRkYi9kYXRhYmFzZWFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5ldmVudGdyaWQvZG9tYWlucycsXG4gICdtaWNyb3NvZnQuZXZlbnRncmlkL3BhcnRuZXJuYW1lc3BhY2VzJyxcbiAgJ21pY3Jvc29mdC5ldmVudGdyaWQvcGFydG5lcnRvcGljcycsXG4gICdtaWNyb3NvZnQuZXZlbnRncmlkL3N5c3RlbXRvcGljcycsXG4gICdtaWNyb3NvZnQuZXZlbnRncmlkL3RvcGljcycsXG4gICdtaWNyb3NvZnQuZXZlbnRodWIvY2x1c3RlcnMnLFxuICAnbWljcm9zb2Z0LmV2ZW50aHViL25hbWVzcGFjZXMnLFxuICAnbWljcm9zb2Z0LmV4cGVyaW1lbnRhdGlvbi9leHBlcmltZW50d29ya3NwYWNlcycsXG4gICdtaWNyb3NvZnQuZmFicmljLmFkbWluL2ZhYnJpY2xvY2F0aW9ucycsXG4gICdtaWNyb3NvZnQuaGRpbnNpZ2h0L2NsdXN0ZXJzJyxcbiAgJ21pY3Jvc29mdC5oZWFsdGhjYXJlYXBpcy9zZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuaGVhbHRoY2FyZWFwaXMvd29ya3NwYWNlcy9kaWNvbXNlcnZpY2VzJyxcbiAgJ21pY3Jvc29mdC5oZWFsdGhjYXJlYXBpcy93b3Jrc3BhY2VzL2ZoaXJzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuaW5zaWdodHMvYXV0b3NjYWxlc2V0dGluZ3MnLFxuICAnbWljcm9zb2Z0Lmluc2lnaHRzL2NvbXBvbmVudHMnLFxuICAnbWljcm9zb2Z0Lmluc2lnaHRzL3FvcycsXG4gICdtaWNyb3NvZnQuaW90Y2VudHJhbC9pb3RhcHBzJyxcbiAgJ21pY3Jvc29mdC5rZXl2YXVsdC9tYW5hZ2VkaHNtcycsXG4gICdtaWNyb3NvZnQua2V5dmF1bHQvdmF1bHRzJyxcbiAgJ21pY3Jvc29mdC5rdWJlcm5ldGVzL2Nvbm5lY3RlZGNsdXN0ZXJzJyxcbiAgJ21pY3Jvc29mdC5rdXN0by9jbHVzdGVycycsXG4gICdtaWNyb3NvZnQubG9naWMvaW50ZWdyYXRpb25hY2NvdW50cycsXG4gICdtaWNyb3NvZnQubG9naWMvaW50ZWdyYXRpb25zZXJ2aWNlZW52aXJvbm1lbnRzJyxcbiAgJ21pY3Jvc29mdC5sb2dpYy93b3JrZmxvd3MnLFxuICAnbWljcm9zb2Z0Lm1hY2hpbmVsZWFybmluZ3NlcnZpY2VzL3dvcmtzcGFjZXMnLFxuICAnbWljcm9zb2Z0Lm1lZGlhL21lZGlhc2VydmljZXMnLFxuICAnbWljcm9zb2Z0Lm1lZGlhL21lZGlhc2VydmljZXMvbGl2ZWV2ZW50cycsXG4gICdtaWNyb3NvZnQubWVkaWEvbWVkaWFzZXJ2aWNlcy9zdHJlYW1pbmdlbmRwb2ludHMnLFxuICAnbWljcm9zb2Z0Lm1lZGlhL3ZpZGVvYW5hbHl6ZXJzJyxcbiAgJ21pY3Jvc29mdC5uZXRhcHAvbmV0YXBwYWNjb3VudHMvY2FwYWNpdHlwb29scycsXG4gICdtaWNyb3NvZnQubmV0YXBwL25ldGFwcGFjY291bnRzL2NhcGFjaXR5cG9vbHMvdm9sdW1lcycsXG4gICdtaWNyb3NvZnQubmV0d29yay9hcHBsaWNhdGlvbmdhdGV3YXlzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL2F6dXJlZmlyZXdhbGxzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL2Jhc3Rpb25ob3N0cycsXG4gICdtaWNyb3NvZnQubmV0d29yay9jb25uZWN0aW9ucycsXG4gICdtaWNyb3NvZnQubmV0d29yay9kbnN6b25lcycsXG4gICdtaWNyb3NvZnQubmV0d29yay9leHByZXNzcm91dGVjaXJjdWl0cycsXG4gICdtaWNyb3NvZnQubmV0d29yay9leHByZXNzcm91dGVnYXRld2F5cycsXG4gICdtaWNyb3NvZnQubmV0d29yay9leHByZXNzcm91dGVwb3J0cycsXG4gICdtaWNyb3NvZnQubmV0d29yay9mcm9udGRvb3JzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL2xvYWRiYWxhbmNlcnMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvbmF0Z2F0ZXdheXMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvbmV0d29ya2ludGVyZmFjZXMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvbmV0d29ya3NlY3VyaXR5Z3JvdXBzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL25ldHdvcmtzZWN1cml0eXBlcmltZXRlcnMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvbmV0d29ya3ZpcnR1YWxhcHBsaWFuY2VzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL25ldHdvcmt3YXRjaGVycycsXG4gICdtaWNyb3NvZnQubmV0d29yay9uZXR3b3Jrd2F0Y2hlcnMvY29ubmVjdGlvbm1vbml0b3JzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL3Ayc3ZwbmdhdGV3YXlzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL3ByaXZhdGVlbmRwb2ludHMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvcHJpdmF0ZWxpbmtzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQubmV0d29yay9wdWJsaWNpcGFkZHJlc3NlcycsXG4gICdtaWNyb3NvZnQubmV0d29yay90cmFmZmljbWFuYWdlcnByb2ZpbGVzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL3ZpcnR1YWxuZXR3b3JrZ2F0ZXdheXMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvdmlydHVhbG5ldHdvcmtzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL3ZwbmdhdGV3YXlzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrZnVuY3Rpb24vYXp1cmV0cmFmZmljY29sbGVjdG9ycycsXG4gICdtaWNyb3NvZnQubm90aWZpY2F0aW9uaHVicy9uYW1lc3BhY2VzJyxcbiAgJ21pY3Jvc29mdC5ub3RpZmljYXRpb25odWJzL25hbWVzcGFjZXMvbm90aWZpY2F0aW9uaHVicycsXG4gICdtaWNyb3NvZnQub3BlbmxvZ2lzdGljc3BsYXRmb3JtL3dvcmtzcGFjZXMnLFxuICAnbWljcm9zb2Z0Lm9wZXJhdGlvbmFsaW5zaWdodHMvd29ya3NwYWNlcycsXG4gICdtaWNyb3NvZnQub3BlcmF0aW9uc21hbmFnZW1lbnQvc29sdXRpb25zJyxcbiAgJ21pY3Jvc29mdC5wZWVyaW5nL3BlZXJpbmdzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQucG93ZXJiaS90ZW5hbnRzJyxcbiAgJ21pY3Jvc29mdC5wb3dlcmJpL3RlbmFudHMvd29ya3NwYWNlcycsXG4gICdtaWNyb3NvZnQucG93ZXJiaWRlZGljYXRlZC9jYXBhY2l0aWVzJyxcbiAgJ21pY3Jvc29mdC5wdXJ2aWV3L2FjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5yZWNvdmVyeXNlcnZpY2VzL3ZhdWx0cycsXG4gICdtaWNyb3NvZnQucmVsYXkvbmFtZXNwYWNlcycsXG4gICdtaWNyb3NvZnQucmVzb3VyY2VzL3N1YnNjcmlwdGlvbnMnLFxuICAnbWljcm9zb2Z0LnJlc291cmNlcy9zdWJzY3JpcHRpb25zL3Jlc291cmNlZ3JvdXBzJyxcbiAgJ21pY3Jvc29mdC5zZWFyY2gvc2VhcmNoc2VydmljZXMnLFxuICAnbWljcm9zb2Z0LnNlY3VyaXR5aW5zaWdodHMvc2V0dGluZ3MnLFxuICAnbWljcm9zb2Z0LnNlcnZpY2VidXMvbmFtZXNwYWNlcycsXG4gICdtaWNyb3NvZnQuc2lnbmFscnNlcnZpY2Uvc2lnbmFscicsXG4gICdtaWNyb3NvZnQuc2lnbmFscnNlcnZpY2Uvd2VicHVic3ViJyxcbiAgJ21pY3Jvc29mdC5zaW5ndWxhcml0eS9hY2NvdW50cycsXG4gICdtaWNyb3NvZnQuc3FsL21hbmFnZWRpbnN0YW5jZXMnLFxuICAnbWljcm9zb2Z0LnNxbC9tYW5hZ2VkaW5zdGFuY2VzL2RhdGFiYXNlcycsXG4gICdtaWNyb3NvZnQuc3FsL3NlcnZlcnMvZGF0YWJhc2VzJyxcbiAgJ21pY3Jvc29mdC5zcWwvc2VydmVycy9lbGFzdGljcG9vbHMnLFxuICAnbWljcm9zb2Z0LnN0b3JhZ2Uvc3RvcmFnZWFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5zdG9yYWdlL3N0b3JhZ2VhY2NvdW50cy9ibG9ic2VydmljZXMnLFxuICAnbWljcm9zb2Z0LnN0b3JhZ2Uvc3RvcmFnZWFjY291bnRzL2ZpbGVzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuc3RvcmFnZS9zdG9yYWdlYWNjb3VudHMvcXVldWVzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuc3RvcmFnZS9zdG9yYWdlYWNjb3VudHMvdGFibGVzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuc3RvcmFnZWNhY2hlL2NhY2hlcycsXG4gICdtaWNyb3NvZnQuc3RvcmFnZXN5bmMvc3RvcmFnZXN5bmNzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuc3RyZWFtYW5hbHl0aWNzL3N0cmVhbWluZ2pvYnMnLFxuICAnbWljcm9zb2Z0LnN5bmFwc2Uvd29ya3NwYWNlcycsXG4gICdtaWNyb3NvZnQuc3luYXBzZS93b3Jrc3BhY2VzL2JpZ2RhdGFwb29scycsXG4gICdtaWNyb3NvZnQuc3luYXBzZS93b3Jrc3BhY2VzL2t1c3RvcG9vbHMnLFxuICAnbWljcm9zb2Z0LnN5bmFwc2Uvd29ya3NwYWNlcy9zY29wZXBvb2xzJyxcbiAgJ21pY3Jvc29mdC5zeW5hcHNlL3dvcmtzcGFjZXMvc3FscG9vbHMnLFxuICAnbWljcm9zb2Z0LnRpbWVzZXJpZXNpbnNpZ2h0cy9lbnZpcm9ubWVudHMnLFxuICAnbWljcm9zb2Z0LnRpbWVzZXJpZXNpbnNpZ2h0cy9lbnZpcm9ubWVudHMvZXZlbnRzb3VyY2VzJyxcbiAgJ21pY3Jvc29mdC52aWRlb2luZGV4ZXIvYWNjb3VudHMnLFxuICAnbWljcm9zb2Z0LnZtd2FyZWNsb3Vkc2ltcGxlL3ZpcnR1YWxtYWNoaW5lcycsXG4gICdtaWNyb3NvZnQud2ViL2hvc3RpbmdlbnZpcm9ubWVudHMnLFxuICAnbWljcm9zb2Z0LndlYi9ob3N0aW5nZW52aXJvbm1lbnRzL3dvcmtlcnBvb2xzJyxcbiAgJ21pY3Jvc29mdC53ZWIvc2VydmVyZmFybXMnLFxuICAnbWljcm9zb2Z0LndlYi9zaXRlcycsXG4gICdtaWNyb3NvZnQud2ViL3NpdGVzL3Nsb3RzJyxcbl07XG4iLCIvKipcblRoaXMgbGlzdCBpcyBvYnRhaW5lZCBwYXJzaW5nIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2F6dXJlLW1vbml0b3IvZXNzZW50aWFscy9tZXRyaWNzLXN1cHBvcnRlZFxuVG8gcHJvZ3JhbWF0aWNhbGx5IGdldCB0aGUgbGlzdCwgZXhlY3V0ZSBpbiB0aGUgYnJvd3NlciBjb25zb2xlOlxuIFxuIGNvbnN0IGkgPSBbXTtcbiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcqW2lkXScpLmZvckVhY2goKGVsKSA9PiB7IFxuICBpZihlbC50ZXh0Q29udGVudC5tYXRjaCgvXihtaWNyb3NvZnR8TWljcm9zb2Z0fFdhbmRpc2NvKS8pKSB7XG4gICAgaS5wdXNoKGVsLnRleHRDb250ZW50KVxuICB9fSk7XG4gIGk7XG4gXG5Ob3RlOiBWYWxpZGF0ZSB0aGF0IHRoZSBvdXRwdXQgbWFrZXMgc2Vuc2UsIHRoZSBmb3JtYXQgb2YgdGhlIHBhZ2UgbWF5IGNoYW5nZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZE1ldHJpY05hbWVzcGFjZXMgPSBbXG4gICdtaWNyb3NvZnQuYWFkaWFtL2F6dXJlQURNZXRyaWNzJyxcbiAgJ01pY3Jvc29mdC5BbmFseXNpc1NlcnZpY2VzL3NlcnZlcnMnLFxuICAnTWljcm9zb2Z0LkFwaU1hbmFnZW1lbnQvc2VydmljZScsXG4gICdNaWNyb3NvZnQuQXBwQ29uZmlndXJhdGlvbi9jb25maWd1cmF0aW9uU3RvcmVzJyxcbiAgJ01pY3Jvc29mdC5BcHBQbGF0Zm9ybS9TcHJpbmcnLFxuICAnTWljcm9zb2Z0LkF1dG9tYXRpb24vYXV0b21hdGlvbkFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5hdnMvcHJpdmF0ZUNsb3VkcycsXG4gICdNaWNyb3NvZnQuQmF0Y2gvYmF0Y2hBY2NvdW50cycsXG4gICdNaWNyb3NvZnQuQmF0Y2hBSS93b3Jrc3BhY2VzJyxcbiAgJ21pY3Jvc29mdC5iaW5nL2FjY291bnRzJyxcbiAgJ01pY3Jvc29mdC5CbG9ja2NoYWluL2Jsb2NrY2hhaW5NZW1iZXJzJyxcbiAgJ21pY3Jvc29mdC5ib3RzZXJ2aWNlL2JvdHNlcnZpY2VzJyxcbiAgJ01pY3Jvc29mdC5DYWNoZS9yZWRpcycsXG4gICdNaWNyb3NvZnQuQ2FjaGUvcmVkaXNFbnRlcnByaXNlJyxcbiAgJ01pY3Jvc29mdC5DZG4vY2Rud2ViYXBwbGljYXRpb25maXJld2FsbHBvbGljaWVzJyxcbiAgJ01pY3Jvc29mdC5DZG4vcHJvZmlsZXMnLFxuICAnTWljcm9zb2Z0LkNsYXNzaWNDb21wdXRlL2RvbWFpbk5hbWVzL3Nsb3RzL3JvbGVzJyxcbiAgJ01pY3Jvc29mdC5DbGFzc2ljQ29tcHV0ZS92aXJ0dWFsTWFjaGluZXMnLFxuICAnTWljcm9zb2Z0LkNsYXNzaWNTdG9yYWdlL3N0b3JhZ2VBY2NvdW50cycsXG4gICdNaWNyb3NvZnQuQ2xhc3NpY1N0b3JhZ2Uvc3RvcmFnZUFjY291bnRzL2Jsb2JTZXJ2aWNlcycsXG4gICdNaWNyb3NvZnQuQ2xhc3NpY1N0b3JhZ2Uvc3RvcmFnZUFjY291bnRzL2ZpbGVTZXJ2aWNlcycsXG4gICdNaWNyb3NvZnQuQ2xhc3NpY1N0b3JhZ2Uvc3RvcmFnZUFjY291bnRzL3F1ZXVlU2VydmljZXMnLFxuICAnTWljcm9zb2Z0LkNsYXNzaWNTdG9yYWdlL3N0b3JhZ2VBY2NvdW50cy90YWJsZVNlcnZpY2VzJyxcbiAgJ01pY3Jvc29mdC5DbG91ZHRlc3QvaG9zdGVkcG9vbHMnLFxuICAnTWljcm9zb2Z0LkNsb3VkdGVzdC9wb29scycsXG4gICdNaWNyb3NvZnQuQ2x1c3RlclN0b3Ivbm9kZXMnLFxuICAnTWljcm9zb2Z0LkNvZ25pdGl2ZVNlcnZpY2VzL2FjY291bnRzJyxcbiAgJ01pY3Jvc29mdC5Db21tdW5pY2F0aW9uL0NvbW11bmljYXRpb25TZXJ2aWNlcycsXG4gICdNaWNyb3NvZnQuQ29tcHV0ZS9jbG91ZFNlcnZpY2VzJyxcbiAgJ01pY3Jvc29mdC5Db21wdXRlL2Nsb3VkU2VydmljZXMvcm9sZXMnLFxuICAnbWljcm9zb2Z0LmNvbXB1dGUvZGlza3MnLFxuICAnTWljcm9zb2Z0LkNvbXB1dGUvdmlydHVhbE1hY2hpbmVzJyxcbiAgJ01pY3Jvc29mdC5Db21wdXRlL3ZpcnR1YWxNYWNoaW5lU2NhbGVTZXRzJyxcbiAgJ01pY3Jvc29mdC5Db21wdXRlL3ZpcnR1YWxNYWNoaW5lU2NhbGVTZXRzL3ZpcnR1YWxNYWNoaW5lcycsXG4gICdNaWNyb3NvZnQuQ29ubmVjdGVkQ2FjaGUvQ2FjaGVOb2RlcycsXG4gICdNaWNyb3NvZnQuQ29ubmVjdGVkVmVoaWNsZS9wbGF0Zm9ybUFjY291bnRzJyxcbiAgJ01pY3Jvc29mdC5Db250YWluZXJJbnN0YW5jZS9jb250YWluZXJHcm91cHMnLFxuICAnTWljcm9zb2Z0LkNvbnRhaW5lclJlZ2lzdHJ5L3JlZ2lzdHJpZXMnLFxuICAnTWljcm9zb2Z0LkNvbnRhaW5lclNlcnZpY2UvbWFuYWdlZENsdXN0ZXJzJyxcbiAgJ01pY3Jvc29mdC5DdXN0b21Qcm92aWRlcnMvcmVzb3VyY2Vwcm92aWRlcnMnLFxuICAnTWljcm9zb2Z0LkRhdGFCb3hFZGdlL2RhdGFCb3hFZGdlRGV2aWNlcycsXG4gICdNaWNyb3NvZnQuRGF0YUNvbGxhYm9yYXRpb24vd29ya3NwYWNlcycsXG4gICdNaWNyb3NvZnQuRGF0YUZhY3RvcnkvZGF0YWZhY3RvcmllcycsXG4gICdNaWNyb3NvZnQuRGF0YUZhY3RvcnkvZmFjdG9yaWVzJyxcbiAgJ01pY3Jvc29mdC5EYXRhTGFrZUFuYWx5dGljcy9hY2NvdW50cycsXG4gICdNaWNyb3NvZnQuRGF0YUxha2VTdG9yZS9hY2NvdW50cycsXG4gICdNaWNyb3NvZnQuRGF0YVNoYXJlL2FjY291bnRzJyxcbiAgJ01pY3Jvc29mdC5EQmZvck1hcmlhREIvc2VydmVycycsXG4gICdNaWNyb3NvZnQuREJmb3JNeVNRTC9mbGV4aWJsZVNlcnZlcnMnLFxuICAnTWljcm9zb2Z0LkRCZm9yTXlTUUwvc2VydmVycycsXG4gICdNaWNyb3NvZnQuREJmb3JQb3N0Z3JlU1FML2ZsZXhpYmxlU2VydmVycycsXG4gICdNaWNyb3NvZnQuREJGb3JQb3N0Z3JlU1FML3NlcnZlckdyb3Vwc3YyJyxcbiAgJ01pY3Jvc29mdC5EQmZvclBvc3RncmVTUUwvc2VydmVycycsXG4gICdNaWNyb3NvZnQuREJmb3JQb3N0Z3JlU1FML3NlcnZlcnN2MicsXG4gICdNaWNyb3NvZnQuRGV2aWNlcy9FbGFzdGljUG9vbHMnLFxuICAnTWljcm9zb2Z0LkRldmljZXMvRWxhc3RpY1Bvb2xzL0lvdEh1YlRlbmFudHMnLFxuICAnTWljcm9zb2Z0LkRldmljZXMvSW90SHVicycsXG4gICdNaWNyb3NvZnQuRGV2aWNlcy9wcm92aXNpb25pbmdTZXJ2aWNlcycsXG4gICdNaWNyb3NvZnQuRGlnaXRhbFR3aW5zL2RpZ2l0YWxUd2luc0luc3RhbmNlcycsXG4gICdNaWNyb3NvZnQuRG9jdW1lbnREQi9jYXNzYW5kcmFDbHVzdGVycycsXG4gICdNaWNyb3NvZnQuRG9jdW1lbnREQi9EYXRhYmFzZUFjY291bnRzJyxcbiAgJ01pY3Jvc29mdC5FdmVudEdyaWQvZG9tYWlucycsXG4gICdNaWNyb3NvZnQuRXZlbnRHcmlkL2V2ZW50U3Vic2NyaXB0aW9ucycsXG4gICdNaWNyb3NvZnQuRXZlbnRHcmlkL2V4dGVuc2lvblRvcGljcycsXG4gICdNaWNyb3NvZnQuRXZlbnRHcmlkL3BhcnRuZXJOYW1lc3BhY2VzJyxcbiAgJ01pY3Jvc29mdC5FdmVudEdyaWQvcGFydG5lclRvcGljcycsXG4gICdNaWNyb3NvZnQuRXZlbnRHcmlkL3N5c3RlbVRvcGljcycsXG4gICdNaWNyb3NvZnQuRXZlbnRHcmlkL3RvcGljcycsXG4gICdNaWNyb3NvZnQuRXZlbnRIdWIvY2x1c3RlcnMnLFxuICAnTWljcm9zb2Z0LkV2ZW50SHViL05hbWVzcGFjZXMnLFxuICAnTWljcm9zb2Z0LkhESW5zaWdodC9jbHVzdGVycycsXG4gICdNaWNyb3NvZnQuSGVhbHRoY2FyZUFwaXMvc2VydmljZXMnLFxuICAnTWljcm9zb2Z0LkhlYWx0aGNhcmVBcGlzL3dvcmtzcGFjZXMvZmhpcnNlcnZpY2VzJyxcbiAgJ01pY3Jvc29mdC5IZWFsdGhjYXJlQXBpcy93b3Jrc3BhY2VzL2lvdGNvbm5lY3RvcnMnLFxuICAnbWljcm9zb2Z0Lmh5YnJpZG5ldHdvcmsvbmV0d29ya2Z1bmN0aW9ucycsXG4gICdtaWNyb3NvZnQuaHlicmlkbmV0d29yay92aXJ0dWFsbmV0d29ya2Z1bmN0aW9ucycsXG4gICdtaWNyb3NvZnQuaW5zaWdodHMvYXV0b3NjYWxlc2V0dGluZ3MnLFxuICAnTWljcm9zb2Z0Lkluc2lnaHRzL0NvbXBvbmVudHMnLFxuICAnTWljcm9zb2Z0LklvVENlbnRyYWwvSW9UQXBwcycsXG4gICdtaWNyb3NvZnQua2V5dmF1bHQvbWFuYWdlZGhzbXMnLFxuICAnTWljcm9zb2Z0LktleVZhdWx0L3ZhdWx0cycsXG4gICdtaWNyb3NvZnQua3ViZXJuZXRlcy9jb25uZWN0ZWRDbHVzdGVycycsXG4gICdNaWNyb3NvZnQuS3VzdG8vQ2x1c3RlcnMnLFxuICAnTWljcm9zb2Z0LkxvZ2ljL2ludGVncmF0aW9uU2VydmljZUVudmlyb25tZW50cycsXG4gICdNaWNyb3NvZnQuTG9naWMvV29ya2Zsb3dzJyxcbiAgJ01pY3Jvc29mdC5NYWNoaW5lTGVhcm5pbmdTZXJ2aWNlcy93b3Jrc3BhY2VzJyxcbiAgJ01pY3Jvc29mdC5NYXBzL2FjY291bnRzJyxcbiAgJ01pY3Jvc29mdC5NZWRpYS9tZWRpYXNlcnZpY2VzJyxcbiAgJ01pY3Jvc29mdC5NZWRpYS9tZWRpYXNlcnZpY2VzL2xpdmVFdmVudHMnLFxuICAnTWljcm9zb2Z0Lk1lZGlhL21lZGlhc2VydmljZXMvc3RyZWFtaW5nRW5kcG9pbnRzJyxcbiAgJ01pY3Jvc29mdC5NZWRpYS92aWRlb2FuYWx5emVycycsXG4gICdNaWNyb3NvZnQuTWl4ZWRSZWFsaXR5L3JlbW90ZVJlbmRlcmluZ0FjY291bnRzJyxcbiAgJ01pY3Jvc29mdC5NaXhlZFJlYWxpdHkvc3BhdGlhbEFuY2hvcnNBY2NvdW50cycsXG4gICdNaWNyb3NvZnQuTmV0QXBwL25ldEFwcEFjY291bnRzL2NhcGFjaXR5UG9vbHMnLFxuICAnTWljcm9zb2Z0Lk5ldEFwcC9uZXRBcHBBY2NvdW50cy9jYXBhY2l0eVBvb2xzL3ZvbHVtZXMnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvYXBwbGljYXRpb25nYXRld2F5cycsXG4gICdNaWNyb3NvZnQuTmV0d29yay9henVyZUZpcmV3YWxscycsXG4gICdtaWNyb3NvZnQubmV0d29yay9iYXN0aW9uSG9zdHMnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvY29ubmVjdGlvbnMnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvZG5zem9uZXMnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvZXhwcmVzc1JvdXRlQ2lyY3VpdHMnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvZXhwcmVzc1JvdXRlQ2lyY3VpdHMvcGVlcmluZ3MnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvZXhwcmVzc1JvdXRlR2F0ZXdheXMnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvZXhwcmVzc1JvdXRlUG9ydHMnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvZnJvbnRkb29ycycsXG4gICdNaWNyb3NvZnQuTmV0d29yay9sb2FkQmFsYW5jZXJzJyxcbiAgJ01pY3Jvc29mdC5OZXR3b3JrL25hdEdhdGV3YXlzJyxcbiAgJ01pY3Jvc29mdC5OZXR3b3JrL25ldHdvcmtJbnRlcmZhY2VzJyxcbiAgJ01pY3Jvc29mdC5OZXR3b3JrL25ldHdvcmtXYXRjaGVycy9jb25uZWN0aW9uTW9uaXRvcnMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvcDJzdnBuZ2F0ZXdheXMnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvcHJpdmF0ZURuc1pvbmVzJyxcbiAgJ01pY3Jvc29mdC5OZXR3b3JrL3ByaXZhdGVFbmRwb2ludHMnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvcHJpdmF0ZUxpbmtTZXJ2aWNlcycsXG4gICdNaWNyb3NvZnQuTmV0d29yay9wdWJsaWNJUEFkZHJlc3NlcycsXG4gICdNaWNyb3NvZnQuTmV0d29yay90cmFmZmljTWFuYWdlclByb2ZpbGVzJyxcbiAgJ01pY3Jvc29mdC5OZXR3b3JrL3ZpcnR1YWxIdWJzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL3ZpcnR1YWxuZXR3b3JrZ2F0ZXdheXMnLFxuICAnTWljcm9zb2Z0Lk5ldHdvcmsvdmlydHVhbE5ldHdvcmtzJyxcbiAgJ01pY3Jvc29mdC5OZXR3b3JrL3ZpcnR1YWxSb3V0ZXJzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL3ZwbmdhdGV3YXlzJyxcbiAgJ01pY3Jvc29mdC5Ob3RpZmljYXRpb25IdWJzL05hbWVzcGFjZXMvTm90aWZpY2F0aW9uSHVicycsXG4gICdNaWNyb3NvZnQuT3BlcmF0aW9uYWxJbnNpZ2h0cy93b3Jrc3BhY2VzJyxcbiAgJ01pY3Jvc29mdC5QZWVyaW5nL3BlZXJpbmdzJyxcbiAgJ01pY3Jvc29mdC5QZWVyaW5nL3BlZXJpbmdTZXJ2aWNlcycsXG4gICdNaWNyb3NvZnQuUG93ZXJCSURlZGljYXRlZC9jYXBhY2l0aWVzJyxcbiAgJ21pY3Jvc29mdC5wdXJ2aWV3L2FjY291bnRzJyxcbiAgJ01pY3Jvc29mdC5SZWNvdmVyeVNlcnZpY2VzL1ZhdWx0cycsXG4gICdNaWNyb3NvZnQuUmVsYXkvbmFtZXNwYWNlcycsXG4gICdtaWNyb3NvZnQucmVzb3VyY2VzL3N1YnNjcmlwdGlvbnMnLFxuICAnTWljcm9zb2Z0LlNlYXJjaC9zZWFyY2hTZXJ2aWNlcycsXG4gICdNaWNyb3NvZnQuU2VydmljZUJ1cy9OYW1lc3BhY2VzJyxcbiAgJ01pY3Jvc29mdC5TaWduYWxSU2VydmljZS9TaWduYWxSJyxcbiAgJ01pY3Jvc29mdC5TaWduYWxSU2VydmljZS9XZWJQdWJTdWInLFxuICAnTWljcm9zb2Z0LlNxbC9tYW5hZ2VkSW5zdGFuY2VzJyxcbiAgJ01pY3Jvc29mdC5TcWwvc2VydmVycy9kYXRhYmFzZXMnLFxuICAnTWljcm9zb2Z0LlNxbC9zZXJ2ZXJzL2VsYXN0aWNQb29scycsXG4gICdNaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMnLFxuICAnTWljcm9zb2Z0LlN0b3JhZ2Uvc3RvcmFnZUFjY291bnRzL2Jsb2JTZXJ2aWNlcycsXG4gICdNaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMvZmlsZVNlcnZpY2VzJyxcbiAgJ01pY3Jvc29mdC5TdG9yYWdlL3N0b3JhZ2VBY2NvdW50cy9xdWV1ZVNlcnZpY2VzJyxcbiAgJ01pY3Jvc29mdC5TdG9yYWdlL3N0b3JhZ2VBY2NvdW50cy90YWJsZVNlcnZpY2VzJyxcbiAgJ01pY3Jvc29mdC5TdG9yYWdlQ2FjaGUvY2FjaGVzJyxcbiAgJ21pY3Jvc29mdC5zdG9yYWdlc3luYy9zdG9yYWdlU3luY1NlcnZpY2VzJyxcbiAgJ01pY3Jvc29mdC5TdHJlYW1BbmFseXRpY3Mvc3RyZWFtaW5nam9icycsXG4gICdNaWNyb3NvZnQuU3luYXBzZS93b3Jrc3BhY2VzJyxcbiAgJ01pY3Jvc29mdC5TeW5hcHNlL3dvcmtzcGFjZXMvYmlnRGF0YVBvb2xzJyxcbiAgJ01pY3Jvc29mdC5TeW5hcHNlL3dvcmtzcGFjZXMva3VzdG9Qb29scycsXG4gICdNaWNyb3NvZnQuU3luYXBzZS93b3Jrc3BhY2VzL3NxbFBvb2xzJyxcbiAgJ01pY3Jvc29mdC5UaW1lU2VyaWVzSW5zaWdodHMvZW52aXJvbm1lbnRzJyxcbiAgJ01pY3Jvc29mdC5UaW1lU2VyaWVzSW5zaWdodHMvZW52aXJvbm1lbnRzL2V2ZW50c291cmNlcycsXG4gICdNaWNyb3NvZnQuVk13YXJlQ2xvdWRTaW1wbGUvdmlydHVhbE1hY2hpbmVzJyxcbiAgJ01pY3Jvc29mdC5XZWIvY29ubmVjdGlvbnMnLFxuICAnTWljcm9zb2Z0LldlYi9ob3N0aW5nRW52aXJvbm1lbnRzJyxcbiAgJ01pY3Jvc29mdC5XZWIvaG9zdGluZ0Vudmlyb25tZW50cy9tdWx0aVJvbGVQb29scycsXG4gICdNaWNyb3NvZnQuV2ViL2hvc3RpbmdFbnZpcm9ubWVudHMvd29ya2VyUG9vbHMnLFxuICAnTWljcm9zb2Z0LldlYi9zZXJ2ZXJmYXJtcycsXG4gICdNaWNyb3NvZnQuV2ViL3NpdGVzJyxcbiAgJ01pY3Jvc29mdC5XZWIvc2l0ZXMvc2xvdHMnLFxuICAnTWljcm9zb2Z0LldlYi9zdGF0aWNTaXRlcycsXG4gICdXYW5kaXNjby5GdXNpb24vbWlncmF0b3JzJyxcbl07XG4iLCIvKipcblRoaXMgbGlzdCBpcyBvYnRhaW5lZCBwYXJzaW5nIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL2F6dXJlL2dvdmVybmFuY2UvcmVzb3VyY2UtZ3JhcGgvcmVmZXJlbmNlL3N1cHBvcnRlZC10YWJsZXMtcmVzb3VyY2VzXG5UbyBwcm9ncmFtYXRpY2FsbHkgZ2V0IHRoZSBsaXN0LCBleGVjdXRlIGluIHRoZSBicm93c2VyIGNvbnNvbGU6XG4gXG4gY29uc3QgaSA9IHt9O1xuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJykuZm9yRWFjaCgobGkpID0+IHsgXG4gICAgY29uc3QgbSA9IGxpLnRleHRDb250ZW50Lm1hdGNoKC8oLipcXC4uKlxcLy4qPylcXHNcXCgoLiopXFwpLyk7XG4gICAgaWYgKG0pIHtcbiAgICAgIGlbbVsxXS50b0xvd2VyQ2FzZSgpXSA9IG1bMl07XG4gICAgfVxuICB9KTtcbiAgaTtcbiBcbk5vdGU6IFZhbGlkYXRlIHRoYXQgdGhlIG91dHB1dCBtYWtlcyBzZW5zZSwgdGhlIGZvcm1hdCBvZiB0aGUgcGFnZSBtYXkgY2hhbmdlLlxuICovXG5leHBvcnQgY29uc3QgcmVzb3VyY2VUeXBlRGlzcGxheU5hbWVzOiB7IFtrOiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgJ21pY3Jvc29mdC5yZWNvdmVyeXNlcnZpY2VzL3ZhdWx0cy9iYWNrdXBmYWJyaWNzL3Byb3RlY3Rpb25jb250YWluZXJzL3Byb3RlY3RlZGl0ZW1zJzogJ0JhY2t1cCBJdGVtcycsXG4gICdtaWNyb3NvZnQucmVzb3VyY2VzL3N1YnNjcmlwdGlvbnMnOiAnU3Vic2NyaXB0aW9ucycsXG4gICdtaWNyb3NvZnQucmVzb3VyY2VzL3N1YnNjcmlwdGlvbnMvcmVzb3VyY2Vncm91cHMnOiAnUmVzb3VyY2UgZ3JvdXBzJyxcbiAgJ2NpdHJpeC5zZXJ2aWNlcy94ZW5hcHBlc3NlbnRpYWxzJzogJ0NpdHJpeCBWaXJ0dWFsIEFwcHMgRXNzZW50aWFscycsXG4gICdjaXRyaXguc2VydmljZXMveGVuZGVza3RvcGVzc2VudGlhbHMnOiAnQ2l0cml4IFZpcnR1YWwgRGVza3RvcHMgRXNzZW50aWFscycsXG4gICdkeW5hdHJhY2Uub2JzZXJ2YWJpbGl0eS9tb25pdG9ycyc6ICdEeW5hdHJhY2UnLFxuICAnZ2l0aHViLmVudGVycHJpc2UvYWNjb3VudHMnOiAnR2l0SHViIEFFJyxcbiAgJ21pY3Jvc29mdC5hYWQvZG9tYWluc2VydmljZXMnOiAnQXp1cmUgQUQgRG9tYWluIFNlcnZpY2VzJyxcbiAgJ21pY3Jvc29mdC5hYWRpYW0vcHJpdmF0ZWxpbmtmb3JhenVyZWFkJzogJ1ByaXZhdGUgTGluayBmb3IgQXp1cmUgQUQnLFxuICAnbWljcm9zb2Z0LmFnZm9vZHBsYXRmb3JtL2Zhcm1iZWF0cyc6ICdBenVyZSBGYXJtQmVhdHMnLFxuICAnbWljcm9zb2Z0LmFuYWx5c2lzc2VydmljZXMvc2VydmVycyc6ICdBbmFseXNpcyBTZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuYW55YnVpbGQvY2x1c3RlcnMnOiAnQW55QnVpbGQgY2x1c3RlcnMnLFxuICAnbWljcm9zb2Z0LmFwaW1hbmFnZW1lbnQvc2VydmljZSc6ICdBUEkgTWFuYWdlbWVudCBzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuYXBwY29uZmlndXJhdGlvbi9jb25maWd1cmF0aW9uc3RvcmVzJzogJ0FwcCBDb25maWd1cmF0aW9uJyxcbiAgJ21pY3Jvc29mdC5hcHBwbGF0Zm9ybS9zcHJpbmcnOiAnQXp1cmUgU3ByaW5nIENsb3VkJyxcbiAgJ21pY3Jvc29mdC5hdHRlc3RhdGlvbi9hdHRlc3RhdGlvbnByb3ZpZGVycyc6ICdBdHRlc3RhdGlvbiBwcm92aWRlcnMnLFxuICAnbWljcm9zb2Z0LmF1dGhvcml6YXRpb24vcmVzb3VyY2VtYW5hZ2VtZW50cHJpdmF0ZWxpbmtzJzogJ1Jlc291cmNlIG1hbmFnZW1lbnQgcHJpdmF0ZSBsaW5rcycsXG4gICdtaWNyb3NvZnQuYXV0b21hdGlvbi9hdXRvbWF0aW9uYWNjb3VudHMnOiAnQXV0b21hdGlvbiBBY2NvdW50cycsXG4gICdtaWNyb3NvZnQuYXV0b21hdGlvbi9hdXRvbWF0aW9uYWNjb3VudHMvcnVuYm9va3MnOiAnUnVuYm9vaycsXG4gICdtaWNyb3NvZnQuYXV0b25vbW91c3N5c3RlbXMvd29ya3NwYWNlcyc6ICdCb25zYWknLFxuICAnbWljcm9zb2Z0LmF2cy9wcml2YXRlY2xvdWRzJzogJ0FWUyBQcml2YXRlIGNsb3VkcycsXG4gICdtaWNyb3NvZnQuYXp1cmVhY3RpdmVkaXJlY3RvcnkvYjJjZGlyZWN0b3JpZXMnOiAnQjJDIFRlbmFudHMnLFxuICAnbWljcm9zb2Z0LmF6dXJlYWN0aXZlZGlyZWN0b3J5L2d1ZXN0dXNhZ2VzJzogJ0d1ZXN0IFVzYWdlcycsXG4gICdtaWNyb3NvZnQuYXp1cmVhcmNkYXRhL2RhdGFjb250cm9sbGVycyc6ICdBenVyZSBBcmMgZGF0YSBjb250cm9sbGVycycsXG4gICdtaWNyb3NvZnQuYXp1cmVhcmNkYXRhL3Bvc3RncmVzaW5zdGFuY2VzJzogJ0F6dXJlIEFyYy1lbmFibGVkIFBvc3RncmVTUUwgSHlwZXJzY2FsZSBzZXJ2ZXIgZ3JvdXBzJyxcbiAgJ21pY3Jvc29mdC5henVyZWFyY2RhdGEvc3FsbWFuYWdlZGluc3RhbmNlcyc6ICdTUUwgbWFuYWdlZCBpbnN0YW5jZXMgLSBBenVyZSBBcmMnLFxuICAnbWljcm9zb2Z0LmF6dXJlYXJjZGF0YS9zcWxzZXJ2ZXJpbnN0YW5jZXMnOiAnU1FMIFNlcnZlciAtIEF6dXJlIEFyYycsXG4gICdtaWNyb3NvZnQuYXp1cmVkYXRhL3NxbHNlcnZlcnJlZ2lzdHJhdGlvbnMnOiAnU1FMIFNlcnZlciByZWdpc3RyaWVzJyxcbiAgJ21pY3Jvc29mdC5henVyZXBlcmNlcHQvYWNjb3VudHMnOiAnQXp1cmUgUGVyY2VwdCBhY2NvdW50cycsXG4gICdtaWNyb3NvZnQuYXp1cmVzdGFja2hjaS9jbHVzdGVycyc6ICdBenVyZSBTdGFjayBIQ0knLFxuICAnbWljcm9zb2Z0LmF6dXJlc3RhY2toY2kvdmlydHVhbG1hY2hpbmVzJzogJ0F6dXJlIFN0YWNrIEhDSSB2aXJ0dWFsIG1hY2hpbmUgLSBBenVyZSBBcmMnLFxuICAnbWljcm9zb2Z0LmJhcmVtZXRhbC9jcmF5c2VydmVycyc6ICdDcmF5IFNlcnZlcnMnLFxuICAnbWljcm9zb2Z0LmJhcmVtZXRhbC9tb25pdG9yaW5nc2VydmVycyc6ICdNb25pdG9yaW5nIFNlcnZlcnMnLFxuICAnbWljcm9zb2Z0LmJhcmVtZXRhbGluZnJhc3RydWN0dXJlL2JhcmVtZXRhbGluc3RhbmNlcyc6ICdCYXJlTWV0YWwgSW5zdGFuY2VzJyxcbiAgJ21pY3Jvc29mdC5iYXRjaC9iYXRjaGFjY291bnRzJzogJ0JhdGNoIGFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5iaW5nL2FjY291bnRzJzogJ0JpbmcgUmVzb3VyY2VzJyxcbiAgJ21pY3Jvc29mdC5ib3RzZXJ2aWNlL2JvdHNlcnZpY2VzJzogJ0JvdCBTZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuY2FjaGUvcmVkaXMnOiAnQXp1cmUgQ2FjaGUgZm9yIFJlZGlzJyxcbiAgJ21pY3Jvc29mdC5jYWNoZS9yZWRpc2VudGVycHJpc2UnOiAnUmVkaXMgRW50ZXJwcmlzZScsXG4gICdtaWNyb3NvZnQuY2RuL2NkbndlYmFwcGxpY2F0aW9uZmlyZXdhbGxwb2xpY2llcyc6ICdDb250ZW50IERlbGl2ZXJ5IE5ldHdvcmsgV0FGIHBvbGljaWVzJyxcbiAgJ21pY3Jvc29mdC5jZG4vcHJvZmlsZXMgKGZyb250IGRvb3JzIHN0YW5kYXJkL3ByZW1pdW0nOiAnUHJldmlldyknLFxuICAnbWljcm9zb2Z0LmNkbi9wcm9maWxlcy9hZmRlbmRwb2ludHMnOiAnRW5kcG9pbnRzJyxcbiAgJ21pY3Jvc29mdC5jZG4vcHJvZmlsZXMvZW5kcG9pbnRzJzogJ0VuZHBvaW50cycsXG4gICdtaWNyb3NvZnQuY2VydGlmaWNhdGVyZWdpc3RyYXRpb24vY2VydGlmaWNhdGVvcmRlcnMnOiAnQXBwIFNlcnZpY2UgQ2VydGlmaWNhdGVzJyxcbiAgJ21pY3Jvc29mdC5jaGFvcy9jaGFvc2V4cGVyaW1lbnRzJzogJ0NoYW9zIEV4cGVyaW1lbnRzIChDbGFzc2ljKScsXG4gICdtaWNyb3NvZnQuY2hhb3MvZXhwZXJpbWVudHMnOiAnQ2hhb3MgRXhwZXJpbWVudHMnLFxuICAnbWljcm9zb2Z0LmNsYXNzaWNjb21wdXRlL2RvbWFpbm5hbWVzJzogJ0Nsb3VkIHNlcnZpY2VzIChjbGFzc2ljKScsXG4gICdtaWNyb3NvZnQuY2xhc3NpY2NvbXB1dGUvdmlydHVhbG1hY2hpbmVzJzogJ1ZpcnR1YWwgbWFjaGluZXMgKGNsYXNzaWMpJyxcbiAgJ21pY3Jvc29mdC5jbGFzc2ljbmV0d29yay9uZXR3b3Jrc2VjdXJpdHlncm91cHMnOiAnTmV0d29yayBzZWN1cml0eSBncm91cHMgKGNsYXNzaWMpJyxcbiAgJ21pY3Jvc29mdC5jbGFzc2ljbmV0d29yay9yZXNlcnZlZGlwcyc6ICdSZXNlcnZlZCBJUCBhZGRyZXNzZXMgKGNsYXNzaWMpJyxcbiAgJ21pY3Jvc29mdC5jbGFzc2ljbmV0d29yay92aXJ0dWFsbmV0d29ya3MnOiAnVmlydHVhbCBuZXR3b3JrcyAoY2xhc3NpYyknLFxuICAnbWljcm9zb2Z0LmNsYXNzaWNzdG9yYWdlL3N0b3JhZ2VhY2NvdW50cyc6ICdTdG9yYWdlIGFjY291bnRzIChjbGFzc2ljKScsXG4gICdtaWNyb3NvZnQuY2xvdWR0ZXN0L2FjY291bnRzJzogJ0Nsb3VkVGVzdCBBY2NvdW50cycsXG4gICdtaWNyb3NvZnQuY2xvdWR0ZXN0L2hvc3RlZHBvb2xzJzogJzFFUyBIb3N0ZWQgUG9vbHMnLFxuICAnbWljcm9zb2Z0LmNsb3VkdGVzdC9pbWFnZXMnOiAnQ2xvdWRUZXN0IEltYWdlcycsXG4gICdtaWNyb3NvZnQuY2xvdWR0ZXN0L3Bvb2xzJzogJ0Nsb3VkVGVzdCBQb29scycsXG4gICdtaWNyb3NvZnQuY2x1c3RlcnN0b3Ivbm9kZXMnOiAnQ2x1c3RlclN0b3JzJyxcbiAgJ21pY3Jvc29mdC5jb2duaXRpdmVzZXJ2aWNlcy9hY2NvdW50cyc6ICdDb2duaXRpdmUgU2VydmljZXMnLFxuICAnbWljcm9zb2Z0LmNvbXB1dGUvYXZhaWxhYmlsaXR5c2V0cyc6ICdBdmFpbGFiaWxpdHkgc2V0cycsXG4gICdtaWNyb3NvZnQuY29tcHV0ZS9jYXBhY2l0eXJlc2VydmF0aW9uZ3JvdXBzJzogJ0NhcGFjaXR5IFJlc2VydmF0aW9uIEdyb3VwcycsXG4gICdtaWNyb3NvZnQuY29tcHV0ZS9jbG91ZHNlcnZpY2VzJzogJ0Nsb3VkIHNlcnZpY2VzIChleHRlbmRlZCBzdXBwb3J0KScsXG4gICdtaWNyb3NvZnQuY29tcHV0ZS9kaXNrYWNjZXNzZXMnOiAnRGlzayBBY2Nlc3NlcycsXG4gICdtaWNyb3NvZnQuY29tcHV0ZS9kaXNrZW5jcnlwdGlvbnNldHMnOiAnRGlzayBFbmNyeXB0aW9uIFNldHMnLFxuICAnbWljcm9zb2Z0LmNvbXB1dGUvZGlza3MnOiAnRGlza3MnLFxuICAnbWljcm9zb2Z0LmNvbXB1dGUvZ2FsbGVyaWVzJzogJ0F6dXJlIGNvbXB1dGUgZ2FsbGVyaWVzJyxcbiAgJ21pY3Jvc29mdC5jb21wdXRlL2dhbGxlcmllcy9hcHBsaWNhdGlvbnMnOiAnVk0gYXBwbGljYXRpb24gZGVmaW5pdGlvbnMnLFxuICAnbWljcm9zb2Z0LmNvbXB1dGUvZ2FsbGVyaWVzL2FwcGxpY2F0aW9ucy92ZXJzaW9ucyc6ICdWTSBhcHBsaWNhdGlvbiB2ZXJzaW9ucycsXG4gICdtaWNyb3NvZnQuY29tcHV0ZS9nYWxsZXJpZXMvaW1hZ2VzJzogJ1ZNIGltYWdlIGRlZmluaXRpb25zJyxcbiAgJ21pY3Jvc29mdC5jb21wdXRlL2dhbGxlcmllcy9pbWFnZXMvdmVyc2lvbnMnOiAnVk0gaW1hZ2UgdmVyc2lvbnMnLFxuICAnbWljcm9zb2Z0LmNvbXB1dGUvaG9zdGdyb3Vwcyc6ICdIb3N0IGdyb3VwcycsXG4gICdtaWNyb3NvZnQuY29tcHV0ZS9ob3N0Z3JvdXBzL2hvc3RzJzogJ0hvc3RzJyxcbiAgJ21pY3Jvc29mdC5jb21wdXRlL2ltYWdlcyc6ICdJbWFnZXMnLFxuICAnbWljcm9zb2Z0LmNvbXB1dGUvcHJveGltaXR5cGxhY2VtZW50Z3JvdXBzJzogJ1Byb3hpbWl0eSBwbGFjZW1lbnQgZ3JvdXBzJyxcbiAgJ21pY3Jvc29mdC5jb21wdXRlL3Jlc3RvcmVwb2ludGNvbGxlY3Rpb25zJzogJ1Jlc3RvcmUgUG9pbnQgQ29sbGVjdGlvbnMnLFxuICAnbWljcm9zb2Z0LmNvbXB1dGUvc25hcHNob3RzJzogJ1NuYXBzaG90cycsXG4gICdtaWNyb3NvZnQuY29tcHV0ZS9zc2hwdWJsaWNrZXlzJzogJ1NTSCBrZXlzJyxcbiAgJ21pY3Jvc29mdC5jb21wdXRlL3ZpcnR1YWxtYWNoaW5lcyc6ICdWaXJ0dWFsIG1hY2hpbmVzJyxcbiAgJ21pY3Jvc29mdC5jb21wdXRlL3ZpcnR1YWxtYWNoaW5lc2NhbGVzZXRzJzogJ1ZpcnR1YWwgbWFjaGluZSBzY2FsZSBzZXRzJyxcbiAgJ21pY3Jvc29mdC5jb25maWRlbnRpYWxsZWRnZXIvbGVkZ2Vycyc6ICdDb25maWRlbnRpYWwgTGVkZ2VycycsXG4gICdtaWNyb3NvZnQuY29uZmx1ZW50L29yZ2FuaXphdGlvbnMnOiAnQ29uZmx1ZW50IG9yZ2FuaXphdGlvbnMnLFxuICAnbWljcm9zb2Z0LmNvbm5lY3RlZGNhY2hlL2NhY2hlbm9kZXMnOiAnQ29ubmVjdGVkIENhY2hlIFJlc291cmNlcycsXG4gICdtaWNyb3NvZnQuY29ubmVjdGVkY2FjaGUvZW50ZXJwcmlzZWN1c3RvbWVycyc6ICdDb25uZWN0ZWQgQ2FjaGUgUmVzb3VyY2VzJyxcbiAgJ21pY3Jvc29mdC5jb25uZWN0ZWR2ZWhpY2xlL3BsYXRmb3JtYWNjb3VudHMnOiAnQ29ubmVjdGVkIFZlaGljbGUgUGxhdGZvcm1zJyxcbiAgJ21pY3Jvc29mdC5jb25uZWN0ZWR2bXdhcmV2c3BoZXJlL3ZjZW50ZXJzJzogJ1ZNd2FyZSB2Q2VudGVycycsXG4gICdtaWNyb3NvZnQuY29ubmVjdGVkdm13YXJldnNwaGVyZS92aXJ0dWFsbWFjaGluZXMnOiAnVk13YXJlICsgQVZTIHZpcnR1YWwgbWFjaGluZXMnLFxuICAnbWljcm9zb2Z0LmNvbnRhaW5lcmluc3RhbmNlL2NvbnRhaW5lcmdyb3Vwcyc6ICdDb250YWluZXIgaW5zdGFuY2VzJyxcbiAgJ21pY3Jvc29mdC5jb250YWluZXJyZWdpc3RyeS9yZWdpc3RyaWVzJzogJ0NvbnRhaW5lciByZWdpc3RyaWVzJyxcbiAgJ21pY3Jvc29mdC5jb250YWluZXJyZWdpc3RyeS9yZWdpc3RyaWVzL3JlcGxpY2F0aW9ucyc6ICdDb250YWluZXIgcmVnaXN0cnkgcmVwbGljYXRpb25zJyxcbiAgJ21pY3Jvc29mdC5jb250YWluZXJyZWdpc3RyeS9yZWdpc3RyaWVzL3dlYmhvb2tzJzogJ0NvbnRhaW5lciByZWdpc3RyeSB3ZWJob29rcycsXG4gICdtaWNyb3NvZnQuY29udGFpbmVyc2VydmljZS9tYW5hZ2VkY2x1c3RlcnMnOiAnS3ViZXJuZXRlcyBzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuZGFzaGJvYXJkL2dyYWZhbmEnOiAnR3JhZmFuYSBXb3Jrc3BhY2VzJyxcbiAgJ21pY3Jvc29mdC5kYXRhYm94L2pvYnMnOiAnQXp1cmUgRGF0YSBCb3gnLFxuICAnbWljcm9zb2Z0LmRhdGFib3hlZGdlL2RhdGFib3hlZGdlZGV2aWNlcyc6ICdBenVyZSBTdGFjayBFZGdlIC8gRGF0YSBCb3ggR2F0ZXdheScsXG4gICdtaWNyb3NvZnQuZGF0YWJyaWNrcy93b3Jrc3BhY2VzJzogJ0F6dXJlIERhdGFicmlja3MgU2VydmljZXMnLFxuICAnbWljcm9zb2Z0LmRhdGFjYXRhbG9nL2NhdGFsb2dzJzogJ0RhdGEgQ2F0YWxvZycsXG4gICdtaWNyb3NvZnQuZGF0YWNvbGxhYm9yYXRpb24vd29ya3NwYWNlcyc6ICdQcm9qZWN0IENJJyxcbiAgJ21pY3Jvc29mdC5kYXRhZG9nL21vbml0b3JzJzogJ0RhdGFkb2cnLFxuICAnbWljcm9zb2Z0LmRhdGFmYWN0b3J5L2RhdGFmYWN0b3JpZXMnOiAnRGF0YSBmYWN0b3JpZXMnLFxuICAnbWljcm9zb2Z0LmRhdGFmYWN0b3J5L2ZhY3Rvcmllcyc6ICdEYXRhIGZhY3RvcmllcyAoVjIpJyxcbiAgJ21pY3Jvc29mdC5kYXRhbGFrZWFuYWx5dGljcy9hY2NvdW50cyc6ICdEYXRhIExha2UgQW5hbHl0aWNzJyxcbiAgJ21pY3Jvc29mdC5kYXRhbGFrZXN0b3JlL2FjY291bnRzJzogJ0RhdGEgTGFrZSBTdG9yYWdlIEdlbjEnLFxuICAnbWljcm9zb2Z0LmRhdGFtaWdyYXRpb24vc2VydmljZXMnOiAnQXp1cmUgRGF0YWJhc2UgTWlncmF0aW9uIFNlcnZpY2VzJyxcbiAgJ21pY3Jvc29mdC5kYXRhbWlncmF0aW9uL3NlcnZpY2VzL3Byb2plY3RzJzogJ0F6dXJlIERhdGFiYXNlIE1pZ3JhdGlvbiBQcm9qZWN0cycsXG4gICdtaWNyb3NvZnQuZGF0YW1pZ3JhdGlvbi9zcWxtaWdyYXRpb25zZXJ2aWNlcyc6ICdBenVyZSBEYXRhYmFzZSBNaWdyYXRpb24gU2VydmljZXMnLFxuICAnbWljcm9zb2Z0LmRhdGFwcm90ZWN0aW9uL2JhY2t1cHZhdWx0cyc6ICdCYWNrdXAgdmF1bHRzJyxcbiAgJ21pY3Jvc29mdC5kYXRhcHJvdGVjdGlvbi9yZXNvdXJjZWd1YXJkcyc6ICdSZXNvdXJjZSBHdWFyZHMgKFByZXZpZXcpJyxcbiAgJ21pY3Jvc29mdC5kYXRhcmVwbGljYXRpb24vcmVwbGljYXRpb252YXVsdHMnOiAnU2l0ZSBSZWNvdmVyeSBWYXVsdHMnLFxuICAnbWljcm9zb2Z0LmRhdGFzaGFyZS9hY2NvdW50cyc6ICdEYXRhIFNoYXJlcycsXG4gICdtaWNyb3NvZnQuZGJmb3JtYXJpYWRiL3NlcnZlcnMnOiAnQXp1cmUgRGF0YWJhc2UgZm9yIE1hcmlhREIgc2VydmVycycsXG4gICdtaWNyb3NvZnQuZGJmb3JteXNxbC9mbGV4aWJsZXNlcnZlcnMnOiAnQXp1cmUgRGF0YWJhc2UgZm9yIE15U1FMIGZsZXhpYmxlIHNlcnZlcnMnLFxuICAnbWljcm9zb2Z0LmRiZm9ybXlzcWwvc2VydmVycyc6ICdBenVyZSBEYXRhYmFzZSBmb3IgTXlTUUwgc2VydmVycycsXG4gICdtaWNyb3NvZnQuZGJmb3Jwb3N0Z3Jlc3FsL2ZsZXhpYmxlc2VydmVycyc6ICdBenVyZSBEYXRhYmFzZSBmb3IgUG9zdGdyZVNRTCBmbGV4aWJsZSBzZXJ2ZXJzJyxcbiAgJ21pY3Jvc29mdC5kYmZvcnBvc3RncmVzcWwvc2VydmVyZ3JvdXBzJzogJ0F6dXJlIERhdGFiYXNlIGZvciBQb3N0Z3JlU1FMIHNlcnZlciBncm91cHMnLFxuICAnbWljcm9zb2Z0LmRiZm9ycG9zdGdyZXNxbC9zZXJ2ZXJncm91cHN2Mic6ICdBenVyZSBEYXRhYmFzZSBmb3IgUG9zdGdyZVNRTCBzZXJ2ZXIgZ3JvdXBzJyxcbiAgJ21pY3Jvc29mdC5kYmZvcnBvc3RncmVzcWwvc2VydmVycyc6ICdBenVyZSBEYXRhYmFzZSBmb3IgUG9zdGdyZVNRTCBzZXJ2ZXJzJyxcbiAgJ21pY3Jvc29mdC5kYmZvcnBvc3RncmVzcWwvc2VydmVyc3YyJzogJ0F6dXJlIERhdGFiYXNlIGZvciBQb3N0Z3JlU1FMIHNlcnZlcnMgdjInLFxuICAnbWljcm9zb2Z0LmRlcGxveW1lbnRtYW5hZ2VyL3JvbGxvdXRzJzogJ1JvbGxvdXRzJyxcbiAgJ21pY3Jvc29mdC5kZXNrdG9wdmlydHVhbGl6YXRpb24vYXBwbGljYXRpb25ncm91cHMnOiAnQXBwbGljYXRpb24gZ3JvdXBzJyxcbiAgJ21pY3Jvc29mdC5kZXNrdG9wdmlydHVhbGl6YXRpb24vaG9zdHBvb2xzJzogJ0hvc3QgcG9vbHMnLFxuICAnbWljcm9zb2Z0LmRlc2t0b3B2aXJ0dWFsaXphdGlvbi9zY2FsaW5ncGxhbnMnOiAnU2NhbGluZyBwbGFucycsXG4gICdtaWNyb3NvZnQuZGVza3RvcHZpcnR1YWxpemF0aW9uL3dvcmtzcGFjZXMnOiAnV29ya3NwYWNlcycsXG4gICdtaWNyb3NvZnQuZGV2aWNlcy9pb3RodWJzJzogJ0lvVCBIdWInLFxuICAnbWljcm9zb2Z0LmRldmljZXMvcHJvdmlzaW9uaW5nc2VydmljZXMnOiAnRGV2aWNlIFByb3Zpc2lvbmluZyBTZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuZGV2aWNldXBkYXRlL2FjY291bnRzJzogJ0RldmljZSBVcGRhdGUgZm9yIElvVCBIdWJzJyxcbiAgJ21pY3Jvc29mdC5kZXZvcHMvcGlwZWxpbmVzJzogJ0Rldk9wcyBTdGFydGVyJyxcbiAgJ21pY3Jvc29mdC5kZXZ0ZXN0bGFiL2xhYnMnOiAnRGV2VGVzdCBMYWJzJyxcbiAgJ21pY3Jvc29mdC5kZXZ0ZXN0bGFiL2xhYnMvdmlydHVhbG1hY2hpbmVzJzogJ1ZpcnR1YWwgbWFjaGluZXMnLFxuICAnbWljcm9zb2Z0LmRpZ2l0YWx0d2lucy9kaWdpdGFsdHdpbnNpbnN0YW5jZXMnOiAnQXp1cmUgRGlnaXRhbCBUd2lucycsXG4gICdtaWNyb3NvZnQuZG9jdW1lbnRkYi9jYXNzYW5kcmFjbHVzdGVycyc6ICdBenVyZSBNYW5hZ2VkIEluc3RhbmNlIGZvciBBcGFjaGUgQ2Fzc2FuZHJhJyxcbiAgJ21pY3Jvc29mdC5kb2N1bWVudGRiL2RhdGFiYXNlYWNjb3VudHMnOiAnQXp1cmUgQ29zbW9zIERCIGFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5kb21haW5yZWdpc3RyYXRpb24vZG9tYWlucyc6ICdBcHAgU2VydmljZSBEb21haW5zJyxcbiAgJ21pY3Jvc29mdC5lZGdlb3JkZXIvYWRkcmVzc2VzJzogJ0F6dXJlIEVkZ2UgSGFyZHdhcmUgQ2VudGVyIEFkZHJlc3MnLFxuICAnbWljcm9zb2Z0LmVkZ2VvcmRlci9vcmRlcml0ZW1zJzogJ0F6dXJlIEVkZ2UgSGFyZHdhcmUgQ2VudGVyJyxcbiAgJ21pY3Jvc29mdC5lbGFzdGljL21vbml0b3JzJzogJ0VsYXN0aWNzZWFyY2ggKEVsYXN0aWMgQ2xvdWQpJyxcbiAgJ21pY3Jvc29mdC5ldmVudGdyaWQvZG9tYWlucyc6ICdFdmVudCBHcmlkIERvbWFpbnMnLFxuICAnbWljcm9zb2Z0LmV2ZW50Z3JpZC9wYXJ0bmVybmFtZXNwYWNlcyc6ICdFdmVudCBHcmlkIFBhcnRuZXIgTmFtZXNwYWNlcycsXG4gICdtaWNyb3NvZnQuZXZlbnRncmlkL3BhcnRuZXJyZWdpc3RyYXRpb25zJzogJ0V2ZW50IEdyaWQgUGFydG5lciBSZWdpc3RyYXRpb25zJyxcbiAgJ21pY3Jvc29mdC5ldmVudGdyaWQvcGFydG5lcnRvcGljcyc6ICdFdmVudCBHcmlkIFBhcnRuZXIgVG9waWNzJyxcbiAgJ21pY3Jvc29mdC5ldmVudGdyaWQvc3lzdGVtdG9waWNzJzogJ0V2ZW50IEdyaWQgU3lzdGVtIFRvcGljcycsXG4gICdtaWNyb3NvZnQuZXZlbnRncmlkL3RvcGljcyc6ICdFdmVudCBHcmlkIFRvcGljcycsXG4gICdtaWNyb3NvZnQuZXZlbnRodWIvY2x1c3RlcnMnOiAnRXZlbnQgSHVicyBDbHVzdGVycycsXG4gICdtaWNyb3NvZnQuZXZlbnRodWIvbmFtZXNwYWNlcyc6ICdFdmVudCBIdWJzIE5hbWVzcGFjZXMnLFxuICAnbWljcm9zb2Z0LmV4cGVyaW1lbnRhdGlvbi9leHBlcmltZW50d29ya3NwYWNlcyc6ICdFeHBlcmltZW50IFdvcmtzcGFjZXMnLFxuICAnbWljcm9zb2Z0LmV4dGVuZGVkbG9jYXRpb24vY3VzdG9tbG9jYXRpb25zJzogJ0N1c3RvbSBsb2NhdGlvbnMnLFxuICAnbWljcm9zb2Z0LmZpZGFsZ28vZGV2Y2VudGVycyc6ICdGaWRhbGdvIERldkNlbnRlcnMnLFxuICAnbWljcm9zb2Z0LmZpZGFsZ28vbmV0d29ya3NldHRpbmdzJzogJ05ldHdvcmsgQ29uZmlndXJhdGlvbnMnLFxuICAnbWljcm9zb2Z0LmZpZGFsZ28vcHJvamVjdHMnOiAnRmlkYWxnbyBQcm9qZWN0cycsXG4gICdtaWNyb3NvZnQuZmlkYWxnby9wcm9qZWN0cy9lbnZpcm9ubWVudHMnOiAnRmlkYWxnbyBFbnZpcm9ubWVudHMnLFxuICAnbWljcm9zb2Z0LmZsdWlkcmVsYXkvZmx1aWRyZWxheXNlcnZlcnMnOiAnRmx1aWQgUmVsYXknLFxuICAnbWljcm9zb2Z0Lmdlbm9taWNzL2FjY291bnRzJzogJ0dlbm9taWNzIGFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5oYW5hb25henVyZS9oYW5haW5zdGFuY2VzJzogJ1NBUCBIQU5BIG9uIEF6dXJlJyxcbiAgJ21pY3Jvc29mdC5oYW5hb25henVyZS9zYXBtb25pdG9ycyc6ICdBenVyZSBNb25pdG9ycyBmb3IgU0FQIFNvbHV0aW9ucycsXG4gICdtaWNyb3NvZnQuaGRpbnNpZ2h0L2NsdXN0ZXJwb29scyc6ICdIREluc2lnaHQgY2x1c3RlciBwb29scycsXG4gICdtaWNyb3NvZnQuaGRpbnNpZ2h0L2NsdXN0ZXJwb29scy9jbHVzdGVycyc6ICdIREluc2lnaHQgZ2VuMiBjbHVzdGVycycsXG4gICdtaWNyb3NvZnQuaGRpbnNpZ2h0L2NsdXN0ZXJwb29scy9jbHVzdGVycy9zZXNzaW9uY2x1c3RlcnMnOiAnSERJbnNpZ2h0IHNlc3Npb24gY2x1c3RlcnMnLFxuICAnbWljcm9zb2Z0LmhkaW5zaWdodC9jbHVzdGVycyc6ICdIREluc2lnaHQgY2x1c3RlcnMnLFxuICAnbWljcm9zb2Z0LmhlYWx0aGJvdC9oZWFsdGhib3RzJzogJ0F6dXJlIEhlYWx0aCBCb3QnLFxuICAnbWljcm9zb2Z0LmhlYWx0aGNhcmVhcGlzL3NlcnZpY2VzJzogJ0F6dXJlIEFQSSBmb3IgRkhJUicsXG4gICdtaWNyb3NvZnQuaGVhbHRoY2FyZWFwaXMvd29ya3NwYWNlcyc6ICdIZWFsdGhjYXJlIEFQSXMgV29ya3NwYWNlcycsXG4gICdtaWNyb3NvZnQuaGVhbHRoY2FyZWFwaXMvd29ya3NwYWNlcy9kaWNvbXNlcnZpY2VzJzogJ0RJQ09NIHNlcnZpY2VzJyxcbiAgJ21pY3Jvc29mdC5oZWFsdGhjYXJlYXBpcy93b3Jrc3BhY2VzL2ZoaXJzZXJ2aWNlcyc6ICdGSElSIHNlcnZpY2VzJyxcbiAgJ21pY3Jvc29mdC5oZWFsdGhjYXJlYXBpcy93b3Jrc3BhY2VzL2lvdGNvbm5lY3RvcnMnOiAnSW9UIGNvbm5lY3RvcnMnLFxuICAnbWljcm9zb2Z0LmhwY3dvcmtiZW5jaC9pbnN0YW5jZXMnOiAnSFBDIFdvcmtiZW5jaGVzIChwcmV2aWV3KScsXG4gICdtaWNyb3NvZnQuaHBjd29ya2JlbmNoL2luc3RhbmNlcy9jaGFtYmVycyc6ICdDaGFtYmVycyAocHJldmlldyknLFxuICAnbWljcm9zb2Z0LmhwY3dvcmtiZW5jaC9pbnN0YW5jZXMvY2hhbWJlcnMvYWNjZXNzcHJvZmlsZXMnOiAnQ2hhbWJlciBQcm9maWxlcyAocHJldmlldyknLFxuICAnbWljcm9zb2Z0LmhwY3dvcmtiZW5jaC9pbnN0YW5jZXMvY2hhbWJlcnMvd29ya2xvYWRzJzogJ0NoYW1iZXIgVk1zIChwcmV2aWV3KScsXG4gICdtaWNyb3NvZnQuaHBjd29ya2JlbmNoL2luc3RhbmNlcy9jb25zb3J0aXVtcyc6ICdDb25zb3J0aXVtcyAocHJldmlldyknLFxuICAnbWljcm9zb2Z0Lmh5YnJpZGNvbXB1dGUvbWFjaGluZXMnOiAnU2VydmVycyAtIEF6dXJlIEFyYycsXG4gICdtaWNyb3NvZnQuaHlicmlkY29tcHV0ZS9wcml2YXRlbGlua3Njb3Blcyc6ICdBenVyZSBBcmMgUHJpdmF0ZSBMaW5rIFNjb3BlcycsXG4gICdtaWNyb3NvZnQuaHlicmlkZGF0YS9kYXRhbWFuYWdlcnMnOiAnU3RvclNpbXBsZSBEYXRhIE1hbmFnZXJzJyxcbiAgJ21pY3Jvc29mdC5oeWJyaWRuZXR3b3JrL2RldmljZXMnOiAnQXp1cmUgTmV0d29yayBGdW5jdGlvbiBNYW5hZ2VyIOKAkyBEZXZpY2VzJyxcbiAgJ21pY3Jvc29mdC5oeWJyaWRuZXR3b3JrL25ldHdvcmtmdW5jdGlvbnMnOiAnQXp1cmUgTmV0d29yayBGdW5jdGlvbiBNYW5hZ2VyIOKAkyBOZXR3b3JrIEZ1bmN0aW9ucycsXG4gICdtaWNyb3NvZnQuaW1wb3J0ZXhwb3J0L2pvYnMnOiAnSW1wb3J0L2V4cG9ydCBqb2JzJyxcbiAgJ21pY3Jvc29mdC5pbnNpZ2h0cy9jb21wb25lbnRzJzogJ0FwcGxpY2F0aW9uIEluc2lnaHRzJyxcbiAgJ21pY3Jvc29mdC5pbnNpZ2h0cy9kYXRhY29sbGVjdGlvbmVuZHBvaW50cyc6ICdEYXRhIGNvbGxlY3Rpb24gZW5kcG9pbnRzJyxcbiAgJ21pY3Jvc29mdC5pbnNpZ2h0cy9kYXRhY29sbGVjdGlvbnJ1bGVzJzogJ0RhdGEgY29sbGVjdGlvbiBydWxlcycsXG4gICdtaWNyb3NvZnQuaW5zaWdodHMvcHJpdmF0ZWxpbmtzY29wZXMnOiAnQXp1cmUgTW9uaXRvciBQcml2YXRlIExpbmsgU2NvcGVzJyxcbiAgJ21pY3Jvc29mdC5pbnNpZ2h0cy93ZWJ0ZXN0cyc6ICdBdmFpbGFiaWxpdHkgdGVzdHMnLFxuICAnbWljcm9zb2Z0Lmluc2lnaHRzL3dvcmtib29rcyc6ICdBenVyZSBXb3JrYm9va3MnLFxuICAnbWljcm9zb2Z0Lmluc2lnaHRzL3dvcmtib29rdGVtcGxhdGVzJzogJ0F6dXJlIFdvcmtib29rIFRlbXBsYXRlcycsXG4gICdtaWNyb3NvZnQuaW90Y2VudHJhbC9pb3RhcHBzJzogJ0lvVCBDZW50cmFsIEFwcGxpY2F0aW9ucycsXG4gICdtaWNyb3NvZnQua2V5dmF1bHQvdmF1bHRzJzogJ0tleSB2YXVsdHMnLFxuICAnbWljcm9zb2Z0Lmt1YmVybmV0ZXMvY29ubmVjdGVkY2x1c3RlcnMnOiAnS3ViZXJuZXRlcyAtIEF6dXJlIEFyYycsXG4gICdtaWNyb3NvZnQua3VzdG8vY2x1c3RlcnMnOiAnQXp1cmUgRGF0YSBFeHBsb3JlciBDbHVzdGVycycsXG4gICdtaWNyb3NvZnQua3VzdG8vY2x1c3RlcnMvZGF0YWJhc2VzJzogJ0F6dXJlIERhdGEgRXhwbG9yZXIgRGF0YWJhc2VzJyxcbiAgJ21pY3Jvc29mdC5sYWJzZXJ2aWNlcy9sYWJhY2NvdW50cyc6ICdMYWIgYWNjb3VudHMnLFxuICAnbWljcm9zb2Z0LmxhYnNlcnZpY2VzL2xhYnBsYW5zJzogJ0xhYiBwbGFucycsXG4gICdtaWNyb3NvZnQubGFic2VydmljZXMvbGFicyc6ICdMYWJzJyxcbiAgJ21pY3Jvc29mdC5sb2FkdGVzdHNlcnZpY2UvbG9hZHRlc3RzJzogJ0F6dXJlIExvYWQgVGVzdGluZycsXG4gICdtaWNyb3NvZnQubG9naWMvaW50ZWdyYXRpb25hY2NvdW50cyc6ICdJbnRlZ3JhdGlvbiBhY2NvdW50cycsXG4gICdtaWNyb3NvZnQubG9naWMvaW50ZWdyYXRpb25zZXJ2aWNlZW52aXJvbm1lbnRzJzogJ0ludGVncmF0aW9uIFNlcnZpY2UgRW52aXJvbm1lbnRzJyxcbiAgJ21pY3Jvc29mdC5sb2dpYy9pbnRlZ3JhdGlvbnNlcnZpY2VlbnZpcm9ubWVudHMvbWFuYWdlZGFwaXMnOiAnTWFuYWdlZCBDb25uZWN0b3InLFxuICAnbWljcm9zb2Z0LmxvZ2ljL3dvcmtmbG93cyc6ICdMb2dpYyBhcHBzJyxcbiAgJ21pY3Jvc29mdC5sb2d6L21vbml0b3JzJzogJ0xvZ3ogbWFpbiBhY2NvdW50JyxcbiAgJ21pY3Jvc29mdC5sb2d6L21vbml0b3JzL2FjY291bnRzJzogJ0xvZ3ogc3ViIGFjY291bnQnLFxuICAnbWljcm9zb2Z0LmxvZ3ovbW9uaXRvcnMvbWV0cmljc3NvdXJjZSc6ICdMb2d6IG1ldHJpY3MgZGF0YSBzb3VyY2UnLFxuICAnbWljcm9zb2Z0Lm1hY2hpbmVsZWFybmluZy9jb21taXRtZW50cGxhbnMnOiAnTWFjaGluZSBMZWFybmluZyBTdHVkaW8gKGNsYXNzaWMpIHdlYiBzZXJ2aWNlIHBsYW5zJyxcbiAgJ21pY3Jvc29mdC5tYWNoaW5lbGVhcm5pbmcvd2Vic2VydmljZXMnOiAnTWFjaGluZSBMZWFybmluZyBTdHVkaW8gKGNsYXNzaWMpIHdlYiBzZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQubWFjaGluZWxlYXJuaW5nL3dvcmtzcGFjZXMnOiAnTWFjaGluZSBMZWFybmluZyBTdHVkaW8gKGNsYXNzaWMpIHdvcmtzcGFjZXMnLFxuICAnbWljcm9zb2Z0Lm1hY2hpbmVsZWFybmluZ3NlcnZpY2VzL3dvcmtzcGFjZXMnOiAnTWFjaGluZSBsZWFybmluZycsXG4gICdtaWNyb3NvZnQubWFjaGluZWxlYXJuaW5nc2VydmljZXMvd29ya3NwYWNlcy9vbmxpbmVlbmRwb2ludHMnOiAnTWFjaGluZSBsZWFybmluZyBvbmxpbmUgZW5kcG9pbnRzJyxcbiAgJ21pY3Jvc29mdC5tYWNoaW5lbGVhcm5pbmdzZXJ2aWNlcy93b3Jrc3BhY2VzL29ubGluZWVuZHBvaW50cy9kZXBsb3ltZW50cyc6ICdNYWNoaW5lIGxlYXJuaW5nIG9ubGluZSBkZXBsb3ltZW50cycsXG4gICdtaWNyb3NvZnQubWFpbnRlbmFuY2UvbWFpbnRlbmFuY2Vjb25maWd1cmF0aW9ucyc6ICdNYWludGVuYW5jZSBDb25maWd1cmF0aW9ucycsXG4gICdtaWNyb3NvZnQubWFuYWdlZGlkZW50aXR5L3VzZXJhc3NpZ25lZGlkZW50aXRpZXMnOiAnTWFuYWdlZCBJZGVudGl0aWVzJyxcbiAgJ21pY3Jvc29mdC5tYXBzL2FjY291bnRzJzogJ0F6dXJlIE1hcHMgQWNjb3VudHMnLFxuICAnbWljcm9zb2Z0Lm1hcHMvYWNjb3VudHMvY3JlYXRvcnMnOiAnQXp1cmUgTWFwcyBDcmVhdG9yIFJlc291cmNlcycsXG4gICdtaWNyb3NvZnQubWVkaWEvbWVkaWFzZXJ2aWNlcyc6ICdNZWRpYSBTZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQubWVkaWEvbWVkaWFzZXJ2aWNlcy9saXZlZXZlbnRzJzogJ0xpdmUgZXZlbnRzJyxcbiAgJ21pY3Jvc29mdC5tZWRpYS9tZWRpYXNlcnZpY2VzL3N0cmVhbWluZ2VuZHBvaW50cyc6ICdTdHJlYW1pbmcgRW5kcG9pbnRzJyxcbiAgJ21pY3Jvc29mdC5tZWRpYS92aWRlb2FuYWx5emVycyc6ICdWaWRlbyBBbmFseXplcnMnLFxuICAnbWljcm9zb2Z0Lm1pZ3JhdGUvcHJvamVjdHMnOiAnTWlncmF0aW9uIHByb2plY3RzJyxcbiAgJ21pY3Jvc29mdC5taXhlZHJlYWxpdHkvb2JqZWN0YW5jaG9yc2FjY291bnRzJzogJ09iamVjdCBBbmNob3JzIEFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5taXhlZHJlYWxpdHkvb2JqZWN0dW5kZXJzdGFuZGluZ2FjY291bnRzJzogJ09iamVjdCBVbmRlcnN0YW5kaW5nIEFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5taXhlZHJlYWxpdHkvcmVtb3RlcmVuZGVyaW5nYWNjb3VudHMnOiAnUmVtb3RlIFJlbmRlcmluZyBBY2NvdW50cycsXG4gICdtaWNyb3NvZnQubWl4ZWRyZWFsaXR5L3NwYXRpYWxhbmNob3JzYWNjb3VudHMnOiAnU3BhdGlhbCBBbmNob3JzIEFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5tb2JpbGVuZXR3b3JrL21vYmlsZW5ldHdvcmtzJzogJ01vYmlsZSBOZXR3b3JrcycsXG4gICdtaWNyb3NvZnQubW9iaWxlbmV0d29yay9tb2JpbGVuZXR3b3Jrcy9kYXRhbmV0d29ya3MnOiAnRGF0YSBOZXR3b3JrcycsXG4gICdtaWNyb3NvZnQubW9iaWxlbmV0d29yay9tb2JpbGVuZXR3b3Jrcy9zZXJ2aWNlcyc6ICdTZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQubW9iaWxlbmV0d29yay9tb2JpbGVuZXR3b3Jrcy9zaW1wb2xpY2llcyc6ICdTaW0gUG9saWNpZXMnLFxuICAnbWljcm9zb2Z0Lm1vYmlsZW5ldHdvcmsvbW9iaWxlbmV0d29ya3Mvc2l0ZXMnOiAnTW9iaWxlIE5ldHdvcmsgU2l0ZXMnLFxuICAnbWljcm9zb2Z0Lm1vYmlsZW5ldHdvcmsvbW9iaWxlbmV0d29ya3Mvc2xpY2VzJzogJ1NsaWNlcycsXG4gICdtaWNyb3NvZnQubW9iaWxlbmV0d29yay9wYWNrZXRjb3JlY29udHJvbHBsYW5lcyc6ICdQYWNrZXQgQ29yZSBDb250cm9sIFBsYW5lcycsXG4gICdtaWNyb3NvZnQubW9iaWxlbmV0d29yay9wYWNrZXRjb3JlY29udHJvbHBsYW5lcy9wYWNrZXRjb3JlZGF0YXBsYW5lcyc6ICdQYWNrZXQgQ29yZSBEYXRhIFBsYW5lcycsXG4gICdtaWNyb3NvZnQubW9iaWxlbmV0d29yay9wYWNrZXRjb3JlY29udHJvbHBsYW5lcy9wYWNrZXRjb3JlZGF0YXBsYW5lcy9hdHRhY2hlZGRhdGFuZXR3b3Jrcyc6ICdBdHRhY2hlZCBEYXRhIE5ldHdvcmtzJyxcbiAgJ21pY3Jvc29mdC5tb2JpbGVuZXR3b3JrL3NpbXMnOiAnU2ltcycsXG4gICdtaWNyb3NvZnQubmV0YXBwL25ldGFwcGFjY291bnRzJzogJ05ldEFwcCBhY2NvdW50cycsXG4gICdtaWNyb3NvZnQubmV0YXBwL25ldGFwcGFjY291bnRzL2NhcGFjaXR5cG9vbHMnOiAnQ2FwYWNpdHkgcG9vbHMnLFxuICAnbWljcm9zb2Z0Lm5ldGFwcC9uZXRhcHBhY2NvdW50cy9jYXBhY2l0eXBvb2xzL3ZvbHVtZXMnOiAnVm9sdW1lcycsXG4gICdtaWNyb3NvZnQubmV0YXBwL25ldGFwcGFjY291bnRzL2NhcGFjaXR5cG9vbHMvdm9sdW1lcy9zbmFwc2hvdHMnOiAnU25hcHNob3RzJyxcbiAgJ21pY3Jvc29mdC5uZXRhcHAvbmV0YXBwYWNjb3VudHMvc25hcHNob3Rwb2xpY2llcyc6ICdTbmFwc2hvdCBwb2xpY2llcycsXG4gICdtaWNyb3NvZnQubmV0d29yay9hcHBsaWNhdGlvbmdhdGV3YXlzJzogJ0FwcGxpY2F0aW9uIGdhdGV3YXlzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL2FwcGxpY2F0aW9uZ2F0ZXdheXdlYmFwcGxpY2F0aW9uZmlyZXdhbGxwb2xpY2llcyc6ICdBcHBsaWNhdGlvbiBHYXRld2F5IFdBRiBwb2xpY2llcycsXG4gICdtaWNyb3NvZnQubmV0d29yay9hcHBsaWNhdGlvbnNlY3VyaXR5Z3JvdXBzJzogJ0FwcGxpY2F0aW9uIHNlY3VyaXR5IGdyb3VwcycsXG4gICdtaWNyb3NvZnQubmV0d29yay9henVyZWZpcmV3YWxscyc6ICdGaXJld2FsbHMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvYmFzdGlvbmhvc3RzJzogJ0Jhc3Rpb25zJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL2Nvbm5lY3Rpb25zJzogJ0Nvbm5lY3Rpb25zJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL2N1c3RvbWlwcHJlZml4ZXMnOiAnQ3VzdG9tIElQIFByZWZpeGVzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL2Rkb3Nwcm90ZWN0aW9ucGxhbnMnOiAnRERvUyBwcm90ZWN0aW9uIHBsYW5zJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL2Ruc2ZvcndhcmRpbmdydWxlc2V0cyc6ICdEbnMgRm9yd2FyZGluZyBSdWxlc2V0cycsXG4gICdtaWNyb3NvZnQubmV0d29yay9kbnNyZXNvbHZlcnMnOiAnRE5TIFByaXZhdGUgUmVzb2x2ZXJzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL2Ruc3pvbmVzJzogJ0ROUyB6b25lcycsXG4gICdtaWNyb3NvZnQubmV0d29yay9leHByZXNzcm91dGVjaXJjdWl0cyc6ICdFeHByZXNzUm91dGUgY2lyY3VpdHMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvZXhwcmVzc3JvdXRlcG9ydHMnOiAnRXhwcmVzc1JvdXRlIERpcmVjdCcsXG4gICdtaWNyb3NvZnQubmV0d29yay9maXJld2FsbHBvbGljaWVzJzogJ0ZpcmV3YWxsIFBvbGljaWVzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL2Zyb250ZG9vcnMnOiAnRnJvbnQgRG9vcnMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvZnJvbnRkb29yd2ViYXBwbGljYXRpb25maXJld2FsbHBvbGljaWVzJzogJ1dlYiBBcHBsaWNhdGlvbiBGaXJld2FsbCBwb2xpY2llcyAoV0FGKScsXG4gICdtaWNyb3NvZnQubmV0d29yay9pcGdyb3Vwcyc6ICdJUCBHcm91cHMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvbG9hZGJhbGFuY2Vycyc6ICdMb2FkIGJhbGFuY2VycycsXG4gICdtaWNyb3NvZnQubmV0d29yay9sb2NhbG5ldHdvcmtnYXRld2F5cyc6ICdMb2NhbCBuZXR3b3JrIGdhdGV3YXlzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL25hdGdhdGV3YXlzJzogJ05BVCBnYXRld2F5cycsXG4gICdtaWNyb3NvZnQubmV0d29yay9uZXR3b3JrZXhwZXJpbWVudHByb2ZpbGVzJzogJ0ludGVybmV0IEFuYWx5emVyIHByb2ZpbGVzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL25ldHdvcmtpbnRlcmZhY2VzJzogJ05ldHdvcmsgaW50ZXJmYWNlcycsXG4gICdtaWNyb3NvZnQubmV0d29yay9uZXR3b3JrbWFuYWdlcnMnOiAnTmV0d29yayBNYW5hZ2VycycsXG4gICdtaWNyb3NvZnQubmV0d29yay9uZXR3b3Jrc2VjdXJpdHlncm91cHMnOiAnTmV0d29yayBzZWN1cml0eSBncm91cHMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvbmV0d29ya3dhdGNoZXJzJzogJ05ldHdvcmsgV2F0Y2hlcnMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvbmV0d29ya3dhdGNoZXJzL2Zsb3dsb2dzJzogJ05TRyBGbG93IExvZ3MnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvcHJpdmF0ZWRuc3pvbmVzJzogJ1ByaXZhdGUgRE5TIHpvbmVzJyxcbiAgJ21pY3Jvc29mdC5uZXR3b3JrL3ByaXZhdGVlbmRwb2ludHMnOiAnUHJpdmF0ZSBlbmRwb2ludHMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvcHJpdmF0ZWxpbmtzZXJ2aWNlcyc6ICdQcml2YXRlIGxpbmsgc2VydmljZXMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvcHVibGljaXBhZGRyZXNzZXMnOiAnUHVibGljIElQIGFkZHJlc3NlcycsXG4gICdtaWNyb3NvZnQubmV0d29yay9wdWJsaWNpcHByZWZpeGVzJzogJ1B1YmxpYyBJUCBQcmVmaXhlcycsXG4gICdtaWNyb3NvZnQubmV0d29yay9yb3V0ZWZpbHRlcnMnOiAnUm91dGUgZmlsdGVycycsXG4gICdtaWNyb3NvZnQubmV0d29yay9yb3V0ZXRhYmxlcyc6ICdSb3V0ZSB0YWJsZXMnLFxuICAnbWljcm9zb2Z0Lm5ldHdvcmsvc2VydmljZWVuZHBvaW50cG9saWNpZXMnOiAnU2VydmljZSBlbmRwb2ludCBwb2xpY2llcycsXG4gICdtaWNyb3NvZnQubmV0d29yay90cmFmZmljbWFuYWdlcnByb2ZpbGVzJzogJ1RyYWZmaWMgTWFuYWdlciBwcm9maWxlcycsXG4gICdtaWNyb3NvZnQubmV0d29yay92aXJ0dWFsbmV0d29ya2dhdGV3YXlzJzogJ1ZpcnR1YWwgbmV0d29yayBnYXRld2F5cycsXG4gICdtaWNyb3NvZnQubmV0d29yay92aXJ0dWFsbmV0d29ya3MnOiAnVmlydHVhbCBuZXR3b3JrcycsXG4gICdtaWNyb3NvZnQubmV0d29yay92aXJ0dWFsd2Fucyc6ICdWaXJ0dWFsIFdBTnMnLFxuICAnbWljcm9zb2Z0Lm5vdGlmaWNhdGlvbmh1YnMvbmFtZXNwYWNlcyc6ICdOb3RpZmljYXRpb24gSHViIE5hbWVzcGFjZXMnLFxuICAnbWljcm9zb2Z0Lm5vdGlmaWNhdGlvbmh1YnMvbmFtZXNwYWNlcy9ub3RpZmljYXRpb25odWJzJzogJ05vdGlmaWNhdGlvbiBIdWJzJyxcbiAgJ21pY3Jvc29mdC5vcGVuZW5lcmd5cGxhdGZvcm0vZW5lcmd5c2VydmljZXMnOiAnUHJvamVjdCBPYWsgRm9yZXN0JyxcbiAgJ21pY3Jvc29mdC5vcGVubG9naXN0aWNzcGxhdGZvcm0vd29ya3NwYWNlcyc6ICdPcGVuIFN1cHBseSBDaGFpbiBQbGF0Zm9ybScsXG4gICdtaWNyb3NvZnQub3BlcmF0aW9uYWxpbnNpZ2h0cy9xdWVyeXBhY2tzJzogJ0xvZyBBbmFseXRpY3MgcXVlcnkgcGFja3MnLFxuICAnbWljcm9zb2Z0Lm9wZXJhdGlvbmFsaW5zaWdodHMvd29ya3NwYWNlcyc6ICdMb2cgQW5hbHl0aWNzIHdvcmtzcGFjZXMnLFxuICAnbWljcm9zb2Z0Lm9wZXJhdGlvbnNtYW5hZ2VtZW50L3NvbHV0aW9ucyc6ICdTb2x1dGlvbnMnLFxuICAnbWljcm9zb2Z0Lm9yYml0YWwvY29udGFjdHByb2ZpbGVzJzogJ0NvbnRhY3QgUHJvZmlsZXMnLFxuICAnbWljcm9zb2Z0Lm9yYml0YWwvZWRnZXNpdGVzJzogJ0VkZ2UgU2l0ZXMnLFxuICAnbWljcm9zb2Z0Lm9yYml0YWwvZ3JvdW5kc3RhdGlvbnMnOiAnR3JvdW5kIFN0YXRpb25zJyxcbiAgJ21pY3Jvc29mdC5vcmJpdGFsL2wyY29ubmVjdGlvbnMnOiAnTDIgQ29ubmVjdGlvbnMnLFxuICAnbWljcm9zb2Z0Lm9yYml0YWwvc3BhY2VjcmFmdHMnOiAnU3BhY2VjcmFmdHMnLFxuICAnbWljcm9zb2Z0LnBlZXJpbmcvcGVlcmluZ3MnOiAnUGVlcmluZ3MnLFxuICAnbWljcm9zb2Z0LnBlZXJpbmcvcGVlcmluZ3NlcnZpY2VzJzogJ1BlZXJpbmcgU2VydmljZXMnLFxuICAnbWljcm9zb2Z0LnBsYXlmYWIvcGxheWVyYWNjb3VudHBvb2xzJzogJ1BsYXlGYWIgcGxheWVyIGFjY291bnQgcG9vbHMnLFxuICAnbWljcm9zb2Z0LnBsYXlmYWIvdGl0bGVzJzogJ1BsYXlGYWIgdGl0bGVzJyxcbiAgJ21pY3Jvc29mdC5wb3J0YWwvZGFzaGJvYXJkcyc6ICdTaGFyZWQgZGFzaGJvYXJkcycsXG4gICdtaWNyb3NvZnQucG93ZXJiaWRlZGljYXRlZC9jYXBhY2l0aWVzJzogJ1Bvd2VyIEJJIEVtYmVkZGVkJyxcbiAgJ21pY3Jvc29mdC5wdXJ2aWV3L2FjY291bnRzJzogJ01pY3Jvc29mdCBQdXJ2aWV3IGFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC5xdWFudHVtL3dvcmtzcGFjZXMnOiAnUXVhbnR1bSBXb3Jrc3BhY2VzJyxcbiAgJ21pY3Jvc29mdC5yZWNvbW1lbmRhdGlvbnNzZXJ2aWNlL2FjY291bnRzJzogJ0ludGVsbGlnZW50IFJlY29tbWVuZGF0aW9ucyBBY2NvdW50cycsXG4gICdtaWNyb3NvZnQucmVjb21tZW5kYXRpb25zc2VydmljZS9hY2NvdW50cy9tb2RlbGluZyc6ICdNb2RlbGluZycsXG4gICdtaWNyb3NvZnQucmVjb21tZW5kYXRpb25zc2VydmljZS9hY2NvdW50cy9zZXJ2aWNlZW5kcG9pbnRzJzogJ1NlcnZpY2UgRW5kcG9pbnRzJyxcbiAgJ21pY3Jvc29mdC5yZWNvdmVyeXNlcnZpY2VzL3ZhdWx0cyc6ICdSZWNvdmVyeSBTZXJ2aWNlcyB2YXVsdHMnLFxuICAnbWljcm9zb2Z0LnJlZGhhdG9wZW5zaGlmdC9vcGVuc2hpZnRjbHVzdGVycyc6ICdBenVyZSBSZWQgSGF0IE9wZW5TaGlmdCcsXG4gICdtaWNyb3NvZnQucmVsYXkvbmFtZXNwYWNlcyc6ICdSZWxheXMnLFxuICAnbWljcm9zb2Z0LnJlc291cmNlY29ubmVjdG9yL2FwcGxpYW5jZXMnOiAnUmVzb3VyY2UgYnJpZGdlcycsXG4gICdtaWNyb3NvZnQucmVzb3VyY2VncmFwaC9xdWVyaWVzJzogJ1Jlc291cmNlIEdyYXBoIHF1ZXJpZXMnLFxuICAnbWljcm9zb2Z0LnJlc291cmNlcy9kZXBsb3ltZW50c2NyaXB0cyc6ICdEZXBsb3ltZW50IFNjcmlwdHMnLFxuICAnbWljcm9zb2Z0LnJlc291cmNlcy90ZW1wbGF0ZXNwZWNzJzogJ1RlbXBsYXRlIHNwZWNzJyxcbiAgJ21pY3Jvc29mdC5zYWFzL2FwcGxpY2F0aW9ucyc6ICdTb2Z0d2FyZSBhcyBhIFNlcnZpY2UgKGNsYXNzaWMpJyxcbiAgJ21pY3Jvc29mdC5zYWFzL3Jlc291cmNlcyc6ICdTYWFTJyxcbiAgJ21pY3Jvc29mdC5zY29tL21hbmFnZWRpbnN0YW5jZXMnOiAnQXF1aWxhIEluc3RhbmNlcycsXG4gICdtaWNyb3NvZnQuc2N2bW0vdmlydHVhbG1hY2hpbmVzJzogJ1NDVk1NIHZpcnR1YWwgbWFjaGluZSAtIEF6dXJlIEFyYycsXG4gICdtaWNyb3NvZnQuc2N2bW0vdm1tc2VydmVycyc6ICdTQ1ZNTSBtYW5hZ2VtZW50IHNlcnZlcnMnLFxuICAnbWljcm9zb2Z0LnNlYXJjaC9zZWFyY2hzZXJ2aWNlcyc6ICdTZWFyY2ggc2VydmljZXMnLFxuICAnbWljcm9zb2Z0LnNlY3VyaXR5ZGV0b25hdGlvbi9jaGFtYmVycyc6ICdTZWN1cml0eSBEZXRvbmF0aW9uIENoYW1iZXJzJyxcbiAgJ21pY3Jvc29mdC5zZXJ2aWNlYnVzL25hbWVzcGFjZXMnOiAnU2VydmljZSBCdXMgTmFtZXNwYWNlcycsXG4gICdtaWNyb3NvZnQuc2VydmljZWZhYnJpYy9jbHVzdGVycyc6ICdTZXJ2aWNlIEZhYnJpYyBjbHVzdGVycycsXG4gICdtaWNyb3NvZnQuc2VydmljZWZhYnJpYy9tYW5hZ2VkY2x1c3RlcnMnOiAnU2VydmljZSBGYWJyaWMgbWFuYWdlZCBjbHVzdGVycycsXG4gICdtaWNyb3NvZnQuc2VydmljZXNodWIvY29ubmVjdG9ycyc6ICdTZXJ2aWNlcyBIdWIgQ29ubmVjdG9ycycsXG4gICdtaWNyb3NvZnQuc2lnbmFscnNlcnZpY2Uvc2lnbmFscic6ICdTaWduYWxSJyxcbiAgJ21pY3Jvc29mdC5zaWduYWxyc2VydmljZS93ZWJwdWJzdWInOiAnV2ViIFB1YlN1YiBTZXJ2aWNlJyxcbiAgJ21pY3Jvc29mdC5zb2x1dGlvbnMvYXBwbGljYXRpb25kZWZpbml0aW9ucyc6ICdTZXJ2aWNlIGNhdGFsb2cgbWFuYWdlZCBhcHBsaWNhdGlvbiBkZWZpbml0aW9ucycsXG4gICdtaWNyb3NvZnQuc29sdXRpb25zL2FwcGxpY2F0aW9ucyc6ICdNYW5hZ2VkIGFwcGxpY2F0aW9ucycsXG4gICdtaWNyb3NvZnQuc3FsL2luc3RhbmNlcG9vbHMnOiAnSW5zdGFuY2UgcG9vbHMnLFxuICAnbWljcm9zb2Z0LnNxbC9tYW5hZ2VkaW5zdGFuY2VzJzogJ1NRTCBtYW5hZ2VkIGluc3RhbmNlcycsXG4gICdtaWNyb3NvZnQuc3FsL21hbmFnZWRpbnN0YW5jZXMvZGF0YWJhc2VzJzogJ01hbmFnZWQgZGF0YWJhc2VzJyxcbiAgJ21pY3Jvc29mdC5zcWwvc2VydmVycyc6ICdTUUwgc2VydmVycycsXG4gICdtaWNyb3NvZnQuc3FsL3NlcnZlcnMvZGF0YWJhc2VzJzogJ1NRTCBkYXRhYmFzZXMnLFxuICAnbWljcm9zb2Z0LnNxbC9zZXJ2ZXJzL2VsYXN0aWNwb29scyc6ICdTUUwgZWxhc3RpYyBwb29scycsXG4gICdtaWNyb3NvZnQuc3FsL3NlcnZlcnMvam9iYWdlbnRzJzogJ0VsYXN0aWMgSm9iIGFnZW50cycsXG4gICdtaWNyb3NvZnQuc3FsL3ZpcnR1YWxjbHVzdGVycyc6ICdWaXJ0dWFsIGNsdXN0ZXJzJyxcbiAgJ21pY3Jvc29mdC5zcWx2aXJ0dWFsbWFjaGluZS9zcWx2aXJ0dWFsbWFjaGluZXMnOiAnU1FMIHZpcnR1YWwgbWFjaGluZXMnLFxuICAnbWljcm9zb2Z0LnN0b3JhZ2Uvc3RvcmFnZWFjY291bnRzJzogJ1N0b3JhZ2UgYWNjb3VudHMnLFxuICAnbWljcm9zb2Z0LnN0b3JhZ2VjYWNoZS9hbWxmaWxlc3lzdGVtcyc6ICdMdXN0cmUgRmlsZSBTeXN0ZW1zJyxcbiAgJ21pY3Jvc29mdC5zdG9yYWdlY2FjaGUvY2FjaGVzJzogJ0hQQyBjYWNoZXMnLFxuICAnbWljcm9zb2Z0LnN0b3JhZ2Vwb29sL2Rpc2twb29scyc6ICdEaXNrIFBvb2xzJyxcbiAgJ21pY3Jvc29mdC5zdG9yYWdlc3luYy9zdG9yYWdlc3luY3NlcnZpY2VzJzogJ1N0b3JhZ2UgU3luYyBTZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQuc3RvcmFnZXN5bmNkZXYvc3RvcmFnZXN5bmNzZXJ2aWNlcyc6ICdTdG9yYWdlIFN5bmMgU2VydmljZXMnLFxuICAnbWljcm9zb2Z0LnN0b3JhZ2VzeW5jaW50L3N0b3JhZ2VzeW5jc2VydmljZXMnOiAnU3RvcmFnZSBTeW5jIFNlcnZpY2VzJyxcbiAgJ21pY3Jvc29mdC5zdG9yc2ltcGxlL21hbmFnZXJzJzogJ1N0b3JTaW1wbGUgRGV2aWNlIE1hbmFnZXJzJyxcbiAgJ21pY3Jvc29mdC5zdHJlYW1hbmFseXRpY3MvY2x1c3RlcnMnOiAnU3RyZWFtIEFuYWx5dGljcyBjbHVzdGVycycsXG4gICdtaWNyb3NvZnQuc3RyZWFtYW5hbHl0aWNzL3N0cmVhbWluZ2pvYnMnOiAnU3RyZWFtIEFuYWx5dGljcyBqb2JzJyxcbiAgJ21pY3Jvc29mdC5zeW5hcHNlL3ByaXZhdGVsaW5raHVicyc6ICdBenVyZSBTeW5hcHNlIEFuYWx5dGljcyAocHJpdmF0ZSBsaW5rIGh1YnMpJyxcbiAgJ21pY3Jvc29mdC5zeW5hcHNlL3dvcmtzcGFjZXMnOiAnQXp1cmUgU3luYXBzZSBBbmFseXRpY3MnLFxuICAnbWljcm9zb2Z0LnN5bmFwc2Uvd29ya3NwYWNlcy9iaWdkYXRhcG9vbHMnOiAnQXBhY2hlIFNwYXJrIHBvb2xzJyxcbiAgJ21pY3Jvc29mdC5zeW5hcHNlL3dvcmtzcGFjZXMva3VzdG9wb29scyc6ICdEYXRhIEV4cGxvcmVyIHBvb2xzIChwcmV2aWV3KScsXG4gICdtaWNyb3NvZnQuc3luYXBzZS93b3Jrc3BhY2VzL3NxbHBvb2xzJzogJ0RlZGljYXRlZCBTUUwgcG9vbHMnLFxuICAnbWljcm9zb2Z0LnRlc3RiYXNlL3Rlc3RiYXNlYWNjb3VudHMnOiAnVGVzdCBCYXNlIEFjY291bnRzJyxcbiAgJ21pY3Jvc29mdC50ZXN0YmFzZS90ZXN0YmFzZWFjY291bnRzL3BhY2thZ2VzJzogJ1Rlc3QgQmFzZSBQYWNrYWdlcycsXG4gICdtaWNyb3NvZnQudGltZXNlcmllc2luc2lnaHRzL2Vudmlyb25tZW50cyc6ICdUaW1lIFNlcmllcyBJbnNpZ2h0cyBlbnZpcm9ubWVudHMnLFxuICAnbWljcm9zb2Z0LnRpbWVzZXJpZXNpbnNpZ2h0cy9lbnZpcm9ubWVudHMvZXZlbnRzb3VyY2VzJzogJ1RpbWUgU2VyaWVzIEluc2lnaHRzIGV2ZW50IHNvdXJjZXMnLFxuICAnbWljcm9zb2Z0LnRpbWVzZXJpZXNpbnNpZ2h0cy9lbnZpcm9ubWVudHMvcmVmZXJlbmNlZGF0YXNldHMnOiAnVGltZSBTZXJpZXMgSW5zaWdodHMgcmVmZXJlbmNlIGRhdGEgc2V0cycsXG4gICdtaWNyb3NvZnQudmlkZW9pbmRleGVyL2FjY291bnRzJzogJ1ZpZGVvIEFuYWx5emVyIGZvciBNZWRpYScsXG4gICdtaWNyb3NvZnQudmlydHVhbG1hY2hpbmVpbWFnZXMvaW1hZ2V0ZW1wbGF0ZXMnOiAnSW1hZ2UgVGVtcGxhdGVzJyxcbiAgJ21pY3Jvc29mdC52aXN1YWxzdHVkaW8vYWNjb3VudCc6ICdBenVyZSBEZXZPcHMgb3JnYW5pemF0aW9ucycsXG4gICdtaWNyb3NvZnQudmlzdWFsc3R1ZGlvL2FjY291bnQvcHJvamVjdCc6ICdEZXZPcHMgU3RhcnRlcicsXG4gICdtaWNyb3NvZnQudm13YXJlY2xvdWRzaW1wbGUvZGVkaWNhdGVkY2xvdWRub2Rlcyc6ICdDbG91ZFNpbXBsZSBOb2RlcycsXG4gICdtaWNyb3NvZnQudm13YXJlY2xvdWRzaW1wbGUvZGVkaWNhdGVkY2xvdWRzZXJ2aWNlcyc6ICdDbG91ZFNpbXBsZSBTZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQudm13YXJlY2xvdWRzaW1wbGUvdmlydHVhbG1hY2hpbmVzJzogJ0Nsb3VkU2ltcGxlIFZpcnR1YWwgTWFjaGluZXMnLFxuICAnbWljcm9zb2Z0LnZzb25saW5lL3BsYW5zJzogJ1Zpc3VhbCBTdHVkaW8gT25saW5lIFBsYW5zJyxcbiAgJ21pY3Jvc29mdC53ZWIvY29ubmVjdGlvbmdhdGV3YXlzJzogJ09uLXByZW1pc2VzIGRhdGEgZ2F0ZXdheXMnLFxuICAnbWljcm9zb2Z0LndlYi9jb25uZWN0aW9ucyc6ICdBUEkgQ29ubmVjdGlvbnMnLFxuICAnbWljcm9zb2Z0LndlYi9jb250YWluZXJhcHBzJzogJ0NvbnRhaW5lciBBcHBzJyxcbiAgJ21pY3Jvc29mdC53ZWIvY3VzdG9tYXBpcyc6ICdMb2dpYyBBcHBzIEN1c3RvbSBDb25uZWN0b3InLFxuICAnbWljcm9zb2Z0LndlYi9ob3N0aW5nZW52aXJvbm1lbnRzJzogJ0FwcCBTZXJ2aWNlIEVudmlyb25tZW50cycsXG4gICdtaWNyb3NvZnQud2ViL2t1YmVlbnZpcm9ubWVudHMnOiAnQXBwIFNlcnZpY2UgS3ViZXJuZXRlcyBFbnZpcm9ubWVudHMnLFxuICAnbWljcm9zb2Z0LndlYi9zZXJ2ZXJmYXJtcyc6ICdBcHAgU2VydmljZSBwbGFucycsXG4gICdtaWNyb3NvZnQud2ViL3NpdGVzJzogJ0FwcCBTZXJ2aWNlcycsXG4gICdtaWNyb3NvZnQud2ViL3NpdGVzL3Nsb3RzJzogJ0FwcCBTZXJ2aWNlIChTbG90cyknLFxuICAnbWljcm9zb2Z0LndlYi9zdGF0aWNzaXRlcyc6ICdTdGF0aWMgV2ViIEFwcHMnLFxuICAnbWljcm9zb2Z0LndpbmRvd3Nlc3UvbXVsdGlwbGVhY3RpdmF0aW9ua2V5cyc6ICdXaW5kb3dzIE11bHRpcGxlIEFjdGl2YXRpb24gS2V5cycsXG4gICdtaWNyb3NvZnQud2luZG93c2lvdC9kZXZpY2VzZXJ2aWNlcyc6ICdXaW5kb3dzIDEwIElvVCBDb3JlIFNlcnZpY2VzJyxcbiAgJ21pY3Jvc29mdC53b3JrbG9hZHMvbW9uaXRvcnMnOiAnQXp1cmUgTW9uaXRvcnMgZm9yIFNBUCBTb2x1dGlvbnMgKHYyKScsXG4gICdtaWNyb3NvZnQud29ya2xvYWRzL3BocHdvcmtsb2Fkcyc6ICdTY2FsYWJsZSBXb3JkUHJlc3Mgb24gTGludXgnLFxuICAnbWljcm9zb2Z0Lndvcmtsb2Fkcy9zYXB2aXJ0dWFsaW5zdGFuY2VzJzogJ1NBUCBWaXJ0dWFsIEluc3RhbmNlcycsXG4gICdtaWNyb3NvZnQud29ya2xvYWRzL3NhcHZpcnR1YWxpbnN0YW5jZXMvYXBwbGljYXRpb25pbnN0YW5jZXMnOiAnU0FQIGFwcCBzZXJ2ZXIgaW5zdGFuY2VzJyxcbiAgJ21pY3Jvc29mdC53b3JrbG9hZHMvc2FwdmlydHVhbGluc3RhbmNlcy9jZW50cmFsaW5zdGFuY2VzJzogJ1NBUCBjZW50cmFsIHNlcnZlciBpbnN0YW5jZXMnLFxuICAnbWljcm9zb2Z0Lndvcmtsb2Fkcy9zYXB2aXJ0dWFsaW5zdGFuY2VzL2RhdGFiYXNlaW5zdGFuY2VzJzogJ1NBUCBkYXRhYmFzZSBzZXJ2ZXIgaW5zdGFuY2VzJyxcbiAgJ25naW54Lm5naW54cGx1cy9uZ2lueGRlcGxveW1lbnRzJzogJ05HSU5YIERlcGxveW1lbnQnLFxuICAncHJvdmlkZXJzLnRlc3Qvc3RhdGVmdWxpYml6YWVuZ2luZXMnOiAnVkxDZW50cmFsIEhlbHAnLFxuICAnd2FuZGlzY28uZnVzaW9uL2Z1c2lvbmdyb3Vwcyc6ICdMaXZlRGF0YSBQbGFuZXMnLFxuICAnd2FuZGlzY28uZnVzaW9uL2Z1c2lvbmdyb3Vwcy9henVyZXpvbmVzJzogJ0F6dXJlIFpvbmVzJyxcbiAgJ3dhbmRpc2NvLmZ1c2lvbi9mdXNpb25ncm91cHMvYXp1cmV6b25lcy9wbHVnaW5zJzogJ1BsdWdpbnMnLFxuICAnd2FuZGlzY28uZnVzaW9uL2Z1c2lvbmdyb3Vwcy9oaXZlcmVwbGljYXRpb25ydWxlcyc6ICdIaXZlIFJlcGxpY2F0aW9uIFJ1bGVzJyxcbiAgJ3dhbmRpc2NvLmZ1c2lvbi9mdXNpb25ncm91cHMvbWFuYWdlZG9ucHJlbXpvbmVzJzogJ09uLXByZW1pc2VzIFpvbmVzJyxcbiAgJ3dhbmRpc2NvLmZ1c2lvbi9mdXNpb25ncm91cHMvcmVwbGljYXRpb25ydWxlcyc6ICdSZXBsaWNhdGlvbiBSdWxlcycsXG4gICd3YW5kaXNjby5mdXNpb24vbWlncmF0b3JzJzogJ0xpdmVEYXRhIE1pZ3JhdG9ycycsXG4gICd3YW5kaXNjby5mdXNpb24vbWlncmF0b3JzL2V4Y2x1c2lvbnRlbXBsYXRlcyc6ICdFeGNsdXNpb25zJyxcbiAgJ3dhbmRpc2NvLmZ1c2lvbi9taWdyYXRvcnMvbGl2ZWRhdGFtaWdyYXRpb25zJzogJ01pZ3JhdGlvbnMnLFxuICAnd2FuZGlzY28uZnVzaW9uL21pZ3JhdG9ycy9tZXRhZGF0YW1pZ3JhdGlvbnMnOiAnTWV0YWRhdGEgTWlncmF0aW9ucycsXG4gICd3YW5kaXNjby5mdXNpb24vbWlncmF0b3JzL21ldGFkYXRhdGFyZ2V0cyc6ICdNZXRhZGF0YSBUYXJnZXRzJyxcbiAgJ3dhbmRpc2NvLmZ1c2lvbi9taWdyYXRvcnMvcGF0aG1hcHBpbmdzJzogJ1BhdGggTWFwcGluZ3MnLFxuICAnd2FuZGlzY28uZnVzaW9uL21pZ3JhdG9ycy90YXJnZXRzJzogJ1RhcmdldHMnLFxuICAnbWljcm9zb2Z0LnNlY3VyaXR5L2luc2lnaHRzL2NsYXNzaWZpY2F0aW9uJzogJ0RhdGEgU2Vuc2l0aXZpdHkgU2VjdXJpdHkgSW5zaWdodHMgKFByZXZpZXcpJyxcbiAgJ21pY3Jvc29mdC5zZWN1cml0eS9sb2NhdGlvbnMvYWxlcnRzJzogJ1NlY3VyaXR5IEFsZXJ0cycsXG59O1xuIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGZyb20sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1xuICBEYXRhUXVlcnlSZXF1ZXN0LFxuICBEYXRhUXVlcnlSZXNwb25zZSxcbiAgRGF0YVNvdXJjZUluc3RhbmNlU2V0dGluZ3MsXG4gIERhdGFTb3VyY2VSZWYsXG4gIFNjb3BlZFZhcnMsXG59IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgRGF0YVNvdXJjZVdpdGhCYWNrZW5kLCBnZXRUZW1wbGF0ZVNydiB9IGZyb20gJ0BncmFmYW5hL3J1bnRpbWUnO1xuXG5pbXBvcnQgeyBpc0dVSURpc2ggfSBmcm9tICcuLi9jb21wb25lbnRzL1Jlc291cmNlUGlja2VyL3V0aWxzJztcbmltcG9ydCB7IGdldEF1dGhUeXBlLCBnZXRBenVyZUNsb3VkLCBnZXRBenVyZVBvcnRhbFVybCB9IGZyb20gJy4uL2NyZWRlbnRpYWxzJztcbmltcG9ydCBMb2dBbmFseXRpY3NRdWVyeXN0cmluZ0J1aWxkZXIgZnJvbSAnLi4vbG9nX2FuYWx5dGljcy9xdWVyeXN0cmluZ19idWlsZGVyJztcbmltcG9ydCB7XG4gIEF6dXJlRGF0YVNvdXJjZUpzb25EYXRhLFxuICBBenVyZUxvZ3NWYXJpYWJsZSxcbiAgQXp1cmVNb25pdG9yUXVlcnksXG4gIEF6dXJlUXVlcnlUeXBlLFxuICBEYXRhc291cmNlVmFsaWRhdGlvblJlc3VsdCxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgaW50ZXJwb2xhdGVWYXJpYWJsZSwgcm91dGVOYW1lcyB9IGZyb20gJy4uL3V0aWxzL2NvbW1vbic7XG5cbmltcG9ydCBSZXNwb25zZVBhcnNlciwgeyB0cmFuc2Zvcm1NZXRhZGF0YVRvS3VzdG9TY2hlbWEgfSBmcm9tICcuL3Jlc3BvbnNlX3BhcnNlcic7XG5cbmludGVyZmFjZSBBZGhvY1F1ZXJ5IHtcbiAgZGF0YXNvdXJjZTogRGF0YVNvdXJjZVJlZjtcbiAgcGF0aDogc3RyaW5nO1xuICByZXN1bHRGb3JtYXQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXp1cmVMb2dBbmFseXRpY3NEYXRhc291cmNlIGV4dGVuZHMgRGF0YVNvdXJjZVdpdGhCYWNrZW5kPFxuICBBenVyZU1vbml0b3JRdWVyeSxcbiAgQXp1cmVEYXRhU291cmNlSnNvbkRhdGFcbj4ge1xuICByZXNvdXJjZVBhdGg6IHN0cmluZztcbiAgYXp1cmVQb3J0YWxVcmw6IHN0cmluZztcbiAgZGVjbGFyZSBhcHBsaWNhdGlvbklkOiBzdHJpbmc7XG5cbiAgZGVmYXVsdFN1YnNjcmlwdGlvbklkPzogc3RyaW5nO1xuXG4gIGF6dXJlTW9uaXRvclBhdGg6IHN0cmluZztcbiAgZmlyc3RXb3Jrc3BhY2U/OiBzdHJpbmc7XG4gIGNhY2hlOiBNYXA8c3RyaW5nLCBhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5zdGFuY2VTZXR0aW5nczogRGF0YVNvdXJjZUluc3RhbmNlU2V0dGluZ3M8QXp1cmVEYXRhU291cmNlSnNvbkRhdGE+KSB7XG4gICAgc3VwZXIoaW5zdGFuY2VTZXR0aW5ncyk7XG4gICAgdGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcblxuICAgIHRoaXMucmVzb3VyY2VQYXRoID0gYCR7cm91dGVOYW1lcy5sb2dBbmFseXRpY3N9YDtcbiAgICB0aGlzLmF6dXJlTW9uaXRvclBhdGggPSBgJHtyb3V0ZU5hbWVzLmF6dXJlTW9uaXRvcn0vc3Vic2NyaXB0aW9uc2A7XG4gICAgY29uc3QgY2xvdWQgPSBnZXRBenVyZUNsb3VkKGluc3RhbmNlU2V0dGluZ3MpO1xuICAgIHRoaXMuYXp1cmVQb3J0YWxVcmwgPSBnZXRBenVyZVBvcnRhbFVybChjbG91ZCk7XG5cbiAgICB0aGlzLmRlZmF1bHRTdWJzY3JpcHRpb25JZCA9IHRoaXMuaW5zdGFuY2VTZXR0aW5ncy5qc29uRGF0YS5zdWJzY3JpcHRpb25JZCB8fCAnJztcbiAgfVxuXG4gIGlzQ29uZmlndXJlZCgpOiBib29sZWFuIHtcbiAgICAvLyBJZiB2YWxpZGF0aW9uIGRpZG4ndCByZXR1cm4gYW55IGVycm9yIHRoZW4gdGhlIGRhdGEgc291cmNlIGlzIHByb3Blcmx5IGNvbmZpZ3VyZWRcbiAgICByZXR1cm4gIXRoaXMudmFsaWRhdGVEYXRhc291cmNlKCk7XG4gIH1cblxuICBmaWx0ZXJRdWVyeShpdGVtOiBBenVyZU1vbml0b3JRdWVyeSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBpdGVtLmhpZGUgIT09IHRydWUgJiZcbiAgICAgICEhaXRlbS5henVyZUxvZ0FuYWx5dGljcz8ucXVlcnkgJiZcbiAgICAgICghIWl0ZW0uYXp1cmVMb2dBbmFseXRpY3MucmVzb3VyY2UgfHwgISFpdGVtLmF6dXJlTG9nQW5hbHl0aWNzLndvcmtzcGFjZSlcbiAgICApO1xuICB9XG5cbiAgYXN5bmMgZ2V0U3Vic2NyaXB0aW9ucygpOiBQcm9taXNlPEFycmF5PHsgdGV4dDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+PiB7XG4gICAgaWYgKCF0aGlzLmlzQ29uZmlndXJlZCgpKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgcGF0aCA9IGAke3RoaXMuYXp1cmVNb25pdG9yUGF0aH0/YXBpLXZlcnNpb249MjAxOS0wMy0wMWA7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0UmVzb3VyY2UocGF0aCkudGhlbigocmVzdWx0OiBhbnkpID0+IHtcbiAgICAgIHJldHVybiBSZXNwb25zZVBhcnNlci5wYXJzZVN1YnNjcmlwdGlvbnMocmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGdldFdvcmtzcGFjZXMoc3Vic2NyaXB0aW9uOiBzdHJpbmcpOiBQcm9taXNlPEF6dXJlTG9nc1ZhcmlhYmxlW10+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0V29ya3NwYWNlTGlzdChzdWJzY3JpcHRpb24pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIG1hcChyZXNwb25zZS52YWx1ZSwgKHZhbDogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGV4dDogdmFsLm5hbWUsXG4gICAgICAgICAgdmFsdWU6IHZhbC5pZCxcbiAgICAgICAgfTtcbiAgICAgIH0pIHx8IFtdXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0V29ya3NwYWNlTGlzdChzdWJzY3JpcHRpb246IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uSWQgPSBnZXRUZW1wbGF0ZVNydigpLnJlcGxhY2Uoc3Vic2NyaXB0aW9uIHx8IHRoaXMuZGVmYXVsdFN1YnNjcmlwdGlvbklkKTtcblxuICAgIGNvbnN0IHdvcmtzcGFjZUxpc3RVcmwgPVxuICAgICAgdGhpcy5henVyZU1vbml0b3JQYXRoICtcbiAgICAgIGAvJHtzdWJzY3JpcHRpb25JZH0vcHJvdmlkZXJzL01pY3Jvc29mdC5PcGVyYXRpb25hbEluc2lnaHRzL3dvcmtzcGFjZXM/YXBpLXZlcnNpb249MjAxNy0wNC0yNi1wcmV2aWV3YDtcbiAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZSh3b3Jrc3BhY2VMaXN0VXJsKTtcbiAgfVxuXG4gIGFzeW5jIGdldE1ldGFkYXRhKHJlc291cmNlVXJpOiBzdHJpbmcpIHtcbiAgICBjb25zdCBwYXRoID0gYCR7dGhpcy5yZXNvdXJjZVBhdGh9L3YxJHtyZXNvdXJjZVVyaX0vbWV0YWRhdGFgO1xuXG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IHRoaXMuZ2V0UmVzb3VyY2UocGF0aCk7XG4gICAgcmV0dXJuIHJlc3A7XG4gIH1cblxuICBhc3luYyBnZXRLdXN0b1NjaGVtYShyZXNvdXJjZVVyaTogc3RyaW5nKSB7XG4gICAgY29uc3QgdGVtcGxhdGVTcnYgPSBnZXRUZW1wbGF0ZVNydigpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFVyaSA9IHRlbXBsYXRlU3J2LnJlcGxhY2UocmVzb3VyY2VVcmksIHt9LCBpbnRlcnBvbGF0ZVZhcmlhYmxlKTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IHRoaXMuZ2V0TWV0YWRhdGEoaW50ZXJwb2xhdGVkVXJpKTtcbiAgICByZXR1cm4gdHJhbnNmb3JtTWV0YWRhdGFUb0t1c3RvU2NoZW1hKG1ldGFkYXRhLCBpbnRlcnBvbGF0ZWRVcmksIHRlbXBsYXRlU3J2LmdldFZhcmlhYmxlcygpKTtcbiAgfVxuXG4gIGFwcGx5VGVtcGxhdGVWYXJpYWJsZXModGFyZ2V0OiBBenVyZU1vbml0b3JRdWVyeSwgc2NvcGVkVmFyczogU2NvcGVkVmFycyk6IEF6dXJlTW9uaXRvclF1ZXJ5IHtcbiAgICBjb25zdCBpdGVtID0gdGFyZ2V0LmF6dXJlTG9nQW5hbHl0aWNzO1xuICAgIGlmICghaXRlbSkge1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wbGF0ZVNydiA9IGdldFRlbXBsYXRlU3J2KCk7XG4gICAgY29uc3QgcmVzb3VyY2UgPSB0ZW1wbGF0ZVNydi5yZXBsYWNlKGl0ZW0ucmVzb3VyY2UsIHNjb3BlZFZhcnMpO1xuICAgIGxldCB3b3Jrc3BhY2UgPSB0ZW1wbGF0ZVNydi5yZXBsYWNlKGl0ZW0ud29ya3NwYWNlLCBzY29wZWRWYXJzKTtcblxuICAgIGlmICghd29ya3NwYWNlICYmICFyZXNvdXJjZSAmJiB0aGlzLmZpcnN0V29ya3NwYWNlKSB7XG4gICAgICB3b3Jrc3BhY2UgPSB0aGlzLmZpcnN0V29ya3NwYWNlO1xuICAgIH1cblxuICAgIGNvbnN0IHF1ZXJ5ID0gdGVtcGxhdGVTcnYucmVwbGFjZShpdGVtLnF1ZXJ5LCBzY29wZWRWYXJzLCBpbnRlcnBvbGF0ZVZhcmlhYmxlKTtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi50YXJnZXQsXG4gICAgICBxdWVyeVR5cGU6IEF6dXJlUXVlcnlUeXBlLkxvZ0FuYWx5dGljcyxcblxuICAgICAgYXp1cmVMb2dBbmFseXRpY3M6IHtcbiAgICAgICAgcmVzdWx0Rm9ybWF0OiBpdGVtLnJlc3VsdEZvcm1hdCxcbiAgICAgICAgcXVlcnksXG4gICAgICAgIHJlc291cmNlLFxuXG4gICAgICAgIC8vIFdvcmtzcGFjZSB3YXMgcmVtb3ZlZCBpbiBHcmFmYW5hIDgsIGJ1dCByZW1haW5zIGZvciBiYWNrd2FyZHMgY29tcGF0XG4gICAgICAgIHdvcmtzcGFjZSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdWdtZW50IHRoZSByZXN1bHRzIHdpdGggbGlua3MgYmFjayB0byB0aGUgYXp1cmUgY29uc29sZVxuICAgKi9cbiAgcXVlcnkocmVxdWVzdDogRGF0YVF1ZXJ5UmVxdWVzdDxBenVyZU1vbml0b3JRdWVyeT4pOiBPYnNlcnZhYmxlPERhdGFRdWVyeVJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHN1cGVyLnF1ZXJ5KHJlcXVlc3QpLnBpcGUoXG4gICAgICBtZXJnZU1hcCgocmVzOiBEYXRhUXVlcnlSZXNwb25zZSkgPT4ge1xuICAgICAgICByZXR1cm4gZnJvbSh0aGlzLnByb2Nlc3NSZXNwb25zZShyZXMpKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIGFzeW5jIHByb2Nlc3NSZXNwb25zZShyZXM6IERhdGFRdWVyeVJlc3BvbnNlKTogUHJvbWlzZTxEYXRhUXVlcnlSZXNwb25zZT4ge1xuICAgIGlmIChyZXMuZGF0YSkge1xuICAgICAgZm9yIChjb25zdCBkZiBvZiByZXMuZGF0YSkge1xuICAgICAgICBjb25zdCBlbmNvZGVkUXVlcnkgPSBkZi5tZXRhPy5jdXN0b20/LmVuY29kZWRRdWVyeTtcbiAgICAgICAgaWYgKGVuY29kZWRRdWVyeSAmJiBlbmNvZGVkUXVlcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHVybCA9IGF3YWl0IHRoaXMuYnVpbGREZWVwTGluayhkZi5tZXRhLmN1c3RvbSk7XG4gICAgICAgICAgaWYgKHVybD8ubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGRmLmZpZWxkcykge1xuICAgICAgICAgICAgICBmaWVsZC5jb25maWcubGlua3MgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICB0aXRsZTogJ1ZpZXcgaW4gQXp1cmUgUG9ydGFsJyxcbiAgICAgICAgICAgICAgICAgIHRhcmdldEJsYW5rOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGJ1aWxkRGVlcExpbmsoY3VzdG9tTWV0YTogUmVjb3JkPHN0cmluZywgYW55Pikge1xuICAgIGNvbnN0IGJhc2U2NEVuYyA9IGVuY29kZVVSSUNvbXBvbmVudChjdXN0b21NZXRhLmVuY29kZWRRdWVyeSk7XG4gICAgY29uc3Qgd29ya3NwYWNlSWQgPSBjdXN0b21NZXRhLndvcmtzcGFjZTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBjdXN0b21NZXRhLnN1YnNjcmlwdGlvbjtcblxuICAgIGNvbnN0IGRldGFpbHMgPSBhd2FpdCB0aGlzLmdldFdvcmtzcGFjZURldGFpbHMod29ya3NwYWNlSWQpO1xuICAgIGlmICghZGV0YWlscy53b3Jrc3BhY2UgfHwgIWRldGFpbHMucmVzb3VyY2VHcm91cCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9XG4gICAgICBgJHt0aGlzLmF6dXJlUG9ydGFsVXJsfS8jYmxhZGUvTWljcm9zb2Z0X09wZXJhdGlvbnNNYW5hZ2VtZW50U3VpdGVfV29ya3NwYWNlL2AgK1xuICAgICAgYEFuYWx5dGljc0JsYWRlL2luaXRpYXRvci9BbmFseXRpY3NTaGFyZUxpbmtUb1F1ZXJ5L2lzUXVlcnlFZGl0b3JWaXNpYmxlL3RydWUvc2NvcGUvYCArXG4gICAgICBgJTdCJTIycmVzb3VyY2VzJTIyJTNBJTVCJTdCJTIycmVzb3VyY2VJZCUyMiUzQSUyMiUyRnN1YnNjcmlwdGlvbnMlMkYke3N1YnNjcmlwdGlvbn1gICtcbiAgICAgIGAlMkZyZXNvdXJjZWdyb3VwcyUyRiR7ZGV0YWlscy5yZXNvdXJjZUdyb3VwfSUyRnByb3ZpZGVycyUyRm1pY3Jvc29mdC5vcGVyYXRpb25hbGluc2lnaHRzJTJGd29ya3NwYWNlcyUyRiR7ZGV0YWlscy53b3Jrc3BhY2V9YCArXG4gICAgICBgJTIyJTdEJTVEJTdEL3F1ZXJ5LyR7YmFzZTY0RW5jfS9pc1F1ZXJ5QmFzZTY0Q29tcHJlc3NlZC90cnVlL3RpbWVzcGFuSW5Jc29Gb3JtYXQvUDFEYDtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgYXN5bmMgZ2V0V29ya3NwYWNlRGV0YWlscyh3b3Jrc3BhY2VJZDogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLmRlZmF1bHRTdWJzY3JpcHRpb25JZCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZ2V0V29ya3NwYWNlTGlzdCh0aGlzLmRlZmF1bHRTdWJzY3JpcHRpb25JZCk7XG5cbiAgICBjb25zdCBkZXRhaWxzID0gcmVzcG9uc2UudmFsdWUuZmluZCgobzogYW55KSA9PiB7XG4gICAgICByZXR1cm4gby5wcm9wZXJ0aWVzLmN1c3RvbWVySWQgPT09IHdvcmtzcGFjZUlkO1xuICAgIH0pO1xuXG4gICAgaWYgKCFkZXRhaWxzKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgY29uc3QgcmVnZXggPSAvLipyZXNvdXJjZWdyb3Vwc1xcLyguKilcXC9wcm92aWRlcnMuKi87XG4gICAgY29uc3QgcmVzdWx0cyA9IHJlZ2V4LmV4ZWMoZGV0YWlscy5pZCk7XG4gICAgaWYgKCFyZXN1bHRzIHx8IHJlc3VsdHMubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB3b3Jrc3BhY2U6IGRldGFpbHMubmFtZSxcbiAgICAgIHJlc291cmNlR3JvdXA6IHJlc3VsdHNbMV0sXG4gICAgfTtcbiAgfVxuXG4gIC8qXG4gICAgSW4gNy41LnggaXQgdXNlZCB0byBiZSBwb3NzaWJsZSB0byBzZXQgYSBkZWZhdWx0IHdvcmtzcGFjZSBpZCBpbiB0aGUgY29uZmlnIG9uIHRoZSBhdXRoIHBhZ2UuXG4gICAgVGhpcyBoYXMgYmVlbiBkZXByZWNhdGVkLCBob3dldmVyIGlzIHN0aWxsIHVzZWQgYnkgYSBmZXcgbGVnYWN5IHRlbXBsYXRlIHF1ZXJpZXMuXG4gICovXG4gIGdldERlcHJlY2F0ZWREZWZhdWx0V29ya1NwYWNlKCkge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlU2V0dGluZ3MuanNvbkRhdGEubG9nQW5hbHl0aWNzRGVmYXVsdFdvcmtzcGFjZTtcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRRdWVyeShxdWVyeTogc3RyaW5nLCBvcHRpb25zOiBhbnksIHdvcmtzcGFjZTogc3RyaW5nKTogQWRob2NRdWVyeVtdIHtcbiAgICBjb25zdCBxdWVyeXN0cmluZ0J1aWxkZXIgPSBuZXcgTG9nQW5hbHl0aWNzUXVlcnlzdHJpbmdCdWlsZGVyKFxuICAgICAgZ2V0VGVtcGxhdGVTcnYoKS5yZXBsYWNlKHF1ZXJ5LCB7fSwgaW50ZXJwb2xhdGVWYXJpYWJsZSksXG4gICAgICBvcHRpb25zLFxuICAgICAgJ1RpbWVHZW5lcmF0ZWQnXG4gICAgKTtcblxuICAgIGNvbnN0IHF1ZXJ5c3RyaW5nID0gcXVlcnlzdHJpbmdCdWlsZGVyLmdlbmVyYXRlKCkudXJpU3RyaW5nO1xuICAgIGNvbnN0IHBhdGggPSBpc0dVSURpc2god29ya3NwYWNlKVxuICAgICAgPyBgJHt0aGlzLnJlc291cmNlUGF0aH0vdjEvd29ya3NwYWNlcy8ke3dvcmtzcGFjZX0vcXVlcnk/JHtxdWVyeXN0cmluZ31gXG4gICAgICA6IGAke3RoaXMucmVzb3VyY2VQYXRofS92MSR7d29ya3NwYWNlfS9xdWVyeT8ke3F1ZXJ5c3RyaW5nfWA7XG5cbiAgICBjb25zdCBxdWVyaWVzID0gW1xuICAgICAge1xuICAgICAgICBkYXRhc291cmNlOiB0aGlzLmdldFJlZigpLFxuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICByZXN1bHRGb3JtYXQ6ICd0YWJsZScsXG4gICAgICB9LFxuICAgIF07XG5cbiAgICByZXR1cm4gcXVlcmllcztcbiAgfVxuXG4gIGFzeW5jIGdldERlZmF1bHRPckZpcnN0U3Vic2NyaXB0aW9uKCk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgaWYgKHRoaXMuZGVmYXVsdFN1YnNjcmlwdGlvbklkKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWZhdWx0U3Vic2NyaXB0aW9uSWQ7XG4gICAgfVxuICAgIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBhd2FpdCB0aGlzLmdldFN1YnNjcmlwdGlvbnMoKTtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uc1swXT8udmFsdWU7XG4gIH1cblxuICBhc3luYyBnZXRGaXJzdFdvcmtzcGFjZSgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIGlmICh0aGlzLmZpcnN0V29ya3NwYWNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maXJzdFdvcmtzcGFjZTtcbiAgICB9XG5cbiAgICBjb25zdCBzdWJzY3JpcHRpb25JZCA9IGF3YWl0IHRoaXMuZ2V0RGVmYXVsdE9yRmlyc3RTdWJzY3JpcHRpb24oKTtcbiAgICBpZiAoIXN1YnNjcmlwdGlvbklkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IHdvcmtzcGFjZXMgPSBhd2FpdCB0aGlzLmdldFdvcmtzcGFjZXMoc3Vic2NyaXB0aW9uSWQpO1xuICAgIGNvbnN0IHdvcmtzcGFjZSA9IHdvcmtzcGFjZXNbMF0/LnZhbHVlO1xuXG4gICAgaWYgKHdvcmtzcGFjZSkge1xuICAgICAgdGhpcy5maXJzdFdvcmtzcGFjZSA9IHdvcmtzcGFjZTtcbiAgICB9XG5cbiAgICByZXR1cm4gd29ya3NwYWNlO1xuICB9XG5cbiAgYW5ub3RhdGlvblF1ZXJ5KG9wdGlvbnM6IGFueSkge1xuICAgIGlmICghb3B0aW9ucy5hbm5vdGF0aW9uLnJhd1F1ZXJ5KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuICAgICAgICBtZXNzYWdlOiAnUXVlcnkgbWlzc2luZyBpbiBhbm5vdGF0aW9uIGRlZmluaXRpb24nLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcXVlcmllcyA9IHRoaXMuYnVpbGRRdWVyeShvcHRpb25zLmFubm90YXRpb24ucmF3UXVlcnksIG9wdGlvbnMsIG9wdGlvbnMuYW5ub3RhdGlvbi53b3Jrc3BhY2UpO1xuICAgIGNvbnN0IHByb21pc2VzID0gdGhpcy5kb1F1ZXJpZXMocXVlcmllcyk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgIGNvbnN0IGFubm90YXRpb25zID0gbmV3IFJlc3BvbnNlUGFyc2VyKHJlc3VsdHMpLnRyYW5zZm9ybVRvQW5ub3RhdGlvbnMob3B0aW9ucyk7XG4gICAgICByZXR1cm4gYW5ub3RhdGlvbnM7XG4gICAgfSk7XG4gIH1cblxuICBkb1F1ZXJpZXMocXVlcmllczogQWRob2NRdWVyeVtdKSB7XG4gICAgcmV0dXJuIG1hcChxdWVyaWVzLCAocXVlcnkpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmdldFJlc291cmNlKHF1ZXJ5LnBhdGgpXG4gICAgICAgIC50aGVuKChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN1bHQ6IHJlc3VsdCxcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycjogYW55KSA9PiB7XG4gICAgICAgICAgdGhyb3cge1xuICAgICAgICAgICAgZXJyb3I6IGVycixcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVEYXRhc291cmNlKCk6IERhdGFzb3VyY2VWYWxpZGF0aW9uUmVzdWx0IHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBhdXRoVHlwZSA9IGdldEF1dGhUeXBlKHRoaXMuaW5zdGFuY2VTZXR0aW5ncyk7XG5cbiAgICBpZiAoYXV0aFR5cGUgPT09ICdjbGllbnRzZWNyZXQnKSB7XG4gICAgICBpZiAoIXRoaXMuaXNWYWxpZENvbmZpZ0ZpZWxkKHRoaXMuaW5zdGFuY2VTZXR0aW5ncy5qc29uRGF0YS50ZW5hbnRJZCkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgICAgbWVzc2FnZTogJ1RoZSBUZW5hbnQgSWQgZmllbGQgaXMgcmVxdWlyZWQuJyxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRDb25maWdGaWVsZCh0aGlzLmluc3RhbmNlU2V0dGluZ3MuanNvbkRhdGEuY2xpZW50SWQpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdUaGUgQ2xpZW50IElkIGZpZWxkIGlzIHJlcXVpcmVkLicsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgaXNWYWxpZENvbmZpZ0ZpZWxkKGZpZWxkOiBzdHJpbmcgfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHlwZW9mIGZpZWxkID09PSAnc3RyaW5nJyAmJiBmaWVsZC5sZW5ndGggPiAwO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjb25jYXQsIGZpbmQsIGZsYXR0ZW5EZWVwLCBmb3JFYWNoLCBnZXQsIG1hcCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IEFubm90YXRpb25FdmVudCwgZGF0ZVRpbWUsIFRpbWVTZXJpZXMsIFZhcmlhYmxlTW9kZWwgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcblxuaW1wb3J0IHsgQXp1cmVMb2dzVGFibGVEYXRhLCBBenVyZUxvZ3NWYXJpYWJsZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGEgfSBmcm9tICcuLi90eXBlcy9sb2dBbmFseXRpY3NNZXRhZGF0YSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3BvbnNlUGFyc2VyIHtcbiAgZGVjbGFyZSBjb2x1bW5zOiBzdHJpbmdbXTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZXN1bHRzOiBhbnkpIHt9XG5cbiAgcGFyc2VRdWVyeVJlc3VsdCgpOiBhbnkge1xuICAgIGxldCBkYXRhOiBhbnlbXSA9IFtdO1xuICAgIGxldCBjb2x1bW5zOiBhbnlbXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5yZXN1bHRzW2ldLnJlc3VsdC50YWJsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29sdW1ucyA9IHRoaXMucmVzdWx0c1tpXS5yZXN1bHQudGFibGVzWzBdLmNvbHVtbnM7XG4gICAgICBjb25zdCByb3dzID0gdGhpcy5yZXN1bHRzW2ldLnJlc3VsdC50YWJsZXNbMF0ucm93cztcblxuICAgICAgaWYgKHRoaXMucmVzdWx0c1tpXS5xdWVyeS5yZXN1bHRGb3JtYXQgPT09ICd0aW1lX3NlcmllcycpIHtcbiAgICAgICAgZGF0YSA9IGNvbmNhdChkYXRhLCB0aGlzLnBhcnNlVGltZVNlcmllc1Jlc3VsdCh0aGlzLnJlc3VsdHNbaV0ucXVlcnksIGNvbHVtbnMsIHJvd3MpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBjb25jYXQoZGF0YSwgdGhpcy5wYXJzZVRhYmxlUmVzdWx0KHRoaXMucmVzdWx0c1tpXS5xdWVyeSwgY29sdW1ucywgcm93cykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgcGFyc2VUaW1lU2VyaWVzUmVzdWx0KHF1ZXJ5OiB7IHJlZklkOiBzdHJpbmc7IHF1ZXJ5OiBhbnkgfSwgY29sdW1uczogYW55W10sIHJvd3M6IGFueSk6IFRpbWVTZXJpZXNbXSB7XG4gICAgY29uc3QgZGF0YTogVGltZVNlcmllc1tdID0gW107XG4gICAgbGV0IHRpbWVJbmRleCA9IC0xO1xuICAgIGxldCBtZXRyaWNJbmRleCA9IC0xO1xuICAgIGxldCB2YWx1ZUluZGV4ID0gLTE7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aW1lSW5kZXggPT09IC0xICYmIGNvbHVtbnNbaV0udHlwZSA9PT0gJ2RhdGV0aW1lJykge1xuICAgICAgICB0aW1lSW5kZXggPSBpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0cmljSW5kZXggPT09IC0xICYmIGNvbHVtbnNbaV0udHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWV0cmljSW5kZXggPSBpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWVJbmRleCA9PT0gLTEgJiYgWydpbnQnLCAnbG9uZycsICdyZWFsJywgJ2RvdWJsZSddLmluZGV4T2YoY29sdW1uc1tpXS50eXBlKSA+IC0xKSB7XG4gICAgICAgIHZhbHVlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aW1lSW5kZXggPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRhdGV0aW1lIGNvbHVtbiBmb3VuZCBpbiB0aGUgcmVzdWx0LiBUaGUgVGltZSBTZXJpZXMgZm9ybWF0IHJlcXVpcmVzIGEgdGltZSBjb2x1bW4uJyk7XG4gICAgfVxuXG4gICAgZm9yRWFjaChyb3dzLCAocm93KSA9PiB7XG4gICAgICBjb25zdCBlcG9jaCA9IFJlc3BvbnNlUGFyc2VyLmRhdGVUaW1lVG9FcG9jaChyb3dbdGltZUluZGV4XSk7XG4gICAgICBjb25zdCBtZXRyaWNOYW1lID0gbWV0cmljSW5kZXggPiAtMSA/IHJvd1ttZXRyaWNJbmRleF0gOiBjb2x1bW5zW3ZhbHVlSW5kZXhdLm5hbWU7XG4gICAgICBjb25zdCBidWNrZXQgPSBSZXNwb25zZVBhcnNlci5maW5kT3JDcmVhdGVCdWNrZXQoZGF0YSwgbWV0cmljTmFtZSk7XG4gICAgICBidWNrZXQuZGF0YXBvaW50cy5wdXNoKFtyb3dbdmFsdWVJbmRleF0sIGVwb2NoXSk7XG4gICAgICBidWNrZXQucmVmSWQgPSBxdWVyeS5yZWZJZDtcbiAgICAgIGJ1Y2tldC5tZXRhID0ge1xuICAgICAgICBleGVjdXRlZFF1ZXJ5U3RyaW5nOiBxdWVyeS5xdWVyeSxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHBhcnNlVGFibGVSZXN1bHQocXVlcnk6IHsgcmVmSWQ6IHN0cmluZzsgcXVlcnk6IHN0cmluZyB9LCBjb2x1bW5zOiBhbnlbXSwgcm93czogYW55W10pOiBBenVyZUxvZ3NUYWJsZURhdGEge1xuICAgIGNvbnN0IHRhYmxlUmVzdWx0OiBBenVyZUxvZ3NUYWJsZURhdGEgPSB7XG4gICAgICB0eXBlOiAndGFibGUnLFxuICAgICAgY29sdW1uczogbWFwKGNvbHVtbnMsIChjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIHsgdGV4dDogY29sLm5hbWUsIHR5cGU6IGNvbC50eXBlIH07XG4gICAgICB9KSxcbiAgICAgIHJvd3M6IHJvd3MsXG4gICAgICByZWZJZDogcXVlcnkucmVmSWQsXG4gICAgICBtZXRhOiB7XG4gICAgICAgIGV4ZWN1dGVkUXVlcnlTdHJpbmc6IHF1ZXJ5LnF1ZXJ5LFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRhYmxlUmVzdWx0O1xuICB9XG5cbiAgcGFyc2VUb1ZhcmlhYmxlcygpOiBBenVyZUxvZ3NWYXJpYWJsZVtdIHtcbiAgICBjb25zdCBxdWVyeVJlc3VsdCA9IHRoaXMucGFyc2VRdWVyeVJlc3VsdCgpO1xuXG4gICAgY29uc3QgdmFyaWFibGVzOiBBenVyZUxvZ3NWYXJpYWJsZVtdID0gW107XG4gICAgZm9yRWFjaChxdWVyeVJlc3VsdCwgKHJlc3VsdCkgPT4ge1xuICAgICAgZm9yRWFjaChmbGF0dGVuRGVlcChyZXN1bHQucm93cyksIChyb3cpID0+IHtcbiAgICAgICAgdmFyaWFibGVzLnB1c2goe1xuICAgICAgICAgIHRleHQ6IHJvdyxcbiAgICAgICAgICB2YWx1ZTogcm93LFxuICAgICAgICB9IGFzIEF6dXJlTG9nc1ZhcmlhYmxlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZhcmlhYmxlcztcbiAgfVxuXG4gIHRyYW5zZm9ybVRvQW5ub3RhdGlvbnMob3B0aW9uczogYW55KSB7XG4gICAgY29uc3QgcXVlcnlSZXN1bHQgPSB0aGlzLnBhcnNlUXVlcnlSZXN1bHQoKTtcblxuICAgIGNvbnN0IGxpc3Q6IEFubm90YXRpb25FdmVudFtdID0gW107XG5cbiAgICBmb3JFYWNoKHF1ZXJ5UmVzdWx0LCAocmVzdWx0KSA9PiB7XG4gICAgICBsZXQgdGltZUluZGV4ID0gLTE7XG4gICAgICBsZXQgdGV4dEluZGV4ID0gLTE7XG4gICAgICBsZXQgdGFnc0luZGV4ID0gLTE7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0LmNvbHVtbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRpbWVJbmRleCA9PT0gLTEgJiYgcmVzdWx0LmNvbHVtbnNbaV0udHlwZSA9PT0gJ2RhdGV0aW1lJykge1xuICAgICAgICAgIHRpbWVJbmRleCA9IGk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGV4dEluZGV4ID09PSAtMSAmJiByZXN1bHQuY29sdW1uc1tpXS50ZXh0LnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0Jykge1xuICAgICAgICAgIHRleHRJbmRleCA9IGk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFnc0luZGV4ID09PSAtMSAmJiByZXN1bHQuY29sdW1uc1tpXS50ZXh0LnRvTG93ZXJDYXNlKCkgPT09ICd0YWdzJykge1xuICAgICAgICAgIHRhZ3NJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yRWFjaChyZXN1bHQucm93cywgKHJvdykgPT4ge1xuICAgICAgICBsaXN0LnB1c2goe1xuICAgICAgICAgIGFubm90YXRpb246IG9wdGlvbnMuYW5ub3RhdGlvbixcbiAgICAgICAgICB0aW1lOiBNYXRoLmZsb29yKFJlc3BvbnNlUGFyc2VyLmRhdGVUaW1lVG9FcG9jaChyb3dbdGltZUluZGV4XSkpLFxuICAgICAgICAgIHRleHQ6IHJvd1t0ZXh0SW5kZXhdID8gcm93W3RleHRJbmRleF0udG9TdHJpbmcoKSA6ICcnLFxuICAgICAgICAgIHRhZ3M6IHJvd1t0YWdzSW5kZXhdID8gcm93W3RhZ3NJbmRleF0udHJpbSgpLnNwbGl0KC9cXHMqLFxccyovKSA6IFtdLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICBzdGF0aWMgZmluZE9yQ3JlYXRlQnVja2V0KGRhdGE6IFRpbWVTZXJpZXNbXSwgdGFyZ2V0OiBhbnkpOiBUaW1lU2VyaWVzIHtcbiAgICBsZXQgZGF0YVRhcmdldDogYW55ID0gZmluZChkYXRhLCBbJ3RhcmdldCcsIHRhcmdldF0pO1xuICAgIGlmICghZGF0YVRhcmdldCkge1xuICAgICAgZGF0YVRhcmdldCA9IHsgdGFyZ2V0OiB0YXJnZXQsIGRhdGFwb2ludHM6IFtdLCByZWZJZDogJycsIHF1ZXJ5OiAnJyB9O1xuICAgICAgZGF0YS5wdXNoKGRhdGFUYXJnZXQpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhVGFyZ2V0O1xuICB9XG5cbiAgc3RhdGljIGRhdGVUaW1lVG9FcG9jaChkYXRlVGltZVZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gZGF0ZVRpbWUoZGF0ZVRpbWVWYWx1ZSkudmFsdWVPZigpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlU3Vic2NyaXB0aW9ucyhyZXN1bHQ6IGFueSk6IEFycmF5PHsgdGV4dDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+IHtcbiAgICBjb25zdCBsaXN0OiBBcnJheTx7IHRleHQ6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9PiA9IFtdO1xuXG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlRmllbGROYW1lID0gJ3N1YnNjcmlwdGlvbklkJztcbiAgICBjb25zdCB0ZXh0RmllbGROYW1lID0gJ2Rpc3BsYXlOYW1lJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC52YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFmaW5kKGxpc3QsIFsndmFsdWUnLCBnZXQocmVzdWx0LnZhbHVlW2ldLCB2YWx1ZUZpZWxkTmFtZSldKSkge1xuICAgICAgICBsaXN0LnB1c2goe1xuICAgICAgICAgIHRleHQ6IGAke2dldChyZXN1bHQudmFsdWVbaV0sIHRleHRGaWVsZE5hbWUpfWAsXG4gICAgICAgICAgdmFsdWU6IGdldChyZXN1bHQudmFsdWVbaV0sIHZhbHVlRmllbGROYW1lKSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cbn1cblxuLy8gbWF0Y2hlcyAobmFtZSk6KHR5cGUpID0gKGRlZmF1bHRWYWx1ZSlcbi8vIGUuZy4gZnJvbVJhbmdlU3RhcnQ6ZGF0ZXRpbWUgPSBkYXRldGltZShudWxsKVxuLy8gIC0gbmFtZTogZnJvbVJhbmdlU3RhcnRcbi8vICAtIHR5cGU6IGRhdGV0aW1lXG4vLyAgLSBkZWZhdWx0VmFsdWU6IGRhdGV0aW1lKG51bGwpXG5jb25zdCBNRVRBREFUQV9GVU5DVElPTl9QQVJBTVMgPSAvKFtcXHdcXFddKyk6KFtcXHddKykoPzpcXHM/PVxccz8oW1xcd1xcV10rKSk/LztcblxuZnVuY3Rpb24gdHJhbnNmb3JtTWV0YWRhdGFGdW5jdGlvbihzb3VyY2VTY2hlbWE6IEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGEpIHtcbiAgaWYgKCFzb3VyY2VTY2hlbWEuZnVuY3Rpb25zKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZVNjaGVtYS5mdW5jdGlvbnMubWFwKChmbikgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9XG4gICAgICBmbi5wYXJhbWV0ZXJzICYmXG4gICAgICBmbi5wYXJhbWV0ZXJzXG4gICAgICAgIC5zcGxpdCgnLCAnKVxuICAgICAgICAubWFwKChhcmcpID0+IHtcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IGFyZy5tYXRjaChNRVRBREFUQV9GVU5DVElPTl9QQVJBTVMpO1xuICAgICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBbLCBuYW1lLCB0eXBlLCBkZWZhdWx0VmFsdWVdID0gbWF0Y2g7XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICBjc2xEZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKDxUPih2OiBUKTogdiBpcyBFeGNsdWRlPFQsIHVuZGVmaW5lZD4gPT4gISF2KTtcblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBmbi5uYW1lLFxuICAgICAgYm9keTogZm4uYm9keSxcbiAgICAgIGlucHV0UGFyYW1ldGVyczogcGFyYW1zIHx8IFtdLFxuICAgIH07XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWV0YWRhdGFUb0t1c3RvU2NoZW1hKFxuICBzb3VyY2VTY2hlbWE6IEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGEsXG4gIG5hbWVPcklkT3JTb21ldGhpbmc6IHN0cmluZyxcbiAgdGVtcGxhdGVWYXJpYWJsZXM6IFZhcmlhYmxlTW9kZWxbXVxuKSB7XG4gIGNvbnN0IGRhdGFiYXNlID0ge1xuICAgIG5hbWU6IG5hbWVPcklkT3JTb21ldGhpbmcsXG4gICAgdGFibGVzOiBzb3VyY2VTY2hlbWEudGFibGVzLFxuICAgIGZ1bmN0aW9uczogdHJhbnNmb3JtTWV0YWRhdGFGdW5jdGlvbihzb3VyY2VTY2hlbWEpLFxuICAgIG1ham9yVmVyc2lvbjogMCxcbiAgICBtaW5vclZlcnNpb246IDAsXG4gIH07XG5cbiAgLy8gQWRkaW5nIG1hY3JvcyBhcyBrbm93biBmdW5jdGlvbnNcbiAgZGF0YWJhc2UuZnVuY3Rpb25zLnB1c2goXG4gICAge1xuICAgICAgbmFtZTogJyRfX3RpbWVGaWx0ZXInLFxuICAgICAgYm9keTogJ3sgdHJ1ZSB9JyxcbiAgICAgIGlucHV0UGFyYW1ldGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ3RpbWVDb2x1bW4nLFxuICAgICAgICAgIHR5cGU6ICdTeXN0ZW0uU3RyaW5nJyxcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6ICdcIlwiJyxcbiAgICAgICAgICBjc2xEZWZhdWx0VmFsdWU6ICdcIlwiJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnJF9fdGltZUZyb20nLFxuICAgICAgYm9keTogJ3sgZGF0ZXRpbWUoMjAxOC0wNi0wNVQxODowOTo1OC45MDdaKSB9JyxcbiAgICAgIGlucHV0UGFyYW1ldGVyczogW10sXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnJF9fdGltZVRvJyxcbiAgICAgIGJvZHk6ICd7IGRhdGV0aW1lKDIwMTgtMDYtMDVUMjA6MDk6NTguOTA3WikgfScsXG4gICAgICBpbnB1dFBhcmFtZXRlcnM6IFtdLFxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJyRfX2VzY2FwZU11bHRpJyxcbiAgICAgIGJvZHk6IGB7IEAnXFxcXGdyYWZhbmEtdm1cXE5ldHdvcmsoZXRoMClcXFRvdGFsJywgQCdcXFxcaGVsbG8hJ31gLFxuICAgICAgaW5wdXRQYXJhbWV0ZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnJG15VmFyJyxcbiAgICAgICAgICB0eXBlOiAnU3lzdGVtLlN0cmluZycsXG4gICAgICAgICAgZGVmYXVsdFZhbHVlOiAnJG15VmFyJyxcbiAgICAgICAgICBjc2xEZWZhdWx0VmFsdWU6ICckbXlWYXInLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICckX19jb250YWlucycsXG4gICAgICBib2R5OiBgeyBjb2xOYW1lIGluICgndmFsdWUxJywndmFsdWUyJykgfWAsXG4gICAgICBpbnB1dFBhcmFtZXRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdjb2xOYW1lJyxcbiAgICAgICAgICB0eXBlOiAnU3lzdGVtLlN0cmluZycsXG4gICAgICAgICAgZGVmYXVsdFZhbHVlOiAnY29sTmFtZScsXG4gICAgICAgICAgY3NsRGVmYXVsdFZhbHVlOiAnY29sTmFtZScsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnJG15VmFyJyxcbiAgICAgICAgICB0eXBlOiAnU3lzdGVtLlN0cmluZycsXG4gICAgICAgICAgZGVmYXVsdFZhbHVlOiAnJG15VmFyJyxcbiAgICAgICAgICBjc2xEZWZhdWx0VmFsdWU6ICckbXlWYXInLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9XG4gICk7XG5cbiAgLy8gQWRkaW5nIG1hY3JvcyBhcyBnbG9iYWwgcGFyYW1ldGVyc1xuICBjb25zdCBnbG9iYWxQYXJhbWV0ZXJzID0gdGVtcGxhdGVWYXJpYWJsZXMubWFwKCh2KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGAkJHt2Lm5hbWV9YCxcbiAgICAgIHR5cGU6ICdkeW5hbWljJyxcbiAgICB9O1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIGNsdXN0ZXJUeXBlOiAnRW5naW5lJyxcbiAgICBjbHVzdGVyOiB7XG4gICAgICBjb25uZWN0aW9uU3RyaW5nOiBuYW1lT3JJZE9yU29tZXRoaW5nLFxuICAgICAgZGF0YWJhc2VzOiBbZGF0YWJhc2VdLFxuICAgIH0sXG4gICAgZGF0YWJhc2U6IGRhdGFiYXNlLFxuICAgIGdsb2JhbFBhcmFtZXRlcnMsXG4gIH07XG59XG4iLCJpbXBvcnQgeyBmaW5kLCBzdGFydHNXaXRoIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgRGF0YVNvdXJjZUluc3RhbmNlU2V0dGluZ3MsIFNjb3BlZFZhcnMgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IERhdGFTb3VyY2VXaXRoQmFja2VuZCwgZ2V0VGVtcGxhdGVTcnYgfSBmcm9tICdAZ3JhZmFuYS9ydW50aW1lJztcbmltcG9ydCB7IGdldFRpbWVTcnYsIFRpbWVTcnYgfSBmcm9tICdhcHAvZmVhdHVyZXMvZGFzaGJvYXJkL3NlcnZpY2VzL1RpbWVTcnYnO1xuXG5pbXBvcnQgeyByZXNvdXJjZVR5cGVEaXNwbGF5TmFtZXMsIHN1cHBvcnRlZE1ldHJpY05hbWVzcGFjZXMgfSBmcm9tICcuLi9henVyZU1ldGFkYXRhJztcbmltcG9ydCB7IGdldEF1dGhUeXBlLCBnZXRBenVyZUNsb3VkLCBnZXRBenVyZVBvcnRhbFVybCB9IGZyb20gJy4uL2NyZWRlbnRpYWxzJztcbmltcG9ydCBUaW1lZ3JhaW5Db252ZXJ0ZXIgZnJvbSAnLi4vdGltZV9ncmFpbl9jb252ZXJ0ZXInO1xuaW1wb3J0IHtcbiAgQXp1cmVEYXRhU291cmNlSnNvbkRhdGEsXG4gIEF6dXJlTW9uaXRvck1ldHJpY0RlZmluaXRpb25zUmVzcG9uc2UsXG4gIEF6dXJlTW9uaXRvck1ldHJpY05hbWVzcGFjZXNSZXNwb25zZSxcbiAgQXp1cmVNb25pdG9yTWV0cmljTmFtZXNSZXNwb25zZSxcbiAgQXp1cmVNb25pdG9yTWV0cmljc01ldGFkYXRhUmVzcG9uc2UsXG4gIEF6dXJlTW9uaXRvclF1ZXJ5LFxuICBBenVyZU1vbml0b3JSZXNvdXJjZUdyb3Vwc1Jlc3BvbnNlLFxuICBBenVyZVF1ZXJ5VHlwZSxcbiAgRGF0YXNvdXJjZVZhbGlkYXRpb25SZXN1bHQsXG4gIEdldE1ldHJpY05hbWVzcGFjZXNRdWVyeSxcbiAgR2V0TWV0cmljTmFtZXNRdWVyeSxcbiAgR2V0TWV0cmljTWV0YWRhdGFRdWVyeSxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgcm91dGVOYW1lcyB9IGZyb20gJy4uL3V0aWxzL2NvbW1vbic7XG5cbmltcG9ydCBSZXNwb25zZVBhcnNlciBmcm9tICcuL3Jlc3BvbnNlX3BhcnNlcic7XG5pbXBvcnQgVXJsQnVpbGRlciBmcm9tICcuL3VybF9idWlsZGVyJztcblxuY29uc3QgZGVmYXVsdERyb3Bkb3duVmFsdWUgPSAnc2VsZWN0JztcblxuZnVuY3Rpb24gaGFzVmFsdWUoaXRlbT86IHN0cmluZykge1xuICByZXR1cm4gISEoaXRlbSAmJiBpdGVtICE9PSBkZWZhdWx0RHJvcGRvd25WYWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF6dXJlTW9uaXRvckRhdGFzb3VyY2UgZXh0ZW5kcyBEYXRhU291cmNlV2l0aEJhY2tlbmQ8QXp1cmVNb25pdG9yUXVlcnksIEF6dXJlRGF0YVNvdXJjZUpzb25EYXRhPiB7XG4gIGFwaVZlcnNpb24gPSAnMjAxOC0wMS0wMSc7XG4gIGFwaVByZXZpZXdWZXJzaW9uID0gJzIwMTctMTItMDEtcHJldmlldyc7XG4gIGxpc3RCeVJlc291cmNlR3JvdXBBcGlWZXJzaW9uID0gJzIwMjEtMDQtMDEnO1xuICBkZWZhdWx0U3Vic2NyaXB0aW9uSWQ/OiBzdHJpbmc7XG4gIHJlc291cmNlUGF0aDogc3RyaW5nO1xuICBhenVyZVBvcnRhbFVybDogc3RyaW5nO1xuICBkZWNsYXJlIHJlc291cmNlR3JvdXA6IHN0cmluZztcbiAgZGVjbGFyZSByZXNvdXJjZU5hbWU6IHN0cmluZztcbiAgdGltZVNydjogVGltZVNydjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluc3RhbmNlU2V0dGluZ3M6IERhdGFTb3VyY2VJbnN0YW5jZVNldHRpbmdzPEF6dXJlRGF0YVNvdXJjZUpzb25EYXRhPikge1xuICAgIHN1cGVyKGluc3RhbmNlU2V0dGluZ3MpO1xuXG4gICAgdGhpcy50aW1lU3J2ID0gZ2V0VGltZVNydigpO1xuICAgIHRoaXMuZGVmYXVsdFN1YnNjcmlwdGlvbklkID0gaW5zdGFuY2VTZXR0aW5ncy5qc29uRGF0YS5zdWJzY3JpcHRpb25JZDtcblxuICAgIGNvbnN0IGNsb3VkID0gZ2V0QXp1cmVDbG91ZChpbnN0YW5jZVNldHRpbmdzKTtcbiAgICB0aGlzLnJlc291cmNlUGF0aCA9IHJvdXRlTmFtZXMuYXp1cmVNb25pdG9yO1xuICAgIHRoaXMuYXp1cmVQb3J0YWxVcmwgPSBnZXRBenVyZVBvcnRhbFVybChjbG91ZCk7XG4gIH1cblxuICBpc0NvbmZpZ3VyZWQoKTogYm9vbGVhbiB7XG4gICAgLy8gSWYgdmFsaWRhdGlvbiBkaWRuJ3QgcmV0dXJuIGFueSBlcnJvciB0aGVuIHRoZSBkYXRhIHNvdXJjZSBpcyBwcm9wZXJseSBjb25maWd1cmVkXG4gICAgcmV0dXJuICF0aGlzLnZhbGlkYXRlRGF0YXNvdXJjZSgpO1xuICB9XG5cbiAgZmlsdGVyUXVlcnkoaXRlbTogQXp1cmVNb25pdG9yUXVlcnkpOiBib29sZWFuIHtcbiAgICBjb25zdCBoYXNSZXNvdXJjZVVyaSA9ICEhaXRlbT8uYXp1cmVNb25pdG9yPy5yZXNvdXJjZVVyaTtcbiAgICBjb25zdCBoYXNMZWdhY3lRdWVyeSA9XG4gICAgICBoYXNWYWx1ZShpdGVtPy5henVyZU1vbml0b3I/LnJlc291cmNlR3JvdXApICYmXG4gICAgICBoYXNWYWx1ZShpdGVtPy5henVyZU1vbml0b3I/LnJlc291cmNlTmFtZSkgJiZcbiAgICAgIGhhc1ZhbHVlKGl0ZW0/LmF6dXJlTW9uaXRvcj8ubWV0cmljRGVmaW5pdGlvbik7XG5cbiAgICByZXR1cm4gISEoXG4gICAgICBpdGVtLmhpZGUgIT09IHRydWUgJiZcbiAgICAgIChoYXNSZXNvdXJjZVVyaSB8fCBoYXNMZWdhY3lRdWVyeSkgJiZcbiAgICAgIGhhc1ZhbHVlKGl0ZW0/LmF6dXJlTW9uaXRvcj8ubWV0cmljTmFtZSkgJiZcbiAgICAgIGhhc1ZhbHVlKGl0ZW0/LmF6dXJlTW9uaXRvcj8uYWdncmVnYXRpb24pXG4gICAgKTtcbiAgfVxuXG4gIGFwcGx5VGVtcGxhdGVWYXJpYWJsZXModGFyZ2V0OiBBenVyZU1vbml0b3JRdWVyeSwgc2NvcGVkVmFyczogU2NvcGVkVmFycyk6IEF6dXJlTW9uaXRvclF1ZXJ5IHtcbiAgICBjb25zdCBpdGVtID0gdGFyZ2V0LmF6dXJlTW9uaXRvcjtcblxuICAgIGlmICghaXRlbSkge1xuICAgICAgLy8gcmV0dXJuIHRhcmdldDtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUXVlcnkgaXMgbm90IGEgdmFsaWQgQXp1cmUgTW9uaXRvciBNZXRyaWNzIHF1ZXJ5Jyk7XG4gICAgfVxuXG4gICAgLy8gZml4IGZvciB0aW1lR3JhaW5Vbml0IHdoaWNoIGlzIGEgZGVwcmVjYXRlZC9yZW1vdmVkIGZpZWxkIG5hbWVcbiAgICBpZiAoaXRlbS50aW1lR3JhaW4gJiYgaXRlbS50aW1lR3JhaW5Vbml0ICYmIGl0ZW0udGltZUdyYWluICE9PSAnYXV0bycpIHtcbiAgICAgIGl0ZW0udGltZUdyYWluID0gVGltZWdyYWluQ29udmVydGVyLmNyZWF0ZUlTTzg2MDFEdXJhdGlvbihpdGVtLnRpbWVHcmFpbiwgaXRlbS50aW1lR3JhaW5Vbml0KTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wbGF0ZVNydiA9IGdldFRlbXBsYXRlU3J2KCk7XG5cbiAgICBjb25zdCByZXNvdXJjZVVyaSA9IHRlbXBsYXRlU3J2LnJlcGxhY2UoaXRlbS5yZXNvdXJjZVVyaSwgc2NvcGVkVmFycyk7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uSWQgPSB0ZW1wbGF0ZVNydi5yZXBsYWNlKHRhcmdldC5zdWJzY3JpcHRpb24gfHwgdGhpcy5kZWZhdWx0U3Vic2NyaXB0aW9uSWQsIHNjb3BlZFZhcnMpO1xuICAgIGNvbnN0IHJlc291cmNlR3JvdXAgPSB0ZW1wbGF0ZVNydi5yZXBsYWNlKGl0ZW0ucmVzb3VyY2VHcm91cCwgc2NvcGVkVmFycyk7XG4gICAgY29uc3QgcmVzb3VyY2VOYW1lID0gdGVtcGxhdGVTcnYucmVwbGFjZShpdGVtLnJlc291cmNlTmFtZSwgc2NvcGVkVmFycyk7XG4gICAgY29uc3QgbWV0cmljTmFtZXNwYWNlID0gdGVtcGxhdGVTcnYucmVwbGFjZShpdGVtLm1ldHJpY05hbWVzcGFjZSwgc2NvcGVkVmFycyk7XG4gICAgY29uc3QgbWV0cmljRGVmaW5pdGlvbiA9IHRlbXBsYXRlU3J2LnJlcGxhY2UoaXRlbS5tZXRyaWNEZWZpbml0aW9uLCBzY29wZWRWYXJzKTtcbiAgICBjb25zdCB0aW1lR3JhaW4gPSB0ZW1wbGF0ZVNydi5yZXBsYWNlKChpdGVtLnRpbWVHcmFpbiB8fCAnJykudG9TdHJpbmcoKSwgc2NvcGVkVmFycyk7XG4gICAgY29uc3QgYWdncmVnYXRpb24gPSB0ZW1wbGF0ZVNydi5yZXBsYWNlKGl0ZW0uYWdncmVnYXRpb24sIHNjb3BlZFZhcnMpO1xuICAgIGNvbnN0IHRvcCA9IHRlbXBsYXRlU3J2LnJlcGxhY2UoaXRlbS50b3AgfHwgJycsIHNjb3BlZFZhcnMpO1xuXG4gICAgY29uc3QgZGltZW5zaW9uRmlsdGVycyA9IChpdGVtLmRpbWVuc2lvbkZpbHRlcnMgPz8gW10pXG4gICAgICAuZmlsdGVyKChmKSA9PiBmLmRpbWVuc2lvbiAmJiBmLmRpbWVuc2lvbiAhPT0gJ05vbmUnKVxuICAgICAgLm1hcCgoZikgPT4ge1xuICAgICAgICBjb25zdCBmaWx0ZXJzID0gZi5maWx0ZXJzPy5tYXAoKGZpbHRlcikgPT4gdGVtcGxhdGVTcnYucmVwbGFjZShmaWx0ZXIgPz8gJycsIHNjb3BlZFZhcnMpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaW1lbnNpb246IHRlbXBsYXRlU3J2LnJlcGxhY2UoZi5kaW1lbnNpb24sIHNjb3BlZFZhcnMpLFxuICAgICAgICAgIG9wZXJhdG9yOiBmLm9wZXJhdG9yIHx8ICdlcScsXG4gICAgICAgICAgZmlsdGVyczogZmlsdGVycyB8fCBbXSxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRhcmdldCxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uSWQsXG4gICAgICBxdWVyeVR5cGU6IEF6dXJlUXVlcnlUeXBlLkF6dXJlTW9uaXRvcixcbiAgICAgIGF6dXJlTW9uaXRvcjoge1xuICAgICAgICByZXNvdXJjZVVyaSxcbiAgICAgICAgcmVzb3VyY2VHcm91cCxcbiAgICAgICAgcmVzb3VyY2VOYW1lLFxuICAgICAgICBtZXRyaWNEZWZpbml0aW9uLFxuICAgICAgICB0aW1lR3JhaW4sXG4gICAgICAgIGFsbG93ZWRUaW1lR3JhaW5zTXM6IGl0ZW0uYWxsb3dlZFRpbWVHcmFpbnNNcyxcbiAgICAgICAgbWV0cmljTmFtZTogdGVtcGxhdGVTcnYucmVwbGFjZShpdGVtLm1ldHJpY05hbWUsIHNjb3BlZFZhcnMpLFxuICAgICAgICBtZXRyaWNOYW1lc3BhY2U6XG4gICAgICAgICAgbWV0cmljTmFtZXNwYWNlICYmIG1ldHJpY05hbWVzcGFjZSAhPT0gZGVmYXVsdERyb3Bkb3duVmFsdWUgPyBtZXRyaWNOYW1lc3BhY2UgOiBtZXRyaWNEZWZpbml0aW9uLFxuICAgICAgICBhZ2dyZWdhdGlvbjogYWdncmVnYXRpb24sXG4gICAgICAgIGRpbWVuc2lvbkZpbHRlcnMsXG4gICAgICAgIHRvcDogdG9wIHx8ICcxMCcsXG4gICAgICAgIGFsaWFzOiBpdGVtLmFsaWFzLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZ2V0U3Vic2NyaXB0aW9ucygpOiBQcm9taXNlPEFycmF5PHsgdGV4dDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+PiB7XG4gICAgaWYgKCF0aGlzLmlzQ29uZmlndXJlZCgpKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVzb3VyY2UoYCR7dGhpcy5yZXNvdXJjZVBhdGh9L3N1YnNjcmlwdGlvbnM/YXBpLXZlcnNpb249MjAxOS0wMy0wMWApLnRoZW4oKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICByZXR1cm4gUmVzcG9uc2VQYXJzZXIucGFyc2VTdWJzY3JpcHRpb25zKHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRSZXNvdXJjZUdyb3VwcyhzdWJzY3JpcHRpb25JZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVzb3VyY2UoXG4gICAgICBgJHt0aGlzLnJlc291cmNlUGF0aH0vc3Vic2NyaXB0aW9ucy8ke3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcz9hcGktdmVyc2lvbj0ke3RoaXMubGlzdEJ5UmVzb3VyY2VHcm91cEFwaVZlcnNpb259YFxuICAgICkudGhlbigocmVzdWx0OiBBenVyZU1vbml0b3JSZXNvdXJjZUdyb3Vwc1Jlc3BvbnNlKSA9PiB7XG4gICAgICByZXR1cm4gUmVzcG9uc2VQYXJzZXIucGFyc2VSZXNwb25zZVZhbHVlcyhyZXN1bHQsICduYW1lJywgJ25hbWUnKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldE1ldHJpY0RlZmluaXRpb25zKHN1YnNjcmlwdGlvbklkOiBzdHJpbmcsIHJlc291cmNlR3JvdXA6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmdldFJlc291cmNlKFxuICAgICAgYCR7dGhpcy5yZXNvdXJjZVBhdGh9L3N1YnNjcmlwdGlvbnMvJHtzdWJzY3JpcHRpb25JZH0vcmVzb3VyY2VHcm91cHMvJHtyZXNvdXJjZUdyb3VwfS9yZXNvdXJjZXM/YXBpLXZlcnNpb249JHt0aGlzLmxpc3RCeVJlc291cmNlR3JvdXBBcGlWZXJzaW9ufWBcbiAgICApXG4gICAgICAudGhlbigocmVzdWx0OiBBenVyZU1vbml0b3JNZXRyaWNEZWZpbml0aW9uc1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJldHVybiBSZXNwb25zZVBhcnNlci5wYXJzZVJlc3BvbnNlVmFsdWVzKHJlc3VsdCwgJ3R5cGUnLCAndHlwZScpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKChyZXN1bHQpID0+XG4gICAgICAgIHJlc3VsdC5maWx0ZXIoKHQpID0+IHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN1cHBvcnRlZE1ldHJpY05hbWVzcGFjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0LnZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IHN1cHBvcnRlZE1ldHJpY05hbWVzcGFjZXNbaV0udG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBsZXQgc2hvdWxkSGFyZGNvZGVCbG9iU3RvcmFnZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChyZXN1bHRbaV0udmFsdWUgPT09ICdNaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMnKSB7XG4gICAgICAgICAgICBzaG91bGRIYXJkY29kZUJsb2JTdG9yYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaG91bGRIYXJkY29kZUJsb2JTdG9yYWdlKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgdGV4dDogJ01pY3Jvc29mdC5TdG9yYWdlL3N0b3JhZ2VBY2NvdW50cy9ibG9iU2VydmljZXMnLFxuICAgICAgICAgICAgdmFsdWU6ICdNaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMvYmxvYlNlcnZpY2VzJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICB0ZXh0OiAnTWljcm9zb2Z0LlN0b3JhZ2Uvc3RvcmFnZUFjY291bnRzL2ZpbGVTZXJ2aWNlcycsXG4gICAgICAgICAgICB2YWx1ZTogJ01pY3Jvc29mdC5TdG9yYWdlL3N0b3JhZ2VBY2NvdW50cy9maWxlU2VydmljZXMnLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHRleHQ6ICdNaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMvdGFibGVTZXJ2aWNlcycsXG4gICAgICAgICAgICB2YWx1ZTogJ01pY3Jvc29mdC5TdG9yYWdlL3N0b3JhZ2VBY2NvdW50cy90YWJsZVNlcnZpY2VzJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICB0ZXh0OiAnTWljcm9zb2Z0LlN0b3JhZ2Uvc3RvcmFnZUFjY291bnRzL3F1ZXVlU2VydmljZXMnLFxuICAgICAgICAgICAgdmFsdWU6ICdNaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMvcXVldWVTZXJ2aWNlcycsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0Lm1hcCgodikgPT4gKHtcbiAgICAgICAgICB2YWx1ZTogdi52YWx1ZSxcbiAgICAgICAgICB0ZXh0OiByZXNvdXJjZVR5cGVEaXNwbGF5TmFtZXNbdi52YWx1ZS50b0xvd2VyQ2FzZSgpXSB8fCB2LnZhbHVlLFxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldFJlc291cmNlTmFtZXMoc3Vic2NyaXB0aW9uSWQ6IHN0cmluZywgcmVzb3VyY2VHcm91cDogc3RyaW5nLCBtZXRyaWNEZWZpbml0aW9uOiBzdHJpbmcsIHNraXBUb2tlbj86IHN0cmluZykge1xuICAgIGNvbnN0IHZhbGlkTWV0cmljRGVmaW5pdGlvbiA9IHN0YXJ0c1dpdGgobWV0cmljRGVmaW5pdGlvbiwgJ01pY3Jvc29mdC5TdG9yYWdlL3N0b3JhZ2VBY2NvdW50cy8nKVxuICAgICAgPyAnTWljcm9zb2Z0LlN0b3JhZ2Uvc3RvcmFnZUFjY291bnRzJ1xuICAgICAgOiBtZXRyaWNEZWZpbml0aW9uO1xuICAgIGxldCB1cmwgPVxuICAgICAgYCR7dGhpcy5yZXNvdXJjZVBhdGh9L3N1YnNjcmlwdGlvbnMvJHtzdWJzY3JpcHRpb25JZH0vcmVzb3VyY2VHcm91cHMvJHtyZXNvdXJjZUdyb3VwfS9yZXNvdXJjZXM/YCArXG4gICAgICBgJGZpbHRlcj1yZXNvdXJjZVR5cGUgZXEgJyR7dmFsaWRNZXRyaWNEZWZpbml0aW9ufScmYCArXG4gICAgICBgYXBpLXZlcnNpb249JHt0aGlzLmxpc3RCeVJlc291cmNlR3JvdXBBcGlWZXJzaW9ufWA7XG4gICAgaWYgKHNraXBUb2tlbikge1xuICAgICAgdXJsICs9IGAmJHNraXB0b2tlbj0ke3NraXBUb2tlbn1gO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZSh1cmwpLnRoZW4oYXN5bmMgKHJlc3VsdDogYW55KSA9PiB7XG4gICAgICBsZXQgbGlzdDogQXJyYXk8eyB0ZXh0OiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfT4gPSBbXTtcbiAgICAgIGlmIChzdGFydHNXaXRoKG1ldHJpY0RlZmluaXRpb24sICdNaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMvJykpIHtcbiAgICAgICAgbGlzdCA9IFJlc3BvbnNlUGFyc2VyLnBhcnNlUmVzb3VyY2VOYW1lcyhyZXN1bHQsICdNaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbGlzdFtpXS50ZXh0ICs9ICcvZGVmYXVsdCc7XG4gICAgICAgICAgbGlzdFtpXS52YWx1ZSArPSAnL2RlZmF1bHQnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0ID0gUmVzcG9uc2VQYXJzZXIucGFyc2VSZXNvdXJjZU5hbWVzKHJlc3VsdCwgbWV0cmljRGVmaW5pdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQubmV4dExpbmspIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBuZXh0TGluaywgd2Ugc2hvdWxkIHJlcXVlc3QgbW9yZSBwYWdlc1xuICAgICAgICBjb25zdCBuZXh0VVJMID0gbmV3IFVSTChyZXN1bHQubmV4dExpbmspO1xuICAgICAgICBjb25zdCBuZXh0VG9rZW4gPSBuZXh0VVJMLnNlYXJjaFBhcmFtcy5nZXQoJyRza2lwdG9rZW4nKTtcbiAgICAgICAgaWYgKCFuZXh0VG9rZW4pIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcigndW5hYmxlIHRvIHJlcXVlc3QgdGhlIG5leHQgcGFnZSBvZiByZXNvdXJjZXMnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXh0UGFnZSA9IGF3YWl0IHRoaXMuZ2V0UmVzb3VyY2VOYW1lcyhzdWJzY3JpcHRpb25JZCwgcmVzb3VyY2VHcm91cCwgbWV0cmljRGVmaW5pdGlvbiwgbmV4dFRva2VuKTtcbiAgICAgICAgbGlzdCA9IGxpc3QuY29uY2F0KG5leHRQYWdlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfSk7XG4gIH1cblxuICBnZXRNZXRyaWNOYW1lc3BhY2VzKHF1ZXJ5OiBHZXRNZXRyaWNOYW1lc3BhY2VzUXVlcnkpIHtcbiAgICBjb25zdCB1cmwgPSBVcmxCdWlsZGVyLmJ1aWxkQXp1cmVNb25pdG9yR2V0TWV0cmljTmFtZXNwYWNlc1VybChcbiAgICAgIHRoaXMucmVzb3VyY2VQYXRoLFxuICAgICAgdGhpcy5hcGlQcmV2aWV3VmVyc2lvbixcbiAgICAgIHRoaXMucmVwbGFjZVRlbXBsYXRlVmFyaWFibGVzKHF1ZXJ5KVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVzb3VyY2UodXJsKVxuICAgICAgLnRoZW4oKHJlc3VsdDogQXp1cmVNb25pdG9yTWV0cmljTmFtZXNwYWNlc1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgIHJldHVybiBSZXNwb25zZVBhcnNlci5wYXJzZVJlc3BvbnNlVmFsdWVzKHJlc3VsdCwgJ25hbWUnLCAncHJvcGVydGllcy5tZXRyaWNOYW1lc3BhY2VOYW1lJyk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAodXJsLmluY2x1ZGVzKCdNaWNyb3NvZnQuU3RvcmFnZS9zdG9yYWdlQWNjb3VudHMnKSkge1xuICAgICAgICAgIGNvbnN0IHN0b3JhZ2VOYW1lc3BhY2VzID0gW1xuICAgICAgICAgICAgJ01pY3Jvc29mdC5TdG9yYWdlL3N0b3JhZ2VBY2NvdW50cycsXG4gICAgICAgICAgICAnTWljcm9zb2Z0LlN0b3JhZ2Uvc3RvcmFnZUFjY291bnRzL2Jsb2JTZXJ2aWNlcycsXG4gICAgICAgICAgICAnTWljcm9zb2Z0LlN0b3JhZ2Uvc3RvcmFnZUFjY291bnRzL2ZpbGVTZXJ2aWNlcycsXG4gICAgICAgICAgICAnTWljcm9zb2Z0LlN0b3JhZ2Uvc3RvcmFnZUFjY291bnRzL3RhYmxlU2VydmljZXMnLFxuICAgICAgICAgICAgJ01pY3Jvc29mdC5TdG9yYWdlL3N0b3JhZ2VBY2NvdW50cy9xdWV1ZVNlcnZpY2VzJyxcbiAgICAgICAgICBdO1xuICAgICAgICAgIGZvciAoY29uc3QgbmFtZXNwYWNlIG9mIHN0b3JhZ2VOYW1lc3BhY2VzKSB7XG4gICAgICAgICAgICBpZiAoIWZpbmQocmVzdWx0LCBbJ3ZhbHVlJywgbmFtZXNwYWNlLnRvTG93ZXJDYXNlKCldKSkge1xuICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IHZhbHVlOiBuYW1lc3BhY2UsIHRleHQ6IG5hbWVzcGFjZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0TWV0cmljTmFtZXMocXVlcnk6IEdldE1ldHJpY05hbWVzUXVlcnkpIHtcbiAgICBjb25zdCB1cmwgPSBVcmxCdWlsZGVyLmJ1aWxkQXp1cmVNb25pdG9yR2V0TWV0cmljTmFtZXNVcmwoXG4gICAgICB0aGlzLnJlc291cmNlUGF0aCxcbiAgICAgIHRoaXMuYXBpVmVyc2lvbixcbiAgICAgIHRoaXMucmVwbGFjZVRlbXBsYXRlVmFyaWFibGVzKHF1ZXJ5KVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmVzb3VyY2UodXJsKS50aGVuKChyZXN1bHQ6IEF6dXJlTW9uaXRvck1ldHJpY05hbWVzUmVzcG9uc2UpID0+IHtcbiAgICAgIHJldHVybiBSZXNwb25zZVBhcnNlci5wYXJzZVJlc3BvbnNlVmFsdWVzKHJlc3VsdCwgJ25hbWUubG9jYWxpemVkVmFsdWUnLCAnbmFtZS52YWx1ZScpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0TWV0cmljTWV0YWRhdGEocXVlcnk6IEdldE1ldHJpY01ldGFkYXRhUXVlcnkpIHtcbiAgICBjb25zdCB7IG1ldHJpY05hbWUgfSA9IHF1ZXJ5O1xuICAgIGNvbnN0IHVybCA9IFVybEJ1aWxkZXIuYnVpbGRBenVyZU1vbml0b3JHZXRNZXRyaWNOYW1lc1VybChcbiAgICAgIHRoaXMucmVzb3VyY2VQYXRoLFxuICAgICAgdGhpcy5hcGlWZXJzaW9uLFxuICAgICAgdGhpcy5yZXBsYWNlVGVtcGxhdGVWYXJpYWJsZXMocXVlcnkpXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZSh1cmwpLnRoZW4oKHJlc3VsdDogQXp1cmVNb25pdG9yTWV0cmljc01ldGFkYXRhUmVzcG9uc2UpID0+IHtcbiAgICAgIHJldHVybiBSZXNwb25zZVBhcnNlci5wYXJzZU1ldGFkYXRhKHJlc3VsdCwgbWV0cmljTmFtZSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlRGF0YXNvdXJjZSgpOiBEYXRhc291cmNlVmFsaWRhdGlvblJlc3VsdCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgYXV0aFR5cGUgPSBnZXRBdXRoVHlwZSh0aGlzLmluc3RhbmNlU2V0dGluZ3MpO1xuXG4gICAgaWYgKGF1dGhUeXBlID09PSAnY2xpZW50c2VjcmV0Jykge1xuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRDb25maWdGaWVsZCh0aGlzLmluc3RhbmNlU2V0dGluZ3MuanNvbkRhdGEudGVuYW50SWQpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICAgIG1lc3NhZ2U6ICdUaGUgVGVuYW50IElkIGZpZWxkIGlzIHJlcXVpcmVkLicsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5pc1ZhbGlkQ29uZmlnRmllbGQodGhpcy5pbnN0YW5jZVNldHRpbmdzLmpzb25EYXRhLmNsaWVudElkKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXR1czogJ2Vycm9yJyxcbiAgICAgICAgICBtZXNzYWdlOiAnVGhlIENsaWVudCBJZCBmaWVsZCBpcyByZXF1aXJlZC4nLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGlzVmFsaWRDb25maWdGaWVsZChmaWVsZD86IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0eXBlb2YgZmllbGQgPT09ICdzdHJpbmcnICYmIGZpZWxkLmxlbmd0aCA+IDA7XG4gIH1cblxuICBwcml2YXRlIHJlcGxhY2VUZW1wbGF0ZVZhcmlhYmxlczxUIGV4dGVuZHMgeyBbSyBpbiBrZXlvZiBUXTogc3RyaW5nIH0+KHF1ZXJ5OiBUKSB7XG4gICAgY29uc3QgdGVtcGxhdGVTcnYgPSBnZXRUZW1wbGF0ZVNydigpO1xuXG4gICAgY29uc3Qgd29ya2luZ1F1ZXJ5OiB7IFtLIGluIGtleW9mIFRdOiBzdHJpbmcgfSA9IHsgLi4ucXVlcnkgfTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocXVlcnkpIGFzIEFycmF5PGtleW9mIFQ+O1xuICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICB3b3JraW5nUXVlcnlba2V5XSA9IHRlbXBsYXRlU3J2LnJlcGxhY2Uod29ya2luZ1F1ZXJ5W2tleV0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHdvcmtpbmdRdWVyeTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgZmluZCwgZ2V0IH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IFRpbWVHcmFpbkNvbnZlcnRlciBmcm9tICcuLi90aW1lX2dyYWluX2NvbnZlcnRlcic7XG5pbXBvcnQge1xuICBBenVyZU1vbml0b3JMb2NhbGl6ZWRWYWx1ZSxcbiAgQXp1cmVNb25pdG9yTWV0cmljQXZhaWxhYmlsaXR5TWV0YWRhdGEsXG4gIEF6dXJlTW9uaXRvck1ldHJpY3NNZXRhZGF0YVJlc3BvbnNlLFxuICBBenVyZU1vbml0b3JPcHRpb24sXG59IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3BvbnNlUGFyc2VyIHtcbiAgc3RhdGljIHBhcnNlUmVzcG9uc2VWYWx1ZXMoXG4gICAgcmVzdWx0OiBhbnksXG4gICAgdGV4dEZpZWxkTmFtZTogc3RyaW5nLFxuICAgIHZhbHVlRmllbGROYW1lOiBzdHJpbmdcbiAgKTogQXJyYXk8eyB0ZXh0OiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IGxpc3Q6IEFycmF5PHsgdGV4dDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+ID0gW107XG5cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQudmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZmluZChsaXN0LCBbJ3ZhbHVlJywgZ2V0KHJlc3VsdC52YWx1ZVtpXSwgdmFsdWVGaWVsZE5hbWUpXSkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBnZXQocmVzdWx0LnZhbHVlW2ldLCB2YWx1ZUZpZWxkTmFtZSk7XG4gICAgICAgIGNvbnN0IHRleHQgPSBnZXQocmVzdWx0LnZhbHVlW2ldLCB0ZXh0RmllbGROYW1lLCB2YWx1ZSk7XG5cbiAgICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgc3RhdGljIHBhcnNlUmVzb3VyY2VOYW1lcyhyZXN1bHQ6IGFueSwgbWV0cmljRGVmaW5pdGlvbjogc3RyaW5nKTogQXJyYXk8eyB0ZXh0OiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfT4ge1xuICAgIGNvbnN0IGxpc3Q6IEFycmF5PHsgdGV4dDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+ID0gW107XG5cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQudmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHJlc3VsdC52YWx1ZVtpXS50eXBlID09PSAnc3RyaW5nJyAmJlxuICAgICAgICByZXN1bHQudmFsdWVbaV0udHlwZS50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBtZXRyaWNEZWZpbml0aW9uLnRvTG9jYWxlTG93ZXJDYXNlKClcbiAgICAgICkge1xuICAgICAgICBsaXN0LnB1c2goe1xuICAgICAgICAgIHRleHQ6IHJlc3VsdC52YWx1ZVtpXS5uYW1lLFxuICAgICAgICAgIHZhbHVlOiByZXN1bHQudmFsdWVbaV0ubmFtZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VNZXRhZGF0YShyZXN1bHQ6IEF6dXJlTW9uaXRvck1ldHJpY3NNZXRhZGF0YVJlc3BvbnNlLCBtZXRyaWNOYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkZWZhdWx0QWdnVHlwZXMgPSBbJ05vbmUnLCAnQXZlcmFnZScsICdNaW5pbXVtJywgJ01heGltdW0nLCAnVG90YWwnLCAnQ291bnQnXTtcbiAgICBjb25zdCBtZXRyaWNEYXRhID0gcmVzdWx0Py52YWx1ZS5maW5kKCh2KSA9PiB2Lm5hbWUudmFsdWUgPT09IG1ldHJpY05hbWUpO1xuXG4gICAgaWYgKCFtZXRyaWNEYXRhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcmltYXJ5QWdnVHlwZTogJycsXG4gICAgICAgIHN1cHBvcnRlZEFnZ1R5cGVzOiBkZWZhdWx0QWdnVHlwZXMsXG4gICAgICAgIHN1cHBvcnRlZFRpbWVHcmFpbnM6IFtdLFxuICAgICAgICBkaW1lbnNpb25zOiBbXSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHByaW1hcnlBZ2dUeXBlOiBtZXRyaWNEYXRhLnByaW1hcnlBZ2dyZWdhdGlvblR5cGUsXG4gICAgICBzdXBwb3J0ZWRBZ2dUeXBlczogbWV0cmljRGF0YS5zdXBwb3J0ZWRBZ2dyZWdhdGlvblR5cGVzIHx8IGRlZmF1bHRBZ2dUeXBlcyxcblxuICAgICAgc3VwcG9ydGVkVGltZUdyYWluczogW1xuICAgICAgICB7IGxhYmVsOiAnQXV0bycsIHZhbHVlOiAnYXV0bycgfSxcbiAgICAgICAgLi4uUmVzcG9uc2VQYXJzZXIucGFyc2VUaW1lR3JhaW5zKG1ldHJpY0RhdGEubWV0cmljQXZhaWxhYmlsaXRpZXMgPz8gW10pLFxuICAgICAgXSxcbiAgICAgIGRpbWVuc2lvbnM6IFJlc3BvbnNlUGFyc2VyLnBhcnNlRGltZW5zaW9ucyhtZXRyaWNEYXRhLmRpbWVuc2lvbnMgPz8gW10pLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgcGFyc2VUaW1lR3JhaW5zKG1ldHJpY0F2YWlsYWJpbGl0aWVzOiBBenVyZU1vbml0b3JNZXRyaWNBdmFpbGFiaWxpdHlNZXRhZGF0YVtdKTogQXp1cmVNb25pdG9yT3B0aW9uW10ge1xuICAgIGNvbnN0IHRpbWVHcmFpbnM6IEF6dXJlTW9uaXRvck9wdGlvbltdID0gW107XG5cbiAgICBpZiAoIW1ldHJpY0F2YWlsYWJpbGl0aWVzKSB7XG4gICAgICByZXR1cm4gdGltZUdyYWlucztcbiAgICB9XG5cbiAgICBtZXRyaWNBdmFpbGFiaWxpdGllcy5mb3JFYWNoKChhdmFpbCkgPT4ge1xuICAgICAgaWYgKGF2YWlsLnRpbWVHcmFpbikge1xuICAgICAgICB0aW1lR3JhaW5zLnB1c2goe1xuICAgICAgICAgIGxhYmVsOiBUaW1lR3JhaW5Db252ZXJ0ZXIuY3JlYXRlVGltZUdyYWluRnJvbUlTTzg2MDFEdXJhdGlvbihhdmFpbC50aW1lR3JhaW4pLFxuICAgICAgICAgIHZhbHVlOiBhdmFpbC50aW1lR3JhaW4sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRpbWVHcmFpbnM7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VEaW1lbnNpb25zKG1ldGFkYXRhRGltZW5zaW9uczogQXp1cmVNb25pdG9yTG9jYWxpemVkVmFsdWVbXSkge1xuICAgIHJldHVybiBtZXRhZGF0YURpbWVuc2lvbnMubWFwKChkaW1lbnNpb24pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsOiBkaW1lbnNpb24ubG9jYWxpemVkVmFsdWUgfHwgZGltZW5zaW9uLnZhbHVlLFxuICAgICAgICB2YWx1ZTogZGltZW5zaW9uLnZhbHVlLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZVN1YnNjcmlwdGlvbnMocmVzdWx0OiBhbnkpOiBBcnJheTx7IHRleHQ6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9PiB7XG4gICAgY29uc3QgbGlzdDogQXJyYXk8eyB0ZXh0OiBzdHJpbmc7IHZhbHVlOiBzdHJpbmcgfT4gPSBbXTtcblxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZUZpZWxkTmFtZSA9ICdzdWJzY3JpcHRpb25JZCc7XG4gICAgY29uc3QgdGV4dEZpZWxkTmFtZSA9ICdkaXNwbGF5TmFtZSc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHQudmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZmluZChsaXN0LCBbJ3ZhbHVlJywgZ2V0KHJlc3VsdC52YWx1ZVtpXSwgdmFsdWVGaWVsZE5hbWUpXSkpIHtcbiAgICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgICB0ZXh0OiBgJHtnZXQocmVzdWx0LnZhbHVlW2ldLCB0ZXh0RmllbGROYW1lKX1gLFxuICAgICAgICAgIHZhbHVlOiBnZXQocmVzdWx0LnZhbHVlW2ldLCB2YWx1ZUZpZWxkTmFtZSksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgc3RhdGljIHBhcnNlU3Vic2NyaXB0aW9uc0ZvclNlbGVjdChyZXN1bHQ6IGFueSk6IEFycmF5PHsgbGFiZWw6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9PiB7XG4gICAgY29uc3QgbGlzdDogQXJyYXk8eyBsYWJlbDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+ID0gW107XG5cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWVGaWVsZE5hbWUgPSAnc3Vic2NyaXB0aW9uSWQnO1xuICAgIGNvbnN0IHRleHRGaWVsZE5hbWUgPSAnZGlzcGxheU5hbWUnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0LmRhdGEudmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZmluZChsaXN0LCBbJ3ZhbHVlJywgZ2V0KHJlc3VsdC5kYXRhLnZhbHVlW2ldLCB2YWx1ZUZpZWxkTmFtZSldKSkge1xuICAgICAgICBsaXN0LnB1c2goe1xuICAgICAgICAgIGxhYmVsOiBgJHtnZXQocmVzdWx0LmRhdGEudmFsdWVbaV0sIHRleHRGaWVsZE5hbWUpfSAtICR7Z2V0KHJlc3VsdC5kYXRhLnZhbHVlW2ldLCB2YWx1ZUZpZWxkTmFtZSl9YCxcbiAgICAgICAgICB2YWx1ZTogZ2V0KHJlc3VsdC5kYXRhLnZhbHVlW2ldLCB2YWx1ZUZpZWxkTmFtZSksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgc3RhdGljIHBhcnNlV29ya3NwYWNlc0ZvclNlbGVjdChyZXN1bHQ6IGFueSk6IEFycmF5PHsgbGFiZWw6IHN0cmluZzsgdmFsdWU6IHN0cmluZyB9PiB7XG4gICAgY29uc3QgbGlzdDogQXJyYXk8eyBsYWJlbDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0+ID0gW107XG5cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWVGaWVsZE5hbWUgPSAnY3VzdG9tZXJJZCc7XG4gICAgY29uc3QgdGV4dEZpZWxkTmFtZSA9ICduYW1lJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5kYXRhLnZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWZpbmQobGlzdCwgWyd2YWx1ZScsIGdldChyZXN1bHQuZGF0YS52YWx1ZVtpXS5wcm9wZXJ0aWVzLCB2YWx1ZUZpZWxkTmFtZSldKSkge1xuICAgICAgICBsaXN0LnB1c2goe1xuICAgICAgICAgIGxhYmVsOiBnZXQocmVzdWx0LmRhdGEudmFsdWVbaV0sIHRleHRGaWVsZE5hbWUpLFxuICAgICAgICAgIHZhbHVlOiBnZXQocmVzdWx0LmRhdGEudmFsdWVbaV0ucHJvcGVydGllcywgdmFsdWVGaWVsZE5hbWUpLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR2V0TWV0cmljTmFtZXNwYWNlc1F1ZXJ5LCBHZXRNZXRyaWNOYW1lc1F1ZXJ5IH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVcmxCdWlsZGVyIHtcbiAgc3RhdGljIGJ1aWxkUmVzb3VyY2VVcmkoXG4gICAgc3Vic2NyaXB0aW9uSWQ6IHN0cmluZyxcbiAgICByZXNvdXJjZUdyb3VwOiBzdHJpbmcsXG4gICAgbWV0cmljRGVmaW5pdGlvbjogc3RyaW5nLFxuICAgIHJlc291cmNlTmFtZTogc3RyaW5nXG4gICkge1xuICAgIGNvbnN0IG1ldHJpY0RlZmluaXRpb25BcnJheSA9IG1ldHJpY0RlZmluaXRpb24uc3BsaXQoJy8nKTtcbiAgICBjb25zdCByZXNvdXJjZU5hbWVBcnJheSA9IHJlc291cmNlTmFtZS5zcGxpdCgnLycpO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gbWV0cmljRGVmaW5pdGlvbkFycmF5LnNoaWZ0KCk7XG4gICAgY29uc3QgdXJsQXJyYXkgPSBbJy9zdWJzY3JpcHRpb25zJywgc3Vic2NyaXB0aW9uSWQsICdyZXNvdXJjZUdyb3VwcycsIHJlc291cmNlR3JvdXAsICdwcm92aWRlcnMnLCBwcm92aWRlcl07XG4gICAgZm9yIChjb25zdCBpIGluIG1ldHJpY0RlZmluaXRpb25BcnJheSkge1xuICAgICAgdXJsQXJyYXkucHVzaChtZXRyaWNEZWZpbml0aW9uQXJyYXlbaV0pO1xuICAgICAgdXJsQXJyYXkucHVzaChyZXNvdXJjZU5hbWVBcnJheVtpXSk7XG4gICAgfVxuICAgIHJldHVybiB1cmxBcnJheS5qb2luKCcvJyk7XG4gIH1cblxuICBzdGF0aWMgYnVpbGRBenVyZU1vbml0b3JHZXRNZXRyaWNOYW1lc3BhY2VzVXJsKGJhc2VVcmw6IHN0cmluZywgYXBpVmVyc2lvbjogc3RyaW5nLCBxdWVyeTogR2V0TWV0cmljTmFtZXNwYWNlc1F1ZXJ5KSB7XG4gICAgbGV0IHJlc291cmNlVXJpOiBzdHJpbmc7XG5cbiAgICBpZiAoJ3Jlc291cmNlVXJpJyBpbiBxdWVyeSkge1xuICAgICAgcmVzb3VyY2VVcmkgPSBxdWVyeS5yZXNvdXJjZVVyaTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBzdWJzY3JpcHRpb24sIHJlc291cmNlR3JvdXAsIG1ldHJpY0RlZmluaXRpb24sIHJlc291cmNlTmFtZSB9ID0gcXVlcnk7XG4gICAgICByZXNvdXJjZVVyaSA9IFVybEJ1aWxkZXIuYnVpbGRSZXNvdXJjZVVyaShzdWJzY3JpcHRpb24sIHJlc291cmNlR3JvdXAsIG1ldHJpY0RlZmluaXRpb24sIHJlc291cmNlTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGAke2Jhc2VVcmx9JHtyZXNvdXJjZVVyaX0vcHJvdmlkZXJzL21pY3Jvc29mdC5pbnNpZ2h0cy9tZXRyaWNOYW1lc3BhY2VzP2FwaS12ZXJzaW9uPSR7YXBpVmVyc2lvbn1gO1xuICB9XG5cbiAgc3RhdGljIGJ1aWxkQXp1cmVNb25pdG9yR2V0TWV0cmljTmFtZXNVcmwoYmFzZVVybDogc3RyaW5nLCBhcGlWZXJzaW9uOiBzdHJpbmcsIHF1ZXJ5OiBHZXRNZXRyaWNOYW1lc1F1ZXJ5KSB7XG4gICAgbGV0IHJlc291cmNlVXJpOiBzdHJpbmc7XG4gICAgY29uc3QgeyBtZXRyaWNOYW1lc3BhY2UgfSA9IHF1ZXJ5O1xuXG4gICAgaWYgKCdyZXNvdXJjZVVyaScgaW4gcXVlcnkpIHtcbiAgICAgIHJlc291cmNlVXJpID0gcXVlcnkucmVzb3VyY2VVcmk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgc3Vic2NyaXB0aW9uLCByZXNvdXJjZUdyb3VwLCBtZXRyaWNEZWZpbml0aW9uLCByZXNvdXJjZU5hbWUgfSA9IHF1ZXJ5O1xuICAgICAgcmVzb3VyY2VVcmkgPSBVcmxCdWlsZGVyLmJ1aWxkUmVzb3VyY2VVcmkoc3Vic2NyaXB0aW9uLCByZXNvdXJjZUdyb3VwLCBtZXRyaWNEZWZpbml0aW9uLCByZXNvdXJjZU5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBgJHtiYXNlVXJsfSR7cmVzb3VyY2VVcml9L3Byb3ZpZGVycy9taWNyb3NvZnQuaW5zaWdodHMvbWV0cmljZGVmaW5pdGlvbnM/YXBpLXZlcnNpb249JHthcGlWZXJzaW9ufWAgK1xuICAgICAgYCZtZXRyaWNuYW1lc3BhY2U9JHtlbmNvZGVVUklDb21wb25lbnQobWV0cmljTmFtZXNwYWNlKX1gXG4gICAgKTtcbiAgfVxufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGxvZGFzaC9pbXBvcnQtc2NvcGVcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IFNjb3BlZFZhcnMgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IGdldFRlbXBsYXRlU3J2LCBEYXRhU291cmNlV2l0aEJhY2tlbmQgfSBmcm9tICdAZ3JhZmFuYS9ydW50aW1lJztcblxuaW1wb3J0IHsgQXp1cmVNb25pdG9yUXVlcnksIEF6dXJlRGF0YVNvdXJjZUpzb25EYXRhLCBBenVyZVF1ZXJ5VHlwZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGludGVycG9sYXRlVmFyaWFibGUgfSBmcm9tICcuLi91dGlscy9jb21tb24nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBenVyZVJlc291cmNlR3JhcGhEYXRhc291cmNlIGV4dGVuZHMgRGF0YVNvdXJjZVdpdGhCYWNrZW5kPFxuICBBenVyZU1vbml0b3JRdWVyeSxcbiAgQXp1cmVEYXRhU291cmNlSnNvbkRhdGFcbj4ge1xuICBmaWx0ZXJRdWVyeShpdGVtOiBBenVyZU1vbml0b3JRdWVyeSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIWl0ZW0uYXp1cmVSZXNvdXJjZUdyYXBoPy5xdWVyeTtcbiAgfVxuXG4gIGFwcGx5VGVtcGxhdGVWYXJpYWJsZXModGFyZ2V0OiBBenVyZU1vbml0b3JRdWVyeSwgc2NvcGVkVmFyczogU2NvcGVkVmFycyk6IEF6dXJlTW9uaXRvclF1ZXJ5IHtcbiAgICBjb25zdCBpdGVtID0gdGFyZ2V0LmF6dXJlUmVzb3VyY2VHcmFwaDtcbiAgICBpZiAoIWl0ZW0pIHtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgY29uc3QgdGVtcGxhdGVTcnYgPSBnZXRUZW1wbGF0ZVNydigpO1xuICAgIGNvbnN0IHZhcmlhYmxlTmFtZXMgPSB0ZW1wbGF0ZVNydi5nZXRWYXJpYWJsZXMoKS5tYXAoKHYpID0+IGAkJHt2Lm5hbWV9YCk7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uVmFyID0gXy5maW5kKHRhcmdldC5zdWJzY3JpcHRpb25zLCAoc3ViKSA9PiBfLmluY2x1ZGVzKHZhcmlhYmxlTmFtZXMsIHN1YikpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFN1YnNjcmlwdGlvbnMgPSB0ZW1wbGF0ZVNydlxuICAgICAgLnJlcGxhY2Uoc3Vic2NyaXB0aW9uVmFyLCBzY29wZWRWYXJzLCAodjogYW55KSA9PiB2KVxuICAgICAgLnNwbGl0KCcsJylcbiAgICAgIC5maWx0ZXIoKHYpID0+IHYubGVuZ3RoID4gMCk7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IFtcbiAgICAgIC4uLmludGVycG9sYXRlZFN1YnNjcmlwdGlvbnMsXG4gICAgICAuLi5fLmZpbHRlcih0YXJnZXQuc3Vic2NyaXB0aW9ucywgKHN1YikgPT4gIV8uaW5jbHVkZXModmFyaWFibGVOYW1lcywgc3ViKSksXG4gICAgXTtcbiAgICBjb25zdCBxdWVyeSA9IHRlbXBsYXRlU3J2LnJlcGxhY2UoaXRlbS5xdWVyeSwgc2NvcGVkVmFycywgaW50ZXJwb2xhdGVWYXJpYWJsZSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4udGFyZ2V0LFxuICAgICAgcXVlcnlUeXBlOiBBenVyZVF1ZXJ5VHlwZS5BenVyZVJlc291cmNlR3JhcGgsXG4gICAgICBzdWJzY3JpcHRpb25zLFxuICAgICAgYXp1cmVSZXNvdXJjZUdyYXBoOiB7XG4gICAgICAgIHJlc3VsdEZvcm1hdDogJ3RhYmxlJyxcbiAgICAgICAgcXVlcnksXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEVkaXRvclJvd3MsIEVkaXRvclJvdywgRWRpdG9yRmllbGRHcm91cCB9IGZyb20gJ0BncmFmYW5hL2V4cGVyaW1lbnRhbCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdAZ3JhZmFuYS9ydW50aW1lJztcbmltcG9ydCB7IElubGluZUZpZWxkUm93IH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5pbXBvcnQgRGF0YXNvdXJjZSBmcm9tICcuLi8uLi9kYXRhc291cmNlJztcbmltcG9ydCB7IEF6dXJlTW9uaXRvckVycm9yaXNoLCBBenVyZU1vbml0b3JPcHRpb24sIEF6dXJlTW9uaXRvclF1ZXJ5IH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbkZpZWxkIGZyb20gJy4uL1N1YnNjcmlwdGlvbkZpZWxkJztcblxuaW1wb3J0IFF1ZXJ5RmllbGQgZnJvbSAnLi9RdWVyeUZpZWxkJztcblxuaW50ZXJmYWNlIEFyZ1F1ZXJ5RWRpdG9yUHJvcHMge1xuICBxdWVyeTogQXp1cmVNb25pdG9yUXVlcnk7XG4gIGRhdGFzb3VyY2U6IERhdGFzb3VyY2U7XG4gIHN1YnNjcmlwdGlvbklkPzogc3RyaW5nO1xuICBvbkNoYW5nZTogKG5ld1F1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSkgPT4gdm9pZDtcbiAgdmFyaWFibGVPcHRpb25Hcm91cDogeyBsYWJlbDogc3RyaW5nOyBvcHRpb25zOiBBenVyZU1vbml0b3JPcHRpb25bXSB9O1xuICBzZXRFcnJvcjogKHNvdXJjZTogc3RyaW5nLCBlcnJvcjogQXp1cmVNb25pdG9yRXJyb3Jpc2ggfCB1bmRlZmluZWQpID0+IHZvaWQ7XG59XG5cbmNvbnN0IEVSUk9SX1NPVVJDRSA9ICdhcmctc3Vic2NyaXB0aW9ucyc7XG5jb25zdCBBcmdRdWVyeUVkaXRvcjogUmVhY3QuRkM8QXJnUXVlcnlFZGl0b3JQcm9wcz4gPSAoe1xuICBxdWVyeSxcbiAgZGF0YXNvdXJjZSxcbiAgc3Vic2NyaXB0aW9uSWQsXG4gIHZhcmlhYmxlT3B0aW9uR3JvdXAsXG4gIG9uQ2hhbmdlLFxuICBzZXRFcnJvcixcbn0pID0+IHtcbiAgY29uc3QgZmV0Y2hlZFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IFtzdWJzY3JpcHRpb25zLCBzZXRTdWJzY3JpcHRpb25zXSA9IHVzZVN0YXRlPEF6dXJlTW9uaXRvck9wdGlvbltdPihbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZmV0Y2hlZFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmV0Y2hlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICBkYXRhc291cmNlLmF6dXJlTW9uaXRvckRhdGFzb3VyY2VcbiAgICAgIC5nZXRTdWJzY3JpcHRpb25zKClcbiAgICAgIC50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgIGNvbnN0IGZldGNoZWRTdWJzY3JpcHRpb25zID0gcmVzdWx0cy5tYXAoKHYpID0+ICh7IGxhYmVsOiB2LnRleHQsIHZhbHVlOiB2LnZhbHVlLCBkZXNjcmlwdGlvbjogdi52YWx1ZSB9KSk7XG4gICAgICAgIHNldFN1YnNjcmlwdGlvbnMoZmV0Y2hlZFN1YnNjcmlwdGlvbnMpO1xuICAgICAgICBzZXRFcnJvcihFUlJPUl9TT1VSQ0UsIHVuZGVmaW5lZCk7XG5cbiAgICAgICAgaWYgKCFxdWVyeS5zdWJzY3JpcHRpb25zPy5sZW5ndGggJiYgZmV0Y2hlZFN1YnNjcmlwdGlvbnM/Lmxlbmd0aCkge1xuICAgICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICAgIC4uLnF1ZXJ5LFxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uczogW3F1ZXJ5LnN1YnNjcmlwdGlvbiA/PyBmZXRjaGVkU3Vic2NyaXB0aW9uc1swXS52YWx1ZV0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4gc2V0RXJyb3IoRVJST1JfU09VUkNFLCBlcnIpKTtcbiAgfSwgW2RhdGFzb3VyY2UsIG9uQ2hhbmdlLCBxdWVyeSwgc2V0RXJyb3JdKTtcblxuICBpZiAoY29uZmlnLmZlYXR1cmVUb2dnbGVzLmF6dXJlTW9uaXRvckV4cGVyaW1lbnRhbFVJKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuIGRhdGEtdGVzdGlkPVwiYXp1cmUtbW9uaXRvci1hcmctcXVlcnktZWRpdG9yLXdpdGgtZXhwZXJpbWVudGFsLXVpXCI+XG4gICAgICAgIDxFZGl0b3JSb3dzPlxuICAgICAgICAgIDxFZGl0b3JSb3c+XG4gICAgICAgICAgICA8RWRpdG9yRmllbGRHcm91cD5cbiAgICAgICAgICAgICAgPFN1YnNjcmlwdGlvbkZpZWxkXG4gICAgICAgICAgICAgICAgbXVsdGlTZWxlY3RcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zPXtzdWJzY3JpcHRpb25zfVxuICAgICAgICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICAgICAgICBkYXRhc291cmNlPXtkYXRhc291cmNlfVxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbklkPXtzdWJzY3JpcHRpb25JZH1cbiAgICAgICAgICAgICAgICB2YXJpYWJsZU9wdGlvbkdyb3VwPXt2YXJpYWJsZU9wdGlvbkdyb3VwfVxuICAgICAgICAgICAgICAgIG9uUXVlcnlDaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRWRpdG9yRmllbGRHcm91cD5cbiAgICAgICAgICA8L0VkaXRvclJvdz5cbiAgICAgICAgPC9FZGl0b3JSb3dzPlxuICAgICAgICA8UXVlcnlGaWVsZFxuICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICBkYXRhc291cmNlPXtkYXRhc291cmNlfVxuICAgICAgICAgIHN1YnNjcmlwdGlvbklkPXtzdWJzY3JpcHRpb25JZH1cbiAgICAgICAgICB2YXJpYWJsZU9wdGlvbkdyb3VwPXt2YXJpYWJsZU9wdGlvbkdyb3VwfVxuICAgICAgICAgIG9uUXVlcnlDaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgLz5cbiAgICAgIDwvc3Bhbj5cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiYXp1cmUtbW9uaXRvci1hcmctcXVlcnktZWRpdG9yXCI+XG4gICAgICAgIDxJbmxpbmVGaWVsZFJvdz5cbiAgICAgICAgICA8U3Vic2NyaXB0aW9uRmllbGRcbiAgICAgICAgICAgIG11bHRpU2VsZWN0XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zPXtzdWJzY3JpcHRpb25zfVxuICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbklkPXtzdWJzY3JpcHRpb25JZH1cbiAgICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0lubGluZUZpZWxkUm93PlxuXG4gICAgICAgIDxRdWVyeUZpZWxkXG4gICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgc3Vic2NyaXB0aW9uSWQ9e3N1YnNjcmlwdGlvbklkfVxuICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgb25RdWVyeUNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgc2V0RXJyb3I9e3NldEVycm9yfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQXJnUXVlcnlFZGl0b3I7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IENvZGVFZGl0b3IgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmltcG9ydCB7IEF6dXJlUXVlcnlFZGl0b3JGaWVsZFByb3BzIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5jb25zdCBRdWVyeUZpZWxkOiBSZWFjdC5GQzxBenVyZVF1ZXJ5RWRpdG9yRmllbGRQcm9wcz4gPSAoeyBxdWVyeSwgb25RdWVyeUNoYW5nZSB9KSA9PiB7XG4gIGNvbnN0IG9uQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKG5ld1F1ZXJ5OiBzdHJpbmcpID0+IHtcbiAgICAgIG9uUXVlcnlDaGFuZ2Uoe1xuICAgICAgICAuLi5xdWVyeSxcbiAgICAgICAgYXp1cmVSZXNvdXJjZUdyYXBoOiB7XG4gICAgICAgICAgLi4ucXVlcnkuYXp1cmVSZXNvdXJjZUdyYXBoLFxuICAgICAgICAgIHF1ZXJ5OiBuZXdRdWVyeSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW29uUXVlcnlDaGFuZ2UsIHF1ZXJ5XVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPENvZGVFZGl0b3JcbiAgICAgIHZhbHVlPXtxdWVyeS5henVyZVJlc291cmNlR3JhcGg/LnF1ZXJ5ID8/ICcnfVxuICAgICAgbGFuZ3VhZ2U9XCJrdXN0b1wiXG4gICAgICBoZWlnaHQ9ezIwMH1cbiAgICAgIHdpZHRoPVwiMTAwJVwiXG4gICAgICBzaG93TWluaU1hcD17ZmFsc2V9XG4gICAgICBvbkJsdXI9e29uQ2hhbmdlfVxuICAgICAgb25TYXZlPXtvbkNoYW5nZX1cbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUXVlcnlGaWVsZDtcbiIsImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL0FyZ1F1ZXJ5RWRpdG9yJztcbiIsImltcG9ydCBSZWFjdCwgeyBDaGFuZ2VFdmVudCwgRnVuY3Rpb25Db21wb25lbnQsIHVzZUVmZmVjdCwgdXNlUmVkdWNlciwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFNlbGVjdGFibGVWYWx1ZSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgSW5saW5lRm9ybUxhYmVsLCBMZWdhY3lGb3JtcywgQnV0dG9uLCBTZWxlY3QgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmltcG9ydCB7IGlzQ3JlZGVudGlhbHNDb21wbGV0ZSB9IGZyb20gJy4uL2NyZWRlbnRpYWxzJztcbmltcG9ydCB7IEF6dXJlQXV0aFR5cGUsIEF6dXJlQ3JlZGVudGlhbHMgfSBmcm9tICcuLi90eXBlcyc7XG5jb25zdCB7IElucHV0IH0gPSBMZWdhY3lGb3JtcztcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gIG1hbmFnZWRJZGVudGl0eUVuYWJsZWQ6IGJvb2xlYW47XG4gIGNyZWRlbnRpYWxzOiBBenVyZUNyZWRlbnRpYWxzO1xuICBhenVyZUNsb3VkT3B0aW9ucz86IFNlbGVjdGFibGVWYWx1ZVtdO1xuICBvbkNyZWRlbnRpYWxzQ2hhbmdlPzogKHVwZGF0ZWRDcmVkZW50aWFsczogQXp1cmVDcmVkZW50aWFscykgPT4gdm9pZDtcbiAgZ2V0U3Vic2NyaXB0aW9ucz86ICgpID0+IFByb21pc2U8U2VsZWN0YWJsZVZhbHVlW10+O1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIGNoaWxkcmVuPzogSlNYLkVsZW1lbnQ7XG59XG5cbmNvbnN0IGF1dGhUeXBlT3B0aW9uczogQXJyYXk8U2VsZWN0YWJsZVZhbHVlPEF6dXJlQXV0aFR5cGU+PiA9IFtcbiAge1xuICAgIHZhbHVlOiAnbXNpJyxcbiAgICBsYWJlbDogJ01hbmFnZWQgSWRlbnRpdHknLFxuICB9LFxuICB7XG4gICAgdmFsdWU6ICdjbGllbnRzZWNyZXQnLFxuICAgIGxhYmVsOiAnQXBwIFJlZ2lzdHJhdGlvbicsXG4gIH0sXG5dO1xuXG5leHBvcnQgY29uc3QgQXp1cmVDcmVkZW50aWFsc0Zvcm06IEZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBjcmVkZW50aWFscywgYXp1cmVDbG91ZE9wdGlvbnMsIG9uQ3JlZGVudGlhbHNDaGFuZ2UsIGdldFN1YnNjcmlwdGlvbnMsIGRpc2FibGVkIH0gPSBwcm9wcztcbiAgY29uc3QgaGFzUmVxdWlyZWRGaWVsZHMgPSBpc0NyZWRlbnRpYWxzQ29tcGxldGUoY3JlZGVudGlhbHMpO1xuXG4gIGNvbnN0IFtzdWJzY3JpcHRpb25zLCBzZXRTdWJzY3JpcHRpb25zXSA9IHVzZVN0YXRlPEFycmF5PFNlbGVjdGFibGVWYWx1ZTxzdHJpbmc+Pj4oW10pO1xuICBjb25zdCBbbG9hZFN1YnNjcmlwdGlvbnNDbGlja2VkLCBvbkxvYWRTdWJzY3JpcHRpb25zXSA9IHVzZVJlZHVjZXIoKHZhbCkgPT4gdmFsICsgMSwgMCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFnZXRTdWJzY3JpcHRpb25zIHx8ICFoYXNSZXF1aXJlZEZpZWxkcykge1xuICAgICAgdXBkYXRlU3Vic2NyaXB0aW9ucyhbXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBjYW5jZWxlZCA9IGZhbHNlO1xuICAgIGdldFN1YnNjcmlwdGlvbnMoKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIGlmICghY2FuY2VsZWQpIHtcbiAgICAgICAgdXBkYXRlU3Vic2NyaXB0aW9ucyhyZXN1bHQsIGxvYWRTdWJzY3JpcHRpb25zQ2xpY2tlZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNhbmNlbGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIC8vIFRoaXMgZWZmZWN0IGlzIGludGVuZGVkIHRvIGJlIGNhbGxlZCBvbmx5IG9uY2UgaW5pdGlhbGx5IGFuZCBvbiBMb2FkIFN1YnNjcmlwdGlvbnMgY2xpY2tcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtsb2FkU3Vic2NyaXB0aW9uc0NsaWNrZWRdKTtcblxuICBjb25zdCB1cGRhdGVTdWJzY3JpcHRpb25zID0gKHJlY2VpdmVkOiBBcnJheTxTZWxlY3RhYmxlVmFsdWU8c3RyaW5nPj4sIGF1dG9TZWxlY3QgPSBmYWxzZSkgPT4ge1xuICAgIHNldFN1YnNjcmlwdGlvbnMocmVjZWl2ZWQpO1xuICAgIGlmIChnZXRTdWJzY3JpcHRpb25zKSB7XG4gICAgICBpZiAoYXV0b1NlbGVjdCAmJiAhY3JlZGVudGlhbHMuZGVmYXVsdFN1YnNjcmlwdGlvbklkICYmIHJlY2VpdmVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gU2VsZWN0aW5nIHRoZSBkZWZhdWx0IHN1YnNjcmlwdGlvbiBpZiBzdWJzY3JpcHRpb25zIHJlY2VpdmVkIGJ1dCBubyBkZWZhdWx0IHN1YnNjcmlwdGlvbiBzZWxlY3RlZFxuICAgICAgICBvblN1YnNjcmlwdGlvbkNoYW5nZShyZWNlaXZlZFswXSk7XG4gICAgICB9IGVsc2UgaWYgKGNyZWRlbnRpYWxzLmRlZmF1bHRTdWJzY3JpcHRpb25JZCkge1xuICAgICAgICBjb25zdCBmb3VuZCA9IHJlY2VpdmVkLmZpbmQoKG9wdCkgPT4gb3B0LnZhbHVlID09PSBjcmVkZW50aWFscy5kZWZhdWx0U3Vic2NyaXB0aW9uSWQpO1xuICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgLy8gVW5zZWxlY3RpbmcgdGhlIGRlZmF1bHQgc3Vic2NyaXB0aW9uIGlmIGl0IGlzbid0IGZvdW5kIGFtb25nIHRoZSByZWNlaXZlZCBzdWJzY3JpcHRpb25zXG4gICAgICAgICAgb25TdWJzY3JpcHRpb25DaGFuZ2UodW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbkF1dGhUeXBlQ2hhbmdlID0gKHNlbGVjdGVkOiBTZWxlY3RhYmxlVmFsdWU8QXp1cmVBdXRoVHlwZT4pID0+IHtcbiAgICBpZiAob25DcmVkZW50aWFsc0NoYW5nZSkge1xuICAgICAgc2V0U3Vic2NyaXB0aW9ucyhbXSk7XG4gICAgICBjb25zdCB1cGRhdGVkOiBBenVyZUNyZWRlbnRpYWxzID0ge1xuICAgICAgICAuLi5jcmVkZW50aWFscyxcbiAgICAgICAgYXV0aFR5cGU6IHNlbGVjdGVkLnZhbHVlIHx8ICdtc2knLFxuICAgICAgICBkZWZhdWx0U3Vic2NyaXB0aW9uSWQ6IHVuZGVmaW5lZCxcbiAgICAgIH07XG4gICAgICBvbkNyZWRlbnRpYWxzQ2hhbmdlKHVwZGF0ZWQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbkF6dXJlQ2xvdWRDaGFuZ2UgPSAoc2VsZWN0ZWQ6IFNlbGVjdGFibGVWYWx1ZTxzdHJpbmc+KSA9PiB7XG4gICAgaWYgKG9uQ3JlZGVudGlhbHNDaGFuZ2UgJiYgY3JlZGVudGlhbHMuYXV0aFR5cGUgPT09ICdjbGllbnRzZWNyZXQnKSB7XG4gICAgICBzZXRTdWJzY3JpcHRpb25zKFtdKTtcbiAgICAgIGNvbnN0IHVwZGF0ZWQ6IEF6dXJlQ3JlZGVudGlhbHMgPSB7XG4gICAgICAgIC4uLmNyZWRlbnRpYWxzLFxuICAgICAgICBhenVyZUNsb3VkOiBzZWxlY3RlZC52YWx1ZSxcbiAgICAgICAgZGVmYXVsdFN1YnNjcmlwdGlvbklkOiB1bmRlZmluZWQsXG4gICAgICB9O1xuICAgICAgb25DcmVkZW50aWFsc0NoYW5nZSh1cGRhdGVkKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb25UZW5hbnRJZENoYW5nZSA9IChldmVudDogQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBpZiAob25DcmVkZW50aWFsc0NoYW5nZSAmJiBjcmVkZW50aWFscy5hdXRoVHlwZSA9PT0gJ2NsaWVudHNlY3JldCcpIHtcbiAgICAgIHNldFN1YnNjcmlwdGlvbnMoW10pO1xuICAgICAgY29uc3QgdXBkYXRlZDogQXp1cmVDcmVkZW50aWFscyA9IHtcbiAgICAgICAgLi4uY3JlZGVudGlhbHMsXG4gICAgICAgIHRlbmFudElkOiBldmVudC50YXJnZXQudmFsdWUsXG4gICAgICAgIGRlZmF1bHRTdWJzY3JpcHRpb25JZDogdW5kZWZpbmVkLFxuICAgICAgfTtcbiAgICAgIG9uQ3JlZGVudGlhbHNDaGFuZ2UodXBkYXRlZCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uQ2xpZW50SWRDaGFuZ2UgPSAoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgaWYgKG9uQ3JlZGVudGlhbHNDaGFuZ2UgJiYgY3JlZGVudGlhbHMuYXV0aFR5cGUgPT09ICdjbGllbnRzZWNyZXQnKSB7XG4gICAgICBzZXRTdWJzY3JpcHRpb25zKFtdKTtcbiAgICAgIGNvbnN0IHVwZGF0ZWQ6IEF6dXJlQ3JlZGVudGlhbHMgPSB7XG4gICAgICAgIC4uLmNyZWRlbnRpYWxzLFxuICAgICAgICBjbGllbnRJZDogZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgICAgICBkZWZhdWx0U3Vic2NyaXB0aW9uSWQ6IHVuZGVmaW5lZCxcbiAgICAgIH07XG4gICAgICBvbkNyZWRlbnRpYWxzQ2hhbmdlKHVwZGF0ZWQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbkNsaWVudFNlY3JldENoYW5nZSA9IChldmVudDogQ2hhbmdlRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBpZiAob25DcmVkZW50aWFsc0NoYW5nZSAmJiBjcmVkZW50aWFscy5hdXRoVHlwZSA9PT0gJ2NsaWVudHNlY3JldCcpIHtcbiAgICAgIHNldFN1YnNjcmlwdGlvbnMoW10pO1xuICAgICAgY29uc3QgdXBkYXRlZDogQXp1cmVDcmVkZW50aWFscyA9IHtcbiAgICAgICAgLi4uY3JlZGVudGlhbHMsXG4gICAgICAgIGNsaWVudFNlY3JldDogZXZlbnQudGFyZ2V0LnZhbHVlLFxuICAgICAgICBkZWZhdWx0U3Vic2NyaXB0aW9uSWQ6IHVuZGVmaW5lZCxcbiAgICAgIH07XG4gICAgICBvbkNyZWRlbnRpYWxzQ2hhbmdlKHVwZGF0ZWQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbkNsaWVudFNlY3JldFJlc2V0ID0gKCkgPT4ge1xuICAgIGlmIChvbkNyZWRlbnRpYWxzQ2hhbmdlICYmIGNyZWRlbnRpYWxzLmF1dGhUeXBlID09PSAnY2xpZW50c2VjcmV0Jykge1xuICAgICAgc2V0U3Vic2NyaXB0aW9ucyhbXSk7XG4gICAgICBjb25zdCB1cGRhdGVkOiBBenVyZUNyZWRlbnRpYWxzID0ge1xuICAgICAgICAuLi5jcmVkZW50aWFscyxcbiAgICAgICAgY2xpZW50U2VjcmV0OiAnJyxcbiAgICAgICAgZGVmYXVsdFN1YnNjcmlwdGlvbklkOiB1bmRlZmluZWQsXG4gICAgICB9O1xuICAgICAgb25DcmVkZW50aWFsc0NoYW5nZSh1cGRhdGVkKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb25TdWJzY3JpcHRpb25DaGFuZ2UgPSAoc2VsZWN0ZWQ6IFNlbGVjdGFibGVWYWx1ZTxzdHJpbmc+IHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgaWYgKG9uQ3JlZGVudGlhbHNDaGFuZ2UpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZWQ6IEF6dXJlQ3JlZGVudGlhbHMgPSB7XG4gICAgICAgIC4uLmNyZWRlbnRpYWxzLFxuICAgICAgICBkZWZhdWx0U3Vic2NyaXB0aW9uSWQ6IHNlbGVjdGVkPy52YWx1ZSxcbiAgICAgIH07XG4gICAgICBvbkNyZWRlbnRpYWxzQ2hhbmdlKHVwZGF0ZWQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2YtZm9ybS1ncm91cFwiPlxuICAgICAge3Byb3BzLm1hbmFnZWRJZGVudGl0eUVuYWJsZWQgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm0taW5saW5lXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICAgICAgICA8SW5saW5lRm9ybUxhYmVsIGNsYXNzTmFtZT1cIndpZHRoLTEyXCIgdG9vbHRpcD1cIkNob29zZSB0aGUgdHlwZSBvZiBhdXRoZW50aWNhdGlvbiB0byBBenVyZSBzZXJ2aWNlc1wiPlxuICAgICAgICAgICAgICBBdXRoZW50aWNhdGlvblxuICAgICAgICAgICAgPC9JbmxpbmVGb3JtTGFiZWw+XG4gICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIndpZHRoLTE1XCJcbiAgICAgICAgICAgICAgdmFsdWU9e2F1dGhUeXBlT3B0aW9ucy5maW5kKChvcHQpID0+IG9wdC52YWx1ZSA9PT0gY3JlZGVudGlhbHMuYXV0aFR5cGUpfVxuICAgICAgICAgICAgICBvcHRpb25zPXthdXRoVHlwZU9wdGlvbnN9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkF1dGhUeXBlQ2hhbmdlfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7Y3JlZGVudGlhbHMuYXV0aFR5cGUgPT09ICdjbGllbnRzZWNyZXQnICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICB7YXp1cmVDbG91ZE9wdGlvbnMgJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtLWlubGluZVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm1cIj5cbiAgICAgICAgICAgICAgICA8SW5saW5lRm9ybUxhYmVsIGNsYXNzTmFtZT1cIndpZHRoLTEyXCIgdG9vbHRpcD1cIkNob29zZSBhbiBBenVyZSBDbG91ZFwiPlxuICAgICAgICAgICAgICAgICAgQXp1cmUgQ2xvdWRcbiAgICAgICAgICAgICAgICA8L0lubGluZUZvcm1MYWJlbD5cbiAgICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiQXp1cmUgQ2xvdWRcIlxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwid2lkdGgtMTVcIlxuICAgICAgICAgICAgICAgICAgdmFsdWU9e2F6dXJlQ2xvdWRPcHRpb25zLmZpbmQoKG9wdCkgPT4gb3B0LnZhbHVlID09PSBjcmVkZW50aWFscy5henVyZUNsb3VkKX1cbiAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e2F6dXJlQ2xvdWRPcHRpb25zfVxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uQXp1cmVDbG91ZENoYW5nZX1cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtLWlubGluZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICAgICAgICAgIDxJbmxpbmVGb3JtTGFiZWwgY2xhc3NOYW1lPVwid2lkdGgtMTJcIj5EaXJlY3RvcnkgKHRlbmFudCkgSUQ8L0lubGluZUZvcm1MYWJlbD5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWR0aC0xNVwiPlxuICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwid2lkdGgtMzBcIlxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcIlxuICAgICAgICAgICAgICAgICAgdmFsdWU9e2NyZWRlbnRpYWxzLnRlbmFudElkIHx8ICcnfVxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uVGVuYW50SWRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm0taW5saW5lXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm1cIj5cbiAgICAgICAgICAgICAgPElubGluZUZvcm1MYWJlbCBjbGFzc05hbWU9XCJ3aWR0aC0xMlwiPkFwcGxpY2F0aW9uIChjbGllbnQpIElEPC9JbmxpbmVGb3JtTGFiZWw+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkdGgtMTVcIj5cbiAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIndpZHRoLTMwXCJcbiAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXCJcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXtjcmVkZW50aWFscy5jbGllbnRJZCB8fCAnJ31cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvbkNsaWVudElkQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgeyFkaXNhYmxlZCAmJlxuICAgICAgICAgICAgKHR5cGVvZiBjcmVkZW50aWFscy5jbGllbnRTZWNyZXQgPT09ICdzeW1ib2wnID8gKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm0taW5saW5lXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICAgICAgICAgICAgICA8SW5saW5lRm9ybUxhYmVsIGNsYXNzTmFtZT1cIndpZHRoLTEyXCI+Q2xpZW50IFNlY3JldDwvSW5saW5lRm9ybUxhYmVsPlxuICAgICAgICAgICAgICAgICAgPElucHV0IGRhdGEtdGVzdGlkPVwiY2xpZW50LXNlY3JldFwiIGNsYXNzTmFtZT1cIndpZHRoLTI1XCIgcGxhY2Vob2xkZXI9XCJjb25maWd1cmVkXCIgZGlzYWJsZWQ9e3RydWV9IC8+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1heC13aWR0aC0zMCBnZi1mb3JtLWlubGluZVwiPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJzZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgb25DbGljaz17b25DbGllbnRTZWNyZXRSZXNldH0gZGlzYWJsZWQ9e2Rpc2FibGVkfT5cbiAgICAgICAgICAgICAgICAgICAgICByZXNldFxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ2YtZm9ybS1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm1cIj5cbiAgICAgICAgICAgICAgICAgIDxJbmxpbmVGb3JtTGFiZWwgY2xhc3NOYW1lPVwid2lkdGgtMTJcIj5DbGllbnQgU2VjcmV0PC9JbmxpbmVGb3JtTGFiZWw+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndpZHRoLTE1XCI+XG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIndpZHRoLTMwXCJcbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFwiXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2NyZWRlbnRpYWxzLmNsaWVudFNlY3JldCB8fCAnJ31cbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17b25DbGllbnRTZWNyZXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvPlxuICAgICAgKX1cbiAgICAgIHtnZXRTdWJzY3JpcHRpb25zICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm0taW5saW5lXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm1cIj5cbiAgICAgICAgICAgICAgPElubGluZUZvcm1MYWJlbCBjbGFzc05hbWU9XCJ3aWR0aC0xMlwiPkRlZmF1bHQgU3Vic2NyaXB0aW9uPC9JbmxpbmVGb3JtTGFiZWw+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkdGgtMzBcIj5cbiAgICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiRGVmYXVsdCBTdWJzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgICAgdmFsdWU9e1xuICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFscy5kZWZhdWx0U3Vic2NyaXB0aW9uSWRcbiAgICAgICAgICAgICAgICAgICAgICA/IHN1YnNjcmlwdGlvbnMuZmluZCgob3B0KSA9PiBvcHQudmFsdWUgPT09IGNyZWRlbnRpYWxzLmRlZmF1bHRTdWJzY3JpcHRpb25JZClcbiAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgb3B0aW9ucz17c3Vic2NyaXB0aW9uc31cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtvblN1YnNjcmlwdGlvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHshZGlzYWJsZWQgJiYgKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnZi1mb3JtLWlubGluZVwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdmLWZvcm1cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1heC13aWR0aC0zMCBnZi1mb3JtLWlubGluZVwiPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB2YXJpYW50PVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e29uTG9hZFN1YnNjcmlwdGlvbnN9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshaGFzUmVxdWlyZWRGaWVsZHN9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIExvYWQgU3Vic2NyaXB0aW9uc1xuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXp1cmVDcmVkZW50aWFsc0Zvcm07XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRGF0YVNvdXJjZVBsdWdpbk9wdGlvbnNFZGl0b3JQcm9wcywgU2VsZWN0YWJsZVZhbHVlLCB1cGRhdGVEYXRhc291cmNlUGx1Z2luT3B0aW9uIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5pbXBvcnQgeyBnZXRCYWNrZW5kU3J2LCBnZXRUZW1wbGF0ZVNydiwgaXNGZXRjaEVycm9yLCBUZW1wbGF0ZVNydiB9IGZyb20gJ0BncmFmYW5hL3J1bnRpbWUnO1xuaW1wb3J0IHsgQWxlcnQgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmltcG9ydCBSZXNwb25zZVBhcnNlciBmcm9tICcuLi9henVyZV9tb25pdG9yL3Jlc3BvbnNlX3BhcnNlcic7XG5pbXBvcnQgeyBBenVyZURhdGFTb3VyY2VKc29uRGF0YSwgQXp1cmVEYXRhU291cmNlU2VjdXJlSnNvbkRhdGEsIEF6dXJlRGF0YVNvdXJjZVNldHRpbmdzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgcm91dGVOYW1lcyB9IGZyb20gJy4uL3V0aWxzL2NvbW1vbic7XG5cbmltcG9ydCB7IE1vbml0b3JDb25maWcgfSBmcm9tICcuL01vbml0b3JDb25maWcnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IERhdGFTb3VyY2VQbHVnaW5PcHRpb25zRWRpdG9yUHJvcHM8QXp1cmVEYXRhU291cmNlSnNvbkRhdGEsIEF6dXJlRGF0YVNvdXJjZVNlY3VyZUpzb25EYXRhPjtcblxuaW50ZXJmYWNlIEVycm9yTWVzc2FnZSB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGRldGFpbHM/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGUge1xuICB1bnNhdmVkOiBib29sZWFuO1xuICBlcnJvcj86IEVycm9yTWVzc2FnZTtcbn1cblxuZXhwb3J0IGNsYXNzIENvbmZpZ0VkaXRvciBleHRlbmRzIFB1cmVDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHRlbXBsYXRlU3J2OiBUZW1wbGF0ZVNydiA9IGdldFRlbXBsYXRlU3J2KCk7XG4gIGJhc2VVUkw6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdW5zYXZlZDogZmFsc2UsXG4gICAgfTtcbiAgICB0aGlzLmJhc2VVUkwgPSBgL2FwaS9kYXRhc291cmNlcy8ke3RoaXMucHJvcHMub3B0aW9ucy5pZH0vcmVzb3VyY2VzLyR7cm91dGVOYW1lcy5henVyZU1vbml0b3J9L3N1YnNjcmlwdGlvbnNgO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVPcHRpb25zID0gKG9wdGlvbnNGdW5jOiAob3B0aW9uczogQXp1cmVEYXRhU291cmNlU2V0dGluZ3MpID0+IEF6dXJlRGF0YVNvdXJjZVNldHRpbmdzKTogdm9pZCA9PiB7XG4gICAgY29uc3QgdXBkYXRlZCA9IG9wdGlvbnNGdW5jKHRoaXMucHJvcHMub3B0aW9ucyk7XG4gICAgdGhpcy5wcm9wcy5vbk9wdGlvbnNDaGFuZ2UodXBkYXRlZCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgdW5zYXZlZDogdHJ1ZSB9KTtcbiAgfTtcblxuICBwcml2YXRlIHNhdmVPcHRpb25zID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGlmICh0aGlzLnN0YXRlLnVuc2F2ZWQpIHtcbiAgICAgIGF3YWl0IGdldEJhY2tlbmRTcnYoKVxuICAgICAgICAucHV0KGAvYXBpL2RhdGFzb3VyY2VzLyR7dGhpcy5wcm9wcy5vcHRpb25zLmlkfWAsIHRoaXMucHJvcHMub3B0aW9ucylcbiAgICAgICAgLnRoZW4oKHJlc3VsdDogeyBkYXRhc291cmNlOiBBenVyZURhdGFTb3VyY2VTZXR0aW5ncyB9KSA9PiB7XG4gICAgICAgICAgdXBkYXRlRGF0YXNvdXJjZVBsdWdpbk9wdGlvbih0aGlzLnByb3BzLCAndmVyc2lvbicsIHJlc3VsdC5kYXRhc291cmNlLnZlcnNpb24pO1xuICAgICAgICB9KTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHVuc2F2ZWQ6IGZhbHNlIH0pO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGdldFN1YnNjcmlwdGlvbnMgPSBhc3luYyAoKTogUHJvbWlzZTxBcnJheTxTZWxlY3RhYmxlVmFsdWU8c3RyaW5nPj4+ID0+IHtcbiAgICBhd2FpdCB0aGlzLnNhdmVPcHRpb25zKCk7XG5cbiAgICBjb25zdCBxdWVyeSA9IGA/YXBpLXZlcnNpb249MjAxOS0wMy0wMWA7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldEJhY2tlbmRTcnYoKVxuICAgICAgICAuZmV0Y2goe1xuICAgICAgICAgIHVybDogdGhpcy5iYXNlVVJMICsgcXVlcnksXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgfSlcbiAgICAgICAgLnRvUHJvbWlzZSgpO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3I6IHVuZGVmaW5lZCB9KTtcbiAgICAgIHJldHVybiBSZXNwb25zZVBhcnNlci5wYXJzZVN1YnNjcmlwdGlvbnNGb3JTZWxlY3QocmVzdWx0KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChpc0ZldGNoRXJyb3IoZXJyKSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBlcnJvcjoge1xuICAgICAgICAgICAgdGl0bGU6ICdFcnJvciByZXF1ZXN0aW5nIHN1YnNjcmlwdGlvbnMnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdDb3VsZCBub3QgcmVxdWVzdCBzdWJzY3JpcHRpb25zIGZyb20gQXp1cmUuIENoZWNrIHlvdXIgY3JlZGVudGlhbHMgYW5kIHRyeSBhZ2Fpbi4nLFxuICAgICAgICAgICAgZGV0YWlsczogZXJyPy5kYXRhPy5tZXNzYWdlLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBlcnJvciB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICA8TW9uaXRvckNvbmZpZyBvcHRpb25zPXtvcHRpb25zfSB1cGRhdGVPcHRpb25zPXt0aGlzLnVwZGF0ZU9wdGlvbnN9IGdldFN1YnNjcmlwdGlvbnM9e3RoaXMuZ2V0U3Vic2NyaXB0aW9uc30gLz5cbiAgICAgICAge2Vycm9yICYmIChcbiAgICAgICAgICA8QWxlcnQgc2V2ZXJpdHk9XCJlcnJvclwiIHRpdGxlPXtlcnJvci50aXRsZX0+XG4gICAgICAgICAgICA8cD57ZXJyb3IuZGVzY3JpcHRpb259PC9wPlxuICAgICAgICAgICAge2Vycm9yLmRldGFpbHMgJiYgPGRldGFpbHMgc3R5bGU9e3sgd2hpdGVTcGFjZTogJ3ByZS13cmFwJyB9fT57ZXJyb3IuZGV0YWlsc308L2RldGFpbHM+fVxuICAgICAgICAgIDwvQWxlcnQ+XG4gICAgICAgICl9XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbmZpZ0VkaXRvcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEVkaXRvckZpZWxkIH0gZnJvbSAnQGdyYWZhbmEvZXhwZXJpbWVudGFsJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJ0BncmFmYW5hL3J1bnRpbWUnO1xuaW1wb3J0IHsgSW5saW5lRmllbGQgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5pbXBvcnQgeyBQcm9wcyBhcyBJbmxpbmVGaWVsZFByb3BzIH0gZnJvbSAnQGdyYWZhbmEvdWkvc3JjL2NvbXBvbmVudHMvRm9ybXMvSW5saW5lRmllbGQnO1xuXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBJbmxpbmVGaWVsZFByb3BzIHtcbiAgbGFiZWw6IHN0cmluZztcbiAgaW5saW5lRmllbGQ/OiBib29sZWFuO1xuICBsYWJlbFdpZHRoPzogbnVtYmVyO1xufVxuXG5jb25zdCBERUZBVUxUX0xBQkVMX1dJRFRIID0gMTg7XG5cbmV4cG9ydCBjb25zdCBGaWVsZCA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBsYWJlbFdpZHRoLCBpbmxpbmVGaWVsZCwgLi4ucmVtYWluaW5nUHJvcHMgfSA9IHByb3BzO1xuXG4gIGlmIChjb25maWcuZmVhdHVyZVRvZ2dsZXMuYXp1cmVNb25pdG9yRXhwZXJpbWVudGFsVUkgJiYgIWlubGluZUZpZWxkKSB7XG4gICAgcmV0dXJuIDxFZGl0b3JGaWVsZCB3aWR0aD17bGFiZWxXaWR0aCB8fCBERUZBVUxUX0xBQkVMX1dJRFRIfSB7Li4ucmVtYWluaW5nUHJvcHN9IC8+O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiA8SW5saW5lRmllbGQgbGFiZWxXaWR0aD17bGFiZWxXaWR0aCB8fCBERUZBVUxUX0xBQkVMX1dJRFRIfSB7Li4ucmVtYWluaW5nUHJvcHN9IC8+O1xuICB9XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBTZWxlY3RhYmxlVmFsdWUgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IHsgQXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uL0ZpZWxkJztcblxuaW1wb3J0IHsgc2V0Rm9ybWF0QXMgfSBmcm9tICcuL3NldFF1ZXJ5VmFsdWUnO1xuXG5jb25zdCBGT1JNQVRfT1BUSU9OUzogQXJyYXk8U2VsZWN0YWJsZVZhbHVlPHN0cmluZz4+ID0gW1xuICB7IGxhYmVsOiAnVGltZSBzZXJpZXMnLCB2YWx1ZTogJ3RpbWVfc2VyaWVzJyB9LFxuICB7IGxhYmVsOiAnVGFibGUnLCB2YWx1ZTogJ3RhYmxlJyB9LFxuXTtcblxuY29uc3QgRm9ybWF0QXNGaWVsZDogUmVhY3QuRkM8QXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHM+ID0gKHsgcXVlcnksIHZhcmlhYmxlT3B0aW9uR3JvdXAsIG9uUXVlcnlDaGFuZ2UgfSkgPT4ge1xuICBjb25zdCBvcHRpb25zID0gdXNlTWVtbygoKSA9PiBbLi4uRk9STUFUX09QVElPTlMsIHZhcmlhYmxlT3B0aW9uR3JvdXBdLCBbdmFyaWFibGVPcHRpb25Hcm91cF0pO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgIChjaGFuZ2U6IFNlbGVjdGFibGVWYWx1ZTxzdHJpbmc+KSA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlIH0gPSBjaGFuZ2U7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3UXVlcnkgPSBzZXRGb3JtYXRBcyhxdWVyeSwgdmFsdWUpO1xuICAgICAgb25RdWVyeUNoYW5nZShuZXdRdWVyeSk7XG4gICAgfSxcbiAgICBbb25RdWVyeUNoYW5nZSwgcXVlcnldXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8RmllbGQgbGFiZWw9XCJGb3JtYXQgYXNcIj5cbiAgICAgIDxTZWxlY3RcbiAgICAgICAgaW5wdXRJZD1cImF6dXJlLW1vbml0b3ItbG9ncy13b3Jrc3BhY2VzLWZpZWxkXCJcbiAgICAgICAgdmFsdWU9e3F1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzPy5yZXN1bHRGb3JtYXR9XG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgIG9wdGlvbnM9e29wdGlvbnN9XG4gICAgICAgIHdpZHRoPXszOH1cbiAgICAgIC8+XG4gICAgPC9GaWVsZD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1hdEFzRmllbGQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBFZGl0b3JSb3dzLCBFZGl0b3JSb3csIEVkaXRvckZpZWxkR3JvdXAgfSBmcm9tICdAZ3JhZmFuYS9leHBlcmltZW50YWwnO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnQGdyYWZhbmEvcnVudGltZSc7XG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IERhdGFzb3VyY2UgZnJvbSAnLi4vLi4vZGF0YXNvdXJjZSc7XG5pbXBvcnQgeyBBenVyZU1vbml0b3JFcnJvcmlzaCwgQXp1cmVNb25pdG9yT3B0aW9uLCBBenVyZU1vbml0b3JRdWVyeSB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCBSZXNvdXJjZUZpZWxkIGZyb20gJy4uL1Jlc291cmNlRmllbGQnO1xuaW1wb3J0IHsgUmVzb3VyY2VSb3dUeXBlIH0gZnJvbSAnLi4vUmVzb3VyY2VQaWNrZXIvdHlwZXMnO1xuXG5pbXBvcnQgRm9ybWF0QXNGaWVsZCBmcm9tICcuL0Zvcm1hdEFzRmllbGQnO1xuaW1wb3J0IFF1ZXJ5RmllbGQgZnJvbSAnLi9RdWVyeUZpZWxkJztcbmltcG9ydCB7IHNldFJlc291cmNlIH0gZnJvbSAnLi9zZXRRdWVyeVZhbHVlJztcbmltcG9ydCB1c2VNaWdyYXRpb25zIGZyb20gJy4vdXNlTWlncmF0aW9ucyc7XG5cbmludGVyZmFjZSBMb2dzUXVlcnlFZGl0b3JQcm9wcyB7XG4gIHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeTtcbiAgZGF0YXNvdXJjZTogRGF0YXNvdXJjZTtcbiAgc3Vic2NyaXB0aW9uSWQ/OiBzdHJpbmc7XG4gIG9uQ2hhbmdlOiAobmV3UXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KSA9PiB2b2lkO1xuICB2YXJpYWJsZU9wdGlvbkdyb3VwOiB7IGxhYmVsOiBzdHJpbmc7IG9wdGlvbnM6IEF6dXJlTW9uaXRvck9wdGlvbltdIH07XG4gIHNldEVycm9yOiAoc291cmNlOiBzdHJpbmcsIGVycm9yOiBBenVyZU1vbml0b3JFcnJvcmlzaCB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgaGlkZUZvcm1hdEFzPzogYm9vbGVhbjtcbn1cblxuY29uc3QgTG9nc1F1ZXJ5RWRpdG9yOiBSZWFjdC5GQzxMb2dzUXVlcnlFZGl0b3JQcm9wcz4gPSAoe1xuICBxdWVyeSxcbiAgZGF0YXNvdXJjZSxcbiAgc3Vic2NyaXB0aW9uSWQsXG4gIHZhcmlhYmxlT3B0aW9uR3JvdXAsXG4gIG9uQ2hhbmdlLFxuICBzZXRFcnJvcixcbiAgaGlkZUZvcm1hdEFzLFxufSkgPT4ge1xuICBjb25zdCBtaWdyYXRpb25FcnJvciA9IHVzZU1pZ3JhdGlvbnMoZGF0YXNvdXJjZSwgcXVlcnksIG9uQ2hhbmdlKTtcblxuICBpZiAoY29uZmlnLmZlYXR1cmVUb2dnbGVzLmF6dXJlTW9uaXRvckV4cGVyaW1lbnRhbFVJKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxzcGFuIGRhdGEtdGVzdGlkPVwiYXp1cmUtbW9uaXRvci1sb2dzLXF1ZXJ5LWVkaXRvci13aXRoLWV4cGVyaW1lbnRhbC11aVwiPlxuICAgICAgICA8RWRpdG9yUm93cz5cbiAgICAgICAgICA8RWRpdG9yUm93PlxuICAgICAgICAgICAgPEVkaXRvckZpZWxkR3JvdXA+XG4gICAgICAgICAgICAgIDxSZXNvdXJjZUZpZWxkXG4gICAgICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgICAgICAgaW5saW5lRmllbGQ9e3RydWV9XG4gICAgICAgICAgICAgICAgbGFiZWxXaWR0aD17MTB9XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uSWQ9e3N1YnNjcmlwdGlvbklkfVxuICAgICAgICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgICAgICAgb25RdWVyeUNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgc2V0RXJyb3I9e3NldEVycm9yfVxuICAgICAgICAgICAgICAgIHNlbGVjdGFibGVFbnRyeVR5cGVzPXtbXG4gICAgICAgICAgICAgICAgICBSZXNvdXJjZVJvd1R5cGUuU3Vic2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgICAgUmVzb3VyY2VSb3dUeXBlLlJlc291cmNlR3JvdXAsXG4gICAgICAgICAgICAgICAgICBSZXNvdXJjZVJvd1R5cGUuUmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICBSZXNvdXJjZVJvd1R5cGUuVmFyaWFibGUsXG4gICAgICAgICAgICAgICAgXX1cbiAgICAgICAgICAgICAgICBzZXRSZXNvdXJjZT17c2V0UmVzb3VyY2V9XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VVcmk9e3F1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzPy5yZXNvdXJjZX1cbiAgICAgICAgICAgICAgICBxdWVyeVR5cGU9XCJsb2dzXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRWRpdG9yRmllbGRHcm91cD5cbiAgICAgICAgICA8L0VkaXRvclJvdz5cbiAgICAgICAgICA8UXVlcnlGaWVsZFxuICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbklkPXtzdWJzY3JpcHRpb25JZH1cbiAgICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxFZGl0b3JSb3c+XG4gICAgICAgICAgICA8RWRpdG9yRmllbGRHcm91cD5cbiAgICAgICAgICAgICAgeyFoaWRlRm9ybWF0QXMgJiYgKFxuICAgICAgICAgICAgICAgIDxGb3JtYXRBc0ZpZWxkXG4gICAgICAgICAgICAgICAgICBxdWVyeT17cXVlcnl9XG4gICAgICAgICAgICAgICAgICBkYXRhc291cmNlPXtkYXRhc291cmNlfVxuICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uSWQ9e3N1YnNjcmlwdGlvbklkfVxuICAgICAgICAgICAgICAgICAgdmFyaWFibGVPcHRpb25Hcm91cD17dmFyaWFibGVPcHRpb25Hcm91cH1cbiAgICAgICAgICAgICAgICAgIG9uUXVlcnlDaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgc2V0RXJyb3I9e3NldEVycm9yfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAge21pZ3JhdGlvbkVycm9yICYmIDxBbGVydCB0aXRsZT17bWlncmF0aW9uRXJyb3IudGl0bGV9PnttaWdyYXRpb25FcnJvci5tZXNzYWdlfTwvQWxlcnQ+fVxuICAgICAgICAgICAgPC9FZGl0b3JGaWVsZEdyb3VwPlxuICAgICAgICAgIDwvRWRpdG9yUm93PlxuICAgICAgICA8L0VkaXRvclJvd3M+XG4gICAgICA8L3NwYW4+XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cImF6dXJlLW1vbml0b3ItbG9ncy1xdWVyeS1lZGl0b3JcIj5cbiAgICAgICAgPFJlc291cmNlRmllbGRcbiAgICAgICAgICBxdWVyeT17cXVlcnl9XG4gICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICBzdWJzY3JpcHRpb25JZD17c3Vic2NyaXB0aW9uSWR9XG4gICAgICAgICAgdmFyaWFibGVPcHRpb25Hcm91cD17dmFyaWFibGVPcHRpb25Hcm91cH1cbiAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAgICAgc2VsZWN0YWJsZUVudHJ5VHlwZXM9e1tcbiAgICAgICAgICAgIFJlc291cmNlUm93VHlwZS5TdWJzY3JpcHRpb24sXG4gICAgICAgICAgICBSZXNvdXJjZVJvd1R5cGUuUmVzb3VyY2VHcm91cCxcbiAgICAgICAgICAgIFJlc291cmNlUm93VHlwZS5SZXNvdXJjZSxcbiAgICAgICAgICAgIFJlc291cmNlUm93VHlwZS5WYXJpYWJsZSxcbiAgICAgICAgICBdfVxuICAgICAgICAgIHNldFJlc291cmNlPXtzZXRSZXNvdXJjZX1cbiAgICAgICAgICByZXNvdXJjZVVyaT17cXVlcnkuYXp1cmVMb2dBbmFseXRpY3M/LnJlc291cmNlfVxuICAgICAgICAgIHF1ZXJ5VHlwZT1cImxvZ3NcIlxuICAgICAgICAvPlxuXG4gICAgICAgIDxRdWVyeUZpZWxkXG4gICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgc3Vic2NyaXB0aW9uSWQ9e3N1YnNjcmlwdGlvbklkfVxuICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgb25RdWVyeUNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgc2V0RXJyb3I9e3NldEVycm9yfVxuICAgICAgICAvPlxuXG4gICAgICAgIHshaGlkZUZvcm1hdEFzICYmIChcbiAgICAgICAgICA8Rm9ybWF0QXNGaWVsZFxuICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbklkPXtzdWJzY3JpcHRpb25JZH1cbiAgICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuXG4gICAgICAgIHttaWdyYXRpb25FcnJvciAmJiA8QWxlcnQgdGl0bGU9e21pZ3JhdGlvbkVycm9yLnRpdGxlfT57bWlncmF0aW9uRXJyb3IubWVzc2FnZX08L0FsZXJ0Pn1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvZ3NRdWVyeUVkaXRvcjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IENvZGVFZGl0b3IsIE1vbmFjbywgTW9uYWNvRWRpdG9yIH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuaW1wb3J0IHsgRGVmZXJyZWQgfSBmcm9tICdhcHAvY29yZS91dGlscy9kZWZlcnJlZCc7XG5cbmltcG9ydCB7IEF6dXJlUXVlcnlFZGl0b3JGaWVsZFByb3BzIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5pbXBvcnQgeyBzZXRLdXN0b1F1ZXJ5IH0gZnJvbSAnLi9zZXRRdWVyeVZhbHVlJztcblxuaW50ZXJmYWNlIE1vbmFjb1Byb21pc2Uge1xuICBlZGl0b3I6IE1vbmFjb0VkaXRvcjtcbiAgbW9uYWNvOiBNb25hY287XG59XG5cbmludGVyZmFjZSBNb25hY29MYW5ndWFnZXMge1xuICBrdXN0bzoge1xuICAgIGdldEt1c3RvV29ya2VyOiAoKSA9PiBQcm9taXNlPFxuICAgICAgKHVybDogYW55KSA9PiBQcm9taXNlPHtcbiAgICAgICAgc2V0U2NoZW1hOiAoc2NoZW1hOiBhbnksIGNsdXN0ZXJVcmw6IHN0cmluZywgbmFtZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgICAgfT5cbiAgICA+O1xuICB9O1xufVxuXG5jb25zdCBRdWVyeUZpZWxkOiBSZWFjdC5GQzxBenVyZVF1ZXJ5RWRpdG9yRmllbGRQcm9wcz4gPSAoeyBxdWVyeSwgZGF0YXNvdXJjZSwgb25RdWVyeUNoYW5nZSB9KSA9PiB7XG4gIGNvbnN0IG1vbmFjb1Byb21pc2VSZWYgPSB1c2VSZWY8RGVmZXJyZWQ8TW9uYWNvUHJvbWlzZT4+KCk7XG4gIGZ1bmN0aW9uIGdldFByb21pc2UoKSB7XG4gICAgaWYgKCFtb25hY29Qcm9taXNlUmVmLmN1cnJlbnQpIHtcbiAgICAgIG1vbmFjb1Byb21pc2VSZWYuY3VycmVudCA9IG5ldyBEZWZlcnJlZDxNb25hY29Qcm9taXNlPigpO1xuICAgIH1cblxuICAgIHJldHVybiBtb25hY29Qcm9taXNlUmVmLmN1cnJlbnQucHJvbWlzZTtcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFxdWVyeS5henVyZUxvZ0FuYWx5dGljcz8ucmVzb3VyY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9taXNlcyA9IFtcbiAgICAgIGRhdGFzb3VyY2UuYXp1cmVMb2dBbmFseXRpY3NEYXRhc291cmNlLmdldEt1c3RvU2NoZW1hKHF1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzLnJlc291cmNlKSxcbiAgICAgIGdldFByb21pc2UoKSxcbiAgICBdIGFzIGNvbnN0O1xuXG4gICAgLy8gdGhlIGt1c3RvIHNjaGVtYSBjYWxsIG1pZ2h0IGZhaWwsIGJ1dCBpdHMgb2theSBmb3IgdGhhdCB0byBoYXBwZW4gc2lsZW50bHlcbiAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoW3NjaGVtYSwgeyBtb25hY28sIGVkaXRvciB9XSkgPT4ge1xuICAgICAgY29uc3QgbGFuZ3VhZ2VzID0gbW9uYWNvLmxhbmd1YWdlcyBhcyB1bmtub3duIGFzIE1vbmFjb0xhbmd1YWdlcztcblxuICAgICAgbGFuZ3VhZ2VzLmt1c3RvXG4gICAgICAgIC5nZXRLdXN0b1dvcmtlcigpXG4gICAgICAgIC50aGVuKChrdXN0bykgPT4ge1xuICAgICAgICAgIGNvbnN0IG1vZGVsID0gZWRpdG9yLmdldE1vZGVsKCk7XG4gICAgICAgICAgcmV0dXJuIG1vZGVsICYmIGt1c3RvKG1vZGVsLnVyaSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCh3b3JrZXIpID0+IHtcbiAgICAgICAgICB3b3JrZXI/LnNldFNjaGVtYShzY2hlbWEsICdodHRwczovL2hlbHAua3VzdG8ud2luZG93cy5uZXQnLCAnU2FtcGxlcycpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfSwgW2RhdGFzb3VyY2UuYXp1cmVMb2dBbmFseXRpY3NEYXRhc291cmNlLCBxdWVyeS5henVyZUxvZ0FuYWx5dGljcz8ucmVzb3VyY2VdKTtcblxuICBjb25zdCBoYW5kbGVFZGl0b3JNb3VudCA9IHVzZUNhbGxiYWNrKChlZGl0b3I6IE1vbmFjb0VkaXRvciwgbW9uYWNvOiBNb25hY28pID0+IHtcbiAgICBtb25hY29Qcm9taXNlUmVmLmN1cnJlbnQ/LnJlc29sdmU/Lih7IGVkaXRvciwgbW9uYWNvIH0pO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgb25DaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAobmV3UXVlcnk6IHN0cmluZykgPT4ge1xuICAgICAgb25RdWVyeUNoYW5nZShzZXRLdXN0b1F1ZXJ5KHF1ZXJ5LCBuZXdRdWVyeSkpO1xuICAgIH0sXG4gICAgW29uUXVlcnlDaGFuZ2UsIHF1ZXJ5XVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPENvZGVFZGl0b3JcbiAgICAgIHZhbHVlPXtxdWVyeS5henVyZUxvZ0FuYWx5dGljcz8ucXVlcnkgPz8gJyd9XG4gICAgICBsYW5ndWFnZT1cImt1c3RvXCJcbiAgICAgIGhlaWdodD17MjAwfVxuICAgICAgd2lkdGg9XCIxMDAlXCJcbiAgICAgIHNob3dNaW5pTWFwPXtmYWxzZX1cbiAgICAgIG9uQmx1cj17b25DaGFuZ2V9XG4gICAgICBvblNhdmU9e29uQ2hhbmdlfVxuICAgICAgb25FZGl0b3JEaWRNb3VudD17aGFuZGxlRWRpdG9yTW91bnR9XG4gICAgLz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFF1ZXJ5RmllbGQ7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9Mb2dzUXVlcnlFZGl0b3InO1xuIiwiaW1wb3J0IHsgQXp1cmVNb25pdG9yUXVlcnkgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRLdXN0b1F1ZXJ5KHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSwga3VzdG9RdWVyeTogc3RyaW5nKTogQXp1cmVNb25pdG9yUXVlcnkge1xuICByZXR1cm4ge1xuICAgIC4uLnF1ZXJ5LFxuICAgIGF6dXJlTG9nQW5hbHl0aWNzOiB7XG4gICAgICAuLi5xdWVyeS5henVyZUxvZ0FuYWx5dGljcyxcbiAgICAgIHF1ZXJ5OiBrdXN0b1F1ZXJ5LFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRGb3JtYXRBcyhxdWVyeTogQXp1cmVNb25pdG9yUXVlcnksIGZvcm1hdEFzOiBzdHJpbmcpOiBBenVyZU1vbml0b3JRdWVyeSB7XG4gIHJldHVybiB7XG4gICAgLi4ucXVlcnksXG4gICAgYXp1cmVMb2dBbmFseXRpY3M6IHtcbiAgICAgIC4uLnF1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzLFxuICAgICAgcmVzdWx0Rm9ybWF0OiBmb3JtYXRBcyxcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0UmVzb3VyY2UocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5LCByZXNvdXJjZVVSSTogc3RyaW5nIHwgdW5kZWZpbmVkKTogQXp1cmVNb25pdG9yUXVlcnkge1xuICByZXR1cm4ge1xuICAgIC4uLnF1ZXJ5LFxuICAgIGF6dXJlTG9nQW5hbHl0aWNzOiB7XG4gICAgICAuLi5xdWVyeS5henVyZUxvZ0FuYWx5dGljcyxcbiAgICAgIHJlc291cmNlOiByZXNvdXJjZVVSSSxcbiAgICB9LFxuICB9O1xufVxuIiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IERhdGFzb3VyY2UgZnJvbSAnLi4vLi4vZGF0YXNvdXJjZSc7XG5pbXBvcnQgeyBBenVyZU1vbml0b3JRdWVyeSB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IGlzR1VJRGlzaCB9IGZyb20gJy4uL1Jlc291cmNlUGlja2VyL3V0aWxzJztcblxuYXN5bmMgZnVuY3Rpb24gbWlncmF0ZVdvcmtzcGFjZVF1ZXJ5VG9SZXNvdXJjZVF1ZXJ5KFxuICBkYXRhc291cmNlOiBEYXRhc291cmNlLFxuICBxdWVyeTogQXp1cmVNb25pdG9yUXVlcnksXG4gIG9uQ2hhbmdlOiAobmV3UXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KSA9PiB2b2lkXG4pIHtcbiAgaWYgKHF1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzPy53b3Jrc3BhY2UgIT09IHVuZGVmaW5lZCAmJiAhcXVlcnkuYXp1cmVMb2dBbmFseXRpY3MucmVzb3VyY2UpIHtcbiAgICBjb25zdCBpc1dvcmtzcGFjZUdVSUQgPSBpc0dVSURpc2gocXVlcnkuYXp1cmVMb2dBbmFseXRpY3Mud29ya3NwYWNlKTtcbiAgICBsZXQgcmVzb3VyY2U6IHN0cmluZztcblxuICAgIGlmIChpc1dvcmtzcGFjZUdVSUQpIHtcbiAgICAgIHJlc291cmNlID0gYXdhaXQgZGF0YXNvdXJjZS5yZXNvdXJjZVBpY2tlckRhdGEuZ2V0UmVzb3VyY2VVUklGcm9tV29ya3NwYWNlKHF1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzLndvcmtzcGFjZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSB2YWx1ZSBvZiB3b3Jrc3BhY2UgaXMgcHJvYmFibHkgYSB0ZW1wbGF0ZSB2YXJpYWJsZSBzbyB3ZSBqdXN0IG1pZ3JhdGUgaXQgb3ZlciBhcy1pc1xuICAgICAgcmVzb3VyY2UgPSBxdWVyeS5henVyZUxvZ0FuYWx5dGljcy53b3Jrc3BhY2U7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3UXVlcnkgPSB7XG4gICAgICAuLi5xdWVyeSxcbiAgICAgIGF6dXJlTG9nQW5hbHl0aWNzOiB7XG4gICAgICAgIC4uLnF1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzLFxuICAgICAgICByZXNvdXJjZTogcmVzb3VyY2UsXG4gICAgICAgIHdvcmtzcGFjZTogdW5kZWZpbmVkLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgZGVsZXRlIG5ld1F1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzLndvcmtzcGFjZTtcblxuICAgIG9uQ2hhbmdlKG5ld1F1ZXJ5KTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgRXJyb3JNZXNzYWdlIHtcbiAgdGl0bGU6IHN0cmluZztcbiAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VNaWdyYXRpb25zKFxuICBkYXRhc291cmNlOiBEYXRhc291cmNlLFxuICBxdWVyeTogQXp1cmVNb25pdG9yUXVlcnksXG4gIG9uQ2hhbmdlOiAobmV3UXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KSA9PiB2b2lkXG4pIHtcbiAgY29uc3QgW21pZ3JhdGlvbkVycm9yLCBzZXRNaWdyYXRpb25FcnJvcl0gPSB1c2VTdGF0ZTxFcnJvck1lc3NhZ2U+KCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBtaWdyYXRlV29ya3NwYWNlUXVlcnlUb1Jlc291cmNlUXVlcnkoZGF0YXNvdXJjZSwgcXVlcnksIG9uQ2hhbmdlKS5jYXRjaCgoZXJyKSA9PlxuICAgICAgc2V0TWlncmF0aW9uRXJyb3Ioe1xuICAgICAgICB0aXRsZTogJ1VuYWJsZSB0byBtaWdyYXRlIHdvcmtzcGFjZSBhcyBhIHJlc291cmNlJyxcbiAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICB9KVxuICAgICk7XG4gIH0sIFtkYXRhc291cmNlLCBxdWVyeSwgb25DaGFuZ2VdKTtcblxuICByZXR1cm4gbWlncmF0aW9uRXJyb3I7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFNlbGVjdGFibGVWYWx1ZSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5pbXBvcnQgeyBBenVyZVF1ZXJ5RWRpdG9yRmllbGRQcm9wcywgQXp1cmVNb25pdG9yT3B0aW9uIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi9GaWVsZCc7XG5cbmltcG9ydCB7IHNldEFnZ3JlZ2F0aW9uIH0gZnJvbSAnLi9zZXRRdWVyeVZhbHVlJztcblxuaW50ZXJmYWNlIEFnZ3JlZ2F0aW9uRmllbGRQcm9wcyBleHRlbmRzIEF6dXJlUXVlcnlFZGl0b3JGaWVsZFByb3BzIHtcbiAgYWdncmVnYXRpb25PcHRpb25zOiBBenVyZU1vbml0b3JPcHRpb25bXTtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xufVxuXG5jb25zdCBBZ2dyZWdhdGlvbkZpZWxkOiBSZWFjdC5GQzxBZ2dyZWdhdGlvbkZpZWxkUHJvcHM+ID0gKHtcbiAgcXVlcnksXG4gIHZhcmlhYmxlT3B0aW9uR3JvdXAsXG4gIG9uUXVlcnlDaGFuZ2UsXG4gIGFnZ3JlZ2F0aW9uT3B0aW9ucyxcbiAgaXNMb2FkaW5nLFxufSkgPT4ge1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAoY2hhbmdlOiBTZWxlY3RhYmxlVmFsdWU8c3RyaW5nPikgPT4ge1xuICAgICAgaWYgKCFjaGFuZ2UudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBuZXdRdWVyeSA9IHNldEFnZ3JlZ2F0aW9uKHF1ZXJ5LCBjaGFuZ2UudmFsdWUpO1xuICAgICAgb25RdWVyeUNoYW5nZShuZXdRdWVyeSk7XG4gICAgfSxcbiAgICBbb25RdWVyeUNoYW5nZSwgcXVlcnldXG4gICk7XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHVzZU1lbW8oXG4gICAgKCkgPT4gWy4uLmFnZ3JlZ2F0aW9uT3B0aW9ucywgdmFyaWFibGVPcHRpb25Hcm91cF0sXG4gICAgW2FnZ3JlZ2F0aW9uT3B0aW9ucywgdmFyaWFibGVPcHRpb25Hcm91cF1cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBsYWJlbD1cIkFnZ3JlZ2F0aW9uXCI+XG4gICAgICA8U2VsZWN0XG4gICAgICAgIGlucHV0SWQ9XCJhenVyZS1tb25pdG9yLW1ldHJpY3MtYWdncmVnYXRpb24tZmllbGRcIlxuICAgICAgICB2YWx1ZT17cXVlcnkuYXp1cmVNb25pdG9yPy5hZ2dyZWdhdGlvbn1cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgd2lkdGg9ezM4fVxuICAgICAgICBpc0xvYWRpbmc9e2lzTG9hZGluZ31cbiAgICAgIC8+XG4gICAgPC9GaWVsZD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFnZ3JlZ2F0aW9uRmllbGQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgU2VsZWN0YWJsZVZhbHVlLCBEYXRhRnJhbWUsIFBhbmVsRGF0YSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgQnV0dG9uLCBTZWxlY3QsIEhvcml6b250YWxHcm91cCwgVmVydGljYWxHcm91cCwgTXVsdGlTZWxlY3QgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmltcG9ydCB7IEF6dXJlTWV0cmljRGltZW5zaW9uLCBBenVyZU1vbml0b3JPcHRpb24sIEF6dXJlTW9uaXRvclF1ZXJ5LCBBenVyZVF1ZXJ5RWRpdG9yRmllbGRQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vRmllbGQnO1xuXG5pbXBvcnQgeyBhcHBlbmREaW1lbnNpb25GaWx0ZXIsIHJlbW92ZURpbWVuc2lvbkZpbHRlciwgc2V0RGltZW5zaW9uRmlsdGVyVmFsdWUgfSBmcm9tICcuL3NldFF1ZXJ5VmFsdWUnO1xuXG5pbnRlcmZhY2UgRGltZW5zaW9uRmllbGRzUHJvcHMgZXh0ZW5kcyBBenVyZVF1ZXJ5RWRpdG9yRmllbGRQcm9wcyB7XG4gIGRpbWVuc2lvbk9wdGlvbnM6IEF6dXJlTW9uaXRvck9wdGlvbltdO1xufVxuXG5pbnRlcmZhY2UgRGltZW5zaW9uTGFiZWxzIHtcbiAgW2tleTogc3RyaW5nXTogU2V0PHN0cmluZz47XG59XG5cbmNvbnN0IHVzZURpbWVuc2lvbkxhYmVscyA9IChkYXRhOiBQYW5lbERhdGEgfCB1bmRlZmluZWQsIHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSkgPT4ge1xuICBjb25zdCBbZGltZW5zaW9uTGFiZWxzLCBzZXREaW1lbnNpb25MYWJlbHNdID0gdXNlU3RhdGU8RGltZW5zaW9uTGFiZWxzPih7fSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGxhYmVsc09iajogRGltZW5zaW9uTGFiZWxzID0ge307XG4gICAgaWYgKGRhdGE/LnNlcmllcz8ubGVuZ3RoKSB7XG4gICAgICAvLyBJZGVudGlmeSB3aGljaCBzZXJpZXMnIGluIHRoZSBkYXRhZnJhbWUgYXJlIHJlbGV2YW50IHRvIHRoZSBjdXJyZW50IHF1ZXJ5XG4gICAgICBjb25zdCBzZXJpZXM6IERhdGFGcmFtZVtdID0gZGF0YS5zZXJpZXMuZmxhdCgpLmZpbHRlcigoc2VyaWVzKSA9PiBzZXJpZXMucmVmSWQgPT09IHF1ZXJ5LnJlZklkKTtcbiAgICAgIGNvbnN0IGZpZWxkcyA9IHNlcmllcy5mbGF0TWFwKChzZXJpZXMpID0+IHNlcmllcy5maWVsZHMpO1xuICAgICAgLy8gUmV0cmlldmUgbGFiZWxzIGZvciBzZXJpZXMgZmllbGRzXG4gICAgICBjb25zdCBsYWJlbHMgPSBmaWVsZHNcbiAgICAgICAgLm1hcCgoZmllbGRzKSA9PiBmaWVsZHMubGFiZWxzKVxuICAgICAgICAuZmxhdCgpXG4gICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0hKTtcbiAgICAgIGZvciAoY29uc3QgbGFiZWwgb2YgbGFiZWxzKSB7XG4gICAgICAgIC8vIExhYmVscyBvbmx5IGV4aXN0IGZvciBzZXJpZXMgdGhhdCBoYXZlIGEgZGltZW5zaW9uIHNlbGVjdGVkXG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgIGZvciAoY29uc3QgW2RpbWVuc2lvbiwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGxhYmVsKSkge1xuICAgICAgICAgICAgaWYgKGxhYmVsc09ialtkaW1lbnNpb25dKSB7XG4gICAgICAgICAgICAgIGxhYmVsc09ialtkaW1lbnNpb25dLmFkZCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsYWJlbHNPYmpbZGltZW5zaW9uXSA9IG5ldyBTZXQoW3ZhbHVlXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHNldERpbWVuc2lvbkxhYmVscygocHJldkxhYmVscykgPT4ge1xuICAgICAgY29uc3QgbmV3TGFiZWxzOiBEaW1lbnNpb25MYWJlbHMgPSB7fTtcbiAgICAgIGNvbnN0IGN1cnJlbnRMYWJlbHMgPSBPYmplY3Qua2V5cyhsYWJlbHNPYmopO1xuICAgICAgaWYgKGN1cnJlbnRMYWJlbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBwcmV2TGFiZWxzO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBsYWJlbCBvZiBjdXJyZW50TGFiZWxzKSB7XG4gICAgICAgIGlmIChwcmV2TGFiZWxzW2xhYmVsXSAmJiBsYWJlbHNPYmpbbGFiZWxdLnNpemUgPCBwcmV2TGFiZWxzW2xhYmVsXS5zaXplKSB7XG4gICAgICAgICAgbmV3TGFiZWxzW2xhYmVsXSA9IHByZXZMYWJlbHNbbGFiZWxdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0xhYmVsc1tsYWJlbF0gPSBsYWJlbHNPYmpbbGFiZWxdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3TGFiZWxzO1xuICAgIH0pO1xuICB9LCBbZGF0YT8uc2VyaWVzLCBxdWVyeS5yZWZJZF0pO1xuICByZXR1cm4gZGltZW5zaW9uTGFiZWxzO1xufTtcblxuY29uc3QgRGltZW5zaW9uRmllbGRzOiBSZWFjdC5GQzxEaW1lbnNpb25GaWVsZHNQcm9wcz4gPSAoeyBkYXRhLCBxdWVyeSwgZGltZW5zaW9uT3B0aW9ucywgb25RdWVyeUNoYW5nZSB9KSA9PiB7XG4gIGNvbnN0IGRpbWVuc2lvbkZpbHRlcnMgPSB1c2VNZW1vKFxuICAgICgpID0+IHF1ZXJ5LmF6dXJlTW9uaXRvcj8uZGltZW5zaW9uRmlsdGVycyA/PyBbXSxcbiAgICBbcXVlcnkuYXp1cmVNb25pdG9yPy5kaW1lbnNpb25GaWx0ZXJzXVxuICApO1xuXG4gIGNvbnN0IGRpbWVuc2lvbkxhYmVscyA9IHVzZURpbWVuc2lvbkxhYmVscyhkYXRhLCBxdWVyeSk7XG5cbiAgY29uc3QgZGltZW5zaW9uT3BlcmF0b3JzOiBBcnJheTxTZWxlY3RhYmxlVmFsdWU8c3RyaW5nPj4gPSBbXG4gICAgeyBsYWJlbDogJz09JywgdmFsdWU6ICdlcScgfSxcbiAgICB7IGxhYmVsOiAnIT0nLCB2YWx1ZTogJ25lJyB9LFxuICAgIHsgbGFiZWw6ICdzdGFydHMgd2l0aCcsIHZhbHVlOiAnc3cnIH0sXG4gIF07XG5cbiAgY29uc3QgdmFsaWREaW1lbnNpb25PcHRpb25zID0gdXNlTWVtbygoKSA9PiB7XG4gICAgLy8gV2UgZmlsdGVyIG91dCBhbnkgZGltZW5zaW9ucyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHVzZWQgaW4gYSBmaWx0ZXIgYXMgdGhlIEFQSSBkb2Vzbid0IHN1cHBvcnQgaGF2aW5nIG11bHRpcGxlIGZpbHRlcnMgd2l0aCB0aGUgc2FtZSBkaW1lbnNpb24gbmFtZS5cbiAgICAvLyBUaGUgQXp1cmUgcG9ydGFsIGFsc28gZG9lc24ndCBzdXBwb3J0IHRoaXMgZmVhdHVyZSBzbyBpdCBtYWtlcyBzZW5zZSBmb3IgY29uc2lzdGVuY3kuXG4gICAgbGV0IHQgPSBkaW1lbnNpb25PcHRpb25zO1xuICAgIGlmIChkaW1lbnNpb25GaWx0ZXJzLmxlbmd0aCkge1xuICAgICAgdCA9IGRpbWVuc2lvbk9wdGlvbnMuZmlsdGVyKFxuICAgICAgICAodmFsKSA9PiAhZGltZW5zaW9uRmlsdGVycy5zb21lKChkaW1lbnNpb25GaWx0ZXIpID0+IGRpbWVuc2lvbkZpbHRlci5kaW1lbnNpb24gPT09IHZhbC52YWx1ZSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9LCBbZGltZW5zaW9uRmlsdGVycywgZGltZW5zaW9uT3B0aW9uc10pO1xuXG4gIGNvbnN0IGFkZEZpbHRlciA9ICgpID0+IHtcbiAgICBvblF1ZXJ5Q2hhbmdlKGFwcGVuZERpbWVuc2lvbkZpbHRlcihxdWVyeSkpO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZUZpbHRlciA9IChpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgb25RdWVyeUNoYW5nZShyZW1vdmVEaW1lbnNpb25GaWx0ZXIocXVlcnksIGluZGV4KSk7XG4gIH07XG5cbiAgY29uc3Qgb25GaWVsZENoYW5nZSA9IDxLZXkgZXh0ZW5kcyBrZXlvZiBBenVyZU1ldHJpY0RpbWVuc2lvbj4oXG4gICAgZmlsdGVySW5kZXg6IG51bWJlcixcbiAgICBmaWVsZE5hbWU6IEtleSxcbiAgICB2YWx1ZTogQXp1cmVNZXRyaWNEaW1lbnNpb25bS2V5XVxuICApID0+IHtcbiAgICBvblF1ZXJ5Q2hhbmdlKHNldERpbWVuc2lvbkZpbHRlclZhbHVlKHF1ZXJ5LCBmaWx0ZXJJbmRleCwgZmllbGROYW1lLCB2YWx1ZSkpO1xuICB9O1xuXG4gIGNvbnN0IG9uRmlsdGVySW5wdXRDaGFuZ2UgPSAoaW5kZXg6IG51bWJlciwgdjogU2VsZWN0YWJsZVZhbHVlPHN0cmluZz4gfCBudWxsKSA9PiB7XG4gICAgb25GaWVsZENoYW5nZShpbmRleCwgJ2ZpbHRlcnMnLCBbdj8udmFsdWUgPz8gJyddKTtcbiAgfTtcblxuICBjb25zdCBnZXRWYWxpZERpbWVuc2lvbk9wdGlvbnMgPSAoc2VsZWN0ZWREaW1lbnNpb246IHN0cmluZykgPT4ge1xuICAgIHJldHVybiB2YWxpZERpbWVuc2lvbk9wdGlvbnMuY29uY2F0KGRpbWVuc2lvbk9wdGlvbnMuZmlsdGVyKChpdGVtKSA9PiBpdGVtLnZhbHVlID09PSBzZWxlY3RlZERpbWVuc2lvbikpO1xuICB9O1xuXG4gIGNvbnN0IGdldFZhbGlkRmlsdGVyT3B0aW9ucyA9IChzZWxlY3RlZEZpbHRlcjogc3RyaW5nIHwgdW5kZWZpbmVkLCBkaW1lbnNpb246IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGRpbWVuc2lvbkZpbHRlcnMgPSBBcnJheS5mcm9tKGRpbWVuc2lvbkxhYmVsc1tkaW1lbnNpb24udG9Mb3dlckNhc2UoKV0gPz8gW10pO1xuICAgIGlmIChkaW1lbnNpb25GaWx0ZXJzLmZpbmQoKGZpbHRlcikgPT4gZmlsdGVyID09PSBzZWxlY3RlZEZpbHRlcikpIHtcbiAgICAgIHJldHVybiBkaW1lbnNpb25GaWx0ZXJzLm1hcCgoZmlsdGVyKSA9PiAoeyB2YWx1ZTogZmlsdGVyLCBsYWJlbDogZmlsdGVyIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIFsuLi5kaW1lbnNpb25GaWx0ZXJzLCAuLi4oc2VsZWN0ZWRGaWx0ZXIgJiYgc2VsZWN0ZWRGaWx0ZXIgIT09ICcqJyA/IFtzZWxlY3RlZEZpbHRlcl0gOiBbXSldLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgIHZhbHVlOiBpdGVtLFxuICAgICAgbGFiZWw6IGl0ZW0sXG4gICAgfSkpO1xuICB9O1xuXG4gIGNvbnN0IGdldFZhbGlkTXVsdGlTZWxlY3RPcHRpb25zID0gKHNlbGVjdGVkRmlsdGVyczogc3RyaW5nW10gfCB1bmRlZmluZWQsIGRpbWVuc2lvbjogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgbGFiZWxPcHRpb25zID0gZ2V0VmFsaWRGaWx0ZXJPcHRpb25zKHVuZGVmaW5lZCwgZGltZW5zaW9uKTtcbiAgICBpZiAoc2VsZWN0ZWRGaWx0ZXJzKSB7XG4gICAgICBmb3IgKGNvbnN0IGZpbHRlciBvZiBzZWxlY3RlZEZpbHRlcnMpIHtcbiAgICAgICAgaWYgKCFsYWJlbE9wdGlvbnMuZmluZCgobGFiZWwpID0+IGxhYmVsLnZhbHVlID09PSBmaWx0ZXIpKSB7XG4gICAgICAgICAgbGFiZWxPcHRpb25zLnB1c2goeyB2YWx1ZTogZmlsdGVyLCBsYWJlbDogZmlsdGVyIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsYWJlbE9wdGlvbnM7XG4gIH07XG5cbiAgY29uc3QgZ2V0VmFsaWRPcGVyYXRvcnMgPSAoc2VsZWN0ZWRPcGVyYXRvcjogc3RyaW5nKSA9PiB7XG4gICAgaWYgKGRpbWVuc2lvbk9wZXJhdG9ycy5maW5kKChvcGVyYXRvcjogU2VsZWN0YWJsZVZhbHVlKSA9PiBvcGVyYXRvci52YWx1ZSA9PT0gc2VsZWN0ZWRPcGVyYXRvcikpIHtcbiAgICAgIHJldHVybiBkaW1lbnNpb25PcGVyYXRvcnM7XG4gICAgfVxuICAgIHJldHVybiBbLi4uZGltZW5zaW9uT3BlcmF0b3JzLCAuLi4oc2VsZWN0ZWRPcGVyYXRvciA/IFt7IGxhYmVsOiBzZWxlY3RlZE9wZXJhdG9yLCB2YWx1ZTogc2VsZWN0ZWRPcGVyYXRvciB9XSA6IFtdKV07XG4gIH07XG5cbiAgY29uc3Qgb25NdWx0aVNlbGVjdEZpbHRlckNoYW5nZSA9IChpbmRleDogbnVtYmVyLCB2OiBBcnJheTxTZWxlY3RhYmxlVmFsdWU8c3RyaW5nPj4pID0+IHtcbiAgICBvbkZpZWxkQ2hhbmdlKFxuICAgICAgaW5kZXgsXG4gICAgICAnZmlsdGVycycsXG4gICAgICB2Lm1hcCgoaXRlbSkgPT4gaXRlbS52YWx1ZSB8fCAnJylcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZpZWxkIGxhYmVsPVwiRGltZW5zaW9uXCI+XG4gICAgICA8VmVydGljYWxHcm91cCBzcGFjaW5nPVwieHNcIj5cbiAgICAgICAge2RpbWVuc2lvbkZpbHRlcnMubWFwKChmaWx0ZXIsIGluZGV4KSA9PiAoXG4gICAgICAgICAgPEhvcml6b250YWxHcm91cCBrZXk9e2luZGV4fSBzcGFjaW5nPVwieHNcIj5cbiAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJGaWVsZFwiXG4gICAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXIuZGltZW5zaW9ufVxuICAgICAgICAgICAgICBvcHRpb25zPXtnZXRWYWxpZERpbWVuc2lvbk9wdGlvbnMoZmlsdGVyLmRpbWVuc2lvbil9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXsodikgPT4gb25GaWVsZENoYW5nZShpbmRleCwgJ2RpbWVuc2lvbicsIHYudmFsdWUgPz8gJycpfVxuICAgICAgICAgICAgICB3aWR0aD17Mzh9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICBtZW51U2hvdWxkUG9ydGFsXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiT3BlcmF0aW9uXCJcbiAgICAgICAgICAgICAgdmFsdWU9e2ZpbHRlci5vcGVyYXRvcn1cbiAgICAgICAgICAgICAgb3B0aW9ucz17Z2V0VmFsaWRPcGVyYXRvcnMoZmlsdGVyLm9wZXJhdG9yKX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBvbkZpZWxkQ2hhbmdlKGluZGV4LCAnb3BlcmF0b3InLCB2LnZhbHVlID8/ICcnKX1cbiAgICAgICAgICAgICAgYWxsb3dDdXN0b21WYWx1ZVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtmaWx0ZXIub3BlcmF0b3IgPT09ICdlcScgfHwgZmlsdGVyLm9wZXJhdG9yID09PSAnbmUnID8gKFxuICAgICAgICAgICAgICA8TXVsdGlTZWxlY3RcbiAgICAgICAgICAgICAgICBtZW51U2hvdWxkUG9ydGFsXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWxlY3QgdmFsdWUocylcIlxuICAgICAgICAgICAgICAgIHZhbHVlPXtmaWx0ZXIuZmlsdGVyc31cbiAgICAgICAgICAgICAgICBvcHRpb25zPXtnZXRWYWxpZE11bHRpU2VsZWN0T3B0aW9ucyhmaWx0ZXIuZmlsdGVycywgZmlsdGVyLmRpbWVuc2lvbil9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9eyh2KSA9PiBvbk11bHRpU2VsZWN0RmlsdGVyQ2hhbmdlKGluZGV4LCB2KX1cbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXsnZGltZW5zaW9uLWxhYmVscy1zZWxlY3QnfVxuICAgICAgICAgICAgICAgIGFsbG93Q3VzdG9tVmFsdWVcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIC8vIFRoZSBBUEkgZG9lcyBub3QgY3VycmVudGx5IGFsbG93IGZvciBtdWx0aXBsZSBcInN0YXJ0cyB3aXRoXCIgY2xhdXNlcyB0byBiZSB1c2VkLlxuICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgbWVudVNob3VsZFBvcnRhbFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VsZWN0IHZhbHVlXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT17ZmlsdGVyLmZpbHRlcnMgPyBmaWx0ZXIuZmlsdGVyc1swXSA6ICcnfVxuICAgICAgICAgICAgICAgIGFsbG93Q3VzdG9tVmFsdWVcbiAgICAgICAgICAgICAgICBvcHRpb25zPXtnZXRWYWxpZEZpbHRlck9wdGlvbnMoZmlsdGVyLmZpbHRlcnMgPyBmaWx0ZXIuZmlsdGVyc1swXSA6ICcnLCBmaWx0ZXIuZGltZW5zaW9uKX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KHYpID0+IG9uRmlsdGVySW5wdXRDaGFuZ2UoaW5kZXgsIHYpfVxuICAgICAgICAgICAgICAgIGlzQ2xlYXJhYmxlXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICB2YXJpYW50PVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgc2l6ZT1cIm1kXCJcbiAgICAgICAgICAgICAgaWNvbj1cInRyYXNoLWFsdFwiXG4gICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJSZW1vdmVcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiByZW1vdmVGaWx0ZXIoaW5kZXgpfVxuICAgICAgICAgICAgPjwvQnV0dG9uPlxuICAgICAgICAgIDwvSG9yaXpvbnRhbEdyb3VwPlxuICAgICAgICApKX1cblxuICAgICAgICA8QnV0dG9uIHZhcmlhbnQ9XCJzZWNvbmRhcnlcIiBzaXplPVwibWRcIiBvbkNsaWNrPXthZGRGaWx0ZXJ9PlxuICAgICAgICAgIEFkZCBuZXcgZGltZW5zaW9uXG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9WZXJ0aWNhbEdyb3VwPlxuICAgIDwvRmllbGQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEaW1lbnNpb25GaWVsZHM7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IHsgQXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uL0ZpZWxkJztcblxuaW1wb3J0IHsgc2V0TGVnZW5kQWxpYXMgfSBmcm9tICcuL3NldFF1ZXJ5VmFsdWUnO1xuXG5jb25zdCBMZWdlbmRGb3JtYXRGaWVsZDogUmVhY3QuRkM8QXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHM+ID0gKHsgb25RdWVyeUNoYW5nZSwgcXVlcnkgfSkgPT4ge1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IHVzZVN0YXRlPHN0cmluZz4ocXVlcnkuYXp1cmVNb25pdG9yPy5hbGlhcyA/PyAnJyk7XG5cbiAgLy8gQXMgY2FsbGluZyBvblF1ZXJ5Q2hhbmdlIGluaXRpYXRlcyBhIHRoZSBkYXRhc291cmNlIHJlZnJlc2gsIHdlIG9ubHkgd2FudCB0byBjYWxsIGl0IG9uY2VcbiAgLy8gdGhlIGZpZWxkIGxvc2VzIGZvY3VzXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKChldjogUmVhY3QuRm9ybUV2ZW50KSA9PiB7XG4gICAgaWYgKGV2LnRhcmdldCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgIHNldFZhbHVlKGV2LnRhcmdldC52YWx1ZSk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlQmx1ciA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBjb25zdCBuZXdRdWVyeSA9IHNldExlZ2VuZEFsaWFzKHF1ZXJ5LCB2YWx1ZSk7XG4gICAgb25RdWVyeUNoYW5nZShuZXdRdWVyeSk7XG4gIH0sIFtvblF1ZXJ5Q2hhbmdlLCBxdWVyeSwgdmFsdWVdKTtcblxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBsYWJlbD1cIkxlZ2VuZCBmb3JtYXRcIj5cbiAgICAgIDxJbnB1dFxuICAgICAgICBpZD1cImF6dXJlLW1vbml0b3ItbWV0cmljcy1sZWdlbmQtZmllbGRcIlxuICAgICAgICBwbGFjZWhvbGRlcj1cIkFsaWFzIHBhdHRlcm5zXCJcbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICBvbkJsdXI9e2hhbmRsZUJsdXJ9XG4gICAgICAgIHdpZHRoPXszOH1cbiAgICAgIC8+XG4gICAgPC9GaWVsZD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExlZ2VuZEZvcm1hdEZpZWxkO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBTZWxlY3RhYmxlVmFsdWUgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IHsgQXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHMsIEF6dXJlTW9uaXRvck9wdGlvbiB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vRmllbGQnO1xuXG5pbXBvcnQgeyBzZXRNZXRyaWNOYW1lIH0gZnJvbSAnLi9zZXRRdWVyeVZhbHVlJztcblxuaW50ZXJmYWNlIE1ldHJpY05hbWVQcm9wcyBleHRlbmRzIEF6dXJlUXVlcnlFZGl0b3JGaWVsZFByb3BzIHtcbiAgbWV0cmljTmFtZXM6IEF6dXJlTW9uaXRvck9wdGlvbltdO1xufVxuXG5jb25zdCBNZXRyaWNOYW1lRmllbGQ6IFJlYWN0LkZDPE1ldHJpY05hbWVQcm9wcz4gPSAoeyBtZXRyaWNOYW1lcywgcXVlcnksIHZhcmlhYmxlT3B0aW9uR3JvdXAsIG9uUXVlcnlDaGFuZ2UgfSkgPT4ge1xuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAoY2hhbmdlOiBTZWxlY3RhYmxlVmFsdWU8c3RyaW5nPikgPT4ge1xuICAgICAgaWYgKCFjaGFuZ2UudmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBuZXdRdWVyeSA9IHNldE1ldHJpY05hbWUocXVlcnksIGNoYW5nZS52YWx1ZSk7XG4gICAgICBvblF1ZXJ5Q2hhbmdlKG5ld1F1ZXJ5KTtcbiAgICB9LFxuICAgIFtvblF1ZXJ5Q2hhbmdlLCBxdWVyeV1cbiAgKTtcblxuICBjb25zdCBvcHRpb25zID0gdXNlTWVtbygoKSA9PiBbLi4ubWV0cmljTmFtZXMsIHZhcmlhYmxlT3B0aW9uR3JvdXBdLCBbbWV0cmljTmFtZXMsIHZhcmlhYmxlT3B0aW9uR3JvdXBdKTtcblxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBsYWJlbD1cIk1ldHJpY1wiPlxuICAgICAgPFNlbGVjdFxuICAgICAgICBpbnB1dElkPVwiYXp1cmUtbW9uaXRvci1tZXRyaWNzLW1ldHJpYy1maWVsZFwiXG4gICAgICAgIHZhbHVlPXtxdWVyeS5henVyZU1vbml0b3I/Lm1ldHJpY05hbWUgPz8gbnVsbH1cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgd2lkdGg9ezM4fVxuICAgICAgICBhbGxvd0N1c3RvbVZhbHVlXG4gICAgICAvPlxuICAgIDwvRmllbGQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNZXRyaWNOYW1lRmllbGQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFNlbGVjdGFibGVWYWx1ZSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5pbXBvcnQgeyBBenVyZVF1ZXJ5RWRpdG9yRmllbGRQcm9wcywgQXp1cmVNb25pdG9yT3B0aW9uIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi9GaWVsZCc7XG5cbmltcG9ydCB7IHNldE1ldHJpY05hbWVzcGFjZSB9IGZyb20gJy4vc2V0UXVlcnlWYWx1ZSc7XG5cbmludGVyZmFjZSBNZXRyaWNOYW1lc3BhY2VGaWVsZFByb3BzIGV4dGVuZHMgQXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHMge1xuICBtZXRyaWNOYW1lc3BhY2VzOiBBenVyZU1vbml0b3JPcHRpb25bXTtcbn1cblxuY29uc3QgTWV0cmljTmFtZXNwYWNlRmllbGQ6IFJlYWN0LkZDPE1ldHJpY05hbWVzcGFjZUZpZWxkUHJvcHM+ID0gKHtcbiAgbWV0cmljTmFtZXNwYWNlcyxcbiAgcXVlcnksXG4gIHZhcmlhYmxlT3B0aW9uR3JvdXAsXG4gIG9uUXVlcnlDaGFuZ2UsXG59KSA9PiB7XG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgIChjaGFuZ2U6IFNlbGVjdGFibGVWYWx1ZTxzdHJpbmc+KSA9PiB7XG4gICAgICBpZiAoIWNoYW5nZS52YWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5ld1F1ZXJ5ID0gc2V0TWV0cmljTmFtZXNwYWNlKHF1ZXJ5LCBjaGFuZ2UudmFsdWUpO1xuICAgICAgb25RdWVyeUNoYW5nZShuZXdRdWVyeSk7XG4gICAgfSxcbiAgICBbb25RdWVyeUNoYW5nZSwgcXVlcnldXG4gICk7XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHVzZU1lbW8oKCkgPT4gWy4uLm1ldHJpY05hbWVzcGFjZXMsIHZhcmlhYmxlT3B0aW9uR3JvdXBdLCBbbWV0cmljTmFtZXNwYWNlcywgdmFyaWFibGVPcHRpb25Hcm91cF0pO1xuICBjb25zdCBvcHRpb25WYWx1ZXMgPSBtZXRyaWNOYW1lc3BhY2VzXG4gICAgLm1hcCgobSkgPT4gbS52YWx1ZS50b0xvd2VyQ2FzZSgpKVxuICAgIC5jb25jYXQodmFyaWFibGVPcHRpb25Hcm91cC5vcHRpb25zLm1hcCgocCkgPT4gcC52YWx1ZSkpO1xuICBjb25zdCB2YWx1ZSA9IHF1ZXJ5LmF6dXJlTW9uaXRvcj8ubWV0cmljTmFtZXNwYWNlO1xuICBpZiAodmFsdWUgJiYgIW9wdGlvblZhbHVlcy5pbmNsdWRlcyh2YWx1ZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIG9wdGlvbnMucHVzaCh7IGxhYmVsOiB2YWx1ZSwgdmFsdWUgfSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBsYWJlbD1cIk1ldHJpYyBuYW1lc3BhY2VcIj5cbiAgICAgIDxTZWxlY3RcbiAgICAgICAgaW5wdXRJZD1cImF6dXJlLW1vbml0b3ItbWV0cmljcy1tZXRyaWMtbmFtZXNwYWNlLWZpZWxkXCJcbiAgICAgICAgdmFsdWU9e3F1ZXJ5LmF6dXJlTW9uaXRvcj8ubWV0cmljTmFtZXNwYWNlfVxuICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuICAgICAgICB3aWR0aD17Mzh9XG4gICAgICAgIGFsbG93Q3VzdG9tVmFsdWVcbiAgICAgIC8+XG4gICAgPC9GaWVsZD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1ldHJpY05hbWVzcGFjZUZpZWxkO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFBhbmVsRGF0YSB9IGZyb20gJ0BncmFmYW5hL2RhdGEvc3JjL3R5cGVzJztcbmltcG9ydCB7IEVkaXRvclJvd3MsIEVkaXRvclJvdywgRWRpdG9yRmllbGRHcm91cCB9IGZyb20gJ0BncmFmYW5hL2V4cGVyaW1lbnRhbCc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdAZ3JhZmFuYS9ydW50aW1lJztcbmltcG9ydCB7IElubGluZUZpZWxkUm93LCB1c2VTdHlsZXMyIH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5pbXBvcnQgdHlwZSBEYXRhc291cmNlIGZyb20gJy4uLy4uL2RhdGFzb3VyY2UnO1xuaW1wb3J0IHR5cGUgeyBBenVyZU1vbml0b3JRdWVyeSwgQXp1cmVNb25pdG9yT3B0aW9uLCBBenVyZU1vbml0b3JFcnJvcmlzaCB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCBSZXNvdXJjZUZpZWxkIGZyb20gJy4uL1Jlc291cmNlRmllbGQnO1xuaW1wb3J0IHsgUmVzb3VyY2VSb3dUeXBlIH0gZnJvbSAnLi4vUmVzb3VyY2VQaWNrZXIvdHlwZXMnO1xuXG5pbXBvcnQgQWdncmVnYXRpb25GaWVsZCBmcm9tICcuL0FnZ3JlZ2F0aW9uRmllbGQnO1xuaW1wb3J0IERpbWVuc2lvbkZpZWxkcyBmcm9tICcuL0RpbWVuc2lvbkZpZWxkcyc7XG5pbXBvcnQgTGVnZW5kRm9ybWF0RmllbGQgZnJvbSAnLi9MZWdlbmRGb3JtYXRGaWVsZCc7XG5pbXBvcnQgTWV0cmljTmFtZUZpZWxkIGZyb20gJy4vTWV0cmljTmFtZUZpZWxkJztcbmltcG9ydCBNZXRyaWNOYW1lc3BhY2VGaWVsZCBmcm9tICcuL01ldHJpY05hbWVzcGFjZUZpZWxkJztcbmltcG9ydCBOZXdEaW1lbnNpb25GaWVsZHMgZnJvbSAnLi9OZXdEaW1lbnNpb25GaWVsZHMnO1xuaW1wb3J0IFRpbWVHcmFpbkZpZWxkIGZyb20gJy4vVGltZUdyYWluRmllbGQnO1xuaW1wb3J0IFRvcEZpZWxkIGZyb20gJy4vVG9wRmllbGQnO1xuaW1wb3J0IHsgdXNlTWV0cmljTmFtZXMsIHVzZU1ldHJpY05hbWVzcGFjZXMsIHVzZU1ldHJpY01ldGFkYXRhIH0gZnJvbSAnLi9kYXRhSG9va3MnO1xuaW1wb3J0IHsgc2V0UmVzb3VyY2UgfSBmcm9tICcuL3NldFF1ZXJ5VmFsdWUnO1xuXG5pbnRlcmZhY2UgTWV0cmljc1F1ZXJ5RWRpdG9yUHJvcHMge1xuICBkYXRhOiBQYW5lbERhdGEgfCB1bmRlZmluZWQ7XG4gIHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeTtcbiAgZGF0YXNvdXJjZTogRGF0YXNvdXJjZTtcbiAgb25DaGFuZ2U6IChuZXdRdWVyeTogQXp1cmVNb25pdG9yUXVlcnkpID0+IHZvaWQ7XG4gIHZhcmlhYmxlT3B0aW9uR3JvdXA6IHsgbGFiZWw6IHN0cmluZzsgb3B0aW9uczogQXp1cmVNb25pdG9yT3B0aW9uW10gfTtcbiAgc2V0RXJyb3I6IChzb3VyY2U6IHN0cmluZywgZXJyb3I6IEF6dXJlTW9uaXRvckVycm9yaXNoIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xufVxuXG5jb25zdCBNZXRyaWNzUXVlcnlFZGl0b3I6IFJlYWN0LkZDPE1ldHJpY3NRdWVyeUVkaXRvclByb3BzPiA9ICh7XG4gIGRhdGEsXG4gIHF1ZXJ5LFxuICBkYXRhc291cmNlLFxuICB2YXJpYWJsZU9wdGlvbkdyb3VwLFxuICBvbkNoYW5nZSxcbiAgc2V0RXJyb3IsXG59KSA9PiB7XG4gIGNvbnN0IHN0eWxlcyA9IHVzZVN0eWxlczIoZ2V0U3R5bGVzKTtcblxuICBjb25zdCBtZXRyaWNzTWV0YWRhdGEgPSB1c2VNZXRyaWNNZXRhZGF0YShxdWVyeSwgZGF0YXNvdXJjZSwgb25DaGFuZ2UpO1xuICBjb25zdCBtZXRyaWNOYW1lc3BhY2VzID0gdXNlTWV0cmljTmFtZXNwYWNlcyhxdWVyeSwgZGF0YXNvdXJjZSwgb25DaGFuZ2UsIHNldEVycm9yKTtcbiAgY29uc3QgbWV0cmljTmFtZXMgPSB1c2VNZXRyaWNOYW1lcyhxdWVyeSwgZGF0YXNvdXJjZSwgb25DaGFuZ2UsIHNldEVycm9yKTtcbiAgaWYgKGNvbmZpZy5mZWF0dXJlVG9nZ2xlcy5henVyZU1vbml0b3JFeHBlcmltZW50YWxVSSkge1xuICAgIHJldHVybiAoXG4gICAgICA8c3BhbiBkYXRhLXRlc3RpZD1cImF6dXJlLW1vbml0b3ItbWV0cmljcy1xdWVyeS1lZGl0b3Itd2l0aC1leHBlcmltZW50YWwtdWlcIj5cbiAgICAgICAgPEVkaXRvclJvd3M+XG4gICAgICAgICAgPEVkaXRvclJvdz5cbiAgICAgICAgICAgIDxFZGl0b3JGaWVsZEdyb3VwPlxuICAgICAgICAgICAgICA8UmVzb3VyY2VGaWVsZFxuICAgICAgICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICAgICAgICBkYXRhc291cmNlPXtkYXRhc291cmNlfVxuICAgICAgICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgICAgICAgb25RdWVyeUNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgc2V0RXJyb3I9e3NldEVycm9yfVxuICAgICAgICAgICAgICAgIHNlbGVjdGFibGVFbnRyeVR5cGVzPXtbUmVzb3VyY2VSb3dUeXBlLlJlc291cmNlXX1cbiAgICAgICAgICAgICAgICBzZXRSZXNvdXJjZT17c2V0UmVzb3VyY2V9XG4gICAgICAgICAgICAgICAgcmVzb3VyY2VVcmk9e3F1ZXJ5LmF6dXJlTW9uaXRvcj8ucmVzb3VyY2VVcml9XG4gICAgICAgICAgICAgICAgcXVlcnlUeXBlPXsnbWV0cmljcyd9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxNZXRyaWNOYW1lc3BhY2VGaWVsZFxuICAgICAgICAgICAgICAgIG1ldHJpY05hbWVzcGFjZXM9e21ldHJpY05hbWVzcGFjZXN9XG4gICAgICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgICAgICAgdmFyaWFibGVPcHRpb25Hcm91cD17dmFyaWFibGVPcHRpb25Hcm91cH1cbiAgICAgICAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxNZXRyaWNOYW1lRmllbGRcbiAgICAgICAgICAgICAgICBtZXRyaWNOYW1lcz17bWV0cmljTmFtZXN9XG4gICAgICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgICAgICAgdmFyaWFibGVPcHRpb25Hcm91cD17dmFyaWFibGVPcHRpb25Hcm91cH1cbiAgICAgICAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L0VkaXRvckZpZWxkR3JvdXA+XG4gICAgICAgICAgPC9FZGl0b3JSb3c+XG4gICAgICAgICAgPEVkaXRvclJvdz5cbiAgICAgICAgICAgIDxFZGl0b3JGaWVsZEdyb3VwPlxuICAgICAgICAgICAgICA8QWdncmVnYXRpb25GaWVsZFxuICAgICAgICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICAgICAgICBkYXRhc291cmNlPXtkYXRhc291cmNlfVxuICAgICAgICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgICAgICAgb25RdWVyeUNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgc2V0RXJyb3I9e3NldEVycm9yfVxuICAgICAgICAgICAgICAgIGFnZ3JlZ2F0aW9uT3B0aW9ucz17bWV0cmljc01ldGFkYXRhPy5hZ2dPcHRpb25zID8/IFtdfVxuICAgICAgICAgICAgICAgIGlzTG9hZGluZz17bWV0cmljc01ldGFkYXRhLmlzTG9hZGluZ31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPFRpbWVHcmFpbkZpZWxkXG4gICAgICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgICAgICAgdmFyaWFibGVPcHRpb25Hcm91cD17dmFyaWFibGVPcHRpb25Hcm91cH1cbiAgICAgICAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAgICAgICAgICAgdGltZUdyYWluT3B0aW9ucz17bWV0cmljc01ldGFkYXRhPy50aW1lR3JhaW5zID8/IFtdfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9FZGl0b3JGaWVsZEdyb3VwPlxuICAgICAgICAgIDwvRWRpdG9yUm93PlxuICAgICAgICAgIDxFZGl0b3JSb3c+XG4gICAgICAgICAgICA8RWRpdG9yRmllbGRHcm91cD5cbiAgICAgICAgICAgICAgPE5ld0RpbWVuc2lvbkZpZWxkc1xuICAgICAgICAgICAgICAgIGRhdGE9e2RhdGF9XG4gICAgICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgICAgICAgdmFyaWFibGVPcHRpb25Hcm91cD17dmFyaWFibGVPcHRpb25Hcm91cH1cbiAgICAgICAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAgICAgICAgICAgZGltZW5zaW9uT3B0aW9ucz17bWV0cmljc01ldGFkYXRhPy5kaW1lbnNpb25zID8/IFtdfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9FZGl0b3JGaWVsZEdyb3VwPlxuICAgICAgICAgIDwvRWRpdG9yUm93PlxuICAgICAgICAgIDxFZGl0b3JSb3c+XG4gICAgICAgICAgICA8RWRpdG9yRmllbGRHcm91cD5cbiAgICAgICAgICAgICAgPFRvcEZpZWxkXG4gICAgICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgICAgICAgdmFyaWFibGVPcHRpb25Hcm91cD17dmFyaWFibGVPcHRpb25Hcm91cH1cbiAgICAgICAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxMZWdlbmRGb3JtYXRGaWVsZFxuICAgICAgICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICAgICAgICBkYXRhc291cmNlPXtkYXRhc291cmNlfVxuICAgICAgICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgICAgICAgb25RdWVyeUNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICAgICAgc2V0RXJyb3I9e3NldEVycm9yfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9FZGl0b3JGaWVsZEdyb3VwPlxuICAgICAgICAgIDwvRWRpdG9yUm93PlxuICAgICAgICA8L0VkaXRvclJvd3M+XG4gICAgICA8L3NwYW4+XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cImF6dXJlLW1vbml0b3ItbWV0cmljcy1xdWVyeS1lZGl0b3Itd2l0aC1yZXNvdXJjZS1waWNrZXJcIj5cbiAgICAgICAgPElubGluZUZpZWxkUm93IGNsYXNzTmFtZT17c3R5bGVzLnJvd30+XG4gICAgICAgICAgPFJlc291cmNlRmllbGRcbiAgICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgICB2YXJpYWJsZU9wdGlvbkdyb3VwPXt2YXJpYWJsZU9wdGlvbkdyb3VwfVxuICAgICAgICAgICAgb25RdWVyeUNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAgICAgICBzZWxlY3RhYmxlRW50cnlUeXBlcz17W1Jlc291cmNlUm93VHlwZS5SZXNvdXJjZV19XG4gICAgICAgICAgICBzZXRSZXNvdXJjZT17c2V0UmVzb3VyY2V9XG4gICAgICAgICAgICByZXNvdXJjZVVyaT17cXVlcnkuYXp1cmVNb25pdG9yPy5yZXNvdXJjZVVyaX1cbiAgICAgICAgICAgIHF1ZXJ5VHlwZT1cIm1ldHJpY3NcIlxuICAgICAgICAgIC8+XG4gICAgICAgIDwvSW5saW5lRmllbGRSb3c+XG5cbiAgICAgICAgPElubGluZUZpZWxkUm93IGNsYXNzTmFtZT17c3R5bGVzLnJvd30+XG4gICAgICAgICAgPE1ldHJpY05hbWVzcGFjZUZpZWxkXG4gICAgICAgICAgICBtZXRyaWNOYW1lc3BhY2VzPXttZXRyaWNOYW1lc3BhY2VzfVxuICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxNZXRyaWNOYW1lRmllbGRcbiAgICAgICAgICAgIG1ldHJpY05hbWVzPXttZXRyaWNOYW1lc31cbiAgICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgICB2YXJpYWJsZU9wdGlvbkdyb3VwPXt2YXJpYWJsZU9wdGlvbkdyb3VwfVxuICAgICAgICAgICAgb25RdWVyeUNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9JbmxpbmVGaWVsZFJvdz5cbiAgICAgICAgPElubGluZUZpZWxkUm93IGNsYXNzTmFtZT17c3R5bGVzLnJvd30+XG4gICAgICAgICAgPEFnZ3JlZ2F0aW9uRmllbGRcbiAgICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgICB2YXJpYWJsZU9wdGlvbkdyb3VwPXt2YXJpYWJsZU9wdGlvbkdyb3VwfVxuICAgICAgICAgICAgb25RdWVyeUNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAgICAgICBhZ2dyZWdhdGlvbk9wdGlvbnM9e21ldHJpY3NNZXRhZGF0YT8uYWdnT3B0aW9ucyA/PyBbXX1cbiAgICAgICAgICAgIGlzTG9hZGluZz17bWV0cmljc01ldGFkYXRhLmlzTG9hZGluZ31cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxUaW1lR3JhaW5GaWVsZFxuICAgICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgICBvblF1ZXJ5Q2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgICAgIHRpbWVHcmFpbk9wdGlvbnM9e21ldHJpY3NNZXRhZGF0YT8udGltZUdyYWlucyA/PyBbXX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0lubGluZUZpZWxkUm93PlxuICAgICAgICA8RGltZW5zaW9uRmllbGRzXG4gICAgICAgICAgZGF0YT17ZGF0YX1cbiAgICAgICAgICBxdWVyeT17cXVlcnl9XG4gICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICB2YXJpYWJsZU9wdGlvbkdyb3VwPXt2YXJpYWJsZU9wdGlvbkdyb3VwfVxuICAgICAgICAgIG9uUXVlcnlDaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgICBkaW1lbnNpb25PcHRpb25zPXttZXRyaWNzTWV0YWRhdGE/LmRpbWVuc2lvbnMgPz8gW119XG4gICAgICAgIC8+XG4gICAgICAgIDxUb3BGaWVsZFxuICAgICAgICAgIHF1ZXJ5PXtxdWVyeX1cbiAgICAgICAgICBkYXRhc291cmNlPXtkYXRhc291cmNlfVxuICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgb25RdWVyeUNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgc2V0RXJyb3I9e3NldEVycm9yfVxuICAgICAgICAvPlxuICAgICAgICA8TGVnZW5kRm9ybWF0RmllbGRcbiAgICAgICAgICBxdWVyeT17cXVlcnl9XG4gICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICB2YXJpYWJsZU9wdGlvbkdyb3VwPXt2YXJpYWJsZU9wdGlvbkdyb3VwfVxuICAgICAgICAgIG9uUXVlcnlDaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn07XG5cbmNvbnN0IGdldFN0eWxlcyA9ICgpID0+ICh7XG4gIHJvdzogY3NzKHtcbiAgICByb3dHYXA6IDAsXG4gIH0pLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IE1ldHJpY3NRdWVyeUVkaXRvcjtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBTZWxlY3RhYmxlVmFsdWUsIERhdGFGcmFtZSwgUGFuZWxEYXRhLCBMYWJlbHMgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IEFjY2Vzc29yeUJ1dHRvbiwgRWRpdG9yTGlzdCB9IGZyb20gJ0BncmFmYW5hL2V4cGVyaW1lbnRhbCc7XG5pbXBvcnQgeyBTZWxlY3QsIEhvcml6b250YWxHcm91cCwgTXVsdGlTZWxlY3QgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmltcG9ydCB7IEF6dXJlTWV0cmljRGltZW5zaW9uLCBBenVyZU1vbml0b3JPcHRpb24sIEF6dXJlTW9uaXRvclF1ZXJ5LCBBenVyZVF1ZXJ5RWRpdG9yRmllbGRQcm9wcyB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vRmllbGQnO1xuXG5pbXBvcnQgeyBzZXREaW1lbnNpb25GaWx0ZXJzIH0gZnJvbSAnLi9zZXRRdWVyeVZhbHVlJztcblxuaW50ZXJmYWNlIERpbWVuc2lvbkZpZWxkc1Byb3BzIGV4dGVuZHMgQXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHMge1xuICBkaW1lbnNpb25PcHRpb25zOiBBenVyZU1vbml0b3JPcHRpb25bXTtcbn1cblxuaW50ZXJmYWNlIERpbWVuc2lvbkxhYmVscyB7XG4gIFtrZXk6IHN0cmluZ106IFNldDxzdHJpbmc+O1xufVxuXG5jb25zdCB1c2VEaW1lbnNpb25MYWJlbHMgPSAoZGF0YTogUGFuZWxEYXRhIHwgdW5kZWZpbmVkLCBxdWVyeTogQXp1cmVNb25pdG9yUXVlcnkpID0+IHtcbiAgY29uc3QgW2RpbWVuc2lvbkxhYmVscywgc2V0RGltZW5zaW9uTGFiZWxzXSA9IHVzZVN0YXRlPERpbWVuc2lvbkxhYmVscz4oe30pO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBsYWJlbHNPYmo6IERpbWVuc2lvbkxhYmVscyA9IHt9O1xuICAgIGlmIChkYXRhPy5zZXJpZXM/Lmxlbmd0aCkge1xuICAgICAgLy8gSWRlbnRpZnkgd2hpY2ggc2VyaWVzJyBpbiB0aGUgZGF0YWZyYW1lIGFyZSByZWxldmFudCB0byB0aGUgY3VycmVudCBxdWVyeVxuICAgICAgY29uc3Qgc2VyaWVzOiBEYXRhRnJhbWVbXSA9IGRhdGEuc2VyaWVzLmZsYXQoKS5maWx0ZXIoKHNlcmllcykgPT4gc2VyaWVzLnJlZklkID09PSBxdWVyeS5yZWZJZCk7XG4gICAgICBjb25zdCBmaWVsZHMgPSBzZXJpZXMuZmxhdE1hcCgoc2VyaWVzKSA9PiBzZXJpZXMuZmllbGRzKTtcbiAgICAgIC8vIFJldHJpZXZlIGxhYmVscyBmb3Igc2VyaWVzIGZpZWxkc1xuICAgICAgY29uc3QgbGFiZWxzID0gZmllbGRzXG4gICAgICAgIC5tYXAoKGZpZWxkcykgPT4gZmllbGRzLmxhYmVscylcbiAgICAgICAgLmZsYXQoKVxuICAgICAgICAuZmlsdGVyKChpdGVtKTogaXRlbSBpcyBMYWJlbHMgPT4gaXRlbSAhPT0gbnVsbCAmJiBpdGVtICE9PSB1bmRlZmluZWQpO1xuICAgICAgZm9yIChjb25zdCBsYWJlbCBvZiBsYWJlbHMpIHtcbiAgICAgICAgLy8gTGFiZWxzIG9ubHkgZXhpc3QgZm9yIHNlcmllcyB0aGF0IGhhdmUgYSBkaW1lbnNpb24gc2VsZWN0ZWRcbiAgICAgICAgZm9yIChjb25zdCBbZGltZW5zaW9uLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMobGFiZWwpKSB7XG4gICAgICAgICAgaWYgKGxhYmVsc09ialtkaW1lbnNpb25dKSB7XG4gICAgICAgICAgICBsYWJlbHNPYmpbZGltZW5zaW9uXS5hZGQodmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYWJlbHNPYmpbZGltZW5zaW9uXSA9IG5ldyBTZXQoW3ZhbHVlXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHNldERpbWVuc2lvbkxhYmVscygocHJldkxhYmVscykgPT4ge1xuICAgICAgY29uc3QgbmV3TGFiZWxzOiBEaW1lbnNpb25MYWJlbHMgPSB7fTtcbiAgICAgIGNvbnN0IGN1cnJlbnRMYWJlbHMgPSBPYmplY3Qua2V5cyhsYWJlbHNPYmopO1xuICAgICAgaWYgKGN1cnJlbnRMYWJlbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBwcmV2TGFiZWxzO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBsYWJlbCBvZiBjdXJyZW50TGFiZWxzKSB7XG4gICAgICAgIGlmIChwcmV2TGFiZWxzW2xhYmVsXSAmJiBsYWJlbHNPYmpbbGFiZWxdLnNpemUgPCBwcmV2TGFiZWxzW2xhYmVsXS5zaXplKSB7XG4gICAgICAgICAgbmV3TGFiZWxzW2xhYmVsXSA9IHByZXZMYWJlbHNbbGFiZWxdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0xhYmVsc1tsYWJlbF0gPSBsYWJlbHNPYmpbbGFiZWxdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3TGFiZWxzO1xuICAgIH0pO1xuICB9LCBbZGF0YT8uc2VyaWVzLCBxdWVyeS5yZWZJZF0pO1xuICByZXR1cm4gZGltZW5zaW9uTGFiZWxzO1xufTtcblxuY29uc3QgTmV3RGltZW5zaW9uRmllbGRzOiBSZWFjdC5GQzxEaW1lbnNpb25GaWVsZHNQcm9wcz4gPSAoeyBkYXRhLCBxdWVyeSwgZGltZW5zaW9uT3B0aW9ucywgb25RdWVyeUNoYW5nZSB9KSA9PiB7XG4gIGNvbnN0IGRpbWVuc2lvbkZpbHRlcnMgPSB1c2VNZW1vKFxuICAgICgpID0+IHF1ZXJ5LmF6dXJlTW9uaXRvcj8uZGltZW5zaW9uRmlsdGVycyA/PyBbXSxcbiAgICBbcXVlcnkuYXp1cmVNb25pdG9yPy5kaW1lbnNpb25GaWx0ZXJzXVxuICApO1xuXG4gIGNvbnN0IGRpbWVuc2lvbkxhYmVscyA9IHVzZURpbWVuc2lvbkxhYmVscyhkYXRhLCBxdWVyeSk7XG5cbiAgY29uc3QgZGltZW5zaW9uT3BlcmF0b3JzOiBBcnJheTxTZWxlY3RhYmxlVmFsdWU8c3RyaW5nPj4gPSBbXG4gICAgeyBsYWJlbDogJz09JywgdmFsdWU6ICdlcScgfSxcbiAgICB7IGxhYmVsOiAnIT0nLCB2YWx1ZTogJ25lJyB9LFxuICAgIHsgbGFiZWw6ICdzdGFydHMgd2l0aCcsIHZhbHVlOiAnc3cnIH0sXG4gIF07XG5cbiAgY29uc3QgdmFsaWREaW1lbnNpb25PcHRpb25zID0gdXNlTWVtbygoKSA9PiB7XG4gICAgLy8gV2UgZmlsdGVyIG91dCBhbnkgZGltZW5zaW9ucyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHVzZWQgaW4gYSBmaWx0ZXIgYXMgdGhlIEFQSSBkb2Vzbid0IHN1cHBvcnQgaGF2aW5nIG11bHRpcGxlIGZpbHRlcnMgd2l0aCB0aGUgc2FtZSBkaW1lbnNpb24gbmFtZS5cbiAgICAvLyBUaGUgQXp1cmUgcG9ydGFsIGFsc28gZG9lc24ndCBzdXBwb3J0IHRoaXMgZmVhdHVyZSBzbyBpdCBtYWtlcyBzZW5zZSBmb3IgY29uc2lzdGVuY3kuXG4gICAgbGV0IHQgPSBkaW1lbnNpb25PcHRpb25zO1xuICAgIGlmIChkaW1lbnNpb25GaWx0ZXJzLmxlbmd0aCkge1xuICAgICAgdCA9IGRpbWVuc2lvbk9wdGlvbnMuZmlsdGVyKFxuICAgICAgICAodmFsKSA9PiAhZGltZW5zaW9uRmlsdGVycy5zb21lKChkaW1lbnNpb25GaWx0ZXIpID0+IGRpbWVuc2lvbkZpbHRlci5kaW1lbnNpb24gPT09IHZhbC52YWx1ZSlcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9LCBbZGltZW5zaW9uRmlsdGVycywgZGltZW5zaW9uT3B0aW9uc10pO1xuXG4gIGNvbnN0IG9uRmllbGRDaGFuZ2UgPSA8S2V5IGV4dGVuZHMga2V5b2YgQXp1cmVNZXRyaWNEaW1lbnNpb24+KFxuICAgIGZpZWxkTmFtZTogS2V5LFxuICAgIGl0ZW06IFBhcnRpYWw8QXp1cmVNZXRyaWNEaW1lbnNpb24+LFxuICAgIHZhbHVlOiBBenVyZU1ldHJpY0RpbWVuc2lvbltLZXldLFxuICAgIG9uQ2hhbmdlOiAoaXRlbTogUGFydGlhbDxBenVyZU1ldHJpY0RpbWVuc2lvbj4pID0+IHZvaWRcbiAgKSA9PiB7XG4gICAgaXRlbVtmaWVsZE5hbWVdID0gdmFsdWU7XG4gICAgb25DaGFuZ2UoaXRlbSk7XG4gIH07XG5cbiAgY29uc3QgZ2V0VmFsaWREaW1lbnNpb25PcHRpb25zID0gKHNlbGVjdGVkRGltZW5zaW9uOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gdmFsaWREaW1lbnNpb25PcHRpb25zLmNvbmNhdChkaW1lbnNpb25PcHRpb25zLmZpbHRlcigoaXRlbSkgPT4gaXRlbS52YWx1ZSA9PT0gc2VsZWN0ZWREaW1lbnNpb24pKTtcbiAgfTtcblxuICBjb25zdCBnZXRWYWxpZEZpbHRlck9wdGlvbnMgPSAoc2VsZWN0ZWRGaWx0ZXI6IHN0cmluZyB8IHVuZGVmaW5lZCwgZGltZW5zaW9uOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBkaW1lbnNpb25GaWx0ZXJzID0gQXJyYXkuZnJvbShkaW1lbnNpb25MYWJlbHNbZGltZW5zaW9uLnRvTG93ZXJDYXNlKCldID8/IFtdKTtcbiAgICBpZiAoZGltZW5zaW9uRmlsdGVycy5maW5kKChmaWx0ZXIpID0+IGZpbHRlciA9PT0gc2VsZWN0ZWRGaWx0ZXIpKSB7XG4gICAgICByZXR1cm4gZGltZW5zaW9uRmlsdGVycy5tYXAoKGZpbHRlcikgPT4gKHsgdmFsdWU6IGZpbHRlciwgbGFiZWw6IGZpbHRlciB9KSk7XG4gICAgfVxuICAgIHJldHVybiBbLi4uZGltZW5zaW9uRmlsdGVycywgLi4uKHNlbGVjdGVkRmlsdGVyICYmIHNlbGVjdGVkRmlsdGVyICE9PSAnKicgPyBbc2VsZWN0ZWRGaWx0ZXJdIDogW10pXS5tYXAoKGl0ZW0pID0+ICh7XG4gICAgICB2YWx1ZTogaXRlbSxcbiAgICAgIGxhYmVsOiBpdGVtLFxuICAgIH0pKTtcbiAgfTtcblxuICBjb25zdCBnZXRWYWxpZE11bHRpU2VsZWN0T3B0aW9ucyA9IChzZWxlY3RlZEZpbHRlcnM6IHN0cmluZ1tdIHwgdW5kZWZpbmVkLCBkaW1lbnNpb246IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGxhYmVsT3B0aW9ucyA9IGdldFZhbGlkRmlsdGVyT3B0aW9ucyh1bmRlZmluZWQsIGRpbWVuc2lvbik7XG4gICAgaWYgKHNlbGVjdGVkRmlsdGVycykge1xuICAgICAgZm9yIChjb25zdCBmaWx0ZXIgb2Ygc2VsZWN0ZWRGaWx0ZXJzKSB7XG4gICAgICAgIGlmICghbGFiZWxPcHRpb25zLmZpbmQoKGxhYmVsKSA9PiBsYWJlbC52YWx1ZSA9PT0gZmlsdGVyKSkge1xuICAgICAgICAgIGxhYmVsT3B0aW9ucy5wdXNoKHsgdmFsdWU6IGZpbHRlciwgbGFiZWw6IGZpbHRlciB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGFiZWxPcHRpb25zO1xuICB9O1xuICBjb25zdCBnZXRWYWxpZE9wZXJhdG9ycyA9IChzZWxlY3RlZE9wZXJhdG9yOiBzdHJpbmcpID0+IHtcbiAgICBpZiAoZGltZW5zaW9uT3BlcmF0b3JzLmZpbmQoKG9wZXJhdG9yOiBTZWxlY3RhYmxlVmFsdWUpID0+IG9wZXJhdG9yLnZhbHVlID09PSBzZWxlY3RlZE9wZXJhdG9yKSkge1xuICAgICAgcmV0dXJuIGRpbWVuc2lvbk9wZXJhdG9ycztcbiAgICB9XG4gICAgcmV0dXJuIFsuLi5kaW1lbnNpb25PcGVyYXRvcnMsIC4uLihzZWxlY3RlZE9wZXJhdG9yID8gW3sgbGFiZWw6IHNlbGVjdGVkT3BlcmF0b3IsIHZhbHVlOiBzZWxlY3RlZE9wZXJhdG9yIH1dIDogW10pXTtcbiAgfTtcblxuICBjb25zdCBjaGFuZ2VkRnVuYyA9IChjaGFuZ2VkOiBBcnJheTxQYXJ0aWFsPEF6dXJlTWV0cmljRGltZW5zaW9uPj4pID0+IHtcbiAgICBjb25zdCBwcm9wZXJEYXRhOiBBenVyZU1ldHJpY0RpbWVuc2lvbltdID0gY2hhbmdlZC5tYXAoKHgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpbWVuc2lvbjogeC5kaW1lbnNpb24gPz8gJycsXG4gICAgICAgIG9wZXJhdG9yOiB4Lm9wZXJhdG9yID8/ICdlcScsXG4gICAgICAgIGZpbHRlcnM6IHguZmlsdGVycyA/PyBbXSxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgb25RdWVyeUNoYW5nZShzZXREaW1lbnNpb25GaWx0ZXJzKHF1ZXJ5LCBwcm9wZXJEYXRhKSk7XG4gIH07XG5cbiAgY29uc3QgcmVuZGVyRmlsdGVycyA9IChcbiAgICBpdGVtOiBQYXJ0aWFsPEF6dXJlTWV0cmljRGltZW5zaW9uPixcbiAgICBvbkNoYW5nZTogKGl0ZW06IFBhcnRpYWw8QXp1cmVNZXRyaWNEaW1lbnNpb24+KSA9PiB2b2lkLFxuICAgIG9uRGVsZXRlOiAoKSA9PiB2b2lkXG4gICkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8SG9yaXpvbnRhbEdyb3VwIHNwYWNpbmc9XCJub25lXCI+XG4gICAgICAgIDxTZWxlY3RcbiAgICAgICAgICBtZW51U2hvdWxkUG9ydGFsXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJGaWVsZFwiXG4gICAgICAgICAgdmFsdWU9e2l0ZW0uZGltZW5zaW9ufVxuICAgICAgICAgIG9wdGlvbnM9e2dldFZhbGlkRGltZW5zaW9uT3B0aW9ucyhpdGVtLmRpbWVuc2lvbiB8fCAnJyl9XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkZpZWxkQ2hhbmdlKCdkaW1lbnNpb24nLCBpdGVtLCBlLnZhbHVlID8/ICcnLCBvbkNoYW5nZSl9XG4gICAgICAgIC8+XG4gICAgICAgIDxTZWxlY3RcbiAgICAgICAgICBtZW51U2hvdWxkUG9ydGFsXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJPcGVyYXRpb25cIlxuICAgICAgICAgIHZhbHVlPXtpdGVtLm9wZXJhdG9yfVxuICAgICAgICAgIG9wdGlvbnM9e2dldFZhbGlkT3BlcmF0b3JzKGl0ZW0ub3BlcmF0b3IgfHwgJ2VxJyl9XG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBvbkZpZWxkQ2hhbmdlKCdvcGVyYXRvcicsIGl0ZW0sIGUudmFsdWUgPz8gJycsIG9uQ2hhbmdlKX1cbiAgICAgICAgICBhbGxvd0N1c3RvbVZhbHVlXG4gICAgICAgIC8+XG4gICAgICAgIHtpdGVtLm9wZXJhdG9yID09PSAnZXEnIHx8IGl0ZW0ub3BlcmF0b3IgPT09ICduZScgPyAoXG4gICAgICAgICAgPE11bHRpU2VsZWN0XG4gICAgICAgICAgICBtZW51U2hvdWxkUG9ydGFsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCB2YWx1ZShzKVwiXG4gICAgICAgICAgICB2YWx1ZT17aXRlbS5maWx0ZXJzfVxuICAgICAgICAgICAgb3B0aW9ucz17Z2V0VmFsaWRNdWx0aVNlbGVjdE9wdGlvbnMoaXRlbS5maWx0ZXJzLCBpdGVtLmRpbWVuc2lvbiA/PyAnJyl9XG4gICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+XG4gICAgICAgICAgICAgIG9uRmllbGRDaGFuZ2UoXG4gICAgICAgICAgICAgICAgJ2ZpbHRlcnMnLFxuICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgZS5tYXAoKHgpID0+IHgudmFsdWUgPz8gJycpLFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9eydkaW1lbnNpb24tbGFiZWxzLXNlbGVjdCd9XG4gICAgICAgICAgICBhbGxvd0N1c3RvbVZhbHVlXG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICAvLyBUaGUgQVBJIGRvZXMgbm90IGN1cnJlbnRseSBhbGxvdyBmb3IgbXVsdGlwbGUgXCJzdGFydHMgd2l0aFwiIGNsYXVzZXMgdG8gYmUgdXNlZC5cbiAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICBtZW51U2hvdWxkUG9ydGFsXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCB2YWx1ZVwiXG4gICAgICAgICAgICB2YWx1ZT17aXRlbS5maWx0ZXJzID8gaXRlbS5maWx0ZXJzWzBdIDogJyd9XG4gICAgICAgICAgICBhbGxvd0N1c3RvbVZhbHVlXG4gICAgICAgICAgICBvcHRpb25zPXtnZXRWYWxpZEZpbHRlck9wdGlvbnMoaXRlbS5maWx0ZXJzID8gaXRlbS5maWx0ZXJzWzBdIDogJycsIGl0ZW0uZGltZW5zaW9uID8/ICcnKX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gb25GaWVsZENoYW5nZSgnZmlsdGVycycsIGl0ZW0sIFtlPy52YWx1ZSA/PyAnJ10sIG9uQ2hhbmdlKX1cbiAgICAgICAgICAgIGlzQ2xlYXJhYmxlXG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAgPEFjY2Vzc29yeUJ1dHRvbiBhcmlhLWxhYmVsPVwiUmVtb3ZlXCIgaWNvbj1cInRpbWVzXCIgdmFyaWFudD1cInNlY29uZGFyeVwiIG9uQ2xpY2s9e29uRGVsZXRlfSB0eXBlPVwiYnV0dG9uXCIgLz5cbiAgICAgIDwvSG9yaXpvbnRhbEdyb3VwPlxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8RmllbGQgbGFiZWw9XCJEaW1lbnNpb25zXCI+XG4gICAgICA8RWRpdG9yTGlzdCBpdGVtcz17ZGltZW5zaW9uRmlsdGVyc30gb25DaGFuZ2U9e2NoYW5nZWRGdW5jfSByZW5kZXJJdGVtPXtyZW5kZXJGaWx0ZXJzfSAvPlxuICAgIDwvRmllbGQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOZXdEaW1lbnNpb25GaWVsZHM7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFNlbGVjdGFibGVWYWx1ZSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgU2VsZWN0IH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5pbXBvcnQgVGltZWdyYWluQ29udmVydGVyIGZyb20gJy4uLy4uL3RpbWVfZ3JhaW5fY29udmVydGVyJztcbmltcG9ydCB7IEF6dXJlUXVlcnlFZGl0b3JGaWVsZFByb3BzLCBBenVyZU1vbml0b3JPcHRpb24gfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uL0ZpZWxkJztcblxuaW1wb3J0IHsgc2V0VGltZUdyYWluIH0gZnJvbSAnLi9zZXRRdWVyeVZhbHVlJztcblxuaW50ZXJmYWNlIFRpbWVHcmFpbkZpZWxkUHJvcHMgZXh0ZW5kcyBBenVyZVF1ZXJ5RWRpdG9yRmllbGRQcm9wcyB7XG4gIHRpbWVHcmFpbk9wdGlvbnM6IEF6dXJlTW9uaXRvck9wdGlvbltdO1xufVxuXG5jb25zdCBUaW1lR3JhaW5GaWVsZDogUmVhY3QuRkM8VGltZUdyYWluRmllbGRQcm9wcz4gPSAoe1xuICBxdWVyeSxcbiAgdGltZUdyYWluT3B0aW9ucyxcbiAgdmFyaWFibGVPcHRpb25Hcm91cCxcbiAgb25RdWVyeUNoYW5nZSxcbn0pID0+IHtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKGNoYW5nZTogU2VsZWN0YWJsZVZhbHVlPHN0cmluZz4pID0+IHtcbiAgICAgIGlmICghY2hhbmdlLnZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3UXVlcnkgPSBzZXRUaW1lR3JhaW4ocXVlcnksIGNoYW5nZS52YWx1ZSk7XG4gICAgICBvblF1ZXJ5Q2hhbmdlKG5ld1F1ZXJ5KTtcbiAgICB9LFxuICAgIFtvblF1ZXJ5Q2hhbmdlLCBxdWVyeV1cbiAgKTtcblxuICBjb25zdCB0aW1lR3JhaW5zID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3QgYXV0b0ludGVydmFsID0gVGltZWdyYWluQ29udmVydGVyLmZpbmRDbG9zZXN0VGltZUdyYWluKFxuICAgICAgJzFtJyxcbiAgICAgIHRpbWVHcmFpbk9wdGlvbnMubWFwKChvKSA9PiBUaW1lZ3JhaW5Db252ZXJ0ZXIuY3JlYXRlS2JuVW5pdEZyb21JU084NjAxRHVyYXRpb24oby52YWx1ZSkpIHx8IFtcbiAgICAgICAgJzFtJyxcbiAgICAgICAgJzVtJyxcbiAgICAgICAgJzE1bScsXG4gICAgICAgICczMG0nLFxuICAgICAgICAnMWgnLFxuICAgICAgICAnNmgnLFxuICAgICAgICAnMTJoJyxcbiAgICAgICAgJzFkJyxcbiAgICAgIF1cbiAgICApO1xuXG4gICAgY29uc3QgYmFzZVRpbWVHcmFpbnMgPSB0aW1lR3JhaW5PcHRpb25zLm1hcCgodikgPT4gKHYudmFsdWUgPT09ICdhdXRvJyA/IHsgLi4udiwgZGVzY3JpcHRpb246IGF1dG9JbnRlcnZhbCB9IDogdikpO1xuXG4gICAgcmV0dXJuIFsuLi5iYXNlVGltZUdyYWlucywgdmFyaWFibGVPcHRpb25Hcm91cF07XG4gIH0sIFt0aW1lR3JhaW5PcHRpb25zLCB2YXJpYWJsZU9wdGlvbkdyb3VwXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RmllbGQgbGFiZWw9XCJUaW1lIGdyYWluXCI+XG4gICAgICA8U2VsZWN0XG4gICAgICAgIGlucHV0SWQ9XCJhenVyZS1tb25pdG9yLW1ldHJpY3MtdGltZS1ncmFpbi1maWVsZFwiXG4gICAgICAgIHZhbHVlPXtxdWVyeS5henVyZU1vbml0b3I/LnRpbWVHcmFpbn1cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgb3B0aW9ucz17dGltZUdyYWluc31cbiAgICAgICAgd2lkdGg9ezM4fVxuICAgICAgLz5cbiAgICA8L0ZpZWxkPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVGltZUdyYWluRmllbGQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IHsgQXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uL0ZpZWxkJztcblxuaW1wb3J0IHsgc2V0VG9wIH0gZnJvbSAnLi9zZXRRdWVyeVZhbHVlJztcblxuY29uc3QgVG9wRmllbGQ6IFJlYWN0LkZDPEF6dXJlUXVlcnlFZGl0b3JGaWVsZFByb3BzPiA9ICh7IG9uUXVlcnlDaGFuZ2UsIHF1ZXJ5IH0pID0+IHtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KHF1ZXJ5LmF6dXJlTW9uaXRvcj8udG9wID8/ICcnKTtcblxuICAvLyBBcyBjYWxsaW5nIG9uUXVlcnlDaGFuZ2UgaW5pdGlhdGVzIGEgdGhlIGRhdGFzb3VyY2UgcmVmcmVzaCwgd2Ugb25seSB3YW50IHRvIGNhbGwgaXQgb25jZVxuICAvLyB0aGUgZmllbGQgbG9zZXMgZm9jdXNcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2soKGV2OiBSZWFjdC5Gb3JtRXZlbnQpID0+IHtcbiAgICBpZiAoZXYudGFyZ2V0IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgc2V0VmFsdWUoZXYudGFyZ2V0LnZhbHVlKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCBoYW5kbGVCbHVyID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGNvbnN0IG5ld1F1ZXJ5ID0gc2V0VG9wKHF1ZXJ5LCB2YWx1ZSk7XG4gICAgb25RdWVyeUNoYW5nZShuZXdRdWVyeSk7XG4gIH0sIFtvblF1ZXJ5Q2hhbmdlLCBxdWVyeSwgdmFsdWVdKTtcblxuICByZXR1cm4gKFxuICAgIDxGaWVsZCBsYWJlbD1cIlRvcFwiPlxuICAgICAgPElucHV0XG4gICAgICAgIGlkPVwiYXp1cmUtbW9uaXRvci1tZXRyaWNzLXRvcC1maWVsZFwiXG4gICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgb25CbHVyPXtoYW5kbGVCbHVyfVxuICAgICAgICB3aWR0aD17MTZ9XG4gICAgICAvPlxuICAgIDwvRmllbGQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUb3BGaWVsZDtcbiIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHJhbmdlVXRpbCB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuXG5pbXBvcnQgRGF0YXNvdXJjZSBmcm9tICcuLi8uLi9kYXRhc291cmNlJztcbmltcG9ydCBUaW1lZ3JhaW5Db252ZXJ0ZXIgZnJvbSAnLi4vLi4vdGltZV9ncmFpbl9jb252ZXJ0ZXInO1xuaW1wb3J0IHsgQXp1cmVNb25pdG9yRXJyb3Jpc2gsIEF6dXJlTW9uaXRvck9wdGlvbiwgQXp1cmVNb25pdG9yUXVlcnkgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyB0b09wdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbW1vbic7XG5pbXBvcnQgeyB1c2VBc3luY1N0YXRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlQXN5bmNTdGF0ZSc7XG5cbmltcG9ydCB7IHNldE1ldHJpY05hbWVzcGFjZSB9IGZyb20gJy4vc2V0UXVlcnlWYWx1ZSc7XG5cbnR5cGUgU2V0RXJyb3JGbiA9IChzb3VyY2U6IHN0cmluZywgZXJyb3I6IEF6dXJlTW9uaXRvckVycm9yaXNoIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBEYXRhSG9vayA9IChcbiAgcXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5LFxuICBkYXRhc291cmNlOiBEYXRhc291cmNlLFxuICBvbkNoYW5nZTogT25DaGFuZ2VGbixcbiAgc2V0RXJyb3I6IFNldEVycm9yRm5cbikgPT4gQXp1cmVNb25pdG9yT3B0aW9uW107XG5cbmV4cG9ydCB0eXBlIE1ldHJpY3NNZXRhZGF0YUhvb2sgPSAoXG4gIHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSxcbiAgZGF0YXNvdXJjZTogRGF0YXNvdXJjZSxcbiAgb25DaGFuZ2U6IE9uQ2hhbmdlRm5cbikgPT4gTWV0cmljTWV0YWRhdGE7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0cmljTWV0YWRhdGEge1xuICBhZ2dPcHRpb25zOiBBenVyZU1vbml0b3JPcHRpb25bXTtcbiAgdGltZUdyYWluczogQXp1cmVNb25pdG9yT3B0aW9uW107XG4gIGRpbWVuc2lvbnM6IEF6dXJlTW9uaXRvck9wdGlvbltdO1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG5cbiAgLy8gVGhlc2UgdHdvIHByb3BlcnRpZXMgYXJlIG9ubHkgdXNlZCB3aXRoaW4gdGhlIGhvb2ssIGFuZCBub3QgZWxzZXdoZXJlXG4gIHN1cHBvcnRlZEFnZ1R5cGVzOiBzdHJpbmdbXTtcbiAgcHJpbWFyeUFnZ1R5cGU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxudHlwZSBPbkNoYW5nZUZuID0gKG5ld1F1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSkgPT4gdm9pZDtcblxuZXhwb3J0IGNvbnN0IHVzZU1ldHJpY05hbWVzcGFjZXM6IERhdGFIb29rID0gKHF1ZXJ5LCBkYXRhc291cmNlLCBvbkNoYW5nZSwgc2V0RXJyb3IpID0+IHtcbiAgY29uc3QgeyBtZXRyaWNOYW1lc3BhY2UsIHJlc291cmNlVXJpIH0gPSBxdWVyeS5henVyZU1vbml0b3IgPz8ge307XG5cbiAgY29uc3QgbWV0cmljTmFtZXNwYWNlcyA9IHVzZUFzeW5jU3RhdGUoXG4gICAgYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCFyZXNvdXJjZVVyaSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBkYXRhc291cmNlLmF6dXJlTW9uaXRvckRhdGFzb3VyY2UuZ2V0TWV0cmljTmFtZXNwYWNlcyh7IHJlc291cmNlVXJpIH0pO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IGZvcm1hdE9wdGlvbnMocmVzdWx0cywgbWV0cmljTmFtZXNwYWNlKTtcblxuICAgICAgLy8gRG8gc29tZSBjbGVhbnVwIG9mIHRoZSBxdWVyeSBzdGF0ZSBpZiBuZWVkIGJlXG4gICAgICBpZiAoIW1ldHJpY05hbWVzcGFjZSAmJiBvcHRpb25zLmxlbmd0aCkge1xuICAgICAgICBvbkNoYW5nZShzZXRNZXRyaWNOYW1lc3BhY2UocXVlcnksIG9wdGlvbnNbMF0udmFsdWUpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfSxcbiAgICBzZXRFcnJvcixcbiAgICBbcmVzb3VyY2VVcmldXG4gICk7XG5cbiAgcmV0dXJuIG1ldHJpY05hbWVzcGFjZXM7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlTWV0cmljTmFtZXM6IERhdGFIb29rID0gKHF1ZXJ5LCBkYXRhc291cmNlLCBvbkNoYW5nZSwgc2V0RXJyb3IpID0+IHtcbiAgY29uc3QgeyBtZXRyaWNOYW1lc3BhY2UsIG1ldHJpY05hbWUsIHJlc291cmNlVXJpIH0gPSBxdWVyeS5henVyZU1vbml0b3IgPz8ge307XG5cbiAgcmV0dXJuIHVzZUFzeW5jU3RhdGUoXG4gICAgYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKCEobWV0cmljTmFtZXNwYWNlICYmIHJlc291cmNlVXJpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBkYXRhc291cmNlLmF6dXJlTW9uaXRvckRhdGFzb3VyY2UuZ2V0TWV0cmljTmFtZXMoeyByZXNvdXJjZVVyaSwgbWV0cmljTmFtZXNwYWNlIH0pO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IGZvcm1hdE9wdGlvbnMocmVzdWx0cywgbWV0cmljTmFtZSk7XG5cbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH0sXG4gICAgc2V0RXJyb3IsXG4gICAgW3Jlc291cmNlVXJpLCBtZXRyaWNOYW1lc3BhY2VdXG4gICk7XG59O1xuXG5jb25zdCBkZWZhdWx0TWV0cmljTWV0YWRhdGE6IE1ldHJpY01ldGFkYXRhID0ge1xuICBhZ2dPcHRpb25zOiBbXSxcbiAgdGltZUdyYWluczogW10sXG4gIGRpbWVuc2lvbnM6IFtdLFxuICBpc0xvYWRpbmc6IGZhbHNlLFxuICBzdXBwb3J0ZWRBZ2dUeXBlczogW10sXG4gIHByaW1hcnlBZ2dUeXBlOiB1bmRlZmluZWQsXG59O1xuXG5leHBvcnQgY29uc3QgdXNlTWV0cmljTWV0YWRhdGEgPSAocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5LCBkYXRhc291cmNlOiBEYXRhc291cmNlLCBvbkNoYW5nZTogT25DaGFuZ2VGbikgPT4ge1xuICBjb25zdCBbbWV0cmljTWV0YWRhdGEsIHNldE1ldHJpY01ldGFkYXRhXSA9IHVzZVN0YXRlPE1ldHJpY01ldGFkYXRhPihkZWZhdWx0TWV0cmljTWV0YWRhdGEpO1xuXG4gIGNvbnN0IHsgcmVzb3VyY2VVcmksIG1ldHJpY05hbWVzcGFjZSwgbWV0cmljTmFtZSwgYWdncmVnYXRpb24sIHRpbWVHcmFpbiB9ID0gcXVlcnkuYXp1cmVNb25pdG9yID8/IHt9O1xuXG4gIC8vIEZldGNoIG5ldyBtZXRyaWMgbWV0YWRhdGEgd2hlbiB0aGUgZmllbGRzIGNoYW5nZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghKHJlc291cmNlVXJpICYmIG1ldHJpY05hbWVzcGFjZSAmJiBtZXRyaWNOYW1lKSkge1xuICAgICAgc2V0TWV0cmljTWV0YWRhdGEoZGVmYXVsdE1ldHJpY01ldGFkYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkYXRhc291cmNlLmF6dXJlTW9uaXRvckRhdGFzb3VyY2VcbiAgICAgIC5nZXRNZXRyaWNNZXRhZGF0YSh7IHJlc291cmNlVXJpLCBtZXRyaWNOYW1lc3BhY2UsIG1ldHJpY05hbWUgfSlcbiAgICAgIC50aGVuKChtZXRhZGF0YSkgPT4ge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoZSBhZ2dyZWdhdGlvblR5cGVzIGFuZCB0aW1lR3JhaW4gZGVmYXVsdHMgaW50byBgZ2V0TWV0cmljTWV0YWRhdGFgXG4gICAgICAgIGNvbnN0IGFnZ3JlZ2F0aW9ucyA9IChtZXRhZGF0YS5zdXBwb3J0ZWRBZ2dUeXBlcyB8fCBbbWV0YWRhdGEucHJpbWFyeUFnZ1R5cGVdKS5tYXAoKHYpID0+ICh7XG4gICAgICAgICAgbGFiZWw6IHYsXG4gICAgICAgICAgdmFsdWU6IHYsXG4gICAgICAgIH0pKTtcblxuICAgICAgICBzZXRNZXRyaWNNZXRhZGF0YSh7XG4gICAgICAgICAgYWdnT3B0aW9uczogYWdncmVnYXRpb25zLFxuICAgICAgICAgIHRpbWVHcmFpbnM6IG1ldGFkYXRhLnN1cHBvcnRlZFRpbWVHcmFpbnMsXG4gICAgICAgICAgZGltZW5zaW9uczogbWV0YWRhdGEuZGltZW5zaW9ucyxcbiAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIHN1cHBvcnRlZEFnZ1R5cGVzOiBtZXRhZGF0YS5zdXBwb3J0ZWRBZ2dUeXBlcyA/PyBbXSxcbiAgICAgICAgICBwcmltYXJ5QWdnVHlwZTogbWV0YWRhdGEucHJpbWFyeUFnZ1R5cGUsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH0sIFtkYXRhc291cmNlLCByZXNvdXJjZVVyaSwgbWV0cmljTmFtZXNwYWNlLCBtZXRyaWNOYW1lXSk7XG5cbiAgLy8gVXBkYXRlIHRoZSBxdWVyeSBzdGF0ZSBpbiByZXNwb25zZSB0byB0aGUgbWV0YSBkYXRhIGNoYW5naW5nXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbmV3QWdncmVnYXRpb24gPSBhZ2dyZWdhdGlvbiB8fCBtZXRyaWNNZXRhZGF0YS5wcmltYXJ5QWdnVHlwZTtcbiAgICBjb25zdCBuZXdUaW1lR3JhaW4gPSB0aW1lR3JhaW4gfHwgJ2F1dG8nO1xuXG4gICAgaWYgKG5ld0FnZ3JlZ2F0aW9uICE9PSBhZ2dyZWdhdGlvbiB8fCBuZXdUaW1lR3JhaW4gIT09IHRpbWVHcmFpbikge1xuICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICAuLi5xdWVyeSxcbiAgICAgICAgYXp1cmVNb25pdG9yOiB7XG4gICAgICAgICAgLi4ucXVlcnkuYXp1cmVNb25pdG9yLFxuICAgICAgICAgIGFnZ3JlZ2F0aW9uOiBuZXdBZ2dyZWdhdGlvbixcbiAgICAgICAgICB0aW1lR3JhaW46IG5ld1RpbWVHcmFpbixcbiAgICAgICAgICBhbGxvd2VkVGltZUdyYWluc01zOiBtZXRyaWNNZXRhZGF0YS50aW1lR3JhaW5zXG4gICAgICAgICAgICAuZmlsdGVyKCh0aW1lR3JhaW4pID0+IHRpbWVHcmFpbi52YWx1ZSAhPT0gJ2F1dG8nKVxuICAgICAgICAgICAgLm1hcCgodGltZUdyYWluKSA9PlxuICAgICAgICAgICAgICByYW5nZVV0aWwuaW50ZXJ2YWxUb01zKFRpbWVncmFpbkNvbnZlcnRlci5jcmVhdGVLYm5Vbml0RnJvbUlTTzg2MDFEdXJhdGlvbih0aW1lR3JhaW4udmFsdWUpKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW29uQ2hhbmdlLCBtZXRyaWNNZXRhZGF0YSwgYWdncmVnYXRpb24sIHRpbWVHcmFpbiwgcXVlcnldKTtcblxuICByZXR1cm4gbWV0cmljTWV0YWRhdGE7XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRPcHRpb25zKFxuICByYXdSZXN1bHRzOiBBcnJheTx7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gIH0+LFxuICBzZWxlY3RlZFZhbHVlPzogc3RyaW5nXG4pIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHJhd1Jlc3VsdHMubWFwKHRvT3B0aW9uKTtcblxuICAvLyBhY2NvdW50IGZvciBjdXN0b20gdmFsdWVzIHRoYXQgbWlnaHQgaGF2ZSBiZWVuIHNldCBpbiBqc29uIGZpbGUgbGlrZSBvbmVzIGNyYWZ0ZWQgd2l0aCBhIHRlbXBsYXRlIHZhcmlhYmxlIChleDogXCJjbG91ZC1kYXRhc291cmNlLXJlc291cmNlLSRFbnZpcm9ubWVudFwiKVxuICBpZiAoc2VsZWN0ZWRWYWx1ZSAmJiAhb3B0aW9ucy5maW5kKChvcHRpb24pID0+IG9wdGlvbi52YWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIG9wdGlvbnMucHVzaCh7IGxhYmVsOiBzZWxlY3RlZFZhbHVlLCB2YWx1ZTogc2VsZWN0ZWRWYWx1ZSB9KTtcbiAgfVxuXG4gIHJldHVybiBvcHRpb25zO1xufVxuIiwiaW1wb3J0IHsgQXp1cmVNZXRyaWNEaW1lbnNpb24sIEF6dXJlTW9uaXRvclF1ZXJ5IH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0UmVzb3VyY2UocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5LCByZXNvdXJjZVVSSTogc3RyaW5nIHwgdW5kZWZpbmVkKTogQXp1cmVNb25pdG9yUXVlcnkge1xuICByZXR1cm4ge1xuICAgIC4uLnF1ZXJ5LFxuICAgIGF6dXJlTW9uaXRvcjoge1xuICAgICAgLi4ucXVlcnkuYXp1cmVNb25pdG9yLFxuICAgICAgcmVzb3VyY2VVcmk6IHJlc291cmNlVVJJLFxuICAgICAgbWV0cmljTmFtZXNwYWNlOiB1bmRlZmluZWQsXG4gICAgICBtZXRyaWNOYW1lOiB1bmRlZmluZWQsXG4gICAgICBhZ2dyZWdhdGlvbjogdW5kZWZpbmVkLFxuICAgICAgbWV0cmljRGVmaW5pdGlvbjogdW5kZWZpbmVkLFxuICAgICAgdGltZUdyYWluOiAnJyxcbiAgICAgIGRpbWVuc2lvbkZpbHRlcnM6IFtdLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRNZXRyaWNOYW1lc3BhY2UocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5LCBtZXRyaWNOYW1lc3BhY2U6IHN0cmluZyB8IHVuZGVmaW5lZCk6IEF6dXJlTW9uaXRvclF1ZXJ5IHtcbiAgaWYgKHF1ZXJ5LmF6dXJlTW9uaXRvcj8ubWV0cmljTmFtZXNwYWNlID09PSBtZXRyaWNOYW1lc3BhY2UpIHtcbiAgICByZXR1cm4gcXVlcnk7XG4gIH1cblxuICBsZXQgcmVzb3VyY2VVcmkgPSBxdWVyeS5henVyZU1vbml0b3I/LnJlc291cmNlVXJpO1xuXG4gIC8vIFN0b3JhZ2UgQWNjb3VudCBVUklzIG5lZWQgdG8gYmUgaGFuZGxlZCBkaWZmZXJlbnRseSBkdWUgdG8gdGhlIGFkZGl0aW9uYWwgc3RvcmFnZSBzZXJ2aWNlcyAoYmxvYi9xdWV1ZS90YWJsZS9maWxlKS5cbiAgLy8gV2hlbiBvbmUgb2YgdGhlc2UgbmFtZXNwYWNlcyBpcyBzZWxlY3RlZCBpdCBkb2VzIG5vdCBmb3JtIGEgcGFydCBvZiB0aGUgVVJJIGZvciB0aGUgc3RvcmFnZSBhY2NvdW50IGFuZCBzbyBtdXN0IGJlIGFwcGVuZGVkLlxuICAvLyBUaGUgJ2RlZmF1bHQnIHBhdGggbXVzdCBhbHNvIGJlIGFwcGVuZGVkLiBXaXRob3V0IHRoZXNlIHR3byBwYXRocyBhbnkgQVBJIGNhbGwgd2lsbCBmYWlsLlxuICBpZiAocmVzb3VyY2VVcmkgJiYgbWV0cmljTmFtZXNwYWNlPy5pbmNsdWRlcygnTWljcm9zb2Z0LlN0b3JhZ2Uvc3RvcmFnZUFjY291bnRzJykpIHtcbiAgICBjb25zdCBzcGxpdFVyaSA9IHJlc291cmNlVXJpLnNwbGl0KCcvJyk7XG4gICAgY29uc3QgYWNjb3VudE5hbWVJbmRleCA9IHNwbGl0VXJpLmZpbmRJbmRleCgoaXRlbSkgPT4gaXRlbSA9PT0gJ3N0b3JhZ2VBY2NvdW50cycpICsgMTtcbiAgICBjb25zdCBiYXNlVXJpID0gc3BsaXRVcmkuc2xpY2UoMCwgYWNjb3VudE5hbWVJbmRleCArIDEpLmpvaW4oJy8nKTtcbiAgICBpZiAobWV0cmljTmFtZXNwYWNlID09PSAnTWljcm9zb2Z0LlN0b3JhZ2Uvc3RvcmFnZUFjY291bnRzJykge1xuICAgICAgcmVzb3VyY2VVcmkgPSBiYXNlVXJpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzdWJOYW1lc3BhY2UgPSBtZXRyaWNOYW1lc3BhY2Uuc3BsaXQoJy8nKVsyXTtcbiAgICAgIHJlc291cmNlVXJpID0gYCR7YmFzZVVyaX0vJHtzdWJOYW1lc3BhY2V9L2RlZmF1bHRgO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4ucXVlcnksXG4gICAgYXp1cmVNb25pdG9yOiB7XG4gICAgICAuLi5xdWVyeS5henVyZU1vbml0b3IsXG4gICAgICBtZXRyaWNOYW1lc3BhY2U6IG1ldHJpY05hbWVzcGFjZSxcbiAgICAgIG1ldHJpY05hbWU6IHVuZGVmaW5lZCxcbiAgICAgIGFnZ3JlZ2F0aW9uOiB1bmRlZmluZWQsXG4gICAgICB0aW1lR3JhaW46ICcnLFxuICAgICAgZGltZW5zaW9uRmlsdGVyczogW10sXG4gICAgICByZXNvdXJjZVVyaSxcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0TWV0cmljTmFtZShxdWVyeTogQXp1cmVNb25pdG9yUXVlcnksIG1ldHJpY05hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCk6IEF6dXJlTW9uaXRvclF1ZXJ5IHtcbiAgaWYgKHF1ZXJ5LmF6dXJlTW9uaXRvcj8ubWV0cmljTmFtZSA9PT0gbWV0cmljTmFtZSkge1xuICAgIHJldHVybiBxdWVyeTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4ucXVlcnksXG4gICAgYXp1cmVNb25pdG9yOiB7XG4gICAgICAuLi5xdWVyeS5henVyZU1vbml0b3IsXG4gICAgICBtZXRyaWNOYW1lOiBtZXRyaWNOYW1lLFxuICAgICAgYWdncmVnYXRpb246IHVuZGVmaW5lZCxcbiAgICAgIHRpbWVHcmFpbjogJycsXG4gICAgICBkaW1lbnNpb25GaWx0ZXJzOiBbXSxcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0QWdncmVnYXRpb24ocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5LCBhZ2dyZWdhdGlvbjogc3RyaW5nKTogQXp1cmVNb25pdG9yUXVlcnkge1xuICBpZiAocXVlcnkuYXp1cmVNb25pdG9yPy5hZ2dyZWdhdGlvbiA9PT0gYWdncmVnYXRpb24pIHtcbiAgICByZXR1cm4gcXVlcnk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLnF1ZXJ5LFxuICAgIGF6dXJlTW9uaXRvcjoge1xuICAgICAgLi4ucXVlcnkuYXp1cmVNb25pdG9yLFxuICAgICAgYWdncmVnYXRpb246IGFnZ3JlZ2F0aW9uLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUaW1lR3JhaW4ocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5LCB0aW1lR3JhaW46IHN0cmluZyk6IEF6dXJlTW9uaXRvclF1ZXJ5IHtcbiAgaWYgKHF1ZXJ5LmF6dXJlTW9uaXRvcj8udGltZUdyYWluID09PSB0aW1lR3JhaW4pIHtcbiAgICByZXR1cm4gcXVlcnk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLnF1ZXJ5LFxuICAgIGF6dXJlTW9uaXRvcjoge1xuICAgICAgLi4ucXVlcnkuYXp1cmVNb25pdG9yLFxuICAgICAgdGltZUdyYWluOiB0aW1lR3JhaW4sXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldERpbWVuc2lvbkZpbHRlcnMocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5LCBkaW1lbnNpb25zOiBBenVyZU1ldHJpY0RpbWVuc2lvbltdKTogQXp1cmVNb25pdG9yUXVlcnkge1xuICBpZiAocXVlcnkuYXp1cmVNb25pdG9yPy5kaW1lbnNpb25GaWx0ZXJzID09PSBkaW1lbnNpb25zKSB7XG4gICAgcmV0dXJuIHF1ZXJ5O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5xdWVyeSxcbiAgICBhenVyZU1vbml0b3I6IHtcbiAgICAgIC4uLnF1ZXJ5LmF6dXJlTW9uaXRvcixcbiAgICAgIGRpbWVuc2lvbkZpbHRlcnM6IGRpbWVuc2lvbnMsXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZERpbWVuc2lvbkZpbHRlcihcbiAgcXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5LFxuICBkaW1lbnNpb24gPSAnJyxcbiAgb3BlcmF0b3IgPSAnZXEnLFxuICBmaWx0ZXJzOiBzdHJpbmdbXSA9IFtdXG4pOiBBenVyZU1vbml0b3JRdWVyeSB7XG4gIGNvbnN0IGV4aXN0aW5nRmlsdGVycyA9IHF1ZXJ5LmF6dXJlTW9uaXRvcj8uZGltZW5zaW9uRmlsdGVycyA/PyBbXTtcblxuICByZXR1cm4gc2V0RGltZW5zaW9uRmlsdGVycyhxdWVyeSwgW1xuICAgIC4uLmV4aXN0aW5nRmlsdGVycyxcbiAgICB7XG4gICAgICBkaW1lbnNpb24sXG4gICAgICBvcGVyYXRvcixcbiAgICAgIGZpbHRlcnMsXG4gICAgfSxcbiAgXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVEaW1lbnNpb25GaWx0ZXIocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5LCBpbmRleFRvUmVtb3ZlOiBudW1iZXIpOiBBenVyZU1vbml0b3JRdWVyeSB7XG4gIGNvbnN0IGV4aXN0aW5nRmlsdGVycyA9IHF1ZXJ5LmF6dXJlTW9uaXRvcj8uZGltZW5zaW9uRmlsdGVycyA/PyBbXTtcbiAgY29uc3QgbmV3RmlsdGVycyA9IFsuLi5leGlzdGluZ0ZpbHRlcnNdO1xuICBuZXdGaWx0ZXJzLnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKTtcbiAgcmV0dXJuIHNldERpbWVuc2lvbkZpbHRlcnMocXVlcnksIG5ld0ZpbHRlcnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RGltZW5zaW9uRmlsdGVyVmFsdWU8S2V5IGV4dGVuZHMga2V5b2YgQXp1cmVNZXRyaWNEaW1lbnNpb24+KFxuICBxdWVyeTogQXp1cmVNb25pdG9yUXVlcnksXG4gIGluZGV4OiBudW1iZXIsXG4gIGZpZWxkTmFtZTogS2V5LFxuICB2YWx1ZTogQXp1cmVNZXRyaWNEaW1lbnNpb25bS2V5XVxuKTogQXp1cmVNb25pdG9yUXVlcnkge1xuICBjb25zdCBleGlzdGluZ0ZpbHRlcnMgPSBxdWVyeS5henVyZU1vbml0b3I/LmRpbWVuc2lvbkZpbHRlcnMgPz8gW107XG4gIGNvbnN0IG5ld0ZpbHRlcnMgPSBbLi4uZXhpc3RpbmdGaWx0ZXJzXTtcbiAgY29uc3QgbmV3RmlsdGVyID0gbmV3RmlsdGVyc1tpbmRleF07XG4gIG5ld0ZpbHRlcltmaWVsZE5hbWVdID0gdmFsdWU7XG4gIGlmIChmaWVsZE5hbWUgPT09ICdkaW1lbnNpb24nIHx8IGZpZWxkTmFtZSA9PT0gJ29wZXJhdG9yJykge1xuICAgIG5ld0ZpbHRlci5maWx0ZXJzID0gW107XG4gIH1cbiAgcmV0dXJuIHNldERpbWVuc2lvbkZpbHRlcnMocXVlcnksIG5ld0ZpbHRlcnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0VG9wKHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSwgdG9wOiBzdHJpbmcpOiBBenVyZU1vbml0b3JRdWVyeSB7XG4gIGlmIChxdWVyeS5henVyZU1vbml0b3I/LnRvcCA9PT0gdG9wKSB7XG4gICAgcmV0dXJuIHF1ZXJ5O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5xdWVyeSxcbiAgICBhenVyZU1vbml0b3I6IHtcbiAgICAgIC4uLnF1ZXJ5LmF6dXJlTW9uaXRvcixcbiAgICAgIHRvcDogdG9wLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRMZWdlbmRBbGlhcyhxdWVyeTogQXp1cmVNb25pdG9yUXVlcnksIGFsaWFzOiBzdHJpbmcpOiBBenVyZU1vbml0b3JRdWVyeSB7XG4gIGlmIChxdWVyeS5henVyZU1vbml0b3I/LmFsaWFzID09PSBhbGlhcykge1xuICAgIHJldHVybiBxdWVyeTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLi4ucXVlcnksXG4gICAgYXp1cmVNb25pdG9yOiB7XG4gICAgICAuLi5xdWVyeS5henVyZU1vbml0b3IsXG4gICAgICBhbGlhczogYWxpYXMsXG4gICAgfSxcbiAgfTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBGdW5jdGlvbkNvbXBvbmVudCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgU2VsZWN0YWJsZVZhbHVlIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdAZ3JhZmFuYS9ydW50aW1lJztcblxuaW1wb3J0IHsgZ2V0Q3JlZGVudGlhbHMsIHVwZGF0ZUNyZWRlbnRpYWxzIH0gZnJvbSAnLi4vY3JlZGVudGlhbHMnO1xuaW1wb3J0IHsgQXp1cmVEYXRhU291cmNlU2V0dGluZ3MsIEF6dXJlQ3JlZGVudGlhbHMgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7IEF6dXJlQ3JlZGVudGlhbHNGb3JtIH0gZnJvbSAnLi9BenVyZUNyZWRlbnRpYWxzRm9ybSc7XG5cbmNvbnN0IGF6dXJlQ2xvdWRzID0gW1xuICB7IHZhbHVlOiAnYXp1cmVtb25pdG9yJywgbGFiZWw6ICdBenVyZScgfSxcbiAgeyB2YWx1ZTogJ2dvdmF6dXJlbW9uaXRvcicsIGxhYmVsOiAnQXp1cmUgVVMgR292ZXJubWVudCcgfSxcbiAgeyB2YWx1ZTogJ2dlcm1hbnlhenVyZW1vbml0b3InLCBsYWJlbDogJ0F6dXJlIEdlcm1hbnknIH0sXG4gIHsgdmFsdWU6ICdjaGluYWF6dXJlbW9uaXRvcicsIGxhYmVsOiAnQXp1cmUgQ2hpbmEnIH0sXG5dIGFzIFNlbGVjdGFibGVWYWx1ZVtdO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgb3B0aW9uczogQXp1cmVEYXRhU291cmNlU2V0dGluZ3M7XG4gIHVwZGF0ZU9wdGlvbnM6IChvcHRpb25zRnVuYzogKG9wdGlvbnM6IEF6dXJlRGF0YVNvdXJjZVNldHRpbmdzKSA9PiBBenVyZURhdGFTb3VyY2VTZXR0aW5ncykgPT4gdm9pZDtcbiAgZ2V0U3Vic2NyaXB0aW9uczogKCkgPT4gUHJvbWlzZTxBcnJheTxTZWxlY3RhYmxlVmFsdWU8c3RyaW5nPj4+O1xufVxuXG5leHBvcnQgY29uc3QgTW9uaXRvckNvbmZpZzogRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHVwZGF0ZU9wdGlvbnMsIGdldFN1YnNjcmlwdGlvbnMgfSA9IHByb3BzO1xuICBjb25zdCBjcmVkZW50aWFscyA9IHVzZU1lbW8oKCkgPT4gZ2V0Q3JlZGVudGlhbHMocHJvcHMub3B0aW9ucyksIFtwcm9wcy5vcHRpb25zXSk7XG5cbiAgY29uc3Qgb25DcmVkZW50aWFsc0NoYW5nZSA9IChjcmVkZW50aWFsczogQXp1cmVDcmVkZW50aWFscyk6IHZvaWQgPT4ge1xuICAgIHVwZGF0ZU9wdGlvbnMoKG9wdGlvbnMpID0+IHVwZGF0ZUNyZWRlbnRpYWxzKG9wdGlvbnMsIGNyZWRlbnRpYWxzKSk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGgzIGNsYXNzTmFtZT1cInBhZ2UtaGVhZGluZ1wiPkF1dGhlbnRpY2F0aW9uPC9oMz5cbiAgICAgIDxBenVyZUNyZWRlbnRpYWxzRm9ybVxuICAgICAgICBtYW5hZ2VkSWRlbnRpdHlFbmFibGVkPXtjb25maWcuYXp1cmUubWFuYWdlZElkZW50aXR5RW5hYmxlZH1cbiAgICAgICAgY3JlZGVudGlhbHM9e2NyZWRlbnRpYWxzfVxuICAgICAgICBhenVyZUNsb3VkT3B0aW9ucz17YXp1cmVDbG91ZHN9XG4gICAgICAgIG9uQ3JlZGVudGlhbHNDaGFuZ2U9e29uQ3JlZGVudGlhbHNDaGFuZ2V9XG4gICAgICAgIGdldFN1YnNjcmlwdGlvbnM9e2dldFN1YnNjcmlwdGlvbnN9XG4gICAgICAgIGRpc2FibGVkPXtwcm9wcy5vcHRpb25zLnJlYWRPbmx5fVxuICAgICAgLz5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1vbml0b3JDb25maWc7XG4iLCJpbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFF1ZXJ5RWRpdG9yUHJvcHMgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJ0BncmFmYW5hL3J1bnRpbWUnO1xuaW1wb3J0IHsgQWxlcnQsIENvZGVFZGl0b3IgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmltcG9ydCBBenVyZU1vbml0b3JEYXRhc291cmNlIGZyb20gJy4uLy4uL2RhdGFzb3VyY2UnO1xuaW1wb3J0IHtcbiAgQXp1cmVEYXRhU291cmNlSnNvbkRhdGEsXG4gIEF6dXJlTW9uaXRvckVycm9yaXNoLFxuICBBenVyZU1vbml0b3JPcHRpb24sXG4gIEF6dXJlTW9uaXRvclF1ZXJ5LFxuICBBenVyZVF1ZXJ5VHlwZSxcbn0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHVzZUxhc3RFcnJvciBmcm9tICcuLi8uLi91dGlscy91c2VMYXN0RXJyb3InO1xuaW1wb3J0IEFyZ1F1ZXJ5RWRpdG9yIGZyb20gJy4uL0FyZ1F1ZXJ5RWRpdG9yJztcbmltcG9ydCBMb2dzUXVlcnlFZGl0b3IgZnJvbSAnLi4vTG9nc1F1ZXJ5RWRpdG9yJztcbmltcG9ydCBOZXdNZXRyaWNzUXVlcnlFZGl0b3IgZnJvbSAnLi4vTWV0cmljc1F1ZXJ5RWRpdG9yL01ldHJpY3NRdWVyeUVkaXRvcic7XG5pbXBvcnQgeyBRdWVyeUhlYWRlciB9IGZyb20gJy4uL1F1ZXJ5SGVhZGVyJztcbmltcG9ydCB7IFNwYWNlIH0gZnJvbSAnLi4vU3BhY2UnO1xuXG5pbXBvcnQgUXVlcnlUeXBlRmllbGQgZnJvbSAnLi9RdWVyeVR5cGVGaWVsZCc7XG5pbXBvcnQgdXNlUHJlcGFyZWRRdWVyeSBmcm9tICcuL3VzZVByZXBhcmVkUXVlcnknO1xuXG5leHBvcnQgdHlwZSBBenVyZU1vbml0b3JRdWVyeUVkaXRvclByb3BzID0gUXVlcnlFZGl0b3JQcm9wczxcbiAgQXp1cmVNb25pdG9yRGF0YXNvdXJjZSxcbiAgQXp1cmVNb25pdG9yUXVlcnksXG4gIEF6dXJlRGF0YVNvdXJjZUpzb25EYXRhXG4+O1xuXG5jb25zdCBRdWVyeUVkaXRvcjogUmVhY3QuRkM8QXp1cmVNb25pdG9yUXVlcnlFZGl0b3JQcm9wcz4gPSAoe1xuICBxdWVyeTogYmFzZVF1ZXJ5LFxuICBkYXRhc291cmNlLFxuICBvbkNoYW5nZSxcbiAgb25SdW5RdWVyeTogYmFzZU9uUnVuUXVlcnksXG4gIGRhdGEsXG59KSA9PiB7XG4gIGNvbnN0IFtlcnJvck1lc3NhZ2UsIHNldEVycm9yXSA9IHVzZUxhc3RFcnJvcigpO1xuICBjb25zdCBvblJ1blF1ZXJ5ID0gdXNlTWVtbygoKSA9PiBkZWJvdW5jZShiYXNlT25SdW5RdWVyeSwgNTAwKSwgW2Jhc2VPblJ1blF1ZXJ5XSk7XG5cbiAgY29uc3Qgb25RdWVyeUNoYW5nZSA9IHVzZUNhbGxiYWNrKFxuICAgIChuZXdRdWVyeTogQXp1cmVNb25pdG9yUXVlcnkpID0+IHtcbiAgICAgIG9uQ2hhbmdlKG5ld1F1ZXJ5KTtcbiAgICAgIG9uUnVuUXVlcnkoKTtcbiAgICB9LFxuICAgIFtvbkNoYW5nZSwgb25SdW5RdWVyeV1cbiAgKTtcblxuICBjb25zdCBxdWVyeSA9IHVzZVByZXBhcmVkUXVlcnkoYmFzZVF1ZXJ5LCBvblF1ZXJ5Q2hhbmdlKTtcblxuICBjb25zdCBzdWJzY3JpcHRpb25JZCA9IHF1ZXJ5LnN1YnNjcmlwdGlvbiB8fCBkYXRhc291cmNlLmF6dXJlTW9uaXRvckRhdGFzb3VyY2UuZGVmYXVsdFN1YnNjcmlwdGlvbklkO1xuICBjb25zdCB2YXJpYWJsZU9wdGlvbkdyb3VwID0ge1xuICAgIGxhYmVsOiAnVGVtcGxhdGUgVmFyaWFibGVzJyxcbiAgICBvcHRpb25zOiBkYXRhc291cmNlLmdldFZhcmlhYmxlcygpLm1hcCgodikgPT4gKHsgbGFiZWw6IHYsIHZhbHVlOiB2IH0pKSxcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJhenVyZS1tb25pdG9yLXF1ZXJ5LWVkaXRvclwiPlxuICAgICAge2NvbmZpZy5mZWF0dXJlVG9nZ2xlcy5henVyZU1vbml0b3JFeHBlcmltZW50YWxVSSAmJiA8UXVlcnlIZWFkZXIgcXVlcnk9e3F1ZXJ5fSBvblF1ZXJ5Q2hhbmdlPXtvblF1ZXJ5Q2hhbmdlfSAvPn1cbiAgICAgIHshY29uZmlnLmZlYXR1cmVUb2dnbGVzLmF6dXJlTW9uaXRvckV4cGVyaW1lbnRhbFVJICYmIChcbiAgICAgICAgPFF1ZXJ5VHlwZUZpZWxkIHF1ZXJ5PXtxdWVyeX0gb25RdWVyeUNoYW5nZT17b25RdWVyeUNoYW5nZX0gLz5cbiAgICAgICl9XG5cbiAgICAgIDxFZGl0b3JGb3JRdWVyeVR5cGVcbiAgICAgICAgZGF0YT17ZGF0YX1cbiAgICAgICAgc3Vic2NyaXB0aW9uSWQ9e3N1YnNjcmlwdGlvbklkfVxuICAgICAgICBxdWVyeT17cXVlcnl9XG4gICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgIG9uQ2hhbmdlPXtvblF1ZXJ5Q2hhbmdlfVxuICAgICAgICB2YXJpYWJsZU9wdGlvbkdyb3VwPXt2YXJpYWJsZU9wdGlvbkdyb3VwfVxuICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAvPlxuXG4gICAgICB7ZXJyb3JNZXNzYWdlICYmIChcbiAgICAgICAgPD5cbiAgICAgICAgICA8U3BhY2Ugdj17Mn0gLz5cbiAgICAgICAgICA8QWxlcnQgc2V2ZXJpdHk9XCJlcnJvclwiIHRpdGxlPVwiQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgcmVxdWVzdGluZyBtZXRhZGF0YSBmcm9tIEF6dXJlIE1vbml0b3JcIj5cbiAgICAgICAgICAgIHtlcnJvck1lc3NhZ2V9XG4gICAgICAgICAgPC9BbGVydD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuaW50ZXJmYWNlIEVkaXRvckZvclF1ZXJ5VHlwZVByb3BzIGV4dGVuZHMgT21pdDxBenVyZU1vbml0b3JRdWVyeUVkaXRvclByb3BzLCAnb25SdW5RdWVyeSc+IHtcbiAgc3Vic2NyaXB0aW9uSWQ/OiBzdHJpbmc7XG4gIHZhcmlhYmxlT3B0aW9uR3JvdXA6IHsgbGFiZWw6IHN0cmluZzsgb3B0aW9uczogQXp1cmVNb25pdG9yT3B0aW9uW10gfTtcbiAgc2V0RXJyb3I6IChzb3VyY2U6IHN0cmluZywgZXJyb3I6IEF6dXJlTW9uaXRvckVycm9yaXNoIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xufVxuXG5jb25zdCBFZGl0b3JGb3JRdWVyeVR5cGU6IFJlYWN0LkZDPEVkaXRvckZvclF1ZXJ5VHlwZVByb3BzPiA9ICh7XG4gIGRhdGEsXG4gIHN1YnNjcmlwdGlvbklkLFxuICBxdWVyeSxcbiAgZGF0YXNvdXJjZSxcbiAgdmFyaWFibGVPcHRpb25Hcm91cCxcbiAgb25DaGFuZ2UsXG4gIHNldEVycm9yLFxufSkgPT4ge1xuICBzd2l0Y2ggKHF1ZXJ5LnF1ZXJ5VHlwZSkge1xuICAgIGNhc2UgQXp1cmVRdWVyeVR5cGUuQXp1cmVNb25pdG9yOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPE5ld01ldHJpY3NRdWVyeUVkaXRvclxuICAgICAgICAgIGRhdGE9e2RhdGF9XG4gICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgc2V0RXJyb3I9e3NldEVycm9yfVxuICAgICAgICAvPlxuICAgICAgKTtcblxuICAgIGNhc2UgQXp1cmVRdWVyeVR5cGUuTG9nQW5hbHl0aWNzOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPExvZ3NRdWVyeUVkaXRvclxuICAgICAgICAgIHN1YnNjcmlwdGlvbklkPXtzdWJzY3JpcHRpb25JZH1cbiAgICAgICAgICBxdWVyeT17cXVlcnl9XG4gICAgICAgICAgZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX1cbiAgICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgICAgdmFyaWFibGVPcHRpb25Hcm91cD17dmFyaWFibGVPcHRpb25Hcm91cH1cbiAgICAgICAgICBzZXRFcnJvcj17c2V0RXJyb3J9XG4gICAgICAgIC8+XG4gICAgICApO1xuXG4gICAgY2FzZSBBenVyZVF1ZXJ5VHlwZS5BenVyZVJlc291cmNlR3JhcGg6XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8QXJnUXVlcnlFZGl0b3JcbiAgICAgICAgICBzdWJzY3JpcHRpb25JZD17c3Vic2NyaXB0aW9uSWR9XG4gICAgICAgICAgcXVlcnk9e3F1ZXJ5fVxuICAgICAgICAgIGRhdGFzb3VyY2U9e2RhdGFzb3VyY2V9XG4gICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgIHZhcmlhYmxlT3B0aW9uR3JvdXA9e3ZhcmlhYmxlT3B0aW9uR3JvdXB9XG4gICAgICAgICAgc2V0RXJyb3I9e3NldEVycm9yfVxuICAgICAgICAvPlxuICAgICAgKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zdCB0eXBlID0gcXVlcnkucXVlcnlUeXBlIGFzIHVua25vd247XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8QWxlcnQgdGl0bGU9XCJVbmtub3duIHF1ZXJ5IHR5cGVcIj5cbiAgICAgICAgICB7KHR5cGUgPT09ICdBcHBsaWNhdGlvbiBJbnNpZ2h0cycgfHwgdHlwZSA9PT0gJ0luc2lnaHRzIEFuYWx5dGljcycpICYmIChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIHt0eXBlfSB3YXMgZGVwcmVjYXRlZCBpbiBHcmFmYW5hIDkuIFNlZSB0aGV7JyAnfVxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2dyYWZhbmEuY29tL2RvY3MvZ3JhZmFuYS9sYXRlc3QvZGF0YXNvdXJjZXMvYXp1cmVtb25pdG9yL2RlcHJlY2F0ZWQtYXBwbGljYXRpb24taW5zaWdodHMvXCJcbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIHJlbD1cIm5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRpb24gbm90aWNlXG4gICAgICAgICAgICAgIDwvYT57JyAnfVxuICAgICAgICAgICAgICB0byBnZXQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBob3cgdG8gbWlncmF0ZSB5b3VyIHF1ZXJpZXMuIFRoaXMgaXMgdGhlIGN1cnJlbnQgcXVlcnkgZGVmaW5pdGlvbjpcbiAgICAgICAgICAgICAgPENvZGVFZGl0b3IgaGVpZ2h0PVwiMjAwcHhcIiByZWFkT25seSBsYW5ndWFnZT1cImpzb25cIiB2YWx1ZT17SlNPTi5zdHJpbmdpZnkocXVlcnksIG51bGwsIDQpfSAvPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9BbGVydD5cbiAgICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFF1ZXJ5RWRpdG9yO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBTZWxlY3RhYmxlVmFsdWUgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IFNlbGVjdCB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IHsgQXp1cmVNb25pdG9yUXVlcnksIEF6dXJlUXVlcnlUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi9GaWVsZCc7XG5cbmludGVyZmFjZSBRdWVyeVR5cGVGaWVsZFByb3BzIHtcbiAgcXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5O1xuICBvblF1ZXJ5Q2hhbmdlOiAobmV3UXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KSA9PiB2b2lkO1xufVxuXG5jb25zdCBRdWVyeVR5cGVGaWVsZDogUmVhY3QuRkM8UXVlcnlUeXBlRmllbGRQcm9wcz4gPSAoeyBxdWVyeSwgb25RdWVyeUNoYW5nZSB9KSA9PiB7XG4gIGNvbnN0IHF1ZXJ5VHlwZXM6IEFycmF5PHsgdmFsdWU6IEF6dXJlUXVlcnlUeXBlOyBsYWJlbDogc3RyaW5nIH0+ID0gW1xuICAgIHsgdmFsdWU6IEF6dXJlUXVlcnlUeXBlLkF6dXJlTW9uaXRvciwgbGFiZWw6ICdNZXRyaWNzJyB9LFxuICAgIHsgdmFsdWU6IEF6dXJlUXVlcnlUeXBlLkxvZ0FuYWx5dGljcywgbGFiZWw6ICdMb2dzJyB9LFxuICAgIHsgdmFsdWU6IEF6dXJlUXVlcnlUeXBlLkF6dXJlUmVzb3VyY2VHcmFwaCwgbGFiZWw6ICdBenVyZSBSZXNvdXJjZSBHcmFwaCcgfSxcbiAgXTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAoY2hhbmdlOiBTZWxlY3RhYmxlVmFsdWU8QXp1cmVRdWVyeVR5cGU+KSA9PiB7XG4gICAgICBjaGFuZ2UudmFsdWUgJiZcbiAgICAgICAgb25RdWVyeUNoYW5nZSh7XG4gICAgICAgICAgLi4ucXVlcnksXG4gICAgICAgICAgcXVlcnlUeXBlOiBjaGFuZ2UudmFsdWUsXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgW29uUXVlcnlDaGFuZ2UsIHF1ZXJ5XVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPEZpZWxkIGxhYmVsPVwiU2VydmljZVwiPlxuICAgICAgPFNlbGVjdFxuICAgICAgICBpbnB1dElkPVwiYXp1cmUtbW9uaXRvci1xdWVyeS10eXBlLWZpZWxkXCJcbiAgICAgICAgdmFsdWU9e3F1ZXJ5LnF1ZXJ5VHlwZX1cbiAgICAgICAgb3B0aW9ucz17cXVlcnlUeXBlc31cbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgd2lkdGg9ezM4fVxuICAgICAgLz5cbiAgICA8L0ZpZWxkPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUXVlcnlUeXBlRmllbGQ7XG4iLCJleHBvcnQgeyBkZWZhdWx0IH0gZnJvbSAnLi9RdWVyeUVkaXRvcic7XG4iLCJpbXBvcnQgZGVlcEVxdWFsIGZyb20gJ2Zhc3QtZGVlcC1lcXVhbCc7XG5pbXBvcnQgeyBkZWZhdWx0cyB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEF6dXJlTW9uaXRvclF1ZXJ5LCBBenVyZVF1ZXJ5VHlwZSB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCBtaWdyYXRlUXVlcnkgZnJvbSAnLi4vLi4vdXRpbHMvbWlncmF0ZVF1ZXJ5JztcblxuY29uc3QgREVGQVVMVF9RVUVSWSA9IHtcbiAgcXVlcnlUeXBlOiBBenVyZVF1ZXJ5VHlwZS5BenVyZU1vbml0b3IsXG59O1xuXG5jb25zdCBwcmVwYXJlUXVlcnkgPSAocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KSA9PiB7XG4gIC8vIE5vdGU6IF8uZGVmYXVsdHMgZG9lcyBub3QgYXBwbHkgZGVmYXVsdCB2YWx1ZXMgZGVlcGx5LlxuICBjb25zdCB3aXRoRGVmYXVsdHMgPSBkZWZhdWx0cyh7fSwgcXVlcnksIERFRkFVTFRfUVVFUlkpO1xuICBjb25zdCBtaWdyYXRlZFF1ZXJ5ID0gbWlncmF0ZVF1ZXJ5KHdpdGhEZWZhdWx0cyk7XG5cbiAgLy8gSWYgd2UgZGlkbid0IG1ha2UgYW55IGNoYW5nZXMgdG8gdGhlIG9iamVjdCwgdGhlbiByZXR1cm4gdGhlIG9yaWdpbmFsIG9iamVjdCB0byBrZWVwIHRoZVxuICAvLyBpZGVudGl0eSB0aGUgc2FtZSwgYW5kIG5vdCB0cmlnZ2VyIGFueSBvdGhlciB1c2VFZmZlY3RzIG9yIGFueXRoaW5nLlxuICByZXR1cm4gZGVlcEVxdWFsKG1pZ3JhdGVkUXVlcnksIHF1ZXJ5KSA/IHF1ZXJ5IDogbWlncmF0ZWRRdWVyeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBxdWVyaWVzIHdpdGggc29tZSBkZWZhdWx0cyArIG1pZ3JhdGlvbnMsIGFuZCBjYWxscyBvbkNoYW5nZSBmdW5jdGlvbiB0byBub3RpZnkgaWYgaXQgY2hhbmdlc1xuICovXG5jb25zdCB1c2VQcmVwYXJlZFF1ZXJ5ID0gKHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSwgb25DaGFuZ2VRdWVyeTogKG5ld1F1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSkgPT4gdm9pZCkgPT4ge1xuICBjb25zdCBwcmVwYXJlZFF1ZXJ5ID0gdXNlTWVtbygoKSA9PiBwcmVwYXJlUXVlcnkocXVlcnkpLCBbcXVlcnldKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcmVwYXJlZFF1ZXJ5ICE9PSBxdWVyeSkge1xuICAgICAgb25DaGFuZ2VRdWVyeShwcmVwYXJlZFF1ZXJ5KTtcbiAgICB9XG4gIH0sIFtwcmVwYXJlZFF1ZXJ5LCBxdWVyeSwgb25DaGFuZ2VRdWVyeV0pO1xuXG4gIHJldHVybiBwcmVwYXJlZFF1ZXJ5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgdXNlUHJlcGFyZWRRdWVyeTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgU2VsZWN0YWJsZVZhbHVlIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5pbXBvcnQgeyBFZGl0b3JIZWFkZXIsIElubGluZVNlbGVjdCB9IGZyb20gJ0BncmFmYW5hL2V4cGVyaW1lbnRhbCc7XG5cbmltcG9ydCB7IEF6dXJlTW9uaXRvclF1ZXJ5LCBBenVyZVF1ZXJ5VHlwZSB9IGZyb20gJy4uL3R5cGVzJztcblxuaW50ZXJmYWNlIFF1ZXJ5VHlwZUZpZWxkUHJvcHMge1xuICBxdWVyeTogQXp1cmVNb25pdG9yUXVlcnk7XG4gIG9uUXVlcnlDaGFuZ2U6IChuZXdRdWVyeTogQXp1cmVNb25pdG9yUXVlcnkpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBRdWVyeUhlYWRlcjogUmVhY3QuRkM8UXVlcnlUeXBlRmllbGRQcm9wcz4gPSAoeyBxdWVyeSwgb25RdWVyeUNoYW5nZSB9KSA9PiB7XG4gIGNvbnN0IHF1ZXJ5VHlwZXM6IEFycmF5PHsgdmFsdWU6IEF6dXJlUXVlcnlUeXBlOyBsYWJlbDogc3RyaW5nIH0+ID0gW1xuICAgIHsgdmFsdWU6IEF6dXJlUXVlcnlUeXBlLkF6dXJlTW9uaXRvciwgbGFiZWw6ICdNZXRyaWNzJyB9LFxuICAgIHsgdmFsdWU6IEF6dXJlUXVlcnlUeXBlLkxvZ0FuYWx5dGljcywgbGFiZWw6ICdMb2dzJyB9LFxuICAgIHsgdmFsdWU6IEF6dXJlUXVlcnlUeXBlLkF6dXJlUmVzb3VyY2VHcmFwaCwgbGFiZWw6ICdBenVyZSBSZXNvdXJjZSBHcmFwaCcgfSxcbiAgXTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAoY2hhbmdlOiBTZWxlY3RhYmxlVmFsdWU8QXp1cmVRdWVyeVR5cGU+KSA9PiB7XG4gICAgICBjaGFuZ2UudmFsdWUgJiZcbiAgICAgICAgb25RdWVyeUNoYW5nZSh7XG4gICAgICAgICAgLi4ucXVlcnksXG4gICAgICAgICAgcXVlcnlUeXBlOiBjaGFuZ2UudmFsdWUsXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgW29uUXVlcnlDaGFuZ2UsIHF1ZXJ5XVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPHNwYW4gZGF0YS10ZXN0aWQ9XCJhenVyZS1tb25pdG9yLWV4cGVyaW1lbnRhbC1oZWFkZXJcIj5cbiAgICAgIDxFZGl0b3JIZWFkZXI+XG4gICAgICAgIDxJbmxpbmVTZWxlY3RcbiAgICAgICAgICBsYWJlbD1cIlNlcnZpY2VcIlxuICAgICAgICAgIHZhbHVlPXtxdWVyeS5xdWVyeVR5cGV9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZXJ2aWNlLi4uXCJcbiAgICAgICAgICBhbGxvd0N1c3RvbVZhbHVlXG4gICAgICAgICAgb3B0aW9ucz17cXVlcnlUeXBlc31cbiAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgPC9FZGl0b3JIZWFkZXI+XG4gICAgPC9zcGFuPlxuICApO1xufTtcbiIsImltcG9ydCB7IGN4IH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQnV0dG9uLCBJY29uLCBNb2RhbCwgdXNlU3R5bGVzMiB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IERhdGFzb3VyY2UgZnJvbSAnLi4vLi4vZGF0YXNvdXJjZSc7XG5pbXBvcnQgeyBSZXNvdXJjZVBpY2tlclF1ZXJ5VHlwZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlUGlja2VyL3Jlc291cmNlUGlja2VyRGF0YSc7XG5pbXBvcnQgeyBBenVyZVF1ZXJ5RWRpdG9yRmllbGRQcm9wcywgQXp1cmVNb25pdG9yUXVlcnksIEF6dXJlUmVzb3VyY2VTdW1tYXJ5SXRlbSB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi4vRmllbGQnO1xuaW1wb3J0IFJlc291cmNlUGlja2VyIGZyb20gJy4uL1Jlc291cmNlUGlja2VyJztcbmltcG9ydCBnZXRTdHlsZXMgZnJvbSAnLi4vUmVzb3VyY2VQaWNrZXIvc3R5bGVzJztcbmltcG9ydCB7IFJlc291cmNlUm93VHlwZSB9IGZyb20gJy4uL1Jlc291cmNlUGlja2VyL3R5cGVzJztcbmltcG9ydCB7IHBhcnNlUmVzb3VyY2VVUkkgfSBmcm9tICcuLi9SZXNvdXJjZVBpY2tlci91dGlscyc7XG5cbmZ1bmN0aW9uIHBhcnNlUmVzb3VyY2VEZXRhaWxzKHJlc291cmNlVVJJOiBzdHJpbmcpIHtcbiAgY29uc3QgcGFyc2VkID0gcGFyc2VSZXNvdXJjZVVSSShyZXNvdXJjZVVSSSk7XG5cbiAgaWYgKCFwYXJzZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdWJzY3JpcHRpb25OYW1lOiBwYXJzZWQuc3Vic2NyaXB0aW9uSUQsXG4gICAgcmVzb3VyY2VHcm91cE5hbWU6IHBhcnNlZC5yZXNvdXJjZUdyb3VwLFxuICAgIHJlc291cmNlTmFtZTogcGFyc2VkLnJlc291cmNlLFxuICB9O1xufVxuXG5pbnRlcmZhY2UgUmVzb3VyY2VGaWVsZFByb3BzIGV4dGVuZHMgQXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHMge1xuICBzZXRSZXNvdXJjZTogKHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSwgcmVzb3VyY2VVUkk/OiBzdHJpbmcpID0+IEF6dXJlTW9uaXRvclF1ZXJ5O1xuICBzZWxlY3RhYmxlRW50cnlUeXBlczogUmVzb3VyY2VSb3dUeXBlW107XG4gIHF1ZXJ5VHlwZTogUmVzb3VyY2VQaWNrZXJRdWVyeVR5cGU7XG4gIHJlc291cmNlVXJpPzogc3RyaW5nO1xuICBpbmxpbmVGaWVsZD86IGJvb2xlYW47XG4gIGxhYmVsV2lkdGg/OiBudW1iZXI7XG59XG5cbmNvbnN0IFJlc291cmNlRmllbGQ6IFJlYWN0LkZDPFJlc291cmNlRmllbGRQcm9wcz4gPSAoe1xuICBxdWVyeSxcbiAgZGF0YXNvdXJjZSxcbiAgb25RdWVyeUNoYW5nZSxcbiAgc2V0UmVzb3VyY2UsXG4gIHNlbGVjdGFibGVFbnRyeVR5cGVzLFxuICBxdWVyeVR5cGUsXG4gIHJlc291cmNlVXJpLFxuICBpbmxpbmVGaWVsZCxcbiAgbGFiZWxXaWR0aCxcbn0pID0+IHtcbiAgY29uc3Qgc3R5bGVzID0gdXNlU3R5bGVzMihnZXRTdHlsZXMpO1xuICBjb25zdCBbcGlja2VySXNPcGVuLCBzZXRQaWNrZXJJc09wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGhhbmRsZU9wZW5QaWNrZXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0UGlja2VySXNPcGVuKHRydWUpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgY2xvc2VQaWNrZXIgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0UGlja2VySXNPcGVuKGZhbHNlKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGhhbmRsZUFwcGx5ID0gdXNlQ2FsbGJhY2soXG4gICAgKHJlc291cmNlVVJJOiBzdHJpbmcgfCB1bmRlZmluZWQpID0+IHtcbiAgICAgIG9uUXVlcnlDaGFuZ2Uoc2V0UmVzb3VyY2UocXVlcnksIHJlc291cmNlVVJJKSk7XG4gICAgICBjbG9zZVBpY2tlcigpO1xuICAgIH0sXG4gICAgW2Nsb3NlUGlja2VyLCBvblF1ZXJ5Q2hhbmdlLCBxdWVyeSwgc2V0UmVzb3VyY2VdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPE1vZGFsXG4gICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLm1vZGFsfVxuICAgICAgICB0aXRsZT1cIlNlbGVjdCBhIHJlc291cmNlXCJcbiAgICAgICAgaXNPcGVuPXtwaWNrZXJJc09wZW59XG4gICAgICAgIG9uRGlzbWlzcz17Y2xvc2VQaWNrZXJ9XG4gICAgICAgIC8vIFRoZSBncm93aW5nIG51bWJlciBvZiByb3dzIGFkZGVkIHRvIHRoZSBtb2RhbCBjYXVzZXMgYSBmb2N1c1xuICAgICAgICAvLyBlcnJvciBpbiB0aGUgbW9kYWwsIG1ha2luZyBpdCBpbXBvc3NpYmxlIHRvIGNsaWNrIG9uIG5ldyBlbGVtZW50c1xuICAgICAgICB0cmFwRm9jdXM9e2ZhbHNlfVxuICAgICAgPlxuICAgICAgICA8UmVzb3VyY2VQaWNrZXJcbiAgICAgICAgICByZXNvdXJjZVBpY2tlckRhdGE9e2RhdGFzb3VyY2UucmVzb3VyY2VQaWNrZXJEYXRhfVxuICAgICAgICAgIHJlc291cmNlVVJJPXtyZXNvdXJjZVVyaX1cbiAgICAgICAgICBvbkFwcGx5PXtoYW5kbGVBcHBseX1cbiAgICAgICAgICBvbkNhbmNlbD17Y2xvc2VQaWNrZXJ9XG4gICAgICAgICAgc2VsZWN0YWJsZUVudHJ5VHlwZXM9e3NlbGVjdGFibGVFbnRyeVR5cGVzfVxuICAgICAgICAgIHF1ZXJ5VHlwZT17cXVlcnlUeXBlfVxuICAgICAgICAvPlxuICAgICAgPC9Nb2RhbD5cbiAgICAgIDxGaWVsZCBsYWJlbD1cIlJlc291cmNlXCIgaW5saW5lRmllbGQ9e2lubGluZUZpZWxkfSBsYWJlbFdpZHRoPXtsYWJlbFdpZHRofT5cbiAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9e3N0eWxlcy5yZXNvdXJjZUZpZWxkQnV0dG9ufSB2YXJpYW50PVwic2Vjb25kYXJ5XCIgb25DbGljaz17aGFuZGxlT3BlblBpY2tlcn0gdHlwZT1cImJ1dHRvblwiPlxuICAgICAgICAgIDxSZXNvdXJjZUxhYmVsIHJlc291cmNlPXtyZXNvdXJjZVVyaX0gZGF0YXNvdXJjZT17ZGF0YXNvdXJjZX0gLz5cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L0ZpZWxkPlxuICAgIDwvPlxuICApO1xufTtcblxuaW50ZXJmYWNlIFJlc291cmNlTGFiZWxQcm9wcyB7XG4gIHJlc291cmNlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGRhdGFzb3VyY2U6IERhdGFzb3VyY2U7XG59XG5cbmNvbnN0IFJlc291cmNlTGFiZWwgPSAoeyByZXNvdXJjZSwgZGF0YXNvdXJjZSB9OiBSZXNvdXJjZUxhYmVsUHJvcHMpID0+IHtcbiAgY29uc3QgW3Jlc291cmNlQ29tcG9uZW50cywgc2V0UmVzb3VyY2VDb21wb25lbnRzXSA9IHVzZVN0YXRlKHBhcnNlUmVzb3VyY2VEZXRhaWxzKHJlc291cmNlID8/ICcnKSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocmVzb3VyY2UgJiYgcGFyc2VSZXNvdXJjZURldGFpbHMocmVzb3VyY2UpKSB7XG4gICAgICBkYXRhc291cmNlLnJlc291cmNlUGlja2VyRGF0YS5nZXRSZXNvdXJjZVVSSURpc3BsYXlQcm9wZXJ0aWVzKHJlc291cmNlKS50aGVuKHNldFJlc291cmNlQ29tcG9uZW50cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFJlc291cmNlQ29tcG9uZW50cyh1bmRlZmluZWQpO1xuICAgIH1cbiAgfSwgW2RhdGFzb3VyY2UucmVzb3VyY2VQaWNrZXJEYXRhLCByZXNvdXJjZV0pO1xuXG4gIGlmICghcmVzb3VyY2UpIHtcbiAgICByZXR1cm4gPD5TZWxlY3QgYSByZXNvdXJjZTwvPjtcbiAgfVxuXG4gIGlmIChyZXNvdXJjZUNvbXBvbmVudHMpIHtcbiAgICByZXR1cm4gPEZvcm1hdHRlZFJlc291cmNlIHJlc291cmNlPXtyZXNvdXJjZUNvbXBvbmVudHN9IC8+O1xuICB9XG5cbiAgaWYgKHJlc291cmNlLnN0YXJ0c1dpdGgoJyQnKSkge1xuICAgIHJldHVybiAoXG4gICAgICA8c3Bhbj5cbiAgICAgICAgPEljb24gbmFtZT1cInhcIiAvPiB7cmVzb3VyY2V9XG4gICAgICA8L3NwYW4+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiA8PntyZXNvdXJjZX08Lz47XG59O1xuXG5pbnRlcmZhY2UgRm9ybWF0dGVkUmVzb3VyY2VQcm9wcyB7XG4gIHJlc291cmNlOiBBenVyZVJlc291cmNlU3VtbWFyeUl0ZW07XG59XG5cbmNvbnN0IEZvcm1hdHRlZFJlc291cmNlID0gKHsgcmVzb3VyY2UgfTogRm9ybWF0dGVkUmVzb3VyY2VQcm9wcykgPT4ge1xuICBjb25zdCBzdHlsZXMgPSB1c2VTdHlsZXMyKGdldFN0eWxlcyk7XG5cbiAgaWYgKHJlc291cmNlLnJlc291cmNlTmFtZSkge1xuICAgIHJldHVybiAoXG4gICAgICA8c3BhbiBjbGFzc05hbWU9e2N4KHN0eWxlcy50cnVuY2F0ZWQsIHN0eWxlcy5yZXNvdXJjZUZpZWxkKX0+XG4gICAgICAgIDxJY29uIG5hbWU9XCJjdWJlXCIgLz4ge3Jlc291cmNlLnJlc291cmNlTmFtZX1cbiAgICAgIDwvc3Bhbj5cbiAgICApO1xuICB9XG4gIGlmIChyZXNvdXJjZS5yZXNvdXJjZUdyb3VwTmFtZSkge1xuICAgIHJldHVybiAoXG4gICAgICA8c3Bhbj5cbiAgICAgICAgPEljb24gbmFtZT1cImZvbGRlclwiIC8+IHtyZXNvdXJjZS5yZXNvdXJjZUdyb3VwTmFtZX1cbiAgICAgIDwvc3Bhbj5cbiAgICApO1xuICB9XG4gIHJldHVybiAoXG4gICAgPHNwYW4+XG4gICAgICA8SWNvbiBuYW1lPVwibGF5ZXItZ3JvdXBcIiAvPiB7cmVzb3VyY2Uuc3Vic2NyaXB0aW9uTmFtZX1cbiAgICA8L3NwYW4+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZXNvdXJjZUZpZWxkO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vUmVzb3VyY2VGaWVsZCc7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5pbXBvcnQgeyBSZXNvdXJjZVJvdywgUmVzb3VyY2VSb3dUeXBlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmludGVyZmFjZSBFbnRyeUljb25Qcm9wcyB7XG4gIGVudHJ5OiBSZXNvdXJjZVJvdztcbiAgaXNPcGVuOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgRW50cnlJY29uOiBSZWFjdC5GQzxFbnRyeUljb25Qcm9wcz4gPSAoeyBpc09wZW4sIGVudHJ5OiB7IHR5cGUgfSB9KSA9PiB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgUmVzb3VyY2VSb3dUeXBlLlN1YnNjcmlwdGlvbjpcbiAgICAgIHJldHVybiA8SWNvbiBuYW1lPVwibGF5ZXItZ3JvdXBcIiAvPjtcblxuICAgIGNhc2UgUmVzb3VyY2VSb3dUeXBlLlJlc291cmNlR3JvdXA6XG4gICAgICByZXR1cm4gPEljb24gbmFtZT17aXNPcGVuID8gJ2ZvbGRlci1vcGVuJyA6ICdmb2xkZXInfSAvPjtcblxuICAgIGNhc2UgUmVzb3VyY2VSb3dUeXBlLlJlc291cmNlOlxuICAgICAgcmV0dXJuIDxJY29uIG5hbWU9XCJjdWJlXCIgLz47XG5cbiAgICBjYXNlIFJlc291cmNlUm93VHlwZS5WYXJpYWJsZUdyb3VwOlxuICAgICAgcmV0dXJuIDxJY29uIG5hbWU9XCJ4XCIgLz47XG5cbiAgICBjYXNlIFJlc291cmNlUm93VHlwZS5WYXJpYWJsZTpcbiAgICAgIHJldHVybiA8SWNvbiBuYW1lPVwieFwiIC8+O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuIiwiaW1wb3J0IHsgY3ggfSBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IENoZWNrYm94LCBJY29uQnV0dG9uLCB1c2VTdHlsZXMyLCB1c2VUaGVtZTIgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmltcG9ydCB7IFNwYWNlIH0gZnJvbSAnLi4vU3BhY2UnO1xuXG5pbXBvcnQgeyBFbnRyeUljb24gfSBmcm9tICcuL0VudHJ5SWNvbic7XG5pbXBvcnQgZ2V0U3R5bGVzIGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCB7IFJlc291cmNlUm93IH0gZnJvbSAnLi90eXBlcyc7XG5cbmludGVyZmFjZSBOZXN0ZWRFbnRyeVByb3BzIHtcbiAgbGV2ZWw6IG51bWJlcjtcbiAgZW50cnk6IFJlc291cmNlUm93O1xuICBpc1NlbGVjdGVkOiBib29sZWFuO1xuICBpc1NlbGVjdGFibGU6IGJvb2xlYW47XG4gIGlzT3BlbjogYm9vbGVhbjtcbiAgaXNEaXNhYmxlZDogYm9vbGVhbjtcbiAgc2Nyb2xsSW50b1ZpZXc/OiBib29sZWFuO1xuICBvblRvZ2dsZUNvbGxhcHNlOiAocm93OiBSZXNvdXJjZVJvdykgPT4gdm9pZDtcbiAgb25TZWxlY3RlZENoYW5nZTogKHJvdzogUmVzb3VyY2VSb3csIHNlbGVjdGVkOiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgTmVzdGVkRW50cnk6IFJlYWN0LkZDPE5lc3RlZEVudHJ5UHJvcHM+ID0gKHtcbiAgZW50cnksXG4gIGlzU2VsZWN0ZWQsXG4gIGlzRGlzYWJsZWQsXG4gIGlzT3BlbixcbiAgaXNTZWxlY3RhYmxlLFxuICBsZXZlbCxcbiAgc2Nyb2xsSW50b1ZpZXcsXG4gIG9uVG9nZ2xlQ29sbGFwc2UsXG4gIG9uU2VsZWN0ZWRDaGFuZ2UsXG59KSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUyKCk7XG4gIGNvbnN0IHN0eWxlcyA9IHVzZVN0eWxlczIoZ2V0U3R5bGVzKTtcbiAgY29uc3QgaGFzQ2hpbGRyZW4gPSAhIWVudHJ5LmNoaWxkcmVuO1xuXG4gIGNvbnN0IGhhbmRsZVRvZ2dsZUNvbGxhcHNlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIG9uVG9nZ2xlQ29sbGFwc2UoZW50cnkpO1xuICB9LCBbb25Ub2dnbGVDb2xsYXBzZSwgZW50cnldKTtcblxuICBjb25zdCBoYW5kbGVTZWxlY3RlZENoYW5nZWQgPSB1c2VDYWxsYmFjayhcbiAgICAoZXY6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgICBjb25zdCBpc1NlbGVjdGVkID0gZXYudGFyZ2V0LmNoZWNrZWQ7XG4gICAgICBvblNlbGVjdGVkQ2hhbmdlKGVudHJ5LCBpc1NlbGVjdGVkKTtcbiAgICB9LFxuICAgIFtlbnRyeSwgb25TZWxlY3RlZENoYW5nZV1cbiAgKTtcblxuICBjb25zdCBjaGVja2JveElkID0gYCR7c2Nyb2xsSW50b1ZpZXcgPyAndGFibGUnIDogJ3N1bW1hcnknfV9jaGVja2JveF8ke2VudHJ5LnVyaX1gO1xuXG4gIC8vIFNjcm9sbCB0byB0aGUgc2VsZWN0ZWQgZWxlbWVudCBpZiBpdCdzIG5vdCBpbiB0aGUgdmlld1xuICAvLyBPbmx5IGRvIGl0IG9uY2UsIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzU2VsZWN0ZWQgJiYgc2Nyb2xsSW50b1ZpZXcpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNoZWNrYm94SWQpPy5zY3JvbGxJbnRvVmlldyh7XG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJyxcbiAgICAgICAgYmxvY2s6ICdjZW50ZXInLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLm5lc3RlZEVudHJ5fSBzdHlsZT17eyBtYXJnaW5MZWZ0OiBsZXZlbCAqICgzICogdGhlbWUuc3BhY2luZy5ncmlkU2l6ZSkgfX0+XG4gICAgICB7aGFzQ2hpbGRyZW4gPyAoXG4gICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMuY29sbGFwc2VCdXR0b259XG4gICAgICAgICAgbmFtZT17aXNPcGVuID8gJ2FuZ2xlLWRvd24nIDogJ2FuZ2xlLXJpZ2h0J31cbiAgICAgICAgICBhcmlhLWxhYmVsPXtpc09wZW4gPyBgQ29sbGFwc2UgJHtlbnRyeS5uYW1lfWAgOiBgRXhwYW5kICR7ZW50cnkubmFtZX1gfVxuICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVRvZ2dsZUNvbGxhcHNlfVxuICAgICAgICAgIGlkPXtlbnRyeS5pZH1cbiAgICAgICAgLz5cbiAgICAgICkgOiAoXG4gICAgICAgIDxTcGFjZSBsYXlvdXQ9XCJpbmxpbmVcIiBoPXsyfSAvPlxuICAgICAgKX1cblxuICAgICAgPFNwYWNlIGxheW91dD1cImlubGluZVwiIGg9ezJ9IC8+XG5cbiAgICAgIHtpc1NlbGVjdGFibGUgJiYgKFxuICAgICAgICA8PlxuICAgICAgICAgIDxDaGVja2JveFxuICAgICAgICAgICAgaWQ9e2NoZWNrYm94SWR9XG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlU2VsZWN0ZWRDaGFuZ2VkfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2lzRGlzYWJsZWR9XG4gICAgICAgICAgICB2YWx1ZT17aXNTZWxlY3RlZH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLm5lc3RlZFJvd0NoZWNrYm94fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFNwYWNlIGxheW91dD1cImlubGluZVwiIGg9ezJ9IC8+XG4gICAgICAgIDwvPlxuICAgICAgKX1cblxuICAgICAgPEVudHJ5SWNvbiBlbnRyeT17ZW50cnl9IGlzT3Blbj17aXNPcGVufSAvPlxuICAgICAgPFNwYWNlIGxheW91dD1cImlubGluZVwiIGg9ezF9IC8+XG5cbiAgICAgIDxsYWJlbCBodG1sRm9yPXtjaGVja2JveElkfSBjbGFzc05hbWU9e2N4KHN0eWxlcy5lbnRyeUNvbnRlbnRJdGVtLCBzdHlsZXMudHJ1bmNhdGVkKX0+XG4gICAgICAgIHtlbnRyeS5uYW1lfVxuICAgICAgPC9sYWJlbD5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iLCJpbXBvcnQgeyBjeCB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRmFkZVRyYW5zaXRpb24sIExvYWRpbmdQbGFjZWhvbGRlciwgdXNlU3R5bGVzMiB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IHsgTmVzdGVkRW50cnkgfSBmcm9tICcuL05lc3RlZEVudHJ5JztcbmltcG9ydCBnZXRTdHlsZXMgZnJvbSAnLi9zdHlsZXMnO1xuaW1wb3J0IHsgUmVzb3VyY2VSb3csIFJlc291cmNlUm93R3JvdXAsIFJlc291cmNlUm93VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgZmluZFJvdyB9IGZyb20gJy4vdXRpbHMnO1xuXG5pbnRlcmZhY2UgTmVzdGVkUm93UHJvcHMge1xuICByb3c6IFJlc291cmNlUm93O1xuICBsZXZlbDogbnVtYmVyO1xuICBzZWxlY3RlZFJvd3M6IFJlc291cmNlUm93R3JvdXA7XG4gIHJlcXVlc3ROZXN0ZWRSb3dzOiAocm93OiBSZXNvdXJjZVJvdykgPT4gUHJvbWlzZTx2b2lkPjtcbiAgb25Sb3dTZWxlY3RlZENoYW5nZTogKHJvdzogUmVzb3VyY2VSb3csIHNlbGVjdGVkOiBib29sZWFuKSA9PiB2b2lkO1xuICBzZWxlY3RhYmxlRW50cnlUeXBlczogUmVzb3VyY2VSb3dUeXBlW107XG4gIHNjcm9sbEludG9WaWV3PzogYm9vbGVhbjtcbn1cblxuY29uc3QgTmVzdGVkUm93OiBSZWFjdC5GQzxOZXN0ZWRSb3dQcm9wcz4gPSAoe1xuICByb3csXG4gIHNlbGVjdGVkUm93cyxcbiAgbGV2ZWwsXG4gIHJlcXVlc3ROZXN0ZWRSb3dzLFxuICBvblJvd1NlbGVjdGVkQ2hhbmdlLFxuICBzZWxlY3RhYmxlRW50cnlUeXBlcyxcbiAgc2Nyb2xsSW50b1ZpZXcsXG59KSA9PiB7XG4gIGNvbnN0IHN0eWxlcyA9IHVzZVN0eWxlczIoZ2V0U3R5bGVzKTtcbiAgY29uc3QgW3Jvd1N0YXR1cywgc2V0Um93U3RhdHVzXSA9IHVzZVN0YXRlPCdvcGVuJyB8ICdjbG9zZWQnIHwgJ2xvYWRpbmcnPignY2xvc2VkJyk7XG5cbiAgY29uc3QgaXNTZWxlY3RlZCA9ICEhc2VsZWN0ZWRSb3dzLmZpbmQoKHYpID0+IHYudXJpID09PSByb3cudXJpKTtcbiAgY29uc3QgaXNEaXNhYmxlZCA9IHNlbGVjdGVkUm93cy5sZW5ndGggPiAwICYmICFpc1NlbGVjdGVkO1xuICBjb25zdCBpc09wZW4gPSByb3dTdGF0dXMgPT09ICdvcGVuJztcblxuICBjb25zdCBvblJvd1RvZ2dsZUNvbGxhcHNlID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmIChyb3dTdGF0dXMgPT09ICdvcGVuJykge1xuICAgICAgc2V0Um93U3RhdHVzKCdjbG9zZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0Um93U3RhdHVzKCdsb2FkaW5nJyk7XG4gICAgcmVxdWVzdE5lc3RlZFJvd3Mocm93KVxuICAgICAgLnRoZW4oKCkgPT4gc2V0Um93U3RhdHVzKCdvcGVuJykpXG4gICAgICAuY2F0Y2goKCkgPT4gc2V0Um93U3RhdHVzKCdjbG9zZWQnKSk7XG4gIH07XG5cbiAgLy8gb3BlbnMgdGhlIHJlc291cmNlIGdyb3VwIG9uIGxvYWQgb2YgY29tcG9uZW50IGlmIHRoZXJlIHdhcyBhIHByZXZpb3VzbHkgc2F2ZWQgc2VsZWN0aW9uXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gQXNzdW1pbmcgd2UgZG9uJ3QgaGF2ZSBtdWx0aS1zZWxlY3QgeWV0XG4gICAgY29uc3Qgc2VsZWN0ZWRSb3cgPSBzZWxlY3RlZFJvd3NbMF07XG5cbiAgICBjb25zdCBjb250YWluc0NoaWxkID0gc2VsZWN0ZWRSb3cgJiYgISFmaW5kUm93KHJvdy5jaGlsZHJlbiA/PyBbXSwgc2VsZWN0ZWRSb3cudXJpKTtcblxuICAgIGlmIChjb250YWluc0NoaWxkKSB7XG4gICAgICBzZXRSb3dTdGF0dXMoJ29wZW4nKTtcbiAgICB9XG4gIH0sIFtzZWxlY3RlZFJvd3MsIHJvd10pO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDx0ciBjbGFzc05hbWU9e2N4KHN0eWxlcy5yb3csIGlzRGlzYWJsZWQgJiYgc3R5bGVzLmRpc2FibGVkUm93KX0ga2V5PXtyb3cuaWR9PlxuICAgICAgICA8dGQgY2xhc3NOYW1lPXtzdHlsZXMuY2VsbH0+XG4gICAgICAgICAgPE5lc3RlZEVudHJ5XG4gICAgICAgICAgICBsZXZlbD17bGV2ZWx9XG4gICAgICAgICAgICBpc1NlbGVjdGVkPXtpc1NlbGVjdGVkfVxuICAgICAgICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgICAgIGlzT3Blbj17aXNPcGVufVxuICAgICAgICAgICAgZW50cnk9e3Jvd31cbiAgICAgICAgICAgIG9uVG9nZ2xlQ29sbGFwc2U9e29uUm93VG9nZ2xlQ29sbGFwc2V9XG4gICAgICAgICAgICBvblNlbGVjdGVkQ2hhbmdlPXtvblJvd1NlbGVjdGVkQ2hhbmdlfVxuICAgICAgICAgICAgaXNTZWxlY3RhYmxlPXtzZWxlY3RhYmxlRW50cnlUeXBlcy5zb21lKCh0eXBlKSA9PiB0eXBlID09PSByb3cudHlwZSl9XG4gICAgICAgICAgICBzY3JvbGxJbnRvVmlldz17c2Nyb2xsSW50b1ZpZXd9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC90ZD5cblxuICAgICAgICA8dGQgY2xhc3NOYW1lPXtzdHlsZXMuY2VsbH0+e3Jvdy50eXBlTGFiZWx9PC90ZD5cblxuICAgICAgICA8dGQgY2xhc3NOYW1lPXtzdHlsZXMuY2VsbH0+e3Jvdy5sb2NhdGlvbiA/PyAnLSd9PC90ZD5cbiAgICAgIDwvdHI+XG5cbiAgICAgIHtpc09wZW4gJiZcbiAgICAgICAgcm93LmNoaWxkcmVuICYmXG4gICAgICAgIE9iamVjdC5rZXlzKHJvdy5jaGlsZHJlbikubGVuZ3RoID4gMCAmJlxuICAgICAgICByb3cuY2hpbGRyZW4ubWFwKChjaGlsZFJvdykgPT4gKFxuICAgICAgICAgIDxOZXN0ZWRSb3dcbiAgICAgICAgICAgIGtleT17Y2hpbGRSb3cudXJpfVxuICAgICAgICAgICAgcm93PXtjaGlsZFJvd31cbiAgICAgICAgICAgIHNlbGVjdGVkUm93cz17c2VsZWN0ZWRSb3dzfVxuICAgICAgICAgICAgbGV2ZWw9e2xldmVsICsgMX1cbiAgICAgICAgICAgIHJlcXVlc3ROZXN0ZWRSb3dzPXtyZXF1ZXN0TmVzdGVkUm93c31cbiAgICAgICAgICAgIG9uUm93U2VsZWN0ZWRDaGFuZ2U9e29uUm93U2VsZWN0ZWRDaGFuZ2V9XG4gICAgICAgICAgICBzZWxlY3RhYmxlRW50cnlUeXBlcz17c2VsZWN0YWJsZUVudHJ5VHlwZXN9XG4gICAgICAgICAgICBzY3JvbGxJbnRvVmlldz17c2Nyb2xsSW50b1ZpZXd9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG5cbiAgICAgIDxGYWRlVHJhbnNpdGlvbiB2aXNpYmxlPXtyb3dTdGF0dXMgPT09ICdsb2FkaW5nJ30+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPXtjeChzdHlsZXMuY2VsbCwgc3R5bGVzLmxvYWRpbmdDZWxsKX0gY29sU3Bhbj17M30+XG4gICAgICAgICAgICA8TG9hZGluZ1BsYWNlaG9sZGVyIHRleHQ9XCJMb2FkaW5nLi4uXCIgY2xhc3NOYW1lPXtzdHlsZXMuc3Bpbm5lcn0gLz5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgPC9GYWRlVHJhbnNpdGlvbj5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5lc3RlZFJvdztcbiIsImltcG9ydCB7IGN4IH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUVmZmVjdE9uY2UgfSBmcm9tICdyZWFjdC11c2UnO1xuXG5pbXBvcnQgeyBBbGVydCwgQnV0dG9uLCBJY29uLCBJbnB1dCwgTG9hZGluZ1BsYWNlaG9sZGVyLCBUb29sdGlwLCB1c2VTdHlsZXMyLCBDb2xsYXBzZSwgTGFiZWwgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmltcG9ydCBSZXNvdXJjZVBpY2tlckRhdGEsIHsgUmVzb3VyY2VQaWNrZXJRdWVyeVR5cGUgfSBmcm9tICcuLi8uLi9yZXNvdXJjZVBpY2tlci9yZXNvdXJjZVBpY2tlckRhdGEnO1xuaW1wb3J0IG1lc3NhZ2VGcm9tRXJyb3IgZnJvbSAnLi4vLi4vdXRpbHMvbWVzc2FnZUZyb21FcnJvcic7XG5pbXBvcnQgeyBTcGFjZSB9IGZyb20gJy4uL1NwYWNlJztcblxuaW1wb3J0IE5lc3RlZFJvdyBmcm9tICcuL05lc3RlZFJvdyc7XG5pbXBvcnQgU2VhcmNoIGZyb20gJy4vU2VhcmNoJztcbmltcG9ydCBnZXRTdHlsZXMgZnJvbSAnLi9zdHlsZXMnO1xuaW1wb3J0IHsgUmVzb3VyY2VSb3csIFJlc291cmNlUm93R3JvdXAsIFJlc291cmNlUm93VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgZmluZFJvdyB9IGZyb20gJy4vdXRpbHMnO1xuXG5pbnRlcmZhY2UgUmVzb3VyY2VQaWNrZXJQcm9wcyB7XG4gIHJlc291cmNlUGlja2VyRGF0YTogUmVzb3VyY2VQaWNrZXJEYXRhO1xuICByZXNvdXJjZVVSSTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBzZWxlY3RhYmxlRW50cnlUeXBlczogUmVzb3VyY2VSb3dUeXBlW107XG4gIHF1ZXJ5VHlwZTogUmVzb3VyY2VQaWNrZXJRdWVyeVR5cGU7XG5cbiAgb25BcHBseTogKHJlc291cmNlVVJJOiBzdHJpbmcgfCB1bmRlZmluZWQpID0+IHZvaWQ7XG4gIG9uQ2FuY2VsOiAoKSA9PiB2b2lkO1xufVxuXG5jb25zdCBSZXNvdXJjZVBpY2tlciA9ICh7XG4gIHJlc291cmNlUGlja2VyRGF0YSxcbiAgcmVzb3VyY2VVUkksXG4gIG9uQXBwbHksXG4gIG9uQ2FuY2VsLFxuICBzZWxlY3RhYmxlRW50cnlUeXBlcyxcbiAgcXVlcnlUeXBlLFxufTogUmVzb3VyY2VQaWNrZXJQcm9wcykgPT4ge1xuICBjb25zdCBzdHlsZXMgPSB1c2VTdHlsZXMyKGdldFN0eWxlcyk7XG5cbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Jvd3MsIHNldFJvd3NdID0gdXNlU3RhdGU8UmVzb3VyY2VSb3dHcm91cD4oW10pO1xuICBjb25zdCBbc2VsZWN0ZWRSb3dzLCBzZXRTZWxlY3RlZFJvd3NdID0gdXNlU3RhdGU8UmVzb3VyY2VSb3dHcm91cD4oW10pO1xuICBjb25zdCBbaW50ZXJuYWxTZWxlY3RlZFVSSSwgc2V0SW50ZXJuYWxTZWxlY3RlZFVSSV0gPSB1c2VTdGF0ZTxzdHJpbmcgfCB1bmRlZmluZWQ+KHJlc291cmNlVVJJKTtcbiAgY29uc3QgW2Vycm9yTWVzc2FnZSwgc2V0RXJyb3JNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZyB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbiAgY29uc3QgW2lzQWR2YW5jZWRPcGVuLCBzZXRJc0FkdmFuY2VkT3Blbl0gPSB1c2VTdGF0ZShyZXNvdXJjZVVSST8uaW5jbHVkZXMoJyQnKSk7XG4gIGNvbnN0IFtzaG91bGRTaG93TGltaXRGbGFnLCBzZXRTaG91bGRTaG93TGltaXRGbGFnXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICAvLyBTeW5jIHRoZSByZXNvdXJjZVVSSSBwcm9wIHRvIGludGVybmFsIHN0YXRlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0SW50ZXJuYWxTZWxlY3RlZFVSSShyZXNvdXJjZVVSSSk7XG4gIH0sIFtyZXNvdXJjZVVSSV0pO1xuXG4gIGNvbnN0IGxvYWRJbml0aWFsRGF0YSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIWlzTG9hZGluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgICBjb25zdCByZXNvdXJjZXMgPSBhd2FpdCByZXNvdXJjZVBpY2tlckRhdGEuZmV0Y2hJbml0aWFsUm93cyhxdWVyeVR5cGUsIGludGVybmFsU2VsZWN0ZWRVUkkgfHwgJycpO1xuICAgICAgICBzZXRSb3dzKHJlc291cmNlcyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzZXRFcnJvck1lc3NhZ2UobWVzc2FnZUZyb21FcnJvcihlcnJvcikpO1xuICAgICAgfVxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH0sIFtpbnRlcm5hbFNlbGVjdGVkVVJJLCBpc0xvYWRpbmcsIHJlc291cmNlUGlja2VyRGF0YSwgcXVlcnlUeXBlXSk7XG5cbiAgdXNlRWZmZWN0T25jZSgoKSA9PiB7XG4gICAgbG9hZEluaXRpYWxEYXRhKCk7XG4gIH0pO1xuXG4gIC8vIHNldCBzZWxlY3RlZCByb3cgZGF0YSB3aGVuZXZlciByb3cgb3Igc2VsZWN0aW9uIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWludGVybmFsU2VsZWN0ZWRVUkkpIHtcbiAgICAgIHNldFNlbGVjdGVkUm93cyhbXSk7XG4gICAgfVxuXG4gICAgY29uc3QgZm91bmQgPSBpbnRlcm5hbFNlbGVjdGVkVVJJICYmIGZpbmRSb3cocm93cywgaW50ZXJuYWxTZWxlY3RlZFVSSSk7XG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICByZXR1cm4gc2V0U2VsZWN0ZWRSb3dzKFtcbiAgICAgICAge1xuICAgICAgICAgIC4uLmZvdW5kLFxuICAgICAgICAgIGNoaWxkcmVuOiB1bmRlZmluZWQsXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICB9XG4gIH0sIFtpbnRlcm5hbFNlbGVjdGVkVVJJLCByb3dzXSk7XG5cbiAgLy8gUmVxdWVzdCByZXNvdXJjZXMgZm9yIGFuIGV4cGFuZGVkIHJlc291cmNlIGdyb3VwXG4gIGNvbnN0IHJlcXVlc3ROZXN0ZWRSb3dzID0gdXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKHBhcmVudFJvdzogUmVzb3VyY2VSb3cpID0+IHtcbiAgICAgIC8vIGNsZWFyIGVycm9yIG1lc3NhZ2UgKGFsc28gd2hlbiBsb2FkaW5nIGNhY2hlZCByZXNvdXJjZXMpXG4gICAgICBzZXRFcnJvck1lc3NhZ2UodW5kZWZpbmVkKTtcblxuICAgICAgLy8gSWYgd2UgYWxyZWFkeSBoYXZlIGNoaWxkcmVuLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWZldGNoIHRoZW0uXG4gICAgICBpZiAocGFyZW50Um93LmNoaWxkcmVuPy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBuZXN0ZWRSb3dzID0gYXdhaXQgcmVzb3VyY2VQaWNrZXJEYXRhLmZldGNoQW5kQXBwZW5kTmVzdGVkUm93KHJvd3MsIHBhcmVudFJvdywgcXVlcnlUeXBlKTtcbiAgICAgICAgc2V0Um93cyhuZXN0ZWRSb3dzKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHNldEVycm9yTWVzc2FnZShtZXNzYWdlRnJvbUVycm9yKGVycm9yKSk7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3Jlc291cmNlUGlja2VyRGF0YSwgcm93cywgcXVlcnlUeXBlXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZVNlbGVjdGlvbkNoYW5nZWQgPSB1c2VDYWxsYmFjaygocm93OiBSZXNvdXJjZVJvdywgaXNTZWxlY3RlZDogYm9vbGVhbikgPT4ge1xuICAgIGlzU2VsZWN0ZWQgPyBzZXRJbnRlcm5hbFNlbGVjdGVkVVJJKHJvdy51cmkpIDogc2V0SW50ZXJuYWxTZWxlY3RlZFVSSSh1bmRlZmluZWQpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgaGFuZGxlQXBwbHkgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgb25BcHBseShpbnRlcm5hbFNlbGVjdGVkVVJJKTtcbiAgfSwgW2ludGVybmFsU2VsZWN0ZWRVUkksIG9uQXBwbHldKTtcblxuICBjb25zdCBoYW5kbGVTZWFyY2ggPSB1c2VDYWxsYmFjayhcbiAgICBhc3luYyAoc2VhcmNoV29yZDogc3RyaW5nKSA9PiB7XG4gICAgICAvLyBjbGVhciBlcnJvcnMgYW5kIHdhcm5pbmdzXG4gICAgICBzZXRFcnJvck1lc3NhZ2UodW5kZWZpbmVkKTtcbiAgICAgIHNldFNob3VsZFNob3dMaW1pdEZsYWcoZmFsc2UpO1xuXG4gICAgICBpZiAoIXNlYXJjaFdvcmQpIHtcbiAgICAgICAgbG9hZEluaXRpYWxEYXRhKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgICAgICBjb25zdCBzZWFyY2hSZXN1bHRzID0gYXdhaXQgcmVzb3VyY2VQaWNrZXJEYXRhLnNlYXJjaChzZWFyY2hXb3JkLCBxdWVyeVR5cGUpO1xuICAgICAgICBzZXRSb3dzKHNlYXJjaFJlc3VsdHMpO1xuICAgICAgICBpZiAoc2VhcmNoUmVzdWx0cy5sZW5ndGggPj0gcmVzb3VyY2VQaWNrZXJEYXRhLnJlc3VsdExpbWl0KSB7XG4gICAgICAgICAgc2V0U2hvdWxkU2hvd0xpbWl0RmxhZyh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHNldEVycm9yTWVzc2FnZShtZXNzYWdlRnJvbUVycm9yKGVycikpO1xuICAgICAgfVxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICB9LFxuICAgIFtsb2FkSW5pdGlhbERhdGEsIHJlc291cmNlUGlja2VyRGF0YSwgcXVlcnlUeXBlXVxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxTZWFyY2ggc2VhcmNoRm49e2hhbmRsZVNlYXJjaH0gLz5cbiAgICAgIHtzaG91bGRTaG93TGltaXRGbGFnID8gKFxuICAgICAgICA8cCBjbGFzc05hbWU9e3N0eWxlcy5yZXN1bHRMaW1pdH0+U2hvd2luZyBmaXJzdCB7cmVzb3VyY2VQaWNrZXJEYXRhLnJlc3VsdExpbWl0fSByZXN1bHRzPC9wPlxuICAgICAgKSA6IChcbiAgICAgICAgPFNwYWNlIHY9ezJ9IC8+XG4gICAgICApfVxuXG4gICAgICA8dGFibGUgY2xhc3NOYW1lPXtzdHlsZXMudGFibGV9PlxuICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgPHRyIGNsYXNzTmFtZT17Y3goc3R5bGVzLnJvdywgc3R5bGVzLmhlYWRlcil9PlxuICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT17c3R5bGVzLmNlbGx9PlNjb3BlPC90ZD5cbiAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9e3N0eWxlcy5jZWxsfT5UeXBlPC90ZD5cbiAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9e3N0eWxlcy5jZWxsfT5Mb2NhdGlvbjwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90aGVhZD5cbiAgICAgIDwvdGFibGU+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMudGFibGVTY3JvbGxlcn0+XG4gICAgICAgIDx0YWJsZSBjbGFzc05hbWU9e3N0eWxlcy50YWJsZX0+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAge2lzTG9hZGluZyAmJiAoXG4gICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9e2N4KHN0eWxlcy5yb3cpfT5cbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPXtzdHlsZXMuY2VsbH0+XG4gICAgICAgICAgICAgICAgICA8TG9hZGluZ1BsYWNlaG9sZGVyIHRleHQ9eydMb2FkaW5nLi4uJ30gLz5cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIHshaXNMb2FkaW5nICYmIHJvd3MubGVuZ3RoID09PSAwICYmIChcbiAgICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT17Y3goc3R5bGVzLnJvdyl9PlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9e3N0eWxlcy5jZWxsfSBhcmlhLWxpdmU9XCJwb2xpdGVcIj5cbiAgICAgICAgICAgICAgICAgIE5vIHJlc291cmNlcyBmb3VuZFxuICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgeyFpc0xvYWRpbmcgJiZcbiAgICAgICAgICAgICAgcm93cy5tYXAoKHJvdykgPT4gKFxuICAgICAgICAgICAgICAgIDxOZXN0ZWRSb3dcbiAgICAgICAgICAgICAgICAgIGtleT17cm93LnVyaX1cbiAgICAgICAgICAgICAgICAgIHJvdz17cm93fVxuICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dzPXtzZWxlY3RlZFJvd3N9XG4gICAgICAgICAgICAgICAgICBsZXZlbD17MH1cbiAgICAgICAgICAgICAgICAgIHJlcXVlc3ROZXN0ZWRSb3dzPXtyZXF1ZXN0TmVzdGVkUm93c31cbiAgICAgICAgICAgICAgICAgIG9uUm93U2VsZWN0ZWRDaGFuZ2U9e2hhbmRsZVNlbGVjdGlvbkNoYW5nZWR9XG4gICAgICAgICAgICAgICAgICBzZWxlY3RhYmxlRW50cnlUeXBlcz17c2VsZWN0YWJsZUVudHJ5VHlwZXN9XG4gICAgICAgICAgICAgICAgICBzY3JvbGxJbnRvVmlldz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApKX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMuc2VsZWN0aW9uRm9vdGVyfT5cbiAgICAgICAge3NlbGVjdGVkUm93cy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPGg1PlNlbGVjdGlvbjwvaDU+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMudGFibGVTY3JvbGxlcn0+XG4gICAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9e3N0eWxlcy50YWJsZX0+XG4gICAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgICAge3NlbGVjdGVkUm93cy5tYXAoKHJvdykgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8TmVzdGVkUm93XG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtyb3cudXJpfVxuICAgICAgICAgICAgICAgICAgICAgIHJvdz17cm93fVxuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUm93cz17c2VsZWN0ZWRSb3dzfVxuICAgICAgICAgICAgICAgICAgICAgIGxldmVsPXswfVxuICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3ROZXN0ZWRSb3dzPXtyZXF1ZXN0TmVzdGVkUm93c31cbiAgICAgICAgICAgICAgICAgICAgICBvblJvd1NlbGVjdGVkQ2hhbmdlPXtoYW5kbGVTZWxlY3Rpb25DaGFuZ2VkfVxuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGFibGVFbnRyeVR5cGVzPXtzZWxlY3RhYmxlRW50cnlUeXBlc31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxTcGFjZSB2PXsyfSAvPlxuICAgICAgICAgIDwvPlxuICAgICAgICApfVxuXG4gICAgICAgIDxDb2xsYXBzZVxuICAgICAgICAgIGNvbGxhcHNpYmxlXG4gICAgICAgICAgbGFiZWw9XCJBZHZhbmNlZFwiXG4gICAgICAgICAgaXNPcGVuPXtpc0FkdmFuY2VkT3Blbn1cbiAgICAgICAgICBvblRvZ2dsZT17KCkgPT4gc2V0SXNBZHZhbmNlZE9wZW4oIWlzQWR2YW5jZWRPcGVuKX1cbiAgICAgICAgPlxuICAgICAgICAgIDxMYWJlbCBodG1sRm9yPXtgaW5wdXQtJHtpbnRlcm5hbFNlbGVjdGVkVVJJfWB9PlxuICAgICAgICAgICAgPGg2PlxuICAgICAgICAgICAgICBSZXNvdXJjZSBVUkl7JyAnfVxuICAgICAgICAgICAgICA8VG9vbHRpcFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ9e1xuICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgTWFudWFsbHkgZWRpdCB0aGV7JyAnfVxuICAgICAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9henVyZS1tb25pdG9yL2xvZ3MvbG9nLXN0YW5kYXJkLWNvbHVtbnMjX3Jlc291cmNlaWRcIlxuICAgICAgICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSB1cmkueycgJ31cbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgICBTdXBwb3J0cyB0aGUgdXNlIG9mIG11bHRpcGxlIHRlbXBsYXRlIHZhcmlhYmxlcyAoZXg6IC9zdWJzY3JpcHRpb25zLyRzdWJJZC9yZXNvdXJjZUdyb3Vwcy8kcmcpXG4gICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50PVwicmlnaHRcIlxuICAgICAgICAgICAgICAgIGludGVyYWN0aXZlPXt0cnVlfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEljb24gbmFtZT1cImluZm8tY2lyY2xlXCIgLz5cbiAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgPC9oNj5cbiAgICAgICAgICA8L0xhYmVsPlxuICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgaWQ9e2BpbnB1dC0ke2ludGVybmFsU2VsZWN0ZWRVUkl9YH1cbiAgICAgICAgICAgIHZhbHVlPXtpbnRlcm5hbFNlbGVjdGVkVVJJfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudCkgPT4gc2V0SW50ZXJuYWxTZWxlY3RlZFVSSShldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiZXg6IC9zdWJzY3JpcHRpb25zLyRzdWJJZFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8U3BhY2Ugdj17Mn0gLz5cbiAgICAgICAgPC9Db2xsYXBzZT5cbiAgICAgICAgPFNwYWNlIHY9ezJ9IC8+XG5cbiAgICAgICAgPEJ1dHRvbiBkaXNhYmxlZD17ISFlcnJvck1lc3NhZ2V9IG9uQ2xpY2s9e2hhbmRsZUFwcGx5fT5cbiAgICAgICAgICBBcHBseVxuICAgICAgICA8L0J1dHRvbj5cblxuICAgICAgICA8U3BhY2UgbGF5b3V0PVwiaW5saW5lXCIgaD17MX0gLz5cblxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e29uQ2FuY2VsfSB2YXJpYW50PVwic2Vjb25kYXJ5XCI+XG4gICAgICAgICAgQ2FuY2VsXG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHtlcnJvck1lc3NhZ2UgJiYgKFxuICAgICAgICA8PlxuICAgICAgICAgIDxTcGFjZSB2PXsyfSAvPlxuICAgICAgICAgIDxBbGVydCBzZXZlcml0eT1cImVycm9yXCIgdGl0bGU9XCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSByZXF1ZXN0aW5nIHJlc291cmNlcyBmcm9tIEF6dXJlIE1vbml0b3JcIj5cbiAgICAgICAgICAgIHtlcnJvck1lc3NhZ2V9XG4gICAgICAgICAgPC9BbGVydD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVzb3VyY2VQaWNrZXI7XG4iLCJpbXBvcnQgeyBkZWJvdW5jZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgSWNvbiwgSW5wdXQgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmNvbnN0IFNlYXJjaCA9ICh7IHNlYXJjaEZuIH06IHsgc2VhcmNoRm46IChzZWFyY2hQaHJhc2U6IHN0cmluZykgPT4gdm9pZCB9KSA9PiB7XG4gIGNvbnN0IFtzZWFyY2hGaWx0ZXIsIHNldFNlYXJjaEZpbHRlcl0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3QgZGVib3VuY2VkU2VhcmNoID0gdXNlTWVtbygoKSA9PiBkZWJvdW5jZShzZWFyY2hGbiwgNjAwKSwgW3NlYXJjaEZuXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIFN0b3AgdGhlIGludm9jYXRpb24gb2YgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiBhZnRlciB1bm1vdW50aW5nXG4gICAgICBkZWJvdW5jZWRTZWFyY2guY2FuY2VsKCk7XG4gICAgfTtcbiAgfSwgW2RlYm91bmNlZFNlYXJjaF0pO1xuXG4gIHJldHVybiAoXG4gICAgPElucHV0XG4gICAgICBhcmlhLWxhYmVsPVwicmVzb3VyY2Ugc2VhcmNoXCJcbiAgICAgIHByZWZpeD17PEljb24gbmFtZT1cInNlYXJjaFwiIC8+fVxuICAgICAgdmFsdWU9e3NlYXJjaEZpbHRlcn1cbiAgICAgIG9uQ2hhbmdlPXsoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3Qgc2VhcmNoUGhyYXNlID0gZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZTtcbiAgICAgICAgc2V0U2VhcmNoRmlsdGVyKHNlYXJjaFBocmFzZSk7XG4gICAgICAgIGRlYm91bmNlZFNlYXJjaChzZWFyY2hQaHJhc2UpO1xuICAgICAgfX1cbiAgICAgIHBsYWNlaG9sZGVyPVwic2VhcmNoIGZvciBhIHJlc291cmNlXCJcbiAgICAvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VhcmNoO1xuIiwiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gJy4vUmVzb3VyY2VQaWNrZXInO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcblxuaW1wb3J0IHsgR3JhZmFuYVRoZW1lMiB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuXG5jb25zdCBnZXRTdHlsZXMgPSAodGhlbWU6IEdyYWZhbmFUaGVtZTIpID0+ICh7XG4gIHRhYmxlOiBjc3Moe1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgdGFibGVMYXlvdXQ6ICdmaXhlZCcsXG4gIH0pLFxuXG4gIHRhYmxlU2Nyb2xsZXI6IGNzcyh7XG4gICAgbWF4SGVpZ2h0OiAnNTB2aCcsXG4gICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgfSksXG5cbiAgaGVhZGVyOiBjc3Moe1xuICAgIGJhY2tncm91bmQ6IHRoZW1lLmNvbG9ycy5iYWNrZ3JvdW5kLnNlY29uZGFyeSxcbiAgfSksXG5cbiAgcm93OiBjc3Moe1xuICAgIGJvcmRlckJvdHRvbTogYDFweCBzb2xpZCAke3RoZW1lLmNvbG9ycy5ib3JkZXIud2Vha31gLFxuXG4gICAgJyY6bGFzdC1vZi10eXBlJzoge1xuICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IHRoZW1lLmNvbG9ycy5ib3JkZXIubWVkaXVtLFxuICAgIH0sXG4gIH0pLFxuXG4gIGRpc2FibGVkUm93OiBjc3Moe1xuICAgIG9wYWNpdHk6IDAuNSxcbiAgfSksXG5cbiAgY2VsbDogY3NzKHtcbiAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDEsIDEsIDEsIDApLFxuICAgIHdpZHRoOiAnMjUlJyxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICcmOmZpcnN0LW9mLXR5cGUnOiB7XG4gICAgICB3aWR0aDogJzUwJScsXG4gICAgICBwYWRkaW5nOiB0aGVtZS5zcGFjaW5nKDEsIDEsIDEsIDIpLFxuICAgIH0sXG4gIH0pLFxuXG4gIGNvbGxhcHNlQnV0dG9uOiBjc3MoeyBtYXJnaW46IDAgfSksXG5cbiAgbG9hZGluZ0NlbGw6IGNzcyh7XG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgfSksXG5cbiAgc3Bpbm5lcjogY3NzKHtcbiAgICBtYXJnaW5Cb3R0b206IDAsXG4gIH0pLFxuXG4gIG5lc3RlZEVudHJ5OiBjc3Moe1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfSksXG5cbiAgZW50cnlDb250ZW50SXRlbTogY3NzKHtcbiAgICBtYXJnaW46IHRoZW1lLnNwYWNpbmcoMCwgMSwgMCwgMCksXG4gIH0pLFxuXG4gIHRydW5jYXRlZDogY3NzKHtcbiAgICBtaW5XaWR0aDogMCxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICB9KSxcblxuICByZXNvdXJjZUZpZWxkOiBjc3Moe1xuICAgIG1heFdpZHRoOiB0aGVtZS5zcGFjaW5nKDM2KSxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIH0pLFxuXG4gIHJlc291cmNlRmllbGRCdXR0b246IGNzcyh7XG4gICAgcGFkZGluZzogJzdweCcsXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gIH0pLFxuXG4gIG5lc3RlZFJvd0NoZWNrYm94OiBjc3Moe1xuICAgIHpJbmRleDogMCxcbiAgfSksXG5cbiAgc2VsZWN0aW9uRm9vdGVyOiBjc3Moe1xuICAgIHBvc2l0aW9uOiAnc3RpY2t5JyxcbiAgICBib3R0b206IDAsXG4gICAgYmFja2dyb3VuZDogdGhlbWUuY29sb3JzLmJhY2tncm91bmQucHJpbWFyeSxcbiAgICBwYWRkaW5nVG9wOiB0aGVtZS5zcGFjaW5nKDIpLFxuICB9KSxcblxuICBsb2FkaW5nV3JhcHBlcjogY3NzKHtcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIHBhZGRpbmdUb3A6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgcGFkZGluZ0JvdHRvbTogdGhlbWUuc3BhY2luZygyKSxcbiAgICBjb2xvcjogdGhlbWUuY29sb3JzLnRleHQuc2Vjb25kYXJ5LFxuICB9KSxcblxuICByZXN1bHRMaW1pdDogY3NzKHtcbiAgICBtYXJnaW46ICc0cHggMCcsXG4gICAgZm9udFN0eWxlOiAnaXRhbGljJyxcbiAgfSksXG5cbiAgbW9kYWw6IGNzcyh7XG4gICAgd2lkdGg6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcy5sZyxcbiAgfSksXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0U3R5bGVzO1xuIiwiZXhwb3J0IGVudW0gUmVzb3VyY2VSb3dUeXBlIHtcbiAgU3Vic2NyaXB0aW9uID0gJ1N1YnNjcmlwdGlvbicsXG4gIFJlc291cmNlR3JvdXAgPSAnUmVzb3VyY2VHcm91cCcsXG4gIFJlc291cmNlID0gJ1Jlc291cmNlJyxcbiAgVmFyaWFibGVHcm91cCA9ICdUZW1wbGF0ZVZhcmlhYmxlR3JvdXAnLFxuICBWYXJpYWJsZSA9ICdUZW1wbGF0ZVZhcmlhYmxlJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZVJvdyB7XG4gIGlkOiBzdHJpbmc7IC8vIGF6dXJlJ3MgcmF3IGRhdGEgaWQgdXN1YWxseSBwYXNzZXMgYWxvbmcgYSB1cmkgKGV4Y2VwdCBpbiB0aGUgY2FzZSBvZiBzdWJzY3JpcHRpb25zKSwgdG8gbWFrZSB0aGluZ3MgbGVzcyBjb25mdXNpbmcgZm9yIG91cnNlbHZlcyB3ZSBwYXJzZSB0aGUgaWQgc3RyaW5nIG91dCBvZiB0aGUgdXJpIG9yIHZpY2UgdmVyc2FcbiAgdXJpOiBzdHJpbmc7IC8vIGV4OiAvc3Vic2NyaXB0aW9ucy9zdWJpZDEyM1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IFJlc291cmNlUm93VHlwZTtcbiAgdHlwZUxhYmVsOiBzdHJpbmc7XG4gIGxvY2F0aW9uPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlc291cmNlUm93R3JvdXA7XG59XG5cbmV4cG9ydCB0eXBlIFJlc291cmNlUm93R3JvdXAgPSBSZXNvdXJjZVJvd1tdO1xuIiwiaW1wb3J0IHByb2R1Y2UgZnJvbSAnaW1tZXInO1xuXG5pbXBvcnQgeyBSZXNvdXJjZVJvdywgUmVzb3VyY2VSb3dHcm91cCB9IGZyb20gJy4vdHlwZXMnO1xuXG4vLyBUaGlzIHJlZ2V4IG1hdGNoZXMgVVJJcyByZXByZXNlbnRpbmc6XG4vLyAgLSBzdWJzY3JpcHRpb25zOiAvc3Vic2NyaXB0aW9ucy80NDY5MzgwMS02ZWU2LTQ5ZGUtOWIyZC05MTA2OTcyZjk1NzJcbi8vICAtIHJlc291cmNlIGdyb3VwczogL3N1YnNjcmlwdGlvbnMvNDQ2OTM4MDEtNmVlNi00OWRlLTliMmQtOTEwNjk3MmY5NTcyL3Jlc291cmNlR3JvdXBzL2Nsb3VkLWRhdGFzb3VyY2VzXG4vLyAgLSByZXNvdXJjZXM6IC9zdWJzY3JpcHRpb25zLzQ0NjkzODAxLTZlZTYtNDlkZS05YjJkLTkxMDY5NzJmOTU3Mi9yZXNvdXJjZUdyb3Vwcy9jbG91ZC1kYXRhc291cmNlcy9wcm92aWRlcnMvTWljcm9zb2Z0LkNvbXB1dGUvdmlydHVhbE1hY2hpbmVzL0dpdGh1YlRlc3REYXRhVk1cbmNvbnN0IFJFU09VUkNFX1VSSV9SRUdFWCA9XG4gIC9cXC9zdWJzY3JpcHRpb25zXFwvKD88c3Vic2NyaXB0aW9uSUQ+W14vXSspKD86XFwvcmVzb3VyY2VHcm91cHNcXC8oPzxyZXNvdXJjZUdyb3VwPlteL10rKSg/OlxcL3Byb3ZpZGVycy4rXFwvKD88cmVzb3VyY2U+W14vXSspKT8pPy87XG5cbnR5cGUgUmVnZXhHcm91cHMgPSBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+O1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSZXNvdXJjZVVSSShyZXNvdXJjZVVSSTogc3RyaW5nKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBSRVNPVVJDRV9VUklfUkVHRVguZXhlYyhyZXNvdXJjZVVSSSk7XG4gIGNvbnN0IGdyb3VwczogUmVnZXhHcm91cHMgPSBtYXRjaGVzPy5ncm91cHMgPz8ge307XG4gIGNvbnN0IHsgc3Vic2NyaXB0aW9uSUQsIHJlc291cmNlR3JvdXAsIHJlc291cmNlIH0gPSBncm91cHM7XG5cbiAgaWYgKCFzdWJzY3JpcHRpb25JRCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4geyBzdWJzY3JpcHRpb25JRCwgcmVzb3VyY2VHcm91cCwgcmVzb3VyY2UgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzR1VJRGlzaChpbnB1dDogc3RyaW5nKSB7XG4gIHJldHVybiAhIWlucHV0Lm1hdGNoKC9eW0EtWjAtOV0rL2kpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZFJvdyhyb3dzOiBSZXNvdXJjZVJvd0dyb3VwLCB1cmk6IHN0cmluZyk6IFJlc291cmNlUm93IHwgdW5kZWZpbmVkIHtcbiAgZm9yIChjb25zdCByb3cgb2Ygcm93cykge1xuICAgIGlmIChyb3cudXJpLnRvTG93ZXJDYXNlKCkgPT09IHVyaS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gcm93O1xuICAgIH1cblxuICAgIGlmIChyb3cuY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGZpbmRSb3cocm93LmNoaWxkcmVuLCB1cmkpO1xuXG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJlc291cmNlcyhyb3dzOiBSZXNvdXJjZVJvd0dyb3VwLCB0YXJnZXRQYXJlbnRJZDogc3RyaW5nLCBuZXdSZXNvdXJjZXM6IFJlc291cmNlUm93R3JvdXApIHtcbiAgcmV0dXJuIHByb2R1Y2Uocm93cywgKGRyYWZ0U3RhdGUpID0+IHtcbiAgICBjb25zdCBkcmFmdFJvdyA9IGZpbmRSb3coZHJhZnRTdGF0ZSwgdGFyZ2V0UGFyZW50SWQpO1xuXG4gICAgLy8gd2UgY2FuJ3QgZmluZCB0aGUgc2VsZWN0ZWQgcmVzb3VyY2UgaW4gb3VyIGxpc3Qgb2YgcmVzb3VyY2VzLFxuICAgIC8vIHByb2JhYmx5IG1lYW5zIHVzZXIgaGFzIGVpdGhlciBtaXN0eXBlZCBpbiB0aGUgaW5wdXQgZmllbGRcbiAgICAvLyBvciBpcyB1c2luZyB0ZW1wbGF0ZSB2YXJpYWJsZXMuXG4gICAgLy8gZWl0aGVyIHdheSBubyBuZWVkIHRvIHRocm93LCBqdXN0IHNob3cgdGhhdCBub25lIG9mIHRoZSByZXNvdXJjZXMgYXJlIGNoZWNrZWRcbiAgICBpZiAoIWRyYWZ0Um93KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZHJhZnRSb3cuY2hpbGRyZW4gPSBuZXdSZXNvdXJjZXM7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHsgY3NzLCBjeCB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBHcmFmYW5hVGhlbWUyIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5pbXBvcnQgeyBzdHlsZXNGYWN0b3J5LCB1c2VUaGVtZTIgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3BhY2VQcm9wcyB7XG4gIHY/OiBudW1iZXI7XG4gIGg/OiBudW1iZXI7XG4gIGxheW91dD86ICdibG9jaycgfCAnaW5saW5lJztcbn1cblxuZXhwb3J0IGNvbnN0IFNwYWNlID0gKHByb3BzOiBTcGFjZVByb3BzKSA9PiB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUyKCk7XG4gIGNvbnN0IHN0eWxlcyA9IGdldFN0eWxlcyh0aGVtZSwgcHJvcHMpO1xuXG4gIHJldHVybiA8c3BhbiBjbGFzc05hbWU9e2N4KHN0eWxlcy53cmFwcGVyKX0gLz47XG59O1xuXG5TcGFjZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHY6IDAsXG4gIGg6IDAsXG4gIGxheW91dDogJ2Jsb2NrJyxcbn07XG5cbmNvbnN0IGdldFN0eWxlcyA9IHN0eWxlc0ZhY3RvcnkoKHRoZW1lOiBHcmFmYW5hVGhlbWUyLCBwcm9wczogU3BhY2VQcm9wcykgPT4gKHtcbiAgd3JhcHBlcjogY3NzKFtcbiAgICB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcocHJvcHMuaCA/PyAwKSxcbiAgICAgIHBhZGRpbmdCb3R0b206IHRoZW1lLnNwYWNpbmcocHJvcHMudiA/PyAwKSxcbiAgICB9LFxuICAgIHByb3BzLmxheW91dCA9PT0gJ2lubGluZScgJiYge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgfSxcbiAgICBwcm9wcy5sYXlvdXQgPT09ICdibG9jaycgJiYge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICB9LFxuICBdKSxcbn0pKTtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgU2VsZWN0YWJsZVZhbHVlIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5pbXBvcnQgeyBTZWxlY3QsIE11bHRpU2VsZWN0IH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5pbXBvcnQgeyBBenVyZU1vbml0b3JRdWVyeSwgQXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHMsIEF6dXJlTW9uaXRvck9wdGlvbiwgQXp1cmVRdWVyeVR5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBmaW5kT3B0aW9ucyB9IGZyb20gJy4uL3V0aWxzL2NvbW1vbic7XG5cbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi9GaWVsZCc7XG5cbmludGVyZmFjZSBTdWJzY3JpcHRpb25GaWVsZFByb3BzIGV4dGVuZHMgQXp1cmVRdWVyeUVkaXRvckZpZWxkUHJvcHMge1xuICBvblF1ZXJ5Q2hhbmdlOiAobmV3UXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KSA9PiB2b2lkO1xuICBzdWJzY3JpcHRpb25zOiBBenVyZU1vbml0b3JPcHRpb25bXTtcbiAgbXVsdGlTZWxlY3Q/OiBib29sZWFuO1xufVxuXG5jb25zdCBTdWJzY3JpcHRpb25GaWVsZDogUmVhY3QuRkM8U3Vic2NyaXB0aW9uRmllbGRQcm9wcz4gPSAoe1xuICBxdWVyeSxcbiAgc3Vic2NyaXB0aW9ucyxcbiAgdmFyaWFibGVPcHRpb25Hcm91cCxcbiAgb25RdWVyeUNoYW5nZSxcbiAgbXVsdGlTZWxlY3QgPSBmYWxzZSxcbn0pID0+IHtcbiAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2soXG4gICAgKGNoYW5nZTogU2VsZWN0YWJsZVZhbHVlPHN0cmluZz4pID0+IHtcbiAgICAgIGlmICghY2hhbmdlLnZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IG5ld1F1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSA9IHtcbiAgICAgICAgLi4ucXVlcnksXG4gICAgICAgIHN1YnNjcmlwdGlvbjogY2hhbmdlLnZhbHVlLFxuICAgICAgfTtcblxuICAgICAgaWYgKHF1ZXJ5LnF1ZXJ5VHlwZSA9PT0gQXp1cmVRdWVyeVR5cGUuQXp1cmVNb25pdG9yKSB7XG4gICAgICAgIG5ld1F1ZXJ5LmF6dXJlTW9uaXRvciA9IHtcbiAgICAgICAgICAuLi5uZXdRdWVyeS5henVyZU1vbml0b3IsXG4gICAgICAgICAgcmVzb3VyY2VHcm91cDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1ldHJpY0RlZmluaXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgICBtZXRyaWNOYW1lc3BhY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZXNvdXJjZU5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtZXRyaWNOYW1lOiB1bmRlZmluZWQsXG4gICAgICAgICAgYWdncmVnYXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgICB0aW1lR3JhaW46ICcnLFxuICAgICAgICAgIGRpbWVuc2lvbkZpbHRlcnM6IFtdLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvblF1ZXJ5Q2hhbmdlKG5ld1F1ZXJ5KTtcbiAgICB9LFxuICAgIFtxdWVyeSwgb25RdWVyeUNoYW5nZV1cbiAgKTtcblxuICBjb25zdCBvblN1YnNjcmlwdGlvbnNDaGFuZ2UgPSB1c2VDYWxsYmFjayhcbiAgICAoY2hhbmdlOiBBcnJheTxTZWxlY3RhYmxlVmFsdWU8c3RyaW5nPj4pID0+IHtcbiAgICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcXVlcnkuc3Vic2NyaXB0aW9ucyA9IGNoYW5nZS5tYXAoKGMpID0+IGMudmFsdWUgPz8gJycpO1xuXG4gICAgICBvblF1ZXJ5Q2hhbmdlKHF1ZXJ5KTtcbiAgICB9LFxuICAgIFtxdWVyeSwgb25RdWVyeUNoYW5nZV1cbiAgKTtcblxuICBjb25zdCBvcHRpb25zID0gdXNlTWVtbygoKSA9PiBbLi4uc3Vic2NyaXB0aW9ucywgdmFyaWFibGVPcHRpb25Hcm91cF0sIFtzdWJzY3JpcHRpb25zLCB2YXJpYWJsZU9wdGlvbkdyb3VwXSk7XG5cbiAgcmV0dXJuIG11bHRpU2VsZWN0ID8gKFxuICAgIDxGaWVsZCBsYWJlbD1cIlN1YnNjcmlwdGlvbnNcIj5cbiAgICAgIDxNdWx0aVNlbGVjdFxuICAgICAgICBpc0NsZWFyYWJsZVxuICAgICAgICB2YWx1ZT17ZmluZE9wdGlvbnMoWy4uLnN1YnNjcmlwdGlvbnMsIC4uLnZhcmlhYmxlT3B0aW9uR3JvdXAub3B0aW9uc10sIHF1ZXJ5LnN1YnNjcmlwdGlvbnMpfVxuICAgICAgICBpbnB1dElkPVwiYXp1cmUtbW9uaXRvci1zdWJzY3JpcHRpb25zLWZpZWxkXCJcbiAgICAgICAgb25DaGFuZ2U9e29uU3Vic2NyaXB0aW9uc0NoYW5nZX1cbiAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgd2lkdGg9ezM4fVxuICAgICAgLz5cbiAgICA8L0ZpZWxkPlxuICApIDogKFxuICAgIDxGaWVsZCBsYWJlbD1cIlN1YnNjcmlwdGlvblwiPlxuICAgICAgPFNlbGVjdFxuICAgICAgICB2YWx1ZT17cXVlcnkuc3Vic2NyaXB0aW9ufVxuICAgICAgICBpbnB1dElkPVwiYXp1cmUtbW9uaXRvci1zdWJzY3JpcHRpb25zLWZpZWxkXCJcbiAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgICAgd2lkdGg9ezM4fVxuICAgICAgICBhbGxvd0N1c3RvbVZhbHVlXG4gICAgICAvPlxuICAgIDwvRmllbGQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdWJzY3JpcHRpb25GaWVsZDtcbiIsImltcG9ydCBSZWFjdCwgeyBDaGFuZ2VFdmVudCwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFNlbGVjdGFibGVWYWx1ZSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgQWxlcnQsIElubGluZUZpZWxkLCBJbnB1dCwgU2VsZWN0IH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5pbXBvcnQgRGF0YVNvdXJjZSBmcm9tICcuLi8uLi9kYXRhc291cmNlJztcbmltcG9ydCB7IG1pZ3JhdGVTdHJpbmdRdWVyaWVzVG9PYmplY3RRdWVyaWVzIH0gZnJvbSAnLi4vLi4vZ3JhZmFuYVRlbXBsYXRlVmFyaWFibGVGbnMnO1xuaW1wb3J0IHsgQXp1cmVNb25pdG9yUXVlcnksIEF6dXJlUXVlcnlUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHVzZUxhc3RFcnJvciBmcm9tICcuLi8uLi91dGlscy91c2VMYXN0RXJyb3InO1xuaW1wb3J0IExvZ3NRdWVyeUVkaXRvciBmcm9tICcuLi9Mb2dzUXVlcnlFZGl0b3InO1xuaW1wb3J0IHsgU3BhY2UgfSBmcm9tICcuLi9TcGFjZSc7XG5cbmNvbnN0IEFaVVJFX1FVRVJZX1ZBUklBQkxFX1RZUEVfT1BUSU9OUyA9IFtcbiAgeyBsYWJlbDogJ0dyYWZhbmEgUXVlcnkgRnVuY3Rpb24nLCB2YWx1ZTogQXp1cmVRdWVyeVR5cGUuR3JhZmFuYVRlbXBsYXRlVmFyaWFibGVGbiB9LFxuICB7IGxhYmVsOiAnTG9ncycsIHZhbHVlOiBBenVyZVF1ZXJ5VHlwZS5Mb2dBbmFseXRpY3MgfSxcbl07XG5cbmNvbnN0IEdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm5JbnB1dCA9ICh7XG4gIHF1ZXJ5LFxuICB1cGRhdGVRdWVyeSxcbiAgZGF0YXNvdXJjZSxcbn06IHtcbiAgcXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5O1xuICB1cGRhdGVRdWVyeTogKHZhbDogQXp1cmVNb25pdG9yUXVlcnkpID0+IHZvaWQ7XG4gIGRhdGFzb3VyY2U6IERhdGFTb3VyY2U7XG59KSA9PiB7XG4gIGNvbnN0IFtpbnB1dFZhbCwgc2V0SW5wdXRWYWxdID0gdXNlU3RhdGUoJycpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldElucHV0VmFsKHF1ZXJ5LmdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm4/LnJhd1F1ZXJ5IHx8ICcnKTtcbiAgfSwgW3F1ZXJ5LmdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm4/LnJhd1F1ZXJ5XSk7XG5cbiAgY29uc3Qgb25SdW5RdWVyeSA9IHVzZUNhbGxiYWNrKFxuICAgIChuZXdRdWVyeTogc3RyaW5nKSA9PiB7XG4gICAgICBtaWdyYXRlU3RyaW5nUXVlcmllc1RvT2JqZWN0UXVlcmllcyhuZXdRdWVyeSwgeyBkYXRhc291cmNlIH0pLnRoZW4oKHVwZGF0ZWRRdWVyeSkgPT4ge1xuICAgICAgICBpZiAodXBkYXRlZFF1ZXJ5LnF1ZXJ5VHlwZSA9PT0gQXp1cmVRdWVyeVR5cGUuR3JhZmFuYVRlbXBsYXRlVmFyaWFibGVGbikge1xuICAgICAgICAgIHVwZGF0ZVF1ZXJ5KHVwZGF0ZWRRdWVyeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBkYXRlUXVlcnkoe1xuICAgICAgICAgICAgLi4ucXVlcnksXG4gICAgICAgICAgICBncmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuOiB7XG4gICAgICAgICAgICAgIGtpbmQ6ICdVbmtub3duUXVlcnknLFxuICAgICAgICAgICAgICByYXdRdWVyeTogbmV3UXVlcnksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtkYXRhc291cmNlLCBxdWVyeSwgdXBkYXRlUXVlcnldXG4gICk7XG5cbiAgY29uc3Qgb25DaGFuZ2UgPSAoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgc2V0SW5wdXRWYWwoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxJbmxpbmVGaWVsZCBsYWJlbD1cIkdyYWZhbmEgdGVtcGxhdGUgdmFyaWFibGUgZnVuY3Rpb25cIj5cbiAgICAgIDxJbnB1dFxuICAgICAgICBwbGFjZWhvbGRlcj17J3R5cGUgYSBncmFmYW5hIHRlbXBsYXRlIHZhcmlhYmxlIGZ1bmN0aW9uLCBleDogU3Vic2NyaXB0aW9ucygpJ31cbiAgICAgICAgdmFsdWU9e2lucHV0VmFsfVxuICAgICAgICBvbkNoYW5nZT17b25DaGFuZ2V9XG4gICAgICAgIG9uQmx1cj17KCkgPT4gb25SdW5RdWVyeShpbnB1dFZhbCl9XG4gICAgICAvPlxuICAgIDwvSW5saW5lRmllbGQ+XG4gICk7XG59O1xuXG50eXBlIFByb3BzID0ge1xuICBxdWVyeTogQXp1cmVNb25pdG9yUXVlcnkgfCBzdHJpbmc7XG4gIG9uQ2hhbmdlOiAocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KSA9PiB2b2lkO1xuICBkYXRhc291cmNlOiBEYXRhU291cmNlO1xufTtcblxuY29uc3QgVmFyaWFibGVFZGl0b3IgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRRdWVyeTogQXp1cmVNb25pdG9yUXVlcnkgPSB7XG4gICAgcmVmSWQ6ICdBJyxcbiAgICBxdWVyeVR5cGU6IEF6dXJlUXVlcnlUeXBlLkdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm4sXG4gIH07XG4gIGNvbnN0IFtxdWVyeSwgc2V0UXVlcnldID0gdXNlU3RhdGUoZGVmYXVsdFF1ZXJ5KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIG1pZ3JhdGVTdHJpbmdRdWVyaWVzVG9PYmplY3RRdWVyaWVzKHByb3BzLnF1ZXJ5LCB7IGRhdGFzb3VyY2U6IHByb3BzLmRhdGFzb3VyY2UgfSkudGhlbigobWlncmF0ZWRRdWVyeSkgPT4ge1xuICAgICAgc2V0UXVlcnkobWlncmF0ZWRRdWVyeSk7XG4gICAgfSk7XG4gIH0sIFtwcm9wcy5xdWVyeSwgcHJvcHMuZGF0YXNvdXJjZV0pO1xuXG4gIGNvbnN0IG9uUXVlcnlUeXBlQ2hhbmdlID0gKHNlbGVjdGFibGVWYWx1ZTogU2VsZWN0YWJsZVZhbHVlKSA9PiB7XG4gICAgaWYgKHNlbGVjdGFibGVWYWx1ZS52YWx1ZSkge1xuICAgICAgc2V0UXVlcnkoe1xuICAgICAgICAuLi5xdWVyeSxcbiAgICAgICAgcXVlcnlUeXBlOiBzZWxlY3RhYmxlVmFsdWUudmFsdWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uTG9nc1F1ZXJ5Q2hhbmdlID0gKHF1ZXJ5Q2hhbmdlOiBBenVyZU1vbml0b3JRdWVyeSkgPT4ge1xuICAgIHNldFF1ZXJ5KHF1ZXJ5Q2hhbmdlKTtcblxuICAgIC8vIG9ubHkgaGl0IGJhY2tlbmQgaWYgdGhlcmUncyBzb21ldGhpbmcgdG8gcXVlcnkgKHByZXZlbnRzIGVycm9yIHdoZW4gc2VsZWN0aW5nIHRoZSByZXNvdXJjZSBiZWZvcmUgcGluZ2luZyBhIHF1ZXJ5KVxuICAgIGlmIChxdWVyeUNoYW5nZS5henVyZUxvZ0FuYWx5dGljcz8ucXVlcnkpIHtcbiAgICAgIHByb3BzLm9uQ2hhbmdlKHF1ZXJ5Q2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgW2Vycm9yTWVzc2FnZSwgc2V0RXJyb3JdID0gdXNlTGFzdEVycm9yKCk7XG5cbiAgY29uc3QgdmFyaWFibGVPcHRpb25Hcm91cCA9IHtcbiAgICBsYWJlbDogJ1RlbXBsYXRlIFZhcmlhYmxlcycsXG4gICAgLy8gVE9ETzogZmlndXJlIG91dCBhIHdheSB0byBmaWx0ZXIgb3V0IHRoZSBjdXJyZW50IHZhcmlhYmxlIGZyb20gdGhlIHZhcmlhYmxlcyBsaXN0XG4gICAgLy8gb3B0aW9uczogcHJvcHMuZGF0YXNvdXJjZS5nZXRWYXJpYWJsZXMoKS5tYXAoKHYpID0+ICh7IGxhYmVsOiB2LCB2YWx1ZTogdiB9KSksXG4gICAgb3B0aW9uczogW10sXG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPElubGluZUZpZWxkIGxhYmVsPVwiU2VsZWN0IHF1ZXJ5IHR5cGVcIj5cbiAgICAgICAgPFNlbGVjdFxuICAgICAgICAgIGFyaWEtbGFiZWw9XCJzZWxlY3QgcXVlcnkgdHlwZVwiXG4gICAgICAgICAgb25DaGFuZ2U9e29uUXVlcnlUeXBlQ2hhbmdlfVxuICAgICAgICAgIG9wdGlvbnM9e0FaVVJFX1FVRVJZX1ZBUklBQkxFX1RZUEVfT1BUSU9OU31cbiAgICAgICAgICB3aWR0aD17MjV9XG4gICAgICAgICAgdmFsdWU9e3F1ZXJ5LnF1ZXJ5VHlwZX1cbiAgICAgICAgLz5cbiAgICAgIDwvSW5saW5lRmllbGQ+XG4gICAgICB7cXVlcnkucXVlcnlUeXBlID09PSBBenVyZVF1ZXJ5VHlwZS5Mb2dBbmFseXRpY3MgJiYgKFxuICAgICAgICA8PlxuICAgICAgICAgIDxMb2dzUXVlcnlFZGl0b3JcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbklkPXtxdWVyeS5zdWJzY3JpcHRpb259XG4gICAgICAgICAgICBxdWVyeT17cXVlcnl9XG4gICAgICAgICAgICBkYXRhc291cmNlPXtwcm9wcy5kYXRhc291cmNlfVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uTG9nc1F1ZXJ5Q2hhbmdlfVxuICAgICAgICAgICAgdmFyaWFibGVPcHRpb25Hcm91cD17dmFyaWFibGVPcHRpb25Hcm91cH1cbiAgICAgICAgICAgIHNldEVycm9yPXtzZXRFcnJvcn1cbiAgICAgICAgICAgIGhpZGVGb3JtYXRBcz17dHJ1ZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHtlcnJvck1lc3NhZ2UgJiYgKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPFNwYWNlIHY9ezJ9IC8+XG4gICAgICAgICAgICAgIDxBbGVydCBzZXZlcml0eT1cImVycm9yXCIgdGl0bGU9XCJBbiBlcnJvciBvY2N1cnJlZCB3aGlsZSByZXF1ZXN0aW5nIG1ldGFkYXRhIGZyb20gQXp1cmUgTW9uaXRvclwiPlxuICAgICAgICAgICAgICAgIHtlcnJvck1lc3NhZ2V9XG4gICAgICAgICAgICAgIDwvQWxlcnQ+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApfVxuICAgICAgICA8Lz5cbiAgICAgICl9XG4gICAgICB7cXVlcnkucXVlcnlUeXBlID09PSBBenVyZVF1ZXJ5VHlwZS5HcmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuICYmIChcbiAgICAgICAgPEdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm5JbnB1dCBxdWVyeT17cXVlcnl9IHVwZGF0ZVF1ZXJ5PXtwcm9wcy5vbkNoYW5nZX0gZGF0YXNvdXJjZT17cHJvcHMuZGF0YXNvdXJjZX0gLz5cbiAgICAgICl9XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBWYXJpYWJsZUVkaXRvcjtcbiIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJ0BncmFmYW5hL3J1bnRpbWUnO1xuXG5pbXBvcnQge1xuICBBenVyZUF1dGhUeXBlLFxuICBBenVyZUNsb3VkLFxuICBBenVyZUNyZWRlbnRpYWxzLFxuICBBenVyZURhdGFTb3VyY2VJbnN0YW5jZVNldHRpbmdzLFxuICBBenVyZURhdGFTb3VyY2VTZXR0aW5ncyxcbiAgQ29uY2VhbGVkU2VjcmV0LFxufSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgY29uY2VhbGVkOiBDb25jZWFsZWRTZWNyZXQgPSBTeW1ib2woJ0NvbmNlYWxlZCBjbGllbnQgc2VjcmV0Jyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBdXRoVHlwZShvcHRpb25zOiBBenVyZURhdGFTb3VyY2VTZXR0aW5ncyB8IEF6dXJlRGF0YVNvdXJjZUluc3RhbmNlU2V0dGluZ3MpOiBBenVyZUF1dGhUeXBlIHtcbiAgaWYgKCFvcHRpb25zLmpzb25EYXRhLmF6dXJlQXV0aFR5cGUpIHtcbiAgICAvLyBJZiBhdXRoZW50aWNhdGlvbiB0eXBlIGlzbid0IGV4cGxpY2l0bHkgc3BlY2lmaWVkIGFuZCBkYXRhc291cmNlIGhhcyBjbGllbnQgY3JlZGVudGlhbHMsXG4gICAgLy8gdGhlbiB0aGlzIGlzIGV4aXN0aW5nIGRhdGFzb3VyY2Ugd2hpY2ggaXMgY29uZmlndXJlZCBmb3IgYXBwIHJlZ2lzdHJhdGlvbiAoY2xpZW50IHNlY3JldClcbiAgICBpZiAob3B0aW9ucy5qc29uRGF0YS50ZW5hbnRJZCAmJiBvcHRpb25zLmpzb25EYXRhLmNsaWVudElkKSB7XG4gICAgICByZXR1cm4gJ2NsaWVudHNlY3JldCc7XG4gICAgfVxuXG4gICAgLy8gRm9yIG5ld2x5IGNyZWF0ZWQgZGF0YXNvdXJjZSB3aXRoIG5vIGNvbmZpZ3VyYXRpb24sIG1hbmFnZWQgaWRlbnRpdHkgaXMgdGhlIGRlZmF1bHQgYXV0aGVudGljYXRpb24gdHlwZVxuICAgIC8vIGlmIHRoZXkgYXJlIGVuYWJsZWQgaW4gR3JhZmFuYSBjb25maWdcbiAgICByZXR1cm4gY29uZmlnLmF6dXJlLm1hbmFnZWRJZGVudGl0eUVuYWJsZWQgPyAnbXNpJyA6ICdjbGllbnRzZWNyZXQnO1xuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnMuanNvbkRhdGEuYXp1cmVBdXRoVHlwZTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEF6dXJlQ2xvdWQoKTogc3RyaW5nIHtcbiAgc3dpdGNoIChjb25maWcuYXp1cmUuY2xvdWQpIHtcbiAgICBjYXNlIEF6dXJlQ2xvdWQuUHVibGljOlxuICAgIGNhc2UgQXp1cmVDbG91ZC5Ob25lOlxuICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgcmV0dXJuICdhenVyZW1vbml0b3InO1xuICAgIGNhc2UgQXp1cmVDbG91ZC5DaGluYTpcbiAgICAgIHJldHVybiAnY2hpbmFhenVyZW1vbml0b3InO1xuICAgIGNhc2UgQXp1cmVDbG91ZC5VU0dvdmVybm1lbnQ6XG4gICAgICByZXR1cm4gJ2dvdmF6dXJlbW9uaXRvcic7XG4gICAgY2FzZSBBenVyZUNsb3VkLkdlcm1hbnk6XG4gICAgICByZXR1cm4gJ2dlcm1hbnlhenVyZW1vbml0b3InO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBjbG91ZCAnJHtjb25maWcuYXp1cmUuY2xvdWR9JyBub3Qgc3VwcG9ydGVkLmApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBenVyZVBvcnRhbFVybChhenVyZUNsb3VkOiBzdHJpbmcpOiBzdHJpbmcge1xuICBzd2l0Y2ggKGF6dXJlQ2xvdWQpIHtcbiAgICBjYXNlICdhenVyZW1vbml0b3InOlxuICAgICAgcmV0dXJuICdodHRwczovL3BvcnRhbC5henVyZS5jb20nO1xuICAgIGNhc2UgJ2NoaW5hYXp1cmVtb25pdG9yJzpcbiAgICAgIHJldHVybiAnaHR0cHM6Ly9wb3J0YWwuYXp1cmUuY24nO1xuICAgIGNhc2UgJ2dvdmF6dXJlbW9uaXRvcic6XG4gICAgICByZXR1cm4gJ2h0dHBzOi8vcG9ydGFsLmF6dXJlLnVzJztcbiAgICBjYXNlICdnZXJtYW55YXp1cmVtb25pdG9yJzpcbiAgICAgIHJldHVybiAnaHR0cHM6Ly9wb3J0YWwubWljcm9zb2Z0YXp1cmUuZGUnO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjbG91ZCBub3Qgc3VwcG9ydGVkLicpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBenVyZUNsb3VkKG9wdGlvbnM6IEF6dXJlRGF0YVNvdXJjZVNldHRpbmdzIHwgQXp1cmVEYXRhU291cmNlSW5zdGFuY2VTZXR0aW5ncyk6IHN0cmluZyB7XG4gIGNvbnN0IGF1dGhUeXBlID0gZ2V0QXV0aFR5cGUob3B0aW9ucyk7XG4gIHN3aXRjaCAoYXV0aFR5cGUpIHtcbiAgICBjYXNlICdtc2knOlxuICAgICAgLy8gSW4gY2FzZSBvZiBtYW5hZ2VkIGlkZW50aXR5LCB0aGUgY2xvdWQgaXMgYWx3YXlzIHNhbWUgYXMgd2hlcmUgR3JhZmFuYSBpcyBob3N0ZWRcbiAgICAgIHJldHVybiBnZXREZWZhdWx0QXp1cmVDbG91ZCgpO1xuICAgIGNhc2UgJ2NsaWVudHNlY3JldCc6XG4gICAgICByZXR1cm4gb3B0aW9ucy5qc29uRGF0YS5jbG91ZE5hbWUgfHwgZ2V0RGVmYXVsdEF6dXJlQ2xvdWQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZWNyZXQob3B0aW9uczogQXp1cmVEYXRhU291cmNlU2V0dGluZ3MpOiB1bmRlZmluZWQgfCBzdHJpbmcgfCBDb25jZWFsZWRTZWNyZXQge1xuICBpZiAob3B0aW9ucy5zZWN1cmVKc29uRmllbGRzLmNsaWVudFNlY3JldCkge1xuICAgIC8vIFRoZSBzZWNyZXQgaXMgY29uY2VhbGVkIG9uIHNlcnZlclxuICAgIHJldHVybiBjb25jZWFsZWQ7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2VjcmV0ID0gb3B0aW9ucy5zZWN1cmVKc29uRGF0YT8uY2xpZW50U2VjcmV0O1xuICAgIHJldHVybiB0eXBlb2Ygc2VjcmV0ID09PSAnc3RyaW5nJyAmJiBzZWNyZXQubGVuZ3RoID4gMCA/IHNlY3JldCA6IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDcmVkZW50aWFsc0NvbXBsZXRlKGNyZWRlbnRpYWxzOiBBenVyZUNyZWRlbnRpYWxzKTogYm9vbGVhbiB7XG4gIHN3aXRjaCAoY3JlZGVudGlhbHMuYXV0aFR5cGUpIHtcbiAgICBjYXNlICdtc2knOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSAnY2xpZW50c2VjcmV0JzpcbiAgICAgIHJldHVybiAhIShjcmVkZW50aWFscy5henVyZUNsb3VkICYmIGNyZWRlbnRpYWxzLnRlbmFudElkICYmIGNyZWRlbnRpYWxzLmNsaWVudElkICYmIGNyZWRlbnRpYWxzLmNsaWVudFNlY3JldCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENyZWRlbnRpYWxzKG9wdGlvbnM6IEF6dXJlRGF0YVNvdXJjZVNldHRpbmdzKTogQXp1cmVDcmVkZW50aWFscyB7XG4gIGNvbnN0IGF1dGhUeXBlID0gZ2V0QXV0aFR5cGUob3B0aW9ucyk7XG4gIHN3aXRjaCAoYXV0aFR5cGUpIHtcbiAgICBjYXNlICdtc2knOlxuICAgICAgaWYgKGNvbmZpZy5henVyZS5tYW5hZ2VkSWRlbnRpdHlFbmFibGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYXV0aFR5cGU6ICdtc2knLFxuICAgICAgICAgIGRlZmF1bHRTdWJzY3JpcHRpb25JZDogb3B0aW9ucy5qc29uRGF0YS5zdWJzY3JpcHRpb25JZCxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIGF1dGhlbnRpY2F0aW9uIHR5cGUgaXMgbWFuYWdlZCBpZGVudGl0eSBidXQgbWFuYWdlZCBpZGVudGl0aWVzIHdlcmUgZGlzYWJsZWQgaW4gR3JhZmFuYSBjb25maWcsXG4gICAgICAgIC8vIHRoZW4gd2Ugc2hvdWxkIGZhbGxiYWNrIHRvIGFuIGVtcHR5IGFwcCByZWdpc3RyYXRpb24gKGNsaWVudCBzZWNyZXQpIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhdXRoVHlwZTogJ2NsaWVudHNlY3JldCcsXG4gICAgICAgICAgYXp1cmVDbG91ZDogZ2V0RGVmYXVsdEF6dXJlQ2xvdWQoKSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICBjYXNlICdjbGllbnRzZWNyZXQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYXV0aFR5cGU6ICdjbGllbnRzZWNyZXQnLFxuICAgICAgICBhenVyZUNsb3VkOiBvcHRpb25zLmpzb25EYXRhLmNsb3VkTmFtZSB8fCBnZXREZWZhdWx0QXp1cmVDbG91ZCgpLFxuICAgICAgICB0ZW5hbnRJZDogb3B0aW9ucy5qc29uRGF0YS50ZW5hbnRJZCxcbiAgICAgICAgY2xpZW50SWQ6IG9wdGlvbnMuanNvbkRhdGEuY2xpZW50SWQsXG4gICAgICAgIGNsaWVudFNlY3JldDogZ2V0U2VjcmV0KG9wdGlvbnMpLFxuICAgICAgICBkZWZhdWx0U3Vic2NyaXB0aW9uSWQ6IG9wdGlvbnMuanNvbkRhdGEuc3Vic2NyaXB0aW9uSWQsXG4gICAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDcmVkZW50aWFscyhcbiAgb3B0aW9uczogQXp1cmVEYXRhU291cmNlU2V0dGluZ3MsXG4gIGNyZWRlbnRpYWxzOiBBenVyZUNyZWRlbnRpYWxzXG4pOiBBenVyZURhdGFTb3VyY2VTZXR0aW5ncyB7XG4gIHN3aXRjaCAoY3JlZGVudGlhbHMuYXV0aFR5cGUpIHtcbiAgICBjYXNlICdtc2knOlxuICAgICAgaWYgKCFjb25maWcuYXp1cmUubWFuYWdlZElkZW50aXR5RW5hYmxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbmFnZWQgSWRlbnRpdHkgYXV0aGVudGljYXRpb24gaXMgbm90IGVuYWJsZWQgaW4gR3JhZmFuYSBjb25maWcuJyk7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGpzb25EYXRhOiB7XG4gICAgICAgICAgLi4ub3B0aW9ucy5qc29uRGF0YSxcbiAgICAgICAgICBhenVyZUF1dGhUeXBlOiAnbXNpJyxcbiAgICAgICAgICBzdWJzY3JpcHRpb25JZDogY3JlZGVudGlhbHMuZGVmYXVsdFN1YnNjcmlwdGlvbklkLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIG9wdGlvbnM7XG5cbiAgICBjYXNlICdjbGllbnRzZWNyZXQnOlxuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAganNvbkRhdGE6IHtcbiAgICAgICAgICAuLi5vcHRpb25zLmpzb25EYXRhLFxuICAgICAgICAgIGF6dXJlQXV0aFR5cGU6ICdjbGllbnRzZWNyZXQnLFxuICAgICAgICAgIGNsb3VkTmFtZTogY3JlZGVudGlhbHMuYXp1cmVDbG91ZCB8fCBnZXREZWZhdWx0QXp1cmVDbG91ZCgpLFxuICAgICAgICAgIHRlbmFudElkOiBjcmVkZW50aWFscy50ZW5hbnRJZCxcbiAgICAgICAgICBjbGllbnRJZDogY3JlZGVudGlhbHMuY2xpZW50SWQsXG4gICAgICAgICAgc3Vic2NyaXB0aW9uSWQ6IGNyZWRlbnRpYWxzLmRlZmF1bHRTdWJzY3JpcHRpb25JZCxcbiAgICAgICAgfSxcbiAgICAgICAgc2VjdXJlSnNvbkRhdGE6IHtcbiAgICAgICAgICAuLi5vcHRpb25zLnNlY3VyZUpzb25EYXRhLFxuICAgICAgICAgIGNsaWVudFNlY3JldDpcbiAgICAgICAgICAgIHR5cGVvZiBjcmVkZW50aWFscy5jbGllbnRTZWNyZXQgPT09ICdzdHJpbmcnICYmIGNyZWRlbnRpYWxzLmNsaWVudFNlY3JldC5sZW5ndGggPiAwXG4gICAgICAgICAgICAgID8gY3JlZGVudGlhbHMuY2xpZW50U2VjcmV0XG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICB9LFxuICAgICAgICBzZWN1cmVKc29uRmllbGRzOiB7XG4gICAgICAgICAgLi4ub3B0aW9ucy5zZWN1cmVKc29uRmllbGRzLFxuICAgICAgICAgIGNsaWVudFNlY3JldDogdHlwZW9mIGNyZWRlbnRpYWxzLmNsaWVudFNlY3JldCA9PT0gJ3N5bWJvbCcsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1xuICBEYXRhRnJhbWUsXG4gIERhdGFRdWVyeVJlcXVlc3QsXG4gIERhdGFRdWVyeVJlc3BvbnNlLFxuICBEYXRhU291cmNlSW5zdGFuY2VTZXR0aW5ncyxcbiAgTG9hZGluZ1N0YXRlLFxuICBTY29wZWRWYXJzLFxufSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IERhdGFTb3VyY2VXaXRoQmFja2VuZCB9IGZyb20gJ0BncmFmYW5hL3J1bnRpbWUnO1xuaW1wb3J0IHsgZ2V0VGVtcGxhdGVTcnYsIFRlbXBsYXRlU3J2IH0gZnJvbSAnYXBwL2ZlYXR1cmVzL3RlbXBsYXRpbmcvdGVtcGxhdGVfc3J2JztcblxuaW1wb3J0IEF6dXJlTG9nQW5hbHl0aWNzRGF0YXNvdXJjZSBmcm9tICcuL2F6dXJlX2xvZ19hbmFseXRpY3MvYXp1cmVfbG9nX2FuYWx5dGljc19kYXRhc291cmNlJztcbmltcG9ydCBBenVyZU1vbml0b3JEYXRhc291cmNlIGZyb20gJy4vYXp1cmVfbW9uaXRvci9henVyZV9tb25pdG9yX2RhdGFzb3VyY2UnO1xuaW1wb3J0IEF6dXJlUmVzb3VyY2VHcmFwaERhdGFzb3VyY2UgZnJvbSAnLi9henVyZV9yZXNvdXJjZV9ncmFwaC9henVyZV9yZXNvdXJjZV9ncmFwaF9kYXRhc291cmNlJztcbmltcG9ydCBSZXNvdXJjZVBpY2tlckRhdGEgZnJvbSAnLi9yZXNvdXJjZVBpY2tlci9yZXNvdXJjZVBpY2tlckRhdGEnO1xuaW1wb3J0IHsgQXp1cmVEYXRhU291cmNlSnNvbkRhdGEsIEF6dXJlTW9uaXRvclF1ZXJ5LCBBenVyZVF1ZXJ5VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IG1pZ3JhdGVBbm5vdGF0aW9uIGZyb20gJy4vdXRpbHMvbWlncmF0ZUFubm90YXRpb24nO1xuaW1wb3J0IHsgZGF0YXNvdXJjZU1pZ3JhdGlvbnMgfSBmcm9tICcuL3V0aWxzL21pZ3JhdGVRdWVyeSc7XG5pbXBvcnQgeyBWYXJpYWJsZVN1cHBvcnQgfSBmcm9tICcuL3ZhcmlhYmxlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFzb3VyY2UgZXh0ZW5kcyBEYXRhU291cmNlV2l0aEJhY2tlbmQ8QXp1cmVNb25pdG9yUXVlcnksIEF6dXJlRGF0YVNvdXJjZUpzb25EYXRhPiB7XG4gIGFubm90YXRpb25zID0ge1xuICAgIHByZXBhcmVBbm5vdGF0aW9uOiBtaWdyYXRlQW5ub3RhdGlvbixcbiAgfTtcblxuICBhenVyZU1vbml0b3JEYXRhc291cmNlOiBBenVyZU1vbml0b3JEYXRhc291cmNlO1xuICBhenVyZUxvZ0FuYWx5dGljc0RhdGFzb3VyY2U6IEF6dXJlTG9nQW5hbHl0aWNzRGF0YXNvdXJjZTtcbiAgcmVzb3VyY2VQaWNrZXJEYXRhOiBSZXNvdXJjZVBpY2tlckRhdGE7XG4gIGF6dXJlUmVzb3VyY2VHcmFwaERhdGFzb3VyY2U6IEF6dXJlUmVzb3VyY2VHcmFwaERhdGFzb3VyY2U7XG5cbiAgcHNldWRvRGF0YXNvdXJjZToge1xuICAgIFtrZXkgaW4gQXp1cmVRdWVyeVR5cGVdPzogQXp1cmVNb25pdG9yRGF0YXNvdXJjZSB8IEF6dXJlTG9nQW5hbHl0aWNzRGF0YXNvdXJjZSB8IEF6dXJlUmVzb3VyY2VHcmFwaERhdGFzb3VyY2U7XG4gIH0gPSB7fTtcblxuICBkZWNsYXJlIG9wdGlvbnNLZXk6IFJlY29yZDxBenVyZVF1ZXJ5VHlwZSwgc3RyaW5nPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBpbnN0YW5jZVNldHRpbmdzOiBEYXRhU291cmNlSW5zdGFuY2VTZXR0aW5nczxBenVyZURhdGFTb3VyY2VKc29uRGF0YT4sXG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZW1wbGF0ZVNydjogVGVtcGxhdGVTcnYgPSBnZXRUZW1wbGF0ZVNydigpXG4gICkge1xuICAgIHN1cGVyKGluc3RhbmNlU2V0dGluZ3MpO1xuICAgIHRoaXMuYXp1cmVNb25pdG9yRGF0YXNvdXJjZSA9IG5ldyBBenVyZU1vbml0b3JEYXRhc291cmNlKGluc3RhbmNlU2V0dGluZ3MpO1xuICAgIHRoaXMuYXp1cmVMb2dBbmFseXRpY3NEYXRhc291cmNlID0gbmV3IEF6dXJlTG9nQW5hbHl0aWNzRGF0YXNvdXJjZShpbnN0YW5jZVNldHRpbmdzKTtcbiAgICB0aGlzLmF6dXJlUmVzb3VyY2VHcmFwaERhdGFzb3VyY2UgPSBuZXcgQXp1cmVSZXNvdXJjZUdyYXBoRGF0YXNvdXJjZShpbnN0YW5jZVNldHRpbmdzKTtcbiAgICB0aGlzLnJlc291cmNlUGlja2VyRGF0YSA9IG5ldyBSZXNvdXJjZVBpY2tlckRhdGEoaW5zdGFuY2VTZXR0aW5ncyk7XG5cbiAgICB0aGlzLnBzZXVkb0RhdGFzb3VyY2UgPSB7XG4gICAgICBbQXp1cmVRdWVyeVR5cGUuQXp1cmVNb25pdG9yXTogdGhpcy5henVyZU1vbml0b3JEYXRhc291cmNlLFxuICAgICAgW0F6dXJlUXVlcnlUeXBlLkxvZ0FuYWx5dGljc106IHRoaXMuYXp1cmVMb2dBbmFseXRpY3NEYXRhc291cmNlLFxuICAgICAgW0F6dXJlUXVlcnlUeXBlLkF6dXJlUmVzb3VyY2VHcmFwaF06IHRoaXMuYXp1cmVSZXNvdXJjZUdyYXBoRGF0YXNvdXJjZSxcbiAgICB9O1xuXG4gICAgdGhpcy52YXJpYWJsZXMgPSBuZXcgVmFyaWFibGVTdXBwb3J0KHRoaXMpO1xuICB9XG5cbiAgZmlsdGVyUXVlcnkoaXRlbTogQXp1cmVNb25pdG9yUXVlcnkpOiBib29sZWFuIHtcbiAgICBpZiAoIWl0ZW0ucXVlcnlUeXBlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZHMgPSB0aGlzLnBzZXVkb0RhdGFzb3VyY2VbaXRlbS5xdWVyeVR5cGVdO1xuICAgIHJldHVybiBkcz8uZmlsdGVyUXVlcnk/LihpdGVtKSA/PyB0cnVlO1xuICB9XG5cbiAgcXVlcnkob3B0aW9uczogRGF0YVF1ZXJ5UmVxdWVzdDxBenVyZU1vbml0b3JRdWVyeT4pOiBPYnNlcnZhYmxlPERhdGFRdWVyeVJlc3BvbnNlPiB7XG4gICAgY29uc3QgYnlUeXBlID0gbmV3IE1hcDxBenVyZVF1ZXJ5VHlwZSwgRGF0YVF1ZXJ5UmVxdWVzdDxBenVyZU1vbml0b3JRdWVyeT4+KCk7XG5cbiAgICBmb3IgKGNvbnN0IGJhc2VUYXJnZXQgb2Ygb3B0aW9ucy50YXJnZXRzKSB7XG4gICAgICAvLyBNaWdyYXRlIG9sZCBxdWVyeSBzdHJ1Y3R1cmVzXG4gICAgICBjb25zdCB0YXJnZXQgPSBkYXRhc291cmNlTWlncmF0aW9ucyhiYXNlVGFyZ2V0KTtcblxuICAgICAgLy8gU2tpcCBoaWRkZW4gb3IgaW52YWxpZCBxdWVyaWVzIG9yIG9uZXMgd2l0aG91dCBwcm9wZXJ0aWVzXG4gICAgICBpZiAoIXRhcmdldC5xdWVyeVR5cGUgfHwgdGFyZ2V0LmhpZGUgfHwgIWhhc1F1ZXJ5Rm9yVHlwZSh0YXJnZXQpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBJbml0aWFsaXplIHRoZSBsaXN0IG9mIHF1ZXJpZXNcbiAgICAgIGlmICghYnlUeXBlLmhhcyh0YXJnZXQucXVlcnlUeXBlKSkge1xuICAgICAgICBjb25zdCBxdWVyeUZvclR5cGUgPSBjbG9uZURlZXAob3B0aW9ucyk7XG4gICAgICAgIHF1ZXJ5Rm9yVHlwZS5yZXF1ZXN0SWQgPSBgJHtxdWVyeUZvclR5cGUucmVxdWVzdElkfS0ke3RhcmdldC5yZWZJZH1gO1xuICAgICAgICBxdWVyeUZvclR5cGUudGFyZ2V0cyA9IFtdO1xuICAgICAgICBieVR5cGUuc2V0KHRhcmdldC5xdWVyeVR5cGUsIHF1ZXJ5Rm9yVHlwZSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHF1ZXJ5Rm9yVHlwZSA9IGJ5VHlwZS5nZXQodGFyZ2V0LnF1ZXJ5VHlwZSk7XG4gICAgICBxdWVyeUZvclR5cGU/LnRhcmdldHMucHVzaCh0YXJnZXQpO1xuICAgIH1cblxuICAgIGNvbnN0IG9ic2VydmFibGVzOiBBcnJheTxPYnNlcnZhYmxlPERhdGFRdWVyeVJlc3BvbnNlPj4gPSBBcnJheS5mcm9tKGJ5VHlwZS5lbnRyaWVzKCkpLm1hcCgoW3F1ZXJ5VHlwZSwgcmVxXSkgPT4ge1xuICAgICAgY29uc3QgZHMgPSB0aGlzLnBzZXVkb0RhdGFzb3VyY2VbcXVlcnlUeXBlXTtcbiAgICAgIGlmICghZHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhIHNvdXJjZSBub3QgY3JlYXRlZCBmb3IgcXVlcnkgdHlwZSAnICsgcXVlcnlUeXBlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRzLnF1ZXJ5KHJlcSk7XG4gICAgfSk7XG5cbiAgICAvLyBTaW5nbGUgcXVlcnkgY2FuIHNraXAgbWVyZ2VcbiAgICBpZiAob2JzZXJ2YWJsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZXNbMF07XG4gICAgfVxuXG4gICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiBmb3JrSm9pbihvYnNlcnZhYmxlcykucGlwZShcbiAgICAgICAgbWFwKChyZXN1bHRzOiBEYXRhUXVlcnlSZXNwb25zZVtdKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGF0YTogRGF0YUZyYW1lW10gPSBbXTtcbiAgICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZyYW1lIG9mIHJlc3VsdC5kYXRhKSB7XG4gICAgICAgICAgICAgIGRhdGEucHVzaChmcmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHsgc3RhdGU6IExvYWRpbmdTdGF0ZS5Eb25lLCBkYXRhIH07XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBvZih7IHN0YXRlOiBMb2FkaW5nU3RhdGUuRG9uZSwgZGF0YTogW10gfSk7XG4gIH1cblxuICB0YXJnZXRDb250YWluc1RlbXBsYXRlKHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSkge1xuICAgIGlmIChxdWVyeS5zdWJzY3JpcHRpb24gJiYgdGhpcy50ZW1wbGF0ZVNydi5jb250YWluc1RlbXBsYXRlKHF1ZXJ5LnN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGxldCBzdWJRdWVyeTtcbiAgICBpZiAocXVlcnkucXVlcnlUeXBlID09PSBBenVyZVF1ZXJ5VHlwZS5BenVyZU1vbml0b3IpIHtcbiAgICAgIHN1YlF1ZXJ5ID0gSlNPTi5zdHJpbmdpZnkocXVlcnkuYXp1cmVNb25pdG9yKTtcbiAgICB9IGVsc2UgaWYgKHF1ZXJ5LnF1ZXJ5VHlwZSA9PT0gQXp1cmVRdWVyeVR5cGUuTG9nQW5hbHl0aWNzKSB7XG4gICAgICBzdWJRdWVyeSA9IEpTT04uc3RyaW5naWZ5KHF1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzKTtcbiAgICB9IGVsc2UgaWYgKHF1ZXJ5LnF1ZXJ5VHlwZSA9PT0gQXp1cmVRdWVyeVR5cGUuQXp1cmVSZXNvdXJjZUdyYXBoKSB7XG4gICAgICBzdWJRdWVyeSA9IEpTT04uc3RyaW5naWZ5KFtxdWVyeS5henVyZVJlc291cmNlR3JhcGgsIHF1ZXJ5LnN1YnNjcmlwdGlvbnNdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gISFzdWJRdWVyeSAmJiB0aGlzLnRlbXBsYXRlU3J2LmNvbnRhaW5zVGVtcGxhdGUoc3ViUXVlcnkpO1xuICB9XG5cbiAgYXN5bmMgYW5ub3RhdGlvblF1ZXJ5KG9wdGlvbnM6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmF6dXJlTG9nQW5hbHl0aWNzRGF0YXNvdXJjZS5hbm5vdGF0aW9uUXVlcnkob3B0aW9ucyk7XG4gIH1cblxuICAvKiBBenVyZSBNb25pdG9yIFJFU1QgQVBJIG1ldGhvZHMgKi9cbiAgZ2V0UmVzb3VyY2VHcm91cHMoc3Vic2NyaXB0aW9uSWQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmF6dXJlTW9uaXRvckRhdGFzb3VyY2UuZ2V0UmVzb3VyY2VHcm91cHModGhpcy50ZW1wbGF0ZVNydi5yZXBsYWNlKHN1YnNjcmlwdGlvbklkKSk7XG4gIH1cblxuICBnZXRNZXRyaWNEZWZpbml0aW9ucyhzdWJzY3JpcHRpb25JZDogc3RyaW5nLCByZXNvdXJjZUdyb3VwOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5henVyZU1vbml0b3JEYXRhc291cmNlLmdldE1ldHJpY0RlZmluaXRpb25zKFxuICAgICAgdGhpcy50ZW1wbGF0ZVNydi5yZXBsYWNlKHN1YnNjcmlwdGlvbklkKSxcbiAgICAgIHRoaXMudGVtcGxhdGVTcnYucmVwbGFjZShyZXNvdXJjZUdyb3VwKVxuICAgICk7XG4gIH1cblxuICBnZXRSZXNvdXJjZU5hbWVzKHN1YnNjcmlwdGlvbklkOiBzdHJpbmcsIHJlc291cmNlR3JvdXA6IHN0cmluZywgbWV0cmljRGVmaW5pdGlvbjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuYXp1cmVNb25pdG9yRGF0YXNvdXJjZS5nZXRSZXNvdXJjZU5hbWVzKFxuICAgICAgdGhpcy50ZW1wbGF0ZVNydi5yZXBsYWNlKHN1YnNjcmlwdGlvbklkKSxcbiAgICAgIHRoaXMudGVtcGxhdGVTcnYucmVwbGFjZShyZXNvdXJjZUdyb3VwKSxcbiAgICAgIHRoaXMudGVtcGxhdGVTcnYucmVwbGFjZShtZXRyaWNEZWZpbml0aW9uKVxuICAgICk7XG4gIH1cblxuICAvKkF6dXJlIExvZyBBbmFseXRpY3MgKi9cbiAgZ2V0QXp1cmVMb2dBbmFseXRpY3NXb3Jrc3BhY2VzKHN1YnNjcmlwdGlvbklkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5henVyZUxvZ0FuYWx5dGljc0RhdGFzb3VyY2UuZ2V0V29ya3NwYWNlcyhzdWJzY3JpcHRpb25JZCk7XG4gIH1cblxuICBnZXRTdWJzY3JpcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmF6dXJlTW9uaXRvckRhdGFzb3VyY2UuZ2V0U3Vic2NyaXB0aW9ucygpO1xuICB9XG5cbiAgaW50ZXJwb2xhdGVWYXJpYWJsZXNJblF1ZXJpZXMocXVlcmllczogQXp1cmVNb25pdG9yUXVlcnlbXSwgc2NvcGVkVmFyczogU2NvcGVkVmFycyk6IEF6dXJlTW9uaXRvclF1ZXJ5W10ge1xuICAgIGNvbnN0IG1hcHBlZCA9IHF1ZXJpZXMubWFwKChxdWVyeSkgPT4ge1xuICAgICAgaWYgKCFxdWVyeS5xdWVyeVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkcyA9IHRoaXMucHNldWRvRGF0YXNvdXJjZVtxdWVyeS5xdWVyeVR5cGVdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YXNvdXJjZTogZHM/LmdldFJlZigpLFxuICAgICAgICAuLi4oZHM/LmFwcGx5VGVtcGxhdGVWYXJpYWJsZXMocXVlcnksIHNjb3BlZFZhcnMpID8/IHF1ZXJ5KSxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWFwcGVkO1xuICB9XG5cbiAgZ2V0VmFyaWFibGVzKCkge1xuICAgIHJldHVybiB0aGlzLnRlbXBsYXRlU3J2LmdldFZhcmlhYmxlcygpLm1hcCgodikgPT4gYCQke3YubmFtZX1gKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNRdWVyeUZvclR5cGUocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KTogYm9vbGVhbiB7XG4gIHN3aXRjaCAocXVlcnkucXVlcnlUeXBlKSB7XG4gICAgY2FzZSBBenVyZVF1ZXJ5VHlwZS5BenVyZU1vbml0b3I6XG4gICAgICByZXR1cm4gISFxdWVyeS5henVyZU1vbml0b3I7XG5cbiAgICBjYXNlIEF6dXJlUXVlcnlUeXBlLkxvZ0FuYWx5dGljczpcbiAgICAgIHJldHVybiAhIXF1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzO1xuXG4gICAgY2FzZSBBenVyZVF1ZXJ5VHlwZS5BenVyZVJlc291cmNlR3JhcGg6XG4gICAgICByZXR1cm4gISFxdWVyeS5henVyZVJlc291cmNlR3JhcGg7XG5cbiAgICBjYXNlIEF6dXJlUXVlcnlUeXBlLkdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm46XG4gICAgICByZXR1cm4gISFxdWVyeS5ncmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgaXNHVUlEaXNoIH0gZnJvbSAnLi9jb21wb25lbnRzL1Jlc291cmNlUGlja2VyL3V0aWxzJztcbmltcG9ydCBEYXRhU291cmNlIGZyb20gJy4vZGF0YXNvdXJjZSc7XG5pbXBvcnQgeyBBenVyZU1vbml0b3JRdWVyeSwgQXp1cmVRdWVyeVR5cGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7XG4gIEFwcEluc2lnaHRzR3JvdXBCeVF1ZXJ5LFxuICBBcHBJbnNpZ2h0c01ldHJpY05hbWVRdWVyeSxcbiAgR3JhZmFuYVRlbXBsYXRlVmFyaWFibGVRdWVyeSxcbiAgTWV0cmljRGVmaW5pdGlvbnNRdWVyeSxcbiAgTWV0cmljTmFtZXNwYWNlUXVlcnksXG4gIE1ldHJpY05hbWVzUXVlcnksXG4gIFJlc291cmNlR3JvdXBzUXVlcnksXG4gIFJlc291cmNlTmFtZXNRdWVyeSxcbiAgU3Vic2NyaXB0aW9uc1F1ZXJ5LFxuICBXb3Jrc3BhY2VzUXVlcnksXG59IGZyb20gJy4vdHlwZXMvdGVtcGxhdGVWYXJpYWJsZXMnO1xuXG4vKiBcbiAgR3JhZmFuYSBUZW1wbGF0ZSBWYXJpYWJsZSBGdW5jdGlvbnNcbiAgZXg6IFN1YnNjcmlwdGlvbnMoKVxuXG4gIFRoZXNlIGFyZSBoZWxwZXIgZnVuY3Rpb25zIHdlIGhhdmUgY3JlYXRlZCBhbmQgZXhwb3NlZCB0byB1c2VycyB0byBtYWtlIHRoZSB3cml0aW5nIG9mIHRlbXBsYXRlIHZhcmlhYmxlcyBlYXNpZXIuIFxuICBEdWUgdG8gbGVnYWN5IHJlYXNvbnMsIHdlIHN0aWxsIG5lZWQgdG8gcGFyc2Ugc3RyaW5ncyB0byBkZXRlcm1pbmUgaWYgYSBxdWVyeSBpcyBhIEdyYWZhbmEgVGVtcGxhdGUgVmFyaWFibGUgRnVuY3Rpb24gXG4gIG9yIGlmIGl0J3MgYSBLUUwtdHlwZSBxdWVyeVxuKi9cblxuZXhwb3J0IGNvbnN0IGdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm5NYXRjaGVzID0gKHF1ZXJ5OiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBzdWJzY3JpcHRpb25zOiBxdWVyeS5tYXRjaCgvXlN1YnNjcmlwdGlvbnNcXChcXCkvaSksXG4gICAgcmVzb3VyY2VHcm91cHM6IHF1ZXJ5Lm1hdGNoKC9eUmVzb3VyY2VHcm91cHNcXChcXCkvaSksXG4gICAgcmVzb3VyY2VHcm91cHNXaXRoU3ViOiBxdWVyeS5tYXRjaCgvXlJlc291cmNlR3JvdXBzXFwoKFteXFwpXSs/KSgsXFxzPyhbXixdKz8pKT9cXCkvaSksXG4gICAgbWV0cmljRGVmaW5pdGlvbnM6IHF1ZXJ5Lm1hdGNoKC9eTmFtZXNwYWNlc1xcKChbXlxcKV0rPykoLFxccz8oW14sXSs/KSk/XFwpL2kpLFxuICAgIG1ldHJpY0RlZmluaXRpb25zV2l0aFN1YjogcXVlcnkubWF0Y2goL15OYW1lc3BhY2VzXFwoKFteLF0rPyksXFxzPyhbXixdKz8pXFwpL2kpLFxuICAgIHJlc291cmNlTmFtZXM6IHF1ZXJ5Lm1hdGNoKC9eUmVzb3VyY2VOYW1lc1xcKChbXixdKz8pLFxccz8oW14sXSs/KVxcKS9pKSxcbiAgICByZXNvdXJjZU5hbWVzV2l0aFN1YjogcXVlcnkubWF0Y2goL15SZXNvdXJjZU5hbWVzXFwoKFteLF0rPyksXFxzPyhbXixdKz8pLFxccz8oLis/KVxcKS9pKSxcbiAgICBtZXRyaWNOYW1lc3BhY2U6IHF1ZXJ5Lm1hdGNoKC9eTWV0cmljTmFtZXNwYWNlXFwoKFteLF0rPyksXFxzPyhbXixdKz8pLFxccz8oW14sXSs/KVxcKS9pKSxcbiAgICBtZXRyaWNOYW1lc3BhY2VXaXRoU3ViOiBxdWVyeS5tYXRjaCgvXm1ldHJpY25hbWVzcGFjZVxcKChbXixdKz8pLFxccz8oW14sXSs/KSxcXHM/KFteLF0rPyksXFxzPyhbXixdKz8pXFwpL2kpLFxuICAgIG1ldHJpY05hbWVzOiBxdWVyeS5tYXRjaCgvXk1ldHJpY05hbWVzXFwoKFteLF0rPyksXFxzPyhbXixdKz8pLFxccz8oW14sXSs/KSxcXHM/KFteLF0rPylcXCkvaSksXG4gICAgbWV0cmljTmFtZXNXaXRoU3ViOiBxdWVyeS5tYXRjaCgvXk1ldHJpY05hbWVzXFwoKFteLF0rPyksXFxzPyhbXixdKz8pLFxccz8oW14sXSs/KSxcXHM/KFteLF0rPyksXFxzPyguKz8pXFwpL2kpLFxuICAgIGFwcEluc2lnaHRzTWV0cmljTmFtZVF1ZXJ5OiBxdWVyeS5tYXRjaCgvXkFwcEluc2lnaHRzTWV0cmljTmFtZXNcXChcXCkvaSksXG4gICAgYXBwSW5zaWdodHNHcm91cEJ5UXVlcnk6IHF1ZXJ5Lm1hdGNoKC9eQXBwSW5zaWdodHNHcm91cEJ5c1xcKChbXlxcKV0rPykoLFxccz8oW14sXSs/KSk/XFwpL2kpLFxuICAgIHdvcmtzcGFjZXNRdWVyeTogcXVlcnkubWF0Y2goL153b3Jrc3BhY2VzXFwoXFwpL2kpLFxuICAgIHdvcmtzcGFjZXNRdWVyeVdpdGhTdWI6IHF1ZXJ5Lm1hdGNoKC9ed29ya3NwYWNlc1xcKFtcIiddPyhbXlxcKV0rPylbXCInXT9cXCkvaSksXG4gIH07XG59O1xuXG5jb25zdCBpc0dyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm5RdWVyeSA9IChxdWVyeTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IG1hdGNoZXM6IFJlY29yZDxzdHJpbmcsIFJlZ0V4cE1hdGNoQXJyYXkgfCBudWxsPiA9IGdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm5NYXRjaGVzKHF1ZXJ5KTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1hdGNoZXMpLnNvbWUoKGtleSkgPT4gISFtYXRjaGVzW2tleV0pO1xufTtcblxuY29uc3QgY3JlYXRlR3JhZmFuYVRlbXBsYXRlVmFyaWFibGVRdWVyeSA9IChyYXdRdWVyeTogc3RyaW5nLCBkYXRhc291cmNlOiBEYXRhU291cmNlKTogQXp1cmVNb25pdG9yUXVlcnkgPT4ge1xuICBjb25zdCBtYXRjaGVzRm9yUXVlcnkgPSBncmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuTWF0Y2hlcyhyYXdRdWVyeSk7XG4gIGNvbnN0IGRlZmF1bHRTdWJzY3JpcHRpb25JZCA9IGRhdGFzb3VyY2UuYXp1cmVNb25pdG9yRGF0YXNvdXJjZS5kZWZhdWx0U3Vic2NyaXB0aW9uSWQ7XG4gIGNvbnN0IGNyZWF0ZUdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRGV0YWlscyA9ICgpOiBHcmFmYW5hVGVtcGxhdGVWYXJpYWJsZVF1ZXJ5ID0+IHtcbiAgICAvLyBkZXByZWNhdGVkIGFwcCBpbnNpZ2h0cyB0ZW1wbGF0ZSB2YXJpYWJsZXMgKHdpbGwgbW9zdCBsaWtlbHkgcmVtb3ZlIGluIGdyYWZhbmEgOSlcbiAgICBpZiAobWF0Y2hlc0ZvclF1ZXJ5LmFwcEluc2lnaHRzTWV0cmljTmFtZVF1ZXJ5KSB7XG4gICAgICBjb25zdCBxdWVyeURldGFpbHM6IEFwcEluc2lnaHRzTWV0cmljTmFtZVF1ZXJ5ID0geyByYXdRdWVyeSwga2luZDogJ0FwcEluc2lnaHRzTWV0cmljTmFtZVF1ZXJ5JyB9O1xuICAgICAgcmV0dXJuIHF1ZXJ5RGV0YWlscztcbiAgICB9XG5cbiAgICBpZiAobWF0Y2hlc0ZvclF1ZXJ5LmFwcEluc2lnaHRzR3JvdXBCeVF1ZXJ5KSB7XG4gICAgICBjb25zdCBxdWVyeURldGFpbHM6IEFwcEluc2lnaHRzR3JvdXBCeVF1ZXJ5ID0ge1xuICAgICAgICBraW5kOiAnQXBwSW5zaWdodHNHcm91cEJ5UXVlcnknLFxuICAgICAgICByYXdRdWVyeSxcbiAgICAgICAgbWV0cmljTmFtZTogbWF0Y2hlc0ZvclF1ZXJ5LmFwcEluc2lnaHRzR3JvdXBCeVF1ZXJ5WzFdLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBxdWVyeURldGFpbHM7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoZXNGb3JRdWVyeS5zdWJzY3JpcHRpb25zKSB7XG4gICAgICBjb25zdCBxdWVyeURldGFpbHM6IFN1YnNjcmlwdGlvbnNRdWVyeSA9IHtcbiAgICAgICAga2luZDogJ1N1YnNjcmlwdGlvbnNRdWVyeScsXG4gICAgICAgIHJhd1F1ZXJ5LFxuICAgICAgfTtcbiAgICAgIHJldHVybiBxdWVyeURldGFpbHM7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoZXNGb3JRdWVyeS5yZXNvdXJjZUdyb3Vwc1dpdGhTdWIpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5RGV0YWlsczogUmVzb3VyY2VHcm91cHNRdWVyeSA9IHtcbiAgICAgICAga2luZDogJ1Jlc291cmNlR3JvdXBzUXVlcnknLFxuICAgICAgICByYXdRdWVyeSxcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBtYXRjaGVzRm9yUXVlcnkucmVzb3VyY2VHcm91cHNXaXRoU3ViWzFdLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBxdWVyeURldGFpbHM7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoZXNGb3JRdWVyeS5yZXNvdXJjZUdyb3VwcyAmJiBkZWZhdWx0U3Vic2NyaXB0aW9uSWQpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5RGV0YWlsczogUmVzb3VyY2VHcm91cHNRdWVyeSA9IHtcbiAgICAgICAga2luZDogJ1Jlc291cmNlR3JvdXBzUXVlcnknLFxuICAgICAgICByYXdRdWVyeSxcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBkZWZhdWx0U3Vic2NyaXB0aW9uSWQsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHF1ZXJ5RGV0YWlscztcbiAgICB9XG5cbiAgICBpZiAobWF0Y2hlc0ZvclF1ZXJ5Lm1ldHJpY0RlZmluaXRpb25zV2l0aFN1Yikge1xuICAgICAgY29uc3QgcXVlcnlEZXRhaWxzOiBNZXRyaWNEZWZpbml0aW9uc1F1ZXJ5ID0ge1xuICAgICAgICBraW5kOiAnTWV0cmljRGVmaW5pdGlvbnNRdWVyeScsXG4gICAgICAgIHJhd1F1ZXJ5LFxuICAgICAgICBzdWJzY3JpcHRpb246IG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNEZWZpbml0aW9uc1dpdGhTdWJbMV0sXG4gICAgICAgIHJlc291cmNlR3JvdXA6IG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNEZWZpbml0aW9uc1dpdGhTdWJbMl0sXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHF1ZXJ5RGV0YWlscztcbiAgICB9XG5cbiAgICBpZiAobWF0Y2hlc0ZvclF1ZXJ5Lm1ldHJpY0RlZmluaXRpb25zICYmIGRlZmF1bHRTdWJzY3JpcHRpb25JZCkge1xuICAgICAgY29uc3QgcXVlcnlEZXRhaWxzOiBNZXRyaWNEZWZpbml0aW9uc1F1ZXJ5ID0ge1xuICAgICAgICBraW5kOiAnTWV0cmljRGVmaW5pdGlvbnNRdWVyeScsXG4gICAgICAgIHJhd1F1ZXJ5LFxuICAgICAgICBzdWJzY3JpcHRpb246IGRlZmF1bHRTdWJzY3JpcHRpb25JZCxcbiAgICAgICAgcmVzb3VyY2VHcm91cDogbWF0Y2hlc0ZvclF1ZXJ5Lm1ldHJpY0RlZmluaXRpb25zWzFdLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBxdWVyeURldGFpbHM7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoZXNGb3JRdWVyeS5yZXNvdXJjZU5hbWVzV2l0aFN1Yikge1xuICAgICAgY29uc3QgcXVlcnlEZXRhaWxzOiBSZXNvdXJjZU5hbWVzUXVlcnkgPSB7XG4gICAgICAgIGtpbmQ6ICdSZXNvdXJjZU5hbWVzUXVlcnknLFxuICAgICAgICByYXdRdWVyeSxcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBtYXRjaGVzRm9yUXVlcnkucmVzb3VyY2VOYW1lc1dpdGhTdWJbMV0sXG4gICAgICAgIHJlc291cmNlR3JvdXA6IG1hdGNoZXNGb3JRdWVyeS5yZXNvdXJjZU5hbWVzV2l0aFN1YlsyXSxcbiAgICAgICAgbWV0cmljRGVmaW5pdGlvbjogbWF0Y2hlc0ZvclF1ZXJ5LnJlc291cmNlTmFtZXNXaXRoU3ViWzNdLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBxdWVyeURldGFpbHM7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoZXNGb3JRdWVyeS5yZXNvdXJjZU5hbWVzICYmIGRlZmF1bHRTdWJzY3JpcHRpb25JZCkge1xuICAgICAgY29uc3QgcXVlcnlEZXRhaWxzOiBSZXNvdXJjZU5hbWVzUXVlcnkgPSB7XG4gICAgICAgIGtpbmQ6ICdSZXNvdXJjZU5hbWVzUXVlcnknLFxuICAgICAgICByYXdRdWVyeSxcbiAgICAgICAgc3Vic2NyaXB0aW9uOiBkZWZhdWx0U3Vic2NyaXB0aW9uSWQsXG4gICAgICAgIHJlc291cmNlR3JvdXA6IG1hdGNoZXNGb3JRdWVyeS5yZXNvdXJjZU5hbWVzWzFdLFxuICAgICAgICBtZXRyaWNEZWZpbml0aW9uOiBtYXRjaGVzRm9yUXVlcnkucmVzb3VyY2VOYW1lc1syXSxcbiAgICAgIH07XG4gICAgICByZXR1cm4gcXVlcnlEZXRhaWxzO1xuICAgIH1cblxuICAgIGlmIChtYXRjaGVzRm9yUXVlcnkubWV0cmljTmFtZXNwYWNlV2l0aFN1Yikge1xuICAgICAgY29uc3QgcXVlcnlEZXRhaWxzOiBNZXRyaWNOYW1lc3BhY2VRdWVyeSA9IHtcbiAgICAgICAga2luZDogJ01ldHJpY05hbWVzcGFjZVF1ZXJ5JyxcbiAgICAgICAgcmF3UXVlcnksXG4gICAgICAgIHN1YnNjcmlwdGlvbjogbWF0Y2hlc0ZvclF1ZXJ5Lm1ldHJpY05hbWVzcGFjZVdpdGhTdWJbMV0sXG4gICAgICAgIHJlc291cmNlR3JvdXA6IG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNOYW1lc3BhY2VXaXRoU3ViWzJdLFxuICAgICAgICBtZXRyaWNEZWZpbml0aW9uOiBtYXRjaGVzRm9yUXVlcnkubWV0cmljTmFtZXNwYWNlV2l0aFN1YlszXSxcbiAgICAgICAgcmVzb3VyY2VOYW1lOiBtYXRjaGVzRm9yUXVlcnkubWV0cmljTmFtZXNwYWNlV2l0aFN1Yls0XSxcbiAgICAgIH07XG4gICAgICByZXR1cm4gcXVlcnlEZXRhaWxzO1xuICAgIH1cblxuICAgIGlmIChtYXRjaGVzRm9yUXVlcnkubWV0cmljTmFtZXNwYWNlICYmIGRlZmF1bHRTdWJzY3JpcHRpb25JZCkge1xuICAgICAgY29uc3QgcXVlcnlEZXRhaWxzOiBNZXRyaWNOYW1lc3BhY2VRdWVyeSA9IHtcbiAgICAgICAga2luZDogJ01ldHJpY05hbWVzcGFjZVF1ZXJ5JyxcbiAgICAgICAgcmF3UXVlcnksXG4gICAgICAgIHN1YnNjcmlwdGlvbjogZGVmYXVsdFN1YnNjcmlwdGlvbklkLFxuICAgICAgICByZXNvdXJjZUdyb3VwOiBtYXRjaGVzRm9yUXVlcnkubWV0cmljTmFtZXNwYWNlWzFdLFxuICAgICAgICBtZXRyaWNEZWZpbml0aW9uOiBtYXRjaGVzRm9yUXVlcnkubWV0cmljTmFtZXNwYWNlWzJdLFxuICAgICAgICByZXNvdXJjZU5hbWU6IG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNOYW1lc3BhY2VbM10sXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHF1ZXJ5RGV0YWlscztcbiAgICB9XG5cbiAgICBpZiAobWF0Y2hlc0ZvclF1ZXJ5Lm1ldHJpY05hbWVzICYmIGRlZmF1bHRTdWJzY3JpcHRpb25JZCkge1xuICAgICAgaWYgKG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNOYW1lc1szXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5RGV0YWlsczogTWV0cmljTmFtZXNRdWVyeSA9IHtcbiAgICAgICAgICBraW5kOiAnTWV0cmljTmFtZXNRdWVyeScsXG4gICAgICAgICAgcmF3UXVlcnksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uOiBkZWZhdWx0U3Vic2NyaXB0aW9uSWQsXG4gICAgICAgICAgcmVzb3VyY2VHcm91cDogbWF0Y2hlc0ZvclF1ZXJ5Lm1ldHJpY05hbWVzWzFdLFxuICAgICAgICAgIG1ldHJpY0RlZmluaXRpb246IG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNOYW1lc1syXSxcbiAgICAgICAgICByZXNvdXJjZU5hbWU6IG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNOYW1lc1szXSxcbiAgICAgICAgICBtZXRyaWNOYW1lc3BhY2U6IG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNOYW1lc1s0XSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5RGV0YWlscztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWF0Y2hlc0ZvclF1ZXJ5Lm1ldHJpY05hbWVzV2l0aFN1Yikge1xuICAgICAgY29uc3QgcXVlcnlEZXRhaWxzOiBNZXRyaWNOYW1lc1F1ZXJ5ID0ge1xuICAgICAgICBraW5kOiAnTWV0cmljTmFtZXNRdWVyeScsXG4gICAgICAgIHJhd1F1ZXJ5LFxuICAgICAgICBzdWJzY3JpcHRpb246IG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNOYW1lc1dpdGhTdWJbMV0sXG4gICAgICAgIHJlc291cmNlR3JvdXA6IG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNOYW1lc1dpdGhTdWJbMl0sXG4gICAgICAgIG1ldHJpY0RlZmluaXRpb246IG1hdGNoZXNGb3JRdWVyeS5tZXRyaWNOYW1lc1dpdGhTdWJbM10sXG4gICAgICAgIHJlc291cmNlTmFtZTogbWF0Y2hlc0ZvclF1ZXJ5Lm1ldHJpY05hbWVzV2l0aFN1Yls0XSxcbiAgICAgICAgbWV0cmljTmFtZXNwYWNlOiBtYXRjaGVzRm9yUXVlcnkubWV0cmljTmFtZXNXaXRoU3ViWzVdLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBxdWVyeURldGFpbHM7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoZXNGb3JRdWVyeS53b3Jrc3BhY2VzUXVlcnlXaXRoU3ViKSB7XG4gICAgICBjb25zdCBxdWVyeURldGFpbHM6IFdvcmtzcGFjZXNRdWVyeSA9IHtcbiAgICAgICAga2luZDogJ1dvcmtzcGFjZXNRdWVyeScsXG4gICAgICAgIHJhd1F1ZXJ5LFxuICAgICAgICBzdWJzY3JpcHRpb246IChtYXRjaGVzRm9yUXVlcnkud29ya3NwYWNlc1F1ZXJ5V2l0aFN1YlsxXSB8fCAnJykudHJpbSgpLFxuICAgICAgfTtcbiAgICAgIHJldHVybiBxdWVyeURldGFpbHM7XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoZXNGb3JRdWVyeS53b3Jrc3BhY2VzUXVlcnkgJiYgZGVmYXVsdFN1YnNjcmlwdGlvbklkKSB7XG4gICAgICBjb25zdCBxdWVyeURldGFpbHM6IFdvcmtzcGFjZXNRdWVyeSA9IHtcbiAgICAgICAga2luZDogJ1dvcmtzcGFjZXNRdWVyeScsXG4gICAgICAgIHJhd1F1ZXJ5LFxuICAgICAgICBzdWJzY3JpcHRpb246IGRlZmF1bHRTdWJzY3JpcHRpb25JZCxcbiAgICAgIH07XG4gICAgICByZXR1cm4gcXVlcnlEZXRhaWxzO1xuICAgIH1cblxuICAgIC8vIGZhbGxiYWNrXG4gICAgY29uc3QgcXVlcnlEZXRhaWxzOiBTdWJzY3JpcHRpb25zUXVlcnkgPSB7IGtpbmQ6ICdTdWJzY3JpcHRpb25zUXVlcnknLCByYXdRdWVyeSB9O1xuICAgIHJldHVybiBxdWVyeURldGFpbHM7XG4gIH07XG5cbiAgY29uc3QgcXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5ID0ge1xuICAgIHJlZklkOiAnQScsXG4gICAgcXVlcnlUeXBlOiBBenVyZVF1ZXJ5VHlwZS5HcmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuLFxuICAgIGdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm46IGNyZWF0ZUdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRGV0YWlscygpLFxuICAgIHN1YnNjcmlwdGlvbjogZGVmYXVsdFN1YnNjcmlwdGlvbklkLFxuICB9O1xuICByZXR1cm4gcXVlcnk7XG59O1xuXG5jb25zdCBjcmVhdGVMb2dBbmFseXRpY3NUZW1wbGF0ZVZhcmlhYmxlUXVlcnkgPSBhc3luYyAoXG4gIHJhd1F1ZXJ5OiBzdHJpbmcsXG4gIGRhdGFzb3VyY2U6IERhdGFTb3VyY2Vcbik6IFByb21pc2U8QXp1cmVNb25pdG9yUXVlcnk+ID0+IHtcbiAgY29uc3QgZGVmYXVsdFN1YnNjcmlwdGlvbklkID0gZGF0YXNvdXJjZS5henVyZU1vbml0b3JEYXRhc291cmNlLmRlZmF1bHRTdWJzY3JpcHRpb25JZDtcbiAgbGV0IHJlc291cmNlID0gJyc7XG4gIC8vIGlmIHRoZXJlJ3MgYW4gZXhpc3RpbmcgcXVlcnksIHdlIHRyeSB0byBnZXQgdGhlIHJlc291cmNlc3VyaSBmcm9tIGEgZGVwcmVjYXRlZCBkZWZhdWx0IHdvcmtzcGFjZVxuICAvLyBhIG5vdGUgdGhpcyBpcyB2ZXJ5IHNpbWlsYXIgbG9naWMgdG8gd2hhdCBpcyB1c2VkIGluIHVzZU1pZ3JhdGlvbnMgYnV0IG1vdmVkIG91dCBvZiB0aGUgcmVhY3QtaG9vayBsYW5kXG4gIGlmIChyYXdRdWVyeSkge1xuICAgIGNvbnN0IGRlZmF1bHRXb3Jrc3BhY2VJZCA9IGRhdGFzb3VyY2UuYXp1cmVMb2dBbmFseXRpY3NEYXRhc291cmNlLmdldERlcHJlY2F0ZWREZWZhdWx0V29ya1NwYWNlKCk7XG4gICAgaWYgKGRlZmF1bHRXb3Jrc3BhY2VJZCkge1xuICAgICAgY29uc3QgaXNXb3Jrc3BhY2VHVUlEID0gaXNHVUlEaXNoKGRlZmF1bHRXb3Jrc3BhY2VJZCk7XG4gICAgICBpZiAoaXNXb3Jrc3BhY2VHVUlEKSB7XG4gICAgICAgIHJlc291cmNlID0gYXdhaXQgZGF0YXNvdXJjZS5yZXNvdXJjZVBpY2tlckRhdGEuZ2V0UmVzb3VyY2VVUklGcm9tV29ya3NwYWNlKGRlZmF1bHRXb3Jrc3BhY2VJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvdXJjZSA9IGRlZmF1bHRXb3Jrc3BhY2VJZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWF5YmVGaXJzdFdvcmtzcGFjZSA9IGF3YWl0IGRhdGFzb3VyY2UuYXp1cmVMb2dBbmFseXRpY3NEYXRhc291cmNlLmdldEZpcnN0V29ya3NwYWNlKCk7XG4gICAgICByZXNvdXJjZSA9IG1heWJlRmlyc3RXb3Jrc3BhY2UgfHwgJyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZWZJZDogJ0EnLFxuICAgIHF1ZXJ5VHlwZTogQXp1cmVRdWVyeVR5cGUuTG9nQW5hbHl0aWNzLFxuICAgIGF6dXJlTG9nQW5hbHl0aWNzOiB7XG4gICAgICBxdWVyeTogcmF3UXVlcnksXG4gICAgICByZXNvdXJjZSxcbiAgICB9LFxuICAgIHN1YnNjcmlwdGlvbjogZGVmYXVsdFN1YnNjcmlwdGlvbklkLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IG1pZ3JhdGVTdHJpbmdRdWVyaWVzVG9PYmplY3RRdWVyaWVzID0gYXN5bmMgKFxuICByYXdRdWVyeTogc3RyaW5nIHwgQXp1cmVNb25pdG9yUXVlcnksXG4gIG9wdGlvbnM6IHsgZGF0YXNvdXJjZTogRGF0YVNvdXJjZSB9XG4pOiBQcm9taXNlPEF6dXJlTW9uaXRvclF1ZXJ5PiA9PiB7XG4gIC8vIG5vIG5lZWQgdG8gbWlncmF0ZSBhbHJlYWR5IG1pZ3JhdGVkIHF1ZXJpZXNcbiAgaWYgKHR5cGVvZiByYXdRdWVyeSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcmF3UXVlcnk7XG4gIH1cblxuICByZXR1cm4gaXNHcmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuUXVlcnkocmF3UXVlcnkpXG4gICAgPyBjcmVhdGVHcmFmYW5hVGVtcGxhdGVWYXJpYWJsZVF1ZXJ5KHJhd1F1ZXJ5LCBvcHRpb25zLmRhdGFzb3VyY2UpXG4gICAgOiBjcmVhdGVMb2dBbmFseXRpY3NUZW1wbGF0ZVZhcmlhYmxlUXVlcnkocmF3UXVlcnksIG9wdGlvbnMuZGF0YXNvdXJjZSk7XG59O1xuIiwiaW1wb3J0IHsgZGF0ZVRpbWUgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9nQW5hbHl0aWNzUXVlcnlzdHJpbmdCdWlsZGVyIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJhd1F1ZXJ5U3RyaW5nOiBzdHJpbmcsIHB1YmxpYyBvcHRpb25zOiBhbnksIHB1YmxpYyBkZWZhdWx0VGltZUZpZWxkOiBhbnkpIHt9XG5cbiAgZ2VuZXJhdGUoKSB7XG4gICAgbGV0IHF1ZXJ5U3RyaW5nID0gdGhpcy5yYXdRdWVyeVN0cmluZztcbiAgICBjb25zdCBtYWNyb1JlZ2V4cCA9IC9cXCRfXyhbX2EtekEtWjAtOV0rKVxcKChbXigpXSopXFwpL2dpO1xuICAgIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcucmVwbGFjZShtYWNyb1JlZ2V4cCwgKG1hdGNoLCBwMSwgcDIpID0+IHtcbiAgICAgIGlmIChwMSA9PT0gJ2NvbnRhaW5zJykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRNdWx0aUNvbnRhaW5zKHAyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZy5yZXBsYWNlKC9cXCRfX2VzY2FwZU11bHRpXFwoKCdbXl0qJylcXCkvZ2ksIChtYXRjaCwgcDEpID0+IHRoaXMuZXNjYXBlKHAxKSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zKSB7XG4gICAgICBxdWVyeVN0cmluZyA9IHF1ZXJ5U3RyaW5nLnJlcGxhY2UobWFjcm9SZWdleHAsIChtYXRjaCwgcDEsIHAyKSA9PiB7XG4gICAgICAgIGlmIChwMSA9PT0gJ3RpbWVGaWx0ZXInKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGltZUZpbHRlcihwMiwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocDEgPT09ICd0aW1lRnJvbScpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGcm9tKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHAxID09PSAndGltZVRvJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldFVudGlsKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcbiAgICAgIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcucmVwbGFjZSgvXFwkX19pbnRlcnZhbC9naSwgdGhpcy5vcHRpb25zLmludGVydmFsKTtcbiAgICB9XG4gICAgY29uc3QgcmF3UXVlcnkgPSBxdWVyeVN0cmluZztcbiAgICBxdWVyeVN0cmluZyA9IGVuY29kZVVSSUNvbXBvbmVudChxdWVyeVN0cmluZyk7XG4gICAgY29uc3QgdXJpU3RyaW5nID0gYHF1ZXJ5PSR7cXVlcnlTdHJpbmd9YDtcblxuICAgIHJldHVybiB7IHVyaVN0cmluZywgcmF3UXVlcnkgfTtcbiAgfVxuXG4gIGdldEZyb20ob3B0aW9uczogYW55KSB7XG4gICAgY29uc3QgZnJvbSA9IG9wdGlvbnMucmFuZ2UuZnJvbTtcbiAgICByZXR1cm4gYGRhdGV0aW1lKCR7ZGF0ZVRpbWUoZnJvbSkuc3RhcnRPZignbWludXRlJykudG9JU09TdHJpbmcoKX0pYDtcbiAgfVxuXG4gIGdldFVudGlsKG9wdGlvbnM6IGFueSkge1xuICAgIGlmIChvcHRpb25zLnJhbmdlUmF3Py50byA9PT0gJ25vdycpIHtcbiAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICByZXR1cm4gYGRhdGV0aW1lKCR7ZGF0ZVRpbWUobm93KS5zdGFydE9mKCdtaW51dGUnKS50b0lTT1N0cmluZygpfSlgO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB1bnRpbCA9IG9wdGlvbnMucmFuZ2UudG87XG4gICAgICByZXR1cm4gYGRhdGV0aW1lKCR7ZGF0ZVRpbWUodW50aWwpLnN0YXJ0T2YoJ21pbnV0ZScpLnRvSVNPU3RyaW5nKCl9KWA7XG4gICAgfVxuICB9XG5cbiAgZ2V0VGltZUZpbHRlcih0aW1lRmllbGRBcmc6IGFueSwgb3B0aW9uczogYW55KSB7XG4gICAgY29uc3QgdGltZUZpZWxkID0gdGltZUZpZWxkQXJnIHx8IHRoaXMuZGVmYXVsdFRpbWVGaWVsZDtcbiAgICBpZiAob3B0aW9ucy5yYW5nZVJhdz8udG8gPT09ICdub3cnKSB7XG4gICAgICByZXR1cm4gYCR7dGltZUZpZWxkfSA+PSAke3RoaXMuZ2V0RnJvbShvcHRpb25zKX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYCR7dGltZUZpZWxkfSAgPj0gJHt0aGlzLmdldEZyb20ob3B0aW9ucyl9IGFuZCAke3RpbWVGaWVsZH0gPD0gJHt0aGlzLmdldFVudGlsKG9wdGlvbnMpfWA7XG4gICAgfVxuICB9XG5cbiAgZ2V0TXVsdGlDb250YWlucyhpbnB1dHM6IHN0cmluZykge1xuICAgIGNvbnN0IGZpcnN0Q29tbWFJbmRleCA9IGlucHV0cy5pbmRleE9mKCcsJyk7XG4gICAgY29uc3QgZmllbGQgPSBpbnB1dHMuc3Vic3RyaW5nKDAsIGZpcnN0Q29tbWFJbmRleCk7XG4gICAgY29uc3QgdGVtcGxhdGVWYXIgPSBpbnB1dHMuc3Vic3RyaW5nKGlucHV0cy5pbmRleE9mKCcsJykgKyAxKTtcblxuICAgIGlmICh0ZW1wbGF0ZVZhciAmJiB0ZW1wbGF0ZVZhci50b0xvd2VyQ2FzZSgpLnRyaW0oKSA9PT0gJ2FsbCcpIHtcbiAgICAgIHJldHVybiAnMSA9PSAxJztcbiAgICB9XG5cbiAgICByZXR1cm4gYCR7ZmllbGQudHJpbSgpfSBpbiAoJHt0ZW1wbGF0ZVZhci50cmltKCl9KWA7XG4gIH1cblxuICBlc2NhcGUoaW5wdXRzOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gaW5wdXRzXG4gICAgICAuc3Vic3RyaW5nKDEsIGlucHV0cy5sZW5ndGggLSAxKVxuICAgICAgLnNwbGl0KGAnLCdgKVxuICAgICAgLm1hcCgodikgPT4gYEAnJHt2fSdgKVxuICAgICAgLmpvaW4oJywgJyk7XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGFTb3VyY2VQbHVnaW4gfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcblxuaW1wb3J0IHsgQ29uZmlnRWRpdG9yIH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbmZpZ0VkaXRvcic7XG5pbXBvcnQgQXp1cmVNb25pdG9yUXVlcnlFZGl0b3IgZnJvbSAnLi9jb21wb25lbnRzL1F1ZXJ5RWRpdG9yJztcbmltcG9ydCBEYXRhc291cmNlIGZyb20gJy4vZGF0YXNvdXJjZSc7XG5pbXBvcnQgeyBBenVyZU1vbml0b3JRdWVyeSwgQXp1cmVEYXRhU291cmNlSnNvbkRhdGEgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IHBsdWdpbiA9IG5ldyBEYXRhU291cmNlUGx1Z2luPERhdGFzb3VyY2UsIEF6dXJlTW9uaXRvclF1ZXJ5LCBBenVyZURhdGFTb3VyY2VKc29uRGF0YT4oRGF0YXNvdXJjZSlcbiAgLnNldENvbmZpZ0VkaXRvcihDb25maWdFZGl0b3IpXG4gIC5zZXRRdWVyeUVkaXRvcihBenVyZU1vbml0b3JRdWVyeUVkaXRvcik7XG4iLCJpbXBvcnQgeyBEYXRhU291cmNlV2l0aEJhY2tlbmQgfSBmcm9tICdAZ3JhZmFuYS9ydW50aW1lJztcblxuaW1wb3J0IHsgRGF0YVNvdXJjZUluc3RhbmNlU2V0dGluZ3MgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9ncmFmYW5hLWRhdGEvc3JjJztcbmltcG9ydCB7XG4gIGxvY2F0aW9uRGlzcGxheU5hbWVzLFxuICBsb2dzU3VwcG9ydGVkTG9jYXRpb25zS3VzdG8sXG4gIGxvZ3NSZXNvdXJjZVR5cGVzLFxuICByZXNvdXJjZVR5cGVEaXNwbGF5TmFtZXMsXG4gIHN1cHBvcnRlZE1ldHJpY05hbWVzcGFjZXMsXG59IGZyb20gJy4uL2F6dXJlTWV0YWRhdGEnO1xuaW1wb3J0IHsgUmVzb3VyY2VSb3csIFJlc291cmNlUm93R3JvdXAsIFJlc291cmNlUm93VHlwZSB9IGZyb20gJy4uL2NvbXBvbmVudHMvUmVzb3VyY2VQaWNrZXIvdHlwZXMnO1xuaW1wb3J0IHsgYWRkUmVzb3VyY2VzLCBwYXJzZVJlc291cmNlVVJJIH0gZnJvbSAnLi4vY29tcG9uZW50cy9SZXNvdXJjZVBpY2tlci91dGlscyc7XG5pbXBvcnQge1xuICBBenVyZURhdGFTb3VyY2VKc29uRGF0YSxcbiAgQXp1cmVHcmFwaFJlc3BvbnNlLFxuICBBenVyZU1vbml0b3JRdWVyeSxcbiAgQXp1cmVSZXNvdXJjZUdyYXBoT3B0aW9ucyxcbiAgQXp1cmVSZXNvdXJjZVN1bW1hcnlJdGVtLFxuICBSYXdBenVyZVJlc291cmNlR3JvdXBJdGVtLFxuICBSYXdBenVyZVJlc291cmNlSXRlbSxcbiAgUmF3QXp1cmVTdWJzY3JpcHRpb25JdGVtLFxufSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyByb3V0ZU5hbWVzIH0gZnJvbSAnLi4vdXRpbHMvY29tbW9uJztcblxuY29uc3QgUkVTT1VSQ0VfR1JBUEhfVVJMID0gJy9wcm92aWRlcnMvTWljcm9zb2Z0LlJlc291cmNlR3JhcGgvcmVzb3VyY2VzP2FwaS12ZXJzaW9uPTIwMjEtMDMtMDEnO1xuXG5jb25zdCBsb2dzU3VwcG9ydGVkUmVzb3VyY2VUeXBlc0t1c3RvID0gbG9nc1Jlc291cmNlVHlwZXMubWFwKCh2KSA9PiBgXCIke3Z9XCJgKS5qb2luKCcsJyk7XG5jb25zdCBzdXBwb3J0ZWRNZXRyaWNOYW1lc3BhY2VzS3VzdG8gPSBzdXBwb3J0ZWRNZXRyaWNOYW1lc3BhY2VzLm1hcCgodikgPT4gYFwiJHt2LnRvTG9jYWxlTG93ZXJDYXNlKCl9XCJgKS5qb2luKCcsJyk7XG5cbmV4cG9ydCB0eXBlIFJlc291cmNlUGlja2VyUXVlcnlUeXBlID0gJ2xvZ3MnIHwgJ21ldHJpY3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXNvdXJjZVBpY2tlckRhdGEgZXh0ZW5kcyBEYXRhU291cmNlV2l0aEJhY2tlbmQ8QXp1cmVNb25pdG9yUXVlcnksIEF6dXJlRGF0YVNvdXJjZUpzb25EYXRhPiB7XG4gIHByaXZhdGUgcmVzb3VyY2VQYXRoOiBzdHJpbmc7XG4gIHJlc3VsdExpbWl0ID0gMjAwO1xuXG4gIGNvbnN0cnVjdG9yKGluc3RhbmNlU2V0dGluZ3M6IERhdGFTb3VyY2VJbnN0YW5jZVNldHRpbmdzPEF6dXJlRGF0YVNvdXJjZUpzb25EYXRhPikge1xuICAgIHN1cGVyKGluc3RhbmNlU2V0dGluZ3MpO1xuICAgIHRoaXMucmVzb3VyY2VQYXRoID0gYCR7cm91dGVOYW1lcy5yZXNvdXJjZUdyYXBofWA7XG4gIH1cblxuICBhc3luYyBmZXRjaEluaXRpYWxSb3dzKHR5cGU6IFJlc291cmNlUGlja2VyUXVlcnlUeXBlLCBjdXJyZW50U2VsZWN0aW9uPzogc3RyaW5nKTogUHJvbWlzZTxSZXNvdXJjZVJvd0dyb3VwPiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0U3Vic2NyaXB0aW9ucygpO1xuICAgIGlmICghY3VycmVudFNlbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbnM7XG4gICAgfVxuXG4gICAgbGV0IHJlc291cmNlcyA9IHN1YnNjcmlwdGlvbnM7XG4gICAgY29uc3QgcGFyc2VkVVJJID0gcGFyc2VSZXNvdXJjZVVSSShjdXJyZW50U2VsZWN0aW9uKTtcbiAgICBpZiAocGFyc2VkVVJJKSB7XG4gICAgICBjb25zdCByZXNvdXJjZUdyb3VwVVJJID0gYC9zdWJzY3JpcHRpb25zLyR7cGFyc2VkVVJJLnN1YnNjcmlwdGlvbklEfS9yZXNvdXJjZUdyb3Vwcy8ke3BhcnNlZFVSSS5yZXNvdXJjZUdyb3VwfWA7XG5cbiAgICAgIGlmIChwYXJzZWRVUkkucmVzb3VyY2VHcm91cCkge1xuICAgICAgICBjb25zdCByZXNvdXJjZUdyb3VwcyA9IGF3YWl0IHRoaXMuZ2V0UmVzb3VyY2VHcm91cHNCeVN1YnNjcmlwdGlvbklkKHBhcnNlZFVSSS5zdWJzY3JpcHRpb25JRCwgdHlwZSk7XG4gICAgICAgIHJlc291cmNlcyA9IGFkZFJlc291cmNlcyhyZXNvdXJjZXMsIGAvc3Vic2NyaXB0aW9ucy8ke3BhcnNlZFVSSS5zdWJzY3JpcHRpb25JRH1gLCByZXNvdXJjZUdyb3Vwcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJzZWRVUkkucmVzb3VyY2UpIHtcbiAgICAgICAgY29uc3QgcmVzb3VyY2VzRm9yUmVzb3VyY2VHcm91cCA9IGF3YWl0IHRoaXMuZ2V0UmVzb3VyY2VzRm9yUmVzb3VyY2VHcm91cChyZXNvdXJjZUdyb3VwVVJJLCB0eXBlKTtcbiAgICAgICAgcmVzb3VyY2VzID0gYWRkUmVzb3VyY2VzKHJlc291cmNlcywgcmVzb3VyY2VHcm91cFVSSSwgcmVzb3VyY2VzRm9yUmVzb3VyY2VHcm91cCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZXM7XG4gIH1cblxuICBhc3luYyBmZXRjaEFuZEFwcGVuZE5lc3RlZFJvdyhcbiAgICByb3dzOiBSZXNvdXJjZVJvd0dyb3VwLFxuICAgIHBhcmVudFJvdzogUmVzb3VyY2VSb3csXG4gICAgdHlwZTogUmVzb3VyY2VQaWNrZXJRdWVyeVR5cGVcbiAgKTogUHJvbWlzZTxSZXNvdXJjZVJvd0dyb3VwPiB7XG4gICAgY29uc3QgbmVzdGVkUm93cyA9XG4gICAgICBwYXJlbnRSb3cudHlwZSA9PT0gUmVzb3VyY2VSb3dUeXBlLlN1YnNjcmlwdGlvblxuICAgICAgICA/IGF3YWl0IHRoaXMuZ2V0UmVzb3VyY2VHcm91cHNCeVN1YnNjcmlwdGlvbklkKHBhcmVudFJvdy5pZCwgdHlwZSlcbiAgICAgICAgOiBhd2FpdCB0aGlzLmdldFJlc291cmNlc0ZvclJlc291cmNlR3JvdXAocGFyZW50Um93LmlkLCB0eXBlKTtcblxuICAgIHJldHVybiBhZGRSZXNvdXJjZXMocm93cywgcGFyZW50Um93LnVyaSwgbmVzdGVkUm93cyk7XG4gIH1cblxuICBzZWFyY2ggPSBhc3luYyAoc2VhcmNoUGhyYXNlOiBzdHJpbmcsIHNlYXJjaFR5cGU6IFJlc291cmNlUGlja2VyUXVlcnlUeXBlKTogUHJvbWlzZTxSZXNvdXJjZVJvd0dyb3VwPiA9PiB7XG4gICAgbGV0IHNlYXJjaFF1ZXJ5ID0gJ3Jlc291cmNlcyc7XG4gICAgaWYgKHNlYXJjaFR5cGUgPT09ICdsb2dzJykge1xuICAgICAgc2VhcmNoUXVlcnkgKz0gYFxuICAgICAgfCB1bmlvbiByZXNvdXJjZWNvbnRhaW5lcnNgO1xuICAgIH1cbiAgICBzZWFyY2hRdWVyeSArPSBgXG4gICAgICAgIHwgd2hlcmUgaWQgY29udGFpbnMgXCIke3NlYXJjaFBocmFzZX1cIlxuICAgICAgICAke3RoaXMuZmlsdGVyQnlUeXBlKHNlYXJjaFR5cGUpfVxuICAgICAgICB8IG9yZGVyIGJ5IHRvbG93ZXIobmFtZSkgYXNjXG4gICAgICAgIHwgbGltaXQgJHt0aGlzLnJlc3VsdExpbWl0fVxuICAgICAgYDtcbiAgICBjb25zdCB7IGRhdGE6IHJlc3BvbnNlIH0gPSBhd2FpdCB0aGlzLm1ha2VSZXNvdXJjZUdyYXBoUmVxdWVzdDxSYXdBenVyZVJlc291cmNlSXRlbVtdPihzZWFyY2hRdWVyeSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgcGFyc2VkVXJpID0gcGFyc2VSZXNvdXJjZVVSSShpdGVtLmlkKTtcbiAgICAgIGlmICghcGFyc2VkVXJpIHx8ICEocGFyc2VkVXJpLnJlc291cmNlIHx8IHBhcnNlZFVyaS5yZXNvdXJjZUdyb3VwIHx8IHBhcnNlZFVyaS5zdWJzY3JpcHRpb25JRCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZmV0Y2ggcmVzb3VyY2UgZGV0YWlscycpO1xuICAgICAgfVxuICAgICAgbGV0IGlkID0gcGFyc2VkVXJpLnN1YnNjcmlwdGlvbklEO1xuICAgICAgbGV0IHR5cGUgPSBSZXNvdXJjZVJvd1R5cGUuU3Vic2NyaXB0aW9uO1xuICAgICAgaWYgKHBhcnNlZFVyaS5yZXNvdXJjZSkge1xuICAgICAgICBpZCA9IHBhcnNlZFVyaS5yZXNvdXJjZTtcbiAgICAgICAgdHlwZSA9IFJlc291cmNlUm93VHlwZS5SZXNvdXJjZTtcbiAgICAgIH0gZWxzZSBpZiAocGFyc2VkVXJpLnJlc291cmNlR3JvdXApIHtcbiAgICAgICAgaWQgPSBwYXJzZWRVcmkucmVzb3VyY2VHcm91cDtcbiAgICAgICAgdHlwZSA9IFJlc291cmNlUm93VHlwZS5SZXNvdXJjZUdyb3VwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICBpZCxcbiAgICAgICAgdXJpOiBpdGVtLmlkLFxuICAgICAgICByZXNvdXJjZUdyb3VwTmFtZTogaXRlbS5yZXNvdXJjZUdyb3VwLFxuICAgICAgICB0eXBlLFxuICAgICAgICB0eXBlTGFiZWw6IHJlc291cmNlVHlwZURpc3BsYXlOYW1lc1tpdGVtLnR5cGVdIHx8IGl0ZW0udHlwZSxcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uRGlzcGxheU5hbWVzW2l0ZW0ubG9jYXRpb25dIHx8IGl0ZW0ubG9jYXRpb24sXG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIHByaXZhdGVcbiAgYXN5bmMgZ2V0U3Vic2NyaXB0aW9ucygpOiBQcm9taXNlPFJlc291cmNlUm93R3JvdXA+IHtcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICByZXNvdXJjZXNcbiAgICB8IGpvaW4ga2luZD1pbm5lciAoXG4gICAgICAgICAgICAgIFJlc291cmNlQ29udGFpbmVyc1xuICAgICAgICAgICAgICAgIHwgd2hlcmUgdHlwZSA9PSAnbWljcm9zb2Z0LnJlc291cmNlcy9zdWJzY3JpcHRpb25zJ1xuICAgICAgICAgICAgICAgIHwgcHJvamVjdCBzdWJzY3JpcHRpb25OYW1lPW5hbWUsIHN1YnNjcmlwdGlvblVSST1pZCwgc3Vic2NyaXB0aW9uSWRcbiAgICAgICAgICAgICAgKSBvbiBzdWJzY3JpcHRpb25JZFxuICAgIHwgc3VtbWFyaXplIGNvdW50KCkgYnkgc3Vic2NyaXB0aW9uTmFtZSwgc3Vic2NyaXB0aW9uVVJJLCBzdWJzY3JpcHRpb25JZFxuICAgIHwgb3JkZXIgYnkgc3Vic2NyaXB0aW9uTmFtZSBkZXNjXG4gIGA7XG5cbiAgICBsZXQgcmVzb3VyY2VzOiBSYXdBenVyZVN1YnNjcmlwdGlvbkl0ZW1bXSA9IFtdO1xuXG4gICAgbGV0IGFsbEZldGNoZWQgPSBmYWxzZTtcbiAgICBsZXQgJHNraXBUb2tlbiA9IHVuZGVmaW5lZDtcbiAgICB3aGlsZSAoIWFsbEZldGNoZWQpIHtcbiAgICAgIC8vIFRoZSByZXNwb25zZSBtYXkgaW5jbHVkZSBzZXZlcmFsIHBhZ2VzXG4gICAgICBsZXQgb3B0aW9uczogUGFydGlhbDxBenVyZVJlc291cmNlR3JhcGhPcHRpb25zPiA9IHt9O1xuICAgICAgaWYgKCRza2lwVG9rZW4pIHtcbiAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAkc2tpcFRva2VuLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzb3VyY2VSZXNwb25zZSA9IGF3YWl0IHRoaXMubWFrZVJlc291cmNlR3JhcGhSZXF1ZXN0PFJhd0F6dXJlU3Vic2NyaXB0aW9uSXRlbVtdPihxdWVyeSwgMSwgb3B0aW9ucyk7XG4gICAgICBpZiAoIXJlc291cmNlUmVzcG9uc2UuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBzdWJzY3JpcHRpb25zIHdlcmUgZm91bmQnKTtcbiAgICAgIH1cbiAgICAgIHJlc291cmNlcyA9IHJlc291cmNlcy5jb25jYXQocmVzb3VyY2VSZXNwb25zZS5kYXRhKTtcbiAgICAgICRza2lwVG9rZW4gPSByZXNvdXJjZVJlc3BvbnNlLiRza2lwVG9rZW47XG4gICAgICBhbGxGZXRjaGVkID0gISRza2lwVG9rZW47XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc291cmNlcy5tYXAoKHN1YnNjcmlwdGlvbikgPT4gKHtcbiAgICAgIG5hbWU6IHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25OYW1lLFxuICAgICAgaWQ6IHN1YnNjcmlwdGlvbi5zdWJzY3JpcHRpb25JZCxcbiAgICAgIHVyaTogYC9zdWJzY3JpcHRpb25zLyR7c3Vic2NyaXB0aW9uLnN1YnNjcmlwdGlvbklkfWAsXG4gICAgICB0eXBlTGFiZWw6ICdTdWJzY3JpcHRpb24nLFxuICAgICAgdHlwZTogUmVzb3VyY2VSb3dUeXBlLlN1YnNjcmlwdGlvbixcbiAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICB9KSk7XG4gIH1cblxuICBhc3luYyBnZXRSZXNvdXJjZUdyb3Vwc0J5U3Vic2NyaXB0aW9uSWQoXG4gICAgc3Vic2NyaXB0aW9uSWQ6IHN0cmluZyxcbiAgICB0eXBlOiBSZXNvdXJjZVBpY2tlclF1ZXJ5VHlwZVxuICApOiBQcm9taXNlPFJlc291cmNlUm93R3JvdXA+IHtcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICByZXNvdXJjZXNcbiAgICAgfCBqb2luIGtpbmQ9aW5uZXIgKFxuICAgICAgIFJlc291cmNlQ29udGFpbmVyc1xuICAgICAgIHwgd2hlcmUgdHlwZSA9PSAnbWljcm9zb2Z0LnJlc291cmNlcy9zdWJzY3JpcHRpb25zL3Jlc291cmNlZ3JvdXBzJ1xuICAgICAgIHwgcHJvamVjdCByZXNvdXJjZUdyb3VwVVJJPWlkLCByZXNvdXJjZUdyb3VwTmFtZT1uYW1lLCByZXNvdXJjZUdyb3VwLCBzdWJzY3JpcHRpb25JZFxuICAgICApIG9uIHJlc291cmNlR3JvdXAsIHN1YnNjcmlwdGlvbklkXG5cbiAgICAgJHt0aGlzLmZpbHRlckJ5VHlwZSh0eXBlKX1cbiAgICAgfCB3aGVyZSBzdWJzY3JpcHRpb25JZCA9PSAnJHtzdWJzY3JpcHRpb25JZH0nXG4gICAgIHwgc3VtbWFyaXplIGNvdW50KCkgYnkgcmVzb3VyY2VHcm91cE5hbWUsIHJlc291cmNlR3JvdXBVUklcbiAgICAgfCBvcmRlciBieSByZXNvdXJjZUdyb3VwVVJJIGFzY2A7XG5cbiAgICBsZXQgcmVzb3VyY2VHcm91cHM6IFJhd0F6dXJlUmVzb3VyY2VHcm91cEl0ZW1bXSA9IFtdO1xuICAgIGxldCBhbGxGZXRjaGVkID0gZmFsc2U7XG4gICAgbGV0ICRza2lwVG9rZW4gPSB1bmRlZmluZWQ7XG4gICAgd2hpbGUgKCFhbGxGZXRjaGVkKSB7XG4gICAgICAvLyBUaGUgcmVzcG9uc2UgbWF5IGluY2x1ZGUgc2V2ZXJhbCBwYWdlc1xuICAgICAgbGV0IG9wdGlvbnM6IFBhcnRpYWw8QXp1cmVSZXNvdXJjZUdyYXBoT3B0aW9ucz4gPSB7fTtcbiAgICAgIGlmICgkc2tpcFRva2VuKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgJHNraXBUb2tlbixcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc291cmNlUmVzcG9uc2UgPSBhd2FpdCB0aGlzLm1ha2VSZXNvdXJjZUdyYXBoUmVxdWVzdDxSYXdBenVyZVJlc291cmNlR3JvdXBJdGVtW10+KHF1ZXJ5LCAxLCBvcHRpb25zKTtcbiAgICAgIHJlc291cmNlR3JvdXBzID0gcmVzb3VyY2VHcm91cHMuY29uY2F0KHJlc291cmNlUmVzcG9uc2UuZGF0YSk7XG4gICAgICAkc2tpcFRva2VuID0gcmVzb3VyY2VSZXNwb25zZS4kc2tpcFRva2VuO1xuICAgICAgYWxsRmV0Y2hlZCA9ICEkc2tpcFRva2VuO1xuICAgIH1cblxuICAgIHJldHVybiByZXNvdXJjZUdyb3Vwcy5tYXAoKHIpID0+IHtcbiAgICAgIGNvbnN0IHBhcnNlZFVyaSA9IHBhcnNlUmVzb3VyY2VVUkkoci5yZXNvdXJjZUdyb3VwVVJJKTtcbiAgICAgIGlmICghcGFyc2VkVXJpIHx8ICFwYXJzZWRVcmkucmVzb3VyY2VHcm91cCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBmZXRjaCByZXNvdXJjZSBncm91cHMnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHIucmVzb3VyY2VHcm91cE5hbWUsXG4gICAgICAgIHVyaTogci5yZXNvdXJjZUdyb3VwVVJJLFxuICAgICAgICBpZDogcGFyc2VkVXJpLnJlc291cmNlR3JvdXAsXG4gICAgICAgIHR5cGU6IFJlc291cmNlUm93VHlwZS5SZXNvdXJjZUdyb3VwLFxuICAgICAgICB0eXBlTGFiZWw6ICdSZXNvdXJjZSBHcm91cCcsXG4gICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBnZXRSZXNvdXJjZXNGb3JSZXNvdXJjZUdyb3VwKFxuICAgIHJlc291cmNlR3JvdXBJZDogc3RyaW5nLFxuICAgIHR5cGU6IFJlc291cmNlUGlja2VyUXVlcnlUeXBlXG4gICk6IFByb21pc2U8UmVzb3VyY2VSb3dHcm91cD4ge1xuICAgIGNvbnN0IHsgZGF0YTogcmVzcG9uc2UgfSA9IGF3YWl0IHRoaXMubWFrZVJlc291cmNlR3JhcGhSZXF1ZXN0PFJhd0F6dXJlUmVzb3VyY2VJdGVtW10+KGBcbiAgICAgIHJlc291cmNlc1xuICAgICAgfCB3aGVyZSBpZCBoYXNwcmVmaXggXCIke3Jlc291cmNlR3JvdXBJZH1cIlxuICAgICAgJHt0aGlzLmZpbHRlckJ5VHlwZSh0eXBlKX0gYW5kIGxvY2F0aW9uIGluICgke2xvZ3NTdXBwb3J0ZWRMb2NhdGlvbnNLdXN0b30pXG4gICAgYCk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2UubWFwKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBwYXJzZWRVcmkgPSBwYXJzZVJlc291cmNlVVJJKGl0ZW0uaWQpO1xuICAgICAgaWYgKCFwYXJzZWRVcmkgfHwgIXBhcnNlZFVyaS5yZXNvdXJjZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBmZXRjaCByZXNvdXJjZSBkZXRhaWxzJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgIGlkOiBwYXJzZWRVcmkucmVzb3VyY2UsXG4gICAgICAgIHVyaTogaXRlbS5pZCxcbiAgICAgICAgcmVzb3VyY2VHcm91cE5hbWU6IGl0ZW0ucmVzb3VyY2VHcm91cCxcbiAgICAgICAgdHlwZTogUmVzb3VyY2VSb3dUeXBlLlJlc291cmNlLFxuICAgICAgICB0eXBlTGFiZWw6IHJlc291cmNlVHlwZURpc3BsYXlOYW1lc1tpdGVtLnR5cGVdIHx8IGl0ZW0udHlwZSxcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uRGlzcGxheU5hbWVzW2l0ZW0ubG9jYXRpb25dIHx8IGl0ZW0ubG9jYXRpb24sXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlZCB0byBtYWtlIHRoZSBzZWxlY3QgcmVzb3VyY2UgYnV0dG9uIHRoYXQgbGF1bmNoZXMgdGhlIHJlc291cmNlIHBpY2tlciBzaG93IGEgbmljZXIgZmlsZSBwYXRoIHRvIHVzZXJzXG4gIGFzeW5jIGdldFJlc291cmNlVVJJRGlzcGxheVByb3BlcnRpZXMocmVzb3VyY2VVUkk6IHN0cmluZyk6IFByb21pc2U8QXp1cmVSZXNvdXJjZVN1bW1hcnlJdGVtPiB7XG4gICAgY29uc3QgeyBzdWJzY3JpcHRpb25JRCwgcmVzb3VyY2VHcm91cCwgcmVzb3VyY2UgfSA9IHBhcnNlUmVzb3VyY2VVUkkocmVzb3VyY2VVUkkpID8/IHt9O1xuXG4gICAgaWYgKCFzdWJzY3JpcHRpb25JRCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlc291cmNlIFVSSSBwYXNzZWQnKTtcbiAgICB9XG5cbiAgICAvLyByZXNvdXJjZUdyb3VwVVJJIGFuZCByZXNvdXJjZVVSSSBjb3VsZCBiZSBpbnZhbGlkIHZhbHVlcywgYnV0IHRoYXQncyBva2F5IGJlY2F1c2UgdGhlIGpvaW5cbiAgICAvLyB3aWxsIGp1c3Qgc2lsZW50bHkgZmFpbCBhcyBleHBlY3RlZFxuICAgIGNvbnN0IHN1YnNjcmlwdGlvblVSSSA9IGAvc3Vic2NyaXB0aW9ucy8ke3N1YnNjcmlwdGlvbklEfWA7XG4gICAgY29uc3QgcmVzb3VyY2VHcm91cFVSSSA9IGAke3N1YnNjcmlwdGlvblVSSX0vcmVzb3VyY2VHcm91cHMvJHtyZXNvdXJjZUdyb3VwfWA7XG5cbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICByZXNvdXJjZWNvbnRhaW5lcnNcbiAgICB8IHdoZXJlIHR5cGUgPT0gXCJtaWNyb3NvZnQucmVzb3VyY2VzL3N1YnNjcmlwdGlvbnNcIlxuICAgIHwgd2hlcmUgaWQgPX4gXCIke3N1YnNjcmlwdGlvblVSSX1cIlxuICAgIHwgcHJvamVjdCBzdWJzY3JpcHRpb25OYW1lPW5hbWUsIHN1YnNjcmlwdGlvbklkXG5cbiAgICB8IGpvaW4ga2luZD1sZWZ0b3V0ZXIgKFxuICAgICAgcmVzb3VyY2Vjb250YWluZXJzICAgICAgICAgICAgXG4gICAgICAgICAgICB8IHdoZXJlIHR5cGUgPT0gXCJtaWNyb3NvZnQucmVzb3VyY2VzL3N1YnNjcmlwdGlvbnMvcmVzb3VyY2Vncm91cHNcIlxuICAgICAgICAgICAgfCB3aGVyZSBpZCA9fiBcIiR7cmVzb3VyY2VHcm91cFVSSX1cIlxuICAgICAgICAgICAgfCBwcm9qZWN0IHJlc291cmNlR3JvdXBOYW1lPW5hbWUsIHJlc291cmNlR3JvdXAsIHN1YnNjcmlwdGlvbklkXG4gICAgICAgICkgb24gc3Vic2NyaXB0aW9uSWRcblxuICAgICAgICB8IGpvaW4ga2luZD1sZWZ0b3V0ZXIgKFxuICAgICAgICAgIHJlc291cmNlc1xuICAgICAgICAgICAgfCB3aGVyZSBpZCA9fiBcIiR7cmVzb3VyY2VVUkl9XCJcbiAgICAgICAgICAgIHwgcHJvamVjdCByZXNvdXJjZU5hbWU9bmFtZSwgc3Vic2NyaXB0aW9uSWRcbiAgICAgICAgKSBvbiBzdWJzY3JpcHRpb25JZFxuXG4gICAgICAgIHwgcHJvamVjdCBzdWJzY3JpcHRpb25OYW1lLCByZXNvdXJjZUdyb3VwTmFtZSwgcmVzb3VyY2VOYW1lXG4gICAgYDtcblxuICAgIGNvbnN0IHsgZGF0YTogcmVzcG9uc2UgfSA9IGF3YWl0IHRoaXMubWFrZVJlc291cmNlR3JhcGhSZXF1ZXN0PEF6dXJlUmVzb3VyY2VTdW1tYXJ5SXRlbVtdPihxdWVyeSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gZmV0Y2ggcmVzb3VyY2UgZGV0YWlscycpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgc3Vic2NyaXB0aW9uTmFtZSwgcmVzb3VyY2VHcm91cE5hbWUsIHJlc291cmNlTmFtZSB9ID0gcmVzcG9uc2VbMF07XG4gICAgLy8gaWYgdGhlIG5hbWUgaXMgdW5kZWZpbmVkIGl0IGNvdWxkIGJlIGJlY2F1c2UgdGhlIGlkIGlzIHVuZGVmaW5lZCBvciBiZWNhdXNlIHdlIGFyZSB1c2luZyBhIHRlbXBsYXRlIHZhcmlhYmxlLlxuICAgIC8vIEVpdGhlciB3YXkgd2UgY2FuIHVzZSBpdCBhcyBhIGZhbGxiYWNrLiBXZSBkb24ndCByZWFsbHkgd2FudCB0byBpbnRlcnBvbGF0ZSB0aGVzZSB2YXJpYWJsZXMgYmVjYXVzZSB3ZSB3YW50XG4gICAgLy8gdG8gc2hvdyB0aGUgdXNlciB3aGVuIHRoZXkgYXJlIHVzaW5nIHRlbXBsYXRlIHZhcmlhYmxlcyBgJHN1Yi8kcmcvJHJlc291cmNlYFxuICAgIHJldHVybiB7XG4gICAgICBzdWJzY3JpcHRpb25OYW1lOiBzdWJzY3JpcHRpb25OYW1lIHx8IHN1YnNjcmlwdGlvbklELFxuICAgICAgcmVzb3VyY2VHcm91cE5hbWU6IHJlc291cmNlR3JvdXBOYW1lIHx8IHJlc291cmNlR3JvdXAsXG4gICAgICByZXNvdXJjZU5hbWU6IHJlc291cmNlTmFtZSB8fCByZXNvdXJjZSxcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgZ2V0UmVzb3VyY2VVUklGcm9tV29ya3NwYWNlKHdvcmtzcGFjZTogc3RyaW5nKSB7XG4gICAgY29uc3QgeyBkYXRhOiByZXNwb25zZSB9ID0gYXdhaXQgdGhpcy5tYWtlUmVzb3VyY2VHcmFwaFJlcXVlc3Q8UmF3QXp1cmVSZXNvdXJjZUl0ZW1bXT4oYFxuICAgICAgcmVzb3VyY2VzXG4gICAgICB8IHdoZXJlIHByb3BlcnRpZXNbJ2N1c3RvbWVySWQnXSA9PSBcIiR7d29ya3NwYWNlfVwiXG4gICAgICB8IHByb2plY3QgaWRcbiAgICBgKTtcblxuICAgIGlmICghcmVzcG9uc2UubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBmaW5kIHJlc291cmNlIGZvciB3b3Jrc3BhY2UgJyArIHdvcmtzcGFjZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlWzBdLmlkO1xuICB9XG5cbiAgYXN5bmMgbWFrZVJlc291cmNlR3JhcGhSZXF1ZXN0PFQgPSB1bmtub3duPihcbiAgICBxdWVyeTogc3RyaW5nLFxuICAgIG1heFJldHJpZXMgPSAxLFxuICAgIHJlcU9wdGlvbnM/OiBQYXJ0aWFsPEF6dXJlUmVzb3VyY2VHcmFwaE9wdGlvbnM+XG4gICk6IFByb21pc2U8QXp1cmVHcmFwaFJlc3BvbnNlPFQ+PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBvc3RSZXNvdXJjZSh0aGlzLnJlc291cmNlUGF0aCArIFJFU09VUkNFX0dSQVBIX1VSTCwge1xuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICByZXN1bHRGb3JtYXQ6ICdvYmplY3RBcnJheScsXG4gICAgICAgICAgLi4ucmVxT3B0aW9ucyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAobWF4UmV0cmllcyA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFrZVJlc291cmNlR3JhcGhSZXF1ZXN0KHF1ZXJ5LCBtYXhSZXRyaWVzIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZmlsdGVyQnlUeXBlID0gKHQ6IFJlc291cmNlUGlja2VyUXVlcnlUeXBlKSA9PiB7XG4gICAgcmV0dXJuIHQgPT09ICdsb2dzJ1xuICAgICAgPyBgfCB3aGVyZSB0eXBlIGluICgke2xvZ3NTdXBwb3J0ZWRSZXNvdXJjZVR5cGVzS3VzdG99KWBcbiAgICAgIDogYHwgd2hlcmUgdHlwZSBpbiAoJHtzdXBwb3J0ZWRNZXRyaWNOYW1lc3BhY2VzS3VzdG99KWA7XG4gIH07XG59XG4iLCJpbXBvcnQgeyBpbmNsdWRlcywgZmlsdGVyIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgcmFuZ2VVdGlsIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVHcmFpbkNvbnZlcnRlciB7XG4gIHN0YXRpYyBjcmVhdGVJU084NjAxRHVyYXRpb24odGltZUdyYWluOiBzdHJpbmcgfCBudW1iZXIsIHRpbWVHcmFpblVuaXQ6IGFueSkge1xuICAgIGNvbnN0IHRpbWVJbnRlcnZhbHMgPSBbJ2hvdXInLCAnbWludXRlJywgJ2gnLCAnbSddO1xuICAgIGlmIChpbmNsdWRlcyh0aW1lSW50ZXJ2YWxzLCB0aW1lR3JhaW5Vbml0KSkge1xuICAgICAgcmV0dXJuIGBQVCR7dGltZUdyYWlufSR7dGltZUdyYWluVW5pdFswXS50b1VwcGVyQ2FzZSgpfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGBQJHt0aW1lR3JhaW59JHt0aW1lR3JhaW5Vbml0WzBdLnRvVXBwZXJDYXNlKCl9YDtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVJU084NjAxRHVyYXRpb25Gcm9tSW50ZXJ2YWwoaW50ZXJ2YWw6IHN0cmluZykge1xuICAgIGNvbnN0IHRpbWVHcmFpbiA9ICtpbnRlcnZhbC5zbGljZSgwLCBpbnRlcnZhbC5sZW5ndGggLSAxKTtcbiAgICBjb25zdCB1bml0ID0gaW50ZXJ2YWxbaW50ZXJ2YWwubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAoaW50ZXJ2YWwuaW5kZXhPZignbXMnKSA+IC0xKSB7XG4gICAgICByZXR1cm4gVGltZUdyYWluQ29udmVydGVyLmNyZWF0ZUlTTzg2MDFEdXJhdGlvbigxLCAnbScpO1xuICAgIH1cblxuICAgIGlmIChpbnRlcnZhbFtpbnRlcnZhbC5sZW5ndGggLSAxXSA9PT0gJ3MnKSB7XG4gICAgICBsZXQgdG9NaW51dGVzID0gKHRpbWVHcmFpbiAqIDYwKSAlIDYwO1xuXG4gICAgICBpZiAodG9NaW51dGVzIDwgMSkge1xuICAgICAgICB0b01pbnV0ZXMgPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gVGltZUdyYWluQ29udmVydGVyLmNyZWF0ZUlTTzg2MDFEdXJhdGlvbih0b01pbnV0ZXMsICdtJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFRpbWVHcmFpbkNvbnZlcnRlci5jcmVhdGVJU084NjAxRHVyYXRpb24odGltZUdyYWluLCB1bml0KTtcbiAgfVxuXG4gIHN0YXRpYyBmaW5kQ2xvc2VzdFRpbWVHcmFpbihpbnRlcnZhbDogYW55LCBhbGxvd2VkVGltZUdyYWluczogc3RyaW5nW10pIHtcbiAgICBjb25zdCB0aW1lR3JhaW5zID0gZmlsdGVyKGFsbG93ZWRUaW1lR3JhaW5zLCAobykgPT4gbyAhPT0gJ2F1dG8nKTtcblxuICAgIGxldCBjbG9zZXN0ID0gdGltZUdyYWluc1swXTtcbiAgICBjb25zdCBpbnRlcnZhbE1zID0gcmFuZ2VVdGlsLmludGVydmFsVG9NcyhpbnRlcnZhbCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpbWVHcmFpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIGFicyAobnVtIC0gdmFsKSA8IGFicyAobnVtIC0gY3Vycik6XG4gICAgICBpZiAoaW50ZXJ2YWxNcyA+IHJhbmdlVXRpbC5pbnRlcnZhbFRvTXModGltZUdyYWluc1tpXSkpIHtcbiAgICAgICAgaWYgKGkgKyAxIDwgdGltZUdyYWlucy5sZW5ndGgpIHtcbiAgICAgICAgICBjbG9zZXN0ID0gdGltZUdyYWluc1tpICsgMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2VzdCA9IHRpbWVHcmFpbnNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvc2VzdDtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVUaW1lR3JhaW5Gcm9tSVNPODYwMUR1cmF0aW9uKGR1cmF0aW9uOiBzdHJpbmcpIHtcbiAgICBsZXQgb2Zmc2V0ID0gMTtcbiAgICBpZiAoZHVyYXRpb24uc3Vic3RyaW5nKDAsIDIpID09PSAnUFQnKSB7XG4gICAgICBvZmZzZXQgPSAyO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gZHVyYXRpb24uc3Vic3RyaW5nKG9mZnNldCwgZHVyYXRpb24ubGVuZ3RoIC0gMSk7XG4gICAgY29uc3QgdW5pdCA9IGR1cmF0aW9uLnN1YnN0cmluZyhkdXJhdGlvbi5sZW5ndGggLSAxKTtcblxuICAgIHJldHVybiB2YWx1ZSArICcgJyArIFRpbWVHcmFpbkNvbnZlcnRlci50aW1lVW5pdFRvVGV4dCgrdmFsdWUsIHVuaXQpO1xuICB9XG5cbiAgc3RhdGljIHRpbWVVbml0VG9UZXh0KHZhbHVlOiBudW1iZXIsIHVuaXQ6IHN0cmluZykge1xuICAgIGxldCB0ZXh0ID0gJyc7XG5cbiAgICBpZiAodW5pdCA9PT0gJ1MnKSB7XG4gICAgICB0ZXh0ID0gJ3NlY29uZCc7XG4gICAgfVxuICAgIGlmICh1bml0ID09PSAnTScpIHtcbiAgICAgIHRleHQgPSAnbWludXRlJztcbiAgICB9XG4gICAgaWYgKHVuaXQgPT09ICdIJykge1xuICAgICAgdGV4dCA9ICdob3VyJztcbiAgICB9XG4gICAgaWYgKHVuaXQgPT09ICdEJykge1xuICAgICAgdGV4dCA9ICdkYXknO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSA+IDEpIHtcbiAgICAgIHJldHVybiB0ZXh0ICsgJ3MnO1xuICAgIH1cblxuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUtiblVuaXRGcm9tSVNPODYwMUR1cmF0aW9uKGR1cmF0aW9uOiBzdHJpbmcpIHtcbiAgICBpZiAoZHVyYXRpb24gPT09ICdhdXRvJykge1xuICAgICAgcmV0dXJuICdhdXRvJztcbiAgICB9XG5cbiAgICBsZXQgb2Zmc2V0ID0gMTtcbiAgICBpZiAoZHVyYXRpb24uc3Vic3RyaW5nKDAsIDIpID09PSAnUFQnKSB7XG4gICAgICBvZmZzZXQgPSAyO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gZHVyYXRpb24uc3Vic3RyaW5nKG9mZnNldCwgZHVyYXRpb24ubGVuZ3RoIC0gMSk7XG4gICAgY29uc3QgdW5pdCA9IGR1cmF0aW9uLnN1YnN0cmluZyhkdXJhdGlvbi5sZW5ndGggLSAxKTtcblxuICAgIHJldHVybiB2YWx1ZSArIFRpbWVHcmFpbkNvbnZlcnRlci50aW1lVW5pdFRvS2JuKCt2YWx1ZSwgdW5pdCk7XG4gIH1cblxuICBzdGF0aWMgdGltZVVuaXRUb0tibih2YWx1ZTogbnVtYmVyLCB1bml0OiBzdHJpbmcpIHtcbiAgICBpZiAodW5pdCA9PT0gJ1MnKSB7XG4gICAgICByZXR1cm4gJ3MnO1xuICAgIH1cbiAgICBpZiAodW5pdCA9PT0gJ00nKSB7XG4gICAgICByZXR1cm4gJ20nO1xuICAgIH1cbiAgICBpZiAodW5pdCA9PT0gJ0gnKSB7XG4gICAgICByZXR1cm4gJ2gnO1xuICAgIH1cbiAgICBpZiAodW5pdCA9PT0gJ0QnKSB7XG4gICAgICByZXR1cm4gJ2QnO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSAnLi9sb2dBbmFseXRpY3NNZXRhZGF0YSc7XG5leHBvcnQgKiBmcm9tICcuL3F1ZXJ5JztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuIiwiZXhwb3J0IGludGVyZmFjZSBBenVyZUxvZ0FuYWx5dGljc01ldGFkYXRhIHtcbiAgZnVuY3Rpb25zOiBBenVyZUxvZ0FuYWx5dGljc01ldGFkYXRhRnVuY3Rpb25bXTtcbiAgcmVzb3VyY2VUeXBlczogQXp1cmVMb2dBbmFseXRpY3NNZXRhZGF0YVJlc291cmNlVHlwZVtdO1xuICB0YWJsZXM6IEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFUYWJsZVtdO1xuICBzb2x1dGlvbnM6IEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFTb2x1dGlvbltdO1xuICB3b3Jrc3BhY2VzOiBBenVyZUxvZ0FuYWx5dGljc01ldGFkYXRhV29ya3NwYWNlW107XG4gIGNhdGVnb3JpZXM6IEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFDYXRlZ29yeVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFDYXRlZ29yeSB7XG4gIGlkOiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIHJlbGF0ZWQ6IEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFDYXRlZ29yeVJlbGF0ZWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVMb2dBbmFseXRpY3NNZXRhZGF0YUNhdGVnb3J5UmVsYXRlZCB7XG4gIHRhYmxlczogc3RyaW5nW107XG4gIGZ1bmN0aW9ucz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFGdW5jdGlvbiB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgZGlzcGxheU5hbWU/OiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGJvZHk6IHN0cmluZztcbiAgcGFyYW1ldGVycz86IHN0cmluZztcbiAgcmVsYXRlZDogQXp1cmVMb2dBbmFseXRpY3NNZXRhZGF0YUZ1bmN0aW9uUmVsYXRlZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBenVyZUxvZ0FuYWx5dGljc01ldGFkYXRhRnVuY3Rpb25SZWxhdGVkIHtcbiAgc29sdXRpb25zOiBzdHJpbmdbXTtcbiAgY2F0ZWdvcmllcz86IHN0cmluZ1tdO1xuICB0YWJsZXM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFSZXNvdXJjZVR5cGUge1xuICBpZDogc3RyaW5nO1xuICB0eXBlOiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHJlbGF0ZWQ6IEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFSZXNvdXJjZVR5cGVSZWxhdGVkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFSZXNvdXJjZVR5cGVSZWxhdGVkIHtcbiAgdGFibGVzOiBzdHJpbmdbXTtcbiAgd29ya3NwYWNlczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVMb2dBbmFseXRpY3NNZXRhZGF0YVNvbHV0aW9uIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICByZWxhdGVkOiBBenVyZUxvZ0FuYWx5dGljc01ldGFkYXRhU29sdXRpb25SZWxhdGVkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFTb2x1dGlvblJlbGF0ZWQge1xuICB0YWJsZXM6IHN0cmluZ1tdO1xuICBmdW5jdGlvbnM6IHN0cmluZ1tdO1xuICB3b3Jrc3BhY2VzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBenVyZUxvZ0FuYWx5dGljc01ldGFkYXRhVGFibGUge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICB0aW1lc3BhbkNvbHVtbjogc3RyaW5nO1xuICBjb2x1bW5zOiBBenVyZUxvZ0FuYWx5dGljc01ldGFkYXRhQ29sdW1uW107XG4gIHJlbGF0ZWQ6IEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFUYWJsZVJlbGF0ZWQ7XG4gIGlzVHJvdWJsZXNob290aW5nQWxsb3dlZD86IGJvb2xlYW47XG4gIGhhc0RhdGE/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFDb2x1bW4ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIGlzUHJlZmVycmVkRmFjZXQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFUYWJsZVJlbGF0ZWQge1xuICBjYXRlZ29yaWVzPzogc3RyaW5nW107XG4gIHNvbHV0aW9uczogc3RyaW5nW107XG4gIGZ1bmN0aW9ucz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFXb3Jrc3BhY2Uge1xuICBpZDogc3RyaW5nO1xuICByZXNvdXJjZUlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgcmVnaW9uOiBzdHJpbmc7XG4gIHJlbGF0ZWQ6IEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFXb3Jrc3BhY2VSZWxhdGVkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nQW5hbHl0aWNzTWV0YWRhdGFXb3Jrc3BhY2VSZWxhdGVkIHtcbiAgc29sdXRpb25zOiBzdHJpbmdbXTtcbn1cbiIsImltcG9ydCB7IERhdGFRdWVyeSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuXG5pbXBvcnQgeyBHcmFmYW5hVGVtcGxhdGVWYXJpYWJsZVF1ZXJ5IH0gZnJvbSAnLi90ZW1wbGF0ZVZhcmlhYmxlcyc7XG5cbmV4cG9ydCBlbnVtIEF6dXJlUXVlcnlUeXBlIHtcbiAgQXp1cmVNb25pdG9yID0gJ0F6dXJlIE1vbml0b3InLFxuICBMb2dBbmFseXRpY3MgPSAnQXp1cmUgTG9nIEFuYWx5dGljcycsXG4gIEF6dXJlUmVzb3VyY2VHcmFwaCA9ICdBenVyZSBSZXNvdXJjZSBHcmFwaCcsXG4gIEdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm4gPSAnR3JhZmFuYSBUZW1wbGF0ZSBWYXJpYWJsZSBGdW5jdGlvbicsXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgcXVlcnkgYXMgaXQgbW92ZXMgdGhyb3VnaCB0aGUgZnJvbnRlbmQgcXVlcnkgZWRpdG9yIGFuZCBkYXRhc291cmNlIGZpbGVzLlxuICogSXQgY2FuIHJlcHJlc2VudCBuZXcgcXVlcmllcyB0aGF0IGFyZSBzdGlsbCBiZWluZyBlZGl0ZWQsIHNvIGFsbCBwcm9wZXJ0aWVzIGFyZSBvcHRpb25hbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTW9uaXRvclF1ZXJ5IGV4dGVuZHMgRGF0YVF1ZXJ5IHtcbiAgcXVlcnlUeXBlPzogQXp1cmVRdWVyeVR5cGU7XG5cbiAgc3Vic2NyaXB0aW9uPzogc3RyaW5nO1xuXG4gIC8qKiBBUkcgdXNlcyBtdWx0aXBsZSBzdWJzY3JpcHRpb25zICovXG4gIHN1YnNjcmlwdGlvbnM/OiBzdHJpbmdbXTtcblxuICBhenVyZU1vbml0b3I/OiBBenVyZU1ldHJpY1F1ZXJ5O1xuICBhenVyZUxvZ0FuYWx5dGljcz86IEF6dXJlTG9nc1F1ZXJ5O1xuICBhenVyZVJlc291cmNlR3JhcGg/OiBBenVyZVJlc291cmNlR3JhcGhRdWVyeTtcbiAgZ3JhZmFuYVRlbXBsYXRlVmFyaWFibGVGbj86IEdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlUXVlcnk7XG59XG5cbi8qKlxuICogQXp1cmUgTW9uaXRvciBNZXRyaWNzIHN1Yi1xdWVyeSBwcm9wZXJ0aWVzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVNZXRyaWNRdWVyeSB7XG4gIHJlc291cmNlVXJpPzogc3RyaW5nO1xuICByZXNvdXJjZUdyb3VwPzogc3RyaW5nO1xuXG4gIC8qKiBSZXNvdXJjZSB0eXBlICovXG4gIG1ldHJpY0RlZmluaXRpb24/OiBzdHJpbmc7XG5cbiAgcmVzb3VyY2VOYW1lPzogc3RyaW5nO1xuICBtZXRyaWNOYW1lc3BhY2U/OiBzdHJpbmc7XG4gIG1ldHJpY05hbWU/OiBzdHJpbmc7XG4gIHRpbWVHcmFpbj86IHN0cmluZztcbiAgYWdncmVnYXRpb24/OiBzdHJpbmc7XG4gIGRpbWVuc2lvbkZpbHRlcnM/OiBBenVyZU1ldHJpY0RpbWVuc2lvbltdO1xuICBhbGlhcz86IHN0cmluZztcbiAgdG9wPzogc3RyaW5nO1xuICBhbGxvd2VkVGltZUdyYWluc01zPzogbnVtYmVyW107XG5cbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIHRpbWVHcmFpblVuaXQ/OiBzdHJpbmc7XG5cbiAgLyoqIEBkZXByZWNhdGVkIFRoaXMgcHJvcGVydHkgd2FzIG1pZ3JhdGVkIHRvIGRpbWVuc2lvbkZpbHRlcnMgYW5kIHNob3VsZCBvbmx5IGJlIGFjY2Vzc2VkIGluIHRoZSBtaWdyYXRpb24gKi9cbiAgZGltZW5zaW9uPzogc3RyaW5nO1xuXG4gIC8qKiBAZGVwcmVjYXRlZCBUaGlzIHByb3BlcnR5IHdhcyBtaWdyYXRlZCB0byBkaW1lbnNpb25GaWx0ZXJzIGFuZCBzaG91bGQgb25seSBiZSBhY2Nlc3NlZCBpbiB0aGUgbWlncmF0aW9uICovXG4gIGRpbWVuc2lvbkZpbHRlcj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBenVyZSBNb25pdG9yIExvZ3Mgc3ViLXF1ZXJ5IHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBenVyZUxvZ3NRdWVyeSB7XG4gIHF1ZXJ5Pzogc3RyaW5nO1xuICByZXN1bHRGb3JtYXQ/OiBzdHJpbmc7XG4gIHJlc291cmNlPzogc3RyaW5nO1xuXG4gIHdvcmtzcGFjZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBenVyZSBNb25pdG9yIEFSRyBzdWItcXVlcnkgcHJvcGVydGllc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlUmVzb3VyY2VHcmFwaFF1ZXJ5IHtcbiAgcXVlcnk/OiBzdHJpbmc7XG4gIHJlc3VsdEZvcm1hdD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBenVyZU1ldHJpY0RpbWVuc2lvbiB7XG4gIGRpbWVuc2lvbjogc3RyaW5nO1xuICBvcGVyYXRvcjogc3RyaW5nO1xuICBmaWx0ZXJzPzogc3RyaW5nW107XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBmaWx0ZXIgaXMgZGVwcmVjYXRlZCBpbiBmYXZvdXIgb2YgZmlsdGVycyB0byBzdXBwb3J0IG11bHRpc2VsZWN0XG4gICAqL1xuICBmaWx0ZXI/OiBzdHJpbmc7XG59XG4iLCJpbXBvcnQge1xuICBEYXRhU291cmNlSW5zdGFuY2VTZXR0aW5ncyxcbiAgRGF0YVNvdXJjZUpzb25EYXRhLFxuICBEYXRhU291cmNlU2V0dGluZ3MsXG4gIFBhbmVsRGF0YSxcbiAgVGFibGVEYXRhLFxufSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcblxuaW1wb3J0IERhdGFzb3VyY2UgZnJvbSAnLi4vZGF0YXNvdXJjZSc7XG5cbmltcG9ydCB7IEF6dXJlTW9uaXRvclF1ZXJ5IH0gZnJvbSAnLi9xdWVyeSc7XG5cbmV4cG9ydCB0eXBlIEF6dXJlRGF0YVNvdXJjZVNldHRpbmdzID0gRGF0YVNvdXJjZVNldHRpbmdzPEF6dXJlRGF0YVNvdXJjZUpzb25EYXRhLCBBenVyZURhdGFTb3VyY2VTZWN1cmVKc29uRGF0YT47XG5leHBvcnQgdHlwZSBBenVyZURhdGFTb3VyY2VJbnN0YW5jZVNldHRpbmdzID0gRGF0YVNvdXJjZUluc3RhbmNlU2V0dGluZ3M8QXp1cmVEYXRhU291cmNlSnNvbkRhdGE+O1xuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFzb3VyY2VWYWxpZGF0aW9uUmVzdWx0IHtcbiAgc3RhdHVzOiAnc3VjY2VzcycgfCAnZXJyb3InO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHRpdGxlPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEF6dXJlIGNsb3VkcyBrbm93biB0byBBenVyZSBNb25pdG9yLlxuICovXG5leHBvcnQgZW51bSBBenVyZUNsb3VkIHtcbiAgUHVibGljID0gJ0F6dXJlQ2xvdWQnLFxuICBDaGluYSA9ICdBenVyZUNoaW5hQ2xvdWQnLFxuICBVU0dvdmVybm1lbnQgPSAnQXp1cmVVU0dvdmVybm1lbnQnLFxuICBHZXJtYW55ID0gJ0F6dXJlR2VybWFuQ2xvdWQnLFxuICBOb25lID0gJycsXG59XG5cbmV4cG9ydCB0eXBlIEF6dXJlQXV0aFR5cGUgPSAnbXNpJyB8ICdjbGllbnRzZWNyZXQnO1xuXG5leHBvcnQgdHlwZSBDb25jZWFsZWRTZWNyZXQgPSBzeW1ib2w7XG5cbmludGVyZmFjZSBBenVyZUNyZWRlbnRpYWxzQmFzZSB7XG4gIGF1dGhUeXBlOiBBenVyZUF1dGhUeXBlO1xuICBkZWZhdWx0U3Vic2NyaXB0aW9uSWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVNYW5hZ2VkSWRlbnRpdHlDcmVkZW50aWFscyBleHRlbmRzIEF6dXJlQ3JlZGVudGlhbHNCYXNlIHtcbiAgYXV0aFR5cGU6ICdtc2knO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlQ2xpZW50U2VjcmV0Q3JlZGVudGlhbHMgZXh0ZW5kcyBBenVyZUNyZWRlbnRpYWxzQmFzZSB7XG4gIGF1dGhUeXBlOiAnY2xpZW50c2VjcmV0JztcbiAgYXp1cmVDbG91ZD86IHN0cmluZztcbiAgdGVuYW50SWQ/OiBzdHJpbmc7XG4gIGNsaWVudElkPzogc3RyaW5nO1xuICBjbGllbnRTZWNyZXQ/OiBzdHJpbmcgfCBDb25jZWFsZWRTZWNyZXQ7XG59XG5cbmV4cG9ydCB0eXBlIEF6dXJlQ3JlZGVudGlhbHMgPSBBenVyZU1hbmFnZWRJZGVudGl0eUNyZWRlbnRpYWxzIHwgQXp1cmVDbGllbnRTZWNyZXRDcmVkZW50aWFscztcblxuZXhwb3J0IGludGVyZmFjZSBBenVyZURhdGFTb3VyY2VKc29uRGF0YSBleHRlbmRzIERhdGFTb3VyY2VKc29uRGF0YSB7XG4gIGNsb3VkTmFtZTogc3RyaW5nO1xuICBhenVyZUF1dGhUeXBlPzogQXp1cmVBdXRoVHlwZTtcblxuICAvLyBtb25pdG9yXG4gIHRlbmFudElkPzogc3RyaW5nO1xuICBjbGllbnRJZD86IHN0cmluZztcbiAgc3Vic2NyaXB0aW9uSWQ/OiBzdHJpbmc7XG5cbiAgLy8gbG9nc1xuICAvKiogQGRlcHJlY2F0ZWQgQXp1cmUgTG9ncyBjcmVkZW50aWFscyAqL1xuICBhenVyZUxvZ0FuYWx5dGljc1NhbWVBcz86IGJvb2xlYW47XG4gIC8qKiBAZGVwcmVjYXRlZCBBenVyZSBMb2dzIGNyZWRlbnRpYWxzICovXG4gIGxvZ0FuYWx5dGljc1RlbmFudElkPzogc3RyaW5nO1xuICAvKiogQGRlcHJlY2F0ZWQgQXp1cmUgTG9ncyBjcmVkZW50aWFscyAqL1xuICBsb2dBbmFseXRpY3NDbGllbnRJZD86IHN0cmluZztcbiAgLyoqIEBkZXByZWNhdGVkIEF6dXJlIExvZ3MgY3JlZGVudGlhbHMgKi9cbiAgbG9nQW5hbHl0aWNzU3Vic2NyaXB0aW9uSWQ/OiBzdHJpbmc7XG4gIC8qKiBAZGVwcmVjYXRlZCBBenVyZSBMb2dzIGNyZWRlbnRpYWxzICovXG4gIGxvZ0FuYWx5dGljc0RlZmF1bHRXb3Jrc3BhY2U/OiBzdHJpbmc7XG5cbiAgLy8gQXBwIEluc2lnaHRzXG4gIGFwcEluc2lnaHRzQXBwSWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVEYXRhU291cmNlU2VjdXJlSnNvbkRhdGEge1xuICBjbGllbnRTZWNyZXQ/OiBzdHJpbmc7XG4gIGFwcEluc2lnaHRzQXBpS2V5Pzogc3RyaW5nO1xufVxuXG4vLyBSZXByZXNlbnRzIGFuIGVycm9ycyB0aGF0IGNvbWUgYmFjayBmcm9tIGZyb250ZW5kIHJlcXVlc3RzLlxuLy8gTm90IHRvdGFsbHkgc3VyZSBob3cgYWNjdXJhdGUgdGhpcyB0eXBlIGlzLlxuZXhwb3J0IHR5cGUgQXp1cmVNb25pdG9yRXJyb3Jpc2ggPSBFcnJvcjtcblxuLy8gQXp1cmUgTW9uaXRvciBBUEkgVHlwZXNcbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVNb25pdG9yTWV0cmljc01ldGFkYXRhUmVzcG9uc2Uge1xuICB2YWx1ZTogQXp1cmVNb25pdG9yTWV0cmljTWV0YWRhdGFJdGVtW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVNb25pdG9yTWV0cmljTWV0YWRhdGFJdGVtIHtcbiAgaWQ6IHN0cmluZztcbiAgcmVzb3VyY2VJZDogc3RyaW5nO1xuICBwcmltYXJ5QWdncmVnYXRpb25UeXBlOiBzdHJpbmc7XG4gIHN1cHBvcnRlZEFnZ3JlZ2F0aW9uVHlwZXM6IHN0cmluZ1tdO1xuICBuYW1lOiBBenVyZU1vbml0b3JMb2NhbGl6ZWRWYWx1ZTtcbiAgZGltZW5zaW9ucz86IEF6dXJlTW9uaXRvckxvY2FsaXplZFZhbHVlW107XG4gIG1ldHJpY0F2YWlsYWJpbGl0aWVzPzogQXp1cmVNb25pdG9yTWV0cmljQXZhaWxhYmlsaXR5TWV0YWRhdGFbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBenVyZU1vbml0b3JNZXRyaWNOYW1lc3BhY2VzUmVzcG9uc2Uge1xuICB2YWx1ZTogQXp1cmVNb25pdG9yTWV0cmljTmFtZXNwYWNlSXRlbVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTW9uaXRvck1ldHJpY05hbWVzcGFjZUl0ZW0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHByb3BlcnRpZXM6IHsgbWV0cmljTmFtZXNwYWNlbmFtZTogc3RyaW5nIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVNb25pdG9yTWV0cmljTmFtZXNSZXNwb25zZSB7XG4gIHZhbHVlOiBBenVyZU1vbml0b3JNZXRyaWNOYW1lSXRlbVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTW9uaXRvck1ldHJpY05hbWVJdGVtIHtcbiAgbmFtZTogeyB2YWx1ZTogc3RyaW5nOyBsb2NhbGl6ZWRWYWx1ZTogc3RyaW5nIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVNb25pdG9yTWV0cmljQXZhaWxhYmlsaXR5TWV0YWRhdGEge1xuICB0aW1lR3JhaW46IHN0cmluZztcbiAgcmV0ZW50aW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVNb25pdG9yTG9jYWxpemVkVmFsdWUge1xuICB2YWx1ZTogc3RyaW5nO1xuICBsb2NhbGl6ZWRWYWx1ZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTW9uaXRvck1ldHJpY0RlZmluaXRpb25zUmVzcG9uc2Uge1xuICBkYXRhOiB7XG4gICAgdmFsdWU6IEFycmF5PHsgbmFtZTogc3RyaW5nOyB0eXBlOiBzdHJpbmc7IGxvY2F0aW9uPzogc3RyaW5nIH0+O1xuICB9O1xuICBzdGF0dXM6IG51bWJlcjtcbiAgc3RhdHVzVGV4dDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTW9uaXRvclJlc291cmNlR3JvdXBzUmVzcG9uc2Uge1xuICBkYXRhOiB7XG4gICAgdmFsdWU6IEFycmF5PHsgbmFtZTogc3RyaW5nIH0+O1xuICB9O1xuICBzdGF0dXM6IG51bWJlcjtcbiAgc3RhdHVzVGV4dDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nc1ZhcmlhYmxlIHtcbiAgdGV4dDogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlTG9nc1RhYmxlRGF0YSBleHRlbmRzIFRhYmxlRGF0YSB7XG4gIGNvbHVtbnM6IEF6dXJlTG9nc1RhYmxlQ29sdW1uW107XG4gIHJvd3M6IGFueVtdO1xuICB0eXBlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXp1cmVMb2dzVGFibGVDb2x1bW4ge1xuICB0ZXh0OiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBenVyZU1vbml0b3JPcHRpb248VCA9IHN0cmluZz4ge1xuICBsYWJlbDogc3RyaW5nO1xuICB2YWx1ZTogVDtcbiAgb3B0aW9ucz86IEF6dXJlTW9uaXRvck9wdGlvbltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlUXVlcnlFZGl0b3JGaWVsZFByb3BzIHtcbiAgZGF0YT86IFBhbmVsRGF0YTtcbiAgcXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5O1xuICBkYXRhc291cmNlOiBEYXRhc291cmNlO1xuICBzdWJzY3JpcHRpb25JZD86IHN0cmluZztcbiAgdmFyaWFibGVPcHRpb25Hcm91cDogeyBsYWJlbDogc3RyaW5nOyBvcHRpb25zOiBBenVyZU1vbml0b3JPcHRpb25bXSB9O1xuXG4gIG9uUXVlcnlDaGFuZ2U6IChuZXdRdWVyeTogQXp1cmVNb25pdG9yUXVlcnkpID0+IHZvaWQ7XG4gIHNldEVycm9yOiAoc291cmNlOiBzdHJpbmcsIGVycm9yOiBBenVyZU1vbml0b3JFcnJvcmlzaCB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBenVyZVJlc291cmNlU3VtbWFyeUl0ZW0ge1xuICBzdWJzY3JpcHRpb25OYW1lOiBzdHJpbmc7XG4gIHJlc291cmNlR3JvdXBOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIHJlc291cmNlTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJhd0F6dXJlU3Vic2NyaXB0aW9uSXRlbSB7XG4gIHN1YnNjcmlwdGlvbk5hbWU6IHN0cmluZztcbiAgc3Vic2NyaXB0aW9uSWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSYXdBenVyZVJlc291cmNlR3JvdXBJdGVtIHtcbiAgcmVzb3VyY2VHcm91cFVSSTogc3RyaW5nO1xuICByZXNvdXJjZUdyb3VwTmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJhd0F6dXJlUmVzb3VyY2VJdGVtIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBzdWJzY3JpcHRpb25JZDogc3RyaW5nO1xuICByZXNvdXJjZUdyb3VwOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcbiAgbG9jYXRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBenVyZUdyYXBoUmVzcG9uc2U8VCA9IHVua25vd24+IHtcbiAgZGF0YTogVDtcbiAgLy8gc2tpcFRva2VuIGlzIHVzZWQgZm9yIHBhZ2luYXRpb24sIHRvIGdldCB0aGUgbmV4dCBwYWdlXG4gICRza2lwVG9rZW4/OiBzdHJpbmc7XG59XG5cbi8vIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL3Jlc3QvYXBpL2F6dXJlcmVzb3VyY2VncmFwaC9yZXNvdXJjZWdyYXBoKDIwMjEtMDMtMDEpL3Jlc291cmNlcy9yZXNvdXJjZXMjcXVlcnlyZXF1ZXN0b3B0aW9uc1xuZXhwb3J0IGludGVyZmFjZSBBenVyZVJlc291cmNlR3JhcGhPcHRpb25zIHtcbiAgJHNraXA6IG51bWJlcjtcbiAgJHNraXBUb2tlbjogc3RyaW5nO1xuICAkdG9wOiBudW1iZXI7XG4gIGFsbG93UGFydGlhbFNjb3BlczogYm9vbGVhbjtcbiAgcmVzdWx0Rm9ybWF0OiAnb2JqZWN0QXJyYXknIHwgJ3RhYmxlJztcbn1cblxuLy8gQXp1cmUgTW9uaXRvciBNZXRyaWNzIHF1ZXJ5IEFQSSBkYXRhIGZldGNoZXIgYXJndW1lbnQgdHlwZXMuXG4vLyBUaGUgdHlwZXMgcHJlZml4ZWQgYnkgTGVnYWN5IGFyZSBhcHBsaWNhYmxlIHRvIHByZS12ZXJzaW9uIDkgb2YgR3JhZmFuYVxuLy8gdGhhdCBkbyBub3QgaGF2ZSBhIHJlc291cmNlVXJpLCBpbnN0ZWFkIHRoZSByZXNvdXJjZVVyaSBpcyBidWlsdCB1cCBmcm9tXG4vLyB0aGUgc3Vic2NyaXB0aW9uLCByZXNvdXJjZSBncm91cCwgbWV0cmljIGRlZmluaXRpb24gKGEuay5hLiByZXNvdXJjZSB0eXBlKVxuLy8gYW5kIHRoZSByZXNvdXJjZSBuYW1lLlxuZXhwb3J0IHR5cGUgR2V0TWV0cmljTmFtZXNwYWNlc1F1ZXJ5ID0gQXp1cmVHZXRNZXRyaWNOYW1lc3BhY2VzUXVlcnkgfCBMZWdhY3lBenVyZUdldE1ldHJpY05hbWVzcGFjZXNRdWVyeTtcbmV4cG9ydCB0eXBlIEdldE1ldHJpY05hbWVzUXVlcnkgPSBBenVyZUdldE1ldHJpY05hbWVzUXVlcnkgfCBMZWdhY3lBenVyZUdldE1ldHJpY05hbWVzUXVlcnk7XG5leHBvcnQgdHlwZSBHZXRNZXRyaWNNZXRhZGF0YVF1ZXJ5ID0gQXp1cmVHZXRNZXRyaWNNZXRhZGF0YVF1ZXJ5IHwgTGVnYWN5QXp1cmVHZXRNZXRyaWNNZXRhZGF0YVF1ZXJ5O1xuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlR2V0TWV0cmljTmFtZXNwYWNlc1F1ZXJ5IHtcbiAgcmVzb3VyY2VVcmk6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTGVnYWN5QXp1cmVHZXRNZXRyaWNOYW1lc3BhY2VzUXVlcnkge1xuICBzdWJzY3JpcHRpb246IHN0cmluZztcbiAgcmVzb3VyY2VHcm91cDogc3RyaW5nO1xuICBtZXRyaWNEZWZpbml0aW9uOiBzdHJpbmc7XG4gIHJlc291cmNlTmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlR2V0TWV0cmljTmFtZXNRdWVyeSB7XG4gIHJlc291cmNlVXJpOiBzdHJpbmc7XG4gIG1ldHJpY05hbWVzcGFjZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlZ2FjeUF6dXJlR2V0TWV0cmljTmFtZXNRdWVyeSB7XG4gIHN1YnNjcmlwdGlvbjogc3RyaW5nO1xuICByZXNvdXJjZUdyb3VwOiBzdHJpbmc7XG4gIG1ldHJpY0RlZmluaXRpb246IHN0cmluZztcbiAgcmVzb3VyY2VOYW1lOiBzdHJpbmc7XG4gIG1ldHJpY05hbWVzcGFjZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF6dXJlR2V0TWV0cmljTWV0YWRhdGFRdWVyeSB7XG4gIHJlc291cmNlVXJpOiBzdHJpbmc7XG4gIG1ldHJpY05hbWVzcGFjZTogc3RyaW5nO1xuICBtZXRyaWNOYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVnYWN5QXp1cmVHZXRNZXRyaWNNZXRhZGF0YVF1ZXJ5IHtcbiAgc3Vic2NyaXB0aW9uOiBzdHJpbmc7XG4gIHJlc291cmNlR3JvdXA6IHN0cmluZztcbiAgbWV0cmljRGVmaW5pdGlvbjogc3RyaW5nO1xuICByZXNvdXJjZU5hbWU6IHN0cmluZztcbiAgbWV0cmljTmFtZXNwYWNlOiBzdHJpbmc7XG4gIG1ldHJpY05hbWU6IHN0cmluZztcbn1cbiIsImltcG9ydCB7IG1hcCB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IHJhbmdlVXRpbCB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgVmFyaWFibGVXaXRoTXVsdGlTdXBwb3J0IH0gZnJvbSAnYXBwL2ZlYXR1cmVzL3ZhcmlhYmxlcy90eXBlcyc7XG5cbmltcG9ydCBUaW1lZ3JhaW5Db252ZXJ0ZXIgZnJvbSAnLi4vdGltZV9ncmFpbl9jb252ZXJ0ZXInO1xuaW1wb3J0IHsgQXp1cmVNb25pdG9yT3B0aW9uIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgaGFzT3B0aW9uID0gKG9wdGlvbnM6IEF6dXJlTW9uaXRvck9wdGlvbltdLCB2YWx1ZTogc3RyaW5nKTogYm9vbGVhbiA9PlxuICBvcHRpb25zLnNvbWUoKHYpID0+ICh2Lm9wdGlvbnMgPyBoYXNPcHRpb24odi5vcHRpb25zLCB2YWx1ZSkgOiB2LnZhbHVlID09PSB2YWx1ZSkpO1xuXG5leHBvcnQgY29uc3QgZmluZE9wdGlvbnMgPSAob3B0aW9uczogQXp1cmVNb25pdG9yT3B0aW9uW10sIHZhbHVlczogc3RyaW5nW10gPSBbXSkgPT4ge1xuICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBzZXQgPSB2YWx1ZXMucmVkdWNlKChhY2N1bSwgaXRlbSkgPT4ge1xuICAgIGFjY3VtLmFkZChpdGVtKTtcbiAgICByZXR1cm4gYWNjdW07XG4gIH0sIG5ldyBTZXQoKSk7XG4gIHJldHVybiBvcHRpb25zLmZpbHRlcigob3B0aW9uKSA9PiBzZXQuaGFzKG9wdGlvbi52YWx1ZSkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHRvT3B0aW9uID0gKHY6IHsgdGV4dDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIH0pID0+ICh7IHZhbHVlOiB2LnZhbHVlLCBsYWJlbDogdi50ZXh0IH0pO1xuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRpbWVHcmFpbnNUb01zPFQgZXh0ZW5kcyB7IHZhbHVlOiBzdHJpbmcgfT4odGltZUdyYWluczogVFtdKSB7XG4gIGNvbnN0IGFsbG93ZWRUaW1lR3JhaW5zTXM6IG51bWJlcltdID0gW107XG4gIHRpbWVHcmFpbnMuZm9yRWFjaCgodGc6IGFueSkgPT4ge1xuICAgIGlmICh0Zy52YWx1ZSAhPT0gJ2F1dG8nKSB7XG4gICAgICBhbGxvd2VkVGltZUdyYWluc01zLnB1c2gocmFuZ2VVdGlsLmludGVydmFsVG9NcyhUaW1lZ3JhaW5Db252ZXJ0ZXIuY3JlYXRlS2JuVW5pdEZyb21JU084NjAxRHVyYXRpb24odGcudmFsdWUpKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGFsbG93ZWRUaW1lR3JhaW5zTXM7XG59XG5cbi8vIFJvdXRlIGRlZmluaXRpb25zIHNoYXJlZCB3aXRoIHRoZSBiYWNrZW5kLlxuLy8gQ2hlY2s6IC9wa2cvdHNkYi9henVyZW1vbml0b3IvYXp1cmVtb25pdG9yLXJlc291cmNlLWhhbmRsZXIuZ28gPHJlZ2lzdGVyUm91dGVzPlxuZXhwb3J0IGNvbnN0IHJvdXRlTmFtZXMgPSB7XG4gIGF6dXJlTW9uaXRvcjogJ2F6dXJlbW9uaXRvcicsXG4gIGxvZ0FuYWx5dGljczogJ2xvZ2FuYWx5dGljcycsXG4gIGFwcEluc2lnaHRzOiAnYXBwaW5zaWdodHMnLFxuICByZXNvdXJjZUdyYXBoOiAncmVzb3VyY2VncmFwaCcsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJwb2xhdGVWYXJpYWJsZSh2YWx1ZTogYW55LCB2YXJpYWJsZTogVmFyaWFibGVXaXRoTXVsdGlTdXBwb3J0KSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gV2hlbiBlbmFibGluZyBtdWx0aXBsZSByZXNwb25zZXMsIHF1b3RlIHRoZSB2YWx1ZSB0byBtaW1pYyB0aGUgYXJyYXkgcmVzdWx0IGJlbG93XG4gICAgLy8gZXZlbiBpZiBvbmx5IG9uZSByZXNwb25zZSBpcyBzZWxlY3RlZC4gVGhpcyBkb2VzIG5vdCBhcHBseSBpZiBvbmx5IHRoZSBcImluY2x1ZGUgYWxsXCJcbiAgICAvLyBvcHRpb24gaXMgZW5hYmxlZCBidXQgd2l0aCBhIGN1c3RvbSB2YWx1ZS5cbiAgICBpZiAodmFyaWFibGUubXVsdGkgfHwgKHZhcmlhYmxlLmluY2x1ZGVBbGwgJiYgIXZhcmlhYmxlLmFsbFZhbHVlKSkge1xuICAgICAgcmV0dXJuIFwiJ1wiICsgdmFsdWUgKyBcIidcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgY29uc3QgcXVvdGVkVmFsdWVzID0gbWFwKHZhbHVlLCAodmFsKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCInXCIgKyB2YWwgKyBcIidcIjtcbiAgfSk7XG4gIHJldHVybiBxdW90ZWRWYWx1ZXMuam9pbignLCcpO1xufVxuIiwiaW1wb3J0IHsgQW5ub3RhdGlvblF1ZXJ5IH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5cbmltcG9ydCB7IEF6dXJlTW9uaXRvclF1ZXJ5LCBBenVyZVF1ZXJ5VHlwZSB9IGZyb20gJy4uL3R5cGVzJztcblxuLy8gVGhlIG9sZCBBbmd1bGFyIGFubm90YXRpb25zIGVkaXRvciBwdXQgc29tZSBwcm9wZXJ0aWVzIChyYXdRdWVyeSwgd29ya3NwYWNlLCBzdWJzY3JpcHRpb24pXG4vLyBvbiB0aGUgcm9vdCBhbm5vdGF0aW9uIG9iamVjdCwgcmF0aGVyIHRoYW4gZG93biBpbiB0aGUgJ3RhcmdldHMnIHF1ZXJ5IHZhbHVlXG4vLyBUaGlzIG1pZ3JhdGlvbiBtb3ZlcyB0aGVtIHRvIGEgTG9nIEFuYWx5dGljcyBxdWVyeSBjb21wYXRpYmxlIHdpdGggdGhlIFJlYWN0IHF1ZXJ5IGVkaXRvclxuLy8gVGhlIG9sZCBBbmd1bGFyIGFubm90YXRpb25zIGVkaXRvciBkaWQgbm90IHN1cHBvcnQgYW55IG90aGVyIHF1ZXJ5IHR5cGVzLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWlncmF0ZUFubm90YXRpb24oYW5ub3RhdGlvbjogQW5ub3RhdGlvblF1ZXJ5PEF6dXJlTW9uaXRvclF1ZXJ5Pikge1xuICBjb25zdCBvbGRRdWVyeSA9IHR5cGVvZiBhbm5vdGF0aW9uLnJhd1F1ZXJ5ID09PSAnc3RyaW5nJyA/IGFubm90YXRpb24ucmF3UXVlcnkgOiBudWxsO1xuICBjb25zdCBvbGRXb3Jrc3BhY2UgPSB0eXBlb2YgYW5ub3RhdGlvbi53b3Jrc3BhY2UgPT09ICdzdHJpbmcnID8gYW5ub3RhdGlvbi53b3Jrc3BhY2UgOiBudWxsO1xuXG4gIGlmICghKG9sZFF1ZXJ5ICYmIG9sZFdvcmtzcGFjZSAmJiAhYW5ub3RhdGlvbi50YXJnZXQ/LmF6dXJlTG9nQW5hbHl0aWNzPy5xdWVyeSkpIHtcbiAgICByZXR1cm4gYW5ub3RhdGlvbjtcbiAgfVxuXG4gIGNvbnN0IG5ld1F1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSA9IHtcbiAgICAuLi4oYW5ub3RhdGlvbi50YXJnZXQgPz8ge30pLFxuICAgIHJlZklkOiBhbm5vdGF0aW9uLnRhcmdldD8ucmVmSWQgPz8gJ0Fubm8nLFxuICAgIHF1ZXJ5VHlwZTogQXp1cmVRdWVyeVR5cGUuTG9nQW5hbHl0aWNzLFxuICAgIGF6dXJlTG9nQW5hbHl0aWNzOiB7XG4gICAgICBxdWVyeTogb2xkUXVlcnksXG4gICAgICByZXNvdXJjZTogb2xkV29ya3NwYWNlLFxuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5hbm5vdGF0aW9uLFxuICAgIHJhd1F1ZXJ5OiB1bmRlZmluZWQsXG4gICAgd29ya3NwYWNlOiB1bmRlZmluZWQsXG4gICAgc3Vic2NyaXB0aW9uOiB1bmRlZmluZWQsXG4gICAgcXVlcnlUeXBlOiB1bmRlZmluZWQsXG4gICAgdGFyZ2V0OiBuZXdRdWVyeSxcbiAgfTtcbn1cbiIsImltcG9ydCBVcmxCdWlsZGVyIGZyb20gJy4uL2F6dXJlX21vbml0b3IvdXJsX2J1aWxkZXInO1xuaW1wb3J0IHsgc2V0S3VzdG9RdWVyeSB9IGZyb20gJy4uL2NvbXBvbmVudHMvTG9nc1F1ZXJ5RWRpdG9yL3NldFF1ZXJ5VmFsdWUnO1xuaW1wb3J0IHtcbiAgYXBwZW5kRGltZW5zaW9uRmlsdGVyLFxuICBzZXRUaW1lR3JhaW4gYXMgc2V0TWV0cmljc1RpbWVHcmFpbixcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9NZXRyaWNzUXVlcnlFZGl0b3Ivc2V0UXVlcnlWYWx1ZSc7XG5pbXBvcnQgVGltZWdyYWluQ29udmVydGVyIGZyb20gJy4uL3RpbWVfZ3JhaW5fY29udmVydGVyJztcbmltcG9ydCB7IEF6dXJlTWV0cmljRGltZW5zaW9uLCBBenVyZU1vbml0b3JRdWVyeSwgQXp1cmVRdWVyeVR5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IE9MRF9ERUZBVUxUX0RST1BET1dOX1ZBTFVFID0gJ3NlbGVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGVRdWVyeShxdWVyeTogQXp1cmVNb25pdG9yUXVlcnkpOiBBenVyZU1vbml0b3JRdWVyeSB7XG4gIGxldCB3b3JraW5nUXVlcnkgPSBxdWVyeTtcblxuICAvLyBUaGUgb2xkIGFuZ3VsYXIgY29udHJvbGxlciBhbHNvIGhhZCBhIGBtaWdyYXRlQXBwbGljYXRpb25JbnNpZ2h0c0tleXNgIG1pZ3JhaXRvbiB0aGF0XG4gIC8vIG1pZ3JhdGVkIG9sZCBwcm9wZXJ0aWVzIHRvIG90aGVyIHByb3BlcnRpZXMgdGhhdCBzdGlsbCBkbyBub3QgYXBwZWFyIHRvIGJlIHVzZWQgYW55bW9yZSwgc29cbiAgLy8gd2UgZGVjaWRlZCB0byBub3QgaW5jbHVkZSB0aGF0IG1pZ3JhdGlvbiBhbnltb3JlXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3JhZmFuYS9ncmFmYW5hL2Jsb2IvYTZhMDlhZGQvcHVibGljL2FwcC9wbHVnaW5zL2RhdGFzb3VyY2UvZ3JhZmFuYS1henVyZS1tb25pdG9yLWRhdGFzb3VyY2UvcXVlcnlfY3RybC50cyNMMjY5LUwyODhcblxuICB3b3JraW5nUXVlcnkgPSBtaWdyYXRlVGltZUdyYWlucyh3b3JraW5nUXVlcnkpO1xuICB3b3JraW5nUXVlcnkgPSBtaWdyYXRlTG9nQW5hbHl0aWNzVG9Gcm9tVGltZXMod29ya2luZ1F1ZXJ5KTtcbiAgd29ya2luZ1F1ZXJ5ID0gbWlncmF0ZVRvRGVmYXVsdE5hbWVzcGFjZSh3b3JraW5nUXVlcnkpO1xuICB3b3JraW5nUXVlcnkgPSBtaWdyYXRlRGltZW5zaW9uVG9EaW1lbnNpb25GaWx0ZXIod29ya2luZ1F1ZXJ5KTtcbiAgd29ya2luZ1F1ZXJ5ID0gbWlncmF0ZVJlc291cmNlVXJpKHdvcmtpbmdRdWVyeSk7XG4gIHdvcmtpbmdRdWVyeSA9IG1pZ3JhdGVEaW1lbnNpb25GaWx0ZXJUb0FycmF5KHdvcmtpbmdRdWVyeSk7XG5cbiAgcmV0dXJuIHdvcmtpbmdRdWVyeTtcbn1cblxuZnVuY3Rpb24gbWlncmF0ZVRpbWVHcmFpbnMocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KTogQXp1cmVNb25pdG9yUXVlcnkge1xuICBsZXQgd29ya2luZ1F1ZXJ5ID0gcXVlcnk7XG5cbiAgaWYgKHdvcmtpbmdRdWVyeS5henVyZU1vbml0b3I/LnRpbWVHcmFpblVuaXQgJiYgd29ya2luZ1F1ZXJ5LmF6dXJlTW9uaXRvci50aW1lR3JhaW4gIT09ICdhdXRvJykge1xuICAgIGNvbnN0IG5ld1RpbWVHcmFpbiA9IFRpbWVncmFpbkNvbnZlcnRlci5jcmVhdGVJU084NjAxRHVyYXRpb24oXG4gICAgICB3b3JraW5nUXVlcnkuYXp1cmVNb25pdG9yLnRpbWVHcmFpbiA/PyAnYXV0bycsXG4gICAgICB3b3JraW5nUXVlcnkuYXp1cmVNb25pdG9yLnRpbWVHcmFpblVuaXRcbiAgICApO1xuICAgIHdvcmtpbmdRdWVyeSA9IHNldE1ldHJpY3NUaW1lR3JhaW4od29ya2luZ1F1ZXJ5LCBuZXdUaW1lR3JhaW4pO1xuXG4gICAgZGVsZXRlIHdvcmtpbmdRdWVyeS5henVyZU1vbml0b3I/LnRpbWVHcmFpblVuaXQ7XG4gIH1cblxuICByZXR1cm4gd29ya2luZ1F1ZXJ5O1xufVxuXG5mdW5jdGlvbiBtaWdyYXRlTG9nQW5hbHl0aWNzVG9Gcm9tVGltZXMocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KTogQXp1cmVNb25pdG9yUXVlcnkge1xuICBsZXQgd29ya2luZ1F1ZXJ5ID0gcXVlcnk7XG5cbiAgaWYgKHdvcmtpbmdRdWVyeS5henVyZUxvZ0FuYWx5dGljcz8ucXVlcnk/Lm1hdGNoKC9cXCRfX2Zyb21cXHMvZ2kpKSB7XG4gICAgd29ya2luZ1F1ZXJ5ID0gc2V0S3VzdG9RdWVyeShcbiAgICAgIHdvcmtpbmdRdWVyeSxcbiAgICAgIHdvcmtpbmdRdWVyeS5henVyZUxvZ0FuYWx5dGljcy5xdWVyeS5yZXBsYWNlKC9cXCRfX2Zyb21cXHMvZ2ksICckX190aW1lRnJvbSgpICcpXG4gICAgKTtcbiAgfVxuXG4gIGlmICh3b3JraW5nUXVlcnkuYXp1cmVMb2dBbmFseXRpY3M/LnF1ZXJ5Py5tYXRjaCgvXFwkX190b1xccy9naSkpIHtcbiAgICB3b3JraW5nUXVlcnkgPSBzZXRLdXN0b1F1ZXJ5KFxuICAgICAgd29ya2luZ1F1ZXJ5LFxuICAgICAgd29ya2luZ1F1ZXJ5LmF6dXJlTG9nQW5hbHl0aWNzLnF1ZXJ5LnJlcGxhY2UoL1xcJF9fdG9cXHMvZ2ksICckX190aW1lVG8oKSAnKVxuICAgICk7XG4gIH1cblxuICByZXR1cm4gd29ya2luZ1F1ZXJ5O1xufVxuXG5mdW5jdGlvbiBtaWdyYXRlVG9EZWZhdWx0TmFtZXNwYWNlKHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSk6IEF6dXJlTW9uaXRvclF1ZXJ5IHtcbiAgY29uc3QgaGF2ZU1ldHJpY05hbWVzcGFjZSA9XG4gICAgcXVlcnkuYXp1cmVNb25pdG9yPy5tZXRyaWNOYW1lc3BhY2UgJiYgcXVlcnkuYXp1cmVNb25pdG9yLm1ldHJpY05hbWVzcGFjZSAhPT0gT0xEX0RFRkFVTFRfRFJPUERPV05fVkFMVUU7XG5cbiAgaWYgKCFoYXZlTWV0cmljTmFtZXNwYWNlICYmIHF1ZXJ5LmF6dXJlTW9uaXRvcj8ubWV0cmljRGVmaW5pdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5xdWVyeSxcbiAgICAgIGF6dXJlTW9uaXRvcjoge1xuICAgICAgICAuLi5xdWVyeS5henVyZU1vbml0b3IsXG4gICAgICAgIG1ldHJpY05hbWVzcGFjZTogcXVlcnkuYXp1cmVNb25pdG9yLm1ldHJpY0RlZmluaXRpb24sXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gcXVlcnk7XG59XG5cbmZ1bmN0aW9uIG1pZ3JhdGVEaW1lbnNpb25Ub0RpbWVuc2lvbkZpbHRlcihxdWVyeTogQXp1cmVNb25pdG9yUXVlcnkpOiBBenVyZU1vbml0b3JRdWVyeSB7XG4gIGxldCB3b3JraW5nUXVlcnkgPSBxdWVyeTtcblxuICBjb25zdCBvbGREaW1lbnNpb24gPSB3b3JraW5nUXVlcnkuYXp1cmVNb25pdG9yPy5kaW1lbnNpb247XG4gIGlmIChvbGREaW1lbnNpb24gJiYgb2xkRGltZW5zaW9uICE9PSAnTm9uZScpIHtcbiAgICB3b3JraW5nUXVlcnkgPSBhcHBlbmREaW1lbnNpb25GaWx0ZXIod29ya2luZ1F1ZXJ5LCBvbGREaW1lbnNpb24sICdlcScsIFtcbiAgICAgIHdvcmtpbmdRdWVyeS5henVyZU1vbml0b3I/LmRpbWVuc2lvbkZpbHRlciB8fCAnJyxcbiAgICBdKTtcbiAgfVxuXG4gIHJldHVybiB3b3JraW5nUXVlcnk7XG59XG5cbi8vIEF6dXJlIE1vbml0b3IgbWV0cmljIHF1ZXJpZXMgcHJpb3IgdG8gR3JhZmFuYSB2ZXJzaW9uIDkgZGlkIG5vdCBpbmNsdWRlIGEgYHJlc291cmNlVXJpYC5cbi8vIFRoZSByZXNvdXJjZVVyaSB3YXMgcHJldmlvdXNseSBjb25zdHJ1Y3RlZCB3aXRoIHRoZSBzdWJzY3JpcHRpb24gaWQsIHJlc291cmNlIGdyb3VwLFxuLy8gbWV0cmljIGRlZmluaXRpb24gKGEuay5hLiByZXNvdXJjZSB0eXBlKSwgYW5kIHRoZSByZXNvdXJjZSBuYW1lLlxuZnVuY3Rpb24gbWlncmF0ZVJlc291cmNlVXJpKHF1ZXJ5OiBBenVyZU1vbml0b3JRdWVyeSk6IEF6dXJlTW9uaXRvclF1ZXJ5IHtcbiAgY29uc3QgYXp1cmVNb25pdG9yUXVlcnkgPSBxdWVyeS5henVyZU1vbml0b3I7XG5cbiAgaWYgKCFhenVyZU1vbml0b3JRdWVyeSB8fCBhenVyZU1vbml0b3JRdWVyeS5yZXNvdXJjZVVyaSkge1xuICAgIHJldHVybiBxdWVyeTtcbiAgfVxuXG4gIGNvbnN0IHsgc3Vic2NyaXB0aW9uIH0gPSBxdWVyeTtcbiAgY29uc3QgeyByZXNvdXJjZUdyb3VwLCBtZXRyaWNEZWZpbml0aW9uLCByZXNvdXJjZU5hbWUgfSA9IGF6dXJlTW9uaXRvclF1ZXJ5O1xuICBpZiAoIShzdWJzY3JpcHRpb24gJiYgcmVzb3VyY2VHcm91cCAmJiBtZXRyaWNEZWZpbml0aW9uICYmIHJlc291cmNlTmFtZSkpIHtcbiAgICByZXR1cm4gcXVlcnk7XG4gIH1cblxuICBjb25zdCByZXNvdXJjZVVyaSA9IFVybEJ1aWxkZXIuYnVpbGRSZXNvdXJjZVVyaShzdWJzY3JpcHRpb24sIHJlc291cmNlR3JvdXAsIG1ldHJpY0RlZmluaXRpb24sIHJlc291cmNlTmFtZSk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5xdWVyeSxcbiAgICBhenVyZU1vbml0b3I6IHtcbiAgICAgIC4uLmF6dXJlTW9uaXRvclF1ZXJ5LFxuICAgICAgcmVzb3VyY2VVcmksXG4gICAgfSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWlncmF0ZURpbWVuc2lvbkZpbHRlclRvQXJyYXkocXVlcnk6IEF6dXJlTW9uaXRvclF1ZXJ5KTogQXp1cmVNb25pdG9yUXVlcnkge1xuICBjb25zdCBhenVyZU1vbml0b3JRdWVyeSA9IHF1ZXJ5LmF6dXJlTW9uaXRvcjtcblxuICBpZiAoIWF6dXJlTW9uaXRvclF1ZXJ5KSB7XG4gICAgcmV0dXJuIHF1ZXJ5O1xuICB9XG5cbiAgY29uc3QgbmV3RmlsdGVyczogQXp1cmVNZXRyaWNEaW1lbnNpb25bXSA9IFtdO1xuICBjb25zdCBkaW1lbnNpb25GaWx0ZXJzID0gYXp1cmVNb25pdG9yUXVlcnkuZGltZW5zaW9uRmlsdGVycztcbiAgaWYgKGRpbWVuc2lvbkZpbHRlcnMgJiYgZGltZW5zaW9uRmlsdGVycy5sZW5ndGggPiAwKSB7XG4gICAgZGltZW5zaW9uRmlsdGVycy5mb3JFYWNoKChmaWx0ZXIpID0+IHtcbiAgICAgIGNvbnN0IHN0YXRpY1Byb3BzID0geyBkaW1lbnNpb246IGZpbHRlci5kaW1lbnNpb24sIG9wZXJhdG9yOiBmaWx0ZXIub3BlcmF0b3IgfTtcbiAgICAgIGlmICghZmlsdGVyLmZpbHRlcnMgJiYgZmlsdGVyLmZpbHRlcikge1xuICAgICAgICBuZXdGaWx0ZXJzLnB1c2goeyAuLi5zdGF0aWNQcm9wcywgZmlsdGVyczogW2ZpbHRlci5maWx0ZXJdIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGhhc0ZpbHRlciA9IGZhbHNlO1xuICAgICAgICBpZiAoZmlsdGVyLmZpbHRlcnMgJiYgZmlsdGVyLmZpbHRlcikge1xuICAgICAgICAgIGZvciAoY29uc3Qgb2xkRmlsdGVyIG9mIGZpbHRlci5maWx0ZXJzKSB7XG4gICAgICAgICAgICBpZiAoZmlsdGVyLmZpbHRlciA9PT0gb2xkRmlsdGVyKSB7XG4gICAgICAgICAgICAgIGhhc0ZpbHRlciA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWhhc0ZpbHRlciAmJiBmaWx0ZXIuZmlsdGVyICE9PSAnKicpIHtcbiAgICAgICAgICAgIGZpbHRlci5maWx0ZXJzLnB1c2goZmlsdGVyLmZpbHRlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5ld0ZpbHRlcnMucHVzaCh7IC4uLnN0YXRpY1Byb3BzLCBmaWx0ZXJzOiBmaWx0ZXIuZmlsdGVycyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChuZXdGaWx0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB7IC4uLnF1ZXJ5LCBhenVyZU1vbml0b3I6IHsgLi4uYXp1cmVNb25pdG9yUXVlcnksIGRpbWVuc2lvbkZpbHRlcnM6IG5ld0ZpbHRlcnMgfSB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcXVlcnk7XG59XG5cbi8vIGRhdGFzb3VyY2UudHMgYWxzbyBjb250YWlucyBzb21lIG1pZ3JhdGlvbnMsIHdoaWNoIGhhdmUgYmVlbiBtb3ZlZCB0byBoZXJlLiBVbnN1cmUgd2hldGhlclxuLy8gdGhleSBzaG91bGQgYWxzbyBkbyBhbGwgdGhlIG90aGVyIG1pZ3JhdGlvbnMuLi5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhc291cmNlTWlncmF0aW9ucyhxdWVyeTogQXp1cmVNb25pdG9yUXVlcnkpOiBBenVyZU1vbml0b3JRdWVyeSB7XG4gIGxldCB3b3JraW5nUXVlcnkgPSBxdWVyeTtcblxuICBpZiAoIXdvcmtpbmdRdWVyeS5xdWVyeVR5cGUpIHtcbiAgICB3b3JraW5nUXVlcnkgPSB7XG4gICAgICAuLi53b3JraW5nUXVlcnksXG4gICAgICBxdWVyeVR5cGU6IEF6dXJlUXVlcnlUeXBlLkF6dXJlTW9uaXRvcixcbiAgICB9O1xuICB9XG5cbiAgaWYgKHdvcmtpbmdRdWVyeS5xdWVyeVR5cGUgPT09IEF6dXJlUXVlcnlUeXBlLkF6dXJlTW9uaXRvciAmJiB3b3JraW5nUXVlcnkuYXp1cmVNb25pdG9yKSB7XG4gICAgd29ya2luZ1F1ZXJ5ID0gbWlncmF0ZURpbWVuc2lvblRvRGltZW5zaW9uRmlsdGVyKHdvcmtpbmdRdWVyeSk7XG4gICAgd29ya2luZ1F1ZXJ5ID0gbWlncmF0ZVJlc291cmNlVXJpKHdvcmtpbmdRdWVyeSk7XG4gICAgd29ya2luZ1F1ZXJ5ID0gbWlncmF0ZURpbWVuc2lvbkZpbHRlclRvQXJyYXkod29ya2luZ1F1ZXJ5KTtcbiAgfVxuXG4gIHJldHVybiB3b3JraW5nUXVlcnk7XG59XG4iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQXN5bmNTdGF0ZTxUPihhc3luY0ZuOiAoKSA9PiBQcm9taXNlPFQ+LCBzZXRFcnJvcjogRnVuY3Rpb24sIGRlcGVuZGVuY2llczogdW5rbm93bltdKSB7XG4gIC8vIFVzZSB0aGUgbGF6eSBpbml0aWFsIHN0YXRlIGZ1bmN0aW9uYWxpdHkgb2YgdXNlU3RhdGUgdG8gYXNzaWduIGEgcmFuZG9tIElEIHRvIHRoZSBBUEkgY2FsbFxuICAvLyB0byB0cmFjayB3aGVyZSBlcnJvcnMgY29tZSBmcm9tLiBTZWUgdXNlTGFzdEVycm9yLlxuICBjb25zdCBbZXJyb3JTb3VyY2VdID0gdXNlU3RhdGUoKCkgPT4gTWF0aC5yYW5kb20oKSk7XG4gIGNvbnN0IFt2YWx1ZSwgc2V0VmFsdWVdID0gdXNlU3RhdGU8VD4oKTtcblxuICBjb25zdCBmaW5hbFZhbHVlID0gdXNlTWVtbygoKSA9PiB2YWx1ZSA/PyBbXSwgW3ZhbHVlXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhc3luY0ZuKClcbiAgICAgIC50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgIHNldFZhbHVlKHJlc3VsdHMpO1xuICAgICAgICBzZXRFcnJvcihlcnJvclNvdXJjZSwgdW5kZWZpbmVkKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBzZXRFcnJvcihlcnJvclNvdXJjZSwgZXJyKTtcbiAgICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgZGVwZW5kZW5jaWVzKTtcblxuICByZXR1cm4gZmluYWxWYWx1ZTtcbn1cbiIsImltcG9ydCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQXp1cmVNb25pdG9yRXJyb3Jpc2ggfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCBtZXNzYWdlRnJvbUVycm9yIGZyb20gJy4vbWVzc2FnZUZyb21FcnJvcic7XG5cbnR5cGUgU291cmNlZEVycm9yID0gW3N0cmluZywgQXp1cmVNb25pdG9yRXJyb3Jpc2hdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VMYXN0RXJyb3IoKSB7XG4gIGNvbnN0IFtlcnJvcnMsIHNldEVycm9yc10gPSB1c2VTdGF0ZTxTb3VyY2VkRXJyb3JbXT4oW10pO1xuXG4gIC8vIEhhbmRsZXMgZXJyb3JzIGZyb20gYW55IGNoaWxkIGNvbXBvbmVudHMgdGhhdCByZXF1ZXN0IGRhdGEgdG8gZGlzcGxheSB0aGVpciBvcHRpb25zXG4gIGNvbnN0IGFkZEVycm9yID0gdXNlQ2FsbGJhY2soKGVycm9yU291cmNlOiBzdHJpbmcsIGVycm9yOiBBenVyZU1vbml0b3JFcnJvcmlzaCB8IHVuZGVmaW5lZCkgPT4ge1xuICAgIHNldEVycm9ycygoZXJyb3JzKSA9PiB7XG4gICAgICBjb25zdCBlcnJvcnNDb3B5ID0gWy4uLmVycm9yc107XG4gICAgICBjb25zdCBpbmRleCA9IGVycm9ycy5maW5kSW5kZXgoKFt2U291cmNlXSkgPT4gdlNvdXJjZSA9PT0gZXJyb3JTb3VyY2UpO1xuXG4gICAgICAvLyBJZiB0aGVyZSdzIGFscmVhZHkgYW4gZXJyb3IsIHJlbW92ZSBpdC4gSWYgd2UncmUgc2V0dGluZyBhIG5ldyBlcnJvclxuICAgICAgLy8gYmVsb3csIHdlJ2xsIG1vdmUgaXQgdG8gdGhlIGZyb250XG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBlcnJvcnNDb3B5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFuZCB0aGVuIGFkZCB0aGUgbmV3IGVycm9yIHRvIHRoZSB0b3Agb2YgdGhlIGFycmF5LiBJZiBlcnJvciBpcyBkZWZpbmVkLCBpdCB3YXMgYWxyZWFkeVxuICAgICAgLy8gcmVtb3ZlZCBhYm92ZS5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBlcnJvcnNDb3B5LnVuc2hpZnQoW2Vycm9yU291cmNlLCBlcnJvcl0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXJyb3JzQ29weTtcbiAgICB9KTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGVycm9yTWVzc2FnZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHJlY2VudEVycm9yID0gZXJyb3JzWzBdO1xuICAgIHJldHVybiByZWNlbnRFcnJvciAmJiBtZXNzYWdlRnJvbUVycm9yKHJlY2VudEVycm9yWzFdKTtcbiAgfSwgW2Vycm9yc10pO1xuXG4gIHJldHVybiBbZXJyb3JNZXNzYWdlLCBhZGRFcnJvcl0gYXMgY29uc3Q7XG59XG4iLCJpbXBvcnQgeyBmcm9tLCBsYXN0VmFsdWVGcm9tLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIEN1c3RvbVZhcmlhYmxlU3VwcG9ydCxcbiAgRGF0YVF1ZXJ5UmVxdWVzdCxcbiAgRGF0YVF1ZXJ5UmVzcG9uc2UsXG4gIE1ldHJpY0ZpbmRWYWx1ZSxcbiAgdG9EYXRhRnJhbWUsXG59IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgZ2V0VGVtcGxhdGVTcnYgfSBmcm9tICdAZ3JhZmFuYS9ydW50aW1lJztcblxuaW1wb3J0IFZhcmlhYmxlRWRpdG9yIGZyb20gJy4vY29tcG9uZW50cy9WYXJpYWJsZUVkaXRvci9WYXJpYWJsZUVkaXRvcic7XG5pbXBvcnQgRGF0YVNvdXJjZSBmcm9tICcuL2RhdGFzb3VyY2UnO1xuaW1wb3J0IHsgbWlncmF0ZVN0cmluZ1F1ZXJpZXNUb09iamVjdFF1ZXJpZXMgfSBmcm9tICcuL2dyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm5zJztcbmltcG9ydCB7IEF6dXJlTW9uaXRvclF1ZXJ5LCBBenVyZVF1ZXJ5VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgR3JhZmFuYVRlbXBsYXRlVmFyaWFibGVRdWVyeSB9IGZyb20gJy4vdHlwZXMvdGVtcGxhdGVWYXJpYWJsZXMnO1xuaW1wb3J0IG1lc3NhZ2VGcm9tRXJyb3IgZnJvbSAnLi91dGlscy9tZXNzYWdlRnJvbUVycm9yJztcblxuZXhwb3J0IGNsYXNzIFZhcmlhYmxlU3VwcG9ydCBleHRlbmRzIEN1c3RvbVZhcmlhYmxlU3VwcG9ydDxEYXRhU291cmNlLCBBenVyZU1vbml0b3JRdWVyeT4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRhdGFzb3VyY2U6IERhdGFTb3VyY2UpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGF0YXNvdXJjZSA9IGRhdGFzb3VyY2U7XG4gICAgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGVkaXRvciA9IFZhcmlhYmxlRWRpdG9yO1xuXG4gIHF1ZXJ5KHJlcXVlc3Q6IERhdGFRdWVyeVJlcXVlc3Q8QXp1cmVNb25pdG9yUXVlcnk+KTogT2JzZXJ2YWJsZTxEYXRhUXVlcnlSZXNwb25zZT4ge1xuICAgIGNvbnN0IHByb21pc2VkUmVzdWx0cyA9IGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5T2JqID0gYXdhaXQgbWlncmF0ZVN0cmluZ1F1ZXJpZXNUb09iamVjdFF1ZXJpZXMocmVxdWVzdC50YXJnZXRzWzBdLCB7IGRhdGFzb3VyY2U6IHRoaXMuZGF0YXNvdXJjZSB9KTtcblxuICAgICAgaWYgKHF1ZXJ5T2JqLnF1ZXJ5VHlwZSA9PT0gQXp1cmVRdWVyeVR5cGUuR3JhZmFuYVRlbXBsYXRlVmFyaWFibGVGbiAmJiBxdWVyeU9iai5ncmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgdGVtcGxhdGVWYXJpYWJsZXNSZXN1bHRzID0gYXdhaXQgdGhpcy5jYWxsR3JhZmFuYVRlbXBsYXRlVmFyaWFibGVGbihxdWVyeU9iai5ncmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YTogdGVtcGxhdGVWYXJpYWJsZXNSZXN1bHRzPy5sZW5ndGggPyBbdG9EYXRhRnJhbWUodGVtcGxhdGVWYXJpYWJsZXNSZXN1bHRzKV0gOiBbXSxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4geyBkYXRhOiBbXSwgZXJyb3I6IHsgbWVzc2FnZTogbWVzc2FnZUZyb21FcnJvcihlcnIpIH0gfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVxdWVzdC50YXJnZXRzWzBdID0gcXVlcnlPYmo7XG4gICAgICByZXR1cm4gbGFzdFZhbHVlRnJvbSh0aGlzLmRhdGFzb3VyY2UucXVlcnkocmVxdWVzdCkpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZnJvbShwcm9taXNlZFJlc3VsdHMoKSk7XG4gIH1cblxuICBjYWxsR3JhZmFuYVRlbXBsYXRlVmFyaWFibGVGbihxdWVyeTogR3JhZmFuYVRlbXBsYXRlVmFyaWFibGVRdWVyeSk6IFByb21pc2U8TWV0cmljRmluZFZhbHVlW10+IHwgbnVsbCB7XG4gICAgaWYgKHF1ZXJ5LmtpbmQgPT09ICdTdWJzY3JpcHRpb25zUXVlcnknKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhc291cmNlLmdldFN1YnNjcmlwdGlvbnMoKTtcbiAgICB9XG5cbiAgICBpZiAocXVlcnkua2luZCA9PT0gJ1Jlc291cmNlR3JvdXBzUXVlcnknKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhc291cmNlLmdldFJlc291cmNlR3JvdXBzKHRoaXMucmVwbGFjZVZhcmlhYmxlKHF1ZXJ5LnN1YnNjcmlwdGlvbikpO1xuICAgIH1cblxuICAgIGlmIChxdWVyeS5raW5kID09PSAnTWV0cmljRGVmaW5pdGlvbnNRdWVyeScpIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGFzb3VyY2UuZ2V0TWV0cmljRGVmaW5pdGlvbnMoXG4gICAgICAgIHRoaXMucmVwbGFjZVZhcmlhYmxlKHF1ZXJ5LnN1YnNjcmlwdGlvbiksXG4gICAgICAgIHRoaXMucmVwbGFjZVZhcmlhYmxlKHF1ZXJ5LnJlc291cmNlR3JvdXApXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChxdWVyeS5raW5kID09PSAnUmVzb3VyY2VOYW1lc1F1ZXJ5Jykge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YXNvdXJjZS5nZXRSZXNvdXJjZU5hbWVzKFxuICAgICAgICB0aGlzLnJlcGxhY2VWYXJpYWJsZShxdWVyeS5zdWJzY3JpcHRpb24pLFxuICAgICAgICB0aGlzLnJlcGxhY2VWYXJpYWJsZShxdWVyeS5yZXNvdXJjZUdyb3VwKSxcbiAgICAgICAgdGhpcy5yZXBsYWNlVmFyaWFibGUocXVlcnkubWV0cmljRGVmaW5pdGlvbilcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHF1ZXJ5LmtpbmQgPT09ICdNZXRyaWNOYW1lc3BhY2VRdWVyeScpIHtcbiAgICAgIHJldHVybiB0aGlzLmRhdGFzb3VyY2UuYXp1cmVNb25pdG9yRGF0YXNvdXJjZS5nZXRNZXRyaWNOYW1lc3BhY2VzKHF1ZXJ5KTtcbiAgICB9XG5cbiAgICBpZiAocXVlcnkua2luZCA9PT0gJ01ldHJpY05hbWVzUXVlcnknKSB7XG4gICAgICByZXR1cm4gdGhpcy5kYXRhc291cmNlLmF6dXJlTW9uaXRvckRhdGFzb3VyY2UuZ2V0TWV0cmljTmFtZXMocXVlcnkpO1xuICAgIH1cblxuICAgIGlmIChxdWVyeS5raW5kID09PSAnV29ya3NwYWNlc1F1ZXJ5Jykge1xuICAgICAgcmV0dXJuIHRoaXMuZGF0YXNvdXJjZS5henVyZUxvZ0FuYWx5dGljc0RhdGFzb3VyY2UuZ2V0V29ya3NwYWNlcyh0aGlzLnJlcGxhY2VWYXJpYWJsZShxdWVyeS5zdWJzY3JpcHRpb24pKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJlcGxhY2VWYXJpYWJsZShtZXRyaWM6IHN0cmluZykge1xuICAgIHJldHVybiBnZXRUZW1wbGF0ZVNydigpLnJlcGxhY2UoKG1ldHJpYyB8fCAnJykudHJpbSgpKTtcbiAgfVxufVxuIiwiZnVuY3Rpb24gbihuKXtmb3IodmFyIHI9YXJndW1lbnRzLmxlbmd0aCx0PUFycmF5KHI+MT9yLTE6MCksZT0xO2U8cjtlKyspdFtlLTFdPWFyZ3VtZW50c1tlXTtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgaT1ZW25dLG89aT9cImZ1bmN0aW9uXCI9PXR5cGVvZiBpP2kuYXBwbHkobnVsbCx0KTppOlwidW5rbm93biBlcnJvciBucjogXCIrbjt0aHJvdyBFcnJvcihcIltJbW1lcl0gXCIrbyl9dGhyb3cgRXJyb3IoXCJbSW1tZXJdIG1pbmlmaWVkIGVycm9yIG5yOiBcIituKyh0Lmxlbmd0aD9cIiBcIit0Lm1hcCgoZnVuY3Rpb24obil7cmV0dXJuXCInXCIrbitcIidcIn0pKS5qb2luKFwiLFwiKTpcIlwiKStcIi4gRmluZCB0aGUgZnVsbCBlcnJvciBhdDogaHR0cHM6Ly9iaXQubHkvM2NYRUtXZlwiKX1mdW5jdGlvbiByKG4pe3JldHVybiEhbiYmISFuW1FdfWZ1bmN0aW9uIHQobil7cmV0dXJuISFuJiYoZnVuY3Rpb24obil7aWYoIW58fFwib2JqZWN0XCIhPXR5cGVvZiBuKXJldHVybiExO3ZhciByPU9iamVjdC5nZXRQcm90b3R5cGVPZihuKTtpZihudWxsPT09cilyZXR1cm4hMDt2YXIgdD1PYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChyLFwiY29uc3RydWN0b3JcIikmJnIuY29uc3RydWN0b3I7cmV0dXJuIHQ9PT1PYmplY3R8fFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJkZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwodCk9PT1afShuKXx8QXJyYXkuaXNBcnJheShuKXx8ISFuW0xdfHwhIW4uY29uc3RydWN0b3JbTF18fHMobil8fHYobikpfWZ1bmN0aW9uIGUodCl7cmV0dXJuIHIodCl8fG4oMjMsdCksdFtRXS50fWZ1bmN0aW9uIGkobixyLHQpe3ZvaWQgMD09PXQmJih0PSExKSwwPT09byhuKT8odD9PYmplY3Qua2V5czpubikobikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dCYmXCJzeW1ib2xcIj09dHlwZW9mIGV8fHIoZSxuW2VdLG4pfSkpOm4uZm9yRWFjaCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gcihlLHQsbil9KSl9ZnVuY3Rpb24gbyhuKXt2YXIgcj1uW1FdO3JldHVybiByP3IuaT4zP3IuaS00OnIuaTpBcnJheS5pc0FycmF5KG4pPzE6cyhuKT8yOnYobik/MzowfWZ1bmN0aW9uIHUobixyKXtyZXR1cm4gMj09PW8obik/bi5oYXMocik6T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scil9ZnVuY3Rpb24gYShuLHIpe3JldHVybiAyPT09byhuKT9uLmdldChyKTpuW3JdfWZ1bmN0aW9uIGYobixyLHQpe3ZhciBlPW8obik7Mj09PWU/bi5zZXQocix0KTozPT09ZT8obi5kZWxldGUociksbi5hZGQodCkpOm5bcl09dH1mdW5jdGlvbiBjKG4scil7cmV0dXJuIG49PT1yPzAhPT1ufHwxL249PTEvcjpuIT1uJiZyIT1yfWZ1bmN0aW9uIHMobil7cmV0dXJuIFgmJm4gaW5zdGFuY2VvZiBNYXB9ZnVuY3Rpb24gdihuKXtyZXR1cm4gcSYmbiBpbnN0YW5jZW9mIFNldH1mdW5jdGlvbiBwKG4pe3JldHVybiBuLm98fG4udH1mdW5jdGlvbiBsKG4pe2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG4pO3ZhciByPXJuKG4pO2RlbGV0ZSByW1FdO2Zvcih2YXIgdD1ubihyKSxlPTA7ZTx0Lmxlbmd0aDtlKyspe3ZhciBpPXRbZV0sbz1yW2ldOyExPT09by53cml0YWJsZSYmKG8ud3JpdGFibGU9ITAsby5jb25maWd1cmFibGU9ITApLChvLmdldHx8by5zZXQpJiYocltpXT17Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLGVudW1lcmFibGU6by5lbnVtZXJhYmxlLHZhbHVlOm5baV19KX1yZXR1cm4gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yobikscil9ZnVuY3Rpb24gZChuLGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSkseShuKXx8cihuKXx8IXQobik/bjoobyhuKT4xJiYobi5zZXQ9bi5hZGQ9bi5jbGVhcj1uLmRlbGV0ZT1oKSxPYmplY3QuZnJlZXplKG4pLGUmJmkobiwoZnVuY3Rpb24obixyKXtyZXR1cm4gZChyLCEwKX0pLCEwKSxuKX1mdW5jdGlvbiBoKCl7bigyKX1mdW5jdGlvbiB5KG4pe3JldHVybiBudWxsPT1ufHxcIm9iamVjdFwiIT10eXBlb2Ygbnx8T2JqZWN0LmlzRnJvemVuKG4pfWZ1bmN0aW9uIGIocil7dmFyIHQ9dG5bcl07cmV0dXJuIHR8fG4oMTgsciksdH1mdW5jdGlvbiBtKG4scil7dG5bbl18fCh0bltuXT1yKX1mdW5jdGlvbiBfKCl7cmV0dXJuXCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVnx8VXx8bigwKSxVfWZ1bmN0aW9uIGoobixyKXtyJiYoYihcIlBhdGNoZXNcIiksbi51PVtdLG4ucz1bXSxuLnY9cil9ZnVuY3Rpb24gTyhuKXtnKG4pLG4ucC5mb3JFYWNoKFMpLG4ucD1udWxsfWZ1bmN0aW9uIGcobil7bj09PVUmJihVPW4ubCl9ZnVuY3Rpb24gdyhuKXtyZXR1cm4gVT17cDpbXSxsOlUsaDpuLG06ITAsXzowfX1mdW5jdGlvbiBTKG4pe3ZhciByPW5bUV07MD09PXIuaXx8MT09PXIuaT9yLmooKTpyLk89ITB9ZnVuY3Rpb24gUChyLGUpe2UuXz1lLnAubGVuZ3RoO3ZhciBpPWUucFswXSxvPXZvaWQgMCE9PXImJnIhPT1pO3JldHVybiBlLmguZ3x8YihcIkVTNVwiKS5TKGUscixvKSxvPyhpW1FdLlAmJihPKGUpLG4oNCkpLHQocikmJihyPU0oZSxyKSxlLmx8fHgoZSxyKSksZS51JiZiKFwiUGF0Y2hlc1wiKS5NKGlbUV0udCxyLGUudSxlLnMpKTpyPU0oZSxpLFtdKSxPKGUpLGUudSYmZS52KGUudSxlLnMpLHIhPT1IP3I6dm9pZCAwfWZ1bmN0aW9uIE0obixyLHQpe2lmKHkocikpcmV0dXJuIHI7dmFyIGU9cltRXTtpZighZSlyZXR1cm4gaShyLChmdW5jdGlvbihpLG8pe3JldHVybiBBKG4sZSxyLGksbyx0KX0pLCEwKSxyO2lmKGUuQSE9PW4pcmV0dXJuIHI7aWYoIWUuUClyZXR1cm4geChuLGUudCwhMCksZS50O2lmKCFlLkkpe2UuST0hMCxlLkEuXy0tO3ZhciBvPTQ9PT1lLml8fDU9PT1lLmk/ZS5vPWwoZS5rKTplLm87aSgzPT09ZS5pP25ldyBTZXQobyk6bywoZnVuY3Rpb24ocixpKXtyZXR1cm4gQShuLGUsbyxyLGksdCl9KSkseChuLG8sITEpLHQmJm4udSYmYihcIlBhdGNoZXNcIikuUihlLHQsbi51LG4ucyl9cmV0dXJuIGUub31mdW5jdGlvbiBBKGUsaSxvLGEsYyxzKXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZjPT09byYmbig1KSxyKGMpKXt2YXIgdj1NKGUsYyxzJiZpJiYzIT09aS5pJiYhdShpLkQsYSk/cy5jb25jYXQoYSk6dm9pZCAwKTtpZihmKG8sYSx2KSwhcih2KSlyZXR1cm47ZS5tPSExfWlmKHQoYykmJiF5KGMpKXtpZighZS5oLkYmJmUuXzwxKXJldHVybjtNKGUsYyksaSYmaS5BLmx8fHgoZSxjKX19ZnVuY3Rpb24geChuLHIsdCl7dm9pZCAwPT09dCYmKHQ9ITEpLG4uaC5GJiZuLm0mJmQocix0KX1mdW5jdGlvbiB6KG4scil7dmFyIHQ9bltRXTtyZXR1cm4odD9wKHQpOm4pW3JdfWZ1bmN0aW9uIEkobixyKXtpZihyIGluIG4pZm9yKHZhciB0PU9iamVjdC5nZXRQcm90b3R5cGVPZihuKTt0Oyl7dmFyIGU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LHIpO2lmKGUpcmV0dXJuIGU7dD1PYmplY3QuZ2V0UHJvdG90eXBlT2YodCl9fWZ1bmN0aW9uIGsobil7bi5QfHwobi5QPSEwLG4ubCYmayhuLmwpKX1mdW5jdGlvbiBFKG4pe24ub3x8KG4ubz1sKG4udCkpfWZ1bmN0aW9uIFIobixyLHQpe3ZhciBlPXMocik/YihcIk1hcFNldFwiKS5OKHIsdCk6dihyKT9iKFwiTWFwU2V0XCIpLlQocix0KTpuLmc/ZnVuY3Rpb24obixyKXt2YXIgdD1BcnJheS5pc0FycmF5KG4pLGU9e2k6dD8xOjAsQTpyP3IuQTpfKCksUDohMSxJOiExLEQ6e30sbDpyLHQ6bixrOm51bGwsbzpudWxsLGo6bnVsbCxDOiExfSxpPWUsbz1lbjt0JiYoaT1bZV0sbz1vbik7dmFyIHU9UHJveHkucmV2b2NhYmxlKGksbyksYT11LnJldm9rZSxmPXUucHJveHk7cmV0dXJuIGUuaz1mLGUuaj1hLGZ9KHIsdCk6YihcIkVTNVwiKS5KKHIsdCk7cmV0dXJuKHQ/dC5BOl8oKSkucC5wdXNoKGUpLGV9ZnVuY3Rpb24gRChlKXtyZXR1cm4gcihlKXx8bigyMixlKSxmdW5jdGlvbiBuKHIpe2lmKCF0KHIpKXJldHVybiByO3ZhciBlLHU9cltRXSxjPW8ocik7aWYodSl7aWYoIXUuUCYmKHUuaTw0fHwhYihcIkVTNVwiKS5LKHUpKSlyZXR1cm4gdS50O3UuST0hMCxlPUYocixjKSx1Lkk9ITF9ZWxzZSBlPUYocixjKTtyZXR1cm4gaShlLChmdW5jdGlvbihyLHQpe3UmJmEodS50LHIpPT09dHx8ZihlLHIsbih0KSl9KSksMz09PWM/bmV3IFNldChlKTplfShlKX1mdW5jdGlvbiBGKG4scil7c3dpdGNoKHIpe2Nhc2UgMjpyZXR1cm4gbmV3IE1hcChuKTtjYXNlIDM6cmV0dXJuIEFycmF5LmZyb20obil9cmV0dXJuIGwobil9ZnVuY3Rpb24gTigpe2Z1bmN0aW9uIHQobixyKXt2YXIgdD1zW25dO3JldHVybiB0P3QuZW51bWVyYWJsZT1yOnNbbl09dD17Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6cixnZXQ6ZnVuY3Rpb24oKXt2YXIgcj10aGlzW1FdO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmYociksZW4uZ2V0KHIsbil9LHNldDpmdW5jdGlvbihyKXt2YXIgdD10aGlzW1FdO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmYodCksZW4uc2V0KHQsbixyKX19LHR9ZnVuY3Rpb24gZShuKXtmb3IodmFyIHI9bi5sZW5ndGgtMTtyPj0wO3ItLSl7dmFyIHQ9bltyXVtRXTtpZighdC5QKXN3aXRjaCh0Lmkpe2Nhc2UgNTphKHQpJiZrKHQpO2JyZWFrO2Nhc2UgNDpvKHQpJiZrKHQpfX19ZnVuY3Rpb24gbyhuKXtmb3IodmFyIHI9bi50LHQ9bi5rLGU9bm4odCksaT1lLmxlbmd0aC0xO2k+PTA7aS0tKXt2YXIgbz1lW2ldO2lmKG8hPT1RKXt2YXIgYT1yW29dO2lmKHZvaWQgMD09PWEmJiF1KHIsbykpcmV0dXJuITA7dmFyIGY9dFtvXSxzPWYmJmZbUV07aWYocz9zLnQhPT1hOiFjKGYsYSkpcmV0dXJuITB9fXZhciB2PSEhcltRXTtyZXR1cm4gZS5sZW5ndGghPT1ubihyKS5sZW5ndGgrKHY/MDoxKX1mdW5jdGlvbiBhKG4pe3ZhciByPW4uaztpZihyLmxlbmd0aCE9PW4udC5sZW5ndGgpcmV0dXJuITA7dmFyIHQ9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLHIubGVuZ3RoLTEpO2lmKHQmJiF0LmdldClyZXR1cm4hMDtmb3IodmFyIGU9MDtlPHIubGVuZ3RoO2UrKylpZighci5oYXNPd25Qcm9wZXJ0eShlKSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBmKHIpe3IuTyYmbigzLEpTT04uc3RyaW5naWZ5KHAocikpKX12YXIgcz17fTttKFwiRVM1XCIse0o6ZnVuY3Rpb24obixyKXt2YXIgZT1BcnJheS5pc0FycmF5KG4pLGk9ZnVuY3Rpb24obixyKXtpZihuKXtmb3IodmFyIGU9QXJyYXkoci5sZW5ndGgpLGk9MDtpPHIubGVuZ3RoO2krKylPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIlwiK2ksdChpLCEwKSk7cmV0dXJuIGV9dmFyIG89cm4ocik7ZGVsZXRlIG9bUV07Zm9yKHZhciB1PW5uKG8pLGE9MDthPHUubGVuZ3RoO2ErKyl7dmFyIGY9dVthXTtvW2ZdPXQoZixufHwhIW9bZl0uZW51bWVyYWJsZSl9cmV0dXJuIE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHIpLG8pfShlLG4pLG89e2k6ZT81OjQsQTpyP3IuQTpfKCksUDohMSxJOiExLEQ6e30sbDpyLHQ6bixrOmksbzpudWxsLE86ITEsQzohMX07cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLFEse3ZhbHVlOm8sd3JpdGFibGU6ITB9KSxpfSxTOmZ1bmN0aW9uKG4sdCxvKXtvP3IodCkmJnRbUV0uQT09PW4mJmUobi5wKToobi51JiZmdW5jdGlvbiBuKHIpe2lmKHImJlwib2JqZWN0XCI9PXR5cGVvZiByKXt2YXIgdD1yW1FdO2lmKHQpe3ZhciBlPXQudCxvPXQuayxmPXQuRCxjPXQuaTtpZig0PT09YylpKG8sKGZ1bmN0aW9uKHIpe3IhPT1RJiYodm9pZCAwIT09ZVtyXXx8dShlLHIpP2Zbcl18fG4ob1tyXSk6KGZbcl09ITAsayh0KSkpfSkpLGkoZSwoZnVuY3Rpb24obil7dm9pZCAwIT09b1tuXXx8dShvLG4pfHwoZltuXT0hMSxrKHQpKX0pKTtlbHNlIGlmKDU9PT1jKXtpZihhKHQpJiYoayh0KSxmLmxlbmd0aD0hMCksby5sZW5ndGg8ZS5sZW5ndGgpZm9yKHZhciBzPW8ubGVuZ3RoO3M8ZS5sZW5ndGg7cysrKWZbc109ITE7ZWxzZSBmb3IodmFyIHY9ZS5sZW5ndGg7djxvLmxlbmd0aDt2KyspZlt2XT0hMDtmb3IodmFyIHA9TWF0aC5taW4oby5sZW5ndGgsZS5sZW5ndGgpLGw9MDtsPHA7bCsrKW8uaGFzT3duUHJvcGVydHkobCl8fChmW2xdPSEwKSx2b2lkIDA9PT1mW2xdJiZuKG9bbF0pfX19fShuLnBbMF0pLGUobi5wKSl9LEs6ZnVuY3Rpb24obil7cmV0dXJuIDQ9PT1uLmk/byhuKTphKG4pfX0pfWZ1bmN0aW9uIFQoKXtmdW5jdGlvbiBlKG4pe2lmKCF0KG4pKXJldHVybiBuO2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIG4ubWFwKGUpO2lmKHMobikpcmV0dXJuIG5ldyBNYXAoQXJyYXkuZnJvbShuLmVudHJpZXMoKSkubWFwKChmdW5jdGlvbihuKXtyZXR1cm5bblswXSxlKG5bMV0pXX0pKSk7aWYodihuKSlyZXR1cm4gbmV3IFNldChBcnJheS5mcm9tKG4pLm1hcChlKSk7dmFyIHI9T2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YobikpO2Zvcih2YXIgaSBpbiBuKXJbaV09ZShuW2ldKTtyZXR1cm4gdShuLEwpJiYocltMXT1uW0xdKSxyfWZ1bmN0aW9uIGYobil7cmV0dXJuIHIobik/ZShuKTpufXZhciBjPVwiYWRkXCI7bShcIlBhdGNoZXNcIix7JDpmdW5jdGlvbihyLHQpe3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2Zvcih2YXIgaT10LnBhdGgsdT10Lm9wLGY9cixzPTA7czxpLmxlbmd0aC0xO3MrKyl7dmFyIHY9byhmKSxwPVwiXCIraVtzXTswIT09diYmMSE9PXZ8fFwiX19wcm90b19fXCIhPT1wJiZcImNvbnN0cnVjdG9yXCIhPT1wfHxuKDI0KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBmJiZcInByb3RvdHlwZVwiPT09cCYmbigyNCksXCJvYmplY3RcIiE9dHlwZW9mKGY9YShmLHApKSYmbigxNSxpLmpvaW4oXCIvXCIpKX12YXIgbD1vKGYpLGQ9ZSh0LnZhbHVlKSxoPWlbaS5sZW5ndGgtMV07c3dpdGNoKHUpe2Nhc2VcInJlcGxhY2VcIjpzd2l0Y2gobCl7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpuKDE2KTtkZWZhdWx0OnJldHVybiBmW2hdPWR9Y2FzZSBjOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuXCItXCI9PT1oP2YucHVzaChkKTpmLnNwbGljZShoLDAsZCk7Y2FzZSAyOnJldHVybiBmLnNldChoLGQpO2Nhc2UgMzpyZXR1cm4gZi5hZGQoZCk7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2VcInJlbW92ZVwiOnN3aXRjaChsKXtjYXNlIDE6cmV0dXJuIGYuc3BsaWNlKGgsMSk7Y2FzZSAyOnJldHVybiBmLmRlbGV0ZShoKTtjYXNlIDM6cmV0dXJuIGYuZGVsZXRlKHQudmFsdWUpO2RlZmF1bHQ6cmV0dXJuIGRlbGV0ZSBmW2hdfWRlZmF1bHQ6bigxNyx1KX19KSkscn0sUjpmdW5jdGlvbihuLHIsdCxlKXtzd2l0Y2gobi5pKXtjYXNlIDA6Y2FzZSA0OmNhc2UgMjpyZXR1cm4gZnVuY3Rpb24obixyLHQsZSl7dmFyIG89bi50LHM9bi5vO2kobi5ELChmdW5jdGlvbihuLGkpe3ZhciB2PWEobyxuKSxwPWEocyxuKSxsPWk/dShvLG4pP1wicmVwbGFjZVwiOmM6XCJyZW1vdmVcIjtpZih2IT09cHx8XCJyZXBsYWNlXCIhPT1sKXt2YXIgZD1yLmNvbmNhdChuKTt0LnB1c2goXCJyZW1vdmVcIj09PWw/e29wOmwscGF0aDpkfTp7b3A6bCxwYXRoOmQsdmFsdWU6cH0pLGUucHVzaChsPT09Yz97b3A6XCJyZW1vdmVcIixwYXRoOmR9OlwicmVtb3ZlXCI9PT1sP3tvcDpjLHBhdGg6ZCx2YWx1ZTpmKHYpfTp7b3A6XCJyZXBsYWNlXCIscGF0aDpkLHZhbHVlOmYodil9KX19KSl9KG4scix0LGUpO2Nhc2UgNTpjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBpPW4udCxvPW4uRCx1PW4ubztpZih1Lmxlbmd0aDxpLmxlbmd0aCl7dmFyIGE9W3UsaV07aT1hWzBdLHU9YVsxXTt2YXIgcz1bZSx0XTt0PXNbMF0sZT1zWzFdfWZvcih2YXIgdj0wO3Y8aS5sZW5ndGg7disrKWlmKG9bdl0mJnVbdl0hPT1pW3ZdKXt2YXIgcD1yLmNvbmNhdChbdl0pO3QucHVzaCh7b3A6XCJyZXBsYWNlXCIscGF0aDpwLHZhbHVlOmYodVt2XSl9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKGlbdl0pfSl9Zm9yKHZhciBsPWkubGVuZ3RoO2w8dS5sZW5ndGg7bCsrKXt2YXIgZD1yLmNvbmNhdChbbF0pO3QucHVzaCh7b3A6YyxwYXRoOmQsdmFsdWU6Zih1W2xdKX0pfWkubGVuZ3RoPHUubGVuZ3RoJiZlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6ci5jb25jYXQoW1wibGVuZ3RoXCJdKSx2YWx1ZTppLmxlbmd0aH0pfShuLHIsdCxlKTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBpPW4udCxvPW4ubyx1PTA7aS5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighby5oYXMobikpe3ZhciBpPXIuY29uY2F0KFt1XSk7dC5wdXNoKHtvcDpcInJlbW92ZVwiLHBhdGg6aSx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpjLHBhdGg6aSx2YWx1ZTpufSl9dSsrfSkpLHU9MCxvLmZvckVhY2goKGZ1bmN0aW9uKG4pe2lmKCFpLmhhcyhuKSl7dmFyIG89ci5jb25jYXQoW3VdKTt0LnB1c2goe29wOmMscGF0aDpvLHZhbHVlOm59KSxlLnVuc2hpZnQoe29wOlwicmVtb3ZlXCIscGF0aDpvLHZhbHVlOm59KX11Kyt9KSl9KG4scix0LGUpfX0sTTpmdW5jdGlvbihuLHIsdCxlKXt0LnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6cj09PUg/dm9pZCAwOnJ9KSxlLnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6W10sdmFsdWU6bn0pfX0pfWZ1bmN0aW9uIEMoKXtmdW5jdGlvbiByKG4scil7ZnVuY3Rpb24gdCgpe3RoaXMuY29uc3RydWN0b3I9bn1hKG4sciksbi5wcm90b3R5cGU9KHQucHJvdG90eXBlPXIucHJvdG90eXBlLG5ldyB0KX1mdW5jdGlvbiBlKG4pe24ub3x8KG4uRD1uZXcgTWFwLG4ubz1uZXcgTWFwKG4udCkpfWZ1bmN0aW9uIG8obil7bi5vfHwobi5vPW5ldyBTZXQsbi50LmZvckVhY2goKGZ1bmN0aW9uKHIpe2lmKHQocikpe3ZhciBlPVIobi5BLmgscixuKTtuLnAuc2V0KHIsZSksbi5vLmFkZChlKX1lbHNlIG4uby5hZGQocil9KSkpfWZ1bmN0aW9uIHUocil7ci5PJiZuKDMsSlNPTi5zdHJpbmdpZnkocChyKSkpfXZhciBhPWZ1bmN0aW9uKG4scil7cmV0dXJuKGE9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKG4scil7bi5fX3Byb3RvX189cn18fGZ1bmN0aW9uKG4scil7Zm9yKHZhciB0IGluIHIpci5oYXNPd25Qcm9wZXJ0eSh0KSYmKG5bdF09clt0XSl9KShuLHIpfSxmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHIpe3JldHVybiB0aGlzW1FdPXtpOjIsbDpyLEE6cj9yLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCxEOnZvaWQgMCx0Om4sazp0aGlzLEM6ITEsTzohMX0sdGhpc31yKG4sTWFwKTt2YXIgbz1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksby5oYXM9ZnVuY3Rpb24obil7cmV0dXJuIHAodGhpc1tRXSkuaGFzKG4pfSxvLnNldD1mdW5jdGlvbihuLHIpe3ZhciB0PXRoaXNbUV07cmV0dXJuIHUodCkscCh0KS5oYXMobikmJnAodCkuZ2V0KG4pPT09cnx8KGUodCksayh0KSx0LkQuc2V0KG4sITApLHQuby5zZXQobixyKSx0LkQuc2V0KG4sITApKSx0aGlzfSxvLmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxlKHIpLGsociksci50LmhhcyhuKT9yLkQuc2V0KG4sITEpOnIuRC5kZWxldGUobiksci5vLmRlbGV0ZShuKSwhMH0sby5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihlKG4pLGsobiksbi5EPW5ldyBNYXAsaShuLnQsKGZ1bmN0aW9uKHIpe24uRC5zZXQociwhMSl9KSksbi5vLmNsZWFyKCkpfSxvLmZvckVhY2g9ZnVuY3Rpb24obixyKXt2YXIgdD10aGlzO3AodGhpc1tRXSkuZm9yRWFjaCgoZnVuY3Rpb24oZSxpKXtuLmNhbGwocix0LmdldChpKSxpLHQpfSkpfSxvLmdldD1mdW5jdGlvbihuKXt2YXIgcj10aGlzW1FdO3Uocik7dmFyIGk9cChyKS5nZXQobik7aWYoci5JfHwhdChpKSlyZXR1cm4gaTtpZihpIT09ci50LmdldChuKSlyZXR1cm4gaTt2YXIgbz1SKHIuQS5oLGkscik7cmV0dXJuIGUociksci5vLnNldChuLG8pLG99LG8ua2V5cz1mdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLmtleXMoKX0sby52YWx1ZXM9ZnVuY3Rpb24oKXt2YXIgbixyPXRoaXMsdD10aGlzLmtleXMoKTtyZXR1cm4obj17fSlbVl09ZnVuY3Rpb24oKXtyZXR1cm4gci52YWx1ZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49dC5uZXh0KCk7cmV0dXJuIG4uZG9uZT9uOntkb25lOiExLHZhbHVlOnIuZ2V0KG4udmFsdWUpfX0sbn0sby5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG4scj10aGlzLHQ9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHIuZW50cmllcygpfSxuLm5leHQ9ZnVuY3Rpb24oKXt2YXIgbj10Lm5leHQoKTtpZihuLmRvbmUpcmV0dXJuIG47dmFyIGU9ci5nZXQobi52YWx1ZSk7cmV0dXJue2RvbmU6ITEsdmFsdWU6W24udmFsdWUsZV19fSxufSxvW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfSxufSgpLGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4scil7cmV0dXJuIHRoaXNbUV09e2k6MyxsOnIsQTpyP3IuQTpfKCksUDohMSxJOiExLG86dm9pZCAwLHQ6bixrOnRoaXMscDpuZXcgTWFwLE86ITEsQzohMX0sdGhpc31yKG4sU2V0KTt2YXIgdD1uLnByb3RvdHlwZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJzaXplXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBwKHRoaXNbUV0pLnNpemV9fSksdC5oYXM9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxyLm8/ISFyLm8uaGFzKG4pfHwhKCFyLnAuaGFzKG4pfHwhci5vLmhhcyhyLnAuZ2V0KG4pKSk6ci50LmhhcyhuKX0sdC5hZGQ9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSx0aGlzLmhhcyhuKXx8KG8ociksayhyKSxyLm8uYWRkKG4pKSx0aGlzfSx0LmRlbGV0ZT1mdW5jdGlvbihuKXtpZighdGhpcy5oYXMobikpcmV0dXJuITE7dmFyIHI9dGhpc1tRXTtyZXR1cm4gdShyKSxvKHIpLGsociksci5vLmRlbGV0ZShuKXx8ISFyLnAuaGFzKG4pJiZyLm8uZGVsZXRlKHIucC5nZXQobikpfSx0LmNsZWFyPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTt1KG4pLHAobikuc2l6ZSYmKG8obiksayhuKSxuLm8uY2xlYXIoKSl9LHQudmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby52YWx1ZXMoKX0sdC5lbnRyaWVzPWZ1bmN0aW9uKCl7dmFyIG49dGhpc1tRXTtyZXR1cm4gdShuKSxvKG4pLG4uby5lbnRyaWVzKCl9LHQua2V5cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSx0W1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVzKCl9LHQuZm9yRWFjaD1mdW5jdGlvbihuLHIpe2Zvcih2YXIgdD10aGlzLnZhbHVlcygpLGU9dC5uZXh0KCk7IWUuZG9uZTspbi5jYWxsKHIsZS52YWx1ZSxlLnZhbHVlLHRoaXMpLGU9dC5uZXh0KCl9LG59KCk7bShcIk1hcFNldFwiLHtOOmZ1bmN0aW9uKG4scil7cmV0dXJuIG5ldyBmKG4scil9LFQ6ZnVuY3Rpb24obixyKXtyZXR1cm4gbmV3IGMobixyKX19KX1mdW5jdGlvbiBKKCl7TigpLEMoKSxUKCl9ZnVuY3Rpb24gSyhuKXtyZXR1cm4gbn1mdW5jdGlvbiAkKG4pe3JldHVybiBufXZhciBHLFUsVz1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sKFwieFwiKSxYPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBNYXAscT1cInVuZGVmaW5lZFwiIT10eXBlb2YgU2V0LEI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb3h5JiZ2b2lkIDAhPT1Qcm94eS5yZXZvY2FibGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0LEg9Vz9TeW1ib2wuZm9yKFwiaW1tZXItbm90aGluZ1wiKTooKEc9e30pW1wiaW1tZXItbm90aGluZ1wiXT0hMCxHKSxMPVc/U3ltYm9sLmZvcihcImltbWVyLWRyYWZ0YWJsZVwiKTpcIl9fJGltbWVyX2RyYWZ0YWJsZVwiLFE9Vz9TeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik6XCJfXyRpbW1lcl9zdGF0ZVwiLFY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIixZPXswOlwiSWxsZWdhbCBzdGF0ZVwiLDE6XCJJbW1lciBkcmFmdHMgY2Fubm90IGhhdmUgY29tcHV0ZWQgcHJvcGVydGllc1wiLDI6XCJUaGlzIG9iamVjdCBoYXMgYmVlbiBmcm96ZW4gYW5kIHNob3VsZCBub3QgYmUgbXV0YXRlZFwiLDM6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgdXNlIGEgcHJveHkgdGhhdCBoYXMgYmVlbiByZXZva2VkLiBEaWQgeW91IHBhc3MgYW4gb2JqZWN0IGZyb20gaW5zaWRlIGFuIGltbWVyIGZ1bmN0aW9uIHRvIGFuIGFzeW5jIHByb2Nlc3M/IFwiK259LDQ6XCJBbiBpbW1lciBwcm9kdWNlciByZXR1cm5lZCBhIG5ldyB2YWx1ZSAqYW5kKiBtb2RpZmllZCBpdHMgZHJhZnQuIEVpdGhlciByZXR1cm4gYSBuZXcgdmFsdWUgKm9yKiBtb2RpZnkgdGhlIGRyYWZ0LlwiLDU6XCJJbW1lciBmb3JiaWRzIGNpcmN1bGFyIHJlZmVyZW5jZXNcIiw2OlwiVGhlIGZpcnN0IG9yIHNlY29uZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uXCIsNzpcIlRoZSB0aGlyZCBhcmd1bWVudCB0byBgcHJvZHVjZWAgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIHVuZGVmaW5lZFwiLDg6XCJGaXJzdCBhcmd1bWVudCB0byBgY3JlYXRlRHJhZnRgIG11c3QgYmUgYSBwbGFpbiBvYmplY3QsIGFuIGFycmF5LCBvciBhbiBpbW1lcmFibGUgb2JqZWN0XCIsOTpcIkZpcnN0IGFyZ3VtZW50IHRvIGBmaW5pc2hEcmFmdGAgbXVzdCBiZSBhIGRyYWZ0IHJldHVybmVkIGJ5IGBjcmVhdGVEcmFmdGBcIiwxMDpcIlRoZSBnaXZlbiBkcmFmdCBpcyBhbHJlYWR5IGZpbmFsaXplZFwiLDExOlwiT2JqZWN0LmRlZmluZVByb3BlcnR5KCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIiwxMjpcIk9iamVjdC5zZXRQcm90b3R5cGVPZigpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTM6XCJJbW1lciBvbmx5IHN1cHBvcnRzIGRlbGV0aW5nIGFycmF5IGluZGljZXNcIiwxNDpcIkltbWVyIG9ubHkgc3VwcG9ydHMgc2V0dGluZyBhcnJheSBpbmRpY2VzIGFuZCB0aGUgJ2xlbmd0aCcgcHJvcGVydHlcIiwxNTpmdW5jdGlvbihuKXtyZXR1cm5cIkNhbm5vdCBhcHBseSBwYXRjaCwgcGF0aCBkb2Vzbid0IHJlc29sdmU6IFwiK259LDE2OidTZXRzIGNhbm5vdCBoYXZlIFwicmVwbGFjZVwiIHBhdGNoZXMuJywxNzpmdW5jdGlvbihuKXtyZXR1cm5cIlVuc3VwcG9ydGVkIHBhdGNoIG9wZXJhdGlvbjogXCIrbn0sMTg6ZnVuY3Rpb24obil7cmV0dXJuXCJUaGUgcGx1Z2luIGZvciAnXCIrbitcIicgaGFzIG5vdCBiZWVuIGxvYWRlZCBpbnRvIEltbWVyLiBUbyBlbmFibGUgdGhlIHBsdWdpbiwgaW1wb3J0IGFuZCBjYWxsIGBlbmFibGVcIituK1wiKClgIHdoZW4gaW5pdGlhbGl6aW5nIHlvdXIgYXBwbGljYXRpb24uXCJ9LDIwOlwiQ2Fubm90IHVzZSBwcm94aWVzIGlmIFByb3h5LCBQcm94eS5yZXZvY2FibGUgb3IgUmVmbGVjdCBhcmUgbm90IGF2YWlsYWJsZVwiLDIxOmZ1bmN0aW9uKG4pe3JldHVyblwicHJvZHVjZSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhpbmdzIHRoYXQgYXJlIGRyYWZ0YWJsZTogcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBNYXAsIFNldCBvciBjbGFzc2VzIHRoYXQgYXJlIG1hcmtlZCB3aXRoICdbaW1tZXJhYmxlXTogdHJ1ZScuIEdvdCAnXCIrbitcIidcIn0sMjI6ZnVuY3Rpb24obil7cmV0dXJuXCInY3VycmVudCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDIzOmZ1bmN0aW9uKG4pe3JldHVyblwiJ29yaWdpbmFsJyBleHBlY3RzIGEgZHJhZnQsIGdvdDogXCIrbn0sMjQ6XCJQYXRjaGluZyByZXNlcnZlZCBhdHRyaWJ1dGVzIGxpa2UgX19wcm90b19fLCBwcm90b3R5cGUgYW5kIGNvbnN0cnVjdG9yIGlzIG5vdCBhbGxvd2VkXCJ9LFo9XCJcIitPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLG5uPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0Lm93bktleXM/UmVmbGVjdC5vd25LZXlzOnZvaWQgMCE9PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24obil7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4pLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG4pKX06T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMscm49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnN8fGZ1bmN0aW9uKG4pe3ZhciByPXt9O3JldHVybiBubihuKS5mb3JFYWNoKChmdW5jdGlvbih0KXtyW3RdPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobix0KX0pKSxyfSx0bj17fSxlbj17Z2V0OmZ1bmN0aW9uKG4scil7aWYocj09PVEpcmV0dXJuIG47dmFyIGU9cChuKTtpZighdShlLHIpKXJldHVybiBmdW5jdGlvbihuLHIsdCl7dmFyIGUsaT1JKHIsdCk7cmV0dXJuIGk/XCJ2YWx1ZVwiaW4gaT9pLnZhbHVlOm51bGw9PT0oZT1pLmdldCl8fHZvaWQgMD09PWU/dm9pZCAwOmUuY2FsbChuLmspOnZvaWQgMH0obixlLHIpO3ZhciBpPWVbcl07cmV0dXJuIG4uSXx8IXQoaSk/aTppPT09eihuLnQscik/KEUobiksbi5vW3JdPVIobi5BLmgsaSxuKSk6aX0saGFzOmZ1bmN0aW9uKG4scil7cmV0dXJuIHIgaW4gcChuKX0sb3duS2V5czpmdW5jdGlvbihuKXtyZXR1cm4gUmVmbGVjdC5vd25LZXlzKHAobikpfSxzZXQ6ZnVuY3Rpb24obixyLHQpe3ZhciBlPUkocChuKSxyKTtpZihudWxsPT1lP3ZvaWQgMDplLnNldClyZXR1cm4gZS5zZXQuY2FsbChuLmssdCksITA7aWYoIW4uUCl7dmFyIGk9eihwKG4pLHIpLG89bnVsbD09aT92b2lkIDA6aVtRXTtpZihvJiZvLnQ9PT10KXJldHVybiBuLm9bcl09dCxuLkRbcl09ITEsITA7aWYoYyh0LGkpJiYodm9pZCAwIT09dHx8dShuLnQscikpKXJldHVybiEwO0UobiksayhuKX1yZXR1cm4gbi5vW3JdPT09dCYmXCJudW1iZXJcIiE9dHlwZW9mIHQmJih2b2lkIDAhPT10fHxyIGluIG4ubyl8fChuLm9bcl09dCxuLkRbcl09ITAsITApfSxkZWxldGVQcm9wZXJ0eTpmdW5jdGlvbihuLHIpe3JldHVybiB2b2lkIDAhPT16KG4udCxyKXx8ciBpbiBuLnQ/KG4uRFtyXT0hMSxFKG4pLGsobikpOmRlbGV0ZSBuLkRbcl0sbi5vJiZkZWxldGUgbi5vW3JdLCEwfSxnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ZnVuY3Rpb24obixyKXt2YXIgdD1wKG4pLGU9UmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtyZXR1cm4gZT97d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOjEhPT1uLml8fFwibGVuZ3RoXCIhPT1yLGVudW1lcmFibGU6ZS5lbnVtZXJhYmxlLHZhbHVlOnRbcl19OmV9LGRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKCl7bigxMSl9LGdldFByb3RvdHlwZU9mOmZ1bmN0aW9uKG4pe3JldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobi50KX0sc2V0UHJvdG90eXBlT2Y6ZnVuY3Rpb24oKXtuKDEyKX19LG9uPXt9O2koZW4sKGZ1bmN0aW9uKG4scil7b25bbl09ZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzWzBdPWFyZ3VtZW50c1swXVswXSxyLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KSksb24uZGVsZXRlUHJvcGVydHk9ZnVuY3Rpb24ocix0KXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZpc05hTihwYXJzZUludCh0KSkmJm4oMTMpLG9uLnNldC5jYWxsKHRoaXMscix0LHZvaWQgMCl9LG9uLnNldD1mdW5jdGlvbihyLHQsZSl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJsZW5ndGhcIiE9PXQmJmlzTmFOKHBhcnNlSW50KHQpKSYmbigxNCksZW4uc2V0LmNhbGwodGhpcyxyWzBdLHQsZSxyWzBdKX07dmFyIHVuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShyKXt2YXIgZT10aGlzO3RoaXMuZz1CLHRoaXMuRj0hMCx0aGlzLnByb2R1Y2U9ZnVuY3Rpb24ocixpLG8pe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHImJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGkpe3ZhciB1PWk7aT1yO3ZhciBhPWU7cmV0dXJuIGZ1bmN0aW9uKG4pe3ZhciByPXRoaXM7dm9pZCAwPT09biYmKG49dSk7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsZT1BcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKWVbby0xXT1hcmd1bWVudHNbb107cmV0dXJuIGEucHJvZHVjZShuLChmdW5jdGlvbihuKXt2YXIgdDtyZXR1cm4odD1pKS5jYWxsLmFwcGx5KHQsW3Isbl0uY29uY2F0KGUpKX0pKX19dmFyIGY7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgaSYmbig2KSx2b2lkIDAhPT1vJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBvJiZuKDcpLHQocikpe3ZhciBjPXcoZSkscz1SKGUscix2b2lkIDApLHY9ITA7dHJ5e2Y9aShzKSx2PSExfWZpbmFsbHl7dj9PKGMpOmcoYyl9cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2UmJmYgaW5zdGFuY2VvZiBQcm9taXNlP2YudGhlbigoZnVuY3Rpb24obil7cmV0dXJuIGooYyxvKSxQKG4sYyl9KSwoZnVuY3Rpb24obil7dGhyb3cgTyhjKSxufSkpOihqKGMsbyksUChmLGMpKX1pZighcnx8XCJvYmplY3RcIiE9dHlwZW9mIHIpe2lmKHZvaWQgMD09PShmPWkocikpJiYoZj1yKSxmPT09SCYmKGY9dm9pZCAwKSxlLkYmJmQoZiwhMCksbyl7dmFyIHA9W10sbD1bXTtiKFwiUGF0Y2hlc1wiKS5NKHIsZixwLGwpLG8ocCxsKX1yZXR1cm4gZn1uKDIxLHIpfSx0aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcz1mdW5jdGlvbihuLHIpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pcmV0dXJuIGZ1bmN0aW9uKHIpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGk9QXJyYXkodD4xP3QtMTowKSxvPTE7bzx0O28rKylpW28tMV09YXJndW1lbnRzW29dO3JldHVybiBlLnByb2R1Y2VXaXRoUGF0Y2hlcyhyLChmdW5jdGlvbihyKXtyZXR1cm4gbi5hcHBseSh2b2lkIDAsW3JdLmNvbmNhdChpKSl9KSl9O3ZhciB0LGksbz1lLnByb2R1Y2UobixyLChmdW5jdGlvbihuLHIpe3Q9bixpPXJ9KSk7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2UmJm8gaW5zdGFuY2VvZiBQcm9taXNlP28udGhlbigoZnVuY3Rpb24obil7cmV0dXJuW24sdCxpXX0pKTpbbyx0LGldfSxcImJvb2xlYW5cIj09dHlwZW9mKG51bGw9PXI/dm9pZCAwOnIudXNlUHJveGllcykmJnRoaXMuc2V0VXNlUHJveGllcyhyLnVzZVByb3hpZXMpLFwiYm9vbGVhblwiPT10eXBlb2YobnVsbD09cj92b2lkIDA6ci5hdXRvRnJlZXplKSYmdGhpcy5zZXRBdXRvRnJlZXplKHIuYXV0b0ZyZWV6ZSl9dmFyIGk9ZS5wcm90b3R5cGU7cmV0dXJuIGkuY3JlYXRlRHJhZnQ9ZnVuY3Rpb24oZSl7dChlKXx8big4KSxyKGUpJiYoZT1EKGUpKTt2YXIgaT13KHRoaXMpLG89Uih0aGlzLGUsdm9pZCAwKTtyZXR1cm4gb1tRXS5DPSEwLGcoaSksb30saS5maW5pc2hEcmFmdD1mdW5jdGlvbihyLHQpe3ZhciBlPXImJnJbUV07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKGUmJmUuQ3x8big5KSxlLkkmJm4oMTApKTt2YXIgaT1lLkE7cmV0dXJuIGooaSx0KSxQKHZvaWQgMCxpKX0saS5zZXRBdXRvRnJlZXplPWZ1bmN0aW9uKG4pe3RoaXMuRj1ufSxpLnNldFVzZVByb3hpZXM9ZnVuY3Rpb24ocil7ciYmIUImJm4oMjApLHRoaXMuZz1yfSxpLmFwcGx5UGF0Y2hlcz1mdW5jdGlvbihuLHQpe3ZhciBlO2ZvcihlPXQubGVuZ3RoLTE7ZT49MDtlLS0pe3ZhciBpPXRbZV07aWYoMD09PWkucGF0aC5sZW5ndGgmJlwicmVwbGFjZVwiPT09aS5vcCl7bj1pLnZhbHVlO2JyZWFrfX1lPi0xJiYodD10LnNsaWNlKGUrMSkpO3ZhciBvPWIoXCJQYXRjaGVzXCIpLiQ7cmV0dXJuIHIobik/byhuLHQpOnRoaXMucHJvZHVjZShuLChmdW5jdGlvbihuKXtyZXR1cm4gbyhuLHQpfSkpfSxlfSgpLGFuPW5ldyB1bixmbj1hbi5wcm9kdWNlLGNuPWFuLnByb2R1Y2VXaXRoUGF0Y2hlcy5iaW5kKGFuKSxzbj1hbi5zZXRBdXRvRnJlZXplLmJpbmQoYW4pLHZuPWFuLnNldFVzZVByb3hpZXMuYmluZChhbikscG49YW4uYXBwbHlQYXRjaGVzLmJpbmQoYW4pLGxuPWFuLmNyZWF0ZURyYWZ0LmJpbmQoYW4pLGRuPWFuLmZpbmlzaERyYWZ0LmJpbmQoYW4pO2V4cG9ydCBkZWZhdWx0IGZuO2V4cG9ydHt1biBhcyBJbW1lcixwbiBhcyBhcHBseVBhdGNoZXMsSyBhcyBjYXN0RHJhZnQsJCBhcyBjYXN0SW1tdXRhYmxlLGxuIGFzIGNyZWF0ZURyYWZ0LEQgYXMgY3VycmVudCxKIGFzIGVuYWJsZUFsbFBsdWdpbnMsTiBhcyBlbmFibGVFUzUsQyBhcyBlbmFibGVNYXBTZXQsVCBhcyBlbmFibGVQYXRjaGVzLGRuIGFzIGZpbmlzaERyYWZ0LGQgYXMgZnJlZXplLEwgYXMgaW1tZXJhYmxlLHIgYXMgaXNEcmFmdCx0IGFzIGlzRHJhZnRhYmxlLEggYXMgbm90aGluZyxlIGFzIG9yaWdpbmFsLGZuIGFzIHByb2R1Y2UsY24gYXMgcHJvZHVjZVdpdGhQYXRjaGVzLHNuIGFzIHNldEF1dG9GcmVlemUsdm4gYXMgc2V0VXNlUHJveGllc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbW1lci5lc20uanMubWFwXG4iXSwibmFtZXMiOlsiRGVmZXJyZWQiLCJjb25zdHJ1Y3RvciIsInJlc29sdmUiLCJ1bmRlZmluZWQiLCJyZWplY3QiLCJwcm9taXNlIiwiUHJvbWlzZSIsIk9iamVjdCIsImZyZWV6ZSIsImxvY2F0aW9uTWV0YWRhdGEiLCJsb2NhdGlvbiIsImRpc3BsYXlOYW1lIiwic3VwcG9ydHNMb2dzIiwibG9nc1N1cHBvcnRlZExvY2F0aW9uc0t1c3RvIiwiZmlsdGVyIiwidiIsIm1hcCIsImpvaW4iLCJsb2NhdGlvbkRpc3BsYXlOYW1lcyIsInJlZHVjZSIsImFjYyIsImxvZ3NSZXNvdXJjZVR5cGVzIiwic3VwcG9ydGVkTWV0cmljTmFtZXNwYWNlcyIsInJlc291cmNlVHlwZURpc3BsYXlOYW1lcyIsImZyb20iLCJtZXJnZU1hcCIsIkRhdGFTb3VyY2VXaXRoQmFja2VuZCIsImdldFRlbXBsYXRlU3J2IiwiaXNHVUlEaXNoIiwiZ2V0QXV0aFR5cGUiLCJnZXRBenVyZUNsb3VkIiwiZ2V0QXp1cmVQb3J0YWxVcmwiLCJMb2dBbmFseXRpY3NRdWVyeXN0cmluZ0J1aWxkZXIiLCJBenVyZVF1ZXJ5VHlwZSIsImludGVycG9sYXRlVmFyaWFibGUiLCJyb3V0ZU5hbWVzIiwiUmVzcG9uc2VQYXJzZXIiLCJ0cmFuc2Zvcm1NZXRhZGF0YVRvS3VzdG9TY2hlbWEiLCJBenVyZUxvZ0FuYWx5dGljc0RhdGFzb3VyY2UiLCJpbnN0YW5jZVNldHRpbmdzIiwiY2FjaGUiLCJNYXAiLCJyZXNvdXJjZVBhdGgiLCJsb2dBbmFseXRpY3MiLCJhenVyZU1vbml0b3JQYXRoIiwiYXp1cmVNb25pdG9yIiwiY2xvdWQiLCJhenVyZVBvcnRhbFVybCIsImRlZmF1bHRTdWJzY3JpcHRpb25JZCIsImpzb25EYXRhIiwic3Vic2NyaXB0aW9uSWQiLCJpc0NvbmZpZ3VyZWQiLCJ2YWxpZGF0ZURhdGFzb3VyY2UiLCJmaWx0ZXJRdWVyeSIsIml0ZW0iLCJoaWRlIiwiYXp1cmVMb2dBbmFseXRpY3MiLCJxdWVyeSIsInJlc291cmNlIiwid29ya3NwYWNlIiwiZ2V0U3Vic2NyaXB0aW9ucyIsInBhdGgiLCJnZXRSZXNvdXJjZSIsInRoZW4iLCJyZXN1bHQiLCJwYXJzZVN1YnNjcmlwdGlvbnMiLCJnZXRXb3Jrc3BhY2VzIiwic3Vic2NyaXB0aW9uIiwicmVzcG9uc2UiLCJnZXRXb3Jrc3BhY2VMaXN0IiwidmFsdWUiLCJ2YWwiLCJ0ZXh0IiwibmFtZSIsImlkIiwicmVwbGFjZSIsIndvcmtzcGFjZUxpc3RVcmwiLCJnZXRNZXRhZGF0YSIsInJlc291cmNlVXJpIiwicmVzcCIsImdldEt1c3RvU2NoZW1hIiwidGVtcGxhdGVTcnYiLCJpbnRlcnBvbGF0ZWRVcmkiLCJtZXRhZGF0YSIsImdldFZhcmlhYmxlcyIsImFwcGx5VGVtcGxhdGVWYXJpYWJsZXMiLCJ0YXJnZXQiLCJzY29wZWRWYXJzIiwiZmlyc3RXb3Jrc3BhY2UiLCJxdWVyeVR5cGUiLCJMb2dBbmFseXRpY3MiLCJyZXN1bHRGb3JtYXQiLCJyZXF1ZXN0IiwicGlwZSIsInJlcyIsInByb2Nlc3NSZXNwb25zZSIsImRhdGEiLCJkZiIsImVuY29kZWRRdWVyeSIsIm1ldGEiLCJjdXN0b20iLCJsZW5ndGgiLCJ1cmwiLCJidWlsZERlZXBMaW5rIiwiZmllbGQiLCJmaWVsZHMiLCJjb25maWciLCJsaW5rcyIsInRpdGxlIiwidGFyZ2V0QmxhbmsiLCJjdXN0b21NZXRhIiwiYmFzZTY0RW5jIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwid29ya3NwYWNlSWQiLCJkZXRhaWxzIiwiZ2V0V29ya3NwYWNlRGV0YWlscyIsInJlc291cmNlR3JvdXAiLCJmaW5kIiwibyIsInByb3BlcnRpZXMiLCJjdXN0b21lcklkIiwicmVnZXgiLCJyZXN1bHRzIiwiZXhlYyIsImdldERlcHJlY2F0ZWREZWZhdWx0V29ya1NwYWNlIiwibG9nQW5hbHl0aWNzRGVmYXVsdFdvcmtzcGFjZSIsImJ1aWxkUXVlcnkiLCJvcHRpb25zIiwicXVlcnlzdHJpbmdCdWlsZGVyIiwicXVlcnlzdHJpbmciLCJnZW5lcmF0ZSIsInVyaVN0cmluZyIsInF1ZXJpZXMiLCJkYXRhc291cmNlIiwiZ2V0UmVmIiwiZ2V0RGVmYXVsdE9yRmlyc3RTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb25zIiwiZ2V0Rmlyc3RXb3Jrc3BhY2UiLCJ3b3Jrc3BhY2VzIiwiYW5ub3RhdGlvblF1ZXJ5IiwiYW5ub3RhdGlvbiIsInJhd1F1ZXJ5IiwibWVzc2FnZSIsInByb21pc2VzIiwiZG9RdWVyaWVzIiwiYWxsIiwiYW5ub3RhdGlvbnMiLCJ0cmFuc2Zvcm1Ub0Fubm90YXRpb25zIiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsImF1dGhUeXBlIiwiaXNWYWxpZENvbmZpZ0ZpZWxkIiwidGVuYW50SWQiLCJzdGF0dXMiLCJjbGllbnRJZCIsImNvbmNhdCIsImZsYXR0ZW5EZWVwIiwiZm9yRWFjaCIsImdldCIsImRhdGVUaW1lIiwicGFyc2VRdWVyeVJlc3VsdCIsImNvbHVtbnMiLCJpIiwidGFibGVzIiwicm93cyIsInBhcnNlVGltZVNlcmllc1Jlc3VsdCIsInBhcnNlVGFibGVSZXN1bHQiLCJ0aW1lSW5kZXgiLCJtZXRyaWNJbmRleCIsInZhbHVlSW5kZXgiLCJ0eXBlIiwiaW5kZXhPZiIsIkVycm9yIiwicm93IiwiZXBvY2giLCJkYXRlVGltZVRvRXBvY2giLCJtZXRyaWNOYW1lIiwiYnVja2V0IiwiZmluZE9yQ3JlYXRlQnVja2V0IiwiZGF0YXBvaW50cyIsInB1c2giLCJyZWZJZCIsImV4ZWN1dGVkUXVlcnlTdHJpbmciLCJ0YWJsZVJlc3VsdCIsImNvbCIsInBhcnNlVG9WYXJpYWJsZXMiLCJxdWVyeVJlc3VsdCIsInZhcmlhYmxlcyIsImxpc3QiLCJ0ZXh0SW5kZXgiLCJ0YWdzSW5kZXgiLCJ0b0xvd2VyQ2FzZSIsInRpbWUiLCJNYXRoIiwiZmxvb3IiLCJ0b1N0cmluZyIsInRhZ3MiLCJ0cmltIiwic3BsaXQiLCJkYXRhVGFyZ2V0IiwiZGF0ZVRpbWVWYWx1ZSIsInZhbHVlT2YiLCJ2YWx1ZUZpZWxkTmFtZSIsInRleHRGaWVsZE5hbWUiLCJNRVRBREFUQV9GVU5DVElPTl9QQVJBTVMiLCJ0cmFuc2Zvcm1NZXRhZGF0YUZ1bmN0aW9uIiwic291cmNlU2NoZW1hIiwiZnVuY3Rpb25zIiwiZm4iLCJwYXJhbXMiLCJwYXJhbWV0ZXJzIiwiYXJnIiwibWF0Y2giLCJkZWZhdWx0VmFsdWUiLCJjc2xEZWZhdWx0VmFsdWUiLCJib2R5IiwiaW5wdXRQYXJhbWV0ZXJzIiwibmFtZU9ySWRPclNvbWV0aGluZyIsInRlbXBsYXRlVmFyaWFibGVzIiwiZGF0YWJhc2UiLCJtYWpvclZlcnNpb24iLCJtaW5vclZlcnNpb24iLCJnbG9iYWxQYXJhbWV0ZXJzIiwiY2x1c3RlclR5cGUiLCJjbHVzdGVyIiwiY29ubmVjdGlvblN0cmluZyIsImRhdGFiYXNlcyIsInN0YXJ0c1dpdGgiLCJnZXRUaW1lU3J2IiwiVGltZWdyYWluQ29udmVydGVyIiwiVXJsQnVpbGRlciIsImRlZmF1bHREcm9wZG93blZhbHVlIiwiaGFzVmFsdWUiLCJBenVyZU1vbml0b3JEYXRhc291cmNlIiwidGltZVNydiIsImhhc1Jlc291cmNlVXJpIiwiaGFzTGVnYWN5UXVlcnkiLCJyZXNvdXJjZU5hbWUiLCJtZXRyaWNEZWZpbml0aW9uIiwiYWdncmVnYXRpb24iLCJ0aW1lR3JhaW4iLCJ0aW1lR3JhaW5Vbml0IiwiY3JlYXRlSVNPODYwMUR1cmF0aW9uIiwibWV0cmljTmFtZXNwYWNlIiwidG9wIiwiZGltZW5zaW9uRmlsdGVycyIsImYiLCJkaW1lbnNpb24iLCJmaWx0ZXJzIiwib3BlcmF0b3IiLCJBenVyZU1vbml0b3IiLCJhbGxvd2VkVGltZUdyYWluc01zIiwiYWxpYXMiLCJnZXRSZXNvdXJjZUdyb3VwcyIsImxpc3RCeVJlc291cmNlR3JvdXBBcGlWZXJzaW9uIiwicGFyc2VSZXNwb25zZVZhbHVlcyIsImdldE1ldHJpY0RlZmluaXRpb25zIiwidCIsInNob3VsZEhhcmRjb2RlQmxvYlN0b3JhZ2UiLCJnZXRSZXNvdXJjZU5hbWVzIiwic2tpcFRva2VuIiwidmFsaWRNZXRyaWNEZWZpbml0aW9uIiwicGFyc2VSZXNvdXJjZU5hbWVzIiwibmV4dExpbmsiLCJuZXh0VVJMIiwiVVJMIiwibmV4dFRva2VuIiwic2VhcmNoUGFyYW1zIiwibmV4dFBhZ2UiLCJnZXRNZXRyaWNOYW1lc3BhY2VzIiwiYnVpbGRBenVyZU1vbml0b3JHZXRNZXRyaWNOYW1lc3BhY2VzVXJsIiwiYXBpUHJldmlld1ZlcnNpb24iLCJyZXBsYWNlVGVtcGxhdGVWYXJpYWJsZXMiLCJpbmNsdWRlcyIsInN0b3JhZ2VOYW1lc3BhY2VzIiwibmFtZXNwYWNlIiwiZ2V0TWV0cmljTmFtZXMiLCJidWlsZEF6dXJlTW9uaXRvckdldE1ldHJpY05hbWVzVXJsIiwiYXBpVmVyc2lvbiIsImdldE1ldHJpY01ldGFkYXRhIiwicGFyc2VNZXRhZGF0YSIsIndvcmtpbmdRdWVyeSIsImtleXMiLCJrZXkiLCJUaW1lR3JhaW5Db252ZXJ0ZXIiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsImRlZmF1bHRBZ2dUeXBlcyIsIm1ldHJpY0RhdGEiLCJwcmltYXJ5QWdnVHlwZSIsInN1cHBvcnRlZEFnZ1R5cGVzIiwic3VwcG9ydGVkVGltZUdyYWlucyIsImRpbWVuc2lvbnMiLCJwcmltYXJ5QWdncmVnYXRpb25UeXBlIiwic3VwcG9ydGVkQWdncmVnYXRpb25UeXBlcyIsImxhYmVsIiwicGFyc2VUaW1lR3JhaW5zIiwibWV0cmljQXZhaWxhYmlsaXRpZXMiLCJwYXJzZURpbWVuc2lvbnMiLCJ0aW1lR3JhaW5zIiwiYXZhaWwiLCJjcmVhdGVUaW1lR3JhaW5Gcm9tSVNPODYwMUR1cmF0aW9uIiwibWV0YWRhdGFEaW1lbnNpb25zIiwibG9jYWxpemVkVmFsdWUiLCJwYXJzZVN1YnNjcmlwdGlvbnNGb3JTZWxlY3QiLCJwYXJzZVdvcmtzcGFjZXNGb3JTZWxlY3QiLCJidWlsZFJlc291cmNlVXJpIiwibWV0cmljRGVmaW5pdGlvbkFycmF5IiwicmVzb3VyY2VOYW1lQXJyYXkiLCJwcm92aWRlciIsInNoaWZ0IiwidXJsQXJyYXkiLCJiYXNlVXJsIiwiXyIsIkF6dXJlUmVzb3VyY2VHcmFwaERhdGFzb3VyY2UiLCJhenVyZVJlc291cmNlR3JhcGgiLCJ2YXJpYWJsZU5hbWVzIiwic3Vic2NyaXB0aW9uVmFyIiwic3ViIiwiaW50ZXJwb2xhdGVkU3Vic2NyaXB0aW9ucyIsIkF6dXJlUmVzb3VyY2VHcmFwaCIsIlJlYWN0IiwidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJ1c2VSZWYiLCJFZGl0b3JSb3dzIiwiRWRpdG9yUm93IiwiRWRpdG9yRmllbGRHcm91cCIsIklubGluZUZpZWxkUm93IiwiU3Vic2NyaXB0aW9uRmllbGQiLCJRdWVyeUZpZWxkIiwiRVJST1JfU09VUkNFIiwiQXJnUXVlcnlFZGl0b3IiLCJ2YXJpYWJsZU9wdGlvbkdyb3VwIiwib25DaGFuZ2UiLCJzZXRFcnJvciIsImZldGNoZWRSZWYiLCJzZXRTdWJzY3JpcHRpb25zIiwiY3VycmVudCIsImF6dXJlTW9uaXRvckRhdGFzb3VyY2UiLCJmZXRjaGVkU3Vic2NyaXB0aW9ucyIsImRlc2NyaXB0aW9uIiwiZmVhdHVyZVRvZ2dsZXMiLCJhenVyZU1vbml0b3JFeHBlcmltZW50YWxVSSIsInVzZUNhbGxiYWNrIiwiQ29kZUVkaXRvciIsIm9uUXVlcnlDaGFuZ2UiLCJuZXdRdWVyeSIsImRlZmF1bHQiLCJ1c2VSZWR1Y2VyIiwiSW5saW5lRm9ybUxhYmVsIiwiTGVnYWN5Rm9ybXMiLCJCdXR0b24iLCJTZWxlY3QiLCJpc0NyZWRlbnRpYWxzQ29tcGxldGUiLCJJbnB1dCIsImF1dGhUeXBlT3B0aW9ucyIsIkF6dXJlQ3JlZGVudGlhbHNGb3JtIiwicHJvcHMiLCJjcmVkZW50aWFscyIsImF6dXJlQ2xvdWRPcHRpb25zIiwib25DcmVkZW50aWFsc0NoYW5nZSIsImRpc2FibGVkIiwiaGFzUmVxdWlyZWRGaWVsZHMiLCJsb2FkU3Vic2NyaXB0aW9uc0NsaWNrZWQiLCJvbkxvYWRTdWJzY3JpcHRpb25zIiwidXBkYXRlU3Vic2NyaXB0aW9ucyIsImNhbmNlbGVkIiwicmVjZWl2ZWQiLCJhdXRvU2VsZWN0Iiwib25TdWJzY3JpcHRpb25DaGFuZ2UiLCJmb3VuZCIsIm9wdCIsIm9uQXV0aFR5cGVDaGFuZ2UiLCJzZWxlY3RlZCIsInVwZGF0ZWQiLCJvbkF6dXJlQ2xvdWRDaGFuZ2UiLCJhenVyZUNsb3VkIiwib25UZW5hbnRJZENoYW5nZSIsImV2ZW50Iiwib25DbGllbnRJZENoYW5nZSIsIm9uQ2xpZW50U2VjcmV0Q2hhbmdlIiwiY2xpZW50U2VjcmV0Iiwib25DbGllbnRTZWNyZXRSZXNldCIsIm1hbmFnZWRJZGVudGl0eUVuYWJsZWQiLCJjaGlsZHJlbiIsIlB1cmVDb21wb25lbnQiLCJ1cGRhdGVEYXRhc291cmNlUGx1Z2luT3B0aW9uIiwiZ2V0QmFja2VuZFNydiIsImlzRmV0Y2hFcnJvciIsIkFsZXJ0IiwiTW9uaXRvckNvbmZpZyIsIkNvbmZpZ0VkaXRvciIsIm9wdGlvbnNGdW5jIiwib25PcHRpb25zQ2hhbmdlIiwic2V0U3RhdGUiLCJ1bnNhdmVkIiwic3RhdGUiLCJwdXQiLCJ2ZXJzaW9uIiwic2F2ZU9wdGlvbnMiLCJmZXRjaCIsImJhc2VVUkwiLCJtZXRob2QiLCJ0b1Byb21pc2UiLCJyZW5kZXIiLCJ1cGRhdGVPcHRpb25zIiwid2hpdGVTcGFjZSIsIkVkaXRvckZpZWxkIiwiSW5saW5lRmllbGQiLCJERUZBVUxUX0xBQkVMX1dJRFRIIiwiRmllbGQiLCJsYWJlbFdpZHRoIiwiaW5saW5lRmllbGQiLCJyZW1haW5pbmdQcm9wcyIsInVzZU1lbW8iLCJzZXRGb3JtYXRBcyIsIkZPUk1BVF9PUFRJT05TIiwiRm9ybWF0QXNGaWVsZCIsImhhbmRsZUNoYW5nZSIsImNoYW5nZSIsIlJlc291cmNlRmllbGQiLCJSZXNvdXJjZVJvd1R5cGUiLCJzZXRSZXNvdXJjZSIsInVzZU1pZ3JhdGlvbnMiLCJMb2dzUXVlcnlFZGl0b3IiLCJoaWRlRm9ybWF0QXMiLCJtaWdyYXRpb25FcnJvciIsIlN1YnNjcmlwdGlvbiIsIlJlc291cmNlR3JvdXAiLCJSZXNvdXJjZSIsIlZhcmlhYmxlIiwic2V0S3VzdG9RdWVyeSIsIm1vbmFjb1Byb21pc2VSZWYiLCJnZXRQcm9taXNlIiwiYXp1cmVMb2dBbmFseXRpY3NEYXRhc291cmNlIiwic2NoZW1hIiwibW9uYWNvIiwiZWRpdG9yIiwibGFuZ3VhZ2VzIiwia3VzdG8iLCJnZXRLdXN0b1dvcmtlciIsIm1vZGVsIiwiZ2V0TW9kZWwiLCJ1cmkiLCJ3b3JrZXIiLCJzZXRTY2hlbWEiLCJoYW5kbGVFZGl0b3JNb3VudCIsImt1c3RvUXVlcnkiLCJmb3JtYXRBcyIsInJlc291cmNlVVJJIiwibWlncmF0ZVdvcmtzcGFjZVF1ZXJ5VG9SZXNvdXJjZVF1ZXJ5IiwiaXNXb3Jrc3BhY2VHVUlEIiwicmVzb3VyY2VQaWNrZXJEYXRhIiwiZ2V0UmVzb3VyY2VVUklGcm9tV29ya3NwYWNlIiwic2V0TWlncmF0aW9uRXJyb3IiLCJzZXRBZ2dyZWdhdGlvbiIsIkFnZ3JlZ2F0aW9uRmllbGQiLCJhZ2dyZWdhdGlvbk9wdGlvbnMiLCJpc0xvYWRpbmciLCJIb3Jpem9udGFsR3JvdXAiLCJWZXJ0aWNhbEdyb3VwIiwiTXVsdGlTZWxlY3QiLCJhcHBlbmREaW1lbnNpb25GaWx0ZXIiLCJyZW1vdmVEaW1lbnNpb25GaWx0ZXIiLCJzZXREaW1lbnNpb25GaWx0ZXJWYWx1ZSIsInVzZURpbWVuc2lvbkxhYmVscyIsImRpbWVuc2lvbkxhYmVscyIsInNldERpbWVuc2lvbkxhYmVscyIsImxhYmVsc09iaiIsInNlcmllcyIsImZsYXQiLCJmbGF0TWFwIiwibGFiZWxzIiwiZW50cmllcyIsImFkZCIsIlNldCIsInByZXZMYWJlbHMiLCJuZXdMYWJlbHMiLCJjdXJyZW50TGFiZWxzIiwic2l6ZSIsIkRpbWVuc2lvbkZpZWxkcyIsImRpbWVuc2lvbk9wdGlvbnMiLCJkaW1lbnNpb25PcGVyYXRvcnMiLCJ2YWxpZERpbWVuc2lvbk9wdGlvbnMiLCJzb21lIiwiZGltZW5zaW9uRmlsdGVyIiwiYWRkRmlsdGVyIiwicmVtb3ZlRmlsdGVyIiwiaW5kZXgiLCJvbkZpZWxkQ2hhbmdlIiwiZmlsdGVySW5kZXgiLCJmaWVsZE5hbWUiLCJvbkZpbHRlcklucHV0Q2hhbmdlIiwiZ2V0VmFsaWREaW1lbnNpb25PcHRpb25zIiwic2VsZWN0ZWREaW1lbnNpb24iLCJnZXRWYWxpZEZpbHRlck9wdGlvbnMiLCJzZWxlY3RlZEZpbHRlciIsIkFycmF5IiwiZ2V0VmFsaWRNdWx0aVNlbGVjdE9wdGlvbnMiLCJzZWxlY3RlZEZpbHRlcnMiLCJsYWJlbE9wdGlvbnMiLCJnZXRWYWxpZE9wZXJhdG9ycyIsInNlbGVjdGVkT3BlcmF0b3IiLCJvbk11bHRpU2VsZWN0RmlsdGVyQ2hhbmdlIiwic2V0TGVnZW5kQWxpYXMiLCJMZWdlbmRGb3JtYXRGaWVsZCIsInNldFZhbHVlIiwiZXYiLCJIVE1MSW5wdXRFbGVtZW50IiwiaGFuZGxlQmx1ciIsInNldE1ldHJpY05hbWUiLCJNZXRyaWNOYW1lRmllbGQiLCJtZXRyaWNOYW1lcyIsInNldE1ldHJpY05hbWVzcGFjZSIsIk1ldHJpY05hbWVzcGFjZUZpZWxkIiwibWV0cmljTmFtZXNwYWNlcyIsIm9wdGlvblZhbHVlcyIsIm0iLCJwIiwiY3NzIiwidXNlU3R5bGVzMiIsIk5ld0RpbWVuc2lvbkZpZWxkcyIsIlRpbWVHcmFpbkZpZWxkIiwiVG9wRmllbGQiLCJ1c2VNZXRyaWNOYW1lcyIsInVzZU1ldHJpY05hbWVzcGFjZXMiLCJ1c2VNZXRyaWNNZXRhZGF0YSIsIk1ldHJpY3NRdWVyeUVkaXRvciIsInN0eWxlcyIsImdldFN0eWxlcyIsIm1ldHJpY3NNZXRhZGF0YSIsImFnZ09wdGlvbnMiLCJyb3dHYXAiLCJBY2Nlc3NvcnlCdXR0b24iLCJFZGl0b3JMaXN0Iiwic2V0RGltZW5zaW9uRmlsdGVycyIsImNoYW5nZWRGdW5jIiwiY2hhbmdlZCIsInByb3BlckRhdGEiLCJ4IiwicmVuZGVyRmlsdGVycyIsIm9uRGVsZXRlIiwiZSIsInNldFRpbWVHcmFpbiIsInRpbWVHcmFpbk9wdGlvbnMiLCJhdXRvSW50ZXJ2YWwiLCJmaW5kQ2xvc2VzdFRpbWVHcmFpbiIsImNyZWF0ZUtiblVuaXRGcm9tSVNPODYwMUR1cmF0aW9uIiwiYmFzZVRpbWVHcmFpbnMiLCJzZXRUb3AiLCJyYW5nZVV0aWwiLCJ0b09wdGlvbiIsInVzZUFzeW5jU3RhdGUiLCJmb3JtYXRPcHRpb25zIiwiZGVmYXVsdE1ldHJpY01ldGFkYXRhIiwibWV0cmljTWV0YWRhdGEiLCJzZXRNZXRyaWNNZXRhZGF0YSIsImFnZ3JlZ2F0aW9ucyIsIm5ld0FnZ3JlZ2F0aW9uIiwibmV3VGltZUdyYWluIiwiaW50ZXJ2YWxUb01zIiwicmF3UmVzdWx0cyIsInNlbGVjdGVkVmFsdWUiLCJvcHRpb24iLCJzcGxpdFVyaSIsImFjY291bnROYW1lSW5kZXgiLCJmaW5kSW5kZXgiLCJiYXNlVXJpIiwic2xpY2UiLCJzdWJOYW1lc3BhY2UiLCJleGlzdGluZ0ZpbHRlcnMiLCJpbmRleFRvUmVtb3ZlIiwibmV3RmlsdGVycyIsInNwbGljZSIsIm5ld0ZpbHRlciIsImdldENyZWRlbnRpYWxzIiwidXBkYXRlQ3JlZGVudGlhbHMiLCJhenVyZUNsb3VkcyIsImF6dXJlIiwicmVhZE9ubHkiLCJkZWJvdW5jZSIsInVzZUxhc3RFcnJvciIsIk5ld01ldHJpY3NRdWVyeUVkaXRvciIsIlF1ZXJ5SGVhZGVyIiwiU3BhY2UiLCJRdWVyeVR5cGVGaWVsZCIsInVzZVByZXBhcmVkUXVlcnkiLCJRdWVyeUVkaXRvciIsImJhc2VRdWVyeSIsIm9uUnVuUXVlcnkiLCJiYXNlT25SdW5RdWVyeSIsImVycm9yTWVzc2FnZSIsIkVkaXRvckZvclF1ZXJ5VHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJxdWVyeVR5cGVzIiwiZGVlcEVxdWFsIiwiZGVmYXVsdHMiLCJtaWdyYXRlUXVlcnkiLCJERUZBVUxUX1FVRVJZIiwicHJlcGFyZVF1ZXJ5Iiwid2l0aERlZmF1bHRzIiwibWlncmF0ZWRRdWVyeSIsIm9uQ2hhbmdlUXVlcnkiLCJwcmVwYXJlZFF1ZXJ5IiwiRWRpdG9ySGVhZGVyIiwiSW5saW5lU2VsZWN0IiwiY3giLCJJY29uIiwiTW9kYWwiLCJSZXNvdXJjZVBpY2tlciIsInBhcnNlUmVzb3VyY2VVUkkiLCJwYXJzZVJlc291cmNlRGV0YWlscyIsInBhcnNlZCIsInN1YnNjcmlwdGlvbk5hbWUiLCJzdWJzY3JpcHRpb25JRCIsInJlc291cmNlR3JvdXBOYW1lIiwic2VsZWN0YWJsZUVudHJ5VHlwZXMiLCJwaWNrZXJJc09wZW4iLCJzZXRQaWNrZXJJc09wZW4iLCJoYW5kbGVPcGVuUGlja2VyIiwiY2xvc2VQaWNrZXIiLCJoYW5kbGVBcHBseSIsIm1vZGFsIiwicmVzb3VyY2VGaWVsZEJ1dHRvbiIsIlJlc291cmNlTGFiZWwiLCJyZXNvdXJjZUNvbXBvbmVudHMiLCJzZXRSZXNvdXJjZUNvbXBvbmVudHMiLCJnZXRSZXNvdXJjZVVSSURpc3BsYXlQcm9wZXJ0aWVzIiwiRm9ybWF0dGVkUmVzb3VyY2UiLCJ0cnVuY2F0ZWQiLCJyZXNvdXJjZUZpZWxkIiwiRW50cnlJY29uIiwiaXNPcGVuIiwiZW50cnkiLCJWYXJpYWJsZUdyb3VwIiwiQ2hlY2tib3giLCJJY29uQnV0dG9uIiwidXNlVGhlbWUyIiwiTmVzdGVkRW50cnkiLCJpc1NlbGVjdGVkIiwiaXNEaXNhYmxlZCIsImlzU2VsZWN0YWJsZSIsImxldmVsIiwic2Nyb2xsSW50b1ZpZXciLCJvblRvZ2dsZUNvbGxhcHNlIiwib25TZWxlY3RlZENoYW5nZSIsInRoZW1lIiwiaGFzQ2hpbGRyZW4iLCJoYW5kbGVUb2dnbGVDb2xsYXBzZSIsImhhbmRsZVNlbGVjdGVkQ2hhbmdlZCIsImNoZWNrZWQiLCJjaGVja2JveElkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImJlaGF2aW9yIiwiYmxvY2siLCJuZXN0ZWRFbnRyeSIsIm1hcmdpbkxlZnQiLCJzcGFjaW5nIiwiZ3JpZFNpemUiLCJjb2xsYXBzZUJ1dHRvbiIsIm5lc3RlZFJvd0NoZWNrYm94IiwiZW50cnlDb250ZW50SXRlbSIsIkZhZGVUcmFuc2l0aW9uIiwiTG9hZGluZ1BsYWNlaG9sZGVyIiwiZmluZFJvdyIsIk5lc3RlZFJvdyIsInNlbGVjdGVkUm93cyIsInJlcXVlc3ROZXN0ZWRSb3dzIiwib25Sb3dTZWxlY3RlZENoYW5nZSIsInJvd1N0YXR1cyIsInNldFJvd1N0YXR1cyIsIm9uUm93VG9nZ2xlQ29sbGFwc2UiLCJzZWxlY3RlZFJvdyIsImNvbnRhaW5zQ2hpbGQiLCJkaXNhYmxlZFJvdyIsImNlbGwiLCJ0eXBlTGFiZWwiLCJjaGlsZFJvdyIsImxvYWRpbmdDZWxsIiwic3Bpbm5lciIsInVzZUVmZmVjdE9uY2UiLCJUb29sdGlwIiwiQ29sbGFwc2UiLCJMYWJlbCIsIm1lc3NhZ2VGcm9tRXJyb3IiLCJTZWFyY2giLCJvbkFwcGx5Iiwib25DYW5jZWwiLCJzZXRJc0xvYWRpbmciLCJzZXRSb3dzIiwic2V0U2VsZWN0ZWRSb3dzIiwiaW50ZXJuYWxTZWxlY3RlZFVSSSIsInNldEludGVybmFsU2VsZWN0ZWRVUkkiLCJzZXRFcnJvck1lc3NhZ2UiLCJpc0FkdmFuY2VkT3BlbiIsInNldElzQWR2YW5jZWRPcGVuIiwic2hvdWxkU2hvd0xpbWl0RmxhZyIsInNldFNob3VsZFNob3dMaW1pdEZsYWciLCJsb2FkSW5pdGlhbERhdGEiLCJyZXNvdXJjZXMiLCJmZXRjaEluaXRpYWxSb3dzIiwicGFyZW50Um93IiwibmVzdGVkUm93cyIsImZldGNoQW5kQXBwZW5kTmVzdGVkUm93IiwiaGFuZGxlU2VsZWN0aW9uQ2hhbmdlZCIsImhhbmRsZVNlYXJjaCIsInNlYXJjaFdvcmQiLCJzZWFyY2hSZXN1bHRzIiwic2VhcmNoIiwicmVzdWx0TGltaXQiLCJ0YWJsZSIsImhlYWRlciIsInRhYmxlU2Nyb2xsZXIiLCJzZWxlY3Rpb25Gb290ZXIiLCJjdXJyZW50VGFyZ2V0Iiwic2VhcmNoRm4iLCJzZWFyY2hGaWx0ZXIiLCJzZXRTZWFyY2hGaWx0ZXIiLCJkZWJvdW5jZWRTZWFyY2giLCJjYW5jZWwiLCJzZWFyY2hQaHJhc2UiLCJ3aWR0aCIsInRhYmxlTGF5b3V0IiwibWF4SGVpZ2h0Iiwib3ZlcmZsb3ciLCJiYWNrZ3JvdW5kIiwiY29sb3JzIiwic2Vjb25kYXJ5IiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyIiwid2VhayIsImJvcmRlckJvdHRvbUNvbG9yIiwibWVkaXVtIiwib3BhY2l0eSIsInBhZGRpbmciLCJ0ZXh0T3ZlcmZsb3ciLCJtYXJnaW4iLCJ0ZXh0QWxpZ24iLCJtYXJnaW5Cb3R0b20iLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJ6SW5kZXgiLCJwb3NpdGlvbiIsImJvdHRvbSIsInByaW1hcnkiLCJwYWRkaW5nVG9wIiwibG9hZGluZ1dyYXBwZXIiLCJwYWRkaW5nQm90dG9tIiwiY29sb3IiLCJmb250U3R5bGUiLCJicmVha3BvaW50cyIsInZhbHVlcyIsImxnIiwicHJvZHVjZSIsIlJFU09VUkNFX1VSSV9SRUdFWCIsIm1hdGNoZXMiLCJncm91cHMiLCJpbnB1dCIsImFkZFJlc291cmNlcyIsInRhcmdldFBhcmVudElkIiwibmV3UmVzb3VyY2VzIiwiZHJhZnRTdGF0ZSIsImRyYWZ0Um93Iiwic3R5bGVzRmFjdG9yeSIsIndyYXBwZXIiLCJkZWZhdWx0UHJvcHMiLCJoIiwibGF5b3V0IiwicGFkZGluZ1JpZ2h0IiwiZmluZE9wdGlvbnMiLCJtdWx0aVNlbGVjdCIsIm9uU3Vic2NyaXB0aW9uc0NoYW5nZSIsImMiLCJtaWdyYXRlU3RyaW5nUXVlcmllc1RvT2JqZWN0UXVlcmllcyIsIkFaVVJFX1FVRVJZX1ZBUklBQkxFX1RZUEVfT1BUSU9OUyIsIkdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm4iLCJHcmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuSW5wdXQiLCJ1cGRhdGVRdWVyeSIsImlucHV0VmFsIiwic2V0SW5wdXRWYWwiLCJncmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuIiwidXBkYXRlZFF1ZXJ5Iiwia2luZCIsIlZhcmlhYmxlRWRpdG9yIiwiZGVmYXVsdFF1ZXJ5Iiwic2V0UXVlcnkiLCJvblF1ZXJ5VHlwZUNoYW5nZSIsInNlbGVjdGFibGVWYWx1ZSIsIm9uTG9nc1F1ZXJ5Q2hhbmdlIiwicXVlcnlDaGFuZ2UiLCJBenVyZUNsb3VkIiwiY29uY2VhbGVkIiwiU3ltYm9sIiwiYXp1cmVBdXRoVHlwZSIsImdldERlZmF1bHRBenVyZUNsb3VkIiwiUHVibGljIiwiTm9uZSIsIkNoaW5hIiwiVVNHb3Zlcm5tZW50IiwiR2VybWFueSIsImNsb3VkTmFtZSIsImdldFNlY3JldCIsInNlY3VyZUpzb25GaWVsZHMiLCJzZWNyZXQiLCJzZWN1cmVKc29uRGF0YSIsImNsb25lRGVlcCIsImZvcmtKb2luIiwib2YiLCJMb2FkaW5nU3RhdGUiLCJSZXNvdXJjZVBpY2tlckRhdGEiLCJtaWdyYXRlQW5ub3RhdGlvbiIsImRhdGFzb3VyY2VNaWdyYXRpb25zIiwiVmFyaWFibGVTdXBwb3J0IiwiRGF0YXNvdXJjZSIsInByZXBhcmVBbm5vdGF0aW9uIiwiYXp1cmVSZXNvdXJjZUdyYXBoRGF0YXNvdXJjZSIsInBzZXVkb0RhdGFzb3VyY2UiLCJkcyIsImJ5VHlwZSIsImJhc2VUYXJnZXQiLCJ0YXJnZXRzIiwiaGFzUXVlcnlGb3JUeXBlIiwiaGFzIiwicXVlcnlGb3JUeXBlIiwicmVxdWVzdElkIiwic2V0Iiwib2JzZXJ2YWJsZXMiLCJyZXEiLCJmcmFtZSIsIkRvbmUiLCJ0YXJnZXRDb250YWluc1RlbXBsYXRlIiwiY29udGFpbnNUZW1wbGF0ZSIsInN1YlF1ZXJ5IiwiZ2V0QXp1cmVMb2dBbmFseXRpY3NXb3Jrc3BhY2VzIiwiaW50ZXJwb2xhdGVWYXJpYWJsZXNJblF1ZXJpZXMiLCJtYXBwZWQiLCJncmFmYW5hVGVtcGxhdGVWYXJpYWJsZUZuTWF0Y2hlcyIsInJlc291cmNlR3JvdXBzIiwicmVzb3VyY2VHcm91cHNXaXRoU3ViIiwibWV0cmljRGVmaW5pdGlvbnMiLCJtZXRyaWNEZWZpbml0aW9uc1dpdGhTdWIiLCJyZXNvdXJjZU5hbWVzIiwicmVzb3VyY2VOYW1lc1dpdGhTdWIiLCJtZXRyaWNOYW1lc3BhY2VXaXRoU3ViIiwibWV0cmljTmFtZXNXaXRoU3ViIiwiYXBwSW5zaWdodHNNZXRyaWNOYW1lUXVlcnkiLCJhcHBJbnNpZ2h0c0dyb3VwQnlRdWVyeSIsIndvcmtzcGFjZXNRdWVyeSIsIndvcmtzcGFjZXNRdWVyeVdpdGhTdWIiLCJpc0dyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlRm5RdWVyeSIsImNyZWF0ZUdyYWZhbmFUZW1wbGF0ZVZhcmlhYmxlUXVlcnkiLCJtYXRjaGVzRm9yUXVlcnkiLCJjcmVhdGVHcmFmYW5hVGVtcGxhdGVWYXJpYWJsZURldGFpbHMiLCJxdWVyeURldGFpbHMiLCJjcmVhdGVMb2dBbmFseXRpY3NUZW1wbGF0ZVZhcmlhYmxlUXVlcnkiLCJkZWZhdWx0V29ya3NwYWNlSWQiLCJtYXliZUZpcnN0V29ya3NwYWNlIiwicmF3UXVlcnlTdHJpbmciLCJkZWZhdWx0VGltZUZpZWxkIiwicXVlcnlTdHJpbmciLCJtYWNyb1JlZ2V4cCIsInAxIiwicDIiLCJnZXRNdWx0aUNvbnRhaW5zIiwiZXNjYXBlIiwiZ2V0VGltZUZpbHRlciIsImdldEZyb20iLCJnZXRVbnRpbCIsImludGVydmFsIiwicmFuZ2UiLCJzdGFydE9mIiwidG9JU09TdHJpbmciLCJyYW5nZVJhdyIsInRvIiwibm93IiwiRGF0ZSIsInVudGlsIiwidGltZUZpZWxkQXJnIiwidGltZUZpZWxkIiwiaW5wdXRzIiwiZmlyc3RDb21tYUluZGV4Iiwic3Vic3RyaW5nIiwidGVtcGxhdGVWYXIiLCJEYXRhU291cmNlUGx1Z2luIiwiQXp1cmVNb25pdG9yUXVlcnlFZGl0b3IiLCJwbHVnaW4iLCJzZXRDb25maWdFZGl0b3IiLCJzZXRRdWVyeUVkaXRvciIsIlJFU09VUkNFX0dSQVBIX1VSTCIsImxvZ3NTdXBwb3J0ZWRSZXNvdXJjZVR5cGVzS3VzdG8iLCJzdXBwb3J0ZWRNZXRyaWNOYW1lc3BhY2VzS3VzdG8iLCJzZWFyY2hUeXBlIiwic2VhcmNoUXVlcnkiLCJmaWx0ZXJCeVR5cGUiLCJtYWtlUmVzb3VyY2VHcmFwaFJlcXVlc3QiLCJwYXJzZWRVcmkiLCJyZXNvdXJjZUdyYXBoIiwiY3VycmVudFNlbGVjdGlvbiIsInBhcnNlZFVSSSIsInJlc291cmNlR3JvdXBVUkkiLCJnZXRSZXNvdXJjZUdyb3Vwc0J5U3Vic2NyaXB0aW9uSWQiLCJyZXNvdXJjZXNGb3JSZXNvdXJjZUdyb3VwIiwiZ2V0UmVzb3VyY2VzRm9yUmVzb3VyY2VHcm91cCIsImFsbEZldGNoZWQiLCIkc2tpcFRva2VuIiwicmVzb3VyY2VSZXNwb25zZSIsInIiLCJyZXNvdXJjZUdyb3VwSWQiLCJzdWJzY3JpcHRpb25VUkkiLCJtYXhSZXRyaWVzIiwicmVxT3B0aW9ucyIsInBvc3RSZXNvdXJjZSIsInRpbWVJbnRlcnZhbHMiLCJ0b1VwcGVyQ2FzZSIsImNyZWF0ZUlTTzg2MDFEdXJhdGlvbkZyb21JbnRlcnZhbCIsInVuaXQiLCJ0b01pbnV0ZXMiLCJhbGxvd2VkVGltZUdyYWlucyIsImNsb3Nlc3QiLCJpbnRlcnZhbE1zIiwiZHVyYXRpb24iLCJvZmZzZXQiLCJ0aW1lVW5pdFRvVGV4dCIsInRpbWVVbml0VG9LYm4iLCJoYXNPcHRpb24iLCJhY2N1bSIsImNvbnZlcnRUaW1lR3JhaW5zVG9NcyIsInRnIiwiYXBwSW5zaWdodHMiLCJ2YXJpYWJsZSIsIm11bHRpIiwiaW5jbHVkZUFsbCIsImFsbFZhbHVlIiwicXVvdGVkVmFsdWVzIiwib2xkUXVlcnkiLCJvbGRXb3Jrc3BhY2UiLCJzZXRNZXRyaWNzVGltZUdyYWluIiwiT0xEX0RFRkFVTFRfRFJPUERPV05fVkFMVUUiLCJtaWdyYXRlVGltZUdyYWlucyIsIm1pZ3JhdGVMb2dBbmFseXRpY3NUb0Zyb21UaW1lcyIsIm1pZ3JhdGVUb0RlZmF1bHROYW1lc3BhY2UiLCJtaWdyYXRlRGltZW5zaW9uVG9EaW1lbnNpb25GaWx0ZXIiLCJtaWdyYXRlUmVzb3VyY2VVcmkiLCJtaWdyYXRlRGltZW5zaW9uRmlsdGVyVG9BcnJheSIsImhhdmVNZXRyaWNOYW1lc3BhY2UiLCJvbGREaW1lbnNpb24iLCJhenVyZU1vbml0b3JRdWVyeSIsInN0YXRpY1Byb3BzIiwiaGFzRmlsdGVyIiwib2xkRmlsdGVyIiwiYXN5bmNGbiIsImRlcGVuZGVuY2llcyIsImVycm9yU291cmNlIiwicmFuZG9tIiwiZmluYWxWYWx1ZSIsImVycm9ycyIsInNldEVycm9ycyIsImFkZEVycm9yIiwiZXJyb3JzQ29weSIsInZTb3VyY2UiLCJ1bnNoaWZ0IiwicmVjZW50RXJyb3IiLCJsYXN0VmFsdWVGcm9tIiwiQ3VzdG9tVmFyaWFibGVTdXBwb3J0IiwidG9EYXRhRnJhbWUiLCJiaW5kIiwicHJvbWlzZWRSZXN1bHRzIiwicXVlcnlPYmoiLCJ0ZW1wbGF0ZVZhcmlhYmxlc1Jlc3VsdHMiLCJjYWxsR3JhZmFuYVRlbXBsYXRlVmFyaWFibGVGbiIsInJlcGxhY2VWYXJpYWJsZSIsIm1ldHJpYyJdLCJzb3VyY2VSb290IjoiIn0=