{"ast":null,"code":"import { config } from '@grafana/runtime';\nimport { AzureCloud } from './types';\nconst concealed = Symbol('Concealed client secret');\nexport function getAuthType(options) {\n  if (!options.jsonData.azureAuthType) {\n    // If authentication type isn't explicitly specified and datasource has client credentials,\n    // then this is existing datasource which is configured for app registration (client secret)\n    if (options.jsonData.tenantId && options.jsonData.clientId) {\n      return 'clientsecret';\n    } // For newly created datasource with no configuration, managed identity is the default authentication type\n    // if they are enabled in Grafana config\n\n\n    return config.azure.managedIdentityEnabled ? 'msi' : 'clientsecret';\n  }\n\n  return options.jsonData.azureAuthType;\n}\n\nfunction getDefaultAzureCloud() {\n  switch (config.azure.cloud) {\n    case AzureCloud.Public:\n    case AzureCloud.None:\n    case undefined:\n      return 'azuremonitor';\n\n    case AzureCloud.China:\n      return 'chinaazuremonitor';\n\n    case AzureCloud.USGovernment:\n      return 'govazuremonitor';\n\n    case AzureCloud.Germany:\n      return 'germanyazuremonitor';\n\n    default:\n      throw new Error(`The cloud '${config.azure.cloud}' not supported.`);\n  }\n}\n\nexport function getAzurePortalUrl(azureCloud) {\n  switch (azureCloud) {\n    case 'azuremonitor':\n      return 'https://portal.azure.com';\n\n    case 'chinaazuremonitor':\n      return 'https://portal.azure.cn';\n\n    case 'govazuremonitor':\n      return 'https://portal.azure.us';\n\n    case 'germanyazuremonitor':\n      return 'https://portal.microsoftazure.de';\n\n    default:\n      throw new Error('The cloud not supported.');\n  }\n}\nexport function getAzureCloud(options) {\n  const authType = getAuthType(options);\n\n  switch (authType) {\n    case 'msi':\n      // In case of managed identity, the cloud is always same as where Grafana is hosted\n      return getDefaultAzureCloud();\n\n    case 'clientsecret':\n      return options.jsonData.cloudName || getDefaultAzureCloud();\n  }\n}\n\nfunction getSecret(options) {\n  if (options.secureJsonFields.clientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    var _options$secureJsonDa;\n\n    const secret = (_options$secureJsonDa = options.secureJsonData) === null || _options$secureJsonDa === void 0 ? void 0 : _options$secureJsonDa.clientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function isCredentialsComplete(credentials) {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\nexport function getCredentials(options) {\n  const authType = getAuthType(options);\n\n  switch (authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n          defaultSubscriptionId: options.jsonData.subscriptionId\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud()\n        };\n      }\n\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: options.jsonData.cloudName || getDefaultAzureCloud(),\n        tenantId: options.jsonData.tenantId,\n        clientId: options.jsonData.clientId,\n        clientSecret: getSecret(options),\n        defaultSubscriptionId: options.jsonData.subscriptionId\n      };\n  }\n}\nexport function updateCredentials(options, credentials) {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = Object.assign({}, options, {\n        jsonData: Object.assign({}, options.jsonData, {\n          azureAuthType: 'msi',\n          subscriptionId: credentials.defaultSubscriptionId\n        })\n      });\n      return options;\n\n    case 'clientsecret':\n      options = Object.assign({}, options, {\n        jsonData: Object.assign({}, options.jsonData, {\n          azureAuthType: 'clientsecret',\n          cloudName: credentials.azureCloud || getDefaultAzureCloud(),\n          tenantId: credentials.tenantId,\n          clientId: credentials.clientId,\n          subscriptionId: credentials.defaultSubscriptionId\n        }),\n        secureJsonData: Object.assign({}, options.secureJsonData, {\n          clientSecret: typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0 ? credentials.clientSecret : undefined\n        }),\n        secureJsonFields: Object.assign({}, options.secureJsonFields, {\n          clientSecret: typeof credentials.clientSecret === 'symbol'\n        })\n      });\n      return options;\n  }\n}","map":{"version":3,"names":["config","AzureCloud","concealed","Symbol","getAuthType","options","jsonData","azureAuthType","tenantId","clientId","azure","managedIdentityEnabled","getDefaultAzureCloud","cloud","Public","None","undefined","China","USGovernment","Germany","Error","getAzurePortalUrl","azureCloud","getAzureCloud","authType","cloudName","getSecret","secureJsonFields","clientSecret","secret","secureJsonData","length","isCredentialsComplete","credentials","getCredentials","defaultSubscriptionId","subscriptionId","updateCredentials"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/credentials.ts"],"sourcesContent":["import { config } from '@grafana/runtime';\n\nimport {\n  AzureAuthType,\n  AzureCloud,\n  AzureCredentials,\n  AzureDataSourceInstanceSettings,\n  AzureDataSourceSettings,\n  ConcealedSecret,\n} from './types';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nexport function getAuthType(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): AzureAuthType {\n  if (!options.jsonData.azureAuthType) {\n    // If authentication type isn't explicitly specified and datasource has client credentials,\n    // then this is existing datasource which is configured for app registration (client secret)\n    if (options.jsonData.tenantId && options.jsonData.clientId) {\n      return 'clientsecret';\n    }\n\n    // For newly created datasource with no configuration, managed identity is the default authentication type\n    // if they are enabled in Grafana config\n    return config.azure.managedIdentityEnabled ? 'msi' : 'clientsecret';\n  }\n\n  return options.jsonData.azureAuthType;\n}\n\nfunction getDefaultAzureCloud(): string {\n  switch (config.azure.cloud) {\n    case AzureCloud.Public:\n    case AzureCloud.None:\n    case undefined:\n      return 'azuremonitor';\n    case AzureCloud.China:\n      return 'chinaazuremonitor';\n    case AzureCloud.USGovernment:\n      return 'govazuremonitor';\n    case AzureCloud.Germany:\n      return 'germanyazuremonitor';\n    default:\n      throw new Error(`The cloud '${config.azure.cloud}' not supported.`);\n  }\n}\n\nexport function getAzurePortalUrl(azureCloud: string): string {\n  switch (azureCloud) {\n    case 'azuremonitor':\n      return 'https://portal.azure.com';\n    case 'chinaazuremonitor':\n      return 'https://portal.azure.cn';\n    case 'govazuremonitor':\n      return 'https://portal.azure.us';\n    case 'germanyazuremonitor':\n      return 'https://portal.microsoftazure.de';\n    default:\n      throw new Error('The cloud not supported.');\n  }\n}\n\nexport function getAzureCloud(options: AzureDataSourceSettings | AzureDataSourceInstanceSettings): string {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n      // In case of managed identity, the cloud is always same as where Grafana is hosted\n      return getDefaultAzureCloud();\n    case 'clientsecret':\n      return options.jsonData.cloudName || getDefaultAzureCloud();\n  }\n}\n\nfunction getSecret(options: AzureDataSourceSettings): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.clientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.clientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n\nexport function getCredentials(options: AzureDataSourceSettings): AzureCredentials {\n  const authType = getAuthType(options);\n  switch (authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n          defaultSubscriptionId: options.jsonData.subscriptionId,\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: options.jsonData.cloudName || getDefaultAzureCloud(),\n        tenantId: options.jsonData.tenantId,\n        clientId: options.jsonData.clientId,\n        clientSecret: getSecret(options),\n        defaultSubscriptionId: options.jsonData.subscriptionId,\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: AzureDataSourceSettings,\n  credentials: AzureCredentials\n): AzureDataSourceSettings {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'msi',\n          subscriptionId: credentials.defaultSubscriptionId,\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureAuthType: 'clientsecret',\n          cloudName: credentials.azureCloud || getDefaultAzureCloud(),\n          tenantId: credentials.tenantId,\n          clientId: credentials.clientId,\n          subscriptionId: credentials.defaultSubscriptionId,\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          clientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          clientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}