{"ast":null,"code":"import { FieldType, getFieldDisplayName, PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { commonOptionsBuilder } from '@grafana/ui';\nimport { defaultGraphConfig, getGraphFieldConfig } from '../timeseries/config';\nimport { CandlestickPanel } from './CandlestickPanel';\nimport { candlestickFieldsInfo, prepareCandlestickFields } from './fields';\nimport { defaultColors, VizDisplayMode, ColorStrategy, defaultPanelOptions, CandleStyle } from './models.gen';\nimport { CandlestickSuggestionsSupplier } from './suggestions';\nconst modeOptions = [{\n  label: 'Candles',\n  value: VizDisplayMode.Candles\n}, {\n  label: 'Volume',\n  value: VizDisplayMode.Volume\n}, {\n  label: 'Both',\n  value: VizDisplayMode.CandlesVolume\n}];\nconst candleStyles = [{\n  label: 'Candles',\n  value: CandleStyle.Candles\n}, {\n  label: 'OHLC Bars',\n  value: CandleStyle.OHLCBars\n}];\nconst colorStrategies = [{\n  label: 'Since Open',\n  value: ColorStrategy.OpenClose\n}, {\n  label: 'Since Prior Close',\n  value: ColorStrategy.CloseClose\n}];\n\nconst numericFieldFilter = f => f.type === FieldType.number;\n\nfunction addFieldPicker(builder, info, data) {\n  let placeholderText = 'Auto ';\n\n  if (data) {\n    const current = data[info.key];\n\n    if (current !== null && current !== void 0 && current.config) {\n      placeholderText += '= ' + getFieldDisplayName(current);\n\n      if (current === (data === null || data === void 0 ? void 0 : data.open) && info.key !== 'open') {\n        placeholderText += ` (${info.defaults.join(',')})`;\n      }\n    } else {\n      placeholderText += `(${info.defaults.join(',')})`;\n    }\n  }\n\n  builder.addFieldNamePicker({\n    path: `fields.${info.key}`,\n    name: info.name,\n    description: info.description,\n    settings: {\n      filter: numericFieldFilter,\n      placeholderText\n    }\n  });\n}\n\nexport const plugin = new PanelPlugin(CandlestickPanel).useFieldConfig(getGraphFieldConfig(defaultGraphConfig)).setPanelOptions((builder, context) => {\n  var _context$options;\n\n  const opts = (_context$options = context.options) !== null && _context$options !== void 0 ? _context$options : defaultPanelOptions;\n  const info = prepareCandlestickFields(context.data, opts, config.theme2);\n  builder.addRadio({\n    path: 'mode',\n    name: 'Mode',\n    description: '',\n    defaultValue: defaultPanelOptions.mode,\n    settings: {\n      options: modeOptions\n    }\n  }).addRadio({\n    path: 'candleStyle',\n    name: 'Candle style',\n    description: '',\n    defaultValue: defaultPanelOptions.candleStyle,\n    settings: {\n      options: candleStyles\n    },\n    showIf: opts => opts.mode !== VizDisplayMode.Volume\n  }).addRadio({\n    path: 'colorStrategy',\n    name: 'Color strategy',\n    description: '',\n    defaultValue: defaultPanelOptions.colorStrategy,\n    settings: {\n      options: colorStrategies\n    }\n  }).addColorPicker({\n    path: 'colors.up',\n    name: 'Up color',\n    defaultValue: defaultColors.up\n  }).addColorPicker({\n    path: 'colors.down',\n    name: 'Down color',\n    defaultValue: defaultColors.down\n  });\n  addFieldPicker(builder, candlestickFieldsInfo.open, info);\n\n  if (opts.mode !== VizDisplayMode.Volume) {\n    addFieldPicker(builder, candlestickFieldsInfo.high, info);\n    addFieldPicker(builder, candlestickFieldsInfo.low, info);\n  }\n\n  addFieldPicker(builder, candlestickFieldsInfo.close, info);\n\n  if (opts.mode !== VizDisplayMode.Candles) {\n    addFieldPicker(builder, candlestickFieldsInfo.volume, info);\n  }\n\n  builder.addRadio({\n    path: 'includeAllFields',\n    name: 'Additional fields',\n    description: 'Use standard timeseries options to configure any fields not mapped above',\n    defaultValue: defaultPanelOptions.includeAllFields,\n    settings: {\n      options: [{\n        label: 'Ignore',\n        value: false\n      }, {\n        label: 'Include',\n        value: true\n      }]\n    }\n  }); // commonOptionsBuilder.addTooltipOptions(builder);\n\n  commonOptionsBuilder.addLegendOptions(builder);\n}).setDataSupport({\n  annotations: true,\n  alertStates: true\n}).setSuggestionsSupplier(new CandlestickSuggestionsSupplier());","map":{"version":3,"names":["FieldType","getFieldDisplayName","PanelPlugin","config","commonOptionsBuilder","defaultGraphConfig","getGraphFieldConfig","CandlestickPanel","candlestickFieldsInfo","prepareCandlestickFields","defaultColors","VizDisplayMode","ColorStrategy","defaultPanelOptions","CandleStyle","CandlestickSuggestionsSupplier","modeOptions","label","value","Candles","Volume","CandlesVolume","candleStyles","OHLCBars","colorStrategies","OpenClose","CloseClose","numericFieldFilter","f","type","number","addFieldPicker","builder","info","data","placeholderText","current","key","open","defaults","join","addFieldNamePicker","path","name","description","settings","filter","plugin","useFieldConfig","setPanelOptions","context","opts","options","theme2","addRadio","defaultValue","mode","candleStyle","showIf","colorStrategy","addColorPicker","up","down","high","low","close","volume","includeAllFields","addLegendOptions","setDataSupport","annotations","alertStates","setSuggestionsSupplier"],"sources":["/home/soula/grafana/public/app/plugins/panel/candlestick/module.tsx"],"sourcesContent":["import {\n  Field,\n  FieldType,\n  getFieldDisplayName,\n  PanelOptionsEditorBuilder,\n  PanelPlugin,\n  SelectableValue,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { GraphFieldConfig } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { defaultGraphConfig, getGraphFieldConfig } from '../timeseries/config';\n\nimport { CandlestickPanel } from './CandlestickPanel';\nimport { CandlestickData, candlestickFieldsInfo, FieldPickerInfo, prepareCandlestickFields } from './fields';\nimport {\n  defaultColors,\n  CandlestickOptions,\n  VizDisplayMode,\n  ColorStrategy,\n  defaultPanelOptions,\n  CandleStyle,\n} from './models.gen';\nimport { CandlestickSuggestionsSupplier } from './suggestions';\n\nconst modeOptions = [\n  { label: 'Candles', value: VizDisplayMode.Candles },\n  { label: 'Volume', value: VizDisplayMode.Volume },\n  { label: 'Both', value: VizDisplayMode.CandlesVolume },\n] as Array<SelectableValue<VizDisplayMode>>;\n\nconst candleStyles = [\n  { label: 'Candles', value: CandleStyle.Candles },\n  { label: 'OHLC Bars', value: CandleStyle.OHLCBars },\n] as Array<SelectableValue<CandleStyle>>;\n\nconst colorStrategies = [\n  { label: 'Since Open', value: ColorStrategy.OpenClose },\n  { label: 'Since Prior Close', value: ColorStrategy.CloseClose },\n] as Array<SelectableValue<ColorStrategy>>;\n\nconst numericFieldFilter = (f: Field) => f.type === FieldType.number;\n\nfunction addFieldPicker(\n  builder: PanelOptionsEditorBuilder<CandlestickOptions>,\n  info: FieldPickerInfo,\n  data: CandlestickData | null\n) {\n  let placeholderText = 'Auto ';\n\n  if (data) {\n    const current = data[info.key] as Field;\n\n    if (current?.config) {\n      placeholderText += '= ' + getFieldDisplayName(current);\n\n      if (current === data?.open && info.key !== 'open') {\n        placeholderText += ` (${info.defaults.join(',')})`;\n      }\n    } else {\n      placeholderText += `(${info.defaults.join(',')})`;\n    }\n  }\n\n  builder.addFieldNamePicker({\n    path: `fields.${info.key}`,\n    name: info.name,\n    description: info.description,\n    settings: {\n      filter: numericFieldFilter,\n      placeholderText,\n    },\n  });\n}\n\nexport const plugin = new PanelPlugin<CandlestickOptions, GraphFieldConfig>(CandlestickPanel)\n  .useFieldConfig(getGraphFieldConfig(defaultGraphConfig))\n  .setPanelOptions((builder, context) => {\n    const opts = context.options ?? defaultPanelOptions;\n    const info = prepareCandlestickFields(context.data, opts, config.theme2);\n\n    builder\n      .addRadio({\n        path: 'mode',\n        name: 'Mode',\n        description: '',\n        defaultValue: defaultPanelOptions.mode,\n        settings: {\n          options: modeOptions,\n        },\n      })\n      .addRadio({\n        path: 'candleStyle',\n        name: 'Candle style',\n        description: '',\n        defaultValue: defaultPanelOptions.candleStyle,\n        settings: {\n          options: candleStyles,\n        },\n        showIf: (opts) => opts.mode !== VizDisplayMode.Volume,\n      })\n      .addRadio({\n        path: 'colorStrategy',\n        name: 'Color strategy',\n        description: '',\n        defaultValue: defaultPanelOptions.colorStrategy,\n        settings: {\n          options: colorStrategies,\n        },\n      })\n      .addColorPicker({\n        path: 'colors.up',\n        name: 'Up color',\n        defaultValue: defaultColors.up,\n      })\n      .addColorPicker({\n        path: 'colors.down',\n        name: 'Down color',\n        defaultValue: defaultColors.down,\n      });\n\n    addFieldPicker(builder, candlestickFieldsInfo.open, info);\n    if (opts.mode !== VizDisplayMode.Volume) {\n      addFieldPicker(builder, candlestickFieldsInfo.high, info);\n      addFieldPicker(builder, candlestickFieldsInfo.low, info);\n    }\n    addFieldPicker(builder, candlestickFieldsInfo.close, info);\n\n    if (opts.mode !== VizDisplayMode.Candles) {\n      addFieldPicker(builder, candlestickFieldsInfo.volume, info);\n    }\n\n    builder.addRadio({\n      path: 'includeAllFields',\n      name: 'Additional fields',\n      description: 'Use standard timeseries options to configure any fields not mapped above',\n      defaultValue: defaultPanelOptions.includeAllFields,\n      settings: {\n        options: [\n          { label: 'Ignore', value: false },\n          { label: 'Include', value: true },\n        ],\n      },\n    });\n\n    // commonOptionsBuilder.addTooltipOptions(builder);\n    commonOptionsBuilder.addLegendOptions(builder);\n  })\n  .setDataSupport({ annotations: true, alertStates: true })\n  .setSuggestionsSupplier(new CandlestickSuggestionsSupplier());\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}