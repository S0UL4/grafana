{"ast":null,"code":"import { FrameMatcherID } from '../matchers/ids';\nimport { filterFramesTransformer } from './filter';\nimport { DataTransformerID } from './ids';\nexport const filterFramesByRefIdTransformer = {\n  id: DataTransformerID.filterByRefId,\n  name: 'Filter data by query refId',\n  description: 'select a subset of results',\n  defaultOptions: {},\n\n  /**\n   * Return a modified copy of the series.  If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: options => source => {\n    const filterOptions = {};\n\n    if (options.include) {\n      filterOptions.include = {\n        id: FrameMatcherID.byRefId,\n        options: options.include\n      };\n    }\n\n    if (options.exclude) {\n      filterOptions.exclude = {\n        id: FrameMatcherID.byRefId,\n        options: options.exclude\n      };\n    }\n\n    return source.pipe(filterFramesTransformer.operator(filterOptions));\n  }\n};","map":{"version":3,"names":["FrameMatcherID","filterFramesTransformer","DataTransformerID","filterFramesByRefIdTransformer","id","filterByRefId","name","description","defaultOptions","operator","options","source","filterOptions","include","byRefId","exclude","pipe"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/transformers/filterByRefId.ts"],"sourcesContent":["import { DataTransformerInfo } from '../../types/transformations';\nimport { FrameMatcherID } from '../matchers/ids';\n\nimport { filterFramesTransformer, FilterOptions } from './filter';\nimport { DataTransformerID } from './ids';\n\nexport interface FilterFramesByRefIdTransformerOptions {\n  include?: string;\n  exclude?: string;\n}\n\nexport const filterFramesByRefIdTransformer: DataTransformerInfo<FilterFramesByRefIdTransformerOptions> = {\n  id: DataTransformerID.filterByRefId,\n  name: 'Filter data by query refId',\n  description: 'select a subset of results',\n  defaultOptions: {},\n\n  /**\n   * Return a modified copy of the series.  If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options) => (source) => {\n    const filterOptions: FilterOptions = {};\n    if (options.include) {\n      filterOptions.include = {\n        id: FrameMatcherID.byRefId,\n        options: options.include,\n      };\n    }\n    if (options.exclude) {\n      filterOptions.exclude = {\n        id: FrameMatcherID.byRefId,\n        options: options.exclude,\n      };\n    }\n\n    return source.pipe(filterFramesTransformer.operator(filterOptions));\n  },\n};\n"],"mappings":"AACA,SAASA,cAAT,QAA+B,iBAA/B;AAEA,SAASC,uBAAT,QAAuD,UAAvD;AACA,SAASC,iBAAT,QAAkC,OAAlC;AAOA,OAAO,MAAMC,8BAA0F,GAAG;EACxGC,EAAE,EAAEF,iBAAiB,CAACG,aADkF;EAExGC,IAAI,EAAE,4BAFkG;EAGxGC,WAAW,EAAE,4BAH2F;EAIxGC,cAAc,EAAE,EAJwF;;EAMxG;AACF;AACA;AACA;EACEC,QAAQ,EAAGC,OAAD,IAAcC,MAAD,IAAY;IACjC,MAAMC,aAA4B,GAAG,EAArC;;IACA,IAAIF,OAAO,CAACG,OAAZ,EAAqB;MACnBD,aAAa,CAACC,OAAd,GAAwB;QACtBT,EAAE,EAAEJ,cAAc,CAACc,OADG;QAEtBJ,OAAO,EAAEA,OAAO,CAACG;MAFK,CAAxB;IAID;;IACD,IAAIH,OAAO,CAACK,OAAZ,EAAqB;MACnBH,aAAa,CAACG,OAAd,GAAwB;QACtBX,EAAE,EAAEJ,cAAc,CAACc,OADG;QAEtBJ,OAAO,EAAEA,OAAO,CAACK;MAFK,CAAxB;IAID;;IAED,OAAOJ,MAAM,CAACK,IAAP,CAAYf,uBAAuB,CAACQ,QAAxB,CAAiCG,aAAjC,CAAZ,CAAP;EACD;AA1BuG,CAAnG"},"metadata":{},"sourceType":"module"}