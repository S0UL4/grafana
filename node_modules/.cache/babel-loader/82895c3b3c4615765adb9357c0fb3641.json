{"ast":null,"code":"import { css } from '@emotion/css';\nimport { promLanguageDefinition } from 'monaco-promql';\nimport React, { useRef, useEffect } from 'react';\nimport { useLatest } from 'react-use';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useTheme2, ReactMonacoEditor } from '@grafana/ui';\nimport { getOverrideServices } from './getOverrideServices';\nimport { getCompletionProvider, getSuggestOptions } from './monaco-completion-provider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst options = {\n  codeLens: false,\n  contextmenu: false,\n  // we need `fixedOverflowWidgets` because otherwise in grafana-dashboards\n  // the popup is clipped by the panel-visualizations.\n  fixedOverflowWidgets: true,\n  folding: false,\n  fontSize: 14,\n  lineDecorationsWidth: 8,\n  // used as \"padding-left\"\n  lineNumbers: 'off',\n  minimap: {\n    enabled: false\n  },\n  overviewRulerBorder: false,\n  overviewRulerLanes: 0,\n  padding: {\n    // these numbers were picked so that visually this matches the previous version\n    // of the query-editor the best\n    top: 4,\n    bottom: 5\n  },\n  renderLineHighlight: 'none',\n  scrollbar: {\n    vertical: 'hidden',\n    verticalScrollbarSize: 8,\n    // used as \"padding-right\"\n    horizontal: 'hidden',\n    horizontalScrollbarSize: 0\n  },\n  scrollBeyondLastLine: false,\n  suggest: getSuggestOptions(),\n  suggestFontSize: 12,\n  wordWrap: 'on'\n}; // this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\n\nconst EDITOR_HEIGHT_OFFSET = 2;\nconst PROMQL_LANG_ID = promLanguageDefinition.id; // we must only run the promql-setup code once\n\nlet PROMQL_SETUP_STARTED = false;\n\nfunction ensurePromQL(monaco) {\n  if (PROMQL_SETUP_STARTED === false) {\n    PROMQL_SETUP_STARTED = true;\n    const {\n      aliases,\n      extensions,\n      mimetypes,\n      loader\n    } = promLanguageDefinition;\n    monaco.languages.register({\n      id: PROMQL_LANG_ID,\n      aliases,\n      extensions,\n      mimetypes\n    });\n    loader().then(mod => {\n      monaco.languages.setMonarchTokensProvider(PROMQL_LANG_ID, mod.language);\n      monaco.languages.setLanguageConfiguration(PROMQL_LANG_ID, mod.languageConfiguration);\n    });\n  }\n}\n\nconst getStyles = theme => {\n  return {\n    container: css`\n      border-radius: ${theme.shape.borderRadius()};\n      border: 1px solid ${theme.components.input.borderColor};\n    `\n  };\n};\n\nconst MonacoQueryField = props => {\n  // we need only one instance of `overrideServices` during the lifetime of the react component\n  const overrideServicesRef = useRef(getOverrideServices());\n  const containerRef = useRef(null);\n  const {\n    languageProvider,\n    history,\n    onBlur,\n    onRunQuery,\n    initialValue\n  } = props;\n  const lpRef = useLatest(languageProvider);\n  const historyRef = useLatest(history);\n  const onRunQueryRef = useLatest(onRunQuery);\n  const onBlurRef = useLatest(onBlur);\n  const autocompleteDisposeFun = useRef(null);\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      var _autocompleteDisposeF;\n\n      (_autocompleteDisposeF = autocompleteDisposeFun.current) === null || _autocompleteDisposeF === void 0 ? void 0 : _autocompleteDisposeF.call(autocompleteDisposeFun);\n    };\n  }, []);\n  return /*#__PURE__*/_jsx(\"div\", {\n    \"aria-label\": selectors.components.QueryField.container,\n    className: styles.container // NOTE: we will be setting inline-style-width/height on this element\n    ,\n    ref: containerRef,\n    children: /*#__PURE__*/_jsx(ReactMonacoEditor, {\n      overrideServices: overrideServicesRef.current,\n      options: options,\n      language: \"promql\",\n      value: initialValue,\n      beforeMount: monaco => {\n        ensurePromQL(monaco);\n      },\n      onMount: (editor, monaco) => {\n        // we setup on-blur\n        editor.onDidBlurEditorWidget(() => {\n          onBlurRef.current(editor.getValue());\n        }); // we construct a DataProvider object\n\n        const getSeries = selector => lpRef.current.getSeries(selector);\n\n        const getHistory = () => Promise.resolve(historyRef.current.map(h => h.query.expr).filter(expr => expr !== undefined));\n\n        const getAllMetricNames = () => {\n          const {\n            metrics,\n            metricsMetadata\n          } = lpRef.current;\n          const result = metrics.map(m => {\n            var _metaItem$help, _metaItem$type;\n\n            const metaItem = metricsMetadata === null || metricsMetadata === void 0 ? void 0 : metricsMetadata[m];\n            return {\n              name: m,\n              help: (_metaItem$help = metaItem === null || metaItem === void 0 ? void 0 : metaItem.help) !== null && _metaItem$help !== void 0 ? _metaItem$help : '',\n              type: (_metaItem$type = metaItem === null || metaItem === void 0 ? void 0 : metaItem.type) !== null && _metaItem$type !== void 0 ? _metaItem$type : ''\n            };\n          });\n          return Promise.resolve(result);\n        };\n\n        const getAllLabelNames = () => Promise.resolve(lpRef.current.getLabelKeys());\n\n        const getLabelValues = labelName => lpRef.current.getLabelValues(labelName);\n\n        const dataProvider = {\n          getSeries,\n          getHistory,\n          getAllMetricNames,\n          getAllLabelNames,\n          getLabelValues\n        };\n        const completionProvider = getCompletionProvider(monaco, dataProvider); // completion-providers in monaco are not registered directly to editor-instances,\n        // they are registered to languages. this makes it hard for us to have\n        // separate completion-providers for every query-field-instance\n        // (but we need that, because they might connect to different datasources).\n        // the trick we do is, we wrap the callback in a \"proxy\",\n        // and in the proxy, the first thing is, we check if we are called from\n        // \"our editor instance\", and if not, we just return nothing. if yes,\n        // we call the completion-provider.\n\n        const filteringCompletionProvider = Object.assign({}, completionProvider, {\n          provideCompletionItems: (model, position, context, token) => {\n            var _editor$getModel;\n\n            // if the model-id does not match, then this call is from a different editor-instance,\n            // not \"our instance\", so return nothing\n            if (((_editor$getModel = editor.getModel()) === null || _editor$getModel === void 0 ? void 0 : _editor$getModel.id) !== model.id) {\n              return {\n                suggestions: []\n              };\n            }\n\n            return completionProvider.provideCompletionItems(model, position, context, token);\n          }\n        });\n        const {\n          dispose\n        } = monaco.languages.registerCompletionItemProvider(PROMQL_LANG_ID, filteringCompletionProvider);\n        autocompleteDisposeFun.current = dispose; // this code makes the editor resize itself so that the content fits\n        // (it will grow taller when necessary)\n        // FIXME: maybe move this functionality into CodeEditor, like:\n        // <CodeEditor resizingMode=\"single-line\"/>\n\n        const updateElementHeight = () => {\n          const containerDiv = containerRef.current;\n\n          if (containerDiv !== null) {\n            const pixelHeight = editor.getContentHeight();\n            containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n            containerDiv.style.width = '100%';\n            const pixelWidth = containerDiv.clientWidth;\n            editor.layout({\n              width: pixelWidth,\n              height: pixelHeight\n            });\n          }\n        };\n\n        editor.onDidContentSizeChange(updateElementHeight);\n        updateElementHeight(); // handle: shift + enter\n        // FIXME: maybe move this functionality into CodeEditor?\n\n        editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n          onRunQueryRef.current(editor.getValue());\n        });\n        /* Something in this configuration of monaco doesn't bubble up [mod]+K, which the \n        command palette uses. Pass the event out of monaco manually\n        */\n\n        editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyK, function () {\n          global.dispatchEvent(new KeyboardEvent('keydown', {\n            key: 'k',\n            metaKey: true\n          }));\n        });\n      }\n    })\n  });\n}; // we will lazy-load this module using React.lazy,\n// and that only supports default-exports,\n// so we have to default-export this, even if\n// it is against the style-guidelines.\n\n\nexport default MonacoQueryField;","map":{"version":3,"names":["css","promLanguageDefinition","React","useRef","useEffect","useLatest","selectors","useTheme2","ReactMonacoEditor","getOverrideServices","getCompletionProvider","getSuggestOptions","options","codeLens","contextmenu","fixedOverflowWidgets","folding","fontSize","lineDecorationsWidth","lineNumbers","minimap","enabled","overviewRulerBorder","overviewRulerLanes","padding","top","bottom","renderLineHighlight","scrollbar","vertical","verticalScrollbarSize","horizontal","horizontalScrollbarSize","scrollBeyondLastLine","suggest","suggestFontSize","wordWrap","EDITOR_HEIGHT_OFFSET","PROMQL_LANG_ID","id","PROMQL_SETUP_STARTED","ensurePromQL","monaco","aliases","extensions","mimetypes","loader","languages","register","then","mod","setMonarchTokensProvider","language","setLanguageConfiguration","languageConfiguration","getStyles","theme","container","shape","borderRadius","components","input","borderColor","MonacoQueryField","props","overrideServicesRef","containerRef","languageProvider","history","onBlur","onRunQuery","initialValue","lpRef","historyRef","onRunQueryRef","onBlurRef","autocompleteDisposeFun","styles","current","QueryField","editor","onDidBlurEditorWidget","getValue","getSeries","selector","getHistory","Promise","resolve","map","h","query","expr","filter","undefined","getAllMetricNames","metrics","metricsMetadata","result","m","metaItem","name","help","type","getAllLabelNames","getLabelKeys","getLabelValues","labelName","dataProvider","completionProvider","filteringCompletionProvider","provideCompletionItems","model","position","context","token","getModel","suggestions","dispose","registerCompletionItemProvider","updateElementHeight","containerDiv","pixelHeight","getContentHeight","style","height","width","pixelWidth","clientWidth","layout","onDidContentSizeChange","addCommand","KeyMod","Shift","KeyCode","Enter","CtrlCmd","KeyK","global","dispatchEvent","KeyboardEvent","key","metaKey"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryField.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { promLanguageDefinition } from 'monaco-promql';\nimport React, { useRef, useEffect } from 'react';\nimport { useLatest } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useTheme2, ReactMonacoEditor, Monaco, monacoTypes } from '@grafana/ui';\n\nimport { Props } from './MonacoQueryFieldProps';\nimport { getOverrideServices } from './getOverrideServices';\nimport { getCompletionProvider, getSuggestOptions } from './monaco-completion-provider';\n\nconst options: monacoTypes.editor.IStandaloneEditorConstructionOptions = {\n  codeLens: false,\n  contextmenu: false,\n  // we need `fixedOverflowWidgets` because otherwise in grafana-dashboards\n  // the popup is clipped by the panel-visualizations.\n  fixedOverflowWidgets: true,\n  folding: false,\n  fontSize: 14,\n  lineDecorationsWidth: 8, // used as \"padding-left\"\n  lineNumbers: 'off',\n  minimap: { enabled: false },\n  overviewRulerBorder: false,\n  overviewRulerLanes: 0,\n  padding: {\n    // these numbers were picked so that visually this matches the previous version\n    // of the query-editor the best\n    top: 4,\n    bottom: 5,\n  },\n  renderLineHighlight: 'none',\n  scrollbar: {\n    vertical: 'hidden',\n    verticalScrollbarSize: 8, // used as \"padding-right\"\n    horizontal: 'hidden',\n    horizontalScrollbarSize: 0,\n  },\n  scrollBeyondLastLine: false,\n  suggest: getSuggestOptions(),\n  suggestFontSize: 12,\n  wordWrap: 'on',\n};\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\nconst PROMQL_LANG_ID = promLanguageDefinition.id;\n\n// we must only run the promql-setup code once\nlet PROMQL_SETUP_STARTED = false;\n\nfunction ensurePromQL(monaco: Monaco) {\n  if (PROMQL_SETUP_STARTED === false) {\n    PROMQL_SETUP_STARTED = true;\n    const { aliases, extensions, mimetypes, loader } = promLanguageDefinition;\n    monaco.languages.register({ id: PROMQL_LANG_ID, aliases, extensions, mimetypes });\n\n    loader().then((mod) => {\n      monaco.languages.setMonarchTokensProvider(PROMQL_LANG_ID, mod.language);\n      monaco.languages.setLanguageConfiguration(PROMQL_LANG_ID, mod.languageConfiguration);\n    });\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      border-radius: ${theme.shape.borderRadius()};\n      border: 1px solid ${theme.components.input.borderColor};\n    `,\n  };\n};\n\nconst MonacoQueryField = (props: Props) => {\n  // we need only one instance of `overrideServices` during the lifetime of the react component\n  const overrideServicesRef = useRef(getOverrideServices());\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { languageProvider, history, onBlur, onRunQuery, initialValue } = props;\n\n  const lpRef = useLatest(languageProvider);\n  const historyRef = useLatest(history);\n  const onRunQueryRef = useLatest(onRunQuery);\n  const onBlurRef = useLatest(onBlur);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  return (\n    <div\n      aria-label={selectors.components.QueryField.container}\n      className={styles.container}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <ReactMonacoEditor\n        overrideServices={overrideServicesRef.current}\n        options={options}\n        language=\"promql\"\n        value={initialValue}\n        beforeMount={(monaco) => {\n          ensurePromQL(monaco);\n        }}\n        onMount={(editor, monaco) => {\n          // we setup on-blur\n          editor.onDidBlurEditorWidget(() => {\n            onBlurRef.current(editor.getValue());\n          });\n\n          // we construct a DataProvider object\n          const getSeries = (selector: string) => lpRef.current.getSeries(selector);\n\n          const getHistory = () =>\n            Promise.resolve(historyRef.current.map((h) => h.query.expr).filter((expr) => expr !== undefined));\n\n          const getAllMetricNames = () => {\n            const { metrics, metricsMetadata } = lpRef.current;\n            const result = metrics.map((m) => {\n              const metaItem = metricsMetadata?.[m];\n              return {\n                name: m,\n                help: metaItem?.help ?? '',\n                type: metaItem?.type ?? '',\n              };\n            });\n\n            return Promise.resolve(result);\n          };\n\n          const getAllLabelNames = () => Promise.resolve(lpRef.current.getLabelKeys());\n\n          const getLabelValues = (labelName: string) => lpRef.current.getLabelValues(labelName);\n\n          const dataProvider = { getSeries, getHistory, getAllMetricNames, getAllLabelNames, getLabelValues };\n          const completionProvider = getCompletionProvider(monaco, dataProvider);\n\n          // completion-providers in monaco are not registered directly to editor-instances,\n          // they are registered to languages. this makes it hard for us to have\n          // separate completion-providers for every query-field-instance\n          // (but we need that, because they might connect to different datasources).\n          // the trick we do is, we wrap the callback in a \"proxy\",\n          // and in the proxy, the first thing is, we check if we are called from\n          // \"our editor instance\", and if not, we just return nothing. if yes,\n          // we call the completion-provider.\n          const filteringCompletionProvider: monacoTypes.languages.CompletionItemProvider = {\n            ...completionProvider,\n            provideCompletionItems: (model, position, context, token) => {\n              // if the model-id does not match, then this call is from a different editor-instance,\n              // not \"our instance\", so return nothing\n              if (editor.getModel()?.id !== model.id) {\n                return { suggestions: [] };\n              }\n              return completionProvider.provideCompletionItems(model, position, context, token);\n            },\n          };\n\n          const { dispose } = monaco.languages.registerCompletionItemProvider(\n            PROMQL_LANG_ID,\n            filteringCompletionProvider\n          );\n\n          autocompleteDisposeFun.current = dispose;\n          // this code makes the editor resize itself so that the content fits\n          // (it will grow taller when necessary)\n          // FIXME: maybe move this functionality into CodeEditor, like:\n          // <CodeEditor resizingMode=\"single-line\"/>\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          // handle: shift + enter\n          // FIXME: maybe move this functionality into CodeEditor?\n          editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n            onRunQueryRef.current(editor.getValue());\n          });\n\n          /* Something in this configuration of monaco doesn't bubble up [mod]+K, which the \n          command palette uses. Pass the event out of monaco manually\n          */\n          editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyK, function () {\n            global.dispatchEvent(new KeyboardEvent('keydown', { key: 'k', metaKey: true }));\n          });\n        }}\n      />\n    </div>\n  );\n};\n\n// we will lazy-load this module using React.lazy,\n// and that only supports default-exports,\n// so we have to default-export this, even if\n// it is against the style-guidelines.\n\nexport default MonacoQueryField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}