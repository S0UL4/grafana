{"ast":null,"code":"/**\n * Describes a size with width/height\n *\n * @public\n */\n\n/**\n * Describes the meta information that are sent together with each event.\n *\n * @public\n */\n\n/**\n * Describes echo backends that can be registered to receive of events.\n *\n * @public\n */\n\n/**\n * Describes an echo event.\n *\n * @public\n */\n\n/**\n * Supported echo event types that can be sent via the {@link EchoSrv}.\n *\n * @public\n */\nexport let EchoEventType;\n/**\n * Used to send events to all the registered backends. This should be accessed via the\n * {@link getEchoSrv} function. Will, by default, flush events to the backends every\n * 10s or when the flush function is triggered.\n *\n * @public\n */\n\n(function (EchoEventType) {\n  EchoEventType[\"Performance\"] = \"performance\";\n  EchoEventType[\"MetaAnalytics\"] = \"meta-analytics\";\n  EchoEventType[\"Sentry\"] = \"sentry\";\n  EchoEventType[\"Pageview\"] = \"pageview\";\n  EchoEventType[\"Interaction\"] = \"interaction\";\n  EchoEventType[\"ExperimentView\"] = \"experimentview\";\n})(EchoEventType || (EchoEventType = {}));\n\nlet singletonInstance;\n/**\n * Used during startup by Grafana to set the EchoSrv so it is available\n * via the {@link getEchoSrv} to the rest of the application.\n *\n * @internal\n */\n\nexport function setEchoSrv(instance) {\n  singletonInstance = instance;\n}\n/**\n * Used to retrieve the {@link EchoSrv} that can be used to report events to registered\n * echo backends.\n *\n * @public\n */\n\nexport function getEchoSrv() {\n  return singletonInstance;\n}\n/**\n * Used to register echo backends that will receive Grafana echo events during application\n * runtime.\n *\n * @public\n */\n\nexport const registerEchoBackend = backend => {\n  getEchoSrv().addBackend(backend);\n};","map":{"version":3,"names":["EchoEventType","singletonInstance","setEchoSrv","instance","getEchoSrv","registerEchoBackend","backend","addBackend"],"sources":["/home/soula/grafana/packages/grafana-runtime/src/services/EchoSrv.ts"],"sourcesContent":["/**\n * Describes a size with width/height\n *\n * @public\n */\nexport interface SizeMeta {\n  width: number;\n  height: number;\n}\n\n/**\n * Describes the meta information that are sent together with each event.\n *\n * @public\n */\nexport interface EchoMeta {\n  screenSize: SizeMeta;\n  windowSize: SizeMeta;\n  userAgent: string;\n  url?: string;\n  /**\n   * A unique browser session\n   */\n  sessionId: string;\n  /**\n   * The current users username used to login into Grafana e.g. email.\n   */\n  userLogin: string;\n  /**\n   * The current users unique identifier.\n   */\n  userId: number;\n  /**\n   * True when user is logged in into Grafana.\n   */\n  userSignedIn: boolean;\n  /**\n   * A millisecond epoch\n   */\n  ts: number;\n  /**\n   * A highres timestamp since navigation start\n   */\n  timeSinceNavigationStart: number;\n}\n\n/**\n * Describes echo backends that can be registered to receive of events.\n *\n * @public\n */\nexport interface EchoBackend<T extends EchoEvent = any, O = any> {\n  options: O;\n  supportedEvents: EchoEventType[];\n  flush: () => void;\n  addEvent: (event: T) => void;\n}\n\n/**\n * Describes an echo event.\n *\n * @public\n */\nexport interface EchoEvent<T extends EchoEventType = any, P = any> {\n  type: EchoEventType;\n  /**\n   * Event payload containing event specific data.\n   */\n  payload: P;\n  meta: EchoMeta;\n}\n\n/**\n * Supported echo event types that can be sent via the {@link EchoSrv}.\n *\n * @public\n */\nexport enum EchoEventType {\n  Performance = 'performance',\n  MetaAnalytics = 'meta-analytics',\n  Sentry = 'sentry',\n  Pageview = 'pageview',\n  Interaction = 'interaction',\n  ExperimentView = 'experimentview',\n}\n\n/**\n * Used to send events to all the registered backends. This should be accessed via the\n * {@link getEchoSrv} function. Will, by default, flush events to the backends every\n * 10s or when the flush function is triggered.\n *\n * @public\n */\nexport interface EchoSrv {\n  /**\n   * Call this to flush current events to the echo backends.\n   */\n  flush(): void;\n  /**\n   * Add a new echo backend to the list of backends that will receive events.\n   */\n  addBackend(backend: EchoBackend): void;\n  /**\n   * Call this to add event that will be sent to the echo backends upon next\n   * flush.\n   *\n   * @param event - Object containing event information.\n   * @param meta - Object that will extend/override the default meta object.\n   */\n  addEvent<T extends EchoEvent>(event: Omit<T, 'meta'>, meta?: {}): void;\n}\n\nlet singletonInstance: EchoSrv;\n\n/**\n * Used during startup by Grafana to set the EchoSrv so it is available\n * via the {@link getEchoSrv} to the rest of the application.\n *\n * @internal\n */\nexport function setEchoSrv(instance: EchoSrv) {\n  singletonInstance = instance;\n}\n\n/**\n * Used to retrieve the {@link EchoSrv} that can be used to report events to registered\n * echo backends.\n *\n * @public\n */\nexport function getEchoSrv(): EchoSrv {\n  return singletonInstance;\n}\n\n/**\n * Used to register echo backends that will receive Grafana echo events during application\n * runtime.\n *\n * @public\n */\nexport const registerEchoBackend = (backend: EchoBackend) => {\n  getEchoSrv().addBackend(backend);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;;AAgCA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA,WAAYA,aAAZ;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;WAfYA,a;EAAAA,a;EAAAA,a;EAAAA,a;EAAAA,a;EAAAA,a;EAAAA,a;GAAAA,a,KAAAA,a;;AAmCZ,IAAIC,iBAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAAuC;EAC5CF,iBAAiB,GAAGE,QAApB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,GAA+B;EACpC,OAAOH,iBAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,mBAAmB,GAAIC,OAAD,IAA0B;EAC3DF,UAAU,GAAGG,UAAb,CAAwBD,OAAxB;AACD,CAFM"},"metadata":{},"sourceType":"module"}