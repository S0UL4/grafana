{"ast":null,"code":"import memoizeOne from 'memoize-one';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { getRulesPermissions } from 'app/features/alerting/unified/utils/access-control';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\nimport { PanelEditorTabId } from '../types';\nexport const getPanelEditorTabs = memoizeOne((tab, plugin) => {\n  var _tabs$find;\n\n  const tabs = [];\n\n  if (!plugin) {\n    return tabs;\n  }\n\n  let defaultTab = PanelEditorTabId.Visualize;\n\n  if (plugin.meta.skipDataQuery) {\n    return [];\n  }\n\n  if (!plugin.meta.skipDataQuery) {\n    defaultTab = PanelEditorTabId.Query;\n    tabs.push({\n      id: PanelEditorTabId.Query,\n      text: 'Query',\n      icon: 'database',\n      active: false\n    });\n    tabs.push({\n      id: PanelEditorTabId.Transform,\n      text: 'Transform',\n      icon: 'process',\n      active: false\n    });\n  }\n\n  const {\n    alertingEnabled,\n    unifiedAlertingEnabled\n  } = getConfig();\n  const hasRuleReadPermissions = contextSrv.hasPermission(getRulesPermissions(GRAFANA_RULES_SOURCE_NAME).read);\n  const isAlertingAvailable = alertingEnabled || unifiedAlertingEnabled && hasRuleReadPermissions;\n  const isGraph = plugin.meta.id === 'graph';\n  const isTimeseries = plugin.meta.id === 'timeseries';\n\n  if (isAlertingAvailable && isGraph || isTimeseries) {\n    tabs.push({\n      id: PanelEditorTabId.Alert,\n      text: 'Alert',\n      icon: 'bell',\n      active: false\n    });\n  }\n\n  const activeTab = (_tabs$find = tabs.find(item => item.id === (tab || defaultTab))) !== null && _tabs$find !== void 0 ? _tabs$find : tabs[0];\n  activeTab.active = true;\n  return tabs;\n});","map":{"version":3,"names":["memoizeOne","getConfig","contextSrv","getRulesPermissions","GRAFANA_RULES_SOURCE_NAME","PanelEditorTabId","getPanelEditorTabs","tab","plugin","tabs","defaultTab","Visualize","meta","skipDataQuery","Query","push","id","text","icon","active","Transform","alertingEnabled","unifiedAlertingEnabled","hasRuleReadPermissions","hasPermission","read","isAlertingAvailable","isGraph","isTimeseries","Alert","activeTab","find","item"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/state/selectors.ts"],"sourcesContent":["import memoizeOne from 'memoize-one';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { getRulesPermissions } from 'app/features/alerting/unified/utils/access-control';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\n\nimport { PanelEditorTab, PanelEditorTabId } from '../types';\n\nexport const getPanelEditorTabs = memoizeOne((tab?: string, plugin?: PanelPlugin) => {\n  const tabs: PanelEditorTab[] = [];\n\n  if (!plugin) {\n    return tabs;\n  }\n\n  let defaultTab = PanelEditorTabId.Visualize;\n\n  if (plugin.meta.skipDataQuery) {\n    return [];\n  }\n\n  if (!plugin.meta.skipDataQuery) {\n    defaultTab = PanelEditorTabId.Query;\n\n    tabs.push({\n      id: PanelEditorTabId.Query,\n      text: 'Query',\n      icon: 'database',\n      active: false,\n    });\n\n    tabs.push({\n      id: PanelEditorTabId.Transform,\n      text: 'Transform',\n      icon: 'process',\n      active: false,\n    });\n  }\n\n  const { alertingEnabled, unifiedAlertingEnabled } = getConfig();\n  const hasRuleReadPermissions = contextSrv.hasPermission(getRulesPermissions(GRAFANA_RULES_SOURCE_NAME).read);\n  const isAlertingAvailable = alertingEnabled || (unifiedAlertingEnabled && hasRuleReadPermissions);\n\n  const isGraph = plugin.meta.id === 'graph';\n  const isTimeseries = plugin.meta.id === 'timeseries';\n\n  if ((isAlertingAvailable && isGraph) || isTimeseries) {\n    tabs.push({\n      id: PanelEditorTabId.Alert,\n      text: 'Alert',\n      icon: 'bell',\n      active: false,\n    });\n  }\n\n  const activeTab = tabs.find((item) => item.id === (tab || defaultTab)) ?? tabs[0];\n  activeTab.active = true;\n\n  return tabs;\n});\n"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB;AAGA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,mBAAT,QAAoC,oDAApC;AACA,SAASC,yBAAT,QAA0C,gDAA1C;AAEA,SAAyBC,gBAAzB,QAAiD,UAAjD;AAEA,OAAO,MAAMC,kBAAkB,GAAGN,UAAU,CAAC,CAACO,GAAD,EAAeC,MAAf,KAAwC;EAAA;;EACnF,MAAMC,IAAsB,GAAG,EAA/B;;EAEA,IAAI,CAACD,MAAL,EAAa;IACX,OAAOC,IAAP;EACD;;EAED,IAAIC,UAAU,GAAGL,gBAAgB,CAACM,SAAlC;;EAEA,IAAIH,MAAM,CAACI,IAAP,CAAYC,aAAhB,EAA+B;IAC7B,OAAO,EAAP;EACD;;EAED,IAAI,CAACL,MAAM,CAACI,IAAP,CAAYC,aAAjB,EAAgC;IAC9BH,UAAU,GAAGL,gBAAgB,CAACS,KAA9B;IAEAL,IAAI,CAACM,IAAL,CAAU;MACRC,EAAE,EAAEX,gBAAgB,CAACS,KADb;MAERG,IAAI,EAAE,OAFE;MAGRC,IAAI,EAAE,UAHE;MAIRC,MAAM,EAAE;IAJA,CAAV;IAOAV,IAAI,CAACM,IAAL,CAAU;MACRC,EAAE,EAAEX,gBAAgB,CAACe,SADb;MAERH,IAAI,EAAE,WAFE;MAGRC,IAAI,EAAE,SAHE;MAIRC,MAAM,EAAE;IAJA,CAAV;EAMD;;EAED,MAAM;IAAEE,eAAF;IAAmBC;EAAnB,IAA8CrB,SAAS,EAA7D;EACA,MAAMsB,sBAAsB,GAAGrB,UAAU,CAACsB,aAAX,CAAyBrB,mBAAmB,CAACC,yBAAD,CAAnB,CAA+CqB,IAAxE,CAA/B;EACA,MAAMC,mBAAmB,GAAGL,eAAe,IAAKC,sBAAsB,IAAIC,sBAA1E;EAEA,MAAMI,OAAO,GAAGnB,MAAM,CAACI,IAAP,CAAYI,EAAZ,KAAmB,OAAnC;EACA,MAAMY,YAAY,GAAGpB,MAAM,CAACI,IAAP,CAAYI,EAAZ,KAAmB,YAAxC;;EAEA,IAAKU,mBAAmB,IAAIC,OAAxB,IAAoCC,YAAxC,EAAsD;IACpDnB,IAAI,CAACM,IAAL,CAAU;MACRC,EAAE,EAAEX,gBAAgB,CAACwB,KADb;MAERZ,IAAI,EAAE,OAFE;MAGRC,IAAI,EAAE,MAHE;MAIRC,MAAM,EAAE;IAJA,CAAV;EAMD;;EAED,MAAMW,SAAS,iBAAGrB,IAAI,CAACsB,IAAL,CAAWC,IAAD,IAAUA,IAAI,CAAChB,EAAL,MAAaT,GAAG,IAAIG,UAApB,CAApB,CAAH,mDAA2DD,IAAI,CAAC,CAAD,CAA9E;EACAqB,SAAS,CAACX,MAAV,GAAmB,IAAnB;EAEA,OAAOV,IAAP;AACD,CAnD2C,CAArC"},"metadata":{},"sourceType":"module"}