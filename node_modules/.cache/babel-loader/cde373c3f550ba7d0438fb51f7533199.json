{"ast":null,"code":"var _span;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { FieldMatcherID, LoadingState } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { TableCellDisplayMode, useStyles2 } from '@grafana/ui';\nimport { RuleFormType } from '../../types/rule-form';\nimport { messageFromError } from '../../utils/redux';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function PreviewRuleResult(props) {\n  const {\n    preview\n  } = props;\n  const styles = useStyles2(getStyles);\n  const fieldConfig = {\n    defaults: {},\n    overrides: [{\n      matcher: {\n        id: FieldMatcherID.byName,\n        options: 'Info'\n      },\n      properties: [{\n        id: 'custom.displayMode',\n        value: TableCellDisplayMode.JSONView\n      }]\n    }]\n  };\n\n  if (!preview) {\n    return null;\n  }\n\n  const {\n    data,\n    ruleType\n  } = preview;\n\n  if (data.state === LoadingState.Loading) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: styles.container,\n      children: _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n        children: \"Loading preview...\"\n      }))\n    });\n  }\n\n  if (data.state === LoadingState.Error) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: styles.container,\n      children: data.error ? messageFromError(data.error) : 'Failed to preview alert rule'\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxs(\"span\", {\n      children: [\"Preview based on the result of running the query, for this moment.\", ' ', ruleType === RuleFormType.grafana ? 'Configuration for `no data` and `error handling` is not applied.' : null]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.table,\n      children: /*#__PURE__*/_jsx(AutoSizer, {\n        children: ({\n          width,\n          height\n        }) => /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            width: `${width}px`,\n            height: `${height}px`\n          },\n          children: /*#__PURE__*/_jsx(PanelRenderer, {\n            title: \"\",\n            width: width,\n            height: height,\n            pluginId: \"table\",\n            data: data,\n            fieldConfig: fieldConfig\n          })\n        })\n      })\n    })]\n  });\n}\n\nfunction getStyles(theme) {\n  return {\n    container: css`\n      margin: ${theme.spacing(2)} 0;\n    `,\n    table: css`\n      flex: 1 1 auto;\n      height: 135px;\n      margin-top: ${theme.spacing(2)};\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius(1)};\n    `\n  };\n}","map":{"version":3,"names":["css","React","AutoSizer","FieldMatcherID","LoadingState","PanelRenderer","TableCellDisplayMode","useStyles2","RuleFormType","messageFromError","PreviewRuleResult","props","preview","styles","getStyles","fieldConfig","defaults","overrides","matcher","id","byName","options","properties","value","JSONView","data","ruleType","state","Loading","container","Error","error","grafana","table","width","height","theme","spacing","colors","border","medium","shape","borderRadius"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/PreviewRuleResult.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { FieldConfigSource, FieldMatcherID, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { TableCellDisplayMode, useStyles2 } from '@grafana/ui';\n\nimport { PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType } from '../../types/rule-form';\nimport { messageFromError } from '../../utils/redux';\n\ntype Props = {\n  preview: PreviewRuleResponse | undefined;\n};\n\nexport function PreviewRuleResult(props: Props): React.ReactElement | null {\n  const { preview } = props;\n  const styles = useStyles2(getStyles);\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [\n      {\n        matcher: { id: FieldMatcherID.byName, options: 'Info' },\n        properties: [{ id: 'custom.displayMode', value: TableCellDisplayMode.JSONView }],\n      },\n    ],\n  };\n\n  if (!preview) {\n    return null;\n  }\n\n  const { data, ruleType } = preview;\n\n  if (data.state === LoadingState.Loading) {\n    return (\n      <div className={styles.container}>\n        <span>Loading preview...</span>\n      </div>\n    );\n  }\n\n  if (data.state === LoadingState.Error) {\n    return (\n      <div className={styles.container}>\n        {data.error ? messageFromError(data.error) : 'Failed to preview alert rule'}\n      </div>\n    );\n  }\n  return (\n    <div className={styles.container}>\n      <span>\n        Preview based on the result of running the query, for this moment.{' '}\n        {ruleType === RuleFormType.grafana ? 'Configuration for `no data` and `error handling` is not applied.' : null}\n      </span>\n      <div className={styles.table}>\n        <AutoSizer>\n          {({ width, height }) => (\n            <div style={{ width: `${width}px`, height: `${height}px` }}>\n              <PanelRenderer\n                title=\"\"\n                width={width}\n                height={height}\n                pluginId=\"table\"\n                data={data}\n                fieldConfig={fieldConfig}\n              />\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      margin: ${theme.spacing(2)} 0;\n    `,\n    table: css`\n      flex: 1 1 auto;\n      height: 135px;\n      margin-top: ${theme.spacing(2)};\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius(1)};\n    `,\n  };\n}\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AAEA,SAA4BC,cAA5B,EAA2DC,YAA3D,QAA+E,eAA/E;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,oBAAT,EAA+BC,UAA/B,QAAiD,aAAjD;AAGA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,gBAAT,QAAiC,mBAAjC;;;AAMA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAoE;EACzE,MAAM;IAAEC;EAAF,IAAcD,KAApB;EACA,MAAME,MAAM,GAAGN,UAAU,CAACO,SAAD,CAAzB;EACA,MAAMC,WAA8B,GAAG;IACrCC,QAAQ,EAAE,EAD2B;IAErCC,SAAS,EAAE,CACT;MACEC,OAAO,EAAE;QAAEC,EAAE,EAAEhB,cAAc,CAACiB,MAArB;QAA6BC,OAAO,EAAE;MAAtC,CADX;MAEEC,UAAU,EAAE,CAAC;QAAEH,EAAE,EAAE,oBAAN;QAA4BI,KAAK,EAAEjB,oBAAoB,CAACkB;MAAxD,CAAD;IAFd,CADS;EAF0B,CAAvC;;EAUA,IAAI,CAACZ,OAAL,EAAc;IACZ,OAAO,IAAP;EACD;;EAED,MAAM;IAAEa,IAAF;IAAQC;EAAR,IAAqBd,OAA3B;;EAEA,IAAIa,IAAI,CAACE,KAAL,KAAevB,YAAY,CAACwB,OAAhC,EAAyC;IACvC,oBACE;MAAK,SAAS,EAAEf,MAAM,CAACgB,SAAvB;MAAA,yCACE;QAAA;MAAA,EADF;IAAA,EADF;EAKD;;EAED,IAAIJ,IAAI,CAACE,KAAL,KAAevB,YAAY,CAAC0B,KAAhC,EAAuC;IACrC,oBACE;MAAK,SAAS,EAAEjB,MAAM,CAACgB,SAAvB;MAAA,UACGJ,IAAI,CAACM,KAAL,GAAatB,gBAAgB,CAACgB,IAAI,CAACM,KAAN,CAA7B,GAA4C;IAD/C,EADF;EAKD;;EACD,oBACE;IAAK,SAAS,EAAElB,MAAM,CAACgB,SAAvB;IAAA,wBACE;MAAA,iFACqE,GADrE,EAEGH,QAAQ,KAAKlB,YAAY,CAACwB,OAA1B,GAAoC,kEAApC,GAAyG,IAF5G;IAAA,EADF,eAKE;MAAK,SAAS,EAAEnB,MAAM,CAACoB,KAAvB;MAAA,uBACE,KAAC,SAAD;QAAA,UACG,CAAC;UAAEC,KAAF;UAASC;QAAT,CAAD,kBACC;UAAK,KAAK,EAAE;YAAED,KAAK,EAAG,GAAEA,KAAM,IAAlB;YAAuBC,MAAM,EAAG,GAAEA,MAAO;UAAzC,CAAZ;UAAA,uBACE,KAAC,aAAD;YACE,KAAK,EAAC,EADR;YAEE,KAAK,EAAED,KAFT;YAGE,MAAM,EAAEC,MAHV;YAIE,QAAQ,EAAC,OAJX;YAKE,IAAI,EAAEV,IALR;YAME,WAAW,EAAEV;UANf;QADF;MAFJ;IADF,EALF;EAAA,EADF;AAwBD;;AAED,SAASD,SAAT,CAAmBsB,KAAnB,EAAyC;EACvC,OAAO;IACLP,SAAS,EAAE7B,GAAI;AACnB,gBAAgBoC,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AACjC,KAHS;IAILJ,KAAK,EAAEjC,GAAI;AACf;AACA;AACA,oBAAoBoC,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AACrC,0BAA0BD,KAAK,CAACE,MAAN,CAAaC,MAAb,CAAoBC,MAAO;AACrD,uBAAuBJ,KAAK,CAACK,KAAN,CAAYC,YAAZ,CAAyB,CAAzB,CAA4B;AACnD;EAVS,CAAP;AAYD"},"metadata":{},"sourceType":"module"}