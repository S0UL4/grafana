{"ast":null,"code":"var _Spinner, _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css, cx } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { lastValueFrom } from 'rxjs';\nimport { LoadingState } from '@grafana/data';\nimport { Button, Icon, Spinner } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { executeAnnotationQuery } from '../executeAnnotationQuery';\nimport { shouldUseLegacyRunner, shouldUseMappingUI, standardAnnotationSupport } from '../standardAnnotationSupport';\nimport { AnnotationFieldMapper } from './AnnotationResultMapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default class StandardAnnotationQueryEditor extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n\n    _defineProperty(this, \"onRunQuery\", async () => {\n      const {\n        datasource,\n        annotation\n      } = this.props;\n\n      if (shouldUseLegacyRunner(datasource)) {\n        // In the new UI the running of query is done so the data can be mapped. In the legacy annotations this does\n        // not exist as the annotationQuery already returns annotation events which cannot be mapped. This means that\n        // right now running a query for data source with legacy runner does not make much sense.\n        return;\n      }\n\n      const dashboard = getDashboardSrv().getCurrent();\n\n      if (!dashboard) {\n        return;\n      }\n\n      this.setState({\n        running: true\n      });\n      const response = await lastValueFrom(executeAnnotationQuery({\n        range: getTimeSrv().timeRange(),\n        panel: {},\n        dashboard\n      }, datasource, annotation));\n      this.setState({\n        running: false,\n        response\n      });\n    });\n\n    _defineProperty(this, \"onQueryChange\", target => {\n      this.props.onChange(Object.assign({}, this.props.annotation, {\n        target\n      }));\n    });\n\n    _defineProperty(this, \"onMappingChange\", mappings => {\n      this.props.onChange(Object.assign({}, this.props.annotation, {\n        mappings\n      }));\n    });\n\n    _defineProperty(this, \"onAnnotationChange\", annotation => {\n      this.props.onChange(annotation);\n    });\n  }\n\n  componentDidMount() {\n    this.verifyDataSource();\n  }\n\n  componentDidUpdate(oldProps) {\n    if (this.props.annotation !== oldProps.annotation && !shouldUseLegacyRunner(this.props.datasource)) {\n      this.verifyDataSource();\n    }\n  }\n\n  verifyDataSource() {\n    const {\n      datasource,\n      annotation\n    } = this.props; // Handle any migration issues\n\n    const processor = Object.assign({}, standardAnnotationSupport, datasource.annotations);\n    const fixed = processor.prepareAnnotation(annotation);\n\n    if (fixed !== annotation) {\n      this.props.onChange(fixed);\n    } else {\n      this.onRunQuery();\n    }\n  }\n\n  renderStatus() {\n    var _response$panelData;\n\n    const {\n      response,\n      running\n    } = this.state;\n    let rowStyle = 'alert-info';\n    let text = '...';\n    let icon = undefined;\n\n    if (running || (response === null || response === void 0 ? void 0 : (_response$panelData = response.panelData) === null || _response$panelData === void 0 ? void 0 : _response$panelData.state) === LoadingState.Loading || !response) {\n      text = 'loading...';\n    } else {\n      const {\n        events,\n        panelData\n      } = response;\n\n      if (panelData !== null && panelData !== void 0 && panelData.error) {\n        var _panelData$error$mess;\n\n        rowStyle = 'alert-error';\n        icon = 'exclamation-triangle';\n        text = (_panelData$error$mess = panelData.error.message) !== null && _panelData$error$mess !== void 0 ? _panelData$error$mess : 'error';\n      } else if (!(events !== null && events !== void 0 && events.length)) {\n        rowStyle = 'alert-warning';\n        icon = 'exclamation-triangle';\n        text = 'No events found';\n      } else {\n        const frame = panelData === null || panelData === void 0 ? void 0 : panelData.series[0];\n        text = `${events.length} events (from ${frame === null || frame === void 0 ? void 0 : frame.fields.length} fields)`;\n      }\n    }\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: cx(rowStyle, css`\n            margin: 4px 0px;\n            padding: 4px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n          `),\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [icon && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(Icon, {\n            name: icon\n          }), \"\\xA0\"]\n        }), text]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: running ? _Spinner || (_Spinner = /*#__PURE__*/_jsx(Spinner, {})) : /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          size: \"xs\",\n          onClick: this.onRunQuery,\n          children: \"TEST\"\n        })\n      })]\n    });\n  }\n\n  render() {\n    var _datasource$annotatio, _datasource$component, _annotation$target;\n\n    const {\n      datasource,\n      annotation\n    } = this.props;\n    const {\n      response\n    } = this.state; // Find the annotation runner\n\n    let QueryEditor = ((_datasource$annotatio = datasource.annotations) === null || _datasource$annotatio === void 0 ? void 0 : _datasource$annotatio.QueryEditor) || ((_datasource$component = datasource.components) === null || _datasource$component === void 0 ? void 0 : _datasource$component.QueryEditor);\n\n    if (!QueryEditor) {\n      return _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n        children: \"Annotations are not supported. This datasource needs to export a QueryEditor\"\n      }));\n    }\n\n    const query = (_annotation$target = annotation.target) !== null && _annotation$target !== void 0 ? _annotation$target : {\n      refId: 'Anno'\n    };\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(QueryEditor, {\n        query: query,\n        datasource: datasource,\n        onChange: this.onQueryChange,\n        onRunQuery: this.onRunQuery,\n        data: response === null || response === void 0 ? void 0 : response.panelData,\n        range: getTimeSrv().timeRange(),\n        annotation: annotation,\n        onAnnotationChange: this.onAnnotationChange\n      }, datasource === null || datasource === void 0 ? void 0 : datasource.name), shouldUseMappingUI(datasource) && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [this.renderStatus(), /*#__PURE__*/_jsx(AnnotationFieldMapper, {\n          response: response,\n          mappings: annotation.mappings,\n          change: this.onMappingChange\n        })]\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["css","cx","React","PureComponent","lastValueFrom","LoadingState","Button","Icon","Spinner","getDashboardSrv","getTimeSrv","executeAnnotationQuery","shouldUseLegacyRunner","shouldUseMappingUI","standardAnnotationSupport","AnnotationFieldMapper","StandardAnnotationQueryEditor","datasource","annotation","props","dashboard","getCurrent","setState","running","response","range","timeRange","panel","target","onChange","mappings","componentDidMount","verifyDataSource","componentDidUpdate","oldProps","processor","annotations","fixed","prepareAnnotation","onRunQuery","renderStatus","state","rowStyle","text","icon","undefined","panelData","Loading","events","error","message","length","frame","series","fields","render","QueryEditor","components","query","refId","onQueryChange","onAnnotationChange","name","onMappingChange"],"sources":["/home/soula/grafana/public/app/features/annotations/components/StandardAnnotationQueryEditor.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { lastValueFrom } from 'rxjs';\n\nimport { AnnotationEventMappings, AnnotationQuery, DataQuery, DataSourceApi, LoadingState } from '@grafana/data';\nimport { Button, Icon, IconName, Spinner } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { PanelModel } from 'app/features/dashboard/state';\n\nimport { executeAnnotationQuery } from '../executeAnnotationQuery';\nimport { shouldUseLegacyRunner, shouldUseMappingUI, standardAnnotationSupport } from '../standardAnnotationSupport';\nimport { AnnotationQueryResponse } from '../types';\n\nimport { AnnotationFieldMapper } from './AnnotationResultMapper';\n\ninterface Props {\n  datasource: DataSourceApi;\n  annotation: AnnotationQuery<DataQuery>;\n  onChange: (annotation: AnnotationQuery<DataQuery>) => void;\n}\n\ninterface State {\n  running?: boolean;\n  response?: AnnotationQueryResponse;\n}\n\nexport default class StandardAnnotationQueryEditor extends PureComponent<Props, State> {\n  state = {} as State;\n\n  componentDidMount() {\n    this.verifyDataSource();\n  }\n\n  componentDidUpdate(oldProps: Props) {\n    if (this.props.annotation !== oldProps.annotation && !shouldUseLegacyRunner(this.props.datasource)) {\n      this.verifyDataSource();\n    }\n  }\n\n  verifyDataSource() {\n    const { datasource, annotation } = this.props;\n\n    // Handle any migration issues\n    const processor = {\n      ...standardAnnotationSupport,\n      ...datasource.annotations,\n    };\n\n    const fixed = processor.prepareAnnotation!(annotation);\n    if (fixed !== annotation) {\n      this.props.onChange(fixed);\n    } else {\n      this.onRunQuery();\n    }\n  }\n\n  onRunQuery = async () => {\n    const { datasource, annotation } = this.props;\n    if (shouldUseLegacyRunner(datasource)) {\n      // In the new UI the running of query is done so the data can be mapped. In the legacy annotations this does\n      // not exist as the annotationQuery already returns annotation events which cannot be mapped. This means that\n      // right now running a query for data source with legacy runner does not make much sense.\n      return;\n    }\n\n    const dashboard = getDashboardSrv().getCurrent();\n    if (!dashboard) {\n      return;\n    }\n\n    this.setState({\n      running: true,\n    });\n    const response = await lastValueFrom(\n      executeAnnotationQuery(\n        {\n          range: getTimeSrv().timeRange(),\n          panel: {} as PanelModel,\n          dashboard,\n        },\n        datasource,\n        annotation\n      )\n    );\n    this.setState({\n      running: false,\n      response,\n    });\n  };\n\n  onQueryChange = (target: DataQuery) => {\n    this.props.onChange({\n      ...this.props.annotation,\n      target,\n    });\n  };\n\n  onMappingChange = (mappings?: AnnotationEventMappings) => {\n    this.props.onChange({\n      ...this.props.annotation,\n      mappings,\n    });\n  };\n\n  renderStatus() {\n    const { response, running } = this.state;\n    let rowStyle = 'alert-info';\n    let text = '...';\n    let icon: IconName | undefined = undefined;\n\n    if (running || response?.panelData?.state === LoadingState.Loading || !response) {\n      text = 'loading...';\n    } else {\n      const { events, panelData } = response;\n\n      if (panelData?.error) {\n        rowStyle = 'alert-error';\n        icon = 'exclamation-triangle';\n        text = panelData.error.message ?? 'error';\n      } else if (!events?.length) {\n        rowStyle = 'alert-warning';\n        icon = 'exclamation-triangle';\n        text = 'No events found';\n      } else {\n        const frame = panelData?.series[0];\n\n        text = `${events.length} events (from ${frame?.fields.length} fields)`;\n      }\n    }\n    return (\n      <div\n        className={cx(\n          rowStyle,\n          css`\n            margin: 4px 0px;\n            padding: 4px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n          `\n        )}\n      >\n        <div>\n          {icon && (\n            <>\n              <Icon name={icon} />\n              &nbsp;\n            </>\n          )}\n          {text}\n        </div>\n        <div>\n          {running ? (\n            <Spinner />\n          ) : (\n            <Button variant=\"secondary\" size=\"xs\" onClick={this.onRunQuery}>\n              TEST\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  onAnnotationChange = (annotation: AnnotationQuery) => {\n    this.props.onChange(annotation);\n  };\n\n  render() {\n    const { datasource, annotation } = this.props;\n    const { response } = this.state;\n\n    // Find the annotation runner\n    let QueryEditor = datasource.annotations?.QueryEditor || datasource.components?.QueryEditor;\n    if (!QueryEditor) {\n      return <div>Annotations are not supported. This datasource needs to export a QueryEditor</div>;\n    }\n\n    const query = annotation.target ?? { refId: 'Anno' };\n    return (\n      <>\n        <QueryEditor\n          key={datasource?.name}\n          query={query}\n          datasource={datasource}\n          onChange={this.onQueryChange}\n          onRunQuery={this.onRunQuery}\n          data={response?.panelData}\n          range={getTimeSrv().timeRange()}\n          annotation={annotation}\n          onAnnotationChange={this.onAnnotationChange}\n        />\n        {shouldUseMappingUI(datasource) && (\n          <>\n            {this.renderStatus()}\n            <AnnotationFieldMapper response={response} mappings={annotation.mappings} change={this.onMappingChange} />\n          </>\n        )}\n      </>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}