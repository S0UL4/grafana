{"ast":null,"code":"import React, { useEffect, useMemo, useState } from 'react';\nimport { AccessoryButton, EditorList } from '@grafana/experimental';\nimport { Select, HorizontalGroup, MultiSelect } from '@grafana/ui';\nimport { Field } from '../Field';\nimport { setDimensionFilters } from './setQueryValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useDimensionLabels = (data, query) => {\n  const [dimensionLabels, setDimensionLabels] = useState({});\n  useEffect(() => {\n    var _data$series;\n\n    let labelsObj = {};\n\n    if (data !== null && data !== void 0 && (_data$series = data.series) !== null && _data$series !== void 0 && _data$series.length) {\n      // Identify which series' in the dataframe are relevant to the current query\n      const series = data.series.flat().filter(series => series.refId === query.refId);\n      const fields = series.flatMap(series => series.fields); // Retrieve labels for series fields\n\n      const labels = fields.map(fields => fields.labels).flat().filter(item => item !== null && item !== undefined);\n\n      for (const label of labels) {\n        // Labels only exist for series that have a dimension selected\n        for (const [dimension, value] of Object.entries(label)) {\n          if (labelsObj[dimension]) {\n            labelsObj[dimension].add(value);\n          } else {\n            labelsObj[dimension] = new Set([value]);\n          }\n        }\n      }\n    }\n\n    setDimensionLabels(prevLabels => {\n      const newLabels = {};\n      const currentLabels = Object.keys(labelsObj);\n\n      if (currentLabels.length === 0) {\n        return prevLabels;\n      }\n\n      for (const label of currentLabels) {\n        if (prevLabels[label] && labelsObj[label].size < prevLabels[label].size) {\n          newLabels[label] = prevLabels[label];\n        } else {\n          newLabels[label] = labelsObj[label];\n        }\n      }\n\n      return newLabels;\n    });\n  }, [data === null || data === void 0 ? void 0 : data.series, query.refId]);\n  return dimensionLabels;\n};\n\nconst NewDimensionFields = ({\n  data,\n  query,\n  dimensionOptions,\n  onQueryChange\n}) => {\n  var _query$azureMonitor2;\n\n  const dimensionFilters = useMemo(() => {\n    var _query$azureMonitor$d, _query$azureMonitor;\n\n    return (_query$azureMonitor$d = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.dimensionFilters) !== null && _query$azureMonitor$d !== void 0 ? _query$azureMonitor$d : [];\n  }, [(_query$azureMonitor2 = query.azureMonitor) === null || _query$azureMonitor2 === void 0 ? void 0 : _query$azureMonitor2.dimensionFilters]);\n  const dimensionLabels = useDimensionLabels(data, query);\n  const dimensionOperators = [{\n    label: '==',\n    value: 'eq'\n  }, {\n    label: '!=',\n    value: 'ne'\n  }, {\n    label: 'starts with',\n    value: 'sw'\n  }];\n  const validDimensionOptions = useMemo(() => {\n    // We filter out any dimensions that have already been used in a filter as the API doesn't support having multiple filters with the same dimension name.\n    // The Azure portal also doesn't support this feature so it makes sense for consistency.\n    let t = dimensionOptions;\n\n    if (dimensionFilters.length) {\n      t = dimensionOptions.filter(val => !dimensionFilters.some(dimensionFilter => dimensionFilter.dimension === val.value));\n    }\n\n    return t;\n  }, [dimensionFilters, dimensionOptions]);\n\n  const onFieldChange = (fieldName, item, value, onChange) => {\n    item[fieldName] = value;\n    onChange(item);\n  };\n\n  const getValidDimensionOptions = selectedDimension => {\n    return validDimensionOptions.concat(dimensionOptions.filter(item => item.value === selectedDimension));\n  };\n\n  const getValidFilterOptions = (selectedFilter, dimension) => {\n    var _dimensionLabels$dime;\n\n    const dimensionFilters = Array.from((_dimensionLabels$dime = dimensionLabels[dimension.toLowerCase()]) !== null && _dimensionLabels$dime !== void 0 ? _dimensionLabels$dime : []);\n\n    if (dimensionFilters.find(filter => filter === selectedFilter)) {\n      return dimensionFilters.map(filter => ({\n        value: filter,\n        label: filter\n      }));\n    }\n\n    return [...dimensionFilters, ...(selectedFilter && selectedFilter !== '*' ? [selectedFilter] : [])].map(item => ({\n      value: item,\n      label: item\n    }));\n  };\n\n  const getValidMultiSelectOptions = (selectedFilters, dimension) => {\n    const labelOptions = getValidFilterOptions(undefined, dimension);\n\n    if (selectedFilters) {\n      for (const filter of selectedFilters) {\n        if (!labelOptions.find(label => label.value === filter)) {\n          labelOptions.push({\n            value: filter,\n            label: filter\n          });\n        }\n      }\n    }\n\n    return labelOptions;\n  };\n\n  const getValidOperators = selectedOperator => {\n    if (dimensionOperators.find(operator => operator.value === selectedOperator)) {\n      return dimensionOperators;\n    }\n\n    return [...dimensionOperators, ...(selectedOperator ? [{\n      label: selectedOperator,\n      value: selectedOperator\n    }] : [])];\n  };\n\n  const changedFunc = changed => {\n    const properData = changed.map(x => {\n      var _x$dimension, _x$operator, _x$filters;\n\n      return {\n        dimension: (_x$dimension = x.dimension) !== null && _x$dimension !== void 0 ? _x$dimension : '',\n        operator: (_x$operator = x.operator) !== null && _x$operator !== void 0 ? _x$operator : 'eq',\n        filters: (_x$filters = x.filters) !== null && _x$filters !== void 0 ? _x$filters : []\n      };\n    });\n    onQueryChange(setDimensionFilters(query, properData));\n  };\n\n  const renderFilters = (item, onChange, onDelete) => {\n    var _item$dimension, _item$dimension2;\n\n    return /*#__PURE__*/_jsxs(HorizontalGroup, {\n      spacing: \"none\",\n      children: [/*#__PURE__*/_jsx(Select, {\n        menuShouldPortal: true,\n        placeholder: \"Field\",\n        value: item.dimension,\n        options: getValidDimensionOptions(item.dimension || ''),\n        onChange: e => {\n          var _e$value;\n\n          return onFieldChange('dimension', item, (_e$value = e.value) !== null && _e$value !== void 0 ? _e$value : '', onChange);\n        }\n      }), /*#__PURE__*/_jsx(Select, {\n        menuShouldPortal: true,\n        placeholder: \"Operation\",\n        value: item.operator,\n        options: getValidOperators(item.operator || 'eq'),\n        onChange: e => {\n          var _e$value2;\n\n          return onFieldChange('operator', item, (_e$value2 = e.value) !== null && _e$value2 !== void 0 ? _e$value2 : '', onChange);\n        },\n        allowCustomValue: true\n      }), item.operator === 'eq' || item.operator === 'ne' ? /*#__PURE__*/_jsx(MultiSelect, {\n        menuShouldPortal: true,\n        placeholder: \"Select value(s)\",\n        value: item.filters,\n        options: getValidMultiSelectOptions(item.filters, (_item$dimension = item.dimension) !== null && _item$dimension !== void 0 ? _item$dimension : ''),\n        onChange: e => onFieldChange('filters', item, e.map(x => {\n          var _x$value;\n\n          return (_x$value = x.value) !== null && _x$value !== void 0 ? _x$value : '';\n        }), onChange),\n        \"aria-label\": 'dimension-labels-select',\n        allowCustomValue: true\n      }) :\n      /*#__PURE__*/\n      // The API does not currently allow for multiple \"starts with\" clauses to be used.\n      _jsx(Select, {\n        menuShouldPortal: true,\n        placeholder: \"Select value\",\n        value: item.filters ? item.filters[0] : '',\n        allowCustomValue: true,\n        options: getValidFilterOptions(item.filters ? item.filters[0] : '', (_item$dimension2 = item.dimension) !== null && _item$dimension2 !== void 0 ? _item$dimension2 : ''),\n        onChange: e => {\n          var _e$value3;\n\n          return onFieldChange('filters', item, [(_e$value3 = e === null || e === void 0 ? void 0 : e.value) !== null && _e$value3 !== void 0 ? _e$value3 : ''], onChange);\n        },\n        isClearable: true\n      }), /*#__PURE__*/_jsx(AccessoryButton, {\n        \"aria-label\": \"Remove\",\n        icon: \"times\",\n        variant: \"secondary\",\n        onClick: onDelete,\n        type: \"button\"\n      })]\n    });\n  };\n\n  return /*#__PURE__*/_jsx(Field, {\n    label: \"Dimensions\",\n    children: /*#__PURE__*/_jsx(EditorList, {\n      items: dimensionFilters,\n      onChange: changedFunc,\n      renderItem: renderFilters\n    })\n  });\n};\n\nexport default NewDimensionFields;","map":{"version":3,"names":["React","useEffect","useMemo","useState","AccessoryButton","EditorList","Select","HorizontalGroup","MultiSelect","Field","setDimensionFilters","useDimensionLabels","data","query","dimensionLabels","setDimensionLabels","labelsObj","series","length","flat","filter","refId","fields","flatMap","labels","map","item","undefined","label","dimension","value","Object","entries","add","Set","prevLabels","newLabels","currentLabels","keys","size","NewDimensionFields","dimensionOptions","onQueryChange","dimensionFilters","azureMonitor","dimensionOperators","validDimensionOptions","t","val","some","dimensionFilter","onFieldChange","fieldName","onChange","getValidDimensionOptions","selectedDimension","concat","getValidFilterOptions","selectedFilter","Array","from","toLowerCase","find","getValidMultiSelectOptions","selectedFilters","labelOptions","push","getValidOperators","selectedOperator","operator","changedFunc","changed","properData","x","filters","renderFilters","onDelete","e"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/NewDimensionFields.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue, DataFrame, PanelData, Labels } from '@grafana/data';\nimport { AccessoryButton, EditorList } from '@grafana/experimental';\nimport { Select, HorizontalGroup, MultiSelect } from '@grafana/ui';\n\nimport { AzureMetricDimension, AzureMonitorOption, AzureMonitorQuery, AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setDimensionFilters } from './setQueryValue';\n\ninterface DimensionFieldsProps extends AzureQueryEditorFieldProps {\n  dimensionOptions: AzureMonitorOption[];\n}\n\ninterface DimensionLabels {\n  [key: string]: Set<string>;\n}\n\nconst useDimensionLabels = (data: PanelData | undefined, query: AzureMonitorQuery) => {\n  const [dimensionLabels, setDimensionLabels] = useState<DimensionLabels>({});\n  useEffect(() => {\n    let labelsObj: DimensionLabels = {};\n    if (data?.series?.length) {\n      // Identify which series' in the dataframe are relevant to the current query\n      const series: DataFrame[] = data.series.flat().filter((series) => series.refId === query.refId);\n      const fields = series.flatMap((series) => series.fields);\n      // Retrieve labels for series fields\n      const labels = fields\n        .map((fields) => fields.labels)\n        .flat()\n        .filter((item): item is Labels => item !== null && item !== undefined);\n      for (const label of labels) {\n        // Labels only exist for series that have a dimension selected\n        for (const [dimension, value] of Object.entries(label)) {\n          if (labelsObj[dimension]) {\n            labelsObj[dimension].add(value);\n          } else {\n            labelsObj[dimension] = new Set([value]);\n          }\n        }\n      }\n    }\n    setDimensionLabels((prevLabels) => {\n      const newLabels: DimensionLabels = {};\n      const currentLabels = Object.keys(labelsObj);\n      if (currentLabels.length === 0) {\n        return prevLabels;\n      }\n      for (const label of currentLabels) {\n        if (prevLabels[label] && labelsObj[label].size < prevLabels[label].size) {\n          newLabels[label] = prevLabels[label];\n        } else {\n          newLabels[label] = labelsObj[label];\n        }\n      }\n      return newLabels;\n    });\n  }, [data?.series, query.refId]);\n  return dimensionLabels;\n};\n\nconst NewDimensionFields: React.FC<DimensionFieldsProps> = ({ data, query, dimensionOptions, onQueryChange }) => {\n  const dimensionFilters = useMemo(\n    () => query.azureMonitor?.dimensionFilters ?? [],\n    [query.azureMonitor?.dimensionFilters]\n  );\n\n  const dimensionLabels = useDimensionLabels(data, query);\n\n  const dimensionOperators: Array<SelectableValue<string>> = [\n    { label: '==', value: 'eq' },\n    { label: '!=', value: 'ne' },\n    { label: 'starts with', value: 'sw' },\n  ];\n\n  const validDimensionOptions = useMemo(() => {\n    // We filter out any dimensions that have already been used in a filter as the API doesn't support having multiple filters with the same dimension name.\n    // The Azure portal also doesn't support this feature so it makes sense for consistency.\n    let t = dimensionOptions;\n    if (dimensionFilters.length) {\n      t = dimensionOptions.filter(\n        (val) => !dimensionFilters.some((dimensionFilter) => dimensionFilter.dimension === val.value)\n      );\n    }\n    return t;\n  }, [dimensionFilters, dimensionOptions]);\n\n  const onFieldChange = <Key extends keyof AzureMetricDimension>(\n    fieldName: Key,\n    item: Partial<AzureMetricDimension>,\n    value: AzureMetricDimension[Key],\n    onChange: (item: Partial<AzureMetricDimension>) => void\n  ) => {\n    item[fieldName] = value;\n    onChange(item);\n  };\n\n  const getValidDimensionOptions = (selectedDimension: string) => {\n    return validDimensionOptions.concat(dimensionOptions.filter((item) => item.value === selectedDimension));\n  };\n\n  const getValidFilterOptions = (selectedFilter: string | undefined, dimension: string) => {\n    const dimensionFilters = Array.from(dimensionLabels[dimension.toLowerCase()] ?? []);\n    if (dimensionFilters.find((filter) => filter === selectedFilter)) {\n      return dimensionFilters.map((filter) => ({ value: filter, label: filter }));\n    }\n    return [...dimensionFilters, ...(selectedFilter && selectedFilter !== '*' ? [selectedFilter] : [])].map((item) => ({\n      value: item,\n      label: item,\n    }));\n  };\n\n  const getValidMultiSelectOptions = (selectedFilters: string[] | undefined, dimension: string) => {\n    const labelOptions = getValidFilterOptions(undefined, dimension);\n    if (selectedFilters) {\n      for (const filter of selectedFilters) {\n        if (!labelOptions.find((label) => label.value === filter)) {\n          labelOptions.push({ value: filter, label: filter });\n        }\n      }\n    }\n    return labelOptions;\n  };\n  const getValidOperators = (selectedOperator: string) => {\n    if (dimensionOperators.find((operator: SelectableValue) => operator.value === selectedOperator)) {\n      return dimensionOperators;\n    }\n    return [...dimensionOperators, ...(selectedOperator ? [{ label: selectedOperator, value: selectedOperator }] : [])];\n  };\n\n  const changedFunc = (changed: Array<Partial<AzureMetricDimension>>) => {\n    const properData: AzureMetricDimension[] = changed.map((x) => {\n      return {\n        dimension: x.dimension ?? '',\n        operator: x.operator ?? 'eq',\n        filters: x.filters ?? [],\n      };\n    });\n    onQueryChange(setDimensionFilters(query, properData));\n  };\n\n  const renderFilters = (\n    item: Partial<AzureMetricDimension>,\n    onChange: (item: Partial<AzureMetricDimension>) => void,\n    onDelete: () => void\n  ) => {\n    return (\n      <HorizontalGroup spacing=\"none\">\n        <Select\n          menuShouldPortal\n          placeholder=\"Field\"\n          value={item.dimension}\n          options={getValidDimensionOptions(item.dimension || '')}\n          onChange={(e) => onFieldChange('dimension', item, e.value ?? '', onChange)}\n        />\n        <Select\n          menuShouldPortal\n          placeholder=\"Operation\"\n          value={item.operator}\n          options={getValidOperators(item.operator || 'eq')}\n          onChange={(e) => onFieldChange('operator', item, e.value ?? '', onChange)}\n          allowCustomValue\n        />\n        {item.operator === 'eq' || item.operator === 'ne' ? (\n          <MultiSelect\n            menuShouldPortal\n            placeholder=\"Select value(s)\"\n            value={item.filters}\n            options={getValidMultiSelectOptions(item.filters, item.dimension ?? '')}\n            onChange={(e) =>\n              onFieldChange(\n                'filters',\n                item,\n                e.map((x) => x.value ?? ''),\n                onChange\n              )\n            }\n            aria-label={'dimension-labels-select'}\n            allowCustomValue\n          />\n        ) : (\n          // The API does not currently allow for multiple \"starts with\" clauses to be used.\n          <Select\n            menuShouldPortal\n            placeholder=\"Select value\"\n            value={item.filters ? item.filters[0] : ''}\n            allowCustomValue\n            options={getValidFilterOptions(item.filters ? item.filters[0] : '', item.dimension ?? '')}\n            onChange={(e) => onFieldChange('filters', item, [e?.value ?? ''], onChange)}\n            isClearable\n          />\n        )}\n        <AccessoryButton aria-label=\"Remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </HorizontalGroup>\n    );\n  };\n\n  return (\n    <Field label=\"Dimensions\">\n      <EditorList items={dimensionFilters} onChange={changedFunc} renderItem={renderFilters} />\n    </Field>\n  );\n};\n\nexport default NewDimensionFields;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}