{"ast":null,"code":"import React, { useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { dateMath, FieldColorModeId } from '@grafana/data';\nimport { Button, Table } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport Page from '../../core/components/Page/Page';\nimport { PanelRenderer } from '../panel/components/PanelRenderer';\nimport { QueryGroup } from '../query/components/QueryGroup';\nimport { PanelQueryRunner } from '../query/state/PanelQueryRunner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const TestStuffPage = () => {\n  const [state, setState] = useState(getDefaultState());\n  const {\n    queryOptions,\n    queryRunner\n  } = state;\n\n  const onRunQueries = () => {\n    var _queryOptions$maxData;\n\n    const timeRange = {\n      from: 'now-1h',\n      to: 'now'\n    };\n    queryRunner.run({\n      queries: queryOptions.queries,\n      datasource: queryOptions.dataSource,\n      timezone: 'browser',\n      timeRange: {\n        from: dateMath.parse(timeRange.from),\n        to: dateMath.parse(timeRange.to),\n        raw: timeRange\n      },\n      maxDataPoints: (_queryOptions$maxData = queryOptions.maxDataPoints) !== null && _queryOptions$maxData !== void 0 ? _queryOptions$maxData : 100,\n      minInterval: queryOptions.minInterval\n    });\n  };\n\n  const onOptionsChange = queryOptions => {\n    setState(Object.assign({}, state, {\n      queryOptions\n    }));\n  };\n  /**\n   * Subscribe to data\n   */\n\n\n  const observable = useMemo(() => queryRunner.getData({\n    withFieldConfig: true,\n    withTransforms: true\n  }), [queryRunner]);\n  const data = useObservable(observable);\n  const node = {\n    id: 'test-page',\n    text: 'Test page',\n    icon: 'dashboard',\n    subTitle: 'FOR TESTING!',\n    url: 'sandbox/test'\n  };\n  const notifyApp = useAppNotification();\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: {\n      node: node,\n      main: node\n    },\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      children: [data && /*#__PURE__*/_jsx(AutoSizer, {\n        style: {\n          width: '100%',\n          height: '600px'\n        },\n        children: ({\n          width\n        }) => {\n          return /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(PanelRenderer, {\n              title: \"Hello\",\n              pluginId: \"timeseries\",\n              width: width,\n              height: 300,\n              data: data,\n              options: {},\n              fieldConfig: {\n                defaults: {},\n                overrides: []\n              },\n              timeZone: \"browser\"\n            }), /*#__PURE__*/_jsx(Table, {\n              data: data.series[0],\n              width: width,\n              height: 300\n            })]\n          });\n        }\n      }), /*#__PURE__*/_jsx(\"div\", {\n        style: {\n          marginTop: '16px',\n          height: '45%'\n        },\n        children: /*#__PURE__*/_jsx(QueryGroup, {\n          options: queryOptions,\n          queryRunner: queryRunner,\n          onRunQueries: onRunQueries,\n          onOptionsChange: onOptionsChange\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          display: 'flex',\n          gap: '1em'\n        },\n        children: [/*#__PURE__*/_jsx(Button, {\n          onClick: () => notifyApp.success('Success toast', 'some more text goes here'),\n          variant: \"primary\",\n          children: \"Success\"\n        }), /*#__PURE__*/_jsx(Button, {\n          onClick: () => notifyApp.warning('Warning toast', 'some more text goes here', 'bogus-trace-99999'),\n          variant: \"secondary\",\n          children: \"Warning\"\n        }), /*#__PURE__*/_jsx(Button, {\n          onClick: () => notifyApp.error('Error toast', 'some more text goes here', 'bogus-trace-fdsfdfsfds'),\n          variant: \"destructive\",\n          children: \"Error\"\n        })]\n      })]\n    })\n  });\n};\nexport function getDefaultState() {\n  const options = {\n    fieldConfig: {\n      defaults: {\n        color: {\n          mode: FieldColorModeId.PaletteClassic\n        }\n      },\n      overrides: []\n    },\n    replaceVariables: v => v,\n    theme: config.theme2\n  };\n  const dataConfig = {\n    getTransformations: () => [],\n    getFieldOverrideOptions: () => options,\n    getDataSupport: () => ({\n      annotations: false,\n      alertStates: false\n    })\n  };\n  return {\n    queryRunner: new PanelQueryRunner(dataConfig),\n    queryOptions: {\n      queries: [],\n      dataSource: {\n        name: 'gdev-testdata'\n      },\n      maxDataPoints: 100\n    }\n  };\n}\nexport default TestStuffPage;","map":{"version":3,"names":["React","useMemo","useState","useObservable","AutoSizer","dateMath","FieldColorModeId","Button","Table","config","useAppNotification","Page","PanelRenderer","QueryGroup","PanelQueryRunner","TestStuffPage","state","setState","getDefaultState","queryOptions","queryRunner","onRunQueries","timeRange","from","to","run","queries","datasource","dataSource","timezone","parse","raw","maxDataPoints","minInterval","onOptionsChange","observable","getData","withFieldConfig","withTransforms","data","node","id","text","icon","subTitle","url","notifyApp","main","width","height","defaults","overrides","series","marginTop","display","gap","success","warning","error","options","fieldConfig","color","mode","PaletteClassic","replaceVariables","v","theme","theme2","dataConfig","getTransformations","getFieldOverrideOptions","getDataSupport","annotations","alertStates","name"],"sources":["/home/soula/grafana/public/app/features/sandbox/TestStuffPage.tsx"],"sourcesContent":["import React, { FC, useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport {\n  ApplyFieldOverrideOptions,\n  DataTransformerConfig,\n  dateMath,\n  FieldColorModeId,\n  NavModelItem,\n  PanelData,\n} from '@grafana/data';\nimport { Button, Table } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { QueryGroupOptions } from 'app/types';\n\nimport Page from '../../core/components/Page/Page';\nimport { PanelRenderer } from '../panel/components/PanelRenderer';\nimport { QueryGroup } from '../query/components/QueryGroup';\nimport { PanelQueryRunner } from '../query/state/PanelQueryRunner';\n\ninterface State {\n  queryRunner: PanelQueryRunner;\n  queryOptions: QueryGroupOptions;\n  data?: PanelData;\n}\n\nexport const TestStuffPage: FC = () => {\n  const [state, setState] = useState<State>(getDefaultState());\n  const { queryOptions, queryRunner } = state;\n\n  const onRunQueries = () => {\n    const timeRange = { from: 'now-1h', to: 'now' };\n\n    queryRunner.run({\n      queries: queryOptions.queries,\n      datasource: queryOptions.dataSource,\n      timezone: 'browser',\n      timeRange: { from: dateMath.parse(timeRange.from)!, to: dateMath.parse(timeRange.to)!, raw: timeRange },\n      maxDataPoints: queryOptions.maxDataPoints ?? 100,\n      minInterval: queryOptions.minInterval,\n    });\n  };\n\n  const onOptionsChange = (queryOptions: QueryGroupOptions) => {\n    setState({ ...state, queryOptions });\n  };\n\n  /**\n   * Subscribe to data\n   */\n  const observable = useMemo(() => queryRunner.getData({ withFieldConfig: true, withTransforms: true }), [queryRunner]);\n  const data = useObservable(observable);\n\n  const node: NavModelItem = {\n    id: 'test-page',\n    text: 'Test page',\n    icon: 'dashboard',\n    subTitle: 'FOR TESTING!',\n    url: 'sandbox/test',\n  };\n\n  const notifyApp = useAppNotification();\n\n  return (\n    <Page navModel={{ node: node, main: node }}>\n      <Page.Contents>\n        {data && (\n          <AutoSizer style={{ width: '100%', height: '600px' }}>\n            {({ width }) => {\n              return (\n                <div>\n                  <PanelRenderer\n                    title=\"Hello\"\n                    pluginId=\"timeseries\"\n                    width={width}\n                    height={300}\n                    data={data}\n                    options={{}}\n                    fieldConfig={{ defaults: {}, overrides: [] }}\n                    timeZone=\"browser\"\n                  />\n                  <Table data={data.series[0]} width={width} height={300} />\n                </div>\n              );\n            }}\n          </AutoSizer>\n        )}\n        <div style={{ marginTop: '16px', height: '45%' }}>\n          <QueryGroup\n            options={queryOptions}\n            queryRunner={queryRunner}\n            onRunQueries={onRunQueries}\n            onOptionsChange={onOptionsChange}\n          />\n        </div>\n        <div style={{ display: 'flex', gap: '1em' }}>\n          <Button onClick={() => notifyApp.success('Success toast', 'some more text goes here')} variant=\"primary\">\n            Success\n          </Button>\n          <Button\n            onClick={() => notifyApp.warning('Warning toast', 'some more text goes here', 'bogus-trace-99999')}\n            variant=\"secondary\"\n          >\n            Warning\n          </Button>\n          <Button\n            onClick={() => notifyApp.error('Error toast', 'some more text goes here', 'bogus-trace-fdsfdfsfds')}\n            variant=\"destructive\"\n          >\n            Error\n          </Button>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport function getDefaultState(): State {\n  const options: ApplyFieldOverrideOptions = {\n    fieldConfig: {\n      defaults: {\n        color: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n      overrides: [],\n    },\n    replaceVariables: (v: string) => v,\n    theme: config.theme2,\n  };\n\n  const dataConfig = {\n    getTransformations: () => [] as DataTransformerConfig[],\n    getFieldOverrideOptions: () => options,\n    getDataSupport: () => ({ annotations: false, alertStates: false }),\n  };\n\n  return {\n    queryRunner: new PanelQueryRunner(dataConfig),\n    queryOptions: {\n      queries: [],\n      dataSource: {\n        name: 'gdev-testdata',\n      },\n      maxDataPoints: 100,\n    },\n  };\n}\n\nexport default TestStuffPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}