{"ast":null,"code":"const _excluded = [\"getContextMenuSource\", \"timeZone\", \"itemsGroup\", \"dimensions\", \"contextDimensions\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { getValueFromDimension, dateTimeFormat } from '@grafana/data';\nimport { useTheme } from '../../themes';\nimport { ContextMenu } from '../ContextMenu/ContextMenu';\nimport { FormattedValueDisplay } from '../FormattedValueDisplay/FormattedValueDisplay';\nimport { HorizontalGroup } from '../Layout/Layout';\nimport { MenuGroup } from '../Menu/MenuGroup';\nimport { MenuItem } from '../Menu/MenuItem';\nimport { SeriesIcon } from '../VizLegend/SeriesIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/** @internal */\nexport const GraphContextMenu = _ref => {\n  let {\n    getContextMenuSource,\n    timeZone,\n    itemsGroup,\n    dimensions,\n    contextDimensions\n  } = _ref,\n      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const source = getContextMenuSource(); //  Do not render items that do not have label specified\n\n  const itemsToRender = itemsGroup ? itemsGroup.map(group => {\n    var _group$items;\n\n    return Object.assign({}, group, {\n      items: (_group$items = group.items) === null || _group$items === void 0 ? void 0 : _group$items.filter(item => item.label)\n    });\n  }) : [];\n\n  const renderHeader = () => {\n    var _contextDimensions$yA;\n\n    if (!source) {\n      return null;\n    } // If dimensions supplied, we can calculate and display value\n\n\n    let value;\n\n    if (dimensions !== null && dimensions !== void 0 && dimensions.yAxis && contextDimensions !== null && contextDimensions !== void 0 && (_contextDimensions$yA = contextDimensions.yAxis) !== null && _contextDimensions$yA !== void 0 && _contextDimensions$yA[1]) {\n      const valueFromDimensions = getValueFromDimension(dimensions.yAxis, contextDimensions.yAxis[0], contextDimensions.yAxis[1]);\n      const display = source.series.valueField.display;\n      value = display(valueFromDimensions);\n    }\n\n    const formattedValue = dateTimeFormat(source.datapoint[0], {\n      defaultWithMS: source.series.hasMsResolution,\n      timeZone\n    });\n    return /*#__PURE__*/_jsx(GraphContextMenuHeader, {\n      timestamp: formattedValue,\n      seriesColor: source.series.color,\n      displayName: source.series.alias || source.series.label,\n      displayValue: value\n    });\n  };\n\n  const renderMenuGroupItems = () => {\n    return itemsToRender === null || itemsToRender === void 0 ? void 0 : itemsToRender.map((group, index) => /*#__PURE__*/_jsx(MenuGroup, {\n      label: group.label,\n      children: (group.items || []).map(item => /*#__PURE__*/_jsx(MenuItem, {\n        url: item.url,\n        label: item.label,\n        target: item.target,\n        icon: item.icon,\n        active: item.active,\n        onClick: item.onClick\n      }, `${item.label}`))\n    }, `${group.label}${index}`));\n  };\n\n  return /*#__PURE__*/_jsx(ContextMenu, Object.assign({}, otherProps, {\n    renderMenuItems: renderMenuGroupItems,\n    renderHeader: renderHeader\n  }));\n};\n/** @internal */\n\nexport const GraphContextMenuHeader = ({\n  timestamp,\n  seriesColor,\n  displayName,\n  displayValue\n}) => {\n  const theme = useTheme();\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: css`\n        padding: ${theme.spacing.xs} ${theme.spacing.sm};\n        font-size: ${theme.typography.size.sm};\n        z-index: ${theme.zIndex.tooltip};\n      `,\n    children: [/*#__PURE__*/_jsx(\"strong\", {\n      children: timestamp\n    }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(SeriesIcon, {\n          color: seriesColor\n        }), /*#__PURE__*/_jsx(\"span\", {\n          className: css`\n              white-space: nowrap;\n              padding-left: ${theme.spacing.xs};\n            `,\n          children: displayName\n        })]\n      }), displayValue && /*#__PURE__*/_jsx(FormattedValueDisplay, {\n        value: displayValue\n      })]\n    })]\n  });\n};","map":{"version":3,"names":["css","React","getValueFromDimension","dateTimeFormat","useTheme","ContextMenu","FormattedValueDisplay","HorizontalGroup","MenuGroup","MenuItem","SeriesIcon","GraphContextMenu","getContextMenuSource","timeZone","itemsGroup","dimensions","contextDimensions","otherProps","source","itemsToRender","map","group","items","filter","item","label","renderHeader","value","yAxis","valueFromDimensions","display","series","valueField","formattedValue","datapoint","defaultWithMS","hasMsResolution","color","alias","renderMenuGroupItems","index","url","target","icon","active","onClick","GraphContextMenuHeader","timestamp","seriesColor","displayName","displayValue","theme","spacing","xs","sm","typography","size","zIndex","tooltip"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Graph/GraphContextMenu.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  FlotDataPoint,\n  getValueFromDimension,\n  Dimensions,\n  dateTimeFormat,\n  TimeZone,\n  FormattedValue,\n} from '@grafana/data';\n\nimport { useTheme } from '../../themes';\nimport { ContextMenu, ContextMenuProps } from '../ContextMenu/ContextMenu';\nimport { FormattedValueDisplay } from '../FormattedValueDisplay/FormattedValueDisplay';\nimport { HorizontalGroup } from '../Layout/Layout';\nimport { MenuGroup, MenuGroupProps } from '../Menu/MenuGroup';\nimport { MenuItem } from '../Menu/MenuItem';\nimport { SeriesIcon } from '../VizLegend/SeriesIcon';\n\nimport { GraphDimensions } from './GraphTooltip/types';\n\nexport type ContextDimensions<T extends Dimensions = any> = { [key in keyof T]: [number, number | undefined] | null };\n\nexport type GraphContextMenuProps = ContextMenuProps & {\n  getContextMenuSource: () => FlotDataPoint | null;\n  timeZone?: TimeZone;\n  itemsGroup?: MenuGroupProps[];\n  dimensions?: GraphDimensions;\n  contextDimensions?: ContextDimensions;\n};\n\n/** @internal */\nexport const GraphContextMenu: React.FC<GraphContextMenuProps> = ({\n  getContextMenuSource,\n  timeZone,\n  itemsGroup,\n  dimensions,\n  contextDimensions,\n  ...otherProps\n}) => {\n  const source = getContextMenuSource();\n\n  //  Do not render items that do not have label specified\n  const itemsToRender = itemsGroup\n    ? itemsGroup.map((group) => ({\n        ...group,\n        items: group.items?.filter((item) => item.label),\n      }))\n    : [];\n\n  const renderHeader = () => {\n    if (!source) {\n      return null;\n    }\n\n    // If dimensions supplied, we can calculate and display value\n    let value;\n    if (dimensions?.yAxis && contextDimensions?.yAxis?.[1]) {\n      const valueFromDimensions = getValueFromDimension(\n        dimensions.yAxis,\n        contextDimensions.yAxis[0],\n        contextDimensions.yAxis[1]\n      );\n      const display = source.series.valueField.display!;\n      value = display(valueFromDimensions);\n    }\n\n    const formattedValue = dateTimeFormat(source.datapoint[0], {\n      defaultWithMS: source.series.hasMsResolution,\n      timeZone,\n    });\n\n    return (\n      <GraphContextMenuHeader\n        timestamp={formattedValue}\n        seriesColor={source.series.color}\n        displayName={source.series.alias || source.series.label}\n        displayValue={value}\n      />\n    );\n  };\n  const renderMenuGroupItems = () => {\n    return itemsToRender?.map((group, index) => (\n      <MenuGroup key={`${group.label}${index}`} label={group.label}>\n        {(group.items || []).map((item) => (\n          <MenuItem\n            key={`${item.label}`}\n            url={item.url}\n            label={item.label}\n            target={item.target}\n            icon={item.icon}\n            active={item.active}\n            onClick={item.onClick}\n          />\n        ))}\n      </MenuGroup>\n    ));\n  };\n\n  return <ContextMenu {...otherProps} renderMenuItems={renderMenuGroupItems} renderHeader={renderHeader} />;\n};\n\n/** @internal */\nexport const GraphContextMenuHeader = ({\n  timestamp,\n  seriesColor,\n  displayName,\n  displayValue,\n}: {\n  timestamp: string;\n  seriesColor: string;\n  displayName: string;\n  displayValue: FormattedValue;\n}) => {\n  const theme = useTheme();\n\n  return (\n    <div\n      className={css`\n        padding: ${theme.spacing.xs} ${theme.spacing.sm};\n        font-size: ${theme.typography.size.sm};\n        z-index: ${theme.zIndex.tooltip};\n      `}\n    >\n      <strong>{timestamp}</strong>\n      <HorizontalGroup>\n        <div>\n          <SeriesIcon color={seriesColor} />\n          <span\n            className={css`\n              white-space: nowrap;\n              padding-left: ${theme.spacing.xs};\n            `}\n          >\n            {displayName}\n          </span>\n        </div>\n        {displayValue && <FormattedValueDisplay value={displayValue} />}\n      </HorizontalGroup>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}