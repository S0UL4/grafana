{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { getDataSourceSrv, reportInteraction } from '@grafana/runtime';\nimport { QueryEditorRow } from './QueryEditorRow';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class QueryEditorRows extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onRemoveQuery\", query => {\n      this.props.onQueriesChange(this.props.queries.filter(item => item !== query));\n    });\n\n    _defineProperty(this, \"onDragStart\", result => {\n      const {\n        queries,\n        dsSettings\n      } = this.props;\n      reportInteraction('query_row_reorder_started', {\n        startIndex: result.source.index,\n        numberOfQueries: queries.length,\n        datasourceType: dsSettings.type\n      });\n    });\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      const {\n        queries,\n        onQueriesChange,\n        dsSettings\n      } = this.props;\n\n      if (!result || !result.destination) {\n        return;\n      }\n\n      const startIndex = result.source.index;\n      const endIndex = result.destination.index;\n\n      if (startIndex === endIndex) {\n        reportInteraction('query_row_reorder_canceled', {\n          startIndex,\n          endIndex,\n          numberOfQueries: queries.length,\n          datasourceType: dsSettings.type\n        });\n        return;\n      }\n\n      const update = Array.from(queries);\n      const [removed] = update.splice(startIndex, 1);\n      update.splice(endIndex, 0, removed);\n      onQueriesChange(update);\n      reportInteraction('query_row_reorder_ended', {\n        startIndex,\n        endIndex,\n        numberOfQueries: queries.length,\n        datasourceType: dsSettings.type\n      });\n    });\n  }\n\n  onChangeQuery(query, index) {\n    const {\n      queries,\n      onQueriesChange\n    } = this.props; // update query in array\n\n    onQueriesChange(queries.map((item, itemIndex) => {\n      if (itemIndex === index) {\n        return query;\n      }\n\n      return item;\n    }));\n  }\n\n  onDataSourceChange(dataSource, index) {\n    const {\n      queries,\n      onQueriesChange\n    } = this.props;\n    onQueriesChange(queries.map((item, itemIndex) => {\n      if (itemIndex !== index) {\n        return item;\n      }\n\n      const dataSourceRef = {\n        type: dataSource.type,\n        uid: dataSource.uid\n      };\n\n      if (item.datasource) {\n        const previous = getDataSourceSrv().getInstanceSettings(item.datasource);\n\n        if ((previous === null || previous === void 0 ? void 0 : previous.type) === dataSource.type) {\n          return Object.assign({}, item, {\n            datasource: dataSourceRef\n          });\n        }\n      }\n\n      return {\n        refId: item.refId,\n        hide: item.hide,\n        datasource: dataSourceRef\n      };\n    }));\n  }\n\n  render() {\n    const {\n      dsSettings,\n      data,\n      queries,\n      app,\n      history,\n      eventBus\n    } = this.props;\n    return /*#__PURE__*/_jsx(DragDropContext, {\n      onDragStart: this.onDragStart,\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsx(Droppable, {\n        droppableId: \"transformations-list\",\n        direction: \"vertical\",\n        children: provided => {\n          return /*#__PURE__*/_jsxs(\"div\", Object.assign({\n            ref: provided.innerRef\n          }, provided.droppableProps, {\n            children: [queries.map((query, index) => {\n              const dataSourceSettings = getDataSourceSettings(query, dsSettings);\n              const onChangeDataSourceSettings = dsSettings.meta.mixed ? settings => this.onDataSourceChange(settings, index) : undefined;\n              return /*#__PURE__*/_jsx(QueryEditorRow, {\n                id: query.refId,\n                index: index,\n                data: data,\n                query: query,\n                dataSource: dataSourceSettings,\n                onChangeDataSource: onChangeDataSourceSettings,\n                onChange: query => this.onChangeQuery(query, index),\n                onRemoveQuery: this.onRemoveQuery,\n                onAddQuery: this.props.onAddQuery,\n                onRunQuery: this.props.onRunQueries,\n                queries: queries,\n                app: app,\n                history: history,\n                eventBus: eventBus\n              }, query.refId);\n            }), provided.placeholder]\n          }));\n        }\n      })\n    });\n  }\n\n}\n\nconst getDataSourceSettings = (query, groupSettings) => {\n  if (!query.datasource) {\n    return groupSettings;\n  }\n\n  const querySettings = getDataSourceSrv().getInstanceSettings(query.datasource);\n  return querySettings || groupSettings;\n};","map":{"version":3,"names":["React","PureComponent","DragDropContext","Droppable","getDataSourceSrv","reportInteraction","QueryEditorRow","QueryEditorRows","query","props","onQueriesChange","queries","filter","item","result","dsSettings","startIndex","source","index","numberOfQueries","length","datasourceType","type","destination","endIndex","update","Array","from","removed","splice","onChangeQuery","map","itemIndex","onDataSourceChange","dataSource","dataSourceRef","uid","datasource","previous","getInstanceSettings","refId","hide","render","data","app","history","eventBus","onDragStart","onDragEnd","provided","innerRef","droppableProps","dataSourceSettings","getDataSourceSettings","onChangeDataSourceSettings","meta","mixed","settings","undefined","onRemoveQuery","onAddQuery","onRunQueries","placeholder","groupSettings","querySettings"],"sources":["/home/soula/grafana/public/app/features/query/components/QueryEditorRows.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { DragDropContext, DragStart, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceInstanceSettings,\n  DataSourceRef,\n  EventBusExtended,\n  HistoryItem,\n  PanelData,\n} from '@grafana/data';\nimport { getDataSourceSrv, reportInteraction } from '@grafana/runtime';\n\nimport { QueryEditorRow } from './QueryEditorRow';\n\ninterface Props {\n  // The query configuration\n  queries: DataQuery[];\n  dsSettings: DataSourceInstanceSettings;\n\n  // Query editing\n  onQueriesChange: (queries: DataQuery[]) => void;\n  onAddQuery: (query: DataQuery) => void;\n  onRunQueries: () => void;\n\n  // Query Response Data\n  data: PanelData;\n\n  // Misc\n  app?: CoreApp;\n  history?: Array<HistoryItem<DataQuery>>;\n  eventBus?: EventBusExtended;\n}\n\nexport class QueryEditorRows extends PureComponent<Props> {\n  onRemoveQuery = (query: DataQuery) => {\n    this.props.onQueriesChange(this.props.queries.filter((item) => item !== query));\n  };\n\n  onChangeQuery(query: DataQuery, index: number) {\n    const { queries, onQueriesChange } = this.props;\n\n    // update query in array\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex === index) {\n          return query;\n        }\n        return item;\n      })\n    );\n  }\n\n  onDataSourceChange(dataSource: DataSourceInstanceSettings, index: number) {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        const dataSourceRef: DataSourceRef = {\n          type: dataSource.type,\n          uid: dataSource.uid,\n        };\n\n        if (item.datasource) {\n          const previous = getDataSourceSrv().getInstanceSettings(item.datasource);\n\n          if (previous?.type === dataSource.type) {\n            return {\n              ...item,\n              datasource: dataSourceRef,\n            };\n          }\n        }\n\n        return {\n          refId: item.refId,\n          hide: item.hide,\n          datasource: dataSourceRef,\n        };\n      })\n    );\n  }\n\n  onDragStart = (result: DragStart) => {\n    const { queries, dsSettings } = this.props;\n\n    reportInteraction('query_row_reorder_started', {\n      startIndex: result.source.index,\n      numberOfQueries: queries.length,\n      datasourceType: dsSettings.type,\n    });\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange, dsSettings } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      reportInteraction('query_row_reorder_canceled', {\n        startIndex,\n        endIndex,\n        numberOfQueries: queries.length,\n        datasourceType: dsSettings.type,\n      });\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n\n    reportInteraction('query_row_reorder_ended', {\n      startIndex,\n      endIndex,\n      numberOfQueries: queries.length,\n      datasourceType: dsSettings.type,\n    });\n  };\n\n  render() {\n    const { dsSettings, data, queries, app, history, eventBus } = this.props;\n\n    return (\n      <DragDropContext onDragStart={this.onDragStart} onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"transformations-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {queries.map((query, index) => {\n                  const dataSourceSettings = getDataSourceSettings(query, dsSettings);\n                  const onChangeDataSourceSettings = dsSettings.meta.mixed\n                    ? (settings: DataSourceInstanceSettings) => this.onDataSourceChange(settings, index)\n                    : undefined;\n\n                  return (\n                    <QueryEditorRow\n                      id={query.refId}\n                      index={index}\n                      key={query.refId}\n                      data={data}\n                      query={query}\n                      dataSource={dataSourceSettings}\n                      onChangeDataSource={onChangeDataSourceSettings}\n                      onChange={(query) => this.onChangeQuery(query, index)}\n                      onRemoveQuery={this.onRemoveQuery}\n                      onAddQuery={this.props.onAddQuery}\n                      onRunQuery={this.props.onRunQueries}\n                      queries={queries}\n                      app={app}\n                      history={history}\n                      eventBus={eventBus}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nconst getDataSourceSettings = (\n  query: DataQuery,\n  groupSettings: DataSourceInstanceSettings\n): DataSourceInstanceSettings => {\n  if (!query.datasource) {\n    return groupSettings;\n  }\n  const querySettings = getDataSourceSrv().getInstanceSettings(query.datasource);\n  return querySettings || groupSettings;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}