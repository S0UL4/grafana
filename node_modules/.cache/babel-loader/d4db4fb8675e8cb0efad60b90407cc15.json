{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { cx, css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { stylesFactory, withTheme } from '../../themes';\nimport { Button } from '../Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nclass UnThemedConfirmButton extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"mainButtonRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"confirmButtonRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"state\", {\n      showConfirm: false\n    });\n\n    _defineProperty(this, \"onClickButton\", event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState({\n        showConfirm: true\n      }, () => {\n        if (this.props.autoFocus && this.confirmButtonRef.current) {\n          this.confirmButtonRef.current.focus();\n        }\n      });\n\n      if (this.props.onClick) {\n        this.props.onClick();\n      }\n    });\n\n    _defineProperty(this, \"onClickCancel\", event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.setState({\n        showConfirm: false\n      }, () => {\n        var _this$mainButtonRef$c;\n\n        (_this$mainButtonRef$c = this.mainButtonRef.current) === null || _this$mainButtonRef$c === void 0 ? void 0 : _this$mainButtonRef$c.focus();\n      });\n\n      if (this.props.onCancel) {\n        this.props.onCancel();\n      }\n    });\n\n    _defineProperty(this, \"onConfirm\", event => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.props.onConfirm();\n\n      if (this.props.closeOnConfirm) {\n        this.setState({\n          showConfirm: false\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      theme,\n      className,\n      size,\n      disabled,\n      confirmText,\n      confirmVariant: confirmButtonVariant,\n      children\n    } = this.props;\n    const styles = getStyles(theme);\n    const buttonClass = cx(className, this.state.showConfirm ? styles.buttonHide : styles.buttonShow, disabled && styles.buttonDisabled);\n    const confirmButtonClass = cx(styles.confirmButton, this.state.showConfirm ? styles.confirmButtonShow : styles.confirmButtonHide);\n    const onClick = disabled ? () => {} : this.onClickButton;\n    return /*#__PURE__*/_jsxs(\"span\", {\n      className: styles.buttonContainer,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: cx(disabled && styles.disabled),\n        children: typeof children === 'string' ? /*#__PURE__*/_jsx(\"span\", {\n          className: buttonClass,\n          children: /*#__PURE__*/_jsx(Button, {\n            size: size,\n            fill: \"text\",\n            onClick: onClick,\n            ref: this.mainButtonRef,\n            children: children\n          })\n        }) : /*#__PURE__*/_jsx(\"span\", {\n          className: buttonClass,\n          onClick: onClick,\n          children: children\n        })\n      }), /*#__PURE__*/_jsxs(\"span\", {\n        className: confirmButtonClass,\n        children: [/*#__PURE__*/_jsx(Button, {\n          size: size,\n          variant: confirmButtonVariant,\n          onClick: this.onConfirm,\n          ref: this.confirmButtonRef,\n          children: confirmText\n        }), /*#__PURE__*/_jsx(Button, {\n          size: size,\n          fill: \"text\",\n          onClick: this.onClickCancel,\n          children: \"Cancel\"\n        })]\n      })]\n    });\n  }\n\n}\n\nexport const ConfirmButton = withTheme(UnThemedConfirmButton);\nconst getStyles = stylesFactory(theme => {\n  return {\n    buttonContainer: css`\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n    `,\n    buttonDisabled: css`\n      text-decoration: none;\n      color: ${theme.colors.text};\n      opacity: 0.65;\n      pointer-events: none;\n    `,\n    buttonShow: css`\n      opacity: 1;\n      transition: opacity 0.1s ease;\n      z-index: 2;\n    `,\n    buttonHide: css`\n      opacity: 0;\n      transition: opacity 0.1s ease, visibility 0 0.1s;\n      visibility: hidden;\n      z-index: 0;\n    `,\n    confirmButton: css`\n      align-items: flex-start;\n      background: ${theme.colors.bg1};\n      display: flex;\n      position: absolute;\n      pointer-events: none;\n    `,\n    confirmButtonShow: css`\n      z-index: 1;\n      opacity: 1;\n      transition: opacity 0.08s ease-out, transform 0.1s ease-out;\n      transform: translateX(0);\n      pointer-events: all;\n    `,\n    confirmButtonHide: css`\n      opacity: 0;\n      visibility: hidden;\n      transition: opacity 0.12s ease-in, transform 0.14s ease-in, visibility 0s 0.12s;\n      transform: translateX(100px);\n    `,\n    disabled: css`\n      cursor: not-allowed;\n    `\n  };\n}); // Declare defaultProps directly on the themed component so they are displayed\n// in the props table\n\nConfirmButton.defaultProps = {\n  size: 'md',\n  confirmText: 'Save',\n  disabled: false,\n  confirmVariant: 'primary'\n};\nConfirmButton.displayName = 'ConfirmButton';","map":{"version":3,"names":["cx","css","React","PureComponent","stylesFactory","withTheme","Button","UnThemedConfirmButton","createRef","showConfirm","event","preventDefault","setState","props","autoFocus","confirmButtonRef","current","focus","onClick","mainButtonRef","onCancel","onConfirm","closeOnConfirm","render","theme","className","size","disabled","confirmText","confirmVariant","confirmButtonVariant","children","styles","getStyles","buttonClass","state","buttonHide","buttonShow","buttonDisabled","confirmButtonClass","confirmButton","confirmButtonShow","confirmButtonHide","onClickButton","buttonContainer","onClickCancel","ConfirmButton","colors","text","bg1","defaultProps","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/ConfirmButton/ConfirmButton.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport React, { PureComponent, SyntheticEvent } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { stylesFactory, withTheme } from '../../themes';\nimport { Themeable } from '../../types';\nimport { ComponentSize } from '../../types/size';\nimport { Button, ButtonVariant } from '../Button';\n\nexport interface Props extends Themeable {\n  /** Confirm action callback */\n  onConfirm(): void;\n  /** Custom button styles */\n  className?: string;\n  /** Button size */\n  size?: ComponentSize;\n  /** Text for the Confirm button */\n  confirmText?: string;\n  /** Disable button click action */\n  disabled?: boolean;\n  /** Variant of the Confirm button */\n  confirmVariant?: ButtonVariant;\n  /** Hide confirm actions when after of them is clicked */\n  closeOnConfirm?: boolean;\n  /** Move focus to button when mounted */\n  autoFocus?: boolean;\n\n  /** Optional on click handler for the original button */\n  onClick?(): void;\n  /** Callback for the cancel action */\n  onCancel?(): void;\n}\n\ninterface State {\n  showConfirm: boolean;\n}\n\nclass UnThemedConfirmButton extends PureComponent<Props, State> {\n  mainButtonRef = React.createRef<HTMLButtonElement>();\n  confirmButtonRef = React.createRef<HTMLButtonElement>();\n  state: State = {\n    showConfirm: false,\n  };\n\n  onClickButton = (event: SyntheticEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n\n    this.setState(\n      {\n        showConfirm: true,\n      },\n      () => {\n        if (this.props.autoFocus && this.confirmButtonRef.current) {\n          this.confirmButtonRef.current.focus();\n        }\n      }\n    );\n\n    if (this.props.onClick) {\n      this.props.onClick();\n    }\n  };\n\n  onClickCancel = (event: SyntheticEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState(\n      {\n        showConfirm: false,\n      },\n      () => {\n        this.mainButtonRef.current?.focus();\n      }\n    );\n    if (this.props.onCancel) {\n      this.props.onCancel();\n    }\n  };\n  onConfirm = (event: SyntheticEvent) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.props.onConfirm();\n    if (this.props.closeOnConfirm) {\n      this.setState({\n        showConfirm: false,\n      });\n    }\n  };\n\n  render() {\n    const {\n      theme,\n      className,\n      size,\n      disabled,\n      confirmText,\n      confirmVariant: confirmButtonVariant,\n      children,\n    } = this.props;\n    const styles = getStyles(theme);\n    const buttonClass = cx(\n      className,\n      this.state.showConfirm ? styles.buttonHide : styles.buttonShow,\n      disabled && styles.buttonDisabled\n    );\n    const confirmButtonClass = cx(\n      styles.confirmButton,\n      this.state.showConfirm ? styles.confirmButtonShow : styles.confirmButtonHide\n    );\n\n    const onClick = disabled ? () => {} : this.onClickButton;\n\n    return (\n      <span className={styles.buttonContainer}>\n        <div className={cx(disabled && styles.disabled)}>\n          {typeof children === 'string' ? (\n            <span className={buttonClass}>\n              <Button size={size} fill=\"text\" onClick={onClick} ref={this.mainButtonRef}>\n                {children}\n              </Button>\n            </span>\n          ) : (\n            <span className={buttonClass} onClick={onClick}>\n              {children}\n            </span>\n          )}\n        </div>\n        <span className={confirmButtonClass}>\n          <Button size={size} variant={confirmButtonVariant} onClick={this.onConfirm} ref={this.confirmButtonRef}>\n            {confirmText}\n          </Button>\n          <Button size={size} fill=\"text\" onClick={this.onClickCancel}>\n            Cancel\n          </Button>\n        </span>\n      </span>\n    );\n  }\n}\n\nexport const ConfirmButton = withTheme(UnThemedConfirmButton);\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    buttonContainer: css`\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n    `,\n    buttonDisabled: css`\n      text-decoration: none;\n      color: ${theme.colors.text};\n      opacity: 0.65;\n      pointer-events: none;\n    `,\n    buttonShow: css`\n      opacity: 1;\n      transition: opacity 0.1s ease;\n      z-index: 2;\n    `,\n    buttonHide: css`\n      opacity: 0;\n      transition: opacity 0.1s ease, visibility 0 0.1s;\n      visibility: hidden;\n      z-index: 0;\n    `,\n    confirmButton: css`\n      align-items: flex-start;\n      background: ${theme.colors.bg1};\n      display: flex;\n      position: absolute;\n      pointer-events: none;\n    `,\n    confirmButtonShow: css`\n      z-index: 1;\n      opacity: 1;\n      transition: opacity 0.08s ease-out, transform 0.1s ease-out;\n      transform: translateX(0);\n      pointer-events: all;\n    `,\n    confirmButtonHide: css`\n      opacity: 0;\n      visibility: hidden;\n      transition: opacity 0.12s ease-in, transform 0.14s ease-in, visibility 0s 0.12s;\n      transform: translateX(100px);\n    `,\n    disabled: css`\n      cursor: not-allowed;\n    `,\n  };\n});\n\n// Declare defaultProps directly on the themed component so they are displayed\n// in the props table\nConfirmButton.defaultProps = {\n  size: 'md',\n  confirmText: 'Save',\n  disabled: false,\n  confirmVariant: 'primary',\n};\nConfirmButton.displayName = 'ConfirmButton';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}