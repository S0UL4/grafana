{"ast":null,"code":"var _FeedbackLink, _FlexItem, _Space;\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { CoreApp, LoadingState } from '@grafana/data';\nimport { EditorHeader, EditorRows, FlexItem, InlineSelect, Space } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { FeedbackLink } from 'app/plugins/datasource/prometheus/querybuilder/shared/FeedbackLink';\nimport { QueryEditorModeToggle } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { changeEditorMode, getQueryWithDefaults, useRawQuery } from '../state';\nimport { LokiQueryBuilderContainer } from './LokiQueryBuilderContainer';\nimport { LokiQueryBuilderExplained } from './LokiQueryBuilderExplained';\nimport { LokiQueryBuilderOptions } from './LokiQueryBuilderOptions';\nimport { LokiQueryCodeEditor } from './LokiQueryCodeEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const LokiQueryEditorSelector = /*#__PURE__*/React.memo(props => {\n  const {\n    onChange,\n    onRunQuery,\n    data,\n    app\n  } = props;\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const query = getQueryWithDefaults(props.query);\n  const [rawQuery, setRawQuery] = useRawQuery(); // This should be filled in from the defaults by now.\n\n  const editorMode = query.editorMode;\n  const onEditorModeChange = useCallback(newEditorMode => {\n    var _query$editorMode;\n\n    reportInteraction('grafana_loki_editor_mode_clicked', {\n      newEditor: newEditorMode,\n      previousEditor: (_query$editorMode = query.editorMode) !== null && _query$editorMode !== void 0 ? _query$editorMode : '',\n      newQuery: !query.expr,\n      app: app !== null && app !== void 0 ? app : ''\n    });\n\n    if (newEditorMode === QueryEditorMode.Builder) {\n      const result = buildVisualQueryFromString(query.expr || ''); // If there are errors, give user a chance to decide if they want to go to builder as that can loose some data.\n\n      if (result.errors.length) {\n        setParseModalOpen(true);\n        return;\n      }\n    }\n\n    changeEditorMode(query, newEditorMode, onChange);\n  }, [onChange, query, app]);\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = query => {\n    setDataIsStale(true);\n    onChange(query);\n  };\n\n  const onQueryPreviewChange = event => {\n    const isEnabled = event.currentTarget.checked;\n    setRawQuery(isEnabled);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ConfirmModal, {\n      isOpen: parseModalOpen,\n      title: \"Query parsing\",\n      body: \"There were errors while trying to parse the query. Continuing to visual builder may loose some parts of the query.\",\n      confirmText: \"Continue\",\n      onConfirm: () => {\n        onChange(Object.assign({}, query, {\n          editorMode: QueryEditorMode.Builder\n        }));\n        setParseModalOpen(false);\n      },\n      onDismiss: () => setParseModalOpen(false)\n    }), /*#__PURE__*/_jsxs(EditorHeader, {\n      children: [/*#__PURE__*/_jsx(InlineSelect, {\n        value: null,\n        placeholder: \"Query patterns\",\n        allowCustomValue: true,\n        onChange: ({\n          value\n        }) => {\n          const result = buildVisualQueryFromString(query.expr || '');\n          result.query.operations = value === null || value === void 0 ? void 0 : value.operations;\n          onChange(Object.assign({}, query, {\n            expr: lokiQueryModeller.renderQuery(result.query)\n          }));\n        },\n        options: lokiQueryModeller.getQueryPatterns().map(x => ({\n          label: x.name,\n          value: x\n        }))\n      }), editorMode === QueryEditorMode.Builder && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(QueryHeaderSwitch, {\n          label: \"Raw query\",\n          value: rawQuery,\n          onChange: onQueryPreviewChange\n        }), _FeedbackLink || (_FeedbackLink = /*#__PURE__*/_jsx(FeedbackLink, {\n          feedbackUrl: \"https://github.com/grafana/grafana/discussions/50785\"\n        }))]\n      }), _FlexItem || (_FlexItem = /*#__PURE__*/_jsx(FlexItem, {\n        grow: 1\n      })), app !== CoreApp.Explore && /*#__PURE__*/_jsx(Button, {\n        variant: dataIsStale ? 'primary' : 'secondary',\n        size: \"sm\",\n        onClick: onRunQuery,\n        icon: (data === null || data === void 0 ? void 0 : data.state) === LoadingState.Loading ? 'fa fa-spinner' : undefined,\n        disabled: (data === null || data === void 0 ? void 0 : data.state) === LoadingState.Loading,\n        children: \"Run queries\"\n      }), /*#__PURE__*/_jsx(QueryEditorModeToggle, {\n        mode: editorMode,\n        onChange: onEditorModeChange\n      })]\n    }), _Space || (_Space = /*#__PURE__*/_jsx(Space, {\n      v: 0.5\n    })), /*#__PURE__*/_jsxs(EditorRows, {\n      children: [editorMode === QueryEditorMode.Code && /*#__PURE__*/_jsx(LokiQueryCodeEditor, Object.assign({}, props, {\n        onChange: onChangeInternal\n      })), editorMode === QueryEditorMode.Builder && /*#__PURE__*/_jsx(LokiQueryBuilderContainer, {\n        datasource: props.datasource,\n        query: query,\n        onChange: onChangeInternal,\n        onRunQuery: props.onRunQuery,\n        showRawQuery: rawQuery\n      }), editorMode === QueryEditorMode.Explain && /*#__PURE__*/_jsx(LokiQueryBuilderExplained, {\n        query: query.expr\n      }), editorMode !== QueryEditorMode.Explain && /*#__PURE__*/_jsx(LokiQueryBuilderOptions, {\n        query: query,\n        onChange: onChange,\n        onRunQuery: onRunQuery,\n        app: app\n      })]\n    })]\n  });\n});\nLokiQueryEditorSelector.displayName = 'LokiQueryEditorSelector';","map":{"version":3,"names":["React","useCallback","useEffect","useState","CoreApp","LoadingState","EditorHeader","EditorRows","FlexItem","InlineSelect","Space","reportInteraction","Button","ConfirmModal","FeedbackLink","QueryEditorModeToggle","QueryHeaderSwitch","QueryEditorMode","lokiQueryModeller","buildVisualQueryFromString","changeEditorMode","getQueryWithDefaults","useRawQuery","LokiQueryBuilderContainer","LokiQueryBuilderExplained","LokiQueryBuilderOptions","LokiQueryCodeEditor","LokiQueryEditorSelector","memo","props","onChange","onRunQuery","data","app","parseModalOpen","setParseModalOpen","dataIsStale","setDataIsStale","query","rawQuery","setRawQuery","editorMode","onEditorModeChange","newEditorMode","newEditor","previousEditor","newQuery","expr","Builder","result","errors","length","onChangeInternal","onQueryPreviewChange","event","isEnabled","currentTarget","checked","value","operations","renderQuery","getQueryPatterns","map","x","label","name","Explore","state","Loading","undefined","Code","datasource","Explain","displayName"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/querybuilder/components/LokiQueryEditorSelector.tsx"],"sourcesContent":["import React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState } from '@grafana/data';\nimport { EditorHeader, EditorRows, FlexItem, InlineSelect, Space } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { FeedbackLink } from 'app/plugins/datasource/prometheus/querybuilder/shared/FeedbackLink';\nimport { QueryEditorModeToggle } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\n\nimport { LokiQueryEditorProps } from '../../components/types';\nimport { LokiQuery } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { changeEditorMode, getQueryWithDefaults, useRawQuery } from '../state';\n\nimport { LokiQueryBuilderContainer } from './LokiQueryBuilderContainer';\nimport { LokiQueryBuilderExplained } from './LokiQueryBuilderExplained';\nimport { LokiQueryBuilderOptions } from './LokiQueryBuilderOptions';\nimport { LokiQueryCodeEditor } from './LokiQueryCodeEditor';\n\nexport const LokiQueryEditorSelector = React.memo<LokiQueryEditorProps>((props) => {\n  const { onChange, onRunQuery, data, app } = props;\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n\n  const query = getQueryWithDefaults(props.query);\n  const [rawQuery, setRawQuery] = useRawQuery();\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newEditorMode: QueryEditorMode) => {\n      reportInteraction('grafana_loki_editor_mode_clicked', {\n        newEditor: newEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can loose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: LokiQuery) => {\n    setDataIsStale(true);\n    onChange(query);\n  };\n\n  const onQueryPreviewChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    setRawQuery(isEnabled);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may loose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          onChange({ ...query, editorMode: QueryEditorMode.Builder });\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <EditorHeader>\n        <InlineSelect\n          value={null}\n          placeholder=\"Query patterns\"\n          allowCustomValue\n          onChange={({ value }) => {\n            const result = buildVisualQueryFromString(query.expr || '');\n            result.query.operations = value?.operations!;\n            onChange({\n              ...query,\n              expr: lokiQueryModeller.renderQuery(result.query),\n            });\n          }}\n          options={lokiQueryModeller.getQueryPatterns().map((x) => ({ label: x.name, value: x }))}\n        />\n        {editorMode === QueryEditorMode.Builder && (\n          <>\n            <QueryHeaderSwitch label=\"Raw query\" value={rawQuery} onChange={onQueryPreviewChange} />\n            <FeedbackLink feedbackUrl=\"https://github.com/grafana/grafana/discussions/50785\" />\n          </>\n        )}\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <QueryEditorModeToggle mode={editorMode!} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && <LokiQueryCodeEditor {...props} onChange={onChangeInternal} />}\n        {editorMode === QueryEditorMode.Builder && (\n          <LokiQueryBuilderContainer\n            datasource={props.datasource}\n            query={query}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            showRawQuery={rawQuery}\n          />\n        )}\n        {editorMode === QueryEditorMode.Explain && <LokiQueryBuilderExplained query={query.expr} />}\n        {editorMode !== QueryEditorMode.Explain && (\n          <LokiQueryBuilderOptions query={query} onChange={onChange} onRunQuery={onRunQuery} app={app} />\n        )}\n      </EditorRows>\n    </>\n  );\n});\n\nLokiQueryEditorSelector.displayName = 'LokiQueryEditorSelector';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}