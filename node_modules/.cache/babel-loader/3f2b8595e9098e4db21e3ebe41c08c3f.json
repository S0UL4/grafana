{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Libraries\nimport React, { PureComponent } from 'react'; // Components\n\nimport { getDataSourceUID, isUnsignedPluginSignature } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, PluginSignatureBadge, Select } from '@grafana/ui';\nimport { getDataSourceSrv } from '../services/dataSourceSrv';\nimport { ExpressionDatasourceRef } from './../utils/DataSourceWithBackend';\n/**\n * Component props description for the {@link DataSourcePicker}\n *\n * @internal\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/**\n * Component to be able to select a datasource from the list of installed and enabled\n * datasources in the current Grafana instance.\n *\n * @internal\n */\nexport class DataSourcePicker extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"dataSourceSrv\", getDataSourceSrv());\n\n    _defineProperty(this, \"state\", {});\n\n    _defineProperty(this, \"onChange\", (item, actionMeta) => {\n      if (actionMeta.action === 'clear' && this.props.onClear) {\n        this.props.onClear();\n        return;\n      }\n\n      const dsSettings = this.dataSourceSrv.getInstanceSettings(item.value);\n\n      if (dsSettings) {\n        this.props.onChange(dsSettings);\n        this.setState({\n          error: undefined\n        });\n      }\n    });\n  }\n\n  componentDidMount() {\n    const {\n      current\n    } = this.props;\n    const dsSettings = this.dataSourceSrv.getInstanceSettings(current);\n\n    if (!dsSettings) {\n      this.setState({\n        error: 'Could not find data source ' + current\n      });\n    }\n  }\n\n  getCurrentValue() {\n    const {\n      current,\n      hideTextValue,\n      noDefault\n    } = this.props;\n\n    if (!current && noDefault) {\n      return;\n    }\n\n    const ds = this.dataSourceSrv.getInstanceSettings(current);\n\n    if (ds) {\n      return {\n        label: ds.name.slice(0, 37),\n        value: ds.uid,\n        imgUrl: ds.meta.info.logos.small,\n        hideText: hideTextValue,\n        meta: ds.meta\n      };\n    }\n\n    const uid = getDataSourceUID(current);\n\n    if (uid === ExpressionDatasourceRef.uid || uid === ExpressionDatasourceRef.name) {\n      return {\n        label: uid,\n        value: uid,\n        hideText: hideTextValue\n      };\n    }\n\n    return {\n      label: (uid !== null && uid !== void 0 ? uid : 'no name') + ' - not found',\n      value: uid !== null && uid !== void 0 ? uid : undefined,\n      imgUrl: '',\n      hideText: hideTextValue\n    };\n  }\n\n  getDataSourceOptions() {\n    const {\n      alerting,\n      tracing,\n      metrics,\n      mixed,\n      dashboard,\n      variables,\n      annotations,\n      pluginId,\n      type,\n      filter,\n      logs\n    } = this.props;\n    const options = this.dataSourceSrv.getList({\n      alerting,\n      tracing,\n      metrics,\n      logs,\n      dashboard,\n      mixed,\n      variables,\n      annotations,\n      pluginId,\n      filter,\n      type\n    }).map(ds => ({\n      value: ds.name,\n      label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n      imgUrl: ds.meta.info.logos.small,\n      meta: ds.meta\n    }));\n    return options;\n  }\n\n  render() {\n    const {\n      autoFocus,\n      onBlur,\n      onClear,\n      openMenuOnFocus,\n      placeholder,\n      width,\n      inputId\n    } = this.props;\n    const {\n      error\n    } = this.state;\n    const options = this.getDataSourceOptions();\n    const value = this.getCurrentValue();\n    const isClearable = typeof onClear === 'function';\n    return /*#__PURE__*/_jsx(\"div\", {\n      \"aria-label\": selectors.components.DataSourcePicker.container,\n      children: /*#__PURE__*/_jsx(Select, {\n        \"aria-label\": selectors.components.DataSourcePicker.inputV2,\n        inputId: inputId || 'data-source-picker',\n        className: \"ds-picker select-container\",\n        isMulti: false,\n        isClearable: isClearable,\n        backspaceRemovesValue: false,\n        onChange: this.onChange,\n        options: options,\n        autoFocus: autoFocus,\n        onBlur: onBlur,\n        width: width,\n        openMenuOnFocus: openMenuOnFocus,\n        maxMenuHeight: 500,\n        placeholder: placeholder,\n        noOptionsMessage: \"No datasources found\",\n        value: value !== null && value !== void 0 ? value : null,\n        invalid: !!error,\n        getOptionLabel: o => {\n          if (o.meta && isUnsignedPluginSignature(o.meta.signature) && o !== value) {\n            return /*#__PURE__*/_jsxs(HorizontalGroup, {\n              align: \"center\",\n              justify: \"space-between\",\n              children: [/*#__PURE__*/_jsx(\"span\", {\n                children: o.label\n              }), \" \", /*#__PURE__*/_jsx(PluginSignatureBadge, {\n                status: o.meta.signature\n              })]\n            });\n          }\n\n          return o.label || '';\n        }\n      })\n    });\n  }\n\n}\n\n_defineProperty(DataSourcePicker, \"defaultProps\", {\n  autoFocus: false,\n  openMenuOnFocus: false,\n  placeholder: 'Select data source'\n});","map":{"version":3,"names":["React","PureComponent","getDataSourceUID","isUnsignedPluginSignature","selectors","HorizontalGroup","PluginSignatureBadge","Select","getDataSourceSrv","ExpressionDatasourceRef","DataSourcePicker","constructor","props","item","actionMeta","action","onClear","dsSettings","dataSourceSrv","getInstanceSettings","value","onChange","setState","error","undefined","componentDidMount","current","getCurrentValue","hideTextValue","noDefault","ds","label","name","slice","uid","imgUrl","meta","info","logos","small","hideText","getDataSourceOptions","alerting","tracing","metrics","mixed","dashboard","variables","annotations","pluginId","type","filter","logs","options","getList","map","isDefault","render","autoFocus","onBlur","openMenuOnFocus","placeholder","width","inputId","state","isClearable","components","container","inputV2","o","signature"],"sources":["/home/soula/grafana/packages/grafana-runtime/src/components/DataSourcePicker.tsx"],"sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport {\n  DataSourceInstanceSettings,\n  DataSourceRef,\n  getDataSourceUID,\n  isUnsignedPluginSignature,\n  SelectableValue,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ActionMeta, HorizontalGroup, PluginSignatureBadge, Select } from '@grafana/ui';\n\nimport { getDataSourceSrv } from '../services/dataSourceSrv';\n\nimport { ExpressionDatasourceRef } from './../utils/DataSourceWithBackend';\n\n/**\n * Component props description for the {@link DataSourcePicker}\n *\n * @internal\n */\nexport interface DataSourcePickerProps {\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  current: DataSourceRef | string | null; // uid\n  hideTextValue?: boolean;\n  onBlur?: () => void;\n  autoFocus?: boolean;\n  openMenuOnFocus?: boolean;\n  placeholder?: string;\n  tracing?: boolean;\n  mixed?: boolean;\n  dashboard?: boolean;\n  metrics?: boolean;\n  type?: string | string[];\n  annotations?: boolean;\n  variables?: boolean;\n  alerting?: boolean;\n  pluginId?: string;\n  /** If true,we show only DSs with logs; and if true, pluginId shouldnt be passed in */\n  logs?: boolean;\n  // If set to true and there is no value select will be empty, otherwise it will preselect default data source\n  noDefault?: boolean;\n  width?: number;\n  inputId?: string;\n  filter?: (dataSource: DataSourceInstanceSettings) => boolean;\n  onClear?: () => void;\n}\n\n/**\n * Component state description for the {@link DataSourcePicker}\n *\n * @internal\n */\nexport interface DataSourcePickerState {\n  error?: string;\n}\n\n/**\n * Component to be able to select a datasource from the list of installed and enabled\n * datasources in the current Grafana instance.\n *\n * @internal\n */\nexport class DataSourcePicker extends PureComponent<DataSourcePickerProps, DataSourcePickerState> {\n  dataSourceSrv = getDataSourceSrv();\n\n  static defaultProps: Partial<DataSourcePickerProps> = {\n    autoFocus: false,\n    openMenuOnFocus: false,\n    placeholder: 'Select data source',\n  };\n\n  state: DataSourcePickerState = {};\n\n  constructor(props: DataSourcePickerProps) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { current } = this.props;\n    const dsSettings = this.dataSourceSrv.getInstanceSettings(current);\n    if (!dsSettings) {\n      this.setState({ error: 'Could not find data source ' + current });\n    }\n  }\n\n  onChange = (item: SelectableValue<string>, actionMeta: ActionMeta) => {\n    if (actionMeta.action === 'clear' && this.props.onClear) {\n      this.props.onClear();\n      return;\n    }\n\n    const dsSettings = this.dataSourceSrv.getInstanceSettings(item.value);\n\n    if (dsSettings) {\n      this.props.onChange(dsSettings);\n      this.setState({ error: undefined });\n    }\n  };\n\n  private getCurrentValue(): SelectableValue<string> | undefined {\n    const { current, hideTextValue, noDefault } = this.props;\n    if (!current && noDefault) {\n      return;\n    }\n\n    const ds = this.dataSourceSrv.getInstanceSettings(current);\n\n    if (ds) {\n      return {\n        label: ds.name.slice(0, 37),\n        value: ds.uid,\n        imgUrl: ds.meta.info.logos.small,\n        hideText: hideTextValue,\n        meta: ds.meta,\n      };\n    }\n\n    const uid = getDataSourceUID(current);\n\n    if (uid === ExpressionDatasourceRef.uid || uid === ExpressionDatasourceRef.name) {\n      return { label: uid, value: uid, hideText: hideTextValue };\n    }\n\n    return {\n      label: (uid ?? 'no name') + ' - not found',\n      value: uid ?? undefined,\n      imgUrl: '',\n      hideText: hideTextValue,\n    };\n  }\n\n  getDataSourceOptions() {\n    const { alerting, tracing, metrics, mixed, dashboard, variables, annotations, pluginId, type, filter, logs } =\n      this.props;\n\n    const options = this.dataSourceSrv\n      .getList({\n        alerting,\n        tracing,\n        metrics,\n        logs,\n        dashboard,\n        mixed,\n        variables,\n        annotations,\n        pluginId,\n        filter,\n        type,\n      })\n      .map((ds) => ({\n        value: ds.name,\n        label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n        imgUrl: ds.meta.info.logos.small,\n        meta: ds.meta,\n      }));\n\n    return options;\n  }\n\n  render() {\n    const { autoFocus, onBlur, onClear, openMenuOnFocus, placeholder, width, inputId } = this.props;\n    const { error } = this.state;\n    const options = this.getDataSourceOptions();\n    const value = this.getCurrentValue();\n    const isClearable = typeof onClear === 'function';\n\n    return (\n      <div aria-label={selectors.components.DataSourcePicker.container}>\n        <Select\n          aria-label={selectors.components.DataSourcePicker.inputV2}\n          inputId={inputId || 'data-source-picker'}\n          className=\"ds-picker select-container\"\n          isMulti={false}\n          isClearable={isClearable}\n          backspaceRemovesValue={false}\n          onChange={this.onChange}\n          options={options}\n          autoFocus={autoFocus}\n          onBlur={onBlur}\n          width={width}\n          openMenuOnFocus={openMenuOnFocus}\n          maxMenuHeight={500}\n          placeholder={placeholder}\n          noOptionsMessage=\"No datasources found\"\n          value={value ?? null}\n          invalid={!!error}\n          getOptionLabel={(o) => {\n            if (o.meta && isUnsignedPluginSignature(o.meta.signature) && o !== value) {\n              return (\n                <HorizontalGroup align=\"center\" justify=\"space-between\">\n                  <span>{o.label}</span> <PluginSignatureBadge status={o.meta.signature} />\n                </HorizontalGroup>\n              );\n            }\n            return o.label || '';\n          }}\n        />\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}