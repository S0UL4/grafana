{"ast":null,"code":"const _excluded = [\"value\", \"onChange\", \"Component\", \"className\", \"placeholder\", \"inputPlaceholder\", \"disabled\", \"autofocus\", \"onExpandedChange\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cx, css } from '@emotion/css';\nimport React, { useRef, useState } from 'react';\nimport useClickAway from 'react-use/lib/useClickAway';\nimport { useStyles } from '../../themes';\nimport { measureText } from '../../utils/measureText';\nimport { InlineLabel } from '../Forms/InlineLabel';\nimport { getSegmentStyles } from './styles';\nimport { useExpandableLabel } from '.';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FONT_SIZE = 14;\nexport function SegmentInput(_ref) {\n  let {\n    value: initialValue,\n    onChange,\n    Component,\n    className,\n    placeholder,\n    inputPlaceholder,\n    disabled,\n    autofocus = false,\n    onExpandedChange\n  } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const ref = useRef(null);\n  const [value, setValue] = useState(initialValue);\n  const [inputWidth, setInputWidth] = useState(measureText((initialValue || '').toString(), FONT_SIZE).width);\n  const [Label,, expanded, setExpanded] = useExpandableLabel(autofocus, onExpandedChange);\n  const styles = useStyles(getSegmentStyles);\n  useClickAway(ref, () => {\n    setExpanded(false);\n    onChange(value);\n  });\n\n  if (!expanded) {\n    return /*#__PURE__*/_jsx(Label, {\n      disabled: disabled,\n      Component: Component || /*#__PURE__*/_jsx(InlineLabel, {\n        className: cx(styles.segment, {\n          [styles.queryPlaceholder]: placeholder !== undefined && !value,\n          [styles.disabled]: disabled\n        }, className),\n        children: initialValue || placeholder\n      })\n    });\n  }\n\n  const inputWidthStyle = css`\n    width: ${Math.max(inputWidth + 20, 32)}px;\n  `;\n  return /*#__PURE__*/_jsx(\"input\", Object.assign({}, rest, {\n    ref: ref,\n    autoFocus: true,\n    className: cx(`gf-form gf-form-input`, inputWidthStyle),\n    value: value,\n    placeholder: inputPlaceholder,\n    onChange: item => {\n      const {\n        width\n      } = measureText(item.target.value, FONT_SIZE);\n      setInputWidth(width);\n      setValue(item.target.value);\n    },\n    onBlur: () => {\n      setExpanded(false);\n      onChange(value);\n    },\n    onKeyDown: e => {\n      if ([13, 27].includes(e.keyCode)) {\n        setExpanded(false);\n        onChange(value);\n      }\n    }\n  }));\n}","map":{"version":3,"names":["cx","css","React","useRef","useState","useClickAway","useStyles","measureText","InlineLabel","getSegmentStyles","useExpandableLabel","FONT_SIZE","SegmentInput","value","initialValue","onChange","Component","className","placeholder","inputPlaceholder","disabled","autofocus","onExpandedChange","rest","ref","setValue","inputWidth","setInputWidth","toString","width","Label","expanded","setExpanded","styles","segment","queryPlaceholder","undefined","inputWidthStyle","Math","max","item","target","e","includes","keyCode"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Segment/SegmentInput.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport React, { HTMLProps, useRef, useState } from 'react';\nimport useClickAway from 'react-use/lib/useClickAway';\n\nimport { useStyles } from '../../themes';\nimport { measureText } from '../../utils/measureText';\nimport { InlineLabel } from '../Forms/InlineLabel';\n\nimport { getSegmentStyles } from './styles';\n\nimport { useExpandableLabel, SegmentProps } from '.';\n\nexport interface SegmentInputProps<T> extends SegmentProps<T>, Omit<HTMLProps<HTMLInputElement>, 'value' | 'onChange'> {\n  value: string | number;\n  onChange: (text: string | number) => void;\n}\n\nconst FONT_SIZE = 14;\n\nexport function SegmentInput<T>({\n  value: initialValue,\n  onChange,\n  Component,\n  className,\n  placeholder,\n  inputPlaceholder,\n  disabled,\n  autofocus = false,\n  onExpandedChange,\n  ...rest\n}: React.PropsWithChildren<SegmentInputProps<T>>) {\n  const ref = useRef<HTMLInputElement>(null);\n  const [value, setValue] = useState<number | string>(initialValue);\n  const [inputWidth, setInputWidth] = useState<number>(measureText((initialValue || '').toString(), FONT_SIZE).width);\n  const [Label, , expanded, setExpanded] = useExpandableLabel(autofocus, onExpandedChange);\n  const styles = useStyles(getSegmentStyles);\n\n  useClickAway(ref, () => {\n    setExpanded(false);\n    onChange(value);\n  });\n\n  if (!expanded) {\n    return (\n      <Label\n        disabled={disabled}\n        Component={\n          Component || (\n            <InlineLabel\n              className={cx(\n                styles.segment,\n                {\n                  [styles.queryPlaceholder]: placeholder !== undefined && !value,\n                  [styles.disabled]: disabled,\n                },\n                className\n              )}\n            >\n              {initialValue || placeholder}\n            </InlineLabel>\n          )\n        }\n      />\n    );\n  }\n\n  const inputWidthStyle = css`\n    width: ${Math.max(inputWidth + 20, 32)}px;\n  `;\n\n  return (\n    <input\n      {...rest}\n      ref={ref}\n      autoFocus\n      className={cx(`gf-form gf-form-input`, inputWidthStyle)}\n      value={value}\n      placeholder={inputPlaceholder}\n      onChange={(item) => {\n        const { width } = measureText(item.target.value, FONT_SIZE);\n        setInputWidth(width);\n        setValue(item.target.value);\n      }}\n      onBlur={() => {\n        setExpanded(false);\n        onChange(value);\n      }}\n      onKeyDown={(e) => {\n        if ([13, 27].includes(e.keyCode)) {\n          setExpanded(false);\n          onChange(value);\n        }\n      }}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}