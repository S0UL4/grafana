{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, LegacyForms, DataLinkInput, stylesFactory } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst {\n  FormField,\n  Switch\n} = LegacyForms;\nconst getStyles = stylesFactory(() => ({\n  firstRow: css`\n    display: flex;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  urlField: css`\n    flex: 1;\n  `,\n  urlDisplayLabelField: css`\n    flex: 1;\n  `\n}));\nexport const DataLink = props => {\n  const {\n    value,\n    onChange,\n    onDelete,\n    suggestions,\n    className\n  } = props;\n  const styles = getStyles();\n  const [showInternalLink, setShowInternalLink] = useInternalLink(value.datasourceUid);\n\n  const handleChange = field => event => {\n    onChange(Object.assign({}, value, {\n      [field]: event.currentTarget.value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.firstRow + ' gf-form',\n      children: [/*#__PURE__*/_jsx(FormField, {\n        className: styles.nameField,\n        labelWidth: 6 // A bit of a hack to prevent using default value for the width from FormField\n        ,\n        inputWidth: null,\n        label: \"Field\",\n        type: \"text\",\n        value: value.field,\n        tooltip: 'Can be exact field name or a regex pattern that will match on the field name.',\n        onChange: handleChange('field')\n      }), /*#__PURE__*/_jsx(Button, {\n        variant: 'destructive',\n        title: \"Remove field\",\n        icon: \"times\",\n        onClick: event => {\n          event.preventDefault();\n          onDelete();\n        }\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"gf-form\",\n      children: [/*#__PURE__*/_jsx(FormField, {\n        label: showInternalLink ? 'Query' : 'URL',\n        labelWidth: 6,\n        inputEl: /*#__PURE__*/_jsx(DataLinkInput, {\n          placeholder: showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}',\n          value: value.url || '',\n          onChange: newValue => onChange(Object.assign({}, value, {\n            url: newValue\n          })),\n          suggestions: suggestions\n        }),\n        className: styles.urlField\n      }), /*#__PURE__*/_jsx(FormField, {\n        className: styles.urlDisplayLabelField,\n        inputWidth: null,\n        label: \"URL Label\",\n        type: \"text\",\n        value: value.urlDisplayLabel,\n        onChange: handleChange('urlDisplayLabel'),\n        tooltip: 'Use to override the button label.'\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.row,\n      children: [/*#__PURE__*/_jsx(Switch, {\n        labelClass: 'width-6',\n        label: \"Internal link\",\n        checked: showInternalLink,\n        onChange: () => {\n          if (showInternalLink) {\n            onChange(Object.assign({}, value, {\n              datasourceUid: undefined\n            }));\n          }\n\n          setShowInternalLink(!showInternalLink);\n        }\n      }), showInternalLink && /*#__PURE__*/_jsx(DataSourcePicker, {\n        tracing: true // Uid and value should be always set in the db and so in the items.\n        ,\n        onChange: ds => {\n          onChange(Object.assign({}, value, {\n            datasourceUid: ds.uid\n          }));\n        },\n        current: value.datasourceUid\n      })]\n    })]\n  });\n};\n\nfunction useInternalLink(datasourceUid) {\n  const [showInternalLink, setShowInternalLink] = useState(!!datasourceUid);\n  const previousUid = usePrevious(datasourceUid); // Force internal link visibility change if uid changed outside of this component.\n\n  useEffect(() => {\n    if (!previousUid && datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n\n    if (previousUid && !datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, datasourceUid, showInternalLink]);\n  return [showInternalLink, setShowInternalLink];\n}","map":{"version":3,"names":["css","React","useEffect","useState","usePrevious","DataSourcePicker","Button","LegacyForms","DataLinkInput","stylesFactory","FormField","Switch","getStyles","firstRow","nameField","regexField","row","urlField","urlDisplayLabelField","DataLink","props","value","onChange","onDelete","suggestions","className","styles","showInternalLink","setShowInternalLink","useInternalLink","datasourceUid","handleChange","field","event","currentTarget","preventDefault","url","newValue","urlDisplayLabel","undefined","ds","uid","previousUid"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/configuration/DataLink.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { VariableSuggestion } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, LegacyForms, DataLinkInput, stylesFactory } from '@grafana/ui';\n\nimport { DataLinkConfig } from '../types';\n\nconst { FormField, Switch } = LegacyForms;\n\nconst getStyles = stylesFactory(() => ({\n  firstRow: css`\n    display: flex;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  urlField: css`\n    flex: 1;\n  `,\n  urlDisplayLabelField: css`\n    flex: 1;\n  `,\n}));\n\ntype Props = {\n  value: DataLinkConfig;\n  onChange: (value: DataLinkConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DataLink = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = getStyles();\n  const [showInternalLink, setShowInternalLink] = useInternalLink(value.datasourceUid);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.firstRow + ' gf-form'}>\n        <FormField\n          className={styles.nameField}\n          labelWidth={6}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Field\"\n          type=\"text\"\n          value={value.field}\n          tooltip={'Can be exact field name or a regex pattern that will match on the field name.'}\n          onChange={handleChange('field')}\n        />\n        <Button\n          variant={'destructive'}\n          title=\"Remove field\"\n          icon=\"times\"\n          onClick={(event) => {\n            event.preventDefault();\n            onDelete();\n          }}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <FormField\n          label={showInternalLink ? 'Query' : 'URL'}\n          labelWidth={6}\n          inputEl={\n            <DataLinkInput\n              placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n              value={value.url || ''}\n              onChange={(newValue) =>\n                onChange({\n                  ...value,\n                  url: newValue,\n                })\n              }\n              suggestions={suggestions}\n            />\n          }\n          className={styles.urlField}\n        />\n        <FormField\n          className={styles.urlDisplayLabelField}\n          inputWidth={null}\n          label=\"URL Label\"\n          type=\"text\"\n          value={value.urlDisplayLabel}\n          onChange={handleChange('urlDisplayLabel')}\n          tooltip={'Use to override the button label.'}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <Switch\n          labelClass={'width-6'}\n          label=\"Internal link\"\n          checked={showInternalLink}\n          onChange={() => {\n            if (showInternalLink) {\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n              });\n            }\n            setShowInternalLink(!showInternalLink);\n          }}\n        />\n\n        {showInternalLink && (\n          <DataSourcePicker\n            tracing={true}\n            // Uid and value should be always set in the db and so in the items.\n            onChange={(ds) => {\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n              });\n            }}\n            current={value.datasourceUid}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction useInternalLink(datasourceUid?: string): [boolean, Dispatch<SetStateAction<boolean>>] {\n  const [showInternalLink, setShowInternalLink] = useState<boolean>(!!datasourceUid);\n  const previousUid = usePrevious(datasourceUid);\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, datasourceUid, showInternalLink]);\n\n  return [showInternalLink, setShowInternalLink];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}