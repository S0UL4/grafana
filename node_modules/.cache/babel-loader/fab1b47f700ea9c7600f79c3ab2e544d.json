{"ast":null,"code":"import { backendSrv } from 'app/core/services/backend_srv';\nimport { getNewDashboardModelData, setDashboardToFetchFromLocalStorage } from 'app/features/dashboard/state/initDashboard';\nexport let AddToDashboardError;\n\n(function (AddToDashboardError) {\n  AddToDashboardError[\"FETCH_DASHBOARD\"] = \"fetch-dashboard\";\n  AddToDashboardError[\"SET_DASHBOARD_LS\"] = \"set-dashboard-ls-error\";\n})(AddToDashboardError || (AddToDashboardError = {}));\n\nfunction createDashboard() {\n  const dto = getNewDashboardModelData(); // getNewDashboardModelData adds by default the \"add-panel\" panel. We don't want that.\n\n  dto.dashboard.panels = [];\n  return dto;\n}\n\nexport async function setDashboardInLocalStorage(options) {\n  var _dto$dashboard$panels;\n\n  const panelType = getPanelType(options.queries, options.queryResponse);\n  const panel = {\n    targets: options.queries,\n    type: panelType,\n    title: 'New Panel',\n    gridPos: {\n      x: 0,\n      y: 0,\n      w: 12,\n      h: 8\n    },\n    datasource: options.datasource\n  };\n  let dto;\n\n  if (options.dashboardUid) {\n    try {\n      dto = await backendSrv.getDashboardByUid(options.dashboardUid);\n    } catch (e) {\n      throw AddToDashboardError.FETCH_DASHBOARD;\n    }\n  } else {\n    dto = createDashboard();\n  }\n\n  dto.dashboard.panels = [panel, ...((_dto$dashboard$panels = dto.dashboard.panels) !== null && _dto$dashboard$panels !== void 0 ? _dto$dashboard$panels : [])];\n\n  try {\n    setDashboardToFetchFromLocalStorage(dto);\n  } catch {\n    throw AddToDashboardError.SET_DASHBOARD_LS;\n  }\n}\n\nconst isVisible = query => !query.hide;\n\nconst hasRefId = refId => frame => frame.refId === refId;\n\nfunction getPanelType(queries, queryResponse) {\n  for (const {\n    refId\n  } of queries.filter(isVisible)) {\n    // traceview is not supported in dashboards, skipping it for now.\n    const hasQueryRefId = hasRefId(refId);\n\n    if (queryResponse.graphFrames.some(hasQueryRefId)) {\n      return 'timeseries';\n    }\n\n    if (queryResponse.logsFrames.some(hasQueryRefId)) {\n      return 'logs';\n    }\n\n    if (queryResponse.nodeGraphFrames.some(hasQueryRefId)) {\n      return 'nodeGraph';\n    }\n\n    if (queryResponse.traceFrames.some(hasQueryRefId)) {\n      return 'traces';\n    }\n  } // falling back to table\n\n\n  return 'table';\n}","map":{"version":3,"names":["backendSrv","getNewDashboardModelData","setDashboardToFetchFromLocalStorage","AddToDashboardError","createDashboard","dto","dashboard","panels","setDashboardInLocalStorage","options","panelType","getPanelType","queries","queryResponse","panel","targets","type","title","gridPos","x","y","w","h","datasource","dashboardUid","getDashboardByUid","e","FETCH_DASHBOARD","SET_DASHBOARD_LS","isVisible","query","hide","hasRefId","refId","frame","filter","hasQueryRefId","graphFrames","some","logsFrames","nodeGraphFrames","traceFrames"],"sources":["/home/soula/grafana/public/app/features/explore/AddToDashboard/addToDashboard.ts"],"sourcesContent":["import { DataFrame, DataQuery, DataSourceRef } from '@grafana/data';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport {\n  getNewDashboardModelData,\n  setDashboardToFetchFromLocalStorage,\n} from 'app/features/dashboard/state/initDashboard';\nimport { DashboardDTO, ExplorePanelData } from 'app/types';\n\nexport enum AddToDashboardError {\n  FETCH_DASHBOARD = 'fetch-dashboard',\n  SET_DASHBOARD_LS = 'set-dashboard-ls-error',\n}\n\ninterface AddPanelToDashboardOptions {\n  queries: DataQuery[];\n  queryResponse: ExplorePanelData;\n  datasource?: DataSourceRef;\n  dashboardUid?: string;\n}\n\nfunction createDashboard(): DashboardDTO {\n  const dto = getNewDashboardModelData();\n\n  // getNewDashboardModelData adds by default the \"add-panel\" panel. We don't want that.\n  dto.dashboard.panels = [];\n\n  return dto;\n}\n\nexport async function setDashboardInLocalStorage(options: AddPanelToDashboardOptions) {\n  const panelType = getPanelType(options.queries, options.queryResponse);\n  const panel = {\n    targets: options.queries,\n    type: panelType,\n    title: 'New Panel',\n    gridPos: { x: 0, y: 0, w: 12, h: 8 },\n    datasource: options.datasource,\n  };\n\n  let dto: DashboardDTO;\n\n  if (options.dashboardUid) {\n    try {\n      dto = await backendSrv.getDashboardByUid(options.dashboardUid);\n    } catch (e) {\n      throw AddToDashboardError.FETCH_DASHBOARD;\n    }\n  } else {\n    dto = createDashboard();\n  }\n\n  dto.dashboard.panels = [panel, ...(dto.dashboard.panels ?? [])];\n\n  try {\n    setDashboardToFetchFromLocalStorage(dto);\n  } catch {\n    throw AddToDashboardError.SET_DASHBOARD_LS;\n  }\n}\n\nconst isVisible = (query: DataQuery) => !query.hide;\nconst hasRefId = (refId: DataFrame['refId']) => (frame: DataFrame) => frame.refId === refId;\n\nfunction getPanelType(queries: DataQuery[], queryResponse: ExplorePanelData) {\n  for (const { refId } of queries.filter(isVisible)) {\n    // traceview is not supported in dashboards, skipping it for now.\n    const hasQueryRefId = hasRefId(refId);\n    if (queryResponse.graphFrames.some(hasQueryRefId)) {\n      return 'timeseries';\n    }\n    if (queryResponse.logsFrames.some(hasQueryRefId)) {\n      return 'logs';\n    }\n    if (queryResponse.nodeGraphFrames.some(hasQueryRefId)) {\n      return 'nodeGraph';\n    }\n    if (queryResponse.traceFrames.some(hasQueryRefId)) {\n      return 'traces';\n    }\n  }\n\n  // falling back to table\n  return 'table';\n}\n"],"mappings":"AACA,SAASA,UAAT,QAA2B,+BAA3B;AACA,SACEC,wBADF,EAEEC,mCAFF,QAGO,4CAHP;AAMA,WAAYC,mBAAZ;;WAAYA,mB;EAAAA,mB;EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAYZ,SAASC,eAAT,GAAyC;EACvC,MAAMC,GAAG,GAAGJ,wBAAwB,EAApC,CADuC,CAGvC;;EACAI,GAAG,CAACC,SAAJ,CAAcC,MAAd,GAAuB,EAAvB;EAEA,OAAOF,GAAP;AACD;;AAED,OAAO,eAAeG,0BAAf,CAA0CC,OAA1C,EAA+E;EAAA;;EACpF,MAAMC,SAAS,GAAGC,YAAY,CAACF,OAAO,CAACG,OAAT,EAAkBH,OAAO,CAACI,aAA1B,CAA9B;EACA,MAAMC,KAAK,GAAG;IACZC,OAAO,EAAEN,OAAO,CAACG,OADL;IAEZI,IAAI,EAAEN,SAFM;IAGZO,KAAK,EAAE,WAHK;IAIZC,OAAO,EAAE;MAAEC,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE,CAAX;MAAcC,CAAC,EAAE,EAAjB;MAAqBC,CAAC,EAAE;IAAxB,CAJG;IAKZC,UAAU,EAAEd,OAAO,CAACc;EALR,CAAd;EAQA,IAAIlB,GAAJ;;EAEA,IAAII,OAAO,CAACe,YAAZ,EAA0B;IACxB,IAAI;MACFnB,GAAG,GAAG,MAAML,UAAU,CAACyB,iBAAX,CAA6BhB,OAAO,CAACe,YAArC,CAAZ;IACD,CAFD,CAEE,OAAOE,CAAP,EAAU;MACV,MAAMvB,mBAAmB,CAACwB,eAA1B;IACD;EACF,CAND,MAMO;IACLtB,GAAG,GAAGD,eAAe,EAArB;EACD;;EAEDC,GAAG,CAACC,SAAJ,CAAcC,MAAd,GAAuB,CAACO,KAAD,EAAQ,6BAAIT,GAAG,CAACC,SAAJ,CAAcC,MAAlB,yEAA4B,EAA5B,CAAR,CAAvB;;EAEA,IAAI;IACFL,mCAAmC,CAACG,GAAD,CAAnC;EACD,CAFD,CAEE,MAAM;IACN,MAAMF,mBAAmB,CAACyB,gBAA1B;EACD;AACF;;AAED,MAAMC,SAAS,GAAIC,KAAD,IAAsB,CAACA,KAAK,CAACC,IAA/C;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAgCC,KAAD,IAAsBA,KAAK,CAACD,KAAN,KAAgBA,KAAtF;;AAEA,SAAStB,YAAT,CAAsBC,OAAtB,EAA4CC,aAA5C,EAA6E;EAC3E,KAAK,MAAM;IAAEoB;EAAF,CAAX,IAAwBrB,OAAO,CAACuB,MAAR,CAAeN,SAAf,CAAxB,EAAmD;IACjD;IACA,MAAMO,aAAa,GAAGJ,QAAQ,CAACC,KAAD,CAA9B;;IACA,IAAIpB,aAAa,CAACwB,WAAd,CAA0BC,IAA1B,CAA+BF,aAA/B,CAAJ,EAAmD;MACjD,OAAO,YAAP;IACD;;IACD,IAAIvB,aAAa,CAAC0B,UAAd,CAAyBD,IAAzB,CAA8BF,aAA9B,CAAJ,EAAkD;MAChD,OAAO,MAAP;IACD;;IACD,IAAIvB,aAAa,CAAC2B,eAAd,CAA8BF,IAA9B,CAAmCF,aAAnC,CAAJ,EAAuD;MACrD,OAAO,WAAP;IACD;;IACD,IAAIvB,aAAa,CAAC4B,WAAd,CAA0BH,IAA1B,CAA+BF,aAA/B,CAAJ,EAAmD;MACjD,OAAO,QAAP;IACD;EACF,CAhB0E,CAkB3E;;;EACA,OAAO,OAAP;AACD"},"metadata":{},"sourceType":"module"}