{"ast":null,"code":"var _p;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { AppEvents } from '@grafana/data';\nimport { ClipboardButton, Field, Modal, RadioButtonGroup, Switch, TextArea } from '@grafana/ui';\nimport { appEvents } from 'app/core/core';\nimport { buildIframeHtml } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst themeOptions = [{\n  label: 'Current',\n  value: 'current'\n}, {\n  label: 'Dark',\n  value: 'dark'\n}, {\n  label: 'Light',\n  value: 'light'\n}];\nexport class ShareEmbed extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"buildIframeHtml\", () => {\n      const {\n        panel,\n        dashboard\n      } = this.props;\n      const {\n        useCurrentTimeRange,\n        selectedTheme\n      } = this.state;\n      const iframeHtml = buildIframeHtml(useCurrentTimeRange, dashboard.uid, selectedTheme, panel);\n      this.setState({\n        iframeHtml\n      });\n    });\n\n    _defineProperty(this, \"onIframeHtmlChange\", event => {\n      this.setState({\n        iframeHtml: event.currentTarget.value\n      });\n    });\n\n    _defineProperty(this, \"onUseCurrentTimeRangeChange\", () => {\n      this.setState({\n        useCurrentTimeRange: !this.state.useCurrentTimeRange\n      }, this.buildIframeHtml);\n    });\n\n    _defineProperty(this, \"onThemeChange\", value => {\n      this.setState({\n        selectedTheme: value\n      }, this.buildIframeHtml);\n    });\n\n    _defineProperty(this, \"onIframeHtmlCopy\", () => {\n      appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n    });\n\n    _defineProperty(this, \"getIframeHtml\", () => {\n      return this.state.iframeHtml;\n    });\n\n    this.state = {\n      useCurrentTimeRange: true,\n      selectedTheme: 'current',\n      iframeHtml: ''\n    };\n  }\n\n  componentDidMount() {\n    this.buildIframeHtml();\n  }\n\n  render() {\n    const {\n      useCurrentTimeRange,\n      selectedTheme,\n      iframeHtml\n    } = this.state;\n    const isRelativeTime = this.props.dashboard ? this.props.dashboard.time.to === 'now' : false;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n        className: \"share-modal-info-text\",\n        children: \"Generate HTML for embedding an iframe with this panel.\"\n      })), /*#__PURE__*/_jsx(Field, {\n        label: \"Current time range\",\n        description: isRelativeTime ? 'Transforms the current relative time range to an absolute time range' : '',\n        children: /*#__PURE__*/_jsx(Switch, {\n          id: \"share-current-time-range\",\n          value: useCurrentTimeRange,\n          onChange: this.onUseCurrentTimeRangeChange\n        })\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Theme\",\n        children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n          options: themeOptions,\n          value: selectedTheme,\n          onChange: this.onThemeChange\n        })\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Embed HTML\",\n        description: \"The HTML code below can be pasted and included in another web page. Unless anonymous access is enabled, the user viewing that page need to be signed into Grafana for the graph to load.\",\n        children: /*#__PURE__*/_jsx(TextArea, {\n          \"data-testid\": \"share-embed-html\",\n          id: \"share-panel-embed-embed-html-textarea\",\n          rows: 5,\n          value: iframeHtml,\n          onChange: this.onIframeHtmlChange\n        })\n      }), /*#__PURE__*/_jsx(Modal.ButtonRow, {\n        children: /*#__PURE__*/_jsx(ClipboardButton, {\n          variant: \"primary\",\n          getText: this.getIframeHtml,\n          onClipboardCopy: this.onIframeHtmlCopy,\n          children: \"Copy to clipboard\"\n        })\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","AppEvents","ClipboardButton","Field","Modal","RadioButtonGroup","Switch","TextArea","appEvents","buildIframeHtml","themeOptions","label","value","ShareEmbed","constructor","props","panel","dashboard","useCurrentTimeRange","selectedTheme","state","iframeHtml","uid","setState","event","currentTarget","emit","alertSuccess","componentDidMount","render","isRelativeTime","time","to","onUseCurrentTimeRangeChange","onThemeChange","onIframeHtmlChange","getIframeHtml","onIframeHtmlCopy"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/ShareModal/ShareEmbed.tsx"],"sourcesContent":["import React, { FormEvent, PureComponent } from 'react';\n\nimport { AppEvents, SelectableValue } from '@grafana/data';\nimport { ClipboardButton, Field, Modal, RadioButtonGroup, Switch, TextArea } from '@grafana/ui';\nimport { appEvents } from 'app/core/core';\n\nimport { ShareModalTabProps } from './types';\nimport { buildIframeHtml } from './utils';\n\nconst themeOptions: Array<SelectableValue<string>> = [\n  { label: 'Current', value: 'current' },\n  { label: 'Dark', value: 'dark' },\n  { label: 'Light', value: 'light' },\n];\n\ninterface Props extends ShareModalTabProps {}\n\ninterface State {\n  useCurrentTimeRange: boolean;\n  selectedTheme: string;\n  iframeHtml: string;\n}\n\nexport class ShareEmbed extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      useCurrentTimeRange: true,\n      selectedTheme: 'current',\n      iframeHtml: '',\n    };\n  }\n\n  componentDidMount() {\n    this.buildIframeHtml();\n  }\n\n  buildIframeHtml = () => {\n    const { panel, dashboard } = this.props;\n    const { useCurrentTimeRange, selectedTheme } = this.state;\n\n    const iframeHtml = buildIframeHtml(useCurrentTimeRange, dashboard.uid, selectedTheme, panel);\n    this.setState({ iframeHtml });\n  };\n\n  onIframeHtmlChange = (event: FormEvent<HTMLTextAreaElement>) => {\n    this.setState({ iframeHtml: event.currentTarget.value });\n  };\n\n  onUseCurrentTimeRangeChange = () => {\n    this.setState(\n      {\n        useCurrentTimeRange: !this.state.useCurrentTimeRange,\n      },\n      this.buildIframeHtml\n    );\n  };\n\n  onThemeChange = (value: string) => {\n    this.setState({ selectedTheme: value }, this.buildIframeHtml);\n  };\n\n  onIframeHtmlCopy = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  getIframeHtml = () => {\n    return this.state.iframeHtml;\n  };\n\n  render() {\n    const { useCurrentTimeRange, selectedTheme, iframeHtml } = this.state;\n    const isRelativeTime = this.props.dashboard ? this.props.dashboard.time.to === 'now' : false;\n\n    return (\n      <>\n        <p className=\"share-modal-info-text\">Generate HTML for embedding an iframe with this panel.</p>\n        <Field\n          label=\"Current time range\"\n          description={isRelativeTime ? 'Transforms the current relative time range to an absolute time range' : ''}\n        >\n          <Switch\n            id=\"share-current-time-range\"\n            value={useCurrentTimeRange}\n            onChange={this.onUseCurrentTimeRangeChange}\n          />\n        </Field>\n        <Field label=\"Theme\">\n          <RadioButtonGroup options={themeOptions} value={selectedTheme} onChange={this.onThemeChange} />\n        </Field>\n        <Field\n          label=\"Embed HTML\"\n          description=\"The HTML code below can be pasted and included in another web page. Unless anonymous access is enabled,\n                the user viewing that page need to be signed into Grafana for the graph to load.\"\n        >\n          <TextArea\n            data-testid=\"share-embed-html\"\n            id=\"share-panel-embed-embed-html-textarea\"\n            rows={5}\n            value={iframeHtml}\n            onChange={this.onIframeHtmlChange}\n          />\n        </Field>\n        <Modal.ButtonRow>\n          <ClipboardButton variant=\"primary\" getText={this.getIframeHtml} onClipboardCopy={this.onIframeHtmlCopy}>\n            Copy to clipboard\n          </ClipboardButton>\n        </Modal.ButtonRow>\n      </>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}