{"ast":null,"code":"const _excluded = [\"onClipboardCopy\", \"onClipboardError\", \"children\", \"getText\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback, useRef } from 'react';\nimport { Button } from '../Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function ClipboardButton(_ref) {\n  let {\n    onClipboardCopy,\n    onClipboardError,\n    children,\n    getText\n  } = _ref,\n      buttonProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const buttonRef = useRef(null);\n  const copyTextCallback = useCallback(async () => {\n    const textToCopy = getText();\n\n    try {\n      await copyText(textToCopy, buttonRef);\n      onClipboardCopy === null || onClipboardCopy === void 0 ? void 0 : onClipboardCopy(textToCopy);\n    } catch (e) {\n      onClipboardError === null || onClipboardError === void 0 ? void 0 : onClipboardError(textToCopy, e);\n    }\n  }, [getText, onClipboardCopy, onClipboardError]);\n  return /*#__PURE__*/_jsx(Button, Object.assign({\n    onClick: copyTextCallback\n  }, buttonProps, {\n    ref: buttonRef,\n    children: children\n  }));\n}\n\nconst copyText = async (text, buttonRef) => {\n  if (navigator.clipboard && window.isSecureContext) {\n    return navigator.clipboard.writeText(text);\n  } else {\n    var _buttonRef$current;\n\n    // Use a fallback method for browsers/contexts that don't support the Clipboard API.\n    // See https://web.dev/async-clipboard/#feature-detection.\n    const input = document.createElement('input'); // Normally we'd append this to the body. However if we're inside a focus manager\n    // from react-aria, we can't focus anything outside of the managed area.\n    // Instead, let's append it to the button. Then we're guaranteed to be able to focus + copy.\n\n    (_buttonRef$current = buttonRef.current) === null || _buttonRef$current === void 0 ? void 0 : _buttonRef$current.appendChild(input);\n    input.value = text;\n    input.focus();\n    input.select();\n    document.execCommand('copy');\n    input.remove();\n  }\n};","map":{"version":3,"names":["React","useCallback","useRef","Button","ClipboardButton","onClipboardCopy","onClipboardError","children","getText","buttonProps","buttonRef","copyTextCallback","textToCopy","copyText","e","text","navigator","clipboard","window","isSecureContext","writeText","input","document","createElement","current","appendChild","value","focus","select","execCommand","remove"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/ClipboardButton/ClipboardButton.tsx"],"sourcesContent":["import React, { useCallback, useRef } from 'react';\n\nimport { Button, ButtonProps } from '../Button';\n\nexport interface Props extends ButtonProps {\n  /** A function that returns text to be copied */\n  getText(): string;\n  /** Callback when the text has been successfully copied */\n  onClipboardCopy?(copiedText: string): void;\n  /** Callback when there was an error copying the text */\n  onClipboardError?(copiedText: string, error: unknown): void;\n}\n\nexport function ClipboardButton({ onClipboardCopy, onClipboardError, children, getText, ...buttonProps }: Props) {\n  const buttonRef = useRef<null | HTMLButtonElement>(null);\n  const copyTextCallback = useCallback(async () => {\n    const textToCopy = getText();\n\n    try {\n      await copyText(textToCopy, buttonRef);\n      onClipboardCopy?.(textToCopy);\n    } catch (e) {\n      onClipboardError?.(textToCopy, e);\n    }\n  }, [getText, onClipboardCopy, onClipboardError]);\n\n  return (\n    <Button onClick={copyTextCallback} {...buttonProps} ref={buttonRef}>\n      {children}\n    </Button>\n  );\n}\n\nconst copyText = async (text: string, buttonRef: React.MutableRefObject<HTMLButtonElement | null>) => {\n  if (navigator.clipboard && window.isSecureContext) {\n    return navigator.clipboard.writeText(text);\n  } else {\n    // Use a fallback method for browsers/contexts that don't support the Clipboard API.\n    // See https://web.dev/async-clipboard/#feature-detection.\n    const input = document.createElement('input');\n    // Normally we'd append this to the body. However if we're inside a focus manager\n    // from react-aria, we can't focus anything outside of the managed area.\n    // Instead, let's append it to the button. Then we're guaranteed to be able to focus + copy.\n    buttonRef.current?.appendChild(input);\n    input.value = text;\n    input.focus();\n    input.select();\n    document.execCommand('copy');\n    input.remove();\n  }\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AAEA,SAASC,MAAT,QAAoC,WAApC;;AAWA,OAAO,SAASC,eAAT,OAA0G;EAAA,IAAjF;IAAEC,eAAF;IAAmBC,gBAAnB;IAAqCC,QAArC;IAA+CC;EAA/C,CAAiF;EAAA,IAAtBC,WAAsB;;EAC/G,MAAMC,SAAS,GAAGR,MAAM,CAA2B,IAA3B,CAAxB;EACA,MAAMS,gBAAgB,GAAGV,WAAW,CAAC,YAAY;IAC/C,MAAMW,UAAU,GAAGJ,OAAO,EAA1B;;IAEA,IAAI;MACF,MAAMK,QAAQ,CAACD,UAAD,EAAaF,SAAb,CAAd;MACAL,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAGO,UAAH,CAAf;IACD,CAHD,CAGE,OAAOE,CAAP,EAAU;MACVR,gBAAgB,SAAhB,IAAAA,gBAAgB,WAAhB,YAAAA,gBAAgB,CAAGM,UAAH,EAAeE,CAAf,CAAhB;IACD;EACF,CATmC,EASjC,CAACN,OAAD,EAAUH,eAAV,EAA2BC,gBAA3B,CATiC,CAApC;EAWA,oBACE,KAAC,MAAD;IAAQ,OAAO,EAAEK;EAAjB,GAAuCF,WAAvC;IAAoD,GAAG,EAAEC,SAAzD;IAAA,UACGH;EADH,GADF;AAKD;;AAED,MAAMM,QAAQ,GAAG,OAAOE,IAAP,EAAqBL,SAArB,KAAqF;EACpG,IAAIM,SAAS,CAACC,SAAV,IAAuBC,MAAM,CAACC,eAAlC,EAAmD;IACjD,OAAOH,SAAS,CAACC,SAAV,CAAoBG,SAApB,CAA8BL,IAA9B,CAAP;EACD,CAFD,MAEO;IAAA;;IACL;IACA;IACA,MAAMM,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CAHK,CAIL;IACA;IACA;;IACA,sBAAAb,SAAS,CAACc,OAAV,0EAAmBC,WAAnB,CAA+BJ,KAA/B;IACAA,KAAK,CAACK,KAAN,GAAcX,IAAd;IACAM,KAAK,CAACM,KAAN;IACAN,KAAK,CAACO,MAAN;IACAN,QAAQ,CAACO,WAAT,CAAqB,MAArB;IACAR,KAAK,CAACS,MAAN;EACD;AACF,CAjBD"},"metadata":{},"sourceType":"module"}