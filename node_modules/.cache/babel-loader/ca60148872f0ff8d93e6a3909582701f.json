{"ast":null,"code":"import { positionTooltip } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin';\n// This applies config hooks to setup tooltip listener. Ideally this could happen in the same `prepConfig` function\n// however the GraphNG structures do not allow access to the `setHover` callback\nexport const setupConfig = ({\n  config,\n  onUPlotClick,\n  setFocusedSeriesIdx,\n  setFocusedPointIdx,\n  setCoords,\n  setHover,\n  isToolTipOpen\n}) => {\n  config.addHook('init', u => {\n    var _u$root$parentElement;\n\n    (_u$root$parentElement = u.root.parentElement) === null || _u$root$parentElement === void 0 ? void 0 : _u$root$parentElement.addEventListener('click', onUPlotClick);\n    u.over.addEventListener('mouseleave', () => {\n      if (!isToolTipOpen.current) {\n        setCoords(null);\n      }\n    });\n  });\n  let rect; // rect of .u-over (grid area)\n\n  config.addHook('syncRect', (u, r) => {\n    rect = r;\n  });\n  const tooltipInterpolator = config.getTooltipInterpolator();\n\n  if (tooltipInterpolator) {\n    config.addHook('setCursor', u => {\n      tooltipInterpolator(setFocusedSeriesIdx, setFocusedPointIdx, clear => {\n        if (clear && !isToolTipOpen.current) {\n          setCoords(null);\n          return;\n        }\n\n        if (!rect) {\n          return;\n        }\n\n        const {\n          x,\n          y\n        } = positionTooltip(u, rect);\n\n        if (x !== undefined && y !== undefined && !isToolTipOpen.current) {\n          setCoords({\n            x,\n            y\n          });\n        }\n      }, u);\n    });\n  }\n\n  config.addHook('setLegend', u => {\n    if (!isToolTipOpen.current) {\n      setFocusedPointIdx(u.legend.idx);\n    }\n\n    if (u.cursor.idxs != null) {\n      for (let i = 0; i < u.cursor.idxs.length; i++) {\n        const sel = u.cursor.idxs[i];\n\n        if (sel != null) {\n          const hover = {\n            xIndex: sel,\n            yIndex: 0,\n            pageX: rect.left + u.cursor.left,\n            pageY: rect.top + u.cursor.top\n          };\n\n          if (!isToolTipOpen.current || !hover) {\n            setHover(hover);\n          }\n\n          return; // only show the first one\n        }\n      }\n    }\n  });\n  config.addHook('setSeries', (_, idx) => {\n    if (!isToolTipOpen.current) {\n      setFocusedSeriesIdx(idx);\n    }\n  });\n  return config;\n};","map":{"version":3,"names":["positionTooltip","setupConfig","config","onUPlotClick","setFocusedSeriesIdx","setFocusedPointIdx","setCoords","setHover","isToolTipOpen","addHook","u","root","parentElement","addEventListener","over","current","rect","r","tooltipInterpolator","getTooltipInterpolator","clear","x","y","undefined","legend","idx","cursor","idxs","i","length","sel","hover","xIndex","yIndex","pageX","left","pageY","top","_"],"sources":["/home/soula/grafana/public/app/plugins/panel/barchart/config.ts"],"sourcesContent":["import { Dispatch, MutableRefObject, SetStateAction } from 'react';\n\nimport { CartesianCoords2D } from '@grafana/data';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { positionTooltip } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin';\n\nexport type HoverEvent = {\n  xIndex: number;\n  yIndex: number;\n  pageX: number;\n  pageY: number;\n};\n\ntype SetupConfigParams = {\n  config: UPlotConfigBuilder;\n  onUPlotClick: () => void;\n  setFocusedSeriesIdx: Dispatch<SetStateAction<number | null>>;\n  setFocusedPointIdx: Dispatch<SetStateAction<number | null>>;\n  setCoords: Dispatch<SetStateAction<CartesianCoords2D | null>>;\n  setHover: Dispatch<SetStateAction<HoverEvent | undefined>>;\n  isToolTipOpen: MutableRefObject<boolean>;\n};\n\n// This applies config hooks to setup tooltip listener. Ideally this could happen in the same `prepConfig` function\n// however the GraphNG structures do not allow access to the `setHover` callback\nexport const setupConfig = ({\n  config,\n  onUPlotClick,\n  setFocusedSeriesIdx,\n  setFocusedPointIdx,\n  setCoords,\n  setHover,\n  isToolTipOpen,\n}: SetupConfigParams): UPlotConfigBuilder => {\n  config.addHook('init', (u) => {\n    u.root.parentElement?.addEventListener('click', onUPlotClick);\n    u.over.addEventListener('mouseleave', () => {\n      if (!isToolTipOpen.current) {\n        setCoords(null);\n      }\n    });\n  });\n\n  let rect: DOMRect;\n  // rect of .u-over (grid area)\n  config.addHook('syncRect', (u, r) => {\n    rect = r;\n  });\n\n  const tooltipInterpolator = config.getTooltipInterpolator();\n  if (tooltipInterpolator) {\n    config.addHook('setCursor', (u) => {\n      tooltipInterpolator(\n        setFocusedSeriesIdx,\n        setFocusedPointIdx,\n        (clear) => {\n          if (clear && !isToolTipOpen.current) {\n            setCoords(null);\n            return;\n          }\n\n          if (!rect) {\n            return;\n          }\n\n          const { x, y } = positionTooltip(u, rect);\n          if (x !== undefined && y !== undefined && !isToolTipOpen.current) {\n            setCoords({ x, y });\n          }\n        },\n        u\n      );\n    });\n  }\n\n  config.addHook('setLegend', (u) => {\n    if (!isToolTipOpen.current) {\n      setFocusedPointIdx(u.legend.idx!);\n    }\n    if (u.cursor.idxs != null) {\n      for (let i = 0; i < u.cursor.idxs.length; i++) {\n        const sel = u.cursor.idxs[i];\n        if (sel != null) {\n          const hover: HoverEvent = {\n            xIndex: sel,\n            yIndex: 0,\n            pageX: rect.left + u.cursor.left!,\n            pageY: rect.top + u.cursor.top!,\n          };\n\n          if (!isToolTipOpen.current || !hover) {\n            setHover(hover);\n          }\n\n          return; // only show the first one\n        }\n      }\n    }\n  });\n\n  config.addHook('setSeries', (_, idx) => {\n    if (!isToolTipOpen.current) {\n      setFocusedSeriesIdx(idx);\n    }\n  });\n\n  return config;\n};\n"],"mappings":"AAIA,SAASA,eAAT,QAAgC,wDAAhC;AAmBA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,CAAC;EAC1BC,MAD0B;EAE1BC,YAF0B;EAG1BC,mBAH0B;EAI1BC,kBAJ0B;EAK1BC,SAL0B;EAM1BC,QAN0B;EAO1BC;AAP0B,CAAD,KAQkB;EAC3CN,MAAM,CAACO,OAAP,CAAe,MAAf,EAAwBC,CAAD,IAAO;IAAA;;IAC5B,yBAAAA,CAAC,CAACC,IAAF,CAAOC,aAAP,gFAAsBC,gBAAtB,CAAuC,OAAvC,EAAgDV,YAAhD;IACAO,CAAC,CAACI,IAAF,CAAOD,gBAAP,CAAwB,YAAxB,EAAsC,MAAM;MAC1C,IAAI,CAACL,aAAa,CAACO,OAAnB,EAA4B;QAC1BT,SAAS,CAAC,IAAD,CAAT;MACD;IACF,CAJD;EAKD,CAPD;EASA,IAAIU,IAAJ,CAV2C,CAW3C;;EACAd,MAAM,CAACO,OAAP,CAAe,UAAf,EAA2B,CAACC,CAAD,EAAIO,CAAJ,KAAU;IACnCD,IAAI,GAAGC,CAAP;EACD,CAFD;EAIA,MAAMC,mBAAmB,GAAGhB,MAAM,CAACiB,sBAAP,EAA5B;;EACA,IAAID,mBAAJ,EAAyB;IACvBhB,MAAM,CAACO,OAAP,CAAe,WAAf,EAA6BC,CAAD,IAAO;MACjCQ,mBAAmB,CACjBd,mBADiB,EAEjBC,kBAFiB,EAGhBe,KAAD,IAAW;QACT,IAAIA,KAAK,IAAI,CAACZ,aAAa,CAACO,OAA5B,EAAqC;UACnCT,SAAS,CAAC,IAAD,CAAT;UACA;QACD;;QAED,IAAI,CAACU,IAAL,EAAW;UACT;QACD;;QAED,MAAM;UAAEK,CAAF;UAAKC;QAAL,IAAWtB,eAAe,CAACU,CAAD,EAAIM,IAAJ,CAAhC;;QACA,IAAIK,CAAC,KAAKE,SAAN,IAAmBD,CAAC,KAAKC,SAAzB,IAAsC,CAACf,aAAa,CAACO,OAAzD,EAAkE;UAChET,SAAS,CAAC;YAAEe,CAAF;YAAKC;UAAL,CAAD,CAAT;QACD;MACF,CAjBgB,EAkBjBZ,CAlBiB,CAAnB;IAoBD,CArBD;EAsBD;;EAEDR,MAAM,CAACO,OAAP,CAAe,WAAf,EAA6BC,CAAD,IAAO;IACjC,IAAI,CAACF,aAAa,CAACO,OAAnB,EAA4B;MAC1BV,kBAAkB,CAACK,CAAC,CAACc,MAAF,CAASC,GAAV,CAAlB;IACD;;IACD,IAAIf,CAAC,CAACgB,MAAF,CAASC,IAAT,IAAiB,IAArB,EAA2B;MACzB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,CAAC,CAACgB,MAAF,CAASC,IAAT,CAAcE,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;QAC7C,MAAME,GAAG,GAAGpB,CAAC,CAACgB,MAAF,CAASC,IAAT,CAAcC,CAAd,CAAZ;;QACA,IAAIE,GAAG,IAAI,IAAX,EAAiB;UACf,MAAMC,KAAiB,GAAG;YACxBC,MAAM,EAAEF,GADgB;YAExBG,MAAM,EAAE,CAFgB;YAGxBC,KAAK,EAAElB,IAAI,CAACmB,IAAL,GAAYzB,CAAC,CAACgB,MAAF,CAASS,IAHJ;YAIxBC,KAAK,EAAEpB,IAAI,CAACqB,GAAL,GAAW3B,CAAC,CAACgB,MAAF,CAASW;UAJH,CAA1B;;UAOA,IAAI,CAAC7B,aAAa,CAACO,OAAf,IAA0B,CAACgB,KAA/B,EAAsC;YACpCxB,QAAQ,CAACwB,KAAD,CAAR;UACD;;UAED,OAZe,CAYP;QACT;MACF;IACF;EACF,CAvBD;EAyBA7B,MAAM,CAACO,OAAP,CAAe,WAAf,EAA4B,CAAC6B,CAAD,EAAIb,GAAJ,KAAY;IACtC,IAAI,CAACjB,aAAa,CAACO,OAAnB,EAA4B;MAC1BX,mBAAmB,CAACqB,GAAD,CAAnB;IACD;EACF,CAJD;EAMA,OAAOvB,MAAP;AACD,CAlFM"},"metadata":{},"sourceType":"module"}