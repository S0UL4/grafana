{"ast":null,"code":"import { uniqueId } from 'lodash';\nimport React, { useRef, useState } from 'react';\nimport { InlineField, Input, InlineSwitch, Select } from '@grafana/ui';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { extendedStats } from '../../../../query_def';\nimport { useQuery } from '../../ElasticsearchQueryContext';\nimport { SettingsEditorContainer } from '../../SettingsEditorContainer';\nimport { isMetricAggregationWithInlineScript, isMetricAggregationWithMissingSupport } from '../aggregations';\nimport { changeMetricMeta, changeMetricSetting } from '../state/actions';\nimport { metricAggregationConfig } from '../utils';\nimport { BucketScriptSettingsEditor } from './BucketScriptSettingsEditor';\nimport { MovingAverageSettingsEditor } from './MovingAverageSettingsEditor';\nimport { SettingField } from './SettingField';\nimport { TopMetricsSettingsEditor } from './TopMetricsSettingsEditor';\nimport { useDescription } from './useDescription'; // TODO: Move this somewhere and share it with BucketsAggregation Editor\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst inlineFieldProps = {\n  labelWidth: 16\n};\nexport const SettingsEditor = ({\n  metric,\n  previousMetrics\n}) => {\n  var _metric$settings$size, _metric$settings, _metricAggregationCon, _metric$settings2, _metricAggregationCon3, _metric$settings3, _metric$settings4;\n\n  const {\n    current: baseId\n  } = useRef(uniqueId('es-setting-'));\n  const dispatch = useDispatch();\n  const description = useDescription(metric);\n  const query = useQuery();\n  const rateAggUnitOptions = [{\n    value: 'second',\n    label: 'Second'\n  }, {\n    value: 'minute',\n    label: 'Minute'\n  }, {\n    value: 'hour',\n    label: 'Hour'\n  }, {\n    value: 'day',\n    label: 'Day'\n  }, {\n    value: 'week',\n    label: 'Week'\n  }, {\n    value: 'month',\n    label: 'Month'\n  }, {\n    value: 'quarter',\n    label: 'Quarter'\n  }, {\n    value: 'Year',\n    label: 'Year'\n  }];\n  const rateAggModeOptions = [{\n    value: 'sum',\n    label: 'Sum'\n  }, {\n    value: 'value_count',\n    label: 'Value count'\n  }];\n  return /*#__PURE__*/_jsxs(SettingsEditorContainer, {\n    label: description,\n    hidden: metric.hide,\n    children: [metric.type === 'derivative' && /*#__PURE__*/_jsx(SettingField, {\n      label: \"Unit\",\n      metric: metric,\n      settingName: \"unit\"\n    }), metric.type === 'serial_diff' && /*#__PURE__*/_jsx(SettingField, {\n      label: \"Lag\",\n      metric: metric,\n      settingName: \"lag\",\n      placeholder: \"1\"\n    }), metric.type === 'cumulative_sum' && /*#__PURE__*/_jsx(SettingField, {\n      label: \"Format\",\n      metric: metric,\n      settingName: \"format\"\n    }), metric.type === 'moving_avg' && /*#__PURE__*/_jsx(MovingAverageSettingsEditor, {\n      metric: metric\n    }), metric.type === 'moving_fn' && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(SettingField, {\n        label: \"Window\",\n        metric: metric,\n        settingName: \"window\"\n      }), /*#__PURE__*/_jsx(SettingField, {\n        label: \"Script\",\n        metric: metric,\n        settingName: \"script\"\n      }), /*#__PURE__*/_jsx(SettingField, {\n        label: \"Shift\",\n        metric: metric,\n        settingName: \"shift\"\n      })]\n    }), metric.type === 'top_metrics' && /*#__PURE__*/_jsx(TopMetricsSettingsEditor, {\n      metric: metric\n    }), metric.type === 'bucket_script' && /*#__PURE__*/_jsx(BucketScriptSettingsEditor, {\n      value: metric,\n      previousMetrics: previousMetrics\n    }), (metric.type === 'raw_data' || metric.type === 'raw_document') && /*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Size\"\n    }, inlineFieldProps, {\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `ES-query-${query.refId}_metric-${metric.id}-size`,\n        onBlur: e => dispatch(changeMetricSetting({\n          metric,\n          settingName: 'size',\n          newValue: e.target.value\n        })),\n        defaultValue: (_metric$settings$size = (_metric$settings = metric.settings) === null || _metric$settings === void 0 ? void 0 : _metric$settings.size) !== null && _metric$settings$size !== void 0 ? _metric$settings$size : (_metricAggregationCon = metricAggregationConfig['raw_data'].defaults.settings) === null || _metricAggregationCon === void 0 ? void 0 : _metricAggregationCon.size\n      })\n    })), metric.type === 'logs' && /*#__PURE__*/_jsx(SettingField, {\n      label: \"Limit\",\n      metric: metric,\n      settingName: \"limit\",\n      placeholder: \"500\"\n    }), metric.type === 'cardinality' && /*#__PURE__*/_jsx(SettingField, {\n      label: \"Precision Threshold\",\n      metric: metric,\n      settingName: \"precision_threshold\"\n    }), metric.type === 'extended_stats' && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [extendedStats.map(stat => {\n        var _metric$meta, _metric$meta2, _metricAggregationCon2;\n\n        return /*#__PURE__*/_jsx(ExtendedStatSetting, {\n          stat: stat,\n          onChange: newValue => dispatch(changeMetricMeta({\n            metric,\n            meta: stat.value,\n            newValue\n          })),\n          value: ((_metric$meta = metric.meta) === null || _metric$meta === void 0 ? void 0 : _metric$meta[stat.value]) !== undefined ? !!((_metric$meta2 = metric.meta) !== null && _metric$meta2 !== void 0 && _metric$meta2[stat.value]) : !!((_metricAggregationCon2 = metricAggregationConfig['extended_stats'].defaults.meta) !== null && _metricAggregationCon2 !== void 0 && _metricAggregationCon2[stat.value])\n        }, stat.value);\n      }), /*#__PURE__*/_jsx(SettingField, {\n        label: \"Sigma\",\n        metric: metric,\n        settingName: \"sigma\",\n        placeholder: \"3\"\n      })]\n    }), metric.type === 'percentiles' && /*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Percentiles\"\n    }, inlineFieldProps, {\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `${baseId}-percentiles-percents`,\n        onBlur: e => dispatch(changeMetricSetting({\n          metric,\n          settingName: 'percents',\n          newValue: e.target.value.split(',').filter(Boolean)\n        })),\n        defaultValue: ((_metric$settings2 = metric.settings) === null || _metric$settings2 === void 0 ? void 0 : _metric$settings2.percents) || ((_metricAggregationCon3 = metricAggregationConfig['percentiles'].defaults.settings) === null || _metricAggregationCon3 === void 0 ? void 0 : _metricAggregationCon3.percents),\n        placeholder: \"1,5,25,50,75,95,99\"\n      })\n    })), metric.type === 'rate' && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(InlineField, Object.assign({\n        label: \"Unit\"\n      }, inlineFieldProps, {\n        \"data-testid\": \"unit-select\",\n        children: /*#__PURE__*/_jsx(Select, {\n          id: `ES-query-${query.refId}_metric-${metric.id}-unit`,\n          onChange: e => dispatch(changeMetricSetting({\n            metric,\n            settingName: 'unit',\n            newValue: e.value\n          })),\n          options: rateAggUnitOptions,\n          value: (_metric$settings3 = metric.settings) === null || _metric$settings3 === void 0 ? void 0 : _metric$settings3.unit\n        })\n      })), /*#__PURE__*/_jsx(InlineField, Object.assign({\n        label: \"Mode\"\n      }, inlineFieldProps, {\n        \"data-testid\": \"mode-select\",\n        children: /*#__PURE__*/_jsx(Select, {\n          id: `ES-query-${query.refId}_metric-${metric.id}-mode`,\n          onChange: e => dispatch(changeMetricSetting({\n            metric,\n            settingName: 'mode',\n            newValue: e.value\n          })),\n          options: rateAggModeOptions,\n          value: (_metric$settings4 = metric.settings) === null || _metric$settings4 === void 0 ? void 0 : _metric$settings4.unit\n        })\n      }))]\n    }), isMetricAggregationWithInlineScript(metric) && /*#__PURE__*/_jsx(SettingField, {\n      label: \"Script\",\n      metric: metric,\n      settingName: \"script\",\n      placeholder: \"_value * 1\"\n    }), isMetricAggregationWithMissingSupport(metric) && /*#__PURE__*/_jsx(SettingField, {\n      label: \"Missing\",\n      metric: metric,\n      settingName: \"missing\",\n      tooltip: \"The missing parameter defines how documents that are missing a value should be treated. By default they will be ignored but it is also possible to treat them as if they had a value\"\n    })]\n  });\n};\n\nconst ExtendedStatSetting = ({\n  stat,\n  onChange,\n  value\n}) => {\n  // this is needed for the htmlFor prop in the label so that clicking the label will toggle the switch state.\n  const [id] = useState(uniqueId(`es-field-id-`));\n  return /*#__PURE__*/_createElement(InlineField, Object.assign({\n    label: stat.label\n  }, inlineFieldProps, {\n    key: stat.value\n  }), /*#__PURE__*/_jsx(InlineSwitch, {\n    id: id,\n    onChange: e => onChange(e.target.checked),\n    value: value\n  }));\n};","map":{"version":3,"names":["uniqueId","React","useRef","useState","InlineField","Input","InlineSwitch","Select","useDispatch","extendedStats","useQuery","SettingsEditorContainer","isMetricAggregationWithInlineScript","isMetricAggregationWithMissingSupport","changeMetricMeta","changeMetricSetting","metricAggregationConfig","BucketScriptSettingsEditor","MovingAverageSettingsEditor","SettingField","TopMetricsSettingsEditor","useDescription","inlineFieldProps","labelWidth","SettingsEditor","metric","previousMetrics","current","baseId","dispatch","description","query","rateAggUnitOptions","value","label","rateAggModeOptions","hide","type","refId","id","e","settingName","newValue","target","settings","size","defaults","map","stat","meta","undefined","split","filter","Boolean","percents","unit","ExtendedStatSetting","onChange","checked"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/index.tsx"],"sourcesContent":["import { uniqueId } from 'lodash';\nimport React, { ComponentProps, useRef, useState } from 'react';\n\nimport { InlineField, Input, InlineSwitch, Select } from '@grafana/ui';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { extendedStats } from '../../../../query_def';\nimport { useQuery } from '../../ElasticsearchQueryContext';\nimport { SettingsEditorContainer } from '../../SettingsEditorContainer';\nimport {\n  MetricAggregation,\n  isMetricAggregationWithInlineScript,\n  isMetricAggregationWithMissingSupport,\n  ExtendedStat,\n} from '../aggregations';\nimport { changeMetricMeta, changeMetricSetting } from '../state/actions';\nimport { metricAggregationConfig } from '../utils';\n\nimport { BucketScriptSettingsEditor } from './BucketScriptSettingsEditor';\nimport { MovingAverageSettingsEditor } from './MovingAverageSettingsEditor';\nimport { SettingField } from './SettingField';\nimport { TopMetricsSettingsEditor } from './TopMetricsSettingsEditor';\nimport { useDescription } from './useDescription';\n\n// TODO: Move this somewhere and share it with BucketsAggregation Editor\nconst inlineFieldProps: Partial<ComponentProps<typeof InlineField>> = {\n  labelWidth: 16,\n};\n\ninterface Props {\n  metric: MetricAggregation;\n  previousMetrics: MetricAggregation[];\n}\n\nexport const SettingsEditor = ({ metric, previousMetrics }: Props) => {\n  const { current: baseId } = useRef(uniqueId('es-setting-'));\n\n  const dispatch = useDispatch();\n  const description = useDescription(metric);\n  const query = useQuery();\n\n  const rateAggUnitOptions = [\n    { value: 'second', label: 'Second' },\n    { value: 'minute', label: 'Minute' },\n    { value: 'hour', label: 'Hour' },\n    { value: 'day', label: 'Day' },\n    { value: 'week', label: 'Week' },\n    { value: 'month', label: 'Month' },\n    { value: 'quarter', label: 'Quarter' },\n    { value: 'Year', label: 'Year' },\n  ];\n\n  const rateAggModeOptions = [\n    { value: 'sum', label: 'Sum' },\n    { value: 'value_count', label: 'Value count' },\n  ];\n\n  return (\n    <SettingsEditorContainer label={description} hidden={metric.hide}>\n      {metric.type === 'derivative' && <SettingField label=\"Unit\" metric={metric} settingName=\"unit\" />}\n\n      {metric.type === 'serial_diff' && <SettingField label=\"Lag\" metric={metric} settingName=\"lag\" placeholder=\"1\" />}\n\n      {metric.type === 'cumulative_sum' && <SettingField label=\"Format\" metric={metric} settingName=\"format\" />}\n\n      {metric.type === 'moving_avg' && <MovingAverageSettingsEditor metric={metric} />}\n\n      {metric.type === 'moving_fn' && (\n        <>\n          <SettingField label=\"Window\" metric={metric} settingName=\"window\" />\n          <SettingField label=\"Script\" metric={metric} settingName=\"script\" />\n          <SettingField label=\"Shift\" metric={metric} settingName=\"shift\" />\n        </>\n      )}\n\n      {metric.type === 'top_metrics' && <TopMetricsSettingsEditor metric={metric} />}\n\n      {metric.type === 'bucket_script' && (\n        <BucketScriptSettingsEditor value={metric} previousMetrics={previousMetrics} />\n      )}\n\n      {(metric.type === 'raw_data' || metric.type === 'raw_document') && (\n        <InlineField label=\"Size\" {...inlineFieldProps}>\n          <Input\n            id={`ES-query-${query.refId}_metric-${metric.id}-size`}\n            onBlur={(e) => dispatch(changeMetricSetting({ metric, settingName: 'size', newValue: e.target.value }))}\n            defaultValue={metric.settings?.size ?? metricAggregationConfig['raw_data'].defaults.settings?.size}\n          />\n        </InlineField>\n      )}\n\n      {metric.type === 'logs' && <SettingField label=\"Limit\" metric={metric} settingName=\"limit\" placeholder=\"500\" />}\n\n      {metric.type === 'cardinality' && (\n        <SettingField label=\"Precision Threshold\" metric={metric} settingName=\"precision_threshold\" />\n      )}\n\n      {metric.type === 'extended_stats' && (\n        <>\n          {extendedStats.map((stat) => (\n            <ExtendedStatSetting\n              key={stat.value}\n              stat={stat}\n              onChange={(newValue) => dispatch(changeMetricMeta({ metric, meta: stat.value, newValue }))}\n              value={\n                metric.meta?.[stat.value] !== undefined\n                  ? !!metric.meta?.[stat.value]\n                  : !!metricAggregationConfig['extended_stats'].defaults.meta?.[stat.value]\n              }\n            />\n          ))}\n\n          <SettingField label=\"Sigma\" metric={metric} settingName=\"sigma\" placeholder=\"3\" />\n        </>\n      )}\n\n      {metric.type === 'percentiles' && (\n        <InlineField label=\"Percentiles\" {...inlineFieldProps}>\n          <Input\n            id={`${baseId}-percentiles-percents`}\n            onBlur={(e) =>\n              dispatch(\n                changeMetricSetting({\n                  metric,\n                  settingName: 'percents',\n                  newValue: e.target.value.split(',').filter(Boolean),\n                })\n              )\n            }\n            defaultValue={\n              metric.settings?.percents || metricAggregationConfig['percentiles'].defaults.settings?.percents\n            }\n            placeholder=\"1,5,25,50,75,95,99\"\n          />\n        </InlineField>\n      )}\n\n      {metric.type === 'rate' && (\n        <>\n          <InlineField label=\"Unit\" {...inlineFieldProps} data-testid=\"unit-select\">\n            <Select\n              id={`ES-query-${query.refId}_metric-${metric.id}-unit`}\n              onChange={(e) => dispatch(changeMetricSetting({ metric, settingName: 'unit', newValue: e.value }))}\n              options={rateAggUnitOptions}\n              value={metric.settings?.unit}\n            />\n          </InlineField>\n\n          <InlineField label=\"Mode\" {...inlineFieldProps} data-testid=\"mode-select\">\n            <Select\n              id={`ES-query-${query.refId}_metric-${metric.id}-mode`}\n              onChange={(e) => dispatch(changeMetricSetting({ metric, settingName: 'mode', newValue: e.value }))}\n              options={rateAggModeOptions}\n              value={metric.settings?.unit}\n            />\n          </InlineField>\n        </>\n      )}\n\n      {isMetricAggregationWithInlineScript(metric) && (\n        <SettingField label=\"Script\" metric={metric} settingName=\"script\" placeholder=\"_value * 1\" />\n      )}\n\n      {isMetricAggregationWithMissingSupport(metric) && (\n        <SettingField\n          label=\"Missing\"\n          metric={metric}\n          settingName=\"missing\"\n          tooltip=\"The missing parameter defines how documents that are missing a value should be treated. By default\n            they will be ignored but it is also possible to treat them as if they had a value\"\n        />\n      )}\n    </SettingsEditorContainer>\n  );\n};\n\ninterface ExtendedStatSettingProps {\n  stat: ExtendedStat;\n  onChange: (checked: boolean) => void;\n  value: boolean;\n}\nconst ExtendedStatSetting = ({ stat, onChange, value }: ExtendedStatSettingProps) => {\n  // this is needed for the htmlFor prop in the label so that clicking the label will toggle the switch state.\n  const [id] = useState(uniqueId(`es-field-id-`));\n\n  return (\n    <InlineField label={stat.label} {...inlineFieldProps} key={stat.value}>\n      <InlineSwitch\n        id={id}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChange(e.target.checked)}\n        value={value}\n      />\n    </InlineField>\n  );\n};\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,IAAgCC,MAAhC,EAAwCC,QAAxC,QAAwD,OAAxD;AAEA,SAASC,WAAT,EAAsBC,KAAtB,EAA6BC,YAA7B,EAA2CC,MAA3C,QAAyD,aAAzD;AAEA,SAASC,WAAT,QAA4B,uCAA5B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,uBAAT,QAAwC,+BAAxC;AACA,SAEEC,mCAFF,EAGEC,qCAHF,QAKO,iBALP;AAMA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,kBAAtD;AACA,SAASC,uBAAT,QAAwC,UAAxC;AAEA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,cAAT,QAA+B,kBAA/B,C,CAEA;;;;;;AACA,MAAMC,gBAA6D,GAAG;EACpEC,UAAU,EAAE;AADwD,CAAtE;AASA,OAAO,MAAMC,cAAc,GAAG,CAAC;EAAEC,MAAF;EAAUC;AAAV,CAAD,KAAwC;EAAA;;EACpE,MAAM;IAAEC,OAAO,EAAEC;EAAX,IAAsB1B,MAAM,CAACF,QAAQ,CAAC,aAAD,CAAT,CAAlC;EAEA,MAAM6B,QAAQ,GAAGrB,WAAW,EAA5B;EACA,MAAMsB,WAAW,GAAGT,cAAc,CAACI,MAAD,CAAlC;EACA,MAAMM,KAAK,GAAGrB,QAAQ,EAAtB;EAEA,MAAMsB,kBAAkB,GAAG,CACzB;IAAEC,KAAK,EAAE,QAAT;IAAmBC,KAAK,EAAE;EAA1B,CADyB,EAEzB;IAAED,KAAK,EAAE,QAAT;IAAmBC,KAAK,EAAE;EAA1B,CAFyB,EAGzB;IAAED,KAAK,EAAE,MAAT;IAAiBC,KAAK,EAAE;EAAxB,CAHyB,EAIzB;IAAED,KAAK,EAAE,KAAT;IAAgBC,KAAK,EAAE;EAAvB,CAJyB,EAKzB;IAAED,KAAK,EAAE,MAAT;IAAiBC,KAAK,EAAE;EAAxB,CALyB,EAMzB;IAAED,KAAK,EAAE,OAAT;IAAkBC,KAAK,EAAE;EAAzB,CANyB,EAOzB;IAAED,KAAK,EAAE,SAAT;IAAoBC,KAAK,EAAE;EAA3B,CAPyB,EAQzB;IAAED,KAAK,EAAE,MAAT;IAAiBC,KAAK,EAAE;EAAxB,CARyB,CAA3B;EAWA,MAAMC,kBAAkB,GAAG,CACzB;IAAEF,KAAK,EAAE,KAAT;IAAgBC,KAAK,EAAE;EAAvB,CADyB,EAEzB;IAAED,KAAK,EAAE,aAAT;IAAwBC,KAAK,EAAE;EAA/B,CAFyB,CAA3B;EAKA,oBACE,MAAC,uBAAD;IAAyB,KAAK,EAAEJ,WAAhC;IAA6C,MAAM,EAAEL,MAAM,CAACW,IAA5D;IAAA,WACGX,MAAM,CAACY,IAAP,KAAgB,YAAhB,iBAAgC,KAAC,YAAD;MAAc,KAAK,EAAC,MAApB;MAA2B,MAAM,EAAEZ,MAAnC;MAA2C,WAAW,EAAC;IAAvD,EADnC,EAGGA,MAAM,CAACY,IAAP,KAAgB,aAAhB,iBAAiC,KAAC,YAAD;MAAc,KAAK,EAAC,KAApB;MAA0B,MAAM,EAAEZ,MAAlC;MAA0C,WAAW,EAAC,KAAtD;MAA4D,WAAW,EAAC;IAAxE,EAHpC,EAKGA,MAAM,CAACY,IAAP,KAAgB,gBAAhB,iBAAoC,KAAC,YAAD;MAAc,KAAK,EAAC,QAApB;MAA6B,MAAM,EAAEZ,MAArC;MAA6C,WAAW,EAAC;IAAzD,EALvC,EAOGA,MAAM,CAACY,IAAP,KAAgB,YAAhB,iBAAgC,KAAC,2BAAD;MAA6B,MAAM,EAAEZ;IAArC,EAPnC,EASGA,MAAM,CAACY,IAAP,KAAgB,WAAhB,iBACC;MAAA,wBACE,KAAC,YAAD;QAAc,KAAK,EAAC,QAApB;QAA6B,MAAM,EAAEZ,MAArC;QAA6C,WAAW,EAAC;MAAzD,EADF,eAEE,KAAC,YAAD;QAAc,KAAK,EAAC,QAApB;QAA6B,MAAM,EAAEA,MAArC;QAA6C,WAAW,EAAC;MAAzD,EAFF,eAGE,KAAC,YAAD;QAAc,KAAK,EAAC,OAApB;QAA4B,MAAM,EAAEA,MAApC;QAA4C,WAAW,EAAC;MAAxD,EAHF;IAAA,EAVJ,EAiBGA,MAAM,CAACY,IAAP,KAAgB,aAAhB,iBAAiC,KAAC,wBAAD;MAA0B,MAAM,EAAEZ;IAAlC,EAjBpC,EAmBGA,MAAM,CAACY,IAAP,KAAgB,eAAhB,iBACC,KAAC,0BAAD;MAA4B,KAAK,EAAEZ,MAAnC;MAA2C,eAAe,EAAEC;IAA5D,EApBJ,EAuBG,CAACD,MAAM,CAACY,IAAP,KAAgB,UAAhB,IAA8BZ,MAAM,CAACY,IAAP,KAAgB,cAA/C,kBACC,KAAC,WAAD;MAAa,KAAK,EAAC;IAAnB,GAA8Bf,gBAA9B;MAAA,uBACE,KAAC,KAAD;QACE,EAAE,EAAG,YAAWS,KAAK,CAACO,KAAM,WAAUb,MAAM,CAACc,EAAG,OADlD;QAEE,MAAM,EAAGC,CAAD,IAAOX,QAAQ,CAACd,mBAAmB,CAAC;UAAEU,MAAF;UAAUgB,WAAW,EAAE,MAAvB;UAA+BC,QAAQ,EAAEF,CAAC,CAACG,MAAF,CAASV;QAAlD,CAAD,CAApB,CAFzB;QAGE,YAAY,+CAAER,MAAM,CAACmB,QAAT,qDAAE,iBAAiBC,IAAnB,kGAA2B7B,uBAAuB,CAAC,UAAD,CAAvB,CAAoC8B,QAApC,CAA6CF,QAAxE,0DAA2B,sBAAuDC;MAHhG;IADF,GAxBJ,EAiCGpB,MAAM,CAACY,IAAP,KAAgB,MAAhB,iBAA0B,KAAC,YAAD;MAAc,KAAK,EAAC,OAApB;MAA4B,MAAM,EAAEZ,MAApC;MAA4C,WAAW,EAAC,OAAxD;MAAgE,WAAW,EAAC;IAA5E,EAjC7B,EAmCGA,MAAM,CAACY,IAAP,KAAgB,aAAhB,iBACC,KAAC,YAAD;MAAc,KAAK,EAAC,qBAApB;MAA0C,MAAM,EAAEZ,MAAlD;MAA0D,WAAW,EAAC;IAAtE,EApCJ,EAuCGA,MAAM,CAACY,IAAP,KAAgB,gBAAhB,iBACC;MAAA,WACG5B,aAAa,CAACsC,GAAd,CAAmBC,IAAD;QAAA;;QAAA,oBACjB,KAAC,mBAAD;UAEE,IAAI,EAAEA,IAFR;UAGE,QAAQ,EAAGN,QAAD,IAAcb,QAAQ,CAACf,gBAAgB,CAAC;YAAEW,MAAF;YAAUwB,IAAI,EAAED,IAAI,CAACf,KAArB;YAA4BS;UAA5B,CAAD,CAAjB,CAHlC;UAIE,KAAK,EACH,iBAAAjB,MAAM,CAACwB,IAAP,8DAAcD,IAAI,CAACf,KAAnB,OAA8BiB,SAA9B,GACI,CAAC,mBAACzB,MAAM,CAACwB,IAAR,0CAAC,cAAcD,IAAI,CAACf,KAAnB,CAAD,CADL,GAEI,CAAC,4BAACjB,uBAAuB,CAAC,gBAAD,CAAvB,CAA0C8B,QAA1C,CAAmDG,IAApD,mDAAC,uBAA0DD,IAAI,CAACf,KAA/D,CAAD;QAPT,GACOe,IAAI,CAACf,KADZ,CADiB;MAAA,CAAlB,CADH,eAcE,KAAC,YAAD;QAAc,KAAK,EAAC,OAApB;QAA4B,MAAM,EAAER,MAApC;QAA4C,WAAW,EAAC,OAAxD;QAAgE,WAAW,EAAC;MAA5E,EAdF;IAAA,EAxCJ,EA0DGA,MAAM,CAACY,IAAP,KAAgB,aAAhB,iBACC,KAAC,WAAD;MAAa,KAAK,EAAC;IAAnB,GAAqCf,gBAArC;MAAA,uBACE,KAAC,KAAD;QACE,EAAE,EAAG,GAAEM,MAAO,uBADhB;QAEE,MAAM,EAAGY,CAAD,IACNX,QAAQ,CACNd,mBAAmB,CAAC;UAClBU,MADkB;UAElBgB,WAAW,EAAE,UAFK;UAGlBC,QAAQ,EAAEF,CAAC,CAACG,MAAF,CAASV,KAAT,CAAekB,KAAf,CAAqB,GAArB,EAA0BC,MAA1B,CAAiCC,OAAjC;QAHQ,CAAD,CADb,CAHZ;QAWE,YAAY,EACV,sBAAA5B,MAAM,CAACmB,QAAP,wEAAiBU,QAAjB,gCAA6BtC,uBAAuB,CAAC,aAAD,CAAvB,CAAuC8B,QAAvC,CAAgDF,QAA7E,2DAA6B,uBAA0DU,QAAvF,CAZJ;QAcE,WAAW,EAAC;MAdd;IADF,GA3DJ,EA+EG7B,MAAM,CAACY,IAAP,KAAgB,MAAhB,iBACC;MAAA,wBACE,KAAC,WAAD;QAAa,KAAK,EAAC;MAAnB,GAA8Bf,gBAA9B;QAAgD,eAAY,aAA5D;QAAA,uBACE,KAAC,MAAD;UACE,EAAE,EAAG,YAAWS,KAAK,CAACO,KAAM,WAAUb,MAAM,CAACc,EAAG,OADlD;UAEE,QAAQ,EAAGC,CAAD,IAAOX,QAAQ,CAACd,mBAAmB,CAAC;YAAEU,MAAF;YAAUgB,WAAW,EAAE,MAAvB;YAA+BC,QAAQ,EAAEF,CAAC,CAACP;UAA3C,CAAD,CAApB,CAF3B;UAGE,OAAO,EAAED,kBAHX;UAIE,KAAK,uBAAEP,MAAM,CAACmB,QAAT,sDAAE,kBAAiBW;QAJ1B;MADF,GADF,eAUE,KAAC,WAAD;QAAa,KAAK,EAAC;MAAnB,GAA8BjC,gBAA9B;QAAgD,eAAY,aAA5D;QAAA,uBACE,KAAC,MAAD;UACE,EAAE,EAAG,YAAWS,KAAK,CAACO,KAAM,WAAUb,MAAM,CAACc,EAAG,OADlD;UAEE,QAAQ,EAAGC,CAAD,IAAOX,QAAQ,CAACd,mBAAmB,CAAC;YAAEU,MAAF;YAAUgB,WAAW,EAAE,MAAvB;YAA+BC,QAAQ,EAAEF,CAAC,CAACP;UAA3C,CAAD,CAApB,CAF3B;UAGE,OAAO,EAAEE,kBAHX;UAIE,KAAK,uBAAEV,MAAM,CAACmB,QAAT,sDAAE,kBAAiBW;QAJ1B;MADF,GAVF;IAAA,EAhFJ,EAqGG3C,mCAAmC,CAACa,MAAD,CAAnC,iBACC,KAAC,YAAD;MAAc,KAAK,EAAC,QAApB;MAA6B,MAAM,EAAEA,MAArC;MAA6C,WAAW,EAAC,QAAzD;MAAkE,WAAW,EAAC;IAA9E,EAtGJ,EAyGGZ,qCAAqC,CAACY,MAAD,CAArC,iBACC,KAAC,YAAD;MACE,KAAK,EAAC,SADR;MAEE,MAAM,EAAEA,MAFV;MAGE,WAAW,EAAC,SAHd;MAIE,OAAO,EAAC;IAJV,EA1GJ;EAAA,EADF;AAqHD,CA5IM;;AAmJP,MAAM+B,mBAAmB,GAAG,CAAC;EAAER,IAAF;EAAQS,QAAR;EAAkBxB;AAAlB,CAAD,KAAyD;EACnF;EACA,MAAM,CAACM,EAAD,IAAOpC,QAAQ,CAACH,QAAQ,CAAE,cAAF,CAAT,CAArB;EAEA,oBACE,eAAC,WAAD;IAAa,KAAK,EAAEgD,IAAI,CAACd;EAAzB,GAAoCZ,gBAApC;IAAsD,GAAG,EAAE0B,IAAI,CAACf;EAAhE,iBACE,KAAC,YAAD;IACE,EAAE,EAAEM,EADN;IAEE,QAAQ,EAAGC,CAAD,IAA4CiB,QAAQ,CAACjB,CAAC,CAACG,MAAF,CAASe,OAAV,CAFhE;IAGE,KAAK,EAAEzB;EAHT,EADF,CADF;AASD,CAbD"},"metadata":{},"sourceType":"module"}