{"ast":null,"code":"// Copyright (c) 2014, Hugh Kennedy\n// Based on code from https://github.com/hughsk/flat/blob/master/index.js\n//\nexport default function flatten(target, opts) {\n  opts = opts || {};\n  const delimiter = opts.delimiter || '.';\n  let maxDepth = opts.maxDepth || 3;\n  let currentDepth = 1;\n  const output = {};\n\n  function step(object, prev) {\n    Object.keys(object).forEach(key => {\n      var _opts, _opts2;\n\n      const value = object[key];\n      const isarray = ((_opts = opts) === null || _opts === void 0 ? void 0 : _opts.safe) && Array.isArray(value);\n      const type = Object.prototype.toString.call(value);\n      const isobject = type === '[object Object]';\n      const newKey = prev ? prev + delimiter + key : key;\n\n      if (!((_opts2 = opts) !== null && _opts2 !== void 0 && _opts2.maxDepth)) {\n        maxDepth = currentDepth + 1;\n      }\n\n      if (!isarray && isobject && Object.keys(value).length && currentDepth < maxDepth) {\n        ++currentDepth;\n        return step(value, newKey);\n      }\n\n      output[newKey] = value;\n    });\n  }\n\n  step(target, null);\n  return output;\n}","map":{"version":3,"names":["flatten","target","opts","delimiter","maxDepth","currentDepth","output","step","object","prev","Object","keys","forEach","key","value","isarray","safe","Array","isArray","type","prototype","toString","call","isobject","newKey","length"],"sources":["/home/soula/grafana/public/app/core/utils/flatten.ts"],"sourcesContent":["// Copyright (c) 2014, Hugh Kennedy\n// Based on code from https://github.com/hughsk/flat/blob/master/index.js\n//\nexport default function flatten(target: object, opts?: { delimiter?: any; maxDepth?: any; safe?: any }): any {\n  opts = opts || {};\n\n  const delimiter = opts.delimiter || '.';\n  let maxDepth = opts.maxDepth || 3;\n  let currentDepth = 1;\n  const output: any = {};\n\n  function step(object: any, prev: string | null) {\n    Object.keys(object).forEach((key) => {\n      const value = object[key];\n      const isarray = opts?.safe && Array.isArray(value);\n      const type = Object.prototype.toString.call(value);\n      const isobject = type === '[object Object]';\n\n      const newKey = prev ? prev + delimiter + key : key;\n\n      if (!opts?.maxDepth) {\n        maxDepth = currentDepth + 1;\n      }\n\n      if (!isarray && isobject && Object.keys(value).length && currentDepth < maxDepth) {\n        ++currentDepth;\n        return step(value, newKey);\n      }\n\n      output[newKey] = value;\n    });\n  }\n\n  step(target, null);\n\n  return output;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,eAAe,SAASA,OAAT,CAAiBC,MAAjB,EAAiCC,IAAjC,EAA8F;EAC3GA,IAAI,GAAGA,IAAI,IAAI,EAAf;EAEA,MAAMC,SAAS,GAAGD,IAAI,CAACC,SAAL,IAAkB,GAApC;EACA,IAAIC,QAAQ,GAAGF,IAAI,CAACE,QAAL,IAAiB,CAAhC;EACA,IAAIC,YAAY,GAAG,CAAnB;EACA,MAAMC,MAAW,GAAG,EAApB;;EAEA,SAASC,IAAT,CAAcC,MAAd,EAA2BC,IAA3B,EAAgD;IAC9CC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA6BC,GAAD,IAAS;MAAA;;MACnC,MAAMC,KAAK,GAAGN,MAAM,CAACK,GAAD,CAApB;MACA,MAAME,OAAO,GAAG,UAAAb,IAAI,UAAJ,sCAAMc,IAAN,KAAcC,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAA9B;MACA,MAAMK,IAAI,GAAGT,MAAM,CAACU,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BR,KAA/B,CAAb;MACA,MAAMS,QAAQ,GAAGJ,IAAI,KAAK,iBAA1B;MAEA,MAAMK,MAAM,GAAGf,IAAI,GAAGA,IAAI,GAAGN,SAAP,GAAmBU,GAAtB,GAA4BA,GAA/C;;MAEA,IAAI,YAACX,IAAD,mCAAC,OAAME,QAAP,CAAJ,EAAqB;QACnBA,QAAQ,GAAGC,YAAY,GAAG,CAA1B;MACD;;MAED,IAAI,CAACU,OAAD,IAAYQ,QAAZ,IAAwBb,MAAM,CAACC,IAAP,CAAYG,KAAZ,EAAmBW,MAA3C,IAAqDpB,YAAY,GAAGD,QAAxE,EAAkF;QAChF,EAAEC,YAAF;QACA,OAAOE,IAAI,CAACO,KAAD,EAAQU,MAAR,CAAX;MACD;;MAEDlB,MAAM,CAACkB,MAAD,CAAN,GAAiBV,KAAjB;IACD,CAlBD;EAmBD;;EAEDP,IAAI,CAACN,MAAD,EAAS,IAAT,CAAJ;EAEA,OAAOK,MAAP;AACD"},"metadata":{},"sourceType":"module"}