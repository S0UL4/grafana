{"ast":null,"code":"const _excluded = [\"autoComplete\", \"autoFocus\", \"id\", \"passwordHint\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Input, IconButton } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const PasswordField = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    autoComplete,\n    autoFocus,\n    id,\n    passwordHint\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [showPassword, setShowPassword] = useState(false);\n  return /*#__PURE__*/_jsx(Input, Object.assign({\n    id: id,\n    autoFocus: autoFocus,\n    autoComplete: autoComplete\n  }, props, {\n    type: showPassword ? 'text' : 'password',\n    placeholder: passwordHint,\n    \"aria-label\": selectors.pages.Login.password,\n    ref: ref,\n    suffix: /*#__PURE__*/_jsx(IconButton, {\n      name: showPassword ? 'eye-slash' : 'eye',\n      type: \"button\",\n      \"aria-controls\": id,\n      role: \"switch\",\n      \"aria-checked\": showPassword,\n      \"aria-label\": \"Show password\",\n      onClick: () => {\n        setShowPassword(!showPassword);\n      }\n    })\n  }));\n});\nPasswordField.displayName = 'PasswordField';","map":{"version":3,"names":["React","useState","selectors","Input","IconButton","PasswordField","forwardRef","ref","autoComplete","autoFocus","id","passwordHint","props","showPassword","setShowPassword","pages","Login","password","displayName"],"sources":["/home/soula/grafana/public/app/core/components/PasswordField/PasswordField.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Input, IconButton } from '@grafana/ui';\n\nexport interface Props {\n  autoFocus?: boolean;\n  autoComplete?: string;\n  id?: string;\n  passwordHint?: string;\n}\n\nexport const PasswordField: FC<Props> = React.forwardRef<HTMLInputElement, Props>(\n  ({ autoComplete, autoFocus, id, passwordHint, ...props }, ref) => {\n    const [showPassword, setShowPassword] = useState(false);\n\n    return (\n      <Input\n        id={id}\n        autoFocus={autoFocus}\n        autoComplete={autoComplete}\n        {...props}\n        type={showPassword ? 'text' : 'password'}\n        placeholder={passwordHint}\n        aria-label={selectors.pages.Login.password}\n        ref={ref}\n        suffix={\n          <IconButton\n            name={showPassword ? 'eye-slash' : 'eye'}\n            type=\"button\"\n            aria-controls={id}\n            role=\"switch\"\n            aria-checked={showPassword}\n            aria-label=\"Show password\"\n            onClick={() => {\n              setShowPassword(!showPassword);\n            }}\n          />\n        }\n      />\n    );\n  }\n);\n\nPasswordField.displayName = 'PasswordField';\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,aAAlC;;AASA,OAAO,MAAMC,aAAwB,gBAAGL,KAAK,CAACM,UAAN,CACtC,OAA0DC,GAA1D,KAAkE;EAAA,IAAjE;IAAEC,YAAF;IAAgBC,SAAhB;IAA2BC,EAA3B;IAA+BC;EAA/B,CAAiE;EAAA,IAAjBC,KAAiB;;EAChE,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,KAAD,CAAhD;EAEA,oBACE,KAAC,KAAD;IACE,EAAE,EAAES,EADN;IAEE,SAAS,EAAED,SAFb;IAGE,YAAY,EAAED;EAHhB,GAIMI,KAJN;IAKE,IAAI,EAAEC,YAAY,GAAG,MAAH,GAAY,UALhC;IAME,WAAW,EAAEF,YANf;IAOE,cAAYT,SAAS,CAACa,KAAV,CAAgBC,KAAhB,CAAsBC,QAPpC;IAQE,GAAG,EAAEV,GARP;IASE,MAAM,eACJ,KAAC,UAAD;MACE,IAAI,EAAEM,YAAY,GAAG,WAAH,GAAiB,KADrC;MAEE,IAAI,EAAC,QAFP;MAGE,iBAAeH,EAHjB;MAIE,IAAI,EAAC,QAJP;MAKE,gBAAcG,YALhB;MAME,cAAW,eANb;MAOE,OAAO,EAAE,MAAM;QACbC,eAAe,CAAC,CAACD,YAAF,CAAf;MACD;IATH;EAVJ,GADF;AAyBD,CA7BqC,CAAjC;AAgCPR,aAAa,CAACa,WAAd,GAA4B,eAA5B"},"metadata":{},"sourceType":"module"}