{"ast":null,"code":"var _FlexItem;\n\nimport React, { useCallback, useState } from 'react';\nimport { InlineSelect, FlexItem } from '@grafana/experimental';\nimport { Button, ConfirmModal, RadioButtonGroup } from '@grafana/ui';\nimport { MetricEditorMode, MetricQueryType } from '../../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst metricEditorModes = [{\n  label: 'Metric Search',\n  value: MetricQueryType.Search\n}, {\n  label: 'Metric Query',\n  value: MetricQueryType.Query\n}];\nconst editorModes = [{\n  label: 'Builder',\n  value: MetricEditorMode.Builder\n}, {\n  label: 'Code',\n  value: MetricEditorMode.Code\n}];\n\nconst MetricsQueryHeader = ({\n  query,\n  sqlCodeEditorIsDirty,\n  onChange,\n  onRunQuery\n}) => {\n  const {\n    metricEditorMode,\n    metricQueryType\n  } = query;\n  const [showConfirm, setShowConfirm] = useState(false);\n  const onEditorModeChange = useCallback(newMetricEditorMode => {\n    if (sqlCodeEditorIsDirty && metricQueryType === MetricQueryType.Query && metricEditorMode === MetricEditorMode.Code) {\n      setShowConfirm(true);\n      return;\n    }\n\n    onChange(Object.assign({}, query, {\n      metricEditorMode: newMetricEditorMode\n    }));\n  }, [setShowConfirm, onChange, sqlCodeEditorIsDirty, query, metricEditorMode, metricQueryType]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineSelect, {\n      \"aria-label\": \"Metric editor mode\",\n      value: metricEditorModes.find(m => m.value === metricQueryType),\n      options: metricEditorModes,\n      onChange: ({\n        value\n      }) => {\n        onChange(Object.assign({}, query, {\n          metricQueryType: value\n        }));\n      }\n    }), _FlexItem || (_FlexItem = /*#__PURE__*/_jsx(FlexItem, {\n      grow: 1\n    })), /*#__PURE__*/_jsx(RadioButtonGroup, {\n      options: editorModes,\n      size: \"sm\",\n      value: metricEditorMode,\n      onChange: onEditorModeChange\n    }), query.metricQueryType === MetricQueryType.Query && query.metricEditorMode === MetricEditorMode.Code && /*#__PURE__*/_jsx(Button, {\n      variant: \"secondary\",\n      size: \"sm\",\n      onClick: () => onRunQuery(),\n      children: \"Run query\"\n    }), /*#__PURE__*/_jsx(ConfirmModal, {\n      isOpen: showConfirm,\n      title: \"Are you sure?\",\n      body: \"You will lose manual changes done to the query if you go back to the visual builder.\",\n      confirmText: \"Yes, I am sure.\",\n      dismissText: \"No, continue editing the query manually.\",\n      icon: \"exclamation-triangle\",\n      onConfirm: () => {\n        setShowConfirm(false);\n        onChange(Object.assign({}, query, {\n          metricEditorMode: MetricEditorMode.Builder\n        }));\n      },\n      onDismiss: () => setShowConfirm(false)\n    })]\n  });\n};\n\nexport default MetricsQueryHeader;","map":{"version":3,"names":["React","useCallback","useState","InlineSelect","FlexItem","Button","ConfirmModal","RadioButtonGroup","MetricEditorMode","MetricQueryType","metricEditorModes","label","value","Search","Query","editorModes","Builder","Code","MetricsQueryHeader","query","sqlCodeEditorIsDirty","onChange","onRunQuery","metricEditorMode","metricQueryType","showConfirm","setShowConfirm","onEditorModeChange","newMetricEditorMode","find","m"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/MetricsQueryHeader.tsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineSelect, FlexItem } from '@grafana/experimental';\nimport { Button, ConfirmModal, RadioButtonGroup } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchMetricsQuery, CloudWatchQuery, MetricEditorMode, MetricQueryType } from '../../types';\n\ninterface MetricsQueryHeaderProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (query: CloudWatchQuery) => void;\n  onRunQuery: () => void;\n  sqlCodeEditorIsDirty: boolean;\n}\n\nconst metricEditorModes: Array<SelectableValue<MetricQueryType>> = [\n  { label: 'Metric Search', value: MetricQueryType.Search },\n  { label: 'Metric Query', value: MetricQueryType.Query },\n];\n\nconst editorModes = [\n  { label: 'Builder', value: MetricEditorMode.Builder },\n  { label: 'Code', value: MetricEditorMode.Code },\n];\n\nconst MetricsQueryHeader: React.FC<MetricsQueryHeaderProps> = ({\n  query,\n  sqlCodeEditorIsDirty,\n  onChange,\n  onRunQuery,\n}) => {\n  const { metricEditorMode, metricQueryType } = query;\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: MetricEditorMode) => {\n      if (\n        sqlCodeEditorIsDirty &&\n        metricQueryType === MetricQueryType.Query &&\n        metricEditorMode === MetricEditorMode.Code\n      ) {\n        setShowConfirm(true);\n        return;\n      }\n      onChange({ ...query, metricEditorMode: newMetricEditorMode });\n    },\n    [setShowConfirm, onChange, sqlCodeEditorIsDirty, query, metricEditorMode, metricQueryType]\n  );\n\n  return (\n    <>\n      <InlineSelect\n        aria-label=\"Metric editor mode\"\n        value={metricEditorModes.find((m) => m.value === metricQueryType)}\n        options={metricEditorModes}\n        onChange={({ value }) => {\n          onChange({ ...query, metricQueryType: value });\n        }}\n      />\n      <FlexItem grow={1} />\n\n      <RadioButtonGroup options={editorModes} size=\"sm\" value={metricEditorMode} onChange={onEditorModeChange} />\n\n      {query.metricQueryType === MetricQueryType.Query && query.metricEditorMode === MetricEditorMode.Code && (\n        <Button variant=\"secondary\" size=\"sm\" onClick={() => onRunQuery()}>\n          Run query\n        </Button>\n      )}\n\n      <ConfirmModal\n        isOpen={showConfirm}\n        title=\"Are you sure?\"\n        body=\"You will lose manual changes done to the query if you go back to the visual builder.\"\n        confirmText=\"Yes, I am sure.\"\n        dismissText=\"No, continue editing the query manually.\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          setShowConfirm(false);\n          onChange({ ...query, metricEditorMode: MetricEditorMode.Builder });\n        }}\n        onDismiss={() => setShowConfirm(false)}\n      />\n    </>\n  );\n};\n\nexport default MetricsQueryHeader;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}