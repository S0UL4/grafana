{"ast":null,"code":"var _div, _div2;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getSubMenuVariables, getVariablesState } from '../../../variables/state/selectors';\nimport { Annotations } from './Annotations';\nimport { DashboardLinks } from './DashboardLinks';\nimport { SubMenuItems } from './SubMenuItems';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nclass SubMenuUnConnected extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onAnnotationStateChanged\", updatedAnnotation => {\n      // we're mutating dashboard state directly here until annotations are in Redux.\n      for (let index = 0; index < this.props.dashboard.annotations.list.length; index++) {\n        const annotation = this.props.dashboard.annotations.list[index];\n\n        if (annotation.name === updatedAnnotation.name) {\n          annotation.enable = !annotation.enable;\n          break;\n        }\n      }\n\n      this.props.dashboard.startRefresh();\n      this.forceUpdate();\n    });\n  }\n\n  render() {\n    const {\n      dashboard,\n      variables,\n      links,\n      annotations\n    } = this.props;\n\n    if (!dashboard.isSubMenuVisible()) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"submenu-controls\",\n      children: [/*#__PURE__*/_jsx(\"form\", {\n        \"aria-label\": \"Template variables\",\n        className: styles,\n        children: /*#__PURE__*/_jsx(SubMenuItems, {\n          variables: variables\n        })\n      }), /*#__PURE__*/_jsx(Annotations, {\n        annotations: annotations,\n        onAnnotationChanged: this.onAnnotationStateChanged,\n        events: dashboard.events\n      }), _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form gf-form--grow\"\n      })), dashboard && /*#__PURE__*/_jsx(DashboardLinks, {\n        dashboard: dashboard,\n        links: links\n      }), _div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n        className: \"clearfix\"\n      }))]\n    });\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    uid\n  } = ownProps.dashboard;\n  const templatingState = getVariablesState(uid, state);\n  return {\n    variables: getSubMenuVariables(uid, templatingState.variables)\n  };\n};\n\nconst styles = css`\n  display: flex;\n  flex-wrap: wrap;\n  display: contents;\n`;\nexport const SubMenu = connect(mapStateToProps)(SubMenuUnConnected);\nSubMenu.displayName = 'SubMenu';","map":{"version":3,"names":["css","React","PureComponent","connect","getSubMenuVariables","getVariablesState","Annotations","DashboardLinks","SubMenuItems","SubMenuUnConnected","updatedAnnotation","index","props","dashboard","annotations","list","length","annotation","name","enable","startRefresh","forceUpdate","render","variables","links","isSubMenuVisible","styles","onAnnotationStateChanged","events","mapStateToProps","state","ownProps","uid","templatingState","SubMenu","displayName"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/SubMenu/SubMenu.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\n\nimport { AnnotationQuery } from '@grafana/data';\n\nimport { StoreState } from '../../../../types';\nimport { getSubMenuVariables, getVariablesState } from '../../../variables/state/selectors';\nimport { VariableModel } from '../../../variables/types';\nimport { DashboardModel } from '../../state';\nimport { DashboardLink } from '../../state/DashboardModel';\n\nimport { Annotations } from './Annotations';\nimport { DashboardLinks } from './DashboardLinks';\nimport { SubMenuItems } from './SubMenuItems';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n  annotations: AnnotationQuery[];\n}\n\ninterface ConnectedProps {\n  variables: VariableModel[];\n}\n\ninterface DispatchProps {}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass SubMenuUnConnected extends PureComponent<Props> {\n  onAnnotationStateChanged = (updatedAnnotation: any) => {\n    // we're mutating dashboard state directly here until annotations are in Redux.\n    for (let index = 0; index < this.props.dashboard.annotations.list.length; index++) {\n      const annotation = this.props.dashboard.annotations.list[index];\n      if (annotation.name === updatedAnnotation.name) {\n        annotation.enable = !annotation.enable;\n        break;\n      }\n    }\n    this.props.dashboard.startRefresh();\n    this.forceUpdate();\n  };\n\n  render() {\n    const { dashboard, variables, links, annotations } = this.props;\n\n    if (!dashboard.isSubMenuVisible()) {\n      return null;\n    }\n\n    return (\n      <div className=\"submenu-controls\">\n        <form aria-label=\"Template variables\" className={styles}>\n          <SubMenuItems variables={variables} />\n        </form>\n        <Annotations\n          annotations={annotations}\n          onAnnotationChanged={this.onAnnotationStateChanged}\n          events={dashboard.events}\n        />\n        <div className=\"gf-form gf-form--grow\" />\n        {dashboard && <DashboardLinks dashboard={dashboard} links={links} />}\n        <div className=\"clearfix\" />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, ownProps) => {\n  const { uid } = ownProps.dashboard;\n  const templatingState = getVariablesState(uid, state);\n  return {\n    variables: getSubMenuVariables(uid, templatingState.variables),\n  };\n};\n\nconst styles = css`\n  display: flex;\n  flex-wrap: wrap;\n  display: contents;\n`;\n\nexport const SubMenu = connect(mapStateToProps)(SubMenuUnConnected);\n\nSubMenu.displayName = 'SubMenu';\n"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAyC,aAAzC;AAKA,SAASC,mBAAT,EAA8BC,iBAA9B,QAAuD,oCAAvD;AAKA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;;;;AAgBA,MAAMC,kBAAN,SAAiCP,aAAjC,CAAsD;EAAA;IAAA;;IAAA,kDACxBQ,iBAAD,IAA4B;MACrD;MACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,WAArB,CAAiCC,IAAjC,CAAsCC,MAAlE,EAA0EL,KAAK,EAA/E,EAAmF;QACjF,MAAMM,UAAU,GAAG,KAAKL,KAAL,CAAWC,SAAX,CAAqBC,WAArB,CAAiCC,IAAjC,CAAsCJ,KAAtC,CAAnB;;QACA,IAAIM,UAAU,CAACC,IAAX,KAAoBR,iBAAiB,CAACQ,IAA1C,EAAgD;UAC9CD,UAAU,CAACE,MAAX,GAAoB,CAACF,UAAU,CAACE,MAAhC;UACA;QACD;MACF;;MACD,KAAKP,KAAL,CAAWC,SAAX,CAAqBO,YAArB;MACA,KAAKC,WAAL;IACD,CAZmD;EAAA;;EAcpDC,MAAM,GAAG;IACP,MAAM;MAAET,SAAF;MAAaU,SAAb;MAAwBC,KAAxB;MAA+BV;IAA/B,IAA+C,KAAKF,KAA1D;;IAEA,IAAI,CAACC,SAAS,CAACY,gBAAV,EAAL,EAAmC;MACjC,OAAO,IAAP;IACD;;IAED,oBACE;MAAK,SAAS,EAAC,kBAAf;MAAA,wBACE;QAAM,cAAW,oBAAjB;QAAsC,SAAS,EAAEC,MAAjD;QAAA,uBACE,KAAC,YAAD;UAAc,SAAS,EAAEH;QAAzB;MADF,EADF,eAIE,KAAC,WAAD;QACE,WAAW,EAAET,WADf;QAEE,mBAAmB,EAAE,KAAKa,wBAF5B;QAGE,MAAM,EAAEd,SAAS,CAACe;MAHpB,EAJF,+BASE;QAAK,SAAS,EAAC;MAAf,EATF,GAUGf,SAAS,iBAAI,KAAC,cAAD;QAAgB,SAAS,EAAEA,SAA3B;QAAsC,KAAK,EAAEW;MAA7C,EAVhB,iCAWE;QAAK,SAAS,EAAC;MAAf,EAXF;IAAA,EADF;EAeD;;AApCmD;;AAuCtD,MAAMK,eAAsE,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;EAClG,MAAM;IAAEC;EAAF,IAAUD,QAAQ,CAAClB,SAAzB;EACA,MAAMoB,eAAe,GAAG5B,iBAAiB,CAAC2B,GAAD,EAAMF,KAAN,CAAzC;EACA,OAAO;IACLP,SAAS,EAAEnB,mBAAmB,CAAC4B,GAAD,EAAMC,eAAe,CAACV,SAAtB;EADzB,CAAP;AAGD,CAND;;AAQA,MAAMG,MAAM,GAAG1B,GAAI;AACnB;AACA;AACA;AACA,CAJA;AAMA,OAAO,MAAMkC,OAAO,GAAG/B,OAAO,CAAC0B,eAAD,CAAP,CAAyBpB,kBAAzB,CAAhB;AAEPyB,OAAO,CAACC,WAAR,GAAsB,SAAtB"},"metadata":{},"sourceType":"module"}