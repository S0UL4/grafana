{"ast":null,"code":"var _SilencesFilter, _span, _br, _ActionButton;\n\nimport { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { dateMath } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2, Link, Button } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { SilenceState } from 'app/plugins/datasource/alertmanager/types';\nimport { expireSilenceAction } from '../../state/actions';\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { getSilenceFiltersFromUrlParams, makeAMLink } from '../../utils/misc';\nimport { Authorize } from '../Authorize';\nimport { DynamicTable } from '../DynamicTable';\nimport { ActionButton } from '../rules/ActionButton';\nimport { ActionIcon } from '../rules/ActionIcon';\nimport { Matchers } from './Matchers';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { SilenceDetails } from './SilenceDetails';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { SilencesFilter } from './SilencesFilter';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst SilencesTable = ({\n  silences,\n  alertManagerAlerts,\n  alertManagerSourceName\n}) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n  const filteredSilences = useFilteredSilences(silences);\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n  const {\n    silenceState\n  } = getSilenceFiltersFromUrlParams(queryParams);\n  const showExpiredSilencesBanner = !!filteredSilences.length && (silenceState === undefined || silenceState === SilenceState.Expired);\n  const columns = useColumns(alertManagerSourceName);\n  const items = useMemo(() => {\n    const findSilencedAlerts = id => {\n      return alertManagerAlerts.filter(alert => alert.status.silencedBy.includes(id));\n    };\n\n    return filteredSilences.map(silence => {\n      const silencedAlerts = findSilencedAlerts(silence.id);\n      return {\n        id: silence.id,\n        data: Object.assign({}, silence, {\n          silencedAlerts\n        })\n      };\n    });\n  }, [filteredSilences, alertManagerAlerts]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    \"data-testid\": \"silences-table\",\n    children: [!!silences.length && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_SilencesFilter || (_SilencesFilter = /*#__PURE__*/_jsx(SilencesFilter, {})), /*#__PURE__*/_jsx(Authorize, {\n        actions: [permissions.create],\n        fallback: contextSrv.isEditor,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: styles.topButtonContainer,\n          children: /*#__PURE__*/_jsx(Link, {\n            href: makeAMLink('/alerting/silence/new', alertManagerSourceName),\n            children: /*#__PURE__*/_jsx(Button, {\n              className: styles.addNewSilence,\n              icon: \"plus\",\n              children: \"New Silence\"\n            })\n          })\n        })\n      }), !!items.length ? /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(DynamicTable, {\n          items: items,\n          cols: columns,\n          isExpandable: true,\n          renderExpandedContent: ({\n            data\n          }) => /*#__PURE__*/_jsx(SilenceDetails, {\n            silence: data\n          })\n        }), showExpiredSilencesBanner && /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.callout,\n          children: [/*#__PURE__*/_jsx(Icon, {\n            className: styles.calloutIcon,\n            name: \"info-circle\"\n          }), _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n            children: \"Expired silences are automatically deleted after 5 days.\"\n          }))]\n        })]\n      }) : 'No matching silences found']\n    }), !silences.length && /*#__PURE__*/_jsx(NoSilencesSplash, {\n      alertManagerSourceName: alertManagerSourceName\n    })]\n  });\n};\n\nconst useFilteredSilences = silences => {\n  const [queryParams] = useQueryParams();\n  return useMemo(() => {\n    const {\n      queryString,\n      silenceState\n    } = getSilenceFiltersFromUrlParams(queryParams);\n    const silenceIdsString = queryParams === null || queryParams === void 0 ? void 0 : queryParams.silenceIds;\n    return silences.filter(silence => {\n      if (typeof silenceIdsString === 'string') {\n        const idsIncluded = silenceIdsString.split(',').includes(silence.id);\n\n        if (!idsIncluded) {\n          return false;\n        }\n      }\n\n      if (queryString) {\n        const matchers = parseMatchers(queryString);\n        const matchersMatch = matchers.every(matcher => {\n          var _silence$matchers;\n\n          return (_silence$matchers = silence.matchers) === null || _silence$matchers === void 0 ? void 0 : _silence$matchers.some(({\n            name,\n            value,\n            isEqual,\n            isRegex\n          }) => matcher.name === name && matcher.value === value && matcher.isEqual === isEqual && matcher.isRegex === isRegex);\n        });\n\n        if (!matchersMatch) {\n          return false;\n        }\n      }\n\n      if (silenceState) {\n        const stateMatches = silence.status.state === silenceState;\n\n        if (!stateMatches) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }, [queryParams, silences]);\n};\n\nconst getStyles = theme => ({\n  topButtonContainer: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n  `,\n  addNewSilence: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n  callout: css`\n    background-color: ${theme.colors.background.secondary};\n    border-top: 3px solid ${theme.colors.info.border};\n    border-radius: 2px;\n    height: 62px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n\n    & > * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  calloutIcon: css`\n    color: ${theme.colors.info.text};\n  `,\n  editButton: css`\n    margin-left: ${theme.spacing(0.5)};\n  `\n});\n\nfunction useColumns(alertManagerSourceName) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n  return useMemo(() => {\n    const handleExpireSilenceClick = id => {\n      dispatch(expireSilenceAction(alertManagerSourceName, id));\n    };\n\n    const showActions = contextSrv.hasAccess(permissions.update, contextSrv.isEditor);\n    const columns = [{\n      id: 'state',\n      label: 'State',\n      renderCell: function renderStateTag({\n        data: {\n          status\n        }\n      }) {\n        return /*#__PURE__*/_jsx(SilenceStateTag, {\n          state: status.state\n        });\n      },\n      size: '88px'\n    }, {\n      id: 'matchers',\n      label: 'Matching labels',\n      renderCell: function renderMatchers({\n        data: {\n          matchers\n        }\n      }) {\n        return /*#__PURE__*/_jsx(Matchers, {\n          matchers: matchers || []\n        });\n      },\n      size: 9\n    }, {\n      id: 'alerts',\n      label: 'Alerts',\n      renderCell: function renderSilencedAlerts({\n        data: {\n          silencedAlerts\n        }\n      }) {\n        return /*#__PURE__*/_jsx(\"span\", {\n          \"data-testid\": \"alerts\",\n          children: silencedAlerts.length\n        });\n      },\n      size: 1\n    }, {\n      id: 'schedule',\n      label: 'Schedule',\n      renderCell: function renderSchedule({\n        data: {\n          startsAt,\n          endsAt\n        }\n      }) {\n        const startsAtDate = dateMath.parse(startsAt);\n        const endsAtDate = dateMath.parse(endsAt);\n        const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [' ', startsAtDate === null || startsAtDate === void 0 ? void 0 : startsAtDate.format(dateDisplayFormat), \" \", '-', _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), endsAtDate === null || endsAtDate === void 0 ? void 0 : endsAtDate.format(dateDisplayFormat)]\n        });\n      },\n      size: '150px'\n    }];\n\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({\n          data: silence\n        }) {\n          return /*#__PURE__*/_jsxs(Stack, {\n            gap: 0.5,\n            children: [silence.status.state === 'expired' ? /*#__PURE__*/_jsx(Link, {\n              href: makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName),\n              children: _ActionButton || (_ActionButton = /*#__PURE__*/_jsx(ActionButton, {\n                icon: \"sync\",\n                children: \"Recreate\"\n              }))\n            }) : /*#__PURE__*/_jsx(ActionButton, {\n              icon: \"bell\",\n              onClick: () => handleExpireSilenceClick(silence.id),\n              children: \"Unsilence\"\n            }), silence.status.state !== 'expired' && /*#__PURE__*/_jsx(ActionIcon, {\n              className: styles.editButton,\n              to: makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName),\n              icon: \"pen\",\n              tooltip: \"edit\"\n            })]\n          });\n        },\n        size: '147px'\n      });\n    }\n\n    return columns;\n  }, [alertManagerSourceName, dispatch, styles, permissions]);\n}\n\nexport default SilencesTable;","map":{"version":3,"names":["css","React","useMemo","useDispatch","dateMath","Stack","Icon","useStyles2","Link","Button","useQueryParams","contextSrv","SilenceState","expireSilenceAction","getInstancesPermissions","parseMatchers","getSilenceFiltersFromUrlParams","makeAMLink","Authorize","DynamicTable","ActionButton","ActionIcon","Matchers","NoSilencesSplash","SilenceDetails","SilenceStateTag","SilencesFilter","SilencesTable","silences","alertManagerAlerts","alertManagerSourceName","styles","getStyles","queryParams","filteredSilences","useFilteredSilences","permissions","silenceState","showExpiredSilencesBanner","length","undefined","Expired","columns","useColumns","items","findSilencedAlerts","id","filter","alert","status","silencedBy","includes","map","silence","silencedAlerts","data","create","isEditor","topButtonContainer","addNewSilence","callout","calloutIcon","queryString","silenceIdsString","silenceIds","idsIncluded","split","matchers","matchersMatch","every","matcher","some","name","value","isEqual","isRegex","stateMatches","state","theme","spacing","colors","background","secondary","info","border","text","editButton","dispatch","handleExpireSilenceClick","showActions","hasAccess","update","label","renderCell","renderStateTag","size","renderMatchers","renderSilencedAlerts","renderSchedule","startsAt","endsAt","startsAtDate","parse","endsAtDate","dateDisplayFormat","format","push","renderActions"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/silences/SilencesTable.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2, dateMath } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2, Link, Button } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, Silence, SilenceState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { expireSilenceAction } from '../../state/actions';\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { parseMatchers } from '../../utils/alertmanager';\nimport { getSilenceFiltersFromUrlParams, makeAMLink } from '../../utils/misc';\nimport { Authorize } from '../Authorize';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { ActionButton } from '../rules/ActionButton';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { Matchers } from './Matchers';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { SilenceDetails } from './SilenceDetails';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { SilencesFilter } from './SilencesFilter';\n\nexport interface SilenceTableItem extends Silence {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\ntype SilenceTableColumnProps = DynamicTableColumnProps<SilenceTableItem>;\ntype SilenceTableItemProps = DynamicTableItemProps<SilenceTableItem>;\ninterface Props {\n  silences: Silence[];\n  alertManagerAlerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\nconst SilencesTable: FC<Props> = ({ silences, alertManagerAlerts, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n  const filteredSilences = useFilteredSilences(silences);\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n\n  const { silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n\n  const showExpiredSilencesBanner =\n    !!filteredSilences.length && (silenceState === undefined || silenceState === SilenceState.Expired);\n\n  const columns = useColumns(alertManagerSourceName);\n\n  const items = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilences.map((silence) => {\n      const silencedAlerts = findSilencedAlerts(silence.id);\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilences, alertManagerAlerts]);\n\n  return (\n    <div data-testid=\"silences-table\">\n      {!!silences.length && (\n        <>\n          <SilencesFilter />\n          <Authorize actions={[permissions.create]} fallback={contextSrv.isEditor}>\n            <div className={styles.topButtonContainer}>\n              <Link href={makeAMLink('/alerting/silence/new', alertManagerSourceName)}>\n                <Button className={styles.addNewSilence} icon=\"plus\">\n                  New Silence\n                </Button>\n              </Link>\n            </div>\n          </Authorize>\n          {!!items.length ? (\n            <>\n              <DynamicTable\n                items={items}\n                cols={columns}\n                isExpandable\n                renderExpandedContent={({ data }) => <SilenceDetails silence={data} />}\n              />\n              {showExpiredSilencesBanner && (\n                <div className={styles.callout}>\n                  <Icon className={styles.calloutIcon} name=\"info-circle\" />\n                  <span>Expired silences are automatically deleted after 5 days.</span>\n                </div>\n              )}\n            </>\n          ) : (\n            'No matching silences found'\n          )}\n        </>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </div>\n  );\n};\n\nconst useFilteredSilences = (silences: Silence[]) => {\n  const [queryParams] = useQueryParams();\n  return useMemo(() => {\n    const { queryString, silenceState } = getSilenceFiltersFromUrlParams(queryParams);\n    const silenceIdsString = queryParams?.silenceIds;\n    return silences.filter((silence) => {\n      if (typeof silenceIdsString === 'string') {\n        const idsIncluded = silenceIdsString.split(',').includes(silence.id);\n        if (!idsIncluded) {\n          return false;\n        }\n      }\n      if (queryString) {\n        const matchers = parseMatchers(queryString);\n        const matchersMatch = matchers.every((matcher) =>\n          silence.matchers?.some(\n            ({ name, value, isEqual, isRegex }) =>\n              matcher.name === name &&\n              matcher.value === value &&\n              matcher.isEqual === isEqual &&\n              matcher.isRegex === isRegex\n          )\n        );\n        if (!matchersMatch) {\n          return false;\n        }\n      }\n      if (silenceState) {\n        const stateMatches = silence.status.state === silenceState;\n        if (!stateMatches) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [queryParams, silences]);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  topButtonContainer: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n  `,\n  addNewSilence: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n  callout: css`\n    background-color: ${theme.colors.background.secondary};\n    border-top: 3px solid ${theme.colors.info.border};\n    border-radius: 2px;\n    height: 62px;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-top: ${theme.spacing(2)};\n\n    & > * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  calloutIcon: css`\n    color: ${theme.colors.info.text};\n  `,\n  editButton: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n});\n\nfunction useColumns(alertManagerSourceName: string) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n  return useMemo((): SilenceTableColumnProps[] => {\n    const handleExpireSilenceClick = (id: string) => {\n      dispatch(expireSilenceAction(alertManagerSourceName, id));\n    };\n    const showActions = contextSrv.hasAccess(permissions.update, contextSrv.isEditor);\n    const columns: SilenceTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        renderCell: function renderStateTag({ data: { status } }) {\n          return <SilenceStateTag state={status.state} />;\n        },\n        size: '88px',\n      },\n      {\n        id: 'matchers',\n        label: 'Matching labels',\n        renderCell: function renderMatchers({ data: { matchers } }) {\n          return <Matchers matchers={matchers || []} />;\n        },\n        size: 9,\n      },\n      {\n        id: 'alerts',\n        label: 'Alerts',\n        renderCell: function renderSilencedAlerts({ data: { silencedAlerts } }) {\n          return <span data-testid=\"alerts\">{silencedAlerts.length}</span>;\n        },\n        size: 1,\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        renderCell: function renderSchedule({ data: { startsAt, endsAt } }) {\n          const startsAtDate = dateMath.parse(startsAt);\n          const endsAtDate = dateMath.parse(endsAt);\n          const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n          return (\n            <>\n              {' '}\n              {startsAtDate?.format(dateDisplayFormat)} {'-'}\n              <br />\n              {endsAtDate?.format(dateDisplayFormat)}\n            </>\n          );\n        },\n        size: '150px',\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data: silence }) {\n          return (\n            <Stack gap={0.5}>\n              {silence.status.state === 'expired' ? (\n                <Link href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}>\n                  <ActionButton icon=\"sync\">Recreate</ActionButton>\n                </Link>\n              ) : (\n                <ActionButton icon=\"bell\" onClick={() => handleExpireSilenceClick(silence.id)}>\n                  Unsilence\n                </ActionButton>\n              )}\n              {silence.status.state !== 'expired' && (\n                <ActionIcon\n                  className={styles.editButton}\n                  to={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                  icon=\"pen\"\n                  tooltip=\"edit\"\n                />\n              )}\n            </Stack>\n          );\n        },\n        size: '147px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, dispatch, styles, permissions]);\n}\n\nexport default SilencesTable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}