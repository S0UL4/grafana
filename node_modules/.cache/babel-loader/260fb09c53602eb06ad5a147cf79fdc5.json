{"ast":null,"code":"import { chain } from 'lodash';\nimport { stringToJsRegex } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { getDatasourceSrv } from '../../plugins/datasource_srv';\nimport { changeVariableEditorExtended } from '../editor/reducer';\nimport { validateVariableSelectionState } from '../state/actions';\nimport { toKeyedAction } from '../state/keyedVariablesReducer';\nimport { getVariable } from '../state/selectors';\nimport { toVariablePayload } from '../utils';\nimport { createDataSourceOptions } from './reducer';\nexport const updateDataSourceVariableOptions = (identifier, dependencies = {\n  getDatasourceSrv: getDatasourceSrv\n}) => async (dispatch, getState) => {\n  const {\n    rootStateKey\n  } = identifier;\n  const sources = dependencies.getDatasourceSrv().getList({\n    metrics: true,\n    variables: false\n  });\n  const variableInState = getVariable(identifier, getState());\n  let regex;\n\n  if (variableInState.regex) {\n    regex = getTemplateSrv().replace(variableInState.regex, undefined, 'regex');\n    regex = stringToJsRegex(regex);\n  }\n\n  dispatch(toKeyedAction(rootStateKey, createDataSourceOptions(toVariablePayload(identifier, {\n    sources,\n    regex\n  }))));\n  await dispatch(validateVariableSelectionState(identifier));\n};\nexport const initDataSourceVariableEditor = (key, dependencies = {\n  getDatasourceSrv: getDatasourceSrv\n}) => dispatch => {\n  const dataSources = dependencies.getDatasourceSrv().getList({\n    metrics: true,\n    variables: true\n  });\n  const dataSourceTypes = chain(dataSources).uniqBy('meta.id').map(ds => {\n    return {\n      text: ds.meta.name,\n      value: ds.meta.id\n    };\n  }).value();\n  dataSourceTypes.unshift({\n    text: '',\n    value: ''\n  });\n  dispatch(toKeyedAction(key, changeVariableEditorExtended({\n    dataSourceTypes\n  })));\n};","map":{"version":3,"names":["chain","stringToJsRegex","getTemplateSrv","getDatasourceSrv","changeVariableEditorExtended","validateVariableSelectionState","toKeyedAction","getVariable","toVariablePayload","createDataSourceOptions","updateDataSourceVariableOptions","identifier","dependencies","dispatch","getState","rootStateKey","sources","getList","metrics","variables","variableInState","regex","replace","undefined","initDataSourceVariableEditor","key","dataSources","dataSourceTypes","uniqBy","map","ds","text","meta","name","value","id","unshift"],"sources":["/home/soula/grafana/public/app/features/variables/datasource/actions.ts"],"sourcesContent":["import { chain } from 'lodash';\n\nimport { stringToJsRegex } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { ThunkResult } from '../../../types';\nimport { getDatasourceSrv } from '../../plugins/datasource_srv';\nimport { changeVariableEditorExtended } from '../editor/reducer';\nimport { validateVariableSelectionState } from '../state/actions';\nimport { toKeyedAction } from '../state/keyedVariablesReducer';\nimport { getVariable } from '../state/selectors';\nimport { KeyedVariableIdentifier } from '../state/types';\nimport { DataSourceVariableModel } from '../types';\nimport { toVariablePayload } from '../utils';\n\nimport { createDataSourceOptions } from './reducer';\n\nexport interface DataSourceVariableActionDependencies {\n  getDatasourceSrv: typeof getDatasourceSrv;\n}\n\nexport const updateDataSourceVariableOptions =\n  (\n    identifier: KeyedVariableIdentifier,\n    dependencies: DataSourceVariableActionDependencies = { getDatasourceSrv: getDatasourceSrv }\n  ): ThunkResult<void> =>\n  async (dispatch, getState) => {\n    const { rootStateKey } = identifier;\n    const sources = dependencies.getDatasourceSrv().getList({ metrics: true, variables: false });\n    const variableInState = getVariable<DataSourceVariableModel>(identifier, getState());\n    let regex;\n\n    if (variableInState.regex) {\n      regex = getTemplateSrv().replace(variableInState.regex, undefined, 'regex');\n      regex = stringToJsRegex(regex);\n    }\n\n    dispatch(toKeyedAction(rootStateKey, createDataSourceOptions(toVariablePayload(identifier, { sources, regex }))));\n    await dispatch(validateVariableSelectionState(identifier));\n  };\n\nexport const initDataSourceVariableEditor =\n  (\n    key: string,\n    dependencies: DataSourceVariableActionDependencies = { getDatasourceSrv: getDatasourceSrv }\n  ): ThunkResult<void> =>\n  (dispatch) => {\n    const dataSources = dependencies.getDatasourceSrv().getList({ metrics: true, variables: true });\n    const dataSourceTypes = chain(dataSources)\n      .uniqBy('meta.id')\n      .map((ds: any) => {\n        return { text: ds.meta.name, value: ds.meta.id };\n      })\n      .value();\n\n    dataSourceTypes.unshift({ text: '', value: '' });\n\n    dispatch(toKeyedAction(key, changeVariableEditorExtended({ dataSourceTypes })));\n  };\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,QAAtB;AAEA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,4BAAT,QAA6C,mBAA7C;AACA,SAASC,8BAAT,QAA+C,kBAA/C;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AAGA,SAASC,iBAAT,QAAkC,UAAlC;AAEA,SAASC,uBAAT,QAAwC,WAAxC;AAMA,OAAO,MAAMC,+BAA+B,GAC1C,CACEC,UADF,EAEEC,YAAkD,GAAG;EAAET,gBAAgB,EAAEA;AAApB,CAFvD,KAIA,OAAOU,QAAP,EAAiBC,QAAjB,KAA8B;EAC5B,MAAM;IAAEC;EAAF,IAAmBJ,UAAzB;EACA,MAAMK,OAAO,GAAGJ,YAAY,CAACT,gBAAb,GAAgCc,OAAhC,CAAwC;IAAEC,OAAO,EAAE,IAAX;IAAiBC,SAAS,EAAE;EAA5B,CAAxC,CAAhB;EACA,MAAMC,eAAe,GAAGb,WAAW,CAA0BI,UAA1B,EAAsCG,QAAQ,EAA9C,CAAnC;EACA,IAAIO,KAAJ;;EAEA,IAAID,eAAe,CAACC,KAApB,EAA2B;IACzBA,KAAK,GAAGnB,cAAc,GAAGoB,OAAjB,CAAyBF,eAAe,CAACC,KAAzC,EAAgDE,SAAhD,EAA2D,OAA3D,CAAR;IACAF,KAAK,GAAGpB,eAAe,CAACoB,KAAD,CAAvB;EACD;;EAEDR,QAAQ,CAACP,aAAa,CAACS,YAAD,EAAeN,uBAAuB,CAACD,iBAAiB,CAACG,UAAD,EAAa;IAAEK,OAAF;IAAWK;EAAX,CAAb,CAAlB,CAAtC,CAAd,CAAR;EACA,MAAMR,QAAQ,CAACR,8BAA8B,CAACM,UAAD,CAA/B,CAAd;AACD,CAlBI;AAoBP,OAAO,MAAMa,4BAA4B,GACvC,CACEC,GADF,EAEEb,YAAkD,GAAG;EAAET,gBAAgB,EAAEA;AAApB,CAFvD,KAICU,QAAD,IAAc;EACZ,MAAMa,WAAW,GAAGd,YAAY,CAACT,gBAAb,GAAgCc,OAAhC,CAAwC;IAAEC,OAAO,EAAE,IAAX;IAAiBC,SAAS,EAAE;EAA5B,CAAxC,CAApB;EACA,MAAMQ,eAAe,GAAG3B,KAAK,CAAC0B,WAAD,CAAL,CACrBE,MADqB,CACd,SADc,EAErBC,GAFqB,CAEhBC,EAAD,IAAa;IAChB,OAAO;MAAEC,IAAI,EAAED,EAAE,CAACE,IAAH,CAAQC,IAAhB;MAAsBC,KAAK,EAAEJ,EAAE,CAACE,IAAH,CAAQG;IAArC,CAAP;EACD,CAJqB,EAKrBD,KALqB,EAAxB;EAOAP,eAAe,CAACS,OAAhB,CAAwB;IAAEL,IAAI,EAAE,EAAR;IAAYG,KAAK,EAAE;EAAnB,CAAxB;EAEArB,QAAQ,CAACP,aAAa,CAACmB,GAAD,EAAMrB,4BAA4B,CAAC;IAAEuB;EAAF,CAAD,CAAlC,CAAd,CAAR;AACD,CAjBI"},"metadata":{},"sourceType":"module"}