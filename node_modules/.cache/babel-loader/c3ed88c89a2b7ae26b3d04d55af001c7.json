{"ast":null,"code":"var _InlineFormLabel, _div, _div2, _InlineFormLabel2, _InlineFormLabel3, _div3, _div4, _InlineFormLabel4, _span;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { rangeUtil } from '@grafana/data';\nimport { Switch, Input, InlineField, InlineFormLabel, stylesFactory } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { config } from 'app/core/config';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport class QueryGroupOptionsEditor extends PureComponent {\n  constructor(props) {\n    var _options$timeRange6, _options$timeRange7, _options$timeRange$hi, _options$timeRange8;\n\n    super(props);\n\n    _defineProperty(this, \"onRelativeTimeChange\", event => {\n      this.setState({\n        timeRangeFrom: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onTimeShiftChange\", event => {\n      this.setState({\n        timeRangeShift: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onOverrideTime\", event => {\n      var _options$timeRange;\n\n      const {\n        options,\n        onChange\n      } = this.props;\n      const newValue = emptyToNull(event.target.value);\n      const isValid = timeRangeValidation(newValue);\n\n      if (isValid && ((_options$timeRange = options.timeRange) === null || _options$timeRange === void 0 ? void 0 : _options$timeRange.from) !== newValue) {\n        var _options$timeRange2;\n\n        onChange(Object.assign({}, options, {\n          timeRange: Object.assign({}, (_options$timeRange2 = options.timeRange) !== null && _options$timeRange2 !== void 0 ? _options$timeRange2 : {}, {\n            from: newValue\n          })\n        }));\n      }\n\n      this.setState({\n        relativeTimeIsValid: isValid\n      });\n    });\n\n    _defineProperty(this, \"onTimeShift\", event => {\n      var _options$timeRange3;\n\n      const {\n        options,\n        onChange\n      } = this.props;\n      const newValue = emptyToNull(event.target.value);\n      const isValid = timeRangeValidation(newValue);\n\n      if (isValid && ((_options$timeRange3 = options.timeRange) === null || _options$timeRange3 === void 0 ? void 0 : _options$timeRange3.shift) !== newValue) {\n        var _options$timeRange4;\n\n        onChange(Object.assign({}, options, {\n          timeRange: Object.assign({}, (_options$timeRange4 = options.timeRange) !== null && _options$timeRange4 !== void 0 ? _options$timeRange4 : {}, {\n            shift: newValue\n          })\n        }));\n      }\n\n      this.setState({\n        timeShiftIsValid: isValid\n      });\n    });\n\n    _defineProperty(this, \"onToggleTimeOverride\", () => {\n      const {\n        onChange,\n        options\n      } = this.props;\n      this.setState({\n        timeRangeHide: !this.state.timeRangeHide\n      }, () => {\n        var _options$timeRange5;\n\n        onChange(Object.assign({}, options, {\n          timeRange: Object.assign({}, (_options$timeRange5 = options.timeRange) !== null && _options$timeRange5 !== void 0 ? _options$timeRange5 : {}, {\n            hide: this.state.timeRangeHide\n          })\n        }));\n      });\n    });\n\n    _defineProperty(this, \"onCacheTimeoutBlur\", event => {\n      const {\n        options,\n        onChange\n      } = this.props;\n      onChange(Object.assign({}, options, {\n        cacheTimeout: emptyToNull(event.target.value)\n      }));\n    });\n\n    _defineProperty(this, \"onMaxDataPointsBlur\", event => {\n      const {\n        options,\n        onChange\n      } = this.props;\n      let maxDataPoints = parseInt(event.target.value, 10);\n\n      if (isNaN(maxDataPoints) || maxDataPoints === 0) {\n        maxDataPoints = null;\n      }\n\n      if (maxDataPoints !== options.maxDataPoints) {\n        onChange(Object.assign({}, options, {\n          maxDataPoints\n        }));\n      }\n    });\n\n    _defineProperty(this, \"onMinIntervalBlur\", event => {\n      const {\n        options,\n        onChange\n      } = this.props;\n      const minInterval = emptyToNull(event.target.value);\n\n      if (minInterval !== options.minInterval) {\n        onChange(Object.assign({}, options, {\n          minInterval\n        }));\n      }\n    });\n\n    _defineProperty(this, \"onOpenOptions\", () => {\n      this.setState({\n        isOpen: true\n      });\n    });\n\n    _defineProperty(this, \"onCloseOptions\", () => {\n      this.setState({\n        isOpen: false\n      });\n    });\n\n    const {\n      options: _options\n    } = props;\n    this.state = {\n      timeRangeFrom: ((_options$timeRange6 = _options.timeRange) === null || _options$timeRange6 === void 0 ? void 0 : _options$timeRange6.from) || '',\n      timeRangeShift: ((_options$timeRange7 = _options.timeRange) === null || _options$timeRange7 === void 0 ? void 0 : _options$timeRange7.shift) || '',\n      timeRangeHide: (_options$timeRange$hi = (_options$timeRange8 = _options.timeRange) === null || _options$timeRange8 === void 0 ? void 0 : _options$timeRange8.hide) !== null && _options$timeRange$hi !== void 0 ? _options$timeRange$hi : false,\n      isOpen: false,\n      relativeTimeIsValid: true,\n      timeShiftIsValid: true\n    };\n  }\n\n  renderCacheTimeoutOption() {\n    var _dataSource$meta$quer, _options$cacheTimeout;\n\n    const {\n      dataSource,\n      options\n    } = this.props;\n    const tooltip = `If your time series store has a query cache this option can override the default cache timeout. Specify a\n    numeric value in seconds.`;\n\n    if (!((_dataSource$meta$quer = dataSource.meta.queryOptions) !== null && _dataSource$meta$quer !== void 0 && _dataSource$meta$quer.cacheTimeout)) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-inline\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form\",\n        children: [/*#__PURE__*/_jsx(InlineFormLabel, {\n          width: 9,\n          tooltip: tooltip,\n          children: \"Cache timeout\"\n        }), /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          className: \"width-6\",\n          placeholder: \"60\",\n          spellCheck: false,\n          onBlur: this.onCacheTimeoutBlur,\n          defaultValue: (_options$cacheTimeout = options.cacheTimeout) !== null && _options$cacheTimeout !== void 0 ? _options$cacheTimeout : ''\n        })]\n      })\n    });\n  }\n\n  renderMaxDataPointsOption() {\n    var _data$request, _options$maxDataPoint;\n\n    const {\n      data,\n      options\n    } = this.props;\n    const realMd = (_data$request = data.request) === null || _data$request === void 0 ? void 0 : _data$request.maxDataPoints;\n    const value = (_options$maxDataPoint = options.maxDataPoints) !== null && _options$maxDataPoint !== void 0 ? _options$maxDataPoint : '';\n    const isAuto = value === '';\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-inline\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form\",\n        children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/_jsx(InlineFormLabel, {\n          width: 9,\n          tooltip: /*#__PURE__*/_jsx(_Fragment, {\n            children: \"The maximum data points per series. Used directly by some data sources and used in calculation of auto interval. With streaming data this value is used for the rolling buffer.\"\n          }),\n          children: \"Max data points\"\n        })), /*#__PURE__*/_jsx(Input, {\n          type: \"number\",\n          className: \"width-6\",\n          placeholder: `${realMd}`,\n          spellCheck: false,\n          onBlur: this.onMaxDataPointsBlur,\n          defaultValue: value\n        }), isAuto && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label query-segment-operator\",\n            children: \"=\"\n          })), _div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label\",\n            children: \"Width of panel\"\n          }))]\n        })]\n      })\n    });\n  }\n\n  renderIntervalOption() {\n    var _data$request2, _dataSource$interval, _options$minInterval;\n\n    const {\n      data,\n      dataSource,\n      options\n    } = this.props;\n    const realInterval = (_data$request2 = data.request) === null || _data$request2 === void 0 ? void 0 : _data$request2.interval;\n    const minIntervalOnDs = (_dataSource$interval = dataSource.interval) !== null && _dataSource$interval !== void 0 ? _dataSource$interval : 'No limit';\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_InlineFormLabel2 || (_InlineFormLabel2 = /*#__PURE__*/_jsx(InlineFormLabel, {\n            width: 9,\n            tooltip: /*#__PURE__*/_jsxs(_Fragment, {\n              children: [\"A lower limit for the interval. Recommended to be set to write frequency, for example \", /*#__PURE__*/_jsx(\"code\", {\n                children: \"1m\"\n              }), ' ', \"if your data is written every minute. Default value can be set in data source settings for most data sources.\"]\n            }),\n            children: \"Min interval\"\n          })), /*#__PURE__*/_jsx(Input, {\n            type: \"text\",\n            className: \"width-6\",\n            placeholder: `${minIntervalOnDs}`,\n            spellCheck: false,\n            onBlur: this.onMinIntervalBlur,\n            defaultValue: (_options$minInterval = options.minInterval) !== null && _options$minInterval !== void 0 ? _options$minInterval : ''\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_InlineFormLabel3 || (_InlineFormLabel3 = /*#__PURE__*/_jsx(InlineFormLabel, {\n            width: 9,\n            tooltip: /*#__PURE__*/_jsxs(_Fragment, {\n              children: [\"The evaluated interval that is sent to data source and is used in \", /*#__PURE__*/_jsx(\"code\", {\n                children: \"$__interval\"\n              }), \" and\", ' ', /*#__PURE__*/_jsx(\"code\", {\n                children: \"$__interval_ms\"\n              })]\n            }),\n            children: \"Interval\"\n          })), /*#__PURE__*/_jsx(InlineFormLabel, {\n            width: 6,\n            children: realInterval\n          }), _div3 || (_div3 = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label query-segment-operator\",\n            children: \"=\"\n          })), _div4 || (_div4 = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label\",\n            children: \"Time range / max data points\"\n          }))]\n        })\n      })]\n    });\n  }\n\n  renderCollapsedText(styles) {\n    var _options$maxDataPoint2;\n\n    const {\n      data,\n      options\n    } = this.props;\n    const {\n      isOpen\n    } = this.state;\n\n    if (isOpen) {\n      return undefined;\n    }\n\n    let mdDesc = (_options$maxDataPoint2 = options.maxDataPoints) !== null && _options$maxDataPoint2 !== void 0 ? _options$maxDataPoint2 : '';\n\n    if (mdDesc === '' && data.request) {\n      mdDesc = `auto = ${data.request.maxDataPoints}`;\n    }\n\n    let intervalDesc = options.minInterval;\n\n    if (data.request) {\n      intervalDesc = `${data.request.interval}`;\n    }\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.collapsedText,\n        children: [\"MD = \", mdDesc]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.collapsedText,\n        children: [\"Interval = \", intervalDesc]\n      })]\n    });\n  }\n\n  render() {\n    const {\n      timeRangeHide: hideTimeOverride,\n      relativeTimeIsValid,\n      timeShiftIsValid\n    } = this.state;\n    const {\n      timeRangeFrom: relativeTime,\n      timeRangeShift: timeShift,\n      isOpen\n    } = this.state;\n    const styles = getStyles();\n    return /*#__PURE__*/_jsxs(QueryOperationRow, {\n      id: \"Query options\",\n      index: 0,\n      title: \"Query options\",\n      headerElement: this.renderCollapsedText(styles),\n      isOpen: isOpen,\n      onOpen: this.onOpenOptions,\n      onClose: this.onCloseOptions,\n      children: [this.renderMaxDataPointsOption(), this.renderIntervalOption(), this.renderCacheTimeoutOption(), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form\",\n        children: [_InlineFormLabel4 || (_InlineFormLabel4 = /*#__PURE__*/_jsx(InlineFormLabel, {\n          width: 9,\n          children: \"Relative time\"\n        })), /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          className: \"width-6\",\n          placeholder: \"1h\",\n          onChange: this.onRelativeTimeChange,\n          onBlur: this.onOverrideTime,\n          invalid: !relativeTimeIsValid,\n          value: relativeTime\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form\",\n        children: [_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"gf-form-label width-9\",\n          children: \"Time shift\"\n        })), /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          className: \"width-6\",\n          placeholder: \"1h\",\n          onChange: this.onTimeShiftChange,\n          onBlur: this.onTimeShift,\n          invalid: !timeShiftIsValid,\n          value: timeShift\n        })]\n      }), (timeShift || relativeTime) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsx(InlineField, {\n          label: \"Hide time info\",\n          labelWidth: 18,\n          children: /*#__PURE__*/_jsx(Switch, {\n            value: hideTimeOverride,\n            onChange: this.onToggleTimeOverride\n          })\n        })\n      })]\n    });\n  }\n\n}\n\nconst timeRangeValidation = value => {\n  if (!value) {\n    return true;\n  }\n\n  return rangeUtil.isValidTimeSpan(value);\n};\n\nconst emptyToNull = value => {\n  return value === '' ? null : value;\n};\n\nconst getStyles = stylesFactory(() => {\n  const {\n    theme\n  } = config;\n  return {\n    collapsedText: css`\n      margin-left: ${theme.spacing.md};\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.textWeak};\n    `\n  };\n});","map":{"version":3,"names":["css","React","PureComponent","rangeUtil","Switch","Input","InlineField","InlineFormLabel","stylesFactory","QueryOperationRow","config","QueryGroupOptionsEditor","constructor","props","event","setState","timeRangeFrom","target","value","timeRangeShift","options","onChange","newValue","emptyToNull","isValid","timeRangeValidation","timeRange","from","relativeTimeIsValid","shift","timeShiftIsValid","timeRangeHide","state","hide","cacheTimeout","maxDataPoints","parseInt","isNaN","minInterval","isOpen","renderCacheTimeoutOption","dataSource","tooltip","meta","queryOptions","onCacheTimeoutBlur","renderMaxDataPointsOption","data","realMd","request","isAuto","onMaxDataPointsBlur","renderIntervalOption","realInterval","interval","minIntervalOnDs","onMinIntervalBlur","renderCollapsedText","styles","undefined","mdDesc","intervalDesc","collapsedText","render","hideTimeOverride","relativeTime","timeShift","getStyles","onOpenOptions","onCloseOptions","onRelativeTimeChange","onOverrideTime","onTimeShiftChange","onTimeShift","onToggleTimeOverride","isValidTimeSpan","theme","spacing","md","typography","size","sm","colors","textWeak"],"sources":["/home/soula/grafana/public/app/features/query/components/QueryGroupOptions.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent, ChangeEvent, FocusEvent } from 'react';\n\nimport { rangeUtil, PanelData, DataSourceApi } from '@grafana/data';\nimport { Switch, Input, InlineField, InlineFormLabel, stylesFactory } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { config } from 'app/core/config';\nimport { QueryGroupOptions } from 'app/types';\n\ninterface Props {\n  options: QueryGroupOptions;\n  dataSource: DataSourceApi;\n  data: PanelData;\n  onChange: (options: QueryGroupOptions) => void;\n}\n\ninterface State {\n  timeRangeFrom: string;\n  timeRangeShift: string;\n  timeRangeHide: boolean;\n  isOpen: boolean;\n  relativeTimeIsValid: boolean;\n  timeShiftIsValid: boolean;\n}\n\nexport class QueryGroupOptionsEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { options } = props;\n\n    this.state = {\n      timeRangeFrom: options.timeRange?.from || '',\n      timeRangeShift: options.timeRange?.shift || '',\n      timeRangeHide: options.timeRange?.hide ?? false,\n      isOpen: false,\n      relativeTimeIsValid: true,\n      timeShiftIsValid: true,\n    };\n  }\n\n  onRelativeTimeChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      timeRangeFrom: event.target.value,\n    });\n  };\n\n  onTimeShiftChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      timeRangeShift: event.target.value,\n    });\n  };\n\n  onOverrideTime = (event: FocusEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    const newValue = emptyToNull(event.target.value);\n    const isValid = timeRangeValidation(newValue);\n\n    if (isValid && options.timeRange?.from !== newValue) {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          from: newValue,\n        },\n      });\n    }\n\n    this.setState({ relativeTimeIsValid: isValid });\n  };\n\n  onTimeShift = (event: FocusEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    const newValue = emptyToNull(event.target.value);\n    const isValid = timeRangeValidation(newValue);\n\n    if (isValid && options.timeRange?.shift !== newValue) {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          shift: newValue,\n        },\n      });\n    }\n\n    this.setState({ timeShiftIsValid: isValid });\n  };\n\n  onToggleTimeOverride = () => {\n    const { onChange, options } = this.props;\n\n    this.setState({ timeRangeHide: !this.state.timeRangeHide }, () => {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          hide: this.state.timeRangeHide,\n        },\n      });\n    });\n  };\n\n  onCacheTimeoutBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n    onChange({\n      ...options,\n      cacheTimeout: emptyToNull(event.target.value),\n    });\n  };\n\n  onMaxDataPointsBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    let maxDataPoints: number | null = parseInt(event.target.value as string, 10);\n\n    if (isNaN(maxDataPoints) || maxDataPoints === 0) {\n      maxDataPoints = null;\n    }\n\n    if (maxDataPoints !== options.maxDataPoints) {\n      onChange({\n        ...options,\n        maxDataPoints,\n      });\n    }\n  };\n\n  onMinIntervalBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n    const minInterval = emptyToNull(event.target.value);\n    if (minInterval !== options.minInterval) {\n      onChange({\n        ...options,\n        minInterval,\n      });\n    }\n  };\n\n  renderCacheTimeoutOption() {\n    const { dataSource, options } = this.props;\n\n    const tooltip = `If your time series store has a query cache this option can override the default cache timeout. Specify a\n    numeric value in seconds.`;\n\n    if (!dataSource.meta.queryOptions?.cacheTimeout) {\n      return null;\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <InlineFormLabel width={9} tooltip={tooltip}>\n            Cache timeout\n          </InlineFormLabel>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"60\"\n            spellCheck={false}\n            onBlur={this.onCacheTimeoutBlur}\n            defaultValue={options.cacheTimeout ?? ''}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderMaxDataPointsOption() {\n    const { data, options } = this.props;\n    const realMd = data.request?.maxDataPoints;\n    const value = options.maxDataPoints ?? '';\n    const isAuto = value === '';\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <InlineFormLabel\n            width={9}\n            tooltip={\n              <>\n                The maximum data points per series. Used directly by some data sources and used in calculation of auto\n                interval. With streaming data this value is used for the rolling buffer.\n              </>\n            }\n          >\n            Max data points\n          </InlineFormLabel>\n          <Input\n            type=\"number\"\n            className=\"width-6\"\n            placeholder={`${realMd}`}\n            spellCheck={false}\n            onBlur={this.onMaxDataPointsBlur}\n            defaultValue={value}\n          />\n          {isAuto && (\n            <>\n              <div className=\"gf-form-label query-segment-operator\">=</div>\n              <div className=\"gf-form-label\">Width of panel</div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  renderIntervalOption() {\n    const { data, dataSource, options } = this.props;\n    const realInterval = data.request?.interval;\n    const minIntervalOnDs = dataSource.interval ?? 'No limit';\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              width={9}\n              tooltip={\n                <>\n                  A lower limit for the interval. Recommended to be set to write frequency, for example <code>1m</code>{' '}\n                  if your data is written every minute. Default value can be set in data source settings for most data\n                  sources.\n                </>\n              }\n            >\n              Min interval\n            </InlineFormLabel>\n            <Input\n              type=\"text\"\n              className=\"width-6\"\n              placeholder={`${minIntervalOnDs}`}\n              spellCheck={false}\n              onBlur={this.onMinIntervalBlur}\n              defaultValue={options.minInterval ?? ''}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              width={9}\n              tooltip={\n                <>\n                  The evaluated interval that is sent to data source and is used in <code>$__interval</code> and{' '}\n                  <code>$__interval_ms</code>\n                </>\n              }\n            >\n              Interval\n            </InlineFormLabel>\n            <InlineFormLabel width={6}>{realInterval}</InlineFormLabel>\n            <div className=\"gf-form-label query-segment-operator\">=</div>\n            <div className=\"gf-form-label\">Time range / max data points</div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  onOpenOptions = () => {\n    this.setState({ isOpen: true });\n  };\n\n  onCloseOptions = () => {\n    this.setState({ isOpen: false });\n  };\n\n  renderCollapsedText(styles: StylesType): React.ReactNode | undefined {\n    const { data, options } = this.props;\n    const { isOpen } = this.state;\n\n    if (isOpen) {\n      return undefined;\n    }\n\n    let mdDesc = options.maxDataPoints ?? '';\n    if (mdDesc === '' && data.request) {\n      mdDesc = `auto = ${data.request.maxDataPoints}`;\n    }\n\n    let intervalDesc = options.minInterval;\n    if (data.request) {\n      intervalDesc = `${data.request.interval}`;\n    }\n\n    return (\n      <>\n        {<div className={styles.collapsedText}>MD = {mdDesc}</div>}\n        {<div className={styles.collapsedText}>Interval = {intervalDesc}</div>}\n      </>\n    );\n  }\n\n  render() {\n    const { timeRangeHide: hideTimeOverride, relativeTimeIsValid, timeShiftIsValid } = this.state;\n    const { timeRangeFrom: relativeTime, timeRangeShift: timeShift, isOpen } = this.state;\n    const styles = getStyles();\n\n    return (\n      <QueryOperationRow\n        id=\"Query options\"\n        index={0}\n        title=\"Query options\"\n        headerElement={this.renderCollapsedText(styles)}\n        isOpen={isOpen}\n        onOpen={this.onOpenOptions}\n        onClose={this.onCloseOptions}\n      >\n        {this.renderMaxDataPointsOption()}\n        {this.renderIntervalOption()}\n        {this.renderCacheTimeoutOption()}\n\n        <div className=\"gf-form\">\n          <InlineFormLabel width={9}>Relative time</InlineFormLabel>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"1h\"\n            onChange={this.onRelativeTimeChange}\n            onBlur={this.onOverrideTime}\n            invalid={!relativeTimeIsValid}\n            value={relativeTime}\n          />\n        </div>\n\n        <div className=\"gf-form\">\n          <span className=\"gf-form-label width-9\">Time shift</span>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"1h\"\n            onChange={this.onTimeShiftChange}\n            onBlur={this.onTimeShift}\n            invalid={!timeShiftIsValid}\n            value={timeShift}\n          />\n        </div>\n        {(timeShift || relativeTime) && (\n          <div className=\"gf-form-inline\">\n            <InlineField label=\"Hide time info\" labelWidth={18}>\n              <Switch value={hideTimeOverride} onChange={this.onToggleTimeOverride} />\n            </InlineField>\n          </div>\n        )}\n      </QueryOperationRow>\n    );\n  }\n}\n\nconst timeRangeValidation = (value: string | null) => {\n  if (!value) {\n    return true;\n  }\n\n  return rangeUtil.isValidTimeSpan(value);\n};\n\nconst emptyToNull = (value: string) => {\n  return value === '' ? null : value;\n};\n\nconst getStyles = stylesFactory(() => {\n  const { theme } = config;\n\n  return {\n    collapsedText: css`\n      margin-left: ${theme.spacing.md};\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.textWeak};\n    `,\n  };\n});\n\ntype StylesType = ReturnType<typeof getStyles>;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}