{"ast":null,"code":"var _div, _strong, _Button, _EmptyListCTA;\n\nimport React, { useState, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { HorizontalGroup, Button, LinkButton } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport { appEvents } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { ShowConfirmModalEvent } from '../../types/events';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst NotificationsListPage = () => {\n  const navModel = useNavModel('channels');\n  const [notifications, setNotifications] = useState([]);\n\n  const getNotifications = async () => {\n    return await getBackendSrv().get(`/api/alert-notifications`);\n  };\n\n  const [state, fetchNotifications] = useAsyncFn(getNotifications);\n  useEffect(() => {\n    fetchNotifications().then(res => {\n      setNotifications(res);\n    });\n  }, [fetchNotifications]);\n\n  const deleteNotification = id => {\n    appEvents.publish(new ShowConfirmModalEvent({\n      title: 'Delete',\n      text: 'Do you want to delete this notification channel?',\n      text2: `Deleting this notification channel will not delete from alerts any references to it`,\n      icon: 'trash-alt',\n      confirmText: 'Delete',\n      yesText: 'Delete',\n      onConfirm: async () => {\n        deleteNotificationConfirmed(id);\n      }\n    }));\n  };\n\n  const deleteNotificationConfirmed = async id => {\n    await getBackendSrv().delete(`/api/alert-notifications/${id}`);\n    const notifications = await fetchNotifications();\n    setNotifications(notifications);\n  };\n\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      children: [state.error && /*#__PURE__*/_jsx(\"p\", {\n        children: state.error\n      }), !!notifications.length && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [_div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n          className: \"page-action-bar\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"page-action-bar__spacer\"\n          }), /*#__PURE__*/_jsx(LinkButton, {\n            icon: \"channel-add\",\n            href: \"alerting/notification/new\",\n            children: \"New channel\"\n          })]\n        })), /*#__PURE__*/_jsxs(\"table\", {\n          className: \"filter-table filter-table--hover\",\n          children: [/*#__PURE__*/_jsx(\"thead\", {\n            children: /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"th\", {\n                style: {\n                  minWidth: '200px'\n                },\n                children: _strong || (_strong = /*#__PURE__*/_jsx(\"strong\", {\n                  children: \"Name\"\n                }))\n              }), /*#__PURE__*/_jsx(\"th\", {\n                style: {\n                  minWidth: '100px'\n                },\n                children: \"Type\"\n              }), /*#__PURE__*/_jsx(\"th\", {\n                style: {\n                  width: '1%'\n                }\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"tbody\", {\n            children: notifications.map(notification => /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"td\", {\n                className: \"link-td\",\n                children: /*#__PURE__*/_jsx(\"a\", {\n                  href: `alerting/notification/${notification.id}/edit`,\n                  children: notification.name\n                })\n              }), /*#__PURE__*/_jsx(\"td\", {\n                className: \"link-td\",\n                children: /*#__PURE__*/_jsx(\"a\", {\n                  href: `alerting/notification/${notification.id}/edit`,\n                  children: notification.type\n                })\n              }), /*#__PURE__*/_jsx(\"td\", {\n                className: \"text-right\",\n                children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n                  justify: \"flex-end\",\n                  children: [notification.isDefault && (_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n                    disabled: true,\n                    variant: \"secondary\",\n                    size: \"sm\",\n                    children: \"default\"\n                  }))), /*#__PURE__*/_jsx(Button, {\n                    variant: \"destructive\",\n                    icon: \"times\",\n                    size: \"sm\",\n                    onClick: () => {\n                      deleteNotification(notification.id);\n                    }\n                  })]\n                })\n              })]\n            }, notification.id))\n          })]\n        })]\n      }), !(notifications.length || state.loading) && (_EmptyListCTA || (_EmptyListCTA = /*#__PURE__*/_jsx(EmptyListCTA, {\n        title: \"There are no notification channels defined yet\",\n        buttonIcon: \"channel-add\",\n        buttonLink: \"alerting/notification/new\",\n        buttonTitle: \"Add channel\",\n        proTip: \"You can include images in your alert notifications.\",\n        proTipLink: \"http://docs.grafana.org/alerting/notifications/\",\n        proTipLinkTitle: \"Learn more\",\n        proTipTarget: \"_blank\"\n      })))]\n    })\n  });\n};\n\nexport default NotificationsListPage;","map":{"version":3,"names":["React","useState","useEffect","useAsyncFn","getBackendSrv","HorizontalGroup","Button","LinkButton","EmptyListCTA","Page","appEvents","useNavModel","ShowConfirmModalEvent","NotificationsListPage","navModel","notifications","setNotifications","getNotifications","get","state","fetchNotifications","then","res","deleteNotification","id","publish","title","text","text2","icon","confirmText","yesText","onConfirm","deleteNotificationConfirmed","delete","error","length","minWidth","width","map","notification","name","type","isDefault","loading"],"sources":["/home/soula/grafana/public/app/features/alerting/NotificationsListPage.tsx"],"sourcesContent":["import React, { useState, FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { HorizontalGroup, Button, LinkButton } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport { appEvents } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { AlertNotification } from 'app/types/alerting';\n\nimport { ShowConfirmModalEvent } from '../../types/events';\n\nconst NotificationsListPage: FC = () => {\n  const navModel = useNavModel('channels');\n\n  const [notifications, setNotifications] = useState<AlertNotification[]>([]);\n\n  const getNotifications = async () => {\n    return await getBackendSrv().get(`/api/alert-notifications`);\n  };\n\n  const [state, fetchNotifications] = useAsyncFn(getNotifications);\n  useEffect(() => {\n    fetchNotifications().then((res) => {\n      setNotifications(res);\n    });\n  }, [fetchNotifications]);\n\n  const deleteNotification = (id: number) => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: 'Do you want to delete this notification channel?',\n        text2: `Deleting this notification channel will not delete from alerts any references to it`,\n        icon: 'trash-alt',\n        confirmText: 'Delete',\n        yesText: 'Delete',\n        onConfirm: async () => {\n          deleteNotificationConfirmed(id);\n        },\n      })\n    );\n  };\n\n  const deleteNotificationConfirmed = async (id: number) => {\n    await getBackendSrv().delete(`/api/alert-notifications/${id}`);\n    const notifications = await fetchNotifications();\n    setNotifications(notifications);\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {state.error && <p>{state.error}</p>}\n        {!!notifications.length && (\n          <>\n            <div className=\"page-action-bar\">\n              <div className=\"page-action-bar__spacer\" />\n              <LinkButton icon=\"channel-add\" href=\"alerting/notification/new\">\n                New channel\n              </LinkButton>\n            </div>\n            <table className=\"filter-table filter-table--hover\">\n              <thead>\n                <tr>\n                  <th style={{ minWidth: '200px' }}>\n                    <strong>Name</strong>\n                  </th>\n                  <th style={{ minWidth: '100px' }}>Type</th>\n                  <th style={{ width: '1%' }}></th>\n                </tr>\n              </thead>\n              <tbody>\n                {notifications.map((notification) => (\n                  <tr key={notification.id}>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.name}</a>\n                    </td>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.type}</a>\n                    </td>\n                    <td className=\"text-right\">\n                      <HorizontalGroup justify=\"flex-end\">\n                        {notification.isDefault && (\n                          <Button disabled variant=\"secondary\" size=\"sm\">\n                            default\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"destructive\"\n                          icon=\"times\"\n                          size=\"sm\"\n                          onClick={() => {\n                            deleteNotification(notification.id);\n                          }}\n                        />\n                      </HorizontalGroup>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n\n        {!(notifications.length || state.loading) && (\n          <EmptyListCTA\n            title=\"There are no notification channels defined yet\"\n            buttonIcon=\"channel-add\"\n            buttonLink=\"alerting/notification/new\"\n            buttonTitle=\"Add channel\"\n            proTip=\"You can include images in your alert notifications.\"\n            proTipLink=\"http://docs.grafana.org/alerting/notifications/\"\n            proTipLinkTitle=\"Learn more\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default NotificationsListPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}