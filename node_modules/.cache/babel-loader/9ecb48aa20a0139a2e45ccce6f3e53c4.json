{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { createAsyncMapSlice, createAsyncSlice } from '../utils/redux';\nimport { createOrUpdateSilenceAction, deleteAlertManagerConfigAction, fetchAlertGroupsAction, fetchAlertManagerConfigAction, fetchAmAlertsAction, fetchEditableRuleAction, fetchExternalAlertmanagersAction, fetchExternalAlertmanagersConfigAction, fetchFolderAction, fetchGrafanaAnnotationsAction, fetchGrafanaNotifiersAction, fetchPromRulesAction, fetchRulerRulesAction, fetchRulesSourceBuildInfoAction, fetchSilencesAction, saveRuleFormAction, testReceiversAction, updateAlertManagerConfigAction, updateLotexNamespaceAndGroupAction } from './actions';\nexport const reducer = combineReducers({\n  dataSources: createAsyncMapSlice('dataSources', fetchRulesSourceBuildInfoAction, ({\n    rulesSourceName\n  }) => rulesSourceName).reducer,\n  promRules: createAsyncMapSlice('promRules', fetchPromRulesAction, ({\n    rulesSourceName\n  }) => rulesSourceName).reducer,\n  rulerRules: createAsyncMapSlice('rulerRules', fetchRulerRulesAction, ({\n    rulesSourceName\n  }) => rulesSourceName).reducer,\n  amConfigs: createAsyncMapSlice('amConfigs', fetchAlertManagerConfigAction, alertManagerSourceName => alertManagerSourceName).reducer,\n  silences: createAsyncMapSlice('silences', fetchSilencesAction, alertManagerSourceName => alertManagerSourceName).reducer,\n  ruleForm: combineReducers({\n    saveRule: createAsyncSlice('saveRule', saveRuleFormAction).reducer,\n    existingRule: createAsyncSlice('existingRule', fetchEditableRuleAction).reducer\n  }),\n  grafanaNotifiers: createAsyncSlice('grafanaNotifiers', fetchGrafanaNotifiersAction).reducer,\n  saveAMConfig: createAsyncSlice('saveAMConfig', updateAlertManagerConfigAction).reducer,\n  deleteAMConfig: createAsyncSlice('deleteAMConfig', deleteAlertManagerConfigAction).reducer,\n  updateSilence: createAsyncSlice('updateSilence', createOrUpdateSilenceAction).reducer,\n  amAlerts: createAsyncMapSlice('amAlerts', fetchAmAlertsAction, alertManagerSourceName => alertManagerSourceName).reducer,\n  folders: createAsyncMapSlice('folders', fetchFolderAction, uid => uid).reducer,\n  amAlertGroups: createAsyncMapSlice('amAlertGroups', fetchAlertGroupsAction, alertManagerSourceName => alertManagerSourceName).reducer,\n  testReceivers: createAsyncSlice('testReceivers', testReceiversAction).reducer,\n  updateLotexNamespaceAndGroup: createAsyncSlice('updateLotexNamespaceAndGroup', updateLotexNamespaceAndGroupAction).reducer,\n  externalAlertmanagers: combineReducers({\n    alertmanagerConfig: createAsyncSlice('alertmanagerConfig', fetchExternalAlertmanagersConfigAction).reducer,\n    discoveredAlertmanagers: createAsyncSlice('discoveredAlertmanagers', fetchExternalAlertmanagersAction).reducer\n  }),\n  managedAlertStateHistory: createAsyncSlice('managedAlertStateHistory', fetchGrafanaAnnotationsAction).reducer\n});\nexport default reducer;","map":{"version":3,"names":["combineReducers","createAsyncMapSlice","createAsyncSlice","createOrUpdateSilenceAction","deleteAlertManagerConfigAction","fetchAlertGroupsAction","fetchAlertManagerConfigAction","fetchAmAlertsAction","fetchEditableRuleAction","fetchExternalAlertmanagersAction","fetchExternalAlertmanagersConfigAction","fetchFolderAction","fetchGrafanaAnnotationsAction","fetchGrafanaNotifiersAction","fetchPromRulesAction","fetchRulerRulesAction","fetchRulesSourceBuildInfoAction","fetchSilencesAction","saveRuleFormAction","testReceiversAction","updateAlertManagerConfigAction","updateLotexNamespaceAndGroupAction","reducer","dataSources","rulesSourceName","promRules","rulerRules","amConfigs","alertManagerSourceName","silences","ruleForm","saveRule","existingRule","grafanaNotifiers","saveAMConfig","deleteAMConfig","updateSilence","amAlerts","folders","uid","amAlertGroups","testReceivers","updateLotexNamespaceAndGroup","externalAlertmanagers","alertmanagerConfig","discoveredAlertmanagers","managedAlertStateHistory"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/state/reducers.ts"],"sourcesContent":["import { combineReducers } from 'redux';\n\nimport { createAsyncMapSlice, createAsyncSlice } from '../utils/redux';\n\nimport {\n  createOrUpdateSilenceAction,\n  deleteAlertManagerConfigAction,\n  fetchAlertGroupsAction,\n  fetchAlertManagerConfigAction,\n  fetchAmAlertsAction,\n  fetchEditableRuleAction,\n  fetchExternalAlertmanagersAction,\n  fetchExternalAlertmanagersConfigAction,\n  fetchFolderAction,\n  fetchGrafanaAnnotationsAction,\n  fetchGrafanaNotifiersAction,\n  fetchPromRulesAction,\n  fetchRulerRulesAction,\n  fetchRulesSourceBuildInfoAction,\n  fetchSilencesAction,\n  saveRuleFormAction,\n  testReceiversAction,\n  updateAlertManagerConfigAction,\n  updateLotexNamespaceAndGroupAction,\n} from './actions';\n\nexport const reducer = combineReducers({\n  dataSources: createAsyncMapSlice(\n    'dataSources',\n    fetchRulesSourceBuildInfoAction,\n    ({ rulesSourceName }) => rulesSourceName\n  ).reducer,\n  promRules: createAsyncMapSlice('promRules', fetchPromRulesAction, ({ rulesSourceName }) => rulesSourceName).reducer,\n  rulerRules: createAsyncMapSlice('rulerRules', fetchRulerRulesAction, ({ rulesSourceName }) => rulesSourceName)\n    .reducer,\n  amConfigs: createAsyncMapSlice(\n    'amConfigs',\n    fetchAlertManagerConfigAction,\n    (alertManagerSourceName) => alertManagerSourceName\n  ).reducer,\n  silences: createAsyncMapSlice('silences', fetchSilencesAction, (alertManagerSourceName) => alertManagerSourceName)\n    .reducer,\n  ruleForm: combineReducers({\n    saveRule: createAsyncSlice('saveRule', saveRuleFormAction).reducer,\n    existingRule: createAsyncSlice('existingRule', fetchEditableRuleAction).reducer,\n  }),\n  grafanaNotifiers: createAsyncSlice('grafanaNotifiers', fetchGrafanaNotifiersAction).reducer,\n  saveAMConfig: createAsyncSlice('saveAMConfig', updateAlertManagerConfigAction).reducer,\n  deleteAMConfig: createAsyncSlice('deleteAMConfig', deleteAlertManagerConfigAction).reducer,\n  updateSilence: createAsyncSlice('updateSilence', createOrUpdateSilenceAction).reducer,\n  amAlerts: createAsyncMapSlice('amAlerts', fetchAmAlertsAction, (alertManagerSourceName) => alertManagerSourceName)\n    .reducer,\n  folders: createAsyncMapSlice('folders', fetchFolderAction, (uid) => uid).reducer,\n  amAlertGroups: createAsyncMapSlice(\n    'amAlertGroups',\n    fetchAlertGroupsAction,\n    (alertManagerSourceName) => alertManagerSourceName\n  ).reducer,\n  testReceivers: createAsyncSlice('testReceivers', testReceiversAction).reducer,\n  updateLotexNamespaceAndGroup: createAsyncSlice('updateLotexNamespaceAndGroup', updateLotexNamespaceAndGroupAction)\n    .reducer,\n  externalAlertmanagers: combineReducers({\n    alertmanagerConfig: createAsyncSlice('alertmanagerConfig', fetchExternalAlertmanagersConfigAction).reducer,\n    discoveredAlertmanagers: createAsyncSlice('discoveredAlertmanagers', fetchExternalAlertmanagersAction).reducer,\n  }),\n  managedAlertStateHistory: createAsyncSlice('managedAlertStateHistory', fetchGrafanaAnnotationsAction).reducer,\n});\n\nexport type UnifiedAlertingState = ReturnType<typeof reducer>;\n\nexport default reducer;\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,SAASC,mBAAT,EAA8BC,gBAA9B,QAAsD,gBAAtD;AAEA,SACEC,2BADF,EAEEC,8BAFF,EAGEC,sBAHF,EAIEC,6BAJF,EAKEC,mBALF,EAMEC,uBANF,EAOEC,gCAPF,EAQEC,sCARF,EASEC,iBATF,EAUEC,6BAVF,EAWEC,2BAXF,EAYEC,oBAZF,EAaEC,qBAbF,EAcEC,+BAdF,EAeEC,mBAfF,EAgBEC,kBAhBF,EAiBEC,mBAjBF,EAkBEC,8BAlBF,EAmBEC,kCAnBF,QAoBO,WApBP;AAsBA,OAAO,MAAMC,OAAO,GAAGtB,eAAe,CAAC;EACrCuB,WAAW,EAAEtB,mBAAmB,CAC9B,aAD8B,EAE9Be,+BAF8B,EAG9B,CAAC;IAAEQ;EAAF,CAAD,KAAyBA,eAHK,CAAnB,CAIXF,OALmC;EAMrCG,SAAS,EAAExB,mBAAmB,CAAC,WAAD,EAAca,oBAAd,EAAoC,CAAC;IAAEU;EAAF,CAAD,KAAyBA,eAA7D,CAAnB,CAAiGF,OANvE;EAOrCI,UAAU,EAAEzB,mBAAmB,CAAC,YAAD,EAAec,qBAAf,EAAsC,CAAC;IAAES;EAAF,CAAD,KAAyBA,eAA/D,CAAnB,CACTF,OARkC;EASrCK,SAAS,EAAE1B,mBAAmB,CAC5B,WAD4B,EAE5BK,6BAF4B,EAG3BsB,sBAAD,IAA4BA,sBAHA,CAAnB,CAITN,OAbmC;EAcrCO,QAAQ,EAAE5B,mBAAmB,CAAC,UAAD,EAAagB,mBAAb,EAAmCW,sBAAD,IAA4BA,sBAA9D,CAAnB,CACPN,OAfkC;EAgBrCQ,QAAQ,EAAE9B,eAAe,CAAC;IACxB+B,QAAQ,EAAE7B,gBAAgB,CAAC,UAAD,EAAagB,kBAAb,CAAhB,CAAiDI,OADnC;IAExBU,YAAY,EAAE9B,gBAAgB,CAAC,cAAD,EAAiBM,uBAAjB,CAAhB,CAA0Dc;EAFhD,CAAD,CAhBY;EAoBrCW,gBAAgB,EAAE/B,gBAAgB,CAAC,kBAAD,EAAqBW,2BAArB,CAAhB,CAAkES,OApB/C;EAqBrCY,YAAY,EAAEhC,gBAAgB,CAAC,cAAD,EAAiBkB,8BAAjB,CAAhB,CAAiEE,OArB1C;EAsBrCa,cAAc,EAAEjC,gBAAgB,CAAC,gBAAD,EAAmBE,8BAAnB,CAAhB,CAAmEkB,OAtB9C;EAuBrCc,aAAa,EAAElC,gBAAgB,CAAC,eAAD,EAAkBC,2BAAlB,CAAhB,CAA+DmB,OAvBzC;EAwBrCe,QAAQ,EAAEpC,mBAAmB,CAAC,UAAD,EAAaM,mBAAb,EAAmCqB,sBAAD,IAA4BA,sBAA9D,CAAnB,CACPN,OAzBkC;EA0BrCgB,OAAO,EAAErC,mBAAmB,CAAC,SAAD,EAAYU,iBAAZ,EAAgC4B,GAAD,IAASA,GAAxC,CAAnB,CAAgEjB,OA1BpC;EA2BrCkB,aAAa,EAAEvC,mBAAmB,CAChC,eADgC,EAEhCI,sBAFgC,EAG/BuB,sBAAD,IAA4BA,sBAHI,CAAnB,CAIbN,OA/BmC;EAgCrCmB,aAAa,EAAEvC,gBAAgB,CAAC,eAAD,EAAkBiB,mBAAlB,CAAhB,CAAuDG,OAhCjC;EAiCrCoB,4BAA4B,EAAExC,gBAAgB,CAAC,8BAAD,EAAiCmB,kCAAjC,CAAhB,CAC3BC,OAlCkC;EAmCrCqB,qBAAqB,EAAE3C,eAAe,CAAC;IACrC4C,kBAAkB,EAAE1C,gBAAgB,CAAC,oBAAD,EAAuBQ,sCAAvB,CAAhB,CAA+EY,OAD9D;IAErCuB,uBAAuB,EAAE3C,gBAAgB,CAAC,yBAAD,EAA4BO,gCAA5B,CAAhB,CAA8Ea;EAFlE,CAAD,CAnCD;EAuCrCwB,wBAAwB,EAAE5C,gBAAgB,CAAC,0BAAD,EAA6BU,6BAA7B,CAAhB,CAA4EU;AAvCjE,CAAD,CAA/B;AA4CP,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}