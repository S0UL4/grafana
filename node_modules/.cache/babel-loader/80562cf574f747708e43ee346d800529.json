{"ast":null,"code":"import { sanitizeUrl as braintreeSanitizeUrl } from '@braintree/sanitize-url';\nimport * as xss from 'xss';\nconst XSSWL = Object.keys(xss.whiteList).reduce((acc, element) => {\n  var _xss$whiteList$elemen;\n\n  acc[element] = (_xss$whiteList$elemen = xss.whiteList[element]) === null || _xss$whiteList$elemen === void 0 ? void 0 : _xss$whiteList$elemen.concat(['class', 'style']);\n  return acc;\n}, {});\nconst sanitizeXSS = new xss.FilterXSS({\n  whiteList: XSSWL\n});\nconst sanitizeTextPanelWhitelist = new xss.FilterXSS({\n  whiteList: XSSWL,\n  css: {\n    whiteList: Object.assign({}, xss.getDefaultCSSWhiteList(), {\n      'flex-direction': true,\n      'flex-wrap': true,\n      'flex-basis': true,\n      'flex-grow': true,\n      'flex-shrink': true,\n      'flex-flow': true,\n      gap: true,\n      order: true,\n      'justify-content': true,\n      'justify-items': true,\n      'justify-self': true,\n      'align-items': true,\n      'align-content': true,\n      'align-self': true\n    })\n  }\n});\n/**\n * Returns string safe from XSS attacks.\n *\n * Even though we allow the style-attribute, there's still default filtering applied to it\n * Info: https://github.com/leizongmin/js-xss#customize-css-filter\n * Whitelist: https://github.com/leizongmin/js-css-filter/blob/master/lib/default.js\n */\n\nexport function sanitize(unsanitizedString) {\n  try {\n    return sanitizeXSS.process(unsanitizedString);\n  } catch (error) {\n    console.error('String could not be sanitized', unsanitizedString);\n    return unsanitizedString;\n  }\n}\nexport function sanitizeTextPanelContent(unsanitizedString) {\n  try {\n    return sanitizeTextPanelWhitelist.process(unsanitizedString);\n  } catch (error) {\n    console.error('String could not be sanitized', unsanitizedString);\n    return 'Text string could not be sanitized';\n  }\n}\nexport function sanitizeUrl(url) {\n  return braintreeSanitizeUrl(url);\n}\nexport function hasAnsiCodes(input) {\n  return /\\u001b\\[\\d{1,2}m/.test(input);\n}\nexport function escapeHtml(str) {\n  return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}","map":{"version":3,"names":["sanitizeUrl","braintreeSanitizeUrl","xss","XSSWL","Object","keys","whiteList","reduce","acc","element","concat","sanitizeXSS","FilterXSS","sanitizeTextPanelWhitelist","css","getDefaultCSSWhiteList","gap","order","sanitize","unsanitizedString","process","error","console","sanitizeTextPanelContent","url","hasAnsiCodes","input","test","escapeHtml","str","String","replace"],"sources":["/home/soula/grafana/packages/grafana-data/src/text/sanitize.ts"],"sourcesContent":["import { sanitizeUrl as braintreeSanitizeUrl } from '@braintree/sanitize-url';\nimport * as xss from 'xss';\n\nconst XSSWL = Object.keys(xss.whiteList).reduce((acc, element) => {\n  acc[element] = xss.whiteList[element]?.concat(['class', 'style']);\n  return acc;\n}, {} as xss.IWhiteList);\n\nconst sanitizeXSS = new xss.FilterXSS({\n  whiteList: XSSWL,\n});\n\nconst sanitizeTextPanelWhitelist = new xss.FilterXSS({\n  whiteList: XSSWL,\n  css: {\n    whiteList: {\n      ...xss.getDefaultCSSWhiteList(),\n      'flex-direction': true,\n      'flex-wrap': true,\n      'flex-basis': true,\n      'flex-grow': true,\n      'flex-shrink': true,\n      'flex-flow': true,\n      gap: true,\n      order: true,\n      'justify-content': true,\n      'justify-items': true,\n      'justify-self': true,\n      'align-items': true,\n      'align-content': true,\n      'align-self': true,\n    },\n  },\n});\n\n/**\n * Returns string safe from XSS attacks.\n *\n * Even though we allow the style-attribute, there's still default filtering applied to it\n * Info: https://github.com/leizongmin/js-xss#customize-css-filter\n * Whitelist: https://github.com/leizongmin/js-css-filter/blob/master/lib/default.js\n */\nexport function sanitize(unsanitizedString: string): string {\n  try {\n    return sanitizeXSS.process(unsanitizedString);\n  } catch (error) {\n    console.error('String could not be sanitized', unsanitizedString);\n    return unsanitizedString;\n  }\n}\n\nexport function sanitizeTextPanelContent(unsanitizedString: string): string {\n  try {\n    return sanitizeTextPanelWhitelist.process(unsanitizedString);\n  } catch (error) {\n    console.error('String could not be sanitized', unsanitizedString);\n    return 'Text string could not be sanitized';\n  }\n}\n\nexport function sanitizeUrl(url: string): string {\n  return braintreeSanitizeUrl(url);\n}\n\nexport function hasAnsiCodes(input: string): boolean {\n  return /\\u001b\\[\\d{1,2}m/.test(input);\n}\n\nexport function escapeHtml(str: string): string {\n  return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n}\n"],"mappings":"AAAA,SAASA,WAAW,IAAIC,oBAAxB,QAAoD,yBAApD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYH,GAAG,CAACI,SAAhB,EAA2BC,MAA3B,CAAkC,CAACC,GAAD,EAAMC,OAAN,KAAkB;EAAA;;EAChED,GAAG,CAACC,OAAD,CAAH,4BAAeP,GAAG,CAACI,SAAJ,CAAcG,OAAd,CAAf,0DAAe,sBAAwBC,MAAxB,CAA+B,CAAC,OAAD,EAAU,OAAV,CAA/B,CAAf;EACA,OAAOF,GAAP;AACD,CAHa,EAGX,EAHW,CAAd;AAKA,MAAMG,WAAW,GAAG,IAAIT,GAAG,CAACU,SAAR,CAAkB;EACpCN,SAAS,EAAEH;AADyB,CAAlB,CAApB;AAIA,MAAMU,0BAA0B,GAAG,IAAIX,GAAG,CAACU,SAAR,CAAkB;EACnDN,SAAS,EAAEH,KADwC;EAEnDW,GAAG,EAAE;IACHR,SAAS,oBACJJ,GAAG,CAACa,sBAAJ,EADI;MAEP,kBAAkB,IAFX;MAGP,aAAa,IAHN;MAIP,cAAc,IAJP;MAKP,aAAa,IALN;MAMP,eAAe,IANR;MAOP,aAAa,IAPN;MAQPC,GAAG,EAAE,IARE;MASPC,KAAK,EAAE,IATA;MAUP,mBAAmB,IAVZ;MAWP,iBAAiB,IAXV;MAYP,gBAAgB,IAZT;MAaP,eAAe,IAbR;MAcP,iBAAiB,IAdV;MAeP,cAAc;IAfP;EADN;AAF8C,CAAlB,CAAnC;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,iBAAlB,EAAqD;EAC1D,IAAI;IACF,OAAOR,WAAW,CAACS,OAAZ,CAAoBD,iBAApB,CAAP;EACD,CAFD,CAEE,OAAOE,KAAP,EAAc;IACdC,OAAO,CAACD,KAAR,CAAc,+BAAd,EAA+CF,iBAA/C;IACA,OAAOA,iBAAP;EACD;AACF;AAED,OAAO,SAASI,wBAAT,CAAkCJ,iBAAlC,EAAqE;EAC1E,IAAI;IACF,OAAON,0BAA0B,CAACO,OAA3B,CAAmCD,iBAAnC,CAAP;EACD,CAFD,CAEE,OAAOE,KAAP,EAAc;IACdC,OAAO,CAACD,KAAR,CAAc,+BAAd,EAA+CF,iBAA/C;IACA,OAAO,oCAAP;EACD;AACF;AAED,OAAO,SAASnB,WAAT,CAAqBwB,GAArB,EAA0C;EAC/C,OAAOvB,oBAAoB,CAACuB,GAAD,CAA3B;AACD;AAED,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA8C;EACnD,OAAO,mBAAmBC,IAAnB,CAAwBD,KAAxB,CAAP;AACD;AAED,OAAO,SAASE,UAAT,CAAoBC,GAApB,EAAyC;EAC9C,OAAOC,MAAM,CAACD,GAAD,CAAN,CAAYE,OAAZ,CAAoB,IAApB,EAA0B,OAA1B,EAAmCA,OAAnC,CAA2C,IAA3C,EAAiD,MAAjD,EAAyDA,OAAzD,CAAiE,IAAjE,EAAuE,MAAvE,EAA+EA,OAA/E,CAAuF,IAAvF,EAA6F,QAA7F,CAAP;AACD"},"metadata":{},"sourceType":"module"}