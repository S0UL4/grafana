{"ast":null,"code":"var _LoadingPlaceholder, _Route, _Redirect;\n\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Route, Redirect, Switch } from 'react-router-dom';\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport MuteTimingForm from './components/amroutes/MuteTimingForm';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction } from './state/actions';\nimport { initialAsyncRequestState } from './utils/redux';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst MuteTimings = () => {\n  const [queryParams] = useQueryParams();\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const amConfigs = useUnifiedAlertingSelector(state => state.amConfigs);\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n  const {\n    result,\n    error,\n    loading\n  } = alertManagerSourceName && amConfigs[alertManagerSourceName] || initialAsyncRequestState;\n  const config = result === null || result === void 0 ? void 0 : result.alertmanager_config;\n  const getMuteTimingByName = useCallback(id => {\n    var _config$mute_time_int;\n\n    const timing = config === null || config === void 0 ? void 0 : (_config$mute_time_int = config.mute_time_intervals) === null || _config$mute_time_int === void 0 ? void 0 : _config$mute_time_int.find(({\n      name\n    }) => name === id);\n\n    if (timing) {\n      var _config$muteTimeProve;\n\n      const provenance = ((_config$muteTimeProve = config === null || config === void 0 ? void 0 : config.muteTimeProvenances) !== null && _config$muteTimeProve !== void 0 ? _config$muteTimeProve : {})[timing.name];\n      return Object.assign({}, timing, {\n        provenance\n      });\n    }\n\n    return timing;\n  }, [config]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [loading && (_LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n      text: \"Loading mute timing\"\n    }))), error && !loading && /*#__PURE__*/_jsx(Alert, {\n      severity: \"error\",\n      title: `Error loading Alertmanager config for ${alertManagerSourceName}`,\n      children: error.message || 'Unknown error.'\n    }), result && !error && /*#__PURE__*/_jsxs(Switch, {\n      children: [_Route || (_Route = /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/routes/mute-timing/new\",\n        children: /*#__PURE__*/_jsx(MuteTimingForm, {})\n      })), /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/routes/mute-timing/edit\",\n        children: () => {\n          if (queryParams['muteName']) {\n            const muteTiming = getMuteTimingByName(String(queryParams['muteName']));\n            const provenance = muteTiming === null || muteTiming === void 0 ? void 0 : muteTiming.provenance;\n            return /*#__PURE__*/_jsx(MuteTimingForm, {\n              muteTiming: muteTiming,\n              showError: !muteTiming,\n              provenance: provenance\n            });\n          }\n\n          return _Redirect || (_Redirect = /*#__PURE__*/_jsx(Redirect, {\n            to: \"/alerting/routes\"\n          }));\n        }\n      })]\n    })]\n  });\n};\n\nexport default MuteTimings;","map":{"version":3,"names":["React","useCallback","useEffect","useDispatch","Route","Redirect","Switch","Alert","LoadingPlaceholder","useQueryParams","MuteTimingForm","useAlertManagerSourceName","useAlertManagersByPermission","useUnifiedAlertingSelector","fetchAlertManagerConfigAction","initialAsyncRequestState","MuteTimings","queryParams","dispatch","alertManagers","alertManagerSourceName","amConfigs","state","fetchConfig","result","error","loading","config","alertmanager_config","getMuteTimingByName","id","timing","mute_time_intervals","find","name","provenance","muteTimeProvenances","message","muteTiming","String"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/MuteTimings.tsx"],"sourcesContent":["import React, { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Route, Redirect, Switch } from 'react-router-dom';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport MuteTimingForm from './components/amroutes/MuteTimingForm';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction } from './state/actions';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst MuteTimings = () => {\n  const [queryParams] = useQueryParams();\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const { result, error, loading } =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n\n  const getMuteTimingByName = useCallback(\n    (id: string): MuteTimeInterval | undefined => {\n      const timing = config?.mute_time_intervals?.find(({ name }: MuteTimeInterval) => name === id);\n\n      if (timing) {\n        const provenance = (config?.muteTimeProvenances ?? {})[timing.name];\n\n        return {\n          ...timing,\n          provenance,\n        };\n      }\n\n      return timing;\n    },\n    [config]\n  );\n\n  return (\n    <>\n      {loading && <LoadingPlaceholder text=\"Loading mute timing\" />}\n      {error && !loading && (\n        <Alert severity=\"error\" title={`Error loading Alertmanager config for ${alertManagerSourceName}`}>\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/routes/mute-timing/new\">\n            <MuteTimingForm />\n          </Route>\n          <Route exact path=\"/alerting/routes/mute-timing/edit\">\n            {() => {\n              if (queryParams['muteName']) {\n                const muteTiming = getMuteTimingByName(String(queryParams['muteName']));\n                const provenance = muteTiming?.provenance;\n\n                return <MuteTimingForm muteTiming={muteTiming} showError={!muteTiming} provenance={provenance} />;\n              }\n              return <Redirect to=\"/alerting/routes\" />;\n            }}\n          </Route>\n        </Switch>\n      )}\n    </>\n  );\n};\n\nexport default MuteTimings;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}