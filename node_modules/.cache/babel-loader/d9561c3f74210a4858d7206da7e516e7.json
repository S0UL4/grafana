{"ast":null,"code":"import InfluxQueryModel from '../../influx_query_model';\nimport queryPart from '../../query_part';\nimport { toSelectableValue } from './toSelectableValue';\nimport { unwrap } from './unwrap';\nexport function getNewSelectPartOptions() {\n  const categories = queryPart.getCategories();\n  const options = [];\n  const keys = Object.keys(categories);\n  keys.forEach(key => {\n    const children = categories[key].map(x => toSelectableValue(x.type));\n    options.push({\n      label: key,\n      options: children\n    });\n  });\n  return options;\n}\nexport async function getNewGroupByPartOptions(query, getTagKeys) {\n  const tagKeys = await getTagKeys();\n  const queryCopy = Object.assign({}, query); // the query-model mutates the query\n\n  const model = new InfluxQueryModel(queryCopy);\n  const options = [];\n\n  if (!model.hasFill()) {\n    options.push(toSelectableValue('fill(null)'));\n  }\n\n  if (!model.hasGroupByTime()) {\n    options.push(toSelectableValue('time($interval)'));\n  }\n\n  tagKeys.forEach(key => {\n    options.push(toSelectableValue(`tag(${key})`));\n  });\n  return options;\n}\n\nfunction getPartParams(part, dynamicParamOptions) {\n  var _part$params;\n\n  // NOTE: the way the system is constructed,\n  // there always can only be one possible dynamic-lookup\n  // field. in case of select it is the field,\n  // in case of group-by it is the tag\n  const def = queryPart.create(part).def; // we switch the numbers to strings, it will work that way too,\n  // and it makes the code simpler\n\n  const paramValues = ((_part$params = part.params) !== null && _part$params !== void 0 ? _part$params : []).map(p => p.toString());\n\n  if (paramValues.length !== def.params.length) {\n    throw new Error('Invalid query-segment');\n  }\n\n  return paramValues.map((val, index) => {\n    const defParam = def.params[index];\n\n    if (defParam.dynamicLookup) {\n      return {\n        value: val,\n        options: unwrap(dynamicParamOptions.get(`${def.type}_${index}`))\n      };\n    }\n\n    if (defParam.options != null) {\n      return {\n        value: val,\n        options: () => Promise.resolve(defParam.options)\n      };\n    }\n\n    return {\n      value: val,\n      options: null\n    };\n  });\n}\n\nexport function makePartList(queryParts, dynamicParamOptions) {\n  return queryParts.map(qp => {\n    return {\n      name: qp.type,\n      params: getPartParams(qp, dynamicParamOptions)\n    };\n  });\n}","map":{"version":3,"names":["InfluxQueryModel","queryPart","toSelectableValue","unwrap","getNewSelectPartOptions","categories","getCategories","options","keys","Object","forEach","key","children","map","x","type","push","label","getNewGroupByPartOptions","query","getTagKeys","tagKeys","queryCopy","model","hasFill","hasGroupByTime","getPartParams","part","dynamicParamOptions","def","create","paramValues","params","p","toString","length","Error","val","index","defParam","dynamicLookup","value","get","Promise","resolve","makePartList","queryParts","qp","name"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/partListUtils.tsx"],"sourcesContent":["import { SelectableValue } from '@grafana/data';\nimport { QueryPartDef } from 'app/features/alerting/state/query_part';\n\nimport InfluxQueryModel from '../../influx_query_model';\nimport queryPart from '../../query_part';\nimport { InfluxQuery, InfluxQueryPart } from '../../types';\n\nimport { PartParams } from './PartListSection';\nimport { toSelectableValue } from './toSelectableValue';\nimport { unwrap } from './unwrap';\n\ntype Categories = Record<string, QueryPartDef[]>;\n\nexport function getNewSelectPartOptions(): SelectableValue[] {\n  const categories: Categories = queryPart.getCategories();\n  const options: SelectableValue[] = [];\n\n  const keys = Object.keys(categories);\n\n  keys.forEach((key) => {\n    const children: SelectableValue[] = categories[key].map((x) => toSelectableValue(x.type));\n\n    options.push({\n      label: key,\n      options: children,\n    });\n  });\n\n  return options;\n}\n\nexport async function getNewGroupByPartOptions(\n  query: InfluxQuery,\n  getTagKeys: () => Promise<string[]>\n): Promise<Array<SelectableValue<string>>> {\n  const tagKeys = await getTagKeys();\n  const queryCopy = { ...query }; // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const options: Array<SelectableValue<string>> = [];\n  if (!model.hasFill()) {\n    options.push(toSelectableValue('fill(null)'));\n  }\n  if (!model.hasGroupByTime()) {\n    options.push(toSelectableValue('time($interval)'));\n  }\n  tagKeys.forEach((key) => {\n    options.push(toSelectableValue(`tag(${key})`));\n  });\n  return options;\n}\n\ntype Part = {\n  name: string;\n  params: PartParams;\n};\n\nfunction getPartParams(part: InfluxQueryPart, dynamicParamOptions: Map<string, () => Promise<string[]>>): PartParams {\n  // NOTE: the way the system is constructed,\n  // there always can only be one possible dynamic-lookup\n  // field. in case of select it is the field,\n  // in case of group-by it is the tag\n  const def = queryPart.create(part).def;\n\n  // we switch the numbers to strings, it will work that way too,\n  // and it makes the code simpler\n  const paramValues = (part.params ?? []).map((p) => p.toString());\n\n  if (paramValues.length !== def.params.length) {\n    throw new Error('Invalid query-segment');\n  }\n\n  return paramValues.map((val, index) => {\n    const defParam = def.params[index];\n    if (defParam.dynamicLookup) {\n      return {\n        value: val,\n        options: unwrap(dynamicParamOptions.get(`${def.type}_${index}`)),\n      };\n    }\n\n    if (defParam.options != null) {\n      return {\n        value: val,\n        options: () => Promise.resolve(defParam.options),\n      };\n    }\n\n    return {\n      value: val,\n      options: null,\n    };\n  });\n}\n\nexport function makePartList(\n  queryParts: InfluxQueryPart[],\n  dynamicParamOptions: Map<string, () => Promise<string[]>>\n): Part[] {\n  return queryParts.map((qp) => {\n    return {\n      name: qp.type,\n      params: getPartParams(qp, dynamicParamOptions),\n    };\n  });\n}\n"],"mappings":"AAGA,OAAOA,gBAAP,MAA6B,0BAA7B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAIA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAIA,OAAO,SAASC,uBAAT,GAAsD;EAC3D,MAAMC,UAAsB,GAAGJ,SAAS,CAACK,aAAV,EAA/B;EACA,MAAMC,OAA0B,GAAG,EAAnC;EAEA,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,UAAZ,CAAb;EAEAG,IAAI,CAACE,OAAL,CAAcC,GAAD,IAAS;IACpB,MAAMC,QAA2B,GAAGP,UAAU,CAACM,GAAD,CAAV,CAAgBE,GAAhB,CAAqBC,CAAD,IAAOZ,iBAAiB,CAACY,CAAC,CAACC,IAAH,CAA5C,CAApC;IAEAR,OAAO,CAACS,IAAR,CAAa;MACXC,KAAK,EAAEN,GADI;MAEXJ,OAAO,EAAEK;IAFE,CAAb;EAID,CAPD;EASA,OAAOL,OAAP;AACD;AAED,OAAO,eAAeW,wBAAf,CACLC,KADK,EAELC,UAFK,EAGoC;EACzC,MAAMC,OAAO,GAAG,MAAMD,UAAU,EAAhC;EACA,MAAME,SAAS,qBAAQH,KAAR,CAAf,CAFyC,CAET;;EAChC,MAAMI,KAAK,GAAG,IAAIvB,gBAAJ,CAAqBsB,SAArB,CAAd;EACA,MAAMf,OAAuC,GAAG,EAAhD;;EACA,IAAI,CAACgB,KAAK,CAACC,OAAN,EAAL,EAAsB;IACpBjB,OAAO,CAACS,IAAR,CAAad,iBAAiB,CAAC,YAAD,CAA9B;EACD;;EACD,IAAI,CAACqB,KAAK,CAACE,cAAN,EAAL,EAA6B;IAC3BlB,OAAO,CAACS,IAAR,CAAad,iBAAiB,CAAC,iBAAD,CAA9B;EACD;;EACDmB,OAAO,CAACX,OAAR,CAAiBC,GAAD,IAAS;IACvBJ,OAAO,CAACS,IAAR,CAAad,iBAAiB,CAAE,OAAMS,GAAI,GAAZ,CAA9B;EACD,CAFD;EAGA,OAAOJ,OAAP;AACD;;AAOD,SAASmB,aAAT,CAAuBC,IAAvB,EAA8CC,mBAA9C,EAAqH;EAAA;;EACnH;EACA;EACA;EACA;EACA,MAAMC,GAAG,GAAG5B,SAAS,CAAC6B,MAAV,CAAiBH,IAAjB,EAAuBE,GAAnC,CALmH,CAOnH;EACA;;EACA,MAAME,WAAW,GAAG,iBAACJ,IAAI,CAACK,MAAN,uDAAgB,EAAhB,EAAoBnB,GAApB,CAAyBoB,CAAD,IAAOA,CAAC,CAACC,QAAF,EAA/B,CAApB;;EAEA,IAAIH,WAAW,CAACI,MAAZ,KAAuBN,GAAG,CAACG,MAAJ,CAAWG,MAAtC,EAA8C;IAC5C,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;EACD;;EAED,OAAOL,WAAW,CAAClB,GAAZ,CAAgB,CAACwB,GAAD,EAAMC,KAAN,KAAgB;IACrC,MAAMC,QAAQ,GAAGV,GAAG,CAACG,MAAJ,CAAWM,KAAX,CAAjB;;IACA,IAAIC,QAAQ,CAACC,aAAb,EAA4B;MAC1B,OAAO;QACLC,KAAK,EAAEJ,GADF;QAEL9B,OAAO,EAAEJ,MAAM,CAACyB,mBAAmB,CAACc,GAApB,CAAyB,GAAEb,GAAG,CAACd,IAAK,IAAGuB,KAAM,EAA7C,CAAD;MAFV,CAAP;IAID;;IAED,IAAIC,QAAQ,CAAChC,OAAT,IAAoB,IAAxB,EAA8B;MAC5B,OAAO;QACLkC,KAAK,EAAEJ,GADF;QAEL9B,OAAO,EAAE,MAAMoC,OAAO,CAACC,OAAR,CAAgBL,QAAQ,CAAChC,OAAzB;MAFV,CAAP;IAID;;IAED,OAAO;MACLkC,KAAK,EAAEJ,GADF;MAEL9B,OAAO,EAAE;IAFJ,CAAP;EAID,CApBM,CAAP;AAqBD;;AAED,OAAO,SAASsC,YAAT,CACLC,UADK,EAELlB,mBAFK,EAGG;EACR,OAAOkB,UAAU,CAACjC,GAAX,CAAgBkC,EAAD,IAAQ;IAC5B,OAAO;MACLC,IAAI,EAAED,EAAE,CAAChC,IADJ;MAELiB,MAAM,EAAEN,aAAa,CAACqB,EAAD,EAAKnB,mBAAL;IAFhB,CAAP;EAID,CALM,CAAP;AAMD"},"metadata":{},"sourceType":"module"}