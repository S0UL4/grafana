{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { backendSrv } from 'app/core/services/backend_srv';\nconst hitTypes = {\n  FOLDER: 'dash-folder',\n  DASHBOARD: 'dash-db'\n};\nexport class ValidationSrv {\n  constructor() {\n    _defineProperty(this, \"rootName\", 'general');\n  }\n\n  validateNewDashboardName(folderId, name) {\n    return this.validate(folderId, name, 'A dashboard or a folder with the same name already exists');\n  }\n\n  validateNewFolderName(name) {\n    return this.validate(0, name, 'A folder or dashboard in the general folder with the same name already exists');\n  }\n\n  async validate(folderId, name, existingErrorMessage) {\n    name = (name || '').trim();\n    const nameLowerCased = name.toLowerCase();\n\n    if (name.length === 0) {\n      throw {\n        type: 'REQUIRED',\n        message: 'Name is required'\n      };\n    }\n\n    if (folderId === 0 && nameLowerCased === this.rootName) {\n      throw {\n        type: 'EXISTING',\n        message: 'This is a reserved name and cannot be used for a folder.'\n      };\n    }\n\n    const promises = [];\n    promises.push(backendSrv.search({\n      type: hitTypes.FOLDER,\n      folderIds: [folderId],\n      query: name\n    }));\n    promises.push(backendSrv.search({\n      type: hitTypes.DASHBOARD,\n      folderIds: [folderId],\n      query: name\n    }));\n    const res = await Promise.all(promises);\n    let hits = [];\n\n    if (res.length > 0 && res[0].length > 0) {\n      hits = res[0];\n    }\n\n    if (res.length > 1 && res[1].length > 0) {\n      hits = hits.concat(res[1]);\n    }\n\n    for (const hit of hits) {\n      if (nameLowerCased === hit.title.toLowerCase()) {\n        throw {\n          type: 'EXISTING',\n          message: existingErrorMessage\n        };\n      }\n    }\n\n    return;\n  }\n\n}\nexport const validationSrv = new ValidationSrv();","map":{"version":3,"names":["backendSrv","hitTypes","FOLDER","DASHBOARD","ValidationSrv","validateNewDashboardName","folderId","name","validate","validateNewFolderName","existingErrorMessage","trim","nameLowerCased","toLowerCase","length","type","message","rootName","promises","push","search","folderIds","query","res","Promise","all","hits","concat","hit","title","validationSrv"],"sources":["/home/soula/grafana/public/app/features/manage-dashboards/services/ValidationSrv.ts"],"sourcesContent":["import { backendSrv } from 'app/core/services/backend_srv';\n\nconst hitTypes = {\n  FOLDER: 'dash-folder',\n  DASHBOARD: 'dash-db',\n};\n\nexport class ValidationSrv {\n  rootName = 'general';\n\n  validateNewDashboardName(folderId: any, name: string) {\n    return this.validate(folderId, name, 'A dashboard or a folder with the same name already exists');\n  }\n\n  validateNewFolderName(name?: string) {\n    return this.validate(0, name, 'A folder or dashboard in the general folder with the same name already exists');\n  }\n\n  private async validate(folderId: any, name: string | undefined, existingErrorMessage: string) {\n    name = (name || '').trim();\n    const nameLowerCased = name.toLowerCase();\n\n    if (name.length === 0) {\n      throw {\n        type: 'REQUIRED',\n        message: 'Name is required',\n      };\n    }\n\n    if (folderId === 0 && nameLowerCased === this.rootName) {\n      throw {\n        type: 'EXISTING',\n        message: 'This is a reserved name and cannot be used for a folder.',\n      };\n    }\n\n    const promises = [];\n    promises.push(backendSrv.search({ type: hitTypes.FOLDER, folderIds: [folderId], query: name }));\n    promises.push(backendSrv.search({ type: hitTypes.DASHBOARD, folderIds: [folderId], query: name }));\n\n    const res = await Promise.all(promises);\n    let hits: any[] = [];\n\n    if (res.length > 0 && res[0].length > 0) {\n      hits = res[0];\n    }\n\n    if (res.length > 1 && res[1].length > 0) {\n      hits = hits.concat(res[1]);\n    }\n\n    for (const hit of hits) {\n      if (nameLowerCased === hit.title.toLowerCase()) {\n        throw {\n          type: 'EXISTING',\n          message: existingErrorMessage,\n        };\n      }\n    }\n\n    return;\n  }\n}\n\nexport const validationSrv = new ValidationSrv();\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,+BAA3B;AAEA,MAAMC,QAAQ,GAAG;EACfC,MAAM,EAAE,aADO;EAEfC,SAAS,EAAE;AAFI,CAAjB;AAKA,OAAO,MAAMC,aAAN,CAAoB;EAAA;IAAA,kCACd,SADc;EAAA;;EAGzBC,wBAAwB,CAACC,QAAD,EAAgBC,IAAhB,EAA8B;IACpD,OAAO,KAAKC,QAAL,CAAcF,QAAd,EAAwBC,IAAxB,EAA8B,2DAA9B,CAAP;EACD;;EAEDE,qBAAqB,CAACF,IAAD,EAAgB;IACnC,OAAO,KAAKC,QAAL,CAAc,CAAd,EAAiBD,IAAjB,EAAuB,+EAAvB,CAAP;EACD;;EAEqB,MAARC,QAAQ,CAACF,QAAD,EAAgBC,IAAhB,EAA0CG,oBAA1C,EAAwE;IAC5FH,IAAI,GAAG,CAACA,IAAI,IAAI,EAAT,EAAaI,IAAb,EAAP;IACA,MAAMC,cAAc,GAAGL,IAAI,CAACM,WAAL,EAAvB;;IAEA,IAAIN,IAAI,CAACO,MAAL,KAAgB,CAApB,EAAuB;MACrB,MAAM;QACJC,IAAI,EAAE,UADF;QAEJC,OAAO,EAAE;MAFL,CAAN;IAID;;IAED,IAAIV,QAAQ,KAAK,CAAb,IAAkBM,cAAc,KAAK,KAAKK,QAA9C,EAAwD;MACtD,MAAM;QACJF,IAAI,EAAE,UADF;QAEJC,OAAO,EAAE;MAFL,CAAN;IAID;;IAED,MAAME,QAAQ,GAAG,EAAjB;IACAA,QAAQ,CAACC,IAAT,CAAcnB,UAAU,CAACoB,MAAX,CAAkB;MAAEL,IAAI,EAAEd,QAAQ,CAACC,MAAjB;MAAyBmB,SAAS,EAAE,CAACf,QAAD,CAApC;MAAgDgB,KAAK,EAAEf;IAAvD,CAAlB,CAAd;IACAW,QAAQ,CAACC,IAAT,CAAcnB,UAAU,CAACoB,MAAX,CAAkB;MAAEL,IAAI,EAAEd,QAAQ,CAACE,SAAjB;MAA4BkB,SAAS,EAAE,CAACf,QAAD,CAAvC;MAAmDgB,KAAK,EAAEf;IAA1D,CAAlB,CAAd;IAEA,MAAMgB,GAAG,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYP,QAAZ,CAAlB;IACA,IAAIQ,IAAW,GAAG,EAAlB;;IAEA,IAAIH,GAAG,CAACT,MAAJ,GAAa,CAAb,IAAkBS,GAAG,CAAC,CAAD,CAAH,CAAOT,MAAP,GAAgB,CAAtC,EAAyC;MACvCY,IAAI,GAAGH,GAAG,CAAC,CAAD,CAAV;IACD;;IAED,IAAIA,GAAG,CAACT,MAAJ,GAAa,CAAb,IAAkBS,GAAG,CAAC,CAAD,CAAH,CAAOT,MAAP,GAAgB,CAAtC,EAAyC;MACvCY,IAAI,GAAGA,IAAI,CAACC,MAAL,CAAYJ,GAAG,CAAC,CAAD,CAAf,CAAP;IACD;;IAED,KAAK,MAAMK,GAAX,IAAkBF,IAAlB,EAAwB;MACtB,IAAId,cAAc,KAAKgB,GAAG,CAACC,KAAJ,CAAUhB,WAAV,EAAvB,EAAgD;QAC9C,MAAM;UACJE,IAAI,EAAE,UADF;UAEJC,OAAO,EAAEN;QAFL,CAAN;MAID;IACF;;IAED;EACD;;AAtDwB;AAyD3B,OAAO,MAAMoB,aAAa,GAAG,IAAI1B,aAAJ,EAAtB"},"metadata":{},"sourceType":"module"}