{"ast":null,"code":"var _Icon;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React from 'react';\nimport { readCSV } from '@grafana/data';\nimport { stylesFactory, withTheme } from '../../themes';\nimport { Icon } from '../Icon/Icon';\nimport { TextArea } from '../TextArea/TextArea';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/**\n * Expects the container div to have size set and will fill it 100%\n */\nexport class UnThemedTableInputCSV extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"readCSV\", debounce(() => {\n      const {\n        config\n      } = this.props;\n      const {\n        text\n      } = this.state;\n      this.setState({\n        data: readCSV(text, {\n          config\n        })\n      });\n    }, 150));\n\n    _defineProperty(this, \"onTextChange\", event => {\n      this.setState({\n        text: event.target.value\n      });\n    });\n\n    const {\n      text: _text,\n      config: _config\n    } = props;\n    this.state = {\n      text: _text,\n      data: readCSV(_text, {\n        config: _config\n      })\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      text\n    } = this.state;\n\n    if (text !== prevState.text || this.props.config !== prevProps.config) {\n      this.readCSV();\n    } // If the props text has changed, replace our local version\n\n\n    if (this.props.text !== prevProps.text && this.props.text !== text) {\n      this.setState({\n        text: this.props.text\n      });\n    }\n\n    if (this.state.data !== prevState.data) {\n      this.props.onSeriesParsed(this.state.data, this.state.text);\n    }\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      theme\n    } = this.props;\n    const {\n      data\n    } = this.state;\n    const styles = getStyles(theme);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.tableInputCsv,\n      children: [/*#__PURE__*/_jsx(TextArea, {\n        style: {\n          width,\n          height\n        },\n        placeholder: \"Enter CSV here...\",\n        value: this.state.text,\n        onChange: this.onTextChange,\n        className: styles.textarea\n      }), data && /*#__PURE__*/_jsx(\"footer\", {\n        className: styles.footer,\n        children: data.map((frame, index) => {\n          return /*#__PURE__*/_jsxs(\"span\", {\n            children: [\"Rows:\", frame.length, \", Columns:\", frame.fields.length, \" \\xA0\", _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n              name: \"check-circle\"\n            }))]\n          }, index);\n        })\n      })]\n    });\n  }\n\n}\nexport const TableInputCSV = withTheme(UnThemedTableInputCSV);\nTableInputCSV.displayName = 'TableInputCSV';\nconst getStyles = stylesFactory(theme => {\n  return {\n    tableInputCsv: css`\n      position: relative;\n    `,\n    textarea: css`\n      height: 100%;\n      width: 100%;\n    `,\n    footer: css`\n      position: absolute;\n      bottom: 15px;\n      right: 15px;\n      border: 1px solid #222;\n      background: ${theme.palette.online};\n      padding: 1px ${theme.spacing.xs};\n      font-size: 80%;\n    `\n  };\n});","map":{"version":3,"names":["css","debounce","React","readCSV","stylesFactory","withTheme","Icon","TextArea","UnThemedTableInputCSV","PureComponent","constructor","props","config","text","state","setState","data","event","target","value","componentDidUpdate","prevProps","prevState","onSeriesParsed","render","width","height","theme","styles","getStyles","tableInputCsv","onTextChange","textarea","footer","map","frame","index","length","fields","TableInputCSV","displayName","palette","online","spacing","xs"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/TableInputCSV/TableInputCSV.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme, DataFrame, CSVConfig, readCSV } from '@grafana/data';\n\nimport { stylesFactory, withTheme } from '../../themes';\nimport { Themeable } from '../../types/theme';\nimport { Icon } from '../Icon/Icon';\nimport { TextArea } from '../TextArea/TextArea';\n\ninterface Props extends Themeable {\n  config?: CSVConfig;\n  text: string;\n  width: string | number;\n  height: string | number;\n  onSeriesParsed: (data: DataFrame[], text: string) => void;\n}\n\ninterface State {\n  text: string;\n  data: DataFrame[];\n}\n\n/**\n * Expects the container div to have size set and will fill it 100%\n */\nexport class UnThemedTableInputCSV extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { text, config } = props;\n    this.state = {\n      text,\n      data: readCSV(text, { config }),\n    };\n  }\n\n  readCSV: any = debounce(() => {\n    const { config } = this.props;\n    const { text } = this.state;\n\n    this.setState({ data: readCSV(text, { config }) });\n  }, 150);\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { text } = this.state;\n\n    if (text !== prevState.text || this.props.config !== prevProps.config) {\n      this.readCSV();\n    }\n\n    // If the props text has changed, replace our local version\n    if (this.props.text !== prevProps.text && this.props.text !== text) {\n      this.setState({ text: this.props.text });\n    }\n\n    if (this.state.data !== prevState.data) {\n      this.props.onSeriesParsed(this.state.data, this.state.text);\n    }\n  }\n\n  onTextChange = (event: any) => {\n    this.setState({ text: event.target.value });\n  };\n\n  render() {\n    const { width, height, theme } = this.props;\n    const { data } = this.state;\n    const styles = getStyles(theme);\n    return (\n      <div className={styles.tableInputCsv}>\n        <TextArea\n          style={{ width, height }}\n          placeholder=\"Enter CSV here...\"\n          value={this.state.text}\n          onChange={this.onTextChange}\n          className={styles.textarea}\n        />\n        {data && (\n          <footer className={styles.footer}>\n            {data.map((frame, index) => {\n              return (\n                <span key={index}>\n                  Rows:{frame.length}, Columns:{frame.fields.length} &nbsp;\n                  <Icon name=\"check-circle\" />\n                </span>\n              );\n            })}\n          </footer>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const TableInputCSV = withTheme(UnThemedTableInputCSV);\nTableInputCSV.displayName = 'TableInputCSV';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    tableInputCsv: css`\n      position: relative;\n    `,\n    textarea: css`\n      height: 100%;\n      width: 100%;\n    `,\n    footer: css`\n      position: absolute;\n      bottom: 15px;\n      right: 15px;\n      border: 1px solid #222;\n      background: ${theme.palette.online};\n      padding: 1px ${theme.spacing.xs};\n      font-size: 80%;\n    `,\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}