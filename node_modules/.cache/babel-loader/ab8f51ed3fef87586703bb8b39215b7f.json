{"ast":null,"code":"import { getFolderById, searchFolders } from '../../../../features/manage-dashboards/state/actions';\nimport { PermissionLevelString } from '../../../../types';\n\nasync function getFolders({\n  query,\n  permissionLevel\n}) {\n  const searchHits = await searchFolders(query, permissionLevel);\n  const folders = searchHits.map(searchHit => ({\n    id: searchHit.id,\n    title: searchHit.title,\n    url: searchHit.url\n  }));\n  return folders;\n}\n\nasync function getFoldersWithEntries({\n  query,\n  permissionLevel,\n  extraFolders\n}) {\n  const folders = await getFolders({\n    query,\n    permissionLevel\n  });\n  const extra = extraFolders !== null && extraFolders !== void 0 ? extraFolders : [];\n  const filteredExtra = query ? extra.filter(f => {\n    var _f$title;\n\n    return (_f$title = f.title) === null || _f$title === void 0 ? void 0 : _f$title.toLowerCase().includes(query.toLowerCase());\n  }) : extra;\n\n  if (folders) {\n    return filteredExtra.concat(folders);\n  }\n\n  return filteredExtra;\n}\n\nexport async function getFoldersAsOptions({\n  query,\n  permissionLevel = PermissionLevelString.View,\n  extraFolders = []\n}) {\n  const folders = await getFoldersWithEntries({\n    query,\n    permissionLevel,\n    extraFolders\n  });\n  return folders.map(value => {\n    const option = {\n      value,\n      label: value.title\n    };\n    return option;\n  });\n}\nexport function findOptionWithId(options, id) {\n  return options === null || options === void 0 ? void 0 : options.find(o => {\n    var _o$value;\n\n    return ((_o$value = o.value) === null || _o$value === void 0 ? void 0 : _o$value.id) === id;\n  });\n}\nexport async function getFolderAsOption(folderId) {\n  if (folderId === undefined || folderId === null) {\n    return;\n  }\n\n  try {\n    const {\n      id,\n      title\n    } = await getFolderById(folderId);\n    return {\n      value: {\n        id,\n        title\n      },\n      label: title\n    };\n  } catch (err) {\n    console.error(`Could not find folder with id:${folderId}`);\n  }\n\n  return;\n}","map":{"version":3,"names":["getFolderById","searchFolders","PermissionLevelString","getFolders","query","permissionLevel","searchHits","folders","map","searchHit","id","title","url","getFoldersWithEntries","extraFolders","extra","filteredExtra","filter","f","toLowerCase","includes","concat","getFoldersAsOptions","View","value","option","label","findOptionWithId","options","find","o","getFolderAsOption","folderId","undefined","err","console","error"],"sources":["/home/soula/grafana/public/app/core/components/Select/ReadonlyFolderPicker/api.ts"],"sourcesContent":["import { SelectableValue } from '@grafana/data';\n\nimport { getFolderById, searchFolders } from '../../../../features/manage-dashboards/state/actions';\nimport { FolderInfo, PermissionLevelString } from '../../../../types';\n\nimport { PermissionLevel } from './types';\n\ninterface GetFoldersArgs {\n  query: string;\n  permissionLevel?: PermissionLevel;\n}\n\nasync function getFolders({ query, permissionLevel }: GetFoldersArgs): Promise<FolderInfo[]> {\n  const searchHits = await searchFolders(query, permissionLevel);\n  const folders: FolderInfo[] = searchHits.map((searchHit) => ({\n    id: searchHit.id,\n    title: searchHit.title,\n    url: searchHit.url,\n  }));\n\n  return folders;\n}\n\nexport interface GetFoldersWithEntriesArgs extends GetFoldersArgs {\n  extraFolders?: FolderInfo[];\n}\n\nasync function getFoldersWithEntries({\n  query,\n  permissionLevel,\n  extraFolders,\n}: GetFoldersWithEntriesArgs): Promise<FolderInfo[]> {\n  const folders = await getFolders({ query, permissionLevel });\n  const extra: FolderInfo[] = extraFolders ?? [];\n  const filteredExtra = query ? extra.filter((f) => f.title?.toLowerCase().includes(query.toLowerCase())) : extra;\n  if (folders) {\n    return filteredExtra.concat(folders);\n  }\n\n  return filteredExtra;\n}\n\nexport async function getFoldersAsOptions({\n  query,\n  permissionLevel = PermissionLevelString.View,\n  extraFolders = [],\n}: GetFoldersWithEntriesArgs) {\n  const folders = await getFoldersWithEntries({ query, permissionLevel, extraFolders });\n  return folders.map((value) => {\n    const option: SelectableValue<FolderInfo> = { value, label: value.title };\n    return option;\n  });\n}\n\nexport function findOptionWithId(\n  options?: Array<SelectableValue<FolderInfo>>,\n  id?: number\n): SelectableValue<FolderInfo> | undefined {\n  return options?.find((o) => o.value?.id === id);\n}\n\nexport async function getFolderAsOption(folderId?: number): Promise<SelectableValue<FolderInfo> | undefined> {\n  if (folderId === undefined || folderId === null) {\n    return;\n  }\n\n  try {\n    const { id, title } = await getFolderById(folderId);\n    return { value: { id, title }, label: title };\n  } catch (err) {\n    console.error(`Could not find folder with id:${folderId}`);\n  }\n\n  return;\n}\n"],"mappings":"AAEA,SAASA,aAAT,EAAwBC,aAAxB,QAA6C,sDAA7C;AACA,SAAqBC,qBAArB,QAAkD,mBAAlD;;AASA,eAAeC,UAAf,CAA0B;EAAEC,KAAF;EAASC;AAAT,CAA1B,EAA6F;EAC3F,MAAMC,UAAU,GAAG,MAAML,aAAa,CAACG,KAAD,EAAQC,eAAR,CAAtC;EACA,MAAME,OAAqB,GAAGD,UAAU,CAACE,GAAX,CAAgBC,SAAD,KAAgB;IAC3DC,EAAE,EAAED,SAAS,CAACC,EAD6C;IAE3DC,KAAK,EAAEF,SAAS,CAACE,KAF0C;IAG3DC,GAAG,EAAEH,SAAS,CAACG;EAH4C,CAAhB,CAAf,CAA9B;EAMA,OAAOL,OAAP;AACD;;AAMD,eAAeM,qBAAf,CAAqC;EACnCT,KADmC;EAEnCC,eAFmC;EAGnCS;AAHmC,CAArC,EAIqD;EACnD,MAAMP,OAAO,GAAG,MAAMJ,UAAU,CAAC;IAAEC,KAAF;IAASC;EAAT,CAAD,CAAhC;EACA,MAAMU,KAAmB,GAAGD,YAAH,aAAGA,YAAH,cAAGA,YAAH,GAAmB,EAA5C;EACA,MAAME,aAAa,GAAGZ,KAAK,GAAGW,KAAK,CAACE,MAAN,CAAcC,CAAD;IAAA;;IAAA,mBAAOA,CAAC,CAACP,KAAT,6CAAO,SAASQ,WAAT,GAAuBC,QAAvB,CAAgChB,KAAK,CAACe,WAAN,EAAhC,CAAP;EAAA,CAAb,CAAH,GAA+EJ,KAA1G;;EACA,IAAIR,OAAJ,EAAa;IACX,OAAOS,aAAa,CAACK,MAAd,CAAqBd,OAArB,CAAP;EACD;;EAED,OAAOS,aAAP;AACD;;AAED,OAAO,eAAeM,mBAAf,CAAmC;EACxClB,KADwC;EAExCC,eAAe,GAAGH,qBAAqB,CAACqB,IAFA;EAGxCT,YAAY,GAAG;AAHyB,CAAnC,EAIuB;EAC5B,MAAMP,OAAO,GAAG,MAAMM,qBAAqB,CAAC;IAAET,KAAF;IAASC,eAAT;IAA0BS;EAA1B,CAAD,CAA3C;EACA,OAAOP,OAAO,CAACC,GAAR,CAAagB,KAAD,IAAW;IAC5B,MAAMC,MAAmC,GAAG;MAAED,KAAF;MAASE,KAAK,EAAEF,KAAK,CAACb;IAAtB,CAA5C;IACA,OAAOc,MAAP;EACD,CAHM,CAAP;AAID;AAED,OAAO,SAASE,gBAAT,CACLC,OADK,EAELlB,EAFK,EAGoC;EACzC,OAAOkB,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEC,IAAT,CAAeC,CAAD;IAAA;;IAAA,OAAO,aAAAA,CAAC,CAACN,KAAF,sDAASd,EAAT,MAAgBA,EAAvB;EAAA,CAAd,CAAP;AACD;AAED,OAAO,eAAeqB,iBAAf,CAAiCC,QAAjC,EAAsG;EAC3G,IAAIA,QAAQ,KAAKC,SAAb,IAA0BD,QAAQ,KAAK,IAA3C,EAAiD;IAC/C;EACD;;EAED,IAAI;IACF,MAAM;MAAEtB,EAAF;MAAMC;IAAN,IAAgB,MAAMX,aAAa,CAACgC,QAAD,CAAzC;IACA,OAAO;MAAER,KAAK,EAAE;QAAEd,EAAF;QAAMC;MAAN,CAAT;MAAwBe,KAAK,EAAEf;IAA/B,CAAP;EACD,CAHD,CAGE,OAAOuB,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAe,iCAAgCJ,QAAS,EAAxD;EACD;;EAED;AACD"},"metadata":{},"sourceType":"module"}