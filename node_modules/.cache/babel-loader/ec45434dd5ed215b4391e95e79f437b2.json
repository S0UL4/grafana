{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Subscription } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport { DataHoverClearEvent, DataHoverEvent, FieldMatcherID, fieldMatchers, LegacyGraphHoverEvent } from '@grafana/data';\nimport { PanelContextRoot } from '../PanelChrome/PanelContext';\nimport { VizLayout } from '../VizLayout/VizLayout';\nimport { UPlotChart } from '../uPlot/Plot';\nimport { findMidPointYPosition, pluginLog } from '../uPlot/utils';\nimport { preparePlotFrame as defaultPreparePlotFrame } from './utils';\n/**\n * @internal -- not a public API\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const FIXED_UNIT = '__fixed';\n/**\n * @internal -- not a public API\n */\n\nfunction sameProps(prevProps, nextProps, propsToDiff = []) {\n  for (const propName of propsToDiff) {\n    if (typeof propName === 'function') {\n      if (!propName(prevProps, nextProps)) {\n        return false;\n      }\n    } else if (nextProps[propName] !== prevProps[propName]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @internal -- not a public API\n */\n\n\n/**\n * \"Time as X\" core component, expects ascending x\n */\nexport class GraphNG extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"panelContext\", {});\n\n    _defineProperty(this, \"plotInstance\", void 0);\n\n    _defineProperty(this, \"subscription\", new Subscription());\n\n    _defineProperty(this, \"getTimeRange\", () => this.props.timeRange);\n\n    let state = this.prepState(props);\n    state.alignedData = state.config.prepData([state.alignedFrame]);\n    this.state = state;\n    this.plotInstance = /*#__PURE__*/React.createRef();\n  }\n\n  prepState(props, withConfig = true) {\n    let state = null;\n    const {\n      frames,\n      fields,\n      preparePlotFrame\n    } = props;\n    const preparePlotFrameFn = preparePlotFrame || defaultPreparePlotFrame;\n    const alignedFrame = preparePlotFrameFn(frames, fields || {\n      x: fieldMatchers.get(FieldMatcherID.firstTimeField).get({}),\n      y: fieldMatchers.get(FieldMatcherID.numeric).get({})\n    }, props.timeRange);\n    pluginLog('GraphNG', false, 'data aligned', alignedFrame);\n\n    if (alignedFrame) {\n      var _this$state;\n\n      let config = (_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.config;\n\n      if (withConfig) {\n        config = props.prepConfig(alignedFrame, this.props.frames, this.getTimeRange);\n        pluginLog('GraphNG', false, 'config prepared', config);\n      }\n\n      state = {\n        alignedFrame,\n        config\n      };\n      pluginLog('GraphNG', false, 'data prepared', state.alignedData);\n    }\n\n    return state;\n  }\n\n  handleCursorUpdate(evt) {\n    var _evt$payload, _evt$payload$point;\n\n    const time = (_evt$payload = evt.payload) === null || _evt$payload === void 0 ? void 0 : (_evt$payload$point = _evt$payload.point) === null || _evt$payload$point === void 0 ? void 0 : _evt$payload$point.time;\n    const u = this.plotInstance.current;\n\n    if (u && time) {\n      // Try finding left position on time axis\n      const left = u.valToPos(time, 'x');\n      let top;\n\n      if (left) {\n        // find midpoint between points at current idx\n        top = findMidPointYPosition(u, u.posToIdx(left));\n      }\n\n      if (!top || !left) {\n        return;\n      }\n\n      u.setCursor({\n        left,\n        top\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.panelContext = this.context;\n    const {\n      eventBus\n    } = this.panelContext;\n    this.subscription.add(eventBus.getStream(DataHoverEvent).pipe(throttleTime(50)).subscribe({\n      next: evt => {\n        if (eventBus === evt.origin) {\n          return;\n        }\n\n        this.handleCursorUpdate(evt);\n      }\n    })); // Legacy events (from flot graph)\n\n    this.subscription.add(eventBus.getStream(LegacyGraphHoverEvent).pipe(throttleTime(50)).subscribe({\n      next: evt => this.handleCursorUpdate(evt)\n    }));\n    this.subscription.add(eventBus.getStream(DataHoverClearEvent).pipe(throttleTime(50)).subscribe({\n      next: () => {\n        var _this$plotInstance;\n\n        const u = (_this$plotInstance = this.plotInstance) === null || _this$plotInstance === void 0 ? void 0 : _this$plotInstance.current;\n\n        if (u) {\n          u.setCursor({\n            left: -10,\n            top: -10\n          });\n        }\n      }\n    }));\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      frames,\n      structureRev,\n      timeZone,\n      propsToDiff\n    } = this.props;\n    const propsChanged = !sameProps(prevProps, this.props, propsToDiff);\n\n    if (frames !== prevProps.frames || propsChanged || timeZone !== prevProps.timeZone) {\n      let newState = this.prepState(this.props, false);\n\n      if (newState) {\n        const shouldReconfig = this.state.config === undefined || timeZone !== prevProps.timeZone || structureRev !== prevProps.structureRev || !structureRev || propsChanged;\n\n        if (shouldReconfig) {\n          newState.config = this.props.prepConfig(newState.alignedFrame, this.props.frames, this.getTimeRange);\n          pluginLog('GraphNG', false, 'config recreated', newState.config);\n        }\n\n        newState.alignedData = newState.config.prepData([newState.alignedFrame]);\n        this.setState(newState);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      children,\n      timeRange,\n      renderLegend\n    } = this.props;\n    const {\n      config,\n      alignedFrame,\n      alignedData\n    } = this.state;\n\n    if (!config) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsx(VizLayout, {\n      width: width,\n      height: height,\n      legend: renderLegend(config),\n      children: (vizWidth, vizHeight) => /*#__PURE__*/_jsx(UPlotChart, {\n        config: config,\n        data: alignedData,\n        width: vizWidth,\n        height: vizHeight,\n        timeRange: timeRange,\n        plotRef: u => this.plotInstance.current = u,\n        children: children ? children(config, alignedFrame) : null\n      })\n    });\n  }\n\n}\n\n_defineProperty(GraphNG, \"contextType\", PanelContextRoot);","map":{"version":3,"names":["React","Subscription","throttleTime","DataHoverClearEvent","DataHoverEvent","FieldMatcherID","fieldMatchers","LegacyGraphHoverEvent","PanelContextRoot","VizLayout","UPlotChart","findMidPointYPosition","pluginLog","preparePlotFrame","defaultPreparePlotFrame","FIXED_UNIT","sameProps","prevProps","nextProps","propsToDiff","propName","GraphNG","Component","constructor","props","timeRange","state","prepState","alignedData","config","prepData","alignedFrame","plotInstance","createRef","withConfig","frames","fields","preparePlotFrameFn","x","get","firstTimeField","y","numeric","prepConfig","getTimeRange","handleCursorUpdate","evt","time","payload","point","u","current","left","valToPos","top","posToIdx","setCursor","componentDidMount","panelContext","context","eventBus","subscription","add","getStream","pipe","subscribe","next","origin","componentDidUpdate","structureRev","timeZone","propsChanged","newState","shouldReconfig","undefined","setState","componentWillUnmount","unsubscribe","render","width","height","children","renderLegend","vizWidth","vizHeight"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/GraphNG/GraphNG.tsx"],"sourcesContent":["import React from 'react';\nimport { Subscription } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport uPlot, { AlignedData } from 'uplot';\n\nimport {\n  DataFrame,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  Field,\n  FieldMatcherID,\n  fieldMatchers,\n  LegacyGraphHoverEvent,\n  TimeRange,\n  TimeZone,\n} from '@grafana/data';\nimport { VizLegendOptions } from '@grafana/schema';\n\nimport { Themeable2 } from '../../types';\nimport { PanelContext, PanelContextRoot } from '../PanelChrome/PanelContext';\nimport { VizLayout } from '../VizLayout/VizLayout';\nimport { UPlotChart } from '../uPlot/Plot';\nimport { AxisProps } from '../uPlot/config/UPlotAxisBuilder';\nimport { Renderers, UPlotConfigBuilder } from '../uPlot/config/UPlotConfigBuilder';\nimport { ScaleProps } from '../uPlot/config/UPlotScaleBuilder';\nimport { findMidPointYPosition, pluginLog } from '../uPlot/utils';\n\nimport { GraphNGLegendEvent, XYFieldMatchers } from './types';\nimport { preparePlotFrame as defaultPreparePlotFrame } from './utils';\n\n/**\n * @internal -- not a public API\n */\nexport const FIXED_UNIT = '__fixed';\n\n/**\n * @internal -- not a public API\n */\nexport type PropDiffFn<T extends any = any> = (prev: T, next: T) => boolean;\n\nexport interface GraphNGProps extends Themeable2 {\n  frames: DataFrame[];\n  structureRev?: number; // a number that will change when the frames[] structure changes\n  width: number;\n  height: number;\n  timeRange: TimeRange;\n  timeZone: TimeZone;\n  legend: VizLegendOptions;\n  fields?: XYFieldMatchers; // default will assume timeseries data\n  renderers?: Renderers;\n  tweakScale?: (opts: ScaleProps, forField: Field) => ScaleProps;\n  tweakAxis?: (opts: AxisProps, forField: Field) => AxisProps;\n  onLegendClick?: (event: GraphNGLegendEvent) => void;\n  children?: (builder: UPlotConfigBuilder, alignedFrame: DataFrame) => React.ReactNode;\n  prepConfig: (alignedFrame: DataFrame, allFrames: DataFrame[], getTimeRange: () => TimeRange) => UPlotConfigBuilder;\n  propsToDiff?: Array<string | PropDiffFn>;\n  preparePlotFrame?: (frames: DataFrame[], dimFields: XYFieldMatchers) => DataFrame;\n  renderLegend: (config: UPlotConfigBuilder) => React.ReactElement | null;\n\n  /**\n   * needed for propsToDiff to re-init the plot & config\n   * this is a generic approach to plot re-init, without having to specify which panel-level options\n   * should cause invalidation. we can drop this in favor of something like panelOptionsRev that gets passed in\n   * similar to structureRev. then we can drop propsToDiff entirely.\n   */\n  options?: Record<string, any>;\n}\n\nfunction sameProps(prevProps: any, nextProps: any, propsToDiff: Array<string | PropDiffFn> = []) {\n  for (const propName of propsToDiff) {\n    if (typeof propName === 'function') {\n      if (!propName(prevProps, nextProps)) {\n        return false;\n      }\n    } else if (nextProps[propName] !== prevProps[propName]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @internal -- not a public API\n */\nexport interface GraphNGState {\n  alignedFrame: DataFrame;\n  alignedData?: AlignedData;\n  config?: UPlotConfigBuilder;\n}\n\n/**\n * \"Time as X\" core component, expects ascending x\n */\nexport class GraphNG extends React.Component<GraphNGProps, GraphNGState> {\n  static contextType = PanelContextRoot;\n  panelContext: PanelContext = {} as PanelContext;\n  private plotInstance: React.RefObject<uPlot>;\n\n  private subscription = new Subscription();\n\n  constructor(props: GraphNGProps) {\n    super(props);\n    let state = this.prepState(props);\n    state.alignedData = state.config!.prepData!([state.alignedFrame]) as AlignedData;\n    this.state = state;\n    this.plotInstance = React.createRef();\n  }\n\n  getTimeRange = () => this.props.timeRange;\n\n  prepState(props: GraphNGProps, withConfig = true) {\n    let state: GraphNGState = null as any;\n\n    const { frames, fields, preparePlotFrame } = props;\n\n    const preparePlotFrameFn = preparePlotFrame || defaultPreparePlotFrame;\n\n    const alignedFrame = preparePlotFrameFn(\n      frames,\n      fields || {\n        x: fieldMatchers.get(FieldMatcherID.firstTimeField).get({}),\n        y: fieldMatchers.get(FieldMatcherID.numeric).get({}),\n      },\n      props.timeRange\n    );\n    pluginLog('GraphNG', false, 'data aligned', alignedFrame);\n\n    if (alignedFrame) {\n      let config = this.state?.config;\n\n      if (withConfig) {\n        config = props.prepConfig(alignedFrame, this.props.frames, this.getTimeRange);\n        pluginLog('GraphNG', false, 'config prepared', config);\n      }\n\n      state = {\n        alignedFrame,\n        config,\n      };\n\n      pluginLog('GraphNG', false, 'data prepared', state.alignedData);\n    }\n\n    return state;\n  }\n\n  handleCursorUpdate(evt: DataHoverEvent | LegacyGraphHoverEvent) {\n    const time = evt.payload?.point?.time;\n    const u = this.plotInstance.current;\n    if (u && time) {\n      // Try finding left position on time axis\n      const left = u.valToPos(time, 'x');\n      let top;\n      if (left) {\n        // find midpoint between points at current idx\n        top = findMidPointYPosition(u, u.posToIdx(left));\n      }\n\n      if (!top || !left) {\n        return;\n      }\n\n      u.setCursor({\n        left,\n        top,\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.panelContext = this.context as PanelContext;\n    const { eventBus } = this.panelContext;\n\n    this.subscription.add(\n      eventBus\n        .getStream(DataHoverEvent)\n        .pipe(throttleTime(50))\n        .subscribe({\n          next: (evt) => {\n            if (eventBus === evt.origin) {\n              return;\n            }\n            this.handleCursorUpdate(evt);\n          },\n        })\n    );\n\n    // Legacy events (from flot graph)\n    this.subscription.add(\n      eventBus\n        .getStream(LegacyGraphHoverEvent)\n        .pipe(throttleTime(50))\n        .subscribe({\n          next: (evt) => this.handleCursorUpdate(evt),\n        })\n    );\n\n    this.subscription.add(\n      eventBus\n        .getStream(DataHoverClearEvent)\n        .pipe(throttleTime(50))\n        .subscribe({\n          next: () => {\n            const u = this.plotInstance?.current;\n\n            if (u) {\n              u.setCursor({\n                left: -10,\n                top: -10,\n              });\n            }\n          },\n        })\n    );\n  }\n\n  componentDidUpdate(prevProps: GraphNGProps) {\n    const { frames, structureRev, timeZone, propsToDiff } = this.props;\n\n    const propsChanged = !sameProps(prevProps, this.props, propsToDiff);\n\n    if (frames !== prevProps.frames || propsChanged || timeZone !== prevProps.timeZone) {\n      let newState = this.prepState(this.props, false);\n\n      if (newState) {\n        const shouldReconfig =\n          this.state.config === undefined ||\n          timeZone !== prevProps.timeZone ||\n          structureRev !== prevProps.structureRev ||\n          !structureRev ||\n          propsChanged;\n\n        if (shouldReconfig) {\n          newState.config = this.props.prepConfig(newState.alignedFrame, this.props.frames, this.getTimeRange);\n          pluginLog('GraphNG', false, 'config recreated', newState.config);\n        }\n\n        newState.alignedData = newState.config!.prepData!([newState.alignedFrame]) as AlignedData;\n\n        this.setState(newState);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  render() {\n    const { width, height, children, timeRange, renderLegend } = this.props;\n    const { config, alignedFrame, alignedData } = this.state;\n\n    if (!config) {\n      return null;\n    }\n\n    return (\n      <VizLayout width={width} height={height} legend={renderLegend(config)}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart\n            config={config}\n            data={alignedData!}\n            width={vizWidth}\n            height={vizHeight}\n            timeRange={timeRange}\n            plotRef={(u) => ((this.plotInstance as React.MutableRefObject<uPlot>).current = u)}\n          >\n            {children ? children(config, alignedFrame) : null}\n          </UPlotChart>\n        )}\n      </VizLayout>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}