{"ast":null,"code":"var _div, _br;\n\nimport React from 'react';\nimport { Container } from '@grafana/ui';\nimport { AddLayerButton } from 'app/core/components/Layers/AddLayerButton';\nimport { LayerDragDropList } from 'app/core/components/Layers/LayerDragDropList';\nimport { getLayersOptions } from '../layers/registry';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const LayersEditor = props => {\n  var _props$context$instan, _layers$selected;\n\n  const {\n    layers,\n    selected,\n    actions\n  } = (_props$context$instan = props.context.instanceState) !== null && _props$context$instan !== void 0 ? _props$context$instan : {};\n\n  if (!layers || !actions) {\n    return _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n      children: \"No layers?\"\n    }));\n  }\n\n  const onDragEnd = result => {\n    var _props$context$instan2;\n\n    if (!result.destination) {\n      return;\n    }\n\n    const {\n      layers,\n      actions\n    } = (_props$context$instan2 = props.context.instanceState) !== null && _props$context$instan2 !== void 0 ? _props$context$instan2 : {};\n\n    if (!layers || !actions) {\n      return;\n    } // account for the reverse order and offset (0 is baselayer)\n\n\n    const count = layers.length - 1;\n    const src = (result.source.index - count) * -1;\n    const dst = (result.destination.index - count) * -1;\n    actions.reorder(src, dst);\n  };\n\n  const onSelect = element => {\n    actions.selectLayer(element.options.name);\n  };\n\n  const onDelete = element => {\n    actions.deleteLayer(element.options.name);\n  };\n\n  const getLayerInfo = element => {\n    return element.options.type;\n  };\n\n  const onNameChange = (element, name) => {\n    element.onChange(Object.assign({}, element.options, {\n      name\n    }));\n  };\n\n  const selection = selected ? [(_layers$selected = layers[selected]) === null || _layers$selected === void 0 ? void 0 : _layers$selected.getName()] : [];\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Container, {\n      children: /*#__PURE__*/_jsx(AddLayerButton, {\n        onChange: v => actions.addlayer(v.value),\n        options: getLayersOptions(false).options,\n        label: 'Add layer'\n      })\n    }), _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsx(LayerDragDropList, {\n      layers: layers,\n      showActions: () => layers.length > 2 // 2 because base layer is not counted!\n      ,\n      getLayerInfo: getLayerInfo,\n      onDragEnd: onDragEnd,\n      onSelect: onSelect,\n      onDelete: onDelete,\n      selection: selection,\n      excludeBaseLayer: true,\n      onNameChange: onNameChange,\n      verifyLayerNameUniqueness: actions.canRename\n    })]\n  });\n};","map":{"version":3,"names":["React","Container","AddLayerButton","LayerDragDropList","getLayersOptions","LayersEditor","props","layers","selected","actions","context","instanceState","onDragEnd","result","destination","count","length","src","source","index","dst","reorder","onSelect","element","selectLayer","options","name","onDelete","deleteLayer","getLayerInfo","type","onNameChange","onChange","selection","getName","v","addlayer","value","canRename"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/editor/LayersEditor.tsx"],"sourcesContent":["import React from 'react';\nimport { DropResult } from 'react-beautiful-dnd';\n\nimport { StandardEditorProps } from '@grafana/data';\nimport { Container } from '@grafana/ui';\nimport { AddLayerButton } from 'app/core/components/Layers/AddLayerButton';\nimport { LayerDragDropList } from 'app/core/components/Layers/LayerDragDropList';\n\nimport { GeomapInstanceState } from '../GeomapPanel';\nimport { getLayersOptions } from '../layers/registry';\nimport { GeomapPanelOptions, MapLayerState } from '../types';\n\ntype LayersEditorProps = StandardEditorProps<any, any, GeomapPanelOptions, GeomapInstanceState>;\n\nexport const LayersEditor = (props: LayersEditorProps) => {\n  const { layers, selected, actions } = props.context.instanceState ?? {};\n  if (!layers || !actions) {\n    return <div>No layers?</div>;\n  }\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const { layers, actions } = props.context.instanceState ?? {};\n    if (!layers || !actions) {\n      return;\n    }\n\n    // account for the reverse order and offset (0 is baselayer)\n    const count = layers.length - 1;\n    const src = (result.source.index - count) * -1;\n    const dst = (result.destination.index - count) * -1;\n\n    actions.reorder(src, dst);\n  };\n\n  const onSelect = (element: MapLayerState<any>) => {\n    actions.selectLayer(element.options.name);\n  };\n\n  const onDelete = (element: MapLayerState<any>) => {\n    actions.deleteLayer(element.options.name);\n  };\n\n  const getLayerInfo = (element: MapLayerState<any>) => {\n    return element.options.type;\n  };\n\n  const onNameChange = (element: MapLayerState<any>, name: string) => {\n    element.onChange({ ...element.options, name });\n  };\n\n  const selection = selected ? [layers[selected]?.getName()] : [];\n\n  return (\n    <>\n      <Container>\n        <AddLayerButton\n          onChange={(v) => actions.addlayer(v.value!)}\n          options={getLayersOptions(false).options}\n          label={'Add layer'}\n        />\n      </Container>\n      <br />\n\n      <LayerDragDropList\n        layers={layers}\n        showActions={() => layers.length > 2} // 2 because base layer is not counted!\n        getLayerInfo={getLayerInfo}\n        onDragEnd={onDragEnd}\n        onSelect={onSelect}\n        onDelete={onDelete}\n        selection={selection}\n        excludeBaseLayer\n        onNameChange={onNameChange}\n        verifyLayerNameUniqueness={actions.canRename}\n      />\n    </>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,2CAA/B;AACA,SAASC,iBAAT,QAAkC,8CAAlC;AAGA,SAASC,gBAAT,QAAiC,oBAAjC;;;;AAKA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAA8B;EAAA;;EACxD,MAAM;IAAEC,MAAF;IAAUC,QAAV;IAAoBC;EAApB,6BAAgCH,KAAK,CAACI,OAAN,CAAcC,aAA9C,yEAA+D,EAArE;;EACA,IAAI,CAACJ,MAAD,IAAW,CAACE,OAAhB,EAAyB;IACvB,oCAAO;MAAA;IAAA,EAAP;EACD;;EAED,MAAMG,SAAS,GAAIC,MAAD,IAAwB;IAAA;;IACxC,IAAI,CAACA,MAAM,CAACC,WAAZ,EAAyB;MACvB;IACD;;IAED,MAAM;MAAEP,MAAF;MAAUE;IAAV,8BAAsBH,KAAK,CAACI,OAAN,CAAcC,aAApC,2EAAqD,EAA3D;;IACA,IAAI,CAACJ,MAAD,IAAW,CAACE,OAAhB,EAAyB;MACvB;IACD,CARuC,CAUxC;;;IACA,MAAMM,KAAK,GAAGR,MAAM,CAACS,MAAP,GAAgB,CAA9B;IACA,MAAMC,GAAG,GAAG,CAACJ,MAAM,CAACK,MAAP,CAAcC,KAAd,GAAsBJ,KAAvB,IAAgC,CAAC,CAA7C;IACA,MAAMK,GAAG,GAAG,CAACP,MAAM,CAACC,WAAP,CAAmBK,KAAnB,GAA2BJ,KAA5B,IAAqC,CAAC,CAAlD;IAEAN,OAAO,CAACY,OAAR,CAAgBJ,GAAhB,EAAqBG,GAArB;EACD,CAhBD;;EAkBA,MAAME,QAAQ,GAAIC,OAAD,IAAiC;IAChDd,OAAO,CAACe,WAAR,CAAoBD,OAAO,CAACE,OAAR,CAAgBC,IAApC;EACD,CAFD;;EAIA,MAAMC,QAAQ,GAAIJ,OAAD,IAAiC;IAChDd,OAAO,CAACmB,WAAR,CAAoBL,OAAO,CAACE,OAAR,CAAgBC,IAApC;EACD,CAFD;;EAIA,MAAMG,YAAY,GAAIN,OAAD,IAAiC;IACpD,OAAOA,OAAO,CAACE,OAAR,CAAgBK,IAAvB;EACD,CAFD;;EAIA,MAAMC,YAAY,GAAG,CAACR,OAAD,EAA8BG,IAA9B,KAA+C;IAClEH,OAAO,CAACS,QAAR,mBAAsBT,OAAO,CAACE,OAA9B;MAAuCC;IAAvC;EACD,CAFD;;EAIA,MAAMO,SAAS,GAAGzB,QAAQ,GAAG,qBAACD,MAAM,CAACC,QAAD,CAAP,qDAAC,iBAAkB0B,OAAlB,EAAD,CAAH,GAAmC,EAA7D;EAEA,oBACE;IAAA,wBACE,KAAC,SAAD;MAAA,uBACE,KAAC,cAAD;QACE,QAAQ,EAAGC,CAAD,IAAO1B,OAAO,CAAC2B,QAAR,CAAiBD,CAAC,CAACE,KAAnB,CADnB;QAEE,OAAO,EAAEjC,gBAAgB,CAAC,KAAD,CAAhB,CAAwBqB,OAFnC;QAGE,KAAK,EAAE;MAHT;IADF,EADF,6BAQE,cARF,gBAUE,KAAC,iBAAD;MACE,MAAM,EAAElB,MADV;MAEE,WAAW,EAAE,MAAMA,MAAM,CAACS,MAAP,GAAgB,CAFrC,CAEwC;MAFxC;MAGE,YAAY,EAAEa,YAHhB;MAIE,SAAS,EAAEjB,SAJb;MAKE,QAAQ,EAAEU,QALZ;MAME,QAAQ,EAAEK,QANZ;MAOE,SAAS,EAAEM,SAPb;MAQE,gBAAgB,MARlB;MASE,YAAY,EAAEF,YAThB;MAUE,yBAAyB,EAAEtB,OAAO,CAAC6B;IAVrC,EAVF;EAAA,EADF;AAyBD,CAnEM"},"metadata":{},"sourceType":"module"}