{"ast":null,"code":"var _h, _Button;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { featureEnabled } from '@grafana/runtime';\nimport { Alert, Button, LegacyForms } from '@grafana/ui';\nconst {\n  FormField\n} = LegacyForms;\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AppNotificationSeverity, AccessControlAction } from 'app/types';\nimport { loadLdapState, loadLdapSyncStatus, loadUserMapping, clearUserError, clearUserMappingInfo } from '../state/actions';\nimport { LdapConnectionStatus } from './LdapConnectionStatus';\nimport { LdapSyncInfo } from './LdapSyncInfo';\nimport { LdapUserInfo } from './LdapUserInfo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport class LdapPage extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isLoading: true\n    });\n\n    _defineProperty(this, \"search\", event => {\n      event.preventDefault();\n      const username = event.target.elements['username'].value;\n\n      if (username) {\n        this.fetchUserMapping(username);\n      }\n    });\n\n    _defineProperty(this, \"onClearUserError\", () => {\n      this.props.clearUserError();\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      clearUserMappingInfo,\n      queryParams\n    } = this.props;\n    await clearUserMappingInfo();\n    await this.fetchLDAPStatus();\n\n    if (queryParams.username) {\n      await this.fetchUserMapping(queryParams.username);\n    }\n\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  async fetchLDAPStatus() {\n    const {\n      loadLdapState,\n      loadLdapSyncStatus\n    } = this.props;\n    return Promise.all([loadLdapState(), loadLdapSyncStatus()]);\n  }\n\n  async fetchUserMapping(username) {\n    const {\n      loadUserMapping\n    } = this.props;\n    return await loadUserMapping(username);\n  }\n\n  render() {\n    const {\n      ldapUser,\n      userError,\n      ldapError,\n      ldapSyncInfo,\n      ldapConnectionInfo,\n      navModel,\n      queryParams\n    } = this.props;\n    const {\n      isLoading\n    } = this.state;\n    const canReadLDAPUser = contextSrv.hasPermission(AccessControlAction.LDAPUsersRead);\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: navModel,\n      children: /*#__PURE__*/_jsx(Page.Contents, {\n        isLoading: isLoading,\n        children: /*#__PURE__*/_jsxs(_Fragment, {\n          children: [ldapError && ldapError.title && /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-group\",\n            children: /*#__PURE__*/_jsx(Alert, {\n              title: ldapError.title,\n              severity: AppNotificationSeverity.Error,\n              children: ldapError.body\n            })\n          }), /*#__PURE__*/_jsx(LdapConnectionStatus, {\n            ldapConnectionInfo: ldapConnectionInfo\n          }), featureEnabled('ldapsync') && ldapSyncInfo && /*#__PURE__*/_jsx(LdapSyncInfo, {\n            ldapSyncInfo: ldapSyncInfo\n          }), canReadLDAPUser && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n              className: \"page-heading\",\n              children: \"Test user mapping\"\n            })), /*#__PURE__*/_jsx(\"div\", {\n              className: \"gf-form-group\",\n              children: /*#__PURE__*/_jsxs(\"form\", {\n                onSubmit: this.search,\n                className: \"gf-form-inline\",\n                children: [/*#__PURE__*/_jsx(FormField, {\n                  label: \"Username\",\n                  labelWidth: 8,\n                  inputWidth: 30,\n                  type: \"text\",\n                  id: \"username\",\n                  name: \"username\",\n                  defaultValue: queryParams.username\n                }), _Button || (_Button = /*#__PURE__*/_jsx(Button, {\n                  type: \"submit\",\n                  children: \"Run\"\n                }))]\n              })\n            }), userError && userError.title && /*#__PURE__*/_jsx(\"div\", {\n              className: \"gf-form-group\",\n              children: /*#__PURE__*/_jsx(Alert, {\n                title: userError.title,\n                severity: AppNotificationSeverity.Error,\n                onRemove: this.onClearUserError,\n                children: userError.body\n              })\n            }), ldapUser && /*#__PURE__*/_jsx(LdapUserInfo, {\n              ldapUser: ldapUser,\n              showAttributeMapping: true\n            })]\n          })]\n        })\n      })\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  navModel: getNavModel(state.navIndex, 'ldap'),\n  ldapConnectionInfo: state.ldap.connectionInfo,\n  ldapUser: state.ldap.user,\n  ldapSyncInfo: state.ldap.syncInfo,\n  userError: state.ldap.userError,\n  ldapError: state.ldap.ldapError\n});\n\nconst mapDispatchToProps = {\n  loadLdapState,\n  loadLdapSyncStatus,\n  loadUserMapping,\n  clearUserError,\n  clearUserMappingInfo\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connector(LdapPage);","map":{"version":3,"names":["React","PureComponent","connect","featureEnabled","Alert","Button","LegacyForms","FormField","Page","contextSrv","getNavModel","AppNotificationSeverity","AccessControlAction","loadLdapState","loadLdapSyncStatus","loadUserMapping","clearUserError","clearUserMappingInfo","LdapConnectionStatus","LdapSyncInfo","LdapUserInfo","LdapPage","isLoading","event","preventDefault","username","target","elements","value","fetchUserMapping","props","componentDidMount","queryParams","fetchLDAPStatus","setState","Promise","all","render","ldapUser","userError","ldapError","ldapSyncInfo","ldapConnectionInfo","navModel","state","canReadLDAPUser","hasPermission","LDAPUsersRead","title","Error","body","search","onClearUserError","mapStateToProps","navIndex","ldap","connectionInfo","user","syncInfo","mapDispatchToProps","connector"],"sources":["/home/soula/grafana/public/app/features/admin/ldap/LdapPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { Alert, Button, LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport {\n  AppNotificationSeverity,\n  LdapError,\n  LdapUser,\n  StoreState,\n  SyncInfo,\n  LdapConnectionInfo,\n  AccessControlAction,\n} from 'app/types';\n\nimport {\n  loadLdapState,\n  loadLdapSyncStatus,\n  loadUserMapping,\n  clearUserError,\n  clearUserMappingInfo,\n} from '../state/actions';\n\nimport { LdapConnectionStatus } from './LdapConnectionStatus';\nimport { LdapSyncInfo } from './LdapSyncInfo';\nimport { LdapUserInfo } from './LdapUserInfo';\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { username?: string }> {\n  navModel: NavModel;\n  ldapConnectionInfo: LdapConnectionInfo;\n  ldapUser?: LdapUser;\n  ldapSyncInfo?: SyncInfo;\n  ldapError?: LdapError;\n  userError?: LdapError;\n}\n\ninterface State {\n  isLoading: boolean;\n}\n\nexport class LdapPage extends PureComponent<Props, State> {\n  state = {\n    isLoading: true,\n  };\n\n  async componentDidMount() {\n    const { clearUserMappingInfo, queryParams } = this.props;\n    await clearUserMappingInfo();\n    await this.fetchLDAPStatus();\n\n    if (queryParams.username) {\n      await this.fetchUserMapping(queryParams.username);\n    }\n\n    this.setState({ isLoading: false });\n  }\n\n  async fetchLDAPStatus() {\n    const { loadLdapState, loadLdapSyncStatus } = this.props;\n    return Promise.all([loadLdapState(), loadLdapSyncStatus()]);\n  }\n\n  async fetchUserMapping(username: string) {\n    const { loadUserMapping } = this.props;\n    return await loadUserMapping(username);\n  }\n\n  search = (event: any) => {\n    event.preventDefault();\n    const username = event.target.elements['username'].value;\n    if (username) {\n      this.fetchUserMapping(username);\n    }\n  };\n\n  onClearUserError = () => {\n    this.props.clearUserError();\n  };\n\n  render() {\n    const { ldapUser, userError, ldapError, ldapSyncInfo, ldapConnectionInfo, navModel, queryParams } = this.props;\n    const { isLoading } = this.state;\n    const canReadLDAPUser = contextSrv.hasPermission(AccessControlAction.LDAPUsersRead);\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <>\n            {ldapError && ldapError.title && (\n              <div className=\"gf-form-group\">\n                <Alert title={ldapError.title} severity={AppNotificationSeverity.Error}>\n                  {ldapError.body}\n                </Alert>\n              </div>\n            )}\n\n            <LdapConnectionStatus ldapConnectionInfo={ldapConnectionInfo} />\n\n            {featureEnabled('ldapsync') && ldapSyncInfo && <LdapSyncInfo ldapSyncInfo={ldapSyncInfo} />}\n\n            {canReadLDAPUser && (\n              <>\n                <h3 className=\"page-heading\">Test user mapping</h3>\n                <div className=\"gf-form-group\">\n                  <form onSubmit={this.search} className=\"gf-form-inline\">\n                    <FormField\n                      label=\"Username\"\n                      labelWidth={8}\n                      inputWidth={30}\n                      type=\"text\"\n                      id=\"username\"\n                      name=\"username\"\n                      defaultValue={queryParams.username}\n                    />\n                    <Button type=\"submit\">Run</Button>\n                  </form>\n                </div>\n                {userError && userError.title && (\n                  <div className=\"gf-form-group\">\n                    <Alert\n                      title={userError.title}\n                      severity={AppNotificationSeverity.Error}\n                      onRemove={this.onClearUserError}\n                    >\n                      {userError.body}\n                    </Alert>\n                  </div>\n                )}\n                {ldapUser && <LdapUserInfo ldapUser={ldapUser} showAttributeMapping={true} />}\n              </>\n            )}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'ldap'),\n  ldapConnectionInfo: state.ldap.connectionInfo,\n  ldapUser: state.ldap.user,\n  ldapSyncInfo: state.ldap.syncInfo,\n  userError: state.ldap.userError,\n  ldapError: state.ldap.ldapError,\n});\n\nconst mapDispatchToProps = {\n  loadLdapState,\n  loadLdapSyncStatus,\n  loadUserMapping,\n  clearUserError,\n  clearUserMappingInfo,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport default connector(LdapPage);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}