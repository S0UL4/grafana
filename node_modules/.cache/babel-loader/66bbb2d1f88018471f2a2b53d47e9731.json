{"ast":null,"code":"const _excluded = [\"value\", \"onChange\", \"placeholder\", \"noOptionsMessage\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport debounce from 'debounce-promise';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { AsyncSelect } from '@grafana/ui';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst formatLabel = (folderTitle = 'General', dashboardTitle) => `${folderTitle}/${dashboardTitle}`;\n\nconst getDashboards = debounce((query = '') => {\n  return backendSrv.search({\n    type: 'dash-db',\n    query,\n    limit: 100\n  }).then(result => {\n    return result.map(item => ({\n      value: {\n        // dashboards uid here is always defined as this endpoint does not return the default home dashboard\n        uid: item.uid,\n        title: item.title,\n        folderTitle: item.folderTitle,\n        folderUid: item.folderUid\n      },\n      label: formatLabel(item === null || item === void 0 ? void 0 : item.folderTitle, item.title)\n    }));\n  });\n}, 300); // TODO: this component should provide a way to apply different filters to the search APIs\n\nexport const DashboardPicker = _ref => {\n  let {\n    value,\n    onChange,\n    placeholder = 'Select dashboard',\n    noOptionsMessage = 'No dashboards found'\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [current, setCurrent] = useState(); // This is required because the async select does not match the raw uid value\n  // We can not use a simple Select because the dashboard search should not return *everything*\n\n  useEffect(() => {\n    var _current$value;\n\n    if (!value || value === (current === null || current === void 0 ? void 0 : (_current$value = current.value) === null || _current$value === void 0 ? void 0 : _current$value.uid)) {\n      return;\n    }\n\n    (async () => {\n      var _res$meta;\n\n      // value was manually changed from outside or we are rendering for the first time.\n      // We need to fetch dashboard information.\n      const res = await backendSrv.getDashboardByUid(value);\n      setCurrent({\n        value: {\n          uid: res.dashboard.uid,\n          title: res.dashboard.title,\n          folderTitle: res.meta.folderTitle,\n          folderUid: res.meta.folderUid\n        },\n        label: formatLabel((_res$meta = res.meta) === null || _res$meta === void 0 ? void 0 : _res$meta.folderTitle, res.dashboard.title)\n      });\n    })(); // we don't need to rerun this effect every time `current` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [value]);\n  const onPicked = useCallback(sel => {\n    setCurrent(sel);\n    onChange === null || onChange === void 0 ? void 0 : onChange(sel === null || sel === void 0 ? void 0 : sel.value);\n  }, [onChange, setCurrent]);\n  return /*#__PURE__*/_jsx(AsyncSelect, Object.assign({\n    loadOptions: getDashboards,\n    onChange: onPicked,\n    placeholder: placeholder,\n    noOptionsMessage: noOptionsMessage,\n    value: current\n  }, props));\n};","map":{"version":3,"names":["debounce","React","useCallback","useEffect","useState","AsyncSelect","backendSrv","formatLabel","folderTitle","dashboardTitle","getDashboards","query","search","type","limit","then","result","map","item","value","uid","title","folderUid","label","DashboardPicker","onChange","placeholder","noOptionsMessage","props","current","setCurrent","res","getDashboardByUid","dashboard","meta","onPicked","sel"],"sources":["/home/soula/grafana/public/app/core/components/Select/DashboardPicker.tsx"],"sourcesContent":["import debounce from 'debounce-promise';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncSelectProps, AsyncSelect } from '@grafana/ui';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSearchHit } from 'app/features/search/types';\nimport { DashboardDTO } from 'app/types';\n\ninterface Props extends Omit<AsyncSelectProps<DashboardPickerDTO>, 'value' | 'onChange' | 'loadOptions' | ''> {\n  value?: DashboardPickerDTO['uid'];\n  onChange?: (value?: DashboardPickerDTO) => void;\n}\n\nexport type DashboardPickerDTO = Pick<DashboardDTO['dashboard'], 'uid' | 'title'> &\n  Pick<DashboardDTO['meta'], 'folderUid' | 'folderTitle'>;\n\nconst formatLabel = (folderTitle = 'General', dashboardTitle: string) => `${folderTitle}/${dashboardTitle}`;\n\nconst getDashboards = debounce((query = ''): Promise<Array<SelectableValue<DashboardPickerDTO>>> => {\n  return backendSrv.search({ type: 'dash-db', query, limit: 100 }).then((result: DashboardSearchHit[]) => {\n    return result.map((item: DashboardSearchHit) => ({\n      value: {\n        // dashboards uid here is always defined as this endpoint does not return the default home dashboard\n        uid: item.uid!,\n        title: item.title,\n        folderTitle: item.folderTitle,\n        folderUid: item.folderUid,\n      },\n      label: formatLabel(item?.folderTitle, item.title),\n    }));\n  });\n}, 300);\n\n// TODO: this component should provide a way to apply different filters to the search APIs\nexport const DashboardPicker = ({\n  value,\n  onChange,\n  placeholder = 'Select dashboard',\n  noOptionsMessage = 'No dashboards found',\n  ...props\n}: Props) => {\n  const [current, setCurrent] = useState<SelectableValue<DashboardPickerDTO>>();\n\n  // This is required because the async select does not match the raw uid value\n  // We can not use a simple Select because the dashboard search should not return *everything*\n  useEffect(() => {\n    if (!value || value === current?.value?.uid) {\n      return;\n    }\n\n    (async () => {\n      // value was manually changed from outside or we are rendering for the first time.\n      // We need to fetch dashboard information.\n      const res = await backendSrv.getDashboardByUid(value);\n      setCurrent({\n        value: {\n          uid: res.dashboard.uid,\n          title: res.dashboard.title,\n          folderTitle: res.meta.folderTitle,\n          folderUid: res.meta.folderUid,\n        },\n        label: formatLabel(res.meta?.folderTitle, res.dashboard.title),\n      });\n    })();\n    // we don't need to rerun this effect every time `current` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value]);\n\n  const onPicked = useCallback(\n    (sel: SelectableValue<DashboardPickerDTO>) => {\n      setCurrent(sel);\n      onChange?.(sel?.value);\n    },\n    [onChange, setCurrent]\n  );\n\n  return (\n    <AsyncSelect\n      loadOptions={getDashboards}\n      onChange={onPicked}\n      placeholder={placeholder}\n      noOptionsMessage={noOptionsMessage}\n      value={current}\n      {...props}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}