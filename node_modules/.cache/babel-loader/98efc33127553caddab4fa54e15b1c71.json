{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { each, filter, keys } from 'lodash';\nimport tinycolor from 'tinycolor2';\nimport { ALERTING_COLOR, DEFAULT_ANNOTATION_COLOR, NO_DATA_COLOR, OK_COLOR, PENDING_COLOR, REGION_FILL_ALPHA } from '@grafana/ui';\nexport class EventManager {\n  constructor(panelCtrl) {\n    _defineProperty(this, \"event\", null);\n\n    _defineProperty(this, \"editorOpen\", false);\n\n    this.panelCtrl = panelCtrl;\n  }\n\n  editorClosed() {\n    this.event = null;\n    this.editorOpen = false;\n    this.panelCtrl.render();\n  }\n\n  editorOpened() {\n    this.editorOpen = true;\n  }\n\n  updateTime(range) {\n    if (!this.event) {\n      this.event = {};\n      this.event.dashboardId = this.panelCtrl.dashboard.id;\n      this.event.panelId = this.panelCtrl.panel.id;\n    } // update time\n\n\n    this.event.time = range.from;\n    this.event.isRegion = false;\n\n    if (range.to) {\n      this.event.timeEnd = range.to;\n      this.event.isRegion = true;\n    }\n\n    this.panelCtrl.render();\n  }\n\n  editEvent(event, elem) {\n    this.event = event;\n    this.panelCtrl.render();\n  }\n\n  addFlotEvents(annotations, flotOptions) {\n    if (!this.event && annotations.length === 0) {\n      return;\n    }\n\n    const types = {\n      $__alerting: {\n        color: ALERTING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5\n      },\n      $__ok: {\n        color: OK_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5\n      },\n      $__no_data: {\n        color: NO_DATA_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5\n      },\n      $__pending: {\n        color: PENDING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5\n      },\n      $__editing: {\n        color: DEFAULT_ANNOTATION_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5\n      }\n    };\n\n    if (this.event) {\n      if (this.event.isRegion) {\n        annotations = [{\n          isRegion: true,\n          min: this.event.time,\n          timeEnd: this.event.timeEnd,\n          text: this.event.text,\n          eventType: '$__editing',\n          editModel: this.event\n        }];\n      } else {\n        annotations = [{\n          min: this.event.time,\n          text: this.event.text,\n          editModel: this.event,\n          eventType: '$__editing'\n        }];\n      }\n    } else {\n      // annotations from query\n      for (let i = 0; i < annotations.length; i++) {\n        const item = annotations[i]; // add properties used by jquery flot events\n\n        item.min = item.time;\n        item.max = item.time;\n        item.eventType = item.type;\n\n        if (item.newState) {\n          item.eventType = '$__' + item.newState;\n          continue;\n        }\n\n        if (!types[item.type]) {\n          types[item.type] = {\n            color: item.color,\n            position: 'BOTTOM',\n            markerSize: 5\n          };\n        }\n      }\n    }\n\n    const regions = getRegions(annotations);\n    addRegionMarking(regions, flotOptions);\n    const eventSectionHeight = 20;\n    const eventSectionMargin = 7;\n    flotOptions.grid.eventSectionHeight = eventSectionMargin;\n    flotOptions.xaxis.eventSectionHeight = eventSectionHeight;\n    flotOptions.events = {\n      levels: keys(types).length + 1,\n      data: annotations,\n      types: types,\n      manager: this\n    };\n  }\n\n}\n\nfunction getRegions(events) {\n  return filter(events, 'isRegion');\n}\n\nfunction addRegionMarking(regions, flotOptions) {\n  const markings = flotOptions.grid.markings;\n  const defaultColor = DEFAULT_ANNOTATION_COLOR;\n  let fillColor;\n  each(regions, region => {\n    if (region.source) {\n      fillColor = region.color || defaultColor;\n    } else {\n      fillColor = defaultColor;\n    }\n\n    fillColor = addAlphaToRGB(fillColor, REGION_FILL_ALPHA);\n    markings.push({\n      xaxis: {\n        from: region.min,\n        to: region.timeEnd\n      },\n      color: fillColor\n    });\n  });\n}\n\nfunction addAlphaToRGB(colorString, alpha) {\n  const color = tinycolor(colorString);\n\n  if (color.isValid()) {\n    color.setAlpha(alpha);\n    return color.toRgbString();\n  } else {\n    return colorString;\n  }\n}","map":{"version":3,"names":["each","filter","keys","tinycolor","ALERTING_COLOR","DEFAULT_ANNOTATION_COLOR","NO_DATA_COLOR","OK_COLOR","PENDING_COLOR","REGION_FILL_ALPHA","EventManager","constructor","panelCtrl","editorClosed","event","editorOpen","render","editorOpened","updateTime","range","dashboardId","dashboard","id","panelId","panel","time","from","isRegion","to","timeEnd","editEvent","elem","addFlotEvents","annotations","flotOptions","length","types","$__alerting","color","position","markerSize","$__ok","$__no_data","$__pending","$__editing","min","text","eventType","editModel","i","item","max","type","newState","regions","getRegions","addRegionMarking","eventSectionHeight","eventSectionMargin","grid","xaxis","events","levels","data","manager","markings","defaultColor","fillColor","region","source","addAlphaToRGB","push","colorString","alpha","isValid","setAlpha","toRgbString"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/event_manager.ts"],"sourcesContent":["import { each, filter, keys } from 'lodash';\nimport tinycolor from 'tinycolor2';\n\nimport { AnnotationEvent } from '@grafana/data';\nimport {\n  ALERTING_COLOR,\n  DEFAULT_ANNOTATION_COLOR,\n  NO_DATA_COLOR,\n  OK_COLOR,\n  PENDING_COLOR,\n  REGION_FILL_ALPHA,\n} from '@grafana/ui';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\n\nexport class EventManager {\n  event: AnnotationEvent | null = null;\n  editorOpen = false;\n\n  constructor(private panelCtrl: MetricsPanelCtrl) {}\n\n  editorClosed() {\n    this.event = null;\n    this.editorOpen = false;\n    this.panelCtrl.render();\n  }\n\n  editorOpened() {\n    this.editorOpen = true;\n  }\n\n  updateTime(range: { from: any; to: any }) {\n    if (!this.event) {\n      this.event = {};\n      this.event.dashboardId = this.panelCtrl.dashboard.id;\n      this.event.panelId = this.panelCtrl.panel.id;\n    }\n\n    // update time\n    this.event.time = range.from;\n    this.event.isRegion = false;\n\n    if (range.to) {\n      this.event.timeEnd = range.to;\n      this.event.isRegion = true;\n    }\n\n    this.panelCtrl.render();\n  }\n\n  editEvent(event: AnnotationEvent, elem?: any) {\n    this.event = event;\n    this.panelCtrl.render();\n  }\n\n  addFlotEvents(annotations: any, flotOptions: any) {\n    if (!this.event && annotations.length === 0) {\n      return;\n    }\n\n    const types: any = {\n      $__alerting: {\n        color: ALERTING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__ok: {\n        color: OK_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__no_data: {\n        color: NO_DATA_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__pending: {\n        color: PENDING_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n      $__editing: {\n        color: DEFAULT_ANNOTATION_COLOR,\n        position: 'BOTTOM',\n        markerSize: 5,\n      },\n    };\n\n    if (this.event) {\n      if (this.event.isRegion) {\n        annotations = [\n          {\n            isRegion: true,\n            min: this.event.time,\n            timeEnd: this.event.timeEnd,\n            text: this.event.text,\n            eventType: '$__editing',\n            editModel: this.event,\n          },\n        ];\n      } else {\n        annotations = [\n          {\n            min: this.event.time,\n            text: this.event.text,\n            editModel: this.event,\n            eventType: '$__editing',\n          },\n        ];\n      }\n    } else {\n      // annotations from query\n      for (let i = 0; i < annotations.length; i++) {\n        const item = annotations[i];\n\n        // add properties used by jquery flot events\n        item.min = item.time;\n        item.max = item.time;\n        item.eventType = item.type;\n\n        if (item.newState) {\n          item.eventType = '$__' + item.newState;\n          continue;\n        }\n\n        if (!types[item.type]) {\n          types[item.type] = {\n            color: item.color,\n            position: 'BOTTOM',\n            markerSize: 5,\n          };\n        }\n      }\n    }\n\n    const regions = getRegions(annotations);\n    addRegionMarking(regions, flotOptions);\n\n    const eventSectionHeight = 20;\n    const eventSectionMargin = 7;\n    flotOptions.grid.eventSectionHeight = eventSectionMargin;\n    flotOptions.xaxis.eventSectionHeight = eventSectionHeight;\n\n    flotOptions.events = {\n      levels: keys(types).length + 1,\n      data: annotations,\n      types: types,\n      manager: this,\n    };\n  }\n}\n\nfunction getRegions(events: AnnotationEvent[]) {\n  return filter(events, 'isRegion');\n}\n\nfunction addRegionMarking(regions: any[], flotOptions: { grid: { markings: any } }) {\n  const markings = flotOptions.grid.markings;\n  const defaultColor = DEFAULT_ANNOTATION_COLOR;\n  let fillColor;\n\n  each(regions, (region) => {\n    if (region.source) {\n      fillColor = region.color || defaultColor;\n    } else {\n      fillColor = defaultColor;\n    }\n\n    fillColor = addAlphaToRGB(fillColor, REGION_FILL_ALPHA);\n    markings.push({\n      xaxis: { from: region.min, to: region.timeEnd },\n      color: fillColor,\n    });\n  });\n}\n\nfunction addAlphaToRGB(colorString: string, alpha: number): string {\n  const color = tinycolor(colorString);\n  if (color.isValid()) {\n    color.setAlpha(alpha);\n    return color.toRgbString();\n  } else {\n    return colorString;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}