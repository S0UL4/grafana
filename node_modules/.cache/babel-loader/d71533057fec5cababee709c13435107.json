{"ast":null,"code":"var _span, _span2;\n\nconst _excluded = [\"multi\", \"values\", \"highlightIndex\", \"selectedValues\", \"onToggle\", \"onToggleAll\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css, cx } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Tooltip } from '@grafana/ui';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class VariableOptions extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onToggle\", option => event => {\n      const clearOthers = event.shiftKey || event.ctrlKey || event.metaKey;\n      this.handleEvent(event);\n      this.props.onToggle(option, clearOthers);\n    });\n\n    _defineProperty(this, \"onToggleAll\", event => {\n      this.handleEvent(event);\n      this.props.onToggleAll();\n    });\n  }\n\n  handleEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  render() {\n    // Don't want to pass faulty rest props to the div\n    const _this$props = this.props,\n          {\n      multi,\n      values\n    } = _this$props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: `${multi ? 'variable-value-dropdown multi' : 'variable-value-dropdown single'}`,\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"variable-options-wrapper\",\n        children: /*#__PURE__*/_jsxs(\"ul\", Object.assign({\n          className: listStyles,\n          \"aria-label\": selectors.pages.Dashboard.SubMenu.submenuItemValueDropDownDropDown\n        }, restProps, {\n          children: [this.renderMultiToggle(), values.map((option, index) => this.renderOption(option, index))]\n        }))\n      })\n    });\n  }\n\n  renderOption(option, index) {\n    const {\n      highlightIndex\n    } = this.props;\n    const selectClass = option.selected ? 'variable-option pointer selected' : 'variable-option pointer';\n    const highlightClass = index === highlightIndex ? `${selectClass} highlighted` : selectClass;\n    return /*#__PURE__*/_jsx(\"li\", {\n      children: /*#__PURE__*/_jsxs(\"a\", {\n        role: \"checkbox\",\n        \"aria-checked\": option.selected,\n        className: highlightClass,\n        onClick: this.onToggle(option),\n        children: [_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"variable-option-icon\"\n        })), /*#__PURE__*/_jsx(\"span\", {\n          \"data-testid\": selectors.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts(`${option.text}`),\n          children: option.text\n        })]\n      })\n    }, `${option.value}`);\n  }\n\n  renderMultiToggle() {\n    const {\n      multi,\n      selectedValues\n    } = this.props;\n\n    if (!multi) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsx(Tooltip, {\n      content: 'Clear selections',\n      placement: 'top',\n      children: /*#__PURE__*/_jsxs(\"a\", {\n        className: `${selectedValues.length > 1 ? 'variable-options-column-header many-selected' : 'variable-options-column-header'}`,\n        role: \"checkbox\",\n        \"aria-checked\": selectedValues.length > 1 ? 'mixed' : 'false',\n        onClick: this.onToggleAll,\n        \"aria-label\": \"Toggle all values\",\n        \"data-placement\": \"top\",\n        children: [_span2 || (_span2 = /*#__PURE__*/_jsx(\"span\", {\n          className: \"variable-option-icon\"\n        })), \"Selected (\", selectedValues.length, \")\"]\n      })\n    });\n  }\n\n}\nconst listStyles = cx('variable-options-column', css`\n    list-style-type: none;\n  `);","map":{"version":3,"names":["css","cx","React","PureComponent","selectors","Tooltip","VariableOptions","option","event","clearOthers","shiftKey","ctrlKey","metaKey","handleEvent","props","onToggle","onToggleAll","preventDefault","stopPropagation","render","multi","values","restProps","listStyles","pages","Dashboard","SubMenu","submenuItemValueDropDownDropDown","renderMultiToggle","map","index","renderOption","highlightIndex","selectClass","selected","highlightClass","submenuItemValueDropDownOptionTexts","text","value","selectedValues","length"],"sources":["/home/soula/grafana/public/app/features/variables/pickers/shared/VariableOptions.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Tooltip } from '@grafana/ui';\n\nimport { VariableOption } from '../../types';\n\nexport interface Props extends React.HTMLProps<HTMLUListElement> {\n  multi: boolean;\n  values: VariableOption[];\n  selectedValues: VariableOption[];\n  highlightIndex: number;\n  onToggle: (option: VariableOption, clearOthers: boolean) => void;\n  onToggleAll: () => void;\n  /**\n   * Used for aria-controls\n   */\n  id: string;\n}\n\nexport class VariableOptions extends PureComponent<Props> {\n  onToggle = (option: VariableOption) => (event: React.MouseEvent<HTMLAnchorElement>) => {\n    const clearOthers = event.shiftKey || event.ctrlKey || event.metaKey;\n    this.handleEvent(event);\n    this.props.onToggle(option, clearOthers);\n  };\n\n  onToggleAll = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    this.handleEvent(event);\n    this.props.onToggleAll();\n  };\n\n  handleEvent(event: React.MouseEvent<HTMLAnchorElement>) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  render() {\n    // Don't want to pass faulty rest props to the div\n    const { multi, values, highlightIndex, selectedValues, onToggle, onToggleAll, ...restProps } = this.props;\n\n    return (\n      <div className={`${multi ? 'variable-value-dropdown multi' : 'variable-value-dropdown single'}`}>\n        <div className=\"variable-options-wrapper\">\n          <ul\n            className={listStyles}\n            aria-label={selectors.pages.Dashboard.SubMenu.submenuItemValueDropDownDropDown}\n            {...restProps}\n          >\n            {this.renderMultiToggle()}\n            {values.map((option, index) => this.renderOption(option, index))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  renderOption(option: VariableOption, index: number) {\n    const { highlightIndex } = this.props;\n    const selectClass = option.selected ? 'variable-option pointer selected' : 'variable-option pointer';\n    const highlightClass = index === highlightIndex ? `${selectClass} highlighted` : selectClass;\n\n    return (\n      <li key={`${option.value}`}>\n        <a role=\"checkbox\" aria-checked={option.selected} className={highlightClass} onClick={this.onToggle(option)}>\n          <span className=\"variable-option-icon\"></span>\n          <span data-testid={selectors.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts(`${option.text}`)}>\n            {option.text}\n          </span>\n        </a>\n      </li>\n    );\n  }\n\n  renderMultiToggle() {\n    const { multi, selectedValues } = this.props;\n\n    if (!multi) {\n      return null;\n    }\n\n    return (\n      <Tooltip content={'Clear selections'} placement={'top'}>\n        <a\n          className={`${\n            selectedValues.length > 1\n              ? 'variable-options-column-header many-selected'\n              : 'variable-options-column-header'\n          }`}\n          role=\"checkbox\"\n          aria-checked={selectedValues.length > 1 ? 'mixed' : 'false'}\n          onClick={this.onToggleAll}\n          aria-label=\"Toggle all values\"\n          data-placement=\"top\"\n        >\n          <span className=\"variable-option-icon\"></span>\n          Selected ({selectedValues.length})\n        </a>\n      </Tooltip>\n    );\n  }\n}\n\nconst listStyles = cx(\n  'variable-options-column',\n  css`\n    list-style-type: none;\n  `\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}