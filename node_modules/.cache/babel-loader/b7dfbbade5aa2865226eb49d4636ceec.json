{"ast":null,"code":"import { uniqueId } from 'lodash';\nimport React, { useState } from 'react';\nimport { InlineField, Input } from '@grafana/ui';\nimport { getScriptValue } from 'app/plugins/datasource/elasticsearch/utils';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { changeMetricSetting } from '../state/actions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function SettingField({\n  label,\n  settingName,\n  metric,\n  placeholder,\n  tooltip\n}) {\n  const dispatch = useDispatch();\n  const [id] = useState(uniqueId(`es-field-id-`));\n  const settings = metric.settings;\n  let defaultValue = (settings === null || settings === void 0 ? void 0 : settings[settingName]) || '';\n\n  if (settingName === 'script') {\n    defaultValue = getScriptValue(metric);\n  }\n\n  return /*#__PURE__*/_jsx(InlineField, {\n    label: label,\n    labelWidth: 16,\n    tooltip: tooltip,\n    children: /*#__PURE__*/_jsx(Input, {\n      id: id,\n      placeholder: placeholder,\n      onBlur: e => dispatch(changeMetricSetting({\n        metric,\n        settingName,\n        newValue: e.target.value\n      })),\n      defaultValue: defaultValue\n    })\n  });\n}","map":{"version":3,"names":["uniqueId","React","useState","InlineField","Input","getScriptValue","useDispatch","changeMetricSetting","SettingField","label","settingName","metric","placeholder","tooltip","dispatch","id","settings","defaultValue","e","newValue","target","value"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/SettingField.tsx"],"sourcesContent":["import { uniqueId } from 'lodash';\nimport React, { ComponentProps, useState } from 'react';\n\nimport { InlineField, Input } from '@grafana/ui';\nimport { getScriptValue } from 'app/plugins/datasource/elasticsearch/utils';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { SettingKeyOf } from '../../../types';\nimport { MetricAggregationWithInlineScript, MetricAggregationWithSettings } from '../aggregations';\nimport { changeMetricSetting } from '../state/actions';\n\ninterface Props<T extends MetricAggregationWithSettings, K extends SettingKeyOf<T>> {\n  label: string;\n  settingName: K;\n  metric: T;\n  placeholder?: ComponentProps<typeof Input>['placeholder'];\n  tooltip?: ComponentProps<typeof InlineField>['tooltip'];\n}\n\nexport function SettingField<T extends MetricAggregationWithSettings, K extends SettingKeyOf<T>>({\n  label,\n  settingName,\n  metric,\n  placeholder,\n  tooltip,\n}: Props<T, K>) {\n  const dispatch = useDispatch();\n  const [id] = useState(uniqueId(`es-field-id-`));\n  const settings = metric.settings;\n\n  let defaultValue = settings?.[settingName as keyof typeof settings] || '';\n\n  if (settingName === 'script') {\n    defaultValue = getScriptValue(metric as MetricAggregationWithInlineScript);\n  }\n\n  return (\n    <InlineField label={label} labelWidth={16} tooltip={tooltip}>\n      <Input\n        id={id}\n        placeholder={placeholder}\n        onBlur={(e) => dispatch(changeMetricSetting({ metric, settingName, newValue: e.target.value }))}\n        defaultValue={defaultValue}\n      />\n    </InlineField>\n  );\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,IAAgCC,QAAhC,QAAgD,OAAhD;AAEA,SAASC,WAAT,EAAsBC,KAAtB,QAAmC,aAAnC;AACA,SAASC,cAAT,QAA+B,4CAA/B;AAEA,SAASC,WAAT,QAA4B,uCAA5B;AAGA,SAASC,mBAAT,QAAoC,kBAApC;;AAUA,OAAO,SAASC,YAAT,CAA0F;EAC/FC,KAD+F;EAE/FC,WAF+F;EAG/FC,MAH+F;EAI/FC,WAJ+F;EAK/FC;AAL+F,CAA1F,EAMS;EACd,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;EACA,MAAM,CAACS,EAAD,IAAOb,QAAQ,CAACF,QAAQ,CAAE,cAAF,CAAT,CAArB;EACA,MAAMgB,QAAQ,GAAGL,MAAM,CAACK,QAAxB;EAEA,IAAIC,YAAY,GAAG,CAAAD,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAGN,WAAH,CAAR,KAAoD,EAAvE;;EAEA,IAAIA,WAAW,KAAK,QAApB,EAA8B;IAC5BO,YAAY,GAAGZ,cAAc,CAACM,MAAD,CAA7B;EACD;;EAED,oBACE,KAAC,WAAD;IAAa,KAAK,EAAEF,KAApB;IAA2B,UAAU,EAAE,EAAvC;IAA2C,OAAO,EAAEI,OAApD;IAAA,uBACE,KAAC,KAAD;MACE,EAAE,EAAEE,EADN;MAEE,WAAW,EAAEH,WAFf;MAGE,MAAM,EAAGM,CAAD,IAAOJ,QAAQ,CAACP,mBAAmB,CAAC;QAAEI,MAAF;QAAUD,WAAV;QAAuBS,QAAQ,EAAED,CAAC,CAACE,MAAF,CAASC;MAA1C,CAAD,CAApB,CAHzB;MAIE,YAAY,EAAEJ;IAJhB;EADF,EADF;AAUD"},"metadata":{},"sourceType":"module"}