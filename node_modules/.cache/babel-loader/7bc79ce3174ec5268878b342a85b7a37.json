{"ast":null,"code":"const _excluded = [\"runQueryOnBlur\", \"onRunQuery\", \"onChange\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useRef } from 'react';\nimport { MonacoQueryFieldLazy } from './MonacoQueryFieldLazy';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const MonacoQueryFieldWrapper = props => {\n  const lastRunValueRef = useRef(null);\n\n  const {\n    runQueryOnBlur,\n    onRunQuery,\n    onChange\n  } = props,\n        rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const handleRunQuery = value => {\n    lastRunValueRef.current = value;\n    onChange(value);\n    onRunQuery();\n  };\n\n  const handleBlur = value => {\n    if (runQueryOnBlur) {\n      // run handleRunQuery only if the current value is different from the last-time-executed value\n      if (value !== lastRunValueRef.current) {\n        handleRunQuery(value);\n      }\n    } else {\n      onChange(value);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(MonacoQueryFieldLazy, Object.assign({\n    onRunQuery: handleRunQuery,\n    onBlur: handleBlur\n  }, rest));\n};","map":{"version":3,"names":["React","useRef","MonacoQueryFieldLazy","MonacoQueryFieldWrapper","props","lastRunValueRef","runQueryOnBlur","onRunQuery","onChange","rest","handleRunQuery","value","current","handleBlur"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryFieldWrapper.tsx"],"sourcesContent":["import React, { useRef } from 'react';\n\nimport { MonacoQueryFieldLazy } from './MonacoQueryFieldLazy';\nimport { Props as MonacoProps } from './MonacoQueryFieldProps';\n\ntype Props = Omit<MonacoProps, 'onRunQuery' | 'onBlur'> & {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  runQueryOnBlur: boolean;\n};\n\nexport const MonacoQueryFieldWrapper = (props: Props) => {\n  const lastRunValueRef = useRef<string | null>(null);\n  const { runQueryOnBlur, onRunQuery, onChange, ...rest } = props;\n\n  const handleRunQuery = (value: string) => {\n    lastRunValueRef.current = value;\n    onChange(value);\n    onRunQuery();\n  };\n\n  const handleBlur = (value: string) => {\n    if (runQueryOnBlur) {\n      // run handleRunQuery only if the current value is different from the last-time-executed value\n      if (value !== lastRunValueRef.current) {\n        handleRunQuery(value);\n      }\n    } else {\n      onChange(value);\n    }\n  };\n\n  return <MonacoQueryFieldLazy onRunQuery={handleRunQuery} onBlur={handleBlur} {...rest} />;\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AAEA,SAASC,oBAAT,QAAqC,wBAArC;;AASA,OAAO,MAAMC,uBAAuB,GAAIC,KAAD,IAAkB;EACvD,MAAMC,eAAe,GAAGJ,MAAM,CAAgB,IAAhB,CAA9B;;EACA,MAAM;IAAEK,cAAF;IAAkBC,UAAlB;IAA8BC;EAA9B,IAAoDJ,KAA1D;EAAA,MAAiDK,IAAjD,iCAA0DL,KAA1D;;EAEA,MAAMM,cAAc,GAAIC,KAAD,IAAmB;IACxCN,eAAe,CAACO,OAAhB,GAA0BD,KAA1B;IACAH,QAAQ,CAACG,KAAD,CAAR;IACAJ,UAAU;EACX,CAJD;;EAMA,MAAMM,UAAU,GAAIF,KAAD,IAAmB;IACpC,IAAIL,cAAJ,EAAoB;MAClB;MACA,IAAIK,KAAK,KAAKN,eAAe,CAACO,OAA9B,EAAuC;QACrCF,cAAc,CAACC,KAAD,CAAd;MACD;IACF,CALD,MAKO;MACLH,QAAQ,CAACG,KAAD,CAAR;IACD;EACF,CATD;;EAWA,oBAAO,KAAC,oBAAD;IAAsB,UAAU,EAAED,cAAlC;IAAkD,MAAM,EAAEG;EAA1D,GAA0EJ,IAA1E,EAAP;AACD,CAtBM"},"metadata":{},"sourceType":"module"}