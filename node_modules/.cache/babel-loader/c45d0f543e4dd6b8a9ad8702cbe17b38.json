{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { Button, InlineField, InlineFieldRow, RadioButtonGroup } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { StringValueEditor } from 'app/core/components/OptionsUI/string';\nimport { TextDimensionMode } from '../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst textOptions = [{\n  label: 'Fixed',\n  value: TextDimensionMode.Fixed,\n  description: 'Fixed value'\n}, {\n  label: 'Field',\n  value: TextDimensionMode.Field,\n  description: 'Display field value'\n} //  { label: 'Template', value: TextDimensionMode.Template, description: 'use template text' },\n];\nconst dummyFieldSettings = {\n  settings: {}\n};\nconst dummyStringSettings = {\n  settings: {}\n};\nexport const TextDimensionEditor = props => {\n  var _value$mode, _value$field;\n\n  const {\n    value,\n    context,\n    onChange\n  } = props;\n  const labelWidth = 9;\n  const onModeChange = useCallback(mode => {\n    onChange(Object.assign({}, value, {\n      mode\n    }));\n  }, [onChange, value]);\n  const onFieldChange = useCallback(field => {\n    onChange(Object.assign({}, value, {\n      field\n    }));\n  }, [onChange, value]);\n  const onFixedChange = useCallback(fixed => {\n    onChange(Object.assign({}, value, {\n      fixed\n    }));\n  }, [onChange, value]);\n\n  const onClearFixedText = () => {\n    // Need to first change to field in order to clear fixed value in editor\n    onChange({\n      mode: TextDimensionMode.Field,\n      fixed: '',\n      field: ''\n    });\n    onChange({\n      mode: TextDimensionMode.Fixed,\n      fixed: '',\n      field: ''\n    });\n  };\n\n  const mode = (_value$mode = value === null || value === void 0 ? void 0 : value.mode) !== null && _value$mode !== void 0 ? _value$mode : TextDimensionMode.Fixed;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Source\",\n        labelWidth: labelWidth,\n        grow: true,\n        children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n          value: mode,\n          options: textOptions,\n          onChange: onModeChange,\n          fullWidth: true\n        })\n      })\n    }), mode !== TextDimensionMode.Fixed && /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Field\",\n        labelWidth: labelWidth,\n        grow: true,\n        children: /*#__PURE__*/_jsx(FieldNamePicker, {\n          context: context,\n          value: (_value$field = value.field) !== null && _value$field !== void 0 ? _value$field : '',\n          onChange: onFieldChange,\n          item: dummyFieldSettings\n        })\n      })\n    }), mode === TextDimensionMode.Fixed && /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: 'Value',\n        labelWidth: labelWidth,\n        grow: true,\n        children: /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(StringValueEditor, {\n            context: context,\n            value: value === null || value === void 0 ? void 0 : value.fixed,\n            onChange: onFixedChange,\n            item: dummyStringSettings\n          }), (value === null || value === void 0 ? void 0 : value.fixed) && /*#__PURE__*/_jsx(Button, {\n            icon: \"times\",\n            variant: \"secondary\",\n            fill: \"text\",\n            size: \"sm\",\n            onClick: onClearFixedText\n          })]\n        })\n      })\n    }), mode === TextDimensionMode.Template && /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Template\",\n        labelWidth: labelWidth,\n        grow: true,\n        children: /*#__PURE__*/_jsx(StringValueEditor // This could be a code editor\n        , {\n          context: context,\n          value: value === null || value === void 0 ? void 0 : value.fixed,\n          onChange: onFixedChange,\n          item: dummyStringSettings\n        })\n      })\n    })]\n  });\n};","map":{"version":3,"names":["React","useCallback","Button","InlineField","InlineFieldRow","RadioButtonGroup","FieldNamePicker","StringValueEditor","TextDimensionMode","textOptions","label","value","Fixed","description","Field","dummyFieldSettings","settings","dummyStringSettings","TextDimensionEditor","props","context","onChange","labelWidth","onModeChange","mode","onFieldChange","field","onFixedChange","fixed","onClearFixedText","Template"],"sources":["/home/soula/grafana/public/app/features/dimensions/editors/TextDimensionEditor.tsx"],"sourcesContent":["import React, { FC, useCallback } from 'react';\n\nimport {\n  FieldNamePickerConfigSettings,\n  StandardEditorProps,\n  StandardEditorsRegistryItem,\n  StringFieldConfigSettings,\n} from '@grafana/data';\nimport { Button, InlineField, InlineFieldRow, RadioButtonGroup } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { StringValueEditor } from 'app/core/components/OptionsUI/string';\n\nimport { TextDimensionConfig, TextDimensionMode, TextDimensionOptions } from '../types';\n\nconst textOptions = [\n  { label: 'Fixed', value: TextDimensionMode.Fixed, description: 'Fixed value' },\n  { label: 'Field', value: TextDimensionMode.Field, description: 'Display field value' },\n  //  { label: 'Template', value: TextDimensionMode.Template, description: 'use template text' },\n];\n\nconst dummyFieldSettings: StandardEditorsRegistryItem<string, FieldNamePickerConfigSettings> = {\n  settings: {},\n} as any;\n\nconst dummyStringSettings: StandardEditorsRegistryItem<string, StringFieldConfigSettings> = {\n  settings: {},\n} as any;\n\nexport const TextDimensionEditor: FC<StandardEditorProps<TextDimensionConfig, TextDimensionOptions, any>> = (props) => {\n  const { value, context, onChange } = props;\n  const labelWidth = 9;\n\n  const onModeChange = useCallback(\n    (mode) => {\n      onChange({\n        ...value,\n        mode,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFieldChange = useCallback(\n    (field) => {\n      onChange({\n        ...value,\n        field,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFixedChange = useCallback(\n    (fixed) => {\n      onChange({\n        ...value,\n        fixed,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onClearFixedText = () => {\n    // Need to first change to field in order to clear fixed value in editor\n    onChange({ mode: TextDimensionMode.Field, fixed: '', field: '' });\n    onChange({ mode: TextDimensionMode.Fixed, fixed: '', field: '' });\n  };\n\n  const mode = value?.mode ?? TextDimensionMode.Fixed;\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Source\" labelWidth={labelWidth} grow={true}>\n          <RadioButtonGroup value={mode} options={textOptions} onChange={onModeChange} fullWidth />\n        </InlineField>\n      </InlineFieldRow>\n      {mode !== TextDimensionMode.Fixed && (\n        <InlineFieldRow>\n          <InlineField label=\"Field\" labelWidth={labelWidth} grow={true}>\n            <FieldNamePicker\n              context={context}\n              value={value.field ?? ''}\n              onChange={onFieldChange}\n              item={dummyFieldSettings}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode === TextDimensionMode.Fixed && (\n        <InlineFieldRow>\n          <InlineField label={'Value'} labelWidth={labelWidth} grow={true}>\n            <>\n              <StringValueEditor\n                context={context}\n                value={value?.fixed}\n                onChange={onFixedChange}\n                item={dummyStringSettings}\n              />\n              {value?.fixed && (\n                <Button icon=\"times\" variant=\"secondary\" fill=\"text\" size=\"sm\" onClick={onClearFixedText} />\n              )}\n            </>\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode === TextDimensionMode.Template && (\n        <InlineFieldRow>\n          <InlineField label=\"Template\" labelWidth={labelWidth} grow={true}>\n            <StringValueEditor // This could be a code editor\n              context={context}\n              value={value?.fixed}\n              onChange={onFixedChange}\n              item={dummyStringSettings}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAoBC,WAApB,QAAuC,OAAvC;AAQA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,cAA9B,EAA8CC,gBAA9C,QAAsE,aAAtE;AACA,SAASC,eAAT,QAAgC,uDAAhC;AACA,SAASC,iBAAT,QAAkC,sCAAlC;AAEA,SAA8BC,iBAA9B,QAA6E,UAA7E;;;;AAEA,MAAMC,WAAW,GAAG,CAClB;EAAEC,KAAK,EAAE,OAAT;EAAkBC,KAAK,EAAEH,iBAAiB,CAACI,KAA3C;EAAkDC,WAAW,EAAE;AAA/D,CADkB,EAElB;EAAEH,KAAK,EAAE,OAAT;EAAkBC,KAAK,EAAEH,iBAAiB,CAACM,KAA3C;EAAkDD,WAAW,EAAE;AAA/D,CAFkB,CAGlB;AAHkB,CAApB;AAMA,MAAME,kBAAsF,GAAG;EAC7FC,QAAQ,EAAE;AADmF,CAA/F;AAIA,MAAMC,mBAAmF,GAAG;EAC1FD,QAAQ,EAAE;AADgF,CAA5F;AAIA,OAAO,MAAME,mBAA4F,GAAIC,KAAD,IAAW;EAAA;;EACrH,MAAM;IAAER,KAAF;IAASS,OAAT;IAAkBC;EAAlB,IAA+BF,KAArC;EACA,MAAMG,UAAU,GAAG,CAAnB;EAEA,MAAMC,YAAY,GAAGtB,WAAW,CAC7BuB,IAAD,IAAU;IACRH,QAAQ,mBACHV,KADG;MAENa;IAFM,GAAR;EAID,CAN6B,EAO9B,CAACH,QAAD,EAAWV,KAAX,CAP8B,CAAhC;EAUA,MAAMc,aAAa,GAAGxB,WAAW,CAC9ByB,KAAD,IAAW;IACTL,QAAQ,mBACHV,KADG;MAENe;IAFM,GAAR;EAID,CAN8B,EAO/B,CAACL,QAAD,EAAWV,KAAX,CAP+B,CAAjC;EAUA,MAAMgB,aAAa,GAAG1B,WAAW,CAC9B2B,KAAD,IAAW;IACTP,QAAQ,mBACHV,KADG;MAENiB;IAFM,GAAR;EAID,CAN8B,EAO/B,CAACP,QAAD,EAAWV,KAAX,CAP+B,CAAjC;;EAUA,MAAMkB,gBAAgB,GAAG,MAAM;IAC7B;IACAR,QAAQ,CAAC;MAAEG,IAAI,EAAEhB,iBAAiB,CAACM,KAA1B;MAAiCc,KAAK,EAAE,EAAxC;MAA4CF,KAAK,EAAE;IAAnD,CAAD,CAAR;IACAL,QAAQ,CAAC;MAAEG,IAAI,EAAEhB,iBAAiB,CAACI,KAA1B;MAAiCgB,KAAK,EAAE,EAAxC;MAA4CF,KAAK,EAAE;IAAnD,CAAD,CAAR;EACD,CAJD;;EAMA,MAAMF,IAAI,kBAAGb,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEa,IAAV,qDAAkBhB,iBAAiB,CAACI,KAA9C;EAEA,oBACE;IAAA,wBACE,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAC,QAAnB;QAA4B,UAAU,EAAEU,UAAxC;QAAoD,IAAI,EAAE,IAA1D;QAAA,uBACE,KAAC,gBAAD;UAAkB,KAAK,EAAEE,IAAzB;UAA+B,OAAO,EAAEf,WAAxC;UAAqD,QAAQ,EAAEc,YAA/D;UAA6E,SAAS;QAAtF;MADF;IADF,EADF,EAMGC,IAAI,KAAKhB,iBAAiB,CAACI,KAA3B,iBACC,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAC,OAAnB;QAA2B,UAAU,EAAEU,UAAvC;QAAmD,IAAI,EAAE,IAAzD;QAAA,uBACE,KAAC,eAAD;UACE,OAAO,EAAEF,OADX;UAEE,KAAK,kBAAET,KAAK,CAACe,KAAR,uDAAiB,EAFxB;UAGE,QAAQ,EAAED,aAHZ;UAIE,IAAI,EAAEV;QAJR;MADF;IADF,EAPJ,EAkBGS,IAAI,KAAKhB,iBAAiB,CAACI,KAA3B,iBACC,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAE,OAApB;QAA6B,UAAU,EAAEU,UAAzC;QAAqD,IAAI,EAAE,IAA3D;QAAA,uBACE;UAAA,wBACE,KAAC,iBAAD;YACE,OAAO,EAAEF,OADX;YAEE,KAAK,EAAET,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEiB,KAFhB;YAGE,QAAQ,EAAED,aAHZ;YAIE,IAAI,EAAEV;UAJR,EADF,EAOG,CAAAN,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEiB,KAAP,kBACC,KAAC,MAAD;YAAQ,IAAI,EAAC,OAAb;YAAqB,OAAO,EAAC,WAA7B;YAAyC,IAAI,EAAC,MAA9C;YAAqD,IAAI,EAAC,IAA1D;YAA+D,OAAO,EAAEC;UAAxE,EARJ;QAAA;MADF;IADF,EAnBJ,EAmCGL,IAAI,KAAKhB,iBAAiB,CAACsB,QAA3B,iBACC,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAC,UAAnB;QAA8B,UAAU,EAAER,UAA1C;QAAsD,IAAI,EAAE,IAA5D;QAAA,uBACE,KAAC,iBAAD,CAAmB;QAAnB;UACE,OAAO,EAAEF,OADX;UAEE,KAAK,EAAET,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEiB,KAFhB;UAGE,QAAQ,EAAED,aAHZ;UAIE,IAAI,EAAEV;QAJR;MADF;IADF,EApCJ;EAAA,EADF;AAkDD,CA5FM"},"metadata":{},"sourceType":"module"}