{"ast":null,"code":"import { FieldColorModeId, FieldConfigProperty, FieldType, identityOverrideProcessor } from '@grafana/data';\nimport { VisibilityMode } from '@grafana/schema';\nimport { commonOptionsBuilder, graphFieldOptions } from '@grafana/ui';\nimport { LineStyleEditor } from '../timeseries/LineStyleEditor';\nimport { ScatterLineMode } from './models.gen';\nconst categoryStyles = undefined; // ['Scatter styles'];\n\nexport function getScatterFieldConfig(cfg) {\n  return {\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n          bySeriesSupport: true,\n          preferThresholdsMode: false\n        },\n        defaultValue: {\n          mode: FieldColorModeId.PaletteClassic\n        }\n      }\n    },\n    useCustomConfig: builder => {\n      var _cfg$pointSize;\n\n      builder.addRadio({\n        path: 'point',\n        name: 'Points',\n        category: categoryStyles,\n        defaultValue: cfg.point,\n        settings: {\n          options: graphFieldOptions.showPoints\n        }\n      }).addSliderInput({\n        path: 'pointSize.fixed',\n        name: 'Point size',\n        category: categoryStyles,\n        defaultValue: (_cfg$pointSize = cfg.pointSize) === null || _cfg$pointSize === void 0 ? void 0 : _cfg$pointSize.fixed,\n        settings: {\n          min: 1,\n          max: 100,\n          step: 1\n        },\n        showIf: c => c.point !== VisibilityMode.Never\n      }).addRadio({\n        path: 'line',\n        name: 'Lines',\n        category: categoryStyles,\n        defaultValue: cfg.line,\n        settings: {\n          options: [{\n            label: 'None',\n            value: ScatterLineMode.None\n          }, {\n            label: 'Linear',\n            value: ScatterLineMode.Linear\n          }]\n        }\n      }).addCustomEditor({\n        id: 'lineStyle',\n        path: 'lineStyle',\n        name: 'Line style',\n        category: categoryStyles,\n        showIf: c => c.line !== ScatterLineMode.None,\n        editor: LineStyleEditor,\n        override: LineStyleEditor,\n        process: identityOverrideProcessor,\n        shouldApply: f => f.type === FieldType.number\n      }).addSliderInput({\n        path: 'lineWidth',\n        name: 'Line width',\n        category: categoryStyles,\n        defaultValue: cfg.lineWidth,\n        settings: {\n          min: 0,\n          max: 10,\n          step: 1\n        },\n        showIf: c => c.line !== ScatterLineMode.None\n      });\n      commonOptionsBuilder.addAxisConfig(builder, cfg);\n      commonOptionsBuilder.addHideFrom(builder);\n    }\n  };\n}","map":{"version":3,"names":["FieldColorModeId","FieldConfigProperty","FieldType","identityOverrideProcessor","VisibilityMode","commonOptionsBuilder","graphFieldOptions","LineStyleEditor","ScatterLineMode","categoryStyles","undefined","getScatterFieldConfig","cfg","standardOptions","Color","settings","byValueSupport","bySeriesSupport","preferThresholdsMode","defaultValue","mode","PaletteClassic","useCustomConfig","builder","addRadio","path","name","category","point","options","showPoints","addSliderInput","pointSize","fixed","min","max","step","showIf","c","Never","line","label","value","None","Linear","addCustomEditor","id","editor","override","process","shouldApply","f","type","number","lineWidth","addAxisConfig","addHideFrom"],"sources":["/home/soula/grafana/public/app/plugins/panel/xychart/config.ts"],"sourcesContent":["import {\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  identityOverrideProcessor,\n  SetFieldConfigOptionsArgs,\n} from '@grafana/data';\nimport { LineStyle, VisibilityMode } from '@grafana/schema';\nimport { commonOptionsBuilder, graphFieldOptions } from '@grafana/ui';\n\nimport { LineStyleEditor } from '../timeseries/LineStyleEditor';\n\nimport { ScatterFieldConfig, ScatterLineMode } from './models.gen';\n\nconst categoryStyles = undefined; // ['Scatter styles'];\n\nexport function getScatterFieldConfig(cfg: ScatterFieldConfig): SetFieldConfigOptionsArgs<ScatterFieldConfig> {\n  return {\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n          bySeriesSupport: true,\n          preferThresholdsMode: false,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n    },\n\n    useCustomConfig: (builder) => {\n      builder\n        .addRadio({\n          path: 'point',\n          name: 'Points',\n          category: categoryStyles,\n          defaultValue: cfg.point,\n          settings: {\n            options: graphFieldOptions.showPoints,\n          },\n        })\n        .addSliderInput({\n          path: 'pointSize.fixed',\n          name: 'Point size',\n          category: categoryStyles,\n          defaultValue: cfg.pointSize?.fixed,\n          settings: {\n            min: 1,\n            max: 100,\n            step: 1,\n          },\n          showIf: (c) => c.point !== VisibilityMode.Never,\n        })\n        .addRadio({\n          path: 'line',\n          name: 'Lines',\n          category: categoryStyles,\n          defaultValue: cfg.line,\n          settings: {\n            options: [\n              { label: 'None', value: ScatterLineMode.None },\n              { label: 'Linear', value: ScatterLineMode.Linear },\n            ],\n          },\n        })\n        .addCustomEditor<void, LineStyle>({\n          id: 'lineStyle',\n          path: 'lineStyle',\n          name: 'Line style',\n          category: categoryStyles,\n          showIf: (c) => c.line !== ScatterLineMode.None,\n          editor: LineStyleEditor,\n          override: LineStyleEditor,\n          process: identityOverrideProcessor,\n          shouldApply: (f) => f.type === FieldType.number,\n        })\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          category: categoryStyles,\n          defaultValue: cfg.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n          showIf: (c) => c.line !== ScatterLineMode.None,\n        });\n\n      commonOptionsBuilder.addAxisConfig(builder, cfg);\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}