{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const QueryEditorModeSwitcher = ({\n  isRaw,\n  onChange\n}) => {\n  const [isModalOpen, setModalOpen] = useState(false);\n  useEffect(() => {\n    // if the isRaw changes, we hide the modal\n    setModalOpen(false);\n  }, [isRaw]);\n\n  if (isRaw) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Button, {\n        \"aria-label\": \"Switch to visual editor\",\n        icon: \"pen\",\n        variant: \"secondary\",\n        type: \"button\",\n        onClick: () => {\n          // we show the are-you-sure modal\n          setModalOpen(true);\n        }\n      }), /*#__PURE__*/_jsx(ConfirmModal, {\n        isOpen: isModalOpen,\n        title: \"Switch to visual editor mode\",\n        body: \"Are you sure to switch to visual editor mode? You will lose the changes done in raw query mode.\",\n        confirmText: \"Yes, switch to editor mode\",\n        dismissText: \"No, stay in raw query mode\",\n        onConfirm: () => {\n          onChange(false);\n        },\n        onDismiss: () => {\n          setModalOpen(false);\n        }\n      })]\n    });\n  } else {\n    return /*#__PURE__*/_jsx(Button, {\n      \"aria-label\": \"Switch to text editor\",\n      icon: \"pen\",\n      variant: \"secondary\",\n      type: \"button\",\n      onClick: () => {\n        onChange(true);\n      }\n    });\n  }\n};","map":{"version":3,"names":["React","useEffect","useState","Button","ConfirmModal","QueryEditorModeSwitcher","isRaw","onChange","isModalOpen","setModalOpen"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/components/QueryEditorModeSwitcher.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Button, ConfirmModal } from '@grafana/ui';\n\ntype Props = {\n  isRaw: boolean;\n  onChange: (newIsRaw: boolean) => void;\n};\n\nexport const QueryEditorModeSwitcher = ({ isRaw, onChange }: Props): JSX.Element => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  useEffect(() => {\n    // if the isRaw changes, we hide the modal\n    setModalOpen(false);\n  }, [isRaw]);\n\n  if (isRaw) {\n    return (\n      <>\n        <Button\n          aria-label=\"Switch to visual editor\"\n          icon=\"pen\"\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => {\n            // we show the are-you-sure modal\n            setModalOpen(true);\n          }}\n        ></Button>\n        <ConfirmModal\n          isOpen={isModalOpen}\n          title=\"Switch to visual editor mode\"\n          body=\"Are you sure to switch to visual editor mode? You will lose the changes done in raw query mode.\"\n          confirmText=\"Yes, switch to editor mode\"\n          dismissText=\"No, stay in raw query mode\"\n          onConfirm={() => {\n            onChange(false);\n          }}\n          onDismiss={() => {\n            setModalOpen(false);\n          }}\n        />\n      </>\n    );\n  } else {\n    return (\n      <Button\n        aria-label=\"Switch to text editor\"\n        icon=\"pen\"\n        variant=\"secondary\"\n        type=\"button\"\n        onClick={() => {\n          onChange(true);\n        }}\n      ></Button>\n    );\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,aAArC;;;;AAOA,OAAO,MAAMC,uBAAuB,GAAG,CAAC;EAAEC,KAAF;EAASC;AAAT,CAAD,KAA6C;EAClF,MAAM,CAACC,WAAD,EAAcC,YAAd,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;EAEAD,SAAS,CAAC,MAAM;IACd;IACAQ,YAAY,CAAC,KAAD,CAAZ;EACD,CAHQ,EAGN,CAACH,KAAD,CAHM,CAAT;;EAKA,IAAIA,KAAJ,EAAW;IACT,oBACE;MAAA,wBACE,KAAC,MAAD;QACE,cAAW,yBADb;QAEE,IAAI,EAAC,KAFP;QAGE,OAAO,EAAC,WAHV;QAIE,IAAI,EAAC,QAJP;QAKE,OAAO,EAAE,MAAM;UACb;UACAG,YAAY,CAAC,IAAD,CAAZ;QACD;MARH,EADF,eAWE,KAAC,YAAD;QACE,MAAM,EAAED,WADV;QAEE,KAAK,EAAC,8BAFR;QAGE,IAAI,EAAC,iGAHP;QAIE,WAAW,EAAC,4BAJd;QAKE,WAAW,EAAC,4BALd;QAME,SAAS,EAAE,MAAM;UACfD,QAAQ,CAAC,KAAD,CAAR;QACD,CARH;QASE,SAAS,EAAE,MAAM;UACfE,YAAY,CAAC,KAAD,CAAZ;QACD;MAXH,EAXF;IAAA,EADF;EA2BD,CA5BD,MA4BO;IACL,oBACE,KAAC,MAAD;MACE,cAAW,uBADb;MAEE,IAAI,EAAC,KAFP;MAGE,OAAO,EAAC,WAHV;MAIE,IAAI,EAAC,QAJP;MAKE,OAAO,EAAE,MAAM;QACbF,QAAQ,CAAC,IAAD,CAAR;MACD;IAPH,EADF;EAWD;AACF,CAjDM"},"metadata":{},"sourceType":"module"}