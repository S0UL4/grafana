{"ast":null,"code":"var _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Libraries\nimport classNames from 'classnames';\nimport { cloneDeep, has } from 'lodash';\nimport React, { PureComponent } from 'react'; // Utils & Services\n\nimport { CoreApp, EventBusSrv, LoadingState, PanelEvents, toLegacyResponseData } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getAngularLoader } from '@grafana/runtime';\nimport { ErrorBoundaryAlert, HorizontalGroup } from '@grafana/ui';\nimport { OperationRowHelp } from 'app/core/components/QueryOperationRow/OperationRowHelp';\nimport { QueryOperationAction } from 'app/core/components/QueryOperationRow/QueryOperationAction';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { RowActionComponents } from './QueryActionComponent';\nimport { QueryEditorRowHeader } from './QueryEditorRowHeader';\nimport { QueryErrorAlert } from './QueryErrorAlert';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class QueryEditorRow extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"element\", null);\n\n    _defineProperty(this, \"angularScope\", null);\n\n    _defineProperty(this, \"angularQueryEditor\", null);\n\n    _defineProperty(this, \"state\", {\n      datasource: null,\n      hasTextEditMode: false,\n      data: undefined,\n      isOpen: true,\n      showingHelp: false\n    });\n\n    _defineProperty(this, \"renderAngularQueryEditor\", () => {\n      if (!this.element) {\n        return;\n      }\n\n      if (this.angularQueryEditor) {\n        this.angularQueryEditor.destroy();\n        this.angularQueryEditor = null;\n      }\n\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"query-ctrl\" />';\n      const scopeProps = {\n        ctrl: this.getAngularQueryComponentScope()\n      };\n      this.angularQueryEditor = loader.load(this.element, scopeProps, template);\n      this.angularScope = scopeProps.ctrl;\n    });\n\n    _defineProperty(this, \"onOpen\", () => {\n      this.renderAngularQueryEditor();\n    });\n\n    _defineProperty(this, \"renderPluginEditor\", () => {\n      var _datasource$component;\n\n      const {\n        query,\n        onChange,\n        queries,\n        onRunQuery,\n        app = CoreApp.PanelEditor,\n        history\n      } = this.props;\n      const {\n        datasource,\n        data\n      } = this.state;\n\n      if (datasource !== null && datasource !== void 0 && (_datasource$component = datasource.components) !== null && _datasource$component !== void 0 && _datasource$component.QueryCtrl) {\n        return /*#__PURE__*/_jsx(\"div\", {\n          ref: element => this.element = element\n        });\n      }\n\n      if (datasource) {\n        let QueryEditor = this.getReactQueryEditor(datasource);\n\n        if (QueryEditor) {\n          return /*#__PURE__*/_jsx(QueryEditor, {\n            query: query,\n            datasource: datasource,\n            onChange: onChange,\n            onRunQuery: onRunQuery,\n            data: data,\n            range: getTimeSrv().timeRange(),\n            queries: queries,\n            app: app,\n            history: history\n          }, datasource === null || datasource === void 0 ? void 0 : datasource.name);\n        }\n      }\n\n      return _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n        children: \"Data source plugin does not export any Query Editor component\"\n      }));\n    });\n\n    _defineProperty(this, \"onToggleEditMode\", (e, props) => {\n      e.stopPropagation();\n\n      if (this.angularScope && this.angularScope.toggleEditorMode) {\n        var _this$angularQueryEdi;\n\n        this.angularScope.toggleEditorMode();\n        (_this$angularQueryEdi = this.angularQueryEditor) === null || _this$angularQueryEdi === void 0 ? void 0 : _this$angularQueryEdi.digest();\n\n        if (!props.isOpen) {\n          props.onOpen();\n        }\n      }\n    });\n\n    _defineProperty(this, \"onRemoveQuery\", () => {\n      this.props.onRemoveQuery(this.props.query);\n    });\n\n    _defineProperty(this, \"onCopyQuery\", () => {\n      const copy = cloneDeep(this.props.query);\n      this.props.onAddQuery(copy);\n    });\n\n    _defineProperty(this, \"onDisableQuery\", () => {\n      const {\n        query\n      } = this.props;\n      this.props.onChange(Object.assign({}, query, {\n        hide: !query.hide\n      }));\n      this.props.onRunQuery();\n    });\n\n    _defineProperty(this, \"onToggleHelp\", () => {\n      this.setState(state => ({\n        showingHelp: !state.showingHelp\n      }));\n    });\n\n    _defineProperty(this, \"onClickExample\", query => {\n      this.props.onChange(Object.assign({}, query, {\n        refId: this.props.query.refId\n      }));\n      this.onToggleHelp();\n    });\n\n    _defineProperty(this, \"renderExtraActions\", () => {\n      const {\n        query,\n        queries,\n        data,\n        onAddQuery,\n        dataSource\n      } = this.props;\n      return RowActionComponents.getAllExtraRenderAction().map((action, index) => action({\n        query,\n        queries,\n        timeRange: data.timeRange,\n        onAddQuery: onAddQuery,\n        dataSource,\n        key: index\n      })).filter(Boolean);\n    });\n\n    _defineProperty(this, \"renderActions\", props => {\n      var _datasource$component2;\n\n      const {\n        query,\n        hideDisableQuery = false\n      } = this.props;\n      const {\n        hasTextEditMode,\n        datasource,\n        showingHelp\n      } = this.state;\n      const isDisabled = query.hide;\n      const hasEditorHelp = datasource === null || datasource === void 0 ? void 0 : (_datasource$component2 = datasource.components) === null || _datasource$component2 === void 0 ? void 0 : _datasource$component2.QueryEditorHelp;\n      return /*#__PURE__*/_jsxs(HorizontalGroup, {\n        width: \"auto\",\n        children: [hasEditorHelp && /*#__PURE__*/_jsx(QueryOperationAction, {\n          title: \"Toggle data source help\",\n          icon: \"question-circle\",\n          onClick: this.onToggleHelp,\n          active: showingHelp\n        }), hasTextEditMode && /*#__PURE__*/_jsx(QueryOperationAction, {\n          title: \"Toggle text edit mode\",\n          icon: \"pen\",\n          onClick: e => {\n            this.onToggleEditMode(e, props);\n          }\n        }), this.renderExtraActions(), /*#__PURE__*/_jsx(QueryOperationAction, {\n          title: \"Duplicate query\",\n          icon: \"copy\",\n          onClick: this.onCopyQuery\n        }), !hideDisableQuery ? /*#__PURE__*/_jsx(QueryOperationAction, {\n          title: \"Disable/enable query\",\n          icon: isDisabled ? 'eye-slash' : 'eye',\n          active: isDisabled,\n          onClick: this.onDisableQuery\n        }) : null, /*#__PURE__*/_jsx(QueryOperationAction, {\n          title: \"Remove query\",\n          icon: \"trash-alt\",\n          onClick: this.onRemoveQuery\n        })]\n      });\n    });\n\n    _defineProperty(this, \"renderHeader\", props => {\n      const {\n        alerting,\n        query,\n        dataSource,\n        onChangeDataSource,\n        onChange,\n        queries,\n        renderHeaderExtras\n      } = this.props;\n      return /*#__PURE__*/_jsx(QueryEditorRowHeader, {\n        query: query,\n        queries: queries,\n        onChangeDataSource: onChangeDataSource,\n        dataSource: dataSource,\n        disabled: query.hide,\n        onClick: e => this.onToggleEditMode(e, props),\n        onChange: onChange,\n        collapsedText: !props.isOpen ? this.renderCollapsedText() : null,\n        renderExtras: renderHeaderExtras,\n        alerting: alerting\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.loadDatasource();\n  }\n\n  componentWillUnmount() {\n    if (this.angularQueryEditor) {\n      this.angularQueryEditor.destroy();\n    }\n  }\n\n  getAngularQueryComponentScope() {\n    const {\n      query,\n      queries\n    } = this.props;\n    const {\n      datasource\n    } = this.state;\n    const panel = new PanelModel({\n      targets: queries\n    });\n    const dashboard = {};\n    const me = this;\n    return {\n      datasource: datasource,\n      target: query,\n      panel: panel,\n      dashboard: dashboard,\n      refresh: () => {\n        // Old angular editors modify the query model and just call refresh\n        // Important that this use this.props here so that as this function is only created on mount and it's\n        // important not to capture old prop functions in this closure\n        // the \"hide\" attribute of the queries can be changed from the \"outside\",\n        // it will be applied to \"this.props.query.hide\", but not to \"query.hide\".\n        // so we have to apply it.\n        if (query.hide !== me.props.query.hide) {\n          query.hide = me.props.query.hide;\n        }\n\n        this.props.onChange(query);\n        this.props.onRunQuery();\n      },\n      render: () => () => console.log('legacy render function called, it does nothing'),\n      events: this.props.eventBus || new EventBusSrv(),\n      range: getTimeSrv().timeRange()\n    };\n  }\n\n  getQueryDataSourceIdentifier() {\n    var _query$datasource$uid, _query$datasource;\n\n    const {\n      query,\n      dataSource: dsSettings\n    } = this.props;\n    return (_query$datasource$uid = (_query$datasource = query.datasource) === null || _query$datasource === void 0 ? void 0 : _query$datasource.uid) !== null && _query$datasource$uid !== void 0 ? _query$datasource$uid : dsSettings.uid;\n  }\n\n  async loadDatasource() {\n    const dataSourceSrv = getDatasourceSrv();\n    let datasource;\n    const dataSourceIdentifier = this.getQueryDataSourceIdentifier();\n\n    try {\n      datasource = await dataSourceSrv.get(dataSourceIdentifier);\n    } catch (error) {\n      datasource = await dataSourceSrv.get();\n    }\n\n    this.setState({\n      datasource: datasource,\n      loadedDataSourceIdentifier: dataSourceIdentifier,\n      hasTextEditMode: has(datasource, 'components.QueryCtrl.prototype.toggleEditorMode')\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      datasource,\n      loadedDataSourceIdentifier\n    } = this.state;\n    const {\n      data,\n      query\n    } = this.props;\n\n    if (data !== prevProps.data) {\n      const dataFilteredByRefId = filterPanelDataToQuery(data, query.refId);\n      this.setState({\n        data: dataFilteredByRefId\n      });\n\n      if (this.angularScope) {\n        this.angularScope.range = getTimeSrv().timeRange();\n      }\n\n      if (this.angularQueryEditor && dataFilteredByRefId) {\n        notifyAngularQueryEditorsOfData(this.angularScope, dataFilteredByRefId, this.angularQueryEditor);\n      }\n    } // check if we need to load another datasource\n\n\n    if (datasource && loadedDataSourceIdentifier !== this.getQueryDataSourceIdentifier()) {\n      if (this.angularQueryEditor) {\n        this.angularQueryEditor.destroy();\n        this.angularQueryEditor = null;\n      }\n\n      this.loadDatasource();\n      return;\n    }\n\n    if (!this.element || this.angularQueryEditor) {\n      return;\n    }\n\n    this.renderAngularQueryEditor();\n  }\n\n  getReactQueryEditor(ds) {\n    var _ds$components, _ds$components2, _ds$components3, _ds$components4, _ds$components5;\n\n    if (!ds) {\n      return;\n    }\n\n    switch (this.props.app) {\n      case CoreApp.Explore:\n        return ((_ds$components = ds.components) === null || _ds$components === void 0 ? void 0 : _ds$components.ExploreMetricsQueryField) || ((_ds$components2 = ds.components) === null || _ds$components2 === void 0 ? void 0 : _ds$components2.ExploreLogsQueryField) || ((_ds$components3 = ds.components) === null || _ds$components3 === void 0 ? void 0 : _ds$components3.ExploreQueryField) || ((_ds$components4 = ds.components) === null || _ds$components4 === void 0 ? void 0 : _ds$components4.QueryEditor);\n\n      case CoreApp.PanelEditor:\n      case CoreApp.Dashboard:\n      default:\n        return (_ds$components5 = ds.components) === null || _ds$components5 === void 0 ? void 0 : _ds$components5.QueryEditor;\n    }\n  }\n\n  renderCollapsedText() {\n    const {\n      datasource\n    } = this.state;\n\n    if (datasource !== null && datasource !== void 0 && datasource.getQueryDisplayText) {\n      return datasource.getQueryDisplayText(this.props.query);\n    }\n\n    if (this.angularScope && this.angularScope.getCollapsedText) {\n      return this.angularScope.getCollapsedText();\n    }\n\n    return null;\n  }\n\n  render() {\n    var _datasource$component3;\n\n    const {\n      query,\n      id,\n      index,\n      visualization\n    } = this.props;\n    const {\n      datasource,\n      showingHelp,\n      data\n    } = this.state;\n    const isDisabled = query.hide;\n    const rowClasses = classNames('query-editor-row', {\n      'query-editor-row--disabled': isDisabled,\n      'gf-form-disabled': isDisabled\n    });\n\n    if (!datasource) {\n      return null;\n    }\n\n    const editor = this.renderPluginEditor();\n    const DatasourceCheatsheet = (_datasource$component3 = datasource.components) === null || _datasource$component3 === void 0 ? void 0 : _datasource$component3.QueryEditorHelp;\n    return /*#__PURE__*/_jsx(\"div\", {\n      \"aria-label\": selectors.components.QueryEditorRows.rows,\n      children: /*#__PURE__*/_jsx(QueryOperationRow, {\n        id: id,\n        draggable: true,\n        index: index,\n        headerElement: this.renderHeader,\n        actions: this.renderActions,\n        onOpen: this.onOpen,\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: rowClasses,\n          children: [/*#__PURE__*/_jsxs(ErrorBoundaryAlert, {\n            children: [showingHelp && DatasourceCheatsheet && /*#__PURE__*/_jsx(OperationRowHelp, {\n              children: /*#__PURE__*/_jsx(DatasourceCheatsheet, {\n                onClickExample: query => this.onClickExample(query),\n                query: this.props.query,\n                datasource: datasource\n              })\n            }), editor]\n          }), (data === null || data === void 0 ? void 0 : data.error) && data.error.refId === query.refId && /*#__PURE__*/_jsx(QueryErrorAlert, {\n            error: data.error\n          }), visualization]\n        })\n      })\n    });\n  }\n\n}\n\nfunction notifyAngularQueryEditorsOfData(scope, data, editor) {\n  if (data.state === LoadingState.Done) {\n    const legacy = data.series.map(v => toLegacyResponseData(v));\n    scope.events.emit(PanelEvents.dataReceived, legacy);\n  } else if (data.state === LoadingState.Error) {\n    scope.events.emit(PanelEvents.dataError, data.error);\n  } // Some query controllers listen to data error events and need a digest\n  // for some reason this needs to be done in next tick\n\n\n  setTimeout(editor.digest);\n}\n\n/**\n * Get a version of the PanelData limited to the query we are looking at\n */\nexport function filterPanelDataToQuery(data, refId) {\n  const series = data.series.filter(series => series.refId === refId); // If there was an error with no data, pass it to the QueryEditors\n\n  if (data.error && !data.series.length) {\n    return Object.assign({}, data, {\n      state: LoadingState.Error\n    });\n  } // Only say this is an error if the error links to the query\n\n\n  let state = data.state;\n  const error = data.error && data.error.refId === refId ? data.error : undefined;\n\n  if (error) {\n    state = LoadingState.Error;\n  } else if (!error && data.state === LoadingState.Error) {\n    state = LoadingState.Done;\n  }\n\n  const timeRange = data.timeRange;\n  return Object.assign({}, data, {\n    state,\n    series,\n    error,\n    timeRange\n  });\n}","map":{"version":3,"names":["classNames","cloneDeep","has","React","PureComponent","CoreApp","EventBusSrv","LoadingState","PanelEvents","toLegacyResponseData","selectors","getAngularLoader","ErrorBoundaryAlert","HorizontalGroup","OperationRowHelp","QueryOperationAction","QueryOperationRow","getTimeSrv","PanelModel","getDatasourceSrv","RowActionComponents","QueryEditorRowHeader","QueryErrorAlert","QueryEditorRow","datasource","hasTextEditMode","data","undefined","isOpen","showingHelp","element","angularQueryEditor","destroy","loader","template","scopeProps","ctrl","getAngularQueryComponentScope","load","angularScope","renderAngularQueryEditor","query","onChange","queries","onRunQuery","app","PanelEditor","history","props","state","components","QueryCtrl","QueryEditor","getReactQueryEditor","timeRange","name","e","stopPropagation","toggleEditorMode","digest","onOpen","onRemoveQuery","copy","onAddQuery","hide","setState","refId","onToggleHelp","dataSource","getAllExtraRenderAction","map","action","index","key","filter","Boolean","hideDisableQuery","isDisabled","hasEditorHelp","QueryEditorHelp","onToggleEditMode","renderExtraActions","onCopyQuery","onDisableQuery","alerting","onChangeDataSource","renderHeaderExtras","renderCollapsedText","componentDidMount","loadDatasource","componentWillUnmount","panel","targets","dashboard","me","target","refresh","render","console","log","events","eventBus","range","getQueryDataSourceIdentifier","dsSettings","uid","dataSourceSrv","dataSourceIdentifier","get","error","loadedDataSourceIdentifier","componentDidUpdate","prevProps","dataFilteredByRefId","filterPanelDataToQuery","notifyAngularQueryEditorsOfData","ds","Explore","ExploreMetricsQueryField","ExploreLogsQueryField","ExploreQueryField","Dashboard","getQueryDisplayText","getCollapsedText","id","visualization","rowClasses","editor","renderPluginEditor","DatasourceCheatsheet","QueryEditorRows","rows","renderHeader","renderActions","onClickExample","scope","Done","legacy","series","v","emit","dataReceived","Error","dataError","setTimeout","length"],"sources":["/home/soula/grafana/public/app/features/query/components/QueryEditorRow.tsx"],"sourcesContent":["// Libraries\nimport classNames from 'classnames';\nimport { cloneDeep, has } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\n// Utils & Services\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  EventBusExtended,\n  EventBusSrv,\n  HistoryItem,\n  LoadingState,\n  PanelData,\n  PanelEvents,\n  TimeRange,\n  toLegacyResponseData,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { ErrorBoundaryAlert, HorizontalGroup } from '@grafana/ui';\nimport { OperationRowHelp } from 'app/core/components/QueryOperationRow/OperationRowHelp';\nimport { QueryOperationAction } from 'app/core/components/QueryOperationRow/QueryOperationAction';\nimport {\n  QueryOperationRow,\n  QueryOperationRowRenderProps,\n} from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { RowActionComponents } from './QueryActionComponent';\nimport { QueryEditorRowHeader } from './QueryEditorRowHeader';\nimport { QueryErrorAlert } from './QueryErrorAlert';\n\ninterface Props<TQuery extends DataQuery> {\n  data: PanelData;\n  query: TQuery;\n  queries: TQuery[];\n  id: string;\n  index: number;\n  dataSource: DataSourceInstanceSettings;\n  onChangeDataSource?: (dsSettings: DataSourceInstanceSettings) => void;\n  renderHeaderExtras?: () => ReactNode;\n  onAddQuery: (query: TQuery) => void;\n  onRemoveQuery: (query: TQuery) => void;\n  onChange: (query: TQuery) => void;\n  onRunQuery: () => void;\n  visualization?: ReactNode;\n  hideDisableQuery?: boolean;\n  app?: CoreApp;\n  history?: Array<HistoryItem<TQuery>>;\n  eventBus?: EventBusExtended;\n  alerting?: boolean;\n}\n\ninterface State<TQuery extends DataQuery> {\n  loadedDataSourceIdentifier?: string | null;\n  datasource: DataSourceApi<TQuery> | null;\n  hasTextEditMode: boolean;\n  data?: PanelData;\n  isOpen?: boolean;\n  showingHelp: boolean;\n}\n\nexport class QueryEditorRow<TQuery extends DataQuery> extends PureComponent<Props<TQuery>, State<TQuery>> {\n  element: HTMLElement | null = null;\n  angularScope: AngularQueryComponentScope<TQuery> | null = null;\n  angularQueryEditor: AngularComponent | null = null;\n\n  state: State<TQuery> = {\n    datasource: null,\n    hasTextEditMode: false,\n    data: undefined,\n    isOpen: true,\n    showingHelp: false,\n  };\n\n  componentDidMount() {\n    this.loadDatasource();\n  }\n\n  componentWillUnmount() {\n    if (this.angularQueryEditor) {\n      this.angularQueryEditor.destroy();\n    }\n  }\n\n  getAngularQueryComponentScope(): AngularQueryComponentScope<TQuery> {\n    const { query, queries } = this.props;\n    const { datasource } = this.state;\n    const panel = new PanelModel({ targets: queries });\n    const dashboard = {} as DashboardModel;\n\n    const me = this;\n\n    return {\n      datasource: datasource,\n      target: query,\n      panel: panel,\n      dashboard: dashboard,\n      refresh: () => {\n        // Old angular editors modify the query model and just call refresh\n        // Important that this use this.props here so that as this function is only created on mount and it's\n        // important not to capture old prop functions in this closure\n\n        // the \"hide\" attribute of the queries can be changed from the \"outside\",\n        // it will be applied to \"this.props.query.hide\", but not to \"query.hide\".\n        // so we have to apply it.\n        if (query.hide !== me.props.query.hide) {\n          query.hide = me.props.query.hide;\n        }\n\n        this.props.onChange(query);\n        this.props.onRunQuery();\n      },\n      render: () => () => console.log('legacy render function called, it does nothing'),\n      events: this.props.eventBus || new EventBusSrv(),\n      range: getTimeSrv().timeRange(),\n    };\n  }\n\n  getQueryDataSourceIdentifier(): string | null | undefined {\n    const { query, dataSource: dsSettings } = this.props;\n    return query.datasource?.uid ?? dsSettings.uid;\n  }\n\n  async loadDatasource() {\n    const dataSourceSrv = getDatasourceSrv();\n    let datasource: DataSourceApi;\n    const dataSourceIdentifier = this.getQueryDataSourceIdentifier();\n\n    try {\n      datasource = await dataSourceSrv.get(dataSourceIdentifier);\n    } catch (error) {\n      datasource = await dataSourceSrv.get();\n    }\n\n    this.setState({\n      datasource: datasource as unknown as DataSourceApi<TQuery>,\n      loadedDataSourceIdentifier: dataSourceIdentifier,\n      hasTextEditMode: has(datasource, 'components.QueryCtrl.prototype.toggleEditorMode'),\n    });\n  }\n\n  componentDidUpdate(prevProps: Props<TQuery>) {\n    const { datasource, loadedDataSourceIdentifier } = this.state;\n    const { data, query } = this.props;\n\n    if (data !== prevProps.data) {\n      const dataFilteredByRefId = filterPanelDataToQuery(data, query.refId);\n\n      this.setState({ data: dataFilteredByRefId });\n\n      if (this.angularScope) {\n        this.angularScope.range = getTimeSrv().timeRange();\n      }\n\n      if (this.angularQueryEditor && dataFilteredByRefId) {\n        notifyAngularQueryEditorsOfData(this.angularScope!, dataFilteredByRefId, this.angularQueryEditor);\n      }\n    }\n\n    // check if we need to load another datasource\n    if (datasource && loadedDataSourceIdentifier !== this.getQueryDataSourceIdentifier()) {\n      if (this.angularQueryEditor) {\n        this.angularQueryEditor.destroy();\n        this.angularQueryEditor = null;\n      }\n      this.loadDatasource();\n      return;\n    }\n\n    if (!this.element || this.angularQueryEditor) {\n      return;\n    }\n\n    this.renderAngularQueryEditor();\n  }\n\n  renderAngularQueryEditor = () => {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.angularQueryEditor) {\n      this.angularQueryEditor.destroy();\n      this.angularQueryEditor = null;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"query-ctrl\" />';\n    const scopeProps = { ctrl: this.getAngularQueryComponentScope() };\n\n    this.angularQueryEditor = loader.load(this.element, scopeProps, template);\n    this.angularScope = scopeProps.ctrl;\n  };\n\n  onOpen = () => {\n    this.renderAngularQueryEditor();\n  };\n\n  getReactQueryEditor(ds: DataSourceApi<TQuery>) {\n    if (!ds) {\n      return;\n    }\n\n    switch (this.props.app) {\n      case CoreApp.Explore:\n        return (\n          ds.components?.ExploreMetricsQueryField ||\n          ds.components?.ExploreLogsQueryField ||\n          ds.components?.ExploreQueryField ||\n          ds.components?.QueryEditor\n        );\n      case CoreApp.PanelEditor:\n      case CoreApp.Dashboard:\n      default:\n        return ds.components?.QueryEditor;\n    }\n  }\n\n  renderPluginEditor = () => {\n    const { query, onChange, queries, onRunQuery, app = CoreApp.PanelEditor, history } = this.props;\n    const { datasource, data } = this.state;\n\n    if (datasource?.components?.QueryCtrl) {\n      return <div ref={(element) => (this.element = element)} />;\n    }\n\n    if (datasource) {\n      let QueryEditor = this.getReactQueryEditor(datasource);\n\n      if (QueryEditor) {\n        return (\n          <QueryEditor\n            key={datasource?.name}\n            query={query}\n            datasource={datasource}\n            onChange={onChange}\n            onRunQuery={onRunQuery}\n            data={data}\n            range={getTimeSrv().timeRange()}\n            queries={queries}\n            app={app}\n            history={history}\n          />\n        );\n      }\n    }\n\n    return <div>Data source plugin does not export any Query Editor component</div>;\n  };\n\n  onToggleEditMode = (e: React.MouseEvent, props: QueryOperationRowRenderProps) => {\n    e.stopPropagation();\n    if (this.angularScope && this.angularScope.toggleEditorMode) {\n      this.angularScope.toggleEditorMode();\n      this.angularQueryEditor?.digest();\n      if (!props.isOpen) {\n        props.onOpen();\n      }\n    }\n  };\n\n  onRemoveQuery = () => {\n    this.props.onRemoveQuery(this.props.query);\n  };\n\n  onCopyQuery = () => {\n    const copy = cloneDeep(this.props.query);\n    this.props.onAddQuery(copy);\n  };\n\n  onDisableQuery = () => {\n    const { query } = this.props;\n    this.props.onChange({ ...query, hide: !query.hide });\n    this.props.onRunQuery();\n  };\n\n  onToggleHelp = () => {\n    this.setState((state) => ({\n      showingHelp: !state.showingHelp,\n    }));\n  };\n\n  onClickExample = (query: TQuery) => {\n    this.props.onChange({\n      ...query,\n      refId: this.props.query.refId,\n    });\n    this.onToggleHelp();\n  };\n\n  renderCollapsedText(): string | null {\n    const { datasource } = this.state;\n    if (datasource?.getQueryDisplayText) {\n      return datasource.getQueryDisplayText(this.props.query);\n    }\n\n    if (this.angularScope && this.angularScope.getCollapsedText) {\n      return this.angularScope.getCollapsedText();\n    }\n    return null;\n  }\n\n  renderExtraActions = () => {\n    const { query, queries, data, onAddQuery, dataSource } = this.props;\n    return RowActionComponents.getAllExtraRenderAction()\n      .map((action, index) =>\n        action({\n          query,\n          queries,\n          timeRange: data.timeRange,\n          onAddQuery: onAddQuery as (query: DataQuery) => void,\n          dataSource,\n          key: index,\n        })\n      )\n      .filter(Boolean);\n  };\n\n  renderActions = (props: QueryOperationRowRenderProps) => {\n    const { query, hideDisableQuery = false } = this.props;\n    const { hasTextEditMode, datasource, showingHelp } = this.state;\n    const isDisabled = query.hide;\n\n    const hasEditorHelp = datasource?.components?.QueryEditorHelp;\n\n    return (\n      <HorizontalGroup width=\"auto\">\n        {hasEditorHelp && (\n          <QueryOperationAction\n            title=\"Toggle data source help\"\n            icon=\"question-circle\"\n            onClick={this.onToggleHelp}\n            active={showingHelp}\n          />\n        )}\n        {hasTextEditMode && (\n          <QueryOperationAction\n            title=\"Toggle text edit mode\"\n            icon=\"pen\"\n            onClick={(e) => {\n              this.onToggleEditMode(e, props);\n            }}\n          />\n        )}\n        {this.renderExtraActions()}\n        <QueryOperationAction title=\"Duplicate query\" icon=\"copy\" onClick={this.onCopyQuery} />\n        {!hideDisableQuery ? (\n          <QueryOperationAction\n            title=\"Disable/enable query\"\n            icon={isDisabled ? 'eye-slash' : 'eye'}\n            active={isDisabled}\n            onClick={this.onDisableQuery}\n          />\n        ) : null}\n        <QueryOperationAction title=\"Remove query\" icon=\"trash-alt\" onClick={this.onRemoveQuery} />\n      </HorizontalGroup>\n    );\n  };\n\n  renderHeader = (props: QueryOperationRowRenderProps) => {\n    const { alerting, query, dataSource, onChangeDataSource, onChange, queries, renderHeaderExtras } = this.props;\n\n    return (\n      <QueryEditorRowHeader\n        query={query}\n        queries={queries}\n        onChangeDataSource={onChangeDataSource}\n        dataSource={dataSource}\n        disabled={query.hide}\n        onClick={(e) => this.onToggleEditMode(e, props)}\n        onChange={onChange}\n        collapsedText={!props.isOpen ? this.renderCollapsedText() : null}\n        renderExtras={renderHeaderExtras}\n        alerting={alerting}\n      />\n    );\n  };\n\n  render() {\n    const { query, id, index, visualization } = this.props;\n    const { datasource, showingHelp, data } = this.state;\n    const isDisabled = query.hide;\n\n    const rowClasses = classNames('query-editor-row', {\n      'query-editor-row--disabled': isDisabled,\n      'gf-form-disabled': isDisabled,\n    });\n\n    if (!datasource) {\n      return null;\n    }\n\n    const editor = this.renderPluginEditor();\n    const DatasourceCheatsheet = datasource.components?.QueryEditorHelp;\n\n    return (\n      <div aria-label={selectors.components.QueryEditorRows.rows}>\n        <QueryOperationRow\n          id={id}\n          draggable={true}\n          index={index}\n          headerElement={this.renderHeader}\n          actions={this.renderActions}\n          onOpen={this.onOpen}\n        >\n          <div className={rowClasses}>\n            <ErrorBoundaryAlert>\n              {showingHelp && DatasourceCheatsheet && (\n                <OperationRowHelp>\n                  <DatasourceCheatsheet\n                    onClickExample={(query) => this.onClickExample(query)}\n                    query={this.props.query}\n                    datasource={datasource}\n                  />\n                </OperationRowHelp>\n              )}\n              {editor}\n            </ErrorBoundaryAlert>\n            {data?.error && data.error.refId === query.refId && <QueryErrorAlert error={data.error} />}\n            {visualization}\n          </div>\n        </QueryOperationRow>\n      </div>\n    );\n  }\n}\n\nfunction notifyAngularQueryEditorsOfData<TQuery extends DataQuery>(\n  scope: AngularQueryComponentScope<TQuery>,\n  data: PanelData,\n  editor: AngularComponent\n) {\n  if (data.state === LoadingState.Done) {\n    const legacy = data.series.map((v) => toLegacyResponseData(v));\n    scope.events.emit(PanelEvents.dataReceived, legacy);\n  } else if (data.state === LoadingState.Error) {\n    scope.events.emit(PanelEvents.dataError, data.error);\n  }\n\n  // Some query controllers listen to data error events and need a digest\n  // for some reason this needs to be done in next tick\n  setTimeout(editor.digest);\n}\n\nexport interface AngularQueryComponentScope<TQuery extends DataQuery> {\n  target: TQuery;\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  events: EventBusExtended;\n  refresh: () => void;\n  render: () => void;\n  datasource: DataSourceApi<TQuery> | null;\n  toggleEditorMode?: () => void;\n  getCollapsedText?: () => string;\n  range: TimeRange;\n}\n\n/**\n * Get a version of the PanelData limited to the query we are looking at\n */\nexport function filterPanelDataToQuery(data: PanelData, refId: string): PanelData | undefined {\n  const series = data.series.filter((series) => series.refId === refId);\n\n  // If there was an error with no data, pass it to the QueryEditors\n  if (data.error && !data.series.length) {\n    return {\n      ...data,\n      state: LoadingState.Error,\n    };\n  }\n\n  // Only say this is an error if the error links to the query\n  let state = data.state;\n  const error = data.error && data.error.refId === refId ? data.error : undefined;\n  if (error) {\n    state = LoadingState.Error;\n  } else if (!error && data.state === LoadingState.Error) {\n    state = LoadingState.Done;\n  }\n\n  const timeRange = data.timeRange;\n\n  return {\n    ...data,\n    state,\n    series,\n    error,\n    timeRange,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}