{"ast":null,"code":"function getIndent(text) {\n  let offset = text.length - text.trimLeft().length;\n\n  if (offset) {\n    let indent = text[0];\n\n    while (--offset) {\n      indent += text[0];\n    }\n\n    return indent;\n  }\n\n  return '';\n}\n\nexport function NewlinePlugin() {\n  return {\n    onKeyDown(event, editor, next) {\n      const keyEvent = event;\n      const value = editor.value;\n\n      if (value.selection.isExpanded) {\n        return next();\n      }\n\n      if (keyEvent.key === 'Enter') {\n        keyEvent.preventDefault();\n        const {\n          startBlock\n        } = value;\n        const currentLineText = startBlock.text;\n        const indent = getIndent(currentLineText);\n        return editor.splitBlock().insertText(indent).focus();\n      }\n\n      return next();\n    }\n\n  };\n}","map":{"version":3,"names":["getIndent","text","offset","length","trimLeft","indent","NewlinePlugin","onKeyDown","event","editor","next","keyEvent","value","selection","isExpanded","key","preventDefault","startBlock","currentLineText","splitBlock","insertText","focus"],"sources":["/home/soula/grafana/packages/grafana-ui/src/slate-plugins/newline.ts"],"sourcesContent":["import { Editor as CoreEditor } from 'slate';\n\nimport { Plugin } from '@grafana/slate-react';\n\nfunction getIndent(text: string) {\n  let offset = text.length - text.trimLeft().length;\n  if (offset) {\n    let indent = text[0];\n    while (--offset) {\n      indent += text[0];\n    }\n    return indent;\n  }\n  return '';\n}\n\nexport function NewlinePlugin(): Plugin {\n  return {\n    onKeyDown(event: Event, editor: CoreEditor, next: Function) {\n      const keyEvent = event as KeyboardEvent;\n      const value = editor.value;\n\n      if (value.selection.isExpanded) {\n        return next();\n      }\n\n      if (keyEvent.key === 'Enter') {\n        keyEvent.preventDefault();\n\n        const { startBlock } = value;\n        const currentLineText = startBlock.text;\n        const indent = getIndent(currentLineText);\n\n        return editor.splitBlock().insertText(indent).focus();\n      }\n\n      return next();\n    },\n  };\n}\n"],"mappings":"AAIA,SAASA,SAAT,CAAmBC,IAAnB,EAAiC;EAC/B,IAAIC,MAAM,GAAGD,IAAI,CAACE,MAAL,GAAcF,IAAI,CAACG,QAAL,GAAgBD,MAA3C;;EACA,IAAID,MAAJ,EAAY;IACV,IAAIG,MAAM,GAAGJ,IAAI,CAAC,CAAD,CAAjB;;IACA,OAAO,EAAEC,MAAT,EAAiB;MACfG,MAAM,IAAIJ,IAAI,CAAC,CAAD,CAAd;IACD;;IACD,OAAOI,MAAP;EACD;;EACD,OAAO,EAAP;AACD;;AAED,OAAO,SAASC,aAAT,GAAiC;EACtC,OAAO;IACLC,SAAS,CAACC,KAAD,EAAeC,MAAf,EAAmCC,IAAnC,EAAmD;MAC1D,MAAMC,QAAQ,GAAGH,KAAjB;MACA,MAAMI,KAAK,GAAGH,MAAM,CAACG,KAArB;;MAEA,IAAIA,KAAK,CAACC,SAAN,CAAgBC,UAApB,EAAgC;QAC9B,OAAOJ,IAAI,EAAX;MACD;;MAED,IAAIC,QAAQ,CAACI,GAAT,KAAiB,OAArB,EAA8B;QAC5BJ,QAAQ,CAACK,cAAT;QAEA,MAAM;UAAEC;QAAF,IAAiBL,KAAvB;QACA,MAAMM,eAAe,GAAGD,UAAU,CAAChB,IAAnC;QACA,MAAMI,MAAM,GAAGL,SAAS,CAACkB,eAAD,CAAxB;QAEA,OAAOT,MAAM,CAACU,UAAP,GAAoBC,UAApB,CAA+Bf,MAA/B,EAAuCgB,KAAvC,EAAP;MACD;;MAED,OAAOX,IAAI,EAAX;IACD;;EApBI,CAAP;AAsBD"},"metadata":{},"sourceType":"module"}