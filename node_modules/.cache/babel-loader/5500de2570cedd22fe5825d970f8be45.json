{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { InlineField, InlineFieldRow, Select, useStyles2 } from '@grafana/ui';\nimport { prepareTimeSeriesTransformer, timeSeriesFormat } from './prepareTimeSeries';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst wideInfo = {\n  label: 'Wide time series',\n  value: timeSeriesFormat.TimeSeriesWide,\n  description: 'Creates a single frame joined by time',\n  info: /*#__PURE__*/_jsxs(\"ul\", {\n    children: [/*#__PURE__*/_jsx(\"li\", {\n      children: \"Single frame\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"1st field is shared time field\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"Time in ascending order\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"Multiple value fields of any type\"\n    })]\n  })\n};\nconst manyInfo = {\n  label: 'Multi-frame time series',\n  value: timeSeriesFormat.TimeSeriesMany,\n  description: 'Creates a new frame for each time/number pair',\n  info: /*#__PURE__*/_jsxs(\"ul\", {\n    children: [/*#__PURE__*/_jsx(\"li\", {\n      children: \"Multiple frames\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"Each frame has two fields: time, value\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"Time in ascending order\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"String values are represented as labels\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"All values are numeric\"\n    })]\n  })\n};\nconst longInfo = {\n  label: 'Long time series',\n  value: timeSeriesFormat.TimeSeriesLong,\n  description: 'Convert each frame to long format',\n  info: /*#__PURE__*/_jsxs(\"ul\", {\n    children: [/*#__PURE__*/_jsx(\"li\", {\n      children: \"Single frame\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"1st field is time field\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"Time in ascending order, but may have duplictes\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"String values are represented as separate fields rather than as labels\"\n    }), /*#__PURE__*/_jsx(\"li\", {\n      children: \"Multiple value fields may exist\"\n    })]\n  })\n};\nconst formats = [wideInfo, manyInfo, longInfo];\nexport function PrepareTimeSeriesEditor(props) {\n  const {\n    options,\n    onChange\n  } = props;\n  const styles = useStyles2(getStyles);\n  const onSelectFormat = useCallback(value => {\n    onChange(Object.assign({}, options, {\n      format: value.value\n    }));\n  }, [onChange, options]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Format\",\n        labelWidth: 12,\n        children: /*#__PURE__*/_jsx(Select, {\n          width: 35,\n          options: formats,\n          value: formats.find(v => v.value === options.format) || formats[0],\n          onChange: onSelectFormat,\n          className: \"flex-grow-1\"\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Info\",\n        labelWidth: 12,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: styles.info,\n          children: (formats.find(v => v.value === options.format) || formats[0]).info\n        })\n      })\n    })]\n  });\n}\n\nconst getStyles = theme => ({\n  info: css`\n    margin-left: 20px;\n  `\n});\n\nexport const prepareTimeseriesTransformerRegistryItem = {\n  id: prepareTimeSeriesTransformer.id,\n  editor: PrepareTimeSeriesEditor,\n  transformation: prepareTimeSeriesTransformer,\n  name: prepareTimeSeriesTransformer.name,\n  description: prepareTimeSeriesTransformer.description,\n  help: `\n  ### Use cases\n\n  This takes query results and transforms them into a predictable timeseries format.\n  This transformer may be especially useful when using old panels that only expect the\n  many-frame timeseries format.\n  `\n};","map":{"version":3,"names":["css","React","useCallback","InlineField","InlineFieldRow","Select","useStyles2","prepareTimeSeriesTransformer","timeSeriesFormat","wideInfo","label","value","TimeSeriesWide","description","info","manyInfo","TimeSeriesMany","longInfo","TimeSeriesLong","formats","PrepareTimeSeriesEditor","props","options","onChange","styles","getStyles","onSelectFormat","format","find","v","theme","prepareTimeseriesTransformerRegistryItem","id","editor","transformation","name","help"],"sources":["/home/soula/grafana/public/app/features/transformers/prepareTimeSeries/PrepareTimeSeriesEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, TransformerRegistryItem, TransformerUIProps } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select, useStyles2 } from '@grafana/ui';\n\nimport { prepareTimeSeriesTransformer, PrepareTimeSeriesOptions, timeSeriesFormat } from './prepareTimeSeries';\n\nconst wideInfo = {\n  label: 'Wide time series',\n  value: timeSeriesFormat.TimeSeriesWide,\n  description: 'Creates a single frame joined by time',\n  info: (\n    <ul>\n      <li>Single frame</li>\n      <li>1st field is shared time field</li>\n      <li>Time in ascending order</li>\n      <li>Multiple value fields of any type</li>\n    </ul>\n  ),\n};\n\nconst manyInfo = {\n  label: 'Multi-frame time series',\n  value: timeSeriesFormat.TimeSeriesMany,\n  description: 'Creates a new frame for each time/number pair',\n  info: (\n    <ul>\n      <li>Multiple frames</li>\n      <li>Each frame has two fields: time, value</li>\n      <li>Time in ascending order</li>\n      <li>String values are represented as labels</li>\n      <li>All values are numeric</li>\n    </ul>\n  ),\n};\n\nconst longInfo = {\n  label: 'Long time series',\n  value: timeSeriesFormat.TimeSeriesLong,\n  description: 'Convert each frame to long format',\n  info: (\n    <ul>\n      <li>Single frame</li>\n      <li>1st field is time field</li>\n      <li>Time in ascending order, but may have duplictes</li>\n      <li>String values are represented as separate fields rather than as labels</li>\n      <li>Multiple value fields may exist</li>\n    </ul>\n  ),\n};\n\nconst formats: Array<SelectableValue<timeSeriesFormat>> = [wideInfo, manyInfo, longInfo];\n\nexport function PrepareTimeSeriesEditor(props: TransformerUIProps<PrepareTimeSeriesOptions>): React.ReactElement {\n  const { options, onChange } = props;\n  const styles = useStyles2(getStyles);\n\n  const onSelectFormat = useCallback(\n    (value: SelectableValue<timeSeriesFormat>) => {\n      onChange({\n        ...options,\n        format: value.value!,\n      });\n    },\n    [onChange, options]\n  );\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Format\" labelWidth={12}>\n          <Select\n            width={35}\n            options={formats}\n            value={formats.find((v) => v.value === options.format) || formats[0]}\n            onChange={onSelectFormat}\n            className=\"flex-grow-1\"\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Info\" labelWidth={12}>\n          <div className={styles.info}>{(formats.find((v) => v.value === options.format) || formats[0]).info}</div>\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  info: css`\n    margin-left: 20px;\n  `,\n});\n\nexport const prepareTimeseriesTransformerRegistryItem: TransformerRegistryItem<PrepareTimeSeriesOptions> = {\n  id: prepareTimeSeriesTransformer.id,\n  editor: PrepareTimeSeriesEditor,\n  transformation: prepareTimeSeriesTransformer,\n  name: prepareTimeSeriesTransformer.name,\n  description: prepareTimeSeriesTransformer.description,\n  help: `\n  ### Use cases\n\n  This takes query results and transforms them into a predictable timeseries format.\n  This transformer may be especially useful when using old panels that only expect the\n  many-frame timeseries format.\n  `,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}