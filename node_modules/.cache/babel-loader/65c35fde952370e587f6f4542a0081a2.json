{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { from, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { getDefaultTimeRange, LoadingState, VariableSupportType } from '@grafana/data';\nimport { hasCustomVariableSupport, hasDatasourceVariableSupport, hasLegacyVariableSupport, hasStandardVariableSupport } from '../guard';\nimport { getLegacyQueryOptions } from '../utils';\nexport class QueryRunners {\n  constructor() {\n    _defineProperty(this, \"runners\", void 0);\n\n    this.runners = [new LegacyQueryRunner(), new StandardQueryRunner(), new CustomQueryRunner(), new DatasourceQueryRunner()];\n  }\n\n  getRunnerForDatasource(datasource) {\n    const runner = this.runners.find(runner => runner.canRun(datasource));\n\n    if (runner) {\n      return runner;\n    }\n\n    throw new Error(\"Couldn't find a query runner that matches supplied arguments.\");\n  }\n\n}\n\nclass LegacyQueryRunner {\n  constructor() {\n    _defineProperty(this, \"type\", VariableSupportType.Legacy);\n  }\n\n  canRun(dataSource) {\n    return hasLegacyVariableSupport(dataSource);\n  }\n\n  getTarget({\n    datasource,\n    variable\n  }) {\n    if (hasLegacyVariableSupport(datasource)) {\n      return variable.query;\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  runRequest({\n    datasource,\n    variable,\n    searchFilter,\n    timeSrv\n  }, request) {\n    if (!hasLegacyVariableSupport(datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    const queryOptions = getLegacyQueryOptions(variable, searchFilter, timeSrv);\n    return from(datasource.metricFindQuery(variable.query, queryOptions)).pipe(mergeMap(values => {\n      if (!values || !values.length) {\n        return getEmptyMetricFindValueObservable();\n      }\n\n      const series = values;\n      return of({\n        series,\n        state: LoadingState.Done,\n        timeRange: queryOptions.range\n      });\n    }));\n  }\n\n}\n\nclass StandardQueryRunner {\n  constructor() {\n    _defineProperty(this, \"type\", VariableSupportType.Standard);\n  }\n\n  canRun(dataSource) {\n    return hasStandardVariableSupport(dataSource);\n  }\n\n  getTarget({\n    datasource,\n    variable\n  }) {\n    if (hasStandardVariableSupport(datasource)) {\n      return datasource.variables.toDataQuery(variable.query);\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  runRequest({\n    datasource,\n    runRequest\n  }, request) {\n    if (!hasStandardVariableSupport(datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    if (!datasource.variables.query) {\n      return runRequest(datasource, request);\n    }\n\n    return runRequest(datasource, request, datasource.variables.query);\n  }\n\n}\n\nclass CustomQueryRunner {\n  constructor() {\n    _defineProperty(this, \"type\", VariableSupportType.Custom);\n  }\n\n  canRun(dataSource) {\n    return hasCustomVariableSupport(dataSource);\n  }\n\n  getTarget({\n    datasource,\n    variable\n  }) {\n    if (hasCustomVariableSupport(datasource)) {\n      return variable.query;\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  runRequest({\n    datasource,\n    runRequest\n  }, request) {\n    if (!hasCustomVariableSupport(datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    return runRequest(datasource, request, datasource.variables.query);\n  }\n\n}\n\nexport const variableDummyRefId = 'variable-query';\n\nclass DatasourceQueryRunner {\n  constructor() {\n    _defineProperty(this, \"type\", VariableSupportType.Datasource);\n  }\n\n  canRun(dataSource) {\n    return hasDatasourceVariableSupport(dataSource);\n  }\n\n  getTarget({\n    datasource,\n    variable\n  }) {\n    if (hasDatasourceVariableSupport(datasource)) {\n      var _variable$query$refId;\n\n      return Object.assign({}, variable.query, {\n        refId: (_variable$query$refId = variable.query.refId) !== null && _variable$query$refId !== void 0 ? _variable$query$refId : variableDummyRefId\n      });\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  runRequest({\n    datasource,\n    runRequest\n  }, request) {\n    if (!hasDatasourceVariableSupport(datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    return runRequest(datasource, request);\n  }\n\n}\n\nfunction getEmptyMetricFindValueObservable() {\n  return of({\n    state: LoadingState.Done,\n    series: [],\n    timeRange: getDefaultTimeRange()\n  });\n}","map":{"version":3,"names":["from","of","mergeMap","getDefaultTimeRange","LoadingState","VariableSupportType","hasCustomVariableSupport","hasDatasourceVariableSupport","hasLegacyVariableSupport","hasStandardVariableSupport","getLegacyQueryOptions","QueryRunners","constructor","runners","LegacyQueryRunner","StandardQueryRunner","CustomQueryRunner","DatasourceQueryRunner","getRunnerForDatasource","datasource","runner","find","canRun","Error","Legacy","dataSource","getTarget","variable","query","runRequest","searchFilter","timeSrv","request","getEmptyMetricFindValueObservable","queryOptions","metricFindQuery","pipe","values","length","series","state","Done","timeRange","range","Standard","variables","toDataQuery","Custom","variableDummyRefId","Datasource","refId"],"sources":["/home/soula/grafana/public/app/features/variables/query/queryRunners.ts"],"sourcesContent":["import { from, Observable, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport {\n  DataQuery,\n  DataQueryRequest,\n  DataSourceApi,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  VariableSupportType,\n} from '@grafana/data';\n\nimport { TimeSrv } from '../../dashboard/services/TimeSrv';\nimport {\n  hasCustomVariableSupport,\n  hasDatasourceVariableSupport,\n  hasLegacyVariableSupport,\n  hasStandardVariableSupport,\n} from '../guard';\nimport { QueryVariableModel } from '../types';\nimport { getLegacyQueryOptions } from '../utils';\n\nexport interface RunnerArgs {\n  variable: QueryVariableModel;\n  datasource: DataSourceApi;\n  timeSrv: TimeSrv;\n  runRequest: (\n    datasource: DataSourceApi,\n    request: DataQueryRequest,\n    queryFunction?: typeof datasource.query\n  ) => Observable<PanelData>;\n  searchFilter?: string;\n}\n\ntype GetTargetArgs = { datasource: DataSourceApi; variable: QueryVariableModel };\n\nexport interface QueryRunner {\n  type: VariableSupportType;\n  canRun: (dataSource: DataSourceApi) => boolean;\n  getTarget: (args: GetTargetArgs) => DataQuery;\n  runRequest: (args: RunnerArgs, request: DataQueryRequest) => Observable<PanelData>;\n}\n\nexport class QueryRunners {\n  private readonly runners: QueryRunner[];\n  constructor() {\n    this.runners = [\n      new LegacyQueryRunner(),\n      new StandardQueryRunner(),\n      new CustomQueryRunner(),\n      new DatasourceQueryRunner(),\n    ];\n  }\n\n  getRunnerForDatasource(datasource: DataSourceApi): QueryRunner {\n    const runner = this.runners.find((runner) => runner.canRun(datasource));\n    if (runner) {\n      return runner;\n    }\n\n    throw new Error(\"Couldn't find a query runner that matches supplied arguments.\");\n  }\n}\n\nclass LegacyQueryRunner implements QueryRunner {\n  type = VariableSupportType.Legacy;\n\n  canRun(dataSource: DataSourceApi) {\n    return hasLegacyVariableSupport(dataSource);\n  }\n\n  getTarget({ datasource, variable }: GetTargetArgs) {\n    if (hasLegacyVariableSupport(datasource)) {\n      return variable.query;\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  runRequest({ datasource, variable, searchFilter, timeSrv }: RunnerArgs, request: DataQueryRequest) {\n    if (!hasLegacyVariableSupport(datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    const queryOptions: any = getLegacyQueryOptions(variable, searchFilter, timeSrv);\n\n    return from(datasource.metricFindQuery(variable.query, queryOptions)).pipe(\n      mergeMap((values) => {\n        if (!values || !values.length) {\n          return getEmptyMetricFindValueObservable();\n        }\n\n        const series: any = values;\n        return of({ series, state: LoadingState.Done, timeRange: queryOptions.range });\n      })\n    );\n  }\n}\n\nclass StandardQueryRunner implements QueryRunner {\n  type = VariableSupportType.Standard;\n\n  canRun(dataSource: DataSourceApi) {\n    return hasStandardVariableSupport(dataSource);\n  }\n\n  getTarget({ datasource, variable }: GetTargetArgs) {\n    if (hasStandardVariableSupport(datasource)) {\n      return datasource.variables.toDataQuery(variable.query);\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  runRequest({ datasource, runRequest }: RunnerArgs, request: DataQueryRequest) {\n    if (!hasStandardVariableSupport(datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    if (!datasource.variables.query) {\n      return runRequest(datasource, request);\n    }\n\n    return runRequest(datasource, request, datasource.variables.query);\n  }\n}\n\nclass CustomQueryRunner implements QueryRunner {\n  type = VariableSupportType.Custom;\n\n  canRun(dataSource: DataSourceApi) {\n    return hasCustomVariableSupport(dataSource);\n  }\n\n  getTarget({ datasource, variable }: GetTargetArgs) {\n    if (hasCustomVariableSupport(datasource)) {\n      return variable.query;\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  runRequest({ datasource, runRequest }: RunnerArgs, request: DataQueryRequest) {\n    if (!hasCustomVariableSupport(datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    return runRequest(datasource, request, datasource.variables.query);\n  }\n}\n\nexport const variableDummyRefId = 'variable-query';\n\nclass DatasourceQueryRunner implements QueryRunner {\n  type = VariableSupportType.Datasource;\n\n  canRun(dataSource: DataSourceApi) {\n    return hasDatasourceVariableSupport(dataSource);\n  }\n\n  getTarget({ datasource, variable }: GetTargetArgs) {\n    if (hasDatasourceVariableSupport(datasource)) {\n      return { ...variable.query, refId: variable.query.refId ?? variableDummyRefId };\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  runRequest({ datasource, runRequest }: RunnerArgs, request: DataQueryRequest) {\n    if (!hasDatasourceVariableSupport(datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    return runRequest(datasource, request);\n  }\n}\n\nfunction getEmptyMetricFindValueObservable(): Observable<PanelData> {\n  return of({ state: LoadingState.Done, series: [], timeRange: getDefaultTimeRange() });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}