{"ast":null,"code":"import { of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { standardTransformersRegistry } from './standardTransformersRegistry';\n\nconst getOperator = config => source => {\n  var _info$transformation$;\n\n  const info = standardTransformersRegistry.get(config.id);\n\n  if (!info) {\n    return source;\n  }\n\n  const defaultOptions = (_info$transformation$ = info.transformation.defaultOptions) !== null && _info$transformation$ !== void 0 ? _info$transformation$ : {};\n  const options = Object.assign({}, defaultOptions, config.options);\n  return source.pipe(mergeMap(before => of(before).pipe(info.transformation.operator(options, config.replace), postProcessTransform(before, info))));\n};\n\nconst postProcessTransform = (before, info) => source => source.pipe(map(after => {\n  if (after === before) {\n    return after;\n  } // Add a key to the metadata if the data changed\n\n\n  for (const series of after) {\n    if (!series.meta) {\n      series.meta = {};\n    }\n\n    if (!series.meta.transformations) {\n      series.meta.transformations = [info.id];\n    } else {\n      series.meta.transformations = [...series.meta.transformations, info.id];\n    }\n  }\n\n  return after;\n}));\n/**\n * Apply configured transformations to the input data\n */\n\n\nexport function transformDataFrame(options, data) {\n  const stream = of(data);\n\n  if (!options.length) {\n    return stream;\n  }\n\n  const operators = [];\n\n  for (let index = 0; index < options.length; index++) {\n    const config = options[index];\n\n    if (config.disabled) {\n      continue;\n    }\n\n    operators.push(getOperator(config));\n  } // @ts-ignore TypeScript has a hard time understanding this construct\n\n\n  return stream.pipe.apply(stream, operators);\n}","map":{"version":3,"names":["of","map","mergeMap","standardTransformersRegistry","getOperator","config","source","info","get","id","defaultOptions","transformation","options","pipe","before","operator","replace","postProcessTransform","after","series","meta","transformations","transformDataFrame","data","stream","length","operators","index","disabled","push","apply"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/transformDataFrame.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { DataFrame, DataTransformerConfig } from '../types';\n\nimport { standardTransformersRegistry, TransformerRegistryItem } from './standardTransformersRegistry';\n\nconst getOperator =\n  (config: DataTransformerConfig): MonoTypeOperatorFunction<DataFrame[]> =>\n  (source) => {\n    const info = standardTransformersRegistry.get(config.id);\n\n    if (!info) {\n      return source;\n    }\n\n    const defaultOptions = info.transformation.defaultOptions ?? {};\n    const options = { ...defaultOptions, ...config.options };\n\n    return source.pipe(\n      mergeMap((before) =>\n        of(before).pipe(info.transformation.operator(options, config.replace), postProcessTransform(before, info))\n      )\n    );\n  };\n\nconst postProcessTransform =\n  (before: DataFrame[], info: TransformerRegistryItem<any>): MonoTypeOperatorFunction<DataFrame[]> =>\n  (source) =>\n    source.pipe(\n      map((after) => {\n        if (after === before) {\n          return after;\n        }\n\n        // Add a key to the metadata if the data changed\n        for (const series of after) {\n          if (!series.meta) {\n            series.meta = {};\n          }\n\n          if (!series.meta.transformations) {\n            series.meta.transformations = [info.id];\n          } else {\n            series.meta.transformations = [...series.meta.transformations, info.id];\n          }\n        }\n\n        return after;\n      })\n    );\n\n/**\n * Apply configured transformations to the input data\n */\nexport function transformDataFrame(options: DataTransformerConfig[], data: DataFrame[]): Observable<DataFrame[]> {\n  const stream = of<DataFrame[]>(data);\n\n  if (!options.length) {\n    return stream;\n  }\n\n  const operators: Array<MonoTypeOperatorFunction<DataFrame[]>> = [];\n\n  for (let index = 0; index < options.length; index++) {\n    const config = options[index];\n\n    if (config.disabled) {\n      continue;\n    }\n\n    operators.push(getOperator(config));\n  }\n\n  // @ts-ignore TypeScript has a hard time understanding this construct\n  return stream.pipe.apply(stream, operators);\n}\n"],"mappings":"AAAA,SAA+CA,EAA/C,QAAyD,MAAzD;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAIA,SAASC,4BAAT,QAAsE,gCAAtE;;AAEA,MAAMC,WAAW,GACdC,MAAD,IACCC,MAAD,IAAY;EAAA;;EACV,MAAMC,IAAI,GAAGJ,4BAA4B,CAACK,GAA7B,CAAiCH,MAAM,CAACI,EAAxC,CAAb;;EAEA,IAAI,CAACF,IAAL,EAAW;IACT,OAAOD,MAAP;EACD;;EAED,MAAMI,cAAc,4BAAGH,IAAI,CAACI,cAAL,CAAoBD,cAAvB,yEAAyC,EAA7D;EACA,MAAME,OAAO,qBAAQF,cAAR,EAA2BL,MAAM,CAACO,OAAlC,CAAb;EAEA,OAAON,MAAM,CAACO,IAAP,CACLX,QAAQ,CAAEY,MAAD,IACPd,EAAE,CAACc,MAAD,CAAF,CAAWD,IAAX,CAAgBN,IAAI,CAACI,cAAL,CAAoBI,QAApB,CAA6BH,OAA7B,EAAsCP,MAAM,CAACW,OAA7C,CAAhB,EAAuEC,oBAAoB,CAACH,MAAD,EAASP,IAAT,CAA3F,CADM,CADH,CAAP;AAKD,CAjBH;;AAmBA,MAAMU,oBAAoB,GACxB,CAACH,MAAD,EAAsBP,IAAtB,KACCD,MAAD,IACEA,MAAM,CAACO,IAAP,CACEZ,GAAG,CAAEiB,KAAD,IAAW;EACb,IAAIA,KAAK,KAAKJ,MAAd,EAAsB;IACpB,OAAOI,KAAP;EACD,CAHY,CAKb;;;EACA,KAAK,MAAMC,MAAX,IAAqBD,KAArB,EAA4B;IAC1B,IAAI,CAACC,MAAM,CAACC,IAAZ,EAAkB;MAChBD,MAAM,CAACC,IAAP,GAAc,EAAd;IACD;;IAED,IAAI,CAACD,MAAM,CAACC,IAAP,CAAYC,eAAjB,EAAkC;MAChCF,MAAM,CAACC,IAAP,CAAYC,eAAZ,GAA8B,CAACd,IAAI,CAACE,EAAN,CAA9B;IACD,CAFD,MAEO;MACLU,MAAM,CAACC,IAAP,CAAYC,eAAZ,GAA8B,CAAC,GAAGF,MAAM,CAACC,IAAP,CAAYC,eAAhB,EAAiCd,IAAI,CAACE,EAAtC,CAA9B;IACD;EACF;;EAED,OAAOS,KAAP;AACD,CAnBE,CADL,CAHJ;AA0BA;AACA;AACA;;;AACA,OAAO,SAASI,kBAAT,CAA4BV,OAA5B,EAA8DW,IAA9D,EAA0G;EAC/G,MAAMC,MAAM,GAAGxB,EAAE,CAAcuB,IAAd,CAAjB;;EAEA,IAAI,CAACX,OAAO,CAACa,MAAb,EAAqB;IACnB,OAAOD,MAAP;EACD;;EAED,MAAME,SAAuD,GAAG,EAAhE;;EAEA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGf,OAAO,CAACa,MAApC,EAA4CE,KAAK,EAAjD,EAAqD;IACnD,MAAMtB,MAAM,GAAGO,OAAO,CAACe,KAAD,CAAtB;;IAEA,IAAItB,MAAM,CAACuB,QAAX,EAAqB;MACnB;IACD;;IAEDF,SAAS,CAACG,IAAV,CAAezB,WAAW,CAACC,MAAD,CAA1B;EACD,CAjB8G,CAmB/G;;;EACA,OAAOmB,MAAM,CAACX,IAAP,CAAYiB,KAAZ,CAAkBN,MAAlB,EAA0BE,SAA1B,CAAP;AACD"},"metadata":{},"sourceType":"module"}