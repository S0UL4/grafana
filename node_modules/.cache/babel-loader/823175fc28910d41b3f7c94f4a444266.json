{"ast":null,"code":"import { extendedStats } from '../../../../query_def';\n\nconst hasValue = value => object => object.value === value; // FIXME: All the defaults and validations down here should be defined somewhere else\n// as they are also the defaults that are gonna be applied to the query.\n// In the previous version, the same method was taking care of describing the settings and setting defaults.\n\n\nexport const useDescription = metric => {\n  var _metric$settings2, _metric$settings3, _metric$settings3$per;\n\n  switch (metric.type) {\n    case 'cardinality':\n      {\n        var _metric$settings;\n\n        const precisionThreshold = ((_metric$settings = metric.settings) === null || _metric$settings === void 0 ? void 0 : _metric$settings.precision_threshold) || '';\n        return `Precision threshold: ${precisionThreshold}`;\n      }\n\n    case 'percentiles':\n      if ((_metric$settings2 = metric.settings) !== null && _metric$settings2 !== void 0 && _metric$settings2.percents && ((_metric$settings3 = metric.settings) === null || _metric$settings3 === void 0 ? void 0 : (_metric$settings3$per = _metric$settings3.percents) === null || _metric$settings3$per === void 0 ? void 0 : _metric$settings3$per.length) >= 1) {\n        var _metric$settings4;\n\n        return `Values: ${(_metric$settings4 = metric.settings) === null || _metric$settings4 === void 0 ? void 0 : _metric$settings4.percents}`;\n      }\n\n      return 'Percents: Default';\n\n    case 'extended_stats':\n      {\n        const selectedStats = Object.entries(metric.meta || {}).map(([key, value]) => {\n          var _extendedStats$find;\n\n          return value && ((_extendedStats$find = extendedStats.find(hasValue(key))) === null || _extendedStats$find === void 0 ? void 0 : _extendedStats$find.label);\n        }).filter(Boolean);\n        return `Stats: ${selectedStats.length > 0 ? selectedStats.join(', ') : 'None selected'}`;\n      }\n\n    case 'raw_document':\n    case 'raw_data':\n      {\n        var _metric$settings5;\n\n        const size = ((_metric$settings5 = metric.settings) === null || _metric$settings5 === void 0 ? void 0 : _metric$settings5.size) || 500;\n        return `Size: ${size}`;\n      }\n\n    default:\n      return 'Options';\n  }\n};","map":{"version":3,"names":["extendedStats","hasValue","value","object","useDescription","metric","type","precisionThreshold","settings","precision_threshold","percents","length","selectedStats","Object","entries","meta","map","key","find","label","filter","Boolean","join","size"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/useDescription.ts"],"sourcesContent":["import { extendedStats } from '../../../../query_def';\nimport { MetricAggregation } from '../aggregations';\n\nconst hasValue = (value: string) => (object: { value: string }) => object.value === value;\n\n// FIXME: All the defaults and validations down here should be defined somewhere else\n// as they are also the defaults that are gonna be applied to the query.\n// In the previous version, the same method was taking care of describing the settings and setting defaults.\nexport const useDescription = (metric: MetricAggregation): string => {\n  switch (metric.type) {\n    case 'cardinality': {\n      const precisionThreshold = metric.settings?.precision_threshold || '';\n      return `Precision threshold: ${precisionThreshold}`;\n    }\n\n    case 'percentiles':\n      if (metric.settings?.percents && metric.settings?.percents?.length >= 1) {\n        return `Values: ${metric.settings?.percents}`;\n      }\n\n      return 'Percents: Default';\n\n    case 'extended_stats': {\n      const selectedStats = Object.entries(metric.meta || {})\n        .map(([key, value]) => value && extendedStats.find(hasValue(key))?.label)\n        .filter(Boolean);\n\n      return `Stats: ${selectedStats.length > 0 ? selectedStats.join(', ') : 'None selected'}`;\n    }\n\n    case 'raw_document':\n    case 'raw_data': {\n      const size = metric.settings?.size || 500;\n      return `Size: ${size}`;\n    }\n\n    default:\n      return 'Options';\n  }\n};\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,uBAA9B;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,IAAoBC,MAAD,IAA+BA,MAAM,CAACD,KAAP,KAAiBA,KAApF,C,CAEA;AACA;AACA;;;AACA,OAAO,MAAME,cAAc,GAAIC,MAAD,IAAuC;EAAA;;EACnE,QAAQA,MAAM,CAACC,IAAf;IACE,KAAK,aAAL;MAAoB;QAAA;;QAClB,MAAMC,kBAAkB,GAAG,qBAAAF,MAAM,CAACG,QAAP,sEAAiBC,mBAAjB,KAAwC,EAAnE;QACA,OAAQ,wBAAuBF,kBAAmB,EAAlD;MACD;;IAED,KAAK,aAAL;MACE,IAAI,qBAAAF,MAAM,CAACG,QAAP,gEAAiBE,QAAjB,IAA6B,sBAAAL,MAAM,CAACG,QAAP,iGAAiBE,QAAjB,gFAA2BC,MAA3B,KAAqC,CAAtE,EAAyE;QAAA;;QACvE,OAAQ,WAAD,qBAAWN,MAAM,CAACG,QAAlB,sDAAW,kBAAiBE,QAAS,EAA5C;MACD;;MAED,OAAO,mBAAP;;IAEF,KAAK,gBAAL;MAAuB;QACrB,MAAME,aAAa,GAAGC,MAAM,CAACC,OAAP,CAAeT,MAAM,CAACU,IAAP,IAAe,EAA9B,EACnBC,GADmB,CACf,CAAC,CAACC,GAAD,EAAMf,KAAN,CAAD;UAAA;;UAAA,OAAkBA,KAAK,4BAAIF,aAAa,CAACkB,IAAd,CAAmBjB,QAAQ,CAACgB,GAAD,CAA3B,CAAJ,wDAAI,oBAAmCE,KAAvC,CAAvB;QAAA,CADe,EAEnBC,MAFmB,CAEZC,OAFY,CAAtB;QAIA,OAAQ,UAAST,aAAa,CAACD,MAAd,GAAuB,CAAvB,GAA2BC,aAAa,CAACU,IAAd,CAAmB,IAAnB,CAA3B,GAAsD,eAAgB,EAAvF;MACD;;IAED,KAAK,cAAL;IACA,KAAK,UAAL;MAAiB;QAAA;;QACf,MAAMC,IAAI,GAAG,sBAAAlB,MAAM,CAACG,QAAP,wEAAiBe,IAAjB,KAAyB,GAAtC;QACA,OAAQ,SAAQA,IAAK,EAArB;MACD;;IAED;MACE,OAAO,SAAP;EA5BJ;AA8BD,CA/BM"},"metadata":{},"sourceType":"module"}