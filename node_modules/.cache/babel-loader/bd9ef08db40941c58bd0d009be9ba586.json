{"ast":null,"code":"import React, { useState } from 'react';\nimport { urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Button, Checkbox, Field, FieldSet, Modal, RadioButtonGroup } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const StartModal = ({\n  playlist,\n  onDismiss\n}) => {\n  const [mode, setMode] = useState(false);\n  const [autoFit, setAutofit] = useState(false);\n  const modes = [{\n    label: 'Normal',\n    value: false\n  }, {\n    label: 'TV',\n    value: 'tv'\n  }, {\n    label: 'Kiosk',\n    value: true\n  }];\n\n  const onStart = () => {\n    const params = {};\n\n    if (mode) {\n      params.kiosk = mode;\n    }\n\n    if (autoFit) {\n      params.autofitpanels = true;\n    }\n\n    locationService.push(urlUtil.renderUrl(`/playlists/play/${playlist.uid}`, params));\n  };\n\n  return /*#__PURE__*/_jsxs(Modal, {\n    isOpen: true,\n    icon: \"play\",\n    title: \"Start playlist\",\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxs(FieldSet, {\n      children: [/*#__PURE__*/_jsx(Field, {\n        label: \"Mode\",\n        children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n          value: mode,\n          options: modes,\n          onChange: setMode\n        })\n      }), /*#__PURE__*/_jsx(Checkbox, {\n        label: \"Autofit\",\n        description: \"Panel heights will be adjusted to fit screen size\",\n        name: \"autofix\",\n        value: autoFit,\n        onChange: e => setAutofit(e.currentTarget.checked)\n      })]\n    }), /*#__PURE__*/_jsx(Modal.ButtonRow, {\n      children: /*#__PURE__*/_jsxs(Button, {\n        variant: \"primary\",\n        onClick: onStart,\n        children: [\"Start \", playlist.name]\n      })\n    })]\n  });\n};","map":{"version":3,"names":["React","useState","urlUtil","locationService","Button","Checkbox","Field","FieldSet","Modal","RadioButtonGroup","StartModal","playlist","onDismiss","mode","setMode","autoFit","setAutofit","modes","label","value","onStart","params","kiosk","autofitpanels","push","renderUrl","uid","e","currentTarget","checked","name"],"sources":["/home/soula/grafana/public/app/features/playlist/StartModal.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\n\nimport { SelectableValue, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Button, Checkbox, Field, FieldSet, Modal, RadioButtonGroup } from '@grafana/ui';\n\nimport { PlaylistDTO, PlaylistMode } from './types';\n\nexport interface StartModalProps {\n  playlist: PlaylistDTO;\n  onDismiss: () => void;\n}\n\nexport const StartModal: FC<StartModalProps> = ({ playlist, onDismiss }) => {\n  const [mode, setMode] = useState<PlaylistMode>(false);\n  const [autoFit, setAutofit] = useState(false);\n\n  const modes: Array<SelectableValue<PlaylistMode>> = [\n    { label: 'Normal', value: false },\n    { label: 'TV', value: 'tv' },\n    { label: 'Kiosk', value: true },\n  ];\n\n  const onStart = () => {\n    const params: any = {};\n    if (mode) {\n      params.kiosk = mode;\n    }\n    if (autoFit) {\n      params.autofitpanels = true;\n    }\n    locationService.push(urlUtil.renderUrl(`/playlists/play/${playlist.uid}`, params));\n  };\n\n  return (\n    <Modal isOpen={true} icon=\"play\" title=\"Start playlist\" onDismiss={onDismiss}>\n      <FieldSet>\n        <Field label=\"Mode\">\n          <RadioButtonGroup value={mode} options={modes} onChange={setMode} />\n        </Field>\n        <Checkbox\n          label=\"Autofit\"\n          description=\"Panel heights will be adjusted to fit screen size\"\n          name=\"autofix\"\n          value={autoFit}\n          onChange={(e) => setAutofit(e.currentTarget.checked)}\n        />\n      </FieldSet>\n      <Modal.ButtonRow>\n        <Button variant=\"primary\" onClick={onStart}>\n          Start {playlist.name}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AAEA,SAA0BC,OAA1B,QAAyC,eAAzC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA4CC,KAA5C,EAAmDC,gBAAnD,QAA2E,aAA3E;;;AASA,OAAO,MAAMC,UAA+B,GAAG,CAAC;EAAEC,QAAF;EAAYC;AAAZ,CAAD,KAA6B;EAC1E,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAe,KAAf,CAAhC;EACA,MAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,KAAD,CAAtC;EAEA,MAAMgB,KAA2C,GAAG,CAClD;IAAEC,KAAK,EAAE,QAAT;IAAmBC,KAAK,EAAE;EAA1B,CADkD,EAElD;IAAED,KAAK,EAAE,IAAT;IAAeC,KAAK,EAAE;EAAtB,CAFkD,EAGlD;IAAED,KAAK,EAAE,OAAT;IAAkBC,KAAK,EAAE;EAAzB,CAHkD,CAApD;;EAMA,MAAMC,OAAO,GAAG,MAAM;IACpB,MAAMC,MAAW,GAAG,EAApB;;IACA,IAAIR,IAAJ,EAAU;MACRQ,MAAM,CAACC,KAAP,GAAeT,IAAf;IACD;;IACD,IAAIE,OAAJ,EAAa;MACXM,MAAM,CAACE,aAAP,GAAuB,IAAvB;IACD;;IACDpB,eAAe,CAACqB,IAAhB,CAAqBtB,OAAO,CAACuB,SAAR,CAAmB,mBAAkBd,QAAQ,CAACe,GAAI,EAAlD,EAAqDL,MAArD,CAArB;EACD,CATD;;EAWA,oBACE,MAAC,KAAD;IAAO,MAAM,EAAE,IAAf;IAAqB,IAAI,EAAC,MAA1B;IAAiC,KAAK,EAAC,gBAAvC;IAAwD,SAAS,EAAET,SAAnE;IAAA,wBACE,MAAC,QAAD;MAAA,wBACE,KAAC,KAAD;QAAO,KAAK,EAAC,MAAb;QAAA,uBACE,KAAC,gBAAD;UAAkB,KAAK,EAAEC,IAAzB;UAA+B,OAAO,EAAEI,KAAxC;UAA+C,QAAQ,EAAEH;QAAzD;MADF,EADF,eAIE,KAAC,QAAD;QACE,KAAK,EAAC,SADR;QAEE,WAAW,EAAC,mDAFd;QAGE,IAAI,EAAC,SAHP;QAIE,KAAK,EAAEC,OAJT;QAKE,QAAQ,EAAGY,CAAD,IAAOX,UAAU,CAACW,CAAC,CAACC,aAAF,CAAgBC,OAAjB;MAL7B,EAJF;IAAA,EADF,eAaE,KAAC,KAAD,CAAO,SAAP;MAAA,uBACE,MAAC,MAAD;QAAQ,OAAO,EAAC,SAAhB;QAA0B,OAAO,EAAET,OAAnC;QAAA,qBACST,QAAQ,CAACmB,IADlB;MAAA;IADF,EAbF;EAAA,EADF;AAqBD,CA1CM"},"metadata":{},"sourceType":"module"}