{"ast":null,"code":"import { get as lodashGet } from 'lodash';\nimport { FrameState } from 'app/features/canvas/runtime/frame';\nimport { setOptionImmutably } from 'app/features/dashboard/components/PanelEditor/utils';\nimport { LayerElementListEditor } from './LayerElementListEditor';\nimport { PlacementEditor } from './PlacementEditor';\nimport { optionBuilder } from './options';\nexport function getLayerEditor(opts) {\n  const {\n    selected,\n    scene\n  } = opts;\n\n  if (!scene.currentLayer) {\n    scene.currentLayer = scene.root;\n  }\n\n  if (selected) {\n    for (const element of selected) {\n      if (element instanceof FrameState) {\n        scene.currentLayer = element;\n        break;\n      }\n\n      if (element.parent) {\n        scene.currentLayer = element.parent;\n        break;\n      }\n    }\n  }\n\n  const options = scene.currentLayer.options || {\n    elements: []\n  };\n  return {\n    category: ['Layer'],\n    path: '--',\n    // not used!\n    // Note that canvas editor writes things to the scene!\n    values: parent => ({\n      getValue: path => {\n        return lodashGet(options, path);\n      },\n      onChange: (path, value) => {\n        var _scene$currentLayer, _scene$currentLayer2;\n\n        if (path === 'type' && value) {\n          console.warn('unable to change layer type');\n          return;\n        }\n\n        const c = setOptionImmutably(options, path, value);\n        (_scene$currentLayer = scene.currentLayer) === null || _scene$currentLayer === void 0 ? void 0 : _scene$currentLayer.onChange(c);\n        (_scene$currentLayer2 = scene.currentLayer) === null || _scene$currentLayer2 === void 0 ? void 0 : _scene$currentLayer2.updateData(scene.context);\n      }\n    }),\n    // Dynamically fill the selected element\n    build: (builder, context) => {\n      const currentLayer = scene.currentLayer;\n\n      if (currentLayer && !currentLayer.isRoot()) {// TODO: the non-root nav option\n      }\n\n      builder.addCustomEditor({\n        id: 'content',\n        path: 'root',\n        name: 'Elements',\n        editor: LayerElementListEditor,\n        settings: {\n          scene,\n          layer: scene.currentLayer,\n          selected\n        }\n      });\n      const ctx = Object.assign({}, context, {\n        options\n      });\n      optionBuilder.addBackground(builder, ctx);\n      optionBuilder.addBorder(builder, ctx);\n\n      if (currentLayer && !currentLayer.isRoot()) {\n        builder.addCustomEditor({\n          category: ['Layout'],\n          id: 'content',\n          path: '__',\n          // not used\n          name: 'Constraints',\n          editor: PlacementEditor,\n          settings: {\n            scene: opts.scene,\n            element: currentLayer\n          }\n        });\n      }\n    }\n  };\n}","map":{"version":3,"names":["get","lodashGet","FrameState","setOptionImmutably","LayerElementListEditor","PlacementEditor","optionBuilder","getLayerEditor","opts","selected","scene","currentLayer","root","element","parent","options","elements","category","path","values","getValue","onChange","value","console","warn","c","updateData","context","build","builder","isRoot","addCustomEditor","id","name","editor","settings","layer","ctx","addBackground","addBorder"],"sources":["/home/soula/grafana/public/app/plugins/panel/canvas/editor/layerEditor.tsx"],"sourcesContent":["import { get as lodashGet } from 'lodash';\n\nimport { NestedPanelOptions, NestedValueAccess } from '@grafana/data/src/utils/OptionsUIBuilders';\nimport { ElementState } from 'app/features/canvas/runtime/element';\nimport { FrameState } from 'app/features/canvas/runtime/frame';\nimport { Scene } from 'app/features/canvas/runtime/scene';\nimport { setOptionImmutably } from 'app/features/dashboard/components/PanelEditor/utils';\n\nimport { InstanceState } from '../CanvasPanel';\n\nimport { LayerElementListEditor } from './LayerElementListEditor';\nimport { PlacementEditor } from './PlacementEditor';\nimport { optionBuilder } from './options';\n\nexport interface LayerEditorProps {\n  scene: Scene;\n  layer: FrameState;\n  selected: ElementState[];\n}\n\nexport function getLayerEditor(opts: InstanceState): NestedPanelOptions<LayerEditorProps> {\n  const { selected, scene } = opts;\n\n  if (!scene.currentLayer) {\n    scene.currentLayer = scene.root as FrameState;\n  }\n\n  if (selected) {\n    for (const element of selected) {\n      if (element instanceof FrameState) {\n        scene.currentLayer = element;\n        break;\n      }\n\n      if (element.parent) {\n        scene.currentLayer = element.parent;\n        break;\n      }\n    }\n  }\n\n  const options = scene.currentLayer.options || { elements: [] };\n\n  return {\n    category: ['Layer'],\n    path: '--', // not used!\n\n    // Note that canvas editor writes things to the scene!\n    values: (parent: NestedValueAccess) => ({\n      getValue: (path: string) => {\n        return lodashGet(options, path);\n      },\n      onChange: (path: string, value: any) => {\n        if (path === 'type' && value) {\n          console.warn('unable to change layer type');\n          return;\n        }\n        const c = setOptionImmutably(options, path, value);\n        scene.currentLayer?.onChange(c);\n        scene.currentLayer?.updateData(scene.context);\n      },\n    }),\n\n    // Dynamically fill the selected element\n    build: (builder, context) => {\n      const currentLayer = scene.currentLayer;\n      if (currentLayer && !currentLayer.isRoot()) {\n        // TODO: the non-root nav option\n      }\n\n      builder.addCustomEditor({\n        id: 'content',\n        path: 'root',\n        name: 'Elements',\n        editor: LayerElementListEditor,\n        settings: { scene, layer: scene.currentLayer, selected },\n      });\n\n      const ctx = { ...context, options };\n      optionBuilder.addBackground(builder as any, ctx);\n      optionBuilder.addBorder(builder as any, ctx);\n\n      if (currentLayer && !currentLayer.isRoot()) {\n        builder.addCustomEditor({\n          category: ['Layout'],\n          id: 'content',\n          path: '__', // not used\n          name: 'Constraints',\n          editor: PlacementEditor,\n          settings: {\n            scene: opts.scene,\n            element: currentLayer,\n          },\n        });\n      }\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}