{"ast":null,"code":"import produce from 'immer';\nimport { GraphDrawStyle, StackingMode } from '@grafana/schema';\nexport function applyGraphStyle(config, style) {\n  return produce(config, draft => {\n    if (draft.defaults.custom === undefined) {\n      draft.defaults.custom = {};\n    }\n\n    const {\n      custom\n    } = draft.defaults;\n\n    if (custom.stacking === undefined) {\n      custom.stacking = {\n        group: 'A'\n      };\n    }\n\n    switch (style) {\n      case 'lines':\n        custom.drawStyle = GraphDrawStyle.Line;\n        custom.stacking.mode = StackingMode.None;\n        custom.fillOpacity = 0;\n        break;\n\n      case 'bars':\n        custom.drawStyle = GraphDrawStyle.Bars;\n        custom.stacking.mode = StackingMode.None;\n        custom.fillOpacity = 100;\n        break;\n\n      case 'points':\n        custom.drawStyle = GraphDrawStyle.Points;\n        custom.stacking.mode = StackingMode.None;\n        custom.fillOpacity = 0;\n        break;\n\n      case 'stacked_lines':\n        custom.drawStyle = GraphDrawStyle.Line;\n        custom.stacking.mode = StackingMode.Normal;\n        custom.fillOpacity = 100;\n        break;\n\n      case 'stacked_bars':\n        custom.drawStyle = GraphDrawStyle.Bars;\n        custom.stacking.mode = StackingMode.Normal;\n        custom.fillOpacity = 100;\n        break;\n\n      default:\n        {\n          // should never happen\n          // NOTE: casting to `never` will cause typescript\n          // to verify that the switch statement checks every possible\n          // enum-value\n          const invalidValue = style;\n          throw new Error(`Invalid graph-style: ${invalidValue}`);\n        }\n    }\n  });\n}","map":{"version":3,"names":["produce","GraphDrawStyle","StackingMode","applyGraphStyle","config","style","draft","defaults","custom","undefined","stacking","group","drawStyle","Line","mode","None","fillOpacity","Bars","Points","Normal","invalidValue","Error"],"sources":["/home/soula/grafana/public/app/features/explore/exploreGraphStyleUtils.ts"],"sourcesContent":["import produce from 'immer';\n\nimport { FieldConfigSource } from '@grafana/data';\nimport { GraphDrawStyle, GraphFieldConfig, StackingMode } from '@grafana/schema';\n\nimport { ExploreGraphStyle } from '../../types';\n\nexport type FieldConfig = FieldConfigSource<GraphFieldConfig>;\n\nexport function applyGraphStyle(config: FieldConfig, style: ExploreGraphStyle): FieldConfig {\n  return produce(config, (draft) => {\n    if (draft.defaults.custom === undefined) {\n      draft.defaults.custom = {};\n    }\n\n    const { custom } = draft.defaults;\n\n    if (custom.stacking === undefined) {\n      custom.stacking = { group: 'A' };\n    }\n\n    switch (style) {\n      case 'lines':\n        custom.drawStyle = GraphDrawStyle.Line;\n        custom.stacking.mode = StackingMode.None;\n        custom.fillOpacity = 0;\n        break;\n      case 'bars':\n        custom.drawStyle = GraphDrawStyle.Bars;\n        custom.stacking.mode = StackingMode.None;\n        custom.fillOpacity = 100;\n        break;\n      case 'points':\n        custom.drawStyle = GraphDrawStyle.Points;\n        custom.stacking.mode = StackingMode.None;\n        custom.fillOpacity = 0;\n        break;\n      case 'stacked_lines':\n        custom.drawStyle = GraphDrawStyle.Line;\n        custom.stacking.mode = StackingMode.Normal;\n        custom.fillOpacity = 100;\n        break;\n      case 'stacked_bars':\n        custom.drawStyle = GraphDrawStyle.Bars;\n        custom.stacking.mode = StackingMode.Normal;\n        custom.fillOpacity = 100;\n        break;\n      default: {\n        // should never happen\n        // NOTE: casting to `never` will cause typescript\n        // to verify that the switch statement checks every possible\n        // enum-value\n        const invalidValue: never = style;\n        throw new Error(`Invalid graph-style: ${invalidValue}`);\n      }\n    }\n  });\n}\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAGA,SAASC,cAAT,EAA2CC,YAA3C,QAA+D,iBAA/D;AAMA,OAAO,SAASC,eAAT,CAAyBC,MAAzB,EAA8CC,KAA9C,EAAqF;EAC1F,OAAOL,OAAO,CAACI,MAAD,EAAUE,KAAD,IAAW;IAChC,IAAIA,KAAK,CAACC,QAAN,CAAeC,MAAf,KAA0BC,SAA9B,EAAyC;MACvCH,KAAK,CAACC,QAAN,CAAeC,MAAf,GAAwB,EAAxB;IACD;;IAED,MAAM;MAAEA;IAAF,IAAaF,KAAK,CAACC,QAAzB;;IAEA,IAAIC,MAAM,CAACE,QAAP,KAAoBD,SAAxB,EAAmC;MACjCD,MAAM,CAACE,QAAP,GAAkB;QAAEC,KAAK,EAAE;MAAT,CAAlB;IACD;;IAED,QAAQN,KAAR;MACE,KAAK,OAAL;QACEG,MAAM,CAACI,SAAP,GAAmBX,cAAc,CAACY,IAAlC;QACAL,MAAM,CAACE,QAAP,CAAgBI,IAAhB,GAAuBZ,YAAY,CAACa,IAApC;QACAP,MAAM,CAACQ,WAAP,GAAqB,CAArB;QACA;;MACF,KAAK,MAAL;QACER,MAAM,CAACI,SAAP,GAAmBX,cAAc,CAACgB,IAAlC;QACAT,MAAM,CAACE,QAAP,CAAgBI,IAAhB,GAAuBZ,YAAY,CAACa,IAApC;QACAP,MAAM,CAACQ,WAAP,GAAqB,GAArB;QACA;;MACF,KAAK,QAAL;QACER,MAAM,CAACI,SAAP,GAAmBX,cAAc,CAACiB,MAAlC;QACAV,MAAM,CAACE,QAAP,CAAgBI,IAAhB,GAAuBZ,YAAY,CAACa,IAApC;QACAP,MAAM,CAACQ,WAAP,GAAqB,CAArB;QACA;;MACF,KAAK,eAAL;QACER,MAAM,CAACI,SAAP,GAAmBX,cAAc,CAACY,IAAlC;QACAL,MAAM,CAACE,QAAP,CAAgBI,IAAhB,GAAuBZ,YAAY,CAACiB,MAApC;QACAX,MAAM,CAACQ,WAAP,GAAqB,GAArB;QACA;;MACF,KAAK,cAAL;QACER,MAAM,CAACI,SAAP,GAAmBX,cAAc,CAACgB,IAAlC;QACAT,MAAM,CAACE,QAAP,CAAgBI,IAAhB,GAAuBZ,YAAY,CAACiB,MAApC;QACAX,MAAM,CAACQ,WAAP,GAAqB,GAArB;QACA;;MACF;QAAS;UACP;UACA;UACA;UACA;UACA,MAAMI,YAAmB,GAAGf,KAA5B;UACA,MAAM,IAAIgB,KAAJ,CAAW,wBAAuBD,YAAa,EAA/C,CAAN;QACD;IAjCH;EAmCD,CA9Ca,CAAd;AA+CD"},"metadata":{},"sourceType":"module"}