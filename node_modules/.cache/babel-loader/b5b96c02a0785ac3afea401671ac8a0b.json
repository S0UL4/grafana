{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { RefreshPicker } from '@grafana/ui';\nimport { setPausedStateAction, runQueries } from './state/query';\nimport { changeRefreshInterval } from './state/time';\n/**\n * Hook that gives you all the functions needed to control the live tailing.\n */\n\nexport function useLiveTailControls(exploreId) {\n  const dispatch = useDispatch();\n  const pause = useCallback(() => {\n    dispatch(setPausedStateAction({\n      exploreId,\n      isPaused: true\n    }));\n  }, [exploreId, dispatch]);\n  const resume = useCallback(() => {\n    dispatch(setPausedStateAction({\n      exploreId,\n      isPaused: false\n    }));\n  }, [exploreId, dispatch]);\n  const stop = useCallback(() => {\n    // We need to pause here first because there is transition where we are not live but live logs are still shown\n    // to cross fade with the normal view. This will prevent reordering of the logs in the live view during the\n    // transition.\n    pause(); // TODO referencing this from perspective of refresh picker when there is designated button for it now is not\n    //  great. Needs a bit of refactoring.\n\n    dispatch(changeRefreshInterval(exploreId, RefreshPicker.offOption.value));\n    dispatch(runQueries(exploreId));\n  }, [exploreId, dispatch, pause]);\n  const start = useCallback(() => {\n    dispatch(changeRefreshInterval(exploreId, RefreshPicker.liveOption.value));\n  }, [exploreId, dispatch]);\n  return {\n    pause,\n    resume,\n    stop,\n    start\n  };\n}\n\n/**\n * If you can't use the hook you can use this as a render prop pattern.\n */\nexport function LiveTailControls(props) {\n  const controls = useLiveTailControls(props.exploreId);\n  return props.children(controls);\n}","map":{"version":3,"names":["useCallback","useDispatch","RefreshPicker","setPausedStateAction","runQueries","changeRefreshInterval","useLiveTailControls","exploreId","dispatch","pause","isPaused","resume","stop","offOption","value","start","liveOption","LiveTailControls","props","controls","children"],"sources":["/home/soula/grafana/public/app/features/explore/useLiveTailControls.ts"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { RefreshPicker } from '@grafana/ui';\n\nimport { ExploreId } from '../../types';\n\nimport { setPausedStateAction, runQueries } from './state/query';\nimport { changeRefreshInterval } from './state/time';\n\n/**\n * Hook that gives you all the functions needed to control the live tailing.\n */\nexport function useLiveTailControls(exploreId: ExploreId) {\n  const dispatch = useDispatch();\n\n  const pause = useCallback(() => {\n    dispatch(setPausedStateAction({ exploreId, isPaused: true }));\n  }, [exploreId, dispatch]);\n\n  const resume = useCallback(() => {\n    dispatch(setPausedStateAction({ exploreId, isPaused: false }));\n  }, [exploreId, dispatch]);\n\n  const stop = useCallback(() => {\n    // We need to pause here first because there is transition where we are not live but live logs are still shown\n    // to cross fade with the normal view. This will prevent reordering of the logs in the live view during the\n    // transition.\n    pause();\n\n    // TODO referencing this from perspective of refresh picker when there is designated button for it now is not\n    //  great. Needs a bit of refactoring.\n    dispatch(changeRefreshInterval(exploreId, RefreshPicker.offOption.value));\n    dispatch(runQueries(exploreId));\n  }, [exploreId, dispatch, pause]);\n\n  const start = useCallback(() => {\n    dispatch(changeRefreshInterval(exploreId, RefreshPicker.liveOption.value));\n  }, [exploreId, dispatch]);\n\n  return {\n    pause,\n    resume,\n    stop,\n    start,\n  };\n}\n\ntype Props = {\n  exploreId: ExploreId;\n  children: (controls: ReturnType<typeof useLiveTailControls>) => React.ReactElement;\n};\n\n/**\n * If you can't use the hook you can use this as a render prop pattern.\n */\nexport function LiveTailControls(props: Props) {\n  const controls = useLiveTailControls(props.exploreId);\n  return props.children(controls);\n}\n"],"mappings":"AAAA,SAAgBA,WAAhB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,aAAT,QAA8B,aAA9B;AAIA,SAASC,oBAAT,EAA+BC,UAA/B,QAAiD,eAAjD;AACA,SAASC,qBAAT,QAAsC,cAAtC;AAEA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,SAA7B,EAAmD;EACxD,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;EAEA,MAAMQ,KAAK,GAAGT,WAAW,CAAC,MAAM;IAC9BQ,QAAQ,CAACL,oBAAoB,CAAC;MAAEI,SAAF;MAAaG,QAAQ,EAAE;IAAvB,CAAD,CAArB,CAAR;EACD,CAFwB,EAEtB,CAACH,SAAD,EAAYC,QAAZ,CAFsB,CAAzB;EAIA,MAAMG,MAAM,GAAGX,WAAW,CAAC,MAAM;IAC/BQ,QAAQ,CAACL,oBAAoB,CAAC;MAAEI,SAAF;MAAaG,QAAQ,EAAE;IAAvB,CAAD,CAArB,CAAR;EACD,CAFyB,EAEvB,CAACH,SAAD,EAAYC,QAAZ,CAFuB,CAA1B;EAIA,MAAMI,IAAI,GAAGZ,WAAW,CAAC,MAAM;IAC7B;IACA;IACA;IACAS,KAAK,GAJwB,CAM7B;IACA;;IACAD,QAAQ,CAACH,qBAAqB,CAACE,SAAD,EAAYL,aAAa,CAACW,SAAd,CAAwBC,KAApC,CAAtB,CAAR;IACAN,QAAQ,CAACJ,UAAU,CAACG,SAAD,CAAX,CAAR;EACD,CAVuB,EAUrB,CAACA,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,CAVqB,CAAxB;EAYA,MAAMM,KAAK,GAAGf,WAAW,CAAC,MAAM;IAC9BQ,QAAQ,CAACH,qBAAqB,CAACE,SAAD,EAAYL,aAAa,CAACc,UAAd,CAAyBF,KAArC,CAAtB,CAAR;EACD,CAFwB,EAEtB,CAACP,SAAD,EAAYC,QAAZ,CAFsB,CAAzB;EAIA,OAAO;IACLC,KADK;IAELE,MAFK;IAGLC,IAHK;IAILG;EAJK,CAAP;AAMD;;AAOD;AACA;AACA;AACA,OAAO,SAASE,gBAAT,CAA0BC,KAA1B,EAAwC;EAC7C,MAAMC,QAAQ,GAAGb,mBAAmB,CAACY,KAAK,CAACX,SAAP,CAApC;EACA,OAAOW,KAAK,CAACE,QAAN,CAAeD,QAAf,CAAP;AACD"},"metadata":{},"sourceType":"module"}