{"ast":null,"code":"var _InlineFormLabel;\n\n// Libraries\nimport React from 'react'; // Types\n\nimport { InlineFormLabel } from '@grafana/ui';\nimport { LokiOptionFields } from './LokiOptionFields';\nimport { LokiQueryField } from './LokiQueryField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function LokiQueryEditor(props) {\n  var _query$maxLines;\n\n  const {\n    query,\n    data,\n    datasource,\n    onChange,\n    onRunQuery,\n    range\n  } = props;\n\n  const onLegendChange = e => {\n    const nextQuery = Object.assign({}, query, {\n      legendFormat: e.currentTarget.value\n    });\n    onChange(nextQuery);\n  };\n\n  const legendField = /*#__PURE__*/_jsx(\"div\", {\n    className: \"gf-form-inline\",\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"gf-form\",\n      children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/_jsx(InlineFormLabel, {\n        width: 6,\n        tooltip: \"Controls the name of the time series, using name or pattern. For example {{hostname}} will be replaced with label value for the label hostname. The legend only applies to metric queries.\",\n        children: \"Legend\"\n      })), /*#__PURE__*/_jsx(\"input\", {\n        type: \"text\",\n        className: \"gf-form-input\",\n        placeholder: \"legend format\",\n        value: query.legendFormat || '',\n        onChange: onLegendChange,\n        onBlur: onRunQuery\n      })]\n    })\n  });\n\n  return /*#__PURE__*/_jsx(LokiQueryField, {\n    datasource: datasource,\n    query: query,\n    onChange: onChange,\n    onRunQuery: onRunQuery,\n    onBlur: onRunQuery,\n    history: [],\n    data: data,\n    \"data-testid\": testIds.editor,\n    range: range,\n    ExtraFieldElement: /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(LokiOptionFields, {\n        lineLimitValue: (query === null || query === void 0 ? void 0 : (_query$maxLines = query.maxLines) === null || _query$maxLines === void 0 ? void 0 : _query$maxLines.toString()) || '',\n        resolution: (query === null || query === void 0 ? void 0 : query.resolution) || 1,\n        query: query,\n        onRunQuery: onRunQuery,\n        onChange: onChange,\n        runOnBlur: true\n      }), legendField]\n    })\n  });\n}\nexport const testIds = {\n  editor: 'loki-editor'\n};","map":{"version":3,"names":["React","InlineFormLabel","LokiOptionFields","LokiQueryField","LokiQueryEditor","props","query","data","datasource","onChange","onRunQuery","range","onLegendChange","e","nextQuery","legendFormat","currentTarget","value","legendField","testIds","editor","maxLines","toString","resolution"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/components/LokiQueryEditor.tsx"],"sourcesContent":["// Libraries\nimport React from 'react';\n\n// Types\nimport { InlineFormLabel } from '@grafana/ui';\n\nimport { LokiOptionFields } from './LokiOptionFields';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiQueryEditorProps } from './types';\n\nexport function LokiQueryEditor(props: LokiQueryEditorProps) {\n  const { query, data, datasource, onChange, onRunQuery, range } = props;\n\n  const onLegendChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const nextQuery = { ...query, legendFormat: e.currentTarget.value };\n    onChange(nextQuery);\n  };\n\n  const legendField = (\n    <div className=\"gf-form-inline\">\n      <div className=\"gf-form\">\n        <InlineFormLabel\n          width={6}\n          tooltip=\"Controls the name of the time series, using name or pattern. For example\n        {{hostname}} will be replaced with label value for the label hostname. The legend only applies to metric queries.\"\n        >\n          Legend\n        </InlineFormLabel>\n        <input\n          type=\"text\"\n          className=\"gf-form-input\"\n          placeholder=\"legend format\"\n          value={query.legendFormat || ''}\n          onChange={onLegendChange}\n          onBlur={onRunQuery}\n        />\n      </div>\n    </div>\n  );\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      onBlur={onRunQuery}\n      history={[]}\n      data={data}\n      data-testid={testIds.editor}\n      range={range}\n      ExtraFieldElement={\n        <>\n          <LokiOptionFields\n            lineLimitValue={query?.maxLines?.toString() || ''}\n            resolution={query?.resolution || 1}\n            query={query}\n            onRunQuery={onRunQuery}\n            onChange={onChange}\n            runOnBlur={true}\n          />\n          {legendField}\n        </>\n      }\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'loki-editor',\n};\n"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,eAAT,QAAgC,aAAhC;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;;;;AAGA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAsD;EAAA;;EAC3D,MAAM;IAAEC,KAAF;IAASC,IAAT;IAAeC,UAAf;IAA2BC,QAA3B;IAAqCC,UAArC;IAAiDC;EAAjD,IAA2DN,KAAjE;;EAEA,MAAMO,cAAc,GAAIC,CAAD,IAA+C;IACpE,MAAMC,SAAS,qBAAQR,KAAR;MAAeS,YAAY,EAAEF,CAAC,CAACG,aAAF,CAAgBC;IAA7C,EAAf;IACAR,QAAQ,CAACK,SAAD,CAAR;EACD,CAHD;;EAKA,MAAMI,WAAW,gBACf;IAAK,SAAS,EAAC,gBAAf;IAAA,uBACE;MAAK,SAAS,EAAC,SAAf;MAAA,gEACE,KAAC,eAAD;QACE,KAAK,EAAE,CADT;QAEE,OAAO,EAAC,4LAFV;QAAA;MAAA,EADF,gBAQE;QACE,IAAI,EAAC,MADP;QAEE,SAAS,EAAC,eAFZ;QAGE,WAAW,EAAC,eAHd;QAIE,KAAK,EAAEZ,KAAK,CAACS,YAAN,IAAsB,EAJ/B;QAKE,QAAQ,EAAEH,cALZ;QAME,MAAM,EAAEF;MANV,EARF;IAAA;EADF,EADF;;EAsBA,oBACE,KAAC,cAAD;IACE,UAAU,EAAEF,UADd;IAEE,KAAK,EAAEF,KAFT;IAGE,QAAQ,EAAEG,QAHZ;IAIE,UAAU,EAAEC,UAJd;IAKE,MAAM,EAAEA,UALV;IAME,OAAO,EAAE,EANX;IAOE,IAAI,EAAEH,IAPR;IAQE,eAAaY,OAAO,CAACC,MARvB;IASE,KAAK,EAAET,KATT;IAUE,iBAAiB,eACf;MAAA,wBACE,KAAC,gBAAD;QACE,cAAc,EAAE,CAAAL,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEe,QAAP,oEAAiBC,QAAjB,OAA+B,EADjD;QAEE,UAAU,EAAE,CAAAhB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEiB,UAAP,KAAqB,CAFnC;QAGE,KAAK,EAAEjB,KAHT;QAIE,UAAU,EAAEI,UAJd;QAKE,QAAQ,EAAED,QALZ;QAME,SAAS,EAAE;MANb,EADF,EASGS,WATH;IAAA;EAXJ,EADF;AA0BD;AAED,OAAO,MAAMC,OAAO,GAAG;EACrBC,MAAM,EAAE;AADa,CAAhB"},"metadata":{},"sourceType":"module"}