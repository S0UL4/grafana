{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { init as initSentry, setUser as sentrySetUser } from '@sentry/browser';\nimport { FetchTransport } from '@sentry/browser/dist/transports';\nimport { EchoEventType } from '@grafana/runtime';\nimport { CustomEndpointTransport } from './transports/CustomEndpointTransport';\nimport { EchoSrvTransport } from './transports/EchoSrvTransport';\nexport class SentryEchoBackend {\n  constructor(options) {\n    _defineProperty(this, \"supportedEvents\", [EchoEventType.Sentry]);\n\n    _defineProperty(this, \"transports\", void 0);\n\n    _defineProperty(this, \"addEvent\", e => {\n      this.transports.forEach(t => t.sendEvent(e.payload));\n    });\n\n    _defineProperty(this, \"flush\", () => {});\n\n    this.options = options;\n    // set up transports to post events to grafana backend and/or Sentry\n    this.transports = [];\n\n    if (options.dsn) {\n      this.transports.push(new FetchTransport({\n        dsn: options.dsn\n      }, fetch));\n    }\n\n    if (options.customEndpoint) {\n      this.transports.push(new CustomEndpointTransport({\n        endpoint: options.customEndpoint\n      }));\n    } // initialize Sentry so it can set up it's hooks and start collecting errors\n\n\n    const sentryOptions = {\n      release: options.buildInfo.version,\n      environment: options.buildInfo.env,\n      // seems Sentry won't attempt to send events to transport unless a valid DSN is defined :shrug:\n      dsn: options.dsn || 'https://examplePublicKey@o0.ingest.sentry.io/0',\n      sampleRate: options.sampleRate,\n      transport: EchoSrvTransport,\n      // will dump errors to EchoSrv\n      ignoreErrors: ['ResizeObserver loop limit exceeded', 'ResizeObserver loop completed', 'Non-Error exception captured with keys']\n    };\n\n    if (options.user) {\n      sentrySetUser({\n        email: options.user.email,\n        id: String(options.user.id)\n      });\n    }\n\n    initSentry(sentryOptions);\n  }\n\n}","map":{"version":3,"names":["init","initSentry","setUser","sentrySetUser","FetchTransport","EchoEventType","CustomEndpointTransport","EchoSrvTransport","SentryEchoBackend","constructor","options","Sentry","e","transports","forEach","t","sendEvent","payload","dsn","push","fetch","customEndpoint","endpoint","sentryOptions","release","buildInfo","version","environment","env","sampleRate","transport","ignoreErrors","user","email","id","String"],"sources":["/home/soula/grafana/public/app/core/services/echo/backends/sentry/SentryBackend.ts"],"sourcesContent":["import { BrowserOptions, init as initSentry, setUser as sentrySetUser } from '@sentry/browser';\nimport { FetchTransport } from '@sentry/browser/dist/transports';\n\nimport { BuildInfo } from '@grafana/data';\nimport { SentryConfig } from '@grafana/data/src/types/config';\nimport { EchoBackend, EchoEventType } from '@grafana/runtime';\n\nimport { CustomEndpointTransport } from './transports/CustomEndpointTransport';\nimport { EchoSrvTransport } from './transports/EchoSrvTransport';\nimport { SentryEchoEvent, User, BaseTransport } from './types';\n\nexport interface SentryEchoBackendOptions extends SentryConfig {\n  user?: User;\n  buildInfo: BuildInfo;\n}\n\nexport class SentryEchoBackend implements EchoBackend<SentryEchoEvent, SentryEchoBackendOptions> {\n  supportedEvents = [EchoEventType.Sentry];\n\n  transports: BaseTransport[];\n\n  constructor(public options: SentryEchoBackendOptions) {\n    // set up transports to post events to grafana backend and/or Sentry\n    this.transports = [];\n    if (options.dsn) {\n      this.transports.push(new FetchTransport({ dsn: options.dsn }, fetch));\n    }\n    if (options.customEndpoint) {\n      this.transports.push(new CustomEndpointTransport({ endpoint: options.customEndpoint }));\n    }\n\n    // initialize Sentry so it can set up it's hooks and start collecting errors\n    const sentryOptions: BrowserOptions = {\n      release: options.buildInfo.version,\n      environment: options.buildInfo.env,\n      // seems Sentry won't attempt to send events to transport unless a valid DSN is defined :shrug:\n      dsn: options.dsn || 'https://examplePublicKey@o0.ingest.sentry.io/0',\n      sampleRate: options.sampleRate,\n      transport: EchoSrvTransport, // will dump errors to EchoSrv\n      ignoreErrors: [\n        'ResizeObserver loop limit exceeded',\n        'ResizeObserver loop completed',\n        'Non-Error exception captured with keys',\n      ],\n    };\n\n    if (options.user) {\n      sentrySetUser({\n        email: options.user.email,\n        id: String(options.user.id),\n      });\n    }\n\n    initSentry(sentryOptions);\n  }\n\n  addEvent = (e: SentryEchoEvent) => {\n    this.transports.forEach((t) => t.sendEvent(e.payload));\n  };\n\n  // backend will log events to stdout, and at least in case of hosted grafana they will be\n  // ingested into Loki. Due to Loki limitations logs cannot be backdated,\n  // so not using buffering for this backend to make sure that events are logged as close\n  // to their context as possible\n  flush = () => {};\n}\n"],"mappings":";;AAAA,SAAyBA,IAAI,IAAIC,UAAjC,EAA6CC,OAAO,IAAIC,aAAxD,QAA6E,iBAA7E;AACA,SAASC,cAAT,QAA+B,iCAA/B;AAIA,SAAsBC,aAAtB,QAA2C,kBAA3C;AAEA,SAASC,uBAAT,QAAwC,sCAAxC;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AAQA,OAAO,MAAMC,iBAAN,CAA0F;EAK/FC,WAAW,CAAQC,OAAR,EAA2C;IAAA,yCAJpC,CAACL,aAAa,CAACM,MAAf,CAIoC;;IAAA;;IAAA,kCAmC1CC,CAAD,IAAwB;MACjC,KAAKC,UAAL,CAAgBC,OAAhB,CAAyBC,CAAD,IAAOA,CAAC,CAACC,SAAF,CAAYJ,CAAC,CAACK,OAAd,CAA/B;IACD,CArCqD;;IAAA,+BA2C9C,MAAM,CAAE,CA3CsC;;IAAA,KAAnCP,OAAmC,GAAnCA,OAAmC;IACpD;IACA,KAAKG,UAAL,GAAkB,EAAlB;;IACA,IAAIH,OAAO,CAACQ,GAAZ,EAAiB;MACf,KAAKL,UAAL,CAAgBM,IAAhB,CAAqB,IAAIf,cAAJ,CAAmB;QAAEc,GAAG,EAAER,OAAO,CAACQ;MAAf,CAAnB,EAAyCE,KAAzC,CAArB;IACD;;IACD,IAAIV,OAAO,CAACW,cAAZ,EAA4B;MAC1B,KAAKR,UAAL,CAAgBM,IAAhB,CAAqB,IAAIb,uBAAJ,CAA4B;QAAEgB,QAAQ,EAAEZ,OAAO,CAACW;MAApB,CAA5B,CAArB;IACD,CARmD,CAUpD;;;IACA,MAAME,aAA6B,GAAG;MACpCC,OAAO,EAAEd,OAAO,CAACe,SAAR,CAAkBC,OADS;MAEpCC,WAAW,EAAEjB,OAAO,CAACe,SAAR,CAAkBG,GAFK;MAGpC;MACAV,GAAG,EAAER,OAAO,CAACQ,GAAR,IAAe,gDAJgB;MAKpCW,UAAU,EAAEnB,OAAO,CAACmB,UALgB;MAMpCC,SAAS,EAAEvB,gBANyB;MAMP;MAC7BwB,YAAY,EAAE,CACZ,oCADY,EAEZ,+BAFY,EAGZ,wCAHY;IAPsB,CAAtC;;IAcA,IAAIrB,OAAO,CAACsB,IAAZ,EAAkB;MAChB7B,aAAa,CAAC;QACZ8B,KAAK,EAAEvB,OAAO,CAACsB,IAAR,CAAaC,KADR;QAEZC,EAAE,EAAEC,MAAM,CAACzB,OAAO,CAACsB,IAAR,CAAaE,EAAd;MAFE,CAAD,CAAb;IAID;;IAEDjC,UAAU,CAACsB,aAAD,CAAV;EACD;;AAtC8F"},"metadata":{},"sourceType":"module"}