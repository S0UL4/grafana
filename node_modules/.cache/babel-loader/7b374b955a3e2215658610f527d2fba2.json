{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Libraries\nimport { css, cx } from '@emotion/css';\nimport DangerouslySetHtmlContent from 'dangerously-set-html-content';\nimport { debounce } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { renderTextPanelMarkdown, textUtil } from '@grafana/data'; // Utils\n\nimport { CustomScrollbar, stylesFactory } from '@grafana/ui';\nimport config from 'app/core/config'; // Types\n\nimport { TextMode } from './models.gen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class TextPanel extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"updateHTML\", debounce(() => {\n      const html = this.processContent(this.props.options);\n\n      if (html !== this.state.html) {\n        this.setState({\n          html\n        });\n      }\n    }, 150));\n\n    this.state = {\n      html: this.processContent(props.options)\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // Since any change could be referenced in a template variable,\n    // This needs to process every time (with debounce)\n    this.updateHTML();\n  }\n\n  prepareHTML(html) {\n    return this.interpolateAndSanitizeString(html);\n  }\n\n  prepareMarkdown(content) {\n    // Sanitize is disabled here as we handle that after variable interpolation\n    return this.interpolateAndSanitizeString(renderTextPanelMarkdown(content, {\n      noSanitize: config.disableSanitizeHtml\n    }));\n  }\n\n  interpolateAndSanitizeString(content) {\n    const {\n      replaceVariables\n    } = this.props;\n    content = replaceVariables(content, {}, 'html');\n    return config.disableSanitizeHtml ? content : textUtil.sanitizeTextPanelContent(content);\n  }\n\n  processContent(options) {\n    const {\n      mode,\n      content\n    } = options;\n\n    if (!content) {\n      return '';\n    }\n\n    if (mode === TextMode.HTML) {\n      return this.prepareHTML(content);\n    }\n\n    return this.prepareMarkdown(content);\n  }\n\n  render() {\n    const {\n      html\n    } = this.state;\n    const styles = getStyles();\n    return /*#__PURE__*/_jsx(CustomScrollbar, {\n      autoHeightMin: \"100%\",\n      children: /*#__PURE__*/_jsx(DangerouslySetHtmlContent, {\n        html: html,\n        className: cx('markdown-html', styles.content)\n      })\n    });\n  }\n\n}\nconst getStyles = stylesFactory(() => {\n  return {\n    content: css`\n      height: 100%;\n    `\n  };\n});","map":{"version":3,"names":["css","cx","DangerouslySetHtmlContent","debounce","React","PureComponent","renderTextPanelMarkdown","textUtil","CustomScrollbar","stylesFactory","config","TextMode","TextPanel","constructor","props","html","processContent","options","state","setState","componentDidUpdate","prevProps","updateHTML","prepareHTML","interpolateAndSanitizeString","prepareMarkdown","content","noSanitize","disableSanitizeHtml","replaceVariables","sanitizeTextPanelContent","mode","HTML","render","styles","getStyles"],"sources":["/home/soula/grafana/public/app/plugins/panel/text/TextPanel.tsx"],"sourcesContent":["// Libraries\nimport { css, cx } from '@emotion/css';\nimport DangerouslySetHtmlContent from 'dangerously-set-html-content';\nimport { debounce } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { PanelProps, renderTextPanelMarkdown, textUtil } from '@grafana/data';\n// Utils\nimport { CustomScrollbar, stylesFactory } from '@grafana/ui';\nimport config from 'app/core/config';\n\n// Types\nimport { PanelOptions, TextMode } from './models.gen';\n\ninterface Props extends PanelProps<PanelOptions> {}\n\ninterface State {\n  html: string;\n}\n\nexport class TextPanel extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      html: this.processContent(props.options),\n    };\n  }\n\n  updateHTML = debounce(() => {\n    const html = this.processContent(this.props.options);\n    if (html !== this.state.html) {\n      this.setState({ html });\n    }\n  }, 150);\n\n  componentDidUpdate(prevProps: Props) {\n    // Since any change could be referenced in a template variable,\n    // This needs to process every time (with debounce)\n    this.updateHTML();\n  }\n\n  prepareHTML(html: string): string {\n    return this.interpolateAndSanitizeString(html);\n  }\n\n  prepareMarkdown(content: string): string {\n    // Sanitize is disabled here as we handle that after variable interpolation\n    return this.interpolateAndSanitizeString(\n      renderTextPanelMarkdown(content, {\n        noSanitize: config.disableSanitizeHtml,\n      })\n    );\n  }\n\n  interpolateAndSanitizeString(content: string): string {\n    const { replaceVariables } = this.props;\n\n    content = replaceVariables(content, {}, 'html');\n\n    return config.disableSanitizeHtml ? content : textUtil.sanitizeTextPanelContent(content);\n  }\n\n  processContent(options: PanelOptions): string {\n    const { mode, content } = options;\n\n    if (!content) {\n      return '';\n    }\n\n    if (mode === TextMode.HTML) {\n      return this.prepareHTML(content);\n    }\n\n    return this.prepareMarkdown(content);\n  }\n\n  render() {\n    const { html } = this.state;\n    const styles = getStyles();\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\">\n        <DangerouslySetHtmlContent html={html} className={cx('markdown-html', styles.content)} />\n      </CustomScrollbar>\n    );\n  }\n}\n\nconst getStyles = stylesFactory(() => {\n  return {\n    content: css`\n      height: 100%;\n    `,\n  };\n});\n"],"mappings":";;AAAA;AACA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,yBAAP,MAAsC,8BAAtC;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAEA,SAAqBC,uBAArB,EAA8CC,QAA9C,QAA8D,eAA9D,C,CACA;;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,aAA/C;AACA,OAAOC,MAAP,MAAmB,iBAAnB,C,CAEA;;AACA,SAAuBC,QAAvB,QAAuC,cAAvC;;AAQA,OAAO,MAAMC,SAAN,SAAwBP,aAAxB,CAAoD;EACzDQ,WAAW,CAACC,KAAD,EAAe;IACxB,MAAMA,KAAN;;IADwB,oCAQbX,QAAQ,CAAC,MAAM;MAC1B,MAAMY,IAAI,GAAG,KAAKC,cAAL,CAAoB,KAAKF,KAAL,CAAWG,OAA/B,CAAb;;MACA,IAAIF,IAAI,KAAK,KAAKG,KAAL,CAAWH,IAAxB,EAA8B;QAC5B,KAAKI,QAAL,CAAc;UAAEJ;QAAF,CAAd;MACD;IACF,CALoB,EAKlB,GALkB,CARK;;IAGxB,KAAKG,KAAL,GAAa;MACXH,IAAI,EAAE,KAAKC,cAAL,CAAoBF,KAAK,CAACG,OAA1B;IADK,CAAb;EAGD;;EASDG,kBAAkB,CAACC,SAAD,EAAmB;IACnC;IACA;IACA,KAAKC,UAAL;EACD;;EAEDC,WAAW,CAACR,IAAD,EAAuB;IAChC,OAAO,KAAKS,4BAAL,CAAkCT,IAAlC,CAAP;EACD;;EAEDU,eAAe,CAACC,OAAD,EAA0B;IACvC;IACA,OAAO,KAAKF,4BAAL,CACLlB,uBAAuB,CAACoB,OAAD,EAAU;MAC/BC,UAAU,EAAEjB,MAAM,CAACkB;IADY,CAAV,CADlB,CAAP;EAKD;;EAEDJ,4BAA4B,CAACE,OAAD,EAA0B;IACpD,MAAM;MAAEG;IAAF,IAAuB,KAAKf,KAAlC;IAEAY,OAAO,GAAGG,gBAAgB,CAACH,OAAD,EAAU,EAAV,EAAc,MAAd,CAA1B;IAEA,OAAOhB,MAAM,CAACkB,mBAAP,GAA6BF,OAA7B,GAAuCnB,QAAQ,CAACuB,wBAAT,CAAkCJ,OAAlC,CAA9C;EACD;;EAEDV,cAAc,CAACC,OAAD,EAAgC;IAC5C,MAAM;MAAEc,IAAF;MAAQL;IAAR,IAAoBT,OAA1B;;IAEA,IAAI,CAACS,OAAL,EAAc;MACZ,OAAO,EAAP;IACD;;IAED,IAAIK,IAAI,KAAKpB,QAAQ,CAACqB,IAAtB,EAA4B;MAC1B,OAAO,KAAKT,WAAL,CAAiBG,OAAjB,CAAP;IACD;;IAED,OAAO,KAAKD,eAAL,CAAqBC,OAArB,CAAP;EACD;;EAEDO,MAAM,GAAG;IACP,MAAM;MAAElB;IAAF,IAAW,KAAKG,KAAtB;IACA,MAAMgB,MAAM,GAAGC,SAAS,EAAxB;IACA,oBACE,KAAC,eAAD;MAAiB,aAAa,EAAC,MAA/B;MAAA,uBACE,KAAC,yBAAD;QAA2B,IAAI,EAAEpB,IAAjC;QAAuC,SAAS,EAAEd,EAAE,CAAC,eAAD,EAAkBiC,MAAM,CAACR,OAAzB;MAApD;IADF,EADF;EAKD;;AAjEwD;AAoE3D,MAAMS,SAAS,GAAG1B,aAAa,CAAC,MAAM;EACpC,OAAO;IACLiB,OAAO,EAAE1B,GAAI;AACjB;AACA;EAHS,CAAP;AAKD,CAN8B,CAA/B"},"metadata":{},"sourceType":"module"}