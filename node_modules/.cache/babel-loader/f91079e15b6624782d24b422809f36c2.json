{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { initPanelState } from '../../panel/state/actions';\nimport { setPanelInstanceState } from '../../panel/state/reducers';\nimport { LazyLoader } from './LazyLoader';\nimport { PanelChrome } from './PanelChrome';\nimport { PanelChromeAngular } from './PanelChromeAngular';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst mapStateToProps = (state, props) => {\n  const panelState = state.panels[props.stateKey];\n\n  if (!panelState) {\n    return {\n      plugin: null\n    };\n  }\n\n  return {\n    plugin: panelState.plugin,\n    instanceState: panelState.instanceState\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelState,\n  setPanelInstanceState\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport class DashboardPanelUnconnected extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onInstanceStateChange\", value => {\n      this.props.setPanelInstanceState({\n        key: this.props.stateKey,\n        value\n      });\n    });\n\n    _defineProperty(this, \"onVisibilityChange\", v => {\n      this.props.panel.isInView = v;\n    });\n\n    _defineProperty(this, \"onPanelLoad\", () => {\n      if (!this.props.plugin) {\n        this.props.initPanelState(this.props.panel);\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.props.panel.isInView = !this.props.lazy;\n\n    if (!this.props.lazy) {\n      this.onPanelLoad();\n    }\n  }\n\n  render() {\n    const {\n      dashboard,\n      panel,\n      isViewing,\n      isEditing,\n      width,\n      height,\n      lazy,\n      plugin\n    } = this.props;\n\n    const renderPanelChrome = isInView => plugin && (plugin.angularPanelCtrl ? /*#__PURE__*/_jsx(PanelChromeAngular, {\n      plugin: plugin,\n      panel: panel,\n      dashboard: dashboard,\n      isViewing: isViewing,\n      isEditing: isEditing,\n      isInView: isInView,\n      width: width,\n      height: height\n    }) : /*#__PURE__*/_jsx(PanelChrome, {\n      plugin: plugin,\n      panel: panel,\n      dashboard: dashboard,\n      isViewing: isViewing,\n      isEditing: isEditing,\n      isInView: isInView,\n      width: width,\n      height: height,\n      onInstanceStateChange: this.onInstanceStateChange\n    }));\n\n    return lazy ? /*#__PURE__*/_jsx(LazyLoader, {\n      width: width,\n      height: height,\n      onChange: this.onVisibilityChange,\n      onLoad: this.onPanelLoad,\n      children: ({\n        isInView\n      }) => renderPanelChrome(isInView)\n    }) : renderPanelChrome(true);\n  }\n\n}\n\n_defineProperty(DashboardPanelUnconnected, \"defaultProps\", {\n  lazy: true\n});\n\nexport const DashboardPanel = connector(DashboardPanelUnconnected);","map":{"version":3,"names":["React","PureComponent","connect","initPanelState","setPanelInstanceState","LazyLoader","PanelChrome","PanelChromeAngular","mapStateToProps","state","props","panelState","panels","stateKey","plugin","instanceState","mapDispatchToProps","connector","DashboardPanelUnconnected","value","key","v","panel","isInView","componentDidMount","lazy","onPanelLoad","render","dashboard","isViewing","isEditing","width","height","renderPanelChrome","angularPanelCtrl","onInstanceStateChange","onVisibilityChange","DashboardPanel"],"sources":["/home/soula/grafana/public/app/features/dashboard/dashgrid/DashboardPanel.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { StoreState } from 'app/types';\n\nimport { initPanelState } from '../../panel/state/actions';\nimport { setPanelInstanceState } from '../../panel/state/reducers';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { LazyLoader } from './LazyLoader';\nimport { PanelChrome } from './PanelChrome';\nimport { PanelChromeAngular } from './PanelChromeAngular';\n\nexport interface OwnProps {\n  panel: PanelModel;\n  stateKey: string;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isViewing: boolean;\n  width: number;\n  height: number;\n  lazy?: boolean;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const panelState = state.panels[props.stateKey];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n    instanceState: panelState.instanceState,\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelState,\n  setPanelInstanceState,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DashboardPanelUnconnected extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    lazy: true,\n  };\n\n  componentDidMount() {\n    this.props.panel.isInView = !this.props.lazy;\n    if (!this.props.lazy) {\n      this.onPanelLoad();\n    }\n  }\n\n  onInstanceStateChange = (value: any) => {\n    this.props.setPanelInstanceState({ key: this.props.stateKey, value });\n  };\n\n  onVisibilityChange = (v: boolean) => {\n    this.props.panel.isInView = v;\n  };\n\n  onPanelLoad = () => {\n    if (!this.props.plugin) {\n      this.props.initPanelState(this.props.panel);\n    }\n  };\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, lazy, plugin } = this.props;\n\n    const renderPanelChrome = (isInView: boolean) =>\n      plugin &&\n      (plugin.angularPanelCtrl ? (\n        <PanelChromeAngular\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          width={width}\n          height={height}\n        />\n      ) : (\n        <PanelChrome\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          width={width}\n          height={height}\n          onInstanceStateChange={this.onInstanceStateChange}\n        />\n      ));\n\n    return lazy ? (\n      <LazyLoader width={width} height={height} onChange={this.onVisibilityChange} onLoad={this.onPanelLoad}>\n        {({ isInView }) => renderPanelChrome(isInView)}\n      </LazyLoader>\n    ) : (\n      renderPanelChrome(true)\n    );\n  }\n}\n\nexport const DashboardPanel = connector(DashboardPanelUnconnected);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}