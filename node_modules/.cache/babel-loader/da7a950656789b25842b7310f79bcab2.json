{"ast":null,"code":"/**\n * Adapt findMatchesInText for react-highlight-words findChunks handler.\n * See https://github.com/bvaughn/react-highlight-words#props\n */\nexport function findHighlightChunksInText({\n  searchWords,\n  textToHighlight\n}) {\n  const chunks = [];\n\n  for (const term of searchWords) {\n    chunks.push(...findMatchesInText(textToHighlight, term));\n  }\n\n  return chunks;\n}\n\nconst cleanNeedle = needle => {\n  return needle.replace(/[[{(][\\w,.-?:*+]+$/, '');\n};\n/**\n * Returns a list of substring regexp matches.\n */\n\n\nexport function findMatchesInText(haystack, needle) {\n  // Empty search can send re.exec() into infinite loop, exit early\n  if (!haystack || !needle) {\n    return [];\n  }\n\n  const matches = [];\n  const {\n    cleaned,\n    flags\n  } = parseFlags(cleanNeedle(needle));\n  let regexp;\n\n  try {\n    regexp = new RegExp(`(?:${cleaned})`, flags);\n  } catch (error) {\n    return matches;\n  }\n\n  haystack.replace(regexp, (substring, ...rest) => {\n    if (substring) {\n      const offset = rest[rest.length - 2];\n      matches.push({\n        text: substring,\n        start: offset,\n        length: substring.length,\n        end: offset + substring.length\n      });\n    }\n\n    return '';\n  });\n  return matches;\n}\nconst CLEAR_FLAG = '-';\nconst FLAGS_REGEXP = /\\(\\?([ims-]+)\\)/g;\n/**\n * Converts any mode modifiers in the text to the Javascript equivalent flag\n */\n\nexport function parseFlags(text) {\n  const flags = new Set(['g']);\n  const cleaned = text.replace(FLAGS_REGEXP, (str, group) => {\n    const clearAll = group.startsWith(CLEAR_FLAG);\n\n    for (let i = 0; i < group.length; ++i) {\n      const flag = group.charAt(i);\n\n      if (clearAll || group.charAt(i - 1) === CLEAR_FLAG) {\n        flags.delete(flag);\n      } else if (flag !== CLEAR_FLAG) {\n        flags.add(flag);\n      }\n    }\n\n    return ''; // Remove flag from text\n  });\n  return {\n    cleaned: cleaned,\n    flags: Array.from(flags).join('')\n  };\n}","map":{"version":3,"names":["findHighlightChunksInText","searchWords","textToHighlight","chunks","term","push","findMatchesInText","cleanNeedle","needle","replace","haystack","matches","cleaned","flags","parseFlags","regexp","RegExp","error","substring","rest","offset","length","text","start","end","CLEAR_FLAG","FLAGS_REGEXP","Set","str","group","clearAll","startsWith","i","flag","charAt","delete","add","Array","from","join"],"sources":["/home/soula/grafana/packages/grafana-data/src/text/text.ts"],"sourcesContent":["export interface TextMatch {\n  text: string;\n  start: number;\n  length: number;\n  end: number;\n}\n\n/**\n * Adapt findMatchesInText for react-highlight-words findChunks handler.\n * See https://github.com/bvaughn/react-highlight-words#props\n */\nexport function findHighlightChunksInText({\n  searchWords,\n  textToHighlight,\n}: {\n  searchWords: Array<string | RegExp>;\n  textToHighlight: string;\n}) {\n  const chunks: TextMatch[] = [];\n  for (const term of searchWords) {\n    chunks.push(...findMatchesInText(textToHighlight, term as string));\n  }\n  return chunks;\n}\n\nconst cleanNeedle = (needle: string): string => {\n  return needle.replace(/[[{(][\\w,.-?:*+]+$/, '');\n};\n\n/**\n * Returns a list of substring regexp matches.\n */\nexport function findMatchesInText(haystack: string, needle: string): TextMatch[] {\n  // Empty search can send re.exec() into infinite loop, exit early\n  if (!haystack || !needle) {\n    return [];\n  }\n  const matches: TextMatch[] = [];\n  const { cleaned, flags } = parseFlags(cleanNeedle(needle));\n  let regexp: RegExp;\n  try {\n    regexp = new RegExp(`(?:${cleaned})`, flags);\n  } catch (error) {\n    return matches;\n  }\n  haystack.replace(regexp, (substring, ...rest) => {\n    if (substring) {\n      const offset = rest[rest.length - 2];\n      matches.push({\n        text: substring,\n        start: offset,\n        length: substring.length,\n        end: offset + substring.length,\n      });\n    }\n    return '';\n  });\n  return matches;\n}\n\nconst CLEAR_FLAG = '-';\nconst FLAGS_REGEXP = /\\(\\?([ims-]+)\\)/g;\n\n/**\n * Converts any mode modifiers in the text to the Javascript equivalent flag\n */\nexport function parseFlags(text: string): { cleaned: string; flags: string } {\n  const flags: Set<string> = new Set(['g']);\n\n  const cleaned = text.replace(FLAGS_REGEXP, (str, group) => {\n    const clearAll = group.startsWith(CLEAR_FLAG);\n\n    for (let i = 0; i < group.length; ++i) {\n      const flag = group.charAt(i);\n      if (clearAll || group.charAt(i - 1) === CLEAR_FLAG) {\n        flags.delete(flag);\n      } else if (flag !== CLEAR_FLAG) {\n        flags.add(flag);\n      }\n    }\n    return ''; // Remove flag from text\n  });\n\n  return {\n    cleaned: cleaned,\n    flags: Array.from(flags).join(''),\n  };\n}\n"],"mappings":"AAOA;AACA;AACA;AACA;AACA,OAAO,SAASA,yBAAT,CAAmC;EACxCC,WADwC;EAExCC;AAFwC,CAAnC,EAMJ;EACD,MAAMC,MAAmB,GAAG,EAA5B;;EACA,KAAK,MAAMC,IAAX,IAAmBH,WAAnB,EAAgC;IAC9BE,MAAM,CAACE,IAAP,CAAY,GAAGC,iBAAiB,CAACJ,eAAD,EAAkBE,IAAlB,CAAhC;EACD;;EACD,OAAOD,MAAP;AACD;;AAED,MAAMI,WAAW,GAAIC,MAAD,IAA4B;EAC9C,OAAOA,MAAM,CAACC,OAAP,CAAe,oBAAf,EAAqC,EAArC,CAAP;AACD,CAFD;AAIA;AACA;AACA;;;AACA,OAAO,SAASH,iBAAT,CAA2BI,QAA3B,EAA6CF,MAA7C,EAA0E;EAC/E;EACA,IAAI,CAACE,QAAD,IAAa,CAACF,MAAlB,EAA0B;IACxB,OAAO,EAAP;EACD;;EACD,MAAMG,OAAoB,GAAG,EAA7B;EACA,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAqBC,UAAU,CAACP,WAAW,CAACC,MAAD,CAAZ,CAArC;EACA,IAAIO,MAAJ;;EACA,IAAI;IACFA,MAAM,GAAG,IAAIC,MAAJ,CAAY,MAAKJ,OAAQ,GAAzB,EAA6BC,KAA7B,CAAT;EACD,CAFD,CAEE,OAAOI,KAAP,EAAc;IACd,OAAON,OAAP;EACD;;EACDD,QAAQ,CAACD,OAAT,CAAiBM,MAAjB,EAAyB,CAACG,SAAD,EAAY,GAAGC,IAAf,KAAwB;IAC/C,IAAID,SAAJ,EAAe;MACb,MAAME,MAAM,GAAGD,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CAAnB;MACAV,OAAO,CAACN,IAAR,CAAa;QACXiB,IAAI,EAAEJ,SADK;QAEXK,KAAK,EAAEH,MAFI;QAGXC,MAAM,EAAEH,SAAS,CAACG,MAHP;QAIXG,GAAG,EAAEJ,MAAM,GAAGF,SAAS,CAACG;MAJb,CAAb;IAMD;;IACD,OAAO,EAAP;EACD,CAXD;EAYA,OAAOV,OAAP;AACD;AAED,MAAMc,UAAU,GAAG,GAAnB;AACA,MAAMC,YAAY,GAAG,kBAArB;AAEA;AACA;AACA;;AACA,OAAO,SAASZ,UAAT,CAAoBQ,IAApB,EAAsE;EAC3E,MAAMT,KAAkB,GAAG,IAAIc,GAAJ,CAAQ,CAAC,GAAD,CAAR,CAA3B;EAEA,MAAMf,OAAO,GAAGU,IAAI,CAACb,OAAL,CAAaiB,YAAb,EAA2B,CAACE,GAAD,EAAMC,KAAN,KAAgB;IACzD,MAAMC,QAAQ,GAAGD,KAAK,CAACE,UAAN,CAAiBN,UAAjB,CAAjB;;IAEA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACR,MAA1B,EAAkC,EAAEW,CAApC,EAAuC;MACrC,MAAMC,IAAI,GAAGJ,KAAK,CAACK,MAAN,CAAaF,CAAb,CAAb;;MACA,IAAIF,QAAQ,IAAID,KAAK,CAACK,MAAN,CAAaF,CAAC,GAAG,CAAjB,MAAwBP,UAAxC,EAAoD;QAClDZ,KAAK,CAACsB,MAAN,CAAaF,IAAb;MACD,CAFD,MAEO,IAAIA,IAAI,KAAKR,UAAb,EAAyB;QAC9BZ,KAAK,CAACuB,GAAN,CAAUH,IAAV;MACD;IACF;;IACD,OAAO,EAAP,CAXyD,CAW9C;EACZ,CAZe,CAAhB;EAcA,OAAO;IACLrB,OAAO,EAAEA,OADJ;IAELC,KAAK,EAAEwB,KAAK,CAACC,IAAN,CAAWzB,KAAX,EAAkB0B,IAAlB,CAAuB,EAAvB;EAFF,CAAP;AAID"},"metadata":{},"sourceType":"module"}