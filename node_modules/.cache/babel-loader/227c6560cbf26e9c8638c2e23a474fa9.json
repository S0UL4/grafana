{"ast":null,"code":"var _h;\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { FormField } from '../FormField/FormField';\nimport { Icon } from '../Icon/Icon';\nimport { Tooltip } from '../Tooltip/Tooltip';\nimport { CertificationKey } from './CertificationKey';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const TLSAuthSettings = ({\n  dataSourceConfig,\n  onChange\n}) => {\n  const hasTLSCACert = dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.tlsCACert;\n  const hasTLSClientCert = dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.tlsClientCert;\n  const hasTLSClientKey = dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.tlsClientKey;\n  const hasServerName = dataSourceConfig.jsonData && dataSourceConfig.jsonData.serverName;\n\n  const onResetClickFactory = field => event => {\n    event.preventDefault();\n    const newSecureJsonFields = Object.assign({}, dataSourceConfig.secureJsonFields);\n    newSecureJsonFields[field] = false;\n    onChange(Object.assign({}, dataSourceConfig, {\n      secureJsonFields: newSecureJsonFields\n    }));\n  };\n\n  const onCertificateChangeFactory = field => event => {\n    const newSecureJsonData = Object.assign({}, dataSourceConfig.secureJsonData);\n    newSecureJsonData[field] = event.currentTarget.value;\n    onChange(Object.assign({}, dataSourceConfig, {\n      secureJsonData: newSecureJsonData\n    }));\n  };\n\n  const onServerNameLabelChange = event => {\n    const newJsonData = Object.assign({}, dataSourceConfig.jsonData, {\n      serverName: event.currentTarget.value\n    });\n    onChange(Object.assign({}, dataSourceConfig, {\n      jsonData: newJsonData\n    }));\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"gf-form-group\",\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: cx('gf-form', css`\n            align-items: baseline;\n          `),\n      children: [_h || (_h = /*#__PURE__*/_jsx(\"h6\", {\n        children: \"TLS/SSL Auth Details\"\n      })), /*#__PURE__*/_jsx(Tooltip, {\n        placement: \"right-end\",\n        content: \"TLS/SSL Certs are encrypted and stored in the Grafana database.\",\n        theme: \"info\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form-help-icon gf-form-help-icon--right-normal\",\n          children: /*#__PURE__*/_jsx(Icon, {\n            name: \"info-circle\",\n            size: \"xs\",\n            style: {\n              marginLeft: '10px'\n            }\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [dataSourceConfig.jsonData.tlsAuthWithCACert && /*#__PURE__*/_jsx(CertificationKey, {\n        hasCert: !!hasTLSCACert,\n        onChange: onCertificateChangeFactory('tlsCACert'),\n        placeholder: \"Begins with -----BEGIN CERTIFICATE-----\",\n        label: \"CA Cert\",\n        onClick: onResetClickFactory('tlsCACert')\n      }), dataSourceConfig.jsonData.tlsAuth && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form\",\n          children: /*#__PURE__*/_jsx(FormField, {\n            label: \"ServerName\",\n            labelWidth: 7,\n            inputWidth: 30,\n            placeholder: \"domain.example.com\",\n            value: hasServerName && dataSourceConfig.jsonData.serverName,\n            onChange: onServerNameLabelChange\n          })\n        }), /*#__PURE__*/_jsx(CertificationKey, {\n          hasCert: !!hasTLSClientCert,\n          label: \"Client Cert\",\n          onChange: onCertificateChangeFactory('tlsClientCert'),\n          placeholder: \"Begins with -----BEGIN CERTIFICATE-----\",\n          onClick: onResetClickFactory('tlsClientCert')\n        }), /*#__PURE__*/_jsx(CertificationKey, {\n          hasCert: !!hasTLSClientKey,\n          label: \"Client Key\",\n          placeholder: \"Begins with -----BEGIN RSA PRIVATE KEY-----\",\n          onChange: onCertificateChangeFactory('tlsClientKey'),\n          onClick: onResetClickFactory('tlsClientKey')\n        })]\n      })]\n    })]\n  });\n};","map":{"version":3,"names":["css","cx","React","FormField","Icon","Tooltip","CertificationKey","TLSAuthSettings","dataSourceConfig","onChange","hasTLSCACert","secureJsonFields","tlsCACert","hasTLSClientCert","tlsClientCert","hasTLSClientKey","tlsClientKey","hasServerName","jsonData","serverName","onResetClickFactory","field","event","preventDefault","newSecureJsonFields","onCertificateChangeFactory","newSecureJsonData","secureJsonData","currentTarget","value","onServerNameLabelChange","newJsonData","marginLeft","tlsAuthWithCACert","tlsAuth"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/DataSourceSettings/TLSAuthSettings.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { KeyValue } from '@grafana/data';\n\nimport { FormField } from '../FormField/FormField';\nimport { Icon } from '../Icon/Icon';\nimport { Tooltip } from '../Tooltip/Tooltip';\n\nimport { CertificationKey } from './CertificationKey';\nimport { HttpSettingsBaseProps } from './types';\n\nexport const TLSAuthSettings: React.FC<HttpSettingsBaseProps> = ({ dataSourceConfig, onChange }) => {\n  const hasTLSCACert = dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.tlsCACert;\n  const hasTLSClientCert = dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.tlsClientCert;\n  const hasTLSClientKey = dataSourceConfig.secureJsonFields && dataSourceConfig.secureJsonFields.tlsClientKey;\n  const hasServerName = dataSourceConfig.jsonData && dataSourceConfig.jsonData.serverName;\n\n  const onResetClickFactory = (field: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    const newSecureJsonFields: KeyValue<boolean> = { ...dataSourceConfig.secureJsonFields };\n    newSecureJsonFields[field] = false;\n    onChange({\n      ...dataSourceConfig,\n      secureJsonFields: newSecureJsonFields,\n    });\n  };\n\n  const onCertificateChangeFactory = (field: string) => (event: React.SyntheticEvent<HTMLTextAreaElement>) => {\n    const newSecureJsonData = { ...dataSourceConfig.secureJsonData };\n    newSecureJsonData[field] = event.currentTarget.value;\n\n    onChange({\n      ...dataSourceConfig,\n      secureJsonData: newSecureJsonData,\n    });\n  };\n\n  const onServerNameLabelChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const newJsonData = {\n      ...dataSourceConfig.jsonData,\n      serverName: event.currentTarget.value,\n    };\n\n    onChange({\n      ...dataSourceConfig,\n      jsonData: newJsonData,\n    });\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      <div\n        className={cx(\n          'gf-form',\n          css`\n            align-items: baseline;\n          `\n        )}\n      >\n        <h6>TLS/SSL Auth Details</h6>\n        <Tooltip\n          placement=\"right-end\"\n          content=\"TLS/SSL Certs are encrypted and stored in the Grafana database.\"\n          theme=\"info\"\n        >\n          <div className=\"gf-form-help-icon gf-form-help-icon--right-normal\">\n            <Icon name=\"info-circle\" size=\"xs\" style={{ marginLeft: '10px' }} />\n          </div>\n        </Tooltip>\n      </div>\n      <div>\n        {dataSourceConfig.jsonData.tlsAuthWithCACert && (\n          <CertificationKey\n            hasCert={!!hasTLSCACert}\n            onChange={onCertificateChangeFactory('tlsCACert')}\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            label=\"CA Cert\"\n            onClick={onResetClickFactory('tlsCACert')}\n          />\n        )}\n\n        {dataSourceConfig.jsonData.tlsAuth && (\n          <>\n            <div className=\"gf-form\">\n              <FormField\n                label=\"ServerName\"\n                labelWidth={7}\n                inputWidth={30}\n                placeholder=\"domain.example.com\"\n                value={hasServerName && dataSourceConfig.jsonData.serverName}\n                onChange={onServerNameLabelChange}\n              />\n            </div>\n            <CertificationKey\n              hasCert={!!hasTLSClientCert}\n              label=\"Client Cert\"\n              onChange={onCertificateChangeFactory('tlsClientCert')}\n              placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n              onClick={onResetClickFactory('tlsClientCert')}\n            />\n\n            <CertificationKey\n              hasCert={!!hasTLSClientKey}\n              label=\"Client Key\"\n              placeholder=\"Begins with -----BEGIN RSA PRIVATE KEY-----\"\n              onChange={onCertificateChangeFactory('tlsClientKey')}\n              onClick={onResetClickFactory('tlsClientKey')}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}