{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css, cx } from '@emotion/css';\nimport classnames from 'classnames';\nimport { debounce } from 'lodash';\nimport React from 'react';\nimport Plain from 'slate-plain-serializer';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Editor } from '@grafana/slate-react';\nimport { makeValue, SCHEMA } from '../..';\nimport { ClearPlugin, NewlinePlugin, SelectionShortcutsPlugin, IndentationPlugin, ClipboardPlugin, RunnerPlugin, SuggestionsPlugin } from '../../slate-plugins';\nimport { withTheme2 } from '../../themes';\nimport { getFocusStyles } from '../../themes/mixins';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * Renders an editor field.\n * Pass initial value as initialQuery and listen to changes in props.onValueChanged.\n * This component can only process strings. Internally it uses Slate Value.\n * Implement props.onTypeahead to use suggestions, see PromQueryField.tsx as an example.\n */\nexport class UnThemedQueryField extends React.PureComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    _defineProperty(this, \"plugins\", void 0);\n\n    _defineProperty(this, \"runOnChangeDebounced\", void 0);\n\n    _defineProperty(this, \"lastExecutedValue\", null);\n\n    _defineProperty(this, \"mounted\", false);\n\n    _defineProperty(this, \"editor\", null);\n\n    _defineProperty(this, \"onChange\", (value, runQuery) => {\n      const documentChanged = value.document !== this.state.value.document;\n      const prevValue = this.state.value;\n\n      if (this.props.onRichValueChange) {\n        this.props.onRichValueChange(value);\n      } // Update local state with new value and optionally change value upstream.\n\n\n      this.setState({\n        value\n      }, () => {\n        // The diff is needed because the actual value of editor have much more metadata (for example text selection)\n        // that is not passed upstream so every change of editor value does not mean change of the query text.\n        if (documentChanged) {\n          const textChanged = Plain.serialize(prevValue) !== Plain.serialize(value);\n\n          if (textChanged && runQuery) {\n            this.runOnChangeAndRunQuery();\n          }\n\n          if (textChanged && !runQuery) {\n            // Debounce change propagation by default for perf reasons.\n            this.runOnChangeDebounced();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"runOnChange\", () => {\n      const {\n        onChange\n      } = this.props;\n      const value = Plain.serialize(this.state.value);\n\n      if (onChange) {\n        onChange(this.cleanText(value));\n      }\n    });\n\n    _defineProperty(this, \"runOnRunQuery\", () => {\n      const {\n        onRunQuery\n      } = this.props;\n\n      if (onRunQuery) {\n        onRunQuery();\n        this.lastExecutedValue = this.state.value;\n      }\n    });\n\n    _defineProperty(this, \"runOnChangeAndRunQuery\", () => {\n      // onRunQuery executes query from Redux in Explore so it needs to be updated sync in case we want to run\n      // the query.\n      this.runOnChange();\n      this.runOnRunQuery();\n    });\n\n    _defineProperty(this, \"handleBlur\", (event, editor, next) => {\n      const {\n        onBlur\n      } = this.props;\n\n      if (onBlur) {\n        onBlur();\n      } else {\n        // Run query by default on blur\n        const previousValue = this.lastExecutedValue ? Plain.serialize(this.lastExecutedValue) : null;\n        const currentValue = Plain.serialize(editor.value);\n\n        if (previousValue !== currentValue) {\n          this.runOnChangeAndRunQuery();\n        }\n      }\n\n      return next();\n    });\n\n    this.runOnChangeDebounced = debounce(this.runOnChange, 500);\n    const {\n      onTypeahead,\n      cleanText,\n      portalOrigin,\n      onWillApplySuggestion\n    } = props; // Base plugins\n\n    this.plugins = [// SuggestionsPlugin and RunnerPlugin need to be before NewlinePlugin\n    // because they override Enter behavior\n    SuggestionsPlugin({\n      onTypeahead,\n      cleanText,\n      portalOrigin,\n      onWillApplySuggestion\n    }), RunnerPlugin({\n      handler: this.runOnChangeAndRunQuery\n    }), NewlinePlugin(), ClearPlugin(), SelectionShortcutsPlugin(), IndentationPlugin(), ClipboardPlugin(), ...(props.additionalPlugins || [])].filter(p => p);\n    this.state = {\n      suggestions: [],\n      typeaheadContext: null,\n      typeaheadPrefix: '',\n      typeaheadText: '',\n      value: makeValue(props.query || '', props.syntax)\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      query,\n      syntax,\n      syntaxLoaded\n    } = this.props;\n\n    if (!prevProps.syntaxLoaded && syntaxLoaded && this.editor) {\n      // Need a bogus edit to re-render the editor after syntax has fully loaded\n      const editor = this.editor.insertText(' ').deleteBackward(1);\n      this.onChange(editor.value, true);\n    }\n\n    const {\n      value\n    } = this.state; // Handle two way binging between local state and outside prop.\n    // if query changed from the outside\n\n    if (query !== prevProps.query) {\n      // and we have a version that differs\n      if (query !== Plain.serialize(value)) {\n        this.setState({\n          value: makeValue(query || '', syntax)\n        });\n      }\n    }\n  }\n  /**\n   * Update local state, propagate change upstream and optionally run the query afterwards.\n   */\n\n\n  cleanText(text) {\n    // RegExp with invisible characters we want to remove - currently only carriage return (newlines are visible)\n    const newText = text.replace(/[\\r]/g, '');\n    return newText;\n  }\n\n  render() {\n    const {\n      disabled,\n      theme\n    } = this.props;\n    const wrapperClassName = classnames('slate-query-field__wrapper', {\n      'slate-query-field__wrapper--disabled': disabled\n    });\n    const styles = getStyles(theme);\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: cx(wrapperClassName, styles.wrapper),\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"slate-query-field\",\n        \"aria-label\": selectors.components.QueryField.container,\n        children: /*#__PURE__*/_jsx(Editor, {\n          ref: editor => this.editor = editor,\n          schema: SCHEMA,\n          autoCorrect: false,\n          readOnly: this.props.disabled,\n          onBlur: this.handleBlur,\n          onClick: this.props.onClick // onKeyDown={this.onKeyDown}\n          ,\n          onChange: change => {\n            this.onChange(change.value, false);\n          },\n          placeholder: this.props.placeholder,\n          plugins: this.plugins,\n          spellCheck: false,\n          value: this.state.value\n        })\n      })\n    });\n  }\n\n}\nexport const QueryField = withTheme2(UnThemedQueryField);\n\nconst getStyles = theme => {\n  const focusStyles = getFocusStyles(theme);\n  return {\n    wrapper: css`\n      &:focus-within {\n        ${focusStyles}\n      }\n    `\n  };\n};","map":{"version":3,"names":["css","cx","classnames","debounce","React","Plain","selectors","Editor","makeValue","SCHEMA","ClearPlugin","NewlinePlugin","SelectionShortcutsPlugin","IndentationPlugin","ClipboardPlugin","RunnerPlugin","SuggestionsPlugin","withTheme2","getFocusStyles","UnThemedQueryField","PureComponent","constructor","props","context","value","runQuery","documentChanged","document","state","prevValue","onRichValueChange","setState","textChanged","serialize","runOnChangeAndRunQuery","runOnChangeDebounced","onChange","cleanText","onRunQuery","lastExecutedValue","runOnChange","runOnRunQuery","event","editor","next","onBlur","previousValue","currentValue","onTypeahead","portalOrigin","onWillApplySuggestion","plugins","handler","additionalPlugins","filter","p","suggestions","typeaheadContext","typeaheadPrefix","typeaheadText","query","syntax","componentDidMount","mounted","componentWillUnmount","componentDidUpdate","prevProps","prevState","syntaxLoaded","insertText","deleteBackward","text","newText","replace","render","disabled","theme","wrapperClassName","styles","getStyles","wrapper","components","QueryField","container","handleBlur","onClick","change","placeholder","focusStyles"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/QueryField/QueryField.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport classnames from 'classnames';\nimport { debounce } from 'lodash';\nimport React, { Context } from 'react';\nimport { Value, Editor as CoreEditor } from 'slate';\nimport Plain from 'slate-plain-serializer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Editor, Plugin } from '@grafana/slate-react';\n\nimport {\n  makeValue,\n  SCHEMA,\n  CompletionItemGroup,\n  TypeaheadOutput,\n  TypeaheadInput,\n  SuggestionsState,\n  Themeable2,\n} from '../..';\nimport {\n  ClearPlugin,\n  NewlinePlugin,\n  SelectionShortcutsPlugin,\n  IndentationPlugin,\n  ClipboardPlugin,\n  RunnerPlugin,\n  SuggestionsPlugin,\n} from '../../slate-plugins';\nimport { withTheme2 } from '../../themes';\nimport { getFocusStyles } from '../../themes/mixins';\n\nexport interface QueryFieldProps extends Themeable2 {\n  additionalPlugins?: Plugin[];\n  cleanText?: (text: string) => string;\n  disabled?: boolean;\n  // We have both value and local state. This is usually an antipattern but we need to keep local state\n  // for perf reasons and also have outside value in for example in Explore redux that is mutable from logs\n  // creating a two way binding.\n  query?: string | null;\n  onRunQuery?: () => void;\n  onBlur?: () => void;\n  onChange?: (value: string) => void;\n  onRichValueChange?: (value: Value) => void;\n  onClick?: (event: Event, editor: CoreEditor, next: () => any) => any;\n  onTypeahead?: (typeahead: TypeaheadInput) => Promise<TypeaheadOutput>;\n  onWillApplySuggestion?: (suggestion: string, state: SuggestionsState) => string;\n  placeholder?: string;\n  portalOrigin: string;\n  syntax?: string;\n  syntaxLoaded?: boolean;\n  theme: GrafanaTheme2;\n}\n\nexport interface QueryFieldState {\n  suggestions: CompletionItemGroup[];\n  typeaheadContext: string | null;\n  typeaheadPrefix: string;\n  typeaheadText: string;\n  value: Value;\n}\n\n/**\n * Renders an editor field.\n * Pass initial value as initialQuery and listen to changes in props.onValueChanged.\n * This component can only process strings. Internally it uses Slate Value.\n * Implement props.onTypeahead to use suggestions, see PromQueryField.tsx as an example.\n */\nexport class UnThemedQueryField extends React.PureComponent<QueryFieldProps, QueryFieldState> {\n  plugins: Plugin[];\n  runOnChangeDebounced: Function;\n  lastExecutedValue: Value | null = null;\n  mounted = false;\n  editor: Editor | null = null;\n\n  constructor(props: QueryFieldProps, context: Context<any>) {\n    super(props, context);\n\n    this.runOnChangeDebounced = debounce(this.runOnChange, 500);\n\n    const { onTypeahead, cleanText, portalOrigin, onWillApplySuggestion } = props;\n\n    // Base plugins\n    this.plugins = [\n      // SuggestionsPlugin and RunnerPlugin need to be before NewlinePlugin\n      // because they override Enter behavior\n      SuggestionsPlugin({ onTypeahead, cleanText, portalOrigin, onWillApplySuggestion }),\n      RunnerPlugin({ handler: this.runOnChangeAndRunQuery }),\n      NewlinePlugin(),\n      ClearPlugin(),\n      SelectionShortcutsPlugin(),\n      IndentationPlugin(),\n      ClipboardPlugin(),\n      ...(props.additionalPlugins || []),\n    ].filter((p) => p);\n\n    this.state = {\n      suggestions: [],\n      typeaheadContext: null,\n      typeaheadPrefix: '',\n      typeaheadText: '',\n      value: makeValue(props.query || '', props.syntax),\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  componentDidUpdate(prevProps: QueryFieldProps, prevState: QueryFieldState) {\n    const { query, syntax, syntaxLoaded } = this.props;\n\n    if (!prevProps.syntaxLoaded && syntaxLoaded && this.editor) {\n      // Need a bogus edit to re-render the editor after syntax has fully loaded\n      const editor = this.editor.insertText(' ').deleteBackward(1);\n      this.onChange(editor.value, true);\n    }\n    const { value } = this.state;\n\n    // Handle two way binging between local state and outside prop.\n    // if query changed from the outside\n    if (query !== prevProps.query) {\n      // and we have a version that differs\n      if (query !== Plain.serialize(value)) {\n        this.setState({ value: makeValue(query || '', syntax) });\n      }\n    }\n  }\n\n  /**\n   * Update local state, propagate change upstream and optionally run the query afterwards.\n   */\n  onChange = (value: Value, runQuery?: boolean) => {\n    const documentChanged = value.document !== this.state.value.document;\n    const prevValue = this.state.value;\n    if (this.props.onRichValueChange) {\n      this.props.onRichValueChange(value);\n    }\n\n    // Update local state with new value and optionally change value upstream.\n    this.setState({ value }, () => {\n      // The diff is needed because the actual value of editor have much more metadata (for example text selection)\n      // that is not passed upstream so every change of editor value does not mean change of the query text.\n      if (documentChanged) {\n        const textChanged = Plain.serialize(prevValue) !== Plain.serialize(value);\n        if (textChanged && runQuery) {\n          this.runOnChangeAndRunQuery();\n        }\n        if (textChanged && !runQuery) {\n          // Debounce change propagation by default for perf reasons.\n          this.runOnChangeDebounced();\n        }\n      }\n    });\n  };\n\n  runOnChange = () => {\n    const { onChange } = this.props;\n    const value = Plain.serialize(this.state.value);\n    if (onChange) {\n      onChange(this.cleanText(value));\n    }\n  };\n\n  runOnRunQuery = () => {\n    const { onRunQuery } = this.props;\n\n    if (onRunQuery) {\n      onRunQuery();\n      this.lastExecutedValue = this.state.value;\n    }\n  };\n\n  runOnChangeAndRunQuery = () => {\n    // onRunQuery executes query from Redux in Explore so it needs to be updated sync in case we want to run\n    // the query.\n    this.runOnChange();\n    this.runOnRunQuery();\n  };\n\n  /**\n   * We need to handle blur events here mainly because of dashboard panels which expect to have query executed on blur.\n   */\n  handleBlur = (event: Event, editor: CoreEditor, next: Function) => {\n    const { onBlur } = this.props;\n\n    if (onBlur) {\n      onBlur();\n    } else {\n      // Run query by default on blur\n      const previousValue = this.lastExecutedValue ? Plain.serialize(this.lastExecutedValue) : null;\n      const currentValue = Plain.serialize(editor.value);\n\n      if (previousValue !== currentValue) {\n        this.runOnChangeAndRunQuery();\n      }\n    }\n    return next();\n  };\n\n  cleanText(text: string) {\n    // RegExp with invisible characters we want to remove - currently only carriage return (newlines are visible)\n    const newText = text.replace(/[\\r]/g, '');\n    return newText;\n  }\n\n  render() {\n    const { disabled, theme } = this.props;\n    const wrapperClassName = classnames('slate-query-field__wrapper', {\n      'slate-query-field__wrapper--disabled': disabled,\n    });\n    const styles = getStyles(theme);\n\n    return (\n      <div className={cx(wrapperClassName, styles.wrapper)}>\n        <div className=\"slate-query-field\" aria-label={selectors.components.QueryField.container}>\n          <Editor\n            ref={(editor) => (this.editor = editor!)}\n            schema={SCHEMA}\n            autoCorrect={false}\n            readOnly={this.props.disabled}\n            onBlur={this.handleBlur}\n            onClick={this.props.onClick}\n            // onKeyDown={this.onKeyDown}\n            onChange={(change: { value: Value }) => {\n              this.onChange(change.value, false);\n            }}\n            placeholder={this.props.placeholder}\n            plugins={this.plugins}\n            spellCheck={false}\n            value={this.state.value}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const QueryField = withTheme2(UnThemedQueryField);\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const focusStyles = getFocusStyles(theme);\n  return {\n    wrapper: css`\n      &:focus-within {\n        ${focusStyles}\n      }\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}