{"ast":null,"code":"import React from 'react';\nimport { ALIGNMENT_PERIODS, SELECT_WIDTH } from '../constants';\nimport { AlignmentFunction, PeriodSelect, AlignmentPeriodLabel, QueryEditorField, QueryEditorRow } from '.';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const Alignment = ({\n  refId,\n  templateVariableOptions,\n  onChange,\n  query,\n  customMetaData,\n  datasource\n}) => {\n  return /*#__PURE__*/_jsxs(QueryEditorRow, {\n    label: \"Alignment function\",\n    tooltip: \"The process of alignment consists of collecting all data points received in a fixed length of time, applying a function to combine those data points, and assigning a timestamp to the result.\",\n    fillComponent: /*#__PURE__*/_jsx(AlignmentPeriodLabel, {\n      datasource: datasource,\n      customMetaData: customMetaData\n    }),\n    htmlFor: `${refId}-alignment-function`,\n    children: [/*#__PURE__*/_jsx(AlignmentFunction, {\n      inputId: `${refId}-alignment-function`,\n      templateVariableOptions: templateVariableOptions,\n      query: query,\n      onChange: onChange\n    }), /*#__PURE__*/_jsx(QueryEditorField, {\n      label: \"Alignment period\",\n      htmlFor: `${refId}-alignment-period`,\n      children: /*#__PURE__*/_jsx(PeriodSelect, {\n        inputId: `${refId}-alignment-period`,\n        selectWidth: SELECT_WIDTH,\n        templateVariableOptions: templateVariableOptions,\n        current: query.alignmentPeriod,\n        onChange: period => onChange(Object.assign({}, query, {\n          alignmentPeriod: period\n        })),\n        aligmentPeriods: ALIGNMENT_PERIODS\n      })\n    })]\n  });\n};","map":{"version":3,"names":["React","ALIGNMENT_PERIODS","SELECT_WIDTH","AlignmentFunction","PeriodSelect","AlignmentPeriodLabel","QueryEditorField","QueryEditorRow","Alignment","refId","templateVariableOptions","onChange","query","customMetaData","datasource","alignmentPeriod","period"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/Alignment.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { ALIGNMENT_PERIODS, SELECT_WIDTH } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { CustomMetaData, MetricQuery, SLOQuery } from '../types';\n\nimport { AlignmentFunction, PeriodSelect, AlignmentPeriodLabel, QueryEditorField, QueryEditorRow } from '.';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: MetricQuery | SLOQuery) => void;\n  query: MetricQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  customMetaData: CustomMetaData;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Alignment: FC<Props> = ({\n  refId,\n  templateVariableOptions,\n  onChange,\n  query,\n  customMetaData,\n  datasource,\n}) => {\n  return (\n    <QueryEditorRow\n      label=\"Alignment function\"\n      tooltip=\"The process of alignment consists of collecting all data points received in a fixed length of time, applying a function to combine those data points, and assigning a timestamp to the result.\"\n      fillComponent={<AlignmentPeriodLabel datasource={datasource} customMetaData={customMetaData} />}\n      htmlFor={`${refId}-alignment-function`}\n    >\n      <AlignmentFunction\n        inputId={`${refId}-alignment-function`}\n        templateVariableOptions={templateVariableOptions}\n        query={query}\n        onChange={onChange}\n      />\n      <QueryEditorField label=\"Alignment period\" htmlFor={`${refId}-alignment-period`}>\n        <PeriodSelect\n          inputId={`${refId}-alignment-period`}\n          selectWidth={SELECT_WIDTH}\n          templateVariableOptions={templateVariableOptions}\n          current={query.alignmentPeriod}\n          onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n          aligmentPeriods={ALIGNMENT_PERIODS}\n        />\n      </QueryEditorField>\n    </QueryEditorRow>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAIA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,cAAhD;AAIA,SAASC,iBAAT,EAA4BC,YAA5B,EAA0CC,oBAA1C,EAAgEC,gBAAhE,EAAkFC,cAAlF,QAAwG,GAAxG;;;AAWA,OAAO,MAAMC,SAAoB,GAAG,CAAC;EACnCC,KADmC;EAEnCC,uBAFmC;EAGnCC,QAHmC;EAInCC,KAJmC;EAKnCC,cALmC;EAMnCC;AANmC,CAAD,KAO9B;EACJ,oBACE,MAAC,cAAD;IACE,KAAK,EAAC,oBADR;IAEE,OAAO,EAAC,gMAFV;IAGE,aAAa,eAAE,KAAC,oBAAD;MAAsB,UAAU,EAAEA,UAAlC;MAA8C,cAAc,EAAED;IAA9D,EAHjB;IAIE,OAAO,EAAG,GAAEJ,KAAM,qBAJpB;IAAA,wBAME,KAAC,iBAAD;MACE,OAAO,EAAG,GAAEA,KAAM,qBADpB;MAEE,uBAAuB,EAAEC,uBAF3B;MAGE,KAAK,EAAEE,KAHT;MAIE,QAAQ,EAAED;IAJZ,EANF,eAYE,KAAC,gBAAD;MAAkB,KAAK,EAAC,kBAAxB;MAA2C,OAAO,EAAG,GAAEF,KAAM,mBAA7D;MAAA,uBACE,KAAC,YAAD;QACE,OAAO,EAAG,GAAEA,KAAM,mBADpB;QAEE,WAAW,EAAEP,YAFf;QAGE,uBAAuB,EAAEQ,uBAH3B;QAIE,OAAO,EAAEE,KAAK,CAACG,eAJjB;QAKE,QAAQ,EAAGC,MAAD,IAAYL,QAAQ,mBAAMC,KAAN;UAAaG,eAAe,EAAEC;QAA9B,GALhC;QAME,eAAe,EAAEf;MANnB;IADF,EAZF;EAAA,EADF;AAyBD,CAjCM"},"metadata":{},"sourceType":"module"}