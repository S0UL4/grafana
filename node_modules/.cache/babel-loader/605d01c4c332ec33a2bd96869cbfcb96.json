{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\nimport { AlertDetails } from './AlertDetails';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const AlertGroupAlertsTable = ({\n  alerts,\n  alertManagerSourceName\n}) => {\n  const styles = useStyles2(getStyles);\n  const columns = useMemo(() => [{\n    id: 'state',\n    label: 'State',\n    // eslint-disable-next-line react/display-name\n    renderCell: ({\n      data: alert\n    }) => /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(AmAlertStateTag, {\n        state: alert.status.state\n      }), /*#__PURE__*/_jsxs(\"span\", {\n        className: styles.duration,\n        children: [\"for\", ' ', intervalToAbbreviatedDurationString({\n          start: new Date(alert.startsAt),\n          end: new Date(alert.endsAt)\n        })]\n      })]\n    }),\n    size: '220px'\n  }, {\n    id: 'labels',\n    label: 'Labels',\n    // eslint-disable-next-line react/display-name\n    renderCell: ({\n      data: {\n        labels\n      }\n    }) => /*#__PURE__*/_jsx(AlertLabels, {\n      className: styles.labels,\n      labels: labels\n    }),\n    size: 1\n  }], [styles]);\n  const items = useMemo(() => alerts.map(alert => ({\n    id: alert.fingerprint,\n    data: alert\n  })), [alerts]);\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.tableWrapper,\n    \"data-testid\": \"alert-group-table\",\n    children: /*#__PURE__*/_jsx(DynamicTableWithGuidelines, {\n      cols: columns,\n      items: items,\n      isExpandable: true,\n      renderExpandedContent: ({\n        data: alert\n      }) => /*#__PURE__*/_jsx(AlertDetails, {\n        alert: alert,\n        alertManagerSourceName: alertManagerSourceName\n      })\n    })\n  });\n};\n\nconst getStyles = theme => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  labels: css`\n    padding-bottom: 0;\n  `\n});","map":{"version":3,"names":["css","React","useMemo","intervalToAbbreviatedDurationString","useStyles2","AlertLabels","DynamicTableWithGuidelines","AmAlertStateTag","AlertDetails","AlertGroupAlertsTable","alerts","alertManagerSourceName","styles","getStyles","columns","id","label","renderCell","data","alert","status","state","duration","start","Date","startsAt","end","endsAt","size","labels","items","map","fingerprint","tableWrapper","theme","spacing","breakpoints","up","typography","bodySmall","fontSize"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels className={styles.labels} labels={labels} />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  labels: css`\n    padding-bottom: 0;\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA,SAAwBC,mCAAxB,QAAmE,eAAnE;AACA,SAASC,UAAT,QAA2B,aAA3B;AAGA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,eAAT,QAAgC,6BAAhC;AAEA,SAASC,YAAT,QAA6B,gBAA7B;;;;AAUA,OAAO,MAAMC,qBAAqB,GAAG,CAAC;EAAEC,MAAF;EAAUC;AAAV,CAAD,KAA+C;EAClF,MAAMC,MAAM,GAAGR,UAAU,CAACS,SAAD,CAAzB;EAEA,MAAMC,OAAO,GAAGZ,OAAO,CACrB,MAA0C,CACxC;IACEa,EAAE,EAAE,OADN;IAEEC,KAAK,EAAE,OAFT;IAGE;IACAC,UAAU,EAAE,CAAC;MAAEC,IAAI,EAAEC;IAAR,CAAD,kBACV;MAAA,wBACE,KAAC,eAAD;QAAiB,KAAK,EAAEA,KAAK,CAACC,MAAN,CAAaC;MAArC,EADF,eAEE;QAAM,SAAS,EAAET,MAAM,CAACU,QAAxB;QAAA,kBACM,GADN,EAEGnB,mCAAmC,CAAC;UACnCoB,KAAK,EAAE,IAAIC,IAAJ,CAASL,KAAK,CAACM,QAAf,CAD4B;UAEnCC,GAAG,EAAE,IAAIF,IAAJ,CAASL,KAAK,CAACQ,MAAf;QAF8B,CAAD,CAFtC;MAAA,EAFF;IAAA,EALJ;IAgBEC,IAAI,EAAE;EAhBR,CADwC,EAmBxC;IACEb,EAAE,EAAE,QADN;IAEEC,KAAK,EAAE,QAFT;IAGE;IACAC,UAAU,EAAE,CAAC;MAAEC,IAAI,EAAE;QAAEW;MAAF;IAAR,CAAD,kBAA0B,KAAC,WAAD;MAAa,SAAS,EAAEjB,MAAM,CAACiB,MAA/B;MAAuC,MAAM,EAAEA;IAA/C,EAJxC;IAKED,IAAI,EAAE;EALR,CAnBwC,CADrB,EA4BrB,CAAChB,MAAD,CA5BqB,CAAvB;EA+BA,MAAMkB,KAAK,GAAG5B,OAAO,CACnB,MACEQ,MAAM,CAACqB,GAAP,CAAYZ,KAAD,KAAY;IACrBJ,EAAE,EAAEI,KAAK,CAACa,WADW;IAErBd,IAAI,EAAEC;EAFe,CAAZ,CAAX,CAFiB,EAMnB,CAACT,MAAD,CANmB,CAArB;EASA,oBACE;IAAK,SAAS,EAAEE,MAAM,CAACqB,YAAvB;IAAqC,eAAY,mBAAjD;IAAA,uBACE,KAAC,0BAAD;MACE,IAAI,EAAEnB,OADR;MAEE,KAAK,EAAEgB,KAFT;MAGE,YAAY,EAAE,IAHhB;MAIE,qBAAqB,EAAE,CAAC;QAAEZ,IAAI,EAAEC;MAAR,CAAD,kBACrB,KAAC,YAAD;QAAc,KAAK,EAAEA,KAArB;QAA4B,sBAAsB,EAAER;MAApD;IALJ;EADF,EADF;AAYD,CAvDM;;AAyDP,MAAME,SAAS,GAAIqB,KAAD,KAA2B;EAC3CD,YAAY,EAAEjC,GAAI;AACpB,kBAAkBkC,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AACnC,MAAMD,KAAK,CAACE,WAAN,CAAkBC,EAAlB,CAAqB,IAArB,CAA2B;AACjC,qBAAqBH,KAAK,CAACC,OAAN,CAAc,GAAd,CAAmB;AACxC;AACA,GAN6C;EAO3Cb,QAAQ,EAAEtB,GAAI;AAChB,mBAAmBkC,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AACpC,iBAAiBD,KAAK,CAACI,UAAN,CAAiBC,SAAjB,CAA2BC,QAAS;AACrD,GAV6C;EAW3CX,MAAM,EAAE7B,GAAI;AACd;AACA;AAb6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}