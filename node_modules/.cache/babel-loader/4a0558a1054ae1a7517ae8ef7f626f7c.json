{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Select } from '@grafana/ui';\nimport { getLastKey, getVariablesByKey } from '../../../variables/state/selectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const RepeatRowSelect = ({\n  repeat,\n  onChange,\n  id\n}) => {\n  const variables = useSelector(state => {\n    return getVariablesByKey(getLastKey(state), state);\n  });\n  const variableOptions = useMemo(() => {\n    const options = variables.map(item => {\n      return {\n        label: item.name,\n        value: item.name\n      };\n    });\n\n    if (options.length === 0) {\n      options.unshift({\n        label: 'No template variables found',\n        value: null\n      });\n    }\n\n    options.unshift({\n      label: 'Disable repeating',\n      value: null\n    });\n    return options;\n  }, [variables]);\n  const onSelectChange = useCallback(option => onChange(option.value), [onChange]);\n  return /*#__PURE__*/_jsx(Select, {\n    inputId: id,\n    value: repeat,\n    onChange: onSelectChange,\n    options: variableOptions\n  });\n};","map":{"version":3,"names":["React","useCallback","useMemo","useSelector","Select","getLastKey","getVariablesByKey","RepeatRowSelect","repeat","onChange","id","variables","state","variableOptions","options","map","item","label","name","value","length","unshift","onSelectChange","option"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/RepeatRowSelect/RepeatRowSelect.tsx"],"sourcesContent":["import React, { FC, useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { StoreState } from '../../../../types';\nimport { getLastKey, getVariablesByKey } from '../../../variables/state/selectors';\n\nexport interface Props {\n  id?: string;\n  repeat?: string | null;\n  onChange: (name: string | null) => void;\n}\n\nexport const RepeatRowSelect: FC<Props> = ({ repeat, onChange, id }) => {\n  const variables = useSelector((state: StoreState) => {\n    return getVariablesByKey(getLastKey(state), state);\n  });\n\n  const variableOptions = useMemo(() => {\n    const options = variables.map((item: any) => {\n      return { label: item.name, value: item.name };\n    });\n\n    if (options.length === 0) {\n      options.unshift({\n        label: 'No template variables found',\n        value: null,\n      });\n    }\n\n    options.unshift({\n      label: 'Disable repeating',\n      value: null,\n    });\n\n    return options;\n  }, [variables]);\n\n  const onSelectChange = useCallback((option: SelectableValue<string | null>) => onChange(option.value!), [onChange]);\n\n  return <Select inputId={id} value={repeat} onChange={onSelectChange} options={variableOptions} />;\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAoBC,WAApB,EAAiCC,OAAjC,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAGA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,oCAA9C;;AAQA,OAAO,MAAMC,eAA0B,GAAG,CAAC;EAAEC,MAAF;EAAUC,QAAV;EAAoBC;AAApB,CAAD,KAA8B;EACtE,MAAMC,SAAS,GAAGR,WAAW,CAAES,KAAD,IAAuB;IACnD,OAAON,iBAAiB,CAACD,UAAU,CAACO,KAAD,CAAX,EAAoBA,KAApB,CAAxB;EACD,CAF4B,CAA7B;EAIA,MAAMC,eAAe,GAAGX,OAAO,CAAC,MAAM;IACpC,MAAMY,OAAO,GAAGH,SAAS,CAACI,GAAV,CAAeC,IAAD,IAAe;MAC3C,OAAO;QAAEC,KAAK,EAAED,IAAI,CAACE,IAAd;QAAoBC,KAAK,EAAEH,IAAI,CAACE;MAAhC,CAAP;IACD,CAFe,CAAhB;;IAIA,IAAIJ,OAAO,CAACM,MAAR,KAAmB,CAAvB,EAA0B;MACxBN,OAAO,CAACO,OAAR,CAAgB;QACdJ,KAAK,EAAE,6BADO;QAEdE,KAAK,EAAE;MAFO,CAAhB;IAID;;IAEDL,OAAO,CAACO,OAAR,CAAgB;MACdJ,KAAK,EAAE,mBADO;MAEdE,KAAK,EAAE;IAFO,CAAhB;IAKA,OAAOL,OAAP;EACD,CAlB8B,EAkB5B,CAACH,SAAD,CAlB4B,CAA/B;EAoBA,MAAMW,cAAc,GAAGrB,WAAW,CAAEsB,MAAD,IAA4Cd,QAAQ,CAACc,MAAM,CAACJ,KAAR,CAArD,EAAsE,CAACV,QAAD,CAAtE,CAAlC;EAEA,oBAAO,KAAC,MAAD;IAAQ,OAAO,EAAEC,EAAjB;IAAqB,KAAK,EAAEF,MAA5B;IAAoC,QAAQ,EAAEc,cAA9C;IAA8D,OAAO,EAAET;EAAvE,EAAP;AACD,CA5BM"},"metadata":{},"sourceType":"module"}