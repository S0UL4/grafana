{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CustomVariableSupport } from '@grafana/data';\nimport { VariableQueryEditor } from './components/VariableQueryEditor/VariableQueryEditor';\nimport { migrateVariableQuery } from './migrations/variableQueryMigrations';\nimport { VariableQueryType } from './types';\nexport class CloudWatchVariableSupport extends CustomVariableSupport {\n  constructor(datasource) {\n    super();\n\n    _defineProperty(this, \"datasource\", void 0);\n\n    _defineProperty(this, \"editor\", VariableQueryEditor);\n\n    this.datasource = datasource;\n    this.query = this.query.bind(this);\n  }\n\n  query(request) {\n    const queryObj = migrateVariableQuery(request.targets[0]);\n    return from(this.execute(queryObj)).pipe(map(data => ({\n      data\n    })));\n  }\n\n  async execute(query) {\n    try {\n      switch (query.queryType) {\n        case VariableQueryType.Regions:\n          return this.handleRegionsQuery();\n\n        case VariableQueryType.Namespaces:\n          return this.handleNamespacesQuery();\n\n        case VariableQueryType.Metrics:\n          return this.handleMetricsQuery(query);\n\n        case VariableQueryType.DimensionKeys:\n          return this.handleDimensionKeysQuery(query);\n\n        case VariableQueryType.DimensionValues:\n          return this.handleDimensionValuesQuery(query);\n\n        case VariableQueryType.EBSVolumeIDs:\n          return this.handleEbsVolumeIdsQuery(query);\n\n        case VariableQueryType.EC2InstanceAttributes:\n          return this.handleEc2InstanceAttributeQuery(query);\n\n        case VariableQueryType.ResourceArns:\n          return this.handleResourceARNsQuery(query);\n\n        case VariableQueryType.Statistics:\n          return this.handleStatisticsQuery();\n\n        case VariableQueryType.LogGroups:\n          return this.handleLogGroupsQuery(query);\n      }\n    } catch (error) {\n      console.error(`Could not run CloudWatchMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleLogGroupsQuery({\n    region,\n    logGroupPrefix\n  }) {\n    const logGroups = await this.datasource.describeLogGroups({\n      region,\n      logGroupNamePrefix: logGroupPrefix\n    });\n    return logGroups.map(s => ({\n      text: s,\n      value: s,\n      expandable: true\n    }));\n  }\n\n  async handleRegionsQuery() {\n    const regions = await this.datasource.getRegions();\n    return regions.map(s => ({\n      text: s.label,\n      value: s.value,\n      expandable: true\n    }));\n  }\n\n  async handleNamespacesQuery() {\n    const namespaces = await this.datasource.getNamespaces();\n    return namespaces.map(s => ({\n      text: s.label,\n      value: s.value,\n      expandable: true\n    }));\n  }\n\n  async handleMetricsQuery({\n    namespace,\n    region\n  }) {\n    const metrics = await this.datasource.getMetrics(namespace, region);\n    return metrics.map(s => ({\n      text: s.label,\n      value: s.value,\n      expandable: true\n    }));\n  }\n\n  async handleDimensionKeysQuery({\n    namespace,\n    region\n  }) {\n    const keys = await this.datasource.getDimensionKeys(namespace, region);\n    return keys.map(s => ({\n      text: s.label,\n      value: s.value,\n      expandable: true\n    }));\n  }\n\n  async handleDimensionValuesQuery({\n    namespace,\n    region,\n    dimensionKey,\n    metricName,\n    dimensionFilters\n  }) {\n    if (!dimensionKey || !metricName) {\n      return [];\n    }\n\n    const keys = await this.datasource.getDimensionValues(region, namespace, metricName, dimensionKey, dimensionFilters !== null && dimensionFilters !== void 0 ? dimensionFilters : {});\n    return keys.map(s => ({\n      text: s.label,\n      value: s.value,\n      expandable: true\n    }));\n  }\n\n  async handleEbsVolumeIdsQuery({\n    region,\n    instanceID\n  }) {\n    if (!instanceID) {\n      return [];\n    }\n\n    const ids = await this.datasource.getEbsVolumeIds(region, instanceID);\n    return ids.map(s => ({\n      text: s.label,\n      value: s.value,\n      expandable: true\n    }));\n  }\n\n  async handleEc2InstanceAttributeQuery({\n    region,\n    attributeName,\n    ec2Filters\n  }) {\n    if (!attributeName) {\n      return [];\n    }\n\n    const values = await this.datasource.getEc2InstanceAttribute(region, attributeName, ec2Filters !== null && ec2Filters !== void 0 ? ec2Filters : {});\n    return values.map(s => ({\n      text: s.label,\n      value: s.value,\n      expandable: true\n    }));\n  }\n\n  async handleResourceARNsQuery({\n    region,\n    resourceType,\n    tags\n  }) {\n    if (!resourceType) {\n      return [];\n    }\n\n    const keys = await this.datasource.getResourceARNs(region, resourceType, tags !== null && tags !== void 0 ? tags : {});\n    return keys.map(s => ({\n      text: s.label,\n      value: s.value,\n      expandable: true\n    }));\n  }\n\n  async handleStatisticsQuery() {\n    return this.datasource.standardStatistics.map(s => ({\n      text: s,\n      value: s,\n      expandable: true\n    }));\n  }\n\n}","map":{"version":3,"names":["from","map","CustomVariableSupport","VariableQueryEditor","migrateVariableQuery","VariableQueryType","CloudWatchVariableSupport","constructor","datasource","query","bind","request","queryObj","targets","execute","pipe","data","queryType","Regions","handleRegionsQuery","Namespaces","handleNamespacesQuery","Metrics","handleMetricsQuery","DimensionKeys","handleDimensionKeysQuery","DimensionValues","handleDimensionValuesQuery","EBSVolumeIDs","handleEbsVolumeIdsQuery","EC2InstanceAttributes","handleEc2InstanceAttributeQuery","ResourceArns","handleResourceARNsQuery","Statistics","handleStatisticsQuery","LogGroups","handleLogGroupsQuery","error","console","region","logGroupPrefix","logGroups","describeLogGroups","logGroupNamePrefix","s","text","value","expandable","regions","getRegions","label","namespaces","getNamespaces","namespace","metrics","getMetrics","keys","getDimensionKeys","dimensionKey","metricName","dimensionFilters","getDimensionValues","instanceID","ids","getEbsVolumeIds","attributeName","ec2Filters","values","getEc2InstanceAttribute","resourceType","tags","getResourceARNs","standardStatistics"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/variables.ts"],"sourcesContent":["import { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport { VariableQueryEditor } from './components/VariableQueryEditor/VariableQueryEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { migrateVariableQuery } from './migrations/variableQueryMigrations';\nimport { VariableQuery, VariableQueryType } from './types';\n\nexport class CloudWatchVariableSupport extends CustomVariableSupport<CloudWatchDatasource, VariableQuery> {\n  private readonly datasource: CloudWatchDatasource;\n\n  constructor(datasource: CloudWatchDatasource) {\n    super();\n    this.datasource = datasource;\n    this.query = this.query.bind(this);\n  }\n\n  editor = VariableQueryEditor;\n\n  query(request: DataQueryRequest<VariableQuery>): Observable<DataQueryResponse> {\n    const queryObj = migrateVariableQuery(request.targets[0]);\n    return from(this.execute(queryObj)).pipe(map((data) => ({ data })));\n  }\n\n  async execute(query: VariableQuery) {\n    try {\n      switch (query.queryType) {\n        case VariableQueryType.Regions:\n          return this.handleRegionsQuery();\n        case VariableQueryType.Namespaces:\n          return this.handleNamespacesQuery();\n        case VariableQueryType.Metrics:\n          return this.handleMetricsQuery(query);\n        case VariableQueryType.DimensionKeys:\n          return this.handleDimensionKeysQuery(query);\n        case VariableQueryType.DimensionValues:\n          return this.handleDimensionValuesQuery(query);\n        case VariableQueryType.EBSVolumeIDs:\n          return this.handleEbsVolumeIdsQuery(query);\n        case VariableQueryType.EC2InstanceAttributes:\n          return this.handleEc2InstanceAttributeQuery(query);\n        case VariableQueryType.ResourceArns:\n          return this.handleResourceARNsQuery(query);\n        case VariableQueryType.Statistics:\n          return this.handleStatisticsQuery();\n        case VariableQueryType.LogGroups:\n          return this.handleLogGroupsQuery(query);\n      }\n    } catch (error) {\n      console.error(`Could not run CloudWatchMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleLogGroupsQuery({ region, logGroupPrefix }: VariableQuery) {\n    const logGroups = await this.datasource.describeLogGroups({ region, logGroupNamePrefix: logGroupPrefix });\n    return logGroups.map((s) => ({\n      text: s,\n      value: s,\n      expandable: true,\n    }));\n  }\n\n  async handleRegionsQuery() {\n    const regions = await this.datasource.getRegions();\n    return regions.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleNamespacesQuery() {\n    const namespaces = await this.datasource.getNamespaces();\n    return namespaces.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricsQuery({ namespace, region }: VariableQuery) {\n    const metrics = await this.datasource.getMetrics(namespace, region);\n    return metrics.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleDimensionKeysQuery({ namespace, region }: VariableQuery) {\n    const keys = await this.datasource.getDimensionKeys(namespace, region);\n    return keys.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleDimensionValuesQuery({ namespace, region, dimensionKey, metricName, dimensionFilters }: VariableQuery) {\n    if (!dimensionKey || !metricName) {\n      return [];\n    }\n    const keys = await this.datasource.getDimensionValues(\n      region,\n      namespace,\n      metricName,\n      dimensionKey,\n      dimensionFilters ?? {}\n    );\n    return keys.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleEbsVolumeIdsQuery({ region, instanceID }: VariableQuery) {\n    if (!instanceID) {\n      return [];\n    }\n    const ids = await this.datasource.getEbsVolumeIds(region, instanceID);\n    return ids.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleEc2InstanceAttributeQuery({ region, attributeName, ec2Filters }: VariableQuery) {\n    if (!attributeName) {\n      return [];\n    }\n    const values = await this.datasource.getEc2InstanceAttribute(region, attributeName, ec2Filters ?? {});\n    return values.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleResourceARNsQuery({ region, resourceType, tags }: VariableQuery) {\n    if (!resourceType) {\n      return [];\n    }\n    const keys = await this.datasource.getResourceARNs(region, resourceType, tags ?? {});\n    return keys.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleStatisticsQuery() {\n    return this.datasource.standardStatistics.map((s: string) => ({\n      text: s,\n      value: s,\n      expandable: true,\n    }));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}