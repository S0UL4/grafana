{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { AppEvents, DataSourceApi } from '@grafana/data';\nimport { getDataSourceSrv as getDataSourceService, getTemplateSrv, getLegacyAngularInjector, getBackendSrv } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport appEvents from 'app/core/app_events';\nimport config from 'app/core/config';\nimport { dataSource as expressionDatasource, ExpressionDatasourceUID, instanceSettings as expressionInstanceSettings } from 'app/features/expressions/ExpressionDatasource';\nimport { importDataSourcePlugin } from './plugin_loader';\nexport class DatasourceSrv {\n  // UID\n  // actually UID\n  constructor(templateSrv = getTemplateSrv()) {\n    _defineProperty(this, \"datasources\", {});\n\n    _defineProperty(this, \"settingsMapByName\", {});\n\n    _defineProperty(this, \"settingsMapByUid\", {});\n\n    _defineProperty(this, \"settingsMapById\", {});\n\n    _defineProperty(this, \"defaultName\", '');\n\n    this.templateSrv = templateSrv;\n  }\n\n  init(settingsMapByName, defaultName) {\n    this.datasources = {};\n    this.settingsMapByUid = {};\n    this.settingsMapByName = settingsMapByName;\n    this.defaultName = defaultName;\n\n    for (const dsSettings of Object.values(settingsMapByName)) {\n      if (!dsSettings.uid) {\n        dsSettings.uid = dsSettings.name; // -- Grafana --, -- Mixed etc\n      }\n\n      this.settingsMapByUid[dsSettings.uid] = dsSettings;\n      this.settingsMapById[dsSettings.id] = dsSettings;\n    } // Preload expressions\n\n\n    this.datasources[ExpressionDatasourceRef.type] = expressionDatasource;\n    this.datasources[ExpressionDatasourceUID] = expressionDatasource;\n    this.settingsMapByUid[ExpressionDatasourceRef.uid] = expressionInstanceSettings;\n    this.settingsMapByUid[ExpressionDatasourceUID] = expressionInstanceSettings;\n  }\n\n  getDataSourceSettingsByUid(uid) {\n    return this.settingsMapByUid[uid];\n  }\n\n  getInstanceSettings(ref, scopedVars) {\n    var _this$settingsMapByUi3;\n\n    const isstring = typeof ref === 'string';\n    let nameOrUid = isstring ? ref : ref === null || ref === void 0 ? void 0 : ref.uid;\n\n    if (nameOrUid === 'default' || nameOrUid === null || nameOrUid === undefined) {\n      var _this$settingsMapByUi;\n\n      if (!isstring && ref) {\n        const type = ref === null || ref === void 0 ? void 0 : ref.type;\n\n        if (type === ExpressionDatasourceRef.type) {\n          return expressionDatasource.instanceSettings;\n        } else if (type) {\n          console.log('FIND Default instance for datasource type?', ref);\n        }\n      }\n\n      return (_this$settingsMapByUi = this.settingsMapByUid[this.defaultName]) !== null && _this$settingsMapByUi !== void 0 ? _this$settingsMapByUi : this.settingsMapByName[this.defaultName];\n    } // Complex logic to support template variable data source names\n    // For this we just pick the current or first data source in the variable\n\n\n    if (nameOrUid[0] === '$') {\n      const interpolatedName = this.templateSrv.replace(nameOrUid, scopedVars, variableInterpolation);\n      let dsSettings;\n\n      if (interpolatedName === 'default') {\n        dsSettings = this.settingsMapByName[this.defaultName];\n      } else {\n        var _this$settingsMapByUi2;\n\n        dsSettings = (_this$settingsMapByUi2 = this.settingsMapByUid[interpolatedName]) !== null && _this$settingsMapByUi2 !== void 0 ? _this$settingsMapByUi2 : this.settingsMapByName[interpolatedName];\n      }\n\n      if (!dsSettings) {\n        return undefined;\n      } // Return an instance with un-interpolated values for name and uid\n\n\n      return Object.assign({}, dsSettings, {\n        isDefault: false,\n        name: nameOrUid,\n        uid: nameOrUid,\n        rawRef: {\n          type: dsSettings.type,\n          uid: dsSettings.uid\n        }\n      });\n    }\n\n    return (_this$settingsMapByUi3 = this.settingsMapByUid[nameOrUid]) !== null && _this$settingsMapByUi3 !== void 0 ? _this$settingsMapByUi3 : this.settingsMapByName[nameOrUid];\n  }\n\n  get(ref, scopedVars) {\n    let nameOrUid = typeof ref === 'string' ? ref : ref === null || ref === void 0 ? void 0 : ref.uid;\n\n    if (!nameOrUid) {\n      return this.get(this.defaultName);\n    } // Check if nameOrUid matches a uid and then get the name\n\n\n    const byName = this.settingsMapByName[nameOrUid];\n\n    if (byName) {\n      nameOrUid = byName.uid;\n    } // This check is duplicated below, this is here mainly as performance optimization to skip interpolation\n\n\n    if (this.datasources[nameOrUid]) {\n      return Promise.resolve(this.datasources[nameOrUid]);\n    } // Interpolation here is to support template variable in data source selection\n\n\n    nameOrUid = this.templateSrv.replace(nameOrUid, scopedVars, variableInterpolation);\n\n    if (nameOrUid === 'default' && this.defaultName !== 'default') {\n      return this.get(this.defaultName);\n    }\n\n    if (this.datasources[nameOrUid]) {\n      return Promise.resolve(this.datasources[nameOrUid]);\n    }\n\n    return this.loadDatasource(nameOrUid);\n  }\n\n  async loadDatasource(key) {\n    var _ref, _this$settingsMapByUi4;\n\n    if (this.datasources[key]) {\n      return Promise.resolve(this.datasources[key]);\n    } // find the metadata\n\n\n    const instanceSettings = (_ref = (_this$settingsMapByUi4 = this.settingsMapByUid[key]) !== null && _this$settingsMapByUi4 !== void 0 ? _this$settingsMapByUi4 : this.settingsMapByName[key]) !== null && _ref !== void 0 ? _ref : this.settingsMapById[key];\n\n    if (!instanceSettings) {\n      return Promise.reject({\n        message: `Datasource ${key} was not found`\n      });\n    }\n\n    try {\n      const dsPlugin = await importDataSourcePlugin(instanceSettings.meta); // check if its in cache now\n\n      if (this.datasources[key]) {\n        return this.datasources[key];\n      } // If there is only one constructor argument it is instanceSettings\n\n\n      const useAngular = dsPlugin.DataSourceClass.length !== 1;\n      let instance;\n\n      if (useAngular) {\n        instance = getLegacyAngularInjector().instantiate(dsPlugin.DataSourceClass, {\n          instanceSettings\n        });\n      } else {\n        instance = new dsPlugin.DataSourceClass(instanceSettings);\n      }\n\n      instance.components = dsPlugin.components; // Some old plugins does not extend DataSourceApi so we need to manually patch them\n\n      if (!(instance instanceof DataSourceApi)) {\n        const anyInstance = instance;\n        anyInstance.name = instanceSettings.name;\n        anyInstance.id = instanceSettings.id;\n        anyInstance.type = instanceSettings.type;\n        anyInstance.meta = instanceSettings.meta;\n        anyInstance.uid = instanceSettings.uid;\n        instance.getRef = DataSourceApi.prototype.getRef;\n      } // store in instance cache\n\n\n      this.datasources[key] = instance;\n      this.datasources[instance.uid] = instance;\n      return instance;\n    } catch (err) {\n      if (err instanceof Error) {\n        appEvents.emit(AppEvents.alertError, [instanceSettings.name + ' plugin failed', err.toString()]);\n      }\n\n      return Promise.reject({\n        message: `Datasource: ${key} was not found`\n      });\n    }\n  }\n\n  getAll() {\n    return Object.values(this.settingsMapByName);\n  }\n\n  getList(filters = {}) {\n    const base = Object.values(this.settingsMapByName).filter(x => {\n      if (x.meta.id === 'grafana' || x.meta.id === 'mixed' || x.meta.id === 'dashboard') {\n        return false;\n      }\n\n      if (filters.metrics && !x.meta.metrics) {\n        return false;\n      }\n\n      if (filters.tracing && !x.meta.tracing) {\n        return false;\n      }\n\n      if (filters.logs && x.meta.category !== 'logging' && !x.meta.logs) {\n        return false;\n      }\n\n      if (filters.annotations && !x.meta.annotations) {\n        return false;\n      }\n\n      if (filters.alerting && !x.meta.alerting) {\n        return false;\n      }\n\n      if (filters.pluginId && x.meta.id !== filters.pluginId) {\n        return false;\n      }\n\n      if (filters.filter && !filters.filter(x)) {\n        return false;\n      }\n\n      if (filters.type && (Array.isArray(filters.type) ? !filters.type.includes(x.type) : filters.type !== x.type)) {\n        return false;\n      }\n\n      if (!filters.all && x.meta.metrics !== true && x.meta.annotations !== true && x.meta.tracing !== true && x.meta.logs !== true && x.meta.alerting !== true) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (filters.variables) {\n      for (const variable of this.templateSrv.getVariables().filter(variable => variable.type === 'datasource')) {\n        const dsVar = variable;\n        const first = dsVar.current.value === 'default' ? this.defaultName : dsVar.current.value;\n        const dsName = first;\n        const dsSettings = this.settingsMapByName[dsName];\n\n        if (dsSettings) {\n          const key = `$\\{${variable.name}\\}`;\n          base.push(Object.assign({}, dsSettings, {\n            name: key,\n            uid: key\n          }));\n        }\n      }\n    }\n\n    const sorted = base.sort((a, b) => {\n      if (a.name.toLowerCase() > b.name.toLowerCase()) {\n        return 1;\n      }\n\n      if (a.name.toLowerCase() < b.name.toLowerCase()) {\n        return -1;\n      }\n\n      return 0;\n    });\n\n    if (!filters.pluginId && !filters.alerting) {\n      if (filters.mixed) {\n        const mixedInstanceSettings = this.getInstanceSettings('-- Mixed --');\n\n        if (mixedInstanceSettings) {\n          base.push(mixedInstanceSettings);\n        }\n      }\n\n      if (filters.dashboard) {\n        const dashboardInstanceSettings = this.getInstanceSettings('-- Dashboard --');\n\n        if (dashboardInstanceSettings) {\n          base.push(dashboardInstanceSettings);\n        }\n      }\n\n      if (!filters.tracing) {\n        const grafanaInstanceSettings = this.getInstanceSettings('-- Grafana --');\n\n        if (grafanaInstanceSettings) {\n          base.push(grafanaInstanceSettings);\n        }\n      }\n    }\n\n    return sorted;\n  }\n  /**\n   * @deprecated use getList\n   * */\n\n\n  getExternal() {\n    return this.getList();\n  }\n  /**\n   * @deprecated use getList\n   * */\n\n\n  getAnnotationSources() {\n    return this.getList({\n      annotations: true,\n      variables: true\n    }).map(x => {\n      return {\n        name: x.name,\n        value: x.name,\n        meta: x.meta\n      };\n    });\n  }\n  /**\n   * @deprecated use getList\n   * */\n\n\n  getMetricSources(options) {\n    return this.getList({\n      metrics: true,\n      variables: !(options !== null && options !== void 0 && options.skipVariables)\n    }).map(x => {\n      return {\n        name: x.name,\n        value: x.name,\n        meta: x.meta\n      };\n    });\n  }\n\n  async reload() {\n    const settings = await getBackendSrv().get('/api/frontend/settings');\n    config.datasources = settings.datasources;\n    config.defaultDatasource = settings.defaultDatasource;\n    this.init(settings.datasources, settings.defaultDatasource);\n  }\n\n}\nexport function variableInterpolation(value) {\n  if (Array.isArray(value)) {\n    return value[0];\n  }\n\n  return value;\n}\nexport const getDatasourceSrv = () => {\n  return getDataSourceService();\n};","map":{"version":3,"names":["AppEvents","DataSourceApi","getDataSourceSrv","getDataSourceService","getTemplateSrv","getLegacyAngularInjector","getBackendSrv","ExpressionDatasourceRef","appEvents","config","dataSource","expressionDatasource","ExpressionDatasourceUID","instanceSettings","expressionInstanceSettings","importDataSourcePlugin","DatasourceSrv","constructor","templateSrv","init","settingsMapByName","defaultName","datasources","settingsMapByUid","dsSettings","Object","values","uid","name","settingsMapById","id","type","getDataSourceSettingsByUid","getInstanceSettings","ref","scopedVars","isstring","nameOrUid","undefined","console","log","interpolatedName","replace","variableInterpolation","isDefault","rawRef","get","byName","Promise","resolve","loadDatasource","key","reject","message","dsPlugin","meta","useAngular","DataSourceClass","length","instance","instantiate","components","anyInstance","getRef","prototype","err","Error","emit","alertError","toString","getAll","getList","filters","base","filter","x","metrics","tracing","logs","category","annotations","alerting","pluginId","Array","isArray","includes","all","variables","variable","getVariables","dsVar","first","current","value","dsName","push","sorted","sort","a","b","toLowerCase","mixed","mixedInstanceSettings","dashboard","dashboardInstanceSettings","grafanaInstanceSettings","getExternal","getAnnotationSources","map","getMetricSources","options","skipVariables","reload","settings","defaultDatasource","getDatasourceSrv"],"sources":["/home/soula/grafana/public/app/features/plugins/datasource_srv.ts"],"sourcesContent":["import {\n  AppEvents,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceRef,\n  DataSourceSelectItem,\n  ScopedVars,\n} from '@grafana/data';\nimport {\n  GetDataSourceListFilters,\n  DataSourceSrv as DataSourceService,\n  getDataSourceSrv as getDataSourceService,\n  TemplateSrv,\n  getTemplateSrv,\n  getLegacyAngularInjector,\n  getBackendSrv,\n} from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport appEvents from 'app/core/app_events';\nimport config from 'app/core/config';\nimport {\n  dataSource as expressionDatasource,\n  ExpressionDatasourceUID,\n  instanceSettings as expressionInstanceSettings,\n} from 'app/features/expressions/ExpressionDatasource';\n\nimport { DataSourceVariableModel } from '../variables/types';\n\nimport { importDataSourcePlugin } from './plugin_loader';\n\nexport class DatasourceSrv implements DataSourceService {\n  private datasources: Record<string, DataSourceApi> = {}; // UID\n  private settingsMapByName: Record<string, DataSourceInstanceSettings> = {};\n  private settingsMapByUid: Record<string, DataSourceInstanceSettings> = {};\n  private settingsMapById: Record<string, DataSourceInstanceSettings> = {};\n  private defaultName = ''; // actually UID\n\n  constructor(private templateSrv: TemplateSrv = getTemplateSrv()) {}\n\n  init(settingsMapByName: Record<string, DataSourceInstanceSettings>, defaultName: string) {\n    this.datasources = {};\n    this.settingsMapByUid = {};\n    this.settingsMapByName = settingsMapByName;\n    this.defaultName = defaultName;\n\n    for (const dsSettings of Object.values(settingsMapByName)) {\n      if (!dsSettings.uid) {\n        dsSettings.uid = dsSettings.name; // -- Grafana --, -- Mixed etc\n      }\n\n      this.settingsMapByUid[dsSettings.uid] = dsSettings;\n      this.settingsMapById[dsSettings.id] = dsSettings;\n    }\n\n    // Preload expressions\n    this.datasources[ExpressionDatasourceRef.type] = expressionDatasource as any;\n    this.datasources[ExpressionDatasourceUID] = expressionDatasource as any;\n    this.settingsMapByUid[ExpressionDatasourceRef.uid] = expressionInstanceSettings;\n    this.settingsMapByUid[ExpressionDatasourceUID] = expressionInstanceSettings;\n  }\n\n  getDataSourceSettingsByUid(uid: string): DataSourceInstanceSettings | undefined {\n    return this.settingsMapByUid[uid];\n  }\n\n  getInstanceSettings(\n    ref: string | null | undefined | DataSourceRef,\n    scopedVars?: ScopedVars\n  ): DataSourceInstanceSettings | undefined {\n    const isstring = typeof ref === 'string';\n    let nameOrUid = isstring ? (ref as string) : ((ref as any)?.uid as string | undefined);\n\n    if (nameOrUid === 'default' || nameOrUid === null || nameOrUid === undefined) {\n      if (!isstring && ref) {\n        const type = (ref as any)?.type as string;\n        if (type === ExpressionDatasourceRef.type) {\n          return expressionDatasource.instanceSettings;\n        } else if (type) {\n          console.log('FIND Default instance for datasource type?', ref);\n        }\n      }\n      return this.settingsMapByUid[this.defaultName] ?? this.settingsMapByName[this.defaultName];\n    }\n\n    // Complex logic to support template variable data source names\n    // For this we just pick the current or first data source in the variable\n    if (nameOrUid[0] === '$') {\n      const interpolatedName = this.templateSrv.replace(nameOrUid, scopedVars, variableInterpolation);\n\n      let dsSettings;\n\n      if (interpolatedName === 'default') {\n        dsSettings = this.settingsMapByName[this.defaultName];\n      } else {\n        dsSettings = this.settingsMapByUid[interpolatedName] ?? this.settingsMapByName[interpolatedName];\n      }\n\n      if (!dsSettings) {\n        return undefined;\n      }\n\n      // Return an instance with un-interpolated values for name and uid\n      return {\n        ...dsSettings,\n        isDefault: false,\n        name: nameOrUid,\n        uid: nameOrUid,\n        rawRef: { type: dsSettings.type, uid: dsSettings.uid },\n      };\n    }\n\n    return this.settingsMapByUid[nameOrUid] ?? this.settingsMapByName[nameOrUid];\n  }\n\n  get(ref?: string | DataSourceRef | null, scopedVars?: ScopedVars): Promise<DataSourceApi> {\n    let nameOrUid = typeof ref === 'string' ? (ref as string) : ((ref as any)?.uid as string | undefined);\n    if (!nameOrUid) {\n      return this.get(this.defaultName);\n    }\n\n    // Check if nameOrUid matches a uid and then get the name\n    const byName = this.settingsMapByName[nameOrUid];\n    if (byName) {\n      nameOrUid = byName.uid;\n    }\n\n    // This check is duplicated below, this is here mainly as performance optimization to skip interpolation\n    if (this.datasources[nameOrUid]) {\n      return Promise.resolve(this.datasources[nameOrUid]);\n    }\n\n    // Interpolation here is to support template variable in data source selection\n    nameOrUid = this.templateSrv.replace(nameOrUid, scopedVars, variableInterpolation);\n\n    if (nameOrUid === 'default' && this.defaultName !== 'default') {\n      return this.get(this.defaultName);\n    }\n\n    if (this.datasources[nameOrUid]) {\n      return Promise.resolve(this.datasources[nameOrUid]);\n    }\n\n    return this.loadDatasource(nameOrUid);\n  }\n\n  async loadDatasource(key: string): Promise<DataSourceApi<any, any>> {\n    if (this.datasources[key]) {\n      return Promise.resolve(this.datasources[key]);\n    }\n\n    // find the metadata\n    const instanceSettings = this.settingsMapByUid[key] ?? this.settingsMapByName[key] ?? this.settingsMapById[key];\n    if (!instanceSettings) {\n      return Promise.reject({ message: `Datasource ${key} was not found` });\n    }\n\n    try {\n      const dsPlugin = await importDataSourcePlugin(instanceSettings.meta);\n      // check if its in cache now\n      if (this.datasources[key]) {\n        return this.datasources[key];\n      }\n\n      // If there is only one constructor argument it is instanceSettings\n      const useAngular = dsPlugin.DataSourceClass.length !== 1;\n      let instance: DataSourceApi<any, any>;\n\n      if (useAngular) {\n        instance = getLegacyAngularInjector().instantiate(dsPlugin.DataSourceClass, {\n          instanceSettings,\n        });\n      } else {\n        instance = new dsPlugin.DataSourceClass(instanceSettings);\n      }\n\n      instance.components = dsPlugin.components;\n\n      // Some old plugins does not extend DataSourceApi so we need to manually patch them\n      if (!(instance instanceof DataSourceApi)) {\n        const anyInstance = instance as any;\n        anyInstance.name = instanceSettings.name;\n        anyInstance.id = instanceSettings.id;\n        anyInstance.type = instanceSettings.type;\n        anyInstance.meta = instanceSettings.meta;\n        anyInstance.uid = instanceSettings.uid;\n        (instance as any).getRef = DataSourceApi.prototype.getRef;\n      }\n\n      // store in instance cache\n      this.datasources[key] = instance;\n      this.datasources[instance.uid] = instance;\n      return instance;\n    } catch (err) {\n      if (err instanceof Error) {\n        appEvents.emit(AppEvents.alertError, [instanceSettings.name + ' plugin failed', err.toString()]);\n      }\n      return Promise.reject({ message: `Datasource: ${key} was not found` });\n    }\n  }\n\n  getAll(): DataSourceInstanceSettings[] {\n    return Object.values(this.settingsMapByName);\n  }\n\n  getList(filters: GetDataSourceListFilters = {}): DataSourceInstanceSettings[] {\n    const base = Object.values(this.settingsMapByName).filter((x) => {\n      if (x.meta.id === 'grafana' || x.meta.id === 'mixed' || x.meta.id === 'dashboard') {\n        return false;\n      }\n      if (filters.metrics && !x.meta.metrics) {\n        return false;\n      }\n      if (filters.tracing && !x.meta.tracing) {\n        return false;\n      }\n      if (filters.logs && x.meta.category !== 'logging' && !x.meta.logs) {\n        return false;\n      }\n      if (filters.annotations && !x.meta.annotations) {\n        return false;\n      }\n      if (filters.alerting && !x.meta.alerting) {\n        return false;\n      }\n      if (filters.pluginId && x.meta.id !== filters.pluginId) {\n        return false;\n      }\n      if (filters.filter && !filters.filter(x)) {\n        return false;\n      }\n      if (filters.type && (Array.isArray(filters.type) ? !filters.type.includes(x.type) : filters.type !== x.type)) {\n        return false;\n      }\n      if (\n        !filters.all &&\n        x.meta.metrics !== true &&\n        x.meta.annotations !== true &&\n        x.meta.tracing !== true &&\n        x.meta.logs !== true &&\n        x.meta.alerting !== true\n      ) {\n        return false;\n      }\n      return true;\n    });\n\n    if (filters.variables) {\n      for (const variable of this.templateSrv.getVariables().filter((variable) => variable.type === 'datasource')) {\n        const dsVar = variable as DataSourceVariableModel;\n        const first = dsVar.current.value === 'default' ? this.defaultName : dsVar.current.value;\n        const dsName = first as unknown as string;\n        const dsSettings = this.settingsMapByName[dsName];\n\n        if (dsSettings) {\n          const key = `$\\{${variable.name}\\}`;\n          base.push({\n            ...dsSettings,\n            name: key,\n            uid: key,\n          });\n        }\n      }\n    }\n\n    const sorted = base.sort((a, b) => {\n      if (a.name.toLowerCase() > b.name.toLowerCase()) {\n        return 1;\n      }\n      if (a.name.toLowerCase() < b.name.toLowerCase()) {\n        return -1;\n      }\n      return 0;\n    });\n\n    if (!filters.pluginId && !filters.alerting) {\n      if (filters.mixed) {\n        const mixedInstanceSettings = this.getInstanceSettings('-- Mixed --');\n        if (mixedInstanceSettings) {\n          base.push(mixedInstanceSettings);\n        }\n      }\n\n      if (filters.dashboard) {\n        const dashboardInstanceSettings = this.getInstanceSettings('-- Dashboard --');\n        if (dashboardInstanceSettings) {\n          base.push(dashboardInstanceSettings);\n        }\n      }\n\n      if (!filters.tracing) {\n        const grafanaInstanceSettings = this.getInstanceSettings('-- Grafana --');\n        if (grafanaInstanceSettings) {\n          base.push(grafanaInstanceSettings);\n        }\n      }\n    }\n\n    return sorted;\n  }\n\n  /**\n   * @deprecated use getList\n   * */\n  getExternal(): DataSourceInstanceSettings[] {\n    return this.getList();\n  }\n\n  /**\n   * @deprecated use getList\n   * */\n  getAnnotationSources() {\n    return this.getList({ annotations: true, variables: true }).map((x) => {\n      return {\n        name: x.name,\n        value: x.name,\n        meta: x.meta,\n      };\n    });\n  }\n\n  /**\n   * @deprecated use getList\n   * */\n  getMetricSources(options?: { skipVariables?: boolean }): DataSourceSelectItem[] {\n    return this.getList({ metrics: true, variables: !options?.skipVariables }).map((x) => {\n      return {\n        name: x.name,\n        value: x.name,\n        meta: x.meta,\n      };\n    });\n  }\n\n  async reload() {\n    const settings = await getBackendSrv().get('/api/frontend/settings');\n    config.datasources = settings.datasources;\n    config.defaultDatasource = settings.defaultDatasource;\n    this.init(settings.datasources, settings.defaultDatasource);\n  }\n}\n\nexport function variableInterpolation(value: any[]) {\n  if (Array.isArray(value)) {\n    return value[0];\n  }\n  return value;\n}\n\nexport const getDatasourceSrv = (): DatasourceSrv => {\n  return getDataSourceService() as DatasourceSrv;\n};\n"],"mappings":";;AAAA,SACEA,SADF,EAEEC,aAFF,QAOO,eAPP;AAQA,SAGEC,gBAAgB,IAAIC,oBAHtB,EAKEC,cALF,EAMEC,wBANF,EAOEC,aAPF,QAQO,kBARP;AASA,SAASC,uBAAT,QAAwC,kDAAxC;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SACEC,UAAU,IAAIC,oBADhB,EAEEC,uBAFF,EAGEC,gBAAgB,IAAIC,0BAHtB,QAIO,+CAJP;AAQA,SAASC,sBAAT,QAAuC,iBAAvC;AAEA,OAAO,MAAMC,aAAN,CAAiD;EACG;EAI/B;EAE1BC,WAAW,CAASC,WAAwB,GAAGd,cAAc,EAAlD,EAAsD;IAAA,qCANZ,EAMY;;IAAA,2CALO,EAKP;;IAAA,0CAJM,EAIN;;IAAA,yCAHK,EAGL;;IAAA,qCAF3C,EAE2C;;IAAA,KAA7Cc,WAA6C,GAA7CA,WAA6C;EAAE;;EAEnEC,IAAI,CAACC,iBAAD,EAAgEC,WAAhE,EAAqF;IACvF,KAAKC,WAAL,GAAmB,EAAnB;IACA,KAAKC,gBAAL,GAAwB,EAAxB;IACA,KAAKH,iBAAL,GAAyBA,iBAAzB;IACA,KAAKC,WAAL,GAAmBA,WAAnB;;IAEA,KAAK,MAAMG,UAAX,IAAyBC,MAAM,CAACC,MAAP,CAAcN,iBAAd,CAAzB,EAA2D;MACzD,IAAI,CAACI,UAAU,CAACG,GAAhB,EAAqB;QACnBH,UAAU,CAACG,GAAX,GAAiBH,UAAU,CAACI,IAA5B,CADmB,CACe;MACnC;;MAED,KAAKL,gBAAL,CAAsBC,UAAU,CAACG,GAAjC,IAAwCH,UAAxC;MACA,KAAKK,eAAL,CAAqBL,UAAU,CAACM,EAAhC,IAAsCN,UAAtC;IACD,CAbsF,CAevF;;;IACA,KAAKF,WAAL,CAAiBf,uBAAuB,CAACwB,IAAzC,IAAiDpB,oBAAjD;IACA,KAAKW,WAAL,CAAiBV,uBAAjB,IAA4CD,oBAA5C;IACA,KAAKY,gBAAL,CAAsBhB,uBAAuB,CAACoB,GAA9C,IAAqDb,0BAArD;IACA,KAAKS,gBAAL,CAAsBX,uBAAtB,IAAiDE,0BAAjD;EACD;;EAEDkB,0BAA0B,CAACL,GAAD,EAAsD;IAC9E,OAAO,KAAKJ,gBAAL,CAAsBI,GAAtB,CAAP;EACD;;EAEDM,mBAAmB,CACjBC,GADiB,EAEjBC,UAFiB,EAGuB;IAAA;;IACxC,MAAMC,QAAQ,GAAG,OAAOF,GAAP,KAAe,QAAhC;IACA,IAAIG,SAAS,GAAGD,QAAQ,GAAIF,GAAJ,GAAuBA,GAAvB,aAAuBA,GAAvB,uBAAuBA,GAAD,CAAcP,GAA5D;;IAEA,IAAIU,SAAS,KAAK,SAAd,IAA2BA,SAAS,KAAK,IAAzC,IAAiDA,SAAS,KAAKC,SAAnE,EAA8E;MAAA;;MAC5E,IAAI,CAACF,QAAD,IAAaF,GAAjB,EAAsB;QACpB,MAAMH,IAAI,GAAIG,GAAJ,aAAIA,GAAJ,uBAAIA,GAAD,CAAcH,IAA3B;;QACA,IAAIA,IAAI,KAAKxB,uBAAuB,CAACwB,IAArC,EAA2C;UACzC,OAAOpB,oBAAoB,CAACE,gBAA5B;QACD,CAFD,MAEO,IAAIkB,IAAJ,EAAU;UACfQ,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DN,GAA1D;QACD;MACF;;MACD,gCAAO,KAAKX,gBAAL,CAAsB,KAAKF,WAA3B,CAAP,yEAAkD,KAAKD,iBAAL,CAAuB,KAAKC,WAA5B,CAAlD;IACD,CAduC,CAgBxC;IACA;;;IACA,IAAIgB,SAAS,CAAC,CAAD,CAAT,KAAiB,GAArB,EAA0B;MACxB,MAAMI,gBAAgB,GAAG,KAAKvB,WAAL,CAAiBwB,OAAjB,CAAyBL,SAAzB,EAAoCF,UAApC,EAAgDQ,qBAAhD,CAAzB;MAEA,IAAInB,UAAJ;;MAEA,IAAIiB,gBAAgB,KAAK,SAAzB,EAAoC;QAClCjB,UAAU,GAAG,KAAKJ,iBAAL,CAAuB,KAAKC,WAA5B,CAAb;MACD,CAFD,MAEO;QAAA;;QACLG,UAAU,6BAAG,KAAKD,gBAAL,CAAsBkB,gBAAtB,CAAH,2EAA8C,KAAKrB,iBAAL,CAAuBqB,gBAAvB,CAAxD;MACD;;MAED,IAAI,CAACjB,UAAL,EAAiB;QACf,OAAOc,SAAP;MACD,CAbuB,CAexB;;;MACA,yBACKd,UADL;QAEEoB,SAAS,EAAE,KAFb;QAGEhB,IAAI,EAAES,SAHR;QAIEV,GAAG,EAAEU,SAJP;QAKEQ,MAAM,EAAE;UAAEd,IAAI,EAAEP,UAAU,CAACO,IAAnB;UAAyBJ,GAAG,EAAEH,UAAU,CAACG;QAAzC;MALV;IAOD;;IAED,iCAAO,KAAKJ,gBAAL,CAAsBc,SAAtB,CAAP,2EAA2C,KAAKjB,iBAAL,CAAuBiB,SAAvB,CAA3C;EACD;;EAEDS,GAAG,CAACZ,GAAD,EAAsCC,UAAtC,EAAuF;IACxF,IAAIE,SAAS,GAAG,OAAOH,GAAP,KAAe,QAAf,GAA2BA,GAA3B,GAA8CA,GAA9C,aAA8CA,GAA9C,uBAA8CA,GAAD,CAAcP,GAA3E;;IACA,IAAI,CAACU,SAAL,EAAgB;MACd,OAAO,KAAKS,GAAL,CAAS,KAAKzB,WAAd,CAAP;IACD,CAJuF,CAMxF;;;IACA,MAAM0B,MAAM,GAAG,KAAK3B,iBAAL,CAAuBiB,SAAvB,CAAf;;IACA,IAAIU,MAAJ,EAAY;MACVV,SAAS,GAAGU,MAAM,CAACpB,GAAnB;IACD,CAVuF,CAYxF;;;IACA,IAAI,KAAKL,WAAL,CAAiBe,SAAjB,CAAJ,EAAiC;MAC/B,OAAOW,OAAO,CAACC,OAAR,CAAgB,KAAK3B,WAAL,CAAiBe,SAAjB,CAAhB,CAAP;IACD,CAfuF,CAiBxF;;;IACAA,SAAS,GAAG,KAAKnB,WAAL,CAAiBwB,OAAjB,CAAyBL,SAAzB,EAAoCF,UAApC,EAAgDQ,qBAAhD,CAAZ;;IAEA,IAAIN,SAAS,KAAK,SAAd,IAA2B,KAAKhB,WAAL,KAAqB,SAApD,EAA+D;MAC7D,OAAO,KAAKyB,GAAL,CAAS,KAAKzB,WAAd,CAAP;IACD;;IAED,IAAI,KAAKC,WAAL,CAAiBe,SAAjB,CAAJ,EAAiC;MAC/B,OAAOW,OAAO,CAACC,OAAR,CAAgB,KAAK3B,WAAL,CAAiBe,SAAjB,CAAhB,CAAP;IACD;;IAED,OAAO,KAAKa,cAAL,CAAoBb,SAApB,CAAP;EACD;;EAEmB,MAAda,cAAc,CAACC,GAAD,EAAgD;IAAA;;IAClE,IAAI,KAAK7B,WAAL,CAAiB6B,GAAjB,CAAJ,EAA2B;MACzB,OAAOH,OAAO,CAACC,OAAR,CAAgB,KAAK3B,WAAL,CAAiB6B,GAAjB,CAAhB,CAAP;IACD,CAHiE,CAKlE;;;IACA,MAAMtC,gBAAgB,qCAAG,KAAKU,gBAAL,CAAsB4B,GAAtB,CAAH,2EAAiC,KAAK/B,iBAAL,CAAuB+B,GAAvB,CAAjC,uCAAgE,KAAKtB,eAAL,CAAqBsB,GAArB,CAAtF;;IACA,IAAI,CAACtC,gBAAL,EAAuB;MACrB,OAAOmC,OAAO,CAACI,MAAR,CAAe;QAAEC,OAAO,EAAG,cAAaF,GAAI;MAA7B,CAAf,CAAP;IACD;;IAED,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMvC,sBAAsB,CAACF,gBAAgB,CAAC0C,IAAlB,CAA7C,CADE,CAEF;;MACA,IAAI,KAAKjC,WAAL,CAAiB6B,GAAjB,CAAJ,EAA2B;QACzB,OAAO,KAAK7B,WAAL,CAAiB6B,GAAjB,CAAP;MACD,CALC,CAOF;;;MACA,MAAMK,UAAU,GAAGF,QAAQ,CAACG,eAAT,CAAyBC,MAAzB,KAAoC,CAAvD;MACA,IAAIC,QAAJ;;MAEA,IAAIH,UAAJ,EAAgB;QACdG,QAAQ,GAAGtD,wBAAwB,GAAGuD,WAA3B,CAAuCN,QAAQ,CAACG,eAAhD,EAAiE;UAC1E5C;QAD0E,CAAjE,CAAX;MAGD,CAJD,MAIO;QACL8C,QAAQ,GAAG,IAAIL,QAAQ,CAACG,eAAb,CAA6B5C,gBAA7B,CAAX;MACD;;MAED8C,QAAQ,CAACE,UAAT,GAAsBP,QAAQ,CAACO,UAA/B,CAnBE,CAqBF;;MACA,IAAI,EAAEF,QAAQ,YAAY1D,aAAtB,CAAJ,EAA0C;QACxC,MAAM6D,WAAW,GAAGH,QAApB;QACAG,WAAW,CAAClC,IAAZ,GAAmBf,gBAAgB,CAACe,IAApC;QACAkC,WAAW,CAAChC,EAAZ,GAAiBjB,gBAAgB,CAACiB,EAAlC;QACAgC,WAAW,CAAC/B,IAAZ,GAAmBlB,gBAAgB,CAACkB,IAApC;QACA+B,WAAW,CAACP,IAAZ,GAAmB1C,gBAAgB,CAAC0C,IAApC;QACAO,WAAW,CAACnC,GAAZ,GAAkBd,gBAAgB,CAACc,GAAnC;QACCgC,QAAD,CAAkBI,MAAlB,GAA2B9D,aAAa,CAAC+D,SAAd,CAAwBD,MAAnD;MACD,CA9BC,CAgCF;;;MACA,KAAKzC,WAAL,CAAiB6B,GAAjB,IAAwBQ,QAAxB;MACA,KAAKrC,WAAL,CAAiBqC,QAAQ,CAAChC,GAA1B,IAAiCgC,QAAjC;MACA,OAAOA,QAAP;IACD,CApCD,CAoCE,OAAOM,GAAP,EAAY;MACZ,IAAIA,GAAG,YAAYC,KAAnB,EAA0B;QACxB1D,SAAS,CAAC2D,IAAV,CAAenE,SAAS,CAACoE,UAAzB,EAAqC,CAACvD,gBAAgB,CAACe,IAAjB,GAAwB,gBAAzB,EAA2CqC,GAAG,CAACI,QAAJ,EAA3C,CAArC;MACD;;MACD,OAAOrB,OAAO,CAACI,MAAR,CAAe;QAAEC,OAAO,EAAG,eAAcF,GAAI;MAA9B,CAAf,CAAP;IACD;EACF;;EAEDmB,MAAM,GAAiC;IACrC,OAAO7C,MAAM,CAACC,MAAP,CAAc,KAAKN,iBAAnB,CAAP;EACD;;EAEDmD,OAAO,CAACC,OAAiC,GAAG,EAArC,EAAuE;IAC5E,MAAMC,IAAI,GAAGhD,MAAM,CAACC,MAAP,CAAc,KAAKN,iBAAnB,EAAsCsD,MAAtC,CAA8CC,CAAD,IAAO;MAC/D,IAAIA,CAAC,CAACpB,IAAF,CAAOzB,EAAP,KAAc,SAAd,IAA2B6C,CAAC,CAACpB,IAAF,CAAOzB,EAAP,KAAc,OAAzC,IAAoD6C,CAAC,CAACpB,IAAF,CAAOzB,EAAP,KAAc,WAAtE,EAAmF;QACjF,OAAO,KAAP;MACD;;MACD,IAAI0C,OAAO,CAACI,OAAR,IAAmB,CAACD,CAAC,CAACpB,IAAF,CAAOqB,OAA/B,EAAwC;QACtC,OAAO,KAAP;MACD;;MACD,IAAIJ,OAAO,CAACK,OAAR,IAAmB,CAACF,CAAC,CAACpB,IAAF,CAAOsB,OAA/B,EAAwC;QACtC,OAAO,KAAP;MACD;;MACD,IAAIL,OAAO,CAACM,IAAR,IAAgBH,CAAC,CAACpB,IAAF,CAAOwB,QAAP,KAAoB,SAApC,IAAiD,CAACJ,CAAC,CAACpB,IAAF,CAAOuB,IAA7D,EAAmE;QACjE,OAAO,KAAP;MACD;;MACD,IAAIN,OAAO,CAACQ,WAAR,IAAuB,CAACL,CAAC,CAACpB,IAAF,CAAOyB,WAAnC,EAAgD;QAC9C,OAAO,KAAP;MACD;;MACD,IAAIR,OAAO,CAACS,QAAR,IAAoB,CAACN,CAAC,CAACpB,IAAF,CAAO0B,QAAhC,EAA0C;QACxC,OAAO,KAAP;MACD;;MACD,IAAIT,OAAO,CAACU,QAAR,IAAoBP,CAAC,CAACpB,IAAF,CAAOzB,EAAP,KAAc0C,OAAO,CAACU,QAA9C,EAAwD;QACtD,OAAO,KAAP;MACD;;MACD,IAAIV,OAAO,CAACE,MAAR,IAAkB,CAACF,OAAO,CAACE,MAAR,CAAeC,CAAf,CAAvB,EAA0C;QACxC,OAAO,KAAP;MACD;;MACD,IAAIH,OAAO,CAACzC,IAAR,KAAiBoD,KAAK,CAACC,OAAN,CAAcZ,OAAO,CAACzC,IAAtB,IAA8B,CAACyC,OAAO,CAACzC,IAAR,CAAasD,QAAb,CAAsBV,CAAC,CAAC5C,IAAxB,CAA/B,GAA+DyC,OAAO,CAACzC,IAAR,KAAiB4C,CAAC,CAAC5C,IAAnG,CAAJ,EAA8G;QAC5G,OAAO,KAAP;MACD;;MACD,IACE,CAACyC,OAAO,CAACc,GAAT,IACAX,CAAC,CAACpB,IAAF,CAAOqB,OAAP,KAAmB,IADnB,IAEAD,CAAC,CAACpB,IAAF,CAAOyB,WAAP,KAAuB,IAFvB,IAGAL,CAAC,CAACpB,IAAF,CAAOsB,OAAP,KAAmB,IAHnB,IAIAF,CAAC,CAACpB,IAAF,CAAOuB,IAAP,KAAgB,IAJhB,IAKAH,CAAC,CAACpB,IAAF,CAAO0B,QAAP,KAAoB,IANtB,EAOE;QACA,OAAO,KAAP;MACD;;MACD,OAAO,IAAP;IACD,CAvCY,CAAb;;IAyCA,IAAIT,OAAO,CAACe,SAAZ,EAAuB;MACrB,KAAK,MAAMC,QAAX,IAAuB,KAAKtE,WAAL,CAAiBuE,YAAjB,GAAgCf,MAAhC,CAAwCc,QAAD,IAAcA,QAAQ,CAACzD,IAAT,KAAkB,YAAvE,CAAvB,EAA6G;QAC3G,MAAM2D,KAAK,GAAGF,QAAd;QACA,MAAMG,KAAK,GAAGD,KAAK,CAACE,OAAN,CAAcC,KAAd,KAAwB,SAAxB,GAAoC,KAAKxE,WAAzC,GAAuDqE,KAAK,CAACE,OAAN,CAAcC,KAAnF;QACA,MAAMC,MAAM,GAAGH,KAAf;QACA,MAAMnE,UAAU,GAAG,KAAKJ,iBAAL,CAAuB0E,MAAvB,CAAnB;;QAEA,IAAItE,UAAJ,EAAgB;UACd,MAAM2B,GAAG,GAAI,MAAKqC,QAAQ,CAAC5D,IAAK,IAAhC;UACA6C,IAAI,CAACsB,IAAL,mBACKvE,UADL;YAEEI,IAAI,EAAEuB,GAFR;YAGExB,GAAG,EAAEwB;UAHP;QAKD;MACF;IACF;;IAED,MAAM6C,MAAM,GAAGvB,IAAI,CAACwB,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAU;MACjC,IAAID,CAAC,CAACtE,IAAF,CAAOwE,WAAP,KAAuBD,CAAC,CAACvE,IAAF,CAAOwE,WAAP,EAA3B,EAAiD;QAC/C,OAAO,CAAP;MACD;;MACD,IAAIF,CAAC,CAACtE,IAAF,CAAOwE,WAAP,KAAuBD,CAAC,CAACvE,IAAF,CAAOwE,WAAP,EAA3B,EAAiD;QAC/C,OAAO,CAAC,CAAR;MACD;;MACD,OAAO,CAAP;IACD,CARc,CAAf;;IAUA,IAAI,CAAC5B,OAAO,CAACU,QAAT,IAAqB,CAACV,OAAO,CAACS,QAAlC,EAA4C;MAC1C,IAAIT,OAAO,CAAC6B,KAAZ,EAAmB;QACjB,MAAMC,qBAAqB,GAAG,KAAKrE,mBAAL,CAAyB,aAAzB,CAA9B;;QACA,IAAIqE,qBAAJ,EAA2B;UACzB7B,IAAI,CAACsB,IAAL,CAAUO,qBAAV;QACD;MACF;;MAED,IAAI9B,OAAO,CAAC+B,SAAZ,EAAuB;QACrB,MAAMC,yBAAyB,GAAG,KAAKvE,mBAAL,CAAyB,iBAAzB,CAAlC;;QACA,IAAIuE,yBAAJ,EAA+B;UAC7B/B,IAAI,CAACsB,IAAL,CAAUS,yBAAV;QACD;MACF;;MAED,IAAI,CAAChC,OAAO,CAACK,OAAb,EAAsB;QACpB,MAAM4B,uBAAuB,GAAG,KAAKxE,mBAAL,CAAyB,eAAzB,CAAhC;;QACA,IAAIwE,uBAAJ,EAA6B;UAC3BhC,IAAI,CAACsB,IAAL,CAAUU,uBAAV;QACD;MACF;IACF;;IAED,OAAOT,MAAP;EACD;EAED;AACF;AACA;;;EACEU,WAAW,GAAiC;IAC1C,OAAO,KAAKnC,OAAL,EAAP;EACD;EAED;AACF;AACA;;;EACEoC,oBAAoB,GAAG;IACrB,OAAO,KAAKpC,OAAL,CAAa;MAAES,WAAW,EAAE,IAAf;MAAqBO,SAAS,EAAE;IAAhC,CAAb,EAAqDqB,GAArD,CAA0DjC,CAAD,IAAO;MACrE,OAAO;QACL/C,IAAI,EAAE+C,CAAC,CAAC/C,IADH;QAELiE,KAAK,EAAElB,CAAC,CAAC/C,IAFJ;QAGL2B,IAAI,EAAEoB,CAAC,CAACpB;MAHH,CAAP;IAKD,CANM,CAAP;EAOD;EAED;AACF;AACA;;;EACEsD,gBAAgB,CAACC,OAAD,EAAgE;IAC9E,OAAO,KAAKvC,OAAL,CAAa;MAAEK,OAAO,EAAE,IAAX;MAAiBW,SAAS,EAAE,EAACuB,OAAD,aAACA,OAAD,eAACA,OAAO,CAAEC,aAAV;IAA5B,CAAb,EAAoEH,GAApE,CAAyEjC,CAAD,IAAO;MACpF,OAAO;QACL/C,IAAI,EAAE+C,CAAC,CAAC/C,IADH;QAELiE,KAAK,EAAElB,CAAC,CAAC/C,IAFJ;QAGL2B,IAAI,EAAEoB,CAAC,CAACpB;MAHH,CAAP;IAKD,CANM,CAAP;EAOD;;EAEW,MAANyD,MAAM,GAAG;IACb,MAAMC,QAAQ,GAAG,MAAM3G,aAAa,GAAGwC,GAAhB,CAAoB,wBAApB,CAAvB;IACArC,MAAM,CAACa,WAAP,GAAqB2F,QAAQ,CAAC3F,WAA9B;IACAb,MAAM,CAACyG,iBAAP,GAA2BD,QAAQ,CAACC,iBAApC;IACA,KAAK/F,IAAL,CAAU8F,QAAQ,CAAC3F,WAAnB,EAAgC2F,QAAQ,CAACC,iBAAzC;EACD;;AApTqD;AAuTxD,OAAO,SAASvE,qBAAT,CAA+BkD,KAA/B,EAA6C;EAClD,IAAIV,KAAK,CAACC,OAAN,CAAcS,KAAd,CAAJ,EAA0B;IACxB,OAAOA,KAAK,CAAC,CAAD,CAAZ;EACD;;EACD,OAAOA,KAAP;AACD;AAED,OAAO,MAAMsB,gBAAgB,GAAG,MAAqB;EACnD,OAAOhH,oBAAoB,EAA3B;AACD,CAFM"},"metadata":{},"sourceType":"module"}