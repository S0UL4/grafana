{"ast":null,"code":"import React from 'react';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst fields = [{\n  label: 'Step',\n  id: 'timeStep',\n  placeholder: '60',\n  tooltip: 'The number of seconds between datapoints.'\n}, {\n  label: 'On Count',\n  id: 'onCount',\n  placeholder: '3',\n  tooltip: 'The number of values within a cycle, at the start of the cycle, that should have the onValue.'\n}, {\n  label: 'Off Count',\n  id: 'offCount',\n  placeholder: '6',\n  tooltip: 'The number of offValues within the cycle.'\n}, {\n  label: 'On Value',\n  id: 'onValue',\n  placeholder: '1',\n  tooltip: 'The value for \"on values\", may be an int, float, or null.'\n}, {\n  label: 'Off Value',\n  id: 'offValue',\n  placeholder: '1',\n  tooltip: 'The value for \"off values\", may be a int, float, or null.'\n}];\nexport const PredictablePulseEditor = ({\n  onChange,\n  query\n}) => {\n  // Convert values to numbers before saving\n  const onInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    onChange({\n      target: {\n        name,\n        value: Number(value)\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsx(InlineFieldRow, {\n    children: fields.map(({\n      label,\n      id,\n      placeholder,\n      tooltip\n    }) => {\n      var _query$pulseWave;\n\n      return /*#__PURE__*/_jsx(InlineField, {\n        label: label,\n        labelWidth: 14,\n        tooltip: tooltip,\n        children: /*#__PURE__*/_jsx(Input, {\n          width: 32,\n          type: \"number\",\n          name: id,\n          id: `pulseWave.${id}-${query.refId}`,\n          value: (_query$pulseWave = query.pulseWave) === null || _query$pulseWave === void 0 ? void 0 : _query$pulseWave[id],\n          placeholder: placeholder,\n          onChange: onInputChange\n        })\n      }, id);\n    })\n  });\n};","map":{"version":3,"names":["React","InlineField","InlineFieldRow","Input","fields","label","id","placeholder","tooltip","PredictablePulseEditor","onChange","query","onInputChange","e","name","value","target","Number","map","refId","pulseWave"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/components/PredictablePulseEditor.tsx"],"sourcesContent":["import React, { ChangeEvent } from 'react';\n\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { PulseWaveQuery } from '../types';\n\nconst fields = [\n  { label: 'Step', id: 'timeStep', placeholder: '60', tooltip: 'The number of seconds between datapoints.' },\n  {\n    label: 'On Count',\n    id: 'onCount',\n    placeholder: '3',\n    tooltip: 'The number of values within a cycle, at the start of the cycle, that should have the onValue.',\n  },\n  { label: 'Off Count', id: 'offCount', placeholder: '6', tooltip: 'The number of offValues within the cycle.' },\n  {\n    label: 'On Value',\n    id: 'onValue',\n    placeholder: '1',\n    tooltip: 'The value for \"on values\", may be an int, float, or null.',\n  },\n  {\n    label: 'Off Value',\n    id: 'offValue',\n    placeholder: '1',\n    tooltip: 'The value for \"off values\", may be a int, float, or null.',\n  },\n];\n\nexport const PredictablePulseEditor = ({ onChange, query }: EditorProps) => {\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, placeholder, tooltip }) => {\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip}>\n            <Input\n              width={32}\n              type=\"number\"\n              name={id}\n              id={`pulseWave.${id}-${query.refId}`}\n              value={query.pulseWave?.[id as keyof PulseWaveQuery]}\n              placeholder={placeholder}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAmC,OAAnC;AAEA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,KAAtC,QAAmD,aAAnD;;AAKA,MAAMC,MAAM,GAAG,CACb;EAAEC,KAAK,EAAE,MAAT;EAAiBC,EAAE,EAAE,UAArB;EAAiCC,WAAW,EAAE,IAA9C;EAAoDC,OAAO,EAAE;AAA7D,CADa,EAEb;EACEH,KAAK,EAAE,UADT;EAEEC,EAAE,EAAE,SAFN;EAGEC,WAAW,EAAE,GAHf;EAIEC,OAAO,EAAE;AAJX,CAFa,EAQb;EAAEH,KAAK,EAAE,WAAT;EAAsBC,EAAE,EAAE,UAA1B;EAAsCC,WAAW,EAAE,GAAnD;EAAwDC,OAAO,EAAE;AAAjE,CARa,EASb;EACEH,KAAK,EAAE,UADT;EAEEC,EAAE,EAAE,SAFN;EAGEC,WAAW,EAAE,GAHf;EAIEC,OAAO,EAAE;AAJX,CATa,EAeb;EACEH,KAAK,EAAE,WADT;EAEEC,EAAE,EAAE,UAFN;EAGEC,WAAW,EAAE,GAHf;EAIEC,OAAO,EAAE;AAJX,CAfa,CAAf;AAuBA,OAAO,MAAMC,sBAAsB,GAAG,CAAC;EAAEC,QAAF;EAAYC;AAAZ,CAAD,KAAsC;EAC1E;EACA,MAAMC,aAAa,GAAIC,CAAD,IAAsC;IAC1D,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAkBF,CAAC,CAACG,MAA1B;IAEAN,QAAQ,CAAC;MAAEM,MAAM,EAAE;QAAEF,IAAF;QAAQC,KAAK,EAAEE,MAAM,CAACF,KAAD;MAArB;IAAV,CAAD,CAAR;EACD,CAJD;;EAMA,oBACE,KAAC,cAAD;IAAA,UACGX,MAAM,CAACc,GAAP,CAAW,CAAC;MAAEb,KAAF;MAASC,EAAT;MAAaC,WAAb;MAA0BC;IAA1B,CAAD,KAAyC;MAAA;;MACnD,oBACE,KAAC,WAAD;QAAa,KAAK,EAAEH,KAApB;QAA2B,UAAU,EAAE,EAAvC;QAAoD,OAAO,EAAEG,OAA7D;QAAA,uBACE,KAAC,KAAD;UACE,KAAK,EAAE,EADT;UAEE,IAAI,EAAC,QAFP;UAGE,IAAI,EAAEF,EAHR;UAIE,EAAE,EAAG,aAAYA,EAAG,IAAGK,KAAK,CAACQ,KAAM,EAJrC;UAKE,KAAK,sBAAER,KAAK,CAACS,SAAR,qDAAE,iBAAkBd,EAAlB,CALT;UAME,WAAW,EAAEC,WANf;UAOE,QAAQ,EAAEK;QAPZ;MADF,GAAgDN,EAAhD,CADF;IAaD,CAdA;EADH,EADF;AAmBD,CA3BM"},"metadata":{},"sourceType":"module"}