{"ast":null,"code":"var _p, _Alert, _h, _InlineFormLabel;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { updateDatasourcePluginJsonDataOption, onUpdateDatasourceJsonDataOptionSelect, onUpdateDatasourceJsonDataOptionChecked } from '@grafana/data';\nimport { Alert, DataSourceHttpSettings, InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport store from 'app/core/store';\nimport { GraphiteType } from '../types';\nimport { DEFAULT_GRAPHITE_VERSION, GRAPHITE_VERSIONS } from '../versions';\nimport { MappingsConfiguration } from './MappingsConfiguration';\nimport { fromString, toString } from './parseLokiLabelMappings';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst {\n  Select,\n  Switch\n} = LegacyForms;\nexport const SHOW_MAPPINGS_HELP_KEY = 'grafana.datasources.graphite.config.showMappingsHelp';\nconst graphiteVersions = GRAPHITE_VERSIONS.map(version => ({\n  label: `${version}.x`,\n  value: version\n}));\nconst graphiteTypes = Object.entries(GraphiteType).map(([label, value]) => ({\n  label,\n  value\n}));\nexport class ConfigEditor extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"renderTypeHelp\", () => {\n      return _p || (_p = /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"There are different types of Graphite compatible backends. Here you can specify the type you are using. If you are using\", ' ', /*#__PURE__*/_jsx(\"a\", {\n          href: \"https://github.com/grafana/metrictank\",\n          className: \"pointer\",\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: \"Metrictank\"\n        }), ' ', \"then select that here. This will enable Metrictank specific features like query processing meta data. Metrictank is a multi-tenant timeseries engine for Graphite and friends.\"]\n      }));\n    });\n\n    this.state = {\n      showMappingsHelp: store.getObject(SHOW_MAPPINGS_HELP_KEY, true)\n    };\n  }\n\n  componentDidMount() {\n    updateDatasourcePluginJsonDataOption(this.props, 'graphiteVersion', this.currentGraphiteVersion);\n  }\n\n  render() {\n    var _options$jsonData$imp, _options$jsonData$imp2;\n\n    const {\n      options,\n      onOptionsChange\n    } = this.props;\n    const currentVersion = graphiteVersions.find(item => item.value === this.currentGraphiteVersion);\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [options.access === 'direct' && (_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n        title: \"Deprecation Notice\",\n        severity: \"warning\",\n        children: \"This data source uses browser access mode. This mode is deprecated and will be removed in the future. Please use server access mode instead.\"\n      }))), /*#__PURE__*/_jsx(DataSourceHttpSettings, {\n        defaultUrl: \"http://localhost:8080\",\n        dataSourceConfig: options,\n        onChange: onOptionsChange\n      }), _h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n        className: \"page-heading\",\n        children: \"Graphite details\"\n      })), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form-group\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form-inline\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"gf-form\",\n            children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/_jsx(InlineFormLabel, {\n              tooltip: \"This option controls what functions are available in the Graphite query editor.\",\n              children: \"Version\"\n            })), /*#__PURE__*/_jsx(Select, {\n              \"aria-label\": \"Graphite version\",\n              value: currentVersion,\n              options: graphiteVersions,\n              width: 8,\n              onChange: onUpdateDatasourceJsonDataOptionSelect(this.props, 'graphiteVersion')\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form-inline\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"gf-form\",\n            children: [/*#__PURE__*/_jsx(InlineFormLabel, {\n              tooltip: this.renderTypeHelp,\n              children: \"Type\"\n            }), /*#__PURE__*/_jsx(Select, {\n              \"aria-label\": \"Graphite backend type\",\n              options: graphiteTypes,\n              value: graphiteTypes.find(type => type.value === options.jsonData.graphiteType),\n              width: 8,\n              onChange: onUpdateDatasourceJsonDataOptionSelect(this.props, 'graphiteType')\n            })]\n          })\n        }), options.jsonData.graphiteType === GraphiteType.Metrictank && /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form-inline\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form\",\n            children: /*#__PURE__*/_jsx(Switch, {\n              label: \"Rollup indicator\",\n              labelClass: 'width-10',\n              tooltip: \"Shows up as an info icon in panel headers when data is aggregated\",\n              checked: !!options.jsonData.rollupIndicatorEnabled,\n              onChange: onUpdateDatasourceJsonDataOptionChecked(this.props, 'rollupIndicatorEnabled')\n            })\n          })\n        })]\n      }), /*#__PURE__*/_jsx(MappingsConfiguration, {\n        mappings: (((_options$jsonData$imp = options.jsonData.importConfiguration) === null || _options$jsonData$imp === void 0 ? void 0 : (_options$jsonData$imp2 = _options$jsonData$imp.loki) === null || _options$jsonData$imp2 === void 0 ? void 0 : _options$jsonData$imp2.mappings) || []).map(toString),\n        showHelp: this.state.showMappingsHelp,\n        onDismiss: () => {\n          this.setState({\n            showMappingsHelp: false\n          });\n          store.setObject(SHOW_MAPPINGS_HELP_KEY, false);\n        },\n        onRestoreHelp: () => {\n          this.setState({\n            showMappingsHelp: true\n          });\n          store.setObject(SHOW_MAPPINGS_HELP_KEY, true);\n        },\n        onChange: mappings => {\n          onOptionsChange(Object.assign({}, options, {\n            jsonData: Object.assign({}, options.jsonData, {\n              importConfiguration: Object.assign({}, options.jsonData.importConfiguration, {\n                loki: {\n                  mappings: mappings.map(fromString)\n                }\n              })\n            })\n          }));\n        }\n      })]\n    });\n  }\n\n  get currentGraphiteVersion() {\n    return this.props.options.jsonData.graphiteVersion || DEFAULT_GRAPHITE_VERSION;\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","updateDatasourcePluginJsonDataOption","onUpdateDatasourceJsonDataOptionSelect","onUpdateDatasourceJsonDataOptionChecked","Alert","DataSourceHttpSettings","InlineFormLabel","LegacyForms","store","GraphiteType","DEFAULT_GRAPHITE_VERSION","GRAPHITE_VERSIONS","MappingsConfiguration","fromString","toString","Select","Switch","SHOW_MAPPINGS_HELP_KEY","graphiteVersions","map","version","label","value","graphiteTypes","Object","entries","ConfigEditor","constructor","props","state","showMappingsHelp","getObject","componentDidMount","currentGraphiteVersion","render","options","onOptionsChange","currentVersion","find","item","access","renderTypeHelp","type","jsonData","graphiteType","Metrictank","rollupIndicatorEnabled","importConfiguration","loki","mappings","setState","setObject","graphiteVersion"],"sources":["/home/soula/grafana/public/app/plugins/datasource/graphite/configuration/ConfigEditor.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  updateDatasourcePluginJsonDataOption,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceJsonDataOptionChecked,\n} from '@grafana/data';\nimport { Alert, DataSourceHttpSettings, InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport store from 'app/core/store';\n\nimport { GraphiteOptions, GraphiteType } from '../types';\nimport { DEFAULT_GRAPHITE_VERSION, GRAPHITE_VERSIONS } from '../versions';\n\nimport { MappingsConfiguration } from './MappingsConfiguration';\nimport { fromString, toString } from './parseLokiLabelMappings';\n\nconst { Select, Switch } = LegacyForms;\nexport const SHOW_MAPPINGS_HELP_KEY = 'grafana.datasources.graphite.config.showMappingsHelp';\n\nconst graphiteVersions = GRAPHITE_VERSIONS.map((version) => ({ label: `${version}.x`, value: version }));\n\nconst graphiteTypes = Object.entries(GraphiteType).map(([label, value]) => ({\n  label,\n  value,\n}));\n\nexport type Props = DataSourcePluginOptionsEditorProps<GraphiteOptions>;\n\ntype State = {\n  showMappingsHelp: boolean;\n};\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showMappingsHelp: store.getObject(SHOW_MAPPINGS_HELP_KEY, true),\n    };\n  }\n\n  renderTypeHelp = () => {\n    return (\n      <p>\n        There are different types of Graphite compatible backends. Here you can specify the type you are using. If you\n        are using{' '}\n        <a href=\"https://github.com/grafana/metrictank\" className=\"pointer\" target=\"_blank\" rel=\"noreferrer\">\n          Metrictank\n        </a>{' '}\n        then select that here. This will enable Metrictank specific features like query processing meta data. Metrictank\n        is a multi-tenant timeseries engine for Graphite and friends.\n      </p>\n    );\n  };\n\n  componentDidMount() {\n    updateDatasourcePluginJsonDataOption(this.props, 'graphiteVersion', this.currentGraphiteVersion);\n  }\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n\n    const currentVersion = graphiteVersions.find((item) => item.value === this.currentGraphiteVersion);\n\n    return (\n      <>\n        {options.access === 'direct' && (\n          <Alert title=\"Deprecation Notice\" severity=\"warning\">\n            This data source uses browser access mode. This mode is deprecated and will be removed in the future. Please\n            use server access mode instead.\n          </Alert>\n        )}\n        <DataSourceHttpSettings\n          defaultUrl=\"http://localhost:8080\"\n          dataSourceConfig={options}\n          onChange={onOptionsChange}\n        />\n        <h3 className=\"page-heading\">Graphite details</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel tooltip=\"This option controls what functions are available in the Graphite query editor.\">\n                Version\n              </InlineFormLabel>\n              <Select\n                aria-label=\"Graphite version\"\n                value={currentVersion}\n                options={graphiteVersions}\n                width={8}\n                onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'graphiteVersion')}\n              />\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel tooltip={this.renderTypeHelp}>Type</InlineFormLabel>\n              <Select\n                aria-label=\"Graphite backend type\"\n                options={graphiteTypes}\n                value={graphiteTypes.find((type) => type.value === options.jsonData.graphiteType)}\n                width={8}\n                onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'graphiteType')}\n              />\n            </div>\n          </div>\n          {options.jsonData.graphiteType === GraphiteType.Metrictank && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <Switch\n                  label=\"Rollup indicator\"\n                  labelClass={'width-10'}\n                  tooltip=\"Shows up as an info icon in panel headers when data is aggregated\"\n                  checked={!!options.jsonData.rollupIndicatorEnabled}\n                  onChange={onUpdateDatasourceJsonDataOptionChecked(this.props, 'rollupIndicatorEnabled')}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n        <MappingsConfiguration\n          mappings={(options.jsonData.importConfiguration?.loki?.mappings || []).map(toString)}\n          showHelp={this.state.showMappingsHelp}\n          onDismiss={() => {\n            this.setState({ showMappingsHelp: false });\n            store.setObject(SHOW_MAPPINGS_HELP_KEY, false);\n          }}\n          onRestoreHelp={() => {\n            this.setState({ showMappingsHelp: true });\n            store.setObject(SHOW_MAPPINGS_HELP_KEY, true);\n          }}\n          onChange={(mappings) => {\n            onOptionsChange({\n              ...options,\n              jsonData: {\n                ...options.jsonData,\n                importConfiguration: {\n                  ...options.jsonData.importConfiguration,\n                  loki: {\n                    mappings: mappings.map(fromString),\n                  },\n                },\n              },\n            });\n          }}\n        />\n      </>\n    );\n  }\n\n  private get currentGraphiteVersion() {\n    return this.props.options.jsonData.graphiteVersion || DEFAULT_GRAPHITE_VERSION;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}