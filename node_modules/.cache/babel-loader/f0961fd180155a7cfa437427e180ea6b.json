{"ast":null,"code":"import { camelCase } from 'lodash';\nconst specialChars = ['(', '[', '{', '}', ']', ')', '\\\\', '|', '*', '+', '-', '.', '?', '<', '>', '#', '&', '^', '$'];\nconst specialMatcher = '([\\\\' + specialChars.join('\\\\') + '])';\nconst specialCharEscape = new RegExp(specialMatcher, 'g');\nconst specialCharUnescape = new RegExp('(\\\\\\\\)' + specialMatcher, 'g');\nexport const escapeStringForRegex = value => {\n  if (!value) {\n    return value;\n  }\n\n  return value.replace(specialCharEscape, '\\\\$1');\n};\nexport const unEscapeStringFromRegex = value => {\n  if (!value) {\n    return value;\n  }\n\n  return value.replace(specialCharUnescape, '$2');\n};\nexport function stringStartsAsRegEx(str) {\n  if (!str) {\n    return false;\n  }\n\n  return str[0] === '/';\n}\nexport function stringToJsRegex(str) {\n  if (!stringStartsAsRegEx(str)) {\n    return new RegExp(`^${str}$`);\n  }\n\n  const match = str.match(new RegExp('^/(.*?)/(g?i?m?y?s?)$'));\n\n  if (!match) {\n    throw new Error(`'${str}' is not a valid regular expression.`);\n  }\n\n  return new RegExp(match[1], match[2]);\n}\nexport function stringToMs(str) {\n  if (!str) {\n    return 0;\n  }\n\n  const nr = parseInt(str, 10);\n  const unit = str.slice(String(nr).length);\n  const s = 1000;\n  const m = s * 60;\n  const h = m * 60;\n  const d = h * 24;\n\n  switch (unit) {\n    case 's':\n      return nr * s;\n\n    case 'm':\n      return nr * m;\n\n    case 'h':\n      return nr * h;\n\n    case 'd':\n      return nr * d;\n\n    default:\n      if (!unit) {\n        return isNaN(nr) ? 0 : nr;\n      }\n\n      throw new Error('Not supported unit: ' + unit);\n  }\n}\nexport function toNumberString(value) {\n  if (value !== null && value !== undefined && Number.isFinite(value)) {\n    return value.toString();\n  }\n\n  return '';\n}\nexport function toIntegerOrUndefined(value) {\n  if (!value) {\n    return undefined;\n  }\n\n  const v = parseInt(value, 10);\n  return isNaN(v) ? undefined : v;\n}\nexport function toFloatOrUndefined(value) {\n  if (!value) {\n    return undefined;\n  }\n\n  const v = parseFloat(value);\n  return isNaN(v) ? undefined : v;\n}\nexport const toPascalCase = string => {\n  const str = camelCase(string);\n  return str.charAt(0).toUpperCase() + str.substring(1);\n};","map":{"version":3,"names":["camelCase","specialChars","specialMatcher","join","specialCharEscape","RegExp","specialCharUnescape","escapeStringForRegex","value","replace","unEscapeStringFromRegex","stringStartsAsRegEx","str","stringToJsRegex","match","Error","stringToMs","nr","parseInt","unit","slice","String","length","s","m","h","d","isNaN","toNumberString","undefined","Number","isFinite","toString","toIntegerOrUndefined","v","toFloatOrUndefined","parseFloat","toPascalCase","string","charAt","toUpperCase","substring"],"sources":["/home/soula/grafana/packages/grafana-data/src/text/string.ts"],"sourcesContent":["import { camelCase } from 'lodash';\n\nconst specialChars = ['(', '[', '{', '}', ']', ')', '\\\\', '|', '*', '+', '-', '.', '?', '<', '>', '#', '&', '^', '$'];\nconst specialMatcher = '([\\\\' + specialChars.join('\\\\') + '])';\nconst specialCharEscape = new RegExp(specialMatcher, 'g');\nconst specialCharUnescape = new RegExp('(\\\\\\\\)' + specialMatcher, 'g');\n\nexport const escapeStringForRegex = (value: string) => {\n  if (!value) {\n    return value;\n  }\n\n  return value.replace(specialCharEscape, '\\\\$1');\n};\n\nexport const unEscapeStringFromRegex = (value: string) => {\n  if (!value) {\n    return value;\n  }\n\n  return value.replace(specialCharUnescape, '$2');\n};\n\nexport function stringStartsAsRegEx(str: string): boolean {\n  if (!str) {\n    return false;\n  }\n\n  return str[0] === '/';\n}\n\nexport function stringToJsRegex(str: string): RegExp {\n  if (!stringStartsAsRegEx(str)) {\n    return new RegExp(`^${str}$`);\n  }\n\n  const match = str.match(new RegExp('^/(.*?)/(g?i?m?y?s?)$'));\n\n  if (!match) {\n    throw new Error(`'${str}' is not a valid regular expression.`);\n  }\n\n  return new RegExp(match[1], match[2]);\n}\n\nexport function stringToMs(str: string): number {\n  if (!str) {\n    return 0;\n  }\n\n  const nr = parseInt(str, 10);\n  const unit = str.slice(String(nr).length);\n  const s = 1000;\n  const m = s * 60;\n  const h = m * 60;\n  const d = h * 24;\n\n  switch (unit) {\n    case 's':\n      return nr * s;\n    case 'm':\n      return nr * m;\n    case 'h':\n      return nr * h;\n    case 'd':\n      return nr * d;\n    default:\n      if (!unit) {\n        return isNaN(nr) ? 0 : nr;\n      }\n      throw new Error('Not supported unit: ' + unit);\n  }\n}\n\nexport function toNumberString(value: number | undefined | null): string {\n  if (value !== null && value !== undefined && Number.isFinite(value as number)) {\n    return value.toString();\n  }\n  return '';\n}\n\nexport function toIntegerOrUndefined(value: string): number | undefined {\n  if (!value) {\n    return undefined;\n  }\n  const v = parseInt(value, 10);\n  return isNaN(v) ? undefined : v;\n}\n\nexport function toFloatOrUndefined(value: string): number | undefined {\n  if (!value) {\n    return undefined;\n  }\n  const v = parseFloat(value);\n  return isNaN(v) ? undefined : v;\n}\n\nexport const toPascalCase = (string: string) => {\n  const str = camelCase(string);\n  return str.charAt(0).toUpperCase() + str.substring(1);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}