{"ast":null,"code":"var _p, _PanelNotSupported;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { DocsId, standardTransformersRegistry } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, Button, Container, CustomScrollbar, VerticalGroup, withTheme, Input, IconButton, useStyles2, Card } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { getDocsLink } from 'app/core/utils/docsLinks';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\nimport { AppNotificationSeverity } from '../../../../types';\nimport { PanelNotSupported } from '../PanelEditor/PanelNotSupported';\nimport { TransformationOperationRows } from './TransformationOperationRows';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst LOCAL_STORAGE_KEY = 'dashboard.components.TransformationEditor.featureInfoBox.isDismissed';\n\nclass UnThemedTransformationsEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"subscription\", void 0);\n\n    _defineProperty(this, \"onSearchChange\", event => {\n      this.setState({\n        search: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onSearchKeyDown\", event => {\n      if (event.key === 'Enter') {\n        const {\n          search\n        } = this.state;\n\n        if (search) {\n          const lower = search.toLowerCase();\n          const filtered = standardTransformersRegistry.list().filter(t => {\n            const txt = (t.name + t.description).toLowerCase();\n            return txt.indexOf(lower) >= 0;\n          });\n\n          if (filtered.length > 0) {\n            this.onTransformationAdd({\n              value: filtered[0].id\n            });\n          }\n        }\n      } else if (event.keyCode === 27) {\n        // Escape key\n        this.setState({\n          search: '',\n          showPicker: false\n        });\n        event.stopPropagation(); // don't exit the editor\n      }\n    });\n\n    _defineProperty(this, \"getTransformationNextId\", name => {\n      const {\n        transformations\n      } = this.state;\n      let nextId = 0;\n      const existingIds = transformations.filter(t => t.id.startsWith(name)).map(t => t.id);\n\n      if (existingIds.length !== 0) {\n        nextId = Math.max(...existingIds.map(i => parseInt(i.match(/\\d+/)[0], 10))) + 1;\n      }\n\n      return `${name}-${nextId}`;\n    });\n\n    _defineProperty(this, \"onTransformationAdd\", selectable => {\n      const {\n        transformations\n      } = this.state;\n      const nextId = this.getTransformationNextId(selectable.value);\n      this.setState({\n        search: '',\n        showPicker: false\n      });\n      this.onChange([...transformations, {\n        id: nextId,\n        transformation: {\n          id: selectable.value,\n          options: {}\n        }\n      }]);\n    });\n\n    _defineProperty(this, \"onTransformationChange\", (idx, config) => {\n      const {\n        transformations\n      } = this.state;\n      const next = Array.from(transformations);\n      next[idx].transformation = config;\n      this.onChange(next);\n    });\n\n    _defineProperty(this, \"onTransformationRemove\", idx => {\n      const {\n        transformations\n      } = this.state;\n      const next = Array.from(transformations);\n      next.splice(idx, 1);\n      this.onChange(next);\n    });\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      const {\n        transformations\n      } = this.state;\n\n      if (!result || !result.destination) {\n        return;\n      }\n\n      const startIndex = result.source.index;\n      const endIndex = result.destination.index;\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      const update = Array.from(transformations);\n      const [removed] = update.splice(startIndex, 1);\n      update.splice(endIndex, 0, removed);\n      this.onChange(update);\n    });\n\n    _defineProperty(this, \"renderTransformationEditors\", () => {\n      const {\n        data,\n        transformations\n      } = this.state;\n      return /*#__PURE__*/_jsx(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        children: /*#__PURE__*/_jsx(Droppable, {\n          droppableId: \"transformations-list\",\n          direction: \"vertical\",\n          children: provided => {\n            return /*#__PURE__*/_jsxs(\"div\", Object.assign({\n              ref: provided.innerRef\n            }, provided.droppableProps, {\n              children: [/*#__PURE__*/_jsx(TransformationOperationRows, {\n                configs: transformations,\n                data: data,\n                onRemove: this.onTransformationRemove,\n                onChange: this.onTransformationChange\n              }), provided.placeholder]\n            }));\n          }\n        })\n      });\n    });\n\n    const _transformations = props.panel.transformations || [];\n\n    const ids = this.buildTransformationIds(_transformations);\n    this.state = {\n      transformations: _transformations.map((t, i) => ({\n        transformation: t,\n        id: ids[i]\n      })),\n      data: [],\n      search: ''\n    };\n  }\n\n  buildTransformationIds(transformations) {\n    const transformationCounters = {};\n    const transformationIds = [];\n\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n\n      if (transformationCounters[transformation.id] === undefined) {\n        transformationCounters[transformation.id] = 0;\n      } else {\n        transformationCounters[transformation.id] += 1;\n      }\n\n      transformationIds.push(`${transformations[i].id}-${transformationCounters[transformations[i].id]}`);\n    }\n\n    return transformationIds;\n  }\n\n  componentDidMount() {\n    this.subscription = this.props.panel.getQueryRunner().getData({\n      withTransforms: false,\n      withFieldConfig: false\n    }).subscribe({\n      next: panelData => this.setState({\n        data: panelData.series\n      })\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  onChange(transformations) {\n    this.setState({\n      transformations\n    });\n    this.props.panel.setTransformations(transformations.map(t => t.transformation));\n  } // Transformation UIDs are stored in a name-X form. name is NOT unique hence we need to parse the IDs and increase X\n  // for transformations with the same name\n\n\n  renderTransformsPicker() {\n    const {\n      transformations,\n      search\n    } = this.state;\n    let suffix = null;\n    let xforms = standardTransformersRegistry.list().sort((a, b) => a.name > b.name ? 1 : b.name > a.name ? -1 : 0);\n\n    if (search) {\n      const lower = search.toLowerCase();\n      const filtered = xforms.filter(t => {\n        const txt = (t.name + t.description).toLowerCase();\n        return txt.indexOf(lower) >= 0;\n      });\n      suffix = /*#__PURE__*/_jsxs(_Fragment, {\n        children: [filtered.length, \" / \", xforms.length, \" \\xA0\\xA0\", /*#__PURE__*/_jsx(IconButton, {\n          name: \"times\",\n          onClick: () => {\n            this.setState({\n              search: ''\n            });\n          }\n        })]\n      });\n      xforms = filtered;\n    }\n\n    const noTransforms = !(transformations !== null && transformations !== void 0 && transformations.length);\n    const showPicker = noTransforms || this.state.showPicker;\n\n    if (!suffix && showPicker && !noTransforms) {\n      suffix = /*#__PURE__*/_jsx(IconButton, {\n        name: \"times\",\n        onClick: () => {\n          this.setState({\n            showPicker: false\n          });\n        }\n      });\n    }\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [noTransforms && /*#__PURE__*/_jsx(Container, {\n        grow: 1,\n        children: /*#__PURE__*/_jsx(LocalStorageValueProvider, {\n          storageKey: LOCAL_STORAGE_KEY,\n          defaultValue: false,\n          children: (isDismissed, onDismiss) => {\n            if (isDismissed) {\n              return null;\n            }\n\n            return /*#__PURE__*/_jsxs(Alert, {\n              title: \"Transformations\",\n              severity: \"info\",\n              onRemove: () => {\n                onDismiss(true);\n              },\n              children: [_p || (_p = /*#__PURE__*/_jsxs(\"p\", {\n                children: [\"Transformations allow you to join, calculate, re-order, hide, and rename your query results before they are visualized. \", /*#__PURE__*/_jsx(\"br\", {}), \"Many transforms are not suitable if you're using the Graph visualization, as it currently only supports time series data. \", /*#__PURE__*/_jsx(\"br\", {}), \"It can help to switch to the Table visualization to understand what a transformation is doing.\", ' ']\n              })), /*#__PURE__*/_jsx(\"a\", {\n                href: getDocsLink(DocsId.Transformations),\n                className: \"external-link\",\n                target: \"_blank\",\n                rel: \"noreferrer\",\n                children: \"Read more\"\n              })]\n            });\n          }\n        })\n      }), showPicker ? /*#__PURE__*/_jsxs(VerticalGroup, {\n        children: [/*#__PURE__*/_jsx(Input, {\n          \"aria-label\": selectors.components.Transforms.searchInput,\n          value: search !== null && search !== void 0 ? search : '',\n          autoFocus: !noTransforms,\n          placeholder: \"Add transformation\",\n          onChange: this.onSearchChange,\n          onKeyDown: this.onSearchKeyDown,\n          suffix: suffix\n        }), xforms.map(t => {\n          return /*#__PURE__*/_jsx(TransformationCard, {\n            transform: t,\n            onClick: () => {\n              this.onTransformationAdd({\n                value: t.id\n              });\n            }\n          }, t.name);\n        })]\n      }) : /*#__PURE__*/_jsx(Button, {\n        icon: \"plus\",\n        variant: \"secondary\",\n        onClick: () => {\n          this.setState({\n            showPicker: true\n          });\n        },\n        children: \"Add transformation\"\n      })]\n    });\n  }\n\n  render() {\n    const {\n      panel: {\n        alert\n      }\n    } = this.props;\n    const {\n      transformations\n    } = this.state;\n    const hasTransforms = transformations.length > 0;\n\n    if (!hasTransforms && alert) {\n      return _PanelNotSupported || (_PanelNotSupported = /*#__PURE__*/_jsx(PanelNotSupported, {\n        message: \"Transformations can't be used on a panel with existing alerts\"\n      }));\n    }\n\n    return /*#__PURE__*/_jsx(CustomScrollbar, {\n      autoHeightMin: \"100%\",\n      children: /*#__PURE__*/_jsx(Container, {\n        padding: \"md\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          \"aria-label\": selectors.components.TransformTab.content,\n          children: [hasTransforms && alert ? /*#__PURE__*/_jsx(Alert, {\n            severity: AppNotificationSeverity.Error,\n            title: \"Transformations can't be used on a panel with alerts\"\n          }) : null, hasTransforms && this.renderTransformationEditors(), this.renderTransformsPicker()]\n        })\n      })\n    });\n  }\n\n}\n\nfunction TransformationCard({\n  transform,\n  onClick\n}) {\n  const styles = useStyles2(getStyles);\n  return /*#__PURE__*/_jsxs(Card, {\n    className: styles.card,\n    \"aria-label\": selectors.components.TransformTab.newTransform(transform.name),\n    onClick: onClick,\n    children: [/*#__PURE__*/_jsx(Card.Heading, {\n      children: transform.name\n    }), /*#__PURE__*/_jsx(Card.Meta, {\n      children: transform.description\n    }), transform.state && /*#__PURE__*/_jsx(Card.Tags, {\n      children: /*#__PURE__*/_jsx(PluginStateInfo, {\n        state: transform.state\n      })\n    })]\n  });\n}\n\nconst getStyles = theme => {\n  return {\n    card: css`\n      margin: 0;\n      padding: ${theme.spacing(1)};\n    `\n  };\n};\n\nexport const TransformationsEditor = withTheme(UnThemedTransformationsEditor);","map":{"version":3,"names":["css","React","DragDropContext","Droppable","DocsId","standardTransformersRegistry","selectors","Alert","Button","Container","CustomScrollbar","VerticalGroup","withTheme","Input","IconButton","useStyles2","Card","LocalStorageValueProvider","getDocsLink","PluginStateInfo","AppNotificationSeverity","PanelNotSupported","TransformationOperationRows","LOCAL_STORAGE_KEY","UnThemedTransformationsEditor","PureComponent","constructor","props","event","setState","search","target","value","key","state","lower","toLowerCase","filtered","list","filter","t","txt","name","description","indexOf","length","onTransformationAdd","id","keyCode","showPicker","stopPropagation","transformations","nextId","existingIds","startsWith","map","Math","max","i","parseInt","match","selectable","getTransformationNextId","onChange","transformation","options","idx","config","next","Array","from","splice","result","destination","startIndex","source","index","endIndex","update","removed","data","onDragEnd","provided","innerRef","droppableProps","onTransformationRemove","onTransformationChange","placeholder","panel","ids","buildTransformationIds","transformationCounters","transformationIds","undefined","push","componentDidMount","subscription","getQueryRunner","getData","withTransforms","withFieldConfig","subscribe","panelData","series","componentWillUnmount","unsubscribe","setTransformations","renderTransformsPicker","suffix","xforms","sort","a","b","noTransforms","isDismissed","onDismiss","Transformations","components","Transforms","searchInput","onSearchChange","onSearchKeyDown","render","alert","hasTransforms","TransformTab","content","Error","renderTransformationEditors","TransformationCard","transform","onClick","styles","getStyles","card","newTransform","theme","spacing","TransformationsEditor"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/TransformationsEditor/TransformationsEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { ChangeEvent } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataTransformerConfig,\n  DocsId,\n  GrafanaTheme2,\n  PanelData,\n  SelectableValue,\n  standardTransformersRegistry,\n  TransformerRegistryItem,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  Alert,\n  Button,\n  Container,\n  CustomScrollbar,\n  Themeable,\n  VerticalGroup,\n  withTheme,\n  Input,\n  IconButton,\n  useStyles2,\n  Card,\n} from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { getDocsLink } from 'app/core/utils/docsLinks';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nimport { AppNotificationSeverity } from '../../../../types';\nimport { PanelModel } from '../../state';\nimport { PanelNotSupported } from '../PanelEditor/PanelNotSupported';\n\nimport { TransformationOperationRows } from './TransformationOperationRows';\nimport { TransformationsEditorTransformation } from './types';\n\nconst LOCAL_STORAGE_KEY = 'dashboard.components.TransformationEditor.featureInfoBox.isDismissed';\n\ninterface TransformationsEditorProps extends Themeable {\n  panel: PanelModel;\n}\n\ninterface State {\n  data: DataFrame[];\n  transformations: TransformationsEditorTransformation[];\n  search: string;\n  showPicker?: boolean;\n}\n\nclass UnThemedTransformationsEditor extends React.PureComponent<TransformationsEditorProps, State> {\n  subscription?: Unsubscribable;\n\n  constructor(props: TransformationsEditorProps) {\n    super(props);\n    const transformations = props.panel.transformations || [];\n\n    const ids = this.buildTransformationIds(transformations);\n    this.state = {\n      transformations: transformations.map((t, i) => ({\n        transformation: t,\n        id: ids[i],\n      })),\n      data: [],\n      search: '',\n    };\n  }\n\n  onSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ search: event.target.value });\n  };\n\n  onSearchKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      const { search } = this.state;\n      if (search) {\n        const lower = search.toLowerCase();\n        const filtered = standardTransformersRegistry.list().filter((t) => {\n          const txt = (t.name + t.description).toLowerCase();\n          return txt.indexOf(lower) >= 0;\n        });\n        if (filtered.length > 0) {\n          this.onTransformationAdd({ value: filtered[0].id });\n        }\n      }\n    } else if (event.keyCode === 27) {\n      // Escape key\n      this.setState({ search: '', showPicker: false });\n      event.stopPropagation(); // don't exit the editor\n    }\n  };\n\n  buildTransformationIds(transformations: DataTransformerConfig[]) {\n    const transformationCounters: Record<string, number> = {};\n    const transformationIds: string[] = [];\n\n    for (let i = 0; i < transformations.length; i++) {\n      const transformation = transformations[i];\n      if (transformationCounters[transformation.id] === undefined) {\n        transformationCounters[transformation.id] = 0;\n      } else {\n        transformationCounters[transformation.id] += 1;\n      }\n      transformationIds.push(`${transformations[i].id}-${transformationCounters[transformations[i].id]}`);\n    }\n    return transformationIds;\n  }\n\n  componentDidMount() {\n    this.subscription = this.props.panel\n      .getQueryRunner()\n      .getData({ withTransforms: false, withFieldConfig: false })\n      .subscribe({\n        next: (panelData: PanelData) => this.setState({ data: panelData.series }),\n      });\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  onChange(transformations: TransformationsEditorTransformation[]) {\n    this.setState({ transformations });\n    this.props.panel.setTransformations(transformations.map((t) => t.transformation));\n  }\n\n  // Transformation UIDs are stored in a name-X form. name is NOT unique hence we need to parse the IDs and increase X\n  // for transformations with the same name\n  getTransformationNextId = (name: string) => {\n    const { transformations } = this.state;\n    let nextId = 0;\n    const existingIds = transformations.filter((t) => t.id.startsWith(name)).map((t) => t.id);\n\n    if (existingIds.length !== 0) {\n      nextId = Math.max(...existingIds.map((i) => parseInt(i.match(/\\d+/)![0], 10))) + 1;\n    }\n\n    return `${name}-${nextId}`;\n  };\n\n  onTransformationAdd = (selectable: SelectableValue<string>) => {\n    const { transformations } = this.state;\n\n    const nextId = this.getTransformationNextId(selectable.value!);\n    this.setState({ search: '', showPicker: false });\n    this.onChange([\n      ...transformations,\n      {\n        id: nextId,\n        transformation: {\n          id: selectable.value as string,\n          options: {},\n        },\n      },\n    ]);\n  };\n\n  onTransformationChange = (idx: number, config: DataTransformerConfig) => {\n    const { transformations } = this.state;\n    const next = Array.from(transformations);\n    next[idx].transformation = config;\n    this.onChange(next);\n  };\n\n  onTransformationRemove = (idx: number) => {\n    const { transformations } = this.state;\n    const next = Array.from(transformations);\n    next.splice(idx, 1);\n    this.onChange(next);\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { transformations } = this.state;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n    const update = Array.from(transformations);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    this.onChange(update);\n  };\n\n  renderTransformationEditors = () => {\n    const { data, transformations } = this.state;\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"transformations-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <TransformationOperationRows\n                  configs={transformations}\n                  data={data}\n                  onRemove={this.onTransformationRemove}\n                  onChange={this.onTransformationChange}\n                />\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  };\n\n  renderTransformsPicker() {\n    const { transformations, search } = this.state;\n    let suffix: React.ReactNode = null;\n    let xforms = standardTransformersRegistry.list().sort((a, b) => (a.name > b.name ? 1 : b.name > a.name ? -1 : 0));\n\n    if (search) {\n      const lower = search.toLowerCase();\n      const filtered = xforms.filter((t) => {\n        const txt = (t.name + t.description).toLowerCase();\n        return txt.indexOf(lower) >= 0;\n      });\n\n      suffix = (\n        <>\n          {filtered.length} / {xforms.length} &nbsp;&nbsp;\n          <IconButton\n            name=\"times\"\n            onClick={() => {\n              this.setState({ search: '' });\n            }}\n          />\n        </>\n      );\n\n      xforms = filtered;\n    }\n\n    const noTransforms = !transformations?.length;\n    const showPicker = noTransforms || this.state.showPicker;\n\n    if (!suffix && showPicker && !noTransforms) {\n      suffix = (\n        <IconButton\n          name=\"times\"\n          onClick={() => {\n            this.setState({ showPicker: false });\n          }}\n        />\n      );\n    }\n\n    return (\n      <>\n        {noTransforms && (\n          <Container grow={1}>\n            <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n              {(isDismissed, onDismiss) => {\n                if (isDismissed) {\n                  return null;\n                }\n\n                return (\n                  <Alert\n                    title=\"Transformations\"\n                    severity=\"info\"\n                    onRemove={() => {\n                      onDismiss(true);\n                    }}\n                  >\n                    <p>\n                      Transformations allow you to join, calculate, re-order, hide, and rename your query results before\n                      they are visualized. <br />\n                      Many transforms are not suitable if you&apos;re using the Graph visualization, as it currently\n                      only supports time series data. <br />\n                      It can help to switch to the Table visualization to understand what a transformation is doing.{' '}\n                    </p>\n                    <a\n                      href={getDocsLink(DocsId.Transformations)}\n                      className=\"external-link\"\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                    >\n                      Read more\n                    </a>\n                  </Alert>\n                );\n              }}\n            </LocalStorageValueProvider>\n          </Container>\n        )}\n        {showPicker ? (\n          <VerticalGroup>\n            <Input\n              aria-label={selectors.components.Transforms.searchInput}\n              value={search ?? ''}\n              autoFocus={!noTransforms}\n              placeholder=\"Add transformation\"\n              onChange={this.onSearchChange}\n              onKeyDown={this.onSearchKeyDown}\n              suffix={suffix}\n            />\n\n            {xforms.map((t) => {\n              return (\n                <TransformationCard\n                  key={t.name}\n                  transform={t}\n                  onClick={() => {\n                    this.onTransformationAdd({ value: t.id });\n                  }}\n                />\n              );\n            })}\n          </VerticalGroup>\n        ) : (\n          <Button\n            icon=\"plus\"\n            variant=\"secondary\"\n            onClick={() => {\n              this.setState({ showPicker: true });\n            }}\n          >\n            Add transformation\n          </Button>\n        )}\n      </>\n    );\n  }\n\n  render() {\n    const {\n      panel: { alert },\n    } = this.props;\n    const { transformations } = this.state;\n\n    const hasTransforms = transformations.length > 0;\n\n    if (!hasTransforms && alert) {\n      return <PanelNotSupported message=\"Transformations can't be used on a panel with existing alerts\" />;\n    }\n\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\">\n        <Container padding=\"md\">\n          <div aria-label={selectors.components.TransformTab.content}>\n            {hasTransforms && alert ? (\n              <Alert\n                severity={AppNotificationSeverity.Error}\n                title=\"Transformations can't be used on a panel with alerts\"\n              />\n            ) : null}\n            {hasTransforms && this.renderTransformationEditors()}\n            {this.renderTransformsPicker()}\n          </div>\n        </Container>\n      </CustomScrollbar>\n    );\n  }\n}\n\ninterface TransformationCardProps {\n  transform: TransformerRegistryItem<any>;\n  onClick: () => void;\n}\n\nfunction TransformationCard({ transform, onClick }: TransformationCardProps) {\n  const styles = useStyles2(getStyles);\n  return (\n    <Card\n      className={styles.card}\n      aria-label={selectors.components.TransformTab.newTransform(transform.name)}\n      onClick={onClick}\n    >\n      <Card.Heading>{transform.name}</Card.Heading>\n      <Card.Meta>{transform.description}</Card.Meta>\n      {transform.state && (\n        <Card.Tags>\n          <PluginStateInfo state={transform.state} />\n        </Card.Tags>\n      )}\n    </Card>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css`\n      margin: 0;\n      padding: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport const TransformationsEditor = withTheme(UnThemedTransformationsEditor);\n"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAmC,OAAnC;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAAuD,qBAAvD;AAGA,SAGEC,MAHF,EAOEC,4BAPF,QASO,eATP;AAUA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SACEC,KADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,eAJF,EAMEC,aANF,EAOEC,SAPF,EAQEC,KARF,EASEC,UATF,EAUEC,UAVF,EAWEC,IAXF,QAYO,aAZP;AAaA,SAASC,yBAAT,QAA0C,+CAA1C;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,eAAT,QAAgC,iDAAhC;AAEA,SAASC,uBAAT,QAAwC,mBAAxC;AAEA,SAASC,iBAAT,QAAkC,kCAAlC;AAEA,SAASC,2BAAT,QAA4C,+BAA5C;;;;AAGA,MAAMC,iBAAiB,GAAG,sEAA1B;;AAaA,MAAMC,6BAAN,SAA4CvB,KAAK,CAACwB,aAAlD,CAAmG;EAGjGC,WAAW,CAACC,KAAD,EAAoC;IAC7C,MAAMA,KAAN;;IAD6C;;IAAA,wCAe7BC,KAAD,IAA0C;MACzD,KAAKC,QAAL,CAAc;QAAEC,MAAM,EAAEF,KAAK,CAACG,MAAN,CAAaC;MAAvB,CAAd;IACD,CAjB8C;;IAAA,yCAmB5BJ,KAAD,IAAkD;MAClE,IAAIA,KAAK,CAACK,GAAN,KAAc,OAAlB,EAA2B;QACzB,MAAM;UAAEH;QAAF,IAAa,KAAKI,KAAxB;;QACA,IAAIJ,MAAJ,EAAY;UACV,MAAMK,KAAK,GAAGL,MAAM,CAACM,WAAP,EAAd;UACA,MAAMC,QAAQ,GAAGhC,4BAA4B,CAACiC,IAA7B,GAAoCC,MAApC,CAA4CC,CAAD,IAAO;YACjE,MAAMC,GAAG,GAAG,CAACD,CAAC,CAACE,IAAF,GAASF,CAAC,CAACG,WAAZ,EAAyBP,WAAzB,EAAZ;YACA,OAAOK,GAAG,CAACG,OAAJ,CAAYT,KAAZ,KAAsB,CAA7B;UACD,CAHgB,CAAjB;;UAIA,IAAIE,QAAQ,CAACQ,MAAT,GAAkB,CAAtB,EAAyB;YACvB,KAAKC,mBAAL,CAAyB;cAAEd,KAAK,EAAEK,QAAQ,CAAC,CAAD,CAAR,CAAYU;YAArB,CAAzB;UACD;QACF;MACF,CAZD,MAYO,IAAInB,KAAK,CAACoB,OAAN,KAAkB,EAAtB,EAA0B;QAC/B;QACA,KAAKnB,QAAL,CAAc;UAAEC,MAAM,EAAE,EAAV;UAAcmB,UAAU,EAAE;QAA1B,CAAd;QACArB,KAAK,CAACsB,eAAN,GAH+B,CAGN;MAC1B;IACF,CArC8C;;IAAA,iDA6EpBR,IAAD,IAAkB;MAC1C,MAAM;QAAES;MAAF,IAAsB,KAAKjB,KAAjC;MACA,IAAIkB,MAAM,GAAG,CAAb;MACA,MAAMC,WAAW,GAAGF,eAAe,CAACZ,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACO,EAAF,CAAKO,UAAL,CAAgBZ,IAAhB,CAA9B,EAAqDa,GAArD,CAA0Df,CAAD,IAAOA,CAAC,CAACO,EAAlE,CAApB;;MAEA,IAAIM,WAAW,CAACR,MAAZ,KAAuB,CAA3B,EAA8B;QAC5BO,MAAM,GAAGI,IAAI,CAACC,GAAL,CAAS,GAAGJ,WAAW,CAACE,GAAZ,CAAiBG,CAAD,IAAOC,QAAQ,CAACD,CAAC,CAACE,KAAF,CAAQ,KAAR,EAAgB,CAAhB,CAAD,EAAqB,EAArB,CAA/B,CAAZ,IAAwE,CAAjF;MACD;;MAED,OAAQ,GAAElB,IAAK,IAAGU,MAAO,EAAzB;IACD,CAvF8C;;IAAA,6CAyFxBS,UAAD,IAAyC;MAC7D,MAAM;QAAEV;MAAF,IAAsB,KAAKjB,KAAjC;MAEA,MAAMkB,MAAM,GAAG,KAAKU,uBAAL,CAA6BD,UAAU,CAAC7B,KAAxC,CAAf;MACA,KAAKH,QAAL,CAAc;QAAEC,MAAM,EAAE,EAAV;QAAcmB,UAAU,EAAE;MAA1B,CAAd;MACA,KAAKc,QAAL,CAAc,CACZ,GAAGZ,eADS,EAEZ;QACEJ,EAAE,EAAEK,MADN;QAEEY,cAAc,EAAE;UACdjB,EAAE,EAAEc,UAAU,CAAC7B,KADD;UAEdiC,OAAO,EAAE;QAFK;MAFlB,CAFY,CAAd;IAUD,CAxG8C;;IAAA,gDA0GtB,CAACC,GAAD,EAAcC,MAAd,KAAgD;MACvE,MAAM;QAAEhB;MAAF,IAAsB,KAAKjB,KAAjC;MACA,MAAMkC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWnB,eAAX,CAAb;MACAiB,IAAI,CAACF,GAAD,CAAJ,CAAUF,cAAV,GAA2BG,MAA3B;MACA,KAAKJ,QAAL,CAAcK,IAAd;IACD,CA/G8C;;IAAA,gDAiHrBF,GAAD,IAAiB;MACxC,MAAM;QAAEf;MAAF,IAAsB,KAAKjB,KAAjC;MACA,MAAMkC,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWnB,eAAX,CAAb;MACAiB,IAAI,CAACG,MAAL,CAAYL,GAAZ,EAAiB,CAAjB;MACA,KAAKH,QAAL,CAAcK,IAAd;IACD,CAtH8C;;IAAA,mCAwHlCI,MAAD,IAAwB;MAClC,MAAM;QAAErB;MAAF,IAAsB,KAAKjB,KAAjC;;MAEA,IAAI,CAACsC,MAAD,IAAW,CAACA,MAAM,CAACC,WAAvB,EAAoC;QAClC;MACD;;MAED,MAAMC,UAAU,GAAGF,MAAM,CAACG,MAAP,CAAcC,KAAjC;MACA,MAAMC,QAAQ,GAAGL,MAAM,CAACC,WAAP,CAAmBG,KAApC;;MACA,IAAIF,UAAU,KAAKG,QAAnB,EAA6B;QAC3B;MACD;;MACD,MAAMC,MAAM,GAAGT,KAAK,CAACC,IAAN,CAAWnB,eAAX,CAAf;MACA,MAAM,CAAC4B,OAAD,IAAYD,MAAM,CAACP,MAAP,CAAcG,UAAd,EAA0B,CAA1B,CAAlB;MACAI,MAAM,CAACP,MAAP,CAAcM,QAAd,EAAwB,CAAxB,EAA2BE,OAA3B;MACA,KAAKhB,QAAL,CAAce,MAAd;IACD,CAxI8C;;IAAA,qDA0IjB,MAAM;MAClC,MAAM;QAAEE,IAAF;QAAQ7B;MAAR,IAA4B,KAAKjB,KAAvC;MAEA,oBACE,KAAC,eAAD;QAAiB,SAAS,EAAE,KAAK+C,SAAjC;QAAA,uBACE,KAAC,SAAD;UAAW,WAAW,EAAC,sBAAvB;UAA8C,SAAS,EAAC,UAAxD;UAAA,UACIC,QAAD,IAAc;YACb,oBACE;cAAK,GAAG,EAAEA,QAAQ,CAACC;YAAnB,GAAiCD,QAAQ,CAACE,cAA1C;cAAA,wBACE,KAAC,2BAAD;gBACE,OAAO,EAAEjC,eADX;gBAEE,IAAI,EAAE6B,IAFR;gBAGE,QAAQ,EAAE,KAAKK,sBAHjB;gBAIE,QAAQ,EAAE,KAAKC;cAJjB,EADF,EAOGJ,QAAQ,CAACK,WAPZ;YAAA,GADF;UAWD;QAbH;MADF,EADF;IAmBD,CAhK8C;;IAE7C,MAAMpC,gBAAe,GAAGxB,KAAK,CAAC6D,KAAN,CAAYrC,eAAZ,IAA+B,EAAvD;;IAEA,MAAMsC,GAAG,GAAG,KAAKC,sBAAL,CAA4BvC,gBAA5B,CAAZ;IACA,KAAKjB,KAAL,GAAa;MACXiB,eAAe,EAAEA,gBAAe,CAACI,GAAhB,CAAoB,CAACf,CAAD,EAAIkB,CAAJ,MAAW;QAC9CM,cAAc,EAAExB,CAD8B;QAE9CO,EAAE,EAAE0C,GAAG,CAAC/B,CAAD;MAFuC,CAAX,CAApB,CADN;MAKXsB,IAAI,EAAE,EALK;MAMXlD,MAAM,EAAE;IANG,CAAb;EAQD;;EA0BD4D,sBAAsB,CAACvC,eAAD,EAA2C;IAC/D,MAAMwC,sBAA8C,GAAG,EAAvD;IACA,MAAMC,iBAA2B,GAAG,EAApC;;IAEA,KAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,eAAe,CAACN,MAApC,EAA4Ca,CAAC,EAA7C,EAAiD;MAC/C,MAAMM,cAAc,GAAGb,eAAe,CAACO,CAAD,CAAtC;;MACA,IAAIiC,sBAAsB,CAAC3B,cAAc,CAACjB,EAAhB,CAAtB,KAA8C8C,SAAlD,EAA6D;QAC3DF,sBAAsB,CAAC3B,cAAc,CAACjB,EAAhB,CAAtB,GAA4C,CAA5C;MACD,CAFD,MAEO;QACL4C,sBAAsB,CAAC3B,cAAc,CAACjB,EAAhB,CAAtB,IAA6C,CAA7C;MACD;;MACD6C,iBAAiB,CAACE,IAAlB,CAAwB,GAAE3C,eAAe,CAACO,CAAD,CAAf,CAAmBX,EAAG,IAAG4C,sBAAsB,CAACxC,eAAe,CAACO,CAAD,CAAf,CAAmBX,EAApB,CAAwB,EAAjG;IACD;;IACD,OAAO6C,iBAAP;EACD;;EAEDG,iBAAiB,GAAG;IAClB,KAAKC,YAAL,GAAoB,KAAKrE,KAAL,CAAW6D,KAAX,CACjBS,cADiB,GAEjBC,OAFiB,CAET;MAAEC,cAAc,EAAE,KAAlB;MAAyBC,eAAe,EAAE;IAA1C,CAFS,EAGjBC,SAHiB,CAGP;MACTjC,IAAI,EAAGkC,SAAD,IAA0B,KAAKzE,QAAL,CAAc;QAAEmD,IAAI,EAAEsB,SAAS,CAACC;MAAlB,CAAd;IADvB,CAHO,CAApB;EAMD;;EAEDC,oBAAoB,GAAG;IACrB,IAAI,KAAKR,YAAT,EAAuB;MACrB,KAAKA,YAAL,CAAkBS,WAAlB;IACD;EACF;;EAED1C,QAAQ,CAACZ,eAAD,EAAyD;IAC/D,KAAKtB,QAAL,CAAc;MAAEsB;IAAF,CAAd;IACA,KAAKxB,KAAL,CAAW6D,KAAX,CAAiBkB,kBAAjB,CAAoCvD,eAAe,CAACI,GAAhB,CAAqBf,CAAD,IAAOA,CAAC,CAACwB,cAA7B,CAApC;EACD,CA5EgG,CA8EjG;EACA;;;EAsFA2C,sBAAsB,GAAG;IACvB,MAAM;MAAExD,eAAF;MAAmBrB;IAAnB,IAA8B,KAAKI,KAAzC;IACA,IAAI0E,MAAuB,GAAG,IAA9B;IACA,IAAIC,MAAM,GAAGxG,4BAA4B,CAACiC,IAA7B,GAAoCwE,IAApC,CAAyC,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACrE,IAAF,GAASsE,CAAC,CAACtE,IAAX,GAAkB,CAAlB,GAAsBsE,CAAC,CAACtE,IAAF,GAASqE,CAAC,CAACrE,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAAjG,CAAb;;IAEA,IAAIZ,MAAJ,EAAY;MACV,MAAMK,KAAK,GAAGL,MAAM,CAACM,WAAP,EAAd;MACA,MAAMC,QAAQ,GAAGwE,MAAM,CAACtE,MAAP,CAAeC,CAAD,IAAO;QACpC,MAAMC,GAAG,GAAG,CAACD,CAAC,CAACE,IAAF,GAASF,CAAC,CAACG,WAAZ,EAAyBP,WAAzB,EAAZ;QACA,OAAOK,GAAG,CAACG,OAAJ,CAAYT,KAAZ,KAAsB,CAA7B;MACD,CAHgB,CAAjB;MAKAyE,MAAM,gBACJ;QAAA,WACGvE,QAAQ,CAACQ,MADZ,SACuBgE,MAAM,CAAChE,MAD9B,4BAEE,KAAC,UAAD;UACE,IAAI,EAAC,OADP;UAEE,OAAO,EAAE,MAAM;YACb,KAAKhB,QAAL,CAAc;cAAEC,MAAM,EAAE;YAAV,CAAd;UACD;QAJH,EAFF;MAAA,EADF;MAYA+E,MAAM,GAAGxE,QAAT;IACD;;IAED,MAAM4E,YAAY,GAAG,EAAC9D,eAAD,aAACA,eAAD,eAACA,eAAe,CAAEN,MAAlB,CAArB;IACA,MAAMI,UAAU,GAAGgE,YAAY,IAAI,KAAK/E,KAAL,CAAWe,UAA9C;;IAEA,IAAI,CAAC2D,MAAD,IAAW3D,UAAX,IAAyB,CAACgE,YAA9B,EAA4C;MAC1CL,MAAM,gBACJ,KAAC,UAAD;QACE,IAAI,EAAC,OADP;QAEE,OAAO,EAAE,MAAM;UACb,KAAK/E,QAAL,CAAc;YAAEoB,UAAU,EAAE;UAAd,CAAd;QACD;MAJH,EADF;IAQD;;IAED,oBACE;MAAA,WACGgE,YAAY,iBACX,KAAC,SAAD;QAAW,IAAI,EAAE,CAAjB;QAAA,uBACE,KAAC,yBAAD;UAAoC,UAAU,EAAE1F,iBAAhD;UAAmE,YAAY,EAAE,KAAjF;UAAA,UACG,CAAC2F,WAAD,EAAcC,SAAd,KAA4B;YAC3B,IAAID,WAAJ,EAAiB;cACf,OAAO,IAAP;YACD;;YAED,oBACE,MAAC,KAAD;cACE,KAAK,EAAC,iBADR;cAEE,QAAQ,EAAC,MAFX;cAGE,QAAQ,EAAE,MAAM;gBACdC,SAAS,CAAC,IAAD,CAAT;cACD,CALH;cAAA,oCAOE;gBAAA,oJAEuB,cAFvB,6IAIkC,cAJlC,oGAKiG,GALjG;cAAA,EAPF,gBAcE;gBACE,IAAI,EAAEjG,WAAW,CAACd,MAAM,CAACgH,eAAR,CADnB;gBAEE,SAAS,EAAC,eAFZ;gBAGE,MAAM,EAAC,QAHT;gBAIE,GAAG,EAAC,YAJN;gBAAA;cAAA,EAdF;YAAA,EADF;UAyBD;QA/BH;MADF,EAFJ,EAsCGnE,UAAU,gBACT,MAAC,aAAD;QAAA,wBACE,KAAC,KAAD;UACE,cAAY3C,SAAS,CAAC+G,UAAV,CAAqBC,UAArB,CAAgCC,WAD9C;UAEE,KAAK,EAAEzF,MAAF,aAAEA,MAAF,cAAEA,MAAF,GAAY,EAFnB;UAGE,SAAS,EAAE,CAACmF,YAHd;UAIE,WAAW,EAAC,oBAJd;UAKE,QAAQ,EAAE,KAAKO,cALjB;UAME,SAAS,EAAE,KAAKC,eANlB;UAOE,MAAM,EAAEb;QAPV,EADF,EAWGC,MAAM,CAACtD,GAAP,CAAYf,CAAD,IAAO;UACjB,oBACE,KAAC,kBAAD;YAEE,SAAS,EAAEA,CAFb;YAGE,OAAO,EAAE,MAAM;cACb,KAAKM,mBAAL,CAAyB;gBAAEd,KAAK,EAAEQ,CAAC,CAACO;cAAX,CAAzB;YACD;UALH,GACOP,CAAC,CAACE,IADT,CADF;QASD,CAVA,CAXH;MAAA,EADS,gBAyBT,KAAC,MAAD;QACE,IAAI,EAAC,MADP;QAEE,OAAO,EAAC,WAFV;QAGE,OAAO,EAAE,MAAM;UACb,KAAKb,QAAL,CAAc;YAAEoB,UAAU,EAAE;UAAd,CAAd;QACD,CALH;QAAA;MAAA,EA/DJ;IAAA,EADF;EA4ED;;EAEDyE,MAAM,GAAG;IACP,MAAM;MACJlC,KAAK,EAAE;QAAEmC;MAAF;IADH,IAEF,KAAKhG,KAFT;IAGA,MAAM;MAAEwB;IAAF,IAAsB,KAAKjB,KAAjC;IAEA,MAAM0F,aAAa,GAAGzE,eAAe,CAACN,MAAhB,GAAyB,CAA/C;;IAEA,IAAI,CAAC+E,aAAD,IAAkBD,KAAtB,EAA6B;MAC3B,gEAAO,KAAC,iBAAD;QAAmB,OAAO,EAAC;MAA3B,EAAP;IACD;;IAED,oBACE,KAAC,eAAD;MAAiB,aAAa,EAAC,MAA/B;MAAA,uBACE,KAAC,SAAD;QAAW,OAAO,EAAC,IAAnB;QAAA,uBACE;UAAK,cAAYrH,SAAS,CAAC+G,UAAV,CAAqBQ,YAArB,CAAkCC,OAAnD;UAAA,WACGF,aAAa,IAAID,KAAjB,gBACC,KAAC,KAAD;YACE,QAAQ,EAAEvG,uBAAuB,CAAC2G,KADpC;YAEE,KAAK,EAAC;UAFR,EADD,GAKG,IANN,EAOGH,aAAa,IAAI,KAAKI,2BAAL,EAPpB,EAQG,KAAKrB,sBAAL,EARH;QAAA;MADF;IADF,EADF;EAgBD;;AAxTgG;;AAgUnG,SAASsB,kBAAT,CAA4B;EAAEC,SAAF;EAAaC;AAAb,CAA5B,EAA6E;EAC3E,MAAMC,MAAM,GAAGrH,UAAU,CAACsH,SAAD,CAAzB;EACA,oBACE,MAAC,IAAD;IACE,SAAS,EAAED,MAAM,CAACE,IADpB;IAEE,cAAYhI,SAAS,CAAC+G,UAAV,CAAqBQ,YAArB,CAAkCU,YAAlC,CAA+CL,SAAS,CAACxF,IAAzD,CAFd;IAGE,OAAO,EAAEyF,OAHX;IAAA,wBAKE,KAAC,IAAD,CAAM,OAAN;MAAA,UAAeD,SAAS,CAACxF;IAAzB,EALF,eAME,KAAC,IAAD,CAAM,IAAN;MAAA,UAAYwF,SAAS,CAACvF;IAAtB,EANF,EAOGuF,SAAS,CAAChG,KAAV,iBACC,KAAC,IAAD,CAAM,IAAN;MAAA,uBACE,KAAC,eAAD;QAAiB,KAAK,EAAEgG,SAAS,CAAChG;MAAlC;IADF,EARJ;EAAA,EADF;AAeD;;AAED,MAAMmG,SAAS,GAAIG,KAAD,IAA0B;EAC1C,OAAO;IACLF,IAAI,EAAEtI,GAAI;AACd;AACA,iBAAiBwI,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AAClC;EAJS,CAAP;AAMD,CAPD;;AASA,OAAO,MAAMC,qBAAqB,GAAG9H,SAAS,CAACY,6BAAD,CAAvC"},"metadata":{},"sourceType":"module"}