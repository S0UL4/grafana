{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { getDisplayProcessor } from '../../field';\nimport { createTheme } from '../../themes';\nimport { FieldType } from '../../types/dataFrame';\nimport { ArrayVector } from '../../vector/ArrayVector';\nimport { DataTransformerID } from './ids';\nimport { join } from './joinDataFrames';\n/**\n * @internal\n */\n\n/* eslint-disable */\n// prettier-ignore\n\nexport const histogramBucketSizes = [1e-9, 2e-9, 2.5e-9, 4e-9, 5e-9, 1e-8, 2e-8, 2.5e-8, 4e-8, 5e-8, 1e-7, 2e-7, 2.5e-7, 4e-7, 5e-7, 1e-6, 2e-6, 2.5e-6, 4e-6, 5e-6, 1e-5, 2e-5, 2.5e-5, 4e-5, 5e-5, 1e-4, 2e-4, 2.5e-4, 4e-4, 5e-4, 1e-3, 2e-3, 2.5e-3, 4e-3, 5e-3, 1e-2, 2e-2, 2.5e-2, 4e-2, 5e-2, 1e-1, 2e-1, 2.5e-1, 4e-1, 5e-1, 1, 2, 4, 5, 1e+1, 2e+1, 2.5e+1, 4e+1, 5e+1, 1e+2, 2e+2, 2.5e+2, 4e+2, 5e+2, 1e+3, 2e+3, 2.5e+3, 4e+3, 5e+3, 1e+4, 2e+4, 2.5e+4, 4e+4, 5e+4, 1e+5, 2e+5, 2.5e+5, 4e+5, 5e+5, 1e+6, 2e+6, 2.5e+6, 4e+6, 5e+6, 1e+7, 2e+7, 2.5e+7, 4e+7, 5e+7, 1e+8, 2e+8, 2.5e+8, 4e+8, 5e+8, 1e+9, 2e+9, 2.5e+9, 4e+9, 5e+9];\n/* eslint-enable */\n\nconst histFilter = [null];\n\nconst histSort = (a, b) => a - b;\n/**\n * @alpha\n */\n\n\n/**\n * This is a helper class to use the same text in both a panel and transformer UI\n *\n * @internal\n */\nexport const histogramFieldInfo = {\n  bucketSize: {\n    name: 'Bucket size',\n    description: undefined\n  },\n  bucketOffset: {\n    name: 'Bucket offset',\n    description: 'for non-zero-based buckets'\n  },\n  combine: {\n    name: 'Combine series',\n    description: 'combine all series into a single histogram'\n  }\n};\n/**\n * @alpha\n */\n\nexport const histogramTransformer = {\n  id: DataTransformerID.histogram,\n  name: 'Histogram',\n  description: 'Calculate a histogram from input data',\n  defaultOptions: {\n    fields: {}\n  },\n  operator: options => source => source.pipe(map(data => histogramTransformer.transformer(options)(data))),\n  transformer: options => data => {\n    if (!Array.isArray(data) || data.length === 0) {\n      return data;\n    }\n\n    const hist = buildHistogram(data, options);\n\n    if (hist == null) {\n      return [];\n    }\n\n    return [histogramFieldsToFrame(hist)];\n  }\n};\n/**\n * @internal\n */\n\nexport const histogramFrameBucketMinFieldName = 'BucketMin';\n/**\n * @internal\n */\n\nexport const histogramFrameBucketMaxFieldName = 'BucketMax';\n/**\n * @alpha\n */\n\n/**\n * Given a frame, find the explicit histogram fields\n *\n * @alpha\n */\nexport function getHistogramFields(frame) {\n  let bucketMin = undefined;\n  let bucketMax = undefined;\n  const counts = [];\n\n  for (const field of frame.fields) {\n    if (field.name === histogramFrameBucketMinFieldName) {\n      bucketMin = field;\n    } else if (field.name === histogramFrameBucketMaxFieldName) {\n      bucketMax = field;\n    } else if (field.type === FieldType.number) {\n      counts.push(field);\n    }\n  }\n\n  if (bucketMin && bucketMax && counts.length) {\n    return {\n      bucketMin,\n      bucketMax,\n      counts\n    };\n  }\n\n  return undefined;\n}\nconst APPROX_BUCKETS = 20;\n/**\n * @alpha\n */\n\nexport function buildHistogram(frames, options) {\n  var _options$bucketOffset, _config;\n\n  let bucketSize = options === null || options === void 0 ? void 0 : options.bucketSize;\n  let bucketOffset = (_options$bucketOffset = options === null || options === void 0 ? void 0 : options.bucketOffset) !== null && _options$bucketOffset !== void 0 ? _options$bucketOffset : 0; // if bucket size is auto, try to calc from all numeric fields\n\n  if (!bucketSize || bucketSize < 0) {\n    let allValues = []; // TODO: include field configs!\n\n    for (const frame of frames) {\n      for (const field of frame.fields) {\n        if (field.type === FieldType.number) {\n          allValues = allValues.concat(field.values.toArray().map(val => {\n            var _field$config$decimal;\n\n            return Number(val.toFixed((_field$config$decimal = field.config.decimals) !== null && _field$config$decimal !== void 0 ? _field$config$decimal : 0));\n          }));\n        }\n      }\n    }\n\n    allValues.sort((a, b) => a - b);\n    let smallestDelta = Infinity; // TODO: case of 1 value needs work\n\n    if (allValues.length === 1) {\n      smallestDelta = 1;\n    } else {\n      for (let i = 1; i < allValues.length; i++) {\n        let delta = allValues[i] - allValues[i - 1];\n\n        if (delta !== 0) {\n          smallestDelta = Math.min(smallestDelta, delta);\n        }\n      }\n    }\n\n    let min = allValues[0];\n    let max = allValues[allValues.length - 1];\n    let range = max - min;\n    const targetSize = range / APPROX_BUCKETS; // choose bucket\n\n    for (let i = 0; i < histogramBucketSizes.length; i++) {\n      let _bucketSize = histogramBucketSizes[i];\n\n      if (targetSize < _bucketSize && _bucketSize >= smallestDelta) {\n        bucketSize = _bucketSize;\n        break;\n      }\n    }\n  }\n\n  const getBucket = v => incrRoundDn(v - bucketOffset, bucketSize) + bucketOffset;\n\n  let histograms = [];\n  let counts = [];\n  let config = undefined;\n\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.number) {\n        let fieldHist = histogram(field.values.toArray(), getBucket, histFilter, histSort);\n        histograms.push(fieldHist);\n        counts.push(Object.assign({}, field, {\n          config: Object.assign({}, field.config, {\n            unit: undefined\n          })\n        }));\n\n        if (!config && Object.keys(field.config).length) {\n          config = field.config;\n        }\n      }\n    }\n  } // Quit early for empty a\n\n\n  if (!counts.length) {\n    return null;\n  } // align histograms\n\n\n  let joinedHists = join(histograms); // zero-fill all undefined values (missing buckets -> 0 counts)\n\n  for (let histIdx = 1; histIdx < joinedHists.length; histIdx++) {\n    let hist = joinedHists[histIdx];\n\n    for (let bucketIdx = 0; bucketIdx < hist.length; bucketIdx++) {\n      if (hist[bucketIdx] == null) {\n        hist[bucketIdx] = 0;\n      }\n    }\n  }\n\n  const bucketMin = {\n    name: histogramFrameBucketMinFieldName,\n    values: new ArrayVector(joinedHists[0]),\n    type: FieldType.number,\n    state: undefined,\n    config: (_config = config) !== null && _config !== void 0 ? _config : {}\n  };\n  const bucketMax = Object.assign({}, bucketMin, {\n    name: histogramFrameBucketMaxFieldName,\n    values: new ArrayVector(joinedHists[0].map(v => v + bucketSize))\n  });\n\n  if (options !== null && options !== void 0 && options.combine) {\n    const vals = new Array(joinedHists[0].length).fill(0);\n\n    for (let i = 1; i < joinedHists.length; i++) {\n      for (let j = 0; j < vals.length; j++) {\n        vals[j] += joinedHists[i][j];\n      }\n    }\n\n    counts = [Object.assign({}, counts[0], {\n      name: 'Count',\n      values: new ArrayVector(vals),\n      type: FieldType.number,\n      state: undefined\n    })];\n  } else {\n    counts.forEach((field, i) => {\n      field.values = new ArrayVector(joinedHists[i + 1]);\n    });\n  }\n\n  return {\n    bucketMin,\n    bucketMax,\n    counts\n  };\n}\n/**\n * @internal\n */\n\nexport function incrRound(num, incr) {\n  return Math.round(num / incr) * incr;\n}\n/**\n * @internal\n */\n\nexport function incrRoundUp(num, incr) {\n  return Math.ceil(num / incr) * incr;\n}\n/**\n * @internal\n */\n\nexport function incrRoundDn(num, incr) {\n  return Math.floor(num / incr) * incr;\n}\n\nfunction histogram(vals, getBucket, filterOut, sort) {\n  let hist = new Map();\n\n  for (let i = 0; i < vals.length; i++) {\n    let v = vals[i];\n\n    if (v != null) {\n      v = getBucket(v);\n    }\n\n    let entry = hist.get(v);\n\n    if (entry) {\n      entry.count++;\n    } else {\n      hist.set(v, {\n        value: v,\n        count: 1\n      });\n    }\n  }\n\n  filterOut && filterOut.forEach(v => hist.delete(v));\n  let bins = [...hist.values()];\n  sort && bins.sort((a, b) => sort(a.value, b.value));\n  let values = Array(bins.length);\n  let counts = Array(bins.length);\n\n  for (let i = 0; i < bins.length; i++) {\n    values[i] = bins[i].value;\n    counts[i] = bins[i].count;\n  }\n\n  return [values, counts];\n}\n/**\n * @internal\n */\n\n\nexport function histogramFieldsToFrame(info, theme) {\n  if (!info.bucketMin.display) {\n    const display = getDisplayProcessor({\n      field: info.bucketMin,\n      theme: theme !== null && theme !== void 0 ? theme : createTheme()\n    });\n    info.bucketMin.display = display;\n    info.bucketMax.display = display;\n  }\n\n  return {\n    fields: [info.bucketMin, info.bucketMax, ...info.counts],\n    length: info.bucketMin.values.length\n  };\n}","map":{"version":3,"names":["map","getDisplayProcessor","createTheme","FieldType","ArrayVector","DataTransformerID","join","histogramBucketSizes","histFilter","histSort","a","b","histogramFieldInfo","bucketSize","name","description","undefined","bucketOffset","combine","histogramTransformer","id","histogram","defaultOptions","fields","operator","options","source","pipe","data","transformer","Array","isArray","length","hist","buildHistogram","histogramFieldsToFrame","histogramFrameBucketMinFieldName","histogramFrameBucketMaxFieldName","getHistogramFields","frame","bucketMin","bucketMax","counts","field","type","number","push","APPROX_BUCKETS","frames","allValues","concat","values","toArray","val","Number","toFixed","config","decimals","sort","smallestDelta","Infinity","i","delta","Math","min","max","range","targetSize","_bucketSize","getBucket","v","incrRoundDn","histograms","fieldHist","unit","Object","keys","joinedHists","histIdx","bucketIdx","state","vals","fill","j","forEach","incrRound","num","incr","round","incrRoundUp","ceil","floor","filterOut","Map","entry","get","count","set","value","delete","bins","info","theme","display"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/transformers/histogram.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { getDisplayProcessor } from '../../field';\nimport { createTheme, GrafanaTheme2 } from '../../themes';\nimport { SynchronousDataTransformerInfo } from '../../types';\nimport { DataFrame, Field, FieldConfig, FieldType } from '../../types/dataFrame';\nimport { ArrayVector } from '../../vector/ArrayVector';\n\nimport { DataTransformerID } from './ids';\nimport { AlignedData, join } from './joinDataFrames';\n\n/**\n * @internal\n */\n/* eslint-disable */\n// prettier-ignore\nexport const histogramBucketSizes = [\n  1e-9,  2e-9,  2.5e-9,  4e-9,  5e-9,\n  1e-8,  2e-8,  2.5e-8,  4e-8,  5e-8,\n  1e-7,  2e-7,  2.5e-7,  4e-7,  5e-7,\n  1e-6,  2e-6,  2.5e-6,  4e-6,  5e-6,\n  1e-5,  2e-5,  2.5e-5,  4e-5,  5e-5,\n  1e-4,  2e-4,  2.5e-4,  4e-4,  5e-4,\n  1e-3,  2e-3,  2.5e-3,  4e-3,  5e-3,\n  1e-2,  2e-2,  2.5e-2,  4e-2,  5e-2,\n  1e-1,  2e-1,  2.5e-1,  4e-1,  5e-1,\n  1,     2,              4,     5,\n  1e+1,  2e+1,  2.5e+1,  4e+1,  5e+1,\n  1e+2,  2e+2,  2.5e+2,  4e+2,  5e+2,\n  1e+3,  2e+3,  2.5e+3,  4e+3,  5e+3,\n  1e+4,  2e+4,  2.5e+4,  4e+4,  5e+4,\n  1e+5,  2e+5,  2.5e+5,  4e+5,  5e+5,\n  1e+6,  2e+6,  2.5e+6,  4e+6,  5e+6,\n  1e+7,  2e+7,  2.5e+7,  4e+7,  5e+7,\n  1e+8,  2e+8,  2.5e+8,  4e+8,  5e+8,\n  1e+9,  2e+9,  2.5e+9,  4e+9,  5e+9,\n];\n/* eslint-enable */\n\nconst histFilter = [null];\nconst histSort = (a: number, b: number) => a - b;\n\n/**\n * @alpha\n */\nexport interface HistogramTransformerOptions {\n  bucketSize?: number; // 0 is auto\n  bucketOffset?: number;\n  // xMin?: number;\n  // xMax?: number;\n  combine?: boolean; // if multiple series are input, join them into one\n}\n\n/**\n * This is a helper class to use the same text in both a panel and transformer UI\n *\n * @internal\n */\nexport const histogramFieldInfo = {\n  bucketSize: {\n    name: 'Bucket size',\n    description: undefined,\n  },\n  bucketOffset: {\n    name: 'Bucket offset',\n    description: 'for non-zero-based buckets',\n  },\n  combine: {\n    name: 'Combine series',\n    description: 'combine all series into a single histogram',\n  },\n};\n\n/**\n * @alpha\n */\nexport const histogramTransformer: SynchronousDataTransformerInfo<HistogramTransformerOptions> = {\n  id: DataTransformerID.histogram,\n  name: 'Histogram',\n  description: 'Calculate a histogram from input data',\n  defaultOptions: {\n    fields: {},\n  },\n\n  operator: (options) => (source) => source.pipe(map((data) => histogramTransformer.transformer(options)(data))),\n\n  transformer: (options: HistogramTransformerOptions) => (data: DataFrame[]) => {\n    if (!Array.isArray(data) || data.length === 0) {\n      return data;\n    }\n    const hist = buildHistogram(data, options);\n    if (hist == null) {\n      return [];\n    }\n    return [histogramFieldsToFrame(hist)];\n  },\n};\n\n/**\n * @internal\n */\nexport const histogramFrameBucketMinFieldName = 'BucketMin';\n\n/**\n * @internal\n */\nexport const histogramFrameBucketMaxFieldName = 'BucketMax';\n\n/**\n * @alpha\n */\nexport interface HistogramFields {\n  bucketMin: Field;\n  bucketMax: Field;\n  counts: Field[]; // frequency\n}\n\n/**\n * Given a frame, find the explicit histogram fields\n *\n * @alpha\n */\nexport function getHistogramFields(frame: DataFrame): HistogramFields | undefined {\n  let bucketMin: Field | undefined = undefined;\n  let bucketMax: Field | undefined = undefined;\n  const counts: Field[] = [];\n  for (const field of frame.fields) {\n    if (field.name === histogramFrameBucketMinFieldName) {\n      bucketMin = field;\n    } else if (field.name === histogramFrameBucketMaxFieldName) {\n      bucketMax = field;\n    } else if (field.type === FieldType.number) {\n      counts.push(field);\n    }\n  }\n  if (bucketMin && bucketMax && counts.length) {\n    return {\n      bucketMin,\n      bucketMax,\n      counts,\n    };\n  }\n  return undefined;\n}\n\nconst APPROX_BUCKETS = 20;\n\n/**\n * @alpha\n */\nexport function buildHistogram(frames: DataFrame[], options?: HistogramTransformerOptions): HistogramFields | null {\n  let bucketSize = options?.bucketSize;\n  let bucketOffset = options?.bucketOffset ?? 0;\n\n  // if bucket size is auto, try to calc from all numeric fields\n  if (!bucketSize || bucketSize < 0) {\n    let allValues: number[] = [];\n\n    // TODO: include field configs!\n    for (const frame of frames) {\n      for (const field of frame.fields) {\n        if (field.type === FieldType.number) {\n          allValues = allValues.concat(\n            field.values.toArray().map((val: number) => Number(val.toFixed(field.config.decimals ?? 0)))\n          );\n        }\n      }\n    }\n\n    allValues.sort((a, b) => a - b);\n\n    let smallestDelta = Infinity;\n\n    // TODO: case of 1 value needs work\n    if (allValues.length === 1) {\n      smallestDelta = 1;\n    } else {\n      for (let i = 1; i < allValues.length; i++) {\n        let delta = allValues[i] - allValues[i - 1];\n\n        if (delta !== 0) {\n          smallestDelta = Math.min(smallestDelta, delta);\n        }\n      }\n    }\n\n    let min = allValues[0];\n    let max = allValues[allValues.length - 1];\n\n    let range = max - min;\n\n    const targetSize = range / APPROX_BUCKETS;\n\n    // choose bucket\n    for (let i = 0; i < histogramBucketSizes.length; i++) {\n      let _bucketSize = histogramBucketSizes[i];\n\n      if (targetSize < _bucketSize && _bucketSize >= smallestDelta) {\n        bucketSize = _bucketSize;\n        break;\n      }\n    }\n  }\n\n  const getBucket = (v: number) => incrRoundDn(v - bucketOffset, bucketSize!) + bucketOffset;\n\n  let histograms: AlignedData[] = [];\n  let counts: Field[] = [];\n  let config: FieldConfig | undefined = undefined;\n\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.number) {\n        let fieldHist = histogram(field.values.toArray(), getBucket, histFilter, histSort) as AlignedData;\n        histograms.push(fieldHist);\n        counts.push({\n          ...field,\n          config: {\n            ...field.config,\n            unit: undefined,\n          },\n        });\n        if (!config && Object.keys(field.config).length) {\n          config = field.config;\n        }\n      }\n    }\n  }\n\n  // Quit early for empty a\n  if (!counts.length) {\n    return null;\n  }\n\n  // align histograms\n  let joinedHists = join(histograms);\n\n  // zero-fill all undefined values (missing buckets -> 0 counts)\n  for (let histIdx = 1; histIdx < joinedHists.length; histIdx++) {\n    let hist = joinedHists[histIdx];\n\n    for (let bucketIdx = 0; bucketIdx < hist.length; bucketIdx++) {\n      if (hist[bucketIdx] == null) {\n        hist[bucketIdx] = 0;\n      }\n    }\n  }\n\n  const bucketMin: Field = {\n    name: histogramFrameBucketMinFieldName,\n    values: new ArrayVector(joinedHists[0]),\n    type: FieldType.number,\n    state: undefined,\n    config: config ?? {},\n  };\n  const bucketMax = {\n    ...bucketMin,\n    name: histogramFrameBucketMaxFieldName,\n    values: new ArrayVector(joinedHists[0].map((v) => v + bucketSize!)),\n  };\n\n  if (options?.combine) {\n    const vals = new Array(joinedHists[0].length).fill(0);\n    for (let i = 1; i < joinedHists.length; i++) {\n      for (let j = 0; j < vals.length; j++) {\n        vals[j] += joinedHists[i][j];\n      }\n    }\n    counts = [\n      {\n        ...counts[0],\n        name: 'Count',\n        values: new ArrayVector(vals),\n        type: FieldType.number,\n        state: undefined,\n      },\n    ];\n  } else {\n    counts.forEach((field, i) => {\n      field.values = new ArrayVector(joinedHists[i + 1]);\n    });\n  }\n\n  return {\n    bucketMin,\n    bucketMax,\n    counts,\n  };\n}\n\n/**\n * @internal\n */\nexport function incrRound(num: number, incr: number) {\n  return Math.round(num / incr) * incr;\n}\n\n/**\n * @internal\n */\nexport function incrRoundUp(num: number, incr: number) {\n  return Math.ceil(num / incr) * incr;\n}\n\n/**\n * @internal\n */\nexport function incrRoundDn(num: number, incr: number) {\n  return Math.floor(num / incr) * incr;\n}\n\nfunction histogram(\n  vals: number[],\n  getBucket: (v: number) => number,\n  filterOut?: any[] | null,\n  sort?: ((a: any, b: any) => number) | null\n) {\n  let hist = new Map();\n\n  for (let i = 0; i < vals.length; i++) {\n    let v = vals[i];\n\n    if (v != null) {\n      v = getBucket(v);\n    }\n\n    let entry = hist.get(v);\n\n    if (entry) {\n      entry.count++;\n    } else {\n      hist.set(v, { value: v, count: 1 });\n    }\n  }\n\n  filterOut && filterOut.forEach((v) => hist.delete(v));\n\n  let bins = [...hist.values()];\n\n  sort && bins.sort((a, b) => sort(a.value, b.value));\n\n  let values = Array(bins.length);\n  let counts = Array(bins.length);\n\n  for (let i = 0; i < bins.length; i++) {\n    values[i] = bins[i].value;\n    counts[i] = bins[i].count;\n  }\n\n  return [values, counts];\n}\n\n/**\n * @internal\n */\nexport function histogramFieldsToFrame(info: HistogramFields, theme?: GrafanaTheme2): DataFrame {\n  if (!info.bucketMin.display) {\n    const display = getDisplayProcessor({\n      field: info.bucketMin,\n      theme: theme ?? createTheme(),\n    });\n    info.bucketMin.display = display;\n    info.bucketMax.display = display;\n  }\n  return {\n    fields: [info.bucketMin, info.bucketMax, ...info.counts],\n    length: info.bucketMin.values.length,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}