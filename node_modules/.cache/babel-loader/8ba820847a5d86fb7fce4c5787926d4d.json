{"ast":null,"code":"import React, { useState } from 'react';\nimport { Button, HorizontalGroup, IconButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { GENERAL_FOLDER_UID } from '../../constants';\nimport { getStyles } from './ActionRow';\nimport { ConfirmDeleteModal } from './ConfirmDeleteModal';\nimport { MoveToFolderModal } from './MoveToFolderModal';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function ManageActions({\n  items,\n  folder,\n  onChange,\n  clearSelection\n}) {\n  var _items$get;\n\n  const styles = useStyles2(getStyles);\n  const canSave = folder === null || folder === void 0 ? void 0 : folder.canSave;\n  const hasEditPermissionInFolders = folder ? canSave : contextSrv.hasEditPermissionInFolders;\n  const canMove = hasEditPermissionInFolders;\n  const selectedFolders = Array.from((_items$get = items.get('folder')) !== null && _items$get !== void 0 ? _items$get : []);\n  const includesGeneralFolder = selectedFolders.find(result => result === GENERAL_FOLDER_UID);\n  const canDelete = hasEditPermissionInFolders && !includesGeneralFolder;\n  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const onMove = () => {\n    setIsMoveModalOpen(true);\n  };\n\n  const onDelete = () => {\n    setIsDeleteModalOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.actionRow,\n    \"data-testid\": \"manage-actions\",\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.rowContainer,\n      children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n        spacing: \"md\",\n        width: \"auto\",\n        children: [/*#__PURE__*/_jsx(IconButton, {\n          name: 'check-square',\n          onClick: clearSelection,\n          title: \"Uncheck everything\"\n        }), /*#__PURE__*/_jsx(Button, {\n          disabled: !canMove,\n          onClick: onMove,\n          icon: \"exchange-alt\",\n          variant: \"secondary\",\n          children: \"Move\"\n        }), /*#__PURE__*/_jsx(Button, {\n          disabled: !canDelete,\n          onClick: onDelete,\n          icon: \"trash-alt\",\n          variant: \"destructive\",\n          children: \"Delete\"\n        })]\n      })\n    }), /*#__PURE__*/_jsx(ConfirmDeleteModal, {\n      onDeleteItems: onChange,\n      results: items,\n      isOpen: isDeleteModalOpen,\n      onDismiss: () => setIsDeleteModalOpen(false)\n    }), /*#__PURE__*/_jsx(MoveToFolderModal, {\n      onMoveItems: onChange,\n      results: items,\n      isOpen: isMoveModalOpen,\n      onDismiss: () => setIsMoveModalOpen(false)\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","Button","HorizontalGroup","IconButton","useStyles2","contextSrv","GENERAL_FOLDER_UID","getStyles","ConfirmDeleteModal","MoveToFolderModal","ManageActions","items","folder","onChange","clearSelection","styles","canSave","hasEditPermissionInFolders","canMove","selectedFolders","Array","from","get","includesGeneralFolder","find","result","canDelete","isMoveModalOpen","setIsMoveModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","onMove","onDelete","actionRow","rowContainer"],"sources":["/home/soula/grafana/public/app/features/search/page/components/ManageActions.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { Button, HorizontalGroup, IconButton, IconName, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { FolderDTO } from 'app/types';\n\nimport { GENERAL_FOLDER_UID } from '../../constants';\nimport { OnMoveOrDeleleSelectedItems } from '../../types';\n\nimport { getStyles } from './ActionRow';\nimport { ConfirmDeleteModal } from './ConfirmDeleteModal';\nimport { MoveToFolderModal } from './MoveToFolderModal';\n\ntype Props = {\n  items: Map<string, Set<string>>;\n  folder?: FolderDTO; // when we are loading in folder page\n  onChange: OnMoveOrDeleleSelectedItems;\n  clearSelection: () => void;\n};\n\nexport function ManageActions({ items, folder, onChange, clearSelection }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const canSave = folder?.canSave;\n  const hasEditPermissionInFolders = folder ? canSave : contextSrv.hasEditPermissionInFolders;\n\n  const canMove = hasEditPermissionInFolders;\n\n  const selectedFolders = Array.from(items.get('folder') ?? []);\n  const includesGeneralFolder = selectedFolders.find((result) => result === GENERAL_FOLDER_UID);\n\n  const canDelete = hasEditPermissionInFolders && !includesGeneralFolder;\n  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const onMove = () => {\n    setIsMoveModalOpen(true);\n  };\n\n  const onDelete = () => {\n    setIsDeleteModalOpen(true);\n  };\n\n  return (\n    <div className={styles.actionRow} data-testid=\"manage-actions\">\n      <div className={styles.rowContainer}>\n        <HorizontalGroup spacing=\"md\" width=\"auto\">\n          <IconButton name={'check-square' as IconName} onClick={clearSelection} title=\"Uncheck everything\" />\n          <Button disabled={!canMove} onClick={onMove} icon=\"exchange-alt\" variant=\"secondary\">\n            Move\n          </Button>\n          <Button disabled={!canDelete} onClick={onDelete} icon=\"trash-alt\" variant=\"destructive\">\n            Delete\n          </Button>\n        </HorizontalGroup>\n      </div>\n\n      <ConfirmDeleteModal\n        onDeleteItems={onChange}\n        results={items}\n        isOpen={isDeleteModalOpen}\n        onDismiss={() => setIsDeleteModalOpen(false)}\n      />\n      <MoveToFolderModal\n        onMoveItems={onChange}\n        results={items}\n        isOpen={isMoveModalOpen}\n        onDismiss={() => setIsMoveModalOpen(false)}\n      />\n    </div>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,MAAT,EAAiBC,eAAjB,EAAkCC,UAAlC,EAAwDC,UAAxD,QAA0E,aAA1E;AACA,SAASC,UAAT,QAA2B,+BAA3B;AAGA,SAASC,kBAAT,QAAmC,iBAAnC;AAGA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;;AASA,OAAO,SAASC,aAAT,CAAuB;EAAEC,KAAF;EAASC,MAAT;EAAiBC,QAAjB;EAA2BC;AAA3B,CAAvB,EAA2E;EAAA;;EAChF,MAAMC,MAAM,GAAGX,UAAU,CAACG,SAAD,CAAzB;EAEA,MAAMS,OAAO,GAAGJ,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEI,OAAxB;EACA,MAAMC,0BAA0B,GAAGL,MAAM,GAAGI,OAAH,GAAaX,UAAU,CAACY,0BAAjE;EAEA,MAAMC,OAAO,GAAGD,0BAAhB;EAEA,MAAME,eAAe,GAAGC,KAAK,CAACC,IAAN,eAAWV,KAAK,CAACW,GAAN,CAAU,QAAV,CAAX,mDAAkC,EAAlC,CAAxB;EACA,MAAMC,qBAAqB,GAAGJ,eAAe,CAACK,IAAhB,CAAsBC,MAAD,IAAYA,MAAM,KAAKnB,kBAA5C,CAA9B;EAEA,MAAMoB,SAAS,GAAGT,0BAA0B,IAAI,CAACM,qBAAjD;EACA,MAAM,CAACI,eAAD,EAAkBC,kBAAlB,IAAwC5B,QAAQ,CAAC,KAAD,CAAtD;EACA,MAAM,CAAC6B,iBAAD,EAAoBC,oBAApB,IAA4C9B,QAAQ,CAAC,KAAD,CAA1D;;EAEA,MAAM+B,MAAM,GAAG,MAAM;IACnBH,kBAAkB,CAAC,IAAD,CAAlB;EACD,CAFD;;EAIA,MAAMI,QAAQ,GAAG,MAAM;IACrBF,oBAAoB,CAAC,IAAD,CAApB;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAEf,MAAM,CAACkB,SAAvB;IAAkC,eAAY,gBAA9C;IAAA,wBACE;MAAK,SAAS,EAAElB,MAAM,CAACmB,YAAvB;MAAA,uBACE,MAAC,eAAD;QAAiB,OAAO,EAAC,IAAzB;QAA8B,KAAK,EAAC,MAApC;QAAA,wBACE,KAAC,UAAD;UAAY,IAAI,EAAE,cAAlB;UAA8C,OAAO,EAAEpB,cAAvD;UAAuE,KAAK,EAAC;QAA7E,EADF,eAEE,KAAC,MAAD;UAAQ,QAAQ,EAAE,CAACI,OAAnB;UAA4B,OAAO,EAAEa,MAArC;UAA6C,IAAI,EAAC,cAAlD;UAAiE,OAAO,EAAC,WAAzE;UAAA;QAAA,EAFF,eAKE,KAAC,MAAD;UAAQ,QAAQ,EAAE,CAACL,SAAnB;UAA8B,OAAO,EAAEM,QAAvC;UAAiD,IAAI,EAAC,WAAtD;UAAkE,OAAO,EAAC,aAA1E;UAAA;QAAA,EALF;MAAA;IADF,EADF,eAaE,KAAC,kBAAD;MACE,aAAa,EAAEnB,QADjB;MAEE,OAAO,EAAEF,KAFX;MAGE,MAAM,EAAEkB,iBAHV;MAIE,SAAS,EAAE,MAAMC,oBAAoB,CAAC,KAAD;IAJvC,EAbF,eAmBE,KAAC,iBAAD;MACE,WAAW,EAAEjB,QADf;MAEE,OAAO,EAAEF,KAFX;MAGE,MAAM,EAAEgB,eAHV;MAIE,SAAS,EAAE,MAAMC,kBAAkB,CAAC,KAAD;IAJrC,EAnBF;EAAA,EADF;AA4BD"},"metadata":{},"sourceType":"module"}