{"ast":null,"code":"import { isEqualWith } from 'lodash';\nimport { PanelModel } from '../state';\n// Values that are safe to change without a full panel unmount/remount\n// TODO: options and fieldConfig should also be supported\nconst mutableKeys = new Set(['gridPos', 'title', 'description', 'transparent']);\nexport function mergePanels(current, data) {\n  const panels = [];\n  const info = {\n    changed: false,\n    actions: {\n      add: [],\n      remove: [],\n      replace: [],\n      update: [],\n      noop: []\n    },\n    panels\n  };\n  let nextId = 0;\n  const inputPanels = new Map();\n\n  for (let p of data) {\n    let {\n      id\n    } = p;\n\n    if (!id) {\n      if (!nextId) {\n        nextId = findNextPanelID([current, data]);\n      }\n\n      id = nextId++;\n      p = Object.assign({}, p, {\n        id\n      }); // clone with new ID\n    }\n\n    inputPanels.set(id, p);\n  }\n\n  for (const panel of current) {\n    const target = inputPanels.get(panel.id);\n\n    if (!target) {\n      info.changed = true;\n      info.actions.remove.push(panel.id);\n      panel.destroy();\n      continue;\n    }\n\n    inputPanels.delete(panel.id); // Fast comparison when working with the same panel objects\n\n    if (target === panel) {\n      panels.push(panel);\n      info.actions.noop.push(panel.id);\n      continue;\n    } // Check if it is the same type\n\n\n    if (panel.type === target.type) {\n      const save = panel.getSaveModel();\n      let isNoop = true;\n      let doUpdate = false;\n\n      for (const [key, value] of Object.entries(target)) {\n        if (!isEqualWith(value, save[key], infinityEqualsNull)) {\n          info.changed = true;\n          isNoop = false;\n\n          if (mutableKeys.has(key)) {\n            panel[key] = value;\n            doUpdate = true;\n          } else {\n            doUpdate = false;\n            break; // needs full replace\n          }\n        }\n      }\n\n      if (isNoop) {\n        panels.push(panel);\n        info.actions.noop.push(panel.id);\n        continue;\n      }\n\n      if (doUpdate) {\n        panels.push(panel);\n        info.actions.update.push(panel.id);\n        continue;\n      }\n    }\n\n    panel.destroy();\n    const next = new PanelModel(target);\n    next.key = `${next.id}-update-${Date.now()}`; // force react invalidate\n\n    panels.push(next);\n    info.changed = true;\n    info.actions.replace.push(panel.id);\n  } // Add the new panels\n\n\n  for (const t of inputPanels.values()) {\n    panels.push(new PanelModel(t));\n    info.changed = true;\n    info.actions.add.push(t.id);\n  }\n\n  return info;\n} // Since +- Infinity are saved as null in JSON, we need to make them equal here also\n\nfunction infinityEqualsNull(a, b) {\n  if (a == null && (b === Infinity || b === -Infinity || b == null)) {\n    return true;\n  }\n\n  if (b == null && (a === Infinity || a === -Infinity || a == null)) {\n    return true;\n  }\n\n  return undefined; // use default comparison\n}\n\nfunction findNextPanelID(args) {\n  let max = 0;\n\n  for (const panels of args) {\n    for (const panel of panels) {\n      if (panel.id > max) {\n        max = panel.id;\n      }\n    }\n  }\n\n  return max + 1;\n}","map":{"version":3,"names":["isEqualWith","PanelModel","mutableKeys","Set","mergePanels","current","data","panels","info","changed","actions","add","remove","replace","update","noop","nextId","inputPanels","Map","p","id","findNextPanelID","set","panel","target","get","push","destroy","delete","type","save","getSaveModel","isNoop","doUpdate","key","value","Object","entries","infinityEqualsNull","has","next","Date","now","t","values","a","b","Infinity","undefined","args","max"],"sources":["/home/soula/grafana/public/app/features/dashboard/utils/panelMerge.ts"],"sourcesContent":["import { isEqualWith } from 'lodash';\n\nimport { PanelModel as IPanelModel } from '@grafana/data';\n\nimport { PanelModel } from '../state';\n\nexport interface PanelMergeInfo {\n  changed: boolean;\n  panels: PanelModel[];\n  actions: Record<string, number[]>;\n}\n\n// Values that are safe to change without a full panel unmount/remount\n// TODO: options and fieldConfig should also be supported\nconst mutableKeys = new Set<keyof PanelModel>(['gridPos', 'title', 'description', 'transparent']);\n\nexport function mergePanels(current: PanelModel[], data: IPanelModel[]): PanelMergeInfo {\n  const panels: PanelModel[] = [];\n  const info = {\n    changed: false,\n    actions: {\n      add: [] as number[],\n      remove: [] as number[],\n      replace: [] as number[],\n      update: [] as number[],\n      noop: [] as number[],\n    },\n    panels,\n  };\n\n  let nextId = 0;\n  const inputPanels = new Map<number, IPanelModel>();\n  for (let p of data) {\n    let { id } = p;\n    if (!id) {\n      if (!nextId) {\n        nextId = findNextPanelID([current, data]);\n      }\n      id = nextId++;\n      p = { ...p, id }; // clone with new ID\n    }\n    inputPanels.set(id, p);\n  }\n\n  for (const panel of current) {\n    const target = inputPanels.get(panel.id) as PanelModel;\n    if (!target) {\n      info.changed = true;\n      info.actions.remove.push(panel.id);\n      panel.destroy();\n      continue;\n    }\n    inputPanels.delete(panel.id);\n\n    // Fast comparison when working with the same panel objects\n    if (target === panel) {\n      panels.push(panel);\n      info.actions.noop.push(panel.id);\n      continue;\n    }\n\n    // Check if it is the same type\n    if (panel.type === target.type) {\n      const save = panel.getSaveModel();\n      let isNoop = true;\n      let doUpdate = false;\n      for (const [key, value] of Object.entries(target)) {\n        if (!isEqualWith(value, save[key], infinityEqualsNull)) {\n          info.changed = true;\n          isNoop = false;\n          if (mutableKeys.has(key as any)) {\n            (panel as any)[key] = value;\n            doUpdate = true;\n          } else {\n            doUpdate = false;\n            break; // needs full replace\n          }\n        }\n      }\n\n      if (isNoop) {\n        panels.push(panel);\n        info.actions.noop.push(panel.id);\n        continue;\n      }\n\n      if (doUpdate) {\n        panels.push(panel);\n        info.actions.update.push(panel.id);\n        continue;\n      }\n    }\n    panel.destroy();\n\n    const next = new PanelModel(target);\n    next.key = `${next.id}-update-${Date.now()}`; // force react invalidate\n    panels.push(next);\n    info.changed = true;\n    info.actions.replace.push(panel.id);\n  }\n\n  // Add the new panels\n  for (const t of inputPanels.values()) {\n    panels.push(new PanelModel(t));\n    info.changed = true;\n    info.actions.add.push(t.id);\n  }\n\n  return info;\n}\n\n// Since +- Infinity are saved as null in JSON, we need to make them equal here also\nfunction infinityEqualsNull(a: any, b: any) {\n  if (a == null && (b === Infinity || b === -Infinity || b == null)) {\n    return true;\n  }\n  if (b == null && (a === Infinity || a === -Infinity || a == null)) {\n    return true;\n  }\n  return undefined; // use default comparison\n}\n\nfunction findNextPanelID(args: IPanelModel[][]): number {\n  let max = 0;\n  for (const panels of args) {\n    for (const panel of panels) {\n      if (panel.id > max) {\n        max = panel.id;\n      }\n    }\n  }\n  return max + 1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}