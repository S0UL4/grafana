{"ast":null,"code":"var _Spinner;\n\nimport { css, keyframes } from '@emotion/css';\nimport React from 'react';\nimport { locationService } from '@grafana/runtime';\nimport { Button, HorizontalGroup, Spinner, useStyles, VerticalGroup } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DashboardLoading = ({\n  initPhase\n}) => {\n  const styles = useStyles(getStyles);\n\n  const cancelVariables = () => {\n    locationService.push('/');\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.dashboardLoading,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: styles.dashboardLoadingText,\n      children: /*#__PURE__*/_jsxs(VerticalGroup, {\n        spacing: \"md\",\n        children: [/*#__PURE__*/_jsxs(HorizontalGroup, {\n          align: \"center\",\n          justify: \"center\",\n          spacing: \"xs\",\n          children: [_Spinner || (_Spinner = /*#__PURE__*/_jsx(Spinner, {\n            inline: true\n          })), \" \", initPhase]\n        }), ' ', /*#__PURE__*/_jsx(HorizontalGroup, {\n          align: \"center\",\n          justify: \"center\",\n          children: /*#__PURE__*/_jsx(Button, {\n            variant: \"secondary\",\n            size: \"md\",\n            icon: \"repeat\",\n            onClick: cancelVariables,\n            children: \"Cancel loading dashboard\"\n          })\n        })]\n      })\n    })\n  });\n};\nexport const getStyles = theme => {\n  // Amount of time we want to pass before we start showing loading spinner\n  const slowStartThreshold = '0.5s';\n  const invisibleToVisible = keyframes`\n    0% { opacity: 0%; }\n    100% { opacity: 100%; }\n  `;\n  return {\n    dashboardLoading: css`\n      height: 60vh;\n      display: flex;\n      opacity: 0%;\n      align-items: center;\n      justify-content: center;\n      animation: ${invisibleToVisible} 0s step-end ${slowStartThreshold} 1 normal forwards;\n    `,\n    dashboardLoadingText: css`\n      font-size: ${theme.typography.size.lg};\n    `\n  };\n};","map":{"version":3,"names":["css","keyframes","React","locationService","Button","HorizontalGroup","Spinner","useStyles","VerticalGroup","DashboardLoading","initPhase","styles","getStyles","cancelVariables","push","dashboardLoading","dashboardLoadingText","theme","slowStartThreshold","invisibleToVisible","typography","size","lg"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/DashboardLoading/DashboardLoading.tsx"],"sourcesContent":["import { css, keyframes } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Button, HorizontalGroup, Spinner, useStyles, VerticalGroup } from '@grafana/ui';\nimport { DashboardInitPhase } from 'app/types';\n\nexport interface Props {\n  initPhase: DashboardInitPhase;\n}\n\nexport const DashboardLoading = ({ initPhase }: Props) => {\n  const styles = useStyles(getStyles);\n  const cancelVariables = () => {\n    locationService.push('/');\n  };\n\n  return (\n    <div className={styles.dashboardLoading}>\n      <div className={styles.dashboardLoadingText}>\n        <VerticalGroup spacing=\"md\">\n          <HorizontalGroup align=\"center\" justify=\"center\" spacing=\"xs\">\n            <Spinner inline={true} /> {initPhase}\n          </HorizontalGroup>{' '}\n          <HorizontalGroup align=\"center\" justify=\"center\">\n            <Button variant=\"secondary\" size=\"md\" icon=\"repeat\" onClick={cancelVariables}>\n              Cancel loading dashboard\n            </Button>\n          </HorizontalGroup>\n        </VerticalGroup>\n      </div>\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme) => {\n  // Amount of time we want to pass before we start showing loading spinner\n  const slowStartThreshold = '0.5s';\n\n  const invisibleToVisible = keyframes`\n    0% { opacity: 0%; }\n    100% { opacity: 100%; }\n  `;\n\n  return {\n    dashboardLoading: css`\n      height: 60vh;\n      display: flex;\n      opacity: 0%;\n      align-items: center;\n      justify-content: center;\n      animation: ${invisibleToVisible} 0s step-end ${slowStartThreshold} 1 normal forwards;\n    `,\n    dashboardLoadingText: css`\n      font-size: ${theme.typography.size.lg};\n    `,\n  };\n};\n"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,cAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,MAAT,EAAiBC,eAAjB,EAAkCC,OAAlC,EAA2CC,SAA3C,EAAsDC,aAAtD,QAA2E,aAA3E;;;AAOA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;EAAEC;AAAF,CAAD,KAA0B;EACxD,MAAMC,MAAM,GAAGJ,SAAS,CAACK,SAAD,CAAxB;;EACA,MAAMC,eAAe,GAAG,MAAM;IAC5BV,eAAe,CAACW,IAAhB,CAAqB,GAArB;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAEH,MAAM,CAACI,gBAAvB;IAAA,uBACE;MAAK,SAAS,EAAEJ,MAAM,CAACK,oBAAvB;MAAA,uBACE,MAAC,aAAD;QAAe,OAAO,EAAC,IAAvB;QAAA,wBACE,MAAC,eAAD;UAAiB,KAAK,EAAC,QAAvB;UAAgC,OAAO,EAAC,QAAxC;UAAiD,OAAO,EAAC,IAAzD;UAAA,gDACE,KAAC,OAAD;YAAS,MAAM,EAAE;UAAjB,EADF,QAC6BN,SAD7B;QAAA,EADF,EAGqB,GAHrB,eAIE,KAAC,eAAD;UAAiB,KAAK,EAAC,QAAvB;UAAgC,OAAO,EAAC,QAAxC;UAAA,uBACE,KAAC,MAAD;YAAQ,OAAO,EAAC,WAAhB;YAA4B,IAAI,EAAC,IAAjC;YAAsC,IAAI,EAAC,QAA3C;YAAoD,OAAO,EAAEG,eAA7D;YAAA;UAAA;QADF,EAJF;MAAA;IADF;EADF,EADF;AAgBD,CAtBM;AAwBP,OAAO,MAAMD,SAAS,GAAIK,KAAD,IAAyB;EAChD;EACA,MAAMC,kBAAkB,GAAG,MAA3B;EAEA,MAAMC,kBAAkB,GAAGlB,SAAU;AACvC;AACA;AACA,GAHE;EAKA,OAAO;IACLc,gBAAgB,EAAEf,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA,mBAAmBmB,kBAAmB,gBAAeD,kBAAmB;AACxE,KARS;IASLF,oBAAoB,EAAEhB,GAAI;AAC9B,mBAAmBiB,KAAK,CAACG,UAAN,CAAiBC,IAAjB,CAAsBC,EAAG;AAC5C;EAXS,CAAP;AAaD,CAtBM"},"metadata":{},"sourceType":"module"}