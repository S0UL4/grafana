{"ast":null,"code":"import { getBackendSrv, isFetchError } from '@grafana/runtime';\nexport const fetchRoleOptions = async (orgId, query) => {\n  let rolesUrl = '/api/access-control/roles?delegatable=true';\n\n  if (orgId) {\n    rolesUrl += `&targetOrgId=${orgId}`;\n  }\n\n  const roles = await getBackendSrv().get(rolesUrl);\n\n  if (!roles || !roles.length) {\n    return [];\n  }\n\n  return roles;\n};\nexport const fetchBuiltinRoles = orgId => {\n  let builtinRolesUrl = '/api/access-control/builtin-roles';\n\n  if (orgId) {\n    builtinRolesUrl += `?targetOrgId=${orgId}`;\n  }\n\n  return getBackendSrv().get(builtinRolesUrl);\n};\nexport const fetchUserRoles = async (userId, orgId) => {\n  let userRolesUrl = `/api/access-control/users/${userId}/roles`;\n\n  if (orgId) {\n    userRolesUrl += `?targetOrgId=${orgId}`;\n  }\n\n  try {\n    const roles = await getBackendSrv().get(userRolesUrl);\n\n    if (!roles || !roles.length) {\n      return [];\n    }\n\n    return roles;\n  } catch (error) {\n    if (isFetchError(error)) {\n      error.isHandled = true;\n    }\n\n    return [];\n  }\n};\nexport const updateUserRoles = (roles, userId, orgId) => {\n  let userRolesUrl = `/api/access-control/users/${userId}/roles`;\n\n  if (orgId) {\n    userRolesUrl += `?targetOrgId=${orgId}`;\n  }\n\n  const roleUids = roles.flatMap(x => x.uid);\n  return getBackendSrv().put(userRolesUrl, {\n    orgId,\n    roleUids\n  });\n};\nexport const fetchTeamRoles = async (teamId, orgId) => {\n  let teamRolesUrl = `/api/access-control/teams/${teamId}/roles`;\n\n  if (orgId) {\n    teamRolesUrl += `?targetOrgId=${orgId}`;\n  }\n\n  try {\n    const roles = await getBackendSrv().get(teamRolesUrl);\n\n    if (!roles || !roles.length) {\n      return [];\n    }\n\n    return roles;\n  } catch (error) {\n    if (isFetchError(error)) {\n      error.isHandled = true;\n    }\n\n    return [];\n  }\n};\nexport const updateTeamRoles = (roles, teamId, orgId) => {\n  let teamRolesUrl = `/api/access-control/teams/${teamId}/roles`;\n\n  if (orgId) {\n    teamRolesUrl += `?targetOrgId=${orgId}`;\n  }\n\n  const roleUids = roles.flatMap(x => x.uid);\n  return getBackendSrv().put(teamRolesUrl, {\n    orgId,\n    roleUids\n  });\n};","map":{"version":3,"names":["getBackendSrv","isFetchError","fetchRoleOptions","orgId","query","rolesUrl","roles","get","length","fetchBuiltinRoles","builtinRolesUrl","fetchUserRoles","userId","userRolesUrl","error","isHandled","updateUserRoles","roleUids","flatMap","x","uid","put","fetchTeamRoles","teamId","teamRolesUrl","updateTeamRoles"],"sources":["/home/soula/grafana/public/app/core/components/RolePicker/api.ts"],"sourcesContent":["import { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { Role } from 'app/types';\n\nexport const fetchRoleOptions = async (orgId?: number, query?: string): Promise<Role[]> => {\n  let rolesUrl = '/api/access-control/roles?delegatable=true';\n  if (orgId) {\n    rolesUrl += `&targetOrgId=${orgId}`;\n  }\n  const roles = await getBackendSrv().get(rolesUrl);\n  if (!roles || !roles.length) {\n    return [];\n  }\n  return roles;\n};\n\nexport const fetchBuiltinRoles = (orgId?: number): Promise<{ [key: string]: Role[] }> => {\n  let builtinRolesUrl = '/api/access-control/builtin-roles';\n  if (orgId) {\n    builtinRolesUrl += `?targetOrgId=${orgId}`;\n  }\n  return getBackendSrv().get(builtinRolesUrl);\n};\n\nexport const fetchUserRoles = async (userId: number, orgId?: number): Promise<Role[]> => {\n  let userRolesUrl = `/api/access-control/users/${userId}/roles`;\n  if (orgId) {\n    userRolesUrl += `?targetOrgId=${orgId}`;\n  }\n  try {\n    const roles = await getBackendSrv().get(userRolesUrl);\n    if (!roles || !roles.length) {\n      return [];\n    }\n    return roles;\n  } catch (error) {\n    if (isFetchError(error)) {\n      error.isHandled = true;\n    }\n    return [];\n  }\n};\n\nexport const updateUserRoles = (roles: Role[], userId: number, orgId?: number) => {\n  let userRolesUrl = `/api/access-control/users/${userId}/roles`;\n  if (orgId) {\n    userRolesUrl += `?targetOrgId=${orgId}`;\n  }\n  const roleUids = roles.flatMap((x) => x.uid);\n  return getBackendSrv().put(userRolesUrl, {\n    orgId,\n    roleUids,\n  });\n};\n\nexport const fetchTeamRoles = async (teamId: number, orgId?: number): Promise<Role[]> => {\n  let teamRolesUrl = `/api/access-control/teams/${teamId}/roles`;\n  if (orgId) {\n    teamRolesUrl += `?targetOrgId=${orgId}`;\n  }\n  try {\n    const roles = await getBackendSrv().get(teamRolesUrl);\n    if (!roles || !roles.length) {\n      return [];\n    }\n    return roles;\n  } catch (error) {\n    if (isFetchError(error)) {\n      error.isHandled = true;\n    }\n    return [];\n  }\n};\n\nexport const updateTeamRoles = (roles: Role[], teamId: number, orgId?: number) => {\n  let teamRolesUrl = `/api/access-control/teams/${teamId}/roles`;\n  if (orgId) {\n    teamRolesUrl += `?targetOrgId=${orgId}`;\n  }\n  const roleUids = roles.flatMap((x) => x.uid);\n\n  return getBackendSrv().put(teamRolesUrl, {\n    orgId,\n    roleUids,\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}