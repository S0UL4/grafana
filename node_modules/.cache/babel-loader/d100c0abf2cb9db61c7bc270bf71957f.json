{"ast":null,"code":"var _Tooltip;\n\nimport React from 'react';\nimport { FieldType, identityOverrideProcessor } from '@grafana/data';\nimport { StackingMode } from '@grafana/schema';\nimport { graphFieldOptions, HorizontalGroup, IconButton, Input, RadioButtonGroup, Tooltip } from '../..';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const StackingEditor = ({\n  value,\n  context,\n  onChange,\n  item\n}) => {\n  return /*#__PURE__*/_jsxs(HorizontalGroup, {\n    children: [/*#__PURE__*/_jsx(RadioButtonGroup, {\n      value: (value === null || value === void 0 ? void 0 : value.mode) || StackingMode.None,\n      options: item.settings.options,\n      onChange: v => {\n        onChange(Object.assign({}, value, {\n          mode: v\n        }));\n      }\n    }), context.isOverride && (value === null || value === void 0 ? void 0 : value.mode) && (value === null || value === void 0 ? void 0 : value.mode) !== StackingMode.None && /*#__PURE__*/_jsx(Input, {\n      type: \"text\",\n      placeholder: \"Group\",\n      suffix: _Tooltip || (_Tooltip = /*#__PURE__*/_jsx(Tooltip, {\n        content: \"Name of the stacking group\",\n        placement: \"top\",\n        children: /*#__PURE__*/_jsx(IconButton, {\n          name: \"question-circle\"\n        })\n      })),\n      defaultValue: value === null || value === void 0 ? void 0 : value.group,\n      onChange: v => {\n        onChange(Object.assign({}, value, {\n          group: v.currentTarget.value.trim()\n        }));\n      }\n    })]\n  });\n};\nexport function addStackingConfig(builder, defaultConfig, category = ['Graph styles']) {\n  builder.addCustomEditor({\n    id: 'stacking',\n    path: 'stacking',\n    name: 'Stack series',\n    category: category,\n    defaultValue: defaultConfig,\n    editor: StackingEditor,\n    override: StackingEditor,\n    settings: {\n      options: graphFieldOptions.stacking\n    },\n    process: identityOverrideProcessor,\n    shouldApply: f => f.type === FieldType.number\n  });\n}","map":{"version":3,"names":["React","FieldType","identityOverrideProcessor","StackingMode","graphFieldOptions","HorizontalGroup","IconButton","Input","RadioButtonGroup","Tooltip","StackingEditor","value","context","onChange","item","mode","None","settings","options","v","isOverride","group","currentTarget","trim","addStackingConfig","builder","defaultConfig","category","addCustomEditor","id","path","name","defaultValue","editor","override","stacking","process","shouldApply","f","type","number"],"sources":["/home/soula/grafana/packages/grafana-ui/src/options/builder/stacking.tsx"],"sourcesContent":["import React from 'react';\n\nimport {\n  FieldConfigEditorBuilder,\n  FieldOverrideEditorProps,\n  FieldType,\n  identityOverrideProcessor,\n} from '@grafana/data';\nimport { StackingConfig, StackingMode } from '@grafana/schema';\n\nimport {\n  GraphFieldConfig,\n  graphFieldOptions,\n  HorizontalGroup,\n  IconButton,\n  Input,\n  RadioButtonGroup,\n  Tooltip,\n} from '../..';\n\nexport const StackingEditor: React.FC<FieldOverrideEditorProps<StackingConfig, any>> = ({\n  value,\n  context,\n  onChange,\n  item,\n}) => {\n  return (\n    <HorizontalGroup>\n      <RadioButtonGroup\n        value={value?.mode || StackingMode.None}\n        options={item.settings.options}\n        onChange={(v) => {\n          onChange({\n            ...value,\n            mode: v,\n          });\n        }}\n      />\n      {context.isOverride && value?.mode && value?.mode !== StackingMode.None && (\n        <Input\n          type=\"text\"\n          placeholder=\"Group\"\n          suffix={\n            <Tooltip content=\"Name of the stacking group\" placement=\"top\">\n              <IconButton name=\"question-circle\" />\n            </Tooltip>\n          }\n          defaultValue={value?.group}\n          onChange={(v) => {\n            onChange({\n              ...value,\n              group: v.currentTarget.value.trim(),\n            });\n          }}\n        />\n      )}\n    </HorizontalGroup>\n  );\n};\n\nexport function addStackingConfig(\n  builder: FieldConfigEditorBuilder<GraphFieldConfig>,\n  defaultConfig?: StackingConfig,\n  category = ['Graph styles']\n) {\n  builder.addCustomEditor({\n    id: 'stacking',\n    path: 'stacking',\n    name: 'Stack series',\n    category: category,\n    defaultValue: defaultConfig,\n    editor: StackingEditor,\n    override: StackingEditor,\n    settings: {\n      options: graphFieldOptions.stacking,\n    },\n    process: identityOverrideProcessor,\n    shouldApply: (f) => f.type === FieldType.number,\n  });\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAGEC,SAHF,EAIEC,yBAJF,QAKO,eALP;AAMA,SAAyBC,YAAzB,QAA6C,iBAA7C;AAEA,SAEEC,iBAFF,EAGEC,eAHF,EAIEC,UAJF,EAKEC,KALF,EAMEC,gBANF,EAOEC,OAPF,QAQO,OARP;;;AAUA,OAAO,MAAMC,cAAuE,GAAG,CAAC;EACtFC,KADsF;EAEtFC,OAFsF;EAGtFC,QAHsF;EAItFC;AAJsF,CAAD,KAKjF;EACJ,oBACE,MAAC,eAAD;IAAA,wBACE,KAAC,gBAAD;MACE,KAAK,EAAE,CAAAH,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEI,IAAP,KAAeZ,YAAY,CAACa,IADrC;MAEE,OAAO,EAAEF,IAAI,CAACG,QAAL,CAAcC,OAFzB;MAGE,QAAQ,EAAGC,CAAD,IAAO;QACfN,QAAQ,mBACHF,KADG;UAENI,IAAI,EAAEI;QAFA,GAAR;MAID;IARH,EADF,EAWGP,OAAO,CAACQ,UAAR,KAAsBT,KAAtB,aAAsBA,KAAtB,uBAAsBA,KAAK,CAAEI,IAA7B,KAAqC,CAAAJ,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEI,IAAP,MAAgBZ,YAAY,CAACa,IAAlE,iBACC,KAAC,KAAD;MACE,IAAI,EAAC,MADP;MAEE,WAAW,EAAC,OAFd;MAGE,MAAM,uCACJ,KAAC,OAAD;QAAS,OAAO,EAAC,4BAAjB;QAA8C,SAAS,EAAC,KAAxD;QAAA,uBACE,KAAC,UAAD;UAAY,IAAI,EAAC;QAAjB;MADF,EADI,CAHR;MAQE,YAAY,EAAEL,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEU,KARvB;MASE,QAAQ,EAAGF,CAAD,IAAO;QACfN,QAAQ,mBACHF,KADG;UAENU,KAAK,EAAEF,CAAC,CAACG,aAAF,CAAgBX,KAAhB,CAAsBY,IAAtB;QAFD,GAAR;MAID;IAdH,EAZJ;EAAA,EADF;AAgCD,CAtCM;AAwCP,OAAO,SAASC,iBAAT,CACLC,OADK,EAELC,aAFK,EAGLC,QAAQ,GAAG,CAAC,cAAD,CAHN,EAIL;EACAF,OAAO,CAACG,eAAR,CAAwB;IACtBC,EAAE,EAAE,UADkB;IAEtBC,IAAI,EAAE,UAFgB;IAGtBC,IAAI,EAAE,cAHgB;IAItBJ,QAAQ,EAAEA,QAJY;IAKtBK,YAAY,EAAEN,aALQ;IAMtBO,MAAM,EAAEvB,cANc;IAOtBwB,QAAQ,EAAExB,cAPY;IAQtBO,QAAQ,EAAE;MACRC,OAAO,EAAEd,iBAAiB,CAAC+B;IADnB,CARY;IAWtBC,OAAO,EAAElC,yBAXa;IAYtBmC,WAAW,EAAGC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWtC,SAAS,CAACuC;EAZnB,CAAxB;AAcD"},"metadata":{},"sourceType":"module"}