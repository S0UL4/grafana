{"ast":null,"code":"import angular from 'angular';\nimport $ from 'jquery';\nimport { getTagColorsFromName } from '@grafana/ui';\nimport coreModule from './core_module';\nimport 'vendor/tagsinput/bootstrap-tagsinput.js';\n\nfunction setColor(name, element) {\n  const {\n    color,\n    borderColor\n  } = getTagColorsFromName(name);\n  element.css('background-color', color);\n  element.css('border-color', borderColor);\n}\n\nfunction tagColorFromName() {\n  return {\n    scope: {\n      tagColorFromName: '='\n    },\n    link: (scope, element) => {\n      setColor(scope.tagColorFromName, element);\n    }\n  };\n}\n\nfunction bootstrapTagsinput() {\n  function getItemProperty(scope, property) {\n    if (!property) {\n      return undefined;\n    }\n\n    if (angular.isFunction(scope.$parent[property])) {\n      return scope.$parent[property];\n    }\n\n    return item => {\n      return item[property];\n    };\n  }\n\n  return {\n    restrict: 'EA',\n    scope: {\n      model: '=ngModel',\n      onTagsUpdated: '&'\n    },\n    template: '<select multiple></select>',\n    replace: false,\n    link: function (scope, element, attrs) {\n      if (!angular.isArray(scope.model)) {\n        scope.model = [];\n      }\n\n      const select = $('select', element);\n\n      if (attrs.placeholder) {\n        select.attr('placeholder', attrs.placeholder);\n      }\n\n      select.tagsinput({\n        typeahead: {\n          source: angular.isFunction(scope.$parent[attrs.typeaheadSource]) ? scope.$parent[attrs.typeaheadSource] : null\n        },\n        widthClass: attrs.widthClass,\n        itemValue: getItemProperty(scope, attrs.itemvalue),\n        itemText: getItemProperty(scope, attrs.itemtext),\n        tagClass: angular.isFunction(scope.$parent[attrs.tagclass]) ? scope.$parent[attrs.tagclass] : () => {\n          return attrs.tagclass;\n        }\n      });\n      select.on('itemAdded', event => {\n        if (scope.model.indexOf(event.item) === -1) {\n          scope.model.push(event.item);\n\n          if (scope.onTagsUpdated) {\n            scope.onTagsUpdated();\n          }\n        }\n\n        const tagElement = select.next().children('span').filter(() => {\n          return $(this).text() === event.item;\n        });\n        setColor(event.item, tagElement);\n      });\n      select.on('itemRemoved', event => {\n        const idx = scope.model.indexOf(event.item);\n\n        if (idx !== -1) {\n          scope.model.splice(idx, 1);\n\n          if (scope.onTagsUpdated) {\n            scope.onTagsUpdated();\n          }\n        }\n      });\n      scope.$watch('model', () => {\n        if (!angular.isArray(scope.model)) {\n          scope.model = [];\n        }\n\n        select.tagsinput('removeAll');\n\n        for (let i = 0; i < scope.model.length; i++) {\n          select.tagsinput('add', scope.model[i]);\n        }\n      }, true);\n    }\n  };\n}\n\ncoreModule.directive('tagColorFromName', tagColorFromName);\ncoreModule.directive('bootstrapTagsinput', bootstrapTagsinput);","map":{"version":3,"names":["angular","$","getTagColorsFromName","coreModule","setColor","name","element","color","borderColor","css","tagColorFromName","scope","link","bootstrapTagsinput","getItemProperty","property","undefined","isFunction","$parent","item","restrict","model","onTagsUpdated","template","replace","attrs","isArray","select","placeholder","attr","tagsinput","typeahead","source","typeaheadSource","widthClass","itemValue","itemvalue","itemText","itemtext","tagClass","tagclass","on","event","indexOf","push","tagElement","next","children","filter","text","idx","splice","$watch","i","length","directive"],"sources":["/home/soula/grafana/public/app/angular/tags.ts"],"sourcesContent":["import angular from 'angular';\nimport $ from 'jquery';\n\nimport { getTagColorsFromName } from '@grafana/ui';\n\nimport coreModule from './core_module';\nimport 'vendor/tagsinput/bootstrap-tagsinput.js';\n\nfunction setColor(name: string, element: JQuery) {\n  const { color, borderColor } = getTagColorsFromName(name);\n  element.css('background-color', color);\n  element.css('border-color', borderColor);\n}\n\nfunction tagColorFromName() {\n  return {\n    scope: { tagColorFromName: '=' },\n    link: (scope: any, element: any) => {\n      setColor(scope.tagColorFromName, element);\n    },\n  };\n}\n\nfunction bootstrapTagsinput() {\n  function getItemProperty(scope: any, property: any) {\n    if (!property) {\n      return undefined;\n    }\n\n    if (angular.isFunction(scope.$parent[property])) {\n      return scope.$parent[property];\n    }\n\n    return (item: any) => {\n      return item[property];\n    };\n  }\n\n  return {\n    restrict: 'EA',\n    scope: {\n      model: '=ngModel',\n      onTagsUpdated: '&',\n    },\n    template: '<select multiple></select>',\n    replace: false,\n    link: function (scope: any, element: any, attrs: any) {\n      if (!angular.isArray(scope.model)) {\n        scope.model = [];\n      }\n\n      const select = $('select', element);\n\n      if (attrs.placeholder) {\n        select.attr('placeholder', attrs.placeholder);\n      }\n\n      select.tagsinput({\n        typeahead: {\n          source: angular.isFunction(scope.$parent[attrs.typeaheadSource])\n            ? scope.$parent[attrs.typeaheadSource]\n            : null,\n        },\n        widthClass: attrs.widthClass,\n        itemValue: getItemProperty(scope, attrs.itemvalue),\n        itemText: getItemProperty(scope, attrs.itemtext),\n        tagClass: angular.isFunction(scope.$parent[attrs.tagclass])\n          ? scope.$parent[attrs.tagclass]\n          : () => {\n              return attrs.tagclass;\n            },\n      });\n\n      select.on('itemAdded', (event: any) => {\n        if (scope.model.indexOf(event.item) === -1) {\n          scope.model.push(event.item);\n          if (scope.onTagsUpdated) {\n            scope.onTagsUpdated();\n          }\n        }\n        const tagElement = select\n          .next()\n          .children('span')\n          .filter(() => {\n            return $(this).text() === event.item;\n          });\n        setColor(event.item, tagElement);\n      });\n\n      select.on('itemRemoved', (event: any) => {\n        const idx = scope.model.indexOf(event.item);\n        if (idx !== -1) {\n          scope.model.splice(idx, 1);\n          if (scope.onTagsUpdated) {\n            scope.onTagsUpdated();\n          }\n        }\n      });\n\n      scope.$watch(\n        'model',\n        () => {\n          if (!angular.isArray(scope.model)) {\n            scope.model = [];\n          }\n\n          select.tagsinput('removeAll');\n\n          for (let i = 0; i < scope.model.length; i++) {\n            select.tagsinput('add', scope.model[i]);\n          }\n        },\n        true\n      );\n    },\n  };\n}\n\ncoreModule.directive('tagColorFromName', tagColorFromName);\ncoreModule.directive('bootstrapTagsinput', bootstrapTagsinput);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}