{"ast":null,"code":"var _p, _p2, _p3, _i, _br;\n\nimport { css } from '@emotion/css';\nimport { sumBy } from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\nimport { Modal, ConfirmModal, Button } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { cleanUpDashboardAndVariables } from 'app/features/dashboard/state/actions';\nimport { useDashboardDelete } from './useDashboardDelete';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst mapDispatchToProps = {\n  cleanUpDashboardAndVariables\n};\nconst connector = connect(null, mapDispatchToProps);\n\nconst DeleteDashboardModalUnconnected = ({\n  hideModal,\n  cleanUpDashboardAndVariables,\n  dashboard\n}) => {\n  const isProvisioned = dashboard.meta.provisioned;\n  const {\n    onDeleteDashboard\n  } = useDashboardDelete(dashboard.uid, cleanUpDashboardAndVariables);\n  const [, onConfirm] = useAsyncFn(async () => {\n    await onDeleteDashboard();\n    hideModal();\n  }, [hideModal]);\n  const modalBody = getModalBody(dashboard.panels, dashboard.title);\n\n  if (isProvisioned) {\n    return /*#__PURE__*/_jsx(ProvisionedDeleteModal, {\n      hideModal: hideModal,\n      provisionedId: dashboard.meta.provisionedExternalId\n    });\n  }\n\n  return /*#__PURE__*/_jsx(ConfirmModal, {\n    isOpen: true,\n    body: modalBody,\n    onConfirm: onConfirm,\n    onDismiss: hideModal,\n    title: \"Delete\",\n    icon: \"trash-alt\",\n    confirmText: \"Delete\"\n  });\n};\n\nconst getModalBody = (panels, title) => {\n  const totalAlerts = sumBy(panels, panel => panel.alert ? 1 : 0);\n  return totalAlerts > 0 && !config.unifiedAlertingEnabled ? /*#__PURE__*/_jsxs(_Fragment, {\n    children: [_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n      children: \"Do you want to delete this dashboard?\"\n    })), /*#__PURE__*/_jsxs(\"p\", {\n      children: [\"This dashboard contains \", totalAlerts, \" alert\", totalAlerts > 1 ? 's' : '', \". Deleting this dashboard also deletes those alerts.\"]\n    })]\n  }) : /*#__PURE__*/_jsxs(_Fragment, {\n    children: [_p2 || (_p2 = /*#__PURE__*/_jsx(\"p\", {\n      children: \"Do you want to delete this dashboard?\"\n    })), /*#__PURE__*/_jsx(\"p\", {\n      children: title\n    })]\n  });\n};\n\nconst ProvisionedDeleteModal = ({\n  hideModal,\n  provisionedId\n}) => /*#__PURE__*/_jsxs(Modal, {\n  isOpen: true,\n  title: \"Cannot delete provisioned dashboard\",\n  icon: \"trash-alt\",\n  onDismiss: hideModal,\n  className: css`\n      width: 500px;\n    `,\n  children: [_p3 || (_p3 = /*#__PURE__*/_jsx(\"p\", {\n    children: \"This dashboard is managed by Grafana provisioning and cannot be deleted. Remove the dashboard from the config file to delete it.\"\n  })), /*#__PURE__*/_jsxs(\"p\", {\n    children: [_i || (_i = /*#__PURE__*/_jsxs(\"i\", {\n      children: [\"See\", ' ', /*#__PURE__*/_jsx(\"a\", {\n        className: \"external-link\",\n        href: \"https://grafana.com/docs/grafana/latest/administration/provisioning/#dashboards\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        children: \"documentation\"\n      }), ' ', \"for more information about provisioning.\"]\n    })), _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), \"File path: \", provisionedId]\n  }), /*#__PURE__*/_jsx(Modal.ButtonRow, {\n    children: /*#__PURE__*/_jsx(Button, {\n      variant: \"primary\",\n      onClick: hideModal,\n      children: \"OK\"\n    })\n  })]\n});\n\nexport const DeleteDashboardModal = connector(DeleteDashboardModalUnconnected);","map":{"version":3,"names":["css","sumBy","React","connect","useAsyncFn","Modal","ConfirmModal","Button","config","cleanUpDashboardAndVariables","useDashboardDelete","mapDispatchToProps","connector","DeleteDashboardModalUnconnected","hideModal","dashboard","isProvisioned","meta","provisioned","onDeleteDashboard","uid","onConfirm","modalBody","getModalBody","panels","title","provisionedExternalId","totalAlerts","panel","alert","unifiedAlertingEnabled","ProvisionedDeleteModal","provisionedId","DeleteDashboardModal"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/DeleteDashboard/DeleteDashboardModal.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { sumBy } from 'lodash';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\n\nimport { Modal, ConfirmModal, Button } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { cleanUpDashboardAndVariables } from 'app/features/dashboard/state/actions';\n\nimport { useDashboardDelete } from './useDashboardDelete';\n\ntype DeleteDashboardModalProps = {\n  hideModal(): void;\n  dashboard: DashboardModel;\n};\n\nconst mapDispatchToProps = {\n  cleanUpDashboardAndVariables,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype Props = DeleteDashboardModalProps & ConnectedProps<typeof connector>;\n\nconst DeleteDashboardModalUnconnected: React.FC<Props> = ({ hideModal, cleanUpDashboardAndVariables, dashboard }) => {\n  const isProvisioned = dashboard.meta.provisioned;\n  const { onDeleteDashboard } = useDashboardDelete(dashboard.uid, cleanUpDashboardAndVariables);\n\n  const [, onConfirm] = useAsyncFn(async () => {\n    await onDeleteDashboard();\n    hideModal();\n  }, [hideModal]);\n\n  const modalBody = getModalBody(dashboard.panels, dashboard.title);\n\n  if (isProvisioned) {\n    return <ProvisionedDeleteModal hideModal={hideModal} provisionedId={dashboard.meta.provisionedExternalId!} />;\n  }\n\n  return (\n    <ConfirmModal\n      isOpen={true}\n      body={modalBody}\n      onConfirm={onConfirm}\n      onDismiss={hideModal}\n      title=\"Delete\"\n      icon=\"trash-alt\"\n      confirmText=\"Delete\"\n    />\n  );\n};\n\nconst getModalBody = (panels: PanelModel[], title: string) => {\n  const totalAlerts = sumBy(panels, (panel) => (panel.alert ? 1 : 0));\n  return totalAlerts > 0 && !config.unifiedAlertingEnabled ? (\n    <>\n      <p>Do you want to delete this dashboard?</p>\n      <p>\n        This dashboard contains {totalAlerts} alert{totalAlerts > 1 ? 's' : ''}. Deleting this dashboard also deletes\n        those alerts.\n      </p>\n    </>\n  ) : (\n    <>\n      <p>Do you want to delete this dashboard?</p>\n      <p>{title}</p>\n    </>\n  );\n};\n\nconst ProvisionedDeleteModal = ({ hideModal, provisionedId }: { hideModal(): void; provisionedId: string }) => (\n  <Modal\n    isOpen={true}\n    title=\"Cannot delete provisioned dashboard\"\n    icon=\"trash-alt\"\n    onDismiss={hideModal}\n    className={css`\n      width: 500px;\n    `}\n  >\n    <p>\n      This dashboard is managed by Grafana provisioning and cannot be deleted. Remove the dashboard from the config file\n      to delete it.\n    </p>\n    <p>\n      <i>\n        See{' '}\n        <a\n          className=\"external-link\"\n          href=\"https://grafana.com/docs/grafana/latest/administration/provisioning/#dashboards\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          documentation\n        </a>{' '}\n        for more information about provisioning.\n      </i>\n      <br />\n      File path: {provisionedId}\n    </p>\n    <Modal.ButtonRow>\n      <Button variant=\"primary\" onClick={hideModal}>\n        OK\n      </Button>\n    </Modal.ButtonRow>\n  </Modal>\n);\n\nexport const DeleteDashboardModal = connector(DeleteDashboardModalUnconnected);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}