{"ast":null,"code":"var _p;\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { useEffectOnce } from 'react-use';\nimport { config } from '@grafana/runtime';\nimport { Button, HorizontalGroup } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { getUserOrganizations, setUserOrganization } from './state/actions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst navModel = {\n  main: {\n    icon: 'grafana',\n    subTitle: 'Preferences',\n    text: 'Select active organization'\n  },\n  node: {\n    text: 'Select active organization'\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    userOrgs: state.organization.userOrgs\n  };\n};\n\nconst mapDispatchToProps = {\n  setUserOrganization,\n  getUserOrganizations\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport const SelectOrgPage = ({\n  setUserOrganization,\n  getUserOrganizations,\n  userOrgs\n}) => {\n  const setUserOrg = async org => {\n    await setUserOrganization(org.orgId);\n    window.location.href = config.appSubUrl + '/';\n  };\n\n  useEffectOnce(() => {\n    getUserOrganizations();\n  });\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsx(Page.Contents, {\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        children: [_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n          children: \"You have been invited to another organization! Please select which organization that you want to use right now. You can change this later at any time.\"\n        })), /*#__PURE__*/_jsx(HorizontalGroup, {\n          wrap: true,\n          children: userOrgs && userOrgs.map(org => /*#__PURE__*/_jsx(Button, {\n            icon: \"signin\",\n            onClick: () => setUserOrg(org),\n            children: org.name\n          }, org.orgId))\n        })]\n      })\n    })\n  });\n};\nexport default connector(SelectOrgPage);","map":{"version":3,"names":["React","connect","useEffectOnce","config","Button","HorizontalGroup","Page","getUserOrganizations","setUserOrganization","navModel","main","icon","subTitle","text","node","mapStateToProps","state","userOrgs","organization","mapDispatchToProps","connector","SelectOrgPage","setUserOrg","org","orgId","window","location","href","appSubUrl","map","name"],"sources":["/home/soula/grafana/public/app/features/org/SelectOrgPage.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useEffectOnce } from 'react-use';\n\nimport { config } from '@grafana/runtime';\nimport { Button, HorizontalGroup } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { StoreState, UserOrg } from 'app/types';\n\nimport { getUserOrganizations, setUserOrganization } from './state/actions';\n\nconst navModel = {\n  main: {\n    icon: 'grafana',\n    subTitle: 'Preferences',\n    text: 'Select active organization',\n  },\n  node: {\n    text: 'Select active organization',\n  },\n};\n\nconst mapStateToProps = (state: StoreState) => {\n  return {\n    userOrgs: state.organization.userOrgs,\n  };\n};\n\nconst mapDispatchToProps = {\n  setUserOrganization,\n  getUserOrganizations,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector>;\n\nexport const SelectOrgPage: FC<Props> = ({ setUserOrganization, getUserOrganizations, userOrgs }) => {\n  const setUserOrg = async (org: UserOrg) => {\n    await setUserOrganization(org.orgId);\n    window.location.href = config.appSubUrl + '/';\n  };\n\n  useEffectOnce(() => {\n    getUserOrganizations();\n  });\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <div>\n          <p>\n            You have been invited to another organization! Please select which organization that you want to use right\n            now. You can change this later at any time.\n          </p>\n          <HorizontalGroup wrap>\n            {userOrgs &&\n              userOrgs.map((org) => (\n                <Button key={org.orgId} icon=\"signin\" onClick={() => setUserOrg(org)}>\n                  {org.name}\n                </Button>\n              ))}\n          </HorizontalGroup>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(SelectOrgPage);\n"],"mappings":";;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,aAAxC;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AAGA,SAASC,oBAAT,EAA+BC,mBAA/B,QAA0D,iBAA1D;;;AAEA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE;IACJC,IAAI,EAAE,SADF;IAEJC,QAAQ,EAAE,aAFN;IAGJC,IAAI,EAAE;EAHF,CADS;EAMfC,IAAI,EAAE;IACJD,IAAI,EAAE;EADF;AANS,CAAjB;;AAWA,MAAME,eAAe,GAAIC,KAAD,IAAuB;EAC7C,OAAO;IACLC,QAAQ,EAAED,KAAK,CAACE,YAAN,CAAmBD;EADxB,CAAP;AAGD,CAJD;;AAMA,MAAME,kBAAkB,GAAG;EACzBX,mBADyB;EAEzBD;AAFyB,CAA3B;AAKA,MAAMa,SAAS,GAAGnB,OAAO,CAACc,eAAD,EAAkBI,kBAAlB,CAAzB;AAIA,OAAO,MAAME,aAAwB,GAAG,CAAC;EAAEb,mBAAF;EAAuBD,oBAAvB;EAA6CU;AAA7C,CAAD,KAA6D;EACnG,MAAMK,UAAU,GAAG,MAAOC,GAAP,IAAwB;IACzC,MAAMf,mBAAmB,CAACe,GAAG,CAACC,KAAL,CAAzB;IACAC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBxB,MAAM,CAACyB,SAAP,GAAmB,GAA1C;EACD,CAHD;;EAKA1B,aAAa,CAAC,MAAM;IAClBK,oBAAoB;EACrB,CAFY,CAAb;EAIA,oBACE,KAAC,IAAD;IAAM,QAAQ,EAAEE,QAAhB;IAAA,uBACE,KAAC,IAAD,CAAM,QAAN;MAAA,uBACE;QAAA,oCACE;UAAA;QAAA,EADF,gBAKE,KAAC,eAAD;UAAiB,IAAI,MAArB;UAAA,UACGQ,QAAQ,IACPA,QAAQ,CAACY,GAAT,CAAcN,GAAD,iBACX,KAAC,MAAD;YAAwB,IAAI,EAAC,QAA7B;YAAsC,OAAO,EAAE,MAAMD,UAAU,CAACC,GAAD,CAA/D;YAAA,UACGA,GAAG,CAACO;UADP,GAAaP,GAAG,CAACC,KAAjB,CADF;QAFJ,EALF;MAAA;IADF;EADF,EADF;AAoBD,CA9BM;AAgCP,eAAeJ,SAAS,CAACC,aAAD,CAAxB"},"metadata":{},"sourceType":"module"}