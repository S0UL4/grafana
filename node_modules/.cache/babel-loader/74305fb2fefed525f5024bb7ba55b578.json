{"ast":null,"code":"const _excluded = [\"onChange\", \"ref\"],\n      _excluded2 = [\"ref\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { Field, InputControl, useStyles2 } from '@grafana/ui';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchRulerRulesAction } from '../../state/actions';\nimport { SelectWithAdd } from './SelectWIthAdd';\nimport { checkForPathSeparator } from './util';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GroupAndNamespaceFields = ({\n  rulesSourceName\n}) => {\n  var _rulerRequests$rulesS, _errors$namespace, _errors$namespace2, _errors$group, _errors$group2;\n\n  const {\n    control,\n    watch,\n    formState: {\n      errors\n    },\n    setValue\n  } = useFormContext();\n  const style = useStyles2(getStyle);\n  const [customGroup, setCustomGroup] = useState(false);\n  const rulerRequests = useUnifiedAlertingSelector(state => state.rulerRules);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchRulerRulesAction({\n      rulesSourceName\n    }));\n  }, [rulesSourceName, dispatch]);\n  const rulesConfig = (_rulerRequests$rulesS = rulerRequests[rulesSourceName]) === null || _rulerRequests$rulesS === void 0 ? void 0 : _rulerRequests$rulesS.result;\n  const namespace = watch('namespace');\n  const namespaceOptions = useMemo(() => rulesConfig ? Object.keys(rulesConfig).map(namespace => ({\n    label: namespace,\n    value: namespace\n  })) : [], [rulesConfig]);\n  const groupOptions = useMemo(() => {\n    var _rulesConfig$namespac;\n\n    return namespace && (rulesConfig === null || rulesConfig === void 0 ? void 0 : (_rulesConfig$namespac = rulesConfig[namespace]) === null || _rulesConfig$namespac === void 0 ? void 0 : _rulesConfig$namespac.map(group => ({\n      label: group.name,\n      value: group.name\n    }))) || [];\n  }, [namespace, rulesConfig]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: style.flexRow,\n    children: [/*#__PURE__*/_jsx(Field, {\n      \"data-testid\": \"namespace-picker\",\n      label: \"Namespace\",\n      error: (_errors$namespace = errors.namespace) === null || _errors$namespace === void 0 ? void 0 : _errors$namespace.message,\n      invalid: !!((_errors$namespace2 = errors.namespace) !== null && _errors$namespace2 !== void 0 && _errors$namespace2.message),\n      children: /*#__PURE__*/_jsx(InputControl, {\n        render: _ref => {\n          let {\n            field: {\n              onChange\n            }\n          } = _ref,\n              field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n          return /*#__PURE__*/_jsx(SelectWithAdd, Object.assign({}, field, {\n            className: style.input,\n            onChange: value => {\n              setValue('group', ''); //reset if namespace changes\n\n              onChange(value);\n            },\n            onCustomChange: custom => {\n              custom && setCustomGroup(true);\n            },\n            options: namespaceOptions,\n            width: 42\n          }));\n        },\n        name: \"namespace\",\n        control: control,\n        rules: {\n          required: {\n            value: true,\n            message: 'Required.'\n          },\n          validate: {\n            pathSeparator: checkForPathSeparator\n          }\n        }\n      })\n    }), /*#__PURE__*/_jsx(Field, {\n      \"data-testid\": \"group-picker\",\n      label: \"Group\",\n      error: (_errors$group = errors.group) === null || _errors$group === void 0 ? void 0 : _errors$group.message,\n      invalid: !!((_errors$group2 = errors.group) !== null && _errors$group2 !== void 0 && _errors$group2.message),\n      children: /*#__PURE__*/_jsx(InputControl, {\n        render: _ref2 => {\n          let {} = _ref2,\n              field = _objectWithoutPropertiesLoose(_ref2.field, _excluded2);\n\n          return /*#__PURE__*/_jsx(SelectWithAdd, Object.assign({}, field, {\n            options: groupOptions,\n            width: 42,\n            custom: customGroup,\n            className: style.input\n          }));\n        },\n        name: \"group\",\n        control: control,\n        rules: {\n          required: {\n            value: true,\n            message: 'Required.'\n          },\n          validate: {\n            pathSeparator: checkForPathSeparator\n          }\n        }\n      })\n    })]\n  });\n};\n\nconst getStyle = theme => ({\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * + * {\n      margin-left: ${theme.spacing(3)};\n    }\n  `,\n  input: css`\n    width: 330px !important;\n  `\n});","map":{"version":3,"names":["css","React","useEffect","useMemo","useState","useFormContext","useDispatch","Field","InputControl","useStyles2","useUnifiedAlertingSelector","fetchRulerRulesAction","SelectWithAdd","checkForPathSeparator","GroupAndNamespaceFields","rulesSourceName","control","watch","formState","errors","setValue","style","getStyle","customGroup","setCustomGroup","rulerRequests","state","rulerRules","dispatch","rulesConfig","result","namespace","namespaceOptions","Object","keys","map","label","value","groupOptions","group","name","flexRow","message","field","onChange","input","custom","required","validate","pathSeparator","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/GroupAndNamespaceFields.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useEffect, useMemo, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, InputControl, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchRulerRulesAction } from '../../state/actions';\nimport { RuleFormValues } from '../../types/rule-form';\n\nimport { SelectWithAdd } from './SelectWIthAdd';\nimport { checkForPathSeparator } from './util';\n\ninterface Props {\n  rulesSourceName: string;\n}\n\nexport const GroupAndNamespaceFields: FC<Props> = ({ rulesSourceName }) => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n\n  const style = useStyles2(getStyle);\n\n  const [customGroup, setCustomGroup] = useState(false);\n\n  const rulerRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchRulerRulesAction({ rulesSourceName }));\n  }, [rulesSourceName, dispatch]);\n\n  const rulesConfig = rulerRequests[rulesSourceName]?.result;\n\n  const namespace = watch('namespace');\n\n  const namespaceOptions = useMemo(\n    (): Array<SelectableValue<string>> =>\n      rulesConfig ? Object.keys(rulesConfig).map((namespace) => ({ label: namespace, value: namespace })) : [],\n    [rulesConfig]\n  );\n\n  const groupOptions = useMemo(\n    (): Array<SelectableValue<string>> =>\n      (namespace && rulesConfig?.[namespace]?.map((group) => ({ label: group.name, value: group.name }))) || [],\n    [namespace, rulesConfig]\n  );\n\n  return (\n    <div className={style.flexRow}>\n      <Field\n        data-testid=\"namespace-picker\"\n        label=\"Namespace\"\n        error={errors.namespace?.message}\n        invalid={!!errors.namespace?.message}\n      >\n        <InputControl\n          render={({ field: { onChange, ref, ...field } }) => (\n            <SelectWithAdd\n              {...field}\n              className={style.input}\n              onChange={(value) => {\n                setValue('group', ''); //reset if namespace changes\n                onChange(value);\n              }}\n              onCustomChange={(custom: boolean) => {\n                custom && setCustomGroup(true);\n              }}\n              options={namespaceOptions}\n              width={42}\n            />\n          )}\n          name=\"namespace\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n            validate: {\n              pathSeparator: checkForPathSeparator,\n            },\n          }}\n        />\n      </Field>\n      <Field data-testid=\"group-picker\" label=\"Group\" error={errors.group?.message} invalid={!!errors.group?.message}>\n        <InputControl\n          render={({ field: { ref, ...field } }) => (\n            <SelectWithAdd {...field} options={groupOptions} width={42} custom={customGroup} className={style.input} />\n          )}\n          name=\"group\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n            validate: {\n              pathSeparator: checkForPathSeparator,\n            },\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * + * {\n      margin-left: ${theme.spacing(3)};\n    }\n  `,\n  input: css`\n    width: 330px !important;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}