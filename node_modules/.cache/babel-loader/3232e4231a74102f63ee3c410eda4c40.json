{"ast":null,"code":"/**\n * @alpha\n */\nexport let FrameGeometrySourceMode;\n/**\n * @alpha\n */\n\n(function (FrameGeometrySourceMode) {\n  FrameGeometrySourceMode[\"Auto\"] = \"auto\";\n  FrameGeometrySourceMode[\"Geohash\"] = \"geohash\";\n  FrameGeometrySourceMode[\"Coords\"] = \"coords\";\n  FrameGeometrySourceMode[\"Lookup\"] = \"lookup\";\n})(FrameGeometrySourceMode || (FrameGeometrySourceMode = {}));","map":{"version":3,"names":["FrameGeometrySourceMode"],"sources":["/home/soula/grafana/packages/grafana-data/src/geo/layer.ts"],"sourcesContent":["import { PluggableMap } from 'ol';\nimport BaseLayer from 'ol/layer/Base';\nimport { ReactNode } from 'react';\n\nimport { EventBus } from '../events';\nimport { GrafanaTheme2 } from '../themes';\nimport { MatcherConfig, PanelData } from '../types';\nimport { PanelOptionsEditorBuilder } from '../utils';\nimport { RegistryItemWithOptions } from '../utils/Registry';\n\n/**\n * @alpha\n */\nexport enum FrameGeometrySourceMode {\n  Auto = 'auto', // Will scan fields and find best match\n  Geohash = 'geohash',\n  Coords = 'coords', // lon field, lat field\n  Lookup = 'lookup', // keys > location\n  // H3 = 'h3',\n  // WKT = 'wkt,\n  // geojson? geometry text\n}\n\n/**\n * @alpha\n */\nexport interface FrameGeometrySource {\n  mode: FrameGeometrySourceMode;\n\n  // Field mappings\n  geohash?: string;\n  latitude?: string;\n  longitude?: string;\n  h3?: string;\n  wkt?: string;\n  lookup?: string;\n\n  // Path to Gazetteer\n  gazetteer?: string;\n}\n\n/**\n * This gets saved in panel json\n *\n * depending on the type, it may have additional config\n *\n * This exists in `grafana/data` so the types are well known and extendable but the\n * layout/frame is control by the map panel\n *\n * @alpha\n */\nexport interface MapLayerOptions<TConfig = any> {\n  type: string;\n  name: string; // configured unique display name\n\n  // Custom options depending on the type\n  config?: TConfig;\n\n  // Common method to define geometry fields\n  location?: FrameGeometrySource;\n\n  // Defines which data query refId is associated with the layer\n  filterData?: MatcherConfig;\n\n  // Common properties:\n  // https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html\n  // Layer opacity (0-1)\n  opacity?: number;\n\n  // Check tooltip (defaults to true)\n  tooltip?: boolean;\n}\n\n/**\n * @alpha\n */\nexport interface MapLayerHandler<TConfig = any> {\n  init: () => BaseLayer;\n  /**\n   * The update function should only be implemented if the layer type makes use of query data\n   */\n  update?: (data: PanelData) => void;\n\n  /** Optional callback to cleaup before getting removed */\n  dispose?: () => void;\n\n  /** return react node for the legend */\n  legend?: ReactNode;\n\n  /**\n   * Show custom elements in the panel edit UI\n   */\n  registerOptionsUI?: (builder: PanelOptionsEditorBuilder<MapLayerOptions<TConfig>>) => void;\n}\n\n/**\n * Map layer configuration\n *\n * @alpha\n */\nexport interface MapLayerRegistryItem<TConfig = MapLayerOptions> extends RegistryItemWithOptions {\n  /**\n   * This layer can be used as a background\n   */\n  isBaseMap?: boolean;\n\n  /**\n   * Show location controls\n   */\n  showLocation?: boolean;\n\n  /**\n   * Hide transparency controls in UI\n   */\n  hideOpacity?: boolean;\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param options\n   */\n  create: (\n    map: PluggableMap,\n    options: MapLayerOptions<TConfig>,\n    eventBus: EventBus,\n    theme: GrafanaTheme2\n  ) => Promise<MapLayerHandler>;\n}\n"],"mappings":"AAUA;AACA;AACA;AACA,WAAYA,uBAAZ;AAUA;AACA;AACA;;WAZYA,uB;EAAAA,uB;EAAAA,uB;EAAAA,uB;EAAAA,uB;GAAAA,uB,KAAAA,uB"},"metadata":{},"sourceType":"module"}