{"ast":null,"code":"const _excluded = [\"invalid\", \"className\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { stylesFactory, useTheme2 } from '../../themes';\nimport { getFocusStyle, sharedInputStyle } from '../Forms/commonStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const TextArea = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    invalid,\n    className\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const theme = useTheme2();\n  const styles = getTextAreaStyle(theme, invalid);\n  return /*#__PURE__*/_jsx(\"textarea\", Object.assign({}, props, {\n    className: cx(styles.textarea, className),\n    ref: ref\n  }));\n});\nconst getTextAreaStyle = stylesFactory((theme, invalid = false) => {\n  return {\n    textarea: cx(sharedInputStyle(theme), getFocusStyle(theme.v1), css`\n        border-radius: ${theme.shape.borderRadius()};\n        padding: ${theme.spacing.gridSize / 4}px ${theme.spacing.gridSize}px;\n        width: 100%;\n        border-color: ${invalid ? theme.colors.error.border : theme.components.input.borderColor};\n      `)\n  };\n});\nTextArea.displayName = 'TextArea';","map":{"version":3,"names":["css","cx","React","stylesFactory","useTheme2","getFocusStyle","sharedInputStyle","TextArea","forwardRef","ref","invalid","className","props","theme","styles","getTextAreaStyle","textarea","v1","shape","borderRadius","spacing","gridSize","colors","error","border","components","input","borderColor","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/TextArea/TextArea.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { HTMLProps } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { stylesFactory, useTheme2 } from '../../themes';\nimport { getFocusStyle, sharedInputStyle } from '../Forms/commonStyles';\n\nexport interface Props extends Omit<HTMLProps<HTMLTextAreaElement>, 'size'> {\n  /** Show an invalid state around the input */\n  invalid?: boolean;\n}\n\nexport const TextArea = React.forwardRef<HTMLTextAreaElement, Props>(({ invalid, className, ...props }, ref) => {\n  const theme = useTheme2();\n  const styles = getTextAreaStyle(theme, invalid);\n\n  return <textarea {...props} className={cx(styles.textarea, className)} ref={ref} />;\n});\n\nconst getTextAreaStyle = stylesFactory((theme: GrafanaTheme2, invalid = false) => {\n  return {\n    textarea: cx(\n      sharedInputStyle(theme),\n      getFocusStyle(theme.v1),\n      css`\n        border-radius: ${theme.shape.borderRadius()};\n        padding: ${theme.spacing.gridSize / 4}px ${theme.spacing.gridSize}px;\n        width: 100%;\n        border-color: ${invalid ? theme.colors.error.border : theme.components.input.borderColor};\n      `\n    ),\n  };\n});\n\nTextArea.displayName = 'TextArea';\n"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAiC,OAAjC;AAIA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,cAAzC;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,uBAAhD;;AAOA,OAAO,MAAMC,QAAQ,gBAAGL,KAAK,CAACM,UAAN,CAA6C,OAAmCC,GAAnC,KAA2C;EAAA,IAA1C;IAAEC,OAAF;IAAWC;EAAX,CAA0C;EAAA,IAAjBC,KAAiB;;EAC9G,MAAMC,KAAK,GAAGT,SAAS,EAAvB;EACA,MAAMU,MAAM,GAAGC,gBAAgB,CAACF,KAAD,EAAQH,OAAR,CAA/B;EAEA,oBAAO,mCAAcE,KAAd;IAAqB,SAAS,EAAEX,EAAE,CAACa,MAAM,CAACE,QAAR,EAAkBL,SAAlB,CAAlC;IAAgE,GAAG,EAAEF;EAArE,GAAP;AACD,CALuB,CAAjB;AAOP,MAAMM,gBAAgB,GAAGZ,aAAa,CAAC,CAACU,KAAD,EAAuBH,OAAO,GAAG,KAAjC,KAA2C;EAChF,OAAO;IACLM,QAAQ,EAAEf,EAAE,CACVK,gBAAgB,CAACO,KAAD,CADN,EAEVR,aAAa,CAACQ,KAAK,CAACI,EAAP,CAFH,EAGVjB,GAAI;AACV,yBAAyBa,KAAK,CAACK,KAAN,CAAYC,YAAZ,EAA2B;AACpD,mBAAmBN,KAAK,CAACO,OAAN,CAAcC,QAAd,GAAyB,CAAE,MAAKR,KAAK,CAACO,OAAN,CAAcC,QAAS;AAC1E;AACA,wBAAwBX,OAAO,GAAGG,KAAK,CAACS,MAAN,CAAaC,KAAb,CAAmBC,MAAtB,GAA+BX,KAAK,CAACY,UAAN,CAAiBC,KAAjB,CAAuBC,WAAY;AACjG,OARgB;EADP,CAAP;AAYD,CAbqC,CAAtC;AAeApB,QAAQ,CAACqB,WAAT,GAAuB,UAAvB"},"metadata":{},"sourceType":"module"}