{"ast":null,"code":"var _Spinner, _div, _br;\n\nimport { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useAsync, useDebounce } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { useStyles2, Spinner, Button } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { PreviewsSystemRequirements } from '../../components/PreviewsSystemRequirements';\nimport { useSearchQuery } from '../../hooks/useSearchQuery';\nimport { getGrafanaSearcher } from '../../service';\nimport { SearchLayout } from '../../types';\nimport { reportDashboardListViewed } from '../reporting';\nimport { newSearchSelection, updateSearchSelection } from '../selection';\nimport { ActionRow, getValidQueryLayout } from './ActionRow';\nimport { FolderSection } from './FolderSection';\nimport { FolderView } from './FolderView';\nimport { ManageActions } from './ManageActions';\nimport { SearchResultsCards } from './SearchResultsCards';\nimport { SearchResultsGrid } from './SearchResultsGrid';\nimport { SearchResultsTable } from './SearchResultsTable';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const SearchView = ({\n  showManage,\n  folderDTO,\n  queryText,\n  onQueryTextChange,\n  hidePseudoFolders,\n  includePanels,\n  setIncludePanels,\n  keyboardEvents\n}) => {\n  var _query$sort3, _query$query, _query$tag2, _results$value;\n\n  const styles = useStyles2(getStyles);\n  const {\n    query,\n    onTagFilterChange,\n    onTagAdd,\n    onDatasourceChange,\n    onSortChange,\n    onLayoutChange\n  } = useSearchQuery({});\n  query.query = queryText; // Use the query value passed in from parent rather than from URL\n\n  const [searchSelection, setSearchSelection] = useState(newSearchSelection());\n  const layout = getValidQueryLayout(query);\n  const isFolders = layout === SearchLayout.Folders;\n  const [listKey, setListKey] = useState(Date.now());\n  const searchQuery = useMemo(() => {\n    var _query$sort, _q$sort, _q$query, _q$sort2;\n\n    const q = {\n      query: queryText,\n      tags: query.tag,\n      ds_uid: query.datasource,\n      location: folderDTO === null || folderDTO === void 0 ? void 0 : folderDTO.uid,\n      // This will scope all results to the prefix\n      sort: (_query$sort = query.sort) === null || _query$sort === void 0 ? void 0 : _query$sort.value\n    }; // Only dashboards have additional properties\n\n    if ((_q$sort = q.sort) !== null && _q$sort !== void 0 && _q$sort.length && !q.sort.includes('name')) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (!((_q$query = q.query) !== null && _q$query !== void 0 && _q$query.length)) {\n      q.query = '*';\n\n      if (!q.location) {\n        q.kind = ['dashboard', 'folder']; // skip panels\n      }\n    }\n\n    if (!includePanels && !q.kind) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (q.query === '*' && !((_q$sort2 = q.sort) !== null && _q$sort2 !== void 0 && _q$sort2.length)) {\n      q.sort = 'name_sort';\n    }\n\n    return q;\n  }, [query, queryText, folderDTO, includePanels]); // Search usage reporting\n\n  useDebounce(() => {\n    var _query$sort2, _query$tag;\n\n    reportDashboardListViewed(folderDTO ? 'manage_dashboards' : 'dashboard_search', {\n      layout: query.layout,\n      starred: query.starred,\n      sortValue: (_query$sort2 = query.sort) === null || _query$sort2 === void 0 ? void 0 : _query$sort2.value,\n      query: query.query,\n      tagCount: (_query$tag = query.tag) === null || _query$tag === void 0 ? void 0 : _query$tag.length\n    });\n  }, 1000, [folderDTO, query.layout, query.starred, (_query$sort3 = query.sort) === null || _query$sort3 === void 0 ? void 0 : _query$sort3.value, (_query$query = query.query) === null || _query$query === void 0 ? void 0 : _query$query.length, (_query$tag2 = query.tag) === null || _query$tag2 === void 0 ? void 0 : _query$tag2.length]);\n  const results = useAsync(() => {\n    return getGrafanaSearcher().search(searchQuery);\n  }, [searchQuery]);\n  const clearSelection = useCallback(() => {\n    searchSelection.items.clear();\n    setSearchSelection(Object.assign({}, searchSelection));\n  }, [searchSelection]);\n  const toggleSelection = useCallback((kind, uid) => {\n    const current = searchSelection.isSelected(kind, uid);\n    setSearchSelection(updateSearchSelection(searchSelection, !current, kind, [uid]));\n  }, [searchSelection]); // This gets the possible tags from within the query results\n\n  const getTagOptions = () => {\n    return getGrafanaSearcher().tags(searchQuery);\n  }; // function to update items when dashboards or folders are moved or deleted\n\n\n  const onChangeItemsList = async () => {\n    // clean up search selection\n    clearSelection();\n    setListKey(Date.now()); // trigger again the search to the backend\n\n    onQueryTextChange(query.query);\n  };\n\n  const renderResults = () => {\n    const value = results.value;\n\n    if ((!value || !value.totalRows) && !isFolders) {\n      if (results.loading && !value) {\n        return _Spinner || (_Spinner = /*#__PURE__*/_jsx(Spinner, {}));\n      }\n\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.noResults,\n        children: [_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n          children: \"No results found for your query.\"\n        })), _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: () => {\n            var _query$tag3;\n\n            if (query.query) {\n              onQueryTextChange('');\n            }\n\n            if ((_query$tag3 = query.tag) !== null && _query$tag3 !== void 0 && _query$tag3.length) {\n              onTagFilterChange([]);\n            }\n\n            if (query.datasource) {\n              onDatasourceChange(undefined);\n            }\n          },\n          children: \"Remove search constraints\"\n        })]\n      });\n    }\n\n    const selection = showManage ? searchSelection.isSelected : undefined;\n\n    if (layout === SearchLayout.Folders) {\n      if (folderDTO) {\n        return /*#__PURE__*/_jsx(FolderSection, {\n          section: {\n            uid: folderDTO.uid,\n            kind: 'folder',\n            title: folderDTO.title\n          },\n          selection: selection,\n          selectionToggle: toggleSelection,\n          onTagSelected: onTagAdd,\n          renderStandaloneBody: true,\n          tags: query.tag\n        }, listKey);\n      }\n\n      return /*#__PURE__*/_jsx(FolderView, {\n        selection: selection,\n        selectionToggle: toggleSelection,\n        tags: query.tag,\n        onTagSelected: onTagAdd,\n        hidePseudoFolders: hidePseudoFolders\n      }, listKey);\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsx(AutoSizer, {\n        children: ({\n          width,\n          height\n        }) => {\n          const props = {\n            response: value,\n            selection,\n            selectionToggle: toggleSelection,\n            clearSelection,\n            width: width,\n            height: height,\n            onTagSelected: onTagAdd,\n            keyboardEvents,\n            onDatasourceChange: query.datasource ? onDatasourceChange : undefined\n          };\n\n          if (layout === SearchLayout.Grid) {\n            return /*#__PURE__*/_jsx(SearchResultsGrid, Object.assign({}, props));\n          }\n\n          if (width < 800) {\n            return /*#__PURE__*/_jsx(SearchResultsCards, Object.assign({}, props));\n          }\n\n          return /*#__PURE__*/_jsx(SearchResultsTable, Object.assign({}, props));\n        }\n      })\n    });\n  };\n\n  if (folderDTO && !results.loading && !((_results$value = results.value) !== null && _results$value !== void 0 && _results$value.totalRows) && !queryText.length) {\n    return /*#__PURE__*/_jsx(EmptyListCTA, {\n      title: \"This folder doesn't have any dashboards yet\",\n      buttonIcon: \"plus\",\n      buttonTitle: \"Create Dashboard\",\n      buttonLink: `dashboard/new?folderId=${folderDTO.id}`,\n      proTip: \"Add/move dashboards to your folder at ->\",\n      proTipLink: \"dashboards\",\n      proTipLinkTitle: \"Manage dashboards\",\n      proTipTarget: \"\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [Boolean(searchSelection.items.size > 0) ? /*#__PURE__*/_jsx(ManageActions, {\n      items: searchSelection.items,\n      onChange: onChangeItemsList,\n      clearSelection: clearSelection\n    }) : /*#__PURE__*/_jsx(ActionRow, {\n      onLayoutChange: v => {\n        if (v === SearchLayout.Folders) {\n          if (query.query) {\n            onQueryTextChange(''); // parent will clear the sort\n          }\n        }\n\n        onLayoutChange(v);\n      },\n      onSortChange: onSortChange,\n      onTagFilterChange: onTagFilterChange,\n      getTagOptions: getTagOptions,\n      getSortOptions: getGrafanaSearcher().getSortOptions,\n      onDatasourceChange: onDatasourceChange,\n      query: query,\n      includePanels: includePanels,\n      setIncludePanels: setIncludePanels\n    }), layout === SearchLayout.Grid && /*#__PURE__*/_jsx(PreviewsSystemRequirements, {\n      bottomSpacing: 3,\n      showPreviews: true,\n      onRemove: () => onLayoutChange(SearchLayout.List)\n    }), renderResults()]\n  });\n};\n\nconst getStyles = theme => ({\n  searchInput: css`\n    margin-bottom: 6px;\n    min-height: ${theme.spacing(4)};\n  `,\n  unsupported: css`\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    font-size: 18px;\n  `,\n  noResults: css`\n    padding: ${theme.v1.spacing.md};\n    background: ${theme.v1.colors.bg2};\n    font-style: italic;\n    margin-top: ${theme.v1.spacing.md};\n  `\n});","map":{"version":3,"names":["css","React","useCallback","useMemo","useState","useAsync","useDebounce","AutoSizer","useStyles2","Spinner","Button","EmptyListCTA","PreviewsSystemRequirements","useSearchQuery","getGrafanaSearcher","SearchLayout","reportDashboardListViewed","newSearchSelection","updateSearchSelection","ActionRow","getValidQueryLayout","FolderSection","FolderView","ManageActions","SearchResultsCards","SearchResultsGrid","SearchResultsTable","SearchView","showManage","folderDTO","queryText","onQueryTextChange","hidePseudoFolders","includePanels","setIncludePanels","keyboardEvents","styles","getStyles","query","onTagFilterChange","onTagAdd","onDatasourceChange","onSortChange","onLayoutChange","searchSelection","setSearchSelection","layout","isFolders","Folders","listKey","setListKey","Date","now","searchQuery","q","tags","tag","ds_uid","datasource","location","uid","sort","value","length","includes","kind","starred","sortValue","tagCount","results","search","clearSelection","items","clear","toggleSelection","current","isSelected","getTagOptions","onChangeItemsList","renderResults","totalRows","loading","noResults","undefined","selection","title","height","width","props","response","selectionToggle","onTagSelected","Grid","id","Boolean","size","v","getSortOptions","List","theme","searchInput","spacing","unsupported","v1","md","colors","bg2"],"sources":["/home/soula/grafana/public/app/features/search/page/components/SearchView.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useAsync, useDebounce } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Observable } from 'rxjs';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Spinner, Button } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { FolderDTO } from 'app/types';\n\nimport { PreviewsSystemRequirements } from '../../components/PreviewsSystemRequirements';\nimport { useSearchQuery } from '../../hooks/useSearchQuery';\nimport { getGrafanaSearcher, SearchQuery } from '../../service';\nimport { SearchLayout } from '../../types';\nimport { reportDashboardListViewed } from '../reporting';\nimport { newSearchSelection, updateSearchSelection } from '../selection';\n\nimport { ActionRow, getValidQueryLayout } from './ActionRow';\nimport { FolderSection } from './FolderSection';\nimport { FolderView } from './FolderView';\nimport { ManageActions } from './ManageActions';\nimport { SearchResultsCards } from './SearchResultsCards';\nimport { SearchResultsGrid } from './SearchResultsGrid';\nimport { SearchResultsTable, SearchResultsProps } from './SearchResultsTable';\n\nexport type SearchViewProps = {\n  queryText: string; // odd that it is not from query.query\n  showManage: boolean;\n  folderDTO?: FolderDTO;\n  hidePseudoFolders?: boolean; // Recent + starred\n  onQueryTextChange: (newQueryText: string) => void;\n  includePanels: boolean;\n  setIncludePanels: (v: boolean) => void;\n  keyboardEvents: Observable<React.KeyboardEvent>;\n};\n\nexport const SearchView = ({\n  showManage,\n  folderDTO,\n  queryText,\n  onQueryTextChange,\n  hidePseudoFolders,\n  includePanels,\n  setIncludePanels,\n  keyboardEvents,\n}: SearchViewProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { query, onTagFilterChange, onTagAdd, onDatasourceChange, onSortChange, onLayoutChange } = useSearchQuery({});\n  query.query = queryText; // Use the query value passed in from parent rather than from URL\n\n  const [searchSelection, setSearchSelection] = useState(newSearchSelection());\n  const layout = getValidQueryLayout(query);\n  const isFolders = layout === SearchLayout.Folders;\n\n  const [listKey, setListKey] = useState(Date.now());\n\n  const searchQuery = useMemo(() => {\n    const q: SearchQuery = {\n      query: queryText,\n      tags: query.tag as string[],\n      ds_uid: query.datasource as string,\n      location: folderDTO?.uid, // This will scope all results to the prefix\n      sort: query.sort?.value,\n    };\n\n    // Only dashboards have additional properties\n    if (q.sort?.length && !q.sort.includes('name')) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (!q.query?.length) {\n      q.query = '*';\n      if (!q.location) {\n        q.kind = ['dashboard', 'folder']; // skip panels\n      }\n    }\n\n    if (!includePanels && !q.kind) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (q.query === '*' && !q.sort?.length) {\n      q.sort = 'name_sort';\n    }\n    return q;\n  }, [query, queryText, folderDTO, includePanels]);\n\n  // Search usage reporting\n  useDebounce(\n    () => {\n      reportDashboardListViewed(folderDTO ? 'manage_dashboards' : 'dashboard_search', {\n        layout: query.layout,\n        starred: query.starred,\n        sortValue: query.sort?.value,\n        query: query.query,\n        tagCount: query.tag?.length,\n      });\n    },\n    1000,\n    [folderDTO, query.layout, query.starred, query.sort?.value, query.query?.length, query.tag?.length]\n  );\n\n  const results = useAsync(() => {\n    return getGrafanaSearcher().search(searchQuery);\n  }, [searchQuery]);\n\n  const clearSelection = useCallback(() => {\n    searchSelection.items.clear();\n    setSearchSelection({ ...searchSelection });\n  }, [searchSelection]);\n\n  const toggleSelection = useCallback(\n    (kind: string, uid: string) => {\n      const current = searchSelection.isSelected(kind, uid);\n      setSearchSelection(updateSearchSelection(searchSelection, !current, kind, [uid]));\n    },\n    [searchSelection]\n  );\n\n  // This gets the possible tags from within the query results\n  const getTagOptions = (): Promise<TermCount[]> => {\n    return getGrafanaSearcher().tags(searchQuery);\n  };\n\n  // function to update items when dashboards or folders are moved or deleted\n  const onChangeItemsList = async () => {\n    // clean up search selection\n    clearSelection();\n    setListKey(Date.now());\n    // trigger again the search to the backend\n    onQueryTextChange(query.query);\n  };\n\n  const renderResults = () => {\n    const value = results.value;\n\n    if ((!value || !value.totalRows) && !isFolders) {\n      if (results.loading && !value) {\n        return <Spinner />;\n      }\n\n      return (\n        <div className={styles.noResults}>\n          <div>No results found for your query.</div>\n          <br />\n          <Button\n            variant=\"secondary\"\n            onClick={() => {\n              if (query.query) {\n                onQueryTextChange('');\n              }\n              if (query.tag?.length) {\n                onTagFilterChange([]);\n              }\n              if (query.datasource) {\n                onDatasourceChange(undefined);\n              }\n            }}\n          >\n            Remove search constraints\n          </Button>\n        </div>\n      );\n    }\n\n    const selection = showManage ? searchSelection.isSelected : undefined;\n    if (layout === SearchLayout.Folders) {\n      if (folderDTO) {\n        return (\n          <FolderSection\n            section={{ uid: folderDTO.uid, kind: 'folder', title: folderDTO.title }}\n            selection={selection}\n            selectionToggle={toggleSelection}\n            onTagSelected={onTagAdd}\n            renderStandaloneBody={true}\n            tags={query.tag}\n            key={listKey}\n          />\n        );\n      }\n      return (\n        <FolderView\n          key={listKey}\n          selection={selection}\n          selectionToggle={toggleSelection}\n          tags={query.tag}\n          onTagSelected={onTagAdd}\n          hidePseudoFolders={hidePseudoFolders}\n        />\n      );\n    }\n\n    return (\n      <div style={{ height: '100%', width: '100%' }}>\n        <AutoSizer>\n          {({ width, height }) => {\n            const props: SearchResultsProps = {\n              response: value!,\n              selection,\n              selectionToggle: toggleSelection,\n              clearSelection,\n              width: width,\n              height: height,\n              onTagSelected: onTagAdd,\n              keyboardEvents,\n              onDatasourceChange: query.datasource ? onDatasourceChange : undefined,\n            };\n\n            if (layout === SearchLayout.Grid) {\n              return <SearchResultsGrid {...props} />;\n            }\n\n            if (width < 800) {\n              return <SearchResultsCards {...props} />;\n            }\n\n            return <SearchResultsTable {...props} />;\n          }}\n        </AutoSizer>\n      </div>\n    );\n  };\n\n  if (folderDTO && !results.loading && !results.value?.totalRows && !queryText.length) {\n    return (\n      <EmptyListCTA\n        title=\"This folder doesn't have any dashboards yet\"\n        buttonIcon=\"plus\"\n        buttonTitle=\"Create Dashboard\"\n        buttonLink={`dashboard/new?folderId=${folderDTO.id}`}\n        proTip=\"Add/move dashboards to your folder at ->\"\n        proTipLink=\"dashboards\"\n        proTipLinkTitle=\"Manage dashboards\"\n        proTipTarget=\"\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {Boolean(searchSelection.items.size > 0) ? (\n        <ManageActions items={searchSelection.items} onChange={onChangeItemsList} clearSelection={clearSelection} />\n      ) : (\n        <ActionRow\n          onLayoutChange={(v) => {\n            if (v === SearchLayout.Folders) {\n              if (query.query) {\n                onQueryTextChange(''); // parent will clear the sort\n              }\n            }\n            onLayoutChange(v);\n          }}\n          onSortChange={onSortChange}\n          onTagFilterChange={onTagFilterChange}\n          getTagOptions={getTagOptions}\n          getSortOptions={getGrafanaSearcher().getSortOptions}\n          onDatasourceChange={onDatasourceChange}\n          query={query}\n          includePanels={includePanels!}\n          setIncludePanels={setIncludePanels}\n        />\n      )}\n\n      {layout === SearchLayout.Grid && (\n        <PreviewsSystemRequirements\n          bottomSpacing={3}\n          showPreviews={true}\n          onRemove={() => onLayoutChange(SearchLayout.List)}\n        />\n      )}\n      {renderResults()}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css`\n    margin-bottom: 6px;\n    min-height: ${theme.spacing(4)};\n  `,\n  unsupported: css`\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    font-size: 18px;\n  `,\n  noResults: css`\n    padding: ${theme.v1.spacing.md};\n    background: ${theme.v1.colors.bg2};\n    font-style: italic;\n    margin-top: ${theme.v1.spacing.md};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}