{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { css } from '@emotion/css';\nimport cx from 'classnames';\nimport * as React from 'react';\nimport { withTheme2, stylesFactory, Button } from '@grafana/ui';\nimport { autoColor } from '../../Theme';\nimport DraggableManager, { EUpdateTypes } from '../../utils/DraggableManager';\nimport GraphTicks from './GraphTicks';\nimport Scrubber from './Scrubber';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const getStyles = stylesFactory(theme => {\n  // Need this cause emotion will merge emotion generated classes into single className if used with cx from emotion\n  // package and the selector won't work\n  const ViewingLayerResetZoomHoverClassName = 'JaegerUiComponents__ViewingLayerResetZoomHoverClassName';\n  const ViewingLayerResetZoom = css`\n    label: ViewingLayerResetZoom;\n    display: none;\n    position: absolute;\n    right: 1%;\n    top: 10%;\n    z-index: 1;\n  `;\n  return {\n    ViewingLayer: css`\n      label: ViewingLayer;\n      cursor: vertical-text;\n      position: relative;\n      z-index: 1;\n      &:hover > .${ViewingLayerResetZoomHoverClassName} {\n        display: unset;\n      }\n    `,\n    ViewingLayerGraph: css`\n      label: ViewingLayerGraph;\n      border: 1px solid ${autoColor(theme, '#999')};\n      /* need !important here to overcome something from semantic UI */\n      overflow: visible !important;\n      position: relative;\n      transform-origin: 0 0;\n      width: 100%;\n    `,\n    ViewingLayerInactive: css`\n      label: ViewingLayerInactive;\n      fill: ${autoColor(theme, 'rgba(214, 214, 214, 0.5)')};\n    `,\n    ViewingLayerCursorGuide: css`\n      label: ViewingLayerCursorGuide;\n      stroke: ${autoColor(theme, '#f44')};\n      stroke-width: 1;\n    `,\n    ViewingLayerDraggedShift: css`\n      label: ViewingLayerDraggedShift;\n      fill-opacity: 0.2;\n    `,\n    ViewingLayerDrag: css`\n      label: ViewingLayerDrag;\n      fill: ${autoColor(theme, '#44f')};\n    `,\n    ViewingLayerFullOverlay: css`\n      label: ViewingLayerFullOverlay;\n      bottom: 0;\n      cursor: col-resize;\n      left: 0;\n      position: fixed;\n      right: 0;\n      top: 0;\n      user-select: none;\n    `,\n    ViewingLayerResetZoom,\n    ViewingLayerResetZoomHoverClassName\n  };\n});\n\n/**\n * Designate the tags for the different dragging managers. Exported for tests.\n */\nexport const dragTypes = {\n  /**\n   * Tag for dragging the right scrubber, e.g. end of the current view range.\n   */\n  SHIFT_END: 'SHIFT_END',\n\n  /**\n   * Tag for dragging the left scrubber, e.g. start of the current view range.\n   */\n  SHIFT_START: 'SHIFT_START',\n\n  /**\n   * Tag for dragging a new view range.\n   */\n  REFRAME: 'REFRAME'\n};\n/**\n * Returns the layout information for drawing the view-range differential, e.g.\n * show what will change when the mouse is released. Basically, this is the\n * difference from the start of the drag to the current position.\n *\n * @returns {{ x: string, width: string, leadginX: string }}\n */\n\nfunction getNextViewLayout(start, position) {\n  const [left, right] = start < position ? [start, position] : [position, start];\n  return {\n    x: `${left * 100}%`,\n    width: `${(right - left) * 100}%`,\n    leadingX: `${position * 100}%`\n  };\n}\n/**\n * `ViewingLayer` is rendered on top of the Canvas rendering of the minimap and\n * handles showing the current view range and handles mouse UX for modifying it.\n */\n\n\nexport class UnthemedViewingLayer extends React.PureComponent {\n  /**\n   * `_draggerReframe` handles clicking and dragging on the `ViewingLayer` to\n   * redefined the view range.\n   */\n\n  /**\n   * `_draggerStart` handles dragging the left scrubber to adjust the start of\n   * the view range.\n   */\n\n  /**\n   * `_draggerEnd` handles dragging the right scrubber to adjust the end of\n   * the view range.\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", void 0);\n\n    _defineProperty(this, \"_root\", void 0);\n\n    _defineProperty(this, \"_draggerReframe\", void 0);\n\n    _defineProperty(this, \"_draggerStart\", void 0);\n\n    _defineProperty(this, \"_draggerEnd\", void 0);\n\n    _defineProperty(this, \"_setRoot\", elm => {\n      this._root = elm;\n    });\n\n    _defineProperty(this, \"_getDraggingBounds\", tag => {\n      if (!this._root) {\n        throw new Error('invalid state');\n      }\n\n      const {\n        left: clientXLeft,\n        width\n      } = this._root.getBoundingClientRect();\n\n      const [viewStart, viewEnd] = this.props.viewRange.time.current;\n      let maxValue = 1;\n      let minValue = 0;\n\n      if (tag === dragTypes.SHIFT_START) {\n        maxValue = viewEnd;\n      } else if (tag === dragTypes.SHIFT_END) {\n        minValue = viewStart;\n      }\n\n      return {\n        clientXLeft,\n        maxValue,\n        minValue,\n        width\n      };\n    });\n\n    _defineProperty(this, \"_handleReframeMouseMove\", ({\n      value\n    }) => {\n      this.props.updateNextViewRangeTime({\n        cursor: value\n      });\n    });\n\n    _defineProperty(this, \"_handleReframeMouseLeave\", () => {\n      this.props.updateNextViewRangeTime({\n        cursor: null\n      });\n    });\n\n    _defineProperty(this, \"_handleReframeDragUpdate\", ({\n      value\n    }) => {\n      const shift = value;\n      const {\n        time\n      } = this.props.viewRange;\n      const anchor = time.reframe ? time.reframe.anchor : shift;\n      const update = {\n        reframe: {\n          anchor,\n          shift\n        }\n      };\n      this.props.updateNextViewRangeTime(update);\n    });\n\n    _defineProperty(this, \"_handleReframeDragEnd\", ({\n      manager,\n      value\n    }) => {\n      const {\n        time\n      } = this.props.viewRange;\n      const anchor = time.reframe ? time.reframe.anchor : value;\n      const [start, end] = value < anchor ? [value, anchor] : [anchor, value];\n      manager.resetBounds();\n      this.props.updateViewRangeTime(start, end, 'minimap');\n    });\n\n    _defineProperty(this, \"_handleScrubberEnterLeave\", ({\n      type\n    }) => {\n      const preventCursorLine = type === EUpdateTypes.MouseEnter;\n      this.setState({\n        preventCursorLine\n      });\n    });\n\n    _defineProperty(this, \"_handleScrubberDragUpdate\", ({\n      event,\n      tag,\n      type,\n      value\n    }) => {\n      if (type === EUpdateTypes.DragStart) {\n        event.stopPropagation();\n      }\n\n      if (tag === dragTypes.SHIFT_START) {\n        this.props.updateNextViewRangeTime({\n          shiftStart: value\n        });\n      } else if (tag === dragTypes.SHIFT_END) {\n        this.props.updateNextViewRangeTime({\n          shiftEnd: value\n        });\n      }\n    });\n\n    _defineProperty(this, \"_handleScrubberDragEnd\", ({\n      manager,\n      tag,\n      value\n    }) => {\n      const [viewStart, viewEnd] = this.props.viewRange.time.current;\n      let update;\n\n      if (tag === dragTypes.SHIFT_START) {\n        update = [value, viewEnd];\n      } else if (tag === dragTypes.SHIFT_END) {\n        update = [viewStart, value];\n      } else {\n        // to satisfy flow\n        throw new Error('bad state');\n      }\n\n      manager.resetBounds();\n      this.setState({\n        preventCursorLine: false\n      });\n      this.props.updateViewRangeTime(update[0], update[1], 'minimap');\n    });\n\n    _defineProperty(this, \"_resetTimeZoomClickHandler\", () => {\n      this.props.updateViewRangeTime(0, 1);\n    });\n\n    this._draggerReframe = new DraggableManager({\n      getBounds: this._getDraggingBounds,\n      onDragEnd: this._handleReframeDragEnd,\n      onDragMove: this._handleReframeDragUpdate,\n      onDragStart: this._handleReframeDragUpdate,\n      onMouseMove: this._handleReframeMouseMove,\n      onMouseLeave: this._handleReframeMouseLeave,\n      tag: dragTypes.REFRAME\n    });\n    this._draggerStart = new DraggableManager({\n      getBounds: this._getDraggingBounds,\n      onDragEnd: this._handleScrubberDragEnd,\n      onDragMove: this._handleScrubberDragUpdate,\n      onDragStart: this._handleScrubberDragUpdate,\n      onMouseEnter: this._handleScrubberEnterLeave,\n      onMouseLeave: this._handleScrubberEnterLeave,\n      tag: dragTypes.SHIFT_START\n    });\n    this._draggerEnd = new DraggableManager({\n      getBounds: this._getDraggingBounds,\n      onDragEnd: this._handleScrubberDragEnd,\n      onDragMove: this._handleScrubberDragUpdate,\n      onDragStart: this._handleScrubberDragUpdate,\n      onMouseEnter: this._handleScrubberEnterLeave,\n      onMouseLeave: this._handleScrubberEnterLeave,\n      tag: dragTypes.SHIFT_END\n    });\n    this._root = undefined;\n    this.state = {\n      preventCursorLine: false\n    };\n  }\n\n  componentWillUnmount() {\n    this._draggerReframe.dispose();\n\n    this._draggerEnd.dispose();\n\n    this._draggerStart.dispose();\n  }\n\n  /**\n   * Renders the difference between where the drag started and the current\n   * position, e.g. the red or blue highlight.\n   *\n   * @returns React.Node[]\n   */\n  _getMarkers(from, to) {\n    const styles = getStyles(this.props.theme);\n    const layout = getNextViewLayout(from, to);\n    return [/*#__PURE__*/_jsx(\"rect\", {\n      className: cx(styles.ViewingLayerDraggedShift, styles.ViewingLayerDrag),\n      x: layout.x,\n      y: \"0\",\n      width: layout.width,\n      height: this.props.height - 2\n    }, \"fill\"), /*#__PURE__*/_jsx(\"rect\", {\n      className: cx(styles.ViewingLayerDrag),\n      x: layout.leadingX,\n      y: \"0\",\n      width: \"1\",\n      height: this.props.height - 2\n    }, \"edge\")];\n  }\n\n  render() {\n    const {\n      height,\n      viewRange,\n      numTicks,\n      theme\n    } = this.props;\n    const {\n      preventCursorLine\n    } = this.state;\n    const {\n      current,\n      cursor,\n      shiftStart,\n      shiftEnd,\n      reframe\n    } = viewRange.time;\n    const haveNextTimeRange = shiftStart != null || shiftEnd != null || reframe != null;\n    const [viewStart, viewEnd] = current;\n    let leftInactive = 0;\n\n    if (viewStart) {\n      leftInactive = viewStart * 100;\n    }\n\n    let rightInactive = 100;\n\n    if (viewEnd) {\n      rightInactive = 100 - viewEnd * 100;\n    }\n\n    let cursorPosition;\n\n    if (!haveNextTimeRange && cursor != null && !preventCursorLine) {\n      cursorPosition = `${cursor * 100}%`;\n    }\n\n    const styles = getStyles(theme);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      \"aria-hidden\": true,\n      className: styles.ViewingLayer,\n      style: {\n        height\n      },\n      children: [(viewStart !== 0 || viewEnd !== 1) && /*#__PURE__*/_jsx(Button, {\n        onClick: this._resetTimeZoomClickHandler,\n        className: cx(styles.ViewingLayerResetZoom, styles.ViewingLayerResetZoomHoverClassName),\n        type: \"button\",\n        variant: \"secondary\",\n        children: \"Reset Selection\"\n      }), /*#__PURE__*/_jsxs(\"svg\", {\n        height: height,\n        className: styles.ViewingLayerGraph,\n        ref: this._setRoot,\n        onMouseDown: this._draggerReframe.handleMouseDown,\n        onMouseLeave: this._draggerReframe.handleMouseLeave,\n        onMouseMove: this._draggerReframe.handleMouseMove,\n        children: [leftInactive > 0 && /*#__PURE__*/_jsx(\"rect\", {\n          x: 0,\n          y: 0,\n          height: \"100%\",\n          width: `${leftInactive}%`,\n          className: styles.ViewingLayerInactive\n        }), rightInactive > 0 && /*#__PURE__*/_jsx(\"rect\", {\n          x: `${100 - rightInactive}%`,\n          y: 0,\n          height: \"100%\",\n          width: `${rightInactive}%`,\n          className: styles.ViewingLayerInactive\n        }), /*#__PURE__*/_jsx(GraphTicks, {\n          numTicks: numTicks\n        }), cursorPosition && /*#__PURE__*/_jsx(\"line\", {\n          className: styles.ViewingLayerCursorGuide,\n          x1: cursorPosition,\n          y1: \"0\",\n          x2: cursorPosition,\n          y2: height - 2,\n          strokeWidth: \"1\"\n        }), shiftStart != null && this._getMarkers(viewStart, shiftStart), shiftEnd != null && this._getMarkers(viewEnd, shiftEnd), /*#__PURE__*/_jsx(Scrubber, {\n          isDragging: shiftStart != null,\n          onMouseDown: this._draggerStart.handleMouseDown,\n          onMouseEnter: this._draggerStart.handleMouseEnter,\n          onMouseLeave: this._draggerStart.handleMouseLeave,\n          position: viewStart || 0\n        }), /*#__PURE__*/_jsx(Scrubber, {\n          isDragging: shiftEnd != null,\n          position: viewEnd || 1,\n          onMouseDown: this._draggerEnd.handleMouseDown,\n          onMouseEnter: this._draggerEnd.handleMouseEnter,\n          onMouseLeave: this._draggerEnd.handleMouseLeave\n        }), reframe != null && this._getMarkers(reframe.anchor, reframe.shift)]\n      }), haveNextTimeRange && /*#__PURE__*/_jsx(\"div\", {\n        className: styles.ViewingLayerFullOverlay\n      })]\n    });\n  }\n\n}\nexport default withTheme2(UnthemedViewingLayer);","map":{"version":3,"names":["css","cx","React","withTheme2","stylesFactory","Button","autoColor","DraggableManager","EUpdateTypes","GraphTicks","Scrubber","getStyles","theme","ViewingLayerResetZoomHoverClassName","ViewingLayerResetZoom","ViewingLayer","ViewingLayerGraph","ViewingLayerInactive","ViewingLayerCursorGuide","ViewingLayerDraggedShift","ViewingLayerDrag","ViewingLayerFullOverlay","dragTypes","SHIFT_END","SHIFT_START","REFRAME","getNextViewLayout","start","position","left","right","x","width","leadingX","UnthemedViewingLayer","PureComponent","constructor","props","elm","_root","tag","Error","clientXLeft","getBoundingClientRect","viewStart","viewEnd","viewRange","time","current","maxValue","minValue","value","updateNextViewRangeTime","cursor","shift","anchor","reframe","update","manager","end","resetBounds","updateViewRangeTime","type","preventCursorLine","MouseEnter","setState","event","DragStart","stopPropagation","shiftStart","shiftEnd","_draggerReframe","getBounds","_getDraggingBounds","onDragEnd","_handleReframeDragEnd","onDragMove","_handleReframeDragUpdate","onDragStart","onMouseMove","_handleReframeMouseMove","onMouseLeave","_handleReframeMouseLeave","_draggerStart","_handleScrubberDragEnd","_handleScrubberDragUpdate","onMouseEnter","_handleScrubberEnterLeave","_draggerEnd","undefined","state","componentWillUnmount","dispose","_getMarkers","from","to","styles","layout","height","render","numTicks","haveNextTimeRange","leftInactive","rightInactive","cursorPosition","_resetTimeZoomClickHandler","_setRoot","handleMouseDown","handleMouseLeave","handleMouseMove","handleMouseEnter"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/TracePageHeader/SpanGraph/ViewingLayer.tsx"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { css } from '@emotion/css';\nimport cx from 'classnames';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { withTheme2, stylesFactory, Button } from '@grafana/ui';\n\nimport { TUpdateViewRangeTimeFunction, ViewRange, ViewRangeTimeUpdate, TNil } from '../..';\nimport { autoColor } from '../../Theme';\nimport DraggableManager, { DraggableBounds, DraggingUpdate, EUpdateTypes } from '../../utils/DraggableManager';\n\nimport GraphTicks from './GraphTicks';\nimport Scrubber from './Scrubber';\n\nexport const getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  // Need this cause emotion will merge emotion generated classes into single className if used with cx from emotion\n  // package and the selector won't work\n  const ViewingLayerResetZoomHoverClassName = 'JaegerUiComponents__ViewingLayerResetZoomHoverClassName';\n  const ViewingLayerResetZoom = css`\n    label: ViewingLayerResetZoom;\n    display: none;\n    position: absolute;\n    right: 1%;\n    top: 10%;\n    z-index: 1;\n  `;\n  return {\n    ViewingLayer: css`\n      label: ViewingLayer;\n      cursor: vertical-text;\n      position: relative;\n      z-index: 1;\n      &:hover > .${ViewingLayerResetZoomHoverClassName} {\n        display: unset;\n      }\n    `,\n    ViewingLayerGraph: css`\n      label: ViewingLayerGraph;\n      border: 1px solid ${autoColor(theme, '#999')};\n      /* need !important here to overcome something from semantic UI */\n      overflow: visible !important;\n      position: relative;\n      transform-origin: 0 0;\n      width: 100%;\n    `,\n    ViewingLayerInactive: css`\n      label: ViewingLayerInactive;\n      fill: ${autoColor(theme, 'rgba(214, 214, 214, 0.5)')};\n    `,\n    ViewingLayerCursorGuide: css`\n      label: ViewingLayerCursorGuide;\n      stroke: ${autoColor(theme, '#f44')};\n      stroke-width: 1;\n    `,\n    ViewingLayerDraggedShift: css`\n      label: ViewingLayerDraggedShift;\n      fill-opacity: 0.2;\n    `,\n    ViewingLayerDrag: css`\n      label: ViewingLayerDrag;\n      fill: ${autoColor(theme, '#44f')};\n    `,\n    ViewingLayerFullOverlay: css`\n      label: ViewingLayerFullOverlay;\n      bottom: 0;\n      cursor: col-resize;\n      left: 0;\n      position: fixed;\n      right: 0;\n      top: 0;\n      user-select: none;\n    `,\n    ViewingLayerResetZoom,\n    ViewingLayerResetZoomHoverClassName,\n  };\n});\n\ntype ViewingLayerProps = {\n  height: number;\n  numTicks: number;\n  updateViewRangeTime: TUpdateViewRangeTimeFunction;\n  updateNextViewRangeTime: (update: ViewRangeTimeUpdate) => void;\n  viewRange: ViewRange;\n  theme: GrafanaTheme2;\n};\n\ntype ViewingLayerState = {\n  /**\n   * Cursor line should not be drawn when the mouse is over the scrubber handle.\n   */\n  preventCursorLine: boolean;\n};\n\n/**\n * Designate the tags for the different dragging managers. Exported for tests.\n */\nexport const dragTypes = {\n  /**\n   * Tag for dragging the right scrubber, e.g. end of the current view range.\n   */\n  SHIFT_END: 'SHIFT_END',\n  /**\n   * Tag for dragging the left scrubber, e.g. start of the current view range.\n   */\n  SHIFT_START: 'SHIFT_START',\n  /**\n   * Tag for dragging a new view range.\n   */\n  REFRAME: 'REFRAME',\n};\n\n/**\n * Returns the layout information for drawing the view-range differential, e.g.\n * show what will change when the mouse is released. Basically, this is the\n * difference from the start of the drag to the current position.\n *\n * @returns {{ x: string, width: string, leadginX: string }}\n */\nfunction getNextViewLayout(start: number, position: number) {\n  const [left, right] = start < position ? [start, position] : [position, start];\n  return {\n    x: `${left * 100}%`,\n    width: `${(right - left) * 100}%`,\n    leadingX: `${position * 100}%`,\n  };\n}\n\n/**\n * `ViewingLayer` is rendered on top of the Canvas rendering of the minimap and\n * handles showing the current view range and handles mouse UX for modifying it.\n */\nexport class UnthemedViewingLayer extends React.PureComponent<ViewingLayerProps, ViewingLayerState> {\n  state: ViewingLayerState;\n\n  _root: Element | TNil;\n\n  /**\n   * `_draggerReframe` handles clicking and dragging on the `ViewingLayer` to\n   * redefined the view range.\n   */\n  _draggerReframe: DraggableManager;\n\n  /**\n   * `_draggerStart` handles dragging the left scrubber to adjust the start of\n   * the view range.\n   */\n  _draggerStart: DraggableManager;\n\n  /**\n   * `_draggerEnd` handles dragging the right scrubber to adjust the end of\n   * the view range.\n   */\n  _draggerEnd: DraggableManager;\n\n  constructor(props: ViewingLayerProps) {\n    super(props);\n\n    this._draggerReframe = new DraggableManager({\n      getBounds: this._getDraggingBounds,\n      onDragEnd: this._handleReframeDragEnd,\n      onDragMove: this._handleReframeDragUpdate,\n      onDragStart: this._handleReframeDragUpdate,\n      onMouseMove: this._handleReframeMouseMove,\n      onMouseLeave: this._handleReframeMouseLeave,\n      tag: dragTypes.REFRAME,\n    });\n\n    this._draggerStart = new DraggableManager({\n      getBounds: this._getDraggingBounds,\n      onDragEnd: this._handleScrubberDragEnd,\n      onDragMove: this._handleScrubberDragUpdate,\n      onDragStart: this._handleScrubberDragUpdate,\n      onMouseEnter: this._handleScrubberEnterLeave,\n      onMouseLeave: this._handleScrubberEnterLeave,\n      tag: dragTypes.SHIFT_START,\n    });\n\n    this._draggerEnd = new DraggableManager({\n      getBounds: this._getDraggingBounds,\n      onDragEnd: this._handleScrubberDragEnd,\n      onDragMove: this._handleScrubberDragUpdate,\n      onDragStart: this._handleScrubberDragUpdate,\n      onMouseEnter: this._handleScrubberEnterLeave,\n      onMouseLeave: this._handleScrubberEnterLeave,\n      tag: dragTypes.SHIFT_END,\n    });\n\n    this._root = undefined;\n    this.state = {\n      preventCursorLine: false,\n    };\n  }\n\n  componentWillUnmount() {\n    this._draggerReframe.dispose();\n    this._draggerEnd.dispose();\n    this._draggerStart.dispose();\n  }\n\n  _setRoot = (elm: SVGElement | TNil) => {\n    this._root = elm;\n  };\n\n  _getDraggingBounds = (tag: string | TNil): DraggableBounds => {\n    if (!this._root) {\n      throw new Error('invalid state');\n    }\n    const { left: clientXLeft, width } = this._root.getBoundingClientRect();\n    const [viewStart, viewEnd] = this.props.viewRange.time.current;\n    let maxValue = 1;\n    let minValue = 0;\n    if (tag === dragTypes.SHIFT_START) {\n      maxValue = viewEnd;\n    } else if (tag === dragTypes.SHIFT_END) {\n      minValue = viewStart;\n    }\n    return { clientXLeft, maxValue, minValue, width };\n  };\n\n  _handleReframeMouseMove = ({ value }: DraggingUpdate) => {\n    this.props.updateNextViewRangeTime({ cursor: value });\n  };\n\n  _handleReframeMouseLeave = () => {\n    this.props.updateNextViewRangeTime({ cursor: null });\n  };\n\n  _handleReframeDragUpdate = ({ value }: DraggingUpdate) => {\n    const shift = value;\n    const { time } = this.props.viewRange;\n    const anchor = time.reframe ? time.reframe.anchor : shift;\n    const update = { reframe: { anchor, shift } };\n    this.props.updateNextViewRangeTime(update);\n  };\n\n  _handleReframeDragEnd = ({ manager, value }: DraggingUpdate) => {\n    const { time } = this.props.viewRange;\n    const anchor = time.reframe ? time.reframe.anchor : value;\n    const [start, end] = value < anchor ? [value, anchor] : [anchor, value];\n    manager.resetBounds();\n    this.props.updateViewRangeTime(start, end, 'minimap');\n  };\n\n  _handleScrubberEnterLeave = ({ type }: DraggingUpdate) => {\n    const preventCursorLine = type === EUpdateTypes.MouseEnter;\n    this.setState({ preventCursorLine });\n  };\n\n  _handleScrubberDragUpdate = ({ event, tag, type, value }: DraggingUpdate) => {\n    if (type === EUpdateTypes.DragStart) {\n      event.stopPropagation();\n    }\n    if (tag === dragTypes.SHIFT_START) {\n      this.props.updateNextViewRangeTime({ shiftStart: value });\n    } else if (tag === dragTypes.SHIFT_END) {\n      this.props.updateNextViewRangeTime({ shiftEnd: value });\n    }\n  };\n\n  _handleScrubberDragEnd = ({ manager, tag, value }: DraggingUpdate) => {\n    const [viewStart, viewEnd] = this.props.viewRange.time.current;\n    let update: [number, number];\n    if (tag === dragTypes.SHIFT_START) {\n      update = [value, viewEnd];\n    } else if (tag === dragTypes.SHIFT_END) {\n      update = [viewStart, value];\n    } else {\n      // to satisfy flow\n      throw new Error('bad state');\n    }\n    manager.resetBounds();\n    this.setState({ preventCursorLine: false });\n    this.props.updateViewRangeTime(update[0], update[1], 'minimap');\n  };\n\n  /**\n   * Resets the zoom to fully zoomed out.\n   */\n  _resetTimeZoomClickHandler = () => {\n    this.props.updateViewRangeTime(0, 1);\n  };\n\n  /**\n   * Renders the difference between where the drag started and the current\n   * position, e.g. the red or blue highlight.\n   *\n   * @returns React.Node[]\n   */\n  _getMarkers(from: number, to: number) {\n    const styles = getStyles(this.props.theme);\n    const layout = getNextViewLayout(from, to);\n    return [\n      <rect\n        key=\"fill\"\n        className={cx(styles.ViewingLayerDraggedShift, styles.ViewingLayerDrag)}\n        x={layout.x}\n        y=\"0\"\n        width={layout.width}\n        height={this.props.height - 2}\n      />,\n      <rect\n        key=\"edge\"\n        className={cx(styles.ViewingLayerDrag)}\n        x={layout.leadingX}\n        y=\"0\"\n        width=\"1\"\n        height={this.props.height - 2}\n      />,\n    ];\n  }\n\n  render() {\n    const { height, viewRange, numTicks, theme } = this.props;\n    const { preventCursorLine } = this.state;\n    const { current, cursor, shiftStart, shiftEnd, reframe } = viewRange.time;\n    const haveNextTimeRange = shiftStart != null || shiftEnd != null || reframe != null;\n    const [viewStart, viewEnd] = current;\n    let leftInactive = 0;\n    if (viewStart) {\n      leftInactive = viewStart * 100;\n    }\n    let rightInactive = 100;\n    if (viewEnd) {\n      rightInactive = 100 - viewEnd * 100;\n    }\n    let cursorPosition: string | undefined;\n    if (!haveNextTimeRange && cursor != null && !preventCursorLine) {\n      cursorPosition = `${cursor * 100}%`;\n    }\n    const styles = getStyles(theme);\n\n    return (\n      <div aria-hidden className={styles.ViewingLayer} style={{ height }}>\n        {(viewStart !== 0 || viewEnd !== 1) && (\n          <Button\n            onClick={this._resetTimeZoomClickHandler}\n            className={cx(styles.ViewingLayerResetZoom, styles.ViewingLayerResetZoomHoverClassName)}\n            type=\"button\"\n            variant=\"secondary\"\n          >\n            Reset Selection\n          </Button>\n        )}\n        <svg\n          height={height}\n          className={styles.ViewingLayerGraph}\n          ref={this._setRoot}\n          onMouseDown={this._draggerReframe.handleMouseDown}\n          onMouseLeave={this._draggerReframe.handleMouseLeave}\n          onMouseMove={this._draggerReframe.handleMouseMove}\n        >\n          {leftInactive > 0 && (\n            <rect x={0} y={0} height=\"100%\" width={`${leftInactive}%`} className={styles.ViewingLayerInactive} />\n          )}\n          {rightInactive > 0 && (\n            <rect\n              x={`${100 - rightInactive}%`}\n              y={0}\n              height=\"100%\"\n              width={`${rightInactive}%`}\n              className={styles.ViewingLayerInactive}\n            />\n          )}\n          <GraphTicks numTicks={numTicks} />\n          {cursorPosition && (\n            <line\n              className={styles.ViewingLayerCursorGuide}\n              x1={cursorPosition}\n              y1=\"0\"\n              x2={cursorPosition}\n              y2={height - 2}\n              strokeWidth=\"1\"\n            />\n          )}\n          {shiftStart != null && this._getMarkers(viewStart, shiftStart)}\n          {shiftEnd != null && this._getMarkers(viewEnd, shiftEnd)}\n          <Scrubber\n            isDragging={shiftStart != null}\n            onMouseDown={this._draggerStart.handleMouseDown}\n            onMouseEnter={this._draggerStart.handleMouseEnter}\n            onMouseLeave={this._draggerStart.handleMouseLeave}\n            position={viewStart || 0}\n          />\n          <Scrubber\n            isDragging={shiftEnd != null}\n            position={viewEnd || 1}\n            onMouseDown={this._draggerEnd.handleMouseDown}\n            onMouseEnter={this._draggerEnd.handleMouseEnter}\n            onMouseLeave={this._draggerEnd.handleMouseLeave}\n          />\n          {reframe != null && this._getMarkers(reframe.anchor, reframe.shift)}\n        </svg>\n        {/* fullOverlay updates the mouse cursor blocks mouse events */}\n        {haveNextTimeRange && <div className={styles.ViewingLayerFullOverlay} />}\n      </div>\n    );\n  }\n}\n\nexport default withTheme2(UnthemedViewingLayer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}