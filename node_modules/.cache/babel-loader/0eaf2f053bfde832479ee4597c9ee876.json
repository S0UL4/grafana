{"ast":null,"code":"const _excluded = [\"onChange\", \"ref\"],\n      _excluded2 = [\"onChange\", \"ref\"];\n\nvar _GrafanaConditionEval, _PreviewRule;\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { parseDuration, durationToMilliseconds } from '@grafana/data';\nimport { Field, InlineLabel, Input, InputControl, useStyles2 } from '@grafana/ui';\nimport { positiveDurationValidationPattern, durationValidationPattern } from '../../utils/time';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { GrafanaConditionEvalWarning } from './GrafanaConditionEvalWarning';\nimport { PreviewRule } from './PreviewRule';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\n\nconst forValidationOptions = {\n  required: {\n    value: true,\n    message: 'Required.'\n  },\n  pattern: durationValidationPattern\n};\nconst evaluateEveryValidationOptions = {\n  required: {\n    value: true,\n    message: 'Required.'\n  },\n  pattern: positiveDurationValidationPattern,\n  validate: value => {\n    const duration = parseDuration(value);\n\n    if (Object.keys(duration).length) {\n      const diff = durationToMilliseconds(duration);\n\n      if (diff < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n\n      if (diff % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n    }\n\n    return true;\n  }\n};\nexport const GrafanaEvaluationBehavior = () => {\n  var _errors$evaluateFor, _errors$evaluateFor2;\n\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n  const {\n    register,\n    formState: {\n      errors\n    }\n  } = useFormContext();\n  const evaluateEveryId = 'eval-every-input';\n  const evaluateForId = 'eval-for-input';\n  return (\n    /*#__PURE__*/\n    // TODO remove \"and alert condition\" for recording rules\n    _jsxs(RuleEditorSection, {\n      stepNo: 2,\n      title: \"Alert evaluation behavior\",\n      children: [/*#__PURE__*/_jsx(Field, {\n        label: \"Evaluate\",\n        description: \"Evaluation interval applies to every rule within a group. It can overwrite the interval of an existing alert rule.\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.flexRow,\n          children: [/*#__PURE__*/_jsx(InlineLabel, {\n            htmlFor: evaluateEveryId,\n            width: 16,\n            tooltip: \"How often the alert will be evaluated to see if it fires\",\n            children: \"Evaluate every\"\n          }), /*#__PURE__*/_jsx(Input, Object.assign({\n            id: evaluateEveryId,\n            width: 8\n          }, register('evaluateEvery', evaluateEveryValidationOptions))), /*#__PURE__*/_jsx(InlineLabel, {\n            htmlFor: evaluateForId,\n            width: 7,\n            tooltip: \"Once condition is breached, alert will go into pending state. If it is pending for longer than the \\\"for\\\" value, it will become a firing alert.\",\n            children: \"for\"\n          }), /*#__PURE__*/_jsx(Field, {\n            className: styles.inlineField,\n            error: (_errors$evaluateFor = errors.evaluateFor) === null || _errors$evaluateFor === void 0 ? void 0 : _errors$evaluateFor.message,\n            invalid: !!((_errors$evaluateFor2 = errors.evaluateFor) !== null && _errors$evaluateFor2 !== void 0 && _errors$evaluateFor2.message),\n            validationMessageHorizontalOverflow: true,\n            children: /*#__PURE__*/_jsx(Input, Object.assign({\n              id: evaluateForId,\n              width: 8\n            }, register('evaluateFor', forValidationOptions)))\n          })]\n        })\n      }), _GrafanaConditionEval || (_GrafanaConditionEval = /*#__PURE__*/_jsx(GrafanaConditionEvalWarning, {})), /*#__PURE__*/_jsx(CollapseToggle, {\n        isCollapsed: !showErrorHandling,\n        onToggle: collapsed => setShowErrorHandling(!collapsed),\n        text: \"Configure no data and error handling\",\n        className: styles.collapseToggle\n      }), showErrorHandling && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(Field, {\n          htmlFor: \"no-data-state-input\",\n          label: \"Alert state if no data or all values are null\",\n          children: /*#__PURE__*/_jsx(InputControl, {\n            render: _ref => {\n              let {\n                field: {\n                  onChange\n                }\n              } = _ref,\n                  field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n              return /*#__PURE__*/_jsx(GrafanaAlertStatePicker, Object.assign({}, field, {\n                inputId: \"no-data-state-input\",\n                width: 42,\n                includeNoData: true,\n                includeError: false,\n                onChange: value => onChange(value === null || value === void 0 ? void 0 : value.value)\n              }));\n            },\n            name: \"noDataState\"\n          })\n        }), /*#__PURE__*/_jsx(Field, {\n          htmlFor: \"exec-err-state-input\",\n          label: \"Alert state if execution error or timeout\",\n          children: /*#__PURE__*/_jsx(InputControl, {\n            render: _ref2 => {\n              let {\n                field: {\n                  onChange\n                }\n              } = _ref2,\n                  field = _objectWithoutPropertiesLoose(_ref2.field, _excluded2);\n\n              return /*#__PURE__*/_jsx(GrafanaAlertStatePicker, Object.assign({}, field, {\n                inputId: \"exec-err-state-input\",\n                width: 42,\n                includeNoData: false,\n                includeError: true,\n                onChange: value => onChange(value === null || value === void 0 ? void 0 : value.value)\n              }));\n            },\n            name: \"execErrState\"\n          })\n        })]\n      }), _PreviewRule || (_PreviewRule = /*#__PURE__*/_jsx(PreviewRule, {}))]\n    })\n  );\n};\n\nconst getStyles = theme => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  collapseToggle: css`\n    margin: ${theme.spacing(2, 0, 2, -1)};\n  `\n});","map":{"version":3,"names":["css","React","useState","useFormContext","parseDuration","durationToMilliseconds","Field","InlineLabel","Input","InputControl","useStyles2","positiveDurationValidationPattern","durationValidationPattern","CollapseToggle","GrafanaAlertStatePicker","GrafanaConditionEvalWarning","PreviewRule","RuleEditorSection","MIN_TIME_RANGE_STEP_S","forValidationOptions","required","value","message","pattern","evaluateEveryValidationOptions","validate","duration","Object","keys","length","diff","GrafanaEvaluationBehavior","styles","getStyles","showErrorHandling","setShowErrorHandling","register","formState","errors","evaluateEveryId","evaluateForId","flexRow","inlineField","evaluateFor","collapsed","collapseToggle","field","onChange","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/GrafanaEvaluationBehavior.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\nimport { useFormContext, RegisterOptions } from 'react-hook-form';\n\nimport { parseDuration, durationToMilliseconds, GrafanaTheme2 } from '@grafana/data';\nimport { Field, InlineLabel, Input, InputControl, useStyles2 } from '@grafana/ui';\n\nimport { RuleFormValues } from '../../types/rule-form';\nimport { positiveDurationValidationPattern, durationValidationPattern } from '../../utils/time';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { GrafanaConditionEvalWarning } from './GrafanaConditionEvalWarning';\nimport { PreviewRule } from './PreviewRule';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nconst MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\n\nconst forValidationOptions: RegisterOptions = {\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  pattern: durationValidationPattern,\n};\n\nconst evaluateEveryValidationOptions: RegisterOptions = {\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  pattern: positiveDurationValidationPattern,\n  validate: (value: string) => {\n    const duration = parseDuration(value);\n    if (Object.keys(duration).length) {\n      const diff = durationToMilliseconds(duration);\n      if (diff < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n      if (diff % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n    }\n    return true;\n  },\n};\n\nexport const GrafanaEvaluationBehavior: FC = () => {\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const evaluateEveryId = 'eval-every-input';\n  const evaluateForId = 'eval-for-input';\n\n  return (\n    // TODO remove \"and alert condition\" for recording rules\n    <RuleEditorSection stepNo={2} title=\"Alert evaluation behavior\">\n      <Field\n        label=\"Evaluate\"\n        description=\"Evaluation interval applies to every rule within a group. It can overwrite the interval of an existing alert rule.\"\n      >\n        <div className={styles.flexRow}>\n          <InlineLabel\n            htmlFor={evaluateEveryId}\n            width={16}\n            tooltip=\"How often the alert will be evaluated to see if it fires\"\n          >\n            Evaluate every\n          </InlineLabel>\n          <Input id={evaluateEveryId} width={8} {...register('evaluateEvery', evaluateEveryValidationOptions)} />\n          <InlineLabel\n            htmlFor={evaluateForId}\n            width={7}\n            tooltip='Once condition is breached, alert will go into pending state. If it is pending for longer than the \"for\" value, it will become a firing alert.'\n          >\n            for\n          </InlineLabel>\n          <Field\n            className={styles.inlineField}\n            error={errors.evaluateFor?.message}\n            invalid={!!errors.evaluateFor?.message}\n            validationMessageHorizontalOverflow={true}\n          >\n            <Input id={evaluateForId} width={8} {...register('evaluateFor', forValidationOptions)} />\n          </Field>\n        </div>\n      </Field>\n      <GrafanaConditionEvalWarning />\n      <CollapseToggle\n        isCollapsed={!showErrorHandling}\n        onToggle={(collapsed) => setShowErrorHandling(!collapsed)}\n        text=\"Configure no data and error handling\"\n        className={styles.collapseToggle}\n      />\n      {showErrorHandling && (\n        <>\n          <Field htmlFor=\"no-data-state-input\" label=\"Alert state if no data or all values are null\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"no-data-state-input\"\n                  width={42}\n                  includeNoData={true}\n                  includeError={false}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"noDataState\"\n            />\n          </Field>\n          <Field htmlFor=\"exec-err-state-input\" label=\"Alert state if execution error or timeout\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"exec-err-state-input\"\n                  width={42}\n                  includeNoData={false}\n                  includeError={true}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"execErrState\"\n            />\n          </Field>\n        </>\n      )}\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  collapseToggle: css`\n    margin: ${theme.spacing(2, 0, 2, -1)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}