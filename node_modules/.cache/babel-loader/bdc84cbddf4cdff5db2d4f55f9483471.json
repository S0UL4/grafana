{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { arrayUtils, formattedValueToString, getFieldDisplayName } from '@grafana/data';\nimport { SortOrder } from '@grafana/schema';\nimport { LinkButton, useStyles2, VerticalGroup } from '@grafana/ui';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const DataHoverView = ({\n  data,\n  rowIndex,\n  columnIndex,\n  sortOrder\n}) => {\n  const styles = useStyles2(getStyles);\n\n  if (!data || rowIndex == null) {\n    return null;\n  }\n\n  const visibleFields = data.fields.filter(f => {\n    var _f$config$custom, _f$config$custom$hide;\n\n    return !Boolean((_f$config$custom = f.config.custom) === null || _f$config$custom === void 0 ? void 0 : (_f$config$custom$hide = _f$config$custom.hideFrom) === null || _f$config$custom$hide === void 0 ? void 0 : _f$config$custom$hide.tooltip);\n  });\n\n  if (visibleFields.length === 0) {\n    return null;\n  }\n\n  const displayValues = [];\n  const links = [];\n  const linkLookup = new Set();\n\n  for (const f of visibleFields) {\n    const v = f.values.get(rowIndex);\n    const disp = f.display ? f.display(v) : {\n      text: `${v}`,\n      numeric: +v\n    };\n\n    if (f.getLinks) {\n      f.getLinks({\n        calculatedValue: disp,\n        valueRowIndex: rowIndex\n      }).forEach(link => {\n        const key = `${link.title}/${link.href}`;\n\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n\n    displayValues.push([getFieldDisplayName(f, data), v, formattedValueToString(disp)]);\n  }\n\n  if (sortOrder && sortOrder !== SortOrder.None) {\n    displayValues.sort((a, b) => arrayUtils.sortValues(sortOrder)(a[1], b[1]));\n  }\n\n  return /*#__PURE__*/_jsx(\"table\", {\n    className: styles.infoWrap,\n    children: /*#__PURE__*/_jsxs(\"tbody\", {\n      children: [displayValues.map((v, i) => /*#__PURE__*/_jsxs(\"tr\", {\n        className: i === columnIndex ? styles.highlight : '',\n        children: [/*#__PURE__*/_jsxs(\"th\", {\n          children: [v[0], \":\"]\n        }), /*#__PURE__*/_jsx(\"td\", {\n          children: v[2]\n        })]\n      }, `${i}/${rowIndex}`)), links.length > 0 && /*#__PURE__*/_jsx(\"tr\", {\n        children: /*#__PURE__*/_jsx(\"td\", {\n          colSpan: 2,\n          children: /*#__PURE__*/_jsx(VerticalGroup, {\n            children: links.map((link, i) => /*#__PURE__*/_jsx(LinkButton, {\n              icon: 'external-link-alt',\n              target: link.target,\n              href: link.href,\n              onClick: link.onClick,\n              fill: \"text\",\n              style: {\n                width: '100%'\n              },\n              children: link.title\n            }, i))\n          })\n        })\n      })]\n    })\n  });\n};\n\nconst getStyles = theme => ({\n  infoWrap: css`\n    padding: 8px;\n    th {\n      font-weight: ${theme.typography.fontWeightMedium};\n      padding: ${theme.spacing(0.25, 2)};\n    }\n  `,\n  highlight: css`\n    background: ${theme.colors.action.hover};\n  `\n});","map":{"version":3,"names":["css","React","arrayUtils","formattedValueToString","getFieldDisplayName","SortOrder","LinkButton","useStyles2","VerticalGroup","DataHoverView","data","rowIndex","columnIndex","sortOrder","styles","getStyles","visibleFields","fields","filter","f","Boolean","config","custom","hideFrom","tooltip","length","displayValues","links","linkLookup","Set","v","values","get","disp","display","text","numeric","getLinks","calculatedValue","valueRowIndex","forEach","link","key","title","href","has","push","add","None","sort","a","b","sortValues","infoWrap","map","i","highlight","target","onClick","width","theme","typography","fontWeightMedium","spacing","colors","action","hover"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/components/DataHoverView.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  arrayUtils,\n  DataFrame,\n  Field,\n  formattedValueToString,\n  getFieldDisplayName,\n  GrafanaTheme2,\n  LinkModel,\n} from '@grafana/data';\nimport { SortOrder } from '@grafana/schema';\nimport { LinkButton, useStyles2, VerticalGroup } from '@grafana/ui';\n\nexport interface Props {\n  data?: DataFrame; // source data\n  rowIndex?: number | null; // the hover row\n  columnIndex?: number | null; // the hover column\n  sortOrder?: SortOrder;\n}\n\nexport const DataHoverView = ({ data, rowIndex, columnIndex, sortOrder }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  if (!data || rowIndex == null) {\n    return null;\n  }\n\n  const visibleFields = data.fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n\n  if (visibleFields.length === 0) {\n    return null;\n  }\n\n  const displayValues: Array<[string, any, string]> = [];\n  const links: Array<LinkModel<Field>> = [];\n  const linkLookup = new Set<string>();\n\n  for (const f of visibleFields) {\n    const v = f.values.get(rowIndex);\n    const disp = f.display ? f.display(v) : { text: `${v}`, numeric: +v };\n    if (f.getLinks) {\n      f.getLinks({ calculatedValue: disp, valueRowIndex: rowIndex }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n\n    displayValues.push([getFieldDisplayName(f, data), v, formattedValueToString(disp)]);\n  }\n\n  if (sortOrder && sortOrder !== SortOrder.None) {\n    displayValues.sort((a, b) => arrayUtils.sortValues(sortOrder)(a[1], b[1]));\n  }\n\n  return (\n    <table className={styles.infoWrap}>\n      <tbody>\n        {displayValues.map((v, i) => (\n          <tr key={`${i}/${rowIndex}`} className={i === columnIndex ? styles.highlight : ''}>\n            <th>{v[0]}:</th>\n            <td>{v[2]}</td>\n          </tr>\n        ))}\n        {links.length > 0 && (\n          <tr>\n            <td colSpan={2}>\n              <VerticalGroup>\n                {links.map((link, i) => (\n                  <LinkButton\n                    key={i}\n                    icon={'external-link-alt'}\n                    target={link.target}\n                    href={link.href}\n                    onClick={link.onClick}\n                    fill=\"text\"\n                    style={{ width: '100%' }}\n                  >\n                    {link.title}\n                  </LinkButton>\n                ))}\n              </VerticalGroup>\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoWrap: css`\n    padding: 8px;\n    th {\n      font-weight: ${theme.typography.fontWeightMedium};\n      padding: ${theme.spacing(0.25, 2)};\n    }\n  `,\n  highlight: css`\n    background: ${theme.colors.action.hover};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}