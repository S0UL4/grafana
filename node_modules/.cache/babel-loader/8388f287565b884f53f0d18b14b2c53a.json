{"ast":null,"code":"var _Button, _Button2;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { Alert, Button, HorizontalGroup, LinkButton, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { globalConfigOptions } from '../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { omitEmptyValues } from '../../utils/receiver-form';\nimport { OptionField } from './form/fields/OptionField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultValues = {\n  smtp_require_tls: true\n};\nexport const GlobalConfigForm = ({\n  config,\n  alertManagerSourceName\n}) => {\n  var _config$alertmanager_;\n\n  const dispatch = useDispatch();\n  useCleanup(state => state.unifiedAlerting.saveAMConfig);\n  const {\n    loading,\n    error\n  } = useUnifiedAlertingSelector(state => state.saveAMConfig);\n  const readOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n  const styles = useStyles2(getStyles);\n  const formAPI = useForm({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: JSON.parse(JSON.stringify(Object.assign({}, defaultValues, (_config$alertmanager_ = config.alertmanager_config.global) !== null && _config$alertmanager_ !== void 0 ? _config$alertmanager_ : {})))\n  });\n  const {\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = formAPI;\n\n  const onSubmitCallback = values => {\n    dispatch(updateAlertManagerConfigAction({\n      newConfig: Object.assign({}, config, {\n        alertmanager_config: Object.assign({}, config.alertmanager_config, {\n          global: omitEmptyValues(values)\n        })\n      }),\n      oldConfig: config,\n      alertManagerSourceName,\n      successMessage: 'Global config updated.',\n      redirectPath: makeAMLink('/alerting/notifications', alertManagerSourceName)\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(FormProvider, Object.assign({}, formAPI, {\n    children: /*#__PURE__*/_jsxs(\"form\", {\n      onSubmit: handleSubmit(onSubmitCallback),\n      children: [/*#__PURE__*/_jsx(\"h4\", {\n        className: styles.heading,\n        children: \"Global config\"\n      }), error && /*#__PURE__*/_jsx(Alert, {\n        severity: \"error\",\n        title: \"Error saving receiver\",\n        children: error.message || String(error)\n      }), globalConfigOptions.map(option => /*#__PURE__*/_jsx(OptionField, {\n        readOnly: readOnly,\n        defaultValue: defaultValues[option.propertyName],\n        option: option,\n        error: errors[option.propertyName],\n        pathPrefix: ''\n      }, option.propertyName)), /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n          children: [!readOnly && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [loading && (_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n              disabled: true,\n              icon: \"fa fa-spinner\",\n              variant: \"primary\",\n              children: \"Saving...\"\n            }))), !loading && (_Button2 || (_Button2 = /*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              children: \"Save global config\"\n            })))]\n          }), /*#__PURE__*/_jsx(LinkButton, {\n            disabled: loading,\n            fill: \"outline\",\n            variant: \"secondary\",\n            href: makeAMLink('alerting/notifications', alertManagerSourceName),\n            children: \"Cancel\"\n          })]\n        })\n      })]\n    })\n  }));\n};\n\nconst getStyles = theme => ({\n  heading: css`\n    margin: ${theme.spacing(4, 0)};\n  `\n});","map":{"version":3,"names":["css","React","useForm","FormProvider","useDispatch","Alert","Button","HorizontalGroup","LinkButton","useStyles2","useCleanup","useUnifiedAlertingSelector","updateAlertManagerConfigAction","globalConfigOptions","isVanillaPrometheusAlertManagerDataSource","makeAMLink","omitEmptyValues","OptionField","defaultValues","smtp_require_tls","GlobalConfigForm","config","alertManagerSourceName","dispatch","state","unifiedAlerting","saveAMConfig","loading","error","readOnly","styles","getStyles","formAPI","JSON","parse","stringify","alertmanager_config","global","handleSubmit","formState","errors","onSubmitCallback","values","newConfig","oldConfig","successMessage","redirectPath","heading","message","String","map","option","propertyName","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/GlobalConfigForm.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, HorizontalGroup, LinkButton, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { globalConfigOptions } from '../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { omitEmptyValues } from '../../utils/receiver-form';\n\nimport { OptionField } from './form/fields/OptionField';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n}\n\ntype FormValues = Record<string, unknown>;\n\nconst defaultValues: FormValues = {\n  smtp_require_tls: true,\n} as const;\n\nexport const GlobalConfigForm: FC<Props> = ({ config, alertManagerSourceName }) => {\n  const dispatch = useDispatch();\n  useCleanup((state) => state.unifiedAlerting.saveAMConfig);\n  const { loading, error } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n  const styles = useStyles2(getStyles);\n\n  const formAPI = useForm<FormValues>({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: JSON.parse(\n      JSON.stringify({\n        ...defaultValues,\n        ...(config.alertmanager_config.global ?? {}),\n      })\n    ),\n  });\n\n  const {\n    handleSubmit,\n    formState: { errors },\n  } = formAPI;\n\n  const onSubmitCallback = (values: FormValues) => {\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...config,\n          alertmanager_config: {\n            ...config.alertmanager_config,\n            global: omitEmptyValues(values),\n          },\n        },\n        oldConfig: config,\n        alertManagerSourceName,\n        successMessage: 'Global config updated.',\n        redirectPath: makeAMLink('/alerting/notifications', alertManagerSourceName),\n      })\n    );\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={handleSubmit(onSubmitCallback)}>\n        <h4 className={styles.heading}>Global config</h4>\n        {error && (\n          <Alert severity=\"error\" title=\"Error saving receiver\">\n            {error.message || String(error)}\n          </Alert>\n        )}\n        {globalConfigOptions.map((option) => (\n          <OptionField\n            readOnly={readOnly}\n            defaultValue={defaultValues[option.propertyName]}\n            key={option.propertyName}\n            option={option}\n            error={errors[option.propertyName]}\n            pathPrefix={''}\n          />\n        ))}\n        <div>\n          <HorizontalGroup>\n            {!readOnly && (\n              <>\n                {loading && (\n                  <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n                    Saving...\n                  </Button>\n                )}\n                {!loading && <Button type=\"submit\">Save global config</Button>}\n              </>\n            )}\n            <LinkButton\n              disabled={loading}\n              fill=\"outline\"\n              variant=\"secondary\"\n              href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n            >\n              Cancel\n            </LinkButton>\n          </HorizontalGroup>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css`\n    margin: ${theme.spacing(4, 0)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}