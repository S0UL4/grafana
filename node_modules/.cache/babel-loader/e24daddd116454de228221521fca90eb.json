{"ast":null,"code":"import { locationUtil } from './location';\nimport { serializeStateToUrlParam } from './url';\nexport const DataLinkBuiltInVars = {\n  keepTime: '__url_time_range',\n  timeRangeFrom: '__from',\n  timeRangeTo: '__to',\n  includeVars: '__all_variables',\n  seriesName: '__series.name',\n  fieldName: '__field.name',\n  valueTime: '__value.time',\n  valueNumeric: '__value.numeric',\n  valueText: '__value.text',\n  valueRaw: '__value.raw',\n  // name of the calculation represented by the value\n  valueCalc: '__value.calc'\n}; // We inject these because we cannot import them directly as they reside inside grafana main package.\n\nexport function mapInternalLinkToExplore(options) {\n  var _link$internal, _link$internal2;\n\n  const {\n    onClickFn,\n    replaceVariables,\n    link,\n    scopedVars,\n    range,\n    field,\n    internalLink\n  } = options;\n  const interpolatedQuery = interpolateObject((_link$internal = link.internal) === null || _link$internal === void 0 ? void 0 : _link$internal.query, scopedVars, replaceVariables);\n  const interpolatedPanelsState = interpolateObject((_link$internal2 = link.internal) === null || _link$internal2 === void 0 ? void 0 : _link$internal2.panelsState, scopedVars, replaceVariables);\n  const title = link.title ? link.title : internalLink.datasourceName;\n  return {\n    title: replaceVariables(title, scopedVars),\n    // In this case this is meant to be internal link (opens split view by default) the href will also points\n    // to explore but this way you can open it in new tab.\n    href: generateInternalHref(internalLink.datasourceName, interpolatedQuery, range, interpolatedPanelsState),\n    onClick: onClickFn ? () => {\n      onClickFn({\n        datasourceUid: internalLink.datasourceUid,\n        query: interpolatedQuery,\n        panelsState: interpolatedPanelsState,\n        range\n      });\n    } : undefined,\n    target: '_self',\n    origin: field\n  };\n}\n/**\n * Generates href for internal derived field link.\n */\n\nfunction generateInternalHref(datasourceName, query, range, panelsState) {\n  return locationUtil.assureBaseUrl(`/explore?left=${encodeURIComponent(serializeStateToUrlParam({\n    range: range.raw,\n    datasource: datasourceName,\n    queries: [query],\n    panelsState: panelsState\n  }))}`);\n}\n\nfunction interpolateObject(object, scopedVars, replaceVariables) {\n  let stringifiedQuery = '';\n\n  try {\n    stringifiedQuery = JSON.stringify(object || {});\n  } catch (err) {\n    // should not happen and not much to do about this, possibly something non stringifiable in the query\n    console.error(err);\n  } // Replace any variables inside the query. This may not be the safest as it can also replace keys etc so may not\n  // actually work with every datasource query right now.\n\n\n  stringifiedQuery = replaceVariables(stringifiedQuery, scopedVars);\n  let replacedQuery = {};\n\n  try {\n    replacedQuery = JSON.parse(stringifiedQuery);\n  } catch (err) {\n    // again should not happen and not much to do about this, probably some issue with how we replaced the variables.\n    console.error(stringifiedQuery, err);\n  }\n\n  return replacedQuery;\n}","map":{"version":3,"names":["locationUtil","serializeStateToUrlParam","DataLinkBuiltInVars","keepTime","timeRangeFrom","timeRangeTo","includeVars","seriesName","fieldName","valueTime","valueNumeric","valueText","valueRaw","valueCalc","mapInternalLinkToExplore","options","onClickFn","replaceVariables","link","scopedVars","range","field","internalLink","interpolatedQuery","interpolateObject","internal","query","interpolatedPanelsState","panelsState","title","datasourceName","href","generateInternalHref","onClick","datasourceUid","undefined","target","origin","assureBaseUrl","encodeURIComponent","raw","datasource","queries","object","stringifiedQuery","JSON","stringify","err","console","error","replacedQuery","parse"],"sources":["/home/soula/grafana/packages/grafana-data/src/utils/dataLinks.ts"],"sourcesContent":["import {\n  DataLink,\n  DataQuery,\n  ExplorePanelsState,\n  Field,\n  InternalDataLink,\n  InterpolateFunction,\n  LinkModel,\n  ScopedVars,\n  SplitOpen,\n  TimeRange,\n} from '../types';\n\nimport { locationUtil } from './location';\nimport { serializeStateToUrlParam } from './url';\n\nexport const DataLinkBuiltInVars = {\n  keepTime: '__url_time_range',\n  timeRangeFrom: '__from',\n  timeRangeTo: '__to',\n  includeVars: '__all_variables',\n  seriesName: '__series.name',\n  fieldName: '__field.name',\n  valueTime: '__value.time',\n  valueNumeric: '__value.numeric',\n  valueText: '__value.text',\n  valueRaw: '__value.raw',\n  // name of the calculation represented by the value\n  valueCalc: '__value.calc',\n};\n\n// We inject these because we cannot import them directly as they reside inside grafana main package.\nexport type LinkToExploreOptions = {\n  link: DataLink;\n  scopedVars: ScopedVars;\n  range: TimeRange;\n  field: Field;\n  internalLink: InternalDataLink;\n  onClickFn?: SplitOpen;\n  replaceVariables: InterpolateFunction;\n};\n\nexport function mapInternalLinkToExplore(options: LinkToExploreOptions): LinkModel<Field> {\n  const { onClickFn, replaceVariables, link, scopedVars, range, field, internalLink } = options;\n\n  const interpolatedQuery = interpolateObject(link.internal?.query, scopedVars, replaceVariables);\n  const interpolatedPanelsState = interpolateObject(link.internal?.panelsState, scopedVars, replaceVariables);\n  const title = link.title ? link.title : internalLink.datasourceName;\n\n  return {\n    title: replaceVariables(title, scopedVars),\n    // In this case this is meant to be internal link (opens split view by default) the href will also points\n    // to explore but this way you can open it in new tab.\n    href: generateInternalHref(internalLink.datasourceName, interpolatedQuery, range, interpolatedPanelsState),\n    onClick: onClickFn\n      ? () => {\n          onClickFn({\n            datasourceUid: internalLink.datasourceUid,\n            query: interpolatedQuery,\n            panelsState: interpolatedPanelsState,\n            range,\n          });\n        }\n      : undefined,\n    target: '_self',\n    origin: field,\n  };\n}\n\n/**\n * Generates href for internal derived field link.\n */\nfunction generateInternalHref<T extends DataQuery = any>(\n  datasourceName: string,\n  query: T,\n  range: TimeRange,\n  panelsState?: ExplorePanelsState\n): string {\n  return locationUtil.assureBaseUrl(\n    `/explore?left=${encodeURIComponent(\n      serializeStateToUrlParam({\n        range: range.raw,\n        datasource: datasourceName,\n        queries: [query],\n        panelsState: panelsState,\n      })\n    )}`\n  );\n}\n\nfunction interpolateObject<T extends object>(\n  object: T | undefined,\n  scopedVars: ScopedVars,\n  replaceVariables: InterpolateFunction\n): T {\n  let stringifiedQuery = '';\n  try {\n    stringifiedQuery = JSON.stringify(object || {});\n  } catch (err) {\n    // should not happen and not much to do about this, possibly something non stringifiable in the query\n    console.error(err);\n  }\n\n  // Replace any variables inside the query. This may not be the safest as it can also replace keys etc so may not\n  // actually work with every datasource query right now.\n  stringifiedQuery = replaceVariables(stringifiedQuery, scopedVars);\n\n  let replacedQuery = {} as T;\n  try {\n    replacedQuery = JSON.parse(stringifiedQuery);\n  } catch (err) {\n    // again should not happen and not much to do about this, probably some issue with how we replaced the variables.\n    console.error(stringifiedQuery, err);\n  }\n\n  return replacedQuery;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}