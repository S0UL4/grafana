{"ast":null,"code":"var _a, _a2;\n\nimport React from 'react';\nimport { InlineField } from '@grafana/ui';\nimport { Dimensions } from '..';\nimport { useDimensionKeys, useMetrics, useNamespaces, useRegions } from '../../hooks';\nimport { migrateVariableQuery } from '../../migrations/variableQueryMigrations';\nimport { VariableQueryType } from '../../types';\nimport { MultiFilter } from './MultiFilter';\nimport { VariableQueryField } from './VariableQueryField';\nimport { VariableTextField } from './VariableTextField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst queryTypes = [{\n  value: VariableQueryType.Regions,\n  label: 'Regions'\n}, {\n  value: VariableQueryType.Namespaces,\n  label: 'Namespaces'\n}, {\n  value: VariableQueryType.Metrics,\n  label: 'Metrics'\n}, {\n  value: VariableQueryType.DimensionKeys,\n  label: 'Dimension Keys'\n}, {\n  value: VariableQueryType.DimensionValues,\n  label: 'Dimension Values'\n}, {\n  value: VariableQueryType.EBSVolumeIDs,\n  label: 'EBS Volume IDs'\n}, {\n  value: VariableQueryType.EC2InstanceAttributes,\n  label: 'EC2 Instance Attributes'\n}, {\n  value: VariableQueryType.ResourceArns,\n  label: 'Resource ARNs'\n}, {\n  value: VariableQueryType.Statistics,\n  label: 'Statistics'\n}, {\n  value: VariableQueryType.LogGroups,\n  label: 'Log Groups'\n}];\nexport const VariableQueryEditor = ({\n  query,\n  datasource,\n  onChange\n}) => {\n  var _query$logGroupPrefix;\n\n  const parsedQuery = migrateVariableQuery(query);\n  const {\n    region,\n    namespace,\n    metricName,\n    dimensionKey,\n    dimensionFilters\n  } = parsedQuery;\n  const [regions, regionIsLoading] = useRegions(datasource);\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, region, namespace);\n  const dimensionKeys = useDimensionKeys(datasource, region, namespace, metricName);\n  const keysForDimensionFilter = useDimensionKeys(datasource, region, namespace, metricName, dimensionFilters !== null && dimensionFilters !== void 0 ? dimensionFilters : {});\n\n  const onRegionChange = async region => {\n    const validatedQuery = await sanitizeQuery(Object.assign({}, parsedQuery, {\n      region\n    }));\n    onQueryChange(validatedQuery);\n  };\n\n  const onNamespaceChange = async namespace => {\n    const validatedQuery = await sanitizeQuery(Object.assign({}, parsedQuery, {\n      namespace\n    }));\n    onQueryChange(validatedQuery);\n  };\n\n  const onQueryChange = newQuery => {\n    onChange(Object.assign({}, newQuery, {\n      refId: 'CloudWatchVariableQueryEditor-VariableQuery'\n    }));\n  }; // Reset dimensionValue parameters if namespace or region change\n\n\n  const sanitizeQuery = async query => {\n    let {\n      metricName,\n      dimensionKey,\n      dimensionFilters,\n      namespace,\n      region\n    } = query;\n\n    if (metricName) {\n      await datasource.getMetrics(namespace, region).then(result => {\n        if (!result.find(metric => metric.value === metricName)) {\n          metricName = '';\n        }\n      });\n    }\n\n    if (dimensionKey) {\n      await datasource.getDimensionKeys(namespace, region).then(result => {\n        if (!result.find(key => key.value === dimensionKey)) {\n          dimensionKey = '';\n          dimensionFilters = {};\n        }\n      });\n    }\n\n    return Object.assign({}, query, {\n      metricName,\n      dimensionKey,\n      dimensionFilters\n    });\n  };\n\n  const hasRegionField = [VariableQueryType.Metrics, VariableQueryType.DimensionKeys, VariableQueryType.DimensionValues, VariableQueryType.EBSVolumeIDs, VariableQueryType.EC2InstanceAttributes, VariableQueryType.ResourceArns, VariableQueryType.LogGroups].includes(parsedQuery.queryType);\n  const hasNamespaceField = [VariableQueryType.Metrics, VariableQueryType.DimensionKeys, VariableQueryType.DimensionValues].includes(parsedQuery.queryType);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(VariableQueryField, {\n      value: parsedQuery.queryType,\n      options: queryTypes,\n      onChange: value => onQueryChange(Object.assign({}, parsedQuery, {\n        queryType: value\n      })),\n      label: \"Query type\",\n      inputId: `variable-query-type-${query.refId}`\n    }), hasRegionField && /*#__PURE__*/_jsx(VariableQueryField, {\n      value: region,\n      options: regions,\n      onChange: value => onRegionChange(value),\n      label: \"Region\",\n      isLoading: regionIsLoading,\n      inputId: `variable-query-region-${query.refId}`\n    }), hasNamespaceField && /*#__PURE__*/_jsx(VariableQueryField, {\n      value: namespace,\n      options: namespaces,\n      onChange: value => onNamespaceChange(value),\n      label: \"Namespace\",\n      inputId: `variable-query-namespace-${query.refId}`\n    }), parsedQuery.queryType === VariableQueryType.DimensionValues && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(VariableQueryField, {\n        value: metricName || null,\n        options: metrics,\n        onChange: value => onQueryChange(Object.assign({}, parsedQuery, {\n          metricName: value\n        })),\n        label: \"Metric\",\n        inputId: `variable-query-metric-${query.refId}`\n      }), /*#__PURE__*/_jsx(VariableQueryField, {\n        value: dimensionKey || null,\n        options: dimensionKeys,\n        onChange: value => onQueryChange(Object.assign({}, parsedQuery, {\n          dimensionKey: value\n        })),\n        label: \"Dimension key\",\n        inputId: `variable-query-dimension-key-${query.refId}`\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Dimensions\",\n        labelWidth: 20,\n        tooltip: \"Dimensions to filter the returned values on\",\n        children: /*#__PURE__*/_jsx(Dimensions, {\n          metricStat: Object.assign({}, parsedQuery, {\n            dimensions: parsedQuery.dimensionFilters\n          }),\n          onChange: dimensions => {\n            onChange(Object.assign({}, parsedQuery, {\n              dimensionFilters: dimensions\n            }));\n          },\n          dimensionKeys: keysForDimensionFilter,\n          disableExpressions: true,\n          datasource: datasource\n        })\n      })]\n    }), parsedQuery.queryType === VariableQueryType.EBSVolumeIDs && /*#__PURE__*/_jsx(VariableTextField, {\n      value: query.instanceID,\n      placeholder: \"i-XXXXXXXXXXXXXXXXX\",\n      onBlur: value => onQueryChange(Object.assign({}, parsedQuery, {\n        instanceID: value\n      })),\n      label: \"Instance ID\"\n    }), parsedQuery.queryType === VariableQueryType.EC2InstanceAttributes && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(VariableTextField, {\n        value: parsedQuery.attributeName,\n        onBlur: value => onQueryChange(Object.assign({}, parsedQuery, {\n          attributeName: value\n        })),\n        label: \"Attribute name\",\n        interactive: true,\n        tooltip: /*#__PURE__*/_jsxs(_Fragment, {\n          children: ['Attribute or tag to query on. Tags should be formatted \"Tags.<name>\". ', _a || (_a = /*#__PURE__*/_jsx(\"a\", {\n            href: \"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\",\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: \"See the documentation for more details\"\n          }))]\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Filters\",\n        labelWidth: 20,\n        tooltip: /*#__PURE__*/_jsxs(_Fragment, {\n          children: [_a2 || (_a2 = /*#__PURE__*/_jsx(\"a\", {\n            href: \"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\",\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: \"Pre-defined ec2:DescribeInstances filters/tags\"\n          })), ' and the values to filter on. Tags should be formatted tag:<name>.']\n        }),\n        children: /*#__PURE__*/_jsx(MultiFilter, {\n          filters: parsedQuery.ec2Filters,\n          onChange: filters => {\n            onChange(Object.assign({}, parsedQuery, {\n              ec2Filters: filters\n            }));\n          },\n          keyPlaceholder: \"filter/tag\"\n        })\n      })]\n    }), parsedQuery.queryType === VariableQueryType.ResourceArns && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(VariableTextField, {\n        value: parsedQuery.resourceType,\n        onBlur: value => onQueryChange(Object.assign({}, parsedQuery, {\n          resourceType: value\n        })),\n        label: \"Resource type\"\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Tags\",\n        labelWidth: 20,\n        tooltip: \"Tags to filter the returned values on.\",\n        children: /*#__PURE__*/_jsx(MultiFilter, {\n          filters: parsedQuery.tags,\n          onChange: filters => {\n            onChange(Object.assign({}, parsedQuery, {\n              tags: filters\n            }));\n          },\n          keyPlaceholder: \"tag\"\n        })\n      })]\n    }), parsedQuery.queryType === VariableQueryType.LogGroups && /*#__PURE__*/_jsx(VariableTextField, {\n      value: (_query$logGroupPrefix = query.logGroupPrefix) !== null && _query$logGroupPrefix !== void 0 ? _query$logGroupPrefix : '',\n      onBlur: value => onQueryChange(Object.assign({}, parsedQuery, {\n        logGroupPrefix: value\n      })),\n      label: \"Log group prefix\"\n    })]\n  });\n};","map":{"version":3,"names":["React","InlineField","Dimensions","useDimensionKeys","useMetrics","useNamespaces","useRegions","migrateVariableQuery","VariableQueryType","MultiFilter","VariableQueryField","VariableTextField","queryTypes","value","Regions","label","Namespaces","Metrics","DimensionKeys","DimensionValues","EBSVolumeIDs","EC2InstanceAttributes","ResourceArns","Statistics","LogGroups","VariableQueryEditor","query","datasource","onChange","parsedQuery","region","namespace","metricName","dimensionKey","dimensionFilters","regions","regionIsLoading","namespaces","metrics","dimensionKeys","keysForDimensionFilter","onRegionChange","validatedQuery","sanitizeQuery","onQueryChange","onNamespaceChange","newQuery","refId","getMetrics","then","result","find","metric","getDimensionKeys","key","hasRegionField","includes","queryType","hasNamespaceField","dimensions","instanceID","attributeName","ec2Filters","filters","resourceType","tags","logGroupPrefix"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { InlineField } from '@grafana/ui';\n\nimport { Dimensions } from '..';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces, useRegions } from '../../hooks';\nimport { migrateVariableQuery } from '../../migrations/variableQueryMigrations';\nimport { CloudWatchJsonData, CloudWatchQuery, VariableQuery, VariableQueryType } from '../../types';\n\nimport { MultiFilter } from './MultiFilter';\nimport { VariableQueryField } from './VariableQueryField';\nimport { VariableTextField } from './VariableTextField';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData, VariableQuery>;\n\nconst queryTypes: Array<{ value: string; label: string }> = [\n  { value: VariableQueryType.Regions, label: 'Regions' },\n  { value: VariableQueryType.Namespaces, label: 'Namespaces' },\n  { value: VariableQueryType.Metrics, label: 'Metrics' },\n  { value: VariableQueryType.DimensionKeys, label: 'Dimension Keys' },\n  { value: VariableQueryType.DimensionValues, label: 'Dimension Values' },\n  { value: VariableQueryType.EBSVolumeIDs, label: 'EBS Volume IDs' },\n  { value: VariableQueryType.EC2InstanceAttributes, label: 'EC2 Instance Attributes' },\n  { value: VariableQueryType.ResourceArns, label: 'Resource ARNs' },\n  { value: VariableQueryType.Statistics, label: 'Statistics' },\n  { value: VariableQueryType.LogGroups, label: 'Log Groups' },\n];\n\nexport const VariableQueryEditor = ({ query, datasource, onChange }: Props) => {\n  const parsedQuery = migrateVariableQuery(query);\n\n  const { region, namespace, metricName, dimensionKey, dimensionFilters } = parsedQuery;\n  const [regions, regionIsLoading] = useRegions(datasource);\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, region, namespace);\n  const dimensionKeys = useDimensionKeys(datasource, region, namespace, metricName);\n  const keysForDimensionFilter = useDimensionKeys(datasource, region, namespace, metricName, dimensionFilters ?? {});\n\n  const onRegionChange = async (region: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      region,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onNamespaceChange = async (namespace: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      namespace,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onQueryChange = (newQuery: VariableQuery) => {\n    onChange({\n      ...newQuery,\n      refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    });\n  };\n\n  // Reset dimensionValue parameters if namespace or region change\n  const sanitizeQuery = async (query: VariableQuery) => {\n    let { metricName, dimensionKey, dimensionFilters, namespace, region } = query;\n    if (metricName) {\n      await datasource.getMetrics(namespace, region).then((result: Array<SelectableValue<string>>) => {\n        if (!result.find((metric) => metric.value === metricName)) {\n          metricName = '';\n        }\n      });\n    }\n    if (dimensionKey) {\n      await datasource.getDimensionKeys(namespace, region).then((result: Array<SelectableValue<string>>) => {\n        if (!result.find((key) => key.value === dimensionKey)) {\n          dimensionKey = '';\n          dimensionFilters = {};\n        }\n      });\n    }\n    return { ...query, metricName, dimensionKey, dimensionFilters };\n  };\n\n  const hasRegionField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n    VariableQueryType.EBSVolumeIDs,\n    VariableQueryType.EC2InstanceAttributes,\n    VariableQueryType.ResourceArns,\n    VariableQueryType.LogGroups,\n  ].includes(parsedQuery.queryType);\n  const hasNamespaceField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n  ].includes(parsedQuery.queryType);\n  return (\n    <>\n      <VariableQueryField\n        value={parsedQuery.queryType}\n        options={queryTypes}\n        onChange={(value: VariableQueryType) => onQueryChange({ ...parsedQuery, queryType: value })}\n        label=\"Query type\"\n        inputId={`variable-query-type-${query.refId}`}\n      />\n      {hasRegionField && (\n        <VariableQueryField\n          value={region}\n          options={regions}\n          onChange={(value: string) => onRegionChange(value)}\n          label=\"Region\"\n          isLoading={regionIsLoading}\n          inputId={`variable-query-region-${query.refId}`}\n        />\n      )}\n      {hasNamespaceField && (\n        <VariableQueryField\n          value={namespace}\n          options={namespaces}\n          onChange={(value: string) => onNamespaceChange(value)}\n          label=\"Namespace\"\n          inputId={`variable-query-namespace-${query.refId}`}\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.DimensionValues && (\n        <>\n          <VariableQueryField\n            value={metricName || null}\n            options={metrics}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, metricName: value })}\n            label=\"Metric\"\n            inputId={`variable-query-metric-${query.refId}`}\n          />\n          <VariableQueryField\n            value={dimensionKey || null}\n            options={dimensionKeys}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, dimensionKey: value })}\n            label=\"Dimension key\"\n            inputId={`variable-query-dimension-key-${query.refId}`}\n          />\n          <InlineField label=\"Dimensions\" labelWidth={20} tooltip=\"Dimensions to filter the returned values on\">\n            <Dimensions\n              metricStat={{ ...parsedQuery, dimensions: parsedQuery.dimensionFilters }}\n              onChange={(dimensions) => {\n                onChange({ ...parsedQuery, dimensionFilters: dimensions });\n              }}\n              dimensionKeys={keysForDimensionFilter}\n              disableExpressions={true}\n              datasource={datasource}\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.EBSVolumeIDs && (\n        <VariableTextField\n          value={query.instanceID}\n          placeholder=\"i-XXXXXXXXXXXXXXXXX\"\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, instanceID: value })}\n          label=\"Instance ID\"\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.EC2InstanceAttributes && (\n        <>\n          <VariableTextField\n            value={parsedQuery.attributeName}\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, attributeName: value })}\n            label=\"Attribute name\"\n            interactive={true}\n            tooltip={\n              <>\n                {'Attribute or tag to query on. Tags should be formatted \"Tags.<name>\". '}\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  See the documentation for more details\n                </a>\n              </>\n            }\n          />\n          <InlineField\n            label=\"Filters\"\n            labelWidth={20}\n            tooltip={\n              <>\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Pre-defined ec2:DescribeInstances filters/tags\n                </a>\n                {' and the values to filter on. Tags should be formatted tag:<name>.'}\n              </>\n            }\n          >\n            <MultiFilter\n              filters={parsedQuery.ec2Filters}\n              onChange={(filters) => {\n                onChange({ ...parsedQuery, ec2Filters: filters });\n              }}\n              keyPlaceholder=\"filter/tag\"\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.ResourceArns && (\n        <>\n          <VariableTextField\n            value={parsedQuery.resourceType}\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, resourceType: value })}\n            label=\"Resource type\"\n          />\n          <InlineField label=\"Tags\" labelWidth={20} tooltip=\"Tags to filter the returned values on.\">\n            <MultiFilter\n              filters={parsedQuery.tags}\n              onChange={(filters) => {\n                onChange({ ...parsedQuery, tags: filters });\n              }}\n              keyPlaceholder=\"tag\"\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.LogGroups && (\n        <VariableTextField\n          value={query.logGroupPrefix ?? ''}\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, logGroupPrefix: value })}\n          label=\"Log group prefix\"\n        />\n      )}\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}