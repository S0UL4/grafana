{"ast":null,"code":"import React from 'react';\nimport { Field, Input, usePanelContext } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function StateView(props) {\n  var _context$instanceStat, _context$instanceStat2;\n\n  const context = usePanelContext();\n\n  const onChangeName = e => {\n    context.onInstanceStateChange({\n      name: e.currentTarget.value\n    });\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Field, {\n      label: \"State name\",\n      children: /*#__PURE__*/_jsx(Input, {\n        value: (_context$instanceStat = (_context$instanceStat2 = context.instanceState) === null || _context$instanceStat2 === void 0 ? void 0 : _context$instanceStat2.name) !== null && _context$instanceStat !== void 0 ? _context$instanceStat : '',\n        onChange: onChangeName\n      })\n    })\n  });\n}\nexport function StateViewEditor({\n  value,\n  context,\n  onChange,\n  item\n}) {\n  var _context$instanceStat3;\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [\"Current value: \", (_context$instanceStat3 = context.instanceState) === null || _context$instanceStat3 === void 0 ? void 0 : _context$instanceStat3.name, \" \"]\n  });\n}","map":{"version":3,"names":["React","Field","Input","usePanelContext","StateView","props","context","onChangeName","e","onInstanceStateChange","name","currentTarget","value","instanceState","StateViewEditor","onChange","item"],"sources":["/home/soula/grafana/public/app/plugins/panel/debug/StateView.tsx"],"sourcesContent":["import React, { FormEvent } from 'react';\n\nimport { PanelOptionsEditorProps, PanelProps } from '@grafana/data';\nimport { Field, Input, usePanelContext } from '@grafana/ui';\n\nimport { DebugPanelOptions } from './types';\n\nexport function StateView(props: PanelProps<DebugPanelOptions>) {\n  const context = usePanelContext();\n\n  const onChangeName = (e: FormEvent<HTMLInputElement>) => {\n    context.onInstanceStateChange!({\n      name: e.currentTarget.value,\n    });\n  };\n\n  return (\n    <>\n      <Field label=\"State name\">\n        <Input value={context.instanceState?.name ?? ''} onChange={onChangeName} />\n      </Field>\n    </>\n  );\n}\n\nexport function StateViewEditor({ value, context, onChange, item }: PanelOptionsEditorProps<string>) {\n  return <div>Current value: {context.instanceState?.name} </div>;\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAiC,OAAjC;AAGA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,eAAvB,QAA8C,aAA9C;;;;AAIA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAAyD;EAAA;;EAC9D,MAAMC,OAAO,GAAGH,eAAe,EAA/B;;EAEA,MAAMI,YAAY,GAAIC,CAAD,IAAoC;IACvDF,OAAO,CAACG,qBAAR,CAA+B;MAC7BC,IAAI,EAAEF,CAAC,CAACG,aAAF,CAAgBC;IADO,CAA/B;EAGD,CAJD;;EAMA,oBACE;IAAA,uBACE,KAAC,KAAD;MAAO,KAAK,EAAC,YAAb;MAAA,uBACE,KAAC,KAAD;QAAO,KAAK,qDAAEN,OAAO,CAACO,aAAV,2DAAE,uBAAuBH,IAAzB,yEAAiC,EAA7C;QAAiD,QAAQ,EAAEH;MAA3D;IADF;EADF,EADF;AAOD;AAED,OAAO,SAASO,eAAT,CAAyB;EAAEF,KAAF;EAASN,OAAT;EAAkBS,QAAlB;EAA4BC;AAA5B,CAAzB,EAA8F;EAAA;;EACnG,oBAAO;IAAA,wDAAqBV,OAAO,CAACO,aAA7B,2DAAqB,uBAAuBH,IAA5C;EAAA,EAAP;AACD"},"metadata":{},"sourceType":"module"}