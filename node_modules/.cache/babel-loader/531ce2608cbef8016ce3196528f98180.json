{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\nimport { AlertStateFilter } from './AlertStateFilter';\nimport { GroupBy } from './GroupBy';\nimport { MatcherFilter } from './MatcherFilter';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const AlertGroupFilter = ({\n  groups\n}) => {\n  const [filterKey, setFilterKey] = useState(Math.floor(Math.random() * 100));\n  const [queryParams, setQueryParams] = useQueryParams();\n  const {\n    groupBy = [],\n    queryString,\n    alertState\n  } = getFiltersFromUrlParams(queryParams);\n  const matcherFilterKey = `matcher-${filterKey}`;\n  const alertManagers = useAlertManagersByPermission('instance');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setQueryParams({\n      groupBy: null,\n      queryString: null,\n      alertState: null\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const showClearButton = !!(groupBy.length > 0 || queryString || alertState);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.wrapper,\n    children: [/*#__PURE__*/_jsx(AlertManagerPicker, {\n      current: alertManagerSourceName,\n      onChange: setAlertManagerSourceName,\n      dataSources: alertManagers\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.filterSection,\n      children: [/*#__PURE__*/_jsx(MatcherFilter, {\n        className: styles.filterInput,\n        defaultQueryString: queryString,\n        onFilterChange: value => setQueryParams({\n          queryString: value ? value : null\n        })\n      }, matcherFilterKey), /*#__PURE__*/_jsx(GroupBy, {\n        className: styles.filterInput,\n        groups: groups,\n        groupBy: groupBy,\n        onGroupingChange: keys => setQueryParams({\n          groupBy: keys.length ? keys.join(',') : null\n        })\n      }), /*#__PURE__*/_jsx(AlertStateFilter, {\n        stateFilter: alertState,\n        onStateFilterChange: value => setQueryParams({\n          alertState: value ? value : null\n        })\n      }), showClearButton && /*#__PURE__*/_jsx(Button, {\n        className: styles.clearButton,\n        variant: 'secondary',\n        icon: \"times\",\n        onClick: clearFilters,\n        children: \"Clear filters\"\n      })]\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  wrapper: css`\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterSection: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterInput: css`\n    width: 340px;\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  clearButton: css`\n    margin-left: ${theme.spacing(1)};\n    margin-top: 19px;\n  `\n});","map":{"version":3,"names":["css","React","useState","Button","useStyles2","useQueryParams","useAlertManagerSourceName","useAlertManagersByPermission","getFiltersFromUrlParams","AlertManagerPicker","AlertStateFilter","GroupBy","MatcherFilter","AlertGroupFilter","groups","filterKey","setFilterKey","Math","floor","random","queryParams","setQueryParams","groupBy","queryString","alertState","matcherFilterKey","alertManagers","alertManagerSourceName","setAlertManagerSourceName","styles","getStyles","clearFilters","setTimeout","showClearButton","length","wrapper","filterSection","filterInput","value","keys","join","clearButton","theme","colors","border","medium","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/alert-groups/AlertGroupFilter.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\n\nimport { AlertStateFilter } from './AlertStateFilter';\nimport { GroupBy } from './GroupBy';\nimport { MatcherFilter } from './MatcherFilter';\n\ninterface Props {\n  groups: AlertmanagerGroup[];\n}\n\nexport const AlertGroupFilter = ({ groups }: Props) => {\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { groupBy = [], queryString, alertState } = getFiltersFromUrlParams(queryParams);\n  const matcherFilterKey = `matcher-${filterKey}`;\n\n  const alertManagers = useAlertManagersByPermission('instance');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setQueryParams({\n      groupBy: null,\n      queryString: null,\n      alertState: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const showClearButton = !!(groupBy.length > 0 || queryString || alertState);\n\n  return (\n    <div className={styles.wrapper}>\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      <div className={styles.filterSection}>\n        <MatcherFilter\n          className={styles.filterInput}\n          key={matcherFilterKey}\n          defaultQueryString={queryString}\n          onFilterChange={(value) => setQueryParams({ queryString: value ? value : null })}\n        />\n        <GroupBy\n          className={styles.filterInput}\n          groups={groups}\n          groupBy={groupBy}\n          onGroupingChange={(keys) => setQueryParams({ groupBy: keys.length ? keys.join(',') : null })}\n        />\n        <AlertStateFilter\n          stateFilter={alertState as AlertState}\n          onStateFilterChange={(value) => setQueryParams({ alertState: value ? value : null })}\n        />\n        {showClearButton && (\n          <Button className={styles.clearButton} variant={'secondary'} icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterSection: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterInput: css`\n    width: 340px;\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  clearButton: css`\n    margin-left: ${theme.spacing(1)};\n    margin-top: 19px;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}