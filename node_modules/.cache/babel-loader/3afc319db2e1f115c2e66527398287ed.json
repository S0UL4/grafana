{"ast":null,"code":"const _excluded = [\"statistics\", \"name\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Functions in this file are called from the app/features/dashboard/state/DashboardMigrator.\n// Migrations applied by the DashboardMigrator are performed before the plugin is loaded.\n// DashboardMigrator migrations are tied to a certain minimum version of a dashboard which means they will only be ran once.\nimport { getNextRefIdChar } from 'app/core/utils/query';\nimport { MetricQueryType, MetricEditorMode } from '../types'; // E.g query.statistics = ['Max', 'Min'] will be migrated to two queries - query1.statistic = 'Max' and query2.statistic = 'Min'\n\nexport function migrateMultipleStatsMetricsQuery(query, panelQueries) {\n  const newQueries = [];\n\n  if (query !== null && query !== void 0 && query.statistics && query !== null && query !== void 0 && query.statistics.length) {\n    query.statistic = query.statistics[0];\n\n    for (const stat of query.statistics.splice(1)) {\n      newQueries.push(Object.assign({}, query, {\n        statistic: stat\n      }));\n    }\n  }\n\n  for (const newTarget of newQueries) {\n    newTarget.refId = getNextRefIdChar(panelQueries);\n    delete newTarget.statistics;\n    panelQueries.push(newTarget);\n  }\n\n  delete query.statistics;\n  return newQueries;\n} // Migrates an annotation query that use more than one statistic into multiple queries\n// E.g query.statistics = ['Max', 'Min'] will be migrated to two queries - query1.statistic = 'Max' and query2.statistic = 'Min'\n\nexport function migrateMultipleStatsAnnotationQuery(annotationQuery) {\n  var _annotationQuery$stat;\n\n  const newAnnotations = [];\n\n  if (annotationQuery && 'statistics' in annotationQuery && annotationQuery !== null && annotationQuery !== void 0 && (_annotationQuery$stat = annotationQuery.statistics) !== null && _annotationQuery$stat !== void 0 && _annotationQuery$stat.length) {\n    for (const stat of annotationQuery.statistics.splice(1)) {\n      const {\n        name\n      } = annotationQuery,\n            newAnnotation = _objectWithoutPropertiesLoose(annotationQuery, _excluded);\n\n      newAnnotations.push(Object.assign({}, newAnnotation, {\n        statistic: stat,\n        name: `${name} - ${stat}`\n      }));\n    }\n\n    annotationQuery.statistic = annotationQuery.statistics[0]; // Only change the name of the original if new annotations have been created\n\n    if (newAnnotations.length !== 0) {\n      annotationQuery.name = `${annotationQuery.name} - ${annotationQuery.statistic}`;\n    }\n\n    delete annotationQuery.statistics;\n  }\n\n  return newAnnotations;\n}\nexport function migrateCloudWatchQuery(query) {\n  if (!query.hasOwnProperty('metricQueryType')) {\n    query.metricQueryType = MetricQueryType.Search;\n  }\n\n  if (!query.hasOwnProperty('metricEditorMode')) {\n    if (query.metricQueryType === MetricQueryType.Query) {\n      query.metricEditorMode = MetricEditorMode.Code;\n    } else {\n      query.metricEditorMode = query.expression ? MetricEditorMode.Code : MetricEditorMode.Builder;\n    }\n  }\n}","map":{"version":3,"names":["getNextRefIdChar","MetricQueryType","MetricEditorMode","migrateMultipleStatsMetricsQuery","query","panelQueries","newQueries","statistics","length","statistic","stat","splice","push","newTarget","refId","migrateMultipleStatsAnnotationQuery","annotationQuery","newAnnotations","name","newAnnotation","migrateCloudWatchQuery","hasOwnProperty","metricQueryType","Search","Query","metricEditorMode","Code","expression","Builder"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/migrations/dashboardMigrations.ts"],"sourcesContent":["// Functions in this file are called from the app/features/dashboard/state/DashboardMigrator.\n// Migrations applied by the DashboardMigrator are performed before the plugin is loaded.\n// DashboardMigrator migrations are tied to a certain minimum version of a dashboard which means they will only be ran once.\n\nimport { DataQuery, AnnotationQuery } from '@grafana/data';\nimport { getNextRefIdChar } from 'app/core/utils/query';\n\nimport { CloudWatchMetricsQuery, LegacyAnnotationQuery, MetricQueryType, MetricEditorMode } from '../types';\n\n// E.g query.statistics = ['Max', 'Min'] will be migrated to two queries - query1.statistic = 'Max' and query2.statistic = 'Min'\nexport function migrateMultipleStatsMetricsQuery(\n  query: CloudWatchMetricsQuery,\n  panelQueries: DataQuery[]\n): DataQuery[] {\n  const newQueries = [];\n  if (query?.statistics && query?.statistics.length) {\n    query.statistic = query.statistics[0];\n    for (const stat of query.statistics.splice(1)) {\n      newQueries.push({ ...query, statistic: stat });\n    }\n  }\n  for (const newTarget of newQueries) {\n    newTarget.refId = getNextRefIdChar(panelQueries);\n    delete newTarget.statistics;\n    panelQueries.push(newTarget);\n  }\n  delete query.statistics;\n\n  return newQueries;\n}\n\n// Migrates an annotation query that use more than one statistic into multiple queries\n// E.g query.statistics = ['Max', 'Min'] will be migrated to two queries - query1.statistic = 'Max' and query2.statistic = 'Min'\nexport function migrateMultipleStatsAnnotationQuery(\n  annotationQuery: AnnotationQuery<LegacyAnnotationQuery>\n): Array<AnnotationQuery<DataQuery>> {\n  const newAnnotations: Array<AnnotationQuery<LegacyAnnotationQuery>> = [];\n\n  if (annotationQuery && 'statistics' in annotationQuery && annotationQuery?.statistics?.length) {\n    for (const stat of annotationQuery.statistics.splice(1)) {\n      const { statistics, name, ...newAnnotation } = annotationQuery;\n      newAnnotations.push({ ...newAnnotation, statistic: stat, name: `${name} - ${stat}` });\n    }\n    annotationQuery.statistic = annotationQuery.statistics[0];\n    // Only change the name of the original if new annotations have been created\n    if (newAnnotations.length !== 0) {\n      annotationQuery.name = `${annotationQuery.name} - ${annotationQuery.statistic}`;\n    }\n    delete annotationQuery.statistics;\n  }\n\n  return newAnnotations;\n}\n\nexport function migrateCloudWatchQuery(query: CloudWatchMetricsQuery) {\n  if (!query.hasOwnProperty('metricQueryType')) {\n    query.metricQueryType = MetricQueryType.Search;\n  }\n\n  if (!query.hasOwnProperty('metricEditorMode')) {\n    if (query.metricQueryType === MetricQueryType.Query) {\n      query.metricEditorMode = MetricEditorMode.Code;\n    } else {\n      query.metricEditorMode = query.expression ? MetricEditorMode.Code : MetricEditorMode.Builder;\n    }\n  }\n}\n"],"mappings":";;;;AAAA;AACA;AACA;AAGA,SAASA,gBAAT,QAAiC,sBAAjC;AAEA,SAAwDC,eAAxD,EAAyEC,gBAAzE,QAAiG,UAAjG,C,CAEA;;AACA,OAAO,SAASC,gCAAT,CACLC,KADK,EAELC,YAFK,EAGQ;EACb,MAAMC,UAAU,GAAG,EAAnB;;EACA,IAAIF,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAEG,UAAP,IAAqBH,KAArB,aAAqBA,KAArB,eAAqBA,KAAK,CAAEG,UAAP,CAAkBC,MAA3C,EAAmD;IACjDJ,KAAK,CAACK,SAAN,GAAkBL,KAAK,CAACG,UAAN,CAAiB,CAAjB,CAAlB;;IACA,KAAK,MAAMG,IAAX,IAAmBN,KAAK,CAACG,UAAN,CAAiBI,MAAjB,CAAwB,CAAxB,CAAnB,EAA+C;MAC7CL,UAAU,CAACM,IAAX,mBAAqBR,KAArB;QAA4BK,SAAS,EAAEC;MAAvC;IACD;EACF;;EACD,KAAK,MAAMG,SAAX,IAAwBP,UAAxB,EAAoC;IAClCO,SAAS,CAACC,KAAV,GAAkBd,gBAAgB,CAACK,YAAD,CAAlC;IACA,OAAOQ,SAAS,CAACN,UAAjB;IACAF,YAAY,CAACO,IAAb,CAAkBC,SAAlB;EACD;;EACD,OAAOT,KAAK,CAACG,UAAb;EAEA,OAAOD,UAAP;AACD,C,CAED;AACA;;AACA,OAAO,SAASS,mCAAT,CACLC,eADK,EAE8B;EAAA;;EACnC,MAAMC,cAA6D,GAAG,EAAtE;;EAEA,IAAID,eAAe,IAAI,gBAAgBA,eAAnC,IAAsDA,eAAtD,aAAsDA,eAAtD,wCAAsDA,eAAe,CAAET,UAAvE,kDAAsD,sBAA6BC,MAAvF,EAA+F;IAC7F,KAAK,MAAME,IAAX,IAAmBM,eAAe,CAACT,UAAhB,CAA2BI,MAA3B,CAAkC,CAAlC,CAAnB,EAAyD;MACvD,MAAM;QAAcO;MAAd,IAAyCF,eAA/C;MAAA,MAA6BG,aAA7B,iCAA+CH,eAA/C;;MACAC,cAAc,CAACL,IAAf,mBAAyBO,aAAzB;QAAwCV,SAAS,EAAEC,IAAnD;QAAyDQ,IAAI,EAAG,GAAEA,IAAK,MAAKR,IAAK;MAAjF;IACD;;IACDM,eAAe,CAACP,SAAhB,GAA4BO,eAAe,CAACT,UAAhB,CAA2B,CAA3B,CAA5B,CAL6F,CAM7F;;IACA,IAAIU,cAAc,CAACT,MAAf,KAA0B,CAA9B,EAAiC;MAC/BQ,eAAe,CAACE,IAAhB,GAAwB,GAAEF,eAAe,CAACE,IAAK,MAAKF,eAAe,CAACP,SAAU,EAA9E;IACD;;IACD,OAAOO,eAAe,CAACT,UAAvB;EACD;;EAED,OAAOU,cAAP;AACD;AAED,OAAO,SAASG,sBAAT,CAAgChB,KAAhC,EAA+D;EACpE,IAAI,CAACA,KAAK,CAACiB,cAAN,CAAqB,iBAArB,CAAL,EAA8C;IAC5CjB,KAAK,CAACkB,eAAN,GAAwBrB,eAAe,CAACsB,MAAxC;EACD;;EAED,IAAI,CAACnB,KAAK,CAACiB,cAAN,CAAqB,kBAArB,CAAL,EAA+C;IAC7C,IAAIjB,KAAK,CAACkB,eAAN,KAA0BrB,eAAe,CAACuB,KAA9C,EAAqD;MACnDpB,KAAK,CAACqB,gBAAN,GAAyBvB,gBAAgB,CAACwB,IAA1C;IACD,CAFD,MAEO;MACLtB,KAAK,CAACqB,gBAAN,GAAyBrB,KAAK,CAACuB,UAAN,GAAmBzB,gBAAgB,CAACwB,IAApC,GAA2CxB,gBAAgB,CAAC0B,OAArF;IACD;EACF;AACF"},"metadata":{},"sourceType":"module"}