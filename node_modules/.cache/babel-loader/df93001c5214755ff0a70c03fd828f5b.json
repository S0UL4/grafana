{"ast":null,"code":"/**\n * Describes the basic dashboard information that can be passed as the meta\n * analytics payload.\n *\n * @public\n */\n\n/**\n * Describes the data request information passed as the meta analytics payload.\n *\n * @public\n */\n\n/**\n * The meta analytics events that can be added to the echo service.\n *\n * @public\n */\nexport let MetaAnalyticsEventName;\n/**\n * Describes the payload of a dashboard view event.\n *\n * @public\n */\n\n(function (MetaAnalyticsEventName) {\n  MetaAnalyticsEventName[\"DashboardView\"] = \"dashboard-view\";\n  MetaAnalyticsEventName[\"DataRequest\"] = \"data-request\";\n})(MetaAnalyticsEventName || (MetaAnalyticsEventName = {}));\n\n/**\n * Pageview event typeguard.\n *\n * @public\n */\nexport const isPageviewEvent = event => {\n  return Boolean(event.payload.page);\n};\n/**\n * Interaction event typeguard.\n *\n * @public\n */\n\nexport const isInteractionEvent = event => {\n  return Boolean(event.payload.interactionName);\n};\n/**\n * Experimentview event typeguard.\n *\n * @public\n */\n\nexport const isExperimentViewEvent = event => {\n  return Boolean(event.payload.experimentId);\n};","map":{"version":3,"names":["MetaAnalyticsEventName","isPageviewEvent","event","Boolean","payload","page","isInteractionEvent","interactionName","isExperimentViewEvent","experimentId"],"sources":["/home/soula/grafana/packages/grafana-runtime/src/types/analytics.ts"],"sourcesContent":["import { EchoEvent, EchoEventType } from '../services/EchoSrv';\n\n/**\n * Describes the basic dashboard information that can be passed as the meta\n * analytics payload.\n *\n * @public\n */\nexport interface DashboardInfo {\n  dashboardId: number;\n  dashboardUid: string;\n  dashboardName: string;\n  folderName?: string;\n}\n\n/**\n * Describes the data request information passed as the meta analytics payload.\n *\n * @public\n */\nexport interface DataRequestInfo extends Partial<DashboardInfo> {\n  datasourceName: string;\n  datasourceId: number;\n  datasourceType: string;\n  panelId?: number;\n  panelName?: string;\n  duration: number;\n  error?: string;\n  dataSize?: number;\n}\n\n/**\n * The meta analytics events that can be added to the echo service.\n *\n * @public\n */\nexport enum MetaAnalyticsEventName {\n  DashboardView = 'dashboard-view',\n  DataRequest = 'data-request',\n}\n\n/**\n * Describes the payload of a dashboard view event.\n *\n * @public\n */\nexport interface DashboardViewEventPayload extends DashboardInfo {\n  eventName: MetaAnalyticsEventName.DashboardView;\n}\n\n/**\n * Describes the payload of a data request event.\n *\n * @public\n */\nexport interface DataRequestEventPayload extends DataRequestInfo {\n  eventName: MetaAnalyticsEventName.DataRequest;\n  totalQueries?: number;\n  cachedQueries?: number;\n}\n\n/**\n * Describes the meta analytics payload passed with the {@link MetaAnalyticsEvent}\n *\n * @public\n */\nexport type MetaAnalyticsEventPayload = DashboardViewEventPayload | DataRequestEventPayload;\n\n/**\n * Describes meta analytics event with predefined {@link EchoEventType.EchoEventType} type.\n *\n * @public\n */\nexport interface MetaAnalyticsEvent extends EchoEvent<EchoEventType.MetaAnalytics, MetaAnalyticsEventPayload> {}\n\n/**\n * Describes the payload of a pageview event.\n *\n * @public\n */\nexport interface PageviewEchoEventPayload {\n  page: string;\n}\n\n/**\n * Describes pageview event with predefined {@link EchoEventType.EchoEventType} type.\n *\n * @public\n */\nexport type PageviewEchoEvent = EchoEvent<EchoEventType.Pageview, PageviewEchoEventPayload>;\n\n/**\n * Describes the payload of a user interaction event.\n *\n * @public\n */\nexport interface InteractionEchoEventPayload {\n  interactionName: string;\n  properties?: Record<string, any>;\n}\n\n/**\n * Describes interaction event with predefined {@link EchoEventType.EchoEventType} type.\n *\n * @public\n */\nexport type InteractionEchoEvent = EchoEvent<EchoEventType.Interaction, InteractionEchoEventPayload>;\n\n/**\n * Describes the payload of an experimentview event.\n *\n * @public\n */\nexport interface ExperimentViewEchoEventPayload {\n  experimentId: string;\n  experimentGroup: string;\n  experimentVariant: string;\n}\n\n/**\n * Describes experimentview event with predefined {@link EchoEventType.EchoEventType} type.\n *\n * @public\n */\nexport type ExperimentViewEchoEvent = EchoEvent<EchoEventType.ExperimentView, ExperimentViewEchoEventPayload>;\n\n/**\n * Pageview event typeguard.\n *\n * @public\n */\nexport const isPageviewEvent = (event: EchoEvent): event is PageviewEchoEvent => {\n  return Boolean(event.payload.page);\n};\n\n/**\n * Interaction event typeguard.\n *\n * @public\n */\nexport const isInteractionEvent = (event: EchoEvent): event is InteractionEchoEvent => {\n  return Boolean(event.payload.interactionName);\n};\n\n/**\n * Experimentview event typeguard.\n *\n * @public\n */\nexport const isExperimentViewEvent = (event: EchoEvent): event is ExperimentViewEchoEvent => {\n  return Boolean(event.payload.experimentId);\n};\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA,WAAYA,sBAAZ;AAKA;AACA;AACA;AACA;AACA;;WATYA,sB;EAAAA,sB;EAAAA,sB;GAAAA,sB,KAAAA,sB;;AA0FZ;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIC,KAAD,IAAkD;EAC/E,OAAOC,OAAO,CAACD,KAAK,CAACE,OAAN,CAAcC,IAAf,CAAd;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAIJ,KAAD,IAAqD;EACrF,OAAOC,OAAO,CAACD,KAAK,CAACE,OAAN,CAAcG,eAAf,CAAd;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAAIN,KAAD,IAAwD;EAC3F,OAAOC,OAAO,CAACD,KAAK,CAACE,OAAN,CAAcK,YAAf,CAAd;AACD,CAFM"},"metadata":{},"sourceType":"module"}