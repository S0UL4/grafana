{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { Select, ColorPicker, useStyles2 } from '@grafana/ui';\nimport { useFieldDisplayNames, useSelectOptions } from '../../../../../packages/grafana-ui/src/components/MatchersUI/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst fixedColorOption = {\n  label: 'Fixed color',\n  value: '_____fixed_____'\n};\nexport const ColorDimensionEditor = props => {\n  var _value$fixed2;\n\n  const {\n    value,\n    context,\n    onChange\n  } = props;\n  const defaultColor = 'dark-green';\n  const styles = useStyles2(getStyles);\n  const fieldName = value === null || value === void 0 ? void 0 : value.field;\n  const isFixed = Boolean(!fieldName);\n  const names = useFieldDisplayNames(context.data);\n  const selectOptions = useSelectOptions(names, fieldName, fixedColorOption);\n  const onSelectChange = useCallback(selection => {\n    const field = selection.value;\n\n    if (field && field !== fixedColorOption.value) {\n      onChange(Object.assign({}, value, {\n        field\n      }));\n    } else {\n      var _value$fixed;\n\n      const fixed = (_value$fixed = value === null || value === void 0 ? void 0 : value.fixed) !== null && _value$fixed !== void 0 ? _value$fixed : defaultColor;\n      onChange(Object.assign({}, value, {\n        field: undefined,\n        fixed\n      }));\n    }\n  }, [onChange, value]);\n  const onColorChange = useCallback(c => {\n    onChange({\n      field: undefined,\n      fixed: c !== null && c !== void 0 ? c : defaultColor\n    });\n  }, [onChange]);\n  const selectedOption = isFixed ? fixedColorOption : selectOptions.find(v => v.value === fieldName);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsx(Select, {\n        value: selectedOption,\n        options: selectOptions,\n        onChange: onSelectChange,\n        noOptionsMessage: \"No fields found\"\n      }), isFixed && /*#__PURE__*/_jsx(\"div\", {\n        className: styles.picker,\n        children: /*#__PURE__*/_jsx(ColorPicker, {\n          color: (_value$fixed2 = value === null || value === void 0 ? void 0 : value.fixed) !== null && _value$fixed2 !== void 0 ? _value$fixed2 : defaultColor,\n          onChange: onColorChange,\n          enableNamedColors: true\n        })\n      })]\n    })\n  });\n};\n\nconst getStyles = theme => ({\n  container: css`\n    display: flex;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n  `,\n  picker: css`\n    padding-left: 8px;\n  `\n});","map":{"version":3,"names":["css","React","useCallback","Select","ColorPicker","useStyles2","useFieldDisplayNames","useSelectOptions","fixedColorOption","label","value","ColorDimensionEditor","props","context","onChange","defaultColor","styles","getStyles","fieldName","field","isFixed","Boolean","names","data","selectOptions","onSelectChange","selection","fixed","undefined","onColorChange","c","selectedOption","find","v","container","picker","theme"],"sources":["/home/soula/grafana/public/app/features/dimensions/editors/ColorDimensionEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useCallback } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { Select, ColorPicker, useStyles2 } from '@grafana/ui';\n\nimport {\n  useFieldDisplayNames,\n  useSelectOptions,\n} from '../../../../../packages/grafana-ui/src/components/MatchersUI/utils';\nimport { ColorDimensionConfig } from '../types';\n\nconst fixedColorOption: SelectableValue<string> = {\n  label: 'Fixed color',\n  value: '_____fixed_____',\n};\n\nexport const ColorDimensionEditor: FC<StandardEditorProps<ColorDimensionConfig, any, any>> = (props) => {\n  const { value, context, onChange } = props;\n\n  const defaultColor = 'dark-green';\n\n  const styles = useStyles2(getStyles);\n  const fieldName = value?.field;\n  const isFixed = Boolean(!fieldName);\n  const names = useFieldDisplayNames(context.data);\n  const selectOptions = useSelectOptions(names, fieldName, fixedColorOption);\n\n  const onSelectChange = useCallback(\n    (selection: SelectableValue<string>) => {\n      const field = selection.value;\n      if (field && field !== fixedColorOption.value) {\n        onChange({\n          ...value,\n          field,\n        });\n      } else {\n        const fixed = value?.fixed ?? defaultColor;\n        onChange({\n          ...value,\n          field: undefined,\n          fixed,\n        });\n      }\n    },\n    [onChange, value]\n  );\n\n  const onColorChange = useCallback(\n    (c: string) => {\n      onChange({\n        field: undefined,\n        fixed: c ?? defaultColor,\n      });\n    },\n    [onChange]\n  );\n\n  const selectedOption = isFixed ? fixedColorOption : selectOptions.find((v) => v.value === fieldName);\n  return (\n    <>\n      <div className={styles.container}>\n        <Select\n          value={selectedOption}\n          options={selectOptions}\n          onChange={onSelectChange}\n          noOptionsMessage=\"No fields found\"\n        />\n        {isFixed && (\n          <div className={styles.picker}>\n            <ColorPicker color={value?.fixed ?? defaultColor} onChange={onColorChange} enableNamedColors={true} />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n  `,\n  picker: css`\n    padding-left: 8px;\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAoBC,WAApB,QAAuC,OAAvC;AAGA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,UAA9B,QAAgD,aAAhD;AAEA,SACEC,oBADF,EAEEC,gBAFF,QAGO,oEAHP;;;;AAMA,MAAMC,gBAAyC,GAAG;EAChDC,KAAK,EAAE,aADyC;EAEhDC,KAAK,EAAE;AAFyC,CAAlD;AAKA,OAAO,MAAMC,oBAA6E,GAAIC,KAAD,IAAW;EAAA;;EACtG,MAAM;IAAEF,KAAF;IAASG,OAAT;IAAkBC;EAAlB,IAA+BF,KAArC;EAEA,MAAMG,YAAY,GAAG,YAArB;EAEA,MAAMC,MAAM,GAAGX,UAAU,CAACY,SAAD,CAAzB;EACA,MAAMC,SAAS,GAAGR,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAES,KAAzB;EACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,CAACH,SAAF,CAAvB;EACA,MAAMI,KAAK,GAAGhB,oBAAoB,CAACO,OAAO,CAACU,IAAT,CAAlC;EACA,MAAMC,aAAa,GAAGjB,gBAAgB,CAACe,KAAD,EAAQJ,SAAR,EAAmBV,gBAAnB,CAAtC;EAEA,MAAMiB,cAAc,GAAGvB,WAAW,CAC/BwB,SAAD,IAAwC;IACtC,MAAMP,KAAK,GAAGO,SAAS,CAAChB,KAAxB;;IACA,IAAIS,KAAK,IAAIA,KAAK,KAAKX,gBAAgB,CAACE,KAAxC,EAA+C;MAC7CI,QAAQ,mBACHJ,KADG;QAENS;MAFM,GAAR;IAID,CALD,MAKO;MAAA;;MACL,MAAMQ,KAAK,mBAAGjB,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEiB,KAAV,uDAAmBZ,YAA9B;MACAD,QAAQ,mBACHJ,KADG;QAENS,KAAK,EAAES,SAFD;QAGND;MAHM,GAAR;IAKD;EACF,CAhB+B,EAiBhC,CAACb,QAAD,EAAWJ,KAAX,CAjBgC,CAAlC;EAoBA,MAAMmB,aAAa,GAAG3B,WAAW,CAC9B4B,CAAD,IAAe;IACbhB,QAAQ,CAAC;MACPK,KAAK,EAAES,SADA;MAEPD,KAAK,EAAEG,CAAF,aAAEA,CAAF,cAAEA,CAAF,GAAOf;IAFL,CAAD,CAAR;EAID,CAN8B,EAO/B,CAACD,QAAD,CAP+B,CAAjC;EAUA,MAAMiB,cAAc,GAAGX,OAAO,GAAGZ,gBAAH,GAAsBgB,aAAa,CAACQ,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACvB,KAAF,KAAYQ,SAAtC,CAApD;EACA,oBACE;IAAA,uBACE;MAAK,SAAS,EAAEF,MAAM,CAACkB,SAAvB;MAAA,wBACE,KAAC,MAAD;QACE,KAAK,EAAEH,cADT;QAEE,OAAO,EAAEP,aAFX;QAGE,QAAQ,EAAEC,cAHZ;QAIE,gBAAgB,EAAC;MAJnB,EADF,EAOGL,OAAO,iBACN;QAAK,SAAS,EAAEJ,MAAM,CAACmB,MAAvB;QAAA,uBACE,KAAC,WAAD;UAAa,KAAK,mBAAEzB,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEiB,KAAT,yDAAkBZ,YAApC;UAAkD,QAAQ,EAAEc,aAA5D;UAA2E,iBAAiB,EAAE;QAA9F;MADF,EARJ;IAAA;EADF,EADF;AAiBD,CA3DM;;AA6DP,MAAMZ,SAAS,GAAImB,KAAD,KAA2B;EAC3CF,SAAS,EAAElC,GAAI;AACjB;AACA;AACA;AACA;AACA,GAN6C;EAO3CmC,MAAM,EAAEnC,GAAI;AACd;AACA;AAT6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}