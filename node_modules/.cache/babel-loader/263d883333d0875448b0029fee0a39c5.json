{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { getDataSourceRef } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { QueryGroup } from 'app/features/query/components/QueryGroup';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class PanelEditorQueries extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onRunQueries\", () => {\n      this.props.panel.refresh();\n    });\n\n    _defineProperty(this, \"onOpenQueryInspector\", () => {\n      locationService.partial({\n        inspect: this.props.panel.id,\n        inspectTab: 'query'\n      });\n    });\n\n    _defineProperty(this, \"onOptionsChange\", options => {\n      var _panel$datasource;\n\n      const {\n        panel\n      } = this.props;\n      panel.updateQueries(options);\n\n      if (options.dataSource.uid !== ((_panel$datasource = panel.datasource) === null || _panel$datasource === void 0 ? void 0 : _panel$datasource.uid)) {\n        // trigger queries when changing data source\n        setTimeout(this.onRunQueries, 10);\n      }\n\n      this.forceUpdate();\n    });\n  }\n\n  buildQueryOptions(panel) {\n    var _panel$datasource2, _datasourceSettings$m;\n\n    const dataSource = (_panel$datasource2 = panel.datasource) !== null && _panel$datasource2 !== void 0 ? _panel$datasource2 : {\n      default: true\n    };\n    const datasourceSettings = getDatasourceSrv().getInstanceSettings(dataSource);\n    return {\n      cacheTimeout: datasourceSettings !== null && datasourceSettings !== void 0 && (_datasourceSettings$m = datasourceSettings.meta.queryOptions) !== null && _datasourceSettings$m !== void 0 && _datasourceSettings$m.cacheTimeout ? panel.cacheTimeout : undefined,\n      dataSource: {\n        default: datasourceSettings === null || datasourceSettings === void 0 ? void 0 : datasourceSettings.isDefault,\n        type: datasourceSettings === null || datasourceSettings === void 0 ? void 0 : datasourceSettings.type,\n        uid: datasourceSettings === null || datasourceSettings === void 0 ? void 0 : datasourceSettings.uid\n      },\n      queries: panel.targets,\n      maxDataPoints: panel.maxDataPoints,\n      minInterval: panel.interval,\n      timeRange: {\n        from: panel.timeFrom,\n        shift: panel.timeShift,\n        hide: panel.hideTimeOverride\n      }\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      panel\n    } = this.props; // If the panel model has no datasource property load the default data source property and update the persisted model\n    // Because this part of the panel model is not in redux yet we do a forceUpdate.\n\n    if (!panel.datasource) {\n      const ds = getDatasourceSrv().getInstanceSettings(null);\n      panel.datasource = getDataSourceRef(ds);\n      this.forceUpdate();\n    }\n  }\n\n  render() {\n    const {\n      panel\n    } = this.props; // If no panel data soruce set, wait with render. Will be set to default in componentDidMount\n\n    if (!panel.datasource) {\n      return null;\n    }\n\n    const options = this.buildQueryOptions(panel);\n    return /*#__PURE__*/_jsx(QueryGroup, {\n      options: options,\n      queryRunner: panel.getQueryRunner(),\n      onRunQueries: this.onRunQueries,\n      onOpenQueryInspector: this.onOpenQueryInspector,\n      onOptionsChange: this.onOptionsChange\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","getDataSourceRef","locationService","getDatasourceSrv","QueryGroup","PanelEditorQueries","constructor","props","panel","refresh","partial","inspect","id","inspectTab","options","updateQueries","dataSource","uid","datasource","setTimeout","onRunQueries","forceUpdate","buildQueryOptions","default","datasourceSettings","getInstanceSettings","cacheTimeout","meta","queryOptions","undefined","isDefault","type","queries","targets","maxDataPoints","minInterval","interval","timeRange","from","timeFrom","shift","timeShift","hide","hideTimeOverride","componentDidMount","ds","render","getQueryRunner","onOpenQueryInspector","onOptionsChange"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/PanelEditorQueries.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { DataQuery, getDataSourceRef } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { QueryGroup } from 'app/features/query/components/QueryGroup';\nimport { QueryGroupDataSource, QueryGroupOptions } from 'app/types';\n\nimport { PanelModel } from '../../state';\n\ninterface Props {\n  /** Current panel */\n  panel: PanelModel;\n  /** Added here to make component re-render when queries change from outside */\n  queries: DataQuery[];\n}\n\nexport class PanelEditorQueries extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  buildQueryOptions(panel: PanelModel): QueryGroupOptions {\n    const dataSource: QueryGroupDataSource = panel.datasource ?? {\n      default: true,\n    };\n    const datasourceSettings = getDatasourceSrv().getInstanceSettings(dataSource);\n\n    return {\n      cacheTimeout: datasourceSettings?.meta.queryOptions?.cacheTimeout ? panel.cacheTimeout : undefined,\n      dataSource: {\n        default: datasourceSettings?.isDefault,\n        type: datasourceSettings?.type,\n        uid: datasourceSettings?.uid,\n      },\n      queries: panel.targets,\n      maxDataPoints: panel.maxDataPoints,\n      minInterval: panel.interval,\n      timeRange: {\n        from: panel.timeFrom,\n        shift: panel.timeShift,\n        hide: panel.hideTimeOverride,\n      },\n    };\n  }\n\n  async componentDidMount() {\n    const { panel } = this.props;\n\n    // If the panel model has no datasource property load the default data source property and update the persisted model\n    // Because this part of the panel model is not in redux yet we do a forceUpdate.\n    if (!panel.datasource) {\n      const ds = getDatasourceSrv().getInstanceSettings(null);\n      panel.datasource = getDataSourceRef(ds!);\n      this.forceUpdate();\n    }\n  }\n\n  onRunQueries = () => {\n    this.props.panel.refresh();\n  };\n\n  onOpenQueryInspector = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: 'query',\n    });\n  };\n\n  onOptionsChange = (options: QueryGroupOptions) => {\n    const { panel } = this.props;\n\n    panel.updateQueries(options);\n\n    if (options.dataSource.uid !== panel.datasource?.uid) {\n      // trigger queries when changing data source\n      setTimeout(this.onRunQueries, 10);\n    }\n\n    this.forceUpdate();\n  };\n\n  render() {\n    const { panel } = this.props;\n\n    // If no panel data soruce set, wait with render. Will be set to default in componentDidMount\n    if (!panel.datasource) {\n      return null;\n    }\n\n    const options = this.buildQueryOptions(panel);\n\n    return (\n      <QueryGroup\n        options={options}\n        queryRunner={panel.getQueryRunner()}\n        onRunQueries={this.onRunQueries}\n        onOpenQueryInspector={this.onOpenQueryInspector}\n        onOptionsChange={this.onOptionsChange}\n      />\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}