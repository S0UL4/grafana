{"ast":null,"code":"const _excluded = [\"tooltip\", \"icon\", \"to\", \"target\", \"onClick\", \"className\", \"tooltipPlacement\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const ActionIcon = _ref => {\n  let {\n    tooltip,\n    icon,\n    to,\n    target,\n    onClick,\n    className,\n    tooltipPlacement = 'top'\n  } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n  return /*#__PURE__*/_jsx(Tooltip, {\n    content: tooltip,\n    placement: tooltipPlacement,\n    children: to ? /*#__PURE__*/_jsx(LinkButton, Object.assign({\n      variant: \"secondary\",\n      fill: \"text\",\n      icon: icon,\n      href: to,\n      size: \"sm\",\n      target: target\n    }, rest, {\n      \"aria-label\": ariaLabel\n    })) : /*#__PURE__*/_jsx(Button, Object.assign({\n      className: className,\n      variant: \"secondary\",\n      fill: \"text\",\n      size: \"sm\",\n      icon: icon,\n      type: \"button\",\n      onClick: onClick\n    }, rest, {\n      \"aria-label\": ariaLabel\n    }))\n  });\n};","map":{"version":3,"names":["React","Tooltip","LinkButton","Button","ActionIcon","tooltip","icon","to","target","onClick","className","tooltipPlacement","rest","ariaLabel","undefined"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rules/ActionIcon.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAEA,SAAmBC,OAAnB,EAA4BC,UAA5B,EAAwCC,MAAxC,QAAsD,aAAtD;;AAcA,OAAO,MAAMC,UAAqB,GAAG,QAS/B;EAAA,IATgC;IACpCC,OADoC;IAEpCC,IAFoC;IAGpCC,EAHoC;IAIpCC,MAJoC;IAKpCC,OALoC;IAMpCC,SANoC;IAOpCC,gBAAgB,GAAG;EAPiB,CAShC;EAAA,IADDC,IACC;;EACJ,MAAMC,SAAS,GAAG,OAAOR,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCS,SAA1D;EAEA,oBACE,KAAC,OAAD;IAAS,OAAO,EAAET,OAAlB;IAA2B,SAAS,EAAEM,gBAAtC;IAAA,UACGJ,EAAE,gBACD,KAAC,UAAD;MACE,OAAO,EAAC,WADV;MAEE,IAAI,EAAC,MAFP;MAGE,IAAI,EAAED,IAHR;MAIE,IAAI,EAAEC,EAJR;MAKE,IAAI,EAAC,IALP;MAME,MAAM,EAAEC;IANV,GAOMI,IAPN;MAQE,cAAYC;IARd,GADC,gBAYD,KAAC,MAAD;MACE,SAAS,EAAEH,SADb;MAEE,OAAO,EAAC,WAFV;MAGE,IAAI,EAAC,MAHP;MAIE,IAAI,EAAC,IAJP;MAKE,IAAI,EAAEJ,IALR;MAME,IAAI,EAAC,QANP;MAOE,OAAO,EAAEG;IAPX,GAQMG,IARN;MASE,cAAYC;IATd;EAbJ,EADF;AA4BD,CAxCM"},"metadata":{},"sourceType":"module"}