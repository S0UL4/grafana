{"ast":null,"code":"const _excluded = [\"index\", \"id\", \"state\", \"global\", \"originalQuery\", \"rootStateKey\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cloneDeep } from 'lodash';\nimport { dispatch } from '../../../store/store';\nimport { setOptionAsCurrent } from '../state/actions';\nimport { toKeyedVariableIdentifier } from '../utils';\nimport { TextBoxVariableEditor } from './TextBoxVariableEditor';\nimport { TextBoxVariablePicker } from './TextBoxVariablePicker';\nimport { setTextBoxVariableOptionsFromUrl, updateTextBoxVariableOptions } from './actions';\nimport { initialTextBoxVariableModelState, textBoxVariableReducer } from './reducer';\nexport const createTextBoxVariableAdapter = () => {\n  return {\n    id: 'textbox',\n    description: 'Define a textbox variable, where users can enter any arbitrary string',\n    name: 'Text box',\n    initialState: initialTextBoxVariableModelState,\n    reducer: textBoxVariableReducer,\n    picker: TextBoxVariablePicker,\n    editor: TextBoxVariableEditor,\n    dependsOn: (variable, variableToTest) => {\n      return false;\n    },\n    setValue: async (variable, option, emitChanges = false) => {\n      await dispatch(setOptionAsCurrent(toKeyedVariableIdentifier(variable), option, emitChanges));\n    },\n    setValueFromUrl: async (variable, urlValue) => {\n      await dispatch(setTextBoxVariableOptionsFromUrl(toKeyedVariableIdentifier(variable), urlValue));\n    },\n    updateOptions: async variable => {\n      await dispatch(updateTextBoxVariableOptions(toKeyedVariableIdentifier(variable)));\n    },\n    getSaveModel: (variable, saveCurrentAsDefault) => {\n      const _cloneDeep = cloneDeep(variable),\n            {\n        originalQuery\n      } = _cloneDeep,\n            rest = _objectWithoutPropertiesLoose(_cloneDeep, _excluded);\n\n      if (variable.query !== originalQuery && !saveCurrentAsDefault) {\n        const origQuery = originalQuery !== null && originalQuery !== void 0 ? originalQuery : '';\n        const current = {\n          selected: false,\n          text: origQuery,\n          value: origQuery\n        };\n        return Object.assign({}, rest, {\n          query: origQuery,\n          current,\n          options: [current]\n        });\n      }\n\n      return rest;\n    },\n    getValueForUrl: variable => {\n      return variable.current.value;\n    },\n    beforeAdding: model => {\n      return Object.assign({}, cloneDeep(model), {\n        originalQuery: model.query\n      });\n    }\n  };\n};","map":{"version":3,"names":["cloneDeep","dispatch","setOptionAsCurrent","toKeyedVariableIdentifier","TextBoxVariableEditor","TextBoxVariablePicker","setTextBoxVariableOptionsFromUrl","updateTextBoxVariableOptions","initialTextBoxVariableModelState","textBoxVariableReducer","createTextBoxVariableAdapter","id","description","name","initialState","reducer","picker","editor","dependsOn","variable","variableToTest","setValue","option","emitChanges","setValueFromUrl","urlValue","updateOptions","getSaveModel","saveCurrentAsDefault","originalQuery","rest","query","origQuery","current","selected","text","value","options","getValueForUrl","beforeAdding","model"],"sources":["/home/soula/grafana/public/app/features/variables/textbox/adapter.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\n\nimport { dispatch } from '../../../store/store';\nimport { VariableAdapter } from '../adapters';\nimport { setOptionAsCurrent } from '../state/actions';\nimport { TextBoxVariableModel } from '../types';\nimport { toKeyedVariableIdentifier } from '../utils';\n\nimport { TextBoxVariableEditor } from './TextBoxVariableEditor';\nimport { TextBoxVariablePicker } from './TextBoxVariablePicker';\nimport { setTextBoxVariableOptionsFromUrl, updateTextBoxVariableOptions } from './actions';\nimport { initialTextBoxVariableModelState, textBoxVariableReducer } from './reducer';\n\nexport const createTextBoxVariableAdapter = (): VariableAdapter<TextBoxVariableModel> => {\n  return {\n    id: 'textbox',\n    description: 'Define a textbox variable, where users can enter any arbitrary string',\n    name: 'Text box',\n    initialState: initialTextBoxVariableModelState,\n    reducer: textBoxVariableReducer,\n    picker: TextBoxVariablePicker,\n    editor: TextBoxVariableEditor,\n    dependsOn: (variable, variableToTest) => {\n      return false;\n    },\n    setValue: async (variable, option, emitChanges = false) => {\n      await dispatch(setOptionAsCurrent(toKeyedVariableIdentifier(variable), option, emitChanges));\n    },\n    setValueFromUrl: async (variable, urlValue) => {\n      await dispatch(setTextBoxVariableOptionsFromUrl(toKeyedVariableIdentifier(variable), urlValue));\n    },\n    updateOptions: async (variable) => {\n      await dispatch(updateTextBoxVariableOptions(toKeyedVariableIdentifier(variable)));\n    },\n    getSaveModel: (variable, saveCurrentAsDefault) => {\n      const { index, id, state, global, originalQuery, rootStateKey, ...rest } = cloneDeep(variable);\n\n      if (variable.query !== originalQuery && !saveCurrentAsDefault) {\n        const origQuery = originalQuery ?? '';\n        const current = { selected: false, text: origQuery, value: origQuery };\n        return { ...rest, query: origQuery, current, options: [current] };\n      }\n\n      return rest;\n    },\n    getValueForUrl: (variable) => {\n      return variable.current.value;\n    },\n    beforeAdding: (model) => {\n      return { ...cloneDeep(model), originalQuery: model.query };\n    },\n  };\n};\n"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,SAASC,kBAAT,QAAmC,kBAAnC;AAEA,SAASC,yBAAT,QAA0C,UAA1C;AAEA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,gCAAT,EAA2CC,4BAA3C,QAA+E,WAA/E;AACA,SAASC,gCAAT,EAA2CC,sBAA3C,QAAyE,WAAzE;AAEA,OAAO,MAAMC,4BAA4B,GAAG,MAA6C;EACvF,OAAO;IACLC,EAAE,EAAE,SADC;IAELC,WAAW,EAAE,uEAFR;IAGLC,IAAI,EAAE,UAHD;IAILC,YAAY,EAAEN,gCAJT;IAKLO,OAAO,EAAEN,sBALJ;IAMLO,MAAM,EAAEX,qBANH;IAOLY,MAAM,EAAEb,qBAPH;IAQLc,SAAS,EAAE,CAACC,QAAD,EAAWC,cAAX,KAA8B;MACvC,OAAO,KAAP;IACD,CAVI;IAWLC,QAAQ,EAAE,OAAOF,QAAP,EAAiBG,MAAjB,EAAyBC,WAAW,GAAG,KAAvC,KAAiD;MACzD,MAAMtB,QAAQ,CAACC,kBAAkB,CAACC,yBAAyB,CAACgB,QAAD,CAA1B,EAAsCG,MAAtC,EAA8CC,WAA9C,CAAnB,CAAd;IACD,CAbI;IAcLC,eAAe,EAAE,OAAOL,QAAP,EAAiBM,QAAjB,KAA8B;MAC7C,MAAMxB,QAAQ,CAACK,gCAAgC,CAACH,yBAAyB,CAACgB,QAAD,CAA1B,EAAsCM,QAAtC,CAAjC,CAAd;IACD,CAhBI;IAiBLC,aAAa,EAAE,MAAOP,QAAP,IAAoB;MACjC,MAAMlB,QAAQ,CAACM,4BAA4B,CAACJ,yBAAyB,CAACgB,QAAD,CAA1B,CAA7B,CAAd;IACD,CAnBI;IAoBLQ,YAAY,EAAE,CAACR,QAAD,EAAWS,oBAAX,KAAoC;MAChD,mBAA2E5B,SAAS,CAACmB,QAAD,CAApF;MAAA,MAAM;QAA4BU;MAA5B,CAAN;MAAA,MAAkEC,IAAlE;;MAEA,IAAIX,QAAQ,CAACY,KAAT,KAAmBF,aAAnB,IAAoC,CAACD,oBAAzC,EAA+D;QAC7D,MAAMI,SAAS,GAAGH,aAAH,aAAGA,aAAH,cAAGA,aAAH,GAAoB,EAAnC;QACA,MAAMI,OAAO,GAAG;UAAEC,QAAQ,EAAE,KAAZ;UAAmBC,IAAI,EAAEH,SAAzB;UAAoCI,KAAK,EAAEJ;QAA3C,CAAhB;QACA,yBAAYF,IAAZ;UAAkBC,KAAK,EAAEC,SAAzB;UAAoCC,OAApC;UAA6CI,OAAO,EAAE,CAACJ,OAAD;QAAtD;MACD;;MAED,OAAOH,IAAP;IACD,CA9BI;IA+BLQ,cAAc,EAAGnB,QAAD,IAAc;MAC5B,OAAOA,QAAQ,CAACc,OAAT,CAAiBG,KAAxB;IACD,CAjCI;IAkCLG,YAAY,EAAGC,KAAD,IAAW;MACvB,yBAAYxC,SAAS,CAACwC,KAAD,CAArB;QAA8BX,aAAa,EAAEW,KAAK,CAACT;MAAnD;IACD;EApCI,CAAP;AAsCD,CAvCM"},"metadata":{},"sourceType":"module"}