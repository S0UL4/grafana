{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { Field, FilterInput, Select, useStyles2 } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { MediaType, ResourceFolderName } from '../types';\nimport { ResourceCards } from './ResourceCards';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst getFolders = mediaType => {\n  if (mediaType === MediaType.Icon) {\n    return [ResourceFolderName.Icon, ResourceFolderName.IOT, ResourceFolderName.Marker];\n  } else {\n    return [ResourceFolderName.BG];\n  }\n};\n\nconst getFolderIfExists = (folders, path) => {\n  var _folders$find;\n\n  return (_folders$find = folders.find(folder => path.startsWith(folder.value))) !== null && _folders$find !== void 0 ? _folders$find : folders[0];\n};\n\nexport const FolderPickerTab = props => {\n  const {\n    value,\n    mediaType,\n    folderName,\n    newValue,\n    setNewValue\n  } = props;\n  const styles = useStyles2(getStyles);\n  const folders = getFolders(mediaType).map(v => ({\n    label: v,\n    value: v\n  }));\n  const [searchQuery, setSearchQuery] = useState();\n  const [currentFolder, setCurrentFolder] = useState(getFolderIfExists(folders, value !== null && value !== void 0 && value.length ? value : folderName));\n  const [directoryIndex, setDirectoryIndex] = useState([]);\n  const [filteredIndex, setFilteredIndex] = useState([]);\n\n  const onChangeSearch = query => {\n    if (query) {\n      query = query.toLowerCase();\n      setFilteredIndex(directoryIndex.filter(card => card.search.includes(query)));\n    } else {\n      setFilteredIndex(directoryIndex);\n    }\n  };\n\n  useEffect(() => {\n    // we don't want to load everything before picking a folder\n    const folder = currentFolder === null || currentFolder === void 0 ? void 0 : currentFolder.value;\n\n    if (folder) {\n      const filter = mediaType === MediaType.Icon ? item => item.name.endsWith('.svg') : item => item.name.endsWith('.png') || item.name.endsWith('.gif');\n      getDatasourceSrv().get('-- Grafana --').then(ds => {\n        ds.listFiles(folder).subscribe({\n          next: frame => {\n            const cards = [];\n            frame.forEach(item => {\n              if (filter(item)) {\n                const idx = item.name.lastIndexOf('.');\n                cards.push({\n                  value: `${folder}/${item.name}`,\n                  label: item.name,\n                  search: (idx ? item.name.substring(0, idx) : item.name).toLowerCase(),\n                  imgUrl: `public/${folder}/${item.name}`\n                });\n              }\n            });\n            setDirectoryIndex(cards);\n            setFilteredIndex(cards);\n          }\n        });\n      });\n    }\n  }, [mediaType, currentFolder]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Field, {\n      children: /*#__PURE__*/_jsx(Select, {\n        options: folders,\n        onChange: setCurrentFolder,\n        value: currentFolder\n      })\n    }), /*#__PURE__*/_jsx(Field, {\n      children: /*#__PURE__*/_jsx(FilterInput, {\n        value: searchQuery !== null && searchQuery !== void 0 ? searchQuery : '',\n        placeholder: \"Search\",\n        onChange: v => {\n          onChangeSearch(v);\n          setSearchQuery(v);\n        }\n      })\n    }), filteredIndex && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.cardsWrapper,\n      children: /*#__PURE__*/_jsx(ResourceCards, {\n        cards: filteredIndex,\n        onChange: v => setNewValue(v),\n        value: newValue\n      })\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  cardsWrapper: css`\n    height: 30vh;\n    min-height: 50px;\n    margin-top: 5px;\n    max-width: 680px;\n  `\n});","map":{"version":3,"names":["css","React","useEffect","useState","Field","FilterInput","Select","useStyles2","getDatasourceSrv","MediaType","ResourceFolderName","ResourceCards","getFolders","mediaType","Icon","IOT","Marker","BG","getFolderIfExists","folders","path","find","folder","startsWith","value","FolderPickerTab","props","folderName","newValue","setNewValue","styles","getStyles","map","v","label","searchQuery","setSearchQuery","currentFolder","setCurrentFolder","length","directoryIndex","setDirectoryIndex","filteredIndex","setFilteredIndex","onChangeSearch","query","toLowerCase","filter","card","search","includes","item","name","endsWith","get","then","ds","listFiles","subscribe","next","frame","cards","forEach","idx","lastIndexOf","push","substring","imgUrl","cardsWrapper","theme"],"sources":["/home/soula/grafana/public/app/features/dimensions/editors/FolderPickerTab.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { Dispatch, SetStateAction, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, FilterInput, Select, useStyles2 } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { FileElement, GrafanaDatasource } from 'app/plugins/datasource/grafana/datasource';\n\nimport { MediaType, ResourceFolderName } from '../types';\n\nimport { ResourceCards } from './ResourceCards';\n\nconst getFolders = (mediaType: MediaType) => {\n  if (mediaType === MediaType.Icon) {\n    return [ResourceFolderName.Icon, ResourceFolderName.IOT, ResourceFolderName.Marker];\n  } else {\n    return [ResourceFolderName.BG];\n  }\n};\n\nconst getFolderIfExists = (folders: Array<SelectableValue<string>>, path: string) => {\n  return folders.find((folder) => path.startsWith(folder.value!)) ?? folders[0];\n};\n\nexport interface ResourceItem {\n  label: string;\n  value: string; // includes folder\n  search: string;\n  imgUrl: string;\n}\n\ninterface Props {\n  value?: string;\n  mediaType: MediaType;\n  folderName: ResourceFolderName;\n  newValue: string;\n  setNewValue: Dispatch<SetStateAction<string>>;\n}\n\nexport const FolderPickerTab = (props: Props) => {\n  const { value, mediaType, folderName, newValue, setNewValue } = props;\n  const styles = useStyles2(getStyles);\n\n  const folders = getFolders(mediaType).map((v) => ({\n    label: v,\n    value: v,\n  }));\n\n  const [searchQuery, setSearchQuery] = useState<string>();\n\n  const [currentFolder, setCurrentFolder] = useState<SelectableValue<string>>(\n    getFolderIfExists(folders, value?.length ? value : folderName)\n  );\n  const [directoryIndex, setDirectoryIndex] = useState<ResourceItem[]>([]);\n  const [filteredIndex, setFilteredIndex] = useState<ResourceItem[]>([]);\n\n  const onChangeSearch = (query: string) => {\n    if (query) {\n      query = query.toLowerCase();\n      setFilteredIndex(directoryIndex.filter((card) => card.search.includes(query)));\n    } else {\n      setFilteredIndex(directoryIndex);\n    }\n  };\n\n  useEffect(() => {\n    // we don't want to load everything before picking a folder\n    const folder = currentFolder?.value;\n    if (folder) {\n      const filter =\n        mediaType === MediaType.Icon\n          ? (item: FileElement) => item.name.endsWith('.svg')\n          : (item: FileElement) => item.name.endsWith('.png') || item.name.endsWith('.gif');\n\n      getDatasourceSrv()\n        .get('-- Grafana --')\n        .then((ds) => {\n          (ds as GrafanaDatasource).listFiles(folder).subscribe({\n            next: (frame) => {\n              const cards: ResourceItem[] = [];\n              frame.forEach((item) => {\n                if (filter(item)) {\n                  const idx = item.name.lastIndexOf('.');\n                  cards.push({\n                    value: `${folder}/${item.name}`,\n                    label: item.name,\n                    search: (idx ? item.name.substring(0, idx) : item.name).toLowerCase(),\n                    imgUrl: `public/${folder}/${item.name}`,\n                  });\n                }\n              });\n              setDirectoryIndex(cards);\n              setFilteredIndex(cards);\n            },\n          });\n        });\n    }\n  }, [mediaType, currentFolder]);\n\n  return (\n    <>\n      <Field>\n        <Select options={folders} onChange={setCurrentFolder} value={currentFolder} />\n      </Field>\n      <Field>\n        <FilterInput\n          value={searchQuery ?? ''}\n          placeholder=\"Search\"\n          onChange={(v) => {\n            onChangeSearch(v);\n            setSearchQuery(v);\n          }}\n        />\n      </Field>\n      {filteredIndex && (\n        <div className={styles.cardsWrapper}>\n          <ResourceCards cards={filteredIndex} onChange={(v) => setNewValue(v)} value={newValue} />\n        </div>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  cardsWrapper: css`\n    height: 30vh;\n    min-height: 50px;\n    margin-top: 5px;\n    max-width: 680px;\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAA0CC,SAA1C,EAAqDC,QAArD,QAAqE,OAArE;AAGA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,MAA7B,EAAqCC,UAArC,QAAuD,aAAvD;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AAGA,SAASC,SAAT,EAAoBC,kBAApB,QAA8C,UAA9C;AAEA,SAASC,aAAT,QAA8B,iBAA9B;;;;;AAEA,MAAMC,UAAU,GAAIC,SAAD,IAA0B;EAC3C,IAAIA,SAAS,KAAKJ,SAAS,CAACK,IAA5B,EAAkC;IAChC,OAAO,CAACJ,kBAAkB,CAACI,IAApB,EAA0BJ,kBAAkB,CAACK,GAA7C,EAAkDL,kBAAkB,CAACM,MAArE,CAAP;EACD,CAFD,MAEO;IACL,OAAO,CAACN,kBAAkB,CAACO,EAApB,CAAP;EACD;AACF,CAND;;AAQA,MAAMC,iBAAiB,GAAG,CAACC,OAAD,EAA0CC,IAA1C,KAA2D;EAAA;;EACnF,wBAAOD,OAAO,CAACE,IAAR,CAAcC,MAAD,IAAYF,IAAI,CAACG,UAAL,CAAgBD,MAAM,CAACE,KAAvB,CAAzB,CAAP,yDAAmEL,OAAO,CAAC,CAAD,CAA1E;AACD,CAFD;;AAmBA,OAAO,MAAMM,eAAe,GAAIC,KAAD,IAAkB;EAC/C,MAAM;IAAEF,KAAF;IAASX,SAAT;IAAoBc,UAApB;IAAgCC,QAAhC;IAA0CC;EAA1C,IAA0DH,KAAhE;EACA,MAAMI,MAAM,GAAGvB,UAAU,CAACwB,SAAD,CAAzB;EAEA,MAAMZ,OAAO,GAAGP,UAAU,CAACC,SAAD,CAAV,CAAsBmB,GAAtB,CAA2BC,CAAD,KAAQ;IAChDC,KAAK,EAAED,CADyC;IAEhDT,KAAK,EAAES;EAFyC,CAAR,CAA1B,CAAhB;EAKA,MAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCjC,QAAQ,EAA9C;EAEA,MAAM,CAACkC,aAAD,EAAgBC,gBAAhB,IAAoCnC,QAAQ,CAChDe,iBAAiB,CAACC,OAAD,EAAUK,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAEe,MAAP,GAAgBf,KAAhB,GAAwBG,UAAlC,CAD+B,CAAlD;EAGA,MAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCtC,QAAQ,CAAiB,EAAjB,CAApD;EACA,MAAM,CAACuC,aAAD,EAAgBC,gBAAhB,IAAoCxC,QAAQ,CAAiB,EAAjB,CAAlD;;EAEA,MAAMyC,cAAc,GAAIC,KAAD,IAAmB;IACxC,IAAIA,KAAJ,EAAW;MACTA,KAAK,GAAGA,KAAK,CAACC,WAAN,EAAR;MACAH,gBAAgB,CAACH,cAAc,CAACO,MAAf,CAAuBC,IAAD,IAAUA,IAAI,CAACC,MAAL,CAAYC,QAAZ,CAAqBL,KAArB,CAAhC,CAAD,CAAhB;IACD,CAHD,MAGO;MACLF,gBAAgB,CAACH,cAAD,CAAhB;IACD;EACF,CAPD;;EASAtC,SAAS,CAAC,MAAM;IACd;IACA,MAAMoB,MAAM,GAAGe,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEb,KAA9B;;IACA,IAAIF,MAAJ,EAAY;MACV,MAAMyB,MAAM,GACVlC,SAAS,KAAKJ,SAAS,CAACK,IAAxB,GACKqC,IAAD,IAAuBA,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmB,MAAnB,CAD3B,GAEKF,IAAD,IAAuBA,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmB,MAAnB,KAA8BF,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmB,MAAnB,CAH3D;MAKA7C,gBAAgB,GACb8C,GADH,CACO,eADP,EAEGC,IAFH,CAESC,EAAD,IAAQ;QACXA,EAAD,CAA0BC,SAA1B,CAAoCnC,MAApC,EAA4CoC,SAA5C,CAAsD;UACpDC,IAAI,EAAGC,KAAD,IAAW;YACf,MAAMC,KAAqB,GAAG,EAA9B;YACAD,KAAK,CAACE,OAAN,CAAeX,IAAD,IAAU;cACtB,IAAIJ,MAAM,CAACI,IAAD,CAAV,EAAkB;gBAChB,MAAMY,GAAG,GAAGZ,IAAI,CAACC,IAAL,CAAUY,WAAV,CAAsB,GAAtB,CAAZ;gBACAH,KAAK,CAACI,IAAN,CAAW;kBACTzC,KAAK,EAAG,GAAEF,MAAO,IAAG6B,IAAI,CAACC,IAAK,EADrB;kBAETlB,KAAK,EAAEiB,IAAI,CAACC,IAFH;kBAGTH,MAAM,EAAE,CAACc,GAAG,GAAGZ,IAAI,CAACC,IAAL,CAAUc,SAAV,CAAoB,CAApB,EAAuBH,GAAvB,CAAH,GAAiCZ,IAAI,CAACC,IAA1C,EAAgDN,WAAhD,EAHC;kBAITqB,MAAM,EAAG,UAAS7C,MAAO,IAAG6B,IAAI,CAACC,IAAK;gBAJ7B,CAAX;cAMD;YACF,CAVD;YAWAX,iBAAiB,CAACoB,KAAD,CAAjB;YACAlB,gBAAgB,CAACkB,KAAD,CAAhB;UACD;QAhBmD,CAAtD;MAkBD,CArBH;IAsBD;EACF,CAhCQ,EAgCN,CAAChD,SAAD,EAAYwB,aAAZ,CAhCM,CAAT;EAkCA,oBACE;IAAA,wBACE,KAAC,KAAD;MAAA,uBACE,KAAC,MAAD;QAAQ,OAAO,EAAElB,OAAjB;QAA0B,QAAQ,EAAEmB,gBAApC;QAAsD,KAAK,EAAED;MAA7D;IADF,EADF,eAIE,KAAC,KAAD;MAAA,uBACE,KAAC,WAAD;QACE,KAAK,EAAEF,WAAF,aAAEA,WAAF,cAAEA,WAAF,GAAiB,EADxB;QAEE,WAAW,EAAC,QAFd;QAGE,QAAQ,EAAGF,CAAD,IAAO;UACfW,cAAc,CAACX,CAAD,CAAd;UACAG,cAAc,CAACH,CAAD,CAAd;QACD;MANH;IADF,EAJF,EAcGS,aAAa,iBACZ;MAAK,SAAS,EAAEZ,MAAM,CAACsC,YAAvB;MAAA,uBACE,KAAC,aAAD;QAAe,KAAK,EAAE1B,aAAtB;QAAqC,QAAQ,EAAGT,CAAD,IAAOJ,WAAW,CAACI,CAAD,CAAjE;QAAsE,KAAK,EAAEL;MAA7E;IADF,EAfJ;EAAA,EADF;AAsBD,CAlFM;;AAoFP,MAAMG,SAAS,GAAIsC,KAAD,KAA2B;EAC3CD,YAAY,EAAEpE,GAAI;AACpB;AACA;AACA;AACA;AACA;AAN6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}