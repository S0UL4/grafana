{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const AlertDetails = ({\n  alert,\n  alertManagerSourceName\n}) => {\n  const styles = useStyles2(getStyles);\n  const instancePermissions = getInstancesPermissions(alertManagerSourceName); // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead) : true;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.actionsRow,\n      children: [/*#__PURE__*/_jsxs(Authorize, {\n        actions: [instancePermissions.update, instancePermissions.create],\n        fallback: contextSrv.isEditor,\n        children: [alert.status.state === AlertState.Suppressed && /*#__PURE__*/_jsx(LinkButton, {\n          href: `${makeAMLink('/alerting/silences', alertManagerSourceName)}&silenceIds=${alert.status.silencedBy.join(',')}`,\n          className: styles.button,\n          icon: 'bell',\n          size: 'sm',\n          children: \"Manage silences\"\n        }), alert.status.state === AlertState.Active && /*#__PURE__*/_jsx(LinkButton, {\n          href: makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels),\n          className: styles.button,\n          icon: 'bell-slash',\n          size: 'sm',\n          children: \"Silence\"\n        })]\n      }), isSeeSourceButtonEnabled && alert.generatorURL && /*#__PURE__*/_jsx(LinkButton, {\n        className: styles.button,\n        href: alert.generatorURL,\n        icon: 'chart-line',\n        size: 'sm',\n        children: \"See source\"\n      })]\n    }), Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => /*#__PURE__*/_jsx(AnnotationDetailsField, {\n      annotationKey: annotationKey,\n      value: annotationValue\n    }, annotationKey)), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.receivers,\n      children: [\"Receivers:\", ' ', alert.receivers.map(({\n        name\n      }) => name).filter(name => !!name).join(', ')]\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `\n});","map":{"version":3,"names":["css","React","LinkButton","useStyles2","contextSrv","AlertState","AccessControlAction","getInstancesPermissions","isGrafanaRulesSource","makeAMLink","makeLabelBasedSilenceLink","AnnotationDetailsField","Authorize","AlertDetails","alert","alertManagerSourceName","styles","getStyles","instancePermissions","isGrafanaSource","isSeeSourceButtonEnabled","hasPermission","AlertingRuleRead","actionsRow","update","create","isEditor","status","state","Suppressed","silencedBy","join","button","Active","labels","generatorURL","Object","entries","annotations","map","annotationKey","annotationValue","receivers","name","filter","theme","spacing","colors","border","medium"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails: FC<AmNotificationsAlertDetailsProps> = ({ alert, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  const instancePermissions = getInstancesPermissions(alertManagerSourceName);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        <Authorize actions={[instancePermissions.update, instancePermissions.create]} fallback={contextSrv.isEditor}>\n          {alert.status.state === AlertState.Suppressed && (\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          )}\n          {alert.status.state === AlertState.Active && (\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          )}\n        </Authorize>\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}