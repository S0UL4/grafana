{"ast":null,"code":"var _h, _Alert;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Alert, InlineField, useStyles2 } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst getStyles = theme => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `\n});\n\nconst xRayDsId = 'grafana-x-ray-datasource';\nexport function XrayLinkConfig({\n  datasourceUid,\n  onChange\n}) {\n  const hasXrayDatasource = Boolean(getDatasourceSrv().getList({\n    pluginId: xRayDsId\n  }).length);\n  const styles = useStyles2(getStyles);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n      className: \"page-heading\",\n      children: \"X-ray trace link\"\n    })), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.infoText,\n      children: \"Grafana will automatically create a link to a trace in X-ray data source if logs contain @xrayTraceId field\"\n    }), !hasXrayDatasource && (_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n      title: 'There is no X-ray datasource to link to. First add an X-ray data source and then link it to Cloud Watch. ',\n      severity: \"info\"\n    }))), /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-group\",\n      children: /*#__PURE__*/_jsx(InlineField, {\n        htmlFor: \"data-source-picker\",\n        label: \"Data source\",\n        labelWidth: 28,\n        tooltip: \"X-ray data source containing traces\",\n        children: /*#__PURE__*/_jsx(DataSourcePicker, {\n          pluginId: xRayDsId,\n          onChange: ds => onChange(ds.uid),\n          current: datasourceUid,\n          noDefault: true\n        })\n      })\n    })]\n  });\n}","map":{"version":3,"names":["css","React","DataSourcePicker","Alert","InlineField","useStyles2","getDatasourceSrv","getStyles","theme","infoText","spacing","colors","text","secondary","xRayDsId","XrayLinkConfig","datasourceUid","onChange","hasXrayDatasource","Boolean","getList","pluginId","length","styles","ds","uid"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/XrayLinkConfig.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Alert, InlineField, useStyles2 } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ninterface Props {\n  datasourceUid?: string;\n  onChange: (uid: string) => void;\n}\n\nconst xRayDsId = 'grafana-x-ray-datasource';\n\nexport function XrayLinkConfig({ datasourceUid, onChange }: Props) {\n  const hasXrayDatasource = Boolean(getDatasourceSrv().getList({ pluginId: xRayDsId }).length);\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">X-ray trace link</h3>\n\n      <div className={styles.infoText}>\n        Grafana will automatically create a link to a trace in X-ray data source if logs contain @xrayTraceId field\n      </div>\n\n      {!hasXrayDatasource && (\n        <Alert\n          title={\n            'There is no X-ray datasource to link to. First add an X-ray data source and then link it to Cloud Watch. '\n          }\n          severity=\"info\"\n        />\n      )}\n\n      <div className=\"gf-form-group\">\n        <InlineField\n          htmlFor=\"data-source-picker\"\n          label=\"Data source\"\n          labelWidth={28}\n          tooltip=\"X-ray data source containing traces\"\n        >\n          <DataSourcePicker\n            pluginId={xRayDsId}\n            onChange={(ds) => onChange(ds.uid)}\n            current={datasourceUid}\n            noDefault={true}\n          />\n        </InlineField>\n      </div>\n    </>\n  );\n}\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,UAA7B,QAA+C,aAA/C;AACA,SAASC,gBAAT,QAAiC,qCAAjC;;;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,KAA2B;EAC3CC,QAAQ,EAAET,GAAI;AAChB,sBAAsBQ,KAAK,CAACE,OAAN,CAAc,CAAd,CAAiB;AACvC,aAAaF,KAAK,CAACG,MAAN,CAAaC,IAAb,CAAkBC,SAAU;AACzC;AAJ6C,CAA3B,CAAlB;;AAYA,MAAMC,QAAQ,GAAG,0BAAjB;AAEA,OAAO,SAASC,cAAT,CAAwB;EAAEC,aAAF;EAAiBC;AAAjB,CAAxB,EAA4D;EACjE,MAAMC,iBAAiB,GAAGC,OAAO,CAACb,gBAAgB,GAAGc,OAAnB,CAA2B;IAAEC,QAAQ,EAAEP;EAAZ,CAA3B,EAAmDQ,MAApD,CAAjC;EAEA,MAAMC,MAAM,GAAGlB,UAAU,CAACE,SAAD,CAAzB;EAEA,oBACE;IAAA,oCACE;MAAI,SAAS,EAAC,cAAd;MAAA;IAAA,EADF,gBAGE;MAAK,SAAS,EAAEgB,MAAM,CAACd,QAAvB;MAAA;IAAA,EAHF,EAOG,CAACS,iBAAD,sCACC,KAAC,KAAD;MACE,KAAK,EACH,2GAFJ;MAIE,QAAQ,EAAC;IAJX,EADD,EAPH,eAgBE;MAAK,SAAS,EAAC,eAAf;MAAA,uBACE,KAAC,WAAD;QACE,OAAO,EAAC,oBADV;QAEE,KAAK,EAAC,aAFR;QAGE,UAAU,EAAE,EAHd;QAIE,OAAO,EAAC,qCAJV;QAAA,uBAME,KAAC,gBAAD;UACE,QAAQ,EAAEJ,QADZ;UAEE,QAAQ,EAAGU,EAAD,IAAQP,QAAQ,CAACO,EAAE,CAACC,GAAJ,CAF5B;UAGE,OAAO,EAAET,aAHX;UAIE,SAAS,EAAE;QAJb;MANF;IADF,EAhBF;EAAA,EADF;AAkCD"},"metadata":{},"sourceType":"module"}