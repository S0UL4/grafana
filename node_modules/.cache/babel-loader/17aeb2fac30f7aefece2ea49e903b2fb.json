{"ast":null,"code":"var _p;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { Alert, LinkButton, useStyles2 } from '@grafana/ui';\nimport { AccessControlAction } from 'app/types';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { Authorize } from '../Authorize';\nimport { ReceiversTable } from './ReceiversTable';\nimport { TemplatesTable } from './TemplatesTable';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const ReceiversAndTemplatesView = ({\n  config,\n  alertManagerName\n}) => {\n  const isCloud = alertManagerName !== GRAFANA_RULES_SOURCE_NAME;\n  const styles = useStyles2(getStyles);\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [!isVanillaAM && /*#__PURE__*/_jsx(TemplatesTable, {\n      config: config,\n      alertManagerName: alertManagerName\n    }), /*#__PURE__*/_jsx(ReceiversTable, {\n      config: config,\n      alertManagerName: alertManagerName\n    }), isCloud && /*#__PURE__*/_jsx(Authorize, {\n      actions: [AccessControlAction.AlertingNotificationsExternalWrite],\n      children: /*#__PURE__*/_jsxs(Alert, {\n        className: styles.section,\n        severity: \"info\",\n        title: \"Global config for contact points\",\n        children: [_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n          children: \"For each external Alertmanager you can define global settings, like server addresses, usernames and password, for all the supported contact points.\"\n        })), /*#__PURE__*/_jsx(LinkButton, {\n          href: makeAMLink('alerting/notifications/global-config', alertManagerName),\n          variant: \"secondary\",\n          children: isVanillaAM ? 'View global config' : 'Edit global config'\n        })]\n      })\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  section: css`\n    margin-top: ${theme.spacing(4)};\n  `\n});","map":{"version":3,"names":["css","React","Alert","LinkButton","useStyles2","AccessControlAction","GRAFANA_RULES_SOURCE_NAME","isVanillaPrometheusAlertManagerDataSource","makeAMLink","Authorize","ReceiversTable","TemplatesTable","ReceiversAndTemplatesView","config","alertManagerName","isCloud","styles","getStyles","isVanillaAM","AlertingNotificationsExternalWrite","section","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/ReceiversAndTemplatesView.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LinkButton, useStyles2 } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { Authorize } from '../Authorize';\n\nimport { ReceiversTable } from './ReceiversTable';\nimport { TemplatesTable } from './TemplatesTable';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerName: string;\n}\n\nexport const ReceiversAndTemplatesView: FC<Props> = ({ config, alertManagerName }) => {\n  const isCloud = alertManagerName !== GRAFANA_RULES_SOURCE_NAME;\n  const styles = useStyles2(getStyles);\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n  return (\n    <>\n      {!isVanillaAM && <TemplatesTable config={config} alertManagerName={alertManagerName} />}\n      <ReceiversTable config={config} alertManagerName={alertManagerName} />\n      {isCloud && (\n        <Authorize actions={[AccessControlAction.AlertingNotificationsExternalWrite]}>\n          <Alert className={styles.section} severity=\"info\" title=\"Global config for contact points\">\n            <p>\n              For each external Alertmanager you can define global settings, like server addresses, usernames and\n              password, for all the supported contact points.\n            </p>\n            <LinkButton href={makeAMLink('alerting/notifications/global-config', alertManagerName)} variant=\"secondary\">\n              {isVanillaAM ? 'View global config' : 'Edit global config'}\n            </LinkButton>\n          </Alert>\n        </Authorize>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  section: css`\n    margin-top: ${theme.spacing(4)};\n  `,\n});\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAA0B,OAA1B;AAGA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,aAA9C;AAEA,SAASC,mBAAT,QAAoC,WAApC;AAEA,SAASC,yBAAT,EAAoCC,yCAApC,QAAqF,wBAArF;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,cAAT,QAA+B,kBAA/B;;;;AAOA,OAAO,MAAMC,yBAAoC,GAAG,CAAC;EAAEC,MAAF;EAAUC;AAAV,CAAD,KAAkC;EACpF,MAAMC,OAAO,GAAGD,gBAAgB,KAAKR,yBAArC;EACA,MAAMU,MAAM,GAAGZ,UAAU,CAACa,SAAD,CAAzB;EACA,MAAMC,WAAW,GAAGX,yCAAyC,CAACO,gBAAD,CAA7D;EACA,oBACE;IAAA,WACG,CAACI,WAAD,iBAAgB,KAAC,cAAD;MAAgB,MAAM,EAAEL,MAAxB;MAAgC,gBAAgB,EAAEC;IAAlD,EADnB,eAEE,KAAC,cAAD;MAAgB,MAAM,EAAED,MAAxB;MAAgC,gBAAgB,EAAEC;IAAlD,EAFF,EAGGC,OAAO,iBACN,KAAC,SAAD;MAAW,OAAO,EAAE,CAACV,mBAAmB,CAACc,kCAArB,CAApB;MAAA,uBACE,MAAC,KAAD;QAAO,SAAS,EAAEH,MAAM,CAACI,OAAzB;QAAkC,QAAQ,EAAC,MAA3C;QAAkD,KAAK,EAAC,kCAAxD;QAAA,oCACE;UAAA;QAAA,EADF,gBAKE,KAAC,UAAD;UAAY,IAAI,EAAEZ,UAAU,CAAC,sCAAD,EAAyCM,gBAAzC,CAA5B;UAAwF,OAAO,EAAC,WAAhG;UAAA,UACGI,WAAW,GAAG,oBAAH,GAA0B;QADxC,EALF;MAAA;IADF,EAJJ;EAAA,EADF;AAmBD,CAvBM;;AAyBP,MAAMD,SAAS,GAAII,KAAD,KAA2B;EAC3CD,OAAO,EAAEpB,GAAI;AACf,kBAAkBqB,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AACnC;AAH6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}