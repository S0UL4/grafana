{"ast":null,"code":"var _div, _div2, _br;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { AppEvents } from '@grafana/data';\nimport { config } from '@grafana/runtime/src';\nimport { Button, HorizontalGroup } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { AddLayerButton } from 'app/core/components/Layers/AddLayerButton';\nimport { LayerDragDropList } from 'app/core/components/Layers/LayerDragDropList';\nimport { canvasElementRegistry } from 'app/features/canvas';\nimport { notFoundItem } from 'app/features/canvas/elements/notFound';\nimport { ElementState } from 'app/features/canvas/runtime/element';\nimport { FrameState } from 'app/features/canvas/runtime/frame';\nimport { ShowConfirmModalEvent } from 'app/types/events';\nimport { LayerActionID } from '../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class LayerElementListEditor extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getScene\", () => {\n      const {\n        settings\n      } = this.props.item;\n\n      if (!(settings !== null && settings !== void 0 && settings.layer)) {\n        return;\n      }\n\n      return settings.layer.scene;\n    });\n\n    _defineProperty(this, \"onAddItem\", sel => {\n      var _canvasElementRegistr;\n\n      const {\n        settings\n      } = this.props.item;\n\n      if (!(settings !== null && settings !== void 0 && settings.layer)) {\n        return;\n      }\n\n      const {\n        layer\n      } = settings;\n      const item = (_canvasElementRegistr = canvasElementRegistry.getIfExists(sel.value)) !== null && _canvasElementRegistr !== void 0 ? _canvasElementRegistr : notFoundItem;\n      const newElementOptions = item.getNewOptions();\n      newElementOptions.type = item.id;\n      const newElement = new ElementState(item, newElementOptions, layer);\n      newElement.updateData(layer.scene.context);\n      layer.elements.push(newElement);\n      layer.scene.save();\n      layer.reinitializeMoveable();\n    });\n\n    _defineProperty(this, \"onSelect\", item => {\n      const {\n        settings\n      } = this.props.item;\n\n      if (settings !== null && settings !== void 0 && settings.scene) {\n        try {\n          let selection = {\n            targets: []\n          };\n\n          if (item instanceof FrameState) {\n            const targetElements = [];\n            targetElements.push(item === null || item === void 0 ? void 0 : item.div);\n            selection.targets = targetElements;\n            selection.frame = item;\n            settings.scene.select(selection);\n          } else if (item instanceof ElementState) {\n            const targetElement = [item === null || item === void 0 ? void 0 : item.div];\n            selection.targets = targetElement;\n            settings.scene.select(selection);\n          }\n        } catch (error) {\n          appEvents.emit(AppEvents.alertError, ['Unable to select element, try selecting element in panel instead']);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onClearSelection\", () => {\n      const {\n        settings\n      } = this.props.item;\n\n      if (!(settings !== null && settings !== void 0 && settings.layer)) {\n        return;\n      }\n\n      const {\n        layer\n      } = settings;\n      layer.scene.clearCurrentSelection();\n    });\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      if (!result.destination) {\n        return;\n      }\n\n      const {\n        settings\n      } = this.props.item;\n\n      if (!(settings !== null && settings !== void 0 && settings.layer)) {\n        return;\n      }\n\n      const {\n        layer\n      } = settings;\n      const count = layer.elements.length - 1;\n      const src = (result.source.index - count) * -1;\n      const dst = (result.destination.index - count) * -1;\n      layer.reorder(src, dst);\n    });\n\n    _defineProperty(this, \"goUpLayer\", () => {\n      const settings = this.props.item.settings;\n\n      if (!(settings !== null && settings !== void 0 && settings.layer) || !(settings !== null && settings !== void 0 && settings.scene)) {\n        return;\n      }\n\n      const {\n        scene,\n        layer\n      } = settings;\n\n      if (layer.parent) {\n        scene.updateCurrentLayer(layer.parent);\n      }\n    });\n\n    _defineProperty(this, \"decoupleFrame\", () => {\n      const settings = this.props.item.settings;\n\n      if (!(settings !== null && settings !== void 0 && settings.layer)) {\n        return;\n      }\n\n      const {\n        layer\n      } = settings;\n      this.deleteFrame();\n      layer.elements.forEach(element => {\n        var _element$div, _layer$parent, _layer$parent$div, _layer$parent2;\n\n        const elementContainer = (_element$div = element.div) === null || _element$div === void 0 ? void 0 : _element$div.getBoundingClientRect();\n        element.setPlacementFromConstraint(elementContainer, (_layer$parent = layer.parent) === null || _layer$parent === void 0 ? void 0 : (_layer$parent$div = _layer$parent.div) === null || _layer$parent$div === void 0 ? void 0 : _layer$parent$div.getBoundingClientRect());\n        (_layer$parent2 = layer.parent) === null || _layer$parent2 === void 0 ? void 0 : _layer$parent2.doAction(LayerActionID.Duplicate, element, false, false);\n      });\n    });\n\n    _defineProperty(this, \"onDecoupleFrame\", () => {\n      appEvents.publish(new ShowConfirmModalEvent({\n        title: 'Decouple frame',\n        text: `Are you sure you want to decouple this frame?`,\n        text2: 'This will remove the frame and push nested elements in the next level up.',\n        confirmText: 'Yes',\n        yesText: 'Decouple',\n        onConfirm: async () => {\n          this.decoupleFrame();\n        }\n      }));\n    });\n\n    _defineProperty(this, \"deleteFrame\", () => {\n      var _layer$parent3;\n\n      const settings = this.props.item.settings;\n\n      if (!(settings !== null && settings !== void 0 && settings.layer)) {\n        return;\n      }\n\n      const {\n        layer\n      } = settings;\n      const scene = this.getScene();\n      scene === null || scene === void 0 ? void 0 : scene.byName.delete(layer.getName());\n      layer.elements.forEach(element => scene === null || scene === void 0 ? void 0 : scene.byName.delete(element.getName()));\n      (_layer$parent3 = layer.parent) === null || _layer$parent3 === void 0 ? void 0 : _layer$parent3.doAction(LayerActionID.Delete, layer);\n      this.goUpLayer();\n    });\n\n    _defineProperty(this, \"onFrameSelection\", () => {\n      const scene = this.getScene();\n\n      if (scene) {\n        scene.frameSelection();\n      } else {\n        console.warn('no scene!');\n      }\n    });\n\n    _defineProperty(this, \"onDeleteFrame\", () => {\n      appEvents.publish(new ShowConfirmModalEvent({\n        title: 'Delete frame',\n        text: `Are you sure you want to delete this frame?`,\n        text2: 'This will delete the frame and all nested elements.',\n        icon: 'trash-alt',\n        confirmText: 'Delete',\n        yesText: 'Delete',\n        onConfirm: async () => {\n          this.deleteFrame();\n        }\n      }));\n    });\n  }\n\n  render() {\n    const settings = this.props.item.settings;\n\n    if (!settings) {\n      return _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n        children: \"No settings\"\n      }));\n    }\n\n    const layer = settings.layer;\n\n    if (!layer) {\n      return _div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n        children: \"Missing layer?\"\n      }));\n    }\n\n    const onDelete = element => {\n      layer.doAction(LayerActionID.Delete, element);\n    };\n\n    const onDuplicate = element => {\n      layer.doAction(LayerActionID.Duplicate, element);\n    };\n\n    const getLayerInfo = element => {\n      return element.options.type;\n    };\n\n    const onNameChange = (element, name) => {\n      element.onChange(Object.assign({}, element.options, {\n        name\n      }));\n    };\n\n    const showActions = element => {\n      return !(element instanceof FrameState);\n    };\n\n    const verifyLayerNameUniqueness = nameToVerify => {\n      const scene = this.getScene();\n      return Boolean(scene === null || scene === void 0 ? void 0 : scene.canRename(nameToVerify));\n    };\n\n    const selection = settings.selected ? settings.selected.map(v => v.getName()) : [];\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [!layer.isRoot() && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          icon: \"angle-up\",\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: this.goUpLayer,\n          children: \"Go up level\"\n        }), /*#__PURE__*/_jsx(Button, {\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: () => this.onSelect(layer),\n          children: \"Select frame\"\n        }), /*#__PURE__*/_jsx(Button, {\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: () => this.onDecoupleFrame(),\n          children: \"Decouple frame\"\n        }), /*#__PURE__*/_jsx(Button, {\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: () => this.onDeleteFrame(),\n          children: \"Delete frame\"\n        })]\n      }), /*#__PURE__*/_jsx(LayerDragDropList, {\n        onDragEnd: this.onDragEnd,\n        onSelect: this.onSelect,\n        onDelete: onDelete,\n        onDuplicate: onDuplicate,\n        getLayerInfo: getLayerInfo,\n        onNameChange: onNameChange,\n        verifyLayerNameUniqueness: verifyLayerNameUniqueness,\n        showActions: showActions,\n        layers: layer.elements,\n        selection: selection\n      }), _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsxs(HorizontalGroup, {\n        children: [/*#__PURE__*/_jsx(AddLayerButton, {\n          onChange: this.onAddItem,\n          options: canvasElementRegistry.selectOptions().options,\n          label: 'Add item'\n        }), selection.length > 0 && /*#__PURE__*/_jsx(Button, {\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: this.onClearSelection,\n          children: \"Clear selection\"\n        }), selection.length > 1 && config.featureToggles.canvasPanelNesting && /*#__PURE__*/_jsx(Button, {\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: this.onFrameSelection,\n          children: \"Frame selection\"\n        })]\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","AppEvents","config","Button","HorizontalGroup","appEvents","AddLayerButton","LayerDragDropList","canvasElementRegistry","notFoundItem","ElementState","FrameState","ShowConfirmModalEvent","LayerActionID","LayerElementListEditor","settings","props","item","layer","scene","sel","getIfExists","value","newElementOptions","getNewOptions","type","id","newElement","updateData","context","elements","push","save","reinitializeMoveable","selection","targets","targetElements","div","frame","select","targetElement","error","emit","alertError","clearCurrentSelection","result","destination","count","length","src","source","index","dst","reorder","parent","updateCurrentLayer","deleteFrame","forEach","element","elementContainer","getBoundingClientRect","setPlacementFromConstraint","doAction","Duplicate","publish","title","text","text2","confirmText","yesText","onConfirm","decoupleFrame","getScene","byName","delete","getName","Delete","goUpLayer","frameSelection","console","warn","icon","render","onDelete","onDuplicate","getLayerInfo","options","onNameChange","name","onChange","showActions","verifyLayerNameUniqueness","nameToVerify","Boolean","canRename","selected","map","v","isRoot","onSelect","onDecoupleFrame","onDeleteFrame","onDragEnd","onAddItem","selectOptions","onClearSelection","featureToggles","canvasPanelNesting","onFrameSelection"],"sources":["/home/soula/grafana/public/app/plugins/panel/canvas/editor/LayerElementListEditor.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { DropResult } from 'react-beautiful-dnd';\n\nimport { AppEvents, SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime/src';\nimport { Button, HorizontalGroup } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { AddLayerButton } from 'app/core/components/Layers/AddLayerButton';\nimport { LayerDragDropList } from 'app/core/components/Layers/LayerDragDropList';\nimport { CanvasElementOptions, canvasElementRegistry } from 'app/features/canvas';\nimport { notFoundItem } from 'app/features/canvas/elements/notFound';\nimport { ElementState } from 'app/features/canvas/runtime/element';\nimport { FrameState } from 'app/features/canvas/runtime/frame';\nimport { SelectionParams } from 'app/features/canvas/runtime/scene';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { PanelOptions } from '../models.gen';\nimport { LayerActionID } from '../types';\n\nimport { LayerEditorProps } from './layerEditor';\n\ntype Props = StandardEditorProps<any, LayerEditorProps, PanelOptions>;\n\nexport class LayerElementListEditor extends PureComponent<Props> {\n  getScene = () => {\n    const { settings } = this.props.item;\n    if (!settings?.layer) {\n      return;\n    }\n    return settings.layer.scene;\n  };\n\n  onAddItem = (sel: SelectableValue<string>) => {\n    const { settings } = this.props.item;\n    if (!settings?.layer) {\n      return;\n    }\n    const { layer } = settings;\n\n    const item = canvasElementRegistry.getIfExists(sel.value) ?? notFoundItem;\n    const newElementOptions = item.getNewOptions() as CanvasElementOptions;\n    newElementOptions.type = item.id;\n    const newElement = new ElementState(item, newElementOptions, layer);\n    newElement.updateData(layer.scene.context);\n    layer.elements.push(newElement);\n    layer.scene.save();\n\n    layer.reinitializeMoveable();\n  };\n\n  onSelect = (item: any) => {\n    const { settings } = this.props.item;\n\n    if (settings?.scene) {\n      try {\n        let selection: SelectionParams = { targets: [] };\n        if (item instanceof FrameState) {\n          const targetElements: HTMLDivElement[] = [];\n          targetElements.push(item?.div!);\n          selection.targets = targetElements;\n          selection.frame = item;\n          settings.scene.select(selection);\n        } else if (item instanceof ElementState) {\n          const targetElement = [item?.div!];\n          selection.targets = targetElement;\n          settings.scene.select(selection);\n        }\n      } catch (error) {\n        appEvents.emit(AppEvents.alertError, ['Unable to select element, try selecting element in panel instead']);\n      }\n    }\n  };\n\n  onClearSelection = () => {\n    const { settings } = this.props.item;\n\n    if (!settings?.layer) {\n      return;\n    }\n\n    const { layer } = settings;\n\n    layer.scene.clearCurrentSelection();\n  };\n\n  onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const { settings } = this.props.item;\n    if (!settings?.layer) {\n      return;\n    }\n\n    const { layer } = settings;\n\n    const count = layer.elements.length - 1;\n    const src = (result.source.index - count) * -1;\n    const dst = (result.destination.index - count) * -1;\n\n    layer.reorder(src, dst);\n  };\n\n  goUpLayer = () => {\n    const settings = this.props.item.settings;\n\n    if (!settings?.layer || !settings?.scene) {\n      return;\n    }\n\n    const { scene, layer } = settings;\n\n    if (layer.parent) {\n      scene.updateCurrentLayer(layer.parent);\n    }\n  };\n\n  private decoupleFrame = () => {\n    const settings = this.props.item.settings;\n\n    if (!settings?.layer) {\n      return;\n    }\n\n    const { layer } = settings;\n\n    this.deleteFrame();\n    layer.elements.forEach((element: ElementState) => {\n      const elementContainer = element.div?.getBoundingClientRect();\n      element.setPlacementFromConstraint(elementContainer, layer.parent?.div?.getBoundingClientRect());\n      layer.parent?.doAction(LayerActionID.Duplicate, element, false, false);\n    });\n  };\n\n  private onDecoupleFrame = () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Decouple frame',\n        text: `Are you sure you want to decouple this frame?`,\n        text2: 'This will remove the frame and push nested elements in the next level up.',\n        confirmText: 'Yes',\n        yesText: 'Decouple',\n        onConfirm: async () => {\n          this.decoupleFrame();\n        },\n      })\n    );\n  };\n\n  private deleteFrame = () => {\n    const settings = this.props.item.settings;\n\n    if (!settings?.layer) {\n      return;\n    }\n\n    const { layer } = settings;\n\n    const scene = this.getScene();\n    scene?.byName.delete(layer.getName());\n    layer.elements.forEach((element) => scene?.byName.delete(element.getName()));\n    layer.parent?.doAction(LayerActionID.Delete, layer);\n\n    this.goUpLayer();\n  };\n\n  private onFrameSelection = () => {\n    const scene = this.getScene();\n    if (scene) {\n      scene.frameSelection();\n    } else {\n      console.warn('no scene!');\n    }\n  };\n\n  private onDeleteFrame = () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete frame',\n        text: `Are you sure you want to delete this frame?`,\n        text2: 'This will delete the frame and all nested elements.',\n        icon: 'trash-alt',\n        confirmText: 'Delete',\n        yesText: 'Delete',\n        onConfirm: async () => {\n          this.deleteFrame();\n        },\n      })\n    );\n  };\n\n  render() {\n    const settings = this.props.item.settings;\n    if (!settings) {\n      return <div>No settings</div>;\n    }\n    const layer = settings.layer;\n    if (!layer) {\n      return <div>Missing layer?</div>;\n    }\n\n    const onDelete = (element: ElementState) => {\n      layer.doAction(LayerActionID.Delete, element);\n    };\n\n    const onDuplicate = (element: ElementState) => {\n      layer.doAction(LayerActionID.Duplicate, element);\n    };\n\n    const getLayerInfo = (element: ElementState) => {\n      return element.options.type;\n    };\n\n    const onNameChange = (element: ElementState, name: string) => {\n      element.onChange({ ...element.options, name });\n    };\n\n    const showActions = (element: ElementState) => {\n      return !(element instanceof FrameState);\n    };\n\n    const verifyLayerNameUniqueness = (nameToVerify: string) => {\n      const scene = this.getScene();\n\n      return Boolean(scene?.canRename(nameToVerify));\n    };\n\n    const selection: string[] = settings.selected ? settings.selected.map((v) => v.getName()) : [];\n    return (\n      <>\n        {!layer.isRoot() && (\n          <>\n            <Button icon=\"angle-up\" size=\"sm\" variant=\"secondary\" onClick={this.goUpLayer}>\n              Go up level\n            </Button>\n            <Button size=\"sm\" variant=\"secondary\" onClick={() => this.onSelect(layer)}>\n              Select frame\n            </Button>\n            <Button size=\"sm\" variant=\"secondary\" onClick={() => this.onDecoupleFrame()}>\n              Decouple frame\n            </Button>\n            <Button size=\"sm\" variant=\"secondary\" onClick={() => this.onDeleteFrame()}>\n              Delete frame\n            </Button>\n          </>\n        )}\n        <LayerDragDropList\n          onDragEnd={this.onDragEnd}\n          onSelect={this.onSelect}\n          onDelete={onDelete}\n          onDuplicate={onDuplicate}\n          getLayerInfo={getLayerInfo}\n          onNameChange={onNameChange}\n          verifyLayerNameUniqueness={verifyLayerNameUniqueness}\n          showActions={showActions}\n          layers={layer.elements}\n          selection={selection}\n        />\n        <br />\n\n        <HorizontalGroup>\n          <AddLayerButton\n            onChange={this.onAddItem}\n            options={canvasElementRegistry.selectOptions().options}\n            label={'Add item'}\n          />\n          {selection.length > 0 && (\n            <Button size=\"sm\" variant=\"secondary\" onClick={this.onClearSelection}>\n              Clear selection\n            </Button>\n          )}\n          {selection.length > 1 && config.featureToggles.canvasPanelNesting && (\n            <Button size=\"sm\" variant=\"secondary\" onClick={this.onFrameSelection}>\n              Frame selection\n            </Button>\n          )}\n        </HorizontalGroup>\n      </>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}