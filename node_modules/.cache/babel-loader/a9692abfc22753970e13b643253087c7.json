{"ast":null,"code":"import React from 'react';\nimport tinycolor from 'tinycolor2';\nimport { formattedValueToString } from '@grafana/data';\nimport { getTextColorForBackground, getCellLinks } from '../../utils';\nimport { CellActions } from './CellActions';\nimport { TableCellDisplayMode } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DefaultCell = props => {\n  var _field$config$custom;\n\n  const {\n    field,\n    cell,\n    tableStyles,\n    row,\n    cellProps\n  } = props;\n  const inspectEnabled = Boolean((_field$config$custom = field.config.custom) === null || _field$config$custom === void 0 ? void 0 : _field$config$custom.inspect);\n  const displayValue = field.display(cell.value);\n  let value;\n\n  if ( /*#__PURE__*/React.isValidElement(cell.value)) {\n    value = cell.value;\n  } else {\n    value = formattedValueToString(displayValue);\n  }\n\n  const showFilters = field.config.filterable;\n  const showActions = showFilters && cell.value !== undefined || inspectEnabled;\n  const cellStyle = getCellStyle(tableStyles, field, displayValue, inspectEnabled);\n  const {\n    link,\n    onClick\n  } = getCellLinks(field, row);\n  return /*#__PURE__*/_jsxs(\"div\", Object.assign({}, cellProps, {\n    className: cellStyle,\n    children: [!link && /*#__PURE__*/_jsx(\"div\", {\n      className: tableStyles.cellText,\n      children: value\n    }), link && /*#__PURE__*/_jsx(\"a\", {\n      href: link.href,\n      onClick: onClick,\n      target: link.target,\n      title: link.title,\n      className: tableStyles.cellLink,\n      children: value\n    }), showActions && /*#__PURE__*/_jsx(CellActions, Object.assign({}, props, {\n      previewMode: \"text\"\n    }))]\n  }));\n};\n\nfunction getCellStyle(tableStyles, field, displayValue, disableOverflowOnHover = false) {\n  var _field$config$custom2, _field$config$custom3, _field$config$custom4;\n\n  if (((_field$config$custom2 = field.config.custom) === null || _field$config$custom2 === void 0 ? void 0 : _field$config$custom2.displayMode) === TableCellDisplayMode.ColorText) {\n    return tableStyles.buildCellContainerStyle(displayValue.color, undefined, !disableOverflowOnHover);\n  }\n\n  if (((_field$config$custom3 = field.config.custom) === null || _field$config$custom3 === void 0 ? void 0 : _field$config$custom3.displayMode) === TableCellDisplayMode.ColorBackgroundSolid) {\n    const bgColor = tinycolor(displayValue.color);\n    const textColor = getTextColorForBackground(displayValue.color);\n    return tableStyles.buildCellContainerStyle(textColor, bgColor.toRgbString(), !disableOverflowOnHover);\n  }\n\n  if (((_field$config$custom4 = field.config.custom) === null || _field$config$custom4 === void 0 ? void 0 : _field$config$custom4.displayMode) === TableCellDisplayMode.ColorBackground) {\n    const themeFactor = tableStyles.theme.isDark ? 1 : -0.7;\n    const bgColor2 = tinycolor(displayValue.color).darken(10 * themeFactor).spin(5).toRgbString();\n    const textColor = getTextColorForBackground(displayValue.color);\n    return tableStyles.buildCellContainerStyle(textColor, `linear-gradient(120deg, ${bgColor2}, ${displayValue.color})`, !disableOverflowOnHover);\n  }\n\n  return disableOverflowOnHover ? tableStyles.cellContainerNoOverflow : tableStyles.cellContainer;\n}","map":{"version":3,"names":["React","tinycolor","formattedValueToString","getTextColorForBackground","getCellLinks","CellActions","TableCellDisplayMode","DefaultCell","props","field","cell","tableStyles","row","cellProps","inspectEnabled","Boolean","config","custom","inspect","displayValue","display","value","isValidElement","showFilters","filterable","showActions","undefined","cellStyle","getCellStyle","link","onClick","cellText","href","target","title","cellLink","disableOverflowOnHover","displayMode","ColorText","buildCellContainerStyle","color","ColorBackgroundSolid","bgColor","textColor","toRgbString","ColorBackground","themeFactor","theme","isDark","bgColor2","darken","spin","cellContainerNoOverflow","cellContainer"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Table/DefaultCell.tsx"],"sourcesContent":["import React, { FC, ReactElement } from 'react';\nimport tinycolor from 'tinycolor2';\n\nimport { DisplayValue, Field, formattedValueToString } from '@grafana/data';\n\nimport { getTextColorForBackground, getCellLinks } from '../../utils';\n\nimport { CellActions } from './CellActions';\nimport { TableStyles } from './styles';\nimport { TableCellDisplayMode, TableCellProps, TableFieldOptions } from './types';\n\nexport const DefaultCell: FC<TableCellProps> = (props) => {\n  const { field, cell, tableStyles, row, cellProps } = props;\n\n  const inspectEnabled = Boolean((field.config.custom as TableFieldOptions)?.inspect);\n  const displayValue = field.display!(cell.value);\n\n  let value: string | ReactElement;\n  if (React.isValidElement(cell.value)) {\n    value = cell.value;\n  } else {\n    value = formattedValueToString(displayValue);\n  }\n\n  const showFilters = field.config.filterable;\n  const showActions = (showFilters && cell.value !== undefined) || inspectEnabled;\n  const cellStyle = getCellStyle(tableStyles, field, displayValue, inspectEnabled);\n\n  const { link, onClick } = getCellLinks(field, row);\n\n  return (\n    <div {...cellProps} className={cellStyle}>\n      {!link && <div className={tableStyles.cellText}>{value}</div>}\n      {link && (\n        <a href={link.href} onClick={onClick} target={link.target} title={link.title} className={tableStyles.cellLink}>\n          {value}\n        </a>\n      )}\n      {showActions && <CellActions {...props} previewMode=\"text\" />}\n    </div>\n  );\n};\n\nfunction getCellStyle(\n  tableStyles: TableStyles,\n  field: Field,\n  displayValue: DisplayValue,\n  disableOverflowOnHover = false\n) {\n  if (field.config.custom?.displayMode === TableCellDisplayMode.ColorText) {\n    return tableStyles.buildCellContainerStyle(displayValue.color, undefined, !disableOverflowOnHover);\n  }\n\n  if (field.config.custom?.displayMode === TableCellDisplayMode.ColorBackgroundSolid) {\n    const bgColor = tinycolor(displayValue.color);\n    const textColor = getTextColorForBackground(displayValue.color!);\n    return tableStyles.buildCellContainerStyle(textColor, bgColor.toRgbString(), !disableOverflowOnHover);\n  }\n\n  if (field.config.custom?.displayMode === TableCellDisplayMode.ColorBackground) {\n    const themeFactor = tableStyles.theme.isDark ? 1 : -0.7;\n    const bgColor2 = tinycolor(displayValue.color)\n      .darken(10 * themeFactor)\n      .spin(5)\n      .toRgbString();\n\n    const textColor = getTextColorForBackground(displayValue.color!);\n\n    return tableStyles.buildCellContainerStyle(\n      textColor,\n      `linear-gradient(120deg, ${bgColor2}, ${displayValue.color})`,\n      !disableOverflowOnHover\n    );\n  }\n\n  return disableOverflowOnHover ? tableStyles.cellContainerNoOverflow : tableStyles.cellContainer;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}