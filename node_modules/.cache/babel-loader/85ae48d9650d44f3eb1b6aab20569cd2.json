{"ast":null,"code":"//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// This file is autogenerated. DO NOT EDIT.\n//\n// To regenerate, run \"make gen-cue\" from the repository root.\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nexport let AxisPlacement;\n\n(function (AxisPlacement) {\n  AxisPlacement[\"Auto\"] = \"auto\";\n  AxisPlacement[\"Bottom\"] = \"bottom\";\n  AxisPlacement[\"Hidden\"] = \"hidden\";\n  AxisPlacement[\"Left\"] = \"left\";\n  AxisPlacement[\"Right\"] = \"right\";\n  AxisPlacement[\"Top\"] = \"top\";\n})(AxisPlacement || (AxisPlacement = {}));\n\nexport let VisibilityMode;\n\n(function (VisibilityMode) {\n  VisibilityMode[\"Always\"] = \"always\";\n  VisibilityMode[\"Auto\"] = \"auto\";\n  VisibilityMode[\"Never\"] = \"never\";\n})(VisibilityMode || (VisibilityMode = {}));\n\nexport let GraphDrawStyle;\n\n(function (GraphDrawStyle) {\n  GraphDrawStyle[\"Bars\"] = \"bars\";\n  GraphDrawStyle[\"Line\"] = \"line\";\n  GraphDrawStyle[\"Points\"] = \"points\";\n})(GraphDrawStyle || (GraphDrawStyle = {}));\n\nexport let GraphTransform;\n\n(function (GraphTransform) {\n  GraphTransform[\"Constant\"] = \"constant\";\n  GraphTransform[\"NegativeY\"] = \"negative-Y\";\n})(GraphTransform || (GraphTransform = {}));\n\nexport let LineInterpolation;\n\n(function (LineInterpolation) {\n  LineInterpolation[\"Linear\"] = \"linear\";\n  LineInterpolation[\"Smooth\"] = \"smooth\";\n  LineInterpolation[\"StepAfter\"] = \"stepAfter\";\n  LineInterpolation[\"StepBefore\"] = \"stepBefore\";\n})(LineInterpolation || (LineInterpolation = {}));\n\nexport let ScaleDistribution;\n\n(function (ScaleDistribution) {\n  ScaleDistribution[\"Linear\"] = \"linear\";\n  ScaleDistribution[\"Log\"] = \"log\";\n  ScaleDistribution[\"Ordinal\"] = \"ordinal\";\n})(ScaleDistribution || (ScaleDistribution = {}));\n\nexport let GraphGradientMode;\n\n(function (GraphGradientMode) {\n  GraphGradientMode[\"Hue\"] = \"hue\";\n  GraphGradientMode[\"None\"] = \"none\";\n  GraphGradientMode[\"Opacity\"] = \"opacity\";\n  GraphGradientMode[\"Scheme\"] = \"scheme\";\n})(GraphGradientMode || (GraphGradientMode = {}));\n\nexport let StackingMode;\n\n(function (StackingMode) {\n  StackingMode[\"None\"] = \"none\";\n  StackingMode[\"Normal\"] = \"normal\";\n  StackingMode[\"Percent\"] = \"percent\";\n})(StackingMode || (StackingMode = {}));\n\nexport let BarAlignment;\n\n(function (BarAlignment) {\n  BarAlignment[BarAlignment[\"After\"] = 1] = \"After\";\n  BarAlignment[BarAlignment[\"Before\"] = -1] = \"Before\";\n  BarAlignment[BarAlignment[\"Center\"] = 0] = \"Center\";\n})(BarAlignment || (BarAlignment = {}));\n\nexport let ScaleOrientation;\n\n(function (ScaleOrientation) {\n  ScaleOrientation[ScaleOrientation[\"Horizontal\"] = 0] = \"Horizontal\";\n  ScaleOrientation[ScaleOrientation[\"Vertical\"] = 1] = \"Vertical\";\n})(ScaleOrientation || (ScaleOrientation = {}));\n\nexport let ScaleDirection;\n\n(function (ScaleDirection) {\n  ScaleDirection[ScaleDirection[\"Down\"] = -1] = \"Down\";\n  ScaleDirection[ScaleDirection[\"Left\"] = -1] = \"Left\";\n  ScaleDirection[ScaleDirection[\"Right\"] = 1] = \"Right\";\n  ScaleDirection[ScaleDirection[\"Up\"] = 1] = \"Up\";\n})(ScaleDirection || (ScaleDirection = {}));\n\nexport const defaultLineStyle = {\n  dash: []\n};\nexport let GraphTresholdsStyleMode;\n\n(function (GraphTresholdsStyleMode) {\n  GraphTresholdsStyleMode[\"Area\"] = \"area\";\n  GraphTresholdsStyleMode[\"Line\"] = \"line\";\n  GraphTresholdsStyleMode[\"LineAndArea\"] = \"line+area\";\n  GraphTresholdsStyleMode[\"Off\"] = \"off\";\n  GraphTresholdsStyleMode[\"Series\"] = \"series\";\n})(GraphTresholdsStyleMode || (GraphTresholdsStyleMode = {}));\n\nexport let LegendDisplayMode;\n\n(function (LegendDisplayMode) {\n  LegendDisplayMode[\"Hidden\"] = \"hidden\";\n  LegendDisplayMode[\"List\"] = \"list\";\n  LegendDisplayMode[\"Table\"] = \"table\";\n})(LegendDisplayMode || (LegendDisplayMode = {}));\n\nexport const defaultReduceDataOptions = {\n  calcs: []\n};\nexport let VizOrientation;\n\n(function (VizOrientation) {\n  VizOrientation[\"Auto\"] = \"auto\";\n  VizOrientation[\"Horizontal\"] = \"horizontal\";\n  VizOrientation[\"Vertical\"] = \"vertical\";\n})(VizOrientation || (VizOrientation = {}));\n\nexport let BigValueColorMode;\n\n(function (BigValueColorMode) {\n  BigValueColorMode[\"Background\"] = \"background\";\n  BigValueColorMode[\"None\"] = \"none\";\n  BigValueColorMode[\"Value\"] = \"value\";\n})(BigValueColorMode || (BigValueColorMode = {}));\n\nexport let BigValueGraphMode;\n\n(function (BigValueGraphMode) {\n  BigValueGraphMode[\"Area\"] = \"area\";\n  BigValueGraphMode[\"Line\"] = \"line\";\n  BigValueGraphMode[\"None\"] = \"none\";\n})(BigValueGraphMode || (BigValueGraphMode = {}));\n\nexport let BigValueJustifyMode;\n\n(function (BigValueJustifyMode) {\n  BigValueJustifyMode[\"Auto\"] = \"auto\";\n  BigValueJustifyMode[\"Center\"] = \"center\";\n})(BigValueJustifyMode || (BigValueJustifyMode = {}));\n\nexport let BigValueTextMode;\n\n(function (BigValueTextMode) {\n  BigValueTextMode[\"Auto\"] = \"auto\";\n  BigValueTextMode[\"Name\"] = \"name\";\n  BigValueTextMode[\"None\"] = \"none\";\n  BigValueTextMode[\"Value\"] = \"value\";\n  BigValueTextMode[\"ValueAndName\"] = \"value_and_name\";\n})(BigValueTextMode || (BigValueTextMode = {}));\n\nexport let TableCellDisplayMode;\n\n(function (TableCellDisplayMode) {\n  TableCellDisplayMode[\"Auto\"] = \"auto\";\n  TableCellDisplayMode[\"BasicGauge\"] = \"basic\";\n  TableCellDisplayMode[\"ColorBackground\"] = \"color-background\";\n  TableCellDisplayMode[\"ColorBackgroundSolid\"] = \"color-background-solid\";\n  TableCellDisplayMode[\"ColorText\"] = \"color-text\";\n  TableCellDisplayMode[\"GradientGauge\"] = \"gradient-gauge\";\n  TableCellDisplayMode[\"Image\"] = \"image\";\n  TableCellDisplayMode[\"JSONView\"] = \"json-view\";\n  TableCellDisplayMode[\"LcdGauge\"] = \"lcd-gauge\";\n})(TableCellDisplayMode || (TableCellDisplayMode = {}));\n\nexport let TooltipDisplayMode;\n\n(function (TooltipDisplayMode) {\n  TooltipDisplayMode[\"Multi\"] = \"multi\";\n  TooltipDisplayMode[\"None\"] = \"none\";\n  TooltipDisplayMode[\"Single\"] = \"single\";\n})(TooltipDisplayMode || (TooltipDisplayMode = {}));\n\nexport let SortOrder;\n\n(function (SortOrder) {\n  SortOrder[\"Ascending\"] = \"asc\";\n  SortOrder[\"Descending\"] = \"desc\";\n  SortOrder[\"None\"] = \"none\";\n})(SortOrder || (SortOrder = {}));\n\nexport const defaultVizLegendOptions = {\n  calcs: []\n};\nexport let BarGaugeDisplayMode;\n\n(function (BarGaugeDisplayMode) {\n  BarGaugeDisplayMode[\"Basic\"] = \"basic\";\n  BarGaugeDisplayMode[\"Gradient\"] = \"gradient\";\n  BarGaugeDisplayMode[\"Lcd\"] = \"lcd\";\n})(BarGaugeDisplayMode || (BarGaugeDisplayMode = {}));\n\nexport const defaultTableFieldOptions = {\n  align: 'auto',\n  displayMode: TableCellDisplayMode.Auto,\n  inspect: false\n};","map":{"version":3,"names":["AxisPlacement","VisibilityMode","GraphDrawStyle","GraphTransform","LineInterpolation","ScaleDistribution","GraphGradientMode","StackingMode","BarAlignment","ScaleOrientation","ScaleDirection","defaultLineStyle","dash","GraphTresholdsStyleMode","LegendDisplayMode","defaultReduceDataOptions","calcs","VizOrientation","BigValueColorMode","BigValueGraphMode","BigValueJustifyMode","BigValueTextMode","TableCellDisplayMode","TooltipDisplayMode","SortOrder","defaultVizLegendOptions","BarGaugeDisplayMode","defaultTableFieldOptions","align","displayMode","Auto","inspect"],"sources":["/home/soula/grafana/packages/grafana-schema/src/schema/mudball.gen.ts"],"sourcesContent":["//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// This file is autogenerated. DO NOT EDIT.\n//\n// To regenerate, run \"make gen-cue\" from the repository root.\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\nexport enum AxisPlacement {\n  Auto = 'auto',\n  Bottom = 'bottom',\n  Hidden = 'hidden',\n  Left = 'left',\n  Right = 'right',\n  Top = 'top',\n}\n\nexport enum VisibilityMode {\n  Always = 'always',\n  Auto = 'auto',\n  Never = 'never',\n}\n\nexport enum GraphDrawStyle {\n  Bars = 'bars',\n  Line = 'line',\n  Points = 'points',\n}\n\nexport enum GraphTransform {\n  Constant = 'constant',\n  NegativeY = 'negative-Y',\n}\n\nexport enum LineInterpolation {\n  Linear = 'linear',\n  Smooth = 'smooth',\n  StepAfter = 'stepAfter',\n  StepBefore = 'stepBefore',\n}\n\nexport enum ScaleDistribution {\n  Linear = 'linear',\n  Log = 'log',\n  Ordinal = 'ordinal',\n}\n\nexport enum GraphGradientMode {\n  Hue = 'hue',\n  None = 'none',\n  Opacity = 'opacity',\n  Scheme = 'scheme',\n}\n\nexport enum StackingMode {\n  None = 'none',\n  Normal = 'normal',\n  Percent = 'percent',\n}\n\nexport enum BarAlignment {\n  After = 1,\n  Before = -1,\n  Center = 0,\n}\n\nexport enum ScaleOrientation {\n  Horizontal = 0,\n  Vertical = 1,\n}\n\nexport enum ScaleDirection {\n  Down = -1,\n  Left = -1,\n  Right = 1,\n  Up = 1,\n}\n\nexport interface LineStyle {\n  dash?: number[];\n  fill?: ('solid' | 'dash' | 'dot' | 'square');\n}\n\nexport const defaultLineStyle: Partial<LineStyle> = {\n  dash: [],\n};\n\nexport interface LineConfig {\n  lineColor?: string;\n  lineInterpolation?: LineInterpolation;\n  lineStyle?: LineStyle;\n  lineWidth?: number;\n  spanNulls?: (boolean | number);\n}\n\nexport interface BarConfig {\n  barAlignment?: BarAlignment;\n  barMaxWidth?: number;\n  barWidthFactor?: number;\n}\n\nexport interface FillConfig {\n  fillBelowTo?: string;\n  fillColor?: string;\n  fillOpacity?: number;\n}\n\nexport interface PointsConfig {\n  pointColor?: string;\n  pointSize?: number;\n  pointSymbol?: string;\n  showPoints?: VisibilityMode;\n}\n\nexport interface ScaleDistributionConfig {\n  log?: number;\n  type: ScaleDistribution;\n}\n\nexport interface AxisConfig {\n  axisGridShow?: boolean;\n  axisLabel?: string;\n  axisPlacement?: AxisPlacement;\n  axisSoftMax?: number;\n  axisSoftMin?: number;\n  axisWidth?: number;\n  scaleDistribution?: ScaleDistributionConfig;\n}\n\nexport interface HideSeriesConfig {\n  legend: boolean;\n  tooltip: boolean;\n  viz: boolean;\n}\n\nexport interface StackingConfig {\n  group?: string;\n  mode?: StackingMode;\n}\n\nexport interface StackableFieldConfig {\n  stacking?: StackingConfig;\n}\n\nexport interface HideableFieldConfig {\n  hideFrom?: HideSeriesConfig;\n}\n\nexport enum GraphTresholdsStyleMode {\n  Area = 'area',\n  Line = 'line',\n  LineAndArea = 'line+area',\n  Off = 'off',\n  Series = 'series',\n}\n\nexport interface GraphThresholdsStyleConfig {\n  mode: GraphTresholdsStyleMode;\n}\n\nexport type LegendPlacement = ('bottom' | 'right');\n\nexport enum LegendDisplayMode {\n  Hidden = 'hidden',\n  List = 'list',\n  Table = 'table',\n}\n\nexport interface TableSortByFieldState {\n  desc?: boolean;\n  displayName: string;\n}\n\nexport interface SingleStatBaseOptions extends OptionsWithTextFormatting {\n  orientation: VizOrientation;\n  reduceOptions: ReduceDataOptions;\n}\n\nexport interface ReduceDataOptions {\n  calcs: string[];\n  fields?: string;\n  limit?: number;\n  values?: boolean;\n}\n\nexport const defaultReduceDataOptions: Partial<ReduceDataOptions> = {\n  calcs: [],\n};\n\nexport enum VizOrientation {\n  Auto = 'auto',\n  Horizontal = 'horizontal',\n  Vertical = 'vertical',\n}\n\nexport interface OptionsWithTooltip {\n  tooltip: VizTooltipOptions;\n}\n\nexport interface OptionsWithLegend {\n  legend: VizLegendOptions;\n}\n\nexport interface OptionsWithTextFormatting {\n  text?: VizTextDisplayOptions;\n}\n\nexport enum BigValueColorMode {\n  Background = 'background',\n  None = 'none',\n  Value = 'value',\n}\n\nexport enum BigValueGraphMode {\n  Area = 'area',\n  Line = 'line',\n  None = 'none',\n}\n\nexport enum BigValueJustifyMode {\n  Auto = 'auto',\n  Center = 'center',\n}\n\nexport enum BigValueTextMode {\n  Auto = 'auto',\n  Name = 'name',\n  None = 'none',\n  Value = 'value',\n  ValueAndName = 'value_and_name',\n}\n\nexport type FieldTextAlignment = ('auto' | 'left' | 'right' | 'center');\n\nexport enum TableCellDisplayMode {\n  Auto = 'auto',\n  BasicGauge = 'basic',\n  ColorBackground = 'color-background',\n  ColorBackgroundSolid = 'color-background-solid',\n  ColorText = 'color-text',\n  GradientGauge = 'gradient-gauge',\n  Image = 'image',\n  JSONView = 'json-view',\n  LcdGauge = 'lcd-gauge',\n}\n\nexport interface VizTextDisplayOptions {\n  titleSize?: number;\n  valueSize?: number;\n}\n\nexport enum TooltipDisplayMode {\n  Multi = 'multi',\n  None = 'none',\n  Single = 'single',\n}\n\nexport enum SortOrder {\n  Ascending = 'asc',\n  Descending = 'desc',\n  None = 'none',\n}\n\nexport interface GraphFieldConfig extends LineConfig, FillConfig, PointsConfig, AxisConfig, BarConfig, StackableFieldConfig, HideableFieldConfig {\n  drawStyle?: GraphDrawStyle;\n  gradientMode?: GraphGradientMode;\n  thresholdsStyle?: GraphThresholdsStyleConfig;\n  transform?: GraphTransform;\n}\n\nexport interface VizLegendOptions {\n  asTable?: boolean;\n  calcs: string[];\n  displayMode: LegendDisplayMode;\n  isVisible?: boolean;\n  placement: LegendPlacement;\n  sortBy?: string;\n  sortDesc?: boolean;\n  width?: number;\n}\n\nexport const defaultVizLegendOptions: Partial<VizLegendOptions> = {\n  calcs: [],\n};\n\nexport enum BarGaugeDisplayMode {\n  Basic = 'basic',\n  Gradient = 'gradient',\n  Lcd = 'lcd',\n}\n\nexport interface TableFieldOptions {\n  align: FieldTextAlignment;\n  displayMode: TableCellDisplayMode;\n  filterable?: boolean;\n  hidden?: boolean;\n  inspect: boolean;\n  minWidth?: number;\n  width?: number;\n}\n\nexport const defaultTableFieldOptions: Partial<TableFieldOptions> = {\n  align: 'auto',\n  displayMode: TableCellDisplayMode.Auto,\n  inspect: false,\n};\n\nexport interface VizTooltipOptions {\n  mode: TooltipDisplayMode;\n  sort: SortOrder;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}