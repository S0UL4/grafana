{"ast":null,"code":"const _excluded = [\"value\", \"onChange\", \"loadOptions\", \"reloadOptionsOnChange\", \"Component\", \"className\", \"allowCustomValue\", \"allowEmptyValue\", \"disabled\", \"placeholder\", \"inputMinWidth\", \"inputPlaceholder\", \"autofocus\", \"onExpandedChange\", \"noOptionMessageHandler\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cx } from '@emotion/css';\nimport { isObject } from 'lodash';\nimport React from 'react';\nimport { useAsyncFn } from 'react-use';\nimport { useStyles } from '../../themes';\nimport { InlineLabel } from '../Forms/InlineLabel';\nimport { SegmentSelect } from './SegmentSelect';\nimport { getSegmentStyles } from './styles';\nimport { useExpandableLabel } from '.';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function SegmentAsync(_ref) {\n  var _state$value;\n\n  let {\n    value,\n    onChange,\n    loadOptions,\n    reloadOptionsOnChange = false,\n    Component,\n    className,\n    allowCustomValue,\n    allowEmptyValue,\n    disabled,\n    placeholder,\n    inputMinWidth,\n    inputPlaceholder,\n    autofocus = false,\n    onExpandedChange,\n    noOptionMessageHandler = mapStateToNoOptionsMessage\n  } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const [state, fetchOptions] = useAsyncFn(loadOptions, [loadOptions]);\n  const [Label, labelWidth, expanded, setExpanded] = useExpandableLabel(autofocus, onExpandedChange);\n  const width = inputMinWidth ? Math.max(inputMinWidth, labelWidth) : labelWidth;\n  const styles = useStyles(getSegmentStyles);\n\n  if (!expanded) {\n    const label = isObject(value) ? value.label : value;\n    return /*#__PURE__*/_jsx(Label, {\n      onClick: reloadOptionsOnChange ? undefined : fetchOptions,\n      disabled: disabled,\n      Component: Component || /*#__PURE__*/_jsx(InlineLabel, {\n        className: cx(styles.segment, {\n          [styles.queryPlaceholder]: placeholder !== undefined && !value,\n          [styles.disabled]: disabled\n        }, className),\n        children: label || placeholder\n      })\n    });\n  }\n\n  return /*#__PURE__*/_jsx(SegmentSelect, Object.assign({}, rest, {\n    value: value && !isObject(value) ? {\n      value\n    } : value,\n    placeholder: inputPlaceholder,\n    options: (_state$value = state.value) !== null && _state$value !== void 0 ? _state$value : [],\n    loadOptions: reloadOptionsOnChange ? fetchOptions : undefined,\n    width: width,\n    noOptionsMessage: noOptionMessageHandler(state),\n    allowCustomValue: allowCustomValue,\n    allowEmptyValue: allowEmptyValue,\n    onClickOutside: () => {\n      setExpanded(false);\n    },\n    onChange: item => {\n      setExpanded(false);\n      onChange(item);\n    }\n  }));\n}\n\nfunction mapStateToNoOptionsMessage(state) {\n  if (state.loading) {\n    return 'Loading options...';\n  }\n\n  if (state.error) {\n    return 'Failed to load options';\n  }\n\n  if (!Array.isArray(state.value) || state.value.length === 0) {\n    return 'No options found';\n  }\n\n  return '';\n}","map":{"version":3,"names":["cx","isObject","React","useAsyncFn","useStyles","InlineLabel","SegmentSelect","getSegmentStyles","useExpandableLabel","SegmentAsync","value","onChange","loadOptions","reloadOptionsOnChange","Component","className","allowCustomValue","allowEmptyValue","disabled","placeholder","inputMinWidth","inputPlaceholder","autofocus","onExpandedChange","noOptionMessageHandler","mapStateToNoOptionsMessage","rest","state","fetchOptions","Label","labelWidth","expanded","setExpanded","width","Math","max","styles","label","undefined","segment","queryPlaceholder","item","loading","error","Array","isArray","length"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Segment/SegmentAsync.tsx"],"sourcesContent":["import { cx } from '@emotion/css';\nimport { isObject } from 'lodash';\nimport React, { HTMLProps } from 'react';\nimport { useAsyncFn } from 'react-use';\nimport { AsyncState } from 'react-use/lib/useAsync';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { useStyles } from '../../themes';\nimport { InlineLabel } from '../Forms/InlineLabel';\n\nimport { SegmentSelect } from './SegmentSelect';\nimport { getSegmentStyles } from './styles';\n\nimport { useExpandableLabel, SegmentProps } from '.';\n\nexport interface SegmentAsyncProps<T> extends SegmentProps<T>, Omit<HTMLProps<HTMLDivElement>, 'value' | 'onChange'> {\n  value?: T | SelectableValue<T>;\n  loadOptions: (query?: string) => Promise<Array<SelectableValue<T>>>;\n  /**\n   *  If true options will be reloaded when user changes the value in the input,\n   *  otherwise, options will be loaded when the segment is clicked\n   */\n  reloadOptionsOnChange?: boolean;\n  onChange: (item: SelectableValue<T>) => void;\n  noOptionMessageHandler?: (state: AsyncState<Array<SelectableValue<T>>>) => string;\n  inputMinWidth?: number;\n}\n\nexport function SegmentAsync<T>({\n  value,\n  onChange,\n  loadOptions,\n  reloadOptionsOnChange = false,\n  Component,\n  className,\n  allowCustomValue,\n  allowEmptyValue,\n  disabled,\n  placeholder,\n  inputMinWidth,\n  inputPlaceholder,\n  autofocus = false,\n  onExpandedChange,\n  noOptionMessageHandler = mapStateToNoOptionsMessage,\n  ...rest\n}: React.PropsWithChildren<SegmentAsyncProps<T>>) {\n  const [state, fetchOptions] = useAsyncFn(loadOptions, [loadOptions]);\n  const [Label, labelWidth, expanded, setExpanded] = useExpandableLabel(autofocus, onExpandedChange);\n  const width = inputMinWidth ? Math.max(inputMinWidth, labelWidth) : labelWidth;\n  const styles = useStyles(getSegmentStyles);\n\n  if (!expanded) {\n    const label = isObject(value) ? value.label : value;\n\n    return (\n      <Label\n        onClick={reloadOptionsOnChange ? undefined : fetchOptions}\n        disabled={disabled}\n        Component={\n          Component || (\n            <InlineLabel\n              className={cx(\n                styles.segment,\n                {\n                  [styles.queryPlaceholder]: placeholder !== undefined && !value,\n                  [styles.disabled]: disabled,\n                },\n                className\n              )}\n            >\n              {label || placeholder}\n            </InlineLabel>\n          )\n        }\n      />\n    );\n  }\n\n  return (\n    <SegmentSelect\n      {...rest}\n      value={value && !isObject(value) ? { value } : value}\n      placeholder={inputPlaceholder}\n      options={state.value ?? []}\n      loadOptions={reloadOptionsOnChange ? fetchOptions : undefined}\n      width={width}\n      noOptionsMessage={noOptionMessageHandler(state)}\n      allowCustomValue={allowCustomValue}\n      allowEmptyValue={allowEmptyValue}\n      onClickOutside={() => {\n        setExpanded(false);\n      }}\n      onChange={(item) => {\n        setExpanded(false);\n        onChange(item);\n      }}\n    />\n  );\n}\n\nfunction mapStateToNoOptionsMessage<T>(state: AsyncState<Array<SelectableValue<T>>>): string {\n  if (state.loading) {\n    return 'Loading options...';\n  }\n\n  if (state.error) {\n    return 'Failed to load options';\n  }\n\n  if (!Array.isArray(state.value) || state.value.length === 0) {\n    return 'No options found';\n  }\n\n  return '';\n}\n"],"mappings":";;;;AAAA,SAASA,EAAT,QAAmB,cAAnB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,MAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,WAA3B;AAKA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,gBAAT,QAAiC,UAAjC;AAEA,SAASC,kBAAT,QAAiD,GAAjD;;AAeA,OAAO,SAASC,YAAT,OAiB2C;EAAA;;EAAA,IAjBlB;IAC9BC,KAD8B;IAE9BC,QAF8B;IAG9BC,WAH8B;IAI9BC,qBAAqB,GAAG,KAJM;IAK9BC,SAL8B;IAM9BC,SAN8B;IAO9BC,gBAP8B;IAQ9BC,eAR8B;IAS9BC,QAT8B;IAU9BC,WAV8B;IAW9BC,aAX8B;IAY9BC,gBAZ8B;IAa9BC,SAAS,GAAG,KAbkB;IAc9BC,gBAd8B;IAe9BC,sBAAsB,GAAGC;EAfK,CAiBkB;EAAA,IAD7CC,IAC6C;;EAChD,MAAM,CAACC,KAAD,EAAQC,YAAR,IAAwBzB,UAAU,CAACS,WAAD,EAAc,CAACA,WAAD,CAAd,CAAxC;EACA,MAAM,CAACiB,KAAD,EAAQC,UAAR,EAAoBC,QAApB,EAA8BC,WAA9B,IAA6CxB,kBAAkB,CAACc,SAAD,EAAYC,gBAAZ,CAArE;EACA,MAAMU,KAAK,GAAGb,aAAa,GAAGc,IAAI,CAACC,GAAL,CAASf,aAAT,EAAwBU,UAAxB,CAAH,GAAyCA,UAApE;EACA,MAAMM,MAAM,GAAGhC,SAAS,CAACG,gBAAD,CAAxB;;EAEA,IAAI,CAACwB,QAAL,EAAe;IACb,MAAMM,KAAK,GAAGpC,QAAQ,CAACS,KAAD,CAAR,GAAkBA,KAAK,CAAC2B,KAAxB,GAAgC3B,KAA9C;IAEA,oBACE,KAAC,KAAD;MACE,OAAO,EAAEG,qBAAqB,GAAGyB,SAAH,GAAeV,YAD/C;MAEE,QAAQ,EAAEV,QAFZ;MAGE,SAAS,EACPJ,SAAS,iBACP,KAAC,WAAD;QACE,SAAS,EAAEd,EAAE,CACXoC,MAAM,CAACG,OADI,EAEX;UACE,CAACH,MAAM,CAACI,gBAAR,GAA2BrB,WAAW,KAAKmB,SAAhB,IAA6B,CAAC5B,KAD3D;UAEE,CAAC0B,MAAM,CAAClB,QAAR,GAAmBA;QAFrB,CAFW,EAMXH,SANW,CADf;QAAA,UAUGsB,KAAK,IAAIlB;MAVZ;IALN,EADF;EAsBD;;EAED,oBACE,KAAC,aAAD,oBACMO,IADN;IAEE,KAAK,EAAEhB,KAAK,IAAI,CAACT,QAAQ,CAACS,KAAD,CAAlB,GAA4B;MAAEA;IAAF,CAA5B,GAAwCA,KAFjD;IAGE,WAAW,EAAEW,gBAHf;IAIE,OAAO,kBAAEM,KAAK,CAACjB,KAAR,uDAAiB,EAJ1B;IAKE,WAAW,EAAEG,qBAAqB,GAAGe,YAAH,GAAkBU,SALtD;IAME,KAAK,EAAEL,KANT;IAOE,gBAAgB,EAAET,sBAAsB,CAACG,KAAD,CAP1C;IAQE,gBAAgB,EAAEX,gBARpB;IASE,eAAe,EAAEC,eATnB;IAUE,cAAc,EAAE,MAAM;MACpBe,WAAW,CAAC,KAAD,CAAX;IACD,CAZH;IAaE,QAAQ,EAAGS,IAAD,IAAU;MAClBT,WAAW,CAAC,KAAD,CAAX;MACArB,QAAQ,CAAC8B,IAAD,CAAR;IACD;EAhBH,GADF;AAoBD;;AAED,SAAShB,0BAAT,CAAuCE,KAAvC,EAA6F;EAC3F,IAAIA,KAAK,CAACe,OAAV,EAAmB;IACjB,OAAO,oBAAP;EACD;;EAED,IAAIf,KAAK,CAACgB,KAAV,EAAiB;IACf,OAAO,wBAAP;EACD;;EAED,IAAI,CAACC,KAAK,CAACC,OAAN,CAAclB,KAAK,CAACjB,KAApB,CAAD,IAA+BiB,KAAK,CAACjB,KAAN,CAAYoC,MAAZ,KAAuB,CAA1D,EAA6D;IAC3D,OAAO,kBAAP;EACD;;EAED,OAAO,EAAP;AACD"},"metadata":{},"sourceType":"module"}