{"ast":null,"code":"import { getDefaultRelativeTimeRange, rangeUtil } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { getNextRefIdChar } from 'app/core/utils/query';\nimport { ExpressionDatasourceUID } from 'app/features/expressions/ExpressionDatasource';\nimport { ExpressionQueryType } from 'app/features/expressions/types';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\nimport { EvalFunction } from '../../state/alertDef';\nimport { RuleFormType } from '../types/rule-form';\nimport { getRulesAccess } from './access-control';\nimport { Annotation } from './constants';\nimport { isGrafanaRulesSource } from './datasource';\nimport { arrayToRecord, recordToArray } from './misc';\nimport { isAlertingRulerRule, isGrafanaRulerRule, isRecordingRulerRule } from './rules';\nimport { parseInterval } from './time';\nexport const getDefaultFormValues = () => {\n  const {\n    canCreateGrafanaRules,\n    canCreateCloudRules\n  } = getRulesAccess();\n  return Object.freeze({\n    name: '',\n    labels: [{\n      key: '',\n      value: ''\n    }],\n    annotations: [{\n      key: Annotation.summary,\n      value: ''\n    }, {\n      key: Annotation.description,\n      value: ''\n    }, {\n      key: Annotation.runbookURL,\n      value: ''\n    }],\n    dataSourceName: null,\n    type: canCreateGrafanaRules ? RuleFormType.grafana : canCreateCloudRules ? RuleFormType.cloudAlerting : undefined,\n    // viewers can't create prom alerts\n    group: '',\n    // grafana\n    folder: null,\n    queries: [],\n    condition: '',\n    noDataState: GrafanaAlertStateDecision.NoData,\n    execErrState: GrafanaAlertStateDecision.Alerting,\n    evaluateEvery: '1m',\n    evaluateFor: '5m',\n    // cortex / loki\n    namespace: '',\n    expression: '',\n    forTime: 1,\n    forTimeUnit: 'm'\n  });\n};\nexport function formValuesToRulerRuleDTO(values) {\n  const {\n    name,\n    expression,\n    forTime,\n    forTimeUnit,\n    type\n  } = values;\n\n  if (type === RuleFormType.cloudAlerting) {\n    return {\n      alert: name,\n      for: `${forTime}${forTimeUnit}`,\n      annotations: arrayToRecord(values.annotations || []),\n      labels: arrayToRecord(values.labels || []),\n      expr: expression\n    };\n  } else if (type === RuleFormType.cloudRecording) {\n    return {\n      record: name,\n      labels: arrayToRecord(values.labels || []),\n      expr: expression\n    };\n  }\n\n  throw new Error(`unexpected rule type: ${type}`);\n}\n\nfunction listifyLabelsOrAnnotations(item) {\n  return [...recordToArray(item || {}), {\n    key: '',\n    value: ''\n  }];\n}\n\nexport function formValuesToRulerGrafanaRuleDTO(values) {\n  const {\n    name,\n    condition,\n    noDataState,\n    execErrState,\n    evaluateFor,\n    queries\n  } = values;\n\n  if (condition) {\n    return {\n      grafana_alert: {\n        title: name,\n        condition,\n        no_data_state: noDataState,\n        exec_err_state: execErrState,\n        data: queries\n      },\n      for: evaluateFor,\n      annotations: arrayToRecord(values.annotations || []),\n      labels: arrayToRecord(values.labels || [])\n    };\n  }\n\n  throw new Error('Cannot create rule without specifying alert condition');\n}\nexport function rulerRuleToFormValues(ruleWithLocation) {\n  const {\n    ruleSourceName,\n    namespace,\n    group,\n    rule\n  } = ruleWithLocation;\n  const defaultFormValues = getDefaultFormValues();\n\n  if (isGrafanaRulesSource(ruleSourceName)) {\n    if (isGrafanaRulerRule(rule)) {\n      const ga = rule.grafana_alert;\n      return Object.assign({}, defaultFormValues, {\n        name: ga.title,\n        type: RuleFormType.grafana,\n        group: group.name,\n        evaluateFor: rule.for || '0',\n        evaluateEvery: group.interval || defaultFormValues.evaluateEvery,\n        noDataState: ga.no_data_state,\n        execErrState: ga.exec_err_state,\n        queries: ga.data,\n        condition: ga.condition,\n        annotations: listifyLabelsOrAnnotations(rule.annotations),\n        labels: listifyLabelsOrAnnotations(rule.labels),\n        folder: {\n          title: namespace,\n          id: ga.namespace_id\n        }\n      });\n    } else {\n      throw new Error('Unexpected type of rule for grafana rules source');\n    }\n  } else {\n    if (isAlertingRulerRule(rule)) {\n      const [forTime, forTimeUnit] = rule.for ? parseInterval(rule.for) : [defaultFormValues.forTime, defaultFormValues.forTimeUnit];\n      return Object.assign({}, defaultFormValues, {\n        name: rule.alert,\n        type: RuleFormType.cloudAlerting,\n        dataSourceName: ruleSourceName,\n        namespace,\n        group: group.name,\n        expression: rule.expr,\n        forTime,\n        forTimeUnit,\n        annotations: listifyLabelsOrAnnotations(rule.annotations),\n        labels: listifyLabelsOrAnnotations(rule.labels)\n      });\n    } else if (isRecordingRulerRule(rule)) {\n      return Object.assign({}, defaultFormValues, {\n        name: rule.record,\n        type: RuleFormType.cloudRecording,\n        dataSourceName: ruleSourceName,\n        namespace,\n        group: group.name,\n        expression: rule.expr,\n        labels: listifyLabelsOrAnnotations(rule.labels)\n      });\n    } else {\n      throw new Error('Unexpected type of rule for cloud rules source');\n    }\n  }\n}\nexport const getDefaultQueries = () => {\n  const dataSource = getDataSourceSrv().getInstanceSettings('default');\n\n  if (!dataSource) {\n    return [getDefaultExpression('A')];\n  }\n\n  const relativeTimeRange = getDefaultRelativeTimeRange();\n  return [{\n    refId: 'A',\n    datasourceUid: dataSource.uid,\n    queryType: '',\n    relativeTimeRange,\n    model: {\n      refId: 'A',\n      hide: false\n    }\n  }, getDefaultExpression('B')];\n};\n\nconst getDefaultExpression = refId => {\n  const model = {\n    refId,\n    hide: false,\n    type: ExpressionQueryType.classic,\n    datasource: {\n      uid: ExpressionDatasourceUID,\n      type: ExpressionDatasourceRef.type\n    },\n    conditions: [{\n      type: 'query',\n      evaluator: {\n        params: [3],\n        type: EvalFunction.IsAbove\n      },\n      operator: {\n        type: 'and'\n      },\n      query: {\n        params: ['A']\n      },\n      reducer: {\n        params: [],\n        type: 'last'\n      }\n    }]\n  };\n  return {\n    refId,\n    datasourceUid: ExpressionDatasourceUID,\n    queryType: '',\n    model\n  };\n};\n\nconst dataQueriesToGrafanaQueries = async (queries, relativeTimeRange, scopedVars, panelDataSourceRef, maxDataPoints, minInterval) => {\n  const result = [];\n\n  for (const target of queries) {\n    var _target$datasource;\n\n    const datasource = await getDataSourceSrv().get((_target$datasource = target.datasource) !== null && _target$datasource !== void 0 && _target$datasource.uid ? target.datasource : panelDataSourceRef);\n    const dsRef = {\n      uid: datasource.uid,\n      type: datasource.type\n    };\n    const range = rangeUtil.relativeToTimeRange(relativeTimeRange);\n    const {\n      interval,\n      intervalMs\n    } = getIntervals(range, minInterval !== null && minInterval !== void 0 ? minInterval : datasource.interval, maxDataPoints);\n    const queryVariables = Object.assign({\n      __interval: {\n        text: interval,\n        value: interval\n      },\n      __interval_ms: {\n        text: intervalMs,\n        value: intervalMs\n      }\n    }, scopedVars);\n    const interpolatedTarget = datasource.interpolateVariablesInQueries ? await datasource.interpolateVariablesInQueries([target], queryVariables)[0] : target; // expressions\n\n    if (dsRef.uid === ExpressionDatasourceUID) {\n      const newQuery = {\n        refId: interpolatedTarget.refId,\n        queryType: '',\n        relativeTimeRange,\n        datasourceUid: ExpressionDatasourceUID,\n        model: interpolatedTarget\n      };\n      result.push(newQuery); // queries\n    } else {\n      const datasourceSettings = getDataSourceSrv().getInstanceSettings(dsRef);\n\n      if (datasourceSettings && datasourceSettings.meta.alerting) {\n        var _interpolatedTarget$q;\n\n        const newQuery = {\n          refId: interpolatedTarget.refId,\n          queryType: (_interpolatedTarget$q = interpolatedTarget.queryType) !== null && _interpolatedTarget$q !== void 0 ? _interpolatedTarget$q : '',\n          relativeTimeRange,\n          datasourceUid: datasourceSettings.uid,\n          model: Object.assign({}, interpolatedTarget, {\n            maxDataPoints,\n            intervalMs\n          })\n        };\n        result.push(newQuery);\n      }\n    }\n  }\n\n  return result;\n};\n\nexport const panelToRuleFormValues = async (panel, dashboard) => {\n  var _panel$datasource, _panel$maxDataPoints, _panel$interval;\n\n  const {\n    targets\n  } = panel;\n\n  if (!panel.id || !dashboard.uid) {\n    return undefined;\n  }\n\n  const relativeTimeRange = rangeUtil.timeRangeToRelative(rangeUtil.convertRawToRange(dashboard.time));\n  const queries = await dataQueriesToGrafanaQueries(targets, relativeTimeRange, panel.scopedVars || {}, (_panel$datasource = panel.datasource) !== null && _panel$datasource !== void 0 ? _panel$datasource : undefined, (_panel$maxDataPoints = panel.maxDataPoints) !== null && _panel$maxDataPoints !== void 0 ? _panel$maxDataPoints : undefined, (_panel$interval = panel.interval) !== null && _panel$interval !== void 0 ? _panel$interval : undefined); // if no alerting capable queries are found, can't create a rule\n\n  if (!queries.length || !queries.find(query => query.datasourceUid !== ExpressionDatasourceUID)) {\n    return undefined;\n  }\n\n  if (!queries.find(query => query.datasourceUid === ExpressionDatasourceUID)) {\n    queries.push(getDefaultExpression(getNextRefIdChar(queries.map(query => query.model))));\n  }\n\n  const {\n    folderId,\n    folderTitle\n  } = dashboard.meta;\n  const formValues = {\n    type: RuleFormType.grafana,\n    folder: folderId && folderTitle ? {\n      id: folderId,\n      title: folderTitle\n    } : undefined,\n    queries,\n    name: panel.title,\n    condition: queries[queries.length - 1].refId,\n    annotations: [{\n      key: Annotation.dashboardUID,\n      value: dashboard.uid\n    }, {\n      key: Annotation.panelID,\n      value: String(panel.id)\n    }]\n  };\n  return formValues;\n};\nexport function getIntervals(range, lowLimit, resolution) {\n  if (!resolution) {\n    if (lowLimit && rangeUtil.intervalToMs(lowLimit) > 1000) {\n      return {\n        interval: lowLimit,\n        intervalMs: rangeUtil.intervalToMs(lowLimit)\n      };\n    }\n\n    return {\n      interval: '1s',\n      intervalMs: 1000\n    };\n  }\n\n  return rangeUtil.calculateInterval(range, resolution, lowLimit);\n}","map":{"version":3,"names":["getDefaultRelativeTimeRange","rangeUtil","getDataSourceSrv","ExpressionDatasourceRef","getNextRefIdChar","ExpressionDatasourceUID","ExpressionQueryType","GrafanaAlertStateDecision","EvalFunction","RuleFormType","getRulesAccess","Annotation","isGrafanaRulesSource","arrayToRecord","recordToArray","isAlertingRulerRule","isGrafanaRulerRule","isRecordingRulerRule","parseInterval","getDefaultFormValues","canCreateGrafanaRules","canCreateCloudRules","Object","freeze","name","labels","key","value","annotations","summary","description","runbookURL","dataSourceName","type","grafana","cloudAlerting","undefined","group","folder","queries","condition","noDataState","NoData","execErrState","Alerting","evaluateEvery","evaluateFor","namespace","expression","forTime","forTimeUnit","formValuesToRulerRuleDTO","values","alert","for","expr","cloudRecording","record","Error","listifyLabelsOrAnnotations","item","formValuesToRulerGrafanaRuleDTO","grafana_alert","title","no_data_state","exec_err_state","data","rulerRuleToFormValues","ruleWithLocation","ruleSourceName","rule","defaultFormValues","ga","interval","id","namespace_id","getDefaultQueries","dataSource","getInstanceSettings","getDefaultExpression","relativeTimeRange","refId","datasourceUid","uid","queryType","model","hide","classic","datasource","conditions","evaluator","params","IsAbove","operator","query","reducer","dataQueriesToGrafanaQueries","scopedVars","panelDataSourceRef","maxDataPoints","minInterval","result","target","get","dsRef","range","relativeToTimeRange","intervalMs","getIntervals","queryVariables","__interval","text","__interval_ms","interpolatedTarget","interpolateVariablesInQueries","newQuery","push","datasourceSettings","meta","alerting","panelToRuleFormValues","panel","dashboard","targets","timeRangeToRelative","convertRawToRange","time","length","find","map","folderId","folderTitle","formValues","dashboardUID","panelID","String","lowLimit","resolution","intervalToMs","calculateInterval"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/utils/rule-form.ts"],"sourcesContent":["import {\n  DataQuery,\n  DataSourceRef,\n  getDefaultRelativeTimeRange,\n  IntervalValues,\n  rangeUtil,\n  RelativeTimeRange,\n  ScopedVars,\n  TimeRange,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { getNextRefIdChar } from 'app/core/utils/query';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { ExpressionDatasourceUID } from 'app/features/expressions/ExpressionDatasource';\nimport { ExpressionQuery, ExpressionQueryType } from 'app/features/expressions/types';\nimport { RuleWithLocation } from 'app/types/unified-alerting';\nimport {\n  AlertQuery,\n  Annotations,\n  GrafanaAlertStateDecision,\n  Labels,\n  PostableRuleGrafanaRuleDTO,\n  RulerRuleDTO,\n} from 'app/types/unified-alerting-dto';\n\nimport { EvalFunction } from '../../state/alertDef';\nimport { RuleFormType, RuleFormValues } from '../types/rule-form';\n\nimport { getRulesAccess } from './access-control';\nimport { Annotation } from './constants';\nimport { isGrafanaRulesSource } from './datasource';\nimport { arrayToRecord, recordToArray } from './misc';\nimport { isAlertingRulerRule, isGrafanaRulerRule, isRecordingRulerRule } from './rules';\nimport { parseInterval } from './time';\n\nexport const getDefaultFormValues = (): RuleFormValues => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = getRulesAccess();\n\n  return Object.freeze({\n    name: '',\n    labels: [{ key: '', value: '' }],\n    annotations: [\n      { key: Annotation.summary, value: '' },\n      { key: Annotation.description, value: '' },\n      { key: Annotation.runbookURL, value: '' },\n    ],\n    dataSourceName: null,\n    type: canCreateGrafanaRules ? RuleFormType.grafana : canCreateCloudRules ? RuleFormType.cloudAlerting : undefined, // viewers can't create prom alerts\n    group: '',\n\n    // grafana\n    folder: null,\n    queries: [],\n    condition: '',\n    noDataState: GrafanaAlertStateDecision.NoData,\n    execErrState: GrafanaAlertStateDecision.Alerting,\n    evaluateEvery: '1m',\n    evaluateFor: '5m',\n\n    // cortex / loki\n    namespace: '',\n    expression: '',\n    forTime: 1,\n    forTimeUnit: 'm',\n  });\n};\n\nexport function formValuesToRulerRuleDTO(values: RuleFormValues): RulerRuleDTO {\n  const { name, expression, forTime, forTimeUnit, type } = values;\n  if (type === RuleFormType.cloudAlerting) {\n    return {\n      alert: name,\n      for: `${forTime}${forTimeUnit}`,\n      annotations: arrayToRecord(values.annotations || []),\n      labels: arrayToRecord(values.labels || []),\n      expr: expression,\n    };\n  } else if (type === RuleFormType.cloudRecording) {\n    return {\n      record: name,\n      labels: arrayToRecord(values.labels || []),\n      expr: expression,\n    };\n  }\n  throw new Error(`unexpected rule type: ${type}`);\n}\n\nfunction listifyLabelsOrAnnotations(item: Labels | Annotations | undefined): Array<{ key: string; value: string }> {\n  return [...recordToArray(item || {}), { key: '', value: '' }];\n}\n\nexport function formValuesToRulerGrafanaRuleDTO(values: RuleFormValues): PostableRuleGrafanaRuleDTO {\n  const { name, condition, noDataState, execErrState, evaluateFor, queries } = values;\n  if (condition) {\n    return {\n      grafana_alert: {\n        title: name,\n        condition,\n        no_data_state: noDataState,\n        exec_err_state: execErrState,\n        data: queries,\n      },\n      for: evaluateFor,\n      annotations: arrayToRecord(values.annotations || []),\n      labels: arrayToRecord(values.labels || []),\n    };\n  }\n  throw new Error('Cannot create rule without specifying alert condition');\n}\n\nexport function rulerRuleToFormValues(ruleWithLocation: RuleWithLocation): RuleFormValues {\n  const { ruleSourceName, namespace, group, rule } = ruleWithLocation;\n\n  const defaultFormValues = getDefaultFormValues();\n  if (isGrafanaRulesSource(ruleSourceName)) {\n    if (isGrafanaRulerRule(rule)) {\n      const ga = rule.grafana_alert;\n      return {\n        ...defaultFormValues,\n        name: ga.title,\n        type: RuleFormType.grafana,\n        group: group.name,\n        evaluateFor: rule.for || '0',\n        evaluateEvery: group.interval || defaultFormValues.evaluateEvery,\n        noDataState: ga.no_data_state,\n        execErrState: ga.exec_err_state,\n        queries: ga.data,\n        condition: ga.condition,\n        annotations: listifyLabelsOrAnnotations(rule.annotations),\n        labels: listifyLabelsOrAnnotations(rule.labels),\n        folder: { title: namespace, id: ga.namespace_id },\n      };\n    } else {\n      throw new Error('Unexpected type of rule for grafana rules source');\n    }\n  } else {\n    if (isAlertingRulerRule(rule)) {\n      const [forTime, forTimeUnit] = rule.for\n        ? parseInterval(rule.for)\n        : [defaultFormValues.forTime, defaultFormValues.forTimeUnit];\n      return {\n        ...defaultFormValues,\n        name: rule.alert,\n        type: RuleFormType.cloudAlerting,\n        dataSourceName: ruleSourceName,\n        namespace,\n        group: group.name,\n        expression: rule.expr,\n        forTime,\n        forTimeUnit,\n        annotations: listifyLabelsOrAnnotations(rule.annotations),\n        labels: listifyLabelsOrAnnotations(rule.labels),\n      };\n    } else if (isRecordingRulerRule(rule)) {\n      return {\n        ...defaultFormValues,\n        name: rule.record,\n        type: RuleFormType.cloudRecording,\n        dataSourceName: ruleSourceName,\n        namespace,\n        group: group.name,\n        expression: rule.expr,\n        labels: listifyLabelsOrAnnotations(rule.labels),\n      };\n    } else {\n      throw new Error('Unexpected type of rule for cloud rules source');\n    }\n  }\n}\n\nexport const getDefaultQueries = (): AlertQuery[] => {\n  const dataSource = getDataSourceSrv().getInstanceSettings('default');\n\n  if (!dataSource) {\n    return [getDefaultExpression('A')];\n  }\n  const relativeTimeRange = getDefaultRelativeTimeRange();\n\n  return [\n    {\n      refId: 'A',\n      datasourceUid: dataSource.uid,\n      queryType: '',\n      relativeTimeRange,\n      model: {\n        refId: 'A',\n        hide: false,\n      },\n    },\n    getDefaultExpression('B'),\n  ];\n};\n\nconst getDefaultExpression = (refId: string): AlertQuery => {\n  const model: ExpressionQuery = {\n    refId,\n    hide: false,\n    type: ExpressionQueryType.classic,\n    datasource: {\n      uid: ExpressionDatasourceUID,\n      type: ExpressionDatasourceRef.type,\n    },\n    conditions: [\n      {\n        type: 'query',\n        evaluator: {\n          params: [3],\n          type: EvalFunction.IsAbove,\n        },\n        operator: {\n          type: 'and',\n        },\n        query: {\n          params: ['A'],\n        },\n        reducer: {\n          params: [],\n          type: 'last',\n        },\n      },\n    ],\n  };\n\n  return {\n    refId,\n    datasourceUid: ExpressionDatasourceUID,\n    queryType: '',\n    model,\n  };\n};\n\nconst dataQueriesToGrafanaQueries = async (\n  queries: DataQuery[],\n  relativeTimeRange: RelativeTimeRange,\n  scopedVars: ScopedVars | {},\n  panelDataSourceRef?: DataSourceRef,\n  maxDataPoints?: number,\n  minInterval?: string\n): Promise<AlertQuery[]> => {\n  const result: AlertQuery[] = [];\n\n  for (const target of queries) {\n    const datasource = await getDataSourceSrv().get(target.datasource?.uid ? target.datasource : panelDataSourceRef);\n    const dsRef = { uid: datasource.uid, type: datasource.type };\n\n    const range = rangeUtil.relativeToTimeRange(relativeTimeRange);\n    const { interval, intervalMs } = getIntervals(range, minInterval ?? datasource.interval, maxDataPoints);\n    const queryVariables = {\n      __interval: { text: interval, value: interval },\n      __interval_ms: { text: intervalMs, value: intervalMs },\n      ...scopedVars,\n    };\n\n    const interpolatedTarget = datasource.interpolateVariablesInQueries\n      ? await datasource.interpolateVariablesInQueries([target], queryVariables)[0]\n      : target;\n\n    // expressions\n    if (dsRef.uid === ExpressionDatasourceUID) {\n      const newQuery: AlertQuery = {\n        refId: interpolatedTarget.refId,\n        queryType: '',\n        relativeTimeRange,\n        datasourceUid: ExpressionDatasourceUID,\n        model: interpolatedTarget,\n      };\n      result.push(newQuery);\n      // queries\n    } else {\n      const datasourceSettings = getDataSourceSrv().getInstanceSettings(dsRef);\n      if (datasourceSettings && datasourceSettings.meta.alerting) {\n        const newQuery: AlertQuery = {\n          refId: interpolatedTarget.refId,\n          queryType: interpolatedTarget.queryType ?? '',\n          relativeTimeRange,\n          datasourceUid: datasourceSettings.uid,\n          model: {\n            ...interpolatedTarget,\n            maxDataPoints,\n            intervalMs,\n          },\n        };\n        result.push(newQuery);\n      }\n    }\n  }\n  return result;\n};\n\nexport const panelToRuleFormValues = async (\n  panel: PanelModel,\n  dashboard: DashboardModel\n): Promise<Partial<RuleFormValues> | undefined> => {\n  const { targets } = panel;\n  if (!panel.id || !dashboard.uid) {\n    return undefined;\n  }\n\n  const relativeTimeRange = rangeUtil.timeRangeToRelative(rangeUtil.convertRawToRange(dashboard.time));\n  const queries = await dataQueriesToGrafanaQueries(\n    targets,\n    relativeTimeRange,\n    panel.scopedVars || {},\n    panel.datasource ?? undefined,\n    panel.maxDataPoints ?? undefined,\n    panel.interval ?? undefined\n  );\n  // if no alerting capable queries are found, can't create a rule\n  if (!queries.length || !queries.find((query) => query.datasourceUid !== ExpressionDatasourceUID)) {\n    return undefined;\n  }\n\n  if (!queries.find((query) => query.datasourceUid === ExpressionDatasourceUID)) {\n    queries.push(getDefaultExpression(getNextRefIdChar(queries.map((query) => query.model))));\n  }\n\n  const { folderId, folderTitle } = dashboard.meta;\n\n  const formValues = {\n    type: RuleFormType.grafana,\n    folder:\n      folderId && folderTitle\n        ? {\n            id: folderId,\n            title: folderTitle,\n          }\n        : undefined,\n    queries,\n    name: panel.title,\n    condition: queries[queries.length - 1].refId,\n    annotations: [\n      {\n        key: Annotation.dashboardUID,\n        value: dashboard.uid,\n      },\n      {\n        key: Annotation.panelID,\n        value: String(panel.id),\n      },\n    ],\n  };\n  return formValues;\n};\n\nexport function getIntervals(range: TimeRange, lowLimit?: string, resolution?: number): IntervalValues {\n  if (!resolution) {\n    if (lowLimit && rangeUtil.intervalToMs(lowLimit) > 1000) {\n      return {\n        interval: lowLimit,\n        intervalMs: rangeUtil.intervalToMs(lowLimit),\n      };\n    }\n    return { interval: '1s', intervalMs: 1000 };\n  }\n\n  return rangeUtil.calculateInterval(range, resolution, lowLimit);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}