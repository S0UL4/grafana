{"ast":null,"code":"import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { locationService } from '@grafana/runtime';\nimport { ErrorBoundaryAlert } from '@grafana/ui';\nimport { ExploreId } from 'app/types/explore';\nimport { Branding } from '../../core/components/Branding/Branding';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { ExploreActions } from './ExploreActions';\nimport { ExplorePaneContainer } from './ExplorePaneContainer';\nimport { lastSavedUrl, resetExploreAction, richHistoryUpdatedAction } from './state/main';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    navModel: getNavModel(state.navIndex, 'explore'),\n    exploreState: state.explore\n  };\n};\n\nconst mapDispatchToProps = {\n  resetExploreAction,\n  richHistoryUpdatedAction\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nclass WrapperUnconnected extends PureComponent {\n  componentWillUnmount() {\n    this.props.resetExploreAction({});\n  }\n\n  componentDidMount() {\n    lastSavedUrl.left = undefined;\n    lastSavedUrl.right = undefined; // timeSrv (which is used internally) on init reads `from` and `to` param from the URL and updates itself\n    // using those value regardless of what is passed to the init method.\n    // The updated value is then used by Explore to get the range for each pane.\n    // This means that if `from` and `to` parameters are present in the URL,\n    // it would be impossible to change the time range in Explore.\n    // We are only doing this on mount for 2 reasons:\n    // 1: Doing it on update means we'll enter a render loop.\n    // 2: when parsing time in Explore (before feeding it to timeSrv) we make sure `from` is before `to` inside\n    //    each pane state in order to not trigger un URL update from timeSrv.\n\n    const searchParams = locationService.getSearchObject();\n\n    if (searchParams.from || searchParams.to) {\n      locationService.partial({\n        from: undefined,\n        to: undefined\n      }, true);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    var _this$props$exploreSt, _this$props$exploreSt2, _this$props$exploreSt3, _this$props$exploreSt4;\n\n    const {\n      left,\n      right\n    } = this.props.queryParams;\n    const hasSplit = Boolean(left) && Boolean(right);\n    const datasourceTitle = hasSplit ? `${(_this$props$exploreSt = this.props.exploreState.left.datasourceInstance) === null || _this$props$exploreSt === void 0 ? void 0 : _this$props$exploreSt.name} | ${(_this$props$exploreSt2 = this.props.exploreState.right) === null || _this$props$exploreSt2 === void 0 ? void 0 : (_this$props$exploreSt3 = _this$props$exploreSt2.datasourceInstance) === null || _this$props$exploreSt3 === void 0 ? void 0 : _this$props$exploreSt3.name}` : `${(_this$props$exploreSt4 = this.props.exploreState.left.datasourceInstance) === null || _this$props$exploreSt4 === void 0 ? void 0 : _this$props$exploreSt4.name}`;\n    const documentTitle = `${this.props.navModel.main.text} - ${datasourceTitle} - ${Branding.AppTitle}`;\n    document.title = documentTitle;\n  }\n\n  render() {\n    const {\n      left,\n      right\n    } = this.props.queryParams;\n    const hasSplit = Boolean(left) && Boolean(right);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"page-scrollbar-wrapper\",\n      children: [/*#__PURE__*/_jsx(ExploreActions, {\n        exploreIdLeft: ExploreId.left,\n        exploreIdRight: ExploreId.right\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"explore-wrapper\",\n        children: [/*#__PURE__*/_jsx(ErrorBoundaryAlert, {\n          style: \"page\",\n          children: /*#__PURE__*/_jsx(ExplorePaneContainer, {\n            split: hasSplit,\n            exploreId: ExploreId.left,\n            urlQuery: left\n          })\n        }), hasSplit && /*#__PURE__*/_jsx(ErrorBoundaryAlert, {\n          style: \"page\",\n          children: /*#__PURE__*/_jsx(ExplorePaneContainer, {\n            split: hasSplit,\n            exploreId: ExploreId.right,\n            urlQuery: right\n          })\n        })]\n      })]\n    });\n  }\n\n}\n\nconst Wrapper = connector(WrapperUnconnected);\nexport default Wrapper;","map":{"version":3,"names":["React","PureComponent","connect","locationService","ErrorBoundaryAlert","ExploreId","Branding","getNavModel","ExploreActions","ExplorePaneContainer","lastSavedUrl","resetExploreAction","richHistoryUpdatedAction","mapStateToProps","state","navModel","navIndex","exploreState","explore","mapDispatchToProps","connector","WrapperUnconnected","componentWillUnmount","props","componentDidMount","left","undefined","right","searchParams","getSearchObject","from","to","partial","componentDidUpdate","prevProps","queryParams","hasSplit","Boolean","datasourceTitle","datasourceInstance","name","documentTitle","main","text","AppTitle","document","title","render","Wrapper"],"sources":["/home/soula/grafana/public/app/features/explore/Wrapper.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { locationService } from '@grafana/runtime';\nimport { ErrorBoundaryAlert } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { StoreState } from 'app/types';\nimport { ExploreId, ExploreQueryParams } from 'app/types/explore';\n\nimport { Branding } from '../../core/components/Branding/Branding';\nimport { getNavModel } from '../../core/selectors/navModel';\n\nimport { ExploreActions } from './ExploreActions';\nimport { ExplorePaneContainer } from './ExplorePaneContainer';\nimport { lastSavedUrl, resetExploreAction, richHistoryUpdatedAction } from './state/main';\n\ninterface RouteProps extends GrafanaRouteComponentProps<{}, ExploreQueryParams> {}\ninterface OwnProps {}\n\nconst mapStateToProps = (state: StoreState) => {\n  return {\n    navModel: getNavModel(state.navIndex, 'explore'),\n    exploreState: state.explore,\n  };\n};\n\nconst mapDispatchToProps = {\n  resetExploreAction,\n  richHistoryUpdatedAction,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & RouteProps & ConnectedProps<typeof connector>;\nclass WrapperUnconnected extends PureComponent<Props> {\n  componentWillUnmount() {\n    this.props.resetExploreAction({});\n  }\n\n  componentDidMount() {\n    lastSavedUrl.left = undefined;\n    lastSavedUrl.right = undefined;\n\n    // timeSrv (which is used internally) on init reads `from` and `to` param from the URL and updates itself\n    // using those value regardless of what is passed to the init method.\n    // The updated value is then used by Explore to get the range for each pane.\n    // This means that if `from` and `to` parameters are present in the URL,\n    // it would be impossible to change the time range in Explore.\n    // We are only doing this on mount for 2 reasons:\n    // 1: Doing it on update means we'll enter a render loop.\n    // 2: when parsing time in Explore (before feeding it to timeSrv) we make sure `from` is before `to` inside\n    //    each pane state in order to not trigger un URL update from timeSrv.\n    const searchParams = locationService.getSearchObject();\n    if (searchParams.from || searchParams.to) {\n      locationService.partial({ from: undefined, to: undefined }, true);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { left, right } = this.props.queryParams;\n    const hasSplit = Boolean(left) && Boolean(right);\n    const datasourceTitle = hasSplit\n      ? `${this.props.exploreState.left.datasourceInstance?.name} | ${this.props.exploreState.right?.datasourceInstance?.name}`\n      : `${this.props.exploreState.left.datasourceInstance?.name}`;\n    const documentTitle = `${this.props.navModel.main.text} - ${datasourceTitle} - ${Branding.AppTitle}`;\n    document.title = documentTitle;\n  }\n\n  render() {\n    const { left, right } = this.props.queryParams;\n    const hasSplit = Boolean(left) && Boolean(right);\n\n    return (\n      <div className=\"page-scrollbar-wrapper\">\n        <ExploreActions exploreIdLeft={ExploreId.left} exploreIdRight={ExploreId.right} />\n        <div className=\"explore-wrapper\">\n          <ErrorBoundaryAlert style=\"page\">\n            <ExplorePaneContainer split={hasSplit} exploreId={ExploreId.left} urlQuery={left} />\n          </ErrorBoundaryAlert>\n          {hasSplit && (\n            <ErrorBoundaryAlert style=\"page\">\n              <ExplorePaneContainer split={hasSplit} exploreId={ExploreId.right} urlQuery={right} />\n            </ErrorBoundaryAlert>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Wrapper = connector(WrapperUnconnected);\n\nexport default Wrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}