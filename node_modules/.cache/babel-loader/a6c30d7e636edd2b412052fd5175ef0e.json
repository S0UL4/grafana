{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { DataSourceApi, makeClassES5Compatible, parseLiveChannelAddress, getDataSourceRef, dataFrameToJSON } from '@grafana/data';\nimport { config } from '../config';\nimport { getBackendSrv, getDataSourceSrv, getGrafanaLiveSrv, StreamingFrameAction } from '../services';\nimport { toDataQueryResponse } from './queryResponse';\n/**\n * @internal\n */\n\nexport const ExpressionDatasourceRef = Object.freeze({\n  type: '__expr__',\n  uid: '__expr__',\n  name: 'Expression'\n});\n/**\n * @internal\n */\n\nexport function isExpressionReference(ref) {\n  var _type;\n\n  if (!ref) {\n    return false;\n  }\n\n  const v = (_type = ref.type) !== null && _type !== void 0 ? _type : ref;\n  return v === ExpressionDatasourceRef.type || v === '-100'; // -100 was a legacy accident that should be removed\n}\nexport class HealthCheckError extends Error {\n  constructor(message, details) {\n    super(message);\n\n    _defineProperty(this, \"details\", void 0);\n\n    this.details = details;\n    this.name = 'HealthCheckError';\n  }\n\n}\n/**\n * Describes the current health status of a data source plugin.\n *\n * @public\n */\n\nexport let HealthStatus;\n/**\n * Describes the details in the payload returned when checking the health of a data source\n * plugin.\n *\n * If the 'message' key exists, this will be displayed in the error message in DataSourceSettingsPage\n * If the 'verboseMessage' key exists, this will be displayed in the expandable details in the error message in DataSourceSettingsPage\n *\n * @public\n */\n\n(function (HealthStatus) {\n  HealthStatus[\"Unknown\"] = \"UNKNOWN\";\n  HealthStatus[\"OK\"] = \"OK\";\n  HealthStatus[\"Error\"] = \"ERROR\";\n})(HealthStatus || (HealthStatus = {}));\n\n/**\n * Extend this class to implement a data source plugin that is depending on the Grafana\n * backend API.\n *\n * @public\n */\nclass DataSourceWithBackend extends DataSourceApi {\n  constructor(instanceSettings) {\n    super(instanceSettings);\n\n    _defineProperty(this, \"streamOptionsProvider\", standardStreamOptionsProvider);\n  }\n  /**\n   * Ideally final -- any other implementation may not work as expected\n   */\n\n\n  query(request) {\n    const {\n      intervalMs,\n      maxDataPoints,\n      range,\n      requestId\n    } = request;\n    let targets = request.targets;\n\n    if (this.filterQuery) {\n      targets = targets.filter(q => this.filterQuery(q));\n    }\n\n    const queries = targets.map(q => {\n      let datasource = this.getRef();\n      let datasourceId = this.id;\n\n      if (isExpressionReference(q.datasource)) {\n        return Object.assign({}, q, {\n          datasource: ExpressionDatasourceRef\n        });\n      }\n\n      if (q.datasource) {\n        var _ds$rawRef;\n\n        const ds = getDataSourceSrv().getInstanceSettings(q.datasource, request.scopedVars);\n\n        if (!ds) {\n          throw new Error(`Unknown Datasource: ${JSON.stringify(q.datasource)}`);\n        }\n\n        datasource = (_ds$rawRef = ds.rawRef) !== null && _ds$rawRef !== void 0 ? _ds$rawRef : getDataSourceRef(ds);\n        datasourceId = ds.id;\n      }\n\n      return Object.assign({}, this.applyTemplateVariables(q, request.scopedVars), {\n        datasource,\n        datasourceId,\n        // deprecated!\n        intervalMs,\n        maxDataPoints\n      });\n    }); // Return early if no queries exist\n\n    if (!queries.length) {\n      return of({\n        data: []\n      });\n    }\n\n    const body = {\n      queries\n    };\n\n    if (range) {\n      body.range = range;\n      body.from = range.from.valueOf().toString();\n      body.to = range.to.valueOf().toString();\n    }\n\n    if (config.featureToggles.queryOverLive) {\n      return getGrafanaLiveSrv().getQueryData({\n        request,\n        body\n      });\n    }\n\n    return getBackendSrv().fetch({\n      url: '/api/ds/query',\n      method: 'POST',\n      data: body,\n      requestId\n    }).pipe(switchMap(raw => {\n      var _rsp$data;\n\n      const rsp = toDataQueryResponse(raw, queries); // Check if any response should subscribe to a live stream\n\n      if ((_rsp$data = rsp.data) !== null && _rsp$data !== void 0 && _rsp$data.length && rsp.data.find(f => {\n        var _f$meta;\n\n        return (_f$meta = f.meta) === null || _f$meta === void 0 ? void 0 : _f$meta.channel;\n      })) {\n        return toStreamingDataResponse(rsp, request, this.streamOptionsProvider);\n      }\n\n      return of(rsp);\n    }), catchError(err => {\n      return of(toDataQueryResponse(err));\n    }));\n  }\n  /**\n   * Apply template variables for explore\n   */\n\n\n  interpolateVariablesInQueries(queries, scopedVars) {\n    return queries.map(q => this.applyTemplateVariables(q, scopedVars));\n  }\n  /**\n   * Override to apply template variables.  The result is usually also `TQuery`, but sometimes this can\n   * be used to modify the query structure before sending to the backend.\n   *\n   * NOTE: if you do modify the structure or use template variables, alerting queries may not work\n   * as expected\n   *\n   * @virtual\n   */\n\n\n  applyTemplateVariables(query, scopedVars) {\n    return query;\n  }\n  /**\n   * Optionally override the streaming behavior\n   */\n\n\n  /**\n   * Make a GET request to the datasource resource path\n   */\n  async getResource(path, params) {\n    return getBackendSrv().get(`/api/datasources/${this.id}/resources/${path}`, params);\n  }\n  /**\n   * Send a POST request to the datasource resource path\n   */\n\n\n  async postResource(path, body) {\n    return getBackendSrv().post(`/api/datasources/${this.id}/resources/${path}`, Object.assign({}, body));\n  }\n  /**\n   * Run the datasource healthcheck\n   */\n\n\n  async callHealthCheck() {\n    return getBackendSrv().request({\n      method: 'GET',\n      url: `/api/datasources/${this.id}/health`,\n      showErrorAlert: false\n    }).then(v => {\n      return v;\n    }).catch(err => {\n      return err.data;\n    });\n  }\n  /**\n   * Checks the plugin health\n   * see public/app/features/datasources/state/actions.ts for what needs to be returned here\n   */\n\n\n  async testDatasource() {\n    return this.callHealthCheck().then(res => {\n      if (res.status === HealthStatus.OK) {\n        return {\n          status: 'success',\n          message: res.message\n        };\n      }\n\n      throw new HealthCheckError(res.message, res.details);\n    });\n  }\n\n}\n/**\n * @internal exported for tests\n */\n\n\nexport function toStreamingDataResponse(rsp, req, getter) {\n  const live = getGrafanaLiveSrv();\n\n  if (!live) {\n    return of(rsp); // add warning?\n  }\n\n  const staticdata = [];\n  const streams = [];\n\n  for (const f of rsp.data) {\n    var _f$meta2;\n\n    const addr = parseLiveChannelAddress((_f$meta2 = f.meta) === null || _f$meta2 === void 0 ? void 0 : _f$meta2.channel);\n\n    if (addr) {\n      const frame = f;\n      streams.push(live.getDataStream({\n        addr,\n        buffer: getter(req, frame),\n        frame: dataFrameToJSON(f)\n      }));\n    } else {\n      staticdata.push(f);\n    }\n  }\n\n  if (staticdata.length) {\n    streams.push(of(Object.assign({}, rsp, {\n      data: staticdata\n    })));\n  }\n\n  if (streams.length === 1) {\n    return streams[0]; // avoid merge wrapper\n  }\n\n  return merge(...streams);\n}\n/**\n * This allows data sources to customize the streaming connection query\n *\n * @public\n */\n\n/**\n * @public\n */\nexport const standardStreamOptionsProvider = (request, frame) => {\n  var _request$maxDataPoint, _request$rangeRaw;\n\n  const opts = {\n    maxLength: (_request$maxDataPoint = request.maxDataPoints) !== null && _request$maxDataPoint !== void 0 ? _request$maxDataPoint : 500,\n    action: StreamingFrameAction.Append\n  }; // For recent queries, clamp to the current time range\n\n  if (((_request$rangeRaw = request.rangeRaw) === null || _request$rangeRaw === void 0 ? void 0 : _request$rangeRaw.to) === 'now') {\n    opts.maxDelta = request.range.to.valueOf() - request.range.from.valueOf();\n  }\n\n  return opts;\n}; //@ts-ignore\n\nDataSourceWithBackend = makeClassES5Compatible(DataSourceWithBackend);\nexport { DataSourceWithBackend };","map":{"version":3,"names":["merge","of","catchError","switchMap","DataSourceApi","makeClassES5Compatible","parseLiveChannelAddress","getDataSourceRef","dataFrameToJSON","config","getBackendSrv","getDataSourceSrv","getGrafanaLiveSrv","StreamingFrameAction","toDataQueryResponse","ExpressionDatasourceRef","Object","freeze","type","uid","name","isExpressionReference","ref","v","HealthCheckError","Error","constructor","message","details","HealthStatus","DataSourceWithBackend","instanceSettings","standardStreamOptionsProvider","query","request","intervalMs","maxDataPoints","range","requestId","targets","filterQuery","filter","q","queries","map","datasource","getRef","datasourceId","id","ds","getInstanceSettings","scopedVars","JSON","stringify","rawRef","applyTemplateVariables","length","data","body","from","valueOf","toString","to","featureToggles","queryOverLive","getQueryData","fetch","url","method","pipe","raw","rsp","find","f","meta","channel","toStreamingDataResponse","streamOptionsProvider","err","interpolateVariablesInQueries","getResource","path","params","get","postResource","post","callHealthCheck","showErrorAlert","then","catch","testDatasource","res","status","OK","req","getter","live","staticdata","streams","addr","frame","push","getDataStream","buffer","opts","maxLength","action","Append","rangeRaw","maxDelta"],"sources":["/home/soula/grafana/packages/grafana-runtime/src/utils/DataSourceWithBackend.ts"],"sourcesContent":["import { merge, Observable, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport {\n  DataSourceApi,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataQuery,\n  DataSourceJsonData,\n  ScopedVars,\n  makeClassES5Compatible,\n  DataFrame,\n  parseLiveChannelAddress,\n  getDataSourceRef,\n  DataSourceRef,\n  dataFrameToJSON,\n} from '@grafana/data';\n\nimport { config } from '../config';\nimport {\n  getBackendSrv,\n  getDataSourceSrv,\n  getGrafanaLiveSrv,\n  StreamingFrameOptions,\n  StreamingFrameAction,\n} from '../services';\n\nimport { BackendDataSourceResponse, toDataQueryResponse } from './queryResponse';\n\n/**\n * @internal\n */\nexport const ExpressionDatasourceRef = Object.freeze({\n  type: '__expr__',\n  uid: '__expr__',\n  name: 'Expression',\n});\n\n/**\n * @internal\n */\nexport function isExpressionReference(ref?: DataSourceRef | string | null): boolean {\n  if (!ref) {\n    return false;\n  }\n  const v = (ref as any).type ?? ref;\n  return v === ExpressionDatasourceRef.type || v === '-100'; // -100 was a legacy accident that should be removed\n}\n\nexport class HealthCheckError extends Error {\n  details: HealthCheckResultDetails;\n\n  constructor(message: string, details: HealthCheckResultDetails) {\n    super(message);\n    this.details = details;\n    this.name = 'HealthCheckError';\n  }\n}\n\n/**\n * Describes the current health status of a data source plugin.\n *\n * @public\n */\nexport enum HealthStatus {\n  Unknown = 'UNKNOWN',\n  OK = 'OK',\n  Error = 'ERROR',\n}\n\n/**\n * Describes the details in the payload returned when checking the health of a data source\n * plugin.\n *\n * If the 'message' key exists, this will be displayed in the error message in DataSourceSettingsPage\n * If the 'verboseMessage' key exists, this will be displayed in the expandable details in the error message in DataSourceSettingsPage\n *\n * @public\n */\nexport type HealthCheckResultDetails = Record<string, any> | undefined;\n\n/**\n * Describes the payload returned when checking the health of a data source\n * plugin.\n *\n * @public\n */\nexport interface HealthCheckResult {\n  status: HealthStatus;\n  message: string;\n  details: HealthCheckResultDetails;\n}\n\n/**\n * Extend this class to implement a data source plugin that is depending on the Grafana\n * backend API.\n *\n * @public\n */\nclass DataSourceWithBackend<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> extends DataSourceApi<TQuery, TOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<TOptions>) {\n    super(instanceSettings);\n  }\n\n  /**\n   * Ideally final -- any other implementation may not work as expected\n   */\n  query(request: DataQueryRequest<TQuery>): Observable<DataQueryResponse> {\n    const { intervalMs, maxDataPoints, range, requestId } = request;\n    let targets = request.targets;\n\n    if (this.filterQuery) {\n      targets = targets.filter((q) => this.filterQuery!(q));\n    }\n\n    const queries = targets.map((q) => {\n      let datasource = this.getRef();\n      let datasourceId = this.id;\n\n      if (isExpressionReference(q.datasource)) {\n        return {\n          ...q,\n          datasource: ExpressionDatasourceRef,\n        };\n      }\n\n      if (q.datasource) {\n        const ds = getDataSourceSrv().getInstanceSettings(q.datasource, request.scopedVars);\n\n        if (!ds) {\n          throw new Error(`Unknown Datasource: ${JSON.stringify(q.datasource)}`);\n        }\n\n        datasource = ds.rawRef ?? getDataSourceRef(ds);\n        datasourceId = ds.id;\n      }\n\n      return {\n        ...this.applyTemplateVariables(q, request.scopedVars),\n        datasource,\n        datasourceId, // deprecated!\n        intervalMs,\n        maxDataPoints,\n      };\n    });\n\n    // Return early if no queries exist\n    if (!queries.length) {\n      return of({ data: [] });\n    }\n\n    const body: any = { queries };\n\n    if (range) {\n      body.range = range;\n      body.from = range.from.valueOf().toString();\n      body.to = range.to.valueOf().toString();\n    }\n\n    if (config.featureToggles.queryOverLive) {\n      return getGrafanaLiveSrv().getQueryData({\n        request,\n        body,\n      });\n    }\n\n    return getBackendSrv()\n      .fetch<BackendDataSourceResponse>({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: body,\n        requestId,\n      })\n      .pipe(\n        switchMap((raw) => {\n          const rsp = toDataQueryResponse(raw, queries as DataQuery[]);\n          // Check if any response should subscribe to a live stream\n          if (rsp.data?.length && rsp.data.find((f: DataFrame) => f.meta?.channel)) {\n            return toStreamingDataResponse(rsp, request, this.streamOptionsProvider);\n          }\n          return of(rsp);\n        }),\n        catchError((err) => {\n          return of(toDataQueryResponse(err));\n        })\n      );\n  }\n\n  /**\n   * Apply template variables for explore\n   */\n  interpolateVariablesInQueries(queries: TQuery[], scopedVars: ScopedVars | {}): TQuery[] {\n    return queries.map((q) => this.applyTemplateVariables(q, scopedVars) as TQuery);\n  }\n\n  /**\n   * Override to apply template variables.  The result is usually also `TQuery`, but sometimes this can\n   * be used to modify the query structure before sending to the backend.\n   *\n   * NOTE: if you do modify the structure or use template variables, alerting queries may not work\n   * as expected\n   *\n   * @virtual\n   */\n  applyTemplateVariables(query: TQuery, scopedVars: ScopedVars): Record<string, any> {\n    return query;\n  }\n\n  /**\n   * Optionally override the streaming behavior\n   */\n  streamOptionsProvider: StreamOptionsProvider<TQuery> = standardStreamOptionsProvider;\n\n  /**\n   * Make a GET request to the datasource resource path\n   */\n  async getResource(path: string, params?: any): Promise<any> {\n    return getBackendSrv().get(`/api/datasources/${this.id}/resources/${path}`, params);\n  }\n\n  /**\n   * Send a POST request to the datasource resource path\n   */\n  async postResource(path: string, body?: any): Promise<any> {\n    return getBackendSrv().post(`/api/datasources/${this.id}/resources/${path}`, { ...body });\n  }\n\n  /**\n   * Run the datasource healthcheck\n   */\n  async callHealthCheck(): Promise<HealthCheckResult> {\n    return getBackendSrv()\n      .request({ method: 'GET', url: `/api/datasources/${this.id}/health`, showErrorAlert: false })\n      .then((v) => {\n        return v as HealthCheckResult;\n      })\n      .catch((err) => {\n        return err.data as HealthCheckResult;\n      });\n  }\n\n  /**\n   * Checks the plugin health\n   * see public/app/features/datasources/state/actions.ts for what needs to be returned here\n   */\n  async testDatasource(): Promise<any> {\n    return this.callHealthCheck().then((res) => {\n      if (res.status === HealthStatus.OK) {\n        return {\n          status: 'success',\n          message: res.message,\n        };\n      }\n\n      throw new HealthCheckError(res.message, res.details);\n    });\n  }\n}\n\n/**\n * @internal exported for tests\n */\nexport function toStreamingDataResponse<TQuery extends DataQuery = DataQuery>(\n  rsp: DataQueryResponse,\n  req: DataQueryRequest<TQuery>,\n  getter: (req: DataQueryRequest<TQuery>, frame: DataFrame) => Partial<StreamingFrameOptions>\n): Observable<DataQueryResponse> {\n  const live = getGrafanaLiveSrv();\n  if (!live) {\n    return of(rsp); // add warning?\n  }\n\n  const staticdata: DataFrame[] = [];\n  const streams: Array<Observable<DataQueryResponse>> = [];\n  for (const f of rsp.data) {\n    const addr = parseLiveChannelAddress(f.meta?.channel);\n    if (addr) {\n      const frame = f as DataFrame;\n      streams.push(\n        live.getDataStream({\n          addr,\n          buffer: getter(req, frame),\n          frame: dataFrameToJSON(f),\n        })\n      );\n    } else {\n      staticdata.push(f);\n    }\n  }\n  if (staticdata.length) {\n    streams.push(of({ ...rsp, data: staticdata }));\n  }\n  if (streams.length === 1) {\n    return streams[0]; // avoid merge wrapper\n  }\n  return merge(...streams);\n}\n\n/**\n * This allows data sources to customize the streaming connection query\n *\n * @public\n */\nexport type StreamOptionsProvider<TQuery extends DataQuery = DataQuery> = (\n  request: DataQueryRequest<TQuery>,\n  frame: DataFrame\n) => Partial<StreamingFrameOptions>;\n\n/**\n * @public\n */\nexport const standardStreamOptionsProvider: StreamOptionsProvider = (request: DataQueryRequest, frame: DataFrame) => {\n  const opts: Partial<StreamingFrameOptions> = {\n    maxLength: request.maxDataPoints ?? 500,\n    action: StreamingFrameAction.Append,\n  };\n\n  // For recent queries, clamp to the current time range\n  if (request.rangeRaw?.to === 'now') {\n    opts.maxDelta = request.range.to.valueOf() - request.range.from.valueOf();\n  }\n  return opts;\n};\n\n//@ts-ignore\nDataSourceWithBackend = makeClassES5Compatible(DataSourceWithBackend);\n\nexport { DataSourceWithBackend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}