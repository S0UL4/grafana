{"ast":null,"code":"import { css } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst transitionDuration = 500; // We add a bit of delay to the transition as another perf optimisation. As at the start we need to render\n// quite a bit of new rows, if we start transition at the same time there can be frame rate drop. This gives time\n// for react to first render them and then do the animation.\n\nconst transitionDelay = 100;\nconst getStyles = memoizeOne(() => {\n  return {\n    logsEnter: css`\n      label: logsEnter;\n      position: absolute;\n      opacity: 0;\n      height: auto;\n      width: 100%;\n    `,\n    logsEnterActive: css`\n      label: logsEnterActive;\n      opacity: 1;\n      transition: opacity ${transitionDuration}ms ease-out ${transitionDelay}ms;\n    `,\n    logsExit: css`\n      label: logsExit;\n      position: absolute;\n      opacity: 1;\n      height: auto;\n      width: 100%;\n    `,\n    logsExitActive: css`\n      label: logsExitActive;\n      opacity: 0;\n      transition: opacity ${transitionDuration}ms ease-out ${transitionDelay}ms;\n    `\n  };\n});\n\n/**\n * Cross fade transition component that is tied a bit too much to the logs containers so not very useful elsewhere\n * right now.\n */\nexport function LogsCrossFadeTransition(props) {\n  const {\n    visible,\n    children\n  } = props;\n  const styles = getStyles();\n  return /*#__PURE__*/_jsx(CSSTransition, {\n    in: visible,\n    mountOnEnter: true,\n    unmountOnExit: true,\n    timeout: transitionDuration + transitionDelay,\n    classNames: {\n      enter: styles.logsEnter,\n      enterActive: styles.logsEnterActive,\n      exit: styles.logsExit,\n      exitActive: styles.logsExitActive\n    },\n    children: children\n  });\n}","map":{"version":3,"names":["css","memoizeOne","React","CSSTransition","transitionDuration","transitionDelay","getStyles","logsEnter","logsEnterActive","logsExit","logsExitActive","LogsCrossFadeTransition","props","visible","children","styles","enter","enterActive","exit","exitActive"],"sources":["/home/soula/grafana/public/app/features/explore/utils/LogsCrossFadeTransition.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport React from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nconst transitionDuration = 500;\n// We add a bit of delay to the transition as another perf optimisation. As at the start we need to render\n// quite a bit of new rows, if we start transition at the same time there can be frame rate drop. This gives time\n// for react to first render them and then do the animation.\nconst transitionDelay = 100;\n\nconst getStyles = memoizeOne(() => {\n  return {\n    logsEnter: css`\n      label: logsEnter;\n      position: absolute;\n      opacity: 0;\n      height: auto;\n      width: 100%;\n    `,\n    logsEnterActive: css`\n      label: logsEnterActive;\n      opacity: 1;\n      transition: opacity ${transitionDuration}ms ease-out ${transitionDelay}ms;\n    `,\n    logsExit: css`\n      label: logsExit;\n      position: absolute;\n      opacity: 1;\n      height: auto;\n      width: 100%;\n    `,\n    logsExitActive: css`\n      label: logsExitActive;\n      opacity: 0;\n      transition: opacity ${transitionDuration}ms ease-out ${transitionDelay}ms;\n    `,\n  };\n});\n\ntype Props = {\n  children: React.ReactNode;\n  visible: boolean;\n};\n\n/**\n * Cross fade transition component that is tied a bit too much to the logs containers so not very useful elsewhere\n * right now.\n */\nexport function LogsCrossFadeTransition(props: Props) {\n  const { visible, children } = props;\n  const styles = getStyles();\n  return (\n    <CSSTransition\n      in={visible}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      timeout={transitionDuration + transitionDelay}\n      classNames={{\n        enter: styles.logsEnter,\n        enterActive: styles.logsEnterActive,\n        exit: styles.logsExit,\n        exitActive: styles.logsExitActive,\n      }}\n    >\n      {children}\n    </CSSTransition>\n  );\n}\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,wBAA9B;;AAEA,MAAMC,kBAAkB,GAAG,GAA3B,C,CACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,GAAxB;AAEA,MAAMC,SAAS,GAAGL,UAAU,CAAC,MAAM;EACjC,OAAO;IACLM,SAAS,EAAEP,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA,KAPS;IAQLQ,eAAe,EAAER,GAAI;AACzB;AACA;AACA,4BAA4BI,kBAAmB,eAAcC,eAAgB;AAC7E,KAZS;IAaLI,QAAQ,EAAET,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA,KAnBS;IAoBLU,cAAc,EAAEV,GAAI;AACxB;AACA;AACA,4BAA4BI,kBAAmB,eAAcC,eAAgB;AAC7E;EAxBS,CAAP;AA0BD,CA3B2B,CAA5B;;AAkCA;AACA;AACA;AACA;AACA,OAAO,SAASM,uBAAT,CAAiCC,KAAjC,EAA+C;EACpD,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAwBF,KAA9B;EACA,MAAMG,MAAM,GAAGT,SAAS,EAAxB;EACA,oBACE,KAAC,aAAD;IACE,EAAE,EAAEO,OADN;IAEE,YAAY,EAAE,IAFhB;IAGE,aAAa,EAAE,IAHjB;IAIE,OAAO,EAAET,kBAAkB,GAAGC,eAJhC;IAKE,UAAU,EAAE;MACVW,KAAK,EAAED,MAAM,CAACR,SADJ;MAEVU,WAAW,EAAEF,MAAM,CAACP,eAFV;MAGVU,IAAI,EAAEH,MAAM,CAACN,QAHH;MAIVU,UAAU,EAAEJ,MAAM,CAACL;IAJT,CALd;IAAA,UAYGI;EAZH,EADF;AAgBD"},"metadata":{},"sourceType":"module"}