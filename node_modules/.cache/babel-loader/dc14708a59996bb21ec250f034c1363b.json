{"ast":null,"code":"import { FieldColorModeId } from '@grafana/data';\nimport { GraphDrawStyle, GraphGradientMode, LegendDisplayMode, LineInterpolation, StackingMode } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\nexport class TimeSeriesSuggestionsSupplier {\n  getSuggestionsForData(builder) {\n    const {\n      dataSummary\n    } = builder;\n\n    if (!dataSummary.hasTimeField || !dataSummary.hasNumberField || dataSummary.rowCountTotal < 2) {\n      return;\n    }\n\n    const list = builder.getListAppender({\n      name: SuggestionName.LineChart,\n      pluginId: 'timeseries',\n      options: {\n        legend: {}\n      },\n      fieldConfig: {\n        defaults: {\n          custom: {}\n        },\n        overrides: []\n      },\n      cardOptions: {\n        previewModifier: s => {\n          var _s$fieldConfig, _s$fieldConfig$defaul;\n\n          s.options.legend.displayMode = LegendDisplayMode.Hidden;\n\n          if (((_s$fieldConfig = s.fieldConfig) === null || _s$fieldConfig === void 0 ? void 0 : (_s$fieldConfig$defaul = _s$fieldConfig.defaults.custom) === null || _s$fieldConfig$defaul === void 0 ? void 0 : _s$fieldConfig$defaul.drawStyle) !== GraphDrawStyle.Bars) {\n            var _lineWidth;\n\n            s.fieldConfig.defaults.custom.lineWidth = Math.max((_lineWidth = s.fieldConfig.defaults.custom.lineWidth) !== null && _lineWidth !== void 0 ? _lineWidth : 1, 2);\n          }\n        }\n      }\n    });\n    const maxBarsCount = 100;\n    list.append({\n      name: SuggestionName.LineChart\n    });\n\n    if (dataSummary.rowCountMax < 200) {\n      list.append({\n        name: SuggestionName.LineChartSmooth,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              lineInterpolation: LineInterpolation.Smooth\n            }\n          },\n          overrides: []\n        }\n      });\n    } // Single series suggestions\n\n\n    if (dataSummary.numberFieldCount === 1) {\n      list.append({\n        name: SuggestionName.AreaChart,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              fillOpacity: 25\n            }\n          },\n          overrides: []\n        }\n      });\n      list.append({\n        name: SuggestionName.LineChartGradientColorScheme,\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: FieldColorModeId.ContinuousGrYlRd\n            },\n            custom: {\n              gradientMode: GraphGradientMode.Scheme,\n              lineInterpolation: LineInterpolation.Smooth,\n              lineWidth: 3,\n              fillOpacity: 20\n            }\n          },\n          overrides: []\n        }\n      });\n\n      if (dataSummary.rowCountMax < maxBarsCount) {\n        list.append({\n          name: SuggestionName.BarChart,\n          fieldConfig: {\n            defaults: {\n              custom: {\n                drawStyle: GraphDrawStyle.Bars,\n                fillOpacity: 100,\n                lineWidth: 1,\n                gradientMode: GraphGradientMode.Hue\n              }\n            },\n            overrides: []\n          }\n        });\n        list.append({\n          name: SuggestionName.BarChartGradientColorScheme,\n          fieldConfig: {\n            defaults: {\n              color: {\n                mode: FieldColorModeId.ContinuousGrYlRd\n              },\n              custom: {\n                drawStyle: GraphDrawStyle.Bars,\n                fillOpacity: 90,\n                lineWidth: 1,\n                gradientMode: GraphGradientMode.Scheme\n              }\n            },\n            overrides: []\n          }\n        });\n      }\n\n      return;\n    } // Multiple series suggestions\n\n\n    list.append({\n      name: SuggestionName.AreaChartStacked,\n      fieldConfig: {\n        defaults: {\n          custom: {\n            fillOpacity: 25,\n            stacking: {\n              mode: StackingMode.Normal,\n              group: 'A'\n            }\n          }\n        },\n        overrides: []\n      }\n    });\n    list.append({\n      name: SuggestionName.AreaChartStackedPercent,\n      fieldConfig: {\n        defaults: {\n          custom: {\n            fillOpacity: 25,\n            stacking: {\n              mode: StackingMode.Percent,\n              group: 'A'\n            }\n          }\n        },\n        overrides: []\n      }\n    });\n\n    if (dataSummary.rowCountTotal / dataSummary.numberFieldCount < maxBarsCount) {\n      list.append({\n        name: SuggestionName.BarChartStacked,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              drawStyle: GraphDrawStyle.Bars,\n              fillOpacity: 100,\n              lineWidth: 1,\n              gradientMode: GraphGradientMode.Hue,\n              stacking: {\n                mode: StackingMode.Normal,\n                group: 'A'\n              }\n            }\n          },\n          overrides: []\n        }\n      });\n      list.append({\n        name: SuggestionName.BarChartStackedPercent,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              drawStyle: GraphDrawStyle.Bars,\n              fillOpacity: 100,\n              lineWidth: 1,\n              gradientMode: GraphGradientMode.Hue,\n              stacking: {\n                mode: StackingMode.Percent,\n                group: 'A'\n              }\n            }\n          },\n          overrides: []\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"names":["FieldColorModeId","GraphDrawStyle","GraphGradientMode","LegendDisplayMode","LineInterpolation","StackingMode","SuggestionName","TimeSeriesSuggestionsSupplier","getSuggestionsForData","builder","dataSummary","hasTimeField","hasNumberField","rowCountTotal","list","getListAppender","name","LineChart","pluginId","options","legend","fieldConfig","defaults","custom","overrides","cardOptions","previewModifier","s","displayMode","Hidden","drawStyle","Bars","lineWidth","Math","max","maxBarsCount","append","rowCountMax","LineChartSmooth","lineInterpolation","Smooth","numberFieldCount","AreaChart","fillOpacity","LineChartGradientColorScheme","color","mode","ContinuousGrYlRd","gradientMode","Scheme","BarChart","Hue","BarChartGradientColorScheme","AreaChartStacked","stacking","Normal","group","AreaChartStackedPercent","Percent","BarChartStacked","BarChartStackedPercent"],"sources":["/home/soula/grafana/public/app/plugins/panel/timeseries/suggestions.ts"],"sourcesContent":["import { FieldColorModeId, VisualizationSuggestionsBuilder } from '@grafana/data';\nimport {\n  GraphDrawStyle,\n  GraphFieldConfig,\n  GraphGradientMode,\n  LegendDisplayMode,\n  LineInterpolation,\n  StackingMode,\n} from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { TimeSeriesOptions } from './types';\n\nexport class TimeSeriesSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (!dataSummary.hasTimeField || !dataSummary.hasNumberField || dataSummary.rowCountTotal < 2) {\n      return;\n    }\n\n    const list = builder.getListAppender<TimeSeriesOptions, GraphFieldConfig>({\n      name: SuggestionName.LineChart,\n      pluginId: 'timeseries',\n      options: {\n        legend: {} as any,\n      },\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          s.options!.legend.displayMode = LegendDisplayMode.Hidden;\n\n          if (s.fieldConfig?.defaults.custom?.drawStyle !== GraphDrawStyle.Bars) {\n            s.fieldConfig!.defaults.custom!.lineWidth = Math.max(s.fieldConfig!.defaults.custom!.lineWidth ?? 1, 2);\n          }\n        },\n      },\n    });\n\n    const maxBarsCount = 100;\n\n    list.append({\n      name: SuggestionName.LineChart,\n    });\n\n    if (dataSummary.rowCountMax < 200) {\n      list.append({\n        name: SuggestionName.LineChartSmooth,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              lineInterpolation: LineInterpolation.Smooth,\n            },\n          },\n          overrides: [],\n        },\n      });\n    }\n\n    // Single series suggestions\n    if (dataSummary.numberFieldCount === 1) {\n      list.append({\n        name: SuggestionName.AreaChart,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              fillOpacity: 25,\n            },\n          },\n          overrides: [],\n        },\n      });\n\n      list.append({\n        name: SuggestionName.LineChartGradientColorScheme,\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: FieldColorModeId.ContinuousGrYlRd,\n            },\n            custom: {\n              gradientMode: GraphGradientMode.Scheme,\n              lineInterpolation: LineInterpolation.Smooth,\n              lineWidth: 3,\n              fillOpacity: 20,\n            },\n          },\n          overrides: [],\n        },\n      });\n\n      if (dataSummary.rowCountMax < maxBarsCount) {\n        list.append({\n          name: SuggestionName.BarChart,\n          fieldConfig: {\n            defaults: {\n              custom: {\n                drawStyle: GraphDrawStyle.Bars,\n                fillOpacity: 100,\n                lineWidth: 1,\n                gradientMode: GraphGradientMode.Hue,\n              },\n            },\n            overrides: [],\n          },\n        });\n\n        list.append({\n          name: SuggestionName.BarChartGradientColorScheme,\n          fieldConfig: {\n            defaults: {\n              color: {\n                mode: FieldColorModeId.ContinuousGrYlRd,\n              },\n              custom: {\n                drawStyle: GraphDrawStyle.Bars,\n                fillOpacity: 90,\n                lineWidth: 1,\n                gradientMode: GraphGradientMode.Scheme,\n              },\n            },\n            overrides: [],\n          },\n        });\n      }\n\n      return;\n    }\n\n    // Multiple series suggestions\n\n    list.append({\n      name: SuggestionName.AreaChartStacked,\n      fieldConfig: {\n        defaults: {\n          custom: {\n            fillOpacity: 25,\n            stacking: {\n              mode: StackingMode.Normal,\n              group: 'A',\n            },\n          },\n        },\n        overrides: [],\n      },\n    });\n\n    list.append({\n      name: SuggestionName.AreaChartStackedPercent,\n      fieldConfig: {\n        defaults: {\n          custom: {\n            fillOpacity: 25,\n            stacking: {\n              mode: StackingMode.Percent,\n              group: 'A',\n            },\n          },\n        },\n        overrides: [],\n      },\n    });\n\n    if (dataSummary.rowCountTotal / dataSummary.numberFieldCount < maxBarsCount) {\n      list.append({\n        name: SuggestionName.BarChartStacked,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              drawStyle: GraphDrawStyle.Bars,\n              fillOpacity: 100,\n              lineWidth: 1,\n              gradientMode: GraphGradientMode.Hue,\n              stacking: {\n                mode: StackingMode.Normal,\n                group: 'A',\n              },\n            },\n          },\n          overrides: [],\n        },\n      });\n\n      list.append({\n        name: SuggestionName.BarChartStackedPercent,\n        fieldConfig: {\n          defaults: {\n            custom: {\n              drawStyle: GraphDrawStyle.Bars,\n              fillOpacity: 100,\n              lineWidth: 1,\n              gradientMode: GraphGradientMode.Hue,\n              stacking: {\n                mode: StackingMode.Percent,\n                group: 'A',\n              },\n            },\n          },\n          overrides: [],\n        },\n      });\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,gBAAT,QAAkE,eAAlE;AACA,SACEC,cADF,EAGEC,iBAHF,EAIEC,iBAJF,EAKEC,iBALF,EAMEC,YANF,QAOO,iBAPP;AAQA,SAASC,cAAT,QAA+B,uBAA/B;AAIA,OAAO,MAAMC,6BAAN,CAAoC;EACzCC,qBAAqB,CAACC,OAAD,EAA2C;IAC9D,MAAM;MAAEC;IAAF,IAAkBD,OAAxB;;IAEA,IAAI,CAACC,WAAW,CAACC,YAAb,IAA6B,CAACD,WAAW,CAACE,cAA1C,IAA4DF,WAAW,CAACG,aAAZ,GAA4B,CAA5F,EAA+F;MAC7F;IACD;;IAED,MAAMC,IAAI,GAAGL,OAAO,CAACM,eAAR,CAA6D;MACxEC,IAAI,EAAEV,cAAc,CAACW,SADmD;MAExEC,QAAQ,EAAE,YAF8D;MAGxEC,OAAO,EAAE;QACPC,MAAM,EAAE;MADD,CAH+D;MAMxEC,WAAW,EAAE;QACXC,QAAQ,EAAE;UACRC,MAAM,EAAE;QADA,CADC;QAIXC,SAAS,EAAE;MAJA,CAN2D;MAYxEC,WAAW,EAAE;QACXC,eAAe,EAAGC,CAAD,IAAO;UAAA;;UACtBA,CAAC,CAACR,OAAF,CAAWC,MAAX,CAAkBQ,WAAlB,GAAgCzB,iBAAiB,CAAC0B,MAAlD;;UAEA,IAAI,mBAAAF,CAAC,CAACN,WAAF,2FAAeC,QAAf,CAAwBC,MAAxB,gFAAgCO,SAAhC,MAA8C7B,cAAc,CAAC8B,IAAjE,EAAuE;YAAA;;YACrEJ,CAAC,CAACN,WAAF,CAAeC,QAAf,CAAwBC,MAAxB,CAAgCS,SAAhC,GAA4CC,IAAI,CAACC,GAAL,eAASP,CAAC,CAACN,WAAF,CAAeC,QAAf,CAAwBC,MAAxB,CAAgCS,SAAzC,mDAAsD,CAAtD,EAAyD,CAAzD,CAA5C;UACD;QACF;MAPU;IAZ2D,CAA7D,CAAb;IAuBA,MAAMG,YAAY,GAAG,GAArB;IAEArB,IAAI,CAACsB,MAAL,CAAY;MACVpB,IAAI,EAAEV,cAAc,CAACW;IADX,CAAZ;;IAIA,IAAIP,WAAW,CAAC2B,WAAZ,GAA0B,GAA9B,EAAmC;MACjCvB,IAAI,CAACsB,MAAL,CAAY;QACVpB,IAAI,EAAEV,cAAc,CAACgC,eADX;QAEVjB,WAAW,EAAE;UACXC,QAAQ,EAAE;YACRC,MAAM,EAAE;cACNgB,iBAAiB,EAAEnC,iBAAiB,CAACoC;YAD/B;UADA,CADC;UAMXhB,SAAS,EAAE;QANA;MAFH,CAAZ;IAWD,CAhD6D,CAkD9D;;;IACA,IAAId,WAAW,CAAC+B,gBAAZ,KAAiC,CAArC,EAAwC;MACtC3B,IAAI,CAACsB,MAAL,CAAY;QACVpB,IAAI,EAAEV,cAAc,CAACoC,SADX;QAEVrB,WAAW,EAAE;UACXC,QAAQ,EAAE;YACRC,MAAM,EAAE;cACNoB,WAAW,EAAE;YADP;UADA,CADC;UAMXnB,SAAS,EAAE;QANA;MAFH,CAAZ;MAYAV,IAAI,CAACsB,MAAL,CAAY;QACVpB,IAAI,EAAEV,cAAc,CAACsC,4BADX;QAEVvB,WAAW,EAAE;UACXC,QAAQ,EAAE;YACRuB,KAAK,EAAE;cACLC,IAAI,EAAE9C,gBAAgB,CAAC+C;YADlB,CADC;YAIRxB,MAAM,EAAE;cACNyB,YAAY,EAAE9C,iBAAiB,CAAC+C,MAD1B;cAENV,iBAAiB,EAAEnC,iBAAiB,CAACoC,MAF/B;cAGNR,SAAS,EAAE,CAHL;cAINW,WAAW,EAAE;YAJP;UAJA,CADC;UAYXnB,SAAS,EAAE;QAZA;MAFH,CAAZ;;MAkBA,IAAId,WAAW,CAAC2B,WAAZ,GAA0BF,YAA9B,EAA4C;QAC1CrB,IAAI,CAACsB,MAAL,CAAY;UACVpB,IAAI,EAAEV,cAAc,CAAC4C,QADX;UAEV7B,WAAW,EAAE;YACXC,QAAQ,EAAE;cACRC,MAAM,EAAE;gBACNO,SAAS,EAAE7B,cAAc,CAAC8B,IADpB;gBAENY,WAAW,EAAE,GAFP;gBAGNX,SAAS,EAAE,CAHL;gBAINgB,YAAY,EAAE9C,iBAAiB,CAACiD;cAJ1B;YADA,CADC;YASX3B,SAAS,EAAE;UATA;QAFH,CAAZ;QAeAV,IAAI,CAACsB,MAAL,CAAY;UACVpB,IAAI,EAAEV,cAAc,CAAC8C,2BADX;UAEV/B,WAAW,EAAE;YACXC,QAAQ,EAAE;cACRuB,KAAK,EAAE;gBACLC,IAAI,EAAE9C,gBAAgB,CAAC+C;cADlB,CADC;cAIRxB,MAAM,EAAE;gBACNO,SAAS,EAAE7B,cAAc,CAAC8B,IADpB;gBAENY,WAAW,EAAE,EAFP;gBAGNX,SAAS,EAAE,CAHL;gBAINgB,YAAY,EAAE9C,iBAAiB,CAAC+C;cAJ1B;YAJA,CADC;YAYXzB,SAAS,EAAE;UAZA;QAFH,CAAZ;MAiBD;;MAED;IACD,CAtH6D,CAwH9D;;;IAEAV,IAAI,CAACsB,MAAL,CAAY;MACVpB,IAAI,EAAEV,cAAc,CAAC+C,gBADX;MAEVhC,WAAW,EAAE;QACXC,QAAQ,EAAE;UACRC,MAAM,EAAE;YACNoB,WAAW,EAAE,EADP;YAENW,QAAQ,EAAE;cACRR,IAAI,EAAEzC,YAAY,CAACkD,MADX;cAERC,KAAK,EAAE;YAFC;UAFJ;QADA,CADC;QAUXhC,SAAS,EAAE;MAVA;IAFH,CAAZ;IAgBAV,IAAI,CAACsB,MAAL,CAAY;MACVpB,IAAI,EAAEV,cAAc,CAACmD,uBADX;MAEVpC,WAAW,EAAE;QACXC,QAAQ,EAAE;UACRC,MAAM,EAAE;YACNoB,WAAW,EAAE,EADP;YAENW,QAAQ,EAAE;cACRR,IAAI,EAAEzC,YAAY,CAACqD,OADX;cAERF,KAAK,EAAE;YAFC;UAFJ;QADA,CADC;QAUXhC,SAAS,EAAE;MAVA;IAFH,CAAZ;;IAgBA,IAAId,WAAW,CAACG,aAAZ,GAA4BH,WAAW,CAAC+B,gBAAxC,GAA2DN,YAA/D,EAA6E;MAC3ErB,IAAI,CAACsB,MAAL,CAAY;QACVpB,IAAI,EAAEV,cAAc,CAACqD,eADX;QAEVtC,WAAW,EAAE;UACXC,QAAQ,EAAE;YACRC,MAAM,EAAE;cACNO,SAAS,EAAE7B,cAAc,CAAC8B,IADpB;cAENY,WAAW,EAAE,GAFP;cAGNX,SAAS,EAAE,CAHL;cAINgB,YAAY,EAAE9C,iBAAiB,CAACiD,GAJ1B;cAKNG,QAAQ,EAAE;gBACRR,IAAI,EAAEzC,YAAY,CAACkD,MADX;gBAERC,KAAK,EAAE;cAFC;YALJ;UADA,CADC;UAaXhC,SAAS,EAAE;QAbA;MAFH,CAAZ;MAmBAV,IAAI,CAACsB,MAAL,CAAY;QACVpB,IAAI,EAAEV,cAAc,CAACsD,sBADX;QAEVvC,WAAW,EAAE;UACXC,QAAQ,EAAE;YACRC,MAAM,EAAE;cACNO,SAAS,EAAE7B,cAAc,CAAC8B,IADpB;cAENY,WAAW,EAAE,GAFP;cAGNX,SAAS,EAAE,CAHL;cAINgB,YAAY,EAAE9C,iBAAiB,CAACiD,GAJ1B;cAKNG,QAAQ,EAAE;gBACRR,IAAI,EAAEzC,YAAY,CAACqD,OADX;gBAERF,KAAK,EAAE;cAFC;YALJ;UADA,CADC;UAaXhC,SAAS,EAAE;QAbA;MAFH,CAAZ;IAkBD;EACF;;AAlMwC"},"metadata":{},"sourceType":"module"}