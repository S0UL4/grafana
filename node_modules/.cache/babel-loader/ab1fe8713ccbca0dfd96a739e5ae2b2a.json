{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { cloneDeep } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { getAngularLoader } from '@grafana/runtime';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class PluginSettings extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"element\", null);\n\n    _defineProperty(this, \"component\", void 0);\n\n    _defineProperty(this, \"scopeProps\", void 0);\n\n    _defineProperty(this, \"onModelChanged\", dataSource => {\n      this.props.onModelChange(dataSource);\n    });\n\n    this.scopeProps = {\n      ctrl: {\n        datasourceMeta: props.dataSourceMeta,\n        current: cloneDeep(props.dataSource)\n      },\n      onModelChanged: this.onModelChanged\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      plugin\n    } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to approach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      plugin\n    } = this.props;\n\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      var _this$component;\n\n      this.scopeProps.ctrl.current = cloneDeep(this.props.dataSource);\n      (_this$component = this.component) === null || _this$component === void 0 ? void 0 : _this$component.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  render() {\n    const {\n      plugin,\n      dataSource\n    } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      ref: element => this.element = element,\n      children: plugin.components.ConfigEditor && /*#__PURE__*/React.createElement(plugin.components.ConfigEditor, {\n        options: dataSource,\n        onOptionsChange: this.onModelChanged\n      })\n    });\n  }\n\n}\nexport default PluginSettings;","map":{"version":3,"names":["cloneDeep","React","PureComponent","getAngularLoader","PluginSettings","constructor","props","dataSource","onModelChange","scopeProps","ctrl","datasourceMeta","dataSourceMeta","current","onModelChanged","bind","componentDidMount","plugin","element","components","ConfigEditor","loader","template","component","load","componentDidUpdate","prevProps","digest","componentWillUnmount","destroy","render","createElement","options","onOptionsChange"],"sources":["/home/soula/grafana/public/app/features/datasources/settings/PluginSettings.tsx"],"sourcesContent":["import { cloneDeep } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport {\n  DataQuery,\n  DataSourceApi,\n  DataSourceJsonData,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceSettings,\n} from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: HTMLDivElement | null = null;\n  component?: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to approach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = cloneDeep(this.props.dataSource);\n\n      this.component?.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={(element) => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAUA,SAA2BC,gBAA3B,QAAmD,kBAAnD;;AAWA,OAAO,MAAMC,cAAN,SAA6BF,aAA7B,CAAkD;EAQvDG,WAAW,CAACC,KAAD,EAAe;IACxB,MAAMA,KAAN;;IADwB,iCAPO,IAOP;;IAAA;;IAAA;;IAAA,wCA0CRC,UAAD,IAAoC;MACnD,KAAKD,KAAL,CAAWE,aAAX,CAAyBD,UAAzB;IACD,CA5CyB;;IAGxB,KAAKE,UAAL,GAAkB;MAChBC,IAAI,EAAE;QAAEC,cAAc,EAAEL,KAAK,CAACM,cAAxB;QAAwCC,OAAO,EAAEb,SAAS,CAACM,KAAK,CAACC,UAAP;MAA1D,CADU;MAEhBO,cAAc,EAAE,KAAKA;IAFL,CAAlB;IAIA,KAAKA,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;EACD;;EAEDC,iBAAiB,GAAG;IAClB,MAAM;MAAEC;IAAF,IAAa,KAAKX,KAAxB;;IAEA,IAAI,CAAC,KAAKY,OAAV,EAAmB;MACjB;IACD;;IAED,IAAI,CAACD,MAAM,CAACE,UAAP,CAAkBC,YAAvB,EAAqC;MACnC;MACA;MACA,MAAMC,MAAM,GAAGlB,gBAAgB,EAA/B;MACA,MAAMmB,QAAQ,GAAG,oDAAjB;MAEA,KAAKC,SAAL,GAAiBF,MAAM,CAACG,IAAP,CAAY,KAAKN,OAAjB,EAA0B,KAAKT,UAA/B,EAA2Ca,QAA3C,CAAjB;IACD;EACF;;EAEDG,kBAAkB,CAACC,SAAD,EAAmB;IACnC,MAAM;MAAET;IAAF,IAAa,KAAKX,KAAxB;;IACA,IAAI,CAACW,MAAM,CAACE,UAAP,CAAkBC,YAAnB,IAAmC,KAAKd,KAAL,CAAWC,UAAX,KAA0BmB,SAAS,CAACnB,UAA3E,EAAuF;MAAA;;MACrF,KAAKE,UAAL,CAAgBC,IAAhB,CAAqBG,OAArB,GAA+Bb,SAAS,CAAC,KAAKM,KAAL,CAAWC,UAAZ,CAAxC;MAEA,wBAAKgB,SAAL,oEAAgBI,MAAhB;IACD;EACF;;EAEDC,oBAAoB,GAAG;IACrB,IAAI,KAAKL,SAAT,EAAoB;MAClB,KAAKA,SAAL,CAAeM,OAAf;IACD;EACF;;EAMDC,MAAM,GAAG;IACP,MAAM;MAAEb,MAAF;MAAUV;IAAV,IAAyB,KAAKD,KAApC;;IAEA,IAAI,CAACW,MAAL,EAAa;MACX,OAAO,IAAP;IACD;;IAED,oBACE;MAAK,GAAG,EAAGC,OAAD,IAAc,KAAKA,OAAL,GAAeA,OAAvC;MAAA,UACGD,MAAM,CAACE,UAAP,CAAkBC,YAAlB,iBACCnB,KAAK,CAAC8B,aAAN,CAAoBd,MAAM,CAACE,UAAP,CAAkBC,YAAtC,EAAoD;QAClDY,OAAO,EAAEzB,UADyC;QAElD0B,eAAe,EAAE,KAAKnB;MAF4B,CAApD;IAFJ,EADF;EASD;;AAtEsD;AAyEzD,eAAeV,cAAf"},"metadata":{},"sourceType":"module"}