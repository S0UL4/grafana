{"ast":null,"code":"/**\n * Attached to query results (not persisted)\n *\n * @public\n */\nexport let DataTopic;\n/**\n * @public\n */\n\n(function (DataTopic) {\n  DataTopic[\"Annotations\"] = \"annotations\";\n})(DataTopic || (DataTopic = {}));\n\n/**\n * @internal\n */\nexport let AbstractLabelOperator;\n/**\n * @internal\n */\n\n(function (AbstractLabelOperator) {\n  AbstractLabelOperator[\"Equal\"] = \"Equal\";\n  AbstractLabelOperator[\"NotEqual\"] = \"NotEqual\";\n  AbstractLabelOperator[\"EqualRegEx\"] = \"EqualRegEx\";\n  AbstractLabelOperator[\"NotEqualRegEx\"] = \"NotEqualRegEx\";\n})(AbstractLabelOperator || (AbstractLabelOperator = {}));\n\n/**\n * @internal\n */\nexport const hasQueryImportSupport = datasource => {\n  return datasource.importFromAbstractQueries !== undefined;\n};\n/**\n * @internal\n */\n\nexport const hasQueryExportSupport = datasource => {\n  return datasource.exportToAbstractQueries !== undefined;\n};","map":{"version":3,"names":["DataTopic","AbstractLabelOperator","hasQueryImportSupport","datasource","importFromAbstractQueries","undefined","hasQueryExportSupport","exportToAbstractQueries"],"sources":["/home/soula/grafana/packages/grafana-data/src/types/query.ts"],"sourcesContent":["/**\n * Attached to query results (not persisted)\n *\n * @public\n */\nexport enum DataTopic {\n  Annotations = 'annotations',\n}\n\n/**\n * @public\n */\nexport interface DataSourceRef {\n  /** The plugin type-id */\n  type?: string;\n\n  /** Specific datasource instance */\n  uid?: string;\n}\n\n/**\n * These are the common properties available to all queries in all datasources\n * Specific implementations will *extend* this interface adding the required properties\n * for the given context\n *\n * @public\n */\nexport interface DataQuery {\n  /**\n   * A - Z\n   */\n  refId: string;\n\n  /**\n   * true if query is disabled (ie should not be returned to the dashboard)\n   */\n  hide?: boolean;\n\n  /**\n   * Unique, guid like, string used in explore mode\n   */\n  key?: string;\n\n  /**\n   * Specify the query flavor\n   */\n  queryType?: string;\n\n  /**\n   * For mixed data sources the selected datasource is on the query level.\n   * For non mixed scenarios this is undefined.\n   */\n  datasource?: DataSourceRef | null;\n}\n\n/**\n * Abstract representation of any label-based query\n * @internal\n */\nexport interface AbstractQuery extends DataQuery {\n  labelMatchers: AbstractLabelMatcher[];\n}\n\n/**\n * @internal\n */\nexport enum AbstractLabelOperator {\n  Equal = 'Equal',\n  NotEqual = 'NotEqual',\n  EqualRegEx = 'EqualRegEx',\n  NotEqualRegEx = 'NotEqualRegEx',\n}\n\n/**\n * @internal\n */\nexport type AbstractLabelMatcher = {\n  name: string;\n  value: string;\n  operator: AbstractLabelOperator;\n};\n\n/**\n * @internal\n */\nexport interface DataSourceWithQueryImportSupport<TQuery extends DataQuery> {\n  importFromAbstractQueries(labelBasedQuery: AbstractQuery[]): Promise<TQuery[]>;\n}\n\n/**\n * @internal\n */\nexport interface DataSourceWithQueryExportSupport<TQuery extends DataQuery> {\n  exportToAbstractQueries(query: TQuery[]): Promise<AbstractQuery[]>;\n}\n\n/**\n * @internal\n */\nexport const hasQueryImportSupport = <TQuery extends DataQuery>(\n  datasource: any\n): datasource is DataSourceWithQueryImportSupport<TQuery> => {\n  return (datasource as DataSourceWithQueryImportSupport<TQuery>).importFromAbstractQueries !== undefined;\n};\n\n/**\n * @internal\n */\nexport const hasQueryExportSupport = <TQuery extends DataQuery>(\n  datasource: any\n): datasource is DataSourceWithQueryExportSupport<TQuery> => {\n  return (datasource as DataSourceWithQueryExportSupport<TQuery>).exportToAbstractQueries !== undefined;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,WAAYA,SAAZ;AAIA;AACA;AACA;;WANYA,S;EAAAA,S;GAAAA,S,KAAAA,S;;AA0DZ;AACA;AACA;AACA,WAAYC,qBAAZ;AAOA;AACA;AACA;;WATYA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;GAAAA,qB,KAAAA,qB;;AA8BZ;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAChCC,UADmC,IAEwB;EAC3D,OAAQA,UAAD,CAAyDC,yBAAzD,KAAuFC,SAA9F;AACD,CAJM;AAMP;AACA;AACA;;AACA,OAAO,MAAMC,qBAAqB,GAChCH,UADmC,IAEwB;EAC3D,OAAQA,UAAD,CAAyDI,uBAAzD,KAAqFF,SAA5F;AACD,CAJM"},"metadata":{},"sourceType":"module"}