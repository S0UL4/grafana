{"ast":null,"code":"var _h;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, Input, useStyles } from '@grafana/ui';\nimport KeyValueInput from '../TraceToLogs/KeyValueInput';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function TraceToMetricsSettings({\n  options,\n  onOptionsChange\n}) {\n  var _options$jsonData$tra, _options$jsonData$tra2, _options$jsonData$tra3, _options$jsonData$tra4, _options$jsonData$tra5, _options$jsonData$tra6;\n\n  const styles = useStyles(getStyles);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: css({\n      width: '100%'\n    }),\n    children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n      className: \"page-heading\",\n      children: \"Trace to metrics\"\n    })), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.infoText,\n      children: \"Trace to metrics lets you navigate from a trace span to the selected data source.\"\n    }), /*#__PURE__*/_jsxs(InlineFieldRow, {\n      className: styles.row,\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        tooltip: \"The data source the trace is going to navigate to\",\n        label: \"Data source\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(DataSourcePicker, {\n          inputId: \"trace-to-metrics-data-source-picker\",\n          pluginId: \"prometheus\",\n          current: (_options$jsonData$tra = options.jsonData.tracesToMetrics) === null || _options$jsonData$tra === void 0 ? void 0 : _options$jsonData$tra.datasourceUid,\n          noDefault: true,\n          width: 40,\n          onChange: ds => updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToMetrics', Object.assign({}, options.jsonData.tracesToMetrics, {\n            datasourceUid: ds.uid\n          }))\n        })\n      }), (_options$jsonData$tra2 = options.jsonData.tracesToMetrics) !== null && _options$jsonData$tra2 !== void 0 && _options$jsonData$tra2.datasourceUid ? /*#__PURE__*/_jsx(Button, {\n        type: \"button\",\n        variant: \"secondary\",\n        size: \"sm\",\n        fill: \"text\",\n        onClick: () => {\n          updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToMetrics', Object.assign({}, options.jsonData.tracesToMetrics, {\n            datasourceUid: undefined\n          }));\n        },\n        children: \"Clear\"\n      }) : null]\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        tooltip: \"Tags that will be used in the metrics query.\",\n        label: \"Tags\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(KeyValueInput, {\n          keyPlaceholder: \"Tag\",\n          values: (_options$jsonData$tra3 = (_options$jsonData$tra4 = options.jsonData.tracesToMetrics) === null || _options$jsonData$tra4 === void 0 ? void 0 : _options$jsonData$tra4.tags) !== null && _options$jsonData$tra3 !== void 0 ? _options$jsonData$tra3 : [],\n          onChange: v => updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToMetrics', Object.assign({}, options.jsonData.tracesToMetrics, {\n            tags: v\n          }))\n        })\n      })\n    }), (_options$jsonData$tra5 = options.jsonData.tracesToMetrics) === null || _options$jsonData$tra5 === void 0 ? void 0 : (_options$jsonData$tra6 = _options$jsonData$tra5.queries) === null || _options$jsonData$tra6 === void 0 ? void 0 : _options$jsonData$tra6.map((query, i) => /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.queryRow,\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        label: \"Link Label\",\n        labelWidth: 10,\n        children: /*#__PURE__*/_jsx(Input, {\n          label: \"Link Label\",\n          type: \"text\",\n          allowFullScreen: true,\n          value: query.name,\n          onChange: e => {\n            var _options$jsonData$tra7, _options$jsonData$tra8;\n\n            let newQueries = (_options$jsonData$tra7 = (_options$jsonData$tra8 = options.jsonData.tracesToMetrics) === null || _options$jsonData$tra8 === void 0 ? void 0 : _options$jsonData$tra8.queries.slice()) !== null && _options$jsonData$tra7 !== void 0 ? _options$jsonData$tra7 : [];\n            newQueries[i].name = e.currentTarget.value;\n            updateDatasourcePluginJsonDataOption({\n              onOptionsChange,\n              options\n            }, 'tracesToMetrics', Object.assign({}, options.jsonData.tracesToMetrics, {\n              queries: newQueries\n            }));\n          }\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Query\",\n        labelWidth: 10,\n        tooltip: \"The Prometheus query that will run when navigating from a trace to metrics. Interpolate tags using the `$__tags` keyword.\",\n        grow: true,\n        children: /*#__PURE__*/_jsx(Input, {\n          label: \"Query\",\n          type: \"text\",\n          allowFullScreen: true,\n          value: query.query,\n          onChange: e => {\n            var _options$jsonData$tra9, _options$jsonData$tra10;\n\n            let newQueries = (_options$jsonData$tra9 = (_options$jsonData$tra10 = options.jsonData.tracesToMetrics) === null || _options$jsonData$tra10 === void 0 ? void 0 : _options$jsonData$tra10.queries.slice()) !== null && _options$jsonData$tra9 !== void 0 ? _options$jsonData$tra9 : [];\n            newQueries[i].query = e.currentTarget.value;\n            updateDatasourcePluginJsonDataOption({\n              onOptionsChange,\n              options\n            }, 'tracesToMetrics', Object.assign({}, options.jsonData.tracesToMetrics, {\n              queries: newQueries\n            }));\n          }\n        })\n      }), /*#__PURE__*/_jsx(Button, {\n        variant: \"destructive\",\n        title: \"Remove query\",\n        icon: \"times\",\n        type: \"button\",\n        onClick: () => {\n          var _options$jsonData$tra11;\n\n          let newQueries = (_options$jsonData$tra11 = options.jsonData.tracesToMetrics) === null || _options$jsonData$tra11 === void 0 ? void 0 : _options$jsonData$tra11.queries.slice();\n          newQueries === null || newQueries === void 0 ? void 0 : newQueries.splice(i, 1);\n          updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToMetrics', Object.assign({}, options.jsonData.tracesToMetrics, {\n            queries: newQueries\n          }));\n        }\n      })]\n    }, i)), /*#__PURE__*/_jsx(Button, {\n      variant: \"secondary\",\n      title: \"Add query\",\n      icon: \"plus\",\n      type: \"button\",\n      onClick: () => {\n        var _options$jsonData$tra12, _options$jsonData$tra13;\n\n        updateDatasourcePluginJsonDataOption({\n          onOptionsChange,\n          options\n        }, 'tracesToMetrics', Object.assign({}, options.jsonData.tracesToMetrics, {\n          queries: [...((_options$jsonData$tra12 = (_options$jsonData$tra13 = options.jsonData.tracesToMetrics) === null || _options$jsonData$tra13 === void 0 ? void 0 : _options$jsonData$tra13.queries) !== null && _options$jsonData$tra12 !== void 0 ? _options$jsonData$tra12 : []), {\n            query: ''\n          }]\n        }));\n      },\n      children: \"Add query\"\n    })]\n  });\n}\n\nconst getStyles = theme => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n  queryRow: css`\n    display: flex;\n  `\n});","map":{"version":3,"names":["css","React","updateDatasourcePluginJsonDataOption","DataSourcePicker","Button","InlineField","InlineFieldRow","Input","useStyles","KeyValueInput","TraceToMetricsSettings","options","onOptionsChange","styles","getStyles","width","infoText","row","jsonData","tracesToMetrics","datasourceUid","ds","uid","undefined","tags","v","queries","map","query","i","queryRow","name","e","newQueries","slice","currentTarget","value","splice","theme","spacing","md","colors","textSemiWeak"],"sources":["/home/soula/grafana/public/app/core/components/TraceToMetrics/TraceToMetricsSettings.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  KeyValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, Input, useStyles } from '@grafana/ui';\n\nimport KeyValueInput from '../TraceToLogs/KeyValueInput';\n\nexport interface TraceToMetricsOptions {\n  datasourceUid?: string;\n  tags?: Array<KeyValue<string>>;\n  queries: TraceToMetricQuery[];\n}\n\nexport interface TraceToMetricQuery {\n  name?: string;\n  query?: string;\n}\n\nexport interface TraceToMetricsData extends DataSourceJsonData {\n  tracesToMetrics?: TraceToMetricsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToMetricsData> {}\n\nexport function TraceToMetricsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to metrics</h3>\n\n      <div className={styles.infoText}>\n        Trace to metrics lets you navigate from a trace span to the selected data source.\n      </div>\n\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"trace-to-metrics-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.tracesToMetrics?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.tracesToMetrics?.datasourceUid ? (\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            size=\"sm\"\n            fill=\"text\"\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"Tags that will be used in the metrics query.\" label=\"Tags\" labelWidth={26}>\n          <KeyValueInput\n            keyPlaceholder=\"Tag\"\n            values={options.jsonData.tracesToMetrics?.tags ?? []}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                tags: v,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToMetrics?.queries?.map((query, i) => (\n        <div key={i} className={styles.queryRow}>\n          <InlineField label=\"Link Label\" labelWidth={10}>\n            <Input\n              label=\"Link Label\"\n              type=\"text\"\n              allowFullScreen\n              value={query.name}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].name = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n          <InlineField\n            label=\"Query\"\n            labelWidth={10}\n            tooltip=\"The Prometheus query that will run when navigating from a trace to metrics. Interpolate tags using the `$__tags` keyword.\"\n            grow\n          >\n            <Input\n              label=\"Query\"\n              type=\"text\"\n              allowFullScreen\n              value={query.query}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].query = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n\n          <Button\n            variant=\"destructive\"\n            title=\"Remove query\"\n            icon=\"times\"\n            type=\"button\"\n            onClick={() => {\n              let newQueries = options.jsonData.tracesToMetrics?.queries.slice();\n              newQueries?.splice(i, 1);\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                queries: newQueries,\n              });\n            }}\n          />\n        </div>\n      ))}\n\n      <Button\n        variant=\"secondary\"\n        title=\"Add query\"\n        icon=\"plus\"\n        type=\"button\"\n        onClick={() => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n            ...options.jsonData.tracesToMetrics,\n            queries: [...(options.jsonData.tracesToMetrics?.queries ?? []), { query: '' }],\n          });\n        }}\n      >\n        Add query\n      </Button>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n  queryRow: css`\n    display: flex;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}