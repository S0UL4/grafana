{"ast":null,"code":"const _excluded = [\"index\", \"id\", \"state\", \"global\", \"rootStateKey\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cloneDeep } from 'lodash';\nimport { dispatch } from '../../../store/store';\nimport { ALL_VARIABLE_TEXT } from '../constants';\nimport { optionPickerFactory } from '../pickers';\nimport { setOptionAsCurrent, setOptionFromUrl } from '../state/actions';\nimport { containsVariable, isAllVariable, toKeyedVariableIdentifier } from '../utils';\nimport { DataSourceVariableEditor } from './DataSourceVariableEditor';\nimport { updateDataSourceVariableOptions } from './actions';\nimport { dataSourceVariableReducer, initialDataSourceVariableModelState } from './reducer';\nexport const createDataSourceVariableAdapter = () => {\n  return {\n    id: 'datasource',\n    description: 'Enabled you to dynamically switch the data source for multiple panels.',\n    name: 'Data source',\n    initialState: initialDataSourceVariableModelState,\n    reducer: dataSourceVariableReducer,\n    picker: optionPickerFactory(),\n    editor: DataSourceVariableEditor,\n    dependsOn: (variable, variableToTest) => {\n      if (variable.regex) {\n        return containsVariable(variable.regex, variableToTest.name);\n      }\n\n      return false;\n    },\n    setValue: async (variable, option, emitChanges = false) => {\n      await dispatch(setOptionAsCurrent(toKeyedVariableIdentifier(variable), option, emitChanges));\n    },\n    setValueFromUrl: async (variable, urlValue) => {\n      await dispatch(setOptionFromUrl(toKeyedVariableIdentifier(variable), urlValue));\n    },\n    updateOptions: async variable => {\n      await dispatch(updateDataSourceVariableOptions(toKeyedVariableIdentifier(variable)));\n    },\n    getSaveModel: variable => {\n      const _cloneDeep = cloneDeep(variable),\n            rest = _objectWithoutPropertiesLoose(_cloneDeep, _excluded);\n\n      return Object.assign({}, rest, {\n        options: []\n      });\n    },\n    getValueForUrl: variable => {\n      if (isAllVariable(variable)) {\n        return ALL_VARIABLE_TEXT;\n      }\n\n      return variable.current.value;\n    }\n  };\n};","map":{"version":3,"names":["cloneDeep","dispatch","ALL_VARIABLE_TEXT","optionPickerFactory","setOptionAsCurrent","setOptionFromUrl","containsVariable","isAllVariable","toKeyedVariableIdentifier","DataSourceVariableEditor","updateDataSourceVariableOptions","dataSourceVariableReducer","initialDataSourceVariableModelState","createDataSourceVariableAdapter","id","description","name","initialState","reducer","picker","editor","dependsOn","variable","variableToTest","regex","setValue","option","emitChanges","setValueFromUrl","urlValue","updateOptions","getSaveModel","rest","options","getValueForUrl","current","value"],"sources":["/home/soula/grafana/public/app/features/variables/datasource/adapter.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\n\nimport { dispatch } from '../../../store/store';\nimport { VariableAdapter } from '../adapters';\nimport { ALL_VARIABLE_TEXT } from '../constants';\nimport { optionPickerFactory } from '../pickers';\nimport { setOptionAsCurrent, setOptionFromUrl } from '../state/actions';\nimport { DataSourceVariableModel } from '../types';\nimport { containsVariable, isAllVariable, toKeyedVariableIdentifier } from '../utils';\n\nimport { DataSourceVariableEditor } from './DataSourceVariableEditor';\nimport { updateDataSourceVariableOptions } from './actions';\nimport { dataSourceVariableReducer, initialDataSourceVariableModelState } from './reducer';\n\nexport const createDataSourceVariableAdapter = (): VariableAdapter<DataSourceVariableModel> => {\n  return {\n    id: 'datasource',\n    description: 'Enabled you to dynamically switch the data source for multiple panels.',\n    name: 'Data source',\n    initialState: initialDataSourceVariableModelState,\n    reducer: dataSourceVariableReducer,\n    picker: optionPickerFactory<DataSourceVariableModel>(),\n    editor: DataSourceVariableEditor,\n    dependsOn: (variable, variableToTest) => {\n      if (variable.regex) {\n        return containsVariable(variable.regex, variableToTest.name);\n      }\n      return false;\n    },\n    setValue: async (variable, option, emitChanges = false) => {\n      await dispatch(setOptionAsCurrent(toKeyedVariableIdentifier(variable), option, emitChanges));\n    },\n    setValueFromUrl: async (variable, urlValue) => {\n      await dispatch(setOptionFromUrl(toKeyedVariableIdentifier(variable), urlValue));\n    },\n    updateOptions: async (variable) => {\n      await dispatch(updateDataSourceVariableOptions(toKeyedVariableIdentifier(variable)));\n    },\n    getSaveModel: (variable) => {\n      const { index, id, state, global, rootStateKey, ...rest } = cloneDeep(variable);\n      return { ...rest, options: [] };\n    },\n    getValueForUrl: (variable) => {\n      if (isAllVariable(variable)) {\n        return ALL_VARIABLE_TEXT;\n      }\n      return variable.current.value;\n    },\n  };\n};\n"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,mBAAT,QAAoC,YAApC;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,kBAArD;AAEA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,yBAA1C,QAA2E,UAA3E;AAEA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,+BAAT,QAAgD,WAAhD;AACA,SAASC,yBAAT,EAAoCC,mCAApC,QAA+E,WAA/E;AAEA,OAAO,MAAMC,+BAA+B,GAAG,MAAgD;EAC7F,OAAO;IACLC,EAAE,EAAE,YADC;IAELC,WAAW,EAAE,wEAFR;IAGLC,IAAI,EAAE,aAHD;IAILC,YAAY,EAAEL,mCAJT;IAKLM,OAAO,EAAEP,yBALJ;IAMLQ,MAAM,EAAEhB,mBAAmB,EANtB;IAOLiB,MAAM,EAAEX,wBAPH;IAQLY,SAAS,EAAE,CAACC,QAAD,EAAWC,cAAX,KAA8B;MACvC,IAAID,QAAQ,CAACE,KAAb,EAAoB;QAClB,OAAOlB,gBAAgB,CAACgB,QAAQ,CAACE,KAAV,EAAiBD,cAAc,CAACP,IAAhC,CAAvB;MACD;;MACD,OAAO,KAAP;IACD,CAbI;IAcLS,QAAQ,EAAE,OAAOH,QAAP,EAAiBI,MAAjB,EAAyBC,WAAW,GAAG,KAAvC,KAAiD;MACzD,MAAM1B,QAAQ,CAACG,kBAAkB,CAACI,yBAAyB,CAACc,QAAD,CAA1B,EAAsCI,MAAtC,EAA8CC,WAA9C,CAAnB,CAAd;IACD,CAhBI;IAiBLC,eAAe,EAAE,OAAON,QAAP,EAAiBO,QAAjB,KAA8B;MAC7C,MAAM5B,QAAQ,CAACI,gBAAgB,CAACG,yBAAyB,CAACc,QAAD,CAA1B,EAAsCO,QAAtC,CAAjB,CAAd;IACD,CAnBI;IAoBLC,aAAa,EAAE,MAAOR,QAAP,IAAoB;MACjC,MAAMrB,QAAQ,CAACS,+BAA+B,CAACF,yBAAyB,CAACc,QAAD,CAA1B,CAAhC,CAAd;IACD,CAtBI;IAuBLS,YAAY,EAAGT,QAAD,IAAc;MAC1B,mBAA4DtB,SAAS,CAACsB,QAAD,CAArE;MAAA,MAAmDU,IAAnD;;MACA,yBAAYA,IAAZ;QAAkBC,OAAO,EAAE;MAA3B;IACD,CA1BI;IA2BLC,cAAc,EAAGZ,QAAD,IAAc;MAC5B,IAAIf,aAAa,CAACe,QAAD,CAAjB,EAA6B;QAC3B,OAAOpB,iBAAP;MACD;;MACD,OAAOoB,QAAQ,CAACa,OAAT,CAAiBC,KAAxB;IACD;EAhCI,CAAP;AAkCD,CAnCM"},"metadata":{},"sourceType":"module"}