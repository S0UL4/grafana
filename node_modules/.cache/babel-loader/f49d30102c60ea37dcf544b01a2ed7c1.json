{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Select } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst IconSelector = ({\n  value,\n  onChange\n}) => {\n  const [icons, setIcons] = useState(value ? [{\n    value,\n    label: value\n  }] : []);\n  const [icon, setIcon] = useState();\n  const iconRoot = window.__grafana_public_path__ + 'img/icons/unicons/';\n\n  const onChangeIcon = value => {\n    onChange(value);\n    setIcon(value);\n  };\n\n  useEffect(() => {\n    getBackendSrv().get(`${iconRoot}/index.json`).then(data => {\n      setIcons(data.files.map(icon => ({\n        value: icon,\n        label: icon\n      })));\n    });\n  }, [iconRoot]);\n  return /*#__PURE__*/_jsx(Select, {\n    options: icons,\n    value: icon,\n    onChange: selectedValue => {\n      onChangeIcon(selectedValue.value);\n    }\n  });\n};\n\nexport default IconSelector;","map":{"version":3,"names":["React","useState","useEffect","getBackendSrv","Select","IconSelector","value","onChange","icons","setIcons","label","icon","setIcon","iconRoot","window","__grafana_public_path__","onChangeIcon","get","then","data","files","map","selectedValue"],"sources":["/home/soula/grafana/public/app/features/dimensions/editors/IconSelector.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  value: string;\n  onChange: (v: string) => void;\n}\n\nconst IconSelector: React.FC<Props> = ({ value, onChange }) => {\n  const [icons, setIcons] = useState<SelectableValue[]>(value ? [{ value, label: value }] : []);\n  const [icon, setIcon] = useState<string>();\n  const iconRoot = (window as any).__grafana_public_path__ + 'img/icons/unicons/';\n  const onChangeIcon = (value: string) => {\n    onChange(value);\n    setIcon(value);\n  };\n  useEffect(() => {\n    getBackendSrv()\n      .get(`${iconRoot}/index.json`)\n      .then((data) => {\n        setIcons(\n          data.files.map((icon: string) => ({\n            value: icon,\n            label: icon,\n          }))\n        );\n      });\n  }, [iconRoot]);\n  return (\n    <Select\n      options={icons}\n      value={icon}\n      onChange={(selectedValue) => {\n        onChangeIcon(selectedValue.value!);\n      }}\n    />\n  );\n};\n\nexport default IconSelector;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAGA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,MAAT,QAAuB,aAAvB;;;AAOA,MAAMC,YAA6B,GAAG,CAAC;EAAEC,KAAF;EAASC;AAAT,CAAD,KAAyB;EAC7D,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAoBK,KAAK,GAAG,CAAC;IAAEA,KAAF;IAASI,KAAK,EAAEJ;EAAhB,CAAD,CAAH,GAA+B,EAAxD,CAAlC;EACA,MAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,EAAhC;EACA,MAAMY,QAAQ,GAAIC,MAAD,CAAgBC,uBAAhB,GAA0C,oBAA3D;;EACA,MAAMC,YAAY,GAAIV,KAAD,IAAmB;IACtCC,QAAQ,CAACD,KAAD,CAAR;IACAM,OAAO,CAACN,KAAD,CAAP;EACD,CAHD;;EAIAJ,SAAS,CAAC,MAAM;IACdC,aAAa,GACVc,GADH,CACQ,GAAEJ,QAAS,aADnB,EAEGK,IAFH,CAESC,IAAD,IAAU;MACdV,QAAQ,CACNU,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAgBV,IAAD,KAAmB;QAChCL,KAAK,EAAEK,IADyB;QAEhCD,KAAK,EAAEC;MAFyB,CAAnB,CAAf,CADM,CAAR;IAMD,CATH;EAUD,CAXQ,EAWN,CAACE,QAAD,CAXM,CAAT;EAYA,oBACE,KAAC,MAAD;IACE,OAAO,EAAEL,KADX;IAEE,KAAK,EAAEG,IAFT;IAGE,QAAQ,EAAGW,aAAD,IAAmB;MAC3BN,YAAY,CAACM,aAAa,CAAChB,KAAf,CAAZ;IACD;EALH,EADF;AASD,CA7BD;;AA+BA,eAAeD,YAAf"},"metadata":{},"sourceType":"module"}