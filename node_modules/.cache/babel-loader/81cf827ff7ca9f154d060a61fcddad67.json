{"ast":null,"code":"// Libraries\nimport React, { memo } from 'react';\nimport { EditorRow, EditorField } from '@grafana/experimental';\nimport { Input } from '@grafana/ui'; // Types\n\nimport { getNormalizedLokiQuery } from '../query_utils';\nimport { LokiQueryType } from '../types';\nimport { LokiOptionFields } from './LokiOptionFields';\nimport { LokiQueryField } from './LokiQueryField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const LokiAnnotationsQueryEditor = /*#__PURE__*/memo(function LokiAnnotationQueryEditor(props) {\n  var _queryWithRefId$maxLi;\n\n  const {\n    annotation,\n    onAnnotationChange\n  } = props; // this should never happen, but we want to keep typescript happy\n\n  if (annotation === undefined || onAnnotationChange === undefined) {\n    return null;\n  }\n\n  const onChangeQuery = query => {\n    // the current version of annotations only stores an optional boolean\n    // field `instant` to handle the instant/range switch.\n    // we need to maintain compatiblity for now, so we do the same.\n    // we explicitly call `getNormalizedLokiQuery` to make sure `queryType`\n    // is set up correctly.\n    const instant = getNormalizedLokiQuery(query).queryType === LokiQueryType.Instant;\n    onAnnotationChange(Object.assign({}, annotation, {\n      expr: query.expr,\n      maxLines: query.maxLines,\n      instant\n    }));\n  };\n\n  const queryWithRefId = {\n    refId: '',\n    expr: annotation.expr,\n    maxLines: annotation.maxLines,\n    instant: annotation.instant,\n    queryType: annotation.queryType\n  };\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-group\",\n      children: /*#__PURE__*/_jsx(LokiQueryField, {\n        datasource: props.datasource,\n        query: queryWithRefId,\n        onChange: onChangeQuery,\n        onRunQuery: () => {},\n        onBlur: () => {},\n        history: [],\n        ExtraFieldElement: /*#__PURE__*/_jsx(LokiOptionFields, {\n          lineLimitValue: (queryWithRefId === null || queryWithRefId === void 0 ? void 0 : (_queryWithRefId$maxLi = queryWithRefId.maxLines) === null || _queryWithRefId$maxLi === void 0 ? void 0 : _queryWithRefId$maxLi.toString()) || '',\n          resolution: queryWithRefId.resolution || 1,\n          query: queryWithRefId,\n          onRunQuery: () => {},\n          onChange: onChangeQuery\n        })\n      })\n    }), /*#__PURE__*/_jsxs(EditorRow, {\n      children: [/*#__PURE__*/_jsx(EditorField, {\n        label: \"Title\",\n        tooltip: 'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.',\n        children: /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          placeholder: \"alertname\",\n          value: annotation.titleFormat,\n          onChange: event => {\n            onAnnotationChange(Object.assign({}, annotation, {\n              titleFormat: event.currentTarget.value\n            }));\n          }\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Tags\",\n        children: /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          placeholder: \"label1,label2\",\n          value: annotation.tagKeys,\n          onChange: event => {\n            onAnnotationChange(Object.assign({}, annotation, {\n              tagKeys: event.currentTarget.value\n            }));\n          }\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Text\",\n        tooltip: 'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.',\n        children: /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          placeholder: \"instance\",\n          value: annotation.textFormat,\n          onChange: event => {\n            onAnnotationChange(Object.assign({}, annotation, {\n              textFormat: event.currentTarget.value\n            }));\n          }\n        })\n      })]\n    })]\n  });\n});","map":{"version":3,"names":["React","memo","EditorRow","EditorField","Input","getNormalizedLokiQuery","LokiQueryType","LokiOptionFields","LokiQueryField","LokiAnnotationsQueryEditor","LokiAnnotationQueryEditor","props","annotation","onAnnotationChange","undefined","onChangeQuery","query","instant","queryType","Instant","expr","maxLines","queryWithRefId","refId","datasource","toString","resolution","titleFormat","event","currentTarget","value","tagKeys","textFormat"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/components/AnnotationsQueryEditor.tsx"],"sourcesContent":["// Libraries\nimport React, { memo } from 'react';\n\nimport { AnnotationQuery } from '@grafana/data';\nimport { EditorRow, EditorField } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\n// Types\nimport { getNormalizedLokiQuery } from '../query_utils';\nimport { LokiQuery, LokiQueryType } from '../types';\n\nimport { LokiOptionFields } from './LokiOptionFields';\nimport { LokiQueryField } from './LokiQueryField';\nimport { LokiQueryEditorProps } from './types';\n\ntype Props = LokiQueryEditorProps & {\n  annotation?: AnnotationQuery<LokiQuery>;\n  onAnnotationChange?: (annotation: AnnotationQuery<LokiQuery>) => void;\n};\n\nexport const LokiAnnotationsQueryEditor = memo(function LokiAnnotationQueryEditor(props: Props) {\n  const { annotation, onAnnotationChange } = props;\n\n  // this should never happen, but we want to keep typescript happy\n  if (annotation === undefined || onAnnotationChange === undefined) {\n    return null;\n  }\n\n  const onChangeQuery = (query: LokiQuery) => {\n    // the current version of annotations only stores an optional boolean\n    // field `instant` to handle the instant/range switch.\n    // we need to maintain compatiblity for now, so we do the same.\n    // we explicitly call `getNormalizedLokiQuery` to make sure `queryType`\n    // is set up correctly.\n    const instant = getNormalizedLokiQuery(query).queryType === LokiQueryType.Instant;\n    onAnnotationChange({\n      ...annotation,\n      expr: query.expr,\n      maxLines: query.maxLines,\n      instant,\n    });\n  };\n\n  const queryWithRefId: LokiQuery = {\n    refId: '',\n    expr: annotation.expr,\n    maxLines: annotation.maxLines,\n    instant: annotation.instant,\n    queryType: annotation.queryType,\n  };\n  return (\n    <>\n      <div className=\"gf-form-group\">\n        <LokiQueryField\n          datasource={props.datasource}\n          query={queryWithRefId}\n          onChange={onChangeQuery}\n          onRunQuery={() => {}}\n          onBlur={() => {}}\n          history={[]}\n          ExtraFieldElement={\n            <LokiOptionFields\n              lineLimitValue={queryWithRefId?.maxLines?.toString() || ''}\n              resolution={queryWithRefId.resolution || 1}\n              query={queryWithRefId}\n              onRunQuery={() => {}}\n              onChange={onChangeQuery}\n            />\n          }\n        />\n      </div>\n\n      <EditorRow>\n        <EditorField\n          label=\"Title\"\n          tooltip={\n            'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.'\n          }\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"alertname\"\n            value={annotation.titleFormat}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                titleFormat: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField label=\"Tags\">\n          <Input\n            type=\"text\"\n            placeholder=\"label1,label2\"\n            value={annotation.tagKeys}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                tagKeys: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField\n          label=\"Text\"\n          tooltip={\n            'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.'\n          }\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"instance\"\n            value={annotation.textFormat}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                textFormat: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n});\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AAGA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,uBAAvC;AACA,SAASC,KAAT,QAAsB,aAAtB,C,CAEA;;AACA,SAASC,sBAAT,QAAuC,gBAAvC;AACA,SAAoBC,aAApB,QAAyC,UAAzC;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;;;;AAQA,OAAO,MAAMC,0BAA0B,gBAAGR,IAAI,CAAC,SAASS,yBAAT,CAAmCC,KAAnC,EAAiD;EAAA;;EAC9F,MAAM;IAAEC,UAAF;IAAcC;EAAd,IAAqCF,KAA3C,CAD8F,CAG9F;;EACA,IAAIC,UAAU,KAAKE,SAAf,IAA4BD,kBAAkB,KAAKC,SAAvD,EAAkE;IAChE,OAAO,IAAP;EACD;;EAED,MAAMC,aAAa,GAAIC,KAAD,IAAsB;IAC1C;IACA;IACA;IACA;IACA;IACA,MAAMC,OAAO,GAAGZ,sBAAsB,CAACW,KAAD,CAAtB,CAA8BE,SAA9B,KAA4CZ,aAAa,CAACa,OAA1E;IACAN,kBAAkB,mBACbD,UADa;MAEhBQ,IAAI,EAAEJ,KAAK,CAACI,IAFI;MAGhBC,QAAQ,EAAEL,KAAK,CAACK,QAHA;MAIhBJ;IAJgB,GAAlB;EAMD,CAbD;;EAeA,MAAMK,cAAyB,GAAG;IAChCC,KAAK,EAAE,EADyB;IAEhCH,IAAI,EAAER,UAAU,CAACQ,IAFe;IAGhCC,QAAQ,EAAET,UAAU,CAACS,QAHW;IAIhCJ,OAAO,EAAEL,UAAU,CAACK,OAJY;IAKhCC,SAAS,EAAEN,UAAU,CAACM;EALU,CAAlC;EAOA,oBACE;IAAA,wBACE;MAAK,SAAS,EAAC,eAAf;MAAA,uBACE,KAAC,cAAD;QACE,UAAU,EAAEP,KAAK,CAACa,UADpB;QAEE,KAAK,EAAEF,cAFT;QAGE,QAAQ,EAAEP,aAHZ;QAIE,UAAU,EAAE,MAAM,CAAE,CAJtB;QAKE,MAAM,EAAE,MAAM,CAAE,CALlB;QAME,OAAO,EAAE,EANX;QAOE,iBAAiB,eACf,KAAC,gBAAD;UACE,cAAc,EAAE,CAAAO,cAAc,SAAd,IAAAA,cAAc,WAAd,qCAAAA,cAAc,CAAED,QAAhB,gFAA0BI,QAA1B,OAAwC,EAD1D;UAEE,UAAU,EAAEH,cAAc,CAACI,UAAf,IAA6B,CAF3C;UAGE,KAAK,EAAEJ,cAHT;UAIE,UAAU,EAAE,MAAM,CAAE,CAJtB;UAKE,QAAQ,EAAEP;QALZ;MARJ;IADF,EADF,eAqBE,MAAC,SAAD;MAAA,wBACE,KAAC,WAAD;QACE,KAAK,EAAC,OADR;QAEE,OAAO,EACL,kHAHJ;QAAA,uBAME,KAAC,KAAD;UACE,IAAI,EAAC,MADP;UAEE,WAAW,EAAC,WAFd;UAGE,KAAK,EAAEH,UAAU,CAACe,WAHpB;UAIE,QAAQ,EAAGC,KAAD,IAAW;YACnBf,kBAAkB,mBACbD,UADa;cAEhBe,WAAW,EAAEC,KAAK,CAACC,aAAN,CAAoBC;YAFjB,GAAlB;UAID;QATH;MANF,EADF,eAmBE,KAAC,WAAD;QAAa,KAAK,EAAC,MAAnB;QAAA,uBACE,KAAC,KAAD;UACE,IAAI,EAAC,MADP;UAEE,WAAW,EAAC,eAFd;UAGE,KAAK,EAAElB,UAAU,CAACmB,OAHpB;UAIE,QAAQ,EAAGH,KAAD,IAAW;YACnBf,kBAAkB,mBACbD,UADa;cAEhBmB,OAAO,EAAEH,KAAK,CAACC,aAAN,CAAoBC;YAFb,GAAlB;UAID;QATH;MADF,EAnBF,eAgCE,KAAC,WAAD;QACE,KAAK,EAAC,MADR;QAEE,OAAO,EACL,kHAHJ;QAAA,uBAME,KAAC,KAAD;UACE,IAAI,EAAC,MADP;UAEE,WAAW,EAAC,UAFd;UAGE,KAAK,EAAElB,UAAU,CAACoB,UAHpB;UAIE,QAAQ,EAAGJ,KAAD,IAAW;YACnBf,kBAAkB,mBACbD,UADa;cAEhBoB,UAAU,EAAEJ,KAAK,CAACC,aAAN,CAAoBC;YAFhB,GAAlB;UAID;QATH;MANF,EAhCF;IAAA,EArBF;EAAA,EADF;AA2ED,CAzG6C,CAAvC"},"metadata":{},"sourceType":"module"}