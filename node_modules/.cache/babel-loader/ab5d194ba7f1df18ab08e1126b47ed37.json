{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { throwError, timer } from 'rxjs';\nimport { finalize, map, retryWhen, mergeMap } from 'rxjs/operators';\nimport { webSocket } from 'rxjs/webSocket';\nimport { FieldType, parseLabels, CircularDataFrame } from '@grafana/data';\nimport { appendResponseToBufferedData } from './live_streams_result_transformer';\n\n/**\n * Cache of websocket streams that can be returned as observable. In case there already is a stream for particular\n * target it is returned and on subscription returns the latest dataFrame.\n */\nexport class LiveStreams {\n  constructor() {\n    _defineProperty(this, \"streams\", {});\n  }\n\n  getStream(target, retryInterval = 5000) {\n    let stream = this.streams[target.url];\n\n    if (stream) {\n      return stream;\n    }\n\n    const data = new CircularDataFrame({\n      capacity: target.size\n    });\n    data.addField({\n      name: 'labels',\n      type: FieldType.other\n    }); // The labels for each line\n\n    data.addField({\n      name: 'Time',\n      type: FieldType.time,\n      config: {}\n    });\n    data.addField({\n      name: 'Line',\n      type: FieldType.string\n    }).labels = parseLabels(target.query);\n    data.addField({\n      name: 'id',\n      type: FieldType.string\n    });\n    data.addField({\n      name: 'tsNs',\n      type: FieldType.time,\n      config: {}\n    });\n    data.meta = Object.assign({}, data.meta, {\n      preferredVisualisationType: 'logs'\n    });\n    data.refId = target.refId;\n    stream = webSocket(target.url).pipe(map(response => {\n      appendResponseToBufferedData(response, data);\n      return [data];\n    }), retryWhen(attempts => attempts.pipe(mergeMap((error, i) => {\n      const retryAttempt = i + 1; // Code 1006 is used to indicate that a connection was closed abnormally.\n      // Added hard limit of 30 on number of retries.\n      // If connection was closed abnormally, and we wish to retry, otherwise throw error.\n\n      if (error.code === 1006 && retryAttempt < 30) {\n        if (retryAttempt > 10) {\n          // If more than 10 times retried, consol.warn, but keep reconnecting\n          console.warn(`Websocket connection is being disrupted. We keep reconnecting but consider starting new live tailing again. Error: ${error.reason}`);\n        } // Retry every 5s\n\n\n        return timer(retryInterval);\n      }\n\n      return throwError(error);\n    }))), finalize(() => {\n      delete this.streams[target.url];\n    }));\n    this.streams[target.url] = stream;\n    return stream;\n  }\n\n}","map":{"version":3,"names":["throwError","timer","finalize","map","retryWhen","mergeMap","webSocket","FieldType","parseLabels","CircularDataFrame","appendResponseToBufferedData","LiveStreams","getStream","target","retryInterval","stream","streams","url","data","capacity","size","addField","name","type","other","time","config","string","labels","query","meta","preferredVisualisationType","refId","pipe","response","attempts","error","i","retryAttempt","code","console","warn","reason"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/live_streams.ts"],"sourcesContent":["import { Observable, throwError, timer } from 'rxjs';\nimport { finalize, map, retryWhen, mergeMap } from 'rxjs/operators';\nimport { webSocket } from 'rxjs/webSocket';\n\nimport { DataFrame, FieldType, parseLabels, KeyValue, CircularDataFrame } from '@grafana/data';\n\nimport { appendResponseToBufferedData } from './live_streams_result_transformer';\nimport { LokiTailResponse } from './types';\n\n/**\n * Maps directly to a query in the UI (refId is key)\n */\nexport interface LokiLiveTarget {\n  query: string;\n  url: string;\n  refId: string;\n  size: number;\n}\n\n/**\n * Cache of websocket streams that can be returned as observable. In case there already is a stream for particular\n * target it is returned and on subscription returns the latest dataFrame.\n */\nexport class LiveStreams {\n  private streams: KeyValue<Observable<DataFrame[]>> = {};\n\n  getStream(target: LokiLiveTarget, retryInterval = 5000): Observable<DataFrame[]> {\n    let stream = this.streams[target.url];\n\n    if (stream) {\n      return stream;\n    }\n\n    const data = new CircularDataFrame({ capacity: target.size });\n    data.addField({ name: 'labels', type: FieldType.other }); // The labels for each line\n    data.addField({ name: 'Time', type: FieldType.time, config: {} });\n    data.addField({ name: 'Line', type: FieldType.string }).labels = parseLabels(target.query);\n    data.addField({ name: 'id', type: FieldType.string });\n    data.addField({ name: 'tsNs', type: FieldType.time, config: {} });\n    data.meta = { ...data.meta, preferredVisualisationType: 'logs' };\n    data.refId = target.refId;\n\n    stream = webSocket<LokiTailResponse>(target.url).pipe(\n      map((response: LokiTailResponse) => {\n        appendResponseToBufferedData(response, data);\n        return [data];\n      }),\n      retryWhen((attempts: Observable<any>) =>\n        attempts.pipe(\n          mergeMap((error, i) => {\n            const retryAttempt = i + 1;\n            // Code 1006 is used to indicate that a connection was closed abnormally.\n            // Added hard limit of 30 on number of retries.\n            // If connection was closed abnormally, and we wish to retry, otherwise throw error.\n            if (error.code === 1006 && retryAttempt < 30) {\n              if (retryAttempt > 10) {\n                // If more than 10 times retried, consol.warn, but keep reconnecting\n                console.warn(\n                  `Websocket connection is being disrupted. We keep reconnecting but consider starting new live tailing again. Error: ${error.reason}`\n                );\n              }\n              // Retry every 5s\n              return timer(retryInterval);\n            }\n            return throwError(error);\n          })\n        )\n      ),\n      finalize(() => {\n        delete this.streams[target.url];\n      })\n    );\n    this.streams[target.url] = stream;\n\n    return stream;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}