{"ast":null,"code":"import React, { useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\nimport { toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\nimport { COMPARISON_OPERATORS, EQUALS } from '../../cloudwatch-sql/language';\nimport { QueryEditorExpressionType, QueryEditorPropertyType } from '../../expressions';\nimport { useDimensionKeys } from '../../hooks';\nimport { appendTemplateVariables } from '../../utils/utils';\nimport { getFlattenedFilters, getMetricNameFromExpression, getNamespaceFromExpression, sanitizeOperator, setOperatorExpressionName, setOperatorExpressionProperty, setOperatorExpressionValue, setSql } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst OPERATORS = COMPARISON_OPERATORS.map(toOption);\n\nconst SQLFilter = ({\n  query,\n  onQueryChange,\n  datasource\n}) => {\n  const filtersFromQuery = useMemo(() => {\n    var _query$sql;\n\n    return getFlattenedFilters((_query$sql = query.sql) !== null && _query$sql !== void 0 ? _query$sql : {});\n  }, [query.sql]);\n  const [filters, setFilters] = useState(filtersFromQuery);\n\n  const onChange = newItems => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(v => {\n      var _v$property, _v$operator;\n\n      return {\n        type: QueryEditorExpressionType.Operator,\n        property: (_v$property = v.property) !== null && _v$property !== void 0 ? _v$property : {\n          type: QueryEditorPropertyType.String\n        },\n        operator: (_v$operator = v.operator) !== null && _v$operator !== void 0 ? _v$operator : {\n          name: EQUALS\n        }\n      };\n    });\n    setFilters(cleaned); // Only save valid and complete filters into the query state\n\n    const validExpressions = [];\n\n    for (const operatorExpression of cleaned) {\n      const validated = sanitizeOperator(operatorExpression);\n\n      if (validated) {\n        validExpressions.push(validated);\n      }\n    }\n\n    const where = validExpressions.length ? {\n      type: QueryEditorExpressionType.And,\n      expressions: validExpressions\n    } : undefined;\n    onQueryChange(setSql(query, {\n      where\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(EditorList, {\n    items: filters,\n    onChange: onChange,\n    renderItem: makeRenderFilter(datasource, query)\n  });\n}; // Making component functions in the render body is not recommended, but it works for now.\n// If some problems arise (perhaps with state going missing), consider this to be a potential cause\n\n\nfunction makeRenderFilter(datasource, query) {\n  function renderFilter(item, onChange, onDelete) {\n    return /*#__PURE__*/_jsx(FilterItem, {\n      datasource: datasource,\n      query: query,\n      filter: item,\n      onChange: onChange,\n      onDelete: onDelete\n    });\n  }\n\n  return renderFilter;\n}\n\nexport default SQLFilter;\n\nconst FilterItem = props => {\n  var _query$sql2, _filter$property2, _filter$property3, _filter$property4, _filter$operator, _filter$operator2, _filter$operator3, _filter$operator4;\n\n  const {\n    datasource,\n    query,\n    filter,\n    onChange,\n    onDelete\n  } = props;\n  const sql = (_query$sql2 = query.sql) !== null && _query$sql2 !== void 0 ? _query$sql2 : {};\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n  const dimensionKeys = useDimensionKeys(datasource, query.region, namespace, metricName);\n\n  const loadDimensionValues = async () => {\n    var _filter$property;\n\n    if (!((_filter$property = filter.property) !== null && _filter$property !== void 0 && _filter$property.name)) {\n      return [];\n    }\n\n    return datasource.getDimensionValues(query.region, namespace, metricName, filter.property.name, {}).then(result => {\n      return appendTemplateVariables(datasource, result);\n    });\n  };\n\n  const [state, loadOptions] = useAsyncFn(loadDimensionValues, [query.region, namespace, metricName, (_filter$property2 = filter.property) === null || _filter$property2 === void 0 ? void 0 : _filter$property2.name]);\n  return /*#__PURE__*/_jsxs(InputGroup, {\n    children: [/*#__PURE__*/_jsx(Select, {\n      width: \"auto\",\n      value: (_filter$property3 = filter.property) !== null && _filter$property3 !== void 0 && _filter$property3.name ? toOption((_filter$property4 = filter.property) === null || _filter$property4 === void 0 ? void 0 : _filter$property4.name) : null,\n      options: dimensionKeys,\n      allowCustomValue: true,\n      onChange: ({\n        value\n      }) => value && onChange(setOperatorExpressionProperty(filter, value))\n    }), /*#__PURE__*/_jsx(Select, {\n      width: \"auto\",\n      value: ((_filter$operator = filter.operator) === null || _filter$operator === void 0 ? void 0 : _filter$operator.name) && toOption(filter.operator.name),\n      options: OPERATORS,\n      onChange: ({\n        value\n      }) => value && onChange(setOperatorExpressionName(filter, value))\n    }), /*#__PURE__*/_jsx(Select, {\n      width: \"auto\",\n      isLoading: state.loading,\n      value: (_filter$operator2 = filter.operator) !== null && _filter$operator2 !== void 0 && _filter$operator2.value && typeof ((_filter$operator3 = filter.operator) === null || _filter$operator3 === void 0 ? void 0 : _filter$operator3.value) === 'string' ? toOption((_filter$operator4 = filter.operator) === null || _filter$operator4 === void 0 ? void 0 : _filter$operator4.value) : null,\n      options: state.value,\n      allowCustomValue: true,\n      onOpenMenu: loadOptions,\n      onChange: ({\n        value\n      }) => value && onChange(setOperatorExpressionValue(filter, value))\n    }), /*#__PURE__*/_jsx(AccessoryButton, {\n      \"aria-label\": \"remove\",\n      icon: \"times\",\n      variant: \"secondary\",\n      onClick: onDelete\n    })]\n  });\n};","map":{"version":3,"names":["React","useMemo","useState","useAsyncFn","toOption","AccessoryButton","EditorList","InputGroup","Select","COMPARISON_OPERATORS","EQUALS","QueryEditorExpressionType","QueryEditorPropertyType","useDimensionKeys","appendTemplateVariables","getFlattenedFilters","getMetricNameFromExpression","getNamespaceFromExpression","sanitizeOperator","setOperatorExpressionName","setOperatorExpressionProperty","setOperatorExpressionValue","setSql","OPERATORS","map","SQLFilter","query","onQueryChange","datasource","filtersFromQuery","sql","filters","setFilters","onChange","newItems","cleaned","v","type","Operator","property","String","operator","name","validExpressions","operatorExpression","validated","push","where","length","And","expressions","undefined","makeRenderFilter","renderFilter","item","onDelete","FilterItem","props","filter","namespace","from","metricName","select","dimensionKeys","region","loadDimensionValues","getDimensionValues","then","result","state","loadOptions","value","loading"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLFilter.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { COMPARISON_OPERATORS, EQUALS } from '../../cloudwatch-sql/language';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { QueryEditorExpressionType, QueryEditorOperatorExpression, QueryEditorPropertyType } from '../../expressions';\nimport { useDimensionKeys } from '../../hooks';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport {\n  getFlattenedFilters,\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  sanitizeOperator,\n  setOperatorExpressionName,\n  setOperatorExpressionProperty,\n  setOperatorExpressionValue,\n  setSql,\n} from './utils';\n\ninterface SQLFilterProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst OPERATORS = COMPARISON_OPERATORS.map(toOption);\n\nconst SQLFilter: React.FC<SQLFilterProps> = ({ query, onQueryChange, datasource }) => {\n  const filtersFromQuery = useMemo(() => getFlattenedFilters(query.sql ?? {}), [query.sql]);\n  const [filters, setFilters] = useState<QueryEditorOperatorExpression[]>(filtersFromQuery);\n\n  const onChange = (newItems: Array<Partial<QueryEditorOperatorExpression>>) => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(\n      (v): QueryEditorOperatorExpression => ({\n        type: QueryEditorExpressionType.Operator,\n        property: v.property ?? { type: QueryEditorPropertyType.String },\n        operator: v.operator ?? {\n          name: EQUALS,\n        },\n      })\n    );\n\n    setFilters(cleaned);\n\n    // Only save valid and complete filters into the query state\n    const validExpressions: QueryEditorOperatorExpression[] = [];\n    for (const operatorExpression of cleaned) {\n      const validated = sanitizeOperator(operatorExpression);\n      if (validated) {\n        validExpressions.push(validated);\n      }\n    }\n\n    const where = validExpressions.length\n      ? {\n          type: QueryEditorExpressionType.And as const,\n          expressions: validExpressions,\n        }\n      : undefined;\n\n    onQueryChange(setSql(query, { where }));\n  };\n\n  return <EditorList items={filters} onChange={onChange} renderItem={makeRenderFilter(datasource, query)} />;\n};\n\n// Making component functions in the render body is not recommended, but it works for now.\n// If some problems arise (perhaps with state going missing), consider this to be a potential cause\nfunction makeRenderFilter(datasource: CloudWatchDatasource, query: CloudWatchMetricsQuery) {\n  function renderFilter(\n    item: Partial<QueryEditorOperatorExpression>,\n    onChange: (item: QueryEditorOperatorExpression) => void,\n    onDelete: () => void\n  ) {\n    return <FilterItem datasource={datasource} query={query} filter={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderFilter;\n}\n\nexport default SQLFilter;\n\ninterface FilterItemProps {\n  datasource: CloudWatchDatasource;\n  query: CloudWatchMetricsQuery;\n  filter: Partial<QueryEditorOperatorExpression>;\n  onChange: (item: QueryEditorOperatorExpression) => void;\n  onDelete: () => void;\n}\n\nconst FilterItem: React.FC<FilterItemProps> = (props) => {\n  const { datasource, query, filter, onChange, onDelete } = props;\n  const sql = query.sql ?? {};\n\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n\n  const dimensionKeys = useDimensionKeys(datasource, query.region, namespace, metricName);\n\n  const loadDimensionValues = async () => {\n    if (!filter.property?.name) {\n      return [];\n    }\n\n    return datasource\n      .getDimensionValues(query.region, namespace, metricName, filter.property.name, {})\n      .then((result: Array<SelectableValue<string>>) => {\n        return appendTemplateVariables(datasource, result);\n      });\n  };\n\n  const [state, loadOptions] = useAsyncFn(loadDimensionValues, [\n    query.region,\n    namespace,\n    metricName,\n    filter.property?.name,\n  ]);\n\n  return (\n    <InputGroup>\n      <Select\n        width=\"auto\"\n        value={filter.property?.name ? toOption(filter.property?.name) : null}\n        options={dimensionKeys}\n        allowCustomValue\n        onChange={({ value }) => value && onChange(setOperatorExpressionProperty(filter, value))}\n      />\n\n      <Select\n        width=\"auto\"\n        value={filter.operator?.name && toOption(filter.operator.name)}\n        options={OPERATORS}\n        onChange={({ value }) => value && onChange(setOperatorExpressionName(filter, value))}\n      />\n\n      <Select\n        width=\"auto\"\n        isLoading={state.loading}\n        value={\n          filter.operator?.value && typeof filter.operator?.value === 'string' ? toOption(filter.operator?.value) : null\n        }\n        options={state.value}\n        allowCustomValue\n        onOpenMenu={loadOptions}\n        onChange={({ value }) => value && onChange(setOperatorExpressionValue(filter, value))}\n      />\n\n      <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n    </InputGroup>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA,SAA0BC,QAA1B,QAA0C,eAA1C;AACA,SAASC,eAAT,EAA0BC,UAA1B,EAAsCC,UAAtC,QAAwD,uBAAxD;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA,SAASC,oBAAT,EAA+BC,MAA/B,QAA6C,+BAA7C;AAEA,SAASC,yBAAT,EAAmEC,uBAAnE,QAAkG,mBAAlG;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,SAASC,uBAAT,QAAwC,mBAAxC;AAEA,SACEC,mBADF,EAEEC,2BAFF,EAGEC,0BAHF,EAIEC,gBAJF,EAKEC,yBALF,EAMEC,6BANF,EAOEC,0BAPF,EAQEC,MARF,QASO,SATP;;;AAiBA,MAAMC,SAAS,GAAGd,oBAAoB,CAACe,GAArB,CAAyBpB,QAAzB,CAAlB;;AAEA,MAAMqB,SAAmC,GAAG,CAAC;EAAEC,KAAF;EAASC,aAAT;EAAwBC;AAAxB,CAAD,KAA0C;EACpF,MAAMC,gBAAgB,GAAG5B,OAAO,CAAC;IAAA;;IAAA,OAAMc,mBAAmB,eAACW,KAAK,CAACI,GAAP,mDAAc,EAAd,CAAzB;EAAA,CAAD,EAA6C,CAACJ,KAAK,CAACI,GAAP,CAA7C,CAAhC;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB9B,QAAQ,CAAkC2B,gBAAlC,CAAtC;;EAEA,MAAMI,QAAQ,GAAIC,QAAD,IAA6D;IAC5E;IACA,MAAMC,OAAO,GAAGD,QAAQ,CAACV,GAAT,CACbY,CAAD;MAAA;;MAAA,OAAuC;QACrCC,IAAI,EAAE1B,yBAAyB,CAAC2B,QADK;QAErCC,QAAQ,iBAAEH,CAAC,CAACG,QAAJ,qDAAgB;UAAEF,IAAI,EAAEzB,uBAAuB,CAAC4B;QAAhC,CAFa;QAGrCC,QAAQ,iBAAEL,CAAC,CAACK,QAAJ,qDAAgB;UACtBC,IAAI,EAAEhC;QADgB;MAHa,CAAvC;IAAA,CADc,CAAhB;IAUAsB,UAAU,CAACG,OAAD,CAAV,CAZ4E,CAc5E;;IACA,MAAMQ,gBAAiD,GAAG,EAA1D;;IACA,KAAK,MAAMC,kBAAX,IAAiCT,OAAjC,EAA0C;MACxC,MAAMU,SAAS,GAAG3B,gBAAgB,CAAC0B,kBAAD,CAAlC;;MACA,IAAIC,SAAJ,EAAe;QACbF,gBAAgB,CAACG,IAAjB,CAAsBD,SAAtB;MACD;IACF;;IAED,MAAME,KAAK,GAAGJ,gBAAgB,CAACK,MAAjB,GACV;MACEX,IAAI,EAAE1B,yBAAyB,CAACsC,GADlC;MAEEC,WAAW,EAAEP;IAFf,CADU,GAKVQ,SALJ;IAOAxB,aAAa,CAACL,MAAM,CAACI,KAAD,EAAQ;MAAEqB;IAAF,CAAR,CAAP,CAAb;EACD,CA/BD;;EAiCA,oBAAO,KAAC,UAAD;IAAY,KAAK,EAAEhB,OAAnB;IAA4B,QAAQ,EAAEE,QAAtC;IAAgD,UAAU,EAAEmB,gBAAgB,CAACxB,UAAD,EAAaF,KAAb;EAA5E,EAAP;AACD,CAtCD,C,CAwCA;AACA;;;AACA,SAAS0B,gBAAT,CAA0BxB,UAA1B,EAA4DF,KAA5D,EAA2F;EACzF,SAAS2B,YAAT,CACEC,IADF,EAEErB,QAFF,EAGEsB,QAHF,EAIE;IACA,oBAAO,KAAC,UAAD;MAAY,UAAU,EAAE3B,UAAxB;MAAoC,KAAK,EAAEF,KAA3C;MAAkD,MAAM,EAAE4B,IAA1D;MAAgE,QAAQ,EAAErB,QAA1E;MAAoF,QAAQ,EAAEsB;IAA9F,EAAP;EACD;;EAED,OAAOF,YAAP;AACD;;AAED,eAAe5B,SAAf;;AAUA,MAAM+B,UAAqC,GAAIC,KAAD,IAAW;EAAA;;EACvD,MAAM;IAAE7B,UAAF;IAAcF,KAAd;IAAqBgC,MAArB;IAA6BzB,QAA7B;IAAuCsB;EAAvC,IAAoDE,KAA1D;EACA,MAAM3B,GAAG,kBAAGJ,KAAK,CAACI,GAAT,qDAAgB,EAAzB;EAEA,MAAM6B,SAAS,GAAG1C,0BAA0B,CAACa,GAAG,CAAC8B,IAAL,CAA5C;EACA,MAAMC,UAAU,GAAG7C,2BAA2B,CAACc,GAAG,CAACgC,MAAL,CAA9C;EAEA,MAAMC,aAAa,GAAGlD,gBAAgB,CAACe,UAAD,EAAaF,KAAK,CAACsC,MAAnB,EAA2BL,SAA3B,EAAsCE,UAAtC,CAAtC;;EAEA,MAAMI,mBAAmB,GAAG,YAAY;IAAA;;IACtC,IAAI,sBAACP,MAAM,CAACnB,QAAR,6CAAC,iBAAiBG,IAAlB,CAAJ,EAA4B;MAC1B,OAAO,EAAP;IACD;;IAED,OAAOd,UAAU,CACdsC,kBADI,CACexC,KAAK,CAACsC,MADrB,EAC6BL,SAD7B,EACwCE,UADxC,EACoDH,MAAM,CAACnB,QAAP,CAAgBG,IADpE,EAC0E,EAD1E,EAEJyB,IAFI,CAEEC,MAAD,IAA4C;MAChD,OAAOtD,uBAAuB,CAACc,UAAD,EAAawC,MAAb,CAA9B;IACD,CAJI,CAAP;EAKD,CAVD;;EAYA,MAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBnE,UAAU,CAAC8D,mBAAD,EAAsB,CAC3DvC,KAAK,CAACsC,MADqD,EAE3DL,SAF2D,EAG3DE,UAH2D,uBAI3DH,MAAM,CAACnB,QAJoD,sDAI3D,kBAAiBG,IAJ0C,CAAtB,CAAvC;EAOA,oBACE,MAAC,UAAD;IAAA,wBACE,KAAC,MAAD;MACE,KAAK,EAAC,MADR;MAEE,KAAK,EAAE,qBAAAgB,MAAM,CAACnB,QAAP,gEAAiBG,IAAjB,GAAwBtC,QAAQ,sBAACsD,MAAM,CAACnB,QAAR,sDAAC,kBAAiBG,IAAlB,CAAhC,GAA0D,IAFnE;MAGE,OAAO,EAAEqB,aAHX;MAIE,gBAAgB,MAJlB;MAKE,QAAQ,EAAE,CAAC;QAAEQ;MAAF,CAAD,KAAeA,KAAK,IAAItC,QAAQ,CAACb,6BAA6B,CAACsC,MAAD,EAASa,KAAT,CAA9B;IAL5C,EADF,eASE,KAAC,MAAD;MACE,KAAK,EAAC,MADR;MAEE,KAAK,EAAE,qBAAAb,MAAM,CAACjB,QAAP,sEAAiBC,IAAjB,KAAyBtC,QAAQ,CAACsD,MAAM,CAACjB,QAAP,CAAgBC,IAAjB,CAF1C;MAGE,OAAO,EAAEnB,SAHX;MAIE,QAAQ,EAAE,CAAC;QAAEgD;MAAF,CAAD,KAAeA,KAAK,IAAItC,QAAQ,CAACd,yBAAyB,CAACuC,MAAD,EAASa,KAAT,CAA1B;IAJ5C,EATF,eAgBE,KAAC,MAAD;MACE,KAAK,EAAC,MADR;MAEE,SAAS,EAAEF,KAAK,CAACG,OAFnB;MAGE,KAAK,EACH,qBAAAd,MAAM,CAACjB,QAAP,gEAAiB8B,KAAjB,IAA0B,6BAAOb,MAAM,CAACjB,QAAd,sDAAO,kBAAiB8B,KAAxB,MAAkC,QAA5D,GAAuEnE,QAAQ,sBAACsD,MAAM,CAACjB,QAAR,sDAAC,kBAAiB8B,KAAlB,CAA/E,GAA0G,IAJ9G;MAME,OAAO,EAAEF,KAAK,CAACE,KANjB;MAOE,gBAAgB,MAPlB;MAQE,UAAU,EAAED,WARd;MASE,QAAQ,EAAE,CAAC;QAAEC;MAAF,CAAD,KAAeA,KAAK,IAAItC,QAAQ,CAACZ,0BAA0B,CAACqC,MAAD,EAASa,KAAT,CAA3B;IAT5C,EAhBF,eA4BE,KAAC,eAAD;MAAiB,cAAW,QAA5B;MAAqC,IAAI,EAAC,OAA1C;MAAkD,OAAO,EAAC,WAA1D;MAAsE,OAAO,EAAEhB;IAA/E,EA5BF;EAAA,EADF;AAgCD,CA5DD"},"metadata":{},"sourceType":"module"}