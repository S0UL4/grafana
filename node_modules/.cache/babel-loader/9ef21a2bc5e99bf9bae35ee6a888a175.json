{"ast":null,"code":"import React, { useState } from 'react';\nimport { CoreApp, formattedValueToString, getValueFormat } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { Drawer, Tab, TabsBar } from '@grafana/ui';\nimport { InspectDataTab } from 'app/features/inspector/InspectDataTab';\nimport { InspectErrorTab } from 'app/features/inspector/InspectErrorTab';\nimport { InspectJSONTab } from 'app/features/inspector/InspectJSONTab';\nimport { InspectMetadataTab } from 'app/features/inspector/InspectMetadataTab';\nimport { InspectStatsTab } from 'app/features/inspector/InspectStatsTab';\nimport { QueryInspector } from 'app/features/inspector/QueryInspector';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const InspectContent = ({\n  panel,\n  plugin,\n  dashboard,\n  tabs,\n  data,\n  isDataLoading,\n  dataOptions,\n  metadataDatasource,\n  defaultTab,\n  onDataOptionsChange,\n  onClose\n}) => {\n  const [currentTab, setCurrentTab] = useState(defaultTab !== null && defaultTab !== void 0 ? defaultTab : InspectTab.Data);\n\n  if (!plugin) {\n    return null;\n  }\n\n  const error = data === null || data === void 0 ? void 0 : data.error; // Validate that the active tab is actually valid and allowed\n\n  let activeTab = currentTab;\n\n  if (!tabs.find(item => item.value === currentTab)) {\n    activeTab = InspectTab.JSON;\n  }\n\n  const title = getTemplateSrv().replace(panel.title, panel.scopedVars, 'text');\n  return /*#__PURE__*/_jsxs(Drawer, {\n    title: `Inspect: ${title || 'Panel'}`,\n    subtitle: data && formatStats(data),\n    width: \"50%\",\n    onClose: onClose,\n    expandable: true,\n    scrollableContent: true,\n    tabs: /*#__PURE__*/_jsx(TabsBar, {\n      children: tabs.map((t, index) => {\n        return /*#__PURE__*/_jsx(Tab, {\n          label: t.label,\n          active: t.value === activeTab,\n          onChangeTab: () => setCurrentTab(t.value || InspectTab.Data)\n        }, `${t.value}-${index}`);\n      })\n    }),\n    children: [activeTab === InspectTab.Data && /*#__PURE__*/_jsx(InspectDataTab, {\n      panel: panel,\n      data: data && data.series,\n      isLoading: isDataLoading,\n      options: dataOptions,\n      onOptionsChange: onDataOptionsChange,\n      timeZone: dashboard.timezone,\n      app: CoreApp.Dashboard\n    }), data && activeTab === InspectTab.Meta && /*#__PURE__*/_jsx(InspectMetadataTab, {\n      data: data,\n      metadataDatasource: metadataDatasource\n    }), activeTab === InspectTab.JSON && /*#__PURE__*/_jsx(InspectJSONTab, {\n      panel: panel,\n      dashboard: dashboard,\n      data: data,\n      onClose: onClose\n    }), activeTab === InspectTab.Error && /*#__PURE__*/_jsx(InspectErrorTab, {\n      error: error\n    }), data && activeTab === InspectTab.Stats && /*#__PURE__*/_jsx(InspectStatsTab, {\n      data: data,\n      timeZone: dashboard.getTimezone()\n    }), data && activeTab === InspectTab.Query && /*#__PURE__*/_jsx(QueryInspector, {\n      panel: panel,\n      data: data.series,\n      onRefreshQuery: () => panel.refresh()\n    })]\n  });\n};\n\nfunction formatStats(data) {\n  const {\n    request\n  } = data;\n\n  if (!request) {\n    return '';\n  }\n\n  const queryCount = request.targets.length;\n  const requestTime = request.endTime ? request.endTime - request.startTime : 0;\n  const formatted = formattedValueToString(getValueFormat('ms')(requestTime));\n  return `${queryCount} queries with total query time of ${formatted}`;\n}","map":{"version":3,"names":["React","useState","CoreApp","formattedValueToString","getValueFormat","getTemplateSrv","Drawer","Tab","TabsBar","InspectDataTab","InspectErrorTab","InspectJSONTab","InspectMetadataTab","InspectStatsTab","QueryInspector","InspectTab","InspectContent","panel","plugin","dashboard","tabs","data","isDataLoading","dataOptions","metadataDatasource","defaultTab","onDataOptionsChange","onClose","currentTab","setCurrentTab","Data","error","activeTab","find","item","value","JSON","title","replace","scopedVars","formatStats","map","t","index","label","series","timezone","Dashboard","Meta","Error","Stats","getTimezone","Query","refresh","request","queryCount","targets","length","requestTime","endTime","startTime","formatted"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/Inspector/InspectContent.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { CoreApp, DataSourceApi, formattedValueToString, getValueFormat, PanelData, PanelPlugin } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { Drawer, Tab, TabsBar } from '@grafana/ui';\nimport { InspectDataTab } from 'app/features/inspector/InspectDataTab';\nimport { InspectErrorTab } from 'app/features/inspector/InspectErrorTab';\nimport { InspectJSONTab } from 'app/features/inspector/InspectJSONTab';\nimport { InspectMetadataTab } from 'app/features/inspector/InspectMetadataTab';\nimport { InspectStatsTab } from 'app/features/inspector/InspectStatsTab';\nimport { QueryInspector } from 'app/features/inspector/QueryInspector';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { DashboardModel, PanelModel } from '../../state';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  defaultTab?: InspectTab;\n  tabs: Array<{ label: string; value: InspectTab }>;\n  // The last raw response\n  data?: PanelData;\n  isDataLoading: boolean;\n  dataOptions: GetDataOptions;\n  // If the datasource supports custom metadata\n  metadataDatasource?: DataSourceApi;\n  onDataOptionsChange: (options: GetDataOptions) => void;\n  onClose: () => void;\n}\n\nexport const InspectContent: React.FC<Props> = ({\n  panel,\n  plugin,\n  dashboard,\n  tabs,\n  data,\n  isDataLoading,\n  dataOptions,\n  metadataDatasource,\n  defaultTab,\n  onDataOptionsChange,\n  onClose,\n}) => {\n  const [currentTab, setCurrentTab] = useState(defaultTab ?? InspectTab.Data);\n\n  if (!plugin) {\n    return null;\n  }\n\n  const error = data?.error;\n\n  // Validate that the active tab is actually valid and allowed\n  let activeTab = currentTab;\n  if (!tabs.find((item) => item.value === currentTab)) {\n    activeTab = InspectTab.JSON;\n  }\n\n  const title = getTemplateSrv().replace(panel.title, panel.scopedVars, 'text');\n\n  return (\n    <Drawer\n      title={`Inspect: ${title || 'Panel'}`}\n      subtitle={data && formatStats(data)}\n      width=\"50%\"\n      onClose={onClose}\n      expandable\n      scrollableContent\n      tabs={\n        <TabsBar>\n          {tabs.map((t, index) => {\n            return (\n              <Tab\n                key={`${t.value}-${index}`}\n                label={t.label}\n                active={t.value === activeTab}\n                onChangeTab={() => setCurrentTab(t.value || InspectTab.Data)}\n              />\n            );\n          })}\n        </TabsBar>\n      }\n    >\n      {activeTab === InspectTab.Data && (\n        <InspectDataTab\n          panel={panel}\n          data={data && data.series}\n          isLoading={isDataLoading}\n          options={dataOptions}\n          onOptionsChange={onDataOptionsChange}\n          timeZone={dashboard.timezone}\n          app={CoreApp.Dashboard}\n        />\n      )}\n      {data && activeTab === InspectTab.Meta && (\n        <InspectMetadataTab data={data} metadataDatasource={metadataDatasource} />\n      )}\n\n      {activeTab === InspectTab.JSON && (\n        <InspectJSONTab panel={panel} dashboard={dashboard} data={data} onClose={onClose} />\n      )}\n      {activeTab === InspectTab.Error && <InspectErrorTab error={error} />}\n      {data && activeTab === InspectTab.Stats && <InspectStatsTab data={data} timeZone={dashboard.getTimezone()} />}\n      {data && activeTab === InspectTab.Query && (\n        <QueryInspector panel={panel} data={data.series} onRefreshQuery={() => panel.refresh()} />\n      )}\n    </Drawer>\n  );\n};\n\nfunction formatStats(data: PanelData) {\n  const { request } = data;\n  if (!request) {\n    return '';\n  }\n\n  const queryCount = request.targets.length;\n  const requestTime = request.endTime ? request.endTime - request.startTime : 0;\n  const formatted = formattedValueToString(getValueFormat('ms')(requestTime));\n\n  return `${queryCount} queries with total query time of ${formatted}`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}