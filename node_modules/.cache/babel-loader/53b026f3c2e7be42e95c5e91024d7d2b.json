{"ast":null,"code":"import { isGUIDish } from './components/ResourcePicker/utils';\nimport { AzureQueryType } from './types';\n\n/* \n  Grafana Template Variable Functions\n  ex: Subscriptions()\n\n  These are helper functions we have created and exposed to users to make the writing of template variables easier. \n  Due to legacy reasons, we still need to parse strings to determine if a query is a Grafana Template Variable Function \n  or if it's a KQL-type query\n*/\nexport const grafanaTemplateVariableFnMatches = query => {\n  return {\n    subscriptions: query.match(/^Subscriptions\\(\\)/i),\n    resourceGroups: query.match(/^ResourceGroups\\(\\)/i),\n    resourceGroupsWithSub: query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    metricDefinitions: query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    metricDefinitionsWithSub: query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i),\n    resourceNames: query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i),\n    resourceNamesWithSub: query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i),\n    metricNamespace: query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNamespaceWithSub: query.match(/^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNames: query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNamesWithSub: query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i),\n    appInsightsMetricNameQuery: query.match(/^AppInsightsMetricNames\\(\\)/i),\n    appInsightsGroupByQuery: query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    workspacesQuery: query.match(/^workspaces\\(\\)/i),\n    workspacesQueryWithSub: query.match(/^workspaces\\([\"']?([^\\)]+?)[\"']?\\)/i)\n  };\n};\n\nconst isGrafanaTemplateVariableFnQuery = query => {\n  const matches = grafanaTemplateVariableFnMatches(query);\n  return Object.keys(matches).some(key => !!matches[key]);\n};\n\nconst createGrafanaTemplateVariableQuery = (rawQuery, datasource) => {\n  const matchesForQuery = grafanaTemplateVariableFnMatches(rawQuery);\n  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;\n\n  const createGrafanaTemplateVariableDetails = () => {\n    // deprecated app insights template variables (will most likely remove in grafana 9)\n    if (matchesForQuery.appInsightsMetricNameQuery) {\n      const queryDetails = {\n        rawQuery,\n        kind: 'AppInsightsMetricNameQuery'\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.appInsightsGroupByQuery) {\n      const queryDetails = {\n        kind: 'AppInsightsGroupByQuery',\n        rawQuery,\n        metricName: matchesForQuery.appInsightsGroupByQuery[1]\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.subscriptions) {\n      const queryDetails = {\n        kind: 'SubscriptionsQuery',\n        rawQuery\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceGroupsWithSub) {\n      const queryDetails = {\n        kind: 'ResourceGroupsQuery',\n        rawQuery,\n        subscription: matchesForQuery.resourceGroupsWithSub[1]\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceGroups && defaultSubscriptionId) {\n      const queryDetails = {\n        kind: 'ResourceGroupsQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricDefinitionsWithSub) {\n      const queryDetails = {\n        kind: 'MetricDefinitionsQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricDefinitionsWithSub[1],\n        resourceGroup: matchesForQuery.metricDefinitionsWithSub[2]\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricDefinitions && defaultSubscriptionId) {\n      const queryDetails = {\n        kind: 'MetricDefinitionsQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.metricDefinitions[1]\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceNamesWithSub) {\n      const queryDetails = {\n        kind: 'ResourceNamesQuery',\n        rawQuery,\n        subscription: matchesForQuery.resourceNamesWithSub[1],\n        resourceGroup: matchesForQuery.resourceNamesWithSub[2],\n        metricDefinition: matchesForQuery.resourceNamesWithSub[3]\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceNames && defaultSubscriptionId) {\n      const queryDetails = {\n        kind: 'ResourceNamesQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.resourceNames[1],\n        metricDefinition: matchesForQuery.resourceNames[2]\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNamespaceWithSub) {\n      const queryDetails = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricNamespaceWithSub[1],\n        resourceGroup: matchesForQuery.metricNamespaceWithSub[2],\n        metricDefinition: matchesForQuery.metricNamespaceWithSub[3],\n        resourceName: matchesForQuery.metricNamespaceWithSub[4]\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNamespace && defaultSubscriptionId) {\n      const queryDetails = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.metricNamespace[1],\n        metricDefinition: matchesForQuery.metricNamespace[2],\n        resourceName: matchesForQuery.metricNamespace[3]\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNames && defaultSubscriptionId) {\n      if (matchesForQuery.metricNames[3].indexOf(',') === -1) {\n        const queryDetails = {\n          kind: 'MetricNamesQuery',\n          rawQuery,\n          subscription: defaultSubscriptionId,\n          resourceGroup: matchesForQuery.metricNames[1],\n          metricDefinition: matchesForQuery.metricNames[2],\n          resourceName: matchesForQuery.metricNames[3],\n          metricNamespace: matchesForQuery.metricNames[4]\n        };\n        return queryDetails;\n      }\n    }\n\n    if (matchesForQuery.metricNamesWithSub) {\n      const queryDetails = {\n        kind: 'MetricNamesQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricNamesWithSub[1],\n        resourceGroup: matchesForQuery.metricNamesWithSub[2],\n        metricDefinition: matchesForQuery.metricNamesWithSub[3],\n        resourceName: matchesForQuery.metricNamesWithSub[4],\n        metricNamespace: matchesForQuery.metricNamesWithSub[5]\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.workspacesQueryWithSub) {\n      const queryDetails = {\n        kind: 'WorkspacesQuery',\n        rawQuery,\n        subscription: (matchesForQuery.workspacesQueryWithSub[1] || '').trim()\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.workspacesQuery && defaultSubscriptionId) {\n      const queryDetails = {\n        kind: 'WorkspacesQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId\n      };\n      return queryDetails;\n    } // fallback\n\n\n    const queryDetails = {\n      kind: 'SubscriptionsQuery',\n      rawQuery\n    };\n    return queryDetails;\n  };\n\n  const query = {\n    refId: 'A',\n    queryType: AzureQueryType.GrafanaTemplateVariableFn,\n    grafanaTemplateVariableFn: createGrafanaTemplateVariableDetails(),\n    subscription: defaultSubscriptionId\n  };\n  return query;\n};\n\nconst createLogAnalyticsTemplateVariableQuery = async (rawQuery, datasource) => {\n  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;\n  let resource = ''; // if there's an existing query, we try to get the resourcesuri from a deprecated default workspace\n  // a note this is very similar logic to what is used in useMigrations but moved out of the react-hook land\n\n  if (rawQuery) {\n    const defaultWorkspaceId = datasource.azureLogAnalyticsDatasource.getDeprecatedDefaultWorkSpace();\n\n    if (defaultWorkspaceId) {\n      const isWorkspaceGUID = isGUIDish(defaultWorkspaceId);\n\n      if (isWorkspaceGUID) {\n        resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(defaultWorkspaceId);\n      } else {\n        resource = defaultWorkspaceId;\n      }\n    } else {\n      const maybeFirstWorkspace = await datasource.azureLogAnalyticsDatasource.getFirstWorkspace();\n      resource = maybeFirstWorkspace || '';\n    }\n  }\n\n  return {\n    refId: 'A',\n    queryType: AzureQueryType.LogAnalytics,\n    azureLogAnalytics: {\n      query: rawQuery,\n      resource\n    },\n    subscription: defaultSubscriptionId\n  };\n};\n\nexport const migrateStringQueriesToObjectQueries = async (rawQuery, options) => {\n  // no need to migrate already migrated queries\n  if (typeof rawQuery !== 'string') {\n    return rawQuery;\n  }\n\n  return isGrafanaTemplateVariableFnQuery(rawQuery) ? createGrafanaTemplateVariableQuery(rawQuery, options.datasource) : createLogAnalyticsTemplateVariableQuery(rawQuery, options.datasource);\n};","map":{"version":3,"names":["isGUIDish","AzureQueryType","grafanaTemplateVariableFnMatches","query","subscriptions","match","resourceGroups","resourceGroupsWithSub","metricDefinitions","metricDefinitionsWithSub","resourceNames","resourceNamesWithSub","metricNamespace","metricNamespaceWithSub","metricNames","metricNamesWithSub","appInsightsMetricNameQuery","appInsightsGroupByQuery","workspacesQuery","workspacesQueryWithSub","isGrafanaTemplateVariableFnQuery","matches","Object","keys","some","key","createGrafanaTemplateVariableQuery","rawQuery","datasource","matchesForQuery","defaultSubscriptionId","azureMonitorDatasource","createGrafanaTemplateVariableDetails","queryDetails","kind","metricName","subscription","resourceGroup","metricDefinition","resourceName","indexOf","trim","refId","queryType","GrafanaTemplateVariableFn","grafanaTemplateVariableFn","createLogAnalyticsTemplateVariableQuery","resource","defaultWorkspaceId","azureLogAnalyticsDatasource","getDeprecatedDefaultWorkSpace","isWorkspaceGUID","resourcePickerData","getResourceURIFromWorkspace","maybeFirstWorkspace","getFirstWorkspace","LogAnalytics","azureLogAnalytics","migrateStringQueriesToObjectQueries","options"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/grafanaTemplateVariableFns.ts"],"sourcesContent":["import { isGUIDish } from './components/ResourcePicker/utils';\nimport DataSource from './datasource';\nimport { AzureMonitorQuery, AzureQueryType } from './types';\nimport {\n  AppInsightsGroupByQuery,\n  AppInsightsMetricNameQuery,\n  GrafanaTemplateVariableQuery,\n  MetricDefinitionsQuery,\n  MetricNamespaceQuery,\n  MetricNamesQuery,\n  ResourceGroupsQuery,\n  ResourceNamesQuery,\n  SubscriptionsQuery,\n  WorkspacesQuery,\n} from './types/templateVariables';\n\n/* \n  Grafana Template Variable Functions\n  ex: Subscriptions()\n\n  These are helper functions we have created and exposed to users to make the writing of template variables easier. \n  Due to legacy reasons, we still need to parse strings to determine if a query is a Grafana Template Variable Function \n  or if it's a KQL-type query\n*/\n\nexport const grafanaTemplateVariableFnMatches = (query: string) => {\n  return {\n    subscriptions: query.match(/^Subscriptions\\(\\)/i),\n    resourceGroups: query.match(/^ResourceGroups\\(\\)/i),\n    resourceGroupsWithSub: query.match(/^ResourceGroups\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    metricDefinitions: query.match(/^Namespaces\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    metricDefinitionsWithSub: query.match(/^Namespaces\\(([^,]+?),\\s?([^,]+?)\\)/i),\n    resourceNames: query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?)\\)/i),\n    resourceNamesWithSub: query.match(/^ResourceNames\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i),\n    metricNamespace: query.match(/^MetricNamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNamespaceWithSub: query.match(/^metricnamespace\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNames: query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)\\)/i),\n    metricNamesWithSub: query.match(/^MetricNames\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/i),\n    appInsightsMetricNameQuery: query.match(/^AppInsightsMetricNames\\(\\)/i),\n    appInsightsGroupByQuery: query.match(/^AppInsightsGroupBys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/i),\n    workspacesQuery: query.match(/^workspaces\\(\\)/i),\n    workspacesQueryWithSub: query.match(/^workspaces\\([\"']?([^\\)]+?)[\"']?\\)/i),\n  };\n};\n\nconst isGrafanaTemplateVariableFnQuery = (query: string) => {\n  const matches: Record<string, RegExpMatchArray | null> = grafanaTemplateVariableFnMatches(query);\n  return Object.keys(matches).some((key) => !!matches[key]);\n};\n\nconst createGrafanaTemplateVariableQuery = (rawQuery: string, datasource: DataSource): AzureMonitorQuery => {\n  const matchesForQuery = grafanaTemplateVariableFnMatches(rawQuery);\n  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;\n  const createGrafanaTemplateVariableDetails = (): GrafanaTemplateVariableQuery => {\n    // deprecated app insights template variables (will most likely remove in grafana 9)\n    if (matchesForQuery.appInsightsMetricNameQuery) {\n      const queryDetails: AppInsightsMetricNameQuery = { rawQuery, kind: 'AppInsightsMetricNameQuery' };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.appInsightsGroupByQuery) {\n      const queryDetails: AppInsightsGroupByQuery = {\n        kind: 'AppInsightsGroupByQuery',\n        rawQuery,\n        metricName: matchesForQuery.appInsightsGroupByQuery[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.subscriptions) {\n      const queryDetails: SubscriptionsQuery = {\n        kind: 'SubscriptionsQuery',\n        rawQuery,\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceGroupsWithSub) {\n      const queryDetails: ResourceGroupsQuery = {\n        kind: 'ResourceGroupsQuery',\n        rawQuery,\n        subscription: matchesForQuery.resourceGroupsWithSub[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceGroups && defaultSubscriptionId) {\n      const queryDetails: ResourceGroupsQuery = {\n        kind: 'ResourceGroupsQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricDefinitionsWithSub) {\n      const queryDetails: MetricDefinitionsQuery = {\n        kind: 'MetricDefinitionsQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricDefinitionsWithSub[1],\n        resourceGroup: matchesForQuery.metricDefinitionsWithSub[2],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricDefinitions && defaultSubscriptionId) {\n      const queryDetails: MetricDefinitionsQuery = {\n        kind: 'MetricDefinitionsQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.metricDefinitions[1],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceNamesWithSub) {\n      const queryDetails: ResourceNamesQuery = {\n        kind: 'ResourceNamesQuery',\n        rawQuery,\n        subscription: matchesForQuery.resourceNamesWithSub[1],\n        resourceGroup: matchesForQuery.resourceNamesWithSub[2],\n        metricDefinition: matchesForQuery.resourceNamesWithSub[3],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.resourceNames && defaultSubscriptionId) {\n      const queryDetails: ResourceNamesQuery = {\n        kind: 'ResourceNamesQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.resourceNames[1],\n        metricDefinition: matchesForQuery.resourceNames[2],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNamespaceWithSub) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricNamespaceWithSub[1],\n        resourceGroup: matchesForQuery.metricNamespaceWithSub[2],\n        metricDefinition: matchesForQuery.metricNamespaceWithSub[3],\n        resourceName: matchesForQuery.metricNamespaceWithSub[4],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNamespace && defaultSubscriptionId) {\n      const queryDetails: MetricNamespaceQuery = {\n        kind: 'MetricNamespaceQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n        resourceGroup: matchesForQuery.metricNamespace[1],\n        metricDefinition: matchesForQuery.metricNamespace[2],\n        resourceName: matchesForQuery.metricNamespace[3],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.metricNames && defaultSubscriptionId) {\n      if (matchesForQuery.metricNames[3].indexOf(',') === -1) {\n        const queryDetails: MetricNamesQuery = {\n          kind: 'MetricNamesQuery',\n          rawQuery,\n          subscription: defaultSubscriptionId,\n          resourceGroup: matchesForQuery.metricNames[1],\n          metricDefinition: matchesForQuery.metricNames[2],\n          resourceName: matchesForQuery.metricNames[3],\n          metricNamespace: matchesForQuery.metricNames[4],\n        };\n        return queryDetails;\n      }\n    }\n\n    if (matchesForQuery.metricNamesWithSub) {\n      const queryDetails: MetricNamesQuery = {\n        kind: 'MetricNamesQuery',\n        rawQuery,\n        subscription: matchesForQuery.metricNamesWithSub[1],\n        resourceGroup: matchesForQuery.metricNamesWithSub[2],\n        metricDefinition: matchesForQuery.metricNamesWithSub[3],\n        resourceName: matchesForQuery.metricNamesWithSub[4],\n        metricNamespace: matchesForQuery.metricNamesWithSub[5],\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.workspacesQueryWithSub) {\n      const queryDetails: WorkspacesQuery = {\n        kind: 'WorkspacesQuery',\n        rawQuery,\n        subscription: (matchesForQuery.workspacesQueryWithSub[1] || '').trim(),\n      };\n      return queryDetails;\n    }\n\n    if (matchesForQuery.workspacesQuery && defaultSubscriptionId) {\n      const queryDetails: WorkspacesQuery = {\n        kind: 'WorkspacesQuery',\n        rawQuery,\n        subscription: defaultSubscriptionId,\n      };\n      return queryDetails;\n    }\n\n    // fallback\n    const queryDetails: SubscriptionsQuery = { kind: 'SubscriptionsQuery', rawQuery };\n    return queryDetails;\n  };\n\n  const query: AzureMonitorQuery = {\n    refId: 'A',\n    queryType: AzureQueryType.GrafanaTemplateVariableFn,\n    grafanaTemplateVariableFn: createGrafanaTemplateVariableDetails(),\n    subscription: defaultSubscriptionId,\n  };\n  return query;\n};\n\nconst createLogAnalyticsTemplateVariableQuery = async (\n  rawQuery: string,\n  datasource: DataSource\n): Promise<AzureMonitorQuery> => {\n  const defaultSubscriptionId = datasource.azureMonitorDatasource.defaultSubscriptionId;\n  let resource = '';\n  // if there's an existing query, we try to get the resourcesuri from a deprecated default workspace\n  // a note this is very similar logic to what is used in useMigrations but moved out of the react-hook land\n  if (rawQuery) {\n    const defaultWorkspaceId = datasource.azureLogAnalyticsDatasource.getDeprecatedDefaultWorkSpace();\n    if (defaultWorkspaceId) {\n      const isWorkspaceGUID = isGUIDish(defaultWorkspaceId);\n      if (isWorkspaceGUID) {\n        resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(defaultWorkspaceId);\n      } else {\n        resource = defaultWorkspaceId;\n      }\n    } else {\n      const maybeFirstWorkspace = await datasource.azureLogAnalyticsDatasource.getFirstWorkspace();\n      resource = maybeFirstWorkspace || '';\n    }\n  }\n\n  return {\n    refId: 'A',\n    queryType: AzureQueryType.LogAnalytics,\n    azureLogAnalytics: {\n      query: rawQuery,\n      resource,\n    },\n    subscription: defaultSubscriptionId,\n  };\n};\n\nexport const migrateStringQueriesToObjectQueries = async (\n  rawQuery: string | AzureMonitorQuery,\n  options: { datasource: DataSource }\n): Promise<AzureMonitorQuery> => {\n  // no need to migrate already migrated queries\n  if (typeof rawQuery !== 'string') {\n    return rawQuery;\n  }\n\n  return isGrafanaTemplateVariableFnQuery(rawQuery)\n    ? createGrafanaTemplateVariableQuery(rawQuery, options.datasource)\n    : createLogAnalyticsTemplateVariableQuery(rawQuery, options.datasource);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}