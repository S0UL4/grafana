{"ast":null,"code":"const _excluded = [\"defaultValue\", \"minWidth\", \"maxWidth\", \"onCommitChange\", \"onKeyDown\", \"onBlur\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect } from 'react';\nimport { measureText } from '../../utils/measureText';\nimport { Input } from './Input';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const AutoSizeInput = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    defaultValue = '',\n    minWidth = 10,\n    maxWidth,\n    onCommitChange,\n    onKeyDown,\n    onBlur\n  } = props,\n        restProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [value, setValue] = React.useState(defaultValue);\n  const [inputWidth, setInputWidth] = React.useState(minWidth);\n  useEffect(() => {\n    setInputWidth(getWidthFor(value.toString(), minWidth, maxWidth));\n  }, [value, maxWidth, minWidth]);\n  return /*#__PURE__*/_jsx(Input, Object.assign({}, restProps, {\n    ref: ref,\n    value: value.toString(),\n    onChange: event => {\n      setValue(event.currentTarget.value);\n    },\n    width: inputWidth,\n    onBlur: event => {\n      if (onBlur) {\n        onBlur(event);\n      } else if (onCommitChange) {\n        onCommitChange(event);\n      }\n    },\n    onKeyDown: event => {\n      if (onKeyDown) {\n        onKeyDown(event);\n      } else if (event.key === 'Enter' && onCommitChange) {\n        onCommitChange(event);\n      }\n    },\n    \"data-testid\": 'autosize-input'\n  }));\n});\n\nfunction getWidthFor(value, minWidth, maxWidth) {\n  if (!value) {\n    return minWidth;\n  }\n\n  const extraSpace = 3;\n  const realWidth = measureText(value.toString(), 14).width / 8 + extraSpace;\n\n  if (minWidth && realWidth < minWidth) {\n    return minWidth;\n  }\n\n  if (maxWidth && realWidth > maxWidth) {\n    return realWidth;\n  }\n\n  return realWidth;\n}\n\nAutoSizeInput.displayName = 'AutoSizeInput';","map":{"version":3,"names":["React","useEffect","measureText","Input","AutoSizeInput","forwardRef","props","ref","defaultValue","minWidth","maxWidth","onCommitChange","onKeyDown","onBlur","restProps","value","setValue","useState","inputWidth","setInputWidth","getWidthFor","toString","event","currentTarget","key","extraSpace","realWidth","width","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Input/AutoSizeInput.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\nimport { measureText } from '../../utils/measureText';\n\nimport { Input, Props as InputProps } from './Input';\n\nexport interface Props extends InputProps {\n  /** Sets the min-width to a multiple of 8px. Default value is 10*/\n  minWidth?: number;\n  /** Sets the max-width to a multiple of 8px.*/\n  maxWidth?: number;\n  /** onChange function that will be run on onBlur and onKeyPress with enter*/\n  onCommitChange?: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport const AutoSizeInput = React.forwardRef<HTMLInputElement, Props>((props, ref) => {\n  const { defaultValue = '', minWidth = 10, maxWidth, onCommitChange, onKeyDown, onBlur, ...restProps } = props;\n  const [value, setValue] = React.useState(defaultValue);\n  const [inputWidth, setInputWidth] = React.useState(minWidth);\n\n  useEffect(() => {\n    setInputWidth(getWidthFor(value.toString(), minWidth, maxWidth));\n  }, [value, maxWidth, minWidth]);\n\n  return (\n    <Input\n      {...restProps}\n      ref={ref}\n      value={value.toString()}\n      onChange={(event) => {\n        setValue(event.currentTarget.value);\n      }}\n      width={inputWidth}\n      onBlur={(event) => {\n        if (onBlur) {\n          onBlur(event);\n        } else if (onCommitChange) {\n          onCommitChange(event);\n        }\n      }}\n      onKeyDown={(event) => {\n        if (onKeyDown) {\n          onKeyDown(event);\n        } else if (event.key === 'Enter' && onCommitChange) {\n          onCommitChange(event);\n        }\n      }}\n      data-testid={'autosize-input'}\n    />\n  );\n});\n\nfunction getWidthFor(value: string, minWidth: number, maxWidth: number | undefined): number {\n  if (!value) {\n    return minWidth;\n  }\n\n  const extraSpace = 3;\n  const realWidth = measureText(value.toString(), 14).width / 8 + extraSpace;\n\n  if (minWidth && realWidth < minWidth) {\n    return minWidth;\n  }\n\n  if (maxWidth && realWidth > maxWidth) {\n    return realWidth;\n  }\n\n  return realWidth;\n}\n\nAutoSizeInput.displayName = 'AutoSizeInput';\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,SAASC,KAAT,QAA2C,SAA3C;;AAWA,OAAO,MAAMC,aAAa,gBAAGJ,KAAK,CAACK,UAAN,CAA0C,CAACC,KAAD,EAAQC,GAAR,KAAgB;EACrF,MAAM;IAAEC,YAAY,GAAG,EAAjB;IAAqBC,QAAQ,GAAG,EAAhC;IAAoCC,QAApC;IAA8CC,cAA9C;IAA8DC,SAA9D;IAAyEC;EAAzE,IAAkGP,KAAxG;EAAA,MAA0FQ,SAA1F,iCAAwGR,KAAxG;;EACA,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBhB,KAAK,CAACiB,QAAN,CAAeT,YAAf,CAA1B;EACA,MAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BnB,KAAK,CAACiB,QAAN,CAAeR,QAAf,CAApC;EAEAR,SAAS,CAAC,MAAM;IACdkB,aAAa,CAACC,WAAW,CAACL,KAAK,CAACM,QAAN,EAAD,EAAmBZ,QAAnB,EAA6BC,QAA7B,CAAZ,CAAb;EACD,CAFQ,EAEN,CAACK,KAAD,EAAQL,QAAR,EAAkBD,QAAlB,CAFM,CAAT;EAIA,oBACE,KAAC,KAAD,oBACMK,SADN;IAEE,GAAG,EAAEP,GAFP;IAGE,KAAK,EAAEQ,KAAK,CAACM,QAAN,EAHT;IAIE,QAAQ,EAAGC,KAAD,IAAW;MACnBN,QAAQ,CAACM,KAAK,CAACC,aAAN,CAAoBR,KAArB,CAAR;IACD,CANH;IAOE,KAAK,EAAEG,UAPT;IAQE,MAAM,EAAGI,KAAD,IAAW;MACjB,IAAIT,MAAJ,EAAY;QACVA,MAAM,CAACS,KAAD,CAAN;MACD,CAFD,MAEO,IAAIX,cAAJ,EAAoB;QACzBA,cAAc,CAACW,KAAD,CAAd;MACD;IACF,CAdH;IAeE,SAAS,EAAGA,KAAD,IAAW;MACpB,IAAIV,SAAJ,EAAe;QACbA,SAAS,CAACU,KAAD,CAAT;MACD,CAFD,MAEO,IAAIA,KAAK,CAACE,GAAN,KAAc,OAAd,IAAyBb,cAA7B,EAA6C;QAClDA,cAAc,CAACW,KAAD,CAAd;MACD;IACF,CArBH;IAsBE,eAAa;EAtBf,GADF;AA0BD,CAnC4B,CAAtB;;AAqCP,SAASF,WAAT,CAAqBL,KAArB,EAAoCN,QAApC,EAAsDC,QAAtD,EAA4F;EAC1F,IAAI,CAACK,KAAL,EAAY;IACV,OAAON,QAAP;EACD;;EAED,MAAMgB,UAAU,GAAG,CAAnB;EACA,MAAMC,SAAS,GAAGxB,WAAW,CAACa,KAAK,CAACM,QAAN,EAAD,EAAmB,EAAnB,CAAX,CAAkCM,KAAlC,GAA0C,CAA1C,GAA8CF,UAAhE;;EAEA,IAAIhB,QAAQ,IAAIiB,SAAS,GAAGjB,QAA5B,EAAsC;IACpC,OAAOA,QAAP;EACD;;EAED,IAAIC,QAAQ,IAAIgB,SAAS,GAAGhB,QAA5B,EAAsC;IACpC,OAAOgB,SAAP;EACD;;EAED,OAAOA,SAAP;AACD;;AAEDtB,aAAa,CAACwB,WAAd,GAA4B,eAA5B"},"metadata":{},"sourceType":"module"}