{"ast":null,"code":"import { FALLBACK_COLOR, FieldColorModeId, GAUGE_DEFAULT_MAXIMUM, GAUGE_DEFAULT_MINIMUM, getActiveThreshold, ThresholdsMode } from '@grafana/data';\nexport const DEFAULT_THRESHOLDS = {\n  mode: ThresholdsMode.Absolute,\n  steps: [{\n    value: -Infinity,\n    color: 'green'\n  }, {\n    value: 80,\n    color: 'red'\n  }]\n};\nexport function calculateGaugeAutoProps(width, height, title) {\n  const showLabel = title !== null && title !== undefined;\n  const titleFontSize = Math.min(width * 0.15 / 1.5, 20); // 20% of height * line-height, max 40px\n\n  const titleHeight = titleFontSize * 1.5;\n  const availableHeight = showLabel ? height - titleHeight : height;\n  const gaugeHeight = Math.min(availableHeight, width);\n  return {\n    showLabel,\n    gaugeHeight,\n    titleFontSize\n  };\n}\nexport function getFormattedThresholds(decimals, field, value, theme) {\n  var _field$color, _field$thresholds, _field$min2, _field$max;\n\n  if (((_field$color = field.color) === null || _field$color === void 0 ? void 0 : _field$color.mode) !== FieldColorModeId.Thresholds) {\n    var _field$min, _value$color;\n\n    return [{\n      value: (_field$min = field.min) !== null && _field$min !== void 0 ? _field$min : GAUGE_DEFAULT_MINIMUM,\n      color: (_value$color = value.color) !== null && _value$color !== void 0 ? _value$color : FALLBACK_COLOR\n    }];\n  }\n\n  const thresholds = (_field$thresholds = field.thresholds) !== null && _field$thresholds !== void 0 ? _field$thresholds : DEFAULT_THRESHOLDS;\n  const isPercent = thresholds.mode === ThresholdsMode.Percentage;\n  const steps = thresholds.steps;\n  let min = (_field$min2 = field.min) !== null && _field$min2 !== void 0 ? _field$min2 : GAUGE_DEFAULT_MINIMUM;\n  let max = (_field$max = field.max) !== null && _field$max !== void 0 ? _field$max : GAUGE_DEFAULT_MAXIMUM;\n\n  if (isPercent) {\n    min = 0;\n    max = 100;\n  }\n\n  const first = getActiveThreshold(min, steps);\n  const last = getActiveThreshold(max, steps);\n  const formatted = [{\n    value: +min.toFixed(decimals),\n    color: theme.visualization.getColorByName(first.color)\n  }];\n  let skip = true;\n\n  for (let i = 0; i < steps.length; i++) {\n    const step = steps[i];\n\n    if (skip) {\n      if (first === step) {\n        skip = false;\n      }\n\n      continue;\n    }\n\n    const prev = steps[i - 1];\n    formatted.push({\n      value: step.value,\n      color: theme.visualization.getColorByName(prev.color)\n    });\n\n    if (step === last) {\n      break;\n    }\n  }\n\n  formatted.push({\n    value: +max.toFixed(decimals),\n    color: theme.visualization.getColorByName(last.color)\n  });\n  return formatted;\n}","map":{"version":3,"names":["FALLBACK_COLOR","FieldColorModeId","GAUGE_DEFAULT_MAXIMUM","GAUGE_DEFAULT_MINIMUM","getActiveThreshold","ThresholdsMode","DEFAULT_THRESHOLDS","mode","Absolute","steps","value","Infinity","color","calculateGaugeAutoProps","width","height","title","showLabel","undefined","titleFontSize","Math","min","titleHeight","availableHeight","gaugeHeight","getFormattedThresholds","decimals","field","theme","Thresholds","thresholds","isPercent","Percentage","max","first","last","formatted","toFixed","visualization","getColorByName","skip","i","length","step","prev","push"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Gauge/utils.ts"],"sourcesContent":["import {\n  DisplayValue,\n  FALLBACK_COLOR,\n  FieldColorModeId,\n  FieldConfig,\n  GAUGE_DEFAULT_MAXIMUM,\n  GAUGE_DEFAULT_MINIMUM,\n  getActiveThreshold,\n  GrafanaTheme,\n  Threshold,\n  ThresholdsConfig,\n  ThresholdsMode,\n} from '@grafana/data';\n\ninterface GaugeAutoProps {\n  titleFontSize: number;\n  gaugeHeight: number;\n  showLabel: boolean;\n}\n\nexport const DEFAULT_THRESHOLDS: ThresholdsConfig = {\n  mode: ThresholdsMode.Absolute,\n  steps: [\n    { value: -Infinity, color: 'green' },\n    { value: 80, color: 'red' },\n  ],\n};\n\nexport function calculateGaugeAutoProps(width: number, height: number, title: string | undefined): GaugeAutoProps {\n  const showLabel = title !== null && title !== undefined;\n  const titleFontSize = Math.min((width * 0.15) / 1.5, 20); // 20% of height * line-height, max 40px\n  const titleHeight = titleFontSize * 1.5;\n  const availableHeight = showLabel ? height - titleHeight : height;\n  const gaugeHeight = Math.min(availableHeight, width);\n\n  return {\n    showLabel,\n    gaugeHeight,\n    titleFontSize,\n  };\n}\n\nexport function getFormattedThresholds(\n  decimals: number,\n  field: FieldConfig,\n  value: DisplayValue,\n  theme: GrafanaTheme\n): Threshold[] {\n  if (field.color?.mode !== FieldColorModeId.Thresholds) {\n    return [{ value: field.min ?? GAUGE_DEFAULT_MINIMUM, color: value.color ?? FALLBACK_COLOR }];\n  }\n\n  const thresholds = field.thresholds ?? DEFAULT_THRESHOLDS;\n  const isPercent = thresholds.mode === ThresholdsMode.Percentage;\n  const steps = thresholds.steps;\n\n  let min = field.min ?? GAUGE_DEFAULT_MINIMUM;\n  let max = field.max ?? GAUGE_DEFAULT_MAXIMUM;\n\n  if (isPercent) {\n    min = 0;\n    max = 100;\n  }\n\n  const first = getActiveThreshold(min, steps);\n  const last = getActiveThreshold(max, steps);\n  const formatted: Threshold[] = [\n    { value: +min.toFixed(decimals), color: theme.visualization.getColorByName(first.color) },\n  ];\n  let skip = true;\n  for (let i = 0; i < steps.length; i++) {\n    const step = steps[i];\n    if (skip) {\n      if (first === step) {\n        skip = false;\n      }\n      continue;\n    }\n    const prev = steps[i - 1];\n    formatted.push({ value: step.value, color: theme.visualization.getColorByName(prev.color) });\n    if (step === last) {\n      break;\n    }\n  }\n  formatted.push({ value: +max.toFixed(decimals), color: theme.visualization.getColorByName(last.color) });\n  return formatted;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}