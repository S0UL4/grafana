{"ast":null,"code":"import React from 'react';\nimport { CodeEditor, Select } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const RuleSettingsEditor = ({\n  onChange,\n  value,\n  ruleType,\n  entitiesInfo\n}) => {\n  var _value$type;\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Select, {\n      options: entitiesInfo[ruleType],\n      placeholder: \"Select an option\",\n      value: (_value$type = value === null || value === void 0 ? void 0 : value.type) !== null && _value$type !== void 0 ? _value$type : '',\n      onChange: value => {\n        // set the body with example\n        const type = value.value;\n        onChange({\n          type,\n          [type]: entitiesInfo.getExample(ruleType, type)\n        });\n      }\n    }, ruleType), /*#__PURE__*/_jsx(CodeEditor, {\n      height: '50vh',\n      value: value ? JSON.stringify(value[value.type], null, '\\t') : '',\n      showLineNumbers: true,\n      readOnly: false,\n      language: \"json\",\n      showMiniMap: false,\n      onBlur: text => {\n        const body = JSON.parse(text);\n        onChange({\n          type: value.type,\n          [value.type]: body\n        });\n      }\n    })]\n  });\n};","map":{"version":3,"names":["React","CodeEditor","Select","RuleSettingsEditor","onChange","value","ruleType","entitiesInfo","type","getExample","JSON","stringify","text","body","parse"],"sources":["/home/soula/grafana/public/app/features/live/pages/RuleSettingsEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { CodeEditor, Select } from '@grafana/ui';\n\nimport { RuleType, RuleSetting, PipeLineEntitiesInfo } from './types';\n\ninterface Props {\n  ruleType: RuleType;\n  onChange: (value: RuleSetting) => void;\n  value: RuleSetting;\n  entitiesInfo: PipeLineEntitiesInfo;\n}\n\nexport const RuleSettingsEditor: React.FC<Props> = ({ onChange, value, ruleType, entitiesInfo }) => {\n  return (\n    <>\n      <Select\n        key={ruleType}\n        options={entitiesInfo[ruleType]}\n        placeholder=\"Select an option\"\n        value={value?.type ?? ''}\n        onChange={(value) => {\n          // set the body with example\n          const type = value.value;\n          onChange({\n            type,\n            [type]: entitiesInfo.getExample(ruleType, type),\n          });\n        }}\n      />\n      <CodeEditor\n        height={'50vh'}\n        value={value ? JSON.stringify(value[value.type], null, '\\t') : ''}\n        showLineNumbers={true}\n        readOnly={false}\n        language=\"json\"\n        showMiniMap={false}\n        onBlur={(text: string) => {\n          const body = JSON.parse(text);\n          onChange({\n            type: value.type,\n            [value.type]: body,\n          });\n        }}\n      />\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,aAAnC;;;;AAWA,OAAO,MAAMC,kBAAmC,GAAG,CAAC;EAAEC,QAAF;EAAYC,KAAZ;EAAmBC,QAAnB;EAA6BC;AAA7B,CAAD,KAAiD;EAAA;;EAClG,oBACE;IAAA,wBACE,KAAC,MAAD;MAEE,OAAO,EAAEA,YAAY,CAACD,QAAD,CAFvB;MAGE,WAAW,EAAC,kBAHd;MAIE,KAAK,iBAAED,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEG,IAAT,qDAAiB,EAJxB;MAKE,QAAQ,EAAGH,KAAD,IAAW;QACnB;QACA,MAAMG,IAAI,GAAGH,KAAK,CAACA,KAAnB;QACAD,QAAQ,CAAC;UACPI,IADO;UAEP,CAACA,IAAD,GAAQD,YAAY,CAACE,UAAb,CAAwBH,QAAxB,EAAkCE,IAAlC;QAFD,CAAD,CAAR;MAID;IAZH,GACOF,QADP,CADF,eAeE,KAAC,UAAD;MACE,MAAM,EAAE,MADV;MAEE,KAAK,EAAED,KAAK,GAAGK,IAAI,CAACC,SAAL,CAAeN,KAAK,CAACA,KAAK,CAACG,IAAP,CAApB,EAAkC,IAAlC,EAAwC,IAAxC,CAAH,GAAmD,EAFjE;MAGE,eAAe,EAAE,IAHnB;MAIE,QAAQ,EAAE,KAJZ;MAKE,QAAQ,EAAC,MALX;MAME,WAAW,EAAE,KANf;MAOE,MAAM,EAAGI,IAAD,IAAkB;QACxB,MAAMC,IAAI,GAAGH,IAAI,CAACI,KAAL,CAAWF,IAAX,CAAb;QACAR,QAAQ,CAAC;UACPI,IAAI,EAAEH,KAAK,CAACG,IADL;UAEP,CAACH,KAAK,CAACG,IAAP,GAAcK;QAFP,CAAD,CAAR;MAID;IAbH,EAfF;EAAA,EADF;AAiCD,CAlCM"},"metadata":{},"sourceType":"module"}