{"ast":null,"code":"// Using '*' for uid will return true if anything is selected\nexport function newSearchSelection() {\n  // the check is called often, on potentially large (all) results so using Map/Set is better than simple array\n  const items = new Map();\n\n  const isSelected = (kind, uid) => {\n    var _items$get;\n\n    return Boolean((_items$get = items.get(kind)) === null || _items$get === void 0 ? void 0 : _items$get.has(uid));\n  };\n\n  return {\n    items,\n    isSelected\n  };\n}\nexport function updateSearchSelection(old, selected, kind, uids) {\n  const items = old.items; // mutate! :/\n\n  if (uids.length) {\n    const k = items.get(kind);\n\n    if (k) {\n      for (const uid of uids) {\n        if (selected) {\n          k.add(uid);\n        } else {\n          k.delete(uid);\n        }\n      }\n\n      if (k.size < 1) {\n        items.delete(kind);\n      }\n    } else if (selected) {\n      items.set(kind, new Set(uids));\n    }\n  }\n\n  return {\n    items,\n    isSelected: (kind, uid) => {\n      var _items$get4;\n\n      if (uid === '*') {\n        var _items$get3;\n\n        if (kind === '*') {\n          for (const k of items.keys()) {\n            var _items$get2;\n\n            if ((_items$get2 = items.get(k)) !== null && _items$get2 !== void 0 && _items$get2.size) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        return Boolean((_items$get3 = items.get(kind)) === null || _items$get3 === void 0 ? void 0 : _items$get3.size);\n      }\n\n      return Boolean((_items$get4 = items.get(kind)) === null || _items$get4 === void 0 ? void 0 : _items$get4.has(uid));\n    }\n  };\n}","map":{"version":3,"names":["newSearchSelection","items","Map","isSelected","kind","uid","Boolean","get","has","updateSearchSelection","old","selected","uids","length","k","add","delete","size","set","Set","keys"],"sources":["/home/soula/grafana/public/app/features/search/page/selection.ts"],"sourcesContent":["// Using '*' for uid will return true if anything is selected\nexport type SelectionChecker = (kind: string, uid: string) => boolean;\nexport type SelectionToggle = (kind: string, uid: string) => void;\n\nexport interface SearchSelection {\n  // Check if an item is selected\n  isSelected: SelectionChecker;\n\n  // Selected items by kind\n  items: Map<string, Set<string>>;\n}\n\nexport function newSearchSelection(): SearchSelection {\n  // the check is called often, on potentially large (all) results so using Map/Set is better than simple array\n  const items = new Map<string, Set<string>>();\n\n  const isSelected = (kind: string, uid: string) => {\n    return Boolean(items.get(kind)?.has(uid));\n  };\n\n  return {\n    items,\n    isSelected,\n  };\n}\n\nexport function updateSearchSelection(\n  old: SearchSelection,\n  selected: boolean,\n  kind: string,\n  uids: string[]\n): SearchSelection {\n  const items = old.items; // mutate! :/\n\n  if (uids.length) {\n    const k = items.get(kind);\n    if (k) {\n      for (const uid of uids) {\n        if (selected) {\n          k.add(uid);\n        } else {\n          k.delete(uid);\n        }\n      }\n      if (k.size < 1) {\n        items.delete(kind);\n      }\n    } else if (selected) {\n      items.set(kind, new Set<string>(uids));\n    }\n  }\n\n  return {\n    items,\n    isSelected: (kind: string, uid: string) => {\n      if (uid === '*') {\n        if (kind === '*') {\n          for (const k of items.keys()) {\n            if (items.get(k)?.size) {\n              return true;\n            }\n          }\n          return false;\n        }\n        return Boolean(items.get(kind)?.size);\n      }\n      return Boolean(items.get(kind)?.has(uid));\n    },\n  };\n}\n"],"mappings":"AAAA;AAYA,OAAO,SAASA,kBAAT,GAA+C;EACpD;EACA,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;;EAEA,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAeC,GAAf,KAA+B;IAAA;;IAChD,OAAOC,OAAO,eAACL,KAAK,CAACM,GAAN,CAAUH,IAAV,CAAD,+CAAC,WAAiBI,GAAjB,CAAqBH,GAArB,CAAD,CAAd;EACD,CAFD;;EAIA,OAAO;IACLJ,KADK;IAELE;EAFK,CAAP;AAID;AAED,OAAO,SAASM,qBAAT,CACLC,GADK,EAELC,QAFK,EAGLP,IAHK,EAILQ,IAJK,EAKY;EACjB,MAAMX,KAAK,GAAGS,GAAG,CAACT,KAAlB,CADiB,CACQ;;EAEzB,IAAIW,IAAI,CAACC,MAAT,EAAiB;IACf,MAAMC,CAAC,GAAGb,KAAK,CAACM,GAAN,CAAUH,IAAV,CAAV;;IACA,IAAIU,CAAJ,EAAO;MACL,KAAK,MAAMT,GAAX,IAAkBO,IAAlB,EAAwB;QACtB,IAAID,QAAJ,EAAc;UACZG,CAAC,CAACC,GAAF,CAAMV,GAAN;QACD,CAFD,MAEO;UACLS,CAAC,CAACE,MAAF,CAASX,GAAT;QACD;MACF;;MACD,IAAIS,CAAC,CAACG,IAAF,GAAS,CAAb,EAAgB;QACdhB,KAAK,CAACe,MAAN,CAAaZ,IAAb;MACD;IACF,CAXD,MAWO,IAAIO,QAAJ,EAAc;MACnBV,KAAK,CAACiB,GAAN,CAAUd,IAAV,EAAgB,IAAIe,GAAJ,CAAgBP,IAAhB,CAAhB;IACD;EACF;;EAED,OAAO;IACLX,KADK;IAELE,UAAU,EAAE,CAACC,IAAD,EAAeC,GAAf,KAA+B;MAAA;;MACzC,IAAIA,GAAG,KAAK,GAAZ,EAAiB;QAAA;;QACf,IAAID,IAAI,KAAK,GAAb,EAAkB;UAChB,KAAK,MAAMU,CAAX,IAAgBb,KAAK,CAACmB,IAAN,EAAhB,EAA8B;YAAA;;YAC5B,mBAAInB,KAAK,CAACM,GAAN,CAAUO,CAAV,CAAJ,wCAAI,YAAcG,IAAlB,EAAwB;cACtB,OAAO,IAAP;YACD;UACF;;UACD,OAAO,KAAP;QACD;;QACD,OAAOX,OAAO,gBAACL,KAAK,CAACM,GAAN,CAAUH,IAAV,CAAD,gDAAC,YAAiBa,IAAlB,CAAd;MACD;;MACD,OAAOX,OAAO,gBAACL,KAAK,CAACM,GAAN,CAAUH,IAAV,CAAD,gDAAC,YAAiBI,GAAjB,CAAqBH,GAArB,CAAD,CAAd;IACD;EAfI,CAAP;AAiBD"},"metadata":{},"sourceType":"module"}