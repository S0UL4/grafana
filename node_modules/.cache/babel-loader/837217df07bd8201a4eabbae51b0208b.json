{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { MappingType, SpecialValueMatch } from '@grafana/data';\nimport { useStyles2, Modal, ValuePicker, Button } from '@grafana/ui';\nimport { ValueMappingEditRow } from './ValueMappingEditRow';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function ValueMappingsEditorModal({\n  value,\n  onChange,\n  onClose,\n  showIconPicker\n}) {\n  const styles = useStyles2(getStyles);\n  const [rows, updateRows] = useState([]);\n  useEffect(() => {\n    updateRows(buildEditRowModels(value));\n  }, [value]);\n\n  const onDragEnd = result => {\n    if (!value || !result.destination) {\n      return;\n    }\n\n    const copy = [...rows];\n    const element = copy[result.source.index];\n    copy.splice(result.source.index, 1);\n    copy.splice(result.destination.index, 0, element);\n    updateRows(copy);\n  };\n\n  const onChangeMapping = (index, row) => {\n    const newList = [...rows];\n    newList.splice(index, 1, row);\n    updateRows(newList);\n  };\n\n  const onRemoveRow = index => {\n    const newList = [...rows];\n    newList.splice(index, 1);\n    updateRows(newList);\n  };\n\n  const mappingTypes = [{\n    label: 'Value',\n    value: MappingType.ValueToText,\n    description: 'Match a specific text value'\n  }, {\n    label: 'Range',\n    value: MappingType.RangeToText,\n    description: 'Match a numerical range of values'\n  }, {\n    label: 'Regex',\n    value: MappingType.RegexToText,\n    description: 'Match a regular expression with replacement'\n  }, {\n    label: 'Special',\n    value: MappingType.SpecialValue,\n    description: 'Match on null, NaN, boolean and empty values'\n  }];\n\n  const onAddValueMapping = value => {\n    updateRows([...rows, {\n      type: value.value,\n      isNew: true,\n      result: {}\n    }]);\n  };\n\n  const onDuplicateMapping = index => {\n    const sourceRow = rows[index];\n    const copy = [...rows];\n    copy.splice(index, 0, Object.assign({}, sourceRow));\n\n    for (let i = index; i < rows.length; i++) {\n      copy[i].result.index = i;\n    }\n\n    updateRows(copy);\n  };\n\n  const onUpdate = () => {\n    onChange(editModelToSaveModel(rows));\n    onClose();\n  }; // Start with an empty row\n\n\n  useEffect(() => {\n    if (!(value !== null && value !== void 0 && value.length)) {\n      onAddValueMapping({\n        value: MappingType.ValueToText\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.tableWrap,\n      children: /*#__PURE__*/_jsxs(\"table\", {\n        className: styles.editTable,\n        children: [/*#__PURE__*/_jsx(\"thead\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"th\", {\n              style: {\n                width: '1%'\n              }\n            }), /*#__PURE__*/_jsx(\"th\", {\n              style: {\n                width: '40%',\n                textAlign: 'left'\n              },\n              colSpan: 2,\n              children: \"Condition\"\n            }), /*#__PURE__*/_jsx(\"th\", {\n              style: {\n                textAlign: 'left'\n              },\n              children: \"Display text\"\n            }), /*#__PURE__*/_jsx(\"th\", {\n              style: {\n                width: '10%'\n              },\n              children: \"Color\"\n            }), showIconPicker && /*#__PURE__*/_jsx(\"th\", {\n              style: {\n                width: '10%'\n              },\n              children: \"Icon\"\n            }), /*#__PURE__*/_jsx(\"th\", {\n              style: {\n                width: '1%'\n              }\n            })]\n          })\n        }), /*#__PURE__*/_jsx(DragDropContext, {\n          onDragEnd: onDragEnd,\n          children: /*#__PURE__*/_jsx(Droppable, {\n            droppableId: \"sortable-field-mappings\",\n            direction: \"vertical\",\n            children: provided => /*#__PURE__*/_jsxs(\"tbody\", Object.assign({\n              ref: provided.innerRef\n            }, provided.droppableProps, {\n              children: [rows.map((row, index) => /*#__PURE__*/_jsx(ValueMappingEditRow, {\n                mapping: row,\n                index: index,\n                onChange: onChangeMapping,\n                onRemove: onRemoveRow,\n                onDuplicate: onDuplicateMapping,\n                showIconPicker: showIconPicker\n              }, index.toString())), provided.placeholder]\n            }))\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsxs(Modal.ButtonRow, {\n      leftItems: /*#__PURE__*/_jsx(ValuePicker, {\n        label: \"Add a new mapping\",\n        variant: \"secondary\",\n        size: \"md\",\n        icon: \"plus\",\n        menuPlacement: \"auto\",\n        minWidth: 40,\n        options: mappingTypes,\n        onChange: onAddValueMapping\n      }),\n      children: [/*#__PURE__*/_jsx(Button, {\n        variant: \"secondary\",\n        fill: \"outline\",\n        onClick: onClose,\n        children: \"Cancel\"\n      }), /*#__PURE__*/_jsx(Button, {\n        variant: \"primary\",\n        onClick: onUpdate,\n        children: \"Update\"\n      })]\n    })]\n  });\n}\nexport const getStyles = theme => ({\n  tableWrap: css`\n    max-height: calc(80vh - 170px);\n    min-height: 40px;\n    overflow: auto;\n  `,\n  editTable: css({\n    width: '100%',\n    marginBottom: theme.spacing(2),\n    'thead th': {\n      textAlign: 'center'\n    },\n    'tbody tr:hover': {\n      background: theme.colors.action.hover\n    },\n    ' th, td': {\n      padding: theme.spacing(1)\n    }\n  })\n});\nexport function editModelToSaveModel(rows) {\n  const mappings = [];\n  const valueMaps = {\n    type: MappingType.ValueToText,\n    options: {}\n  };\n  rows.forEach((item, index) => {\n    const result = Object.assign({}, item.result, {\n      index\n    }); // Set empty texts to undefined\n\n    if (!result.text || result.text.trim().length === 0) {\n      result.text = undefined;\n    }\n\n    switch (item.type) {\n      case MappingType.ValueToText:\n        if (item.key != null) {\n          valueMaps.options[item.key] = result;\n        }\n\n        break;\n\n      case MappingType.RangeToText:\n        if (item.from != null && item.to != null) {\n          mappings.push({\n            type: item.type,\n            options: {\n              from: item.from,\n              to: item.to,\n              result\n            }\n          });\n        }\n\n        break;\n\n      case MappingType.RegexToText:\n        if (item.pattern != null) {\n          mappings.push({\n            type: item.type,\n            options: {\n              pattern: item.pattern,\n              result\n            }\n          });\n        }\n\n        break;\n\n      case MappingType.SpecialValue:\n        mappings.push({\n          type: item.type,\n          options: {\n            match: item.specialMatch,\n            result\n          }\n        });\n    }\n  });\n\n  if (Object.keys(valueMaps.options).length > 0) {\n    mappings.unshift(valueMaps);\n  }\n\n  return mappings;\n}\nexport function buildEditRowModels(value) {\n  var _mapping$options$from, _mapping$options$to, _mapping$options$matc;\n\n  const editRows = [];\n\n  if (value) {\n    for (const mapping of value) {\n      switch (mapping.type) {\n        case MappingType.ValueToText:\n          for (const key of Object.keys(mapping.options)) {\n            editRows.push({\n              type: mapping.type,\n              result: mapping.options[key],\n              key\n            });\n          }\n\n          break;\n\n        case MappingType.RangeToText:\n          editRows.push({\n            type: mapping.type,\n            result: mapping.options.result,\n            from: (_mapping$options$from = mapping.options.from) !== null && _mapping$options$from !== void 0 ? _mapping$options$from : 0,\n            to: (_mapping$options$to = mapping.options.to) !== null && _mapping$options$to !== void 0 ? _mapping$options$to : 0\n          });\n          break;\n\n        case MappingType.RegexToText:\n          editRows.push({\n            type: mapping.type,\n            result: mapping.options.result,\n            pattern: mapping.options.pattern\n          });\n          break;\n\n        case MappingType.SpecialValue:\n          editRows.push({\n            type: mapping.type,\n            result: mapping.options.result,\n            specialMatch: (_mapping$options$matc = mapping.options.match) !== null && _mapping$options$matc !== void 0 ? _mapping$options$matc : SpecialValueMatch.Null\n          });\n      }\n    }\n  } // Sort by index\n\n\n  editRows.sort((a, b) => {\n    var _a$result$index, _b$result$index;\n\n    return ((_a$result$index = a.result.index) !== null && _a$result$index !== void 0 ? _a$result$index : 0) > ((_b$result$index = b.result.index) !== null && _b$result$index !== void 0 ? _b$result$index : 0) ? 1 : -1;\n  });\n  return editRows;\n}","map":{"version":3,"names":["css","React","useEffect","useState","DragDropContext","Droppable","MappingType","SpecialValueMatch","useStyles2","Modal","ValuePicker","Button","ValueMappingEditRow","ValueMappingsEditorModal","value","onChange","onClose","showIconPicker","styles","getStyles","rows","updateRows","buildEditRowModels","onDragEnd","result","destination","copy","element","source","index","splice","onChangeMapping","row","newList","onRemoveRow","mappingTypes","label","ValueToText","description","RangeToText","RegexToText","SpecialValue","onAddValueMapping","type","isNew","onDuplicateMapping","sourceRow","i","length","onUpdate","editModelToSaveModel","tableWrap","editTable","width","textAlign","provided","innerRef","droppableProps","map","toString","placeholder","theme","marginBottom","spacing","background","colors","action","hover","padding","mappings","valueMaps","options","forEach","item","text","trim","undefined","key","from","to","push","pattern","match","specialMatch","Object","keys","unshift","editRows","mapping","Null","sort","a","b"],"sources":["/home/soula/grafana/public/app/features/dimensions/editors/ValueMappingsEditor/ValueMappingsEditorModal.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2, MappingType, SelectableValue, SpecialValueMatch, ValueMapping } from '@grafana/data';\nimport { useStyles2, Modal, ValuePicker, Button } from '@grafana/ui';\n\nimport { ValueMappingEditRow, ValueMappingEditRowModel } from './ValueMappingEditRow';\n\nexport interface Props {\n  value: ValueMapping[];\n  onChange: (valueMappings: ValueMapping[]) => void;\n  onClose: () => void;\n  showIconPicker?: boolean;\n}\n\nexport function ValueMappingsEditorModal({ value, onChange, onClose, showIconPicker }: Props) {\n  const styles = useStyles2(getStyles);\n  const [rows, updateRows] = useState<ValueMappingEditRowModel[]>([]);\n\n  useEffect(() => {\n    updateRows(buildEditRowModels(value));\n  }, [value]);\n\n  const onDragEnd = (result: DropResult) => {\n    if (!value || !result.destination) {\n      return;\n    }\n\n    const copy = [...rows];\n    const element = copy[result.source.index];\n    copy.splice(result.source.index, 1);\n    copy.splice(result.destination.index, 0, element);\n    updateRows(copy);\n  };\n\n  const onChangeMapping = (index: number, row: ValueMappingEditRowModel) => {\n    const newList = [...rows];\n    newList.splice(index, 1, row);\n    updateRows(newList);\n  };\n\n  const onRemoveRow = (index: number) => {\n    const newList = [...rows];\n    newList.splice(index, 1);\n    updateRows(newList);\n  };\n\n  const mappingTypes: Array<SelectableValue<MappingType>> = [\n    { label: 'Value', value: MappingType.ValueToText, description: 'Match a specific text value' },\n    { label: 'Range', value: MappingType.RangeToText, description: 'Match a numerical range of values' },\n    { label: 'Regex', value: MappingType.RegexToText, description: 'Match a regular expression with replacement' },\n    { label: 'Special', value: MappingType.SpecialValue, description: 'Match on null, NaN, boolean and empty values' },\n  ];\n\n  const onAddValueMapping = (value: SelectableValue<MappingType>) => {\n    updateRows([\n      ...rows,\n      {\n        type: value.value!,\n        isNew: true,\n        result: {},\n      },\n    ]);\n  };\n\n  const onDuplicateMapping = (index: number) => {\n    const sourceRow = rows[index];\n    const copy = [...rows];\n    copy.splice(index, 0, { ...sourceRow });\n\n    for (let i = index; i < rows.length; i++) {\n      copy[i].result.index = i;\n    }\n\n    updateRows(copy);\n  };\n\n  const onUpdate = () => {\n    onChange(editModelToSaveModel(rows));\n    onClose();\n  };\n\n  // Start with an empty row\n  useEffect(() => {\n    if (!value?.length) {\n      onAddValueMapping({ value: MappingType.ValueToText });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <div className={styles.tableWrap}>\n        <table className={styles.editTable}>\n          <thead>\n            <tr>\n              <th style={{ width: '1%' }}></th>\n              <th style={{ width: '40%', textAlign: 'left' }} colSpan={2}>\n                Condition\n              </th>\n              <th style={{ textAlign: 'left' }}>Display text</th>\n              <th style={{ width: '10%' }}>Color</th>\n              {showIconPicker && <th style={{ width: '10%' }}>Icon</th>}\n              <th style={{ width: '1%' }}></th>\n            </tr>\n          </thead>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"sortable-field-mappings\" direction=\"vertical\">\n              {(provided) => (\n                <tbody ref={provided.innerRef} {...provided.droppableProps}>\n                  {rows.map((row, index) => (\n                    <ValueMappingEditRow\n                      key={index.toString()}\n                      mapping={row}\n                      index={index}\n                      onChange={onChangeMapping}\n                      onRemove={onRemoveRow}\n                      onDuplicate={onDuplicateMapping}\n                      showIconPicker={showIconPicker}\n                    />\n                  ))}\n                  {provided.placeholder}\n                </tbody>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </table>\n      </div>\n\n      <Modal.ButtonRow\n        leftItems={\n          <ValuePicker\n            label=\"Add a new mapping\"\n            variant=\"secondary\"\n            size=\"md\"\n            icon=\"plus\"\n            menuPlacement=\"auto\"\n            minWidth={40}\n            options={mappingTypes}\n            onChange={onAddValueMapping}\n          />\n        }\n      >\n        <Button variant=\"secondary\" fill=\"outline\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={onUpdate}>\n          Update\n        </Button>\n      </Modal.ButtonRow>\n    </>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  tableWrap: css`\n    max-height: calc(80vh - 170px);\n    min-height: 40px;\n    overflow: auto;\n  `,\n\n  editTable: css({\n    width: '100%',\n    marginBottom: theme.spacing(2),\n\n    'thead th': {\n      textAlign: 'center',\n    },\n\n    'tbody tr:hover': {\n      background: theme.colors.action.hover,\n    },\n\n    ' th, td': {\n      padding: theme.spacing(1),\n    },\n  }),\n});\n\nexport function editModelToSaveModel(rows: ValueMappingEditRowModel[]) {\n  const mappings: ValueMapping[] = [];\n  const valueMaps: ValueMapping = {\n    type: MappingType.ValueToText,\n    options: {},\n  };\n\n  rows.forEach((item, index) => {\n    const result = {\n      ...item.result,\n      index,\n    };\n\n    // Set empty texts to undefined\n    if (!result.text || result.text.trim().length === 0) {\n      result.text = undefined;\n    }\n\n    switch (item.type) {\n      case MappingType.ValueToText:\n        if (item.key != null) {\n          valueMaps.options[item.key] = result;\n        }\n        break;\n      case MappingType.RangeToText:\n        if (item.from != null && item.to != null) {\n          mappings.push({\n            type: item.type,\n            options: {\n              from: item.from,\n              to: item.to,\n              result,\n            },\n          });\n        }\n        break;\n      case MappingType.RegexToText:\n        if (item.pattern != null) {\n          mappings.push({\n            type: item.type,\n            options: {\n              pattern: item.pattern,\n              result,\n            },\n          });\n        }\n        break;\n      case MappingType.SpecialValue:\n        mappings.push({\n          type: item.type,\n          options: {\n            match: item.specialMatch!,\n            result,\n          },\n        });\n    }\n  });\n\n  if (Object.keys(valueMaps.options).length > 0) {\n    mappings.unshift(valueMaps);\n  }\n  return mappings;\n}\n\nexport function buildEditRowModels(value: ValueMapping[]) {\n  const editRows: ValueMappingEditRowModel[] = [];\n\n  if (value) {\n    for (const mapping of value) {\n      switch (mapping.type) {\n        case MappingType.ValueToText:\n          for (const key of Object.keys(mapping.options)) {\n            editRows.push({\n              type: mapping.type,\n              result: mapping.options[key],\n              key,\n            });\n          }\n          break;\n        case MappingType.RangeToText:\n          editRows.push({\n            type: mapping.type,\n            result: mapping.options.result,\n            from: mapping.options.from ?? 0,\n            to: mapping.options.to ?? 0,\n          });\n          break;\n        case MappingType.RegexToText:\n          editRows.push({\n            type: mapping.type,\n            result: mapping.options.result,\n            pattern: mapping.options.pattern,\n          });\n          break;\n        case MappingType.SpecialValue:\n          editRows.push({\n            type: mapping.type,\n            result: mapping.options.result,\n            specialMatch: mapping.options.match ?? SpecialValueMatch.Null,\n          });\n      }\n    }\n  }\n\n  // Sort by index\n  editRows.sort((a, b) => {\n    return (a.result.index ?? 0) > (b.result.index ?? 0) ? 1 : -1;\n  });\n\n  return editRows;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}