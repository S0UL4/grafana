{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const PromQueryBuilderHints = /*#__PURE__*/React.memo(({\n  datasource,\n  query,\n  onChange,\n  data\n}) => {\n  const [hints, setHints] = useState([]);\n  const styles = useStyles2(getStyles);\n  useEffect(() => {\n    const promQuery = {\n      expr: promQueryModeller.renderQuery(query),\n      refId: ''\n    }; // For now show only actionable hints\n\n    const hints = datasource.getQueryHints(promQuery, (data === null || data === void 0 ? void 0 : data.series) || []).filter(hint => {\n      var _hint$fix;\n\n      return (_hint$fix = hint.fix) === null || _hint$fix === void 0 ? void 0 : _hint$fix.action;\n    });\n    setHints(hints);\n  }, [datasource, query, onChange, data, styles.hint]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: hints.length > 0 && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.container,\n      children: hints.map(hint => {\n        var _hint$fix2, _hint$fix3, _hint$fix3$action;\n\n        return /*#__PURE__*/_jsx(Tooltip, {\n          content: `${hint.label} ${(_hint$fix2 = hint.fix) === null || _hint$fix2 === void 0 ? void 0 : _hint$fix2.label}`,\n          children: /*#__PURE__*/_jsx(Button, {\n            onClick: () => {\n              const promQuery = {\n                expr: promQueryModeller.renderQuery(query),\n                refId: ''\n              };\n              const newPromQuery = datasource.modifyQuery(promQuery, hint.fix.action);\n              const visualQuery = buildVisualQueryFromString(newPromQuery.expr);\n              return onChange(visualQuery.query);\n            },\n            fill: \"outline\",\n            size: \"sm\",\n            className: styles.hint,\n            children: 'hint: ' + ((_hint$fix3 = hint.fix) === null || _hint$fix3 === void 0 ? void 0 : (_hint$fix3$action = _hint$fix3.action) === null || _hint$fix3$action === void 0 ? void 0 : _hint$fix3$action.type.toLowerCase().replace('_', ' ')) + '()'\n          })\n        }, hint.type);\n      })\n    })\n  });\n});\nPromQueryBuilderHints.displayName = 'PromQueryBuilderHints';\n\nconst getStyles = theme => {\n  return {\n    container: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(1)};\n      align-items: center;\n    `,\n    hint: css`\n      margin-right: ${theme.spacing(1)};\n    `\n  };\n};","map":{"version":3,"names":["css","React","useState","useEffect","Button","Tooltip","useStyles2","promQueryModeller","buildVisualQueryFromString","PromQueryBuilderHints","memo","datasource","query","onChange","data","hints","setHints","styles","getStyles","promQuery","expr","renderQuery","refId","getQueryHints","series","filter","hint","fix","action","length","container","map","label","newPromQuery","modifyQuery","visualQuery","type","toLowerCase","replace","displayName","theme","spacing"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderHints.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2, PanelData, QueryHint } from '@grafana/data';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  data?: PanelData;\n}\n\nexport const PromQueryBuilderHints = React.memo<Props>(({ datasource, query, onChange, data }) => {\n  const [hints, setHints] = useState<QueryHint[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const promQuery = { expr: promQueryModeller.renderQuery(query), refId: '' };\n    // For now show only actionable hints\n    const hints = datasource.getQueryHints(promQuery, data?.series || []).filter((hint) => hint.fix?.action);\n    setHints(hints);\n  }, [datasource, query, onChange, data, styles.hint]);\n\n  return (\n    <>\n      {hints.length > 0 && (\n        <div className={styles.container}>\n          {hints.map((hint) => {\n            return (\n              <Tooltip content={`${hint.label} ${hint.fix?.label}`} key={hint.type}>\n                <Button\n                  onClick={() => {\n                    const promQuery = { expr: promQueryModeller.renderQuery(query), refId: '' };\n                    const newPromQuery = datasource.modifyQuery(promQuery, hint!.fix!.action);\n                    const visualQuery = buildVisualQueryFromString(newPromQuery.expr);\n                    return onChange(visualQuery.query);\n                  }}\n                  fill=\"outline\"\n                  size=\"sm\"\n                  className={styles.hint}\n                >\n                  {'hint: ' + hint.fix?.action?.type.toLowerCase().replace('_', ' ') + '()'}\n                </Button>\n              </Tooltip>\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n});\n\nPromQueryBuilderHints.displayName = 'PromQueryBuilderHints';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(1)};\n      align-items: center;\n    `,\n    hint: css`\n      margin-right: ${theme.spacing(1)};\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}