{"ast":null,"code":"var _Icon, _UpgradeBox, _h, _Tooltip, _div, _Icon2, _th;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Input, Tooltip, Icon, Button, useTheme2, InlineField, InlineFieldRow } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { UpgradeBox, UpgradeContent } from 'app/core/components/Upgrade/UpgradeBox';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction mapStateToProps(state) {\n  return {\n    groups: getTeamGroups(state.team)\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nconst headerTooltip = `Sync LDAP, OAuth or SAML groups with your Grafana teams.`;\nexport class TeamGroupSync extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onToggleAdding\", () => {\n      this.setState({\n        isAdding: !this.state.isAdding\n      });\n    });\n\n    _defineProperty(this, \"onNewGroupIdChanged\", event => {\n      this.setState({\n        newGroupId: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onAddGroup\", event => {\n      event.preventDefault();\n      this.props.addTeamGroup(this.state.newGroupId);\n      this.setState({\n        isAdding: false,\n        newGroupId: ''\n      });\n    });\n\n    _defineProperty(this, \"onRemoveGroup\", group => {\n      this.props.removeTeamGroup(group.groupId);\n    });\n\n    this.state = {\n      isAdding: false,\n      newGroupId: ''\n    };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group) {\n    const {\n      isReadOnly\n    } = this.props;\n    return /*#__PURE__*/_jsxs(\"tr\", {\n      children: [/*#__PURE__*/_jsx(\"td\", {\n        children: group.groupId\n      }), /*#__PURE__*/_jsx(\"td\", {\n        style: {\n          width: '1%'\n        },\n        children: /*#__PURE__*/_jsx(Button, {\n          size: \"sm\",\n          variant: \"destructive\",\n          onClick: () => this.onRemoveGroup(group),\n          disabled: isReadOnly,\n          \"aria-label\": `Remove group ${group.groupId}`,\n          children: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n            name: \"times\"\n          }))\n        })\n      })]\n    }, group.groupId);\n  }\n\n  render() {\n    const {\n      isAdding,\n      newGroupId\n    } = this.state;\n    const {\n      groups,\n      isReadOnly\n    } = this.props;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [highlightTrial() && (_UpgradeBox || (_UpgradeBox = /*#__PURE__*/_jsx(UpgradeBox, {\n        featureId: 'team-sync',\n        eventVariant: 'trial',\n        featureName: 'team sync',\n        text: 'Add a group to enable team sync for free during your trial of Grafana Pro.'\n      }))), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"page-action-bar\",\n        children: [(!highlightTrial() || groups.length > 0) && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n            className: \"page-sub-heading\",\n            children: \"External group sync\"\n          })), _Tooltip || (_Tooltip = /*#__PURE__*/_jsx(Tooltip, {\n            placement: \"auto\",\n            content: headerTooltip,\n            children: /*#__PURE__*/_jsx(Icon, {\n              className: \"icon--has-hover page-sub-heading-icon\",\n              name: \"question-circle\"\n            })\n          }))]\n        }), _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n          className: \"page-action-bar__spacer\"\n        })), groups.length > 0 && /*#__PURE__*/_jsxs(Button, {\n          className: \"pull-right\",\n          onClick: this.onToggleAdding,\n          disabled: isReadOnly,\n          children: [_Icon2 || (_Icon2 = /*#__PURE__*/_jsx(Icon, {\n            name: \"plus\"\n          })), \" Add group\"]\n        })]\n      }), /*#__PURE__*/_jsx(SlideDown, {\n        in: isAdding,\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"cta-form\",\n          children: [/*#__PURE__*/_jsx(CloseButton, {\n            onClick: this.onToggleAdding\n          }), /*#__PURE__*/_jsx(\"form\", {\n            onSubmit: this.onAddGroup,\n            children: /*#__PURE__*/_jsxs(InlineFieldRow, {\n              children: [/*#__PURE__*/_jsx(InlineField, {\n                label: 'Add External Group',\n                tooltip: \"LDAP Group Example: cn=users,ou=groups,dc=grafana,dc=org.\",\n                children: /*#__PURE__*/_jsx(Input, {\n                  type: \"text\",\n                  id: 'add-external-group',\n                  placeholder: \"\",\n                  value: newGroupId,\n                  onChange: this.onNewGroupIdChanged,\n                  disabled: isReadOnly\n                })\n              }), /*#__PURE__*/_jsx(Button, {\n                type: \"submit\",\n                disabled: isReadOnly || !this.isNewGroupValid(),\n                style: {\n                  marginLeft: 4\n                },\n                children: \"Add group\"\n              })]\n            })\n          })]\n        })\n      }), groups.length === 0 && !isAdding && (highlightTrial() ? /*#__PURE__*/_jsx(TeamSyncUpgradeContent, {\n        action: {\n          onClick: this.onToggleAdding,\n          text: 'Add group'\n        }\n      }) : /*#__PURE__*/_jsx(EmptyListCTA, {\n        onClick: this.onToggleAdding,\n        buttonIcon: \"users-alt\",\n        title: \"There are no external groups to sync with\",\n        buttonTitle: \"Add group\",\n        proTip: headerTooltip,\n        proTipLinkTitle: \"Learn more\",\n        proTipLink: \"https://docs.grafana.org/auth/enhanced_ldap/\",\n        proTipTarget: \"_blank\",\n        buttonDisabled: isReadOnly\n      })), groups.length > 0 && /*#__PURE__*/_jsx(\"div\", {\n        className: \"admin-list-table\",\n        children: /*#__PURE__*/_jsxs(\"table\", {\n          className: \"filter-table filter-table--hover form-inline\",\n          children: [/*#__PURE__*/_jsx(\"thead\", {\n            children: /*#__PURE__*/_jsxs(\"tr\", {\n              children: [_th || (_th = /*#__PURE__*/_jsx(\"th\", {\n                children: \"External Group ID\"\n              })), /*#__PURE__*/_jsx(\"th\", {\n                style: {\n                  width: '1%'\n                }\n              })]\n            })\n          }), /*#__PURE__*/_jsx(\"tbody\", {\n            children: groups.map(group => this.renderGroup(group))\n          })]\n        })\n      })]\n    });\n  }\n\n}\nexport const TeamSyncUpgradeContent = ({\n  action\n}) => {\n  const theme = useTheme2();\n  return /*#__PURE__*/_jsx(UpgradeContent, {\n    action: action,\n    listItems: ['Stop managing user access in two places - assign users to groups in SAML, LDAP or Oauth, and manage access at a Team level in Grafana', 'Update users’ permissions immediately when you add or remove them from an LDAP group, with no need for them to sign out and back in'],\n    image: `team-sync-${theme.isLight ? 'light' : 'dark'}.png`,\n    featureName: 'team sync',\n    featureUrl: 'https://grafana.com/docs/grafana/latest/enterprise/team-sync',\n    description: 'Team Sync makes it easier for you to manage users’ access in Grafana, by immediately updating each user’s Grafana teams and permissions based on their single sign-on group membership, instead of when users sign in.'\n  });\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);","map":{"version":3,"names":["React","PureComponent","connect","Input","Tooltip","Icon","Button","useTheme2","InlineField","InlineFieldRow","SlideDown","CloseButton","EmptyListCTA","UpgradeBox","UpgradeContent","highlightTrial","addTeamGroup","loadTeamGroups","removeTeamGroup","getTeamGroups","mapStateToProps","state","groups","team","mapDispatchToProps","connector","headerTooltip","TeamGroupSync","constructor","props","setState","isAdding","event","newGroupId","target","value","preventDefault","group","groupId","componentDidMount","fetchTeamGroups","isNewGroupValid","length","renderGroup","isReadOnly","width","onRemoveGroup","render","onToggleAdding","onAddGroup","onNewGroupIdChanged","marginLeft","onClick","text","map","TeamSyncUpgradeContent","action","theme","isLight"],"sources":["/home/soula/grafana/public/app/features/teams/TeamGroupSync.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Input, Tooltip, Icon, Button, useTheme2, InlineField, InlineFieldRow } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { UpgradeBox, UpgradeContent, UpgradeContentProps } from 'app/core/components/Upgrade/UpgradeBox';\nimport { highlightTrial } from 'app/features/admin/utils';\n\nimport { StoreState, TeamGroup } from '../../types';\n\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\ninterface OwnProps {\n  isReadOnly: boolean;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst headerTooltip = `Sync LDAP, OAuth or SAML groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    const { isReadOnly } = this.props;\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <Button\n            size=\"sm\"\n            variant=\"destructive\"\n            onClick={() => this.onRemoveGroup(group)}\n            disabled={isReadOnly}\n            aria-label={`Remove group ${group.groupId}`}\n          >\n            <Icon name=\"times\" />\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const { groups, isReadOnly } = this.props;\n    return (\n      <div>\n        {highlightTrial() && (\n          <UpgradeBox\n            featureId={'team-sync'}\n            eventVariant={'trial'}\n            featureName={'team sync'}\n            text={'Add a group to enable team sync for free during your trial of Grafana Pro.'}\n          />\n        )}\n        <div className=\"page-action-bar\">\n          {(!highlightTrial() || groups.length > 0) && (\n            <>\n              <h3 className=\"page-sub-heading\">External group sync</h3>\n              <Tooltip placement=\"auto\" content={headerTooltip}>\n                <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n              </Tooltip>\n            </>\n          )}\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isReadOnly}>\n              <Icon name=\"plus\" /> Add group\n            </Button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <form onSubmit={this.onAddGroup}>\n              <InlineFieldRow>\n                <InlineField\n                  label={'Add External Group'}\n                  tooltip=\"LDAP Group Example: cn=users,ou=groups,dc=grafana,dc=org.\"\n                >\n                  <Input\n                    type=\"text\"\n                    id={'add-external-group'}\n                    placeholder=\"\"\n                    value={newGroupId}\n                    onChange={this.onNewGroupIdChanged}\n                    disabled={isReadOnly}\n                  />\n                </InlineField>\n                <Button type=\"submit\" disabled={isReadOnly || !this.isNewGroupValid()} style={{ marginLeft: 4 }}>\n                  Add group\n                </Button>\n              </InlineFieldRow>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 &&\n          !isAdding &&\n          (highlightTrial() ? (\n            <TeamSyncUpgradeContent action={{ onClick: this.onToggleAdding, text: 'Add group' }} />\n          ) : (\n            <EmptyListCTA\n              onClick={this.onToggleAdding}\n              buttonIcon=\"users-alt\"\n              title=\"There are no external groups to sync with\"\n              buttonTitle=\"Add group\"\n              proTip={headerTooltip}\n              proTipLinkTitle=\"Learn more\"\n              proTipLink=\"https://docs.grafana.org/auth/enhanced_ldap/\"\n              proTipTarget=\"_blank\"\n              buttonDisabled={isReadOnly}\n            />\n          ))}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map((group) => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const TeamSyncUpgradeContent = ({ action }: { action?: UpgradeContentProps['action'] }) => {\n  const theme = useTheme2();\n  return (\n    <UpgradeContent\n      action={action}\n      listItems={[\n        'Stop managing user access in two places - assign users to groups in SAML, LDAP or Oauth, and manage access at a Team level in Grafana',\n        'Update users’ permissions immediately when you add or remove them from an LDAP group, with no need for them to sign out and back in',\n      ]}\n      image={`team-sync-${theme.isLight ? 'light' : 'dark'}.png`}\n      featureName={'team sync'}\n      featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/team-sync'}\n      description={\n        'Team Sync makes it easier for you to manage users’ access in Grafana, by immediately updating each user’s Grafana teams and permissions based on their single sign-on group membership, instead of when users sign in.'\n      }\n    />\n  );\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}