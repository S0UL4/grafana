{"ast":null,"code":"import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport React, { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Button, CodeEditor, Drawer, Tab, TabsBar, useStyles2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst tabs = [{\n  label: 'Yaml',\n  value: 'yaml'\n}];\nexport const RuleInspector = ({\n  onClose\n}) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const {\n    setValue\n  } = useFormContext();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = formValues => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n\n    onClose();\n  };\n\n  return /*#__PURE__*/_jsx(Drawer, {\n    title: \"Inspect Alert rule\",\n    subtitle: /*#__PURE__*/_jsx(\"div\", {\n      className: styles.subtitle,\n      children: /*#__PURE__*/_jsx(RuleInspectorSubtitle, {\n        setActiveTab: setActiveTab,\n        activeTab: activeTab\n      })\n    }),\n    onClose: onClose,\n    children: activeTab === 'yaml' && /*#__PURE__*/_jsx(InspectorYamlTab, {\n      onSubmit: onApply\n    })\n  });\n};\n\nconst RuleInspectorSubtitle = ({\n  activeTab,\n  setActiveTab\n}) => {\n  return /*#__PURE__*/_jsx(TabsBar, {\n    children: tabs.map((tab, index) => {\n      return /*#__PURE__*/_jsx(Tab, {\n        label: tab.label,\n        value: tab.value,\n        onChangeTab: () => setActiveTab(tab.value),\n        active: activeTab === tab.value\n      }, `${tab.value}-${index}`);\n    })\n  });\n};\n\nconst InspectorYamlTab = ({\n  onSubmit\n}) => {\n  const styles = useStyles2(yamlTabStyle);\n  const {\n    getValues\n  } = useFormContext();\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(getValues()));\n\n  const onApply = () => {\n    onSubmit(load(alertRuleAsYaml));\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.applyButton,\n      children: /*#__PURE__*/_jsx(Button, {\n        type: \"button\",\n        onClick: onApply,\n        children: \"Apply\"\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.content,\n      children: /*#__PURE__*/_jsx(AutoSizer, {\n        disableWidth: true,\n        children: ({\n          height\n        }) => /*#__PURE__*/_jsx(CodeEditor, {\n          width: \"100%\",\n          height: height,\n          language: \"yaml\",\n          value: alertRuleAsYaml,\n          onBlur: setAlertRuleAsYaml,\n          monacoOptions: {\n            minimap: {\n              enabled: false\n            }\n          }\n        })\n      })\n    })]\n  });\n};\n\nconst yamlTabStyle = theme => ({\n  content: css`\n    flex-grow: 1;\n    height: 100%;\n    padding-bottom: 16px;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  applyButton: css`\n    display: flex;\n    flex-grow: 0;\n  `\n});\n\nconst drawerStyles = () => ({\n  subtitle: css`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  `\n});","map":{"version":3,"names":["css","dump","load","React","useState","useFormContext","AutoSizer","Button","CodeEditor","Drawer","Tab","TabsBar","useStyles2","tabs","label","value","RuleInspector","onClose","activeTab","setActiveTab","setValue","styles","drawerStyles","onApply","formValues","key","subtitle","RuleInspectorSubtitle","map","tab","index","InspectorYamlTab","onSubmit","yamlTabStyle","getValues","alertRuleAsYaml","setAlertRuleAsYaml","applyButton","content","height","minimap","enabled","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport React, { FC, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Tab, TabsBar, useStyles2 } from '@grafana/ui';\n\nimport { RuleFormValues } from '../../types/rule-form';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst tabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector: FC<Props> = ({ onClose }) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title=\"Inspect Alert rule\"\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorSubtitle setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface SubtitleProps {\n  activeTab: string;\n  setActiveTab: (tab: string) => void;\n}\n\nconst RuleInspectorSubtitle: FC<SubtitleProps> = ({ activeTab, setActiveTab }) => {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n};\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab: FC<YamlTabProps> = ({ onSubmit }) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(getValues()));\n\n  const onApply = () => {\n    onSubmit(load(alertRuleAsYaml) as RuleFormValues);\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          Apply\n        </Button>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nconst yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css`\n    flex-grow: 1;\n    height: 100%;\n    padding-bottom: 16px;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  applyButton: css`\n    display: flex;\n    flex-grow: 0;\n  `,\n});\n\nconst drawerStyles = () => ({\n  subtitle: css`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}