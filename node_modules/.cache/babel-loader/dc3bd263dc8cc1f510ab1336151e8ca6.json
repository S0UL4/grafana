{"ast":null,"code":"var _Badge;\n\nimport { css } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useToggle, useWindowSize } from 'react-use';\nimport { applyFieldOverrides } from '@grafana/data';\nimport { Badge, Collapse, useStyles2, useTheme2 } from '@grafana/ui';\nimport { NodeGraph } from '../../plugins/panel/nodeGraph';\nimport { useCategorizeFrames } from '../../plugins/panel/nodeGraph/useCategorizeFrames';\nimport { splitOpen } from './state/main';\nimport { useLinks } from './utils/links';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst getStyles = theme => ({\n  warningText: css`\n    label: warningText;\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n  `\n});\n\nexport function UnconnectedNodeGraphContainer(props) {\n  var _nodes$;\n\n  const {\n    dataFrames,\n    range,\n    splitOpen,\n    withTraceView\n  } = props;\n  const getLinks = useLinks(range, splitOpen);\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles); // This is implicit dependency that is needed for links to work. At some point when replacing variables in the link\n  // it requires field to have a display property which is added by the overrides even though we don't add any field\n  // overrides in explore.\n\n  const frames = applyFieldOverrides({\n    fieldConfig: {\n      defaults: {},\n      overrides: []\n    },\n    data: dataFrames,\n    // We don't need proper replace here as it is only used in getLinks and we use getFieldLinks\n    replaceVariables: value => value,\n    theme\n  });\n  const {\n    nodes\n  } = useCategorizeFrames(frames);\n  const [open, toggleOpen] = useToggle(false); // Calculate node graph height based on window and top position, with some padding\n\n  const {\n    height: windowHeight\n  } = useWindowSize();\n  const containerRef = useRef(null);\n  const [top, setTop] = useState(250);\n  useEffect(() => {\n    if (containerRef.current) {\n      const {\n        top\n      } = containerRef.current.getBoundingClientRect();\n      setTop(top);\n    }\n  }, [containerRef]);\n  const height = windowHeight - top - 32;\n  const countWarning = withTraceView && ((_nodes$ = nodes[0]) === null || _nodes$ === void 0 ? void 0 : _nodes$.length) > 1000 ? /*#__PURE__*/_jsxs(\"span\", {\n    className: styles.warningText,\n    children: [\" (\", nodes[0].length, \" nodes, can be slow to load)\"]\n  }) : null;\n  return /*#__PURE__*/_jsx(Collapse, {\n    label: /*#__PURE__*/_jsxs(\"span\", {\n      children: [\"Node graph\", countWarning, ' ', _Badge || (_Badge = /*#__PURE__*/_jsx(Badge, {\n        text: 'Beta',\n        color: 'blue',\n        icon: 'rocket',\n        tooltip: 'This visualization is in beta'\n      }))]\n    }),\n    collapsible: withTraceView // We allow collapsing this only when it is shown together with trace view.\n    ,\n    isOpen: withTraceView ? open : true,\n    onToggle: withTraceView ? () => toggleOpen() : undefined,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      ref: containerRef,\n      style: withTraceView ? {\n        height: 500\n      } : {\n        minHeight: 600,\n        height\n      },\n      children: /*#__PURE__*/_jsx(NodeGraph, {\n        dataFrames: frames,\n        getLinks: getLinks\n      })\n    })\n  });\n}\n\nfunction mapStateToProps(state, {\n  exploreId\n}) {\n  return {\n    range: state.explore[exploreId].range\n  };\n}\n\nconst mapDispatchToProps = {\n  splitOpen\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport const NodeGraphContainer = connector(UnconnectedNodeGraphContainer);","map":{"version":3,"names":["css","React","useEffect","useRef","useState","connect","useToggle","useWindowSize","applyFieldOverrides","Badge","Collapse","useStyles2","useTheme2","NodeGraph","useCategorizeFrames","splitOpen","useLinks","getStyles","theme","warningText","typography","bodySmall","fontSize","colors","text","secondary","UnconnectedNodeGraphContainer","props","dataFrames","range","withTraceView","getLinks","styles","frames","fieldConfig","defaults","overrides","data","replaceVariables","value","nodes","open","toggleOpen","height","windowHeight","containerRef","top","setTop","current","getBoundingClientRect","countWarning","length","undefined","minHeight","mapStateToProps","state","exploreId","explore","mapDispatchToProps","connector","NodeGraphContainer"],"sources":["/home/soula/grafana/public/app/features/explore/NodeGraphContainer.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useToggle, useWindowSize } from 'react-use';\n\nimport { applyFieldOverrides, DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Collapse, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { NodeGraph } from '../../plugins/panel/nodeGraph';\nimport { useCategorizeFrames } from '../../plugins/panel/nodeGraph/useCategorizeFrames';\nimport { ExploreId, StoreState } from '../../types';\n\nimport { splitOpen } from './state/main';\nimport { useLinks } from './utils/links';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  warningText: css`\n    label: warningText;\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ninterface OwnProps {\n  // Edges and Nodes are separate frames\n  dataFrames: DataFrame[];\n  exploreId: ExploreId;\n  // When showing the node graph together with trace view we do some changes so it works better.\n  withTraceView?: boolean;\n}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function UnconnectedNodeGraphContainer(props: Props) {\n  const { dataFrames, range, splitOpen, withTraceView } = props;\n  const getLinks = useLinks(range, splitOpen);\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n\n  // This is implicit dependency that is needed for links to work. At some point when replacing variables in the link\n  // it requires field to have a display property which is added by the overrides even though we don't add any field\n  // overrides in explore.\n  const frames = applyFieldOverrides({\n    fieldConfig: {\n      defaults: {},\n      overrides: [],\n    },\n    data: dataFrames,\n    // We don't need proper replace here as it is only used in getLinks and we use getFieldLinks\n    replaceVariables: (value) => value,\n    theme,\n  });\n\n  const { nodes } = useCategorizeFrames(frames);\n  const [open, toggleOpen] = useToggle(false);\n\n  // Calculate node graph height based on window and top position, with some padding\n  const { height: windowHeight } = useWindowSize();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [top, setTop] = useState(250);\n  useEffect(() => {\n    if (containerRef.current) {\n      const { top } = containerRef.current.getBoundingClientRect();\n      setTop(top);\n    }\n  }, [containerRef]);\n  const height = windowHeight - top - 32;\n\n  const countWarning =\n    withTraceView && nodes[0]?.length > 1000 ? (\n      <span className={styles.warningText}> ({nodes[0].length} nodes, can be slow to load)</span>\n    ) : null;\n\n  return (\n    <Collapse\n      label={\n        <span>\n          Node graph{countWarning}{' '}\n          <Badge text={'Beta'} color={'blue'} icon={'rocket'} tooltip={'This visualization is in beta'} />\n        </span>\n      }\n      collapsible={withTraceView}\n      // We allow collapsing this only when it is shown together with trace view.\n      isOpen={withTraceView ? open : true}\n      onToggle={withTraceView ? () => toggleOpen() : undefined}\n    >\n      <div\n        ref={containerRef}\n        style={\n          withTraceView\n            ? { height: 500 }\n            : {\n                minHeight: 600,\n                height,\n              }\n        }\n      >\n        <NodeGraph dataFrames={frames} getLinks={getLinks} />\n      </div>\n    </Collapse>\n  );\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: OwnProps) {\n  return {\n    range: state.explore[exploreId]!.range,\n  };\n}\n\nconst mapDispatchToProps = {\n  splitOpen,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport const NodeGraphContainer = connector(UnconnectedNodeGraphContainer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}