{"ast":null,"code":"var _Icon, _span, _Alert;\n\nimport { css, cx } from '@emotion/css';\nimport React, { useRef, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\nimport { Alert, Button, Checkbox, Icon, useStyles2 } from '@grafana/ui';\nimport { StoredNotificationItem } from 'app/core/components/AppNotifications/StoredNotificationItem';\nimport { clearAllNotifications, clearNotification, readAllNotifications, selectWarningsAndErrors, selectLastReadTimestamp } from 'app/core/reducers/appNotification';\nimport { useDispatch, useSelector } from 'app/types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function StoredNotifications() {\n  const dispatch = useDispatch();\n  const notifications = useSelector(state => selectWarningsAndErrors(state.appNotifications));\n  const [selectedNotificationIds, setSelectedNotificationIds] = useState([]);\n  const allNotificationsSelected = notifications.every(notification => selectedNotificationIds.includes(notification.id));\n  const lastReadTimestamp = useRef(useSelector(state => selectLastReadTimestamp(state.appNotifications)));\n  const styles = useStyles2(getStyles);\n  useEffectOnce(() => {\n    dispatch(readAllNotifications(Date.now()));\n  });\n\n  const clearSelectedNotifications = () => {\n    if (allNotificationsSelected) {\n      dispatch(clearAllNotifications());\n    } else {\n      selectedNotificationIds.forEach(id => {\n        dispatch(clearNotification(id));\n      });\n    }\n\n    setSelectedNotificationIds([]);\n  };\n\n  const handleAllCheckboxToggle = isChecked => {\n    setSelectedNotificationIds(isChecked ? notifications.map(n => n.id) : []);\n  };\n\n  const handleCheckboxToggle = id => {\n    setSelectedNotificationIds(prevState => {\n      if (!prevState.includes(id)) {\n        return [...prevState, id];\n      } else {\n        return prevState.filter(notificationId => notificationId !== id);\n      }\n    });\n  };\n\n  if (notifications.length === 0) {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.noNotifsWrapper,\n      children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n        name: \"bell\",\n        size: \"xxl\"\n      })), _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n        children: \"Notifications you have received will appear here.\"\n      }))]\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.wrapper,\n    children: [_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n      severity: \"info\",\n      title: \"This page displays past errors and warnings. Once dismissed, they cannot be retrieved.\"\n    })), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.topRow,\n      children: [/*#__PURE__*/_jsx(Checkbox, {\n        value: allNotificationsSelected,\n        onChange: event => handleAllCheckboxToggle(event.target.checked)\n      }), /*#__PURE__*/_jsx(Button, {\n        disabled: selectedNotificationIds.length === 0,\n        onClick: clearSelectedNotifications,\n        children: \"Dismiss notifications\"\n      })]\n    }), /*#__PURE__*/_jsx(\"ul\", {\n      className: styles.list,\n      children: notifications.map(notif => /*#__PURE__*/_jsx(\"li\", {\n        className: styles.listItem,\n        children: /*#__PURE__*/_jsx(StoredNotificationItem, {\n          className: cx({\n            [styles.newItem]: notif.timestamp > lastReadTimestamp.current\n          }),\n          isSelected: selectedNotificationIds.includes(notif.id),\n          onClick: () => handleCheckboxToggle(notif.id),\n          severity: notif.severity,\n          title: notif.title,\n          timestamp: notif.timestamp,\n          traceId: notif.traceId,\n          children: /*#__PURE__*/_jsx(\"span\", {\n            children: notif.text\n          })\n        })\n      }, notif.id))\n    })]\n  });\n}\n\nfunction getStyles(theme) {\n  return {\n    topRow: css({\n      alignItems: 'center',\n      display: 'flex',\n      gap: theme.spacing(2)\n    }),\n    list: css({\n      display: 'flex',\n      flexDirection: 'column'\n    }),\n    listItem: css({\n      alignItems: 'center',\n      display: 'flex',\n      gap: theme.spacing(2),\n      listStyle: 'none',\n      position: 'relative'\n    }),\n    newItem: css({\n      '&::before': {\n        content: '\"\"',\n        height: '100%',\n        position: 'absolute',\n        left: '-7px',\n        top: 0,\n        background: theme.colors.gradients.brandVertical,\n        width: theme.spacing(0.5),\n        borderRadius: theme.shape.borderRadius(1)\n      }\n    }),\n    noNotifsWrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      gap: theme.spacing(1)\n    }),\n    wrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(2)\n    })\n  };\n}","map":{"version":3,"names":["css","cx","React","useRef","useState","useEffectOnce","Alert","Button","Checkbox","Icon","useStyles2","StoredNotificationItem","clearAllNotifications","clearNotification","readAllNotifications","selectWarningsAndErrors","selectLastReadTimestamp","useDispatch","useSelector","StoredNotifications","dispatch","notifications","state","appNotifications","selectedNotificationIds","setSelectedNotificationIds","allNotificationsSelected","every","notification","includes","id","lastReadTimestamp","styles","getStyles","Date","now","clearSelectedNotifications","forEach","handleAllCheckboxToggle","isChecked","map","n","handleCheckboxToggle","prevState","filter","notificationId","length","noNotifsWrapper","wrapper","topRow","event","target","checked","list","notif","listItem","newItem","timestamp","current","severity","title","traceId","text","theme","alignItems","display","gap","spacing","flexDirection","listStyle","position","content","height","left","top","background","colors","gradients","brandVertical","width","borderRadius","shape"],"sources":["/home/soula/grafana/public/app/features/notifications/StoredNotifications.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useRef, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Checkbox, Icon, useStyles2 } from '@grafana/ui';\nimport { StoredNotificationItem } from 'app/core/components/AppNotifications/StoredNotificationItem';\nimport {\n  clearAllNotifications,\n  clearNotification,\n  readAllNotifications,\n  selectWarningsAndErrors,\n  selectLastReadTimestamp,\n} from 'app/core/reducers/appNotification';\nimport { useDispatch, useSelector } from 'app/types';\n\nexport function StoredNotifications() {\n  const dispatch = useDispatch();\n  const notifications = useSelector((state) => selectWarningsAndErrors(state.appNotifications));\n  const [selectedNotificationIds, setSelectedNotificationIds] = useState<string[]>([]);\n  const allNotificationsSelected = notifications.every((notification) =>\n    selectedNotificationIds.includes(notification.id)\n  );\n  const lastReadTimestamp = useRef(useSelector((state) => selectLastReadTimestamp(state.appNotifications)));\n  const styles = useStyles2(getStyles);\n\n  useEffectOnce(() => {\n    dispatch(readAllNotifications(Date.now()));\n  });\n\n  const clearSelectedNotifications = () => {\n    if (allNotificationsSelected) {\n      dispatch(clearAllNotifications());\n    } else {\n      selectedNotificationIds.forEach((id) => {\n        dispatch(clearNotification(id));\n      });\n    }\n    setSelectedNotificationIds([]);\n  };\n\n  const handleAllCheckboxToggle = (isChecked: boolean) => {\n    setSelectedNotificationIds(isChecked ? notifications.map((n) => n.id) : []);\n  };\n\n  const handleCheckboxToggle = (id: string) => {\n    setSelectedNotificationIds((prevState) => {\n      if (!prevState.includes(id)) {\n        return [...prevState, id];\n      } else {\n        return prevState.filter((notificationId) => notificationId !== id);\n      }\n    });\n  };\n\n  if (notifications.length === 0) {\n    return (\n      <div className={styles.noNotifsWrapper}>\n        <Icon name=\"bell\" size=\"xxl\" />\n        <span>Notifications you have received will appear here.</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <Alert\n        severity=\"info\"\n        title=\"This page displays past errors and warnings. Once dismissed, they cannot be retrieved.\"\n      />\n      <div className={styles.topRow}>\n        <Checkbox\n          value={allNotificationsSelected}\n          onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleAllCheckboxToggle(event.target.checked)}\n        />\n        <Button disabled={selectedNotificationIds.length === 0} onClick={clearSelectedNotifications}>\n          Dismiss notifications\n        </Button>\n      </div>\n      <ul className={styles.list}>\n        {notifications.map((notif) => (\n          <li key={notif.id} className={styles.listItem}>\n            <StoredNotificationItem\n              className={cx({ [styles.newItem]: notif.timestamp > lastReadTimestamp.current })}\n              isSelected={selectedNotificationIds.includes(notif.id)}\n              onClick={() => handleCheckboxToggle(notif.id)}\n              severity={notif.severity}\n              title={notif.title}\n              timestamp={notif.timestamp}\n              traceId={notif.traceId}\n            >\n              <span>{notif.text}</span>\n            </StoredNotificationItem>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    topRow: css({\n      alignItems: 'center',\n      display: 'flex',\n      gap: theme.spacing(2),\n    }),\n    list: css({\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    listItem: css({\n      alignItems: 'center',\n      display: 'flex',\n      gap: theme.spacing(2),\n      listStyle: 'none',\n      position: 'relative',\n    }),\n    newItem: css({\n      '&::before': {\n        content: '\"\"',\n        height: '100%',\n        position: 'absolute',\n        left: '-7px',\n        top: 0,\n        background: theme.colors.gradients.brandVertical,\n        width: theme.spacing(0.5),\n        borderRadius: theme.shape.borderRadius(1),\n      },\n    }),\n    noNotifsWrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      gap: theme.spacing(1),\n    }),\n    wrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n    }),\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}