{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { AppEvents, dataFrameToJSON, DataTopic } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, CodeEditor, Field, Select } from '@grafana/ui';\nimport { appEvents } from 'app/core/core';\nimport { getPanelInspectorStyles } from '../inspector/styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ShowContent;\n\n(function (ShowContent) {\n  ShowContent[\"PanelJSON\"] = \"panel\";\n  ShowContent[\"PanelData\"] = \"data\";\n  ShowContent[\"DataFrames\"] = \"frames\";\n})(ShowContent || (ShowContent = {}));\n\nconst options = [{\n  label: 'Panel JSON',\n  description: 'The model saved in the dashboard JSON that configures how everything works.',\n  value: ShowContent.PanelJSON\n}, {\n  label: 'Panel data',\n  description: 'The raw model passed to the panel visualization',\n  value: ShowContent.PanelData\n}, {\n  label: 'DataFrame JSON',\n  description: 'JSON formatted DataFrames',\n  value: ShowContent.DataFrames\n}];\nexport class InspectJSONTab extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"hasPanelJSON\", void 0);\n\n    _defineProperty(this, \"onSelectChanged\", item => {\n      const show = this.getJSONObject(item.value);\n      const text = getPrettyJSON(show);\n      this.setState({\n        text,\n        show: item.value\n      });\n    });\n\n    _defineProperty(this, \"onTextChanged\", text => {\n      this.setState({\n        text\n      });\n    });\n\n    _defineProperty(this, \"onApplyPanelModel\", () => {\n      const {\n        panel,\n        dashboard,\n        onClose\n      } = this.props;\n\n      if (this.hasPanelJSON) {\n        try {\n          if (!dashboard.meta.canEdit) {\n            appEvents.emit(AppEvents.alertError, ['Unable to apply']);\n          } else {\n            const updates = JSON.parse(this.state.text);\n            dashboard.shouldUpdateDashboardPanelFromJSON(updates, panel);\n            panel.restoreModel(updates);\n            panel.refresh();\n            appEvents.emit(AppEvents.alertSuccess, ['Panel model updated']);\n          }\n        } catch (err) {\n          console.error('Error applying updates', err);\n          appEvents.emit(AppEvents.alertError, ['Invalid JSON text']);\n        }\n\n        onClose();\n      }\n    });\n\n    this.hasPanelJSON = !!(props.panel && props.dashboard); // If we are in panel, we want to show PanelJSON, otherwise show DataFrames\n\n    this.state = {\n      show: this.hasPanelJSON ? ShowContent.PanelJSON : ShowContent.DataFrames,\n      text: this.hasPanelJSON ? getPrettyJSON(props.panel.getSaveModel()) : getPrettyJSON(props.data)\n    };\n  }\n\n  getJSONObject(show) {\n    const {\n      data,\n      panel\n    } = this.props;\n\n    if (show === ShowContent.PanelData) {\n      return data;\n    }\n\n    if (show === ShowContent.DataFrames) {\n      return getPanelDataFrames(data);\n    }\n\n    if (this.hasPanelJSON && show === ShowContent.PanelJSON) {\n      return panel.getSaveModel();\n    }\n\n    return {\n      note: `Unknown Object: ${show}`\n    };\n  }\n\n  render() {\n    const {\n      dashboard\n    } = this.props;\n    const {\n      show,\n      text\n    } = this.state;\n    const jsonOptions = this.hasPanelJSON ? options : options.slice(1, options.length);\n    const selected = options.find(v => v.value === show);\n    const isPanelJSON = show === ShowContent.PanelJSON;\n    const canEdit = dashboard && dashboard.meta.canEdit;\n    const styles = getPanelInspectorStyles();\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.wrap,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.toolbar,\n        \"aria-label\": selectors.components.PanelInspector.Json.content,\n        children: [/*#__PURE__*/_jsx(Field, {\n          label: \"Select source\",\n          className: \"flex-grow-1\",\n          children: /*#__PURE__*/_jsx(Select, {\n            inputId: \"select-source-dropdown\",\n            options: jsonOptions,\n            value: selected,\n            onChange: this.onSelectChanged\n          })\n        }), this.hasPanelJSON && isPanelJSON && canEdit && /*#__PURE__*/_jsx(Button, {\n          className: styles.toolbarItem,\n          onClick: this.onApplyPanelModel,\n          children: \"Apply\"\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.content,\n        children: /*#__PURE__*/_jsx(AutoSizer, {\n          disableWidth: true,\n          children: ({\n            height\n          }) => /*#__PURE__*/_jsx(CodeEditor, {\n            width: \"100%\",\n            height: height,\n            language: \"json\",\n            showLineNumbers: true,\n            showMiniMap: (text && text.length) > 100,\n            value: text || '',\n            readOnly: !isPanelJSON,\n            onBlur: this.onTextChanged\n          })\n        })\n      })]\n    });\n  }\n\n}\n\nfunction getPanelDataFrames(data) {\n  const frames = [];\n\n  if (data !== null && data !== void 0 && data.series) {\n    for (const f of data.series) {\n      frames.push(dataFrameToJSON(f));\n    }\n  }\n\n  if (data !== null && data !== void 0 && data.annotations) {\n    for (const f of data.annotations) {\n      var _json$schema;\n\n      const json = dataFrameToJSON(f);\n\n      if (!((_json$schema = json.schema) !== null && _json$schema !== void 0 && _json$schema.meta)) {\n        json.schema.meta = {};\n      }\n\n      json.schema.meta.dataTopic = DataTopic.Annotations;\n      frames.push(json);\n    }\n  }\n\n  return frames;\n}\n\nfunction getPrettyJSON(obj) {\n  return JSON.stringify(obj, null, 2);\n}","map":{"version":3,"names":["React","PureComponent","AutoSizer","AppEvents","dataFrameToJSON","DataTopic","selectors","Button","CodeEditor","Field","Select","appEvents","getPanelInspectorStyles","ShowContent","options","label","description","value","PanelJSON","PanelData","DataFrames","InspectJSONTab","constructor","props","item","show","getJSONObject","text","getPrettyJSON","setState","panel","dashboard","onClose","hasPanelJSON","meta","canEdit","emit","alertError","updates","JSON","parse","state","shouldUpdateDashboardPanelFromJSON","restoreModel","refresh","alertSuccess","err","console","error","getSaveModel","data","getPanelDataFrames","note","render","jsonOptions","slice","length","selected","find","v","isPanelJSON","styles","wrap","toolbar","components","PanelInspector","Json","content","onSelectChanged","toolbarItem","onApplyPanelModel","height","onTextChanged","frames","series","f","push","annotations","json","schema","dataTopic","Annotations","obj","stringify"],"sources":["/home/soula/grafana/public/app/features/inspector/InspectJSONTab.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { AppEvents, DataFrameJSON, dataFrameToJSON, DataTopic, PanelData, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, CodeEditor, Field, Select } from '@grafana/ui';\nimport { appEvents } from 'app/core/core';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { getPanelInspectorStyles } from '../inspector/styles';\n\nenum ShowContent {\n  PanelJSON = 'panel',\n  PanelData = 'data',\n  DataFrames = 'frames',\n}\n\nconst options: Array<SelectableValue<ShowContent>> = [\n  {\n    label: 'Panel JSON',\n    description: 'The model saved in the dashboard JSON that configures how everything works.',\n    value: ShowContent.PanelJSON,\n  },\n  {\n    label: 'Panel data',\n    description: 'The raw model passed to the panel visualization',\n    value: ShowContent.PanelData,\n  },\n  {\n    label: 'DataFrame JSON',\n    description: 'JSON formatted DataFrames',\n    value: ShowContent.DataFrames,\n  },\n];\n\ninterface Props {\n  onClose: () => void;\n  dashboard?: DashboardModel;\n  panel?: PanelModel;\n  data?: PanelData;\n}\n\ninterface State {\n  show: ShowContent;\n  text: string;\n}\n\nexport class InspectJSONTab extends PureComponent<Props, State> {\n  hasPanelJSON: boolean;\n\n  constructor(props: Props) {\n    super(props);\n    this.hasPanelJSON = !!(props.panel && props.dashboard);\n    // If we are in panel, we want to show PanelJSON, otherwise show DataFrames\n    this.state = {\n      show: this.hasPanelJSON ? ShowContent.PanelJSON : ShowContent.DataFrames,\n      text: this.hasPanelJSON ? getPrettyJSON(props.panel!.getSaveModel()) : getPrettyJSON(props.data),\n    };\n  }\n\n  onSelectChanged = (item: SelectableValue<ShowContent>) => {\n    const show = this.getJSONObject(item.value!);\n    const text = getPrettyJSON(show);\n    this.setState({ text, show: item.value! });\n  };\n\n  // Called onBlur\n  onTextChanged = (text: string) => {\n    this.setState({ text });\n  };\n\n  getJSONObject(show: ShowContent) {\n    const { data, panel } = this.props;\n    if (show === ShowContent.PanelData) {\n      return data;\n    }\n\n    if (show === ShowContent.DataFrames) {\n      return getPanelDataFrames(data);\n    }\n\n    if (this.hasPanelJSON && show === ShowContent.PanelJSON) {\n      return panel!.getSaveModel();\n    }\n\n    return { note: `Unknown Object: ${show}` };\n  }\n\n  onApplyPanelModel = () => {\n    const { panel, dashboard, onClose } = this.props;\n    if (this.hasPanelJSON) {\n      try {\n        if (!dashboard!.meta.canEdit) {\n          appEvents.emit(AppEvents.alertError, ['Unable to apply']);\n        } else {\n          const updates = JSON.parse(this.state.text);\n          dashboard!.shouldUpdateDashboardPanelFromJSON(updates, panel!);\n          panel!.restoreModel(updates);\n          panel!.refresh();\n          appEvents.emit(AppEvents.alertSuccess, ['Panel model updated']);\n        }\n      } catch (err) {\n        console.error('Error applying updates', err);\n        appEvents.emit(AppEvents.alertError, ['Invalid JSON text']);\n      }\n\n      onClose();\n    }\n  };\n\n  render() {\n    const { dashboard } = this.props;\n    const { show, text } = this.state;\n    const jsonOptions = this.hasPanelJSON ? options : options.slice(1, options.length);\n    const selected = options.find((v) => v.value === show);\n    const isPanelJSON = show === ShowContent.PanelJSON;\n    const canEdit = dashboard && dashboard.meta.canEdit;\n    const styles = getPanelInspectorStyles();\n\n    return (\n      <div className={styles.wrap}>\n        <div className={styles.toolbar} aria-label={selectors.components.PanelInspector.Json.content}>\n          <Field label=\"Select source\" className=\"flex-grow-1\">\n            <Select\n              inputId=\"select-source-dropdown\"\n              options={jsonOptions}\n              value={selected}\n              onChange={this.onSelectChanged}\n            />\n          </Field>\n          {this.hasPanelJSON && isPanelJSON && canEdit && (\n            <Button className={styles.toolbarItem} onClick={this.onApplyPanelModel}>\n              Apply\n            </Button>\n          )}\n        </div>\n        <div className={styles.content}>\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <CodeEditor\n                width=\"100%\"\n                height={height}\n                language=\"json\"\n                showLineNumbers={true}\n                showMiniMap={(text && text.length) > 100}\n                value={text || ''}\n                readOnly={!isPanelJSON}\n                onBlur={this.onTextChanged}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getPanelDataFrames(data?: PanelData): DataFrameJSON[] {\n  const frames: DataFrameJSON[] = [];\n  if (data?.series) {\n    for (const f of data.series) {\n      frames.push(dataFrameToJSON(f));\n    }\n  }\n  if (data?.annotations) {\n    for (const f of data.annotations) {\n      const json = dataFrameToJSON(f);\n      if (!json.schema?.meta) {\n        json.schema!.meta = {};\n      }\n      json.schema!.meta.dataTopic = DataTopic.Annotations;\n      frames.push(json);\n    }\n  }\n  return frames;\n}\n\nfunction getPrettyJSON(obj: any): string {\n  return JSON.stringify(obj, null, 2);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}