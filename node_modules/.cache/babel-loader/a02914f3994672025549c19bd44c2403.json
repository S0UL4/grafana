{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { getTimeField } from '../../dataframe/processDataFrame';\nimport { DataTransformerID } from './ids';\nimport { seriesToColumnsTransformer } from './seriesToColumns';\nexport const ensureColumnsTransformer = {\n  id: DataTransformerID.ensureColumns,\n  name: 'Ensure Columns Transformer',\n  description: 'Will check if current data frames is series or columns. If in series it will convert to columns.',\n  operator: options => source => source.pipe(map(data => ensureColumnsTransformer.transformer(options)(data))),\n  transformer: options => frames => {\n    // Assume timeseries should first be joined by time\n    const timeFieldName = findConsistentTimeFieldName(frames);\n\n    if (frames.length > 1 && timeFieldName) {\n      return seriesToColumnsTransformer.transformer({\n        byField: timeFieldName\n      })(frames);\n    }\n\n    return frames;\n  }\n};\n/**\n * Find the name for the time field used in all frames (if one exists)\n */\n\nfunction findConsistentTimeFieldName(data) {\n  let name = undefined;\n\n  for (const frame of data) {\n    const {\n      timeField\n    } = getTimeField(frame);\n\n    if (!timeField) {\n      return undefined; // Not timeseries\n    }\n\n    if (!name) {\n      name = timeField.name;\n    } else if (name !== timeField.name) {\n      // Second frame has a different time column?!\n      return undefined;\n    }\n  }\n\n  return name;\n}","map":{"version":3,"names":["map","getTimeField","DataTransformerID","seriesToColumnsTransformer","ensureColumnsTransformer","id","ensureColumns","name","description","operator","options","source","pipe","data","transformer","frames","timeFieldName","findConsistentTimeFieldName","length","byField","undefined","frame","timeField"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/transformers/ensureColumns.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { getTimeField } from '../../dataframe/processDataFrame';\nimport { DataFrame } from '../../types/dataFrame';\nimport { SynchronousDataTransformerInfo } from '../../types/transformations';\n\nimport { DataTransformerID } from './ids';\nimport { seriesToColumnsTransformer } from './seriesToColumns';\n\nexport const ensureColumnsTransformer: SynchronousDataTransformerInfo = {\n  id: DataTransformerID.ensureColumns,\n  name: 'Ensure Columns Transformer',\n  description: 'Will check if current data frames is series or columns. If in series it will convert to columns.',\n\n  operator: (options) => (source) => source.pipe(map((data) => ensureColumnsTransformer.transformer(options)(data))),\n\n  transformer: (options: any) => (frames: DataFrame[]) => {\n    // Assume timeseries should first be joined by time\n    const timeFieldName = findConsistentTimeFieldName(frames);\n\n    if (frames.length > 1 && timeFieldName) {\n      return seriesToColumnsTransformer.transformer({\n        byField: timeFieldName,\n      })(frames);\n    }\n    return frames;\n  },\n};\n\n/**\n * Find the name for the time field used in all frames (if one exists)\n */\nfunction findConsistentTimeFieldName(data: DataFrame[]): string | undefined {\n  let name: string | undefined = undefined;\n  for (const frame of data) {\n    const { timeField } = getTimeField(frame);\n    if (!timeField) {\n      return undefined; // Not timeseries\n    }\n    if (!name) {\n      name = timeField.name;\n    } else if (name !== timeField.name) {\n      // Second frame has a different time column?!\n      return undefined;\n    }\n  }\n  return name;\n}\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,SAASC,YAAT,QAA6B,kCAA7B;AAIA,SAASC,iBAAT,QAAkC,OAAlC;AACA,SAASC,0BAAT,QAA2C,mBAA3C;AAEA,OAAO,MAAMC,wBAAwD,GAAG;EACtEC,EAAE,EAAEH,iBAAiB,CAACI,aADgD;EAEtEC,IAAI,EAAE,4BAFgE;EAGtEC,WAAW,EAAE,kGAHyD;EAKtEC,QAAQ,EAAGC,OAAD,IAAcC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYZ,GAAG,CAAEa,IAAD,IAAUT,wBAAwB,CAACU,WAAzB,CAAqCJ,OAArC,EAA8CG,IAA9C,CAAX,CAAf,CALmC;EAOtEC,WAAW,EAAGJ,OAAD,IAAmBK,MAAD,IAAyB;IACtD;IACA,MAAMC,aAAa,GAAGC,2BAA2B,CAACF,MAAD,CAAjD;;IAEA,IAAIA,MAAM,CAACG,MAAP,GAAgB,CAAhB,IAAqBF,aAAzB,EAAwC;MACtC,OAAOb,0BAA0B,CAACW,WAA3B,CAAuC;QAC5CK,OAAO,EAAEH;MADmC,CAAvC,EAEJD,MAFI,CAAP;IAGD;;IACD,OAAOA,MAAP;EACD;AAjBqE,CAAjE;AAoBP;AACA;AACA;;AACA,SAASE,2BAAT,CAAqCJ,IAArC,EAA4E;EAC1E,IAAIN,IAAwB,GAAGa,SAA/B;;EACA,KAAK,MAAMC,KAAX,IAAoBR,IAApB,EAA0B;IACxB,MAAM;MAAES;IAAF,IAAgBrB,YAAY,CAACoB,KAAD,CAAlC;;IACA,IAAI,CAACC,SAAL,EAAgB;MACd,OAAOF,SAAP,CADc,CACI;IACnB;;IACD,IAAI,CAACb,IAAL,EAAW;MACTA,IAAI,GAAGe,SAAS,CAACf,IAAjB;IACD,CAFD,MAEO,IAAIA,IAAI,KAAKe,SAAS,CAACf,IAAvB,EAA6B;MAClC;MACA,OAAOa,SAAP;IACD;EACF;;EACD,OAAOb,IAAP;AACD"},"metadata":{},"sourceType":"module"}