{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { Component } from 'react';\nimport { FieldMatcherID, getDataSourceRef, getFrameDisplayName } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { Select, Table } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getDashboardSrv } from '../../../features/dashboard/services/DashboardSrv';\nimport { applyFilterFromTable } from '../../../features/variables/adhoc/actions';\nimport { dispatch } from '../../../store/store';\nimport { getFooterCells } from './footer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class TablePanel extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onColumnResize\", (fieldDisplayName, width) => {\n      const {\n        fieldConfig\n      } = this.props;\n      const {\n        overrides\n      } = fieldConfig;\n      const matcherId = FieldMatcherID.byName;\n      const propId = 'custom.width'; // look for existing override\n\n      const override = overrides.find(o => o.matcher.id === matcherId && o.matcher.options === fieldDisplayName);\n\n      if (override) {\n        // look for existing property\n        const property = override.properties.find(prop => prop.id === propId);\n\n        if (property) {\n          property.value = width;\n        } else {\n          override.properties.push({\n            id: propId,\n            value: width\n          });\n        }\n      } else {\n        overrides.push({\n          matcher: {\n            id: matcherId,\n            options: fieldDisplayName\n          },\n          properties: [{\n            id: propId,\n            value: width\n          }]\n        });\n      }\n\n      this.props.onFieldConfigChange(Object.assign({}, fieldConfig, {\n        overrides\n      }));\n    });\n\n    _defineProperty(this, \"onSortByChange\", sortBy => {\n      this.props.onOptionsChange(Object.assign({}, this.props.options, {\n        sortBy\n      }));\n    });\n\n    _defineProperty(this, \"onChangeTableSelection\", val => {\n      this.props.onOptionsChange(Object.assign({}, this.props.options, {\n        frameIndex: val.value || 0\n      })); // Force a redraw -- but no need to re-query\n\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"onCellFilterAdded\", filter => {\n      var _getDashboardSrv$getC;\n\n      const {\n        key,\n        value,\n        operator\n      } = filter;\n      const panelModel = (_getDashboardSrv$getC = getDashboardSrv().getCurrent()) === null || _getDashboardSrv$getC === void 0 ? void 0 : _getDashboardSrv$getC.getPanelById(this.props.id);\n\n      if (!panelModel) {\n        return;\n      } // When the datasource is null/undefined (for a default datasource), we use getInstanceSettings\n      // to find the real datasource ref for the default datasource.\n\n\n      const datasourceInstance = getDatasourceSrv().getInstanceSettings(panelModel.datasource);\n      const datasourceRef = datasourceInstance && getDataSourceRef(datasourceInstance);\n\n      if (!datasourceRef) {\n        return;\n      }\n\n      dispatch(applyFilterFromTable({\n        datasource: datasourceRef,\n        key,\n        operator,\n        value\n      }));\n    });\n  }\n\n  renderTable(frame, width, height) {\n    var _options$footer, _options$footer2;\n\n    const {\n      options\n    } = this.props;\n    const footerValues = (_options$footer = options.footer) !== null && _options$footer !== void 0 && _options$footer.show ? getFooterCells(frame, options.footer) : undefined;\n    return /*#__PURE__*/_jsx(Table, {\n      height: height,\n      width: width,\n      data: frame,\n      noHeader: !options.showHeader,\n      showTypeIcons: options.showTypeIcons,\n      resizable: true,\n      initialSortBy: options.sortBy,\n      onSortByChange: this.onSortByChange,\n      onColumnResize: this.onColumnResize,\n      onCellFilterAdded: this.onCellFilterAdded,\n      footerValues: footerValues,\n      enablePagination: (_options$footer2 = options.footer) === null || _options$footer2 === void 0 ? void 0 : _options$footer2.enablePagination\n    });\n  }\n\n  getCurrentFrameIndex(frames, options) {\n    return options.frameIndex > 0 && options.frameIndex < frames.length ? options.frameIndex : 0;\n  }\n\n  render() {\n    var _frames$;\n\n    const {\n      data,\n      height,\n      width,\n      options,\n      fieldConfig,\n      id\n    } = this.props;\n    const frames = data.series;\n    const count = frames === null || frames === void 0 ? void 0 : frames.length;\n    const hasFields = (_frames$ = frames[0]) === null || _frames$ === void 0 ? void 0 : _frames$.fields.length;\n\n    if (!count || !hasFields) {\n      return /*#__PURE__*/_jsx(PanelDataErrorView, {\n        panelId: id,\n        fieldConfig: fieldConfig,\n        data: data\n      });\n    }\n\n    if (count > 1) {\n      const inputHeight = config.theme.spacing.formInputHeight;\n      const padding = 8 * 2;\n      const currentIndex = this.getCurrentFrameIndex(frames, options);\n      const names = frames.map((frame, index) => {\n        return {\n          label: getFrameDisplayName(frame),\n          value: index\n        };\n      });\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: tableStyles.wrapper,\n        children: [this.renderTable(data.series[currentIndex], width, height - inputHeight - padding), /*#__PURE__*/_jsx(\"div\", {\n          className: tableStyles.selectWrapper,\n          children: /*#__PURE__*/_jsx(Select, {\n            options: names,\n            value: names[currentIndex],\n            onChange: this.onChangeTableSelection\n          })\n        })]\n      });\n    }\n\n    return this.renderTable(data.series[0], width, height);\n  }\n\n}\nconst tableStyles = {\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: 100%;\n  `,\n  noData: css`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n  `,\n  selectWrapper: css`\n    padding: 8px;\n  `\n};","map":{"version":3,"names":["css","React","Component","FieldMatcherID","getDataSourceRef","getFrameDisplayName","PanelDataErrorView","Select","Table","config","getDatasourceSrv","getDashboardSrv","applyFilterFromTable","dispatch","getFooterCells","TablePanel","constructor","props","fieldDisplayName","width","fieldConfig","overrides","matcherId","byName","propId","override","find","o","matcher","id","options","property","properties","prop","value","push","onFieldConfigChange","sortBy","onOptionsChange","val","frameIndex","forceUpdate","filter","key","operator","panelModel","getCurrent","getPanelById","datasourceInstance","getInstanceSettings","datasource","datasourceRef","renderTable","frame","height","footerValues","footer","show","undefined","showHeader","showTypeIcons","onSortByChange","onColumnResize","onCellFilterAdded","enablePagination","getCurrentFrameIndex","frames","length","render","data","series","count","hasFields","fields","inputHeight","theme","spacing","formInputHeight","padding","currentIndex","names","map","index","label","tableStyles","wrapper","selectWrapper","onChangeTableSelection","noData"],"sources":["/home/soula/grafana/public/app/plugins/panel/table/TablePanel.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { Component } from 'react';\n\nimport {\n  DataFrame,\n  FieldMatcherID,\n  getDataSourceRef,\n  getFrameDisplayName,\n  PanelProps,\n  SelectableValue,\n} from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { Select, Table } from '@grafana/ui';\nimport { FilterItem, TableSortByFieldState } from '@grafana/ui/src/components/Table/types';\nimport { config } from 'app/core/config';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { getDashboardSrv } from '../../../features/dashboard/services/DashboardSrv';\nimport { applyFilterFromTable } from '../../../features/variables/adhoc/actions';\nimport { dispatch } from '../../../store/store';\n\nimport { getFooterCells } from './footer';\nimport { PanelOptions } from './models.gen';\n\ninterface Props extends PanelProps<PanelOptions> {}\n\nexport class TablePanel extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onColumnResize = (fieldDisplayName: string, width: number) => {\n    const { fieldConfig } = this.props;\n    const { overrides } = fieldConfig;\n\n    const matcherId = FieldMatcherID.byName;\n    const propId = 'custom.width';\n\n    // look for existing override\n    const override = overrides.find((o) => o.matcher.id === matcherId && o.matcher.options === fieldDisplayName);\n\n    if (override) {\n      // look for existing property\n      const property = override.properties.find((prop) => prop.id === propId);\n      if (property) {\n        property.value = width;\n      } else {\n        override.properties.push({ id: propId, value: width });\n      }\n    } else {\n      overrides.push({\n        matcher: { id: matcherId, options: fieldDisplayName },\n        properties: [{ id: propId, value: width }],\n      });\n    }\n\n    this.props.onFieldConfigChange({\n      ...fieldConfig,\n      overrides,\n    });\n  };\n\n  onSortByChange = (sortBy: TableSortByFieldState[]) => {\n    this.props.onOptionsChange({\n      ...this.props.options,\n      sortBy,\n    });\n  };\n\n  onChangeTableSelection = (val: SelectableValue<number>) => {\n    this.props.onOptionsChange({\n      ...this.props.options,\n      frameIndex: val.value || 0,\n    });\n\n    // Force a redraw -- but no need to re-query\n    this.forceUpdate();\n  };\n\n  onCellFilterAdded = (filter: FilterItem) => {\n    const { key, value, operator } = filter;\n    const panelModel = getDashboardSrv().getCurrent()?.getPanelById(this.props.id);\n    if (!panelModel) {\n      return;\n    }\n\n    // When the datasource is null/undefined (for a default datasource), we use getInstanceSettings\n    // to find the real datasource ref for the default datasource.\n    const datasourceInstance = getDatasourceSrv().getInstanceSettings(panelModel.datasource);\n    const datasourceRef = datasourceInstance && getDataSourceRef(datasourceInstance);\n    if (!datasourceRef) {\n      return;\n    }\n\n    dispatch(applyFilterFromTable({ datasource: datasourceRef, key, operator, value }));\n  };\n\n  renderTable(frame: DataFrame, width: number, height: number) {\n    const { options } = this.props;\n    const footerValues = options.footer?.show ? getFooterCells(frame, options.footer) : undefined;\n\n    return (\n      <Table\n        height={height}\n        width={width}\n        data={frame}\n        noHeader={!options.showHeader}\n        showTypeIcons={options.showTypeIcons}\n        resizable={true}\n        initialSortBy={options.sortBy}\n        onSortByChange={this.onSortByChange}\n        onColumnResize={this.onColumnResize}\n        onCellFilterAdded={this.onCellFilterAdded}\n        footerValues={footerValues}\n        enablePagination={options.footer?.enablePagination}\n      />\n    );\n  }\n\n  getCurrentFrameIndex(frames: DataFrame[], options: PanelOptions) {\n    return options.frameIndex > 0 && options.frameIndex < frames.length ? options.frameIndex : 0;\n  }\n\n  render() {\n    const { data, height, width, options, fieldConfig, id } = this.props;\n\n    const frames = data.series;\n    const count = frames?.length;\n    const hasFields = frames[0]?.fields.length;\n\n    if (!count || !hasFields) {\n      return <PanelDataErrorView panelId={id} fieldConfig={fieldConfig} data={data} />;\n    }\n\n    if (count > 1) {\n      const inputHeight = config.theme.spacing.formInputHeight;\n      const padding = 8 * 2;\n      const currentIndex = this.getCurrentFrameIndex(frames, options);\n      const names = frames.map((frame, index) => {\n        return {\n          label: getFrameDisplayName(frame),\n          value: index,\n        };\n      });\n\n      return (\n        <div className={tableStyles.wrapper}>\n          {this.renderTable(data.series[currentIndex], width, height - inputHeight - padding)}\n          <div className={tableStyles.selectWrapper}>\n            <Select options={names} value={names[currentIndex]} onChange={this.onChangeTableSelection} />\n          </div>\n        </div>\n      );\n    }\n\n    return this.renderTable(data.series[0], width, height);\n  }\n}\n\nconst tableStyles = {\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: 100%;\n  `,\n  noData: css`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n  `,\n  selectWrapper: css`\n    padding: 8px;\n  `,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}