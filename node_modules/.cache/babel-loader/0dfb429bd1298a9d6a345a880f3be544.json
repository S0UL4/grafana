{"ast":null,"code":"const _excluded = [\"enabled\", \"disabled\", \"checked\", \"onClick\", \"className\", \"aria-label\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport { take } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { CustomScrollbar, stylesFactory, useStyles2 } from '@grafana/ui';\nimport { Icon } from '@grafana/ui/src/components/Icon/Icon';\nimport { getFocusStyles } from '@grafana/ui/src/themes/mixins';\nimport { setStarred } from 'app/core/reducers/navBarTree';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { SearchCard } from 'app/features/search/components/SearchCard';\nimport { PanelLayout } from './models.gen';\nimport { getStyles } from './styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nasync function fetchDashboards(options, replaceVars) {\n  let starredDashboards = Promise.resolve([]);\n\n  if (options.showStarred) {\n    const params = {\n      limit: options.maxItems,\n      starred: 'true'\n    };\n    starredDashboards = getBackendSrv().search(params);\n  }\n\n  let recentDashboards = Promise.resolve([]);\n  let dashIds = [];\n\n  if (options.showRecentlyViewed) {\n    dashIds = take(impressionSrv.getDashboardOpened(), options.maxItems);\n    recentDashboards = getBackendSrv().search({\n      dashboardIds: dashIds,\n      limit: options.maxItems\n    });\n  }\n\n  let searchedDashboards = Promise.resolve([]);\n\n  if (options.showSearch) {\n    const params = {\n      limit: options.maxItems,\n      query: replaceVars(options.query, {}, 'text'),\n      folderIds: options.folderId,\n      tag: options.tags.map(tag => replaceVars(tag, {}, 'text')),\n      type: 'dash-db'\n    };\n    searchedDashboards = getBackendSrv().search(params);\n  }\n\n  const [starred, searched, recent] = await Promise.all([starredDashboards, searchedDashboards, recentDashboards]); // We deliberately deal with recent dashboards first so that the order of dash IDs is preserved\n\n  let dashMap = new Map();\n\n  for (const dashId of dashIds) {\n    const dash = recent.find(d => d.id === dashId);\n\n    if (dash) {\n      dashMap.set(dashId, Object.assign({}, dash, {\n        isRecent: true\n      }));\n    }\n  }\n\n  searched.forEach(dash => {\n    if (dashMap.has(dash.id)) {\n      dashMap.get(dash.id).isSearchResult = true;\n    } else {\n      dashMap.set(dash.id, Object.assign({}, dash, {\n        isSearchResult: true\n      }));\n    }\n  });\n  starred.forEach(dash => {\n    if (dashMap.has(dash.id)) {\n      dashMap.get(dash.id).isStarred = true;\n    } else {\n      dashMap.set(dash.id, Object.assign({}, dash, {\n        isStarred: true\n      }));\n    }\n  });\n  return dashMap;\n}\n\nexport function DashList(props) {\n  const [dashboards, setDashboards] = useState(new Map());\n  const dispatch = useDispatch();\n  useEffect(() => {\n    fetchDashboards(props.options, props.replaceVariables).then(dashes => {\n      setDashboards(dashes);\n    });\n  }, [props.options, props.replaceVariables, props.renderCounter]);\n\n  const toggleDashboardStar = async (e, dash) => {\n    const {\n      uid,\n      title,\n      url\n    } = dash;\n    e.preventDefault();\n    e.stopPropagation();\n    const isStarred = await getDashboardSrv().starDashboard(dash.id.toString(), dash.isStarred);\n    const updatedDashboards = new Map(dashboards);\n    updatedDashboards.set(dash.id, Object.assign({}, dash, {\n      isStarred\n    }));\n    setDashboards(updatedDashboards);\n    dispatch(setStarred({\n      id: uid !== null && uid !== void 0 ? uid : '',\n      title,\n      url,\n      isStarred\n    }));\n  };\n\n  const [starredDashboards, recentDashboards, searchedDashboards] = useMemo(() => {\n    const dashboardList = [...dashboards.values()];\n    return [dashboardList.filter(dash => dash.isStarred).sort((a, b) => a.title.localeCompare(b.title)), dashboardList.filter(dash => dash.isRecent), dashboardList.filter(dash => dash.isSearchResult).sort((a, b) => a.title.localeCompare(b.title))];\n  }, [dashboards]);\n  const {\n    showStarred,\n    showRecentlyViewed,\n    showHeadings,\n    showSearch,\n    layout\n  } = props.options;\n  const dashboardGroups = [{\n    header: 'Starred dashboards',\n    dashboards: starredDashboards,\n    show: showStarred\n  }, {\n    header: 'Recently viewed dashboards',\n    dashboards: recentDashboards,\n    show: showRecentlyViewed\n  }, {\n    header: 'Search',\n    dashboards: searchedDashboards,\n    show: showSearch\n  }];\n  const css = useStyles2(getStyles);\n\n  const renderList = dashboards => /*#__PURE__*/_jsx(\"ul\", {\n    children: dashboards.map(dash => /*#__PURE__*/_jsx(\"li\", {\n      className: css.dashlistItem,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: css.dashlistLink,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: css.dashlistLinkBody,\n          children: [/*#__PURE__*/_jsx(\"a\", {\n            className: css.dashlistTitle,\n            href: dash.url,\n            children: dash.title\n          }), dash.folderTitle && /*#__PURE__*/_jsx(\"div\", {\n            className: css.dashlistFolder,\n            children: dash.folderTitle\n          })]\n        }), /*#__PURE__*/_jsx(IconToggle, {\n          \"aria-label\": `Star dashboard \"${dash.title}\".`,\n          className: css.dashlistStar,\n          enabled: {\n            name: 'favorite',\n            type: 'mono'\n          },\n          disabled: {\n            name: 'star',\n            type: 'default'\n          },\n          checked: dash.isStarred,\n          onClick: e => toggleDashboardStar(e, dash)\n        })]\n      })\n    }, `dash-${dash.id}`))\n  });\n\n  const renderPreviews = dashboards => /*#__PURE__*/_jsx(\"ul\", {\n    className: css.gridContainer,\n    children: dashboards.map(dash => /*#__PURE__*/_jsx(\"li\", {\n      children: /*#__PURE__*/_jsx(SearchCard, {\n        item: dash\n      })\n    }, dash.uid))\n  });\n\n  return /*#__PURE__*/_jsx(CustomScrollbar, {\n    autoHeightMin: \"100%\",\n    autoHeightMax: \"100%\",\n    children: dashboardGroups.map(({\n      show,\n      header,\n      dashboards\n    }, i) => show && /*#__PURE__*/_jsxs(\"div\", {\n      className: css.dashlistSection,\n      children: [showHeadings && /*#__PURE__*/_jsx(\"h6\", {\n        className: css.dashlistSectionHeader,\n        children: header\n      }), layout === PanelLayout.Previews ? renderPreviews(dashboards) : renderList(dashboards)]\n    }, `dash-group-${i}`))\n  });\n}\n\nfunction IconToggle(_ref) {\n  let {\n    enabled,\n    disabled,\n    checked,\n    onClick,\n    className,\n    'aria-label': ariaLabel\n  } = _ref,\n      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const toggleCheckbox = useCallback(e => {\n    e.preventDefault();\n    e.stopPropagation();\n    onClick === null || onClick === void 0 ? void 0 : onClick(e);\n  }, [onClick]);\n  const iconPropsOverride = checked ? enabled : disabled;\n  const iconProps = Object.assign({}, otherProps, iconPropsOverride);\n  const styles = useStyles2(getCheckboxStyles);\n  return /*#__PURE__*/_jsxs(\"label\", {\n    className: styles.wrapper,\n    children: [/*#__PURE__*/_jsx(\"input\", {\n      type: \"checkbox\",\n      defaultChecked: checked,\n      onClick: toggleCheckbox,\n      className: styles.checkBox,\n      \"aria-label\": ariaLabel\n    }), /*#__PURE__*/_jsx(Icon, Object.assign({\n      className: cx(styles.icon, className)\n    }, iconProps))]\n  });\n}\n\nexport const getCheckboxStyles = stylesFactory(theme => {\n  return {\n    wrapper: css({\n      display: 'flex',\n      alignSelf: 'center',\n      cursor: 'pointer',\n      zIndex: 1\n    }),\n    checkBox: css({\n      appearance: 'none',\n      '&:focus-visible + *': Object.assign({}, getFocusStyles(theme), {\n        borderRadius: theme.shape.borderRadius(1)\n      })\n    }),\n    icon: css({\n      marginBottom: 0,\n      verticalAlign: 'baseline',\n      display: 'flex'\n    })\n  };\n});","map":{"version":3,"names":["css","cx","take","React","useCallback","useEffect","useMemo","useState","useDispatch","CustomScrollbar","stylesFactory","useStyles2","Icon","getFocusStyles","setStarred","getBackendSrv","impressionSrv","getDashboardSrv","SearchCard","PanelLayout","getStyles","fetchDashboards","options","replaceVars","starredDashboards","Promise","resolve","showStarred","params","limit","maxItems","starred","search","recentDashboards","dashIds","showRecentlyViewed","getDashboardOpened","dashboardIds","searchedDashboards","showSearch","query","folderIds","folderId","tag","tags","map","type","searched","recent","all","dashMap","Map","dashId","dash","find","d","id","set","isRecent","forEach","has","get","isSearchResult","isStarred","DashList","props","dashboards","setDashboards","dispatch","replaceVariables","then","dashes","renderCounter","toggleDashboardStar","e","uid","title","url","preventDefault","stopPropagation","starDashboard","toString","updatedDashboards","dashboardList","values","filter","sort","a","b","localeCompare","showHeadings","layout","dashboardGroups","header","show","renderList","dashlistItem","dashlistLink","dashlistLinkBody","dashlistTitle","folderTitle","dashlistFolder","dashlistStar","name","renderPreviews","gridContainer","i","dashlistSection","dashlistSectionHeader","Previews","IconToggle","enabled","disabled","checked","onClick","className","ariaLabel","otherProps","toggleCheckbox","iconPropsOverride","iconProps","styles","getCheckboxStyles","wrapper","checkBox","icon","theme","display","alignSelf","cursor","zIndex","appearance","borderRadius","shape","marginBottom","verticalAlign"],"sources":["/home/soula/grafana/public/app/plugins/panel/dashlist/DashList.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { take } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2, InterpolateFunction, PanelProps } from '@grafana/data';\nimport { CustomScrollbar, stylesFactory, useStyles2 } from '@grafana/ui';\nimport { Icon, IconProps } from '@grafana/ui/src/components/Icon/Icon';\nimport { getFocusStyles } from '@grafana/ui/src/themes/mixins';\nimport { setStarred } from 'app/core/reducers/navBarTree';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { SearchCard } from 'app/features/search/components/SearchCard';\nimport { DashboardSearchHit } from 'app/features/search/types';\n\nimport { PanelLayout, PanelOptions } from './models.gen';\nimport { getStyles } from './styles';\n\ntype Dashboard = DashboardSearchHit & { isSearchResult?: boolean; isRecent?: boolean };\n\ninterface DashboardGroup {\n  show: boolean;\n  header: string;\n  dashboards: Dashboard[];\n}\n\nasync function fetchDashboards(options: PanelOptions, replaceVars: InterpolateFunction) {\n  let starredDashboards: Promise<Dashboard[]> = Promise.resolve([]);\n  if (options.showStarred) {\n    const params = { limit: options.maxItems, starred: 'true' };\n    starredDashboards = getBackendSrv().search(params);\n  }\n\n  let recentDashboards: Promise<Dashboard[]> = Promise.resolve([]);\n  let dashIds: number[] = [];\n  if (options.showRecentlyViewed) {\n    dashIds = take<number>(impressionSrv.getDashboardOpened(), options.maxItems);\n    recentDashboards = getBackendSrv().search({ dashboardIds: dashIds, limit: options.maxItems });\n  }\n\n  let searchedDashboards: Promise<Dashboard[]> = Promise.resolve([]);\n  if (options.showSearch) {\n    const params = {\n      limit: options.maxItems,\n      query: replaceVars(options.query, {}, 'text'),\n      folderIds: options.folderId,\n      tag: options.tags.map((tag: string) => replaceVars(tag, {}, 'text')),\n      type: 'dash-db',\n    };\n\n    searchedDashboards = getBackendSrv().search(params);\n  }\n\n  const [starred, searched, recent] = await Promise.all([starredDashboards, searchedDashboards, recentDashboards]);\n\n  // We deliberately deal with recent dashboards first so that the order of dash IDs is preserved\n  let dashMap = new Map<number, Dashboard>();\n  for (const dashId of dashIds) {\n    const dash = recent.find((d) => d.id === dashId);\n    if (dash) {\n      dashMap.set(dashId, { ...dash, isRecent: true });\n    }\n  }\n\n  searched.forEach((dash) => {\n    if (dashMap.has(dash.id)) {\n      dashMap.get(dash.id)!.isSearchResult = true;\n    } else {\n      dashMap.set(dash.id, { ...dash, isSearchResult: true });\n    }\n  });\n\n  starred.forEach((dash) => {\n    if (dashMap.has(dash.id)) {\n      dashMap.get(dash.id)!.isStarred = true;\n    } else {\n      dashMap.set(dash.id, { ...dash, isStarred: true });\n    }\n  });\n\n  return dashMap;\n}\n\nexport function DashList(props: PanelProps<PanelOptions>) {\n  const [dashboards, setDashboards] = useState(new Map<number, Dashboard>());\n  const dispatch = useDispatch();\n  useEffect(() => {\n    fetchDashboards(props.options, props.replaceVariables).then((dashes) => {\n      setDashboards(dashes);\n    });\n  }, [props.options, props.replaceVariables, props.renderCounter]);\n\n  const toggleDashboardStar = async (e: React.SyntheticEvent, dash: Dashboard) => {\n    const { uid, title, url } = dash;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const isStarred = await getDashboardSrv().starDashboard(dash.id.toString(), dash.isStarred);\n    const updatedDashboards = new Map(dashboards);\n    updatedDashboards.set(dash.id, { ...dash, isStarred });\n    setDashboards(updatedDashboards);\n    dispatch(setStarred({ id: uid ?? '', title, url, isStarred }));\n  };\n\n  const [starredDashboards, recentDashboards, searchedDashboards] = useMemo(() => {\n    const dashboardList = [...dashboards.values()];\n    return [\n      dashboardList.filter((dash) => dash.isStarred).sort((a, b) => a.title.localeCompare(b.title)),\n      dashboardList.filter((dash) => dash.isRecent),\n      dashboardList.filter((dash) => dash.isSearchResult).sort((a, b) => a.title.localeCompare(b.title)),\n    ];\n  }, [dashboards]);\n\n  const { showStarred, showRecentlyViewed, showHeadings, showSearch, layout } = props.options;\n\n  const dashboardGroups: DashboardGroup[] = [\n    {\n      header: 'Starred dashboards',\n      dashboards: starredDashboards,\n      show: showStarred,\n    },\n    {\n      header: 'Recently viewed dashboards',\n      dashboards: recentDashboards,\n      show: showRecentlyViewed,\n    },\n    {\n      header: 'Search',\n      dashboards: searchedDashboards,\n      show: showSearch,\n    },\n  ];\n\n  const css = useStyles2(getStyles);\n\n  const renderList = (dashboards: Dashboard[]) => (\n    <ul>\n      {dashboards.map((dash) => (\n        <li className={css.dashlistItem} key={`dash-${dash.id}`}>\n          <div className={css.dashlistLink}>\n            <div className={css.dashlistLinkBody}>\n              <a className={css.dashlistTitle} href={dash.url}>\n                {dash.title}\n              </a>\n              {dash.folderTitle && <div className={css.dashlistFolder}>{dash.folderTitle}</div>}\n            </div>\n            <IconToggle\n              aria-label={`Star dashboard \"${dash.title}\".`}\n              className={css.dashlistStar}\n              enabled={{ name: 'favorite', type: 'mono' }}\n              disabled={{ name: 'star', type: 'default' }}\n              checked={dash.isStarred}\n              onClick={(e) => toggleDashboardStar(e, dash)}\n            />\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n\n  const renderPreviews = (dashboards: Dashboard[]) => (\n    <ul className={css.gridContainer}>\n      {dashboards.map((dash) => (\n        <li key={dash.uid}>\n          <SearchCard item={dash} />\n        </li>\n      ))}\n    </ul>\n  );\n\n  return (\n    <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n      {dashboardGroups.map(\n        ({ show, header, dashboards }, i) =>\n          show && (\n            <div className={css.dashlistSection} key={`dash-group-${i}`}>\n              {showHeadings && <h6 className={css.dashlistSectionHeader}>{header}</h6>}\n              {layout === PanelLayout.Previews ? renderPreviews(dashboards) : renderList(dashboards)}\n            </div>\n          )\n      )}\n    </CustomScrollbar>\n  );\n}\n\ninterface IconToggleProps extends Partial<IconProps> {\n  enabled: IconProps;\n  disabled: IconProps;\n  checked: boolean;\n}\n\nfunction IconToggle({\n  enabled,\n  disabled,\n  checked,\n  onClick,\n  className,\n  'aria-label': ariaLabel,\n  ...otherProps\n}: IconToggleProps) {\n  const toggleCheckbox = useCallback(\n    (e: React.MouseEvent<HTMLInputElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      onClick?.(e);\n    },\n    [onClick]\n  );\n\n  const iconPropsOverride = checked ? enabled : disabled;\n  const iconProps = { ...otherProps, ...iconPropsOverride };\n  const styles = useStyles2(getCheckboxStyles);\n  return (\n    <label className={styles.wrapper}>\n      <input\n        type=\"checkbox\"\n        defaultChecked={checked}\n        onClick={toggleCheckbox}\n        className={styles.checkBox}\n        aria-label={ariaLabel}\n      />\n      <Icon className={cx(styles.icon, className)} {...iconProps} />\n    </label>\n  );\n}\n\nexport const getCheckboxStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      display: 'flex',\n      alignSelf: 'center',\n      cursor: 'pointer',\n      zIndex: 1,\n    }),\n    checkBox: css({\n      appearance: 'none',\n      '&:focus-visible + *': {\n        ...getFocusStyles(theme),\n        borderRadius: theme.shape.borderRadius(1),\n      },\n    }),\n    icon: css({\n      marginBottom: 0,\n      verticalAlign: 'baseline',\n      display: 'flex',\n    }),\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}