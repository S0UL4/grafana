{"ast":null,"code":"import { FieldMatcherID } from '../matchers/ids';\nimport { filterFieldsTransformer } from './filter';\nimport { DataTransformerID } from './ids';\nexport const filterFieldsByNameTransformer = {\n  id: DataTransformerID.filterFieldsByName,\n  name: 'Filter fields by name',\n  description: 'select a subset of fields',\n  defaultOptions: {},\n\n  /**\n   * Return a modified copy of the series.  If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: options => source => source.pipe(filterFieldsTransformer.operator({\n    include: getMatcherConfig(options.include),\n    exclude: getMatcherConfig(options.exclude)\n  }))\n};\n\nconst getMatcherConfig = options => {\n  if (!options) {\n    return undefined;\n  }\n\n  const {\n    names,\n    pattern\n  } = options;\n\n  if ((!Array.isArray(names) || names.length === 0) && !pattern) {\n    return undefined;\n  }\n\n  if (!pattern) {\n    return {\n      id: FieldMatcherID.byNames,\n      options: {\n        names\n      }\n    };\n  }\n\n  if (!Array.isArray(names) || names.length === 0) {\n    return {\n      id: FieldMatcherID.byRegexp,\n      options: pattern\n    };\n  }\n\n  return {\n    id: FieldMatcherID.byRegexpOrNames,\n    options\n  };\n};","map":{"version":3,"names":["FieldMatcherID","filterFieldsTransformer","DataTransformerID","filterFieldsByNameTransformer","id","filterFieldsByName","name","description","defaultOptions","operator","options","source","pipe","include","getMatcherConfig","exclude","undefined","names","pattern","Array","isArray","length","byNames","byRegexp","byRegexpOrNames"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/transformers/filterByName.ts"],"sourcesContent":["import { DataTransformerInfo, MatcherConfig } from '../../types/transformations';\nimport { FieldMatcherID } from '../matchers/ids';\nimport { RegexpOrNamesMatcherOptions } from '../matchers/nameMatcher';\n\nimport { filterFieldsTransformer } from './filter';\nimport { DataTransformerID } from './ids';\n\nexport interface FilterFieldsByNameTransformerOptions {\n  include?: RegexpOrNamesMatcherOptions;\n  exclude?: RegexpOrNamesMatcherOptions;\n}\n\nexport const filterFieldsByNameTransformer: DataTransformerInfo<FilterFieldsByNameTransformerOptions> = {\n  id: DataTransformerID.filterFieldsByName,\n  name: 'Filter fields by name',\n  description: 'select a subset of fields',\n  defaultOptions: {},\n\n  /**\n   * Return a modified copy of the series.  If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options) => (source) =>\n    source.pipe(\n      filterFieldsTransformer.operator({\n        include: getMatcherConfig(options.include),\n        exclude: getMatcherConfig(options.exclude),\n      })\n    ),\n};\n\nconst getMatcherConfig = (options?: RegexpOrNamesMatcherOptions): MatcherConfig | undefined => {\n  if (!options) {\n    return undefined;\n  }\n\n  const { names, pattern } = options;\n\n  if ((!Array.isArray(names) || names.length === 0) && !pattern) {\n    return undefined;\n  }\n\n  if (!pattern) {\n    return { id: FieldMatcherID.byNames, options: { names } };\n  }\n\n  if (!Array.isArray(names) || names.length === 0) {\n    return { id: FieldMatcherID.byRegexp, options: pattern };\n  }\n\n  return { id: FieldMatcherID.byRegexpOrNames, options };\n};\n"],"mappings":"AACA,SAASA,cAAT,QAA+B,iBAA/B;AAGA,SAASC,uBAAT,QAAwC,UAAxC;AACA,SAASC,iBAAT,QAAkC,OAAlC;AAOA,OAAO,MAAMC,6BAAwF,GAAG;EACtGC,EAAE,EAAEF,iBAAiB,CAACG,kBADgF;EAEtGC,IAAI,EAAE,uBAFgG;EAGtGC,WAAW,EAAE,2BAHyF;EAItGC,cAAc,EAAE,EAJsF;;EAMtG;AACF;AACA;AACA;EACEC,QAAQ,EAAGC,OAAD,IAAcC,MAAD,IACrBA,MAAM,CAACC,IAAP,CACEX,uBAAuB,CAACQ,QAAxB,CAAiC;IAC/BI,OAAO,EAAEC,gBAAgB,CAACJ,OAAO,CAACG,OAAT,CADM;IAE/BE,OAAO,EAAED,gBAAgB,CAACJ,OAAO,CAACK,OAAT;EAFM,CAAjC,CADF;AAXoG,CAAjG;;AAmBP,MAAMD,gBAAgB,GAAIJ,OAAD,IAAsE;EAC7F,IAAI,CAACA,OAAL,EAAc;IACZ,OAAOM,SAAP;EACD;;EAED,MAAM;IAAEC,KAAF;IAASC;EAAT,IAAqBR,OAA3B;;EAEA,IAAI,CAAC,CAACS,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAD,IAAyBA,KAAK,CAACI,MAAN,KAAiB,CAA3C,KAAiD,CAACH,OAAtD,EAA+D;IAC7D,OAAOF,SAAP;EACD;;EAED,IAAI,CAACE,OAAL,EAAc;IACZ,OAAO;MAAEd,EAAE,EAAEJ,cAAc,CAACsB,OAArB;MAA8BZ,OAAO,EAAE;QAAEO;MAAF;IAAvC,CAAP;EACD;;EAED,IAAI,CAACE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAD,IAAyBA,KAAK,CAACI,MAAN,KAAiB,CAA9C,EAAiD;IAC/C,OAAO;MAAEjB,EAAE,EAAEJ,cAAc,CAACuB,QAArB;MAA+Bb,OAAO,EAAEQ;IAAxC,CAAP;EACD;;EAED,OAAO;IAAEd,EAAE,EAAEJ,cAAc,CAACwB,eAArB;IAAsCd;EAAtC,CAAP;AACD,CApBD"},"metadata":{},"sourceType":"module"}