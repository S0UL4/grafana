{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { linkedTokenBuilder } from '../monarch/linkedTokenBuilder';\nimport { CompletionItemPriority } from '../monarch/types';\nimport { DYNAMIC_LABEL_PATTERNS } from './language';\nexport class DynamicLabelsCompletionItemProvider {\n  constructor() {\n    _defineProperty(this, \"tokenTypes\", void 0);\n\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis.cloudwatch-dynamicLabels',\n      Whitespace: 'white.cloudwatch-dynamicLabels',\n      Keyword: 'keyword.cloudwatch-dynamicLabels',\n      Delimiter: 'delimiter.cloudwatch-dynamicLabels',\n      Operator: 'operator.cloudwatch-dynamicLabels',\n      Identifier: 'identifier.cloudwatch-dynamicLabels',\n      Type: 'type.cloudwatch-dynamicLabels',\n      Function: 'predefined.cloudwatch-dynamicLabels',\n      Number: 'number.cloudwatch-dynamicLabels',\n      String: 'string.cloudwatch-dynamicLabels',\n      Variable: 'variable.cloudwatch-dynamicLabels'\n    };\n  } // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n\n\n  getCompletionProvider(monaco, languageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"],\n      // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model, position) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const invalidRangeToken = (currentToken === null || currentToken === void 0 ? void 0 : currentToken.isWhiteSpace()) || (currentToken === null || currentToken === void 0 ? void 0 : currentToken.isParenthesis());\n        const range = invalidRangeToken || !(currentToken !== null && currentToken !== void 0 && currentToken.range) ? monaco.Range.fromPositions(position) : currentToken === null || currentToken === void 0 ? void 0 : currentToken.range;\n\n        const toCompletionItem = (value, rest = {}) => {\n          const item = Object.assign({\n            label: value,\n            insertText: value,\n            kind: monaco.languages.CompletionItemKind.Field,\n            range,\n            sortText: CompletionItemPriority.Medium\n          }, rest);\n          return item;\n        };\n\n        let suggestions = [];\n        const next = currentToken === null || currentToken === void 0 ? void 0 : currentToken.next;\n\n        if (!(currentToken !== null && currentToken !== void 0 && currentToken.isFunction()) && (!next || next.isWhiteSpace())) {\n          suggestions = DYNAMIC_LABEL_PATTERNS.map(val => toCompletionItem(val)); // always insert suggestion for dimension value and allow user to complete pattern by providing the dimension name\n\n          suggestions.push(toCompletionItem(\"${PROP('Dim.')}\", {\n            sortText: CompletionItemPriority.High,\n            insertText: `\\${PROP('Dim.$0')} `,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n          }));\n        }\n\n        return {\n          suggestions\n        };\n      }\n    };\n  }\n\n}","map":{"version":3,"names":["linkedTokenBuilder","CompletionItemPriority","DYNAMIC_LABEL_PATTERNS","DynamicLabelsCompletionItemProvider","constructor","tokenTypes","Parenthesis","Whitespace","Keyword","Delimiter","Operator","Identifier","Type","Function","Number","String","Variable","getCompletionProvider","monaco","languageDefinition","triggerCharacters","provideCompletionItems","model","position","currentToken","invalidRangeToken","isWhiteSpace","isParenthesis","range","Range","fromPositions","toCompletionItem","value","rest","item","label","insertText","kind","languages","CompletionItemKind","Field","sortText","Medium","suggestions","next","isFunction","map","val","push","High","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/dynamic-labels/CompletionItemProvider.ts"],"sourcesContent":["import type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { linkedTokenBuilder } from '../monarch/linkedTokenBuilder';\nimport { LanguageDefinition } from '../monarch/register';\nimport { Completeable, CompletionItemPriority, TokenTypes } from '../monarch/types';\n\nimport { DYNAMIC_LABEL_PATTERNS } from './language';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class DynamicLabelsCompletionItemProvider implements Completeable {\n  tokenTypes: TokenTypes;\n\n  constructor() {\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis.cloudwatch-dynamicLabels',\n      Whitespace: 'white.cloudwatch-dynamicLabels',\n      Keyword: 'keyword.cloudwatch-dynamicLabels',\n      Delimiter: 'delimiter.cloudwatch-dynamicLabels',\n      Operator: 'operator.cloudwatch-dynamicLabels',\n      Identifier: 'identifier.cloudwatch-dynamicLabels',\n      Type: 'type.cloudwatch-dynamicLabels',\n      Function: 'predefined.cloudwatch-dynamicLabels',\n      Number: 'number.cloudwatch-dynamicLabels',\n      String: 'string.cloudwatch-dynamicLabels',\n      Variable: 'variable.cloudwatch-dynamicLabels',\n    };\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n        const range =\n          invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n        const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n          const item: CompletionItem = {\n            label: value,\n            insertText: value,\n            kind: monaco.languages.CompletionItemKind.Field,\n            range,\n            sortText: CompletionItemPriority.Medium,\n            ...rest,\n          };\n          return item;\n        };\n        let suggestions: CompletionItem[] = [];\n        const next = currentToken?.next;\n        if (!currentToken?.isFunction() && (!next || next.isWhiteSpace())) {\n          suggestions = DYNAMIC_LABEL_PATTERNS.map((val) => toCompletionItem(val));\n          // always insert suggestion for dimension value and allow user to complete pattern by providing the dimension name\n          suggestions.push(\n            toCompletionItem(\"${PROP('Dim.')}\", {\n              sortText: CompletionItemPriority.High,\n              insertText: `\\${PROP('Dim.$0')} `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            })\n          );\n        }\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n"],"mappings":";;AAEA,SAASA,kBAAT,QAAmC,+BAAnC;AAEA,SAAuBC,sBAAvB,QAAiE,kBAAjE;AAEA,SAASC,sBAAT,QAAuC,YAAvC;AAIA,OAAO,MAAMC,mCAAN,CAAkE;EAGvEC,WAAW,GAAG;IAAA;;IACZ,KAAKC,UAAL,GAAkB;MAChBC,WAAW,EAAE,gDADG;MAEhBC,UAAU,EAAE,gCAFI;MAGhBC,OAAO,EAAE,kCAHO;MAIhBC,SAAS,EAAE,oCAJK;MAKhBC,QAAQ,EAAE,mCALM;MAMhBC,UAAU,EAAE,qCANI;MAOhBC,IAAI,EAAE,+BAPU;MAQhBC,QAAQ,EAAE,qCARM;MAShBC,MAAM,EAAE,iCATQ;MAUhBC,MAAM,EAAE,iCAVQ;MAWhBC,QAAQ,EAAE;IAXM,CAAlB;EAaD,CAjBsE,CAmBvE;EACA;;;EACAC,qBAAqB,CAACC,MAAD,EAAiBC,kBAAjB,EAAyD;IAC5E,OAAO;MACLC,iBAAiB,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CADd;MACyC;MAC9CC,sBAAsB,EAAE,OAAOC,KAAP,EAA6CC,QAA7C,KAAiF;QACvG,MAAMC,YAAY,GAAGxB,kBAAkB,CAACkB,MAAD,EAASC,kBAAT,EAA6BG,KAA7B,EAAoCC,QAApC,EAA8C,KAAKlB,UAAnD,CAAvC;QACA,MAAMoB,iBAAiB,GAAG,CAAAD,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEE,YAAd,QAAgCF,YAAhC,aAAgCA,YAAhC,uBAAgCA,YAAY,CAAEG,aAAd,EAAhC,CAA1B;QACA,MAAMC,KAAK,GACTH,iBAAiB,IAAI,EAACD,YAAD,aAACA,YAAD,eAACA,YAAY,CAAEI,KAAf,CAArB,GAA4CV,MAAM,CAACW,KAAP,CAAaC,aAAb,CAA2BP,QAA3B,CAA5C,GAAmFC,YAAnF,aAAmFA,YAAnF,uBAAmFA,YAAY,CAAEI,KADnG;;QAEA,MAAMG,gBAAgB,GAAG,CAACC,KAAD,EAAgBC,IAA6B,GAAG,EAAhD,KAAuD;UAC9E,MAAMC,IAAoB;YACxBC,KAAK,EAAEH,KADiB;YAExBI,UAAU,EAAEJ,KAFY;YAGxBK,IAAI,EAAEnB,MAAM,CAACoB,SAAP,CAAiBC,kBAAjB,CAAoCC,KAHlB;YAIxBZ,KAJwB;YAKxBa,QAAQ,EAAExC,sBAAsB,CAACyC;UALT,GAMrBT,IANqB,CAA1B;UAQA,OAAOC,IAAP;QACD,CAVD;;QAWA,IAAIS,WAA6B,GAAG,EAApC;QACA,MAAMC,IAAI,GAAGpB,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAEoB,IAA3B;;QACA,IAAI,EAACpB,YAAD,aAACA,YAAD,eAACA,YAAY,CAAEqB,UAAd,EAAD,MAAgC,CAACD,IAAD,IAASA,IAAI,CAAClB,YAAL,EAAzC,CAAJ,EAAmE;UACjEiB,WAAW,GAAGzC,sBAAsB,CAAC4C,GAAvB,CAA4BC,GAAD,IAAShB,gBAAgB,CAACgB,GAAD,CAApD,CAAd,CADiE,CAEjE;;UACAJ,WAAW,CAACK,IAAZ,CACEjB,gBAAgB,CAAC,iBAAD,EAAoB;YAClCU,QAAQ,EAAExC,sBAAsB,CAACgD,IADC;YAElCb,UAAU,EAAG,qBAFqB;YAGlCc,eAAe,EAAEhC,MAAM,CAACoB,SAAP,CAAiBa,4BAAjB,CAA8CC;UAH7B,CAApB,CADlB;QAOD;;QAED,OAAO;UACLT;QADK,CAAP;MAGD;IAnCI,CAAP;EAqCD;;AA3DsE"},"metadata":{},"sourceType":"module"}