{"ast":null,"code":"import { defaultAddOperationHandler } from '../../prometheus/querybuilder/shared/operationUtils';\nimport { LokiOperationId, LokiVisualQueryOperationCategory } from './types';\nexport const binaryScalarDefs = [{\n  id: LokiOperationId.Addition,\n  name: 'Add scalar',\n  sign: '+'\n}, {\n  id: LokiOperationId.Subtraction,\n  name: 'Subtract scalar',\n  sign: '-'\n}, {\n  id: LokiOperationId.MultiplyBy,\n  name: 'Multiply by scalar',\n  sign: '*'\n}, {\n  id: LokiOperationId.DivideBy,\n  name: 'Divide by scalar',\n  sign: '/'\n}, {\n  id: LokiOperationId.Modulo,\n  name: 'Modulo by scalar',\n  sign: '%'\n}, {\n  id: LokiOperationId.Exponent,\n  name: 'Exponent',\n  sign: '^'\n}, {\n  id: LokiOperationId.EqualTo,\n  name: 'Equal to',\n  sign: '==',\n  comparison: true\n}, {\n  id: LokiOperationId.NotEqualTo,\n  name: 'Not equal to',\n  sign: '!=',\n  comparison: true\n}, {\n  id: LokiOperationId.GreaterThan,\n  name: 'Greater than',\n  sign: '>',\n  comparison: true\n}, {\n  id: LokiOperationId.LessThan,\n  name: 'Less than',\n  sign: '<',\n  comparison: true\n}, {\n  id: LokiOperationId.GreaterOrEqual,\n  name: 'Greater or equal to',\n  sign: '>=',\n  comparison: true\n}, {\n  id: LokiOperationId.LessOrEqual,\n  name: 'Less or equal to',\n  sign: '<=',\n  comparison: true\n}]; // Not sure about this one. It could also be a more generic 'Simple math operation' where user specifies\n// both the operator and the operand in a single input\n\nexport const binaryScalarOperations = binaryScalarDefs.map(opDef => {\n  const params = [{\n    name: 'Value',\n    type: 'number'\n  }];\n  const defaultParams = [2];\n\n  if (opDef.comparison) {\n    params.unshift({\n      name: 'Bool',\n      type: 'boolean',\n      description: 'If checked comparison will return 0 or 1 for the value rather than filtering.'\n    });\n    defaultParams.unshift(false);\n  }\n\n  return {\n    id: opDef.id,\n    name: opDef.name,\n    params,\n    defaultParams,\n    alternativesKey: 'binary scalar operations',\n    category: LokiVisualQueryOperationCategory.BinaryOps,\n    renderer: getSimpleBinaryRenderer(opDef.sign),\n    addOperationHandler: defaultAddOperationHandler\n  };\n});\n\nfunction getSimpleBinaryRenderer(operator) {\n  return function binaryRenderer(model, def, innerExpr) {\n    let param = model.params[0];\n    let bool = '';\n\n    if (model.params.length === 2) {\n      param = model.params[1];\n      bool = model.params[0] ? ' bool' : '';\n    }\n\n    return `${innerExpr} ${operator}${bool} ${param}`;\n  };\n}","map":{"version":3,"names":["defaultAddOperationHandler","LokiOperationId","LokiVisualQueryOperationCategory","binaryScalarDefs","id","Addition","name","sign","Subtraction","MultiplyBy","DivideBy","Modulo","Exponent","EqualTo","comparison","NotEqualTo","GreaterThan","LessThan","GreaterOrEqual","LessOrEqual","binaryScalarOperations","map","opDef","params","type","defaultParams","unshift","description","alternativesKey","category","BinaryOps","renderer","getSimpleBinaryRenderer","addOperationHandler","operator","binaryRenderer","model","def","innerExpr","param","bool","length"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/querybuilder/binaryScalarOperations.ts"],"sourcesContent":["import { defaultAddOperationHandler } from '../../prometheus/querybuilder/shared/operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n} from '../../prometheus/querybuilder/shared/types';\n\nimport { LokiOperationId, LokiVisualQueryOperationCategory } from './types';\n\nexport const binaryScalarDefs = [\n  {\n    id: LokiOperationId.Addition,\n    name: 'Add scalar',\n    sign: '+',\n  },\n  {\n    id: LokiOperationId.Subtraction,\n    name: 'Subtract scalar',\n    sign: '-',\n  },\n  {\n    id: LokiOperationId.MultiplyBy,\n    name: 'Multiply by scalar',\n    sign: '*',\n  },\n  {\n    id: LokiOperationId.DivideBy,\n    name: 'Divide by scalar',\n    sign: '/',\n  },\n  {\n    id: LokiOperationId.Modulo,\n    name: 'Modulo by scalar',\n    sign: '%',\n  },\n  {\n    id: LokiOperationId.Exponent,\n    name: 'Exponent',\n    sign: '^',\n  },\n  {\n    id: LokiOperationId.EqualTo,\n    name: 'Equal to',\n    sign: '==',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.NotEqualTo,\n    name: 'Not equal to',\n    sign: '!=',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.GreaterThan,\n    name: 'Greater than',\n    sign: '>',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.LessThan,\n    name: 'Less than',\n    sign: '<',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.GreaterOrEqual,\n    name: 'Greater or equal to',\n    sign: '>=',\n    comparison: true,\n  },\n  {\n    id: LokiOperationId.LessOrEqual,\n    name: 'Less or equal to',\n    sign: '<=',\n    comparison: true,\n  },\n];\n\n// Not sure about this one. It could also be a more generic 'Simple math operation' where user specifies\n// both the operator and the operand in a single input\nexport const binaryScalarOperations: QueryBuilderOperationDef[] = binaryScalarDefs.map((opDef) => {\n  const params: QueryBuilderOperationParamDef[] = [{ name: 'Value', type: 'number' }];\n  const defaultParams: any[] = [2];\n  if (opDef.comparison) {\n    params.unshift({\n      name: 'Bool',\n      type: 'boolean',\n      description: 'If checked comparison will return 0 or 1 for the value rather than filtering.',\n    });\n    defaultParams.unshift(false);\n  }\n\n  return {\n    id: opDef.id,\n    name: opDef.name,\n    params,\n    defaultParams,\n    alternativesKey: 'binary scalar operations',\n    category: LokiVisualQueryOperationCategory.BinaryOps,\n    renderer: getSimpleBinaryRenderer(opDef.sign),\n    addOperationHandler: defaultAddOperationHandler,\n  };\n});\n\nfunction getSimpleBinaryRenderer(operator: string) {\n  return function binaryRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    let param = model.params[0];\n    let bool = '';\n    if (model.params.length === 2) {\n      param = model.params[1];\n      bool = model.params[0] ? ' bool' : '';\n    }\n\n    return `${innerExpr} ${operator}${bool} ${param}`;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}