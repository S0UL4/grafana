{"ast":null,"code":"import { debounce } from 'lodash';\nimport { dateTimeFormatTimeAgo } from '@grafana/data';\nimport { featureEnabled, getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction } from 'app/types';\nimport { userAdminPageLoadedAction, userProfileLoadedAction, userOrgsLoadedAction, userSessionsLoadedAction, userAdminPageFailedAction, ldapConnectionInfoLoadedAction, ldapSyncStatusLoadedAction, userMappingInfoLoadedAction, userMappingInfoFailedAction, clearUserMappingInfoAction, clearUserErrorAction, ldapFailedAction, usersFetched, queryChanged, pageChanged, filterChanged, usersFetchBegin, usersFetchEnd } from './reducers'; // UserAdminPage\n\nexport function loadAdminUserPage(userId) {\n  return async dispatch => {\n    try {\n      dispatch(userAdminPageLoadedAction(false));\n      await dispatch(loadUserProfile(userId));\n      await dispatch(loadUserOrgs(userId));\n      await dispatch(loadUserSessions(userId));\n\n      if (config.ldapEnabled && featureEnabled('ldapsync')) {\n        await dispatch(loadLdapSyncStatus());\n      }\n\n      dispatch(userAdminPageLoadedAction(true));\n    } catch (error) {\n      console.error(error);\n\n      if (isFetchError(error)) {\n        const userError = {\n          title: error.data.message,\n          body: error.data.error\n        };\n        dispatch(userAdminPageFailedAction(userError));\n      }\n    }\n  };\n}\nexport function loadUserProfile(userId) {\n  return async dispatch => {\n    const user = await getBackendSrv().get(`/api/users/${userId}`, accessControlQueryParam());\n    dispatch(userProfileLoadedAction(user));\n  };\n}\nexport function updateUser(user) {\n  return async dispatch => {\n    await getBackendSrv().put(`/api/users/${user.id}`, user);\n    dispatch(loadAdminUserPage(user.id));\n  };\n}\nexport function setUserPassword(userId, password) {\n  return async dispatch => {\n    const payload = {\n      password\n    };\n    await getBackendSrv().put(`/api/admin/users/${userId}/password`, payload);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\nexport function disableUser(userId) {\n  return async dispatch => {\n    await getBackendSrv().post(`/api/admin/users/${userId}/disable`);\n    locationService.push('/admin/users');\n  };\n}\nexport function enableUser(userId) {\n  return async dispatch => {\n    await getBackendSrv().post(`/api/admin/users/${userId}/enable`);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\nexport function deleteUser(userId) {\n  return async dispatch => {\n    await getBackendSrv().delete(`/api/admin/users/${userId}`);\n    locationService.push('/admin/users');\n  };\n}\nexport function updateUserPermissions(userId, isGrafanaAdmin) {\n  return async dispatch => {\n    const payload = {\n      isGrafanaAdmin\n    };\n    await getBackendSrv().put(`/api/admin/users/${userId}/permissions`, payload);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\nexport function loadUserOrgs(userId) {\n  return async dispatch => {\n    const orgs = await getBackendSrv().get(`/api/users/${userId}/orgs`);\n    dispatch(userOrgsLoadedAction(orgs));\n  };\n}\nexport function addOrgUser(user, orgId, role) {\n  return async dispatch => {\n    const payload = {\n      loginOrEmail: user.login,\n      role: role\n    };\n    await getBackendSrv().post(`/api/orgs/${orgId}/users/`, payload);\n    dispatch(loadAdminUserPage(user.id));\n  };\n}\nexport function updateOrgUserRole(userId, orgId, role) {\n  return async dispatch => {\n    const payload = {\n      role\n    };\n    await getBackendSrv().patch(`/api/orgs/${orgId}/users/${userId}`, payload);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\nexport function deleteOrgUser(userId, orgId) {\n  return async dispatch => {\n    await getBackendSrv().delete(`/api/orgs/${orgId}/users/${userId}`);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\nexport function loadUserSessions(userId) {\n  return async dispatch => {\n    if (!contextSrv.hasPermission(AccessControlAction.UsersAuthTokenList)) {\n      return;\n    }\n\n    const tokens = await getBackendSrv().get(`/api/admin/users/${userId}/auth-tokens`);\n    tokens.reverse();\n    const sessions = tokens.map(session => {\n      return {\n        id: session.id,\n        isActive: session.isActive,\n        seenAt: dateTimeFormatTimeAgo(session.seenAt),\n        createdAt: session.createdAt,\n        clientIp: session.clientIp,\n        browser: session.browser,\n        browserVersion: session.browserVersion,\n        os: session.os,\n        osVersion: session.osVersion,\n        device: session.device\n      };\n    });\n    dispatch(userSessionsLoadedAction(sessions));\n  };\n}\nexport function revokeSession(tokenId, userId) {\n  return async dispatch => {\n    const payload = {\n      authTokenId: tokenId\n    };\n    await getBackendSrv().post(`/api/admin/users/${userId}/revoke-auth-token`, payload);\n    dispatch(loadUserSessions(userId));\n  };\n}\nexport function revokeAllSessions(userId) {\n  return async dispatch => {\n    await getBackendSrv().post(`/api/admin/users/${userId}/logout`);\n    dispatch(loadUserSessions(userId));\n  };\n} // LDAP user actions\n\nexport function loadLdapSyncStatus() {\n  return async dispatch => {\n    // Available only in enterprise\n    const canReadLDAPStatus = contextSrv.hasPermission(AccessControlAction.LDAPStatusRead);\n\n    if (featureEnabled('ldapsync') && canReadLDAPStatus) {\n      const syncStatus = await getBackendSrv().get(`/api/admin/ldap-sync-status`);\n      dispatch(ldapSyncStatusLoadedAction(syncStatus));\n    }\n  };\n}\nexport function syncLdapUser(userId) {\n  return async dispatch => {\n    await getBackendSrv().post(`/api/admin/ldap/sync/${userId}`);\n    dispatch(loadAdminUserPage(userId));\n  };\n} // LDAP debug page\n\nexport function loadLdapState() {\n  return async dispatch => {\n    if (!contextSrv.hasPermission(AccessControlAction.LDAPStatusRead)) {\n      return;\n    }\n\n    try {\n      const connectionInfo = await getBackendSrv().get(`/api/admin/ldap/status`);\n      dispatch(ldapConnectionInfoLoadedAction(connectionInfo));\n    } catch (error) {\n      if (isFetchError(error)) {\n        error.isHandled = true;\n        const ldapError = {\n          title: error.data.message,\n          body: error.data.error\n        };\n        dispatch(ldapFailedAction(ldapError));\n      }\n    }\n  };\n}\nexport function loadUserMapping(username) {\n  return async dispatch => {\n    try {\n      const response = await getBackendSrv().get(`/api/admin/ldap/${encodeURIComponent(username)}`);\n      const {\n        name,\n        surname,\n        email,\n        login,\n        isGrafanaAdmin,\n        isDisabled,\n        roles,\n        teams\n      } = response;\n      const userInfo = {\n        info: {\n          name,\n          surname,\n          email,\n          login\n        },\n        permissions: {\n          isGrafanaAdmin,\n          isDisabled\n        },\n        roles,\n        teams\n      };\n      dispatch(userMappingInfoLoadedAction(userInfo));\n    } catch (error) {\n      if (isFetchError(error)) {\n        error.isHandled = true;\n        const userError = {\n          title: error.data.message,\n          body: error.data.error\n        };\n        dispatch(clearUserMappingInfoAction());\n        dispatch(userMappingInfoFailedAction(userError));\n      }\n    }\n  };\n}\nexport function clearUserError() {\n  return dispatch => {\n    dispatch(clearUserErrorAction());\n  };\n}\nexport function clearUserMappingInfo() {\n  return dispatch => {\n    dispatch(clearUserErrorAction());\n    dispatch(clearUserMappingInfoAction());\n  };\n} // UserListAdminPage\n\nconst getFilters = filters => {\n  return filters.map(filter => {\n    if (Array.isArray(filter.value)) {\n      return filter.value.map(v => `${filter.name}=${v.value}`).join('&');\n    }\n\n    return `${filter.name}=${filter.value}`;\n  }).join('&');\n};\n\nexport function fetchUsers() {\n  return async (dispatch, getState) => {\n    try {\n      const {\n        perPage,\n        page,\n        query,\n        filters\n      } = getState().userListAdmin;\n      const result = await getBackendSrv().get(`/api/users/search?perpage=${perPage}&page=${page}&query=${query}&${getFilters(filters)}`);\n      dispatch(usersFetched(result));\n    } catch (error) {\n      usersFetchEnd();\n      console.error(error);\n    }\n  };\n}\nconst fetchUsersWithDebounce = debounce(dispatch => dispatch(fetchUsers()), 500);\nexport function changeQuery(query) {\n  return async dispatch => {\n    dispatch(usersFetchBegin());\n    dispatch(queryChanged(query));\n    fetchUsersWithDebounce(dispatch);\n  };\n}\nexport function changeFilter(filter) {\n  return async dispatch => {\n    dispatch(usersFetchBegin());\n    dispatch(filterChanged(filter));\n    fetchUsersWithDebounce(dispatch);\n  };\n}\nexport function changePage(page) {\n  return async dispatch => {\n    dispatch(usersFetchBegin());\n    dispatch(pageChanged(page));\n    dispatch(fetchUsers());\n  };\n}","map":{"version":3,"names":["debounce","dateTimeFormatTimeAgo","featureEnabled","getBackendSrv","isFetchError","locationService","config","contextSrv","accessControlQueryParam","AccessControlAction","userAdminPageLoadedAction","userProfileLoadedAction","userOrgsLoadedAction","userSessionsLoadedAction","userAdminPageFailedAction","ldapConnectionInfoLoadedAction","ldapSyncStatusLoadedAction","userMappingInfoLoadedAction","userMappingInfoFailedAction","clearUserMappingInfoAction","clearUserErrorAction","ldapFailedAction","usersFetched","queryChanged","pageChanged","filterChanged","usersFetchBegin","usersFetchEnd","loadAdminUserPage","userId","dispatch","loadUserProfile","loadUserOrgs","loadUserSessions","ldapEnabled","loadLdapSyncStatus","error","console","userError","title","data","message","body","user","get","updateUser","put","id","setUserPassword","password","payload","disableUser","post","push","enableUser","deleteUser","delete","updateUserPermissions","isGrafanaAdmin","orgs","addOrgUser","orgId","role","loginOrEmail","login","updateOrgUserRole","patch","deleteOrgUser","hasPermission","UsersAuthTokenList","tokens","reverse","sessions","map","session","isActive","seenAt","createdAt","clientIp","browser","browserVersion","os","osVersion","device","revokeSession","tokenId","authTokenId","revokeAllSessions","canReadLDAPStatus","LDAPStatusRead","syncStatus","syncLdapUser","loadLdapState","connectionInfo","isHandled","ldapError","loadUserMapping","username","response","encodeURIComponent","name","surname","email","isDisabled","roles","teams","userInfo","info","permissions","clearUserError","clearUserMappingInfo","getFilters","filters","filter","Array","isArray","value","v","join","fetchUsers","getState","perPage","page","query","userListAdmin","result","fetchUsersWithDebounce","changeQuery","changeFilter","changePage"],"sources":["/home/soula/grafana/public/app/features/admin/state/actions.ts"],"sourcesContent":["import { debounce } from 'lodash';\n\nimport { dateTimeFormatTimeAgo } from '@grafana/data';\nimport { featureEnabled, getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { ThunkResult, LdapUser, UserSession, UserDTO, AccessControlAction, UserFilter } from 'app/types';\n\nimport {\n  userAdminPageLoadedAction,\n  userProfileLoadedAction,\n  userOrgsLoadedAction,\n  userSessionsLoadedAction,\n  userAdminPageFailedAction,\n  ldapConnectionInfoLoadedAction,\n  ldapSyncStatusLoadedAction,\n  userMappingInfoLoadedAction,\n  userMappingInfoFailedAction,\n  clearUserMappingInfoAction,\n  clearUserErrorAction,\n  ldapFailedAction,\n  usersFetched,\n  queryChanged,\n  pageChanged,\n  filterChanged,\n  usersFetchBegin,\n  usersFetchEnd,\n} from './reducers';\n// UserAdminPage\n\nexport function loadAdminUserPage(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      dispatch(userAdminPageLoadedAction(false));\n      await dispatch(loadUserProfile(userId));\n      await dispatch(loadUserOrgs(userId));\n      await dispatch(loadUserSessions(userId));\n      if (config.ldapEnabled && featureEnabled('ldapsync')) {\n        await dispatch(loadLdapSyncStatus());\n      }\n      dispatch(userAdminPageLoadedAction(true));\n    } catch (error) {\n      console.error(error);\n\n      if (isFetchError(error)) {\n        const userError = {\n          title: error.data.message,\n          body: error.data.error,\n        };\n\n        dispatch(userAdminPageFailedAction(userError));\n      }\n    }\n  };\n}\n\nexport function loadUserProfile(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const user = await getBackendSrv().get(`/api/users/${userId}`, accessControlQueryParam());\n    dispatch(userProfileLoadedAction(user));\n  };\n}\n\nexport function updateUser(user: UserDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/users/${user.id}`, user);\n    dispatch(loadAdminUserPage(user.id));\n  };\n}\n\nexport function setUserPassword(userId: number, password: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const payload = { password };\n    await getBackendSrv().put(`/api/admin/users/${userId}/password`, payload);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\n\nexport function disableUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/admin/users/${userId}/disable`);\n    locationService.push('/admin/users');\n  };\n}\n\nexport function enableUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/admin/users/${userId}/enable`);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\n\nexport function deleteUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/admin/users/${userId}`);\n    locationService.push('/admin/users');\n  };\n}\n\nexport function updateUserPermissions(userId: number, isGrafanaAdmin: boolean): ThunkResult<void> {\n  return async (dispatch) => {\n    const payload = { isGrafanaAdmin };\n    await getBackendSrv().put(`/api/admin/users/${userId}/permissions`, payload);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\n\nexport function loadUserOrgs(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const orgs = await getBackendSrv().get(`/api/users/${userId}/orgs`);\n    dispatch(userOrgsLoadedAction(orgs));\n  };\n}\n\nexport function addOrgUser(user: UserDTO, orgId: number, role: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const payload = {\n      loginOrEmail: user.login,\n      role: role,\n    };\n    await getBackendSrv().post(`/api/orgs/${orgId}/users/`, payload);\n    dispatch(loadAdminUserPage(user.id));\n  };\n}\n\nexport function updateOrgUserRole(userId: number, orgId: number, role: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const payload = { role };\n    await getBackendSrv().patch(`/api/orgs/${orgId}/users/${userId}`, payload);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\n\nexport function deleteOrgUser(userId: number, orgId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/orgs/${orgId}/users/${userId}`);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\n\nexport function loadUserSessions(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    if (!contextSrv.hasPermission(AccessControlAction.UsersAuthTokenList)) {\n      return;\n    }\n\n    const tokens = await getBackendSrv().get(`/api/admin/users/${userId}/auth-tokens`);\n    tokens.reverse();\n\n    const sessions = tokens.map((session: UserSession) => {\n      return {\n        id: session.id,\n        isActive: session.isActive,\n        seenAt: dateTimeFormatTimeAgo(session.seenAt),\n        createdAt: session.createdAt,\n        clientIp: session.clientIp,\n        browser: session.browser,\n        browserVersion: session.browserVersion,\n        os: session.os,\n        osVersion: session.osVersion,\n        device: session.device,\n      };\n    });\n\n    dispatch(userSessionsLoadedAction(sessions));\n  };\n}\n\nexport function revokeSession(tokenId: number, userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const payload = { authTokenId: tokenId };\n    await getBackendSrv().post(`/api/admin/users/${userId}/revoke-auth-token`, payload);\n    dispatch(loadUserSessions(userId));\n  };\n}\n\nexport function revokeAllSessions(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/admin/users/${userId}/logout`);\n    dispatch(loadUserSessions(userId));\n  };\n}\n\n// LDAP user actions\n\nexport function loadLdapSyncStatus(): ThunkResult<void> {\n  return async (dispatch) => {\n    // Available only in enterprise\n    const canReadLDAPStatus = contextSrv.hasPermission(AccessControlAction.LDAPStatusRead);\n    if (featureEnabled('ldapsync') && canReadLDAPStatus) {\n      const syncStatus = await getBackendSrv().get(`/api/admin/ldap-sync-status`);\n      dispatch(ldapSyncStatusLoadedAction(syncStatus));\n    }\n  };\n}\n\nexport function syncLdapUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/admin/ldap/sync/${userId}`);\n    dispatch(loadAdminUserPage(userId));\n  };\n}\n\n// LDAP debug page\n\nexport function loadLdapState(): ThunkResult<void> {\n  return async (dispatch) => {\n    if (!contextSrv.hasPermission(AccessControlAction.LDAPStatusRead)) {\n      return;\n    }\n\n    try {\n      const connectionInfo = await getBackendSrv().get(`/api/admin/ldap/status`);\n      dispatch(ldapConnectionInfoLoadedAction(connectionInfo));\n    } catch (error) {\n      if (isFetchError(error)) {\n        error.isHandled = true;\n        const ldapError = {\n          title: error.data.message,\n          body: error.data.error,\n        };\n        dispatch(ldapFailedAction(ldapError));\n      }\n    }\n  };\n}\n\nexport function loadUserMapping(username: string): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      const response = await getBackendSrv().get(`/api/admin/ldap/${encodeURIComponent(username)}`);\n      const { name, surname, email, login, isGrafanaAdmin, isDisabled, roles, teams } = response;\n      const userInfo: LdapUser = {\n        info: { name, surname, email, login },\n        permissions: { isGrafanaAdmin, isDisabled },\n        roles,\n        teams,\n      };\n      dispatch(userMappingInfoLoadedAction(userInfo));\n    } catch (error) {\n      if (isFetchError(error)) {\n        error.isHandled = true;\n        const userError = {\n          title: error.data.message,\n          body: error.data.error,\n        };\n        dispatch(clearUserMappingInfoAction());\n        dispatch(userMappingInfoFailedAction(userError));\n      }\n    }\n  };\n}\n\nexport function clearUserError(): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(clearUserErrorAction());\n  };\n}\n\nexport function clearUserMappingInfo(): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(clearUserErrorAction());\n    dispatch(clearUserMappingInfoAction());\n  };\n}\n\n// UserListAdminPage\n\nconst getFilters = (filters: UserFilter[]) => {\n  return filters\n    .map((filter) => {\n      if (Array.isArray(filter.value)) {\n        return filter.value.map((v) => `${filter.name}=${v.value}`).join('&');\n      }\n      return `${filter.name}=${filter.value}`;\n    })\n    .join('&');\n};\n\nexport function fetchUsers(): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      const { perPage, page, query, filters } = getState().userListAdmin;\n      const result = await getBackendSrv().get(\n        `/api/users/search?perpage=${perPage}&page=${page}&query=${query}&${getFilters(filters)}`\n      );\n      dispatch(usersFetched(result));\n    } catch (error) {\n      usersFetchEnd();\n      console.error(error);\n    }\n  };\n}\n\nconst fetchUsersWithDebounce = debounce((dispatch) => dispatch(fetchUsers()), 500);\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(usersFetchBegin());\n    dispatch(queryChanged(query));\n    fetchUsersWithDebounce(dispatch);\n  };\n}\n\nexport function changeFilter(filter: UserFilter): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(usersFetchBegin());\n    dispatch(filterChanged(filter));\n    fetchUsersWithDebounce(dispatch);\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(usersFetchBegin());\n    dispatch(pageChanged(page));\n    dispatch(fetchUsers());\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}