{"ast":null,"code":"import { createBreakpoints } from './breakpoints';\nimport { createColors } from './createColors';\nimport { createComponents } from './createComponents';\nimport { createShadows } from './createShadows';\nimport { createShape } from './createShape';\nimport { createSpacing } from './createSpacing';\nimport { createTransitions } from './createTransitions';\nimport { createTypography } from './createTypography';\nimport { createV1Theme } from './createV1Theme';\nimport { createVisualizationColors } from './createVisualizationColors';\nimport { zIndex } from './zIndex';\n/** @internal */\n\n/** @internal */\nexport function createTheme(options = {}) {\n  const {\n    colors: colorsInput = {},\n    spacing: spacingInput = {},\n    shape: shapeInput = {},\n    typography: typographyInput = {}\n  } = options;\n  const colors = createColors(colorsInput);\n  const breakpoints = createBreakpoints();\n  const spacing = createSpacing(spacingInput);\n  const shape = createShape(shapeInput);\n  const typography = createTypography(colors, typographyInput);\n  const shadows = createShadows(colors);\n  const transitions = createTransitions();\n  const components = createComponents(colors, shadows);\n  const visualization = createVisualizationColors(colors);\n  const theme = {\n    name: colors.mode === 'dark' ? 'Dark' : 'Light',\n    isDark: colors.mode === 'dark',\n    isLight: colors.mode === 'light',\n    colors,\n    breakpoints,\n    spacing,\n    shape,\n    components,\n    typography,\n    shadows,\n    transitions,\n    visualization,\n    zIndex: Object.assign({}, zIndex)\n  };\n  return Object.assign({}, theme, {\n    v1: createV1Theme(theme)\n  });\n}","map":{"version":3,"names":["createBreakpoints","createColors","createComponents","createShadows","createShape","createSpacing","createTransitions","createTypography","createV1Theme","createVisualizationColors","zIndex","createTheme","options","colors","colorsInput","spacing","spacingInput","shape","shapeInput","typography","typographyInput","breakpoints","shadows","transitions","components","visualization","theme","name","mode","isDark","isLight","v1"],"sources":["/home/soula/grafana/packages/grafana-data/src/themes/createTheme.ts"],"sourcesContent":["import { createBreakpoints } from './breakpoints';\nimport { createColors, ThemeColorsInput } from './createColors';\nimport { createComponents } from './createComponents';\nimport { createShadows } from './createShadows';\nimport { createShape, ThemeShapeInput } from './createShape';\nimport { createSpacing, ThemeSpacingOptions } from './createSpacing';\nimport { createTransitions } from './createTransitions';\nimport { createTypography, ThemeTypographyInput } from './createTypography';\nimport { createV1Theme } from './createV1Theme';\nimport { createVisualizationColors } from './createVisualizationColors';\nimport { GrafanaTheme2 } from './types';\nimport { zIndex } from './zIndex';\n\n/** @internal */\nexport interface NewThemeOptions {\n  name?: string;\n  colors?: ThemeColorsInput;\n  spacing?: ThemeSpacingOptions;\n  shape?: ThemeShapeInput;\n  typography?: ThemeTypographyInput;\n}\n\n/** @internal */\nexport function createTheme(options: NewThemeOptions = {}): GrafanaTheme2 {\n  const {\n    colors: colorsInput = {},\n    spacing: spacingInput = {},\n    shape: shapeInput = {},\n    typography: typographyInput = {},\n  } = options;\n\n  const colors = createColors(colorsInput);\n  const breakpoints = createBreakpoints();\n  const spacing = createSpacing(spacingInput);\n  const shape = createShape(shapeInput);\n  const typography = createTypography(colors, typographyInput);\n  const shadows = createShadows(colors);\n  const transitions = createTransitions();\n  const components = createComponents(colors, shadows);\n  const visualization = createVisualizationColors(colors);\n\n  const theme = {\n    name: colors.mode === 'dark' ? 'Dark' : 'Light',\n    isDark: colors.mode === 'dark',\n    isLight: colors.mode === 'light',\n    colors,\n    breakpoints,\n    spacing,\n    shape,\n    components,\n    typography,\n    shadows,\n    transitions,\n    visualization,\n    zIndex: {\n      ...zIndex,\n    },\n  };\n\n  return {\n    ...theme,\n    v1: createV1Theme(theme),\n  };\n}\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,eAAlC;AACA,SAASC,YAAT,QAA+C,gBAA/C;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,WAAT,QAA6C,eAA7C;AACA,SAASC,aAAT,QAAmD,iBAAnD;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,gBAAT,QAAuD,oBAAvD;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,yBAAT,QAA0C,6BAA1C;AAEA,SAASC,MAAT,QAAuB,UAAvB;AAEA;;AASA;AACA,OAAO,SAASC,WAAT,CAAqBC,OAAwB,GAAG,EAAhD,EAAmE;EACxE,MAAM;IACJC,MAAM,EAAEC,WAAW,GAAG,EADlB;IAEJC,OAAO,EAAEC,YAAY,GAAG,EAFpB;IAGJC,KAAK,EAAEC,UAAU,GAAG,EAHhB;IAIJC,UAAU,EAAEC,eAAe,GAAG;EAJ1B,IAKFR,OALJ;EAOA,MAAMC,MAAM,GAAGZ,YAAY,CAACa,WAAD,CAA3B;EACA,MAAMO,WAAW,GAAGrB,iBAAiB,EAArC;EACA,MAAMe,OAAO,GAAGV,aAAa,CAACW,YAAD,CAA7B;EACA,MAAMC,KAAK,GAAGb,WAAW,CAACc,UAAD,CAAzB;EACA,MAAMC,UAAU,GAAGZ,gBAAgB,CAACM,MAAD,EAASO,eAAT,CAAnC;EACA,MAAME,OAAO,GAAGnB,aAAa,CAACU,MAAD,CAA7B;EACA,MAAMU,WAAW,GAAGjB,iBAAiB,EAArC;EACA,MAAMkB,UAAU,GAAGtB,gBAAgB,CAACW,MAAD,EAASS,OAAT,CAAnC;EACA,MAAMG,aAAa,GAAGhB,yBAAyB,CAACI,MAAD,CAA/C;EAEA,MAAMa,KAAK,GAAG;IACZC,IAAI,EAAEd,MAAM,CAACe,IAAP,KAAgB,MAAhB,GAAyB,MAAzB,GAAkC,OAD5B;IAEZC,MAAM,EAAEhB,MAAM,CAACe,IAAP,KAAgB,MAFZ;IAGZE,OAAO,EAAEjB,MAAM,CAACe,IAAP,KAAgB,OAHb;IAIZf,MAJY;IAKZQ,WALY;IAMZN,OANY;IAOZE,KAPY;IAQZO,UARY;IASZL,UATY;IAUZG,OAVY;IAWZC,WAXY;IAYZE,aAZY;IAaZf,MAAM,oBACDA,MADC;EAbM,CAAd;EAkBA,yBACKgB,KADL;IAEEK,EAAE,EAAEvB,aAAa,CAACkB,KAAD;EAFnB;AAID"},"metadata":{},"sourceType":"module"}