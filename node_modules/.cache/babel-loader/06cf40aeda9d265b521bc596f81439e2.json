{"ast":null,"code":"import { NavSection } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { ShowModalReactEvent } from '../../../types/events';\nimport appEvents from '../../app_events';\nimport { getFooterLinks } from '../Footer/Footer';\nimport { HelpModal } from '../help/HelpModal';\nexport const SEARCH_ITEM_ID = 'search';\nexport const NAV_MENU_PORTAL_CONTAINER_ID = 'navbar-menu-portal-container';\nexport const getNavMenuPortalContainer = () => {\n  var _document$getElementB;\n\n  return (_document$getElementB = document.getElementById(NAV_MENU_PORTAL_CONTAINER_ID)) !== null && _document$getElementB !== void 0 ? _document$getElementB : document.body;\n};\nexport const getForcedLoginUrl = url => {\n  const queryParams = new URLSearchParams(url.split('?')[1]);\n  queryParams.append('forceLogin', 'true');\n  return `${getConfig().appSubUrl}${url.split('?')[0]}?${queryParams.toString()}`;\n};\nexport const enrichConfigItems = (items, location, toggleOrgSwitcher) => {\n  const {\n    isSignedIn,\n    user\n  } = contextSrv;\n\n  const onOpenShortcuts = () => {\n    appEvents.publish(new ShowModalReactEvent({\n      component: HelpModal\n    }));\n  };\n\n  if (user && user.orgCount > 1) {\n    const profileNode = items.find(bottomNavItem => bottomNavItem.id === 'profile');\n\n    if (profileNode) {\n      profileNode.showOrgSwitcher = true;\n      profileNode.subTitle = `Current Org.: ${user === null || user === void 0 ? void 0 : user.orgName}`;\n    }\n  }\n\n  if (!isSignedIn) {\n    const forcedLoginUrl = getForcedLoginUrl(location.pathname + location.search);\n    items.unshift({\n      icon: 'signout',\n      id: 'signin',\n      section: NavSection.Config,\n      target: '_self',\n      text: 'Sign in',\n      url: forcedLoginUrl\n    });\n  }\n\n  items.forEach((link, index) => {\n    let menuItems = link.children || [];\n\n    if (link.id === 'help') {\n      link.children = [...getFooterLinks(), {\n        id: 'keyboard-shortcuts',\n        text: 'Keyboard shortcuts',\n        icon: 'keyboard',\n        onClick: onOpenShortcuts\n      }];\n    }\n\n    if (link.showOrgSwitcher) {\n      link.children = [...menuItems, {\n        id: 'switch-organization',\n        text: 'Switch organization',\n        icon: 'arrow-random',\n        onClick: toggleOrgSwitcher\n      }];\n    }\n  });\n  return items;\n};\nexport const enrichWithInteractionTracking = (item, expandedState) => {\n  const onClick = item.onClick;\n\n  item.onClick = () => {\n    var _item$url;\n\n    reportInteraction('grafana_navigation_item_clicked', {\n      path: (_item$url = item.url) !== null && _item$url !== void 0 ? _item$url : item.id,\n      state: expandedState ? 'expanded' : 'collapsed'\n    });\n    onClick === null || onClick === void 0 ? void 0 : onClick();\n  };\n\n  if (item.children) {\n    item.children = item.children.map(item => enrichWithInteractionTracking(item, expandedState));\n  }\n\n  return item;\n};\nexport const isMatchOrChildMatch = (itemToCheck, searchItem) => {\n  var _itemToCheck$children;\n\n  return Boolean(itemToCheck === searchItem || ((_itemToCheck$children = itemToCheck.children) === null || _itemToCheck$children === void 0 ? void 0 : _itemToCheck$children.some(child => child === searchItem)));\n};\n\nconst stripQueryParams = url => {\n  var _url$split$;\n\n  return (_url$split$ = url === null || url === void 0 ? void 0 : url.split('?')[0]) !== null && _url$split$ !== void 0 ? _url$split$ : '';\n};\n\nconst isBetterMatch = (newMatch, currentMatch) => {\n  const currentMatchUrl = stripQueryParams(currentMatch === null || currentMatch === void 0 ? void 0 : currentMatch.url);\n  const newMatchUrl = stripQueryParams(newMatch.url);\n  return newMatchUrl && newMatchUrl.length > (currentMatchUrl === null || currentMatchUrl === void 0 ? void 0 : currentMatchUrl.length);\n};\n\nexport const getActiveItem = (navTree, pathname, currentBestMatch) => {\n  const dashboardLinkMatch = '/dashboards';\n\n  for (const link of navTree) {\n    var _currentBestMatch;\n\n    const linkPathname = stripQueryParams(link.url);\n\n    if (linkPathname) {\n      if (linkPathname === pathname) {\n        // exact match\n        currentBestMatch = link;\n        break;\n      } else if (linkPathname !== '/' && pathname.startsWith(linkPathname)) {\n        // partial match\n        if (isBetterMatch(link, currentBestMatch)) {\n          currentBestMatch = link;\n        }\n      } else if (linkPathname === '/alerting/list' && pathname.startsWith('/alerting/notification/')) {\n        // alert channel match\n        // TODO refactor routes such that we don't need this custom logic\n        currentBestMatch = link;\n        break;\n      } else if (linkPathname === dashboardLinkMatch && pathname.startsWith('/d/')) {\n        // dashboard match\n        // TODO refactor routes such that we don't need this custom logic\n        if (isBetterMatch(link, currentBestMatch)) {\n          currentBestMatch = link;\n        }\n      }\n    }\n\n    if (link.children) {\n      currentBestMatch = getActiveItem(link.children, pathname, currentBestMatch);\n    }\n\n    if (stripQueryParams((_currentBestMatch = currentBestMatch) === null || _currentBestMatch === void 0 ? void 0 : _currentBestMatch.url) === pathname) {\n      return currentBestMatch;\n    }\n  }\n\n  return currentBestMatch;\n};\nexport const isSearchActive = location => {\n  const query = new URLSearchParams(location.search);\n  return query.get('search') === 'open';\n};\nexport function getNavModelItemKey(item) {\n  var _item$id;\n\n  return (_item$id = item.id) !== null && _item$id !== void 0 ? _item$id : item.text;\n}","map":{"version":3,"names":["NavSection","reportInteraction","getConfig","contextSrv","ShowModalReactEvent","appEvents","getFooterLinks","HelpModal","SEARCH_ITEM_ID","NAV_MENU_PORTAL_CONTAINER_ID","getNavMenuPortalContainer","document","getElementById","body","getForcedLoginUrl","url","queryParams","URLSearchParams","split","append","appSubUrl","toString","enrichConfigItems","items","location","toggleOrgSwitcher","isSignedIn","user","onOpenShortcuts","publish","component","orgCount","profileNode","find","bottomNavItem","id","showOrgSwitcher","subTitle","orgName","forcedLoginUrl","pathname","search","unshift","icon","section","Config","target","text","forEach","link","index","menuItems","children","onClick","enrichWithInteractionTracking","item","expandedState","path","state","map","isMatchOrChildMatch","itemToCheck","searchItem","Boolean","some","child","stripQueryParams","isBetterMatch","newMatch","currentMatch","currentMatchUrl","newMatchUrl","length","getActiveItem","navTree","currentBestMatch","dashboardLinkMatch","linkPathname","startsWith","isSearchActive","query","get","getNavModelItemKey"],"sources":["/home/soula/grafana/public/app/core/components/NavBar/utils.ts"],"sourcesContent":["import { Location } from 'history';\n\nimport { NavModelItem, NavSection } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { ShowModalReactEvent } from '../../../types/events';\nimport appEvents from '../../app_events';\nimport { getFooterLinks } from '../Footer/Footer';\nimport { HelpModal } from '../help/HelpModal';\n\nexport const SEARCH_ITEM_ID = 'search';\nexport const NAV_MENU_PORTAL_CONTAINER_ID = 'navbar-menu-portal-container';\n\nexport const getNavMenuPortalContainer = () => document.getElementById(NAV_MENU_PORTAL_CONTAINER_ID) ?? document.body;\n\nexport const getForcedLoginUrl = (url: string) => {\n  const queryParams = new URLSearchParams(url.split('?')[1]);\n  queryParams.append('forceLogin', 'true');\n\n  return `${getConfig().appSubUrl}${url.split('?')[0]}?${queryParams.toString()}`;\n};\n\nexport const enrichConfigItems = (\n  items: NavModelItem[],\n  location: Location<unknown>,\n  toggleOrgSwitcher: () => void\n) => {\n  const { isSignedIn, user } = contextSrv;\n  const onOpenShortcuts = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: HelpModal }));\n  };\n\n  if (user && user.orgCount > 1) {\n    const profileNode = items.find((bottomNavItem) => bottomNavItem.id === 'profile');\n    if (profileNode) {\n      profileNode.showOrgSwitcher = true;\n      profileNode.subTitle = `Current Org.: ${user?.orgName}`;\n    }\n  }\n\n  if (!isSignedIn) {\n    const forcedLoginUrl = getForcedLoginUrl(location.pathname + location.search);\n\n    items.unshift({\n      icon: 'signout',\n      id: 'signin',\n      section: NavSection.Config,\n      target: '_self',\n      text: 'Sign in',\n      url: forcedLoginUrl,\n    });\n  }\n\n  items.forEach((link, index) => {\n    let menuItems = link.children || [];\n\n    if (link.id === 'help') {\n      link.children = [\n        ...getFooterLinks(),\n        {\n          id: 'keyboard-shortcuts',\n          text: 'Keyboard shortcuts',\n          icon: 'keyboard',\n          onClick: onOpenShortcuts,\n        },\n      ];\n    }\n\n    if (link.showOrgSwitcher) {\n      link.children = [\n        ...menuItems,\n        {\n          id: 'switch-organization',\n          text: 'Switch organization',\n          icon: 'arrow-random',\n          onClick: toggleOrgSwitcher,\n        },\n      ];\n    }\n  });\n  return items;\n};\n\nexport const enrichWithInteractionTracking = (item: NavModelItem, expandedState: boolean) => {\n  const onClick = item.onClick;\n  item.onClick = () => {\n    reportInteraction('grafana_navigation_item_clicked', {\n      path: item.url ?? item.id,\n      state: expandedState ? 'expanded' : 'collapsed',\n    });\n    onClick?.();\n  };\n  if (item.children) {\n    item.children = item.children.map((item) => enrichWithInteractionTracking(item, expandedState));\n  }\n  return item;\n};\n\nexport const isMatchOrChildMatch = (itemToCheck: NavModelItem, searchItem?: NavModelItem) => {\n  return Boolean(itemToCheck === searchItem || itemToCheck.children?.some((child) => child === searchItem));\n};\n\nconst stripQueryParams = (url?: string) => {\n  return url?.split('?')[0] ?? '';\n};\n\nconst isBetterMatch = (newMatch: NavModelItem, currentMatch?: NavModelItem) => {\n  const currentMatchUrl = stripQueryParams(currentMatch?.url);\n  const newMatchUrl = stripQueryParams(newMatch.url);\n  return newMatchUrl && newMatchUrl.length > currentMatchUrl?.length;\n};\n\nexport const getActiveItem = (\n  navTree: NavModelItem[],\n  pathname: string,\n  currentBestMatch?: NavModelItem\n): NavModelItem | undefined => {\n  const dashboardLinkMatch = '/dashboards';\n\n  for (const link of navTree) {\n    const linkPathname = stripQueryParams(link.url);\n    if (linkPathname) {\n      if (linkPathname === pathname) {\n        // exact match\n        currentBestMatch = link;\n        break;\n      } else if (linkPathname !== '/' && pathname.startsWith(linkPathname)) {\n        // partial match\n        if (isBetterMatch(link, currentBestMatch)) {\n          currentBestMatch = link;\n        }\n      } else if (linkPathname === '/alerting/list' && pathname.startsWith('/alerting/notification/')) {\n        // alert channel match\n        // TODO refactor routes such that we don't need this custom logic\n        currentBestMatch = link;\n        break;\n      } else if (linkPathname === dashboardLinkMatch && pathname.startsWith('/d/')) {\n        // dashboard match\n        // TODO refactor routes such that we don't need this custom logic\n        if (isBetterMatch(link, currentBestMatch)) {\n          currentBestMatch = link;\n        }\n      }\n    }\n    if (link.children) {\n      currentBestMatch = getActiveItem(link.children, pathname, currentBestMatch);\n    }\n    if (stripQueryParams(currentBestMatch?.url) === pathname) {\n      return currentBestMatch;\n    }\n  }\n  return currentBestMatch;\n};\n\nexport const isSearchActive = (location: Location<unknown>) => {\n  const query = new URLSearchParams(location.search);\n  return query.get('search') === 'open';\n};\n\nexport function getNavModelItemKey(item: NavModelItem) {\n  return item.id ?? item.text;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}