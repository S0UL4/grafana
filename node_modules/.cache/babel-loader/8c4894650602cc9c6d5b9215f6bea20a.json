{"ast":null,"code":"import memoizeOne from 'memoize-one';\nimport { getState } from '../../../store/store';\nimport { toStateKey } from '../utils';\nimport { getInitialTemplatingState } from './reducers';\nexport const getVariable = (identifier, state = getState(), throwWhenMissing = true) => {\n  const {\n    id,\n    rootStateKey\n  } = identifier;\n  const variablesState = getVariablesState(rootStateKey, state);\n\n  if (!variablesState.variables[id]) {\n    if (throwWhenMissing) {\n      throw new Error(`Couldn't find variable with id:${id}`);\n    }\n\n    return undefined;\n  }\n\n  return variablesState.variables[id];\n};\n\nfunction getFilteredVariablesByKey(filter, key, state = getState()) {\n  return Object.values(getVariablesState(key, state).variables).filter(filter).sort((s1, s2) => s1.index - s2.index);\n}\n\nexport function getVariablesState(key, state = getState()) {\n  var _state$templating$key;\n\n  return (_state$templating$key = state.templating.keys[toStateKey(key)]) !== null && _state$templating$key !== void 0 ? _state$templating$key : getInitialTemplatingState();\n}\nexport function getVariablesByKey(key, state = getState()) {\n  return getFilteredVariablesByKey(defaultVariablesFilter, key, state);\n}\n\nfunction defaultVariablesFilter(variable) {\n  return variable.type !== 'system';\n}\n\nexport const getSubMenuVariables = memoizeOne((key, variables) => {\n  return getVariablesByKey(key, getState());\n});\nexport const getEditorVariables = (key, state) => {\n  return getVariablesByKey(key, state);\n};\nexport function getNewVariableIndex(key, state = getState()) {\n  return getNextVariableIndex(Object.values(getVariablesState(key, state).variables));\n}\nexport function getNextVariableIndex(variables) {\n  const sorted = variables.filter(defaultVariablesFilter).sort((v1, v2) => v1.index - v2.index);\n  return sorted.length > 0 ? sorted[sorted.length - 1].index + 1 : 0;\n}\nexport function getVariablesIsDirty(key, state = getState()) {\n  return getVariablesState(key, state).transaction.isDirty;\n}\nexport function getIfExistsLastKey(state = getState()) {\n  var _state$templating;\n\n  return (_state$templating = state.templating) === null || _state$templating === void 0 ? void 0 : _state$templating.lastKey;\n}\nexport function getLastKey(state = getState()) {\n  var _state$templating2;\n\n  if (!((_state$templating2 = state.templating) !== null && _state$templating2 !== void 0 && _state$templating2.lastKey)) {\n    throw new Error('Accessing lastKey without initializing it variables');\n  }\n\n  return state.templating.lastKey;\n} // selectors used by template srv, assumes that lastKey is in state. Needs to change when/if dashboard redux state becomes keyed too.\n\nexport function getFilteredVariables(filter, state = getState()) {\n  const lastKey = getIfExistsLastKey(state);\n\n  if (!lastKey) {\n    return [];\n  }\n\n  return getFilteredVariablesByKey(filter, lastKey, state);\n}\nexport function getVariables(state = getState()) {\n  const lastKey = getIfExistsLastKey(state);\n\n  if (!lastKey) {\n    return [];\n  }\n\n  return getVariablesByKey(lastKey, state);\n}\nexport function getVariableWithName(name, state = getState()) {\n  const lastKey = getIfExistsLastKey(state);\n\n  if (!lastKey) {\n    return;\n  }\n\n  return getVariable({\n    id: name,\n    rootStateKey: lastKey,\n    type: 'query'\n  }, state, false);\n}\nexport function getInstanceState(state, id) {\n  return state[id];\n}","map":{"version":3,"names":["memoizeOne","getState","toStateKey","getInitialTemplatingState","getVariable","identifier","state","throwWhenMissing","id","rootStateKey","variablesState","getVariablesState","variables","Error","undefined","getFilteredVariablesByKey","filter","key","Object","values","sort","s1","s2","index","templating","keys","getVariablesByKey","defaultVariablesFilter","variable","type","getSubMenuVariables","getEditorVariables","getNewVariableIndex","getNextVariableIndex","sorted","v1","v2","length","getVariablesIsDirty","transaction","isDirty","getIfExistsLastKey","lastKey","getLastKey","getFilteredVariables","getVariables","getVariableWithName","name","getInstanceState"],"sources":["/home/soula/grafana/public/app/features/variables/state/selectors.ts"],"sourcesContent":["import memoizeOne from 'memoize-one';\n\nimport { getState } from '../../../store/store';\nimport { StoreState } from '../../../types';\nimport { VariableModel } from '../types';\nimport { toStateKey } from '../utils';\n\nimport { getInitialTemplatingState, TemplatingState } from './reducers';\nimport { KeyedVariableIdentifier, VariablesState } from './types';\n\nexport const getVariable = <T extends VariableModel = VariableModel>(\n  identifier: KeyedVariableIdentifier,\n  state: StoreState = getState(),\n  throwWhenMissing = true\n): T => {\n  const { id, rootStateKey } = identifier;\n  const variablesState = getVariablesState(rootStateKey, state);\n  if (!variablesState.variables[id]) {\n    if (throwWhenMissing) {\n      throw new Error(`Couldn't find variable with id:${id}`);\n    }\n    return undefined as unknown as T;\n  }\n\n  return variablesState.variables[id] as T;\n};\n\nfunction getFilteredVariablesByKey(\n  filter: (model: VariableModel) => boolean,\n  key: string,\n  state: StoreState = getState()\n) {\n  return Object.values(getVariablesState(key, state).variables)\n    .filter(filter)\n    .sort((s1, s2) => s1.index - s2.index);\n}\n\nexport function getVariablesState(key: string, state: StoreState = getState()): TemplatingState {\n  return state.templating.keys[toStateKey(key)] ?? getInitialTemplatingState();\n}\n\nexport function getVariablesByKey(key: string, state: StoreState = getState()): VariableModel[] {\n  return getFilteredVariablesByKey(defaultVariablesFilter, key, state);\n}\n\nfunction defaultVariablesFilter(variable: VariableModel): boolean {\n  return variable.type !== 'system';\n}\n\nexport const getSubMenuVariables = memoizeOne(\n  (key: string, variables: Record<string, VariableModel>): VariableModel[] => {\n    return getVariablesByKey(key, getState());\n  }\n);\n\nexport const getEditorVariables = (key: string, state: StoreState): VariableModel[] => {\n  return getVariablesByKey(key, state);\n};\n\nexport type GetVariables = typeof getVariablesByKey;\n\nexport function getNewVariableIndex(key: string, state: StoreState = getState()): number {\n  return getNextVariableIndex(Object.values(getVariablesState(key, state).variables));\n}\n\nexport function getNextVariableIndex(variables: VariableModel[]): number {\n  const sorted = variables.filter(defaultVariablesFilter).sort((v1, v2) => v1.index - v2.index);\n  return sorted.length > 0 ? sorted[sorted.length - 1].index + 1 : 0;\n}\n\nexport function getVariablesIsDirty(key: string, state: StoreState = getState()): boolean {\n  return getVariablesState(key, state).transaction.isDirty;\n}\n\nexport function getIfExistsLastKey(state: StoreState = getState()): string | undefined {\n  return state.templating?.lastKey;\n}\n\nexport function getLastKey(state: StoreState = getState()): string {\n  if (!state.templating?.lastKey) {\n    throw new Error('Accessing lastKey without initializing it variables');\n  }\n\n  return state.templating.lastKey;\n}\n\n// selectors used by template srv, assumes that lastKey is in state. Needs to change when/if dashboard redux state becomes keyed too.\nexport function getFilteredVariables(filter: (model: VariableModel) => boolean, state: StoreState = getState()) {\n  const lastKey = getIfExistsLastKey(state);\n  if (!lastKey) {\n    return [];\n  }\n  return getFilteredVariablesByKey(filter, lastKey, state);\n}\n\nexport function getVariables(state: StoreState = getState()) {\n  const lastKey = getIfExistsLastKey(state);\n  if (!lastKey) {\n    return [];\n  }\n  return getVariablesByKey(lastKey, state);\n}\n\nexport function getVariableWithName(name: string, state: StoreState = getState()) {\n  const lastKey = getIfExistsLastKey(state);\n  if (!lastKey) {\n    return;\n  }\n  return getVariable({ id: name, rootStateKey: lastKey, type: 'query' }, state, false);\n}\n\nexport function getInstanceState<Model extends VariableModel = VariableModel>(state: VariablesState, id: string) {\n  return state[id] as Model;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}