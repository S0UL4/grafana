{"ast":null,"code":"import { isDataFrame } from '@grafana/data';\n\n/**\n * @alpha -- experimental\n */\nexport let StreamingResponseDataType;\n/**\n * @alpha -- experimental\n */\n\n(function (StreamingResponseDataType) {\n  StreamingResponseDataType[\"NewValuesSameSchema\"] = \"NewValuesSameSchema\";\n  StreamingResponseDataType[\"FullFrame\"] = \"FullFrame\";\n})(StreamingResponseDataType || (StreamingResponseDataType = {}));\n\n/**\n * @alpha -- experimental\n */\nexport const isStreamingResponseData = (responseData, type) => 'type' in responseData && responseData.type === type;\nconst AllStreamingResponseDataTypes = Object.values(StreamingResponseDataType);\n/**\n * @alpha -- experimental\n */\n\nexport const isAnyStreamingResponseData = responseData => 'type' in responseData && AllStreamingResponseDataTypes.includes(responseData.type);\n/**\n * @alpha -- experimental\n */\n\nexport const isStreamingDataFrame = data => isDataFrame(data) && 'packetInfo' in data;","map":{"version":3,"names":["isDataFrame","StreamingResponseDataType","isStreamingResponseData","responseData","type","AllStreamingResponseDataTypes","Object","values","isAnyStreamingResponseData","includes","isStreamingDataFrame","data"],"sources":["/home/soula/grafana/public/app/features/live/data/utils.ts"],"sourcesContent":["import { DataQueryResponseData, isDataFrame } from '@grafana/data';\nimport { StreamingDataFrame } from './StreamingDataFrame';\n\n/**\n * @alpha -- experimental\n */\nexport enum StreamingResponseDataType {\n  NewValuesSameSchema = 'NewValuesSameSchema',\n  FullFrame = 'FullFrame',\n}\n\n/**\n * @alpha -- experimental\n */\nexport type StreamingResponseDataTypeToData = {\n  [StreamingResponseDataType.NewValuesSameSchema]: {\n    values: unknown[][];\n  };\n  [StreamingResponseDataType.FullFrame]: {\n    frame: ReturnType<StreamingDataFrame['serialize']>;\n  };\n};\n\n/**\n * @alpha -- experimental\n */\nexport type StreamingResponseData<T = StreamingResponseDataType> = T extends StreamingResponseDataType\n  ? {\n      type: T;\n    } & StreamingResponseDataTypeToData[T]\n  : never;\n\n/**\n * @alpha -- experimental\n */\nexport const isStreamingResponseData = <T extends StreamingResponseDataType>(\n  responseData: DataQueryResponseData,\n  type: T\n): responseData is StreamingResponseData<T> => 'type' in responseData && responseData.type === type;\n\nconst AllStreamingResponseDataTypes = Object.values(StreamingResponseDataType);\n\n/**\n * @alpha -- experimental\n */\nexport const isAnyStreamingResponseData = (\n  responseData: DataQueryResponseData\n): responseData is StreamingResponseData =>\n  'type' in responseData && AllStreamingResponseDataTypes.includes(responseData.type);\n\n/**\n * @alpha -- experimental\n */\nexport const isStreamingDataFrame = (data: DataQueryResponseData): data is StreamingDataFrame =>\n  isDataFrame(data) && 'packetInfo' in data;\n"],"mappings":"AAAA,SAAgCA,WAAhC,QAAmD,eAAnD;;AAGA;AACA;AACA;AACA,WAAYC,yBAAZ;AAKA;AACA;AACA;;WAPYA,yB;EAAAA,yB;EAAAA,yB;GAAAA,yB,KAAAA,yB;;AA0BZ;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAG,CACrCC,YADqC,EAErCC,IAFqC,KAGQ,UAAUD,YAAV,IAA0BA,YAAY,CAACC,IAAb,KAAsBA,IAHxF;AAKP,MAAMC,6BAA6B,GAAGC,MAAM,CAACC,MAAP,CAAcN,yBAAd,CAAtC;AAEA;AACA;AACA;;AACA,OAAO,MAAMO,0BAA0B,GACrCL,YADwC,IAGxC,UAAUA,YAAV,IAA0BE,6BAA6B,CAACI,QAA9B,CAAuCN,YAAY,CAACC,IAApD,CAHrB;AAKP;AACA;AACA;;AACA,OAAO,MAAMM,oBAAoB,GAAIC,IAAD,IAClCX,WAAW,CAACW,IAAD,CAAX,IAAqB,gBAAgBA,IADhC"},"metadata":{},"sourceType":"module"}