{"ast":null,"code":"import React from 'react';\nimport { standardTransformersRegistry } from '@grafana/data';\nimport { TransformationOperationRow } from './TransformationOperationRow';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const TransformationOperationRows = ({\n  data,\n  onChange,\n  onRemove,\n  configs\n}) => {\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: configs.map((t, i) => {\n      const uiConfig = standardTransformersRegistry.getIfExists(t.transformation.id);\n\n      if (!uiConfig) {\n        return null;\n      }\n\n      return /*#__PURE__*/_jsx(TransformationOperationRow, {\n        index: i,\n        id: `${t.id}`,\n        data: data,\n        configs: configs,\n        uiConfig: uiConfig,\n        onRemove: onRemove,\n        onChange: onChange\n      }, `${t.id}`);\n    })\n  });\n};","map":{"version":3,"names":["React","standardTransformersRegistry","TransformationOperationRow","TransformationOperationRows","data","onChange","onRemove","configs","map","t","i","uiConfig","getIfExists","transformation","id"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/TransformationsEditor/TransformationOperationRows.tsx"],"sourcesContent":["import React from 'react';\n\nimport { DataFrame, DataTransformerConfig, standardTransformersRegistry } from '@grafana/data';\n\nimport { TransformationOperationRow } from './TransformationOperationRow';\nimport { TransformationsEditorTransformation } from './types';\n\ninterface TransformationOperationRowsProps {\n  data: DataFrame[];\n  configs: TransformationsEditorTransformation[];\n  onRemove: (index: number) => void;\n  onChange: (index: number, config: DataTransformerConfig) => void;\n}\n\nexport const TransformationOperationRows: React.FC<TransformationOperationRowsProps> = ({\n  data,\n  onChange,\n  onRemove,\n  configs,\n}) => {\n  return (\n    <>\n      {configs.map((t, i) => {\n        const uiConfig = standardTransformersRegistry.getIfExists(t.transformation.id);\n        if (!uiConfig) {\n          return null;\n        }\n\n        return (\n          <TransformationOperationRow\n            index={i}\n            id={`${t.id}`}\n            key={`${t.id}`}\n            data={data}\n            configs={configs}\n            uiConfig={uiConfig}\n            onRemove={onRemove}\n            onChange={onChange}\n          />\n        );\n      })}\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAA2CC,4BAA3C,QAA+E,eAA/E;AAEA,SAASC,0BAAT,QAA2C,8BAA3C;;;AAUA,OAAO,MAAMC,2BAAuE,GAAG,CAAC;EACtFC,IADsF;EAEtFC,QAFsF;EAGtFC,QAHsF;EAItFC;AAJsF,CAAD,KAKjF;EACJ,oBACE;IAAA,UACGA,OAAO,CAACC,GAAR,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;MACrB,MAAMC,QAAQ,GAAGV,4BAA4B,CAACW,WAA7B,CAAyCH,CAAC,CAACI,cAAF,CAAiBC,EAA1D,CAAjB;;MACA,IAAI,CAACH,QAAL,EAAe;QACb,OAAO,IAAP;MACD;;MAED,oBACE,KAAC,0BAAD;QACE,KAAK,EAAED,CADT;QAEE,EAAE,EAAG,GAAED,CAAC,CAACK,EAAG,EAFd;QAIE,IAAI,EAAEV,IAJR;QAKE,OAAO,EAAEG,OALX;QAME,QAAQ,EAAEI,QANZ;QAOE,QAAQ,EAAEL,QAPZ;QAQE,QAAQ,EAAED;MARZ,GAGQ,GAAEI,CAAC,CAACK,EAAG,EAHf,CADF;IAYD,CAlBA;EADH,EADF;AAuBD,CA7BM"},"metadata":{},"sourceType":"module"}