{"ast":null,"code":"import { config } from '@grafana/runtime';\nimport { TextDimensionMode } from 'app/features/dimensions';\nimport { getMarkerMaker } from './markers';\nimport { defaultStyleConfig } from './types';\n/** Indicate if the style wants to show text values */\n\nexport function styleUsesText(config) {\n  var _text$fixed, _text$field;\n\n  const text = config === null || config === void 0 ? void 0 : config.text;\n\n  if (!text) {\n    return false;\n  }\n\n  if (text.mode === TextDimensionMode.Fixed && (_text$fixed = text.fixed) !== null && _text$fixed !== void 0 && _text$fixed.length) {\n    return true;\n  }\n\n  if (text.mode === TextDimensionMode.Field && (_text$field = text.field) !== null && _text$field !== void 0 && _text$field.length) {\n    return true;\n  }\n\n  return false;\n}\n/** Return a distinct list of fields used to dynamically change the style */\n\nexport async function getStyleConfigState(cfg) {\n  var _cfg$symbol, _cfg$color$fixed, _cfg$color, _cfg$opacity, _cfg$lineWidth, _cfg$size$fixed, _cfg$size, _cfg$rotation$fixed, _cfg$rotation, _cfg$color2, _cfg$color2$field, _cfg$size2, _cfg$size2$field, _cfg$rotation2, _cfg$rotation2$field;\n\n  if (!cfg) {\n    cfg = defaultStyleConfig;\n  }\n\n  const hasText = styleUsesText(cfg);\n  const fields = {};\n  const maker = await getMarkerMaker((_cfg$symbol = cfg.symbol) === null || _cfg$symbol === void 0 ? void 0 : _cfg$symbol.fixed, hasText);\n  const state = {\n    config: cfg,\n    // raw values\n    hasText,\n    fields,\n    base: {\n      color: config.theme2.visualization.getColorByName((_cfg$color$fixed = (_cfg$color = cfg.color) === null || _cfg$color === void 0 ? void 0 : _cfg$color.fixed) !== null && _cfg$color$fixed !== void 0 ? _cfg$color$fixed : defaultStyleConfig.color.fixed),\n      opacity: (_cfg$opacity = cfg.opacity) !== null && _cfg$opacity !== void 0 ? _cfg$opacity : defaultStyleConfig.opacity,\n      lineWidth: (_cfg$lineWidth = cfg.lineWidth) !== null && _cfg$lineWidth !== void 0 ? _cfg$lineWidth : 1,\n      size: (_cfg$size$fixed = (_cfg$size = cfg.size) === null || _cfg$size === void 0 ? void 0 : _cfg$size.fixed) !== null && _cfg$size$fixed !== void 0 ? _cfg$size$fixed : defaultStyleConfig.size.fixed,\n      rotation: (_cfg$rotation$fixed = (_cfg$rotation = cfg.rotation) === null || _cfg$rotation === void 0 ? void 0 : _cfg$rotation.fixed) !== null && _cfg$rotation$fixed !== void 0 ? _cfg$rotation$fixed : defaultStyleConfig.rotation.fixed // add ability follow path later\n\n    },\n    maker\n  };\n\n  if ((_cfg$color2 = cfg.color) !== null && _cfg$color2 !== void 0 && (_cfg$color2$field = _cfg$color2.field) !== null && _cfg$color2$field !== void 0 && _cfg$color2$field.length) {\n    fields.color = cfg.color.field;\n  }\n\n  if ((_cfg$size2 = cfg.size) !== null && _cfg$size2 !== void 0 && (_cfg$size2$field = _cfg$size2.field) !== null && _cfg$size2$field !== void 0 && _cfg$size2$field.length) {\n    fields.size = cfg.size.field;\n  }\n\n  if ((_cfg$rotation2 = cfg.rotation) !== null && _cfg$rotation2 !== void 0 && (_cfg$rotation2$field = _cfg$rotation2.field) !== null && _cfg$rotation2$field !== void 0 && _cfg$rotation2$field.length) {\n    fields.rotation = cfg.rotation.field;\n  }\n\n  if (hasText) {\n    var _cfg$text, _cfg$textConfig, _cfg$text2, _cfg$text2$field;\n\n    state.base.text = (_cfg$text = cfg.text) === null || _cfg$text === void 0 ? void 0 : _cfg$text.fixed;\n    state.base.textConfig = (_cfg$textConfig = cfg.textConfig) !== null && _cfg$textConfig !== void 0 ? _cfg$textConfig : defaultStyleConfig.textConfig;\n\n    if ((_cfg$text2 = cfg.text) !== null && _cfg$text2 !== void 0 && (_cfg$text2$field = _cfg$text2.field) !== null && _cfg$text2$field !== void 0 && _cfg$text2$field.length) {\n      fields.text = cfg.text.field;\n    }\n  } // Clear the fields if possible\n\n\n  if (!Object.keys(fields).length) {\n    state.fields = undefined;\n  }\n\n  return state;\n}","map":{"version":3,"names":["config","TextDimensionMode","getMarkerMaker","defaultStyleConfig","styleUsesText","text","mode","Fixed","fixed","length","Field","field","getStyleConfigState","cfg","hasText","fields","maker","symbol","state","base","color","theme2","visualization","getColorByName","opacity","lineWidth","size","rotation","textConfig","Object","keys","undefined"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/style/utils.ts"],"sourcesContent":["import { config } from '@grafana/runtime';\nimport { TextDimensionMode } from 'app/features/dimensions';\n\nimport { getMarkerMaker } from './markers';\nimport { defaultStyleConfig, StyleConfig, StyleConfigFields, StyleConfigState } from './types';\n\n/** Indicate if the style wants to show text values */\nexport function styleUsesText(config: StyleConfig): boolean {\n  const text = config?.text;\n  if (!text) {\n    return false;\n  }\n  if (text.mode === TextDimensionMode.Fixed && text.fixed?.length) {\n    return true;\n  }\n  if (text.mode === TextDimensionMode.Field && text.field?.length) {\n    return true;\n  }\n  return false;\n}\n\n/** Return a distinct list of fields used to dynamically change the style */\nexport async function getStyleConfigState(cfg?: StyleConfig): Promise<StyleConfigState> {\n  if (!cfg) {\n    cfg = defaultStyleConfig;\n  }\n  const hasText = styleUsesText(cfg);\n  const fields: StyleConfigFields = {};\n  const maker = await getMarkerMaker(cfg.symbol?.fixed, hasText);\n  const state: StyleConfigState = {\n    config: cfg, // raw values\n    hasText,\n    fields,\n    base: {\n      color: config.theme2.visualization.getColorByName(cfg.color?.fixed ?? defaultStyleConfig.color.fixed),\n      opacity: cfg.opacity ?? defaultStyleConfig.opacity,\n      lineWidth: cfg.lineWidth ?? 1,\n      size: cfg.size?.fixed ?? defaultStyleConfig.size.fixed,\n      rotation: cfg.rotation?.fixed ?? defaultStyleConfig.rotation.fixed, // add ability follow path later\n    },\n    maker,\n  };\n\n  if (cfg.color?.field?.length) {\n    fields.color = cfg.color.field;\n  }\n  if (cfg.size?.field?.length) {\n    fields.size = cfg.size.field;\n  }\n  if (cfg.rotation?.field?.length) {\n    fields.rotation = cfg.rotation.field;\n  }\n\n  if (hasText) {\n    state.base.text = cfg.text?.fixed;\n    state.base.textConfig = cfg.textConfig ?? defaultStyleConfig.textConfig;\n\n    if (cfg.text?.field?.length) {\n      fields.text = cfg.text.field;\n    }\n  }\n\n  // Clear the fields if possible\n  if (!Object.keys(fields).length) {\n    state.fields = undefined;\n  }\n  return state;\n}\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AAEA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,kBAAT,QAAqF,SAArF;AAEA;;AACA,OAAO,SAASC,aAAT,CAAuBJ,MAAvB,EAAqD;EAAA;;EAC1D,MAAMK,IAAI,GAAGL,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEK,IAArB;;EACA,IAAI,CAACA,IAAL,EAAW;IACT,OAAO,KAAP;EACD;;EACD,IAAIA,IAAI,CAACC,IAAL,KAAcL,iBAAiB,CAACM,KAAhC,mBAAyCF,IAAI,CAACG,KAA9C,wCAAyC,YAAYC,MAAzD,EAAiE;IAC/D,OAAO,IAAP;EACD;;EACD,IAAIJ,IAAI,CAACC,IAAL,KAAcL,iBAAiB,CAACS,KAAhC,mBAAyCL,IAAI,CAACM,KAA9C,wCAAyC,YAAYF,MAAzD,EAAiE;IAC/D,OAAO,IAAP;EACD;;EACD,OAAO,KAAP;AACD;AAED;;AACA,OAAO,eAAeG,mBAAf,CAAmCC,GAAnC,EAAiF;EAAA;;EACtF,IAAI,CAACA,GAAL,EAAU;IACRA,GAAG,GAAGV,kBAAN;EACD;;EACD,MAAMW,OAAO,GAAGV,aAAa,CAACS,GAAD,CAA7B;EACA,MAAME,MAAyB,GAAG,EAAlC;EACA,MAAMC,KAAK,GAAG,MAAMd,cAAc,gBAACW,GAAG,CAACI,MAAL,gDAAC,YAAYT,KAAb,EAAoBM,OAApB,CAAlC;EACA,MAAMI,KAAuB,GAAG;IAC9BlB,MAAM,EAAEa,GADsB;IACjB;IACbC,OAF8B;IAG9BC,MAH8B;IAI9BI,IAAI,EAAE;MACJC,KAAK,EAAEpB,MAAM,CAACqB,MAAP,CAAcC,aAAd,CAA4BC,cAA5B,mCAA2CV,GAAG,CAACO,KAA/C,+CAA2C,WAAWZ,KAAtD,+DAA+DL,kBAAkB,CAACiB,KAAnB,CAAyBZ,KAAxF,CADH;MAEJgB,OAAO,kBAAEX,GAAG,CAACW,OAAN,uDAAiBrB,kBAAkB,CAACqB,OAFvC;MAGJC,SAAS,oBAAEZ,GAAG,CAACY,SAAN,2DAAmB,CAHxB;MAIJC,IAAI,kCAAEb,GAAG,CAACa,IAAN,8CAAE,UAAUlB,KAAZ,6DAAqBL,kBAAkB,CAACuB,IAAnB,CAAwBlB,KAJ7C;MAKJmB,QAAQ,0CAAEd,GAAG,CAACc,QAAN,kDAAE,cAAcnB,KAAhB,qEAAyBL,kBAAkB,CAACwB,QAAnB,CAA4BnB,KALzD,CAKgE;;IALhE,CAJwB;IAW9BQ;EAX8B,CAAhC;;EAcA,mBAAIH,GAAG,CAACO,KAAR,6DAAI,YAAWT,KAAf,8CAAI,kBAAkBF,MAAtB,EAA8B;IAC5BM,MAAM,CAACK,KAAP,GAAeP,GAAG,CAACO,KAAJ,CAAUT,KAAzB;EACD;;EACD,kBAAIE,GAAG,CAACa,IAAR,2DAAI,WAAUf,KAAd,6CAAI,iBAAiBF,MAArB,EAA6B;IAC3BM,MAAM,CAACW,IAAP,GAAcb,GAAG,CAACa,IAAJ,CAASf,KAAvB;EACD;;EACD,sBAAIE,GAAG,CAACc,QAAR,mEAAI,eAAchB,KAAlB,iDAAI,qBAAqBF,MAAzB,EAAiC;IAC/BM,MAAM,CAACY,QAAP,GAAkBd,GAAG,CAACc,QAAJ,CAAahB,KAA/B;EACD;;EAED,IAAIG,OAAJ,EAAa;IAAA;;IACXI,KAAK,CAACC,IAAN,CAAWd,IAAX,gBAAkBQ,GAAG,CAACR,IAAtB,8CAAkB,UAAUG,KAA5B;IACAU,KAAK,CAACC,IAAN,CAAWS,UAAX,sBAAwBf,GAAG,CAACe,UAA5B,6DAA0CzB,kBAAkB,CAACyB,UAA7D;;IAEA,kBAAIf,GAAG,CAACR,IAAR,2DAAI,WAAUM,KAAd,6CAAI,iBAAiBF,MAArB,EAA6B;MAC3BM,MAAM,CAACV,IAAP,GAAcQ,GAAG,CAACR,IAAJ,CAASM,KAAvB;IACD;EACF,CAtCqF,CAwCtF;;;EACA,IAAI,CAACkB,MAAM,CAACC,IAAP,CAAYf,MAAZ,EAAoBN,MAAzB,EAAiC;IAC/BS,KAAK,CAACH,MAAN,GAAegB,SAAf;EACD;;EACD,OAAOb,KAAP;AACD"},"metadata":{},"sourceType":"module"}