{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { map as _map } from 'lodash';\nimport { lastValueFrom, of } from 'rxjs';\nimport { catchError, map, mapTo } from 'rxjs/operators';\nimport { DataSourceWithBackend, getBackendSrv } from '@grafana/runtime';\nimport { toTestingStatus } from '@grafana/runtime/src/utils/queryResponse';\nimport { getTemplateSrv } from 'app/features/templating/template_srv';\nimport ResponseParser from './response_parser';\nexport class MssqlDatasource extends DataSourceWithBackend {\n  constructor(instanceSettings, templateSrv = getTemplateSrv()) {\n    super(instanceSettings);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"responseParser\", void 0);\n\n    _defineProperty(this, \"interval\", void 0);\n\n    this.templateSrv = templateSrv;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser();\n    const settingsData = instanceSettings.jsonData || {};\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n\n    return quotedValues.join(',');\n  }\n\n  interpolateVariablesInQueries(queries, scopedVars) {\n    let expandedQueries = queries;\n\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map(query => {\n        const expandedQuery = Object.assign({}, query, {\n          datasource: this.getRef(),\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true\n        });\n        return expandedQuery;\n      });\n    }\n\n    return expandedQueries;\n  }\n\n  applyTemplateVariables(target, scopedVars) {\n    return {\n      refId: target.refId,\n      datasource: this.getRef(),\n      rawSql: this.templateSrv.replace(target.rawSql, scopedVars, this.interpolateVariable),\n      format: target.format\n    };\n  }\n\n  async annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition'\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasource: this.getRef(),\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table'\n    };\n    return lastValueFrom(getBackendSrv().fetch({\n      url: '/api/ds/query',\n      method: 'POST',\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries: [query]\n      },\n      requestId: options.annotation.name\n    }).pipe(map(async res => await this.responseParser.transformAnnotationResponse(options, res.data))));\n  }\n\n  filterQuery(query) {\n    return !query.hide;\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    var _range$from, _range$from$valueOf, _range$to, _range$to$valueOf;\n\n    let refId = 'tempvar';\n\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const range = optionalOptions === null || optionalOptions === void 0 ? void 0 : optionalOptions.range;\n    const interpolatedQuery = {\n      refId: refId,\n      datasource: this.getRef(),\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table'\n    };\n    return lastValueFrom(getBackendSrv().fetch({\n      url: '/api/ds/query',\n      method: 'POST',\n      data: {\n        from: range === null || range === void 0 ? void 0 : (_range$from = range.from) === null || _range$from === void 0 ? void 0 : (_range$from$valueOf = _range$from.valueOf()) === null || _range$from$valueOf === void 0 ? void 0 : _range$from$valueOf.toString(),\n        to: range === null || range === void 0 ? void 0 : (_range$to = range.to) === null || _range$to === void 0 ? void 0 : (_range$to$valueOf = _range$to.valueOf()) === null || _range$to$valueOf === void 0 ? void 0 : _range$to$valueOf.toString(),\n        queries: [interpolatedQuery]\n      },\n      requestId: refId\n    }).pipe(map(rsp => {\n      return this.responseParser.transformMetricFindResponse(rsp);\n    }), catchError(err => {\n      return of([]);\n    })));\n  }\n\n  testDatasource() {\n    return lastValueFrom(getBackendSrv().fetch({\n      url: '/api/ds/query',\n      method: 'POST',\n      data: {\n        from: '5m',\n        to: 'now',\n        queries: [{\n          refId: 'A',\n          intervalMs: 1,\n          maxDataPoints: 1,\n          datasource: this.getRef(),\n          rawSql: 'SELECT 1',\n          format: 'table'\n        }]\n      }\n    }).pipe(mapTo({\n      status: 'success',\n      message: 'Database Connection OK'\n    }), catchError(err => {\n      return of(toTestingStatus(err));\n    })));\n  }\n\n  targetContainsTemplate(query) {\n    const rawSql = query.rawSql.replace('$__', '');\n    return this.templateSrv.containsTemplate(rawSql);\n  }\n\n}","map":{"version":3,"names":["map","_map","lastValueFrom","of","catchError","mapTo","DataSourceWithBackend","getBackendSrv","toTestingStatus","getTemplateSrv","ResponseParser","MssqlDatasource","constructor","instanceSettings","templateSrv","name","id","responseParser","settingsData","jsonData","interval","timeInterval","interpolateVariable","value","variable","multi","includeAll","replace","quotedValues","val","join","interpolateVariablesInQueries","queries","scopedVars","expandedQueries","length","query","expandedQuery","datasource","getRef","rawSql","rawQuery","applyTemplateVariables","target","refId","format","annotationQuery","options","annotation","Promise","reject","message","fetch","url","method","data","from","range","valueOf","toString","to","requestId","pipe","res","transformAnnotationResponse","filterQuery","hide","metricFindQuery","optionalOptions","interpolatedQuery","rsp","transformMetricFindResponse","err","testDatasource","intervalMs","maxDataPoints","status","targetContainsTemplate","containsTemplate"],"sources":["/home/soula/grafana/public/app/plugins/datasource/mssql/datasource.ts"],"sourcesContent":["import { map as _map } from 'lodash';\nimport { lastValueFrom, of } from 'rxjs';\nimport { catchError, map, mapTo } from 'rxjs/operators';\n\nimport { AnnotationEvent, DataSourceInstanceSettings, MetricFindValue, ScopedVars, TimeRange } from '@grafana/data';\nimport { BackendDataSourceResponse, DataSourceWithBackend, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { toTestingStatus } from '@grafana/runtime/src/utils/queryResponse';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport ResponseParser from './response_parser';\nimport { MssqlOptions, MssqlQuery, MssqlQueryForInterpolation } from './types';\n\nexport class MssqlDatasource extends DataSourceWithBackend<MssqlQuery, MssqlOptions> {\n  id: any;\n  name: any;\n  responseParser: ResponseParser;\n  interval: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<MssqlOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.responseParser = new ResponseParser();\n    const settingsData = instanceSettings.jsonData || ({} as MssqlOptions);\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable(value: any, variable: any) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, (val) => {\n      if (typeof value === 'number') {\n        return value;\n      }\n\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\n    });\n    return quotedValues.join(',');\n  }\n\n  interpolateVariablesInQueries(\n    queries: MssqlQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): MssqlQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  applyTemplateVariables(target: MssqlQuery, scopedVars: ScopedVars): Record<string, any> {\n    return {\n      refId: target.refId,\n      datasource: this.getRef(),\n      rawSql: this.templateSrv.replace(target.rawSql, scopedVars, this.interpolateVariable),\n      format: target.format,\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({ message: 'Query missing in annotation definition' });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasource: this.getRef(),\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: [query],\n          },\n          requestId: options.annotation.name,\n        })\n        .pipe(\n          map(\n            async (res: FetchResponse<BackendDataSourceResponse>) =>\n              await this.responseParser.transformAnnotationResponse(options, res.data)\n          )\n        )\n    );\n  }\n\n  filterQuery(query: MssqlQuery): boolean {\n    return !query.hide;\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const range = optionalOptions?.range as TimeRange;\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasource: this.getRef(),\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: range?.from?.valueOf()?.toString(),\n            to: range?.to?.valueOf()?.toString(),\n            queries: [interpolatedQuery],\n          },\n          requestId: refId,\n        })\n        .pipe(\n          map((rsp) => {\n            return this.responseParser.transformMetricFindResponse(rsp);\n          }),\n          catchError((err) => {\n            return of([]);\n          })\n        )\n    );\n  }\n\n  testDatasource(): Promise<any> {\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: '5m',\n            to: 'now',\n            queries: [\n              {\n                refId: 'A',\n                intervalMs: 1,\n                maxDataPoints: 1,\n                datasource: this.getRef(),\n                rawSql: 'SELECT 1',\n                format: 'table',\n              },\n            ],\n          },\n        })\n        .pipe(\n          mapTo({ status: 'success', message: 'Database Connection OK' }),\n          catchError((err) => {\n            return of(toTestingStatus(err));\n          })\n        )\n    );\n  }\n\n  targetContainsTemplate(query: MssqlQuery): boolean {\n    const rawSql = query.rawSql.replace('$__', '');\n    return this.templateSrv.containsTemplate(rawSql);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}