{"ast":null,"code":"import React from 'react';\nimport { EditorRows, EditorRow, EditorFieldGroup } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport ResourceField from '../ResourceField';\nimport { ResourceRowType } from '../ResourcePicker/types';\nimport FormatAsField from './FormatAsField';\nimport QueryField from './QueryField';\nimport { setResource } from './setQueryValue';\nimport useMigrations from './useMigrations';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst LogsQueryEditor = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n  hideFormatAs\n}) => {\n  const migrationError = useMigrations(datasource, query, onChange);\n\n  if (config.featureToggles.azureMonitorExperimentalUI) {\n    var _query$azureLogAnalyt;\n\n    return /*#__PURE__*/_jsx(\"span\", {\n      \"data-testid\": \"azure-monitor-logs-query-editor-with-experimental-ui\",\n      children: /*#__PURE__*/_jsxs(EditorRows, {\n        children: [/*#__PURE__*/_jsx(EditorRow, {\n          children: /*#__PURE__*/_jsx(EditorFieldGroup, {\n            children: /*#__PURE__*/_jsx(ResourceField, {\n              query: query,\n              datasource: datasource,\n              inlineField: true,\n              labelWidth: 10,\n              subscriptionId: subscriptionId,\n              variableOptionGroup: variableOptionGroup,\n              onQueryChange: onChange,\n              setError: setError,\n              selectableEntryTypes: [ResourceRowType.Subscription, ResourceRowType.ResourceGroup, ResourceRowType.Resource, ResourceRowType.Variable],\n              setResource: setResource,\n              resourceUri: (_query$azureLogAnalyt = query.azureLogAnalytics) === null || _query$azureLogAnalyt === void 0 ? void 0 : _query$azureLogAnalyt.resource,\n              queryType: \"logs\"\n            })\n          })\n        }), /*#__PURE__*/_jsx(QueryField, {\n          query: query,\n          datasource: datasource,\n          subscriptionId: subscriptionId,\n          variableOptionGroup: variableOptionGroup,\n          onQueryChange: onChange,\n          setError: setError\n        }), /*#__PURE__*/_jsx(EditorRow, {\n          children: /*#__PURE__*/_jsxs(EditorFieldGroup, {\n            children: [!hideFormatAs && /*#__PURE__*/_jsx(FormatAsField, {\n              query: query,\n              datasource: datasource,\n              subscriptionId: subscriptionId,\n              variableOptionGroup: variableOptionGroup,\n              onQueryChange: onChange,\n              setError: setError\n            }), migrationError && /*#__PURE__*/_jsx(Alert, {\n              title: migrationError.title,\n              children: migrationError.message\n            })]\n          })\n        })]\n      })\n    });\n  } else {\n    var _query$azureLogAnalyt2;\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      \"data-testid\": \"azure-monitor-logs-query-editor\",\n      children: [/*#__PURE__*/_jsx(ResourceField, {\n        query: query,\n        datasource: datasource,\n        subscriptionId: subscriptionId,\n        variableOptionGroup: variableOptionGroup,\n        onQueryChange: onChange,\n        setError: setError,\n        selectableEntryTypes: [ResourceRowType.Subscription, ResourceRowType.ResourceGroup, ResourceRowType.Resource, ResourceRowType.Variable],\n        setResource: setResource,\n        resourceUri: (_query$azureLogAnalyt2 = query.azureLogAnalytics) === null || _query$azureLogAnalyt2 === void 0 ? void 0 : _query$azureLogAnalyt2.resource,\n        queryType: \"logs\"\n      }), /*#__PURE__*/_jsx(QueryField, {\n        query: query,\n        datasource: datasource,\n        subscriptionId: subscriptionId,\n        variableOptionGroup: variableOptionGroup,\n        onQueryChange: onChange,\n        setError: setError\n      }), !hideFormatAs && /*#__PURE__*/_jsx(FormatAsField, {\n        query: query,\n        datasource: datasource,\n        subscriptionId: subscriptionId,\n        variableOptionGroup: variableOptionGroup,\n        onQueryChange: onChange,\n        setError: setError\n      }), migrationError && /*#__PURE__*/_jsx(Alert, {\n        title: migrationError.title,\n        children: migrationError.message\n      })]\n    });\n  }\n};\n\nexport default LogsQueryEditor;","map":{"version":3,"names":["React","EditorRows","EditorRow","EditorFieldGroup","config","Alert","ResourceField","ResourceRowType","FormatAsField","QueryField","setResource","useMigrations","LogsQueryEditor","query","datasource","subscriptionId","variableOptionGroup","onChange","setError","hideFormatAs","migrationError","featureToggles","azureMonitorExperimentalUI","Subscription","ResourceGroup","Resource","Variable","azureLogAnalytics","resource","title","message"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/LogsQueryEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { EditorRows, EditorRow, EditorFieldGroup } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery } from '../../types';\nimport ResourceField from '../ResourceField';\nimport { ResourceRowType } from '../ResourcePicker/types';\n\nimport FormatAsField from './FormatAsField';\nimport QueryField from './QueryField';\nimport { setResource } from './setQueryValue';\nimport useMigrations from './useMigrations';\n\ninterface LogsQueryEditorProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n  hideFormatAs?: boolean;\n}\n\nconst LogsQueryEditor: React.FC<LogsQueryEditorProps> = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n  hideFormatAs,\n}) => {\n  const migrationError = useMigrations(datasource, query, onChange);\n\n  if (config.featureToggles.azureMonitorExperimentalUI) {\n    return (\n      <span data-testid=\"azure-monitor-logs-query-editor-with-experimental-ui\">\n        <EditorRows>\n          <EditorRow>\n            <EditorFieldGroup>\n              <ResourceField\n                query={query}\n                datasource={datasource}\n                inlineField={true}\n                labelWidth={10}\n                subscriptionId={subscriptionId}\n                variableOptionGroup={variableOptionGroup}\n                onQueryChange={onChange}\n                setError={setError}\n                selectableEntryTypes={[\n                  ResourceRowType.Subscription,\n                  ResourceRowType.ResourceGroup,\n                  ResourceRowType.Resource,\n                  ResourceRowType.Variable,\n                ]}\n                setResource={setResource}\n                resourceUri={query.azureLogAnalytics?.resource}\n                queryType=\"logs\"\n              />\n            </EditorFieldGroup>\n          </EditorRow>\n          <QueryField\n            query={query}\n            datasource={datasource}\n            subscriptionId={subscriptionId}\n            variableOptionGroup={variableOptionGroup}\n            onQueryChange={onChange}\n            setError={setError}\n          />\n          <EditorRow>\n            <EditorFieldGroup>\n              {!hideFormatAs && (\n                <FormatAsField\n                  query={query}\n                  datasource={datasource}\n                  subscriptionId={subscriptionId}\n                  variableOptionGroup={variableOptionGroup}\n                  onQueryChange={onChange}\n                  setError={setError}\n                />\n              )}\n\n              {migrationError && <Alert title={migrationError.title}>{migrationError.message}</Alert>}\n            </EditorFieldGroup>\n          </EditorRow>\n        </EditorRows>\n      </span>\n    );\n  } else {\n    return (\n      <div data-testid=\"azure-monitor-logs-query-editor\">\n        <ResourceField\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n          selectableEntryTypes={[\n            ResourceRowType.Subscription,\n            ResourceRowType.ResourceGroup,\n            ResourceRowType.Resource,\n            ResourceRowType.Variable,\n          ]}\n          setResource={setResource}\n          resourceUri={query.azureLogAnalytics?.resource}\n          queryType=\"logs\"\n        />\n\n        <QueryField\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n\n        {!hideFormatAs && (\n          <FormatAsField\n            query={query}\n            datasource={datasource}\n            subscriptionId={subscriptionId}\n            variableOptionGroup={variableOptionGroup}\n            onQueryChange={onChange}\n            setError={setError}\n          />\n        )}\n\n        {migrationError && <Alert title={migrationError.title}>{migrationError.message}</Alert>}\n      </div>\n    );\n  }\n};\n\nexport default LogsQueryEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}