{"ast":null,"code":"import { toFixed } from './valueFormats';\nexport function toPercent(size, decimals) {\n  if (size === null) {\n    return {\n      text: ''\n    };\n  }\n\n  return {\n    text: toFixed(size, decimals),\n    suffix: '%'\n  };\n}\nexport function toPercentUnit(size, decimals) {\n  if (size === null) {\n    return {\n      text: ''\n    };\n  }\n\n  return {\n    text: toFixed(100 * size, decimals),\n    suffix: '%'\n  };\n}\nexport function toHex0x(value, decimals) {\n  if (value == null) {\n    return {\n      text: ''\n    };\n  }\n\n  const asHex = toHex(value, decimals);\n\n  if (asHex.text.substring(0, 1) === '-') {\n    asHex.text = '-0x' + asHex.text.substring(1);\n  } else {\n    asHex.text = '0x' + asHex.text;\n  }\n\n  return asHex;\n}\nexport function toHex(value, decimals) {\n  if (value == null) {\n    return {\n      text: ''\n    };\n  }\n\n  return {\n    text: parseFloat(toFixed(value, decimals)).toString(16).toUpperCase()\n  };\n}\nexport function sci(value, decimals) {\n  if (value == null) {\n    return {\n      text: ''\n    };\n  }\n\n  return {\n    text: value.toExponential(decimals)\n  };\n}","map":{"version":3,"names":["toFixed","toPercent","size","decimals","text","suffix","toPercentUnit","toHex0x","value","asHex","toHex","substring","parseFloat","toString","toUpperCase","sci","toExponential"],"sources":["/home/soula/grafana/packages/grafana-data/src/valueFormats/arithmeticFormatters.ts"],"sourcesContent":["import { DecimalCount } from '../types/displayValue';\n\nimport { toFixed, FormattedValue } from './valueFormats';\n\nexport function toPercent(size: number, decimals: DecimalCount): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n  return { text: toFixed(size, decimals), suffix: '%' };\n}\n\nexport function toPercentUnit(size: number, decimals: DecimalCount): FormattedValue {\n  if (size === null) {\n    return { text: '' };\n  }\n  return { text: toFixed(100 * size, decimals), suffix: '%' };\n}\n\nexport function toHex0x(value: number, decimals: DecimalCount): FormattedValue {\n  if (value == null) {\n    return { text: '' };\n  }\n  const asHex = toHex(value, decimals);\n  if (asHex.text.substring(0, 1) === '-') {\n    asHex.text = '-0x' + asHex.text.substring(1);\n  } else {\n    asHex.text = '0x' + asHex.text;\n  }\n  return asHex;\n}\n\nexport function toHex(value: number, decimals: DecimalCount): FormattedValue {\n  if (value == null) {\n    return { text: '' };\n  }\n  return {\n    text: parseFloat(toFixed(value, decimals)).toString(16).toUpperCase(),\n  };\n}\n\nexport function sci(value: number, decimals: DecimalCount): FormattedValue {\n  if (value == null) {\n    return { text: '' };\n  }\n  return { text: value.toExponential(decimals as number) };\n}\n"],"mappings":"AAEA,SAASA,OAAT,QAAwC,gBAAxC;AAEA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAiCC,QAAjC,EAAyE;EAC9E,IAAID,IAAI,KAAK,IAAb,EAAmB;IACjB,OAAO;MAAEE,IAAI,EAAE;IAAR,CAAP;EACD;;EACD,OAAO;IAAEA,IAAI,EAAEJ,OAAO,CAACE,IAAD,EAAOC,QAAP,CAAf;IAAiCE,MAAM,EAAE;EAAzC,CAAP;AACD;AAED,OAAO,SAASC,aAAT,CAAuBJ,IAAvB,EAAqCC,QAArC,EAA6E;EAClF,IAAID,IAAI,KAAK,IAAb,EAAmB;IACjB,OAAO;MAAEE,IAAI,EAAE;IAAR,CAAP;EACD;;EACD,OAAO;IAAEA,IAAI,EAAEJ,OAAO,CAAC,MAAME,IAAP,EAAaC,QAAb,CAAf;IAAuCE,MAAM,EAAE;EAA/C,CAAP;AACD;AAED,OAAO,SAASE,OAAT,CAAiBC,KAAjB,EAAgCL,QAAhC,EAAwE;EAC7E,IAAIK,KAAK,IAAI,IAAb,EAAmB;IACjB,OAAO;MAAEJ,IAAI,EAAE;IAAR,CAAP;EACD;;EACD,MAAMK,KAAK,GAAGC,KAAK,CAACF,KAAD,EAAQL,QAAR,CAAnB;;EACA,IAAIM,KAAK,CAACL,IAAN,CAAWO,SAAX,CAAqB,CAArB,EAAwB,CAAxB,MAA+B,GAAnC,EAAwC;IACtCF,KAAK,CAACL,IAAN,GAAa,QAAQK,KAAK,CAACL,IAAN,CAAWO,SAAX,CAAqB,CAArB,CAArB;EACD,CAFD,MAEO;IACLF,KAAK,CAACL,IAAN,GAAa,OAAOK,KAAK,CAACL,IAA1B;EACD;;EACD,OAAOK,KAAP;AACD;AAED,OAAO,SAASC,KAAT,CAAeF,KAAf,EAA8BL,QAA9B,EAAsE;EAC3E,IAAIK,KAAK,IAAI,IAAb,EAAmB;IACjB,OAAO;MAAEJ,IAAI,EAAE;IAAR,CAAP;EACD;;EACD,OAAO;IACLA,IAAI,EAAEQ,UAAU,CAACZ,OAAO,CAACQ,KAAD,EAAQL,QAAR,CAAR,CAAV,CAAqCU,QAArC,CAA8C,EAA9C,EAAkDC,WAAlD;EADD,CAAP;AAGD;AAED,OAAO,SAASC,GAAT,CAAaP,KAAb,EAA4BL,QAA5B,EAAoE;EACzE,IAAIK,KAAK,IAAI,IAAb,EAAmB;IACjB,OAAO;MAAEJ,IAAI,EAAE;IAAR,CAAP;EACD;;EACD,OAAO;IAAEA,IAAI,EAAEI,KAAK,CAACQ,aAAN,CAAoBb,QAApB;EAAR,CAAP;AACD"},"metadata":{},"sourceType":"module"}