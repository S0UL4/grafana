{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport memoizeOne from 'memoize-one';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { EventBusSrv } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport store from 'app/core/store';\nimport { DEFAULT_RANGE, ensureQueries, getTimeRange, getTimeRangeFromUrl, lastUsedDatasourceKeyForOrgId, parseUrlState } from 'app/core/utils/explore';\nimport { getFiscalYearStartMonth, getTimeZone } from '../profile/state/selectors';\nimport Explore from './Explore';\nimport { initializeExplore, refreshExplore } from './state/explorePane';\nimport { lastSavedUrl, cleanupPaneAction } from './state/main';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * This component is responsible for handling initialization of an Explore pane and triggering synchronization\n * of state based on URL changes and preventing any infinite loops.\n */\nclass ExplorePaneContainerUnconnected extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"el\", void 0);\n\n    _defineProperty(this, \"exploreEvents\", void 0);\n\n    _defineProperty(this, \"refreshExplore\", prevUrlQuery => {\n      const {\n        exploreId,\n        urlQuery\n      } = this.props; // Update state from url only if it changed and only if the change wasn't initialised by redux to prevent any loops\n\n      if (urlQuery !== prevUrlQuery && urlQuery !== lastSavedUrl[exploreId]) {\n        this.props.refreshExplore(exploreId, urlQuery);\n      }\n    });\n\n    _defineProperty(this, \"getRef\", el => {\n      this.el = el;\n    });\n\n    this.exploreEvents = new EventBusSrv();\n    this.state = {\n      openDrawer: undefined\n    };\n  }\n\n  componentDidMount() {\n    var _this$el$offsetWidth, _this$el;\n\n    const {\n      initialized,\n      exploreId,\n      initialDatasource,\n      initialQueries,\n      initialRange,\n      panelsState\n    } = this.props;\n    const width = (_this$el$offsetWidth = (_this$el = this.el) === null || _this$el === void 0 ? void 0 : _this$el.offsetWidth) !== null && _this$el$offsetWidth !== void 0 ? _this$el$offsetWidth : 0; // initialize the whole explore first time we mount and if browser history contains a change in datasource\n\n    if (!initialized) {\n      this.props.initializeExplore(exploreId, initialDatasource, initialQueries, initialRange, width, this.exploreEvents, panelsState);\n    }\n  }\n\n  componentWillUnmount() {\n    this.exploreEvents.removeAllListeners();\n    this.props.cleanupPaneAction({\n      exploreId: this.props.exploreId\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    this.refreshExplore(prevProps.urlQuery);\n  }\n\n  render() {\n    const exploreClass = this.props.split ? 'explore explore-split' : 'explore';\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: exploreClass,\n      ref: this.getRef,\n      \"data-testid\": selectors.pages.Explore.General.container,\n      children: this.props.initialized && /*#__PURE__*/_jsx(Explore, {\n        exploreId: this.props.exploreId\n      })\n    });\n  }\n\n}\n\nconst ensureQueriesMemoized = memoizeOne(ensureQueries);\nconst getTimeRangeFromUrlMemoized = memoizeOne(getTimeRangeFromUrl);\n\nfunction mapStateToProps(state, props) {\n  var _state$explore$props$;\n\n  const urlState = parseUrlState(props.urlQuery);\n  const timeZone = getTimeZone(state.user);\n  const fiscalYearStartMonth = getFiscalYearStartMonth(state.user);\n  const {\n    datasource,\n    queries,\n    range: urlRange,\n    panelsState\n  } = urlState || {};\n  const initialDatasource = datasource || store.get(lastUsedDatasourceKeyForOrgId(state.user.orgId));\n  const initialQueries = ensureQueriesMemoized(queries);\n  const initialRange = urlRange ? getTimeRangeFromUrlMemoized(urlRange, timeZone, fiscalYearStartMonth) : getTimeRange(timeZone, DEFAULT_RANGE, fiscalYearStartMonth);\n  return {\n    initialized: (_state$explore$props$ = state.explore[props.exploreId]) === null || _state$explore$props$ === void 0 ? void 0 : _state$explore$props$.initialized,\n    initialDatasource,\n    initialQueries,\n    initialRange,\n    panelsState\n  };\n}\n\nconst mapDispatchToProps = {\n  initializeExplore,\n  refreshExplore,\n  cleanupPaneAction\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport const ExplorePaneContainer = connector(ExplorePaneContainerUnconnected);","map":{"version":3,"names":["memoizeOne","React","connect","EventBusSrv","selectors","store","DEFAULT_RANGE","ensureQueries","getTimeRange","getTimeRangeFromUrl","lastUsedDatasourceKeyForOrgId","parseUrlState","getFiscalYearStartMonth","getTimeZone","Explore","initializeExplore","refreshExplore","lastSavedUrl","cleanupPaneAction","ExplorePaneContainerUnconnected","PureComponent","constructor","props","prevUrlQuery","exploreId","urlQuery","el","exploreEvents","state","openDrawer","undefined","componentDidMount","initialized","initialDatasource","initialQueries","initialRange","panelsState","width","offsetWidth","componentWillUnmount","removeAllListeners","componentDidUpdate","prevProps","render","exploreClass","split","getRef","pages","General","container","ensureQueriesMemoized","getTimeRangeFromUrlMemoized","mapStateToProps","urlState","timeZone","user","fiscalYearStartMonth","datasource","queries","range","urlRange","get","orgId","explore","mapDispatchToProps","connector","ExplorePaneContainer"],"sources":["/home/soula/grafana/public/app/features/explore/ExplorePaneContainer.tsx"],"sourcesContent":["import memoizeOne from 'memoize-one';\nimport React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { DataQuery, ExploreUrlState, EventBusExtended, EventBusSrv } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport store from 'app/core/store';\nimport {\n  DEFAULT_RANGE,\n  ensureQueries,\n  getTimeRange,\n  getTimeRangeFromUrl,\n  lastUsedDatasourceKeyForOrgId,\n  parseUrlState,\n} from 'app/core/utils/explore';\nimport { StoreState } from 'app/types';\nimport { ExploreId } from 'app/types/explore';\n\nimport { getFiscalYearStartMonth, getTimeZone } from '../profile/state/selectors';\n\nimport Explore from './Explore';\nimport { initializeExplore, refreshExplore } from './state/explorePane';\nimport { lastSavedUrl, cleanupPaneAction } from './state/main';\n\ninterface OwnProps {\n  exploreId: ExploreId;\n  urlQuery: string;\n  split: boolean;\n}\n\ninterface Props extends OwnProps, ConnectedProps<typeof connector> {}\n\n/**\n * This component is responsible for handling initialization of an Explore pane and triggering synchronization\n * of state based on URL changes and preventing any infinite loops.\n */\nclass ExplorePaneContainerUnconnected extends React.PureComponent<Props> {\n  el: any;\n  exploreEvents: EventBusExtended;\n\n  constructor(props: Props) {\n    super(props);\n    this.exploreEvents = new EventBusSrv();\n    this.state = {\n      openDrawer: undefined,\n    };\n  }\n\n  componentDidMount() {\n    const { initialized, exploreId, initialDatasource, initialQueries, initialRange, panelsState } = this.props;\n    const width = this.el?.offsetWidth ?? 0;\n\n    // initialize the whole explore first time we mount and if browser history contains a change in datasource\n    if (!initialized) {\n      this.props.initializeExplore(\n        exploreId,\n        initialDatasource,\n        initialQueries,\n        initialRange,\n        width,\n        this.exploreEvents,\n        panelsState\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.exploreEvents.removeAllListeners();\n    this.props.cleanupPaneAction({ exploreId: this.props.exploreId });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    this.refreshExplore(prevProps.urlQuery);\n  }\n\n  refreshExplore = (prevUrlQuery: string) => {\n    const { exploreId, urlQuery } = this.props;\n\n    // Update state from url only if it changed and only if the change wasn't initialised by redux to prevent any loops\n    if (urlQuery !== prevUrlQuery && urlQuery !== lastSavedUrl[exploreId]) {\n      this.props.refreshExplore(exploreId, urlQuery);\n    }\n  };\n\n  getRef = (el: any) => {\n    this.el = el;\n  };\n\n  render() {\n    const exploreClass = this.props.split ? 'explore explore-split' : 'explore';\n    return (\n      <div className={exploreClass} ref={this.getRef} data-testid={selectors.pages.Explore.General.container}>\n        {this.props.initialized && <Explore exploreId={this.props.exploreId} />}\n      </div>\n    );\n  }\n}\n\nconst ensureQueriesMemoized = memoizeOne(ensureQueries);\nconst getTimeRangeFromUrlMemoized = memoizeOne(getTimeRangeFromUrl);\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const urlState = parseUrlState(props.urlQuery);\n  const timeZone = getTimeZone(state.user);\n  const fiscalYearStartMonth = getFiscalYearStartMonth(state.user);\n\n  const { datasource, queries, range: urlRange, panelsState } = (urlState || {}) as ExploreUrlState;\n  const initialDatasource = datasource || store.get(lastUsedDatasourceKeyForOrgId(state.user.orgId));\n  const initialQueries: DataQuery[] = ensureQueriesMemoized(queries);\n  const initialRange = urlRange\n    ? getTimeRangeFromUrlMemoized(urlRange, timeZone, fiscalYearStartMonth)\n    : getTimeRange(timeZone, DEFAULT_RANGE, fiscalYearStartMonth);\n\n  return {\n    initialized: state.explore[props.exploreId]?.initialized,\n    initialDatasource,\n    initialQueries,\n    initialRange,\n    panelsState,\n  };\n}\n\nconst mapDispatchToProps = {\n  initializeExplore,\n  refreshExplore,\n  cleanupPaneAction,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const ExplorePaneContainer = connector(ExplorePaneContainerUnconnected);\n"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwC,aAAxC;AAEA,SAAuDC,WAAvD,QAA0E,eAA1E;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,mBAJF,EAKEC,6BALF,EAMEC,aANF,QAOO,wBAPP;AAWA,SAASC,uBAAT,EAAkCC,WAAlC,QAAqD,4BAArD;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,qBAAlD;AACA,SAASC,YAAT,EAAuBC,iBAAvB,QAAgD,cAAhD;;;AAUA;AACA;AACA;AACA;AACA,MAAMC,+BAAN,SAA8ClB,KAAK,CAACmB,aAApD,CAAyE;EAIvEC,WAAW,CAACC,KAAD,EAAe;IACxB,MAAMA,KAAN;;IADwB;;IAAA;;IAAA,wCAmCRC,YAAD,IAA0B;MACzC,MAAM;QAAEC,SAAF;QAAaC;MAAb,IAA0B,KAAKH,KAArC,CADyC,CAGzC;;MACA,IAAIG,QAAQ,KAAKF,YAAb,IAA6BE,QAAQ,KAAKR,YAAY,CAACO,SAAD,CAA1D,EAAuE;QACrE,KAAKF,KAAL,CAAWN,cAAX,CAA0BQ,SAA1B,EAAqCC,QAArC;MACD;IACF,CA1CyB;;IAAA,gCA4ChBC,EAAD,IAAa;MACpB,KAAKA,EAAL,GAAUA,EAAV;IACD,CA9CyB;;IAExB,KAAKC,aAAL,GAAqB,IAAIxB,WAAJ,EAArB;IACA,KAAKyB,KAAL,GAAa;MACXC,UAAU,EAAEC;IADD,CAAb;EAGD;;EAEDC,iBAAiB,GAAG;IAAA;;IAClB,MAAM;MAAEC,WAAF;MAAeR,SAAf;MAA0BS,iBAA1B;MAA6CC,cAA7C;MAA6DC,YAA7D;MAA2EC;IAA3E,IAA2F,KAAKd,KAAtG;IACA,MAAMe,KAAK,uCAAG,KAAKX,EAAR,6CAAG,SAASY,WAAZ,uEAA2B,CAAtC,CAFkB,CAIlB;;IACA,IAAI,CAACN,WAAL,EAAkB;MAChB,KAAKV,KAAL,CAAWP,iBAAX,CACES,SADF,EAEES,iBAFF,EAGEC,cAHF,EAIEC,YAJF,EAKEE,KALF,EAME,KAAKV,aANP,EAOES,WAPF;IASD;EACF;;EAEDG,oBAAoB,GAAG;IACrB,KAAKZ,aAAL,CAAmBa,kBAAnB;IACA,KAAKlB,KAAL,CAAWJ,iBAAX,CAA6B;MAAEM,SAAS,EAAE,KAAKF,KAAL,CAAWE;IAAxB,CAA7B;EACD;;EAEDiB,kBAAkB,CAACC,SAAD,EAAmB;IACnC,KAAK1B,cAAL,CAAoB0B,SAAS,CAACjB,QAA9B;EACD;;EAeDkB,MAAM,GAAG;IACP,MAAMC,YAAY,GAAG,KAAKtB,KAAL,CAAWuB,KAAX,GAAmB,uBAAnB,GAA6C,SAAlE;IACA,oBACE;MAAK,SAAS,EAAED,YAAhB;MAA8B,GAAG,EAAE,KAAKE,MAAxC;MAAgD,eAAa1C,SAAS,CAAC2C,KAAV,CAAgBjC,OAAhB,CAAwBkC,OAAxB,CAAgCC,SAA7F;MAAA,UACG,KAAK3B,KAAL,CAAWU,WAAX,iBAA0B,KAAC,OAAD;QAAS,SAAS,EAAE,KAAKV,KAAL,CAAWE;MAA/B;IAD7B,EADF;EAKD;;AA3DsE;;AA8DzE,MAAM0B,qBAAqB,GAAGlD,UAAU,CAACO,aAAD,CAAxC;AACA,MAAM4C,2BAA2B,GAAGnD,UAAU,CAACS,mBAAD,CAA9C;;AAEA,SAAS2C,eAAT,CAAyBxB,KAAzB,EAA4CN,KAA5C,EAA6D;EAAA;;EAC3D,MAAM+B,QAAQ,GAAG1C,aAAa,CAACW,KAAK,CAACG,QAAP,CAA9B;EACA,MAAM6B,QAAQ,GAAGzC,WAAW,CAACe,KAAK,CAAC2B,IAAP,CAA5B;EACA,MAAMC,oBAAoB,GAAG5C,uBAAuB,CAACgB,KAAK,CAAC2B,IAAP,CAApD;EAEA,MAAM;IAAEE,UAAF;IAAcC,OAAd;IAAuBC,KAAK,EAAEC,QAA9B;IAAwCxB;EAAxC,IAAyDiB,QAAQ,IAAI,EAA3E;EACA,MAAMpB,iBAAiB,GAAGwB,UAAU,IAAIpD,KAAK,CAACwD,GAAN,CAAUnD,6BAA6B,CAACkB,KAAK,CAAC2B,IAAN,CAAWO,KAAZ,CAAvC,CAAxC;EACA,MAAM5B,cAA2B,GAAGgB,qBAAqB,CAACQ,OAAD,CAAzD;EACA,MAAMvB,YAAY,GAAGyB,QAAQ,GACzBT,2BAA2B,CAACS,QAAD,EAAWN,QAAX,EAAqBE,oBAArB,CADF,GAEzBhD,YAAY,CAAC8C,QAAD,EAAWhD,aAAX,EAA0BkD,oBAA1B,CAFhB;EAIA,OAAO;IACLxB,WAAW,2BAAEJ,KAAK,CAACmC,OAAN,CAAczC,KAAK,CAACE,SAApB,CAAF,0DAAE,sBAAgCQ,WADxC;IAELC,iBAFK;IAGLC,cAHK;IAILC,YAJK;IAKLC;EALK,CAAP;AAOD;;AAED,MAAM4B,kBAAkB,GAAG;EACzBjD,iBADyB;EAEzBC,cAFyB;EAGzBE;AAHyB,CAA3B;AAMA,MAAM+C,SAAS,GAAG/D,OAAO,CAACkD,eAAD,EAAkBY,kBAAlB,CAAzB;AAEA,OAAO,MAAME,oBAAoB,GAAGD,SAAS,CAAC9C,+BAAD,CAAtC"},"metadata":{},"sourceType":"module"}