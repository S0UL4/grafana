{"ast":null,"code":"import { FrameGeometrySourceMode, getFieldMatcher, FieldMatcherID, getFieldDisplayName, FieldType } from '@grafana/data';\nimport { getGeoFieldFromGazetteer, pointFieldFromGeohash, pointFieldFromLonLat } from '../format/utils';\nimport { getGazetteer } from '../gazetteer/gazetteer';\n\nfunction getFieldFinder(matcher) {\n  return frame => {\n    for (const field of frame.fields) {\n      if (matcher(field, frame, [])) {\n        return field;\n      }\n    }\n\n    return undefined;\n  };\n}\n\nfunction matchLowerNames(names) {\n  return frame => {\n    for (const field of frame.fields) {\n      if (names.has(field.name.toLowerCase())) {\n        return field;\n      }\n\n      const disp = getFieldDisplayName(field, frame);\n\n      if (names.has(disp)) {\n        return field;\n      }\n    }\n\n    return undefined;\n  };\n}\n\nconst defaultMatchers = {\n  mode: FrameGeometrySourceMode.Auto,\n  geohash: matchLowerNames(new Set(['geohash'])),\n  latitude: matchLowerNames(new Set(['latitude', 'lat'])),\n  longitude: matchLowerNames(new Set(['longitude', 'lon', 'lng'])),\n  h3: matchLowerNames(new Set(['h3'])),\n  wkt: matchLowerNames(new Set(['wkt'])),\n  lookup: matchLowerNames(new Set(['lookup'])),\n  geo: frame => frame.fields.find(f => f.type === FieldType.geo)\n};\nexport async function getLocationMatchers(src) {\n  var _src$mode;\n\n  const info = Object.assign({}, defaultMatchers, {\n    mode: (_src$mode = src === null || src === void 0 ? void 0 : src.mode) !== null && _src$mode !== void 0 ? _src$mode : FrameGeometrySourceMode.Auto\n  });\n\n  switch (info.mode) {\n    case FrameGeometrySourceMode.Geohash:\n      if (src !== null && src !== void 0 && src.geohash) {\n        info.geohash = getFieldFinder(getFieldMatcher({\n          id: FieldMatcherID.byName,\n          options: src.geohash\n        }));\n      }\n\n      break;\n\n    case FrameGeometrySourceMode.Lookup:\n      if (src !== null && src !== void 0 && src.lookup) {\n        info.lookup = getFieldFinder(getFieldMatcher({\n          id: FieldMatcherID.byName,\n          options: src.lookup\n        }));\n      }\n\n      info.gazetteer = await getGazetteer(src === null || src === void 0 ? void 0 : src.gazetteer);\n      break;\n\n    case FrameGeometrySourceMode.Coords:\n      if (src !== null && src !== void 0 && src.latitude) {\n        info.latitude = getFieldFinder(getFieldMatcher({\n          id: FieldMatcherID.byName,\n          options: src.latitude\n        }));\n      }\n\n      if (src !== null && src !== void 0 && src.longitude) {\n        info.longitude = getFieldFinder(getFieldMatcher({\n          id: FieldMatcherID.byName,\n          options: src.longitude\n        }));\n      }\n\n      break;\n  }\n\n  return info;\n}\nexport function getLocationFields(frame, location) {\n  var _location$mode;\n\n  const fields = {\n    mode: (_location$mode = location.mode) !== null && _location$mode !== void 0 ? _location$mode : FrameGeometrySourceMode.Auto\n  }; // Find the best option\n\n  if (fields.mode === FrameGeometrySourceMode.Auto) {\n    fields.geo = location.geo(frame);\n\n    if (fields.geo) {\n      return fields;\n    }\n\n    fields.latitude = location.latitude(frame);\n    fields.longitude = location.longitude(frame);\n\n    if (fields.latitude && fields.longitude) {\n      fields.mode = FrameGeometrySourceMode.Coords;\n      return fields;\n    }\n\n    fields.geohash = location.geohash(frame);\n\n    if (fields.geohash) {\n      fields.mode = FrameGeometrySourceMode.Geohash;\n      return fields;\n    }\n\n    fields.lookup = location.geohash(frame);\n\n    if (fields.lookup) {\n      fields.mode = FrameGeometrySourceMode.Lookup;\n      return fields;\n    }\n  }\n\n  switch (fields.mode) {\n    case FrameGeometrySourceMode.Coords:\n      fields.latitude = location.latitude(frame);\n      fields.longitude = location.longitude(frame);\n      break;\n\n    case FrameGeometrySourceMode.Geohash:\n      fields.geohash = location.geohash(frame);\n      break;\n\n    case FrameGeometrySourceMode.Lookup:\n      fields.lookup = location.lookup(frame);\n      break;\n  }\n\n  return fields;\n}\nexport function getGeometryField(frame, location) {\n  const fields = getLocationFields(frame, location);\n\n  switch (fields.mode) {\n    case FrameGeometrySourceMode.Auto:\n      if (fields.geo) {\n        return {\n          field: fields.geo\n        };\n      }\n\n      return {\n        warning: 'Unable to find location fields'\n      };\n\n    case FrameGeometrySourceMode.Coords:\n      if (fields.latitude && fields.longitude) {\n        return {\n          field: pointFieldFromLonLat(fields.longitude, fields.latitude),\n          derived: true\n        };\n      }\n\n      return {\n        warning: 'Missing latitude/longitude fields'\n      };\n\n    case FrameGeometrySourceMode.Geohash:\n      if (fields.geohash) {\n        return {\n          field: pointFieldFromGeohash(fields.geohash),\n          derived: true\n        };\n      }\n\n      return {\n        warning: 'Missing geohash field'\n      };\n\n    case FrameGeometrySourceMode.Lookup:\n      if (fields.lookup) {\n        if (location.gazetteer) {\n          return {\n            field: getGeoFieldFromGazetteer(location.gazetteer, fields.lookup),\n            derived: true\n          };\n        }\n\n        return {\n          warning: 'Gazetteer not found'\n        };\n      }\n\n      return {\n        warning: 'Missing lookup field'\n      };\n  }\n\n  return {\n    warning: 'unable to find geometry'\n  };\n}","map":{"version":3,"names":["FrameGeometrySourceMode","getFieldMatcher","FieldMatcherID","getFieldDisplayName","FieldType","getGeoFieldFromGazetteer","pointFieldFromGeohash","pointFieldFromLonLat","getGazetteer","getFieldFinder","matcher","frame","field","fields","undefined","matchLowerNames","names","has","name","toLowerCase","disp","defaultMatchers","mode","Auto","geohash","Set","latitude","longitude","h3","wkt","lookup","geo","find","f","type","getLocationMatchers","src","info","Geohash","id","byName","options","Lookup","gazetteer","Coords","getLocationFields","location","getGeometryField","warning","derived"],"sources":["/home/soula/grafana/public/app/features/geo/utils/location.ts"],"sourcesContent":["import { Geometry } from 'ol/geom';\n\nimport {\n  FrameGeometrySource,\n  FrameGeometrySourceMode,\n  FieldMatcher,\n  getFieldMatcher,\n  FieldMatcherID,\n  DataFrame,\n  Field,\n  getFieldDisplayName,\n  FieldType,\n} from '@grafana/data';\n\nimport { getGeoFieldFromGazetteer, pointFieldFromGeohash, pointFieldFromLonLat } from '../format/utils';\nimport { getGazetteer, Gazetteer } from '../gazetteer/gazetteer';\n\nexport type FieldFinder = (frame: DataFrame) => Field | undefined;\n\nfunction getFieldFinder(matcher: FieldMatcher): FieldFinder {\n  return (frame: DataFrame) => {\n    for (const field of frame.fields) {\n      if (matcher(field, frame, [])) {\n        return field;\n      }\n    }\n    return undefined;\n  };\n}\n\nfunction matchLowerNames(names: Set<string>): FieldFinder {\n  return (frame: DataFrame) => {\n    for (const field of frame.fields) {\n      if (names.has(field.name.toLowerCase())) {\n        return field;\n      }\n      const disp = getFieldDisplayName(field, frame);\n      if (names.has(disp)) {\n        return field;\n      }\n    }\n    return undefined;\n  };\n}\n\nexport interface LocationFieldMatchers {\n  mode: FrameGeometrySourceMode;\n\n  // Field mappings\n  geohash: FieldFinder;\n  latitude: FieldFinder;\n  longitude: FieldFinder;\n  h3: FieldFinder;\n  wkt: FieldFinder;\n  lookup: FieldFinder;\n  geo: FieldFinder;\n  gazetteer?: Gazetteer;\n}\n\nconst defaultMatchers: LocationFieldMatchers = {\n  mode: FrameGeometrySourceMode.Auto,\n  geohash: matchLowerNames(new Set(['geohash'])),\n  latitude: matchLowerNames(new Set(['latitude', 'lat'])),\n  longitude: matchLowerNames(new Set(['longitude', 'lon', 'lng'])),\n  h3: matchLowerNames(new Set(['h3'])),\n  wkt: matchLowerNames(new Set(['wkt'])),\n  lookup: matchLowerNames(new Set(['lookup'])),\n  geo: (frame: DataFrame) => frame.fields.find((f) => f.type === FieldType.geo),\n};\n\nexport async function getLocationMatchers(src?: FrameGeometrySource): Promise<LocationFieldMatchers> {\n  const info: LocationFieldMatchers = {\n    ...defaultMatchers,\n    mode: src?.mode ?? FrameGeometrySourceMode.Auto,\n  };\n  switch (info.mode) {\n    case FrameGeometrySourceMode.Geohash:\n      if (src?.geohash) {\n        info.geohash = getFieldFinder(getFieldMatcher({ id: FieldMatcherID.byName, options: src.geohash }));\n      }\n      break;\n    case FrameGeometrySourceMode.Lookup:\n      if (src?.lookup) {\n        info.lookup = getFieldFinder(getFieldMatcher({ id: FieldMatcherID.byName, options: src.lookup }));\n      }\n      info.gazetteer = await getGazetteer(src?.gazetteer);\n      break;\n    case FrameGeometrySourceMode.Coords:\n      if (src?.latitude) {\n        info.latitude = getFieldFinder(getFieldMatcher({ id: FieldMatcherID.byName, options: src.latitude }));\n      }\n      if (src?.longitude) {\n        info.longitude = getFieldFinder(getFieldMatcher({ id: FieldMatcherID.byName, options: src.longitude }));\n      }\n      break;\n  }\n  return info;\n}\nexport interface LocationFields {\n  mode: FrameGeometrySourceMode;\n\n  // Field mappings\n  geohash?: Field;\n  latitude?: Field;\n  longitude?: Field;\n  h3?: Field;\n  wkt?: Field;\n  lookup?: Field;\n  geo?: Field<Geometry>;\n}\n\nexport function getLocationFields(frame: DataFrame, location: LocationFieldMatchers): LocationFields {\n  const fields: LocationFields = {\n    mode: location.mode ?? FrameGeometrySourceMode.Auto,\n  };\n\n  // Find the best option\n  if (fields.mode === FrameGeometrySourceMode.Auto) {\n    fields.geo = location.geo(frame);\n    if (fields.geo) {\n      return fields;\n    }\n\n    fields.latitude = location.latitude(frame);\n    fields.longitude = location.longitude(frame);\n    if (fields.latitude && fields.longitude) {\n      fields.mode = FrameGeometrySourceMode.Coords;\n      return fields;\n    }\n    fields.geohash = location.geohash(frame);\n    if (fields.geohash) {\n      fields.mode = FrameGeometrySourceMode.Geohash;\n      return fields;\n    }\n    fields.lookup = location.geohash(frame);\n    if (fields.lookup) {\n      fields.mode = FrameGeometrySourceMode.Lookup;\n      return fields;\n    }\n  }\n\n  switch (fields.mode) {\n    case FrameGeometrySourceMode.Coords:\n      fields.latitude = location.latitude(frame);\n      fields.longitude = location.longitude(frame);\n      break;\n    case FrameGeometrySourceMode.Geohash:\n      fields.geohash = location.geohash(frame);\n      break;\n    case FrameGeometrySourceMode.Lookup:\n      fields.lookup = location.lookup(frame);\n      break;\n  }\n\n  return fields;\n}\n\nexport interface FrameGeometryField {\n  field?: Field<Geometry | undefined>;\n  warning?: string;\n  derived?: boolean;\n}\n\nexport function getGeometryField(frame: DataFrame, location: LocationFieldMatchers): FrameGeometryField {\n  const fields = getLocationFields(frame, location);\n  switch (fields.mode) {\n    case FrameGeometrySourceMode.Auto:\n      if (fields.geo) {\n        return {\n          field: fields.geo,\n        };\n      }\n      return {\n        warning: 'Unable to find location fields',\n      };\n\n    case FrameGeometrySourceMode.Coords:\n      if (fields.latitude && fields.longitude) {\n        return {\n          field: pointFieldFromLonLat(fields.longitude, fields.latitude),\n          derived: true,\n        };\n      }\n      return {\n        warning: 'Missing latitude/longitude fields',\n      };\n\n    case FrameGeometrySourceMode.Geohash:\n      if (fields.geohash) {\n        return {\n          field: pointFieldFromGeohash(fields.geohash),\n          derived: true,\n        };\n      }\n      return {\n        warning: 'Missing geohash field',\n      };\n\n    case FrameGeometrySourceMode.Lookup:\n      if (fields.lookup) {\n        if (location.gazetteer) {\n          return {\n            field: getGeoFieldFromGazetteer(location.gazetteer, fields.lookup),\n            derived: true,\n          };\n        }\n        return {\n          warning: 'Gazetteer not found',\n        };\n      }\n      return {\n        warning: 'Missing lookup field',\n      };\n  }\n\n  return { warning: 'unable to find geometry' };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}