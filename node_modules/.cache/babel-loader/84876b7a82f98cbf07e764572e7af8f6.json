{"ast":null,"code":"import { set, get as lodashGet } from 'lodash';\nimport { PanelOptionsEditorBuilder } from '@grafana/data';\nimport { OptionsPaneCategoryDescriptor } from 'app/features/dashboard/components/PanelEditor/OptionsPaneCategoryDescriptor';\nimport { fillOptionsPaneItems } from 'app/features/dashboard/components/PanelEditor/getVisualizationOptions';\nimport { setOptionImmutably } from 'app/features/dashboard/components/PanelEditor/utils';\nexport function getTransformerOptionPane(props, supplier) {\n  const context = {\n    data: props.input,\n    options: props.options\n  };\n  const root = new OptionsPaneCategoryDescriptor({\n    id: 'root',\n    title: 'root'\n  });\n\n  const getOptionsPaneCategory = categoryNames => {\n    if (categoryNames !== null && categoryNames !== void 0 && categoryNames.length) {\n      const key = categoryNames[0];\n      let sub = root.categories.find(v => v.props.id === key);\n\n      if (!sub) {\n        sub = new OptionsPaneCategoryDescriptor({\n          id: key,\n          title: key\n        });\n        root.categories.push(sub);\n      }\n\n      return sub;\n    }\n\n    return root;\n  };\n\n  const access = {\n    getValue: path => lodashGet(props.options, path),\n    onChange: (path, value) => {\n      props.onChange(setOptionImmutably(props.options, path, value));\n    }\n  }; // Use the panel options loader\n\n  fillOptionsPaneItems(supplier, access, getOptionsPaneCategory, context);\n  return root;\n}\nexport function getDefaultOptions(supplier) {\n  const context = {\n    data: [],\n    options: {}\n  };\n  const results = {};\n  const builder = new PanelOptionsEditorBuilder();\n  supplier(builder, context);\n\n  for (const item of builder.getItems()) {\n    if (item.defaultValue != null) {\n      set(results, item.path, item.defaultValue);\n    }\n  }\n\n  return results;\n}","map":{"version":3,"names":["set","get","lodashGet","PanelOptionsEditorBuilder","OptionsPaneCategoryDescriptor","fillOptionsPaneItems","setOptionImmutably","getTransformerOptionPane","props","supplier","context","data","input","options","root","id","title","getOptionsPaneCategory","categoryNames","length","key","sub","categories","find","v","push","access","getValue","path","onChange","value","getDefaultOptions","results","builder","item","getItems","defaultValue"],"sources":["/home/soula/grafana/public/app/features/transformers/spatial/optionsHelper.tsx"],"sourcesContent":["import { set, get as lodashGet } from 'lodash';\n\nimport { StandardEditorContext, TransformerUIProps, PanelOptionsEditorBuilder } from '@grafana/data';\nimport { PanelOptionsSupplier } from '@grafana/data/src/panel/PanelPlugin';\nimport { NestedValueAccess } from '@grafana/data/src/utils/OptionsUIBuilders';\nimport { OptionsPaneCategoryDescriptor } from 'app/features/dashboard/components/PanelEditor/OptionsPaneCategoryDescriptor';\nimport { fillOptionsPaneItems } from 'app/features/dashboard/components/PanelEditor/getVisualizationOptions';\nimport { setOptionImmutably } from 'app/features/dashboard/components/PanelEditor/utils';\n\nexport function getTransformerOptionPane<T = any>(\n  props: TransformerUIProps<T>,\n  supplier: PanelOptionsSupplier<T>\n): OptionsPaneCategoryDescriptor {\n  const context: StandardEditorContext<unknown, unknown> = {\n    data: props.input,\n    options: props.options,\n  };\n\n  const root = new OptionsPaneCategoryDescriptor({ id: 'root', title: 'root' });\n  const getOptionsPaneCategory = (categoryNames?: string[]): OptionsPaneCategoryDescriptor => {\n    if (categoryNames?.length) {\n      const key = categoryNames[0];\n      let sub = root.categories.find((v) => v.props.id === key);\n      if (!sub) {\n        sub = new OptionsPaneCategoryDescriptor({ id: key, title: key });\n        root.categories.push(sub);\n      }\n      return sub;\n    }\n    return root;\n  };\n\n  const access: NestedValueAccess = {\n    getValue: (path: string) => lodashGet(props.options, path),\n    onChange: (path: string, value: any) => {\n      props.onChange(setOptionImmutably(props.options as any, path, value));\n    },\n  };\n\n  // Use the panel options loader\n  fillOptionsPaneItems(supplier, access, getOptionsPaneCategory, context);\n  return root;\n}\n\nexport function getDefaultOptions<T = any>(supplier: PanelOptionsSupplier<T>): T {\n  const context: StandardEditorContext<T, unknown> = {\n    data: [],\n    options: {} as T,\n  };\n\n  const results = {};\n  const builder = new PanelOptionsEditorBuilder<T>();\n  supplier(builder, context);\n  for (const item of builder.getItems()) {\n    if (item.defaultValue != null) {\n      set(results, item.path, item.defaultValue);\n    }\n  }\n  return results as T;\n}\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAG,IAAIC,SAArB,QAAsC,QAAtC;AAEA,SAAoDC,yBAApD,QAAqF,eAArF;AAGA,SAASC,6BAAT,QAA8C,6EAA9C;AACA,SAASC,oBAAT,QAAqC,uEAArC;AACA,SAASC,kBAAT,QAAmC,qDAAnC;AAEA,OAAO,SAASC,wBAAT,CACLC,KADK,EAELC,QAFK,EAG0B;EAC/B,MAAMC,OAAgD,GAAG;IACvDC,IAAI,EAAEH,KAAK,CAACI,KAD2C;IAEvDC,OAAO,EAAEL,KAAK,CAACK;EAFwC,CAAzD;EAKA,MAAMC,IAAI,GAAG,IAAIV,6BAAJ,CAAkC;IAAEW,EAAE,EAAE,MAAN;IAAcC,KAAK,EAAE;EAArB,CAAlC,CAAb;;EACA,MAAMC,sBAAsB,GAAIC,aAAD,IAA6D;IAC1F,IAAIA,aAAJ,aAAIA,aAAJ,eAAIA,aAAa,CAAEC,MAAnB,EAA2B;MACzB,MAAMC,GAAG,GAAGF,aAAa,CAAC,CAAD,CAAzB;MACA,IAAIG,GAAG,GAAGP,IAAI,CAACQ,UAAL,CAAgBC,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAAChB,KAAF,CAAQO,EAAR,KAAeK,GAA3C,CAAV;;MACA,IAAI,CAACC,GAAL,EAAU;QACRA,GAAG,GAAG,IAAIjB,6BAAJ,CAAkC;UAAEW,EAAE,EAAEK,GAAN;UAAWJ,KAAK,EAAEI;QAAlB,CAAlC,CAAN;QACAN,IAAI,CAACQ,UAAL,CAAgBG,IAAhB,CAAqBJ,GAArB;MACD;;MACD,OAAOA,GAAP;IACD;;IACD,OAAOP,IAAP;EACD,CAXD;;EAaA,MAAMY,MAAyB,GAAG;IAChCC,QAAQ,EAAGC,IAAD,IAAkB1B,SAAS,CAACM,KAAK,CAACK,OAAP,EAAgBe,IAAhB,CADL;IAEhCC,QAAQ,EAAE,CAACD,IAAD,EAAeE,KAAf,KAA8B;MACtCtB,KAAK,CAACqB,QAAN,CAAevB,kBAAkB,CAACE,KAAK,CAACK,OAAP,EAAuBe,IAAvB,EAA6BE,KAA7B,CAAjC;IACD;EAJ+B,CAAlC,CApB+B,CA2B/B;;EACAzB,oBAAoB,CAACI,QAAD,EAAWiB,MAAX,EAAmBT,sBAAnB,EAA2CP,OAA3C,CAApB;EACA,OAAOI,IAAP;AACD;AAED,OAAO,SAASiB,iBAAT,CAAoCtB,QAApC,EAA0E;EAC/E,MAAMC,OAA0C,GAAG;IACjDC,IAAI,EAAE,EAD2C;IAEjDE,OAAO,EAAE;EAFwC,CAAnD;EAKA,MAAMmB,OAAO,GAAG,EAAhB;EACA,MAAMC,OAAO,GAAG,IAAI9B,yBAAJ,EAAhB;EACAM,QAAQ,CAACwB,OAAD,EAAUvB,OAAV,CAAR;;EACA,KAAK,MAAMwB,IAAX,IAAmBD,OAAO,CAACE,QAAR,EAAnB,EAAuC;IACrC,IAAID,IAAI,CAACE,YAAL,IAAqB,IAAzB,EAA+B;MAC7BpC,GAAG,CAACgC,OAAD,EAAUE,IAAI,CAACN,IAAf,EAAqBM,IAAI,CAACE,YAA1B,CAAH;IACD;EACF;;EACD,OAAOJ,OAAP;AACD"},"metadata":{},"sourceType":"module"}