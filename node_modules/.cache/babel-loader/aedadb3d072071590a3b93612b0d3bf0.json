{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { CoreApp } from '@grafana/data';\nimport store from 'app/core/store';\nimport { LegendFormatMode } from '../types';\nimport { QueryEditorMode } from './shared/types';\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\nexport function changeEditorMode(query, editorMode, onChange) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange(Object.assign({}, query, {\n    editorMode\n  }));\n}\n\nfunction getDefaultEditorMode(expr) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value = store.get(queryEditorModeDefaultLocalStorageKey);\n\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n    case QueryEditorMode.Explain:\n      return value;\n\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\n\n\nexport function getQueryWithDefaults(query, app) {\n  let result = query;\n\n  if (!query.editorMode) {\n    result = Object.assign({}, query, {\n      editorMode: getDefaultEditorMode(query.expr)\n    });\n  }\n\n  if (query.expr == null) {\n    result = Object.assign({}, result, {\n      expr: '',\n      legendFormat: LegendFormatMode.Auto\n    });\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = Object.assign({}, result, {\n      range: true\n    }); // In explore we default to both instant & range\n\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  return result;\n}\nconst queryEditorRawQueryLocalStorageKey = 'PrometheusQueryEditorRawQueryDefault';\n\nfunction getRawQueryVisibility() {\n  const val = store.get(queryEditorRawQueryLocalStorageKey);\n  return val === undefined ? true : Boolean(parseInt(val, 10));\n}\n\nfunction setRawQueryVisibility(value) {\n  store.set(queryEditorRawQueryLocalStorageKey, value ? '1' : '0');\n}\n/**\n * Use and store value of raw query switch in local storage.\n * Needs to be a hook with local state to trigger rerenders.\n */\n\n\nexport function useRawQuery() {\n  const [rawQuery, setRawQuery] = useState(getRawQueryVisibility());\n  const setter = useCallback(value => {\n    setRawQueryVisibility(value);\n    setRawQuery(value);\n  }, []);\n  return [rawQuery, setter];\n}","map":{"version":3,"names":["useCallback","useState","CoreApp","store","LegendFormatMode","QueryEditorMode","queryEditorModeDefaultLocalStorageKey","changeEditorMode","query","editorMode","onChange","expr","set","getDefaultEditorMode","Code","value","get","Builder","Explain","getQueryWithDefaults","app","result","legendFormat","Auto","range","instant","Explore","queryEditorRawQueryLocalStorageKey","getRawQueryVisibility","val","undefined","Boolean","parseInt","setRawQueryVisibility","useRawQuery","rawQuery","setRawQuery","setter"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/state.ts"],"sourcesContent":["import { useCallback, useState } from 'react';\n\nimport { CoreApp } from '@grafana/data';\nimport store from 'app/core/store';\n\nimport { LegendFormatMode, PromQuery } from '../types';\n\nimport { QueryEditorMode } from './shared/types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\n\nexport function changeEditorMode(query: PromQuery, editorMode: QueryEditorMode, onChange: (query: PromQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nfunction getDefaultEditorMode(expr: string) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value = store.get(queryEditorModeDefaultLocalStorageKey) as QueryEditorMode;\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n    case QueryEditorMode.Explain:\n      return value;\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(query: PromQuery, app: CoreApp | undefined): PromQuery {\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr) };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '', legendFormat: LegendFormatMode.Auto };\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = { ...result, range: true };\n\n    // In explore we default to both instant & range\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  return result;\n}\n\nconst queryEditorRawQueryLocalStorageKey = 'PrometheusQueryEditorRawQueryDefault';\n\nfunction getRawQueryVisibility(): boolean {\n  const val = store.get(queryEditorRawQueryLocalStorageKey);\n  return val === undefined ? true : Boolean(parseInt(val, 10));\n}\n\nfunction setRawQueryVisibility(value: boolean) {\n  store.set(queryEditorRawQueryLocalStorageKey, value ? '1' : '0');\n}\n\n/**\n * Use and store value of raw query switch in local storage.\n * Needs to be a hook with local state to trigger rerenders.\n */\nexport function useRawQuery(): [boolean, (val: boolean) => void] {\n  const [rawQuery, setRawQuery] = useState(getRawQueryVisibility());\n  const setter = useCallback((value: boolean) => {\n    setRawQueryVisibility(value);\n    setRawQuery(value);\n  }, []);\n\n  return [rawQuery, setter];\n}\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,SAASC,gBAAT,QAA4C,UAA5C;AAEA,SAASC,eAAT,QAAgC,gBAAhC;AAEA,MAAMC,qCAAqC,GAAG,kCAA9C;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAA4CC,UAA5C,EAAyEC,QAAzE,EAA+G;EACpH;EACA,IAAIF,KAAK,CAACG,IAAN,KAAe,EAAnB,EAAuB;IACrBR,KAAK,CAACS,GAAN,CAAUN,qCAAV,EAAiDG,UAAjD;EACD;;EAEDC,QAAQ,mBAAMF,KAAN;IAAaC;EAAb,GAAR;AACD;;AAED,SAASI,oBAAT,CAA8BF,IAA9B,EAA4C;EAC1C;EACA,IAAIA,IAAI,IAAI,IAAR,IAAgBA,IAAI,KAAK,EAA7B,EAAiC;IAC/B,OAAON,eAAe,CAACS,IAAvB;EACD;;EAED,MAAMC,KAAK,GAAGZ,KAAK,CAACa,GAAN,CAAUV,qCAAV,CAAd;;EACA,QAAQS,KAAR;IACE,KAAKV,eAAe,CAACY,OAArB;IACA,KAAKZ,eAAe,CAACS,IAArB;IACA,KAAKT,eAAe,CAACa,OAArB;MACE,OAAOH,KAAP;;IACF;MACE,OAAOV,eAAe,CAACY,OAAvB;EANJ;AAQD;AAED;AACA;AACA;;;AACA,OAAO,SAASE,oBAAT,CAA8BX,KAA9B,EAAgDY,GAAhD,EAAqF;EAC1F,IAAIC,MAAM,GAAGb,KAAb;;EAEA,IAAI,CAACA,KAAK,CAACC,UAAX,EAAuB;IACrBY,MAAM,qBAAQb,KAAR;MAAeC,UAAU,EAAEI,oBAAoB,CAACL,KAAK,CAACG,IAAP;IAA/C,EAAN;EACD;;EAED,IAAIH,KAAK,CAACG,IAAN,IAAc,IAAlB,EAAwB;IACtBU,MAAM,qBAAQA,MAAR;MAAgBV,IAAI,EAAE,EAAtB;MAA0BW,YAAY,EAAElB,gBAAgB,CAACmB;IAAzD,EAAN;EACD;;EAED,IAAIf,KAAK,CAACgB,KAAN,IAAe,IAAf,IAAuBhB,KAAK,CAACiB,OAAN,IAAiB,IAA5C,EAAkD;IAChD;IACAJ,MAAM,qBAAQA,MAAR;MAAgBG,KAAK,EAAE;IAAvB,EAAN,CAFgD,CAIhD;;IACA,IAAIJ,GAAG,KAAKlB,OAAO,CAACwB,OAApB,EAA6B;MAC3BL,MAAM,CAACI,OAAP,GAAiB,IAAjB;IACD;EACF;;EAED,OAAOJ,MAAP;AACD;AAED,MAAMM,kCAAkC,GAAG,sCAA3C;;AAEA,SAASC,qBAAT,GAA0C;EACxC,MAAMC,GAAG,GAAG1B,KAAK,CAACa,GAAN,CAAUW,kCAAV,CAAZ;EACA,OAAOE,GAAG,KAAKC,SAAR,GAAoB,IAApB,GAA2BC,OAAO,CAACC,QAAQ,CAACH,GAAD,EAAM,EAAN,CAAT,CAAzC;AACD;;AAED,SAASI,qBAAT,CAA+BlB,KAA/B,EAA+C;EAC7CZ,KAAK,CAACS,GAAN,CAAUe,kCAAV,EAA8CZ,KAAK,GAAG,GAAH,GAAS,GAA5D;AACD;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAASmB,WAAT,GAA0D;EAC/D,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BnC,QAAQ,CAAC2B,qBAAqB,EAAtB,CAAxC;EACA,MAAMS,MAAM,GAAGrC,WAAW,CAAEe,KAAD,IAAoB;IAC7CkB,qBAAqB,CAAClB,KAAD,CAArB;IACAqB,WAAW,CAACrB,KAAD,CAAX;EACD,CAHyB,EAGvB,EAHuB,CAA1B;EAKA,OAAO,CAACoB,QAAD,EAAWE,MAAX,CAAP;AACD"},"metadata":{},"sourceType":"module"}