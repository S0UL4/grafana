{"ast":null,"code":"const _excluded = [\"children\", \"label\", \"tooltip\", \"labelWidth\", \"invalid\", \"loading\", \"disabled\", \"className\", \"htmlFor\", \"grow\", \"shrink\", \"error\", \"transparent\", \"interactive\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cx, css } from '@emotion/css';\nimport React from 'react';\nimport { useTheme2 } from '../../themes';\nimport { getChildId } from '../../utils/reactUtils';\nimport { FieldValidationMessage } from './FieldValidationMessage';\nimport { InlineLabel } from './InlineLabel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const InlineField = _ref => {\n  let {\n    children,\n    label,\n    tooltip,\n    labelWidth = 'auto',\n    invalid,\n    loading,\n    disabled,\n    className,\n    htmlFor,\n    grow,\n    shrink,\n    error,\n    transparent,\n    interactive\n  } = _ref,\n      htmlProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, grow, shrink);\n  const inputId = htmlFor !== null && htmlFor !== void 0 ? htmlFor : getChildId(children);\n  const labelElement = typeof label === 'string' ? /*#__PURE__*/_jsx(InlineLabel, {\n    interactive: interactive,\n    width: labelWidth,\n    tooltip: tooltip,\n    htmlFor: inputId,\n    transparent: transparent,\n    children: label\n  }) : label;\n  return /*#__PURE__*/_jsxs(\"div\", Object.assign({\n    className: cx(styles.container, className)\n  }, htmlProps, {\n    children: [labelElement, /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.childContainer,\n      children: [/*#__PURE__*/React.cloneElement(children, {\n        invalid,\n        disabled,\n        loading\n      }), invalid && error && /*#__PURE__*/_jsx(\"div\", {\n        className: cx(styles.fieldValidationWrapper),\n        children: /*#__PURE__*/_jsx(FieldValidationMessage, {\n          children: error\n        })\n      })]\n    })]\n  }));\n};\nInlineField.displayName = 'InlineField';\n\nconst getStyles = (theme, grow, shrink) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-start;\n      text-align: left;\n      position: relative;\n      flex: ${grow ? 1 : 0} ${shrink ? 1 : 0} auto;\n      margin: 0 ${theme.spacing(0.5)} ${theme.spacing(0.5)} 0;\n    `,\n    childContainer: css`\n      flex: ${grow ? 1 : 0} ${shrink ? 1 : 0} auto;\n    `,\n    fieldValidationWrapper: css`\n      margin-top: ${theme.spacing(0.5)};\n    `\n  };\n};","map":{"version":3,"names":["cx","css","React","useTheme2","getChildId","FieldValidationMessage","InlineLabel","InlineField","children","label","tooltip","labelWidth","invalid","loading","disabled","className","htmlFor","grow","shrink","error","transparent","interactive","htmlProps","theme","styles","getStyles","inputId","labelElement","container","childContainer","cloneElement","fieldValidationWrapper","displayName","spacing"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Forms/InlineField.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useTheme2 } from '../../themes';\nimport { getChildId } from '../../utils/reactUtils';\nimport { PopoverContent } from '../Tooltip';\n\nimport { FieldProps } from './Field';\nimport { FieldValidationMessage } from './FieldValidationMessage';\nimport { InlineLabel } from './InlineLabel';\n\nexport interface Props extends Omit<FieldProps, 'css' | 'horizontal' | 'description' | 'error'> {\n  /** Content for the label's tooltip */\n  tooltip?: PopoverContent;\n  /** Custom width for the label as a multiple of 8px */\n  labelWidth?: number | 'auto';\n  /** Make the field's child to fill the width of the row. Equivalent to setting `flex-grow:1` on the field */\n  grow?: boolean;\n  /** Make the field's child shrink with width of the row. Equivalent to setting `flex-shrink:1` on the field */\n  shrink?: boolean;\n  /** Make field's background transparent */\n  transparent?: boolean;\n  /** Error message to display */\n  error?: string | null;\n  htmlFor?: string;\n  /** Make tooltip interactive */\n  interactive?: boolean;\n}\n\nexport const InlineField: FC<Props> = ({\n  children,\n  label,\n  tooltip,\n  labelWidth = 'auto',\n  invalid,\n  loading,\n  disabled,\n  className,\n  htmlFor,\n  grow,\n  shrink,\n  error,\n  transparent,\n  interactive,\n  ...htmlProps\n}) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme, grow, shrink);\n  const inputId = htmlFor ?? getChildId(children);\n\n  const labelElement =\n    typeof label === 'string' ? (\n      <InlineLabel\n        interactive={interactive}\n        width={labelWidth}\n        tooltip={tooltip}\n        htmlFor={inputId}\n        transparent={transparent}\n      >\n        {label}\n      </InlineLabel>\n    ) : (\n      label\n    );\n\n  return (\n    <div className={cx(styles.container, className)} {...htmlProps}>\n      {labelElement}\n      <div className={styles.childContainer}>\n        {React.cloneElement(children, { invalid, disabled, loading })}\n        {invalid && error && (\n          <div className={cx(styles.fieldValidationWrapper)}>\n            <FieldValidationMessage>{error}</FieldValidationMessage>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nInlineField.displayName = 'InlineField';\n\nconst getStyles = (theme: GrafanaTheme2, grow?: boolean, shrink?: boolean) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-start;\n      text-align: left;\n      position: relative;\n      flex: ${grow ? 1 : 0} ${shrink ? 1 : 0} auto;\n      margin: 0 ${theme.spacing(0.5)} ${theme.spacing(0.5)} 0;\n    `,\n    childContainer: css`\n      flex: ${grow ? 1 : 0} ${shrink ? 1 : 0} auto;\n    `,\n    fieldValidationWrapper: css`\n      margin-top: ${theme.spacing(0.5)};\n    `,\n  };\n};\n"],"mappings":";;;;AAAA,SAASA,EAAT,EAAaC,GAAb,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAA0B,OAA1B;AAIA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAIA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,WAAT,QAA4B,eAA5B;;;AAoBA,OAAO,MAAMC,WAAsB,GAAG,QAgBhC;EAAA,IAhBiC;IACrCC,QADqC;IAErCC,KAFqC;IAGrCC,OAHqC;IAIrCC,UAAU,GAAG,MAJwB;IAKrCC,OALqC;IAMrCC,OANqC;IAOrCC,QAPqC;IAQrCC,SARqC;IASrCC,OATqC;IAUrCC,IAVqC;IAWrCC,MAXqC;IAYrCC,KAZqC;IAarCC,WAbqC;IAcrCC;EAdqC,CAgBjC;EAAA,IADDC,SACC;;EACJ,MAAMC,KAAK,GAAGpB,SAAS,EAAvB;EACA,MAAMqB,MAAM,GAAGC,SAAS,CAACF,KAAD,EAAQN,IAAR,EAAcC,MAAd,CAAxB;EACA,MAAMQ,OAAO,GAAGV,OAAH,aAAGA,OAAH,cAAGA,OAAH,GAAcZ,UAAU,CAACI,QAAD,CAArC;EAEA,MAAMmB,YAAY,GAChB,OAAOlB,KAAP,KAAiB,QAAjB,gBACE,KAAC,WAAD;IACE,WAAW,EAAEY,WADf;IAEE,KAAK,EAAEV,UAFT;IAGE,OAAO,EAAED,OAHX;IAIE,OAAO,EAAEgB,OAJX;IAKE,WAAW,EAAEN,WALf;IAAA,UAOGX;EAPH,EADF,GAWEA,KAZJ;EAeA,oBACE;IAAK,SAAS,EAAET,EAAE,CAACwB,MAAM,CAACI,SAAR,EAAmBb,SAAnB;EAAlB,GAAqDO,SAArD;IAAA,WACGK,YADH,eAEE;MAAK,SAAS,EAAEH,MAAM,CAACK,cAAvB;MAAA,wBACG3B,KAAK,CAAC4B,YAAN,CAAmBtB,QAAnB,EAA6B;QAAEI,OAAF;QAAWE,QAAX;QAAqBD;MAArB,CAA7B,CADH,EAEGD,OAAO,IAAIO,KAAX,iBACC;QAAK,SAAS,EAAEnB,EAAE,CAACwB,MAAM,CAACO,sBAAR,CAAlB;QAAA,uBACE,KAAC,sBAAD;UAAA,UAAyBZ;QAAzB;MADF,EAHJ;IAAA,EAFF;EAAA,GADF;AAaD,CAjDM;AAmDPZ,WAAW,CAACyB,WAAZ,GAA0B,aAA1B;;AAEA,MAAMP,SAAS,GAAG,CAACF,KAAD,EAAuBN,IAAvB,EAAuCC,MAAvC,KAA4D;EAC5E,OAAO;IACLU,SAAS,EAAE3B,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA,cAAcgB,IAAI,GAAG,CAAH,GAAO,CAAE,IAAGC,MAAM,GAAG,CAAH,GAAO,CAAE;AAC7C,kBAAkBK,KAAK,CAACU,OAAN,CAAc,GAAd,CAAmB,IAAGV,KAAK,CAACU,OAAN,CAAc,GAAd,CAAmB;AAC3D,KATS;IAULJ,cAAc,EAAE5B,GAAI;AACxB,cAAcgB,IAAI,GAAG,CAAH,GAAO,CAAE,IAAGC,MAAM,GAAG,CAAH,GAAO,CAAE;AAC7C,KAZS;IAaLa,sBAAsB,EAAE9B,GAAI;AAChC,oBAAoBsB,KAAK,CAACU,OAAN,CAAc,GAAd,CAAmB;AACvC;EAfS,CAAP;AAiBD,CAlBD"},"metadata":{},"sourceType":"module"}