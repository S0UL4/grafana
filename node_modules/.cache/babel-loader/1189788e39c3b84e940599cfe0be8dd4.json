{"ast":null,"code":"import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\nimport { isSystemOverride as isSystemOverrideGuard } from '@grafana/data';\nimport { fieldMatchersUI, useStyles2, ValuePicker } from '@grafana/ui';\nimport { getDataLinksVariableSuggestions } from 'app/features/panel/panellinks/link_srv';\nimport { DynamicConfigValueEditor } from './DynamicConfigValueEditor';\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { OverrideCategoryTitle } from './OverrideCategoryTitle';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getFieldOverrideCategories(props, searchQuery) {\n  var _props$data$series, _props$data;\n\n  const categories = [];\n  const currentFieldConfig = props.panel.fieldConfig;\n  const registry = props.plugin.fieldConfigRegistry;\n  const data = (_props$data$series = (_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.series) !== null && _props$data$series !== void 0 ? _props$data$series : [];\n\n  if (registry.isEmpty()) {\n    return [];\n  }\n\n  const onOverrideChange = (index, override) => {\n    let overrides = cloneDeep(currentFieldConfig.overrides);\n    overrides[index] = override;\n    props.onFieldConfigsChange(Object.assign({}, currentFieldConfig, {\n      overrides\n    }));\n  };\n\n  const onOverrideRemove = overrideIndex => {\n    let overrides = cloneDeep(currentFieldConfig.overrides);\n    overrides.splice(overrideIndex, 1);\n    props.onFieldConfigsChange(Object.assign({}, currentFieldConfig, {\n      overrides\n    }));\n  };\n\n  const onOverrideAdd = value => {\n    props.onFieldConfigsChange(Object.assign({}, currentFieldConfig, {\n      overrides: [...currentFieldConfig.overrides, {\n        matcher: {\n          id: value.value\n        },\n        properties: []\n      }]\n    }));\n  };\n\n  const context = {\n    data,\n    getSuggestions: scope => getDataLinksVariableSuggestions(data, scope),\n    isOverride: true\n  };\n  /**\n   * Main loop through all override rules\n   */\n\n  for (let idx = 0; idx < currentFieldConfig.overrides.length; idx++) {\n    const override = currentFieldConfig.overrides[idx];\n    const overrideName = `Override ${idx + 1}`;\n    const matcherUi = fieldMatchersUI.get(override.matcher.id);\n    const configPropertiesOptions = getOverrideProperties(registry);\n    const isSystemOverride = isSystemOverrideGuard(override); // A way to force open new override categories\n\n    const forceOpen = override.properties.length === 0 ? 1 : 0;\n    const category = new OptionsPaneCategoryDescriptor({\n      title: overrideName,\n      id: overrideName,\n      forceOpen,\n      renderTitle: function renderOverrideTitle(isExpanded) {\n        return /*#__PURE__*/_jsx(OverrideCategoryTitle, {\n          override: override,\n          isExpanded: isExpanded,\n          registry: registry,\n          overrideName: overrideName,\n          matcherUi: matcherUi,\n          onOverrideRemove: () => onOverrideRemove(idx)\n        });\n      }\n    });\n\n    const onMatcherConfigChange = options => {\n      override.matcher.options = options;\n      onOverrideChange(idx, override);\n    };\n\n    const onDynamicConfigValueAdd = (o, value) => {\n      const registryItem = registry.get(value.value);\n      const propertyConfig = {\n        id: registryItem.id,\n        value: registryItem.defaultValue\n      };\n\n      if (override.properties) {\n        o.properties.push(propertyConfig);\n      } else {\n        o.properties = [propertyConfig];\n      }\n\n      onOverrideChange(idx, o);\n    };\n    /**\n     * Add override matcher UI element\n     */\n\n\n    category.addItem(new OptionsPaneItemDescriptor({\n      title: matcherUi.name,\n      render: function renderMatcherUI() {\n        var _props$data$series2, _props$data2;\n\n        return /*#__PURE__*/_jsx(matcherUi.component, {\n          id: `${matcherUi.matcher.id}-${idx}`,\n          matcher: matcherUi.matcher,\n          data: (_props$data$series2 = (_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.series) !== null && _props$data$series2 !== void 0 ? _props$data$series2 : [],\n          options: override.matcher.options,\n          onChange: onMatcherConfigChange\n        });\n      }\n    }));\n    /**\n     * Loop through all override properties\n     */\n\n    for (let propIdx = 0; propIdx < override.properties.length; propIdx++) {\n      const property = override.properties[propIdx];\n      const registryItemForProperty = registry.getIfExists(property.id);\n\n      if (!registryItemForProperty) {\n        continue;\n      }\n\n      const onPropertyChange = value => {\n        override.properties[propIdx].value = value;\n        onOverrideChange(idx, override);\n      };\n\n      const onPropertyRemove = () => {\n        override.properties.splice(propIdx, 1);\n        onOverrideChange(idx, override);\n      };\n      /**\n       * Add override property item\n       */\n\n\n      category.addItem(new OptionsPaneItemDescriptor({\n        title: registryItemForProperty.name,\n        skipField: true,\n        render: function renderPropertyEditor() {\n          return /*#__PURE__*/_jsx(DynamicConfigValueEditor, {\n            isSystemOverride: isSystemOverride,\n            onChange: onPropertyChange,\n            onRemove: onPropertyRemove,\n            property: property,\n            registry: registry,\n            context: context,\n            searchQuery: searchQuery\n          }, `${property.id}/${propIdx}`);\n        }\n      }));\n    }\n    /**\n     * Add button that adds new overrides\n     */\n\n\n    if (!isSystemOverride && override.matcher.options) {\n      category.addItem(new OptionsPaneItemDescriptor({\n        title: '----------',\n        skipField: true,\n        render: function renderAddPropertyButton() {\n          return /*#__PURE__*/_jsx(ValuePicker, {\n            label: \"Add override property\",\n            variant: \"secondary\",\n            isFullWidth: true,\n            icon: \"plus\",\n            menuPlacement: \"auto\",\n            options: configPropertiesOptions,\n            onChange: v => onDynamicConfigValueAdd(override, v)\n          }, \"Add override property\");\n        }\n      }));\n    }\n\n    categories.push(category);\n  }\n\n  categories.push(new OptionsPaneCategoryDescriptor({\n    title: 'add button',\n    id: 'add button',\n    customRender: function renderAddButton() {\n      return /*#__PURE__*/_jsx(AddOverrideButtonContainer, {\n        children: /*#__PURE__*/_jsx(ValuePicker, {\n          icon: \"plus\",\n          label: \"Add field override\",\n          variant: \"secondary\",\n          menuPlacement: \"auto\",\n          isFullWidth: true,\n          size: \"md\",\n          options: fieldMatchersUI.list().filter(o => !o.excludeFromPicker).map(i => ({\n            label: i.name,\n            value: i.id,\n            description: i.description\n          })),\n          onChange: value => onOverrideAdd(value)\n        })\n      }, \"Add override\");\n    }\n  }));\n  return categories;\n}\n\nfunction getOverrideProperties(registry) {\n  return registry.list().filter(o => !o.hideFromOverrides).map(item => {\n    let label = item.name;\n\n    if (item.category) {\n      label = [...item.category, item.name].join(' > ');\n    }\n\n    return {\n      label,\n      value: item.id,\n      description: item.description\n    };\n  });\n}\n\nfunction AddOverrideButtonContainer({\n  children\n}) {\n  const styles = useStyles2(getBorderTopStyles);\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles,\n    children: children\n  });\n}\n\nfunction getBorderTopStyles(theme) {\n  return css({\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    padding: `${theme.spacing(2)}`,\n    display: 'flex'\n  });\n}","map":{"version":3,"names":["css","cloneDeep","React","isSystemOverride","isSystemOverrideGuard","fieldMatchersUI","useStyles2","ValuePicker","getDataLinksVariableSuggestions","DynamicConfigValueEditor","OptionsPaneCategoryDescriptor","OptionsPaneItemDescriptor","OverrideCategoryTitle","getFieldOverrideCategories","props","searchQuery","categories","currentFieldConfig","panel","fieldConfig","registry","plugin","fieldConfigRegistry","data","series","isEmpty","onOverrideChange","index","override","overrides","onFieldConfigsChange","onOverrideRemove","overrideIndex","splice","onOverrideAdd","value","matcher","id","properties","context","getSuggestions","scope","isOverride","idx","length","overrideName","matcherUi","get","configPropertiesOptions","getOverrideProperties","forceOpen","category","title","renderTitle","renderOverrideTitle","isExpanded","onMatcherConfigChange","options","onDynamicConfigValueAdd","o","registryItem","propertyConfig","defaultValue","push","addItem","name","render","renderMatcherUI","propIdx","property","registryItemForProperty","getIfExists","onPropertyChange","onPropertyRemove","skipField","renderPropertyEditor","renderAddPropertyButton","v","customRender","renderAddButton","list","filter","excludeFromPicker","map","i","label","description","hideFromOverrides","item","join","AddOverrideButtonContainer","children","styles","getBorderTopStyles","theme","borderTop","colors","border","weak","padding","spacing","display"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/getFieldOverrideElements.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\n\nimport {\n  FieldConfigOptionsRegistry,\n  SelectableValue,\n  isSystemOverride as isSystemOverrideGuard,\n  VariableSuggestionsScope,\n  DynamicConfigValue,\n  ConfigOverrideRule,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { fieldMatchersUI, useStyles2, ValuePicker } from '@grafana/ui';\nimport { getDataLinksVariableSuggestions } from 'app/features/panel/panellinks/link_srv';\n\nimport { DynamicConfigValueEditor } from './DynamicConfigValueEditor';\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { OverrideCategoryTitle } from './OverrideCategoryTitle';\nimport { OptionPaneRenderProps } from './types';\n\nexport function getFieldOverrideCategories(\n  props: OptionPaneRenderProps,\n  searchQuery: string\n): OptionsPaneCategoryDescriptor[] {\n  const categories: OptionsPaneCategoryDescriptor[] = [];\n  const currentFieldConfig = props.panel.fieldConfig;\n  const registry = props.plugin.fieldConfigRegistry;\n  const data = props.data?.series ?? [];\n\n  if (registry.isEmpty()) {\n    return [];\n  }\n\n  const onOverrideChange = (index: number, override: any) => {\n    let overrides = cloneDeep(currentFieldConfig.overrides);\n    overrides[index] = override;\n    props.onFieldConfigsChange({ ...currentFieldConfig, overrides });\n  };\n\n  const onOverrideRemove = (overrideIndex: number) => {\n    let overrides = cloneDeep(currentFieldConfig.overrides);\n    overrides.splice(overrideIndex, 1);\n    props.onFieldConfigsChange({ ...currentFieldConfig, overrides });\n  };\n\n  const onOverrideAdd = (value: SelectableValue<string>) => {\n    props.onFieldConfigsChange({\n      ...currentFieldConfig,\n      overrides: [\n        ...currentFieldConfig.overrides,\n        {\n          matcher: {\n            id: value.value!,\n          },\n          properties: [],\n        },\n      ],\n    });\n  };\n\n  const context = {\n    data,\n    getSuggestions: (scope?: VariableSuggestionsScope) => getDataLinksVariableSuggestions(data, scope),\n    isOverride: true,\n  };\n\n  /**\n   * Main loop through all override rules\n   */\n  for (let idx = 0; idx < currentFieldConfig.overrides.length; idx++) {\n    const override = currentFieldConfig.overrides[idx];\n    const overrideName = `Override ${idx + 1}`;\n    const matcherUi = fieldMatchersUI.get(override.matcher.id);\n    const configPropertiesOptions = getOverrideProperties(registry);\n    const isSystemOverride = isSystemOverrideGuard(override);\n    // A way to force open new override categories\n    const forceOpen = override.properties.length === 0 ? 1 : 0;\n\n    const category = new OptionsPaneCategoryDescriptor({\n      title: overrideName,\n      id: overrideName,\n      forceOpen,\n      renderTitle: function renderOverrideTitle(isExpanded: boolean) {\n        return (\n          <OverrideCategoryTitle\n            override={override}\n            isExpanded={isExpanded}\n            registry={registry}\n            overrideName={overrideName}\n            matcherUi={matcherUi}\n            onOverrideRemove={() => onOverrideRemove(idx)}\n          />\n        );\n      },\n    });\n\n    const onMatcherConfigChange = (options: any) => {\n      override.matcher.options = options;\n      onOverrideChange(idx, override);\n    };\n\n    const onDynamicConfigValueAdd = (o: ConfigOverrideRule, value: SelectableValue<string>) => {\n      const registryItem = registry.get(value.value!);\n      const propertyConfig: DynamicConfigValue = {\n        id: registryItem.id,\n        value: registryItem.defaultValue,\n      };\n\n      if (override.properties) {\n        o.properties.push(propertyConfig);\n      } else {\n        o.properties = [propertyConfig];\n      }\n\n      onOverrideChange(idx, o);\n    };\n\n    /**\n     * Add override matcher UI element\n     */\n    category.addItem(\n      new OptionsPaneItemDescriptor({\n        title: matcherUi.name,\n        render: function renderMatcherUI() {\n          return (\n            <matcherUi.component\n              id={`${matcherUi.matcher.id}-${idx}`}\n              matcher={matcherUi.matcher}\n              data={props.data?.series ?? []}\n              options={override.matcher.options}\n              onChange={onMatcherConfigChange}\n            />\n          );\n        },\n      })\n    );\n\n    /**\n     * Loop through all override properties\n     */\n    for (let propIdx = 0; propIdx < override.properties.length; propIdx++) {\n      const property = override.properties[propIdx];\n      const registryItemForProperty = registry.getIfExists(property.id);\n\n      if (!registryItemForProperty) {\n        continue;\n      }\n\n      const onPropertyChange = (value: any) => {\n        override.properties[propIdx].value = value;\n        onOverrideChange(idx, override);\n      };\n\n      const onPropertyRemove = () => {\n        override.properties.splice(propIdx, 1);\n        onOverrideChange(idx, override);\n      };\n\n      /**\n       * Add override property item\n       */\n      category.addItem(\n        new OptionsPaneItemDescriptor({\n          title: registryItemForProperty.name,\n          skipField: true,\n          render: function renderPropertyEditor() {\n            return (\n              <DynamicConfigValueEditor\n                key={`${property.id}/${propIdx}`}\n                isSystemOverride={isSystemOverride}\n                onChange={onPropertyChange}\n                onRemove={onPropertyRemove}\n                property={property}\n                registry={registry}\n                context={context}\n                searchQuery={searchQuery}\n              />\n            );\n          },\n        })\n      );\n    }\n\n    /**\n     * Add button that adds new overrides\n     */\n    if (!isSystemOverride && override.matcher.options) {\n      category.addItem(\n        new OptionsPaneItemDescriptor({\n          title: '----------',\n          skipField: true,\n          render: function renderAddPropertyButton() {\n            return (\n              <ValuePicker\n                key=\"Add override property\"\n                label=\"Add override property\"\n                variant=\"secondary\"\n                isFullWidth={true}\n                icon=\"plus\"\n                menuPlacement=\"auto\"\n                options={configPropertiesOptions}\n                onChange={(v) => onDynamicConfigValueAdd(override, v)}\n              />\n            );\n          },\n        })\n      );\n    }\n\n    categories.push(category);\n  }\n\n  categories.push(\n    new OptionsPaneCategoryDescriptor({\n      title: 'add button',\n      id: 'add button',\n      customRender: function renderAddButton() {\n        return (\n          <AddOverrideButtonContainer key=\"Add override\">\n            <ValuePicker\n              icon=\"plus\"\n              label=\"Add field override\"\n              variant=\"secondary\"\n              menuPlacement=\"auto\"\n              isFullWidth={true}\n              size=\"md\"\n              options={fieldMatchersUI\n                .list()\n                .filter((o) => !o.excludeFromPicker)\n                .map<SelectableValue<string>>((i) => ({ label: i.name, value: i.id, description: i.description }))}\n              onChange={(value) => onOverrideAdd(value)}\n            />\n          </AddOverrideButtonContainer>\n        );\n      },\n    })\n  );\n\n  return categories;\n}\n\nfunction getOverrideProperties(registry: FieldConfigOptionsRegistry) {\n  return registry\n    .list()\n    .filter((o) => !o.hideFromOverrides)\n    .map((item) => {\n      let label = item.name;\n      if (item.category) {\n        label = [...item.category, item.name].join(' > ');\n      }\n      return {\n        label,\n        value: item.id,\n        description: item.description,\n      };\n    });\n}\n\nfunction AddOverrideButtonContainer({ children }: { children: React.ReactNode }) {\n  const styles = useStyles2(getBorderTopStyles);\n  return <div className={styles}>{children}</div>;\n}\n\nfunction getBorderTopStyles(theme: GrafanaTheme2) {\n  return css({\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    padding: `${theme.spacing(2)}`,\n    display: 'flex',\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}