{"ast":null,"code":"var _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { DataTransformerID, standardTransformers } from '@grafana/data';\nimport { HorizontalGroup, FilterPill } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class FilterByRefIdTransformerEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onFieldToggle\", fieldName => {\n      const {\n        selected\n      } = this.state;\n\n      if (selected.indexOf(fieldName) > -1) {\n        this.onChange(selected.filter(s => s !== fieldName));\n      } else {\n        this.onChange([...selected, fieldName]);\n      }\n    });\n\n    _defineProperty(this, \"onChange\", selected => {\n      this.setState({\n        selected\n      });\n      this.props.onChange(Object.assign({}, this.props.options, {\n        include: selected.join('|')\n      }));\n    });\n\n    this.state = {\n      include: props.options.include || '',\n      options: [],\n      selected: []\n    };\n  }\n\n  componentDidMount() {\n    this.initOptions();\n  }\n\n  componentDidUpdate(oldProps) {\n    if (this.props.input !== oldProps.input) {\n      this.initOptions();\n    }\n  }\n\n  initOptions() {\n    const {\n      input,\n      options\n    } = this.props;\n    const configuredOptions = options.include ? options.include.split('|') : [];\n    const allNames = [];\n    const byName = {};\n\n    for (const frame of input) {\n      if (frame.refId) {\n        let v = byName[frame.refId];\n\n        if (!v) {\n          v = byName[frame.refId] = {\n            refId: frame.refId,\n            count: 0\n          };\n          allNames.push(v);\n        }\n\n        v.count++;\n      }\n    }\n\n    if (configuredOptions.length) {\n      const options = [];\n      const selected = [];\n\n      for (const v of allNames) {\n        if (configuredOptions.includes(v.refId)) {\n          selected.push(v);\n        }\n\n        options.push(v);\n      }\n\n      this.setState({\n        options,\n        selected: selected.map(s => s.refId)\n      });\n    } else {\n      this.setState({\n        options: allNames,\n        selected: []\n      });\n    }\n  }\n\n  render() {\n    const {\n      options,\n      selected\n    } = this.state;\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-inline\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form gf-form--grow\",\n        children: [_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form-label width-8\",\n          children: \"Series refId\"\n        })), /*#__PURE__*/_jsx(HorizontalGroup, {\n          spacing: \"xs\",\n          align: \"flex-start\",\n          wrap: true,\n          children: options.map((o, i) => {\n            const label = `${o.refId}${o.count > 1 ? ' (' + o.count + ')' : ''}`;\n            const isSelected = selected.indexOf(o.refId) > -1;\n            return /*#__PURE__*/_jsx(FilterPill, {\n              onClick: () => {\n                this.onFieldToggle(o.refId);\n              },\n              label: label,\n              selected: isSelected\n            }, `${o.refId}/${i}`);\n          })\n        })]\n      })\n    });\n  }\n\n}\nexport const filterFramesByRefIdTransformRegistryItem = {\n  id: DataTransformerID.filterByRefId,\n  editor: FilterByRefIdTransformerEditor,\n  transformation: standardTransformers.filterFramesByRefIdTransformer,\n  name: 'Filter data by query',\n  description: 'Filter data by query. This is useful if you are sharing the results from a different panel that has many queries and you want to only visualize a subset of that in this panel.'\n};","map":{"version":3,"names":["React","DataTransformerID","standardTransformers","HorizontalGroup","FilterPill","FilterByRefIdTransformerEditor","PureComponent","constructor","props","fieldName","selected","state","indexOf","onChange","filter","s","setState","options","include","join","componentDidMount","initOptions","componentDidUpdate","oldProps","input","configuredOptions","split","allNames","byName","frame","refId","v","count","push","length","includes","map","render","o","i","label","isSelected","onFieldToggle","filterFramesByRefIdTransformRegistryItem","id","filterByRefId","editor","transformation","filterFramesByRefIdTransformer","name","description"],"sources":["/home/soula/grafana/public/app/features/transformers/editors/FilterByRefIdTransformerEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport {\n  DataTransformerID,\n  KeyValue,\n  standardTransformers,\n  TransformerRegistryItem,\n  TransformerUIProps,\n} from '@grafana/data';\nimport { FilterFramesByRefIdTransformerOptions } from '@grafana/data/src/transformations/transformers/filterByRefId';\nimport { HorizontalGroup, FilterPill } from '@grafana/ui';\n\ninterface FilterByRefIdTransformerEditorProps extends TransformerUIProps<FilterFramesByRefIdTransformerOptions> {}\n\ninterface FilterByRefIdTransformerEditorState {\n  include: string;\n  options: RefIdInfo[];\n  selected: string[];\n}\n\ninterface RefIdInfo {\n  refId: string;\n  count: number;\n}\nexport class FilterByRefIdTransformerEditor extends React.PureComponent<\n  FilterByRefIdTransformerEditorProps,\n  FilterByRefIdTransformerEditorState\n> {\n  constructor(props: FilterByRefIdTransformerEditorProps) {\n    super(props);\n    this.state = {\n      include: props.options.include || '',\n      options: [],\n      selected: [],\n    };\n  }\n\n  componentDidMount() {\n    this.initOptions();\n  }\n\n  componentDidUpdate(oldProps: FilterByRefIdTransformerEditorProps) {\n    if (this.props.input !== oldProps.input) {\n      this.initOptions();\n    }\n  }\n\n  private initOptions() {\n    const { input, options } = this.props;\n    const configuredOptions = options.include ? options.include.split('|') : [];\n\n    const allNames: RefIdInfo[] = [];\n    const byName: KeyValue<RefIdInfo> = {};\n    for (const frame of input) {\n      if (frame.refId) {\n        let v = byName[frame.refId];\n        if (!v) {\n          v = byName[frame.refId] = {\n            refId: frame.refId,\n            count: 0,\n          };\n          allNames.push(v);\n        }\n        v.count++;\n      }\n    }\n\n    if (configuredOptions.length) {\n      const options: RefIdInfo[] = [];\n      const selected: RefIdInfo[] = [];\n      for (const v of allNames) {\n        if (configuredOptions.includes(v.refId)) {\n          selected.push(v);\n        }\n        options.push(v);\n      }\n\n      this.setState({\n        options,\n        selected: selected.map((s) => s.refId),\n      });\n    } else {\n      this.setState({ options: allNames, selected: [] });\n    }\n  }\n\n  onFieldToggle = (fieldName: string) => {\n    const { selected } = this.state;\n    if (selected.indexOf(fieldName) > -1) {\n      this.onChange(selected.filter((s) => s !== fieldName));\n    } else {\n      this.onChange([...selected, fieldName]);\n    }\n  };\n\n  onChange = (selected: string[]) => {\n    this.setState({ selected });\n    this.props.onChange({\n      ...this.props.options,\n      include: selected.join('|'),\n    });\n  };\n\n  render() {\n    const { options, selected } = this.state;\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form gf-form--grow\">\n          <div className=\"gf-form-label width-8\">Series refId</div>\n          <HorizontalGroup spacing=\"xs\" align=\"flex-start\" wrap>\n            {options.map((o, i) => {\n              const label = `${o.refId}${o.count > 1 ? ' (' + o.count + ')' : ''}`;\n              const isSelected = selected.indexOf(o.refId) > -1;\n              return (\n                <FilterPill\n                  key={`${o.refId}/${i}`}\n                  onClick={() => {\n                    this.onFieldToggle(o.refId);\n                  }}\n                  label={label}\n                  selected={isSelected}\n                />\n              );\n            })}\n          </HorizontalGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const filterFramesByRefIdTransformRegistryItem: TransformerRegistryItem<FilterFramesByRefIdTransformerOptions> =\n  {\n    id: DataTransformerID.filterByRefId,\n    editor: FilterByRefIdTransformerEditor,\n    transformation: standardTransformers.filterFramesByRefIdTransformer,\n    name: 'Filter data by query',\n    description:\n      'Filter data by query. This is useful if you are sharing the results from a different panel that has many queries and you want to only visualize a subset of that in this panel.',\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}