{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { clone, filter, find, findIndex, indexOf, map } from 'lodash';\nimport { PanelEvents } from '@grafana/data';\nimport appEvents from 'app/core/app_events';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { ShowConfirmModalEvent } from '../../../types/events';\nimport { MysqlMetaQuery } from './meta_query';\nimport MySQLQueryModel from './mysql_query_model';\nimport sqlPart from './sql_part';\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\nexport class MysqlQueryCtrl extends QueryCtrl {\n  /** @ngInject */\n  constructor($scope, $injector, templateSrv, uiSegmentSrv) {\n    super($scope, $injector);\n\n    _defineProperty(this, \"formats\", void 0);\n\n    _defineProperty(this, \"lastQueryError\", void 0);\n\n    _defineProperty(this, \"showHelp\", void 0);\n\n    _defineProperty(this, \"queryModel\", void 0);\n\n    _defineProperty(this, \"metaBuilder\", void 0);\n\n    _defineProperty(this, \"lastQueryMeta\", void 0);\n\n    _defineProperty(this, \"tableSegment\", void 0);\n\n    _defineProperty(this, \"whereAdd\", void 0);\n\n    _defineProperty(this, \"timeColumnSegment\", void 0);\n\n    _defineProperty(this, \"metricColumnSegment\", void 0);\n\n    _defineProperty(this, \"selectMenu\", []);\n\n    _defineProperty(this, \"selectParts\", []);\n\n    _defineProperty(this, \"groupParts\", []);\n\n    _defineProperty(this, \"whereParts\", []);\n\n    _defineProperty(this, \"groupAdd\", void 0);\n\n    this.templateSrv = templateSrv;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.target = this.target;\n    this.queryModel = new MySQLQueryModel(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new MysqlMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n    this.formats = [{\n      text: 'Time series',\n      value: 'time_series'\n    }, {\n      text: 'Table',\n      value: 'table'\n    }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then(result => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{\n              type: 'column',\n              params: [result[2].text]\n            }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({\n        value: 'select table',\n        fake: true\n      });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = map(this.target.select, parts => {\n      return map(parts, sqlPart.create).filter(n => n);\n    });\n    this.whereParts = map(this.target.where, sqlPart.create).filter(n => n);\n    this.groupParts = map(this.target.group, sqlPart.create).filter(n => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectParts, selectParts => {\n      return map(selectParts, part => {\n        return {\n          type: part.def.type,\n          datatype: part.datatype,\n          params: part.params\n        };\n      });\n    });\n    this.target.where = map(this.whereParts, part => {\n      return {\n        type: part.def.type,\n        datatype: part.datatype,\n        name: part.name,\n        params: part.params\n      };\n    });\n    this.target.group = map(this.groupParts, part => {\n      return {\n        type: part.def.type,\n        datatype: part.datatype,\n        params: part.params\n      };\n    });\n  }\n\n  buildSelectMenu() {\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [{\n        text: 'Average',\n        value: 'avg'\n      }, {\n        text: 'Count',\n        value: 'count'\n      }, {\n        text: 'Maximum',\n        value: 'max'\n      }, {\n        text: 'Minimum',\n        value: 'min'\n      }, {\n        text: 'Sum',\n        value: 'sum'\n      }, {\n        text: 'Standard deviation',\n        value: 'stddev'\n      }, {\n        text: 'Variance',\n        value: 'variance'\n      }]\n    };\n    this.selectMenu.push(aggregates);\n    this.selectMenu.push({\n      text: 'Alias',\n      value: 'alias'\n    });\n    this.selectMenu.push({\n      text: 'Column',\n      value: 'column'\n    });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.publish(new ShowConfirmModalEvent({\n        title: 'Warning',\n        text2: 'Switching to query builder may overwrite your raw SQL.',\n        icon: 'exclamation-triangle',\n        yesText: 'Switch',\n        onConfirm: () => {\n          // This could be called from React, so wrap in $evalAsync.\n          // Will then either run as part of the current digest cycle or trigger a new one.\n          this.$scope.$evalAsync(() => {\n            this.target.rawQuery = !this.target.rawQuery;\n          });\n        }\n      }));\n    } else {\n      // This could be called from React, so wrap in $evalAsync.\n      // Will then either run as part of the current digest cycle or trigger a new one.\n      this.$scope.$evalAsync(() => {\n        this.target.rawQuery = !this.target.rawQuery;\n      });\n    }\n  }\n\n  resetPlusButton(button) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource.metricFindQuery(this.metaBuilder.buildTableQuery()).then(this.transformToSegments({})).catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then(result => {\n      // check if time column is still valid\n      if (result.length > 0 && !find(result, r => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then(result => {\n      if (result.length > 0) {\n        this.target.select = [[{\n          type: 'column',\n          params: [result[0].text]\n        }]];\n        this.updateProjection();\n      }\n    });\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then(this.transformToSegments({})).catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn)).then(result => {\n      if (result.length === 1) {\n        if (this.target.timeColumnType !== result[0].text) {\n          this.target.timeColumnType = result[0].text;\n        }\n\n        let partModel;\n\n        if (this.queryModel.hasUnixEpochTimecolumn()) {\n          partModel = sqlPart.create({\n            type: 'macro',\n            name: '$__unixEpochFilter',\n            params: []\n          });\n        } else {\n          partModel = sqlPart.create({\n            type: 'macro',\n            name: '$__timeFilter',\n            params: []\n          });\n        }\n\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n      }\n\n      this.updatePersistedParts();\n\n      if (refresh !== false) {\n        this.updateRawSqlAndRefresh();\n      }\n    });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('metric')).then(this.transformToSegments({\n      addNone: true\n    })).catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList) {\n    var _dataList$;\n\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = (_dataList$ = dataList[0]) === null || _dataList$ === void 0 ? void 0 : _dataList$.meta;\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config) {\n    return results => {\n      const segments = map(results, segment => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n\n          if (config.templateQuoter && variable.multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(this.uiSegmentSrv.newSegment({\n            type: 'template',\n            value: value,\n            expandable: true\n          }));\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({\n          type: 'template',\n          value: 'none',\n          expandable: true\n        }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts) {\n    return findIndex(selectParts, p => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts) {\n    return findIndex(selectParts, p => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts, item, subItem) {\n    let partType = item.value;\n\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n\n    let partModel = sqlPart.create({\n      type: partType\n    });\n\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = map(selectParts, part => {\n          return sqlPart.create({\n            type: part.def.type,\n            params: clone(part.params)\n          });\n        });\n        this.selectParts.push(parts);\n        break;\n\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n\n        const aggIndex = this.findAggregateIndex(selectParts);\n\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n\n        if (!find(selectParts, p => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n\n        break;\n\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n\n        if (!find(selectParts, p => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n\n        break;\n\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({\n        type: 'alias',\n        params: [selectParts[0].params[0].replace(/\"/g, '')]\n      });\n\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts, part) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts, part, evt) {\n    switch (evt.name) {\n      case 'get-param-options':\n        {\n          switch (part.def.type) {\n            // case 'aggregate':\n            //   return this.datasource\n            //     .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n            //     .then(this.transformToSegments({}))\n            //     .catch(this.handleQueryError.bind(this));\n            case 'column':\n              return this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then(this.transformToSegments({})).catch(this.handleQueryError.bind(this));\n          }\n        }\n\n      case 'part-param-changed':\n        {\n          this.updatePersistedParts();\n          this.updateRawSqlAndRefresh();\n          break;\n        }\n\n      case 'action':\n        {\n          this.removeSelectPart(selectParts, part);\n          this.updateRawSqlAndRefresh();\n          break;\n        }\n\n      case 'get-part-actions':\n        {\n          return Promise.resolve([{\n            text: 'Remove',\n            value: 'remove-part'\n          }]);\n        }\n    }\n  }\n\n  handleGroupPartEvent(part, index, evt) {\n    switch (evt.name) {\n      case 'get-param-options':\n        {\n          return this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery()).then(this.transformToSegments({})).catch(this.handleQueryError.bind(this));\n        }\n\n      case 'part-param-changed':\n        {\n          this.updatePersistedParts();\n          this.updateRawSqlAndRefresh();\n          break;\n        }\n\n      case 'action':\n        {\n          this.removeGroup(part, index);\n          this.updateRawSqlAndRefresh();\n          break;\n        }\n\n      case 'get-part-actions':\n        {\n          return Promise.resolve([{\n            text: 'Remove',\n            value: 'remove-part'\n          }]);\n        }\n    }\n  }\n\n  addGroup(partType, value) {\n    let params = [value];\n\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n\n    const partModel = sqlPart.create({\n      type: partType,\n      params: params\n    });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    } // add aggregates when adding group by\n\n\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some(part => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({\n          type: 'aggregate',\n          params: ['avg']\n        });\n        selectParts.splice(1, 0, aggregate);\n\n        if (!selectParts.some(part => part.def.type === 'alias')) {\n          const alias = sqlPart.create({\n            type: 'alias',\n            params: [selectParts[0].part.params[0]]\n          });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part, index) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = map(this.selectParts, s => {\n        return filter(s, part => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts, part, evt, index) {\n    switch (evt.name) {\n      case 'get-param-options':\n        {\n          switch (evt.param.name) {\n            case 'left':\n              return this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery()).then(this.transformToSegments({})).catch(this.handleQueryError.bind(this));\n\n            case 'right':\n              if (['int', 'bigint', 'double', 'datetime'].indexOf(part.datatype) > -1) {\n                // don't do value lookups for numerical fields\n                return Promise.resolve([]);\n              } else {\n                return this.datasource.metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0])).then(this.transformToSegments({\n                  addTemplateVars: true,\n                  templateQuoter: v => {\n                    return this.queryModel.quoteLiteral(v);\n                  }\n                })).catch(this.handleQueryError.bind(this));\n              }\n\n            case 'op':\n              return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n\n            default:\n              return Promise.resolve([]);\n          }\n        }\n\n      case 'part-param-changed':\n        {\n          this.updatePersistedParts();\n          this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then(d => {\n            if (d.length === 1) {\n              part.datatype = d[0].text;\n            }\n          });\n          this.updateRawSqlAndRefresh();\n          break;\n        }\n\n      case 'action':\n        {\n          // remove element\n          whereParts.splice(index, 1);\n          this.updatePersistedParts();\n          this.updateRawSqlAndRefresh();\n          break;\n        }\n\n      case 'get-part-actions':\n        {\n          return Promise.resolve([{\n            text: 'Remove',\n            value: 'remove-part'\n          }]);\n        }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({\n        type: 'macro',\n        value: '$__unixEpochFilter'\n      }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({\n        type: 'macro',\n        value: '$__timeFilter'\n      }));\n    }\n\n    options.push(this.uiSegmentSrv.newSegment({\n      type: 'expression',\n      value: 'Expression'\n    }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part, index) {\n    switch (this.whereAdd.type) {\n      case 'macro':\n        {\n          const partModel = sqlPart.create({\n            type: 'macro',\n            name: this.whereAdd.value,\n            params: []\n          });\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n\n          break;\n        }\n\n      default:\n        {\n          this.whereParts.push(sqlPart.create({\n            type: 'expression',\n            params: ['value', '=', 'value']\n          }));\n        }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('group')).then(tags => {\n      const options = [];\n\n      if (!this.queryModel.hasTimeGroup()) {\n        options.push(this.uiSegmentSrv.newSegment({\n          type: 'time',\n          value: 'time($__interval,none)'\n        }));\n      }\n\n      for (const tag of tags) {\n        options.push(this.uiSegmentSrv.newSegment({\n          type: 'column',\n          value: tag.text\n        }));\n      }\n\n      return options;\n    }).catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default:\n        {\n          this.addGroup(this.groupAdd.type, this.groupAdd.value);\n        }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err) {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n\n}\nMysqlQueryCtrl.$inject = [\"$scope\", \"$injector\", \"templateSrv\", \"uiSegmentSrv\"];\n\n_defineProperty(MysqlQueryCtrl, \"templateUrl\", 'partials/query.editor.html');","map":{"version":3,"names":["clone","filter","find","findIndex","indexOf","map","PanelEvents","appEvents","QueryCtrl","ShowConfirmModalEvent","MysqlMetaQuery","MySQLQueryModel","sqlPart","defaultQuery","MysqlQueryCtrl","constructor","$scope","$injector","templateSrv","uiSegmentSrv","target","queryModel","panel","scopedVars","metaBuilder","updateProjection","formats","text","value","rawSql","panelCtrl","type","format","rawQuery","datasource","metricFindQuery","findMetricTable","then","result","length","table","segment","newSegment","tableSegment","html","timeColumn","timeColumnSegment","timeColumnType","select","params","updateRawSqlAndRefresh","fake","metricColumnSegment","metricColumn","buildSelectMenu","whereAdd","newPlusButton","groupAdd","events","on","dataReceived","onDataReceived","bind","dataError","onDataError","buildQuery","refresh","selectParts","parts","create","n","whereParts","where","groupParts","group","updatePersistedParts","part","def","datatype","name","aggregates","submenu","selectMenu","push","toggleEditorMode","publish","title","text2","icon","yesText","onConfirm","$evalAsync","resetPlusButton","button","plusButton","getTableSegments","buildTableQuery","transformToSegments","catch","handleQueryError","tableChanged","task1","buildColumnQuery","r","timeColumnChanged","task2","Promise","all","getTimeColumnSegments","buildDatatypeQuery","partModel","hasUnixEpochTimecolumn","splice","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryError","undefined","lastQueryMeta","meta","err","data","results","queryRes","refId","error","config","segments","expandable","addTemplateVars","variable","getVariables","templateQuoter","multi","unshift","findAggregateIndex","p","findWindowIndex","addSelectPart","item","subItem","partType","addAlias","addGroup","aggIndex","windowIndex","replace","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","resolve","handleGroupPartEvent","index","removeGroup","some","aggregate","alias","s","handleWherePartEvent","param","buildValueQuery","v","quoteLiteral","newOperators","getOperators","d","getWhereOptions","options","addWhereAction","getGroupOptions","tags","hasTimeGroup","tag","addGroupAction","message"],"sources":["/home/soula/grafana/public/app/plugins/datasource/mysql/query_ctrl.ts"],"sourcesContent":["import { auto } from 'angular';\nimport { clone, filter, find, findIndex, indexOf, map } from 'lodash';\n\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlPart } from 'app/angular/components/sql_part/sql_part';\nimport appEvents from 'app/core/app_events';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nimport { ShowConfirmModalEvent } from '../../../types/events';\n\nimport { MysqlMetaQuery } from './meta_query';\nimport MySQLQueryModel from './mysql_query_model';\nimport sqlPart from './sql_part';\n\nconst defaultQuery = `SELECT\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\n  <value column> as value,\n  <series name column> as metric\nFROM <table name>\nWHERE $__timeFilter(time_column)\nORDER BY <time_column> ASC\n`;\n\nexport class MysqlQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  lastQueryError?: string;\n  showHelp!: boolean;\n\n  queryModel: MySQLQueryModel;\n  metaBuilder: MysqlMetaQuery;\n  lastQueryMeta?: QueryResultMeta;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[] = [];\n  selectParts: SqlPart[][] = [];\n  groupParts: SqlPart[] = [];\n  whereParts: SqlPart[] = [];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n\n    this.target = this.target;\n    this.queryModel = new MySQLQueryModel(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new MysqlMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  updateProjection() {\n    this.selectParts = map(this.target.select, (parts: any) => {\n      return map(parts, sqlPart.create).filter((n) => n);\n    });\n    this.whereParts = map(this.target.where, sqlPart.create).filter((n) => n);\n    this.groupParts = map(this.target.group, sqlPart.create).filter((n) => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectParts, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.target.where = map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    this.selectMenu.push(aggregates);\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Warning',\n          text2: 'Switching to query builder may overwrite your raw SQL.',\n          icon: 'exclamation-triangle',\n          yesText: 'Switch',\n          onConfirm: () => {\n            // This could be called from React, so wrap in $evalAsync.\n            // Will then either run as part of the current digest cycle or trigger a new one.\n            this.$scope.$evalAsync(() => {\n              this.target.rawQuery = !this.target.rawQuery;\n            });\n          },\n        })\n      );\n    } else {\n      // This could be called from React, so wrap in $evalAsync.\n      // Will then either run as part of the current digest cycle or trigger a new one.\n      this.$scope.$evalAsync(() => {\n        this.target.rawQuery = !this.target.rawQuery;\n      });\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: any) {\n    return (results: any) => {\n      const segments = map(results, (segment) => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && (variable as unknown as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          // case 'aggregate':\n          //   return this.datasource\n          //     .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n          //     .then(this.transformToSegments({}))\n          //     .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some((part) => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some((part) => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = map(this.selectParts, (s: any) => {\n        return filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int', 'bigint', 'double', 'datetime'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: number) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    switch (this.groupAdd.value) {\n      default: {\n        this.addGroup(this.groupAdd.type, this.groupAdd.value);\n      }\n    }\n\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}