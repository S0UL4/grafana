{"ast":null,"code":"// Libraries\nimport React, { memo } from 'react'; // Types\n\nimport { LokiOptionFields } from './LokiOptionFields';\nimport { LokiQueryField } from './LokiQueryField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const LokiExploreQueryEditor = /*#__PURE__*/memo(props => {\n  var _query$maxLines;\n\n  const {\n    query,\n    data,\n    datasource,\n    history,\n    onChange,\n    onRunQuery,\n    range\n  } = props;\n  return /*#__PURE__*/_jsx(LokiQueryField, {\n    datasource: datasource,\n    query: query,\n    onChange: onChange,\n    onBlur: () => {},\n    onRunQuery: onRunQuery,\n    history: history,\n    data: data,\n    range: range,\n    \"data-testid\": testIds.editor,\n    ExtraFieldElement: /*#__PURE__*/_jsx(LokiOptionFields, {\n      lineLimitValue: (query === null || query === void 0 ? void 0 : (_query$maxLines = query.maxLines) === null || _query$maxLines === void 0 ? void 0 : _query$maxLines.toString()) || '',\n      resolution: query.resolution || 1,\n      query: query,\n      onRunQuery: onRunQuery,\n      onChange: onChange\n    })\n  });\n});\nLokiExploreQueryEditor.displayName = 'LokiExploreQueryEditor';\nexport const testIds = {\n  editor: 'loki-editor-explore'\n};","map":{"version":3,"names":["React","memo","LokiOptionFields","LokiQueryField","LokiExploreQueryEditor","props","query","data","datasource","history","onChange","onRunQuery","range","testIds","editor","maxLines","toString","resolution","displayName"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/components/LokiExploreQueryEditor.tsx"],"sourcesContent":["// Libraries\nimport React, { memo } from 'react';\n\n// Types\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { LokiDatasource } from '../datasource';\nimport { LokiQuery, LokiOptions } from '../types';\n\nimport { LokiOptionFields } from './LokiOptionFields';\nimport { LokiQueryField } from './LokiQueryField';\n\ntype Props = QueryEditorProps<LokiDatasource, LokiQuery, LokiOptions>;\n\nexport const LokiExploreQueryEditor = memo((props: Props) => {\n  const { query, data, datasource, history, onChange, onRunQuery, range } = props;\n\n  return (\n    <LokiQueryField\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onBlur={() => {}}\n      onRunQuery={onRunQuery}\n      history={history}\n      data={data}\n      range={range}\n      data-testid={testIds.editor}\n      ExtraFieldElement={\n        <LokiOptionFields\n          lineLimitValue={query?.maxLines?.toString() || ''}\n          resolution={query.resolution || 1}\n          query={query}\n          onRunQuery={onRunQuery}\n          onChange={onChange}\n        />\n      }\n    />\n  );\n});\n\nLokiExploreQueryEditor.displayName = 'LokiExploreQueryEditor';\n\nexport const testIds = {\n  editor: 'loki-editor-explore',\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B,C,CAEA;;AAMA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;;AAIA,OAAO,MAAMC,sBAAsB,gBAAGH,IAAI,CAAEI,KAAD,IAAkB;EAAA;;EAC3D,MAAM;IAAEC,KAAF;IAASC,IAAT;IAAeC,UAAf;IAA2BC,OAA3B;IAAoCC,QAApC;IAA8CC,UAA9C;IAA0DC;EAA1D,IAAoEP,KAA1E;EAEA,oBACE,KAAC,cAAD;IACE,UAAU,EAAEG,UADd;IAEE,KAAK,EAAEF,KAFT;IAGE,QAAQ,EAAEI,QAHZ;IAIE,MAAM,EAAE,MAAM,CAAE,CAJlB;IAKE,UAAU,EAAEC,UALd;IAME,OAAO,EAAEF,OANX;IAOE,IAAI,EAAEF,IAPR;IAQE,KAAK,EAAEK,KART;IASE,eAAaC,OAAO,CAACC,MATvB;IAUE,iBAAiB,eACf,KAAC,gBAAD;MACE,cAAc,EAAE,CAAAR,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAES,QAAP,oEAAiBC,QAAjB,OAA+B,EADjD;MAEE,UAAU,EAAEV,KAAK,CAACW,UAAN,IAAoB,CAFlC;MAGE,KAAK,EAAEX,KAHT;MAIE,UAAU,EAAEK,UAJd;MAKE,QAAQ,EAAED;IALZ;EAXJ,EADF;AAsBD,CAzByC,CAAnC;AA2BPN,sBAAsB,CAACc,WAAvB,GAAqC,wBAArC;AAEA,OAAO,MAAML,OAAO,GAAG;EACrBC,MAAM,EAAE;AADa,CAAhB"},"metadata":{},"sourceType":"module"}