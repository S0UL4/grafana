{"ast":null,"code":"import memoizeOne from 'memoize-one';\nimport { config } from '@grafana/runtime';\nexport const defaultValues = {\n  id: -1,\n  name: '',\n  type: {\n    value: 'email',\n    label: 'Email'\n  },\n  sendReminder: false,\n  disableResolveMessage: false,\n  frequency: '15m',\n  settings: {\n    uploadImage: config.rendererAvailable,\n    autoResolve: true,\n    httpMethod: 'POST',\n    severity: 'critical'\n  },\n  secureSettings: {},\n  secureFields: {},\n  isDefault: false\n};\nexport const mapChannelsToSelectableValue = memoizeOne((notificationChannels, includeDescription) => {\n  return notificationChannels.map(channel => {\n    if (includeDescription) {\n      return {\n        value: channel.value,\n        label: channel.label,\n        description: channel.description\n      };\n    }\n\n    return {\n      value: channel.value,\n      label: channel.label\n    };\n  });\n});\nexport const transformSubmitData = formData => {\n  /*\n    Some settings can be options in a select, in order to not save a SelectableValue<T>\n    we need to use check if it is a SelectableValue and use its value.\n  */\n  const settings = Object.fromEntries(Object.entries(formData.settings).map(([key, value]) => {\n    return [key, value && value.hasOwnProperty('value') ? value.value : value];\n  }));\n  return Object.assign({}, defaultValues, formData, {\n    frequency: formData.frequency === '' ? defaultValues.frequency : formData.frequency,\n    type: formData.type.value,\n    settings: Object.assign({}, defaultValues.settings, settings),\n    secureSettings: Object.assign({}, formData.secureSettings)\n  });\n};\nexport const transformTestData = formData => {\n  var _formData$frequency;\n\n  return {\n    name: formData.name,\n    type: formData.type.value,\n    frequency: (_formData$frequency = formData.frequency) !== null && _formData$frequency !== void 0 ? _formData$frequency : defaultValues.frequency,\n    settings: Object.assign({}, Object.assign(defaultValues.settings, formData.settings)),\n    secureSettings: Object.assign({}, formData.secureSettings)\n  };\n};","map":{"version":3,"names":["memoizeOne","config","defaultValues","id","name","type","value","label","sendReminder","disableResolveMessage","frequency","settings","uploadImage","rendererAvailable","autoResolve","httpMethod","severity","secureSettings","secureFields","isDefault","mapChannelsToSelectableValue","notificationChannels","includeDescription","map","channel","description","transformSubmitData","formData","Object","fromEntries","entries","key","hasOwnProperty","transformTestData","assign"],"sources":["/home/soula/grafana/public/app/features/alerting/utils/notificationChannels.ts"],"sourcesContent":["import memoizeOne from 'memoize-one';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { NotificationChannelDTO, NotificationChannelType } from 'app/types';\n\nexport const defaultValues: NotificationChannelDTO = {\n  id: -1,\n  name: '',\n  type: { value: 'email', label: 'Email' },\n  sendReminder: false,\n  disableResolveMessage: false,\n  frequency: '15m',\n  settings: {\n    uploadImage: config.rendererAvailable,\n    autoResolve: true,\n    httpMethod: 'POST',\n    severity: 'critical',\n  },\n  secureSettings: {},\n  secureFields: {},\n  isDefault: false,\n};\n\nexport const mapChannelsToSelectableValue = memoizeOne(\n  (notificationChannels: NotificationChannelType[], includeDescription: boolean): Array<SelectableValue<string>> => {\n    return notificationChannels.map((channel) => {\n      if (includeDescription) {\n        return {\n          value: channel.value,\n          label: channel.label,\n          description: channel.description,\n        };\n      }\n      return {\n        value: channel.value,\n        label: channel.label,\n      };\n    });\n  }\n);\n\nexport const transformSubmitData = (formData: NotificationChannelDTO) => {\n  /*\n    Some settings can be options in a select, in order to not save a SelectableValue<T>\n    we need to use check if it is a SelectableValue and use its value.\n  */\n  const settings = Object.fromEntries(\n    Object.entries(formData.settings).map(([key, value]) => {\n      return [key, value && value.hasOwnProperty('value') ? value.value : value];\n    })\n  );\n\n  return {\n    ...defaultValues,\n    ...formData,\n    frequency: formData.frequency === '' ? defaultValues.frequency : formData.frequency,\n    type: formData.type.value,\n    settings: { ...defaultValues.settings, ...settings },\n    secureSettings: { ...formData.secureSettings },\n  };\n};\n\nexport const transformTestData = (formData: NotificationChannelDTO) => {\n  return {\n    name: formData.name,\n    type: formData.type.value,\n    frequency: formData.frequency ?? defaultValues.frequency,\n    settings: { ...Object.assign(defaultValues.settings, formData.settings) },\n    secureSettings: { ...formData.secureSettings },\n  };\n};\n"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,aAAvB;AAGA,SAASC,MAAT,QAAuB,kBAAvB;AAGA,OAAO,MAAMC,aAAqC,GAAG;EACnDC,EAAE,EAAE,CAAC,CAD8C;EAEnDC,IAAI,EAAE,EAF6C;EAGnDC,IAAI,EAAE;IAAEC,KAAK,EAAE,OAAT;IAAkBC,KAAK,EAAE;EAAzB,CAH6C;EAInDC,YAAY,EAAE,KAJqC;EAKnDC,qBAAqB,EAAE,KAL4B;EAMnDC,SAAS,EAAE,KANwC;EAOnDC,QAAQ,EAAE;IACRC,WAAW,EAAEX,MAAM,CAACY,iBADZ;IAERC,WAAW,EAAE,IAFL;IAGRC,UAAU,EAAE,MAHJ;IAIRC,QAAQ,EAAE;EAJF,CAPyC;EAanDC,cAAc,EAAE,EAbmC;EAcnDC,YAAY,EAAE,EAdqC;EAenDC,SAAS,EAAE;AAfwC,CAA9C;AAkBP,OAAO,MAAMC,4BAA4B,GAAGpB,UAAU,CACpD,CAACqB,oBAAD,EAAkDC,kBAAlD,KAAkH;EAChH,OAAOD,oBAAoB,CAACE,GAArB,CAA0BC,OAAD,IAAa;IAC3C,IAAIF,kBAAJ,EAAwB;MACtB,OAAO;QACLhB,KAAK,EAAEkB,OAAO,CAAClB,KADV;QAELC,KAAK,EAAEiB,OAAO,CAACjB,KAFV;QAGLkB,WAAW,EAAED,OAAO,CAACC;MAHhB,CAAP;IAKD;;IACD,OAAO;MACLnB,KAAK,EAAEkB,OAAO,CAAClB,KADV;MAELC,KAAK,EAAEiB,OAAO,CAACjB;IAFV,CAAP;EAID,CAZM,CAAP;AAaD,CAfmD,CAA/C;AAkBP,OAAO,MAAMmB,mBAAmB,GAAIC,QAAD,IAAsC;EACvE;AACF;AACA;AACA;EACE,MAAMhB,QAAQ,GAAGiB,MAAM,CAACC,WAAP,CACfD,MAAM,CAACE,OAAP,CAAeH,QAAQ,CAAChB,QAAxB,EAAkCY,GAAlC,CAAsC,CAAC,CAACQ,GAAD,EAAMzB,KAAN,CAAD,KAAkB;IACtD,OAAO,CAACyB,GAAD,EAAMzB,KAAK,IAAIA,KAAK,CAAC0B,cAAN,CAAqB,OAArB,CAAT,GAAyC1B,KAAK,CAACA,KAA/C,GAAuDA,KAA7D,CAAP;EACD,CAFD,CADe,CAAjB;EAMA,yBACKJ,aADL,EAEKyB,QAFL;IAGEjB,SAAS,EAAEiB,QAAQ,CAACjB,SAAT,KAAuB,EAAvB,GAA4BR,aAAa,CAACQ,SAA1C,GAAsDiB,QAAQ,CAACjB,SAH5E;IAIEL,IAAI,EAAEsB,QAAQ,CAACtB,IAAT,CAAcC,KAJtB;IAKEK,QAAQ,oBAAOT,aAAa,CAACS,QAArB,EAAkCA,QAAlC,CALV;IAMEM,cAAc,oBAAOU,QAAQ,CAACV,cAAhB;EANhB;AAQD,CAnBM;AAqBP,OAAO,MAAMgB,iBAAiB,GAAIN,QAAD,IAAsC;EAAA;;EACrE,OAAO;IACLvB,IAAI,EAAEuB,QAAQ,CAACvB,IADV;IAELC,IAAI,EAAEsB,QAAQ,CAACtB,IAAT,CAAcC,KAFf;IAGLI,SAAS,yBAAEiB,QAAQ,CAACjB,SAAX,qEAAwBR,aAAa,CAACQ,SAH1C;IAILC,QAAQ,oBAAOiB,MAAM,CAACM,MAAP,CAAchC,aAAa,CAACS,QAA5B,EAAsCgB,QAAQ,CAAChB,QAA/C,CAAP,CAJH;IAKLM,cAAc,oBAAOU,QAAQ,CAACV,cAAhB;EALT,CAAP;AAOD,CARM"},"metadata":{},"sourceType":"module"}