{"ast":null,"code":"var _LoadingPlaceholder, _p, _Alert;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, CustomScrollbar, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { NewRuleFromPanelButton } from './components/panel-alerts-tab/NewRuleFromPanelButton';\nimport { RulesTable } from './components/rules/RulesTable';\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\nimport { getRulesPermissions } from './utils/access-control';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const PanelAlertTabContent = ({\n  dashboard,\n  panel\n}) => {\n  const styles = useStyles2(getStyles);\n  const {\n    errors,\n    loading,\n    rules\n  } = usePanelCombinedRules({\n    dashboard,\n    panel,\n    poll: true\n  });\n  const permissions = getRulesPermissions('grafana');\n  const canCreateRules = contextSrv.hasPermission(permissions.create);\n  const alert = errors.length ? /*#__PURE__*/_jsx(Alert, {\n    title: \"Errors loading rules\",\n    severity: \"error\",\n    children: errors.map((error, index) => /*#__PURE__*/_jsxs(\"div\", {\n      children: [\"Failed to load Grafana rules state: \", error.message || 'Unknown error.']\n    }, index))\n  }) : null;\n\n  if (loading && !rules.length) {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.innerWrapper,\n      children: [alert, _LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n        text: \"Loading rules...\"\n      }))]\n    });\n  }\n\n  if (rules.length) {\n    return /*#__PURE__*/_jsx(CustomScrollbar, {\n      autoHeightMin: \"100%\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.innerWrapper,\n        children: [alert, /*#__PURE__*/_jsx(RulesTable, {\n          rules: rules\n        }), !!dashboard.meta.canSave && canCreateRules && /*#__PURE__*/_jsx(NewRuleFromPanelButton, {\n          className: styles.newButton,\n          panel: panel,\n          dashboard: dashboard\n        })]\n      })\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    \"aria-label\": selectors.components.PanelAlertTabContent.content,\n    className: styles.noRulesWrapper,\n    children: [alert, !!dashboard.uid && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n        children: \"There are no alert rules linked to this panel.\"\n      })), !!dashboard.meta.canSave && canCreateRules && /*#__PURE__*/_jsx(NewRuleFromPanelButton, {\n        panel: panel,\n        dashboard: dashboard\n      })]\n    }), !dashboard.uid && !!dashboard.meta.canSave && (_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n      severity: \"info\",\n      title: \"Dashboard not saved\",\n      children: \"Dashboard must be saved before alerts can be added.\"\n    })))]\n  });\n};\n\nconst getStyles = theme => ({\n  newButton: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n  innerWrapper: css`\n    padding: ${theme.spacing(2)};\n  `,\n  noRulesWrapper: css`\n    margin: ${theme.spacing(2)};\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(3)};\n  `\n});","map":{"version":3,"names":["css","React","selectors","Alert","CustomScrollbar","LoadingPlaceholder","useStyles2","contextSrv","NewRuleFromPanelButton","RulesTable","usePanelCombinedRules","getRulesPermissions","PanelAlertTabContent","dashboard","panel","styles","getStyles","errors","loading","rules","poll","permissions","canCreateRules","hasPermission","create","alert","length","map","error","index","message","innerWrapper","meta","canSave","newButton","components","content","noRulesWrapper","uid","theme","spacing","colors","background","secondary"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/PanelAlertTabContent.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, CustomScrollbar, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { NewRuleFromPanelButton } from './components/panel-alerts-tab/NewRuleFromPanelButton';\nimport { RulesTable } from './components/rules/RulesTable';\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\nimport { getRulesPermissions } from './utils/access-control';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport const PanelAlertTabContent: FC<Props> = ({ dashboard, panel }) => {\n  const styles = useStyles2(getStyles);\n  const { errors, loading, rules } = usePanelCombinedRules({\n    dashboard,\n    panel,\n    poll: true,\n  });\n  const permissions = getRulesPermissions('grafana');\n  const canCreateRules = contextSrv.hasPermission(permissions.create);\n\n  const alert = errors.length ? (\n    <Alert title=\"Errors loading rules\" severity=\"error\">\n      {errors.map((error, index) => (\n        <div key={index}>Failed to load Grafana rules state: {error.message || 'Unknown error.'}</div>\n      ))}\n    </Alert>\n  ) : null;\n\n  if (loading && !rules.length) {\n    return (\n      <div className={styles.innerWrapper}>\n        {alert}\n        <LoadingPlaceholder text=\"Loading rules...\" />\n      </div>\n    );\n  }\n\n  if (rules.length) {\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\">\n        <div className={styles.innerWrapper}>\n          {alert}\n          <RulesTable rules={rules} />\n          {!!dashboard.meta.canSave && canCreateRules && (\n            <NewRuleFromPanelButton className={styles.newButton} panel={panel} dashboard={dashboard} />\n          )}\n        </div>\n      </CustomScrollbar>\n    );\n  }\n\n  return (\n    <div aria-label={selectors.components.PanelAlertTabContent.content} className={styles.noRulesWrapper}>\n      {alert}\n      {!!dashboard.uid && (\n        <>\n          <p>There are no alert rules linked to this panel.</p>\n          {!!dashboard.meta.canSave && canCreateRules && <NewRuleFromPanelButton panel={panel} dashboard={dashboard} />}\n        </>\n      )}\n      {!dashboard.uid && !!dashboard.meta.canSave && (\n        <Alert severity=\"info\" title=\"Dashboard not saved\">\n          Dashboard must be saved before alerts can be added.\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  newButton: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n  innerWrapper: css`\n    padding: ${theme.spacing(2)};\n  `,\n  noRulesWrapper: css`\n    margin: ${theme.spacing(2)};\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(3)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}