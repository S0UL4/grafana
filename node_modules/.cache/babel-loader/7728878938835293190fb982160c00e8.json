{"ast":null,"code":"var _h;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function NodeGraphSettings({\n  options,\n  onOptionsChange\n}) {\n  var _options$jsonData$nod;\n\n  const styles = useStyles(getStyles);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.container,\n    children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n      className: \"page-heading\",\n      children: \"Node Graph\"\n    })), /*#__PURE__*/_jsx(InlineFieldRow, {\n      className: styles.row,\n      children: /*#__PURE__*/_jsx(InlineField, {\n        tooltip: \"Enables the Node Graph visualization in the trace viewer.\",\n        label: \"Enable Node Graph\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(InlineSwitch, {\n          id: \"enableNodeGraph\",\n          value: (_options$jsonData$nod = options.jsonData.nodeGraph) === null || _options$jsonData$nod === void 0 ? void 0 : _options$jsonData$nod.enabled,\n          onChange: event => updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'nodeGraph', Object.assign({}, options.jsonData.nodeGraph, {\n            enabled: event.currentTarget.checked\n          }))\n        })\n      })\n    })]\n  });\n}\n\nconst getStyles = theme => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `\n});","map":{"version":3,"names":["css","React","updateDatasourcePluginJsonDataOption","InlineField","InlineFieldRow","InlineSwitch","useStyles","NodeGraphSettings","options","onOptionsChange","styles","getStyles","container","row","jsonData","nodeGraph","enabled","event","currentTarget","checked","theme"],"sources":["/home/soula/grafana/public/app/core/components/NodeGraphSettings.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Node Graph</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Enables the Node Graph visualization in the trace viewer.\"\n          label=\"Enable Node Graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAIEC,oCAJF,QAKO,eALP;AAMA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,YAAtC,EAAoDC,SAApD,QAAqE,aAArE;;;AAYA,OAAO,SAASC,iBAAT,CAA2B;EAAEC,OAAF;EAAWC;AAAX,CAA3B,EAAgE;EAAA;;EACrE,MAAMC,MAAM,GAAGJ,SAAS,CAACK,SAAD,CAAxB;EAEA,oBACE;IAAK,SAAS,EAAED,MAAM,CAACE,SAAvB;IAAA,oCACE;MAAI,SAAS,EAAC,cAAd;MAAA;IAAA,EADF,gBAEE,KAAC,cAAD;MAAgB,SAAS,EAAEF,MAAM,CAACG,GAAlC;MAAA,uBACE,KAAC,WAAD;QACE,OAAO,EAAC,2DADV;QAEE,KAAK,EAAC,mBAFR;QAGE,UAAU,EAAE,EAHd;QAAA,uBAKE,KAAC,YAAD;UACE,EAAE,EAAC,iBADL;UAEE,KAAK,2BAAEL,OAAO,CAACM,QAAR,CAAiBC,SAAnB,0DAAE,sBAA4BC,OAFrC;UAGE,QAAQ,EAAGC,KAAD,IACRf,oCAAoC,CAAC;YAAEO,eAAF;YAAmBD;UAAnB,CAAD,EAA+B,WAA/B,oBAC/BA,OAAO,CAACM,QAAR,CAAiBC,SADc;YAElCC,OAAO,EAAEC,KAAK,CAACC,aAAN,CAAoBC;UAFK;QAJxC;MALF;IADF,EAFF;EAAA,EADF;AAuBD;;AAED,MAAMR,SAAS,GAAIS,KAAD,KAA0B;EAC1CR,SAAS,EAAEZ,GAAI;AACjB;AACA;AACA,GAJ4C;EAK1Ca,GAAG,EAAEb,GAAI;AACX;AACA;AACA;AAR4C,CAA1B,CAAlB"},"metadata":{},"sourceType":"module"}