{"ast":null,"code":"import { map, clone } from 'lodash';\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/features/alerting/state/query_part';\nconst index = [];\nconst categories = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: []\n};\n\nfunction createPart(part) {\n  const def = index[part.type];\n\n  if (!def) {\n    throw {\n      message: 'Could not find query part ' + part.type\n    };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions = [];\n\nfunction aliasRenderer(part, innerExpr) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part, innerExpr) {\n  if (part.params[0] === '*') {\n    return '*';\n  }\n\n  return '\"' + part.params[0] + '\"';\n}\n\nfunction replaceAggregationAddStrategy(selectParts, partModel) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      } // count distinct is allowed\n\n\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      } // remove next aggregation if distinct was replaced\n\n\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n\n          return;\n        }\n      }\n\n      selectParts[i] = partModel;\n      return;\n    }\n\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts, partModel) {\n  let i; // look for index to add transformation\n\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts, partModel) {\n  const partCount = selectParts.length;\n\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    } // if next to last is math, replace it\n\n\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts, partModel) {\n  const partCount = selectParts.length;\n\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts, partModel, query) {\n  // copy all parts\n  const parts = map(selectParts, part => {\n    return createPart({\n      type: part.def.type,\n      params: clone(part.params)\n    });\n  });\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{\n    type: 'field',\n    dynamicLookup: true\n  }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer\n}); // Aggregations\n\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n}); // transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{\n    name: 'duration',\n    type: 'interval',\n    options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h']\n  }],\n  defaultParams: ['10s'],\n  renderer: functionRenderer\n});\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{\n    name: 'duration',\n    type: 'interval',\n    options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h']\n  }],\n  defaultParams: ['10s'],\n  renderer: functionRenderer\n});\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{\n    name: 'window',\n    type: 'int',\n    options: [5, 10, 20, 30, 40]\n  }],\n  defaultParams: [10],\n  renderer: functionRenderer\n});\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [{\n    name: 'interval',\n    type: 'time',\n    options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h']\n  }],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer\n});\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [{\n    name: 'fill',\n    type: 'string',\n    options: ['none', 'null', '0', 'previous', 'linear']\n  }],\n  defaultParams: ['null'],\n  renderer: functionRenderer\n});\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{\n    name: 'duration',\n    type: 'interval',\n    options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h']\n  }],\n  defaultParams: ['10s'],\n  renderer: functionRenderer\n}); // predictions\n\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [{\n    name: 'number',\n    type: 'int',\n    options: [5, 10, 20, 30, 40]\n  }, {\n    name: 'season',\n    type: 'int',\n    options: [0, 1, 2, 5, 10]\n  }],\n  defaultParams: [10, 2],\n  renderer: functionRenderer\n});\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [{\n    name: 'number',\n    type: 'int',\n    options: [5, 10, 20, 30, 40]\n  }, {\n    name: 'season',\n    type: 'int',\n    options: [0, 1, 2, 5, 10]\n  }],\n  defaultParams: [10, 2],\n  renderer: functionRenderer\n}); // Selectors\n\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{\n    name: 'count',\n    type: 'int'\n  }],\n  defaultParams: [3],\n  renderer: functionRenderer\n});\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer\n});\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{\n    name: 'nth',\n    type: 'int'\n  }],\n  defaultParams: [95],\n  renderer: functionRenderer\n});\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{\n    name: 'count',\n    type: 'int'\n  }],\n  defaultParams: [3],\n  renderer: functionRenderer\n});\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{\n    name: 'tag',\n    type: 'string',\n    dynamicLookup: true\n  }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer\n});\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{\n    name: 'expr',\n    type: 'string'\n  }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer\n});\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{\n    name: 'name',\n    type: 'string',\n    quote: 'double'\n  }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer\n});\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy\n};","map":{"version":3,"names":["map","clone","QueryPartDef","QueryPart","functionRenderer","suffixRenderer","index","categories","Aggregations","Selectors","Transformations","Predictors","Math","Aliasing","Fields","createPart","part","def","type","message","register","options","category","push","groupByTimeFunctions","aliasRenderer","innerExpr","params","fieldRenderer","replaceAggregationAddStrategy","selectParts","partModel","i","length","morePartsAvailable","nextPart","splice","addTransformationStrategy","addMathStrategy","partCount","addAliasStrategy","addFieldStrategy","query","parts","selectModels","addStrategy","dynamicLookup","defaultParams","renderer","name","quote","renderMode","create","getCategories","replaceAggregationAdd"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/query_part.ts"],"sourcesContent":["import { map, clone } from 'lodash';\n\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/features/alerting/state/query_part';\n\nconst index: any[] = [];\nconst categories: any = {\n  Aggregations: [],\n  Selectors: [],\n  Transformations: [],\n  Predictors: [],\n  Math: [],\n  Aliasing: [],\n  Fields: [],\n};\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    throw { message: 'Could not find query part ' + part.type };\n  }\n\n  return new QueryPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new QueryPartDef(options);\n  options.category.push(index[options.type]);\n}\n\nconst groupByTimeFunctions: any[] = [];\n\nfunction aliasRenderer(part: { params: string[] }, innerExpr: string) {\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\n}\n\nfunction fieldRenderer(part: { params: string[] }, innerExpr: any) {\n  if (part.params[0] === '*') {\n    return '*';\n  }\n  return '\"' + part.params[0] + '\"';\n}\n\nfunction replaceAggregationAddStrategy(selectParts: any[], partModel: { def: { type: string } }) {\n  // look for existing aggregation\n  for (let i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Aggregations) {\n      if (part.def.type === partModel.def.type) {\n        return;\n      }\n      // count distinct is allowed\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\n        break;\n      }\n      // remove next aggregation if distinct was replaced\n      if (part.def.type === 'distinct') {\n        const morePartsAvailable = selectParts.length >= i + 2;\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\n          const nextPart = selectParts[i + 1];\n          if (nextPart.def.category === categories.Aggregations) {\n            selectParts.splice(i + 1, 1);\n          }\n        } else if (partModel.def.type === 'count') {\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\n            selectParts.splice(i + 1, 0, partModel);\n          }\n          return;\n        }\n      }\n      selectParts[i] = partModel;\n      return;\n    }\n    if (part.def.category === categories.Selectors) {\n      selectParts[i] = partModel;\n      return;\n    }\n  }\n\n  selectParts.splice(1, 0, partModel);\n}\n\nfunction addTransformationStrategy(selectParts: any[], partModel: any) {\n  let i;\n  // look for index to add transformation\n  for (i = 0; i < selectParts.length; i++) {\n    const part = selectParts[i];\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\n      break;\n    }\n  }\n\n  selectParts.splice(i, 0, partModel);\n}\n\nfunction addMathStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is math, replace it\n    if (selectParts[partCount - 1].def.type === 'math') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n    // if next to last is math, replace it\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\n      selectParts[partCount - 2] = partModel;\n      return;\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\n      // if last is alias add it before\n      selectParts.splice(partCount - 1, 0, partModel);\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addAliasStrategy(selectParts: any[], partModel: any) {\n  const partCount = selectParts.length;\n  if (partCount > 0) {\n    // if last is alias, replace it\n    if (selectParts[partCount - 1].def.type === 'alias') {\n      selectParts[partCount - 1] = partModel;\n      return;\n    }\n  }\n  selectParts.push(partModel);\n}\n\nfunction addFieldStrategy(selectParts: any, partModel: any, query: { selectModels: any[][] }) {\n  // copy all parts\n  const parts = map(selectParts, (part: any) => {\n    return createPart({ type: part.def.type, params: clone(part.params) });\n  });\n\n  query.selectModels.push(parts);\n}\n\nregister({\n  type: 'field',\n  addStrategy: addFieldStrategy,\n  category: categories.Fields,\n  params: [{ type: 'field', dynamicLookup: true }],\n  defaultParams: ['value'],\n  renderer: fieldRenderer,\n});\n\n// Aggregations\nregister({\n  type: 'count',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'distinct',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'integral',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mean',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'median',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'mode',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'sum',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Aggregations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\n// transformations\n\nregister({\n  type: 'derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'spread',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_derivative',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'non_negative_difference',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'moving_average',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\n  defaultParams: [10],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'cumulative_sum',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'stddev',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'time',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'interval',\n      type: 'time',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['$__interval'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'fill',\n  category: groupByTimeFunctions,\n  params: [\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'null', '0', 'previous', 'linear'],\n    },\n  ],\n  defaultParams: ['null'],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'elapsed',\n  addStrategy: addTransformationStrategy,\n  category: categories.Transformations,\n  params: [\n    {\n      name: 'duration',\n      type: 'interval',\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n  ],\n  defaultParams: ['10s'],\n  renderer: functionRenderer,\n});\n\n// predictions\nregister({\n  type: 'holt_winters',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'holt_winters_with_fit',\n  addStrategy: addTransformationStrategy,\n  category: categories.Predictors,\n  params: [\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\n  ],\n  defaultParams: [10, 2],\n  renderer: functionRenderer,\n});\n\n// Selectors\nregister({\n  type: 'bottom',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'first',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'last',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'max',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'min',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [],\n  defaultParams: [],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'percentile',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'nth', type: 'int' }],\n  defaultParams: [95],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'top',\n  addStrategy: replaceAggregationAddStrategy,\n  category: categories.Selectors,\n  params: [{ name: 'count', type: 'int' }],\n  defaultParams: [3],\n  renderer: functionRenderer,\n});\n\nregister({\n  type: 'tag',\n  category: groupByTimeFunctions,\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\n  defaultParams: ['tag'],\n  renderer: fieldRenderer,\n});\n\nregister({\n  type: 'math',\n  addStrategy: addMathStrategy,\n  category: categories.Math,\n  params: [{ name: 'expr', type: 'string' }],\n  defaultParams: [' / 100'],\n  renderer: suffixRenderer,\n});\n\nregister({\n  type: 'alias',\n  addStrategy: addAliasStrategy,\n  category: categories.Aliasing,\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n  renderMode: 'suffix',\n  renderer: aliasRenderer,\n});\n\nexport default {\n  create: createPart,\n  getCategories: () => {\n    return categories;\n  },\n  replaceAggregationAdd: replaceAggregationAddStrategy,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}