{"ast":null,"code":"var _td, _tr;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css, cx } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport React, { PureComponent } from 'react';\nimport { calculateFieldStats, calculateLogsLabelStats, calculateStats, getParser } from '@grafana/data';\nimport { withTheme2 } from '../../themes/index';\nimport { Icon } from '../Icon/Icon';\nimport { Tooltip } from '../Tooltip/Tooltip';\nimport { LogDetailsRow } from './LogDetailsRow';\nimport { getLogRowStyles } from './getLogRowStyles';\nimport { getAllFields } from './logParser'; //Components\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst getStyles = theme => {\n  return {\n    logsRowLevelDetails: css`\n      label: logs-row__level_details;\n      &::after {\n        top: -3px;\n      }\n    `,\n    logDetails: css`\n      label: logDetailsDefaultCursor;\n      cursor: default;\n\n      &:hover {\n        background-color: ${theme.colors.background.primary};\n      }\n    `\n  };\n};\n\nclass UnThemedLogDetails extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"getParser\", memoizeOne(getParser));\n\n    _defineProperty(this, \"getStatsForDetectedField\", key => {\n      const matcher = this.getParser(this.props.row.entry).buildMatcher(key);\n      return calculateFieldStats(this.props.getRows(), matcher);\n    });\n  }\n\n  render() {\n    const {\n      row,\n      theme,\n      hasError,\n      onClickFilterOutLabel,\n      onClickFilterLabel,\n      getRows,\n      showDuplicates,\n      className,\n      onClickShowDetectedField,\n      onClickHideDetectedField,\n      showDetectedFields,\n      getFieldLinks,\n      wrapLogMessage\n    } = this.props;\n    const style = getLogRowStyles(theme, row.logLevel);\n    const styles = getStyles(theme);\n    const labels = row.labels ? row.labels : {};\n    const labelsAvailable = Object.keys(labels).length > 0;\n    const fields = getAllFields(row, getFieldLinks);\n    const detectedFieldsAvailable = fields && fields.length > 0; // If logs with error, we are not showing the level color\n\n    const levelClassName = cx(!hasError && [style.logsRowLevel, styles.logsRowLevelDetails]);\n    return /*#__PURE__*/_jsxs(\"tr\", {\n      className: cx(className, styles.logDetails),\n      children: [showDuplicates && (_td || (_td = /*#__PURE__*/_jsx(\"td\", {}))), /*#__PURE__*/_jsx(\"td\", {\n        className: levelClassName,\n        \"aria-label\": \"Log level\"\n      }), /*#__PURE__*/_jsx(\"td\", {\n        colSpan: 4,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: style.logDetailsContainer,\n          children: /*#__PURE__*/_jsx(\"table\", {\n            className: style.logDetailsTable,\n            children: /*#__PURE__*/_jsxs(\"tbody\", {\n              children: [labelsAvailable && /*#__PURE__*/_jsx(\"tr\", {\n                children: /*#__PURE__*/_jsx(\"td\", {\n                  colSpan: 5,\n                  className: style.logDetailsHeading,\n                  \"aria-label\": \"Log labels\",\n                  children: \"Log labels\"\n                })\n              }), Object.keys(labels).sort().map(key => {\n                const value = labels[key];\n                return /*#__PURE__*/_jsx(LogDetailsRow, {\n                  parsedKey: key,\n                  parsedValue: value,\n                  isLabel: true,\n                  getStats: () => calculateLogsLabelStats(getRows(), key),\n                  onClickFilterOutLabel: onClickFilterOutLabel,\n                  onClickFilterLabel: onClickFilterLabel\n                }, `${key}=${value}`);\n              }), detectedFieldsAvailable && /*#__PURE__*/_jsx(\"tr\", {\n                children: /*#__PURE__*/_jsxs(\"td\", {\n                  colSpan: 5,\n                  className: style.logDetailsHeading,\n                  \"aria-label\": \"Detected fields\",\n                  children: [\"Detected fields\", /*#__PURE__*/_jsx(Tooltip, {\n                    content: \"Fields that are parsed from log message and detected by Grafana.\",\n                    children: /*#__PURE__*/_jsx(Icon, {\n                      name: \"question-circle\",\n                      size: \"xs\",\n                      className: css`\n                            margin-left: 4px;\n                          `\n                    })\n                  })]\n                })\n              }), fields.sort().map(field => {\n                const {\n                  key,\n                  value,\n                  links,\n                  fieldIndex\n                } = field;\n                return /*#__PURE__*/_jsx(LogDetailsRow, {\n                  parsedKey: key,\n                  parsedValue: value,\n                  links: links,\n                  onClickShowDetectedField: onClickShowDetectedField,\n                  onClickHideDetectedField: onClickHideDetectedField,\n                  getStats: () => fieldIndex === undefined ? this.getStatsForDetectedField(key) : calculateStats(row.dataFrame.fields[fieldIndex].values.toArray()),\n                  showDetectedFields: showDetectedFields,\n                  wrapLogMessage: wrapLogMessage\n                }, `${key}=${value}`);\n              }), !detectedFieldsAvailable && !labelsAvailable && (_tr || (_tr = /*#__PURE__*/_jsx(\"tr\", {\n                children: /*#__PURE__*/_jsx(\"td\", {\n                  colSpan: 5,\n                  \"aria-label\": \"No details\",\n                  children: \"No details available\"\n                })\n              })))]\n            })\n          })\n        })\n      })]\n    });\n  }\n\n}\n\nexport const LogDetails = withTheme2(UnThemedLogDetails);\nLogDetails.displayName = 'LogDetails';","map":{"version":3,"names":["css","cx","memoizeOne","React","PureComponent","calculateFieldStats","calculateLogsLabelStats","calculateStats","getParser","withTheme2","Icon","Tooltip","LogDetailsRow","getLogRowStyles","getAllFields","getStyles","theme","logsRowLevelDetails","logDetails","colors","background","primary","UnThemedLogDetails","key","matcher","props","row","entry","buildMatcher","getRows","render","hasError","onClickFilterOutLabel","onClickFilterLabel","showDuplicates","className","onClickShowDetectedField","onClickHideDetectedField","showDetectedFields","getFieldLinks","wrapLogMessage","style","logLevel","styles","labels","labelsAvailable","Object","keys","length","fields","detectedFieldsAvailable","levelClassName","logsRowLevel","logDetailsContainer","logDetailsTable","logDetailsHeading","sort","map","value","field","links","fieldIndex","undefined","getStatsForDetectedField","dataFrame","values","toArray","LogDetails","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Logs/LogDetails.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport React, { PureComponent } from 'react';\n\nimport {\n  calculateFieldStats,\n  calculateLogsLabelStats,\n  calculateStats,\n  Field,\n  getParser,\n  LinkModel,\n  LogRowModel,\n  GrafanaTheme2,\n} from '@grafana/data';\n\nimport { withTheme2 } from '../../themes/index';\nimport { Themeable2 } from '../../types/theme';\nimport { Icon } from '../Icon/Icon';\nimport { Tooltip } from '../Tooltip/Tooltip';\n\nimport { LogDetailsRow } from './LogDetailsRow';\nimport { getLogRowStyles } from './getLogRowStyles';\nimport { getAllFields } from './logParser';\n\n//Components\n\nexport interface Props extends Themeable2 {\n  row: LogRowModel;\n  showDuplicates: boolean;\n  getRows: () => LogRowModel[];\n  wrapLogMessage: boolean;\n  className?: string;\n  hasError?: boolean;\n\n  onClickFilterLabel?: (key: string, value: string) => void;\n  onClickFilterOutLabel?: (key: string, value: string) => void;\n  getFieldLinks?: (field: Field, rowIndex: number) => Array<LinkModel<Field>>;\n  showDetectedFields?: string[];\n  onClickShowDetectedField?: (key: string) => void;\n  onClickHideDetectedField?: (key: string) => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    logsRowLevelDetails: css`\n      label: logs-row__level_details;\n      &::after {\n        top: -3px;\n      }\n    `,\n    logDetails: css`\n      label: logDetailsDefaultCursor;\n      cursor: default;\n\n      &:hover {\n        background-color: ${theme.colors.background.primary};\n      }\n    `,\n  };\n};\n\nclass UnThemedLogDetails extends PureComponent<Props> {\n  getParser = memoizeOne(getParser);\n\n  getStatsForDetectedField = (key: string) => {\n    const matcher = this.getParser(this.props.row.entry)!.buildMatcher(key);\n    return calculateFieldStats(this.props.getRows(), matcher);\n  };\n\n  render() {\n    const {\n      row,\n      theme,\n      hasError,\n      onClickFilterOutLabel,\n      onClickFilterLabel,\n      getRows,\n      showDuplicates,\n      className,\n      onClickShowDetectedField,\n      onClickHideDetectedField,\n      showDetectedFields,\n      getFieldLinks,\n      wrapLogMessage,\n    } = this.props;\n    const style = getLogRowStyles(theme, row.logLevel);\n    const styles = getStyles(theme);\n    const labels = row.labels ? row.labels : {};\n    const labelsAvailable = Object.keys(labels).length > 0;\n    const fields = getAllFields(row, getFieldLinks);\n    const detectedFieldsAvailable = fields && fields.length > 0;\n    // If logs with error, we are not showing the level color\n    const levelClassName = cx(!hasError && [style.logsRowLevel, styles.logsRowLevelDetails]);\n\n    return (\n      <tr className={cx(className, styles.logDetails)}>\n        {showDuplicates && <td />}\n        <td className={levelClassName} aria-label=\"Log level\" />\n        <td colSpan={4}>\n          <div className={style.logDetailsContainer}>\n            <table className={style.logDetailsTable}>\n              <tbody>\n                {labelsAvailable && (\n                  <tr>\n                    <td colSpan={5} className={style.logDetailsHeading} aria-label=\"Log labels\">\n                      Log labels\n                    </td>\n                  </tr>\n                )}\n                {Object.keys(labels)\n                  .sort()\n                  .map((key) => {\n                    const value = labels[key];\n                    return (\n                      <LogDetailsRow\n                        key={`${key}=${value}`}\n                        parsedKey={key}\n                        parsedValue={value}\n                        isLabel={true}\n                        getStats={() => calculateLogsLabelStats(getRows(), key)}\n                        onClickFilterOutLabel={onClickFilterOutLabel}\n                        onClickFilterLabel={onClickFilterLabel}\n                      />\n                    );\n                  })}\n\n                {detectedFieldsAvailable && (\n                  <tr>\n                    <td colSpan={5} className={style.logDetailsHeading} aria-label=\"Detected fields\">\n                      Detected fields\n                      <Tooltip content=\"Fields that are parsed from log message and detected by Grafana.\">\n                        <Icon\n                          name=\"question-circle\"\n                          size=\"xs\"\n                          className={css`\n                            margin-left: 4px;\n                          `}\n                        />\n                      </Tooltip>\n                    </td>\n                  </tr>\n                )}\n                {fields.sort().map((field) => {\n                  const { key, value, links, fieldIndex } = field;\n                  return (\n                    <LogDetailsRow\n                      key={`${key}=${value}`}\n                      parsedKey={key}\n                      parsedValue={value}\n                      links={links}\n                      onClickShowDetectedField={onClickShowDetectedField}\n                      onClickHideDetectedField={onClickHideDetectedField}\n                      getStats={() =>\n                        fieldIndex === undefined\n                          ? this.getStatsForDetectedField(key)\n                          : calculateStats(row.dataFrame.fields[fieldIndex].values.toArray())\n                      }\n                      showDetectedFields={showDetectedFields}\n                      wrapLogMessage={wrapLogMessage}\n                    />\n                  );\n                })}\n                {!detectedFieldsAvailable && !labelsAvailable && (\n                  <tr>\n                    <td colSpan={5} aria-label=\"No details\">\n                      No details available\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport const LogDetails = withTheme2(UnThemedLogDetails);\nLogDetails.displayName = 'LogDetails';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}