{"ast":null,"code":"import React from 'react';\nimport { AliasBy, PeriodSelect, AlignmentPeriodLabel, Project, QueryEditorRow } from '..';\nimport { ALIGNMENT_PERIODS, SELECT_WIDTH } from '../../constants';\nimport { AlignmentTypes } from '../../types';\nimport { Selector, Service, SLO } from '.';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const defaultQuery = dataSource => ({\n  projectName: dataSource.getDefaultProject(),\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  aliasBy: '',\n  selectorName: 'select_slo_health',\n  serviceId: '',\n  serviceName: '',\n  sloId: '',\n  sloName: ''\n});\nexport function SLOQueryEditor({\n  refId,\n  query,\n  datasource,\n  onChange,\n  variableOptionGroup,\n  customMetaData\n}) {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Project, {\n      refId: refId,\n      templateVariableOptions: variableOptionGroup.options,\n      projectName: query.projectName,\n      datasource: datasource,\n      onChange: projectName => onChange(Object.assign({}, query, {\n        projectName\n      }))\n    }), /*#__PURE__*/_jsx(Service, {\n      refId: refId,\n      datasource: datasource,\n      templateVariableOptions: variableOptionGroup.options,\n      query: query,\n      onChange: onChange\n    }), /*#__PURE__*/_jsx(SLO, {\n      refId: refId,\n      datasource: datasource,\n      templateVariableOptions: variableOptionGroup.options,\n      query: query,\n      onChange: onChange\n    }), /*#__PURE__*/_jsx(Selector, {\n      refId: refId,\n      datasource: datasource,\n      templateVariableOptions: variableOptionGroup.options,\n      query: query,\n      onChange: onChange\n    }), /*#__PURE__*/_jsxs(QueryEditorRow, {\n      label: \"Alignment period\",\n      htmlFor: `${refId}-alignment-period`,\n      children: [/*#__PURE__*/_jsx(PeriodSelect, {\n        inputId: `${refId}-alignment-period`,\n        templateVariableOptions: variableOptionGroup.options,\n        selectWidth: SELECT_WIDTH,\n        current: query.alignmentPeriod,\n        onChange: period => onChange(Object.assign({}, query, {\n          alignmentPeriod: period\n        })),\n        aligmentPeriods: ALIGNMENT_PERIODS\n      }), /*#__PURE__*/_jsx(AlignmentPeriodLabel, {\n        datasource: datasource,\n        customMetaData: customMetaData\n      })]\n    }), /*#__PURE__*/_jsx(AliasBy, {\n      refId: refId,\n      value: query.aliasBy,\n      onChange: aliasBy => onChange(Object.assign({}, query, {\n        aliasBy\n      }))\n    })]\n  });\n}","map":{"version":3,"names":["React","AliasBy","PeriodSelect","AlignmentPeriodLabel","Project","QueryEditorRow","ALIGNMENT_PERIODS","SELECT_WIDTH","AlignmentTypes","Selector","Service","SLO","defaultQuery","dataSource","projectName","getDefaultProject","alignmentPeriod","perSeriesAligner","ALIGN_MEAN","aliasBy","selectorName","serviceId","serviceName","sloId","sloName","SLOQueryEditor","refId","query","datasource","onChange","variableOptionGroup","customMetaData","options","period"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/SLO/SLOQueryEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { AliasBy, PeriodSelect, AlignmentPeriodLabel, Project, QueryEditorRow } from '..';\nimport { ALIGNMENT_PERIODS, SELECT_WIDTH } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { AlignmentTypes, CustomMetaData, SLOQuery } from '../../types';\n\nimport { Selector, Service, SLO } from '.';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: SLOQuery) => void;\n  onRunQuery: () => void;\n  query: SLOQuery;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => SLOQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  aliasBy: '',\n  selectorName: 'select_slo_health',\n  serviceId: '',\n  serviceName: '',\n  sloId: '',\n  sloName: '',\n});\n\nexport function SLOQueryEditor({\n  refId,\n  query,\n  datasource,\n  onChange,\n  variableOptionGroup,\n  customMetaData,\n}: React.PropsWithChildren<Props>) {\n  return (\n    <>\n      <Project\n        refId={refId}\n        templateVariableOptions={variableOptionGroup.options}\n        projectName={query.projectName}\n        datasource={datasource}\n        onChange={(projectName) => onChange({ ...query, projectName })}\n      />\n      <Service\n        refId={refId}\n        datasource={datasource}\n        templateVariableOptions={variableOptionGroup.options}\n        query={query}\n        onChange={onChange}\n      ></Service>\n      <SLO\n        refId={refId}\n        datasource={datasource}\n        templateVariableOptions={variableOptionGroup.options}\n        query={query}\n        onChange={onChange}\n      ></SLO>\n      <Selector\n        refId={refId}\n        datasource={datasource}\n        templateVariableOptions={variableOptionGroup.options}\n        query={query}\n        onChange={onChange}\n      ></Selector>\n\n      <QueryEditorRow label=\"Alignment period\" htmlFor={`${refId}-alignment-period`}>\n        <PeriodSelect\n          inputId={`${refId}-alignment-period`}\n          templateVariableOptions={variableOptionGroup.options}\n          selectWidth={SELECT_WIDTH}\n          current={query.alignmentPeriod}\n          onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n          aligmentPeriods={ALIGNMENT_PERIODS}\n        />\n        <AlignmentPeriodLabel datasource={datasource} customMetaData={customMetaData} />\n      </QueryEditorRow>\n\n      <AliasBy refId={refId} value={query.aliasBy} onChange={(aliasBy) => onChange({ ...query, aliasBy })} />\n    </>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,SAASC,OAAT,EAAkBC,YAAlB,EAAgCC,oBAAhC,EAAsDC,OAAtD,EAA+DC,cAA/D,QAAqF,IAArF;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,iBAAhD;AAEA,SAASC,cAAT,QAAyD,aAAzD;AAEA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,GAA5B,QAAuC,GAAvC;;;;AAYA,OAAO,MAAMC,YAAiE,GAAIC,UAAD,KAAiB;EAChGC,WAAW,EAAED,UAAU,CAACE,iBAAX,EADmF;EAEhGC,eAAe,EAAE,uBAF+E;EAGhGC,gBAAgB,EAAET,cAAc,CAACU,UAH+D;EAIhGC,OAAO,EAAE,EAJuF;EAKhGC,YAAY,EAAE,mBALkF;EAMhGC,SAAS,EAAE,EANqF;EAOhGC,WAAW,EAAE,EAPmF;EAQhGC,KAAK,EAAE,EARyF;EAShGC,OAAO,EAAE;AATuF,CAAjB,CAA1E;AAYP,OAAO,SAASC,cAAT,CAAwB;EAC7BC,KAD6B;EAE7BC,KAF6B;EAG7BC,UAH6B;EAI7BC,QAJ6B;EAK7BC,mBAL6B;EAM7BC;AAN6B,CAAxB,EAO4B;EACjC,oBACE;IAAA,wBACE,KAAC,OAAD;MACE,KAAK,EAAEL,KADT;MAEE,uBAAuB,EAAEI,mBAAmB,CAACE,OAF/C;MAGE,WAAW,EAAEL,KAAK,CAACb,WAHrB;MAIE,UAAU,EAAEc,UAJd;MAKE,QAAQ,EAAGd,WAAD,IAAiBe,QAAQ,mBAAMF,KAAN;QAAab;MAAb;IALrC,EADF,eAQE,KAAC,OAAD;MACE,KAAK,EAAEY,KADT;MAEE,UAAU,EAAEE,UAFd;MAGE,uBAAuB,EAAEE,mBAAmB,CAACE,OAH/C;MAIE,KAAK,EAAEL,KAJT;MAKE,QAAQ,EAAEE;IALZ,EARF,eAeE,KAAC,GAAD;MACE,KAAK,EAAEH,KADT;MAEE,UAAU,EAAEE,UAFd;MAGE,uBAAuB,EAAEE,mBAAmB,CAACE,OAH/C;MAIE,KAAK,EAAEL,KAJT;MAKE,QAAQ,EAAEE;IALZ,EAfF,eAsBE,KAAC,QAAD;MACE,KAAK,EAAEH,KADT;MAEE,UAAU,EAAEE,UAFd;MAGE,uBAAuB,EAAEE,mBAAmB,CAACE,OAH/C;MAIE,KAAK,EAAEL,KAJT;MAKE,QAAQ,EAAEE;IALZ,EAtBF,eA8BE,MAAC,cAAD;MAAgB,KAAK,EAAC,kBAAtB;MAAyC,OAAO,EAAG,GAAEH,KAAM,mBAA3D;MAAA,wBACE,KAAC,YAAD;QACE,OAAO,EAAG,GAAEA,KAAM,mBADpB;QAEE,uBAAuB,EAAEI,mBAAmB,CAACE,OAF/C;QAGE,WAAW,EAAEzB,YAHf;QAIE,OAAO,EAAEoB,KAAK,CAACX,eAJjB;QAKE,QAAQ,EAAGiB,MAAD,IAAYJ,QAAQ,mBAAMF,KAAN;UAAaX,eAAe,EAAEiB;QAA9B,GALhC;QAME,eAAe,EAAE3B;MANnB,EADF,eASE,KAAC,oBAAD;QAAsB,UAAU,EAAEsB,UAAlC;QAA8C,cAAc,EAAEG;MAA9D,EATF;IAAA,EA9BF,eA0CE,KAAC,OAAD;MAAS,KAAK,EAAEL,KAAhB;MAAuB,KAAK,EAAEC,KAAK,CAACR,OAApC;MAA6C,QAAQ,EAAGA,OAAD,IAAaU,QAAQ,mBAAMF,KAAN;QAAaR;MAAb;IAA5E,EA1CF;EAAA,EADF;AA8CD"},"metadata":{},"sourceType":"module"}