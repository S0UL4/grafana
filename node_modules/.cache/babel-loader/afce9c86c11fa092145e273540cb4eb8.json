{"ast":null,"code":"import React from 'react';\nimport { DataTransformerID, getFrameDisplayName } from '@grafana/data';\nimport { Field, HorizontalGroup, Select, Switch, VerticalGroup } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { DetailText } from 'app/features/inspector/DetailText';\nimport { getPanelInspectorStyles } from './styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const InspectDataOptions = ({\n  options,\n  onOptionsChange,\n  panel,\n  data,\n  dataFrames,\n  transformId,\n  transformationOptions,\n  selectedDataFrame,\n  onDataFrameChange,\n  downloadForExcel,\n  toggleDownloadForExcel\n}) => {\n  var _panel$plugin;\n\n  const styles = getPanelInspectorStyles();\n  const panelTransformations = panel === null || panel === void 0 ? void 0 : panel.getTransformations();\n  const showPanelTransformationsOption = Boolean(panelTransformations === null || panelTransformations === void 0 ? void 0 : panelTransformations.length) && transformId !== 'join by time';\n  const showFieldConfigsOption = panel && !((_panel$plugin = panel.plugin) !== null && _panel$plugin !== void 0 && _panel$plugin.fieldConfigRegistry.isEmpty());\n  let dataSelect = dataFrames;\n\n  if (selectedDataFrame === DataTransformerID.seriesToColumns) {\n    dataSelect = data;\n  }\n\n  const choices = dataSelect.map((frame, index) => {\n    return {\n      value: index,\n      label: `${getFrameDisplayName(frame)} (${index})`\n    };\n  });\n  const selectableOptions = [...transformationOptions, ...choices];\n\n  function getActiveString() {\n    let activeString = '';\n\n    if (!data) {\n      return activeString;\n    }\n\n    const parts = [];\n\n    if (selectedDataFrame === DataTransformerID.seriesToColumns) {\n      parts.push('Series joined by time');\n    } else if (data.length > 1) {\n      parts.push(getFrameDisplayName(data[selectedDataFrame]));\n    }\n\n    if (options.withTransforms || options.withFieldConfig) {\n      if (options.withTransforms) {\n        parts.push('Panel transforms');\n      }\n\n      if (options.withTransforms && options.withFieldConfig) {}\n\n      if (options.withFieldConfig) {\n        parts.push('Formatted data');\n      }\n    }\n\n    if (downloadForExcel) {\n      parts.push('Excel header');\n    }\n\n    return parts.join(', ');\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.dataDisplayOptions,\n    children: /*#__PURE__*/_jsx(QueryOperationRow, {\n      id: \"Data options\",\n      index: 0,\n      title: \"Data options\",\n      headerElement: /*#__PURE__*/_jsx(DetailText, {\n        children: getActiveString()\n      }),\n      isOpen: false,\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: styles.options,\n        \"data-testid\": \"dataOptions\",\n        children: /*#__PURE__*/_jsxs(VerticalGroup, {\n          spacing: \"none\",\n          children: [data.length > 1 && /*#__PURE__*/_jsx(Field, {\n            label: \"Show data frame\",\n            children: /*#__PURE__*/_jsx(Select, {\n              options: selectableOptions,\n              value: selectedDataFrame,\n              onChange: onDataFrameChange,\n              width: 30,\n              \"aria-label\": \"Select dataframe\"\n            })\n          }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n            children: [showPanelTransformationsOption && onOptionsChange && /*#__PURE__*/_jsx(Field, {\n              label: \"Apply panel transformations\",\n              description: \"Table data is displayed with transformations defined in the panel Transform tab.\",\n              children: /*#__PURE__*/_jsx(Switch, {\n                value: !!options.withTransforms,\n                onChange: () => onOptionsChange(Object.assign({}, options, {\n                  withTransforms: !options.withTransforms\n                }))\n              })\n            }), showFieldConfigsOption && onOptionsChange && /*#__PURE__*/_jsx(Field, {\n              label: \"Formatted data\",\n              description: \"Table data is formatted with options defined in the Field and Override tabs.\",\n              children: /*#__PURE__*/_jsx(Switch, {\n                id: \"formatted-data-toggle\",\n                value: !!options.withFieldConfig,\n                onChange: () => onOptionsChange(Object.assign({}, options, {\n                  withFieldConfig: !options.withFieldConfig\n                }))\n              })\n            }), /*#__PURE__*/_jsx(Field, {\n              label: \"Download for Excel\",\n              description: \"Adds header to CSV for use with Excel\",\n              children: /*#__PURE__*/_jsx(Switch, {\n                id: \"excel-toggle\",\n                value: downloadForExcel,\n                onChange: toggleDownloadForExcel\n              })\n            })]\n          })]\n        })\n      })\n    })\n  });\n};","map":{"version":3,"names":["React","DataTransformerID","getFrameDisplayName","Field","HorizontalGroup","Select","Switch","VerticalGroup","QueryOperationRow","DetailText","getPanelInspectorStyles","InspectDataOptions","options","onOptionsChange","panel","data","dataFrames","transformId","transformationOptions","selectedDataFrame","onDataFrameChange","downloadForExcel","toggleDownloadForExcel","styles","panelTransformations","getTransformations","showPanelTransformationsOption","Boolean","length","showFieldConfigsOption","plugin","fieldConfigRegistry","isEmpty","dataSelect","seriesToColumns","choices","map","frame","index","value","label","selectableOptions","getActiveString","activeString","parts","push","withTransforms","withFieldConfig","join","dataDisplayOptions"],"sources":["/home/soula/grafana/public/app/features/inspector/InspectDataOptions.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { DataFrame, DataTransformerID, getFrameDisplayName, SelectableValue } from '@grafana/data';\nimport { Field, HorizontalGroup, Select, Switch, VerticalGroup } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { DetailText } from 'app/features/inspector/DetailText';\nimport { GetDataOptions } from 'app/features/query/state/PanelQueryRunner';\n\nimport { getPanelInspectorStyles } from './styles';\n\ninterface Props {\n  options: GetDataOptions;\n  dataFrames: DataFrame[];\n  transformId: DataTransformerID;\n  transformationOptions: Array<SelectableValue<DataTransformerID>>;\n  selectedDataFrame: number | DataTransformerID;\n  downloadForExcel: boolean;\n  onDataFrameChange: (item: SelectableValue<DataTransformerID | number>) => void;\n  toggleDownloadForExcel: () => void;\n  data?: DataFrame[];\n  panel?: PanelModel;\n  onOptionsChange?: (options: GetDataOptions) => void;\n}\n\nexport const InspectDataOptions: FC<Props> = ({\n  options,\n  onOptionsChange,\n  panel,\n  data,\n  dataFrames,\n  transformId,\n  transformationOptions,\n  selectedDataFrame,\n  onDataFrameChange,\n  downloadForExcel,\n  toggleDownloadForExcel,\n}) => {\n  const styles = getPanelInspectorStyles();\n\n  const panelTransformations = panel?.getTransformations();\n  const showPanelTransformationsOption =\n    Boolean(panelTransformations?.length) && (transformId as any) !== 'join by time';\n  const showFieldConfigsOption = panel && !panel.plugin?.fieldConfigRegistry.isEmpty();\n\n  let dataSelect = dataFrames;\n  if (selectedDataFrame === DataTransformerID.seriesToColumns) {\n    dataSelect = data!;\n  }\n\n  const choices = dataSelect.map((frame, index) => {\n    return {\n      value: index,\n      label: `${getFrameDisplayName(frame)} (${index})`,\n    } as SelectableValue<number>;\n  });\n\n  const selectableOptions = [...transformationOptions, ...choices];\n\n  function getActiveString() {\n    let activeString = '';\n\n    if (!data) {\n      return activeString;\n    }\n\n    const parts: string[] = [];\n\n    if (selectedDataFrame === DataTransformerID.seriesToColumns) {\n      parts.push('Series joined by time');\n    } else if (data.length > 1) {\n      parts.push(getFrameDisplayName(data[selectedDataFrame as number]));\n    }\n\n    if (options.withTransforms || options.withFieldConfig) {\n      if (options.withTransforms) {\n        parts.push('Panel transforms');\n      }\n\n      if (options.withTransforms && options.withFieldConfig) {\n      }\n\n      if (options.withFieldConfig) {\n        parts.push('Formatted data');\n      }\n    }\n\n    if (downloadForExcel) {\n      parts.push('Excel header');\n    }\n\n    return parts.join(', ');\n  }\n\n  return (\n    <div className={styles.dataDisplayOptions}>\n      <QueryOperationRow\n        id=\"Data options\"\n        index={0}\n        title=\"Data options\"\n        headerElement={<DetailText>{getActiveString()}</DetailText>}\n        isOpen={false}\n      >\n        <div className={styles.options} data-testid=\"dataOptions\">\n          <VerticalGroup spacing=\"none\">\n            {data!.length > 1 && (\n              <Field label=\"Show data frame\">\n                <Select\n                  options={selectableOptions}\n                  value={selectedDataFrame}\n                  onChange={onDataFrameChange}\n                  width={30}\n                  aria-label=\"Select dataframe\"\n                />\n              </Field>\n            )}\n\n            <HorizontalGroup>\n              {showPanelTransformationsOption && onOptionsChange && (\n                <Field\n                  label=\"Apply panel transformations\"\n                  description=\"Table data is displayed with transformations defined in the panel Transform tab.\"\n                >\n                  <Switch\n                    value={!!options.withTransforms}\n                    onChange={() => onOptionsChange({ ...options, withTransforms: !options.withTransforms })}\n                  />\n                </Field>\n              )}\n              {showFieldConfigsOption && onOptionsChange && (\n                <Field\n                  label=\"Formatted data\"\n                  description=\"Table data is formatted with options defined in the Field and Override tabs.\"\n                >\n                  <Switch\n                    id=\"formatted-data-toggle\"\n                    value={!!options.withFieldConfig}\n                    onChange={() => onOptionsChange({ ...options, withFieldConfig: !options.withFieldConfig })}\n                  />\n                </Field>\n              )}\n              <Field label=\"Download for Excel\" description=\"Adds header to CSV for use with Excel\">\n                <Switch id=\"excel-toggle\" value={downloadForExcel} onChange={toggleDownloadForExcel} />\n              </Field>\n            </HorizontalGroup>\n          </VerticalGroup>\n        </div>\n      </QueryOperationRow>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}