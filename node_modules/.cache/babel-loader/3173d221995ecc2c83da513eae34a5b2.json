{"ast":null,"code":"import { ThresholdsMode } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\nexport class GaugeSuggestionsSupplier {\n  getSuggestionsForData(builder) {\n    const {\n      dataSummary\n    } = builder;\n\n    if (!dataSummary.hasData || !dataSummary.hasNumberField) {\n      return;\n    } // for many fields / series this is probably not a good fit\n\n\n    if (dataSummary.numberFieldCount >= 50) {\n      return;\n    }\n\n    const list = builder.getListAppender({\n      name: SuggestionName.Gauge,\n      pluginId: 'gauge',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          thresholds: {\n            steps: [{\n              value: -Infinity,\n              color: 'green'\n            }, {\n              value: 70,\n              color: 'orange'\n            }, {\n              value: 85,\n              color: 'red'\n            }],\n            mode: ThresholdsMode.Percentage\n          },\n          custom: {}\n        },\n        overrides: []\n      },\n      cardOptions: {\n        previewModifier: s => {\n          if (s.options.reduceOptions.values) {\n            s.options.reduceOptions.limit = 2;\n          }\n        }\n      }\n    });\n\n    if (dataSummary.hasStringField && dataSummary.frameCount === 1 && dataSummary.rowCountTotal < 10) {\n      list.append({\n        name: SuggestionName.Gauge,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: []\n          }\n        }\n      });\n      list.append({\n        name: SuggestionName.GaugeNoThresholds,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: []\n          },\n          showThresholdMarkers: false\n        }\n      });\n    } else {\n      list.append({\n        name: SuggestionName.Gauge,\n        options: {\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull']\n          }\n        }\n      });\n      list.append({\n        name: SuggestionName.GaugeNoThresholds,\n        options: {\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull']\n          },\n          showThresholdMarkers: false\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"names":["ThresholdsMode","SuggestionName","GaugeSuggestionsSupplier","getSuggestionsForData","builder","dataSummary","hasData","hasNumberField","numberFieldCount","list","getListAppender","name","Gauge","pluginId","options","fieldConfig","defaults","thresholds","steps","value","Infinity","color","mode","Percentage","custom","overrides","cardOptions","previewModifier","s","reduceOptions","values","limit","hasStringField","frameCount","rowCountTotal","append","calcs","GaugeNoThresholds","showThresholdMarkers"],"sources":["/home/soula/grafana/public/app/plugins/panel/gauge/suggestions.ts"],"sourcesContent":["import { ThresholdsMode, VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { PanelOptions } from './models.gen';\n\nexport class GaugeSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (!dataSummary.hasData || !dataSummary.hasNumberField) {\n      return;\n    }\n\n    // for many fields / series this is probably not a good fit\n    if (dataSummary.numberFieldCount >= 50) {\n      return;\n    }\n\n    const list = builder.getListAppender<PanelOptions, {}>({\n      name: SuggestionName.Gauge,\n      pluginId: 'gauge',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          thresholds: {\n            steps: [\n              { value: -Infinity, color: 'green' },\n              { value: 70, color: 'orange' },\n              { value: 85, color: 'red' },\n            ],\n            mode: ThresholdsMode.Percentage,\n          },\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          if (s.options!.reduceOptions.values) {\n            s.options!.reduceOptions.limit = 2;\n          }\n        },\n      },\n    });\n\n    if (dataSummary.hasStringField && dataSummary.frameCount === 1 && dataSummary.rowCountTotal < 10) {\n      list.append({\n        name: SuggestionName.Gauge,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n          },\n        },\n      });\n      list.append({\n        name: SuggestionName.GaugeNoThresholds,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n          },\n          showThresholdMarkers: false,\n        },\n      });\n    } else {\n      list.append({\n        name: SuggestionName.Gauge,\n        options: {\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull'],\n          },\n        },\n      });\n      list.append({\n        name: SuggestionName.GaugeNoThresholds,\n        options: {\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull'],\n          },\n          showThresholdMarkers: false,\n        },\n      });\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,cAAT,QAAgE,eAAhE;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAIA,OAAO,MAAMC,wBAAN,CAA+B;EACpCC,qBAAqB,CAACC,OAAD,EAA2C;IAC9D,MAAM;MAAEC;IAAF,IAAkBD,OAAxB;;IAEA,IAAI,CAACC,WAAW,CAACC,OAAb,IAAwB,CAACD,WAAW,CAACE,cAAzC,EAAyD;MACvD;IACD,CAL6D,CAO9D;;;IACA,IAAIF,WAAW,CAACG,gBAAZ,IAAgC,EAApC,EAAwC;MACtC;IACD;;IAED,MAAMC,IAAI,GAAGL,OAAO,CAACM,eAAR,CAA0C;MACrDC,IAAI,EAAEV,cAAc,CAACW,KADgC;MAErDC,QAAQ,EAAE,OAF2C;MAGrDC,OAAO,EAAE,EAH4C;MAIrDC,WAAW,EAAE;QACXC,QAAQ,EAAE;UACRC,UAAU,EAAE;YACVC,KAAK,EAAE,CACL;cAAEC,KAAK,EAAE,CAACC,QAAV;cAAoBC,KAAK,EAAE;YAA3B,CADK,EAEL;cAAEF,KAAK,EAAE,EAAT;cAAaE,KAAK,EAAE;YAApB,CAFK,EAGL;cAAEF,KAAK,EAAE,EAAT;cAAaE,KAAK,EAAE;YAApB,CAHK,CADG;YAMVC,IAAI,EAAEtB,cAAc,CAACuB;UANX,CADJ;UASRC,MAAM,EAAE;QATA,CADC;QAYXC,SAAS,EAAE;MAZA,CAJwC;MAkBrDC,WAAW,EAAE;QACXC,eAAe,EAAGC,CAAD,IAAO;UACtB,IAAIA,CAAC,CAACd,OAAF,CAAWe,aAAX,CAAyBC,MAA7B,EAAqC;YACnCF,CAAC,CAACd,OAAF,CAAWe,aAAX,CAAyBE,KAAzB,GAAiC,CAAjC;UACD;QACF;MALU;IAlBwC,CAA1C,CAAb;;IA2BA,IAAI1B,WAAW,CAAC2B,cAAZ,IAA8B3B,WAAW,CAAC4B,UAAZ,KAA2B,CAAzD,IAA8D5B,WAAW,CAAC6B,aAAZ,GAA4B,EAA9F,EAAkG;MAChGzB,IAAI,CAAC0B,MAAL,CAAY;QACVxB,IAAI,EAAEV,cAAc,CAACW,KADX;QAEVE,OAAO,EAAE;UACPe,aAAa,EAAE;YACbC,MAAM,EAAE,IADK;YAEbM,KAAK,EAAE;UAFM;QADR;MAFC,CAAZ;MASA3B,IAAI,CAAC0B,MAAL,CAAY;QACVxB,IAAI,EAAEV,cAAc,CAACoC,iBADX;QAEVvB,OAAO,EAAE;UACPe,aAAa,EAAE;YACbC,MAAM,EAAE,IADK;YAEbM,KAAK,EAAE;UAFM,CADR;UAKPE,oBAAoB,EAAE;QALf;MAFC,CAAZ;IAUD,CApBD,MAoBO;MACL7B,IAAI,CAAC0B,MAAL,CAAY;QACVxB,IAAI,EAAEV,cAAc,CAACW,KADX;QAEVE,OAAO,EAAE;UACPe,aAAa,EAAE;YACbC,MAAM,EAAE,KADK;YAEbM,KAAK,EAAE,CAAC,aAAD;UAFM;QADR;MAFC,CAAZ;MASA3B,IAAI,CAAC0B,MAAL,CAAY;QACVxB,IAAI,EAAEV,cAAc,CAACoC,iBADX;QAEVvB,OAAO,EAAE;UACPe,aAAa,EAAE;YACbC,MAAM,EAAE,KADK;YAEbM,KAAK,EAAE,CAAC,aAAD;UAFM,CADR;UAKPE,oBAAoB,EAAE;QALf;MAFC,CAAZ;IAUD;EACF;;AAjFmC"},"metadata":{},"sourceType":"module"}