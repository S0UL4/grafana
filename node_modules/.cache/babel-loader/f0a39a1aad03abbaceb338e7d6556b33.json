{"ast":null,"code":"import { PluginType } from '@grafana/data';\nimport { importPanelPluginFromMeta } from './importPanelPlugin';\nimport { getPluginSettings } from './pluginSettings';\nimport { importAppPlugin, importDataSourcePlugin } from './plugin_loader';\nexport async function loadPlugin(pluginId) {\n  const info = await getPluginSettings(pluginId);\n  let result;\n\n  if (info.type === PluginType.app) {\n    result = await importAppPlugin(info);\n  }\n\n  if (info.type === PluginType.datasource) {\n    result = await importDataSourcePlugin(info);\n  }\n\n  if (info.type === PluginType.panel) {\n    const panelPlugin = await importPanelPluginFromMeta(info);\n    result = panelPlugin;\n  }\n\n  if (info.type === PluginType.renderer) {\n    result = {\n      meta: info\n    };\n  }\n\n  if (!result) {\n    throw new Error('Unknown Plugin type: ' + info.type);\n  }\n\n  return result;\n}","map":{"version":3,"names":["PluginType","importPanelPluginFromMeta","getPluginSettings","importAppPlugin","importDataSourcePlugin","loadPlugin","pluginId","info","result","type","app","datasource","panel","panelPlugin","renderer","meta","Error"],"sources":["/home/soula/grafana/public/app/features/plugins/utils.ts"],"sourcesContent":["import { GrafanaPlugin, PanelPluginMeta, PluginType } from '@grafana/data';\n\nimport { importPanelPluginFromMeta } from './importPanelPlugin';\nimport { getPluginSettings } from './pluginSettings';\nimport { importAppPlugin, importDataSourcePlugin } from './plugin_loader';\n\nexport async function loadPlugin(pluginId: string): Promise<GrafanaPlugin> {\n  const info = await getPluginSettings(pluginId);\n  let result: GrafanaPlugin | undefined;\n\n  if (info.type === PluginType.app) {\n    result = await importAppPlugin(info);\n  }\n  if (info.type === PluginType.datasource) {\n    result = await importDataSourcePlugin(info);\n  }\n  if (info.type === PluginType.panel) {\n    const panelPlugin = await importPanelPluginFromMeta(info as PanelPluginMeta);\n    result = panelPlugin as unknown as GrafanaPlugin;\n  }\n  if (info.type === PluginType.renderer) {\n    result = { meta: info } as GrafanaPlugin;\n  }\n\n  if (!result) {\n    throw new Error('Unknown Plugin type: ' + info.type);\n  }\n\n  return result;\n}\n"],"mappings":"AAAA,SAAyCA,UAAzC,QAA2D,eAA3D;AAEA,SAASC,yBAAT,QAA0C,qBAA1C;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,eAAT,EAA0BC,sBAA1B,QAAwD,iBAAxD;AAEA,OAAO,eAAeC,UAAf,CAA0BC,QAA1B,EAAoE;EACzE,MAAMC,IAAI,GAAG,MAAML,iBAAiB,CAACI,QAAD,CAApC;EACA,IAAIE,MAAJ;;EAEA,IAAID,IAAI,CAACE,IAAL,KAAcT,UAAU,CAACU,GAA7B,EAAkC;IAChCF,MAAM,GAAG,MAAML,eAAe,CAACI,IAAD,CAA9B;EACD;;EACD,IAAIA,IAAI,CAACE,IAAL,KAAcT,UAAU,CAACW,UAA7B,EAAyC;IACvCH,MAAM,GAAG,MAAMJ,sBAAsB,CAACG,IAAD,CAArC;EACD;;EACD,IAAIA,IAAI,CAACE,IAAL,KAAcT,UAAU,CAACY,KAA7B,EAAoC;IAClC,MAAMC,WAAW,GAAG,MAAMZ,yBAAyB,CAACM,IAAD,CAAnD;IACAC,MAAM,GAAGK,WAAT;EACD;;EACD,IAAIN,IAAI,CAACE,IAAL,KAAcT,UAAU,CAACc,QAA7B,EAAuC;IACrCN,MAAM,GAAG;MAAEO,IAAI,EAAER;IAAR,CAAT;EACD;;EAED,IAAI,CAACC,MAAL,EAAa;IACX,MAAM,IAAIQ,KAAJ,CAAU,0BAA0BT,IAAI,CAACE,IAAzC,CAAN;EACD;;EAED,OAAOD,MAAP;AACD"},"metadata":{},"sourceType":"module"}