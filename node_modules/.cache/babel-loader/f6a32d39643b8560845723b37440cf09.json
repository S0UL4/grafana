{"ast":null,"code":"import { Registry, PluginState } from '@grafana/data';\nimport { config, hasAlphaPanels } from 'app/core/config';\nimport { basemapLayers } from './basemaps';\nimport { carto } from './basemaps/carto';\nimport { dataLayers } from './data';\nexport const DEFAULT_BASEMAP_CONFIG = {\n  type: 'default',\n  name: '',\n  // will get filled in with a non-empty name\n  config: {}\n}; // Default base layer depending on the server setting\n\nexport const defaultBaseLayer = {\n  id: DEFAULT_BASEMAP_CONFIG.type,\n  name: 'Default base layer',\n  isBaseMap: true,\n  create: (map, options, eventBus, theme) => {\n    var _config$geomapDefault;\n\n    const serverLayerType = config === null || config === void 0 ? void 0 : (_config$geomapDefault = config.geomapDefaultBaseLayerConfig) === null || _config$geomapDefault === void 0 ? void 0 : _config$geomapDefault.type;\n\n    if (serverLayerType) {\n      const layer = geomapLayerRegistry.getIfExists(serverLayerType);\n\n      if (!layer) {\n        throw new Error('Invalid basemap configuration on server');\n      }\n\n      return layer.create(map, config.geomapDefaultBaseLayerConfig, eventBus, theme);\n    } // For now use carto as our default basemap\n\n\n    return carto.create(map, options, eventBus, theme);\n  }\n};\n/**\n * Registry for layer handlers\n */\n\nexport const geomapLayerRegistry = new Registry(() => [defaultBaseLayer, ...basemapLayers, // simple basemaps\n...dataLayers // Layers with update functions\n]);\n\nfunction getLayersSelection(items, current) {\n  const res = {\n    options: [],\n    current: []\n  };\n  const alpha = [];\n\n  for (const layer of items) {\n    const opt = {\n      label: layer.name,\n      value: layer.id,\n      description: layer.description\n    };\n\n    if (layer.state === PluginState.alpha) {\n      if (!hasAlphaPanels) {\n        continue;\n      }\n\n      opt.label = `${layer.name} (Alpha)`;\n      opt.icon = 'bolt';\n      alpha.push(opt);\n    } else {\n      res.options.push(opt);\n    }\n\n    if (layer.id === current) {\n      res.current.push(opt);\n    }\n  }\n\n  for (const p of alpha) {\n    res.options.push(p);\n  }\n\n  return res;\n}\n\nexport function getLayersOptions(basemap, current) {\n  if (basemap) {\n    return getLayersSelection([defaultBaseLayer, ...basemapLayers], current);\n  }\n\n  return getLayersSelection([...dataLayers, ...basemapLayers], current);\n}","map":{"version":3,"names":["Registry","PluginState","config","hasAlphaPanels","basemapLayers","carto","dataLayers","DEFAULT_BASEMAP_CONFIG","type","name","defaultBaseLayer","id","isBaseMap","create","map","options","eventBus","theme","serverLayerType","geomapDefaultBaseLayerConfig","layer","geomapLayerRegistry","getIfExists","Error","getLayersSelection","items","current","res","alpha","opt","label","value","description","state","icon","push","p","getLayersOptions","basemap"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/layers/registry.ts"],"sourcesContent":["import Map from 'ol/Map';\n\nimport {\n  MapLayerRegistryItem,\n  Registry,\n  MapLayerOptions,\n  GrafanaTheme2,\n  EventBus,\n  SelectableValue,\n  PluginState,\n} from '@grafana/data';\nimport { config, hasAlphaPanels } from 'app/core/config';\n\nimport { basemapLayers } from './basemaps';\nimport { carto } from './basemaps/carto';\nimport { dataLayers } from './data';\n\nexport const DEFAULT_BASEMAP_CONFIG: MapLayerOptions = {\n  type: 'default',\n  name: '', // will get filled in with a non-empty name\n  config: {},\n};\n\n// Default base layer depending on the server setting\nexport const defaultBaseLayer: MapLayerRegistryItem = {\n  id: DEFAULT_BASEMAP_CONFIG.type,\n  name: 'Default base layer',\n  isBaseMap: true,\n\n  create: (map: Map, options: MapLayerOptions, eventBus: EventBus, theme: GrafanaTheme2) => {\n    const serverLayerType = config?.geomapDefaultBaseLayerConfig?.type;\n    if (serverLayerType) {\n      const layer = geomapLayerRegistry.getIfExists(serverLayerType);\n      if (!layer) {\n        throw new Error('Invalid basemap configuration on server');\n      }\n      return layer.create(map, config.geomapDefaultBaseLayerConfig!, eventBus, theme);\n    }\n\n    // For now use carto as our default basemap\n    return carto.create(map, options, eventBus, theme);\n  },\n};\n\n/**\n * Registry for layer handlers\n */\nexport const geomapLayerRegistry = new Registry<MapLayerRegistryItem<any>>(() => [\n  defaultBaseLayer,\n  ...basemapLayers, // simple basemaps\n  ...dataLayers, // Layers with update functions\n]);\n\ninterface RegistrySelectInfo {\n  options: Array<SelectableValue<string>>;\n  current: Array<SelectableValue<string>>;\n}\n\nfunction getLayersSelection(items: Array<MapLayerRegistryItem<any>>, current?: string): RegistrySelectInfo {\n  const res: RegistrySelectInfo = { options: [], current: [] };\n  const alpha: Array<SelectableValue<string>> = [];\n  for (const layer of items) {\n    const opt: SelectableValue<string> = { label: layer.name, value: layer.id, description: layer.description };\n    if (layer.state === PluginState.alpha) {\n      if (!hasAlphaPanels) {\n        continue;\n      }\n      opt.label = `${layer.name} (Alpha)`;\n      opt.icon = 'bolt';\n      alpha.push(opt);\n    } else {\n      res.options.push(opt);\n    }\n    if (layer.id === current) {\n      res.current.push(opt);\n    }\n  }\n  for (const p of alpha) {\n    res.options.push(p);\n  }\n  return res;\n}\n\nexport function getLayersOptions(basemap: boolean, current?: string): RegistrySelectInfo {\n  if (basemap) {\n    return getLayersSelection([defaultBaseLayer, ...basemapLayers], current);\n  }\n  return getLayersSelection([...dataLayers, ...basemapLayers], current);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}