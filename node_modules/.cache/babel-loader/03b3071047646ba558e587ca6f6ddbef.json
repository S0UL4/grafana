{"ast":null,"code":"var _br, _i, _br2, _br3, _strong;\n\nimport { css } from '@emotion/css';\nimport { saveAs } from 'file-saver';\nimport React, { useCallback, useState } from 'react';\nimport { Stack } from '@grafana/experimental';\nimport { Button, ClipboardButton, HorizontalGroup, stylesFactory, TextArea, useTheme } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const SaveProvisionedDashboardForm = ({\n  dashboard,\n  onCancel\n}) => {\n  const theme = useTheme();\n  const notifyApp = useAppNotification();\n  const [dashboardJSON, setDashboardJson] = useState(() => {\n    const clone = dashboard.getSaveModelClone();\n    delete clone.id;\n    return JSON.stringify(clone, null, 2);\n  });\n  const saveToFile = useCallback(() => {\n    const blob = new Blob([dashboardJSON], {\n      type: 'application/json;charset=utf-8'\n    });\n    saveAs(blob, dashboard.title + '-' + new Date().getTime() + '.json');\n  }, [dashboard.title, dashboardJSON]);\n  const onCopyToClipboardSuccess = useCallback(() => {\n    notifyApp.success('Dashboard JSON copied to clipboard');\n  }, [notifyApp]);\n  const styles = getStyles(theme);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(Stack, {\n      direction: \"column\",\n      gap: 2,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [\"This dashboard cannot be saved from the Grafana UI because it has been provisioned from another source. Copy the JSON or save it to a file below, then you can update your dashboard in the provisioning source.\", _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), _i || (_i = /*#__PURE__*/_jsxs(\"i\", {\n          children: [\"See\", ' ', /*#__PURE__*/_jsx(\"a\", {\n            className: \"external-link\",\n            href: \"https://grafana.com/docs/grafana/latest/administration/provisioning/#dashboards\",\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: \"documentation\"\n          }), ' ', \"for more information about provisioning.\"]\n        })), _br2 || (_br2 = /*#__PURE__*/_jsx(\"br\", {})), \" \", _br3 || (_br3 = /*#__PURE__*/_jsx(\"br\", {})), _strong || (_strong = /*#__PURE__*/_jsx(\"strong\", {\n          children: \"File path: \"\n        })), \" \", dashboard.meta.provisionedExternalId]\n      }), /*#__PURE__*/_jsx(TextArea, {\n        spellCheck: false,\n        value: dashboardJSON,\n        onChange: e => {\n          setDashboardJson(e.currentTarget.value);\n        },\n        className: styles.json\n      }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: onCancel,\n          fill: \"outline\",\n          children: \"Cancel\"\n        }), /*#__PURE__*/_jsx(ClipboardButton, {\n          getText: () => dashboardJSON,\n          onClipboardCopy: onCopyToClipboardSuccess,\n          children: \"Copy JSON to clipboard\"\n        }), /*#__PURE__*/_jsx(Button, {\n          type: \"submit\",\n          onClick: saveToFile,\n          children: \"Save JSON to file\"\n        })]\n      })]\n    })\n  });\n};\nconst getStyles = stylesFactory(theme => {\n  return {\n    json: css`\n      height: 400px;\n      width: 100%;\n      overflow: auto;\n      resize: none;\n      font-family: monospace;\n    `\n  };\n});","map":{"version":3,"names":["css","saveAs","React","useCallback","useState","Stack","Button","ClipboardButton","HorizontalGroup","stylesFactory","TextArea","useTheme","useAppNotification","SaveProvisionedDashboardForm","dashboard","onCancel","theme","notifyApp","dashboardJSON","setDashboardJson","clone","getSaveModelClone","id","JSON","stringify","saveToFile","blob","Blob","type","title","Date","getTime","onCopyToClipboardSuccess","success","styles","getStyles","meta","provisionedExternalId","e","currentTarget","value","json"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/SaveDashboard/forms/SaveProvisionedDashboardForm.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { saveAs } from 'file-saver';\nimport React, { useCallback, useState } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, ClipboardButton, HorizontalGroup, stylesFactory, TextArea, useTheme } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\n\nimport { SaveDashboardFormProps } from '../types';\n\nexport const SaveProvisionedDashboardForm: React.FC<SaveDashboardFormProps> = ({ dashboard, onCancel }) => {\n  const theme = useTheme();\n  const notifyApp = useAppNotification();\n  const [dashboardJSON, setDashboardJson] = useState(() => {\n    const clone = dashboard.getSaveModelClone();\n    delete clone.id;\n    return JSON.stringify(clone, null, 2);\n  });\n\n  const saveToFile = useCallback(() => {\n    const blob = new Blob([dashboardJSON], {\n      type: 'application/json;charset=utf-8',\n    });\n    saveAs(blob, dashboard.title + '-' + new Date().getTime() + '.json');\n  }, [dashboard.title, dashboardJSON]);\n\n  const onCopyToClipboardSuccess = useCallback(() => {\n    notifyApp.success('Dashboard JSON copied to clipboard');\n  }, [notifyApp]);\n\n  const styles = getStyles(theme);\n  return (\n    <>\n      <Stack direction=\"column\" gap={2}>\n        <div>\n          This dashboard cannot be saved from the Grafana UI because it has been provisioned from another source. Copy\n          the JSON or save it to a file below, then you can update your dashboard in the provisioning source.\n          <br />\n          <i>\n            See{' '}\n            <a\n              className=\"external-link\"\n              href=\"https://grafana.com/docs/grafana/latest/administration/provisioning/#dashboards\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              documentation\n            </a>{' '}\n            for more information about provisioning.\n          </i>\n          <br /> <br />\n          <strong>File path: </strong> {dashboard.meta.provisionedExternalId}\n        </div>\n        <TextArea\n          spellCheck={false}\n          value={dashboardJSON}\n          onChange={(e) => {\n            setDashboardJson(e.currentTarget.value);\n          }}\n          className={styles.json}\n        />\n        <HorizontalGroup>\n          <Button variant=\"secondary\" onClick={onCancel} fill=\"outline\">\n            Cancel\n          </Button>\n          <ClipboardButton getText={() => dashboardJSON} onClipboardCopy={onCopyToClipboardSuccess}>\n            Copy JSON to clipboard\n          </ClipboardButton>\n          <Button type=\"submit\" onClick={saveToFile}>\n            Save JSON to file\n          </Button>\n        </HorizontalGroup>\n      </Stack>\n    </>\n  );\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    json: css`\n      height: 400px;\n      width: 100%;\n      overflow: auto;\n      resize: none;\n      font-family: monospace;\n    `,\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}