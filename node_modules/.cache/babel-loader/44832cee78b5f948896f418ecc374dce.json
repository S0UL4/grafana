{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\n\n/**\n * When the `initQuery` Action is dispatched, the query gets populated with default values where values are not present.\n * This means it won't override any existing value in place, but just ensure the query is in a \"runnable\" state.\n */\nexport const initQuery = createAction('init');\nexport const changeQuery = createAction('change_query');\nexport const changeAliasPattern = createAction('change_alias_pattern');\nexport const queryReducer = (prevQuery, action) => {\n  if (changeQuery.match(action)) {\n    return action.payload;\n  }\n\n  if (initQuery.match(action)) {\n    return prevQuery || '';\n  }\n\n  return prevQuery;\n};\nexport const aliasPatternReducer = (prevAliasPattern, action) => {\n  if (changeAliasPattern.match(action)) {\n    return action.payload;\n  }\n\n  if (initQuery.match(action)) {\n    return prevAliasPattern || '';\n  }\n\n  return prevAliasPattern;\n};","map":{"version":3,"names":["createAction","initQuery","changeQuery","changeAliasPattern","queryReducer","prevQuery","action","match","payload","aliasPatternReducer","prevAliasPattern"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/state.ts"],"sourcesContent":["import { Action, createAction } from '@reduxjs/toolkit';\n\nimport { ElasticsearchQuery } from '../../types';\n\n/**\n * When the `initQuery` Action is dispatched, the query gets populated with default values where values are not present.\n * This means it won't override any existing value in place, but just ensure the query is in a \"runnable\" state.\n */\nexport const initQuery = createAction('init');\n\nexport const changeQuery = createAction<ElasticsearchQuery['query']>('change_query');\n\nexport const changeAliasPattern = createAction<ElasticsearchQuery['alias']>('change_alias_pattern');\n\nexport const queryReducer = (prevQuery: ElasticsearchQuery['query'], action: Action) => {\n  if (changeQuery.match(action)) {\n    return action.payload;\n  }\n\n  if (initQuery.match(action)) {\n    return prevQuery || '';\n  }\n\n  return prevQuery;\n};\n\nexport const aliasPatternReducer = (prevAliasPattern: ElasticsearchQuery['alias'], action: Action) => {\n  if (changeAliasPattern.match(action)) {\n    return action.payload;\n  }\n\n  if (initQuery.match(action)) {\n    return prevAliasPattern || '';\n  }\n\n  return prevAliasPattern;\n};\n"],"mappings":"AAAA,SAAiBA,YAAjB,QAAqC,kBAArC;;AAIA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGD,YAAY,CAAC,MAAD,CAA9B;AAEP,OAAO,MAAME,WAAW,GAAGF,YAAY,CAA8B,cAA9B,CAAhC;AAEP,OAAO,MAAMG,kBAAkB,GAAGH,YAAY,CAA8B,sBAA9B,CAAvC;AAEP,OAAO,MAAMI,YAAY,GAAG,CAACC,SAAD,EAAyCC,MAAzC,KAA4D;EACtF,IAAIJ,WAAW,CAACK,KAAZ,CAAkBD,MAAlB,CAAJ,EAA+B;IAC7B,OAAOA,MAAM,CAACE,OAAd;EACD;;EAED,IAAIP,SAAS,CAACM,KAAV,CAAgBD,MAAhB,CAAJ,EAA6B;IAC3B,OAAOD,SAAS,IAAI,EAApB;EACD;;EAED,OAAOA,SAAP;AACD,CAVM;AAYP,OAAO,MAAMI,mBAAmB,GAAG,CAACC,gBAAD,EAAgDJ,MAAhD,KAAmE;EACpG,IAAIH,kBAAkB,CAACI,KAAnB,CAAyBD,MAAzB,CAAJ,EAAsC;IACpC,OAAOA,MAAM,CAACE,OAAd;EACD;;EAED,IAAIP,SAAS,CAACM,KAAV,CAAgBD,MAAhB,CAAJ,EAA6B;IAC3B,OAAOI,gBAAgB,IAAI,EAA3B;EACD;;EAED,OAAOA,gBAAP;AACD,CAVM"},"metadata":{},"sourceType":"module"}