{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { selectors } from '@grafana/e2e-selectors';\nexport class AxesEditorCtrl {\n  /** @ngInject */\n  constructor($scope) {\n    _defineProperty(this, \"panel\", void 0);\n\n    _defineProperty(this, \"panelCtrl\", void 0);\n\n    _defineProperty(this, \"logScales\", void 0);\n\n    _defineProperty(this, \"xAxisModes\", void 0);\n\n    _defineProperty(this, \"xAxisStatOptions\", void 0);\n\n    _defineProperty(this, \"xNameSegment\", void 0);\n\n    _defineProperty(this, \"selectors\", void 0);\n\n    this.$scope = $scope;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024\n    };\n    this.xAxisModes = {\n      Time: 'time',\n      Series: 'series',\n      Histogram: 'histogram' // 'Data field': 'field',\n\n    };\n    this.xAxisStatOptions = [{\n      text: 'Avg',\n      value: 'avg'\n    }, {\n      text: 'Min',\n      value: 'min'\n    }, {\n      text: 'Max',\n      value: 'max'\n    }, {\n      text: 'Total',\n      value: 'total'\n    }, {\n      text: 'Count',\n      value: 'count'\n    }, {\n      text: 'Current',\n      value: 'current'\n    }];\n\n    if (this.panel.xaxis.mode === 'custom') {\n      if (!this.panel.xaxis.name) {\n        this.panel.xaxis.name = 'specify field';\n      }\n    }\n\n    this.selectors = selectors.components.Panels.Visualization.Graph.VisualizationTab;\n  }\n\n  setUnitFormat(axis) {\n    return unit => {\n      axis.format = unit; // if already set via field config we clear that\n\n      if (this.panel.fieldConfig.defaults.unit) {\n        this.panel.fieldConfig.defaults.unit = undefined;\n        this.panelCtrl.refresh();\n      } else {\n        this.panelCtrl.render();\n      }\n    };\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  xAxisModeChanged() {\n    this.panelCtrl.processor.setPanelDefaultsForNewXAxisMode();\n    this.panelCtrl.onDataFramesReceived(this.panelCtrl.dataList);\n  }\n\n  xAxisValueChanged() {\n    this.panelCtrl.onDataFramesReceived(this.panelCtrl.dataList);\n  }\n\n}\nAxesEditorCtrl.$inject = [\"$scope\"];\n\n/** @ngInject */\nexport function axesEditorComponent() {\n  'use strict';\n\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/graph/axes_editor.html',\n    controller: AxesEditorCtrl\n  };\n}","map":{"version":3,"names":["selectors","AxesEditorCtrl","constructor","$scope","panelCtrl","ctrl","panel","logScales","linear","xAxisModes","Time","Series","Histogram","xAxisStatOptions","text","value","xaxis","mode","name","components","Panels","Visualization","Graph","VisualizationTab","setUnitFormat","axis","unit","format","fieldConfig","defaults","undefined","refresh","render","xAxisModeChanged","processor","setPanelDefaultsForNewXAxisMode","onDataFramesReceived","dataList","xAxisValueChanged","axesEditorComponent","restrict","scope","templateUrl","controller"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/axes_editor.ts"],"sourcesContent":["import { selectors } from '@grafana/e2e-selectors';\n\nimport { GraphCtrl } from './module';\n\nexport class AxesEditorCtrl {\n  panel: any;\n  panelCtrl: GraphCtrl;\n  logScales: any;\n  xAxisModes: any;\n  xAxisStatOptions: any;\n  xNameSegment: any;\n  selectors: typeof selectors.components.Panels.Visualization.Graph.VisualizationTab;\n\n  /** @ngInject */\n  constructor(private $scope: any) {\n    this.panelCtrl = $scope.ctrl as GraphCtrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n\n    this.logScales = {\n      linear: 1,\n      'log (base 2)': 2,\n      'log (base 10)': 10,\n      'log (base 32)': 32,\n      'log (base 1024)': 1024,\n    };\n\n    this.xAxisModes = {\n      Time: 'time',\n      Series: 'series',\n      Histogram: 'histogram',\n      // 'Data field': 'field',\n    };\n\n    this.xAxisStatOptions = [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Count', value: 'count' },\n      { text: 'Current', value: 'current' },\n    ];\n\n    if (this.panel.xaxis.mode === 'custom') {\n      if (!this.panel.xaxis.name) {\n        this.panel.xaxis.name = 'specify field';\n      }\n    }\n    this.selectors = selectors.components.Panels.Visualization.Graph.VisualizationTab;\n  }\n\n  setUnitFormat(axis: { format: any }) {\n    return (unit: string) => {\n      axis.format = unit;\n      // if already set via field config we clear that\n      if (this.panel.fieldConfig.defaults.unit) {\n        this.panel.fieldConfig.defaults.unit = undefined;\n        this.panelCtrl.refresh();\n      } else {\n        this.panelCtrl.render();\n      }\n    };\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  xAxisModeChanged() {\n    this.panelCtrl.processor.setPanelDefaultsForNewXAxisMode();\n    this.panelCtrl.onDataFramesReceived(this.panelCtrl.dataList);\n  }\n\n  xAxisValueChanged() {\n    this.panelCtrl.onDataFramesReceived(this.panelCtrl.dataList);\n  }\n}\n\n/** @ngInject */\nexport function axesEditorComponent() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/graph/axes_editor.html',\n    controller: AxesEditorCtrl,\n  };\n}\n"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,wBAA1B;AAIA,OAAO,MAAMC,cAAN,CAAqB;EAS1B;EACAC,WAAW,CAASC,MAAT,EAAsB;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA,KAAbA,MAAa,GAAbA,MAAa;IAC/B,KAAKC,SAAL,GAAiBD,MAAM,CAACE,IAAxB;IACA,KAAKC,KAAL,GAAa,KAAKF,SAAL,CAAeE,KAA5B;IACA,KAAKH,MAAL,CAAYE,IAAZ,GAAmB,IAAnB;IAEA,KAAKE,SAAL,GAAiB;MACfC,MAAM,EAAE,CADO;MAEf,gBAAgB,CAFD;MAGf,iBAAiB,EAHF;MAIf,iBAAiB,EAJF;MAKf,mBAAmB;IALJ,CAAjB;IAQA,KAAKC,UAAL,GAAkB;MAChBC,IAAI,EAAE,MADU;MAEhBC,MAAM,EAAE,QAFQ;MAGhBC,SAAS,EAAE,WAHK,CAIhB;;IAJgB,CAAlB;IAOA,KAAKC,gBAAL,GAAwB,CACtB;MAAEC,IAAI,EAAE,KAAR;MAAeC,KAAK,EAAE;IAAtB,CADsB,EAEtB;MAAED,IAAI,EAAE,KAAR;MAAeC,KAAK,EAAE;IAAtB,CAFsB,EAGtB;MAAED,IAAI,EAAE,KAAR;MAAeC,KAAK,EAAE;IAAtB,CAHsB,EAItB;MAAED,IAAI,EAAE,OAAR;MAAiBC,KAAK,EAAE;IAAxB,CAJsB,EAKtB;MAAED,IAAI,EAAE,OAAR;MAAiBC,KAAK,EAAE;IAAxB,CALsB,EAMtB;MAAED,IAAI,EAAE,SAAR;MAAmBC,KAAK,EAAE;IAA1B,CANsB,CAAxB;;IASA,IAAI,KAAKT,KAAL,CAAWU,KAAX,CAAiBC,IAAjB,KAA0B,QAA9B,EAAwC;MACtC,IAAI,CAAC,KAAKX,KAAL,CAAWU,KAAX,CAAiBE,IAAtB,EAA4B;QAC1B,KAAKZ,KAAL,CAAWU,KAAX,CAAiBE,IAAjB,GAAwB,eAAxB;MACD;IACF;;IACD,KAAKlB,SAAL,GAAiBA,SAAS,CAACmB,UAAV,CAAqBC,MAArB,CAA4BC,aAA5B,CAA0CC,KAA1C,CAAgDC,gBAAjE;EACD;;EAEDC,aAAa,CAACC,IAAD,EAAwB;IACnC,OAAQC,IAAD,IAAkB;MACvBD,IAAI,CAACE,MAAL,GAAcD,IAAd,CADuB,CAEvB;;MACA,IAAI,KAAKpB,KAAL,CAAWsB,WAAX,CAAuBC,QAAvB,CAAgCH,IAApC,EAA0C;QACxC,KAAKpB,KAAL,CAAWsB,WAAX,CAAuBC,QAAvB,CAAgCH,IAAhC,GAAuCI,SAAvC;QACA,KAAK1B,SAAL,CAAe2B,OAAf;MACD,CAHD,MAGO;QACL,KAAK3B,SAAL,CAAe4B,MAAf;MACD;IACF,CATD;EAUD;;EAEDA,MAAM,GAAG;IACP,KAAK5B,SAAL,CAAe4B,MAAf;EACD;;EAEDC,gBAAgB,GAAG;IACjB,KAAK7B,SAAL,CAAe8B,SAAf,CAAyBC,+BAAzB;IACA,KAAK/B,SAAL,CAAegC,oBAAf,CAAoC,KAAKhC,SAAL,CAAeiC,QAAnD;EACD;;EAEDC,iBAAiB,GAAG;IAClB,KAAKlC,SAAL,CAAegC,oBAAf,CAAoC,KAAKhC,SAAL,CAAeiC,QAAnD;EACD;;AAvEyB;;;AA0E5B;AACA,OAAO,SAASE,mBAAT,GAA+B;EACpC;;EACA,OAAO;IACLC,QAAQ,EAAE,GADL;IAELC,KAAK,EAAE,IAFF;IAGLC,WAAW,EAAE,iDAHR;IAILC,UAAU,EAAE1C;EAJP,CAAP;AAMD"},"metadata":{},"sourceType":"module"}