{"ast":null,"code":"import { clone, keys, sortBy, take, values } from 'lodash';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport store from 'app/core/store';\nimport { SECTION_STORAGE_KEY } from 'app/features/search/constants';\nimport { DashboardSearchItemType, SearchLayout } from 'app/features/search/types';\nimport { hasFilters } from 'app/features/search/utils';\nimport { backendSrv } from './backend_srv';\nexport class SearchSrv {\n  getRecentDashboards(sections) {\n    return this.queryForRecentDashboards().then(result => {\n      if (result.length > 0) {\n        sections['recent'] = {\n          title: 'Recent',\n          icon: 'clock-nine',\n          score: -1,\n          expanded: store.getBool(`${SECTION_STORAGE_KEY}.recent`, true),\n          items: result,\n          type: DashboardSearchItemType.DashFolder\n        };\n      }\n    });\n  }\n\n  queryForRecentDashboards() {\n    const dashIds = take(impressionSrv.getDashboardOpened(), 30);\n\n    if (dashIds.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    return backendSrv.search({\n      dashboardIds: dashIds\n    }).then(result => {\n      return dashIds.map(orderId => result.find(result => result.id === orderId)).filter(hit => hit && !hit.isStarred);\n    });\n  }\n\n  getStarred(sections) {\n    if (!contextSrv.isSignedIn) {\n      return Promise.resolve();\n    }\n\n    return backendSrv.search({\n      starred: true,\n      limit: 30\n    }).then(result => {\n      if (result.length > 0) {\n        sections['starred'] = {\n          title: 'Starred',\n          icon: 'star',\n          score: -2,\n          expanded: store.getBool(`${SECTION_STORAGE_KEY}.starred`, true),\n          items: result,\n          type: DashboardSearchItemType.DashFolder\n        };\n      }\n    });\n  }\n\n  search(options) {\n    var _query$folderIds;\n\n    const sections = {};\n    const promises = [];\n    const query = clone(options);\n    const filters = hasFilters(options) || ((_query$folderIds = query.folderIds) === null || _query$folderIds === void 0 ? void 0 : _query$folderIds.length) > 0;\n    query.folderIds = query.folderIds || [];\n\n    if (query.layout === SearchLayout.List) {\n      return backendSrv.search(Object.assign({}, query, {\n        type: DashboardSearchItemType.DashDB\n      })).then(results => results.length ? [{\n        title: '',\n        items: results\n      }] : []);\n    }\n\n    if (!filters) {\n      query.folderIds = [0];\n    }\n\n    if (!options.skipRecent && !filters) {\n      promises.push(this.getRecentDashboards(sections));\n    }\n\n    if (!options.skipStarred && !filters) {\n      promises.push(this.getStarred(sections));\n    }\n\n    promises.push(backendSrv.search(query).then(results => {\n      return this.handleSearchResult(sections, results);\n    }));\n    return Promise.all(promises).then(() => {\n      return sortBy(values(sections), 'score');\n    });\n  }\n\n  handleSearchResult(sections, results) {\n    if (results.length === 0) {\n      return sections;\n    } // create folder index\n\n\n    for (const hit of results) {\n      if (hit.type === 'dash-folder') {\n        sections[hit.id] = {\n          id: hit.id,\n          uid: hit.uid,\n          title: hit.title,\n          expanded: false,\n          items: [],\n          url: hit.url,\n          icon: 'folder',\n          score: keys(sections).length,\n          type: hit.type\n        };\n      }\n    }\n\n    for (const hit of results) {\n      if (hit.type === 'dash-folder') {\n        continue;\n      }\n\n      let section = sections[hit.folderId || 0];\n\n      if (!section) {\n        if (hit.folderId) {\n          section = {\n            id: hit.folderId,\n            uid: hit.folderUid,\n            title: hit.folderTitle,\n            url: hit.folderUrl,\n            items: [],\n            icon: 'folder-open',\n            score: keys(sections).length,\n            type: DashboardSearchItemType.DashFolder\n          };\n        } else {\n          section = {\n            id: 0,\n            title: 'General',\n            items: [],\n            icon: 'folder-open',\n            score: keys(sections).length,\n            type: DashboardSearchItemType.DashFolder\n          };\n        } // add section\n\n\n        sections[hit.folderId || 0] = section;\n      }\n\n      section.expanded = true;\n      section.items && section.items.push(hit);\n    }\n  }\n\n  getDashboardTags() {\n    return backendSrv.get('/api/dashboards/tags');\n  }\n\n  getSortOptions() {\n    return backendSrv.get('/api/search/sorting');\n  }\n\n}","map":{"version":3,"names":["clone","keys","sortBy","take","values","contextSrv","impressionSrv","store","SECTION_STORAGE_KEY","DashboardSearchItemType","SearchLayout","hasFilters","backendSrv","SearchSrv","getRecentDashboards","sections","queryForRecentDashboards","then","result","length","title","icon","score","expanded","getBool","items","type","DashFolder","dashIds","getDashboardOpened","Promise","resolve","search","dashboardIds","map","orderId","find","id","filter","hit","isStarred","getStarred","isSignedIn","starred","limit","options","promises","query","filters","folderIds","layout","List","DashDB","results","skipRecent","push","skipStarred","handleSearchResult","all","uid","url","section","folderId","folderUid","folderTitle","folderUrl","getDashboardTags","get","getSortOptions"],"sources":["/home/soula/grafana/public/app/core/services/search_srv.ts"],"sourcesContent":["import { clone, keys, sortBy, take, values } from 'lodash';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport store from 'app/core/store';\nimport { SECTION_STORAGE_KEY } from 'app/features/search/constants';\nimport { DashboardSection, DashboardSearchItemType, DashboardSearchHit, SearchLayout } from 'app/features/search/types';\nimport { hasFilters } from 'app/features/search/utils';\n\nimport { backendSrv } from './backend_srv';\n\ninterface Sections {\n  [key: string]: Partial<DashboardSection>;\n}\n\nexport class SearchSrv {\n  private getRecentDashboards(sections: DashboardSection[] | any) {\n    return this.queryForRecentDashboards().then((result: any[]) => {\n      if (result.length > 0) {\n        sections['recent'] = {\n          title: 'Recent',\n          icon: 'clock-nine',\n          score: -1,\n          expanded: store.getBool(`${SECTION_STORAGE_KEY}.recent`, true),\n          items: result,\n          type: DashboardSearchItemType.DashFolder,\n        };\n      }\n    });\n  }\n\n  private queryForRecentDashboards(): Promise<DashboardSearchHit[]> {\n    const dashIds: number[] = take(impressionSrv.getDashboardOpened(), 30);\n    if (dashIds.length === 0) {\n      return Promise.resolve([]);\n    }\n\n    return backendSrv.search({ dashboardIds: dashIds }).then((result) => {\n      return dashIds\n        .map((orderId) => result.find((result) => result.id === orderId))\n        .filter((hit) => hit && !hit.isStarred) as DashboardSearchHit[];\n    });\n  }\n\n  private getStarred(sections: DashboardSection): Promise<any> {\n    if (!contextSrv.isSignedIn) {\n      return Promise.resolve();\n    }\n\n    return backendSrv.search({ starred: true, limit: 30 }).then((result) => {\n      if (result.length > 0) {\n        (sections as any)['starred'] = {\n          title: 'Starred',\n          icon: 'star',\n          score: -2,\n          expanded: store.getBool(`${SECTION_STORAGE_KEY}.starred`, true),\n          items: result,\n          type: DashboardSearchItemType.DashFolder,\n        };\n      }\n    });\n  }\n\n  search(options: any) {\n    const sections: any = {};\n    const promises = [];\n    const query = clone(options);\n    const filters = hasFilters(options) || query.folderIds?.length > 0;\n\n    query.folderIds = query.folderIds || [];\n\n    if (query.layout === SearchLayout.List) {\n      return backendSrv\n        .search({ ...query, type: DashboardSearchItemType.DashDB })\n        .then((results) => (results.length ? [{ title: '', items: results }] : []));\n    }\n\n    if (!filters) {\n      query.folderIds = [0];\n    }\n\n    if (!options.skipRecent && !filters) {\n      promises.push(this.getRecentDashboards(sections));\n    }\n\n    if (!options.skipStarred && !filters) {\n      promises.push(this.getStarred(sections));\n    }\n\n    promises.push(\n      backendSrv.search(query).then((results) => {\n        return this.handleSearchResult(sections, results);\n      })\n    );\n\n    return Promise.all(promises).then(() => {\n      return sortBy(values(sections), 'score');\n    });\n  }\n\n  private handleSearchResult(sections: Sections, results: DashboardSearchHit[]): any {\n    if (results.length === 0) {\n      return sections;\n    }\n\n    // create folder index\n    for (const hit of results) {\n      if (hit.type === 'dash-folder') {\n        sections[hit.id] = {\n          id: hit.id,\n          uid: hit.uid,\n          title: hit.title,\n          expanded: false,\n          items: [],\n          url: hit.url,\n          icon: 'folder',\n          score: keys(sections).length,\n          type: hit.type,\n        };\n      }\n    }\n\n    for (const hit of results) {\n      if (hit.type === 'dash-folder') {\n        continue;\n      }\n\n      let section = sections[hit.folderId || 0];\n      if (!section) {\n        if (hit.folderId) {\n          section = {\n            id: hit.folderId,\n            uid: hit.folderUid,\n            title: hit.folderTitle,\n            url: hit.folderUrl,\n            items: [],\n            icon: 'folder-open',\n            score: keys(sections).length,\n            type: DashboardSearchItemType.DashFolder,\n          };\n        } else {\n          section = {\n            id: 0,\n            title: 'General',\n            items: [],\n            icon: 'folder-open',\n            score: keys(sections).length,\n            type: DashboardSearchItemType.DashFolder,\n          };\n        }\n        // add section\n        sections[hit.folderId || 0] = section;\n      }\n\n      section.expanded = true;\n      section.items && section.items.push(hit);\n    }\n  }\n\n  getDashboardTags() {\n    return backendSrv.get('/api/dashboards/tags');\n  }\n\n  getSortOptions() {\n    return backendSrv.get('/api/search/sorting');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}