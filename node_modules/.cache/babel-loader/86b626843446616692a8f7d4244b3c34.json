{"ast":null,"code":"import { filterFieldsByNameTransformer } from './filterByName';\nimport { DataTransformerID } from './ids';\nimport { orderFieldsTransformer } from './order';\nimport { renameFieldsTransformer } from './rename';\nexport const organizeFieldsTransformer = {\n  id: DataTransformerID.organize,\n  name: 'Organize fields by name',\n  description: 'Order, filter and rename fields based on configuration given by user',\n  defaultOptions: {\n    excludeByName: {},\n    indexByName: {},\n    renameByName: {}\n  },\n\n  /**\n   * Return a modified copy of the series.  If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: options => source => source.pipe(filterFieldsByNameTransformer.operator({\n    exclude: {\n      names: mapToExcludeArray(options.excludeByName)\n    }\n  }), orderFieldsTransformer.operator(options), renameFieldsTransformer.operator(options))\n};\n\nconst mapToExcludeArray = excludeByName => {\n  if (!excludeByName) {\n    return [];\n  }\n\n  return Object.keys(excludeByName).filter(name => excludeByName[name]);\n};","map":{"version":3,"names":["filterFieldsByNameTransformer","DataTransformerID","orderFieldsTransformer","renameFieldsTransformer","organizeFieldsTransformer","id","organize","name","description","defaultOptions","excludeByName","indexByName","renameByName","operator","options","source","pipe","exclude","names","mapToExcludeArray","Object","keys","filter"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/transformers/organize.ts"],"sourcesContent":["import { DataTransformerInfo } from '../../types/transformations';\n\nimport { filterFieldsByNameTransformer } from './filterByName';\nimport { DataTransformerID } from './ids';\nimport { orderFieldsTransformer, OrderFieldsTransformerOptions } from './order';\nimport { renameFieldsTransformer, RenameFieldsTransformerOptions } from './rename';\n\nexport interface OrganizeFieldsTransformerOptions\n  extends OrderFieldsTransformerOptions,\n    RenameFieldsTransformerOptions {\n  excludeByName: Record<string, boolean>;\n}\n\nexport const organizeFieldsTransformer: DataTransformerInfo<OrganizeFieldsTransformerOptions> = {\n  id: DataTransformerID.organize,\n  name: 'Organize fields by name',\n  description: 'Order, filter and rename fields based on configuration given by user',\n  defaultOptions: {\n    excludeByName: {},\n    indexByName: {},\n    renameByName: {},\n  },\n\n  /**\n   * Return a modified copy of the series.  If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options) => (source) =>\n    source.pipe(\n      filterFieldsByNameTransformer.operator({\n        exclude: { names: mapToExcludeArray(options.excludeByName) },\n      }),\n      orderFieldsTransformer.operator(options),\n      renameFieldsTransformer.operator(options)\n    ),\n};\n\nconst mapToExcludeArray = (excludeByName: Record<string, boolean>): string[] => {\n  if (!excludeByName) {\n    return [];\n  }\n\n  return Object.keys(excludeByName).filter((name) => excludeByName[name]);\n};\n"],"mappings":"AAEA,SAASA,6BAAT,QAA8C,gBAA9C;AACA,SAASC,iBAAT,QAAkC,OAAlC;AACA,SAASC,sBAAT,QAAsE,SAAtE;AACA,SAASC,uBAAT,QAAwE,UAAxE;AAQA,OAAO,MAAMC,yBAAgF,GAAG;EAC9FC,EAAE,EAAEJ,iBAAiB,CAACK,QADwE;EAE9FC,IAAI,EAAE,yBAFwF;EAG9FC,WAAW,EAAE,sEAHiF;EAI9FC,cAAc,EAAE;IACdC,aAAa,EAAE,EADD;IAEdC,WAAW,EAAE,EAFC;IAGdC,YAAY,EAAE;EAHA,CAJ8E;;EAU9F;AACF;AACA;AACA;EACEC,QAAQ,EAAGC,OAAD,IAAcC,MAAD,IACrBA,MAAM,CAACC,IAAP,CACEhB,6BAA6B,CAACa,QAA9B,CAAuC;IACrCI,OAAO,EAAE;MAAEC,KAAK,EAAEC,iBAAiB,CAACL,OAAO,CAACJ,aAAT;IAA1B;EAD4B,CAAvC,CADF,EAIER,sBAAsB,CAACW,QAAvB,CAAgCC,OAAhC,CAJF,EAKEX,uBAAuB,CAACU,QAAxB,CAAiCC,OAAjC,CALF;AAf4F,CAAzF;;AAwBP,MAAMK,iBAAiB,GAAIT,aAAD,IAAsD;EAC9E,IAAI,CAACA,aAAL,EAAoB;IAClB,OAAO,EAAP;EACD;;EAED,OAAOU,MAAM,CAACC,IAAP,CAAYX,aAAZ,EAA2BY,MAA3B,CAAmCf,IAAD,IAAUG,aAAa,CAACH,IAAD,CAAzD,CAAP;AACD,CAND"},"metadata":{},"sourceType":"module"}