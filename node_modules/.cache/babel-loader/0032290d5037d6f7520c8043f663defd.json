{"ast":null,"code":"var _Icon;\n\nimport { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { Icon, Button, MultiSelect, useStyles2 } from '@grafana/ui';\nimport { getAllPanelPluginMeta } from 'app/features/panel/state/util';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const PanelTypeFilter = ({\n  onChange: propsOnChange,\n  maxMenuHeight\n}) => {\n  const plugins = useMemo(() => {\n    return getAllPanelPluginMeta();\n  }, []);\n  const options = useMemo(() => plugins.map(p => ({\n    label: p.name,\n    imgUrl: p.info.logos.small,\n    value: p\n  })).sort((a, b) => {\n    var _a$label;\n\n    return (_a$label = a.label) === null || _a$label === void 0 ? void 0 : _a$label.localeCompare(b.label);\n  }), [plugins]);\n  const [value, setValue] = useState([]);\n  const onChange = useCallback(plugins => {\n    const changedPlugins = [];\n\n    for (const plugin of plugins) {\n      if (plugin.value) {\n        changedPlugins.push(plugin.value);\n      }\n    }\n\n    propsOnChange(changedPlugins);\n    setValue(plugins);\n  }, [propsOnChange]);\n  const styles = useStyles2(getStyles);\n  const selectOptions = {\n    defaultOptions: true,\n    getOptionLabel: i => i.label,\n    getOptionValue: i => i.value,\n    noOptionsMessage: 'No Panel types found',\n    placeholder: 'Filter by type',\n    maxMenuHeight,\n    options,\n    value,\n    onChange\n  };\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.container,\n    children: [value.length > 0 && /*#__PURE__*/_jsx(Button, {\n      size: \"xs\",\n      icon: \"trash-alt\",\n      fill: \"text\",\n      className: styles.clear,\n      onClick: () => onChange([]),\n      \"aria-label\": \"Clear types\",\n      children: \"Clear types\"\n    }), /*#__PURE__*/_jsx(MultiSelect, Object.assign({}, selectOptions, {\n      prefix: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n        name: \"filter\"\n      })),\n      \"aria-label\": \"Panel Type filter\"\n    }))]\n  });\n};\n\nfunction getStyles(theme) {\n  return {\n    container: css`\n      label: container;\n      position: relative;\n      min-width: 180px;\n      flex-grow: 1;\n    `,\n    clear: css`\n      label: clear;\n      font-size: ${theme.spacing(1.5)};\n      position: absolute;\n      top: -${theme.spacing(4.5)};\n      right: 0;\n    `\n  };\n}","map":{"version":3,"names":["css","React","useCallback","useMemo","useState","Icon","Button","MultiSelect","useStyles2","getAllPanelPluginMeta","PanelTypeFilter","onChange","propsOnChange","maxMenuHeight","plugins","options","map","p","label","name","imgUrl","info","logos","small","value","sort","a","b","localeCompare","setValue","changedPlugins","plugin","push","styles","getStyles","selectOptions","defaultOptions","getOptionLabel","i","getOptionValue","noOptionsMessage","placeholder","container","length","clear","theme","spacing"],"sources":["/home/soula/grafana/public/app/core/components/PanelTypeFilter/PanelTypeFilter.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, PanelPluginMeta, SelectableValue } from '@grafana/data';\nimport { Icon, Button, MultiSelect, useStyles2 } from '@grafana/ui';\nimport { getAllPanelPluginMeta } from 'app/features/panel/state/util';\n\nexport interface Props {\n  onChange: (plugins: PanelPluginMeta[]) => void;\n  maxMenuHeight?: number;\n}\n\nexport const PanelTypeFilter = ({ onChange: propsOnChange, maxMenuHeight }: Props): JSX.Element => {\n  const plugins = useMemo<PanelPluginMeta[]>(() => {\n    return getAllPanelPluginMeta();\n  }, []);\n  const options = useMemo(\n    () =>\n      plugins\n        .map((p) => ({ label: p.name, imgUrl: p.info.logos.small, value: p }))\n        .sort((a, b) => a.label?.localeCompare(b.label)),\n    [plugins]\n  );\n  const [value, setValue] = useState<Array<SelectableValue<PanelPluginMeta>>>([]);\n  const onChange = useCallback(\n    (plugins: Array<SelectableValue<PanelPluginMeta>>) => {\n      const changedPlugins = [];\n      for (const plugin of plugins) {\n        if (plugin.value) {\n          changedPlugins.push(plugin.value);\n        }\n      }\n      propsOnChange(changedPlugins);\n      setValue(plugins);\n    },\n    [propsOnChange]\n  );\n  const styles = useStyles2(getStyles);\n\n  const selectOptions = {\n    defaultOptions: true,\n    getOptionLabel: (i: any) => i.label,\n    getOptionValue: (i: any) => i.value,\n    noOptionsMessage: 'No Panel types found',\n    placeholder: 'Filter by type',\n    maxMenuHeight,\n    options,\n    value,\n    onChange,\n  };\n\n  return (\n    <div className={styles.container}>\n      {value.length > 0 && (\n        <Button\n          size=\"xs\"\n          icon=\"trash-alt\"\n          fill=\"text\"\n          className={styles.clear}\n          onClick={() => onChange([])}\n          aria-label=\"Clear types\"\n        >\n          Clear types\n        </Button>\n      )}\n      <MultiSelect {...selectOptions} prefix={<Icon name=\"filter\" />} aria-label=\"Panel Type filter\" />\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      label: container;\n      position: relative;\n      min-width: 180px;\n      flex-grow: 1;\n    `,\n    clear: css`\n      label: clear;\n      font-size: ${theme.spacing(1.5)};\n      position: absolute;\n      top: -${theme.spacing(4.5)};\n      right: 0;\n    `,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}