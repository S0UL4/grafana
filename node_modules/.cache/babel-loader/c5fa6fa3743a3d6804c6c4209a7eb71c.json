{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { cloneDeep } from 'lodash';\nimport { forkJoin, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LoadingState } from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\nimport { getTemplateSrv } from 'app/features/templating/template_srv';\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AzureResourceGraphDatasource from './azure_resource_graph/azure_resource_graph_datasource';\nimport ResourcePickerData from './resourcePicker/resourcePickerData';\nimport { AzureQueryType } from './types';\nimport migrateAnnotation from './utils/migrateAnnotation';\nimport { datasourceMigrations } from './utils/migrateQuery';\nimport { VariableSupport } from './variables';\nexport default class Datasource extends DataSourceWithBackend {\n  constructor(instanceSettings, templateSrv = getTemplateSrv()) {\n    super(instanceSettings);\n\n    _defineProperty(this, \"annotations\", {\n      prepareAnnotation: migrateAnnotation\n    });\n\n    _defineProperty(this, \"azureMonitorDatasource\", void 0);\n\n    _defineProperty(this, \"azureLogAnalyticsDatasource\", void 0);\n\n    _defineProperty(this, \"resourcePickerData\", void 0);\n\n    _defineProperty(this, \"azureResourceGraphDatasource\", void 0);\n\n    _defineProperty(this, \"pseudoDatasource\", {});\n\n    this.templateSrv = templateSrv;\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings);\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(instanceSettings);\n    this.azureResourceGraphDatasource = new AzureResourceGraphDatasource(instanceSettings);\n    this.resourcePickerData = new ResourcePickerData(instanceSettings);\n    this.pseudoDatasource = {\n      [AzureQueryType.AzureMonitor]: this.azureMonitorDatasource,\n      [AzureQueryType.LogAnalytics]: this.azureLogAnalyticsDatasource,\n      [AzureQueryType.AzureResourceGraph]: this.azureResourceGraphDatasource\n    };\n    this.variables = new VariableSupport(this);\n  }\n\n  filterQuery(item) {\n    var _ds$filterQuery, _ds$filterQuery2;\n\n    if (!item.queryType) {\n      return true;\n    }\n\n    const ds = this.pseudoDatasource[item.queryType];\n    return (_ds$filterQuery = ds === null || ds === void 0 ? void 0 : (_ds$filterQuery2 = ds.filterQuery) === null || _ds$filterQuery2 === void 0 ? void 0 : _ds$filterQuery2.call(ds, item)) !== null && _ds$filterQuery !== void 0 ? _ds$filterQuery : true;\n  }\n\n  query(options) {\n    const byType = new Map();\n\n    for (const baseTarget of options.targets) {\n      // Migrate old query structures\n      const target = datasourceMigrations(baseTarget); // Skip hidden or invalid queries or ones without properties\n\n      if (!target.queryType || target.hide || !hasQueryForType(target)) {\n        continue;\n      } // Initialize the list of queries\n\n\n      if (!byType.has(target.queryType)) {\n        const queryForType = cloneDeep(options);\n        queryForType.requestId = `${queryForType.requestId}-${target.refId}`;\n        queryForType.targets = [];\n        byType.set(target.queryType, queryForType);\n      }\n\n      const queryForType = byType.get(target.queryType);\n      queryForType === null || queryForType === void 0 ? void 0 : queryForType.targets.push(target);\n    }\n\n    const observables = Array.from(byType.entries()).map(([queryType, req]) => {\n      const ds = this.pseudoDatasource[queryType];\n\n      if (!ds) {\n        throw new Error('Data source not created for query type ' + queryType);\n      }\n\n      return ds.query(req);\n    }); // Single query can skip merge\n\n    if (observables.length === 1) {\n      return observables[0];\n    }\n\n    if (observables.length > 1) {\n      return forkJoin(observables).pipe(map(results => {\n        const data = [];\n\n        for (const result of results) {\n          for (const frame of result.data) {\n            data.push(frame);\n          }\n        }\n\n        return {\n          state: LoadingState.Done,\n          data\n        };\n      }));\n    }\n\n    return of({\n      state: LoadingState.Done,\n      data: []\n    });\n  }\n\n  targetContainsTemplate(query) {\n    if (query.subscription && this.templateSrv.containsTemplate(query.subscription)) {\n      return true;\n    }\n\n    let subQuery;\n\n    if (query.queryType === AzureQueryType.AzureMonitor) {\n      subQuery = JSON.stringify(query.azureMonitor);\n    } else if (query.queryType === AzureQueryType.LogAnalytics) {\n      subQuery = JSON.stringify(query.azureLogAnalytics);\n    } else if (query.queryType === AzureQueryType.AzureResourceGraph) {\n      subQuery = JSON.stringify([query.azureResourceGraph, query.subscriptions]);\n    }\n\n    return !!subQuery && this.templateSrv.containsTemplate(subQuery);\n  }\n\n  async annotationQuery(options) {\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\n  }\n  /* Azure Monitor REST API methods */\n\n\n  getResourceGroups(subscriptionId) {\n    return this.azureMonitorDatasource.getResourceGroups(this.templateSrv.replace(subscriptionId));\n  }\n\n  getMetricDefinitions(subscriptionId, resourceGroup) {\n    return this.azureMonitorDatasource.getMetricDefinitions(this.templateSrv.replace(subscriptionId), this.templateSrv.replace(resourceGroup));\n  }\n\n  getResourceNames(subscriptionId, resourceGroup, metricDefinition) {\n    return this.azureMonitorDatasource.getResourceNames(this.templateSrv.replace(subscriptionId), this.templateSrv.replace(resourceGroup), this.templateSrv.replace(metricDefinition));\n  }\n  /*Azure Log Analytics */\n\n\n  getAzureLogAnalyticsWorkspaces(subscriptionId) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n\n  interpolateVariablesInQueries(queries, scopedVars) {\n    const mapped = queries.map(query => {\n      var _ds$applyTemplateVari;\n\n      if (!query.queryType) {\n        return query;\n      }\n\n      const ds = this.pseudoDatasource[query.queryType];\n      return Object.assign({\n        datasource: ds === null || ds === void 0 ? void 0 : ds.getRef()\n      }, (_ds$applyTemplateVari = ds === null || ds === void 0 ? void 0 : ds.applyTemplateVariables(query, scopedVars)) !== null && _ds$applyTemplateVari !== void 0 ? _ds$applyTemplateVari : query);\n    });\n    return mapped;\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map(v => `$${v.name}`);\n  }\n\n}\n\nfunction hasQueryForType(query) {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return !!query.azureMonitor;\n\n    case AzureQueryType.LogAnalytics:\n      return !!query.azureLogAnalytics;\n\n    case AzureQueryType.AzureResourceGraph:\n      return !!query.azureResourceGraph;\n\n    case AzureQueryType.GrafanaTemplateVariableFn:\n      return !!query.grafanaTemplateVariableFn;\n\n    default:\n      return false;\n  }\n}","map":{"version":3,"names":["cloneDeep","forkJoin","of","map","LoadingState","DataSourceWithBackend","getTemplateSrv","AzureLogAnalyticsDatasource","AzureMonitorDatasource","AzureResourceGraphDatasource","ResourcePickerData","AzureQueryType","migrateAnnotation","datasourceMigrations","VariableSupport","Datasource","constructor","instanceSettings","templateSrv","prepareAnnotation","azureMonitorDatasource","azureLogAnalyticsDatasource","azureResourceGraphDatasource","resourcePickerData","pseudoDatasource","AzureMonitor","LogAnalytics","AzureResourceGraph","variables","filterQuery","item","queryType","ds","query","options","byType","Map","baseTarget","targets","target","hide","hasQueryForType","has","queryForType","requestId","refId","set","get","push","observables","Array","from","entries","req","Error","length","pipe","results","data","result","frame","state","Done","targetContainsTemplate","subscription","containsTemplate","subQuery","JSON","stringify","azureMonitor","azureLogAnalytics","azureResourceGraph","subscriptions","annotationQuery","getResourceGroups","subscriptionId","replace","getMetricDefinitions","resourceGroup","getResourceNames","metricDefinition","getAzureLogAnalyticsWorkspaces","getWorkspaces","getSubscriptions","interpolateVariablesInQueries","queries","scopedVars","mapped","datasource","getRef","applyTemplateVariables","getVariables","v","name","GrafanaTemplateVariableFn","grafanaTemplateVariableFn"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/datasource.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  LoadingState,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport AzureLogAnalyticsDatasource from './azure_log_analytics/azure_log_analytics_datasource';\nimport AzureMonitorDatasource from './azure_monitor/azure_monitor_datasource';\nimport AzureResourceGraphDatasource from './azure_resource_graph/azure_resource_graph_datasource';\nimport ResourcePickerData from './resourcePicker/resourcePickerData';\nimport { AzureDataSourceJsonData, AzureMonitorQuery, AzureQueryType } from './types';\nimport migrateAnnotation from './utils/migrateAnnotation';\nimport { datasourceMigrations } from './utils/migrateQuery';\nimport { VariableSupport } from './variables';\n\nexport default class Datasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  annotations = {\n    prepareAnnotation: migrateAnnotation,\n  };\n\n  azureMonitorDatasource: AzureMonitorDatasource;\n  azureLogAnalyticsDatasource: AzureLogAnalyticsDatasource;\n  resourcePickerData: ResourcePickerData;\n  azureResourceGraphDatasource: AzureResourceGraphDatasource;\n\n  pseudoDatasource: {\n    [key in AzureQueryType]?: AzureMonitorDatasource | AzureLogAnalyticsDatasource | AzureResourceGraphDatasource;\n  } = {};\n\n  declare optionsKey: Record<AzureQueryType, string>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.azureMonitorDatasource = new AzureMonitorDatasource(instanceSettings);\n    this.azureLogAnalyticsDatasource = new AzureLogAnalyticsDatasource(instanceSettings);\n    this.azureResourceGraphDatasource = new AzureResourceGraphDatasource(instanceSettings);\n    this.resourcePickerData = new ResourcePickerData(instanceSettings);\n\n    this.pseudoDatasource = {\n      [AzureQueryType.AzureMonitor]: this.azureMonitorDatasource,\n      [AzureQueryType.LogAnalytics]: this.azureLogAnalyticsDatasource,\n      [AzureQueryType.AzureResourceGraph]: this.azureResourceGraphDatasource,\n    };\n\n    this.variables = new VariableSupport(this);\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    if (!item.queryType) {\n      return true;\n    }\n    const ds = this.pseudoDatasource[item.queryType];\n    return ds?.filterQuery?.(item) ?? true;\n  }\n\n  query(options: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    const byType = new Map<AzureQueryType, DataQueryRequest<AzureMonitorQuery>>();\n\n    for (const baseTarget of options.targets) {\n      // Migrate old query structures\n      const target = datasourceMigrations(baseTarget);\n\n      // Skip hidden or invalid queries or ones without properties\n      if (!target.queryType || target.hide || !hasQueryForType(target)) {\n        continue;\n      }\n\n      // Initialize the list of queries\n      if (!byType.has(target.queryType)) {\n        const queryForType = cloneDeep(options);\n        queryForType.requestId = `${queryForType.requestId}-${target.refId}`;\n        queryForType.targets = [];\n        byType.set(target.queryType, queryForType);\n      }\n\n      const queryForType = byType.get(target.queryType);\n      queryForType?.targets.push(target);\n    }\n\n    const observables: Array<Observable<DataQueryResponse>> = Array.from(byType.entries()).map(([queryType, req]) => {\n      const ds = this.pseudoDatasource[queryType];\n      if (!ds) {\n        throw new Error('Data source not created for query type ' + queryType);\n      }\n\n      return ds.query(req);\n    });\n\n    // Single query can skip merge\n    if (observables.length === 1) {\n      return observables[0];\n    }\n\n    if (observables.length > 1) {\n      return forkJoin(observables).pipe(\n        map((results: DataQueryResponse[]) => {\n          const data: DataFrame[] = [];\n          for (const result of results) {\n            for (const frame of result.data) {\n              data.push(frame);\n            }\n          }\n\n          return { state: LoadingState.Done, data };\n        })\n      );\n    }\n\n    return of({ state: LoadingState.Done, data: [] });\n  }\n\n  targetContainsTemplate(query: AzureMonitorQuery) {\n    if (query.subscription && this.templateSrv.containsTemplate(query.subscription)) {\n      return true;\n    }\n\n    let subQuery;\n    if (query.queryType === AzureQueryType.AzureMonitor) {\n      subQuery = JSON.stringify(query.azureMonitor);\n    } else if (query.queryType === AzureQueryType.LogAnalytics) {\n      subQuery = JSON.stringify(query.azureLogAnalytics);\n    } else if (query.queryType === AzureQueryType.AzureResourceGraph) {\n      subQuery = JSON.stringify([query.azureResourceGraph, query.subscriptions]);\n    }\n\n    return !!subQuery && this.templateSrv.containsTemplate(subQuery);\n  }\n\n  async annotationQuery(options: any) {\n    return this.azureLogAnalyticsDatasource.annotationQuery(options);\n  }\n\n  /* Azure Monitor REST API methods */\n  getResourceGroups(subscriptionId: string) {\n    return this.azureMonitorDatasource.getResourceGroups(this.templateSrv.replace(subscriptionId));\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.azureMonitorDatasource.getMetricDefinitions(\n      this.templateSrv.replace(subscriptionId),\n      this.templateSrv.replace(resourceGroup)\n    );\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string) {\n    return this.azureMonitorDatasource.getResourceNames(\n      this.templateSrv.replace(subscriptionId),\n      this.templateSrv.replace(resourceGroup),\n      this.templateSrv.replace(metricDefinition)\n    );\n  }\n\n  /*Azure Log Analytics */\n  getAzureLogAnalyticsWorkspaces(subscriptionId: string) {\n    return this.azureLogAnalyticsDatasource.getWorkspaces(subscriptionId);\n  }\n\n  getSubscriptions() {\n    return this.azureMonitorDatasource.getSubscriptions();\n  }\n\n  interpolateVariablesInQueries(queries: AzureMonitorQuery[], scopedVars: ScopedVars): AzureMonitorQuery[] {\n    const mapped = queries.map((query) => {\n      if (!query.queryType) {\n        return query;\n      }\n\n      const ds = this.pseudoDatasource[query.queryType];\n      return {\n        datasource: ds?.getRef(),\n        ...(ds?.applyTemplateVariables(query, scopedVars) ?? query),\n      };\n    });\n\n    return mapped;\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n}\n\nfunction hasQueryForType(query: AzureMonitorQuery): boolean {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return !!query.azureMonitor;\n\n    case AzureQueryType.LogAnalytics:\n      return !!query.azureLogAnalytics;\n\n    case AzureQueryType.AzureResourceGraph:\n      return !!query.azureResourceGraph;\n\n    case AzureQueryType.GrafanaTemplateVariableFn:\n      return !!query.grafanaTemplateVariableFn;\n\n    default:\n      return false;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}