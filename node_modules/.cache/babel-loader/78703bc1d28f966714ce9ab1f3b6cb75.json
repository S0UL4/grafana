{"ast":null,"code":"import { uniqueId } from 'lodash';\nimport React, { useRef } from 'react';\nimport { InternalTimeZones } from '@grafana/data';\nimport { InlineField, Input, Select, TimeZonePicker } from '@grafana/ui';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { useCreatableSelectPersistedBehaviour } from '../../../hooks/useCreatableSelectPersistedBehaviour';\nimport { changeBucketAggregationSetting } from '../state/actions';\nimport { bucketAggregationConfig } from '../utils';\nimport { inlineFieldProps } from '.';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultIntervalOptions = [{\n  label: 'auto',\n  value: 'auto'\n}, {\n  label: '10s',\n  value: '10s'\n}, {\n  label: '1m',\n  value: '1m'\n}, {\n  label: '5m',\n  value: '5m'\n}, {\n  label: '10m',\n  value: '10m'\n}, {\n  label: '20m',\n  value: '20m'\n}, {\n  label: '1h',\n  value: '1h'\n}, {\n  label: '1d',\n  value: '1d'\n}];\n\nconst hasValue = searchValue => ({\n  value\n}) => value === searchValue;\n\nconst isValidNewOption = (inputValue, _, options) => {\n  // TODO: would be extremely nice here to allow only template variables and values that are\n  // valid date histogram's Interval options\n  const valueExists = options.some(hasValue(inputValue)); // we also don't want users to create \"empty\" values\n\n  return !valueExists && inputValue.trim().length > 0;\n};\n\nconst optionStartsWithValue = (option, value) => {\n  var _option$value;\n\n  return ((_option$value = option.value) === null || _option$value === void 0 ? void 0 : _option$value.startsWith(value)) || false;\n};\n\nexport const DateHistogramSettingsEditor = ({\n  bucketAgg\n}) => {\n  var _bucketAgg$settings, _bucketAggregationCon, _bucketAgg$settings2, _bucketAggregationCon2, _bucketAgg$settings3, _bucketAggregationCon3, _bucketAgg$settings4, _bucketAggregationCon4, _bucketAgg$settings5, _bucketAggregationCon5;\n\n  const dispatch = useDispatch();\n  const {\n    current: baseId\n  } = useRef(uniqueId('es-date_histogram-'));\n\n  const handleIntervalChange = ({\n    value\n  }) => dispatch(changeBucketAggregationSetting({\n    bucketAgg,\n    settingName: 'interval',\n    newValue: value\n  }));\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Interval\"\n    }, inlineFieldProps, {\n      children: /*#__PURE__*/_jsx(Select, Object.assign({\n        inputId: uniqueId('es-date_histogram-interval'),\n        isValidNewOption: isValidNewOption,\n        filterOption: optionStartsWithValue\n      }, useCreatableSelectPersistedBehaviour({\n        options: defaultIntervalOptions,\n        value: ((_bucketAgg$settings = bucketAgg.settings) === null || _bucketAgg$settings === void 0 ? void 0 : _bucketAgg$settings.interval) || ((_bucketAggregationCon = bucketAggregationConfig.date_histogram.defaultSettings) === null || _bucketAggregationCon === void 0 ? void 0 : _bucketAggregationCon.interval),\n        onChange: handleIntervalChange\n      })))\n    })), /*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Min Doc Count\"\n    }, inlineFieldProps, {\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `${baseId}-min_doc_count`,\n        onBlur: e => dispatch(changeBucketAggregationSetting({\n          bucketAgg,\n          settingName: 'min_doc_count',\n          newValue: e.target.value\n        })),\n        defaultValue: ((_bucketAgg$settings2 = bucketAgg.settings) === null || _bucketAgg$settings2 === void 0 ? void 0 : _bucketAgg$settings2.min_doc_count) || ((_bucketAggregationCon2 = bucketAggregationConfig.date_histogram.defaultSettings) === null || _bucketAggregationCon2 === void 0 ? void 0 : _bucketAggregationCon2.min_doc_count)\n      })\n    })), /*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Trim Edges\"\n    }, inlineFieldProps, {\n      tooltip: \"Trim the edges on the timeseries datapoints\",\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `${baseId}-trime_edges`,\n        onBlur: e => dispatch(changeBucketAggregationSetting({\n          bucketAgg,\n          settingName: 'trimEdges',\n          newValue: e.target.value\n        })),\n        defaultValue: ((_bucketAgg$settings3 = bucketAgg.settings) === null || _bucketAgg$settings3 === void 0 ? void 0 : _bucketAgg$settings3.trimEdges) || ((_bucketAggregationCon3 = bucketAggregationConfig.date_histogram.defaultSettings) === null || _bucketAggregationCon3 === void 0 ? void 0 : _bucketAggregationCon3.trimEdges)\n      })\n    })), /*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Offset\"\n    }, inlineFieldProps, {\n      tooltip: \"Change the start value of each bucket by the specified positive (+) or negative offset (-) duration, such as 1h for an hour, or 1d for a day\",\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `${baseId}-offset`,\n        onBlur: e => dispatch(changeBucketAggregationSetting({\n          bucketAgg,\n          settingName: 'offset',\n          newValue: e.target.value\n        })),\n        defaultValue: ((_bucketAgg$settings4 = bucketAgg.settings) === null || _bucketAgg$settings4 === void 0 ? void 0 : _bucketAgg$settings4.offset) || ((_bucketAggregationCon4 = bucketAggregationConfig.date_histogram.defaultSettings) === null || _bucketAggregationCon4 === void 0 ? void 0 : _bucketAggregationCon4.offset)\n      })\n    })), /*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Timezone\"\n    }, inlineFieldProps, {\n      children: /*#__PURE__*/_jsx(TimeZonePicker, {\n        value: ((_bucketAgg$settings5 = bucketAgg.settings) === null || _bucketAgg$settings5 === void 0 ? void 0 : _bucketAgg$settings5.timeZone) || ((_bucketAggregationCon5 = bucketAggregationConfig.date_histogram.defaultSettings) === null || _bucketAggregationCon5 === void 0 ? void 0 : _bucketAggregationCon5.timeZone),\n        includeInternal: [InternalTimeZones.utc],\n        onChange: timeZone => {\n          dispatch(changeBucketAggregationSetting({\n            bucketAgg,\n            settingName: 'timeZone',\n            newValue: timeZone\n          }));\n        }\n      })\n    }))]\n  });\n};","map":{"version":3,"names":["uniqueId","React","useRef","InternalTimeZones","InlineField","Input","Select","TimeZonePicker","useDispatch","useCreatableSelectPersistedBehaviour","changeBucketAggregationSetting","bucketAggregationConfig","inlineFieldProps","defaultIntervalOptions","label","value","hasValue","searchValue","isValidNewOption","inputValue","_","options","valueExists","some","trim","length","optionStartsWithValue","option","startsWith","DateHistogramSettingsEditor","bucketAgg","dispatch","current","baseId","handleIntervalChange","settingName","newValue","settings","interval","date_histogram","defaultSettings","onChange","e","target","min_doc_count","trimEdges","offset","timeZone","utc"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/DateHistogramSettingsEditor.tsx"],"sourcesContent":["import { uniqueId } from 'lodash';\nimport React, { useRef } from 'react';\nimport { GroupBase, OptionsOrGroups } from 'react-select';\n\nimport { InternalTimeZones, SelectableValue } from '@grafana/data';\nimport { InlineField, Input, Select, TimeZonePicker } from '@grafana/ui';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { useCreatableSelectPersistedBehaviour } from '../../../hooks/useCreatableSelectPersistedBehaviour';\nimport { DateHistogram } from '../aggregations';\nimport { changeBucketAggregationSetting } from '../state/actions';\nimport { bucketAggregationConfig } from '../utils';\n\nimport { inlineFieldProps } from '.';\n\nconst defaultIntervalOptions: Array<SelectableValue<string>> = [\n  { label: 'auto', value: 'auto' },\n  { label: '10s', value: '10s' },\n  { label: '1m', value: '1m' },\n  { label: '5m', value: '5m' },\n  { label: '10m', value: '10m' },\n  { label: '20m', value: '20m' },\n  { label: '1h', value: '1h' },\n  { label: '1d', value: '1d' },\n];\n\nconst hasValue =\n  (searchValue: string) =>\n  ({ value }: SelectableValue<string>) =>\n    value === searchValue;\n\nconst isValidNewOption = (\n  inputValue: string,\n  _: SelectableValue<string> | null,\n  options: OptionsOrGroups<unknown, GroupBase<unknown>>\n) => {\n  // TODO: would be extremely nice here to allow only template variables and values that are\n  // valid date histogram's Interval options\n  const valueExists = (options as Array<SelectableValue<string>>).some(hasValue(inputValue));\n  // we also don't want users to create \"empty\" values\n  return !valueExists && inputValue.trim().length > 0;\n};\n\nconst optionStartsWithValue = (option: SelectableValue<string>, value: string) =>\n  option.value?.startsWith(value) || false;\n\ninterface Props {\n  bucketAgg: DateHistogram;\n}\n\nexport const DateHistogramSettingsEditor = ({ bucketAgg }: Props) => {\n  const dispatch = useDispatch();\n  const { current: baseId } = useRef(uniqueId('es-date_histogram-'));\n\n  const handleIntervalChange = ({ value }: SelectableValue<string>) =>\n    dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'interval', newValue: value }));\n\n  return (\n    <>\n      <InlineField label=\"Interval\" {...inlineFieldProps}>\n        <Select\n          inputId={uniqueId('es-date_histogram-interval')}\n          isValidNewOption={isValidNewOption}\n          filterOption={optionStartsWithValue}\n          {...useCreatableSelectPersistedBehaviour({\n            options: defaultIntervalOptions,\n            value: bucketAgg.settings?.interval || bucketAggregationConfig.date_histogram.defaultSettings?.interval,\n            onChange: handleIntervalChange,\n          })}\n        />\n      </InlineField>\n\n      <InlineField label=\"Min Doc Count\" {...inlineFieldProps}>\n        <Input\n          id={`${baseId}-min_doc_count`}\n          onBlur={(e) =>\n            dispatch(\n              changeBucketAggregationSetting({ bucketAgg, settingName: 'min_doc_count', newValue: e.target.value })\n            )\n          }\n          defaultValue={\n            bucketAgg.settings?.min_doc_count || bucketAggregationConfig.date_histogram.defaultSettings?.min_doc_count\n          }\n        />\n      </InlineField>\n\n      <InlineField label=\"Trim Edges\" {...inlineFieldProps} tooltip=\"Trim the edges on the timeseries datapoints\">\n        <Input\n          id={`${baseId}-trime_edges`}\n          onBlur={(e) =>\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'trimEdges', newValue: e.target.value }))\n          }\n          defaultValue={\n            bucketAgg.settings?.trimEdges || bucketAggregationConfig.date_histogram.defaultSettings?.trimEdges\n          }\n        />\n      </InlineField>\n\n      <InlineField\n        label=\"Offset\"\n        {...inlineFieldProps}\n        tooltip=\"Change the start value of each bucket by the specified positive (+) or negative offset (-) duration, such as 1h for an hour, or 1d for a day\"\n      >\n        <Input\n          id={`${baseId}-offset`}\n          onBlur={(e) =>\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'offset', newValue: e.target.value }))\n          }\n          defaultValue={bucketAgg.settings?.offset || bucketAggregationConfig.date_histogram.defaultSettings?.offset}\n        />\n      </InlineField>\n\n      <InlineField label=\"Timezone\" {...inlineFieldProps}>\n        <TimeZonePicker\n          value={bucketAgg.settings?.timeZone || bucketAggregationConfig.date_histogram.defaultSettings?.timeZone}\n          includeInternal={[InternalTimeZones.utc]}\n          onChange={(timeZone) => {\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'timeZone', newValue: timeZone }));\n          }}\n        />\n      </InlineField>\n    </>\n  );\n};\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AAGA,SAASC,iBAAT,QAAmD,eAAnD;AACA,SAASC,WAAT,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCC,cAArC,QAA2D,aAA3D;AAEA,SAASC,WAAT,QAA4B,uCAA5B;AACA,SAASC,oCAAT,QAAqD,qDAArD;AAEA,SAASC,8BAAT,QAA+C,kBAA/C;AACA,SAASC,uBAAT,QAAwC,UAAxC;AAEA,SAASC,gBAAT,QAAiC,GAAjC;;;;AAEA,MAAMC,sBAAsD,GAAG,CAC7D;EAAEC,KAAK,EAAE,MAAT;EAAiBC,KAAK,EAAE;AAAxB,CAD6D,EAE7D;EAAED,KAAK,EAAE,KAAT;EAAgBC,KAAK,EAAE;AAAvB,CAF6D,EAG7D;EAAED,KAAK,EAAE,IAAT;EAAeC,KAAK,EAAE;AAAtB,CAH6D,EAI7D;EAAED,KAAK,EAAE,IAAT;EAAeC,KAAK,EAAE;AAAtB,CAJ6D,EAK7D;EAAED,KAAK,EAAE,KAAT;EAAgBC,KAAK,EAAE;AAAvB,CAL6D,EAM7D;EAAED,KAAK,EAAE,KAAT;EAAgBC,KAAK,EAAE;AAAvB,CAN6D,EAO7D;EAAED,KAAK,EAAE,IAAT;EAAeC,KAAK,EAAE;AAAtB,CAP6D,EAQ7D;EAAED,KAAK,EAAE,IAAT;EAAeC,KAAK,EAAE;AAAtB,CAR6D,CAA/D;;AAWA,MAAMC,QAAQ,GACXC,WAAD,IACA,CAAC;EAAEF;AAAF,CAAD,KACEA,KAAK,KAAKE,WAHd;;AAKA,MAAMC,gBAAgB,GAAG,CACvBC,UADuB,EAEvBC,CAFuB,EAGvBC,OAHuB,KAIpB;EACH;EACA;EACA,MAAMC,WAAW,GAAID,OAAD,CAA4CE,IAA5C,CAAiDP,QAAQ,CAACG,UAAD,CAAzD,CAApB,CAHG,CAIH;;EACA,OAAO,CAACG,WAAD,IAAgBH,UAAU,CAACK,IAAX,GAAkBC,MAAlB,GAA2B,CAAlD;AACD,CAVD;;AAYA,MAAMC,qBAAqB,GAAG,CAACC,MAAD,EAAkCZ,KAAlC;EAAA;;EAAA,OAC5B,kBAAAY,MAAM,CAACZ,KAAP,gEAAca,UAAd,CAAyBb,KAAzB,MAAmC,KADP;AAAA,CAA9B;;AAOA,OAAO,MAAMc,2BAA2B,GAAG,CAAC;EAAEC;AAAF,CAAD,KAA0B;EAAA;;EACnE,MAAMC,QAAQ,GAAGvB,WAAW,EAA5B;EACA,MAAM;IAAEwB,OAAO,EAAEC;EAAX,IAAsB/B,MAAM,CAACF,QAAQ,CAAC,oBAAD,CAAT,CAAlC;;EAEA,MAAMkC,oBAAoB,GAAG,CAAC;IAAEnB;EAAF,CAAD,KAC3BgB,QAAQ,CAACrB,8BAA8B,CAAC;IAAEoB,SAAF;IAAaK,WAAW,EAAE,UAA1B;IAAsCC,QAAQ,EAAErB;EAAhD,CAAD,CAA/B,CADV;;EAGA,oBACE;IAAA,wBACE,KAAC,WAAD;MAAa,KAAK,EAAC;IAAnB,GAAkCH,gBAAlC;MAAA,uBACE,KAAC,MAAD;QACE,OAAO,EAAEZ,QAAQ,CAAC,4BAAD,CADnB;QAEE,gBAAgB,EAAEkB,gBAFpB;QAGE,YAAY,EAAEQ;MAHhB,GAIMjB,oCAAoC,CAAC;QACvCY,OAAO,EAAER,sBAD8B;QAEvCE,KAAK,EAAE,wBAAAe,SAAS,CAACO,QAAV,4EAAoBC,QAApB,+BAAgC3B,uBAAuB,CAAC4B,cAAxB,CAAuCC,eAAvE,0DAAgC,sBAAwDF,QAAxF,CAFgC;QAGvCG,QAAQ,EAAEP;MAH6B,CAAD,CAJ1C;IADF,GADF,eAcE,KAAC,WAAD;MAAa,KAAK,EAAC;IAAnB,GAAuCtB,gBAAvC;MAAA,uBACE,KAAC,KAAD;QACE,EAAE,EAAG,GAAEqB,MAAO,gBADhB;QAEE,MAAM,EAAGS,CAAD,IACNX,QAAQ,CACNrB,8BAA8B,CAAC;UAAEoB,SAAF;UAAaK,WAAW,EAAE,eAA1B;UAA2CC,QAAQ,EAAEM,CAAC,CAACC,MAAF,CAAS5B;QAA9D,CAAD,CADxB,CAHZ;QAOE,YAAY,EACV,yBAAAe,SAAS,CAACO,QAAV,8EAAoBO,aAApB,gCAAqCjC,uBAAuB,CAAC4B,cAAxB,CAAuCC,eAA5E,2DAAqC,uBAAwDI,aAA7F;MARJ;IADF,GAdF,eA4BE,KAAC,WAAD;MAAa,KAAK,EAAC;IAAnB,GAAoChC,gBAApC;MAAsD,OAAO,EAAC,6CAA9D;MAAA,uBACE,KAAC,KAAD;QACE,EAAE,EAAG,GAAEqB,MAAO,cADhB;QAEE,MAAM,EAAGS,CAAD,IACNX,QAAQ,CAACrB,8BAA8B,CAAC;UAAEoB,SAAF;UAAaK,WAAW,EAAE,WAA1B;UAAuCC,QAAQ,EAAEM,CAAC,CAACC,MAAF,CAAS5B;QAA1D,CAAD,CAA/B,CAHZ;QAKE,YAAY,EACV,yBAAAe,SAAS,CAACO,QAAV,8EAAoBQ,SAApB,gCAAiClC,uBAAuB,CAAC4B,cAAxB,CAAuCC,eAAxE,2DAAiC,uBAAwDK,SAAzF;MANJ;IADF,GA5BF,eAwCE,KAAC,WAAD;MACE,KAAK,EAAC;IADR,GAEMjC,gBAFN;MAGE,OAAO,EAAC,8IAHV;MAAA,uBAKE,KAAC,KAAD;QACE,EAAE,EAAG,GAAEqB,MAAO,SADhB;QAEE,MAAM,EAAGS,CAAD,IACNX,QAAQ,CAACrB,8BAA8B,CAAC;UAAEoB,SAAF;UAAaK,WAAW,EAAE,QAA1B;UAAoCC,QAAQ,EAAEM,CAAC,CAACC,MAAF,CAAS5B;QAAvD,CAAD,CAA/B,CAHZ;QAKE,YAAY,EAAE,yBAAAe,SAAS,CAACO,QAAV,8EAAoBS,MAApB,gCAA8BnC,uBAAuB,CAAC4B,cAAxB,CAAuCC,eAArE,2DAA8B,uBAAwDM,MAAtF;MALhB;IALF,GAxCF,eAsDE,KAAC,WAAD;MAAa,KAAK,EAAC;IAAnB,GAAkClC,gBAAlC;MAAA,uBACE,KAAC,cAAD;QACE,KAAK,EAAE,yBAAAkB,SAAS,CAACO,QAAV,8EAAoBU,QAApB,gCAAgCpC,uBAAuB,CAAC4B,cAAxB,CAAuCC,eAAvE,2DAAgC,uBAAwDO,QAAxF,CADT;QAEE,eAAe,EAAE,CAAC5C,iBAAiB,CAAC6C,GAAnB,CAFnB;QAGE,QAAQ,EAAGD,QAAD,IAAc;UACtBhB,QAAQ,CAACrB,8BAA8B,CAAC;YAAEoB,SAAF;YAAaK,WAAW,EAAE,UAA1B;YAAsCC,QAAQ,EAAEW;UAAhD,CAAD,CAA/B,CAAR;QACD;MALH;IADF,GAtDF;EAAA,EADF;AAkED,CAzEM"},"metadata":{},"sourceType":"module"}