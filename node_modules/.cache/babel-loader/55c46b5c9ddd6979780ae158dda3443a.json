{"ast":null,"code":"var _Icon;\n\nimport React from 'react';\nimport { Button, Icon, InlineField, InlineFieldRow } from '@grafana/ui';\nimport { defaultCondition } from '../utils/expressionTypes';\nimport { Condition } from './Condition';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const ClassicConditions = ({\n  onChange,\n  query,\n  refIds\n}) => {\n  var _query$conditions;\n\n  const onConditionChange = (condition, index) => {\n    if (query.conditions) {\n      onChange(Object.assign({}, query, {\n        conditions: [...query.conditions.slice(0, index), condition, ...query.conditions.slice(index + 1)]\n      }));\n    }\n  };\n\n  const onAddCondition = () => {\n    if (query.conditions) {\n      onChange(Object.assign({}, query, {\n        conditions: query.conditions.length > 0 ? [...query.conditions, defaultCondition] : [defaultCondition]\n      }));\n    }\n  };\n\n  const onRemoveCondition = index => {\n    if (query.conditions) {\n      const condition = query.conditions[index];\n      const conditions = query.conditions.filter(c => c !== condition).map((c, index) => {\n        if (index === 0) {\n          return Object.assign({}, c, {\n            operator: {\n              type: 'when'\n            }\n          });\n        }\n\n        return c;\n      });\n      onChange(Object.assign({}, query, {\n        conditions\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Conditions\",\n        labelWidth: 14,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: (_query$conditions = query.conditions) === null || _query$conditions === void 0 ? void 0 : _query$conditions.map((condition, index) => {\n            if (!condition) {\n              return;\n            }\n\n            return /*#__PURE__*/_jsx(Condition, {\n              index: index,\n              condition: condition,\n              onChange: condition => onConditionChange(condition, index),\n              onRemoveCondition: onRemoveCondition,\n              refIds: refIds\n            }, index);\n          })\n        })\n      })\n    }), /*#__PURE__*/_jsx(Button, {\n      variant: \"secondary\",\n      type: \"button\",\n      onClick: onAddCondition,\n      children: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n        name: \"plus-circle\"\n      }))\n    })]\n  });\n};","map":{"version":3,"names":["React","Button","Icon","InlineField","InlineFieldRow","defaultCondition","Condition","ClassicConditions","onChange","query","refIds","onConditionChange","condition","index","conditions","slice","onAddCondition","length","onRemoveCondition","filter","c","map","operator","type"],"sources":["/home/soula/grafana/public/app/features/expressions/components/ClassicConditions.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Button, Icon, InlineField, InlineFieldRow } from '@grafana/ui';\n\nimport { ClassicCondition, ExpressionQuery } from '../types';\nimport { defaultCondition } from '../utils/expressionTypes';\n\nimport { Condition } from './Condition';\n\ninterface Props {\n  query: ExpressionQuery;\n  refIds: Array<SelectableValue<string>>;\n  onChange: (query: ExpressionQuery) => void;\n}\n\nexport const ClassicConditions: FC<Props> = ({ onChange, query, refIds }) => {\n  const onConditionChange = (condition: ClassicCondition, index: number) => {\n    if (query.conditions) {\n      onChange({\n        ...query,\n        conditions: [...query.conditions.slice(0, index), condition, ...query.conditions.slice(index + 1)],\n      });\n    }\n  };\n\n  const onAddCondition = () => {\n    if (query.conditions) {\n      onChange({\n        ...query,\n        conditions: query.conditions.length > 0 ? [...query.conditions, defaultCondition] : [defaultCondition],\n      });\n    }\n  };\n\n  const onRemoveCondition = (index: number) => {\n    if (query.conditions) {\n      const condition = query.conditions[index];\n      const conditions = query.conditions\n        .filter((c) => c !== condition)\n        .map((c, index) => {\n          if (index === 0) {\n            return {\n              ...c,\n              operator: {\n                type: 'when',\n              },\n            };\n          }\n          return c;\n        });\n      onChange({\n        ...query,\n        conditions,\n      });\n    }\n  };\n\n  return (\n    <div>\n      <InlineFieldRow>\n        <InlineField label=\"Conditions\" labelWidth={14}>\n          <div>\n            {query.conditions?.map((condition, index) => {\n              if (!condition) {\n                return;\n              }\n              return (\n                <Condition\n                  key={index}\n                  index={index}\n                  condition={condition}\n                  onChange={(condition: ClassicCondition) => onConditionChange(condition, index)}\n                  onRemoveCondition={onRemoveCondition}\n                  refIds={refIds}\n                />\n              );\n            })}\n          </div>\n        </InlineField>\n      </InlineFieldRow>\n      <Button variant=\"secondary\" type=\"button\" onClick={onAddCondition}>\n        <Icon name=\"plus-circle\" />\n      </Button>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAGA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,WAAvB,EAAoCC,cAApC,QAA0D,aAA1D;AAGA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,SAASC,SAAT,QAA0B,aAA1B;;;AAQA,OAAO,MAAMC,iBAA4B,GAAG,CAAC;EAAEC,QAAF;EAAYC,KAAZ;EAAmBC;AAAnB,CAAD,KAAiC;EAAA;;EAC3E,MAAMC,iBAAiB,GAAG,CAACC,SAAD,EAA8BC,KAA9B,KAAgD;IACxE,IAAIJ,KAAK,CAACK,UAAV,EAAsB;MACpBN,QAAQ,mBACHC,KADG;QAENK,UAAU,EAAE,CAAC,GAAGL,KAAK,CAACK,UAAN,CAAiBC,KAAjB,CAAuB,CAAvB,EAA0BF,KAA1B,CAAJ,EAAsCD,SAAtC,EAAiD,GAAGH,KAAK,CAACK,UAAN,CAAiBC,KAAjB,CAAuBF,KAAK,GAAG,CAA/B,CAApD;MAFN,GAAR;IAID;EACF,CAPD;;EASA,MAAMG,cAAc,GAAG,MAAM;IAC3B,IAAIP,KAAK,CAACK,UAAV,EAAsB;MACpBN,QAAQ,mBACHC,KADG;QAENK,UAAU,EAAEL,KAAK,CAACK,UAAN,CAAiBG,MAAjB,GAA0B,CAA1B,GAA8B,CAAC,GAAGR,KAAK,CAACK,UAAV,EAAsBT,gBAAtB,CAA9B,GAAwE,CAACA,gBAAD;MAF9E,GAAR;IAID;EACF,CAPD;;EASA,MAAMa,iBAAiB,GAAIL,KAAD,IAAmB;IAC3C,IAAIJ,KAAK,CAACK,UAAV,EAAsB;MACpB,MAAMF,SAAS,GAAGH,KAAK,CAACK,UAAN,CAAiBD,KAAjB,CAAlB;MACA,MAAMC,UAAU,GAAGL,KAAK,CAACK,UAAN,CAChBK,MADgB,CACRC,CAAD,IAAOA,CAAC,KAAKR,SADJ,EAEhBS,GAFgB,CAEZ,CAACD,CAAD,EAAIP,KAAJ,KAAc;QACjB,IAAIA,KAAK,KAAK,CAAd,EAAiB;UACf,yBACKO,CADL;YAEEE,QAAQ,EAAE;cACRC,IAAI,EAAE;YADE;UAFZ;QAMD;;QACD,OAAOH,CAAP;MACD,CAZgB,CAAnB;MAaAZ,QAAQ,mBACHC,KADG;QAENK;MAFM,GAAR;IAID;EACF,CArBD;;EAuBA,oBACE;IAAA,wBACE,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAC,YAAnB;QAAgC,UAAU,EAAE,EAA5C;QAAA,uBACE;UAAA,+BACGL,KAAK,CAACK,UADT,sDACG,kBAAkBO,GAAlB,CAAsB,CAACT,SAAD,EAAYC,KAAZ,KAAsB;YAC3C,IAAI,CAACD,SAAL,EAAgB;cACd;YACD;;YACD,oBACE,KAAC,SAAD;cAEE,KAAK,EAAEC,KAFT;cAGE,SAAS,EAAED,SAHb;cAIE,QAAQ,EAAGA,SAAD,IAAiCD,iBAAiB,CAACC,SAAD,EAAYC,KAAZ,CAJ9D;cAKE,iBAAiB,EAAEK,iBALrB;cAME,MAAM,EAAER;YANV,GACOG,KADP,CADF;UAUD,CAdA;QADH;MADF;IADF,EADF,eAsBE,KAAC,MAAD;MAAQ,OAAO,EAAC,WAAhB;MAA4B,IAAI,EAAC,QAAjC;MAA0C,OAAO,EAAEG,cAAnD;MAAA,yCACE,KAAC,IAAD;QAAM,IAAI,EAAC;MAAX,EADF;IAAA,EAtBF;EAAA,EADF;AA4BD,CAtEM"},"metadata":{},"sourceType":"module"}