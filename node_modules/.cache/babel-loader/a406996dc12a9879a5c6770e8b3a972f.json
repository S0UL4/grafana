{"ast":null,"code":"const _excluded = [\"icon\", \"color\", \"text\", \"tooltip\", \"className\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport tinycolor from 'tinycolor2';\nimport { useTheme } from '../../themes/ThemeContext';\nimport { stylesFactory } from '../../themes/stylesFactory';\nimport { Icon } from '../Icon/Icon';\nimport { HorizontalGroup } from '../Layout/Layout';\nimport { Tooltip } from '../Tooltip/Tooltip';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const Badge = /*#__PURE__*/React.memo(_ref => {\n  let {\n    icon,\n    color,\n    text,\n    tooltip,\n    className\n  } = _ref,\n      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const theme = useTheme();\n  const styles = getStyles(theme, color);\n\n  const badge = /*#__PURE__*/_jsx(\"div\", Object.assign({\n    className: cx(styles.wrapper, className)\n  }, otherProps, {\n    children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n      align: \"center\",\n      spacing: \"xs\",\n      children: [icon && /*#__PURE__*/_jsx(Icon, {\n        name: icon,\n        size: \"sm\"\n      }), /*#__PURE__*/_jsx(\"span\", {\n        children: text\n      })]\n    })\n  }));\n\n  return tooltip ? /*#__PURE__*/_jsx(Tooltip, {\n    content: tooltip,\n    placement: \"auto\",\n    children: badge\n  }) : badge;\n});\nBadge.displayName = 'Badge';\nconst getStyles = stylesFactory((theme, color) => {\n  let sourceColor = theme.visualization.getColorByName(color);\n  let borderColor = '';\n  let bgColor = '';\n  let textColor = '';\n\n  if (theme.isDark) {\n    bgColor = tinycolor(sourceColor).setAlpha(0.15).toString();\n    borderColor = tinycolor(sourceColor).darken(30).toString();\n    textColor = tinycolor(sourceColor).lighten(15).toString();\n  } else {\n    bgColor = tinycolor(sourceColor).setAlpha(0.15).toString();\n    borderColor = tinycolor(sourceColor).lighten(20).toString();\n    textColor = tinycolor(sourceColor).darken(15).toString();\n  }\n\n  return {\n    wrapper: css`\n      font-size: ${theme.typography.size.sm};\n      display: inline-flex;\n      padding: 1px 4px;\n      border-radius: 3px;\n      background: ${bgColor};\n      border: 1px solid ${borderColor};\n      color: ${textColor};\n      font-weight: ${theme.typography.weight.regular};\n\n      > span {\n        position: relative;\n        top: 1px;\n        margin-left: 2px;\n      }\n    `\n  };\n});","map":{"version":3,"names":["css","cx","React","tinycolor","useTheme","stylesFactory","Icon","HorizontalGroup","Tooltip","Badge","memo","icon","color","text","tooltip","className","otherProps","theme","styles","getStyles","badge","wrapper","displayName","sourceColor","visualization","getColorByName","borderColor","bgColor","textColor","isDark","setAlpha","toString","darken","lighten","typography","size","sm","weight","regular"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Badge/Badge.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { useTheme } from '../../themes/ThemeContext';\nimport { stylesFactory } from '../../themes/stylesFactory';\nimport { IconName } from '../../types';\nimport { Icon } from '../Icon/Icon';\nimport { HorizontalGroup } from '../Layout/Layout';\nimport { Tooltip } from '../Tooltip/Tooltip';\n\nexport type BadgeColor = 'blue' | 'red' | 'green' | 'orange' | 'purple';\n\nexport interface BadgeProps extends HTMLAttributes<HTMLDivElement> {\n  text: React.ReactNode;\n  color: BadgeColor;\n  icon?: IconName;\n  tooltip?: string;\n}\n\nexport const Badge = React.memo<BadgeProps>(({ icon, color, text, tooltip, className, ...otherProps }) => {\n  const theme = useTheme();\n  const styles = getStyles(theme, color);\n  const badge = (\n    <div className={cx(styles.wrapper, className)} {...otherProps}>\n      <HorizontalGroup align=\"center\" spacing=\"xs\">\n        {icon && <Icon name={icon} size=\"sm\" />}\n        <span>{text}</span>\n      </HorizontalGroup>\n    </div>\n  );\n\n  return tooltip ? (\n    <Tooltip content={tooltip} placement=\"auto\">\n      {badge}\n    </Tooltip>\n  ) : (\n    badge\n  );\n});\n\nBadge.displayName = 'Badge';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme, color: BadgeColor) => {\n  let sourceColor = theme.visualization.getColorByName(color);\n  let borderColor = '';\n  let bgColor = '';\n  let textColor = '';\n\n  if (theme.isDark) {\n    bgColor = tinycolor(sourceColor).setAlpha(0.15).toString();\n    borderColor = tinycolor(sourceColor).darken(30).toString();\n    textColor = tinycolor(sourceColor).lighten(15).toString();\n  } else {\n    bgColor = tinycolor(sourceColor).setAlpha(0.15).toString();\n    borderColor = tinycolor(sourceColor).lighten(20).toString();\n    textColor = tinycolor(sourceColor).darken(15).toString();\n  }\n\n  return {\n    wrapper: css`\n      font-size: ${theme.typography.size.sm};\n      display: inline-flex;\n      padding: 1px 4px;\n      border-radius: 3px;\n      background: ${bgColor};\n      border: 1px solid ${borderColor};\n      color: ${textColor};\n      font-weight: ${theme.typography.weight.regular};\n\n      > span {\n        position: relative;\n        top: 1px;\n        margin-left: 2px;\n      }\n    `,\n  };\n});\n"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAsC,OAAtC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAIA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAEA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,OAAT,QAAwB,oBAAxB;;;AAWA,OAAO,MAAMC,KAAK,gBAAGP,KAAK,CAACQ,IAAN,CAAuB,QAA8D;EAAA,IAA7D;IAAEC,IAAF;IAAQC,KAAR;IAAeC,IAAf;IAAqBC,OAArB;IAA8BC;EAA9B,CAA6D;EAAA,IAAjBC,UAAiB;;EACxG,MAAMC,KAAK,GAAGb,QAAQ,EAAtB;EACA,MAAMc,MAAM,GAAGC,SAAS,CAACF,KAAD,EAAQL,KAAR,CAAxB;;EACA,MAAMQ,KAAK,gBACT;IAAK,SAAS,EAAEnB,EAAE,CAACiB,MAAM,CAACG,OAAR,EAAiBN,SAAjB;EAAlB,GAAmDC,UAAnD;IAAA,uBACE,MAAC,eAAD;MAAiB,KAAK,EAAC,QAAvB;MAAgC,OAAO,EAAC,IAAxC;MAAA,WACGL,IAAI,iBAAI,KAAC,IAAD;QAAM,IAAI,EAAEA,IAAZ;QAAkB,IAAI,EAAC;MAAvB,EADX,eAEE;QAAA,UAAOE;MAAP,EAFF;IAAA;EADF,GADF;;EASA,OAAOC,OAAO,gBACZ,KAAC,OAAD;IAAS,OAAO,EAAEA,OAAlB;IAA2B,SAAS,EAAC,MAArC;IAAA,UACGM;EADH,EADY,GAKZA,KALF;AAOD,CAnBoB,CAAd;AAqBPX,KAAK,CAACa,WAAN,GAAoB,OAApB;AAEA,MAAMH,SAAS,GAAGd,aAAa,CAAC,CAACY,KAAD,EAAsBL,KAAtB,KAA4C;EAC1E,IAAIW,WAAW,GAAGN,KAAK,CAACO,aAAN,CAAoBC,cAApB,CAAmCb,KAAnC,CAAlB;EACA,IAAIc,WAAW,GAAG,EAAlB;EACA,IAAIC,OAAO,GAAG,EAAd;EACA,IAAIC,SAAS,GAAG,EAAhB;;EAEA,IAAIX,KAAK,CAACY,MAAV,EAAkB;IAChBF,OAAO,GAAGxB,SAAS,CAACoB,WAAD,CAAT,CAAuBO,QAAvB,CAAgC,IAAhC,EAAsCC,QAAtC,EAAV;IACAL,WAAW,GAAGvB,SAAS,CAACoB,WAAD,CAAT,CAAuBS,MAAvB,CAA8B,EAA9B,EAAkCD,QAAlC,EAAd;IACAH,SAAS,GAAGzB,SAAS,CAACoB,WAAD,CAAT,CAAuBU,OAAvB,CAA+B,EAA/B,EAAmCF,QAAnC,EAAZ;EACD,CAJD,MAIO;IACLJ,OAAO,GAAGxB,SAAS,CAACoB,WAAD,CAAT,CAAuBO,QAAvB,CAAgC,IAAhC,EAAsCC,QAAtC,EAAV;IACAL,WAAW,GAAGvB,SAAS,CAACoB,WAAD,CAAT,CAAuBU,OAAvB,CAA+B,EAA/B,EAAmCF,QAAnC,EAAd;IACAH,SAAS,GAAGzB,SAAS,CAACoB,WAAD,CAAT,CAAuBS,MAAvB,CAA8B,EAA9B,EAAkCD,QAAlC,EAAZ;EACD;;EAED,OAAO;IACLV,OAAO,EAAErB,GAAI;AACjB,mBAAmBiB,KAAK,CAACiB,UAAN,CAAiBC,IAAjB,CAAsBC,EAAG;AAC5C;AACA;AACA;AACA,oBAAoBT,OAAQ;AAC5B,0BAA0BD,WAAY;AACtC,eAAeE,SAAU;AACzB,qBAAqBX,KAAK,CAACiB,UAAN,CAAiBG,MAAjB,CAAwBC,OAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;EAhBS,CAAP;AAkBD,CAlC8B,CAA/B"},"metadata":{},"sourceType":"module"}