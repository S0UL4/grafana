{"ast":null,"code":"import { getBackendSrv } from '@grafana/runtime';\nimport { validationSrv } from '../services/ValidationSrv';\nexport const validateDashboardJson = json => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (error) {\n    return 'Not valid JSON';\n  }\n};\nexport const validateGcomDashboard = gcomDashboard => {\n  // From DashboardImportCtrl\n  const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(gcomDashboard);\n  return match && (match[1] || match[2]) ? true : 'Could not find a valid Grafana.com ID';\n};\nexport const validateTitle = (newTitle, folderId) => {\n  return validationSrv.validateNewDashboardName(folderId, newTitle).then(() => {\n    return true;\n  }).catch(error => {\n    if (error.type === 'EXISTING') {\n      return error.message;\n    }\n  });\n};\nexport const validateUid = value => {\n  return getBackendSrv().get(`/api/dashboards/uid/${value}`).then(existingDashboard => {\n    return `Dashboard named '${existingDashboard === null || existingDashboard === void 0 ? void 0 : existingDashboard.dashboard.title}' in folder '${existingDashboard === null || existingDashboard === void 0 ? void 0 : existingDashboard.meta.folderTitle}' has the same UID`;\n  }).catch(error => {\n    error.isHandled = true;\n    return true;\n  });\n};","map":{"version":3,"names":["getBackendSrv","validationSrv","validateDashboardJson","json","JSON","parse","error","validateGcomDashboard","gcomDashboard","match","exec","validateTitle","newTitle","folderId","validateNewDashboardName","then","catch","type","message","validateUid","value","get","existingDashboard","dashboard","title","meta","folderTitle","isHandled"],"sources":["/home/soula/grafana/public/app/features/manage-dashboards/utils/validation.ts"],"sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\n\nimport { validationSrv } from '../services/ValidationSrv';\n\nexport const validateDashboardJson = (json: string) => {\n  try {\n    JSON.parse(json);\n    return true;\n  } catch (error) {\n    return 'Not valid JSON';\n  }\n};\n\nexport const validateGcomDashboard = (gcomDashboard: string) => {\n  // From DashboardImportCtrl\n  const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(gcomDashboard);\n\n  return match && (match[1] || match[2]) ? true : 'Could not find a valid Grafana.com ID';\n};\n\nexport const validateTitle = (newTitle: string, folderId: number) => {\n  return validationSrv\n    .validateNewDashboardName(folderId, newTitle)\n    .then(() => {\n      return true;\n    })\n    .catch((error) => {\n      if (error.type === 'EXISTING') {\n        return error.message;\n      }\n    });\n};\n\nexport const validateUid = (value: string) => {\n  return getBackendSrv()\n    .get(`/api/dashboards/uid/${value}`)\n    .then((existingDashboard) => {\n      return `Dashboard named '${existingDashboard?.dashboard.title}' in folder '${existingDashboard?.meta.folderTitle}' has the same UID`;\n    })\n    .catch((error) => {\n      error.isHandled = true;\n      return true;\n    });\n};\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AAEA,SAASC,aAAT,QAA8B,2BAA9B;AAEA,OAAO,MAAMC,qBAAqB,GAAIC,IAAD,IAAkB;EACrD,IAAI;IACFC,IAAI,CAACC,KAAL,CAAWF,IAAX;IACA,OAAO,IAAP;EACD,CAHD,CAGE,OAAOG,KAAP,EAAc;IACd,OAAO,gBAAP;EACD;AACF,CAPM;AASP,OAAO,MAAMC,qBAAqB,GAAIC,aAAD,IAA2B;EAC9D;EACA,MAAMC,KAAK,GAAG,4BAA4BC,IAA5B,CAAiCF,aAAjC,CAAd;EAEA,OAAOC,KAAK,KAAKA,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAtB,CAAL,GAAkC,IAAlC,GAAyC,uCAAhD;AACD,CALM;AAOP,OAAO,MAAME,aAAa,GAAG,CAACC,QAAD,EAAmBC,QAAnB,KAAwC;EACnE,OAAOZ,aAAa,CACjBa,wBADI,CACqBD,QADrB,EAC+BD,QAD/B,EAEJG,IAFI,CAEC,MAAM;IACV,OAAO,IAAP;EACD,CAJI,EAKJC,KALI,CAKGV,KAAD,IAAW;IAChB,IAAIA,KAAK,CAACW,IAAN,KAAe,UAAnB,EAA+B;MAC7B,OAAOX,KAAK,CAACY,OAAb;IACD;EACF,CATI,CAAP;AAUD,CAXM;AAaP,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAmB;EAC5C,OAAOpB,aAAa,GACjBqB,GADI,CACC,uBAAsBD,KAAM,EAD7B,EAEJL,IAFI,CAEEO,iBAAD,IAAuB;IAC3B,OAAQ,oBAAmBA,iBAApB,aAAoBA,iBAApB,uBAAoBA,iBAAiB,CAAEC,SAAnB,CAA6BC,KAAM,gBAAeF,iBAAtE,aAAsEA,iBAAtE,uBAAsEA,iBAAiB,CAAEG,IAAnB,CAAwBC,WAAY,oBAAjH;EACD,CAJI,EAKJV,KALI,CAKGV,KAAD,IAAW;IAChBA,KAAK,CAACqB,SAAN,GAAkB,IAAlB;IACA,OAAO,IAAP;EACD,CARI,CAAP;AASD,CAVM"},"metadata":{},"sourceType":"module"}