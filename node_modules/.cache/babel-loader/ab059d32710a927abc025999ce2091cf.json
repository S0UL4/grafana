{"ast":null,"code":"export const TableCell = ({\n  cell,\n  tableStyles,\n  onCellFilterAdded,\n  columnIndex,\n  columnCount,\n  userProps\n}) => {\n  var _ref;\n\n  const cellProps = cell.getCellProps();\n  const field = cell.column.field;\n\n  if (!(field !== null && field !== void 0 && field.display)) {\n    return null;\n  }\n\n  if (cellProps.style) {\n    cellProps.style.minWidth = cellProps.style.width;\n    cellProps.style.justifyContent = cell.column.justifyContent;\n  }\n\n  let innerWidth = ((_ref = cell.column.width) !== null && _ref !== void 0 ? _ref : 24) - tableStyles.cellPadding * 2; // last child sometimes have extra padding if there is a non overlay scrollbar\n\n  if (columnIndex === columnCount - 1) {\n    innerWidth -= tableStyles.lastChildExtraPadding;\n  }\n\n  return cell.render('Cell', {\n    field,\n    tableStyles,\n    onCellFilterAdded,\n    cellProps,\n    innerWidth,\n    userProps\n  });\n};","map":{"version":3,"names":["TableCell","cell","tableStyles","onCellFilterAdded","columnIndex","columnCount","userProps","cellProps","getCellProps","field","column","display","style","minWidth","width","justifyContent","innerWidth","cellPadding","lastChildExtraPadding","render"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Table/TableCell.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { Cell } from 'react-table';\n\nimport { TableStyles } from './styles';\nimport { GrafanaTableColumn, TableFilterActionCallback } from './types';\n\nexport interface Props {\n  cell: Cell;\n  tableStyles: TableStyles;\n  onCellFilterAdded?: TableFilterActionCallback;\n  columnIndex: number;\n  columnCount: number;\n  userProps?: object;\n}\n\nexport const TableCell: FC<Props> = ({ cell, tableStyles, onCellFilterAdded, columnIndex, columnCount, userProps }) => {\n  const cellProps = cell.getCellProps();\n  const field = (cell.column as any as GrafanaTableColumn).field;\n\n  if (!field?.display) {\n    return null;\n  }\n\n  if (cellProps.style) {\n    cellProps.style.minWidth = cellProps.style.width;\n    cellProps.style.justifyContent = (cell.column as any).justifyContent;\n  }\n\n  let innerWidth = ((cell.column.width as number) ?? 24) - tableStyles.cellPadding * 2;\n\n  // last child sometimes have extra padding if there is a non overlay scrollbar\n  if (columnIndex === columnCount - 1) {\n    innerWidth -= tableStyles.lastChildExtraPadding;\n  }\n\n  return cell.render('Cell', {\n    field,\n    tableStyles,\n    onCellFilterAdded,\n    cellProps,\n    innerWidth,\n    userProps,\n  }) as React.ReactElement;\n};\n"],"mappings":"AAeA,OAAO,MAAMA,SAAoB,GAAG,CAAC;EAAEC,IAAF;EAAQC,WAAR;EAAqBC,iBAArB;EAAwCC,WAAxC;EAAqDC,WAArD;EAAkEC;AAAlE,CAAD,KAAmF;EAAA;;EACrH,MAAMC,SAAS,GAAGN,IAAI,CAACO,YAAL,EAAlB;EACA,MAAMC,KAAK,GAAIR,IAAI,CAACS,MAAN,CAA2CD,KAAzD;;EAEA,IAAI,EAACA,KAAD,aAACA,KAAD,eAACA,KAAK,CAAEE,OAAR,CAAJ,EAAqB;IACnB,OAAO,IAAP;EACD;;EAED,IAAIJ,SAAS,CAACK,KAAd,EAAqB;IACnBL,SAAS,CAACK,KAAV,CAAgBC,QAAhB,GAA2BN,SAAS,CAACK,KAAV,CAAgBE,KAA3C;IACAP,SAAS,CAACK,KAAV,CAAgBG,cAAhB,GAAkCd,IAAI,CAACS,MAAN,CAAqBK,cAAtD;EACD;;EAED,IAAIC,UAAU,GAAG,SAAEf,IAAI,CAACS,MAAL,CAAYI,KAAd,uCAAkC,EAAlC,IAAwCZ,WAAW,CAACe,WAAZ,GAA0B,CAAnF,CAbqH,CAerH;;EACA,IAAIb,WAAW,KAAKC,WAAW,GAAG,CAAlC,EAAqC;IACnCW,UAAU,IAAId,WAAW,CAACgB,qBAA1B;EACD;;EAED,OAAOjB,IAAI,CAACkB,MAAL,CAAY,MAAZ,EAAoB;IACzBV,KADyB;IAEzBP,WAFyB;IAGzBC,iBAHyB;IAIzBI,SAJyB;IAKzBS,UALyB;IAMzBV;EANyB,CAApB,CAAP;AAQD,CA5BM"},"metadata":{},"sourceType":"module"}