{"ast":null,"code":"export let EventsWithValidation;\n\n(function (EventsWithValidation) {\n  EventsWithValidation[\"onBlur\"] = \"onBlur\";\n  EventsWithValidation[\"onFocus\"] = \"onFocus\";\n  EventsWithValidation[\"onChange\"] = \"onChange\";\n})(EventsWithValidation || (EventsWithValidation = {}));\n\nexport const validate = (value, validationRules) => {\n  const errors = validationRules.reduce((acc, currRule) => {\n    if (!currRule.rule(value)) {\n      return acc.concat(currRule.errorMessage);\n    }\n\n    return acc;\n  }, []);\n  return errors.length > 0 ? errors : null;\n};\nexport const hasValidationEvent = (event, validationEvents) => {\n  return validationEvents && validationEvents[event];\n};\nexport const regexValidation = (pattern, errorMessage) => {\n  return {\n    rule: valueToValidate => {\n      return !!valueToValidate.match(pattern);\n    },\n    errorMessage: errorMessage || 'Value is not valid'\n  };\n};","map":{"version":3,"names":["EventsWithValidation","validate","value","validationRules","errors","reduce","acc","currRule","rule","concat","errorMessage","length","hasValidationEvent","event","validationEvents","regexValidation","pattern","valueToValidate","match"],"sources":["/home/soula/grafana/packages/grafana-ui/src/utils/validate.ts"],"sourcesContent":["import { ValidationRule, ValidationEvents } from '../types/input';\n\nexport enum EventsWithValidation {\n  onBlur = 'onBlur',\n  onFocus = 'onFocus',\n  onChange = 'onChange',\n}\n\nexport const validate = (value: string, validationRules: ValidationRule[]) => {\n  const errors = validationRules.reduce((acc, currRule) => {\n    if (!currRule.rule(value)) {\n      return acc.concat(currRule.errorMessage);\n    }\n    return acc;\n  }, [] as string[]);\n  return errors.length > 0 ? errors : null;\n};\n\nexport const hasValidationEvent = (event: EventsWithValidation, validationEvents: ValidationEvents | undefined) => {\n  return validationEvents && validationEvents[event];\n};\n\nexport const regexValidation = (pattern: string | RegExp, errorMessage?: string): ValidationRule => {\n  return {\n    rule: (valueToValidate: string) => {\n      return !!valueToValidate.match(pattern);\n    },\n    errorMessage: errorMessage || 'Value is not valid',\n  };\n};\n"],"mappings":"AAEA,WAAYA,oBAAZ;;WAAYA,oB;EAAAA,oB;EAAAA,oB;EAAAA,oB;GAAAA,oB,KAAAA,oB;;AAMZ,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAgBC,eAAhB,KAAsD;EAC5E,MAAMC,MAAM,GAAGD,eAAe,CAACE,MAAhB,CAAuB,CAACC,GAAD,EAAMC,QAAN,KAAmB;IACvD,IAAI,CAACA,QAAQ,CAACC,IAAT,CAAcN,KAAd,CAAL,EAA2B;MACzB,OAAOI,GAAG,CAACG,MAAJ,CAAWF,QAAQ,CAACG,YAApB,CAAP;IACD;;IACD,OAAOJ,GAAP;EACD,CALc,EAKZ,EALY,CAAf;EAMA,OAAOF,MAAM,CAACO,MAAP,GAAgB,CAAhB,GAAoBP,MAApB,GAA6B,IAApC;AACD,CARM;AAUP,OAAO,MAAMQ,kBAAkB,GAAG,CAACC,KAAD,EAA8BC,gBAA9B,KAAiF;EACjH,OAAOA,gBAAgB,IAAIA,gBAAgB,CAACD,KAAD,CAA3C;AACD,CAFM;AAIP,OAAO,MAAME,eAAe,GAAG,CAACC,OAAD,EAA2BN,YAA3B,KAAqE;EAClG,OAAO;IACLF,IAAI,EAAGS,eAAD,IAA6B;MACjC,OAAO,CAAC,CAACA,eAAe,CAACC,KAAhB,CAAsBF,OAAtB,CAAT;IACD,CAHI;IAILN,YAAY,EAAEA,YAAY,IAAI;EAJzB,CAAP;AAMD,CAPM"},"metadata":{},"sourceType":"module"}