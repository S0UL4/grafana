{"ast":null,"code":"import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\nimport { isFetchError } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createPanelLibraryErrorNotification, createPanelLibrarySuccessNotification, saveAndRefreshLibraryPanel } from '../utils';\nexport const usePanelSave = () => {\n  const dispatch = useDispatch();\n  const [state, saveLibraryPanel] = useAsyncFn(async (panel, folderId) => {\n    try {\n      return await saveAndRefreshLibraryPanel(panel, folderId);\n    } catch (err) {\n      if (isFetchError(err)) {\n        err.isHandled = true;\n        throw new Error(err.data.message);\n      }\n\n      throw err;\n    }\n  }, []);\n  useEffect(() => {\n    if (state.error) {\n      dispatch(notifyApp(createPanelLibraryErrorNotification(`Error saving library panel: \"${state.error.message}\"`)));\n    }\n\n    if (state.value) {\n      dispatch(notifyApp(createPanelLibrarySuccessNotification('Library panel saved')));\n    }\n  }, [dispatch, state]);\n  return {\n    state,\n    saveLibraryPanel\n  };\n};","map":{"version":3,"names":["useEffect","useDispatch","useAsyncFn","isFetchError","notifyApp","createPanelLibraryErrorNotification","createPanelLibrarySuccessNotification","saveAndRefreshLibraryPanel","usePanelSave","dispatch","state","saveLibraryPanel","panel","folderId","err","isHandled","Error","data","message","error","value"],"sources":["/home/soula/grafana/public/app/features/library-panels/utils/usePanelSave.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\n\nimport { isFetchError } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { PanelModel } from 'app/features/dashboard/state';\n\nimport {\n  createPanelLibraryErrorNotification,\n  createPanelLibrarySuccessNotification,\n  saveAndRefreshLibraryPanel,\n} from '../utils';\n\nexport const usePanelSave = () => {\n  const dispatch = useDispatch();\n  const [state, saveLibraryPanel] = useAsyncFn(async (panel: PanelModel, folderId: number) => {\n    try {\n      return await saveAndRefreshLibraryPanel(panel, folderId);\n    } catch (err) {\n      if (isFetchError(err)) {\n        err.isHandled = true;\n        throw new Error(err.data.message);\n      }\n      throw err;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (state.error) {\n      dispatch(notifyApp(createPanelLibraryErrorNotification(`Error saving library panel: \"${state.error.message}\"`)));\n    }\n    if (state.value) {\n      dispatch(notifyApp(createPanelLibrarySuccessNotification('Library panel saved')));\n    }\n  }, [dispatch, state]);\n\n  return { state, saveLibraryPanel };\n};\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAGA,SACEC,mCADF,EAEEC,qCAFF,EAGEC,0BAHF,QAIO,UAJP;AAMA,OAAO,MAAMC,YAAY,GAAG,MAAM;EAChC,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;EACA,MAAM,CAACS,KAAD,EAAQC,gBAAR,IAA4BT,UAAU,CAAC,OAAOU,KAAP,EAA0BC,QAA1B,KAA+C;IAC1F,IAAI;MACF,OAAO,MAAMN,0BAA0B,CAACK,KAAD,EAAQC,QAAR,CAAvC;IACD,CAFD,CAEE,OAAOC,GAAP,EAAY;MACZ,IAAIX,YAAY,CAACW,GAAD,CAAhB,EAAuB;QACrBA,GAAG,CAACC,SAAJ,GAAgB,IAAhB;QACA,MAAM,IAAIC,KAAJ,CAAUF,GAAG,CAACG,IAAJ,CAASC,OAAnB,CAAN;MACD;;MACD,MAAMJ,GAAN;IACD;EACF,CAV2C,EAUzC,EAVyC,CAA5C;EAYAd,SAAS,CAAC,MAAM;IACd,IAAIU,KAAK,CAACS,KAAV,EAAiB;MACfV,QAAQ,CAACL,SAAS,CAACC,mCAAmC,CAAE,gCAA+BK,KAAK,CAACS,KAAN,CAAYD,OAAQ,GAArD,CAApC,CAAV,CAAR;IACD;;IACD,IAAIR,KAAK,CAACU,KAAV,EAAiB;MACfX,QAAQ,CAACL,SAAS,CAACE,qCAAqC,CAAC,qBAAD,CAAtC,CAAV,CAAR;IACD;EACF,CAPQ,EAON,CAACG,QAAD,EAAWC,KAAX,CAPM,CAAT;EASA,OAAO;IAAEA,KAAF;IAASC;EAAT,CAAP;AACD,CAxBM"},"metadata":{},"sourceType":"module"}