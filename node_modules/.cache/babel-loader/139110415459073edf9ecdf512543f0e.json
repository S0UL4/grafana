{"ast":null,"code":"import React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst randomWalkFields = [{\n  label: 'Series count',\n  id: 'seriesCount',\n  placeholder: '1',\n  min: 1,\n  step: 1\n}, {\n  label: 'Start value',\n  id: 'startValue',\n  placeholder: 'auto',\n  step: 1\n}, {\n  label: 'Min',\n  id: 'min',\n  placeholder: 'none',\n  step: 0.1\n}, {\n  label: 'Max',\n  id: 'max',\n  placeholder: 'none',\n  step: 0.1\n}, {\n  label: 'Spread',\n  id: 'spread',\n  placeholder: '1',\n  min: 0.5,\n  step: 0.1\n}, {\n  label: 'Noise',\n  id: 'noise',\n  placeholder: '0',\n  min: 0,\n  step: 0.1\n}, {\n  label: 'Drop (%)',\n  id: 'drop',\n  placeholder: '0',\n  min: 0,\n  max: 100,\n  step: 1,\n  tooltip: 'Exclude some percent (chance) points'\n}];\nconst testSelectors = selectors.components.DataSource.TestData.QueryTab;\nexport const RandomWalkEditor = ({\n  onChange,\n  query\n}) => {\n  return /*#__PURE__*/_jsx(InlineFieldRow, {\n    children: randomWalkFields.map(({\n      label,\n      id,\n      min,\n      step,\n      placeholder,\n      tooltip\n    }) => {\n      const selector = testSelectors === null || testSelectors === void 0 ? void 0 : testSelectors[id];\n      return /*#__PURE__*/_jsx(InlineField, {\n        label: label,\n        labelWidth: 14,\n        \"aria-label\": selector,\n        tooltip: tooltip,\n        children: /*#__PURE__*/_jsx(Input, {\n          width: 32,\n          name: id,\n          type: \"number\",\n          id: `randomWalk-${id}-${query.refId}`,\n          min: min,\n          step: step,\n          value: query[id] || placeholder,\n          placeholder: placeholder,\n          onChange: onChange\n        })\n      }, id);\n    })\n  });\n};","map":{"version":3,"names":["React","selectors","InlineField","InlineFieldRow","Input","randomWalkFields","label","id","placeholder","min","step","max","tooltip","testSelectors","components","DataSource","TestData","QueryTab","RandomWalkEditor","onChange","query","map","selector","refId"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/components/RandomWalkEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { TestDataQuery } from '../types';\n\nconst randomWalkFields = [\n  { label: 'Series count', id: 'seriesCount', placeholder: '1', min: 1, step: 1 },\n  { label: 'Start value', id: 'startValue', placeholder: 'auto', step: 1 },\n  { label: 'Min', id: 'min', placeholder: 'none', step: 0.1 },\n  { label: 'Max', id: 'max', placeholder: 'none', step: 0.1 },\n  { label: 'Spread', id: 'spread', placeholder: '1', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: '0', min: 0, step: 0.1 },\n  {\n    label: 'Drop (%)',\n    id: 'drop',\n    placeholder: '0',\n    min: 0,\n    max: 100,\n    step: 1,\n    tooltip: 'Exclude some percent (chance) points',\n  },\n];\n\nconst testSelectors = selectors.components.DataSource.TestData.QueryTab;\ntype Selector = 'max' | 'min' | 'noise' | 'seriesCount' | 'spread' | 'startValue' | 'drop';\n\nexport const RandomWalkEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {randomWalkFields.map(({ label, id, min, step, placeholder, tooltip }) => {\n        const selector = testSelectors?.[id as Selector];\n        return (\n          <InlineField label={label} labelWidth={14} key={id} aria-label={selector} tooltip={tooltip}>\n            <Input\n              width={32}\n              name={id}\n              type=\"number\"\n              id={`randomWalk-${id}-${query.refId}`}\n              min={min}\n              step={step}\n              value={(query as any)[id as keyof TestDataQuery] || placeholder}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,KAAtC,QAAmD,aAAnD;;AAKA,MAAMC,gBAAgB,GAAG,CACvB;EAAEC,KAAK,EAAE,cAAT;EAAyBC,EAAE,EAAE,aAA7B;EAA4CC,WAAW,EAAE,GAAzD;EAA8DC,GAAG,EAAE,CAAnE;EAAsEC,IAAI,EAAE;AAA5E,CADuB,EAEvB;EAAEJ,KAAK,EAAE,aAAT;EAAwBC,EAAE,EAAE,YAA5B;EAA0CC,WAAW,EAAE,MAAvD;EAA+DE,IAAI,EAAE;AAArE,CAFuB,EAGvB;EAAEJ,KAAK,EAAE,KAAT;EAAgBC,EAAE,EAAE,KAApB;EAA2BC,WAAW,EAAE,MAAxC;EAAgDE,IAAI,EAAE;AAAtD,CAHuB,EAIvB;EAAEJ,KAAK,EAAE,KAAT;EAAgBC,EAAE,EAAE,KAApB;EAA2BC,WAAW,EAAE,MAAxC;EAAgDE,IAAI,EAAE;AAAtD,CAJuB,EAKvB;EAAEJ,KAAK,EAAE,QAAT;EAAmBC,EAAE,EAAE,QAAvB;EAAiCC,WAAW,EAAE,GAA9C;EAAmDC,GAAG,EAAE,GAAxD;EAA6DC,IAAI,EAAE;AAAnE,CALuB,EAMvB;EAAEJ,KAAK,EAAE,OAAT;EAAkBC,EAAE,EAAE,OAAtB;EAA+BC,WAAW,EAAE,GAA5C;EAAiDC,GAAG,EAAE,CAAtD;EAAyDC,IAAI,EAAE;AAA/D,CANuB,EAOvB;EACEJ,KAAK,EAAE,UADT;EAEEC,EAAE,EAAE,MAFN;EAGEC,WAAW,EAAE,GAHf;EAIEC,GAAG,EAAE,CAJP;EAKEE,GAAG,EAAE,GALP;EAMED,IAAI,EAAE,CANR;EAOEE,OAAO,EAAE;AAPX,CAPuB,CAAzB;AAkBA,MAAMC,aAAa,GAAGZ,SAAS,CAACa,UAAV,CAAqBC,UAArB,CAAgCC,QAAhC,CAAyCC,QAA/D;AAGA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;EAAEC,QAAF;EAAYC;AAAZ,CAAD,KAAsC;EACpE,oBACE,KAAC,cAAD;IAAA,UACGf,gBAAgB,CAACgB,GAAjB,CAAqB,CAAC;MAAEf,KAAF;MAASC,EAAT;MAAaE,GAAb;MAAkBC,IAAlB;MAAwBF,WAAxB;MAAqCI;IAArC,CAAD,KAAoD;MACxE,MAAMU,QAAQ,GAAGT,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAGN,EAAH,CAA9B;MACA,oBACE,KAAC,WAAD;QAAa,KAAK,EAAED,KAApB;QAA2B,UAAU,EAAE,EAAvC;QAAoD,cAAYgB,QAAhE;QAA0E,OAAO,EAAEV,OAAnF;QAAA,uBACE,KAAC,KAAD;UACE,KAAK,EAAE,EADT;UAEE,IAAI,EAAEL,EAFR;UAGE,IAAI,EAAC,QAHP;UAIE,EAAE,EAAG,cAAaA,EAAG,IAAGa,KAAK,CAACG,KAAM,EAJtC;UAKE,GAAG,EAAEd,GALP;UAME,IAAI,EAAEC,IANR;UAOE,KAAK,EAAGU,KAAD,CAAeb,EAAf,KAA6CC,WAPtD;UAQE,WAAW,EAAEA,WARf;UASE,QAAQ,EAAEW;QATZ;MADF,GAAgDZ,EAAhD,CADF;IAeD,CAjBA;EADH,EADF;AAsBD,CAvBM"},"metadata":{},"sourceType":"module"}