{"ast":null,"code":"const _excluded = [\"onChange\", \"ref\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Field, InputControl, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\nimport { RuleFormType } from '../../../types/rule-form';\nimport { CloudRulesSourcePicker } from '../CloudRulesSourcePicker';\nimport { RuleTypePicker } from '../rule-types/RuleTypePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const AlertType = ({\n  editingExistingRule\n}) => {\n  var _errors$type, _errors$type2, _errors$dataSourceNam, _errors$dataSourceNam2;\n\n  const {\n    enabledRuleTypes,\n    defaultRuleType\n  } = getAvailableRuleTypes();\n  const {\n    control,\n    formState: {\n      errors\n    },\n    getValues,\n    setValue,\n    watch\n  } = useFormContext();\n  const styles = useStyles2(getStyles);\n  const ruleFormType = watch('type');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [!editingExistingRule && /*#__PURE__*/_jsx(Field, {\n      error: (_errors$type = errors.type) === null || _errors$type === void 0 ? void 0 : _errors$type.message,\n      invalid: !!((_errors$type2 = errors.type) !== null && _errors$type2 !== void 0 && _errors$type2.message),\n      \"data-testid\": \"alert-type-picker\",\n      children: /*#__PURE__*/_jsx(InputControl, {\n        render: ({\n          field: {\n            onChange\n          }\n        }) => {\n          var _getValues;\n\n          return /*#__PURE__*/_jsx(RuleTypePicker, {\n            \"aria-label\": \"Rule type\",\n            selected: (_getValues = getValues('type')) !== null && _getValues !== void 0 ? _getValues : defaultRuleType,\n            onChange: onChange,\n            enabledTypes: enabledRuleTypes\n          });\n        },\n        name: \"type\",\n        control: control,\n        rules: {\n          required: {\n            value: true,\n            message: 'Please select alert type'\n          }\n        }\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.flexRow,\n      children: (ruleFormType === RuleFormType.cloudRecording || ruleFormType === RuleFormType.cloudAlerting) && /*#__PURE__*/_jsx(Field, {\n        className: styles.formInput,\n        label: \"Select data source\",\n        error: (_errors$dataSourceNam = errors.dataSourceName) === null || _errors$dataSourceNam === void 0 ? void 0 : _errors$dataSourceNam.message,\n        invalid: !!((_errors$dataSourceNam2 = errors.dataSourceName) !== null && _errors$dataSourceNam2 !== void 0 && _errors$dataSourceNam2.message),\n        \"data-testid\": \"datasource-picker\",\n        children: /*#__PURE__*/_jsx(InputControl, {\n          render: _ref => {\n            let {\n              field: {\n                onChange\n              }\n            } = _ref,\n                field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n            return /*#__PURE__*/_jsx(CloudRulesSourcePicker, Object.assign({}, field, {\n              onChange: ds => {\n                var _ds$name;\n\n                // reset location if switching data sources, as different rules source will have different groups and namespaces\n                setValue('location', undefined);\n                onChange((_ds$name = ds === null || ds === void 0 ? void 0 : ds.name) !== null && _ds$name !== void 0 ? _ds$name : null);\n              }\n            }));\n          },\n          name: \"dataSourceName\",\n          control: control,\n          rules: {\n            required: {\n              value: true,\n              message: 'Please select a data source'\n            }\n          }\n        })\n      })\n    })]\n  });\n};\n\nfunction getAvailableRuleTypes() {\n  const canCreateGrafanaRules = contextSrv.hasAccess(AccessControlAction.AlertingRuleCreate, contextSrv.hasEditPermissionInFolders);\n  const canCreateCloudRules = contextSrv.hasAccess(AccessControlAction.AlertingRuleExternalWrite, contextSrv.isEditor);\n  const defaultRuleType = canCreateGrafanaRules ? RuleFormType.grafana : RuleFormType.cloudAlerting;\n  const enabledRuleTypes = [];\n\n  if (canCreateGrafanaRules) {\n    enabledRuleTypes.push(RuleFormType.grafana);\n  }\n\n  if (canCreateCloudRules) {\n    enabledRuleTypes.push(RuleFormType.cloudAlerting, RuleFormType.cloudRecording);\n  }\n\n  return {\n    enabledRuleTypes,\n    defaultRuleType\n  };\n}\n\nconst getStyles = theme => ({\n  formInput: css`\n    width: 330px;\n    & + & {\n      margin-left: ${theme.spacing(3)};\n    }\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-end;\n  `\n});","map":{"version":3,"names":["css","React","useFormContext","Field","InputControl","useStyles2","contextSrv","AccessControlAction","RuleFormType","CloudRulesSourcePicker","RuleTypePicker","AlertType","editingExistingRule","enabledRuleTypes","defaultRuleType","getAvailableRuleTypes","control","formState","errors","getValues","setValue","watch","styles","getStyles","ruleFormType","type","message","field","onChange","required","value","flexRow","cloudRecording","cloudAlerting","formInput","dataSourceName","ds","undefined","name","canCreateGrafanaRules","hasAccess","AlertingRuleCreate","hasEditPermissionInFolders","canCreateCloudRules","AlertingRuleExternalWrite","isEditor","grafana","push","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/AlertType.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Field, InputControl, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { CloudRulesSourcePicker } from '../CloudRulesSourcePicker';\nimport { RuleTypePicker } from '../rule-types/RuleTypePicker';\n\ninterface Props {\n  editingExistingRule: boolean;\n}\n\nexport const AlertType: FC<Props> = ({ editingExistingRule }) => {\n  const { enabledRuleTypes, defaultRuleType } = getAvailableRuleTypes();\n\n  const {\n    control,\n    formState: { errors },\n    getValues,\n    setValue,\n    watch,\n  } = useFormContext<RuleFormValues & { location?: string }>();\n\n  const styles = useStyles2(getStyles);\n  const ruleFormType = watch('type');\n\n  return (\n    <>\n      {!editingExistingRule && (\n        <Field error={errors.type?.message} invalid={!!errors.type?.message} data-testid=\"alert-type-picker\">\n          <InputControl\n            render={({ field: { onChange } }) => (\n              <RuleTypePicker\n                aria-label=\"Rule type\"\n                selected={getValues('type') ?? defaultRuleType}\n                onChange={onChange}\n                enabledTypes={enabledRuleTypes}\n              />\n            )}\n            name=\"type\"\n            control={control}\n            rules={{\n              required: { value: true, message: 'Please select alert type' },\n            }}\n          />\n        </Field>\n      )}\n\n      <div className={styles.flexRow}>\n        {(ruleFormType === RuleFormType.cloudRecording || ruleFormType === RuleFormType.cloudAlerting) && (\n          <Field\n            className={styles.formInput}\n            label=\"Select data source\"\n            error={errors.dataSourceName?.message}\n            invalid={!!errors.dataSourceName?.message}\n            data-testid=\"datasource-picker\"\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <CloudRulesSourcePicker\n                  {...field}\n                  onChange={(ds: DataSourceInstanceSettings) => {\n                    // reset location if switching data sources, as different rules source will have different groups and namespaces\n                    setValue('location', undefined);\n                    onChange(ds?.name ?? null);\n                  }}\n                />\n              )}\n              name=\"dataSourceName\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Please select a data source' },\n              }}\n            />\n          </Field>\n        )}\n      </div>\n    </>\n  );\n};\n\nfunction getAvailableRuleTypes() {\n  const canCreateGrafanaRules = contextSrv.hasAccess(\n    AccessControlAction.AlertingRuleCreate,\n    contextSrv.hasEditPermissionInFolders\n  );\n  const canCreateCloudRules = contextSrv.hasAccess(AccessControlAction.AlertingRuleExternalWrite, contextSrv.isEditor);\n  const defaultRuleType = canCreateGrafanaRules ? RuleFormType.grafana : RuleFormType.cloudAlerting;\n\n  const enabledRuleTypes: RuleFormType[] = [];\n  if (canCreateGrafanaRules) {\n    enabledRuleTypes.push(RuleFormType.grafana);\n  }\n  if (canCreateCloudRules) {\n    enabledRuleTypes.push(RuleFormType.cloudAlerting, RuleFormType.cloudRecording);\n  }\n\n  return { enabledRuleTypes, defaultRuleType };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  formInput: css`\n    width: 330px;\n    & + & {\n      margin-left: ${theme.spacing(3)};\n    }\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-end;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}