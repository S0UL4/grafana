{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getAngularLoader } from '@grafana/runtime';\nimport { changePanelPlugin } from 'app/features/panel/state/actions';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { getSectionOpenState, saveSectionOpenState } from './state/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst mapStateToProps = (state, props) => {\n  var _getPanelStateForMode;\n\n  return {\n    angularPanelComponent: (_getPanelStateForMode = getPanelStateForModel(state, props.panel)) === null || _getPanelStateForMode === void 0 ? void 0 : _getPanelStateForMode.angularComponent\n  };\n};\n\nconst mapDispatchToProps = {\n  changePanelPlugin\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport class AngularPanelOptionsUnconnected extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"element\", void 0);\n\n    _defineProperty(this, \"angularOptions\", void 0);\n  }\n\n  componentDidMount() {\n    this.loadAngularOptions();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.plugin !== prevProps.plugin || this.props.angularPanelComponent !== prevProps.angularPanelComponent) {\n      this.cleanUpAngularOptions();\n    }\n\n    this.loadAngularOptions();\n  }\n\n  componentWillUnmount() {\n    this.cleanUpAngularOptions();\n  }\n\n  cleanUpAngularOptions() {\n    if (this.angularOptions) {\n      this.angularOptions.destroy();\n      this.angularOptions = null;\n    }\n  }\n\n  loadAngularOptions() {\n    const {\n      panel,\n      angularPanelComponent,\n      changePanelPlugin\n    } = this.props;\n\n    if (!this.element || !angularPanelComponent || this.angularOptions) {\n      return;\n    }\n\n    const scope = angularPanelComponent.getScope(); // When full page reloading in edit mode the angular panel has on fully compiled and instantiated yet\n\n    if (!scope.$$childHead) {\n      setTimeout(() => {\n        this.forceUpdate();\n      });\n      return;\n    }\n\n    const panelCtrl = scope.$$childHead.ctrl;\n    panelCtrl.initEditMode();\n\n    panelCtrl.onPluginTypeChange = plugin => {\n      changePanelPlugin({\n        panel,\n        pluginId: plugin.id\n      });\n    };\n\n    let template = '';\n\n    for (let i = 0; i < panelCtrl.editorTabs.length; i++) {\n      const tab = panelCtrl.editorTabs[i];\n      tab.isOpen = getSectionOpenState(tab.title, i === 0);\n      template += `\n      <div class=\"panel-options-group\" ng-cloak>\n        <div class=\"panel-options-group__header\" ng-click=\"toggleOptionGroup(${i})\" aria-label=\"${tab.title} section\">\n          <div class=\"panel-options-group__icon\">\n            <icon name=\"ctrl.editorTabs[${i}].isOpen ? 'angle-down' : 'angle-right'\"></icon>\n          </div>\n          <div class=\"panel-options-group__title\">${tab.title}</div>\n        </div>\n        <div class=\"panel-options-group__body\" ng-if=\"ctrl.editorTabs[${i}].isOpen\">\n          <panel-editor-tab editor-tab=\"ctrl.editorTabs[${i}]\" ctrl=\"ctrl\"></panel-editor-tab>\n        </div>\n      </div>\n      `;\n    }\n\n    const loader = getAngularLoader();\n    const scopeProps = {\n      ctrl: panelCtrl,\n      toggleOptionGroup: index => {\n        const tab = panelCtrl.editorTabs[index];\n        tab.isOpen = !tab.isOpen;\n        saveSectionOpenState(tab.title, tab.isOpen);\n      }\n    };\n    this.angularOptions = loader.load(this.element, scopeProps, template);\n    this.angularOptions.digest();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(\"div\", {\n      ref: elem => this.element = elem\n    });\n  }\n\n}\nexport const AngularPanelOptions = connect(mapStateToProps, mapDispatchToProps)(AngularPanelOptionsUnconnected);","map":{"version":3,"names":["React","PureComponent","connect","getAngularLoader","changePanelPlugin","getPanelStateForModel","getSectionOpenState","saveSectionOpenState","mapStateToProps","state","props","angularPanelComponent","panel","angularComponent","mapDispatchToProps","connector","AngularPanelOptionsUnconnected","constructor","componentDidMount","loadAngularOptions","componentDidUpdate","prevProps","plugin","cleanUpAngularOptions","componentWillUnmount","angularOptions","destroy","element","scope","getScope","$$childHead","setTimeout","forceUpdate","panelCtrl","ctrl","initEditMode","onPluginTypeChange","pluginId","id","template","i","editorTabs","length","tab","isOpen","title","loader","scopeProps","toggleOptionGroup","index","load","digest","render","elem","AngularPanelOptions"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/AngularPanelOptions.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { PanelPlugin, PanelPluginMeta } from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { changePanelPlugin } from 'app/features/panel/state/actions';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { PanelModel, DashboardModel } from '../../state';\n\nimport { getSectionOpenState, saveSectionOpenState } from './state/utils';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => ({\n  angularPanelComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n});\n\nconst mapDispatchToProps = { changePanelPlugin };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport class AngularPanelOptionsUnconnected extends PureComponent<Props> {\n  element?: HTMLElement | null;\n  angularOptions?: AngularComponent | null;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.loadAngularOptions();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.plugin !== prevProps.plugin ||\n      this.props.angularPanelComponent !== prevProps.angularPanelComponent\n    ) {\n      this.cleanUpAngularOptions();\n    }\n\n    this.loadAngularOptions();\n  }\n\n  componentWillUnmount() {\n    this.cleanUpAngularOptions();\n  }\n\n  cleanUpAngularOptions() {\n    if (this.angularOptions) {\n      this.angularOptions.destroy();\n      this.angularOptions = null;\n    }\n  }\n\n  loadAngularOptions() {\n    const { panel, angularPanelComponent, changePanelPlugin } = this.props;\n\n    if (!this.element || !angularPanelComponent || this.angularOptions) {\n      return;\n    }\n\n    const scope = angularPanelComponent.getScope();\n\n    // When full page reloading in edit mode the angular panel has on fully compiled and instantiated yet\n    if (!scope.$$childHead) {\n      setTimeout(() => {\n        this.forceUpdate();\n      });\n      return;\n    }\n\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    panelCtrl.initEditMode();\n    panelCtrl.onPluginTypeChange = (plugin: PanelPluginMeta) => {\n      changePanelPlugin({ panel, pluginId: plugin.id });\n    };\n\n    let template = '';\n    for (let i = 0; i < panelCtrl.editorTabs.length; i++) {\n      const tab = panelCtrl.editorTabs[i];\n      tab.isOpen = getSectionOpenState(tab.title, i === 0);\n\n      template += `\n      <div class=\"panel-options-group\" ng-cloak>\n        <div class=\"panel-options-group__header\" ng-click=\"toggleOptionGroup(${i})\" aria-label=\"${tab.title} section\">\n          <div class=\"panel-options-group__icon\">\n            <icon name=\"ctrl.editorTabs[${i}].isOpen ? 'angle-down' : 'angle-right'\"></icon>\n          </div>\n          <div class=\"panel-options-group__title\">${tab.title}</div>\n        </div>\n        <div class=\"panel-options-group__body\" ng-if=\"ctrl.editorTabs[${i}].isOpen\">\n          <panel-editor-tab editor-tab=\"ctrl.editorTabs[${i}]\" ctrl=\"ctrl\"></panel-editor-tab>\n        </div>\n      </div>\n      `;\n    }\n\n    const loader = getAngularLoader();\n    const scopeProps = {\n      ctrl: panelCtrl,\n      toggleOptionGroup: (index: number) => {\n        const tab = panelCtrl.editorTabs[index];\n        tab.isOpen = !tab.isOpen;\n        saveSectionOpenState(tab.title, tab.isOpen as boolean);\n      },\n    };\n\n    this.angularOptions = loader.load(this.element, scopeProps, template);\n    this.angularOptions.digest();\n  }\n\n  render() {\n    return <div ref={(elem) => (this.element = elem)} />;\n  }\n}\n\nexport const AngularPanelOptions = connect(mapStateToProps, mapDispatchToProps)(AngularPanelOptionsUnconnected);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}