{"ast":null,"code":"import { find } from 'lodash';\nimport { dateTime, FieldType, getFieldDisplayName, getTimeField } from '@grafana/data';\nimport { colors } from '@grafana/ui';\nimport { applyNullInsertThreshold } from '@grafana/ui/src/components/GraphNG/nullInsertThreshold';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nexport class DataProcessor {\n  constructor(panel) {\n    this.panel = panel;\n  }\n\n  getSeriesList(options) {\n    const list = [];\n    const {\n      dataList,\n      range\n    } = options;\n\n    if (!dataList || !dataList.length) {\n      return list;\n    }\n\n    for (let i = 0; i < dataList.length; i++) {\n      let series = dataList[i];\n      let {\n        timeField\n      } = getTimeField(series);\n\n      if (!timeField) {\n        continue;\n      }\n\n      series = applyNullInsertThreshold({\n        frame: series,\n        refFieldName: timeField.name\n      });\n      timeField = getTimeField(series).timeField; // use updated length\n\n      for (let j = 0; j < series.fields.length; j++) {\n        const field = series.fields[j];\n\n        if (field.type !== FieldType.number) {\n          continue;\n        }\n\n        const name = getFieldDisplayName(field, series, dataList);\n        const datapoints = [];\n\n        for (let r = 0; r < series.length; r++) {\n          datapoints.push([field.values.get(r), dateTime(timeField.values.get(r)).valueOf()]);\n        }\n\n        list.push(this.toTimeSeries(field, name, i, j, datapoints, list.length, range));\n      }\n    } // Merge all the rows if we want to show a histogram\n\n\n    if (this.panel.xaxis.mode === 'histogram' && !this.panel.stack && list.length > 1) {\n      const first = list[0];\n      first.alias = first.aliasEscaped = 'Count';\n\n      for (let i = 1; i < list.length; i++) {\n        first.datapoints = first.datapoints.concat(list[i].datapoints);\n      }\n\n      return [first];\n    }\n\n    return list;\n  }\n\n  toTimeSeries(field, alias, dataFrameIndex, fieldIndex, datapoints, index, range) {\n    const colorIndex = index % colors.length;\n    const color = this.panel.aliasColors[alias] || colors[colorIndex];\n    const series = new TimeSeries({\n      datapoints: datapoints || [],\n      alias: alias,\n      color: config.theme.visualization.getColorByName(color),\n      unit: field.config ? field.config.unit : undefined,\n      dataFrameIndex,\n      fieldIndex\n    });\n\n    if (datapoints && datapoints.length > 0 && range) {\n      const last = datapoints[datapoints.length - 1][1];\n      const from = range.from;\n\n      if (last - from.valueOf() < -10000) {\n        // If the data is in reverse order\n        const first = datapoints[0][1];\n\n        if (first - from.valueOf() < -10000) {\n          series.isOutsideRange = true;\n        }\n      }\n    }\n\n    return series;\n  }\n\n  setPanelDefaultsForNewXAxisMode() {\n    switch (this.panel.xaxis.mode) {\n      case 'time':\n        {\n          this.panel.bars = false;\n          this.panel.lines = true;\n          this.panel.points = false;\n          this.panel.legend.show = true;\n          this.panel.tooltip.shared = true;\n          this.panel.xaxis.values = [];\n          break;\n        }\n\n      case 'series':\n        {\n          this.panel.bars = true;\n          this.panel.lines = false;\n          this.panel.points = false;\n          this.panel.stack = false;\n          this.panel.legend.show = false;\n          this.panel.tooltip.shared = false;\n          this.panel.xaxis.values = ['total'];\n          break;\n        }\n\n      case 'histogram':\n        {\n          this.panel.bars = true;\n          this.panel.lines = false;\n          this.panel.points = false;\n          this.panel.stack = false;\n          this.panel.legend.show = false;\n          this.panel.tooltip.shared = false;\n          break;\n        }\n    }\n  }\n\n  validateXAxisSeriesValue() {\n    switch (this.panel.xaxis.mode) {\n      case 'series':\n        {\n          if (this.panel.xaxis.values.length === 0) {\n            this.panel.xaxis.values = ['total'];\n            return;\n          }\n\n          const validOptions = this.getXAxisValueOptions({});\n          const found = find(validOptions, {\n            value: this.panel.xaxis.values[0]\n          });\n\n          if (!found) {\n            this.panel.xaxis.values = ['total'];\n          }\n\n          return;\n        }\n    }\n  }\n\n  getXAxisValueOptions(options) {\n    switch (this.panel.xaxis.mode) {\n      case 'series':\n        {\n          return [{\n            text: 'Avg',\n            value: 'avg'\n          }, {\n            text: 'Min',\n            value: 'min'\n          }, {\n            text: 'Max',\n            value: 'max'\n          }, {\n            text: 'Total',\n            value: 'total'\n          }, {\n            text: 'Count',\n            value: 'count'\n          }];\n        }\n    }\n\n    return [];\n  }\n\n  pluckDeep(obj, property) {\n    const propertyParts = property.split('.');\n    let value = obj;\n\n    for (let i = 0; i < propertyParts.length; ++i) {\n      if (value[propertyParts[i]]) {\n        value = value[propertyParts[i]];\n      } else {\n        return undefined;\n      }\n    }\n\n    return value;\n  }\n\n}","map":{"version":3,"names":["find","dateTime","FieldType","getFieldDisplayName","getTimeField","colors","applyNullInsertThreshold","config","TimeSeries","DataProcessor","constructor","panel","getSeriesList","options","list","dataList","range","length","i","series","timeField","frame","refFieldName","name","j","fields","field","type","number","datapoints","r","push","values","get","valueOf","toTimeSeries","xaxis","mode","stack","first","alias","aliasEscaped","concat","dataFrameIndex","fieldIndex","index","colorIndex","color","aliasColors","theme","visualization","getColorByName","unit","undefined","last","from","isOutsideRange","setPanelDefaultsForNewXAxisMode","bars","lines","points","legend","show","tooltip","shared","validateXAxisSeriesValue","validOptions","getXAxisValueOptions","found","value","text","pluckDeep","obj","property","propertyParts","split"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/data_processor.ts"],"sourcesContent":["import { find } from 'lodash';\n\nimport { DataFrame, dateTime, Field, FieldType, getFieldDisplayName, getTimeField, TimeRange } from '@grafana/data';\nimport { colors } from '@grafana/ui';\nimport { applyNullInsertThreshold } from '@grafana/ui/src/components/GraphNG/nullInsertThreshold';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\n\ntype Options = {\n  dataList: DataFrame[];\n  range?: TimeRange;\n};\n\nexport class DataProcessor {\n  constructor(private panel: any) {}\n\n  getSeriesList(options: Options): TimeSeries[] {\n    const list: TimeSeries[] = [];\n    const { dataList, range } = options;\n\n    if (!dataList || !dataList.length) {\n      return list;\n    }\n\n    for (let i = 0; i < dataList.length; i++) {\n      let series = dataList[i];\n      let { timeField } = getTimeField(series);\n\n      if (!timeField) {\n        continue;\n      }\n\n      series = applyNullInsertThreshold({ frame: series, refFieldName: timeField.name });\n      timeField = getTimeField(series).timeField!; // use updated length\n\n      for (let j = 0; j < series.fields.length; j++) {\n        const field = series.fields[j];\n\n        if (field.type !== FieldType.number) {\n          continue;\n        }\n        const name = getFieldDisplayName(field, series, dataList);\n        const datapoints = [];\n\n        for (let r = 0; r < series.length; r++) {\n          datapoints.push([field.values.get(r), dateTime(timeField.values.get(r)).valueOf()]);\n        }\n\n        list.push(this.toTimeSeries(field, name, i, j, datapoints, list.length, range));\n      }\n    }\n\n    // Merge all the rows if we want to show a histogram\n    if (this.panel.xaxis.mode === 'histogram' && !this.panel.stack && list.length > 1) {\n      const first = list[0];\n      first.alias = first.aliasEscaped = 'Count';\n\n      for (let i = 1; i < list.length; i++) {\n        first.datapoints = first.datapoints.concat(list[i].datapoints);\n      }\n\n      return [first];\n    }\n\n    return list;\n  }\n\n  private toTimeSeries(\n    field: Field,\n    alias: string,\n    dataFrameIndex: number,\n    fieldIndex: number,\n    datapoints: any[][],\n    index: number,\n    range?: TimeRange\n  ) {\n    const colorIndex = index % colors.length;\n    const color = this.panel.aliasColors[alias] || colors[colorIndex];\n\n    const series = new TimeSeries({\n      datapoints: datapoints || [],\n      alias: alias,\n      color: config.theme.visualization.getColorByName(color),\n      unit: field.config ? field.config.unit : undefined,\n      dataFrameIndex,\n      fieldIndex,\n    });\n\n    if (datapoints && datapoints.length > 0 && range) {\n      const last = datapoints[datapoints.length - 1][1];\n      const from = range.from;\n\n      if (last - from.valueOf() < -10000) {\n        // If the data is in reverse order\n        const first = datapoints[0][1];\n        if (first - from.valueOf() < -10000) {\n          series.isOutsideRange = true;\n        }\n      }\n    }\n    return series;\n  }\n\n  setPanelDefaultsForNewXAxisMode() {\n    switch (this.panel.xaxis.mode) {\n      case 'time': {\n        this.panel.bars = false;\n        this.panel.lines = true;\n        this.panel.points = false;\n        this.panel.legend.show = true;\n        this.panel.tooltip.shared = true;\n        this.panel.xaxis.values = [];\n        break;\n      }\n      case 'series': {\n        this.panel.bars = true;\n        this.panel.lines = false;\n        this.panel.points = false;\n        this.panel.stack = false;\n        this.panel.legend.show = false;\n        this.panel.tooltip.shared = false;\n        this.panel.xaxis.values = ['total'];\n        break;\n      }\n      case 'histogram': {\n        this.panel.bars = true;\n        this.panel.lines = false;\n        this.panel.points = false;\n        this.panel.stack = false;\n        this.panel.legend.show = false;\n        this.panel.tooltip.shared = false;\n        break;\n      }\n    }\n  }\n\n  validateXAxisSeriesValue() {\n    switch (this.panel.xaxis.mode) {\n      case 'series': {\n        if (this.panel.xaxis.values.length === 0) {\n          this.panel.xaxis.values = ['total'];\n          return;\n        }\n\n        const validOptions = this.getXAxisValueOptions({});\n        const found: any = find(validOptions, { value: this.panel.xaxis.values[0] });\n        if (!found) {\n          this.panel.xaxis.values = ['total'];\n        }\n        return;\n      }\n    }\n  }\n\n  getXAxisValueOptions(options: any) {\n    switch (this.panel.xaxis.mode) {\n      case 'series': {\n        return [\n          { text: 'Avg', value: 'avg' },\n          { text: 'Min', value: 'min' },\n          { text: 'Max', value: 'max' },\n          { text: 'Total', value: 'total' },\n          { text: 'Count', value: 'count' },\n        ];\n      }\n    }\n\n    return [];\n  }\n\n  pluckDeep(obj: any, property: string) {\n    const propertyParts = property.split('.');\n    let value = obj;\n    for (let i = 0; i < propertyParts.length; ++i) {\n      if (value[propertyParts[i]]) {\n        value = value[propertyParts[i]];\n      } else {\n        return undefined;\n      }\n    }\n    return value;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}