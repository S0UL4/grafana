{"ast":null,"code":"import { debounce } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\nimport { Segment, SegmentAsync } from '@grafana/ui';\nimport { actions } from '../state/actions';\nimport { useDispatch } from '../state/context';\nimport { getTagOperatorsSelectables, getTagsSelectables, getTagValuesSelectables } from '../state/providers';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/**\n * Editor for a tag at given index. Allows changing the name of the tag, operator or value. Tag names are provided with\n * getTagsSelectables and contain only valid tags (it may depend on currently used tags). The dropdown for tag names is\n * also used for removing tag (with a special \"--remove tag--\" option provided by getTagsSelectables).\n *\n * Options for tag names and values are reloaded while user is typing with backend taking care of auto-complete\n * (auto-complete cannot be implemented in front-end because backend returns only limited number of entries)\n */\nexport function TagEditor({\n  tag,\n  tagIndex,\n  state\n}) {\n  const dispatch = useDispatch();\n  const getTagsOptions = useCallback(inputValue => {\n    return getTagsSelectables(state, tagIndex, inputValue || '');\n  }, [state, tagIndex]);\n  const debouncedGetTagsOptions = useMemo(() => debounce(getTagsOptions, 200, {\n    leading: true\n  }), [getTagsOptions]);\n  const getTagValueOptions = useCallback(inputValue => {\n    return getTagValuesSelectables(state, tag, tagIndex, inputValue || '');\n  }, [state, tagIndex, tag]);\n  const debouncedGetTagValueOptions = useMemo(() => debounce(getTagValueOptions, 200, {\n    leading: true\n  }), [getTagValueOptions]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(SegmentAsync, {\n      inputMinWidth: 150,\n      value: tag.key,\n      loadOptions: debouncedGetTagsOptions,\n      reloadOptionsOnChange: true,\n      onChange: value => {\n        dispatch(actions.tagChanged({\n          tag: Object.assign({}, tag, {\n            key: value.value\n          }),\n          index: tagIndex\n        }));\n      },\n      allowCustomValue: true\n    }), /*#__PURE__*/_jsx(Segment, {\n      inputMinWidth: 50,\n      value: tag.operator,\n      options: getTagOperatorsSelectables(),\n      onChange: value => {\n        dispatch(actions.tagChanged({\n          tag: Object.assign({}, tag, {\n            operator: value.value\n          }),\n          index: tagIndex\n        }));\n      }\n    }), /*#__PURE__*/_jsx(SegmentAsync, {\n      inputMinWidth: 150,\n      value: tag.value,\n      loadOptions: debouncedGetTagValueOptions,\n      reloadOptionsOnChange: true,\n      onChange: value => {\n        dispatch(actions.tagChanged({\n          tag: Object.assign({}, tag, {\n            value: value.value\n          }),\n          index: tagIndex\n        }));\n      },\n      allowCustomValue: true\n    })]\n  });\n}","map":{"version":3,"names":["debounce","React","useCallback","useMemo","Segment","SegmentAsync","actions","useDispatch","getTagOperatorsSelectables","getTagsSelectables","getTagValuesSelectables","TagEditor","tag","tagIndex","state","dispatch","getTagsOptions","inputValue","debouncedGetTagsOptions","leading","getTagValueOptions","debouncedGetTagValueOptions","key","value","tagChanged","index","operator"],"sources":["/home/soula/grafana/public/app/plugins/datasource/graphite/components/TagEditor.tsx"],"sourcesContent":["import { debounce } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\n\nimport { Segment, SegmentAsync } from '@grafana/ui';\n\nimport { actions } from '../state/actions';\nimport { useDispatch } from '../state/context';\nimport { getTagOperatorsSelectables, getTagsSelectables, getTagValuesSelectables } from '../state/providers';\nimport { GraphiteQueryEditorState } from '../state/store';\nimport { GraphiteTag, GraphiteTagOperator } from '../types';\n\ntype Props = {\n  tag: GraphiteTag;\n  tagIndex: number;\n  state: GraphiteQueryEditorState;\n};\n\n/**\n * Editor for a tag at given index. Allows changing the name of the tag, operator or value. Tag names are provided with\n * getTagsSelectables and contain only valid tags (it may depend on currently used tags). The dropdown for tag names is\n * also used for removing tag (with a special \"--remove tag--\" option provided by getTagsSelectables).\n *\n * Options for tag names and values are reloaded while user is typing with backend taking care of auto-complete\n * (auto-complete cannot be implemented in front-end because backend returns only limited number of entries)\n */\nexport function TagEditor({ tag, tagIndex, state }: Props) {\n  const dispatch = useDispatch();\n  const getTagsOptions = useCallback(\n    (inputValue: string | undefined) => {\n      return getTagsSelectables(state, tagIndex, inputValue || '');\n    },\n    [state, tagIndex]\n  );\n  const debouncedGetTagsOptions = useMemo(() => debounce(getTagsOptions, 200, { leading: true }), [getTagsOptions]);\n\n  const getTagValueOptions = useCallback(\n    (inputValue: string | undefined) => {\n      return getTagValuesSelectables(state, tag, tagIndex, inputValue || '');\n    },\n    [state, tagIndex, tag]\n  );\n  const debouncedGetTagValueOptions = useMemo(\n    () => debounce(getTagValueOptions, 200, { leading: true }),\n    [getTagValueOptions]\n  );\n\n  return (\n    <>\n      <SegmentAsync\n        inputMinWidth={150}\n        value={tag.key}\n        loadOptions={debouncedGetTagsOptions}\n        reloadOptionsOnChange={true}\n        onChange={(value) => {\n          dispatch(\n            actions.tagChanged({\n              tag: { ...tag, key: value.value! },\n              index: tagIndex,\n            })\n          );\n        }}\n        allowCustomValue={true}\n      />\n      <Segment<GraphiteTagOperator>\n        inputMinWidth={50}\n        value={tag.operator}\n        options={getTagOperatorsSelectables()}\n        onChange={(value) => {\n          dispatch(\n            actions.tagChanged({\n              tag: { ...tag, operator: value.value! },\n              index: tagIndex,\n            })\n          );\n        }}\n      />\n      <SegmentAsync\n        inputMinWidth={150}\n        value={tag.value}\n        loadOptions={debouncedGetTagValueOptions}\n        reloadOptionsOnChange={true}\n        onChange={(value) => {\n          dispatch(\n            actions.tagChanged({\n              tag: { ...tag, value: value.value! },\n              index: tagIndex,\n            })\n          );\n        }}\n        allowCustomValue={true}\n      />\n    </>\n  );\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AAEA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,aAAtC;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,0BAAT,EAAqCC,kBAArC,EAAyDC,uBAAzD,QAAwF,oBAAxF;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAAT,CAAmB;EAAEC,GAAF;EAAOC,QAAP;EAAiBC;AAAjB,CAAnB,EAAoD;EACzD,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;EACA,MAAMS,cAAc,GAAGd,WAAW,CAC/Be,UAAD,IAAoC;IAClC,OAAOR,kBAAkB,CAACK,KAAD,EAAQD,QAAR,EAAkBI,UAAU,IAAI,EAAhC,CAAzB;EACD,CAH+B,EAIhC,CAACH,KAAD,EAAQD,QAAR,CAJgC,CAAlC;EAMA,MAAMK,uBAAuB,GAAGf,OAAO,CAAC,MAAMH,QAAQ,CAACgB,cAAD,EAAiB,GAAjB,EAAsB;IAAEG,OAAO,EAAE;EAAX,CAAtB,CAAf,EAAyD,CAACH,cAAD,CAAzD,CAAvC;EAEA,MAAMI,kBAAkB,GAAGlB,WAAW,CACnCe,UAAD,IAAoC;IAClC,OAAOP,uBAAuB,CAACI,KAAD,EAAQF,GAAR,EAAaC,QAAb,EAAuBI,UAAU,IAAI,EAArC,CAA9B;EACD,CAHmC,EAIpC,CAACH,KAAD,EAAQD,QAAR,EAAkBD,GAAlB,CAJoC,CAAtC;EAMA,MAAMS,2BAA2B,GAAGlB,OAAO,CACzC,MAAMH,QAAQ,CAACoB,kBAAD,EAAqB,GAArB,EAA0B;IAAED,OAAO,EAAE;EAAX,CAA1B,CAD2B,EAEzC,CAACC,kBAAD,CAFyC,CAA3C;EAKA,oBACE;IAAA,wBACE,KAAC,YAAD;MACE,aAAa,EAAE,GADjB;MAEE,KAAK,EAAER,GAAG,CAACU,GAFb;MAGE,WAAW,EAAEJ,uBAHf;MAIE,qBAAqB,EAAE,IAJzB;MAKE,QAAQ,EAAGK,KAAD,IAAW;QACnBR,QAAQ,CACNT,OAAO,CAACkB,UAAR,CAAmB;UACjBZ,GAAG,oBAAOA,GAAP;YAAYU,GAAG,EAAEC,KAAK,CAACA;UAAvB,EADc;UAEjBE,KAAK,EAAEZ;QAFU,CAAnB,CADM,CAAR;MAMD,CAZH;MAaE,gBAAgB,EAAE;IAbpB,EADF,eAgBE,KAAC,OAAD;MACE,aAAa,EAAE,EADjB;MAEE,KAAK,EAAED,GAAG,CAACc,QAFb;MAGE,OAAO,EAAElB,0BAA0B,EAHrC;MAIE,QAAQ,EAAGe,KAAD,IAAW;QACnBR,QAAQ,CACNT,OAAO,CAACkB,UAAR,CAAmB;UACjBZ,GAAG,oBAAOA,GAAP;YAAYc,QAAQ,EAAEH,KAAK,CAACA;UAA5B,EADc;UAEjBE,KAAK,EAAEZ;QAFU,CAAnB,CADM,CAAR;MAMD;IAXH,EAhBF,eA6BE,KAAC,YAAD;MACE,aAAa,EAAE,GADjB;MAEE,KAAK,EAAED,GAAG,CAACW,KAFb;MAGE,WAAW,EAAEF,2BAHf;MAIE,qBAAqB,EAAE,IAJzB;MAKE,QAAQ,EAAGE,KAAD,IAAW;QACnBR,QAAQ,CACNT,OAAO,CAACkB,UAAR,CAAmB;UACjBZ,GAAG,oBAAOA,GAAP;YAAYW,KAAK,EAAEA,KAAK,CAACA;UAAzB,EADc;UAEjBE,KAAK,EAAEZ;QAFU,CAAnB,CADM,CAAR;MAMD,CAZH;MAaE,gBAAgB,EAAE;IAbpB,EA7BF;EAAA,EADF;AA+CD"},"metadata":{},"sourceType":"module"}