{"ast":null,"code":"import React, { useCallback, useMemo, useState } from 'react';\nimport { FrameMatcherID, getFieldDisplayName } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst recoverRefIdMissing = (newRefIds, oldRefIds, previousValue) => {\n  if (!previousValue) {\n    return;\n  } // Previously selected value is missing from the new list.\n  // Find the value that is in the new list but isn't in the old list\n\n\n  let changedTo = newRefIds.find(refId => {\n    return !oldRefIds.some(refId2 => {\n      return refId === refId2;\n    });\n  });\n\n  if (changedTo) {\n    // Found the new value, we assume the old value changed to this one, so we'll use it\n    return changedTo;\n  }\n\n  return;\n};\n\nexport const FrameSelectionEditor = ({\n  value,\n  context,\n  onChange,\n  item\n}) => {\n  const listOfRefId = useMemo(() => {\n    return context.data.map(f => ({\n      value: f.refId,\n      label: `Query: ${f.refId} (size: ${f.length})`,\n      description: f.fields.map(f => getFieldDisplayName(f)).join(', ')\n    }));\n  }, [context.data]);\n  const [priorSelectionState, updatePriorSelectionState] = useState({\n    refIds: [],\n    value: undefined\n  });\n  const currentValue = useMemo(() => {\n    var _listOfRefId$find;\n\n    return (_listOfRefId$find = listOfRefId.find(refId => refId.value === (value === null || value === void 0 ? void 0 : value.options))) !== null && _listOfRefId$find !== void 0 ? _listOfRefId$find : recoverRefIdMissing(listOfRefId, priorSelectionState.refIds, priorSelectionState.value);\n  }, [value, listOfRefId]);\n  const onFilterChange = useCallback(v => {\n    onChange(v !== null && v !== void 0 && v.value ? {\n      \"id\": FrameMatcherID.byRefId,\n      \"options\": v.value\n    } : undefined);\n  }, [context.options.name]);\n\n  if (listOfRefId !== priorSelectionState.refIds || (currentValue === null || currentValue === void 0 ? void 0 : currentValue.value) !== priorSelectionState.value) {\n    updatePriorSelectionState({\n      refIds: listOfRefId,\n      value: currentValue === null || currentValue === void 0 ? void 0 : currentValue.value\n    });\n  }\n\n  return /*#__PURE__*/_jsx(Select, {\n    options: listOfRefId,\n    onChange: onFilterChange,\n    isClearable: true,\n    placeholder: \"Change filter\",\n    value: currentValue\n  });\n};","map":{"version":3,"names":["React","useCallback","useMemo","useState","FrameMatcherID","getFieldDisplayName","Select","recoverRefIdMissing","newRefIds","oldRefIds","previousValue","changedTo","find","refId","some","refId2","FrameSelectionEditor","value","context","onChange","item","listOfRefId","data","map","f","label","length","description","fields","join","priorSelectionState","updatePriorSelectionState","refIds","undefined","currentValue","options","onFilterChange","v","byRefId","name"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/layers/data/FrameSelectionEditor.tsx"],"sourcesContent":["import React, { FC, useCallback, useMemo, useState } from 'react';\nimport { FrameMatcherID, getFieldDisplayName, MatcherConfig, SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nconst recoverRefIdMissing = (newRefIds: SelectableValue[], oldRefIds: SelectableValue[], previousValue: string | undefined): SelectableValue | undefined => {\n  if (!previousValue) {\n    return;\n  }\n  // Previously selected value is missing from the new list.\n  // Find the value that is in the new list but isn't in the old list\n  let changedTo = newRefIds.find((refId) => {\n    return !oldRefIds.some((refId2) => {\n      return refId === refId2;\n    });\n  });\n  if (changedTo) {\n    // Found the new value, we assume the old value changed to this one, so we'll use it\n    return changedTo;\n  }\n  return;\n};\n\nexport const FrameSelectionEditor: FC<StandardEditorProps<MatcherConfig>> = ({\n  value,\n  context,\n  onChange,\n  item,\n}) => {\n  const listOfRefId = useMemo(() => {\n    return context.data.map(f => ({\n      value: f.refId,\n      label: `Query: ${f.refId} (size: ${f.length})`,\n      description: f.fields.map(f => getFieldDisplayName(f)).join(', '),\n    }));\n  }, [context.data]);\n\n  const [priorSelectionState, updatePriorSelectionState] = useState({\n    refIds: [] as SelectableValue[],\n    value: undefined as string | undefined,\n  });\n\n  const currentValue = useMemo(() => {\n    return listOfRefId.find((refId) => refId.value === value?.options) ?? recoverRefIdMissing(listOfRefId, priorSelectionState.refIds, priorSelectionState.value);\n  }, [value, listOfRefId])\n\n  const onFilterChange = useCallback((v: SelectableValue<string>) => {\n    onChange(v?.value ? {\n      \"id\": FrameMatcherID.byRefId,\n      \"options\": v.value\n    } : undefined);\n  }, [context.options.name]);\n\n  if (listOfRefId !== priorSelectionState.refIds || currentValue?.value !== priorSelectionState.value)  {\n    updatePriorSelectionState({\n      refIds: listOfRefId,\n      value: currentValue?.value\n    });\n  }\n  return (\n    <Select options={listOfRefId} onChange={onFilterChange} isClearable={true} placeholder=\"Change filter\" value={currentValue}/>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}