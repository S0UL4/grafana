{"ast":null,"code":"export let AzureCloud;\n\n(function (AzureCloud) {\n  AzureCloud[\"Public\"] = \"AzureCloud\";\n  AzureCloud[\"China\"] = \"AzureChinaCloud\";\n  AzureCloud[\"USGovernment\"] = \"AzureUSGovernment\";\n  AzureCloud[\"Germany\"] = \"AzureGermanCloud\";\n  AzureCloud[\"None\"] = \"\";\n})(AzureCloud || (AzureCloud = {}));\n\nexport const KnownAzureClouds = [{\n  value: AzureCloud.Public,\n  label: 'Azure'\n}, {\n  value: AzureCloud.China,\n  label: 'Azure China'\n}, {\n  value: AzureCloud.USGovernment,\n  label: 'Azure US Government'\n}, {\n  value: AzureCloud.Germany,\n  label: 'Azure Germany'\n}];\nexport function isCredentialsComplete(credentials) {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}","map":{"version":3,"names":["AzureCloud","KnownAzureClouds","value","Public","label","China","USGovernment","Germany","isCredentialsComplete","credentials","authType","azureCloud","tenantId","clientId","clientSecret"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/configuration/AzureCredentials.ts"],"sourcesContent":["import { SelectableValue } from '@grafana/data';\n\nexport enum AzureCloud {\n  Public = 'AzureCloud',\n  China = 'AzureChinaCloud',\n  USGovernment = 'AzureUSGovernment',\n  Germany = 'AzureGermanCloud',\n  None = '',\n}\n\nexport const KnownAzureClouds = [\n  { value: AzureCloud.Public, label: 'Azure' },\n  { value: AzureCloud.China, label: 'Azure China' },\n  { value: AzureCloud.USGovernment, label: 'Azure US Government' },\n  { value: AzureCloud.Germany, label: 'Azure Germany' },\n] as SelectableValue[];\n\nexport type AzureAuthType = 'msi' | 'clientsecret';\n\nexport type ConcealedSecret = symbol;\n\ninterface AzureCredentialsBase {\n  authType: AzureAuthType;\n  defaultSubscriptionId?: string;\n}\n\nexport interface AzureManagedIdentityCredentials extends AzureCredentialsBase {\n  authType: 'msi';\n}\n\nexport interface AzureClientSecretCredentials extends AzureCredentialsBase {\n  authType: 'clientsecret';\n  azureCloud?: string;\n  tenantId?: string;\n  clientId?: string;\n  clientSecret?: string | ConcealedSecret;\n}\n\nexport type AzureCredentials = AzureManagedIdentityCredentials | AzureClientSecretCredentials;\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n"],"mappings":"AAEA,WAAYA,UAAZ;;WAAYA,U;EAAAA,U;EAAAA,U;EAAAA,U;EAAAA,U;EAAAA,U;GAAAA,U,KAAAA,U;;AAQZ,OAAO,MAAMC,gBAAgB,GAAG,CAC9B;EAAEC,KAAK,EAAEF,UAAU,CAACG,MAApB;EAA4BC,KAAK,EAAE;AAAnC,CAD8B,EAE9B;EAAEF,KAAK,EAAEF,UAAU,CAACK,KAApB;EAA2BD,KAAK,EAAE;AAAlC,CAF8B,EAG9B;EAAEF,KAAK,EAAEF,UAAU,CAACM,YAApB;EAAkCF,KAAK,EAAE;AAAzC,CAH8B,EAI9B;EAAEF,KAAK,EAAEF,UAAU,CAACO,OAApB;EAA6BH,KAAK,EAAE;AAApC,CAJ8B,CAAzB;AA8BP,OAAO,SAASI,qBAAT,CAA+BC,WAA/B,EAAuE;EAC5E,QAAQA,WAAW,CAACC,QAApB;IACE,KAAK,KAAL;MACE,OAAO,IAAP;;IACF,KAAK,cAAL;MACE,OAAO,CAAC,EAAED,WAAW,CAACE,UAAZ,IAA0BF,WAAW,CAACG,QAAtC,IAAkDH,WAAW,CAACI,QAA9D,IAA0EJ,WAAW,CAACK,YAAxF,CAAR;EAJJ;AAMD"},"metadata":{},"sourceType":"module"}