{"ast":null,"code":"var _h, _th, _th2, _Icon, _Icon2, _Icon3;\n\nimport { css, cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, ConfirmModal, Field, HorizontalGroup, Icon, RadioButtonGroup, Tooltip, useStyles2, useTheme2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { useExternalAmSelector } from '../../hooks/useExternalAmSelector';\nimport { addExternalAlertmanagersAction, fetchExternalAlertmanagersAction, fetchExternalAlertmanagersConfigAction } from '../../state/actions';\nimport { AddAlertManagerModal } from './AddAlertManagerModal';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst alertmanagerChoices = [{\n  value: 'internal',\n  label: 'Only Internal'\n}, {\n  value: 'external',\n  label: 'Only External'\n}, {\n  value: 'all',\n  label: 'Both internal and external'\n}];\nexport const ExternalAlertmanagers = () => {\n  var _Button;\n\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const [modalState, setModalState] = useState({\n    open: false,\n    payload: [{\n      url: ''\n    }]\n  });\n  const [deleteModalState, setDeleteModalState] = useState({\n    open: false,\n    index: 0\n  });\n  const externalAlertManagers = useExternalAmSelector();\n  const alertmanagersChoice = useSelector(state => {\n    var _state$unifiedAlertin;\n\n    return (_state$unifiedAlertin = state.unifiedAlerting.externalAlertmanagers.alertmanagerConfig.result) === null || _state$unifiedAlertin === void 0 ? void 0 : _state$unifiedAlertin.alertmanagersChoice;\n  });\n  const theme = useTheme2();\n  useEffect(() => {\n    dispatch(fetchExternalAlertmanagersAction());\n    dispatch(fetchExternalAlertmanagersConfigAction());\n    const interval = setInterval(() => dispatch(fetchExternalAlertmanagersAction()), 5000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch]);\n  const onDelete = useCallback(index => {\n    // to delete we need to filter the alertmanager from the list and repost\n    const newList = (externalAlertManagers !== null && externalAlertManagers !== void 0 ? externalAlertManagers : []).filter((am, i) => i !== index).map(am => {\n      return am.url;\n    });\n    dispatch(addExternalAlertmanagersAction({\n      alertmanagers: newList,\n      alertmanagersChoice: alertmanagersChoice !== null && alertmanagersChoice !== void 0 ? alertmanagersChoice : 'all'\n    }));\n    setDeleteModalState({\n      open: false,\n      index: 0\n    });\n  }, [externalAlertManagers, dispatch, alertmanagersChoice]);\n  const onEdit = useCallback(() => {\n    const ams = externalAlertManagers ? [...externalAlertManagers] : [{\n      url: ''\n    }];\n    setModalState(state => Object.assign({}, state, {\n      open: true,\n      payload: ams\n    }));\n  }, [setModalState, externalAlertManagers]);\n  const onOpenModal = useCallback(() => {\n    setModalState(state => {\n      const ams = externalAlertManagers ? [...externalAlertManagers, {\n        url: ''\n      }] : [{\n        url: ''\n      }];\n      return Object.assign({}, state, {\n        open: true,\n        payload: ams\n      });\n    });\n  }, [externalAlertManagers]);\n  const onCloseModal = useCallback(() => {\n    setModalState(state => Object.assign({}, state, {\n      open: false\n    }));\n  }, [setModalState]);\n\n  const onChangeAlertmanagerChoice = alertmanagersChoice => {\n    dispatch(addExternalAlertmanagersAction({\n      alertmanagers: externalAlertManagers.map(am => am.url),\n      alertmanagersChoice\n    }));\n  };\n\n  const onChangeAlertmanagers = alertmanagers => {\n    dispatch(addExternalAlertmanagersAction({\n      alertmanagers,\n      alertmanagersChoice: alertmanagersChoice !== null && alertmanagersChoice !== void 0 ? alertmanagersChoice : 'all'\n    }));\n  };\n\n  const getStatusColor = status => {\n    switch (status) {\n      case 'active':\n        return theme.colors.success.main;\n\n      case 'pending':\n        return theme.colors.warning.main;\n\n      default:\n        return theme.colors.error.main;\n    }\n  };\n\n  const noAlertmanagers = (externalAlertManagers === null || externalAlertManagers === void 0 ? void 0 : externalAlertManagers.length) === 0;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [_h || (_h = /*#__PURE__*/_jsx(\"h4\", {\n      children: \"External Alertmanagers\"\n    })), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.muted,\n      children: \"You can have your Grafana managed alerts be delivered to one or many external Alertmanager(s) in addition to the internal Alertmanager by specifying their URLs below.\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.actions,\n      children: !noAlertmanagers && /*#__PURE__*/_jsx(Button, {\n        type: \"button\",\n        onClick: onOpenModal,\n        children: \"Add Alertmanager\"\n      })\n    }), noAlertmanagers ? /*#__PURE__*/_jsx(EmptyListCTA, {\n      title: \"You have not added any external alertmanagers\",\n      onClick: onOpenModal,\n      buttonTitle: \"Add Alertmanager\",\n      buttonIcon: \"bell-slash\"\n    }) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"table\", {\n        className: cx('filter-table form-inline filter-table--hover', styles.table),\n        children: [/*#__PURE__*/_jsx(\"thead\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [_th || (_th = /*#__PURE__*/_jsx(\"th\", {\n              children: \"Url\"\n            })), _th2 || (_th2 = /*#__PURE__*/_jsx(\"th\", {\n              children: \"Status\"\n            })), /*#__PURE__*/_jsx(\"th\", {\n              style: {\n                width: '2%'\n              },\n              children: \"Action\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"tbody\", {\n          children: externalAlertManagers === null || externalAlertManagers === void 0 ? void 0 : externalAlertManagers.map((am, index) => {\n            return /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsxs(\"td\", {\n                children: [/*#__PURE__*/_jsx(\"span\", {\n                  className: styles.url,\n                  children: am.url\n                }), am.actualUrl ? /*#__PURE__*/_jsx(Tooltip, {\n                  content: `Discovered ${am.actualUrl} from ${am.url}`,\n                  theme: \"info\",\n                  children: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n                    name: \"info-circle\"\n                  }))\n                }) : null]\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: /*#__PURE__*/_jsx(Icon, {\n                  name: \"heart\",\n                  style: {\n                    color: getStatusColor(am.status)\n                  },\n                  title: am.status\n                })\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n                  children: [_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n                    variant: \"secondary\",\n                    type: \"button\",\n                    onClick: onEdit,\n                    \"aria-label\": \"Edit alertmanager\",\n                    children: _Icon2 || (_Icon2 = /*#__PURE__*/_jsx(Icon, {\n                      name: \"pen\"\n                    }))\n                  })), /*#__PURE__*/_jsx(Button, {\n                    variant: \"destructive\",\n                    \"aria-label\": \"Remove alertmanager\",\n                    type: \"button\",\n                    onClick: () => setDeleteModalState({\n                      open: true,\n                      index\n                    }),\n                    children: _Icon3 || (_Icon3 = /*#__PURE__*/_jsx(Icon, {\n                      name: \"trash-alt\"\n                    }))\n                  })]\n                })\n              })]\n            }, index);\n          })\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(Field, {\n          label: \"Send alerts to\",\n          description: \"Sets which Alertmanager will handle your alerts. Internal (Grafana built in Alertmanager), External (All Alertmanagers configured above), or both.\",\n          children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n            options: alertmanagerChoices,\n            value: alertmanagersChoice,\n            onChange: value => onChangeAlertmanagerChoice(value)\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(ConfirmModal, {\n      isOpen: deleteModalState.open,\n      title: \"Remove Alertmanager\",\n      body: \"Are you sure you want to remove this Alertmanager\",\n      confirmText: \"Remove\",\n      onConfirm: () => onDelete(deleteModalState.index),\n      onDismiss: () => setDeleteModalState({\n        open: false,\n        index: 0\n      })\n    }), modalState.open && /*#__PURE__*/_jsx(AddAlertManagerModal, {\n      onClose: onCloseModal,\n      alertmanagers: modalState.payload,\n      onChangeAlertmanagerConfig: onChangeAlertmanagers\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  url: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  muted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  actions: css`\n    margin-top: ${theme.spacing(2)};\n    display: flex;\n    justify-content: flex-end;\n  `,\n  table: css`\n    margin-bottom: ${theme.spacing(2)};\n  `\n});","map":{"version":3,"names":["css","cx","React","useCallback","useEffect","useState","useDispatch","useSelector","Button","ConfirmModal","Field","HorizontalGroup","Icon","RadioButtonGroup","Tooltip","useStyles2","useTheme2","EmptyListCTA","useExternalAmSelector","addExternalAlertmanagersAction","fetchExternalAlertmanagersAction","fetchExternalAlertmanagersConfigAction","AddAlertManagerModal","alertmanagerChoices","value","label","ExternalAlertmanagers","styles","getStyles","dispatch","modalState","setModalState","open","payload","url","deleteModalState","setDeleteModalState","index","externalAlertManagers","alertmanagersChoice","state","unifiedAlerting","externalAlertmanagers","alertmanagerConfig","result","theme","interval","setInterval","clearInterval","onDelete","newList","filter","am","i","map","alertmanagers","onEdit","ams","onOpenModal","onCloseModal","onChangeAlertmanagerChoice","onChangeAlertmanagers","getStatusColor","status","colors","success","main","warning","error","noAlertmanagers","length","muted","actions","table","width","actualUrl","color","spacing","text","secondary"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/admin/ExternalAlertmanagers.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  ConfirmModal,\n  Field,\n  HorizontalGroup,\n  Icon,\n  RadioButtonGroup,\n  Tooltip,\n  useStyles2,\n  useTheme2,\n} from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { StoreState } from 'app/types/store';\n\nimport { useExternalAmSelector } from '../../hooks/useExternalAmSelector';\nimport {\n  addExternalAlertmanagersAction,\n  fetchExternalAlertmanagersAction,\n  fetchExternalAlertmanagersConfigAction,\n} from '../../state/actions';\n\nimport { AddAlertManagerModal } from './AddAlertManagerModal';\n\nconst alertmanagerChoices = [\n  { value: 'internal', label: 'Only Internal' },\n  { value: 'external', label: 'Only External' },\n  { value: 'all', label: 'Both internal and external' },\n];\n\nexport const ExternalAlertmanagers = () => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const [modalState, setModalState] = useState({ open: false, payload: [{ url: '' }] });\n  const [deleteModalState, setDeleteModalState] = useState({ open: false, index: 0 });\n\n  const externalAlertManagers = useExternalAmSelector();\n  const alertmanagersChoice = useSelector(\n    (state: StoreState) => state.unifiedAlerting.externalAlertmanagers.alertmanagerConfig.result?.alertmanagersChoice\n  );\n  const theme = useTheme2();\n\n  useEffect(() => {\n    dispatch(fetchExternalAlertmanagersAction());\n    dispatch(fetchExternalAlertmanagersConfigAction());\n    const interval = setInterval(() => dispatch(fetchExternalAlertmanagersAction()), 5000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch]);\n\n  const onDelete = useCallback(\n    (index: number) => {\n      // to delete we need to filter the alertmanager from the list and repost\n      const newList = (externalAlertManagers ?? [])\n        .filter((am, i) => i !== index)\n        .map((am) => {\n          return am.url;\n        });\n      dispatch(\n        addExternalAlertmanagersAction({ alertmanagers: newList, alertmanagersChoice: alertmanagersChoice ?? 'all' })\n      );\n      setDeleteModalState({ open: false, index: 0 });\n    },\n    [externalAlertManagers, dispatch, alertmanagersChoice]\n  );\n\n  const onEdit = useCallback(() => {\n    const ams = externalAlertManagers ? [...externalAlertManagers] : [{ url: '' }];\n    setModalState((state) => ({\n      ...state,\n      open: true,\n      payload: ams,\n    }));\n  }, [setModalState, externalAlertManagers]);\n\n  const onOpenModal = useCallback(() => {\n    setModalState((state) => {\n      const ams = externalAlertManagers ? [...externalAlertManagers, { url: '' }] : [{ url: '' }];\n      return {\n        ...state,\n        open: true,\n        payload: ams,\n      };\n    });\n  }, [externalAlertManagers]);\n\n  const onCloseModal = useCallback(() => {\n    setModalState((state) => ({\n      ...state,\n      open: false,\n    }));\n  }, [setModalState]);\n\n  const onChangeAlertmanagerChoice = (alertmanagersChoice: string) => {\n    dispatch(\n      addExternalAlertmanagersAction({ alertmanagers: externalAlertManagers.map((am) => am.url), alertmanagersChoice })\n    );\n  };\n\n  const onChangeAlertmanagers = (alertmanagers: string[]) => {\n    dispatch(addExternalAlertmanagersAction({ alertmanagers, alertmanagersChoice: alertmanagersChoice ?? 'all' }));\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return theme.colors.success.main;\n\n      case 'pending':\n        return theme.colors.warning.main;\n\n      default:\n        return theme.colors.error.main;\n    }\n  };\n\n  const noAlertmanagers = externalAlertManagers?.length === 0;\n\n  return (\n    <div>\n      <h4>External Alertmanagers</h4>\n      <div className={styles.muted}>\n        You can have your Grafana managed alerts be delivered to one or many external Alertmanager(s) in addition to the\n        internal Alertmanager by specifying their URLs below.\n      </div>\n      <div className={styles.actions}>\n        {!noAlertmanagers && (\n          <Button type=\"button\" onClick={onOpenModal}>\n            Add Alertmanager\n          </Button>\n        )}\n      </div>\n      {noAlertmanagers ? (\n        <EmptyListCTA\n          title=\"You have not added any external alertmanagers\"\n          onClick={onOpenModal}\n          buttonTitle=\"Add Alertmanager\"\n          buttonIcon=\"bell-slash\"\n        />\n      ) : (\n        <>\n          <table className={cx('filter-table form-inline filter-table--hover', styles.table)}>\n            <thead>\n              <tr>\n                <th>Url</th>\n                <th>Status</th>\n                <th style={{ width: '2%' }}>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {externalAlertManagers?.map((am, index) => {\n                return (\n                  <tr key={index}>\n                    <td>\n                      <span className={styles.url}>{am.url}</span>\n                      {am.actualUrl ? (\n                        <Tooltip content={`Discovered ${am.actualUrl} from ${am.url}`} theme=\"info\">\n                          <Icon name=\"info-circle\" />\n                        </Tooltip>\n                      ) : null}\n                    </td>\n                    <td>\n                      <Icon name=\"heart\" style={{ color: getStatusColor(am.status) }} title={am.status} />\n                    </td>\n                    <td>\n                      <HorizontalGroup>\n                        <Button variant=\"secondary\" type=\"button\" onClick={onEdit} aria-label=\"Edit alertmanager\">\n                          <Icon name=\"pen\" />\n                        </Button>\n                        <Button\n                          variant=\"destructive\"\n                          aria-label=\"Remove alertmanager\"\n                          type=\"button\"\n                          onClick={() => setDeleteModalState({ open: true, index })}\n                        >\n                          <Icon name=\"trash-alt\" />\n                        </Button>\n                      </HorizontalGroup>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n          <div>\n            <Field\n              label=\"Send alerts to\"\n              description=\"Sets which Alertmanager will handle your alerts. Internal (Grafana built in Alertmanager), External (All Alertmanagers configured above), or both.\"\n            >\n              <RadioButtonGroup\n                options={alertmanagerChoices}\n                value={alertmanagersChoice}\n                onChange={(value) => onChangeAlertmanagerChoice(value!)}\n              />\n            </Field>\n          </div>\n        </>\n      )}\n      <ConfirmModal\n        isOpen={deleteModalState.open}\n        title=\"Remove Alertmanager\"\n        body=\"Are you sure you want to remove this Alertmanager\"\n        confirmText=\"Remove\"\n        onConfirm={() => onDelete(deleteModalState.index)}\n        onDismiss={() => setDeleteModalState({ open: false, index: 0 })}\n      />\n      {modalState.open && (\n        <AddAlertManagerModal\n          onClose={onCloseModal}\n          alertmanagers={modalState.payload}\n          onChangeAlertmanagerConfig={onChangeAlertmanagers}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  url: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  muted: css`\n    color: ${theme.colors.text.secondary};\n  `,\n  actions: css`\n    margin-top: ${theme.spacing(2)};\n    display: flex;\n    justify-content: flex-end;\n  `,\n  table: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}