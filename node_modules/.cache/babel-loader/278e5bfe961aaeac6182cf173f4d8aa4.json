{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport { isString } from 'lodash';\nimport React from 'react';\nimport { getCellLinks } from '../../utils';\nimport { CellActions } from './CellActions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function JSONViewCell(props) {\n  var _field$config$custom;\n\n  const {\n    cell,\n    tableStyles,\n    cellProps,\n    field,\n    row\n  } = props;\n  const inspectEnabled = Boolean((_field$config$custom = field.config.custom) === null || _field$config$custom === void 0 ? void 0 : _field$config$custom.inspect);\n  const txt = css`\n    cursor: pointer;\n    font-family: monospace;\n  `;\n  let value = cell.value;\n  let displayValue = value;\n\n  if (isString(value)) {\n    try {\n      value = JSON.parse(value);\n    } catch {} // ignore errors\n\n  } else {\n    displayValue = JSON.stringify(value, null, ' ');\n  }\n\n  const {\n    link,\n    onClick\n  } = getCellLinks(field, row);\n  return /*#__PURE__*/_jsxs(\"div\", Object.assign({}, cellProps, {\n    className: inspectEnabled ? tableStyles.cellContainerNoOverflow : tableStyles.cellContainer,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: cx(tableStyles.cellText, txt),\n      children: [!link && /*#__PURE__*/_jsx(\"div\", {\n        className: tableStyles.cellText,\n        children: displayValue\n      }), link && /*#__PURE__*/_jsx(\"a\", {\n        href: link.href,\n        onClick: onClick,\n        target: link.target,\n        title: link.title,\n        className: tableStyles.cellLink,\n        children: displayValue\n      })]\n    }), inspectEnabled && /*#__PURE__*/_jsx(CellActions, Object.assign({}, props, {\n      previewMode: \"code\"\n    }))]\n  }));\n}","map":{"version":3,"names":["css","cx","isString","React","getCellLinks","CellActions","JSONViewCell","props","cell","tableStyles","cellProps","field","row","inspectEnabled","Boolean","config","custom","inspect","txt","value","displayValue","JSON","parse","stringify","link","onClick","cellContainerNoOverflow","cellContainer","cellText","href","target","title","cellLink"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Table/JSONViewCell.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { isString } from 'lodash';\nimport React from 'react';\n\nimport { getCellLinks } from '../../utils';\n\nimport { CellActions } from './CellActions';\nimport { TableCellProps, TableFieldOptions } from './types';\n\nexport function JSONViewCell(props: TableCellProps): JSX.Element {\n  const { cell, tableStyles, cellProps, field, row } = props;\n  const inspectEnabled = Boolean((field.config.custom as TableFieldOptions)?.inspect);\n  const txt = css`\n    cursor: pointer;\n    font-family: monospace;\n  `;\n\n  let value = cell.value;\n  let displayValue = value;\n\n  if (isString(value)) {\n    try {\n      value = JSON.parse(value);\n    } catch {} // ignore errors\n  } else {\n    displayValue = JSON.stringify(value, null, ' ');\n  }\n\n  const { link, onClick } = getCellLinks(field, row);\n\n  return (\n    <div {...cellProps} className={inspectEnabled ? tableStyles.cellContainerNoOverflow : tableStyles.cellContainer}>\n      <div className={cx(tableStyles.cellText, txt)}>\n        {!link && <div className={tableStyles.cellText}>{displayValue}</div>}\n        {link && (\n          <a\n            href={link.href}\n            onClick={onClick}\n            target={link.target}\n            title={link.title}\n            className={tableStyles.cellLink}\n          >\n            {displayValue}\n          </a>\n        )}\n      </div>\n      {inspectEnabled && <CellActions {...props} previewMode=\"code\" />}\n    </div>\n  );\n}\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,QAA6B,aAA7B;AAEA,SAASC,WAAT,QAA4B,eAA5B;;;AAGA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA0D;EAAA;;EAC/D,MAAM;IAAEC,IAAF;IAAQC,WAAR;IAAqBC,SAArB;IAAgCC,KAAhC;IAAuCC;EAAvC,IAA+CL,KAArD;EACA,MAAMM,cAAc,GAAGC,OAAO,yBAAEH,KAAK,CAACI,MAAN,CAAaC,MAAf,yDAAC,qBAA4CC,OAA7C,CAA9B;EACA,MAAMC,GAAG,GAAGlB,GAAI;AAClB;AACA;AACA,GAHE;EAKA,IAAImB,KAAK,GAAGX,IAAI,CAACW,KAAjB;EACA,IAAIC,YAAY,GAAGD,KAAnB;;EAEA,IAAIjB,QAAQ,CAACiB,KAAD,CAAZ,EAAqB;IACnB,IAAI;MACFA,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAR;IACD,CAFD,CAEE,MAAM,CAAE,CAHS,CAGR;;EACZ,CAJD,MAIO;IACLC,YAAY,GAAGC,IAAI,CAACE,SAAL,CAAeJ,KAAf,EAAsB,IAAtB,EAA4B,GAA5B,CAAf;EACD;;EAED,MAAM;IAAEK,IAAF;IAAQC;EAAR,IAAoBrB,YAAY,CAACO,KAAD,EAAQC,GAAR,CAAtC;EAEA,oBACE,+BAASF,SAAT;IAAoB,SAAS,EAAEG,cAAc,GAAGJ,WAAW,CAACiB,uBAAf,GAAyCjB,WAAW,CAACkB,aAAlG;IAAA,wBACE;MAAK,SAAS,EAAE1B,EAAE,CAACQ,WAAW,CAACmB,QAAb,EAAuBV,GAAvB,CAAlB;MAAA,WACG,CAACM,IAAD,iBAAS;QAAK,SAAS,EAAEf,WAAW,CAACmB,QAA5B;QAAA,UAAuCR;MAAvC,EADZ,EAEGI,IAAI,iBACH;QACE,IAAI,EAAEA,IAAI,CAACK,IADb;QAEE,OAAO,EAAEJ,OAFX;QAGE,MAAM,EAAED,IAAI,CAACM,MAHf;QAIE,KAAK,EAAEN,IAAI,CAACO,KAJd;QAKE,SAAS,EAAEtB,WAAW,CAACuB,QALzB;QAAA,UAOGZ;MAPH,EAHJ;IAAA,EADF,EAeGP,cAAc,iBAAI,KAAC,WAAD,oBAAiBN,KAAjB;MAAwB,WAAW,EAAC;IAApC,GAfrB;EAAA,GADF;AAmBD"},"metadata":{},"sourceType":"module"}