{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { memo, useState } from 'react';\nimport { FilterInput, Spinner, stylesFactory, useTheme } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\nimport { useManageDashboards } from '../hooks/useManageDashboards';\nimport { useSearchQuery } from '../hooks/useSearchQuery';\nimport { SearchLayout } from '../types';\nimport { ConfirmDeleteModal } from './ConfirmDeleteModal';\nimport { DashboardActions } from './DashboardActions';\nimport { MoveToFolderModal } from './MoveToFolderModal';\nimport { SearchResults } from './SearchResults';\nimport { SearchResultsFilter } from './SearchResultsFilter';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst {\n  isEditor\n} = contextSrv;\nexport const ManageDashboards = /*#__PURE__*/memo(({\n  folder\n}) => {\n  const folderId = folder === null || folder === void 0 ? void 0 : folder.id;\n  const folderUid = folder === null || folder === void 0 ? void 0 : folder.uid;\n  const theme = useTheme();\n  const styles = getStyles(theme);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);\n  const defaultLayout = folderId ? SearchLayout.List : SearchLayout.Folders;\n  const queryParamsDefaults = {\n    skipRecent: true,\n    skipStarred: true,\n    folderIds: folderId ? [folderId] : [],\n    layout: defaultLayout\n  };\n  const {\n    query,\n    hasFilters,\n    onQueryChange,\n    onTagFilterChange,\n    onStarredFilterChange,\n    onTagAdd,\n    onSortChange,\n    onLayoutChange\n  } = useSearchQuery(queryParamsDefaults);\n  const {\n    results,\n    loading,\n    initialLoading,\n    allChecked,\n    hasEditPermissionInFolders,\n    canMove,\n    canSave,\n    canDelete,\n    onToggleSection,\n    onToggleChecked,\n    onToggleAllChecked,\n    onDeleteItems,\n    onMoveItems,\n    noFolders,\n    showPreviews,\n    setShowPreviews\n  } = useManageDashboards(query, {}, folder);\n\n  const onMoveTo = () => {\n    setIsMoveModalOpen(true);\n  };\n\n  const onItemDelete = () => {\n    setIsDeleteModalOpen(true);\n  };\n\n  if (initialLoading) {\n    return /*#__PURE__*/_jsx(Spinner, {\n      className: styles.spinner\n    });\n  }\n\n  if (noFolders && !hasFilters) {\n    return /*#__PURE__*/_jsx(EmptyListCTA, {\n      title: \"This folder doesn't have any dashboards yet\",\n      buttonIcon: \"plus\",\n      buttonTitle: \"Create Dashboard\",\n      buttonLink: `dashboard/new?folderId=${folderId}`,\n      proTip: \"Add/move dashboards to your folder at ->\",\n      proTipLink: \"dashboards\",\n      proTipLinkTitle: \"Manage dashboards\",\n      proTipTarget: \"\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"page-action-bar\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form gf-form--grow m-r-2\",\n        children: /*#__PURE__*/_jsx(FilterInput, {\n          value: query.query,\n          onChange: onQueryChange,\n          placeholder: 'Search dashboards by name'\n        })\n      }), /*#__PURE__*/_jsx(DashboardActions, {\n        folderId: folderId,\n        canCreateFolders: contextSrv.hasAccess(AccessControlAction.FoldersCreate, isEditor),\n        canCreateDashboards: contextSrv.hasAccess(AccessControlAction.DashboardsCreate, hasEditPermissionInFolders || !!canSave)\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.results,\n      children: [/*#__PURE__*/_jsx(SearchResultsFilter, {\n        allChecked: allChecked,\n        canDelete: hasEditPermissionInFolders && canDelete,\n        canMove: hasEditPermissionInFolders && canMove,\n        deleteItem: onItemDelete,\n        moveTo: onMoveTo,\n        setShowPreviews: setShowPreviews,\n        onToggleAllChecked: onToggleAllChecked,\n        onStarredFilterChange: onStarredFilterChange,\n        onSortChange: onSortChange,\n        onTagFilterChange: onTagFilterChange,\n        query: query,\n        showPreviews: showPreviews,\n        hideLayout: !!folderUid,\n        onLayoutChange: onLayoutChange,\n        editable: hasEditPermissionInFolders\n      }), /*#__PURE__*/_jsx(SearchResults, {\n        loading: loading,\n        results: results,\n        editable: hasEditPermissionInFolders,\n        onTagSelected: onTagAdd,\n        onToggleSection: onToggleSection,\n        onToggleChecked: onToggleChecked,\n        layout: query.layout,\n        showPreviews: showPreviews\n      })]\n    }), /*#__PURE__*/_jsx(ConfirmDeleteModal, {\n      onDeleteItems: onDeleteItems,\n      results: results,\n      isOpen: isDeleteModalOpen,\n      onDismiss: () => setIsDeleteModalOpen(false)\n    }), /*#__PURE__*/_jsx(MoveToFolderModal, {\n      onMoveItems: onMoveItems,\n      results: results,\n      isOpen: isMoveModalOpen,\n      onDismiss: () => setIsMoveModalOpen(false)\n    })]\n  });\n});\nManageDashboards.displayName = 'ManageDashboards';\nexport default ManageDashboards;\nconst getStyles = stylesFactory(theme => {\n  return {\n    container: css`\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `,\n    results: css`\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 0;\n      height: 100%;\n      padding-top: ${theme.spacing.lg};\n    `,\n    spinner: css`\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 200px;\n    `\n  };\n});","map":{"version":3,"names":["css","React","memo","useState","FilterInput","Spinner","stylesFactory","useTheme","EmptyListCTA","contextSrv","AccessControlAction","useManageDashboards","useSearchQuery","SearchLayout","ConfirmDeleteModal","DashboardActions","MoveToFolderModal","SearchResults","SearchResultsFilter","isEditor","ManageDashboards","folder","folderId","id","folderUid","uid","theme","styles","getStyles","isDeleteModalOpen","setIsDeleteModalOpen","isMoveModalOpen","setIsMoveModalOpen","defaultLayout","List","Folders","queryParamsDefaults","skipRecent","skipStarred","folderIds","layout","query","hasFilters","onQueryChange","onTagFilterChange","onStarredFilterChange","onTagAdd","onSortChange","onLayoutChange","results","loading","initialLoading","allChecked","hasEditPermissionInFolders","canMove","canSave","canDelete","onToggleSection","onToggleChecked","onToggleAllChecked","onDeleteItems","onMoveItems","noFolders","showPreviews","setShowPreviews","onMoveTo","onItemDelete","spinner","container","hasAccess","FoldersCreate","DashboardsCreate","displayName","spacing","lg"],"sources":["/home/soula/grafana/public/app/features/search/components/ManageDashboards.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, memo, useState } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { FilterInput, Spinner, stylesFactory, useTheme } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { FolderDTO, AccessControlAction } from 'app/types';\n\nimport { useManageDashboards } from '../hooks/useManageDashboards';\nimport { useSearchQuery } from '../hooks/useSearchQuery';\nimport { SearchLayout } from '../types';\n\nimport { ConfirmDeleteModal } from './ConfirmDeleteModal';\nimport { DashboardActions } from './DashboardActions';\nimport { MoveToFolderModal } from './MoveToFolderModal';\nimport { SearchResults } from './SearchResults';\nimport { SearchResultsFilter } from './SearchResultsFilter';\n\nexport interface Props {\n  folder?: FolderDTO;\n}\n\nconst { isEditor } = contextSrv;\n\nexport const ManageDashboards: FC<Props> = memo(({ folder }) => {\n  const folderId = folder?.id;\n  const folderUid = folder?.uid;\n  const theme = useTheme();\n  const styles = getStyles(theme);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);\n  const defaultLayout = folderId ? SearchLayout.List : SearchLayout.Folders;\n  const queryParamsDefaults = {\n    skipRecent: true,\n    skipStarred: true,\n    folderIds: folderId ? [folderId] : [],\n    layout: defaultLayout,\n  };\n\n  const {\n    query,\n    hasFilters,\n    onQueryChange,\n    onTagFilterChange,\n    onStarredFilterChange,\n    onTagAdd,\n    onSortChange,\n    onLayoutChange,\n  } = useSearchQuery(queryParamsDefaults);\n\n  const {\n    results,\n    loading,\n    initialLoading,\n    allChecked,\n    hasEditPermissionInFolders,\n    canMove,\n    canSave,\n    canDelete,\n    onToggleSection,\n    onToggleChecked,\n    onToggleAllChecked,\n    onDeleteItems,\n    onMoveItems,\n    noFolders,\n    showPreviews,\n    setShowPreviews,\n  } = useManageDashboards(query, {}, folder);\n\n  const onMoveTo = () => {\n    setIsMoveModalOpen(true);\n  };\n\n  const onItemDelete = () => {\n    setIsDeleteModalOpen(true);\n  };\n\n  if (initialLoading) {\n    return <Spinner className={styles.spinner} />;\n  }\n\n  if (noFolders && !hasFilters) {\n    return (\n      <EmptyListCTA\n        title=\"This folder doesn't have any dashboards yet\"\n        buttonIcon=\"plus\"\n        buttonTitle=\"Create Dashboard\"\n        buttonLink={`dashboard/new?folderId=${folderId}`}\n        proTip=\"Add/move dashboards to your folder at ->\"\n        proTipLink=\"dashboards\"\n        proTipLinkTitle=\"Manage dashboards\"\n        proTipTarget=\"\"\n      />\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow m-r-2\">\n          <FilterInput value={query.query} onChange={onQueryChange} placeholder={'Search dashboards by name'} />\n        </div>\n        <DashboardActions\n          folderId={folderId}\n          canCreateFolders={contextSrv.hasAccess(AccessControlAction.FoldersCreate, isEditor)}\n          canCreateDashboards={contextSrv.hasAccess(\n            AccessControlAction.DashboardsCreate,\n            hasEditPermissionInFolders || !!canSave\n          )}\n        />\n      </div>\n\n      <div className={styles.results}>\n        <SearchResultsFilter\n          allChecked={allChecked}\n          canDelete={hasEditPermissionInFolders && canDelete}\n          canMove={hasEditPermissionInFolders && canMove}\n          deleteItem={onItemDelete}\n          moveTo={onMoveTo}\n          setShowPreviews={setShowPreviews}\n          onToggleAllChecked={onToggleAllChecked}\n          onStarredFilterChange={onStarredFilterChange}\n          onSortChange={onSortChange}\n          onTagFilterChange={onTagFilterChange}\n          query={query}\n          showPreviews={showPreviews}\n          hideLayout={!!folderUid}\n          onLayoutChange={onLayoutChange}\n          editable={hasEditPermissionInFolders}\n        />\n        <SearchResults\n          loading={loading}\n          results={results}\n          editable={hasEditPermissionInFolders}\n          onTagSelected={onTagAdd}\n          onToggleSection={onToggleSection}\n          onToggleChecked={onToggleChecked}\n          layout={query.layout}\n          showPreviews={showPreviews}\n        />\n      </div>\n      <ConfirmDeleteModal\n        onDeleteItems={onDeleteItems}\n        results={results}\n        isOpen={isDeleteModalOpen}\n        onDismiss={() => setIsDeleteModalOpen(false)}\n      />\n      <MoveToFolderModal\n        onMoveItems={onMoveItems}\n        results={results}\n        isOpen={isMoveModalOpen}\n        onDismiss={() => setIsMoveModalOpen(false)}\n      />\n    </div>\n  );\n});\n\nManageDashboards.displayName = 'ManageDashboards';\n\nexport default ManageDashboards;\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    container: css`\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `,\n    results: css`\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 0;\n      height: 100%;\n      padding-top: ${theme.spacing.lg};\n    `,\n    spinner: css`\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 200px;\n    `,\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}