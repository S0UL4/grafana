{"ast":null,"code":"import { ResourceDimensionMode } from './types';\nimport { findField, getLastNotNullFieldValue } from './utils'; //---------------------------------------------------------\n// Resource dimension\n//---------------------------------------------------------\n\nexport function getPublicOrAbsoluteUrl(v) {\n  if (!v) {\n    return '';\n  }\n\n  return v.indexOf(':/') > 0 ? v : window.__grafana_public_path__ + v;\n}\nexport function getResourceDimension(frame, config) {\n  var _config$mode;\n\n  const mode = (_config$mode = config.mode) !== null && _config$mode !== void 0 ? _config$mode : ResourceDimensionMode.Fixed;\n\n  if (mode === ResourceDimensionMode.Fixed) {\n    const v = getPublicOrAbsoluteUrl(config.fixed);\n    return {\n      isAssumed: !Boolean(v),\n      fixed: v,\n      value: () => v,\n      get: i => v\n    };\n  }\n\n  const field = findField(frame, config.field);\n\n  if (!field) {\n    const v = '';\n    return {\n      isAssumed: true,\n      fixed: v,\n      value: () => v,\n      get: i => v\n    };\n  }\n\n  if (mode === ResourceDimensionMode.Mapping) {\n    const mapper = v => getPublicOrAbsoluteUrl(`${v}`);\n\n    return {\n      field,\n      get: i => mapper(field.values.get(i)),\n      value: () => mapper(getLastNotNullFieldValue(field))\n    };\n  }\n\n  const getIcon = value => {\n    var _disp$icon;\n\n    const disp = field.display;\n    return getPublicOrAbsoluteUrl((_disp$icon = disp(value).icon) !== null && _disp$icon !== void 0 ? _disp$icon : '');\n  };\n\n  return {\n    field,\n    get: index => getIcon(field.values.get(index)),\n    value: () => getIcon(getLastNotNullFieldValue(field))\n  };\n}","map":{"version":3,"names":["ResourceDimensionMode","findField","getLastNotNullFieldValue","getPublicOrAbsoluteUrl","v","indexOf","window","__grafana_public_path__","getResourceDimension","frame","config","mode","Fixed","fixed","isAssumed","Boolean","value","get","i","field","Mapping","mapper","values","getIcon","disp","display","icon","index"],"sources":["/home/soula/grafana/public/app/features/dimensions/resource.ts"],"sourcesContent":["import { DataFrame } from '@grafana/data';\n\nimport { DimensionSupplier, ResourceDimensionConfig, ResourceDimensionMode } from './types';\nimport { findField, getLastNotNullFieldValue } from './utils';\n\n//---------------------------------------------------------\n// Resource dimension\n//---------------------------------------------------------\nexport function getPublicOrAbsoluteUrl(v: string): string {\n  if (!v) {\n    return '';\n  }\n  return v.indexOf(':/') > 0 ? v : (window as any).__grafana_public_path__ + v;\n}\n\nexport function getResourceDimension(\n  frame: DataFrame | undefined,\n  config: ResourceDimensionConfig\n): DimensionSupplier<string> {\n  const mode = config.mode ?? ResourceDimensionMode.Fixed;\n  if (mode === ResourceDimensionMode.Fixed) {\n    const v = getPublicOrAbsoluteUrl(config.fixed!);\n    return {\n      isAssumed: !Boolean(v),\n      fixed: v,\n      value: () => v,\n      get: (i) => v,\n    };\n  }\n\n  const field = findField(frame, config.field);\n  if (!field) {\n    const v = '';\n    return {\n      isAssumed: true,\n      fixed: v,\n      value: () => v,\n      get: (i) => v,\n    };\n  }\n\n  if (mode === ResourceDimensionMode.Mapping) {\n    const mapper = (v: any) => getPublicOrAbsoluteUrl(`${v}`);\n    return {\n      field,\n      get: (i) => mapper(field.values.get(i)),\n      value: () => mapper(getLastNotNullFieldValue(field)),\n    };\n  }\n\n  const getIcon = (value: any): string => {\n    const disp = field.display!;\n    return getPublicOrAbsoluteUrl(disp(value).icon ?? '');\n  };\n\n  return {\n    field,\n    get: (index: number): string => getIcon(field.values.get(index)),\n    value: () => getIcon(getLastNotNullFieldValue(field)),\n  };\n}\n"],"mappings":"AAEA,SAAqDA,qBAArD,QAAkF,SAAlF;AACA,SAASC,SAAT,EAAoBC,wBAApB,QAAoD,SAApD,C,CAEA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAgCC,CAAhC,EAAmD;EACxD,IAAI,CAACA,CAAL,EAAQ;IACN,OAAO,EAAP;EACD;;EACD,OAAOA,CAAC,CAACC,OAAF,CAAU,IAAV,IAAkB,CAAlB,GAAsBD,CAAtB,GAA2BE,MAAD,CAAgBC,uBAAhB,GAA0CH,CAA3E;AACD;AAED,OAAO,SAASI,oBAAT,CACLC,KADK,EAELC,MAFK,EAGsB;EAAA;;EAC3B,MAAMC,IAAI,mBAAGD,MAAM,CAACC,IAAV,uDAAkBX,qBAAqB,CAACY,KAAlD;;EACA,IAAID,IAAI,KAAKX,qBAAqB,CAACY,KAAnC,EAA0C;IACxC,MAAMR,CAAC,GAAGD,sBAAsB,CAACO,MAAM,CAACG,KAAR,CAAhC;IACA,OAAO;MACLC,SAAS,EAAE,CAACC,OAAO,CAACX,CAAD,CADd;MAELS,KAAK,EAAET,CAFF;MAGLY,KAAK,EAAE,MAAMZ,CAHR;MAILa,GAAG,EAAGC,CAAD,IAAOd;IAJP,CAAP;EAMD;;EAED,MAAMe,KAAK,GAAGlB,SAAS,CAACQ,KAAD,EAAQC,MAAM,CAACS,KAAf,CAAvB;;EACA,IAAI,CAACA,KAAL,EAAY;IACV,MAAMf,CAAC,GAAG,EAAV;IACA,OAAO;MACLU,SAAS,EAAE,IADN;MAELD,KAAK,EAAET,CAFF;MAGLY,KAAK,EAAE,MAAMZ,CAHR;MAILa,GAAG,EAAGC,CAAD,IAAOd;IAJP,CAAP;EAMD;;EAED,IAAIO,IAAI,KAAKX,qBAAqB,CAACoB,OAAnC,EAA4C;IAC1C,MAAMC,MAAM,GAAIjB,CAAD,IAAYD,sBAAsB,CAAE,GAAEC,CAAE,EAAN,CAAjD;;IACA,OAAO;MACLe,KADK;MAELF,GAAG,EAAGC,CAAD,IAAOG,MAAM,CAACF,KAAK,CAACG,MAAN,CAAaL,GAAb,CAAiBC,CAAjB,CAAD,CAFb;MAGLF,KAAK,EAAE,MAAMK,MAAM,CAACnB,wBAAwB,CAACiB,KAAD,CAAzB;IAHd,CAAP;EAKD;;EAED,MAAMI,OAAO,GAAIP,KAAD,IAAwB;IAAA;;IACtC,MAAMQ,IAAI,GAAGL,KAAK,CAACM,OAAnB;IACA,OAAOtB,sBAAsB,eAACqB,IAAI,CAACR,KAAD,CAAJ,CAAYU,IAAb,mDAAqB,EAArB,CAA7B;EACD,CAHD;;EAKA,OAAO;IACLP,KADK;IAELF,GAAG,EAAGU,KAAD,IAA2BJ,OAAO,CAACJ,KAAK,CAACG,MAAN,CAAaL,GAAb,CAAiBU,KAAjB,CAAD,CAFlC;IAGLX,KAAK,EAAE,MAAMO,OAAO,CAACrB,wBAAwB,CAACiB,KAAD,CAAzB;EAHf,CAAP;AAKD"},"metadata":{},"sourceType":"module"}