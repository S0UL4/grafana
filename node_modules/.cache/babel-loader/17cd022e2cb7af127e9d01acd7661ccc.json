{"ast":null,"code":"var _Icon, _Icon2, _LoadingPlaceholder;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { AppEvents } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { LoadingPlaceholder, JSONFormatter, Icon, HorizontalGroup, ClipboardButton } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class TestRuleResult extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isLoading: false,\n      allNodesExpanded: null,\n      testRuleResponse: {}\n    });\n\n    _defineProperty(this, \"formattedJson\", void 0);\n\n    _defineProperty(this, \"clipboard\", void 0);\n\n    _defineProperty(this, \"setFormattedJson\", formattedJson => {\n      this.formattedJson = formattedJson;\n    });\n\n    _defineProperty(this, \"getTextForClipboard\", () => {\n      return JSON.stringify(this.formattedJson, null, 2);\n    });\n\n    _defineProperty(this, \"onClipboardSuccess\", () => {\n      appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n    });\n\n    _defineProperty(this, \"onToggleExpand\", () => {\n      this.setState(prevState => Object.assign({}, prevState, {\n        allNodesExpanded: !this.state.allNodesExpanded\n      }));\n    });\n\n    _defineProperty(this, \"getNrOfOpenNodes\", () => {\n      if (this.state.allNodesExpanded === null) {\n        return 3; // 3 is default, ie when state is null\n      } else if (this.state.allNodesExpanded) {\n        return 20;\n      }\n\n      return 1;\n    });\n\n    _defineProperty(this, \"renderExpandCollapse\", () => {\n      const {\n        allNodesExpanded\n      } = this.state;\n\n      const collapse = /*#__PURE__*/_jsxs(_Fragment, {\n        children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n          name: \"minus-circle\"\n        })), \" Collapse All\"]\n      });\n\n      const expand = /*#__PURE__*/_jsxs(_Fragment, {\n        children: [_Icon2 || (_Icon2 = /*#__PURE__*/_jsx(Icon, {\n          name: \"plus-circle\"\n        })), \" Expand All\"]\n      });\n\n      return allNodesExpanded ? collapse : expand;\n    });\n  }\n\n  componentDidMount() {\n    this.testRule();\n  }\n\n  async testRule() {\n    const {\n      dashboard,\n      panel\n    } = this.props; // dashboard save model\n\n    const model = dashboard.getSaveModelClone(); // now replace panel to get current edits\n\n    model.panels = model.panels.map(dashPanel => {\n      return dashPanel.id === panel.id ? panel.getSaveModel() : dashPanel;\n    });\n    const payload = {\n      dashboard: model,\n      panelId: panel.id\n    };\n    this.setState({\n      isLoading: true\n    });\n    const testRuleResponse = await getBackendSrv().post(`/api/alerts/test`, payload);\n    this.setState({\n      isLoading: false,\n      testRuleResponse\n    });\n  }\n\n  render() {\n    const {\n      testRuleResponse,\n      isLoading\n    } = this.state;\n\n    if (isLoading === true) {\n      return _LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n        text: \"Evaluating rule\"\n      }));\n    }\n\n    const openNodes = this.getNrOfOpenNodes();\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"pull-right\",\n        children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n          spacing: \"md\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            onClick: this.onToggleExpand,\n            children: this.renderExpandCollapse()\n          }), /*#__PURE__*/_jsx(ClipboardButton, {\n            getText: this.getTextForClipboard,\n            onClipboardCopy: this.onClipboardSuccess,\n            icon: \"copy\",\n            children: \"Copy to Clipboard\"\n          })]\n        })\n      }), /*#__PURE__*/_jsx(JSONFormatter, {\n        json: testRuleResponse,\n        open: openNodes,\n        onDidRender: this.setFormattedJson\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","AppEvents","getBackendSrv","LoadingPlaceholder","JSONFormatter","Icon","HorizontalGroup","ClipboardButton","appEvents","TestRuleResult","isLoading","allNodesExpanded","testRuleResponse","formattedJson","JSON","stringify","emit","alertSuccess","setState","prevState","state","collapse","expand","componentDidMount","testRule","dashboard","panel","props","model","getSaveModelClone","panels","map","dashPanel","id","getSaveModel","payload","panelId","post","render","openNodes","getNrOfOpenNodes","onToggleExpand","renderExpandCollapse","getTextForClipboard","onClipboardSuccess","setFormattedJson"],"sources":["/home/soula/grafana/public/app/features/alerting/TestRuleResult.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { AppEvents } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { LoadingPlaceholder, JSONFormatter, Icon, HorizontalGroup, ClipboardButton } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\n\nimport { DashboardModel, PanelModel } from '../dashboard/state';\n\nexport interface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\ninterface State {\n  isLoading: boolean;\n  allNodesExpanded: boolean | null;\n  testRuleResponse: {};\n}\n\nexport class TestRuleResult extends PureComponent<Props, State> {\n  readonly state: State = {\n    isLoading: false,\n    allNodesExpanded: null,\n    testRuleResponse: {},\n  };\n\n  formattedJson: any;\n  clipboard: any;\n\n  componentDidMount() {\n    this.testRule();\n  }\n\n  async testRule() {\n    const { dashboard, panel } = this.props;\n\n    // dashboard save model\n    const model = dashboard.getSaveModelClone();\n\n    // now replace panel to get current edits\n    model.panels = model.panels.map((dashPanel) => {\n      return dashPanel.id === panel.id ? panel.getSaveModel() : dashPanel;\n    });\n\n    const payload = { dashboard: model, panelId: panel.id };\n\n    this.setState({ isLoading: true });\n    const testRuleResponse = await getBackendSrv().post(`/api/alerts/test`, payload);\n    this.setState({ isLoading: false, testRuleResponse });\n  }\n\n  setFormattedJson = (formattedJson: any) => {\n    this.formattedJson = formattedJson;\n  };\n\n  getTextForClipboard = () => {\n    return JSON.stringify(this.formattedJson, null, 2);\n  };\n\n  onClipboardSuccess = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  onToggleExpand = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      allNodesExpanded: !this.state.allNodesExpanded,\n    }));\n  };\n\n  getNrOfOpenNodes = () => {\n    if (this.state.allNodesExpanded === null) {\n      return 3; // 3 is default, ie when state is null\n    } else if (this.state.allNodesExpanded) {\n      return 20;\n    }\n    return 1;\n  };\n\n  renderExpandCollapse = () => {\n    const { allNodesExpanded } = this.state;\n\n    const collapse = (\n      <>\n        <Icon name=\"minus-circle\" /> Collapse All\n      </>\n    );\n    const expand = (\n      <>\n        <Icon name=\"plus-circle\" /> Expand All\n      </>\n    );\n    return allNodesExpanded ? collapse : expand;\n  };\n\n  render() {\n    const { testRuleResponse, isLoading } = this.state;\n\n    if (isLoading === true) {\n      return <LoadingPlaceholder text=\"Evaluating rule\" />;\n    }\n\n    const openNodes = this.getNrOfOpenNodes();\n\n    return (\n      <>\n        <div className=\"pull-right\">\n          <HorizontalGroup spacing=\"md\">\n            <div onClick={this.onToggleExpand}>{this.renderExpandCollapse()}</div>\n            <ClipboardButton getText={this.getTextForClipboard} onClipboardCopy={this.onClipboardSuccess} icon=\"copy\">\n              Copy to Clipboard\n            </ClipboardButton>\n          </HorizontalGroup>\n        </div>\n\n        <JSONFormatter json={testRuleResponse} open={openNodes} onDidRender={this.setFormattedJson} />\n      </>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}