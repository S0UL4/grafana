{"ast":null,"code":"import { metricAggregationConfig, pipelineOptions } from './components/QueryEditor/MetricAggregationsEditor/utils';\nexport const extendedStats = [{\n  label: 'Avg',\n  value: 'avg'\n}, {\n  label: 'Min',\n  value: 'min'\n}, {\n  label: 'Max',\n  value: 'max'\n}, {\n  label: 'Sum',\n  value: 'sum'\n}, {\n  label: 'Count',\n  value: 'count'\n}, {\n  label: 'Std Dev',\n  value: 'std_deviation'\n}, {\n  label: 'Std Dev Upper',\n  value: 'std_deviation_bounds_upper'\n}, {\n  label: 'Std Dev Lower',\n  value: 'std_deviation_bounds_lower'\n}];\nexport const movingAvgModelOptions = [{\n  label: 'Simple',\n  value: 'simple'\n}, {\n  label: 'Linear',\n  value: 'linear'\n}, {\n  label: 'Exponentially Weighted',\n  value: 'ewma'\n}, {\n  label: 'Holt Linear',\n  value: 'holt'\n}, {\n  label: 'Holt Winters',\n  value: 'holt_winters'\n}];\nexport const highlightTags = {\n  pre: '@HIGHLIGHT@',\n  post: '@/HIGHLIGHT@'\n};\nexport function defaultMetricAgg(id = '1') {\n  return {\n    type: 'count',\n    id\n  };\n}\nexport function defaultBucketAgg(id = '1') {\n  return {\n    type: 'date_histogram',\n    id,\n    settings: {\n      interval: 'auto'\n    }\n  };\n}\nexport const findMetricById = (metrics, id) => metrics.find(metric => metric.id === id);\nexport function hasMetricOfType(target, type) {\n  var _target$metrics;\n\n  return !!(target !== null && target !== void 0 && (_target$metrics = target.metrics) !== null && _target$metrics !== void 0 && _target$metrics.some(m => m.type === type));\n} // Even if we have type guards when building a query, we currently have no way of getting this information from the response.\n// We should try to find a better (type safe) way of doing the following 2.\n\nexport function isPipelineAgg(metricType) {\n  return metricType in pipelineOptions;\n}\nexport function isPipelineAggWithMultipleBucketPaths(metricType) {\n  return !!metricAggregationConfig[metricType].supportsMultipleBucketPaths;\n}","map":{"version":3,"names":["metricAggregationConfig","pipelineOptions","extendedStats","label","value","movingAvgModelOptions","highlightTags","pre","post","defaultMetricAgg","id","type","defaultBucketAgg","settings","interval","findMetricById","metrics","find","metric","hasMetricOfType","target","some","m","isPipelineAgg","metricType","isPipelineAggWithMultipleBucketPaths","supportsMultipleBucketPaths"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/query_def.ts"],"sourcesContent":["import { DateHistogram } from './components/QueryEditor/BucketAggregationsEditor/aggregations';\nimport {\n  ExtendedStat,\n  MetricAggregation,\n  MovingAverageModelOption,\n  MetricAggregationType,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { metricAggregationConfig, pipelineOptions } from './components/QueryEditor/MetricAggregationsEditor/utils';\nimport { ElasticsearchQuery } from './types';\n\nexport const extendedStats: ExtendedStat[] = [\n  { label: 'Avg', value: 'avg' },\n  { label: 'Min', value: 'min' },\n  { label: 'Max', value: 'max' },\n  { label: 'Sum', value: 'sum' },\n  { label: 'Count', value: 'count' },\n  { label: 'Std Dev', value: 'std_deviation' },\n  { label: 'Std Dev Upper', value: 'std_deviation_bounds_upper' },\n  { label: 'Std Dev Lower', value: 'std_deviation_bounds_lower' },\n];\n\nexport const movingAvgModelOptions: MovingAverageModelOption[] = [\n  { label: 'Simple', value: 'simple' },\n  { label: 'Linear', value: 'linear' },\n  { label: 'Exponentially Weighted', value: 'ewma' },\n  { label: 'Holt Linear', value: 'holt' },\n  { label: 'Holt Winters', value: 'holt_winters' },\n];\n\nexport const highlightTags = {\n  pre: '@HIGHLIGHT@',\n  post: '@/HIGHLIGHT@',\n};\n\nexport function defaultMetricAgg(id = '1'): MetricAggregation {\n  return { type: 'count', id };\n}\n\nexport function defaultBucketAgg(id = '1'): DateHistogram {\n  return { type: 'date_histogram', id, settings: { interval: 'auto' } };\n}\n\nexport const findMetricById = (metrics: MetricAggregation[], id: MetricAggregation['id']) =>\n  metrics.find((metric) => metric.id === id);\n\nexport function hasMetricOfType(target: ElasticsearchQuery, type: MetricAggregationType): boolean {\n  return !!target?.metrics?.some((m) => m.type === type);\n}\n\n// Even if we have type guards when building a query, we currently have no way of getting this information from the response.\n// We should try to find a better (type safe) way of doing the following 2.\nexport function isPipelineAgg(metricType: MetricAggregationType) {\n  return metricType in pipelineOptions;\n}\n\nexport function isPipelineAggWithMultipleBucketPaths(metricType: MetricAggregationType) {\n  return !!metricAggregationConfig[metricType].supportsMultipleBucketPaths;\n}\n"],"mappings":"AAOA,SAASA,uBAAT,EAAkCC,eAAlC,QAAyD,yDAAzD;AAGA,OAAO,MAAMC,aAA6B,GAAG,CAC3C;EAAEC,KAAK,EAAE,KAAT;EAAgBC,KAAK,EAAE;AAAvB,CAD2C,EAE3C;EAAED,KAAK,EAAE,KAAT;EAAgBC,KAAK,EAAE;AAAvB,CAF2C,EAG3C;EAAED,KAAK,EAAE,KAAT;EAAgBC,KAAK,EAAE;AAAvB,CAH2C,EAI3C;EAAED,KAAK,EAAE,KAAT;EAAgBC,KAAK,EAAE;AAAvB,CAJ2C,EAK3C;EAAED,KAAK,EAAE,OAAT;EAAkBC,KAAK,EAAE;AAAzB,CAL2C,EAM3C;EAAED,KAAK,EAAE,SAAT;EAAoBC,KAAK,EAAE;AAA3B,CAN2C,EAO3C;EAAED,KAAK,EAAE,eAAT;EAA0BC,KAAK,EAAE;AAAjC,CAP2C,EAQ3C;EAAED,KAAK,EAAE,eAAT;EAA0BC,KAAK,EAAE;AAAjC,CAR2C,CAAtC;AAWP,OAAO,MAAMC,qBAAiD,GAAG,CAC/D;EAAEF,KAAK,EAAE,QAAT;EAAmBC,KAAK,EAAE;AAA1B,CAD+D,EAE/D;EAAED,KAAK,EAAE,QAAT;EAAmBC,KAAK,EAAE;AAA1B,CAF+D,EAG/D;EAAED,KAAK,EAAE,wBAAT;EAAmCC,KAAK,EAAE;AAA1C,CAH+D,EAI/D;EAAED,KAAK,EAAE,aAAT;EAAwBC,KAAK,EAAE;AAA/B,CAJ+D,EAK/D;EAAED,KAAK,EAAE,cAAT;EAAyBC,KAAK,EAAE;AAAhC,CAL+D,CAA1D;AAQP,OAAO,MAAME,aAAa,GAAG;EAC3BC,GAAG,EAAE,aADsB;EAE3BC,IAAI,EAAE;AAFqB,CAAtB;AAKP,OAAO,SAASC,gBAAT,CAA0BC,EAAE,GAAG,GAA/B,EAAuD;EAC5D,OAAO;IAAEC,IAAI,EAAE,OAAR;IAAiBD;EAAjB,CAAP;AACD;AAED,OAAO,SAASE,gBAAT,CAA0BF,EAAE,GAAG,GAA/B,EAAmD;EACxD,OAAO;IAAEC,IAAI,EAAE,gBAAR;IAA0BD,EAA1B;IAA8BG,QAAQ,EAAE;MAAEC,QAAQ,EAAE;IAAZ;EAAxC,CAAP;AACD;AAED,OAAO,MAAMC,cAAc,GAAG,CAACC,OAAD,EAA+BN,EAA/B,KAC5BM,OAAO,CAACC,IAAR,CAAcC,MAAD,IAAYA,MAAM,CAACR,EAAP,KAAcA,EAAvC,CADK;AAGP,OAAO,SAASS,eAAT,CAAyBC,MAAzB,EAAqDT,IAArD,EAA2F;EAAA;;EAChG,OAAO,CAAC,EAACS,MAAD,aAACA,MAAD,kCAACA,MAAM,CAAEJ,OAAT,4CAAC,gBAAiBK,IAAjB,CAAuBC,CAAD,IAAOA,CAAC,CAACX,IAAF,KAAWA,IAAxC,CAAD,CAAR;AACD,C,CAED;AACA;;AACA,OAAO,SAASY,aAAT,CAAuBC,UAAvB,EAA0D;EAC/D,OAAOA,UAAU,IAAIvB,eAArB;AACD;AAED,OAAO,SAASwB,oCAAT,CAA8CD,UAA9C,EAAiF;EACtF,OAAO,CAAC,CAACxB,uBAAuB,CAACwB,UAAD,CAAvB,CAAoCE,2BAA7C;AACD"},"metadata":{},"sourceType":"module"}