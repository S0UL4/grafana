{"ast":null,"code":"import React, { useMemo, useState } from 'react';\nimport { toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\nimport { QueryEditorExpressionType, QueryEditorPropertyType } from '../../expressions';\nimport { useDimensionKeys } from '../../hooks';\nimport { getFlattenedGroupBys, getMetricNameFromExpression, getNamespaceFromExpression, setGroupByField, setSql } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst SQLGroupBy = ({\n  query,\n  datasource,\n  onQueryChange\n}) => {\n  var _query$sql;\n\n  const sql = (_query$sql = query.sql) !== null && _query$sql !== void 0 ? _query$sql : {};\n  const groupBysFromQuery = useMemo(() => {\n    var _query$sql2;\n\n    return getFlattenedGroupBys((_query$sql2 = query.sql) !== null && _query$sql2 !== void 0 ? _query$sql2 : {});\n  }, [query.sql]);\n  const [items, setItems] = useState(groupBysFromQuery);\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n  const baseOptions = useDimensionKeys(datasource, query.region, namespace, metricName);\n  const options = useMemo( // Exclude options we've already selected\n  () => baseOptions.filter(option => !groupBysFromQuery.some(v => v.property.name === option.value)), [baseOptions, groupBysFromQuery]);\n\n  const onChange = newItems => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(v => {\n      var _v$property;\n\n      return {\n        type: QueryEditorExpressionType.GroupBy,\n        property: {\n          type: QueryEditorPropertyType.String,\n          name: (_v$property = v.property) === null || _v$property === void 0 ? void 0 : _v$property.name\n        }\n      };\n    });\n    setItems(cleaned); // Only save complete expressions into the query state;\n\n    const completeExpressions = cleaned.filter(v => {\n      var _v$property2;\n\n      return (_v$property2 = v.property) === null || _v$property2 === void 0 ? void 0 : _v$property2.name;\n    });\n    const groupBy = completeExpressions.length ? {\n      type: QueryEditorExpressionType.And,\n      expressions: completeExpressions\n    } : undefined;\n    onQueryChange(setSql(query, {\n      groupBy\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(EditorList, {\n    items: items,\n    onChange: onChange,\n    renderItem: makeRenderItem(options)\n  });\n};\n\nfunction makeRenderItem(options) {\n  function renderItem(item, onChange, onDelete) {\n    return /*#__PURE__*/_jsx(GroupByItem, {\n      options: options,\n      item: item,\n      onChange: onChange,\n      onDelete: onDelete\n    });\n  }\n\n  return renderItem;\n}\n\nconst GroupByItem = props => {\n  var _item$property;\n\n  const {\n    options,\n    item,\n    onChange,\n    onDelete\n  } = props;\n  const fieldName = (_item$property = item.property) === null || _item$property === void 0 ? void 0 : _item$property.name;\n  return /*#__PURE__*/_jsxs(InputGroup, {\n    children: [/*#__PURE__*/_jsx(Select, {\n      \"aria-label\": `Group by ${fieldName !== null && fieldName !== void 0 ? fieldName : 'filter key'}`,\n      width: \"auto\",\n      value: fieldName ? toOption(fieldName) : null,\n      options: options,\n      allowCustomValue: true,\n      onChange: ({\n        value\n      }) => value && onChange(setGroupByField(value))\n    }), /*#__PURE__*/_jsx(AccessoryButton, {\n      \"aria-label\": \"remove\",\n      icon: \"times\",\n      variant: \"secondary\",\n      onClick: onDelete\n    })]\n  });\n};\n\nexport default SQLGroupBy;","map":{"version":3,"names":["React","useMemo","useState","toOption","AccessoryButton","EditorList","InputGroup","Select","QueryEditorExpressionType","QueryEditorPropertyType","useDimensionKeys","getFlattenedGroupBys","getMetricNameFromExpression","getNamespaceFromExpression","setGroupByField","setSql","SQLGroupBy","query","datasource","onQueryChange","sql","groupBysFromQuery","items","setItems","namespace","from","metricName","select","baseOptions","region","options","filter","option","some","v","property","name","value","onChange","newItems","cleaned","map","type","GroupBy","String","completeExpressions","groupBy","length","And","expressions","undefined","makeRenderItem","renderItem","item","onDelete","GroupByItem","props","fieldName"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLGroupBy.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { QueryEditorExpressionType, QueryEditorGroupByExpression, QueryEditorPropertyType } from '../../expressions';\nimport { useDimensionKeys } from '../../hooks';\nimport { CloudWatchMetricsQuery } from '../../types';\n\nimport {\n  getFlattenedGroupBys,\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  setGroupByField,\n  setSql,\n} from './utils';\n\ninterface SQLGroupByProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst SQLGroupBy: React.FC<SQLGroupByProps> = ({ query, datasource, onQueryChange }) => {\n  const sql = query.sql ?? {};\n  const groupBysFromQuery = useMemo(() => getFlattenedGroupBys(query.sql ?? {}), [query.sql]);\n  const [items, setItems] = useState<QueryEditorGroupByExpression[]>(groupBysFromQuery);\n\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n\n  const baseOptions = useDimensionKeys(datasource, query.region, namespace, metricName);\n  const options = useMemo(\n    // Exclude options we've already selected\n    () => baseOptions.filter((option) => !groupBysFromQuery.some((v) => v.property.name === option.value)),\n    [baseOptions, groupBysFromQuery]\n  );\n\n  const onChange = (newItems: Array<Partial<QueryEditorGroupByExpression>>) => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(\n      (v): QueryEditorGroupByExpression => ({\n        type: QueryEditorExpressionType.GroupBy,\n        property: {\n          type: QueryEditorPropertyType.String,\n          name: v.property?.name,\n        },\n      })\n    );\n\n    setItems(cleaned);\n\n    // Only save complete expressions into the query state;\n    const completeExpressions = cleaned.filter((v) => v.property?.name);\n\n    const groupBy = completeExpressions.length\n      ? {\n          type: QueryEditorExpressionType.And as const,\n          expressions: completeExpressions,\n        }\n      : undefined;\n\n    onQueryChange(setSql(query, { groupBy }));\n  };\n\n  return <EditorList items={items} onChange={onChange} renderItem={makeRenderItem(options)} />;\n};\n\nfunction makeRenderItem(options: Array<SelectableValue<string>>) {\n  function renderItem(\n    item: Partial<QueryEditorGroupByExpression>,\n    onChange: (item: QueryEditorGroupByExpression) => void,\n    onDelete: () => void\n  ) {\n    return <GroupByItem options={options} item={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderItem;\n}\n\ninterface GroupByItemProps {\n  options: Array<SelectableValue<string>>;\n  item: Partial<QueryEditorGroupByExpression>;\n  onChange: (item: QueryEditorGroupByExpression) => void;\n  onDelete: () => void;\n}\n\nconst GroupByItem: React.FC<GroupByItemProps> = (props) => {\n  const { options, item, onChange, onDelete } = props;\n  const fieldName = item.property?.name;\n\n  return (\n    <InputGroup>\n      <Select\n        aria-label={`Group by ${fieldName ?? 'filter key'}`}\n        width=\"auto\"\n        value={fieldName ? toOption(fieldName) : null}\n        options={options}\n        allowCustomValue\n        onChange={({ value }) => value && onChange(setGroupByField(value))}\n      />\n\n      <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n    </InputGroup>\n  );\n};\n\nexport default SQLGroupBy;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}