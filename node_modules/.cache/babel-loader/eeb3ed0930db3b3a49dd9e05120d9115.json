{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport coreModule from 'app/angular/core_module';\nimport config from 'app/core/config';\nexport class NavModelSrv {\n  constructor() {\n    _defineProperty(this, \"navItems\", void 0);\n\n    this.navItems = config.bootData.navTree;\n  }\n\n  getCfgNode() {\n    return this.navItems.find(navItem => navItem.id === 'cfg');\n  }\n\n  getNav(...args) {\n    var _nav$main;\n\n    let children = this.navItems;\n    const nav = {\n      breadcrumbs: []\n    };\n\n    for (const id of args) {\n      // if its a number then it's the index to use for main\n      if (typeof id === 'number') {\n        nav.main = nav.breadcrumbs[id];\n        break;\n      }\n\n      const node = children.find(child => child.id === id);\n\n      if (node) {\n        var _node$children;\n\n        nav.breadcrumbs.push(node);\n        nav.node = node;\n        nav.main = node;\n        children = (_node$children = node.children) !== null && _node$children !== void 0 ? _node$children : [];\n      }\n    }\n\n    if ((_nav$main = nav.main) !== null && _nav$main !== void 0 && _nav$main.children) {\n      for (const item of nav.main.children) {\n        var _nav$node;\n\n        item.active = item.url === ((_nav$node = nav.node) === null || _nav$node === void 0 ? void 0 : _nav$node.url);\n      }\n    }\n\n    return nav;\n  }\n\n  getNotFoundNav() {\n    return getNotFoundNav(); // the exported function\n  }\n\n}\nNavModelSrv.$inject = [];\nexport function getExceptionNav(error) {\n  console.error(error);\n  return getWarningNav('Exception thrown', 'See console for details');\n}\nexport function getNotFoundNav() {\n  return getWarningNav('Page not found', '404 Error');\n}\nexport function getWarningNav(text, subTitle) {\n  const node = {\n    text,\n    subTitle,\n    icon: 'exclamation-triangle'\n  };\n  return {\n    breadcrumbs: [node],\n    node: node,\n    main: node\n  };\n}\ncoreModule.service('navModelSrv', NavModelSrv);","map":{"version":3,"names":["coreModule","config","NavModelSrv","constructor","navItems","bootData","navTree","getCfgNode","find","navItem","id","getNav","args","children","nav","breadcrumbs","main","node","child","push","item","active","url","getNotFoundNav","getExceptionNav","error","console","getWarningNav","text","subTitle","icon","service"],"sources":["/home/soula/grafana/public/app/angular/services/nav_model_srv.ts"],"sourcesContent":["import { NavModel, NavModelItem } from '@grafana/data';\nimport coreModule from 'app/angular/core_module';\nimport config from 'app/core/config';\n\ninterface Nav {\n  breadcrumbs: NavModelItem[];\n  node?: NavModelItem;\n  main?: NavModelItem;\n}\n\nexport class NavModelSrv {\n  navItems: NavModelItem[];\n\n  constructor() {\n    this.navItems = config.bootData.navTree;\n  }\n\n  getCfgNode() {\n    return this.navItems.find((navItem) => navItem.id === 'cfg');\n  }\n\n  getNav(...args: Array<string | number>) {\n    let children = this.navItems;\n    const nav: Nav = {\n      breadcrumbs: [],\n    };\n\n    for (const id of args) {\n      // if its a number then it's the index to use for main\n      if (typeof id === 'number') {\n        nav.main = nav.breadcrumbs[id];\n        break;\n      }\n\n      const node = children.find((child) => child.id === id);\n      if (node) {\n        nav.breadcrumbs.push(node);\n        nav.node = node;\n        nav.main = node;\n        children = node.children ?? [];\n      }\n    }\n\n    if (nav.main?.children) {\n      for (const item of nav.main.children) {\n        item.active = item.url === nav.node?.url;\n      }\n    }\n\n    return nav;\n  }\n\n  getNotFoundNav() {\n    return getNotFoundNav(); // the exported function\n  }\n}\n\nexport function getExceptionNav(error: any): NavModel {\n  console.error(error);\n  return getWarningNav('Exception thrown', 'See console for details');\n}\n\nexport function getNotFoundNav(): NavModel {\n  return getWarningNav('Page not found', '404 Error');\n}\n\nexport function getWarningNav(text: string, subTitle?: string): NavModel {\n  const node = {\n    text,\n    subTitle,\n    icon: 'exclamation-triangle',\n  };\n  return {\n    breadcrumbs: [node],\n    node: node,\n    main: node,\n  };\n}\n\ncoreModule.service('navModelSrv', NavModelSrv);\n"],"mappings":";;AACA,OAAOA,UAAP,MAAuB,yBAAvB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAQA,OAAO,MAAMC,WAAN,CAAkB;EAGvBC,WAAW,GAAG;IAAA;;IACZ,KAAKC,QAAL,GAAgBH,MAAM,CAACI,QAAP,CAAgBC,OAAhC;EACD;;EAEDC,UAAU,GAAG;IACX,OAAO,KAAKH,QAAL,CAAcI,IAAd,CAAoBC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAe,KAA/C,CAAP;EACD;;EAEDC,MAAM,CAAC,GAAGC,IAAJ,EAAkC;IAAA;;IACtC,IAAIC,QAAQ,GAAG,KAAKT,QAApB;IACA,MAAMU,GAAQ,GAAG;MACfC,WAAW,EAAE;IADE,CAAjB;;IAIA,KAAK,MAAML,EAAX,IAAiBE,IAAjB,EAAuB;MACrB;MACA,IAAI,OAAOF,EAAP,KAAc,QAAlB,EAA4B;QAC1BI,GAAG,CAACE,IAAJ,GAAWF,GAAG,CAACC,WAAJ,CAAgBL,EAAhB,CAAX;QACA;MACD;;MAED,MAAMO,IAAI,GAAGJ,QAAQ,CAACL,IAAT,CAAeU,KAAD,IAAWA,KAAK,CAACR,EAAN,KAAaA,EAAtC,CAAb;;MACA,IAAIO,IAAJ,EAAU;QAAA;;QACRH,GAAG,CAACC,WAAJ,CAAgBI,IAAhB,CAAqBF,IAArB;QACAH,GAAG,CAACG,IAAJ,GAAWA,IAAX;QACAH,GAAG,CAACE,IAAJ,GAAWC,IAAX;QACAJ,QAAQ,qBAAGI,IAAI,CAACJ,QAAR,2DAAoB,EAA5B;MACD;IACF;;IAED,iBAAIC,GAAG,CAACE,IAAR,sCAAI,UAAUH,QAAd,EAAwB;MACtB,KAAK,MAAMO,IAAX,IAAmBN,GAAG,CAACE,IAAJ,CAASH,QAA5B,EAAsC;QAAA;;QACpCO,IAAI,CAACC,MAAL,GAAcD,IAAI,CAACE,GAAL,mBAAaR,GAAG,CAACG,IAAjB,8CAAa,UAAUK,GAAvB,CAAd;MACD;IACF;;IAED,OAAOR,GAAP;EACD;;EAEDS,cAAc,GAAG;IACf,OAAOA,cAAc,EAArB,CADe,CACU;EAC1B;;AA5CsB;;AA+CzB,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAA+C;EACpDC,OAAO,CAACD,KAAR,CAAcA,KAAd;EACA,OAAOE,aAAa,CAAC,kBAAD,EAAqB,yBAArB,CAApB;AACD;AAED,OAAO,SAASJ,cAAT,GAAoC;EACzC,OAAOI,aAAa,CAAC,gBAAD,EAAmB,WAAnB,CAApB;AACD;AAED,OAAO,SAASA,aAAT,CAAuBC,IAAvB,EAAqCC,QAArC,EAAkE;EACvE,MAAMZ,IAAI,GAAG;IACXW,IADW;IAEXC,QAFW;IAGXC,IAAI,EAAE;EAHK,CAAb;EAKA,OAAO;IACLf,WAAW,EAAE,CAACE,IAAD,CADR;IAELA,IAAI,EAAEA,IAFD;IAGLD,IAAI,EAAEC;EAHD,CAAP;AAKD;AAEDjB,UAAU,CAAC+B,OAAX,CAAmB,aAAnB,EAAkC7B,WAAlC"},"metadata":{},"sourceType":"module"}