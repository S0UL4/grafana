{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ansicolor from 'ansicolor';\nimport React, { PureComponent } from 'react'; // @ts-ignore\n\nimport Highlighter from 'react-highlight-words';\nimport { findHighlightChunksInText } from '@grafana/data';\nimport { withTheme2 } from '../../themes';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction convertCSSToStyle(theme, css) {\n  return css.split(/;\\s*/).reduce((accumulated, line) => {\n    // The ansicolor package returns this color if the chunk has the ANSI dim\n    // style (`\\e[2m`), but it is nearly unreadable in the dark theme, so we use\n    // GrafanaTheme2 instead to style it in a way that works across all themes.\n    if (line === 'color:rgba(0,0,0,0.5)') {\n      return {\n        color: theme.colors.text.secondary\n      };\n    }\n\n    const match = line.match(/([^:\\s]+)\\s*:\\s*(.+)/);\n\n    if (match && match[1] && match[2]) {\n      const key = match[1].replace(/-([a-z])/g, (_, character) => character.toUpperCase());\n      accumulated[key] = match[2];\n    }\n\n    return accumulated;\n  }, {});\n}\n\nexport class UnThemedLogMessageAnsi extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      chunks: [],\n      prevValue: ''\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.value === state.prevValue) {\n      return null;\n    }\n\n    const parsed = ansicolor.parse(props.value);\n    return {\n      chunks: parsed.spans.map(span => {\n        return span.css ? {\n          style: convertCSSToStyle(props.theme, span.css),\n          text: span.text\n        } : {\n          text: span.text\n        };\n      }),\n      prevValue: props.value\n    };\n  }\n\n  render() {\n    const {\n      chunks\n    } = this.state;\n    return chunks.map((chunk, index) => {\n      var _this$props$highlight;\n\n      const chunkText = (_this$props$highlight = this.props.highlight) !== null && _this$props$highlight !== void 0 && _this$props$highlight.searchWords ? /*#__PURE__*/_jsx(Highlighter, {\n        textToHighlight: chunk.text,\n        searchWords: this.props.highlight.searchWords,\n        findChunks: findHighlightChunksInText,\n        highlightClassName: this.props.highlight.highlightClassName\n      }, index) : chunk.text;\n      return chunk.style ? /*#__PURE__*/_jsx(\"span\", {\n        style: chunk.style,\n        \"data-testid\": \"ansiLogLine\",\n        children: chunkText\n      }, index) : chunkText;\n    });\n  }\n\n}\nexport const LogMessageAnsi = withTheme2(UnThemedLogMessageAnsi);\nLogMessageAnsi.displayName = 'LogMessageAnsi';","map":{"version":3,"names":["ansicolor","React","PureComponent","Highlighter","findHighlightChunksInText","withTheme2","convertCSSToStyle","theme","css","split","reduce","accumulated","line","color","colors","text","secondary","match","key","replace","_","character","toUpperCase","UnThemedLogMessageAnsi","chunks","prevValue","getDerivedStateFromProps","props","state","value","parsed","parse","spans","map","span","style","render","chunk","index","chunkText","highlight","searchWords","highlightClassName","LogMessageAnsi","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Logs/LogMessageAnsi.tsx"],"sourcesContent":["import ansicolor from 'ansicolor';\nimport React, { PureComponent } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\n\nimport { findHighlightChunksInText, GrafanaTheme2 } from '@grafana/data';\n\nimport { withTheme2 } from '../../themes';\nimport { Themeable2 } from '../../types';\n\ninterface Style {\n  [key: string]: string;\n}\n\ninterface ParsedChunk {\n  style: Style;\n  text: string;\n}\n\nfunction convertCSSToStyle(theme: GrafanaTheme2, css: string): Style {\n  return css.split(/;\\s*/).reduce<Style>((accumulated, line) => {\n    // The ansicolor package returns this color if the chunk has the ANSI dim\n    // style (`\\e[2m`), but it is nearly unreadable in the dark theme, so we use\n    // GrafanaTheme2 instead to style it in a way that works across all themes.\n    if (line === 'color:rgba(0,0,0,0.5)') {\n      return { color: theme.colors.text.secondary };\n    }\n\n    const match = line.match(/([^:\\s]+)\\s*:\\s*(.+)/);\n\n    if (match && match[1] && match[2]) {\n      const key = match[1].replace(/-([a-z])/g, (_, character) => character.toUpperCase());\n      accumulated[key] = match[2];\n    }\n\n    return accumulated;\n  }, {});\n}\n\ninterface Props extends Themeable2 {\n  value: string;\n  highlight?: {\n    searchWords: string[];\n    highlightClassName: string;\n  };\n}\n\ninterface State {\n  chunks: ParsedChunk[];\n  prevValue: string;\n}\n\nexport class UnThemedLogMessageAnsi extends PureComponent<Props, State> {\n  state: State = {\n    chunks: [],\n    prevValue: '',\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (props.value === state.prevValue) {\n      return null;\n    }\n\n    const parsed = ansicolor.parse(props.value);\n\n    return {\n      chunks: parsed.spans.map((span) => {\n        return span.css\n          ? {\n              style: convertCSSToStyle(props.theme, span.css),\n              text: span.text,\n            }\n          : { text: span.text };\n      }),\n      prevValue: props.value,\n    };\n  }\n\n  render() {\n    const { chunks } = this.state;\n\n    return chunks.map((chunk, index) => {\n      const chunkText = this.props.highlight?.searchWords ? (\n        <Highlighter\n          key={index}\n          textToHighlight={chunk.text}\n          searchWords={this.props.highlight.searchWords}\n          findChunks={findHighlightChunksInText}\n          highlightClassName={this.props.highlight.highlightClassName}\n        />\n      ) : (\n        chunk.text\n      );\n      return chunk.style ? (\n        <span key={index} style={chunk.style} data-testid=\"ansiLogLine\">\n          {chunkText}\n        </span>\n      ) : (\n        chunkText\n      );\n    });\n  }\n}\n\nexport const LogMessageAnsi = withTheme2(UnThemedLogMessageAnsi);\nLogMessageAnsi.displayName = 'LogMessageAnsi';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}