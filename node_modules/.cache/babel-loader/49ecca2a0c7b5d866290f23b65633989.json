{"ast":null,"code":"const _excluded = [\"mode\", \"sortOrder\", \"sync\", \"timeZone\", \"config\", \"renderTooltip\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { useMountedState } from 'react-use';\nimport { arrayUtils, DashboardCursorSync, FALLBACK_COLOR, FieldType, formattedValueToString, getDisplayProcessor, getFieldDisplayName } from '@grafana/data';\nimport { TooltipDisplayMode, SortOrder } from '@grafana/schema';\nimport { useTheme2 } from '../../../themes/ThemeContext';\nimport { Portal } from '../../Portal/Portal';\nimport { SeriesTable, VizTooltipContainer } from '../../VizTooltip';\nimport { findMidPointYPosition, pluginLog } from '../utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst TOOLTIP_OFFSET = 10;\n/**\n * @alpha\n */\n\nexport const TooltipPlugin = _ref => {\n  let {\n    mode = TooltipDisplayMode.Single,\n    sortOrder = SortOrder.None,\n    sync,\n    timeZone,\n    config,\n    renderTooltip\n  } = _ref,\n      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const plotInstance = useRef();\n  const theme = useTheme2();\n  const [focusedSeriesIdx, setFocusedSeriesIdx] = useState(null);\n  const [focusedPointIdx, setFocusedPointIdx] = useState(null);\n  const [focusedPointIdxs, setFocusedPointIdxs] = useState([]);\n  const [coords, setCoords] = useState(null);\n  const [isActive, setIsActive] = useState(false);\n  const isMounted = useMountedState();\n  const pluginId = `TooltipPlugin`; // Debug logs\n\n  useEffect(() => {\n    pluginLog(pluginId, true, `Focused series: ${focusedSeriesIdx}, focused point: ${focusedPointIdx}`);\n  }, [focusedPointIdx, focusedSeriesIdx]); // Add uPlot hooks to the config, or re-add when the config changed\n\n  useLayoutEffect(() => {\n    let bbox = undefined;\n\n    const plotEnter = () => {\n      var _plotInstance$current;\n\n      if (!isMounted()) {\n        return;\n      }\n\n      setIsActive(true);\n      (_plotInstance$current = plotInstance.current) === null || _plotInstance$current === void 0 ? void 0 : _plotInstance$current.root.classList.add('plot-active');\n    };\n\n    const plotLeave = () => {\n      var _plotInstance$current2;\n\n      if (!isMounted()) {\n        return;\n      }\n\n      setCoords(null);\n      setIsActive(false);\n      (_plotInstance$current2 = plotInstance.current) === null || _plotInstance$current2 === void 0 ? void 0 : _plotInstance$current2.root.classList.remove('plot-active');\n    }; // cache uPlot plotting area bounding box\n\n\n    config.addHook('syncRect', (u, rect) => bbox = rect);\n    config.addHook('init', u => {\n      var _u$root$parentElement, _u$root$parentElement2;\n\n      plotInstance.current = u;\n      (_u$root$parentElement = u.root.parentElement) === null || _u$root$parentElement === void 0 ? void 0 : _u$root$parentElement.addEventListener('focus', plotEnter);\n      u.over.addEventListener('mouseenter', plotEnter);\n      (_u$root$parentElement2 = u.root.parentElement) === null || _u$root$parentElement2 === void 0 ? void 0 : _u$root$parentElement2.addEventListener('blur', plotLeave);\n      u.over.addEventListener('mouseleave', plotLeave);\n\n      if (sync && sync() === DashboardCursorSync.Crosshair) {\n        u.root.classList.add('shared-crosshair');\n      }\n    });\n    const tooltipInterpolator = config.getTooltipInterpolator();\n\n    if (tooltipInterpolator) {\n      // Custom toolitp positioning\n      config.addHook('setCursor', u => {\n        tooltipInterpolator(setFocusedSeriesIdx, setFocusedPointIdx, clear => {\n          if (clear) {\n            setCoords(null);\n            return;\n          }\n\n          if (!bbox) {\n            return;\n          }\n\n          const {\n            x,\n            y\n          } = positionTooltip(u, bbox);\n\n          if (x !== undefined && y !== undefined) {\n            setCoords({\n              x,\n              y\n            });\n          }\n        }, u);\n      });\n    } else {\n      config.addHook('setLegend', u => {\n        if (!isMounted()) {\n          return;\n        }\n\n        setFocusedPointIdx(u.legend.idx);\n        setFocusedPointIdxs(u.legend.idxs.slice());\n      }); // default series/datapoint idx retireval\n\n      config.addHook('setCursor', u => {\n        if (!bbox || !isMounted()) {\n          return;\n        }\n\n        const {\n          x,\n          y\n        } = positionTooltip(u, bbox);\n\n        if (x !== undefined && y !== undefined) {\n          setCoords({\n            x,\n            y\n          });\n        } else {\n          setCoords(null);\n        }\n      });\n      config.addHook('setSeries', (_, idx) => {\n        if (!isMounted()) {\n          return;\n        }\n\n        setFocusedSeriesIdx(idx);\n      });\n    }\n\n    return () => {\n      setCoords(null);\n\n      if (plotInstance.current) {\n        var _plotInstance$current3, _plotInstance$current4;\n\n        plotInstance.current.over.removeEventListener('mouseleave', plotLeave);\n        plotInstance.current.over.removeEventListener('mouseenter', plotEnter);\n        (_plotInstance$current3 = plotInstance.current.root.parentElement) === null || _plotInstance$current3 === void 0 ? void 0 : _plotInstance$current3.removeEventListener('focus', plotEnter);\n        (_plotInstance$current4 = plotInstance.current.root.parentElement) === null || _plotInstance$current4 === void 0 ? void 0 : _plotInstance$current4.removeEventListener('blur', plotLeave);\n      }\n    };\n  }, [config, setCoords, setIsActive, setFocusedPointIdx, setFocusedPointIdxs]);\n\n  if (focusedPointIdx === null || !isActive && sync && sync() === DashboardCursorSync.Crosshair) {\n    return null;\n  } // GraphNG expects aligned data, let's take field 0 as x field. FTW\n\n\n  let xField = otherProps.data.fields[0];\n\n  if (!xField) {\n    return null;\n  }\n\n  const xFieldFmt = xField.display || getDisplayProcessor({\n    field: xField,\n    timeZone,\n    theme\n  });\n  let tooltip = null;\n  let xVal = xFieldFmt(xField.values.get(focusedPointIdx)).text;\n\n  if (!renderTooltip) {\n    // when interacting with a point in single mode\n    if (mode === TooltipDisplayMode.Single && focusedSeriesIdx !== null) {\n      var _focusedPointIdxs$foc;\n\n      const field = otherProps.data.fields[focusedSeriesIdx];\n\n      if (!field) {\n        return null;\n      }\n\n      const dataIdx = (_focusedPointIdxs$foc = focusedPointIdxs === null || focusedPointIdxs === void 0 ? void 0 : focusedPointIdxs[focusedSeriesIdx]) !== null && _focusedPointIdxs$foc !== void 0 ? _focusedPointIdxs$foc : focusedPointIdx;\n      xVal = xFieldFmt(xField.values.get(dataIdx)).text;\n      const fieldFmt = field.display || getDisplayProcessor({\n        field,\n        timeZone,\n        theme\n      });\n      const display = fieldFmt(field.values.get(dataIdx));\n      tooltip = /*#__PURE__*/_jsx(SeriesTable, {\n        series: [{\n          color: display.color || FALLBACK_COLOR,\n          label: getFieldDisplayName(field, otherProps.data),\n          value: display ? formattedValueToString(display) : null\n        }],\n        timestamp: xVal\n      });\n    }\n\n    if (mode === TooltipDisplayMode.Multi) {\n      let series = [];\n      const frame = otherProps.data;\n      const fields = frame.fields;\n      const sortIdx = [];\n\n      for (let i = 0; i < fields.length; i++) {\n        var _field$config$custom, _field$config$custom$, _field$config$custom2, _field$config$custom3;\n\n        const field = frame.fields[i];\n\n        if (!field || field === xField || field.type === FieldType.time || field.type !== FieldType.number || (_field$config$custom = field.config.custom) !== null && _field$config$custom !== void 0 && (_field$config$custom$ = _field$config$custom.hideFrom) !== null && _field$config$custom$ !== void 0 && _field$config$custom$.tooltip || (_field$config$custom2 = field.config.custom) !== null && _field$config$custom2 !== void 0 && (_field$config$custom3 = _field$config$custom2.hideFrom) !== null && _field$config$custom3 !== void 0 && _field$config$custom3.viz) {\n          continue;\n        }\n\n        const v = otherProps.data.fields[i].values.get(focusedPointIdxs[i]);\n        const display = field.display(v);\n        sortIdx.push(v);\n        series.push({\n          color: display.color || FALLBACK_COLOR,\n          label: getFieldDisplayName(field, frame),\n          value: display ? formattedValueToString(display) : null,\n          isActive: focusedSeriesIdx === i\n        });\n      }\n\n      if (sortOrder !== SortOrder.None) {\n        // create sort reference series array, as Array.sort() mutates the original array\n        const sortRef = [...series];\n        const sortFn = arrayUtils.sortValues(sortOrder);\n        series.sort((a, b) => {\n          // get compared values indices to retrieve raw values from sortIdx\n          const aIdx = sortRef.indexOf(a);\n          const bIdx = sortRef.indexOf(b);\n          return sortFn(sortIdx[aIdx], sortIdx[bIdx]);\n        });\n      }\n\n      tooltip = /*#__PURE__*/_jsx(SeriesTable, {\n        series: series,\n        timestamp: xVal\n      });\n    }\n  } else {\n    tooltip = renderTooltip(otherProps.data, focusedSeriesIdx, focusedPointIdx);\n  }\n\n  return /*#__PURE__*/_jsx(Portal, {\n    children: tooltip && coords && /*#__PURE__*/_jsx(VizTooltipContainer, {\n      position: {\n        x: coords.x,\n        y: coords.y\n      },\n      offset: {\n        x: TOOLTIP_OFFSET,\n        y: TOOLTIP_OFFSET\n      },\n      children: tooltip\n    })\n  });\n};\n\nfunction isCursorOutsideCanvas({\n  left,\n  top\n}, canvas) {\n  if (left === undefined || top === undefined) {\n    return false;\n  }\n\n  return left < 0 || left > canvas.width || top < 0 || top > canvas.height;\n}\n/**\n * Given uPlot cursor position, figure out position of the tooltip withing the canvas bbox\n * Tooltip is positioned relatively to a viewport\n * @internal\n **/\n\n\nexport function positionTooltip(u, bbox) {\n  let x, y;\n  const cL = u.cursor.left || 0;\n  const cT = u.cursor.top || 0;\n\n  if (isCursorOutsideCanvas(u.cursor, bbox)) {\n    const idx = u.posToIdx(cL); // when cursor outside of uPlot's canvas\n\n    if (cT < 0 || cT > bbox.height) {\n      let pos = findMidPointYPosition(u, idx);\n\n      if (pos) {\n        y = bbox.top + pos;\n\n        if (cL >= 0 && cL <= bbox.width) {\n          // find x-scale position for a current cursor left position\n          x = bbox.left + u.valToPos(u.data[0][u.posToIdx(cL)], u.series[0].scale);\n        }\n      }\n    }\n  } else {\n    x = bbox.left + cL;\n    y = bbox.top + cT;\n  }\n\n  return {\n    x,\n    y\n  };\n}","map":{"version":3,"names":["React","useEffect","useLayoutEffect","useRef","useState","useMountedState","arrayUtils","DashboardCursorSync","FALLBACK_COLOR","FieldType","formattedValueToString","getDisplayProcessor","getFieldDisplayName","TooltipDisplayMode","SortOrder","useTheme2","Portal","SeriesTable","VizTooltipContainer","findMidPointYPosition","pluginLog","TOOLTIP_OFFSET","TooltipPlugin","mode","Single","sortOrder","None","sync","timeZone","config","renderTooltip","otherProps","plotInstance","theme","focusedSeriesIdx","setFocusedSeriesIdx","focusedPointIdx","setFocusedPointIdx","focusedPointIdxs","setFocusedPointIdxs","coords","setCoords","isActive","setIsActive","isMounted","pluginId","bbox","undefined","plotEnter","current","root","classList","add","plotLeave","remove","addHook","u","rect","parentElement","addEventListener","over","Crosshair","tooltipInterpolator","getTooltipInterpolator","clear","x","y","positionTooltip","legend","idx","idxs","slice","_","removeEventListener","xField","data","fields","xFieldFmt","display","field","tooltip","xVal","values","get","text","dataIdx","fieldFmt","color","label","value","Multi","series","frame","sortIdx","i","length","type","time","number","custom","hideFrom","viz","v","push","sortRef","sortFn","sortValues","sort","a","b","aIdx","indexOf","bIdx","isCursorOutsideCanvas","left","top","canvas","width","height","cL","cursor","cT","posToIdx","pos","valToPos","scale"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/uPlot/plugins/TooltipPlugin.tsx"],"sourcesContent":["import React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { useMountedState } from 'react-use';\nimport uPlot from 'uplot';\n\nimport {\n  arrayUtils,\n  CartesianCoords2D,\n  DashboardCursorSync,\n  DataFrame,\n  FALLBACK_COLOR,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  getFieldDisplayName,\n  TimeZone,\n} from '@grafana/data';\nimport { TooltipDisplayMode, SortOrder } from '@grafana/schema';\n\nimport { useTheme2 } from '../../../themes/ThemeContext';\nimport { Portal } from '../../Portal/Portal';\nimport { SeriesTable, SeriesTableRowProps, VizTooltipContainer } from '../../VizTooltip';\nimport { UPlotConfigBuilder } from '../config/UPlotConfigBuilder';\nimport { findMidPointYPosition, pluginLog } from '../utils';\n\ninterface TooltipPluginProps {\n  timeZone: TimeZone;\n  data: DataFrame;\n  config: UPlotConfigBuilder;\n  mode?: TooltipDisplayMode;\n  sortOrder?: SortOrder;\n  sync?: () => DashboardCursorSync;\n  // Allows custom tooltip content rendering. Exposes aligned data frame with relevant indexes for data inspection\n  // Use field.state.origin indexes from alignedData frame field to get access to original data frame and field index.\n  renderTooltip?: (alignedFrame: DataFrame, seriesIdx: number | null, datapointIdx: number | null) => React.ReactNode;\n}\n\nconst TOOLTIP_OFFSET = 10;\n\n/**\n * @alpha\n */\nexport const TooltipPlugin: React.FC<TooltipPluginProps> = ({\n  mode = TooltipDisplayMode.Single,\n  sortOrder = SortOrder.None,\n  sync,\n  timeZone,\n  config,\n  renderTooltip,\n  ...otherProps\n}) => {\n  const plotInstance = useRef<uPlot>();\n  const theme = useTheme2();\n  const [focusedSeriesIdx, setFocusedSeriesIdx] = useState<number | null>(null);\n  const [focusedPointIdx, setFocusedPointIdx] = useState<number | null>(null);\n  const [focusedPointIdxs, setFocusedPointIdxs] = useState<Array<number | null>>([]);\n  const [coords, setCoords] = useState<CartesianCoords2D | null>(null);\n  const [isActive, setIsActive] = useState<boolean>(false);\n  const isMounted = useMountedState();\n\n  const pluginId = `TooltipPlugin`;\n\n  // Debug logs\n  useEffect(() => {\n    pluginLog(pluginId, true, `Focused series: ${focusedSeriesIdx}, focused point: ${focusedPointIdx}`);\n  }, [focusedPointIdx, focusedSeriesIdx]);\n\n  // Add uPlot hooks to the config, or re-add when the config changed\n  useLayoutEffect(() => {\n    let bbox: DOMRect | undefined = undefined;\n\n    const plotEnter = () => {\n      if (!isMounted()) {\n        return;\n      }\n      setIsActive(true);\n      plotInstance.current?.root.classList.add('plot-active');\n    };\n\n    const plotLeave = () => {\n      if (!isMounted()) {\n        return;\n      }\n      setCoords(null);\n      setIsActive(false);\n      plotInstance.current?.root.classList.remove('plot-active');\n    };\n\n    // cache uPlot plotting area bounding box\n    config.addHook('syncRect', (u, rect) => (bbox = rect));\n\n    config.addHook('init', (u) => {\n      plotInstance.current = u;\n\n      u.root.parentElement?.addEventListener('focus', plotEnter);\n      u.over.addEventListener('mouseenter', plotEnter);\n\n      u.root.parentElement?.addEventListener('blur', plotLeave);\n      u.over.addEventListener('mouseleave', plotLeave);\n\n      if (sync && sync() === DashboardCursorSync.Crosshair) {\n        u.root.classList.add('shared-crosshair');\n      }\n    });\n\n    const tooltipInterpolator = config.getTooltipInterpolator();\n\n    if (tooltipInterpolator) {\n      // Custom toolitp positioning\n      config.addHook('setCursor', (u) => {\n        tooltipInterpolator(\n          setFocusedSeriesIdx,\n          setFocusedPointIdx,\n          (clear) => {\n            if (clear) {\n              setCoords(null);\n              return;\n            }\n\n            if (!bbox) {\n              return;\n            }\n\n            const { x, y } = positionTooltip(u, bbox);\n            if (x !== undefined && y !== undefined) {\n              setCoords({ x, y });\n            }\n          },\n          u\n        );\n      });\n    } else {\n      config.addHook('setLegend', (u) => {\n        if (!isMounted()) {\n          return;\n        }\n        setFocusedPointIdx(u.legend.idx!);\n        setFocusedPointIdxs(u.legend.idxs!.slice());\n      });\n\n      // default series/datapoint idx retireval\n      config.addHook('setCursor', (u) => {\n        if (!bbox || !isMounted()) {\n          return;\n        }\n\n        const { x, y } = positionTooltip(u, bbox);\n        if (x !== undefined && y !== undefined) {\n          setCoords({ x, y });\n        } else {\n          setCoords(null);\n        }\n      });\n\n      config.addHook('setSeries', (_, idx) => {\n        if (!isMounted()) {\n          return;\n        }\n        setFocusedSeriesIdx(idx);\n      });\n    }\n\n    return () => {\n      setCoords(null);\n      if (plotInstance.current) {\n        plotInstance.current.over.removeEventListener('mouseleave', plotLeave);\n        plotInstance.current.over.removeEventListener('mouseenter', plotEnter);\n        plotInstance.current.root.parentElement?.removeEventListener('focus', plotEnter);\n        plotInstance.current.root.parentElement?.removeEventListener('blur', plotLeave);\n      }\n    };\n  }, [config, setCoords, setIsActive, setFocusedPointIdx, setFocusedPointIdxs]);\n\n  if (focusedPointIdx === null || (!isActive && sync && sync() === DashboardCursorSync.Crosshair)) {\n    return null;\n  }\n\n  // GraphNG expects aligned data, let's take field 0 as x field. FTW\n  let xField = otherProps.data.fields[0];\n  if (!xField) {\n    return null;\n  }\n  const xFieldFmt = xField.display || getDisplayProcessor({ field: xField, timeZone, theme });\n  let tooltip: React.ReactNode = null;\n\n  let xVal = xFieldFmt(xField!.values.get(focusedPointIdx)).text;\n\n  if (!renderTooltip) {\n    // when interacting with a point in single mode\n    if (mode === TooltipDisplayMode.Single && focusedSeriesIdx !== null) {\n      const field = otherProps.data.fields[focusedSeriesIdx];\n\n      if (!field) {\n        return null;\n      }\n\n      const dataIdx = focusedPointIdxs?.[focusedSeriesIdx] ?? focusedPointIdx;\n      xVal = xFieldFmt(xField!.values.get(dataIdx)).text;\n      const fieldFmt = field.display || getDisplayProcessor({ field, timeZone, theme });\n      const display = fieldFmt(field.values.get(dataIdx));\n\n      tooltip = (\n        <SeriesTable\n          series={[\n            {\n              color: display.color || FALLBACK_COLOR,\n              label: getFieldDisplayName(field, otherProps.data),\n              value: display ? formattedValueToString(display) : null,\n            },\n          ]}\n          timestamp={xVal}\n        />\n      );\n    }\n\n    if (mode === TooltipDisplayMode.Multi) {\n      let series: SeriesTableRowProps[] = [];\n      const frame = otherProps.data;\n      const fields = frame.fields;\n      const sortIdx: any[] = [];\n\n      for (let i = 0; i < fields.length; i++) {\n        const field = frame.fields[i];\n        if (\n          !field ||\n          field === xField ||\n          field.type === FieldType.time ||\n          field.type !== FieldType.number ||\n          field.config.custom?.hideFrom?.tooltip ||\n          field.config.custom?.hideFrom?.viz\n        ) {\n          continue;\n        }\n\n        const v = otherProps.data.fields[i].values.get(focusedPointIdxs[i]!);\n        const display = field.display!(v);\n\n        sortIdx.push(v);\n        series.push({\n          color: display.color || FALLBACK_COLOR,\n          label: getFieldDisplayName(field, frame),\n          value: display ? formattedValueToString(display) : null,\n          isActive: focusedSeriesIdx === i,\n        });\n      }\n\n      if (sortOrder !== SortOrder.None) {\n        // create sort reference series array, as Array.sort() mutates the original array\n        const sortRef = [...series];\n        const sortFn = arrayUtils.sortValues(sortOrder);\n\n        series.sort((a, b) => {\n          // get compared values indices to retrieve raw values from sortIdx\n          const aIdx = sortRef.indexOf(a);\n          const bIdx = sortRef.indexOf(b);\n          return sortFn(sortIdx[aIdx], sortIdx[bIdx]);\n        });\n      }\n\n      tooltip = <SeriesTable series={series} timestamp={xVal} />;\n    }\n  } else {\n    tooltip = renderTooltip(otherProps.data, focusedSeriesIdx, focusedPointIdx);\n  }\n\n  return (\n    <Portal>\n      {tooltip && coords && (\n        <VizTooltipContainer position={{ x: coords.x, y: coords.y }} offset={{ x: TOOLTIP_OFFSET, y: TOOLTIP_OFFSET }}>\n          {tooltip}\n        </VizTooltipContainer>\n      )}\n    </Portal>\n  );\n};\n\nfunction isCursorOutsideCanvas({ left, top }: uPlot.Cursor, canvas: DOMRect) {\n  if (left === undefined || top === undefined) {\n    return false;\n  }\n  return left < 0 || left > canvas.width || top < 0 || top > canvas.height;\n}\n\n/**\n * Given uPlot cursor position, figure out position of the tooltip withing the canvas bbox\n * Tooltip is positioned relatively to a viewport\n * @internal\n **/\nexport function positionTooltip(u: uPlot, bbox: DOMRect) {\n  let x, y;\n  const cL = u.cursor.left || 0;\n  const cT = u.cursor.top || 0;\n\n  if (isCursorOutsideCanvas(u.cursor, bbox)) {\n    const idx = u.posToIdx(cL);\n    // when cursor outside of uPlot's canvas\n    if (cT < 0 || cT > bbox.height) {\n      let pos = findMidPointYPosition(u, idx);\n\n      if (pos) {\n        y = bbox.top + pos;\n        if (cL >= 0 && cL <= bbox.width) {\n          // find x-scale position for a current cursor left position\n          x = bbox.left + u.valToPos(u.data[0][u.posToIdx(cL)], u.series[0].scale!);\n        }\n      }\n    }\n  } else {\n    x = bbox.left + cL;\n    y = bbox.top + cT;\n  }\n\n  return { x, y };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}