{"ast":null,"code":"import { createTheme } from '@grafana/data';\nimport { ThemeChangedEvent } from '@grafana/runtime';\nimport appEvents from '../app_events';\nimport { config } from '../config';\nimport { contextSrv } from '../core';\nimport { PreferencesService } from './PreferencesService';\nexport async function toggleTheme(runtimeOnly) {\n  const currentTheme = config.theme;\n  const newTheme = createTheme({\n    colors: {\n      mode: currentTheme.isDark ? 'light' : 'dark'\n    }\n  });\n  appEvents.publish(new ThemeChangedEvent(newTheme));\n\n  if (runtimeOnly) {\n    return;\n  } // Add css file for new theme\n\n\n  const newCssLink = document.createElement('link');\n  newCssLink.rel = 'stylesheet';\n  newCssLink.href = config.bootData.themePaths[newTheme.colors.mode];\n  document.body.appendChild(newCssLink); // Remove old css file\n\n  const bodyLinks = document.getElementsByTagName('link');\n\n  for (let i = 0; i < bodyLinks.length; i++) {\n    const link = bodyLinks[i];\n\n    if (link.href && link.href.indexOf(`build/grafana.${currentTheme.type}`) > 0) {\n      // Remove existing link after a 500ms to allow new css to load to avoid flickering\n      // If we add new css at the same time we remove current one the page will be rendered without css\n      // As the new css file is loading\n      setTimeout(() => link.remove(), 500);\n    }\n  }\n\n  if (!contextSrv.isSignedIn) {\n    return;\n  } // Persist new theme\n\n\n  const service = new PreferencesService('user');\n  const currentPref = await service.load();\n  await service.update(Object.assign({}, currentPref, {\n    theme: newTheme.colors.mode\n  }));\n}","map":{"version":3,"names":["createTheme","ThemeChangedEvent","appEvents","config","contextSrv","PreferencesService","toggleTheme","runtimeOnly","currentTheme","theme","newTheme","colors","mode","isDark","publish","newCssLink","document","createElement","rel","href","bootData","themePaths","body","appendChild","bodyLinks","getElementsByTagName","i","length","link","indexOf","type","setTimeout","remove","isSignedIn","service","currentPref","load","update"],"sources":["/home/soula/grafana/public/app/core/services/toggleTheme.ts"],"sourcesContent":["import { createTheme } from '@grafana/data';\nimport { ThemeChangedEvent } from '@grafana/runtime';\n\nimport appEvents from '../app_events';\nimport { config } from '../config';\nimport { contextSrv } from '../core';\n\nimport { PreferencesService } from './PreferencesService';\n\nexport async function toggleTheme(runtimeOnly: boolean) {\n  const currentTheme = config.theme;\n  const newTheme = createTheme({\n    colors: {\n      mode: currentTheme.isDark ? 'light' : 'dark',\n    },\n  });\n\n  appEvents.publish(new ThemeChangedEvent(newTheme));\n\n  if (runtimeOnly) {\n    return;\n  }\n\n  // Add css file for new theme\n  const newCssLink = document.createElement('link');\n  newCssLink.rel = 'stylesheet';\n  newCssLink.href = config.bootData.themePaths[newTheme.colors.mode];\n  document.body.appendChild(newCssLink);\n\n  // Remove old css file\n  const bodyLinks = document.getElementsByTagName('link');\n  for (let i = 0; i < bodyLinks.length; i++) {\n    const link = bodyLinks[i];\n\n    if (link.href && link.href.indexOf(`build/grafana.${currentTheme.type}`) > 0) {\n      // Remove existing link after a 500ms to allow new css to load to avoid flickering\n      // If we add new css at the same time we remove current one the page will be rendered without css\n      // As the new css file is loading\n      setTimeout(() => link.remove(), 500);\n    }\n  }\n\n  if (!contextSrv.isSignedIn) {\n    return;\n  }\n\n  // Persist new theme\n  const service = new PreferencesService('user');\n  const currentPref = await service.load();\n\n  await service.update({\n    ...currentPref,\n    theme: newTheme.colors.mode,\n  });\n}\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AAEA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,UAAT,QAA2B,SAA3B;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,OAAO,eAAeC,WAAf,CAA2BC,WAA3B,EAAiD;EACtD,MAAMC,YAAY,GAAGL,MAAM,CAACM,KAA5B;EACA,MAAMC,QAAQ,GAAGV,WAAW,CAAC;IAC3BW,MAAM,EAAE;MACNC,IAAI,EAAEJ,YAAY,CAACK,MAAb,GAAsB,OAAtB,GAAgC;IADhC;EADmB,CAAD,CAA5B;EAMAX,SAAS,CAACY,OAAV,CAAkB,IAAIb,iBAAJ,CAAsBS,QAAtB,CAAlB;;EAEA,IAAIH,WAAJ,EAAiB;IACf;EACD,CAZqD,CActD;;;EACA,MAAMQ,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAnB;EACAF,UAAU,CAACG,GAAX,GAAiB,YAAjB;EACAH,UAAU,CAACI,IAAX,GAAkBhB,MAAM,CAACiB,QAAP,CAAgBC,UAAhB,CAA2BX,QAAQ,CAACC,MAAT,CAAgBC,IAA3C,CAAlB;EACAI,QAAQ,CAACM,IAAT,CAAcC,WAAd,CAA0BR,UAA1B,EAlBsD,CAoBtD;;EACA,MAAMS,SAAS,GAAGR,QAAQ,CAACS,oBAAT,CAA8B,MAA9B,CAAlB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;IACzC,MAAME,IAAI,GAAGJ,SAAS,CAACE,CAAD,CAAtB;;IAEA,IAAIE,IAAI,CAACT,IAAL,IAAaS,IAAI,CAACT,IAAL,CAAUU,OAAV,CAAmB,iBAAgBrB,YAAY,CAACsB,IAAK,EAArD,IAA0D,CAA3E,EAA8E;MAC5E;MACA;MACA;MACAC,UAAU,CAAC,MAAMH,IAAI,CAACI,MAAL,EAAP,EAAsB,GAAtB,CAAV;IACD;EACF;;EAED,IAAI,CAAC5B,UAAU,CAAC6B,UAAhB,EAA4B;IAC1B;EACD,CAnCqD,CAqCtD;;;EACA,MAAMC,OAAO,GAAG,IAAI7B,kBAAJ,CAAuB,MAAvB,CAAhB;EACA,MAAM8B,WAAW,GAAG,MAAMD,OAAO,CAACE,IAAR,EAA1B;EAEA,MAAMF,OAAO,CAACG,MAAR,mBACDF,WADC;IAEJ1B,KAAK,EAAEC,QAAQ,CAACC,MAAT,CAAgBC;EAFnB,GAAN;AAID"},"metadata":{},"sourceType":"module"}