{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { vectorToArray } from './vectorToArray';\n\n/**\n * This may be more trouble than it is worth.  This trades some computation time for\n * RAM -- rather than allocate a new array the size of all previous arrays, this just\n * points the correct index to their original array values\n */\nexport class AppendedVectors {\n  constructor(startAt = 0) {\n    _defineProperty(this, \"length\", 0);\n\n    _defineProperty(this, \"source\", []);\n\n    this.length = startAt;\n  }\n  /**\n   * Make the vector look like it is this long\n   */\n\n\n  setLength(length) {\n    if (length > this.length) {\n      // make the vector longer (filling with undefined)\n      this.length = length;\n    } else if (length < this.length) {\n      // make the array shorter\n      const sources = [];\n\n      for (const src of this.source) {\n        sources.push(src);\n\n        if (src.end > length) {\n          src.end = length;\n          break;\n        }\n      }\n\n      this.source = sources;\n      this.length = length;\n    }\n  }\n\n  append(v) {\n    const info = {\n      start: this.length,\n      end: this.length + v.length,\n      values: v\n    };\n    this.length = info.end;\n    this.source.push(info);\n    return info;\n  }\n\n  get(index) {\n    for (let i = 0; i < this.source.length; i++) {\n      const src = this.source[i];\n\n      if (index >= src.start && index < src.end) {\n        return src.values.get(index - src.start);\n      }\n    }\n\n    return undefined;\n  }\n\n  toArray() {\n    return vectorToArray(this);\n  }\n\n  toJSON() {\n    return vectorToArray(this);\n  }\n\n}","map":{"version":3,"names":["vectorToArray","AppendedVectors","constructor","startAt","length","setLength","sources","src","source","push","end","append","v","info","start","values","get","index","i","undefined","toArray","toJSON"],"sources":["/home/soula/grafana/packages/grafana-data/src/vector/AppendedVectors.ts"],"sourcesContent":["import { Vector } from '../types/vector';\n\nimport { vectorToArray } from './vectorToArray';\n\ninterface AppendedVectorInfo<T> {\n  start: number;\n  end: number;\n  values: Vector<T>;\n}\n\n/**\n * This may be more trouble than it is worth.  This trades some computation time for\n * RAM -- rather than allocate a new array the size of all previous arrays, this just\n * points the correct index to their original array values\n */\nexport class AppendedVectors<T = any> implements Vector<T> {\n  length = 0;\n  source: Array<AppendedVectorInfo<T>> = [];\n\n  constructor(startAt = 0) {\n    this.length = startAt;\n  }\n\n  /**\n   * Make the vector look like it is this long\n   */\n  setLength(length: number) {\n    if (length > this.length) {\n      // make the vector longer (filling with undefined)\n      this.length = length;\n    } else if (length < this.length) {\n      // make the array shorter\n      const sources: Array<AppendedVectorInfo<T>> = [];\n      for (const src of this.source) {\n        sources.push(src);\n        if (src.end > length) {\n          src.end = length;\n          break;\n        }\n      }\n      this.source = sources;\n      this.length = length;\n    }\n  }\n\n  append(v: Vector<T>): AppendedVectorInfo<T> {\n    const info = {\n      start: this.length,\n      end: this.length + v.length,\n      values: v,\n    };\n    this.length = info.end;\n    this.source.push(info);\n    return info;\n  }\n\n  get(index: number): T {\n    for (let i = 0; i < this.source.length; i++) {\n      const src = this.source[i];\n      if (index >= src.start && index < src.end) {\n        return src.values.get(index - src.start);\n      }\n    }\n    return undefined as unknown as T;\n  }\n\n  toArray(): T[] {\n    return vectorToArray(this);\n  }\n\n  toJSON(): T[] {\n    return vectorToArray(this);\n  }\n}\n"],"mappings":";;AAEA,SAASA,aAAT,QAA8B,iBAA9B;;AAQA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAN,CAAoD;EAIzDC,WAAW,CAACC,OAAO,GAAG,CAAX,EAAc;IAAA,gCAHhB,CAGgB;;IAAA,gCAFc,EAEd;;IACvB,KAAKC,MAAL,GAAcD,OAAd;EACD;EAED;AACF;AACA;;;EACEE,SAAS,CAACD,MAAD,EAAiB;IACxB,IAAIA,MAAM,GAAG,KAAKA,MAAlB,EAA0B;MACxB;MACA,KAAKA,MAAL,GAAcA,MAAd;IACD,CAHD,MAGO,IAAIA,MAAM,GAAG,KAAKA,MAAlB,EAA0B;MAC/B;MACA,MAAME,OAAqC,GAAG,EAA9C;;MACA,KAAK,MAAMC,GAAX,IAAkB,KAAKC,MAAvB,EAA+B;QAC7BF,OAAO,CAACG,IAAR,CAAaF,GAAb;;QACA,IAAIA,GAAG,CAACG,GAAJ,GAAUN,MAAd,EAAsB;UACpBG,GAAG,CAACG,GAAJ,GAAUN,MAAV;UACA;QACD;MACF;;MACD,KAAKI,MAAL,GAAcF,OAAd;MACA,KAAKF,MAAL,GAAcA,MAAd;IACD;EACF;;EAEDO,MAAM,CAACC,CAAD,EAAsC;IAC1C,MAAMC,IAAI,GAAG;MACXC,KAAK,EAAE,KAAKV,MADD;MAEXM,GAAG,EAAE,KAAKN,MAAL,GAAcQ,CAAC,CAACR,MAFV;MAGXW,MAAM,EAAEH;IAHG,CAAb;IAKA,KAAKR,MAAL,GAAcS,IAAI,CAACH,GAAnB;IACA,KAAKF,MAAL,CAAYC,IAAZ,CAAiBI,IAAjB;IACA,OAAOA,IAAP;EACD;;EAEDG,GAAG,CAACC,KAAD,EAAmB;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKV,MAAL,CAAYJ,MAAhC,EAAwCc,CAAC,EAAzC,EAA6C;MAC3C,MAAMX,GAAG,GAAG,KAAKC,MAAL,CAAYU,CAAZ,CAAZ;;MACA,IAAID,KAAK,IAAIV,GAAG,CAACO,KAAb,IAAsBG,KAAK,GAAGV,GAAG,CAACG,GAAtC,EAA2C;QACzC,OAAOH,GAAG,CAACQ,MAAJ,CAAWC,GAAX,CAAeC,KAAK,GAAGV,GAAG,CAACO,KAA3B,CAAP;MACD;IACF;;IACD,OAAOK,SAAP;EACD;;EAEDC,OAAO,GAAQ;IACb,OAAOpB,aAAa,CAAC,IAAD,CAApB;EACD;;EAEDqB,MAAM,GAAQ;IACZ,OAAOrB,aAAa,CAAC,IAAD,CAApB;EACD;;AAzDwD"},"metadata":{},"sourceType":"module"}