{"ast":null,"code":"import { PanelPlugin } from '@grafana/data';\nimport config from 'app/core/config';\nimport { getPanelPluginLoadError } from '../panel/components/PanelPluginError';\nimport { importPluginModule } from './plugin_loader';\nconst promiseCache = {};\nconst panelPluginCache = {};\nexport function importPanelPlugin(id) {\n  const loaded = promiseCache[id];\n\n  if (loaded) {\n    return loaded;\n  }\n\n  const meta = config.panels[id];\n\n  if (!meta) {\n    throw new Error(`Plugin ${id} not found`);\n  }\n\n  promiseCache[id] = getPanelPlugin(meta);\n  return promiseCache[id];\n}\nexport function importPanelPluginFromMeta(meta) {\n  return getPanelPlugin(meta);\n}\nexport function syncGetPanelPlugin(id) {\n  return panelPluginCache[id];\n}\n\nfunction getPanelPlugin(meta) {\n  var _meta$info;\n\n  return importPluginModule(meta.module, (_meta$info = meta.info) === null || _meta$info === void 0 ? void 0 : _meta$info.version).then(pluginExports => {\n    if (pluginExports.plugin) {\n      return pluginExports.plugin;\n    } else if (pluginExports.PanelCtrl) {\n      const plugin = new PanelPlugin(null);\n      plugin.angularPanelCtrl = pluginExports.PanelCtrl;\n      return plugin;\n    }\n\n    throw new Error('missing export: plugin or PanelCtrl');\n  }).then(plugin => {\n    plugin.meta = meta;\n    panelPluginCache[meta.id] = plugin;\n    return plugin;\n  }).catch(err => {\n    // TODO, maybe a different error plugin\n    console.warn('Error loading panel plugin: ' + meta.id, err);\n    return getPanelPluginLoadError(meta, err);\n  });\n}","map":{"version":3,"names":["PanelPlugin","config","getPanelPluginLoadError","importPluginModule","promiseCache","panelPluginCache","importPanelPlugin","id","loaded","meta","panels","Error","getPanelPlugin","importPanelPluginFromMeta","syncGetPanelPlugin","module","info","version","then","pluginExports","plugin","PanelCtrl","angularPanelCtrl","catch","err","console","warn"],"sources":["/home/soula/grafana/public/app/features/plugins/importPanelPlugin.ts"],"sourcesContent":["import { PanelPlugin, PanelPluginMeta } from '@grafana/data';\nimport config from 'app/core/config';\n\nimport { getPanelPluginLoadError } from '../panel/components/PanelPluginError';\n\nimport { importPluginModule } from './plugin_loader';\n\nconst promiseCache: Record<string, Promise<PanelPlugin>> = {};\nconst panelPluginCache: Record<string, PanelPlugin> = {};\n\nexport function importPanelPlugin(id: string): Promise<PanelPlugin> {\n  const loaded = promiseCache[id];\n  if (loaded) {\n    return loaded;\n  }\n\n  const meta = config.panels[id];\n\n  if (!meta) {\n    throw new Error(`Plugin ${id} not found`);\n  }\n\n  promiseCache[id] = getPanelPlugin(meta);\n\n  return promiseCache[id];\n}\n\nexport function importPanelPluginFromMeta(meta: PanelPluginMeta): Promise<PanelPlugin> {\n  return getPanelPlugin(meta);\n}\n\nexport function syncGetPanelPlugin(id: string): PanelPlugin | undefined {\n  return panelPluginCache[id];\n}\n\nfunction getPanelPlugin(meta: PanelPluginMeta): Promise<PanelPlugin> {\n  return importPluginModule(meta.module, meta.info?.version)\n    .then((pluginExports) => {\n      if (pluginExports.plugin) {\n        return pluginExports.plugin as PanelPlugin;\n      } else if (pluginExports.PanelCtrl) {\n        const plugin = new PanelPlugin(null);\n        plugin.angularPanelCtrl = pluginExports.PanelCtrl;\n        return plugin;\n      }\n      throw new Error('missing export: plugin or PanelCtrl');\n    })\n    .then((plugin) => {\n      plugin.meta = meta;\n      panelPluginCache[meta.id] = plugin;\n      return plugin;\n    })\n    .catch((err) => {\n      // TODO, maybe a different error plugin\n      console.warn('Error loading panel plugin: ' + meta.id, err);\n      return getPanelPluginLoadError(meta, err);\n    });\n}\n"],"mappings":"AAAA,SAASA,WAAT,QAA6C,eAA7C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AAEA,SAASC,uBAAT,QAAwC,sCAAxC;AAEA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA,MAAMC,YAAkD,GAAG,EAA3D;AACA,MAAMC,gBAA6C,GAAG,EAAtD;AAEA,OAAO,SAASC,iBAAT,CAA2BC,EAA3B,EAA6D;EAClE,MAAMC,MAAM,GAAGJ,YAAY,CAACG,EAAD,CAA3B;;EACA,IAAIC,MAAJ,EAAY;IACV,OAAOA,MAAP;EACD;;EAED,MAAMC,IAAI,GAAGR,MAAM,CAACS,MAAP,CAAcH,EAAd,CAAb;;EAEA,IAAI,CAACE,IAAL,EAAW;IACT,MAAM,IAAIE,KAAJ,CAAW,UAASJ,EAAG,YAAvB,CAAN;EACD;;EAEDH,YAAY,CAACG,EAAD,CAAZ,GAAmBK,cAAc,CAACH,IAAD,CAAjC;EAEA,OAAOL,YAAY,CAACG,EAAD,CAAnB;AACD;AAED,OAAO,SAASM,yBAAT,CAAmCJ,IAAnC,EAAgF;EACrF,OAAOG,cAAc,CAACH,IAAD,CAArB;AACD;AAED,OAAO,SAASK,kBAAT,CAA4BP,EAA5B,EAAiE;EACtE,OAAOF,gBAAgB,CAACE,EAAD,CAAvB;AACD;;AAED,SAASK,cAAT,CAAwBH,IAAxB,EAAqE;EAAA;;EACnE,OAAON,kBAAkB,CAACM,IAAI,CAACM,MAAN,gBAAcN,IAAI,CAACO,IAAnB,+CAAc,WAAWC,OAAzB,CAAlB,CACJC,IADI,CACEC,aAAD,IAAmB;IACvB,IAAIA,aAAa,CAACC,MAAlB,EAA0B;MACxB,OAAOD,aAAa,CAACC,MAArB;IACD,CAFD,MAEO,IAAID,aAAa,CAACE,SAAlB,EAA6B;MAClC,MAAMD,MAAM,GAAG,IAAIpB,WAAJ,CAAgB,IAAhB,CAAf;MACAoB,MAAM,CAACE,gBAAP,GAA0BH,aAAa,CAACE,SAAxC;MACA,OAAOD,MAAP;IACD;;IACD,MAAM,IAAIT,KAAJ,CAAU,qCAAV,CAAN;EACD,CAVI,EAWJO,IAXI,CAWEE,MAAD,IAAY;IAChBA,MAAM,CAACX,IAAP,GAAcA,IAAd;IACAJ,gBAAgB,CAACI,IAAI,CAACF,EAAN,CAAhB,GAA4Ba,MAA5B;IACA,OAAOA,MAAP;EACD,CAfI,EAgBJG,KAhBI,CAgBGC,GAAD,IAAS;IACd;IACAC,OAAO,CAACC,IAAR,CAAa,iCAAiCjB,IAAI,CAACF,EAAnD,EAAuDiB,GAAvD;IACA,OAAOtB,uBAAuB,CAACO,IAAD,EAAOe,GAAP,CAA9B;EACD,CApBI,CAAP;AAqBD"},"metadata":{},"sourceType":"module"}