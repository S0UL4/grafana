{"ast":null,"code":"var _Icon;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Icon } from '@grafana/ui';\nimport { encodeUrl } from '../aws_url';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default class CloudWatchLink extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      href: ''\n    });\n  }\n\n  async componentDidUpdate(prevProps) {\n    const {\n      panelData: panelDataNew\n    } = this.props;\n    const {\n      panelData: panelDataOld\n    } = prevProps;\n\n    if (panelDataOld !== panelDataNew && panelDataNew !== null && panelDataNew !== void 0 && panelDataNew.request) {\n      const href = this.getExternalLink();\n      this.setState({\n        href\n      });\n    }\n  }\n\n  getExternalLink() {\n    var _panelData$request, _query$expression, _query$logGroupNames;\n\n    const {\n      query,\n      panelData,\n      datasource\n    } = this.props;\n    const range = panelData === null || panelData === void 0 ? void 0 : (_panelData$request = panelData.request) === null || _panelData$request === void 0 ? void 0 : _panelData$request.range;\n\n    if (!range) {\n      return '';\n    }\n\n    const start = range.from.toISOString();\n    const end = range.to.toISOString();\n    const urlProps = {\n      end,\n      start,\n      timeType: 'ABSOLUTE',\n      tz: 'UTC',\n      editorString: (_query$expression = query.expression) !== null && _query$expression !== void 0 ? _query$expression : '',\n      isLiveTail: false,\n      source: (_query$logGroupNames = query.logGroupNames) !== null && _query$logGroupNames !== void 0 ? _query$logGroupNames : []\n    };\n    return encodeUrl(urlProps, datasource.getActualRegion(query.region));\n  }\n\n  render() {\n    const {\n      href\n    } = this.state;\n    return /*#__PURE__*/_jsxs(\"a\", {\n      href: href,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n        name: \"share-alt\"\n      })), \" CloudWatch Logs Insights\"]\n    });\n  }\n\n}","map":{"version":3,"names":["React","Component","Icon","encodeUrl","CloudWatchLink","href","componentDidUpdate","prevProps","panelData","panelDataNew","props","panelDataOld","request","getExternalLink","setState","query","datasource","range","start","from","toISOString","end","to","urlProps","timeType","tz","editorString","expression","isLiveTail","source","logGroupNames","getActualRegion","region","render","state"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/CloudWatchLink.tsx"],"sourcesContent":["import React, { Component } from 'react';\n\nimport { PanelData } from '@grafana/data';\nimport { Icon } from '@grafana/ui';\n\nimport { encodeUrl, AwsUrl } from '../aws_url';\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchLogsQuery } from '../types';\n\ninterface Props {\n  query: CloudWatchLogsQuery;\n  panelData?: PanelData;\n  datasource: CloudWatchDatasource;\n}\n\ninterface State {\n  href: string;\n}\n\nexport default class CloudWatchLink extends Component<Props, State> {\n  state: State = { href: '' };\n\n  async componentDidUpdate(prevProps: Props) {\n    const { panelData: panelDataNew } = this.props;\n    const { panelData: panelDataOld } = prevProps;\n\n    if (panelDataOld !== panelDataNew && panelDataNew?.request) {\n      const href = this.getExternalLink();\n      this.setState({ href });\n    }\n  }\n\n  getExternalLink(): string {\n    const { query, panelData, datasource } = this.props;\n\n    const range = panelData?.request?.range;\n\n    if (!range) {\n      return '';\n    }\n\n    const start = range.from.toISOString();\n    const end = range.to.toISOString();\n\n    const urlProps: AwsUrl = {\n      end,\n      start,\n      timeType: 'ABSOLUTE',\n      tz: 'UTC',\n      editorString: query.expression ?? '',\n      isLiveTail: false,\n      source: query.logGroupNames ?? [],\n    };\n\n    return encodeUrl(urlProps, datasource.getActualRegion(query.region));\n  }\n\n  render() {\n    const { href } = this.state;\n    return (\n      <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n        <Icon name=\"share-alt\" /> CloudWatch Logs Insights\n      </a>\n    );\n  }\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAGA,SAASC,IAAT,QAAqB,aAArB;AAEA,SAASC,SAAT,QAAkC,YAAlC;;;AAcA,eAAe,MAAMC,cAAN,SAA6BH,SAA7B,CAAqD;EAAA;IAAA;;IAAA,+BACnD;MAAEI,IAAI,EAAE;IAAR,CADmD;EAAA;;EAG1C,MAAlBC,kBAAkB,CAACC,SAAD,EAAmB;IACzC,MAAM;MAAEC,SAAS,EAAEC;IAAb,IAA8B,KAAKC,KAAzC;IACA,MAAM;MAAEF,SAAS,EAAEG;IAAb,IAA8BJ,SAApC;;IAEA,IAAII,YAAY,KAAKF,YAAjB,IAAiCA,YAAjC,aAAiCA,YAAjC,eAAiCA,YAAY,CAAEG,OAAnD,EAA4D;MAC1D,MAAMP,IAAI,GAAG,KAAKQ,eAAL,EAAb;MACA,KAAKC,QAAL,CAAc;QAAET;MAAF,CAAd;IACD;EACF;;EAEDQ,eAAe,GAAW;IAAA;;IACxB,MAAM;MAAEE,KAAF;MAASP,SAAT;MAAoBQ;IAApB,IAAmC,KAAKN,KAA9C;IAEA,MAAMO,KAAK,GAAGT,SAAH,aAAGA,SAAH,6CAAGA,SAAS,CAAEI,OAAd,uDAAG,mBAAoBK,KAAlC;;IAEA,IAAI,CAACA,KAAL,EAAY;MACV,OAAO,EAAP;IACD;;IAED,MAAMC,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWC,WAAX,EAAd;IACA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,EAAN,CAASF,WAAT,EAAZ;IAEA,MAAMG,QAAgB,GAAG;MACvBF,GADuB;MAEvBH,KAFuB;MAGvBM,QAAQ,EAAE,UAHa;MAIvBC,EAAE,EAAE,KAJmB;MAKvBC,YAAY,uBAAEX,KAAK,CAACY,UAAR,iEAAsB,EALX;MAMvBC,UAAU,EAAE,KANW;MAOvBC,MAAM,0BAAEd,KAAK,CAACe,aAAR,uEAAyB;IAPR,CAAzB;IAUA,OAAO3B,SAAS,CAACoB,QAAD,EAAWP,UAAU,CAACe,eAAX,CAA2BhB,KAAK,CAACiB,MAAjC,CAAX,CAAhB;EACD;;EAEDC,MAAM,GAAG;IACP,MAAM;MAAE5B;IAAF,IAAW,KAAK6B,KAAtB;IACA,oBACE;MAAG,IAAI,EAAE7B,IAAT;MAAe,MAAM,EAAC,QAAtB;MAA+B,GAAG,EAAC,qBAAnC;MAAA,0CACE,KAAC,IAAD;QAAM,IAAI,EAAC;MAAX,EADF;IAAA,EADF;EAKD;;AA7CiE"},"metadata":{},"sourceType":"module"}