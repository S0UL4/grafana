{"ast":null,"code":"var _window$localStorage$;\n\nimport { createSlice } from '@reduxjs/toolkit';\nimport { AppNotificationSeverity } from 'app/types/';\nconst MAX_STORED_NOTIFICATIONS = 25;\nexport const STORAGE_KEY = 'notifications';\nexport const NEW_NOTIFS_KEY = `${STORAGE_KEY}/lastRead`;\nexport const initialState = {\n  byId: deserializeNotifications(),\n  lastRead: Number.parseInt((_window$localStorage$ = window.localStorage.getItem(NEW_NOTIFS_KEY)) !== null && _window$localStorage$ !== void 0 ? _window$localStorage$ : `${Date.now()}`, 10)\n};\n/**\n * Reducer and action to show toast notifications of various types (success, warnings, errors etc). Use to show\n * transient info to user, like errors that cannot be otherwise handled or success after an action.\n *\n * Use factory functions in core/copy/appNotifications to create the payload.\n */\n\nconst appNotificationsSlice = createSlice({\n  name: 'appNotifications',\n  initialState,\n  reducers: {\n    notifyApp: (state, {\n      payload: newAlert\n    }) => {\n      if (Object.values(state.byId).some(alert => isSimilar(newAlert, alert) && alert.showing)) {\n        return;\n      }\n\n      state.byId[newAlert.id] = newAlert;\n      serializeNotifications(state.byId);\n    },\n    hideAppNotification: (state, {\n      payload: alertId\n    }) => {\n      if (!(alertId in state.byId)) {\n        return;\n      }\n\n      state.byId[alertId].showing = false;\n      serializeNotifications(state.byId);\n    },\n    clearNotification: (state, {\n      payload: alertId\n    }) => {\n      delete state.byId[alertId];\n      serializeNotifications(state.byId);\n    },\n    clearAllNotifications: state => {\n      state.byId = {};\n      serializeNotifications(state.byId);\n    },\n    readAllNotifications: (state, {\n      payload: timestamp\n    }) => {\n      state.lastRead = timestamp;\n    }\n  }\n});\nexport const {\n  notifyApp,\n  hideAppNotification,\n  clearNotification,\n  clearAllNotifications,\n  readAllNotifications\n} = appNotificationsSlice.actions;\nexport const appNotificationsReducer = appNotificationsSlice.reducer; // Selectors\n\nexport const selectLastReadTimestamp = state => state.lastRead;\nexport const selectAll = state => Object.values(state.byId).sort((a, b) => b.timestamp - a.timestamp);\nexport const selectWarningsAndErrors = state => selectAll(state).filter(isAtLeastWarning);\nexport const selectVisible = state => Object.values(state.byId).filter(n => n.showing); // Helper functions\n\nfunction isSimilar(a, b) {\n  return a.icon === b.icon && a.severity === b.severity && a.text === b.text && a.title === b.title;\n}\n\nfunction isAtLeastWarning(notif) {\n  return notif.severity === AppNotificationSeverity.Warning || notif.severity === AppNotificationSeverity.Error;\n}\n\nfunction isStoredNotification(obj) {\n  return typeof obj.id === 'string' && typeof obj.icon === 'string' && typeof obj.title === 'string' && typeof obj.text === 'string';\n} // (De)serialization\n\n\nexport function deserializeNotifications() {\n  const storedNotifsRaw = window.localStorage.getItem(STORAGE_KEY);\n\n  if (!storedNotifsRaw) {\n    return {};\n  }\n\n  const parsed = JSON.parse(storedNotifsRaw);\n\n  if (!Object.values(parsed).every(v => isStoredNotification(v))) {\n    return {};\n  }\n\n  return parsed;\n}\n\nfunction serializeNotifications(notifs) {\n  const reducedNotifs = Object.values(notifs).filter(isAtLeastWarning).sort((a, b) => b.timestamp - a.timestamp).slice(0, MAX_STORED_NOTIFICATIONS).reduce((prev, cur) => {\n    prev[cur.id] = {\n      id: cur.id,\n      severity: cur.severity,\n      icon: cur.icon,\n      title: cur.title,\n      text: cur.text,\n      traceId: cur.traceId,\n      timestamp: cur.timestamp,\n      showing: cur.showing\n    };\n    return prev;\n  }, {});\n\n  try {\n    window.localStorage.setItem(STORAGE_KEY, JSON.stringify(reducedNotifs));\n  } catch (err) {\n    console.error('Unable to persist notifications to local storage');\n    console.error(err);\n  }\n}","map":{"version":3,"names":["createSlice","AppNotificationSeverity","MAX_STORED_NOTIFICATIONS","STORAGE_KEY","NEW_NOTIFS_KEY","initialState","byId","deserializeNotifications","lastRead","Number","parseInt","window","localStorage","getItem","Date","now","appNotificationsSlice","name","reducers","notifyApp","state","payload","newAlert","Object","values","some","alert","isSimilar","showing","id","serializeNotifications","hideAppNotification","alertId","clearNotification","clearAllNotifications","readAllNotifications","timestamp","actions","appNotificationsReducer","reducer","selectLastReadTimestamp","selectAll","sort","a","b","selectWarningsAndErrors","filter","isAtLeastWarning","selectVisible","n","icon","severity","text","title","notif","Warning","Error","isStoredNotification","obj","storedNotifsRaw","parsed","JSON","parse","every","v","notifs","reducedNotifs","slice","reduce","prev","cur","traceId","setItem","stringify","err","console","error"],"sources":["/home/soula/grafana/public/app/core/reducers/appNotification.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { AppNotification, AppNotificationSeverity, AppNotificationsState } from 'app/types/';\n\nconst MAX_STORED_NOTIFICATIONS = 25;\nexport const STORAGE_KEY = 'notifications';\nexport const NEW_NOTIFS_KEY = `${STORAGE_KEY}/lastRead`;\ntype StoredNotification = Omit<AppNotification, 'component'>;\n\nexport const initialState: AppNotificationsState = {\n  byId: deserializeNotifications(),\n  lastRead: Number.parseInt(window.localStorage.getItem(NEW_NOTIFS_KEY) ?? `${Date.now()}`, 10),\n};\n\n/**\n * Reducer and action to show toast notifications of various types (success, warnings, errors etc). Use to show\n * transient info to user, like errors that cannot be otherwise handled or success after an action.\n *\n * Use factory functions in core/copy/appNotifications to create the payload.\n */\nconst appNotificationsSlice = createSlice({\n  name: 'appNotifications',\n  initialState,\n  reducers: {\n    notifyApp: (state, { payload: newAlert }: PayloadAction<AppNotification>) => {\n      if (Object.values(state.byId).some((alert) => isSimilar(newAlert, alert) && alert.showing)) {\n        return;\n      }\n\n      state.byId[newAlert.id] = newAlert;\n      serializeNotifications(state.byId);\n    },\n    hideAppNotification: (state, { payload: alertId }: PayloadAction<string>) => {\n      if (!(alertId in state.byId)) {\n        return;\n      }\n\n      state.byId[alertId].showing = false;\n      serializeNotifications(state.byId);\n    },\n    clearNotification: (state, { payload: alertId }: PayloadAction<string>) => {\n      delete state.byId[alertId];\n      serializeNotifications(state.byId);\n    },\n    clearAllNotifications: (state) => {\n      state.byId = {};\n      serializeNotifications(state.byId);\n    },\n    readAllNotifications: (state, { payload: timestamp }: PayloadAction<number>) => {\n      state.lastRead = timestamp;\n    },\n  },\n});\n\nexport const { notifyApp, hideAppNotification, clearNotification, clearAllNotifications, readAllNotifications } =\n  appNotificationsSlice.actions;\n\nexport const appNotificationsReducer = appNotificationsSlice.reducer;\n\n// Selectors\n\nexport const selectLastReadTimestamp = (state: AppNotificationsState) => state.lastRead;\nexport const selectAll = (state: AppNotificationsState) =>\n  Object.values(state.byId).sort((a, b) => b.timestamp - a.timestamp);\nexport const selectWarningsAndErrors = (state: AppNotificationsState) => selectAll(state).filter(isAtLeastWarning);\nexport const selectVisible = (state: AppNotificationsState) => Object.values(state.byId).filter((n) => n.showing);\n\n// Helper functions\n\nfunction isSimilar(a: AppNotification, b: AppNotification): boolean {\n  return a.icon === b.icon && a.severity === b.severity && a.text === b.text && a.title === b.title;\n}\n\nfunction isAtLeastWarning(notif: AppNotification) {\n  return notif.severity === AppNotificationSeverity.Warning || notif.severity === AppNotificationSeverity.Error;\n}\n\nfunction isStoredNotification(obj: any): obj is StoredNotification {\n  return (\n    typeof obj.id === 'string' &&\n    typeof obj.icon === 'string' &&\n    typeof obj.title === 'string' &&\n    typeof obj.text === 'string'\n  );\n}\n\n// (De)serialization\n\nexport function deserializeNotifications(): Record<string, StoredNotification> {\n  const storedNotifsRaw = window.localStorage.getItem(STORAGE_KEY);\n  if (!storedNotifsRaw) {\n    return {};\n  }\n\n  const parsed = JSON.parse(storedNotifsRaw);\n  if (!Object.values(parsed).every((v) => isStoredNotification(v))) {\n    return {};\n  }\n\n  return parsed;\n}\n\nfunction serializeNotifications(notifs: Record<string, StoredNotification>) {\n  const reducedNotifs = Object.values(notifs)\n    .filter(isAtLeastWarning)\n    .sort((a, b) => b.timestamp - a.timestamp)\n    .slice(0, MAX_STORED_NOTIFICATIONS)\n    .reduce<Record<string, StoredNotification>>((prev, cur) => {\n      prev[cur.id] = {\n        id: cur.id,\n        severity: cur.severity,\n        icon: cur.icon,\n        title: cur.title,\n        text: cur.text,\n        traceId: cur.traceId,\n        timestamp: cur.timestamp,\n        showing: cur.showing,\n      };\n\n      return prev;\n    }, {});\n\n  try {\n    window.localStorage.setItem(STORAGE_KEY, JSON.stringify(reducedNotifs));\n  } catch (err) {\n    console.error('Unable to persist notifications to local storage');\n    console.error(err);\n  }\n}\n"],"mappings":";;AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,SAA0BC,uBAA1B,QAAgF,YAAhF;AAEA,MAAMC,wBAAwB,GAAG,EAAjC;AACA,OAAO,MAAMC,WAAW,GAAG,eAApB;AACP,OAAO,MAAMC,cAAc,GAAI,GAAED,WAAY,WAAtC;AAGP,OAAO,MAAME,YAAmC,GAAG;EACjDC,IAAI,EAAEC,wBAAwB,EADmB;EAEjDC,QAAQ,EAAEC,MAAM,CAACC,QAAP,0BAAgBC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BT,cAA5B,CAAhB,yEAAgE,GAAEU,IAAI,CAACC,GAAL,EAAW,EAA7E,EAAgF,EAAhF;AAFuC,CAA5C;AAKP;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAAGhB,WAAW,CAAC;EACxCiB,IAAI,EAAE,kBADkC;EAExCZ,YAFwC;EAGxCa,QAAQ,EAAE;IACRC,SAAS,EAAE,CAACC,KAAD,EAAQ;MAAEC,OAAO,EAAEC;IAAX,CAAR,KAAkE;MAC3E,IAAIC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAACd,IAApB,EAA0BmB,IAA1B,CAAgCC,KAAD,IAAWC,SAAS,CAACL,QAAD,EAAWI,KAAX,CAAT,IAA8BA,KAAK,CAACE,OAA9E,CAAJ,EAA4F;QAC1F;MACD;;MAEDR,KAAK,CAACd,IAAN,CAAWgB,QAAQ,CAACO,EAApB,IAA0BP,QAA1B;MACAQ,sBAAsB,CAACV,KAAK,CAACd,IAAP,CAAtB;IACD,CARO;IASRyB,mBAAmB,EAAE,CAACX,KAAD,EAAQ;MAAEC,OAAO,EAAEW;IAAX,CAAR,KAAwD;MAC3E,IAAI,EAAEA,OAAO,IAAIZ,KAAK,CAACd,IAAnB,CAAJ,EAA8B;QAC5B;MACD;;MAEDc,KAAK,CAACd,IAAN,CAAW0B,OAAX,EAAoBJ,OAApB,GAA8B,KAA9B;MACAE,sBAAsB,CAACV,KAAK,CAACd,IAAP,CAAtB;IACD,CAhBO;IAiBR2B,iBAAiB,EAAE,CAACb,KAAD,EAAQ;MAAEC,OAAO,EAAEW;IAAX,CAAR,KAAwD;MACzE,OAAOZ,KAAK,CAACd,IAAN,CAAW0B,OAAX,CAAP;MACAF,sBAAsB,CAACV,KAAK,CAACd,IAAP,CAAtB;IACD,CApBO;IAqBR4B,qBAAqB,EAAGd,KAAD,IAAW;MAChCA,KAAK,CAACd,IAAN,GAAa,EAAb;MACAwB,sBAAsB,CAACV,KAAK,CAACd,IAAP,CAAtB;IACD,CAxBO;IAyBR6B,oBAAoB,EAAE,CAACf,KAAD,EAAQ;MAAEC,OAAO,EAAEe;IAAX,CAAR,KAA0D;MAC9EhB,KAAK,CAACZ,QAAN,GAAiB4B,SAAjB;IACD;EA3BO;AAH8B,CAAD,CAAzC;AAkCA,OAAO,MAAM;EAAEjB,SAAF;EAAaY,mBAAb;EAAkCE,iBAAlC;EAAqDC,qBAArD;EAA4EC;AAA5E,IACXnB,qBAAqB,CAACqB,OADjB;AAGP,OAAO,MAAMC,uBAAuB,GAAGtB,qBAAqB,CAACuB,OAAtD,C,CAEP;;AAEA,OAAO,MAAMC,uBAAuB,GAAIpB,KAAD,IAAkCA,KAAK,CAACZ,QAAxE;AACP,OAAO,MAAMiC,SAAS,GAAIrB,KAAD,IACvBG,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAACd,IAApB,EAA0BoC,IAA1B,CAA+B,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACR,SAAF,GAAcO,CAAC,CAACP,SAAzD,CADK;AAEP,OAAO,MAAMS,uBAAuB,GAAIzB,KAAD,IAAkCqB,SAAS,CAACrB,KAAD,CAAT,CAAiB0B,MAAjB,CAAwBC,gBAAxB,CAAlE;AACP,OAAO,MAAMC,aAAa,GAAI5B,KAAD,IAAkCG,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAACd,IAApB,EAA0BwC,MAA1B,CAAkCG,CAAD,IAAOA,CAAC,CAACrB,OAA1C,CAAxD,C,CAEP;;AAEA,SAASD,SAAT,CAAmBgB,CAAnB,EAAuCC,CAAvC,EAAoE;EAClE,OAAOD,CAAC,CAACO,IAAF,KAAWN,CAAC,CAACM,IAAb,IAAqBP,CAAC,CAACQ,QAAF,KAAeP,CAAC,CAACO,QAAtC,IAAkDR,CAAC,CAACS,IAAF,KAAWR,CAAC,CAACQ,IAA/D,IAAuET,CAAC,CAACU,KAAF,KAAYT,CAAC,CAACS,KAA5F;AACD;;AAED,SAASN,gBAAT,CAA0BO,KAA1B,EAAkD;EAChD,OAAOA,KAAK,CAACH,QAAN,KAAmBlD,uBAAuB,CAACsD,OAA3C,IAAsDD,KAAK,CAACH,QAAN,KAAmBlD,uBAAuB,CAACuD,KAAxG;AACD;;AAED,SAASC,oBAAT,CAA8BC,GAA9B,EAAmE;EACjE,OACE,OAAOA,GAAG,CAAC7B,EAAX,KAAkB,QAAlB,IACA,OAAO6B,GAAG,CAACR,IAAX,KAAoB,QADpB,IAEA,OAAOQ,GAAG,CAACL,KAAX,KAAqB,QAFrB,IAGA,OAAOK,GAAG,CAACN,IAAX,KAAoB,QAJtB;AAMD,C,CAED;;;AAEA,OAAO,SAAS7C,wBAAT,GAAwE;EAC7E,MAAMoD,eAAe,GAAGhD,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BV,WAA5B,CAAxB;;EACA,IAAI,CAACwD,eAAL,EAAsB;IACpB,OAAO,EAAP;EACD;;EAED,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,eAAX,CAAf;;EACA,IAAI,CAACpC,MAAM,CAACC,MAAP,CAAcoC,MAAd,EAAsBG,KAAtB,CAA6BC,CAAD,IAAOP,oBAAoB,CAACO,CAAD,CAAvD,CAAL,EAAkE;IAChE,OAAO,EAAP;EACD;;EAED,OAAOJ,MAAP;AACD;;AAED,SAAS9B,sBAAT,CAAgCmC,MAAhC,EAA4E;EAC1E,MAAMC,aAAa,GAAG3C,MAAM,CAACC,MAAP,CAAcyC,MAAd,EACnBnB,MADmB,CACZC,gBADY,EAEnBL,IAFmB,CAEd,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACR,SAAF,GAAcO,CAAC,CAACP,SAFZ,EAGnB+B,KAHmB,CAGb,CAHa,EAGVjE,wBAHU,EAInBkE,MAJmB,CAIwB,CAACC,IAAD,EAAOC,GAAP,KAAe;IACzDD,IAAI,CAACC,GAAG,CAACzC,EAAL,CAAJ,GAAe;MACbA,EAAE,EAAEyC,GAAG,CAACzC,EADK;MAEbsB,QAAQ,EAAEmB,GAAG,CAACnB,QAFD;MAGbD,IAAI,EAAEoB,GAAG,CAACpB,IAHG;MAIbG,KAAK,EAAEiB,GAAG,CAACjB,KAJE;MAKbD,IAAI,EAAEkB,GAAG,CAAClB,IALG;MAMbmB,OAAO,EAAED,GAAG,CAACC,OANA;MAObnC,SAAS,EAAEkC,GAAG,CAAClC,SAPF;MAQbR,OAAO,EAAE0C,GAAG,CAAC1C;IARA,CAAf;IAWA,OAAOyC,IAAP;EACD,CAjBmB,EAiBjB,EAjBiB,CAAtB;;EAmBA,IAAI;IACF1D,MAAM,CAACC,YAAP,CAAoB4D,OAApB,CAA4BrE,WAA5B,EAAyC0D,IAAI,CAACY,SAAL,CAAeP,aAAf,CAAzC;EACD,CAFD,CAEE,OAAOQ,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAc,kDAAd;IACAD,OAAO,CAACC,KAAR,CAAcF,GAAd;EACD;AACF"},"metadata":{},"sourceType":"module"}