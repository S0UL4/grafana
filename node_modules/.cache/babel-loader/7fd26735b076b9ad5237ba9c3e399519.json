{"ast":null,"code":"import React, { useCallback, useLayoutEffect, useRef } from 'react';\nimport { TIME_SERIES_TIME_FIELD_NAME, TIME_SERIES_VALUE_FIELD_NAME } from '@grafana/data';\nimport { EventsCanvas, FIXED_UNIT } from '@grafana/ui';\nimport { ExemplarMarker } from './ExemplarMarker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const ExemplarsPlugin = ({\n  exemplars,\n  timeZone,\n  getFieldLinks,\n  config\n}) => {\n  const plotInstance = useRef();\n  useLayoutEffect(() => {\n    config.addHook('init', u => {\n      plotInstance.current = u;\n    });\n  }, [config]);\n  const mapExemplarToXYCoords = useCallback((dataFrame, dataFrameFieldIndex) => {\n    var _Object$keys$find;\n\n    const time = dataFrame.fields.find(f => f.name === TIME_SERIES_TIME_FIELD_NAME);\n    const value = dataFrame.fields.find(f => f.name === TIME_SERIES_VALUE_FIELD_NAME);\n\n    if (!time || !value || !plotInstance.current) {\n      return undefined;\n    } // Filter x, y scales out\n\n\n    const yScale = (_Object$keys$find = Object.keys(plotInstance.current.scales).find(scale => !['x', 'y'].some(key => key === scale))) !== null && _Object$keys$find !== void 0 ? _Object$keys$find : FIXED_UNIT;\n    const yMin = plotInstance.current.scales[yScale].min;\n    const yMax = plotInstance.current.scales[yScale].max;\n    let y = value.values.get(dataFrameFieldIndex.fieldIndex); // To not to show exemplars outside of the graph we set the y value to min if it is smaller and max if it is bigger than the size of the graph\n\n    if (yMin != null && y < yMin) {\n      y = yMin;\n    }\n\n    if (yMax != null && y > yMax) {\n      y = yMax;\n    }\n\n    return {\n      x: plotInstance.current.valToPos(time.values.get(dataFrameFieldIndex.fieldIndex), 'x'),\n      y: plotInstance.current.valToPos(y, yScale)\n    };\n  }, []);\n  const renderMarker = useCallback((dataFrame, dataFrameFieldIndex) => {\n    return /*#__PURE__*/_jsx(ExemplarMarker, {\n      timeZone: timeZone,\n      getFieldLinks: getFieldLinks,\n      dataFrame: dataFrame,\n      dataFrameFieldIndex: dataFrameFieldIndex,\n      config: config\n    });\n  }, [config, timeZone, getFieldLinks]);\n  return /*#__PURE__*/_jsx(EventsCanvas, {\n    config: config,\n    id: \"exemplars\",\n    events: exemplars,\n    renderEventMarker: renderMarker,\n    mapEventToXYCoords: mapExemplarToXYCoords\n  });\n};","map":{"version":3,"names":["React","useCallback","useLayoutEffect","useRef","TIME_SERIES_TIME_FIELD_NAME","TIME_SERIES_VALUE_FIELD_NAME","EventsCanvas","FIXED_UNIT","ExemplarMarker","ExemplarsPlugin","exemplars","timeZone","getFieldLinks","config","plotInstance","addHook","u","current","mapExemplarToXYCoords","dataFrame","dataFrameFieldIndex","time","fields","find","f","name","value","undefined","yScale","Object","keys","scales","scale","some","key","yMin","min","yMax","max","y","values","get","fieldIndex","x","valToPos","renderMarker"],"sources":["/home/soula/grafana/public/app/plugins/panel/timeseries/plugins/ExemplarsPlugin.tsx"],"sourcesContent":["import React, { useCallback, useLayoutEffect, useRef } from 'react';\nimport uPlot from 'uplot';\n\nimport {\n  DataFrame,\n  DataFrameFieldIndex,\n  Field,\n  LinkModel,\n  TimeZone,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n} from '@grafana/data';\nimport { EventsCanvas, FIXED_UNIT, UPlotConfigBuilder } from '@grafana/ui';\n\nimport { ExemplarMarker } from './ExemplarMarker';\n\ninterface ExemplarsPluginProps {\n  config: UPlotConfigBuilder;\n  exemplars: DataFrame[];\n  timeZone: TimeZone;\n  getFieldLinks: (field: Field, rowIndex: number) => Array<LinkModel<Field>>;\n}\n\nexport const ExemplarsPlugin: React.FC<ExemplarsPluginProps> = ({ exemplars, timeZone, getFieldLinks, config }) => {\n  const plotInstance = useRef<uPlot>();\n\n  useLayoutEffect(() => {\n    config.addHook('init', (u) => {\n      plotInstance.current = u;\n    });\n  }, [config]);\n\n  const mapExemplarToXYCoords = useCallback((dataFrame: DataFrame, dataFrameFieldIndex: DataFrameFieldIndex) => {\n    const time = dataFrame.fields.find((f) => f.name === TIME_SERIES_TIME_FIELD_NAME);\n    const value = dataFrame.fields.find((f) => f.name === TIME_SERIES_VALUE_FIELD_NAME);\n\n    if (!time || !value || !plotInstance.current) {\n      return undefined;\n    }\n\n    // Filter x, y scales out\n    const yScale =\n      Object.keys(plotInstance.current.scales).find((scale) => !['x', 'y'].some((key) => key === scale)) ?? FIXED_UNIT;\n\n    const yMin = plotInstance.current.scales[yScale].min;\n    const yMax = plotInstance.current.scales[yScale].max;\n\n    let y = value.values.get(dataFrameFieldIndex.fieldIndex);\n    // To not to show exemplars outside of the graph we set the y value to min if it is smaller and max if it is bigger than the size of the graph\n    if (yMin != null && y < yMin) {\n      y = yMin;\n    }\n\n    if (yMax != null && y > yMax) {\n      y = yMax;\n    }\n\n    return {\n      x: plotInstance.current.valToPos(time.values.get(dataFrameFieldIndex.fieldIndex), 'x'),\n      y: plotInstance.current.valToPos(y, yScale),\n    };\n  }, []);\n\n  const renderMarker = useCallback(\n    (dataFrame: DataFrame, dataFrameFieldIndex: DataFrameFieldIndex) => {\n      return (\n        <ExemplarMarker\n          timeZone={timeZone}\n          getFieldLinks={getFieldLinks}\n          dataFrame={dataFrame}\n          dataFrameFieldIndex={dataFrameFieldIndex}\n          config={config}\n        />\n      );\n    },\n    [config, timeZone, getFieldLinks]\n  );\n\n  return (\n    <EventsCanvas\n      config={config}\n      id=\"exemplars\"\n      events={exemplars}\n      renderEventMarker={renderMarker}\n      mapEventToXYCoords={mapExemplarToXYCoords}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}