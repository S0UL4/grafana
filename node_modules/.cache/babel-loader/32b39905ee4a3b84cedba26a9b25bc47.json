{"ast":null,"code":"var _MessageLink, _MessageLink2;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { config } from '@grafana/runtime/src';\nimport { Alert, useStyles2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst MessageLink = ({\n  text\n}) => /*#__PURE__*/_jsx(\"a\", {\n  href: \"https://grafana.com/grafana/plugins/grafana-image-renderer\",\n  target: \"_blank\",\n  rel: \"noopener noreferrer\",\n  className: \"external-link\",\n  children: text\n});\n\nconst Message = ({\n  requiredImageRendererPluginVersion\n}) => {\n  if (requiredImageRendererPluginVersion) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [\"You must update the \", _MessageLink || (_MessageLink = /*#__PURE__*/_jsx(MessageLink, {\n        text: \"Grafana image renderer plugin\"\n      })), \" to version\", ' ', requiredImageRendererPluginVersion, \" to enable dashboard previews. Please contact your Grafana administrator to update the plugin.\"]\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [\"You must install the \", _MessageLink2 || (_MessageLink2 = /*#__PURE__*/_jsx(MessageLink, {\n      text: \"Grafana image renderer plugin\"\n    })), \" to enable dashboard previews. Please contact your Grafana administrator to install the plugin.\"]\n  });\n};\n\nexport const PreviewsSystemRequirements = ({\n  showPreviews,\n  onRemove,\n  topSpacing,\n  bottomSpacing\n}) => {\n  const styles = useStyles2(getStyles);\n  const previewsEnabled = config.featureToggles.dashboardPreviews;\n  const rendererAvailable = config.rendererAvailable;\n  const {\n    systemRequirements: {\n      met: systemRequirementsMet,\n      requiredImageRendererPluginVersion\n    },\n    thumbnailsExist\n  } = config.dashboardPreviews;\n  const arePreviewsEnabled = previewsEnabled && showPreviews;\n  const areRequirementsMet = rendererAvailable && systemRequirementsMet || thumbnailsExist;\n  const shouldDisplayRequirements = arePreviewsEnabled && !areRequirementsMet;\n  const title = requiredImageRendererPluginVersion ? 'Image renderer plugin needs to be updated' : 'Image renderer plugin not installed';\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: shouldDisplayRequirements && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.wrapper,\n      children: /*#__PURE__*/_jsx(Alert, {\n        className: styles.alert,\n        topSpacing: topSpacing,\n        bottomSpacing: bottomSpacing,\n        severity: \"info\",\n        title: title,\n        onRemove: onRemove,\n        children: /*#__PURE__*/_jsx(Message, {\n          requiredImageRendererPluginVersion: requiredImageRendererPluginVersion\n        })\n      })\n    })\n  });\n};\n\nconst getStyles = () => {\n  return {\n    wrapper: css`\n      display: flex;\n      justify-content: center;\n    `,\n    alert: css`\n      max-width: 800px;\n    `\n  };\n};","map":{"version":3,"names":["css","React","config","Alert","useStyles2","MessageLink","text","Message","requiredImageRendererPluginVersion","PreviewsSystemRequirements","showPreviews","onRemove","topSpacing","bottomSpacing","styles","getStyles","previewsEnabled","featureToggles","dashboardPreviews","rendererAvailable","systemRequirements","met","systemRequirementsMet","thumbnailsExist","arePreviewsEnabled","areRequirementsMet","shouldDisplayRequirements","title","wrapper","alert"],"sources":["/home/soula/grafana/public/app/features/search/components/PreviewsSystemRequirements.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { config } from '@grafana/runtime/src';\nimport { Alert, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  showPreviews?: boolean;\n  /** On click handler for alert button, mostly used for dismissing the alert */\n  onRemove?: (event: React.MouseEvent) => void;\n  topSpacing?: number;\n  bottomSpacing?: number;\n}\n\nconst MessageLink = ({ text }: { text: string }) => (\n  <a\n    href=\"https://grafana.com/grafana/plugins/grafana-image-renderer\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    className=\"external-link\"\n  >\n    {text}\n  </a>\n);\n\nconst Message = ({ requiredImageRendererPluginVersion }: { requiredImageRendererPluginVersion?: string }) => {\n  if (requiredImageRendererPluginVersion) {\n    return (\n      <>\n        You must update the <MessageLink text=\"Grafana image renderer plugin\" /> to version{' '}\n        {requiredImageRendererPluginVersion} to enable dashboard previews. Please contact your Grafana administrator to\n        update the plugin.\n      </>\n    );\n  }\n\n  return (\n    <>\n      You must install the <MessageLink text=\"Grafana image renderer plugin\" /> to enable dashboard previews. Please\n      contact your Grafana administrator to install the plugin.\n    </>\n  );\n};\n\nexport const PreviewsSystemRequirements = ({ showPreviews, onRemove, topSpacing, bottomSpacing }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const previewsEnabled = config.featureToggles.dashboardPreviews;\n  const rendererAvailable = config.rendererAvailable;\n\n  const {\n    systemRequirements: { met: systemRequirementsMet, requiredImageRendererPluginVersion },\n    thumbnailsExist,\n  } = config.dashboardPreviews;\n\n  const arePreviewsEnabled = previewsEnabled && showPreviews;\n  const areRequirementsMet = (rendererAvailable && systemRequirementsMet) || thumbnailsExist;\n  const shouldDisplayRequirements = arePreviewsEnabled && !areRequirementsMet;\n\n  const title = requiredImageRendererPluginVersion\n    ? 'Image renderer plugin needs to be updated'\n    : 'Image renderer plugin not installed';\n\n  return (\n    <>\n      {shouldDisplayRequirements && (\n        <div className={styles.wrapper}>\n          <Alert\n            className={styles.alert}\n            topSpacing={topSpacing}\n            bottomSpacing={bottomSpacing}\n            severity=\"info\"\n            title={title}\n            onRemove={onRemove}\n          >\n            <Message requiredImageRendererPluginVersion={requiredImageRendererPluginVersion} />\n          </Alert>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst getStyles = () => {\n  return {\n    wrapper: css`\n      display: flex;\n      justify-content: center;\n    `,\n    alert: css`\n      max-width: 800px;\n    `,\n  };\n};\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,aAAlC;;;;;AAUA,MAAMC,WAAW,GAAG,CAAC;EAAEC;AAAF,CAAD,kBAClB;EACE,IAAI,EAAC,4DADP;EAEE,MAAM,EAAC,QAFT;EAGE,GAAG,EAAC,qBAHN;EAIE,SAAS,EAAC,eAJZ;EAAA,UAMGA;AANH,EADF;;AAWA,MAAMC,OAAO,GAAG,CAAC;EAAEC;AAAF,CAAD,KAA6F;EAC3G,IAAIA,kCAAJ,EAAwC;IACtC,oBACE;MAAA,gFACsB,KAAC,WAAD;QAAa,IAAI,EAAC;MAAlB,EADtB,kBACsF,GADtF,EAEGA,kCAFH;IAAA,EADF;EAOD;;EAED,oBACE;IAAA,mFACuB,KAAC,WAAD;MAAa,IAAI,EAAC;IAAlB,EADvB;EAAA,EADF;AAMD,CAjBD;;AAmBA,OAAO,MAAMC,0BAA0B,GAAG,CAAC;EAAEC,YAAF;EAAgBC,QAAhB;EAA0BC,UAA1B;EAAsCC;AAAtC,CAAD,KAAkE;EAC1G,MAAMC,MAAM,GAAGV,UAAU,CAACW,SAAD,CAAzB;EAEA,MAAMC,eAAe,GAAGd,MAAM,CAACe,cAAP,CAAsBC,iBAA9C;EACA,MAAMC,iBAAiB,GAAGjB,MAAM,CAACiB,iBAAjC;EAEA,MAAM;IACJC,kBAAkB,EAAE;MAAEC,GAAG,EAAEC,qBAAP;MAA8Bd;IAA9B,CADhB;IAEJe;EAFI,IAGFrB,MAAM,CAACgB,iBAHX;EAKA,MAAMM,kBAAkB,GAAGR,eAAe,IAAIN,YAA9C;EACA,MAAMe,kBAAkB,GAAIN,iBAAiB,IAAIG,qBAAtB,IAAgDC,eAA3E;EACA,MAAMG,yBAAyB,GAAGF,kBAAkB,IAAI,CAACC,kBAAzD;EAEA,MAAME,KAAK,GAAGnB,kCAAkC,GAC5C,2CAD4C,GAE5C,qCAFJ;EAIA,oBACE;IAAA,UACGkB,yBAAyB,iBACxB;MAAK,SAAS,EAAEZ,MAAM,CAACc,OAAvB;MAAA,uBACE,KAAC,KAAD;QACE,SAAS,EAAEd,MAAM,CAACe,KADpB;QAEE,UAAU,EAAEjB,UAFd;QAGE,aAAa,EAAEC,aAHjB;QAIE,QAAQ,EAAC,MAJX;QAKE,KAAK,EAAEc,KALT;QAME,QAAQ,EAAEhB,QANZ;QAAA,uBAQE,KAAC,OAAD;UAAS,kCAAkC,EAAEH;QAA7C;MARF;IADF;EAFJ,EADF;AAkBD,CArCM;;AAuCP,MAAMO,SAAS,GAAG,MAAM;EACtB,OAAO;IACLa,OAAO,EAAE5B,GAAI;AACjB;AACA;AACA,KAJS;IAKL6B,KAAK,EAAE7B,GAAI;AACf;AACA;EAPS,CAAP;AASD,CAVD"},"metadata":{},"sourceType":"module"}