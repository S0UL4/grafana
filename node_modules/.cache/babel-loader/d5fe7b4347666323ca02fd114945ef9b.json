{"ast":null,"code":"import memoizeOne from 'memoize-one';\nimport { FieldType, formattedValueToString, getFieldDisplayName } from '@grafana/data';\nimport { BarGaugeCell } from './BarGaugeCell';\nimport { DefaultCell } from './DefaultCell';\nimport { getFooterValue } from './FooterRow';\nimport { GeoCell } from './GeoCell';\nimport { ImageCell } from './ImageCell';\nimport { JSONViewCell } from './JSONViewCell';\nimport { TableCellDisplayMode } from './types';\nexport function getTextAlign(field) {\n  if (!field) {\n    return 'flex-start';\n  }\n\n  if (field.config.custom) {\n    const custom = field.config.custom;\n\n    switch (custom.align) {\n      case 'right':\n        return 'flex-end';\n\n      case 'left':\n        return 'flex-start';\n\n      case 'center':\n        return 'center';\n    }\n  }\n\n  if (field.type === FieldType.number) {\n    return 'flex-end';\n  }\n\n  return 'flex-start';\n}\nexport function getColumns(data, availableWidth, columnMinWidth, footerValues) {\n  const columns = [];\n  let fieldCountWithoutWidth = 0;\n\n  for (const [fieldIndex, field] of data.fields.entries()) {\n    var _fieldTableOptions$mi;\n\n    const fieldTableOptions = field.config.custom || {};\n\n    if (fieldTableOptions.hidden) {\n      continue;\n    }\n\n    if (fieldTableOptions.width) {\n      availableWidth -= fieldTableOptions.width;\n    } else {\n      fieldCountWithoutWidth++;\n    }\n\n    const selectSortType = type => {\n      switch (type) {\n        case FieldType.number:\n          return 'number';\n\n        case FieldType.time:\n          return 'basic';\n\n        default:\n          return 'alphanumeric-insensitive';\n      }\n    };\n\n    const Cell = getCellComponent(fieldTableOptions.displayMode, field);\n    columns.push({\n      Cell,\n      id: fieldIndex.toString(),\n      field: field,\n      Header: getFieldDisplayName(field, data),\n      accessor: (row, i) => {\n        return field.values.get(i);\n      },\n      sortType: selectSortType(field.type),\n      width: fieldTableOptions.width,\n      minWidth: (_fieldTableOptions$mi = fieldTableOptions.minWidth) !== null && _fieldTableOptions$mi !== void 0 ? _fieldTableOptions$mi : columnMinWidth,\n      filter: memoizeOne(filterByValue(field)),\n      justifyContent: getTextAlign(field),\n      Footer: getFooterValue(fieldIndex, footerValues)\n    });\n  } // set columns that are at minimum width\n\n\n  let sharedWidth = availableWidth / fieldCountWithoutWidth;\n\n  for (let i = fieldCountWithoutWidth; i > 0; i--) {\n    for (const column of columns) {\n      if (!column.width && column.minWidth > sharedWidth) {\n        column.width = column.minWidth;\n        availableWidth -= column.width;\n        fieldCountWithoutWidth -= 1;\n        sharedWidth = availableWidth / fieldCountWithoutWidth;\n      }\n    }\n  } // divide up the rest of the space\n\n\n  for (const column of columns) {\n    if (!column.width) {\n      column.width = sharedWidth;\n    }\n\n    column.minWidth = 50;\n  }\n\n  return columns;\n}\nexport function getCellComponent(displayMode, field) {\n  switch (displayMode) {\n    case TableCellDisplayMode.ColorText:\n    case TableCellDisplayMode.ColorBackground:\n      return DefaultCell;\n\n    case TableCellDisplayMode.Image:\n      return ImageCell;\n\n    case TableCellDisplayMode.LcdGauge:\n    case TableCellDisplayMode.BasicGauge:\n    case TableCellDisplayMode.GradientGauge:\n      return BarGaugeCell;\n\n    case TableCellDisplayMode.JSONView:\n      return JSONViewCell;\n  }\n\n  if (field.type === FieldType.geo) {\n    return GeoCell;\n  } // Default or Auto\n\n\n  if (field.type === FieldType.other) {\n    return JSONViewCell;\n  }\n\n  return DefaultCell;\n}\nexport function filterByValue(field) {\n  return function (rows, id, filterValues) {\n    if (rows.length === 0) {\n      return rows;\n    }\n\n    if (!filterValues) {\n      return rows;\n    }\n\n    if (!field) {\n      return rows;\n    }\n\n    return rows.filter(row => {\n      if (!row.values.hasOwnProperty(id)) {\n        return false;\n      }\n\n      const value = rowToFieldValue(row, field);\n      return filterValues.find(filter => filter.value === value) !== undefined;\n    });\n  };\n}\nexport function calculateUniqueFieldValues(rows, field) {\n  if (!field || rows.length === 0) {\n    return {};\n  }\n\n  const set = {};\n\n  for (let index = 0; index < rows.length; index++) {\n    const value = rowToFieldValue(rows[index], field);\n    set[value || '(Blanks)'] = value;\n  }\n\n  return set;\n}\nexport function rowToFieldValue(row, field) {\n  if (!field || !row) {\n    return '';\n  }\n\n  const fieldValue = field.values.get(row.index);\n  const displayValue = field.display ? field.display(fieldValue) : fieldValue;\n  const value = field.display ? formattedValueToString(displayValue) : displayValue;\n  return value;\n}\nexport function valuesToOptions(unique) {\n  return Object.keys(unique).reduce((all, key) => all.concat({\n    value: unique[key],\n    label: key\n  }), []).sort(sortOptions);\n}\nexport function sortOptions(a, b) {\n  if (a.label === undefined && b.label === undefined) {\n    return 0;\n  }\n\n  if (a.label === undefined && b.label !== undefined) {\n    return -1;\n  }\n\n  if (a.label !== undefined && b.label === undefined) {\n    return 1;\n  }\n\n  if (a.label < b.label) {\n    return -1;\n  }\n\n  if (a.label > b.label) {\n    return 1;\n  }\n\n  return 0;\n}\nexport function getFilteredOptions(options, filterValues) {\n  if (!filterValues) {\n    return [];\n  }\n\n  return options.filter(option => filterValues.some(filtered => filtered.value === option.value));\n}\nexport function sortCaseInsensitive(a, b, id) {\n  return String(a.values[id]).localeCompare(String(b.values[id]), undefined, {\n    sensitivity: 'base'\n  });\n} // sortNumber needs to have great performance as it is called a lot\n\nexport function sortNumber(rowA, rowB, id) {\n  const a = toNumber(rowA.values[id]);\n  const b = toNumber(rowB.values[id]);\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction toNumber(value) {\n  if (value === null || value === undefined || value === '' || isNaN(value)) {\n    return Number.NEGATIVE_INFINITY;\n  }\n\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return Number(value);\n}","map":{"version":3,"names":["memoizeOne","FieldType","formattedValueToString","getFieldDisplayName","BarGaugeCell","DefaultCell","getFooterValue","GeoCell","ImageCell","JSONViewCell","TableCellDisplayMode","getTextAlign","field","config","custom","align","type","number","getColumns","data","availableWidth","columnMinWidth","footerValues","columns","fieldCountWithoutWidth","fieldIndex","fields","entries","fieldTableOptions","hidden","width","selectSortType","time","Cell","getCellComponent","displayMode","push","id","toString","Header","accessor","row","i","values","get","sortType","minWidth","filter","filterByValue","justifyContent","Footer","sharedWidth","column","ColorText","ColorBackground","Image","LcdGauge","BasicGauge","GradientGauge","JSONView","geo","other","rows","filterValues","length","hasOwnProperty","value","rowToFieldValue","find","undefined","calculateUniqueFieldValues","set","index","fieldValue","displayValue","display","valuesToOptions","unique","Object","keys","reduce","all","key","concat","label","sort","sortOptions","a","b","getFilteredOptions","options","option","some","filtered","sortCaseInsensitive","String","localeCompare","sensitivity","sortNumber","rowA","rowB","toNumber","isNaN","Number","NEGATIVE_INFINITY"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Table/utils.ts"],"sourcesContent":["import { Property } from 'csstype';\nimport memoizeOne from 'memoize-one';\nimport { Row } from 'react-table';\n\nimport {\n  DataFrame,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getFieldDisplayName,\n  SelectableValue,\n} from '@grafana/data';\n\nimport { BarGaugeCell } from './BarGaugeCell';\nimport { DefaultCell } from './DefaultCell';\nimport { getFooterValue } from './FooterRow';\nimport { GeoCell } from './GeoCell';\nimport { ImageCell } from './ImageCell';\nimport { JSONViewCell } from './JSONViewCell';\nimport { CellComponent, TableCellDisplayMode, TableFieldOptions, FooterItem, GrafanaTableColumn } from './types';\n\nexport function getTextAlign(field?: Field): Property.JustifyContent {\n  if (!field) {\n    return 'flex-start';\n  }\n\n  if (field.config.custom) {\n    const custom = field.config.custom as TableFieldOptions;\n\n    switch (custom.align) {\n      case 'right':\n        return 'flex-end';\n      case 'left':\n        return 'flex-start';\n      case 'center':\n        return 'center';\n    }\n  }\n\n  if (field.type === FieldType.number) {\n    return 'flex-end';\n  }\n\n  return 'flex-start';\n}\n\nexport function getColumns(\n  data: DataFrame,\n  availableWidth: number,\n  columnMinWidth: number,\n  footerValues?: FooterItem[]\n): GrafanaTableColumn[] {\n  const columns: GrafanaTableColumn[] = [];\n  let fieldCountWithoutWidth = 0;\n\n  for (const [fieldIndex, field] of data.fields.entries()) {\n    const fieldTableOptions = (field.config.custom || {}) as TableFieldOptions;\n\n    if (fieldTableOptions.hidden) {\n      continue;\n    }\n\n    if (fieldTableOptions.width) {\n      availableWidth -= fieldTableOptions.width;\n    } else {\n      fieldCountWithoutWidth++;\n    }\n\n    const selectSortType = (type: FieldType) => {\n      switch (type) {\n        case FieldType.number:\n          return 'number';\n        case FieldType.time:\n          return 'basic';\n        default:\n          return 'alphanumeric-insensitive';\n      }\n    };\n\n    const Cell = getCellComponent(fieldTableOptions.displayMode, field);\n    columns.push({\n      Cell,\n      id: fieldIndex.toString(),\n      field: field,\n      Header: getFieldDisplayName(field, data),\n      accessor: (row: any, i: number) => {\n        return field.values.get(i);\n      },\n      sortType: selectSortType(field.type),\n      width: fieldTableOptions.width,\n      minWidth: fieldTableOptions.minWidth ?? columnMinWidth,\n      filter: memoizeOne(filterByValue(field)),\n      justifyContent: getTextAlign(field),\n      Footer: getFooterValue(fieldIndex, footerValues),\n    });\n  }\n\n  // set columns that are at minimum width\n  let sharedWidth = availableWidth / fieldCountWithoutWidth;\n  for (let i = fieldCountWithoutWidth; i > 0; i--) {\n    for (const column of columns) {\n      if (!column.width && column.minWidth > sharedWidth) {\n        column.width = column.minWidth;\n        availableWidth -= column.width;\n        fieldCountWithoutWidth -= 1;\n        sharedWidth = availableWidth / fieldCountWithoutWidth;\n      }\n    }\n  }\n\n  // divide up the rest of the space\n  for (const column of columns) {\n    if (!column.width) {\n      column.width = sharedWidth;\n    }\n    column.minWidth = 50;\n  }\n\n  return columns;\n}\n\nexport function getCellComponent(displayMode: TableCellDisplayMode, field: Field): CellComponent {\n  switch (displayMode) {\n    case TableCellDisplayMode.ColorText:\n    case TableCellDisplayMode.ColorBackground:\n      return DefaultCell;\n    case TableCellDisplayMode.Image:\n      return ImageCell;\n    case TableCellDisplayMode.LcdGauge:\n    case TableCellDisplayMode.BasicGauge:\n    case TableCellDisplayMode.GradientGauge:\n      return BarGaugeCell;\n    case TableCellDisplayMode.JSONView:\n      return JSONViewCell;\n  }\n\n  if (field.type === FieldType.geo) {\n    return GeoCell;\n  }\n\n  // Default or Auto\n  if (field.type === FieldType.other) {\n    return JSONViewCell;\n  }\n  return DefaultCell;\n}\n\nexport function filterByValue(field?: Field) {\n  return function (rows: Row[], id: string, filterValues?: SelectableValue[]) {\n    if (rows.length === 0) {\n      return rows;\n    }\n\n    if (!filterValues) {\n      return rows;\n    }\n\n    if (!field) {\n      return rows;\n    }\n\n    return rows.filter((row) => {\n      if (!row.values.hasOwnProperty(id)) {\n        return false;\n      }\n      const value = rowToFieldValue(row, field);\n      return filterValues.find((filter) => filter.value === value) !== undefined;\n    });\n  };\n}\n\nexport function calculateUniqueFieldValues(rows: any[], field?: Field) {\n  if (!field || rows.length === 0) {\n    return {};\n  }\n\n  const set: Record<string, any> = {};\n\n  for (let index = 0; index < rows.length; index++) {\n    const value = rowToFieldValue(rows[index], field);\n    set[value || '(Blanks)'] = value;\n  }\n\n  return set;\n}\n\nexport function rowToFieldValue(row: any, field?: Field): string {\n  if (!field || !row) {\n    return '';\n  }\n\n  const fieldValue = field.values.get(row.index);\n  const displayValue = field.display ? field.display(fieldValue) : fieldValue;\n  const value = field.display ? formattedValueToString(displayValue) : displayValue;\n\n  return value;\n}\n\nexport function valuesToOptions(unique: Record<string, any>): SelectableValue[] {\n  return Object.keys(unique)\n    .reduce((all, key) => all.concat({ value: unique[key], label: key }), [] as SelectableValue[])\n    .sort(sortOptions);\n}\n\nexport function sortOptions(a: SelectableValue, b: SelectableValue): number {\n  if (a.label === undefined && b.label === undefined) {\n    return 0;\n  }\n\n  if (a.label === undefined && b.label !== undefined) {\n    return -1;\n  }\n\n  if (a.label !== undefined && b.label === undefined) {\n    return 1;\n  }\n\n  if (a.label! < b.label!) {\n    return -1;\n  }\n\n  if (a.label! > b.label!) {\n    return 1;\n  }\n\n  return 0;\n}\n\nexport function getFilteredOptions(options: SelectableValue[], filterValues?: SelectableValue[]): SelectableValue[] {\n  if (!filterValues) {\n    return [];\n  }\n\n  return options.filter((option) => filterValues.some((filtered) => filtered.value === option.value));\n}\n\nexport function sortCaseInsensitive(a: Row<any>, b: Row<any>, id: string) {\n  return String(a.values[id]).localeCompare(String(b.values[id]), undefined, { sensitivity: 'base' });\n}\n\n// sortNumber needs to have great performance as it is called a lot\nexport function sortNumber(rowA: Row<any>, rowB: Row<any>, id: string) {\n  const a = toNumber(rowA.values[id]);\n  const b = toNumber(rowB.values[id]);\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction toNumber(value: any): number {\n  if (value === null || value === undefined || value === '' || isNaN(value)) {\n    return Number.NEGATIVE_INFINITY;\n  }\n\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return Number(value);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}