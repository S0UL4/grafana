{"ast":null,"code":"import { from, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { shouldUseLegacyRunner } from 'app/features/annotations/standardAnnotationSupport';\nimport { handleAnnotationQueryRunnerError } from './utils';\nexport class LegacyAnnotationQueryRunner {\n  canRun(datasource) {\n    if (!datasource) {\n      return false;\n    }\n\n    if (shouldUseLegacyRunner(datasource)) {\n      return true;\n    }\n\n    return Boolean(datasource.annotationQuery && !datasource.annotations);\n  }\n\n  run({\n    annotation,\n    datasource,\n    dashboard,\n    range\n  }) {\n    if (!this.canRun(datasource)) {\n      return of([]);\n    }\n\n    return from(datasource.annotationQuery({\n      range,\n      rangeRaw: range.raw,\n      annotation,\n      dashboard\n    })).pipe(catchError(handleAnnotationQueryRunnerError));\n  }\n\n}","map":{"version":3,"names":["from","of","catchError","shouldUseLegacyRunner","handleAnnotationQueryRunnerError","LegacyAnnotationQueryRunner","canRun","datasource","Boolean","annotationQuery","annotations","run","annotation","dashboard","range","rangeRaw","raw","pipe"],"sources":["/home/soula/grafana/public/app/features/query/state/DashboardQueryRunner/LegacyAnnotationQueryRunner.ts"],"sourcesContent":["import { from, Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AnnotationEvent, DataSourceApi } from '@grafana/data';\nimport { shouldUseLegacyRunner } from 'app/features/annotations/standardAnnotationSupport';\n\nimport { AnnotationQueryRunner, AnnotationQueryRunnerOptions } from './types';\nimport { handleAnnotationQueryRunnerError } from './utils';\n\nexport class LegacyAnnotationQueryRunner implements AnnotationQueryRunner {\n  canRun(datasource?: DataSourceApi): boolean {\n    if (!datasource) {\n      return false;\n    }\n\n    if (shouldUseLegacyRunner(datasource)) {\n      return true;\n    }\n\n    return Boolean(datasource.annotationQuery && !datasource.annotations);\n  }\n\n  run({ annotation, datasource, dashboard, range }: AnnotationQueryRunnerOptions): Observable<AnnotationEvent[]> {\n    if (!this.canRun(datasource)) {\n      return of([]);\n    }\n\n    return from(datasource!.annotationQuery!({ range, rangeRaw: range.raw, annotation, dashboard })).pipe(\n      catchError(handleAnnotationQueryRunnerError)\n    );\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAT,EAA2BC,EAA3B,QAAqC,MAArC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAGA,SAASC,qBAAT,QAAsC,oDAAtC;AAGA,SAASC,gCAAT,QAAiD,SAAjD;AAEA,OAAO,MAAMC,2BAAN,CAAmE;EACxEC,MAAM,CAACC,UAAD,EAAsC;IAC1C,IAAI,CAACA,UAAL,EAAiB;MACf,OAAO,KAAP;IACD;;IAED,IAAIJ,qBAAqB,CAACI,UAAD,CAAzB,EAAuC;MACrC,OAAO,IAAP;IACD;;IAED,OAAOC,OAAO,CAACD,UAAU,CAACE,eAAX,IAA8B,CAACF,UAAU,CAACG,WAA3C,CAAd;EACD;;EAEDC,GAAG,CAAC;IAAEC,UAAF;IAAcL,UAAd;IAA0BM,SAA1B;IAAqCC;EAArC,CAAD,EAA4G;IAC7G,IAAI,CAAC,KAAKR,MAAL,CAAYC,UAAZ,CAAL,EAA8B;MAC5B,OAAON,EAAE,CAAC,EAAD,CAAT;IACD;;IAED,OAAOD,IAAI,CAACO,UAAU,CAAEE,eAAZ,CAA6B;MAAEK,KAAF;MAASC,QAAQ,EAAED,KAAK,CAACE,GAAzB;MAA8BJ,UAA9B;MAA0CC;IAA1C,CAA7B,CAAD,CAAJ,CAA0FI,IAA1F,CACLf,UAAU,CAACE,gCAAD,CADL,CAAP;EAGD;;AArBuE"},"metadata":{},"sourceType":"module"}