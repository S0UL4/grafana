{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { css, cx } from '@emotion/css';\nimport * as React from 'react';\nimport { stylesFactory } from '@grafana/ui';\nimport DraggableManager from '../../utils/DraggableManager';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n// exported for testing\nexport const getStyles = stylesFactory(() => {\n  return {\n    TimelineViewingLayer: css`\n      label: TimelineViewingLayer;\n      bottom: 0;\n      cursor: vertical-text;\n      left: 0;\n      position: absolute;\n      right: 0;\n      top: 0;\n    `,\n    TimelineViewingLayerCursorGuide: css`\n      label: TimelineViewingLayerCursorGuide;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      width: 1px;\n      background-color: red;\n    `,\n    TimelineViewingLayerDragged: css`\n      label: TimelineViewingLayerDragged;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n    `,\n    TimelineViewingLayerDraggedDraggingLeft: css`\n      label: TimelineViewingLayerDraggedDraggingLeft;\n      border-left: 1px solid;\n    `,\n    TimelineViewingLayerDraggedDraggingRight: css`\n      label: TimelineViewingLayerDraggedDraggingRight;\n      border-right: 1px solid;\n    `,\n    TimelineViewingLayerDraggedShiftDrag: css`\n      label: TimelineViewingLayerDraggedShiftDrag;\n      background-color: rgba(68, 68, 255, 0.2);\n      border-color: #44f;\n    `,\n    TimelineViewingLayerDraggedReframeDrag: css`\n      label: TimelineViewingLayerDraggedReframeDrag;\n      background-color: rgba(255, 68, 68, 0.2);\n      border-color: #f44;\n    `,\n    TimelineViewingLayerFullOverlay: css`\n      label: TimelineViewingLayerFullOverlay;\n      bottom: 0;\n      cursor: col-resize;\n      left: 0;\n      position: fixed;\n      right: 0;\n      top: 0;\n      user-select: none;\n    `\n  };\n});\n\nfunction isOutOfView(layout) {\n  return Reflect.has(layout, 'isOutOfView');\n}\n/**\n * Map from a sub range to the greater view range, e.g, when the view range is\n * the middle half ([0.25, 0.75]), a value of 0.25 befomes 3/8.\n * @returns {number}\n */\n\n\nfunction mapFromViewSubRange(viewStart, viewEnd, value) {\n  return viewStart + value * (viewEnd - viewStart);\n}\n/**\n * Map a value from the view ([0, 1]) to a sub-range, e.g, when the view range is\n * the middle half ([0.25, 0.75]), a value of 3/8 becomes 1/4.\n * @returns {number}\n */\n\n\nfunction mapToViewSubRange(viewStart, viewEnd, value) {\n  return (value - viewStart) / (viewEnd - viewStart);\n}\n/**\n * Get the layout for the \"next\" view range time, e.g. the difference from the\n * drag start and the drag end. This is driven by `shiftStart`, `shiftEnd` or\n * `reframe` on `props.viewRangeTime`, not by the current state of the\n * component. So, it reflects in-progress dragging from the span minimap.\n */\n\n\nfunction getNextViewLayout(start, position) {\n  let [left, right] = start < position ? [start, position] : [position, start];\n\n  if (left >= 1 || right <= 0) {\n    return {\n      isOutOfView: true\n    };\n  }\n\n  if (left < 0) {\n    left = 0;\n  }\n\n  if (right > 1) {\n    right = 1;\n  }\n\n  return {\n    isDraggingLeft: start > position,\n    left: `${left * 100}%`,\n    width: `${(right - left) * 100}%`\n  };\n}\n/**\n * Render the visual indication of the \"next\" view range.\n */\n\n\nfunction getMarkers(viewStart, viewEnd, from, to, isShift) {\n  const mappedFrom = mapToViewSubRange(viewStart, viewEnd, from);\n  const mappedTo = mapToViewSubRange(viewStart, viewEnd, to);\n  const layout = getNextViewLayout(mappedFrom, mappedTo);\n\n  if (isOutOfView(layout)) {\n    return null;\n  }\n\n  const {\n    isDraggingLeft,\n    left,\n    width\n  } = layout;\n  const styles = getStyles();\n  const cls = cx({\n    [styles.TimelineViewingLayerDraggedDraggingRight]: !isDraggingLeft,\n    [styles.TimelineViewingLayerDraggedReframeDrag]: !isShift,\n    [styles.TimelineViewingLayerDraggedShiftDrag]: isShift\n  });\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: cx(styles.TimelineViewingLayerDragged, styles.TimelineViewingLayerDraggedDraggingLeft, cls),\n    style: {\n      left,\n      width\n    },\n    \"data-test-id\": \"Dragged\"\n  });\n}\n/**\n * `TimelineViewingLayer` is rendered on top of the TimelineHeaderRow time\n * labels; it handles showing the current view range and handles mouse UX for\n * modifying it.\n */\n\n\nexport default class TimelineViewingLayer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_draggerReframe\", void 0);\n\n    _defineProperty(this, \"_root\", void 0);\n\n    _defineProperty(this, \"_setRoot\", elm => {\n      this._root = elm;\n    });\n\n    _defineProperty(this, \"_getDraggingBounds\", () => {\n      if (!this._root) {\n        throw new Error('invalid state');\n      }\n\n      const {\n        left: clientXLeft,\n        width\n      } = this._root.getBoundingClientRect();\n\n      return {\n        clientXLeft,\n        width\n      };\n    });\n\n    _defineProperty(this, \"_handleReframeMouseMove\", ({\n      value\n    }) => {\n      const [viewStart, viewEnd] = this.props.viewRangeTime.current;\n      const cursor = mapFromViewSubRange(viewStart, viewEnd, value);\n      this.props.updateNextViewRangeTime({\n        cursor\n      });\n    });\n\n    _defineProperty(this, \"_handleReframeMouseLeave\", () => {\n      this.props.updateNextViewRangeTime({\n        cursor: undefined\n      });\n    });\n\n    _defineProperty(this, \"_handleReframeDragUpdate\", ({\n      value\n    }) => {\n      const {\n        current,\n        reframe\n      } = this.props.viewRangeTime;\n      const [viewStart, viewEnd] = current;\n      const shift = mapFromViewSubRange(viewStart, viewEnd, value);\n      const anchor = reframe ? reframe.anchor : shift;\n      const update = {\n        reframe: {\n          anchor,\n          shift\n        }\n      };\n      this.props.updateNextViewRangeTime(update);\n    });\n\n    _defineProperty(this, \"_handleReframeDragEnd\", ({\n      manager,\n      value\n    }) => {\n      const {\n        current,\n        reframe\n      } = this.props.viewRangeTime;\n      const [viewStart, viewEnd] = current;\n      const shift = mapFromViewSubRange(viewStart, viewEnd, value);\n      const anchor = reframe ? reframe.anchor : shift;\n      const [start, end] = shift < anchor ? [shift, anchor] : [anchor, shift];\n      manager.resetBounds();\n      this.props.updateViewRangeTime(start, end, 'timeline-header');\n    });\n\n    this._draggerReframe = new DraggableManager({\n      getBounds: this._getDraggingBounds,\n      onDragEnd: this._handleReframeDragEnd,\n      onDragMove: this._handleReframeDragUpdate,\n      onDragStart: this._handleReframeDragUpdate,\n      onMouseLeave: this._handleReframeMouseLeave,\n      onMouseMove: this._handleReframeMouseMove\n    });\n    this._root = undefined;\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {\n      boundsInvalidator\n    } = this.props;\n\n    if (boundsInvalidator !== nextProps.boundsInvalidator) {\n      this._draggerReframe.resetBounds();\n    }\n  }\n\n  componentWillUnmount() {\n    this._draggerReframe.dispose();\n  }\n\n  render() {\n    const {\n      viewRangeTime\n    } = this.props;\n    const {\n      current,\n      cursor,\n      reframe,\n      shiftEnd,\n      shiftStart\n    } = viewRangeTime;\n    const [viewStart, viewEnd] = current;\n    const haveNextTimeRange = reframe != null || shiftEnd != null || shiftStart != null;\n    let cusrorPosition;\n\n    if (!haveNextTimeRange && cursor != null && cursor >= viewStart && cursor <= viewEnd) {\n      cusrorPosition = `${mapToViewSubRange(viewStart, viewEnd, cursor) * 100}%`;\n    }\n\n    const styles = getStyles();\n    return /*#__PURE__*/_jsxs(\"div\", {\n      \"aria-hidden\": true,\n      className: styles.TimelineViewingLayer,\n      ref: this._setRoot,\n      onMouseDown: this._draggerReframe.handleMouseDown,\n      onMouseLeave: this._draggerReframe.handleMouseLeave,\n      onMouseMove: this._draggerReframe.handleMouseMove,\n      \"data-test-id\": \"TimelineViewingLayer\",\n      children: [cusrorPosition != null && /*#__PURE__*/_jsx(\"div\", {\n        className: styles.TimelineViewingLayerCursorGuide,\n        style: {\n          left: cusrorPosition\n        },\n        \"data-test-id\": \"TimelineViewingLayer--cursorGuide\"\n      }), reframe != null && getMarkers(viewStart, viewEnd, reframe.anchor, reframe.shift, false), shiftEnd != null && getMarkers(viewStart, viewEnd, viewEnd, shiftEnd, true), shiftStart != null && getMarkers(viewStart, viewEnd, viewStart, shiftStart, true)]\n    });\n  }\n\n}","map":{"version":3,"names":["css","cx","React","stylesFactory","DraggableManager","getStyles","TimelineViewingLayer","TimelineViewingLayerCursorGuide","TimelineViewingLayerDragged","TimelineViewingLayerDraggedDraggingLeft","TimelineViewingLayerDraggedDraggingRight","TimelineViewingLayerDraggedShiftDrag","TimelineViewingLayerDraggedReframeDrag","TimelineViewingLayerFullOverlay","isOutOfView","layout","Reflect","has","mapFromViewSubRange","viewStart","viewEnd","value","mapToViewSubRange","getNextViewLayout","start","position","left","right","isDraggingLeft","width","getMarkers","from","to","isShift","mappedFrom","mappedTo","styles","cls","PureComponent","constructor","props","elm","_root","Error","clientXLeft","getBoundingClientRect","viewRangeTime","current","cursor","updateNextViewRangeTime","undefined","reframe","shift","anchor","update","manager","end","resetBounds","updateViewRangeTime","_draggerReframe","getBounds","_getDraggingBounds","onDragEnd","_handleReframeDragEnd","onDragMove","_handleReframeDragUpdate","onDragStart","onMouseLeave","_handleReframeMouseLeave","onMouseMove","_handleReframeMouseMove","UNSAFE_componentWillReceiveProps","nextProps","boundsInvalidator","componentWillUnmount","dispose","render","shiftEnd","shiftStart","haveNextTimeRange","cusrorPosition","_setRoot","handleMouseDown","handleMouseLeave","handleMouseMove"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/TraceTimelineViewer/TimelineHeaderRow/TimelineViewingLayer.tsx"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { css, cx } from '@emotion/css';\nimport * as React from 'react';\n\nimport { stylesFactory } from '@grafana/ui';\n\nimport { TNil } from '../../types';\nimport DraggableManager, { DraggableBounds, DraggingUpdate } from '../../utils/DraggableManager';\nimport { TUpdateViewRangeTimeFunction, ViewRangeTime, ViewRangeTimeUpdate } from '../types';\n\n// exported for testing\nexport const getStyles = stylesFactory(() => {\n  return {\n    TimelineViewingLayer: css`\n      label: TimelineViewingLayer;\n      bottom: 0;\n      cursor: vertical-text;\n      left: 0;\n      position: absolute;\n      right: 0;\n      top: 0;\n    `,\n    TimelineViewingLayerCursorGuide: css`\n      label: TimelineViewingLayerCursorGuide;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      width: 1px;\n      background-color: red;\n    `,\n    TimelineViewingLayerDragged: css`\n      label: TimelineViewingLayerDragged;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n    `,\n    TimelineViewingLayerDraggedDraggingLeft: css`\n      label: TimelineViewingLayerDraggedDraggingLeft;\n      border-left: 1px solid;\n    `,\n    TimelineViewingLayerDraggedDraggingRight: css`\n      label: TimelineViewingLayerDraggedDraggingRight;\n      border-right: 1px solid;\n    `,\n    TimelineViewingLayerDraggedShiftDrag: css`\n      label: TimelineViewingLayerDraggedShiftDrag;\n      background-color: rgba(68, 68, 255, 0.2);\n      border-color: #44f;\n    `,\n    TimelineViewingLayerDraggedReframeDrag: css`\n      label: TimelineViewingLayerDraggedReframeDrag;\n      background-color: rgba(255, 68, 68, 0.2);\n      border-color: #f44;\n    `,\n    TimelineViewingLayerFullOverlay: css`\n      label: TimelineViewingLayerFullOverlay;\n      bottom: 0;\n      cursor: col-resize;\n      left: 0;\n      position: fixed;\n      right: 0;\n      top: 0;\n      user-select: none;\n    `,\n  };\n});\n\ntype TimelineViewingLayerProps = {\n  /**\n   * `boundsInvalidator` is an arbitrary prop that lets the component know the\n   * bounds for dragging need to be recalculated. In practice, the name column\n   * width serves fine for this.\n   */\n  boundsInvalidator: any | null | undefined;\n  updateNextViewRangeTime: (update: ViewRangeTimeUpdate) => void;\n  updateViewRangeTime: TUpdateViewRangeTimeFunction;\n  viewRangeTime: ViewRangeTime;\n};\n\ntype TDraggingLeftLayout = {\n  isDraggingLeft: boolean;\n  left: string;\n  width: string;\n};\n\ntype TOutOfViewLayout = {\n  isOutOfView: true;\n};\n\nfunction isOutOfView(layout: TDraggingLeftLayout | TOutOfViewLayout): layout is TOutOfViewLayout {\n  return Reflect.has(layout, 'isOutOfView');\n}\n\n/**\n * Map from a sub range to the greater view range, e.g, when the view range is\n * the middle half ([0.25, 0.75]), a value of 0.25 befomes 3/8.\n * @returns {number}\n */\nfunction mapFromViewSubRange(viewStart: number, viewEnd: number, value: number) {\n  return viewStart + value * (viewEnd - viewStart);\n}\n\n/**\n * Map a value from the view ([0, 1]) to a sub-range, e.g, when the view range is\n * the middle half ([0.25, 0.75]), a value of 3/8 becomes 1/4.\n * @returns {number}\n */\nfunction mapToViewSubRange(viewStart: number, viewEnd: number, value: number) {\n  return (value - viewStart) / (viewEnd - viewStart);\n}\n\n/**\n * Get the layout for the \"next\" view range time, e.g. the difference from the\n * drag start and the drag end. This is driven by `shiftStart`, `shiftEnd` or\n * `reframe` on `props.viewRangeTime`, not by the current state of the\n * component. So, it reflects in-progress dragging from the span minimap.\n */\nfunction getNextViewLayout(start: number, position: number): TDraggingLeftLayout | TOutOfViewLayout {\n  let [left, right] = start < position ? [start, position] : [position, start];\n  if (left >= 1 || right <= 0) {\n    return { isOutOfView: true };\n  }\n  if (left < 0) {\n    left = 0;\n  }\n  if (right > 1) {\n    right = 1;\n  }\n  return {\n    isDraggingLeft: start > position,\n    left: `${left * 100}%`,\n    width: `${(right - left) * 100}%`,\n  };\n}\n\n/**\n * Render the visual indication of the \"next\" view range.\n */\nfunction getMarkers(viewStart: number, viewEnd: number, from: number, to: number, isShift: boolean): React.ReactNode {\n  const mappedFrom = mapToViewSubRange(viewStart, viewEnd, from);\n  const mappedTo = mapToViewSubRange(viewStart, viewEnd, to);\n  const layout = getNextViewLayout(mappedFrom, mappedTo);\n  if (isOutOfView(layout)) {\n    return null;\n  }\n  const { isDraggingLeft, left, width } = layout;\n  const styles = getStyles();\n  const cls = cx({\n    [styles.TimelineViewingLayerDraggedDraggingRight]: !isDraggingLeft,\n    [styles.TimelineViewingLayerDraggedReframeDrag]: !isShift,\n    [styles.TimelineViewingLayerDraggedShiftDrag]: isShift,\n  });\n  return (\n    <div\n      className={cx(styles.TimelineViewingLayerDragged, styles.TimelineViewingLayerDraggedDraggingLeft, cls)}\n      style={{ left, width }}\n      data-test-id=\"Dragged\"\n    />\n  );\n}\n\n/**\n * `TimelineViewingLayer` is rendered on top of the TimelineHeaderRow time\n * labels; it handles showing the current view range and handles mouse UX for\n * modifying it.\n */\nexport default class TimelineViewingLayer extends React.PureComponent<TimelineViewingLayerProps> {\n  _draggerReframe: DraggableManager;\n  _root: Element | TNil;\n\n  constructor(props: TimelineViewingLayerProps) {\n    super(props);\n    this._draggerReframe = new DraggableManager({\n      getBounds: this._getDraggingBounds,\n      onDragEnd: this._handleReframeDragEnd,\n      onDragMove: this._handleReframeDragUpdate,\n      onDragStart: this._handleReframeDragUpdate,\n      onMouseLeave: this._handleReframeMouseLeave,\n      onMouseMove: this._handleReframeMouseMove,\n    });\n    this._root = undefined;\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: TimelineViewingLayerProps) {\n    const { boundsInvalidator } = this.props;\n    if (boundsInvalidator !== nextProps.boundsInvalidator) {\n      this._draggerReframe.resetBounds();\n    }\n  }\n\n  componentWillUnmount() {\n    this._draggerReframe.dispose();\n  }\n\n  _setRoot = (elm: Element | TNil) => {\n    this._root = elm;\n  };\n\n  _getDraggingBounds = (): DraggableBounds => {\n    if (!this._root) {\n      throw new Error('invalid state');\n    }\n    const { left: clientXLeft, width } = this._root.getBoundingClientRect();\n    return { clientXLeft, width };\n  };\n\n  _handleReframeMouseMove = ({ value }: DraggingUpdate) => {\n    const [viewStart, viewEnd] = this.props.viewRangeTime.current;\n    const cursor = mapFromViewSubRange(viewStart, viewEnd, value);\n    this.props.updateNextViewRangeTime({ cursor });\n  };\n\n  _handleReframeMouseLeave = () => {\n    this.props.updateNextViewRangeTime({ cursor: undefined });\n  };\n\n  _handleReframeDragUpdate = ({ value }: DraggingUpdate) => {\n    const { current, reframe } = this.props.viewRangeTime;\n    const [viewStart, viewEnd] = current;\n    const shift = mapFromViewSubRange(viewStart, viewEnd, value);\n    const anchor = reframe ? reframe.anchor : shift;\n    const update = { reframe: { anchor, shift } };\n    this.props.updateNextViewRangeTime(update);\n  };\n\n  _handleReframeDragEnd = ({ manager, value }: DraggingUpdate) => {\n    const { current, reframe } = this.props.viewRangeTime;\n    const [viewStart, viewEnd] = current;\n    const shift = mapFromViewSubRange(viewStart, viewEnd, value);\n    const anchor = reframe ? reframe.anchor : shift;\n    const [start, end] = shift < anchor ? [shift, anchor] : [anchor, shift];\n    manager.resetBounds();\n    this.props.updateViewRangeTime(start, end, 'timeline-header');\n  };\n\n  render() {\n    const { viewRangeTime } = this.props;\n    const { current, cursor, reframe, shiftEnd, shiftStart } = viewRangeTime;\n    const [viewStart, viewEnd] = current;\n    const haveNextTimeRange = reframe != null || shiftEnd != null || shiftStart != null;\n    let cusrorPosition: string | TNil;\n    if (!haveNextTimeRange && cursor != null && cursor >= viewStart && cursor <= viewEnd) {\n      cusrorPosition = `${mapToViewSubRange(viewStart, viewEnd, cursor) * 100}%`;\n    }\n    const styles = getStyles();\n    return (\n      <div\n        aria-hidden\n        className={styles.TimelineViewingLayer}\n        ref={this._setRoot}\n        onMouseDown={this._draggerReframe.handleMouseDown}\n        onMouseLeave={this._draggerReframe.handleMouseLeave}\n        onMouseMove={this._draggerReframe.handleMouseMove}\n        data-test-id=\"TimelineViewingLayer\"\n      >\n        {cusrorPosition != null && (\n          <div\n            className={styles.TimelineViewingLayerCursorGuide}\n            style={{ left: cusrorPosition }}\n            data-test-id=\"TimelineViewingLayer--cursorGuide\"\n          />\n        )}\n        {reframe != null && getMarkers(viewStart, viewEnd, reframe.anchor, reframe.shift, false)}\n        {shiftEnd != null && getMarkers(viewStart, viewEnd, viewEnd, shiftEnd, true)}\n        {shiftStart != null && getMarkers(viewStart, viewEnd, viewStart, shiftStart, true)}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}