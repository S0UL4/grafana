{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { toOption } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { fuzzyMatch, InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\nimport { transformToLogfmt } from '../util';\nimport { AdvancedOptions } from './AdvancedOptions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const ALL_OPERATIONS_KEY = 'All';\nconst allOperationsOption = {\n  label: ALL_OPERATIONS_KEY,\n  value: undefined\n};\nexport function SearchForm({\n  datasource,\n  query,\n  onChange\n}) {\n  const [serviceOptions, setServiceOptions] = useState();\n  const [operationOptions, setOperationOptions] = useState();\n  const [isLoading, setIsLoading] = useState({\n    services: false,\n    operations: false\n  });\n  const loadOptions = useCallback(async (url, loaderOfType, query = '') => {\n    setIsLoading(prevValue => Object.assign({}, prevValue, {\n      [loaderOfType]: true\n    }));\n\n    try {\n      const values = await datasource.metadataRequest(url);\n\n      if (!values) {\n        return [{\n          label: `No ${loaderOfType} found`,\n          value: `No ${loaderOfType} found`\n        }];\n      }\n\n      const options = values.sort().map(option => ({\n        label: option,\n        value: option\n      }));\n      const filteredOptions = options.filter(item => item.value ? fuzzyMatch(item.value, query).found : false);\n      return filteredOptions;\n    } catch (error) {\n      if (error instanceof Error) {\n        dispatch(notifyApp(createErrorNotification('Error', error)));\n      }\n\n      return [];\n    } finally {\n      setIsLoading(prevValue => Object.assign({}, prevValue, {\n        [loaderOfType]: false\n      }));\n    }\n  }, [datasource]);\n  useEffect(() => {\n    const getServices = async () => {\n      const services = await loadOptions('/api/services', 'services');\n\n      if (query.service && getTemplateSrv().containsTemplate(query.service)) {\n        services.push(toOption(query.service));\n      }\n\n      setServiceOptions(services);\n    };\n\n    getServices();\n  }, [datasource, loadOptions, query.service]);\n  useEffect(() => {\n    const getOperations = async () => {\n      const operations = await loadOptions(`/api/services/${encodeURIComponent(getTemplateSrv().replace(query.service))}/operations`, 'operations');\n\n      if (query.operation && getTemplateSrv().containsTemplate(query.operation)) {\n        operations.push(toOption(query.operation));\n      }\n\n      setOperationOptions([allOperationsOption, ...operations]);\n    };\n\n    if (query.service) {\n      getOperations();\n    }\n  }, [datasource, query.service, loadOptions, query.operation]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: css({\n      maxWidth: '500px'\n    }),\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Service\",\n        labelWidth: 14,\n        grow: true,\n        children: /*#__PURE__*/_jsx(Select, {\n          inputId: \"service\",\n          options: serviceOptions,\n          onOpenMenu: () => loadOptions('/api/services', 'services'),\n          isLoading: isLoading.services,\n          value: (serviceOptions === null || serviceOptions === void 0 ? void 0 : serviceOptions.find(v => (v === null || v === void 0 ? void 0 : v.value) === query.service)) || undefined,\n          onChange: v => onChange(Object.assign({}, query, {\n            service: v === null || v === void 0 ? void 0 : v.value,\n            operation: query.service !== (v === null || v === void 0 ? void 0 : v.value) ? undefined : query.operation\n          })),\n          menuPlacement: \"bottom\",\n          isClearable: true,\n          \"aria-label\": 'select-service-name',\n          allowCustomValue: true\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Operation\",\n        labelWidth: 14,\n        grow: true,\n        disabled: !query.service,\n        children: /*#__PURE__*/_jsx(Select, {\n          inputId: \"operation\",\n          options: operationOptions,\n          onOpenMenu: () => loadOptions(`/api/services/${encodeURIComponent(getTemplateSrv().replace(query.service))}/operations`, 'operations'),\n          isLoading: isLoading.operations,\n          value: (operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.find(v => v.value === query.operation)) || null,\n          onChange: v => onChange(Object.assign({}, query, {\n            operation: (v === null || v === void 0 ? void 0 : v.value) || undefined\n          })),\n          menuPlacement: \"bottom\",\n          isClearable: true,\n          \"aria-label\": 'select-operation-name',\n          allowCustomValue: true\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Tags\",\n        labelWidth: 14,\n        grow: true,\n        children: /*#__PURE__*/_jsx(Input, {\n          id: \"tags\",\n          value: transformToLogfmt(query.tags),\n          placeholder: \"http.status_code=200 error=true\",\n          onChange: v => onChange(Object.assign({}, query, {\n            tags: v.currentTarget.value\n          }))\n        })\n      })\n    }), /*#__PURE__*/_jsx(AdvancedOptions, {\n      query: query,\n      onChange: onChange\n    })]\n  });\n}\nexport default SearchForm;","map":{"version":3,"names":["css","React","useCallback","useEffect","useState","toOption","getTemplateSrv","fuzzyMatch","InlineField","InlineFieldRow","Input","Select","notifyApp","createErrorNotification","dispatch","transformToLogfmt","AdvancedOptions","ALL_OPERATIONS_KEY","allOperationsOption","label","value","undefined","SearchForm","datasource","query","onChange","serviceOptions","setServiceOptions","operationOptions","setOperationOptions","isLoading","setIsLoading","services","operations","loadOptions","url","loaderOfType","prevValue","values","metadataRequest","options","sort","map","option","filteredOptions","filter","item","found","error","Error","getServices","service","containsTemplate","push","getOperations","encodeURIComponent","replace","operation","maxWidth","find","v","tags","currentTarget"],"sources":["/home/soula/grafana/public/app/plugins/datasource/jaeger/components/SearchForm.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { fuzzyMatch, InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { JaegerDatasource } from '../datasource';\nimport { JaegerQuery } from '../types';\nimport { transformToLogfmt } from '../util';\n\nimport { AdvancedOptions } from './AdvancedOptions';\n\ntype Props = {\n  datasource: JaegerDatasource;\n  query: JaegerQuery;\n  onChange: (value: JaegerQuery) => void;\n};\n\nexport const ALL_OPERATIONS_KEY = 'All';\nconst allOperationsOption: SelectableValue<string> = {\n  label: ALL_OPERATIONS_KEY,\n  value: undefined,\n};\n\nexport function SearchForm({ datasource, query, onChange }: Props) {\n  const [serviceOptions, setServiceOptions] = useState<Array<SelectableValue<string>>>();\n  const [operationOptions, setOperationOptions] = useState<Array<SelectableValue<string>>>();\n  const [isLoading, setIsLoading] = useState<{\n    services: boolean;\n    operations: boolean;\n  }>({\n    services: false,\n    operations: false,\n  });\n\n  const loadOptions = useCallback(\n    async (url: string, loaderOfType: string, query = ''): Promise<Array<SelectableValue<string>>> => {\n      setIsLoading((prevValue) => ({ ...prevValue, [loaderOfType]: true }));\n\n      try {\n        const values: string[] | null = await datasource.metadataRequest(url);\n        if (!values) {\n          return [{ label: `No ${loaderOfType} found`, value: `No ${loaderOfType} found` }];\n        }\n\n        const options: SelectableValue[] = values.sort().map((option) => ({\n          label: option,\n          value: option,\n        }));\n\n        const filteredOptions = options.filter((item) => (item.value ? fuzzyMatch(item.value, query).found : false));\n        return filteredOptions;\n      } catch (error) {\n        if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n        return [];\n      } finally {\n        setIsLoading((prevValue) => ({ ...prevValue, [loaderOfType]: false }));\n      }\n    },\n    [datasource]\n  );\n\n  useEffect(() => {\n    const getServices = async () => {\n      const services = await loadOptions('/api/services', 'services');\n      if (query.service && getTemplateSrv().containsTemplate(query.service)) {\n        services.push(toOption(query.service));\n      }\n      setServiceOptions(services);\n    };\n    getServices();\n  }, [datasource, loadOptions, query.service]);\n\n  useEffect(() => {\n    const getOperations = async () => {\n      const operations = await loadOptions(\n        `/api/services/${encodeURIComponent(getTemplateSrv().replace(query.service!))}/operations`,\n        'operations'\n      );\n      if (query.operation && getTemplateSrv().containsTemplate(query.operation)) {\n        operations.push(toOption(query.operation));\n      }\n      setOperationOptions([allOperationsOption, ...operations]);\n    };\n    if (query.service) {\n      getOperations();\n    }\n  }, [datasource, query.service, loadOptions, query.operation]);\n\n  return (\n    <div className={css({ maxWidth: '500px' })}>\n      <InlineFieldRow>\n        <InlineField label=\"Service\" labelWidth={14} grow>\n          <Select\n            inputId=\"service\"\n            options={serviceOptions}\n            onOpenMenu={() => loadOptions('/api/services', 'services')}\n            isLoading={isLoading.services}\n            value={serviceOptions?.find((v) => v?.value === query.service) || undefined}\n            onChange={(v) =>\n              onChange({\n                ...query,\n                service: v?.value!,\n                operation: query.service !== v?.value ? undefined : query.operation,\n              })\n            }\n            menuPlacement=\"bottom\"\n            isClearable\n            aria-label={'select-service-name'}\n            allowCustomValue={true}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Operation\" labelWidth={14} grow disabled={!query.service}>\n          <Select\n            inputId=\"operation\"\n            options={operationOptions}\n            onOpenMenu={() =>\n              loadOptions(\n                `/api/services/${encodeURIComponent(getTemplateSrv().replace(query.service!))}/operations`,\n                'operations'\n              )\n            }\n            isLoading={isLoading.operations}\n            value={operationOptions?.find((v) => v.value === query.operation) || null}\n            onChange={(v) =>\n              onChange({\n                ...query,\n                operation: v?.value! || undefined,\n              })\n            }\n            menuPlacement=\"bottom\"\n            isClearable\n            aria-label={'select-operation-name'}\n            allowCustomValue={true}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Tags\" labelWidth={14} grow>\n          <Input\n            id=\"tags\"\n            value={transformToLogfmt(query.tags)}\n            placeholder=\"http.status_code=200 error=true\"\n            onChange={(v) =>\n              onChange({\n                ...query,\n                tags: v.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <AdvancedOptions query={query} onChange={onChange} />\n    </div>\n  );\n}\n\nexport default SearchForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}