{"ast":null,"code":"import { lastValueFrom } from 'rxjs';\nimport { urlUtil } from '@grafana/data';\nimport { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { getDatasourceAPIUid, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource'; // \"grafana\" for grafana-managed, otherwise a datasource name\n\nexport async function fetchAlertManagerConfig(alertManagerSourceName) {\n  try {\n    var _result$data$template, _result$data$template2, _result$data$alertman;\n\n    const result = await lastValueFrom(getBackendSrv().fetch({\n      url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/alerts`,\n      showErrorAlert: false,\n      showSuccessAlert: false\n    }));\n    return {\n      template_files: (_result$data$template = result.data.template_files) !== null && _result$data$template !== void 0 ? _result$data$template : {},\n      template_file_provenances: (_result$data$template2 = result.data.template_file_provenances) !== null && _result$data$template2 !== void 0 ? _result$data$template2 : {},\n      alertmanager_config: (_result$data$alertman = result.data.alertmanager_config) !== null && _result$data$alertman !== void 0 ? _result$data$alertman : {}\n    };\n  } catch (e) {\n    var _e$data, _e$data$message;\n\n    // if no config has been uploaded to grafana, it returns error instead of latest config\n    if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME && isFetchError(e) && (_e$data = e.data) !== null && _e$data !== void 0 && (_e$data$message = _e$data.message) !== null && _e$data$message !== void 0 && _e$data$message.includes('could not find an Alertmanager configuration')) {\n      return {\n        template_files: {},\n        alertmanager_config: {}\n      };\n    }\n\n    throw e;\n  }\n}\nexport async function updateAlertManagerConfig(alertManagerSourceName, config) {\n  await lastValueFrom(getBackendSrv().fetch({\n    method: 'POST',\n    url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/alerts`,\n    data: config,\n    showErrorAlert: false,\n    showSuccessAlert: false\n  }));\n}\nexport async function deleteAlertManagerConfig(alertManagerSourceName) {\n  await lastValueFrom(getBackendSrv().fetch({\n    method: 'DELETE',\n    url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/alerts`,\n    showErrorAlert: false,\n    showSuccessAlert: false\n  }));\n}\nexport async function fetchSilences(alertManagerSourceName) {\n  const result = await lastValueFrom(getBackendSrv().fetch({\n    url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/api/v2/silences`,\n    showErrorAlert: false,\n    showSuccessAlert: false\n  }));\n  return result.data;\n} // returns the new silence ID. Even in the case of an update, a new silence is created and the previous one expired.\n\nexport async function createOrUpdateSilence(alertmanagerSourceName, payload) {\n  const result = await lastValueFrom(getBackendSrv().fetch({\n    url: `/api/alertmanager/${getDatasourceAPIUid(alertmanagerSourceName)}/api/v2/silences`,\n    data: payload,\n    showErrorAlert: false,\n    showSuccessAlert: false,\n    method: 'POST'\n  }));\n  return result.data;\n}\nexport async function expireSilence(alertmanagerSourceName, silenceID) {\n  await getBackendSrv().delete(`/api/alertmanager/${getDatasourceAPIUid(alertmanagerSourceName)}/api/v2/silence/${encodeURIComponent(silenceID)}`);\n}\nexport async function fetchAlerts(alertmanagerSourceName, matchers, silenced = true, active = true, inhibited = true) {\n  const filters = urlUtil.toUrlParams({\n    silenced,\n    active,\n    inhibited\n  }) + (matchers === null || matchers === void 0 ? void 0 : matchers.map(matcher => `filter=${encodeURIComponent(`${escapeQuotes(matcher.name)}=${matcher.isRegex ? '~' : ''}\"${escapeQuotes(matcher.value)}\"`)}`).join('&')) || '';\n  const result = await lastValueFrom(getBackendSrv().fetch({\n    url: `/api/alertmanager/${getDatasourceAPIUid(alertmanagerSourceName)}/api/v2/alerts` + (filters ? '?' + filters : ''),\n    showErrorAlert: false,\n    showSuccessAlert: false\n  }));\n  return result.data;\n}\nexport async function fetchAlertGroups(alertmanagerSourceName) {\n  const result = await lastValueFrom(getBackendSrv().fetch({\n    url: `/api/alertmanager/${getDatasourceAPIUid(alertmanagerSourceName)}/api/v2/alerts/groups`,\n    showErrorAlert: false,\n    showSuccessAlert: false\n  }));\n  return result.data;\n}\nexport async function fetchStatus(alertManagerSourceName) {\n  const result = await lastValueFrom(getBackendSrv().fetch({\n    url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/api/v2/status`,\n    showErrorAlert: false,\n    showSuccessAlert: false\n  }));\n  return result.data;\n}\nexport async function testReceivers(alertManagerSourceName, receivers, alert) {\n  const data = {\n    receivers,\n    alert\n  };\n\n  try {\n    const result = await lastValueFrom(getBackendSrv().fetch({\n      method: 'POST',\n      data,\n      url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/receivers/test`,\n      showErrorAlert: false,\n      showSuccessAlert: false\n    }));\n\n    if (receiversResponseContainsErrors(result.data)) {\n      throw new Error(getReceiverResultError(result.data));\n    }\n  } catch (error) {\n    if (isFetchError(error) && isTestReceiversResult(error.data) && receiversResponseContainsErrors(error.data)) {\n      throw new Error(getReceiverResultError(error.data));\n    }\n\n    throw error;\n  }\n}\n\nfunction receiversResponseContainsErrors(result) {\n  return result.receivers.some(receiver => receiver.grafana_managed_receiver_configs.some(config => config.status === 'failed'));\n}\n\nfunction isTestReceiversResult(data) {\n  const receivers = data === null || data === void 0 ? void 0 : data.receivers;\n\n  if (Array.isArray(receivers)) {\n    return receivers.every(receiver => typeof receiver.name === 'string' && Array.isArray(receiver.grafana_managed_receiver_configs));\n  }\n\n  return false;\n}\n\nfunction getReceiverResultError(receiversResult) {\n  return receiversResult.receivers.flatMap(receiver => receiver.grafana_managed_receiver_configs.filter(receiver => receiver.status === 'failed').map(receiver => {\n    var _receiver$error;\n\n    return (_receiver$error = receiver.error) !== null && _receiver$error !== void 0 ? _receiver$error : 'Unknown error.';\n  })).join('; ');\n}\n\nexport async function addAlertManagers(alertManagerConfig) {\n  await lastValueFrom(getBackendSrv().fetch({\n    method: 'POST',\n    data: alertManagerConfig,\n    url: '/api/v1/ngalert/admin_config',\n    showErrorAlert: false,\n    showSuccessAlert: false\n  })).then(() => {\n    fetchExternalAlertmanagerConfig();\n  });\n}\nexport async function fetchExternalAlertmanagers() {\n  const result = await lastValueFrom(getBackendSrv().fetch({\n    method: 'GET',\n    url: '/api/v1/ngalert/alertmanagers'\n  }));\n  return result.data;\n}\nexport async function fetchExternalAlertmanagerConfig() {\n  const result = await lastValueFrom(getBackendSrv().fetch({\n    method: 'GET',\n    url: '/api/v1/ngalert/admin_config',\n    showErrorAlert: false\n  }));\n  return result.data;\n}\n\nfunction escapeQuotes(value) {\n  return value.replace(/\"/g, '\\\\\"');\n}","map":{"version":3,"names":["lastValueFrom","urlUtil","getBackendSrv","isFetchError","getDatasourceAPIUid","GRAFANA_RULES_SOURCE_NAME","fetchAlertManagerConfig","alertManagerSourceName","result","fetch","url","showErrorAlert","showSuccessAlert","template_files","data","template_file_provenances","alertmanager_config","e","message","includes","updateAlertManagerConfig","config","method","deleteAlertManagerConfig","fetchSilences","createOrUpdateSilence","alertmanagerSourceName","payload","expireSilence","silenceID","delete","encodeURIComponent","fetchAlerts","matchers","silenced","active","inhibited","filters","toUrlParams","map","matcher","escapeQuotes","name","isRegex","value","join","fetchAlertGroups","fetchStatus","testReceivers","receivers","alert","receiversResponseContainsErrors","Error","getReceiverResultError","error","isTestReceiversResult","some","receiver","grafana_managed_receiver_configs","status","Array","isArray","every","receiversResult","flatMap","filter","addAlertManagers","alertManagerConfig","then","fetchExternalAlertmanagerConfig","fetchExternalAlertmanagers","replace"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/api/alertmanager.ts"],"sourcesContent":["import { lastValueFrom } from 'rxjs';\n\nimport { urlUtil } from '@grafana/data';\nimport { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport {\n  AlertmanagerAlert,\n  AlertManagerCortexConfig,\n  AlertmanagerGroup,\n  AlertmanagerStatus,\n  ExternalAlertmanagersResponse,\n  Matcher,\n  Receiver,\n  Silence,\n  SilenceCreatePayload,\n  TestReceiversAlert,\n  TestReceiversPayload,\n  TestReceiversResult,\n  ExternalAlertmanagerConfig,\n} from 'app/plugins/datasource/alertmanager/types';\n\nimport { getDatasourceAPIUid, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\n// \"grafana\" for grafana-managed, otherwise a datasource name\nexport async function fetchAlertManagerConfig(alertManagerSourceName: string): Promise<AlertManagerCortexConfig> {\n  try {\n    const result = await lastValueFrom(\n      getBackendSrv().fetch<AlertManagerCortexConfig>({\n        url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/alerts`,\n        showErrorAlert: false,\n        showSuccessAlert: false,\n      })\n    );\n    return {\n      template_files: result.data.template_files ?? {},\n      template_file_provenances: result.data.template_file_provenances ?? {},\n      alertmanager_config: result.data.alertmanager_config ?? {},\n    };\n  } catch (e) {\n    // if no config has been uploaded to grafana, it returns error instead of latest config\n    if (\n      alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME &&\n      isFetchError(e) &&\n      e.data?.message?.includes('could not find an Alertmanager configuration')\n    ) {\n      return {\n        template_files: {},\n        alertmanager_config: {},\n      };\n    }\n    throw e;\n  }\n}\n\nexport async function updateAlertManagerConfig(\n  alertManagerSourceName: string,\n  config: AlertManagerCortexConfig\n): Promise<void> {\n  await lastValueFrom(\n    getBackendSrv().fetch({\n      method: 'POST',\n      url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/alerts`,\n      data: config,\n      showErrorAlert: false,\n      showSuccessAlert: false,\n    })\n  );\n}\n\nexport async function deleteAlertManagerConfig(alertManagerSourceName: string): Promise<void> {\n  await lastValueFrom(\n    getBackendSrv().fetch({\n      method: 'DELETE',\n      url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/alerts`,\n      showErrorAlert: false,\n      showSuccessAlert: false,\n    })\n  );\n}\n\nexport async function fetchSilences(alertManagerSourceName: string): Promise<Silence[]> {\n  const result = await lastValueFrom(\n    getBackendSrv().fetch<Silence[]>({\n      url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/api/v2/silences`,\n      showErrorAlert: false,\n      showSuccessAlert: false,\n    })\n  );\n  return result.data;\n}\n\n// returns the new silence ID. Even in the case of an update, a new silence is created and the previous one expired.\nexport async function createOrUpdateSilence(\n  alertmanagerSourceName: string,\n  payload: SilenceCreatePayload\n): Promise<Silence> {\n  const result = await lastValueFrom(\n    getBackendSrv().fetch<Silence>({\n      url: `/api/alertmanager/${getDatasourceAPIUid(alertmanagerSourceName)}/api/v2/silences`,\n      data: payload,\n      showErrorAlert: false,\n      showSuccessAlert: false,\n      method: 'POST',\n    })\n  );\n  return result.data;\n}\n\nexport async function expireSilence(alertmanagerSourceName: string, silenceID: string): Promise<void> {\n  await getBackendSrv().delete(\n    `/api/alertmanager/${getDatasourceAPIUid(alertmanagerSourceName)}/api/v2/silence/${encodeURIComponent(silenceID)}`\n  );\n}\n\nexport async function fetchAlerts(\n  alertmanagerSourceName: string,\n  matchers?: Matcher[],\n  silenced = true,\n  active = true,\n  inhibited = true\n): Promise<AlertmanagerAlert[]> {\n  const filters =\n    urlUtil.toUrlParams({ silenced, active, inhibited }) +\n      matchers\n        ?.map(\n          (matcher) =>\n            `filter=${encodeURIComponent(\n              `${escapeQuotes(matcher.name)}=${matcher.isRegex ? '~' : ''}\"${escapeQuotes(matcher.value)}\"`\n            )}`\n        )\n        .join('&') || '';\n\n  const result = await lastValueFrom(\n    getBackendSrv().fetch<AlertmanagerAlert[]>({\n      url:\n        `/api/alertmanager/${getDatasourceAPIUid(alertmanagerSourceName)}/api/v2/alerts` +\n        (filters ? '?' + filters : ''),\n      showErrorAlert: false,\n      showSuccessAlert: false,\n    })\n  );\n\n  return result.data;\n}\n\nexport async function fetchAlertGroups(alertmanagerSourceName: string): Promise<AlertmanagerGroup[]> {\n  const result = await lastValueFrom(\n    getBackendSrv().fetch<AlertmanagerGroup[]>({\n      url: `/api/alertmanager/${getDatasourceAPIUid(alertmanagerSourceName)}/api/v2/alerts/groups`,\n      showErrorAlert: false,\n      showSuccessAlert: false,\n    })\n  );\n\n  return result.data;\n}\n\nexport async function fetchStatus(alertManagerSourceName: string): Promise<AlertmanagerStatus> {\n  const result = await lastValueFrom(\n    getBackendSrv().fetch<AlertmanagerStatus>({\n      url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/api/v2/status`,\n      showErrorAlert: false,\n      showSuccessAlert: false,\n    })\n  );\n\n  return result.data;\n}\n\nexport async function testReceivers(\n  alertManagerSourceName: string,\n  receivers: Receiver[],\n  alert?: TestReceiversAlert\n): Promise<void> {\n  const data: TestReceiversPayload = {\n    receivers,\n    alert,\n  };\n  try {\n    const result = await lastValueFrom(\n      getBackendSrv().fetch<TestReceiversResult>({\n        method: 'POST',\n        data,\n        url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/receivers/test`,\n        showErrorAlert: false,\n        showSuccessAlert: false,\n      })\n    );\n\n    if (receiversResponseContainsErrors(result.data)) {\n      throw new Error(getReceiverResultError(result.data));\n    }\n  } catch (error) {\n    if (isFetchError(error) && isTestReceiversResult(error.data) && receiversResponseContainsErrors(error.data)) {\n      throw new Error(getReceiverResultError(error.data));\n    }\n\n    throw error;\n  }\n}\n\nfunction receiversResponseContainsErrors(result: TestReceiversResult) {\n  return result.receivers.some((receiver) =>\n    receiver.grafana_managed_receiver_configs.some((config) => config.status === 'failed')\n  );\n}\n\nfunction isTestReceiversResult(data: any): data is TestReceiversResult {\n  const receivers = data?.receivers;\n\n  if (Array.isArray(receivers)) {\n    return receivers.every(\n      (receiver: any) => typeof receiver.name === 'string' && Array.isArray(receiver.grafana_managed_receiver_configs)\n    );\n  }\n\n  return false;\n}\n\nfunction getReceiverResultError(receiversResult: TestReceiversResult) {\n  return receiversResult.receivers\n    .flatMap((receiver) =>\n      receiver.grafana_managed_receiver_configs\n        .filter((receiver) => receiver.status === 'failed')\n        .map((receiver) => receiver.error ?? 'Unknown error.')\n    )\n    .join('; ');\n}\n\nexport async function addAlertManagers(alertManagerConfig: ExternalAlertmanagerConfig): Promise<void> {\n  await lastValueFrom(\n    getBackendSrv().fetch({\n      method: 'POST',\n      data: alertManagerConfig,\n      url: '/api/v1/ngalert/admin_config',\n      showErrorAlert: false,\n      showSuccessAlert: false,\n    })\n  ).then(() => {\n    fetchExternalAlertmanagerConfig();\n  });\n}\n\nexport async function fetchExternalAlertmanagers(): Promise<ExternalAlertmanagersResponse> {\n  const result = await lastValueFrom(\n    getBackendSrv().fetch<ExternalAlertmanagersResponse>({\n      method: 'GET',\n      url: '/api/v1/ngalert/alertmanagers',\n    })\n  );\n\n  return result.data;\n}\n\nexport async function fetchExternalAlertmanagerConfig(): Promise<ExternalAlertmanagerConfig> {\n  const result = await lastValueFrom(\n    getBackendSrv().fetch<ExternalAlertmanagerConfig>({\n      method: 'GET',\n      url: '/api/v1/ngalert/admin_config',\n      showErrorAlert: false,\n    })\n  );\n\n  return result.data;\n}\n\nfunction escapeQuotes(value: string): string {\n  return value.replace(/\"/g, '\\\\\"');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}