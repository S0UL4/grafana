{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { lastValueFrom } from 'rxjs';\nimport { appEvents } from 'app/core/app_events';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { saveDashboard } from 'app/features/manage-dashboards/state/actions';\nimport { RemovePanelEvent } from '../../../types/events';\nimport { DashboardModel } from '../state/DashboardModel';\nimport { removePanel } from '../utils/panel';\nexport class DashboardSrv {\n  constructor() {\n    _defineProperty(this, \"dashboard\", void 0);\n\n    _defineProperty(this, \"onRemovePanel\", panelId => {\n      const dashboard = this.getCurrent();\n\n      if (dashboard) {\n        removePanel(dashboard, dashboard.getPanelById(panelId), true);\n      }\n    });\n\n    appEvents.subscribe(RemovePanelEvent, e => this.onRemovePanel(e.payload));\n  }\n\n  create(dashboard, meta) {\n    return new DashboardModel(dashboard, meta);\n  }\n\n  setCurrent(dashboard) {\n    this.dashboard = dashboard;\n  }\n\n  getCurrent() {\n    if (!this.dashboard) {\n      console.warn('Calling getDashboardSrv().getCurrent() without calling getDashboardSrv().setCurrent() first.');\n    }\n\n    return this.dashboard;\n  }\n\n  saveJSONDashboard(json) {\n    var _this$dashboard;\n\n    const parsedJson = JSON.parse(json);\n    return saveDashboard({\n      dashboard: parsedJson,\n      folderId: ((_this$dashboard = this.dashboard) === null || _this$dashboard === void 0 ? void 0 : _this$dashboard.meta.folderId) || parsedJson.folderId\n    });\n  }\n\n  saveDashboard(data, requestOptions) {\n    return lastValueFrom(getBackendSrv().fetch(Object.assign({\n      url: '/api/dashboards/db/',\n      method: 'POST',\n      data: Object.assign({}, data, {\n        dashboard: data.dashboard.getSaveModelClone()\n      })\n    }, requestOptions)));\n  }\n\n  starDashboard(dashboardId, isStarred) {\n    const backendSrv = getBackendSrv();\n    let promise;\n\n    if (isStarred) {\n      promise = backendSrv.delete('/api/user/stars/dashboard/' + dashboardId).then(() => {\n        return false;\n      });\n    } else {\n      promise = backendSrv.post('/api/user/stars/dashboard/' + dashboardId).then(() => {\n        return true;\n      });\n    }\n\n    return promise.then(res => {\n      if (this.dashboard && this.dashboard.id === dashboardId) {\n        this.dashboard.meta.isStarred = res;\n      }\n\n      return res;\n    });\n  }\n\n} //\n// Code below is to export the service to React components\n//\n\nlet singletonInstance;\nexport function setDashboardSrv(instance) {\n  singletonInstance = instance;\n}\nexport function getDashboardSrv() {\n  if (!singletonInstance) {\n    singletonInstance = new DashboardSrv();\n  }\n\n  return singletonInstance;\n}","map":{"version":3,"names":["lastValueFrom","appEvents","getBackendSrv","saveDashboard","RemovePanelEvent","DashboardModel","removePanel","DashboardSrv","constructor","panelId","dashboard","getCurrent","getPanelById","subscribe","e","onRemovePanel","payload","create","meta","setCurrent","console","warn","saveJSONDashboard","json","parsedJson","JSON","parse","folderId","data","requestOptions","fetch","url","method","getSaveModelClone","starDashboard","dashboardId","isStarred","backendSrv","promise","delete","then","post","res","id","singletonInstance","setDashboardSrv","instance","getDashboardSrv"],"sources":["/home/soula/grafana/public/app/features/dashboard/services/DashboardSrv.ts"],"sourcesContent":["import { lastValueFrom } from 'rxjs';\n\nimport { BackendSrvRequest } from '@grafana/runtime';\nimport { appEvents } from 'app/core/app_events';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { saveDashboard } from 'app/features/manage-dashboards/state/actions';\nimport { DashboardMeta } from 'app/types';\n\nimport { RemovePanelEvent } from '../../../types/events';\nimport { DashboardModel } from '../state/DashboardModel';\nimport { removePanel } from '../utils/panel';\n\nexport interface SaveDashboardOptions {\n  /** The complete dashboard model. If `dashboard.id` is not set a new dashboard will be created. */\n  dashboard: DashboardModel;\n  /** Set a commit message for the version history. */\n  message?: string;\n  /** The id of the folder to save the dashboard in. */\n  folderId?: number;\n  /** The UID of the folder to save the dashboard in. Overrides `folderId`. */\n  folderUid?: string;\n  /** Set to `true` if you want to overwrite existing dashboard with newer version,\n   *  same dashboard title in folder or same dashboard uid. */\n  overwrite?: boolean;\n  /** Set the dashboard refresh interval.\n   *  If this is lower than the minimum refresh interval, Grafana will ignore it and will enforce the minimum refresh interval. */\n  refresh?: string;\n}\n\ninterface SaveDashboardResponse {\n  id: number;\n  slug: string;\n  status: string;\n  uid: string;\n  url: string;\n  version: number;\n}\n\nexport class DashboardSrv {\n  dashboard?: DashboardModel;\n\n  constructor() {\n    appEvents.subscribe(RemovePanelEvent, (e) => this.onRemovePanel(e.payload));\n  }\n\n  create(dashboard: any, meta: DashboardMeta) {\n    return new DashboardModel(dashboard, meta);\n  }\n\n  setCurrent(dashboard: DashboardModel) {\n    this.dashboard = dashboard;\n  }\n\n  getCurrent(): DashboardModel | undefined {\n    if (!this.dashboard) {\n      console.warn('Calling getDashboardSrv().getCurrent() without calling getDashboardSrv().setCurrent() first.');\n    }\n    return this.dashboard;\n  }\n\n  onRemovePanel = (panelId: number) => {\n    const dashboard = this.getCurrent();\n    if (dashboard) {\n      removePanel(dashboard, dashboard.getPanelById(panelId)!, true);\n    }\n  };\n\n  saveJSONDashboard(json: string) {\n    const parsedJson = JSON.parse(json);\n    return saveDashboard({\n      dashboard: parsedJson,\n      folderId: this.dashboard?.meta.folderId || parsedJson.folderId,\n    });\n  }\n\n  saveDashboard(\n    data: SaveDashboardOptions,\n    requestOptions?: Pick<BackendSrvRequest, 'showErrorAlert' | 'showSuccessAlert'>\n  ) {\n    return lastValueFrom(\n      getBackendSrv().fetch<SaveDashboardResponse>({\n        url: '/api/dashboards/db/',\n        method: 'POST',\n        data: {\n          ...data,\n          dashboard: data.dashboard.getSaveModelClone(),\n        },\n        ...requestOptions,\n      })\n    );\n  }\n\n  starDashboard(dashboardId: string, isStarred: any) {\n    const backendSrv = getBackendSrv();\n    let promise;\n\n    if (isStarred) {\n      promise = backendSrv.delete('/api/user/stars/dashboard/' + dashboardId).then(() => {\n        return false;\n      });\n    } else {\n      promise = backendSrv.post('/api/user/stars/dashboard/' + dashboardId).then(() => {\n        return true;\n      });\n    }\n\n    return promise.then((res: boolean) => {\n      if (this.dashboard && this.dashboard.id === dashboardId) {\n        this.dashboard.meta.isStarred = res;\n      }\n      return res;\n    });\n  }\n}\n\n//\n// Code below is to export the service to React components\n//\n\nlet singletonInstance: DashboardSrv;\n\nexport function setDashboardSrv(instance: DashboardSrv) {\n  singletonInstance = instance;\n}\n\nexport function getDashboardSrv(): DashboardSrv {\n  if (!singletonInstance) {\n    singletonInstance = new DashboardSrv();\n  }\n  return singletonInstance;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}