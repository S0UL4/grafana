{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { Button, CodeEditor, Modal, useTheme2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const CrawlerStartButton = () => {\n  var _JSON$stringify;\n\n  const styles = getStyles(useTheme2());\n  const [open, setOpen] = useState(false);\n  const [body, setBody] = useState({\n    mode: 'thumbs',\n    theme: config.theme2.isLight ? 'light' : 'dark'\n  });\n\n  const onDismiss = () => setOpen(false);\n\n  const doStart = () => {\n    getBackendSrv().post('/api/admin/crawler/start', body).then(v => {\n      console.log('GOT', v);\n      onDismiss();\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Modal, {\n      title: 'Start crawler',\n      isOpen: open,\n      onDismiss: onDismiss,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: styles.wrap,\n        children: /*#__PURE__*/_jsx(CodeEditor, {\n          height: 200,\n          value: (_JSON$stringify = JSON.stringify(body, null, 2)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : '',\n          showLineNumbers: false,\n          readOnly: false,\n          language: \"json\",\n          showMiniMap: false,\n          onBlur: text => {\n            setBody(JSON.parse(text)); // force JSON?\n          }\n        })\n      }), /*#__PURE__*/_jsxs(Modal.ButtonRow, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          type: \"submit\",\n          onClick: doStart,\n          children: \"Start\"\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: onDismiss,\n          children: \"Cancel\"\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(Button, {\n      onClick: () => setOpen(true),\n      variant: \"primary\",\n      children: \"Start\"\n    })]\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    wrap: css`\n      border: 2px solid #111;\n    `\n  };\n};","map":{"version":3,"names":["css","React","useState","getBackendSrv","config","Button","CodeEditor","Modal","useTheme2","CrawlerStartButton","styles","getStyles","open","setOpen","body","setBody","mode","theme","theme2","isLight","onDismiss","doStart","post","then","v","console","log","wrap","JSON","stringify","text","parse"],"sources":["/home/soula/grafana/public/app/features/admin/CrawlerStartButton.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { Button, CodeEditor, Modal, useTheme2 } from '@grafana/ui';\n\nexport const CrawlerStartButton = () => {\n  const styles = getStyles(useTheme2());\n  const [open, setOpen] = useState(false);\n  const [body, setBody] = useState({\n    mode: 'thumbs',\n    theme: config.theme2.isLight ? 'light' : 'dark',\n  });\n  const onDismiss = () => setOpen(false);\n  const doStart = () => {\n    getBackendSrv()\n      .post('/api/admin/crawler/start', body)\n      .then((v) => {\n        console.log('GOT', v);\n        onDismiss();\n      });\n  };\n\n  return (\n    <>\n      <Modal title={'Start crawler'} isOpen={open} onDismiss={onDismiss}>\n        <div className={styles.wrap}>\n          <CodeEditor\n            height={200}\n            value={JSON.stringify(body, null, 2) ?? ''}\n            showLineNumbers={false}\n            readOnly={false}\n            language=\"json\"\n            showMiniMap={false}\n            onBlur={(text: string) => {\n              setBody(JSON.parse(text)); // force JSON?\n            }}\n          />\n        </div>\n        <Modal.ButtonRow>\n          <Button type=\"submit\" onClick={doStart}>\n            Start\n          </Button>\n          <Button variant=\"secondary\" onClick={onDismiss}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n\n      <Button onClick={() => setOpen(true)} variant=\"primary\">\n        Start\n      </Button>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      border: 2px solid #111;\n    `,\n  };\n};\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,kBAAtC;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoCC,SAApC,QAAqD,aAArD;;;;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;EAAA;;EACtC,MAAMC,MAAM,GAAGC,SAAS,CAACH,SAAS,EAAV,CAAxB;EACA,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,KAAD,CAAhC;EACA,MAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC;IAC/Bc,IAAI,EAAE,QADyB;IAE/BC,KAAK,EAAEb,MAAM,CAACc,MAAP,CAAcC,OAAd,GAAwB,OAAxB,GAAkC;EAFV,CAAD,CAAhC;;EAIA,MAAMC,SAAS,GAAG,MAAMP,OAAO,CAAC,KAAD,CAA/B;;EACA,MAAMQ,OAAO,GAAG,MAAM;IACpBlB,aAAa,GACVmB,IADH,CACQ,0BADR,EACoCR,IADpC,EAEGS,IAFH,CAESC,CAAD,IAAO;MACXC,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,CAAnB;MACAJ,SAAS;IACV,CALH;EAMD,CAPD;;EASA,oBACE;IAAA,wBACE,MAAC,KAAD;MAAO,KAAK,EAAE,eAAd;MAA+B,MAAM,EAAER,IAAvC;MAA6C,SAAS,EAAEQ,SAAxD;MAAA,wBACE;QAAK,SAAS,EAAEV,MAAM,CAACiB,IAAvB;QAAA,uBACE,KAAC,UAAD;UACE,MAAM,EAAE,GADV;UAEE,KAAK,qBAAEC,IAAI,CAACC,SAAL,CAAef,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAF,6DAAmC,EAF1C;UAGE,eAAe,EAAE,KAHnB;UAIE,QAAQ,EAAE,KAJZ;UAKE,QAAQ,EAAC,MALX;UAME,WAAW,EAAE,KANf;UAOE,MAAM,EAAGgB,IAAD,IAAkB;YACxBf,OAAO,CAACa,IAAI,CAACG,KAAL,CAAWD,IAAX,CAAD,CAAP,CADwB,CACG;UAC5B;QATH;MADF,EADF,eAcE,MAAC,KAAD,CAAO,SAAP;QAAA,wBACE,KAAC,MAAD;UAAQ,IAAI,EAAC,QAAb;UAAsB,OAAO,EAAET,OAA/B;UAAA;QAAA,EADF,eAIE,KAAC,MAAD;UAAQ,OAAO,EAAC,WAAhB;UAA4B,OAAO,EAAED,SAArC;UAAA;QAAA,EAJF;MAAA,EAdF;IAAA,EADF,eAyBE,KAAC,MAAD;MAAQ,OAAO,EAAE,MAAMP,OAAO,CAAC,IAAD,CAA9B;MAAsC,OAAO,EAAC,SAA9C;MAAA;IAAA,EAzBF;EAAA,EADF;AA+BD,CAhDM;;AAkDP,MAAMF,SAAS,GAAIM,KAAD,IAA0B;EAC1C,OAAO;IACLU,IAAI,EAAE3B,GAAI;AACd;AACA;EAHS,CAAP;AAKD,CAND"},"metadata":{},"sourceType":"module"}