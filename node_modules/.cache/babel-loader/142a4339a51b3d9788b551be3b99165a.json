{"ast":null,"code":"import { PluginState } from '@grafana/data';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { unByKey } from 'ol/Observable';\nimport { checkFeatureMatchesStyleRule } from '../../utils/checkFeatureMatchesStyleRule';\nimport { ComparisonOperation } from '../../types';\nimport { GeomapStyleRulesEditor } from '../../editor/GeomapStyleRulesEditor';\nimport { defaultStyleConfig } from '../../style/types';\nimport { getStyleConfigState } from '../../style/utils';\nimport { polyStyle } from '../../style/markers';\nimport { StyleEditor } from './StyleEditor';\nimport { ReplaySubject } from 'rxjs';\nimport { map as rxjsmap, first } from 'rxjs/operators';\nimport { getLayerPropertyInfo } from '../../utils/getFeatures';\nimport { getDataSourceSrv } from '@grafana/runtime';\nconst defaultOptions = {\n  src: 'public/maps/countries.geojson',\n  rules: [],\n  style: defaultStyleConfig\n};\nexport const DEFAULT_STYLE_RULE = {\n  style: defaultStyleConfig,\n  check: {\n    property: '',\n    operation: ComparisonOperation.EQ,\n    value: ''\n  }\n};\nlet publicGeoJSONFiles = undefined;\nexport const geojsonLayer = {\n  id: 'geojson',\n  name: 'GeoJSON',\n  description: 'Load static data from a geojson file',\n  isBaseMap: false,\n  state: PluginState.beta,\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param options\n   */\n  create: async (map, options, eventBus, theme) => {\n    const config = Object.assign({}, defaultOptions, options.config);\n    const source = new VectorSource({\n      url: config.src,\n      format: new GeoJSON()\n    });\n    const features = new ReplaySubject();\n    const key = source.on('change', () => {\n      //one geojson loads\n      if (source.getState() == 'ready') {\n        unByKey(key);\n        features.next(source.getFeatures());\n      }\n    });\n    const styles = [];\n\n    if (config.rules) {\n      for (const r of config.rules) {\n        if (r.style) {\n          const s = await getStyleConfigState(r.style);\n          styles.push({\n            state: s,\n            rule: r.check\n          });\n        }\n      }\n    }\n\n    if (true) {\n      const s = await getStyleConfigState(config.style);\n      styles.push({\n        state: s\n      });\n    }\n\n    const vectorLayer = new VectorLayer({\n      source,\n      style: feature => {\n        var _feature$getGeometry;\n\n        const isPoint = ((_feature$getGeometry = feature.getGeometry()) === null || _feature$getGeometry === void 0 ? void 0 : _feature$getGeometry.getType()) === 'Point';\n\n        for (const check of styles) {\n          if (check.rule && !checkFeatureMatchesStyleRule(check.rule, feature)) {\n            continue;\n          } // Support dynamic values\n\n\n          if (check.state.fields) {\n            const values = Object.assign({}, check.state.base);\n            const {\n              text\n            } = check.state.fields;\n\n            if (text) {\n              values.text = `${feature.get(text)}`;\n            }\n\n            if (isPoint) {\n              return check.state.maker(values);\n            }\n\n            return polyStyle(values);\n          } // Lazy create the style object\n\n\n          if (isPoint) {\n            if (!check.point) {\n              check.point = check.state.maker(check.state.base);\n            }\n\n            return check.point;\n          }\n\n          if (!check.poly) {\n            check.poly = polyStyle(check.state.base);\n          }\n\n          return check.poly;\n        }\n\n        return undefined; // unreachable\n      }\n    });\n    return {\n      init: () => vectorLayer,\n      update: data => {\n        console.log('todo... find values matching the ID and update');\n      },\n      registerOptionsUI: builder => {\n        var _publicGeoJSONFiles;\n\n        // get properties for first feature to use as ui options\n        const layerInfo = features.pipe(first(), rxjsmap(v => getLayerPropertyInfo(v)));\n\n        if (!publicGeoJSONFiles) {\n          initGeojsonFiles();\n        }\n\n        builder.addSelect({\n          path: 'config.src',\n          name: 'GeoJSON URL',\n          settings: {\n            options: (_publicGeoJSONFiles = publicGeoJSONFiles) !== null && _publicGeoJSONFiles !== void 0 ? _publicGeoJSONFiles : [],\n            allowCustomValue: true\n          },\n          defaultValue: defaultOptions.src\n        }).addCustomEditor({\n          id: 'config.style',\n          path: 'config.style',\n          name: 'Default style',\n          description: 'The style to apply when no rules above match',\n          editor: StyleEditor,\n          settings: {\n            simpleFixedValues: true,\n            layerInfo\n          },\n          defaultValue: defaultOptions.style\n        }).addCustomEditor({\n          id: 'config.rules',\n          path: 'config.rules',\n          name: 'Style rules',\n          description: 'Apply styles based on feature properties',\n          editor: GeomapStyleRulesEditor,\n          settings: {\n            features,\n            layerInfo\n          },\n          defaultValue: []\n        });\n      }\n    };\n  },\n  defaultOptions\n}; // This will find all geojson files in the maps and gazetteer folders\n\nasync function initGeojsonFiles() {\n  if (publicGeoJSONFiles) {\n    return;\n  }\n\n  publicGeoJSONFiles = [];\n  const ds = await getDataSourceSrv().get('-- Grafana --');\n\n  for (let folder of ['maps', 'gazetteer']) {\n    ds.listFiles(folder).subscribe({\n      next: frame => {\n        frame.forEach(item => {\n          if (item.name.endsWith('.geojson')) {\n            const value = `public/${folder}/${item.name}`;\n            publicGeoJSONFiles.push({\n              value,\n              label: value\n            });\n          }\n        });\n      }\n    });\n  }\n}","map":{"version":3,"names":["PluginState","VectorLayer","VectorSource","GeoJSON","unByKey","checkFeatureMatchesStyleRule","ComparisonOperation","GeomapStyleRulesEditor","defaultStyleConfig","getStyleConfigState","polyStyle","StyleEditor","ReplaySubject","map","rxjsmap","first","getLayerPropertyInfo","getDataSourceSrv","defaultOptions","src","rules","style","DEFAULT_STYLE_RULE","check","property","operation","EQ","value","publicGeoJSONFiles","undefined","geojsonLayer","id","name","description","isBaseMap","state","beta","create","options","eventBus","theme","config","source","url","format","features","key","on","getState","next","getFeatures","styles","r","s","push","rule","vectorLayer","feature","isPoint","getGeometry","getType","fields","values","base","text","get","maker","point","poly","init","update","data","console","log","registerOptionsUI","builder","layerInfo","pipe","v","initGeojsonFiles","addSelect","path","settings","allowCustomValue","defaultValue","addCustomEditor","editor","simpleFixedValues","ds","folder","listFiles","subscribe","frame","forEach","item","endsWith","label"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/layers/data/geojsonLayer.ts"],"sourcesContent":["import {\n  MapLayerRegistryItem,\n  MapLayerOptions,\n  PanelData,\n  GrafanaTheme2,\n  PluginState,\n  SelectableValue,\n  EventBus,\n} from '@grafana/data';\nimport Map from 'ol/Map';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { unByKey } from 'ol/Observable';\nimport { checkFeatureMatchesStyleRule } from '../../utils/checkFeatureMatchesStyleRule';\nimport { ComparisonOperation, FeatureRuleConfig, FeatureStyleConfig } from '../../types';\nimport { Style } from 'ol/style';\nimport { FeatureLike } from 'ol/Feature';\nimport { GeomapStyleRulesEditor } from '../../editor/GeomapStyleRulesEditor';\nimport { defaultStyleConfig, StyleConfig, StyleConfigState } from '../../style/types';\nimport { getStyleConfigState } from '../../style/utils';\nimport { polyStyle } from '../../style/markers';\nimport { StyleEditor } from './StyleEditor';\nimport { ReplaySubject } from 'rxjs';\nimport { map as rxjsmap, first } from 'rxjs/operators';\nimport { getLayerPropertyInfo } from '../../utils/getFeatures';\nimport { GrafanaDatasource } from 'app/plugins/datasource/grafana/datasource';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport interface GeoJSONMapperConfig {\n  // URL for a geojson file\n  src?: string;\n\n  // Pick style based on a rule\n  rules: FeatureStyleConfig[];\n\n  // The default style (applied if no rules match)\n  style: StyleConfig;\n}\n\nconst defaultOptions: GeoJSONMapperConfig = {\n  src: 'public/maps/countries.geojson',\n  rules: [],\n  style: defaultStyleConfig,\n};\n\ninterface StyleCheckerState {\n  state: StyleConfigState;\n  poly?: Style | Style[];\n  point?: Style | Style[];\n  rule?: FeatureRuleConfig;\n}\n\nexport const DEFAULT_STYLE_RULE: FeatureStyleConfig = {\n  style: defaultStyleConfig,\n  check: {\n    property: '',\n    operation: ComparisonOperation.EQ,\n    value: '',\n  },\n};\n\nlet publicGeoJSONFiles: Array<SelectableValue<string>> | undefined = undefined;\n\nexport const geojsonLayer: MapLayerRegistryItem<GeoJSONMapperConfig> = {\n  id: 'geojson',\n  name: 'GeoJSON',\n  description: 'Load static data from a geojson file',\n  isBaseMap: false,\n  state: PluginState.beta,\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param options\n   */\n  create: async (map: Map, options: MapLayerOptions<GeoJSONMapperConfig>, eventBus: EventBus, theme: GrafanaTheme2) => {\n    const config = { ...defaultOptions, ...options.config };\n\n    const source = new VectorSource({\n      url: config.src,\n      format: new GeoJSON(),\n    });\n\n    const features = new ReplaySubject<FeatureLike[]>();\n\n    const key = source.on('change', () => {\n      //one geojson loads\n      if (source.getState() == 'ready') {\n        unByKey(key);\n        features.next(source.getFeatures());\n      }\n    });\n\n    const styles: StyleCheckerState[] = [];\n    if (config.rules) {\n      for (const r of config.rules) {\n        if (r.style) {\n          const s = await getStyleConfigState(r.style);\n          styles.push({\n            state: s,\n            rule: r.check,\n          });\n        }\n      }\n    }\n    if (true) {\n      const s = await getStyleConfigState(config.style);\n      styles.push({\n        state: s,\n      });\n    }\n\n    const vectorLayer = new VectorLayer({\n      source,\n      style: (feature: FeatureLike) => {\n        const isPoint = feature.getGeometry()?.getType() === 'Point';\n\n        for (const check of styles) {\n          if (check.rule && !checkFeatureMatchesStyleRule(check.rule, feature)) {\n            continue;\n          }\n\n          // Support dynamic values\n          if (check.state.fields) {\n            const values = { ...check.state.base };\n            const { text } = check.state.fields;\n\n            if (text) {\n              values.text = `${feature.get(text)}`;\n            }\n            if (isPoint) {\n              return check.state.maker(values);\n            }\n            return polyStyle(values);\n          }\n\n          // Lazy create the style object\n          if (isPoint) {\n            if (!check.point) {\n              check.point = check.state.maker(check.state.base);\n            }\n            return check.point;\n          }\n\n          if (!check.poly) {\n            check.poly = polyStyle(check.state.base);\n          }\n          return check.poly;\n        }\n        return undefined; // unreachable\n      },\n    });\n\n    return {\n      init: () => vectorLayer,\n      update: (data: PanelData) => {\n        console.log('todo... find values matching the ID and update');\n      },\n      registerOptionsUI: (builder) => {\n        // get properties for first feature to use as ui options\n        const layerInfo = features.pipe(\n          first(),\n          rxjsmap((v) => getLayerPropertyInfo(v))\n        );\n\n        if (!publicGeoJSONFiles) {\n          initGeojsonFiles();\n        }\n\n        builder\n          .addSelect({\n            path: 'config.src',\n            name: 'GeoJSON URL',\n            settings: {\n              options: publicGeoJSONFiles ?? [],\n              allowCustomValue: true,\n            },\n            defaultValue: defaultOptions.src,\n          })\n          .addCustomEditor({\n            id: 'config.style',\n            path: 'config.style',\n            name: 'Default style',\n            description: 'The style to apply when no rules above match',\n            editor: StyleEditor,\n            settings: {\n              simpleFixedValues: true,\n              layerInfo,\n            },\n            defaultValue: defaultOptions.style,\n          })\n          .addCustomEditor({\n            id: 'config.rules',\n            path: 'config.rules',\n            name: 'Style rules',\n            description: 'Apply styles based on feature properties',\n            editor: GeomapStyleRulesEditor,\n            settings: {\n              features,\n              layerInfo,\n            },\n            defaultValue: [],\n          });\n      },\n    };\n  },\n  defaultOptions,\n};\n\n// This will find all geojson files in the maps and gazetteer folders\nasync function initGeojsonFiles() {\n  if (publicGeoJSONFiles) {\n    return;\n  }\n  publicGeoJSONFiles = [];\n\n  const ds = (await getDataSourceSrv().get('-- Grafana --')) as GrafanaDatasource;\n  for (let folder of ['maps', 'gazetteer']) {\n    ds.listFiles(folder).subscribe({\n      next: (frame) => {\n        frame.forEach((item) => {\n          if (item.name.endsWith('.geojson')) {\n            const value = `public/${folder}/${item.name}`;\n            publicGeoJSONFiles!.push({\n              value,\n              label: value,\n            });\n          }\n        });\n      },\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}