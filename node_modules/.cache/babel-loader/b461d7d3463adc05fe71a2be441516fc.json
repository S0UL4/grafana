{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Button, Form, Field, Input, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateLotexNamespaceAndGroupAction } from '../../state/actions';\nimport { getRulesSourceName } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { durationValidationPattern } from '../../utils/time';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function EditCloudGroupModal(props) {\n  var _useUnifiedAlertingSe, _Button;\n\n  const {\n    namespace,\n    group,\n    onClose\n  } = props;\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const {\n    loading,\n    error,\n    dispatched\n  } = (_useUnifiedAlertingSe = useUnifiedAlertingSelector(state => state.updateLotexNamespaceAndGroup)) !== null && _useUnifiedAlertingSe !== void 0 ? _useUnifiedAlertingSe : initialAsyncRequestState;\n  const defaultValues = useMemo(() => {\n    var _group$interval;\n\n    return {\n      namespaceName: namespace.name,\n      groupName: group.name,\n      groupInterval: (_group$interval = group.interval) !== null && _group$interval !== void 0 ? _group$interval : ''\n    };\n  }, [namespace, group]); // close modal if successfully saved\n\n  useEffect(() => {\n    if (dispatched && !loading && !error) {\n      onClose();\n    }\n  }, [dispatched, loading, onClose, error]);\n  useCleanup(state => state.unifiedAlerting.updateLotexNamespaceAndGroup);\n\n  const onSubmit = values => {\n    dispatch(updateLotexNamespaceAndGroupAction({\n      rulesSourceName: getRulesSourceName(namespace.rulesSource),\n      groupName: group.name,\n      newGroupName: values.groupName,\n      namespaceName: namespace.name,\n      newNamespaceName: values.namespaceName,\n      groupInterval: values.groupInterval || undefined\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(Modal, {\n    className: styles.modal,\n    isOpen: true,\n    title: \"Edit namespace or rule group\",\n    onDismiss: onClose,\n    onClickBackdrop: onClose,\n    children: /*#__PURE__*/_jsx(Form, {\n      defaultValues: defaultValues,\n      onSubmit: onSubmit,\n      children: ({\n        register,\n        errors,\n        formState: {\n          isDirty\n        }\n      }) => {\n        var _errors$namespaceName, _errors$groupName, _errors$groupInterval;\n\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(Field, {\n            label: \"Namespace\",\n            invalid: !!errors.namespaceName,\n            error: (_errors$namespaceName = errors.namespaceName) === null || _errors$namespaceName === void 0 ? void 0 : _errors$namespaceName.message,\n            children: /*#__PURE__*/_jsx(Input, Object.assign({\n              id: \"namespaceName\"\n            }, register('namespaceName', {\n              required: 'Namespace name is required.'\n            })))\n          }), /*#__PURE__*/_jsx(Field, {\n            label: \"Rule group\",\n            invalid: !!errors.groupName,\n            error: (_errors$groupName = errors.groupName) === null || _errors$groupName === void 0 ? void 0 : _errors$groupName.message,\n            children: /*#__PURE__*/_jsx(Input, Object.assign({\n              id: \"groupName\"\n            }, register('groupName', {\n              required: 'Rule group name is required.'\n            })))\n          }), /*#__PURE__*/_jsx(Field, {\n            label: \"Rule group evaluation interval\",\n            invalid: !!errors.groupInterval,\n            error: (_errors$groupInterval = errors.groupInterval) === null || _errors$groupInterval === void 0 ? void 0 : _errors$groupInterval.message,\n            children: /*#__PURE__*/_jsx(Input, Object.assign({\n              id: \"groupInterval\",\n              placeholder: \"1m\"\n            }, register('groupInterval', {\n              pattern: durationValidationPattern\n            })))\n          }), /*#__PURE__*/_jsxs(Modal.ButtonRow, {\n            children: [_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n              variant: \"secondary\",\n              type: \"button\",\n              disabled: loading,\n              onClick: onClose,\n              fill: \"outline\",\n              children: \"Close\"\n            })), /*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              disabled: !isDirty || loading,\n              children: loading ? 'Saving...' : 'Save changes'\n            })]\n          })]\n        });\n      }\n    }, JSON.stringify(defaultValues))\n  });\n}\n\nconst getStyles = () => ({\n  modal: css`\n    max-width: 560px;\n  `\n});","map":{"version":3,"names":["css","React","useEffect","useMemo","useDispatch","Modal","Button","Form","Field","Input","useStyles2","useCleanup","useUnifiedAlertingSelector","updateLotexNamespaceAndGroupAction","getRulesSourceName","initialAsyncRequestState","durationValidationPattern","EditCloudGroupModal","props","namespace","group","onClose","styles","getStyles","dispatch","loading","error","dispatched","state","updateLotexNamespaceAndGroup","defaultValues","namespaceName","name","groupName","groupInterval","interval","unifiedAlerting","onSubmit","values","rulesSourceName","rulesSource","newGroupName","newNamespaceName","undefined","modal","register","errors","formState","isDirty","message","required","pattern","JSON","stringify"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rules/EditCloudGroupModal.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Modal, Button, Form, Field, Input, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateLotexNamespaceAndGroupAction } from '../../state/actions';\nimport { getRulesSourceName } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { durationValidationPattern } from '../../utils/time';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n}\n\ninterface FormValues {\n  namespaceName: string;\n  groupName: string;\n  groupInterval: string;\n}\n\nexport function EditCloudGroupModal(props: Props): React.ReactElement {\n  const { namespace, group, onClose } = props;\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const { loading, error, dispatched } =\n    useUnifiedAlertingSelector((state) => state.updateLotexNamespaceAndGroup) ?? initialAsyncRequestState;\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      namespaceName: namespace.name,\n      groupName: group.name,\n      groupInterval: group.interval ?? '',\n    }),\n    [namespace, group]\n  );\n\n  // close modal if successfully saved\n  useEffect(() => {\n    if (dispatched && !loading && !error) {\n      onClose();\n    }\n  }, [dispatched, loading, onClose, error]);\n\n  useCleanup((state) => state.unifiedAlerting.updateLotexNamespaceAndGroup);\n\n  const onSubmit = (values: FormValues) => {\n    dispatch(\n      updateLotexNamespaceAndGroupAction({\n        rulesSourceName: getRulesSourceName(namespace.rulesSource),\n        groupName: group.name,\n        newGroupName: values.groupName,\n        namespaceName: namespace.name,\n        newNamespaceName: values.namespaceName,\n        groupInterval: values.groupInterval || undefined,\n      })\n    );\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title=\"Edit namespace or rule group\"\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <Form defaultValues={defaultValues} onSubmit={onSubmit} key={JSON.stringify(defaultValues)}>\n        {({ register, errors, formState: { isDirty } }) => (\n          <>\n            <Field label=\"Namespace\" invalid={!!errors.namespaceName} error={errors.namespaceName?.message}>\n              <Input\n                id=\"namespaceName\"\n                {...register('namespaceName', {\n                  required: 'Namespace name is required.',\n                })}\n              />\n            </Field>\n            <Field label=\"Rule group\" invalid={!!errors.groupName} error={errors.groupName?.message}>\n              <Input\n                id=\"groupName\"\n                {...register('groupName', {\n                  required: 'Rule group name is required.',\n                })}\n              />\n            </Field>\n            <Field\n              label=\"Rule group evaluation interval\"\n              invalid={!!errors.groupInterval}\n              error={errors.groupInterval?.message}\n            >\n              <Input\n                id=\"groupInterval\"\n                placeholder=\"1m\"\n                {...register('groupInterval', {\n                  pattern: durationValidationPattern,\n                })}\n              />\n            </Field>\n\n            <Modal.ButtonRow>\n              <Button variant=\"secondary\" type=\"button\" disabled={loading} onClick={onClose} fill=\"outline\">\n                Close\n              </Button>\n              <Button type=\"submit\" disabled={!isDirty || loading}>\n                {loading ? 'Saving...' : 'Save changes'}\n              </Button>\n            </Modal.ButtonRow>\n          </>\n        )}\n      </Form>\n    </Modal>\n  );\n}\n\nconst getStyles = () => ({\n  modal: css`\n    max-width: 560px;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}