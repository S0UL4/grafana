{"ast":null,"code":"import { mergeMap, from } from 'rxjs';\nimport { ArrayVector, DataTransformerID, FieldMatcherID, fieldMatchers } from '@grafana/data';\nimport { COUNTRIES_GAZETTEER_PATH, getGazetteer } from 'app/features/geo/gazetteer/gazetteer';\nexport const fieldLookupTransformer = {\n  id: DataTransformerID.fieldLookup,\n  name: 'Lookup fields from resource',\n  description: 'Retrieve matching data based on specified field',\n  defaultOptions: {},\n  operator: options => source => source.pipe(mergeMap(data => from(doGazetteerXform(data, options))))\n};\n\nasync function doGazetteerXform(frames, options) {\n  var _options$gazetteer;\n\n  const fieldMatches = fieldMatchers.get(FieldMatcherID.byName).get(options === null || options === void 0 ? void 0 : options.lookupField);\n  const gaz = await getGazetteer((_options$gazetteer = options === null || options === void 0 ? void 0 : options.gazetteer) !== null && _options$gazetteer !== void 0 ? _options$gazetteer : COUNTRIES_GAZETTEER_PATH);\n\n  if (!gaz.frame) {\n    return Promise.reject('missing frame in gazetteer');\n  }\n\n  return addFieldsFromGazetteer(frames, gaz, fieldMatches);\n}\n\nexport function addFieldsFromGazetteer(frames, gaz, matcher) {\n  var _ref;\n\n  const src = (_ref = gaz.frame()) === null || _ref === void 0 ? void 0 : _ref.fields;\n\n  if (!src) {\n    return frames;\n  }\n\n  return frames.map(frame => {\n    const length = frame.length;\n    const fields = [];\n\n    for (const field of frame.fields) {\n      fields.push(field); //if the field matches\n\n      if (matcher(field, frame, frames)) {\n        const values = field.values.toArray();\n        const sub = [];\n\n        for (const f of src) {\n          const buffer = new Array(length);\n          sub.push(buffer);\n          fields.push(Object.assign({}, f, {\n            values: new ArrayVector(buffer)\n          }));\n        } // Add all values to the buffer\n\n\n        for (let v = 0; v < sub.length; v++) {\n          const found = gaz.find(values[v]);\n\n          if ((found === null || found === void 0 ? void 0 : found.index) != null) {\n            for (let i = 0; i < src.length; i++) {\n              sub[i][v] = src[i].values.get(found.index);\n            }\n          }\n        }\n      }\n    }\n\n    return Object.assign({}, frame, {\n      fields\n    });\n  });\n}","map":{"version":3,"names":["mergeMap","from","ArrayVector","DataTransformerID","FieldMatcherID","fieldMatchers","COUNTRIES_GAZETTEER_PATH","getGazetteer","fieldLookupTransformer","id","fieldLookup","name","description","defaultOptions","operator","options","source","pipe","data","doGazetteerXform","frames","fieldMatches","get","byName","lookupField","gaz","gazetteer","frame","Promise","reject","addFieldsFromGazetteer","matcher","src","fields","map","length","field","push","values","toArray","sub","f","buffer","Array","v","found","find","index","i"],"sources":["/home/soula/grafana/public/app/features/transformers/lookupGazetteer/fieldLookup.ts"],"sourcesContent":["import { mergeMap, from } from 'rxjs';\n\nimport {\n  ArrayVector,\n  DataFrame,\n  DataTransformerID,\n  Field,\n  FieldMatcher,\n  FieldMatcherID,\n  fieldMatchers,\n  DataTransformerInfo,\n} from '@grafana/data';\nimport { COUNTRIES_GAZETTEER_PATH, Gazetteer, getGazetteer } from 'app/features/geo/gazetteer/gazetteer';\n\nexport interface FieldLookupOptions {\n  lookupField?: string;\n  gazetteer?: string;\n}\n\nexport const fieldLookupTransformer: DataTransformerInfo<FieldLookupOptions> = {\n  id: DataTransformerID.fieldLookup,\n  name: 'Lookup fields from resource',\n  description: 'Retrieve matching data based on specified field',\n  defaultOptions: {},\n\n  operator: (options) => (source) => source.pipe(mergeMap((data) => from(doGazetteerXform(data, options)))),\n};\n\nasync function doGazetteerXform(frames: DataFrame[], options: FieldLookupOptions): Promise<DataFrame[]> {\n  const fieldMatches = fieldMatchers.get(FieldMatcherID.byName).get(options?.lookupField);\n\n  const gaz = await getGazetteer(options?.gazetteer ?? COUNTRIES_GAZETTEER_PATH);\n\n  if (!gaz.frame) {\n    return Promise.reject('missing frame in gazetteer');\n  }\n\n  return addFieldsFromGazetteer(frames, gaz, fieldMatches);\n}\n\nexport function addFieldsFromGazetteer(frames: DataFrame[], gaz: Gazetteer, matcher: FieldMatcher): DataFrame[] {\n  const src = gaz.frame!()?.fields;\n  if (!src) {\n    return frames;\n  }\n\n  return frames.map((frame) => {\n    const length = frame.length;\n    const fields: Field[] = [];\n\n    for (const field of frame.fields) {\n      fields.push(field);\n\n      //if the field matches\n      if (matcher(field, frame, frames)) {\n        const values = field.values.toArray();\n        const sub: any[][] = [];\n        for (const f of src) {\n          const buffer = new Array(length);\n          sub.push(buffer);\n          fields.push({ ...f, values: new ArrayVector(buffer) });\n        }\n\n        // Add all values to the buffer\n        for (let v = 0; v < sub.length; v++) {\n          const found = gaz.find(values[v]);\n          if (found?.index != null) {\n            for (let i = 0; i < src.length; i++) {\n              sub[i][v] = src[i].values.get(found.index);\n            }\n          }\n        }\n      }\n    }\n    return {\n      ...frame,\n      fields,\n    };\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}