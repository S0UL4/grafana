{"ast":null,"code":"import { StatementPosition } from '../../monarch/types';\nimport { AND, ASC, BY, DESC, EQUALS, FROM, GROUP, NOT_EQUALS, ORDER, SCHEMA, SELECT, WHERE } from '../language';\nimport { SQLTokenTypes } from './types';\nexport function getStatementPosition(currentToken) {\n  var _currentToken$getPrev, _previousKeyword$getP, _previousKeyword$getP2, _previousNonWhiteSpac, _previousKeyword$getP3, _previousNonWhiteSpac2;\n\n  const previousNonWhiteSpace = currentToken === null || currentToken === void 0 ? void 0 : currentToken.getPreviousNonWhiteSpaceToken();\n  const previousKeyword = currentToken === null || currentToken === void 0 ? void 0 : currentToken.getPreviousKeyword();\n  const previousIsSlash = currentToken === null || currentToken === void 0 ? void 0 : (_currentToken$getPrev = currentToken.getPreviousNonWhiteSpaceToken()) === null || _currentToken$getPrev === void 0 ? void 0 : _currentToken$getPrev.is(SQLTokenTypes.Operator, '/');\n\n  if (currentToken === null || currentToken.isWhiteSpace() && currentToken.previous === null || currentToken.is(SQLTokenTypes.Keyword, SELECT) && currentToken.previous === null || previousIsSlash || currentToken.isIdentifier() && (previousIsSlash || (currentToken === null || currentToken === void 0 ? void 0 : currentToken.previous) === null)) {\n    return StatementPosition.SelectKeyword;\n  }\n\n  if ((previousNonWhiteSpace === null || previousNonWhiteSpace === void 0 ? void 0 : previousNonWhiteSpace.value) === SELECT) {\n    return StatementPosition.AfterSelectKeyword;\n  }\n\n  if ((previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Parenthesis, '(') || currentToken !== null && currentToken !== void 0 && currentToken.is(SQLTokenTypes.Parenthesis, '()')) && (previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === SELECT) {\n    return StatementPosition.AfterSelectFuncFirstArgument;\n  }\n\n  if ((previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === SELECT && previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.isParenthesis()) {\n    return StatementPosition.FromKeyword;\n  }\n\n  if ((previousNonWhiteSpace === null || previousNonWhiteSpace === void 0 ? void 0 : previousNonWhiteSpace.value) === FROM) {\n    return StatementPosition.AfterFromKeyword;\n  }\n\n  if ((previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Parenthesis, '(') || currentToken !== null && currentToken !== void 0 && currentToken.is(SQLTokenTypes.Parenthesis, '()')) && (previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === SCHEMA) {\n    return StatementPosition.SchemaFuncFirstArgument;\n  }\n\n  if ((previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === SCHEMA && previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Delimiter, ',')) {\n    return StatementPosition.SchemaFuncExtraArgument;\n  }\n\n  if ((previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === FROM && previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.isDoubleQuotedString() || (previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === FROM && previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.isVariable() || (previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === SCHEMA && previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Parenthesis, ')')) {\n    return StatementPosition.AfterFrom;\n  }\n\n  if ((previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === WHERE && (previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.isKeyword() || previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Parenthesis, '(') || previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Operator, AND))) {\n    return StatementPosition.WhereKey;\n  }\n\n  if ((previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === WHERE && (previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.isIdentifier() || previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.isDoubleQuotedString())) {\n    return StatementPosition.WhereComparisonOperator;\n  }\n\n  if ((previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === WHERE && (previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Operator, EQUALS) || previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Operator, NOT_EQUALS))) {\n    return StatementPosition.WhereValue;\n  }\n\n  if ((previousKeyword === null || previousKeyword === void 0 ? void 0 : previousKeyword.value) === WHERE && (previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.isString() || previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Parenthesis, ')'))) {\n    return StatementPosition.AfterWhereValue;\n  }\n\n  if (previousKeyword !== null && previousKeyword !== void 0 && previousKeyword.is(SQLTokenTypes.Keyword, BY) && previousKeyword !== null && previousKeyword !== void 0 && (_previousKeyword$getP = previousKeyword.getPreviousKeyword()) !== null && _previousKeyword$getP !== void 0 && _previousKeyword$getP.is(SQLTokenTypes.Keyword, GROUP) && (previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Keyword, BY) || previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Delimiter, ','))) {\n    return StatementPosition.AfterGroupByKeywords;\n  }\n\n  if (previousKeyword !== null && previousKeyword !== void 0 && previousKeyword.is(SQLTokenTypes.Keyword, BY) && previousKeyword !== null && previousKeyword !== void 0 && (_previousKeyword$getP2 = previousKeyword.getPreviousKeyword()) !== null && _previousKeyword$getP2 !== void 0 && _previousKeyword$getP2.is(SQLTokenTypes.Keyword, GROUP) && (previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.isIdentifier() || previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.isDoubleQuotedString())) {\n    return StatementPosition.AfterGroupBy;\n  }\n\n  if (previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Keyword, BY) && previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && (_previousNonWhiteSpac = previousNonWhiteSpace.getPreviousKeyword()) !== null && _previousNonWhiteSpac !== void 0 && _previousNonWhiteSpac.is(SQLTokenTypes.Keyword, ORDER)) {\n    return StatementPosition.AfterOrderByKeywords;\n  }\n\n  if (previousKeyword !== null && previousKeyword !== void 0 && previousKeyword.is(SQLTokenTypes.Keyword, BY) && previousKeyword !== null && previousKeyword !== void 0 && (_previousKeyword$getP3 = previousKeyword.getPreviousKeyword()) !== null && _previousKeyword$getP3 !== void 0 && _previousKeyword$getP3.is(SQLTokenTypes.Keyword, ORDER) && previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && previousNonWhiteSpace.is(SQLTokenTypes.Parenthesis) && previousNonWhiteSpace !== null && previousNonWhiteSpace !== void 0 && (_previousNonWhiteSpac2 = previousNonWhiteSpace.getPreviousNonWhiteSpaceToken()) !== null && _previousNonWhiteSpac2 !== void 0 && _previousNonWhiteSpac2.is(SQLTokenTypes.Function)) {\n    return StatementPosition.AfterOrderByFunction;\n  }\n\n  if (previousKeyword !== null && previousKeyword !== void 0 && previousKeyword.is(SQLTokenTypes.Keyword, DESC) || previousKeyword !== null && previousKeyword !== void 0 && previousKeyword.is(SQLTokenTypes.Keyword, ASC)) {\n    return StatementPosition.AfterOrderByDirection;\n  }\n\n  return StatementPosition.Unknown;\n}","map":{"version":3,"names":["StatementPosition","AND","ASC","BY","DESC","EQUALS","FROM","GROUP","NOT_EQUALS","ORDER","SCHEMA","SELECT","WHERE","SQLTokenTypes","getStatementPosition","currentToken","previousNonWhiteSpace","getPreviousNonWhiteSpaceToken","previousKeyword","getPreviousKeyword","previousIsSlash","is","Operator","isWhiteSpace","previous","Keyword","isIdentifier","SelectKeyword","value","AfterSelectKeyword","Parenthesis","AfterSelectFuncFirstArgument","isParenthesis","FromKeyword","AfterFromKeyword","SchemaFuncFirstArgument","Delimiter","SchemaFuncExtraArgument","isDoubleQuotedString","isVariable","AfterFrom","isKeyword","WhereKey","WhereComparisonOperator","WhereValue","isString","AfterWhereValue","AfterGroupByKeywords","AfterGroupBy","AfterOrderByKeywords","Function","AfterOrderByFunction","AfterOrderByDirection","Unknown"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/statementPosition.ts"],"sourcesContent":["import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport { AND, ASC, BY, DESC, EQUALS, FROM, GROUP, NOT_EQUALS, ORDER, SCHEMA, SELECT, WHERE } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const previousKeyword = currentToken?.getPreviousKeyword();\n\n  const previousIsSlash = currentToken?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Operator, '/');\n  if (\n    currentToken === null ||\n    (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n    (currentToken.is(SQLTokenTypes.Keyword, SELECT) && currentToken.previous === null) ||\n    previousIsSlash ||\n    (currentToken.isIdentifier() && (previousIsSlash || currentToken?.previous === null))\n  ) {\n    return StatementPosition.SelectKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === SELECT) {\n    return StatementPosition.AfterSelectKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SELECT\n  ) {\n    return StatementPosition.AfterSelectFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SELECT && previousNonWhiteSpace?.isParenthesis()) {\n    return StatementPosition.FromKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === FROM) {\n    return StatementPosition.AfterFromKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SCHEMA\n  ) {\n    return StatementPosition.SchemaFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ',')) {\n    return StatementPosition.SchemaFuncExtraArgument;\n  }\n\n  if (\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isDoubleQuotedString()) ||\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isVariable()) ||\n    (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterFrom;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isKeyword() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, AND))\n  ) {\n    return StatementPosition.WhereKey;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.WhereComparisonOperator;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Operator, EQUALS) ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, NOT_EQUALS))\n  ) {\n    return StatementPosition.WhereValue;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isString() || previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterWhereValue;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) || previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ','))\n  ) {\n    return StatementPosition.AfterGroupByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.AfterGroupBy;\n  }\n\n  if (\n    previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) &&\n    previousNonWhiteSpace?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER)\n  ) {\n    return StatementPosition.AfterOrderByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER) &&\n    previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis) &&\n    previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Function)\n  ) {\n    return StatementPosition.AfterOrderByFunction;\n  }\n\n  if (previousKeyword?.is(SQLTokenTypes.Keyword, DESC) || previousKeyword?.is(SQLTokenTypes.Keyword, ASC)) {\n    return StatementPosition.AfterOrderByDirection;\n  }\n\n  return StatementPosition.Unknown;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}