{"ast":null,"code":"const _excluded = [\"value\", \"placeholder\", \"options\", \"onChange\", \"onClickOutside\", \"loadOptions\", \"width\", \"noOptionsMessage\", \"allowCustomValue\", \"allowEmptyValue\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useRef } from 'react';\nimport { useTheme2 } from '../../themes/ThemeContext';\nimport { AsyncSelect, Select } from '../Select/Select';\n/** @internal\n * Should be used only internally by Segment/SegmentAsync which can guarantee that SegmentSelect is hidden\n * when a value is selected. See comment below on closeMenuOnSelect()\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/** @internal */\nexport function SegmentSelect(_ref) {\n  let {\n    value,\n    placeholder = '',\n    options = [],\n    onChange,\n    onClickOutside,\n    loadOptions = undefined,\n    width: widthPixels,\n    noOptionsMessage = '',\n    allowCustomValue = false,\n    allowEmptyValue = false\n  } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const ref = useRef(null);\n  const theme = useTheme2();\n  let width = widthPixels > 0 ? widthPixels / theme.spacing.gridSize : undefined;\n  let Component;\n  let asyncOptions = {};\n\n  if (loadOptions) {\n    Component = AsyncSelect;\n    asyncOptions = {\n      loadOptions,\n      defaultOptions: true\n    };\n  } else {\n    Component = Select;\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", Object.assign({}, rest, {\n    ref: ref,\n    children: /*#__PURE__*/_jsx(Component, Object.assign({\n      width: width,\n      noOptionsMessage: noOptionsMessage,\n      placeholder: placeholder,\n      autoFocus: true,\n      isOpen: true,\n      onChange: onChange,\n      options: options,\n      value: value // Disable \"close menu on select\" option to avoid calling onChange() in onCloseMenu() when a value is selected.\n      // Once the value is selected the Select component (with the menu) will be hidden anyway by the parent component:\n      // Segment or SegmentAsync - hence setting this option has no UX effect.\n      ,\n      closeMenuOnSelect: false,\n      onCloseMenu: () => {\n        if (ref && ref.current) {\n          // https://github.com/JedWatson/react-select/issues/188#issuecomment-279240292\n          // Unfortunately there's no other way of retrieving the value (not yet) created new option\n          const input = ref.current.querySelector('input[id^=\"react-select-\"]');\n\n          if (input && (input.value || allowEmptyValue)) {\n            onChange({\n              value: input.value,\n              label: input.value\n            });\n          } else {\n            onClickOutside();\n          }\n        }\n      },\n      allowCustomValue: allowCustomValue\n    }, asyncOptions))\n  }));\n}","map":{"version":3,"names":["React","useRef","useTheme2","AsyncSelect","Select","SegmentSelect","value","placeholder","options","onChange","onClickOutside","loadOptions","undefined","width","widthPixels","noOptionsMessage","allowCustomValue","allowEmptyValue","rest","ref","theme","spacing","gridSize","Component","asyncOptions","defaultOptions","current","input","querySelector","label"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Segment/SegmentSelect.tsx"],"sourcesContent":["import React, { HTMLProps, useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { useTheme2 } from '../../themes/ThemeContext';\nimport { AsyncSelect, Select } from '../Select/Select';\n\n/** @internal\n * Should be used only internally by Segment/SegmentAsync which can guarantee that SegmentSelect is hidden\n * when a value is selected. See comment below on closeMenuOnSelect()\n */\nexport interface Props<T> extends Omit<HTMLProps<HTMLDivElement>, 'value' | 'onChange'> {\n  value?: SelectableValue<T>;\n  options: Array<SelectableValue<T>>;\n  onChange: (item: SelectableValue<T>) => void;\n  /**\n   * If provided - AsyncSelect will be used allowing to reload options when the value in the input changes\n   */\n  loadOptions?: (inputValue: string) => Promise<Array<SelectableValue<T>>>;\n  onClickOutside: () => void;\n  width: number;\n  noOptionsMessage?: string;\n  allowCustomValue?: boolean;\n  /**\n   * If true, empty value will be passed to onChange callback otherwise using empty value\n   * will work as canceling and using the previous value\n   */\n  allowEmptyValue?: boolean;\n  placeholder?: string;\n}\n\n/** @internal */\nexport function SegmentSelect<T>({\n  value,\n  placeholder = '',\n  options = [],\n  onChange,\n  onClickOutside,\n  loadOptions = undefined,\n  width: widthPixels,\n  noOptionsMessage = '',\n  allowCustomValue = false,\n  allowEmptyValue = false,\n  ...rest\n}: React.PropsWithChildren<Props<T>>) {\n  const ref = useRef<HTMLDivElement>(null);\n  const theme = useTheme2();\n\n  let width = widthPixels > 0 ? widthPixels / theme.spacing.gridSize : undefined;\n\n  let Component;\n  let asyncOptions = {};\n  if (loadOptions) {\n    Component = AsyncSelect;\n    asyncOptions = { loadOptions, defaultOptions: true };\n  } else {\n    Component = Select;\n  }\n\n  return (\n    <div {...rest} ref={ref}>\n      <Component\n        width={width}\n        noOptionsMessage={noOptionsMessage}\n        placeholder={placeholder}\n        autoFocus={true}\n        isOpen={true}\n        onChange={onChange}\n        options={options}\n        value={value}\n        // Disable \"close menu on select\" option to avoid calling onChange() in onCloseMenu() when a value is selected.\n        // Once the value is selected the Select component (with the menu) will be hidden anyway by the parent component:\n        // Segment or SegmentAsync - hence setting this option has no UX effect.\n        closeMenuOnSelect={false}\n        onCloseMenu={() => {\n          if (ref && ref.current) {\n            // https://github.com/JedWatson/react-select/issues/188#issuecomment-279240292\n            // Unfortunately there's no other way of retrieving the value (not yet) created new option\n            const input = ref.current.querySelector('input[id^=\"react-select-\"]') as HTMLInputElement;\n            if (input && (input.value || allowEmptyValue)) {\n              onChange({ value: input.value as any, label: input.value });\n            } else {\n              onClickOutside();\n            }\n          }\n        }}\n        allowCustomValue={allowCustomValue}\n        {...asyncOptions}\n      />\n    </div>\n  );\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAA2BC,MAA3B,QAAyC,OAAzC;AAIA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AAEA;AACA;AACA;AACA;;;;AAqBA;AACA,OAAO,SAASC,aAAT,OAY+B;EAAA,IAZL;IAC/BC,KAD+B;IAE/BC,WAAW,GAAG,EAFiB;IAG/BC,OAAO,GAAG,EAHqB;IAI/BC,QAJ+B;IAK/BC,cAL+B;IAM/BC,WAAW,GAAGC,SANiB;IAO/BC,KAAK,EAAEC,WAPwB;IAQ/BC,gBAAgB,GAAG,EARY;IAS/BC,gBAAgB,GAAG,KATY;IAU/BC,eAAe,GAAG;EAVa,CAYK;EAAA,IADjCC,IACiC;;EACpC,MAAMC,GAAG,GAAGlB,MAAM,CAAiB,IAAjB,CAAlB;EACA,MAAMmB,KAAK,GAAGlB,SAAS,EAAvB;EAEA,IAAIW,KAAK,GAAGC,WAAW,GAAG,CAAd,GAAkBA,WAAW,GAAGM,KAAK,CAACC,OAAN,CAAcC,QAA9C,GAAyDV,SAArE;EAEA,IAAIW,SAAJ;EACA,IAAIC,YAAY,GAAG,EAAnB;;EACA,IAAIb,WAAJ,EAAiB;IACfY,SAAS,GAAGpB,WAAZ;IACAqB,YAAY,GAAG;MAAEb,WAAF;MAAec,cAAc,EAAE;IAA/B,CAAf;EACD,CAHD,MAGO;IACLF,SAAS,GAAGnB,MAAZ;EACD;;EAED,oBACE,8BAASc,IAAT;IAAe,GAAG,EAAEC,GAApB;IAAA,uBACE,KAAC,SAAD;MACE,KAAK,EAAEN,KADT;MAEE,gBAAgB,EAAEE,gBAFpB;MAGE,WAAW,EAAER,WAHf;MAIE,SAAS,EAAE,IAJb;MAKE,MAAM,EAAE,IALV;MAME,QAAQ,EAAEE,QANZ;MAOE,OAAO,EAAED,OAPX;MAQE,KAAK,EAAEF,KART,CASE;MACA;MACA;MAXF;MAYE,iBAAiB,EAAE,KAZrB;MAaE,WAAW,EAAE,MAAM;QACjB,IAAIa,GAAG,IAAIA,GAAG,CAACO,OAAf,EAAwB;UACtB;UACA;UACA,MAAMC,KAAK,GAAGR,GAAG,CAACO,OAAJ,CAAYE,aAAZ,CAA0B,4BAA1B,CAAd;;UACA,IAAID,KAAK,KAAKA,KAAK,CAACrB,KAAN,IAAeW,eAApB,CAAT,EAA+C;YAC7CR,QAAQ,CAAC;cAAEH,KAAK,EAAEqB,KAAK,CAACrB,KAAf;cAA6BuB,KAAK,EAAEF,KAAK,CAACrB;YAA1C,CAAD,CAAR;UACD,CAFD,MAEO;YACLI,cAAc;UACf;QACF;MACF,CAxBH;MAyBE,gBAAgB,EAAEM;IAzBpB,GA0BMQ,YA1BN;EADF,GADF;AAgCD"},"metadata":{},"sourceType":"module"}