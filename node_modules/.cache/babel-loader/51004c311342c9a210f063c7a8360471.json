{"ast":null,"code":"import { Block, Document, Text, Value } from 'slate';\nexport const SCHEMA = {\n  document: {\n    nodes: [{\n      match: [{\n        type: 'paragraph'\n      }, {\n        type: 'code_block'\n      }, {\n        type: 'code_line'\n      }]\n    }]\n  },\n  inlines: {}\n};\nexport const makeFragment = (text, syntax) => {\n  const lines = text.split('\\n').map(line => Block.create({\n    type: 'code_line',\n    nodes: [Text.create(line)]\n  }));\n  const block = Block.create({\n    data: {\n      syntax\n    },\n    type: 'code_block',\n    nodes: lines\n  });\n  return Document.create({\n    nodes: [block]\n  });\n};\nexport const makeValue = (text, syntax) => {\n  const fragment = makeFragment(text, syntax);\n  return Value.create({\n    document: fragment\n  });\n};","map":{"version":3,"names":["Block","Document","Text","Value","SCHEMA","document","nodes","match","type","inlines","makeFragment","text","syntax","lines","split","map","line","create","block","data","makeValue","fragment"],"sources":["/home/soula/grafana/packages/grafana-ui/src/utils/slate.ts"],"sourcesContent":["import { Block, Document, Text, Value, SchemaProperties } from 'slate';\n\nexport const SCHEMA: SchemaProperties = {\n  document: {\n    nodes: [\n      {\n        match: [{ type: 'paragraph' }, { type: 'code_block' }, { type: 'code_line' }],\n      },\n    ],\n  },\n  inlines: {},\n};\n\nexport const makeFragment = (text: string, syntax?: string): Document => {\n  const lines = text.split('\\n').map((line) =>\n    Block.create({\n      type: 'code_line',\n      nodes: [Text.create(line)],\n    })\n  );\n\n  const block = Block.create({\n    data: {\n      syntax,\n    },\n    type: 'code_block',\n    nodes: lines,\n  });\n\n  return Document.create({\n    nodes: [block],\n  });\n};\n\nexport const makeValue = (text: string, syntax?: string): Value => {\n  const fragment = makeFragment(text, syntax);\n\n  return Value.create({\n    document: fragment,\n  });\n};\n"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,IAA1B,EAAgCC,KAAhC,QAA+D,OAA/D;AAEA,OAAO,MAAMC,MAAwB,GAAG;EACtCC,QAAQ,EAAE;IACRC,KAAK,EAAE,CACL;MACEC,KAAK,EAAE,CAAC;QAAEC,IAAI,EAAE;MAAR,CAAD,EAAwB;QAAEA,IAAI,EAAE;MAAR,CAAxB,EAAgD;QAAEA,IAAI,EAAE;MAAR,CAAhD;IADT,CADK;EADC,CAD4B;EAQtCC,OAAO,EAAE;AAR6B,CAAjC;AAWP,OAAO,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAeC,MAAf,KAA6C;EACvE,MAAMC,KAAK,GAAGF,IAAI,CAACG,KAAL,CAAW,IAAX,EAAiBC,GAAjB,CAAsBC,IAAD,IACjChB,KAAK,CAACiB,MAAN,CAAa;IACXT,IAAI,EAAE,WADK;IAEXF,KAAK,EAAE,CAACJ,IAAI,CAACe,MAAL,CAAYD,IAAZ,CAAD;EAFI,CAAb,CADY,CAAd;EAOA,MAAME,KAAK,GAAGlB,KAAK,CAACiB,MAAN,CAAa;IACzBE,IAAI,EAAE;MACJP;IADI,CADmB;IAIzBJ,IAAI,EAAE,YAJmB;IAKzBF,KAAK,EAAEO;EALkB,CAAb,CAAd;EAQA,OAAOZ,QAAQ,CAACgB,MAAT,CAAgB;IACrBX,KAAK,EAAE,CAACY,KAAD;EADc,CAAhB,CAAP;AAGD,CAnBM;AAqBP,OAAO,MAAME,SAAS,GAAG,CAACT,IAAD,EAAeC,MAAf,KAA0C;EACjE,MAAMS,QAAQ,GAAGX,YAAY,CAACC,IAAD,EAAOC,MAAP,CAA7B;EAEA,OAAOT,KAAK,CAACc,MAAN,CAAa;IAClBZ,QAAQ,EAAEgB;EADQ,CAAb,CAAP;AAGD,CANM"},"metadata":{},"sourceType":"module"}