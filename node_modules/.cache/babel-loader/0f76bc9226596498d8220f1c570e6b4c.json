{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { chain } from 'lodash';\nimport { DataLinkBuiltInVars, deprecationWarning, FieldType, getFieldDisplayName, locationUtil, textUtil, urlUtil, VariableOrigin, VariableSuggestionsScope } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { getConfig } from 'app/core/config';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getVariablesUrlParams } from '../../variables/getAllVariableValuesForUrl';\nconst timeRangeVars = [{\n  value: `${DataLinkBuiltInVars.keepTime}`,\n  label: 'Time range',\n  documentation: 'Adds current time range',\n  origin: VariableOrigin.BuiltIn\n}, {\n  value: `${DataLinkBuiltInVars.timeRangeFrom}`,\n  label: 'Time range: from',\n  documentation: \"Adds current time range's from value\",\n  origin: VariableOrigin.BuiltIn\n}, {\n  value: `${DataLinkBuiltInVars.timeRangeTo}`,\n  label: 'Time range: to',\n  documentation: \"Adds current time range's to value\",\n  origin: VariableOrigin.BuiltIn\n}];\nconst seriesVars = [{\n  value: `${DataLinkBuiltInVars.seriesName}`,\n  label: 'Name',\n  documentation: 'Name of the series',\n  origin: VariableOrigin.Series\n}];\nconst valueVars = [{\n  value: `${DataLinkBuiltInVars.valueNumeric}`,\n  label: 'Numeric',\n  documentation: 'Numeric representation of selected value',\n  origin: VariableOrigin.Value\n}, {\n  value: `${DataLinkBuiltInVars.valueText}`,\n  label: 'Text',\n  documentation: 'Text representation of selected value',\n  origin: VariableOrigin.Value\n}, {\n  value: `${DataLinkBuiltInVars.valueRaw}`,\n  label: 'Raw',\n  documentation: 'Raw value',\n  origin: VariableOrigin.Value\n}];\n\nconst buildLabelPath = label => {\n  return label.includes('.') || label.trim().includes(' ') ? `[\"${label}\"]` : `.${label}`;\n};\n\nexport const getPanelLinksVariableSuggestions = () => [...getTemplateSrv().getVariables().map(variable => ({\n  value: variable.name,\n  label: variable.name,\n  origin: VariableOrigin.Template\n})), {\n  value: `${DataLinkBuiltInVars.includeVars}`,\n  label: 'All variables',\n  documentation: 'Adds current variables',\n  origin: VariableOrigin.Template\n}, ...timeRangeVars];\n\nconst getFieldVars = dataFrames => {\n  const all = [];\n\n  for (const df of dataFrames) {\n    for (const f of df.fields) {\n      if (f.labels) {\n        for (const k of Object.keys(f.labels)) {\n          all.push(k);\n        }\n      }\n    }\n  }\n\n  const labels = chain(all).flatten().uniq().value();\n  return [{\n    value: `${DataLinkBuiltInVars.fieldName}`,\n    label: 'Name',\n    documentation: 'Field name of the clicked datapoint (in ms epoch)',\n    origin: VariableOrigin.Field\n  }, ...labels.map(label => ({\n    value: `__field.labels${buildLabelPath(label)}`,\n    label: `labels.${label}`,\n    documentation: `${label} label value`,\n    origin: VariableOrigin.Field\n  }))];\n};\n\nexport const getDataFrameVars = dataFrames => {\n  let numeric = undefined;\n  let title = undefined;\n  const suggestions = [];\n  const keys = {};\n\n  if (dataFrames.length !== 1) {\n    // It's not possible to access fields of other dataframes. So if there are multiple dataframes we need to skip these suggestions.\n    // Also return early if there are no dataFrames.\n    return [];\n  }\n\n  const frame = dataFrames[0];\n\n  for (const field of frame.fields) {\n    const displayName = getFieldDisplayName(field, frame, dataFrames);\n\n    if (keys[displayName]) {\n      continue;\n    }\n\n    suggestions.push({\n      value: `__data.fields${buildLabelPath(displayName)}`,\n      label: `${displayName}`,\n      documentation: `Formatted value for ${displayName} on the same row`,\n      origin: VariableOrigin.Fields\n    });\n    keys[displayName] = true;\n\n    if (!numeric && field.type === FieldType.number) {\n      numeric = Object.assign({}, field, {\n        name: displayName\n      });\n    }\n\n    if (!title && field.config.displayName && field.config.displayName !== field.name) {\n      title = Object.assign({}, field, {\n        name: displayName\n      });\n    }\n  }\n\n  if (suggestions.length) {\n    suggestions.push({\n      value: `__data.fields[0]`,\n      label: `Select by index`,\n      documentation: `Enter the field order`,\n      origin: VariableOrigin.Fields\n    });\n  }\n\n  if (numeric) {\n    suggestions.push({\n      value: `__data.fields${buildLabelPath(numeric.name)}.numeric`,\n      label: `Show numeric value`,\n      documentation: `the numeric field value`,\n      origin: VariableOrigin.Fields\n    });\n    suggestions.push({\n      value: `__data.fields${buildLabelPath(numeric.name)}.text`,\n      label: `Show text value`,\n      documentation: `the text value`,\n      origin: VariableOrigin.Fields\n    });\n  }\n\n  if (title) {\n    suggestions.push({\n      value: `__data.fields${buildLabelPath(title.name)}`,\n      label: `Select by title`,\n      documentation: `Use the title to pick the field`,\n      origin: VariableOrigin.Fields\n    });\n  }\n\n  return suggestions;\n};\nexport const getDataLinksVariableSuggestions = (dataFrames, scope) => {\n  const valueTimeVar = {\n    value: `${DataLinkBuiltInVars.valueTime}`,\n    label: 'Time',\n    documentation: 'Time value of the clicked datapoint (in ms epoch)',\n    origin: VariableOrigin.Value\n  };\n  const includeValueVars = scope === VariableSuggestionsScope.Values;\n  return includeValueVars ? [...seriesVars, ...getFieldVars(dataFrames), ...valueVars, valueTimeVar, ...getDataFrameVars(dataFrames), ...getPanelLinksVariableSuggestions()] : [...seriesVars, ...getFieldVars(dataFrames), ...getDataFrameVars(dataFrames), ...getPanelLinksVariableSuggestions()];\n};\nexport const getCalculationValueDataLinksVariableSuggestions = dataFrames => {\n  const fieldVars = getFieldVars(dataFrames);\n  const valueCalcVar = {\n    value: `${DataLinkBuiltInVars.valueCalc}`,\n    label: 'Calculation name',\n    documentation: 'Name of the calculation the value is a result of',\n    origin: VariableOrigin.Value\n  };\n  return [...seriesVars, ...fieldVars, ...valueVars, valueCalcVar, ...getPanelLinksVariableSuggestions()];\n};\nexport class LinkSrv {\n  constructor() {\n    _defineProperty(this, \"getDataLinkUIModel\", (link, replaceVariables, origin) => {\n      var _link$title;\n\n      let href = link.url;\n\n      if (link.onBuildUrl) {\n        href = link.onBuildUrl({\n          origin,\n          replaceVariables\n        });\n      }\n\n      const info = {\n        href: locationUtil.assureBaseUrl(href.replace(/\\n/g, '')),\n        title: (_link$title = link.title) !== null && _link$title !== void 0 ? _link$title : '',\n        target: link.targetBlank ? '_blank' : undefined,\n        origin\n      };\n\n      if (replaceVariables) {\n        info.href = replaceVariables(info.href);\n        info.title = replaceVariables(link.title);\n      }\n\n      if (link.onClick) {\n        info.onClick = e => {\n          link.onClick({\n            origin,\n            replaceVariables,\n            e\n          });\n        };\n      }\n\n      info.href = getConfig().disableSanitizeHtml ? info.href : textUtil.sanitizeUrl(info.href);\n      return info;\n    });\n  }\n\n  getLinkUrl(link) {\n    let url = locationUtil.assureBaseUrl(getTemplateSrv().replace(link.url || ''));\n    let params = {};\n\n    if (link.keepTime) {\n      const range = getTimeSrv().timeRangeForUrl();\n      params['from'] = range.from;\n      params['to'] = range.to;\n    }\n\n    if (link.includeVars) {\n      params = Object.assign({}, params, getVariablesUrlParams());\n    }\n\n    url = urlUtil.appendQueryToUrl(url, urlUtil.toUrlParams(params));\n    return getConfig().disableSanitizeHtml ? url : textUtil.sanitizeUrl(url);\n  }\n\n  getAnchorInfo(link) {\n    const templateSrv = getTemplateSrv();\n    const info = {};\n    info.href = this.getLinkUrl(link);\n    info.title = templateSrv.replace(link.title || '');\n    info.tooltip = templateSrv.replace(link.tooltip || '');\n    return info;\n  }\n  /**\n   * Returns LinkModel which is basically a DataLink with all values interpolated through the templateSrv.\n   */\n\n\n  /**\n   * getPanelLinkAnchorInfo method is left for plugins compatibility reasons\n   *\n   * @deprecated Drilldown links should be generated using getDataLinkUIModel method\n   */\n  getPanelLinkAnchorInfo(link, scopedVars) {\n    deprecationWarning('link_srv.ts', 'getPanelLinkAnchorInfo', 'getDataLinkUIModel');\n\n    const replace = (value, vars, fmt) => getTemplateSrv().replace(value, Object.assign({}, scopedVars, vars), fmt);\n\n    return this.getDataLinkUIModel(link, replace, {});\n  }\n\n}\nlet singleton;\nexport function setLinkSrv(srv) {\n  singleton = srv;\n}\nexport function getLinkSrv() {\n  if (!singleton) {\n    singleton = new LinkSrv();\n  }\n\n  return singleton;\n}","map":{"version":3,"names":["chain","DataLinkBuiltInVars","deprecationWarning","FieldType","getFieldDisplayName","locationUtil","textUtil","urlUtil","VariableOrigin","VariableSuggestionsScope","getTemplateSrv","getConfig","getTimeSrv","getVariablesUrlParams","timeRangeVars","value","keepTime","label","documentation","origin","BuiltIn","timeRangeFrom","timeRangeTo","seriesVars","seriesName","Series","valueVars","valueNumeric","Value","valueText","valueRaw","buildLabelPath","includes","trim","getPanelLinksVariableSuggestions","getVariables","map","variable","name","Template","includeVars","getFieldVars","dataFrames","all","df","f","fields","labels","k","Object","keys","push","flatten","uniq","fieldName","Field","getDataFrameVars","numeric","undefined","title","suggestions","length","frame","field","displayName","Fields","type","number","config","getDataLinksVariableSuggestions","scope","valueTimeVar","valueTime","includeValueVars","Values","getCalculationValueDataLinksVariableSuggestions","fieldVars","valueCalcVar","valueCalc","LinkSrv","link","replaceVariables","href","url","onBuildUrl","info","assureBaseUrl","replace","target","targetBlank","onClick","e","disableSanitizeHtml","sanitizeUrl","getLinkUrl","params","range","timeRangeForUrl","from","to","appendQueryToUrl","toUrlParams","getAnchorInfo","templateSrv","tooltip","getPanelLinkAnchorInfo","scopedVars","vars","fmt","getDataLinkUIModel","singleton","setLinkSrv","srv","getLinkSrv"],"sources":["/home/soula/grafana/public/app/features/panel/panellinks/link_srv.ts"],"sourcesContent":["import { chain } from 'lodash';\n\nimport {\n  DataFrame,\n  DataLink,\n  DataLinkBuiltInVars,\n  deprecationWarning,\n  Field,\n  FieldType,\n  getFieldDisplayName,\n  InterpolateFunction,\n  KeyValue,\n  LinkModel,\n  locationUtil,\n  ScopedVars,\n  textUtil,\n  urlUtil,\n  VariableOrigin,\n  VariableSuggestion,\n  VariableSuggestionsScope,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { getConfig } from 'app/core/config';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { getVariablesUrlParams } from '../../variables/getAllVariableValuesForUrl';\n\nconst timeRangeVars = [\n  {\n    value: `${DataLinkBuiltInVars.keepTime}`,\n    label: 'Time range',\n    documentation: 'Adds current time range',\n    origin: VariableOrigin.BuiltIn,\n  },\n  {\n    value: `${DataLinkBuiltInVars.timeRangeFrom}`,\n    label: 'Time range: from',\n    documentation: \"Adds current time range's from value\",\n    origin: VariableOrigin.BuiltIn,\n  },\n  {\n    value: `${DataLinkBuiltInVars.timeRangeTo}`,\n    label: 'Time range: to',\n    documentation: \"Adds current time range's to value\",\n    origin: VariableOrigin.BuiltIn,\n  },\n];\n\nconst seriesVars = [\n  {\n    value: `${DataLinkBuiltInVars.seriesName}`,\n    label: 'Name',\n    documentation: 'Name of the series',\n    origin: VariableOrigin.Series,\n  },\n];\n\nconst valueVars = [\n  {\n    value: `${DataLinkBuiltInVars.valueNumeric}`,\n    label: 'Numeric',\n    documentation: 'Numeric representation of selected value',\n    origin: VariableOrigin.Value,\n  },\n  {\n    value: `${DataLinkBuiltInVars.valueText}`,\n    label: 'Text',\n    documentation: 'Text representation of selected value',\n    origin: VariableOrigin.Value,\n  },\n  {\n    value: `${DataLinkBuiltInVars.valueRaw}`,\n    label: 'Raw',\n    documentation: 'Raw value',\n    origin: VariableOrigin.Value,\n  },\n];\n\nconst buildLabelPath = (label: string) => {\n  return label.includes('.') || label.trim().includes(' ') ? `[\"${label}\"]` : `.${label}`;\n};\n\nexport const getPanelLinksVariableSuggestions = (): VariableSuggestion[] => [\n  ...getTemplateSrv()\n    .getVariables()\n    .map((variable) => ({\n      value: variable.name as string,\n      label: variable.name,\n      origin: VariableOrigin.Template,\n    })),\n  {\n    value: `${DataLinkBuiltInVars.includeVars}`,\n    label: 'All variables',\n    documentation: 'Adds current variables',\n    origin: VariableOrigin.Template,\n  },\n  ...timeRangeVars,\n];\n\nconst getFieldVars = (dataFrames: DataFrame[]) => {\n  const all = [];\n  for (const df of dataFrames) {\n    for (const f of df.fields) {\n      if (f.labels) {\n        for (const k of Object.keys(f.labels)) {\n          all.push(k);\n        }\n      }\n    }\n  }\n\n  const labels = chain(all).flatten().uniq().value();\n\n  return [\n    {\n      value: `${DataLinkBuiltInVars.fieldName}`,\n      label: 'Name',\n      documentation: 'Field name of the clicked datapoint (in ms epoch)',\n      origin: VariableOrigin.Field,\n    },\n    ...labels.map((label) => ({\n      value: `__field.labels${buildLabelPath(label)}`,\n      label: `labels.${label}`,\n      documentation: `${label} label value`,\n      origin: VariableOrigin.Field,\n    })),\n  ];\n};\n\nexport const getDataFrameVars = (dataFrames: DataFrame[]) => {\n  let numeric: Field | undefined = undefined;\n  let title: Field | undefined = undefined;\n  const suggestions: VariableSuggestion[] = [];\n  const keys: KeyValue<true> = {};\n\n  if (dataFrames.length !== 1) {\n    // It's not possible to access fields of other dataframes. So if there are multiple dataframes we need to skip these suggestions.\n    // Also return early if there are no dataFrames.\n    return [];\n  }\n\n  const frame = dataFrames[0];\n\n  for (const field of frame.fields) {\n    const displayName = getFieldDisplayName(field, frame, dataFrames);\n\n    if (keys[displayName]) {\n      continue;\n    }\n\n    suggestions.push({\n      value: `__data.fields${buildLabelPath(displayName)}`,\n      label: `${displayName}`,\n      documentation: `Formatted value for ${displayName} on the same row`,\n      origin: VariableOrigin.Fields,\n    });\n\n    keys[displayName] = true;\n\n    if (!numeric && field.type === FieldType.number) {\n      numeric = { ...field, name: displayName };\n    }\n\n    if (!title && field.config.displayName && field.config.displayName !== field.name) {\n      title = { ...field, name: displayName };\n    }\n  }\n\n  if (suggestions.length) {\n    suggestions.push({\n      value: `__data.fields[0]`,\n      label: `Select by index`,\n      documentation: `Enter the field order`,\n      origin: VariableOrigin.Fields,\n    });\n  }\n\n  if (numeric) {\n    suggestions.push({\n      value: `__data.fields${buildLabelPath(numeric.name)}.numeric`,\n      label: `Show numeric value`,\n      documentation: `the numeric field value`,\n      origin: VariableOrigin.Fields,\n    });\n    suggestions.push({\n      value: `__data.fields${buildLabelPath(numeric.name)}.text`,\n      label: `Show text value`,\n      documentation: `the text value`,\n      origin: VariableOrigin.Fields,\n    });\n  }\n\n  if (title) {\n    suggestions.push({\n      value: `__data.fields${buildLabelPath(title.name)}`,\n      label: `Select by title`,\n      documentation: `Use the title to pick the field`,\n      origin: VariableOrigin.Fields,\n    });\n  }\n\n  return suggestions;\n};\n\nexport const getDataLinksVariableSuggestions = (\n  dataFrames: DataFrame[],\n  scope?: VariableSuggestionsScope\n): VariableSuggestion[] => {\n  const valueTimeVar = {\n    value: `${DataLinkBuiltInVars.valueTime}`,\n    label: 'Time',\n    documentation: 'Time value of the clicked datapoint (in ms epoch)',\n    origin: VariableOrigin.Value,\n  };\n  const includeValueVars = scope === VariableSuggestionsScope.Values;\n\n  return includeValueVars\n    ? [\n        ...seriesVars,\n        ...getFieldVars(dataFrames),\n        ...valueVars,\n        valueTimeVar,\n        ...getDataFrameVars(dataFrames),\n        ...getPanelLinksVariableSuggestions(),\n      ]\n    : [\n        ...seriesVars,\n        ...getFieldVars(dataFrames),\n        ...getDataFrameVars(dataFrames),\n        ...getPanelLinksVariableSuggestions(),\n      ];\n};\n\nexport const getCalculationValueDataLinksVariableSuggestions = (dataFrames: DataFrame[]): VariableSuggestion[] => {\n  const fieldVars = getFieldVars(dataFrames);\n  const valueCalcVar = {\n    value: `${DataLinkBuiltInVars.valueCalc}`,\n    label: 'Calculation name',\n    documentation: 'Name of the calculation the value is a result of',\n    origin: VariableOrigin.Value,\n  };\n  return [...seriesVars, ...fieldVars, ...valueVars, valueCalcVar, ...getPanelLinksVariableSuggestions()];\n};\n\nexport interface LinkService {\n  getDataLinkUIModel: <T>(link: DataLink, replaceVariables: InterpolateFunction | undefined, origin: T) => LinkModel<T>;\n  getAnchorInfo: (link: any) => any;\n  getLinkUrl: (link: any) => string;\n}\n\nexport class LinkSrv implements LinkService {\n  getLinkUrl(link: any) {\n    let url = locationUtil.assureBaseUrl(getTemplateSrv().replace(link.url || ''));\n    let params: { [key: string]: any } = {};\n\n    if (link.keepTime) {\n      const range = getTimeSrv().timeRangeForUrl();\n      params['from'] = range.from;\n      params['to'] = range.to;\n    }\n\n    if (link.includeVars) {\n      params = {\n        ...params,\n        ...getVariablesUrlParams(),\n      };\n    }\n\n    url = urlUtil.appendQueryToUrl(url, urlUtil.toUrlParams(params));\n    return getConfig().disableSanitizeHtml ? url : textUtil.sanitizeUrl(url);\n  }\n\n  getAnchorInfo(link: any) {\n    const templateSrv = getTemplateSrv();\n    const info: any = {};\n    info.href = this.getLinkUrl(link);\n    info.title = templateSrv.replace(link.title || '');\n    info.tooltip = templateSrv.replace(link.tooltip || '');\n    return info;\n  }\n\n  /**\n   * Returns LinkModel which is basically a DataLink with all values interpolated through the templateSrv.\n   */\n  getDataLinkUIModel = <T>(\n    link: DataLink,\n    replaceVariables: InterpolateFunction | undefined,\n    origin: T\n  ): LinkModel<T> => {\n    let href = link.url;\n\n    if (link.onBuildUrl) {\n      href = link.onBuildUrl({\n        origin,\n        replaceVariables,\n      });\n    }\n\n    const info: LinkModel<T> = {\n      href: locationUtil.assureBaseUrl(href.replace(/\\n/g, '')),\n      title: link.title ?? '',\n      target: link.targetBlank ? '_blank' : undefined,\n      origin,\n    };\n\n    if (replaceVariables) {\n      info.href = replaceVariables(info.href);\n      info.title = replaceVariables(link.title);\n    }\n\n    if (link.onClick) {\n      info.onClick = (e) => {\n        link.onClick!({\n          origin,\n          replaceVariables,\n          e,\n        });\n      };\n    }\n\n    info.href = getConfig().disableSanitizeHtml ? info.href : textUtil.sanitizeUrl(info.href);\n\n    return info;\n  };\n\n  /**\n   * getPanelLinkAnchorInfo method is left for plugins compatibility reasons\n   *\n   * @deprecated Drilldown links should be generated using getDataLinkUIModel method\n   */\n  getPanelLinkAnchorInfo(link: DataLink, scopedVars: ScopedVars) {\n    deprecationWarning('link_srv.ts', 'getPanelLinkAnchorInfo', 'getDataLinkUIModel');\n    const replace: InterpolateFunction = (value, vars, fmt) =>\n      getTemplateSrv().replace(value, { ...scopedVars, ...vars }, fmt);\n\n    return this.getDataLinkUIModel(link, replace, {});\n  }\n}\n\nlet singleton: LinkService | undefined;\n\nexport function setLinkSrv(srv: LinkService) {\n  singleton = srv;\n}\n\nexport function getLinkSrv(): LinkService {\n  if (!singleton) {\n    singleton = new LinkSrv();\n  }\n  return singleton;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}