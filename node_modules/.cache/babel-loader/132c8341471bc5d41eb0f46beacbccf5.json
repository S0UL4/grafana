{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { InlineField, Select } from '@grafana/ui';\nimport { ClassicConditions } from './components/ClassicConditions';\nimport { Math } from './components/Math';\nimport { Reduce } from './components/Reduce';\nimport { Resample } from './components/Resample';\nimport { ExpressionQueryType, gelTypes } from './types';\nimport { getDefaults } from './utils/expressionTypes';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst labelWidth = 14;\nexport class ExpressionQueryEditor extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onSelectExpressionType\", item => {\n      const {\n        query,\n        onChange\n      } = this.props;\n      onChange(getDefaults(Object.assign({}, query, {\n        type: item.value\n      })));\n    });\n  }\n\n  renderExpressionType() {\n    const {\n      onChange,\n      onRunQuery,\n      query,\n      queries\n    } = this.props;\n    const refIds = queries.filter(q => query.refId !== q.refId).map(q => ({\n      value: q.refId,\n      label: q.refId\n    }));\n\n    switch (query.type) {\n      case ExpressionQueryType.math:\n        return /*#__PURE__*/_jsx(Math, {\n          onChange: onChange,\n          query: query,\n          labelWidth: labelWidth,\n          onRunQuery: onRunQuery\n        });\n\n      case ExpressionQueryType.reduce:\n        return /*#__PURE__*/_jsx(Reduce, {\n          refIds: refIds,\n          onChange: onChange,\n          labelWidth: labelWidth,\n          query: query\n        });\n\n      case ExpressionQueryType.resample:\n        return /*#__PURE__*/_jsx(Resample, {\n          query: query,\n          labelWidth: labelWidth,\n          onChange: onChange,\n          refIds: refIds\n        });\n\n      case ExpressionQueryType.classic:\n        return /*#__PURE__*/_jsx(ClassicConditions, {\n          onChange: onChange,\n          query: query,\n          refIds: refIds\n        });\n    }\n  }\n\n  render() {\n    const {\n      query\n    } = this.props;\n    const selected = gelTypes.find(o => o.value === query.type);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        label: \"Operation\",\n        labelWidth: labelWidth,\n        children: /*#__PURE__*/_jsx(Select, {\n          options: gelTypes,\n          value: selected,\n          onChange: this.onSelectExpressionType,\n          width: 25\n        })\n      }), this.renderExpressionType()]\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","InlineField","Select","ClassicConditions","Math","Reduce","Resample","ExpressionQueryType","gelTypes","getDefaults","labelWidth","ExpressionQueryEditor","item","query","onChange","props","type","value","renderExpressionType","onRunQuery","queries","refIds","filter","q","refId","map","label","math","reduce","resample","classic","render","selected","find","o","onSelectExpressionType"],"sources":["/home/soula/grafana/public/app/features/expressions/ExpressionQueryEditor.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { DataSourceApi, QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { InlineField, Select } from '@grafana/ui';\n\nimport { ClassicConditions } from './components/ClassicConditions';\nimport { Math } from './components/Math';\nimport { Reduce } from './components/Reduce';\nimport { Resample } from './components/Resample';\nimport { ExpressionQuery, ExpressionQueryType, gelTypes } from './types';\nimport { getDefaults } from './utils/expressionTypes';\n\ntype Props = QueryEditorProps<DataSourceApi<ExpressionQuery>, ExpressionQuery>;\n\nconst labelWidth = 14;\nexport class ExpressionQueryEditor extends PureComponent<Props> {\n  onSelectExpressionType = (item: SelectableValue<ExpressionQueryType>) => {\n    const { query, onChange } = this.props;\n\n    onChange(getDefaults({ ...query, type: item.value! }));\n  };\n\n  renderExpressionType() {\n    const { onChange, onRunQuery, query, queries } = this.props;\n    const refIds = queries!.filter((q) => query.refId !== q.refId).map((q) => ({ value: q.refId, label: q.refId }));\n\n    switch (query.type) {\n      case ExpressionQueryType.math:\n        return <Math onChange={onChange} query={query} labelWidth={labelWidth} onRunQuery={onRunQuery} />;\n\n      case ExpressionQueryType.reduce:\n        return <Reduce refIds={refIds} onChange={onChange} labelWidth={labelWidth} query={query} />;\n\n      case ExpressionQueryType.resample:\n        return <Resample query={query} labelWidth={labelWidth} onChange={onChange} refIds={refIds} />;\n\n      case ExpressionQueryType.classic:\n        return <ClassicConditions onChange={onChange} query={query} refIds={refIds} />;\n    }\n  }\n\n  render() {\n    const { query } = this.props;\n    const selected = gelTypes.find((o) => o.value === query.type);\n\n    return (\n      <div>\n        <InlineField label=\"Operation\" labelWidth={labelWidth}>\n          <Select options={gelTypes} value={selected} onChange={this.onSelectExpressionType} width={25} />\n        </InlineField>\n        {this.renderExpressionType()}\n      </div>\n    );\n  }\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAGA,SAASC,WAAT,EAAsBC,MAAtB,QAAoC,aAApC;AAEA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAA0BC,mBAA1B,EAA+CC,QAA/C,QAA+D,SAA/D;AACA,SAASC,WAAT,QAA4B,yBAA5B;;;AAIA,MAAMC,UAAU,GAAG,EAAnB;AACA,OAAO,MAAMC,qBAAN,SAAoCX,aAApC,CAAyD;EAAA;IAAA;;IAAA,gDACpCY,IAAD,IAAgD;MACvE,MAAM;QAAEC,KAAF;QAASC;MAAT,IAAsB,KAAKC,KAAjC;MAEAD,QAAQ,CAACL,WAAW,mBAAMI,KAAN;QAAaG,IAAI,EAAEJ,IAAI,CAACK;MAAxB,GAAZ,CAAR;IACD,CAL6D;EAAA;;EAO9DC,oBAAoB,GAAG;IACrB,MAAM;MAAEJ,QAAF;MAAYK,UAAZ;MAAwBN,KAAxB;MAA+BO;IAA/B,IAA2C,KAAKL,KAAtD;IACA,MAAMM,MAAM,GAAGD,OAAO,CAAEE,MAAT,CAAiBC,CAAD,IAAOV,KAAK,CAACW,KAAN,KAAgBD,CAAC,CAACC,KAAzC,EAAgDC,GAAhD,CAAqDF,CAAD,KAAQ;MAAEN,KAAK,EAAEM,CAAC,CAACC,KAAX;MAAkBE,KAAK,EAAEH,CAAC,CAACC;IAA3B,CAAR,CAApD,CAAf;;IAEA,QAAQX,KAAK,CAACG,IAAd;MACE,KAAKT,mBAAmB,CAACoB,IAAzB;QACE,oBAAO,KAAC,IAAD;UAAM,QAAQ,EAAEb,QAAhB;UAA0B,KAAK,EAAED,KAAjC;UAAwC,UAAU,EAAEH,UAApD;UAAgE,UAAU,EAAES;QAA5E,EAAP;;MAEF,KAAKZ,mBAAmB,CAACqB,MAAzB;QACE,oBAAO,KAAC,MAAD;UAAQ,MAAM,EAAEP,MAAhB;UAAwB,QAAQ,EAAEP,QAAlC;UAA4C,UAAU,EAAEJ,UAAxD;UAAoE,KAAK,EAAEG;QAA3E,EAAP;;MAEF,KAAKN,mBAAmB,CAACsB,QAAzB;QACE,oBAAO,KAAC,QAAD;UAAU,KAAK,EAAEhB,KAAjB;UAAwB,UAAU,EAAEH,UAApC;UAAgD,QAAQ,EAAEI,QAA1D;UAAoE,MAAM,EAAEO;QAA5E,EAAP;;MAEF,KAAKd,mBAAmB,CAACuB,OAAzB;QACE,oBAAO,KAAC,iBAAD;UAAmB,QAAQ,EAAEhB,QAA7B;UAAuC,KAAK,EAAED,KAA9C;UAAqD,MAAM,EAAEQ;QAA7D,EAAP;IAXJ;EAaD;;EAEDU,MAAM,GAAG;IACP,MAAM;MAAElB;IAAF,IAAY,KAAKE,KAAvB;IACA,MAAMiB,QAAQ,GAAGxB,QAAQ,CAACyB,IAAT,CAAeC,CAAD,IAAOA,CAAC,CAACjB,KAAF,KAAYJ,KAAK,CAACG,IAAvC,CAAjB;IAEA,oBACE;MAAA,wBACE,KAAC,WAAD;QAAa,KAAK,EAAC,WAAnB;QAA+B,UAAU,EAAEN,UAA3C;QAAA,uBACE,KAAC,MAAD;UAAQ,OAAO,EAAEF,QAAjB;UAA2B,KAAK,EAAEwB,QAAlC;UAA4C,QAAQ,EAAE,KAAKG,sBAA3D;UAAmF,KAAK,EAAE;QAA1F;MADF,EADF,EAIG,KAAKjB,oBAAL,EAJH;IAAA,EADF;EAQD;;AAtC6D"},"metadata":{},"sourceType":"module"}