{"ast":null,"code":"const _excluded = [\"override\"],\n      _excluded2 = [\"mappings\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cloneDeep, isNumber, omit } from 'lodash';\nimport { convertOldAngularValueMappings, FieldColorModeId, fieldReducers, ReducerID, sortThresholds, ThresholdsMode, validateFieldConfig, VizOrientation } from '@grafana/data';\nconst optionsToKeep = ['reduceOptions', 'orientation'];\nexport function sharedSingleStatPanelChangedHandler(panel, prevPluginId, prevOptions) {\n  let options = panel.options;\n  panel.fieldConfig = panel.fieldConfig || {\n    defaults: {},\n    overrides: []\n  }; // Migrating from angular singlestat\n\n  if (prevPluginId === 'singlestat' && prevOptions.angular) {\n    return migrateFromAngularSinglestat(panel, prevOptions);\n  }\n\n  for (const k of optionsToKeep) {\n    if (prevOptions.hasOwnProperty(k)) {\n      options[k] = cloneDeep(prevOptions[k]);\n    }\n  }\n\n  return options;\n}\n\nfunction migrateFromAngularSinglestat(panel, prevOptions) {\n  const prevPanel = prevOptions.angular;\n  const reducer = fieldReducers.getIfExists(prevPanel.valueName);\n  const options = {\n    reduceOptions: {\n      calcs: [reducer ? reducer.id : ReducerID.mean]\n    },\n    orientation: VizOrientation.Horizontal\n  };\n  const defaults = {};\n\n  if (prevPanel.format) {\n    defaults.unit = prevPanel.format;\n  }\n\n  if (prevPanel.tableColumn) {\n    options.reduceOptions.fields = `/^${prevPanel.tableColumn}$/`;\n  }\n\n  if (prevPanel.nullPointMode) {\n    defaults.nullValueMode = prevPanel.nullPointMode;\n  }\n\n  if (prevPanel.nullText) {\n    defaults.noValue = prevPanel.nullText;\n  }\n\n  if (prevPanel.decimals || prevPanel.decimals === 0) {\n    defaults.decimals = prevPanel.decimals;\n  } // Convert thresholds and color values\n\n\n  if (prevPanel.thresholds && prevPanel.colors) {\n    const levels = prevPanel.thresholds.split(',').map(strVale => {\n      return Number(strVale.trim());\n    }); // One more color than threshold\n\n    const thresholds = [];\n\n    for (const color of prevPanel.colors) {\n      const idx = thresholds.length - 1;\n\n      if (idx >= 0) {\n        thresholds.push({\n          value: levels[idx],\n          color\n        });\n      } else {\n        thresholds.push({\n          value: -Infinity,\n          color\n        });\n      }\n    }\n\n    defaults.thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps: thresholds\n    };\n  } // Convert value mappings\n\n\n  const mappings = convertOldAngularValueMappings(prevPanel, defaults.thresholds);\n\n  if (mappings && mappings.length) {\n    defaults.mappings = mappings;\n  }\n\n  if (prevPanel.gauge && prevPanel.gauge.show) {\n    defaults.min = prevPanel.gauge.minValue;\n    defaults.max = prevPanel.gauge.maxValue;\n  }\n\n  panel.fieldConfig.defaults = defaults;\n  return options;\n}\n\nexport function sharedSingleStatMigrationHandler(panel) {\n  if (!panel.options) {\n    // This happens on the first load or when migrating from angular\n    return {};\n  }\n\n  const previousVersion = parseFloat(panel.pluginVersion || '6.1');\n  let options = panel.options;\n\n  if (previousVersion < 6.2) {\n    options = migrateFromValueOptions(options);\n  }\n\n  if (previousVersion < 6.3) {\n    options = moveThresholdsAndMappingsToField(options);\n  }\n\n  const {\n    fieldOptions\n  } = options;\n\n  if (previousVersion < 6.6 && fieldOptions) {\n    var _fieldOptions$default;\n\n    // discard the old `override` options and enter an empty array\n    if (fieldOptions && fieldOptions.override) {\n      const _options$fieldOptions = options.fieldOptions,\n            rest = _objectWithoutPropertiesLoose(_options$fieldOptions, _excluded);\n\n      options = Object.assign({}, options, {\n        fieldOptions: Object.assign({}, rest, {\n          overrides: []\n        })\n      });\n    } // Move thresholds to steps\n\n\n    let thresholds = fieldOptions === null || fieldOptions === void 0 ? void 0 : (_fieldOptions$default = fieldOptions.defaults) === null || _fieldOptions$default === void 0 ? void 0 : _fieldOptions$default.thresholds;\n\n    if (thresholds) {\n      delete fieldOptions.defaults.thresholds;\n    } else {\n      thresholds = fieldOptions === null || fieldOptions === void 0 ? void 0 : fieldOptions.thresholds;\n      delete fieldOptions.thresholds;\n    }\n\n    if (thresholds) {\n      fieldOptions.defaults.thresholds = {\n        mode: ThresholdsMode.Absolute,\n        steps: thresholds\n      };\n    } // Migrate color from simple string to a mode\n\n\n    const {\n      defaults\n    } = fieldOptions;\n\n    if (defaults.color && typeof defaults.color === 'string') {\n      defaults.color = {\n        mode: FieldColorModeId.Fixed,\n        fixedColor: defaults.color\n      };\n    }\n\n    validateFieldConfig(defaults);\n  }\n\n  if (previousVersion < 7.0) {\n    panel.fieldConfig = panel.fieldConfig || {\n      defaults: {},\n      overrides: []\n    };\n    panel.fieldConfig = {\n      defaults: fieldOptions && fieldOptions.defaults ? Object.assign({}, panel.fieldConfig.defaults, fieldOptions.defaults) : panel.fieldConfig.defaults,\n      overrides: fieldOptions && fieldOptions.overrides ? [...panel.fieldConfig.overrides, ...fieldOptions.overrides] : panel.fieldConfig.overrides\n    };\n\n    if (fieldOptions) {\n      options.reduceOptions = {\n        values: fieldOptions.values,\n        limit: fieldOptions.limit,\n        calcs: fieldOptions.calcs\n      };\n    }\n\n    delete options.fieldOptions;\n  }\n\n  if (previousVersion < 7.1) {\n    // move title to displayName\n    const oldTitle = panel.fieldConfig.defaults.title;\n\n    if (oldTitle !== undefined && oldTitle !== null) {\n      panel.fieldConfig.defaults.displayName = oldTitle;\n      delete panel.fieldConfig.defaults.title;\n    }\n  }\n\n  if (previousVersion < 8.0) {\n    var _panel$fieldConfig;\n\n    // Explicit min/max was removed for percent/percentunit in 8.0\n    const config = (_panel$fieldConfig = panel.fieldConfig) === null || _panel$fieldConfig === void 0 ? void 0 : _panel$fieldConfig.defaults;\n    let unit = config === null || config === void 0 ? void 0 : config.unit;\n\n    if (unit === 'percent') {\n      if (!isNumber(config.min)) {\n        config.min = 0;\n      }\n\n      if (!isNumber(config.max)) {\n        config.max = 100;\n      }\n    } else if (unit === 'percentunit') {\n      if (!isNumber(config.min)) {\n        config.min = 0;\n      }\n\n      if (!isNumber(config.max)) {\n        config.max = 1;\n      }\n    }\n  }\n\n  return options;\n}\nexport function moveThresholdsAndMappingsToField(old) {\n  const {\n    fieldOptions\n  } = old;\n\n  if (!fieldOptions) {\n    return old;\n  }\n\n  const _old$fieldOptions = old.fieldOptions,\n        {\n    mappings\n  } = _old$fieldOptions,\n        rest = _objectWithoutPropertiesLoose(_old$fieldOptions, _excluded2);\n\n  let thresholds = undefined;\n\n  if (old.thresholds) {\n    thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps: migrateOldThresholds(old.thresholds)\n    };\n  }\n\n  return Object.assign({}, old, {\n    fieldOptions: Object.assign({}, rest, {\n      defaults: Object.assign({}, fieldOptions.defaults, {\n        mappings,\n        thresholds\n      })\n    })\n  });\n}\n/*\n * Moves valueMappings and thresholds from root to new fieldOptions object\n * Renames valueOptions to to defaults and moves it under fieldOptions\n */\n\nexport function migrateFromValueOptions(old) {\n  const {\n    valueOptions\n  } = old;\n\n  if (!valueOptions) {\n    return old;\n  }\n\n  const fieldOptions = {};\n  const fieldDefaults = {};\n  fieldOptions.mappings = old.valueMappings;\n  fieldOptions.thresholds = old.thresholds;\n  fieldOptions.defaults = fieldDefaults;\n  fieldDefaults.unit = valueOptions.unit;\n  fieldDefaults.decimals = valueOptions.decimals; // Make sure the stats have a valid name\n\n  if (valueOptions.stat) {\n    const reducer = fieldReducers.get(valueOptions.stat);\n\n    if (reducer) {\n      fieldOptions.calcs = [reducer.id];\n    }\n  }\n\n  fieldDefaults.min = old.minValue;\n  fieldDefaults.max = old.maxValue;\n  const newOptions = Object.assign({}, old, {\n    fieldOptions\n  });\n  return omit(newOptions, 'valueMappings', 'thresholds', 'valueOptions', 'minValue', 'maxValue');\n}\nexport function migrateOldThresholds(thresholds) {\n  if (!thresholds || !thresholds.length) {\n    return undefined;\n  }\n\n  const copy = thresholds.map(t => {\n    return {\n      // Drops 'index'\n      value: t.value === null ? -Infinity : t.value,\n      color: t.color\n    };\n  });\n  sortThresholds(copy);\n  copy[0].value = -Infinity;\n  return copy;\n}\n/**\n * @deprecated use convertOldAngularValueMappings instead\n * Convert the angular single stat mapping to new react style\n */\n\nexport function convertOldAngularValueMapping(panel) {\n  return convertOldAngularValueMappings(panel);\n}","map":{"version":3,"names":["cloneDeep","isNumber","omit","convertOldAngularValueMappings","FieldColorModeId","fieldReducers","ReducerID","sortThresholds","ThresholdsMode","validateFieldConfig","VizOrientation","optionsToKeep","sharedSingleStatPanelChangedHandler","panel","prevPluginId","prevOptions","options","fieldConfig","defaults","overrides","angular","migrateFromAngularSinglestat","k","hasOwnProperty","prevPanel","reducer","getIfExists","valueName","reduceOptions","calcs","id","mean","orientation","Horizontal","format","unit","tableColumn","fields","nullPointMode","nullValueMode","nullText","noValue","decimals","thresholds","colors","levels","split","map","strVale","Number","trim","color","idx","length","push","value","Infinity","mode","Absolute","steps","mappings","gauge","show","min","minValue","max","maxValue","sharedSingleStatMigrationHandler","previousVersion","parseFloat","pluginVersion","migrateFromValueOptions","moveThresholdsAndMappingsToField","fieldOptions","override","rest","Fixed","fixedColor","values","limit","oldTitle","title","undefined","displayName","config","old","migrateOldThresholds","valueOptions","fieldDefaults","valueMappings","stat","get","newOptions","copy","t","convertOldAngularValueMapping"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/SingleStatShared/SingleStatBaseOptions.ts"],"sourcesContent":["import { cloneDeep, isNumber, omit } from 'lodash';\n\nimport {\n  convertOldAngularValueMappings,\n  FieldColorModeId,\n  FieldConfig,\n  fieldReducers,\n  PanelModel,\n  ReduceDataOptions,\n  ReducerID,\n  sortThresholds,\n  Threshold,\n  ThresholdsConfig,\n  ThresholdsMode,\n  validateFieldConfig,\n  ValueMapping,\n  VizOrientation,\n} from '@grafana/data';\nimport { OptionsWithTextFormatting } from '@grafana/schema';\n\nexport interface SingleStatBaseOptions extends OptionsWithTextFormatting {\n  reduceOptions: ReduceDataOptions;\n  orientation: VizOrientation;\n}\n\nconst optionsToKeep = ['reduceOptions', 'orientation'];\n\nexport function sharedSingleStatPanelChangedHandler(\n  panel: PanelModel<Partial<SingleStatBaseOptions>> | any,\n  prevPluginId: string,\n  prevOptions: any\n) {\n  let options = panel.options;\n\n  panel.fieldConfig = panel.fieldConfig || {\n    defaults: {},\n    overrides: [],\n  };\n\n  // Migrating from angular singlestat\n  if (prevPluginId === 'singlestat' && prevOptions.angular) {\n    return migrateFromAngularSinglestat(panel, prevOptions);\n  }\n\n  for (const k of optionsToKeep) {\n    if (prevOptions.hasOwnProperty(k)) {\n      options[k] = cloneDeep(prevOptions[k]);\n    }\n  }\n\n  return options;\n}\n\nfunction migrateFromAngularSinglestat(panel: PanelModel<Partial<SingleStatBaseOptions>> | any, prevOptions: any) {\n  const prevPanel = prevOptions.angular;\n  const reducer = fieldReducers.getIfExists(prevPanel.valueName);\n  const options = {\n    reduceOptions: {\n      calcs: [reducer ? reducer.id : ReducerID.mean],\n    },\n    orientation: VizOrientation.Horizontal,\n  } as any;\n\n  const defaults: FieldConfig = {};\n\n  if (prevPanel.format) {\n    defaults.unit = prevPanel.format;\n  }\n\n  if (prevPanel.tableColumn) {\n    options.reduceOptions.fields = `/^${prevPanel.tableColumn}$/`;\n  }\n\n  if (prevPanel.nullPointMode) {\n    defaults.nullValueMode = prevPanel.nullPointMode;\n  }\n\n  if (prevPanel.nullText) {\n    defaults.noValue = prevPanel.nullText;\n  }\n\n  if (prevPanel.decimals || prevPanel.decimals === 0) {\n    defaults.decimals = prevPanel.decimals;\n  }\n\n  // Convert thresholds and color values\n  if (prevPanel.thresholds && prevPanel.colors) {\n    const levels = prevPanel.thresholds.split(',').map((strVale: string) => {\n      return Number(strVale.trim());\n    });\n\n    // One more color than threshold\n    const thresholds: Threshold[] = [];\n    for (const color of prevPanel.colors) {\n      const idx = thresholds.length - 1;\n      if (idx >= 0) {\n        thresholds.push({ value: levels[idx], color });\n      } else {\n        thresholds.push({ value: -Infinity, color });\n      }\n    }\n\n    defaults.thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps: thresholds,\n    };\n  }\n\n  // Convert value mappings\n  const mappings = convertOldAngularValueMappings(prevPanel, defaults.thresholds);\n  if (mappings && mappings.length) {\n    defaults.mappings = mappings;\n  }\n\n  if (prevPanel.gauge && prevPanel.gauge.show) {\n    defaults.min = prevPanel.gauge.minValue;\n    defaults.max = prevPanel.gauge.maxValue;\n  }\n\n  panel.fieldConfig.defaults = defaults;\n\n  return options;\n}\n\nexport function sharedSingleStatMigrationHandler(panel: PanelModel<SingleStatBaseOptions>): SingleStatBaseOptions {\n  if (!panel.options) {\n    // This happens on the first load or when migrating from angular\n    return {} as any;\n  }\n\n  const previousVersion = parseFloat(panel.pluginVersion || '6.1');\n  let options = panel.options as any;\n\n  if (previousVersion < 6.2) {\n    options = migrateFromValueOptions(options);\n  }\n\n  if (previousVersion < 6.3) {\n    options = moveThresholdsAndMappingsToField(options);\n  }\n\n  const { fieldOptions } = options;\n\n  if (previousVersion < 6.6 && fieldOptions) {\n    // discard the old `override` options and enter an empty array\n    if (fieldOptions && fieldOptions.override) {\n      const { override, ...rest } = options.fieldOptions;\n      options = {\n        ...options,\n        fieldOptions: {\n          ...rest,\n          overrides: [],\n        },\n      };\n    }\n\n    // Move thresholds to steps\n    let thresholds = fieldOptions?.defaults?.thresholds;\n    if (thresholds) {\n      delete fieldOptions.defaults.thresholds;\n    } else {\n      thresholds = fieldOptions?.thresholds;\n      delete fieldOptions.thresholds;\n    }\n\n    if (thresholds) {\n      fieldOptions.defaults.thresholds = {\n        mode: ThresholdsMode.Absolute,\n        steps: thresholds,\n      };\n    }\n\n    // Migrate color from simple string to a mode\n    const { defaults } = fieldOptions;\n    if (defaults.color && typeof defaults.color === 'string') {\n      defaults.color = {\n        mode: FieldColorModeId.Fixed,\n        fixedColor: defaults.color,\n      };\n    }\n\n    validateFieldConfig(defaults);\n  }\n\n  if (previousVersion < 7.0) {\n    panel.fieldConfig = panel.fieldConfig || { defaults: {}, overrides: [] };\n    panel.fieldConfig = {\n      defaults:\n        fieldOptions && fieldOptions.defaults\n          ? { ...panel.fieldConfig.defaults, ...fieldOptions.defaults }\n          : panel.fieldConfig.defaults,\n      overrides:\n        fieldOptions && fieldOptions.overrides\n          ? [...panel.fieldConfig.overrides, ...fieldOptions.overrides]\n          : panel.fieldConfig.overrides,\n    };\n\n    if (fieldOptions) {\n      options.reduceOptions = {\n        values: fieldOptions.values,\n        limit: fieldOptions.limit,\n        calcs: fieldOptions.calcs,\n      };\n    }\n\n    delete options.fieldOptions;\n  }\n\n  if (previousVersion < 7.1) {\n    // move title to displayName\n    const oldTitle = (panel.fieldConfig.defaults as any).title;\n    if (oldTitle !== undefined && oldTitle !== null) {\n      panel.fieldConfig.defaults.displayName = oldTitle;\n      delete (panel.fieldConfig.defaults as any).title;\n    }\n  }\n\n  if (previousVersion < 8.0) {\n    // Explicit min/max was removed for percent/percentunit in 8.0\n    const config = panel.fieldConfig?.defaults;\n    let unit = config?.unit;\n    if (unit === 'percent') {\n      if (!isNumber(config.min)) {\n        config.min = 0;\n      }\n      if (!isNumber(config.max)) {\n        config.max = 100;\n      }\n    } else if (unit === 'percentunit') {\n      if (!isNumber(config.min)) {\n        config.min = 0;\n      }\n      if (!isNumber(config.max)) {\n        config.max = 1;\n      }\n    }\n  }\n\n  return options as SingleStatBaseOptions;\n}\n\nexport function moveThresholdsAndMappingsToField(old: any) {\n  const { fieldOptions } = old;\n\n  if (!fieldOptions) {\n    return old;\n  }\n\n  const { mappings, ...rest } = old.fieldOptions;\n\n  let thresholds: ThresholdsConfig | undefined = undefined;\n  if (old.thresholds) {\n    thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps: migrateOldThresholds(old.thresholds)!,\n    };\n  }\n\n  return {\n    ...old,\n    fieldOptions: {\n      ...rest,\n      defaults: {\n        ...fieldOptions.defaults,\n        mappings,\n        thresholds,\n      },\n    },\n  };\n}\n\n/*\n * Moves valueMappings and thresholds from root to new fieldOptions object\n * Renames valueOptions to to defaults and moves it under fieldOptions\n */\nexport function migrateFromValueOptions(old: any) {\n  const { valueOptions } = old;\n  if (!valueOptions) {\n    return old;\n  }\n\n  const fieldOptions: any = {};\n  const fieldDefaults: any = {};\n\n  fieldOptions.mappings = old.valueMappings;\n  fieldOptions.thresholds = old.thresholds;\n  fieldOptions.defaults = fieldDefaults;\n\n  fieldDefaults.unit = valueOptions.unit;\n  fieldDefaults.decimals = valueOptions.decimals;\n\n  // Make sure the stats have a valid name\n  if (valueOptions.stat) {\n    const reducer = fieldReducers.get(valueOptions.stat);\n    if (reducer) {\n      fieldOptions.calcs = [reducer.id];\n    }\n  }\n\n  fieldDefaults.min = old.minValue;\n  fieldDefaults.max = old.maxValue;\n\n  const newOptions = {\n    ...old,\n    fieldOptions,\n  };\n\n  return omit(newOptions, 'valueMappings', 'thresholds', 'valueOptions', 'minValue', 'maxValue');\n}\n\nexport function migrateOldThresholds(thresholds?: any[]): Threshold[] | undefined {\n  if (!thresholds || !thresholds.length) {\n    return undefined;\n  }\n  const copy = thresholds.map((t) => {\n    return {\n      // Drops 'index'\n      value: t.value === null ? -Infinity : t.value,\n      color: t.color,\n    };\n  });\n  sortThresholds(copy);\n  copy[0].value = -Infinity;\n  return copy;\n}\n\n/**\n * @deprecated use convertOldAngularValueMappings instead\n * Convert the angular single stat mapping to new react style\n */\nexport function convertOldAngularValueMapping(panel: any): ValueMapping[] {\n  return convertOldAngularValueMappings(panel);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}