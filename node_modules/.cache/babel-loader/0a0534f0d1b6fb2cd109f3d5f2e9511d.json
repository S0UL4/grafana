{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { Segment, SegmentInput, useStyles2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * Render a function parameter with a segment dropdown for multiple options or simple input.\n */\nexport function FunctionParamEditor({\n  editableParam,\n  onChange,\n  onExpandedChange,\n  autofocus\n}) {\n  var _editableParam$option;\n\n  const styles = useStyles2(getStyles);\n\n  if (((_editableParam$option = editableParam.options) === null || _editableParam$option === void 0 ? void 0 : _editableParam$option.length) > 0) {\n    return /*#__PURE__*/_jsx(Segment, {\n      autofocus: autofocus,\n      value: editableParam.value,\n      inputPlaceholder: editableParam.name,\n      className: styles.segment,\n      options: editableParam.options,\n      placeholder: ' +' + editableParam.name,\n      onChange: value => {\n        onChange(value.value || '');\n      },\n      onExpandedChange: onExpandedChange,\n      inputMinWidth: 150,\n      allowCustomValue: true,\n      allowEmptyValue: true\n    });\n  } else {\n    return /*#__PURE__*/_jsx(SegmentInput, {\n      autofocus: autofocus,\n      className: styles.input,\n      value: editableParam.value || '',\n      placeholder: ' +' + editableParam.name,\n      inputPlaceholder: editableParam.name,\n      onChange: value => {\n        onChange(value.toString());\n      },\n      onExpandedChange: onExpandedChange // input style\n      ,\n      style: {\n        height: '25px',\n        paddingTop: '2px',\n        marginTop: '2px',\n        paddingLeft: '4px',\n        minWidth: '100px'\n      }\n    });\n  }\n}\n\nconst getStyles = theme => ({\n  segment: css({\n    margin: 0,\n    padding: 0\n  }),\n  input: css`\n    margin: 0;\n    padding: 0;\n    input {\n      height: 25px;\n    },\n  `\n});","map":{"version":3,"names":["css","React","Segment","SegmentInput","useStyles2","FunctionParamEditor","editableParam","onChange","onExpandedChange","autofocus","styles","getStyles","options","length","value","name","segment","input","toString","height","paddingTop","marginTop","paddingLeft","minWidth","theme","margin","padding"],"sources":["/home/soula/grafana/public/app/plugins/datasource/graphite/components/FunctionParamEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Segment, SegmentInput, useStyles2 } from '@grafana/ui';\n\nexport type EditableParam = {\n  name: string;\n  value: string;\n  optional: boolean;\n  multiple: boolean;\n  options: Array<SelectableValue<string>>;\n};\n\ntype FieldEditorProps = {\n  editableParam: EditableParam;\n  onChange: (value: string) => void;\n  onExpandedChange: (expanded: boolean) => void;\n  autofocus: boolean;\n};\n\n/**\n * Render a function parameter with a segment dropdown for multiple options or simple input.\n */\nexport function FunctionParamEditor({ editableParam, onChange, onExpandedChange, autofocus }: FieldEditorProps) {\n  const styles = useStyles2(getStyles);\n\n  if (editableParam.options?.length > 0) {\n    return (\n      <Segment\n        autofocus={autofocus}\n        value={editableParam.value}\n        inputPlaceholder={editableParam.name}\n        className={styles.segment}\n        options={editableParam.options}\n        placeholder={' +' + editableParam.name}\n        onChange={(value) => {\n          onChange(value.value || '');\n        }}\n        onExpandedChange={onExpandedChange}\n        inputMinWidth={150}\n        allowCustomValue={true}\n        allowEmptyValue={true}\n      ></Segment>\n    );\n  } else {\n    return (\n      <SegmentInput\n        autofocus={autofocus}\n        className={styles.input}\n        value={editableParam.value || ''}\n        placeholder={' +' + editableParam.name}\n        inputPlaceholder={editableParam.name}\n        onChange={(value) => {\n          onChange(value.toString());\n        }}\n        onExpandedChange={onExpandedChange}\n        // input style\n        style={{ height: '25px', paddingTop: '2px', marginTop: '2px', paddingLeft: '4px', minWidth: '100px' }}\n      ></SegmentInput>\n    );\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  segment: css({\n    margin: 0,\n    padding: 0,\n  }),\n  input: css`\n    margin: 0;\n    padding: 0;\n    input {\n      height: 25px;\n    },\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAASC,OAAT,EAAkBC,YAAlB,EAAgCC,UAAhC,QAAkD,aAAlD;;;AAiBA;AACA;AACA;AACA,OAAO,SAASC,mBAAT,CAA6B;EAAEC,aAAF;EAAiBC,QAAjB;EAA2BC,gBAA3B;EAA6CC;AAA7C,CAA7B,EAAyG;EAAA;;EAC9G,MAAMC,MAAM,GAAGN,UAAU,CAACO,SAAD,CAAzB;;EAEA,IAAI,0BAAAL,aAAa,CAACM,OAAd,gFAAuBC,MAAvB,IAAgC,CAApC,EAAuC;IACrC,oBACE,KAAC,OAAD;MACE,SAAS,EAAEJ,SADb;MAEE,KAAK,EAAEH,aAAa,CAACQ,KAFvB;MAGE,gBAAgB,EAAER,aAAa,CAACS,IAHlC;MAIE,SAAS,EAAEL,MAAM,CAACM,OAJpB;MAKE,OAAO,EAAEV,aAAa,CAACM,OALzB;MAME,WAAW,EAAE,OAAON,aAAa,CAACS,IANpC;MAOE,QAAQ,EAAGD,KAAD,IAAW;QACnBP,QAAQ,CAACO,KAAK,CAACA,KAAN,IAAe,EAAhB,CAAR;MACD,CATH;MAUE,gBAAgB,EAAEN,gBAVpB;MAWE,aAAa,EAAE,GAXjB;MAYE,gBAAgB,EAAE,IAZpB;MAaE,eAAe,EAAE;IAbnB,EADF;EAiBD,CAlBD,MAkBO;IACL,oBACE,KAAC,YAAD;MACE,SAAS,EAAEC,SADb;MAEE,SAAS,EAAEC,MAAM,CAACO,KAFpB;MAGE,KAAK,EAAEX,aAAa,CAACQ,KAAd,IAAuB,EAHhC;MAIE,WAAW,EAAE,OAAOR,aAAa,CAACS,IAJpC;MAKE,gBAAgB,EAAET,aAAa,CAACS,IALlC;MAME,QAAQ,EAAGD,KAAD,IAAW;QACnBP,QAAQ,CAACO,KAAK,CAACI,QAAN,EAAD,CAAR;MACD,CARH;MASE,gBAAgB,EAAEV,gBATpB,CAUE;MAVF;MAWE,KAAK,EAAE;QAAEW,MAAM,EAAE,MAAV;QAAkBC,UAAU,EAAE,KAA9B;QAAqCC,SAAS,EAAE,KAAhD;QAAuDC,WAAW,EAAE,KAApE;QAA2EC,QAAQ,EAAE;MAArF;IAXT,EADF;EAeD;AACF;;AAED,MAAMZ,SAAS,GAAIa,KAAD,KAA2B;EAC3CR,OAAO,EAAEhB,GAAG,CAAC;IACXyB,MAAM,EAAE,CADG;IAEXC,OAAO,EAAE;EAFE,CAAD,CAD+B;EAK3CT,KAAK,EAAEjB,GAAI;AACb;AACA;AACA;AACA;AACA;AACA;AAX6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}