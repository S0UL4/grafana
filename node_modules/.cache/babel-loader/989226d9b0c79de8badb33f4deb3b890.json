{"ast":null,"code":"// Avoid writing the warning message more than once every 10s\nconst history = {};\nexport const deprecationWarning = (file, oldName, newName) => {\n  let message = `[Deprecation warning] ${file}: ${oldName} is deprecated`;\n\n  if (newName) {\n    message += `. Use ${newName} instead`;\n  }\n\n  const now = Date.now();\n  const last = history[message];\n\n  if (!last || now - last > 10000) {\n    console.warn(message);\n    history[message] = now;\n  }\n};","map":{"version":3,"names":["history","deprecationWarning","file","oldName","newName","message","now","Date","last","console","warn"],"sources":["/home/soula/grafana/packages/grafana-data/src/utils/deprecationWarning.ts"],"sourcesContent":["import { KeyValue } from '../types';\n\n// Avoid writing the warning message more than once every 10s\nconst history: KeyValue<number> = {};\n\nexport const deprecationWarning = (file: string, oldName: string, newName?: string) => {\n  let message = `[Deprecation warning] ${file}: ${oldName} is deprecated`;\n  if (newName) {\n    message += `. Use ${newName} instead`;\n  }\n  const now = Date.now();\n  const last = history[message];\n  if (!last || now - last > 10000) {\n    console.warn(message);\n    history[message] = now;\n  }\n};\n"],"mappings":"AAEA;AACA,MAAMA,OAAyB,GAAG,EAAlC;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,IAAD,EAAeC,OAAf,EAAgCC,OAAhC,KAAqD;EACrF,IAAIC,OAAO,GAAI,yBAAwBH,IAAK,KAAIC,OAAQ,gBAAxD;;EACA,IAAIC,OAAJ,EAAa;IACXC,OAAO,IAAK,SAAQD,OAAQ,UAA5B;EACD;;EACD,MAAME,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;EACA,MAAME,IAAI,GAAGR,OAAO,CAACK,OAAD,CAApB;;EACA,IAAI,CAACG,IAAD,IAASF,GAAG,GAAGE,IAAN,GAAa,KAA1B,EAAiC;IAC/BC,OAAO,CAACC,IAAR,CAAaL,OAAb;IACAL,OAAO,CAACK,OAAD,CAAP,GAAmBC,GAAnB;EACD;AACF,CAXM"},"metadata":{},"sourceType":"module"}