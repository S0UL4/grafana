{"ast":null,"code":"var _FlexItem;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const NestedQuery = /*#__PURE__*/React.memo(({\n  nestedQuery,\n  index,\n  datasource,\n  onChange,\n  onRemove,\n  onRunQuery\n}) => {\n  const styles = useStyles2(getStyles);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.card,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: styles.name,\n        children: \"Operator\"\n      }), /*#__PURE__*/_jsx(Select, {\n        width: \"auto\",\n        options: operators,\n        value: toOption(nestedQuery.operator),\n        onChange: value => {\n          onChange(index, Object.assign({}, nestedQuery, {\n            operator: value.value\n          }));\n        }\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.name,\n        children: \"Vector matches\"\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.vectorMatchWrapper,\n        children: [/*#__PURE__*/_jsx(Select, {\n          width: \"auto\",\n          value: nestedQuery.vectorMatchesType || 'on',\n          allowCustomValue: true,\n          options: [{\n            value: 'on',\n            label: 'on'\n          }, {\n            value: 'ignoring',\n            label: 'ignoring'\n          }],\n          onChange: val => {\n            onChange(index, Object.assign({}, nestedQuery, {\n              vectorMatchesType: val.value\n            }));\n          }\n        }), /*#__PURE__*/_jsx(AutoSizeInput, {\n          className: styles.vectorMatchInput,\n          minWidth: 20,\n          defaultValue: nestedQuery.vectorMatches,\n          onCommitChange: evt => {\n            onChange(index, Object.assign({}, nestedQuery, {\n              vectorMatches: evt.currentTarget.value,\n              vectorMatchesType: nestedQuery.vectorMatchesType || 'on'\n            }));\n          }\n        })]\n      }), _FlexItem || (_FlexItem = /*#__PURE__*/_jsx(FlexItem, {\n        grow: 1\n      })), /*#__PURE__*/_jsx(IconButton, {\n        name: \"times\",\n        size: \"sm\",\n        onClick: () => onRemove(index)\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.body,\n      children: /*#__PURE__*/_jsx(EditorRows, {\n        children: /*#__PURE__*/_jsx(PromQueryBuilder, {\n          query: nestedQuery.query,\n          datasource: datasource,\n          nested: true,\n          onRunQuery: onRunQuery,\n          onChange: update => {\n            onChange(index, Object.assign({}, nestedQuery, {\n              query: update\n            }));\n          }\n        })\n      })\n    })]\n  });\n});\nconst operators = binaryScalarDefs.map(def => ({\n  label: def.sign,\n  value: def.sign\n}));\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = theme => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5)\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center'\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap'\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2)\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex'\n    })\n  };\n};","map":{"version":3,"names":["css","React","toOption","EditorRows","FlexItem","AutoSizeInput","IconButton","Select","useStyles2","binaryScalarDefs","PromQueryBuilder","NestedQuery","memo","nestedQuery","index","datasource","onChange","onRemove","onRunQuery","styles","getStyles","card","header","name","operators","operator","value","vectorMatchWrapper","vectorMatchesType","label","val","vectorMatchInput","vectorMatches","evt","currentTarget","body","query","update","map","def","sign","displayName","theme","display","flexDirection","gap","spacing","padding","alignItems","whiteSpace","paddingLeft","marginLeft"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/components/NestedQuery.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { PromVisualQueryBinary } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\n\nexport interface Props {\n  nestedQuery: PromVisualQueryBinary;\n  datasource: PrometheusDatasource;\n  index: number;\n  onChange: (index: number, update: PromVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n}\n\nexport const NestedQuery = React.memo<Props>(({ nestedQuery, index, datasource, onChange, onRemove, onRunQuery }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.header}>\n        <div className={styles.name}>Operator</div>\n        <Select\n          width=\"auto\"\n          options={operators}\n          value={toOption(nestedQuery.operator)}\n          onChange={(value) => {\n            onChange(index, {\n              ...nestedQuery,\n              operator: value.value!,\n            });\n          }}\n        />\n        <div className={styles.name}>Vector matches</div>\n        <div className={styles.vectorMatchWrapper}>\n          <Select<PromVisualQueryBinary['vectorMatchesType']>\n            width=\"auto\"\n            value={nestedQuery.vectorMatchesType || 'on'}\n            allowCustomValue\n            options={[\n              { value: 'on', label: 'on' },\n              { value: 'ignoring', label: 'ignoring' },\n            ]}\n            onChange={(val) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatchesType: val.value,\n              });\n            }}\n          />\n          <AutoSizeInput\n            className={styles.vectorMatchInput}\n            minWidth={20}\n            defaultValue={nestedQuery.vectorMatches}\n            onCommitChange={(evt) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatches: evt.currentTarget.value,\n                vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n              });\n            }}\n          />\n        </div>\n        <FlexItem grow={1} />\n        <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} />\n      </div>\n      <div className={styles.body}>\n        <EditorRows>\n          <PromQueryBuilder\n            query={nestedQuery.query}\n            datasource={datasource}\n            nested={true}\n            onRunQuery={onRunQuery}\n            onChange={(update) => {\n              onChange(index, { ...nestedQuery, query: update });\n            }}\n          />\n        </EditorRows>\n      </div>\n    </div>\n  );\n});\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}