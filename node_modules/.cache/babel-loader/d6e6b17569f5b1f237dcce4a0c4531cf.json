{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { sortBy as _sortBy } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { CustomScrollbar, Icon } from '@grafana/ui';\nimport { LegendItem, LEGEND_STATS } from './LegendSeriesItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class GraphLegend extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onToggleSeries\", (series, event) => {\n      if (!this.props.onToggleSeries) {\n        return;\n      }\n\n      let hiddenSeries = Object.assign({}, this.state.hiddenSeries);\n\n      if (event.ctrlKey || event.metaKey || event.shiftKey) {\n        if (hiddenSeries[series.alias]) {\n          delete hiddenSeries[series.alias];\n        } else {\n          hiddenSeries[series.alias] = true;\n        }\n      } else {\n        hiddenSeries = this.toggleSeriesExclusiveMode(series);\n      }\n\n      this.setState({\n        hiddenSeries: hiddenSeries\n      });\n      this.props.onToggleSeries(hiddenSeries);\n    });\n\n    this.state = {\n      hiddenSeries: this.props.hiddenSeries\n    };\n  }\n\n  sortLegend() {\n    let seriesList = [...this.props.seriesList] || [];\n    const sortBy = this.props.sort;\n\n    if (sortBy && this.props[sortBy] && this.props.alignAsTable) {\n      seriesList = _sortBy(seriesList, series => {\n        let sort = series.stats[sortBy];\n\n        if (sort === null) {\n          sort = -Infinity;\n        }\n\n        return sort;\n      });\n\n      if (this.props.sortDesc) {\n        seriesList = seriesList.reverse();\n      }\n    }\n\n    return seriesList;\n  }\n\n  toggleSeriesExclusiveMode(series) {\n    const hiddenSeries = Object.assign({}, this.state.hiddenSeries);\n\n    if (hiddenSeries[series.alias]) {\n      delete hiddenSeries[series.alias];\n    } // check if every other series is hidden\n\n\n    const alreadyExclusive = this.props.seriesList.every(value => {\n      if (value.alias === series.alias) {\n        return true;\n      }\n\n      return hiddenSeries[value.alias];\n    });\n\n    if (alreadyExclusive) {\n      // remove all hidden series\n      this.props.seriesList.forEach(value => {\n        delete hiddenSeries[value.alias];\n      });\n    } else {\n      // hide all but this serie\n      this.props.seriesList.forEach(value => {\n        if (value.alias === series.alias) {\n          return;\n        }\n\n        hiddenSeries[value.alias] = true;\n      });\n    }\n\n    return hiddenSeries;\n  }\n\n  render() {\n    const {\n      optionalClass,\n      rightSide,\n      sideWidth,\n      sort,\n      sortDesc,\n      hideEmpty,\n      hideZero,\n      values,\n      min,\n      max,\n      avg,\n      current,\n      total\n    } = this.props;\n    const seriesValuesProps = {\n      values,\n      min,\n      max,\n      avg,\n      current,\n      total\n    };\n    const hiddenSeries = this.state.hiddenSeries;\n    const seriesHideProps = {\n      hideEmpty,\n      hideZero\n    };\n    const sortProps = {\n      sort,\n      sortDesc\n    };\n    const seriesList = this.sortLegend().filter(series => !series.hideFromLegend(seriesHideProps));\n    const legendClass = `${this.props.alignAsTable ? 'graph-legend-table' : ''} ${optionalClass}`; // Set min-width if side style and there is a value, otherwise remove the CSS property\n    // Set width so it works with IE11\n\n    const width = rightSide && sideWidth ? sideWidth : undefined;\n    const ieWidth = rightSide && sideWidth ? sideWidth - 1 : undefined;\n    const legendStyle = {\n      minWidth: width,\n      width: ieWidth\n    };\n    const legendProps = Object.assign({\n      seriesList: seriesList,\n      hiddenSeries: hiddenSeries,\n      onToggleSeries: this.onToggleSeries,\n      onToggleAxis: this.props.onToggleAxis,\n      onToggleSort: this.props.onToggleSort,\n      onColorChange: this.props.onColorChange\n    }, seriesValuesProps, sortProps);\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: `graph-legend-content ${legendClass}`,\n      style: legendStyle,\n      children: this.props.alignAsTable ? /*#__PURE__*/_jsx(LegendTable, Object.assign({}, legendProps)) : /*#__PURE__*/_jsx(LegendSeriesList, Object.assign({}, legendProps))\n    });\n  }\n\n}\n\n_defineProperty(GraphLegend, \"defaultProps\", {\n  values: false,\n  min: false,\n  max: false,\n  avg: false,\n  current: false,\n  total: false,\n  alignAsTable: false,\n  rightSide: false,\n  sort: undefined,\n  sortDesc: false,\n  optionalClass: '',\n  onToggleSeries: () => {},\n  onToggleSort: () => {},\n  onToggleAxis: () => {},\n  onColorChange: () => {}\n});\n\nclass LegendSeriesList extends PureComponent {\n  render() {\n    const {\n      seriesList,\n      hiddenSeries,\n      values,\n      min,\n      max,\n      avg,\n      current,\n      total\n    } = this.props;\n    const seriesValuesProps = {\n      values,\n      min,\n      max,\n      avg,\n      current,\n      total\n    };\n    return seriesList.map((series, i) => /*#__PURE__*/_jsx(LegendItem // This trick required because TimeSeries.id is not unique (it's just TimeSeries.alias).\n    // In future would be good to make id unique across the series list.\n    , Object.assign({\n      series: series,\n      hidden: hiddenSeries[series.alias]\n    }, seriesValuesProps, {\n      onLabelClick: this.props.onToggleSeries,\n      onColorChange: this.props.onColorChange,\n      onToggleAxis: this.props.onToggleAxis\n    }), `${series.id}-${i}`));\n  }\n\n}\n\nclass LegendTable extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onToggleSort\", stat => {\n      if (!this.props.onToggleSort) {\n        return;\n      }\n\n      let sortDesc = this.props.sortDesc;\n      let sortBy = this.props.sort;\n\n      if (stat !== sortBy) {\n        sortDesc = undefined;\n      } // if already sort ascending, disable sorting\n\n\n      if (sortDesc === false) {\n        sortBy = undefined;\n        sortDesc = undefined;\n      } else {\n        sortDesc = !sortDesc;\n        sortBy = stat;\n      }\n\n      this.props.onToggleSort(sortBy, sortDesc);\n    });\n  }\n\n  render() {\n    const seriesList = this.props.seriesList;\n    const {\n      values,\n      min,\n      max,\n      avg,\n      current,\n      total,\n      sort,\n      sortDesc,\n      hiddenSeries\n    } = this.props;\n    const seriesValuesProps = {\n      values,\n      min,\n      max,\n      avg,\n      current,\n      total\n    };\n\n    if (!seriesList) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxs(\"table\", {\n      children: [/*#__PURE__*/_jsx(\"colgroup\", {\n        children: /*#__PURE__*/_jsx(\"col\", {\n          style: {\n            width: '100%'\n          }\n        })\n      }), /*#__PURE__*/_jsx(\"thead\", {\n        children: /*#__PURE__*/_jsxs(\"tr\", {\n          children: [/*#__PURE__*/_jsx(\"th\", {\n            style: {\n              textAlign: 'left'\n            }\n          }), LEGEND_STATS.map(statName => seriesValuesProps[statName] && /*#__PURE__*/_jsx(LegendTableHeaderItem, {\n            statName: statName,\n            sort: sort,\n            sortDesc: sortDesc,\n            onClick: this.onToggleSort\n          }, statName))]\n        })\n      }), /*#__PURE__*/_jsx(\"tbody\", {\n        children: seriesList && seriesList.map((series, i) => /*#__PURE__*/_jsx(LegendItem, Object.assign({\n          asTable: true,\n          series: series,\n          hidden: hiddenSeries[series.alias],\n          onLabelClick: this.props.onToggleSeries,\n          onColorChange: this.props.onColorChange,\n          onToggleAxis: this.props.onToggleAxis\n        }, seriesValuesProps), `${series.id}-${i}`))\n      })]\n    });\n  }\n\n}\n\nclass LegendTableHeaderItem extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onClick\", () => {\n      if (this.props.onClick) {\n        this.props.onClick(this.props.statName);\n      }\n    });\n  }\n\n  render() {\n    const {\n      statName,\n      sort,\n      sortDesc\n    } = this.props;\n    return /*#__PURE__*/_jsxs(\"th\", {\n      className: \"pointer\",\n      onClick: this.onClick,\n      children: [statName, sort === statName && /*#__PURE__*/_jsx(Icon, {\n        name: sortDesc ? 'angle-down' : 'angle-up'\n      })]\n    });\n  }\n\n}\n\nexport class Legend extends PureComponent {\n  render() {\n    return /*#__PURE__*/_jsx(CustomScrollbar, {\n      hideHorizontalTrack: true,\n      children: /*#__PURE__*/_jsx(GraphLegend, Object.assign({}, this.props))\n    });\n  }\n\n}\nexport default Legend;","map":{"version":3,"names":["sortBy","_sortBy","React","PureComponent","CustomScrollbar","Icon","LegendItem","LEGEND_STATS","GraphLegend","constructor","props","series","event","onToggleSeries","hiddenSeries","state","ctrlKey","metaKey","shiftKey","alias","toggleSeriesExclusiveMode","setState","sortLegend","seriesList","sort","alignAsTable","stats","Infinity","sortDesc","reverse","alreadyExclusive","every","value","forEach","render","optionalClass","rightSide","sideWidth","hideEmpty","hideZero","values","min","max","avg","current","total","seriesValuesProps","seriesHideProps","sortProps","filter","hideFromLegend","legendClass","width","undefined","ieWidth","legendStyle","minWidth","legendProps","onToggleAxis","onToggleSort","onColorChange","LegendSeriesList","map","i","id","LegendTable","stat","textAlign","statName","LegendTableHeaderItem","onClick","Legend"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/Legend/Legend.tsx"],"sourcesContent":["import { sortBy as _sortBy } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { CustomScrollbar, Icon } from '@grafana/ui';\nimport { TimeSeries } from 'app/core/core';\n\nimport { LegendStat, LegendItem, LEGEND_STATS } from './LegendSeriesItem';\n\ninterface LegendProps {\n  seriesList: TimeSeries[];\n  optionalClass?: string;\n}\n\ninterface LegendEventHandlers {\n  onToggleSeries?: (hiddenSeries: any) => void;\n  onToggleSort?: (sortBy: any, sortDesc: any) => void;\n  onToggleAxis?: (series: TimeSeries) => void;\n  onColorChange?: (series: TimeSeries, color: string) => void;\n}\n\ninterface LegendComponentEventHandlers {\n  onToggleSeries?: (series: TimeSeries, event: any) => void;\n  onToggleSort?: (sortBy: LegendStat | undefined, sortDesc: any) => void;\n  onToggleAxis?: (series: TimeSeries) => void;\n  onColorChange?: (series: TimeSeries, color: string) => void;\n}\n\ninterface LegendDisplayProps {\n  hiddenSeries: any;\n  hideEmpty?: boolean;\n  hideZero?: boolean;\n  alignAsTable?: boolean;\n  rightSide?: boolean;\n  sideWidth?: number;\n}\n\ninterface LegendValuesProps {\n  values?: boolean;\n  min?: boolean;\n  max?: boolean;\n  avg?: boolean;\n  current?: boolean;\n  total?: boolean;\n}\n\ninterface LegendSortProps {\n  sort?: LegendStat;\n  sortDesc?: boolean;\n}\n\nexport type GraphLegendProps = LegendProps &\n  LegendDisplayProps &\n  LegendValuesProps &\n  LegendSortProps &\n  LegendEventHandlers;\nexport type LegendComponentProps = LegendProps &\n  LegendDisplayProps &\n  LegendValuesProps &\n  LegendSortProps &\n  LegendComponentEventHandlers;\n\ninterface LegendState {\n  hiddenSeries: { [seriesAlias: string]: boolean };\n}\n\nexport class GraphLegend extends PureComponent<GraphLegendProps, LegendState> {\n  static defaultProps: Partial<GraphLegendProps> = {\n    values: false,\n    min: false,\n    max: false,\n    avg: false,\n    current: false,\n    total: false,\n    alignAsTable: false,\n    rightSide: false,\n    sort: undefined,\n    sortDesc: false,\n    optionalClass: '',\n    onToggleSeries: () => {},\n    onToggleSort: () => {},\n    onToggleAxis: () => {},\n    onColorChange: () => {},\n  };\n\n  constructor(props: GraphLegendProps) {\n    super(props);\n    this.state = {\n      hiddenSeries: this.props.hiddenSeries,\n    };\n  }\n\n  sortLegend() {\n    let seriesList: TimeSeries[] = [...this.props.seriesList] || [];\n    const sortBy = this.props.sort;\n    if (sortBy && this.props[sortBy] && this.props.alignAsTable) {\n      seriesList = _sortBy(seriesList, (series) => {\n        let sort = series.stats[sortBy];\n        if (sort === null) {\n          sort = -Infinity;\n        }\n        return sort;\n      }) as TimeSeries[];\n      if (this.props.sortDesc) {\n        seriesList = seriesList.reverse();\n      }\n    }\n    return seriesList;\n  }\n\n  onToggleSeries = (series: TimeSeries, event: any) => {\n    if (!this.props.onToggleSeries) {\n      return;\n    }\n\n    let hiddenSeries = { ...this.state.hiddenSeries };\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      if (hiddenSeries[series.alias]) {\n        delete hiddenSeries[series.alias];\n      } else {\n        hiddenSeries[series.alias] = true;\n      }\n    } else {\n      hiddenSeries = this.toggleSeriesExclusiveMode(series);\n    }\n    this.setState({ hiddenSeries: hiddenSeries });\n    this.props.onToggleSeries(hiddenSeries);\n  };\n\n  toggleSeriesExclusiveMode(series: TimeSeries) {\n    const hiddenSeries = { ...this.state.hiddenSeries };\n\n    if (hiddenSeries[series.alias]) {\n      delete hiddenSeries[series.alias];\n    }\n\n    // check if every other series is hidden\n    const alreadyExclusive = this.props.seriesList.every((value) => {\n      if (value.alias === series.alias) {\n        return true;\n      }\n\n      return hiddenSeries[value.alias];\n    });\n\n    if (alreadyExclusive) {\n      // remove all hidden series\n      this.props.seriesList.forEach((value) => {\n        delete hiddenSeries[value.alias];\n      });\n    } else {\n      // hide all but this serie\n      this.props.seriesList.forEach((value) => {\n        if (value.alias === series.alias) {\n          return;\n        }\n\n        hiddenSeries[value.alias] = true;\n      });\n    }\n\n    return hiddenSeries;\n  }\n\n  render() {\n    const {\n      optionalClass,\n      rightSide,\n      sideWidth,\n      sort,\n      sortDesc,\n      hideEmpty,\n      hideZero,\n      values,\n      min,\n      max,\n      avg,\n      current,\n      total,\n    } = this.props;\n    const seriesValuesProps = { values, min, max, avg, current, total };\n    const hiddenSeries = this.state.hiddenSeries;\n    const seriesHideProps = { hideEmpty, hideZero };\n    const sortProps = { sort, sortDesc };\n    const seriesList = this.sortLegend().filter((series) => !series.hideFromLegend(seriesHideProps));\n    const legendClass = `${this.props.alignAsTable ? 'graph-legend-table' : ''} ${optionalClass}`;\n\n    // Set min-width if side style and there is a value, otherwise remove the CSS property\n    // Set width so it works with IE11\n    const width: any = rightSide && sideWidth ? sideWidth : undefined;\n    const ieWidth: any = rightSide && sideWidth ? sideWidth - 1 : undefined;\n    const legendStyle: React.CSSProperties = {\n      minWidth: width,\n      width: ieWidth,\n    };\n\n    const legendProps: LegendComponentProps = {\n      seriesList: seriesList,\n      hiddenSeries: hiddenSeries,\n      onToggleSeries: this.onToggleSeries,\n      onToggleAxis: this.props.onToggleAxis,\n      onToggleSort: this.props.onToggleSort,\n      onColorChange: this.props.onColorChange,\n      ...seriesValuesProps,\n      ...sortProps,\n    };\n\n    return (\n      <div className={`graph-legend-content ${legendClass}`} style={legendStyle}>\n        {this.props.alignAsTable ? <LegendTable {...legendProps} /> : <LegendSeriesList {...legendProps} />}\n      </div>\n    );\n  }\n}\n\nclass LegendSeriesList extends PureComponent<LegendComponentProps> {\n  render() {\n    const { seriesList, hiddenSeries, values, min, max, avg, current, total } = this.props;\n    const seriesValuesProps = { values, min, max, avg, current, total };\n    return seriesList.map((series, i) => (\n      <LegendItem\n        // This trick required because TimeSeries.id is not unique (it's just TimeSeries.alias).\n        // In future would be good to make id unique across the series list.\n        key={`${series.id}-${i}`}\n        series={series}\n        hidden={hiddenSeries[series.alias]}\n        {...seriesValuesProps}\n        onLabelClick={this.props.onToggleSeries}\n        onColorChange={this.props.onColorChange}\n        onToggleAxis={this.props.onToggleAxis}\n      />\n    ));\n  }\n}\n\nclass LegendTable extends PureComponent<Partial<LegendComponentProps>> {\n  onToggleSort = (stat: LegendStat) => {\n    if (!this.props.onToggleSort) {\n      return;\n    }\n\n    let sortDesc = this.props.sortDesc;\n    let sortBy = this.props.sort;\n    if (stat !== sortBy) {\n      sortDesc = undefined;\n    }\n\n    // if already sort ascending, disable sorting\n    if (sortDesc === false) {\n      sortBy = undefined;\n      sortDesc = undefined;\n    } else {\n      sortDesc = !sortDesc;\n      sortBy = stat;\n    }\n    this.props.onToggleSort(sortBy, sortDesc);\n  };\n\n  render() {\n    const seriesList = this.props.seriesList;\n    const { values, min, max, avg, current, total, sort, sortDesc, hiddenSeries } = this.props;\n    const seriesValuesProps: any = { values, min, max, avg, current, total };\n\n    if (!seriesList) {\n      return null;\n    }\n\n    return (\n      <table>\n        <colgroup>\n          <col style={{ width: '100%' }} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th style={{ textAlign: 'left' }} />\n            {LEGEND_STATS.map(\n              (statName) =>\n                seriesValuesProps[statName] && (\n                  <LegendTableHeaderItem\n                    key={statName}\n                    statName={statName}\n                    sort={sort}\n                    sortDesc={sortDesc}\n                    onClick={this.onToggleSort}\n                  />\n                )\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {seriesList &&\n            seriesList.map((series, i) => (\n              <LegendItem\n                key={`${series.id}-${i}`}\n                asTable={true}\n                series={series}\n                hidden={hiddenSeries[series.alias]}\n                onLabelClick={this.props.onToggleSeries}\n                onColorChange={this.props.onColorChange}\n                onToggleAxis={this.props.onToggleAxis}\n                {...seriesValuesProps}\n              />\n            ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\ninterface LegendTableHeaderProps {\n  statName: LegendStat;\n  onClick?: (statName: LegendStat) => void;\n}\n\nclass LegendTableHeaderItem extends PureComponent<LegendTableHeaderProps & LegendSortProps> {\n  onClick = () => {\n    if (this.props.onClick) {\n      this.props.onClick(this.props.statName);\n    }\n  };\n\n  render() {\n    const { statName, sort, sortDesc } = this.props;\n    return (\n      <th className=\"pointer\" onClick={this.onClick}>\n        {statName}\n        {sort === statName && <Icon name={sortDesc ? 'angle-down' : 'angle-up'} />}\n      </th>\n    );\n  }\n}\n\nexport class Legend extends PureComponent<GraphLegendProps> {\n  render() {\n    return (\n      <CustomScrollbar hideHorizontalTrack>\n        <GraphLegend {...this.props} />\n      </CustomScrollbar>\n    );\n  }\n}\n\nexport default Legend;\n"],"mappings":";;AAAA,SAASA,MAAM,IAAIC,OAAnB,QAAkC,QAAlC;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAEA,SAASC,eAAT,EAA0BC,IAA1B,QAAsC,aAAtC;AAGA,SAAqBC,UAArB,EAAiCC,YAAjC,QAAqD,oBAArD;;;AA2DA,OAAO,MAAMC,WAAN,SAA0BL,aAA1B,CAAuE;EAmB5EM,WAAW,CAACC,KAAD,EAA0B;IACnC,MAAMA,KAAN;;IADmC,wCAyBpB,CAACC,MAAD,EAAqBC,KAArB,KAAoC;MACnD,IAAI,CAAC,KAAKF,KAAL,CAAWG,cAAhB,EAAgC;QAC9B;MACD;;MAED,IAAIC,YAAY,qBAAQ,KAAKC,KAAL,CAAWD,YAAnB,CAAhB;;MACA,IAAIF,KAAK,CAACI,OAAN,IAAiBJ,KAAK,CAACK,OAAvB,IAAkCL,KAAK,CAACM,QAA5C,EAAsD;QACpD,IAAIJ,YAAY,CAACH,MAAM,CAACQ,KAAR,CAAhB,EAAgC;UAC9B,OAAOL,YAAY,CAACH,MAAM,CAACQ,KAAR,CAAnB;QACD,CAFD,MAEO;UACLL,YAAY,CAACH,MAAM,CAACQ,KAAR,CAAZ,GAA6B,IAA7B;QACD;MACF,CAND,MAMO;QACLL,YAAY,GAAG,KAAKM,yBAAL,CAA+BT,MAA/B,CAAf;MACD;;MACD,KAAKU,QAAL,CAAc;QAAEP,YAAY,EAAEA;MAAhB,CAAd;MACA,KAAKJ,KAAL,CAAWG,cAAX,CAA0BC,YAA1B;IACD,CA1CoC;;IAEnC,KAAKC,KAAL,GAAa;MACXD,YAAY,EAAE,KAAKJ,KAAL,CAAWI;IADd,CAAb;EAGD;;EAEDQ,UAAU,GAAG;IACX,IAAIC,UAAwB,GAAG,CAAC,GAAG,KAAKb,KAAL,CAAWa,UAAf,KAA8B,EAA7D;IACA,MAAMvB,MAAM,GAAG,KAAKU,KAAL,CAAWc,IAA1B;;IACA,IAAIxB,MAAM,IAAI,KAAKU,KAAL,CAAWV,MAAX,CAAV,IAAgC,KAAKU,KAAL,CAAWe,YAA/C,EAA6D;MAC3DF,UAAU,GAAGtB,OAAO,CAACsB,UAAD,EAAcZ,MAAD,IAAY;QAC3C,IAAIa,IAAI,GAAGb,MAAM,CAACe,KAAP,CAAa1B,MAAb,CAAX;;QACA,IAAIwB,IAAI,KAAK,IAAb,EAAmB;UACjBA,IAAI,GAAG,CAACG,QAAR;QACD;;QACD,OAAOH,IAAP;MACD,CANmB,CAApB;;MAOA,IAAI,KAAKd,KAAL,CAAWkB,QAAf,EAAyB;QACvBL,UAAU,GAAGA,UAAU,CAACM,OAAX,EAAb;MACD;IACF;;IACD,OAAON,UAAP;EACD;;EAqBDH,yBAAyB,CAACT,MAAD,EAAqB;IAC5C,MAAMG,YAAY,qBAAQ,KAAKC,KAAL,CAAWD,YAAnB,CAAlB;;IAEA,IAAIA,YAAY,CAACH,MAAM,CAACQ,KAAR,CAAhB,EAAgC;MAC9B,OAAOL,YAAY,CAACH,MAAM,CAACQ,KAAR,CAAnB;IACD,CAL2C,CAO5C;;;IACA,MAAMW,gBAAgB,GAAG,KAAKpB,KAAL,CAAWa,UAAX,CAAsBQ,KAAtB,CAA6BC,KAAD,IAAW;MAC9D,IAAIA,KAAK,CAACb,KAAN,KAAgBR,MAAM,CAACQ,KAA3B,EAAkC;QAChC,OAAO,IAAP;MACD;;MAED,OAAOL,YAAY,CAACkB,KAAK,CAACb,KAAP,CAAnB;IACD,CANwB,CAAzB;;IAQA,IAAIW,gBAAJ,EAAsB;MACpB;MACA,KAAKpB,KAAL,CAAWa,UAAX,CAAsBU,OAAtB,CAA+BD,KAAD,IAAW;QACvC,OAAOlB,YAAY,CAACkB,KAAK,CAACb,KAAP,CAAnB;MACD,CAFD;IAGD,CALD,MAKO;MACL;MACA,KAAKT,KAAL,CAAWa,UAAX,CAAsBU,OAAtB,CAA+BD,KAAD,IAAW;QACvC,IAAIA,KAAK,CAACb,KAAN,KAAgBR,MAAM,CAACQ,KAA3B,EAAkC;UAChC;QACD;;QAEDL,YAAY,CAACkB,KAAK,CAACb,KAAP,CAAZ,GAA4B,IAA5B;MACD,CAND;IAOD;;IAED,OAAOL,YAAP;EACD;;EAEDoB,MAAM,GAAG;IACP,MAAM;MACJC,aADI;MAEJC,SAFI;MAGJC,SAHI;MAIJb,IAJI;MAKJI,QALI;MAMJU,SANI;MAOJC,QAPI;MAQJC,MARI;MASJC,GATI;MAUJC,GAVI;MAWJC,GAXI;MAYJC,OAZI;MAaJC;IAbI,IAcF,KAAKnC,KAdT;IAeA,MAAMoC,iBAAiB,GAAG;MAAEN,MAAF;MAAUC,GAAV;MAAeC,GAAf;MAAoBC,GAApB;MAAyBC,OAAzB;MAAkCC;IAAlC,CAA1B;IACA,MAAM/B,YAAY,GAAG,KAAKC,KAAL,CAAWD,YAAhC;IACA,MAAMiC,eAAe,GAAG;MAAET,SAAF;MAAaC;IAAb,CAAxB;IACA,MAAMS,SAAS,GAAG;MAAExB,IAAF;MAAQI;IAAR,CAAlB;IACA,MAAML,UAAU,GAAG,KAAKD,UAAL,GAAkB2B,MAAlB,CAA0BtC,MAAD,IAAY,CAACA,MAAM,CAACuC,cAAP,CAAsBH,eAAtB,CAAtC,CAAnB;IACA,MAAMI,WAAW,GAAI,GAAE,KAAKzC,KAAL,CAAWe,YAAX,GAA0B,oBAA1B,GAAiD,EAAG,IAAGU,aAAc,EAA5F,CArBO,CAuBP;IACA;;IACA,MAAMiB,KAAU,GAAGhB,SAAS,IAAIC,SAAb,GAAyBA,SAAzB,GAAqCgB,SAAxD;IACA,MAAMC,OAAY,GAAGlB,SAAS,IAAIC,SAAb,GAAyBA,SAAS,GAAG,CAArC,GAAyCgB,SAA9D;IACA,MAAME,WAAgC,GAAG;MACvCC,QAAQ,EAAEJ,KAD6B;MAEvCA,KAAK,EAAEE;IAFgC,CAAzC;IAKA,MAAMG,WAAiC;MACrClC,UAAU,EAAEA,UADyB;MAErCT,YAAY,EAAEA,YAFuB;MAGrCD,cAAc,EAAE,KAAKA,cAHgB;MAIrC6C,YAAY,EAAE,KAAKhD,KAAL,CAAWgD,YAJY;MAKrCC,YAAY,EAAE,KAAKjD,KAAL,CAAWiD,YALY;MAMrCC,aAAa,EAAE,KAAKlD,KAAL,CAAWkD;IANW,GAOlCd,iBAPkC,EAQlCE,SARkC,CAAvC;IAWA,oBACE;MAAK,SAAS,EAAG,wBAAuBG,WAAY,EAApD;MAAuD,KAAK,EAAEI,WAA9D;MAAA,UACG,KAAK7C,KAAL,CAAWe,YAAX,gBAA0B,KAAC,WAAD,oBAAiBgC,WAAjB,EAA1B,gBAA6D,KAAC,gBAAD,oBAAsBA,WAAtB;IADhE,EADF;EAKD;;AAlJ2E;;gBAAjEjD,W,kBACsC;EAC/CgC,MAAM,EAAE,KADuC;EAE/CC,GAAG,EAAE,KAF0C;EAG/CC,GAAG,EAAE,KAH0C;EAI/CC,GAAG,EAAE,KAJ0C;EAK/CC,OAAO,EAAE,KALsC;EAM/CC,KAAK,EAAE,KANwC;EAO/CpB,YAAY,EAAE,KAPiC;EAQ/CW,SAAS,EAAE,KARoC;EAS/CZ,IAAI,EAAE6B,SATyC;EAU/CzB,QAAQ,EAAE,KAVqC;EAW/CO,aAAa,EAAE,EAXgC;EAY/CtB,cAAc,EAAE,MAAM,CAAE,CAZuB;EAa/C8C,YAAY,EAAE,MAAM,CAAE,CAbyB;EAc/CD,YAAY,EAAE,MAAM,CAAE,CAdyB;EAe/CE,aAAa,EAAE,MAAM,CAAE;AAfwB,C;;AAoJnD,MAAMC,gBAAN,SAA+B1D,aAA/B,CAAmE;EACjE+B,MAAM,GAAG;IACP,MAAM;MAAEX,UAAF;MAAcT,YAAd;MAA4B0B,MAA5B;MAAoCC,GAApC;MAAyCC,GAAzC;MAA8CC,GAA9C;MAAmDC,OAAnD;MAA4DC;IAA5D,IAAsE,KAAKnC,KAAjF;IACA,MAAMoC,iBAAiB,GAAG;MAAEN,MAAF;MAAUC,GAAV;MAAeC,GAAf;MAAoBC,GAApB;MAAyBC,OAAzB;MAAkCC;IAAlC,CAA1B;IACA,OAAOtB,UAAU,CAACuC,GAAX,CAAe,CAACnD,MAAD,EAASoD,CAAT,kBACpB,KAAC,UAAD,CACE;IACA;IAFF;MAIE,MAAM,EAAEpD,MAJV;MAKE,MAAM,EAAEG,YAAY,CAACH,MAAM,CAACQ,KAAR;IALtB,GAMM2B,iBANN;MAOE,YAAY,EAAE,KAAKpC,KAAL,CAAWG,cAP3B;MAQE,aAAa,EAAE,KAAKH,KAAL,CAAWkD,aAR5B;MASE,YAAY,EAAE,KAAKlD,KAAL,CAAWgD;IAT3B,IAGQ,GAAE/C,MAAM,CAACqD,EAAG,IAAGD,CAAE,EAHzB,CADK,CAAP;EAaD;;AAjBgE;;AAoBnE,MAAME,WAAN,SAA0B9D,aAA1B,CAAuE;EAAA;IAAA;;IAAA,sCACrD+D,IAAD,IAAsB;MACnC,IAAI,CAAC,KAAKxD,KAAL,CAAWiD,YAAhB,EAA8B;QAC5B;MACD;;MAED,IAAI/B,QAAQ,GAAG,KAAKlB,KAAL,CAAWkB,QAA1B;MACA,IAAI5B,MAAM,GAAG,KAAKU,KAAL,CAAWc,IAAxB;;MACA,IAAI0C,IAAI,KAAKlE,MAAb,EAAqB;QACnB4B,QAAQ,GAAGyB,SAAX;MACD,CATkC,CAWnC;;;MACA,IAAIzB,QAAQ,KAAK,KAAjB,EAAwB;QACtB5B,MAAM,GAAGqD,SAAT;QACAzB,QAAQ,GAAGyB,SAAX;MACD,CAHD,MAGO;QACLzB,QAAQ,GAAG,CAACA,QAAZ;QACA5B,MAAM,GAAGkE,IAAT;MACD;;MACD,KAAKxD,KAAL,CAAWiD,YAAX,CAAwB3D,MAAxB,EAAgC4B,QAAhC;IACD,CArBoE;EAAA;;EAuBrEM,MAAM,GAAG;IACP,MAAMX,UAAU,GAAG,KAAKb,KAAL,CAAWa,UAA9B;IACA,MAAM;MAAEiB,MAAF;MAAUC,GAAV;MAAeC,GAAf;MAAoBC,GAApB;MAAyBC,OAAzB;MAAkCC,KAAlC;MAAyCrB,IAAzC;MAA+CI,QAA/C;MAAyDd;IAAzD,IAA0E,KAAKJ,KAArF;IACA,MAAMoC,iBAAsB,GAAG;MAAEN,MAAF;MAAUC,GAAV;MAAeC,GAAf;MAAoBC,GAApB;MAAyBC,OAAzB;MAAkCC;IAAlC,CAA/B;;IAEA,IAAI,CAACtB,UAAL,EAAiB;MACf,OAAO,IAAP;IACD;;IAED,oBACE;MAAA,wBACE;QAAA,uBACE;UAAK,KAAK,EAAE;YAAE6B,KAAK,EAAE;UAAT;QAAZ;MADF,EADF,eAIE;QAAA,uBACE;UAAA,wBACE;YAAI,KAAK,EAAE;cAAEe,SAAS,EAAE;YAAb;UAAX,EADF,EAEG5D,YAAY,CAACuD,GAAb,CACEM,QAAD,IACEtB,iBAAiB,CAACsB,QAAD,CAAjB,iBACE,KAAC,qBAAD;YAEE,QAAQ,EAAEA,QAFZ;YAGE,IAAI,EAAE5C,IAHR;YAIE,QAAQ,EAAEI,QAJZ;YAKE,OAAO,EAAE,KAAK+B;UALhB,GACOS,QADP,CAHL,CAFH;QAAA;MADF,EAJF,eAqBE;QAAA,UACG7C,UAAU,IACTA,UAAU,CAACuC,GAAX,CAAe,CAACnD,MAAD,EAASoD,CAAT,kBACb,KAAC,UAAD;UAEE,OAAO,EAAE,IAFX;UAGE,MAAM,EAAEpD,MAHV;UAIE,MAAM,EAAEG,YAAY,CAACH,MAAM,CAACQ,KAAR,CAJtB;UAKE,YAAY,EAAE,KAAKT,KAAL,CAAWG,cAL3B;UAME,aAAa,EAAE,KAAKH,KAAL,CAAWkD,aAN5B;UAOE,YAAY,EAAE,KAAKlD,KAAL,CAAWgD;QAP3B,GAQMZ,iBARN,GACQ,GAAEnC,MAAM,CAACqD,EAAG,IAAGD,CAAE,EADzB,CADF;MAFJ,EArBF;IAAA,EADF;EAuCD;;AAvEoE;;AA+EvE,MAAMM,qBAAN,SAAoClE,aAApC,CAA4F;EAAA;IAAA;;IAAA,iCAChF,MAAM;MACd,IAAI,KAAKO,KAAL,CAAW4D,OAAf,EAAwB;QACtB,KAAK5D,KAAL,CAAW4D,OAAX,CAAmB,KAAK5D,KAAL,CAAW0D,QAA9B;MACD;IACF,CALyF;EAAA;;EAO1FlC,MAAM,GAAG;IACP,MAAM;MAAEkC,QAAF;MAAY5C,IAAZ;MAAkBI;IAAlB,IAA+B,KAAKlB,KAA1C;IACA,oBACE;MAAI,SAAS,EAAC,SAAd;MAAwB,OAAO,EAAE,KAAK4D,OAAtC;MAAA,WACGF,QADH,EAEG5C,IAAI,KAAK4C,QAAT,iBAAqB,KAAC,IAAD;QAAM,IAAI,EAAExC,QAAQ,GAAG,YAAH,GAAkB;MAAtC,EAFxB;IAAA,EADF;EAMD;;AAfyF;;AAkB5F,OAAO,MAAM2C,MAAN,SAAqBpE,aAArB,CAAqD;EAC1D+B,MAAM,GAAG;IACP,oBACE,KAAC,eAAD;MAAiB,mBAAmB,MAApC;MAAA,uBACE,KAAC,WAAD,oBAAiB,KAAKxB,KAAtB;IADF,EADF;EAKD;;AAPyD;AAU5D,eAAe6D,MAAf"},"metadata":{},"sourceType":"module"}