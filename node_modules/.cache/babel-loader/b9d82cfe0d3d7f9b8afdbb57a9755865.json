{"ast":null,"code":"import uPlot from 'uplot';\nimport { colorManipulator, FALLBACK_COLOR, FieldColorModeId } from '@grafana/data';\nimport { GraphDrawStyle, GraphGradientMode, LineInterpolation, VisibilityMode } from '@grafana/schema';\nimport { PlotConfigBuilder } from '../types';\nimport { getHueGradientFn, getOpacityGradientFn, getScaleGradientFn } from './gradientFills';\nexport class UPlotSeriesBuilder extends PlotConfigBuilder {\n  getConfig() {\n    const {\n      facets,\n      drawStyle,\n      pathBuilder,\n      pointsBuilder,\n      pointsFilter,\n      lineInterpolation,\n      lineWidth,\n      lineStyle,\n      barAlignment,\n      barWidthFactor,\n      barMaxWidth,\n      showPoints,\n      pointSize,\n      scaleKey,\n      pxAlign,\n      spanNulls,\n      show = true\n    } = this.props;\n    let lineConfig = {};\n    let lineColor = this.getLineColor(); // GraphDrawStyle.Points mode also needs this for fill/stroke sharing & re-use in series.points. see getColor() below.\n\n    lineConfig.stroke = lineColor;\n\n    if (pathBuilder != null) {\n      lineConfig.paths = pathBuilder;\n      lineConfig.width = lineWidth;\n    } else if (drawStyle === GraphDrawStyle.Points) {\n      lineConfig.paths = () => null;\n    } else if (drawStyle != null) {\n      lineConfig.width = lineWidth;\n\n      if (lineStyle && lineStyle.fill !== 'solid') {\n        var _lineStyle$dash;\n\n        if (lineStyle.fill === 'dot') {\n          lineConfig.cap = 'round';\n        }\n\n        lineConfig.dash = (_lineStyle$dash = lineStyle.dash) !== null && _lineStyle$dash !== void 0 ? _lineStyle$dash : [10, 10];\n      }\n\n      lineConfig.paths = (self, seriesIdx, idx0, idx1) => {\n        let pathsBuilder = mapDrawStyleToPathBuilder(drawStyle, lineInterpolation, barAlignment, barWidthFactor, barMaxWidth);\n        return pathsBuilder(self, seriesIdx, idx0, idx1);\n      };\n    }\n\n    const useColor = // @ts-ignore\n    typeof lineColor === 'string' ? lineColor : (u, seriesIdx) => u.series[seriesIdx]._stroke;\n    const pointsConfig = {\n      points: {\n        stroke: useColor,\n        fill: useColor,\n        size: !pointSize || pointSize < lineWidth ? undefined : pointSize,\n        filter: pointsFilter\n      }\n    };\n\n    if (pointsBuilder != null) {\n      pointsConfig.points.show = pointsBuilder;\n    } else {\n      // we cannot set points.show property above (even to undefined) as that will clear uPlot's default auto behavior\n      if (drawStyle === GraphDrawStyle.Points) {\n        pointsConfig.points.show = true;\n      } else {\n        if (showPoints === VisibilityMode.Auto) {\n          if (drawStyle === GraphDrawStyle.Bars) {\n            pointsConfig.points.show = false;\n          }\n        } else if (showPoints === VisibilityMode.Never) {\n          pointsConfig.points.show = false;\n        } else if (showPoints === VisibilityMode.Always) {\n          pointsConfig.points.show = true;\n        }\n      }\n    }\n\n    return Object.assign({\n      scale: scaleKey,\n      facets,\n      spanGaps: typeof spanNulls === 'number' ? false : spanNulls,\n      value: () => '',\n      pxAlign,\n      show,\n      fill: this.getFill()\n    }, lineConfig, pointsConfig);\n  }\n\n  getLineColor() {\n    const {\n      lineColor,\n      gradientMode,\n      colorMode,\n      thresholds,\n      theme,\n      hardMin,\n      hardMax,\n      softMin,\n      softMax,\n      dynamicSeriesColor\n    } = this.props;\n\n    if (gradientMode === GraphGradientMode.None && dynamicSeriesColor) {\n      return (plot, seriesIdx) => {\n        var _ref, _dynamicSeriesColor;\n\n        return (_ref = (_dynamicSeriesColor = dynamicSeriesColor(seriesIdx)) !== null && _dynamicSeriesColor !== void 0 ? _dynamicSeriesColor : lineColor) !== null && _ref !== void 0 ? _ref : FALLBACK_COLOR;\n      };\n    }\n\n    if (gradientMode === GraphGradientMode.Scheme && (colorMode === null || colorMode === void 0 ? void 0 : colorMode.id) !== FieldColorModeId.Fixed) {\n      return getScaleGradientFn(1, theme, colorMode, thresholds, hardMin, hardMax, softMin, softMax);\n    }\n\n    return lineColor !== null && lineColor !== void 0 ? lineColor : FALLBACK_COLOR;\n  }\n\n  getFill() {\n    const {\n      lineColor,\n      fillColor,\n      gradientMode,\n      fillOpacity,\n      colorMode,\n      thresholds,\n      theme,\n      hardMin,\n      hardMax,\n      softMin,\n      softMax,\n      dynamicSeriesColor\n    } = this.props;\n\n    if (fillColor) {\n      return fillColor;\n    }\n\n    const mode = gradientMode !== null && gradientMode !== void 0 ? gradientMode : GraphGradientMode.None;\n    const opacityPercent = (fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 0) / 100;\n\n    if (mode === GraphGradientMode.None && dynamicSeriesColor && opacityPercent > 0) {\n      return (u, seriesIdx) => {\n        // @ts-ignore\n        let lineColor = u.series[seriesIdx]._stroke; // cache\n\n        return colorManipulator.alpha(lineColor !== null && lineColor !== void 0 ? lineColor : '', opacityPercent);\n      };\n    }\n\n    switch (mode) {\n      case GraphGradientMode.Opacity:\n        return getOpacityGradientFn(fillColor !== null && fillColor !== void 0 ? fillColor : lineColor, opacityPercent);\n\n      case GraphGradientMode.Hue:\n        return getHueGradientFn(fillColor !== null && fillColor !== void 0 ? fillColor : lineColor, opacityPercent, theme);\n\n      case GraphGradientMode.Scheme:\n        if ((colorMode === null || colorMode === void 0 ? void 0 : colorMode.id) !== FieldColorModeId.Fixed) {\n          return getScaleGradientFn(opacityPercent, theme, colorMode, thresholds, hardMin, hardMax, softMin, softMax);\n        }\n\n      // intentional fall-through to handle Scheme with Fixed color\n\n      default:\n        if (opacityPercent > 0) {\n          return colorManipulator.alpha(lineColor !== null && lineColor !== void 0 ? lineColor : '', opacityPercent);\n        }\n\n    }\n\n    return undefined;\n  }\n\n}\nlet builders = undefined;\n\nfunction mapDrawStyleToPathBuilder(style, lineInterpolation, barAlignment = 0, barWidthFactor = 0.6, barMaxWidth = 200) {\n  const pathBuilders = uPlot.paths;\n\n  if (!builders) {\n    // This should be global static, but Jest initalization was failing so we lazy load to avoid the issue\n    builders = {\n      linear: pathBuilders.linear(),\n      smooth: pathBuilders.spline(),\n      stepBefore: pathBuilders.stepped({\n        align: -1\n      }),\n      stepAfter: pathBuilders.stepped({\n        align: 1\n      })\n    };\n  }\n\n  if (style === GraphDrawStyle.Bars) {\n    // each bars pathBuilder is lazy-initialized and globally cached by a key composed of its options\n    let barsCfgKey = `bars|${barAlignment}|${barWidthFactor}|${barMaxWidth}`;\n\n    if (!builders[barsCfgKey]) {\n      builders[barsCfgKey] = pathBuilders.bars({\n        size: [barWidthFactor, barMaxWidth],\n        align: barAlignment\n      });\n    }\n\n    return builders[barsCfgKey];\n  } else if (style === GraphDrawStyle.Line) {\n    if (lineInterpolation === LineInterpolation.StepBefore) {\n      return builders.stepBefore;\n    }\n\n    if (lineInterpolation === LineInterpolation.StepAfter) {\n      return builders.stepAfter;\n    }\n\n    if (lineInterpolation === LineInterpolation.Smooth) {\n      return builders.smooth;\n    }\n  }\n\n  return builders.linear; // the default\n}","map":{"version":3,"names":["uPlot","colorManipulator","FALLBACK_COLOR","FieldColorModeId","GraphDrawStyle","GraphGradientMode","LineInterpolation","VisibilityMode","PlotConfigBuilder","getHueGradientFn","getOpacityGradientFn","getScaleGradientFn","UPlotSeriesBuilder","getConfig","facets","drawStyle","pathBuilder","pointsBuilder","pointsFilter","lineInterpolation","lineWidth","lineStyle","barAlignment","barWidthFactor","barMaxWidth","showPoints","pointSize","scaleKey","pxAlign","spanNulls","show","props","lineConfig","lineColor","getLineColor","stroke","paths","width","Points","fill","cap","dash","self","seriesIdx","idx0","idx1","pathsBuilder","mapDrawStyleToPathBuilder","useColor","u","series","_stroke","pointsConfig","points","size","undefined","filter","Auto","Bars","Never","Always","scale","spanGaps","value","getFill","gradientMode","colorMode","thresholds","theme","hardMin","hardMax","softMin","softMax","dynamicSeriesColor","None","plot","Scheme","id","Fixed","fillColor","fillOpacity","mode","opacityPercent","alpha","Opacity","Hue","builders","style","pathBuilders","linear","smooth","spline","stepBefore","stepped","align","stepAfter","barsCfgKey","bars","Line","StepBefore","StepAfter","Smooth"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/uPlot/config/UPlotSeriesBuilder.ts"],"sourcesContent":["import uPlot, { Series } from 'uplot';\n\nimport {\n  colorManipulator,\n  DataFrameFieldIndex,\n  FALLBACK_COLOR,\n  FieldColorMode,\n  FieldColorModeId,\n  GrafanaTheme2,\n  ThresholdsConfig,\n} from '@grafana/data';\nimport {\n  BarAlignment,\n  BarConfig,\n  GraphDrawStyle,\n  FillConfig,\n  GraphGradientMode,\n  LineConfig,\n  LineInterpolation,\n  PointsConfig,\n  VisibilityMode,\n} from '@grafana/schema';\n\nimport { PlotConfigBuilder } from '../types';\n\nimport { getHueGradientFn, getOpacityGradientFn, getScaleGradientFn } from './gradientFills';\n\nexport interface SeriesProps extends LineConfig, BarConfig, FillConfig, PointsConfig {\n  scaleKey: string;\n  pxAlign?: boolean;\n  gradientMode?: GraphGradientMode;\n  dynamicSeriesColor?: (seriesIdx: number) => string | undefined;\n\n  facets?: uPlot.Series.Facet[];\n\n  /** Used when gradientMode is set to Scheme */\n  thresholds?: ThresholdsConfig;\n  colorMode?: FieldColorMode;\n  hardMin?: number | null;\n  hardMax?: number | null;\n  softMin?: number | null;\n  softMax?: number | null;\n\n  drawStyle?: GraphDrawStyle;\n  pathBuilder?: Series.PathBuilder | null;\n  pointsFilter?: Series.Points.Filter | null;\n  pointsBuilder?: Series.Points.Show | null;\n  show?: boolean;\n  dataFrameFieldIndex?: DataFrameFieldIndex;\n  theme: GrafanaTheme2;\n  value?: uPlot.Series.Value;\n}\n\nexport class UPlotSeriesBuilder extends PlotConfigBuilder<SeriesProps, Series> {\n  getConfig() {\n    const {\n      facets,\n      drawStyle,\n      pathBuilder,\n      pointsBuilder,\n      pointsFilter,\n      lineInterpolation,\n      lineWidth,\n      lineStyle,\n      barAlignment,\n      barWidthFactor,\n      barMaxWidth,\n      showPoints,\n      pointSize,\n      scaleKey,\n      pxAlign,\n      spanNulls,\n      show = true,\n    } = this.props;\n\n    let lineConfig: Partial<Series> = {};\n\n    let lineColor = this.getLineColor();\n\n    // GraphDrawStyle.Points mode also needs this for fill/stroke sharing & re-use in series.points. see getColor() below.\n    lineConfig.stroke = lineColor;\n\n    if (pathBuilder != null) {\n      lineConfig.paths = pathBuilder;\n      lineConfig.width = lineWidth;\n    } else if (drawStyle === GraphDrawStyle.Points) {\n      lineConfig.paths = () => null;\n    } else if (drawStyle != null) {\n      lineConfig.width = lineWidth;\n      if (lineStyle && lineStyle.fill !== 'solid') {\n        if (lineStyle.fill === 'dot') {\n          lineConfig.cap = 'round';\n        }\n        lineConfig.dash = lineStyle.dash ?? [10, 10];\n      }\n      lineConfig.paths = (self: uPlot, seriesIdx: number, idx0: number, idx1: number) => {\n        let pathsBuilder = mapDrawStyleToPathBuilder(\n          drawStyle,\n          lineInterpolation,\n          barAlignment,\n          barWidthFactor,\n          barMaxWidth\n        );\n        return pathsBuilder(self, seriesIdx, idx0, idx1);\n      };\n    }\n\n    const useColor: uPlot.Series.Stroke =\n      // @ts-ignore\n      typeof lineColor === 'string' ? lineColor : (u, seriesIdx) => u.series[seriesIdx]._stroke;\n\n    const pointsConfig: Partial<Series> = {\n      points: {\n        stroke: useColor,\n        fill: useColor,\n        size: !pointSize || pointSize < lineWidth! ? undefined : pointSize,\n        filter: pointsFilter,\n      },\n    };\n\n    if (pointsBuilder != null) {\n      pointsConfig.points!.show = pointsBuilder;\n    } else {\n      // we cannot set points.show property above (even to undefined) as that will clear uPlot's default auto behavior\n      if (drawStyle === GraphDrawStyle.Points) {\n        pointsConfig.points!.show = true;\n      } else {\n        if (showPoints === VisibilityMode.Auto) {\n          if (drawStyle === GraphDrawStyle.Bars) {\n            pointsConfig.points!.show = false;\n          }\n        } else if (showPoints === VisibilityMode.Never) {\n          pointsConfig.points!.show = false;\n        } else if (showPoints === VisibilityMode.Always) {\n          pointsConfig.points!.show = true;\n        }\n      }\n    }\n\n    return {\n      scale: scaleKey,\n      facets,\n      spanGaps: typeof spanNulls === 'number' ? false : spanNulls,\n      value: () => '',\n      pxAlign,\n      show,\n      fill: this.getFill(),\n      ...lineConfig,\n      ...pointsConfig,\n    };\n  }\n\n  private getLineColor(): Series.Stroke {\n    const {\n      lineColor,\n      gradientMode,\n      colorMode,\n      thresholds,\n      theme,\n      hardMin,\n      hardMax,\n      softMin,\n      softMax,\n      dynamicSeriesColor,\n    } = this.props;\n\n    if (gradientMode === GraphGradientMode.None && dynamicSeriesColor) {\n      return (plot: uPlot, seriesIdx: number) => dynamicSeriesColor(seriesIdx) ?? lineColor ?? FALLBACK_COLOR;\n    }\n\n    if (gradientMode === GraphGradientMode.Scheme && colorMode?.id !== FieldColorModeId.Fixed) {\n      return getScaleGradientFn(1, theme, colorMode, thresholds, hardMin, hardMax, softMin, softMax);\n    }\n\n    return lineColor ?? FALLBACK_COLOR;\n  }\n\n  private getFill(): Series.Fill | undefined {\n    const {\n      lineColor,\n      fillColor,\n      gradientMode,\n      fillOpacity,\n      colorMode,\n      thresholds,\n      theme,\n      hardMin,\n      hardMax,\n      softMin,\n      softMax,\n      dynamicSeriesColor,\n    } = this.props;\n\n    if (fillColor) {\n      return fillColor;\n    }\n\n    const mode = gradientMode ?? GraphGradientMode.None;\n    const opacityPercent = (fillOpacity ?? 0) / 100;\n\n    if (mode === GraphGradientMode.None && dynamicSeriesColor && opacityPercent > 0) {\n      return (u: uPlot, seriesIdx: number) => {\n        // @ts-ignore\n        let lineColor = u.series[seriesIdx]._stroke; // cache\n        return colorManipulator.alpha(lineColor ?? '', opacityPercent);\n      };\n    }\n\n    switch (mode) {\n      case GraphGradientMode.Opacity:\n        return getOpacityGradientFn((fillColor ?? lineColor)!, opacityPercent);\n      case GraphGradientMode.Hue:\n        return getHueGradientFn((fillColor ?? lineColor)!, opacityPercent, theme);\n      case GraphGradientMode.Scheme:\n        if (colorMode?.id !== FieldColorModeId.Fixed) {\n          return getScaleGradientFn(opacityPercent, theme, colorMode, thresholds, hardMin, hardMax, softMin, softMax);\n        }\n      // intentional fall-through to handle Scheme with Fixed color\n      default:\n        if (opacityPercent > 0) {\n          return colorManipulator.alpha(lineColor ?? '', opacityPercent);\n        }\n    }\n\n    return undefined;\n  }\n}\n\ninterface PathBuilders {\n  linear: Series.PathBuilder;\n  smooth: Series.PathBuilder;\n  stepBefore: Series.PathBuilder;\n  stepAfter: Series.PathBuilder;\n  [key: string]: Series.PathBuilder;\n}\n\nlet builders: PathBuilders | undefined = undefined;\n\nfunction mapDrawStyleToPathBuilder(\n  style: GraphDrawStyle,\n  lineInterpolation?: LineInterpolation,\n  barAlignment = 0,\n  barWidthFactor = 0.6,\n  barMaxWidth = 200\n): Series.PathBuilder {\n  const pathBuilders = uPlot.paths;\n\n  if (!builders) {\n    // This should be global static, but Jest initalization was failing so we lazy load to avoid the issue\n    builders = {\n      linear: pathBuilders.linear!(),\n      smooth: pathBuilders.spline!(),\n      stepBefore: pathBuilders.stepped!({ align: -1 }),\n      stepAfter: pathBuilders.stepped!({ align: 1 }),\n    };\n  }\n\n  if (style === GraphDrawStyle.Bars) {\n    // each bars pathBuilder is lazy-initialized and globally cached by a key composed of its options\n    let barsCfgKey = `bars|${barAlignment}|${barWidthFactor}|${barMaxWidth}`;\n\n    if (!builders[barsCfgKey]) {\n      builders[barsCfgKey] = pathBuilders.bars!({\n        size: [barWidthFactor, barMaxWidth],\n        align: barAlignment as BarAlignment,\n      });\n    }\n\n    return builders[barsCfgKey];\n  } else if (style === GraphDrawStyle.Line) {\n    if (lineInterpolation === LineInterpolation.StepBefore) {\n      return builders.stepBefore;\n    }\n    if (lineInterpolation === LineInterpolation.StepAfter) {\n      return builders.stepAfter;\n    }\n    if (lineInterpolation === LineInterpolation.Smooth) {\n      return builders.smooth;\n    }\n  }\n\n  return builders.linear; // the default\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}