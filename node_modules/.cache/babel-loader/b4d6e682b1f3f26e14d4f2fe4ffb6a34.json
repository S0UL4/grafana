{"ast":null,"code":"var _h, _thead, _Icon, _Icon2, _br, _br2, _br3;\n\nimport React from 'react';\nimport { Alert, Icon } from '@grafana/ui';\nimport { AppNotificationSeverity } from 'app/types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const LdapConnectionStatus = ({\n  ldapConnectionInfo\n}) => {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n      className: \"page-heading\",\n      children: \"LDAP Connection\"\n    })), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"gf-form-group\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form\",\n        children: /*#__PURE__*/_jsxs(\"table\", {\n          className: \"filter-table form-inline\",\n          children: [_thead || (_thead = /*#__PURE__*/_jsx(\"thead\", {\n            children: /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"th\", {\n                children: \"Host\"\n              }), /*#__PURE__*/_jsx(\"th\", {\n                colSpan: 2,\n                children: \"Port\"\n              })]\n            })\n          })), /*#__PURE__*/_jsx(\"tbody\", {\n            children: ldapConnectionInfo && ldapConnectionInfo.map((serverInfo, index) => /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"td\", {\n                children: serverInfo.host\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: serverInfo.port\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: serverInfo.available ? _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n                  name: \"check\",\n                  className: \"pull-right\"\n                })) : _Icon2 || (_Icon2 = /*#__PURE__*/_jsx(Icon, {\n                  name: \"exclamation-triangle\",\n                  className: \"pull-right\"\n                }))\n              })]\n            }, index))\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-group\",\n        children: /*#__PURE__*/_jsx(LdapErrorBox, {\n          ldapConnectionInfo: ldapConnectionInfo\n        })\n      })]\n    })]\n  });\n};\nexport const LdapErrorBox = ({\n  ldapConnectionInfo\n}) => {\n  const hasError = ldapConnectionInfo.some(info => info.error);\n\n  if (!hasError) {\n    return null;\n  }\n\n  const connectionErrors = [];\n  ldapConnectionInfo.forEach(info => {\n    if (info.error) {\n      connectionErrors.push(info);\n    }\n  });\n  const errorElements = connectionErrors.map((info, index) => /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsxs(\"span\", {\n      style: {\n        fontWeight: 500\n      },\n      children: [info.host, \":\", info.port, _br || (_br = /*#__PURE__*/_jsx(\"br\", {}))]\n    }), /*#__PURE__*/_jsx(\"span\", {\n      children: info.error\n    }), index !== connectionErrors.length - 1 && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_br2 || (_br2 = /*#__PURE__*/_jsx(\"br\", {})), _br3 || (_br3 = /*#__PURE__*/_jsx(\"br\", {}))]\n    })]\n  }, index));\n  return /*#__PURE__*/_jsx(Alert, {\n    title: \"Connection error\",\n    severity: AppNotificationSeverity.Error,\n    children: errorElements\n  });\n};","map":{"version":3,"names":["React","Alert","Icon","AppNotificationSeverity","LdapConnectionStatus","ldapConnectionInfo","map","serverInfo","index","host","port","available","LdapErrorBox","hasError","some","info","error","connectionErrors","forEach","push","errorElements","fontWeight","length","Error"],"sources":["/home/soula/grafana/public/app/features/admin/ldap/LdapConnectionStatus.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { Alert, Icon } from '@grafana/ui';\nimport { AppNotificationSeverity, LdapConnectionInfo, LdapServerInfo } from 'app/types';\n\ninterface Props {\n  ldapConnectionInfo: LdapConnectionInfo;\n}\n\nexport const LdapConnectionStatus: FC<Props> = ({ ldapConnectionInfo }) => {\n  return (\n    <>\n      <h3 className=\"page-heading\">LDAP Connection</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <table className=\"filter-table form-inline\">\n            <thead>\n              <tr>\n                <th>Host</th>\n                <th colSpan={2}>Port</th>\n              </tr>\n            </thead>\n            <tbody>\n              {ldapConnectionInfo &&\n                ldapConnectionInfo.map((serverInfo, index) => (\n                  <tr key={index}>\n                    <td>{serverInfo.host}</td>\n                    <td>{serverInfo.port}</td>\n                    <td>\n                      {serverInfo.available ? (\n                        <Icon name=\"check\" className=\"pull-right\" />\n                      ) : (\n                        <Icon name=\"exclamation-triangle\" className=\"pull-right\" />\n                      )}\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        </div>\n        <div className=\"gf-form-group\">\n          <LdapErrorBox ldapConnectionInfo={ldapConnectionInfo} />\n        </div>\n      </div>\n    </>\n  );\n};\n\ninterface LdapConnectionErrorProps {\n  ldapConnectionInfo: LdapConnectionInfo;\n}\n\nexport const LdapErrorBox: FC<LdapConnectionErrorProps> = ({ ldapConnectionInfo }) => {\n  const hasError = ldapConnectionInfo.some((info) => info.error);\n  if (!hasError) {\n    return null;\n  }\n\n  const connectionErrors: LdapServerInfo[] = [];\n  ldapConnectionInfo.forEach((info) => {\n    if (info.error) {\n      connectionErrors.push(info);\n    }\n  });\n\n  const errorElements = connectionErrors.map((info, index) => (\n    <div key={index}>\n      <span style={{ fontWeight: 500 }}>\n        {info.host}:{info.port}\n        <br />\n      </span>\n      <span>{info.error}</span>\n      {index !== connectionErrors.length - 1 && (\n        <>\n          <br />\n          <br />\n        </>\n      )}\n    </div>\n  ));\n\n  return (\n    <Alert title=\"Connection error\" severity={AppNotificationSeverity.Error}>\n      {errorElements}\n    </Alert>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAEA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,aAA5B;AACA,SAASC,uBAAT,QAA4E,WAA5E;;;;AAMA,OAAO,MAAMC,oBAA+B,GAAG,CAAC;EAAEC;AAAF,CAAD,KAA4B;EACzE,oBACE;IAAA,oCACE;MAAI,SAAS,EAAC,cAAd;MAAA;IAAA,EADF,gBAEE;MAAK,SAAS,EAAC,eAAf;MAAA,wBACE;QAAK,SAAS,EAAC,SAAf;QAAA,uBACE;UAAO,SAAS,EAAC,0BAAjB;UAAA,4CACE;YAAA,uBACE;cAAA,wBACE;gBAAA;cAAA,EADF,eAEE;gBAAI,OAAO,EAAE,CAAb;gBAAA;cAAA,EAFF;YAAA;UADF,EADF,gBAOE;YAAA,UACGA,kBAAkB,IACjBA,kBAAkB,CAACC,GAAnB,CAAuB,CAACC,UAAD,EAAaC,KAAb,kBACrB;cAAA,wBACE;gBAAA,UAAKD,UAAU,CAACE;cAAhB,EADF,eAEE;gBAAA,UAAKF,UAAU,CAACG;cAAhB,EAFF,eAGE;gBAAA,UACGH,UAAU,CAACI,SAAX,kCACC,KAAC,IAAD;kBAAM,IAAI,EAAC,OAAX;kBAAmB,SAAS,EAAC;gBAA7B,EADD,qCAGC,KAAC,IAAD;kBAAM,IAAI,EAAC,sBAAX;kBAAkC,SAAS,EAAC;gBAA5C,EAHD;cADH,EAHF;YAAA,GAASH,KAAT,CADF;UAFJ,EAPF;QAAA;MADF,EADF,eA2BE;QAAK,SAAS,EAAC,eAAf;QAAA,uBACE,KAAC,YAAD;UAAc,kBAAkB,EAAEH;QAAlC;MADF,EA3BF;IAAA,EAFF;EAAA,EADF;AAoCD,CArCM;AA2CP,OAAO,MAAMO,YAA0C,GAAG,CAAC;EAAEP;AAAF,CAAD,KAA4B;EACpF,MAAMQ,QAAQ,GAAGR,kBAAkB,CAACS,IAAnB,CAAyBC,IAAD,IAAUA,IAAI,CAACC,KAAvC,CAAjB;;EACA,IAAI,CAACH,QAAL,EAAe;IACb,OAAO,IAAP;EACD;;EAED,MAAMI,gBAAkC,GAAG,EAA3C;EACAZ,kBAAkB,CAACa,OAAnB,CAA4BH,IAAD,IAAU;IACnC,IAAIA,IAAI,CAACC,KAAT,EAAgB;MACdC,gBAAgB,CAACE,IAAjB,CAAsBJ,IAAtB;IACD;EACF,CAJD;EAMA,MAAMK,aAAa,GAAGH,gBAAgB,CAACX,GAAjB,CAAqB,CAACS,IAAD,EAAOP,KAAP,kBACzC;IAAA,wBACE;MAAM,KAAK,EAAE;QAAEa,UAAU,EAAE;MAAd,CAAb;MAAA,WACGN,IAAI,CAACN,IADR,OACeM,IAAI,CAACL,IADpB,6BAEE,cAFF;IAAA,EADF,eAKE;MAAA,UAAOK,IAAI,CAACC;IAAZ,EALF,EAMGR,KAAK,KAAKS,gBAAgB,CAACK,MAAjB,GAA0B,CAApC,iBACC;MAAA,wCACE,cADF,gCAEE,cAFF;IAAA,EAPJ;EAAA,GAAUd,KAAV,CADoB,CAAtB;EAgBA,oBACE,KAAC,KAAD;IAAO,KAAK,EAAC,kBAAb;IAAgC,QAAQ,EAAEL,uBAAuB,CAACoB,KAAlE;IAAA,UACGH;EADH,EADF;AAKD,CAlCM"},"metadata":{},"sourceType":"module"}