{"ast":null,"code":"var _InlineFormLabel, _InlineFormLabel2, _InlineFormLabel3, _InlineFormLabel4, _div, _InlineFormLabel5, _InlineFormLabel6;\n\nimport React, { useEffect, useReducer, useState } from 'react';\nimport { InlineFormLabel, Button } from '@grafana/ui/src/components';\nimport { Input } from '@grafana/ui/src/components/Forms/Legacy/Input/Input';\nimport { Select } from '@grafana/ui/src/components/Forms/Legacy/Select/Select';\nimport { isCredentialsComplete } from './AzureCredentials';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst authTypeOptions = [{\n  value: 'msi',\n  label: 'Managed Identity'\n}, {\n  value: 'clientsecret',\n  label: 'App Registration'\n}];\nexport const AzureCredentialsForm = props => {\n  const {\n    credentials,\n    azureCloudOptions,\n    onCredentialsChange,\n    getSubscriptions\n  } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n  const [subscriptions, setSubscriptions] = useState([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer(val => val + 1, 0);\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n\n    let canceled = false;\n    getSubscriptions().then(result => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    }; // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received, autoSelect = false) => {\n    setSubscriptions(received);\n\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find(opt => opt.value === credentials.defaultSubscriptionId);\n\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = selected => {\n    if (onCredentialsChange) {\n      setSubscriptions([]);\n      const updated = Object.assign({}, credentials, {\n        authType: selected.value || 'msi',\n        defaultSubscriptionId: undefined\n      });\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = selected => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated = Object.assign({}, credentials, {\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined\n      });\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = event => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated = Object.assign({}, credentials, {\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined\n      });\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = event => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated = Object.assign({}, credentials, {\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined\n      });\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = event => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated = Object.assign({}, credentials, {\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined\n      });\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated = Object.assign({}, credentials, {\n        clientSecret: '',\n        defaultSubscriptionId: undefined\n      });\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = selected => {\n    if (onCredentialsChange) {\n      const updated = Object.assign({}, credentials, {\n        defaultSubscriptionId: selected === null || selected === void 0 ? void 0 : selected.value\n      });\n      onCredentialsChange(updated);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"gf-form-group\",\n    children: [props.managedIdentityEnabled && /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-inline\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form\",\n        children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/_jsx(InlineFormLabel, {\n          className: \"width-12\",\n          tooltip: \"Choose the type of authentication to Azure services\",\n          children: \"Authentication\"\n        })), /*#__PURE__*/_jsx(Select, {\n          className: \"width-15\",\n          value: authTypeOptions.find(opt => opt.value === credentials.authType),\n          options: authTypeOptions,\n          onChange: onAuthTypeChange\n        })]\n      })\n    }), credentials.authType === 'clientsecret' && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [azureCloudOptions && /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_InlineFormLabel2 || (_InlineFormLabel2 = /*#__PURE__*/_jsx(InlineFormLabel, {\n            className: \"width-12\",\n            tooltip: \"Choose an Azure Cloud\",\n            children: \"Azure Cloud\"\n          })), /*#__PURE__*/_jsx(Select, {\n            className: \"width-15\",\n            value: azureCloudOptions.find(opt => opt.value === credentials.azureCloud),\n            options: azureCloudOptions,\n            onChange: onAzureCloudChange\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_InlineFormLabel3 || (_InlineFormLabel3 = /*#__PURE__*/_jsx(InlineFormLabel, {\n            className: \"width-12\",\n            children: \"Directory (tenant) ID\"\n          })), /*#__PURE__*/_jsx(\"div\", {\n            className: \"width-15\",\n            children: /*#__PURE__*/_jsx(Input, {\n              className: \"width-30\",\n              placeholder: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\",\n              value: credentials.tenantId || '',\n              onChange: onTenantIdChange\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_InlineFormLabel4 || (_InlineFormLabel4 = /*#__PURE__*/_jsx(InlineFormLabel, {\n            className: \"width-12\",\n            children: \"Application (client) ID\"\n          })), /*#__PURE__*/_jsx(\"div\", {\n            className: \"width-15\",\n            children: /*#__PURE__*/_jsx(Input, {\n              className: \"width-30\",\n              placeholder: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\",\n              value: credentials.clientId || '',\n              onChange: onClientIdChange\n            })\n          })]\n        })\n      }), typeof credentials.clientSecret === 'symbol' ? /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form-inline\",\n        children: [_div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [/*#__PURE__*/_jsx(InlineFormLabel, {\n            className: \"width-12\",\n            children: \"Client Secret\"\n          }), /*#__PURE__*/_jsx(Input, {\n            className: \"width-25\",\n            placeholder: \"configured\",\n            disabled: true\n          })]\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"max-width-30 gf-form-inline\",\n            children: /*#__PURE__*/_jsx(Button, {\n              variant: \"secondary\",\n              type: \"button\",\n              onClick: onClientSecretReset,\n              children: \"reset\"\n            })\n          })\n        })]\n      }) : /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_InlineFormLabel5 || (_InlineFormLabel5 = /*#__PURE__*/_jsx(InlineFormLabel, {\n            className: \"width-12\",\n            children: \"Client Secret\"\n          })), /*#__PURE__*/_jsx(\"div\", {\n            className: \"width-15\",\n            children: /*#__PURE__*/_jsx(Input, {\n              className: \"width-30\",\n              placeholder: \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\",\n              value: credentials.clientSecret || '',\n              onChange: onClientSecretChange\n            })\n          })]\n        })\n      })]\n    }), getSubscriptions && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_InlineFormLabel6 || (_InlineFormLabel6 = /*#__PURE__*/_jsx(InlineFormLabel, {\n            className: \"width-12\",\n            children: \"Default Subscription\"\n          })), /*#__PURE__*/_jsx(\"div\", {\n            className: \"width-25\",\n            children: /*#__PURE__*/_jsx(Select, {\n              value: credentials.defaultSubscriptionId ? subscriptions.find(opt => opt.value === credentials.defaultSubscriptionId) : undefined,\n              options: subscriptions,\n              onChange: onSubscriptionChange\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"max-width-30 gf-form-inline\",\n            children: /*#__PURE__*/_jsx(Button, {\n              variant: \"secondary\",\n              size: \"sm\",\n              type: \"button\",\n              onClick: onLoadSubscriptions,\n              disabled: !hasRequiredFields,\n              children: \"Load Subscriptions\"\n            })\n          })\n        })\n      })]\n    })]\n  });\n};\nexport default AzureCredentialsForm;","map":{"version":3,"names":["React","useEffect","useReducer","useState","InlineFormLabel","Button","Input","Select","isCredentialsComplete","authTypeOptions","value","label","AzureCredentialsForm","props","credentials","azureCloudOptions","onCredentialsChange","getSubscriptions","hasRequiredFields","subscriptions","setSubscriptions","loadSubscriptionsClicked","onLoadSubscriptions","val","updateSubscriptions","canceled","then","result","received","autoSelect","defaultSubscriptionId","length","onSubscriptionChange","found","find","opt","undefined","onAuthTypeChange","selected","updated","authType","onAzureCloudChange","azureCloud","onTenantIdChange","event","tenantId","target","onClientIdChange","clientId","onClientSecretChange","clientSecret","onClientSecretReset","managedIdentityEnabled"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/configuration/AzureCredentialsForm.tsx"],"sourcesContent":["import React, { ChangeEvent, FunctionComponent, useEffect, useReducer, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, Button } from '@grafana/ui/src/components';\nimport { Input } from '@grafana/ui/src/components/Forms/Legacy/Input/Input';\nimport { Select } from '@grafana/ui/src/components/Forms/Legacy/Select/Select';\n\nimport { AzureAuthType, AzureCredentials, isCredentialsComplete } from './AzureCredentials';\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: 'msi',\n    label: 'Managed Identity',\n  },\n  {\n    value: 'clientsecret',\n    label: 'App Registration',\n  },\n];\n\nexport const AzureCredentialsForm: FunctionComponent<Props> = (props: Props) => {\n  const { credentials, azureCloudOptions, onCredentialsChange, getSubscriptions } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    setSubscriptions(received);\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find((opt) => opt.value === credentials.defaultSubscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        authType: selected.value || 'msi',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = (selected: SelectableValue<string> | undefined) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentials = {\n        ...credentials,\n        defaultSubscriptionId: selected?.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {props.managedIdentityEnabled && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                />\n              </div>\n            </div>\n          </div>\n          {typeof credentials.clientSecret === 'symbol' ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <Input className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={credentials.clientSecret || ''}\n                    onChange={onClientSecretChange}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {getSubscriptions && (\n        <>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n              <div className=\"width-25\">\n                <Select\n                  value={\n                    credentials.defaultSubscriptionId\n                      ? subscriptions.find((opt) => opt.value === credentials.defaultSubscriptionId)\n                      : undefined\n                  }\n                  options={subscriptions}\n                  onChange={onSubscriptionChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"max-width-30 gf-form-inline\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={onLoadSubscriptions}\n                  disabled={!hasRequiredFields}\n                >\n                  Load Subscriptions\n                </Button>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}