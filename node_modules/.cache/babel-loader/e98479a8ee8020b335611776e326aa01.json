{"ast":null,"code":"import { cx } from '@emotion/css';\nimport { isNumber } from 'lodash';\nimport React from 'react';\nimport SVG from 'react-inlinesvg';\nimport { getFieldDisplayName } from '@grafana/data';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport { Checkbox, Icon, IconButton, TagList } from '@grafana/ui';\nimport { PluginIconName } from 'app/features/plugins/admin/types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TYPE_COLUMN_WIDTH = 175;\nconst DATASOURCE_COLUMN_WIDTH = 200;\nconst SORT_FIELD_WIDTH = 175;\nexport const generateColumns = (response, availableWidth, selection, selectionToggle, clearSelection, styles, onTagSelected, onDatasourceChange) => {\n  var _response$view$dataFr, _response$view$dataFr2, _response$view$dataFr3;\n\n  const columns = [];\n  const access = response.view.fields;\n  const uidField = access.uid;\n  const kindField = access.kind;\n  const sortField = access[(_response$view$dataFr = response.view.dataFrame.meta) === null || _response$view$dataFr === void 0 ? void 0 : (_response$view$dataFr2 = _response$view$dataFr.custom) === null || _response$view$dataFr2 === void 0 ? void 0 : _response$view$dataFr2.sortBy];\n\n  if (sortField) {\n    availableWidth -= SORT_FIELD_WIDTH; // pre-allocate the space for the last column\n  }\n\n  let width = 50;\n\n  if (selection && selectionToggle) {\n    width = 30;\n    columns.push({\n      id: `column-checkbox`,\n      width,\n      Header: () => {\n        if (selection('*', '*')) {\n          return /*#__PURE__*/_jsx(\"div\", {\n            className: styles.checkboxHeader,\n            children: /*#__PURE__*/_jsx(IconButton, {\n              name: 'check-square',\n              onClick: clearSelection\n            })\n          });\n        }\n\n        return /*#__PURE__*/_jsx(\"div\", {\n          className: styles.checkboxHeader,\n          children: /*#__PURE__*/_jsx(Checkbox, {\n            checked: false,\n            onChange: e => {\n              e.stopPropagation();\n              e.preventDefault();\n              const {\n                view\n              } = response;\n              const count = Math.min(view.length, 50);\n\n              for (let i = 0; i < count; i++) {\n                const item = view.get(i);\n\n                if (item.uid && item.kind) {\n                  if (!selection(item.kind, item.uid)) {\n                    selectionToggle(item.kind, item.uid);\n                  }\n                }\n              }\n            }\n          })\n        });\n      },\n      Cell: p => {\n        const uid = uidField.values.get(p.row.index);\n        const kind = kindField ? kindField.values.get(p.row.index) : 'dashboard'; // HACK for now\n\n        const selected = selection(kind, uid);\n        const hasUID = uid != null; // Panels don't have UID! Likely should not be shown on pages with manage options\n\n        return /*#__PURE__*/_jsx(\"div\", Object.assign({}, p.cellProps, {\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: styles.checkbox,\n            children: /*#__PURE__*/_jsx(Checkbox, {\n              disabled: !hasUID,\n              value: selected && hasUID,\n              onChange: e => {\n                selectionToggle(kind, uid);\n              }\n            })\n          })\n        }));\n      },\n      field: uidField\n    });\n    availableWidth -= width;\n  } // Name column\n\n\n  width = Math.max(availableWidth * 0.2, 300);\n  columns.push({\n    Cell: p => {\n      var _name;\n\n      let classNames = cx(styles.nameCellStyle);\n      let name = access.name.values.get(p.row.index);\n\n      if (!((_name = name) !== null && _name !== void 0 && _name.length)) {\n        name = 'Missing title'; // normal for panels\n\n        classNames += ' ' + styles.missingTitleText;\n      }\n\n      return /*#__PURE__*/_jsx(\"a\", Object.assign({}, p.cellProps, {\n        href: p.userProps.href,\n        className: classNames,\n        title: name,\n        children: name\n      }));\n    },\n    id: `column-name`,\n    field: access.name,\n    Header: () => {\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: styles.headerNameStyle,\n        children: \"Name\"\n      });\n    },\n    width\n  });\n  availableWidth -= width;\n  width = TYPE_COLUMN_WIDTH;\n  columns.push(makeTypeColumn(access.kind, access.panel_type, width, styles));\n  availableWidth -= width;\n  const meta = (_response$view$dataFr3 = response.view.dataFrame.meta) === null || _response$view$dataFr3 === void 0 ? void 0 : _response$view$dataFr3.custom;\n\n  if (meta !== null && meta !== void 0 && meta.locationInfo && availableWidth > 0) {\n    var _access$location2;\n\n    width = Math.max(availableWidth / 1.75, 300);\n    availableWidth -= width;\n    columns.push({\n      Cell: p => {\n        var _access$location$valu, _access$location;\n\n        const parts = ((_access$location$valu = (_access$location = access.location) === null || _access$location === void 0 ? void 0 : _access$location.values.get(p.row.index)) !== null && _access$location$valu !== void 0 ? _access$location$valu : '').split('/');\n        return /*#__PURE__*/_jsx(\"div\", Object.assign({}, p.cellProps, {\n          className: cx(styles.locationCellStyle),\n          children: parts.map(p => {\n            const info = meta.locationInfo[p];\n            return info ? /*#__PURE__*/_jsxs(\"a\", {\n              href: info.url,\n              className: styles.locationItem,\n              children: [/*#__PURE__*/_jsx(Icon, {\n                name: getIconForKind(info.kind)\n              }), \" \", info.name]\n            }, p) : /*#__PURE__*/_jsx(\"span\", {\n              children: p\n            }, p);\n          })\n        }));\n      },\n      id: `column-location`,\n      field: (_access$location2 = access.location) !== null && _access$location2 !== void 0 ? _access$location2 : access.url,\n      Header: 'Location',\n      width\n    });\n  } // Show datasources if we have any\n\n\n  if (access.ds_uid && onDatasourceChange) {\n    width = DATASOURCE_COLUMN_WIDTH;\n    columns.push(makeDataSourceColumn(access.ds_uid, width, styles.typeIcon, styles.datasourceItem, styles.invalidDatasourceItem, onDatasourceChange));\n    availableWidth -= width;\n  }\n\n  if (availableWidth > 0) {\n    columns.push(makeTagsColumn(access.tags, availableWidth, styles.tagList, onTagSelected));\n  }\n\n  if (sortField) {\n    columns.push({\n      Header: () => /*#__PURE__*/_jsx(\"div\", {\n        className: styles.sortedHeader,\n        children: getFieldDisplayName(sortField)\n      }),\n      Cell: p => {\n        let value = sortField.values.get(p.row.index);\n\n        try {\n          if (isNumber(value)) {\n            value = Number(value).toLocaleString();\n          }\n        } catch {}\n\n        return /*#__PURE__*/_jsx(\"div\", Object.assign({}, p.cellProps, {\n          className: styles.sortedItems,\n          children: `${value}`\n        }));\n      },\n      id: `column-sort-field`,\n      field: sortField,\n      width: SORT_FIELD_WIDTH\n    });\n  }\n\n  return columns;\n};\n\nfunction getIconForKind(v) {\n  if (v === 'dashboard') {\n    return 'apps';\n  }\n\n  if (v === 'folder') {\n    return 'folder';\n  }\n\n  return 'question-circle';\n}\n\nfunction makeDataSourceColumn(field, width, iconClass, datasourceItemClass, invalidDatasourceItemClass, onDatasourceChange) {\n  const srv = getDataSourceSrv();\n  return {\n    id: `column-datasource`,\n    field,\n    Header: 'Data source',\n    Cell: p => {\n      const dslist = field.values.get(p.row.index);\n\n      if (!(dslist !== null && dslist !== void 0 && dslist.length)) {\n        return null;\n      }\n\n      return /*#__PURE__*/_jsx(\"div\", Object.assign({}, p.cellProps, {\n        className: cx(datasourceItemClass),\n        children: dslist.map((v, i) => {\n          var _settings$meta, _settings$meta$info, _settings$meta$info$l;\n\n          const settings = srv.getInstanceSettings(v);\n          const icon = settings === null || settings === void 0 ? void 0 : (_settings$meta = settings.meta) === null || _settings$meta === void 0 ? void 0 : (_settings$meta$info = _settings$meta.info) === null || _settings$meta$info === void 0 ? void 0 : (_settings$meta$info$l = _settings$meta$info.logos) === null || _settings$meta$info$l === void 0 ? void 0 : _settings$meta$info$l.small;\n\n          if (icon) {\n            return /*#__PURE__*/_jsxs(\"span\", {\n              onClick: e => {\n                e.stopPropagation();\n                e.preventDefault();\n                onDatasourceChange(settings.uid);\n              },\n              children: [/*#__PURE__*/_jsx(\"img\", {\n                src: icon,\n                width: 14,\n                height: 14,\n                title: settings.type,\n                className: iconClass\n              }), settings.name]\n            }, i);\n          }\n\n          return /*#__PURE__*/_jsx(\"span\", {\n            className: invalidDatasourceItemClass,\n            children: v\n          }, i);\n        })\n      }));\n    },\n    width\n  };\n}\n\nfunction makeTypeColumn(kindField, typeField, width, styles) {\n  return {\n    id: `column-type`,\n    field: kindField !== null && kindField !== void 0 ? kindField : typeField,\n    Header: 'Type',\n    Cell: p => {\n      var _kindField$values$get;\n\n      const i = p.row.index;\n      const kind = (_kindField$values$get = kindField === null || kindField === void 0 ? void 0 : kindField.values.get(i)) !== null && _kindField$values$get !== void 0 ? _kindField$values$get : 'dashboard';\n      let icon = 'public/img/icons/unicons/apps.svg';\n      let txt = 'Dashboard';\n\n      if (kind) {\n        txt = kind;\n\n        switch (txt) {\n          case 'dashboard':\n            txt = 'Dashboard';\n            break;\n\n          case 'folder':\n            icon = 'public/img/icons/unicons/folder.svg';\n            txt = 'Folder';\n            break;\n\n          case 'panel':\n            icon = `public/img/icons/unicons/${PluginIconName.panel}.svg`;\n            const type = typeField.values.get(i);\n\n            if (type) {\n              txt = type;\n              const info = config.panels[txt];\n\n              if (info !== null && info !== void 0 && info.name) {\n                txt = info.name;\n              } else {\n                switch (type) {\n                  case 'row':\n                    txt = 'Row';\n                    icon = `public/img/icons/unicons/bars.svg`;\n                    break;\n\n                  case 'singlestat':\n                    // auto-migration\n                    txt = 'Singlestat';\n                    break;\n\n                  default:\n                    icon = `public/img/icons/unicons/question.svg`;\n                  // plugin not found\n                }\n              }\n            }\n\n            break;\n        }\n      }\n\n      return /*#__PURE__*/_jsxs(\"div\", Object.assign({}, p.cellProps, {\n        className: styles.typeText,\n        children: [/*#__PURE__*/_jsx(SVG, {\n          src: icon,\n          width: 14,\n          height: 14,\n          title: txt,\n          className: styles.typeIcon\n        }), txt]\n      }));\n    },\n    width\n  };\n}\n\nfunction makeTagsColumn(field, width, tagListClass, onTagSelected) {\n  return {\n    Cell: p => {\n      const tags = field.values.get(p.row.index);\n      return tags ? /*#__PURE__*/_jsx(\"div\", Object.assign({}, p.cellProps, {\n        children: /*#__PURE__*/_jsx(TagList, {\n          className: tagListClass,\n          tags: tags,\n          onClick: onTagSelected\n        })\n      })) : null;\n    },\n    id: `column-tags`,\n    field: field,\n    Header: 'Tags',\n    width\n  };\n}","map":{"version":3,"names":["cx","isNumber","React","SVG","getFieldDisplayName","config","getDataSourceSrv","Checkbox","Icon","IconButton","TagList","PluginIconName","TYPE_COLUMN_WIDTH","DATASOURCE_COLUMN_WIDTH","SORT_FIELD_WIDTH","generateColumns","response","availableWidth","selection","selectionToggle","clearSelection","styles","onTagSelected","onDatasourceChange","columns","access","view","fields","uidField","uid","kindField","kind","sortField","dataFrame","meta","custom","sortBy","width","push","id","Header","checkboxHeader","e","stopPropagation","preventDefault","count","Math","min","length","i","item","get","Cell","p","values","row","index","selected","hasUID","cellProps","checkbox","field","max","classNames","nameCellStyle","name","missingTitleText","userProps","href","headerNameStyle","makeTypeColumn","panel_type","locationInfo","parts","location","split","locationCellStyle","map","info","url","locationItem","getIconForKind","ds_uid","makeDataSourceColumn","typeIcon","datasourceItem","invalidDatasourceItem","makeTagsColumn","tags","tagList","sortedHeader","value","Number","toLocaleString","sortedItems","v","iconClass","datasourceItemClass","invalidDatasourceItemClass","srv","dslist","settings","getInstanceSettings","icon","logos","small","type","typeField","txt","panel","panels","typeText","tagListClass"],"sources":["/home/soula/grafana/public/app/features/search/page/components/columns.tsx"],"sourcesContent":["import { cx } from '@emotion/css';\nimport { isNumber } from 'lodash';\nimport React from 'react';\nimport SVG from 'react-inlinesvg';\n\nimport { Field, getFieldDisplayName } from '@grafana/data';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport { Checkbox, Icon, IconButton, IconName, TagList } from '@grafana/ui';\nimport { PluginIconName } from 'app/features/plugins/admin/types';\n\nimport { QueryResponse, SearchResultMeta } from '../../service';\nimport { SelectionChecker, SelectionToggle } from '../selection';\n\nimport { TableColumn } from './SearchResultsTable';\n\nconst TYPE_COLUMN_WIDTH = 175;\nconst DATASOURCE_COLUMN_WIDTH = 200;\nconst SORT_FIELD_WIDTH = 175;\n\nexport const generateColumns = (\n  response: QueryResponse,\n  availableWidth: number,\n  selection: SelectionChecker | undefined,\n  selectionToggle: SelectionToggle | undefined,\n  clearSelection: () => void,\n  styles: { [key: string]: string },\n  onTagSelected: (tag: string) => void,\n  onDatasourceChange?: (datasource?: string) => void\n): TableColumn[] => {\n  const columns: TableColumn[] = [];\n  const access = response.view.fields;\n  const uidField = access.uid;\n  const kindField = access.kind;\n  const sortField = (access as any)[response.view.dataFrame.meta?.custom?.sortBy] as Field;\n  if (sortField) {\n    availableWidth -= SORT_FIELD_WIDTH; // pre-allocate the space for the last column\n  }\n\n  let width = 50;\n  if (selection && selectionToggle) {\n    width = 30;\n    columns.push({\n      id: `column-checkbox`,\n      width,\n      Header: () => {\n        if (selection('*', '*')) {\n          return (\n            <div className={styles.checkboxHeader}>\n              <IconButton name={'check-square' as any} onClick={clearSelection} />\n            </div>\n          );\n        }\n        return (\n          <div className={styles.checkboxHeader}>\n            <Checkbox\n              checked={false}\n              onChange={(e) => {\n                e.stopPropagation();\n                e.preventDefault();\n                const { view } = response;\n                const count = Math.min(view.length, 50);\n                for (let i = 0; i < count; i++) {\n                  const item = view.get(i);\n                  if (item.uid && item.kind) {\n                    if (!selection(item.kind, item.uid)) {\n                      selectionToggle(item.kind, item.uid);\n                    }\n                  }\n                }\n              }}\n            />\n          </div>\n        );\n      },\n      Cell: (p) => {\n        const uid = uidField.values.get(p.row.index);\n        const kind = kindField ? kindField.values.get(p.row.index) : 'dashboard'; // HACK for now\n        const selected = selection(kind, uid);\n        const hasUID = uid != null; // Panels don't have UID! Likely should not be shown on pages with manage options\n        return (\n          <div {...p.cellProps}>\n            <div className={styles.checkbox}>\n              <Checkbox\n                disabled={!hasUID}\n                value={selected && hasUID}\n                onChange={(e) => {\n                  selectionToggle(kind, uid);\n                }}\n              />\n            </div>\n          </div>\n        );\n      },\n      field: uidField,\n    });\n    availableWidth -= width;\n  }\n\n  // Name column\n  width = Math.max(availableWidth * 0.2, 300);\n  columns.push({\n    Cell: (p) => {\n      let classNames = cx(styles.nameCellStyle);\n      let name = access.name.values.get(p.row.index);\n      if (!name?.length) {\n        name = 'Missing title'; // normal for panels\n        classNames += ' ' + styles.missingTitleText;\n      }\n      return (\n        <a {...p.cellProps} href={p.userProps.href} className={classNames} title={name}>\n          {name}\n        </a>\n      );\n    },\n    id: `column-name`,\n    field: access.name!,\n    Header: () => {\n      return <div className={styles.headerNameStyle}>Name</div>;\n    },\n    width,\n  });\n  availableWidth -= width;\n\n  width = TYPE_COLUMN_WIDTH;\n  columns.push(makeTypeColumn(access.kind, access.panel_type, width, styles));\n  availableWidth -= width;\n\n  const meta = response.view.dataFrame.meta?.custom as SearchResultMeta;\n  if (meta?.locationInfo && availableWidth > 0) {\n    width = Math.max(availableWidth / 1.75, 300);\n    availableWidth -= width;\n    columns.push({\n      Cell: (p) => {\n        const parts = (access.location?.values.get(p.row.index) ?? '').split('/');\n        return (\n          <div {...p.cellProps} className={cx(styles.locationCellStyle)}>\n            {parts.map((p) => {\n              const info = meta.locationInfo[p];\n              return info ? (\n                <a key={p} href={info.url} className={styles.locationItem}>\n                  <Icon name={getIconForKind(info.kind)} /> {info.name}\n                </a>\n              ) : (\n                <span key={p}>{p}</span>\n              );\n            })}\n          </div>\n        );\n      },\n      id: `column-location`,\n      field: access.location ?? access.url,\n      Header: 'Location',\n      width,\n    });\n  }\n\n  // Show datasources if we have any\n  if (access.ds_uid && onDatasourceChange) {\n    width = DATASOURCE_COLUMN_WIDTH;\n    columns.push(\n      makeDataSourceColumn(\n        access.ds_uid,\n        width,\n        styles.typeIcon,\n        styles.datasourceItem,\n        styles.invalidDatasourceItem,\n        onDatasourceChange\n      )\n    );\n    availableWidth -= width;\n  }\n\n  if (availableWidth > 0) {\n    columns.push(makeTagsColumn(access.tags, availableWidth, styles.tagList, onTagSelected));\n  }\n\n  if (sortField) {\n    columns.push({\n      Header: () => <div className={styles.sortedHeader}>{getFieldDisplayName(sortField)}</div>,\n      Cell: (p) => {\n        let value = sortField.values.get(p.row.index);\n        try {\n          if (isNumber(value)) {\n            value = Number(value).toLocaleString();\n          }\n        } catch {}\n        return (\n          <div {...p.cellProps} className={styles.sortedItems}>\n            {`${value}`}\n          </div>\n        );\n      },\n      id: `column-sort-field`,\n      field: sortField,\n      width: SORT_FIELD_WIDTH,\n    });\n  }\n\n  return columns;\n};\n\nfunction getIconForKind(v: string): IconName {\n  if (v === 'dashboard') {\n    return 'apps';\n  }\n  if (v === 'folder') {\n    return 'folder';\n  }\n  return 'question-circle';\n}\n\nfunction makeDataSourceColumn(\n  field: Field<string[]>,\n  width: number,\n  iconClass: string,\n  datasourceItemClass: string,\n  invalidDatasourceItemClass: string,\n  onDatasourceChange: (datasource?: string) => void\n): TableColumn {\n  const srv = getDataSourceSrv();\n  return {\n    id: `column-datasource`,\n    field,\n    Header: 'Data source',\n    Cell: (p) => {\n      const dslist = field.values.get(p.row.index);\n      if (!dslist?.length) {\n        return null;\n      }\n      return (\n        <div {...p.cellProps} className={cx(datasourceItemClass)}>\n          {dslist.map((v, i) => {\n            const settings = srv.getInstanceSettings(v);\n            const icon = settings?.meta?.info?.logos?.small;\n            if (icon) {\n              return (\n                <span\n                  key={i}\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    onDatasourceChange(settings.uid);\n                  }}\n                >\n                  <img src={icon} width={14} height={14} title={settings.type} className={iconClass} />\n                  {settings.name}\n                </span>\n              );\n            }\n            return (\n              <span className={invalidDatasourceItemClass} key={i}>\n                {v}\n              </span>\n            );\n          })}\n        </div>\n      );\n    },\n    width,\n  };\n}\n\nfunction makeTypeColumn(\n  kindField: Field<string>,\n  typeField: Field<string>,\n  width: number,\n  styles: Record<string, string>\n): TableColumn {\n  return {\n    id: `column-type`,\n    field: kindField ?? typeField,\n    Header: 'Type',\n    Cell: (p) => {\n      const i = p.row.index;\n      const kind = kindField?.values.get(i) ?? 'dashboard';\n      let icon = 'public/img/icons/unicons/apps.svg';\n      let txt = 'Dashboard';\n      if (kind) {\n        txt = kind;\n        switch (txt) {\n          case 'dashboard':\n            txt = 'Dashboard';\n            break;\n\n          case 'folder':\n            icon = 'public/img/icons/unicons/folder.svg';\n            txt = 'Folder';\n            break;\n\n          case 'panel':\n            icon = `public/img/icons/unicons/${PluginIconName.panel}.svg`;\n            const type = typeField.values.get(i);\n            if (type) {\n              txt = type;\n              const info = config.panels[txt];\n              if (info?.name) {\n                txt = info.name;\n              } else {\n                switch (type) {\n                  case 'row':\n                    txt = 'Row';\n                    icon = `public/img/icons/unicons/bars.svg`;\n                    break;\n                  case 'singlestat': // auto-migration\n                    txt = 'Singlestat';\n                    break;\n                  default:\n                    icon = `public/img/icons/unicons/question.svg`; // plugin not found\n                }\n              }\n            }\n            break;\n        }\n      }\n      return (\n        <div {...p.cellProps} className={styles.typeText}>\n          <SVG src={icon} width={14} height={14} title={txt} className={styles.typeIcon} />\n          {txt}\n        </div>\n      );\n    },\n    width,\n  };\n}\n\nfunction makeTagsColumn(\n  field: Field<string[]>,\n  width: number,\n  tagListClass: string,\n  onTagSelected: (tag: string) => void\n): TableColumn {\n  return {\n    Cell: (p) => {\n      const tags = field.values.get(p.row.index);\n      return tags ? (\n        <div {...p.cellProps}>\n          <TagList className={tagListClass} tags={tags} onClick={onTagSelected} />\n        </div>\n      ) : null;\n    },\n    id: `column-tags`,\n    field: field,\n    Header: 'Tags',\n    width,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}