{"ast":null,"code":"import { rangeUtil, dateTimeFormat } from '@grafana/data';\nexport const mapOptionToTimeRange = (option, timeZone) => {\n  return rangeUtil.convertRawToRange({\n    from: option.from,\n    to: option.to\n  }, timeZone);\n};\nexport const mapRangeToTimeOption = (range, timeZone) => {\n  const from = dateTimeFormat(range.from, {\n    timeZone\n  });\n  const to = dateTimeFormat(range.to, {\n    timeZone\n  });\n  return {\n    from,\n    to,\n    display: `${from} to ${to}`\n  };\n};","map":{"version":3,"names":["rangeUtil","dateTimeFormat","mapOptionToTimeRange","option","timeZone","convertRawToRange","from","to","mapRangeToTimeOption","range","display"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/DateTimePickers/TimeRangePicker/mapper.ts"],"sourcesContent":["import { TimeOption, TimeRange, TimeZone, rangeUtil, dateTimeFormat } from '@grafana/data';\n\nexport const mapOptionToTimeRange = (option: TimeOption, timeZone?: TimeZone): TimeRange => {\n  return rangeUtil.convertRawToRange({ from: option.from, to: option.to }, timeZone);\n};\n\nexport const mapRangeToTimeOption = (range: TimeRange, timeZone?: TimeZone): TimeOption => {\n  const from = dateTimeFormat(range.from, { timeZone });\n  const to = dateTimeFormat(range.to, { timeZone });\n\n  return {\n    from,\n    to,\n    display: `${from} to ${to}`,\n  };\n};\n"],"mappings":"AAAA,SAA0CA,SAA1C,EAAqDC,cAArD,QAA2E,eAA3E;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,MAAD,EAAqBC,QAArB,KAAwD;EAC1F,OAAOJ,SAAS,CAACK,iBAAV,CAA4B;IAAEC,IAAI,EAAEH,MAAM,CAACG,IAAf;IAAqBC,EAAE,EAAEJ,MAAM,CAACI;EAAhC,CAA5B,EAAkEH,QAAlE,CAAP;AACD,CAFM;AAIP,OAAO,MAAMI,oBAAoB,GAAG,CAACC,KAAD,EAAmBL,QAAnB,KAAuD;EACzF,MAAME,IAAI,GAAGL,cAAc,CAACQ,KAAK,CAACH,IAAP,EAAa;IAAEF;EAAF,CAAb,CAA3B;EACA,MAAMG,EAAE,GAAGN,cAAc,CAACQ,KAAK,CAACF,EAAP,EAAW;IAAEH;EAAF,CAAX,CAAzB;EAEA,OAAO;IACLE,IADK;IAELC,EAFK;IAGLG,OAAO,EAAG,GAAEJ,IAAK,OAAMC,EAAG;EAHrB,CAAP;AAKD,CATM"},"metadata":{},"sourceType":"module"}