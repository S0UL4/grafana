{"ast":null,"code":"export let PanelEditorTabId;\n\n(function (PanelEditorTabId) {\n  PanelEditorTabId[\"Query\"] = \"query\";\n  PanelEditorTabId[\"Transform\"] = \"transform\";\n  PanelEditorTabId[\"Visualize\"] = \"visualize\";\n  PanelEditorTabId[\"Alert\"] = \"alert\";\n})(PanelEditorTabId || (PanelEditorTabId = {}));\n\nexport let DisplayMode;\n\n(function (DisplayMode) {\n  DisplayMode[DisplayMode[\"Fill\"] = 0] = \"Fill\";\n  DisplayMode[DisplayMode[\"Fit\"] = 1] = \"Fit\";\n  DisplayMode[DisplayMode[\"Exact\"] = 2] = \"Exact\";\n})(DisplayMode || (DisplayMode = {}));\n\nexport let PanelEditTableToggle;\n\n(function (PanelEditTableToggle) {\n  PanelEditTableToggle[PanelEditTableToggle[\"Off\"] = 0] = \"Off\";\n  PanelEditTableToggle[PanelEditTableToggle[\"Table\"] = 1] = \"Table\";\n})(PanelEditTableToggle || (PanelEditTableToggle = {}));\n\nexport const displayModes = [{\n  value: DisplayMode.Fill,\n  label: 'Fill',\n  description: 'Use all available space'\n}, {\n  value: DisplayMode.Exact,\n  label: 'Actual',\n  description: 'Make same size as on the dashboard'\n}];\nexport const panelEditTableModes = [{\n  value: PanelEditTableToggle.Off,\n  label: 'Visualization',\n  description: 'Show using selected visualization'\n}, {\n  value: PanelEditTableToggle.Table,\n  label: 'Table',\n  description: 'Show raw data in table form'\n}];\n/** @internal */\n\nexport let VisualizationSelectPaneTab;\n\n(function (VisualizationSelectPaneTab) {\n  VisualizationSelectPaneTab[VisualizationSelectPaneTab[\"Visualizations\"] = 0] = \"Visualizations\";\n  VisualizationSelectPaneTab[VisualizationSelectPaneTab[\"LibraryPanels\"] = 1] = \"LibraryPanels\";\n  VisualizationSelectPaneTab[VisualizationSelectPaneTab[\"Suggestions\"] = 2] = \"Suggestions\";\n})(VisualizationSelectPaneTab || (VisualizationSelectPaneTab = {}));","map":{"version":3,"names":["PanelEditorTabId","DisplayMode","PanelEditTableToggle","displayModes","value","Fill","label","description","Exact","panelEditTableModes","Off","Table","VisualizationSelectPaneTab"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/types.ts"],"sourcesContent":["import { DataFrame, FieldConfigSource, PanelData, PanelPlugin } from '@grafana/data';\n\nimport { DashboardModel, PanelModel } from '../../state';\n\nexport interface PanelEditorTab {\n  id: string;\n  text: string;\n  active: boolean;\n  icon: string;\n}\n\nexport enum PanelEditorTabId {\n  Query = 'query',\n  Transform = 'transform',\n  Visualize = 'visualize',\n  Alert = 'alert',\n}\n\nexport enum DisplayMode {\n  Fill = 0,\n  Fit = 1,\n  Exact = 2,\n}\n\nexport enum PanelEditTableToggle {\n  Off = 0,\n  Table = 1,\n}\n\nexport const displayModes = [\n  { value: DisplayMode.Fill, label: 'Fill', description: 'Use all available space' },\n  { value: DisplayMode.Exact, label: 'Actual', description: 'Make same size as on the dashboard' },\n];\n\nexport const panelEditTableModes = [\n  {\n    value: PanelEditTableToggle.Off,\n    label: 'Visualization',\n    description: 'Show using selected visualization',\n  },\n  { value: PanelEditTableToggle.Table, label: 'Table', description: 'Show raw data in table form' },\n];\n\n/** @internal */\nexport interface Props {\n  plugin: PanelPlugin;\n  config: FieldConfigSource;\n  onChange: (config: FieldConfigSource) => void;\n  /* Helpful for IntelliSense */\n  data: DataFrame[];\n}\n\nexport interface OptionPaneRenderProps {\n  panel: PanelModel;\n  plugin: PanelPlugin;\n  data?: PanelData;\n  dashboard: DashboardModel;\n  instanceState: any;\n  onPanelConfigChange: (configKey: keyof PanelModel, value: any) => void;\n  onPanelOptionsChanged: (options: any) => void;\n  onFieldConfigsChange: (config: FieldConfigSource) => void;\n}\n\nexport interface OptionPaneItemOverrideInfo {\n  type: 'data' | 'rule';\n  onClick?: () => void;\n  tooltip: string;\n  description: string;\n}\n\nexport enum VisualizationSelectPaneTab {\n  Visualizations,\n  LibraryPanels,\n  Suggestions,\n}\n"],"mappings":"AAWA,WAAYA,gBAAZ;;WAAYA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAOZ,WAAYC,WAAZ;;WAAYA,W;EAAAA,W,CAAAA,W;EAAAA,W,CAAAA,W;EAAAA,W,CAAAA,W;GAAAA,W,KAAAA,W;;AAMZ,WAAYC,oBAAZ;;WAAYA,oB;EAAAA,oB,CAAAA,oB;EAAAA,oB,CAAAA,oB;GAAAA,oB,KAAAA,oB;;AAKZ,OAAO,MAAMC,YAAY,GAAG,CAC1B;EAAEC,KAAK,EAAEH,WAAW,CAACI,IAArB;EAA2BC,KAAK,EAAE,MAAlC;EAA0CC,WAAW,EAAE;AAAvD,CAD0B,EAE1B;EAAEH,KAAK,EAAEH,WAAW,CAACO,KAArB;EAA4BF,KAAK,EAAE,QAAnC;EAA6CC,WAAW,EAAE;AAA1D,CAF0B,CAArB;AAKP,OAAO,MAAME,mBAAmB,GAAG,CACjC;EACEL,KAAK,EAAEF,oBAAoB,CAACQ,GAD9B;EAEEJ,KAAK,EAAE,eAFT;EAGEC,WAAW,EAAE;AAHf,CADiC,EAMjC;EAAEH,KAAK,EAAEF,oBAAoB,CAACS,KAA9B;EAAqCL,KAAK,EAAE,OAA5C;EAAqDC,WAAW,EAAE;AAAlE,CANiC,CAA5B;AASP;;AA2BA,WAAYK,0BAAZ;;WAAYA,0B;EAAAA,0B,CAAAA,0B;EAAAA,0B,CAAAA,0B;EAAAA,0B,CAAAA,0B;GAAAA,0B,KAAAA,0B"},"metadata":{},"sourceType":"module"}