{"ast":null,"code":"import React from 'react';\nimport { Select } from '@grafana/ui';\nimport { QueryEditorRow } from '..';\nimport { SELECT_WIDTH, SELECTORS } from '../../constants';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const Selector = ({\n  refId,\n  query,\n  templateVariableOptions,\n  onChange,\n  datasource\n}) => {\n  return /*#__PURE__*/_jsx(QueryEditorRow, {\n    label: \"Selector\",\n    htmlFor: `${refId}-slo-selector`,\n    children: /*#__PURE__*/_jsx(Select, {\n      inputId: `${refId}-slo-selector`,\n      width: SELECT_WIDTH,\n      allowCustomValue: true,\n      value: [...SELECTORS, ...templateVariableOptions].find(s => {\n        var _ref;\n\n        return (_ref = s.value === (query === null || query === void 0 ? void 0 : query.selectorName)) !== null && _ref !== void 0 ? _ref : '';\n      }),\n      options: [{\n        label: 'Template Variables',\n        options: templateVariableOptions\n      }, ...SELECTORS],\n      onChange: ({\n        value: selectorName\n      }) => onChange(Object.assign({}, query, {\n        selectorName: selectorName !== null && selectorName !== void 0 ? selectorName : ''\n      }))\n    })\n  });\n};","map":{"version":3,"names":["React","Select","QueryEditorRow","SELECT_WIDTH","SELECTORS","Selector","refId","query","templateVariableOptions","onChange","datasource","find","s","value","selectorName","label","options"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/SLO/Selector.tsx"],"sourcesContent":["import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorRow } from '..';\nimport { SELECT_WIDTH, SELECTORS } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { SLOQuery } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Selector: React.FC<Props> = ({ refId, query, templateVariableOptions, onChange, datasource }) => {\n  return (\n    <QueryEditorRow label=\"Selector\" htmlFor={`${refId}-slo-selector`}>\n      <Select\n        inputId={`${refId}-slo-selector`}\n        width={SELECT_WIDTH}\n        allowCustomValue\n        value={[...SELECTORS, ...templateVariableOptions].find((s) => s.value === query?.selectorName ?? '')}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          ...SELECTORS,\n        ]}\n        onChange={({ value: selectorName }) => onChange({ ...query, selectorName: selectorName ?? '' })}\n      />\n    </QueryEditorRow>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAEA,SAASC,cAAT,QAA+B,IAA/B;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,iBAAxC;;AAYA,OAAO,MAAMC,QAAyB,GAAG,CAAC;EAAEC,KAAF;EAASC,KAAT;EAAgBC,uBAAhB;EAAyCC,QAAzC;EAAmDC;AAAnD,CAAD,KAAqE;EAC5G,oBACE,KAAC,cAAD;IAAgB,KAAK,EAAC,UAAtB;IAAiC,OAAO,EAAG,GAAEJ,KAAM,eAAnD;IAAA,uBACE,KAAC,MAAD;MACE,OAAO,EAAG,GAAEA,KAAM,eADpB;MAEE,KAAK,EAAEH,YAFT;MAGE,gBAAgB,MAHlB;MAIE,KAAK,EAAE,CAAC,GAAGC,SAAJ,EAAe,GAAGI,uBAAlB,EAA2CG,IAA3C,CAAiDC,CAAD;QAAA;;QAAA,eAAOA,CAAC,CAACC,KAAF,MAAYN,KAAZ,aAAYA,KAAZ,uBAAYA,KAAK,CAAEO,YAAnB,CAAP,uCAA0C,EAA1C;MAAA,CAAhD,CAJT;MAKE,OAAO,EAAE,CACP;QACEC,KAAK,EAAE,oBADT;QAEEC,OAAO,EAAER;MAFX,CADO,EAKP,GAAGJ,SALI,CALX;MAYE,QAAQ,EAAE,CAAC;QAAES,KAAK,EAAEC;MAAT,CAAD,KAA6BL,QAAQ,mBAAMF,KAAN;QAAaO,YAAY,EAAEA,YAAF,aAAEA,YAAF,cAAEA,YAAF,GAAkB;MAA3C;IAZjD;EADF,EADF;AAkBD,CAnBM"},"metadata":{},"sourceType":"module"}