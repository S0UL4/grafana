{"ast":null,"code":"export function setResource(query, resourceURI) {\n  return Object.assign({}, query, {\n    azureMonitor: Object.assign({}, query.azureMonitor, {\n      resourceUri: resourceURI,\n      metricNamespace: undefined,\n      metricName: undefined,\n      aggregation: undefined,\n      metricDefinition: undefined,\n      timeGrain: '',\n      dimensionFilters: []\n    })\n  });\n}\nexport function setMetricNamespace(query, metricNamespace) {\n  var _query$azureMonitor, _query$azureMonitor2;\n\n  if (((_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.metricNamespace) === metricNamespace) {\n    return query;\n  }\n\n  let resourceUri = (_query$azureMonitor2 = query.azureMonitor) === null || _query$azureMonitor2 === void 0 ? void 0 : _query$azureMonitor2.resourceUri; // Storage Account URIs need to be handled differently due to the additional storage services (blob/queue/table/file).\n  // When one of these namespaces is selected it does not form a part of the URI for the storage account and so must be appended.\n  // The 'default' path must also be appended. Without these two paths any API call will fail.\n\n  if (resourceUri && metricNamespace !== null && metricNamespace !== void 0 && metricNamespace.includes('Microsoft.Storage/storageAccounts')) {\n    const splitUri = resourceUri.split('/');\n    const accountNameIndex = splitUri.findIndex(item => item === 'storageAccounts') + 1;\n    const baseUri = splitUri.slice(0, accountNameIndex + 1).join('/');\n\n    if (metricNamespace === 'Microsoft.Storage/storageAccounts') {\n      resourceUri = baseUri;\n    } else {\n      const subNamespace = metricNamespace.split('/')[2];\n      resourceUri = `${baseUri}/${subNamespace}/default`;\n    }\n  }\n\n  return Object.assign({}, query, {\n    azureMonitor: Object.assign({}, query.azureMonitor, {\n      metricNamespace: metricNamespace,\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n      resourceUri\n    })\n  });\n}\nexport function setMetricName(query, metricName) {\n  var _query$azureMonitor3;\n\n  if (((_query$azureMonitor3 = query.azureMonitor) === null || _query$azureMonitor3 === void 0 ? void 0 : _query$azureMonitor3.metricName) === metricName) {\n    return query;\n  }\n\n  return Object.assign({}, query, {\n    azureMonitor: Object.assign({}, query.azureMonitor, {\n      metricName: metricName,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: []\n    })\n  });\n}\nexport function setAggregation(query, aggregation) {\n  var _query$azureMonitor4;\n\n  if (((_query$azureMonitor4 = query.azureMonitor) === null || _query$azureMonitor4 === void 0 ? void 0 : _query$azureMonitor4.aggregation) === aggregation) {\n    return query;\n  }\n\n  return Object.assign({}, query, {\n    azureMonitor: Object.assign({}, query.azureMonitor, {\n      aggregation: aggregation\n    })\n  });\n}\nexport function setTimeGrain(query, timeGrain) {\n  var _query$azureMonitor5;\n\n  if (((_query$azureMonitor5 = query.azureMonitor) === null || _query$azureMonitor5 === void 0 ? void 0 : _query$azureMonitor5.timeGrain) === timeGrain) {\n    return query;\n  }\n\n  return Object.assign({}, query, {\n    azureMonitor: Object.assign({}, query.azureMonitor, {\n      timeGrain: timeGrain\n    })\n  });\n}\nexport function setDimensionFilters(query, dimensions) {\n  var _query$azureMonitor6;\n\n  if (((_query$azureMonitor6 = query.azureMonitor) === null || _query$azureMonitor6 === void 0 ? void 0 : _query$azureMonitor6.dimensionFilters) === dimensions) {\n    return query;\n  }\n\n  return Object.assign({}, query, {\n    azureMonitor: Object.assign({}, query.azureMonitor, {\n      dimensionFilters: dimensions\n    })\n  });\n}\nexport function appendDimensionFilter(query, dimension = '', operator = 'eq', filters = []) {\n  var _query$azureMonitor$d, _query$azureMonitor7;\n\n  const existingFilters = (_query$azureMonitor$d = (_query$azureMonitor7 = query.azureMonitor) === null || _query$azureMonitor7 === void 0 ? void 0 : _query$azureMonitor7.dimensionFilters) !== null && _query$azureMonitor$d !== void 0 ? _query$azureMonitor$d : [];\n  return setDimensionFilters(query, [...existingFilters, {\n    dimension,\n    operator,\n    filters\n  }]);\n}\nexport function removeDimensionFilter(query, indexToRemove) {\n  var _query$azureMonitor$d2, _query$azureMonitor8;\n\n  const existingFilters = (_query$azureMonitor$d2 = (_query$azureMonitor8 = query.azureMonitor) === null || _query$azureMonitor8 === void 0 ? void 0 : _query$azureMonitor8.dimensionFilters) !== null && _query$azureMonitor$d2 !== void 0 ? _query$azureMonitor$d2 : [];\n  const newFilters = [...existingFilters];\n  newFilters.splice(indexToRemove, 1);\n  return setDimensionFilters(query, newFilters);\n}\nexport function setDimensionFilterValue(query, index, fieldName, value) {\n  var _query$azureMonitor$d3, _query$azureMonitor9;\n\n  const existingFilters = (_query$azureMonitor$d3 = (_query$azureMonitor9 = query.azureMonitor) === null || _query$azureMonitor9 === void 0 ? void 0 : _query$azureMonitor9.dimensionFilters) !== null && _query$azureMonitor$d3 !== void 0 ? _query$azureMonitor$d3 : [];\n  const newFilters = [...existingFilters];\n  const newFilter = newFilters[index];\n  newFilter[fieldName] = value;\n\n  if (fieldName === 'dimension' || fieldName === 'operator') {\n    newFilter.filters = [];\n  }\n\n  return setDimensionFilters(query, newFilters);\n}\nexport function setTop(query, top) {\n  var _query$azureMonitor10;\n\n  if (((_query$azureMonitor10 = query.azureMonitor) === null || _query$azureMonitor10 === void 0 ? void 0 : _query$azureMonitor10.top) === top) {\n    return query;\n  }\n\n  return Object.assign({}, query, {\n    azureMonitor: Object.assign({}, query.azureMonitor, {\n      top: top\n    })\n  });\n}\nexport function setLegendAlias(query, alias) {\n  var _query$azureMonitor11;\n\n  if (((_query$azureMonitor11 = query.azureMonitor) === null || _query$azureMonitor11 === void 0 ? void 0 : _query$azureMonitor11.alias) === alias) {\n    return query;\n  }\n\n  return Object.assign({}, query, {\n    azureMonitor: Object.assign({}, query.azureMonitor, {\n      alias: alias\n    })\n  });\n}","map":{"version":3,"names":["setResource","query","resourceURI","azureMonitor","resourceUri","metricNamespace","undefined","metricName","aggregation","metricDefinition","timeGrain","dimensionFilters","setMetricNamespace","includes","splitUri","split","accountNameIndex","findIndex","item","baseUri","slice","join","subNamespace","setMetricName","setAggregation","setTimeGrain","setDimensionFilters","dimensions","appendDimensionFilter","dimension","operator","filters","existingFilters","removeDimensionFilter","indexToRemove","newFilters","splice","setDimensionFilterValue","index","fieldName","value","newFilter","setTop","top","setLegendAlias","alias"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/setQueryValue.ts"],"sourcesContent":["import { AzureMetricDimension, AzureMonitorQuery } from '../../types';\n\nexport function setResource(query: AzureMonitorQuery, resourceURI: string | undefined): AzureMonitorQuery {\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      resourceUri: resourceURI,\n      metricNamespace: undefined,\n      metricName: undefined,\n      aggregation: undefined,\n      metricDefinition: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\nexport function setMetricNamespace(query: AzureMonitorQuery, metricNamespace: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.metricNamespace === metricNamespace) {\n    return query;\n  }\n\n  let resourceUri = query.azureMonitor?.resourceUri;\n\n  // Storage Account URIs need to be handled differently due to the additional storage services (blob/queue/table/file).\n  // When one of these namespaces is selected it does not form a part of the URI for the storage account and so must be appended.\n  // The 'default' path must also be appended. Without these two paths any API call will fail.\n  if (resourceUri && metricNamespace?.includes('Microsoft.Storage/storageAccounts')) {\n    const splitUri = resourceUri.split('/');\n    const accountNameIndex = splitUri.findIndex((item) => item === 'storageAccounts') + 1;\n    const baseUri = splitUri.slice(0, accountNameIndex + 1).join('/');\n    if (metricNamespace === 'Microsoft.Storage/storageAccounts') {\n      resourceUri = baseUri;\n    } else {\n      const subNamespace = metricNamespace.split('/')[2];\n      resourceUri = `${baseUri}/${subNamespace}/default`;\n    }\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      metricNamespace: metricNamespace,\n      metricName: undefined,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n      resourceUri,\n    },\n  };\n}\n\nexport function setMetricName(query: AzureMonitorQuery, metricName: string | undefined): AzureMonitorQuery {\n  if (query.azureMonitor?.metricName === metricName) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      metricName: metricName,\n      aggregation: undefined,\n      timeGrain: '',\n      dimensionFilters: [],\n    },\n  };\n}\n\nexport function setAggregation(query: AzureMonitorQuery, aggregation: string): AzureMonitorQuery {\n  if (query.azureMonitor?.aggregation === aggregation) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      aggregation: aggregation,\n    },\n  };\n}\n\nexport function setTimeGrain(query: AzureMonitorQuery, timeGrain: string): AzureMonitorQuery {\n  if (query.azureMonitor?.timeGrain === timeGrain) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      timeGrain: timeGrain,\n    },\n  };\n}\n\nexport function setDimensionFilters(query: AzureMonitorQuery, dimensions: AzureMetricDimension[]): AzureMonitorQuery {\n  if (query.azureMonitor?.dimensionFilters === dimensions) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      dimensionFilters: dimensions,\n    },\n  };\n}\n\nexport function appendDimensionFilter(\n  query: AzureMonitorQuery,\n  dimension = '',\n  operator = 'eq',\n  filters: string[] = []\n): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n\n  return setDimensionFilters(query, [\n    ...existingFilters,\n    {\n      dimension,\n      operator,\n      filters,\n    },\n  ]);\n}\n\nexport function removeDimensionFilter(query: AzureMonitorQuery, indexToRemove: number): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n  const newFilters = [...existingFilters];\n  newFilters.splice(indexToRemove, 1);\n  return setDimensionFilters(query, newFilters);\n}\n\nexport function setDimensionFilterValue<Key extends keyof AzureMetricDimension>(\n  query: AzureMonitorQuery,\n  index: number,\n  fieldName: Key,\n  value: AzureMetricDimension[Key]\n): AzureMonitorQuery {\n  const existingFilters = query.azureMonitor?.dimensionFilters ?? [];\n  const newFilters = [...existingFilters];\n  const newFilter = newFilters[index];\n  newFilter[fieldName] = value;\n  if (fieldName === 'dimension' || fieldName === 'operator') {\n    newFilter.filters = [];\n  }\n  return setDimensionFilters(query, newFilters);\n}\n\nexport function setTop(query: AzureMonitorQuery, top: string): AzureMonitorQuery {\n  if (query.azureMonitor?.top === top) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      top: top,\n    },\n  };\n}\n\nexport function setLegendAlias(query: AzureMonitorQuery, alias: string): AzureMonitorQuery {\n  if (query.azureMonitor?.alias === alias) {\n    return query;\n  }\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...query.azureMonitor,\n      alias: alias,\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}