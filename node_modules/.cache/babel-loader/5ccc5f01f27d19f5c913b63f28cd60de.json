{"ast":null,"code":"/**\n * Errors are used when the operation on Rich History was not successful.\n */\nexport let RichHistoryServiceError;\n/**\n * Warnings are used when an entry has been added but there are some side effects that user should be informed about.\n */\n\n(function (RichHistoryServiceError) {\n  RichHistoryServiceError[\"StorageFull\"] = \"StorageFull\";\n  RichHistoryServiceError[\"DuplicatedEntry\"] = \"DuplicatedEntry\";\n})(RichHistoryServiceError || (RichHistoryServiceError = {}));\n\nexport let RichHistoryStorageWarning;\n/**\n * Detailed information about the warning that can be shown to the user\n */\n\n(function (RichHistoryStorageWarning) {\n  RichHistoryStorageWarning[\"LimitExceeded\"] = \"LimitExceeded\";\n})(RichHistoryStorageWarning || (RichHistoryStorageWarning = {}));","map":{"version":3,"names":["RichHistoryServiceError","RichHistoryStorageWarning"],"sources":["/home/soula/grafana/public/app/core/history/RichHistoryStorage.ts"],"sourcesContent":["import { RichHistorySearchFilters, RichHistorySettings } from 'app/core/utils/richHistory';\n\nimport { RichHistoryQuery } from '../../types';\n\n/**\n * Errors are used when the operation on Rich History was not successful.\n */\nexport enum RichHistoryServiceError {\n  StorageFull = 'StorageFull',\n  DuplicatedEntry = 'DuplicatedEntry',\n}\n\n/**\n * Warnings are used when an entry has been added but there are some side effects that user should be informed about.\n */\nexport enum RichHistoryStorageWarning {\n  /**\n   * Returned when an entry was successfully added but maximum items limit has been reached and old entries have been removed.\n   */\n  LimitExceeded = 'LimitExceeded',\n}\n\n/**\n * Detailed information about the warning that can be shown to the user\n */\nexport type RichHistoryStorageWarningDetails = {\n  type: RichHistoryStorageWarning;\n  message: string;\n};\n\nexport type RichHistoryResults = { richHistory: RichHistoryQuery[]; total?: number };\n\n/**\n * @internal\n * @alpha\n */\nexport default interface RichHistoryStorage {\n  getRichHistory(filters: RichHistorySearchFilters): Promise<RichHistoryResults>;\n\n  /**\n   * Creates new RichHistoryQuery, returns object with unique id and created date\n   */\n  addToRichHistory(\n    newRichHistoryQuery: Omit<RichHistoryQuery, 'id' | 'createdAt'>\n  ): Promise<{ warning?: RichHistoryStorageWarningDetails; richHistoryQuery: RichHistoryQuery }>;\n\n  deleteAll(): Promise<void>;\n  deleteRichHistory(id: string): Promise<void>;\n  updateStarred(id: string, starred: boolean): Promise<RichHistoryQuery>;\n  updateComment(id: string, comment: string | undefined): Promise<RichHistoryQuery>;\n\n  getSettings(): Promise<RichHistorySettings>;\n  updateSettings(settings: RichHistorySettings): Promise<void>;\n}\n"],"mappings":"AAIA;AACA;AACA;AACA,WAAYA,uBAAZ;AAKA;AACA;AACA;;WAPYA,uB;EAAAA,uB;EAAAA,uB;GAAAA,uB,KAAAA,uB;;AAQZ,WAAYC,yBAAZ;AAOA;AACA;AACA;;WATYA,yB;EAAAA,yB;GAAAA,yB,KAAAA,yB"},"metadata":{},"sourceType":"module"}