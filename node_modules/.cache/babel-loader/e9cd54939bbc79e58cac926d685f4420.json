{"ast":null,"code":"import { ReducerID } from '@grafana/data';\nimport { EvalFunction } from '../../alerting/state/alertDef';\nimport { ExpressionQueryType } from '../types';\nexport const getDefaults = query => {\n  switch (query.type) {\n    case ExpressionQueryType.reduce:\n      if (!query.reducer) {\n        query.reducer = ReducerID.mean;\n      }\n\n      query.expression = undefined;\n      break;\n\n    case ExpressionQueryType.resample:\n      if (!query.downsampler) {\n        query.downsampler = ReducerID.mean;\n      }\n\n      if (!query.upsampler) {\n        query.upsampler = 'fillna';\n      }\n\n      query.reducer = undefined;\n      break;\n\n    case ExpressionQueryType.classic:\n      if (!query.conditions) {\n        query.conditions = [defaultCondition];\n      }\n\n      break;\n\n    default:\n      query.reducer = undefined;\n  }\n\n  return query;\n};\nexport const defaultCondition = {\n  type: 'query',\n  reducer: {\n    params: [],\n    type: 'avg'\n  },\n  operator: {\n    type: 'and'\n  },\n  query: {\n    params: []\n  },\n  evaluator: {\n    params: [0, 0],\n    type: EvalFunction.IsAbove\n  }\n};","map":{"version":3,"names":["ReducerID","EvalFunction","ExpressionQueryType","getDefaults","query","type","reduce","reducer","mean","expression","undefined","resample","downsampler","upsampler","classic","conditions","defaultCondition","params","operator","evaluator","IsAbove"],"sources":["/home/soula/grafana/public/app/features/expressions/utils/expressionTypes.ts"],"sourcesContent":["import { ReducerID } from '@grafana/data';\n\nimport { EvalFunction } from '../../alerting/state/alertDef';\nimport { ClassicCondition, ExpressionQuery, ExpressionQueryType } from '../types';\n\nexport const getDefaults = (query: ExpressionQuery) => {\n  switch (query.type) {\n    case ExpressionQueryType.reduce:\n      if (!query.reducer) {\n        query.reducer = ReducerID.mean;\n      }\n      query.expression = undefined;\n      break;\n\n    case ExpressionQueryType.resample:\n      if (!query.downsampler) {\n        query.downsampler = ReducerID.mean;\n      }\n\n      if (!query.upsampler) {\n        query.upsampler = 'fillna';\n      }\n\n      query.reducer = undefined;\n      break;\n\n    case ExpressionQueryType.classic:\n      if (!query.conditions) {\n        query.conditions = [defaultCondition];\n      }\n      break;\n\n    default:\n      query.reducer = undefined;\n  }\n\n  return query;\n};\n\nexport const defaultCondition: ClassicCondition = {\n  type: 'query',\n  reducer: {\n    params: [],\n    type: 'avg',\n  },\n  operator: {\n    type: 'and',\n  },\n  query: { params: [] },\n  evaluator: {\n    params: [0, 0],\n    type: EvalFunction.IsAbove,\n  },\n};\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,eAA1B;AAEA,SAASC,YAAT,QAA6B,+BAA7B;AACA,SAA4CC,mBAA5C,QAAuE,UAAvE;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAA4B;EACrD,QAAQA,KAAK,CAACC,IAAd;IACE,KAAKH,mBAAmB,CAACI,MAAzB;MACE,IAAI,CAACF,KAAK,CAACG,OAAX,EAAoB;QAClBH,KAAK,CAACG,OAAN,GAAgBP,SAAS,CAACQ,IAA1B;MACD;;MACDJ,KAAK,CAACK,UAAN,GAAmBC,SAAnB;MACA;;IAEF,KAAKR,mBAAmB,CAACS,QAAzB;MACE,IAAI,CAACP,KAAK,CAACQ,WAAX,EAAwB;QACtBR,KAAK,CAACQ,WAAN,GAAoBZ,SAAS,CAACQ,IAA9B;MACD;;MAED,IAAI,CAACJ,KAAK,CAACS,SAAX,EAAsB;QACpBT,KAAK,CAACS,SAAN,GAAkB,QAAlB;MACD;;MAEDT,KAAK,CAACG,OAAN,GAAgBG,SAAhB;MACA;;IAEF,KAAKR,mBAAmB,CAACY,OAAzB;MACE,IAAI,CAACV,KAAK,CAACW,UAAX,EAAuB;QACrBX,KAAK,CAACW,UAAN,GAAmB,CAACC,gBAAD,CAAnB;MACD;;MACD;;IAEF;MACEZ,KAAK,CAACG,OAAN,GAAgBG,SAAhB;EA3BJ;;EA8BA,OAAON,KAAP;AACD,CAhCM;AAkCP,OAAO,MAAMY,gBAAkC,GAAG;EAChDX,IAAI,EAAE,OAD0C;EAEhDE,OAAO,EAAE;IACPU,MAAM,EAAE,EADD;IAEPZ,IAAI,EAAE;EAFC,CAFuC;EAMhDa,QAAQ,EAAE;IACRb,IAAI,EAAE;EADE,CANsC;EAShDD,KAAK,EAAE;IAAEa,MAAM,EAAE;EAAV,CATyC;EAUhDE,SAAS,EAAE;IACTF,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CADC;IAETZ,IAAI,EAAEJ,YAAY,CAACmB;EAFV;AAVqC,CAA3C"},"metadata":{},"sourceType":"module"}