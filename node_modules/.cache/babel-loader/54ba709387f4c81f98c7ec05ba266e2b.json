{"ast":null,"code":"import { getBackendSrv } from '@grafana/runtime';\nimport { updateConfigurationSubtitle } from 'app/core/actions';\nimport { organizationLoaded, userOrganizationsLoaded } from './reducers';\nexport function loadOrganization(dependencies = {\n  getBackendSrv: getBackendSrv\n}) {\n  return async dispatch => {\n    const organizationResponse = await dependencies.getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n    return organizationResponse;\n  };\n}\nexport function updateOrganization(dependencies = {\n  getBackendSrv: getBackendSrv\n}) {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n    await dependencies.getBackendSrv().put('/api/org', {\n      name: organization.name\n    });\n    dispatch(updateConfigurationSubtitle(organization.name));\n    dispatch(loadOrganization(dependencies));\n  };\n}\nexport function setUserOrganization(orgId, dependencies = {\n  getBackendSrv: getBackendSrv\n}) {\n  return async dispatch => {\n    const organizationResponse = await dependencies.getBackendSrv().post('/api/user/using/' + orgId);\n    dispatch(updateConfigurationSubtitle(organizationResponse.name));\n  };\n}\nexport function createOrganization(newOrg, dependencies = {\n  getBackendSrv: getBackendSrv\n}) {\n  return async dispatch => {\n    const result = await dependencies.getBackendSrv().post('/api/orgs/', newOrg);\n    dispatch(setUserOrganization(result.orgId));\n  };\n}\nexport function getUserOrganizations(dependencies = {\n  getBackendSrv: getBackendSrv\n}) {\n  return async dispatch => {\n    const result = await dependencies.getBackendSrv().get('/api/user/orgs');\n    dispatch(userOrganizationsLoaded(result));\n    return result;\n  };\n}","map":{"version":3,"names":["getBackendSrv","updateConfigurationSubtitle","organizationLoaded","userOrganizationsLoaded","loadOrganization","dependencies","dispatch","organizationResponse","get","updateOrganization","getStore","organization","put","name","setUserOrganization","orgId","post","createOrganization","newOrg","result","getUserOrganizations"],"sources":["/home/soula/grafana/public/app/features/org/state/actions.ts"],"sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\nimport { updateConfigurationSubtitle } from 'app/core/actions';\nimport { ThunkResult } from 'app/types';\n\nimport { organizationLoaded, userOrganizationsLoaded } from './reducers';\n\ntype OrganizationDependencies = { getBackendSrv: typeof getBackendSrv };\n\nexport function loadOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n\n    return organizationResponse;\n  };\n}\n\nexport function updateOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n\n    await dependencies.getBackendSrv().put('/api/org', { name: organization.name });\n\n    dispatch(updateConfigurationSubtitle(organization.name));\n    dispatch(loadOrganization(dependencies));\n  };\n}\n\nexport function setUserOrganization(\n  orgId: number,\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().post('/api/user/using/' + orgId);\n\n    dispatch(updateConfigurationSubtitle(organizationResponse.name));\n  };\n}\n\nexport function createOrganization(\n  newOrg: { name: string },\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const result = await dependencies.getBackendSrv().post('/api/orgs/', newOrg);\n\n    dispatch(setUserOrganization(result.orgId));\n  };\n}\n\nexport function getUserOrganizations(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const result = await dependencies.getBackendSrv().get('/api/user/orgs');\n    dispatch(userOrganizationsLoaded(result));\n\n    return result;\n  };\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,2BAAT,QAA4C,kBAA5C;AAGA,SAASC,kBAAT,EAA6BC,uBAA7B,QAA4D,YAA5D;AAIA,OAAO,SAASC,gBAAT,CACLC,YAAsC,GAAG;EAAEL,aAAa,EAAEA;AAAjB,CADpC,EAEa;EAClB,OAAO,MAAOM,QAAP,IAAoB;IACzB,MAAMC,oBAAoB,GAAG,MAAMF,YAAY,CAACL,aAAb,GAA6BQ,GAA7B,CAAiC,UAAjC,CAAnC;IACAF,QAAQ,CAACJ,kBAAkB,CAACK,oBAAD,CAAnB,CAAR;IAEA,OAAOA,oBAAP;EACD,CALD;AAMD;AAED,OAAO,SAASE,kBAAT,CACLJ,YAAsC,GAAG;EAAEL,aAAa,EAAEA;AAAjB,CADpC,EAEa;EAClB,OAAO,OAAOM,QAAP,EAAiBI,QAAjB,KAA8B;IACnC,MAAMC,YAAY,GAAGD,QAAQ,GAAGC,YAAX,CAAwBA,YAA7C;IAEA,MAAMN,YAAY,CAACL,aAAb,GAA6BY,GAA7B,CAAiC,UAAjC,EAA6C;MAAEC,IAAI,EAAEF,YAAY,CAACE;IAArB,CAA7C,CAAN;IAEAP,QAAQ,CAACL,2BAA2B,CAACU,YAAY,CAACE,IAAd,CAA5B,CAAR;IACAP,QAAQ,CAACF,gBAAgB,CAACC,YAAD,CAAjB,CAAR;EACD,CAPD;AAQD;AAED,OAAO,SAASS,mBAAT,CACLC,KADK,EAELV,YAAsC,GAAG;EAAEL,aAAa,EAAEA;AAAjB,CAFpC,EAGa;EAClB,OAAO,MAAOM,QAAP,IAAoB;IACzB,MAAMC,oBAAoB,GAAG,MAAMF,YAAY,CAACL,aAAb,GAA6BgB,IAA7B,CAAkC,qBAAqBD,KAAvD,CAAnC;IAEAT,QAAQ,CAACL,2BAA2B,CAACM,oBAAoB,CAACM,IAAtB,CAA5B,CAAR;EACD,CAJD;AAKD;AAED,OAAO,SAASI,kBAAT,CACLC,MADK,EAELb,YAAsC,GAAG;EAAEL,aAAa,EAAEA;AAAjB,CAFpC,EAGa;EAClB,OAAO,MAAOM,QAAP,IAAoB;IACzB,MAAMa,MAAM,GAAG,MAAMd,YAAY,CAACL,aAAb,GAA6BgB,IAA7B,CAAkC,YAAlC,EAAgDE,MAAhD,CAArB;IAEAZ,QAAQ,CAACQ,mBAAmB,CAACK,MAAM,CAACJ,KAAR,CAApB,CAAR;EACD,CAJD;AAKD;AAED,OAAO,SAASK,oBAAT,CACLf,YAAsC,GAAG;EAAEL,aAAa,EAAEA;AAAjB,CADpC,EAEa;EAClB,OAAO,MAAOM,QAAP,IAAoB;IACzB,MAAMa,MAAM,GAAG,MAAMd,YAAY,CAACL,aAAb,GAA6BQ,GAA7B,CAAiC,gBAAjC,CAArB;IACAF,QAAQ,CAACH,uBAAuB,CAACgB,MAAD,CAAxB,CAAR;IAEA,OAAOA,MAAP;EACD,CALD;AAMD"},"metadata":{},"sourceType":"module"}