{"ast":null,"code":"var _FlexItem;\n\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Select, useStyles2 } from '@grafana/ui';\nimport { OperationInfoButton } from './OperationInfoButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const OperationHeader = /*#__PURE__*/React.memo(({\n  operation,\n  def,\n  index,\n  onChange,\n  onRemove,\n  queryModeller,\n  dragHandleProps\n}) => {\n  var _def$name;\n\n  const styles = useStyles2(getStyles);\n  const [state, setState] = useState({});\n\n  const onToggleSwitcher = () => {\n    if (state.isOpen) {\n      setState(Object.assign({}, state, {\n        isOpen: false\n      }));\n    } else {\n      const alternatives = queryModeller.getAlternativeOperations(def.alternativesKey).map(alt => ({\n        label: alt.name,\n        value: alt\n      }));\n      setState({\n        isOpen: true,\n        alternatives\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.header,\n    children: [!state.isOpen && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", Object.assign({}, dragHandleProps, {\n        children: (_def$name = def.name) !== null && _def$name !== void 0 ? _def$name : def.id\n      })), _FlexItem || (_FlexItem = /*#__PURE__*/_jsx(FlexItem, {\n        grow: 1\n      })), /*#__PURE__*/_jsxs(\"div\", {\n        className: `${styles.operationHeaderButtons} operation-header-show-on-hover`,\n        children: [/*#__PURE__*/_jsx(Button, {\n          icon: \"angle-down\",\n          size: \"sm\",\n          onClick: onToggleSwitcher,\n          fill: \"text\",\n          variant: \"secondary\",\n          title: \"Click to view alternative operations\"\n        }), /*#__PURE__*/_jsx(OperationInfoButton, {\n          def: def,\n          operation: operation\n        }), /*#__PURE__*/_jsx(Button, {\n          icon: \"times\",\n          size: \"sm\",\n          onClick: () => onRemove(index),\n          fill: \"text\",\n          variant: \"secondary\",\n          title: \"Remove operation\"\n        })]\n      })]\n    }), state.isOpen && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.selectWrapper,\n      children: /*#__PURE__*/_jsx(Select, {\n        autoFocus: true,\n        openMenuOnFocus: true,\n        placeholder: \"Replace with\",\n        options: state.alternatives,\n        isOpen: true,\n        onCloseMenu: onToggleSwitcher,\n        onChange: value => {\n          if (value.value) {\n            // Operation should exist if it is selectable\n            const newDef = queryModeller.getOperationDef(value.value.id);\n            let changedOp = Object.assign({}, operation, {\n              id: value.value.id\n            });\n            onChange(index, def.changeTypeHandler ? def.changeTypeHandler(changedOp, newDef) : changedOp);\n          }\n        }\n      })\n    })]\n  });\n});\nOperationHeader.displayName = 'OperationHeader';\n\nconst getStyles = theme => {\n  return {\n    header: css({\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      display: 'flex',\n      alignItems: 'center',\n      '&:hover .operation-header-show-on-hover': css({\n        opacity: 1\n      })\n    }),\n    operationHeaderButtons: css({\n      opacity: 0,\n      transition: theme.transitions.create(['opacity'], {\n        duration: theme.transitions.duration.short\n      })\n    }),\n    selectWrapper: css({\n      paddingRight: theme.spacing(2)\n    })\n  };\n};","map":{"version":3,"names":["css","React","useState","FlexItem","Button","Select","useStyles2","OperationInfoButton","OperationHeader","memo","operation","def","index","onChange","onRemove","queryModeller","dragHandleProps","styles","getStyles","state","setState","onToggleSwitcher","isOpen","alternatives","getAlternativeOperations","alternativesKey","map","alt","label","name","value","header","id","operationHeaderButtons","selectWrapper","newDef","getOperationDef","changedOp","changeTypeHandler","displayName","theme","borderBottom","colors","border","medium","padding","spacing","display","alignItems","opacity","transition","transitions","create","duration","short","paddingRight"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationHeader.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Select, useStyles2 } from '@grafana/ui';\n\nimport { OperationInfoButton } from './OperationInfoButton';\nimport { VisualQueryModeller, QueryBuilderOperation, QueryBuilderOperationDef } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n  index: number;\n  queryModeller: VisualQueryModeller;\n  dragHandleProps: any;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\ninterface State {\n  isOpen?: boolean;\n  alternatives?: Array<SelectableValue<QueryBuilderOperationDef>>;\n}\n\nexport const OperationHeader = React.memo<Props>(\n  ({ operation, def, index, onChange, onRemove, queryModeller, dragHandleProps }) => {\n    const styles = useStyles2(getStyles);\n    const [state, setState] = useState<State>({});\n\n    const onToggleSwitcher = () => {\n      if (state.isOpen) {\n        setState({ ...state, isOpen: false });\n      } else {\n        const alternatives = queryModeller\n          .getAlternativeOperations(def.alternativesKey!)\n          .map((alt) => ({ label: alt.name, value: alt }));\n        setState({ isOpen: true, alternatives });\n      }\n    };\n\n    return (\n      <div className={styles.header}>\n        {!state.isOpen && (\n          <>\n            <div {...dragHandleProps}>{def.name ?? def.id}</div>\n            <FlexItem grow={1} />\n            <div className={`${styles.operationHeaderButtons} operation-header-show-on-hover`}>\n              <Button\n                icon=\"angle-down\"\n                size=\"sm\"\n                onClick={onToggleSwitcher}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Click to view alternative operations\"\n              />\n              <OperationInfoButton def={def} operation={operation} />\n              <Button\n                icon=\"times\"\n                size=\"sm\"\n                onClick={() => onRemove(index)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n          </>\n        )}\n        {state.isOpen && (\n          <div className={styles.selectWrapper}>\n            <Select\n              autoFocus\n              openMenuOnFocus\n              placeholder=\"Replace with\"\n              options={state.alternatives}\n              isOpen={true}\n              onCloseMenu={onToggleSwitcher}\n              onChange={(value) => {\n                if (value.value) {\n                  // Operation should exist if it is selectable\n                  const newDef = queryModeller.getOperationDef(value.value.id)!;\n                  let changedOp = { ...operation, id: value.value.id };\n                  onChange(index, def.changeTypeHandler ? def.changeTypeHandler(changedOp, newDef) : changedOp);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nOperationHeader.displayName = 'OperationHeader';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css({\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      display: 'flex',\n      alignItems: 'center',\n      '&:hover .operation-header-show-on-hover': css({\n        opacity: 1,\n      }),\n    }),\n    operationHeaderButtons: css({\n      opacity: 0,\n      transition: theme.transitions.create(['opacity'], {\n        duration: theme.transitions.duration.short,\n      }),\n    }),\n    selectWrapper: css({\n      paddingRight: theme.spacing(2),\n    }),\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}