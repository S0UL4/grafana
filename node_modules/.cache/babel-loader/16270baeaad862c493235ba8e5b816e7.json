{"ast":null,"code":"var _p, _b, _h, _Alert, _h2;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { isValidLiveChannelAddress, isLiveChannelStatusEvent, isLiveChannelMessageEvent, LiveChannelConnectionState, LoadingState, applyFieldOverrides } from '@grafana/data';\nimport { config, getGrafanaLiveSrv } from '@grafana/runtime';\nimport { Alert, stylesFactory, Button, JSONFormatter, CustomScrollbar, CodeEditor } from '@grafana/ui';\nimport { StreamingDataFrame } from 'app/features/live/data/StreamingDataFrame';\nimport { TablePanel } from '../table/TablePanel';\nimport { MessageDisplayMode } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport class LivePanel extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"isValid\", void 0);\n\n    _defineProperty(this, \"subscription\", void 0);\n\n    _defineProperty(this, \"styles\", getStyles(config.theme));\n\n    _defineProperty(this, \"streamObserver\", {\n      next: event => {\n        if (isLiveChannelStatusEvent(event)) {\n          this.setState({\n            status: event,\n            changed: Date.now()\n          });\n        } else if (isLiveChannelMessageEvent(event)) {\n          this.setState({\n            message: event.message,\n            changed: Date.now()\n          });\n        } else {\n          console.log('ignore', event);\n        }\n      }\n    });\n\n    _defineProperty(this, \"unsubscribe\", () => {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n        this.subscription = undefined;\n      }\n    });\n\n    _defineProperty(this, \"onSaveJSON\", text => {\n      const {\n        options,\n        onOptionsChange\n      } = this.props;\n\n      try {\n        const json = JSON.parse(text);\n        onOptionsChange(Object.assign({}, options, {\n          json\n        }));\n      } catch (err) {\n        console.log('Error reading JSON', err);\n      }\n    });\n\n    _defineProperty(this, \"onPublishClicked\", async () => {\n      var _this$props$options;\n\n      const {\n        addr\n      } = this.state;\n\n      if (!addr) {\n        console.log('invalid address');\n        return;\n      }\n\n      const data = (_this$props$options = this.props.options) === null || _this$props$options === void 0 ? void 0 : _this$props$options.json;\n\n      if (!data) {\n        console.log('nothing to publish');\n        return;\n      }\n\n      const rsp = await getGrafanaLiveSrv().publish(addr, data);\n      console.log('onPublishClicked (response from publish)', rsp);\n    });\n\n    this.isValid = !!getGrafanaLiveSrv();\n    this.state = {\n      changed: 0\n    };\n  }\n\n  async componentDidMount() {\n    this.loadChannel();\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    var _this$props$options2, _prevProps$options;\n\n    if (((_this$props$options2 = this.props.options) === null || _this$props$options2 === void 0 ? void 0 : _this$props$options2.channel) !== ((_prevProps$options = prevProps.options) === null || _prevProps$options === void 0 ? void 0 : _prevProps$options.channel)) {\n      this.loadChannel();\n    }\n  }\n\n  async loadChannel() {\n    var _this$props$options3;\n\n    const addr = (_this$props$options3 = this.props.options) === null || _this$props$options3 === void 0 ? void 0 : _this$props$options3.channel;\n\n    if (!isValidLiveChannelAddress(addr)) {\n      console.log('INVALID', addr);\n      this.unsubscribe();\n      this.setState({\n        addr: undefined\n      });\n      return;\n    }\n\n    if (isEqual(addr, this.state.addr)) {\n      console.log('Same channel', this.state.addr);\n      return;\n    }\n\n    const live = getGrafanaLiveSrv();\n\n    if (!live) {\n      console.log('INVALID', addr);\n      this.unsubscribe();\n      this.setState({\n        addr: undefined\n      });\n      return;\n    }\n\n    this.unsubscribe();\n    console.log('LOAD', addr); // Subscribe to new events\n\n    try {\n      this.subscription = live.getStream(addr).subscribe(this.streamObserver);\n      this.setState({\n        addr,\n        error: undefined\n      });\n    } catch (err) {\n      this.setState({\n        addr: undefined,\n        error: err\n      });\n    }\n  }\n\n  renderNotEnabled() {\n    const preformatted = `[feature_toggles]\n    enable = live`;\n    return /*#__PURE__*/_jsxs(Alert, {\n      title: \"Grafana Live\",\n      severity: \"info\",\n      children: [_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n        children: \"Grafana live requires a feature flag to run\"\n      })), _b || (_b = /*#__PURE__*/_jsx(\"b\", {\n        children: \"custom.ini:\"\n      })), /*#__PURE__*/_jsx(\"pre\", {\n        children: preformatted\n      })]\n    });\n  }\n\n  renderMessage(height) {\n    const {\n      options\n    } = this.props;\n    const {\n      message\n    } = this.state;\n\n    if (!message) {\n      var _options$channel, _options$channel2, _options$channel3;\n\n      return /*#__PURE__*/_jsxs(\"div\", {\n        children: [_h || (_h = /*#__PURE__*/_jsx(\"h4\", {\n          children: \"Waiting for data:\"\n        })), (_options$channel = options.channel) === null || _options$channel === void 0 ? void 0 : _options$channel.scope, \"/\", (_options$channel2 = options.channel) === null || _options$channel2 === void 0 ? void 0 : _options$channel2.namespace, \"/\", (_options$channel3 = options.channel) === null || _options$channel3 === void 0 ? void 0 : _options$channel3.path]\n      });\n    }\n\n    if (options.message === MessageDisplayMode.JSON) {\n      return /*#__PURE__*/_jsx(JSONFormatter, {\n        json: message,\n        open: 5\n      });\n    }\n\n    if (options.message === MessageDisplayMode.Auto) {\n      if (message instanceof StreamingDataFrame) {\n        const data = {\n          series: applyFieldOverrides({\n            data: [message],\n            theme: config.theme2,\n            replaceVariables: v => v,\n            fieldConfig: {\n              defaults: {},\n              overrides: []\n            }\n          }),\n          state: LoadingState.Streaming\n        };\n        const props = Object.assign({}, this.props, {\n          options: {\n            frameIndex: 0,\n            showHeader: true\n          }\n        });\n        return /*#__PURE__*/_jsx(TablePanel, Object.assign({}, props, {\n          data: data,\n          height: height\n        }));\n      }\n    }\n\n    return /*#__PURE__*/_jsx(\"pre\", {\n      children: JSON.stringify(message)\n    });\n  }\n\n  renderPublish(height) {\n    const {\n      options\n    } = this.props;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(CodeEditor, {\n        height: height - 32,\n        language: \"json\",\n        value: options.json ? JSON.stringify(options.json, null, 2) : '{ }',\n        onBlur: this.onSaveJSON,\n        onSave: this.onSaveJSON,\n        showMiniMap: false,\n        showLineNumbers: true\n      }), /*#__PURE__*/_jsx(\"div\", {\n        style: {\n          height: 32\n        },\n        children: /*#__PURE__*/_jsx(Button, {\n          onClick: this.onPublishClicked,\n          children: \"Publish\"\n        })\n      })]\n    });\n  }\n\n  renderStatus() {\n    const {\n      status\n    } = this.state;\n\n    if ((status === null || status === void 0 ? void 0 : status.state) === LiveChannelConnectionState.Connected) {\n      return; // nothing\n    }\n\n    let statusClass = '';\n\n    if (status) {\n      statusClass = this.styles.status[status.state];\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: cx(statusClass, this.styles.statusWrap),\n      children: status === null || status === void 0 ? void 0 : status.state\n    });\n  }\n\n  renderBody() {\n    const {\n      status\n    } = this.state;\n    const {\n      options,\n      height\n    } = this.props;\n\n    if (options.publish) {\n      // Only the publish form\n      if (options.message === MessageDisplayMode.None) {\n        return /*#__PURE__*/_jsx(\"div\", {\n          children: this.renderPublish(height)\n        });\n      } // Both message and publish\n\n\n      const halfHeight = height / 2;\n      return /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            height: halfHeight,\n            overflow: 'hidden'\n          },\n          children: /*#__PURE__*/_jsx(CustomScrollbar, {\n            autoHeightMin: \"100%\",\n            autoHeightMax: \"100%\",\n            children: this.renderMessage(halfHeight)\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: this.renderPublish(halfHeight)\n        })]\n      });\n    }\n\n    if (options.message === MessageDisplayMode.None) {\n      return /*#__PURE__*/_jsx(\"pre\", {\n        children: JSON.stringify(status)\n      });\n    } // Only message\n\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        overflow: 'hidden',\n        height\n      },\n      children: /*#__PURE__*/_jsx(CustomScrollbar, {\n        autoHeightMin: \"100%\",\n        autoHeightMax: \"100%\",\n        children: this.renderMessage(height)\n      })\n    });\n  }\n\n  render() {\n    if (!this.isValid) {\n      return this.renderNotEnabled();\n    }\n\n    const {\n      addr,\n      error\n    } = this.state;\n\n    if (!addr) {\n      return _Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n        title: \"Grafana Live\",\n        severity: \"info\",\n        children: \"Use the panel editor to pick a channel\"\n      }));\n    }\n\n    if (error) {\n      return /*#__PURE__*/_jsxs(\"div\", {\n        children: [_h2 || (_h2 = /*#__PURE__*/_jsx(\"h2\", {\n          children: \"ERROR\"\n        })), /*#__PURE__*/_jsx(\"div\", {\n          children: JSON.stringify(error)\n        })]\n      });\n    }\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [this.renderStatus(), this.renderBody()]\n    });\n  }\n\n}\nconst getStyles = stylesFactory(theme => ({\n  statusWrap: css`\n    margin: auto;\n    position: absolute;\n    top: 0;\n    right: 0;\n    background: ${theme.colors.panelBg};\n    padding: 10px;\n    z-index: ${theme.zIndex.modal};\n  `,\n  status: {\n    [LiveChannelConnectionState.Pending]: css`\n      border: 1px solid ${theme.palette.brandPrimary};\n    `,\n    [LiveChannelConnectionState.Connected]: css`\n      border: 1px solid ${theme.palette.brandSuccess};\n    `,\n    [LiveChannelConnectionState.Disconnected]: css`\n      border: 1px solid ${theme.palette.brandWarning};\n    `,\n    [LiveChannelConnectionState.Shutdown]: css`\n      border: 1px solid ${theme.palette.brandDanger};\n    `,\n    [LiveChannelConnectionState.Invalid]: css`\n      border: 1px solid red;\n    `\n  }\n}));","map":{"version":3,"names":["css","cx","isEqual","React","PureComponent","isValidLiveChannelAddress","isLiveChannelStatusEvent","isLiveChannelMessageEvent","LiveChannelConnectionState","LoadingState","applyFieldOverrides","config","getGrafanaLiveSrv","Alert","stylesFactory","Button","JSONFormatter","CustomScrollbar","CodeEditor","StreamingDataFrame","TablePanel","MessageDisplayMode","LivePanel","constructor","props","getStyles","theme","next","event","setState","status","changed","Date","now","message","console","log","subscription","unsubscribe","undefined","text","options","onOptionsChange","json","JSON","parse","err","addr","state","data","rsp","publish","isValid","componentDidMount","loadChannel","componentWillUnmount","componentDidUpdate","prevProps","channel","live","getStream","subscribe","streamObserver","error","renderNotEnabled","preformatted","renderMessage","height","scope","namespace","path","Auto","series","theme2","replaceVariables","v","fieldConfig","defaults","overrides","Streaming","frameIndex","showHeader","stringify","renderPublish","onSaveJSON","onPublishClicked","renderStatus","Connected","statusClass","styles","statusWrap","renderBody","None","halfHeight","overflow","render","colors","panelBg","zIndex","modal","Pending","palette","brandPrimary","brandSuccess","Disconnected","brandWarning","Shutdown","brandDanger","Invalid"],"sources":["/home/soula/grafana/public/app/plugins/panel/live/LivePanel.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { Unsubscribable, PartialObserver } from 'rxjs';\n\nimport {\n  GrafanaTheme,\n  PanelProps,\n  LiveChannelStatusEvent,\n  isValidLiveChannelAddress,\n  LiveChannelEvent,\n  isLiveChannelStatusEvent,\n  isLiveChannelMessageEvent,\n  LiveChannelConnectionState,\n  PanelData,\n  LoadingState,\n  applyFieldOverrides,\n  LiveChannelAddress,\n} from '@grafana/data';\nimport { config, getGrafanaLiveSrv } from '@grafana/runtime';\nimport { Alert, stylesFactory, Button, JSONFormatter, CustomScrollbar, CodeEditor } from '@grafana/ui';\nimport { StreamingDataFrame } from 'app/features/live/data/StreamingDataFrame';\n\nimport { TablePanel } from '../table/TablePanel';\n\nimport { LivePanelOptions, MessageDisplayMode } from './types';\n\ninterface Props extends PanelProps<LivePanelOptions> {}\n\ninterface State {\n  error?: any;\n  addr?: LiveChannelAddress;\n  status?: LiveChannelStatusEvent;\n  message?: any;\n  changed: number;\n}\n\nexport class LivePanel extends PureComponent<Props, State> {\n  private readonly isValid: boolean;\n  subscription?: Unsubscribable;\n  styles = getStyles(config.theme);\n\n  constructor(props: Props) {\n    super(props);\n\n    this.isValid = !!getGrafanaLiveSrv();\n    this.state = { changed: 0 };\n  }\n\n  async componentDidMount() {\n    this.loadChannel();\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props): void {\n    if (this.props.options?.channel !== prevProps.options?.channel) {\n      this.loadChannel();\n    }\n  }\n\n  streamObserver: PartialObserver<LiveChannelEvent> = {\n    next: (event: LiveChannelEvent) => {\n      if (isLiveChannelStatusEvent(event)) {\n        this.setState({ status: event, changed: Date.now() });\n      } else if (isLiveChannelMessageEvent(event)) {\n        this.setState({ message: event.message, changed: Date.now() });\n      } else {\n        console.log('ignore', event);\n      }\n    },\n  };\n\n  unsubscribe = () => {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  };\n\n  async loadChannel() {\n    const addr = this.props.options?.channel;\n    if (!isValidLiveChannelAddress(addr)) {\n      console.log('INVALID', addr);\n      this.unsubscribe();\n      this.setState({\n        addr: undefined,\n      });\n      return;\n    }\n\n    if (isEqual(addr, this.state.addr)) {\n      console.log('Same channel', this.state.addr);\n      return;\n    }\n\n    const live = getGrafanaLiveSrv();\n    if (!live) {\n      console.log('INVALID', addr);\n      this.unsubscribe();\n      this.setState({\n        addr: undefined,\n      });\n      return;\n    }\n    this.unsubscribe();\n\n    console.log('LOAD', addr);\n\n    // Subscribe to new events\n    try {\n      this.subscription = live.getStream(addr).subscribe(this.streamObserver);\n      this.setState({ addr, error: undefined });\n    } catch (err) {\n      this.setState({ addr: undefined, error: err });\n    }\n  }\n\n  renderNotEnabled() {\n    const preformatted = `[feature_toggles]\n    enable = live`;\n    return (\n      <Alert title=\"Grafana Live\" severity=\"info\">\n        <p>Grafana live requires a feature flag to run</p>\n\n        <b>custom.ini:</b>\n        <pre>{preformatted}</pre>\n      </Alert>\n    );\n  }\n\n  onSaveJSON = (text: string) => {\n    const { options, onOptionsChange } = this.props;\n\n    try {\n      const json = JSON.parse(text);\n      onOptionsChange({ ...options, json });\n    } catch (err) {\n      console.log('Error reading JSON', err);\n    }\n  };\n\n  onPublishClicked = async () => {\n    const { addr } = this.state;\n    if (!addr) {\n      console.log('invalid address');\n      return;\n    }\n\n    const data = this.props.options?.json;\n    if (!data) {\n      console.log('nothing to publish');\n      return;\n    }\n\n    const rsp = await getGrafanaLiveSrv().publish(addr, data);\n    console.log('onPublishClicked (response from publish)', rsp);\n  };\n\n  renderMessage(height: number) {\n    const { options } = this.props;\n    const { message } = this.state;\n\n    if (!message) {\n      return (\n        <div>\n          <h4>Waiting for data:</h4>\n          {options.channel?.scope}/{options.channel?.namespace}/{options.channel?.path}\n        </div>\n      );\n    }\n\n    if (options.message === MessageDisplayMode.JSON) {\n      return <JSONFormatter json={message} open={5} />;\n    }\n\n    if (options.message === MessageDisplayMode.Auto) {\n      if (message instanceof StreamingDataFrame) {\n        const data: PanelData = {\n          series: applyFieldOverrides({\n            data: [message],\n            theme: config.theme2,\n            replaceVariables: (v: string) => v,\n            fieldConfig: {\n              defaults: {},\n              overrides: [],\n            },\n          }),\n          state: LoadingState.Streaming,\n        } as PanelData;\n        const props = {\n          ...this.props,\n          options: { frameIndex: 0, showHeader: true },\n        } as PanelProps<any>;\n        return <TablePanel {...props} data={data} height={height} />;\n      }\n    }\n\n    return <pre>{JSON.stringify(message)}</pre>;\n  }\n\n  renderPublish(height: number) {\n    const { options } = this.props;\n    return (\n      <>\n        <CodeEditor\n          height={height - 32}\n          language=\"json\"\n          value={options.json ? JSON.stringify(options.json, null, 2) : '{ }'}\n          onBlur={this.onSaveJSON}\n          onSave={this.onSaveJSON}\n          showMiniMap={false}\n          showLineNumbers={true}\n        />\n        <div style={{ height: 32 }}>\n          <Button onClick={this.onPublishClicked}>Publish</Button>\n        </div>\n      </>\n    );\n  }\n\n  renderStatus() {\n    const { status } = this.state;\n    if (status?.state === LiveChannelConnectionState.Connected) {\n      return; // nothing\n    }\n\n    let statusClass = '';\n    if (status) {\n      statusClass = this.styles.status[status.state];\n    }\n    return <div className={cx(statusClass, this.styles.statusWrap)}>{status?.state}</div>;\n  }\n\n  renderBody() {\n    const { status } = this.state;\n    const { options, height } = this.props;\n\n    if (options.publish) {\n      // Only the publish form\n      if (options.message === MessageDisplayMode.None) {\n        return <div>{this.renderPublish(height)}</div>;\n      }\n      // Both message and publish\n      const halfHeight = height / 2;\n      return (\n        <div>\n          <div style={{ height: halfHeight, overflow: 'hidden' }}>\n            <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n              {this.renderMessage(halfHeight)}\n            </CustomScrollbar>\n          </div>\n          <div>{this.renderPublish(halfHeight)}</div>\n        </div>\n      );\n    }\n    if (options.message === MessageDisplayMode.None) {\n      return <pre>{JSON.stringify(status)}</pre>;\n    }\n\n    // Only message\n    return (\n      <div style={{ overflow: 'hidden', height }}>\n        <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n          {this.renderMessage(height)}\n        </CustomScrollbar>\n      </div>\n    );\n  }\n\n  render() {\n    if (!this.isValid) {\n      return this.renderNotEnabled();\n    }\n    const { addr, error } = this.state;\n    if (!addr) {\n      return (\n        <Alert title=\"Grafana Live\" severity=\"info\">\n          Use the panel editor to pick a channel\n        </Alert>\n      );\n    }\n    if (error) {\n      return (\n        <div>\n          <h2>ERROR</h2>\n          <div>{JSON.stringify(error)}</div>\n        </div>\n      );\n    }\n    return (\n      <>\n        {this.renderStatus()}\n        {this.renderBody()}\n      </>\n    );\n  }\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  statusWrap: css`\n    margin: auto;\n    position: absolute;\n    top: 0;\n    right: 0;\n    background: ${theme.colors.panelBg};\n    padding: 10px;\n    z-index: ${theme.zIndex.modal};\n  `,\n  status: {\n    [LiveChannelConnectionState.Pending]: css`\n      border: 1px solid ${theme.palette.brandPrimary};\n    `,\n    [LiveChannelConnectionState.Connected]: css`\n      border: 1px solid ${theme.palette.brandSuccess};\n    `,\n    [LiveChannelConnectionState.Disconnected]: css`\n      border: 1px solid ${theme.palette.brandWarning};\n    `,\n    [LiveChannelConnectionState.Shutdown]: css`\n      border: 1px solid ${theme.palette.brandDanger};\n    `,\n    [LiveChannelConnectionState.Invalid]: css`\n      border: 1px solid red;\n    `,\n  },\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}