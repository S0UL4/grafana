{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props) {\n  const {\n    query,\n    onChange,\n    onRunQuery,\n    datasource,\n    data,\n    showRawQuery\n  } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, {\n    expr: query.expr\n  }); // Only rebuild visual query if expr changes from outside\n\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = visQuery => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({\n      visQuery,\n      expr\n    }));\n    onChange(Object.assign({}, props.query, {\n      expr: expr\n    }));\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(PromQueryBuilder, {\n      query: state.visQuery,\n      datasource: datasource,\n      onChange: onVisQueryChange,\n      onRunQuery: onRunQuery,\n      data: data\n    }), showRawQuery && /*#__PURE__*/_jsx(QueryPreview, {\n      query: query.expr\n    })]\n  });\n}\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState: {\n    expr: ''\n  },\n  reducers: {\n    visualQueryChange: (state, action) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    }\n  }\n});\nconst {\n  visualQueryChange,\n  exprChanged\n} = stateSlice.actions;","map":{"version":3,"names":["createSlice","React","useEffect","useReducer","promQueryModeller","buildVisualQueryFromString","PromQueryBuilder","QueryPreview","PromQueryBuilderContainer","props","query","onChange","onRunQuery","datasource","data","showRawQuery","state","dispatch","stateSlice","reducer","expr","exprChanged","onVisQueryChange","visQuery","renderQuery","visualQueryChange","name","initialState","reducers","action","payload","parseResult","actions"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderContainer.tsx"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { PanelData } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\n\nexport interface Props {\n  query: PromQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showRawQuery?: boolean;\n}\n\nexport interface State {\n  visQuery?: PromVisualQuery;\n  expr: string;\n}\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, data, showRawQuery } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, { expr: query.expr });\n\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = (visQuery: PromVisualQuery) => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n    onChange({ ...props.query, expr: expr });\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <PromQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        data={data}\n      />\n      {showRawQuery && <QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState: { expr: '' } as State,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: PromVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged } = stateSlice.actions;\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AAMA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,0BAAT,QAA2C,YAA3C;AAGA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,YAAT,QAA6B,gBAA7B;;;;;AAgBA;AACA;AACA;AACA,OAAO,SAASC,yBAAT,CAAmCC,KAAnC,EAAiD;EACtD,MAAM;IAAEC,KAAF;IAASC,QAAT;IAAmBC,UAAnB;IAA+BC,UAA/B;IAA2CC,IAA3C;IAAiDC;EAAjD,IAAkEN,KAAxE;EACA,MAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBd,UAAU,CAACe,UAAU,CAACC,OAAZ,EAAqB;IAAEC,IAAI,EAAEV,KAAK,CAACU;EAAd,CAArB,CAApC,CAFsD,CAItD;;EACAlB,SAAS,CAAC,MAAM;IACde,QAAQ,CAACI,WAAW,CAACX,KAAK,CAACU,IAAP,CAAZ,CAAR;EACD,CAFQ,EAEN,CAACV,KAAK,CAACU,IAAP,CAFM,CAAT;;EAIA,MAAME,gBAAgB,GAAIC,QAAD,IAA+B;IACtD,MAAMH,IAAI,GAAGhB,iBAAiB,CAACoB,WAAlB,CAA8BD,QAA9B,CAAb;IACAN,QAAQ,CAACQ,iBAAiB,CAAC;MAAEF,QAAF;MAAYH;IAAZ,CAAD,CAAlB,CAAR;IACAT,QAAQ,mBAAMF,KAAK,CAACC,KAAZ;MAAmBU,IAAI,EAAEA;IAAzB,GAAR;EACD,CAJD;;EAMA,IAAI,CAACJ,KAAK,CAACO,QAAX,EAAqB;IACnB,OAAO,IAAP;EACD;;EAED,oBACE;IAAA,wBACE,KAAC,gBAAD;MACE,KAAK,EAAEP,KAAK,CAACO,QADf;MAEE,UAAU,EAAEV,UAFd;MAGE,QAAQ,EAAES,gBAHZ;MAIE,UAAU,EAAEV,UAJd;MAKE,IAAI,EAAEE;IALR,EADF,EAQGC,YAAY,iBAAI,KAAC,YAAD;MAAc,KAAK,EAAEL,KAAK,CAACU;IAA3B,EARnB;EAAA,EADF;AAYD;AAED,MAAMF,UAAU,GAAGlB,WAAW,CAAC;EAC7B0B,IAAI,EAAE,wBADuB;EAE7BC,YAAY,EAAE;IAAEP,IAAI,EAAE;EAAR,CAFe;EAG7BQ,QAAQ,EAAE;IACRH,iBAAiB,EAAE,CAACT,KAAD,EAAQa,MAAR,KAA+E;MAChGb,KAAK,CAACI,IAAN,GAAaS,MAAM,CAACC,OAAP,CAAeV,IAA5B;MACAJ,KAAK,CAACO,QAAN,GAAiBM,MAAM,CAACC,OAAP,CAAeP,QAAhC;IACD,CAJO;IAKRF,WAAW,EAAE,CAACL,KAAD,EAAQa,MAAR,KAA0C;MACrD,IAAI,CAACb,KAAK,CAACO,QAAP,IAAmBP,KAAK,CAACI,IAAN,KAAeS,MAAM,CAACC,OAA7C,EAAsD;QACpDd,KAAK,CAACI,IAAN,GAAaS,MAAM,CAACC,OAApB;QACA,MAAMC,WAAW,GAAG1B,0BAA0B,CAACwB,MAAM,CAACC,OAAR,CAA9C;QACAd,KAAK,CAACO,QAAN,GAAiBQ,WAAW,CAACrB,KAA7B;MACD;IACF;EAXO;AAHmB,CAAD,CAA9B;AAkBA,MAAM;EAAEe,iBAAF;EAAqBJ;AAArB,IAAqCH,UAAU,CAACc,OAAtD"},"metadata":{},"sourceType":"module"}