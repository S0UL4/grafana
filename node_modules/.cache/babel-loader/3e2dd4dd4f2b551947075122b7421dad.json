{"ast":null,"code":"pluginDirectiveLoader.$inject = [\"$compile\", \"$http\", \"$templateCache\", \"$location\"];\nimport angular from 'angular';\nimport { each } from 'lodash';\nimport { PanelEvents } from '@grafana/data';\nimport coreModule from 'app/angular/core_module';\nimport config from 'app/core/config';\nimport { importPanelPlugin } from '../../features/plugins/importPanelPlugin';\nimport { importDataSourcePlugin, importAppPlugin } from '../../features/plugins/plugin_loader';\n/** @ngInject */\n\nfunction pluginDirectiveLoader($compile, $http, $templateCache, $location) {\n  function getTemplate(component) {\n    if (component.template) {\n      return Promise.resolve(component.template);\n    }\n\n    const cached = $templateCache.get(component.templateUrl);\n\n    if (cached) {\n      return Promise.resolve(cached);\n    }\n\n    return $http.get(component.templateUrl).then(res => {\n      return res.data;\n    });\n  }\n\n  function relativeTemplateUrlToAbs(templateUrl, baseUrl) {\n    if (!templateUrl) {\n      return undefined;\n    }\n\n    if (templateUrl.indexOf('public') === 0) {\n      return templateUrl;\n    }\n\n    return baseUrl + '/' + templateUrl;\n  }\n\n  function getPluginComponentDirective(options) {\n    // handle relative template urls for plugin templates\n    options.Component.templateUrl = relativeTemplateUrlToAbs(options.Component.templateUrl, options.baseUrl);\n    return () => {\n      return {\n        templateUrl: options.Component.templateUrl,\n        template: options.Component.template,\n        restrict: 'E',\n        controller: options.Component,\n        controllerAs: 'ctrl',\n        bindToController: true,\n        scope: options.bindings,\n        link: (scope, elem, attrs, ctrl) => {\n          if (ctrl.link) {\n            ctrl.link(scope, elem, attrs, ctrl);\n          }\n\n          if (ctrl.init) {\n            ctrl.init();\n          }\n        }\n      };\n    };\n  }\n\n  function loadPanelComponentInfo(scope, attrs) {\n    const componentInfo = {\n      name: 'panel-plugin-' + scope.panel.type,\n      bindings: {\n        dashboard: '=',\n        panel: '=',\n        row: '='\n      },\n      attrs: {\n        dashboard: 'dashboard',\n        panel: 'panel',\n        class: 'panel-height-helper'\n      }\n    };\n    const panelInfo = config.panels[scope.panel.type];\n    return importPanelPlugin(panelInfo.id).then(panelPlugin => {\n      const PanelCtrl = panelPlugin.angularPanelCtrl;\n      componentInfo.Component = PanelCtrl;\n\n      if (!PanelCtrl || PanelCtrl.registered) {\n        return componentInfo;\n      }\n\n      if (PanelCtrl.templatePromise) {\n        return PanelCtrl.templatePromise.then(res => {\n          return componentInfo;\n        });\n      }\n\n      if (panelInfo) {\n        PanelCtrl.templateUrl = relativeTemplateUrlToAbs(PanelCtrl.templateUrl, panelInfo.baseUrl);\n      }\n\n      PanelCtrl.templatePromise = getTemplate(PanelCtrl).then(template => {\n        PanelCtrl.templateUrl = null;\n        PanelCtrl.template = `<grafana-panel ctrl=\"ctrl\" class=\"panel-height-helper\">${template}</grafana-panel>`;\n        return componentInfo;\n      });\n      return PanelCtrl.templatePromise;\n    });\n  }\n\n  function getModule(scope, attrs) {\n    switch (attrs.type) {\n      // QueryCtrl\n      case 'query-ctrl':\n        {\n          const ds = scope.ctrl.datasource;\n          return Promise.resolve({\n            baseUrl: ds.meta.baseUrl,\n            name: 'query-ctrl-' + ds.meta.id,\n            bindings: {\n              target: '=',\n              panelCtrl: '=',\n              datasource: '='\n            },\n            attrs: {\n              target: 'ctrl.target',\n              'panel-ctrl': 'ctrl',\n              datasource: 'ctrl.datasource'\n            },\n            Component: ds.components.QueryCtrl\n          });\n        }\n      // Annotations\n\n      case 'annotations-query-ctrl':\n        {\n          const baseUrl = scope.ctrl.currentDatasource.meta.baseUrl;\n          const pluginId = scope.ctrl.currentDatasource.meta.id;\n          return importDataSourcePlugin(scope.ctrl.currentDatasource.meta).then(dsPlugin => {\n            return {\n              baseUrl,\n              name: 'annotations-query-ctrl-' + pluginId,\n              bindings: {\n                annotation: '=',\n                datasource: '='\n              },\n              attrs: {\n                annotation: 'ctrl.currentAnnotation',\n                datasource: 'ctrl.currentDatasource'\n              },\n              Component: dsPlugin.components.AnnotationsQueryCtrl\n            };\n          });\n        }\n      // Datasource ConfigCtrl\n\n      case 'datasource-config-ctrl':\n        {\n          const dsMeta = scope.ctrl.datasourceMeta;\n          const angularUrl = $location.url();\n          return importDataSourcePlugin(dsMeta).then(dsPlugin => {\n            scope.$watch('ctrl.current', () => {\n              // This watcher can trigger when we navigate away due to late digests\n              // This check is to stop onModelChanged from being called when navigating away\n              // as it triggers a redux action which comes before the angular $routeChangeSucces and\n              // This makes the bridgeSrv think location changed from redux before detecting it was actually\n              // changed from angular.\n              if (angularUrl === $location.url()) {\n                scope.onModelChanged(scope.ctrl.current);\n              }\n            }, true);\n            return {\n              baseUrl: dsMeta.baseUrl,\n              name: 'ds-config-' + dsMeta.id,\n              bindings: {\n                meta: '=',\n                current: '='\n              },\n              attrs: {\n                meta: 'ctrl.datasourceMeta',\n                current: 'ctrl.current'\n              },\n              Component: dsPlugin.angularConfigCtrl\n            };\n          });\n        }\n      // AppConfigCtrl\n\n      case 'app-config-ctrl':\n        {\n          const model = scope.ctrl.model;\n          return importAppPlugin(model).then(appPlugin => {\n            return {\n              baseUrl: model.baseUrl,\n              name: 'app-config-' + model.id,\n              bindings: {\n                appModel: '=',\n                appEditCtrl: '='\n              },\n              attrs: {\n                'app-model': 'ctrl.model',\n                'app-edit-ctrl': 'ctrl'\n              },\n              Component: appPlugin.angularConfigCtrl\n            };\n          });\n        }\n      // Panel\n\n      case 'panel':\n        {\n          return loadPanelComponentInfo(scope, attrs);\n        }\n\n      default:\n        {\n          return Promise.reject({\n            message: 'Could not find component type: ' + attrs.type\n          });\n        }\n    }\n  }\n\n  function appendAndCompile(scope, elem, componentInfo) {\n    const child = angular.element(document.createElement(componentInfo.name));\n    each(componentInfo.attrs, (value, key) => {\n      child.attr(key, value);\n    });\n    $compile(child)(scope);\n    elem.empty(); // let a binding digest cycle complete before adding to dom\n\n    setTimeout(() => {\n      scope.$applyAsync(() => {\n        elem.append(child);\n        setTimeout(() => {\n          scope.$applyAsync(() => {\n            scope.$broadcast(PanelEvents.componentDidMount.name);\n          });\n        });\n      });\n    });\n  }\n\n  function registerPluginComponent(scope, elem, attrs, componentInfo) {\n    if (componentInfo.notFound) {\n      elem.empty();\n      return;\n    }\n\n    if (!componentInfo.Component) {\n      throw {\n        message: 'Failed to find exported plugin component for ' + componentInfo.name\n      };\n    }\n\n    if (!componentInfo.Component.registered) {\n      const directiveName = attrs.$normalize(componentInfo.name);\n      const directiveFn = getPluginComponentDirective(componentInfo);\n      coreModule.directive(directiveName, directiveFn);\n      componentInfo.Component.registered = true;\n    }\n\n    appendAndCompile(scope, elem, componentInfo);\n  }\n\n  return {\n    restrict: 'E',\n    link: (scope, elem, attrs) => {\n      getModule(scope, attrs).then(componentInfo => {\n        registerPluginComponent(scope, elem, attrs, componentInfo);\n      }).catch(err => {\n        console.error('Plugin component error', err);\n      });\n    }\n  };\n}\n\ncoreModule.directive('pluginComponent', pluginDirectiveLoader);","map":{"version":3,"names":["angular","each","PanelEvents","coreModule","config","importPanelPlugin","importDataSourcePlugin","importAppPlugin","pluginDirectiveLoader","$compile","$http","$templateCache","$location","getTemplate","component","template","Promise","resolve","cached","get","templateUrl","then","res","data","relativeTemplateUrlToAbs","baseUrl","undefined","indexOf","getPluginComponentDirective","options","Component","restrict","controller","controllerAs","bindToController","scope","bindings","link","elem","attrs","ctrl","init","loadPanelComponentInfo","componentInfo","name","panel","type","dashboard","row","class","panelInfo","panels","id","panelPlugin","PanelCtrl","angularPanelCtrl","registered","templatePromise","getModule","ds","datasource","meta","target","panelCtrl","components","QueryCtrl","currentDatasource","pluginId","dsPlugin","annotation","AnnotationsQueryCtrl","dsMeta","datasourceMeta","angularUrl","url","$watch","onModelChanged","current","angularConfigCtrl","model","appPlugin","appModel","appEditCtrl","reject","message","appendAndCompile","child","element","document","createElement","value","key","attr","empty","setTimeout","$applyAsync","append","$broadcast","componentDidMount","registerPluginComponent","notFound","directiveName","$normalize","directiveFn","directive","catch","err","console","error"],"sources":["/home/soula/grafana/public/app/angular/components/plugin_component.ts"],"sourcesContent":["import angular, { ILocationService } from 'angular';\nimport { each } from 'lodash';\n\nimport { DataSourceApi, PanelEvents } from '@grafana/data';\nimport coreModule from 'app/angular/core_module';\nimport config from 'app/core/config';\n\nimport { importPanelPlugin } from '../../features/plugins/importPanelPlugin';\nimport { importDataSourcePlugin, importAppPlugin } from '../../features/plugins/plugin_loader';\n\n/** @ngInject */\nfunction pluginDirectiveLoader($compile: any, $http: any, $templateCache: any, $location: ILocationService) {\n  function getTemplate(component: { template: any; templateUrl: any }) {\n    if (component.template) {\n      return Promise.resolve(component.template);\n    }\n    const cached = $templateCache.get(component.templateUrl);\n    if (cached) {\n      return Promise.resolve(cached);\n    }\n    return $http.get(component.templateUrl).then((res: any) => {\n      return res.data;\n    });\n  }\n\n  function relativeTemplateUrlToAbs(templateUrl: string, baseUrl: string) {\n    if (!templateUrl) {\n      return undefined;\n    }\n    if (templateUrl.indexOf('public') === 0) {\n      return templateUrl;\n    }\n    return baseUrl + '/' + templateUrl;\n  }\n\n  function getPluginComponentDirective(options: any) {\n    // handle relative template urls for plugin templates\n    options.Component.templateUrl = relativeTemplateUrlToAbs(options.Component.templateUrl, options.baseUrl);\n\n    return () => {\n      return {\n        templateUrl: options.Component.templateUrl,\n        template: options.Component.template,\n        restrict: 'E',\n        controller: options.Component,\n        controllerAs: 'ctrl',\n        bindToController: true,\n        scope: options.bindings,\n        link: (scope: any, elem: any, attrs: any, ctrl: any) => {\n          if (ctrl.link) {\n            ctrl.link(scope, elem, attrs, ctrl);\n          }\n          if (ctrl.init) {\n            ctrl.init();\n          }\n        },\n      };\n    };\n  }\n\n  function loadPanelComponentInfo(scope: any, attrs: any) {\n    const componentInfo: any = {\n      name: 'panel-plugin-' + scope.panel.type,\n      bindings: { dashboard: '=', panel: '=', row: '=' },\n      attrs: {\n        dashboard: 'dashboard',\n        panel: 'panel',\n        class: 'panel-height-helper',\n      },\n    };\n\n    const panelInfo = config.panels[scope.panel.type];\n    return importPanelPlugin(panelInfo.id).then((panelPlugin) => {\n      const PanelCtrl = panelPlugin.angularPanelCtrl;\n      componentInfo.Component = PanelCtrl;\n\n      if (!PanelCtrl || PanelCtrl.registered) {\n        return componentInfo;\n      }\n\n      if (PanelCtrl.templatePromise) {\n        return PanelCtrl.templatePromise.then((res: any) => {\n          return componentInfo;\n        });\n      }\n\n      if (panelInfo) {\n        PanelCtrl.templateUrl = relativeTemplateUrlToAbs(PanelCtrl.templateUrl, panelInfo.baseUrl);\n      }\n\n      PanelCtrl.templatePromise = getTemplate(PanelCtrl).then((template: any) => {\n        PanelCtrl.templateUrl = null;\n        PanelCtrl.template = `<grafana-panel ctrl=\"ctrl\" class=\"panel-height-helper\">${template}</grafana-panel>`;\n        return componentInfo;\n      });\n\n      return PanelCtrl.templatePromise;\n    });\n  }\n\n  function getModule(scope: any, attrs: any): any {\n    switch (attrs.type) {\n      // QueryCtrl\n      case 'query-ctrl': {\n        const ds: DataSourceApi = scope.ctrl.datasource as DataSourceApi;\n\n        return Promise.resolve({\n          baseUrl: ds.meta.baseUrl,\n          name: 'query-ctrl-' + ds.meta.id,\n          bindings: { target: '=', panelCtrl: '=', datasource: '=' },\n          attrs: {\n            target: 'ctrl.target',\n            'panel-ctrl': 'ctrl',\n            datasource: 'ctrl.datasource',\n          },\n          Component: ds.components!.QueryCtrl,\n        });\n      }\n      // Annotations\n      case 'annotations-query-ctrl': {\n        const baseUrl = scope.ctrl.currentDatasource.meta.baseUrl;\n        const pluginId = scope.ctrl.currentDatasource.meta.id;\n\n        return importDataSourcePlugin(scope.ctrl.currentDatasource.meta).then((dsPlugin) => {\n          return {\n            baseUrl,\n            name: 'annotations-query-ctrl-' + pluginId,\n            bindings: { annotation: '=', datasource: '=' },\n            attrs: {\n              annotation: 'ctrl.currentAnnotation',\n              datasource: 'ctrl.currentDatasource',\n            },\n            Component: dsPlugin.components.AnnotationsQueryCtrl,\n          };\n        });\n      }\n      // Datasource ConfigCtrl\n      case 'datasource-config-ctrl': {\n        const dsMeta = scope.ctrl.datasourceMeta;\n        const angularUrl = $location.url();\n        return importDataSourcePlugin(dsMeta).then((dsPlugin) => {\n          scope.$watch(\n            'ctrl.current',\n            () => {\n              // This watcher can trigger when we navigate away due to late digests\n              // This check is to stop onModelChanged from being called when navigating away\n              // as it triggers a redux action which comes before the angular $routeChangeSucces and\n              // This makes the bridgeSrv think location changed from redux before detecting it was actually\n              // changed from angular.\n              if (angularUrl === $location.url()) {\n                scope.onModelChanged(scope.ctrl.current);\n              }\n            },\n            true\n          );\n\n          return {\n            baseUrl: dsMeta.baseUrl,\n            name: 'ds-config-' + dsMeta.id,\n            bindings: { meta: '=', current: '=' },\n            attrs: { meta: 'ctrl.datasourceMeta', current: 'ctrl.current' },\n            Component: dsPlugin.angularConfigCtrl,\n          };\n        });\n      }\n      // AppConfigCtrl\n      case 'app-config-ctrl': {\n        const model = scope.ctrl.model;\n        return importAppPlugin(model).then((appPlugin) => {\n          return {\n            baseUrl: model.baseUrl,\n            name: 'app-config-' + model.id,\n            bindings: { appModel: '=', appEditCtrl: '=' },\n            attrs: { 'app-model': 'ctrl.model', 'app-edit-ctrl': 'ctrl' },\n            Component: appPlugin.angularConfigCtrl,\n          };\n        });\n      }\n      // Panel\n      case 'panel': {\n        return loadPanelComponentInfo(scope, attrs);\n      }\n      default: {\n        return Promise.reject({\n          message: 'Could not find component type: ' + attrs.type,\n        });\n      }\n    }\n  }\n\n  function appendAndCompile(scope: any, elem: JQuery, componentInfo: any) {\n    const child = angular.element(document.createElement(componentInfo.name));\n    each(componentInfo.attrs, (value, key) => {\n      child.attr(key, value);\n    });\n\n    $compile(child)(scope);\n    elem.empty();\n\n    // let a binding digest cycle complete before adding to dom\n    setTimeout(() => {\n      scope.$applyAsync(() => {\n        elem.append(child);\n        setTimeout(() => {\n          scope.$applyAsync(() => {\n            scope.$broadcast(PanelEvents.componentDidMount.name);\n          });\n        });\n      });\n    });\n  }\n\n  function registerPluginComponent(scope: any, elem: JQuery, attrs: any, componentInfo: any) {\n    if (componentInfo.notFound) {\n      elem.empty();\n      return;\n    }\n\n    if (!componentInfo.Component) {\n      throw {\n        message: 'Failed to find exported plugin component for ' + componentInfo.name,\n      };\n    }\n\n    if (!componentInfo.Component.registered) {\n      const directiveName = attrs.$normalize(componentInfo.name);\n      const directiveFn = getPluginComponentDirective(componentInfo);\n      coreModule.directive(directiveName, directiveFn);\n      componentInfo.Component.registered = true;\n    }\n\n    appendAndCompile(scope, elem, componentInfo);\n  }\n\n  return {\n    restrict: 'E',\n    link: (scope: any, elem: JQuery, attrs: any) => {\n      getModule(scope, attrs)\n        .then((componentInfo: any) => {\n          registerPluginComponent(scope, elem, attrs, componentInfo);\n        })\n        .catch((err: any) => {\n          console.error('Plugin component error', err);\n        });\n    },\n  };\n}\n\ncoreModule.directive('pluginComponent', pluginDirectiveLoader);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}