{"ast":null,"code":"const {\n  abs,\n  round,\n  pow\n} = Math;\nexport function roundDec(val, dec) {\n  return round(val * (dec = 10 ** dec)) / dec;\n}\nexport const fixedDec = new Map();\nexport function guessDec(num) {\n  return (('' + num).split('.')[1] || '').length;\n}\nexport function genIncrs(base, minExp, maxExp, mults) {\n  let incrs = [];\n  let multDec = mults.map(guessDec);\n\n  for (let exp = minExp; exp < maxExp; exp++) {\n    let expa = abs(exp);\n    let mag = roundDec(pow(base, exp), expa);\n\n    for (let i = 0; i < mults.length; i++) {\n      let _incr = mults[i] * mag;\n\n      let dec = (_incr >= 0 && exp >= 0 ? 0 : expa) + (exp >= multDec[i] ? 0 : multDec[i]);\n      let incr = roundDec(_incr, dec);\n      incrs.push(incr);\n      fixedDec.set(incr, dec);\n    }\n  }\n\n  return incrs;\n}\n\nconst onlyWhole = v => v % 1 === 0;\n\nconst allMults = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5]; // ...0.01, 0.02, 0.025, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5...\n\nexport const decIncrs = genIncrs(10, -16, 0, allMults); // 1, 2, 2.5, 3, 4, 5, 6, 7, 8, 9, 10, 20, 25, 30, 40, 50...\n\nexport const oneIncrs = genIncrs(10, 0, 16, allMults); // 1, 2,      3, 4, 5, 10, 20, 25, 50...\n\nexport const wholeIncrs = oneIncrs.filter(onlyWhole);\nexport const numIncrs = decIncrs.concat(oneIncrs);\nexport const niceLinearIncrs = decIncrs.concat(wholeIncrs);\nconst sec = 1 * 1e3;\nconst min = 60 * sec;\nconst hour = 60 * min;\nconst day = 24 * hour;\nconst year = 365 * day; // in milliseconds\n\nexport const niceTimeIncrs = [1, 2, 4, 5, 10, 20, 25, 40, 50, 100, 200, 250, 400, 500, sec, 2 * sec, 4 * sec, 5 * sec, 10 * sec, 15 * sec, 20 * sec, 30 * sec, min, 2 * min, 4 * min, 5 * min, 10 * min, 15 * min, 20 * min, 30 * min, hour, 2 * hour, 4 * hour, 6 * hour, 8 * hour, 12 * hour, 18 * hour, day, 2 * day, 3 * day, 4 * day, 5 * day, 6 * day, 7 * day, 10 * day, 15 * day, 30 * day, 45 * day, 60 * day, 90 * day, 180 * day, year, 2 * year, 3 * year, 4 * year, 5 * year, 6 * year, 7 * year, 8 * year, 9 * year, 10 * year];","map":{"version":3,"names":["abs","round","pow","Math","roundDec","val","dec","fixedDec","Map","guessDec","num","split","length","genIncrs","base","minExp","maxExp","mults","incrs","multDec","map","exp","expa","mag","i","_incr","incr","push","set","onlyWhole","v","allMults","decIncrs","oneIncrs","wholeIncrs","filter","numIncrs","concat","niceLinearIncrs","sec","min","hour","day","year","niceTimeIncrs"],"sources":["/home/soula/grafana/public/app/features/transformers/calculateHeatmap/utils.ts"],"sourcesContent":["const { abs, round, pow } = Math;\n\nexport function roundDec(val: number, dec: number) {\n  return round(val * (dec = 10 ** dec)) / dec;\n}\n\nexport const fixedDec = new Map();\n\nexport function guessDec(num: number) {\n  return (('' + num).split('.')[1] || '').length;\n}\n\nexport function genIncrs(base: number, minExp: number, maxExp: number, mults: number[]) {\n  let incrs = [];\n\n  let multDec = mults.map(guessDec);\n\n  for (let exp = minExp; exp < maxExp; exp++) {\n    let expa = abs(exp);\n    let mag = roundDec(pow(base, exp), expa);\n\n    for (let i = 0; i < mults.length; i++) {\n      let _incr = mults[i] * mag;\n      let dec = (_incr >= 0 && exp >= 0 ? 0 : expa) + (exp >= multDec[i] ? 0 : multDec[i]);\n      let incr = roundDec(_incr, dec);\n      incrs.push(incr);\n      fixedDec.set(incr, dec);\n    }\n  }\n\n  return incrs;\n}\n\nconst onlyWhole = (v: number) => v % 1 === 0;\n\nconst allMults = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5];\n\n// ...0.01, 0.02, 0.025, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5...\nexport const decIncrs = genIncrs(10, -16, 0, allMults);\n\n// 1, 2, 2.5, 3, 4, 5, 6, 7, 8, 9, 10, 20, 25, 30, 40, 50...\nexport const oneIncrs = genIncrs(10, 0, 16, allMults);\n\n// 1, 2,      3, 4, 5, 10, 20, 25, 50...\nexport const wholeIncrs = oneIncrs.filter(onlyWhole);\n\nexport const numIncrs = decIncrs.concat(oneIncrs);\n\nexport const niceLinearIncrs = decIncrs.concat(wholeIncrs);\n\nconst sec = 1 * 1e3;\nconst min = 60 * sec;\nconst hour = 60 * min;\nconst day = 24 * hour;\nconst year = 365 * day;\n\n// in milliseconds\nexport const niceTimeIncrs = [\n  1,\n  2,\n  4,\n  5,\n  10,\n  20,\n  25,\n  40,\n  50,\n  100,\n  200,\n  250,\n  400,\n  500,\n\n  sec,\n  2 * sec,\n  4 * sec,\n  5 * sec,\n  10 * sec,\n  15 * sec,\n  20 * sec,\n  30 * sec,\n\n  min,\n  2 * min,\n  4 * min,\n  5 * min,\n  10 * min,\n  15 * min,\n  20 * min,\n  30 * min,\n\n  hour,\n  2 * hour,\n  4 * hour,\n  6 * hour,\n  8 * hour,\n  12 * hour,\n  18 * hour,\n\n  day,\n  2 * day,\n  3 * day,\n  4 * day,\n  5 * day,\n  6 * day,\n  7 * day,\n  10 * day,\n  15 * day,\n  30 * day,\n  45 * day,\n  60 * day,\n  90 * day,\n  180 * day,\n\n  year,\n  2 * year,\n  3 * year,\n  4 * year,\n  5 * year,\n  6 * year,\n  7 * year,\n  8 * year,\n  9 * year,\n  10 * year,\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}