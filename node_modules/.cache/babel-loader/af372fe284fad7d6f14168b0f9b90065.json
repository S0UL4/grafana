{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { Select } from '@grafana/ui';\nimport { Field } from '../Field';\nimport { setMetricNamespace } from './setQueryValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst MetricNamespaceField = ({\n  metricNamespaces,\n  query,\n  variableOptionGroup,\n  onQueryChange\n}) => {\n  var _query$azureMonitor, _query$azureMonitor2;\n\n  const handleChange = useCallback(change => {\n    if (!change.value) {\n      return;\n    }\n\n    const newQuery = setMetricNamespace(query, change.value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query]);\n  const options = useMemo(() => [...metricNamespaces, variableOptionGroup], [metricNamespaces, variableOptionGroup]);\n  const optionValues = metricNamespaces.map(m => m.value.toLowerCase()).concat(variableOptionGroup.options.map(p => p.value));\n  const value = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.metricNamespace;\n\n  if (value && !optionValues.includes(value.toLowerCase())) {\n    options.push({\n      label: value,\n      value\n    });\n  }\n\n  return /*#__PURE__*/_jsx(Field, {\n    label: \"Metric namespace\",\n    children: /*#__PURE__*/_jsx(Select, {\n      inputId: \"azure-monitor-metrics-metric-namespace-field\",\n      value: (_query$azureMonitor2 = query.azureMonitor) === null || _query$azureMonitor2 === void 0 ? void 0 : _query$azureMonitor2.metricNamespace,\n      onChange: handleChange,\n      options: options,\n      width: 38,\n      allowCustomValue: true\n    })\n  });\n};\n\nexport default MetricNamespaceField;","map":{"version":3,"names":["React","useCallback","useMemo","Select","Field","setMetricNamespace","MetricNamespaceField","metricNamespaces","query","variableOptionGroup","onQueryChange","handleChange","change","value","newQuery","options","optionValues","map","m","toLowerCase","concat","p","azureMonitor","metricNamespace","includes","push","label"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricNamespaceField.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { Field } from '../Field';\n\nimport { setMetricNamespace } from './setQueryValue';\n\ninterface MetricNamespaceFieldProps extends AzureQueryEditorFieldProps {\n  metricNamespaces: AzureMonitorOption[];\n}\n\nconst MetricNamespaceField: React.FC<MetricNamespaceFieldProps> = ({\n  metricNamespaces,\n  query,\n  variableOptionGroup,\n  onQueryChange,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setMetricNamespace(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = useMemo(() => [...metricNamespaces, variableOptionGroup], [metricNamespaces, variableOptionGroup]);\n  const optionValues = metricNamespaces\n    .map((m) => m.value.toLowerCase())\n    .concat(variableOptionGroup.options.map((p) => p.value));\n  const value = query.azureMonitor?.metricNamespace;\n  if (value && !optionValues.includes(value.toLowerCase())) {\n    options.push({ label: value, value });\n  }\n\n  return (\n    <Field label=\"Metric namespace\">\n      <Select\n        inputId=\"azure-monitor-metrics-metric-namespace-field\"\n        value={query.azureMonitor?.metricNamespace}\n        onChange={handleChange}\n        options={options}\n        width={38}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default MetricNamespaceField;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAGA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,kBAAT,QAAmC,iBAAnC;;;AAMA,MAAMC,oBAAyD,GAAG,CAAC;EACjEC,gBADiE;EAEjEC,KAFiE;EAGjEC,mBAHiE;EAIjEC;AAJiE,CAAD,KAK5D;EAAA;;EACJ,MAAMC,YAAY,GAAGV,WAAW,CAC7BW,MAAD,IAAqC;IACnC,IAAI,CAACA,MAAM,CAACC,KAAZ,EAAmB;MACjB;IACD;;IAED,MAAMC,QAAQ,GAAGT,kBAAkB,CAACG,KAAD,EAAQI,MAAM,CAACC,KAAf,CAAnC;IACAH,aAAa,CAACI,QAAD,CAAb;EACD,CAR6B,EAS9B,CAACJ,aAAD,EAAgBF,KAAhB,CAT8B,CAAhC;EAYA,MAAMO,OAAO,GAAGb,OAAO,CAAC,MAAM,CAAC,GAAGK,gBAAJ,EAAsBE,mBAAtB,CAAP,EAAmD,CAACF,gBAAD,EAAmBE,mBAAnB,CAAnD,CAAvB;EACA,MAAMO,YAAY,GAAGT,gBAAgB,CAClCU,GADkB,CACbC,CAAD,IAAOA,CAAC,CAACL,KAAF,CAAQM,WAAR,EADO,EAElBC,MAFkB,CAEXX,mBAAmB,CAACM,OAApB,CAA4BE,GAA5B,CAAiCI,CAAD,IAAOA,CAAC,CAACR,KAAzC,CAFW,CAArB;EAGA,MAAMA,KAAK,0BAAGL,KAAK,CAACc,YAAT,wDAAG,oBAAoBC,eAAlC;;EACA,IAAIV,KAAK,IAAI,CAACG,YAAY,CAACQ,QAAb,CAAsBX,KAAK,CAACM,WAAN,EAAtB,CAAd,EAA0D;IACxDJ,OAAO,CAACU,IAAR,CAAa;MAAEC,KAAK,EAAEb,KAAT;MAAgBA;IAAhB,CAAb;EACD;;EAED,oBACE,KAAC,KAAD;IAAO,KAAK,EAAC,kBAAb;IAAA,uBACE,KAAC,MAAD;MACE,OAAO,EAAC,8CADV;MAEE,KAAK,0BAAEL,KAAK,CAACc,YAAR,yDAAE,qBAAoBC,eAF7B;MAGE,QAAQ,EAAEZ,YAHZ;MAIE,OAAO,EAAEI,OAJX;MAKE,KAAK,EAAE,EALT;MAME,gBAAgB;IANlB;EADF,EADF;AAYD,CAvCD;;AAyCA,eAAeT,oBAAf"},"metadata":{},"sourceType":"module"}