{"ast":null,"code":"var _br, _Button;\n\nimport React, { useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Button, Field, Form, Input } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst navModel = {\n  main: {\n    icon: 'grafana',\n    text: 'Invite',\n    subTitle: 'Register your Grafana account',\n    breadcrumbs: [{\n      title: 'Login',\n      url: 'login'\n    }]\n  },\n  node: {\n    text: ''\n  }\n};\nexport const SignupInvitedPage = ({\n  match\n}) => {\n  const code = match.params.code;\n  const [initFormModel, setInitFormModel] = useState();\n  const [greeting, setGreeting] = useState();\n  const [invitedBy, setInvitedBy] = useState();\n  useAsync(async () => {\n    const invite = await getBackendSrv().get(`/api/user/invite/${code}`);\n    setInitFormModel({\n      email: invite.email,\n      name: invite.name,\n      username: invite.email\n    });\n    setGreeting(invite.name || invite.email || invite.username);\n    setInvitedBy(invite.invitedBy);\n  }, [code]);\n\n  const onSubmit = async formData => {\n    await getBackendSrv().post('/api/user/invite/complete', Object.assign({}, formData, {\n      inviteCode: code\n    }));\n    window.location.href = getConfig().appSubUrl + '/';\n  };\n\n  if (!initFormModel) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      children: [/*#__PURE__*/_jsxs(\"h3\", {\n        className: \"page-sub-heading\",\n        children: [\"Hello \", greeting || 'there', \".\"]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"modal-tagline p-b-2\",\n        children: [/*#__PURE__*/_jsx(\"em\", {\n          children: invitedBy || 'Someone'\n        }), \" has invited you to join Grafana and the organization\", ' ', /*#__PURE__*/_jsx(\"span\", {\n          className: \"highlight-word\",\n          children: contextSrv.user.orgName\n        }), _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), \"Please complete the following and choose a password to accept your invitation and continue:\"]\n      }), /*#__PURE__*/_jsx(Form, {\n        defaultValues: initFormModel,\n        onSubmit: onSubmit,\n        children: ({\n          register,\n          errors\n        }) => /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(Field, {\n            invalid: !!errors.email,\n            error: errors.email && errors.email.message,\n            label: \"Email\",\n            children: /*#__PURE__*/_jsx(Input, Object.assign({\n              placeholder: \"email@example.com\"\n            }, register('email', {\n              required: 'Email is required',\n              pattern: {\n                value: /^\\S+@\\S+$/,\n                message: 'Email is invalid'\n              }\n            })))\n          }), /*#__PURE__*/_jsx(Field, {\n            invalid: !!errors.name,\n            error: errors.name && errors.name.message,\n            label: \"Name\",\n            children: /*#__PURE__*/_jsx(Input, Object.assign({\n              placeholder: \"Name (optional)\"\n            }, register('name')))\n          }), /*#__PURE__*/_jsx(Field, {\n            invalid: !!errors.username,\n            error: errors.username && errors.username.message,\n            label: \"Username\",\n            children: /*#__PURE__*/_jsx(Input, Object.assign({}, register('username', {\n              required: 'Username is required'\n            }), {\n              placeholder: \"Username\"\n            }))\n          }), /*#__PURE__*/_jsx(Field, {\n            invalid: !!errors.password,\n            error: errors.password && errors.password.message,\n            label: \"Password\",\n            children: /*#__PURE__*/_jsx(Input, Object.assign({}, register('password', {\n              required: 'Password is required'\n            }), {\n              type: \"password\",\n              placeholder: \"Password\"\n            }))\n          }), _Button || (_Button = /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            children: \"Sign up\"\n          }))]\n        })\n      })]\n    })\n  });\n};\nexport default SignupInvitedPage;","map":{"version":3,"names":["React","useState","useAsync","getBackendSrv","Button","Field","Form","Input","Page","getConfig","contextSrv","navModel","main","icon","text","subTitle","breadcrumbs","title","url","node","SignupInvitedPage","match","code","params","initFormModel","setInitFormModel","greeting","setGreeting","invitedBy","setInvitedBy","invite","get","email","name","username","onSubmit","formData","post","inviteCode","window","location","href","appSubUrl","user","orgName","register","errors","message","required","pattern","value","password"],"sources":["/home/soula/grafana/public/app/features/invites/SignupInvited.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Button, Field, Form, Input } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\ninterface FormModel {\n  email: string;\n  name?: string;\n  username: string;\n  password?: string;\n}\n\nconst navModel = {\n  main: {\n    icon: 'grafana',\n    text: 'Invite',\n    subTitle: 'Register your Grafana account',\n    breadcrumbs: [{ title: 'Login', url: 'login' }],\n  },\n  node: {\n    text: '',\n  },\n};\n\nexport interface Props extends GrafanaRouteComponentProps<{ code: string }> {}\n\nexport const SignupInvitedPage: FC<Props> = ({ match }) => {\n  const code = match.params.code;\n  const [initFormModel, setInitFormModel] = useState<FormModel>();\n  const [greeting, setGreeting] = useState<string>();\n  const [invitedBy, setInvitedBy] = useState<string>();\n\n  useAsync(async () => {\n    const invite = await getBackendSrv().get(`/api/user/invite/${code}`);\n\n    setInitFormModel({\n      email: invite.email,\n      name: invite.name,\n      username: invite.email,\n    });\n\n    setGreeting(invite.name || invite.email || invite.username);\n    setInvitedBy(invite.invitedBy);\n  }, [code]);\n\n  const onSubmit = async (formData: FormModel) => {\n    await getBackendSrv().post('/api/user/invite/complete', { ...formData, inviteCode: code });\n    window.location.href = getConfig().appSubUrl + '/';\n  };\n\n  if (!initFormModel) {\n    return null;\n  }\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">Hello {greeting || 'there'}.</h3>\n\n        <div className=\"modal-tagline p-b-2\">\n          <em>{invitedBy || 'Someone'}</em> has invited you to join Grafana and the organization{' '}\n          <span className=\"highlight-word\">{contextSrv.user.orgName}</span>\n          <br />\n          Please complete the following and choose a password to accept your invitation and continue:\n        </div>\n        <Form defaultValues={initFormModel} onSubmit={onSubmit}>\n          {({ register, errors }) => (\n            <>\n              <Field invalid={!!errors.email} error={errors.email && errors.email.message} label=\"Email\">\n                <Input\n                  placeholder=\"email@example.com\"\n                  {...register('email', {\n                    required: 'Email is required',\n                    pattern: {\n                      value: /^\\S+@\\S+$/,\n                      message: 'Email is invalid',\n                    },\n                  })}\n                />\n              </Field>\n              <Field invalid={!!errors.name} error={errors.name && errors.name.message} label=\"Name\">\n                <Input placeholder=\"Name (optional)\" {...register('name')} />\n              </Field>\n              <Field invalid={!!errors.username} error={errors.username && errors.username.message} label=\"Username\">\n                <Input {...register('username', { required: 'Username is required' })} placeholder=\"Username\" />\n              </Field>\n              <Field invalid={!!errors.password} error={errors.password && errors.password.message} label=\"Password\">\n                <Input\n                  {...register('password', { required: 'Password is required' })}\n                  type=\"password\"\n                  placeholder=\"Password\"\n                />\n              </Field>\n\n              <Button type=\"submit\">Sign up</Button>\n            </>\n          )}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default SignupInvitedPage;\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,KAA9B,QAA2C,aAA3C;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,eAA3B;;;;AAUA,MAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE;IACJC,IAAI,EAAE,SADF;IAEJC,IAAI,EAAE,QAFF;IAGJC,QAAQ,EAAE,+BAHN;IAIJC,WAAW,EAAE,CAAC;MAAEC,KAAK,EAAE,OAAT;MAAkBC,GAAG,EAAE;IAAvB,CAAD;EAJT,CADS;EAOfC,IAAI,EAAE;IACJL,IAAI,EAAE;EADF;AAPS,CAAjB;AAcA,OAAO,MAAMM,iBAA4B,GAAG,CAAC;EAAEC;AAAF,CAAD,KAAe;EACzD,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaD,IAA1B;EACA,MAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,EAAlD;EACA,MAAM,CAACyB,QAAD,EAAWC,WAAX,IAA0B1B,QAAQ,EAAxC;EACA,MAAM,CAAC2B,SAAD,EAAYC,YAAZ,IAA4B5B,QAAQ,EAA1C;EAEAC,QAAQ,CAAC,YAAY;IACnB,MAAM4B,MAAM,GAAG,MAAM3B,aAAa,GAAG4B,GAAhB,CAAqB,oBAAmBT,IAAK,EAA7C,CAArB;IAEAG,gBAAgB,CAAC;MACfO,KAAK,EAAEF,MAAM,CAACE,KADC;MAEfC,IAAI,EAAEH,MAAM,CAACG,IAFE;MAGfC,QAAQ,EAAEJ,MAAM,CAACE;IAHF,CAAD,CAAhB;IAMAL,WAAW,CAACG,MAAM,CAACG,IAAP,IAAeH,MAAM,CAACE,KAAtB,IAA+BF,MAAM,CAACI,QAAvC,CAAX;IACAL,YAAY,CAACC,MAAM,CAACF,SAAR,CAAZ;EACD,CAXO,EAWL,CAACN,IAAD,CAXK,CAAR;;EAaA,MAAMa,QAAQ,GAAG,MAAOC,QAAP,IAA+B;IAC9C,MAAMjC,aAAa,GAAGkC,IAAhB,CAAqB,2BAArB,oBAAuDD,QAAvD;MAAiEE,UAAU,EAAEhB;IAA7E,GAAN;IACAiB,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBhC,SAAS,GAAGiC,SAAZ,GAAwB,GAA/C;EACD,CAHD;;EAKA,IAAI,CAAClB,aAAL,EAAoB;IAClB,OAAO,IAAP;EACD;;EAED,oBACE,KAAC,IAAD;IAAM,QAAQ,EAAEb,QAAhB;IAAA,uBACE,MAAC,IAAD,CAAM,QAAN;MAAA,wBACE;QAAI,SAAS,EAAC,kBAAd;QAAA,qBAAwCe,QAAQ,IAAI,OAApD;MAAA,EADF,eAGE;QAAK,SAAS,EAAC,qBAAf;QAAA,wBACE;UAAA,UAAKE,SAAS,IAAI;QAAlB,EADF,2DACyF,GADzF,eAEE;UAAM,SAAS,EAAC,gBAAhB;UAAA,UAAkClB,UAAU,CAACiC,IAAX,CAAgBC;QAAlD,EAFF,6BAGE,cAHF;MAAA,EAHF,eASE,KAAC,IAAD;QAAM,aAAa,EAAEpB,aAArB;QAAoC,QAAQ,EAAEW,QAA9C;QAAA,UACG,CAAC;UAAEU,QAAF;UAAYC;QAAZ,CAAD,kBACC;UAAA,wBACE,KAAC,KAAD;YAAO,OAAO,EAAE,CAAC,CAACA,MAAM,CAACd,KAAzB;YAAgC,KAAK,EAAEc,MAAM,CAACd,KAAP,IAAgBc,MAAM,CAACd,KAAP,CAAae,OAApE;YAA6E,KAAK,EAAC,OAAnF;YAAA,uBACE,KAAC,KAAD;cACE,WAAW,EAAC;YADd,GAEMF,QAAQ,CAAC,OAAD,EAAU;cACpBG,QAAQ,EAAE,mBADU;cAEpBC,OAAO,EAAE;gBACPC,KAAK,EAAE,WADA;gBAEPH,OAAO,EAAE;cAFF;YAFW,CAAV,CAFd;UADF,EADF,eAaE,KAAC,KAAD;YAAO,OAAO,EAAE,CAAC,CAACD,MAAM,CAACb,IAAzB;YAA+B,KAAK,EAAEa,MAAM,CAACb,IAAP,IAAea,MAAM,CAACb,IAAP,CAAYc,OAAjE;YAA0E,KAAK,EAAC,MAAhF;YAAA,uBACE,KAAC,KAAD;cAAO,WAAW,EAAC;YAAnB,GAAyCF,QAAQ,CAAC,MAAD,CAAjD;UADF,EAbF,eAgBE,KAAC,KAAD;YAAO,OAAO,EAAE,CAAC,CAACC,MAAM,CAACZ,QAAzB;YAAmC,KAAK,EAAEY,MAAM,CAACZ,QAAP,IAAmBY,MAAM,CAACZ,QAAP,CAAgBa,OAA7E;YAAsF,KAAK,EAAC,UAA5F;YAAA,uBACE,KAAC,KAAD,oBAAWF,QAAQ,CAAC,UAAD,EAAa;cAAEG,QAAQ,EAAE;YAAZ,CAAb,CAAnB;cAAuE,WAAW,EAAC;YAAnF;UADF,EAhBF,eAmBE,KAAC,KAAD;YAAO,OAAO,EAAE,CAAC,CAACF,MAAM,CAACK,QAAzB;YAAmC,KAAK,EAAEL,MAAM,CAACK,QAAP,IAAmBL,MAAM,CAACK,QAAP,CAAgBJ,OAA7E;YAAsF,KAAK,EAAC,UAA5F;YAAA,uBACE,KAAC,KAAD,oBACMF,QAAQ,CAAC,UAAD,EAAa;cAAEG,QAAQ,EAAE;YAAZ,CAAb,CADd;cAEE,IAAI,EAAC,UAFP;cAGE,WAAW,EAAC;YAHd;UADF,EAnBF,qCA2BE,KAAC,MAAD;YAAQ,IAAI,EAAC,QAAb;YAAA;UAAA,EA3BF;QAAA;MAFJ,EATF;IAAA;EADF,EADF;AA+CD,CA3EM;AA6EP,eAAe5B,iBAAf"},"metadata":{},"sourceType":"module"}