{"ast":null,"code":"import $ from 'jquery';\nimport _, { isFunction } from 'lodash'; // eslint-disable-line lodash/import-scope\n\nimport moment from 'moment'; // eslint-disable-line no-restricted-imports\n\nimport { AppEvents, dateMath } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport kbn from 'app/core/utils/kbn';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { appEvents } from '../../../core/core';\nimport { getDashboardSrv } from './DashboardSrv';\nexport class DashboardLoaderSrv {\n  constructor() {}\n\n  _dashboardLoadFailed(title, snapshot) {\n    snapshot = snapshot || false;\n    return {\n      meta: {\n        canStar: false,\n        isSnapshot: snapshot,\n        canDelete: false,\n        canSave: false,\n        canEdit: false,\n        dashboardNotFound: true\n      },\n      dashboard: {\n        title\n      }\n    };\n  }\n\n  loadDashboard(type, slug, uid) {\n    let promise;\n\n    if (type === 'script') {\n      promise = this._loadScriptedDashboard(slug);\n    } else if (type === 'snapshot') {\n      promise = backendSrv.get('/api/snapshots/' + slug).catch(() => {\n        return this._dashboardLoadFailed('Snapshot not found', true);\n      });\n    } else if (type === 'ds') {\n      promise = this._loadFromDatasource(slug); // explore dashboards as code\n    } else if (type === 'public') {\n      promise = backendSrv.getPublicDashboardByUid(uid).then(result => {\n        return result;\n      }).catch(() => {\n        return this._dashboardLoadFailed('Public Dashboard Not found', true);\n      });\n    } else {\n      promise = backendSrv.getDashboardByUid(uid).then(result => {\n        if (result.meta.isFolder) {\n          appEvents.emit(AppEvents.alertError, ['Dashboard not found']);\n          throw new Error('Dashboard not found');\n        }\n\n        return result;\n      }).catch(() => {\n        return this._dashboardLoadFailed('Not found', true);\n      });\n    }\n\n    promise.then(result => {\n      if (result.meta.dashboardNotFound !== true) {\n        impressionSrv.addDashboardImpression(result.dashboard.id);\n      }\n\n      return result;\n    });\n    return promise;\n  }\n\n  _loadScriptedDashboard(file) {\n    const url = 'public/dashboards/' + file.replace(/\\.(?!js)/, '/') + '?' + new Date().getTime();\n    return getBackendSrv().get(url).then(this._executeScript.bind(this)).then(result => {\n      return {\n        meta: {\n          fromScript: true,\n          canDelete: false,\n          canSave: false,\n          canStar: false\n        },\n        dashboard: result.data\n      };\n    }, err => {\n      console.error('Script dashboard error ' + err);\n      appEvents.emit(AppEvents.alertError, ['Script Error', 'Please make sure it exists and returns a valid dashboard']);\n      return this._dashboardLoadFailed('Scripted dashboard');\n    });\n  }\n  /**\n   * This is a temporary solution to load dashboards dynamically from a datasource\n   * Eventually this should become a plugin type or a special handler in the dashboard\n   * loading code\n   */\n\n\n  async _loadFromDatasource(dsid) {\n    const ds = await getDatasourceSrv().get(dsid);\n\n    if (!ds) {\n      return Promise.reject('can not find datasource: ' + dsid);\n    }\n\n    const params = new URLSearchParams(window.location.search);\n    const path = params.get('path');\n\n    if (!path) {\n      return Promise.reject('expecting path parameter');\n    }\n\n    const queryParams = {};\n    params.forEach((value, key) => {\n      queryParams[key] = value;\n    });\n    return getBackendSrv().get(`/api/datasources/${ds.id}/resources/${path}`, queryParams).then(data => {\n      return {\n        meta: {\n          fromScript: true,\n          canDelete: false,\n          canSave: false,\n          canStar: false\n        },\n        dashboard: data\n      };\n    });\n  }\n\n  _executeScript(result) {\n    const services = {\n      dashboardSrv: getDashboardSrv(),\n      datasourceSrv: getDatasourceSrv()\n    };\n    const scriptFunc = new Function('ARGS', 'kbn', 'dateMath', '_', 'moment', 'window', 'document', '$', 'jQuery', 'services', result);\n    const scriptResult = scriptFunc(locationService.getSearchObject(), kbn, dateMath, _, moment, window, document, $, $, services); // Handle async dashboard scripts\n\n    if (isFunction(scriptResult)) {\n      return new Promise(resolve => {\n        scriptResult(dashboard => {\n          resolve({\n            data: dashboard\n          });\n        });\n      });\n    }\n\n    return {\n      data: scriptResult\n    };\n  }\n\n}\nlet dashboardLoaderSrv = new DashboardLoaderSrv();\nexport { dashboardLoaderSrv };\n/** @internal\n * Used for tests only\n */\n\nexport const setDashboardLoaderSrv = srv => {\n  if (process.env.NODE_ENV !== 'test') {\n    throw new Error('dashboardLoaderSrv can be only overriden in test environment');\n  }\n\n  dashboardLoaderSrv = srv;\n};","map":{"version":3,"names":["$","_","isFunction","moment","AppEvents","dateMath","getBackendSrv","locationService","backendSrv","impressionSrv","kbn","getDatasourceSrv","appEvents","getDashboardSrv","DashboardLoaderSrv","constructor","_dashboardLoadFailed","title","snapshot","meta","canStar","isSnapshot","canDelete","canSave","canEdit","dashboardNotFound","dashboard","loadDashboard","type","slug","uid","promise","_loadScriptedDashboard","get","catch","_loadFromDatasource","getPublicDashboardByUid","then","result","getDashboardByUid","isFolder","emit","alertError","Error","addDashboardImpression","id","file","url","replace","Date","getTime","_executeScript","bind","fromScript","data","err","console","error","dsid","ds","Promise","reject","params","URLSearchParams","window","location","search","path","queryParams","forEach","value","key","services","dashboardSrv","datasourceSrv","scriptFunc","Function","scriptResult","getSearchObject","document","resolve","dashboardLoaderSrv","setDashboardLoaderSrv","srv","process","env","NODE_ENV"],"sources":["/home/soula/grafana/public/app/features/dashboard/services/DashboardLoaderSrv.ts"],"sourcesContent":["import $ from 'jquery';\nimport _, { isFunction } from 'lodash'; // eslint-disable-line lodash/import-scope\nimport moment from 'moment'; // eslint-disable-line no-restricted-imports\n\nimport { AppEvents, dateMath, UrlQueryValue } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport impressionSrv from 'app/core/services/impression_srv';\nimport kbn from 'app/core/utils/kbn';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { appEvents } from '../../../core/core';\n\nimport { getDashboardSrv } from './DashboardSrv';\n\nexport class DashboardLoaderSrv {\n  constructor() {}\n  _dashboardLoadFailed(title: string, snapshot?: boolean) {\n    snapshot = snapshot || false;\n    return {\n      meta: {\n        canStar: false,\n        isSnapshot: snapshot,\n        canDelete: false,\n        canSave: false,\n        canEdit: false,\n        dashboardNotFound: true,\n      },\n      dashboard: { title },\n    };\n  }\n\n  loadDashboard(type: UrlQueryValue, slug: any, uid: any) {\n    let promise;\n\n    if (type === 'script') {\n      promise = this._loadScriptedDashboard(slug);\n    } else if (type === 'snapshot') {\n      promise = backendSrv.get('/api/snapshots/' + slug).catch(() => {\n        return this._dashboardLoadFailed('Snapshot not found', true);\n      });\n    } else if (type === 'ds') {\n      promise = this._loadFromDatasource(slug); // explore dashboards as code\n    } else if (type === 'public') {\n      promise = backendSrv\n        .getPublicDashboardByUid(uid)\n        .then((result: any) => {\n          return result;\n        })\n        .catch(() => {\n          return this._dashboardLoadFailed('Public Dashboard Not found', true);\n        });\n    } else {\n      promise = backendSrv\n        .getDashboardByUid(uid)\n        .then((result: any) => {\n          if (result.meta.isFolder) {\n            appEvents.emit(AppEvents.alertError, ['Dashboard not found']);\n            throw new Error('Dashboard not found');\n          }\n          return result;\n        })\n        .catch(() => {\n          return this._dashboardLoadFailed('Not found', true);\n        });\n    }\n\n    promise.then((result: any) => {\n      if (result.meta.dashboardNotFound !== true) {\n        impressionSrv.addDashboardImpression(result.dashboard.id);\n      }\n\n      return result;\n    });\n\n    return promise;\n  }\n\n  _loadScriptedDashboard(file: string) {\n    const url = 'public/dashboards/' + file.replace(/\\.(?!js)/, '/') + '?' + new Date().getTime();\n\n    return getBackendSrv()\n      .get(url)\n      .then(this._executeScript.bind(this))\n      .then(\n        (result: any) => {\n          return {\n            meta: {\n              fromScript: true,\n              canDelete: false,\n              canSave: false,\n              canStar: false,\n            },\n            dashboard: result.data,\n          };\n        },\n        (err: any) => {\n          console.error('Script dashboard error ' + err);\n          appEvents.emit(AppEvents.alertError, [\n            'Script Error',\n            'Please make sure it exists and returns a valid dashboard',\n          ]);\n          return this._dashboardLoadFailed('Scripted dashboard');\n        }\n      );\n  }\n\n  /**\n   * This is a temporary solution to load dashboards dynamically from a datasource\n   * Eventually this should become a plugin type or a special handler in the dashboard\n   * loading code\n   */\n  async _loadFromDatasource(dsid: string) {\n    const ds = await getDatasourceSrv().get(dsid);\n    if (!ds) {\n      return Promise.reject('can not find datasource: ' + dsid);\n    }\n\n    const params = new URLSearchParams(window.location.search);\n    const path = params.get('path');\n    if (!path) {\n      return Promise.reject('expecting path parameter');\n    }\n\n    const queryParams: { [key: string]: any } = {};\n\n    params.forEach((value, key) => {\n      queryParams[key] = value;\n    });\n\n    return getBackendSrv()\n      .get(`/api/datasources/${ds.id}/resources/${path}`, queryParams)\n      .then((data) => {\n        return {\n          meta: {\n            fromScript: true,\n            canDelete: false,\n            canSave: false,\n            canStar: false,\n          },\n          dashboard: data,\n        };\n      });\n  }\n\n  _executeScript(result: any) {\n    const services = {\n      dashboardSrv: getDashboardSrv(),\n      datasourceSrv: getDatasourceSrv(),\n    };\n    const scriptFunc = new Function(\n      'ARGS',\n      'kbn',\n      'dateMath',\n      '_',\n      'moment',\n      'window',\n      'document',\n      '$',\n      'jQuery',\n      'services',\n      result\n    );\n    const scriptResult = scriptFunc(\n      locationService.getSearchObject(),\n      kbn,\n      dateMath,\n      _,\n      moment,\n      window,\n      document,\n      $,\n      $,\n      services\n    );\n\n    // Handle async dashboard scripts\n    if (isFunction(scriptResult)) {\n      return new Promise((resolve) => {\n        scriptResult((dashboard: any) => {\n          resolve({ data: dashboard });\n        });\n      });\n    }\n\n    return { data: scriptResult };\n  }\n}\n\nlet dashboardLoaderSrv = new DashboardLoaderSrv();\nexport { dashboardLoaderSrv };\n\n/** @internal\n * Used for tests only\n */\nexport const setDashboardLoaderSrv = (srv: DashboardLoaderSrv) => {\n  if (process.env.NODE_ENV !== 'test') {\n    throw new Error('dashboardLoaderSrv can be only overriden in test environment');\n  }\n  dashboardLoaderSrv = srv;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}