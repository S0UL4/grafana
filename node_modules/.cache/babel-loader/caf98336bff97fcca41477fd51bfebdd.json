{"ast":null,"code":"var _Icon;\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { Button, ButtonSelect, Icon, InlineFieldRow, Input, Select, useStyles } from '@grafana/ui';\nimport alertDef, { EvalFunction } from '../../alerting/state/alertDef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst reducerFunctions = alertDef.reducerTypes.map(rt => ({\n  label: rt.text,\n  value: rt.value\n}));\nconst evalOperators = alertDef.evalOperators.map(eo => ({\n  label: eo.text,\n  value: eo.value\n}));\nconst evalFunctions = alertDef.evalFunctions.map(ef => ({\n  label: ef.text,\n  value: ef.value\n}));\nexport const Condition = ({\n  condition,\n  index,\n  onChange,\n  onRemoveCondition,\n  refIds\n}) => {\n  const styles = useStyles(getStyles);\n\n  const onEvalOperatorChange = evalOperator => {\n    onChange(Object.assign({}, condition, {\n      operator: {\n        type: evalOperator.value\n      }\n    }));\n  };\n\n  const onReducerFunctionChange = conditionFunction => {\n    onChange(Object.assign({}, condition, {\n      reducer: {\n        type: conditionFunction.value,\n        params: []\n      }\n    }));\n  };\n\n  const onRefIdChange = refId => {\n    onChange(Object.assign({}, condition, {\n      query: {\n        params: [refId.value]\n      }\n    }));\n  };\n\n  const onEvalFunctionChange = evalFunction => {\n    onChange(Object.assign({}, condition, {\n      evaluator: {\n        params: condition.evaluator.params,\n        type: evalFunction.value\n      }\n    }));\n  };\n\n  const onEvaluateValueChange = (event, index) => {\n    const newValue = parseFloat(event.currentTarget.value);\n    const newParams = [...condition.evaluator.params];\n    newParams[index] = newValue;\n    onChange(Object.assign({}, condition, {\n      evaluator: Object.assign({}, condition.evaluator, {\n        params: newParams\n      })\n    }));\n  };\n\n  const buttonWidth = css`\n    width: 60px;\n  `;\n  const isRange = condition.evaluator.type === EvalFunction.IsWithinRange || condition.evaluator.type === EvalFunction.IsOutsideRange;\n  return /*#__PURE__*/_jsxs(InlineFieldRow, {\n    children: [index === 0 ? /*#__PURE__*/_jsx(\"div\", {\n      className: cx(styles.button, buttonWidth),\n      children: \"WHEN\"\n    }) : /*#__PURE__*/_jsx(ButtonSelect, {\n      className: cx(styles.buttonSelectText, buttonWidth),\n      options: evalOperators,\n      onChange: onEvalOperatorChange,\n      value: evalOperators.find(ea => ea.value === condition.operator.type)\n    }), /*#__PURE__*/_jsx(Select, {\n      options: reducerFunctions,\n      onChange: onReducerFunctionChange,\n      width: 20,\n      value: reducerFunctions.find(rf => rf.value === condition.reducer.type)\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.button,\n      children: \"OF\"\n    }), /*#__PURE__*/_jsx(Select, {\n      onChange: onRefIdChange,\n      options: refIds,\n      width: 15,\n      value: refIds.find(r => r.value === condition.query.params[0])\n    }), /*#__PURE__*/_jsx(ButtonSelect, {\n      className: styles.buttonSelectText,\n      options: evalFunctions,\n      onChange: onEvalFunctionChange,\n      value: evalFunctions.find(ef => ef.value === condition.evaluator.type)\n    }), isRange ? /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Input, {\n        type: \"number\",\n        width: 10,\n        onChange: event => onEvaluateValueChange(event, 0),\n        value: condition.evaluator.params[0]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.button,\n        children: \"TO\"\n      }), /*#__PURE__*/_jsx(Input, {\n        type: \"number\",\n        width: 10,\n        onChange: event => onEvaluateValueChange(event, 1),\n        value: condition.evaluator.params[1]\n      })]\n    }) : condition.evaluator.type !== EvalFunction.HasNoValue ? /*#__PURE__*/_jsx(Input, {\n      type: \"number\",\n      width: 10,\n      onChange: event => onEvaluateValueChange(event, 0),\n      value: condition.evaluator.params[0]\n    }) : null, /*#__PURE__*/_jsx(Button, {\n      variant: \"secondary\",\n      type: \"button\",\n      onClick: () => onRemoveCondition(index),\n      children: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n        name: \"trash-alt\"\n      }))\n    })]\n  });\n};\n\nconst getStyles = theme => {\n  const buttonStyle = css`\n    color: ${theme.colors.textBlue};\n    font-size: ${theme.typography.size.sm};\n  `;\n  return {\n    buttonSelectText: buttonStyle,\n    button: cx(css`\n        display: flex;\n        align-items: center;\n        border-radius: ${theme.border.radius.sm};\n        font-weight: ${theme.typography.weight.semibold};\n        border: 1px solid ${theme.colors.border1};\n        white-space: nowrap;\n        padding: 0 ${theme.spacing.sm};\n        background-color: ${theme.colors.bodyBg};\n      `, buttonStyle)\n  };\n};","map":{"version":3,"names":["css","cx","React","Button","ButtonSelect","Icon","InlineFieldRow","Input","Select","useStyles","alertDef","EvalFunction","reducerFunctions","reducerTypes","map","rt","label","text","value","evalOperators","eo","evalFunctions","ef","Condition","condition","index","onChange","onRemoveCondition","refIds","styles","getStyles","onEvalOperatorChange","evalOperator","operator","type","onReducerFunctionChange","conditionFunction","reducer","params","onRefIdChange","refId","query","onEvalFunctionChange","evalFunction","evaluator","onEvaluateValueChange","event","newValue","parseFloat","currentTarget","newParams","buttonWidth","isRange","IsWithinRange","IsOutsideRange","button","buttonSelectText","find","ea","rf","r","HasNoValue","theme","buttonStyle","colors","textBlue","typography","size","sm","border","radius","weight","semibold","border1","spacing","bodyBg"],"sources":["/home/soula/grafana/public/app/features/expressions/components/Condition.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { FC, FormEvent } from 'react';\n\nimport { GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { Button, ButtonSelect, Icon, InlineFieldRow, Input, Select, useStyles } from '@grafana/ui';\n\nimport alertDef, { EvalFunction } from '../../alerting/state/alertDef';\nimport { ClassicCondition, ReducerType } from '../types';\n\ninterface Props {\n  condition: ClassicCondition;\n  onChange: (condition: ClassicCondition) => void;\n  onRemoveCondition: (id: number) => void;\n  index: number;\n  refIds: Array<SelectableValue<string>>;\n}\n\nconst reducerFunctions = alertDef.reducerTypes.map((rt) => ({ label: rt.text, value: rt.value }));\nconst evalOperators = alertDef.evalOperators.map((eo) => ({ label: eo.text, value: eo.value }));\nconst evalFunctions = alertDef.evalFunctions.map((ef) => ({ label: ef.text, value: ef.value }));\n\nexport const Condition: FC<Props> = ({ condition, index, onChange, onRemoveCondition, refIds }) => {\n  const styles = useStyles(getStyles);\n\n  const onEvalOperatorChange = (evalOperator: SelectableValue<string>) => {\n    onChange({\n      ...condition,\n      operator: { type: evalOperator.value! },\n    });\n  };\n\n  const onReducerFunctionChange = (conditionFunction: SelectableValue<string>) => {\n    onChange({\n      ...condition,\n      reducer: { type: conditionFunction.value! as ReducerType, params: [] },\n    });\n  };\n\n  const onRefIdChange = (refId: SelectableValue<string>) => {\n    onChange({\n      ...condition,\n      query: { params: [refId.value!] },\n    });\n  };\n\n  const onEvalFunctionChange = (evalFunction: SelectableValue<EvalFunction>) => {\n    onChange({\n      ...condition,\n      evaluator: { params: condition.evaluator.params, type: evalFunction.value! },\n    });\n  };\n\n  const onEvaluateValueChange = (event: FormEvent<HTMLInputElement>, index: number) => {\n    const newValue = parseFloat(event.currentTarget.value);\n    const newParams = [...condition.evaluator.params];\n    newParams[index] = newValue;\n\n    onChange({\n      ...condition,\n      evaluator: { ...condition.evaluator, params: newParams },\n    });\n  };\n\n  const buttonWidth = css`\n    width: 60px;\n  `;\n\n  const isRange =\n    condition.evaluator.type === EvalFunction.IsWithinRange || condition.evaluator.type === EvalFunction.IsOutsideRange;\n\n  return (\n    <InlineFieldRow>\n      {index === 0 ? (\n        <div className={cx(styles.button, buttonWidth)}>WHEN</div>\n      ) : (\n        <ButtonSelect\n          className={cx(styles.buttonSelectText, buttonWidth)}\n          options={evalOperators}\n          onChange={onEvalOperatorChange}\n          value={evalOperators.find((ea) => ea.value === condition.operator!.type)}\n        />\n      )}\n      <Select\n        options={reducerFunctions}\n        onChange={onReducerFunctionChange}\n        width={20}\n        value={reducerFunctions.find((rf) => rf.value === condition.reducer.type)}\n      />\n      <div className={styles.button}>OF</div>\n      <Select\n        onChange={onRefIdChange}\n        options={refIds}\n        width={15}\n        value={refIds.find((r) => r.value === condition.query.params[0])}\n      />\n      <ButtonSelect\n        className={styles.buttonSelectText}\n        options={evalFunctions}\n        onChange={onEvalFunctionChange}\n        value={evalFunctions.find((ef) => ef.value === condition.evaluator.type)}\n      />\n      {isRange ? (\n        <>\n          <Input\n            type=\"number\"\n            width={10}\n            onChange={(event) => onEvaluateValueChange(event, 0)}\n            value={condition.evaluator.params[0]}\n          />\n          <div className={styles.button}>TO</div>\n          <Input\n            type=\"number\"\n            width={10}\n            onChange={(event) => onEvaluateValueChange(event, 1)}\n            value={condition.evaluator.params[1]}\n          />\n        </>\n      ) : condition.evaluator.type !== EvalFunction.HasNoValue ? (\n        <Input\n          type=\"number\"\n          width={10}\n          onChange={(event) => onEvaluateValueChange(event, 0)}\n          value={condition.evaluator.params[0]}\n        />\n      ) : null}\n\n      <Button variant=\"secondary\" type=\"button\" onClick={() => onRemoveCondition(index)}>\n        <Icon name=\"trash-alt\" />\n      </Button>\n    </InlineFieldRow>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  const buttonStyle = css`\n    color: ${theme.colors.textBlue};\n    font-size: ${theme.typography.size.sm};\n  `;\n  return {\n    buttonSelectText: buttonStyle,\n    button: cx(\n      css`\n        display: flex;\n        align-items: center;\n        border-radius: ${theme.border.radius.sm};\n        font-weight: ${theme.typography.weight.semibold};\n        border: 1px solid ${theme.colors.border1};\n        white-space: nowrap;\n        padding: 0 ${theme.spacing.sm};\n        background-color: ${theme.colors.bodyBg};\n      `,\n      buttonStyle\n    ),\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}