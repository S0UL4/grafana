{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { config } from '@grafana/runtime';\nimport { LegendDisplayMode, Portal, UPlotChart, VizLayout, VizLegend, VizTooltipContainer } from '@grafana/ui';\nimport { TooltipView } from './TooltipView';\nimport { prepData, prepScatter } from './scatter';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class XYChartPanel2 extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      series: []\n    });\n\n    _defineProperty(this, \"scatterHoverCallback\", hover => {\n      this.setState({\n        hover\n      });\n    });\n\n    _defineProperty(this, \"getData\", () => {\n      return this.props.data.series;\n    });\n\n    _defineProperty(this, \"initSeries\", () => {\n      const {\n        options,\n        data\n      } = this.props;\n      const info = prepScatter(options, this.getData, config.theme2, this.scatterHoverCallback);\n\n      if (info.series.length && data.series) {\n        info.facets = prepData(info, data.series);\n        info.error = undefined;\n      }\n\n      this.setState(info);\n    });\n\n    _defineProperty(this, \"initFacets\", () => {\n      this.setState({\n        facets: prepData(this.state, this.props.data.series)\n      });\n    });\n\n    _defineProperty(this, \"renderLegend\", () => {\n      const {\n        data\n      } = this.props;\n      const {\n        series\n      } = this.state;\n      const items = [];\n\n      for (const s of series) {\n        const frame = s.frame(data.series);\n\n        if (frame) {\n          for (const item of s.legend(frame)) {\n            items.push(item);\n          }\n        }\n      }\n\n      return /*#__PURE__*/_jsx(VizLayout.Legend, {\n        placement: \"bottom\",\n        children: /*#__PURE__*/_jsx(VizLegend, {\n          placement: \"bottom\",\n          items: items,\n          displayMode: LegendDisplayMode.List\n        })\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.initSeries(); // also data\n  }\n\n  componentDidUpdate(oldProps) {\n    const {\n      options,\n      data\n    } = this.props;\n    const configsChanged = options !== oldProps.options || data.structureRev !== oldProps.data.structureRev;\n\n    if (configsChanged) {\n      this.initSeries();\n    } else if (data !== oldProps.data) {\n      this.initFacets();\n    }\n  }\n\n  render() {\n    const {\n      width,\n      height,\n      timeRange,\n      data\n    } = this.props;\n    const {\n      error,\n      facets,\n      builder,\n      hover,\n      series\n    } = this.state;\n\n    if (error || !builder) {\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: \"panel-empty\",\n        children: /*#__PURE__*/_jsx(\"p\", {\n          children: error\n        })\n      });\n    }\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(VizLayout, {\n        width: width,\n        height: height,\n        legend: this.renderLegend(),\n        children: (vizWidth, vizHeight) =>\n        /*#__PURE__*/\n        // <pre style={{ width: vizWidth, height: vizHeight, border: '1px solid green', margin: '0px' }}>\n        //   {JSON.stringify(scatterData, null, 2)}\n        // </pre>\n        _jsx(UPlotChart, {\n          config: builder,\n          data: facets,\n          width: vizWidth,\n          height: vizHeight,\n          timeRange: timeRange\n        })\n      }), /*#__PURE__*/_jsx(Portal, {\n        children: hover && /*#__PURE__*/_jsx(VizTooltipContainer, {\n          position: {\n            x: hover.pageX,\n            y: hover.pageY\n          },\n          offset: {\n            x: 10,\n            y: 10\n          },\n          children: /*#__PURE__*/_jsx(TooltipView, {\n            series: series[hover.scatterIndex],\n            rowIndex: hover.xIndex,\n            data: data.series\n          })\n        })\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","config","LegendDisplayMode","Portal","UPlotChart","VizLayout","VizLegend","VizTooltipContainer","TooltipView","prepData","prepScatter","XYChartPanel2","series","hover","setState","props","data","options","info","getData","theme2","scatterHoverCallback","length","facets","error","undefined","state","items","s","frame","item","legend","push","List","componentDidMount","initSeries","componentDidUpdate","oldProps","configsChanged","structureRev","initFacets","render","width","height","timeRange","builder","renderLegend","vizWidth","vizHeight","x","pageX","y","pageY","scatterIndex","xIndex"],"sources":["/home/soula/grafana/public/app/plugins/panel/xychart/XYChartPanel2.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { PanelProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  LegendDisplayMode,\n  Portal,\n  UPlotChart,\n  UPlotConfigBuilder,\n  VizLayout,\n  VizLegend,\n  VizLegendItem,\n  VizTooltipContainer,\n} from '@grafana/ui';\nimport { FacetedData } from '@grafana/ui/src/components/uPlot/types';\n\nimport { TooltipView } from './TooltipView';\nimport { XYChartOptions } from './models.gen';\nimport { prepData, prepScatter } from './scatter';\nimport { ScatterHoverEvent, ScatterSeries } from './types';\n\ntype Props = PanelProps<XYChartOptions>;\ntype State = {\n  error?: string;\n  series: ScatterSeries[];\n  builder?: UPlotConfigBuilder;\n  facets?: FacetedData;\n  hover?: ScatterHoverEvent;\n};\n\nexport class XYChartPanel2 extends PureComponent<Props, State> {\n  state: State = {\n    series: [],\n  };\n\n  componentDidMount() {\n    this.initSeries(); // also data\n  }\n\n  componentDidUpdate(oldProps: Props) {\n    const { options, data } = this.props;\n    const configsChanged = options !== oldProps.options || data.structureRev !== oldProps.data.structureRev;\n\n    if (configsChanged) {\n      this.initSeries();\n    } else if (data !== oldProps.data) {\n      this.initFacets();\n    }\n  }\n\n  scatterHoverCallback = (hover?: ScatterHoverEvent) => {\n    this.setState({ hover });\n  };\n\n  getData = () => {\n    return this.props.data.series;\n  };\n\n  initSeries = () => {\n    const { options, data } = this.props;\n    const info: State = prepScatter(options, this.getData, config.theme2, this.scatterHoverCallback);\n    if (info.series.length && data.series) {\n      info.facets = prepData(info, data.series);\n      info.error = undefined;\n    }\n    this.setState(info);\n  };\n\n  initFacets = () => {\n    this.setState({\n      facets: prepData(this.state, this.props.data.series),\n    });\n  };\n\n  renderLegend = () => {\n    const { data } = this.props;\n    const { series } = this.state;\n    const items: VizLegendItem[] = [];\n    for (const s of series) {\n      const frame = s.frame(data.series);\n      if (frame) {\n        for (const item of s.legend(frame)) {\n          items.push(item);\n        }\n      }\n    }\n\n    return (\n      <VizLayout.Legend placement=\"bottom\">\n        <VizLegend placement=\"bottom\" items={items} displayMode={LegendDisplayMode.List} />\n      </VizLayout.Legend>\n    );\n  };\n\n  render() {\n    const { width, height, timeRange, data } = this.props;\n    const { error, facets, builder, hover, series } = this.state;\n    if (error || !builder) {\n      return (\n        <div className=\"panel-empty\">\n          <p>{error}</p>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <VizLayout width={width} height={height} legend={this.renderLegend()}>\n          {(vizWidth: number, vizHeight: number) => (\n            // <pre style={{ width: vizWidth, height: vizHeight, border: '1px solid green', margin: '0px' }}>\n            //   {JSON.stringify(scatterData, null, 2)}\n            // </pre>\n            <UPlotChart config={builder} data={facets!} width={vizWidth} height={vizHeight} timeRange={timeRange}>\n              {/*children ? children(config, alignedFrame) : null*/}\n            </UPlotChart>\n          )}\n        </VizLayout>\n        <Portal>\n          {hover && (\n            <VizTooltipContainer position={{ x: hover.pageX, y: hover.pageY }} offset={{ x: 10, y: 10 }}>\n              <TooltipView series={series[hover.scatterIndex]} rowIndex={hover.xIndex} data={data.series} />\n            </VizTooltipContainer>\n          )}\n        </Portal>\n      </>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}