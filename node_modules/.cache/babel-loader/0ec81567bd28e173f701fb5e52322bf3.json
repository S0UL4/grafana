{"ast":null,"code":"const _excluded = [\"isCollapsed\", \"onToggle\", \"idControlled\", \"className\", \"text\", \"size\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useStyles2, Button } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const CollapseToggle = _ref => {\n  let {\n    isCollapsed,\n    onToggle,\n    idControlled,\n    className,\n    text,\n    size = 'xl'\n  } = _ref,\n      restOfProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const styles = useStyles2(getStyles);\n  return /*#__PURE__*/_jsx(Button, Object.assign({\n    type: \"button\",\n    fill: \"text\",\n    \"aria-expanded\": !isCollapsed,\n    \"aria-controls\": idControlled,\n    className: cx(styles.expandButton, className),\n    icon: isCollapsed ? 'angle-right' : 'angle-down',\n    onClick: () => onToggle(!isCollapsed)\n  }, restOfProps, {\n    children: text\n  }));\n};\nexport const getStyles = theme => ({\n  expandButton: css`\n    color: ${theme.colors.text.secondary};\n    margin-right: ${theme.spacing(1)};\n  `\n});","map":{"version":3,"names":["css","cx","React","useStyles2","Button","CollapseToggle","isCollapsed","onToggle","idControlled","className","text","size","restOfProps","styles","getStyles","expandButton","theme","colors","secondary","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/CollapseToggle.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { FC, HTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconSize, useStyles2, Button } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle: FC<Props> = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={cx(styles.expandButton, className)}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  expandButton: css`\n    color: ${theme.colors.text.secondary};\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAA0C,OAA1C;AAGA,SAAmBC,UAAnB,EAA+BC,MAA/B,QAA6C,aAA7C;;AAYA,OAAO,MAAMC,cAAyB,GAAG,QAQnC;EAAA,IARoC;IACxCC,WADwC;IAExCC,QAFwC;IAGxCC,YAHwC;IAIxCC,SAJwC;IAKxCC,IALwC;IAMxCC,IAAI,GAAG;EANiC,CAQpC;EAAA,IADDC,WACC;;EACJ,MAAMC,MAAM,GAAGV,UAAU,CAACW,SAAD,CAAzB;EAEA,oBACE,KAAC,MAAD;IACE,IAAI,EAAC,QADP;IAEE,IAAI,EAAC,MAFP;IAGE,iBAAe,CAACR,WAHlB;IAIE,iBAAeE,YAJjB;IAKE,SAAS,EAAEP,EAAE,CAACY,MAAM,CAACE,YAAR,EAAsBN,SAAtB,CALf;IAME,IAAI,EAAEH,WAAW,GAAG,aAAH,GAAmB,YANtC;IAOE,OAAO,EAAE,MAAMC,QAAQ,CAAC,CAACD,WAAF;EAPzB,GAQMM,WARN;IAAA,UAUGF;EAVH,GADF;AAcD,CAzBM;AA2BP,OAAO,MAAMI,SAAS,GAAIE,KAAD,KAA2B;EAClDD,YAAY,EAAEf,GAAI;AACpB,aAAagB,KAAK,CAACC,MAAN,CAAaP,IAAb,CAAkBQ,SAAU;AACzC,oBAAoBF,KAAK,CAACG,OAAN,CAAc,CAAd,CAAiB;AACrC;AAJoD,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}