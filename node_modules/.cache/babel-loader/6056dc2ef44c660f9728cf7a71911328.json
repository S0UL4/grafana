{"ast":null,"code":"import { FUNCTIONS } from '../promql';\nimport { getAggregationOperations } from './aggregations';\nimport { getOperationDefinitions } from './operations';\nimport { LokiAndPromQueryModellerBase } from './shared/LokiAndPromQueryModellerBase';\nimport { PromVisualQueryOperationCategory } from './types';\nexport class PromQueryModeller extends LokiAndPromQueryModellerBase {\n  constructor() {\n    super(() => {\n      const allOperations = [...getOperationDefinitions(), ...getAggregationOperations()];\n\n      for (const op of allOperations) {\n        const func = FUNCTIONS.find(x => x.insertText === op.id);\n\n        if (func) {\n          op.documentation = func.documentation;\n        }\n      }\n\n      return allOperations;\n    });\n    this.setOperationCategories([PromVisualQueryOperationCategory.Aggregations, PromVisualQueryOperationCategory.RangeFunctions, PromVisualQueryOperationCategory.Functions, PromVisualQueryOperationCategory.BinaryOps, PromVisualQueryOperationCategory.Trigonometric, PromVisualQueryOperationCategory.Time]);\n  }\n\n  getQueryPatterns() {\n    return [{\n      name: 'Rate then sum',\n      operations: [{\n        id: 'rate',\n        params: ['$__rate_interval']\n      }, {\n        id: 'sum',\n        params: []\n      }]\n    }, {\n      name: 'Rate then sum by(label) then avg',\n      operations: [{\n        id: 'rate',\n        params: ['$__rate_interval']\n      }, {\n        id: '__sum_by',\n        params: ['']\n      }, {\n        id: 'avg',\n        params: []\n      }]\n    }, {\n      name: 'Histogram quantile on rate',\n      operations: [{\n        id: 'rate',\n        params: ['$__rate_interval']\n      }, {\n        id: '__sum_by',\n        params: ['le']\n      }, {\n        id: 'histogram_quantile',\n        params: [0.95]\n      }]\n    }, {\n      name: 'Histogram quantile on increase ',\n      operations: [{\n        id: 'increase',\n        params: ['$__rate_interval']\n      }, {\n        id: '__max_by',\n        params: ['le']\n      }, {\n        id: 'histogram_quantile',\n        params: [0.95]\n      }]\n    }];\n  }\n\n}\nexport const promQueryModeller = new PromQueryModeller();","map":{"version":3,"names":["FUNCTIONS","getAggregationOperations","getOperationDefinitions","LokiAndPromQueryModellerBase","PromVisualQueryOperationCategory","PromQueryModeller","constructor","allOperations","op","func","find","x","insertText","id","documentation","setOperationCategories","Aggregations","RangeFunctions","Functions","BinaryOps","Trigonometric","Time","getQueryPatterns","name","operations","params","promQueryModeller"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/PromQueryModeller.ts"],"sourcesContent":["import { FUNCTIONS } from '../promql';\n\nimport { getAggregationOperations } from './aggregations';\nimport { getOperationDefinitions } from './operations';\nimport { LokiAndPromQueryModellerBase } from './shared/LokiAndPromQueryModellerBase';\nimport { PromQueryPattern, PromVisualQueryOperationCategory } from './types';\n\nexport class PromQueryModeller extends LokiAndPromQueryModellerBase {\n  constructor() {\n    super(() => {\n      const allOperations = [...getOperationDefinitions(), ...getAggregationOperations()];\n      for (const op of allOperations) {\n        const func = FUNCTIONS.find((x) => x.insertText === op.id);\n        if (func) {\n          op.documentation = func.documentation;\n        }\n      }\n      return allOperations;\n    });\n\n    this.setOperationCategories([\n      PromVisualQueryOperationCategory.Aggregations,\n      PromVisualQueryOperationCategory.RangeFunctions,\n      PromVisualQueryOperationCategory.Functions,\n      PromVisualQueryOperationCategory.BinaryOps,\n      PromVisualQueryOperationCategory.Trigonometric,\n      PromVisualQueryOperationCategory.Time,\n    ]);\n  }\n\n  getQueryPatterns(): PromQueryPattern[] {\n    return [\n      {\n        name: 'Rate then sum',\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: 'sum', params: [] },\n        ],\n      },\n      {\n        name: 'Rate then sum by(label) then avg',\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: '__sum_by', params: [''] },\n          { id: 'avg', params: [] },\n        ],\n      },\n      {\n        name: 'Histogram quantile on rate',\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: '__sum_by', params: ['le'] },\n          { id: 'histogram_quantile', params: [0.95] },\n        ],\n      },\n      {\n        name: 'Histogram quantile on increase ',\n        operations: [\n          { id: 'increase', params: ['$__rate_interval'] },\n          { id: '__max_by', params: ['le'] },\n          { id: 'histogram_quantile', params: [0.95] },\n        ],\n      },\n    ];\n  }\n}\n\nexport const promQueryModeller = new PromQueryModeller();\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AAEA,SAASC,wBAAT,QAAyC,gBAAzC;AACA,SAASC,uBAAT,QAAwC,cAAxC;AACA,SAASC,4BAAT,QAA6C,uCAA7C;AACA,SAA2BC,gCAA3B,QAAmE,SAAnE;AAEA,OAAO,MAAMC,iBAAN,SAAgCF,4BAAhC,CAA6D;EAClEG,WAAW,GAAG;IACZ,MAAM,MAAM;MACV,MAAMC,aAAa,GAAG,CAAC,GAAGL,uBAAuB,EAA3B,EAA+B,GAAGD,wBAAwB,EAA1D,CAAtB;;MACA,KAAK,MAAMO,EAAX,IAAiBD,aAAjB,EAAgC;QAC9B,MAAME,IAAI,GAAGT,SAAS,CAACU,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACC,UAAF,KAAiBJ,EAAE,CAACK,EAA1C,CAAb;;QACA,IAAIJ,IAAJ,EAAU;UACRD,EAAE,CAACM,aAAH,GAAmBL,IAAI,CAACK,aAAxB;QACD;MACF;;MACD,OAAOP,aAAP;IACD,CATD;IAWA,KAAKQ,sBAAL,CAA4B,CAC1BX,gCAAgC,CAACY,YADP,EAE1BZ,gCAAgC,CAACa,cAFP,EAG1Bb,gCAAgC,CAACc,SAHP,EAI1Bd,gCAAgC,CAACe,SAJP,EAK1Bf,gCAAgC,CAACgB,aALP,EAM1BhB,gCAAgC,CAACiB,IANP,CAA5B;EAQD;;EAEDC,gBAAgB,GAAuB;IACrC,OAAO,CACL;MACEC,IAAI,EAAE,eADR;MAEEC,UAAU,EAAE,CACV;QAAEX,EAAE,EAAE,MAAN;QAAcY,MAAM,EAAE,CAAC,kBAAD;MAAtB,CADU,EAEV;QAAEZ,EAAE,EAAE,KAAN;QAAaY,MAAM,EAAE;MAArB,CAFU;IAFd,CADK,EAQL;MACEF,IAAI,EAAE,kCADR;MAEEC,UAAU,EAAE,CACV;QAAEX,EAAE,EAAE,MAAN;QAAcY,MAAM,EAAE,CAAC,kBAAD;MAAtB,CADU,EAEV;QAAEZ,EAAE,EAAE,UAAN;QAAkBY,MAAM,EAAE,CAAC,EAAD;MAA1B,CAFU,EAGV;QAAEZ,EAAE,EAAE,KAAN;QAAaY,MAAM,EAAE;MAArB,CAHU;IAFd,CARK,EAgBL;MACEF,IAAI,EAAE,4BADR;MAEEC,UAAU,EAAE,CACV;QAAEX,EAAE,EAAE,MAAN;QAAcY,MAAM,EAAE,CAAC,kBAAD;MAAtB,CADU,EAEV;QAAEZ,EAAE,EAAE,UAAN;QAAkBY,MAAM,EAAE,CAAC,IAAD;MAA1B,CAFU,EAGV;QAAEZ,EAAE,EAAE,oBAAN;QAA4BY,MAAM,EAAE,CAAC,IAAD;MAApC,CAHU;IAFd,CAhBK,EAwBL;MACEF,IAAI,EAAE,iCADR;MAEEC,UAAU,EAAE,CACV;QAAEX,EAAE,EAAE,UAAN;QAAkBY,MAAM,EAAE,CAAC,kBAAD;MAA1B,CADU,EAEV;QAAEZ,EAAE,EAAE,UAAN;QAAkBY,MAAM,EAAE,CAAC,IAAD;MAA1B,CAFU,EAGV;QAAEZ,EAAE,EAAE,oBAAN;QAA4BY,MAAM,EAAE,CAAC,IAAD;MAApC,CAHU;IAFd,CAxBK,CAAP;EAiCD;;AAzDiE;AA4DpE,OAAO,MAAMC,iBAAiB,GAAG,IAAIrB,iBAAJ,EAA1B"},"metadata":{},"sourceType":"module"}