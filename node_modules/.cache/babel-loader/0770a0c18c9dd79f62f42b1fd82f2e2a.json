{"ast":null,"code":"// Libraries\nimport { createAction } from '@reduxjs/toolkit';\nimport { RefreshPicker } from '@grafana/ui';\nimport { stopQueryState } from 'app/core/utils/explore';\nimport { importQueries, runQueries } from './query';\nimport { changeRefreshInterval } from './time';\nimport { createEmptyQueryResponse, loadAndInitDatasource } from './utils'; //\n// Actions and Payloads\n//\n\n/**\n * Updates datasource instance before datasource loading has started\n */\n\nexport const updateDatasourceInstanceAction = createAction('explore/updateDatasourceInstance'); //\n// Action creators\n//\n\n/**\n * Loads a new datasource identified by the given name.\n */\n\nexport function changeDatasource(exploreId, datasourceUid, options) {\n  return async (dispatch, getState) => {\n    const orgId = getState().user.orgId;\n    const {\n      history,\n      instance\n    } = await loadAndInitDatasource(orgId, datasourceUid);\n    const currentDataSourceInstance = getState().explore[exploreId].datasourceInstance;\n    dispatch(updateDatasourceInstanceAction({\n      exploreId,\n      datasourceInstance: instance,\n      history\n    }));\n\n    if (options !== null && options !== void 0 && options.importQueries) {\n      const queries = getState().explore[exploreId].queries;\n      await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, instance));\n    }\n\n    if (getState().explore[exploreId].isLive) {\n      dispatch(changeRefreshInterval(exploreId, RefreshPicker.offOption.value));\n    } // Exception - we only want to run queries on data source change, if the queries were imported\n\n\n    if (options !== null && options !== void 0 && options.importQueries) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n} //\n// Reducer\n//\n\n/**\n * Reducer for an Explore area, to be used by the global Explore reducer.\n */\n// Redux Toolkit uses ImmerJs as part of their solution to ensure that state objects are not mutated.\n// ImmerJs has an autoFreeze option that freezes objects from change which means this reducer can't be migrated to createSlice\n// because the state would become frozen and during run time we would get errors because flot (Graph lib) would try to mutate\n// the frozen state.\n// https://github.com/reduxjs/redux-toolkit/issues/242\n\nexport const datasourceReducer = (state, action) => {\n  if (updateDatasourceInstanceAction.match(action)) {\n    const {\n      datasourceInstance,\n      history\n    } = action.payload; // Custom components\n\n    stopQueryState(state.querySubscription);\n    return Object.assign({}, state, {\n      datasourceInstance,\n      graphResult: null,\n      tableResult: null,\n      logsResult: null,\n      logsVolumeDataProvider: undefined,\n      logsVolumeData: undefined,\n      queryResponse: createEmptyQueryResponse(),\n      loading: false,\n      queryKeys: [],\n      history,\n      datasourceMissing: false\n    });\n  }\n\n  return state;\n};","map":{"version":3,"names":["createAction","RefreshPicker","stopQueryState","importQueries","runQueries","changeRefreshInterval","createEmptyQueryResponse","loadAndInitDatasource","updateDatasourceInstanceAction","changeDatasource","exploreId","datasourceUid","options","dispatch","getState","orgId","user","history","instance","currentDataSourceInstance","explore","datasourceInstance","queries","isLive","offOption","value","datasourceReducer","state","action","match","payload","querySubscription","graphResult","tableResult","logsResult","logsVolumeDataProvider","undefined","logsVolumeData","queryResponse","loading","queryKeys","datasourceMissing"],"sources":["/home/soula/grafana/public/app/features/explore/state/datasource.ts"],"sourcesContent":["// Libraries\nimport { AnyAction, createAction } from '@reduxjs/toolkit';\n\nimport { DataSourceApi, HistoryItem } from '@grafana/data';\nimport { RefreshPicker } from '@grafana/ui';\nimport { stopQueryState } from 'app/core/utils/explore';\nimport { ExploreItemState, ThunkResult } from 'app/types';\nimport { ExploreId } from 'app/types/explore';\n\nimport { importQueries, runQueries } from './query';\nimport { changeRefreshInterval } from './time';\nimport { createEmptyQueryResponse, loadAndInitDatasource } from './utils';\n\n//\n// Actions and Payloads\n//\n\n/**\n * Updates datasource instance before datasource loading has started\n */\nexport interface UpdateDatasourceInstancePayload {\n  exploreId: ExploreId;\n  datasourceInstance: DataSourceApi;\n  history: HistoryItem[];\n}\nexport const updateDatasourceInstanceAction = createAction<UpdateDatasourceInstancePayload>(\n  'explore/updateDatasourceInstance'\n);\n\n//\n// Action creators\n//\n\n/**\n * Loads a new datasource identified by the given name.\n */\nexport function changeDatasource(\n  exploreId: ExploreId,\n  datasourceUid: string,\n  options?: { importQueries: boolean }\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const orgId = getState().user.orgId;\n    const { history, instance } = await loadAndInitDatasource(orgId, datasourceUid);\n    const currentDataSourceInstance = getState().explore[exploreId]!.datasourceInstance;\n\n    dispatch(\n      updateDatasourceInstanceAction({\n        exploreId,\n        datasourceInstance: instance,\n        history,\n      })\n    );\n\n    if (options?.importQueries) {\n      const queries = getState().explore[exploreId]!.queries;\n      await dispatch(importQueries(exploreId, queries, currentDataSourceInstance, instance));\n    }\n\n    if (getState().explore[exploreId]!.isLive) {\n      dispatch(changeRefreshInterval(exploreId, RefreshPicker.offOption.value));\n    }\n\n    // Exception - we only want to run queries on data source change, if the queries were imported\n    if (options?.importQueries) {\n      dispatch(runQueries(exploreId));\n    }\n  };\n}\n\n//\n// Reducer\n//\n\n/**\n * Reducer for an Explore area, to be used by the global Explore reducer.\n */\n// Redux Toolkit uses ImmerJs as part of their solution to ensure that state objects are not mutated.\n// ImmerJs has an autoFreeze option that freezes objects from change which means this reducer can't be migrated to createSlice\n// because the state would become frozen and during run time we would get errors because flot (Graph lib) would try to mutate\n// the frozen state.\n// https://github.com/reduxjs/redux-toolkit/issues/242\nexport const datasourceReducer = (state: ExploreItemState, action: AnyAction): ExploreItemState => {\n  if (updateDatasourceInstanceAction.match(action)) {\n    const { datasourceInstance, history } = action.payload;\n\n    // Custom components\n    stopQueryState(state.querySubscription);\n\n    return {\n      ...state,\n      datasourceInstance,\n      graphResult: null,\n      tableResult: null,\n      logsResult: null,\n      logsVolumeDataProvider: undefined,\n      logsVolumeData: undefined,\n      queryResponse: createEmptyQueryResponse(),\n      loading: false,\n      queryKeys: [],\n      history,\n      datasourceMissing: false,\n    };\n  }\n\n  return state;\n};\n"],"mappings":"AAAA;AACA,SAAoBA,YAApB,QAAwC,kBAAxC;AAGA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AAIA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,SAA1C;AACA,SAASC,qBAAT,QAAsC,QAAtC;AACA,SAASC,wBAAT,EAAmCC,qBAAnC,QAAgE,SAAhE,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;;AAMA,OAAO,MAAMC,8BAA8B,GAAGR,YAAY,CACxD,kCADwD,CAAnD,C,CAIP;AACA;AACA;;AAEA;AACA;AACA;;AACA,OAAO,SAASS,gBAAT,CACLC,SADK,EAELC,aAFK,EAGLC,OAHK,EAIc;EACnB,OAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;IACnC,MAAMC,KAAK,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,KAA9B;IACA,MAAM;MAAEE,OAAF;MAAWC;IAAX,IAAwB,MAAMX,qBAAqB,CAACQ,KAAD,EAAQJ,aAAR,CAAzD;IACA,MAAMQ,yBAAyB,GAAGL,QAAQ,GAAGM,OAAX,CAAmBV,SAAnB,EAA+BW,kBAAjE;IAEAR,QAAQ,CACNL,8BAA8B,CAAC;MAC7BE,SAD6B;MAE7BW,kBAAkB,EAAEH,QAFS;MAG7BD;IAH6B,CAAD,CADxB,CAAR;;IAQA,IAAIL,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAET,aAAb,EAA4B;MAC1B,MAAMmB,OAAO,GAAGR,QAAQ,GAAGM,OAAX,CAAmBV,SAAnB,EAA+BY,OAA/C;MACA,MAAMT,QAAQ,CAACV,aAAa,CAACO,SAAD,EAAYY,OAAZ,EAAqBH,yBAArB,EAAgDD,QAAhD,CAAd,CAAd;IACD;;IAED,IAAIJ,QAAQ,GAAGM,OAAX,CAAmBV,SAAnB,EAA+Ba,MAAnC,EAA2C;MACzCV,QAAQ,CAACR,qBAAqB,CAACK,SAAD,EAAYT,aAAa,CAACuB,SAAd,CAAwBC,KAApC,CAAtB,CAAR;IACD,CApBkC,CAsBnC;;;IACA,IAAIb,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAET,aAAb,EAA4B;MAC1BU,QAAQ,CAACT,UAAU,CAACM,SAAD,CAAX,CAAR;IACD;EACF,CA1BD;AA2BD,C,CAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMgB,iBAAiB,GAAG,CAACC,KAAD,EAA0BC,MAA1B,KAAkE;EACjG,IAAIpB,8BAA8B,CAACqB,KAA/B,CAAqCD,MAArC,CAAJ,EAAkD;IAChD,MAAM;MAAEP,kBAAF;MAAsBJ;IAAtB,IAAkCW,MAAM,CAACE,OAA/C,CADgD,CAGhD;;IACA5B,cAAc,CAACyB,KAAK,CAACI,iBAAP,CAAd;IAEA,yBACKJ,KADL;MAEEN,kBAFF;MAGEW,WAAW,EAAE,IAHf;MAIEC,WAAW,EAAE,IAJf;MAKEC,UAAU,EAAE,IALd;MAMEC,sBAAsB,EAAEC,SAN1B;MAOEC,cAAc,EAAED,SAPlB;MAQEE,aAAa,EAAEhC,wBAAwB,EARzC;MASEiC,OAAO,EAAE,KATX;MAUEC,SAAS,EAAE,EAVb;MAWEvB,OAXF;MAYEwB,iBAAiB,EAAE;IAZrB;EAcD;;EAED,OAAOd,KAAP;AACD,CAxBM"},"metadata":{},"sourceType":"module"}