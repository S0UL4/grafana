{"ast":null,"code":"import React, { useEffect, useMemo, useState } from 'react';\nimport { Button, Select, HorizontalGroup, VerticalGroup, MultiSelect } from '@grafana/ui';\nimport { Field } from '../Field';\nimport { appendDimensionFilter, removeDimensionFilter, setDimensionFilterValue } from './setQueryValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useDimensionLabels = (data, query) => {\n  const [dimensionLabels, setDimensionLabels] = useState({});\n  useEffect(() => {\n    var _data$series;\n\n    let labelsObj = {};\n\n    if (data !== null && data !== void 0 && (_data$series = data.series) !== null && _data$series !== void 0 && _data$series.length) {\n      // Identify which series' in the dataframe are relevant to the current query\n      const series = data.series.flat().filter(series => series.refId === query.refId);\n      const fields = series.flatMap(series => series.fields); // Retrieve labels for series fields\n\n      const labels = fields.map(fields => fields.labels).flat().filter(item => item);\n\n      for (const label of labels) {\n        // Labels only exist for series that have a dimension selected\n        if (label) {\n          for (const [dimension, value] of Object.entries(label)) {\n            if (labelsObj[dimension]) {\n              labelsObj[dimension].add(value);\n            } else {\n              labelsObj[dimension] = new Set([value]);\n            }\n          }\n        }\n      }\n    }\n\n    setDimensionLabels(prevLabels => {\n      const newLabels = {};\n      const currentLabels = Object.keys(labelsObj);\n\n      if (currentLabels.length === 0) {\n        return prevLabels;\n      }\n\n      for (const label of currentLabels) {\n        if (prevLabels[label] && labelsObj[label].size < prevLabels[label].size) {\n          newLabels[label] = prevLabels[label];\n        } else {\n          newLabels[label] = labelsObj[label];\n        }\n      }\n\n      return newLabels;\n    });\n  }, [data === null || data === void 0 ? void 0 : data.series, query.refId]);\n  return dimensionLabels;\n};\n\nconst DimensionFields = ({\n  data,\n  query,\n  dimensionOptions,\n  onQueryChange\n}) => {\n  var _query$azureMonitor2;\n\n  const dimensionFilters = useMemo(() => {\n    var _query$azureMonitor$d, _query$azureMonitor;\n\n    return (_query$azureMonitor$d = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.dimensionFilters) !== null && _query$azureMonitor$d !== void 0 ? _query$azureMonitor$d : [];\n  }, [(_query$azureMonitor2 = query.azureMonitor) === null || _query$azureMonitor2 === void 0 ? void 0 : _query$azureMonitor2.dimensionFilters]);\n  const dimensionLabels = useDimensionLabels(data, query);\n  const dimensionOperators = [{\n    label: '==',\n    value: 'eq'\n  }, {\n    label: '!=',\n    value: 'ne'\n  }, {\n    label: 'starts with',\n    value: 'sw'\n  }];\n  const validDimensionOptions = useMemo(() => {\n    // We filter out any dimensions that have already been used in a filter as the API doesn't support having multiple filters with the same dimension name.\n    // The Azure portal also doesn't support this feature so it makes sense for consistency.\n    let t = dimensionOptions;\n\n    if (dimensionFilters.length) {\n      t = dimensionOptions.filter(val => !dimensionFilters.some(dimensionFilter => dimensionFilter.dimension === val.value));\n    }\n\n    return t;\n  }, [dimensionFilters, dimensionOptions]);\n\n  const addFilter = () => {\n    onQueryChange(appendDimensionFilter(query));\n  };\n\n  const removeFilter = index => {\n    onQueryChange(removeDimensionFilter(query, index));\n  };\n\n  const onFieldChange = (filterIndex, fieldName, value) => {\n    onQueryChange(setDimensionFilterValue(query, filterIndex, fieldName, value));\n  };\n\n  const onFilterInputChange = (index, v) => {\n    var _v$value;\n\n    onFieldChange(index, 'filters', [(_v$value = v === null || v === void 0 ? void 0 : v.value) !== null && _v$value !== void 0 ? _v$value : '']);\n  };\n\n  const getValidDimensionOptions = selectedDimension => {\n    return validDimensionOptions.concat(dimensionOptions.filter(item => item.value === selectedDimension));\n  };\n\n  const getValidFilterOptions = (selectedFilter, dimension) => {\n    var _dimensionLabels$dime;\n\n    const dimensionFilters = Array.from((_dimensionLabels$dime = dimensionLabels[dimension.toLowerCase()]) !== null && _dimensionLabels$dime !== void 0 ? _dimensionLabels$dime : []);\n\n    if (dimensionFilters.find(filter => filter === selectedFilter)) {\n      return dimensionFilters.map(filter => ({\n        value: filter,\n        label: filter\n      }));\n    }\n\n    return [...dimensionFilters, ...(selectedFilter && selectedFilter !== '*' ? [selectedFilter] : [])].map(item => ({\n      value: item,\n      label: item\n    }));\n  };\n\n  const getValidMultiSelectOptions = (selectedFilters, dimension) => {\n    const labelOptions = getValidFilterOptions(undefined, dimension);\n\n    if (selectedFilters) {\n      for (const filter of selectedFilters) {\n        if (!labelOptions.find(label => label.value === filter)) {\n          labelOptions.push({\n            value: filter,\n            label: filter\n          });\n        }\n      }\n    }\n\n    return labelOptions;\n  };\n\n  const getValidOperators = selectedOperator => {\n    if (dimensionOperators.find(operator => operator.value === selectedOperator)) {\n      return dimensionOperators;\n    }\n\n    return [...dimensionOperators, ...(selectedOperator ? [{\n      label: selectedOperator,\n      value: selectedOperator\n    }] : [])];\n  };\n\n  const onMultiSelectFilterChange = (index, v) => {\n    onFieldChange(index, 'filters', v.map(item => item.value || ''));\n  };\n\n  return /*#__PURE__*/_jsx(Field, {\n    label: \"Dimension\",\n    children: /*#__PURE__*/_jsxs(VerticalGroup, {\n      spacing: \"xs\",\n      children: [dimensionFilters.map((filter, index) => /*#__PURE__*/_jsxs(HorizontalGroup, {\n        spacing: \"xs\",\n        children: [/*#__PURE__*/_jsx(Select, {\n          placeholder: \"Field\",\n          value: filter.dimension,\n          options: getValidDimensionOptions(filter.dimension),\n          onChange: v => {\n            var _v$value2;\n\n            return onFieldChange(index, 'dimension', (_v$value2 = v.value) !== null && _v$value2 !== void 0 ? _v$value2 : '');\n          },\n          width: 38\n        }), /*#__PURE__*/_jsx(Select, {\n          menuShouldPortal: true,\n          placeholder: \"Operation\",\n          value: filter.operator,\n          options: getValidOperators(filter.operator),\n          onChange: v => {\n            var _v$value3;\n\n            return onFieldChange(index, 'operator', (_v$value3 = v.value) !== null && _v$value3 !== void 0 ? _v$value3 : '');\n          },\n          allowCustomValue: true\n        }), filter.operator === 'eq' || filter.operator === 'ne' ? /*#__PURE__*/_jsx(MultiSelect, {\n          menuShouldPortal: true,\n          placeholder: \"Select value(s)\",\n          value: filter.filters,\n          options: getValidMultiSelectOptions(filter.filters, filter.dimension),\n          onChange: v => onMultiSelectFilterChange(index, v),\n          \"aria-label\": 'dimension-labels-select',\n          allowCustomValue: true\n        }) :\n        /*#__PURE__*/\n        // The API does not currently allow for multiple \"starts with\" clauses to be used.\n        _jsx(Select, {\n          menuShouldPortal: true,\n          placeholder: \"Select value\",\n          value: filter.filters ? filter.filters[0] : '',\n          allowCustomValue: true,\n          options: getValidFilterOptions(filter.filters ? filter.filters[0] : '', filter.dimension),\n          onChange: v => onFilterInputChange(index, v),\n          isClearable: true\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          size: \"md\",\n          icon: \"trash-alt\",\n          \"aria-label\": \"Remove\",\n          onClick: () => removeFilter(index)\n        })]\n      }, index)), /*#__PURE__*/_jsx(Button, {\n        variant: \"secondary\",\n        size: \"md\",\n        onClick: addFilter,\n        children: \"Add new dimension\"\n      })]\n    })\n  });\n};\n\nexport default DimensionFields;","map":{"version":3,"names":["React","useEffect","useMemo","useState","Button","Select","HorizontalGroup","VerticalGroup","MultiSelect","Field","appendDimensionFilter","removeDimensionFilter","setDimensionFilterValue","useDimensionLabels","data","query","dimensionLabels","setDimensionLabels","labelsObj","series","length","flat","filter","refId","fields","flatMap","labels","map","item","label","dimension","value","Object","entries","add","Set","prevLabels","newLabels","currentLabels","keys","size","DimensionFields","dimensionOptions","onQueryChange","dimensionFilters","azureMonitor","dimensionOperators","validDimensionOptions","t","val","some","dimensionFilter","addFilter","removeFilter","index","onFieldChange","filterIndex","fieldName","onFilterInputChange","v","getValidDimensionOptions","selectedDimension","concat","getValidFilterOptions","selectedFilter","Array","from","toLowerCase","find","getValidMultiSelectOptions","selectedFilters","labelOptions","undefined","push","getValidOperators","selectedOperator","operator","onMultiSelectFilterChange","filters"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/DimensionFields.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue, DataFrame, PanelData } from '@grafana/data';\nimport { Button, Select, HorizontalGroup, VerticalGroup, MultiSelect } from '@grafana/ui';\n\nimport { AzureMetricDimension, AzureMonitorOption, AzureMonitorQuery, AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { appendDimensionFilter, removeDimensionFilter, setDimensionFilterValue } from './setQueryValue';\n\ninterface DimensionFieldsProps extends AzureQueryEditorFieldProps {\n  dimensionOptions: AzureMonitorOption[];\n}\n\ninterface DimensionLabels {\n  [key: string]: Set<string>;\n}\n\nconst useDimensionLabels = (data: PanelData | undefined, query: AzureMonitorQuery) => {\n  const [dimensionLabels, setDimensionLabels] = useState<DimensionLabels>({});\n  useEffect(() => {\n    let labelsObj: DimensionLabels = {};\n    if (data?.series?.length) {\n      // Identify which series' in the dataframe are relevant to the current query\n      const series: DataFrame[] = data.series.flat().filter((series) => series.refId === query.refId);\n      const fields = series.flatMap((series) => series.fields);\n      // Retrieve labels for series fields\n      const labels = fields\n        .map((fields) => fields.labels)\n        .flat()\n        .filter((item) => item!);\n      for (const label of labels) {\n        // Labels only exist for series that have a dimension selected\n        if (label) {\n          for (const [dimension, value] of Object.entries(label)) {\n            if (labelsObj[dimension]) {\n              labelsObj[dimension].add(value);\n            } else {\n              labelsObj[dimension] = new Set([value]);\n            }\n          }\n        }\n      }\n    }\n    setDimensionLabels((prevLabels) => {\n      const newLabels: DimensionLabels = {};\n      const currentLabels = Object.keys(labelsObj);\n      if (currentLabels.length === 0) {\n        return prevLabels;\n      }\n      for (const label of currentLabels) {\n        if (prevLabels[label] && labelsObj[label].size < prevLabels[label].size) {\n          newLabels[label] = prevLabels[label];\n        } else {\n          newLabels[label] = labelsObj[label];\n        }\n      }\n      return newLabels;\n    });\n  }, [data?.series, query.refId]);\n  return dimensionLabels;\n};\n\nconst DimensionFields: React.FC<DimensionFieldsProps> = ({ data, query, dimensionOptions, onQueryChange }) => {\n  const dimensionFilters = useMemo(\n    () => query.azureMonitor?.dimensionFilters ?? [],\n    [query.azureMonitor?.dimensionFilters]\n  );\n\n  const dimensionLabels = useDimensionLabels(data, query);\n\n  const dimensionOperators: Array<SelectableValue<string>> = [\n    { label: '==', value: 'eq' },\n    { label: '!=', value: 'ne' },\n    { label: 'starts with', value: 'sw' },\n  ];\n\n  const validDimensionOptions = useMemo(() => {\n    // We filter out any dimensions that have already been used in a filter as the API doesn't support having multiple filters with the same dimension name.\n    // The Azure portal also doesn't support this feature so it makes sense for consistency.\n    let t = dimensionOptions;\n    if (dimensionFilters.length) {\n      t = dimensionOptions.filter(\n        (val) => !dimensionFilters.some((dimensionFilter) => dimensionFilter.dimension === val.value)\n      );\n    }\n    return t;\n  }, [dimensionFilters, dimensionOptions]);\n\n  const addFilter = () => {\n    onQueryChange(appendDimensionFilter(query));\n  };\n\n  const removeFilter = (index: number) => {\n    onQueryChange(removeDimensionFilter(query, index));\n  };\n\n  const onFieldChange = <Key extends keyof AzureMetricDimension>(\n    filterIndex: number,\n    fieldName: Key,\n    value: AzureMetricDimension[Key]\n  ) => {\n    onQueryChange(setDimensionFilterValue(query, filterIndex, fieldName, value));\n  };\n\n  const onFilterInputChange = (index: number, v: SelectableValue<string> | null) => {\n    onFieldChange(index, 'filters', [v?.value ?? '']);\n  };\n\n  const getValidDimensionOptions = (selectedDimension: string) => {\n    return validDimensionOptions.concat(dimensionOptions.filter((item) => item.value === selectedDimension));\n  };\n\n  const getValidFilterOptions = (selectedFilter: string | undefined, dimension: string) => {\n    const dimensionFilters = Array.from(dimensionLabels[dimension.toLowerCase()] ?? []);\n    if (dimensionFilters.find((filter) => filter === selectedFilter)) {\n      return dimensionFilters.map((filter) => ({ value: filter, label: filter }));\n    }\n    return [...dimensionFilters, ...(selectedFilter && selectedFilter !== '*' ? [selectedFilter] : [])].map((item) => ({\n      value: item,\n      label: item,\n    }));\n  };\n\n  const getValidMultiSelectOptions = (selectedFilters: string[] | undefined, dimension: string) => {\n    const labelOptions = getValidFilterOptions(undefined, dimension);\n    if (selectedFilters) {\n      for (const filter of selectedFilters) {\n        if (!labelOptions.find((label) => label.value === filter)) {\n          labelOptions.push({ value: filter, label: filter });\n        }\n      }\n    }\n    return labelOptions;\n  };\n\n  const getValidOperators = (selectedOperator: string) => {\n    if (dimensionOperators.find((operator: SelectableValue) => operator.value === selectedOperator)) {\n      return dimensionOperators;\n    }\n    return [...dimensionOperators, ...(selectedOperator ? [{ label: selectedOperator, value: selectedOperator }] : [])];\n  };\n\n  const onMultiSelectFilterChange = (index: number, v: Array<SelectableValue<string>>) => {\n    onFieldChange(\n      index,\n      'filters',\n      v.map((item) => item.value || '')\n    );\n  };\n\n  return (\n    <Field label=\"Dimension\">\n      <VerticalGroup spacing=\"xs\">\n        {dimensionFilters.map((filter, index) => (\n          <HorizontalGroup key={index} spacing=\"xs\">\n            <Select\n              placeholder=\"Field\"\n              value={filter.dimension}\n              options={getValidDimensionOptions(filter.dimension)}\n              onChange={(v) => onFieldChange(index, 'dimension', v.value ?? '')}\n              width={38}\n            />\n            <Select\n              menuShouldPortal\n              placeholder=\"Operation\"\n              value={filter.operator}\n              options={getValidOperators(filter.operator)}\n              onChange={(v) => onFieldChange(index, 'operator', v.value ?? '')}\n              allowCustomValue\n            />\n            {filter.operator === 'eq' || filter.operator === 'ne' ? (\n              <MultiSelect\n                menuShouldPortal\n                placeholder=\"Select value(s)\"\n                value={filter.filters}\n                options={getValidMultiSelectOptions(filter.filters, filter.dimension)}\n                onChange={(v) => onMultiSelectFilterChange(index, v)}\n                aria-label={'dimension-labels-select'}\n                allowCustomValue\n              />\n            ) : (\n              // The API does not currently allow for multiple \"starts with\" clauses to be used.\n              <Select\n                menuShouldPortal\n                placeholder=\"Select value\"\n                value={filter.filters ? filter.filters[0] : ''}\n                allowCustomValue\n                options={getValidFilterOptions(filter.filters ? filter.filters[0] : '', filter.dimension)}\n                onChange={(v) => onFilterInputChange(index, v)}\n                isClearable\n              />\n            )}\n            <Button\n              variant=\"secondary\"\n              size=\"md\"\n              icon=\"trash-alt\"\n              aria-label=\"Remove\"\n              onClick={() => removeFilter(index)}\n            ></Button>\n          </HorizontalGroup>\n        ))}\n\n        <Button variant=\"secondary\" size=\"md\" onClick={addFilter}>\n          Add new dimension\n        </Button>\n      </VerticalGroup>\n    </Field>\n  );\n};\n\nexport default DimensionFields;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}