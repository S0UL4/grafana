{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport { toOption } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorSwitch } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\nimport { STATISTICS } from '../../cloudwatch-sql/language';\nimport { useDimensionKeys, useMetrics, useNamespaces } from '../../hooks';\nimport { appendTemplateVariables } from '../../utils/utils';\nimport { getMetricNameFromExpression, getNamespaceFromExpression, getSchemaLabelKeys as getSchemaLabels, isUsingWithSchema, removeMetricName, setAggregation, setMetricName, setNamespace, setSchemaLabels, setWithSchema, stringArrayToDimensions } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst AGGREGATIONS = STATISTICS.map(toOption);\n\nconst SQLBuilderSelectRow = ({\n  datasource,\n  query,\n  onQueryChange\n}) => {\n  var _query$sql, _sql$select;\n\n  const sql = (_query$sql = query.sql) !== null && _query$sql !== void 0 ? _query$sql : {};\n  const aggregation = (_sql$select = sql.select) === null || _sql$select === void 0 ? void 0 : _sql$select.name;\n  useEffect(() => {\n    if (!aggregation) {\n      onQueryChange(setAggregation(query, STATISTICS[0]));\n    }\n  }, [aggregation, onQueryChange, query]);\n  const metricName = getMetricNameFromExpression(sql.select);\n  const namespace = getNamespaceFromExpression(sql.from);\n  const schemaLabels = getSchemaLabels(sql.from);\n  const withSchemaEnabled = isUsingWithSchema(sql.from);\n  const namespaceOptions = useNamespaces(datasource);\n  const metricOptions = useMetrics(datasource, query.region, namespace);\n  const existingFilters = useMemo(() => stringArrayToDimensions(schemaLabels !== null && schemaLabels !== void 0 ? schemaLabels : []), [schemaLabels]);\n  const unusedDimensionKeys = useDimensionKeys(datasource, query.region, namespace, metricName, existingFilters);\n  const dimensionKeys = useMemo(() => schemaLabels !== null && schemaLabels !== void 0 && schemaLabels.length ? [...unusedDimensionKeys, ...schemaLabels.map(toOption)] : unusedDimensionKeys, [unusedDimensionKeys, schemaLabels]);\n\n  const onNamespaceChange = async query => {\n    const validatedQuery = await validateMetricName(query);\n    onQueryChange(validatedQuery);\n  };\n\n  const validateMetricName = async query => {\n    let {\n      region,\n      sql\n    } = query;\n    await datasource.getMetrics(query.namespace, region).then(result => {\n      if (!result.some(metric => metric.value === metricName)) {\n        sql = removeMetricName(query).sql;\n      }\n    });\n    return Object.assign({}, query, {\n      sql\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(EditorFieldGroup, {\n      children: [/*#__PURE__*/_jsx(EditorField, {\n        label: \"Namespace\",\n        width: 16,\n        children: /*#__PURE__*/_jsx(Select, {\n          \"aria-label\": \"Namespace\",\n          value: namespace ? toOption(namespace) : null,\n          inputId: `${query.refId}-cloudwatch-sql-namespace`,\n          options: namespaceOptions,\n          allowCustomValue: true,\n          onChange: ({\n            value\n          }) => value && onNamespaceChange(setNamespace(query, value))\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"With schema\",\n        children: /*#__PURE__*/_jsx(EditorSwitch, {\n          id: `${query.refId}-cloudwatch-sql-withSchema`,\n          value: withSchemaEnabled,\n          onChange: ev => ev.target instanceof HTMLInputElement && onQueryChange(setWithSchema(query, ev.target.checked))\n        })\n      }), withSchemaEnabled && /*#__PURE__*/_jsx(EditorField, {\n        label: \"Schema labels\",\n        disabled: !namespace,\n        children: /*#__PURE__*/_jsx(Select, {\n          id: `${query.refId}-cloudwatch-sql-schema-label-keys`,\n          width: \"auto\",\n          isMulti: true,\n          value: schemaLabels ? schemaLabels.map(toOption) : null,\n          options: dimensionKeys,\n          allowCustomValue: true,\n          onChange: item => item && onQueryChange(setSchemaLabels(query, item))\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(EditorFieldGroup, {\n      children: [/*#__PURE__*/_jsx(EditorField, {\n        label: \"Metric name\",\n        width: 16,\n        children: /*#__PURE__*/_jsx(Select, {\n          \"aria-label\": \"Metric name\",\n          value: metricName ? toOption(metricName) : null,\n          options: metricOptions,\n          allowCustomValue: true,\n          onChange: ({\n            value\n          }) => value && onQueryChange(setMetricName(query, value))\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Aggregation\",\n        width: 16,\n        children: /*#__PURE__*/_jsx(Select, {\n          \"aria-label\": \"Aggregation\",\n          value: aggregation ? toOption(aggregation) : null,\n          options: appendTemplateVariables(datasource, AGGREGATIONS),\n          onChange: ({\n            value\n          }) => value && onQueryChange(setAggregation(query, value))\n        })\n      })]\n    })]\n  });\n};\n\nexport default SQLBuilderSelectRow;","map":{"version":3,"names":["React","useEffect","useMemo","toOption","EditorField","EditorFieldGroup","EditorSwitch","Select","STATISTICS","useDimensionKeys","useMetrics","useNamespaces","appendTemplateVariables","getMetricNameFromExpression","getNamespaceFromExpression","getSchemaLabelKeys","getSchemaLabels","isUsingWithSchema","removeMetricName","setAggregation","setMetricName","setNamespace","setSchemaLabels","setWithSchema","stringArrayToDimensions","AGGREGATIONS","map","SQLBuilderSelectRow","datasource","query","onQueryChange","sql","aggregation","select","name","metricName","namespace","from","schemaLabels","withSchemaEnabled","namespaceOptions","metricOptions","region","existingFilters","unusedDimensionKeys","dimensionKeys","length","onNamespaceChange","validatedQuery","validateMetricName","getMetrics","then","result","some","metric","value","refId","ev","target","HTMLInputElement","checked","item"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLBuilderSelectRow.tsx"],"sourcesContent":["import React, { useEffect, useMemo } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorSwitch } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { STATISTICS } from '../../cloudwatch-sql/language';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces } from '../../hooks';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport {\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  getSchemaLabelKeys as getSchemaLabels,\n  isUsingWithSchema,\n  removeMetricName,\n  setAggregation,\n  setMetricName,\n  setNamespace,\n  setSchemaLabels,\n  setWithSchema,\n  stringArrayToDimensions,\n} from './utils';\n\ninterface SQLBuilderSelectRowProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst AGGREGATIONS = STATISTICS.map(toOption);\n\nconst SQLBuilderSelectRow: React.FC<SQLBuilderSelectRowProps> = ({ datasource, query, onQueryChange }) => {\n  const sql = query.sql ?? {};\n\n  const aggregation = sql.select?.name;\n  useEffect(() => {\n    if (!aggregation) {\n      onQueryChange(setAggregation(query, STATISTICS[0]));\n    }\n  }, [aggregation, onQueryChange, query]);\n\n  const metricName = getMetricNameFromExpression(sql.select);\n  const namespace = getNamespaceFromExpression(sql.from);\n  const schemaLabels = getSchemaLabels(sql.from);\n  const withSchemaEnabled = isUsingWithSchema(sql.from);\n\n  const namespaceOptions = useNamespaces(datasource);\n  const metricOptions = useMetrics(datasource, query.region, namespace);\n  const existingFilters = useMemo(() => stringArrayToDimensions(schemaLabels ?? []), [schemaLabels]);\n  const unusedDimensionKeys = useDimensionKeys(datasource, query.region, namespace, metricName, existingFilters);\n  const dimensionKeys = useMemo(\n    () => (schemaLabels?.length ? [...unusedDimensionKeys, ...schemaLabels.map(toOption)] : unusedDimensionKeys),\n    [unusedDimensionKeys, schemaLabels]\n  );\n\n  const onNamespaceChange = async (query: CloudWatchMetricsQuery) => {\n    const validatedQuery = await validateMetricName(query);\n    onQueryChange(validatedQuery);\n  };\n\n  const validateMetricName = async (query: CloudWatchMetricsQuery) => {\n    let { region, sql } = query;\n    await datasource.getMetrics(query.namespace, region).then((result: Array<SelectableValue<string>>) => {\n      if (!result.some((metric) => metric.value === metricName)) {\n        sql = removeMetricName(query).sql;\n      }\n    });\n    return { ...query, sql };\n  };\n\n  return (\n    <>\n      <EditorFieldGroup>\n        <EditorField label=\"Namespace\" width={16}>\n          <Select\n            aria-label=\"Namespace\"\n            value={namespace ? toOption(namespace) : null}\n            inputId={`${query.refId}-cloudwatch-sql-namespace`}\n            options={namespaceOptions}\n            allowCustomValue\n            onChange={({ value }) => value && onNamespaceChange(setNamespace(query, value))}\n          />\n        </EditorField>\n\n        <EditorField label=\"With schema\">\n          <EditorSwitch\n            id={`${query.refId}-cloudwatch-sql-withSchema`}\n            value={withSchemaEnabled}\n            onChange={(ev) =>\n              ev.target instanceof HTMLInputElement && onQueryChange(setWithSchema(query, ev.target.checked))\n            }\n          />\n        </EditorField>\n\n        {withSchemaEnabled && (\n          <EditorField label=\"Schema labels\" disabled={!namespace}>\n            <Select\n              id={`${query.refId}-cloudwatch-sql-schema-label-keys`}\n              width=\"auto\"\n              isMulti={true}\n              value={schemaLabels ? schemaLabels.map(toOption) : null}\n              options={dimensionKeys}\n              allowCustomValue\n              onChange={(item) => item && onQueryChange(setSchemaLabels(query, item))}\n            />\n          </EditorField>\n        )}\n      </EditorFieldGroup>\n\n      <EditorFieldGroup>\n        <EditorField label=\"Metric name\" width={16}>\n          <Select\n            aria-label=\"Metric name\"\n            value={metricName ? toOption(metricName) : null}\n            options={metricOptions}\n            allowCustomValue\n            onChange={({ value }) => value && onQueryChange(setMetricName(query, value))}\n          />\n        </EditorField>\n\n        <EditorField label=\"Aggregation\" width={16}>\n          <Select\n            aria-label=\"Aggregation\"\n            value={aggregation ? toOption(aggregation) : null}\n            options={appendTemplateVariables(datasource, AGGREGATIONS)}\n            onChange={({ value }) => value && onQueryChange(setAggregation(query, value))}\n          />\n        </EditorField>\n      </EditorFieldGroup>\n    </>\n  );\n};\n\nexport default SQLBuilderSelectRow;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,QAA0C,OAA1C;AAEA,SAA0BC,QAA1B,QAA0C,eAA1C;AACA,SAASC,WAAT,EAAsBC,gBAAtB,EAAwCC,YAAxC,QAA4D,uBAA5D;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA,SAASC,UAAT,QAA2B,+BAA3B;AAEA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,aAAvC,QAA4D,aAA5D;AAEA,SAASC,uBAAT,QAAwC,mBAAxC;AAEA,SACEC,2BADF,EAEEC,0BAFF,EAGEC,kBAAkB,IAAIC,eAHxB,EAIEC,iBAJF,EAKEC,gBALF,EAMEC,cANF,EAOEC,aAPF,EAQEC,YARF,EASEC,eATF,EAUEC,aAVF,EAWEC,uBAXF,QAYO,SAZP;;;;AAoBA,MAAMC,YAAY,GAAGjB,UAAU,CAACkB,GAAX,CAAevB,QAAf,CAArB;;AAEA,MAAMwB,mBAAuD,GAAG,CAAC;EAAEC,UAAF;EAAcC,KAAd;EAAqBC;AAArB,CAAD,KAA0C;EAAA;;EACxG,MAAMC,GAAG,iBAAGF,KAAK,CAACE,GAAT,mDAAgB,EAAzB;EAEA,MAAMC,WAAW,kBAAGD,GAAG,CAACE,MAAP,gDAAG,YAAYC,IAAhC;EACAjC,SAAS,CAAC,MAAM;IACd,IAAI,CAAC+B,WAAL,EAAkB;MAChBF,aAAa,CAACX,cAAc,CAACU,KAAD,EAAQrB,UAAU,CAAC,CAAD,CAAlB,CAAf,CAAb;IACD;EACF,CAJQ,EAIN,CAACwB,WAAD,EAAcF,aAAd,EAA6BD,KAA7B,CAJM,CAAT;EAMA,MAAMM,UAAU,GAAGtB,2BAA2B,CAACkB,GAAG,CAACE,MAAL,CAA9C;EACA,MAAMG,SAAS,GAAGtB,0BAA0B,CAACiB,GAAG,CAACM,IAAL,CAA5C;EACA,MAAMC,YAAY,GAAGtB,eAAe,CAACe,GAAG,CAACM,IAAL,CAApC;EACA,MAAME,iBAAiB,GAAGtB,iBAAiB,CAACc,GAAG,CAACM,IAAL,CAA3C;EAEA,MAAMG,gBAAgB,GAAG7B,aAAa,CAACiB,UAAD,CAAtC;EACA,MAAMa,aAAa,GAAG/B,UAAU,CAACkB,UAAD,EAAaC,KAAK,CAACa,MAAnB,EAA2BN,SAA3B,CAAhC;EACA,MAAMO,eAAe,GAAGzC,OAAO,CAAC,MAAMsB,uBAAuB,CAACc,YAAD,aAACA,YAAD,cAACA,YAAD,GAAiB,EAAjB,CAA9B,EAAoD,CAACA,YAAD,CAApD,CAA/B;EACA,MAAMM,mBAAmB,GAAGnC,gBAAgB,CAACmB,UAAD,EAAaC,KAAK,CAACa,MAAnB,EAA2BN,SAA3B,EAAsCD,UAAtC,EAAkDQ,eAAlD,CAA5C;EACA,MAAME,aAAa,GAAG3C,OAAO,CAC3B,MAAOoC,YAAY,SAAZ,IAAAA,YAAY,WAAZ,IAAAA,YAAY,CAAEQ,MAAd,GAAuB,CAAC,GAAGF,mBAAJ,EAAyB,GAAGN,YAAY,CAACZ,GAAb,CAAiBvB,QAAjB,CAA5B,CAAvB,GAAiFyC,mBAD7D,EAE3B,CAACA,mBAAD,EAAsBN,YAAtB,CAF2B,CAA7B;;EAKA,MAAMS,iBAAiB,GAAG,MAAOlB,KAAP,IAAyC;IACjE,MAAMmB,cAAc,GAAG,MAAMC,kBAAkB,CAACpB,KAAD,CAA/C;IACAC,aAAa,CAACkB,cAAD,CAAb;EACD,CAHD;;EAKA,MAAMC,kBAAkB,GAAG,MAAOpB,KAAP,IAAyC;IAClE,IAAI;MAAEa,MAAF;MAAUX;IAAV,IAAkBF,KAAtB;IACA,MAAMD,UAAU,CAACsB,UAAX,CAAsBrB,KAAK,CAACO,SAA5B,EAAuCM,MAAvC,EAA+CS,IAA/C,CAAqDC,MAAD,IAA4C;MACpG,IAAI,CAACA,MAAM,CAACC,IAAP,CAAaC,MAAD,IAAYA,MAAM,CAACC,KAAP,KAAiBpB,UAAzC,CAAL,EAA2D;QACzDJ,GAAG,GAAGb,gBAAgB,CAACW,KAAD,CAAhB,CAAwBE,GAA9B;MACD;IACF,CAJK,CAAN;IAKA,yBAAYF,KAAZ;MAAmBE;IAAnB;EACD,CARD;;EAUA,oBACE;IAAA,wBACE,MAAC,gBAAD;MAAA,wBACE,KAAC,WAAD;QAAa,KAAK,EAAC,WAAnB;QAA+B,KAAK,EAAE,EAAtC;QAAA,uBACE,KAAC,MAAD;UACE,cAAW,WADb;UAEE,KAAK,EAAEK,SAAS,GAAGjC,QAAQ,CAACiC,SAAD,CAAX,GAAyB,IAF3C;UAGE,OAAO,EAAG,GAAEP,KAAK,CAAC2B,KAAM,2BAH1B;UAIE,OAAO,EAAEhB,gBAJX;UAKE,gBAAgB,MALlB;UAME,QAAQ,EAAE,CAAC;YAAEe;UAAF,CAAD,KAAeA,KAAK,IAAIR,iBAAiB,CAAC1B,YAAY,CAACQ,KAAD,EAAQ0B,KAAR,CAAb;QANrD;MADF,EADF,eAYE,KAAC,WAAD;QAAa,KAAK,EAAC,aAAnB;QAAA,uBACE,KAAC,YAAD;UACE,EAAE,EAAG,GAAE1B,KAAK,CAAC2B,KAAM,4BADrB;UAEE,KAAK,EAAEjB,iBAFT;UAGE,QAAQ,EAAGkB,EAAD,IACRA,EAAE,CAACC,MAAH,YAAqBC,gBAArB,IAAyC7B,aAAa,CAACP,aAAa,CAACM,KAAD,EAAQ4B,EAAE,CAACC,MAAH,CAAUE,OAAlB,CAAd;QAJ1D;MADF,EAZF,EAsBGrB,iBAAiB,iBAChB,KAAC,WAAD;QAAa,KAAK,EAAC,eAAnB;QAAmC,QAAQ,EAAE,CAACH,SAA9C;QAAA,uBACE,KAAC,MAAD;UACE,EAAE,EAAG,GAAEP,KAAK,CAAC2B,KAAM,mCADrB;UAEE,KAAK,EAAC,MAFR;UAGE,OAAO,EAAE,IAHX;UAIE,KAAK,EAAElB,YAAY,GAAGA,YAAY,CAACZ,GAAb,CAAiBvB,QAAjB,CAAH,GAAgC,IAJrD;UAKE,OAAO,EAAE0C,aALX;UAME,gBAAgB,MANlB;UAOE,QAAQ,EAAGgB,IAAD,IAAUA,IAAI,IAAI/B,aAAa,CAACR,eAAe,CAACO,KAAD,EAAQgC,IAAR,CAAhB;QAP3C;MADF,EAvBJ;IAAA,EADF,eAsCE,MAAC,gBAAD;MAAA,wBACE,KAAC,WAAD;QAAa,KAAK,EAAC,aAAnB;QAAiC,KAAK,EAAE,EAAxC;QAAA,uBACE,KAAC,MAAD;UACE,cAAW,aADb;UAEE,KAAK,EAAE1B,UAAU,GAAGhC,QAAQ,CAACgC,UAAD,CAAX,GAA0B,IAF7C;UAGE,OAAO,EAAEM,aAHX;UAIE,gBAAgB,MAJlB;UAKE,QAAQ,EAAE,CAAC;YAAEc;UAAF,CAAD,KAAeA,KAAK,IAAIzB,aAAa,CAACV,aAAa,CAACS,KAAD,EAAQ0B,KAAR,CAAd;QALjD;MADF,EADF,eAWE,KAAC,WAAD;QAAa,KAAK,EAAC,aAAnB;QAAiC,KAAK,EAAE,EAAxC;QAAA,uBACE,KAAC,MAAD;UACE,cAAW,aADb;UAEE,KAAK,EAAEvB,WAAW,GAAG7B,QAAQ,CAAC6B,WAAD,CAAX,GAA2B,IAF/C;UAGE,OAAO,EAAEpB,uBAAuB,CAACgB,UAAD,EAAaH,YAAb,CAHlC;UAIE,QAAQ,EAAE,CAAC;YAAE8B;UAAF,CAAD,KAAeA,KAAK,IAAIzB,aAAa,CAACX,cAAc,CAACU,KAAD,EAAQ0B,KAAR,CAAf;QAJjD;MADF,EAXF;IAAA,EAtCF;EAAA,EADF;AA6DD,CApGD;;AAsGA,eAAe5B,mBAAf"},"metadata":{},"sourceType":"module"}