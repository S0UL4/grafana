{"ast":null,"code":"/**\n * See also:\n * https://github.com/grafana/grafana-plugin-sdk-go/blob/main/data/frame_type.go\n *\n * @public\n */\nexport let DataFrameType;\n\n(function (DataFrameType) {\n  DataFrameType[\"TimeSeriesWide\"] = \"timeseries-wide\";\n  DataFrameType[\"TimeSeriesLong\"] = \"timeseries-long\";\n  DataFrameType[\"TimeSeriesMany\"] = \"timeseries-many\";\n  DataFrameType[\"DirectoryListing\"] = \"directory-listing\";\n  DataFrameType[\"HeatmapRows\"] = \"heatmap-rows\";\n  DataFrameType[\"HeatmapCells\"] = \"heatmap-cells\";\n})(DataFrameType || (DataFrameType = {}));","map":{"version":3,"names":["DataFrameType"],"sources":["/home/soula/grafana/packages/grafana-data/src/types/dataFrameTypes.ts"],"sourcesContent":["/**\n * See also:\n * https://github.com/grafana/grafana-plugin-sdk-go/blob/main/data/frame_type.go\n *\n * @public\n */\nexport enum DataFrameType {\n  TimeSeriesWide = 'timeseries-wide',\n  TimeSeriesLong = 'timeseries-long',\n  TimeSeriesMany = 'timeseries-many',\n\n  /** Directory listing */\n  DirectoryListing = 'directory-listing',\n\n  /**\n   * First field is X, the rest are ordinal values used as rows in the heatmap\n   */\n  HeatmapRows = 'heatmap-rows',\n\n  /**\n   * Explicit fields for:\n   *  xMin, yMin, count, ...\n   *\n   * All values in the grid exist and have regular spacing\n   *\n   * If the y value is actually ordinal, use `meta.custom` to specify the bucket lookup values\n   */\n  HeatmapCells = 'heatmap-cells',\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,WAAYA,aAAZ;;WAAYA,a;EAAAA,a;EAAAA,a;EAAAA,a;EAAAA,a;EAAAA,a;EAAAA,a;GAAAA,a,KAAAA,a"},"metadata":{},"sourceType":"module"}