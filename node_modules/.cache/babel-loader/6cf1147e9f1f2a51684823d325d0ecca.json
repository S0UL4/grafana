{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { stylesFactory, withTheme } from '../../themes';\nimport { Icon } from '../Icon/Icon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst getSelectOptionGroupStyles = stylesFactory(theme => {\n  return {\n    header: css`\n      display: flex;\n      align-items: center;\n      justify-content: flex-start;\n      justify-items: center;\n      cursor: pointer;\n      padding: 7px 10px;\n      width: 100%;\n      border-bottom: 1px solid ${theme.colors.bg2};\n\n      &:hover {\n        color: ${theme.colors.textStrong};\n      }\n    `,\n    label: css`\n      flex-grow: 1;\n    `,\n    icon: css`\n      padding-right: 2px;\n    `\n  };\n});\n\nclass UnthemedSelectOptionGroup extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      expanded: false\n    });\n\n    _defineProperty(this, \"onToggleChildren\", () => {\n      this.setState(prevState => ({\n        expanded: !prevState.expanded\n      }));\n    });\n  }\n\n  componentDidMount() {\n    if (this.props.data.expanded) {\n      this.setState({\n        expanded: true\n      });\n    } else if (this.props.selectProps && this.props.selectProps.value) {\n      const {\n        value\n      } = this.props.selectProps.value;\n\n      if (value && this.props.options.some(option => option.value === value)) {\n        this.setState({\n          expanded: true\n        });\n      }\n    }\n  }\n\n  componentDidUpdate(nextProps) {\n    if (nextProps.selectProps.inputValue !== '') {\n      this.setState({\n        expanded: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      children,\n      label,\n      theme\n    } = this.props;\n    const {\n      expanded\n    } = this.state;\n    const styles = getSelectOptionGroupStyles(theme);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.header,\n        onClick: this.onToggleChildren,\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          className: styles.label,\n          children: label\n        }), /*#__PURE__*/_jsx(Icon, {\n          className: styles.icon,\n          name: expanded ? 'angle-up' : 'angle-down'\n        }), ' ']\n      }), expanded && children]\n    });\n  }\n\n}\n\nexport const SelectOptionGroup = withTheme(UnthemedSelectOptionGroup);","map":{"version":3,"names":["css","React","PureComponent","stylesFactory","withTheme","Icon","getSelectOptionGroupStyles","theme","header","colors","bg2","textStrong","label","icon","UnthemedSelectOptionGroup","expanded","setState","prevState","componentDidMount","props","data","selectProps","value","options","some","option","componentDidUpdate","nextProps","inputValue","render","children","state","styles","onToggleChildren","SelectOptionGroup"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Select/SelectOptionGroup.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { GroupProps } from 'react-select';\n\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { stylesFactory, withTheme } from '../../themes';\nimport { Themeable } from '../../types';\nimport { Icon } from '../Icon/Icon';\n\ninterface ExtendedGroupProps extends Omit<GroupProps<any, any>, 'theme'>, Themeable {\n  data: {\n    label: string;\n    expanded: boolean;\n    options: any[];\n  };\n}\n\ninterface State {\n  expanded: boolean;\n}\n\nconst getSelectOptionGroupStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    header: css`\n      display: flex;\n      align-items: center;\n      justify-content: flex-start;\n      justify-items: center;\n      cursor: pointer;\n      padding: 7px 10px;\n      width: 100%;\n      border-bottom: 1px solid ${theme.colors.bg2};\n\n      &:hover {\n        color: ${theme.colors.textStrong};\n      }\n    `,\n    label: css`\n      flex-grow: 1;\n    `,\n    icon: css`\n      padding-right: 2px;\n    `,\n  };\n});\n\nclass UnthemedSelectOptionGroup extends PureComponent<ExtendedGroupProps, State> {\n  state = {\n    expanded: false,\n  };\n\n  componentDidMount() {\n    if (this.props.data.expanded) {\n      this.setState({ expanded: true });\n    } else if (this.props.selectProps && this.props.selectProps.value) {\n      const { value } = this.props.selectProps.value;\n\n      if (value && this.props.options.some((option) => option.value === value)) {\n        this.setState({ expanded: true });\n      }\n    }\n  }\n\n  componentDidUpdate(nextProps: ExtendedGroupProps) {\n    if (nextProps.selectProps.inputValue !== '') {\n      this.setState({ expanded: true });\n    }\n  }\n\n  onToggleChildren = () => {\n    this.setState((prevState) => ({\n      expanded: !prevState.expanded,\n    }));\n  };\n\n  render() {\n    const { children, label, theme } = this.props;\n    const { expanded } = this.state;\n    const styles = getSelectOptionGroupStyles(theme);\n\n    return (\n      <div>\n        <div className={styles.header} onClick={this.onToggleChildren}>\n          <span className={styles.label}>{label}</span>\n          <Icon className={styles.icon} name={expanded ? 'angle-up' : 'angle-down'} />{' '}\n        </div>\n        {expanded && children}\n      </div>\n    );\n  }\n}\n\nexport const SelectOptionGroup = withTheme(UnthemedSelectOptionGroup);\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAKA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,cAAzC;AAEA,SAASC,IAAT,QAAqB,cAArB;;;AAcA,MAAMC,0BAA0B,GAAGH,aAAa,CAAEI,KAAD,IAAyB;EACxE,OAAO;IACLC,MAAM,EAAER,GAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiCO,KAAK,CAACE,MAAN,CAAaC,GAAI;AAClD;AACA;AACA,iBAAiBH,KAAK,CAACE,MAAN,CAAaE,UAAW;AACzC;AACA,KAdS;IAeLC,KAAK,EAAEZ,GAAI;AACf;AACA,KAjBS;IAkBLa,IAAI,EAAEb,GAAI;AACd;AACA;EApBS,CAAP;AAsBD,CAvB+C,CAAhD;;AAyBA,MAAMc,yBAAN,SAAwCZ,aAAxC,CAAiF;EAAA;IAAA;;IAAA,+BACvE;MACNa,QAAQ,EAAE;IADJ,CADuE;;IAAA,0CAuB5D,MAAM;MACvB,KAAKC,QAAL,CAAeC,SAAD,KAAgB;QAC5BF,QAAQ,EAAE,CAACE,SAAS,CAACF;MADO,CAAhB,CAAd;IAGD,CA3B8E;EAAA;;EAK/EG,iBAAiB,GAAG;IAClB,IAAI,KAAKC,KAAL,CAAWC,IAAX,CAAgBL,QAApB,EAA8B;MAC5B,KAAKC,QAAL,CAAc;QAAED,QAAQ,EAAE;MAAZ,CAAd;IACD,CAFD,MAEO,IAAI,KAAKI,KAAL,CAAWE,WAAX,IAA0B,KAAKF,KAAL,CAAWE,WAAX,CAAuBC,KAArD,EAA4D;MACjE,MAAM;QAAEA;MAAF,IAAY,KAAKH,KAAL,CAAWE,WAAX,CAAuBC,KAAzC;;MAEA,IAAIA,KAAK,IAAI,KAAKH,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAyBC,MAAD,IAAYA,MAAM,CAACH,KAAP,KAAiBA,KAArD,CAAb,EAA0E;QACxE,KAAKN,QAAL,CAAc;UAAED,QAAQ,EAAE;QAAZ,CAAd;MACD;IACF;EACF;;EAEDW,kBAAkB,CAACC,SAAD,EAAgC;IAChD,IAAIA,SAAS,CAACN,WAAV,CAAsBO,UAAtB,KAAqC,EAAzC,EAA6C;MAC3C,KAAKZ,QAAL,CAAc;QAAED,QAAQ,EAAE;MAAZ,CAAd;IACD;EACF;;EAQDc,MAAM,GAAG;IACP,MAAM;MAAEC,QAAF;MAAYlB,KAAZ;MAAmBL;IAAnB,IAA6B,KAAKY,KAAxC;IACA,MAAM;MAAEJ;IAAF,IAAe,KAAKgB,KAA1B;IACA,MAAMC,MAAM,GAAG1B,0BAA0B,CAACC,KAAD,CAAzC;IAEA,oBACE;MAAA,wBACE;QAAK,SAAS,EAAEyB,MAAM,CAACxB,MAAvB;QAA+B,OAAO,EAAE,KAAKyB,gBAA7C;QAAA,wBACE;UAAM,SAAS,EAAED,MAAM,CAACpB,KAAxB;UAAA,UAAgCA;QAAhC,EADF,eAEE,KAAC,IAAD;UAAM,SAAS,EAAEoB,MAAM,CAACnB,IAAxB;UAA8B,IAAI,EAAEE,QAAQ,GAAG,UAAH,GAAgB;QAA5D,EAFF,EAE+E,GAF/E;MAAA,EADF,EAKGA,QAAQ,IAAIe,QALf;IAAA,EADF;EASD;;AA3C8E;;AA8CjF,OAAO,MAAMI,iBAAiB,GAAG9B,SAAS,CAACU,yBAAD,CAAnC"},"metadata":{},"sourceType":"module"}