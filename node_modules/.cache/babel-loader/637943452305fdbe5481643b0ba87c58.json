{"ast":null,"code":"// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { find as _find, get as _get } from 'lodash';\n\nfunction getFirstAncestor(span) {\n  return _get(_find(span.references, ({\n    span: ref,\n    refType\n  }) => ref && ref.spanID && (refType === 'CHILD_OF' || refType === 'FOLLOWS_FROM')), 'span');\n}\n\nexport default function spanAncestorIds(span) {\n  const ancestorIDs = [];\n\n  if (!span) {\n    return ancestorIDs;\n  }\n\n  let ref = getFirstAncestor(span);\n\n  while (ref) {\n    ancestorIDs.push(ref.spanID);\n    ref = getFirstAncestor(ref);\n  }\n\n  return ancestorIDs;\n}","map":{"version":3,"names":["find","_find","get","_get","getFirstAncestor","span","references","ref","refType","spanID","spanAncestorIds","ancestorIDs","push"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/utils/span-ancestor-ids.tsx"],"sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { find as _find, get as _get } from 'lodash';\n\nimport { TNil } from '../types';\nimport { TraceSpan } from '../types/trace';\n\nfunction getFirstAncestor(span: TraceSpan): TraceSpan | TNil {\n  return _get(\n    _find(\n      span.references,\n      ({ span: ref, refType }) => ref && ref.spanID && (refType === 'CHILD_OF' || refType === 'FOLLOWS_FROM')\n    ),\n    'span'\n  );\n}\n\nexport default function spanAncestorIds(span: TraceSpan | TNil): string[] {\n  const ancestorIDs: string[] = [];\n  if (!span) {\n    return ancestorIDs;\n  }\n  let ref = getFirstAncestor(span);\n  while (ref) {\n    ancestorIDs.push(ref.spanID);\n    ref = getFirstAncestor(ref);\n  }\n  return ancestorIDs;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAI,IAAIC,KAAjB,EAAwBC,GAAG,IAAIC,IAA/B,QAA2C,QAA3C;;AAKA,SAASC,gBAAT,CAA0BC,IAA1B,EAA6D;EAC3D,OAAOF,IAAI,CACTF,KAAK,CACHI,IAAI,CAACC,UADF,EAEH,CAAC;IAAED,IAAI,EAAEE,GAAR;IAAaC;EAAb,CAAD,KAA4BD,GAAG,IAAIA,GAAG,CAACE,MAAX,KAAsBD,OAAO,KAAK,UAAZ,IAA0BA,OAAO,KAAK,cAA5D,CAFzB,CADI,EAKT,MALS,CAAX;AAOD;;AAED,eAAe,SAASE,eAAT,CAAyBL,IAAzB,EAA2D;EACxE,MAAMM,WAAqB,GAAG,EAA9B;;EACA,IAAI,CAACN,IAAL,EAAW;IACT,OAAOM,WAAP;EACD;;EACD,IAAIJ,GAAG,GAAGH,gBAAgB,CAACC,IAAD,CAA1B;;EACA,OAAOE,GAAP,EAAY;IACVI,WAAW,CAACC,IAAZ,CAAiBL,GAAG,CAACE,MAArB;IACAF,GAAG,GAAGH,gBAAgB,CAACG,GAAD,CAAtB;EACD;;EACD,OAAOI,WAAP;AACD"},"metadata":{},"sourceType":"module"}