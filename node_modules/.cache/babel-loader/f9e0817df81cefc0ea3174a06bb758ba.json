{"ast":null,"code":"export let SortOrder;\n\n(function (SortOrder) {\n  SortOrder[SortOrder[\"AlphaAsc\"] = 1] = \"AlphaAsc\";\n  SortOrder[SortOrder[\"AlphaDesc\"] = 2] = \"AlphaDesc\";\n  SortOrder[SortOrder[\"Importance\"] = 3] = \"Importance\";\n  SortOrder[SortOrder[\"TimeAsc\"] = 4] = \"TimeAsc\";\n  SortOrder[SortOrder[\"TimeDesc\"] = 5] = \"TimeDesc\";\n})(SortOrder || (SortOrder = {}));\n\nexport let ShowOption;\n\n(function (ShowOption) {\n  ShowOption[\"Current\"] = \"current\";\n  ShowOption[\"RecentChanges\"] = \"changes\";\n})(ShowOption || (ShowOption = {}));\n\nexport let GroupMode;\n\n(function (GroupMode) {\n  GroupMode[\"Default\"] = \"default\";\n  GroupMode[\"Custom\"] = \"custom\";\n})(GroupMode || (GroupMode = {}));","map":{"version":3,"names":["SortOrder","ShowOption","GroupMode"],"sources":["/home/soula/grafana/public/app/plugins/panel/alertlist/types.ts"],"sourcesContent":["import { Alert } from 'app/types/unified-alerting';\n\nexport enum SortOrder {\n  AlphaAsc = 1,\n  AlphaDesc,\n  Importance,\n  TimeAsc,\n  TimeDesc,\n}\n\nexport enum ShowOption {\n  Current = 'current',\n  RecentChanges = 'changes',\n}\n\nexport enum GroupMode {\n  Default = 'default',\n  Custom = 'custom',\n}\n\nexport interface AlertListOptions {\n  showOptions: ShowOption;\n  maxItems: number;\n  sortOrder: SortOrder;\n  dashboardAlerts: boolean;\n  alertName: string;\n  dashboardTitle: string;\n  tags: string[];\n  stateFilter: {\n    ok: boolean;\n    paused: boolean;\n    no_data: boolean;\n    execution_error: boolean;\n    alerting: boolean;\n    pending: boolean;\n  };\n  folderId: number;\n}\n\ninterface StateFilter {\n  firing: boolean;\n  pending: boolean;\n  inactive?: boolean; // backwards compat\n  noData: boolean;\n  normal: boolean;\n  error: boolean;\n}\n\nexport interface UnifiedAlertListOptions {\n  maxItems: number;\n  sortOrder: SortOrder;\n  dashboardAlerts: boolean;\n  groupMode: GroupMode;\n  groupBy: string[];\n  alertName: string;\n  showInstances: boolean;\n  folder: { id: number; title: string };\n  stateFilter: StateFilter;\n  alertInstanceLabelFilter: string;\n  datasource: string;\n}\n\nexport type GroupedRules = Map<string, Alert[]>;\n"],"mappings":"AAEA,WAAYA,SAAZ;;WAAYA,S;EAAAA,S,CAAAA,S;EAAAA,S,CAAAA,S;EAAAA,S,CAAAA,S;EAAAA,S,CAAAA,S;EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAQZ,WAAYC,UAAZ;;WAAYA,U;EAAAA,U;EAAAA,U;GAAAA,U,KAAAA,U;;AAKZ,WAAYC,SAAZ;;WAAYA,S;EAAAA,S;EAAAA,S;GAAAA,S,KAAAA,S"},"metadata":{},"sourceType":"module"}