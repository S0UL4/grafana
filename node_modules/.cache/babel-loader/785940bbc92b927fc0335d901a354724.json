{"ast":null,"code":"const _excluded = [\"status\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { PluginSignatureStatus } from '@grafana/data';\nimport { Badge } from '../Badge/Badge';\n/**\n * @public\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * @public\n */\nexport const PluginSignatureBadge = _ref => {\n  let {\n    status\n  } = _ref,\n      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const display = getSignatureDisplayModel(status);\n  return /*#__PURE__*/_jsx(Badge, Object.assign({\n    text: display.text,\n    color: display.color,\n    icon: display.icon,\n    tooltip: display.tooltip\n  }, otherProps));\n};\nPluginSignatureBadge.displayName = 'PluginSignatureBadge';\n\nfunction getSignatureDisplayModel(signature) {\n  if (!signature) {\n    signature = PluginSignatureStatus.invalid;\n  }\n\n  switch (signature) {\n    case PluginSignatureStatus.internal:\n      return {\n        text: 'Core',\n        color: 'blue',\n        tooltip: 'Core plugin that is bundled with Grafana'\n      };\n\n    case PluginSignatureStatus.valid:\n      return {\n        text: 'Signed',\n        icon: 'lock',\n        color: 'green',\n        tooltip: 'Signed and verified plugin'\n      };\n\n    case PluginSignatureStatus.invalid:\n      return {\n        text: 'Invalid signature',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Invalid plugin signature'\n      };\n\n    case PluginSignatureStatus.modified:\n      return {\n        text: 'Modified signature',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Valid signature but content has been modified'\n      };\n\n    case PluginSignatureStatus.missing:\n      return {\n        text: 'Missing signature',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Missing plugin signature'\n      };\n\n    default:\n      return {\n        text: 'Unsigned',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Unsigned external plugin'\n      };\n  }\n}","map":{"version":3,"names":["React","PluginSignatureStatus","Badge","PluginSignatureBadge","status","otherProps","display","getSignatureDisplayModel","text","color","icon","tooltip","displayName","signature","invalid","internal","valid","modified","missing"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/PluginSignatureBadge/PluginSignatureBadge.tsx"],"sourcesContent":["import React, { HTMLAttributes } from 'react';\n\nimport { PluginSignatureStatus } from '@grafana/data';\n\nimport { Badge, BadgeProps } from '../Badge/Badge';\n\n/**\n * @public\n */\nexport interface PluginSignatureBadgeProps extends HTMLAttributes<HTMLDivElement> {\n  status?: PluginSignatureStatus;\n}\n\n/**\n * @public\n */\nexport const PluginSignatureBadge: React.FC<PluginSignatureBadgeProps> = ({ status, ...otherProps }) => {\n  const display = getSignatureDisplayModel(status);\n  return (\n    <Badge\n      text={display.text}\n      color={display.color as any}\n      icon={display.icon}\n      tooltip={display.tooltip}\n      {...otherProps}\n    />\n  );\n};\n\nPluginSignatureBadge.displayName = 'PluginSignatureBadge';\n\nfunction getSignatureDisplayModel(signature?: PluginSignatureStatus): BadgeProps {\n  if (!signature) {\n    signature = PluginSignatureStatus.invalid;\n  }\n\n  switch (signature) {\n    case PluginSignatureStatus.internal:\n      return { text: 'Core', color: 'blue', tooltip: 'Core plugin that is bundled with Grafana' };\n    case PluginSignatureStatus.valid:\n      return { text: 'Signed', icon: 'lock', color: 'green', tooltip: 'Signed and verified plugin' };\n    case PluginSignatureStatus.invalid:\n      return {\n        text: 'Invalid signature',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Invalid plugin signature',\n      };\n    case PluginSignatureStatus.modified:\n      return {\n        text: 'Modified signature',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Valid signature but content has been modified',\n      };\n    case PluginSignatureStatus.missing:\n      return {\n        text: 'Missing signature',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Missing plugin signature',\n      };\n    default:\n      return {\n        text: 'Unsigned',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: 'Unsigned external plugin',\n      };\n  }\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAsC,OAAtC;AAEA,SAASC,qBAAT,QAAsC,eAAtC;AAEA,SAASC,KAAT,QAAkC,gBAAlC;AAEA;AACA;AACA;;;;AAKA;AACA;AACA;AACA,OAAO,MAAMC,oBAAyD,GAAG,QAA+B;EAAA,IAA9B;IAAEC;EAAF,CAA8B;EAAA,IAAjBC,UAAiB;;EACtG,MAAMC,OAAO,GAAGC,wBAAwB,CAACH,MAAD,CAAxC;EACA,oBACE,KAAC,KAAD;IACE,IAAI,EAAEE,OAAO,CAACE,IADhB;IAEE,KAAK,EAAEF,OAAO,CAACG,KAFjB;IAGE,IAAI,EAAEH,OAAO,CAACI,IAHhB;IAIE,OAAO,EAAEJ,OAAO,CAACK;EAJnB,GAKMN,UALN,EADF;AASD,CAXM;AAaPF,oBAAoB,CAACS,WAArB,GAAmC,sBAAnC;;AAEA,SAASL,wBAAT,CAAkCM,SAAlC,EAAiF;EAC/E,IAAI,CAACA,SAAL,EAAgB;IACdA,SAAS,GAAGZ,qBAAqB,CAACa,OAAlC;EACD;;EAED,QAAQD,SAAR;IACE,KAAKZ,qBAAqB,CAACc,QAA3B;MACE,OAAO;QAAEP,IAAI,EAAE,MAAR;QAAgBC,KAAK,EAAE,MAAvB;QAA+BE,OAAO,EAAE;MAAxC,CAAP;;IACF,KAAKV,qBAAqB,CAACe,KAA3B;MACE,OAAO;QAAER,IAAI,EAAE,QAAR;QAAkBE,IAAI,EAAE,MAAxB;QAAgCD,KAAK,EAAE,OAAvC;QAAgDE,OAAO,EAAE;MAAzD,CAAP;;IACF,KAAKV,qBAAqB,CAACa,OAA3B;MACE,OAAO;QACLN,IAAI,EAAE,mBADD;QAELE,IAAI,EAAE,sBAFD;QAGLD,KAAK,EAAE,KAHF;QAILE,OAAO,EAAE;MAJJ,CAAP;;IAMF,KAAKV,qBAAqB,CAACgB,QAA3B;MACE,OAAO;QACLT,IAAI,EAAE,oBADD;QAELE,IAAI,EAAE,sBAFD;QAGLD,KAAK,EAAE,KAHF;QAILE,OAAO,EAAE;MAJJ,CAAP;;IAMF,KAAKV,qBAAqB,CAACiB,OAA3B;MACE,OAAO;QACLV,IAAI,EAAE,mBADD;QAELE,IAAI,EAAE,sBAFD;QAGLD,KAAK,EAAE,KAHF;QAILE,OAAO,EAAE;MAJJ,CAAP;;IAMF;MACE,OAAO;QACLH,IAAI,EAAE,UADD;QAELE,IAAI,EAAE,sBAFD;QAGLD,KAAK,EAAE,KAHF;QAILE,OAAO,EAAE;MAJJ,CAAP;EA3BJ;AAkCD"},"metadata":{},"sourceType":"module"}