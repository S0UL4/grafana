{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\nimport { RolePicker } from './RolePicker'; // @ts-ignore\n\nimport { fetchTeamRoles, updateTeamRoles } from './api';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const TeamRolePicker = ({\n  teamId,\n  orgId,\n  roleOptions,\n  disabled,\n  builtinRolesDisabled\n}) => {\n  const [{\n    loading,\n    value: appliedRoles = []\n  }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      return await fetchTeamRoles(teamId, orgId);\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n\n    return [];\n  }, [orgId, teamId]);\n  useEffect(() => {\n    getTeamRoles();\n  }, [orgId, teamId, getTeamRoles]);\n\n  const onRolesChange = async roles => {\n    await updateTeamRoles(roles, teamId, orgId);\n    await getTeamRoles();\n  };\n\n  return /*#__PURE__*/_jsx(RolePicker, {\n    onRolesChange: onRolesChange,\n    roleOptions: roleOptions,\n    appliedRoles: appliedRoles,\n    isLoading: loading,\n    disabled: disabled,\n    builtinRolesDisabled: builtinRolesDisabled\n  });\n};","map":{"version":3,"names":["React","useEffect","useAsyncFn","RolePicker","fetchTeamRoles","updateTeamRoles","TeamRolePicker","teamId","orgId","roleOptions","disabled","builtinRolesDisabled","loading","value","appliedRoles","getTeamRoles","e","console","error","onRolesChange","roles"],"sources":["/home/soula/grafana/public/app/core/components/RolePicker/TeamRolePicker.tsx"],"sourcesContent":["import React, { FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { Role } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\n// @ts-ignore\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  builtinRolesDisabled?: boolean;\n}\n\nexport const TeamRolePicker: FC<Props> = ({ teamId, orgId, roleOptions, disabled, builtinRolesDisabled }) => {\n  const [{ loading, value: appliedRoles = [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      return await fetchTeamRoles(teamId, orgId);\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n    return [];\n  }, [orgId, teamId]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [orgId, teamId, getTeamRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    await updateTeamRoles(roles, teamId, orgId);\n    await getTeamRoles();\n  };\n\n  return (\n    <RolePicker\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading}\n      disabled={disabled}\n      builtinRolesDisabled={builtinRolesDisabled}\n    />\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAoBC,SAApB,QAAqC,OAArC;AACA,SAASC,UAAT,QAA2B,WAA3B;AAIA,SAASC,UAAT,QAA2B,cAA3B,C,CACA;;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,OAAhD;;AAUA,OAAO,MAAMC,cAAyB,GAAG,CAAC;EAAEC,MAAF;EAAUC,KAAV;EAAiBC,WAAjB;EAA8BC,QAA9B;EAAwCC;AAAxC,CAAD,KAAoE;EAC3G,MAAM,CAAC;IAAEC,OAAF;IAAWC,KAAK,EAAEC,YAAY,GAAG;EAAjC,CAAD,EAAwCC,YAAxC,IAAwDb,UAAU,CAAC,YAAY;IACnF,IAAI;MACF,OAAO,MAAME,cAAc,CAACG,MAAD,EAASC,KAAT,CAA3B;IACD,CAFD,CAEE,OAAOQ,CAAP,EAAU;MACV;MACAC,OAAO,CAACC,KAAR,CAAc,uBAAd;IACD;;IACD,OAAO,EAAP;EACD,CARuE,EAQrE,CAACV,KAAD,EAAQD,MAAR,CARqE,CAAxE;EAUAN,SAAS,CAAC,MAAM;IACdc,YAAY;EACb,CAFQ,EAEN,CAACP,KAAD,EAAQD,MAAR,EAAgBQ,YAAhB,CAFM,CAAT;;EAIA,MAAMI,aAAa,GAAG,MAAOC,KAAP,IAAyB;IAC7C,MAAMf,eAAe,CAACe,KAAD,EAAQb,MAAR,EAAgBC,KAAhB,CAArB;IACA,MAAMO,YAAY,EAAlB;EACD,CAHD;;EAKA,oBACE,KAAC,UAAD;IACE,aAAa,EAAEI,aADjB;IAEE,WAAW,EAAEV,WAFf;IAGE,YAAY,EAAEK,YAHhB;IAIE,SAAS,EAAEF,OAJb;IAKE,QAAQ,EAAEF,QALZ;IAME,oBAAoB,EAAEC;EANxB,EADF;AAUD,CA9BM"},"metadata":{},"sourceType":"module"}