{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { FieldType, formattedValueToString, getDisplayProcessor } from '@grafana/data';\nimport { stylesFactory, useTheme2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const InspectStatsTable = ({\n  timeZone,\n  name,\n  stats\n}) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  if (!stats || !stats.length) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.wrapper,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"section-heading\",\n      children: name\n    }), /*#__PURE__*/_jsx(\"table\", {\n      className: \"filter-table width-30\",\n      children: /*#__PURE__*/_jsx(\"tbody\", {\n        children: stats.map((stat, index) => {\n          return /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              children: stat.displayName\n            }), /*#__PURE__*/_jsx(\"td\", {\n              className: styles.cell,\n              children: formatStat(stat, timeZone, theme)\n            })]\n          }, `${stat.displayName}-${index}`);\n        })\n      })\n    })]\n  });\n};\n\nfunction formatStat(stat, timeZone, theme) {\n  const display = getDisplayProcessor({\n    field: {\n      type: FieldType.number,\n      config: stat\n    },\n    theme,\n    timeZone\n  });\n  return formattedValueToString(display(stat.value));\n}\n\nconst getStyles = stylesFactory(theme => {\n  return {\n    wrapper: css`\n      padding-bottom: ${theme.spacing(2)};\n    `,\n    cell: css`\n      text-align: right;\n    `\n  };\n});","map":{"version":3,"names":["css","React","FieldType","formattedValueToString","getDisplayProcessor","stylesFactory","useTheme2","InspectStatsTable","timeZone","name","stats","theme","styles","getStyles","length","wrapper","map","stat","index","displayName","cell","formatStat","display","field","type","number","config","value","spacing"],"sources":["/home/soula/grafana/public/app/features/inspector/InspectStatsTable.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  QueryResultMetaStat,\n  TimeZone,\n} from '@grafana/data';\nimport { stylesFactory, useTheme2 } from '@grafana/ui';\n\ninterface InspectStatsTableProps {\n  timeZone: TimeZone;\n  name: string;\n  stats: QueryResultMetaStat[];\n}\n\nexport const InspectStatsTable: React.FC<InspectStatsTableProps> = ({ timeZone, name, stats }) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  if (!stats || !stats.length) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className=\"section-heading\">{name}</div>\n      <table className=\"filter-table width-30\">\n        <tbody>\n          {stats.map((stat, index) => {\n            return (\n              <tr key={`${stat.displayName}-${index}`}>\n                <td>{stat.displayName}</td>\n                <td className={styles.cell}>{formatStat(stat, timeZone, theme)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nfunction formatStat(stat: QueryResultMetaStat, timeZone: TimeZone, theme: GrafanaTheme2): string {\n  const display = getDisplayProcessor({\n    field: {\n      type: FieldType.number,\n      config: stat,\n    },\n    theme,\n    timeZone,\n  });\n  return formattedValueToString(display(stat.value));\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      padding-bottom: ${theme.spacing(2)};\n    `,\n    cell: css`\n      text-align: right;\n    `,\n  };\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,SADF,EAEEC,sBAFF,EAGEC,mBAHF,QAOO,eAPP;AAQA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,aAAzC;;;AAQA,OAAO,MAAMC,iBAAmD,GAAG,CAAC;EAAEC,QAAF;EAAYC,IAAZ;EAAkBC;AAAlB,CAAD,KAA+B;EAChG,MAAMC,KAAK,GAAGL,SAAS,EAAvB;EACA,MAAMM,MAAM,GAAGC,SAAS,CAACF,KAAD,CAAxB;;EAEA,IAAI,CAACD,KAAD,IAAU,CAACA,KAAK,CAACI,MAArB,EAA6B;IAC3B,OAAO,IAAP;EACD;;EAED,oBACE;IAAK,SAAS,EAAEF,MAAM,CAACG,OAAvB;IAAA,wBACE;MAAK,SAAS,EAAC,iBAAf;MAAA,UAAkCN;IAAlC,EADF,eAEE;MAAO,SAAS,EAAC,uBAAjB;MAAA,uBACE;QAAA,UACGC,KAAK,CAACM,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;UAC1B,oBACE;YAAA,wBACE;cAAA,UAAKD,IAAI,CAACE;YAAV,EADF,eAEE;cAAI,SAAS,EAAEP,MAAM,CAACQ,IAAtB;cAAA,UAA6BC,UAAU,CAACJ,IAAD,EAAOT,QAAP,EAAiBG,KAAjB;YAAvC,EAFF;UAAA,GAAU,GAAEM,IAAI,CAACE,WAAY,IAAGD,KAAM,EAAtC,CADF;QAMD,CAPA;MADH;IADF,EAFF;EAAA,EADF;AAiBD,CAzBM;;AA2BP,SAASG,UAAT,CAAoBJ,IAApB,EAA+CT,QAA/C,EAAmEG,KAAnE,EAAiG;EAC/F,MAAMW,OAAO,GAAGlB,mBAAmB,CAAC;IAClCmB,KAAK,EAAE;MACLC,IAAI,EAAEtB,SAAS,CAACuB,MADX;MAELC,MAAM,EAAET;IAFH,CAD2B;IAKlCN,KALkC;IAMlCH;EANkC,CAAD,CAAnC;EAQA,OAAOL,sBAAsB,CAACmB,OAAO,CAACL,IAAI,CAACU,KAAN,CAAR,CAA7B;AACD;;AAED,MAAMd,SAAS,GAAGR,aAAa,CAAEM,KAAD,IAA0B;EACxD,OAAO;IACLI,OAAO,EAAEf,GAAI;AACjB,wBAAwBW,KAAK,CAACiB,OAAN,CAAc,CAAd,CAAiB;AACzC,KAHS;IAILR,IAAI,EAAEpB,GAAI;AACd;AACA;EANS,CAAP;AAQD,CAT8B,CAA/B"},"metadata":{},"sourceType":"module"}