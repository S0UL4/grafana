{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { Button, useTheme2 } from '@grafana/ui';\nimport { DEFAULT_STYLE_RULE } from '../layers/data/geojsonLayer';\nimport { defaultStyleConfig } from '../style/types';\nimport { StyleRuleEditor } from './StyleRuleEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GeomapStyleRulesEditor = props => {\n  const {\n    value,\n    onChange,\n    context,\n    item\n  } = props;\n  const theme = useTheme2();\n  const settings = item.settings;\n  const onAddRule = useCallback(() => {\n    const {\n      palette\n    } = theme.visualization;\n    const color = {\n      fixed: palette[Math.floor(Math.random() * palette.length)]\n    };\n    const newRule = [...value, Object.assign({}, DEFAULT_STYLE_RULE, {\n      style: Object.assign({}, defaultStyleConfig, {\n        color\n      })\n    })];\n    onChange(newRule);\n  }, [onChange, value, theme.visualization]);\n  const onRuleChange = useCallback(idx => style => {\n    const copyStyles = [...value];\n\n    if (style) {\n      copyStyles[idx] = style;\n    } else {\n      //assume undefined is only returned on delete\n      copyStyles.splice(idx, 1);\n    }\n\n    onChange(copyStyles);\n  }, [onChange, value]);\n  const styleOptions = value && value.map((style, idx) => {\n    var _style$check;\n\n    const itemSettings = {\n      settings\n    };\n    return /*#__PURE__*/_jsx(StyleRuleEditor, {\n      value: style,\n      onChange: onRuleChange(idx),\n      context: context,\n      item: itemSettings\n    }, `${idx}-${(_style$check = style.check) === null || _style$check === void 0 ? void 0 : _style$check.property}`);\n  });\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [styleOptions, /*#__PURE__*/_jsx(Button, {\n      size: \"sm\",\n      icon: \"plus\",\n      onClick: onAddRule,\n      variant: \"secondary\",\n      \"aria-label\": 'Add geomap style rule',\n      children: 'Add style rule'\n    })]\n  });\n};","map":{"version":3,"names":["React","useCallback","Button","useTheme2","DEFAULT_STYLE_RULE","defaultStyleConfig","StyleRuleEditor","GeomapStyleRulesEditor","props","value","onChange","context","item","theme","settings","onAddRule","palette","visualization","color","fixed","Math","floor","random","length","newRule","style","onRuleChange","idx","copyStyles","splice","styleOptions","map","itemSettings","check","property"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/editor/GeomapStyleRulesEditor.tsx"],"sourcesContent":["import React, { FC, useCallback } from 'react';\n\nimport { StandardEditorProps, StandardEditorsRegistryItem } from '@grafana/data';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { DEFAULT_STYLE_RULE } from '../layers/data/geojsonLayer';\nimport { defaultStyleConfig } from '../style/types';\nimport { FeatureStyleConfig } from '../types';\n\nimport { StyleRuleEditor, StyleRuleEditorSettings } from './StyleRuleEditor';\n\nexport const GeomapStyleRulesEditor: FC<StandardEditorProps<FeatureStyleConfig[], any, any>> = (props) => {\n  const { value, onChange, context, item } = props;\n  const theme = useTheme2();\n\n  const settings = item.settings;\n  const onAddRule = useCallback(() => {\n    const { palette } = theme.visualization;\n    const color = {\n      fixed: palette[Math.floor(Math.random() * palette.length)],\n    };\n\n    const newRule = [...value, { ...DEFAULT_STYLE_RULE, style: { ...defaultStyleConfig, color } }];\n\n    onChange(newRule);\n  }, [onChange, value, theme.visualization]);\n\n  const onRuleChange = useCallback(\n    (idx) => (style: FeatureStyleConfig | undefined) => {\n      const copyStyles = [...value];\n      if (style) {\n        copyStyles[idx] = style;\n      } else {\n        //assume undefined is only returned on delete\n        copyStyles.splice(idx, 1);\n      }\n      onChange(copyStyles);\n    },\n    [onChange, value]\n  );\n\n  const styleOptions =\n    value &&\n    value.map((style, idx: number) => {\n      const itemSettings: StandardEditorsRegistryItem<any, StyleRuleEditorSettings> = {\n        settings,\n      } as any;\n\n      return (\n        <StyleRuleEditor\n          value={style}\n          onChange={onRuleChange(idx)}\n          context={context}\n          item={itemSettings}\n          key={`${idx}-${style.check?.property}`}\n        />\n      );\n    });\n\n  return (\n    <>\n      {styleOptions}\n      <Button size=\"sm\" icon=\"plus\" onClick={onAddRule} variant=\"secondary\" aria-label={'Add geomap style rule'}>\n        {'Add style rule'}\n      </Button>\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAoBC,WAApB,QAAuC,OAAvC;AAGA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,aAAlC;AAEA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,kBAAT,QAAmC,gBAAnC;AAGA,SAASC,eAAT,QAAyD,mBAAzD;;;;AAEA,OAAO,MAAMC,sBAA+E,GAAIC,KAAD,IAAW;EACxG,MAAM;IAAEC,KAAF;IAASC,QAAT;IAAmBC,OAAnB;IAA4BC;EAA5B,IAAqCJ,KAA3C;EACA,MAAMK,KAAK,GAAGV,SAAS,EAAvB;EAEA,MAAMW,QAAQ,GAAGF,IAAI,CAACE,QAAtB;EACA,MAAMC,SAAS,GAAGd,WAAW,CAAC,MAAM;IAClC,MAAM;MAAEe;IAAF,IAAcH,KAAK,CAACI,aAA1B;IACA,MAAMC,KAAK,GAAG;MACZC,KAAK,EAAEH,OAAO,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,OAAO,CAACO,MAAnC,CAAD;IADF,CAAd;IAIA,MAAMC,OAAO,GAAG,CAAC,GAAGf,KAAJ,oBAAgBL,kBAAhB;MAAoCqB,KAAK,oBAAOpB,kBAAP;QAA2Ba;MAA3B;IAAzC,GAAhB;IAEAR,QAAQ,CAACc,OAAD,CAAR;EACD,CAT4B,EAS1B,CAACd,QAAD,EAAWD,KAAX,EAAkBI,KAAK,CAACI,aAAxB,CAT0B,CAA7B;EAWA,MAAMS,YAAY,GAAGzB,WAAW,CAC7B0B,GAAD,IAAUF,KAAD,IAA2C;IAClD,MAAMG,UAAU,GAAG,CAAC,GAAGnB,KAAJ,CAAnB;;IACA,IAAIgB,KAAJ,EAAW;MACTG,UAAU,CAACD,GAAD,CAAV,GAAkBF,KAAlB;IACD,CAFD,MAEO;MACL;MACAG,UAAU,CAACC,MAAX,CAAkBF,GAAlB,EAAuB,CAAvB;IACD;;IACDjB,QAAQ,CAACkB,UAAD,CAAR;EACD,CAV6B,EAW9B,CAAClB,QAAD,EAAWD,KAAX,CAX8B,CAAhC;EAcA,MAAMqB,YAAY,GAChBrB,KAAK,IACLA,KAAK,CAACsB,GAAN,CAAU,CAACN,KAAD,EAAQE,GAAR,KAAwB;IAAA;;IAChC,MAAMK,YAAuE,GAAG;MAC9ElB;IAD8E,CAAhF;IAIA,oBACE,KAAC,eAAD;MACE,KAAK,EAAEW,KADT;MAEE,QAAQ,EAAEC,YAAY,CAACC,GAAD,CAFxB;MAGE,OAAO,EAAEhB,OAHX;MAIE,IAAI,EAAEqB;IAJR,GAKQ,GAAEL,GAAI,IAAP,gBAAUF,KAAK,CAACQ,KAAhB,iDAAU,aAAaC,QAAS,EALvC,CADF;EASD,CAdD,CAFF;EAkBA,oBACE;IAAA,WACGJ,YADH,eAEE,KAAC,MAAD;MAAQ,IAAI,EAAC,IAAb;MAAkB,IAAI,EAAC,MAAvB;MAA8B,OAAO,EAAEf,SAAvC;MAAkD,OAAO,EAAC,WAA1D;MAAsE,cAAY,uBAAlF;MAAA,UACG;IADH,EAFF;EAAA,EADF;AAQD,CAxDM"},"metadata":{},"sourceType":"module"}