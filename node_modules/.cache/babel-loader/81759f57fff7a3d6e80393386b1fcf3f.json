{"ast":null,"code":"import { getBackendSrv } from '@grafana/runtime';\nexport async function getPipeLineEntities() {\n  return await getBackendSrv().get(`api/live/pipeline-entities`).then(data => {\n    return {\n      converter: transformLabel(data, 'converters'),\n      frameProcessors: transformLabel(data, 'frameProcessors'),\n      frameOutputs: transformLabel(data, 'frameOutputs'),\n      getExample: (ruleType, type) => {\n        var _data$, _data$$filter, _data$$filter$;\n\n        return (_data$ = data[`${ruleType}s`]) === null || _data$ === void 0 ? void 0 : (_data$$filter = _data$.filter(option => option.type === type)) === null || _data$$filter === void 0 ? void 0 : (_data$$filter$ = _data$$filter[0]) === null || _data$$filter$ === void 0 ? void 0 : _data$$filter$['example'];\n      }\n    };\n  });\n}\nexport function transformLabel(data, key) {\n  if (Array.isArray(data)) {\n    return data.map(d => ({\n      label: d[key],\n      value: d[key]\n    }));\n  }\n\n  return data[key].map(typeObj => ({\n    label: typeObj.type,\n    value: typeObj.type\n  }));\n}","map":{"version":3,"names":["getBackendSrv","getPipeLineEntities","get","then","data","converter","transformLabel","frameProcessors","frameOutputs","getExample","ruleType","type","filter","option","key","Array","isArray","map","d","label","value","typeObj"],"sources":["/home/soula/grafana/public/app/features/live/pages/utils.ts"],"sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\n\nimport { PipelineListOption, PipeLineEntitiesInfo } from './types';\n\nexport async function getPipeLineEntities(): Promise<PipeLineEntitiesInfo> {\n  return await getBackendSrv()\n    .get(`api/live/pipeline-entities`)\n    .then((data) => {\n      return {\n        converter: transformLabel(data, 'converters'),\n        frameProcessors: transformLabel(data, 'frameProcessors'),\n        frameOutputs: transformLabel(data, 'frameOutputs'),\n        getExample: (ruleType, type) => {\n          return data[`${ruleType}s`]?.filter((option: PipelineListOption) => option.type === type)?.[0]?.['example'];\n        },\n      };\n    });\n}\n\nexport function transformLabel(data: any, key: keyof typeof data) {\n  if (Array.isArray(data)) {\n    return data.map((d) => ({\n      label: d[key],\n      value: d[key],\n    }));\n  }\n  return data[key].map((typeObj: PipelineListOption) => ({\n    label: typeObj.type,\n    value: typeObj.type,\n  }));\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AAIA,OAAO,eAAeC,mBAAf,GAAoE;EACzE,OAAO,MAAMD,aAAa,GACvBE,GADU,CACL,4BADK,EAEVC,IAFU,CAEJC,IAAD,IAAU;IACd,OAAO;MACLC,SAAS,EAAEC,cAAc,CAACF,IAAD,EAAO,YAAP,CADpB;MAELG,eAAe,EAAED,cAAc,CAACF,IAAD,EAAO,iBAAP,CAF1B;MAGLI,YAAY,EAAEF,cAAc,CAACF,IAAD,EAAO,cAAP,CAHvB;MAILK,UAAU,EAAE,CAACC,QAAD,EAAWC,IAAX,KAAoB;QAAA;;QAC9B,iBAAOP,IAAI,CAAE,GAAEM,QAAS,GAAb,CAAX,4DAAO,OAAsBE,MAAtB,CAA8BC,MAAD,IAAgCA,MAAM,CAACF,IAAP,KAAgBA,IAA7E,CAAP,oEAAO,cAAqF,CAArF,CAAP,mDAAO,eAA0F,SAA1F,CAAP;MACD;IANI,CAAP;EAQD,CAXU,CAAb;AAYD;AAED,OAAO,SAASL,cAAT,CAAwBF,IAAxB,EAAmCU,GAAnC,EAA2D;EAChE,IAAIC,KAAK,CAACC,OAAN,CAAcZ,IAAd,CAAJ,EAAyB;IACvB,OAAOA,IAAI,CAACa,GAAL,CAAUC,CAAD,KAAQ;MACtBC,KAAK,EAAED,CAAC,CAACJ,GAAD,CADc;MAEtBM,KAAK,EAAEF,CAAC,CAACJ,GAAD;IAFc,CAAR,CAAT,CAAP;EAID;;EACD,OAAOV,IAAI,CAACU,GAAD,CAAJ,CAAUG,GAAV,CAAeI,OAAD,KAAkC;IACrDF,KAAK,EAAEE,OAAO,CAACV,IADsC;IAErDS,KAAK,EAAEC,OAAO,CAACV;EAFsC,CAAlC,CAAd,CAAP;AAID"},"metadata":{},"sourceType":"module"}