{"ast":null,"code":"import { css } from '@emotion/css';\nimport { startCase, uniqBy } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { getSelectStyles, Select, useStyles2, useTheme2 } from '@grafana/ui';\nimport { INNER_LABEL_WIDTH, LABEL_WIDTH, SELECT_WIDTH } from '../constants';\nimport { QueryEditorField, QueryEditorRow } from '.';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function Metrics(props) {\n  const [state, setState] = useState({\n    metricDescriptors: [],\n    metrics: [],\n    services: [],\n    service: '',\n    metric: '',\n    projectName: null\n  });\n  const theme = useTheme2();\n  const selectStyles = getSelectStyles(theme);\n  const customStyle = useStyles2(getStyles);\n  const {\n    services,\n    service,\n    metrics,\n    metricDescriptors\n  } = state;\n  const {\n    metricType,\n    templateVariableOptions,\n    projectName,\n    templateSrv,\n    datasource,\n    onChange,\n    children\n  } = props;\n  const getSelectedMetricDescriptor = useCallback((metricDescriptors, metricType) => {\n    return metricDescriptors.find(md => md.type === templateSrv.replace(metricType));\n  }, [templateSrv]);\n  useEffect(() => {\n    const getMetricsList = metricDescriptors => {\n      const selectedMetricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n\n      if (!selectedMetricDescriptor) {\n        return [];\n      }\n\n      const metricsByService = metricDescriptors.filter(m => m.service === selectedMetricDescriptor.service).map(m => ({\n        service: m.service,\n        value: m.type,\n        label: m.displayName,\n        component: function optionComponent() {\n          return /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: customStyle,\n              children: m.type\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: selectStyles.optionDescription,\n              children: m.description\n            })]\n          });\n        }\n      }));\n      return metricsByService;\n    };\n\n    const loadMetricDescriptors = async () => {\n      if (projectName) {\n        const metricDescriptors = await datasource.getMetricTypes(projectName);\n        const services = getServicesList(metricDescriptors);\n        const metrics = getMetricsList(metricDescriptors);\n        const service = metrics.length > 0 ? metrics[0].service : '';\n        const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n        setState(prevState => Object.assign({}, prevState, {\n          metricDescriptors,\n          services,\n          metrics,\n          service: service,\n          metricDescriptor\n        }));\n      }\n    };\n\n    loadMetricDescriptors();\n  }, [datasource, getSelectedMetricDescriptor, metricType, projectName, customStyle, selectStyles.optionDescription]);\n\n  const onServiceChange = ({\n    value: service\n  }) => {\n    const metrics = metricDescriptors.filter(m => m.service === templateSrv.replace(service)).map(m => ({\n      service: m.service,\n      value: m.type,\n      label: m.displayName,\n      description: m.description\n    }));\n\n    if (metrics.length > 0 && !metrics.some(m => m.value === templateSrv.replace(metricType))) {\n      onMetricTypeChange(metrics[0], {\n        service,\n        metrics\n      });\n    } else {\n      setState(Object.assign({}, state, {\n        service,\n        metrics\n      }));\n    }\n  };\n\n  const onMetricTypeChange = ({\n    value\n  }, extra = {}) => {\n    const metricDescriptor = getSelectedMetricDescriptor(state.metricDescriptors, value);\n    setState(Object.assign({}, state, {\n      metricDescriptor\n    }, extra));\n    onChange(Object.assign({}, metricDescriptor, {\n      type: value\n    }));\n  };\n\n  const getServicesList = metricDescriptors => {\n    const services = metricDescriptors.map(m => ({\n      value: m.service,\n      label: startCase(m.serviceShortName)\n    }));\n    return services.length > 0 ? uniqBy(services, s => s.value) : [];\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(QueryEditorRow, {\n      children: [/*#__PURE__*/_jsx(QueryEditorField, {\n        labelWidth: LABEL_WIDTH,\n        label: \"Service\",\n        htmlFor: `${props.refId}-service`,\n        children: /*#__PURE__*/_jsx(Select, {\n          width: SELECT_WIDTH,\n          onChange: onServiceChange,\n          value: [...services, ...templateVariableOptions].find(s => s.value === service),\n          options: [{\n            label: 'Template Variables',\n            options: templateVariableOptions\n          }, ...services],\n          placeholder: \"Select Services\",\n          inputId: `${props.refId}-service`\n        })\n      }), /*#__PURE__*/_jsx(QueryEditorField, {\n        label: \"Metric name\",\n        labelWidth: INNER_LABEL_WIDTH,\n        htmlFor: `${props.refId}-select-metric`,\n        children: /*#__PURE__*/_jsx(Select, {\n          width: SELECT_WIDTH,\n          onChange: onMetricTypeChange,\n          value: [...metrics, ...templateVariableOptions].find(s => s.value === metricType),\n          options: [{\n            label: 'Template Variables',\n            options: templateVariableOptions\n          }, ...metrics],\n          placeholder: \"Select Metric\",\n          inputId: `${props.refId}-select-metric`\n        })\n      })]\n    }), children(state.metricDescriptor)]\n  });\n}\n\nconst getStyles = theme => css`\n  label: grafana-select-option-description;\n  font-weight: normal;\n  font-style: italic;\n  color: ${theme.colors.text.secondary};\n`;","map":{"version":3,"names":["css","startCase","uniqBy","React","useCallback","useEffect","useState","getSelectStyles","Select","useStyles2","useTheme2","INNER_LABEL_WIDTH","LABEL_WIDTH","SELECT_WIDTH","QueryEditorField","QueryEditorRow","Metrics","props","state","setState","metricDescriptors","metrics","services","service","metric","projectName","theme","selectStyles","customStyle","getStyles","metricType","templateVariableOptions","templateSrv","datasource","onChange","children","getSelectedMetricDescriptor","find","md","type","replace","getMetricsList","selectedMetricDescriptor","metricsByService","filter","m","map","value","label","displayName","component","optionComponent","optionDescription","description","loadMetricDescriptors","getMetricTypes","getServicesList","length","metricDescriptor","prevState","onServiceChange","some","onMetricTypeChange","extra","serviceShortName","s","refId","options","colors","text","secondary"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/Metrics.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { startCase, uniqBy } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { getSelectStyles, Select, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { INNER_LABEL_WIDTH, LABEL_WIDTH, SELECT_WIDTH } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { MetricDescriptor } from '../types';\n\nimport { QueryEditorField, QueryEditorRow } from '.';\n\nexport interface Props {\n  refId: string;\n  onChange: (metricDescriptor: MetricDescriptor) => void;\n  templateSrv: TemplateSrv;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n  projectName: string;\n  metricType: string;\n  children: (metricDescriptor?: MetricDescriptor) => JSX.Element;\n}\n\ninterface State {\n  metricDescriptors: MetricDescriptor[];\n  metrics: any[];\n  services: any[];\n  service: string;\n  metric: string;\n  metricDescriptor?: MetricDescriptor;\n  projectName: string | null;\n}\n\nexport function Metrics(props: Props) {\n  const [state, setState] = useState<State>({\n    metricDescriptors: [],\n    metrics: [],\n    services: [],\n    service: '',\n    metric: '',\n    projectName: null,\n  });\n\n  const theme = useTheme2();\n  const selectStyles = getSelectStyles(theme);\n\n  const customStyle = useStyles2(getStyles);\n\n  const { services, service, metrics, metricDescriptors } = state;\n  const { metricType, templateVariableOptions, projectName, templateSrv, datasource, onChange, children } = props;\n\n  const getSelectedMetricDescriptor = useCallback(\n    (metricDescriptors: MetricDescriptor[], metricType: string) => {\n      return metricDescriptors.find((md) => md.type === templateSrv.replace(metricType))!;\n    },\n    [templateSrv]\n  );\n\n  useEffect(() => {\n    const getMetricsList = (metricDescriptors: MetricDescriptor[]) => {\n      const selectedMetricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n      if (!selectedMetricDescriptor) {\n        return [];\n      }\n\n      const metricsByService = metricDescriptors\n        .filter((m) => m.service === selectedMetricDescriptor.service)\n        .map((m) => ({\n          service: m.service,\n          value: m.type,\n          label: m.displayName,\n          component: function optionComponent() {\n            return (\n              <div>\n                <div className={customStyle}>{m.type}</div>\n                <div className={selectStyles.optionDescription}>{m.description}</div>\n              </div>\n            );\n          },\n        }));\n      return metricsByService;\n    };\n\n    const loadMetricDescriptors = async () => {\n      if (projectName) {\n        const metricDescriptors = await datasource.getMetricTypes(projectName);\n        const services = getServicesList(metricDescriptors);\n        const metrics = getMetricsList(metricDescriptors);\n        const service = metrics.length > 0 ? metrics[0].service : '';\n        const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n        setState((prevState) => ({\n          ...prevState,\n          metricDescriptors,\n          services,\n          metrics,\n          service: service,\n          metricDescriptor,\n        }));\n      }\n    };\n    loadMetricDescriptors();\n  }, [datasource, getSelectedMetricDescriptor, metricType, projectName, customStyle, selectStyles.optionDescription]);\n\n  const onServiceChange = ({ value: service }: any) => {\n    const metrics = metricDescriptors\n      .filter((m: MetricDescriptor) => m.service === templateSrv.replace(service))\n      .map((m: MetricDescriptor) => ({\n        service: m.service,\n        value: m.type,\n        label: m.displayName,\n        description: m.description,\n      }));\n\n    if (metrics.length > 0 && !metrics.some((m) => m.value === templateSrv.replace(metricType))) {\n      onMetricTypeChange(metrics[0], { service, metrics });\n    } else {\n      setState({ ...state, service, metrics });\n    }\n  };\n\n  const onMetricTypeChange = ({ value }: SelectableValue<string>, extra: any = {}) => {\n    const metricDescriptor = getSelectedMetricDescriptor(state.metricDescriptors, value!);\n    setState({ ...state, metricDescriptor, ...extra });\n    onChange({ ...metricDescriptor, type: value! });\n  };\n\n  const getServicesList = (metricDescriptors: MetricDescriptor[]) => {\n    const services = metricDescriptors.map((m) => ({\n      value: m.service,\n      label: startCase(m.serviceShortName),\n    }));\n\n    return services.length > 0 ? uniqBy(services, (s) => s.value) : [];\n  };\n\n  return (\n    <>\n      <QueryEditorRow>\n        <QueryEditorField labelWidth={LABEL_WIDTH} label=\"Service\" htmlFor={`${props.refId}-service`}>\n          <Select\n            width={SELECT_WIDTH}\n            onChange={onServiceChange}\n            value={[...services, ...templateVariableOptions].find((s) => s.value === service)}\n            options={[\n              {\n                label: 'Template Variables',\n                options: templateVariableOptions,\n              },\n              ...services,\n            ]}\n            placeholder=\"Select Services\"\n            inputId={`${props.refId}-service`}\n          ></Select>\n        </QueryEditorField>\n        <QueryEditorField label=\"Metric name\" labelWidth={INNER_LABEL_WIDTH} htmlFor={`${props.refId}-select-metric`}>\n          <Select\n            width={SELECT_WIDTH}\n            onChange={onMetricTypeChange}\n            value={[...metrics, ...templateVariableOptions].find((s) => s.value === metricType)}\n            options={[\n              {\n                label: 'Template Variables',\n                options: templateVariableOptions,\n              },\n              ...metrics,\n            ]}\n            placeholder=\"Select Metric\"\n            inputId={`${props.refId}-select-metric`}\n          ></Select>\n        </QueryEditorField>\n      </QueryEditorRow>\n\n      {children(state.metricDescriptor)}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => css`\n  label: grafana-select-option-description;\n  font-weight: normal;\n  font-style: italic;\n  color: ${theme.colors.text.secondary};\n`;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}