{"ast":null,"code":"// Code based on Material UI\n// The MIT License (MIT)\n// Copyright (c) 2014 Call-Em-All\n\n/** @beta */\nconst defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\nconst defaultFontFamilyMonospace = \"'Roboto Mono', monospace\";\nexport function createTypography(colors, typographyInput = {}) {\n  const {\n    fontFamily = defaultFontFamily,\n    fontFamilyMonospace = defaultFontFamilyMonospace,\n    // The default font size of the Material Specification.\n    fontSize = 14,\n    // px\n    fontWeightLight = 300,\n    fontWeightRegular = 400,\n    fontWeightMedium = 500,\n    fontWeightBold = 500,\n    // Tell Grafana-UI what's the font-size on the html element.\n    // 16px is the default font-size used by browsers.\n    htmlFontSize = 14\n  } = typographyInput;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof fontSize !== 'number') {\n      console.error('Grafana-UI: `fontSize` is required to be a number.');\n    }\n\n    if (typeof htmlFontSize !== 'number') {\n      console.error('Grafana-UI: `htmlFontSize` is required to be a number.');\n    }\n  }\n\n  const coef = fontSize / 14;\n\n  const pxToRem = size => `${size / htmlFontSize * coef}rem`;\n\n  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => Object.assign({\n    fontFamily,\n    fontWeight,\n    fontSize: pxToRem(size),\n    lineHeight\n  }, fontFamily === defaultFontFamily ? {\n    letterSpacing: `${round(letterSpacing / size)}em`\n  } : {}, casing);\n\n  const variants = {\n    h1: buildVariant(fontWeightLight, 28, 1.167, -0.25),\n    h2: buildVariant(fontWeightLight, 24, 1.2, 0),\n    h3: buildVariant(fontWeightRegular, 21, 1.167, 0),\n    h4: buildVariant(fontWeightRegular, 18, 1.235, 0.25),\n    h5: buildVariant(fontWeightRegular, 16, 1.334, 0),\n    h6: buildVariant(fontWeightMedium, 14, 1.6, 0.15),\n    body: buildVariant(fontWeightRegular, 14, 1.5, 0.15),\n    bodySmall: buildVariant(fontWeightRegular, 12, 1.5, 0.15)\n  };\n  const size = {\n    base: '14px',\n    xs: '10px',\n    sm: '12px',\n    md: '14px',\n    lg: '18px'\n  };\n  return Object.assign({\n    htmlFontSize,\n    pxToRem,\n    fontFamily,\n    fontFamilyMonospace,\n    fontSize,\n    fontWeightLight,\n    fontWeightRegular,\n    fontWeightMedium,\n    fontWeightBold,\n    size\n  }, variants);\n}\n\nfunction round(value) {\n  return Math.round(value * 1e5) / 1e5;\n}","map":{"version":3,"names":["defaultFontFamily","defaultFontFamilyMonospace","createTypography","colors","typographyInput","fontFamily","fontFamilyMonospace","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","process","env","NODE_ENV","console","error","coef","pxToRem","size","buildVariant","fontWeight","lineHeight","letterSpacing","casing","round","variants","h1","h2","h3","h4","h5","h6","body","bodySmall","base","xs","sm","md","lg","value","Math"],"sources":["/home/soula/grafana/packages/grafana-data/src/themes/createTypography.ts"],"sourcesContent":["// Code based on Material UI\n// The MIT License (MIT)\n// Copyright (c) 2014 Call-Em-All\n\nimport { ThemeColors } from './createColors';\n\n/** @beta */\nexport interface ThemeTypography {\n  fontFamily: string;\n  fontFamilyMonospace: string;\n  fontSize: number;\n  fontWeightLight: number;\n  fontWeightRegular: number;\n  fontWeightMedium: number;\n  fontWeightBold: number;\n\n  // The font-size on the html element.\n  htmlFontSize?: number;\n\n  h1: ThemeTypographyVariant;\n  h2: ThemeTypographyVariant;\n  h3: ThemeTypographyVariant;\n  h4: ThemeTypographyVariant;\n  h5: ThemeTypographyVariant;\n  h6: ThemeTypographyVariant;\n\n  body: ThemeTypographyVariant;\n  bodySmall: ThemeTypographyVariant;\n\n  /**\n   * @deprecated\n   * from legacy old theme\n   * */\n  size: {\n    base: string;\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n  };\n\n  pxToRem: (px: number) => string;\n}\n\nexport interface ThemeTypographyVariant {\n  fontSize: string;\n  fontWeight: number;\n  lineHeight: number;\n  fontFamily: string;\n  letterSpacing?: string;\n}\n\nexport interface ThemeTypographyInput {\n  fontFamily?: string;\n  fontFamilyMonospace?: string;\n  fontSize?: number;\n  fontWeightLight?: number;\n  fontWeightRegular?: number;\n  fontWeightMedium?: number;\n  fontWeightBold?: number;\n  // hat's the font-size on the html element.\n  // 16px is the default font-size used by browsers.\n  htmlFontSize?: number;\n}\n\nconst defaultFontFamily = '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif';\nconst defaultFontFamilyMonospace = \"'Roboto Mono', monospace\";\n\nexport function createTypography(colors: ThemeColors, typographyInput: ThemeTypographyInput = {}): ThemeTypography {\n  const {\n    fontFamily = defaultFontFamily,\n    fontFamilyMonospace = defaultFontFamilyMonospace,\n    // The default font size of the Material Specification.\n    fontSize = 14, // px\n    fontWeightLight = 300,\n    fontWeightRegular = 400,\n    fontWeightMedium = 500,\n    fontWeightBold = 500,\n    // Tell Grafana-UI what's the font-size on the html element.\n    // 16px is the default font-size used by browsers.\n    htmlFontSize = 14,\n  } = typographyInput;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof fontSize !== 'number') {\n      console.error('Grafana-UI: `fontSize` is required to be a number.');\n    }\n\n    if (typeof htmlFontSize !== 'number') {\n      console.error('Grafana-UI: `htmlFontSize` is required to be a number.');\n    }\n  }\n\n  const coef = fontSize / 14;\n  const pxToRem = (size: number) => `${(size / htmlFontSize) * coef}rem`;\n  const buildVariant = (\n    fontWeight: number,\n    size: number,\n    lineHeight: number,\n    letterSpacing: number,\n    casing?: object\n  ): ThemeTypographyVariant => ({\n    fontFamily,\n    fontWeight,\n    fontSize: pxToRem(size),\n    lineHeight,\n    ...(fontFamily === defaultFontFamily ? { letterSpacing: `${round(letterSpacing / size)}em` } : {}),\n    ...casing,\n  });\n\n  const variants = {\n    h1: buildVariant(fontWeightLight, 28, 1.167, -0.25),\n    h2: buildVariant(fontWeightLight, 24, 1.2, 0),\n    h3: buildVariant(fontWeightRegular, 21, 1.167, 0),\n    h4: buildVariant(fontWeightRegular, 18, 1.235, 0.25),\n    h5: buildVariant(fontWeightRegular, 16, 1.334, 0),\n    h6: buildVariant(fontWeightMedium, 14, 1.6, 0.15),\n    body: buildVariant(fontWeightRegular, 14, 1.5, 0.15),\n    bodySmall: buildVariant(fontWeightRegular, 12, 1.5, 0.15),\n  };\n\n  const size = {\n    base: '14px',\n    xs: '10px',\n    sm: '12px',\n    md: '14px',\n    lg: '18px',\n  };\n\n  return {\n    htmlFontSize,\n    pxToRem,\n    fontFamily,\n    fontFamilyMonospace,\n    fontSize,\n    fontWeightLight,\n    fontWeightRegular,\n    fontWeightMedium,\n    fontWeightBold,\n    size,\n    ...variants,\n  };\n}\n\nfunction round(value: number) {\n  return Math.round(value * 1e5) / 1e5;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}