{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { BusEventBase, BusEventWithPayload } from '@grafana/data';\n/**\n * Called when a dashboard is refreshed\n *\n * @public\n */\n\nexport class RefreshEvent extends BusEventBase {}\n/**\n * Called when the theme settings change\n *\n * @public\n */\n\n_defineProperty(RefreshEvent, \"type\", 'refresh');\n\nexport class ThemeChangedEvent extends BusEventWithPayload {}\n/**\n * Called when time range is updated\n *\n * @public\n */\n\n_defineProperty(ThemeChangedEvent, \"type\", 'theme-changed');\n\nexport class TimeRangeUpdatedEvent extends BusEventWithPayload {}\n/**\n * Called to copy a panel JSON into local storage\n *\n * @public\n */\n\n_defineProperty(TimeRangeUpdatedEvent, \"type\", 'time-range-updated');\n\nexport class CopyPanelEvent extends BusEventWithPayload {} // Internal singleton instance\n\n_defineProperty(CopyPanelEvent, \"type\", 'copy-panel');\n\nlet singletonInstance;\n/**\n * Used during startup by Grafana to set the setAppEvents so it is available\n * via the {@link setAppEvents} to the rest of the application.\n *\n * @internal\n */\n\nexport function setAppEvents(instance) {\n  singletonInstance = instance;\n}\n/**\n * Used to retrieve an event bus that manages application level events\n *\n * @public\n */\n\nexport function getAppEvents() {\n  return singletonInstance;\n}","map":{"version":3,"names":["BusEventBase","BusEventWithPayload","RefreshEvent","ThemeChangedEvent","TimeRangeUpdatedEvent","CopyPanelEvent","singletonInstance","setAppEvents","instance","getAppEvents"],"sources":["/home/soula/grafana/packages/grafana-runtime/src/services/appEvents.ts"],"sourcesContent":["import { BusEventBase, BusEventWithPayload, EventBus, GrafanaTheme2, PanelModel, TimeRange } from '@grafana/data';\n\n/**\n * Called when a dashboard is refreshed\n *\n * @public\n */\nexport class RefreshEvent extends BusEventBase {\n  static type = 'refresh';\n}\n\n/**\n * Called when the theme settings change\n *\n * @public\n */\nexport class ThemeChangedEvent extends BusEventWithPayload<GrafanaTheme2> {\n  static type = 'theme-changed';\n}\n\n/**\n * Called when time range is updated\n *\n * @public\n */\nexport class TimeRangeUpdatedEvent extends BusEventWithPayload<TimeRange> {\n  static type = 'time-range-updated';\n}\n\n/**\n * Called to copy a panel JSON into local storage\n *\n * @public\n */\nexport class CopyPanelEvent extends BusEventWithPayload<PanelModel> {\n  static type = 'copy-panel';\n}\n\n// Internal singleton instance\nlet singletonInstance: EventBus;\n\n/**\n * Used during startup by Grafana to set the setAppEvents so it is available\n * via the {@link setAppEvents} to the rest of the application.\n *\n * @internal\n */\nexport function setAppEvents(instance: EventBus) {\n  singletonInstance = instance;\n}\n\n/**\n * Used to retrieve an event bus that manages application level events\n *\n * @public\n */\nexport function getAppEvents(): EventBus {\n  return singletonInstance;\n}\n"],"mappings":";;AAAA,SAASA,YAAT,EAAuBC,mBAAvB,QAAkG,eAAlG;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAN,SAA2BF,YAA3B,CAAwC;AAI/C;AACA;AACA;AACA;AACA;;gBARaE,Y,UACG,S;;AAQhB,OAAO,MAAMC,iBAAN,SAAgCF,mBAAhC,CAAmE;AAI1E;AACA;AACA;AACA;AACA;;gBARaE,iB,UACG,e;;AAQhB,OAAO,MAAMC,qBAAN,SAAoCH,mBAApC,CAAmE;AAI1E;AACA;AACA;AACA;AACA;;gBARaG,qB,UACG,oB;;AAQhB,OAAO,MAAMC,cAAN,SAA6BJ,mBAA7B,CAA6D,E,CAIpE;;gBAJaI,c,UACG,Y;;AAIhB,IAAIC,iBAAJ;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,QAAtB,EAA0C;EAC/CF,iBAAiB,GAAGE,QAApB;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,GAAkC;EACvC,OAAOH,iBAAP;AACD"},"metadata":{},"sourceType":"module"}