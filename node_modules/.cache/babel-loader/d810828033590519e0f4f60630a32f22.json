{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { vectorToArray } from './vectorToArray';\n/**\n * RowVector makes the row values look like a vector\n * @internal\n */\n\nexport class RowVector {\n  constructor(columns) {\n    _defineProperty(this, \"rowIndex\", 0);\n\n    this.columns = columns;\n  }\n\n  get length() {\n    return this.columns.length;\n  }\n\n  get(index) {\n    return this.columns[index].get(this.rowIndex);\n  }\n\n  toArray() {\n    return vectorToArray(this);\n  }\n\n  toJSON() {\n    return vectorToArray(this);\n  }\n\n}","map":{"version":3,"names":["vectorToArray","RowVector","constructor","columns","length","get","index","rowIndex","toArray","toJSON"],"sources":["/home/soula/grafana/packages/grafana-data/src/vector/RowVector.ts"],"sourcesContent":["import { Vector } from '../types';\n\nimport { vectorToArray } from './vectorToArray';\n\n/**\n * RowVector makes the row values look like a vector\n * @internal\n */\nexport class RowVector implements Vector {\n  constructor(private columns: Vector[]) {}\n\n  rowIndex = 0;\n\n  get length(): number {\n    return this.columns.length;\n  }\n\n  get(index: number): number {\n    return this.columns[index].get(this.rowIndex);\n  }\n\n  toArray(): number[] {\n    return vectorToArray(this);\n  }\n\n  toJSON(): number[] {\n    return vectorToArray(this);\n  }\n}\n"],"mappings":";;AAEA,SAASA,aAAT,QAA8B,iBAA9B;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAN,CAAkC;EACvCC,WAAW,CAASC,OAAT,EAA4B;IAAA,kCAE5B,CAF4B;;IAAA,KAAnBA,OAAmB,GAAnBA,OAAmB;EAAE;;EAI/B,IAANC,MAAM,GAAW;IACnB,OAAO,KAAKD,OAAL,CAAaC,MAApB;EACD;;EAEDC,GAAG,CAACC,KAAD,EAAwB;IACzB,OAAO,KAAKH,OAAL,CAAaG,KAAb,EAAoBD,GAApB,CAAwB,KAAKE,QAA7B,CAAP;EACD;;EAEDC,OAAO,GAAa;IAClB,OAAOR,aAAa,CAAC,IAAD,CAApB;EACD;;EAEDS,MAAM,GAAa;IACjB,OAAOT,aAAa,CAAC,IAAD,CAApB;EACD;;AAnBsC"},"metadata":{},"sourceType":"module"}