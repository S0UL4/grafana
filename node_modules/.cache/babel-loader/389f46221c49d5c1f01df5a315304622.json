{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { from } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CustomVariableSupport } from '@grafana/data';\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport {\n  constructor(datasource) {\n    super();\n\n    _defineProperty(this, \"metricFindQuery\", void 0);\n\n    _defineProperty(this, \"editor\", CloudMonitoringVariableQueryEditor);\n\n    this.datasource = datasource;\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n    this.query = this.query.bind(this);\n  }\n\n  query(request) {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(mergeMap(() => executeObservable), map(data => ({\n      data\n    })));\n  }\n\n}","map":{"version":3,"names":["from","map","mergeMap","CustomVariableSupport","CloudMonitoringMetricFindQuery","CloudMonitoringVariableQueryEditor","CloudMonitoringVariableSupport","constructor","datasource","metricFindQuery","query","bind","request","executeObservable","execute","targets","ensureGCEDefaultProject","pipe","data"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/variables.ts"],"sourcesContent":["import { from, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery } from './types';\n\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport<\n  CloudMonitoringDatasource,\n  CloudMonitoringVariableQuery\n> {\n  private readonly metricFindQuery: CloudMonitoringMetricFindQuery;\n\n  constructor(private readonly datasource: CloudMonitoringDatasource) {\n    super();\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n    this.query = this.query.bind(this);\n  }\n\n  editor = CloudMonitoringVariableQueryEditor;\n\n  query(request: DataQueryRequest<CloudMonitoringVariableQuery>): Observable<DataQueryResponse> {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(\n      mergeMap(() => executeObservable),\n      map((data) => ({ data }))\n    );\n  }\n}\n"],"mappings":";;AAAA,SAASA,IAAT,QAAiC,MAAjC;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAEA,SAASC,qBAAT,QAA2E,eAA3E;AAEA,OAAOC,8BAAP,MAA2C,kCAA3C;AACA,SAASC,kCAAT,QAAmD,kCAAnD;AAIA,OAAO,MAAMC,8BAAN,SAA6CH,qBAA7C,CAGL;EAGAI,WAAW,CAAkBC,UAAlB,EAAyD;IAClE;;IADkE;;IAAA,gCAM3DH,kCAN2D;;IAAA,KAAvCG,UAAuC,GAAvCA,UAAuC;IAElE,KAAKC,eAAL,GAAuB,IAAIL,8BAAJ,CAAmCI,UAAnC,CAAvB;IACA,KAAKE,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;EACD;;EAIDD,KAAK,CAACE,OAAD,EAAyF;IAC5F,MAAMC,iBAAiB,GAAGb,IAAI,CAAC,KAAKS,eAAL,CAAqBK,OAArB,CAA6BF,OAAO,CAACG,OAAR,CAAgB,CAAhB,CAA7B,CAAD,CAA9B;IACA,OAAOf,IAAI,CAAC,KAAKQ,UAAL,CAAgBQ,uBAAhB,EAAD,CAAJ,CAAgDC,IAAhD,CACLf,QAAQ,CAAC,MAAMW,iBAAP,CADH,EAELZ,GAAG,CAAEiB,IAAD,KAAW;MAAEA;IAAF,CAAX,CAAD,CAFE,CAAP;EAID;;AAjBD"},"metadata":{},"sourceType":"module"}