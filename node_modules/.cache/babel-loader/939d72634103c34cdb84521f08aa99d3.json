{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { compareDataFrameStructures, getFieldDisplayName, VizOrientation } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { LegendDisplayMode } from '@grafana/schema';\nimport { GraphNG, measureText, PlotLegend, Portal, UPLOT_AXIS_FONT_SIZE, usePanelContext, useStyles2, useTheme2, VizLayout, VizLegend, VizTooltipContainer } from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { DataHoverView } from '../geomap/components/DataHoverView';\nimport { getFieldLegendItem } from '../state-timeline/utils';\nimport { setupConfig } from './config';\nimport { prepareBarChartDisplayValues, preparePlotConfigBuilder } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TOOLTIP_OFFSET = 10;\n/**\n * @alpha\n */\n\nconst propsToDiff = ['orientation', 'barWidth', 'barRadius', 'xTickLabelRotation', 'xTickLabelMaxLength', 'xTickLabelSpacing', 'groupWidth', 'stacking', 'showValue', 'xField', 'colorField', 'legend', (prev, next) => {\n  var _next$text, _prev$text;\n\n  return ((_next$text = next.text) === null || _next$text === void 0 ? void 0 : _next$text.valueSize) === ((_prev$text = prev.text) === null || _prev$text === void 0 ? void 0 : _prev$text.valueSize);\n}];\nexport const BarChartPanel = ({\n  data,\n  options,\n  fieldConfig,\n  width,\n  height,\n  timeZone,\n  id\n}) => {\n  var _CloseButton;\n\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const {\n    eventBus\n  } = usePanelContext();\n  const oldConfig = useRef(undefined);\n  const isToolTipOpen = useRef(false);\n  const [hover, setHover] = useState(undefined);\n  const [coords, setCoords] = useState(null);\n  const [focusedSeriesIdx, setFocusedSeriesIdx] = useState(null);\n  const [focusedPointIdx, setFocusedPointIdx] = useState(null);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState(false);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setCoords(null);\n    setShouldDisplayCloseButton(false);\n  };\n\n  const onUPlotClick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current; // Linking into useState required to re-render tooltip\n\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const frame0Ref = useRef();\n  const info = useMemo(() => prepareBarChartDisplayValues(data === null || data === void 0 ? void 0 : data.series, theme, options), [data, theme, options]);\n  const chartDisplay = 'viz' in info ? info : null;\n  const structureRef = useRef(10000);\n  useMemo(() => {\n    structureRef.current++; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options]); // change every time the options object changes (while editing)\n\n  const structureRev = useMemo(() => {\n    var _data$structureRev;\n\n    const f0 = chartDisplay === null || chartDisplay === void 0 ? void 0 : chartDisplay.viz[0];\n    const f1 = frame0Ref.current;\n\n    if (!(f0 && f1 && compareDataFrameStructures(f0, f1, true))) {\n      structureRef.current++;\n    }\n\n    frame0Ref.current = f0;\n    return ((_data$structureRev = data.structureRev) !== null && _data$structureRev !== void 0 ? _data$structureRev : 0) + structureRef.current;\n  }, [chartDisplay, data.structureRev]);\n  const orientation = useMemo(() => {\n    if (!options.orientation || options.orientation === VizOrientation.Auto) {\n      return width < height ? VizOrientation.Horizontal : VizOrientation.Vertical;\n    }\n\n    return options.orientation;\n  }, [width, height, options.orientation]);\n  const xTickLabelMaxLength = useMemo(() => {\n    // If no max length is set, limit the number of characters to a length where it will use a maximum of half of the height of the viz.\n    if (!options.xTickLabelMaxLength) {\n      const rotationAngle = options.xTickLabelRotation;\n      const textSize = measureText('M', UPLOT_AXIS_FONT_SIZE).width; // M is usually the widest character so let's use that as an approximation.\n\n      const maxHeightForValues = height / 2;\n      return maxHeightForValues / (Math.sin((rotationAngle >= 0 ? rotationAngle : rotationAngle * -1) * Math.PI / 180) * textSize) - 3 //Subtract 3 for the \"...\" added to the end.\n      ;\n    } else {\n      return options.xTickLabelMaxLength;\n    }\n  }, [height, options.xTickLabelRotation, options.xTickLabelMaxLength]);\n\n  if ('warn' in info) {\n    return /*#__PURE__*/_jsx(PanelDataErrorView, {\n      panelId: id,\n      fieldConfig: fieldConfig,\n      data: data,\n      message: info.warn,\n      needsNumberField: true\n    });\n  }\n\n  const renderTooltip = (alignedFrame, seriesIdx, datapointIdx) => {\n    const field = seriesIdx == null ? null : alignedFrame.fields[seriesIdx];\n\n    if (field) {\n      const disp = getFieldDisplayName(field, alignedFrame);\n      seriesIdx = info.aligned.fields.findIndex(f => disp === getFieldDisplayName(f, info.aligned));\n    }\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [shouldDisplayCloseButton && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [_CloseButton || (_CloseButton = /*#__PURE__*/_jsx(CloseButton, {\n          onClick: onCloseToolTip\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.closeButtonSpacer\n        })]\n      }), /*#__PURE__*/_jsx(DataHoverView, {\n        data: info.aligned,\n        rowIndex: datapointIdx,\n        columnIndex: seriesIdx,\n        sortOrder: options.tooltip.sort\n      })]\n    });\n  };\n\n  const renderLegend = config => {\n    const {\n      legend\n    } = options;\n\n    if (!config || legend.displayMode === LegendDisplayMode.Hidden) {\n      return null;\n    }\n\n    if (info.colorByField) {\n      const items = getFieldLegendItem([info.colorByField], theme);\n\n      if (items !== null && items !== void 0 && items.length) {\n        return /*#__PURE__*/_jsx(VizLayout.Legend, {\n          placement: legend.placement,\n          children: /*#__PURE__*/_jsx(VizLegend, {\n            placement: legend.placement,\n            items: items,\n            displayMode: legend.displayMode\n          })\n        });\n      }\n    }\n\n    return /*#__PURE__*/_jsx(PlotLegend, Object.assign({\n      data: info.viz,\n      config: config,\n      maxHeight: \"35%\",\n      maxWidth: \"60%\"\n    }, options.legend));\n  };\n\n  const rawValue = (seriesIdx, valueIdx) => {\n    return frame0Ref.current.fields[seriesIdx].values.get(valueIdx);\n  }; // Color by value\n\n\n  let getColor = undefined;\n  let fillOpacity = 1;\n\n  if (info.colorByField) {\n    var _colorByField$config$;\n\n    const colorByField = info.colorByField;\n    const disp = colorByField.display;\n    fillOpacity = ((_colorByField$config$ = colorByField.config.custom.fillOpacity) !== null && _colorByField$config$ !== void 0 ? _colorByField$config$ : 100) / 100; // gradientMode? ignore?\n\n    getColor = (seriesIdx, valueIdx) => disp(colorByField.values.get(valueIdx)).color;\n  }\n\n  const prepConfig = (alignedFrame, allFrames, getTimeRange) => {\n    const {\n      barWidth,\n      barRadius = 0,\n      showValue,\n      groupWidth,\n      stacking,\n      legend,\n      tooltip,\n      text,\n      xTickLabelRotation,\n      xTickLabelSpacing\n    } = options;\n    return preparePlotConfigBuilder({\n      frame: alignedFrame,\n      getTimeRange,\n      theme,\n      timeZone,\n      eventBus,\n      orientation,\n      barWidth,\n      barRadius,\n      showValue,\n      groupWidth,\n      xTickLabelRotation,\n      xTickLabelMaxLength,\n      xTickLabelSpacing,\n      stacking,\n      legend,\n      tooltip,\n      text,\n      rawValue,\n      getColor,\n      fillOpacity,\n      allFrames: info.viz\n    });\n  };\n\n  return /*#__PURE__*/_jsx(GraphNG, {\n    theme: theme,\n    frames: info.viz,\n    prepConfig: prepConfig,\n    propsToDiff: propsToDiff,\n    preparePlotFrame: f => f[0] // already processed in by the panel above!\n    ,\n    renderLegend: renderLegend,\n    legend: options.legend,\n    timeZone: timeZone,\n    timeRange: {\n      from: 1,\n      to: 1\n    } // HACK\n    ,\n    structureRev: structureRev,\n    width: width,\n    height: height,\n    children: config => {\n      if (oldConfig.current !== config) {\n        oldConfig.current = setupConfig({\n          config,\n          onUPlotClick,\n          setFocusedSeriesIdx,\n          setFocusedPointIdx,\n          setCoords,\n          setHover,\n          isToolTipOpen\n        });\n      }\n\n      return /*#__PURE__*/_jsx(Portal, {\n        children: hover && coords && /*#__PURE__*/_jsx(VizTooltipContainer, {\n          position: {\n            x: coords.x,\n            y: coords.y\n          },\n          offset: {\n            x: TOOLTIP_OFFSET,\n            y: TOOLTIP_OFFSET\n          },\n          allowPointerEvents: isToolTipOpen.current,\n          children: renderTooltip(info.aligned, focusedSeriesIdx, focusedPointIdx)\n        })\n      });\n    }\n  });\n};\n\nconst getStyles = theme => ({\n  closeButtonSpacer: css`\n    margin-bottom: 15px;\n  `\n});","map":{"version":3,"names":["css","React","useMemo","useRef","useState","compareDataFrameStructures","getFieldDisplayName","VizOrientation","PanelDataErrorView","LegendDisplayMode","GraphNG","measureText","PlotLegend","Portal","UPLOT_AXIS_FONT_SIZE","usePanelContext","useStyles2","useTheme2","VizLayout","VizLegend","VizTooltipContainer","CloseButton","DataHoverView","getFieldLegendItem","setupConfig","prepareBarChartDisplayValues","preparePlotConfigBuilder","TOOLTIP_OFFSET","propsToDiff","prev","next","text","valueSize","BarChartPanel","data","options","fieldConfig","width","height","timeZone","id","theme","styles","getStyles","eventBus","oldConfig","undefined","isToolTipOpen","hover","setHover","coords","setCoords","focusedSeriesIdx","setFocusedSeriesIdx","focusedPointIdx","setFocusedPointIdx","shouldDisplayCloseButton","setShouldDisplayCloseButton","onCloseToolTip","current","onUPlotClick","frame0Ref","info","series","chartDisplay","structureRef","structureRev","f0","viz","f1","orientation","Auto","Horizontal","Vertical","xTickLabelMaxLength","rotationAngle","xTickLabelRotation","textSize","maxHeightForValues","Math","sin","PI","warn","renderTooltip","alignedFrame","seriesIdx","datapointIdx","field","fields","disp","aligned","findIndex","f","closeButtonSpacer","tooltip","sort","renderLegend","config","legend","displayMode","Hidden","colorByField","items","length","placement","rawValue","valueIdx","values","get","getColor","fillOpacity","display","custom","color","prepConfig","allFrames","getTimeRange","barWidth","barRadius","showValue","groupWidth","stacking","xTickLabelSpacing","frame","from","to","x","y"],"sources":["/home/soula/grafana/public/app/plugins/panel/barchart/BarChartPanel.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useMemo, useRef, useState } from 'react';\n\nimport {\n  CartesianCoords2D,\n  compareDataFrameStructures,\n  DataFrame,\n  getFieldDisplayName,\n  GrafanaTheme2,\n  PanelProps,\n  TimeRange,\n  VizOrientation,\n} from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { LegendDisplayMode } from '@grafana/schema';\nimport {\n  GraphNG,\n  GraphNGProps,\n  measureText,\n  PlotLegend,\n  Portal,\n  UPlotConfigBuilder,\n  UPLOT_AXIS_FONT_SIZE,\n  usePanelContext,\n  useStyles2,\n  useTheme2,\n  VizLayout,\n  VizLegend,\n  VizTooltipContainer,\n} from '@grafana/ui';\nimport { PropDiffFn } from '@grafana/ui/src/components/GraphNG/GraphNG';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nimport { DataHoverView } from '../geomap/components/DataHoverView';\nimport { getFieldLegendItem } from '../state-timeline/utils';\n\nimport { HoverEvent, setupConfig } from './config';\nimport { PanelOptions } from './models.gen';\nimport { prepareBarChartDisplayValues, preparePlotConfigBuilder } from './utils';\n\nconst TOOLTIP_OFFSET = 10;\n\n/**\n * @alpha\n */\nexport interface BarChartProps\n  extends PanelOptions,\n    Omit<GraphNGProps, 'prepConfig' | 'propsToDiff' | 'renderLegend' | 'theme'> {}\n\nconst propsToDiff: Array<string | PropDiffFn> = [\n  'orientation',\n  'barWidth',\n  'barRadius',\n  'xTickLabelRotation',\n  'xTickLabelMaxLength',\n  'xTickLabelSpacing',\n  'groupWidth',\n  'stacking',\n  'showValue',\n  'xField',\n  'colorField',\n  'legend',\n  (prev: BarChartProps, next: BarChartProps) => next.text?.valueSize === prev.text?.valueSize,\n];\n\ninterface Props extends PanelProps<PanelOptions> {}\n\nexport const BarChartPanel: React.FunctionComponent<Props> = ({\n  data,\n  options,\n  fieldConfig,\n  width,\n  height,\n  timeZone,\n  id,\n}) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { eventBus } = usePanelContext();\n\n  const oldConfig = useRef<UPlotConfigBuilder | undefined>(undefined);\n  const isToolTipOpen = useRef<boolean>(false);\n\n  const [hover, setHover] = useState<HoverEvent | undefined>(undefined);\n  const [coords, setCoords] = useState<CartesianCoords2D | null>(null);\n  const [focusedSeriesIdx, setFocusedSeriesIdx] = useState<number | null>(null);\n  const [focusedPointIdx, setFocusedPointIdx] = useState<number | null>(null);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState<boolean>(false);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setCoords(null);\n    setShouldDisplayCloseButton(false);\n  };\n\n  const onUPlotClick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current;\n\n    // Linking into useState required to re-render tooltip\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const frame0Ref = useRef<DataFrame>();\n  const info = useMemo(() => prepareBarChartDisplayValues(data?.series, theme, options), [data, theme, options]);\n  const chartDisplay = 'viz' in info ? info : null;\n\n  const structureRef = useRef(10000);\n  useMemo(() => {\n    structureRef.current++;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options]); // change every time the options object changes (while editing)\n\n  const structureRev = useMemo(() => {\n    const f0 = chartDisplay?.viz[0];\n    const f1 = frame0Ref.current;\n    if (!(f0 && f1 && compareDataFrameStructures(f0, f1, true))) {\n      structureRef.current++;\n    }\n    frame0Ref.current = f0;\n    return (data.structureRev ?? 0) + structureRef.current;\n  }, [chartDisplay, data.structureRev]);\n\n  const orientation = useMemo(() => {\n    if (!options.orientation || options.orientation === VizOrientation.Auto) {\n      return width < height ? VizOrientation.Horizontal : VizOrientation.Vertical;\n    }\n    return options.orientation;\n  }, [width, height, options.orientation]);\n\n  const xTickLabelMaxLength = useMemo(() => {\n    // If no max length is set, limit the number of characters to a length where it will use a maximum of half of the height of the viz.\n    if (!options.xTickLabelMaxLength) {\n      const rotationAngle = options.xTickLabelRotation;\n      const textSize = measureText('M', UPLOT_AXIS_FONT_SIZE).width; // M is usually the widest character so let's use that as an approximation.\n      const maxHeightForValues = height / 2;\n\n      return (\n        maxHeightForValues /\n          (Math.sin(((rotationAngle >= 0 ? rotationAngle : rotationAngle * -1) * Math.PI) / 180) * textSize) -\n        3 //Subtract 3 for the \"...\" added to the end.\n      );\n    } else {\n      return options.xTickLabelMaxLength;\n    }\n  }, [height, options.xTickLabelRotation, options.xTickLabelMaxLength]);\n\n  if ('warn' in info) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        message={info.warn}\n        needsNumberField={true}\n      />\n    );\n  }\n\n  const renderTooltip = (alignedFrame: DataFrame, seriesIdx: number | null, datapointIdx: number | null) => {\n    const field = seriesIdx == null ? null : alignedFrame.fields[seriesIdx];\n    if (field) {\n      const disp = getFieldDisplayName(field, alignedFrame);\n      seriesIdx = info.aligned.fields.findIndex((f) => disp === getFieldDisplayName(f, info.aligned));\n    }\n\n    return (\n      <>\n        {shouldDisplayCloseButton && (\n          <>\n            <CloseButton onClick={onCloseToolTip} />\n            <div className={styles.closeButtonSpacer} />\n          </>\n        )}\n        <DataHoverView\n          data={info.aligned}\n          rowIndex={datapointIdx}\n          columnIndex={seriesIdx}\n          sortOrder={options.tooltip.sort}\n        />\n      </>\n    );\n  };\n\n  const renderLegend = (config: UPlotConfigBuilder) => {\n    const { legend } = options;\n    if (!config || legend.displayMode === LegendDisplayMode.Hidden) {\n      return null;\n    }\n\n    if (info.colorByField) {\n      const items = getFieldLegendItem([info.colorByField], theme);\n      if (items?.length) {\n        return (\n          <VizLayout.Legend placement={legend.placement}>\n            <VizLegend placement={legend.placement} items={items} displayMode={legend.displayMode} />\n          </VizLayout.Legend>\n        );\n      }\n    }\n\n    return <PlotLegend data={info.viz} config={config} maxHeight=\"35%\" maxWidth=\"60%\" {...options.legend} />;\n  };\n\n  const rawValue = (seriesIdx: number, valueIdx: number) => {\n    return frame0Ref.current!.fields[seriesIdx].values.get(valueIdx);\n  };\n\n  // Color by value\n  let getColor: ((seriesIdx: number, valueIdx: number) => string) | undefined = undefined;\n\n  let fillOpacity = 1;\n\n  if (info.colorByField) {\n    const colorByField = info.colorByField;\n    const disp = colorByField.display!;\n    fillOpacity = (colorByField.config.custom.fillOpacity ?? 100) / 100;\n    // gradientMode? ignore?\n    getColor = (seriesIdx: number, valueIdx: number) => disp(colorByField.values.get(valueIdx)).color!;\n  }\n\n  const prepConfig = (alignedFrame: DataFrame, allFrames: DataFrame[], getTimeRange: () => TimeRange) => {\n    const {\n      barWidth,\n      barRadius = 0,\n      showValue,\n      groupWidth,\n      stacking,\n      legend,\n      tooltip,\n      text,\n      xTickLabelRotation,\n      xTickLabelSpacing,\n    } = options;\n\n    return preparePlotConfigBuilder({\n      frame: alignedFrame,\n      getTimeRange,\n      theme,\n      timeZone,\n      eventBus,\n      orientation,\n      barWidth,\n      barRadius,\n      showValue,\n      groupWidth,\n      xTickLabelRotation,\n      xTickLabelMaxLength,\n      xTickLabelSpacing,\n      stacking,\n      legend,\n      tooltip,\n      text,\n      rawValue,\n      getColor,\n      fillOpacity,\n      allFrames: info.viz,\n    });\n  };\n\n  return (\n    <GraphNG\n      theme={theme}\n      frames={info.viz}\n      prepConfig={prepConfig}\n      propsToDiff={propsToDiff}\n      preparePlotFrame={(f) => f[0]} // already processed in by the panel above!\n      renderLegend={renderLegend}\n      legend={options.legend}\n      timeZone={timeZone}\n      timeRange={{ from: 1, to: 1 } as unknown as TimeRange} // HACK\n      structureRev={structureRev}\n      width={width}\n      height={height}\n    >\n      {(config) => {\n        if (oldConfig.current !== config) {\n          oldConfig.current = setupConfig({\n            config,\n            onUPlotClick,\n            setFocusedSeriesIdx,\n            setFocusedPointIdx,\n            setCoords,\n            setHover,\n            isToolTipOpen,\n          });\n        }\n\n        return (\n          <Portal>\n            {hover && coords && (\n              <VizTooltipContainer\n                position={{ x: coords.x, y: coords.y }}\n                offset={{ x: TOOLTIP_OFFSET, y: TOOLTIP_OFFSET }}\n                allowPointerEvents={isToolTipOpen.current}\n              >\n                {renderTooltip(info.aligned, focusedSeriesIdx, focusedPointIdx)}\n              </VizTooltipContainer>\n            )}\n          </Portal>\n        );\n      }}\n    </GraphNG>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  closeButtonSpacer: css`\n    margin-bottom: 15px;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}