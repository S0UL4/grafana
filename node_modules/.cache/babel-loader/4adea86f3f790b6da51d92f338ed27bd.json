{"ast":null,"code":"import React from 'react';\nimport { SegmentAsync } from '@grafana/ui';\nimport { getDatasourceSrv } from '../../../plugins/datasource_srv';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const AdHocFilterValue = ({\n  datasource,\n  onChange,\n  filterKey,\n  filterValue,\n  placeHolder\n}) => {\n  const loadValues = () => fetchFilterValues(datasource, filterKey);\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"gf-form\",\n    \"data-testid\": \"AdHocFilterValue-value-wrapper\",\n    children: /*#__PURE__*/_jsx(SegmentAsync, {\n      className: \"query-segment-value\",\n      placeholder: placeHolder,\n      value: filterValue,\n      onChange: onChange,\n      loadOptions: loadValues\n    })\n  });\n};\n\nconst fetchFilterValues = async (datasource, key) => {\n  const ds = await getDatasourceSrv().get(datasource);\n\n  if (!ds || !ds.getTagValues) {\n    return [];\n  }\n\n  const metrics = await ds.getTagValues({\n    key\n  });\n  return metrics.map(m => ({\n    label: m.text,\n    value: m.text\n  }));\n};","map":{"version":3,"names":["React","SegmentAsync","getDatasourceSrv","AdHocFilterValue","datasource","onChange","filterKey","filterValue","placeHolder","loadValues","fetchFilterValues","key","ds","get","getTagValues","metrics","map","m","label","text","value"],"sources":["/home/soula/grafana/public/app/features/variables/adhoc/picker/AdHocFilterValue.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { DataSourceRef, MetricFindValue, SelectableValue } from '@grafana/data';\nimport { SegmentAsync } from '@grafana/ui';\n\nimport { getDatasourceSrv } from '../../../plugins/datasource_srv';\n\ninterface Props {\n  datasource: DataSourceRef;\n  filterKey: string;\n  filterValue?: string;\n  onChange: (item: SelectableValue<string>) => void;\n  placeHolder?: string;\n}\n\nexport const AdHocFilterValue: FC<Props> = ({ datasource, onChange, filterKey, filterValue, placeHolder }) => {\n  const loadValues = () => fetchFilterValues(datasource, filterKey);\n\n  return (\n    <div className=\"gf-form\" data-testid=\"AdHocFilterValue-value-wrapper\">\n      <SegmentAsync\n        className=\"query-segment-value\"\n        placeholder={placeHolder}\n        value={filterValue}\n        onChange={onChange}\n        loadOptions={loadValues}\n      />\n    </div>\n  );\n};\n\nconst fetchFilterValues = async (datasource: DataSourceRef, key: string): Promise<Array<SelectableValue<string>>> => {\n  const ds = await getDatasourceSrv().get(datasource);\n\n  if (!ds || !ds.getTagValues) {\n    return [];\n  }\n\n  const metrics = await ds.getTagValues({ key });\n  return metrics.map((m: MetricFindValue) => ({ label: m.text, value: m.text }));\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAGA,SAASC,YAAT,QAA6B,aAA7B;AAEA,SAASC,gBAAT,QAAiC,iCAAjC;;AAUA,OAAO,MAAMC,gBAA2B,GAAG,CAAC;EAAEC,UAAF;EAAcC,QAAd;EAAwBC,SAAxB;EAAmCC,WAAnC;EAAgDC;AAAhD,CAAD,KAAmE;EAC5G,MAAMC,UAAU,GAAG,MAAMC,iBAAiB,CAACN,UAAD,EAAaE,SAAb,CAA1C;;EAEA,oBACE;IAAK,SAAS,EAAC,SAAf;IAAyB,eAAY,gCAArC;IAAA,uBACE,KAAC,YAAD;MACE,SAAS,EAAC,qBADZ;MAEE,WAAW,EAAEE,WAFf;MAGE,KAAK,EAAED,WAHT;MAIE,QAAQ,EAAEF,QAJZ;MAKE,WAAW,EAAEI;IALf;EADF,EADF;AAWD,CAdM;;AAgBP,MAAMC,iBAAiB,GAAG,OAAON,UAAP,EAAkCO,GAAlC,KAA2F;EACnH,MAAMC,EAAE,GAAG,MAAMV,gBAAgB,GAAGW,GAAnB,CAAuBT,UAAvB,CAAjB;;EAEA,IAAI,CAACQ,EAAD,IAAO,CAACA,EAAE,CAACE,YAAf,EAA6B;IAC3B,OAAO,EAAP;EACD;;EAED,MAAMC,OAAO,GAAG,MAAMH,EAAE,CAACE,YAAH,CAAgB;IAAEH;EAAF,CAAhB,CAAtB;EACA,OAAOI,OAAO,CAACC,GAAR,CAAaC,CAAD,KAAyB;IAAEC,KAAK,EAAED,CAAC,CAACE,IAAX;IAAiBC,KAAK,EAAEH,CAAC,CAACE;EAA1B,CAAzB,CAAZ,CAAP;AACD,CATD"},"metadata":{},"sourceType":"module"}