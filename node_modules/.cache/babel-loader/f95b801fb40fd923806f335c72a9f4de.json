{"ast":null,"code":"var _div;\n\nimport React from 'react';\nimport { PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { commonOptionsBuilder } from '@grafana/ui';\nimport { GeomapPanel } from './GeomapPanel';\nimport { LayersEditor } from './editor/LayersEditor';\nimport { MapViewEditor } from './editor/MapViewEditor';\nimport { getLayerEditor } from './editor/layerEditor';\nimport { mapPanelChangedHandler, mapMigrationHandler } from './migrations';\nimport { defaultView, TooltipMode } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const plugin = new PanelPlugin(GeomapPanel).setNoPadding().setPanelChangeHandler(mapPanelChangedHandler).setMigrationHandler(mapMigrationHandler).useFieldConfig({\n  useCustomConfig: builder => {\n    commonOptionsBuilder.addHideFrom(builder);\n  }\n}).setPanelOptions((builder, context) => {\n  let category = ['Map view'];\n  builder.addCustomEditor({\n    category,\n    id: 'view',\n    path: 'view',\n    name: 'Initial view',\n    // don't show it\n    description: 'This location will show when the panel first loads.',\n    editor: MapViewEditor,\n    defaultValue: defaultView\n  });\n  builder.addBooleanSwitch({\n    category,\n    path: 'view.shared',\n    description: 'Use the same view across multiple panels.  Note: this may require a dashboard reload.',\n    name: 'Share view',\n    defaultValue: defaultView.shared\n  });\n  const state = context.instanceState;\n\n  if (!(state !== null && state !== void 0 && state.layers)) {// TODO? show spinner?\n  } else {\n    builder.addCustomEditor({\n      category: ['Data layer'],\n      id: 'layers',\n      path: '',\n      name: '',\n      editor: LayersEditor\n    });\n    const selected = state.layers[state.selected];\n\n    if (state.selected && selected) {\n      builder.addNestedOptions(getLayerEditor({\n        state: selected,\n        category: ['Data layer'],\n        basemaps: false\n      }));\n    }\n\n    const baselayer = state.layers[0];\n\n    if (config.geomapDisableCustomBaseLayer) {\n      builder.addCustomEditor({\n        category: ['Base layer'],\n        id: 'layers',\n        path: '',\n        name: '',\n        // eslint-disable-next-line react/display-name\n        editor: () => _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n          children: \"The base layer is configured by the server admin.\"\n        }))\n      });\n    } else if (baselayer) {\n      builder.addNestedOptions(getLayerEditor({\n        state: baselayer,\n        category: ['Base layer'],\n        basemaps: true\n      }));\n    }\n  } // The controls section\n\n\n  category = ['Map controls'];\n  builder.addBooleanSwitch({\n    category,\n    path: 'controls.showZoom',\n    description: 'Show zoom control buttons in the upper left corner',\n    name: 'Show zoom control',\n    defaultValue: true\n  }).addBooleanSwitch({\n    category,\n    path: 'controls.mouseWheelZoom',\n    description: 'Enable zoom control via mouse wheel',\n    name: 'Mouse wheel zoom',\n    defaultValue: true\n  }).addBooleanSwitch({\n    category,\n    path: 'controls.showAttribution',\n    name: 'Show attribution',\n    description: 'Show the map source attribution info in the lower right',\n    defaultValue: true\n  }).addBooleanSwitch({\n    category,\n    path: 'controls.showScale',\n    name: 'Show scale',\n    description: 'Indicate map scale',\n    defaultValue: false\n  }).addBooleanSwitch({\n    category,\n    path: 'controls.showDebug',\n    name: 'Show debug',\n    description: 'Show map info',\n    defaultValue: false\n  }).addRadio({\n    category,\n    path: 'tooltip.mode',\n    name: 'Tooltip',\n    defaultValue: TooltipMode.Details,\n    settings: {\n      options: [{\n        label: 'None',\n        value: TooltipMode.None,\n        description: 'Show contents on click, not hover'\n      }, {\n        label: 'Details',\n        value: TooltipMode.Details,\n        description: 'Show popup on hover'\n      }]\n    }\n  });\n});","map":{"version":3,"names":["React","PanelPlugin","config","commonOptionsBuilder","GeomapPanel","LayersEditor","MapViewEditor","getLayerEditor","mapPanelChangedHandler","mapMigrationHandler","defaultView","TooltipMode","plugin","setNoPadding","setPanelChangeHandler","setMigrationHandler","useFieldConfig","useCustomConfig","builder","addHideFrom","setPanelOptions","context","category","addCustomEditor","id","path","name","description","editor","defaultValue","addBooleanSwitch","shared","state","instanceState","layers","selected","addNestedOptions","basemaps","baselayer","geomapDisableCustomBaseLayer","addRadio","Details","settings","options","label","value","None"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/module.tsx"],"sourcesContent":["import React from 'react';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { GeomapInstanceState, GeomapPanel } from './GeomapPanel';\nimport { LayersEditor } from './editor/LayersEditor';\nimport { MapViewEditor } from './editor/MapViewEditor';\nimport { getLayerEditor } from './editor/layerEditor';\nimport { mapPanelChangedHandler, mapMigrationHandler } from './migrations';\nimport { defaultView, GeomapPanelOptions, TooltipMode } from './types';\n\nexport const plugin = new PanelPlugin<GeomapPanelOptions>(GeomapPanel)\n  .setNoPadding()\n  .setPanelChangeHandler(mapPanelChangedHandler)\n  .setMigrationHandler(mapMigrationHandler)\n  .useFieldConfig({\n    useCustomConfig: (builder) => {\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  })\n  .setPanelOptions((builder, context) => {\n    let category = ['Map view'];\n    builder.addCustomEditor({\n      category,\n      id: 'view',\n      path: 'view',\n      name: 'Initial view', // don't show it\n      description: 'This location will show when the panel first loads.',\n      editor: MapViewEditor,\n      defaultValue: defaultView,\n    });\n\n    builder.addBooleanSwitch({\n      category,\n      path: 'view.shared',\n      description: 'Use the same view across multiple panels.  Note: this may require a dashboard reload.',\n      name: 'Share view',\n      defaultValue: defaultView.shared,\n    });\n\n    const state = context.instanceState as GeomapInstanceState;\n    if (!state?.layers) {\n      // TODO? show spinner?\n    } else {\n      builder.addCustomEditor({\n        category: ['Data layer'],\n        id: 'layers',\n        path: '',\n        name: '',\n        editor: LayersEditor,\n      });\n\n      const selected = state.layers[state.selected];\n      if (state.selected && selected) {\n        builder.addNestedOptions(\n          getLayerEditor({\n            state: selected,\n            category: ['Data layer'],\n            basemaps: false,\n          })\n        );\n      }\n\n      const baselayer = state.layers[0];\n      if (config.geomapDisableCustomBaseLayer) {\n        builder.addCustomEditor({\n          category: ['Base layer'],\n          id: 'layers',\n          path: '',\n          name: '',\n          // eslint-disable-next-line react/display-name\n          editor: () => <div>The base layer is configured by the server admin.</div>,\n        });\n      } else if (baselayer) {\n        builder.addNestedOptions(\n          getLayerEditor({\n            state: baselayer,\n            category: ['Base layer'],\n            basemaps: true,\n          })\n        );\n      }\n    }\n\n    // The controls section\n    category = ['Map controls'];\n    builder\n      .addBooleanSwitch({\n        category,\n        path: 'controls.showZoom',\n        description: 'Show zoom control buttons in the upper left corner',\n        name: 'Show zoom control',\n        defaultValue: true,\n      })\n      .addBooleanSwitch({\n        category,\n        path: 'controls.mouseWheelZoom',\n        description: 'Enable zoom control via mouse wheel',\n        name: 'Mouse wheel zoom',\n        defaultValue: true,\n      })\n      .addBooleanSwitch({\n        category,\n        path: 'controls.showAttribution',\n        name: 'Show attribution',\n        description: 'Show the map source attribution info in the lower right',\n        defaultValue: true,\n      })\n      .addBooleanSwitch({\n        category,\n        path: 'controls.showScale',\n        name: 'Show scale',\n        description: 'Indicate map scale',\n        defaultValue: false,\n      })\n      .addBooleanSwitch({\n        category,\n        path: 'controls.showDebug',\n        name: 'Show debug',\n        description: 'Show map info',\n        defaultValue: false,\n      })\n      .addRadio({\n        category,\n        path: 'tooltip.mode',\n        name: 'Tooltip',\n        defaultValue: TooltipMode.Details,\n        settings: {\n          options: [\n            { label: 'None', value: TooltipMode.None, description: 'Show contents on click, not hover' },\n            { label: 'Details', value: TooltipMode.Details, description: 'Show popup on hover' },\n          ],\n        },\n      });\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}