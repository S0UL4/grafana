{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport Prism from 'prismjs';\nimport React, { memo, useEffect, useMemo, useRef, useState } from 'react';\nimport { Popper as ReactPopper } from 'react-popper';\nimport usePrevious from 'react-use/lib/usePrevious';\nimport Plain from 'slate-plain-serializer';\nimport { DataLinkBuiltInVars, VariableOrigin } from '@grafana/data';\nimport { Editor } from '@grafana/slate-react';\nimport { makeValue } from '../../index';\nimport { SlatePrism } from '../../slate-plugins';\nimport { useStyles2 } from '../../themes';\nimport { SCHEMA } from '../../utils/slate';\nimport CustomScrollbar from '../CustomScrollbar/CustomScrollbar';\nimport { getInputStyles } from '../Input/Input';\nimport { Portal } from '../index';\nimport { DataLinkSuggestions } from './DataLinkSuggestions';\nimport { SelectionReference } from './SelectionReference';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst modulo = (a, n) => a - n * Math.floor(a / n);\n\nconst datalinksSyntax = {\n  builtInVariable: {\n    pattern: /(\\${\\S+?})/\n  }\n};\nconst plugins = [SlatePrism({\n  onlyIn: node => node.type === 'code_block',\n  getSyntax: () => 'links'\n}, Object.assign({}, Prism.languages, {\n  links: datalinksSyntax\n}))];\n\nconst getStyles = theme => ({\n  input: getInputStyles({\n    theme,\n    invalid: false\n  }).input,\n  editor: css`\n    .token.builtInVariable {\n      color: ${theme.colors.success.text};\n    }\n    .token.variable {\n      color: ${theme.colors.primary.text};\n    }\n  `,\n  suggestionsWrapper: css`\n    box-shadow: ${theme.shadows.z2};\n  `,\n  // Wrapper with child selector needed.\n  // When classnames are applied to the same element as the wrapper, it causes the suggestions to stop working\n  wrapperOverrides: css`\n    width: 100%;\n    > .slate-query-field__wrapper {\n      padding: 0;\n      background-color: transparent;\n      border: none;\n    }\n  `\n}); // This memoised also because rerendering the slate editor grabs focus which created problem in some cases this\n// was used and changes to different state were propagated here.\n\n\nexport const DataLinkInput = /*#__PURE__*/memo(({\n  value,\n  onChange,\n  suggestions,\n  placeholder = 'http://your-grafana.com/d/000000010/annotations'\n}) => {\n  const editorRef = useRef();\n  const styles = useStyles2(getStyles);\n  const [showingSuggestions, setShowingSuggestions] = useState(false);\n  const [suggestionsIndex, setSuggestionsIndex] = useState(0);\n  const [linkUrl, setLinkUrl] = useState(makeValue(value));\n  const prevLinkUrl = usePrevious(linkUrl);\n  const [scrollTop, setScrollTop] = useState(0); // Workaround for https://github.com/ianstormtaylor/slate/issues/2927\n\n  const stateRef = useRef({\n    showingSuggestions,\n    suggestions,\n    suggestionsIndex,\n    linkUrl,\n    onChange\n  });\n  stateRef.current = {\n    showingSuggestions,\n    suggestions,\n    suggestionsIndex,\n    linkUrl,\n    onChange\n  }; // Used to get the height of the suggestion elements in order to scroll to them.\n\n  const activeRef = useRef(null);\n  useEffect(() => {\n    setScrollTop(getElementPosition(activeRef.current, suggestionsIndex));\n  }, [suggestionsIndex]); // SelectionReference is used to position the variables suggestion relatively to current DOM selection\n\n  const selectionRef = useMemo(() => new SelectionReference(), []);\n  const onKeyDown = React.useCallback((event, next) => {\n    if (!stateRef.current.showingSuggestions) {\n      if (event.key === '=' || event.key === '$' || event.keyCode === 32 && event.ctrlKey) {\n        return setShowingSuggestions(true);\n      }\n\n      return next();\n    }\n\n    switch (event.key) {\n      case 'Backspace':\n      case 'Escape':\n        setShowingSuggestions(false);\n        return setSuggestionsIndex(0);\n\n      case 'Enter':\n        event.preventDefault();\n        return onVariableSelect(stateRef.current.suggestions[stateRef.current.suggestionsIndex]);\n\n      case 'ArrowDown':\n      case 'ArrowUp':\n        event.preventDefault();\n        const direction = event.key === 'ArrowDown' ? 1 : -1;\n        return setSuggestionsIndex(index => modulo(index + direction, stateRef.current.suggestions.length));\n\n      default:\n        return next();\n    }\n  }, []);\n  useEffect(() => {\n    // Update the state of the link in the parent. This is basically done on blur but we need to do it after\n    // our state have been updated. The duplicity of state is done for perf reasons and also because local\n    // state also contains things like selection and formating.\n    if (prevLinkUrl && prevLinkUrl.selection.isFocused && !linkUrl.selection.isFocused) {\n      stateRef.current.onChange(Plain.serialize(linkUrl));\n    }\n  }, [linkUrl, prevLinkUrl]);\n  const onUrlChange = React.useCallback(({\n    value\n  }) => {\n    setLinkUrl(value);\n  }, []);\n\n  const onVariableSelect = (item, editor = editorRef.current) => {\n    const includeDollarSign = Plain.serialize(editor.value).slice(-1) !== '$';\n\n    if (item.origin !== VariableOrigin.Template || item.value === DataLinkBuiltInVars.includeVars) {\n      editor.insertText(`${includeDollarSign ? '$' : ''}\\{${item.value}}`);\n    } else {\n      editor.insertText(`\\${${item.value}:queryparam}`);\n    }\n\n    setLinkUrl(editor.value);\n    setShowingSuggestions(false);\n    setSuggestionsIndex(0);\n    stateRef.current.onChange(Plain.serialize(editor.value));\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.wrapperOverrides,\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: \"slate-query-field__wrapper\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"slate-query-field\",\n        children: [showingSuggestions && /*#__PURE__*/_jsx(Portal, {\n          children: /*#__PURE__*/_jsx(ReactPopper, {\n            referenceElement: selectionRef,\n            placement: \"bottom-end\",\n            modifiers: [{\n              name: 'preventOverflow',\n              enabled: true,\n              options: {\n                rootBoundary: 'viewport'\n              }\n            }, {\n              name: 'arrow',\n              enabled: false\n            }, {\n              name: 'offset',\n              options: {\n                offset: [250, 0]\n              }\n            }],\n            children: ({\n              ref,\n              style,\n              placement\n            }) => {\n              return /*#__PURE__*/_jsx(\"div\", {\n                ref: ref,\n                style: style,\n                \"data-placement\": placement,\n                className: styles.suggestionsWrapper,\n                children: /*#__PURE__*/_jsx(CustomScrollbar, {\n                  scrollTop: scrollTop,\n                  autoHeightMax: \"300px\",\n                  setScrollTop: ({\n                    scrollTop\n                  }) => setScrollTop(scrollTop),\n                  children: /*#__PURE__*/_jsx(DataLinkSuggestions, {\n                    activeRef: activeRef,\n                    suggestions: stateRef.current.suggestions,\n                    onSuggestionSelect: onVariableSelect,\n                    onClose: () => setShowingSuggestions(false),\n                    activeIndex: suggestionsIndex\n                  })\n                })\n              });\n            }\n          })\n        }), /*#__PURE__*/_jsx(Editor, {\n          schema: SCHEMA,\n          ref: editorRef,\n          placeholder: placeholder,\n          value: stateRef.current.linkUrl,\n          onChange: onUrlChange,\n          onKeyDown: (event, _editor, next) => onKeyDown(event, next),\n          plugins: plugins,\n          className: cx(styles.editor, styles.input, css`\n                  padding: 3px 8px;\n                `)\n        })]\n      })\n    })\n  });\n});\nDataLinkInput.displayName = 'DataLinkInput';\n\nfunction getElementPosition(suggestionElement, activeIndex) {\n  var _suggestionElement$cl;\n\n  return ((_suggestionElement$cl = suggestionElement === null || suggestionElement === void 0 ? void 0 : suggestionElement.clientHeight) !== null && _suggestionElement$cl !== void 0 ? _suggestionElement$cl : 0) * activeIndex;\n}","map":{"version":3,"names":["css","cx","Prism","React","memo","useEffect","useMemo","useRef","useState","Popper","ReactPopper","usePrevious","Plain","DataLinkBuiltInVars","VariableOrigin","Editor","makeValue","SlatePrism","useStyles2","SCHEMA","CustomScrollbar","getInputStyles","Portal","DataLinkSuggestions","SelectionReference","modulo","a","n","Math","floor","datalinksSyntax","builtInVariable","pattern","plugins","onlyIn","node","type","getSyntax","languages","links","getStyles","theme","input","invalid","editor","colors","success","text","primary","suggestionsWrapper","shadows","z2","wrapperOverrides","DataLinkInput","value","onChange","suggestions","placeholder","editorRef","styles","showingSuggestions","setShowingSuggestions","suggestionsIndex","setSuggestionsIndex","linkUrl","setLinkUrl","prevLinkUrl","scrollTop","setScrollTop","stateRef","current","activeRef","getElementPosition","selectionRef","onKeyDown","useCallback","event","next","key","keyCode","ctrlKey","preventDefault","onVariableSelect","direction","index","length","selection","isFocused","serialize","onUrlChange","item","includeDollarSign","slice","origin","Template","includeVars","insertText","name","enabled","options","rootBoundary","offset","ref","style","placement","_editor","displayName","suggestionElement","activeIndex","clientHeight"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/DataLinks/DataLinkInput.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport Prism, { Grammar, LanguageMap } from 'prismjs';\nimport React, { memo, RefObject, useEffect, useMemo, useRef, useState } from 'react';\nimport { Popper as ReactPopper } from 'react-popper';\nimport usePrevious from 'react-use/lib/usePrevious';\nimport { Value } from 'slate';\nimport Plain from 'slate-plain-serializer';\n\nimport { DataLinkBuiltInVars, GrafanaTheme2, VariableOrigin, VariableSuggestion } from '@grafana/data';\nimport { Editor } from '@grafana/slate-react';\n\nimport { makeValue } from '../../index';\nimport { SlatePrism } from '../../slate-plugins';\nimport { useStyles2 } from '../../themes';\nimport { SCHEMA } from '../../utils/slate';\nimport CustomScrollbar from '../CustomScrollbar/CustomScrollbar';\nimport { getInputStyles } from '../Input/Input';\nimport { Portal } from '../index';\n\nimport { DataLinkSuggestions } from './DataLinkSuggestions';\nimport { SelectionReference } from './SelectionReference';\n\nconst modulo = (a: number, n: number) => a - n * Math.floor(a / n);\n\ninterface DataLinkInputProps {\n  value: string;\n  onChange: (url: string, callback?: () => void) => void;\n  suggestions: VariableSuggestion[];\n  placeholder?: string;\n}\n\nconst datalinksSyntax: Grammar = {\n  builtInVariable: {\n    pattern: /(\\${\\S+?})/,\n  },\n};\n\nconst plugins = [\n  SlatePrism(\n    {\n      onlyIn: (node: any) => node.type === 'code_block',\n      getSyntax: () => 'links',\n    },\n    { ...(Prism.languages as LanguageMap), links: datalinksSyntax }\n  ),\n];\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  input: getInputStyles({ theme, invalid: false }).input,\n  editor: css`\n    .token.builtInVariable {\n      color: ${theme.colors.success.text};\n    }\n    .token.variable {\n      color: ${theme.colors.primary.text};\n    }\n  `,\n  suggestionsWrapper: css`\n    box-shadow: ${theme.shadows.z2};\n  `,\n  // Wrapper with child selector needed.\n  // When classnames are applied to the same element as the wrapper, it causes the suggestions to stop working\n  wrapperOverrides: css`\n    width: 100%;\n    > .slate-query-field__wrapper {\n      padding: 0;\n      background-color: transparent;\n      border: none;\n    }\n  `,\n});\n\n// This memoised also because rerendering the slate editor grabs focus which created problem in some cases this\n// was used and changes to different state were propagated here.\nexport const DataLinkInput: React.FC<DataLinkInputProps> = memo(\n  ({ value, onChange, suggestions, placeholder = 'http://your-grafana.com/d/000000010/annotations' }) => {\n    const editorRef = useRef<Editor>() as RefObject<Editor>;\n    const styles = useStyles2(getStyles);\n    const [showingSuggestions, setShowingSuggestions] = useState(false);\n    const [suggestionsIndex, setSuggestionsIndex] = useState(0);\n    const [linkUrl, setLinkUrl] = useState<Value>(makeValue(value));\n    const prevLinkUrl = usePrevious<Value>(linkUrl);\n    const [scrollTop, setScrollTop] = useState(0);\n\n    // Workaround for https://github.com/ianstormtaylor/slate/issues/2927\n    const stateRef = useRef({ showingSuggestions, suggestions, suggestionsIndex, linkUrl, onChange });\n    stateRef.current = { showingSuggestions, suggestions, suggestionsIndex, linkUrl, onChange };\n\n    // Used to get the height of the suggestion elements in order to scroll to them.\n    const activeRef = useRef<HTMLDivElement>(null);\n    useEffect(() => {\n      setScrollTop(getElementPosition(activeRef.current, suggestionsIndex));\n    }, [suggestionsIndex]);\n\n    // SelectionReference is used to position the variables suggestion relatively to current DOM selection\n    const selectionRef = useMemo(() => new SelectionReference(), []);\n\n    const onKeyDown = React.useCallback((event: KeyboardEvent, next: () => any) => {\n      if (!stateRef.current.showingSuggestions) {\n        if (event.key === '=' || event.key === '$' || (event.keyCode === 32 && event.ctrlKey)) {\n          return setShowingSuggestions(true);\n        }\n        return next();\n      }\n\n      switch (event.key) {\n        case 'Backspace':\n        case 'Escape':\n          setShowingSuggestions(false);\n          return setSuggestionsIndex(0);\n\n        case 'Enter':\n          event.preventDefault();\n          return onVariableSelect(stateRef.current.suggestions[stateRef.current.suggestionsIndex]);\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault();\n          const direction = event.key === 'ArrowDown' ? 1 : -1;\n          return setSuggestionsIndex((index) => modulo(index + direction, stateRef.current.suggestions.length));\n        default:\n          return next();\n      }\n    }, []);\n\n    useEffect(() => {\n      // Update the state of the link in the parent. This is basically done on blur but we need to do it after\n      // our state have been updated. The duplicity of state is done for perf reasons and also because local\n      // state also contains things like selection and formating.\n      if (prevLinkUrl && prevLinkUrl.selection.isFocused && !linkUrl.selection.isFocused) {\n        stateRef.current.onChange(Plain.serialize(linkUrl));\n      }\n    }, [linkUrl, prevLinkUrl]);\n\n    const onUrlChange = React.useCallback(({ value }: { value: Value }) => {\n      setLinkUrl(value);\n    }, []);\n\n    const onVariableSelect = (item: VariableSuggestion, editor = editorRef.current!) => {\n      const includeDollarSign = Plain.serialize(editor.value).slice(-1) !== '$';\n      if (item.origin !== VariableOrigin.Template || item.value === DataLinkBuiltInVars.includeVars) {\n        editor.insertText(`${includeDollarSign ? '$' : ''}\\{${item.value}}`);\n      } else {\n        editor.insertText(`\\${${item.value}:queryparam}`);\n      }\n\n      setLinkUrl(editor.value);\n      setShowingSuggestions(false);\n\n      setSuggestionsIndex(0);\n      stateRef.current.onChange(Plain.serialize(editor.value));\n    };\n\n    return (\n      <div className={styles.wrapperOverrides}>\n        <div className=\"slate-query-field__wrapper\">\n          <div className=\"slate-query-field\">\n            {showingSuggestions && (\n              <Portal>\n                <ReactPopper\n                  referenceElement={selectionRef}\n                  placement=\"bottom-end\"\n                  modifiers={[\n                    {\n                      name: 'preventOverflow',\n                      enabled: true,\n                      options: {\n                        rootBoundary: 'viewport',\n                      },\n                    },\n                    {\n                      name: 'arrow',\n                      enabled: false,\n                    },\n                    {\n                      name: 'offset',\n                      options: {\n                        offset: [250, 0],\n                      },\n                    },\n                  ]}\n                >\n                  {({ ref, style, placement }) => {\n                    return (\n                      <div ref={ref} style={style} data-placement={placement} className={styles.suggestionsWrapper}>\n                        <CustomScrollbar\n                          scrollTop={scrollTop}\n                          autoHeightMax=\"300px\"\n                          setScrollTop={({ scrollTop }) => setScrollTop(scrollTop)}\n                        >\n                          <DataLinkSuggestions\n                            activeRef={activeRef}\n                            suggestions={stateRef.current.suggestions}\n                            onSuggestionSelect={onVariableSelect}\n                            onClose={() => setShowingSuggestions(false)}\n                            activeIndex={suggestionsIndex}\n                          />\n                        </CustomScrollbar>\n                      </div>\n                    );\n                  }}\n                </ReactPopper>\n              </Portal>\n            )}\n            <Editor\n              schema={SCHEMA}\n              ref={editorRef}\n              placeholder={placeholder}\n              value={stateRef.current.linkUrl}\n              onChange={onUrlChange}\n              onKeyDown={(event, _editor, next) => onKeyDown(event as KeyboardEvent, next)}\n              plugins={plugins}\n              className={cx(\n                styles.editor,\n                styles.input,\n                css`\n                  padding: 3px 8px;\n                `\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nDataLinkInput.displayName = 'DataLinkInput';\n\nfunction getElementPosition(suggestionElement: HTMLElement | null, activeIndex: number) {\n  return (suggestionElement?.clientHeight ?? 0) * activeIndex;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}