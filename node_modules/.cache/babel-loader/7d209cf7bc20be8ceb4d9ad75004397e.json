{"ast":null,"code":"import { isNumber } from 'lodash';\nimport { dateTime } from '../datetime';\nimport { FieldType } from '../types/dataFrame';\n\n/** @public */\nexport const fieldIndexComparer = (field, reverse = false) => {\n  const values = field.values;\n\n  switch (field.type) {\n    case FieldType.number:\n      return numericIndexComparer(values, reverse);\n\n    case FieldType.string:\n      return stringIndexComparer(values, reverse);\n\n    case FieldType.boolean:\n      return booleanIndexComparer(values, reverse);\n\n    case FieldType.time:\n      return timeIndexComparer(values, reverse);\n\n    default:\n      return naturalIndexComparer(reverse);\n  }\n};\n/** @public */\n\nexport const timeComparer = (a, b) => {\n  if (!a || !b) {\n    return falsyComparer(a, b);\n  }\n\n  if (isNumber(a) && isNumber(b)) {\n    return numericComparer(a, b);\n  }\n\n  if (dateTime(a).isBefore(b)) {\n    return -1;\n  }\n\n  if (dateTime(b).isBefore(a)) {\n    return 1;\n  }\n\n  return 0;\n};\n/** @public */\n\nexport const numericComparer = (a, b) => {\n  return a - b;\n};\n/** @public */\n\nexport const stringComparer = (a, b) => {\n  if (!a || !b) {\n    return falsyComparer(a, b);\n  }\n\n  return a.localeCompare(b);\n};\nexport const booleanComparer = (a, b) => {\n  return falsyComparer(a, b);\n};\n\nconst falsyComparer = (a, b) => {\n  if (!a && b) {\n    return 1;\n  }\n\n  if (a && !b) {\n    return -1;\n  }\n\n  return 0;\n};\n\nconst timeIndexComparer = (values, reverse) => {\n  return (a, b) => {\n    const vA = values.get(a);\n    const vB = values.get(b);\n    return reverse ? timeComparer(vB, vA) : timeComparer(vA, vB);\n  };\n};\n\nconst booleanIndexComparer = (values, reverse) => {\n  return (a, b) => {\n    const vA = values.get(a);\n    const vB = values.get(b);\n    return reverse ? booleanComparer(vB, vA) : booleanComparer(vA, vB);\n  };\n};\n\nconst numericIndexComparer = (values, reverse) => {\n  return (a, b) => {\n    const vA = values.get(a);\n    const vB = values.get(b);\n    return reverse ? numericComparer(vB, vA) : numericComparer(vA, vB);\n  };\n};\n\nconst stringIndexComparer = (values, reverse) => {\n  return (a, b) => {\n    const vA = values.get(a);\n    const vB = values.get(b);\n    return reverse ? stringComparer(vB, vA) : stringComparer(vA, vB);\n  };\n};\n\nconst naturalIndexComparer = reverse => {\n  return (a, b) => {\n    return reverse ? numericComparer(b, a) : numericComparer(a, b);\n  };\n};","map":{"version":3,"names":["isNumber","dateTime","FieldType","fieldIndexComparer","field","reverse","values","type","number","numericIndexComparer","string","stringIndexComparer","boolean","booleanIndexComparer","time","timeIndexComparer","naturalIndexComparer","timeComparer","a","b","falsyComparer","numericComparer","isBefore","stringComparer","localeCompare","booleanComparer","vA","get","vB"],"sources":["/home/soula/grafana/packages/grafana-data/src/field/fieldComparers.ts"],"sourcesContent":["import { isNumber } from 'lodash';\n\nimport { dateTime } from '../datetime';\nimport { Field, FieldType } from '../types/dataFrame';\nimport { Vector } from '../types/vector';\n\ntype IndexComparer = (a: number, b: number) => number;\n\n/** @public */\nexport const fieldIndexComparer = (field: Field, reverse = false): IndexComparer => {\n  const values = field.values;\n\n  switch (field.type) {\n    case FieldType.number:\n      return numericIndexComparer(values, reverse);\n    case FieldType.string:\n      return stringIndexComparer(values, reverse);\n    case FieldType.boolean:\n      return booleanIndexComparer(values, reverse);\n    case FieldType.time:\n      return timeIndexComparer(values, reverse);\n    default:\n      return naturalIndexComparer(reverse);\n  }\n};\n\n/** @public */\nexport const timeComparer = (a: any, b: any): number => {\n  if (!a || !b) {\n    return falsyComparer(a, b);\n  }\n\n  if (isNumber(a) && isNumber(b)) {\n    return numericComparer(a, b);\n  }\n\n  if (dateTime(a).isBefore(b)) {\n    return -1;\n  }\n\n  if (dateTime(b).isBefore(a)) {\n    return 1;\n  }\n\n  return 0;\n};\n\n/** @public */\nexport const numericComparer = (a: number, b: number): number => {\n  return a - b;\n};\n\n/** @public */\nexport const stringComparer = (a: string, b: string): number => {\n  if (!a || !b) {\n    return falsyComparer(a, b);\n  }\n  return a.localeCompare(b);\n};\n\nexport const booleanComparer = (a: boolean, b: boolean): number => {\n  return falsyComparer(a, b);\n};\n\nconst falsyComparer = (a: any, b: any): number => {\n  if (!a && b) {\n    return 1;\n  }\n\n  if (a && !b) {\n    return -1;\n  }\n\n  return 0;\n};\n\nconst timeIndexComparer = (values: Vector<any>, reverse: boolean): IndexComparer => {\n  return (a: number, b: number): number => {\n    const vA = values.get(a);\n    const vB = values.get(b);\n    return reverse ? timeComparer(vB, vA) : timeComparer(vA, vB);\n  };\n};\n\nconst booleanIndexComparer = (values: Vector<any>, reverse: boolean): IndexComparer => {\n  return (a: number, b: number): number => {\n    const vA: boolean = values.get(a);\n    const vB: boolean = values.get(b);\n    return reverse ? booleanComparer(vB, vA) : booleanComparer(vA, vB);\n  };\n};\n\nconst numericIndexComparer = (values: Vector<any>, reverse: boolean): IndexComparer => {\n  return (a: number, b: number): number => {\n    const vA: number = values.get(a);\n    const vB: number = values.get(b);\n    return reverse ? numericComparer(vB, vA) : numericComparer(vA, vB);\n  };\n};\n\nconst stringIndexComparer = (values: Vector<any>, reverse: boolean): IndexComparer => {\n  return (a: number, b: number): number => {\n    const vA: string = values.get(a);\n    const vB: string = values.get(b);\n    return reverse ? stringComparer(vB, vA) : stringComparer(vA, vB);\n  };\n};\n\nconst naturalIndexComparer = (reverse: boolean): IndexComparer => {\n  return (a: number, b: number): number => {\n    return reverse ? numericComparer(b, a) : numericComparer(a, b);\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}