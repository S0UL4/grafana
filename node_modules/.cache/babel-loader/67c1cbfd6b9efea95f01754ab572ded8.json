{"ast":null,"code":"import { FieldColorModeId, FieldConfigProperty, FieldMatcherID } from '@grafana/data';\nimport { LegendDisplayMode } from '@grafana/schema';\nimport { PieChartLabels, PieChartLegendValues, PieChartType } from './types';\nexport const PieChartPanelChangedHandler = (panel, prevPluginId, prevOptions) => {\n  if (prevPluginId === 'grafana-piechart-panel' && prevOptions.angular) {\n    const angular = prevOptions.angular;\n    const overrides = [];\n    let options = panel.options; // Migrate color overrides for series\n\n    if (angular.aliasColors) {\n      for (const alias of Object.keys(angular.aliasColors)) {\n        const color = angular.aliasColors[alias];\n\n        if (color) {\n          overrides.push({\n            matcher: {\n              id: FieldMatcherID.byName,\n              options: alias\n            },\n            properties: [{\n              id: FieldConfigProperty.Color,\n              value: {\n                mode: FieldColorModeId.Fixed,\n                fixedColor: color\n              }\n            }]\n          });\n        }\n      }\n    }\n\n    panel.fieldConfig = {\n      overrides,\n      defaults: {\n        unit: angular.format,\n        decimals: angular.decimals ? angular.decimals : 0 // Old piechart defaults to 0 decimals while the new one defaults to 1\n\n      }\n    };\n    options.legend = {\n      placement: 'right',\n      values: [],\n      displayMode: LegendDisplayMode.Table,\n      calcs: []\n    };\n\n    if (angular.valueName) {\n      options.reduceOptions = {\n        calcs: []\n      };\n\n      switch (angular.valueName) {\n        case 'current':\n          options.reduceOptions.calcs = ['lastNotNull'];\n          break;\n\n        case 'min':\n          options.reduceOptions.calcs = ['min'];\n          break;\n\n        case 'max':\n          options.reduceOptions.calcs = ['max'];\n          break;\n\n        case 'avg':\n          options.reduceOptions.calcs = ['mean'];\n          break;\n\n        case 'total':\n          options.reduceOptions.calcs = ['sum'];\n          break;\n      }\n    }\n\n    switch (angular.legendType) {\n      case 'Under graph':\n        options.legend.placement = 'bottom';\n        break;\n\n      case 'Right side':\n        options.legend.placement = 'right';\n        break;\n    }\n\n    switch (angular.pieType) {\n      case 'pie':\n        options.pieType = PieChartType.Pie;\n        break;\n\n      case 'donut':\n        options.pieType = PieChartType.Donut;\n        break;\n    }\n\n    if (angular.legend) {\n      if (!angular.legend.show) {\n        options.legend.displayMode = LegendDisplayMode.Hidden;\n      }\n\n      if (angular.legend.values) {\n        options.legend.values.push(PieChartLegendValues.Value);\n      }\n\n      if (angular.legend.percentage) {\n        options.legend.values.push(PieChartLegendValues.Percent);\n      }\n\n      if (!angular.legend.percentage && !angular.legend.values) {\n        // If you deselect both value and percentage in the old pie chart plugin, the legend is hidden.\n        options.legend.displayMode = LegendDisplayMode.Hidden;\n      }\n    } // Set up labels when the old piechart is using 'on graph', for the legend option.\n\n\n    if (angular.legendType === 'On graph') {\n      options.legend.displayMode = LegendDisplayMode.Hidden;\n      options.displayLabels = [PieChartLabels.Name];\n\n      if (angular.legend.values) {\n        options.displayLabels.push(PieChartLabels.Value);\n      }\n\n      if (angular.legend.percentage) {\n        options.displayLabels.push(PieChartLabels.Percent);\n      }\n    }\n\n    return options;\n  }\n\n  return {};\n};","map":{"version":3,"names":["FieldColorModeId","FieldConfigProperty","FieldMatcherID","LegendDisplayMode","PieChartLabels","PieChartLegendValues","PieChartType","PieChartPanelChangedHandler","panel","prevPluginId","prevOptions","angular","overrides","options","aliasColors","alias","Object","keys","color","push","matcher","id","byName","properties","Color","value","mode","Fixed","fixedColor","fieldConfig","defaults","unit","format","decimals","legend","placement","values","displayMode","Table","calcs","valueName","reduceOptions","legendType","pieType","Pie","Donut","show","Hidden","Value","percentage","Percent","displayLabels","Name"],"sources":["/home/soula/grafana/public/app/plugins/panel/piechart/migrations.ts"],"sourcesContent":["import { FieldColorModeId, FieldConfigProperty, FieldMatcherID, PanelModel } from '@grafana/data';\nimport { LegendDisplayMode } from '@grafana/schema';\n\nimport { PieChartOptions, PieChartLabels, PieChartLegendValues, PieChartType } from './types';\n\nexport const PieChartPanelChangedHandler = (\n  panel: PanelModel<Partial<PieChartOptions>> | any,\n  prevPluginId: string,\n  prevOptions: any\n) => {\n  if (prevPluginId === 'grafana-piechart-panel' && prevOptions.angular) {\n    const angular = prevOptions.angular;\n    const overrides = [];\n    let options: PieChartOptions = panel.options;\n\n    // Migrate color overrides for series\n    if (angular.aliasColors) {\n      for (const alias of Object.keys(angular.aliasColors)) {\n        const color = angular.aliasColors[alias];\n        if (color) {\n          overrides.push({\n            matcher: {\n              id: FieldMatcherID.byName,\n              options: alias,\n            },\n            properties: [\n              {\n                id: FieldConfigProperty.Color,\n                value: {\n                  mode: FieldColorModeId.Fixed,\n                  fixedColor: color,\n                },\n              },\n            ],\n          });\n        }\n      }\n    }\n\n    panel.fieldConfig = {\n      overrides,\n      defaults: {\n        unit: angular.format,\n        decimals: angular.decimals ? angular.decimals : 0, // Old piechart defaults to 0 decimals while the new one defaults to 1\n      },\n    };\n\n    options.legend = { placement: 'right', values: [], displayMode: LegendDisplayMode.Table, calcs: [] };\n\n    if (angular.valueName) {\n      options.reduceOptions = { calcs: [] };\n      switch (angular.valueName) {\n        case 'current':\n          options.reduceOptions.calcs = ['lastNotNull'];\n          break;\n        case 'min':\n          options.reduceOptions.calcs = ['min'];\n          break;\n        case 'max':\n          options.reduceOptions.calcs = ['max'];\n          break;\n        case 'avg':\n          options.reduceOptions.calcs = ['mean'];\n          break;\n        case 'total':\n          options.reduceOptions.calcs = ['sum'];\n          break;\n      }\n    }\n\n    switch (angular.legendType) {\n      case 'Under graph':\n        options.legend.placement = 'bottom';\n        break;\n      case 'Right side':\n        options.legend.placement = 'right';\n        break;\n    }\n\n    switch (angular.pieType) {\n      case 'pie':\n        options.pieType = PieChartType.Pie;\n        break;\n      case 'donut':\n        options.pieType = PieChartType.Donut;\n        break;\n    }\n\n    if (angular.legend) {\n      if (!angular.legend.show) {\n        options.legend.displayMode = LegendDisplayMode.Hidden;\n      }\n      if (angular.legend.values) {\n        options.legend.values.push(PieChartLegendValues.Value);\n      }\n      if (angular.legend.percentage) {\n        options.legend.values.push(PieChartLegendValues.Percent);\n      }\n      if (!angular.legend.percentage && !angular.legend.values) {\n        // If you deselect both value and percentage in the old pie chart plugin, the legend is hidden.\n        options.legend.displayMode = LegendDisplayMode.Hidden;\n      }\n    }\n\n    // Set up labels when the old piechart is using 'on graph', for the legend option.\n    if (angular.legendType === 'On graph') {\n      options.legend.displayMode = LegendDisplayMode.Hidden;\n      options.displayLabels = [PieChartLabels.Name];\n      if (angular.legend.values) {\n        options.displayLabels.push(PieChartLabels.Value);\n      }\n      if (angular.legend.percentage) {\n        options.displayLabels.push(PieChartLabels.Percent);\n      }\n    }\n\n    return options;\n  }\n  return {};\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}