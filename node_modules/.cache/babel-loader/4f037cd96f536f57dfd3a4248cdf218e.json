{"ast":null,"code":"var _Space, _a;\n\nimport { debounce } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\nimport { config } from '@grafana/runtime';\nimport { Alert, CodeEditor } from '@grafana/ui';\nimport { AzureQueryType } from '../../types';\nimport useLastError from '../../utils/useLastError';\nimport ArgQueryEditor from '../ArgQueryEditor';\nimport LogsQueryEditor from '../LogsQueryEditor';\nimport NewMetricsQueryEditor from '../MetricsQueryEditor/MetricsQueryEditor';\nimport { QueryHeader } from '../QueryHeader';\nimport { Space } from '../Space';\nimport QueryTypeField from './QueryTypeField';\nimport usePreparedQuery from './usePreparedQuery';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst QueryEditor = ({\n  query: baseQuery,\n  datasource,\n  onChange,\n  onRunQuery: baseOnRunQuery,\n  data\n}) => {\n  const [errorMessage, setError] = useLastError();\n  const onRunQuery = useMemo(() => debounce(baseOnRunQuery, 500), [baseOnRunQuery]);\n  const onQueryChange = useCallback(newQuery => {\n    onChange(newQuery);\n    onRunQuery();\n  }, [onChange, onRunQuery]);\n  const query = usePreparedQuery(baseQuery, onQueryChange);\n  const subscriptionId = query.subscription || datasource.azureMonitorDatasource.defaultSubscriptionId;\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map(v => ({\n      label: v,\n      value: v\n    }))\n  };\n  return /*#__PURE__*/_jsxs(\"div\", {\n    \"data-testid\": \"azure-monitor-query-editor\",\n    children: [config.featureToggles.azureMonitorExperimentalUI && /*#__PURE__*/_jsx(QueryHeader, {\n      query: query,\n      onQueryChange: onQueryChange\n    }), !config.featureToggles.azureMonitorExperimentalUI && /*#__PURE__*/_jsx(QueryTypeField, {\n      query: query,\n      onQueryChange: onQueryChange\n    }), /*#__PURE__*/_jsx(EditorForQueryType, {\n      data: data,\n      subscriptionId: subscriptionId,\n      query: query,\n      datasource: datasource,\n      onChange: onQueryChange,\n      variableOptionGroup: variableOptionGroup,\n      setError: setError\n    }), errorMessage && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_Space || (_Space = /*#__PURE__*/_jsx(Space, {\n        v: 2\n      })), /*#__PURE__*/_jsx(Alert, {\n        severity: \"error\",\n        title: \"An error occurred while requesting metadata from Azure Monitor\",\n        children: errorMessage\n      })]\n    })]\n  });\n};\n\nconst EditorForQueryType = ({\n  data,\n  subscriptionId,\n  query,\n  datasource,\n  variableOptionGroup,\n  onChange,\n  setError\n}) => {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return /*#__PURE__*/_jsx(NewMetricsQueryEditor, {\n        data: data,\n        query: query,\n        datasource: datasource,\n        onChange: onChange,\n        variableOptionGroup: variableOptionGroup,\n        setError: setError\n      });\n\n    case AzureQueryType.LogAnalytics:\n      return /*#__PURE__*/_jsx(LogsQueryEditor, {\n        subscriptionId: subscriptionId,\n        query: query,\n        datasource: datasource,\n        onChange: onChange,\n        variableOptionGroup: variableOptionGroup,\n        setError: setError\n      });\n\n    case AzureQueryType.AzureResourceGraph:\n      return /*#__PURE__*/_jsx(ArgQueryEditor, {\n        subscriptionId: subscriptionId,\n        query: query,\n        datasource: datasource,\n        onChange: onChange,\n        variableOptionGroup: variableOptionGroup,\n        setError: setError\n      });\n\n    default:\n      const type = query.queryType;\n      return /*#__PURE__*/_jsx(Alert, {\n        title: \"Unknown query type\",\n        children: (type === 'Application Insights' || type === 'Insights Analytics') && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [type, \" was deprecated in Grafana 9. See the\", ' ', _a || (_a = /*#__PURE__*/_jsx(\"a\", {\n            href: \"https://grafana.com/docs/grafana/latest/datasources/azuremonitor/deprecated-application-insights/\",\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: \"deprecation notice\"\n          })), ' ', \"to get more information about how to migrate your queries. This is the current query definition:\", /*#__PURE__*/_jsx(CodeEditor, {\n            height: \"200px\",\n            readOnly: true,\n            language: \"json\",\n            value: JSON.stringify(query, null, 4)\n          })]\n        })\n      });\n  }\n};\n\nexport default QueryEditor;","map":{"version":3,"names":["debounce","React","useCallback","useMemo","config","Alert","CodeEditor","AzureQueryType","useLastError","ArgQueryEditor","LogsQueryEditor","NewMetricsQueryEditor","QueryHeader","Space","QueryTypeField","usePreparedQuery","QueryEditor","query","baseQuery","datasource","onChange","onRunQuery","baseOnRunQuery","data","errorMessage","setError","onQueryChange","newQuery","subscriptionId","subscription","azureMonitorDatasource","defaultSubscriptionId","variableOptionGroup","label","options","getVariables","map","v","value","featureToggles","azureMonitorExperimentalUI","EditorForQueryType","queryType","AzureMonitor","LogAnalytics","AzureResourceGraph","type","JSON","stringify"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/QueryEditor.tsx"],"sourcesContent":["import { debounce } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, CodeEditor } from '@grafana/ui';\n\nimport AzureMonitorDatasource from '../../datasource';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorErrorish,\n  AzureMonitorOption,\n  AzureMonitorQuery,\n  AzureQueryType,\n} from '../../types';\nimport useLastError from '../../utils/useLastError';\nimport ArgQueryEditor from '../ArgQueryEditor';\nimport LogsQueryEditor from '../LogsQueryEditor';\nimport NewMetricsQueryEditor from '../MetricsQueryEditor/MetricsQueryEditor';\nimport { QueryHeader } from '../QueryHeader';\nimport { Space } from '../Space';\n\nimport QueryTypeField from './QueryTypeField';\nimport usePreparedQuery from './usePreparedQuery';\n\nexport type AzureMonitorQueryEditorProps = QueryEditorProps<\n  AzureMonitorDatasource,\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n>;\n\nconst QueryEditor: React.FC<AzureMonitorQueryEditorProps> = ({\n  query: baseQuery,\n  datasource,\n  onChange,\n  onRunQuery: baseOnRunQuery,\n  data,\n}) => {\n  const [errorMessage, setError] = useLastError();\n  const onRunQuery = useMemo(() => debounce(baseOnRunQuery, 500), [baseOnRunQuery]);\n\n  const onQueryChange = useCallback(\n    (newQuery: AzureMonitorQuery) => {\n      onChange(newQuery);\n      onRunQuery();\n    },\n    [onChange, onRunQuery]\n  );\n\n  const query = usePreparedQuery(baseQuery, onQueryChange);\n\n  const subscriptionId = query.subscription || datasource.azureMonitorDatasource.defaultSubscriptionId;\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map((v) => ({ label: v, value: v })),\n  };\n\n  return (\n    <div data-testid=\"azure-monitor-query-editor\">\n      {config.featureToggles.azureMonitorExperimentalUI && <QueryHeader query={query} onQueryChange={onQueryChange} />}\n      {!config.featureToggles.azureMonitorExperimentalUI && (\n        <QueryTypeField query={query} onQueryChange={onQueryChange} />\n      )}\n\n      <EditorForQueryType\n        data={data}\n        subscriptionId={subscriptionId}\n        query={query}\n        datasource={datasource}\n        onChange={onQueryChange}\n        variableOptionGroup={variableOptionGroup}\n        setError={setError}\n      />\n\n      {errorMessage && (\n        <>\n          <Space v={2} />\n          <Alert severity=\"error\" title=\"An error occurred while requesting metadata from Azure Monitor\">\n            {errorMessage}\n          </Alert>\n        </>\n      )}\n    </div>\n  );\n};\n\ninterface EditorForQueryTypeProps extends Omit<AzureMonitorQueryEditorProps, 'onRunQuery'> {\n  subscriptionId?: string;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst EditorForQueryType: React.FC<EditorForQueryTypeProps> = ({\n  data,\n  subscriptionId,\n  query,\n  datasource,\n  variableOptionGroup,\n  onChange,\n  setError,\n}) => {\n  switch (query.queryType) {\n    case AzureQueryType.AzureMonitor:\n      return (\n        <NewMetricsQueryEditor\n          data={data}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    case AzureQueryType.LogAnalytics:\n      return (\n        <LogsQueryEditor\n          subscriptionId={subscriptionId}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    case AzureQueryType.AzureResourceGraph:\n      return (\n        <ArgQueryEditor\n          subscriptionId={subscriptionId}\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          variableOptionGroup={variableOptionGroup}\n          setError={setError}\n        />\n      );\n\n    default:\n      const type = query.queryType as unknown;\n      return (\n        <Alert title=\"Unknown query type\">\n          {(type === 'Application Insights' || type === 'Insights Analytics') && (\n            <>\n              {type} was deprecated in Grafana 9. See the{' '}\n              <a\n                href=\"https://grafana.com/docs/grafana/latest/datasources/azuremonitor/deprecated-application-insights/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                deprecation notice\n              </a>{' '}\n              to get more information about how to migrate your queries. This is the current query definition:\n              <CodeEditor height=\"200px\" readOnly language=\"json\" value={JSON.stringify(query, null, 4)} />\n            </>\n          )}\n        </Alert>\n      );\n  }\n};\n\nexport default QueryEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}