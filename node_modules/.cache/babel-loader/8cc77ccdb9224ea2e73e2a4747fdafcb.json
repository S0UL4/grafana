{"ast":null,"code":"var _code, _code2;\n\nimport React from 'react';\nimport { CoreApp } from '@grafana/data';\nimport { EditorRow, EditorField, EditorSwitch } from '@grafana/experimental';\nimport { AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from '../../components/PromQueryEditor';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const PromQueryBuilderOptions = /*#__PURE__*/React.memo(({\n  query,\n  app,\n  onChange,\n  onRunQuery\n}) => {\n  const onChangeFormat = value => {\n    onChange(Object.assign({}, query, {\n      format: value.value\n    }));\n    onRunQuery();\n  };\n\n  const onChangeStep = evt => {\n    onChange(Object.assign({}, query, {\n      interval: evt.currentTarget.value\n    }));\n    onRunQuery();\n  };\n\n  const queryTypeOptions = getQueryTypeOptions(app === CoreApp.Explore);\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  const onExemplarChange = event => {\n    const isEnabled = event.currentTarget.checked;\n    onChange(Object.assign({}, query, {\n      exemplar: isEnabled\n    }));\n    onRunQuery();\n  };\n\n  const onIntervalFactorChange = value => {\n    onChange(Object.assign({}, query, {\n      intervalFactor: value.value\n    }));\n    onRunQuery();\n  };\n\n  const formatOption = FORMAT_OPTIONS.find(option => option.value === query.format) || FORMAT_OPTIONS[0];\n  const queryTypeValue = getQueryTypeValue(query);\n  const queryTypeLabel = queryTypeOptions.find(x => x.value === queryTypeValue).label;\n  return /*#__PURE__*/_jsx(EditorRow, {\n    children: /*#__PURE__*/_jsxs(QueryOptionGroup, {\n      title: \"Options\",\n      collapsedInfo: getCollapsedInfo(query, formatOption.label, queryTypeLabel),\n      children: [/*#__PURE__*/_jsx(PromQueryLegendEditor, {\n        legendFormat: query.legendFormat,\n        onChange: legendFormat => onChange(Object.assign({}, query, {\n          legendFormat\n        })),\n        onRunQuery: onRunQuery\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Min step\",\n        tooltip: /*#__PURE__*/_jsxs(_Fragment, {\n          children: [\"An additional lower limit for the step parameter of the Prometheus query and for the\", ' ', _code || (_code = /*#__PURE__*/_jsx(\"code\", {\n            children: \"$__interval\"\n          })), \" and \", _code2 || (_code2 = /*#__PURE__*/_jsx(\"code\", {\n            children: \"$__rate_interval\"\n          })), \" variables.\"]\n        }),\n        children: /*#__PURE__*/_jsx(AutoSizeInput, {\n          type: \"text\",\n          \"aria-label\": \"Set lower limit for the step parameter\",\n          placeholder: 'auto',\n          minWidth: 10,\n          onCommitChange: onChangeStep,\n          defaultValue: query.interval\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Format\",\n        children: /*#__PURE__*/_jsx(Select, {\n          value: formatOption,\n          allowCustomValue: true,\n          onChange: onChangeFormat,\n          options: FORMAT_OPTIONS\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Type\",\n        children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n          options: queryTypeOptions,\n          value: queryTypeValue,\n          onChange: onQueryTypeChange\n        })\n      }), shouldShowExemplarSwitch(query, app) && /*#__PURE__*/_jsx(EditorField, {\n        label: \"Exemplars\",\n        children: /*#__PURE__*/_jsx(EditorSwitch, {\n          value: query.exemplar,\n          onChange: onExemplarChange\n        })\n      }), query.intervalFactor && query.intervalFactor > 1 && /*#__PURE__*/_jsx(EditorField, {\n        label: \"Resolution\",\n        children: /*#__PURE__*/_jsx(Select, {\n          \"aria-label\": \"Select resolution\",\n          isSearchable: false,\n          options: INTERVAL_FACTOR_OPTIONS,\n          onChange: onIntervalFactorChange,\n          value: INTERVAL_FACTOR_OPTIONS.find(option => option.value === query.intervalFactor)\n        })\n      })]\n    })\n  });\n});\n\nfunction shouldShowExemplarSwitch(query, app) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query, formatOption, queryType) {\n  var _query$interval;\n\n  const items = [];\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n  items.push(`Step: ${(_query$interval = query.interval) !== null && _query$interval !== void 0 ? _query$interval : 'auto'}`);\n  items.push(`Type: ${queryType}`);\n\n  if (query.exemplar) {\n    items.push(`Exemplars: true`);\n  }\n\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';","map":{"version":3,"names":["React","CoreApp","EditorRow","EditorField","EditorSwitch","AutoSizeInput","RadioButtonGroup","Select","getQueryTypeChangeHandler","getQueryTypeOptions","FORMAT_OPTIONS","INTERVAL_FACTOR_OPTIONS","QueryOptionGroup","getLegendModeLabel","PromQueryLegendEditor","PromQueryBuilderOptions","memo","query","app","onChange","onRunQuery","onChangeFormat","value","format","onChangeStep","evt","interval","currentTarget","queryTypeOptions","Explore","onQueryTypeChange","onExemplarChange","event","isEnabled","checked","exemplar","onIntervalFactorChange","intervalFactor","formatOption","find","option","queryTypeValue","getQueryTypeValue","queryTypeLabel","x","label","getCollapsedInfo","legendFormat","shouldShowExemplarSwitch","UnifiedAlerting","range","instant","queryType","items","push","displayName"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderOptions.tsx"],"sourcesContent":["import React, { SyntheticEvent } from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { EditorRow, EditorField, EditorSwitch } from '@grafana/experimental';\nimport { AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from '../../components/PromQueryEditor';\nimport { PromQuery } from '../../types';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\n\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\n\nexport interface UIOptions {\n  exemplars: boolean;\n  type: boolean;\n  format: boolean;\n  minStep: boolean;\n  legend: boolean;\n  resolution: boolean;\n}\n\nexport interface Props {\n  query: PromQuery;\n  app?: CoreApp;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const PromQueryBuilderOptions = React.memo<Props>(({ query, app, onChange, onRunQuery }) => {\n  const onChangeFormat = (value: SelectableValue<string>) => {\n    onChange({ ...query, format: value.value });\n    onRunQuery();\n  };\n\n  const onChangeStep = (evt: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, interval: evt.currentTarget.value });\n    onRunQuery();\n  };\n\n  const queryTypeOptions = getQueryTypeOptions(app === CoreApp.Explore);\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  const onExemplarChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    onChange({ ...query, exemplar: isEnabled });\n    onRunQuery();\n  };\n\n  const onIntervalFactorChange = (value: SelectableValue<number>) => {\n    onChange({ ...query, intervalFactor: value.value });\n    onRunQuery();\n  };\n\n  const formatOption = FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0];\n  const queryTypeValue = getQueryTypeValue(query);\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryTypeValue)!.label;\n\n  return (\n    <EditorRow>\n      <QueryOptionGroup title=\"Options\" collapsedInfo={getCollapsedInfo(query, formatOption.label!, queryTypeLabel)}>\n        <PromQueryLegendEditor\n          legendFormat={query.legendFormat}\n          onChange={(legendFormat) => onChange({ ...query, legendFormat })}\n          onRunQuery={onRunQuery}\n        />\n        <EditorField\n          label=\"Min step\"\n          tooltip={\n            <>\n              An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n              <code>$__interval</code> and <code>$__rate_interval</code> variables.\n            </>\n          }\n        >\n          <AutoSizeInput\n            type=\"text\"\n            aria-label=\"Set lower limit for the step parameter\"\n            placeholder={'auto'}\n            minWidth={10}\n            onCommitChange={onChangeStep}\n            defaultValue={query.interval}\n          />\n        </EditorField>\n        <EditorField label=\"Format\">\n          <Select value={formatOption} allowCustomValue onChange={onChangeFormat} options={FORMAT_OPTIONS} />\n        </EditorField>\n        <EditorField label=\"Type\">\n          <RadioButtonGroup options={queryTypeOptions} value={queryTypeValue} onChange={onQueryTypeChange} />\n        </EditorField>\n        {shouldShowExemplarSwitch(query, app) && (\n          <EditorField label=\"Exemplars\">\n            <EditorSwitch value={query.exemplar} onChange={onExemplarChange} />\n          </EditorField>\n        )}\n        {query.intervalFactor && query.intervalFactor > 1 && (\n          <EditorField label=\"Resolution\">\n            <Select\n              aria-label=\"Select resolution\"\n              isSearchable={false}\n              options={INTERVAL_FACTOR_OPTIONS}\n              onChange={onIntervalFactorChange}\n              value={INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor)}\n            />\n          </EditorField>\n        )}\n      </QueryOptionGroup>\n    </EditorRow>\n  );\n});\n\nfunction shouldShowExemplarSwitch(query: PromQuery, app?: CoreApp) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query: PromQuery) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query: PromQuery, formatOption: string, queryType: string): string[] {\n  const items: string[] = [];\n\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n  items.push(`Step: ${query.interval ?? 'auto'}`);\n  items.push(`Type: ${queryType}`);\n\n  if (query.exemplar) {\n    items.push(`Exemplars: true`);\n  }\n\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}