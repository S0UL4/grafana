{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { AppEvents, isLiveChannelMessageEvent, isLiveChannelStatusEvent, LiveChannelConnectionState, LiveChannelScope } from '@grafana/data';\nimport { getGrafanaLiveSrv, locationService } from '@grafana/runtime';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport { sessionId } from 'app/features/live';\nimport { ShowModalReactEvent } from '../../../types/events';\nimport { getDashboardSrv } from '../../dashboard/services/DashboardSrv';\nimport { DashboardChangedModal } from './DashboardChangedModal';\nimport { DashboardEventAction } from './types';\n\nclass DashboardWatcher {\n  constructor() {\n    _defineProperty(this, \"channel\", void 0);\n\n    _defineProperty(this, \"uid\", void 0);\n\n    _defineProperty(this, \"ignoreSave\", void 0);\n\n    _defineProperty(this, \"editing\", false);\n\n    _defineProperty(this, \"lastEditing\", void 0);\n\n    _defineProperty(this, \"subscription\", void 0);\n\n    _defineProperty(this, \"hasSeenNotice\", void 0);\n\n    _defineProperty(this, \"observer\", {\n      next: event => {\n        // Send the editing state when connection starts\n        if (isLiveChannelStatusEvent(event) && this.editing && event.state === LiveChannelConnectionState.Connected) {\n          this.sendEditingState();\n        }\n\n        if (isLiveChannelMessageEvent(event)) {\n          if (event.message.sessionId === sessionId) {\n            return; // skip internal messages\n          }\n\n          const {\n            action\n          } = event.message;\n\n          switch (action) {\n            case DashboardEventAction.EditingStarted:\n            case DashboardEventAction.Saved:\n              {\n                if (this.ignoreSave) {\n                  this.ignoreSave = false;\n                  return;\n                }\n\n                const dash = getDashboardSrv().getCurrent();\n\n                if ((dash === null || dash === void 0 ? void 0 : dash.uid) !== event.message.uid) {\n                  console.log('dashboard event for different dashboard?', event, dash);\n                  return;\n                }\n\n                const showPopup = this.editing || dash.hasUnsavedChanges();\n\n                if (action === DashboardEventAction.Saved) {\n                  if (showPopup) {\n                    appEvents.publish(new ShowModalReactEvent({\n                      component: DashboardChangedModal,\n                      props: {\n                        event\n                      }\n                    }));\n                  } else {\n                    appEvents.emit(AppEvents.alertSuccess, ['Dashboard updated']);\n                    this.reloadPage();\n                  }\n                } else if (showPopup) {\n                  if (action === DashboardEventAction.EditingStarted && !this.hasSeenNotice) {\n                    const editingEvent = event.message;\n                    const recent = this.getRecentEditingEvent();\n\n                    if (!recent || recent.message !== editingEvent.message) {\n                      this.hasSeenNotice = true;\n                      appEvents.emit(AppEvents.alertWarning, ['Another session is editing this dashboard', editingEvent.message]);\n                    }\n\n                    this.lastEditing = editingEvent;\n                  }\n                }\n\n                return;\n              }\n          }\n        }\n      }\n    });\n  }\n\n  setEditingState(state) {\n    const changed = this.editing = state;\n    this.editing = state;\n    this.hasSeenNotice = false;\n\n    if (changed && contextSrv.isEditor) {\n      this.sendEditingState();\n    }\n  }\n\n  sendEditingState() {\n    const {\n      channel,\n      uid\n    } = this;\n\n    if (channel && uid) {\n      getGrafanaLiveSrv().publish(channel, {\n        sessionId,\n        uid,\n        action: this.editing ? DashboardEventAction.EditingStarted : DashboardEventAction.EditingCanceled,\n        timestamp: Date.now()\n      });\n    }\n  }\n\n  watch(uid) {\n    const live = getGrafanaLiveSrv();\n\n    if (!live) {\n      return;\n    } // Check for changes\n\n\n    if (uid !== this.uid) {\n      this.channel = {\n        scope: LiveChannelScope.Grafana,\n        namespace: 'dashboard',\n        path: `uid/${uid}`\n      };\n      this.leave();\n\n      if (uid) {\n        this.subscription = live.getStream(this.channel).subscribe(this.observer);\n      }\n\n      this.uid = uid;\n    }\n  }\n\n  leave() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n\n    this.subscription = undefined;\n    this.uid = undefined;\n  }\n\n  ignoreNextSave() {\n    this.ignoreSave = true;\n  }\n\n  getRecentEditingEvent() {\n    if (this.lastEditing && this.lastEditing.timestamp) {\n      const elapsed = Date.now() - this.lastEditing.timestamp;\n\n      if (elapsed > 5000) {\n        this.lastEditing = undefined;\n      }\n    }\n\n    return this.lastEditing;\n  }\n\n  reloadPage() {\n    locationService.reload();\n  }\n\n}\n\nexport const dashboardWatcher = new DashboardWatcher();","map":{"version":3,"names":["AppEvents","isLiveChannelMessageEvent","isLiveChannelStatusEvent","LiveChannelConnectionState","LiveChannelScope","getGrafanaLiveSrv","locationService","appEvents","contextSrv","sessionId","ShowModalReactEvent","getDashboardSrv","DashboardChangedModal","DashboardEventAction","DashboardWatcher","next","event","editing","state","Connected","sendEditingState","message","action","EditingStarted","Saved","ignoreSave","dash","getCurrent","uid","console","log","showPopup","hasUnsavedChanges","publish","component","props","emit","alertSuccess","reloadPage","hasSeenNotice","editingEvent","recent","getRecentEditingEvent","alertWarning","lastEditing","setEditingState","changed","isEditor","channel","EditingCanceled","timestamp","Date","now","watch","live","scope","Grafana","namespace","path","leave","subscription","getStream","subscribe","observer","unsubscribe","undefined","ignoreNextSave","elapsed","reload","dashboardWatcher"],"sources":["/home/soula/grafana/public/app/features/live/dashboard/dashboardWatcher.ts"],"sourcesContent":["import { Unsubscribable } from 'rxjs';\n\nimport {\n  AppEvents,\n  isLiveChannelMessageEvent,\n  isLiveChannelStatusEvent,\n  LiveChannelAddress,\n  LiveChannelConnectionState,\n  LiveChannelEvent,\n  LiveChannelScope,\n} from '@grafana/data';\nimport { getGrafanaLiveSrv, locationService } from '@grafana/runtime';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport { sessionId } from 'app/features/live';\n\nimport { ShowModalReactEvent } from '../../../types/events';\nimport { getDashboardSrv } from '../../dashboard/services/DashboardSrv';\n\nimport { DashboardChangedModal } from './DashboardChangedModal';\nimport { DashboardEvent, DashboardEventAction } from './types';\n\nclass DashboardWatcher {\n  channel?: LiveChannelAddress; // path to the channel\n  uid?: string;\n  ignoreSave?: boolean;\n  editing = false;\n  lastEditing?: DashboardEvent;\n  subscription?: Unsubscribable;\n  hasSeenNotice?: boolean;\n\n  setEditingState(state: boolean) {\n    const changed = (this.editing = state);\n    this.editing = state;\n    this.hasSeenNotice = false;\n\n    if (changed && contextSrv.isEditor) {\n      this.sendEditingState();\n    }\n  }\n\n  private sendEditingState() {\n    const { channel, uid } = this;\n    if (channel && uid) {\n      getGrafanaLiveSrv().publish(channel, {\n        sessionId,\n        uid,\n        action: this.editing ? DashboardEventAction.EditingStarted : DashboardEventAction.EditingCanceled,\n        timestamp: Date.now(),\n      });\n    }\n  }\n\n  watch(uid: string) {\n    const live = getGrafanaLiveSrv();\n    if (!live) {\n      return;\n    }\n\n    // Check for changes\n    if (uid !== this.uid) {\n      this.channel = {\n        scope: LiveChannelScope.Grafana,\n        namespace: 'dashboard',\n        path: `uid/${uid}`,\n      };\n      this.leave();\n      if (uid) {\n        this.subscription = live.getStream<DashboardEvent>(this.channel).subscribe(this.observer);\n      }\n      this.uid = uid;\n    }\n  }\n\n  leave() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n    this.subscription = undefined;\n    this.uid = undefined;\n  }\n\n  ignoreNextSave() {\n    this.ignoreSave = true;\n  }\n\n  getRecentEditingEvent() {\n    if (this.lastEditing && this.lastEditing.timestamp) {\n      const elapsed = Date.now() - this.lastEditing.timestamp;\n      if (elapsed > 5000) {\n        this.lastEditing = undefined;\n      }\n    }\n    return this.lastEditing;\n  }\n\n  observer = {\n    next: (event: LiveChannelEvent<DashboardEvent>) => {\n      // Send the editing state when connection starts\n      if (isLiveChannelStatusEvent(event) && this.editing && event.state === LiveChannelConnectionState.Connected) {\n        this.sendEditingState();\n      }\n\n      if (isLiveChannelMessageEvent(event)) {\n        if (event.message.sessionId === sessionId) {\n          return; // skip internal messages\n        }\n\n        const { action } = event.message;\n        switch (action) {\n          case DashboardEventAction.EditingStarted:\n          case DashboardEventAction.Saved: {\n            if (this.ignoreSave) {\n              this.ignoreSave = false;\n              return;\n            }\n\n            const dash = getDashboardSrv().getCurrent();\n            if (dash?.uid !== event.message.uid) {\n              console.log('dashboard event for different dashboard?', event, dash);\n              return;\n            }\n\n            const showPopup = this.editing || dash.hasUnsavedChanges();\n\n            if (action === DashboardEventAction.Saved) {\n              if (showPopup) {\n                appEvents.publish(\n                  new ShowModalReactEvent({\n                    component: DashboardChangedModal,\n                    props: { event },\n                  })\n                );\n              } else {\n                appEvents.emit(AppEvents.alertSuccess, ['Dashboard updated']);\n                this.reloadPage();\n              }\n            } else if (showPopup) {\n              if (action === DashboardEventAction.EditingStarted && !this.hasSeenNotice) {\n                const editingEvent = event.message;\n                const recent = this.getRecentEditingEvent();\n                if (!recent || recent.message !== editingEvent.message) {\n                  this.hasSeenNotice = true;\n                  appEvents.emit(AppEvents.alertWarning, [\n                    'Another session is editing this dashboard',\n                    editingEvent.message,\n                  ]);\n                }\n                this.lastEditing = editingEvent;\n              }\n            }\n            return;\n          }\n        }\n      }\n    },\n  };\n\n  reloadPage() {\n    locationService.reload();\n  }\n}\n\nexport const dashboardWatcher = new DashboardWatcher();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}