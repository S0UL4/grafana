{"ast":null,"code":"import { valid } from 'semver';\nimport { coerceESVersion } from '../utils';\nimport { defaultMaxConcurrentShardRequests } from './ElasticDetails';\nexport const coerceOptions = options => {\n  var _options$jsonData$inc;\n\n  const esVersion = coerceESVersion(options.jsonData.esVersion);\n  return Object.assign({}, options, {\n    jsonData: Object.assign({}, options.jsonData, {\n      timeField: options.jsonData.timeField || '@timestamp',\n      esVersion,\n      maxConcurrentShardRequests: options.jsonData.maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(esVersion),\n      logMessageField: options.jsonData.logMessageField || '',\n      logLevelField: options.jsonData.logLevelField || '',\n      includeFrozen: (_options$jsonData$inc = options.jsonData.includeFrozen) !== null && _options$jsonData$inc !== void 0 ? _options$jsonData$inc : false\n    })\n  });\n};\nexport const isValidOptions = options => {\n  return (// esVersion should be a valid semver string\n    !!valid(options.jsonData.esVersion) && // timeField should not be empty or nullish\n    !!options.jsonData.timeField && // maxConcurrentShardRequests should be a number AND greater than 0\n    !!options.jsonData.maxConcurrentShardRequests && // message & level fields should be defined\n    options.jsonData.logMessageField !== undefined && options.jsonData.logLevelField !== undefined\n  );\n};\nexport const isTruthy = value => Boolean(value);","map":{"version":3,"names":["valid","coerceESVersion","defaultMaxConcurrentShardRequests","coerceOptions","options","esVersion","jsonData","timeField","maxConcurrentShardRequests","logMessageField","logLevelField","includeFrozen","isValidOptions","undefined","isTruthy","value","Boolean"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/configuration/utils.ts"],"sourcesContent":["import { valid } from 'semver';\n\nimport { DataSourceSettings } from '@grafana/data';\n\nimport { ElasticsearchOptions } from '../types';\nimport { coerceESVersion } from '../utils';\n\nimport { defaultMaxConcurrentShardRequests } from './ElasticDetails';\n\nexport const coerceOptions = (\n  options: DataSourceSettings<ElasticsearchOptions, {}>\n): DataSourceSettings<ElasticsearchOptions, {}> => {\n  const esVersion = coerceESVersion(options.jsonData.esVersion);\n\n  return {\n    ...options,\n    jsonData: {\n      ...options.jsonData,\n      timeField: options.jsonData.timeField || '@timestamp',\n      esVersion,\n      maxConcurrentShardRequests:\n        options.jsonData.maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(esVersion),\n      logMessageField: options.jsonData.logMessageField || '',\n      logLevelField: options.jsonData.logLevelField || '',\n      includeFrozen: options.jsonData.includeFrozen ?? false,\n    },\n  };\n};\n\nexport const isValidOptions = (options: DataSourceSettings<ElasticsearchOptions, {}>): boolean => {\n  return (\n    // esVersion should be a valid semver string\n    !!valid(options.jsonData.esVersion) &&\n    // timeField should not be empty or nullish\n    !!options.jsonData.timeField &&\n    // maxConcurrentShardRequests should be a number AND greater than 0\n    !!options.jsonData.maxConcurrentShardRequests &&\n    // message & level fields should be defined\n    options.jsonData.logMessageField !== undefined &&\n    options.jsonData.logLevelField !== undefined\n  );\n};\n\ntype Truthy<T> = T extends false | '' | 0 | null | undefined ? never : T;\n\nexport const isTruthy = <T>(value: T): value is Truthy<T> => Boolean(value);\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,QAAtB;AAKA,SAASC,eAAT,QAAgC,UAAhC;AAEA,SAASC,iCAAT,QAAkD,kBAAlD;AAEA,OAAO,MAAMC,aAAa,GACxBC,OAD2B,IAEsB;EAAA;;EACjD,MAAMC,SAAS,GAAGJ,eAAe,CAACG,OAAO,CAACE,QAAR,CAAiBD,SAAlB,CAAjC;EAEA,yBACKD,OADL;IAEEE,QAAQ,oBACHF,OAAO,CAACE,QADL;MAENC,SAAS,EAAEH,OAAO,CAACE,QAAR,CAAiBC,SAAjB,IAA8B,YAFnC;MAGNF,SAHM;MAING,0BAA0B,EACxBJ,OAAO,CAACE,QAAR,CAAiBE,0BAAjB,IAA+CN,iCAAiC,CAACG,SAAD,CAL5E;MAMNI,eAAe,EAAEL,OAAO,CAACE,QAAR,CAAiBG,eAAjB,IAAoC,EAN/C;MAONC,aAAa,EAAEN,OAAO,CAACE,QAAR,CAAiBI,aAAjB,IAAkC,EAP3C;MAQNC,aAAa,2BAAEP,OAAO,CAACE,QAAR,CAAiBK,aAAnB,yEAAoC;IAR3C;EAFV;AAaD,CAlBM;AAoBP,OAAO,MAAMC,cAAc,GAAIR,OAAD,IAAoE;EAChG,OACE;IACA,CAAC,CAACJ,KAAK,CAACI,OAAO,CAACE,QAAR,CAAiBD,SAAlB,CAAP,IACA;IACA,CAAC,CAACD,OAAO,CAACE,QAAR,CAAiBC,SAFnB,IAGA;IACA,CAAC,CAACH,OAAO,CAACE,QAAR,CAAiBE,0BAJnB,IAKA;IACAJ,OAAO,CAACE,QAAR,CAAiBG,eAAjB,KAAqCI,SANrC,IAOAT,OAAO,CAACE,QAAR,CAAiBI,aAAjB,KAAmCG;EATrC;AAWD,CAZM;AAgBP,OAAO,MAAMC,QAAQ,GAAOC,KAAJ,IAAqCC,OAAO,CAACD,KAAD,CAA7D"},"metadata":{},"sourceType":"module"}