{"ast":null,"code":"var _DashboardFailed;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport classnames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService } from '@grafana/runtime';\nimport { CustomScrollbar, stylesFactory, withTheme2 } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { Branding } from 'app/core/components/Branding/Branding';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getKioskMode } from 'app/core/navigation/kiosk';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { KioskMode } from 'app/types';\nimport { PanelEditEnteredEvent, PanelEditExitedEvent } from 'app/types/events';\nimport { cancelVariables, templateVarsChangedInUrl } from '../../variables/state/actions';\nimport { findTemplateVarChanges } from '../../variables/utils';\nimport { DashNav } from '../components/DashNav';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { DashboardPrompt } from '../components/DashboardPrompt/DashboardPrompt';\nimport { DashboardSettings } from '../components/DashboardSettings';\nimport { PanelInspector } from '../components/Inspector/PanelInspector';\nimport { PanelEditor } from '../components/PanelEditor/PanelEditor';\nimport { SubMenu } from '../components/SubMenu/SubMenu';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { liveTimer } from '../dashgrid/liveTimer';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { cleanUpDashboardAndVariables } from '../state/actions';\nimport { initDashboard } from '../state/initDashboard';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const mapStateToProps = state => ({\n  initPhase: state.dashboard.initPhase,\n  initError: state.dashboard.initError,\n  dashboard: state.dashboard.getModel()\n});\nconst mapDispatchToProps = {\n  initDashboard,\n  cleanUpDashboardAndVariables,\n  notifyApp,\n  cancelVariables,\n  templateVarsChangedInUrl\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport class UnthemedDashboardPage extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"forceRouteReloadCounter\", 0);\n\n    _defineProperty(this, \"state\", this.getCleanState());\n\n    _defineProperty(this, \"updateLiveTimer\", () => {\n      var _this$props$dashboard;\n\n      let tr = undefined;\n\n      if ((_this$props$dashboard = this.props.dashboard) !== null && _this$props$dashboard !== void 0 && _this$props$dashboard.liveNow) {\n        tr = getTimeSrv().timeRange();\n      }\n\n      liveTimer.setLiveTimeRange(tr);\n    });\n\n    _defineProperty(this, \"onAddPanel\", () => {\n      const {\n        dashboard\n      } = this.props;\n\n      if (!dashboard) {\n        return;\n      } // Return if the \"Add panel\" exists already\n\n\n      if (dashboard.panels.length > 0 && dashboard.panels[0].type === 'add-panel') {\n        return;\n      }\n\n      dashboard.addPanel({\n        type: 'add-panel',\n        gridPos: {\n          x: 0,\n          y: 0,\n          w: 12,\n          h: 8\n        },\n        title: 'Panel Title'\n      }); // scroll to top after adding panel\n\n      this.setState({\n        updateScrollTop: 0\n      });\n    });\n\n    _defineProperty(this, \"setScrollRef\", scrollElement => {\n      this.setState({\n        scrollElement\n      });\n    });\n  }\n\n  getCleanState() {\n    return {\n      editPanel: null,\n      viewPanel: null,\n      showLoadingState: false,\n      rememberScrollTop: 0,\n      panelNotFound: false,\n      editPanelAccessDenied: false\n    };\n  }\n\n  componentDidMount() {\n    var _this$props$history$l;\n\n    this.initDashboard();\n    this.forceRouteReloadCounter = ((_this$props$history$l = this.props.history.location.state) === null || _this$props$history$l === void 0 ? void 0 : _this$props$history$l.routeReloadCounter) || 0;\n  }\n\n  componentWillUnmount() {\n    this.closeDashboard();\n  }\n\n  closeDashboard() {\n    this.props.cleanUpDashboardAndVariables();\n    this.setState(this.getCleanState());\n  }\n\n  initDashboard() {\n    const {\n      dashboard,\n      isPublic,\n      match,\n      queryParams\n    } = this.props;\n\n    if (dashboard) {\n      this.closeDashboard();\n    }\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      urlFolderId: queryParams.folderId,\n      routeName: this.props.route.routeName,\n      fixUrl: !isPublic,\n      accessToken: match.params.accessToken\n    }); // small delay to start live updates\n\n    setTimeout(this.updateLiveTimer, 250);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    var _this$props$history$l2;\n\n    const {\n      dashboard,\n      match,\n      templateVarsChangedInUrl\n    } = this.props;\n    const routeReloadCounter = (_this$props$history$l2 = this.props.history.location.state) === null || _this$props$history$l2 === void 0 ? void 0 : _this$props$history$l2.routeReloadCounter;\n\n    if (!dashboard) {\n      return;\n    } // if we just got dashboard update title\n\n\n    if (prevProps.dashboard !== dashboard) {\n      document.title = dashboard.title + ' - ' + Branding.AppTitle;\n    }\n\n    if (prevProps.match.params.uid !== match.params.uid || routeReloadCounter !== undefined && this.forceRouteReloadCounter !== routeReloadCounter) {\n      this.initDashboard();\n      this.forceRouteReloadCounter = routeReloadCounter;\n      return;\n    }\n\n    if (prevProps.location.search !== this.props.location.search) {\n      const prevUrlParams = prevProps.queryParams;\n      const urlParams = this.props.queryParams;\n\n      if ((urlParams === null || urlParams === void 0 ? void 0 : urlParams.from) !== (prevUrlParams === null || prevUrlParams === void 0 ? void 0 : prevUrlParams.from) || (urlParams === null || urlParams === void 0 ? void 0 : urlParams.to) !== (prevUrlParams === null || prevUrlParams === void 0 ? void 0 : prevUrlParams.to)) {\n        getTimeSrv().updateTimeRangeFromUrl();\n        this.updateLiveTimer();\n      }\n\n      if (!(prevUrlParams !== null && prevUrlParams !== void 0 && prevUrlParams.refresh) && urlParams !== null && urlParams !== void 0 && urlParams.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n\n      const templateVarChanges = findTemplateVarChanges(this.props.queryParams, prevProps.queryParams);\n\n      if (templateVarChanges) {\n        templateVarsChangedInUrl(dashboard.uid, templateVarChanges);\n      }\n    } // entering edit mode\n\n\n    if (this.state.editPanel && !prevState.editPanel) {\n      var _this$props$dashboard2;\n\n      dashboardWatcher.setEditingState(true); // Some panels need to be notified when entering edit mode\n\n      (_this$props$dashboard2 = this.props.dashboard) === null || _this$props$dashboard2 === void 0 ? void 0 : _this$props$dashboard2.events.publish(new PanelEditEnteredEvent(this.state.editPanel.id));\n    } // leaving edit mode\n\n\n    if (!this.state.editPanel && prevState.editPanel) {\n      var _this$props$dashboard3;\n\n      dashboardWatcher.setEditingState(false); // Some panels need kicked when leaving edit mode\n\n      (_this$props$dashboard3 = this.props.dashboard) === null || _this$props$dashboard3 === void 0 ? void 0 : _this$props$dashboard3.events.publish(new PanelEditExitedEvent(prevState.editPanel.id));\n    }\n\n    if (this.state.editPanelAccessDenied) {\n      this.props.notifyApp(createErrorNotification('Permission to edit panel denied'));\n      locationService.partial({\n        editPanel: null\n      });\n    }\n\n    if (this.state.panelNotFound) {\n      this.props.notifyApp(createErrorNotification(`Panel not found`));\n      locationService.partial({\n        editPanel: null,\n        viewPanel: null\n      });\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const {\n      dashboard,\n      queryParams\n    } = props;\n    const urlEditPanelId = queryParams.editPanel;\n    const urlViewPanelId = queryParams.viewPanel;\n\n    if (!dashboard) {\n      return state;\n    } // Entering edit mode\n\n\n    if (!state.editPanel && urlEditPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlEditPanelId);\n\n      if (!panel) {\n        return Object.assign({}, state, {\n          panelNotFound: true\n        });\n      }\n\n      if (dashboard.canEditPanel(panel)) {\n        var _state$scrollElement;\n\n        return Object.assign({}, state, {\n          editPanel: panel,\n          rememberScrollTop: (_state$scrollElement = state.scrollElement) === null || _state$scrollElement === void 0 ? void 0 : _state$scrollElement.scrollTop\n        });\n      } else {\n        return Object.assign({}, state, {\n          editPanelAccessDenied: true\n        });\n      }\n    } // Leaving edit mode\n    else if (state.editPanel && !urlEditPanelId) {\n      return Object.assign({}, state, {\n        editPanel: null,\n        updateScrollTop: state.rememberScrollTop\n      });\n    } // Entering view mode\n\n\n    if (!state.viewPanel && urlViewPanelId) {\n      var _state$scrollElement2;\n\n      const panel = dashboard.getPanelByUrlId(urlViewPanelId);\n\n      if (!panel) {\n        return Object.assign({}, state, {\n          panelNotFound: urlEditPanelId\n        });\n      } // This mutable state feels wrong to have in getDerivedStateFromProps\n      // Should move this state out of dashboard in the future\n\n\n      dashboard.initViewPanel(panel);\n      return Object.assign({}, state, {\n        viewPanel: panel,\n        rememberScrollTop: (_state$scrollElement2 = state.scrollElement) === null || _state$scrollElement2 === void 0 ? void 0 : _state$scrollElement2.scrollTop,\n        updateScrollTop: 0\n      });\n    } // Leaving view mode\n    else if (state.viewPanel && !urlViewPanelId) {\n      // This mutable state feels wrong to have in getDerivedStateFromProps\n      // Should move this state out of dashboard in the future\n      dashboard.exitViewPanel(state.viewPanel);\n      return Object.assign({}, state, {\n        viewPanel: null,\n        updateScrollTop: state.rememberScrollTop\n      });\n    } // if we removed url edit state, clear any panel not found state\n\n\n    if (state.panelNotFound || state.editPanelAccessDenied && !urlEditPanelId) {\n      return Object.assign({}, state, {\n        panelNotFound: false,\n        editPanelAccessDenied: false\n      });\n    }\n\n    return state;\n  }\n\n  getInspectPanel() {\n    const {\n      dashboard,\n      queryParams\n    } = this.props;\n    const inspectPanelId = queryParams.inspect;\n\n    if (!dashboard || !inspectPanelId) {\n      return null;\n    }\n\n    const inspectPanel = dashboard.getPanelById(parseInt(inspectPanelId, 10)); // cannot inspect panels plugin is not already loaded\n\n    if (!inspectPanel) {\n      return null;\n    }\n\n    return inspectPanel;\n  }\n\n  render() {\n    const {\n      dashboard,\n      initError,\n      queryParams,\n      theme,\n      isPublic\n    } = this.props;\n    const {\n      editPanel,\n      viewPanel,\n      updateScrollTop\n    } = this.state;\n    const kioskMode = !isPublic ? getKioskMode() : KioskMode.Full;\n    const styles = getStyles(theme, kioskMode);\n\n    if (!dashboard) {\n      return /*#__PURE__*/_jsx(DashboardLoading, {\n        initPhase: this.props.initPhase\n      });\n    }\n\n    const inspectPanel = this.getInspectPanel();\n    const containerClassNames = classnames(styles.dashboardContainer, {\n      'panel-in-fullscreen': viewPanel\n    });\n    const showSubMenu = !editPanel && kioskMode === KioskMode.Off && !this.props.queryParams.editview;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: containerClassNames,\n      children: [kioskMode !== KioskMode.Full && /*#__PURE__*/_jsx(\"header\", {\n        \"data-testid\": selectors.pages.Dashboard.DashNav.navV2,\n        children: /*#__PURE__*/_jsx(DashNav, {\n          dashboard: dashboard,\n          title: dashboard.title,\n          folderTitle: dashboard.meta.folderTitle,\n          isFullscreen: !!viewPanel,\n          onAddPanel: this.onAddPanel,\n          kioskMode: kioskMode,\n          hideTimePicker: dashboard.timepicker.hidden\n        })\n      }), /*#__PURE__*/_jsx(DashboardPrompt, {\n        dashboard: dashboard\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.dashboardScroll,\n        children: /*#__PURE__*/_jsx(CustomScrollbar, {\n          autoHeightMin: \"100%\",\n          scrollRefCallback: this.setScrollRef,\n          scrollTop: updateScrollTop,\n          hideHorizontalTrack: true,\n          updateAfterMountMs: 500,\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.dashboardContent,\n            children: [initError && (_DashboardFailed || (_DashboardFailed = /*#__PURE__*/_jsx(DashboardFailed, {}))), showSubMenu && /*#__PURE__*/_jsx(\"section\", {\n              \"aria-label\": selectors.pages.Dashboard.SubMenu.submenu,\n              children: /*#__PURE__*/_jsx(SubMenu, {\n                dashboard: dashboard,\n                annotations: dashboard.annotations.list,\n                links: dashboard.links\n              })\n            }), /*#__PURE__*/_jsx(DashboardGrid, {\n              dashboard: dashboard,\n              viewPanel: viewPanel,\n              editPanel: editPanel\n            })]\n          })\n        })\n      }), inspectPanel && /*#__PURE__*/_jsx(PanelInspector, {\n        dashboard: dashboard,\n        panel: inspectPanel\n      }), editPanel && /*#__PURE__*/_jsx(PanelEditor, {\n        dashboard: dashboard,\n        sourcePanel: editPanel,\n        tab: this.props.queryParams.tab\n      }), queryParams.editview && /*#__PURE__*/_jsx(DashboardSettings, {\n        dashboard: dashboard,\n        editview: queryParams.editview\n      })]\n    });\n  }\n\n}\n/*\n * Styles\n */\n\nexport const getStyles = stylesFactory((theme, kioskMode) => {\n  const contentPadding = kioskMode !== KioskMode.Full ? theme.spacing(0, 2, 2) : theme.spacing(2);\n  return {\n    dashboardContainer: css`\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex: 1 1 0;\n      flex-direction: column;\n      min-height: 0;\n    `,\n    dashboardScroll: css`\n      width: 100%;\n      flex-grow: 1;\n      min-height: 0;\n      display: flex;\n    `,\n    dashboardContent: css`\n      padding: ${contentPadding};\n      flex-basis: 100%;\n      flex-grow: 1;\n    `\n  };\n});\nexport const DashboardPage = withTheme2(UnthemedDashboardPage);\nDashboardPage.displayName = 'DashboardPage';\nexport default connector(DashboardPage);","map":{"version":3,"names":["css","classnames","React","PureComponent","connect","selectors","locationService","CustomScrollbar","stylesFactory","withTheme2","notifyApp","Branding","createErrorNotification","getKioskMode","dashboardWatcher","KioskMode","PanelEditEnteredEvent","PanelEditExitedEvent","cancelVariables","templateVarsChangedInUrl","findTemplateVarChanges","DashNav","DashboardFailed","DashboardLoading","DashboardPrompt","DashboardSettings","PanelInspector","PanelEditor","SubMenu","DashboardGrid","liveTimer","getTimeSrv","cleanUpDashboardAndVariables","initDashboard","mapStateToProps","state","initPhase","dashboard","initError","getModel","mapDispatchToProps","connector","UnthemedDashboardPage","getCleanState","tr","undefined","props","liveNow","timeRange","setLiveTimeRange","panels","length","type","addPanel","gridPos","x","y","w","h","title","setState","updateScrollTop","scrollElement","editPanel","viewPanel","showLoadingState","rememberScrollTop","panelNotFound","editPanelAccessDenied","componentDidMount","forceRouteReloadCounter","history","location","routeReloadCounter","componentWillUnmount","closeDashboard","isPublic","match","queryParams","urlSlug","params","slug","urlUid","uid","urlType","urlFolderId","folderId","routeName","route","fixUrl","accessToken","setTimeout","updateLiveTimer","componentDidUpdate","prevProps","prevState","document","AppTitle","search","prevUrlParams","urlParams","from","to","updateTimeRangeFromUrl","refresh","setAutoRefresh","templateVarChanges","setEditingState","events","publish","id","partial","getDerivedStateFromProps","urlEditPanelId","urlViewPanelId","panel","getPanelByUrlId","canEditPanel","scrollTop","initViewPanel","exitViewPanel","getInspectPanel","inspectPanelId","inspect","inspectPanel","getPanelById","parseInt","render","theme","kioskMode","Full","styles","getStyles","containerClassNames","dashboardContainer","showSubMenu","Off","editview","pages","Dashboard","navV2","meta","folderTitle","onAddPanel","timepicker","hidden","dashboardScroll","setScrollRef","dashboardContent","submenu","annotations","list","links","tab","contentPadding","spacing","DashboardPage","displayName"],"sources":["/home/soula/grafana/public/app/features/dashboard/containers/DashboardPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport classnames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService } from '@grafana/runtime';\nimport { CustomScrollbar, stylesFactory, Themeable2, withTheme2 } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { Branding } from 'app/core/components/Branding/Branding';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getKioskMode } from 'app/core/navigation/kiosk';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { KioskMode, StoreState } from 'app/types';\nimport { PanelEditEnteredEvent, PanelEditExitedEvent } from 'app/types/events';\n\nimport { cancelVariables, templateVarsChangedInUrl } from '../../variables/state/actions';\nimport { findTemplateVarChanges } from '../../variables/utils';\nimport { DashNav } from '../components/DashNav';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { DashboardPrompt } from '../components/DashboardPrompt/DashboardPrompt';\nimport { DashboardSettings } from '../components/DashboardSettings';\nimport { PanelInspector } from '../components/Inspector/PanelInspector';\nimport { PanelEditor } from '../components/PanelEditor/PanelEditor';\nimport { SubMenu } from '../components/SubMenu/SubMenu';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { liveTimer } from '../dashgrid/liveTimer';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { cleanUpDashboardAndVariables } from '../state/actions';\nimport { initDashboard } from '../state/initDashboard';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n  accessToken?: string;\n}\n\nexport type DashboardPageRouteSearchParams = {\n  tab?: string;\n  folderId?: string;\n  editPanel?: string;\n  viewPanel?: string;\n  editview?: string;\n  inspect?: string;\n  from?: string;\n  to?: string;\n  refresh?: string;\n};\n\nexport const mapStateToProps = (state: StoreState) => ({\n  initPhase: state.dashboard.initPhase,\n  initError: state.dashboard.initError,\n  dashboard: state.dashboard.getModel(),\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n  cleanUpDashboardAndVariables,\n  notifyApp,\n  cancelVariables,\n  templateVarsChangedInUrl,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype OwnProps = {\n  isPublic?: boolean;\n};\n\nexport type Props = OwnProps &\n  Themeable2 &\n  GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  editPanel: PanelModel | null;\n  viewPanel: PanelModel | null;\n  updateScrollTop?: number;\n  rememberScrollTop: number;\n  showLoadingState: boolean;\n  panelNotFound: boolean;\n  editPanelAccessDenied: boolean;\n  scrollElement?: HTMLDivElement;\n}\n\nexport class UnthemedDashboardPage extends PureComponent<Props, State> {\n  private forceRouteReloadCounter = 0;\n  state: State = this.getCleanState();\n\n  getCleanState(): State {\n    return {\n      editPanel: null,\n      viewPanel: null,\n      showLoadingState: false,\n      rememberScrollTop: 0,\n      panelNotFound: false,\n      editPanelAccessDenied: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initDashboard();\n    this.forceRouteReloadCounter = (this.props.history.location.state as any)?.routeReloadCounter || 0;\n  }\n\n  componentWillUnmount() {\n    this.closeDashboard();\n  }\n\n  closeDashboard() {\n    this.props.cleanUpDashboardAndVariables();\n    this.setState(this.getCleanState());\n  }\n\n  initDashboard() {\n    const { dashboard, isPublic, match, queryParams } = this.props;\n\n    if (dashboard) {\n      this.closeDashboard();\n    }\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      urlFolderId: queryParams.folderId,\n      routeName: this.props.route.routeName,\n      fixUrl: !isPublic,\n      accessToken: match.params.accessToken,\n    });\n\n    // small delay to start live updates\n    setTimeout(this.updateLiveTimer, 250);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { dashboard, match, templateVarsChangedInUrl } = this.props;\n    const routeReloadCounter = (this.props.history.location.state as any)?.routeReloadCounter;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // if we just got dashboard update title\n    if (prevProps.dashboard !== dashboard) {\n      document.title = dashboard.title + ' - ' + Branding.AppTitle;\n    }\n\n    if (\n      prevProps.match.params.uid !== match.params.uid ||\n      (routeReloadCounter !== undefined && this.forceRouteReloadCounter !== routeReloadCounter)\n    ) {\n      this.initDashboard();\n      this.forceRouteReloadCounter = routeReloadCounter;\n      return;\n    }\n\n    if (prevProps.location.search !== this.props.location.search) {\n      const prevUrlParams = prevProps.queryParams;\n      const urlParams = this.props.queryParams;\n\n      if (urlParams?.from !== prevUrlParams?.from || urlParams?.to !== prevUrlParams?.to) {\n        getTimeSrv().updateTimeRangeFromUrl();\n        this.updateLiveTimer();\n      }\n\n      if (!prevUrlParams?.refresh && urlParams?.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n\n      const templateVarChanges = findTemplateVarChanges(this.props.queryParams, prevProps.queryParams);\n\n      if (templateVarChanges) {\n        templateVarsChangedInUrl(dashboard.uid, templateVarChanges);\n      }\n    }\n\n    // entering edit mode\n    if (this.state.editPanel && !prevState.editPanel) {\n      dashboardWatcher.setEditingState(true);\n\n      // Some panels need to be notified when entering edit mode\n      this.props.dashboard?.events.publish(new PanelEditEnteredEvent(this.state.editPanel.id));\n    }\n\n    // leaving edit mode\n    if (!this.state.editPanel && prevState.editPanel) {\n      dashboardWatcher.setEditingState(false);\n\n      // Some panels need kicked when leaving edit mode\n      this.props.dashboard?.events.publish(new PanelEditExitedEvent(prevState.editPanel.id));\n    }\n\n    if (this.state.editPanelAccessDenied) {\n      this.props.notifyApp(createErrorNotification('Permission to edit panel denied'));\n      locationService.partial({ editPanel: null });\n    }\n\n    if (this.state.panelNotFound) {\n      this.props.notifyApp(createErrorNotification(`Panel not found`));\n      locationService.partial({ editPanel: null, viewPanel: null });\n    }\n  }\n\n  updateLiveTimer = () => {\n    let tr: TimeRange | undefined = undefined;\n    if (this.props.dashboard?.liveNow) {\n      tr = getTimeSrv().timeRange();\n    }\n    liveTimer.setLiveTimeRange(tr);\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    const { dashboard, queryParams } = props;\n\n    const urlEditPanelId = queryParams.editPanel;\n    const urlViewPanelId = queryParams.viewPanel;\n\n    if (!dashboard) {\n      return state;\n    }\n\n    // Entering edit mode\n    if (!state.editPanel && urlEditPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlEditPanelId);\n      if (!panel) {\n        return { ...state, panelNotFound: true };\n      }\n\n      if (dashboard.canEditPanel(panel)) {\n        return { ...state, editPanel: panel, rememberScrollTop: state.scrollElement?.scrollTop };\n      } else {\n        return { ...state, editPanelAccessDenied: true };\n      }\n    }\n    // Leaving edit mode\n    else if (state.editPanel && !urlEditPanelId) {\n      return { ...state, editPanel: null, updateScrollTop: state.rememberScrollTop };\n    }\n\n    // Entering view mode\n    if (!state.viewPanel && urlViewPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlViewPanelId);\n      if (!panel) {\n        return { ...state, panelNotFound: urlEditPanelId };\n      }\n\n      // This mutable state feels wrong to have in getDerivedStateFromProps\n      // Should move this state out of dashboard in the future\n      dashboard.initViewPanel(panel);\n\n      return { ...state, viewPanel: panel, rememberScrollTop: state.scrollElement?.scrollTop, updateScrollTop: 0 };\n    }\n    // Leaving view mode\n    else if (state.viewPanel && !urlViewPanelId) {\n      // This mutable state feels wrong to have in getDerivedStateFromProps\n      // Should move this state out of dashboard in the future\n      dashboard.exitViewPanel(state.viewPanel);\n\n      return { ...state, viewPanel: null, updateScrollTop: state.rememberScrollTop };\n    }\n\n    // if we removed url edit state, clear any panel not found state\n    if (state.panelNotFound || (state.editPanelAccessDenied && !urlEditPanelId)) {\n      return { ...state, panelNotFound: false, editPanelAccessDenied: false };\n    }\n\n    return state;\n  }\n\n  onAddPanel = () => {\n    const { dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // Return if the \"Add panel\" exists already\n    if (dashboard.panels.length > 0 && dashboard.panels[0].type === 'add-panel') {\n      return;\n    }\n\n    dashboard.addPanel({\n      type: 'add-panel',\n      gridPos: { x: 0, y: 0, w: 12, h: 8 },\n      title: 'Panel Title',\n    });\n\n    // scroll to top after adding panel\n    this.setState({ updateScrollTop: 0 });\n  };\n\n  setScrollRef = (scrollElement: HTMLDivElement): void => {\n    this.setState({ scrollElement });\n  };\n\n  getInspectPanel() {\n    const { dashboard, queryParams } = this.props;\n\n    const inspectPanelId = queryParams.inspect;\n\n    if (!dashboard || !inspectPanelId) {\n      return null;\n    }\n\n    const inspectPanel = dashboard.getPanelById(parseInt(inspectPanelId, 10));\n\n    // cannot inspect panels plugin is not already loaded\n    if (!inspectPanel) {\n      return null;\n    }\n\n    return inspectPanel;\n  }\n\n  render() {\n    const { dashboard, initError, queryParams, theme, isPublic } = this.props;\n    const { editPanel, viewPanel, updateScrollTop } = this.state;\n    const kioskMode = !isPublic ? getKioskMode() : KioskMode.Full;\n    const styles = getStyles(theme, kioskMode);\n\n    if (!dashboard) {\n      return <DashboardLoading initPhase={this.props.initPhase} />;\n    }\n\n    const inspectPanel = this.getInspectPanel();\n    const containerClassNames = classnames(styles.dashboardContainer, {\n      'panel-in-fullscreen': viewPanel,\n    });\n    const showSubMenu = !editPanel && kioskMode === KioskMode.Off && !this.props.queryParams.editview;\n\n    return (\n      <div className={containerClassNames}>\n        {kioskMode !== KioskMode.Full && (\n          <header data-testid={selectors.pages.Dashboard.DashNav.navV2}>\n            <DashNav\n              dashboard={dashboard}\n              title={dashboard.title}\n              folderTitle={dashboard.meta.folderTitle}\n              isFullscreen={!!viewPanel}\n              onAddPanel={this.onAddPanel}\n              kioskMode={kioskMode}\n              hideTimePicker={dashboard.timepicker.hidden}\n            />\n          </header>\n        )}\n\n        <DashboardPrompt dashboard={dashboard} />\n\n        <div className={styles.dashboardScroll}>\n          <CustomScrollbar\n            autoHeightMin=\"100%\"\n            scrollRefCallback={this.setScrollRef}\n            scrollTop={updateScrollTop}\n            hideHorizontalTrack={true}\n            updateAfterMountMs={500}\n          >\n            <div className={styles.dashboardContent}>\n              {initError && <DashboardFailed />}\n              {showSubMenu && (\n                <section aria-label={selectors.pages.Dashboard.SubMenu.submenu}>\n                  <SubMenu dashboard={dashboard} annotations={dashboard.annotations.list} links={dashboard.links} />\n                </section>\n              )}\n\n              <DashboardGrid dashboard={dashboard} viewPanel={viewPanel} editPanel={editPanel} />\n            </div>\n          </CustomScrollbar>\n        </div>\n\n        {inspectPanel && <PanelInspector dashboard={dashboard} panel={inspectPanel} />}\n        {editPanel && <PanelEditor dashboard={dashboard} sourcePanel={editPanel} tab={this.props.queryParams.tab} />}\n        {queryParams.editview && <DashboardSettings dashboard={dashboard} editview={queryParams.editview} />}\n      </div>\n    );\n  }\n}\n\n/*\n * Styles\n */\nexport const getStyles = stylesFactory((theme: GrafanaTheme2, kioskMode: KioskMode) => {\n  const contentPadding = kioskMode !== KioskMode.Full ? theme.spacing(0, 2, 2) : theme.spacing(2);\n  return {\n    dashboardContainer: css`\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex: 1 1 0;\n      flex-direction: column;\n      min-height: 0;\n    `,\n    dashboardScroll: css`\n      width: 100%;\n      flex-grow: 1;\n      min-height: 0;\n      display: flex;\n    `,\n    dashboardContent: css`\n      padding: ${contentPadding};\n      flex-basis: 100%;\n      flex-grow: 1;\n    `,\n  };\n});\n\nexport const DashboardPage = withTheme2(UnthemedDashboardPage);\nDashboardPage.displayName = 'DashboardPage';\nexport default connector(DashboardPage);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}