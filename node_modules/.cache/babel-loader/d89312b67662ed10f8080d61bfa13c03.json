{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { importDataSourcePlugin } from '../../plugins/plugin_loader';\nimport { hasCustomVariableSupport, hasDatasourceVariableSupport, hasLegacyVariableSupport, hasStandardVariableSupport } from '../guard';\nimport { LegacyVariableQueryEditor } from './LegacyVariableQueryEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport async function getVariableQueryEditor(datasource, importDataSourcePluginFunc = importDataSourcePlugin) {\n  if (hasCustomVariableSupport(datasource)) {\n    return datasource.variables.editor;\n  }\n\n  if (hasDatasourceVariableSupport(datasource)) {\n    var _dsPlugin$components$;\n\n    const dsPlugin = await importDataSourcePluginFunc(datasource.meta);\n\n    if (!dsPlugin.components.QueryEditor) {\n      throw new Error('Missing QueryEditor in plugin definition.');\n    }\n\n    return (_dsPlugin$components$ = dsPlugin.components.QueryEditor) !== null && _dsPlugin$components$ !== void 0 ? _dsPlugin$components$ : null;\n  }\n\n  if (hasStandardVariableSupport(datasource)) {\n    return StandardVariableQueryEditor;\n  }\n\n  if (hasLegacyVariableSupport(datasource)) {\n    var _dsPlugin$components$2;\n\n    const dsPlugin = await importDataSourcePluginFunc(datasource.meta);\n    return (_dsPlugin$components$2 = dsPlugin.components.VariableQueryEditor) !== null && _dsPlugin$components$2 !== void 0 ? _dsPlugin$components$2 : LegacyVariableQueryEditor;\n  }\n\n  return null;\n}\nexport function StandardVariableQueryEditor({\n  datasource: propsDatasource,\n  query: propsQuery,\n  onChange: propsOnChange\n}) {\n  const onChange = useCallback(query => {\n    propsOnChange({\n      refId: 'StandardVariableQuery',\n      query\n    });\n  }, [propsOnChange]);\n  return /*#__PURE__*/_jsx(LegacyVariableQueryEditor, {\n    query: propsQuery.query,\n    onChange: onChange,\n    datasource: propsDatasource,\n    templateSrv: getTemplateSrv()\n  });\n}","map":{"version":3,"names":["React","useCallback","getTemplateSrv","importDataSourcePlugin","hasCustomVariableSupport","hasDatasourceVariableSupport","hasLegacyVariableSupport","hasStandardVariableSupport","LegacyVariableQueryEditor","getVariableQueryEditor","datasource","importDataSourcePluginFunc","variables","editor","dsPlugin","meta","components","QueryEditor","Error","StandardVariableQueryEditor","VariableQueryEditor","propsDatasource","query","propsQuery","onChange","propsOnChange","refId"],"sources":["/home/soula/grafana/public/app/features/variables/editor/getVariableQueryEditor.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\n\nimport { DataQuery, DataSourceApi, DataSourceJsonData, QueryEditorProps, StandardVariableQuery } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { importDataSourcePlugin } from '../../plugins/plugin_loader';\nimport {\n  hasCustomVariableSupport,\n  hasDatasourceVariableSupport,\n  hasLegacyVariableSupport,\n  hasStandardVariableSupport,\n} from '../guard';\nimport { VariableQueryEditorType } from '../types';\n\nimport { LegacyVariableQueryEditor } from './LegacyVariableQueryEditor';\n\nexport async function getVariableQueryEditor<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData,\n  VariableQuery extends DataQuery = TQuery\n>(\n  datasource: DataSourceApi<TQuery, TOptions>,\n  importDataSourcePluginFunc = importDataSourcePlugin\n): Promise<VariableQueryEditorType> {\n  if (hasCustomVariableSupport(datasource)) {\n    return datasource.variables.editor;\n  }\n\n  if (hasDatasourceVariableSupport(datasource)) {\n    const dsPlugin = await importDataSourcePluginFunc(datasource.meta!);\n\n    if (!dsPlugin.components.QueryEditor) {\n      throw new Error('Missing QueryEditor in plugin definition.');\n    }\n\n    return dsPlugin.components.QueryEditor ?? null;\n  }\n\n  if (hasStandardVariableSupport(datasource)) {\n    return StandardVariableQueryEditor;\n  }\n\n  if (hasLegacyVariableSupport(datasource)) {\n    const dsPlugin = await importDataSourcePluginFunc(datasource.meta!);\n    return dsPlugin.components.VariableQueryEditor ?? LegacyVariableQueryEditor;\n  }\n\n  return null;\n}\n\nexport function StandardVariableQueryEditor<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n>({\n  datasource: propsDatasource,\n  query: propsQuery,\n  onChange: propsOnChange,\n}: QueryEditorProps<any, TQuery, TOptions, StandardVariableQuery>) {\n  const onChange = useCallback(\n    (query: any) => {\n      propsOnChange({ refId: 'StandardVariableQuery', query });\n    },\n    [propsOnChange]\n  );\n\n  return (\n    <LegacyVariableQueryEditor\n      query={propsQuery.query}\n      onChange={onChange}\n      datasource={propsDatasource}\n      templateSrv={getTemplateSrv()}\n    />\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,sBAAT,QAAuC,6BAAvC;AACA,SACEC,wBADF,EAEEC,4BAFF,EAGEC,wBAHF,EAIEC,0BAJF,QAKO,UALP;AAQA,SAASC,yBAAT,QAA0C,6BAA1C;;AAEA,OAAO,eAAeC,sBAAf,CAKLC,UALK,EAMLC,0BAA0B,GAAGR,sBANxB,EAO6B;EAClC,IAAIC,wBAAwB,CAACM,UAAD,CAA5B,EAA0C;IACxC,OAAOA,UAAU,CAACE,SAAX,CAAqBC,MAA5B;EACD;;EAED,IAAIR,4BAA4B,CAACK,UAAD,CAAhC,EAA8C;IAAA;;IAC5C,MAAMI,QAAQ,GAAG,MAAMH,0BAA0B,CAACD,UAAU,CAACK,IAAZ,CAAjD;;IAEA,IAAI,CAACD,QAAQ,CAACE,UAAT,CAAoBC,WAAzB,EAAsC;MACpC,MAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;IACD;;IAED,gCAAOJ,QAAQ,CAACE,UAAT,CAAoBC,WAA3B,yEAA0C,IAA1C;EACD;;EAED,IAAIV,0BAA0B,CAACG,UAAD,CAA9B,EAA4C;IAC1C,OAAOS,2BAAP;EACD;;EAED,IAAIb,wBAAwB,CAACI,UAAD,CAA5B,EAA0C;IAAA;;IACxC,MAAMI,QAAQ,GAAG,MAAMH,0BAA0B,CAACD,UAAU,CAACK,IAAZ,CAAjD;IACA,iCAAOD,QAAQ,CAACE,UAAT,CAAoBI,mBAA3B,2EAAkDZ,yBAAlD;EACD;;EAED,OAAO,IAAP;AACD;AAED,OAAO,SAASW,2BAAT,CAGL;EACAT,UAAU,EAAEW,eADZ;EAEAC,KAAK,EAAEC,UAFP;EAGAC,QAAQ,EAAEC;AAHV,CAHK,EAO4D;EACjE,MAAMD,QAAQ,GAAGvB,WAAW,CACzBqB,KAAD,IAAgB;IACdG,aAAa,CAAC;MAAEC,KAAK,EAAE,uBAAT;MAAkCJ;IAAlC,CAAD,CAAb;EACD,CAHyB,EAI1B,CAACG,aAAD,CAJ0B,CAA5B;EAOA,oBACE,KAAC,yBAAD;IACE,KAAK,EAAEF,UAAU,CAACD,KADpB;IAEE,QAAQ,EAAEE,QAFZ;IAGE,UAAU,EAAEH,eAHd;IAIE,WAAW,EAAEnB,cAAc;EAJ7B,EADF;AAQD"},"metadata":{},"sourceType":"module"}