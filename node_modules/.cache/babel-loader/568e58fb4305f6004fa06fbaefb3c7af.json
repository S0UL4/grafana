{"ast":null,"code":"const _excluded = [\"ref\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Field, Input, InputControl, Select } from '@grafana/ui';\nimport { NotificationChannelOptions } from './NotificationChannelOptions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const BasicSettings = ({\n  control,\n  currentFormValues,\n  errors,\n  secureFields,\n  selectedChannel,\n  channels,\n  register,\n  resetSecureField\n}) => {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Field, {\n      label: \"Name\",\n      invalid: !!errors.name,\n      error: errors.name && errors.name.message,\n      children: /*#__PURE__*/_jsx(Input, Object.assign({}, register('name', {\n        required: 'Name is required'\n      })))\n    }), /*#__PURE__*/_jsx(Field, {\n      label: \"Type\",\n      children: /*#__PURE__*/_jsx(InputControl, {\n        name: \"type\",\n        render: _ref => {\n          let {} = _ref,\n              field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n          return /*#__PURE__*/_jsx(Select, Object.assign({}, field, {\n            options: channels\n          }));\n        },\n        control: control,\n        rules: {\n          required: true\n        }\n      })\n    }), /*#__PURE__*/_jsx(NotificationChannelOptions, {\n      selectedChannelOptions: selectedChannel.options.filter(o => o.required),\n      currentFormValues: currentFormValues,\n      secureFields: secureFields,\n      onResetSecureField: resetSecureField,\n      register: register,\n      errors: errors,\n      control: control\n    })]\n  });\n};","map":{"version":3,"names":["React","Field","Input","InputControl","Select","NotificationChannelOptions","BasicSettings","control","currentFormValues","errors","secureFields","selectedChannel","channels","register","resetSecureField","name","message","required","field","options","filter","o"],"sources":["/home/soula/grafana/public/app/features/alerting/components/BasicSettings.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Field, Input, InputControl, Select } from '@grafana/ui';\n\nimport { NotificationChannelSecureFields, NotificationChannelType } from '../../../types';\n\nimport { NotificationSettingsProps } from './NotificationChannelForm';\nimport { NotificationChannelOptions } from './NotificationChannelOptions';\n\ninterface Props extends NotificationSettingsProps {\n  selectedChannel: NotificationChannelType;\n  channels: Array<SelectableValue<string>>;\n  secureFields: NotificationChannelSecureFields;\n  resetSecureField: (key: string) => void;\n}\n\nexport const BasicSettings: FC<Props> = ({\n  control,\n  currentFormValues,\n  errors,\n  secureFields,\n  selectedChannel,\n  channels,\n  register,\n  resetSecureField,\n}) => {\n  return (\n    <>\n      <Field label=\"Name\" invalid={!!errors.name} error={errors.name && errors.name.message}>\n        <Input {...register('name', { required: 'Name is required' })} />\n      </Field>\n      <Field label=\"Type\">\n        <InputControl\n          name=\"type\"\n          render={({ field: { ref, ...field } }) => <Select {...field} options={channels} />}\n          control={control}\n          rules={{ required: true }}\n        />\n      </Field>\n      <NotificationChannelOptions\n        selectedChannelOptions={selectedChannel.options.filter((o) => o.required)}\n        currentFormValues={currentFormValues}\n        secureFields={secureFields}\n        onResetSecureField={resetSecureField}\n        register={register}\n        errors={errors}\n        control={control}\n      />\n    </>\n  );\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAGA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,YAAvB,EAAqCC,MAArC,QAAmD,aAAnD;AAKA,SAASC,0BAAT,QAA2C,8BAA3C;;;;AASA,OAAO,MAAMC,aAAwB,GAAG,CAAC;EACvCC,OADuC;EAEvCC,iBAFuC;EAGvCC,MAHuC;EAIvCC,YAJuC;EAKvCC,eALuC;EAMvCC,QANuC;EAOvCC,QAPuC;EAQvCC;AARuC,CAAD,KASlC;EACJ,oBACE;IAAA,wBACE,KAAC,KAAD;MAAO,KAAK,EAAC,MAAb;MAAoB,OAAO,EAAE,CAAC,CAACL,MAAM,CAACM,IAAtC;MAA4C,KAAK,EAAEN,MAAM,CAACM,IAAP,IAAeN,MAAM,CAACM,IAAP,CAAYC,OAA9E;MAAA,uBACE,KAAC,KAAD,oBAAWH,QAAQ,CAAC,MAAD,EAAS;QAAEI,QAAQ,EAAE;MAAZ,CAAT,CAAnB;IADF,EADF,eAIE,KAAC,KAAD;MAAO,KAAK,EAAC,MAAb;MAAA,uBACE,KAAC,YAAD;QACE,IAAI,EAAC,MADP;QAEE,MAAM,EAAE;UAAA,IAAC,EAAD;UAAA,IAAoBC,KAApB,sCAAGA,KAAH;;UAAA,oBAAkC,KAAC,MAAD,oBAAYA,KAAZ;YAAmB,OAAO,EAAEN;UAA5B,GAAlC;QAAA,CAFV;QAGE,OAAO,EAAEL,OAHX;QAIE,KAAK,EAAE;UAAEU,QAAQ,EAAE;QAAZ;MAJT;IADF,EAJF,eAYE,KAAC,0BAAD;MACE,sBAAsB,EAAEN,eAAe,CAACQ,OAAhB,CAAwBC,MAAxB,CAAgCC,CAAD,IAAOA,CAAC,CAACJ,QAAxC,CAD1B;MAEE,iBAAiB,EAAET,iBAFrB;MAGE,YAAY,EAAEE,YAHhB;MAIE,kBAAkB,EAAEI,gBAJtB;MAKE,QAAQ,EAAED,QALZ;MAME,MAAM,EAAEJ,MANV;MAOE,OAAO,EAAEF;IAPX,EAZF;EAAA,EADF;AAwBD,CAlCM"},"metadata":{},"sourceType":"module"}