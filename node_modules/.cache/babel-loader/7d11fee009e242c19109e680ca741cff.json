{"ast":null,"code":"import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { applyFieldOverrides } from '@grafana/data';\nimport { Collapse, Table } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { MetaInfoText } from './MetaInfoText';\nimport { splitOpen } from './state/main';\nimport { getFieldLinksForExplore } from './utils/links';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction mapStateToProps(state, {\n  exploreId\n}) {\n  const explore = state.explore; // @ts-ignore\n\n  const item = explore[exploreId];\n  const {\n    loading: loadingInState,\n    tableResult,\n    range\n  } = item;\n  const loading = tableResult && tableResult.length > 0 ? false : loadingInState;\n  return {\n    loading,\n    tableResult,\n    range\n  };\n}\n\nconst mapDispatchToProps = {\n  splitOpen\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport class TableContainer extends PureComponent {\n  getTableHeight() {\n    const {\n      tableResult\n    } = this.props;\n\n    if (!tableResult || tableResult.length === 0) {\n      return 200;\n    } // tries to estimate table height\n\n\n    return Math.max(Math.min(600, tableResult.length * 35) + 35);\n  }\n\n  render() {\n    var _dataFrame, _dataFrame2;\n\n    const {\n      loading,\n      onCellFilterAdded,\n      tableResult,\n      width,\n      splitOpen,\n      range,\n      ariaLabel,\n      timeZone\n    } = this.props;\n    const height = this.getTableHeight();\n    const tableWidth = width - config.theme.panelPadding * 2 - PANEL_BORDER;\n    let dataFrame = tableResult;\n\n    if ((_dataFrame = dataFrame) !== null && _dataFrame !== void 0 && _dataFrame.length) {\n      dataFrame = applyFieldOverrides({\n        data: [dataFrame],\n        timeZone,\n        theme: config.theme2,\n        replaceVariables: v => v,\n        fieldConfig: {\n          defaults: {},\n          overrides: []\n        }\n      })[0]; // Bit of code smell here. We need to add links here to the frame modifying the frame on every render.\n      // Should work fine in essence but still not the ideal way to pass props. In logs container we do this\n      // differently and sidestep this getLinks API on a dataframe\n\n      for (const field of dataFrame.fields) {\n        field.getLinks = config => {\n          return getFieldLinksForExplore({\n            field,\n            rowIndex: config.valueRowIndex,\n            splitOpenFn: splitOpen,\n            range,\n            dataFrame: dataFrame\n          });\n        };\n      }\n    }\n\n    return /*#__PURE__*/_jsx(Collapse, {\n      label: \"Table\",\n      loading: loading,\n      isOpen: true,\n      children: (_dataFrame2 = dataFrame) !== null && _dataFrame2 !== void 0 && _dataFrame2.length ? /*#__PURE__*/_jsx(Table, {\n        ariaLabel: ariaLabel,\n        data: dataFrame,\n        width: tableWidth,\n        height: height,\n        onCellFilterAdded: onCellFilterAdded\n      }) : /*#__PURE__*/_jsx(MetaInfoText, {\n        metaItems: [{\n          value: '0 series returned'\n        }]\n      })\n    });\n  }\n\n}\nexport default connector(TableContainer);","map":{"version":3,"names":["React","PureComponent","connect","applyFieldOverrides","Collapse","Table","config","PANEL_BORDER","MetaInfoText","splitOpen","getFieldLinksForExplore","mapStateToProps","state","exploreId","explore","item","loading","loadingInState","tableResult","range","length","mapDispatchToProps","connector","TableContainer","getTableHeight","props","Math","max","min","render","onCellFilterAdded","width","ariaLabel","timeZone","height","tableWidth","theme","panelPadding","dataFrame","data","theme2","replaceVariables","v","fieldConfig","defaults","overrides","field","fields","getLinks","rowIndex","valueRowIndex","splitOpenFn","value"],"sources":["/home/soula/grafana/public/app/features/explore/TableContainer.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { ValueLinkConfig, applyFieldOverrides, TimeZone } from '@grafana/data';\nimport { Collapse, Table } from '@grafana/ui';\nimport { FilterItem } from '@grafana/ui/src/components/Table/types';\nimport { config } from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { StoreState } from 'app/types';\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\n\nimport { MetaInfoText } from './MetaInfoText';\nimport { splitOpen } from './state/main';\nimport { getFieldLinksForExplore } from './utils/links';\n\ninterface TableContainerProps {\n  ariaLabel?: string;\n  exploreId: ExploreId;\n  width: number;\n  timeZone: TimeZone;\n  onCellFilterAdded?: (filter: FilterItem) => void;\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: TableContainerProps) {\n  const explore = state.explore;\n  // @ts-ignore\n  const item: ExploreItemState = explore[exploreId];\n  const { loading: loadingInState, tableResult, range } = item;\n  const loading = tableResult && tableResult.length > 0 ? false : loadingInState;\n  return { loading, tableResult, range };\n}\n\nconst mapDispatchToProps = {\n  splitOpen,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = TableContainerProps & ConnectedProps<typeof connector>;\n\nexport class TableContainer extends PureComponent<Props> {\n  getTableHeight() {\n    const { tableResult } = this.props;\n\n    if (!tableResult || tableResult.length === 0) {\n      return 200;\n    }\n\n    // tries to estimate table height\n    return Math.max(Math.min(600, tableResult.length * 35) + 35);\n  }\n\n  render() {\n    const { loading, onCellFilterAdded, tableResult, width, splitOpen, range, ariaLabel, timeZone } = this.props;\n    const height = this.getTableHeight();\n    const tableWidth = width - config.theme.panelPadding * 2 - PANEL_BORDER;\n\n    let dataFrame = tableResult;\n\n    if (dataFrame?.length) {\n      dataFrame = applyFieldOverrides({\n        data: [dataFrame],\n        timeZone,\n        theme: config.theme2,\n        replaceVariables: (v: string) => v,\n        fieldConfig: {\n          defaults: {},\n          overrides: [],\n        },\n      })[0];\n      // Bit of code smell here. We need to add links here to the frame modifying the frame on every render.\n      // Should work fine in essence but still not the ideal way to pass props. In logs container we do this\n      // differently and sidestep this getLinks API on a dataframe\n      for (const field of dataFrame.fields) {\n        field.getLinks = (config: ValueLinkConfig) => {\n          return getFieldLinksForExplore({\n            field,\n            rowIndex: config.valueRowIndex!,\n            splitOpenFn: splitOpen,\n            range,\n            dataFrame: dataFrame!,\n          });\n        };\n      }\n    }\n\n    return (\n      <Collapse label=\"Table\" loading={loading} isOpen>\n        {dataFrame?.length ? (\n          <Table\n            ariaLabel={ariaLabel}\n            data={dataFrame}\n            width={tableWidth}\n            height={height}\n            onCellFilterAdded={onCellFilterAdded}\n          />\n        ) : (\n          <MetaInfoText metaItems={[{ value: '0 series returned' }]} />\n        )}\n      </Collapse>\n    );\n  }\n}\n\nexport default connector(TableContainer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}