{"ast":null,"code":"var _Spinner, _Spinner2, _Icon;\n\nimport { css } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useState, useEffect, useRef } from 'react';\nimport { LogsSortOrder } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Icon, Spinner, useTheme2 } from '@grafana/ui';\nimport { LogsNavigationPages } from './LogsNavigationPages';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction LogsNavigation({\n  absoluteRange,\n  logsSortOrder,\n  timeZone,\n  loading,\n  onChangeTime,\n  scrollToTopLogs,\n  visibleRange,\n  queries,\n  clearCache,\n  addResultsToCache\n}) {\n  const [pages, setPages] = useState([]);\n  const [currentPageIndex, setCurrentPageIndex] = useState(0); // These refs are to determine, if we want to clear up logs navigation when totally new query is run\n\n  const expectedQueriesRef = useRef();\n  const expectedRangeRef = useRef(); // This ref is to store range span for future queres based on firstly selected time range\n  // e.g. if last 5 min selected, always run 5 min range\n\n  const rangeSpanRef = useRef(0);\n  const oldestLogsFirst = logsSortOrder === LogsSortOrder.Ascending;\n  const onFirstPage = oldestLogsFirst ? currentPageIndex === pages.length - 1 : currentPageIndex === 0;\n  const onLastPage = oldestLogsFirst ? currentPageIndex === 0 : currentPageIndex === pages.length - 1;\n  const theme = useTheme2();\n  const styles = getStyles(theme, oldestLogsFirst, loading); // Main effect to set pages and index\n\n  useEffect(() => {\n    const newPage = {\n      logsRange: visibleRange,\n      queryRange: absoluteRange\n    };\n    let newPages = []; // We want to start new pagination if queries change or if absolute range is different than expected\n\n    if (!isEqual(expectedRangeRef.current, absoluteRange) || !isEqual(expectedQueriesRef.current, queries)) {\n      clearCache();\n      setPages([newPage]);\n      setCurrentPageIndex(0);\n      expectedQueriesRef.current = queries;\n      rangeSpanRef.current = absoluteRange.to - absoluteRange.from;\n    } else {\n      setPages(pages => {\n        // Remove duplicates with new query\n        newPages = pages.filter(page => !isEqual(newPage.queryRange, page.queryRange)); // Sort pages based on logsOrder so they visually align with displayed logs\n\n        newPages = [...newPages, newPage].sort((a, b) => sortPages(a, b, logsSortOrder)); // Set new pages\n\n        return newPages;\n      }); // Set current page index\n\n      const index = newPages.findIndex(page => page.queryRange.to === absoluteRange.to);\n      setCurrentPageIndex(index);\n    }\n\n    addResultsToCache();\n  }, [visibleRange, absoluteRange, logsSortOrder, queries, clearCache, addResultsToCache]);\n  useEffect(() => {\n    clearCache(); // We can't enforce the eslint rule here because we only want to run when component is mounted.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const changeTime = ({\n    from,\n    to\n  }) => {\n    expectedRangeRef.current = {\n      from,\n      to\n    };\n    onChangeTime({\n      from,\n      to\n    });\n  };\n\n  const sortPages = (a, b, logsSortOrder) => {\n    if (logsSortOrder === LogsSortOrder.Ascending) {\n      return a.queryRange.to > b.queryRange.to ? 1 : -1;\n    }\n\n    return a.queryRange.to > b.queryRange.to ? -1 : 1;\n  };\n\n  const olderLogsButton = /*#__PURE__*/_jsx(Button, {\n    \"data-testid\": \"olderLogsButton\",\n    className: styles.navButton,\n    variant: \"secondary\",\n    onClick: () => {\n      //If we are not on the last page, use next page's range\n      reportInteraction('grafana_explore_logs_pagination_clicked', {\n        pageType: 'olderLogsButton'\n      });\n\n      if (!onLastPage) {\n        const indexChange = oldestLogsFirst ? -1 : 1;\n        changeTime({\n          from: pages[currentPageIndex + indexChange].queryRange.from,\n          to: pages[currentPageIndex + indexChange].queryRange.to\n        });\n      } else {\n        //If we are on the last page, create new range\n        changeTime({\n          from: visibleRange.from - rangeSpanRef.current,\n          to: visibleRange.from\n        });\n      }\n    },\n    disabled: loading,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.navButtonContent,\n      children: [loading ? _Spinner || (_Spinner = /*#__PURE__*/_jsx(Spinner, {})) : /*#__PURE__*/_jsx(Icon, {\n        name: oldestLogsFirst ? 'angle-up' : 'angle-down',\n        size: \"lg\"\n      }), \"Older logs\"]\n    })\n  });\n\n  const newerLogsButton = /*#__PURE__*/_jsx(Button, {\n    \"data-testid\": \"newerLogsButton\",\n    className: styles.navButton,\n    variant: \"secondary\",\n    onClick: () => {\n      reportInteraction('grafana_explore_logs_pagination_clicked', {\n        pageType: 'newerLogsButton'\n      }); //If we are not on the first page, use previous page's range\n\n      if (!onFirstPage) {\n        const indexChange = oldestLogsFirst ? 1 : -1;\n        changeTime({\n          from: pages[currentPageIndex + indexChange].queryRange.from,\n          to: pages[currentPageIndex + indexChange].queryRange.to\n        });\n      } //If we are on the first page, button is disabled and we do nothing\n\n    },\n    disabled: loading || onFirstPage,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.navButtonContent,\n      children: [loading && (_Spinner2 || (_Spinner2 = /*#__PURE__*/_jsx(Spinner, {}))), onFirstPage || loading ? null : /*#__PURE__*/_jsx(Icon, {\n        name: oldestLogsFirst ? 'angle-down' : 'angle-up',\n        size: \"lg\"\n      }), onFirstPage ? 'Start of range' : 'Newer logs']\n    })\n  });\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.navContainer,\n    children: [oldestLogsFirst ? olderLogsButton : newerLogsButton, /*#__PURE__*/_jsx(LogsNavigationPages, {\n      pages: pages,\n      currentPageIndex: currentPageIndex,\n      oldestLogsFirst: oldestLogsFirst,\n      timeZone: timeZone,\n      loading: loading,\n      changeTime: changeTime\n    }), oldestLogsFirst ? newerLogsButton : olderLogsButton, /*#__PURE__*/_jsx(Button, {\n      \"data-testid\": \"scrollToTop\",\n      className: styles.scrollToTopButton,\n      variant: \"secondary\",\n      onClick: scrollToTopLogs,\n      title: \"Scroll to top\",\n      children: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n        name: \"arrow-up\",\n        size: \"lg\"\n      }))\n    })]\n  });\n}\n\nexport default /*#__PURE__*/memo(LogsNavigation);\n\nconst getStyles = (theme, oldestLogsFirst, loading) => {\n  return {\n    navContainer: css`\n      max-height: 95vh;\n      display: flex;\n      flex-direction: column;\n      justify-content: ${oldestLogsFirst ? 'flex-start' : 'space-between'};\n      position: sticky;\n      top: ${theme.spacing(2)};\n      right: 0;\n    `,\n    navButton: css`\n      width: 58px;\n      height: 68px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      line-height: 1;\n    `,\n    navButtonContent: css`\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      width: 100%;\n      height: 100%;\n      white-space: normal;\n    `,\n    scrollToTopButton: css`\n      width: 40px;\n      height: 40px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      margin-top: ${theme.spacing(1)};\n    `\n  };\n};","map":{"version":3,"names":["css","isEqual","React","memo","useState","useEffect","useRef","LogsSortOrder","reportInteraction","Button","Icon","Spinner","useTheme2","LogsNavigationPages","LogsNavigation","absoluteRange","logsSortOrder","timeZone","loading","onChangeTime","scrollToTopLogs","visibleRange","queries","clearCache","addResultsToCache","pages","setPages","currentPageIndex","setCurrentPageIndex","expectedQueriesRef","expectedRangeRef","rangeSpanRef","oldestLogsFirst","Ascending","onFirstPage","length","onLastPage","theme","styles","getStyles","newPage","logsRange","queryRange","newPages","current","to","from","filter","page","sort","a","b","sortPages","index","findIndex","changeTime","olderLogsButton","navButton","pageType","indexChange","navButtonContent","newerLogsButton","navContainer","scrollToTopButton","spacing"],"sources":["/home/soula/grafana/public/app/features/explore/LogsNavigation.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useState, useEffect, useRef } from 'react';\n\nimport { LogsSortOrder, AbsoluteTimeRange, TimeZone, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Icon, Spinner, useTheme2 } from '@grafana/ui';\n\nimport { LogsNavigationPages } from './LogsNavigationPages';\n\ntype Props = {\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  queries: DataQuery[];\n  loading: boolean;\n  visibleRange: AbsoluteTimeRange;\n  logsSortOrder?: LogsSortOrder | null;\n  onChangeTime: (range: AbsoluteTimeRange) => void;\n  scrollToTopLogs: () => void;\n  addResultsToCache: () => void;\n  clearCache: () => void;\n};\n\nexport type LogsPage = {\n  logsRange: AbsoluteTimeRange;\n  queryRange: AbsoluteTimeRange;\n};\n\nfunction LogsNavigation({\n  absoluteRange,\n  logsSortOrder,\n  timeZone,\n  loading,\n  onChangeTime,\n  scrollToTopLogs,\n  visibleRange,\n  queries,\n  clearCache,\n  addResultsToCache,\n}: Props) {\n  const [pages, setPages] = useState<LogsPage[]>([]);\n  const [currentPageIndex, setCurrentPageIndex] = useState(0);\n\n  // These refs are to determine, if we want to clear up logs navigation when totally new query is run\n  const expectedQueriesRef = useRef<DataQuery[]>();\n  const expectedRangeRef = useRef<AbsoluteTimeRange>();\n  // This ref is to store range span for future queres based on firstly selected time range\n  // e.g. if last 5 min selected, always run 5 min range\n  const rangeSpanRef = useRef(0);\n\n  const oldestLogsFirst = logsSortOrder === LogsSortOrder.Ascending;\n  const onFirstPage = oldestLogsFirst ? currentPageIndex === pages.length - 1 : currentPageIndex === 0;\n  const onLastPage = oldestLogsFirst ? currentPageIndex === 0 : currentPageIndex === pages.length - 1;\n  const theme = useTheme2();\n  const styles = getStyles(theme, oldestLogsFirst, loading);\n\n  // Main effect to set pages and index\n  useEffect(() => {\n    const newPage = { logsRange: visibleRange, queryRange: absoluteRange };\n    let newPages: LogsPage[] = [];\n    // We want to start new pagination if queries change or if absolute range is different than expected\n    if (!isEqual(expectedRangeRef.current, absoluteRange) || !isEqual(expectedQueriesRef.current, queries)) {\n      clearCache();\n      setPages([newPage]);\n      setCurrentPageIndex(0);\n      expectedQueriesRef.current = queries;\n      rangeSpanRef.current = absoluteRange.to - absoluteRange.from;\n    } else {\n      setPages((pages) => {\n        // Remove duplicates with new query\n        newPages = pages.filter((page) => !isEqual(newPage.queryRange, page.queryRange));\n        // Sort pages based on logsOrder so they visually align with displayed logs\n        newPages = [...newPages, newPage].sort((a, b) => sortPages(a, b, logsSortOrder));\n        // Set new pages\n\n        return newPages;\n      });\n\n      // Set current page index\n      const index = newPages.findIndex((page) => page.queryRange.to === absoluteRange.to);\n      setCurrentPageIndex(index);\n    }\n    addResultsToCache();\n  }, [visibleRange, absoluteRange, logsSortOrder, queries, clearCache, addResultsToCache]);\n\n  useEffect(() => {\n    clearCache();\n    // We can't enforce the eslint rule here because we only want to run when component is mounted.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const changeTime = ({ from, to }: AbsoluteTimeRange) => {\n    expectedRangeRef.current = { from, to };\n    onChangeTime({ from, to });\n  };\n\n  const sortPages = (a: LogsPage, b: LogsPage, logsSortOrder?: LogsSortOrder | null) => {\n    if (logsSortOrder === LogsSortOrder.Ascending) {\n      return a.queryRange.to > b.queryRange.to ? 1 : -1;\n    }\n    return a.queryRange.to > b.queryRange.to ? -1 : 1;\n  };\n\n  const olderLogsButton = (\n    <Button\n      data-testid=\"olderLogsButton\"\n      className={styles.navButton}\n      variant=\"secondary\"\n      onClick={() => {\n        //If we are not on the last page, use next page's range\n        reportInteraction('grafana_explore_logs_pagination_clicked', {\n          pageType: 'olderLogsButton',\n        });\n        if (!onLastPage) {\n          const indexChange = oldestLogsFirst ? -1 : 1;\n          changeTime({\n            from: pages[currentPageIndex + indexChange].queryRange.from,\n            to: pages[currentPageIndex + indexChange].queryRange.to,\n          });\n        } else {\n          //If we are on the last page, create new range\n          changeTime({ from: visibleRange.from - rangeSpanRef.current, to: visibleRange.from });\n        }\n      }}\n      disabled={loading}\n    >\n      <div className={styles.navButtonContent}>\n        {loading ? <Spinner /> : <Icon name={oldestLogsFirst ? 'angle-up' : 'angle-down'} size=\"lg\" />}\n        Older logs\n      </div>\n    </Button>\n  );\n\n  const newerLogsButton = (\n    <Button\n      data-testid=\"newerLogsButton\"\n      className={styles.navButton}\n      variant=\"secondary\"\n      onClick={() => {\n        reportInteraction('grafana_explore_logs_pagination_clicked', {\n          pageType: 'newerLogsButton',\n        });\n        //If we are not on the first page, use previous page's range\n        if (!onFirstPage) {\n          const indexChange = oldestLogsFirst ? 1 : -1;\n          changeTime({\n            from: pages[currentPageIndex + indexChange].queryRange.from,\n            to: pages[currentPageIndex + indexChange].queryRange.to,\n          });\n        }\n        //If we are on the first page, button is disabled and we do nothing\n      }}\n      disabled={loading || onFirstPage}\n    >\n      <div className={styles.navButtonContent}>\n        {loading && <Spinner />}\n        {onFirstPage || loading ? null : <Icon name={oldestLogsFirst ? 'angle-down' : 'angle-up'} size=\"lg\" />}\n        {onFirstPage ? 'Start of range' : 'Newer logs'}\n      </div>\n    </Button>\n  );\n\n  return (\n    <div className={styles.navContainer}>\n      {oldestLogsFirst ? olderLogsButton : newerLogsButton}\n      <LogsNavigationPages\n        pages={pages}\n        currentPageIndex={currentPageIndex}\n        oldestLogsFirst={oldestLogsFirst}\n        timeZone={timeZone}\n        loading={loading}\n        changeTime={changeTime}\n      />\n      {oldestLogsFirst ? newerLogsButton : olderLogsButton}\n      <Button\n        data-testid=\"scrollToTop\"\n        className={styles.scrollToTopButton}\n        variant=\"secondary\"\n        onClick={scrollToTopLogs}\n        title=\"Scroll to top\"\n      >\n        <Icon name=\"arrow-up\" size=\"lg\" />\n      </Button>\n    </div>\n  );\n}\n\nexport default memo(LogsNavigation);\n\nconst getStyles = (theme: GrafanaTheme2, oldestLogsFirst: boolean, loading: boolean) => {\n  return {\n    navContainer: css`\n      max-height: 95vh;\n      display: flex;\n      flex-direction: column;\n      justify-content: ${oldestLogsFirst ? 'flex-start' : 'space-between'};\n      position: sticky;\n      top: ${theme.spacing(2)};\n      right: 0;\n    `,\n    navButton: css`\n      width: 58px;\n      height: 68px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      line-height: 1;\n    `,\n    navButtonContent: css`\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      width: 100%;\n      height: 100%;\n      white-space: normal;\n    `,\n    scrollToTopButton: css`\n      width: 40px;\n      height: 40px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      margin-top: ${theme.spacing(1)};\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}