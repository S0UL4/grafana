{"ast":null,"code":"const _excluded = [\"name\", \"size\", \"iconType\", \"tooltip\", \"tooltipPlacement\", \"ariaLabel\", \"className\", \"variant\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { colorManipulator } from '@grafana/data';\nimport { useTheme2 } from '../../themes/ThemeContext';\nimport { getFocusStyles, getMouseFocusStyles } from '../../themes/mixins';\nimport { stylesFactory } from '../../themes/stylesFactory';\nimport { Icon } from '../Icon/Icon';\nimport { getSvgSize } from '../Icon/utils';\nimport { Tooltip } from '../Tooltip';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const IconButton = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    name,\n    size = 'md',\n    iconType,\n    tooltip,\n    tooltipPlacement,\n    ariaLabel,\n    className,\n    variant = 'secondary'\n  } = _ref,\n      restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, size, variant);\n  const tooltipString = typeof tooltip === 'string' ? tooltip : '';\n\n  const button = /*#__PURE__*/_jsx(\"button\", Object.assign({\n    ref: ref,\n    \"aria-label\": ariaLabel || tooltipString\n  }, restProps, {\n    className: cx(styles.button, className),\n    children: /*#__PURE__*/_jsx(Icon, {\n      name: name,\n      size: size,\n      className: styles.icon,\n      type: iconType\n    })\n  }));\n\n  if (tooltip) {\n    return /*#__PURE__*/_jsx(Tooltip, {\n      content: tooltip,\n      placement: tooltipPlacement,\n      children: button\n    });\n  }\n\n  return button;\n});\nIconButton.displayName = 'IconButton';\nconst getStyles = stylesFactory((theme, size, variant) => {\n  const pixelSize = getSvgSize(size);\n  const hoverSize = Math.max(pixelSize / 3, 8);\n  let iconColor = theme.colors.text.primary;\n\n  if (variant === 'primary') {\n    iconColor = theme.colors.primary.text;\n  } else if (variant === 'destructive') {\n    iconColor = theme.colors.error.text;\n  }\n\n  return {\n    button: css`\n      width: ${pixelSize}px;\n      height: ${pixelSize}px;\n      background: transparent;\n      border: none;\n      color: ${iconColor};\n      padding: 0;\n      margin: 0;\n      outline: none;\n      box-shadow: none;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      position: relative;\n      border-radius: ${theme.shape.borderRadius()};\n      z-index: 0;\n      margin-right: ${theme.spacing(0.5)};\n\n      &[disabled],\n      &:disabled {\n        cursor: not-allowed;\n        color: ${theme.colors.action.disabledText};\n        opacity: 0.65;\n        box-shadow: none;\n      }\n\n      &:before {\n        content: '';\n        display: block;\n        opacity: 1;\n        position: absolute;\n        transition-duration: 0.2s;\n        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n        z-index: -1;\n        bottom: -${hoverSize}px;\n        left: -${hoverSize}px;\n        right: -${hoverSize}px;\n        top: -${hoverSize}px;\n        background: none;\n        border-radius: 50%;\n        box-sizing: border-box;\n        transform: scale(0);\n        transition-property: transform, opacity;\n      }\n\n      &:focus,\n      &:focus-visible {\n        ${getFocusStyles(theme)}\n      }\n\n      &:focus:not(:focus-visible) {\n        ${getMouseFocusStyles(theme)}\n      }\n\n      &:hover {\n        color: ${iconColor};\n\n        &:before {\n          background-color: ${variant === 'secondary' ? theme.colors.action.hover : colorManipulator.alpha(iconColor, 0.12)};\n          border: none;\n          box-shadow: none;\n          opacity: 1;\n          transform: scale(0.8);\n        }\n      }\n    `,\n    icon: css`\n      vertical-align: baseline;\n      display: flex;\n    `\n  };\n});","map":{"version":3,"names":["css","cx","React","colorManipulator","useTheme2","getFocusStyles","getMouseFocusStyles","stylesFactory","Icon","getSvgSize","Tooltip","IconButton","forwardRef","ref","name","size","iconType","tooltip","tooltipPlacement","ariaLabel","className","variant","restProps","theme","styles","getStyles","tooltipString","button","icon","displayName","pixelSize","hoverSize","Math","max","iconColor","colors","text","primary","error","shape","borderRadius","spacing","action","disabledText","hover","alpha"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/IconButton/IconButton.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, colorManipulator } from '@grafana/data';\n\nimport { useTheme2 } from '../../themes/ThemeContext';\nimport { getFocusStyles, getMouseFocusStyles } from '../../themes/mixins';\nimport { stylesFactory } from '../../themes/stylesFactory';\nimport { IconName, IconSize, IconType } from '../../types/icon';\nimport { Icon } from '../Icon/Icon';\nimport { getSvgSize } from '../Icon/utils';\nimport { TooltipPlacement, PopoverContent, Tooltip } from '../Tooltip';\n\nexport type IconButtonVariant = 'primary' | 'secondary' | 'destructive';\n\nexport interface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /** Name of the icon **/\n  name: IconName;\n  /** Icon size */\n  size?: IconSize;\n  /** Type od the icon - mono or default */\n  iconType?: IconType;\n  /** Tooltip content to display on hover */\n  tooltip?: PopoverContent;\n  /** Position of the tooltip */\n  tooltipPlacement?: TooltipPlacement;\n  /** Variant to change the color of the Icon */\n  variant?: IconButtonVariant;\n  /** Text avilable ony for screenscreen readers. Will use tooltip text as fallback. */\n  ariaLabel?: string;\n}\n\nexport const IconButton = React.forwardRef<HTMLButtonElement, Props>(\n  (\n    {\n      name,\n      size = 'md',\n      iconType,\n      tooltip,\n      tooltipPlacement,\n      ariaLabel,\n      className,\n      variant = 'secondary',\n      ...restProps\n    },\n    ref\n  ) => {\n    const theme = useTheme2();\n    const styles = getStyles(theme, size, variant);\n    const tooltipString = typeof tooltip === 'string' ? tooltip : '';\n\n    const button = (\n      <button ref={ref} aria-label={ariaLabel || tooltipString} {...restProps} className={cx(styles.button, className)}>\n        <Icon name={name} size={size} className={styles.icon} type={iconType} />\n      </button>\n    );\n\n    if (tooltip) {\n      return (\n        <Tooltip content={tooltip} placement={tooltipPlacement}>\n          {button}\n        </Tooltip>\n      );\n    }\n\n    return button;\n  }\n);\n\nIconButton.displayName = 'IconButton';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2, size: IconSize, variant: IconButtonVariant) => {\n  const pixelSize = getSvgSize(size);\n  const hoverSize = Math.max(pixelSize / 3, 8);\n  let iconColor = theme.colors.text.primary;\n\n  if (variant === 'primary') {\n    iconColor = theme.colors.primary.text;\n  } else if (variant === 'destructive') {\n    iconColor = theme.colors.error.text;\n  }\n\n  return {\n    button: css`\n      width: ${pixelSize}px;\n      height: ${pixelSize}px;\n      background: transparent;\n      border: none;\n      color: ${iconColor};\n      padding: 0;\n      margin: 0;\n      outline: none;\n      box-shadow: none;\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      position: relative;\n      border-radius: ${theme.shape.borderRadius()};\n      z-index: 0;\n      margin-right: ${theme.spacing(0.5)};\n\n      &[disabled],\n      &:disabled {\n        cursor: not-allowed;\n        color: ${theme.colors.action.disabledText};\n        opacity: 0.65;\n        box-shadow: none;\n      }\n\n      &:before {\n        content: '';\n        display: block;\n        opacity: 1;\n        position: absolute;\n        transition-duration: 0.2s;\n        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n        z-index: -1;\n        bottom: -${hoverSize}px;\n        left: -${hoverSize}px;\n        right: -${hoverSize}px;\n        top: -${hoverSize}px;\n        background: none;\n        border-radius: 50%;\n        box-sizing: border-box;\n        transform: scale(0);\n        transition-property: transform, opacity;\n      }\n\n      &:focus,\n      &:focus-visible {\n        ${getFocusStyles(theme)}\n      }\n\n      &:focus:not(:focus-visible) {\n        ${getMouseFocusStyles(theme)}\n      }\n\n      &:hover {\n        color: ${iconColor};\n\n        &:before {\n          background-color: ${variant === 'secondary'\n            ? theme.colors.action.hover\n            : colorManipulator.alpha(iconColor, 0.12)};\n          border: none;\n          box-shadow: none;\n          opacity: 1;\n          transform: scale(0.8);\n        }\n      }\n    `,\n    icon: css`\n      vertical-align: baseline;\n      display: flex;\n    `,\n  };\n});\n"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAAwBC,gBAAxB,QAAgD,eAAhD;AAEA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,cAAT,EAAyBC,mBAAzB,QAAoD,qBAApD;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAEA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAA2CC,OAA3C,QAA0D,YAA1D;;AAqBA,OAAO,MAAMC,UAAU,gBAAGT,KAAK,CAACU,UAAN,CACxB,OAYEC,GAZF,KAaK;EAAA,IAZH;IACEC,IADF;IAEEC,IAAI,GAAG,IAFT;IAGEC,QAHF;IAIEC,OAJF;IAKEC,gBALF;IAMEC,SANF;IAOEC,SAPF;IAQEC,OAAO,GAAG;EARZ,CAYG;EAAA,IAHEC,SAGF;;EACH,MAAMC,KAAK,GAAGnB,SAAS,EAAvB;EACA,MAAMoB,MAAM,GAAGC,SAAS,CAACF,KAAD,EAAQR,IAAR,EAAcM,OAAd,CAAxB;EACA,MAAMK,aAAa,GAAG,OAAOT,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwC,EAA9D;;EAEA,MAAMU,MAAM,gBACV;IAAQ,GAAG,EAAEd,GAAb;IAAkB,cAAYM,SAAS,IAAIO;EAA3C,GAA8DJ,SAA9D;IAAyE,SAAS,EAAErB,EAAE,CAACuB,MAAM,CAACG,MAAR,EAAgBP,SAAhB,CAAtF;IAAA,uBACE,KAAC,IAAD;MAAM,IAAI,EAAEN,IAAZ;MAAkB,IAAI,EAAEC,IAAxB;MAA8B,SAAS,EAAES,MAAM,CAACI,IAAhD;MAAsD,IAAI,EAAEZ;IAA5D;EADF,GADF;;EAMA,IAAIC,OAAJ,EAAa;IACX,oBACE,KAAC,OAAD;MAAS,OAAO,EAAEA,OAAlB;MAA2B,SAAS,EAAEC,gBAAtC;MAAA,UACGS;IADH,EADF;EAKD;;EAED,OAAOA,MAAP;AACD,CAlCuB,CAAnB;AAqCPhB,UAAU,CAACkB,WAAX,GAAyB,YAAzB;AAEA,MAAMJ,SAAS,GAAGlB,aAAa,CAAC,CAACgB,KAAD,EAAuBR,IAAvB,EAAuCM,OAAvC,KAAsE;EACpG,MAAMS,SAAS,GAAGrB,UAAU,CAACM,IAAD,CAA5B;EACA,MAAMgB,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASH,SAAS,GAAG,CAArB,EAAwB,CAAxB,CAAlB;EACA,IAAII,SAAS,GAAGX,KAAK,CAACY,MAAN,CAAaC,IAAb,CAAkBC,OAAlC;;EAEA,IAAIhB,OAAO,KAAK,SAAhB,EAA2B;IACzBa,SAAS,GAAGX,KAAK,CAACY,MAAN,CAAaE,OAAb,CAAqBD,IAAjC;EACD,CAFD,MAEO,IAAIf,OAAO,KAAK,aAAhB,EAA+B;IACpCa,SAAS,GAAGX,KAAK,CAACY,MAAN,CAAaG,KAAb,CAAmBF,IAA/B;EACD;;EAED,OAAO;IACLT,MAAM,EAAE3B,GAAI;AAChB,eAAe8B,SAAU;AACzB,gBAAgBA,SAAU;AAC1B;AACA;AACA,eAAeI,SAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuBX,KAAK,CAACgB,KAAN,CAAYC,YAAZ,EAA2B;AAClD;AACA,sBAAsBjB,KAAK,CAACkB,OAAN,CAAc,GAAd,CAAmB;AACzC;AACA;AACA;AACA;AACA,iBAAiBlB,KAAK,CAACY,MAAN,CAAaO,MAAb,CAAoBC,YAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBZ,SAAU;AAC7B,iBAAiBA,SAAU;AAC3B,kBAAkBA,SAAU;AAC5B,gBAAgBA,SAAU;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU1B,cAAc,CAACkB,KAAD,CAAQ;AAChC;AACA;AACA;AACA,UAAUjB,mBAAmB,CAACiB,KAAD,CAAQ;AACrC;AACA;AACA;AACA,iBAAiBW,SAAU;AAC3B;AACA;AACA,8BAA8Bb,OAAO,KAAK,WAAZ,GAChBE,KAAK,CAACY,MAAN,CAAaO,MAAb,CAAoBE,KADJ,GAEhBzC,gBAAgB,CAAC0C,KAAjB,CAAuBX,SAAvB,EAAkC,IAAlC,CAAwC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,KApES;IAqELN,IAAI,EAAE5B,GAAI;AACd;AACA;AACA;EAxES,CAAP;AA0ED,CArF8B,CAA/B"},"metadata":{},"sourceType":"module"}