{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { map } from 'lodash';\nimport { from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { isGUIDish } from '../components/ResourcePicker/utils';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport { AzureQueryType } from '../types';\nimport { interpolateVariable, routeNames } from '../utils/common';\nimport ResponseParser, { transformMetadataToKustoSchema } from './response_parser';\nexport default class AzureLogAnalyticsDatasource extends DataSourceWithBackend {\n  constructor(instanceSettings) {\n    super(instanceSettings);\n\n    _defineProperty(this, \"resourcePath\", void 0);\n\n    _defineProperty(this, \"azurePortalUrl\", void 0);\n\n    _defineProperty(this, \"defaultSubscriptionId\", void 0);\n\n    _defineProperty(this, \"azureMonitorPath\", void 0);\n\n    _defineProperty(this, \"firstWorkspace\", void 0);\n\n    _defineProperty(this, \"cache\", void 0);\n\n    this.instanceSettings = instanceSettings;\n    this.cache = new Map();\n    this.resourcePath = `${routeNames.logAnalytics}`;\n    this.azureMonitorPath = `${routeNames.azureMonitor}/subscriptions`;\n    const cloud = getAzureCloud(instanceSettings);\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n    this.defaultSubscriptionId = this.instanceSettings.jsonData.subscriptionId || '';\n  }\n\n  isConfigured() {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item) {\n    var _item$azureLogAnalyti;\n\n    return item.hide !== true && !!((_item$azureLogAnalyti = item.azureLogAnalytics) !== null && _item$azureLogAnalyti !== void 0 && _item$azureLogAnalyti.query) && (!!item.azureLogAnalytics.resource || !!item.azureLogAnalytics.workspace);\n  }\n\n  async getSubscriptions() {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    const path = `${this.azureMonitorPath}?api-version=2019-03-01`;\n    return await this.getResource(path).then(result => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  async getWorkspaces(subscription) {\n    const response = await this.getWorkspaceList(subscription);\n    return map(response.value, val => {\n      return {\n        text: val.name,\n        value: val.id\n      };\n    }) || [];\n  }\n\n  getWorkspaceList(subscription) {\n    const subscriptionId = getTemplateSrv().replace(subscription || this.defaultSubscriptionId);\n    const workspaceListUrl = this.azureMonitorPath + `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.getResource(workspaceListUrl);\n  }\n\n  async getMetadata(resourceUri) {\n    const path = `${this.resourcePath}/v1${resourceUri}/metadata`;\n    const resp = await this.getResource(path);\n    return resp;\n  }\n\n  async getKustoSchema(resourceUri) {\n    const templateSrv = getTemplateSrv();\n    const interpolatedUri = templateSrv.replace(resourceUri, {}, interpolateVariable);\n    const metadata = await this.getMetadata(interpolatedUri);\n    return transformMetadataToKustoSchema(metadata, interpolatedUri, templateSrv.getVariables());\n  }\n\n  applyTemplateVariables(target, scopedVars) {\n    const item = target.azureLogAnalytics;\n\n    if (!item) {\n      return target;\n    }\n\n    const templateSrv = getTemplateSrv();\n    const resource = templateSrv.replace(item.resource, scopedVars);\n    let workspace = templateSrv.replace(item.workspace, scopedVars);\n\n    if (!workspace && !resource && this.firstWorkspace) {\n      workspace = this.firstWorkspace;\n    }\n\n    const query = templateSrv.replace(item.query, scopedVars, interpolateVariable);\n    return Object.assign({}, target, {\n      queryType: AzureQueryType.LogAnalytics,\n      azureLogAnalytics: {\n        resultFormat: item.resultFormat,\n        query,\n        resource,\n        // Workspace was removed in Grafana 8, but remains for backwards compat\n        workspace\n      }\n    });\n  }\n  /**\n   * Augment the results with links back to the azure console\n   */\n\n\n  query(request) {\n    return super.query(request).pipe(mergeMap(res => {\n      return from(this.processResponse(res));\n    }));\n  }\n\n  async processResponse(res) {\n    if (res.data) {\n      for (const df of res.data) {\n        var _df$meta, _df$meta$custom;\n\n        const encodedQuery = (_df$meta = df.meta) === null || _df$meta === void 0 ? void 0 : (_df$meta$custom = _df$meta.custom) === null || _df$meta$custom === void 0 ? void 0 : _df$meta$custom.encodedQuery;\n\n        if (encodedQuery && encodedQuery.length > 0) {\n          const url = await this.buildDeepLink(df.meta.custom);\n\n          if (url !== null && url !== void 0 && url.length) {\n            for (const field of df.fields) {\n              field.config.links = [{\n                url: url,\n                title: 'View in Azure Portal',\n                targetBlank: true\n              }];\n            }\n          }\n        }\n      }\n    }\n\n    return res;\n  }\n\n  async buildDeepLink(customMeta) {\n    const base64Enc = encodeURIComponent(customMeta.encodedQuery);\n    const workspaceId = customMeta.workspace;\n    const subscription = customMeta.subscription;\n    const details = await this.getWorkspaceDetails(workspaceId);\n\n    if (!details.workspace || !details.resourceGroup) {\n      return '';\n    }\n\n    const url = `${this.azurePortalUrl}/#blade/Microsoft_OperationsManagementSuite_Workspace/` + `AnalyticsBlade/initiator/AnalyticsShareLinkToQuery/isQueryEditorVisible/true/scope/` + `%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F${subscription}` + `%2Fresourcegroups%2F${details.resourceGroup}%2Fproviders%2Fmicrosoft.operationalinsights%2Fworkspaces%2F${details.workspace}` + `%22%7D%5D%7D/query/${base64Enc}/isQueryBase64Compressed/true/timespanInIsoFormat/P1D`;\n    return url;\n  }\n\n  async getWorkspaceDetails(workspaceId) {\n    if (!this.defaultSubscriptionId) {\n      return {};\n    }\n\n    const response = await this.getWorkspaceList(this.defaultSubscriptionId);\n    const details = response.value.find(o => {\n      return o.properties.customerId === workspaceId;\n    });\n\n    if (!details) {\n      return {};\n    }\n\n    const regex = /.*resourcegroups\\/(.*)\\/providers.*/;\n    const results = regex.exec(details.id);\n\n    if (!results || results.length < 2) {\n      return {};\n    }\n\n    return {\n      workspace: details.name,\n      resourceGroup: results[1]\n    };\n  }\n  /*\n    In 7.5.x it used to be possible to set a default workspace id in the config on the auth page.\n    This has been deprecated, however is still used by a few legacy template queries.\n  */\n\n\n  getDeprecatedDefaultWorkSpace() {\n    return this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace;\n  }\n\n  buildQuery(query, options, workspace) {\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(getTemplateSrv().replace(query, {}, interpolateVariable), options, 'TimeGenerated');\n    const querystring = querystringBuilder.generate().uriString;\n    const path = isGUIDish(workspace) ? `${this.resourcePath}/v1/workspaces/${workspace}/query?${querystring}` : `${this.resourcePath}/v1${workspace}/query?${querystring}`;\n    const queries = [{\n      datasource: this.getRef(),\n      path: path,\n      resultFormat: 'table'\n    }];\n    return queries;\n  }\n\n  async getDefaultOrFirstSubscription() {\n    var _subscriptions$;\n\n    if (this.defaultSubscriptionId) {\n      return this.defaultSubscriptionId;\n    }\n\n    const subscriptions = await this.getSubscriptions();\n    return (_subscriptions$ = subscriptions[0]) === null || _subscriptions$ === void 0 ? void 0 : _subscriptions$.value;\n  }\n\n  async getFirstWorkspace() {\n    var _workspaces$;\n\n    if (this.firstWorkspace) {\n      return this.firstWorkspace;\n    }\n\n    const subscriptionId = await this.getDefaultOrFirstSubscription();\n\n    if (!subscriptionId) {\n      return undefined;\n    }\n\n    const workspaces = await this.getWorkspaces(subscriptionId);\n    const workspace = (_workspaces$ = workspaces[0]) === null || _workspaces$ === void 0 ? void 0 : _workspaces$.value;\n\n    if (workspace) {\n      this.firstWorkspace = workspace;\n    }\n\n    return workspace;\n  }\n\n  annotationQuery(options) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition'\n      });\n    }\n\n    const queries = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\n    const promises = this.doQueries(queries);\n    return Promise.all(promises).then(results => {\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\n      return annotations;\n    });\n  }\n\n  doQueries(queries) {\n    return map(queries, query => {\n      return this.getResource(query.path).then(result => {\n        return {\n          result: result,\n          query: query\n        };\n      }).catch(err => {\n        throw {\n          error: err,\n          query: query\n        };\n      });\n    });\n  }\n\n  validateDatasource() {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.'\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.'\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  isValidConfigField(field) {\n    return typeof field === 'string' && field.length > 0;\n  }\n\n}","map":{"version":3,"names":["map","from","mergeMap","DataSourceWithBackend","getTemplateSrv","isGUIDish","getAuthType","getAzureCloud","getAzurePortalUrl","LogAnalyticsQuerystringBuilder","AzureQueryType","interpolateVariable","routeNames","ResponseParser","transformMetadataToKustoSchema","AzureLogAnalyticsDatasource","constructor","instanceSettings","cache","Map","resourcePath","logAnalytics","azureMonitorPath","azureMonitor","cloud","azurePortalUrl","defaultSubscriptionId","jsonData","subscriptionId","isConfigured","validateDatasource","filterQuery","item","hide","azureLogAnalytics","query","resource","workspace","getSubscriptions","path","getResource","then","result","parseSubscriptions","getWorkspaces","subscription","response","getWorkspaceList","value","val","text","name","id","replace","workspaceListUrl","getMetadata","resourceUri","resp","getKustoSchema","templateSrv","interpolatedUri","metadata","getVariables","applyTemplateVariables","target","scopedVars","firstWorkspace","queryType","LogAnalytics","resultFormat","request","pipe","res","processResponse","data","df","encodedQuery","meta","custom","length","url","buildDeepLink","field","fields","config","links","title","targetBlank","customMeta","base64Enc","encodeURIComponent","workspaceId","details","getWorkspaceDetails","resourceGroup","find","o","properties","customerId","regex","results","exec","getDeprecatedDefaultWorkSpace","logAnalyticsDefaultWorkspace","buildQuery","options","querystringBuilder","querystring","generate","uriString","queries","datasource","getRef","getDefaultOrFirstSubscription","subscriptions","getFirstWorkspace","undefined","workspaces","annotationQuery","annotation","rawQuery","Promise","reject","message","promises","doQueries","all","annotations","transformToAnnotations","catch","err","error","authType","isValidConfigField","tenantId","status","clientId"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_log_analytics/azure_log_analytics_datasource.ts"],"sourcesContent":["import { map } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceRef,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\n\nimport { isGUIDish } from '../components/ResourcePicker/utils';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport LogAnalyticsQuerystringBuilder from '../log_analytics/querystring_builder';\nimport {\n  AzureDataSourceJsonData,\n  AzureLogsVariable,\n  AzureMonitorQuery,\n  AzureQueryType,\n  DatasourceValidationResult,\n} from '../types';\nimport { interpolateVariable, routeNames } from '../utils/common';\n\nimport ResponseParser, { transformMetadataToKustoSchema } from './response_parser';\n\ninterface AdhocQuery {\n  datasource: DataSourceRef;\n  path: string;\n  resultFormat: string;\n}\n\nexport default class AzureLogAnalyticsDatasource extends DataSourceWithBackend<\n  AzureMonitorQuery,\n  AzureDataSourceJsonData\n> {\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare applicationId: string;\n\n  defaultSubscriptionId?: string;\n\n  azureMonitorPath: string;\n  firstWorkspace?: string;\n  cache: Map<string, any>;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n    this.cache = new Map();\n\n    this.resourcePath = `${routeNames.logAnalytics}`;\n    this.azureMonitorPath = `${routeNames.azureMonitor}/subscriptions`;\n    const cloud = getAzureCloud(instanceSettings);\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n\n    this.defaultSubscriptionId = this.instanceSettings.jsonData.subscriptionId || '';\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    return (\n      item.hide !== true &&\n      !!item.azureLogAnalytics?.query &&\n      (!!item.azureLogAnalytics.resource || !!item.azureLogAnalytics.workspace)\n    );\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    const path = `${this.azureMonitorPath}?api-version=2019-03-01`;\n    return await this.getResource(path).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  async getWorkspaces(subscription: string): Promise<AzureLogsVariable[]> {\n    const response = await this.getWorkspaceList(subscription);\n\n    return (\n      map(response.value, (val: any) => {\n        return {\n          text: val.name,\n          value: val.id,\n        };\n      }) || []\n    );\n  }\n\n  private getWorkspaceList(subscription: string): Promise<any> {\n    const subscriptionId = getTemplateSrv().replace(subscription || this.defaultSubscriptionId);\n\n    const workspaceListUrl =\n      this.azureMonitorPath +\n      `/${subscriptionId}/providers/Microsoft.OperationalInsights/workspaces?api-version=2017-04-26-preview`;\n    return this.getResource(workspaceListUrl);\n  }\n\n  async getMetadata(resourceUri: string) {\n    const path = `${this.resourcePath}/v1${resourceUri}/metadata`;\n\n    const resp = await this.getResource(path);\n    return resp;\n  }\n\n  async getKustoSchema(resourceUri: string) {\n    const templateSrv = getTemplateSrv();\n    const interpolatedUri = templateSrv.replace(resourceUri, {}, interpolateVariable);\n    const metadata = await this.getMetadata(interpolatedUri);\n    return transformMetadataToKustoSchema(metadata, interpolatedUri, templateSrv.getVariables());\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureLogAnalytics;\n    if (!item) {\n      return target;\n    }\n\n    const templateSrv = getTemplateSrv();\n    const resource = templateSrv.replace(item.resource, scopedVars);\n    let workspace = templateSrv.replace(item.workspace, scopedVars);\n\n    if (!workspace && !resource && this.firstWorkspace) {\n      workspace = this.firstWorkspace;\n    }\n\n    const query = templateSrv.replace(item.query, scopedVars, interpolateVariable);\n\n    return {\n      ...target,\n      queryType: AzureQueryType.LogAnalytics,\n\n      azureLogAnalytics: {\n        resultFormat: item.resultFormat,\n        query,\n        resource,\n\n        // Workspace was removed in Grafana 8, but remains for backwards compat\n        workspace,\n      },\n    };\n  }\n\n  /**\n   * Augment the results with links back to the azure console\n   */\n  query(request: DataQueryRequest<AzureMonitorQuery>): Observable<DataQueryResponse> {\n    return super.query(request).pipe(\n      mergeMap((res: DataQueryResponse) => {\n        return from(this.processResponse(res));\n      })\n    );\n  }\n\n  async processResponse(res: DataQueryResponse): Promise<DataQueryResponse> {\n    if (res.data) {\n      for (const df of res.data) {\n        const encodedQuery = df.meta?.custom?.encodedQuery;\n        if (encodedQuery && encodedQuery.length > 0) {\n          const url = await this.buildDeepLink(df.meta.custom);\n          if (url?.length) {\n            for (const field of df.fields) {\n              field.config.links = [\n                {\n                  url: url,\n                  title: 'View in Azure Portal',\n                  targetBlank: true,\n                },\n              ];\n            }\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  private async buildDeepLink(customMeta: Record<string, any>) {\n    const base64Enc = encodeURIComponent(customMeta.encodedQuery);\n    const workspaceId = customMeta.workspace;\n    const subscription = customMeta.subscription;\n\n    const details = await this.getWorkspaceDetails(workspaceId);\n    if (!details.workspace || !details.resourceGroup) {\n      return '';\n    }\n\n    const url =\n      `${this.azurePortalUrl}/#blade/Microsoft_OperationsManagementSuite_Workspace/` +\n      `AnalyticsBlade/initiator/AnalyticsShareLinkToQuery/isQueryEditorVisible/true/scope/` +\n      `%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F${subscription}` +\n      `%2Fresourcegroups%2F${details.resourceGroup}%2Fproviders%2Fmicrosoft.operationalinsights%2Fworkspaces%2F${details.workspace}` +\n      `%22%7D%5D%7D/query/${base64Enc}/isQueryBase64Compressed/true/timespanInIsoFormat/P1D`;\n    return url;\n  }\n\n  async getWorkspaceDetails(workspaceId: string) {\n    if (!this.defaultSubscriptionId) {\n      return {};\n    }\n    const response = await this.getWorkspaceList(this.defaultSubscriptionId);\n\n    const details = response.value.find((o: any) => {\n      return o.properties.customerId === workspaceId;\n    });\n\n    if (!details) {\n      return {};\n    }\n\n    const regex = /.*resourcegroups\\/(.*)\\/providers.*/;\n    const results = regex.exec(details.id);\n    if (!results || results.length < 2) {\n      return {};\n    }\n\n    return {\n      workspace: details.name,\n      resourceGroup: results[1],\n    };\n  }\n\n  /*\n    In 7.5.x it used to be possible to set a default workspace id in the config on the auth page.\n    This has been deprecated, however is still used by a few legacy template queries.\n  */\n  getDeprecatedDefaultWorkSpace() {\n    return this.instanceSettings.jsonData.logAnalyticsDefaultWorkspace;\n  }\n\n  private buildQuery(query: string, options: any, workspace: string): AdhocQuery[] {\n    const querystringBuilder = new LogAnalyticsQuerystringBuilder(\n      getTemplateSrv().replace(query, {}, interpolateVariable),\n      options,\n      'TimeGenerated'\n    );\n\n    const querystring = querystringBuilder.generate().uriString;\n    const path = isGUIDish(workspace)\n      ? `${this.resourcePath}/v1/workspaces/${workspace}/query?${querystring}`\n      : `${this.resourcePath}/v1${workspace}/query?${querystring}`;\n\n    const queries = [\n      {\n        datasource: this.getRef(),\n        path: path,\n        resultFormat: 'table',\n      },\n    ];\n\n    return queries;\n  }\n\n  async getDefaultOrFirstSubscription(): Promise<string | undefined> {\n    if (this.defaultSubscriptionId) {\n      return this.defaultSubscriptionId;\n    }\n    const subscriptions = await this.getSubscriptions();\n    return subscriptions[0]?.value;\n  }\n\n  async getFirstWorkspace(): Promise<string | undefined> {\n    if (this.firstWorkspace) {\n      return this.firstWorkspace;\n    }\n\n    const subscriptionId = await this.getDefaultOrFirstSubscription();\n    if (!subscriptionId) {\n      return undefined;\n    }\n\n    const workspaces = await this.getWorkspaces(subscriptionId);\n    const workspace = workspaces[0]?.value;\n\n    if (workspace) {\n      this.firstWorkspace = workspace;\n    }\n\n    return workspace;\n  }\n\n  annotationQuery(options: any) {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const queries = this.buildQuery(options.annotation.rawQuery, options, options.annotation.workspace);\n    const promises = this.doQueries(queries);\n\n    return Promise.all(promises).then((results) => {\n      const annotations = new ResponseParser(results).transformToAnnotations(options);\n      return annotations;\n    });\n  }\n\n  doQueries(queries: AdhocQuery[]) {\n    return map(queries, (query) => {\n      return this.getResource(query.path)\n        .then((result: any) => {\n          return {\n            result: result,\n            query: query,\n          };\n        })\n        .catch((err: any) => {\n          throw {\n            error: err,\n            query: query,\n          };\n        });\n    });\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field: string | undefined): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}