{"ast":null,"code":"// Prometheus API DTOs, possibly to be autogenerated from openapi spec in the near future\nexport let PromAlertingRuleState;\n\n(function (PromAlertingRuleState) {\n  PromAlertingRuleState[\"Firing\"] = \"firing\";\n  PromAlertingRuleState[\"Inactive\"] = \"inactive\";\n  PromAlertingRuleState[\"Pending\"] = \"pending\";\n})(PromAlertingRuleState || (PromAlertingRuleState = {}));\n\nexport let GrafanaAlertState;\n\n(function (GrafanaAlertState) {\n  GrafanaAlertState[\"Normal\"] = \"Normal\";\n  GrafanaAlertState[\"Alerting\"] = \"Alerting\";\n  GrafanaAlertState[\"Pending\"] = \"Pending\";\n  GrafanaAlertState[\"NoData\"] = \"NoData\";\n  GrafanaAlertState[\"Error\"] = \"Error\";\n})(GrafanaAlertState || (GrafanaAlertState = {}));\n\n/** We need this to disambiguate the union PromAlertingRuleState | GrafanaAlertStateWithReason\n */\nexport function isAlertStateWithReason(state) {\n  return state !== null && typeof state !== 'undefined' && !Object.values(PromAlertingRuleState).includes(state);\n}\nexport function mapStateWithReasonToBaseState(state) {\n  if (isAlertStateWithReason(state)) {\n    const fields = state.split(' ');\n    return fields[0];\n  } else {\n    return state;\n  }\n}\nexport let PromRuleType;\n\n(function (PromRuleType) {\n  PromRuleType[\"Alerting\"] = \"alerting\";\n  PromRuleType[\"Recording\"] = \"recording\";\n})(PromRuleType || (PromRuleType = {}));\n\nexport let PromApplication;\n\n(function (PromApplication) {\n  PromApplication[\"Lotex\"] = \"Lotex\";\n  PromApplication[\"Mimir\"] = \"Mimir\";\n  PromApplication[\"Prometheus\"] = \"Prometheus\";\n})(PromApplication || (PromApplication = {}));\n\nexport let GrafanaAlertStateDecision;\n\n(function (GrafanaAlertStateDecision) {\n  GrafanaAlertStateDecision[\"Alerting\"] = \"Alerting\";\n  GrafanaAlertStateDecision[\"NoData\"] = \"NoData\";\n  GrafanaAlertStateDecision[\"KeepLastState\"] = \"KeepLastState\";\n  GrafanaAlertStateDecision[\"OK\"] = \"OK\";\n  GrafanaAlertStateDecision[\"Error\"] = \"Error\";\n})(GrafanaAlertStateDecision || (GrafanaAlertStateDecision = {}));","map":{"version":3,"names":["PromAlertingRuleState","GrafanaAlertState","isAlertStateWithReason","state","Object","values","includes","mapStateWithReasonToBaseState","fields","split","PromRuleType","PromApplication","GrafanaAlertStateDecision"],"sources":["/home/soula/grafana/public/app/types/unified-alerting-dto.ts"],"sourcesContent":["// Prometheus API DTOs, possibly to be autogenerated from openapi spec in the near future\n\nimport { DataQuery, RelativeTimeRange } from '@grafana/data';\n\nexport type Labels = Record<string, string>;\nexport type Annotations = Record<string, string>;\n\nexport enum PromAlertingRuleState {\n  Firing = 'firing',\n  Inactive = 'inactive',\n  Pending = 'pending',\n}\n\nexport enum GrafanaAlertState {\n  Normal = 'Normal',\n  Alerting = 'Alerting',\n  Pending = 'Pending',\n  NoData = 'NoData',\n  Error = 'Error',\n}\n\ntype GrafanaAlertStateReason = ` (${string})` | '';\n\nexport type GrafanaAlertStateWithReason = `${GrafanaAlertState}${GrafanaAlertStateReason}`;\n\n/** We need this to disambiguate the union PromAlertingRuleState | GrafanaAlertStateWithReason\n */\nexport function isAlertStateWithReason(\n  state: PromAlertingRuleState | GrafanaAlertStateWithReason\n): state is GrafanaAlertStateWithReason {\n  return (\n    state !== null &&\n    typeof state !== 'undefined' &&\n    !Object.values(PromAlertingRuleState).includes(state as PromAlertingRuleState)\n  );\n}\n\nexport function mapStateWithReasonToBaseState(\n  state: GrafanaAlertStateWithReason | PromAlertingRuleState\n): GrafanaAlertState | PromAlertingRuleState {\n  if (isAlertStateWithReason(state)) {\n    const fields = state.split(' ');\n    return fields[0] as GrafanaAlertState;\n  } else {\n    return state;\n  }\n}\n\nexport enum PromRuleType {\n  Alerting = 'alerting',\n  Recording = 'recording',\n}\nexport enum PromApplication {\n  Lotex = 'Lotex',\n  Mimir = 'Mimir',\n  Prometheus = 'Prometheus',\n}\n\nexport interface PromBuildInfoResponse {\n  data: {\n    application?: string;\n    version: string;\n    revision: string;\n    features?: {\n      ruler_config_api?: 'true' | 'false';\n      alertmanager_config_api?: 'true' | 'false';\n      query_sharding?: 'true' | 'false';\n      federated_rules?: 'true' | 'false';\n    };\n  };\n  status: 'success';\n}\n\nexport interface PromApiFeatures {\n  application?: PromApplication;\n  features: {\n    rulerApiEnabled: boolean;\n  };\n}\n\ninterface PromRuleDTOBase {\n  health: string;\n  name: string;\n  query: string; // expr\n  evaluationTime?: number;\n  lastEvaluation?: string;\n  lastError?: string;\n}\n\nexport interface PromAlertingRuleDTO extends PromRuleDTOBase {\n  alerts: Array<{\n    labels: Labels;\n    annotations: Annotations;\n    state: Exclude<PromAlertingRuleState | GrafanaAlertStateWithReason, PromAlertingRuleState.Inactive>;\n    activeAt: string;\n    value: string;\n  }>;\n  labels: Labels;\n  annotations?: Annotations;\n  duration?: number; // for\n  state: PromAlertingRuleState;\n  type: PromRuleType.Alerting;\n}\n\nexport interface PromRecordingRuleDTO extends PromRuleDTOBase {\n  health: string;\n  name: string;\n  query: string; // expr\n  type: PromRuleType.Recording;\n  labels?: Labels;\n}\n\nexport type PromRuleDTO = PromAlertingRuleDTO | PromRecordingRuleDTO;\n\nexport interface PromRuleGroupDTO {\n  name: string;\n  file: string;\n  rules: PromRuleDTO[];\n  interval: number;\n\n  evaluationTime?: number; // these 2 are not in older prometheus payloads\n  lastEvaluation?: string;\n}\n\nexport interface PromResponse<T> {\n  status: 'success' | 'error' | ''; // mocks return empty string\n  data: T;\n  errorType?: string;\n  error?: string;\n  warnings?: string[];\n}\n\nexport type PromRulesResponse = PromResponse<{ groups: PromRuleGroupDTO[] }>;\n\n// Ruler rule DTOs\ninterface RulerRuleBaseDTO {\n  expr: string;\n  labels?: Labels;\n}\n\nexport interface RulerRecordingRuleDTO extends RulerRuleBaseDTO {\n  record: string;\n}\n\nexport interface RulerAlertingRuleDTO extends RulerRuleBaseDTO {\n  alert: string;\n  for?: string;\n  annotations?: Annotations;\n}\n\nexport enum GrafanaAlertStateDecision {\n  Alerting = 'Alerting',\n  NoData = 'NoData',\n  KeepLastState = 'KeepLastState',\n  OK = 'OK',\n  Error = 'Error',\n}\n\nexport interface AlertDataQuery extends DataQuery {\n  maxDataPoints?: number;\n  intervalMs?: number;\n}\n\nexport interface AlertQuery {\n  refId: string;\n  queryType: string;\n  relativeTimeRange?: RelativeTimeRange;\n  datasourceUid: string;\n  model: AlertDataQuery;\n}\n\nexport interface PostableGrafanaRuleDefinition {\n  uid?: string;\n  title: string;\n  condition: string;\n  no_data_state: GrafanaAlertStateDecision;\n  exec_err_state: GrafanaAlertStateDecision;\n  data: AlertQuery[];\n}\nexport interface GrafanaRuleDefinition extends PostableGrafanaRuleDefinition {\n  id?: string;\n  uid: string;\n  namespace_uid: string;\n  namespace_id: number;\n  provenance?: string;\n}\n\nexport interface RulerGrafanaRuleDTO {\n  grafana_alert: GrafanaRuleDefinition;\n  for: string;\n  annotations: Annotations;\n  labels: Labels;\n}\n\nexport interface PostableRuleGrafanaRuleDTO {\n  grafana_alert: PostableGrafanaRuleDefinition;\n  for: string;\n  annotations: Annotations;\n  labels: Labels;\n}\n\nexport type RulerRuleDTO = RulerAlertingRuleDTO | RulerRecordingRuleDTO | RulerGrafanaRuleDTO;\n\nexport type PostableRuleDTO = RulerAlertingRuleDTO | RulerRecordingRuleDTO | PostableRuleGrafanaRuleDTO;\n\nexport type RulerRuleGroupDTO<R = RulerRuleDTO> = {\n  name: string;\n  interval?: string;\n  source_tenants?: string[];\n  rules: R[];\n};\n\nexport type PostableRulerRuleGroupDTO = RulerRuleGroupDTO<PostableRuleDTO>;\n\nexport type RulerRulesConfigDTO = { [namespace: string]: RulerRuleGroupDTO[] };\n"],"mappings":"AAAA;AAOA,WAAYA,qBAAZ;;WAAYA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;GAAAA,qB,KAAAA,qB;;AAMZ,WAAYC,iBAAZ;;WAAYA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAYZ;AACA;AACA,OAAO,SAASC,sBAAT,CACLC,KADK,EAEiC;EACtC,OACEA,KAAK,KAAK,IAAV,IACA,OAAOA,KAAP,KAAiB,WADjB,IAEA,CAACC,MAAM,CAACC,MAAP,CAAcL,qBAAd,EAAqCM,QAArC,CAA8CH,KAA9C,CAHH;AAKD;AAED,OAAO,SAASI,6BAAT,CACLJ,KADK,EAEsC;EAC3C,IAAID,sBAAsB,CAACC,KAAD,CAA1B,EAAmC;IACjC,MAAMK,MAAM,GAAGL,KAAK,CAACM,KAAN,CAAY,GAAZ,CAAf;IACA,OAAOD,MAAM,CAAC,CAAD,CAAb;EACD,CAHD,MAGO;IACL,OAAOL,KAAP;EACD;AACF;AAED,WAAYO,YAAZ;;WAAYA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAIZ,WAAYC,eAAZ;;WAAYA,e;EAAAA,e;EAAAA,e;EAAAA,e;GAAAA,e,KAAAA,e;;AAkGZ,WAAYC,yBAAZ;;WAAYA,yB;EAAAA,yB;EAAAA,yB;EAAAA,yB;EAAAA,yB;EAAAA,yB;GAAAA,yB,KAAAA,yB"},"metadata":{},"sourceType":"module"}