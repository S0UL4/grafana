{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/home/soula/grafana/public/app/types/alerting.ts"],"sourcesContent":["import { SelectableValue } from '@grafana/data';\n\nexport interface AlertRuleDTO {\n  id: number;\n  dashboardId: number;\n  dashboardUid: string;\n  dashboardSlug: string;\n  panelId: number;\n  name: string;\n  state: string;\n  newStateDate: string;\n  evalDate: string;\n  evalData?: { noData?: boolean; evalMatches?: any };\n  executionError: string;\n  url: string;\n}\n\nexport interface AlertRule {\n  id: number;\n  dashboardId: number;\n  dashboardUid?: string;\n  dashboardSlug?: string;\n  panelId: number;\n  name: string;\n  state: string;\n  newStateDate?: string;\n  stateText: string;\n  stateIcon: string;\n  stateClass: string;\n  stateAge: string;\n  url: string;\n  info?: string;\n  executionError?: string;\n  evalDate?: string;\n  evalData?: { noData?: boolean; evalMatches?: any };\n}\n\nexport type GrafanaNotifierType =\n  | 'discord'\n  | 'hipchat'\n  | 'email'\n  | 'sensu'\n  | 'sensugo'\n  | 'googlechat'\n  | 'threema'\n  | 'teams'\n  | 'slack'\n  | 'pagerduty'\n  | 'prometheus-alertmanager'\n  | 'telegram'\n  | 'opsgenie'\n  | 'dingding'\n  | 'webhook'\n  | 'victorops'\n  | 'pushover'\n  | 'LINE'\n  | 'kafka';\n\nexport type CloudNotifierType =\n  | 'email'\n  | 'pagerduty'\n  | 'pushover'\n  | 'slack'\n  | 'opsgenie'\n  | 'victorops'\n  | 'webhook'\n  | 'wechat';\n\nexport type NotifierType = GrafanaNotifierType | CloudNotifierType;\nexport interface NotifierDTO {\n  name: string;\n  description: string;\n  type: NotifierType;\n  heading: string;\n  options: NotificationChannelOption[];\n  info?: string;\n  secure?: boolean;\n}\n\nexport interface NotificationChannelType {\n  value: string;\n  label: string;\n  description: string;\n  type: NotifierType;\n  heading: string;\n  options: NotificationChannelOption[];\n  info?: string;\n}\n\nexport interface NotificationChannelDTO {\n  [key: string]: string | boolean | number | SelectableValue<string>;\n  id: number;\n  name: string;\n  type: SelectableValue<string>;\n  sendReminder: boolean;\n  disableResolveMessage: boolean;\n  frequency: string;\n  settings: ChannelTypeSettings;\n  secureSettings: NotificationChannelSecureSettings;\n  secureFields: NotificationChannelSecureFields;\n  isDefault: boolean;\n}\n\nexport type NotificationChannelSecureSettings = Record<string, string | number>;\nexport type NotificationChannelSecureFields = Record<string, boolean>;\n\nexport interface ChannelTypeSettings {\n  [key: string]: any;\n  autoResolve: true;\n  httpMethod: string;\n  severity: string;\n  uploadImage: boolean;\n}\n\nexport interface NotificationChannelOption {\n  element:\n    | 'input'\n    | 'select'\n    | 'checkbox'\n    | 'textarea'\n    | 'subform'\n    | 'subform_array'\n    | 'key_value_map'\n    | 'string_array';\n  inputType: string;\n  label: string;\n  description: string;\n  placeholder: string;\n  propertyName: string;\n  required: boolean;\n  secure: boolean;\n  selectOptions?: Array<SelectableValue<string>> | null;\n  showWhen: { field: string; is: string };\n  validationRule: string;\n  subformOptions?: NotificationChannelOption[];\n  dependsOn: string;\n}\n\nexport interface NotificationChannelState {\n  notificationChannelTypes: NotificationChannelType[];\n  notifiers: NotifierDTO[];\n  notificationChannel: any;\n}\n\nexport interface AlertRulesState {\n  items: AlertRule[];\n  searchQuery: string;\n  isLoading: boolean;\n}\n\nexport interface AlertNotification {\n  isDefault: boolean;\n  name: string;\n  id: number;\n  type: string;\n}\n\nexport interface AnnotationItemDTO {\n  id: number;\n  alertId: number;\n  alertName: string;\n  dashboardId: number;\n  panelId: number;\n  userId: number;\n  newState: string;\n  prevState: string;\n  created: number;\n  updated: number;\n  time: number;\n  timeEnd: number;\n  text: string;\n  tags: string[];\n  login: string;\n  email: string;\n  avatarUrl: string;\n  data: any;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module"}