{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { useStyles2, TextArea, InlineField, Input, FieldSet, InlineSwitch } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst renderInput = (field, onChange, config) => {\n  var _config$field$name;\n\n  switch (field.type) {\n    case 'number':\n      return /*#__PURE__*/_jsx(Input, {\n        type: \"number\",\n        defaultValue: config === null || config === void 0 ? void 0 : config[field.name],\n        onChange: e => {\n          const newValue = e.currentTarget.valueAsNumber;\n          onChange(Object.assign({}, config, {\n            [field.name]: newValue\n          }));\n        }\n      });\n\n    case 'boolean':\n      return /*#__PURE__*/_jsx(InlineSwitch, {\n        value: (_config$field$name = config === null || config === void 0 ? void 0 : config[field.name]) !== null && _config$field$name !== void 0 ? _config$field$name : true,\n        onChange: () => {\n          onChange(Object.assign({}, config, {\n            [field.name]: !config[field.name]\n          }));\n        }\n      });\n\n    default:\n      return /*#__PURE__*/_jsx(Input, {\n        type: \"string\",\n        value: config === null || config === void 0 ? void 0 : config[field.name],\n        onChange: e => {\n          const newValue = e.target.value;\n          onChange(Object.assign({}, config, {\n            [field.name]: newValue\n          }));\n        }\n      });\n  }\n};\n\nconst getStyles = theme => {\n  return {\n    jsonView: css`\n      margin-bottom: ${theme.spacing(1)};\n    `\n  };\n};\n\nexport const SimulationSchemaForm = ({\n  config,\n  schema,\n  onChange\n}) => {\n  const [jsonView, setJsonView] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  const onUpdateTextArea = event => {\n    const element = event.target;\n    onChange(JSON.parse(element.value));\n  };\n\n  return /*#__PURE__*/_jsxs(FieldSet, {\n    label: \"Config\",\n    children: [/*#__PURE__*/_jsx(InlineSwitch, {\n      className: styles.jsonView,\n      label: \"JSON View\",\n      showLabel: true,\n      value: jsonView,\n      onChange: () => setJsonView(!jsonView)\n    }), jsonView ? /*#__PURE__*/_jsx(TextArea, {\n      defaultValue: JSON.stringify(config, null, 2),\n      rows: 7,\n      onChange: onUpdateTextArea\n    }) : /*#__PURE__*/_jsx(_Fragment, {\n      children: schema.fields.map(field => /*#__PURE__*/_jsx(InlineField, {\n        label: field.name,\n        labelWidth: 14,\n        children: renderInput(field, onChange, config)\n      }, field.name))\n    })]\n  });\n};","map":{"version":3,"names":["css","React","useState","useStyles2","TextArea","InlineField","Input","FieldSet","InlineSwitch","renderInput","field","onChange","config","type","name","e","newValue","currentTarget","valueAsNumber","target","value","getStyles","theme","jsonView","spacing","SimulationSchemaForm","schema","setJsonView","styles","onUpdateTextArea","event","element","JSON","parse","stringify","fields","map"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/components/SimulationSchemaForm.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FormEvent, useState, ChangeEvent } from 'react';\n\nimport { DataFrameSchema, FieldSchema, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, TextArea, InlineField, Input, FieldSet, InlineSwitch } from '@grafana/ui';\n\ninterface SchemaFormProps {\n  config: Record<string, any>;\n  schema: DataFrameSchema;\n  onChange: (config: Record<string, any>) => void;\n}\n\nconst renderInput = (field: FieldSchema, onChange: SchemaFormProps['onChange'], config: SchemaFormProps['config']) => {\n  switch (field.type) {\n    case 'number':\n      return (\n        <Input\n          type=\"number\"\n          defaultValue={config?.[field.name]}\n          onChange={(e: FormEvent<HTMLInputElement>) => {\n            const newValue = e.currentTarget.valueAsNumber;\n            onChange({ ...config, [field.name]: newValue });\n          }}\n        />\n      );\n    case 'boolean':\n      return (\n        <InlineSwitch\n          value={config?.[field.name] ?? true}\n          onChange={() => {\n            onChange({ ...config, [field.name]: !config[field.name] });\n          }}\n        />\n      );\n    default:\n      return (\n        <Input\n          type=\"string\"\n          value={config?.[field.name]}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const newValue = e.target.value;\n            onChange({ ...config, [field.name]: newValue });\n          }}\n        />\n      );\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    jsonView: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport const SimulationSchemaForm = ({ config, schema, onChange }: SchemaFormProps) => {\n  const [jsonView, setJsonView] = useState<boolean>(false);\n\n  const styles = useStyles2(getStyles);\n\n  const onUpdateTextArea = (event: FormEvent<HTMLTextAreaElement>) => {\n    const element = event.target as HTMLInputElement;\n    onChange(JSON.parse(element.value));\n  };\n\n  return (\n    <FieldSet label=\"Config\">\n      <InlineSwitch\n        className={styles.jsonView}\n        label=\"JSON View\"\n        showLabel\n        value={jsonView}\n        onChange={() => setJsonView(!jsonView)}\n      />\n      {jsonView ? (\n        <TextArea defaultValue={JSON.stringify(config, null, 2)} rows={7} onChange={onUpdateTextArea} />\n      ) : (\n        <>\n          {schema.fields.map((field) => (\n            <InlineField label={field.name} key={field.name} labelWidth={14}>\n              {renderInput(field, onChange, config)}\n            </InlineField>\n          ))}\n        </>\n      )}\n    </FieldSet>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}