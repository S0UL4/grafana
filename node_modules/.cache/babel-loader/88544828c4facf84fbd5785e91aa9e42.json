{"ast":null,"code":"import { Registry } from '@grafana/data';\nexport const variableAdapters = new Registry();","map":{"version":3,"names":["Registry","variableAdapters"],"sources":["/home/soula/grafana/public/app/features/variables/adapters.ts"],"sourcesContent":["import { ComponentType } from 'react';\nimport { Reducer } from 'redux';\n\nimport { Registry, UrlQueryValue, VariableType } from '@grafana/data';\n\nimport { VariableEditorProps } from './editor/types';\nimport { VariablePickerProps } from './pickers/types';\nimport { VariablesState } from './state/types';\nimport { VariableModel, VariableOption } from './types';\n\nexport interface VariableAdapter<Model extends VariableModel> {\n  id: VariableType;\n  description: string;\n  name: string;\n  initialState: Model;\n  dependsOn: (variable: Model, variableToTest: Model) => boolean;\n  setValue: (variable: Model, option: VariableOption, emitChanges?: boolean) => Promise<void>;\n  setValueFromUrl: (variable: Model, urlValue: UrlQueryValue) => Promise<void>;\n  updateOptions: (variable: Model, searchFilter?: string) => Promise<void>;\n  getSaveModel: (variable: Model, saveCurrentAsDefault?: boolean) => Partial<Model>;\n  getValueForUrl: (variable: Model) => string | string[];\n  picker: ComponentType<VariablePickerProps<Model>>;\n  editor: ComponentType<VariableEditorProps<Model>>;\n  reducer: Reducer<VariablesState>;\n  beforeAdding?: (model: any) => any;\n}\n\nexport const variableAdapters = new Registry<VariableAdapter<any>>();\n"],"mappings":"AAGA,SAASA,QAAT,QAAsD,eAAtD;AAwBA,OAAO,MAAMC,gBAAgB,GAAG,IAAID,QAAJ,EAAzB"},"metadata":{},"sourceType":"module"}