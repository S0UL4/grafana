{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport tinycolor from 'tinycolor2';\nimport { formattedValueToString, FieldType } from '@grafana/data';\nimport { GraphDrawStyle } from '@grafana/schema';\nimport { getTextColorForBackground } from '../../utils';\nimport { calculateFontSize } from '../../utils/measureText';\nimport { Sparkline } from '../Sparkline/Sparkline';\nimport { BigValueColorMode, BigValueJustifyMode, BigValueTextMode } from './BigValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst LINE_HEIGHT = 1.2;\nconst MAX_TITLE_SIZE = 30;\nexport class BigValueLayout {\n  constructor(props) {\n    var _value$color;\n\n    _defineProperty(this, \"titleFontSize\", void 0);\n\n    _defineProperty(this, \"valueFontSize\", void 0);\n\n    _defineProperty(this, \"chartHeight\", void 0);\n\n    _defineProperty(this, \"chartWidth\", void 0);\n\n    _defineProperty(this, \"valueColor\", void 0);\n\n    _defineProperty(this, \"panelPadding\", void 0);\n\n    _defineProperty(this, \"justifyCenter\", void 0);\n\n    _defineProperty(this, \"titleToAlignTo\", void 0);\n\n    _defineProperty(this, \"valueToAlignTo\", void 0);\n\n    _defineProperty(this, \"maxTextWidth\", void 0);\n\n    _defineProperty(this, \"maxTextHeight\", void 0);\n\n    _defineProperty(this, \"textValues\", void 0);\n\n    this.props = props;\n    const {\n      width,\n      height,\n      value,\n      text\n    } = props;\n    this.valueColor = (_value$color = value.color) !== null && _value$color !== void 0 ? _value$color : 'gray';\n    this.panelPadding = height > 100 ? 12 : 8;\n    this.textValues = getTextValues(props);\n    this.justifyCenter = shouldJustifyCenter(props.justifyMode, this.textValues.title);\n    this.valueToAlignTo = this.textValues.valueToAlignTo;\n    this.titleToAlignTo = this.textValues.titleToAlignTo;\n    this.titleFontSize = 0;\n    this.valueFontSize = 0;\n    this.chartHeight = 0;\n    this.chartWidth = 0;\n    this.maxTextWidth = width - this.panelPadding * 2;\n    this.maxTextHeight = height - this.panelPadding * 2; // Explicit font sizing\n\n    if (text) {\n      if (text.titleSize) {\n        this.titleFontSize = text.titleSize;\n        this.titleToAlignTo = undefined;\n      }\n\n      if (text.valueSize) {\n        this.valueFontSize = text.valueSize;\n        this.valueToAlignTo = '';\n      }\n    }\n  }\n\n  getTitleStyles() {\n    const styles = {\n      fontSize: `${this.titleFontSize}px`,\n      lineHeight: LINE_HEIGHT\n    };\n\n    if (this.props.colorMode === BigValueColorMode.Background) {\n      styles.color = getTextColorForBackground(this.valueColor);\n    }\n\n    return styles;\n  }\n\n  getValueStyles() {\n    const styles = {\n      fontSize: this.valueFontSize,\n      fontWeight: 500,\n      lineHeight: LINE_HEIGHT,\n      position: 'relative',\n      zIndex: 1\n    };\n\n    if (this.justifyCenter) {\n      styles.textAlign = 'center';\n    }\n\n    switch (this.props.colorMode) {\n      case BigValueColorMode.Value:\n        styles.color = this.valueColor;\n        break;\n\n      case BigValueColorMode.Background:\n        styles.color = getTextColorForBackground(this.valueColor);\n        break;\n\n      case BigValueColorMode.None:\n        styles.color = this.props.theme.colors.text.primary;\n        break;\n    }\n\n    return styles;\n  }\n\n  getValueAndTitleContainerStyles() {\n    const styles = {\n      display: 'flex'\n    };\n\n    if (this.justifyCenter) {\n      styles.alignItems = 'center';\n      styles.justifyContent = 'center';\n      styles.flexGrow = 1;\n    }\n\n    return styles;\n  }\n\n  getPanelStyles() {\n    const {\n      width,\n      height,\n      theme,\n      colorMode\n    } = this.props;\n    const panelStyles = {\n      width: `${width}px`,\n      height: `${height}px`,\n      padding: `${this.panelPadding}px`,\n      borderRadius: '3px',\n      position: 'relative',\n      display: 'flex'\n    };\n    const themeFactor = theme.isDark ? 1 : -0.7;\n\n    switch (colorMode) {\n      case BigValueColorMode.Background:\n        const bgColor2 = tinycolor(this.valueColor).darken(15 * themeFactor).spin(8).toRgbString();\n        const bgColor3 = tinycolor(this.valueColor).darken(5 * themeFactor).spin(-8).toRgbString();\n        panelStyles.background = `linear-gradient(120deg, ${bgColor2}, ${bgColor3})`;\n        break;\n\n      case BigValueColorMode.Value:\n        panelStyles.background = `transparent`;\n        break;\n    }\n\n    if (this.justifyCenter) {\n      panelStyles.alignItems = 'center';\n      panelStyles.flexDirection = 'row';\n    }\n\n    return panelStyles;\n  }\n\n  renderChart() {\n    var _sparkline$y;\n\n    const {\n      sparkline,\n      colorMode\n    } = this.props;\n\n    if (!sparkline || ((_sparkline$y = sparkline.y) === null || _sparkline$y === void 0 ? void 0 : _sparkline$y.type) !== FieldType.number) {\n      return null;\n    }\n\n    let fillColor;\n    let lineColor;\n\n    switch (colorMode) {\n      case BigValueColorMode.Background:\n        fillColor = 'rgba(255,255,255,0.4)';\n        lineColor = tinycolor(this.valueColor).brighten(40).toRgbString();\n        break;\n\n      case BigValueColorMode.None:\n      case BigValueColorMode.Value:\n      default:\n        lineColor = this.valueColor;\n        fillColor = tinycolor(this.valueColor).setAlpha(0.2).toRgbString();\n        break;\n    } // The graph field configuration applied to Y values\n\n\n    const config = {\n      custom: {\n        drawStyle: GraphDrawStyle.Line,\n        lineWidth: 1,\n        fillColor,\n        lineColor\n      }\n    };\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: this.getChartStyles(),\n      children: /*#__PURE__*/_jsx(Sparkline, {\n        height: this.chartHeight,\n        width: this.chartWidth,\n        sparkline: sparkline,\n        config: config,\n        theme: this.props.theme\n      })\n    });\n  }\n\n  getChartStyles() {\n    return {\n      position: 'absolute',\n      right: 0,\n      bottom: 0\n    };\n  }\n\n}\nexport class WideNoChartLayout extends BigValueLayout {\n  constructor(props) {\n    var _this$titleToAlignTo, _this$titleToAlignTo2;\n\n    super(props);\n    const valueWidthPercent = (_this$titleToAlignTo = this.titleToAlignTo) !== null && _this$titleToAlignTo !== void 0 && _this$titleToAlignTo.length ? 0.3 : 1.0;\n\n    if (this.valueToAlignTo.length) {\n      // initial value size\n      this.valueFontSize = calculateFontSize(this.valueToAlignTo, this.maxTextWidth * valueWidthPercent, this.maxTextHeight, LINE_HEIGHT);\n    }\n\n    if ((_this$titleToAlignTo2 = this.titleToAlignTo) !== null && _this$titleToAlignTo2 !== void 0 && _this$titleToAlignTo2.length) {\n      // How big can we make the title and still have it fit\n      this.titleFontSize = calculateFontSize(this.titleToAlignTo, this.maxTextWidth * 0.6, this.maxTextHeight, LINE_HEIGHT, MAX_TITLE_SIZE); // make sure it's a bit smaller than valueFontSize\n\n      this.titleFontSize = Math.min(this.valueFontSize * 0.7, this.titleFontSize);\n    }\n  }\n\n  getValueAndTitleContainerStyles() {\n    const styles = super.getValueAndTitleContainerStyles();\n    styles.flexDirection = 'row';\n    styles.alignItems = 'center';\n    styles.flexGrow = 1;\n\n    if (!this.justifyCenter) {\n      styles.justifyContent = 'space-between';\n    }\n\n    return styles;\n  }\n\n  renderChart() {\n    return null;\n  }\n\n  getPanelStyles() {\n    const panelStyles = super.getPanelStyles();\n    panelStyles.alignItems = 'center';\n    return panelStyles;\n  }\n\n}\nexport class WideWithChartLayout extends BigValueLayout {\n  constructor(props) {\n    var _this$titleToAlignTo3;\n\n    super(props);\n    const {\n      width,\n      height\n    } = props;\n    const chartHeightPercent = 0.5;\n    const titleWidthPercent = 0.6;\n    const valueWidthPercent = 1 - titleWidthPercent;\n    const textHeightPercent = 0.4;\n    this.chartWidth = width;\n    this.chartHeight = height * chartHeightPercent;\n\n    if ((_this$titleToAlignTo3 = this.titleToAlignTo) !== null && _this$titleToAlignTo3 !== void 0 && _this$titleToAlignTo3.length) {\n      this.titleFontSize = calculateFontSize(this.titleToAlignTo, this.maxTextWidth * titleWidthPercent, this.maxTextHeight * textHeightPercent, LINE_HEIGHT, MAX_TITLE_SIZE);\n    }\n\n    if (this.valueToAlignTo.length) {\n      this.valueFontSize = calculateFontSize(this.valueToAlignTo, this.maxTextWidth * valueWidthPercent, this.maxTextHeight * chartHeightPercent, LINE_HEIGHT);\n    }\n  }\n\n  getValueAndTitleContainerStyles() {\n    const styles = super.getValueAndTitleContainerStyles();\n    styles.flexDirection = 'row';\n    styles.flexGrow = 1;\n\n    if (!this.justifyCenter) {\n      styles.justifyContent = 'space-between';\n    }\n\n    return styles;\n  }\n\n  getPanelStyles() {\n    const styles = super.getPanelStyles();\n    styles.flexDirection = 'row';\n    styles.justifyContent = 'space-between';\n    return styles;\n  }\n\n}\nexport class StackedWithChartLayout extends BigValueLayout {\n  constructor(props) {\n    var _this$titleToAlignTo4, _this$titleToAlignTo5;\n\n    super(props);\n    const {\n      width,\n      height\n    } = props;\n    const titleHeightPercent = 0.15;\n    const chartHeightPercent = 0.25;\n    let titleHeight = 0;\n    this.chartHeight = height * chartHeightPercent;\n    this.chartWidth = width;\n\n    if ((_this$titleToAlignTo4 = this.titleToAlignTo) !== null && _this$titleToAlignTo4 !== void 0 && _this$titleToAlignTo4.length) {\n      this.titleFontSize = calculateFontSize(this.titleToAlignTo, this.maxTextWidth, height * titleHeightPercent, LINE_HEIGHT, MAX_TITLE_SIZE);\n      titleHeight = this.titleFontSize * LINE_HEIGHT;\n    }\n\n    if (this.valueToAlignTo.length) {\n      this.valueFontSize = calculateFontSize(this.valueToAlignTo, this.maxTextWidth, this.maxTextHeight - this.chartHeight - titleHeight, LINE_HEIGHT);\n    } // make title fontsize it's a bit smaller than valueFontSize\n\n\n    if ((_this$titleToAlignTo5 = this.titleToAlignTo) !== null && _this$titleToAlignTo5 !== void 0 && _this$titleToAlignTo5.length) {\n      this.titleFontSize = Math.min(this.valueFontSize * 0.7, this.titleFontSize);\n    } // make chart take up unused space\n\n\n    this.chartHeight = height - this.titleFontSize * LINE_HEIGHT - this.valueFontSize * LINE_HEIGHT;\n  }\n\n  getValueAndTitleContainerStyles() {\n    const styles = super.getValueAndTitleContainerStyles();\n    styles.flexDirection = 'column';\n    styles.justifyContent = 'center';\n    return styles;\n  }\n\n  getPanelStyles() {\n    const styles = super.getPanelStyles();\n    styles.flexDirection = 'column';\n    return styles;\n  }\n\n}\nexport class StackedWithNoChartLayout extends BigValueLayout {\n  constructor(props) {\n    var _this$titleToAlignTo6, _this$titleToAlignTo7;\n\n    super(props);\n    const {\n      height\n    } = props;\n    const titleHeightPercent = 0.15;\n    let titleHeight = 0;\n\n    if ((_this$titleToAlignTo6 = this.titleToAlignTo) !== null && _this$titleToAlignTo6 !== void 0 && _this$titleToAlignTo6.length) {\n      this.titleFontSize = calculateFontSize(this.titleToAlignTo, this.maxTextWidth, height * titleHeightPercent, LINE_HEIGHT, MAX_TITLE_SIZE);\n      titleHeight = this.titleFontSize * LINE_HEIGHT;\n    }\n\n    if (this.valueToAlignTo.length) {\n      this.valueFontSize = calculateFontSize(this.valueToAlignTo, this.maxTextWidth, this.maxTextHeight - titleHeight, LINE_HEIGHT);\n    }\n\n    if ((_this$titleToAlignTo7 = this.titleToAlignTo) !== null && _this$titleToAlignTo7 !== void 0 && _this$titleToAlignTo7.length) {\n      // make title fontsize it's a bit smaller than valueFontSize\n      this.titleFontSize = Math.min(this.valueFontSize * 0.7, this.titleFontSize);\n    }\n  }\n\n  getValueAndTitleContainerStyles() {\n    const styles = super.getValueAndTitleContainerStyles();\n    styles.flexDirection = 'column';\n    styles.flexGrow = 1;\n    return styles;\n  }\n\n  getPanelStyles() {\n    const styles = super.getPanelStyles();\n    styles.alignItems = 'center';\n    return styles;\n  }\n\n}\nexport function buildLayout(props) {\n  const {\n    width,\n    height,\n    sparkline\n  } = props;\n  const useWideLayout = width / height > 2.5;\n\n  if (useWideLayout) {\n    if (height > 50 && !!sparkline && sparkline.y.values.length > 1) {\n      return new WideWithChartLayout(props);\n    } else {\n      return new WideNoChartLayout(props);\n    }\n  } // stacked layouts\n\n\n  if (height > 100 && sparkline && sparkline.y.values.length > 1) {\n    return new StackedWithChartLayout(props);\n  } else {\n    return new StackedWithNoChartLayout(props);\n  }\n}\nexport function shouldJustifyCenter(justifyMode, title) {\n  if (justifyMode === BigValueJustifyMode.Center) {\n    return true;\n  }\n\n  return (title !== null && title !== void 0 ? title : '').length === 0;\n}\n\nfunction getTextValues(props) {\n  const {\n    value,\n    alignmentFactors,\n    count\n  } = props;\n  let {\n    textMode\n  } = props;\n  const titleToAlignTo = alignmentFactors ? alignmentFactors.title : value.title;\n  const valueToAlignTo = formattedValueToString(alignmentFactors ? alignmentFactors : value); // In the auto case we only show title if this big value is part of more panes (count > 1)\n\n  if (textMode === BigValueTextMode.Auto && (count !== null && count !== void 0 ? count : 1) === 1) {\n    textMode = BigValueTextMode.Value;\n  }\n\n  switch (textMode) {\n    case BigValueTextMode.Name:\n      return Object.assign({}, value, {\n        title: undefined,\n        prefix: undefined,\n        suffix: undefined,\n        text: value.title || '',\n        titleToAlignTo: undefined,\n        valueToAlignTo: titleToAlignTo !== null && titleToAlignTo !== void 0 ? titleToAlignTo : '',\n        tooltip: formattedValueToString(value)\n      });\n\n    case BigValueTextMode.Value:\n      return Object.assign({}, value, {\n        title: undefined,\n        titleToAlignTo: undefined,\n        valueToAlignTo,\n        tooltip: value.title\n      });\n\n    case BigValueTextMode.None:\n      return {\n        numeric: value.numeric,\n        color: value.color,\n        title: undefined,\n        text: '',\n        titleToAlignTo: undefined,\n        valueToAlignTo: '1',\n        tooltip: `Name: ${value.title}\\nValue: ${formattedValueToString(value)}`\n      };\n\n    case BigValueTextMode.ValueAndName:\n    default:\n      return Object.assign({}, value, {\n        titleToAlignTo,\n        valueToAlignTo\n      });\n  }\n}","map":{"version":3,"names":["React","tinycolor","formattedValueToString","FieldType","GraphDrawStyle","getTextColorForBackground","calculateFontSize","Sparkline","BigValueColorMode","BigValueJustifyMode","BigValueTextMode","LINE_HEIGHT","MAX_TITLE_SIZE","BigValueLayout","constructor","props","width","height","value","text","valueColor","color","panelPadding","textValues","getTextValues","justifyCenter","shouldJustifyCenter","justifyMode","title","valueToAlignTo","titleToAlignTo","titleFontSize","valueFontSize","chartHeight","chartWidth","maxTextWidth","maxTextHeight","titleSize","undefined","valueSize","getTitleStyles","styles","fontSize","lineHeight","colorMode","Background","getValueStyles","fontWeight","position","zIndex","textAlign","Value","None","theme","colors","primary","getValueAndTitleContainerStyles","display","alignItems","justifyContent","flexGrow","getPanelStyles","panelStyles","padding","borderRadius","themeFactor","isDark","bgColor2","darken","spin","toRgbString","bgColor3","background","flexDirection","renderChart","sparkline","y","type","number","fillColor","lineColor","brighten","setAlpha","config","custom","drawStyle","Line","lineWidth","getChartStyles","right","bottom","WideNoChartLayout","valueWidthPercent","length","Math","min","WideWithChartLayout","chartHeightPercent","titleWidthPercent","textHeightPercent","StackedWithChartLayout","titleHeightPercent","titleHeight","StackedWithNoChartLayout","buildLayout","useWideLayout","values","Center","alignmentFactors","count","textMode","Auto","Name","prefix","suffix","tooltip","numeric","ValueAndName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/BigValue/BigValueLayout.tsx"],"sourcesContent":["import React, { CSSProperties } from 'react';\nimport tinycolor from 'tinycolor2';\n\nimport { formattedValueToString, DisplayValue, FieldConfig, FieldType } from '@grafana/data';\nimport { GraphDrawStyle, GraphFieldConfig } from '@grafana/schema';\n\nimport { getTextColorForBackground } from '../../utils';\nimport { calculateFontSize } from '../../utils/measureText';\nimport { Sparkline } from '../Sparkline/Sparkline';\n\nimport { BigValueColorMode, Props, BigValueJustifyMode, BigValueTextMode } from './BigValue';\n\nconst LINE_HEIGHT = 1.2;\nconst MAX_TITLE_SIZE = 30;\n\nexport abstract class BigValueLayout {\n  titleFontSize: number;\n  valueFontSize: number;\n  chartHeight: number;\n  chartWidth: number;\n  valueColor: string;\n  panelPadding: number;\n  justifyCenter: boolean;\n  titleToAlignTo?: string;\n  valueToAlignTo: string;\n  maxTextWidth: number;\n  maxTextHeight: number;\n  textValues: BigValueTextValues;\n\n  constructor(private props: Props) {\n    const { width, height, value, text } = props;\n\n    this.valueColor = value.color ?? 'gray';\n    this.panelPadding = height > 100 ? 12 : 8;\n    this.textValues = getTextValues(props);\n    this.justifyCenter = shouldJustifyCenter(props.justifyMode, this.textValues.title);\n    this.valueToAlignTo = this.textValues.valueToAlignTo;\n    this.titleToAlignTo = this.textValues.titleToAlignTo;\n    this.titleFontSize = 0;\n    this.valueFontSize = 0;\n    this.chartHeight = 0;\n    this.chartWidth = 0;\n    this.maxTextWidth = width - this.panelPadding * 2;\n    this.maxTextHeight = height - this.panelPadding * 2;\n\n    // Explicit font sizing\n    if (text) {\n      if (text.titleSize) {\n        this.titleFontSize = text.titleSize;\n        this.titleToAlignTo = undefined;\n      }\n      if (text.valueSize) {\n        this.valueFontSize = text.valueSize;\n        this.valueToAlignTo = '';\n      }\n    }\n  }\n\n  getTitleStyles(): CSSProperties {\n    const styles: CSSProperties = {\n      fontSize: `${this.titleFontSize}px`,\n      lineHeight: LINE_HEIGHT,\n    };\n\n    if (this.props.colorMode === BigValueColorMode.Background) {\n      styles.color = getTextColorForBackground(this.valueColor);\n    }\n\n    return styles;\n  }\n\n  getValueStyles(): CSSProperties {\n    const styles: CSSProperties = {\n      fontSize: this.valueFontSize,\n      fontWeight: 500,\n      lineHeight: LINE_HEIGHT,\n      position: 'relative',\n      zIndex: 1,\n    };\n\n    if (this.justifyCenter) {\n      styles.textAlign = 'center';\n    }\n\n    switch (this.props.colorMode) {\n      case BigValueColorMode.Value:\n        styles.color = this.valueColor;\n        break;\n      case BigValueColorMode.Background:\n        styles.color = getTextColorForBackground(this.valueColor);\n        break;\n      case BigValueColorMode.None:\n        styles.color = this.props.theme.colors.text.primary;\n        break;\n    }\n\n    return styles;\n  }\n\n  getValueAndTitleContainerStyles() {\n    const styles: CSSProperties = {\n      display: 'flex',\n    };\n\n    if (this.justifyCenter) {\n      styles.alignItems = 'center';\n      styles.justifyContent = 'center';\n      styles.flexGrow = 1;\n    }\n\n    return styles;\n  }\n\n  getPanelStyles(): CSSProperties {\n    const { width, height, theme, colorMode } = this.props;\n\n    const panelStyles: CSSProperties = {\n      width: `${width}px`,\n      height: `${height}px`,\n      padding: `${this.panelPadding}px`,\n      borderRadius: '3px',\n      position: 'relative',\n      display: 'flex',\n    };\n\n    const themeFactor = theme.isDark ? 1 : -0.7;\n\n    switch (colorMode) {\n      case BigValueColorMode.Background:\n        const bgColor2 = tinycolor(this.valueColor)\n          .darken(15 * themeFactor)\n          .spin(8)\n          .toRgbString();\n        const bgColor3 = tinycolor(this.valueColor)\n          .darken(5 * themeFactor)\n          .spin(-8)\n          .toRgbString();\n        panelStyles.background = `linear-gradient(120deg, ${bgColor2}, ${bgColor3})`;\n        break;\n      case BigValueColorMode.Value:\n        panelStyles.background = `transparent`;\n        break;\n    }\n\n    if (this.justifyCenter) {\n      panelStyles.alignItems = 'center';\n      panelStyles.flexDirection = 'row';\n    }\n\n    return panelStyles;\n  }\n\n  renderChart(): JSX.Element | null {\n    const { sparkline, colorMode } = this.props;\n\n    if (!sparkline || sparkline.y?.type !== FieldType.number) {\n      return null;\n    }\n\n    let fillColor: string;\n    let lineColor: string;\n\n    switch (colorMode) {\n      case BigValueColorMode.Background:\n        fillColor = 'rgba(255,255,255,0.4)';\n        lineColor = tinycolor(this.valueColor).brighten(40).toRgbString();\n        break;\n      case BigValueColorMode.None:\n      case BigValueColorMode.Value:\n      default:\n        lineColor = this.valueColor;\n        fillColor = tinycolor(this.valueColor).setAlpha(0.2).toRgbString();\n        break;\n    }\n\n    // The graph field configuration applied to Y values\n    const config: FieldConfig<GraphFieldConfig> = {\n      custom: {\n        drawStyle: GraphDrawStyle.Line,\n        lineWidth: 1,\n        fillColor,\n        lineColor,\n      },\n    };\n\n    return (\n      <div style={this.getChartStyles()}>\n        <Sparkline\n          height={this.chartHeight}\n          width={this.chartWidth}\n          sparkline={sparkline}\n          config={config}\n          theme={this.props.theme}\n        />\n      </div>\n    );\n  }\n  getChartStyles(): CSSProperties {\n    return {\n      position: 'absolute',\n      right: 0,\n      bottom: 0,\n    };\n  }\n}\n\nexport class WideNoChartLayout extends BigValueLayout {\n  constructor(props: Props) {\n    super(props);\n\n    const valueWidthPercent = this.titleToAlignTo?.length ? 0.3 : 1.0;\n\n    if (this.valueToAlignTo.length) {\n      // initial value size\n      this.valueFontSize = calculateFontSize(\n        this.valueToAlignTo,\n        this.maxTextWidth * valueWidthPercent,\n        this.maxTextHeight,\n        LINE_HEIGHT\n      );\n    }\n\n    if (this.titleToAlignTo?.length) {\n      // How big can we make the title and still have it fit\n      this.titleFontSize = calculateFontSize(\n        this.titleToAlignTo,\n        this.maxTextWidth * 0.6,\n        this.maxTextHeight,\n        LINE_HEIGHT,\n        MAX_TITLE_SIZE\n      );\n\n      // make sure it's a bit smaller than valueFontSize\n      this.titleFontSize = Math.min(this.valueFontSize * 0.7, this.titleFontSize);\n    }\n  }\n\n  getValueAndTitleContainerStyles() {\n    const styles = super.getValueAndTitleContainerStyles();\n    styles.flexDirection = 'row';\n    styles.alignItems = 'center';\n    styles.flexGrow = 1;\n\n    if (!this.justifyCenter) {\n      styles.justifyContent = 'space-between';\n    }\n\n    return styles;\n  }\n\n  renderChart(): JSX.Element | null {\n    return null;\n  }\n\n  getPanelStyles() {\n    const panelStyles = super.getPanelStyles();\n    panelStyles.alignItems = 'center';\n    return panelStyles;\n  }\n}\n\nexport class WideWithChartLayout extends BigValueLayout {\n  constructor(props: Props) {\n    super(props);\n\n    const { width, height } = props;\n\n    const chartHeightPercent = 0.5;\n    const titleWidthPercent = 0.6;\n    const valueWidthPercent = 1 - titleWidthPercent;\n    const textHeightPercent = 0.4;\n\n    this.chartWidth = width;\n    this.chartHeight = height * chartHeightPercent;\n\n    if (this.titleToAlignTo?.length) {\n      this.titleFontSize = calculateFontSize(\n        this.titleToAlignTo,\n        this.maxTextWidth * titleWidthPercent,\n        this.maxTextHeight * textHeightPercent,\n        LINE_HEIGHT,\n        MAX_TITLE_SIZE\n      );\n    }\n\n    if (this.valueToAlignTo.length) {\n      this.valueFontSize = calculateFontSize(\n        this.valueToAlignTo,\n        this.maxTextWidth * valueWidthPercent,\n        this.maxTextHeight * chartHeightPercent,\n        LINE_HEIGHT\n      );\n    }\n  }\n\n  getValueAndTitleContainerStyles() {\n    const styles = super.getValueAndTitleContainerStyles();\n    styles.flexDirection = 'row';\n    styles.flexGrow = 1;\n\n    if (!this.justifyCenter) {\n      styles.justifyContent = 'space-between';\n    }\n\n    return styles;\n  }\n\n  getPanelStyles() {\n    const styles = super.getPanelStyles();\n    styles.flexDirection = 'row';\n    styles.justifyContent = 'space-between';\n    return styles;\n  }\n}\n\nexport class StackedWithChartLayout extends BigValueLayout {\n  constructor(props: Props) {\n    super(props);\n\n    const { width, height } = props;\n    const titleHeightPercent = 0.15;\n    const chartHeightPercent = 0.25;\n    let titleHeight = 0;\n\n    this.chartHeight = height * chartHeightPercent;\n    this.chartWidth = width;\n\n    if (this.titleToAlignTo?.length) {\n      this.titleFontSize = calculateFontSize(\n        this.titleToAlignTo,\n        this.maxTextWidth,\n        height * titleHeightPercent,\n        LINE_HEIGHT,\n        MAX_TITLE_SIZE\n      );\n\n      titleHeight = this.titleFontSize * LINE_HEIGHT;\n    }\n\n    if (this.valueToAlignTo.length) {\n      this.valueFontSize = calculateFontSize(\n        this.valueToAlignTo,\n        this.maxTextWidth,\n        this.maxTextHeight - this.chartHeight - titleHeight,\n        LINE_HEIGHT\n      );\n    }\n\n    // make title fontsize it's a bit smaller than valueFontSize\n    if (this.titleToAlignTo?.length) {\n      this.titleFontSize = Math.min(this.valueFontSize * 0.7, this.titleFontSize);\n    }\n\n    // make chart take up unused space\n    this.chartHeight = height - this.titleFontSize * LINE_HEIGHT - this.valueFontSize * LINE_HEIGHT;\n  }\n\n  getValueAndTitleContainerStyles() {\n    const styles = super.getValueAndTitleContainerStyles();\n    styles.flexDirection = 'column';\n    styles.justifyContent = 'center';\n    return styles;\n  }\n\n  getPanelStyles() {\n    const styles = super.getPanelStyles();\n    styles.flexDirection = 'column';\n    return styles;\n  }\n}\n\nexport class StackedWithNoChartLayout extends BigValueLayout {\n  constructor(props: Props) {\n    super(props);\n\n    const { height } = props;\n    const titleHeightPercent = 0.15;\n    let titleHeight = 0;\n\n    if (this.titleToAlignTo?.length) {\n      this.titleFontSize = calculateFontSize(\n        this.titleToAlignTo,\n        this.maxTextWidth,\n        height * titleHeightPercent,\n        LINE_HEIGHT,\n        MAX_TITLE_SIZE\n      );\n\n      titleHeight = this.titleFontSize * LINE_HEIGHT;\n    }\n\n    if (this.valueToAlignTo.length) {\n      this.valueFontSize = calculateFontSize(\n        this.valueToAlignTo,\n        this.maxTextWidth,\n        this.maxTextHeight - titleHeight,\n        LINE_HEIGHT\n      );\n    }\n\n    if (this.titleToAlignTo?.length) {\n      // make title fontsize it's a bit smaller than valueFontSize\n      this.titleFontSize = Math.min(this.valueFontSize * 0.7, this.titleFontSize);\n    }\n  }\n\n  getValueAndTitleContainerStyles() {\n    const styles = super.getValueAndTitleContainerStyles();\n    styles.flexDirection = 'column';\n    styles.flexGrow = 1;\n    return styles;\n  }\n\n  getPanelStyles() {\n    const styles = super.getPanelStyles();\n    styles.alignItems = 'center';\n    return styles;\n  }\n}\n\nexport function buildLayout(props: Props): BigValueLayout {\n  const { width, height, sparkline } = props;\n  const useWideLayout = width / height > 2.5;\n\n  if (useWideLayout) {\n    if (height > 50 && !!sparkline && sparkline.y.values.length > 1) {\n      return new WideWithChartLayout(props);\n    } else {\n      return new WideNoChartLayout(props);\n    }\n  }\n\n  // stacked layouts\n  if (height > 100 && sparkline && sparkline.y.values.length > 1) {\n    return new StackedWithChartLayout(props);\n  } else {\n    return new StackedWithNoChartLayout(props);\n  }\n}\n\nexport function shouldJustifyCenter(justifyMode?: BigValueJustifyMode, title?: string) {\n  if (justifyMode === BigValueJustifyMode.Center) {\n    return true;\n  }\n\n  return (title ?? '').length === 0;\n}\n\nexport interface BigValueTextValues extends DisplayValue {\n  valueToAlignTo: string;\n  titleToAlignTo?: string;\n  tooltip?: string;\n}\n\nfunction getTextValues(props: Props): BigValueTextValues {\n  const { value, alignmentFactors, count } = props;\n  let { textMode } = props;\n\n  const titleToAlignTo = alignmentFactors ? alignmentFactors.title : value.title;\n  const valueToAlignTo = formattedValueToString(alignmentFactors ? alignmentFactors : value);\n\n  // In the auto case we only show title if this big value is part of more panes (count > 1)\n  if (textMode === BigValueTextMode.Auto && (count ?? 1) === 1) {\n    textMode = BigValueTextMode.Value;\n  }\n\n  switch (textMode) {\n    case BigValueTextMode.Name:\n      return {\n        ...value,\n        title: undefined,\n        prefix: undefined,\n        suffix: undefined,\n        text: value.title || '',\n        titleToAlignTo: undefined,\n        valueToAlignTo: titleToAlignTo ?? '',\n        tooltip: formattedValueToString(value),\n      };\n    case BigValueTextMode.Value:\n      return {\n        ...value,\n        title: undefined,\n        titleToAlignTo: undefined,\n        valueToAlignTo,\n        tooltip: value.title,\n      };\n    case BigValueTextMode.None:\n      return {\n        numeric: value.numeric,\n        color: value.color,\n        title: undefined,\n        text: '',\n        titleToAlignTo: undefined,\n        valueToAlignTo: '1',\n        tooltip: `Name: ${value.title}\\nValue: ${formattedValueToString(value)}`,\n      };\n    case BigValueTextMode.ValueAndName:\n    default:\n      return {\n        ...value,\n        titleToAlignTo,\n        valueToAlignTo,\n      };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}