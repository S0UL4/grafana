{"ast":null,"code":"import { getDisplayProcessor, getFieldColorModeForField } from '@grafana/data';\nimport { findField, getLastNotNullFieldValue } from './utils'; //---------------------------------------------------------\n// Color dimension\n//---------------------------------------------------------\n\nexport function getColorDimension(frame, config, theme) {\n  return getColorDimensionForField(findField(frame, config.field), config, theme);\n}\nexport function getColorDimensionForField(field, config, theme) {\n  var _field$config$mapping;\n\n  if (!field) {\n    var _config$fixed, _config$field;\n\n    const v = theme.visualization.getColorByName((_config$fixed = config.fixed) !== null && _config$fixed !== void 0 ? _config$fixed : 'grey');\n    return {\n      isAssumed: Boolean((_config$field = config.field) === null || _config$field === void 0 ? void 0 : _config$field.length) || !config.fixed,\n      fixed: v,\n      value: () => v,\n      get: i => v\n    };\n  } // Use the expensive color calculation by value\n\n\n  const mode = getFieldColorModeForField(field);\n\n  if (mode.isByValue || (_field$config$mapping = field.config.mappings) !== null && _field$config$mapping !== void 0 && _field$config$mapping.length) {\n    const disp = getDisplayProcessor({\n      field,\n      theme\n    });\n\n    const getColor = value => {\n      var _disp$color;\n\n      return (_disp$color = disp(value).color) !== null && _disp$color !== void 0 ? _disp$color : '#ccc';\n    };\n\n    return {\n      field,\n      get: index => getColor(field.values.get(index)),\n      value: () => getColor(getLastNotNullFieldValue(field))\n    };\n  } // Typically series or fixed color (does not depend on value)\n\n\n  const fixed = mode.getCalculator(field, theme)(0, 0);\n  return {\n    fixed,\n    value: () => fixed,\n    get: i => fixed,\n    field\n  };\n}","map":{"version":3,"names":["getDisplayProcessor","getFieldColorModeForField","findField","getLastNotNullFieldValue","getColorDimension","frame","config","theme","getColorDimensionForField","field","v","visualization","getColorByName","fixed","isAssumed","Boolean","length","value","get","i","mode","isByValue","mappings","disp","getColor","color","index","values","getCalculator"],"sources":["/home/soula/grafana/public/app/features/dimensions/color.ts"],"sourcesContent":["import { DataFrame, Field, getDisplayProcessor, getFieldColorModeForField, GrafanaTheme2 } from '@grafana/data';\n\nimport { ColorDimensionConfig, DimensionSupplier } from './types';\nimport { findField, getLastNotNullFieldValue } from './utils';\n\n//---------------------------------------------------------\n// Color dimension\n//---------------------------------------------------------\n\nexport function getColorDimension(\n  frame: DataFrame | undefined,\n  config: ColorDimensionConfig,\n  theme: GrafanaTheme2\n): DimensionSupplier<string> {\n  return getColorDimensionForField(findField(frame, config.field), config, theme);\n}\n\nexport function getColorDimensionForField(\n  field: Field | undefined,\n  config: ColorDimensionConfig,\n  theme: GrafanaTheme2\n): DimensionSupplier<string> {\n  if (!field) {\n    const v = theme.visualization.getColorByName(config.fixed ?? 'grey');\n    return {\n      isAssumed: Boolean(config.field?.length) || !config.fixed,\n      fixed: v,\n      value: () => v,\n      get: (i) => v,\n    };\n  }\n\n  // Use the expensive color calculation by value\n  const mode = getFieldColorModeForField(field);\n  if (mode.isByValue || field.config.mappings?.length) {\n    const disp = getDisplayProcessor({ field, theme });\n    const getColor = (value: any): string => {\n      return disp(value).color ?? '#ccc';\n    };\n\n    return {\n      field,\n      get: (index: number): string => getColor(field.values.get(index)),\n      value: () => getColor(getLastNotNullFieldValue(field)),\n    };\n  }\n\n  // Typically series or fixed color (does not depend on value)\n  const fixed = mode.getCalculator(field, theme)(0, 0);\n  return {\n    fixed,\n    value: () => fixed,\n    get: (i) => fixed,\n    field,\n  };\n}\n"],"mappings":"AAAA,SAA2BA,mBAA3B,EAAgDC,yBAAhD,QAAgG,eAAhG;AAGA,SAASC,SAAT,EAAoBC,wBAApB,QAAoD,SAApD,C,CAEA;AACA;AACA;;AAEA,OAAO,SAASC,iBAAT,CACLC,KADK,EAELC,MAFK,EAGLC,KAHK,EAIsB;EAC3B,OAAOC,yBAAyB,CAACN,SAAS,CAACG,KAAD,EAAQC,MAAM,CAACG,KAAf,CAAV,EAAiCH,MAAjC,EAAyCC,KAAzC,CAAhC;AACD;AAED,OAAO,SAASC,yBAAT,CACLC,KADK,EAELH,MAFK,EAGLC,KAHK,EAIsB;EAAA;;EAC3B,IAAI,CAACE,KAAL,EAAY;IAAA;;IACV,MAAMC,CAAC,GAAGH,KAAK,CAACI,aAAN,CAAoBC,cAApB,kBAAmCN,MAAM,CAACO,KAA1C,yDAAmD,MAAnD,CAAV;IACA,OAAO;MACLC,SAAS,EAAEC,OAAO,kBAACT,MAAM,CAACG,KAAR,kDAAC,cAAcO,MAAf,CAAP,IAAiC,CAACV,MAAM,CAACO,KAD/C;MAELA,KAAK,EAAEH,CAFF;MAGLO,KAAK,EAAE,MAAMP,CAHR;MAILQ,GAAG,EAAGC,CAAD,IAAOT;IAJP,CAAP;EAMD,CAT0B,CAW3B;;;EACA,MAAMU,IAAI,GAAGnB,yBAAyB,CAACQ,KAAD,CAAtC;;EACA,IAAIW,IAAI,CAACC,SAAL,6BAAkBZ,KAAK,CAACH,MAAN,CAAagB,QAA/B,kDAAkB,sBAAuBN,MAA7C,EAAqD;IACnD,MAAMO,IAAI,GAAGvB,mBAAmB,CAAC;MAAES,KAAF;MAASF;IAAT,CAAD,CAAhC;;IACA,MAAMiB,QAAQ,GAAIP,KAAD,IAAwB;MAAA;;MACvC,sBAAOM,IAAI,CAACN,KAAD,CAAJ,CAAYQ,KAAnB,qDAA4B,MAA5B;IACD,CAFD;;IAIA,OAAO;MACLhB,KADK;MAELS,GAAG,EAAGQ,KAAD,IAA2BF,QAAQ,CAACf,KAAK,CAACkB,MAAN,CAAaT,GAAb,CAAiBQ,KAAjB,CAAD,CAFnC;MAGLT,KAAK,EAAE,MAAMO,QAAQ,CAACrB,wBAAwB,CAACM,KAAD,CAAzB;IAHhB,CAAP;EAKD,CAxB0B,CA0B3B;;;EACA,MAAMI,KAAK,GAAGO,IAAI,CAACQ,aAAL,CAAmBnB,KAAnB,EAA0BF,KAA1B,EAAiC,CAAjC,EAAoC,CAApC,CAAd;EACA,OAAO;IACLM,KADK;IAELI,KAAK,EAAE,MAAMJ,KAFR;IAGLK,GAAG,EAAGC,CAAD,IAAON,KAHP;IAILJ;EAJK,CAAP;AAMD"},"metadata":{},"sourceType":"module"}