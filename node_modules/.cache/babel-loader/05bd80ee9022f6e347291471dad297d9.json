{"ast":null,"code":"var _col, _col2, _col3, _th, _th2, _th3, _td, _ProvisioningBadge, _p;\n\nimport { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button, ConfirmModal, Modal, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { Authorize } from '../../components/Authorize';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { deleteReceiverAction } from '../../state/actions';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { isReceiverUsed } from '../../utils/alertmanager';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { extractNotifierTypeCounts } from '../../utils/receivers';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { ActionIcon } from '../rules/ActionIcon';\nimport { ReceiversSection } from './ReceiversSection';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const ReceiversTable = ({\n  config,\n  alertManagerName\n}) => {\n  const dispatch = useDispatch();\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n  const permissions = getNotificationsPermissions(alertManagerName);\n  const grafanaNotifiers = useUnifiedAlertingSelector(state => state.grafanaNotifiers); // receiver name slated for deletion. If this is set, a confirmation modal is shown. If user approves, this receiver is deleted\n\n  const [receiverToDelete, setReceiverToDelete] = useState();\n  const [showCannotDeleteReceiverModal, setShowCannotDeleteReceiverModal] = useState(false);\n\n  const onClickDeleteReceiver = receiverName => {\n    if (isReceiverUsed(receiverName, config)) {\n      setShowCannotDeleteReceiverModal(true);\n    } else {\n      setReceiverToDelete(receiverName);\n    }\n  };\n\n  const deleteReceiver = () => {\n    if (receiverToDelete) {\n      dispatch(deleteReceiverAction(receiverToDelete, alertManagerName));\n    }\n\n    setReceiverToDelete(undefined);\n  };\n\n  const rows = useMemo(() => {\n    var _config$alertmanager_, _config$alertmanager_2;\n\n    return (_config$alertmanager_ = (_config$alertmanager_2 = config.alertmanager_config.receivers) === null || _config$alertmanager_2 === void 0 ? void 0 : _config$alertmanager_2.map(receiver => {\n      var _grafanaNotifiers$res, _receiver$grafana_man;\n\n      return {\n        name: receiver.name,\n        types: Object.entries(extractNotifierTypeCounts(receiver, (_grafanaNotifiers$res = grafanaNotifiers.result) !== null && _grafanaNotifiers$res !== void 0 ? _grafanaNotifiers$res : [])).map(([type, count]) => {\n          if (count > 1) {\n            return `${type} (${count})`;\n          }\n\n          return type;\n        }),\n        provisioned: (_receiver$grafana_man = receiver.grafana_managed_receiver_configs) === null || _receiver$grafana_man === void 0 ? void 0 : _receiver$grafana_man.some(receiver => receiver.provenance)\n      };\n    })) !== null && _config$alertmanager_ !== void 0 ? _config$alertmanager_ : [];\n  }, [config, grafanaNotifiers.result]);\n  return /*#__PURE__*/_jsxs(ReceiversSection, {\n    className: styles.section,\n    title: \"Contact points\",\n    description: \"Define where the notifications will be sent to, for example email or Slack.\",\n    showButton: !isVanillaAM && contextSrv.hasPermission(permissions.create),\n    addButtonLabel: \"New contact point\",\n    addButtonTo: makeAMLink('/alerting/notifications/receivers/new', alertManagerName),\n    children: [/*#__PURE__*/_jsxs(\"table\", {\n      className: tableStyles.table,\n      \"data-testid\": \"receivers-table\",\n      children: [/*#__PURE__*/_jsxs(\"colgroup\", {\n        children: [_col || (_col = /*#__PURE__*/_jsx(\"col\", {})), _col2 || (_col2 = /*#__PURE__*/_jsx(\"col\", {})), /*#__PURE__*/_jsx(Authorize, {\n          actions: [permissions.update, permissions.delete],\n          children: _col3 || (_col3 = /*#__PURE__*/_jsx(\"col\", {}))\n        })]\n      }), /*#__PURE__*/_jsx(\"thead\", {\n        children: /*#__PURE__*/_jsxs(\"tr\", {\n          children: [_th || (_th = /*#__PURE__*/_jsx(\"th\", {\n            children: \"Contact point name\"\n          })), _th2 || (_th2 = /*#__PURE__*/_jsx(\"th\", {\n            children: \"Type\"\n          })), /*#__PURE__*/_jsx(Authorize, {\n            actions: [permissions.update, permissions.delete],\n            children: _th3 || (_th3 = /*#__PURE__*/_jsx(\"th\", {\n              children: \"Actions\"\n            }))\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(\"tbody\", {\n        children: [!rows.length && /*#__PURE__*/_jsx(\"tr\", {\n          className: tableStyles.evenRow,\n          children: _td || (_td = /*#__PURE__*/_jsx(\"td\", {\n            colSpan: 3,\n            children: \"No receivers defined.\"\n          }))\n        }), rows.map((receiver, idx) => /*#__PURE__*/_jsxs(\"tr\", {\n          className: idx % 2 === 0 ? tableStyles.evenRow : undefined,\n          children: [/*#__PURE__*/_jsxs(\"td\", {\n            children: [receiver.name, \" \", receiver.provisioned && (_ProvisioningBadge || (_ProvisioningBadge = /*#__PURE__*/_jsx(ProvisioningBadge, {})))]\n          }), /*#__PURE__*/_jsx(\"td\", {\n            children: receiver.types.join(', ')\n          }), /*#__PURE__*/_jsx(Authorize, {\n            actions: [permissions.update, permissions.delete],\n            children: /*#__PURE__*/_jsxs(\"td\", {\n              className: tableStyles.actionsCell,\n              children: [!isVanillaAM && !receiver.provisioned && /*#__PURE__*/_jsxs(_Fragment, {\n                children: [/*#__PURE__*/_jsx(Authorize, {\n                  actions: [permissions.update],\n                  children: /*#__PURE__*/_jsx(ActionIcon, {\n                    \"aria-label\": \"Edit\",\n                    \"data-testid\": \"edit\",\n                    to: makeAMLink(`/alerting/notifications/receivers/${encodeURIComponent(receiver.name)}/edit`, alertManagerName),\n                    tooltip: \"Edit contact point\",\n                    icon: \"pen\"\n                  })\n                }), /*#__PURE__*/_jsx(Authorize, {\n                  actions: [permissions.delete],\n                  children: /*#__PURE__*/_jsx(ActionIcon, {\n                    onClick: () => onClickDeleteReceiver(receiver.name),\n                    tooltip: \"Delete contact point\",\n                    icon: \"trash-alt\"\n                  })\n                })]\n              }), (isVanillaAM || receiver.provisioned) && /*#__PURE__*/_jsx(Authorize, {\n                actions: [permissions.update],\n                children: /*#__PURE__*/_jsx(ActionIcon, {\n                  \"data-testid\": \"view\",\n                  to: makeAMLink(`/alerting/notifications/receivers/${encodeURIComponent(receiver.name)}/edit`, alertManagerName),\n                  tooltip: \"View contact point\",\n                  icon: \"file-alt\"\n                })\n              })]\n            })\n          })]\n        }, receiver.name))]\n      })]\n    }), !!showCannotDeleteReceiverModal && /*#__PURE__*/_jsxs(Modal, {\n      isOpen: true,\n      title: \"Cannot delete contact point\",\n      onDismiss: () => setShowCannotDeleteReceiverModal(false),\n      children: [_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n        children: \"Contact point cannot be deleted because it is used in more policies. Please update or delete these policies first.\"\n      })), /*#__PURE__*/_jsx(Modal.ButtonRow, {\n        children: /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowCannotDeleteReceiverModal(false),\n          fill: \"outline\",\n          children: \"Close\"\n        })\n      })]\n    }), !!receiverToDelete && /*#__PURE__*/_jsx(ConfirmModal, {\n      isOpen: true,\n      title: \"Delete contact point\",\n      body: `Are you sure you want to delete contact point \"${receiverToDelete}\"?`,\n      confirmText: \"Yes, delete\",\n      onConfirm: deleteReceiver,\n      onDismiss: () => setReceiverToDelete(undefined)\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  section: css`\n    margin-top: ${theme.spacing(4)};\n  `\n});","map":{"version":3,"names":["css","React","useMemo","useState","useDispatch","Button","ConfirmModal","Modal","useStyles2","contextSrv","Authorize","useUnifiedAlertingSelector","deleteReceiverAction","getAlertTableStyles","getNotificationsPermissions","isReceiverUsed","isVanillaPrometheusAlertManagerDataSource","makeAMLink","extractNotifierTypeCounts","ProvisioningBadge","ActionIcon","ReceiversSection","ReceiversTable","config","alertManagerName","dispatch","tableStyles","styles","getStyles","isVanillaAM","permissions","grafanaNotifiers","state","receiverToDelete","setReceiverToDelete","showCannotDeleteReceiverModal","setShowCannotDeleteReceiverModal","onClickDeleteReceiver","receiverName","deleteReceiver","undefined","rows","alertmanager_config","receivers","map","receiver","name","types","Object","entries","result","type","count","provisioned","grafana_managed_receiver_configs","some","provenance","section","hasPermission","create","table","update","delete","length","evenRow","idx","join","actionsCell","encodeURIComponent","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/ReceiversTable.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ConfirmModal, Modal, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { Authorize } from '../../components/Authorize';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { deleteReceiverAction } from '../../state/actions';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { isReceiverUsed } from '../../utils/alertmanager';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { extractNotifierTypeCounts } from '../../utils/receivers';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { ReceiversSection } from './ReceiversSection';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerName: string;\n}\n\nexport const ReceiversTable: FC<Props> = ({ config, alertManagerName }) => {\n  const dispatch = useDispatch();\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n  const permissions = getNotificationsPermissions(alertManagerName);\n  const grafanaNotifiers = useUnifiedAlertingSelector((state) => state.grafanaNotifiers);\n\n  // receiver name slated for deletion. If this is set, a confirmation modal is shown. If user approves, this receiver is deleted\n  const [receiverToDelete, setReceiverToDelete] = useState<string>();\n  const [showCannotDeleteReceiverModal, setShowCannotDeleteReceiverModal] = useState(false);\n\n  const onClickDeleteReceiver = (receiverName: string): void => {\n    if (isReceiverUsed(receiverName, config)) {\n      setShowCannotDeleteReceiverModal(true);\n    } else {\n      setReceiverToDelete(receiverName);\n    }\n  };\n\n  const deleteReceiver = () => {\n    if (receiverToDelete) {\n      dispatch(deleteReceiverAction(receiverToDelete, alertManagerName));\n    }\n    setReceiverToDelete(undefined);\n  };\n\n  const rows = useMemo(\n    () =>\n      config.alertmanager_config.receivers?.map((receiver) => ({\n        name: receiver.name,\n        types: Object.entries(extractNotifierTypeCounts(receiver, grafanaNotifiers.result ?? [])).map(\n          ([type, count]) => {\n            if (count > 1) {\n              return `${type} (${count})`;\n            }\n            return type;\n          }\n        ),\n        provisioned: receiver.grafana_managed_receiver_configs?.some((receiver) => receiver.provenance),\n      })) ?? [],\n    [config, grafanaNotifiers.result]\n  );\n\n  return (\n    <ReceiversSection\n      className={styles.section}\n      title=\"Contact points\"\n      description=\"Define where the notifications will be sent to, for example email or Slack.\"\n      showButton={!isVanillaAM && contextSrv.hasPermission(permissions.create)}\n      addButtonLabel=\"New contact point\"\n      addButtonTo={makeAMLink('/alerting/notifications/receivers/new', alertManagerName)}\n    >\n      <table className={tableStyles.table} data-testid=\"receivers-table\">\n        <colgroup>\n          <col />\n          <col />\n          <Authorize actions={[permissions.update, permissions.delete]}>\n            <col />\n          </Authorize>\n        </colgroup>\n        <thead>\n          <tr>\n            <th>Contact point name</th>\n            <th>Type</th>\n            <Authorize actions={[permissions.update, permissions.delete]}>\n              <th>Actions</th>\n            </Authorize>\n          </tr>\n        </thead>\n        <tbody>\n          {!rows.length && (\n            <tr className={tableStyles.evenRow}>\n              <td colSpan={3}>No receivers defined.</td>\n            </tr>\n          )}\n          {rows.map((receiver, idx) => (\n            <tr key={receiver.name} className={idx % 2 === 0 ? tableStyles.evenRow : undefined}>\n              <td>\n                {receiver.name} {receiver.provisioned && <ProvisioningBadge />}\n              </td>\n              <td>{receiver.types.join(', ')}</td>\n              <Authorize actions={[permissions.update, permissions.delete]}>\n                <td className={tableStyles.actionsCell}>\n                  {!isVanillaAM && !receiver.provisioned && (\n                    <>\n                      <Authorize actions={[permissions.update]}>\n                        <ActionIcon\n                          aria-label=\"Edit\"\n                          data-testid=\"edit\"\n                          to={makeAMLink(\n                            `/alerting/notifications/receivers/${encodeURIComponent(receiver.name)}/edit`,\n                            alertManagerName\n                          )}\n                          tooltip=\"Edit contact point\"\n                          icon=\"pen\"\n                        />\n                      </Authorize>\n                      <Authorize actions={[permissions.delete]}>\n                        <ActionIcon\n                          onClick={() => onClickDeleteReceiver(receiver.name)}\n                          tooltip=\"Delete contact point\"\n                          icon=\"trash-alt\"\n                        />\n                      </Authorize>\n                    </>\n                  )}\n                  {(isVanillaAM || receiver.provisioned) && (\n                    <Authorize actions={[permissions.update]}>\n                      <ActionIcon\n                        data-testid=\"view\"\n                        to={makeAMLink(\n                          `/alerting/notifications/receivers/${encodeURIComponent(receiver.name)}/edit`,\n                          alertManagerName\n                        )}\n                        tooltip=\"View contact point\"\n                        icon=\"file-alt\"\n                      />\n                    </Authorize>\n                  )}\n                </td>\n              </Authorize>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      {!!showCannotDeleteReceiverModal && (\n        <Modal\n          isOpen={true}\n          title=\"Cannot delete contact point\"\n          onDismiss={() => setShowCannotDeleteReceiverModal(false)}\n        >\n          <p>\n            Contact point cannot be deleted because it is used in more policies. Please update or delete these policies\n            first.\n          </p>\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" onClick={() => setShowCannotDeleteReceiverModal(false)} fill=\"outline\">\n              Close\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      )}\n      {!!receiverToDelete && (\n        <ConfirmModal\n          isOpen={true}\n          title=\"Delete contact point\"\n          body={`Are you sure you want to delete contact point \"${receiverToDelete}\"?`}\n          confirmText=\"Yes, delete\"\n          onConfirm={deleteReceiver}\n          onDismiss={() => setReceiverToDelete(undefined)}\n        />\n      )}\n    </ReceiversSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  section: css`\n    margin-top: ${theme.spacing(4)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}