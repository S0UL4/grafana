{"ast":null,"code":"import { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n/**\n * This will setup features that are accessible through the root window location\n *\n * This is useful for manipulating the application from external drivers like puppetter/cypress\n *\n * @internal and subject to change\n */\n\nexport function initWindowRuntime() {\n  window.grafanaRuntime = {\n    /** Get info for the current dashboard.  This will include the migrated dashboard JSON */\n    getDashboardSaveModel: () => {\n      const d = getDashboardSrv().getCurrent();\n\n      if (!d) {\n        return undefined;\n      }\n\n      return d.getSaveModelClone();\n    },\n\n    /** The selected time range */\n    getDashboardTimeRange: () => {\n      const tr = getTimeSrv().timeRange();\n      return {\n        from: tr.from.valueOf(),\n        to: tr.to.valueOf(),\n        raw: tr.raw\n      };\n    },\n\n    /** Get the query results for the last loaded data */\n    getPanelData: () => {\n      const d = getDashboardSrv().getCurrent();\n\n      if (!d) {\n        return undefined;\n      }\n\n      return d.panels.reduce((acc, panel) => {\n        acc[panel.id] = panel.getQueryRunner().getLastResult();\n        return acc;\n      }, {});\n    }\n  };\n}","map":{"version":3,"names":["getDashboardSrv","getTimeSrv","initWindowRuntime","window","grafanaRuntime","getDashboardSaveModel","d","getCurrent","undefined","getSaveModelClone","getDashboardTimeRange","tr","timeRange","from","valueOf","to","raw","getPanelData","panels","reduce","acc","panel","id","getQueryRunner","getLastResult"],"sources":["/home/soula/grafana/public/app/features/runtime/init.ts"],"sourcesContent":["import { PanelData } from '@grafana/data';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\n/**\n * This will setup features that are accessible through the root window location\n *\n * This is useful for manipulating the application from external drivers like puppetter/cypress\n *\n * @internal and subject to change\n */\nexport function initWindowRuntime() {\n  (window as any).grafanaRuntime = {\n    /** Get info for the current dashboard.  This will include the migrated dashboard JSON */\n    getDashboardSaveModel: () => {\n      const d = getDashboardSrv().getCurrent();\n      if (!d) {\n        return undefined;\n      }\n      return d.getSaveModelClone();\n    },\n\n    /** The selected time range */\n    getDashboardTimeRange: () => {\n      const tr = getTimeSrv().timeRange();\n      return {\n        from: tr.from.valueOf(),\n        to: tr.to.valueOf(),\n        raw: tr.raw,\n      };\n    },\n\n    /** Get the query results for the last loaded data */\n    getPanelData: () => {\n      const d = getDashboardSrv().getCurrent();\n      if (!d) {\n        return undefined;\n      }\n      return d.panels.reduce((acc, panel) => {\n        acc[panel.id] = panel.getQueryRunner().getLastResult();\n        return acc;\n      }, {} as Record<number, PanelData | undefined>);\n    },\n  };\n}\n"],"mappings":"AACA,SAASA,eAAT,QAAgC,8CAAhC;AACA,SAASC,UAAT,QAA2B,yCAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,GAA6B;EACjCC,MAAD,CAAgBC,cAAhB,GAAiC;IAC/B;IACAC,qBAAqB,EAAE,MAAM;MAC3B,MAAMC,CAAC,GAAGN,eAAe,GAAGO,UAAlB,EAAV;;MACA,IAAI,CAACD,CAAL,EAAQ;QACN,OAAOE,SAAP;MACD;;MACD,OAAOF,CAAC,CAACG,iBAAF,EAAP;IACD,CAR8B;;IAU/B;IACAC,qBAAqB,EAAE,MAAM;MAC3B,MAAMC,EAAE,GAAGV,UAAU,GAAGW,SAAb,EAAX;MACA,OAAO;QACLC,IAAI,EAAEF,EAAE,CAACE,IAAH,CAAQC,OAAR,EADD;QAELC,EAAE,EAAEJ,EAAE,CAACI,EAAH,CAAMD,OAAN,EAFC;QAGLE,GAAG,EAAEL,EAAE,CAACK;MAHH,CAAP;IAKD,CAlB8B;;IAoB/B;IACAC,YAAY,EAAE,MAAM;MAClB,MAAMX,CAAC,GAAGN,eAAe,GAAGO,UAAlB,EAAV;;MACA,IAAI,CAACD,CAAL,EAAQ;QACN,OAAOE,SAAP;MACD;;MACD,OAAOF,CAAC,CAACY,MAAF,CAASC,MAAT,CAAgB,CAACC,GAAD,EAAMC,KAAN,KAAgB;QACrCD,GAAG,CAACC,KAAK,CAACC,EAAP,CAAH,GAAgBD,KAAK,CAACE,cAAN,GAAuBC,aAAvB,EAAhB;QACA,OAAOJ,GAAP;MACD,CAHM,EAGJ,EAHI,CAAP;IAID;EA9B8B,CAAjC;AAgCD"},"metadata":{},"sourceType":"module"}