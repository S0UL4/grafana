{"ast":null,"code":"var _Label, _Icon;\n\nimport { uniq } from 'lodash';\nimport React from 'react';\nimport { Icon, Label, MultiSelect } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GroupBy = ({\n  className,\n  groups,\n  groupBy,\n  onGroupingChange\n}) => {\n  const labelKeyOptions = uniq(groups.flatMap(group => group.alerts).flatMap(({\n    labels\n  }) => Object.keys(labels))).filter(label => !(label.startsWith('__') && label.endsWith('__'))) // Filter out private labels\n  .map(key => ({\n    label: key,\n    value: key\n  }));\n  return /*#__PURE__*/_jsxs(\"div\", {\n    \"data-testid\": 'group-by-container',\n    className: className,\n    children: [_Label || (_Label = /*#__PURE__*/_jsx(Label, {\n      children: \"Custom group by\"\n    })), /*#__PURE__*/_jsx(MultiSelect, {\n      \"aria-label\": 'group by label keys',\n      value: groupBy,\n      placeholder: \"Group by\",\n      prefix: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n        name: 'tag-alt'\n      })),\n      onChange: items => {\n        onGroupingChange(items.map(({\n          value\n        }) => value));\n      },\n      options: labelKeyOptions\n    })]\n  });\n};","map":{"version":3,"names":["uniq","React","Icon","Label","MultiSelect","GroupBy","className","groups","groupBy","onGroupingChange","labelKeyOptions","flatMap","group","alerts","labels","Object","keys","filter","label","startsWith","endsWith","map","key","value","items"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/alert-groups/GroupBy.tsx"],"sourcesContent":["import { uniq } from 'lodash';\nimport React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, Label, MultiSelect } from '@grafana/ui';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  className?: string;\n  groups: AlertmanagerGroup[];\n  groupBy: string[];\n  onGroupingChange: (keys: string[]) => void;\n}\n\nexport const GroupBy = ({ className, groups, groupBy, onGroupingChange }: Props) => {\n  const labelKeyOptions = uniq(groups.flatMap((group) => group.alerts).flatMap(({ labels }) => Object.keys(labels)))\n    .filter((label) => !(label.startsWith('__') && label.endsWith('__'))) // Filter out private labels\n    .map<SelectableValue>((key) => ({\n      label: key,\n      value: key,\n    }));\n\n  return (\n    <div data-testid={'group-by-container'} className={className}>\n      <Label>Custom group by</Label>\n      <MultiSelect\n        aria-label={'group by label keys'}\n        value={groupBy}\n        placeholder=\"Group by\"\n        prefix={<Icon name={'tag-alt'} />}\n        onChange={(items) => {\n          onGroupingChange(items.map(({ value }) => value as string));\n        }}\n        options={labelKeyOptions}\n      />\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,WAAtB,QAAyC,aAAzC;;;AAUA,OAAO,MAAMC,OAAO,GAAG,CAAC;EAAEC,SAAF;EAAaC,MAAb;EAAqBC,OAArB;EAA8BC;AAA9B,CAAD,KAA6D;EAClF,MAAMC,eAAe,GAAGV,IAAI,CAACO,MAAM,CAACI,OAAP,CAAgBC,KAAD,IAAWA,KAAK,CAACC,MAAhC,EAAwCF,OAAxC,CAAgD,CAAC;IAAEG;EAAF,CAAD,KAAgBC,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAAhE,CAAD,CAAJ,CACrBG,MADqB,CACbC,KAAD,IAAW,EAAEA,KAAK,CAACC,UAAN,CAAiB,IAAjB,KAA0BD,KAAK,CAACE,QAAN,CAAe,IAAf,CAA5B,CADG,EACgD;EADhD,CAErBC,GAFqB,CAECC,GAAD,KAAU;IAC9BJ,KAAK,EAAEI,GADuB;IAE9BC,KAAK,EAAED;EAFuB,CAAV,CAFA,CAAxB;EAOA,oBACE;IAAK,eAAa,oBAAlB;IAAwC,SAAS,EAAEhB,SAAnD;IAAA,4CACE,KAAC,KAAD;MAAA;IAAA,EADF,gBAEE,KAAC,WAAD;MACE,cAAY,qBADd;MAEE,KAAK,EAAEE,OAFT;MAGE,WAAW,EAAC,UAHd;MAIE,MAAM,iCAAE,KAAC,IAAD;QAAM,IAAI,EAAE;MAAZ,EAAF,CAJR;MAKE,QAAQ,EAAGgB,KAAD,IAAW;QACnBf,gBAAgB,CAACe,KAAK,CAACH,GAAN,CAAU,CAAC;UAAEE;QAAF,CAAD,KAAeA,KAAzB,CAAD,CAAhB;MACD,CAPH;MAQE,OAAO,EAAEb;IARX,EAFF;EAAA,EADF;AAeD,CAvBM"},"metadata":{},"sourceType":"module"}