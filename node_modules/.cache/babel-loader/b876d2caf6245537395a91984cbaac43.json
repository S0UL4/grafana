{"ast":null,"code":"import { useMemo } from 'react';\nimport { getFieldDisplayName } from '@grafana/data';\nimport { getFieldTypeIcon } from '../../types';\n/**\n * @internal\n */\n\n/**\n * @internal\n */\nexport function frameHasName(name, names) {\n  if (!name) {\n    return false;\n  }\n\n  return names.display.has(name) || names.raw.has(name);\n}\n/**\n * Retuns the distinct names in a set of frames\n */\n\nfunction getFrameFieldsDisplayNames(data, filter) {\n  const names = {\n    display: new Set(),\n    raw: new Set(),\n    fields: new Map()\n  };\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (filter && !filter(field)) {\n        continue;\n      }\n\n      const disp = getFieldDisplayName(field, frame, data);\n      names.display.add(disp);\n      names.fields.set(disp, field);\n\n      if (field.name && disp !== field.name) {\n        names.raw.add(field.name);\n        names.fields.set(field.name, field);\n      }\n    }\n  }\n\n  return names;\n}\n/**\n * @internal\n */\n\n\nexport function useFieldDisplayNames(data, filter) {\n  return useMemo(() => {\n    return getFrameFieldsDisplayNames(data, filter);\n  }, [data, filter]);\n}\n/**\n * @internal\n */\n\nexport function useSelectOptions(displayNames, currentName, firstItem, fieldType) {\n  return useMemo(() => {\n    let found = false;\n    const options = [];\n\n    if (firstItem) {\n      options.push(firstItem);\n    }\n\n    for (const name of displayNames.display) {\n      if (!found && name === currentName) {\n        found = true;\n      }\n\n      const field = displayNames.fields.get(name);\n\n      if (!fieldType || fieldType === (field === null || field === void 0 ? void 0 : field.type)) {\n        options.push({\n          value: name,\n          label: name,\n          icon: field ? getFieldTypeIcon(field) : undefined\n        });\n      }\n    }\n\n    for (const name of displayNames.raw) {\n      if (!displayNames.display.has(name)) {\n        if (!found && name === currentName) {\n          found = true;\n        }\n\n        options.push({\n          value: name,\n          label: `${name} (base field name)`\n        });\n      }\n    }\n\n    if (currentName && !found) {\n      options.push({\n        value: currentName,\n        label: `${currentName} (not found)`\n      });\n    }\n\n    return options;\n  }, [displayNames, currentName, firstItem, fieldType]);\n}","map":{"version":3,"names":["useMemo","getFieldDisplayName","getFieldTypeIcon","frameHasName","name","names","display","has","raw","getFrameFieldsDisplayNames","data","filter","Set","fields","Map","frame","field","disp","add","set","useFieldDisplayNames","useSelectOptions","displayNames","currentName","firstItem","fieldType","found","options","push","get","type","value","label","icon","undefined"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/MatchersUI/utils.ts"],"sourcesContent":["import { useMemo } from 'react';\n\nimport { DataFrame, Field, getFieldDisplayName, SelectableValue } from '@grafana/data';\n\nimport { getFieldTypeIcon } from '../../types';\n\n/**\n * @internal\n */\nexport interface FrameFieldsDisplayNames {\n  // The display names\n  display: Set<string>;\n\n  // raw field names (that are explicitly not visible)\n  raw: Set<string>;\n\n  // Field mappings (duplicates are not supported)\n  fields: Map<string, Field>;\n}\n\n/**\n * @internal\n */\nexport function frameHasName(name: string | undefined, names: FrameFieldsDisplayNames) {\n  if (!name) {\n    return false;\n  }\n  return names.display.has(name) || names.raw.has(name);\n}\n\n/**\n * Retuns the distinct names in a set of frames\n */\nfunction getFrameFieldsDisplayNames(data: DataFrame[], filter?: (field: Field) => boolean): FrameFieldsDisplayNames {\n  const names: FrameFieldsDisplayNames = {\n    display: new Set<string>(),\n    raw: new Set<string>(),\n    fields: new Map<string, Field>(),\n  };\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (filter && !filter(field)) {\n        continue;\n      }\n      const disp = getFieldDisplayName(field, frame, data);\n      names.display.add(disp);\n      names.fields.set(disp, field);\n      if (field.name && disp !== field.name) {\n        names.raw.add(field.name);\n        names.fields.set(field.name, field);\n      }\n    }\n  }\n  return names;\n}\n\n/**\n * @internal\n */\nexport function useFieldDisplayNames(data: DataFrame[], filter?: (field: Field) => boolean): FrameFieldsDisplayNames {\n  return useMemo(() => {\n    return getFrameFieldsDisplayNames(data, filter);\n  }, [data, filter]);\n}\n\n/**\n * @internal\n */\nexport function useSelectOptions(\n  displayNames: FrameFieldsDisplayNames,\n  currentName?: string,\n  firstItem?: SelectableValue<string>,\n  fieldType?: string\n): Array<SelectableValue<string>> {\n  return useMemo(() => {\n    let found = false;\n    const options: Array<SelectableValue<string>> = [];\n    if (firstItem) {\n      options.push(firstItem);\n    }\n    for (const name of displayNames.display) {\n      if (!found && name === currentName) {\n        found = true;\n      }\n      const field = displayNames.fields.get(name);\n      if (!fieldType || fieldType === field?.type) {\n        options.push({\n          value: name,\n          label: name,\n          icon: field ? getFieldTypeIcon(field) : undefined,\n        });\n      }\n    }\n    for (const name of displayNames.raw) {\n      if (!displayNames.display.has(name)) {\n        if (!found && name === currentName) {\n          found = true;\n        }\n        options.push({\n          value: name,\n          label: `${name} (base field name)`,\n        });\n      }\n    }\n\n    if (currentName && !found) {\n      options.push({\n        value: currentName,\n        label: `${currentName} (not found)`,\n      });\n    }\n    return options;\n  }, [displayNames, currentName, firstItem, fieldType]);\n}\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SAA2BC,mBAA3B,QAAuE,eAAvE;AAEA,SAASC,gBAAT,QAAiC,aAAjC;AAEA;AACA;AACA;;AAYA;AACA;AACA;AACA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAAgDC,KAAhD,EAAgF;EACrF,IAAI,CAACD,IAAL,EAAW;IACT,OAAO,KAAP;EACD;;EACD,OAAOC,KAAK,CAACC,OAAN,CAAcC,GAAd,CAAkBH,IAAlB,KAA2BC,KAAK,CAACG,GAAN,CAAUD,GAAV,CAAcH,IAAd,CAAlC;AACD;AAED;AACA;AACA;;AACA,SAASK,0BAAT,CAAoCC,IAApC,EAAuDC,MAAvD,EAAoH;EAClH,MAAMN,KAA8B,GAAG;IACrCC,OAAO,EAAE,IAAIM,GAAJ,EAD4B;IAErCJ,GAAG,EAAE,IAAII,GAAJ,EAFgC;IAGrCC,MAAM,EAAE,IAAIC,GAAJ;EAH6B,CAAvC;;EAMA,KAAK,MAAMC,KAAX,IAAoBL,IAApB,EAA0B;IACxB,KAAK,MAAMM,KAAX,IAAoBD,KAAK,CAACF,MAA1B,EAAkC;MAChC,IAAIF,MAAM,IAAI,CAACA,MAAM,CAACK,KAAD,CAArB,EAA8B;QAC5B;MACD;;MACD,MAAMC,IAAI,GAAGhB,mBAAmB,CAACe,KAAD,EAAQD,KAAR,EAAeL,IAAf,CAAhC;MACAL,KAAK,CAACC,OAAN,CAAcY,GAAd,CAAkBD,IAAlB;MACAZ,KAAK,CAACQ,MAAN,CAAaM,GAAb,CAAiBF,IAAjB,EAAuBD,KAAvB;;MACA,IAAIA,KAAK,CAACZ,IAAN,IAAca,IAAI,KAAKD,KAAK,CAACZ,IAAjC,EAAuC;QACrCC,KAAK,CAACG,GAAN,CAAUU,GAAV,CAAcF,KAAK,CAACZ,IAApB;QACAC,KAAK,CAACQ,MAAN,CAAaM,GAAb,CAAiBH,KAAK,CAACZ,IAAvB,EAA6BY,KAA7B;MACD;IACF;EACF;;EACD,OAAOX,KAAP;AACD;AAED;AACA;AACA;;;AACA,OAAO,SAASe,oBAAT,CAA8BV,IAA9B,EAAiDC,MAAjD,EAA8G;EACnH,OAAOX,OAAO,CAAC,MAAM;IACnB,OAAOS,0BAA0B,CAACC,IAAD,EAAOC,MAAP,CAAjC;EACD,CAFa,EAEX,CAACD,IAAD,EAAOC,MAAP,CAFW,CAAd;AAGD;AAED;AACA;AACA;;AACA,OAAO,SAASU,gBAAT,CACLC,YADK,EAELC,WAFK,EAGLC,SAHK,EAILC,SAJK,EAK2B;EAChC,OAAOzB,OAAO,CAAC,MAAM;IACnB,IAAI0B,KAAK,GAAG,KAAZ;IACA,MAAMC,OAAuC,GAAG,EAAhD;;IACA,IAAIH,SAAJ,EAAe;MACbG,OAAO,CAACC,IAAR,CAAaJ,SAAb;IACD;;IACD,KAAK,MAAMpB,IAAX,IAAmBkB,YAAY,CAAChB,OAAhC,EAAyC;MACvC,IAAI,CAACoB,KAAD,IAAUtB,IAAI,KAAKmB,WAAvB,EAAoC;QAClCG,KAAK,GAAG,IAAR;MACD;;MACD,MAAMV,KAAK,GAAGM,YAAY,CAACT,MAAb,CAAoBgB,GAApB,CAAwBzB,IAAxB,CAAd;;MACA,IAAI,CAACqB,SAAD,IAAcA,SAAS,MAAKT,KAAL,aAAKA,KAAL,uBAAKA,KAAK,CAAEc,IAAZ,CAA3B,EAA6C;QAC3CH,OAAO,CAACC,IAAR,CAAa;UACXG,KAAK,EAAE3B,IADI;UAEX4B,KAAK,EAAE5B,IAFI;UAGX6B,IAAI,EAAEjB,KAAK,GAAGd,gBAAgB,CAACc,KAAD,CAAnB,GAA6BkB;QAH7B,CAAb;MAKD;IACF;;IACD,KAAK,MAAM9B,IAAX,IAAmBkB,YAAY,CAACd,GAAhC,EAAqC;MACnC,IAAI,CAACc,YAAY,CAAChB,OAAb,CAAqBC,GAArB,CAAyBH,IAAzB,CAAL,EAAqC;QACnC,IAAI,CAACsB,KAAD,IAAUtB,IAAI,KAAKmB,WAAvB,EAAoC;UAClCG,KAAK,GAAG,IAAR;QACD;;QACDC,OAAO,CAACC,IAAR,CAAa;UACXG,KAAK,EAAE3B,IADI;UAEX4B,KAAK,EAAG,GAAE5B,IAAK;QAFJ,CAAb;MAID;IACF;;IAED,IAAImB,WAAW,IAAI,CAACG,KAApB,EAA2B;MACzBC,OAAO,CAACC,IAAR,CAAa;QACXG,KAAK,EAAER,WADI;QAEXS,KAAK,EAAG,GAAET,WAAY;MAFX,CAAb;IAID;;IACD,OAAOI,OAAP;EACD,CAtCa,EAsCX,CAACL,YAAD,EAAeC,WAAf,EAA4BC,SAA5B,EAAuCC,SAAvC,CAtCW,CAAd;AAuCD"},"metadata":{},"sourceType":"module"}