{"ast":null,"code":"import React from 'react';\nimport { InlineSegmentGroup, Segment, SegmentAsync } from '@grafana/ui';\nimport { useFields } from '../../../hooks/useFields';\nimport { useDispatch } from '../../../hooks/useStatelessReducer';\nimport { segmentStyles } from '../styles';\nimport { SettingsEditor } from './SettingsEditor';\nimport { isBucketAggregationWithField } from './aggregations';\nimport { changeBucketAggregationField, changeBucketAggregationType } from './state/actions';\nimport { bucketAggregationConfig } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst bucketAggOptions = Object.entries(bucketAggregationConfig).map(([key, {\n  label\n}]) => ({\n  label,\n  value: key\n}));\n\nconst toOption = bucketAgg => ({\n  label: bucketAggregationConfig[bucketAgg.type].label,\n  value: bucketAgg.type\n});\n\nexport const BucketAggregationEditor = ({\n  value\n}) => {\n  const dispatch = useDispatch();\n  const getFields = useFields(value.type);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(InlineSegmentGroup, {\n      children: [/*#__PURE__*/_jsx(Segment, {\n        className: segmentStyles,\n        options: bucketAggOptions,\n        onChange: e => dispatch(changeBucketAggregationType({\n          id: value.id,\n          newType: e.value\n        })),\n        value: toOption(value)\n      }), isBucketAggregationWithField(value) && /*#__PURE__*/_jsx(SegmentAsync, {\n        className: segmentStyles,\n        loadOptions: getFields,\n        onChange: e => dispatch(changeBucketAggregationField({\n          id: value.id,\n          newField: e.value\n        })),\n        placeholder: \"Select Field\",\n        value: value.field\n      })]\n    }), /*#__PURE__*/_jsx(SettingsEditor, {\n      bucketAgg: value\n    })]\n  });\n};","map":{"version":3,"names":["React","InlineSegmentGroup","Segment","SegmentAsync","useFields","useDispatch","segmentStyles","SettingsEditor","isBucketAggregationWithField","changeBucketAggregationField","changeBucketAggregationType","bucketAggregationConfig","bucketAggOptions","Object","entries","map","key","label","value","toOption","bucketAgg","type","BucketAggregationEditor","dispatch","getFields","e","id","newType","newField","field"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/BucketAggregationEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineSegmentGroup, Segment, SegmentAsync } from '@grafana/ui';\n\nimport { useFields } from '../../../hooks/useFields';\nimport { useDispatch } from '../../../hooks/useStatelessReducer';\nimport { segmentStyles } from '../styles';\n\nimport { SettingsEditor } from './SettingsEditor';\nimport { BucketAggregation, BucketAggregationType, isBucketAggregationWithField } from './aggregations';\nimport { changeBucketAggregationField, changeBucketAggregationType } from './state/actions';\nimport { bucketAggregationConfig } from './utils';\n\nconst bucketAggOptions: Array<SelectableValue<BucketAggregationType>> = Object.entries(bucketAggregationConfig).map(\n  ([key, { label }]) => ({\n    label,\n    value: key as BucketAggregationType,\n  })\n);\n\nconst toOption = (bucketAgg: BucketAggregation) => ({\n  label: bucketAggregationConfig[bucketAgg.type].label,\n  value: bucketAgg.type,\n});\n\ninterface QueryMetricEditorProps {\n  value: BucketAggregation;\n}\n\nexport const BucketAggregationEditor = ({ value }: QueryMetricEditorProps) => {\n  const dispatch = useDispatch();\n  const getFields = useFields(value.type);\n\n  return (\n    <>\n      <InlineSegmentGroup>\n        <Segment\n          className={segmentStyles}\n          options={bucketAggOptions}\n          onChange={(e) => dispatch(changeBucketAggregationType({ id: value.id, newType: e.value! }))}\n          value={toOption(value)}\n        />\n\n        {isBucketAggregationWithField(value) && (\n          <SegmentAsync\n            className={segmentStyles}\n            loadOptions={getFields}\n            onChange={(e) => dispatch(changeBucketAggregationField({ id: value.id, newField: e.value }))}\n            placeholder=\"Select Field\"\n            value={value.field}\n          />\n        )}\n      </InlineSegmentGroup>\n\n      <SettingsEditor bucketAgg={value} />\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,kBAAT,EAA6BC,OAA7B,EAAsCC,YAAtC,QAA0D,aAA1D;AAEA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,WAAT,QAA4B,oCAA5B;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAAmDC,4BAAnD,QAAuF,gBAAvF;AACA,SAASC,4BAAT,EAAuCC,2BAAvC,QAA0E,iBAA1E;AACA,SAASC,uBAAT,QAAwC,SAAxC;;;;AAEA,MAAMC,gBAA+D,GAAGC,MAAM,CAACC,OAAP,CAAeH,uBAAf,EAAwCI,GAAxC,CACtE,CAAC,CAACC,GAAD,EAAM;EAAEC;AAAF,CAAN,CAAD,MAAuB;EACrBA,KADqB;EAErBC,KAAK,EAAEF;AAFc,CAAvB,CADsE,CAAxE;;AAOA,MAAMG,QAAQ,GAAIC,SAAD,KAAmC;EAClDH,KAAK,EAAEN,uBAAuB,CAACS,SAAS,CAACC,IAAX,CAAvB,CAAwCJ,KADG;EAElDC,KAAK,EAAEE,SAAS,CAACC;AAFiC,CAAnC,CAAjB;;AASA,OAAO,MAAMC,uBAAuB,GAAG,CAAC;EAAEJ;AAAF,CAAD,KAAuC;EAC5E,MAAMK,QAAQ,GAAGlB,WAAW,EAA5B;EACA,MAAMmB,SAAS,GAAGpB,SAAS,CAACc,KAAK,CAACG,IAAP,CAA3B;EAEA,oBACE;IAAA,wBACE,MAAC,kBAAD;MAAA,wBACE,KAAC,OAAD;QACE,SAAS,EAAEf,aADb;QAEE,OAAO,EAAEM,gBAFX;QAGE,QAAQ,EAAGa,CAAD,IAAOF,QAAQ,CAACb,2BAA2B,CAAC;UAAEgB,EAAE,EAAER,KAAK,CAACQ,EAAZ;UAAgBC,OAAO,EAAEF,CAAC,CAACP;QAA3B,CAAD,CAA5B,CAH3B;QAIE,KAAK,EAAEC,QAAQ,CAACD,KAAD;MAJjB,EADF,EAQGV,4BAA4B,CAACU,KAAD,CAA5B,iBACC,KAAC,YAAD;QACE,SAAS,EAAEZ,aADb;QAEE,WAAW,EAAEkB,SAFf;QAGE,QAAQ,EAAGC,CAAD,IAAOF,QAAQ,CAACd,4BAA4B,CAAC;UAAEiB,EAAE,EAAER,KAAK,CAACQ,EAAZ;UAAgBE,QAAQ,EAAEH,CAAC,CAACP;QAA5B,CAAD,CAA7B,CAH3B;QAIE,WAAW,EAAC,cAJd;QAKE,KAAK,EAAEA,KAAK,CAACW;MALf,EATJ;IAAA,EADF,eAoBE,KAAC,cAAD;MAAgB,SAAS,EAAEX;IAA3B,EApBF;EAAA,EADF;AAwBD,CA5BM"},"metadata":{},"sourceType":"module"}