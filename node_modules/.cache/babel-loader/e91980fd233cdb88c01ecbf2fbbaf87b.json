{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css, cx } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport React, { PureComponent } from 'react'; // @ts-ignore\n\nimport Highlighter from 'react-highlight-words';\nimport tinycolor from 'tinycolor2';\nimport { findHighlightChunksInText } from '@grafana/data'; // @ts-ignore\n\nimport { withTheme2 } from '../../themes/index';\nimport { LogMessageAnsi } from './LogMessageAnsi';\nimport { LogRowContext } from './LogRowContext';\nimport { getLogRowStyles } from './getLogRowStyles'; //Components\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const MAX_CHARACTERS = 100000;\n\nconst getStyles = theme => {\n  const outlineColor = tinycolor(theme.components.dashboard.background).setAlpha(0.7).toRgbString();\n  return {\n    positionRelative: css`\n      label: positionRelative;\n      position: relative;\n    `,\n    rowWithContext: css`\n      label: rowWithContext;\n      z-index: 1;\n      outline: 9999px solid ${outlineColor};\n    `,\n    horizontalScroll: css`\n      label: verticalScroll;\n      white-space: pre;\n    `,\n    contextNewline: css`\n      display: block;\n      margin-left: 0px;\n    `\n  };\n};\n\nfunction renderLogMessage(hasAnsi, entry, highlights, highlightClassName) {\n  const needsHighlighter = highlights && highlights.length > 0 && highlights[0] && highlights[0].length > 0 && entry.length < MAX_CHARACTERS;\n  const searchWords = highlights !== null && highlights !== void 0 ? highlights : [];\n\n  if (hasAnsi) {\n    const highlight = needsHighlighter ? {\n      searchWords,\n      highlightClassName\n    } : undefined;\n    return /*#__PURE__*/_jsx(LogMessageAnsi, {\n      value: entry,\n      highlight: highlight\n    });\n  } else if (needsHighlighter) {\n    return /*#__PURE__*/_jsx(Highlighter, {\n      textToHighlight: entry,\n      searchWords: searchWords,\n      findChunks: findHighlightChunksInText,\n      highlightClassName: highlightClassName\n    });\n  } else {\n    return entry;\n  }\n}\n\nconst restructureLog = memoizeOne((line, prettifyLogMessage) => {\n  if (prettifyLogMessage) {\n    try {\n      return JSON.stringify(JSON.parse(line), undefined, 2);\n    } catch (error) {\n      return line;\n    }\n  }\n\n  return line;\n});\n\nclass UnThemedLogRowMessage extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onContextToggle\", e => {\n      e.stopPropagation();\n      this.props.onToggleContext();\n    });\n  }\n\n  render() {\n    const {\n      row,\n      theme,\n      errors,\n      hasMoreContextRows,\n      updateLimit,\n      context,\n      contextIsOpen,\n      showContextToggle,\n      wrapLogMessage,\n      prettifyLogMessage,\n      onToggleContext\n    } = this.props;\n    const style = getLogRowStyles(theme, row.logLevel);\n    const {\n      hasAnsi,\n      raw\n    } = row;\n    const restructuredEntry = restructureLog(raw, prettifyLogMessage);\n    const styles = getStyles(theme);\n    return /*#__PURE__*/_jsx(\"td\", {\n      className: style.logsRowMessage,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: cx({\n          [styles.positionRelative]: wrapLogMessage\n        }, {\n          [styles.horizontalScroll]: !wrapLogMessage\n        }),\n        children: [contextIsOpen && context && /*#__PURE__*/_jsx(LogRowContext, {\n          row: row,\n          context: context,\n          errors: errors,\n          wrapLogMessage: wrapLogMessage,\n          hasMoreContextRows: hasMoreContextRows,\n          onOutsideClick: onToggleContext,\n          onLoadMoreContext: () => {\n            if (updateLimit) {\n              updateLimit();\n            }\n          }\n        }), /*#__PURE__*/_jsx(\"span\", {\n          className: cx(styles.positionRelative, {\n            [styles.rowWithContext]: contextIsOpen\n          }),\n          children: renderLogMessage(hasAnsi, restructuredEntry, row.searchWords, style.logsRowMatchHighLight)\n        }), (showContextToggle === null || showContextToggle === void 0 ? void 0 : showContextToggle(row)) && /*#__PURE__*/_jsxs(\"span\", {\n          onClick: this.onContextToggle,\n          className: cx('log-row-context', style.context, {\n            [styles.contextNewline]: !wrapLogMessage\n          }),\n          children: [contextIsOpen ? 'Hide' : 'Show', \" context\"]\n        })]\n      })\n    });\n  }\n\n}\n\nexport const LogRowMessage = withTheme2(UnThemedLogRowMessage);\nLogRowMessage.displayName = 'LogRowMessage';","map":{"version":3,"names":["css","cx","memoizeOne","React","PureComponent","Highlighter","tinycolor","findHighlightChunksInText","withTheme2","LogMessageAnsi","LogRowContext","getLogRowStyles","MAX_CHARACTERS","getStyles","theme","outlineColor","components","dashboard","background","setAlpha","toRgbString","positionRelative","rowWithContext","horizontalScroll","contextNewline","renderLogMessage","hasAnsi","entry","highlights","highlightClassName","needsHighlighter","length","searchWords","highlight","undefined","restructureLog","line","prettifyLogMessage","JSON","stringify","parse","error","UnThemedLogRowMessage","e","stopPropagation","props","onToggleContext","render","row","errors","hasMoreContextRows","updateLimit","context","contextIsOpen","showContextToggle","wrapLogMessage","style","logLevel","raw","restructuredEntry","styles","logsRowMessage","logsRowMatchHighLight","onContextToggle","LogRowMessage","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Logs/LogRowMessage.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport React, { PureComponent } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\nimport tinycolor from 'tinycolor2';\n\nimport { LogRowModel, findHighlightChunksInText, GrafanaTheme2 } from '@grafana/data';\n\n// @ts-ignore\n\nimport { withTheme2 } from '../../themes/index';\nimport { Themeable2 } from '../../types/theme';\n\nimport { LogMessageAnsi } from './LogMessageAnsi';\nimport { LogRowContext } from './LogRowContext';\nimport { LogRowContextQueryErrors, HasMoreContextRows, LogRowContextRows } from './LogRowContextProvider';\nimport { getLogRowStyles } from './getLogRowStyles';\n\n//Components\n\nexport const MAX_CHARACTERS = 100000;\n\ninterface Props extends Themeable2 {\n  row: LogRowModel;\n  hasMoreContextRows?: HasMoreContextRows;\n  contextIsOpen: boolean;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  errors?: LogRowContextQueryErrors;\n  context?: LogRowContextRows;\n  showContextToggle?: (row?: LogRowModel) => boolean;\n  getRows: () => LogRowModel[];\n  onToggleContext: () => void;\n  updateLimit?: () => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const outlineColor = tinycolor(theme.components.dashboard.background).setAlpha(0.7).toRgbString();\n\n  return {\n    positionRelative: css`\n      label: positionRelative;\n      position: relative;\n    `,\n    rowWithContext: css`\n      label: rowWithContext;\n      z-index: 1;\n      outline: 9999px solid ${outlineColor};\n    `,\n    horizontalScroll: css`\n      label: verticalScroll;\n      white-space: pre;\n    `,\n    contextNewline: css`\n      display: block;\n      margin-left: 0px;\n    `,\n  };\n};\n\nfunction renderLogMessage(\n  hasAnsi: boolean,\n  entry: string,\n  highlights: string[] | undefined,\n  highlightClassName: string\n) {\n  const needsHighlighter =\n    highlights && highlights.length > 0 && highlights[0] && highlights[0].length > 0 && entry.length < MAX_CHARACTERS;\n  const searchWords = highlights ?? [];\n  if (hasAnsi) {\n    const highlight = needsHighlighter ? { searchWords, highlightClassName } : undefined;\n    return <LogMessageAnsi value={entry} highlight={highlight} />;\n  } else if (needsHighlighter) {\n    return (\n      <Highlighter\n        textToHighlight={entry}\n        searchWords={searchWords}\n        findChunks={findHighlightChunksInText}\n        highlightClassName={highlightClassName}\n      />\n    );\n  } else {\n    return entry;\n  }\n}\n\nconst restructureLog = memoizeOne((line: string, prettifyLogMessage: boolean): string => {\n  if (prettifyLogMessage) {\n    try {\n      return JSON.stringify(JSON.parse(line), undefined, 2);\n    } catch (error) {\n      return line;\n    }\n  }\n  return line;\n});\n\nclass UnThemedLogRowMessage extends PureComponent<Props> {\n  onContextToggle = (e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    this.props.onToggleContext();\n  };\n\n  render() {\n    const {\n      row,\n      theme,\n      errors,\n      hasMoreContextRows,\n      updateLimit,\n      context,\n      contextIsOpen,\n      showContextToggle,\n      wrapLogMessage,\n      prettifyLogMessage,\n      onToggleContext,\n    } = this.props;\n\n    const style = getLogRowStyles(theme, row.logLevel);\n    const { hasAnsi, raw } = row;\n    const restructuredEntry = restructureLog(raw, prettifyLogMessage);\n    const styles = getStyles(theme);\n\n    return (\n      <td className={style.logsRowMessage}>\n        <div\n          className={cx({ [styles.positionRelative]: wrapLogMessage }, { [styles.horizontalScroll]: !wrapLogMessage })}\n        >\n          {contextIsOpen && context && (\n            <LogRowContext\n              row={row}\n              context={context}\n              errors={errors}\n              wrapLogMessage={wrapLogMessage}\n              hasMoreContextRows={hasMoreContextRows}\n              onOutsideClick={onToggleContext}\n              onLoadMoreContext={() => {\n                if (updateLimit) {\n                  updateLimit();\n                }\n              }}\n            />\n          )}\n          <span className={cx(styles.positionRelative, { [styles.rowWithContext]: contextIsOpen })}>\n            {renderLogMessage(hasAnsi, restructuredEntry, row.searchWords, style.logsRowMatchHighLight)}\n          </span>\n          {showContextToggle?.(row) && (\n            <span\n              onClick={this.onContextToggle}\n              className={cx('log-row-context', style.context, { [styles.contextNewline]: !wrapLogMessage })}\n            >\n              {contextIsOpen ? 'Hide' : 'Show'} context\n            </span>\n          )}\n        </div>\n      </td>\n    );\n  }\n}\n\nexport const LogRowMessage = withTheme2(UnThemedLogRowMessage);\nLogRowMessage.displayName = 'LogRowMessage';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}