{"ast":null,"code":"import { configureStore as reduxConfigureStore } from '@reduxjs/toolkit';\nimport { buildInitialState } from '../core/reducers/navModel';\nimport { addReducer, createRootReducer } from '../core/reducers/root';\nimport { setStore } from './store';\nexport function addRootReducer(reducers) {\n  // this is ok now because we add reducers before configureStore is called\n  // in the future if we want to add reducers during runtime\n  // we'll have to solve this in a more dynamic way\n  addReducer(reducers);\n}\nexport function configureStore(initialState) {\n  const store = reduxConfigureStore({\n    reducer: createRootReducer(),\n    middleware: getDefaultMiddleware => getDefaultMiddleware({\n      thunk: true,\n      serializableCheck: false,\n      immutableCheck: false\n    }),\n    devTools: process.env.NODE_ENV !== 'production',\n    preloadedState: Object.assign({\n      navIndex: buildInitialState()\n    }, initialState)\n  });\n  setStore(store);\n  return store;\n}\n/*\nfunction getActionsToIgnoreSerializableCheckOn() {\n  return [\n    'dashboard/setPanelAngularComponent',\n    'dashboard/panelModelAndPluginReady',\n    'dashboard/dashboardInitCompleted',\n    'plugins/panelPluginLoaded',\n    'explore/initializeExplore',\n    'explore/changeRange',\n    'explore/updateDatasourceInstance',\n    'explore/queryStoreSubscription',\n    'explore/queryStreamUpdated',\n  ];\n}\n\nfunction getPathsToIgnoreMutationAndSerializableCheckOn() {\n  return [\n    'plugins.panels',\n    'dashboard.panels',\n    'dashboard.getModel',\n    'payload.plugin',\n    'panelEditorNew.getPanel',\n    'panelEditorNew.getSourcePanel',\n    'panelEditorNew.getData',\n    'explore.left.queryResponse',\n    'explore.right.queryResponse',\n    'explore.left.datasourceInstance',\n    'explore.right.datasourceInstance',\n    'explore.left.range',\n    'explore.left.eventBridge',\n    'explore.right.eventBridge',\n    'explore.right.range',\n    'explore.left.querySubscription',\n    'explore.right.querySubscription',\n  ];\n}\n*/","map":{"version":3,"names":["configureStore","reduxConfigureStore","buildInitialState","addReducer","createRootReducer","setStore","addRootReducer","reducers","initialState","store","reducer","middleware","getDefaultMiddleware","thunk","serializableCheck","immutableCheck","devTools","process","env","NODE_ENV","preloadedState","navIndex"],"sources":["/home/soula/grafana/public/app/store/configureStore.ts"],"sourcesContent":["import { configureStore as reduxConfigureStore, MiddlewareArray } from '@reduxjs/toolkit';\nimport { AnyAction } from 'redux';\nimport { ThunkMiddleware } from 'redux-thunk';\n\nimport { StoreState } from 'app/types/store';\n\nimport { buildInitialState } from '../core/reducers/navModel';\nimport { addReducer, createRootReducer } from '../core/reducers/root';\n\nimport { setStore } from './store';\n\nexport function addRootReducer(reducers: any) {\n  // this is ok now because we add reducers before configureStore is called\n  // in the future if we want to add reducers during runtime\n  // we'll have to solve this in a more dynamic way\n  addReducer(reducers);\n}\n\nexport function configureStore(initialState?: Partial<StoreState>) {\n  const store = reduxConfigureStore<StoreState, AnyAction, MiddlewareArray<[ThunkMiddleware<StoreState, AnyAction>]>>({\n    reducer: createRootReducer(),\n    middleware: (getDefaultMiddleware) =>\n      getDefaultMiddleware({ thunk: true, serializableCheck: false, immutableCheck: false }),\n    devTools: process.env.NODE_ENV !== 'production',\n    preloadedState: {\n      navIndex: buildInitialState(),\n      ...initialState,\n    },\n  });\n\n  setStore(store);\n  return store;\n}\n\n/*\nfunction getActionsToIgnoreSerializableCheckOn() {\n  return [\n    'dashboard/setPanelAngularComponent',\n    'dashboard/panelModelAndPluginReady',\n    'dashboard/dashboardInitCompleted',\n    'plugins/panelPluginLoaded',\n    'explore/initializeExplore',\n    'explore/changeRange',\n    'explore/updateDatasourceInstance',\n    'explore/queryStoreSubscription',\n    'explore/queryStreamUpdated',\n  ];\n}\n\nfunction getPathsToIgnoreMutationAndSerializableCheckOn() {\n  return [\n    'plugins.panels',\n    'dashboard.panels',\n    'dashboard.getModel',\n    'payload.plugin',\n    'panelEditorNew.getPanel',\n    'panelEditorNew.getSourcePanel',\n    'panelEditorNew.getData',\n    'explore.left.queryResponse',\n    'explore.right.queryResponse',\n    'explore.left.datasourceInstance',\n    'explore.right.datasourceInstance',\n    'explore.left.range',\n    'explore.left.eventBridge',\n    'explore.right.eventBridge',\n    'explore.right.range',\n    'explore.left.querySubscription',\n    'explore.right.querySubscription',\n  ];\n}\n*/\n"],"mappings":"AAAA,SAASA,cAAc,IAAIC,mBAA3B,QAAuE,kBAAvE;AAMA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,uBAA9C;AAEA,SAASC,QAAT,QAAyB,SAAzB;AAEA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAuC;EAC5C;EACA;EACA;EACAJ,UAAU,CAACI,QAAD,CAAV;AACD;AAED,OAAO,SAASP,cAAT,CAAwBQ,YAAxB,EAA4D;EACjE,MAAMC,KAAK,GAAGR,mBAAmB,CAAmF;IAClHS,OAAO,EAAEN,iBAAiB,EADwF;IAElHO,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;MAAEC,KAAK,EAAE,IAAT;MAAeC,iBAAiB,EAAE,KAAlC;MAAyCC,cAAc,EAAE;IAAzD,CAAD,CAH4F;IAIlHC,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAJ+E;IAKlHC,cAAc;MACZC,QAAQ,EAAEnB,iBAAiB;IADf,GAETM,YAFS;EALoG,CAAnF,CAAjC;EAWAH,QAAQ,CAACI,KAAD,CAAR;EACA,OAAOA,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}