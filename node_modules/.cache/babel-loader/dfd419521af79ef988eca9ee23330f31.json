{"ast":null,"code":"// This needs to be in its own file to avoid circular references\n// Builtin Predicates\n// not using 'any' and 'never' since they are reserved keywords\nexport let MatcherID;\n\n(function (MatcherID) {\n  MatcherID[\"anyMatch\"] = \"anyMatch\";\n  MatcherID[\"allMatch\"] = \"allMatch\";\n  MatcherID[\"invertMatch\"] = \"invertMatch\";\n  MatcherID[\"alwaysMatch\"] = \"alwaysMatch\";\n  MatcherID[\"neverMatch\"] = \"neverMatch\";\n})(MatcherID || (MatcherID = {}));\n\nexport let FieldMatcherID;\n/**\n * Field name matchers\n */\n\n(function (FieldMatcherID) {\n  FieldMatcherID[\"numeric\"] = \"numeric\";\n  FieldMatcherID[\"time\"] = \"time\";\n  FieldMatcherID[\"first\"] = \"first\";\n  FieldMatcherID[\"firstTimeField\"] = \"firstTimeField\";\n  FieldMatcherID[\"byType\"] = \"byType\";\n  FieldMatcherID[\"byName\"] = \"byName\";\n  FieldMatcherID[\"byNames\"] = \"byNames\";\n  FieldMatcherID[\"byRegexp\"] = \"byRegexp\";\n  FieldMatcherID[\"byRegexpOrNames\"] = \"byRegexpOrNames\";\n  FieldMatcherID[\"byFrameRefID\"] = \"byFrameRefID\";\n})(FieldMatcherID || (FieldMatcherID = {}));\n\nexport let FrameMatcherID;\n/**\n * @public\n */\n\n(function (FrameMatcherID) {\n  FrameMatcherID[\"byName\"] = \"byName\";\n  FrameMatcherID[\"byRefId\"] = \"byRefId\";\n  FrameMatcherID[\"byIndex\"] = \"byIndex\";\n  FrameMatcherID[\"byLabel\"] = \"byLabel\";\n})(FrameMatcherID || (FrameMatcherID = {}));\n\nexport let ValueMatcherID;\n\n(function (ValueMatcherID) {\n  ValueMatcherID[\"regex\"] = \"regex\";\n  ValueMatcherID[\"isNull\"] = \"isNull\";\n  ValueMatcherID[\"isNotNull\"] = \"isNotNull\";\n  ValueMatcherID[\"greater\"] = \"greater\";\n  ValueMatcherID[\"greaterOrEqual\"] = \"greaterOrEqual\";\n  ValueMatcherID[\"lower\"] = \"lower\";\n  ValueMatcherID[\"lowerOrEqual\"] = \"lowerOrEqual\";\n  ValueMatcherID[\"equal\"] = \"equal\";\n  ValueMatcherID[\"notEqual\"] = \"notEqual\";\n  ValueMatcherID[\"between\"] = \"between\";\n})(ValueMatcherID || (ValueMatcherID = {}));","map":{"version":3,"names":["MatcherID","FieldMatcherID","FrameMatcherID","ValueMatcherID"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/matchers/ids.ts"],"sourcesContent":["// This needs to be in its own file to avoid circular references\n\n// Builtin Predicates\n// not using 'any' and 'never' since they are reserved keywords\nexport enum MatcherID {\n  anyMatch = 'anyMatch', // checks children\n  allMatch = 'allMatch', // checks children\n  invertMatch = 'invertMatch', // checks child\n  alwaysMatch = 'alwaysMatch',\n  neverMatch = 'neverMatch',\n}\n\nexport enum FieldMatcherID {\n  // Specific Types\n  numeric = 'numeric',\n  time = 'time', // Can be multiple times\n  first = 'first',\n  firstTimeField = 'firstTimeField', // Only the first fime field\n\n  // With arguments\n  byType = 'byType',\n  byName = 'byName',\n  byNames = 'byNames',\n  byRegexp = 'byRegexp',\n  byRegexpOrNames = 'byRegexpOrNames',\n  byFrameRefID = 'byFrameRefID',\n  // byIndex = 'byIndex',\n  // byLabel = 'byLabel',\n}\n\n/**\n * Field name matchers\n */\nexport enum FrameMatcherID {\n  byName = 'byName',\n  byRefId = 'byRefId',\n  byIndex = 'byIndex',\n  byLabel = 'byLabel',\n}\n\n/**\n * @public\n */\nexport enum ValueMatcherID {\n  regex = 'regex',\n  isNull = 'isNull',\n  isNotNull = 'isNotNull',\n  greater = 'greater',\n  greaterOrEqual = 'greaterOrEqual',\n  lower = 'lower',\n  lowerOrEqual = 'lowerOrEqual',\n  equal = 'equal',\n  notEqual = 'notEqual',\n  between = 'between',\n}\n"],"mappings":"AAAA;AAEA;AACA;AACA,WAAYA,SAAZ;;WAAYA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;GAAAA,S,KAAAA,S;;AAQZ,WAAYC,cAAZ;AAkBA;AACA;AACA;;WApBYA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;GAAAA,c,KAAAA,c;;AAqBZ,WAAYC,cAAZ;AAOA;AACA;AACA;;WATYA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;GAAAA,c,KAAAA,c;;AAUZ,WAAYC,cAAZ;;WAAYA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;GAAAA,c,KAAAA,c"},"metadata":{},"sourceType":"module"}