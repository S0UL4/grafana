{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport formatDuration from 'date-fns/formatDuration';\nimport React, { PureComponent } from 'react';\nimport { parseDuration } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ButtonGroup } from '../Button';\nimport { ButtonSelect } from '../Dropdown/ButtonSelect';\nimport { ToolbarButton } from '../ToolbarButton'; // Default intervals used in the refresh picker component\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const defaultIntervals = ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'];\nconst offLabel = 'Auto refresh turned off. Choose refresh time interval';\nexport class RefreshPicker extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChangeSelect\", item => {\n      const {\n        onIntervalChanged\n      } = this.props;\n\n      if (onIntervalChanged) {\n        // @ts-ignore\n        onIntervalChanged(item.value);\n      }\n    });\n  }\n\n  getVariant() {\n    if (this.props.isLive) {\n      return 'primary';\n    }\n\n    if (this.props.isLoading) {\n      return 'destructive';\n    }\n\n    if (this.props.primary) {\n      return 'primary';\n    }\n\n    return 'default';\n  }\n\n  render() {\n    const {\n      onRefresh,\n      intervals,\n      tooltip,\n      value,\n      text,\n      isLoading,\n      noIntervalPicker,\n      width\n    } = this.props;\n    const currentValue = value || '';\n    const variant = this.getVariant();\n    const options = intervalsToOptions({\n      intervals\n    });\n    const option = options.find(({\n      value\n    }) => value === currentValue);\n    let selectedValue = option || RefreshPicker.offOption;\n\n    if (selectedValue.label === RefreshPicker.offOption.label) {\n      selectedValue = {\n        value: ''\n      };\n    }\n\n    return /*#__PURE__*/_jsxs(ButtonGroup, {\n      className: \"refresh-picker\",\n      children: [/*#__PURE__*/_jsx(ToolbarButton, {\n        \"aria-label\": text,\n        tooltip: tooltip,\n        onClick: onRefresh,\n        variant: variant,\n        icon: isLoading ? 'fa fa-spinner' : 'sync',\n        style: width ? {\n          width\n        } : undefined,\n        \"data-testid\": selectors.components.RefreshPicker.runButtonV2,\n        children: text\n      }), !noIntervalPicker && /*#__PURE__*/_jsx(ButtonSelect, {\n        value: selectedValue,\n        options: options,\n        onChange: this.onChangeSelect,\n        variant: variant,\n        \"data-testid\": selectors.components.RefreshPicker.intervalButtonV2,\n        \"aria-label\": selectedValue.value === '' ? offLabel : `Choose refresh time interval with current interval ${selectedValue.ariaLabel} selected`\n      })]\n    });\n  }\n\n}\n\n_defineProperty(RefreshPicker, \"offOption\", {\n  label: 'Off',\n  value: '',\n  ariaLabel: 'Turn off auto refresh'\n});\n\n_defineProperty(RefreshPicker, \"liveOption\", {\n  label: 'Live',\n  value: 'LIVE',\n  ariaLabel: 'Turn on live streaming'\n});\n\n_defineProperty(RefreshPicker, \"isLive\", refreshInterval => refreshInterval === RefreshPicker.liveOption.value);\n\nexport function intervalsToOptions({\n  intervals = defaultIntervals\n} = {}) {\n  const intervalsOrDefault = intervals || defaultIntervals;\n  const options = intervalsOrDefault.map(interval => {\n    const duration = parseDuration(interval);\n    const ariaLabel = formatDuration(duration);\n    return {\n      label: interval,\n      value: interval,\n      ariaLabel: ariaLabel\n    };\n  });\n  options.unshift(RefreshPicker.offOption);\n  return options;\n}","map":{"version":3,"names":["formatDuration","React","PureComponent","parseDuration","selectors","ButtonGroup","ButtonSelect","ToolbarButton","defaultIntervals","offLabel","RefreshPicker","constructor","props","item","onIntervalChanged","value","getVariant","isLive","isLoading","primary","render","onRefresh","intervals","tooltip","text","noIntervalPicker","width","currentValue","variant","options","intervalsToOptions","option","find","selectedValue","offOption","label","undefined","components","runButtonV2","onChangeSelect","intervalButtonV2","ariaLabel","refreshInterval","liveOption","intervalsOrDefault","map","interval","duration","unshift"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/RefreshPicker/RefreshPicker.tsx"],"sourcesContent":["import formatDuration from 'date-fns/formatDuration';\nimport React, { PureComponent } from 'react';\n\nimport { SelectableValue, parseDuration } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { ButtonGroup } from '../Button';\nimport { ButtonSelect } from '../Dropdown/ButtonSelect';\nimport { ToolbarButtonVariant, ToolbarButton } from '../ToolbarButton';\n\n// Default intervals used in the refresh picker component\nexport const defaultIntervals = ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'];\nconst offLabel = 'Auto refresh turned off. Choose refresh time interval';\n\nexport interface Props {\n  intervals?: string[];\n  onRefresh?: () => any;\n  onIntervalChanged: (interval: string) => void;\n  value?: string;\n  tooltip?: string;\n  isLoading?: boolean;\n  isLive?: boolean;\n  text?: string;\n  noIntervalPicker?: boolean;\n  width?: string;\n  primary?: boolean;\n}\n\nexport class RefreshPicker extends PureComponent<Props> {\n  static offOption = { label: 'Off', value: '', ariaLabel: 'Turn off auto refresh' };\n  static liveOption = { label: 'Live', value: 'LIVE', ariaLabel: 'Turn on live streaming' };\n  static isLive = (refreshInterval?: string): boolean => refreshInterval === RefreshPicker.liveOption.value;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onChangeSelect = (item: SelectableValue<string>) => {\n    const { onIntervalChanged } = this.props;\n    if (onIntervalChanged) {\n      // @ts-ignore\n      onIntervalChanged(item.value);\n    }\n  };\n\n  getVariant(): ToolbarButtonVariant {\n    if (this.props.isLive) {\n      return 'primary';\n    }\n    if (this.props.isLoading) {\n      return 'destructive';\n    }\n    if (this.props.primary) {\n      return 'primary';\n    }\n    return 'default';\n  }\n\n  render() {\n    const { onRefresh, intervals, tooltip, value, text, isLoading, noIntervalPicker, width } = this.props;\n\n    const currentValue = value || '';\n    const variant = this.getVariant();\n    const options = intervalsToOptions({ intervals });\n    const option = options.find(({ value }) => value === currentValue);\n    let selectedValue = option || RefreshPicker.offOption;\n\n    if (selectedValue.label === RefreshPicker.offOption.label) {\n      selectedValue = { value: '' };\n    }\n\n    return (\n      <ButtonGroup className=\"refresh-picker\">\n        <ToolbarButton\n          aria-label={text}\n          tooltip={tooltip}\n          onClick={onRefresh}\n          variant={variant}\n          icon={isLoading ? 'fa fa-spinner' : 'sync'}\n          style={width ? { width } : undefined}\n          data-testid={selectors.components.RefreshPicker.runButtonV2}\n        >\n          {text}\n        </ToolbarButton>\n        {!noIntervalPicker && (\n          <ButtonSelect\n            value={selectedValue}\n            options={options}\n            onChange={this.onChangeSelect as any}\n            variant={variant}\n            data-testid={selectors.components.RefreshPicker.intervalButtonV2}\n            aria-label={\n              selectedValue.value === ''\n                ? offLabel\n                : `Choose refresh time interval with current interval ${selectedValue.ariaLabel} selected`\n            }\n          />\n        )}\n      </ButtonGroup>\n    );\n  }\n}\n\nexport function intervalsToOptions({ intervals = defaultIntervals }: { intervals?: string[] } = {}): Array<\n  SelectableValue<string>\n> {\n  const intervalsOrDefault = intervals || defaultIntervals;\n  const options = intervalsOrDefault.map((interval) => {\n    const duration = parseDuration(interval);\n    const ariaLabel = formatDuration(duration);\n\n    return {\n      label: interval,\n      value: interval,\n      ariaLabel: ariaLabel,\n    };\n  });\n\n  options.unshift(RefreshPicker.offOption);\n  return options;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}