{"ast":null,"code":"import { FieldColorModeId } from '@grafana/data';\nimport { BigValueTextMode, BigValueGraphMode, BigValueColorMode } from '@grafana/schema';\nimport { sharedSingleStatPanelChangedHandler } from '@grafana/ui';\n// This is called when the panel changes from another panel\nexport const statPanelChangedHandler = (panel, prevPluginId, prevOptions) => {\n  // This handles most config changes\n  const options = sharedSingleStatPanelChangedHandler(panel, prevPluginId, prevOptions); // Changing from angular singlestat\n\n  if (prevOptions.angular && (prevPluginId === 'singlestat' || prevPluginId === 'grafana-singlestat-panel')) {\n    const oldOptions = prevOptions.angular;\n    options.graphMode = BigValueGraphMode.None;\n\n    if (oldOptions.sparkline && oldOptions.sparkline.show) {\n      options.graphMode = BigValueGraphMode.Area;\n    }\n\n    if (oldOptions.colorBackground) {\n      options.colorMode = BigValueColorMode.Background;\n    } else if (oldOptions.colorValue) {\n      options.colorMode = BigValueColorMode.Value;\n    } else {\n      var _oldOptions$sparkline;\n\n      options.colorMode = BigValueColorMode.None;\n\n      if ((_oldOptions$sparkline = oldOptions.sparkline) !== null && _oldOptions$sparkline !== void 0 && _oldOptions$sparkline.lineColor && options.graphMode === BigValueGraphMode.Area) {\n        var _panel$fieldConfig;\n\n        const cfg = (_panel$fieldConfig = panel.fieldConfig) !== null && _panel$fieldConfig !== void 0 ? _panel$fieldConfig : {};\n        cfg.defaults.color = {\n          mode: FieldColorModeId.Fixed,\n          fixedColor: oldOptions.sparkline.lineColor\n        };\n        panel.fieldConfig = cfg;\n      }\n    }\n\n    if (oldOptions.valueName === 'name') {\n      options.textMode = BigValueTextMode.Name;\n    }\n  }\n\n  return options;\n};","map":{"version":3,"names":["FieldColorModeId","BigValueTextMode","BigValueGraphMode","BigValueColorMode","sharedSingleStatPanelChangedHandler","statPanelChangedHandler","panel","prevPluginId","prevOptions","options","angular","oldOptions","graphMode","None","sparkline","show","Area","colorBackground","colorMode","Background","colorValue","Value","lineColor","cfg","fieldConfig","defaults","color","mode","Fixed","fixedColor","valueName","textMode","Name"],"sources":["/home/soula/grafana/public/app/plugins/panel/stat/StatMigrations.ts"],"sourcesContent":["import { FieldColorModeId, FieldConfigSource, PanelModel } from '@grafana/data';\nimport { BigValueTextMode, BigValueGraphMode, BigValueColorMode } from '@grafana/schema';\nimport { sharedSingleStatPanelChangedHandler } from '@grafana/ui';\n\nimport { PanelOptions } from './models.gen';\n\n// This is called when the panel changes from another panel\nexport const statPanelChangedHandler = (\n  panel: PanelModel<Partial<PanelOptions>> | any,\n  prevPluginId: string,\n  prevOptions: any\n) => {\n  // This handles most config changes\n  const options = sharedSingleStatPanelChangedHandler(panel, prevPluginId, prevOptions) as PanelOptions;\n\n  // Changing from angular singlestat\n  if (prevOptions.angular && (prevPluginId === 'singlestat' || prevPluginId === 'grafana-singlestat-panel')) {\n    const oldOptions = prevOptions.angular;\n\n    options.graphMode = BigValueGraphMode.None;\n    if (oldOptions.sparkline && oldOptions.sparkline.show) {\n      options.graphMode = BigValueGraphMode.Area;\n    }\n\n    if (oldOptions.colorBackground) {\n      options.colorMode = BigValueColorMode.Background;\n    } else if (oldOptions.colorValue) {\n      options.colorMode = BigValueColorMode.Value;\n    } else {\n      options.colorMode = BigValueColorMode.None;\n      if (oldOptions.sparkline?.lineColor && options.graphMode === BigValueGraphMode.Area) {\n        const cfg: FieldConfigSource = panel.fieldConfig ?? {};\n        cfg.defaults.color = {\n          mode: FieldColorModeId.Fixed,\n          fixedColor: oldOptions.sparkline.lineColor,\n        };\n        panel.fieldConfig = cfg;\n      }\n    }\n\n    if (oldOptions.valueName === 'name') {\n      options.textMode = BigValueTextMode.Name;\n    }\n  }\n\n  return options;\n};\n"],"mappings":"AAAA,SAASA,gBAAT,QAAgE,eAAhE;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,iBAA9C,QAAuE,iBAAvE;AACA,SAASC,mCAAT,QAAoD,aAApD;AAIA;AACA,OAAO,MAAMC,uBAAuB,GAAG,CACrCC,KADqC,EAErCC,YAFqC,EAGrCC,WAHqC,KAIlC;EACH;EACA,MAAMC,OAAO,GAAGL,mCAAmC,CAACE,KAAD,EAAQC,YAAR,EAAsBC,WAAtB,CAAnD,CAFG,CAIH;;EACA,IAAIA,WAAW,CAACE,OAAZ,KAAwBH,YAAY,KAAK,YAAjB,IAAiCA,YAAY,KAAK,0BAA1E,CAAJ,EAA2G;IACzG,MAAMI,UAAU,GAAGH,WAAW,CAACE,OAA/B;IAEAD,OAAO,CAACG,SAAR,GAAoBV,iBAAiB,CAACW,IAAtC;;IACA,IAAIF,UAAU,CAACG,SAAX,IAAwBH,UAAU,CAACG,SAAX,CAAqBC,IAAjD,EAAuD;MACrDN,OAAO,CAACG,SAAR,GAAoBV,iBAAiB,CAACc,IAAtC;IACD;;IAED,IAAIL,UAAU,CAACM,eAAf,EAAgC;MAC9BR,OAAO,CAACS,SAAR,GAAoBf,iBAAiB,CAACgB,UAAtC;IACD,CAFD,MAEO,IAAIR,UAAU,CAACS,UAAf,EAA2B;MAChCX,OAAO,CAACS,SAAR,GAAoBf,iBAAiB,CAACkB,KAAtC;IACD,CAFM,MAEA;MAAA;;MACLZ,OAAO,CAACS,SAAR,GAAoBf,iBAAiB,CAACU,IAAtC;;MACA,IAAI,yBAAAF,UAAU,CAACG,SAAX,wEAAsBQ,SAAtB,IAAmCb,OAAO,CAACG,SAAR,KAAsBV,iBAAiB,CAACc,IAA/E,EAAqF;QAAA;;QACnF,MAAMO,GAAsB,yBAAGjB,KAAK,CAACkB,WAAT,mEAAwB,EAApD;QACAD,GAAG,CAACE,QAAJ,CAAaC,KAAb,GAAqB;UACnBC,IAAI,EAAE3B,gBAAgB,CAAC4B,KADJ;UAEnBC,UAAU,EAAElB,UAAU,CAACG,SAAX,CAAqBQ;QAFd,CAArB;QAIAhB,KAAK,CAACkB,WAAN,GAAoBD,GAApB;MACD;IACF;;IAED,IAAIZ,UAAU,CAACmB,SAAX,KAAyB,MAA7B,EAAqC;MACnCrB,OAAO,CAACsB,QAAR,GAAmB9B,gBAAgB,CAAC+B,IAApC;IACD;EACF;;EAED,OAAOvB,OAAP;AACD,CAvCM"},"metadata":{},"sourceType":"module"}