{"ast":null,"code":"var _PreviewRule;\n\nconst _excluded = [\"onChange\", \"ref\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Field, Input, InputControl, Select, useStyles } from '@grafana/ui';\nimport { RuleFormType } from '../../types/rule-form';\nimport { timeOptions } from '../../utils/time';\nimport { PreviewRule } from './PreviewRule';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const CloudEvaluationBehavior = () => {\n  var _errors$forTime, _errors$forTime2;\n\n  const styles = useStyles(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: {\n      errors\n    }\n  } = useFormContext();\n  const type = watch('type'); // cloud recording rules do not have alert conditions\n\n  if (type === RuleFormType.cloudRecording) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(RuleEditorSection, {\n    stepNo: 2,\n    title: \"Alert evaluation behavior\",\n    children: [/*#__PURE__*/_jsx(Field, {\n      label: \"For\",\n      description: \"Expression has to be true for this long for the alert to be fired.\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.flexRow,\n        children: [/*#__PURE__*/_jsx(Field, {\n          invalid: !!((_errors$forTime = errors.forTime) !== null && _errors$forTime !== void 0 && _errors$forTime.message),\n          error: (_errors$forTime2 = errors.forTime) === null || _errors$forTime2 === void 0 ? void 0 : _errors$forTime2.message,\n          className: styles.inlineField,\n          children: /*#__PURE__*/_jsx(Input, Object.assign({}, register('forTime', {\n            pattern: {\n              value: /^\\d+$/,\n              message: 'Must be a positive integer.'\n            }\n          }), {\n            width: 8\n          }))\n        }), /*#__PURE__*/_jsx(InputControl, {\n          name: \"forTimeUnit\",\n          render: _ref => {\n            let {\n              field: {\n                onChange\n              }\n            } = _ref,\n                field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n            return /*#__PURE__*/_jsx(Select, Object.assign({}, field, {\n              options: timeOptions,\n              onChange: value => onChange(value === null || value === void 0 ? void 0 : value.value),\n              width: 15,\n              className: styles.timeUnit\n            }));\n          },\n          control: control\n        })]\n      })\n    }), _PreviewRule || (_PreviewRule = /*#__PURE__*/_jsx(PreviewRule, {}))]\n  });\n};\n\nconst getStyles = theme => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  timeUnit: css`\n    margin-left: ${theme.spacing.xs};\n  `\n});","map":{"version":3,"names":["css","React","useFormContext","Field","Input","InputControl","Select","useStyles","RuleFormType","timeOptions","PreviewRule","RuleEditorSection","CloudEvaluationBehavior","styles","getStyles","register","control","watch","formState","errors","type","cloudRecording","flexRow","forTime","message","inlineField","pattern","value","field","onChange","timeUnit","theme","spacing","xs"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/CloudEvaluationBehavior.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { Field, Input, InputControl, Select, useStyles } from '@grafana/ui';\n\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { timeOptions } from '../../utils/time';\n\nimport { PreviewRule } from './PreviewRule';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport const CloudEvaluationBehavior: FC = () => {\n  const styles = useStyles(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const type = watch('type');\n\n  // cloud recording rules do not have alert conditions\n  if (type === RuleFormType.cloudRecording) {\n    return null;\n  }\n\n  return (\n    <RuleEditorSection stepNo={2} title=\"Alert evaluation behavior\">\n      <Field label=\"For\" description=\"Expression has to be true for this long for the alert to be fired.\">\n        <div className={styles.flexRow}>\n          <Field invalid={!!errors.forTime?.message} error={errors.forTime?.message} className={styles.inlineField}>\n            <Input\n              {...register('forTime', { pattern: { value: /^\\d+$/, message: 'Must be a positive integer.' } })}\n              width={8}\n            />\n          </Field>\n          <InputControl\n            name=\"forTimeUnit\"\n            render={({ field: { onChange, ref, ...field } }) => (\n              <Select\n                {...field}\n                options={timeOptions}\n                onChange={(value) => onChange(value?.value)}\n                width={15}\n                className={styles.timeUnit}\n              />\n            )}\n            control={control}\n          />\n        </div>\n      </Field>\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  timeUnit: css`\n    margin-left: ${theme.spacing.xs};\n  `,\n});\n"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAGA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,YAAvB,EAAqCC,MAArC,EAA6CC,SAA7C,QAA8D,aAA9D;AAEA,SAASC,YAAT,QAA6C,uBAA7C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;;AAEA,OAAO,MAAMC,uBAA2B,GAAG,MAAM;EAAA;;EAC/C,MAAMC,MAAM,GAAGN,SAAS,CAACO,SAAD,CAAxB;EACA,MAAM;IACJC,QADI;IAEJC,OAFI;IAGJC,KAHI;IAIJC,SAAS,EAAE;MAAEC;IAAF;EAJP,IAKFjB,cAAc,EALlB;EAOA,MAAMkB,IAAI,GAAGH,KAAK,CAAC,MAAD,CAAlB,CAT+C,CAW/C;;EACA,IAAIG,IAAI,KAAKZ,YAAY,CAACa,cAA1B,EAA0C;IACxC,OAAO,IAAP;EACD;;EAED,oBACE,MAAC,iBAAD;IAAmB,MAAM,EAAE,CAA3B;IAA8B,KAAK,EAAC,2BAApC;IAAA,wBACE,KAAC,KAAD;MAAO,KAAK,EAAC,KAAb;MAAmB,WAAW,EAAC,oEAA/B;MAAA,uBACE;QAAK,SAAS,EAAER,MAAM,CAACS,OAAvB;QAAA,wBACE,KAAC,KAAD;UAAO,OAAO,EAAE,CAAC,qBAACH,MAAM,CAACI,OAAR,4CAAC,gBAAgBC,OAAjB,CAAjB;UAA2C,KAAK,sBAAEL,MAAM,CAACI,OAAT,qDAAE,iBAAgBC,OAAlE;UAA2E,SAAS,EAAEX,MAAM,CAACY,WAA7F;UAAA,uBACE,KAAC,KAAD,oBACMV,QAAQ,CAAC,SAAD,EAAY;YAAEW,OAAO,EAAE;cAAEC,KAAK,EAAE,OAAT;cAAkBH,OAAO,EAAE;YAA3B;UAAX,CAAZ,CADd;YAEE,KAAK,EAAE;UAFT;QADF,EADF,eAOE,KAAC,YAAD;UACE,IAAI,EAAC,aADP;UAEE,MAAM,EAAE;YAAA,IAAC;cAAEI,KAAK,EAAE;gBAAEC;cAAF;YAAT,CAAD;YAAA,IAA8BD,KAA9B,sCAAGA,KAAH;;YAAA,oBACN,KAAC,MAAD,oBACMA,KADN;cAEE,OAAO,EAAEnB,WAFX;cAGE,QAAQ,EAAGkB,KAAD,IAAWE,QAAQ,CAACF,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEA,KAAR,CAH/B;cAIE,KAAK,EAAE,EAJT;cAKE,SAAS,EAAEd,MAAM,CAACiB;YALpB,GADM;UAAA,CAFV;UAWE,OAAO,EAAEd;QAXX,EAPF;MAAA;IADF,EADF,+CAwBE,KAAC,WAAD,KAxBF;EAAA,EADF;AA4BD,CA5CM;;AA8CP,MAAMF,SAAS,GAAIiB,KAAD,KAA0B;EAC1CN,WAAW,EAAEzB,GAAI;AACnB;AACA,GAH4C;EAI1CsB,OAAO,EAAEtB,GAAI;AACf;AACA;AACA;AACA;AACA,GAT4C;EAU1C8B,QAAQ,EAAE9B,GAAI;AAChB,mBAAmB+B,KAAK,CAACC,OAAN,CAAcC,EAAG;AACpC;AAZ4C,CAA1B,CAAlB"},"metadata":{},"sourceType":"module"}