{"ast":null,"code":"import React from 'react';\nimport { PluginState } from '@grafana/data';\nimport { Badge } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const PluginStateInfo = props => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(Badge, {\n    color: display.color,\n    title: display.tooltip,\n    text: display.text,\n    icon: display.icon\n  });\n};\n\nfunction getFeatureStateInfo(state) {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`\n      };\n\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`\n      };\n\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`\n      };\n\n    default:\n      return null;\n  }\n}","map":{"version":3,"names":["React","PluginState","Badge","PluginStateInfo","props","display","getFeatureStateInfo","state","color","tooltip","text","icon","deprecated","alpha","beta"],"sources":["/home/soula/grafana/public/app/features/plugins/components/PluginStateInfo.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { Badge, BadgeProps } from '@grafana/ui';\n\ninterface Props {\n  state?: PluginState;\n}\n\nexport const PluginStateInfo: FC<Props> = (props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return <Badge color={display.color} title={display.tooltip} text={display.text} icon={display.icon} />;\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,KAAT,QAAkC,aAAlC;;AAMA,OAAO,MAAMC,eAA0B,GAAIC,KAAD,IAAW;EACnD,MAAMC,OAAO,GAAGC,mBAAmB,CAACF,KAAK,CAACG,KAAP,CAAnC;;EAEA,IAAI,CAACF,OAAL,EAAc;IACZ,OAAO,IAAP;EACD;;EAED,oBAAO,KAAC,KAAD;IAAO,KAAK,EAAEA,OAAO,CAACG,KAAtB;IAA6B,KAAK,EAAEH,OAAO,CAACI,OAA5C;IAAqD,IAAI,EAAEJ,OAAO,CAACK,IAAnE;IAAyE,IAAI,EAAEL,OAAO,CAACM;EAAvF,EAAP;AACD,CARM;;AAUP,SAASL,mBAAT,CAA6BC,KAA7B,EAAqE;EACnE,QAAQA,KAAR;IACE,KAAKN,WAAW,CAACW,UAAjB;MACE,OAAO;QACLF,IAAI,EAAE,YADD;QAELF,KAAK,EAAE,KAFF;QAGLC,OAAO,EAAG;MAHL,CAAP;;IAKF,KAAKR,WAAW,CAACY,KAAjB;MACE,OAAO;QACLH,IAAI,EAAE,OADD;QAELF,KAAK,EAAE,MAFF;QAGLC,OAAO,EAAG;MAHL,CAAP;;IAKF,KAAKR,WAAW,CAACa,IAAjB;MACE,OAAO;QACLJ,IAAI,EAAE,MADD;QAELF,KAAK,EAAE,MAFF;QAGLC,OAAO,EAAG;MAHL,CAAP;;IAKF;MACE,OAAO,IAAP;EApBJ;AAsBD"},"metadata":{},"sourceType":"module"}