{"ast":null,"code":"import TracePageSearchBar from '@jaegertracing/jaeger-ui-components/src/TracePageHeader/TracePageSearchBar';\nimport { TopOfViewRefType } from '@jaegertracing/jaeger-ui-components/src/TraceTimelineViewer/VirtualizedTraceView';\nimport React, { useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Collapse } from '@grafana/ui';\nimport { TraceView } from './TraceView';\nimport { useSearch } from './useSearch';\nimport { transformDataFrames } from './utils/transform';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function TraceViewContainer(props) {\n  // At this point we only show single trace\n  const frame = props.dataFrames[0];\n  const {\n    dataFrames,\n    splitOpenFn,\n    exploreId,\n    scrollElement,\n    topOfViewRef,\n    queryResponse\n  } = props;\n  const traceProp = useMemo(() => transformDataFrames(frame), [frame]);\n  const {\n    search,\n    setSearch,\n    spanFindMatches\n  } = useSearch(traceProp === null || traceProp === void 0 ? void 0 : traceProp.spans);\n  const [focusedSpanIdForSearch, setFocusedSpanIdForSearch] = useState('');\n  const [searchBarSuffix, setSearchBarSuffix] = useState('');\n  const datasource = useSelector(state => {\n    var _state$explore$dataso, _state$explore;\n\n    return (_state$explore$dataso = (_state$explore = state.explore[props.exploreId]) === null || _state$explore === void 0 ? void 0 : _state$explore.datasourceInstance) !== null && _state$explore$dataso !== void 0 ? _state$explore$dataso : undefined;\n  });\n\n  if (!traceProp) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(TracePageSearchBar, {\n      navigable: true,\n      searchValue: search,\n      setSearch: setSearch,\n      spanFindMatches: spanFindMatches,\n      searchBarSuffix: searchBarSuffix,\n      setSearchBarSuffix: setSearchBarSuffix,\n      focusedSpanIdForSearch: focusedSpanIdForSearch,\n      setFocusedSpanIdForSearch: setFocusedSpanIdForSearch\n    }), /*#__PURE__*/_jsx(Collapse, {\n      label: \"Trace View\",\n      isOpen: true,\n      children: /*#__PURE__*/_jsx(TraceView, {\n        exploreId: exploreId,\n        dataFrames: dataFrames,\n        splitOpenFn: splitOpenFn,\n        scrollElement: scrollElement,\n        traceProp: traceProp,\n        spanFindMatches: spanFindMatches,\n        search: search,\n        focusedSpanIdForSearch: focusedSpanIdForSearch,\n        queryResponse: queryResponse,\n        datasource: datasource,\n        topOfViewRef: topOfViewRef,\n        topOfViewRefType: TopOfViewRefType.Explore\n      })\n    })]\n  });\n}","map":{"version":3,"names":["TracePageSearchBar","TopOfViewRefType","React","useMemo","useState","useSelector","Collapse","TraceView","useSearch","transformDataFrames","TraceViewContainer","props","frame","dataFrames","splitOpenFn","exploreId","scrollElement","topOfViewRef","queryResponse","traceProp","search","setSearch","spanFindMatches","spans","focusedSpanIdForSearch","setFocusedSpanIdForSearch","searchBarSuffix","setSearchBarSuffix","datasource","state","explore","datasourceInstance","undefined","Explore"],"sources":["/home/soula/grafana/public/app/features/explore/TraceView/TraceViewContainer.tsx"],"sourcesContent":["import TracePageSearchBar from '@jaegertracing/jaeger-ui-components/src/TracePageHeader/TracePageSearchBar';\nimport { TopOfViewRefType } from '@jaegertracing/jaeger-ui-components/src/TraceTimelineViewer/VirtualizedTraceView';\nimport React, { RefObject, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { DataFrame, SplitOpen, PanelData } from '@grafana/data';\nimport { Collapse } from '@grafana/ui';\nimport { StoreState } from 'app/types';\nimport { ExploreId } from 'app/types/explore';\n\nimport { TraceView } from './TraceView';\nimport { useSearch } from './useSearch';\nimport { transformDataFrames } from './utils/transform';\ninterface Props {\n  dataFrames: DataFrame[];\n  splitOpenFn: SplitOpen;\n  exploreId: ExploreId;\n  scrollElement?: Element;\n  queryResponse: PanelData;\n  topOfViewRef: RefObject<HTMLDivElement>;\n}\nexport function TraceViewContainer(props: Props) {\n  // At this point we only show single trace\n  const frame = props.dataFrames[0];\n  const { dataFrames, splitOpenFn, exploreId, scrollElement, topOfViewRef, queryResponse } = props;\n  const traceProp = useMemo(() => transformDataFrames(frame), [frame]);\n  const { search, setSearch, spanFindMatches } = useSearch(traceProp?.spans);\n  const [focusedSpanIdForSearch, setFocusedSpanIdForSearch] = useState('');\n  const [searchBarSuffix, setSearchBarSuffix] = useState('');\n  const datasource = useSelector(\n    (state: StoreState) => state.explore[props.exploreId!]?.datasourceInstance ?? undefined\n  );\n\n  if (!traceProp) {\n    return null;\n  }\n\n  return (\n    <>\n      <TracePageSearchBar\n        navigable={true}\n        searchValue={search}\n        setSearch={setSearch}\n        spanFindMatches={spanFindMatches}\n        searchBarSuffix={searchBarSuffix}\n        setSearchBarSuffix={setSearchBarSuffix}\n        focusedSpanIdForSearch={focusedSpanIdForSearch}\n        setFocusedSpanIdForSearch={setFocusedSpanIdForSearch}\n      />\n\n      <Collapse label=\"Trace View\" isOpen>\n        <TraceView\n          exploreId={exploreId}\n          dataFrames={dataFrames}\n          splitOpenFn={splitOpenFn}\n          scrollElement={scrollElement}\n          traceProp={traceProp}\n          spanFindMatches={spanFindMatches}\n          search={search}\n          focusedSpanIdForSearch={focusedSpanIdForSearch}\n          queryResponse={queryResponse}\n          datasource={datasource}\n          topOfViewRef={topOfViewRef}\n          topOfViewRefType={TopOfViewRefType.Explore}\n        />\n      </Collapse>\n    </>\n  );\n}\n"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,4EAA/B;AACA,SAASC,gBAAT,QAAiC,kFAAjC;AACA,OAAOC,KAAP,IAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,SAASC,QAAT,QAAyB,aAAzB;AAIA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,mBAAT,QAAoC,mBAApC;;;;AASA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAA0C;EAC/C;EACA,MAAMC,KAAK,GAAGD,KAAK,CAACE,UAAN,CAAiB,CAAjB,CAAd;EACA,MAAM;IAAEA,UAAF;IAAcC,WAAd;IAA2BC,SAA3B;IAAsCC,aAAtC;IAAqDC,YAArD;IAAmEC;EAAnE,IAAqFP,KAA3F;EACA,MAAMQ,SAAS,GAAGhB,OAAO,CAAC,MAAMM,mBAAmB,CAACG,KAAD,CAA1B,EAAmC,CAACA,KAAD,CAAnC,CAAzB;EACA,MAAM;IAAEQ,MAAF;IAAUC,SAAV;IAAqBC;EAArB,IAAyCd,SAAS,CAACW,SAAD,aAACA,SAAD,uBAACA,SAAS,CAAEI,KAAZ,CAAxD;EACA,MAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDrB,QAAQ,CAAC,EAAD,CAApE;EACA,MAAM,CAACsB,eAAD,EAAkBC,kBAAlB,IAAwCvB,QAAQ,CAAC,EAAD,CAAtD;EACA,MAAMwB,UAAU,GAAGvB,WAAW,CAC3BwB,KAAD;IAAA;;IAAA,kDAAuBA,KAAK,CAACC,OAAN,CAAcnB,KAAK,CAACI,SAApB,CAAvB,mDAAuB,eAAiCgB,kBAAxD,yEAA8EC,SAA9E;EAAA,CAD4B,CAA9B;;EAIA,IAAI,CAACb,SAAL,EAAgB;IACd,OAAO,IAAP;EACD;;EAED,oBACE;IAAA,wBACE,KAAC,kBAAD;MACE,SAAS,EAAE,IADb;MAEE,WAAW,EAAEC,MAFf;MAGE,SAAS,EAAEC,SAHb;MAIE,eAAe,EAAEC,eAJnB;MAKE,eAAe,EAAEI,eALnB;MAME,kBAAkB,EAAEC,kBANtB;MAOE,sBAAsB,EAAEH,sBAP1B;MAQE,yBAAyB,EAAEC;IAR7B,EADF,eAYE,KAAC,QAAD;MAAU,KAAK,EAAC,YAAhB;MAA6B,MAAM,MAAnC;MAAA,uBACE,KAAC,SAAD;QACE,SAAS,EAAEV,SADb;QAEE,UAAU,EAAEF,UAFd;QAGE,WAAW,EAAEC,WAHf;QAIE,aAAa,EAAEE,aAJjB;QAKE,SAAS,EAAEG,SALb;QAME,eAAe,EAAEG,eANnB;QAOE,MAAM,EAAEF,MAPV;QAQE,sBAAsB,EAAEI,sBAR1B;QASE,aAAa,EAAEN,aATjB;QAUE,UAAU,EAAEU,UAVd;QAWE,YAAY,EAAEX,YAXhB;QAYE,gBAAgB,EAAEhB,gBAAgB,CAACgC;MAZrC;IADF,EAZF;EAAA,EADF;AA+BD"},"metadata":{},"sourceType":"module"}