{"ast":null,"code":"var _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Subscription } from 'rxjs';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { isFetchError, locationService } from '@grafana/runtime';\nimport { HorizontalGroup, InlineSwitch, ModalsController, PageToolbar, RadioButtonGroup, stylesFactory, ToolbarButton, withTheme2 } from '@grafana/ui';\nimport { SplitPaneWrapper } from 'app/core/components/SplitPaneWrapper/SplitPaneWrapper';\nimport { appEvents } from 'app/core/core';\nimport { SubMenuItems } from 'app/features/dashboard/components/SubMenu/SubMenuItems';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { PanelOptionsChangedEvent, ShowModalReactEvent } from 'app/types/events';\nimport { notifyApp } from '../../../../core/actions';\nimport { UnlinkModal } from '../../../library-panels/components/UnlinkModal/UnlinkModal';\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\nimport { getLibraryPanelConnectedDashboards } from '../../../library-panels/state/api';\nimport { createPanelLibraryErrorNotification, createPanelLibrarySuccessNotification, saveAndRefreshLibraryPanel } from '../../../library-panels/utils';\nimport { getVariablesByKey } from '../../../variables/state/selectors';\nimport { DashboardPanel } from '../../dashgrid/DashboardPanel';\nimport { DashNavTimeControls } from '../DashNav/DashNavTimeControls';\nimport { SaveDashboardDrawer } from '../SaveDashboard/SaveDashboardDrawer';\nimport { OptionsPane } from './OptionsPane';\nimport { PanelEditorTableView } from './PanelEditorTableView';\nimport { PanelEditorTabs } from './PanelEditorTabs';\nimport { VisualizationButton } from './VisualizationButton';\nimport { discardPanelChanges, initPanelEditor, updatePanelEditorUIState } from './state/actions';\nimport { toggleTableView } from './state/reducers';\nimport { getPanelEditorTabs } from './state/selectors';\nimport { displayModes } from './types';\nimport { calculatePanelSize } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst mapStateToProps = (state, ownProps) => {\n  const panel = state.panelEditor.getPanel();\n  const panelState = getPanelStateForModel(state, panel);\n  return {\n    panel,\n    plugin: panelState === null || panelState === void 0 ? void 0 : panelState.plugin,\n    instanceState: panelState === null || panelState === void 0 ? void 0 : panelState.instanceState,\n    initDone: state.panelEditor.initDone,\n    uiState: state.panelEditor.ui,\n    tableViewEnabled: state.panelEditor.tableViewEnabled,\n    variables: getVariablesByKey(ownProps.dashboard.uid, state)\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelEditor,\n  discardPanelChanges,\n  updatePanelEditorUIState,\n  updateTimeZoneForSession,\n  toggleTableView,\n  notifyApp\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport class PanelEditorUnconnected extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"eventSubs\", void 0);\n\n    _defineProperty(this, \"state\", {\n      showSaveLibraryPanelModal: false\n    });\n\n    _defineProperty(this, \"triggerForceUpdate\", () => {\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"onBack\", () => {\n      locationService.partial({\n        editPanel: null,\n        tab: null,\n        showCategory: null\n      });\n    });\n\n    _defineProperty(this, \"onDiscard\", () => {\n      this.props.discardPanelChanges();\n      this.onBack();\n    });\n\n    _defineProperty(this, \"onOpenDashboardSettings\", () => {\n      locationService.partial({\n        editview: 'settings'\n      });\n    });\n\n    _defineProperty(this, \"onSaveDashboard\", () => {\n      appEvents.publish(new ShowModalReactEvent({\n        component: SaveDashboardDrawer,\n        props: {\n          dashboard: this.props.dashboard\n        }\n      }));\n    });\n\n    _defineProperty(this, \"onSaveLibraryPanel\", async () => {\n      if (!isPanelModelLibraryPanel(this.props.panel)) {\n        // New library panel, no need to display modal\n        return;\n      }\n\n      const connectedDashboards = await getLibraryPanelConnectedDashboards(this.props.panel.libraryPanel.uid);\n\n      if (connectedDashboards.length === 0 || connectedDashboards.length === 1 && connectedDashboards.includes(this.props.dashboard.id)) {\n        try {\n          await saveAndRefreshLibraryPanel(this.props.panel, this.props.dashboard.meta.folderId);\n          this.props.notifyApp(createPanelLibrarySuccessNotification('Library panel saved'));\n        } catch (err) {\n          if (isFetchError(err)) {\n            this.props.notifyApp(createPanelLibraryErrorNotification(`Error saving library panel: \"${err.statusText}\"`));\n          }\n        }\n\n        return;\n      }\n\n      this.setState({\n        showSaveLibraryPanelModal: true\n      });\n    });\n\n    _defineProperty(this, \"onChangeTab\", tab => {\n      locationService.partial({\n        tab: tab.id\n      });\n    });\n\n    _defineProperty(this, \"onFieldConfigChange\", config => {\n      // we do not need to trigger force update here as the function call below\n      // fires PanelOptionsChangedEvent which we subscribe to above\n      this.props.panel.updateFieldConfig(Object.assign({}, config));\n    });\n\n    _defineProperty(this, \"onPanelOptionsChanged\", options => {\n      // we do not need to trigger force update here as the function call below\n      // fires PanelOptionsChangedEvent which we subscribe to above\n      this.props.panel.updateOptions(options);\n    });\n\n    _defineProperty(this, \"onPanelConfigChanged\", (configKey, value) => {\n      this.props.panel.setProperty(configKey, value);\n      this.props.panel.render();\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"onDisplayModeChange\", mode => {\n      const {\n        updatePanelEditorUIState\n      } = this.props;\n\n      if (this.props.tableViewEnabled) {\n        this.props.toggleTableView();\n      }\n\n      updatePanelEditorUIState({\n        mode: mode\n      });\n    });\n\n    _defineProperty(this, \"onToggleTableView\", () => {\n      this.props.toggleTableView();\n    });\n\n    _defineProperty(this, \"onTogglePanelOptions\", () => {\n      const {\n        uiState,\n        updatePanelEditorUIState\n      } = this.props;\n      updatePanelEditorUIState({\n        isPanelOptionsVisible: !uiState.isPanelOptionsVisible\n      });\n    });\n\n    _defineProperty(this, \"onGoBackToDashboard\", () => {\n      locationService.partial({\n        editPanel: null,\n        tab: null,\n        showCategory: null\n      });\n    });\n\n    _defineProperty(this, \"onConfirmAndDismissLibarayPanelModel\", () => {\n      this.setState({\n        showSaveLibraryPanelModal: false\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.props.initPanelEditor(this.props.sourcePanel, this.props.dashboard);\n  }\n\n  componentDidUpdate() {\n    const {\n      panel,\n      initDone\n    } = this.props;\n\n    if (initDone && !this.eventSubs) {\n      this.eventSubs = new Subscription();\n      this.eventSubs.add(panel.events.subscribe(PanelOptionsChangedEvent, this.triggerForceUpdate));\n    }\n  }\n\n  componentWillUnmount() {\n    var _this$eventSubs;\n\n    // redux action exitPanelEditor is called on location change from DashboardPrompt\n    (_this$eventSubs = this.eventSubs) === null || _this$eventSubs === void 0 ? void 0 : _this$eventSubs.unsubscribe();\n  }\n\n  renderPanel(styles, isOnlyPanel) {\n    const {\n      dashboard,\n      panel,\n      uiState,\n      tableViewEnabled,\n      theme\n    } = this.props;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.mainPaneWrapper,\n      children: [this.renderPanelToolbar(styles), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.panelWrapper,\n        children: /*#__PURE__*/_jsx(AutoSizer, {\n          children: ({\n            width,\n            height\n          }) => {\n            if (width < 3 || height < 3) {\n              return null;\n            } // If no tabs limit height so panel does not extend to edge\n\n\n            if (isOnlyPanel) {\n              height -= theme.spacing.gridSize * 2;\n            }\n\n            if (tableViewEnabled) {\n              return /*#__PURE__*/_jsx(PanelEditorTableView, {\n                width: width,\n                height: height,\n                panel: panel,\n                dashboard: dashboard\n              });\n            }\n\n            const panelSize = calculatePanelSize(uiState.mode, width, height, panel);\n            return /*#__PURE__*/_jsx(\"div\", {\n              className: styles.centeringContainer,\n              style: {\n                width,\n                height\n              },\n              children: /*#__PURE__*/_jsx(\"div\", {\n                style: panelSize,\n                \"data-panelid\": panel.id,\n                children: /*#__PURE__*/_jsx(DashboardPanel, {\n                  stateKey: panel.key,\n                  dashboard: dashboard,\n                  panel: panel,\n                  isEditing: true,\n                  isViewing: false,\n                  lazy: false,\n                  width: panelSize.width,\n                  height: panelSize.height\n                }, panel.key)\n              })\n            });\n          }\n        })\n      })]\n    }, \"panel\");\n  }\n\n  renderPanelAndEditor(styles) {\n    const {\n      panel,\n      dashboard,\n      plugin,\n      tab\n    } = this.props;\n    const tabs = getPanelEditorTabs(tab, plugin);\n    const isOnlyPanel = tabs.length === 0;\n    const panelPane = this.renderPanel(styles, isOnlyPanel);\n\n    if (tabs.length === 0) {\n      return panelPane;\n    }\n\n    return [panelPane, /*#__PURE__*/_jsx(\"div\", {\n      className: styles.tabsWrapper,\n      \"aria-label\": selectors.components.PanelEditor.DataPane.content,\n      children: /*#__PURE__*/_jsx(PanelEditorTabs, {\n        panel: panel,\n        dashboard: dashboard,\n        tabs: tabs,\n        onChangeTab: this.onChangeTab\n      }, panel.key)\n    }, \"panel-editor-tabs\")];\n  }\n\n  renderTemplateVariables(styles) {\n    const {\n      variables\n    } = this.props;\n\n    if (!variables.length) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: styles.variablesWrapper,\n      children: /*#__PURE__*/_jsx(SubMenuItems, {\n        variables: variables\n      })\n    });\n  }\n\n  renderPanelToolbar(styles) {\n    const {\n      dashboard,\n      uiState,\n      variables,\n      updateTimeZoneForSession,\n      panel,\n      tableViewEnabled\n    } = this.props;\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: styles.panelToolbar,\n      children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n        justify: variables.length > 0 ? 'space-between' : 'flex-end',\n        align: \"flex-start\",\n        children: [this.renderTemplateVariables(styles), /*#__PURE__*/_jsxs(HorizontalGroup, {\n          children: [/*#__PURE__*/_jsx(InlineSwitch, {\n            label: \"Table view\",\n            showLabel: true,\n            id: \"table-view\",\n            value: tableViewEnabled,\n            onClick: this.onToggleTableView,\n            \"aria-label\": selectors.components.PanelEditor.toggleTableView\n          }), /*#__PURE__*/_jsx(RadioButtonGroup, {\n            value: uiState.mode,\n            options: displayModes,\n            onChange: this.onDisplayModeChange\n          }), /*#__PURE__*/_jsx(DashNavTimeControls, {\n            dashboard: dashboard,\n            onChangeTimeZone: updateTimeZoneForSession\n          }), !uiState.isPanelOptionsVisible && /*#__PURE__*/_jsx(VisualizationButton, {\n            panel: panel\n          })]\n        })]\n      })\n    });\n  }\n\n  renderEditorActions() {\n    let editorActions = [/*#__PURE__*/_jsx(ToolbarButton, {\n      icon: \"cog\",\n      onClick: this.onOpenDashboardSettings,\n      title: \"Open dashboard settings\"\n    }, \"settings\"), /*#__PURE__*/_jsx(ToolbarButton, {\n      onClick: this.onDiscard,\n      title: \"Undo all changes\",\n      children: \"Discard\"\n    }, \"discard\"), this.props.panel.libraryPanel ? /*#__PURE__*/_jsx(ToolbarButton, {\n      onClick: this.onSaveLibraryPanel,\n      variant: \"primary\",\n      title: \"Apply changes and save library panel\",\n      children: \"Save library panel\"\n    }, \"save-panel\") : /*#__PURE__*/_jsx(ToolbarButton, {\n      onClick: this.onSaveDashboard,\n      title: \"Apply changes and save dashboard\",\n      children: \"Save\"\n    }, \"save\"), /*#__PURE__*/_jsx(ToolbarButton, {\n      onClick: this.onBack,\n      variant: \"primary\",\n      title: \"Apply changes and go back to dashboard\",\n      \"aria-label\": selectors.components.PanelEditor.applyButton,\n      children: \"Apply\"\n    }, \"apply\")];\n\n    if (this.props.panel.libraryPanel) {\n      editorActions.splice(1, 0, /*#__PURE__*/_jsx(ModalsController, {\n        children: ({\n          showModal,\n          hideModal\n        }) => {\n          return /*#__PURE__*/_jsx(ToolbarButton, {\n            onClick: () => {\n              showModal(UnlinkModal, {\n                onConfirm: () => {\n                  delete this.props.panel.libraryPanel;\n                  this.props.panel.render();\n                  this.forceUpdate();\n                },\n                onDismiss: hideModal,\n                isOpen: true\n              });\n            },\n            title: \"Disconnects this panel from the library panel so that you can edit it regularly.\",\n            children: \"Unlink\"\n          }, \"unlink\");\n        }\n      }, \"unlink-controller\")); // Remove \"Apply\" button\n\n      editorActions.pop();\n    }\n\n    return editorActions;\n  }\n\n  renderOptionsPane() {\n    const {\n      plugin,\n      dashboard,\n      panel,\n      instanceState\n    } = this.props;\n\n    if (!plugin) {\n      return _div || (_div = /*#__PURE__*/_jsx(\"div\", {}));\n    }\n\n    return /*#__PURE__*/_jsx(OptionsPane, {\n      plugin: plugin,\n      dashboard: dashboard,\n      panel: panel,\n      instanceState: instanceState,\n      onFieldConfigsChange: this.onFieldConfigChange,\n      onPanelOptionsChanged: this.onPanelOptionsChanged,\n      onPanelConfigChange: this.onPanelConfigChanged\n    });\n  }\n\n  render() {\n    const {\n      dashboard,\n      initDone,\n      updatePanelEditorUIState,\n      uiState,\n      theme\n    } = this.props;\n    const styles = getStyles(theme, this.props);\n\n    if (!initDone) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.wrapper,\n      \"aria-label\": selectors.components.PanelEditor.General.content,\n      children: [/*#__PURE__*/_jsx(PageToolbar, {\n        title: `${dashboard.title} / Edit Panel`,\n        onGoBack: this.onGoBackToDashboard,\n        children: this.renderEditorActions()\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.verticalSplitPanesWrapper,\n        children: /*#__PURE__*/_jsx(SplitPaneWrapper, {\n          leftPaneComponents: this.renderPanelAndEditor(styles),\n          rightPaneComponents: this.renderOptionsPane(),\n          uiState: uiState,\n          updateUiState: updatePanelEditorUIState,\n          rightPaneVisible: uiState.isPanelOptionsVisible\n        })\n      }), this.state.showSaveLibraryPanelModal && /*#__PURE__*/_jsx(SaveLibraryPanelModal, {\n        panel: this.props.panel,\n        folderId: this.props.dashboard.meta.folderId,\n        onConfirm: this.onConfirmAndDismissLibarayPanelModel,\n        onDiscard: this.onDiscard,\n        onDismiss: this.onConfirmAndDismissLibarayPanelModel\n      })]\n    });\n  }\n\n}\nexport const PanelEditor = withTheme2(connector(PanelEditorUnconnected));\n/*\n * Styles\n */\n\nexport const getStyles = stylesFactory((theme, props) => {\n  const {\n    uiState\n  } = props;\n  const paneSpacing = theme.spacing(2);\n  return {\n    wrapper: css`\n      width: 100%;\n      height: 100%;\n      position: fixed;\n      z-index: ${theme.zIndex.sidemenu};\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: ${theme.colors.background.canvas};\n      display: flex;\n      flex-direction: column;\n    `,\n    verticalSplitPanesWrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      position: relative;\n    `,\n    mainPaneWrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      padding-right: ${uiState.isPanelOptionsVisible ? 0 : paneSpacing};\n    `,\n    variablesWrapper: css`\n      label: variablesWrapper;\n      display: flex;\n      flex-grow: 1;\n      flex-wrap: wrap;\n      gap: ${theme.spacing(1, 2)};\n    `,\n    panelWrapper: css`\n      flex: 1 1 0;\n      min-height: 0;\n      width: 100%;\n      padding-left: ${paneSpacing};\n    `,\n    tabsWrapper: css`\n      height: 100%;\n      width: 100%;\n    `,\n    panelToolbar: css`\n      display: flex;\n      padding: 0 0 ${paneSpacing} ${paneSpacing};\n      justify-content: space-between;\n      flex-wrap: wrap;\n    `,\n    toolbarLeft: css`\n      padding-left: ${theme.spacing(1)};\n    `,\n    centeringContainer: css`\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      position: relative;\n      flex-direction: column;\n    `\n  };\n});","map":{"version":3,"names":["css","React","PureComponent","connect","AutoSizer","Subscription","selectors","isFetchError","locationService","HorizontalGroup","InlineSwitch","ModalsController","PageToolbar","RadioButtonGroup","stylesFactory","ToolbarButton","withTheme2","SplitPaneWrapper","appEvents","SubMenuItems","SaveLibraryPanelModal","getPanelStateForModel","updateTimeZoneForSession","PanelOptionsChangedEvent","ShowModalReactEvent","notifyApp","UnlinkModal","isPanelModelLibraryPanel","getLibraryPanelConnectedDashboards","createPanelLibraryErrorNotification","createPanelLibrarySuccessNotification","saveAndRefreshLibraryPanel","getVariablesByKey","DashboardPanel","DashNavTimeControls","SaveDashboardDrawer","OptionsPane","PanelEditorTableView","PanelEditorTabs","VisualizationButton","discardPanelChanges","initPanelEditor","updatePanelEditorUIState","toggleTableView","getPanelEditorTabs","displayModes","calculatePanelSize","mapStateToProps","state","ownProps","panel","panelEditor","getPanel","panelState","plugin","instanceState","initDone","uiState","ui","tableViewEnabled","variables","dashboard","uid","mapDispatchToProps","connector","PanelEditorUnconnected","showSaveLibraryPanelModal","forceUpdate","partial","editPanel","tab","showCategory","props","onBack","editview","publish","component","connectedDashboards","libraryPanel","length","includes","id","meta","folderId","err","statusText","setState","config","updateFieldConfig","options","updateOptions","configKey","value","setProperty","render","mode","isPanelOptionsVisible","componentDidMount","sourcePanel","componentDidUpdate","eventSubs","add","events","subscribe","triggerForceUpdate","componentWillUnmount","unsubscribe","renderPanel","styles","isOnlyPanel","theme","mainPaneWrapper","renderPanelToolbar","panelWrapper","width","height","spacing","gridSize","panelSize","centeringContainer","key","renderPanelAndEditor","tabs","panelPane","tabsWrapper","components","PanelEditor","DataPane","content","onChangeTab","renderTemplateVariables","variablesWrapper","panelToolbar","onToggleTableView","onDisplayModeChange","renderEditorActions","editorActions","onOpenDashboardSettings","onDiscard","onSaveLibraryPanel","onSaveDashboard","applyButton","splice","showModal","hideModal","onConfirm","onDismiss","isOpen","pop","renderOptionsPane","onFieldConfigChange","onPanelOptionsChanged","onPanelConfigChanged","getStyles","wrapper","General","title","onGoBackToDashboard","verticalSplitPanesWrapper","onConfirmAndDismissLibarayPanelModel","paneSpacing","zIndex","sidemenu","colors","background","canvas","toolbarLeft"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/PanelEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Subscription } from 'rxjs';\n\nimport { FieldConfigSource, GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { isFetchError, locationService } from '@grafana/runtime';\nimport {\n  HorizontalGroup,\n  InlineSwitch,\n  ModalsController,\n  PageToolbar,\n  RadioButtonGroup,\n  stylesFactory,\n  Themeable2,\n  ToolbarButton,\n  withTheme2,\n} from '@grafana/ui';\nimport { SplitPaneWrapper } from 'app/core/components/SplitPaneWrapper/SplitPaneWrapper';\nimport { appEvents } from 'app/core/core';\nimport { SubMenuItems } from 'app/features/dashboard/components/SubMenu/SubMenuItems';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { StoreState } from 'app/types';\nimport { PanelOptionsChangedEvent, ShowModalReactEvent } from 'app/types/events';\n\nimport { notifyApp } from '../../../../core/actions';\nimport { UnlinkModal } from '../../../library-panels/components/UnlinkModal/UnlinkModal';\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\nimport { getLibraryPanelConnectedDashboards } from '../../../library-panels/state/api';\nimport {\n  createPanelLibraryErrorNotification,\n  createPanelLibrarySuccessNotification,\n  saveAndRefreshLibraryPanel,\n} from '../../../library-panels/utils';\nimport { getVariablesByKey } from '../../../variables/state/selectors';\nimport { DashboardPanel } from '../../dashgrid/DashboardPanel';\nimport { DashboardModel, PanelModel } from '../../state';\nimport { DashNavTimeControls } from '../DashNav/DashNavTimeControls';\nimport { SaveDashboardDrawer } from '../SaveDashboard/SaveDashboardDrawer';\n\nimport { OptionsPane } from './OptionsPane';\nimport { PanelEditorTableView } from './PanelEditorTableView';\nimport { PanelEditorTabs } from './PanelEditorTabs';\nimport { VisualizationButton } from './VisualizationButton';\nimport { discardPanelChanges, initPanelEditor, updatePanelEditorUIState } from './state/actions';\nimport { toggleTableView } from './state/reducers';\nimport { getPanelEditorTabs } from './state/selectors';\nimport { DisplayMode, displayModes, PanelEditorTab } from './types';\nimport { calculatePanelSize } from './utils';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  sourcePanel: PanelModel;\n  tab?: string;\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: OwnProps) => {\n  const panel = state.panelEditor.getPanel();\n  const panelState = getPanelStateForModel(state, panel);\n\n  return {\n    panel,\n    plugin: panelState?.plugin,\n    instanceState: panelState?.instanceState,\n    initDone: state.panelEditor.initDone,\n    uiState: state.panelEditor.ui,\n    tableViewEnabled: state.panelEditor.tableViewEnabled,\n    variables: getVariablesByKey(ownProps.dashboard.uid, state),\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelEditor,\n  discardPanelChanges,\n  updatePanelEditorUIState,\n  updateTimeZoneForSession,\n  toggleTableView,\n  notifyApp,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & ConnectedProps<typeof connector> & Themeable2;\n\ninterface State {\n  showSaveLibraryPanelModal?: boolean;\n}\n\nexport class PanelEditorUnconnected extends PureComponent<Props> {\n  private eventSubs?: Subscription;\n\n  state: State = {\n    showSaveLibraryPanelModal: false,\n  };\n\n  componentDidMount() {\n    this.props.initPanelEditor(this.props.sourcePanel, this.props.dashboard);\n  }\n\n  componentDidUpdate() {\n    const { panel, initDone } = this.props;\n\n    if (initDone && !this.eventSubs) {\n      this.eventSubs = new Subscription();\n      this.eventSubs.add(panel.events.subscribe(PanelOptionsChangedEvent, this.triggerForceUpdate));\n    }\n  }\n\n  componentWillUnmount() {\n    // redux action exitPanelEditor is called on location change from DashboardPrompt\n    this.eventSubs?.unsubscribe();\n  }\n\n  triggerForceUpdate = () => {\n    this.forceUpdate();\n  };\n\n  onBack = () => {\n    locationService.partial({\n      editPanel: null,\n      tab: null,\n      showCategory: null,\n    });\n  };\n\n  onDiscard = () => {\n    this.props.discardPanelChanges();\n    this.onBack();\n  };\n\n  onOpenDashboardSettings = () => {\n    locationService.partial({\n      editview: 'settings',\n    });\n  };\n\n  onSaveDashboard = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: SaveDashboardDrawer,\n        props: { dashboard: this.props.dashboard },\n      })\n    );\n  };\n\n  onSaveLibraryPanel = async () => {\n    if (!isPanelModelLibraryPanel(this.props.panel)) {\n      // New library panel, no need to display modal\n      return;\n    }\n\n    const connectedDashboards = await getLibraryPanelConnectedDashboards(this.props.panel.libraryPanel.uid);\n    if (\n      connectedDashboards.length === 0 ||\n      (connectedDashboards.length === 1 && connectedDashboards.includes(this.props.dashboard.id))\n    ) {\n      try {\n        await saveAndRefreshLibraryPanel(this.props.panel, this.props.dashboard.meta.folderId!);\n        this.props.notifyApp(createPanelLibrarySuccessNotification('Library panel saved'));\n      } catch (err) {\n        if (isFetchError(err)) {\n          this.props.notifyApp(createPanelLibraryErrorNotification(`Error saving library panel: \"${err.statusText}\"`));\n        }\n      }\n      return;\n    }\n\n    this.setState({ showSaveLibraryPanelModal: true });\n  };\n\n  onChangeTab = (tab: PanelEditorTab) => {\n    locationService.partial({\n      tab: tab.id,\n    });\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateFieldConfig({\n      ...config,\n    });\n  };\n\n  onPanelOptionsChanged = (options: any) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateOptions(options);\n  };\n\n  onPanelConfigChanged = (configKey: keyof PanelModel, value: any) => {\n    this.props.panel.setProperty(configKey, value);\n    this.props.panel.render();\n    this.forceUpdate();\n  };\n\n  onDisplayModeChange = (mode?: DisplayMode) => {\n    const { updatePanelEditorUIState } = this.props;\n    if (this.props.tableViewEnabled) {\n      this.props.toggleTableView();\n    }\n    updatePanelEditorUIState({\n      mode: mode,\n    });\n  };\n\n  onToggleTableView = () => {\n    this.props.toggleTableView();\n  };\n\n  onTogglePanelOptions = () => {\n    const { uiState, updatePanelEditorUIState } = this.props;\n    updatePanelEditorUIState({ isPanelOptionsVisible: !uiState.isPanelOptionsVisible });\n  };\n\n  renderPanel(styles: EditorStyles, isOnlyPanel: boolean) {\n    const { dashboard, panel, uiState, tableViewEnabled, theme } = this.props;\n\n    return (\n      <div className={styles.mainPaneWrapper} key=\"panel\">\n        {this.renderPanelToolbar(styles)}\n        <div className={styles.panelWrapper}>\n          <AutoSizer>\n            {({ width, height }) => {\n              if (width < 3 || height < 3) {\n                return null;\n              }\n\n              // If no tabs limit height so panel does not extend to edge\n              if (isOnlyPanel) {\n                height -= theme.spacing.gridSize * 2;\n              }\n\n              if (tableViewEnabled) {\n                return <PanelEditorTableView width={width} height={height} panel={panel} dashboard={dashboard} />;\n              }\n\n              const panelSize = calculatePanelSize(uiState.mode, width, height, panel);\n\n              return (\n                <div className={styles.centeringContainer} style={{ width, height }}>\n                  <div style={panelSize} data-panelid={panel.id}>\n                    <DashboardPanel\n                      key={panel.key}\n                      stateKey={panel.key}\n                      dashboard={dashboard}\n                      panel={panel}\n                      isEditing={true}\n                      isViewing={false}\n                      lazy={false}\n                      width={panelSize.width}\n                      height={panelSize.height}\n                    />\n                  </div>\n                </div>\n              );\n            }}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n\n  renderPanelAndEditor(styles: EditorStyles) {\n    const { panel, dashboard, plugin, tab } = this.props;\n    const tabs = getPanelEditorTabs(tab, plugin);\n    const isOnlyPanel = tabs.length === 0;\n    const panelPane = this.renderPanel(styles, isOnlyPanel);\n\n    if (tabs.length === 0) {\n      return panelPane;\n    }\n\n    return [\n      panelPane,\n      <div\n        className={styles.tabsWrapper}\n        aria-label={selectors.components.PanelEditor.DataPane.content}\n        key=\"panel-editor-tabs\"\n      >\n        <PanelEditorTabs\n          key={panel.key}\n          panel={panel}\n          dashboard={dashboard}\n          tabs={tabs}\n          onChangeTab={this.onChangeTab}\n        />\n      </div>,\n    ];\n  }\n\n  renderTemplateVariables(styles: EditorStyles) {\n    const { variables } = this.props;\n\n    if (!variables.length) {\n      return null;\n    }\n\n    return (\n      <div className={styles.variablesWrapper}>\n        <SubMenuItems variables={variables} />\n      </div>\n    );\n  }\n\n  renderPanelToolbar(styles: EditorStyles) {\n    const { dashboard, uiState, variables, updateTimeZoneForSession, panel, tableViewEnabled } = this.props;\n\n    return (\n      <div className={styles.panelToolbar}>\n        <HorizontalGroup justify={variables.length > 0 ? 'space-between' : 'flex-end'} align=\"flex-start\">\n          {this.renderTemplateVariables(styles)}\n          <HorizontalGroup>\n            <InlineSwitch\n              label=\"Table view\"\n              showLabel={true}\n              id=\"table-view\"\n              value={tableViewEnabled}\n              onClick={this.onToggleTableView}\n              aria-label={selectors.components.PanelEditor.toggleTableView}\n            />\n            <RadioButtonGroup value={uiState.mode} options={displayModes} onChange={this.onDisplayModeChange} />\n            <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={updateTimeZoneForSession} />\n            {!uiState.isPanelOptionsVisible && <VisualizationButton panel={panel} />}\n          </HorizontalGroup>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  renderEditorActions() {\n    let editorActions = [\n      <ToolbarButton\n        icon=\"cog\"\n        onClick={this.onOpenDashboardSettings}\n        title=\"Open dashboard settings\"\n        key=\"settings\"\n      />,\n      <ToolbarButton onClick={this.onDiscard} title=\"Undo all changes\" key=\"discard\">\n        Discard\n      </ToolbarButton>,\n      this.props.panel.libraryPanel ? (\n        <ToolbarButton\n          onClick={this.onSaveLibraryPanel}\n          variant=\"primary\"\n          title=\"Apply changes and save library panel\"\n          key=\"save-panel\"\n        >\n          Save library panel\n        </ToolbarButton>\n      ) : (\n        <ToolbarButton onClick={this.onSaveDashboard} title=\"Apply changes and save dashboard\" key=\"save\">\n          Save\n        </ToolbarButton>\n      ),\n      <ToolbarButton\n        onClick={this.onBack}\n        variant=\"primary\"\n        title=\"Apply changes and go back to dashboard\"\n        key=\"apply\"\n        aria-label={selectors.components.PanelEditor.applyButton}\n      >\n        Apply\n      </ToolbarButton>,\n    ];\n\n    if (this.props.panel.libraryPanel) {\n      editorActions.splice(\n        1,\n        0,\n        <ModalsController key=\"unlink-controller\">\n          {({ showModal, hideModal }) => {\n            return (\n              <ToolbarButton\n                onClick={() => {\n                  showModal(UnlinkModal, {\n                    onConfirm: () => {\n                      delete this.props.panel.libraryPanel;\n                      this.props.panel.render();\n                      this.forceUpdate();\n                    },\n                    onDismiss: hideModal,\n                    isOpen: true,\n                  });\n                }}\n                title=\"Disconnects this panel from the library panel so that you can edit it regularly.\"\n                key=\"unlink\"\n              >\n                Unlink\n              </ToolbarButton>\n            );\n          }}\n        </ModalsController>\n      );\n\n      // Remove \"Apply\" button\n      editorActions.pop();\n    }\n\n    return editorActions;\n  }\n\n  renderOptionsPane() {\n    const { plugin, dashboard, panel, instanceState } = this.props;\n\n    if (!plugin) {\n      return <div />;\n    }\n\n    return (\n      <OptionsPane\n        plugin={plugin}\n        dashboard={dashboard}\n        panel={panel}\n        instanceState={instanceState}\n        onFieldConfigsChange={this.onFieldConfigChange}\n        onPanelOptionsChanged={this.onPanelOptionsChanged}\n        onPanelConfigChange={this.onPanelConfigChanged}\n      />\n    );\n  }\n\n  onGoBackToDashboard = () => {\n    locationService.partial({ editPanel: null, tab: null, showCategory: null });\n  };\n\n  onConfirmAndDismissLibarayPanelModel = () => {\n    this.setState({ showSaveLibraryPanelModal: false });\n  };\n\n  render() {\n    const { dashboard, initDone, updatePanelEditorUIState, uiState, theme } = this.props;\n    const styles = getStyles(theme, this.props);\n\n    if (!initDone) {\n      return null;\n    }\n\n    return (\n      <div className={styles.wrapper} aria-label={selectors.components.PanelEditor.General.content}>\n        <PageToolbar title={`${dashboard.title} / Edit Panel`} onGoBack={this.onGoBackToDashboard}>\n          {this.renderEditorActions()}\n        </PageToolbar>\n        <div className={styles.verticalSplitPanesWrapper}>\n          <SplitPaneWrapper\n            leftPaneComponents={this.renderPanelAndEditor(styles)}\n            rightPaneComponents={this.renderOptionsPane()}\n            uiState={uiState}\n            updateUiState={updatePanelEditorUIState}\n            rightPaneVisible={uiState.isPanelOptionsVisible}\n          />\n        </div>\n        {this.state.showSaveLibraryPanelModal && (\n          <SaveLibraryPanelModal\n            panel={this.props.panel as PanelModelWithLibraryPanel}\n            folderId={this.props.dashboard.meta.folderId as number}\n            onConfirm={this.onConfirmAndDismissLibarayPanelModel}\n            onDiscard={this.onDiscard}\n            onDismiss={this.onConfirmAndDismissLibarayPanelModel}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport const PanelEditor = withTheme2(connector(PanelEditorUnconnected));\n\n/*\n * Styles\n */\nexport const getStyles = stylesFactory((theme: GrafanaTheme2, props: Props) => {\n  const { uiState } = props;\n  const paneSpacing = theme.spacing(2);\n\n  return {\n    wrapper: css`\n      width: 100%;\n      height: 100%;\n      position: fixed;\n      z-index: ${theme.zIndex.sidemenu};\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      background: ${theme.colors.background.canvas};\n      display: flex;\n      flex-direction: column;\n    `,\n    verticalSplitPanesWrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      position: relative;\n    `,\n    mainPaneWrapper: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      padding-right: ${uiState.isPanelOptionsVisible ? 0 : paneSpacing};\n    `,\n    variablesWrapper: css`\n      label: variablesWrapper;\n      display: flex;\n      flex-grow: 1;\n      flex-wrap: wrap;\n      gap: ${theme.spacing(1, 2)};\n    `,\n    panelWrapper: css`\n      flex: 1 1 0;\n      min-height: 0;\n      width: 100%;\n      padding-left: ${paneSpacing};\n    `,\n    tabsWrapper: css`\n      height: 100%;\n      width: 100%;\n    `,\n    panelToolbar: css`\n      display: flex;\n      padding: 0 0 ${paneSpacing} ${paneSpacing};\n      justify-content: space-between;\n      flex-wrap: wrap;\n    `,\n    toolbarLeft: css`\n      padding-left: ${theme.spacing(1)};\n    `,\n    centeringContainer: css`\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      position: relative;\n      flex-direction: column;\n    `,\n  };\n});\n\ntype EditorStyles = ReturnType<typeof getStyles>;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}