{"ast":null,"code":"import { locationUtil, setWeekStart } from '@grafana/data';\nimport { config, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { keybindingSrv } from 'app/core/services/keybindingSrv';\nimport store from 'app/core/store';\nimport { dashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { toStateKey } from 'app/features/variables/utils';\nimport { DashboardInitPhase, DashboardRoutes } from 'app/types';\nimport { createDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { initVariablesTransaction } from '../../variables/state/actions';\nimport { getIfExistsLastKey } from '../../variables/state/selectors';\nimport { DashboardModel } from './DashboardModel';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\nimport { dashboardInitCompleted, dashboardInitFailed, dashboardInitFetching, dashboardInitServices } from './reducers';\n\nasync function fetchDashboard(args, dispatch, getState) {\n  // When creating new or adding panels to a dashboard from explore we load it from local storage\n  const model = store.getObject(DASHBOARD_FROM_LS_KEY);\n\n  if (model) {\n    removeDashboardToFetchFromLocalStorage();\n    return model;\n  }\n\n  try {\n    switch (args.routeName) {\n      case DashboardRoutes.Home:\n        {\n          // load home dash\n          const dashDTO = await backendSrv.get('/api/dashboards/home'); // if user specified a custom home dashboard redirect to that\n\n          if (dashDTO.redirectUri) {\n            const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n            locationService.replace(newUrl);\n            return null;\n          } // disable some actions on the default home dashboard\n\n\n          dashDTO.meta.canSave = false;\n          dashDTO.meta.canShare = false;\n          dashDTO.meta.canStar = false;\n          return dashDTO;\n        }\n\n      case DashboardRoutes.Public:\n        {\n          return await dashboardLoaderSrv.loadDashboard('public', args.urlSlug, args.accessToken);\n        }\n\n      case DashboardRoutes.Normal:\n        {\n          const dashDTO = await dashboardLoaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n          if (args.fixUrl && dashDTO.meta.url) {\n            // check if the current url is correct (might be old slug)\n            const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n            const currentPath = locationService.getLocation().pathname;\n\n            if (dashboardUrl !== currentPath) {\n              // Spread current location to persist search params used for navigation\n              locationService.replace(Object.assign({}, locationService.getLocation(), {\n                pathname: dashboardUrl\n              }));\n              console.log('not correct url correcting', dashboardUrl, currentPath);\n            }\n          }\n\n          return dashDTO;\n        }\n\n      case DashboardRoutes.New:\n        {\n          return getNewDashboardModelData(args.urlFolderId);\n        }\n\n      default:\n        throw {\n          message: 'Unknown route ' + args.routeName\n        };\n    }\n  } catch (err) {\n    // Ignore cancelled errors\n    if (isFetchError(err) && err.cancelled) {\n      return null;\n    }\n\n    dispatch(dashboardInitFailed({\n      message: 'Failed to fetch dashboard',\n      error: err\n    }));\n    console.error(err);\n    return null;\n  }\n}\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\n\n\nexport function initDashboard(args) {\n  return async (dispatch, getState) => {\n    var _args$urlUid;\n\n    // set fetching state\n    dispatch(dashboardInitFetching()); // fetch dashboard data\n\n    const dashDTO = await fetchDashboard(args, dispatch, getState); // returns null if there was a redirect or error\n\n    if (!dashDTO) {\n      return;\n    } // set initializing state\n\n\n    dispatch(dashboardInitServices()); // create model\n\n    let dashboard;\n\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({\n        message: 'Failed create dashboard model',\n        error: err\n      }));\n      console.error(err);\n      return;\n    } // add missing orgId query param\n\n\n    const storeState = getState();\n    const queryParams = locationService.getSearchObject();\n\n    if (!queryParams.orgId) {\n      // TODO this is currently not possible with the LocationService API\n      locationService.partial({\n        orgId: storeState.user.orgId\n      }, true);\n    } // init services\n\n\n    const timeSrv = getTimeSrv();\n    const dashboardSrv = getDashboardSrv(); // legacy srv state, we need this value updated for built-in annotations\n\n    dashboardSrv.setCurrent(dashboard);\n    timeSrv.init(dashboard);\n    const dashboardUid = toStateKey((_args$urlUid = args.urlUid) !== null && _args$urlUid !== void 0 ? _args$urlUid : dashboard.uid); // template values service needs to initialize completely before the rest of the dashboard can load\n\n    await dispatch(initVariablesTransaction(dashboardUid, dashboard)); // DashboardQueryRunner needs to run after all variables have been resolved so that any annotation query including a variable\n    // will be correctly resolved\n\n    const runner = createDashboardQueryRunner({\n      dashboard,\n      timeSrv\n    });\n    runner.run({\n      dashboard,\n      range: timeSrv.timeRange()\n    });\n\n    if (getIfExistsLastKey(getState()) !== dashboardUid) {\n      // if a previous dashboard has slow running variable queries the batch uid will be the new one\n      // but the args.urlUid will be the same as before initVariablesTransaction was called so then we can't continue initializing\n      // the previous dashboard.\n      return;\n    } // If dashboard is in a different init phase it means it cancelled during service init\n\n\n    if (getState().dashboard.initPhase !== DashboardInitPhase.Services) {\n      return;\n    }\n\n    try {\n      dashboard.processRepeats(); // handle auto fix experimental feature\n\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      keybindingSrv.setupDashboardBindings(dashboard);\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      }\n\n      console.error(err);\n    } // send open dashboard event\n\n\n    if (args.routeName !== DashboardRoutes.New) {\n      emitDashboardViewEvent(dashboard); // Listen for changes on the current dashboard\n\n      dashboardWatcher.watch(dashboard.uid);\n    } else {\n      dashboardWatcher.leave();\n    } // set week start\n\n\n    if (dashboard.weekStart !== '') {\n      setWeekStart(dashboard.weekStart);\n    } else {\n      setWeekStart(config.bootData.user.weekStart);\n    } // yay we are done\n\n\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\nexport function getNewDashboardModelData(urlFolderId) {\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      canDelete: false,\n      isNew: true,\n      folderId: 0\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels: [{\n        type: 'add-panel',\n        gridPos: {\n          x: 0,\n          y: 0,\n          w: 12,\n          h: 9\n        },\n        title: 'Panel Title'\n      }]\n    }\n  };\n\n  if (urlFolderId) {\n    data.meta.folderId = parseInt(urlFolderId, 10);\n  }\n\n  return data;\n}\nconst DASHBOARD_FROM_LS_KEY = 'DASHBOARD_FROM_LS_KEY';\nexport function setDashboardToFetchFromLocalStorage(model) {\n  store.setObject(DASHBOARD_FROM_LS_KEY, model);\n}\nexport function removeDashboardToFetchFromLocalStorage() {\n  store.delete(DASHBOARD_FROM_LS_KEY);\n}","map":{"version":3,"names":["locationUtil","setWeekStart","config","isFetchError","locationService","notifyApp","createErrorNotification","backendSrv","keybindingSrv","store","dashboardLoaderSrv","getDashboardSrv","getTimeSrv","dashboardWatcher","toStateKey","DashboardInitPhase","DashboardRoutes","createDashboardQueryRunner","initVariablesTransaction","getIfExistsLastKey","DashboardModel","emitDashboardViewEvent","dashboardInitCompleted","dashboardInitFailed","dashboardInitFetching","dashboardInitServices","fetchDashboard","args","dispatch","getState","model","getObject","DASHBOARD_FROM_LS_KEY","removeDashboardToFetchFromLocalStorage","routeName","Home","dashDTO","get","redirectUri","newUrl","stripBaseFromUrl","replace","meta","canSave","canShare","canStar","Public","loadDashboard","urlSlug","accessToken","Normal","urlType","urlUid","fixUrl","url","dashboardUrl","currentPath","getLocation","pathname","console","log","New","getNewDashboardModelData","urlFolderId","message","err","cancelled","error","initDashboard","dashboard","storeState","queryParams","getSearchObject","orgId","partial","user","timeSrv","dashboardSrv","setCurrent","init","dashboardUid","uid","runner","run","range","timeRange","initPhase","Services","processRepeats","autofitpanels","autoFitPanels","window","innerHeight","kiosk","setupDashboardBindings","Error","watch","leave","weekStart","bootData","data","canDelete","isNew","folderId","title","panels","type","gridPos","x","y","w","h","parseInt","setDashboardToFetchFromLocalStorage","setObject","delete"],"sources":["/home/soula/grafana/public/app/features/dashboard/state/initDashboard.ts"],"sourcesContent":["import { locationUtil, setWeekStart } from '@grafana/data';\nimport { config, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { keybindingSrv } from 'app/core/services/keybindingSrv';\nimport store from 'app/core/store';\nimport { dashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { DashboardSrv, getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { toStateKey } from 'app/features/variables/utils';\nimport { DashboardDTO, DashboardInitPhase, DashboardRoutes, StoreState, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport { createDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { initVariablesTransaction } from '../../variables/state/actions';\nimport { getIfExistsLastKey } from '../../variables/state/selectors';\n\nimport { DashboardModel } from './DashboardModel';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\nimport { dashboardInitCompleted, dashboardInitFailed, dashboardInitFetching, dashboardInitServices } from './reducers';\n\nexport interface InitDashboardArgs {\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderId?: string | null;\n  accessToken?: string;\n  routeName?: string;\n  fixUrl: boolean;\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  // When creating new or adding panels to a dashboard from explore we load it from local storage\n  const model = store.getObject<DashboardDTO>(DASHBOARD_FROM_LS_KEY);\n  if (model) {\n    removeDashboardToFetchFromLocalStorage();\n    return model;\n  }\n\n  try {\n    switch (args.routeName) {\n      case DashboardRoutes.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await backendSrv.get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          locationService.replace(newUrl);\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRoutes.Public: {\n        return await dashboardLoaderSrv.loadDashboard('public', args.urlSlug, args.accessToken);\n      }\n      case DashboardRoutes.Normal: {\n        const dashDTO: DashboardDTO = await dashboardLoaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = locationService.getLocation().pathname;\n\n          if (dashboardUrl !== currentPath) {\n            // Spread current location to persist search params used for navigation\n            locationService.replace({\n              ...locationService.getLocation(),\n              pathname: dashboardUrl,\n            });\n            console.log('not correct url correcting', dashboardUrl, currentPath);\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRoutes.New: {\n        return getNewDashboardModelData(args.urlFolderId);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeName };\n    }\n  } catch (err) {\n    // Ignore cancelled errors\n    if (isFetchError(err) && err.cancelled) {\n      return null;\n    }\n\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.error(err);\n    return null;\n  }\n}\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.error(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    const queryParams = locationService.getSearchObject();\n\n    if (!queryParams.orgId) {\n      // TODO this is currently not possible with the LocationService API\n      locationService.partial({ orgId: storeState.user.orgId }, true);\n    }\n\n    // init services\n    const timeSrv: TimeSrv = getTimeSrv();\n    const dashboardSrv: DashboardSrv = getDashboardSrv();\n\n    // legacy srv state, we need this value updated for built-in annotations\n    dashboardSrv.setCurrent(dashboard);\n\n    timeSrv.init(dashboard);\n\n    const dashboardUid = toStateKey(args.urlUid ?? dashboard.uid);\n    // template values service needs to initialize completely before the rest of the dashboard can load\n    await dispatch(initVariablesTransaction(dashboardUid, dashboard));\n\n    // DashboardQueryRunner needs to run after all variables have been resolved so that any annotation query including a variable\n    // will be correctly resolved\n    const runner = createDashboardQueryRunner({ dashboard, timeSrv });\n    runner.run({ dashboard, range: timeSrv.timeRange() });\n\n    if (getIfExistsLastKey(getState()) !== dashboardUid) {\n      // if a previous dashboard has slow running variable queries the batch uid will be the new one\n      // but the args.urlUid will be the same as before initVariablesTransaction was called so then we can't continue initializing\n      // the previous dashboard.\n      return;\n    }\n\n    // If dashboard is in a different init phase it means it cancelled during service init\n    if (getState().dashboard.initPhase !== DashboardInitPhase.Services) {\n      return;\n    }\n\n    try {\n      dashboard.processRepeats();\n\n      // handle auto fix experimental feature\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      keybindingSrv.setupDashboardBindings(dashboard);\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      }\n      console.error(err);\n    }\n\n    // send open dashboard event\n    if (args.routeName !== DashboardRoutes.New) {\n      emitDashboardViewEvent(dashboard);\n\n      // Listen for changes on the current dashboard\n      dashboardWatcher.watch(dashboard.uid);\n    } else {\n      dashboardWatcher.leave();\n    }\n\n    // set week start\n    if (dashboard.weekStart !== '') {\n      setWeekStart(dashboard.weekStart);\n    } else {\n      setWeekStart(config.bootData.user.weekStart);\n    }\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nexport function getNewDashboardModelData(urlFolderId?: string | null): any {\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      canDelete: false,\n      isNew: true,\n      folderId: 0,\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels: [\n        {\n          type: 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ],\n    },\n  };\n\n  if (urlFolderId) {\n    data.meta.folderId = parseInt(urlFolderId, 10);\n  }\n\n  return data;\n}\n\nconst DASHBOARD_FROM_LS_KEY = 'DASHBOARD_FROM_LS_KEY';\n\nexport function setDashboardToFetchFromLocalStorage(model: DashboardDTO) {\n  store.setObject(DASHBOARD_FROM_LS_KEY, model);\n}\n\nexport function removeDashboardToFetchFromLocalStorage() {\n  store.delete(DASHBOARD_FROM_LS_KEY);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}