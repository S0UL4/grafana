{"ast":null,"code":"var _Alert;\n\nimport React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Alert } from '@grafana/ui';\nimport { updateAlertManagerConfigAction } from '../../../state/actions';\nimport { cloudNotifierTypes } from '../../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport { cloudReceiverToFormValues, formValuesToCloudReceiver, updateConfigWithReceiver } from '../../../utils/receiver-form';\nimport { CloudCommonChannelSettings } from './CloudCommonChannelSettings';\nimport { ReceiverForm } from './ReceiverForm';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultChannelValues = Object.freeze({\n  __id: '',\n  sendResolved: true,\n  secureSettings: {},\n  settings: {},\n  secureFields: {},\n  type: 'email'\n});\nexport const CloudReceiverForm = ({\n  existing,\n  alertManagerSourceName,\n  config\n}) => {\n  const dispatch = useDispatch();\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName); // transform receiver DTO to form values\n\n  const [existingValue] = useMemo(() => {\n    if (!existing) {\n      return [undefined, {}];\n    }\n\n    return cloudReceiverToFormValues(existing, cloudNotifierTypes);\n  }, [existing]);\n\n  const onSubmit = values => {\n    const newReceiver = formValuesToCloudReceiver(values, defaultChannelValues);\n    dispatch(updateAlertManagerConfigAction({\n      newConfig: updateConfigWithReceiver(config, newReceiver, existing === null || existing === void 0 ? void 0 : existing.name),\n      oldConfig: config,\n      alertManagerSourceName,\n      successMessage: existing ? 'Contact point updated.' : 'Contact point created.',\n      redirectPath: '/alerting/notifications'\n    }));\n  };\n\n  const takenReceiverNames = useMemo(() => {\n    var _config$alertmanager_, _config$alertmanager_2;\n\n    return (_config$alertmanager_ = (_config$alertmanager_2 = config.alertmanager_config.receivers) === null || _config$alertmanager_2 === void 0 ? void 0 : _config$alertmanager_2.map(({\n      name\n    }) => name).filter(name => name !== (existing === null || existing === void 0 ? void 0 : existing.name))) !== null && _config$alertmanager_ !== void 0 ? _config$alertmanager_ : [];\n  }, [config, existing]);\n  const readOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [!isVanillaAM && (_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n      title: \"Info\",\n      severity: \"info\",\n      children: \"Note that empty string values will be replaced with global defaults where appropriate.\"\n    }))), /*#__PURE__*/_jsx(ReceiverForm, {\n      readOnly: readOnly,\n      config: config,\n      onSubmit: onSubmit,\n      initialValues: existingValue,\n      notifiers: cloudNotifierTypes,\n      alertManagerSourceName: alertManagerSourceName,\n      defaultItem: defaultChannelValues,\n      takenReceiverNames: takenReceiverNames,\n      commonSettingsComponent: CloudCommonChannelSettings\n    })]\n  });\n};","map":{"version":3,"names":["React","useMemo","useDispatch","Alert","updateAlertManagerConfigAction","cloudNotifierTypes","isVanillaPrometheusAlertManagerDataSource","cloudReceiverToFormValues","formValuesToCloudReceiver","updateConfigWithReceiver","CloudCommonChannelSettings","ReceiverForm","defaultChannelValues","Object","freeze","__id","sendResolved","secureSettings","settings","secureFields","type","CloudReceiverForm","existing","alertManagerSourceName","config","dispatch","isVanillaAM","existingValue","undefined","onSubmit","values","newReceiver","newConfig","name","oldConfig","successMessage","redirectPath","takenReceiverNames","alertmanager_config","receivers","map","filter","readOnly"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/form/CloudReceiverForm.tsx"],"sourcesContent":["import React, { FC, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Alert } from '@grafana/ui';\nimport { AlertManagerCortexConfig, Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { updateAlertManagerConfigAction } from '../../../state/actions';\nimport { CloudChannelValues, ReceiverFormValues, CloudChannelMap } from '../../../types/receiver-form';\nimport { cloudNotifierTypes } from '../../../utils/cloud-alertmanager-notifier-types';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport {\n  cloudReceiverToFormValues,\n  formValuesToCloudReceiver,\n  updateConfigWithReceiver,\n} from '../../../utils/receiver-form';\n\nimport { CloudCommonChannelSettings } from './CloudCommonChannelSettings';\nimport { ReceiverForm } from './ReceiverForm';\n\ninterface Props {\n  alertManagerSourceName: string;\n  config: AlertManagerCortexConfig;\n  existing?: Receiver;\n}\n\nconst defaultChannelValues: CloudChannelValues = Object.freeze({\n  __id: '',\n  sendResolved: true,\n  secureSettings: {},\n  settings: {},\n  secureFields: {},\n  type: 'email',\n});\n\nexport const CloudReceiverForm: FC<Props> = ({ existing, alertManagerSourceName, config }) => {\n  const dispatch = useDispatch();\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  // transform receiver DTO to form values\n  const [existingValue] = useMemo((): [ReceiverFormValues<CloudChannelValues> | undefined, CloudChannelMap] => {\n    if (!existing) {\n      return [undefined, {}];\n    }\n    return cloudReceiverToFormValues(existing, cloudNotifierTypes);\n  }, [existing]);\n\n  const onSubmit = (values: ReceiverFormValues<CloudChannelValues>) => {\n    const newReceiver = formValuesToCloudReceiver(values, defaultChannelValues);\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: updateConfigWithReceiver(config, newReceiver, existing?.name),\n        oldConfig: config,\n        alertManagerSourceName,\n        successMessage: existing ? 'Contact point updated.' : 'Contact point created.',\n        redirectPath: '/alerting/notifications',\n      })\n    );\n  };\n\n  const takenReceiverNames = useMemo(\n    () => config.alertmanager_config.receivers?.map(({ name }) => name).filter((name) => name !== existing?.name) ?? [],\n    [config, existing]\n  );\n\n  const readOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  return (\n    <>\n      {!isVanillaAM && (\n        <Alert title=\"Info\" severity=\"info\">\n          Note that empty string values will be replaced with global defaults where appropriate.\n        </Alert>\n      )}\n      <ReceiverForm<CloudChannelValues>\n        readOnly={readOnly}\n        config={config}\n        onSubmit={onSubmit}\n        initialValues={existingValue}\n        notifiers={cloudNotifierTypes}\n        alertManagerSourceName={alertManagerSourceName}\n        defaultItem={defaultChannelValues}\n        takenReceiverNames={takenReceiverNames}\n        commonSettingsComponent={CloudCommonChannelSettings}\n      />\n    </>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,KAAT,QAAsB,aAAtB;AAGA,SAASC,8BAAT,QAA+C,wBAA/C;AAEA,SAASC,kBAAT,QAAmC,kDAAnC;AACA,SAASC,yCAAT,QAA0D,2BAA1D;AACA,SACEC,yBADF,EAEEC,yBAFF,EAGEC,wBAHF,QAIO,8BAJP;AAMA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,SAASC,YAAT,QAA6B,gBAA7B;;;;AAQA,MAAMC,oBAAwC,GAAGC,MAAM,CAACC,MAAP,CAAc;EAC7DC,IAAI,EAAE,EADuD;EAE7DC,YAAY,EAAE,IAF+C;EAG7DC,cAAc,EAAE,EAH6C;EAI7DC,QAAQ,EAAE,EAJmD;EAK7DC,YAAY,EAAE,EAL+C;EAM7DC,IAAI,EAAE;AANuD,CAAd,CAAjD;AASA,OAAO,MAAMC,iBAA4B,GAAG,CAAC;EAAEC,QAAF;EAAYC,sBAAZ;EAAoCC;AAApC,CAAD,KAAkD;EAC5F,MAAMC,QAAQ,GAAGvB,WAAW,EAA5B;EACA,MAAMwB,WAAW,GAAGpB,yCAAyC,CAACiB,sBAAD,CAA7D,CAF4F,CAI5F;;EACA,MAAM,CAACI,aAAD,IAAkB1B,OAAO,CAAC,MAA6E;IAC3G,IAAI,CAACqB,QAAL,EAAe;MACb,OAAO,CAACM,SAAD,EAAY,EAAZ,CAAP;IACD;;IACD,OAAOrB,yBAAyB,CAACe,QAAD,EAAWjB,kBAAX,CAAhC;EACD,CAL8B,EAK5B,CAACiB,QAAD,CAL4B,CAA/B;;EAOA,MAAMO,QAAQ,GAAIC,MAAD,IAAoD;IACnE,MAAMC,WAAW,GAAGvB,yBAAyB,CAACsB,MAAD,EAASlB,oBAAT,CAA7C;IACAa,QAAQ,CACNrB,8BAA8B,CAAC;MAC7B4B,SAAS,EAAEvB,wBAAwB,CAACe,MAAD,EAASO,WAAT,EAAsBT,QAAtB,aAAsBA,QAAtB,uBAAsBA,QAAQ,CAAEW,IAAhC,CADN;MAE7BC,SAAS,EAAEV,MAFkB;MAG7BD,sBAH6B;MAI7BY,cAAc,EAAEb,QAAQ,GAAG,wBAAH,GAA8B,wBAJzB;MAK7Bc,YAAY,EAAE;IALe,CAAD,CADxB,CAAR;EASD,CAXD;;EAaA,MAAMC,kBAAkB,GAAGpC,OAAO,CAChC;IAAA;;IAAA,0DAAMuB,MAAM,CAACc,mBAAP,CAA2BC,SAAjC,2DAAM,uBAAsCC,GAAtC,CAA0C,CAAC;MAAEP;IAAF,CAAD,KAAcA,IAAxD,EAA8DQ,MAA9D,CAAsER,IAAD,IAAUA,IAAI,MAAKX,QAAL,aAAKA,QAAL,uBAAKA,QAAQ,CAAEW,IAAf,CAAnF,CAAN,yEAAiH,EAAjH;EAAA,CADgC,EAEhC,CAACT,MAAD,EAASF,QAAT,CAFgC,CAAlC;EAKA,MAAMoB,QAAQ,GAAGpC,yCAAyC,CAACiB,sBAAD,CAA1D;EAEA,oBACE;IAAA,WACG,CAACG,WAAD,sCACC,KAAC,KAAD;MAAO,KAAK,EAAC,MAAb;MAAoB,QAAQ,EAAC,MAA7B;MAAA;IAAA,EADD,EADH,eAME,KAAC,YAAD;MACE,QAAQ,EAAEgB,QADZ;MAEE,MAAM,EAAElB,MAFV;MAGE,QAAQ,EAAEK,QAHZ;MAIE,aAAa,EAAEF,aAJjB;MAKE,SAAS,EAAEtB,kBALb;MAME,sBAAsB,EAAEkB,sBAN1B;MAOE,WAAW,EAAEX,oBAPf;MAQE,kBAAkB,EAAEyB,kBARtB;MASE,uBAAuB,EAAE3B;IAT3B,EANF;EAAA,EADF;AAoBD,CApDM"},"metadata":{},"sourceType":"module"}