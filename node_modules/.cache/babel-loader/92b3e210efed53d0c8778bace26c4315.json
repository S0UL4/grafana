{"ast":null,"code":"var _Icon;\n\nimport { isString } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ClipboardButton } from '../ClipboardButton/ClipboardButton';\nimport { Icon } from '../Icon/Icon';\nimport { Modal } from '../Modal/Modal';\nimport { CodeEditor } from '../Monaco/CodeEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function TableCellInspectModal({\n  value,\n  onDismiss,\n  mode\n}) {\n  const [isInClipboard, setIsInClipboard] = useState(false);\n  const timeoutRef = React.useRef();\n  useEffect(() => {\n    if (isInClipboard) {\n      timeoutRef.current = window.setTimeout(() => {\n        setIsInClipboard(false);\n      }, 2000);\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        window.clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [isInClipboard]);\n  let displayValue = value;\n\n  if (isString(value)) {\n    try {\n      value = JSON.parse(value);\n    } catch {} // ignore errors\n\n  } else {\n    displayValue = JSON.stringify(value, null, ' ');\n  }\n\n  let text = displayValue;\n\n  if (mode === 'code') {\n    text = JSON.stringify(value, null, ' ');\n  }\n\n  return /*#__PURE__*/_jsxs(Modal, {\n    onDismiss: onDismiss,\n    isOpen: true,\n    title: \"Inspect value\",\n    children: [mode === 'code' ? /*#__PURE__*/_jsx(CodeEditor, {\n      width: \"100%\",\n      height: 500,\n      language: \"json\",\n      showLineNumbers: true,\n      showMiniMap: (text && text.length) > 100,\n      value: text,\n      readOnly: true\n    }) : /*#__PURE__*/_jsx(\"pre\", {\n      children: text\n    }), /*#__PURE__*/_jsx(Modal.ButtonRow, {\n      children: /*#__PURE__*/_jsx(ClipboardButton, {\n        getText: () => text,\n        onClipboardCopy: () => setIsInClipboard(true),\n        children: !isInClipboard ? 'Copy to Clipboard' : /*#__PURE__*/_jsxs(_Fragment, {\n          children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n            name: \"check\"\n          })), \"Copied to clipboard\"]\n        })\n      })\n    })]\n  });\n}","map":{"version":3,"names":["isString","React","useEffect","useState","ClipboardButton","Icon","Modal","CodeEditor","TableCellInspectModal","value","onDismiss","mode","isInClipboard","setIsInClipboard","timeoutRef","useRef","current","window","setTimeout","clearTimeout","displayValue","JSON","parse","stringify","text","length"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Table/TableCellInspectModal.tsx"],"sourcesContent":["import { isString } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { ClipboardButton } from '../ClipboardButton/ClipboardButton';\nimport { Icon } from '../Icon/Icon';\nimport { Modal } from '../Modal/Modal';\nimport { CodeEditor } from '../Monaco/CodeEditor';\n\ninterface TableCellInspectModalProps {\n  value: any;\n  onDismiss: () => void;\n  mode: 'code' | 'text';\n}\n\nexport function TableCellInspectModal({ value, onDismiss, mode }: TableCellInspectModalProps) {\n  const [isInClipboard, setIsInClipboard] = useState(false);\n  const timeoutRef = React.useRef<number>();\n\n  useEffect(() => {\n    if (isInClipboard) {\n      timeoutRef.current = window.setTimeout(() => {\n        setIsInClipboard(false);\n      }, 2000);\n    }\n\n    return () => {\n      if (timeoutRef.current) {\n        window.clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [isInClipboard]);\n\n  let displayValue = value;\n  if (isString(value)) {\n    try {\n      value = JSON.parse(value);\n    } catch {} // ignore errors\n  } else {\n    displayValue = JSON.stringify(value, null, ' ');\n  }\n  let text = displayValue;\n\n  if (mode === 'code') {\n    text = JSON.stringify(value, null, ' ');\n  }\n\n  return (\n    <Modal onDismiss={onDismiss} isOpen={true} title=\"Inspect value\">\n      {mode === 'code' ? (\n        <CodeEditor\n          width=\"100%\"\n          height={500}\n          language=\"json\"\n          showLineNumbers={true}\n          showMiniMap={(text && text.length) > 100}\n          value={text}\n          readOnly={true}\n        />\n      ) : (\n        <pre>{text}</pre>\n      )}\n      <Modal.ButtonRow>\n        <ClipboardButton getText={() => text} onClipboardCopy={() => setIsInClipboard(true)}>\n          {!isInClipboard ? (\n            'Copy to Clipboard'\n          ) : (\n            <>\n              <Icon name=\"check\" />\n              Copied to clipboard\n            </>\n          )}\n        </ClipboardButton>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,eAAT,QAAgC,oCAAhC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,UAAT,QAA2B,sBAA3B;;;;AAQA,OAAO,SAASC,qBAAT,CAA+B;EAAEC,KAAF;EAASC,SAAT;EAAoBC;AAApB,CAA/B,EAAuF;EAC5F,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,KAAD,CAAlD;EACA,MAAMW,UAAU,GAAGb,KAAK,CAACc,MAAN,EAAnB;EAEAb,SAAS,CAAC,MAAM;IACd,IAAIU,aAAJ,EAAmB;MACjBE,UAAU,CAACE,OAAX,GAAqBC,MAAM,CAACC,UAAP,CAAkB,MAAM;QAC3CL,gBAAgB,CAAC,KAAD,CAAhB;MACD,CAFoB,EAElB,IAFkB,CAArB;IAGD;;IAED,OAAO,MAAM;MACX,IAAIC,UAAU,CAACE,OAAf,EAAwB;QACtBC,MAAM,CAACE,YAAP,CAAoBL,UAAU,CAACE,OAA/B;MACD;IACF,CAJD;EAKD,CAZQ,EAYN,CAACJ,aAAD,CAZM,CAAT;EAcA,IAAIQ,YAAY,GAAGX,KAAnB;;EACA,IAAIT,QAAQ,CAACS,KAAD,CAAZ,EAAqB;IACnB,IAAI;MACFA,KAAK,GAAGY,IAAI,CAACC,KAAL,CAAWb,KAAX,CAAR;IACD,CAFD,CAEE,MAAM,CAAE,CAHS,CAGR;;EACZ,CAJD,MAIO;IACLW,YAAY,GAAGC,IAAI,CAACE,SAAL,CAAed,KAAf,EAAsB,IAAtB,EAA4B,GAA5B,CAAf;EACD;;EACD,IAAIe,IAAI,GAAGJ,YAAX;;EAEA,IAAIT,IAAI,KAAK,MAAb,EAAqB;IACnBa,IAAI,GAAGH,IAAI,CAACE,SAAL,CAAed,KAAf,EAAsB,IAAtB,EAA4B,GAA5B,CAAP;EACD;;EAED,oBACE,MAAC,KAAD;IAAO,SAAS,EAAEC,SAAlB;IAA6B,MAAM,EAAE,IAArC;IAA2C,KAAK,EAAC,eAAjD;IAAA,WACGC,IAAI,KAAK,MAAT,gBACC,KAAC,UAAD;MACE,KAAK,EAAC,MADR;MAEE,MAAM,EAAE,GAFV;MAGE,QAAQ,EAAC,MAHX;MAIE,eAAe,EAAE,IAJnB;MAKE,WAAW,EAAE,CAACa,IAAI,IAAIA,IAAI,CAACC,MAAd,IAAwB,GALvC;MAME,KAAK,EAAED,IANT;MAOE,QAAQ,EAAE;IAPZ,EADD,gBAWC;MAAA,UAAMA;IAAN,EAZJ,eAcE,KAAC,KAAD,CAAO,SAAP;MAAA,uBACE,KAAC,eAAD;QAAiB,OAAO,EAAE,MAAMA,IAAhC;QAAsC,eAAe,EAAE,MAAMX,gBAAgB,CAAC,IAAD,CAA7E;QAAA,UACG,CAACD,aAAD,GACC,mBADD,gBAGC;UAAA,0CACE,KAAC,IAAD;YAAM,IAAI,EAAC;UAAX,EADF;QAAA;MAJJ;IADF,EAdF;EAAA,EADF;AA6BD"},"metadata":{},"sourceType":"module"}