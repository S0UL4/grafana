{"ast":null,"code":"import { cloneDeep } from 'lodash';\nimport { ThresholdsMode } from '@grafana/data';\nimport { ResourceDimensionMode } from 'app/features/dimensions';\nimport { getMarkerAsPath } from './style/markers';\nimport { defaultStyleConfig } from './style/types';\nimport { TooltipMode } from './types';\nimport { MapCenterID } from './view';\n/**\n * This is called when the panel changes from another panel\n */\n\nexport const mapPanelChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  // Changing from angular/worldmap panel to react/openlayers\n  if (prevPluginId === 'grafana-worldmap-panel' && prevOptions.angular) {\n    const {\n      fieldConfig,\n      options\n    } = worldmapToGeomapOptions(Object.assign({}, prevOptions.angular, {\n      fieldConfig: prevFieldConfig\n    }));\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n\n    return options;\n  }\n\n  return {};\n};\nexport function worldmapToGeomapOptions(angular) {\n  const fieldConfig = {\n    defaults: {},\n    overrides: []\n  };\n  const options = {\n    view: {\n      id: MapCenterID.Zero\n    },\n    controls: {\n      showZoom: true,\n      mouseWheelZoom: Boolean(angular.mouseWheelZoom)\n    },\n    basemap: {\n      type: 'default',\n      // was carto\n      name: 'Basemap'\n    },\n    layers: [// TODO? depends on current configs\n    ],\n    tooltip: {\n      mode: TooltipMode.Details\n    }\n  };\n  let v = asNumber(angular.decimals);\n\n  if (v) {\n    fieldConfig.defaults.decimals = v;\n  } // Convert thresholds and color values\n\n\n  if (angular.thresholds && angular.colors) {\n    const levels = angular.thresholds.split(',').map(strVale => {\n      return Number(strVale.trim());\n    }); // One more color than threshold\n\n    const thresholds = [];\n\n    for (const color of angular.colors) {\n      const idx = thresholds.length - 1;\n\n      if (idx >= 0) {\n        thresholds.push({\n          value: levels[idx],\n          color\n        });\n      } else {\n        thresholds.push({\n          value: -Infinity,\n          color\n        });\n      }\n    }\n\n    fieldConfig.defaults.thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps: thresholds\n    };\n  }\n\n  v = asNumber(angular.initialZoom);\n\n  if (v) {\n    options.view.zoom = v;\n  } // mapCenter: 'Europe',\n  // mapCenterLatitude: 46,\n  // mapCenterLongitude: 14,\n  //\n  // Map center (from worldmap)\n\n\n  const mapCenters = {\n    '(0째, 0째)': MapCenterID.Zero,\n    'North America': 'north-america',\n    Europe: 'europe',\n    'West Asia': 'west-asia',\n    'SE Asia': 'se-asia',\n    'Last GeoHash': MapCenterID.Coordinates // MapCenterID.LastPoint,\n\n  };\n  options.view.id = mapCenters[angular.mapCenter];\n  options.view.lat = asNumber(angular.mapCenterLatitude);\n  options.view.lon = asNumber(angular.mapCenterLongitude);\n  return {\n    fieldConfig,\n    options\n  };\n}\n\nfunction asNumber(v) {\n  const num = +v;\n  return isNaN(num) ? undefined : num;\n}\n\nexport const mapMigrationHandler = panel => {\n  var _panel$pluginVersion;\n\n  const pluginVersion = (_panel$pluginVersion = panel === null || panel === void 0 ? void 0 : panel.pluginVersion) !== null && _panel$pluginVersion !== void 0 ? _panel$pluginVersion : ''; // before 8.3, only one layer was supported!\n\n  if (pluginVersion.startsWith('8.1') || pluginVersion.startsWith('8.2')) {\n    var _panel$options;\n\n    const layers = (_panel$options = panel.options) === null || _panel$options === void 0 ? void 0 : _panel$options.layers;\n\n    if ((layers === null || layers === void 0 ? void 0 : layers.length) === 1) {\n      const layer = panel.options.layers[0];\n\n      if ((layer === null || layer === void 0 ? void 0 : layer.type) === 'markers' && layer.config) {\n        // Moving style to child object\n        const oldConfig = layer.config;\n        const config = {\n          style: cloneDeep(defaultStyleConfig),\n          showLegend: Boolean(oldConfig.showLegend)\n        };\n\n        if (oldConfig.size) {\n          config.style.size = oldConfig.size;\n        }\n\n        if (oldConfig.color) {\n          config.style.color = oldConfig.color;\n        }\n\n        if (oldConfig.fillOpacity) {\n          config.style.opacity = oldConfig.fillOpacity;\n        }\n\n        const symbol = getMarkerAsPath(oldConfig.shape);\n\n        if (symbol) {\n          config.style.symbol = {\n            fixed: symbol,\n            mode: ResourceDimensionMode.Fixed\n          };\n        }\n\n        return Object.assign({}, panel.options, {\n          layers: [Object.assign({}, layer, {\n            config\n          })]\n        });\n      }\n    }\n  }\n\n  return panel.options;\n};","map":{"version":3,"names":["cloneDeep","ThresholdsMode","ResourceDimensionMode","getMarkerAsPath","defaultStyleConfig","TooltipMode","MapCenterID","mapPanelChangedHandler","panel","prevPluginId","prevOptions","prevFieldConfig","angular","fieldConfig","options","worldmapToGeomapOptions","defaults","overrides","view","id","Zero","controls","showZoom","mouseWheelZoom","Boolean","basemap","type","name","layers","tooltip","mode","Details","v","asNumber","decimals","thresholds","colors","levels","split","map","strVale","Number","trim","color","idx","length","push","value","Infinity","Absolute","steps","initialZoom","zoom","mapCenters","Europe","Coordinates","mapCenter","lat","mapCenterLatitude","lon","mapCenterLongitude","num","isNaN","undefined","mapMigrationHandler","pluginVersion","startsWith","layer","config","oldConfig","style","showLegend","size","fillOpacity","opacity","symbol","shape","fixed","Fixed"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/migrations.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\n\nimport { FieldConfigSource, PanelModel, PanelTypeChangedHandler, Threshold, ThresholdsMode } from '@grafana/data';\nimport { ResourceDimensionMode } from 'app/features/dimensions';\n\nimport { MarkersConfig } from './layers/data/markersLayer';\nimport { getMarkerAsPath } from './style/markers';\nimport { defaultStyleConfig } from './style/types';\nimport { GeomapPanelOptions, TooltipMode } from './types';\nimport { MapCenterID } from './view';\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const mapPanelChangedHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  // Changing from angular/worldmap panel to react/openlayers\n  if (prevPluginId === 'grafana-worldmap-panel' && prevOptions.angular) {\n    const { fieldConfig, options } = worldmapToGeomapOptions({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    return options;\n  }\n\n  return {};\n};\n\nexport function worldmapToGeomapOptions(angular: any): { fieldConfig: FieldConfigSource; options: GeomapPanelOptions } {\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [],\n  };\n\n  const options: GeomapPanelOptions = {\n    view: {\n      id: MapCenterID.Zero,\n    },\n    controls: {\n      showZoom: true,\n      mouseWheelZoom: Boolean(angular.mouseWheelZoom),\n    },\n    basemap: {\n      type: 'default', // was carto\n      name: 'Basemap',\n    },\n    layers: [\n      // TODO? depends on current configs\n    ],\n    tooltip: { mode: TooltipMode.Details },\n  };\n\n  let v = asNumber(angular.decimals);\n  if (v) {\n    fieldConfig.defaults.decimals = v;\n  }\n\n  // Convert thresholds and color values\n  if (angular.thresholds && angular.colors) {\n    const levels = angular.thresholds.split(',').map((strVale: string) => {\n      return Number(strVale.trim());\n    });\n\n    // One more color than threshold\n    const thresholds: Threshold[] = [];\n    for (const color of angular.colors) {\n      const idx = thresholds.length - 1;\n      if (idx >= 0) {\n        thresholds.push({ value: levels[idx], color });\n      } else {\n        thresholds.push({ value: -Infinity, color });\n      }\n    }\n\n    fieldConfig.defaults.thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps: thresholds,\n    };\n  }\n\n  v = asNumber(angular.initialZoom);\n  if (v) {\n    options.view.zoom = v;\n  }\n\n  // mapCenter: 'Europe',\n  // mapCenterLatitude: 46,\n  // mapCenterLongitude: 14,\n  //\n  // Map center (from worldmap)\n  const mapCenters: any = {\n    '(0째, 0째)': MapCenterID.Zero,\n    'North America': 'north-america',\n    Europe: 'europe',\n    'West Asia': 'west-asia',\n    'SE Asia': 'se-asia',\n    'Last GeoHash': MapCenterID.Coordinates, // MapCenterID.LastPoint,\n  };\n  options.view.id = mapCenters[angular.mapCenter as any];\n  options.view.lat = asNumber(angular.mapCenterLatitude);\n  options.view.lon = asNumber(angular.mapCenterLongitude);\n  return { fieldConfig, options };\n}\n\nfunction asNumber(v: any): number | undefined {\n  const num = +v;\n  return isNaN(num) ? undefined : num;\n}\n\nexport const mapMigrationHandler = (panel: PanelModel): Partial<GeomapPanelOptions> => {\n  const pluginVersion = panel?.pluginVersion ?? '';\n\n  // before 8.3, only one layer was supported!\n  if (pluginVersion.startsWith('8.1') || pluginVersion.startsWith('8.2')) {\n    const layers = panel.options?.layers;\n    if (layers?.length === 1) {\n      const layer = panel.options.layers[0];\n      if (layer?.type === 'markers' && layer.config) {\n        // Moving style to child object\n        const oldConfig = layer.config;\n        const config: MarkersConfig = {\n          style: cloneDeep(defaultStyleConfig),\n          showLegend: Boolean(oldConfig.showLegend),\n        };\n\n        if (oldConfig.size) {\n          config.style.size = oldConfig.size;\n        }\n        if (oldConfig.color) {\n          config.style.color = oldConfig.color;\n        }\n        if (oldConfig.fillOpacity) {\n          config.style.opacity = oldConfig.fillOpacity;\n        }\n        const symbol = getMarkerAsPath(oldConfig.shape);\n        if (symbol) {\n          config.style.symbol = {\n            fixed: symbol,\n            mode: ResourceDimensionMode.Fixed,\n          };\n        }\n        return { ...panel.options, layers: [{ ...layer, config }] };\n      }\n    }\n  }\n  return panel.options;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}