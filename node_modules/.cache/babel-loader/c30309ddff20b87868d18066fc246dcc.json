{"ast":null,"code":"var _td;\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { useAsync } from 'react-use';\nimport { getBackendSrv } from '@grafana/runtime';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction AdminSettings({\n  navModel\n}) {\n  const {\n    loading,\n    value: settings\n  } = useAsync(() => getBackendSrv().get('/api/admin/settings'), []);\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      isLoading: loading,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"grafana-info-box span8\",\n        style: {\n          margin: '20px 0 25px 0'\n        },\n        children: \"These system settings are defined in grafana.ini or custom.ini (or overridden in ENV variables). To change these you currently need to restart Grafana.\"\n      }), settings && /*#__PURE__*/_jsx(\"table\", {\n        className: \"filter-table\",\n        children: /*#__PURE__*/_jsx(\"tbody\", {\n          children: Object.entries(settings).map(([sectionName, sectionSettings], i) => /*#__PURE__*/_jsxs(React.Fragment, {\n            children: [/*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"td\", {\n                className: \"admin-settings-section\",\n                children: sectionName\n              }), _td || (_td = /*#__PURE__*/_jsx(\"td\", {}))]\n            }), Object.entries(sectionSettings).map(([settingName, settingValue], j) => /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"td\", {\n                style: {\n                  paddingLeft: '25px'\n                },\n                children: settingName\n              }), /*#__PURE__*/_jsx(\"td\", {\n                style: {\n                  whiteSpace: 'break-spaces'\n                },\n                children: settingValue\n              })]\n            }, `property-${j}`))]\n          }, `section-${i}`))\n        })\n      })]\n    })\n  });\n}\n\nconst mapStateToProps = state => ({\n  navModel: getNavModel(state.navIndex, 'server-settings')\n});\n\nexport default connect(mapStateToProps)(AdminSettings);","map":{"version":3,"names":["React","connect","useAsync","getBackendSrv","Page","getNavModel","AdminSettings","navModel","loading","value","settings","get","margin","Object","entries","map","sectionName","sectionSettings","i","settingName","settingValue","j","paddingLeft","whiteSpace","mapStateToProps","state","navIndex"],"sources":["/home/soula/grafana/public/app/features/admin/AdminSettings.tsx"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { useAsync } from 'react-use';\n\nimport { NavModel } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\ntype Settings = { [key: string]: { [key: string]: string } };\n\ninterface Props {\n  navModel: NavModel;\n}\n\nfunction AdminSettings({ navModel }: Props) {\n  const { loading, value: settings } = useAsync(\n    () => getBackendSrv().get('/api/admin/settings') as Promise<Settings>,\n    []\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        <div className=\"grafana-info-box span8\" style={{ margin: '20px 0 25px 0' }}>\n          These system settings are defined in grafana.ini or custom.ini (or overridden in ENV variables). To change\n          these you currently need to restart Grafana.\n        </div>\n\n        {settings && (\n          <table className=\"filter-table\">\n            <tbody>\n              {Object.entries(settings).map(([sectionName, sectionSettings], i) => (\n                <React.Fragment key={`section-${i}`}>\n                  <tr>\n                    <td className=\"admin-settings-section\">{sectionName}</td>\n                    <td />\n                  </tr>\n                  {Object.entries(sectionSettings).map(([settingName, settingValue], j) => (\n                    <tr key={`property-${j}`}>\n                      <td style={{ paddingLeft: '25px' }}>{settingName}</td>\n                      <td style={{ whiteSpace: 'break-spaces' }}>{settingValue}</td>\n                    </tr>\n                  ))}\n                </React.Fragment>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'server-settings'),\n});\n\nexport default connect(mapStateToProps)(AdminSettings);\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,WAAzB;AAGA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,SAASC,WAAT,QAA4B,6BAA5B;;;;AASA,SAASC,aAAT,CAAuB;EAAEC;AAAF,CAAvB,EAA4C;EAC1C,MAAM;IAAEC,OAAF;IAAWC,KAAK,EAAEC;EAAlB,IAA+BR,QAAQ,CAC3C,MAAMC,aAAa,GAAGQ,GAAhB,CAAoB,qBAApB,CADqC,EAE3C,EAF2C,CAA7C;EAKA,oBACE,KAAC,IAAD;IAAM,QAAQ,EAAEJ,QAAhB;IAAA,uBACE,MAAC,IAAD,CAAM,QAAN;MAAe,SAAS,EAAEC,OAA1B;MAAA,wBACE;QAAK,SAAS,EAAC,wBAAf;QAAwC,KAAK,EAAE;UAAEI,MAAM,EAAE;QAAV,CAA/C;QAAA;MAAA,EADF,EAMGF,QAAQ,iBACP;QAAO,SAAS,EAAC,cAAjB;QAAA,uBACE;UAAA,UACGG,MAAM,CAACC,OAAP,CAAeJ,QAAf,EAAyBK,GAAzB,CAA6B,CAAC,CAACC,WAAD,EAAcC,eAAd,CAAD,EAAiCC,CAAjC,kBAC5B,MAAC,KAAD,CAAO,QAAP;YAAA,wBACE;cAAA,wBACE;gBAAI,SAAS,EAAC,wBAAd;gBAAA,UAAwCF;cAAxC,EADF,6BAEE,cAFF;YAAA,EADF,EAKGH,MAAM,CAACC,OAAP,CAAeG,eAAf,EAAgCF,GAAhC,CAAoC,CAAC,CAACI,WAAD,EAAcC,YAAd,CAAD,EAA8BC,CAA9B,kBACnC;cAAA,wBACE;gBAAI,KAAK,EAAE;kBAAEC,WAAW,EAAE;gBAAf,CAAX;gBAAA,UAAqCH;cAArC,EADF,eAEE;gBAAI,KAAK,EAAE;kBAAEI,UAAU,EAAE;gBAAd,CAAX;gBAAA,UAA4CH;cAA5C,EAFF;YAAA,GAAU,YAAWC,CAAE,EAAvB,CADD,CALH;UAAA,GAAsB,WAAUH,CAAE,EAAlC,CADD;QADH;MADF,EAPJ;IAAA;EADF,EADF;AA+BD;;AAED,MAAMM,eAAe,GAAIC,KAAD,KAAwB;EAC9ClB,QAAQ,EAAEF,WAAW,CAACoB,KAAK,CAACC,QAAP,EAAiB,iBAAjB;AADyB,CAAxB,CAAxB;;AAIA,eAAezB,OAAO,CAACuB,eAAD,CAAP,CAAyBlB,aAAzB,CAAf"},"metadata":{},"sourceType":"module"}