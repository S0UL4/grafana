{"ast":null,"code":"/**\n * TODO: This should be added to ./logs.ts but because of cross reference between ./datasource.ts and ./logs.ts it can\n * be done only after decoupling \"logs\" from \"datasource\" (https://github.com/grafana/grafana/pull/39536)\n *\n * @internal\n */\n\n/**\n * @internal\n */\nexport const hasLogsVolumeSupport = datasource => {\n  return datasource.getLogsVolumeDataProvider !== undefined;\n};","map":{"version":3,"names":["hasLogsVolumeSupport","datasource","getLogsVolumeDataProvider","undefined"],"sources":["/home/soula/grafana/packages/grafana-data/src/types/logsVolume.ts"],"sourcesContent":["import { Observable } from 'rxjs';\n\nimport { DataQueryRequest, DataQueryResponse } from './datasource';\nimport { DataQuery } from './query';\n\n/**\n * TODO: This should be added to ./logs.ts but because of cross reference between ./datasource.ts and ./logs.ts it can\n * be done only after decoupling \"logs\" from \"datasource\" (https://github.com/grafana/grafana/pull/39536)\n *\n * @internal\n */\nexport interface DataSourceWithLogsVolumeSupport<TQuery extends DataQuery> {\n  getLogsVolumeDataProvider(request: DataQueryRequest<TQuery>): Observable<DataQueryResponse> | undefined;\n}\n\n/**\n * @internal\n */\nexport const hasLogsVolumeSupport = <TQuery extends DataQuery>(\n  datasource: any\n): datasource is DataSourceWithLogsVolumeSupport<TQuery> => {\n  return (datasource as DataSourceWithLogsVolumeSupport<TQuery>).getLogsVolumeDataProvider !== undefined;\n};\n"],"mappings":"AAKA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA,OAAO,MAAMA,oBAAoB,GAC/BC,UADkC,IAEwB;EAC1D,OAAQA,UAAD,CAAwDC,yBAAxD,KAAsFC,SAA7F;AACD,CAJM"},"metadata":{},"sourceType":"module"}