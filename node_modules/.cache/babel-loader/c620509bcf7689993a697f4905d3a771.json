{"ast":null,"code":"import { cx, css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { withTheme } from '../../themes/index';\nimport { getAllFields } from './logParser';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nclass UnThemedLogRowMessageDetectedFields extends PureComponent {\n  render() {\n    const {\n      row,\n      showDetectedFields,\n      getFieldLinks,\n      wrapLogMessage\n    } = this.props;\n    const fields = getAllFields(row, getFieldLinks);\n    const wrapClassName = cx(wrapLogMessage && css`\n          white-space: pre-wrap;\n        `);\n    const line = showDetectedFields.map(parsedKey => {\n      const field = fields.find(field => {\n        const {\n          key\n        } = field;\n        return key === parsedKey;\n      });\n\n      if (field) {\n        return `${parsedKey}=${field.value}`;\n      }\n\n      return null;\n    }).filter(s => s !== null).join(' ');\n    return /*#__PURE__*/_jsx(\"td\", {\n      className: wrapClassName,\n      children: line\n    });\n  }\n\n}\n\nexport const LogRowMessageDetectedFields = withTheme(UnThemedLogRowMessageDetectedFields);\nLogRowMessageDetectedFields.displayName = 'LogRowMessageDetectedFields';","map":{"version":3,"names":["cx","css","React","PureComponent","withTheme","getAllFields","UnThemedLogRowMessageDetectedFields","render","row","showDetectedFields","getFieldLinks","wrapLogMessage","props","fields","wrapClassName","line","map","parsedKey","field","find","key","value","filter","s","join","LogRowMessageDetectedFields","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Logs/LogRowMessageDetectedFields.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { LogRowModel, Field, LinkModel } from '@grafana/data';\n\nimport { withTheme } from '../../themes/index';\nimport { Themeable } from '../../types/theme';\n\nimport { getAllFields } from './logParser';\n\nexport interface Props extends Themeable {\n  row: LogRowModel;\n  showDetectedFields: string[];\n  wrapLogMessage: boolean;\n  getFieldLinks?: (field: Field, rowIndex: number) => Array<LinkModel<Field>>;\n}\n\nclass UnThemedLogRowMessageDetectedFields extends PureComponent<Props> {\n  render() {\n    const { row, showDetectedFields, getFieldLinks, wrapLogMessage } = this.props;\n    const fields = getAllFields(row, getFieldLinks);\n    const wrapClassName = cx(\n      wrapLogMessage &&\n        css`\n          white-space: pre-wrap;\n        `\n    );\n\n    const line = showDetectedFields\n      .map((parsedKey) => {\n        const field = fields.find((field) => {\n          const { key } = field;\n          return key === parsedKey;\n        });\n\n        if (field) {\n          return `${parsedKey}=${field.value}`;\n        }\n\n        return null;\n      })\n      .filter((s) => s !== null)\n      .join(' ');\n\n    return <td className={wrapClassName}>{line}</td>;\n  }\n}\n\nexport const LogRowMessageDetectedFields = withTheme(UnThemedLogRowMessageDetectedFields);\nLogRowMessageDetectedFields.displayName = 'LogRowMessageDetectedFields';\n"],"mappings":"AAAA,SAASA,EAAT,EAAaC,GAAb,QAAwB,cAAxB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAIA,SAASC,SAAT,QAA0B,oBAA1B;AAGA,SAASC,YAAT,QAA6B,aAA7B;;;AASA,MAAMC,mCAAN,SAAkDH,aAAlD,CAAuE;EACrEI,MAAM,GAAG;IACP,MAAM;MAAEC,GAAF;MAAOC,kBAAP;MAA2BC,aAA3B;MAA0CC;IAA1C,IAA6D,KAAKC,KAAxE;IACA,MAAMC,MAAM,GAAGR,YAAY,CAACG,GAAD,EAAME,aAAN,CAA3B;IACA,MAAMI,aAAa,GAAGd,EAAE,CACtBW,cAAc,IACZV,GAAI;AACZ;AACA,SAJ4B,CAAxB;IAOA,MAAMc,IAAI,GAAGN,kBAAkB,CAC5BO,GADU,CACLC,SAAD,IAAe;MAClB,MAAMC,KAAK,GAAGL,MAAM,CAACM,IAAP,CAAaD,KAAD,IAAW;QACnC,MAAM;UAAEE;QAAF,IAAUF,KAAhB;QACA,OAAOE,GAAG,KAAKH,SAAf;MACD,CAHa,CAAd;;MAKA,IAAIC,KAAJ,EAAW;QACT,OAAQ,GAAED,SAAU,IAAGC,KAAK,CAACG,KAAM,EAAnC;MACD;;MAED,OAAO,IAAP;IACD,CAZU,EAaVC,MAbU,CAaFC,CAAD,IAAOA,CAAC,KAAK,IAbV,EAcVC,IAdU,CAcL,GAdK,CAAb;IAgBA,oBAAO;MAAI,SAAS,EAAEV,aAAf;MAAA,UAA+BC;IAA/B,EAAP;EACD;;AA5BoE;;AA+BvE,OAAO,MAAMU,2BAA2B,GAAGrB,SAAS,CAACE,mCAAD,CAA7C;AACPmB,2BAA2B,CAACC,WAA5B,GAA0C,6BAA1C"},"metadata":{},"sourceType":"module"}