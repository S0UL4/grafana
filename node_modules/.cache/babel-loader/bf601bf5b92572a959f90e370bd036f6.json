{"ast":null,"code":"import { get as lodashGet } from 'lodash';\nexport const dataOverrideTooltipDescription = 'Some data fields have this option pre-configured. Add a field override rule to override the pre-configured value.';\nexport const overrideRuleTooltipDescription = 'An override rule exists for this property';\nexport function getOptionOverrides(fieldOption, fieldConfig, frames) {\n  const infoDots = []; // Look for options overriden in data field config\n\n  if (frames) {\n    for (const frame of frames) {\n      for (const field of frame.fields) {\n        const value = lodashGet(field.config, fieldOption.path);\n\n        if (value == null) {\n          continue;\n        }\n\n        infoDots.push({\n          type: 'data',\n          description: dataOverrideTooltipDescription,\n          tooltip: dataOverrideTooltipDescription\n        });\n        break;\n      }\n    }\n  }\n\n  const overrideRuleFound = fieldConfig.overrides.some(rule => rule.properties.some(prop => prop.id === fieldOption.id));\n\n  if (overrideRuleFound) {\n    infoDots.push({\n      type: 'rule',\n      description: overrideRuleTooltipDescription,\n      tooltip: overrideRuleTooltipDescription\n    });\n  }\n\n  return infoDots;\n}","map":{"version":3,"names":["get","lodashGet","dataOverrideTooltipDescription","overrideRuleTooltipDescription","getOptionOverrides","fieldOption","fieldConfig","frames","infoDots","frame","field","fields","value","config","path","push","type","description","tooltip","overrideRuleFound","overrides","some","rule","properties","prop","id"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/state/getOptionOverrides.ts"],"sourcesContent":["import { get as lodashGet } from 'lodash';\n\nimport { DataFrame, FieldConfigPropertyItem, FieldConfigSource } from '@grafana/data';\n\nimport { OptionPaneItemOverrideInfo } from '../types';\n\nexport const dataOverrideTooltipDescription =\n  'Some data fields have this option pre-configured. Add a field override rule to override the pre-configured value.';\nexport const overrideRuleTooltipDescription = 'An override rule exists for this property';\n\nexport function getOptionOverrides(\n  fieldOption: FieldConfigPropertyItem,\n  fieldConfig: FieldConfigSource,\n  frames: DataFrame[] | undefined\n): OptionPaneItemOverrideInfo[] {\n  const infoDots: OptionPaneItemOverrideInfo[] = [];\n\n  // Look for options overriden in data field config\n  if (frames) {\n    for (const frame of frames) {\n      for (const field of frame.fields) {\n        const value = lodashGet(field.config, fieldOption.path);\n        if (value == null) {\n          continue;\n        }\n\n        infoDots.push({\n          type: 'data',\n          description: dataOverrideTooltipDescription,\n          tooltip: dataOverrideTooltipDescription,\n        });\n\n        break;\n      }\n    }\n  }\n\n  const overrideRuleFound = fieldConfig.overrides.some((rule) =>\n    rule.properties.some((prop) => prop.id === fieldOption.id)\n  );\n\n  if (overrideRuleFound) {\n    infoDots.push({\n      type: 'rule',\n      description: overrideRuleTooltipDescription,\n      tooltip: overrideRuleTooltipDescription,\n    });\n  }\n\n  return infoDots;\n}\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,SAAhB,QAAiC,QAAjC;AAMA,OAAO,MAAMC,8BAA8B,GACzC,mHADK;AAEP,OAAO,MAAMC,8BAA8B,GAAG,2CAAvC;AAEP,OAAO,SAASC,kBAAT,CACLC,WADK,EAELC,WAFK,EAGLC,MAHK,EAIyB;EAC9B,MAAMC,QAAsC,GAAG,EAA/C,CAD8B,CAG9B;;EACA,IAAID,MAAJ,EAAY;IACV,KAAK,MAAME,KAAX,IAAoBF,MAApB,EAA4B;MAC1B,KAAK,MAAMG,KAAX,IAAoBD,KAAK,CAACE,MAA1B,EAAkC;QAChC,MAAMC,KAAK,GAAGX,SAAS,CAACS,KAAK,CAACG,MAAP,EAAeR,WAAW,CAACS,IAA3B,CAAvB;;QACA,IAAIF,KAAK,IAAI,IAAb,EAAmB;UACjB;QACD;;QAEDJ,QAAQ,CAACO,IAAT,CAAc;UACZC,IAAI,EAAE,MADM;UAEZC,WAAW,EAAEf,8BAFD;UAGZgB,OAAO,EAAEhB;QAHG,CAAd;QAMA;MACD;IACF;EACF;;EAED,MAAMiB,iBAAiB,GAAGb,WAAW,CAACc,SAAZ,CAAsBC,IAAtB,CAA4BC,IAAD,IACnDA,IAAI,CAACC,UAAL,CAAgBF,IAAhB,CAAsBG,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYpB,WAAW,CAACoB,EAAvD,CADwB,CAA1B;;EAIA,IAAIN,iBAAJ,EAAuB;IACrBX,QAAQ,CAACO,IAAT,CAAc;MACZC,IAAI,EAAE,MADM;MAEZC,WAAW,EAAEd,8BAFD;MAGZe,OAAO,EAAEf;IAHG,CAAd;EAKD;;EAED,OAAOK,QAAP;AACD"},"metadata":{},"sourceType":"module"}