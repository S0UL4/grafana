{"ast":null,"code":"import { describeInterval } from '@grafana/data/src/datetime/rangeutil';\nimport { TimeOptions } from '../types/time';\nexport function parseInterval(value) {\n  const match = value.match(/(\\d+)(\\w+)/);\n\n  if (match) {\n    return [Number(match[1]), match[2]];\n  }\n\n  throw new Error(`Invalid interval description: ${value}`);\n}\nexport function intervalToSeconds(interval) {\n  const {\n    sec,\n    count\n  } = describeInterval(interval);\n  return sec * count;\n}\nexport const timeOptions = Object.entries(TimeOptions).map(([key, value]) => ({\n  label: key[0].toUpperCase() + key.slice(1),\n  value: value\n})); // 1h, 10m and such\n\nexport const positiveDurationValidationPattern = {\n  value: new RegExp(`^\\\\d+(${Object.values(TimeOptions).join('|')})$`),\n  message: `Must be of format \"(number)(unit)\" , for example \"1m\". Available units: ${Object.values(TimeOptions).join(', ')}`\n}; // 1h, 10m or 0 (without units)\n\nexport const durationValidationPattern = {\n  value: new RegExp(`^\\\\d+(${Object.values(TimeOptions).join('|')})|0$`),\n  message: `Must be of format \"(number)(unit)\", for example \"1m\", or just \"0\". Available units: ${Object.values(TimeOptions).join(', ')}`\n};","map":{"version":3,"names":["describeInterval","TimeOptions","parseInterval","value","match","Number","Error","intervalToSeconds","interval","sec","count","timeOptions","Object","entries","map","key","label","toUpperCase","slice","positiveDurationValidationPattern","RegExp","values","join","message","durationValidationPattern"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/utils/time.ts"],"sourcesContent":["import { describeInterval } from '@grafana/data/src/datetime/rangeutil';\n\nimport { TimeOptions } from '../types/time';\n\nexport function parseInterval(value: string): [number, string] {\n  const match = value.match(/(\\d+)(\\w+)/);\n  if (match) {\n    return [Number(match[1]), match[2]];\n  }\n  throw new Error(`Invalid interval description: ${value}`);\n}\n\nexport function intervalToSeconds(interval: string): number {\n  const { sec, count } = describeInterval(interval);\n  return sec * count;\n}\n\nexport const timeOptions = Object.entries(TimeOptions).map(([key, value]) => ({\n  label: key[0].toUpperCase() + key.slice(1),\n  value: value,\n}));\n\n// 1h, 10m and such\nexport const positiveDurationValidationPattern = {\n  value: new RegExp(`^\\\\d+(${Object.values(TimeOptions).join('|')})$`),\n  message: `Must be of format \"(number)(unit)\" , for example \"1m\". Available units: ${Object.values(TimeOptions).join(\n    ', '\n  )}`,\n};\n\n// 1h, 10m or 0 (without units)\nexport const durationValidationPattern = {\n  value: new RegExp(`^\\\\d+(${Object.values(TimeOptions).join('|')})|0$`),\n  message: `Must be of format \"(number)(unit)\", for example \"1m\", or just \"0\". Available units: ${Object.values(\n    TimeOptions\n  ).join(', ')}`,\n};\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,sCAAjC;AAEA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAAwD;EAC7D,MAAMC,KAAK,GAAGD,KAAK,CAACC,KAAN,CAAY,YAAZ,CAAd;;EACA,IAAIA,KAAJ,EAAW;IACT,OAAO,CAACC,MAAM,CAACD,KAAK,CAAC,CAAD,CAAN,CAAP,EAAmBA,KAAK,CAAC,CAAD,CAAxB,CAAP;EACD;;EACD,MAAM,IAAIE,KAAJ,CAAW,iCAAgCH,KAAM,EAAjD,CAAN;AACD;AAED,OAAO,SAASI,iBAAT,CAA2BC,QAA3B,EAAqD;EAC1D,MAAM;IAAEC,GAAF;IAAOC;EAAP,IAAiBV,gBAAgB,CAACQ,QAAD,CAAvC;EACA,OAAOC,GAAG,GAAGC,KAAb;AACD;AAED,OAAO,MAAMC,WAAW,GAAGC,MAAM,CAACC,OAAP,CAAeZ,WAAf,EAA4Ba,GAA5B,CAAgC,CAAC,CAACC,GAAD,EAAMZ,KAAN,CAAD,MAAmB;EAC5Ea,KAAK,EAAED,GAAG,CAAC,CAAD,CAAH,CAAOE,WAAP,KAAuBF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAD8C;EAE5Ef,KAAK,EAAEA;AAFqE,CAAnB,CAAhC,CAApB,C,CAKP;;AACA,OAAO,MAAMgB,iCAAiC,GAAG;EAC/ChB,KAAK,EAAE,IAAIiB,MAAJ,CAAY,SAAQR,MAAM,CAACS,MAAP,CAAcpB,WAAd,EAA2BqB,IAA3B,CAAgC,GAAhC,CAAqC,IAAzD,CADwC;EAE/CC,OAAO,EAAG,2EAA0EX,MAAM,CAACS,MAAP,CAAcpB,WAAd,EAA2BqB,IAA3B,CAClF,IADkF,CAElF;AAJ6C,CAA1C,C,CAOP;;AACA,OAAO,MAAME,yBAAyB,GAAG;EACvCrB,KAAK,EAAE,IAAIiB,MAAJ,CAAY,SAAQR,MAAM,CAACS,MAAP,CAAcpB,WAAd,EAA2BqB,IAA3B,CAAgC,GAAhC,CAAqC,MAAzD,CADgC;EAEvCC,OAAO,EAAG,uFAAsFX,MAAM,CAACS,MAAP,CAC9FpB,WAD8F,EAE9FqB,IAF8F,CAEzF,IAFyF,CAEnF;AAJ0B,CAAlC"},"metadata":{},"sourceType":"module"}