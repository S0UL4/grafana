{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { RefreshEvent } from '@grafana/runtime';\nimport { PanelChrome } from '@grafana/ui';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { PanelRenderer } from 'app/features/panel/components/PanelRenderer';\nimport PanelHeaderCorner from '../../dashgrid/PanelHeader/PanelHeaderCorner';\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { usePanelLatestData } from './usePanelLatestData';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function PanelEditorTableView({\n  width,\n  height,\n  panel,\n  dashboard\n}) {\n  const {\n    data\n  } = usePanelLatestData(panel, {\n    withTransforms: true,\n    withFieldConfig: false\n  }, false);\n  const [options, setOptions] = useState({\n    frameIndex: 0,\n    showHeader: true,\n    showTypeIcons: true\n  }); // Subscribe to panel event\n\n  useEffect(() => {\n    const timeSrv = getTimeSrv();\n    const timeData = applyPanelTimeOverrides(panel, timeSrv.timeRange());\n    const sub = panel.events.subscribe(RefreshEvent, () => {\n      panel.runAllPanelQueries(dashboard.id, dashboard.getTimezone(), timeData, width);\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [panel, dashboard, width]);\n\n  if (!data) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(PanelChrome, {\n    width: width,\n    height: height,\n    padding: \"none\",\n    children: (innerWidth, innerHeight) => {\n      var _data$error;\n\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(PanelHeaderCorner, {\n          panel: panel,\n          error: data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message\n        }), /*#__PURE__*/_jsx(PanelRenderer, {\n          title: \"Raw data\",\n          pluginId: \"table\",\n          width: innerWidth,\n          height: innerHeight,\n          data: data,\n          options: options,\n          onOptionsChange: setOptions\n        })]\n      });\n    }\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","RefreshEvent","PanelChrome","applyPanelTimeOverrides","PanelRenderer","PanelHeaderCorner","getTimeSrv","usePanelLatestData","PanelEditorTableView","width","height","panel","dashboard","data","withTransforms","withFieldConfig","options","setOptions","frameIndex","showHeader","showTypeIcons","timeSrv","timeData","timeRange","sub","events","subscribe","runAllPanelQueries","id","getTimezone","unsubscribe","innerWidth","innerHeight","error","message"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/PanelEditorTableView.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { RefreshEvent } from '@grafana/runtime';\nimport { PanelChrome } from '@grafana/ui';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { PanelRenderer } from 'app/features/panel/components/PanelRenderer';\nimport { PanelOptions } from 'app/plugins/panel/table/models.gen';\n\nimport PanelHeaderCorner from '../../dashgrid/PanelHeader/PanelHeaderCorner';\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../../state';\n\nimport { usePanelLatestData } from './usePanelLatestData';\n\ninterface Props {\n  width: number;\n  height: number;\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\nexport function PanelEditorTableView({ width, height, panel, dashboard }: Props) {\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, false);\n  const [options, setOptions] = useState<PanelOptions>({\n    frameIndex: 0,\n    showHeader: true,\n    showTypeIcons: true,\n  });\n\n  // Subscribe to panel event\n  useEffect(() => {\n    const timeSrv = getTimeSrv();\n    const timeData = applyPanelTimeOverrides(panel, timeSrv.timeRange());\n\n    const sub = panel.events.subscribe(RefreshEvent, () => {\n      panel.runAllPanelQueries(dashboard.id, dashboard.getTimezone(), timeData, width);\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [panel, dashboard, width]);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <PanelChrome width={width} height={height} padding=\"none\">\n      {(innerWidth, innerHeight) => (\n        <>\n          <PanelHeaderCorner panel={panel} error={data?.error?.message} />\n          <PanelRenderer\n            title=\"Raw data\"\n            pluginId=\"table\"\n            width={innerWidth}\n            height={innerHeight}\n            data={data}\n            options={options}\n            onOptionsChange={setOptions}\n          />\n        </>\n      )}\n    </PanelChrome>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,uBAAT,QAAwC,oCAAxC;AACA,SAASC,aAAT,QAA8B,6CAA9B;AAGA,OAAOC,iBAAP,MAA8B,8CAA9B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAGA,SAASC,kBAAT,QAAmC,sBAAnC;;;;AASA,OAAO,SAASC,oBAAT,CAA8B;EAAEC,KAAF;EAASC,MAAT;EAAiBC,KAAjB;EAAwBC;AAAxB,CAA9B,EAA0E;EAC/E,MAAM;IAAEC;EAAF,IAAWN,kBAAkB,CAACI,KAAD,EAAQ;IAAEG,cAAc,EAAE,IAAlB;IAAwBC,eAAe,EAAE;EAAzC,CAAR,EAA0D,KAA1D,CAAnC;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAe;IACnDkB,UAAU,EAAE,CADuC;IAEnDC,UAAU,EAAE,IAFuC;IAGnDC,aAAa,EAAE;EAHoC,CAAf,CAAtC,CAF+E,CAQ/E;;EACArB,SAAS,CAAC,MAAM;IACd,MAAMsB,OAAO,GAAGf,UAAU,EAA1B;IACA,MAAMgB,QAAQ,GAAGnB,uBAAuB,CAACQ,KAAD,EAAQU,OAAO,CAACE,SAAR,EAAR,CAAxC;IAEA,MAAMC,GAAG,GAAGb,KAAK,CAACc,MAAN,CAAaC,SAAb,CAAuBzB,YAAvB,EAAqC,MAAM;MACrDU,KAAK,CAACgB,kBAAN,CAAyBf,SAAS,CAACgB,EAAnC,EAAuChB,SAAS,CAACiB,WAAV,EAAvC,EAAgEP,QAAhE,EAA0Eb,KAA1E;IACD,CAFW,CAAZ;IAGA,OAAO,MAAM;MACXe,GAAG,CAACM,WAAJ;IACD,CAFD;EAGD,CAVQ,EAUN,CAACnB,KAAD,EAAQC,SAAR,EAAmBH,KAAnB,CAVM,CAAT;;EAYA,IAAI,CAACI,IAAL,EAAW;IACT,OAAO,IAAP;EACD;;EAED,oBACE,KAAC,WAAD;IAAa,KAAK,EAAEJ,KAApB;IAA2B,MAAM,EAAEC,MAAnC;IAA2C,OAAO,EAAC,MAAnD;IAAA,UACG,CAACqB,UAAD,EAAaC,WAAb;MAAA;;MAAA,oBACC;QAAA,wBACE,KAAC,iBAAD;UAAmB,KAAK,EAAErB,KAA1B;UAAiC,KAAK,EAAEE,IAAF,aAAEA,IAAF,sCAAEA,IAAI,CAAEoB,KAAR,gDAAE,YAAaC;QAArD,EADF,eAEE,KAAC,aAAD;UACE,KAAK,EAAC,UADR;UAEE,QAAQ,EAAC,OAFX;UAGE,KAAK,EAAEH,UAHT;UAIE,MAAM,EAAEC,WAJV;UAKE,IAAI,EAAEnB,IALR;UAME,OAAO,EAAEG,OANX;UAOE,eAAe,EAAEC;QAPnB,EAFF;MAAA,EADD;IAAA;EADH,EADF;AAkBD"},"metadata":{},"sourceType":"module"}