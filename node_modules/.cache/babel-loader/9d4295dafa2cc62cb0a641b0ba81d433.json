{"ast":null,"code":"var _div, _div2;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport { saveAs } from 'file-saver';\nimport React, { PureComponent } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { applyFieldOverrides, applyRawFieldOverrides, DataTransformerID, dateTimeFormat, dateTimeFormatISO, MutableDataFrame, toCSV, transformDataFrame } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Spinner, Table } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { dataFrameToLogsModel } from 'app/core/logs_model';\nimport { transformToJaeger } from 'app/plugins/datasource/jaeger/responseTransform';\nimport { transformToOTLP } from 'app/plugins/datasource/tempo/resultTransformer';\nimport { transformToZipkin } from 'app/plugins/datasource/zipkin/utils/transforms';\nimport { InspectDataOptions } from './InspectDataOptions';\nimport { getPanelInspectorStyles } from './styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class InspectDataTab extends PureComponent {\n  constructor(props) {\n    var _props$data;\n\n    super(props);\n\n    _defineProperty(this, \"exportCsv\", (dataFrame, csvConfig = {}) => {\n      const {\n        panel\n      } = this.props;\n      const {\n        transformId\n      } = this.state;\n      const dataFrameCsv = toCSV([dataFrame], csvConfig);\n      const blob = new Blob([String.fromCharCode(0xfeff), dataFrameCsv], {\n        type: 'text/csv;charset=utf-8'\n      });\n      const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n      const transformation = transformId !== DataTransformerID.noop ? '-as-' + transformId.toLocaleLowerCase() : '';\n      const fileName = `${displayTitle}-data${transformation}-${dateTimeFormat(new Date())}.csv`;\n      saveAs(blob, fileName);\n    });\n\n    _defineProperty(this, \"exportLogsAsTxt\", () => {\n      var _logsModel$meta;\n\n      const {\n        data,\n        panel,\n        app\n      } = this.props;\n      reportInteraction('grafana_logs_download_logs_clicked', {\n        app,\n        format: 'logs'\n      });\n      const logsModel = dataFrameToLogsModel(data || [], undefined);\n      let textToDownload = '';\n      (_logsModel$meta = logsModel.meta) === null || _logsModel$meta === void 0 ? void 0 : _logsModel$meta.forEach(metaItem => {\n        const string = `${metaItem.label}: ${JSON.stringify(metaItem.value)}\\n`;\n        textToDownload = textToDownload + string;\n      });\n      textToDownload = textToDownload + '\\n\\n';\n      logsModel.rows.forEach(row => {\n        const newRow = dateTimeFormatISO(row.timeEpochMs) + '\\t' + row.entry + '\\n';\n        textToDownload = textToDownload + newRow;\n      });\n      const blob = new Blob([textToDownload], {\n        type: 'text/plain;charset=utf-8'\n      });\n      const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n      const fileName = `${displayTitle}-logs-${dateTimeFormat(new Date())}.txt`;\n      saveAs(blob, fileName);\n    });\n\n    _defineProperty(this, \"exportTracesAsJson\", () => {\n      var _df$meta2, _df$meta2$custom;\n\n      const {\n        data,\n        panel\n      } = this.props;\n\n      if (!data) {\n        return;\n      }\n\n      for (const df of data) {\n        var _df$meta;\n\n        // Only export traces\n        if (((_df$meta = df.meta) === null || _df$meta === void 0 ? void 0 : _df$meta.preferredVisualisationType) !== 'trace') {\n          continue;\n        }\n\n        switch ((_df$meta2 = df.meta) === null || _df$meta2 === void 0 ? void 0 : (_df$meta2$custom = _df$meta2.custom) === null || _df$meta2$custom === void 0 ? void 0 : _df$meta2$custom.traceFormat) {\n          case 'jaeger':\n            {\n              let res = transformToJaeger(new MutableDataFrame(df));\n              this.saveTraceJson(res, panel);\n              break;\n            }\n\n          case 'zipkin':\n            {\n              let res = transformToZipkin(new MutableDataFrame(df));\n              this.saveTraceJson(res, panel);\n              break;\n            }\n\n          case 'otlp':\n          default:\n            {\n              let res = transformToOTLP(new MutableDataFrame(df));\n              this.saveTraceJson(res, panel);\n              break;\n            }\n        }\n      }\n    });\n\n    _defineProperty(this, \"saveTraceJson\", (json, panel) => {\n      const blob = new Blob([JSON.stringify(json)], {\n        type: 'application/json'\n      });\n      const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n      const fileName = `${displayTitle}-traces-${dateTimeFormat(new Date())}.json`;\n      saveAs(blob, fileName);\n    });\n\n    _defineProperty(this, \"exportServiceGraph\", () => {\n      const {\n        data,\n        panel\n      } = this.props;\n\n      if (!data) {\n        return;\n      }\n\n      const blob = new Blob([JSON.stringify(data)], {\n        type: 'application/json'\n      });\n      const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n      const fileName = `${displayTitle}-service-graph-${dateTimeFormat(new Date())}.json`;\n      saveAs(blob, fileName);\n    });\n\n    _defineProperty(this, \"onDataFrameChange\", item => {\n      this.setState({\n        transformId: item.value === DataTransformerID.seriesToColumns ? DataTransformerID.seriesToColumns : DataTransformerID.noop,\n        dataFrameIndex: typeof item.value === 'number' ? item.value : 0,\n        selectedDataFrame: item.value\n      });\n    });\n\n    _defineProperty(this, \"toggleDownloadForExcel\", () => {\n      this.setState(prevState => ({\n        downloadForExcel: !prevState.downloadForExcel\n      }));\n    });\n\n    this.state = {\n      selectedDataFrame: 0,\n      dataFrameIndex: 0,\n      transformId: DataTransformerID.noop,\n      transformationOptions: buildTransformationOptions(),\n      transformedData: (_props$data = props.data) !== null && _props$data !== void 0 ? _props$data : [],\n      downloadForExcel: false\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!this.props.data) {\n      this.setState({\n        transformedData: []\n      });\n      return;\n    }\n\n    if (this.props.options.withTransforms) {\n      this.setState({\n        transformedData: this.props.data\n      });\n      return;\n    }\n\n    if (prevProps.data !== this.props.data || prevState.transformId !== this.state.transformId) {\n      const currentTransform = this.state.transformationOptions.find(item => item.value === this.state.transformId);\n\n      if (currentTransform && currentTransform.transformer.id !== DataTransformerID.noop) {\n        const selectedDataFrame = this.state.selectedDataFrame;\n        const dataFrameIndex = this.state.dataFrameIndex;\n        const subscription = transformDataFrame([currentTransform.transformer], this.props.data).subscribe(data => {\n          this.setState({\n            transformedData: data,\n            selectedDataFrame,\n            dataFrameIndex\n          }, () => subscription.unsubscribe());\n        });\n        return;\n      }\n\n      this.setState({\n        transformedData: this.props.data\n      });\n      return;\n    }\n  }\n\n  getProcessedData() {\n    const {\n      options,\n      panel,\n      timeZone\n    } = this.props;\n    const data = this.state.transformedData;\n\n    if (!options.withFieldConfig || !panel) {\n      return applyRawFieldOverrides(data);\n    } // We need to apply field config even though it was already applied in the PanelQueryRunner.\n    // That's because transformers create new fields and data frames, so i.e. display processor is no longer there\n\n\n    return applyFieldOverrides({\n      data,\n      theme: config.theme2,\n      fieldConfig: panel.fieldConfig,\n      timeZone,\n      replaceVariables: value => {\n        return value;\n      }\n    });\n  }\n\n  render() {\n    const {\n      isLoading,\n      options,\n      data,\n      panel,\n      onOptionsChange,\n      app\n    } = this.props;\n    const {\n      dataFrameIndex,\n      transformId,\n      transformationOptions,\n      selectedDataFrame,\n      downloadForExcel\n    } = this.state;\n    const styles = getPanelInspectorStyles();\n\n    if (isLoading) {\n      return _div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(Spinner, {\n          inline: true\n        }), \" Loading\"]\n      }));\n    }\n\n    const dataFrames = this.getProcessedData();\n\n    if (!dataFrames || !dataFrames.length) {\n      return _div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n        children: \"No Data\"\n      }));\n    } // let's make sure we don't try to render a frame that doesn't exists\n\n\n    const index = !dataFrames[dataFrameIndex] ? 0 : dataFrameIndex;\n    const dataFrame = dataFrames[index];\n    const hasLogs = dataFrames.some(df => {\n      var _df$meta3;\n\n      return (df === null || df === void 0 ? void 0 : (_df$meta3 = df.meta) === null || _df$meta3 === void 0 ? void 0 : _df$meta3.preferredVisualisationType) === 'logs';\n    });\n    const hasTraces = dataFrames.some(df => {\n      var _df$meta4;\n\n      return (df === null || df === void 0 ? void 0 : (_df$meta4 = df.meta) === null || _df$meta4 === void 0 ? void 0 : _df$meta4.preferredVisualisationType) === 'trace';\n    });\n    const hasServiceGraph = dataFrames.some(df => {\n      var _df$meta5;\n\n      return (df === null || df === void 0 ? void 0 : (_df$meta5 = df.meta) === null || _df$meta5 === void 0 ? void 0 : _df$meta5.preferredVisualisationType) === 'nodeGraph';\n    });\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.wrap,\n      \"aria-label\": selectors.components.PanelInspector.Data.content,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.toolbar,\n        children: [/*#__PURE__*/_jsx(InspectDataOptions, {\n          data: data,\n          panel: panel,\n          options: options,\n          dataFrames: dataFrames,\n          transformId: transformId,\n          transformationOptions: transformationOptions,\n          selectedDataFrame: selectedDataFrame,\n          downloadForExcel: downloadForExcel,\n          onOptionsChange: onOptionsChange,\n          onDataFrameChange: this.onDataFrameChange,\n          toggleDownloadForExcel: this.toggleDownloadForExcel\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"primary\",\n          onClick: () => {\n            if (hasLogs) {\n              reportInteraction('grafana_logs_download_clicked', {\n                app,\n                format: 'csv'\n              });\n            }\n\n            this.exportCsv(dataFrames[dataFrameIndex], {\n              useExcelHeader: this.state.downloadForExcel\n            });\n          },\n          className: css`\n              margin-bottom: 10px;\n            `,\n          children: \"Download CSV\"\n        }), hasLogs && /*#__PURE__*/_jsx(Button, {\n          variant: \"primary\",\n          onClick: this.exportLogsAsTxt,\n          className: css`\n                margin-bottom: 10px;\n                margin-left: 10px;\n              `,\n          children: \"Download logs\"\n        }), hasTraces && /*#__PURE__*/_jsx(Button, {\n          variant: \"primary\",\n          onClick: this.exportTracesAsJson,\n          className: css`\n                margin-bottom: 10px;\n                margin-left: 10px;\n              `,\n          children: \"Download traces\"\n        }), hasServiceGraph && /*#__PURE__*/_jsx(Button, {\n          variant: \"primary\",\n          onClick: this.exportServiceGraph,\n          className: css`\n                margin-bottom: 10px;\n                margin-left: 10px;\n              `,\n          children: \"Download service graph\"\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.content,\n        children: /*#__PURE__*/_jsx(AutoSizer, {\n          children: ({\n            width,\n            height\n          }) => {\n            if (width === 0) {\n              return null;\n            }\n\n            return /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                width,\n                height\n              },\n              children: /*#__PURE__*/_jsx(Table, {\n                width: width,\n                height: height,\n                data: dataFrame,\n                showTypeIcons: true\n              })\n            });\n          }\n        })\n      })]\n    });\n  }\n\n}\n\nfunction buildTransformationOptions() {\n  const transformations = [{\n    value: DataTransformerID.seriesToColumns,\n    label: 'Series joined by time',\n    transformer: {\n      id: DataTransformerID.seriesToColumns,\n      options: {\n        byField: 'Time'\n      }\n    }\n  }];\n  return transformations;\n}","map":{"version":3,"names":["css","saveAs","React","PureComponent","AutoSizer","applyFieldOverrides","applyRawFieldOverrides","DataTransformerID","dateTimeFormat","dateTimeFormatISO","MutableDataFrame","toCSV","transformDataFrame","selectors","reportInteraction","Button","Spinner","Table","config","dataFrameToLogsModel","transformToJaeger","transformToOTLP","transformToZipkin","InspectDataOptions","getPanelInspectorStyles","InspectDataTab","constructor","props","dataFrame","csvConfig","panel","transformId","state","dataFrameCsv","blob","Blob","String","fromCharCode","type","displayTitle","getDisplayTitle","transformation","noop","toLocaleLowerCase","fileName","Date","data","app","format","logsModel","undefined","textToDownload","meta","forEach","metaItem","string","label","JSON","stringify","value","rows","row","newRow","timeEpochMs","entry","df","preferredVisualisationType","custom","traceFormat","res","saveTraceJson","json","item","setState","seriesToColumns","dataFrameIndex","selectedDataFrame","prevState","downloadForExcel","transformationOptions","buildTransformationOptions","transformedData","componentDidUpdate","prevProps","options","withTransforms","currentTransform","find","transformer","id","subscription","subscribe","unsubscribe","getProcessedData","timeZone","withFieldConfig","theme","theme2","fieldConfig","replaceVariables","render","isLoading","onOptionsChange","styles","dataFrames","length","index","hasLogs","some","hasTraces","hasServiceGraph","wrap","components","PanelInspector","Data","content","toolbar","onDataFrameChange","toggleDownloadForExcel","exportCsv","useExcelHeader","exportLogsAsTxt","exportTracesAsJson","exportServiceGraph","width","height","transformations","byField"],"sources":["/home/soula/grafana/public/app/features/inspector/InspectDataTab.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { saveAs } from 'file-saver';\nimport React, { PureComponent } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport {\n  applyFieldOverrides,\n  applyRawFieldOverrides,\n  CSVConfig,\n  DataFrame,\n  DataTransformerID,\n  dateTimeFormat,\n  dateTimeFormatISO,\n  MutableDataFrame,\n  SelectableValue,\n  toCSV,\n  transformDataFrame,\n  TimeZone,\n  CoreApp,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Spinner, Table } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { dataFrameToLogsModel } from 'app/core/logs_model';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { GetDataOptions } from 'app/features/query/state/PanelQueryRunner';\nimport { transformToJaeger } from 'app/plugins/datasource/jaeger/responseTransform';\nimport { transformToOTLP } from 'app/plugins/datasource/tempo/resultTransformer';\nimport { transformToZipkin } from 'app/plugins/datasource/zipkin/utils/transforms';\n\nimport { InspectDataOptions } from './InspectDataOptions';\nimport { getPanelInspectorStyles } from './styles';\n\ninterface Props {\n  isLoading: boolean;\n  options: GetDataOptions;\n  timeZone: TimeZone;\n  app?: CoreApp;\n  data?: DataFrame[];\n  panel?: PanelModel;\n  onOptionsChange?: (options: GetDataOptions) => void;\n}\n\ninterface State {\n  /** The string is seriesToColumns transformation. Otherwise it is a dataframe index */\n  selectedDataFrame: number | DataTransformerID;\n  transformId: DataTransformerID;\n  dataFrameIndex: number;\n  transformationOptions: Array<SelectableValue<DataTransformerID>>;\n  transformedData: DataFrame[];\n  downloadForExcel: boolean;\n}\n\nexport class InspectDataTab extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      selectedDataFrame: 0,\n      dataFrameIndex: 0,\n      transformId: DataTransformerID.noop,\n      transformationOptions: buildTransformationOptions(),\n      transformedData: props.data ?? [],\n      downloadForExcel: false,\n    };\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (!this.props.data) {\n      this.setState({ transformedData: [] });\n      return;\n    }\n\n    if (this.props.options.withTransforms) {\n      this.setState({ transformedData: this.props.data });\n      return;\n    }\n\n    if (prevProps.data !== this.props.data || prevState.transformId !== this.state.transformId) {\n      const currentTransform = this.state.transformationOptions.find((item) => item.value === this.state.transformId);\n\n      if (currentTransform && currentTransform.transformer.id !== DataTransformerID.noop) {\n        const selectedDataFrame = this.state.selectedDataFrame;\n        const dataFrameIndex = this.state.dataFrameIndex;\n        const subscription = transformDataFrame([currentTransform.transformer], this.props.data).subscribe((data) => {\n          this.setState({ transformedData: data, selectedDataFrame, dataFrameIndex }, () => subscription.unsubscribe());\n        });\n        return;\n      }\n\n      this.setState({ transformedData: this.props.data });\n      return;\n    }\n  }\n\n  exportCsv = (dataFrame: DataFrame, csvConfig: CSVConfig = {}) => {\n    const { panel } = this.props;\n    const { transformId } = this.state;\n\n    const dataFrameCsv = toCSV([dataFrame], csvConfig);\n\n    const blob = new Blob([String.fromCharCode(0xfeff), dataFrameCsv], {\n      type: 'text/csv;charset=utf-8',\n    });\n    const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n    const transformation = transformId !== DataTransformerID.noop ? '-as-' + transformId.toLocaleLowerCase() : '';\n    const fileName = `${displayTitle}-data${transformation}-${dateTimeFormat(new Date())}.csv`;\n    saveAs(blob, fileName);\n  };\n\n  exportLogsAsTxt = () => {\n    const { data, panel, app } = this.props;\n    reportInteraction('grafana_logs_download_logs_clicked', {\n      app,\n      format: 'logs',\n    });\n    const logsModel = dataFrameToLogsModel(data || [], undefined);\n    let textToDownload = '';\n\n    logsModel.meta?.forEach((metaItem) => {\n      const string = `${metaItem.label}: ${JSON.stringify(metaItem.value)}\\n`;\n      textToDownload = textToDownload + string;\n    });\n    textToDownload = textToDownload + '\\n\\n';\n\n    logsModel.rows.forEach((row) => {\n      const newRow = dateTimeFormatISO(row.timeEpochMs) + '\\t' + row.entry + '\\n';\n      textToDownload = textToDownload + newRow;\n    });\n\n    const blob = new Blob([textToDownload], {\n      type: 'text/plain;charset=utf-8',\n    });\n    const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n    const fileName = `${displayTitle}-logs-${dateTimeFormat(new Date())}.txt`;\n    saveAs(blob, fileName);\n  };\n\n  exportTracesAsJson = () => {\n    const { data, panel } = this.props;\n    if (!data) {\n      return;\n    }\n\n    for (const df of data) {\n      // Only export traces\n      if (df.meta?.preferredVisualisationType !== 'trace') {\n        continue;\n      }\n\n      switch (df.meta?.custom?.traceFormat) {\n        case 'jaeger': {\n          let res = transformToJaeger(new MutableDataFrame(df));\n          this.saveTraceJson(res, panel);\n          break;\n        }\n        case 'zipkin': {\n          let res = transformToZipkin(new MutableDataFrame(df));\n          this.saveTraceJson(res, panel);\n          break;\n        }\n        case 'otlp':\n        default: {\n          let res = transformToOTLP(new MutableDataFrame(df));\n          this.saveTraceJson(res, panel);\n          break;\n        }\n      }\n    }\n  };\n\n  saveTraceJson = (json: any, panel?: PanelModel) => {\n    const blob = new Blob([JSON.stringify(json)], {\n      type: 'application/json',\n    });\n    const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n    const fileName = `${displayTitle}-traces-${dateTimeFormat(new Date())}.json`;\n    saveAs(blob, fileName);\n  };\n\n  exportServiceGraph = () => {\n    const { data, panel } = this.props;\n    if (!data) {\n      return;\n    }\n\n    const blob = new Blob([JSON.stringify(data)], {\n      type: 'application/json',\n    });\n    const displayTitle = panel ? panel.getDisplayTitle() : 'Explore';\n    const fileName = `${displayTitle}-service-graph-${dateTimeFormat(new Date())}.json`;\n    saveAs(blob, fileName);\n  };\n\n  onDataFrameChange = (item: SelectableValue<DataTransformerID | number>) => {\n    this.setState({\n      transformId:\n        item.value === DataTransformerID.seriesToColumns ? DataTransformerID.seriesToColumns : DataTransformerID.noop,\n      dataFrameIndex: typeof item.value === 'number' ? item.value : 0,\n      selectedDataFrame: item.value!,\n    });\n  };\n\n  toggleDownloadForExcel = () => {\n    this.setState((prevState) => ({\n      downloadForExcel: !prevState.downloadForExcel,\n    }));\n  };\n\n  getProcessedData(): DataFrame[] {\n    const { options, panel, timeZone } = this.props;\n    const data = this.state.transformedData;\n\n    if (!options.withFieldConfig || !panel) {\n      return applyRawFieldOverrides(data);\n    }\n\n    // We need to apply field config even though it was already applied in the PanelQueryRunner.\n    // That's because transformers create new fields and data frames, so i.e. display processor is no longer there\n    return applyFieldOverrides({\n      data,\n      theme: config.theme2,\n      fieldConfig: panel.fieldConfig,\n      timeZone,\n      replaceVariables: (value: string) => {\n        return value;\n      },\n    });\n  }\n\n  render() {\n    const { isLoading, options, data, panel, onOptionsChange, app } = this.props;\n    const { dataFrameIndex, transformId, transformationOptions, selectedDataFrame, downloadForExcel } = this.state;\n    const styles = getPanelInspectorStyles();\n\n    if (isLoading) {\n      return (\n        <div>\n          <Spinner inline={true} /> Loading\n        </div>\n      );\n    }\n\n    const dataFrames = this.getProcessedData();\n\n    if (!dataFrames || !dataFrames.length) {\n      return <div>No Data</div>;\n    }\n\n    // let's make sure we don't try to render a frame that doesn't exists\n    const index = !dataFrames[dataFrameIndex] ? 0 : dataFrameIndex;\n    const dataFrame = dataFrames[index];\n    const hasLogs = dataFrames.some((df) => df?.meta?.preferredVisualisationType === 'logs');\n    const hasTraces = dataFrames.some((df) => df?.meta?.preferredVisualisationType === 'trace');\n    const hasServiceGraph = dataFrames.some((df) => df?.meta?.preferredVisualisationType === 'nodeGraph');\n\n    return (\n      <div className={styles.wrap} aria-label={selectors.components.PanelInspector.Data.content}>\n        <div className={styles.toolbar}>\n          <InspectDataOptions\n            data={data}\n            panel={panel}\n            options={options}\n            dataFrames={dataFrames}\n            transformId={transformId}\n            transformationOptions={transformationOptions}\n            selectedDataFrame={selectedDataFrame}\n            downloadForExcel={downloadForExcel}\n            onOptionsChange={onOptionsChange}\n            onDataFrameChange={this.onDataFrameChange}\n            toggleDownloadForExcel={this.toggleDownloadForExcel}\n          />\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              if (hasLogs) {\n                reportInteraction('grafana_logs_download_clicked', {\n                  app,\n                  format: 'csv',\n                });\n              }\n              this.exportCsv(dataFrames[dataFrameIndex], { useExcelHeader: this.state.downloadForExcel });\n            }}\n            className={css`\n              margin-bottom: 10px;\n            `}\n          >\n            Download CSV\n          </Button>\n          {hasLogs && (\n            <Button\n              variant=\"primary\"\n              onClick={this.exportLogsAsTxt}\n              className={css`\n                margin-bottom: 10px;\n                margin-left: 10px;\n              `}\n            >\n              Download logs\n            </Button>\n          )}\n          {hasTraces && (\n            <Button\n              variant=\"primary\"\n              onClick={this.exportTracesAsJson}\n              className={css`\n                margin-bottom: 10px;\n                margin-left: 10px;\n              `}\n            >\n              Download traces\n            </Button>\n          )}\n          {hasServiceGraph && (\n            <Button\n              variant=\"primary\"\n              onClick={this.exportServiceGraph}\n              className={css`\n                margin-bottom: 10px;\n                margin-left: 10px;\n              `}\n            >\n              Download service graph\n            </Button>\n          )}\n        </div>\n        <div className={styles.content}>\n          <AutoSizer>\n            {({ width, height }) => {\n              if (width === 0) {\n                return null;\n              }\n\n              return (\n                <div style={{ width, height }}>\n                  <Table width={width} height={height} data={dataFrame} showTypeIcons={true} />\n                </div>\n              );\n            }}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction buildTransformationOptions() {\n  const transformations: Array<SelectableValue<DataTransformerID>> = [\n    {\n      value: DataTransformerID.seriesToColumns,\n      label: 'Series joined by time',\n      transformer: {\n        id: DataTransformerID.seriesToColumns,\n        options: { byField: 'Time' },\n      },\n    },\n  ];\n\n  return transformations;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}