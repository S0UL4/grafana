{"ast":null,"code":"/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\nexport let PasswordFieldEnum;\n/**\n * Basic shape for settings controllers in at the moment mostly angular data source plugins.\n */\n\n(function (PasswordFieldEnum) {\n  PasswordFieldEnum[\"Password\"] = \"password\";\n  PasswordFieldEnum[\"BasicAuthPassword\"] = \"basicAuthPassword\";\n})(PasswordFieldEnum || (PasswordFieldEnum = {}));\n\nexport const createResetHandler = (ctrl, field) => event => {\n  event.preventDefault(); // Reset also normal plain text password to remove it and only save it in secureJsonData.\n\n  ctrl.current[field] = undefined;\n  ctrl.current.secureJsonFields[field] = false;\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = '';\n};\nexport const createChangeHandler = (ctrl, field) => event => {\n  ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n  ctrl.current.secureJsonData[field] = event.currentTarget.value;\n};","map":{"version":3,"names":["PasswordFieldEnum","createResetHandler","ctrl","field","event","preventDefault","current","undefined","secureJsonFields","secureJsonData","createChangeHandler","currentTarget","value"],"sources":["/home/soula/grafana/public/app/features/datasources/utils/passwordHandlers.ts"],"sourcesContent":["/**\n * Set of handlers for secure password field in Angular components. They handle backward compatibility with\n * passwords stored in plain text fields.\n */\n\nimport { SyntheticEvent } from 'react';\n\nexport enum PasswordFieldEnum {\n  Password = 'password',\n  BasicAuthPassword = 'basicAuthPassword',\n}\n\n/**\n * Basic shape for settings controllers in at the moment mostly angular data source plugins.\n */\nexport type Ctrl = {\n  current: {\n    secureJsonFields: {\n      [key: string]: boolean;\n    };\n    secureJsonData?: {\n      [key: string]: string;\n    };\n    password?: string;\n    basicAuthPassword?: string;\n  };\n};\n\nexport const createResetHandler =\n  (ctrl: Ctrl, field: PasswordFieldEnum) => (event: SyntheticEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    // Reset also normal plain text password to remove it and only save it in secureJsonData.\n    ctrl.current[field] = undefined;\n    ctrl.current.secureJsonFields[field] = false;\n    ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n    ctrl.current.secureJsonData[field] = '';\n  };\n\nexport const createChangeHandler =\n  (ctrl: any, field: PasswordFieldEnum) => (event: SyntheticEvent<HTMLInputElement>) => {\n    ctrl.current.secureJsonData = ctrl.current.secureJsonData || {};\n    ctrl.current.secureJsonData[field] = event.currentTarget.value;\n  };\n"],"mappings":"AAAA;AACA;AACA;AACA;AAIA,WAAYA,iBAAZ;AAKA;AACA;AACA;;WAPYA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAqBZ,OAAO,MAAMC,kBAAkB,GAC7B,CAACC,IAAD,EAAaC,KAAb,KAA2CC,KAAD,IAA6C;EACrFA,KAAK,CAACC,cAAN,GADqF,CAErF;;EACAH,IAAI,CAACI,OAAL,CAAaH,KAAb,IAAsBI,SAAtB;EACAL,IAAI,CAACI,OAAL,CAAaE,gBAAb,CAA8BL,KAA9B,IAAuC,KAAvC;EACAD,IAAI,CAACI,OAAL,CAAaG,cAAb,GAA8BP,IAAI,CAACI,OAAL,CAAaG,cAAb,IAA+B,EAA7D;EACAP,IAAI,CAACI,OAAL,CAAaG,cAAb,CAA4BN,KAA5B,IAAqC,EAArC;AACD,CARI;AAUP,OAAO,MAAMO,mBAAmB,GAC9B,CAACR,IAAD,EAAYC,KAAZ,KAA0CC,KAAD,IAA6C;EACpFF,IAAI,CAACI,OAAL,CAAaG,cAAb,GAA8BP,IAAI,CAACI,OAAL,CAAaG,cAAb,IAA+B,EAA7D;EACAP,IAAI,CAACI,OAAL,CAAaG,cAAb,CAA4BN,KAA5B,IAAqCC,KAAK,CAACO,aAAN,CAAoBC,KAAzD;AACD,CAJI"},"metadata":{},"sourceType":"module"}