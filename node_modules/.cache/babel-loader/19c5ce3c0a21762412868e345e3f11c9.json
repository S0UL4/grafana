{"ast":null,"code":"import { each, has } from 'lodash';\nimport * as dateMath from './datemath';\nimport { timeZoneAbbrevation, dateTimeFormat, dateTimeFormatTimeAgo } from './formatter';\nimport { isDateTime, dateTime } from './moment_wrapper';\nimport { dateTimeParse } from './parser';\nconst spans = {\n  s: {\n    display: 'second'\n  },\n  m: {\n    display: 'minute'\n  },\n  h: {\n    display: 'hour'\n  },\n  d: {\n    display: 'day'\n  },\n  w: {\n    display: 'week'\n  },\n  M: {\n    display: 'month'\n  },\n  y: {\n    display: 'year'\n  }\n};\nconst rangeOptions = [{\n  from: 'now/d',\n  to: 'now/d',\n  display: 'Today'\n}, {\n  from: 'now/d',\n  to: 'now',\n  display: 'Today so far'\n}, {\n  from: 'now/w',\n  to: 'now/w',\n  display: 'This week'\n}, {\n  from: 'now/w',\n  to: 'now',\n  display: 'This week so far'\n}, {\n  from: 'now/M',\n  to: 'now/M',\n  display: 'This month'\n}, {\n  from: 'now/M',\n  to: 'now',\n  display: 'This month so far'\n}, {\n  from: 'now/y',\n  to: 'now/y',\n  display: 'This year'\n}, {\n  from: 'now/y',\n  to: 'now',\n  display: 'This year so far'\n}, {\n  from: 'now-1d/d',\n  to: 'now-1d/d',\n  display: 'Yesterday'\n}, {\n  from: 'now-2d/d',\n  to: 'now-2d/d',\n  display: 'Day before yesterday'\n}, {\n  from: 'now-7d/d',\n  to: 'now-7d/d',\n  display: 'This day last week'\n}, {\n  from: 'now-1w/w',\n  to: 'now-1w/w',\n  display: 'Previous week'\n}, {\n  from: 'now-1M/M',\n  to: 'now-1M/M',\n  display: 'Previous month'\n}, {\n  from: 'now-1Q/fQ',\n  to: 'now-1Q/fQ',\n  display: 'Previous fiscal quarter'\n}, {\n  from: 'now-1y/y',\n  to: 'now-1y/y',\n  display: 'Previous year'\n}, {\n  from: 'now-1y/fy',\n  to: 'now-1y/fy',\n  display: 'Previous fiscal year'\n}, {\n  from: 'now-5m',\n  to: 'now',\n  display: 'Last 5 minutes'\n}, {\n  from: 'now-15m',\n  to: 'now',\n  display: 'Last 15 minutes'\n}, {\n  from: 'now-30m',\n  to: 'now',\n  display: 'Last 30 minutes'\n}, {\n  from: 'now-1h',\n  to: 'now',\n  display: 'Last 1 hour'\n}, {\n  from: 'now-3h',\n  to: 'now',\n  display: 'Last 3 hours'\n}, {\n  from: 'now-6h',\n  to: 'now',\n  display: 'Last 6 hours'\n}, {\n  from: 'now-12h',\n  to: 'now',\n  display: 'Last 12 hours'\n}, {\n  from: 'now-24h',\n  to: 'now',\n  display: 'Last 24 hours'\n}, {\n  from: 'now-2d',\n  to: 'now',\n  display: 'Last 2 days'\n}, {\n  from: 'now-7d',\n  to: 'now',\n  display: 'Last 7 days'\n}, {\n  from: 'now-30d',\n  to: 'now',\n  display: 'Last 30 days'\n}, {\n  from: 'now-90d',\n  to: 'now',\n  display: 'Last 90 days'\n}, {\n  from: 'now-6M',\n  to: 'now',\n  display: 'Last 6 months'\n}, {\n  from: 'now-1y',\n  to: 'now',\n  display: 'Last 1 year'\n}, {\n  from: 'now-2y',\n  to: 'now',\n  display: 'Last 2 years'\n}, {\n  from: 'now-5y',\n  to: 'now',\n  display: 'Last 5 years'\n}, {\n  from: 'now/fQ',\n  to: 'now',\n  display: 'This fiscal quarter so far'\n}, {\n  from: 'now/fQ',\n  to: 'now/fQ',\n  display: 'This fiscal quarter'\n}, {\n  from: 'now/fy',\n  to: 'now',\n  display: 'This fiscal year so far'\n}, {\n  from: 'now/fy',\n  to: 'now/fy',\n  display: 'This fiscal year'\n}];\nconst hiddenRangeOptions = [{\n  from: 'now',\n  to: 'now+1m',\n  display: 'Next minute'\n}, {\n  from: 'now',\n  to: 'now+5m',\n  display: 'Next 5 minutes'\n}, {\n  from: 'now',\n  to: 'now+15m',\n  display: 'Next 15 minutes'\n}, {\n  from: 'now',\n  to: 'now+30m',\n  display: 'Next 30 minutes'\n}, {\n  from: 'now',\n  to: 'now+1h',\n  display: 'Next hour'\n}, {\n  from: 'now',\n  to: 'now+3h',\n  display: 'Next 3 hours'\n}, {\n  from: 'now',\n  to: 'now+6h',\n  display: 'Next 6 hours'\n}, {\n  from: 'now',\n  to: 'now+12h',\n  display: 'Next 12 hours'\n}, {\n  from: 'now',\n  to: 'now+24h',\n  display: 'Next 24 hours'\n}, {\n  from: 'now',\n  to: 'now+2d',\n  display: 'Next 2 days'\n}, {\n  from: 'now',\n  to: 'now+7d',\n  display: 'Next 7 days'\n}, {\n  from: 'now',\n  to: 'now+30d',\n  display: 'Next 30 days'\n}, {\n  from: 'now',\n  to: 'now+90d',\n  display: 'Next 90 days'\n}, {\n  from: 'now',\n  to: 'now+6M',\n  display: 'Next 6 months'\n}, {\n  from: 'now',\n  to: 'now+1y',\n  display: 'Next year'\n}, {\n  from: 'now',\n  to: 'now+2y',\n  display: 'Next 2 years'\n}, {\n  from: 'now',\n  to: 'now+5y',\n  display: 'Next 5 years'\n}];\nconst rangeIndex = {};\neach(rangeOptions, frame => {\n  rangeIndex[frame.from + ' to ' + frame.to] = frame;\n});\neach(hiddenRangeOptions, frame => {\n  rangeIndex[frame.from + ' to ' + frame.to] = frame;\n}); // handles expressions like\n// 5m\n// 5m to now/d\n// now/d to now\n// now/d\n// if no to <expr> then to now is assumed\n\nexport function describeTextRange(expr) {\n  const isLast = expr.indexOf('+') !== 0;\n\n  if (expr.indexOf('now') === -1) {\n    expr = (isLast ? 'now-' : 'now') + expr;\n  }\n\n  let opt = rangeIndex[expr + ' to now'];\n\n  if (opt) {\n    return opt;\n  }\n\n  if (isLast) {\n    opt = {\n      from: expr,\n      to: 'now'\n    };\n  } else {\n    opt = {\n      from: 'now',\n      to: expr\n    };\n  }\n\n  const parts = /^now([-+])(\\d+)(\\w)/.exec(expr);\n\n  if (parts) {\n    const unit = parts[3];\n    const amount = parseInt(parts[2], 10);\n    const span = spans[unit];\n\n    if (span) {\n      opt.display = isLast ? 'Last ' : 'Next ';\n      opt.display += amount + ' ' + span.display;\n      opt.section = span.section;\n\n      if (amount > 1) {\n        opt.display += 's';\n      }\n    }\n  } else {\n    opt.display = opt.from + ' to ' + opt.to;\n    opt.invalid = true;\n  }\n\n  return opt;\n}\n/**\n * Use this function to get a properly formatted string representation of a {@link @grafana/data:RawTimeRange | range}.\n *\n * @example\n * ```\n * // Prints \"2\":\n * console.log(add(1,1));\n * ```\n * @category TimeUtils\n * @param range - a time range (usually specified by the TimePicker)\n * @alpha\n */\n\nexport function describeTimeRange(range, timeZone) {\n  const option = rangeIndex[range.from.toString() + ' to ' + range.to.toString()];\n\n  if (option) {\n    return option.display;\n  }\n\n  const options = {\n    timeZone\n  };\n\n  if (isDateTime(range.from) && isDateTime(range.to)) {\n    return dateTimeFormat(range.from, options) + ' to ' + dateTimeFormat(range.to, options);\n  }\n\n  if (isDateTime(range.from)) {\n    const parsed = dateMath.parse(range.to, true, 'utc');\n    return parsed ? dateTimeFormat(range.from, options) + ' to ' + dateTimeFormatTimeAgo(parsed, options) : '';\n  }\n\n  if (isDateTime(range.to)) {\n    const parsed = dateMath.parse(range.from, false, 'utc');\n    return parsed ? dateTimeFormatTimeAgo(parsed, options) + ' to ' + dateTimeFormat(range.to, options) : '';\n  }\n\n  if (range.to.toString() === 'now') {\n    const res = describeTextRange(range.from);\n    return res.display;\n  }\n\n  return range.from.toString() + ' to ' + range.to.toString();\n}\nexport const isValidTimeSpan = value => {\n  if (value.indexOf('$') === 0 || value.indexOf('+$') === 0) {\n    return true;\n  }\n\n  const info = describeTextRange(value);\n  return info.invalid !== true;\n};\nexport const describeTimeRangeAbbreviation = (range, timeZone) => {\n  if (isDateTime(range.from)) {\n    return timeZoneAbbrevation(range.from, {\n      timeZone\n    });\n  }\n\n  const parsed = dateMath.parse(range.from, true);\n  return parsed ? timeZoneAbbrevation(parsed, {\n    timeZone\n  }) : '';\n};\nexport const convertRawToRange = (raw, timeZone, fiscalYearStartMonth) => {\n  const from = dateTimeParse(raw.from, {\n    roundUp: false,\n    timeZone,\n    fiscalYearStartMonth\n  });\n  const to = dateTimeParse(raw.to, {\n    roundUp: true,\n    timeZone,\n    fiscalYearStartMonth\n  });\n\n  if (dateMath.isMathString(raw.from) || dateMath.isMathString(raw.to)) {\n    return {\n      from,\n      to,\n      raw\n    };\n  }\n\n  return {\n    from,\n    to,\n    raw: {\n      from,\n      to\n    }\n  };\n};\n\nfunction isRelativeTime(v) {\n  if (typeof v === 'string') {\n    return v.indexOf('now') >= 0;\n  }\n\n  return false;\n}\n\nexport function isFiscal(timeRange) {\n  if (typeof timeRange.raw.from === 'string' && timeRange.raw.from.indexOf('f') > 0) {\n    return true;\n  } else if (typeof timeRange.raw.to === 'string' && timeRange.raw.to.indexOf('f') > 0) {\n    return true;\n  }\n\n  return false;\n}\nexport function isRelativeTimeRange(raw) {\n  return isRelativeTime(raw.from) || isRelativeTime(raw.to);\n}\nexport function secondsToHms(seconds) {\n  const numYears = Math.floor(seconds / 31536000);\n\n  if (numYears) {\n    return numYears + 'y';\n  }\n\n  const numDays = Math.floor(seconds % 31536000 / 86400);\n\n  if (numDays) {\n    return numDays + 'd';\n  }\n\n  const numHours = Math.floor(seconds % 31536000 % 86400 / 3600);\n\n  if (numHours) {\n    return numHours + 'h';\n  }\n\n  const numMinutes = Math.floor(seconds % 31536000 % 86400 % 3600 / 60);\n\n  if (numMinutes) {\n    return numMinutes + 'm';\n  }\n\n  const numSeconds = Math.floor(seconds % 31536000 % 86400 % 3600 % 60);\n\n  if (numSeconds) {\n    return numSeconds + 's';\n  }\n\n  const numMilliseconds = Math.floor(seconds * 1000.0);\n\n  if (numMilliseconds) {\n    return numMilliseconds + 'ms';\n  }\n\n  return 'less than a millisecond'; //'just now' //or other string you like;\n} // Format timeSpan (in sec) to string used in log's meta info\n\nexport function msRangeToTimeString(rangeMs) {\n  const rangeSec = Number((rangeMs / 1000).toFixed());\n  const h = Math.floor(rangeSec / 60 / 60);\n  const m = Math.floor(rangeSec / 60) - h * 60;\n  const s = Number((rangeSec % 60).toFixed());\n  let formattedH = h ? h + 'h' : '';\n  let formattedM = m ? m + 'min' : '';\n  let formattedS = s ? s + 'sec' : '';\n  formattedH && formattedM ? formattedH = formattedH + ' ' : formattedH = formattedH;\n  (formattedM || formattedH) && formattedS ? formattedM = formattedM + ' ' : formattedM = formattedM;\n  return formattedH + formattedM + formattedS || 'less than 1sec';\n}\nexport function calculateInterval(range, resolution, lowLimitInterval) {\n  let lowLimitMs = 1; // 1 millisecond default low limit\n\n  if (lowLimitInterval) {\n    lowLimitMs = intervalToMs(lowLimitInterval);\n  }\n\n  let intervalMs = roundInterval((range.to.valueOf() - range.from.valueOf()) / resolution);\n\n  if (lowLimitMs > intervalMs) {\n    intervalMs = lowLimitMs;\n  }\n\n  return {\n    intervalMs: intervalMs,\n    interval: secondsToHms(intervalMs / 1000)\n  };\n}\nconst interval_regex = /(-?\\d+(?:\\.\\d+)?)(ms|[Mwdhmsy])/; // histogram & trends\n\nconst intervals_in_seconds = {\n  y: 31536000,\n  M: 2592000,\n  w: 604800,\n  d: 86400,\n  h: 3600,\n  m: 60,\n  s: 1,\n  ms: 0.001\n};\nexport function describeInterval(str) {\n  // Default to seconds if no unit is provided\n  if (Number(str)) {\n    return {\n      sec: intervals_in_seconds.s,\n      type: 's',\n      count: parseInt(str, 10)\n    };\n  }\n\n  const matches = str.match(interval_regex);\n\n  if (!matches || !has(intervals_in_seconds, matches[2])) {\n    throw new Error(`Invalid interval string, has to be either unit-less or end with one of the following units: \"${Object.keys(intervals_in_seconds).join(', ')}\"`);\n  }\n\n  return {\n    sec: intervals_in_seconds[matches[2]],\n    type: matches[2],\n    count: parseInt(matches[1], 10)\n  };\n}\nexport function intervalToSeconds(str) {\n  const info = describeInterval(str);\n  return info.sec * info.count;\n}\nexport function intervalToMs(str) {\n  const info = describeInterval(str);\n  return info.sec * 1000 * info.count;\n}\nexport function roundInterval(interval) {\n  switch (true) {\n    // 0.015s\n    case interval < 15:\n      return 10;\n    // 0.01s\n    // 0.035s\n\n    case interval < 35:\n      return 20;\n    // 0.02s\n    // 0.075s\n\n    case interval < 75:\n      return 50;\n    // 0.05s\n    // 0.15s\n\n    case interval < 150:\n      return 100;\n    // 0.1s\n    // 0.35s\n\n    case interval < 350:\n      return 200;\n    // 0.2s\n    // 0.75s\n\n    case interval < 750:\n      return 500;\n    // 0.5s\n    // 1.5s\n\n    case interval < 1500:\n      return 1000;\n    // 1s\n    // 3.5s\n\n    case interval < 3500:\n      return 2000;\n    // 2s\n    // 7.5s\n\n    case interval < 7500:\n      return 5000;\n    // 5s\n    // 12.5s\n\n    case interval < 12500:\n      return 10000;\n    // 10s\n    // 17.5s\n\n    case interval < 17500:\n      return 15000;\n    // 15s\n    // 25s\n\n    case interval < 25000:\n      return 20000;\n    // 20s\n    // 45s\n\n    case interval < 45000:\n      return 30000;\n    // 30s\n    // 1.5m\n\n    case interval < 90000:\n      return 60000;\n    // 1m\n    // 3.5m\n\n    case interval < 210000:\n      return 120000;\n    // 2m\n    // 7.5m\n\n    case interval < 450000:\n      return 300000;\n    // 5m\n    // 12.5m\n\n    case interval < 750000:\n      return 600000;\n    // 10m\n    // 12.5m\n\n    case interval < 1050000:\n      return 900000;\n    // 15m\n    // 25m\n\n    case interval < 1500000:\n      return 1200000;\n    // 20m\n    // 45m\n\n    case interval < 2700000:\n      return 1800000;\n    // 30m\n    // 1.5h\n\n    case interval < 5400000:\n      return 3600000;\n    // 1h\n    // 2.5h\n\n    case interval < 9000000:\n      return 7200000;\n    // 2h\n    // 4.5h\n\n    case interval < 16200000:\n      return 10800000;\n    // 3h\n    // 9h\n\n    case interval < 32400000:\n      return 21600000;\n    // 6h\n    // 1d\n\n    case interval < 86400000:\n      return 43200000;\n    // 12h\n    // 1w\n\n    case interval < 604800000:\n      return 86400000;\n    // 1d\n    // 3w\n\n    case interval < 1814400000:\n      return 604800000;\n    // 1w\n    // 6w\n\n    case interval < 3628800000:\n      return 2592000000;\n    // 30d\n\n    default:\n      return 31536000000;\n    // 1y\n  }\n}\n/**\n * Converts a TimeRange to a RelativeTimeRange that can be used in\n * e.g. alerting queries/rules.\n *\n * @internal\n */\n\nexport function timeRangeToRelative(timeRange, now = dateTime()) {\n  const from = now.unix() - timeRange.from.unix();\n  const to = now.unix() - timeRange.to.unix();\n  return {\n    from,\n    to\n  };\n}\n/**\n * Converts a RelativeTimeRange to a TimeRange\n *\n * @internal\n */\n\nexport function relativeToTimeRange(relativeTimeRange, now = dateTime()) {\n  const from = dateTime(now).subtract(relativeTimeRange.from, 's');\n  const to = relativeTimeRange.to === 0 ? dateTime(now) : dateTime(now).subtract(relativeTimeRange.to, 's');\n  return {\n    from,\n    to,\n    raw: {\n      from,\n      to\n    }\n  };\n}","map":{"version":3,"names":["each","has","dateMath","timeZoneAbbrevation","dateTimeFormat","dateTimeFormatTimeAgo","isDateTime","dateTime","dateTimeParse","spans","s","display","m","h","d","w","M","y","rangeOptions","from","to","hiddenRangeOptions","rangeIndex","frame","describeTextRange","expr","isLast","indexOf","opt","parts","exec","unit","amount","parseInt","span","section","invalid","describeTimeRange","range","timeZone","option","toString","options","parsed","parse","res","isValidTimeSpan","value","info","describeTimeRangeAbbreviation","convertRawToRange","raw","fiscalYearStartMonth","roundUp","isMathString","isRelativeTime","v","isFiscal","timeRange","isRelativeTimeRange","secondsToHms","seconds","numYears","Math","floor","numDays","numHours","numMinutes","numSeconds","numMilliseconds","msRangeToTimeString","rangeMs","rangeSec","Number","toFixed","formattedH","formattedM","formattedS","calculateInterval","resolution","lowLimitInterval","lowLimitMs","intervalToMs","intervalMs","roundInterval","valueOf","interval","interval_regex","intervals_in_seconds","ms","describeInterval","str","sec","type","count","matches","match","Error","Object","keys","join","intervalToSeconds","timeRangeToRelative","now","unix","relativeToTimeRange","relativeTimeRange","subtract"],"sources":["/home/soula/grafana/packages/grafana-data/src/datetime/rangeutil.ts"],"sourcesContent":["import { each, has } from 'lodash';\n\nimport { RawTimeRange, TimeRange, TimeZone, IntervalValues, RelativeTimeRange, TimeOption } from '../types/time';\n\nimport * as dateMath from './datemath';\nimport { timeZoneAbbrevation, dateTimeFormat, dateTimeFormatTimeAgo } from './formatter';\nimport { isDateTime, DateTime, dateTime } from './moment_wrapper';\nimport { dateTimeParse } from './parser';\n\nconst spans: { [key: string]: { display: string; section?: number } } = {\n  s: { display: 'second' },\n  m: { display: 'minute' },\n  h: { display: 'hour' },\n  d: { display: 'day' },\n  w: { display: 'week' },\n  M: { display: 'month' },\n  y: { display: 'year' },\n};\n\nconst rangeOptions: TimeOption[] = [\n  { from: 'now/d', to: 'now/d', display: 'Today' },\n  { from: 'now/d', to: 'now', display: 'Today so far' },\n  { from: 'now/w', to: 'now/w', display: 'This week' },\n  { from: 'now/w', to: 'now', display: 'This week so far' },\n  { from: 'now/M', to: 'now/M', display: 'This month' },\n  { from: 'now/M', to: 'now', display: 'This month so far' },\n  { from: 'now/y', to: 'now/y', display: 'This year' },\n  { from: 'now/y', to: 'now', display: 'This year so far' },\n\n  { from: 'now-1d/d', to: 'now-1d/d', display: 'Yesterday' },\n  {\n    from: 'now-2d/d',\n    to: 'now-2d/d',\n    display: 'Day before yesterday',\n  },\n  {\n    from: 'now-7d/d',\n    to: 'now-7d/d',\n    display: 'This day last week',\n  },\n  { from: 'now-1w/w', to: 'now-1w/w', display: 'Previous week' },\n  { from: 'now-1M/M', to: 'now-1M/M', display: 'Previous month' },\n  { from: 'now-1Q/fQ', to: 'now-1Q/fQ', display: 'Previous fiscal quarter' },\n  { from: 'now-1y/y', to: 'now-1y/y', display: 'Previous year' },\n  { from: 'now-1y/fy', to: 'now-1y/fy', display: 'Previous fiscal year' },\n\n  { from: 'now-5m', to: 'now', display: 'Last 5 minutes' },\n  { from: 'now-15m', to: 'now', display: 'Last 15 minutes' },\n  { from: 'now-30m', to: 'now', display: 'Last 30 minutes' },\n  { from: 'now-1h', to: 'now', display: 'Last 1 hour' },\n  { from: 'now-3h', to: 'now', display: 'Last 3 hours' },\n  { from: 'now-6h', to: 'now', display: 'Last 6 hours' },\n  { from: 'now-12h', to: 'now', display: 'Last 12 hours' },\n  { from: 'now-24h', to: 'now', display: 'Last 24 hours' },\n  { from: 'now-2d', to: 'now', display: 'Last 2 days' },\n  { from: 'now-7d', to: 'now', display: 'Last 7 days' },\n  { from: 'now-30d', to: 'now', display: 'Last 30 days' },\n  { from: 'now-90d', to: 'now', display: 'Last 90 days' },\n  { from: 'now-6M', to: 'now', display: 'Last 6 months' },\n  { from: 'now-1y', to: 'now', display: 'Last 1 year' },\n  { from: 'now-2y', to: 'now', display: 'Last 2 years' },\n  { from: 'now-5y', to: 'now', display: 'Last 5 years' },\n  { from: 'now/fQ', to: 'now', display: 'This fiscal quarter so far' },\n  { from: 'now/fQ', to: 'now/fQ', display: 'This fiscal quarter' },\n  { from: 'now/fy', to: 'now', display: 'This fiscal year so far' },\n  { from: 'now/fy', to: 'now/fy', display: 'This fiscal year' },\n];\n\nconst hiddenRangeOptions: TimeOption[] = [\n  { from: 'now', to: 'now+1m', display: 'Next minute' },\n  { from: 'now', to: 'now+5m', display: 'Next 5 minutes' },\n  { from: 'now', to: 'now+15m', display: 'Next 15 minutes' },\n  { from: 'now', to: 'now+30m', display: 'Next 30 minutes' },\n  { from: 'now', to: 'now+1h', display: 'Next hour' },\n  { from: 'now', to: 'now+3h', display: 'Next 3 hours' },\n  { from: 'now', to: 'now+6h', display: 'Next 6 hours' },\n  { from: 'now', to: 'now+12h', display: 'Next 12 hours' },\n  { from: 'now', to: 'now+24h', display: 'Next 24 hours' },\n  { from: 'now', to: 'now+2d', display: 'Next 2 days' },\n  { from: 'now', to: 'now+7d', display: 'Next 7 days' },\n  { from: 'now', to: 'now+30d', display: 'Next 30 days' },\n  { from: 'now', to: 'now+90d', display: 'Next 90 days' },\n  { from: 'now', to: 'now+6M', display: 'Next 6 months' },\n  { from: 'now', to: 'now+1y', display: 'Next year' },\n  { from: 'now', to: 'now+2y', display: 'Next 2 years' },\n  { from: 'now', to: 'now+5y', display: 'Next 5 years' },\n];\n\nconst rangeIndex: any = {};\neach(rangeOptions, (frame: any) => {\n  rangeIndex[frame.from + ' to ' + frame.to] = frame;\n});\neach(hiddenRangeOptions, (frame: any) => {\n  rangeIndex[frame.from + ' to ' + frame.to] = frame;\n});\n\n// handles expressions like\n// 5m\n// 5m to now/d\n// now/d to now\n// now/d\n// if no to <expr> then to now is assumed\nexport function describeTextRange(expr: any) {\n  const isLast = expr.indexOf('+') !== 0;\n  if (expr.indexOf('now') === -1) {\n    expr = (isLast ? 'now-' : 'now') + expr;\n  }\n\n  let opt = rangeIndex[expr + ' to now'];\n  if (opt) {\n    return opt;\n  }\n\n  if (isLast) {\n    opt = { from: expr, to: 'now' };\n  } else {\n    opt = { from: 'now', to: expr };\n  }\n\n  const parts = /^now([-+])(\\d+)(\\w)/.exec(expr);\n  if (parts) {\n    const unit = parts[3];\n    const amount = parseInt(parts[2], 10);\n    const span = spans[unit];\n    if (span) {\n      opt.display = isLast ? 'Last ' : 'Next ';\n      opt.display += amount + ' ' + span.display;\n      opt.section = span.section;\n      if (amount > 1) {\n        opt.display += 's';\n      }\n    }\n  } else {\n    opt.display = opt.from + ' to ' + opt.to;\n    opt.invalid = true;\n  }\n\n  return opt;\n}\n\n/**\n * Use this function to get a properly formatted string representation of a {@link @grafana/data:RawTimeRange | range}.\n *\n * @example\n * ```\n * // Prints \"2\":\n * console.log(add(1,1));\n * ```\n * @category TimeUtils\n * @param range - a time range (usually specified by the TimePicker)\n * @alpha\n */\nexport function describeTimeRange(range: RawTimeRange, timeZone?: TimeZone): string {\n  const option = rangeIndex[range.from.toString() + ' to ' + range.to.toString()];\n\n  if (option) {\n    return option.display;\n  }\n\n  const options = { timeZone };\n\n  if (isDateTime(range.from) && isDateTime(range.to)) {\n    return dateTimeFormat(range.from, options) + ' to ' + dateTimeFormat(range.to, options);\n  }\n\n  if (isDateTime(range.from)) {\n    const parsed = dateMath.parse(range.to, true, 'utc');\n    return parsed ? dateTimeFormat(range.from, options) + ' to ' + dateTimeFormatTimeAgo(parsed, options) : '';\n  }\n\n  if (isDateTime(range.to)) {\n    const parsed = dateMath.parse(range.from, false, 'utc');\n    return parsed ? dateTimeFormatTimeAgo(parsed, options) + ' to ' + dateTimeFormat(range.to, options) : '';\n  }\n\n  if (range.to.toString() === 'now') {\n    const res = describeTextRange(range.from);\n    return res.display;\n  }\n\n  return range.from.toString() + ' to ' + range.to.toString();\n}\n\nexport const isValidTimeSpan = (value: string) => {\n  if (value.indexOf('$') === 0 || value.indexOf('+$') === 0) {\n    return true;\n  }\n\n  const info = describeTextRange(value);\n  return info.invalid !== true;\n};\n\nexport const describeTimeRangeAbbreviation = (range: TimeRange, timeZone?: TimeZone) => {\n  if (isDateTime(range.from)) {\n    return timeZoneAbbrevation(range.from, { timeZone });\n  }\n  const parsed = dateMath.parse(range.from, true);\n  return parsed ? timeZoneAbbrevation(parsed, { timeZone }) : '';\n};\n\nexport const convertRawToRange = (raw: RawTimeRange, timeZone?: TimeZone, fiscalYearStartMonth?: number): TimeRange => {\n  const from = dateTimeParse(raw.from, { roundUp: false, timeZone, fiscalYearStartMonth });\n  const to = dateTimeParse(raw.to, { roundUp: true, timeZone, fiscalYearStartMonth });\n\n  if (dateMath.isMathString(raw.from) || dateMath.isMathString(raw.to)) {\n    return { from, to, raw };\n  }\n\n  return { from, to, raw: { from, to } };\n};\n\nfunction isRelativeTime(v: DateTime | string) {\n  if (typeof v === 'string') {\n    return (v as string).indexOf('now') >= 0;\n  }\n  return false;\n}\n\nexport function isFiscal(timeRange: TimeRange) {\n  if (typeof timeRange.raw.from === 'string' && timeRange.raw.from.indexOf('f') > 0) {\n    return true;\n  } else if (typeof timeRange.raw.to === 'string' && timeRange.raw.to.indexOf('f') > 0) {\n    return true;\n  }\n  return false;\n}\n\nexport function isRelativeTimeRange(raw: RawTimeRange): boolean {\n  return isRelativeTime(raw.from) || isRelativeTime(raw.to);\n}\n\nexport function secondsToHms(seconds: number): string {\n  const numYears = Math.floor(seconds / 31536000);\n  if (numYears) {\n    return numYears + 'y';\n  }\n  const numDays = Math.floor((seconds % 31536000) / 86400);\n  if (numDays) {\n    return numDays + 'd';\n  }\n  const numHours = Math.floor(((seconds % 31536000) % 86400) / 3600);\n  if (numHours) {\n    return numHours + 'h';\n  }\n  const numMinutes = Math.floor((((seconds % 31536000) % 86400) % 3600) / 60);\n  if (numMinutes) {\n    return numMinutes + 'm';\n  }\n  const numSeconds = Math.floor((((seconds % 31536000) % 86400) % 3600) % 60);\n  if (numSeconds) {\n    return numSeconds + 's';\n  }\n  const numMilliseconds = Math.floor(seconds * 1000.0);\n  if (numMilliseconds) {\n    return numMilliseconds + 'ms';\n  }\n\n  return 'less than a millisecond'; //'just now' //or other string you like;\n}\n\n// Format timeSpan (in sec) to string used in log's meta info\nexport function msRangeToTimeString(rangeMs: number): string {\n  const rangeSec = Number((rangeMs / 1000).toFixed());\n\n  const h = Math.floor(rangeSec / 60 / 60);\n  const m = Math.floor(rangeSec / 60) - h * 60;\n  const s = Number((rangeSec % 60).toFixed());\n  let formattedH = h ? h + 'h' : '';\n  let formattedM = m ? m + 'min' : '';\n  let formattedS = s ? s + 'sec' : '';\n\n  formattedH && formattedM ? (formattedH = formattedH + ' ') : (formattedH = formattedH);\n  (formattedM || formattedH) && formattedS ? (formattedM = formattedM + ' ') : (formattedM = formattedM);\n\n  return formattedH + formattedM + formattedS || 'less than 1sec';\n}\n\nexport function calculateInterval(range: TimeRange, resolution: number, lowLimitInterval?: string): IntervalValues {\n  let lowLimitMs = 1; // 1 millisecond default low limit\n  if (lowLimitInterval) {\n    lowLimitMs = intervalToMs(lowLimitInterval);\n  }\n\n  let intervalMs = roundInterval((range.to.valueOf() - range.from.valueOf()) / resolution);\n  if (lowLimitMs > intervalMs) {\n    intervalMs = lowLimitMs;\n  }\n  return {\n    intervalMs: intervalMs,\n    interval: secondsToHms(intervalMs / 1000),\n  };\n}\n\nconst interval_regex = /(-?\\d+(?:\\.\\d+)?)(ms|[Mwdhmsy])/;\n// histogram & trends\nconst intervals_in_seconds = {\n  y: 31536000,\n  M: 2592000,\n  w: 604800,\n  d: 86400,\n  h: 3600,\n  m: 60,\n  s: 1,\n  ms: 0.001,\n};\n\nexport function describeInterval(str: string) {\n  // Default to seconds if no unit is provided\n  if (Number(str)) {\n    return {\n      sec: intervals_in_seconds.s,\n      type: 's',\n      count: parseInt(str, 10),\n    };\n  }\n\n  const matches = str.match(interval_regex);\n  if (!matches || !has(intervals_in_seconds, matches[2])) {\n    throw new Error(\n      `Invalid interval string, has to be either unit-less or end with one of the following units: \"${Object.keys(\n        intervals_in_seconds\n      ).join(', ')}\"`\n    );\n  }\n  return {\n    sec: (intervals_in_seconds as any)[matches[2]] as number,\n    type: matches[2],\n    count: parseInt(matches[1], 10),\n  };\n}\n\nexport function intervalToSeconds(str: string): number {\n  const info = describeInterval(str);\n  return info.sec * info.count;\n}\n\nexport function intervalToMs(str: string): number {\n  const info = describeInterval(str);\n  return info.sec * 1000 * info.count;\n}\n\nexport function roundInterval(interval: number) {\n  switch (true) {\n    // 0.015s\n    case interval < 15:\n      return 10; // 0.01s\n    // 0.035s\n    case interval < 35:\n      return 20; // 0.02s\n    // 0.075s\n    case interval < 75:\n      return 50; // 0.05s\n    // 0.15s\n    case interval < 150:\n      return 100; // 0.1s\n    // 0.35s\n    case interval < 350:\n      return 200; // 0.2s\n    // 0.75s\n    case interval < 750:\n      return 500; // 0.5s\n    // 1.5s\n    case interval < 1500:\n      return 1000; // 1s\n    // 3.5s\n    case interval < 3500:\n      return 2000; // 2s\n    // 7.5s\n    case interval < 7500:\n      return 5000; // 5s\n    // 12.5s\n    case interval < 12500:\n      return 10000; // 10s\n    // 17.5s\n    case interval < 17500:\n      return 15000; // 15s\n    // 25s\n    case interval < 25000:\n      return 20000; // 20s\n    // 45s\n    case interval < 45000:\n      return 30000; // 30s\n    // 1.5m\n    case interval < 90000:\n      return 60000; // 1m\n    // 3.5m\n    case interval < 210000:\n      return 120000; // 2m\n    // 7.5m\n    case interval < 450000:\n      return 300000; // 5m\n    // 12.5m\n    case interval < 750000:\n      return 600000; // 10m\n    // 12.5m\n    case interval < 1050000:\n      return 900000; // 15m\n    // 25m\n    case interval < 1500000:\n      return 1200000; // 20m\n    // 45m\n    case interval < 2700000:\n      return 1800000; // 30m\n    // 1.5h\n    case interval < 5400000:\n      return 3600000; // 1h\n    // 2.5h\n    case interval < 9000000:\n      return 7200000; // 2h\n    // 4.5h\n    case interval < 16200000:\n      return 10800000; // 3h\n    // 9h\n    case interval < 32400000:\n      return 21600000; // 6h\n    // 1d\n    case interval < 86400000:\n      return 43200000; // 12h\n    // 1w\n    case interval < 604800000:\n      return 86400000; // 1d\n    // 3w\n    case interval < 1814400000:\n      return 604800000; // 1w\n    // 6w\n    case interval < 3628800000:\n      return 2592000000; // 30d\n    default:\n      return 31536000000; // 1y\n  }\n}\n\n/**\n * Converts a TimeRange to a RelativeTimeRange that can be used in\n * e.g. alerting queries/rules.\n *\n * @internal\n */\nexport function timeRangeToRelative(timeRange: TimeRange, now: DateTime = dateTime()): RelativeTimeRange {\n  const from = now.unix() - timeRange.from.unix();\n  const to = now.unix() - timeRange.to.unix();\n\n  return {\n    from,\n    to,\n  };\n}\n\n/**\n * Converts a RelativeTimeRange to a TimeRange\n *\n * @internal\n */\nexport function relativeToTimeRange(relativeTimeRange: RelativeTimeRange, now: DateTime = dateTime()): TimeRange {\n  const from = dateTime(now).subtract(relativeTimeRange.from, 's');\n  const to = relativeTimeRange.to === 0 ? dateTime(now) : dateTime(now).subtract(relativeTimeRange.to, 's');\n\n  return {\n    from,\n    to,\n    raw: { from, to },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}