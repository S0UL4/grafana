{"ast":null,"code":"import angular from 'angular';\nimport { assign } from 'lodash';\nimport coreModule from 'app/angular/core_module';\nexport class AngularLoader {\n  /** @ngInject */\n  constructor($compile, $rootScope) {\n    this.$compile = $compile;\n    this.$rootScope = $rootScope;\n  }\n\n  load(elem, scopeProps, template) {\n    const scope = this.$rootScope.$new();\n    assign(scope, scopeProps);\n    const compiledElem = this.$compile(template)(scope);\n    const rootNode = angular.element(elem);\n    rootNode.append(compiledElem);\n    return {\n      destroy: () => {\n        scope.$destroy();\n        compiledElem.remove();\n      },\n      digest: () => {\n        if (!scope.$$phase) {\n          scope.$digest();\n        }\n      },\n      getScope: () => {\n        return scope;\n      }\n    };\n  }\n\n}\nAngularLoader.$inject = [\"$compile\", \"$rootScope\"];\ncoreModule.service('angularLoader', AngularLoader);","map":{"version":3,"names":["angular","assign","coreModule","AngularLoader","constructor","$compile","$rootScope","load","elem","scopeProps","template","scope","$new","compiledElem","rootNode","element","append","destroy","$destroy","remove","digest","$$phase","$digest","getScope","service"],"sources":["/home/soula/grafana/public/app/angular/services/AngularLoader.ts"],"sourcesContent":["import angular from 'angular';\nimport { assign } from 'lodash';\n\nimport { AngularComponent, AngularLoader as AngularLoaderInterface } from '@grafana/runtime';\nimport { GrafanaRootScope } from 'app/angular/GrafanaCtrl';\nimport coreModule from 'app/angular/core_module';\n\nexport class AngularLoader implements AngularLoaderInterface {\n  /** @ngInject */\n  constructor(private $compile: any, private $rootScope: GrafanaRootScope) {}\n\n  load(elem: any, scopeProps: any, template: string): AngularComponent {\n    const scope = this.$rootScope.$new();\n\n    assign(scope, scopeProps);\n\n    const compiledElem = this.$compile(template)(scope);\n    const rootNode = angular.element(elem);\n    rootNode.append(compiledElem);\n\n    return {\n      destroy: () => {\n        scope.$destroy();\n        compiledElem.remove();\n      },\n      digest: () => {\n        if (!scope.$$phase) {\n          scope.$digest();\n        }\n      },\n      getScope: () => {\n        return scope;\n      },\n    };\n  }\n}\n\ncoreModule.service('angularLoader', AngularLoader);\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAIA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,OAAO,MAAMC,aAAN,CAAsD;EAC3D;EACAC,WAAW,CAASC,QAAT,EAAgCC,UAAhC,EAA8D;IAAA,KAArDD,QAAqD,GAArDA,QAAqD;IAAA,KAA9BC,UAA8B,GAA9BA,UAA8B;EAAE;;EAE3EC,IAAI,CAACC,IAAD,EAAYC,UAAZ,EAA6BC,QAA7B,EAAiE;IACnE,MAAMC,KAAK,GAAG,KAAKL,UAAL,CAAgBM,IAAhB,EAAd;IAEAX,MAAM,CAACU,KAAD,EAAQF,UAAR,CAAN;IAEA,MAAMI,YAAY,GAAG,KAAKR,QAAL,CAAcK,QAAd,EAAwBC,KAAxB,CAArB;IACA,MAAMG,QAAQ,GAAGd,OAAO,CAACe,OAAR,CAAgBP,IAAhB,CAAjB;IACAM,QAAQ,CAACE,MAAT,CAAgBH,YAAhB;IAEA,OAAO;MACLI,OAAO,EAAE,MAAM;QACbN,KAAK,CAACO,QAAN;QACAL,YAAY,CAACM,MAAb;MACD,CAJI;MAKLC,MAAM,EAAE,MAAM;QACZ,IAAI,CAACT,KAAK,CAACU,OAAX,EAAoB;UAClBV,KAAK,CAACW,OAAN;QACD;MACF,CATI;MAULC,QAAQ,EAAE,MAAM;QACd,OAAOZ,KAAP;MACD;IAZI,CAAP;EAcD;;AA3B0D;;AA8B7DT,UAAU,CAACsB,OAAX,CAAmB,eAAnB,EAAoCrB,aAApC"},"metadata":{},"sourceType":"module"}