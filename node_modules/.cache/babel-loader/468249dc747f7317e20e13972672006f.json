{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { usePopperTooltip } from 'react-popper-tooltip';\nimport { colorManipulator } from '@grafana/data';\nimport { useStyles2 } from '../../themes/ThemeContext';\nimport { Portal } from '../Portal/Portal';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const Tooltip = /*#__PURE__*/React.memo(({\n  children,\n  theme,\n  interactive,\n  show,\n  placement,\n  content\n}) => {\n  const {\n    getArrowProps,\n    getTooltipProps,\n    setTooltipRef,\n    setTriggerRef,\n    visible,\n    update\n  } = usePopperTooltip({\n    visible: show,\n    placement: placement,\n    interactive: interactive,\n    delayHide: interactive ? 100 : 0,\n    delayShow: 150,\n    offset: [0, 8],\n    trigger: ['hover', 'focus']\n  });\n  const styles = useStyles2(getStyles);\n  const containerStyle = styles[theme !== null && theme !== void 0 ? theme : 'info'];\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/React.cloneElement(children, {\n      ref: setTriggerRef\n    }), visible && /*#__PURE__*/_jsx(Portal, {\n      children: /*#__PURE__*/_jsxs(\"div\", Object.assign({\n        ref: setTooltipRef\n      }, getTooltipProps({\n        className: containerStyle\n      }), {\n        children: [/*#__PURE__*/_jsx(\"div\", Object.assign({}, getArrowProps({\n          className: 'tooltip-arrow'\n        }))), typeof content === 'string' && content, /*#__PURE__*/React.isValidElement(content) && /*#__PURE__*/React.cloneElement(content), typeof content === 'function' && content({\n          updatePopperPosition: update\n        })]\n      }))\n    })]\n  });\n});\nTooltip.displayName = 'Tooltip';\n\nfunction getStyles(theme) {\n  function buildTooltipTheme(tooltipBg, tooltipBorder, tooltipText) {\n    return css`\n      background-color: ${tooltipBg};\n      border-radius: 3px;\n      border: 1px solid ${tooltipBorder};\n      box-shadow: ${theme.shadows.z2};\n      color: ${tooltipText};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      padding: ${theme.spacing(0.5, 1)};\n      transition: opacity 0.3s;\n      z-index: ${theme.zIndex.tooltip};\n      max-width: 400px;\n      overflow-wrap: break-word;\n\n      &[data-popper-interactive='false'] {\n        pointer-events: none;\n      }\n\n      .tooltip-arrow {\n        height: 1rem;\n        position: absolute;\n        width: 1rem;\n        pointer-events: none;\n      }\n\n      .tooltip-arrow::before {\n        border-style: solid;\n        content: '';\n        display: block;\n        height: 0;\n        margin: auto;\n        width: 0;\n      }\n\n      .tooltip-arrow::after {\n        border-style: solid;\n        content: '';\n        display: block;\n        height: 0;\n        margin: auto;\n        position: absolute;\n        width: 0;\n      }\n\n      &[data-popper-placement*='bottom'] .tooltip-arrow {\n        left: 0;\n        margin-top: -10px;\n        top: 0;\n      }\n\n      &[data-popper-placement*='bottom'] .tooltip-arrow::before {\n        border-color: transparent transparent ${tooltipBorder} transparent;\n        border-width: 0 8px 7px 8px;\n        position: absolute;\n        top: -1px;\n      }\n\n      &[data-popper-placement*='bottom'] .tooltip-arrow::after {\n        border-color: transparent transparent ${tooltipBg} transparent;\n        border-width: 0 8px 7px 8px;\n      }\n\n      &[data-popper-placement*='top'] .tooltip-arrow {\n        bottom: 0;\n        left: 0;\n        margin-bottom: -11px;\n      }\n\n      &[data-popper-placement*='top'] .tooltip-arrow::before {\n        border-color: ${tooltipBorder} transparent transparent transparent;\n        border-width: 7px 8px 0 7px;\n        position: absolute;\n        top: 1px;\n      }\n\n      &[data-popper-placement*='top'] .tooltip-arrow::after {\n        border-color: ${tooltipBg} transparent transparent transparent;\n        border-width: 7px 8px 0 7px;\n      }\n\n      &[data-popper-placement*='right'] .tooltip-arrow {\n        left: 0;\n        margin-left: -11px;\n      }\n\n      &[data-popper-placement*='right'] .tooltip-arrow::before {\n        border-color: transparent ${tooltipBorder} transparent transparent;\n        border-width: 7px 6px 7px 0;\n      }\n\n      &[data-popper-placement*='right'] .tooltip-arrow::after {\n        border-color: transparent ${tooltipBg} transparent transparent;\n        border-width: 6px 7px 7px 0;\n        left: 2px;\n        top: 1px;\n      }\n\n      &[data-popper-placement*='left'] .tooltip-arrow {\n        margin-right: -10px;\n        right: 0;\n      }\n\n      &[data-popper-placement*='left'] .tooltip-arrow::before {\n        border-color: transparent transparent transparent ${tooltipBorder};\n        border-width: 7px 0px 6px 7px;\n      }\n\n      &[data-popper-placement*='left'] .tooltip-arrow::after {\n        border-color: transparent transparent transparent ${tooltipBg};\n        border-width: 6px 0 5px 5px;\n        left: 1px;\n        top: 1px;\n      }\n\n      code {\n        border: none;\n        display: inline;\n        background: ${colorManipulator.darken(tooltipBg, 0.3)};\n        color: ${tooltipText};\n      }\n\n      strong,\n      em {\n        color: ${colorManipulator.emphasize(tooltipBg)};\n      }\n\n      a {\n        color: ${tooltipText};\n        text-decoration: underline;\n      }\n\n      a:hover {\n        text-decoration: none;\n      }\n    `;\n  }\n\n  const info = buildTooltipTheme(theme.components.tooltip.background, theme.components.tooltip.background, theme.components.tooltip.text);\n  const error = buildTooltipTheme(theme.colors.error.main, theme.colors.error.main, theme.colors.error.contrastText);\n  return {\n    info: info,\n    ['info-alt']: info,\n    error\n  };\n}","map":{"version":3,"names":["css","React","usePopperTooltip","colorManipulator","useStyles2","Portal","Tooltip","memo","children","theme","interactive","show","placement","content","getArrowProps","getTooltipProps","setTooltipRef","setTriggerRef","visible","update","delayHide","delayShow","offset","trigger","styles","getStyles","containerStyle","cloneElement","ref","className","isValidElement","updatePopperPosition","displayName","buildTooltipTheme","tooltipBg","tooltipBorder","tooltipText","shadows","z2","typography","bodySmall","fontSize","spacing","zIndex","tooltip","darken","emphasize","info","components","background","text","error","colors","main","contrastText"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\nimport { usePopperTooltip } from 'react-popper-tooltip';\n\nimport { colorManipulator, GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes/ThemeContext';\nimport { Portal } from '../Portal/Portal';\n\nimport { PopoverContent, TooltipPlacement } from './types';\n\nexport interface TooltipProps {\n  theme?: 'info' | 'error' | 'info-alt';\n  show?: boolean;\n  placement?: TooltipPlacement;\n  content: PopoverContent;\n  children: JSX.Element;\n  /**\n   * Set to true if you want the tooltip to stay long enough so the user can move mouse over content to select text or click a link\n   */\n  interactive?: boolean;\n}\n\nexport const Tooltip = React.memo(({ children, theme, interactive, show, placement, content }: TooltipProps) => {\n  const { getArrowProps, getTooltipProps, setTooltipRef, setTriggerRef, visible, update } = usePopperTooltip({\n    visible: show,\n    placement: placement,\n    interactive: interactive,\n    delayHide: interactive ? 100 : 0,\n    delayShow: 150,\n    offset: [0, 8],\n    trigger: ['hover', 'focus'],\n  });\n\n  const styles = useStyles2(getStyles);\n  const containerStyle = styles[theme ?? 'info'];\n\n  return (\n    <>\n      {React.cloneElement(children, {\n        ref: setTriggerRef,\n      })}\n      {visible && (\n        <Portal>\n          <div ref={setTooltipRef} {...getTooltipProps({ className: containerStyle })}>\n            <div {...getArrowProps({ className: 'tooltip-arrow' })} />\n            {typeof content === 'string' && content}\n            {React.isValidElement(content) && React.cloneElement(content)}\n            {typeof content === 'function' &&\n              content({\n                updatePopperPosition: update as any,\n              })}\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n});\n\nTooltip.displayName = 'Tooltip';\n\nfunction getStyles(theme: GrafanaTheme2) {\n  function buildTooltipTheme(tooltipBg: string, tooltipBorder: string, tooltipText: string) {\n    return css`\n      background-color: ${tooltipBg};\n      border-radius: 3px;\n      border: 1px solid ${tooltipBorder};\n      box-shadow: ${theme.shadows.z2};\n      color: ${tooltipText};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      padding: ${theme.spacing(0.5, 1)};\n      transition: opacity 0.3s;\n      z-index: ${theme.zIndex.tooltip};\n      max-width: 400px;\n      overflow-wrap: break-word;\n\n      &[data-popper-interactive='false'] {\n        pointer-events: none;\n      }\n\n      .tooltip-arrow {\n        height: 1rem;\n        position: absolute;\n        width: 1rem;\n        pointer-events: none;\n      }\n\n      .tooltip-arrow::before {\n        border-style: solid;\n        content: '';\n        display: block;\n        height: 0;\n        margin: auto;\n        width: 0;\n      }\n\n      .tooltip-arrow::after {\n        border-style: solid;\n        content: '';\n        display: block;\n        height: 0;\n        margin: auto;\n        position: absolute;\n        width: 0;\n      }\n\n      &[data-popper-placement*='bottom'] .tooltip-arrow {\n        left: 0;\n        margin-top: -10px;\n        top: 0;\n      }\n\n      &[data-popper-placement*='bottom'] .tooltip-arrow::before {\n        border-color: transparent transparent ${tooltipBorder} transparent;\n        border-width: 0 8px 7px 8px;\n        position: absolute;\n        top: -1px;\n      }\n\n      &[data-popper-placement*='bottom'] .tooltip-arrow::after {\n        border-color: transparent transparent ${tooltipBg} transparent;\n        border-width: 0 8px 7px 8px;\n      }\n\n      &[data-popper-placement*='top'] .tooltip-arrow {\n        bottom: 0;\n        left: 0;\n        margin-bottom: -11px;\n      }\n\n      &[data-popper-placement*='top'] .tooltip-arrow::before {\n        border-color: ${tooltipBorder} transparent transparent transparent;\n        border-width: 7px 8px 0 7px;\n        position: absolute;\n        top: 1px;\n      }\n\n      &[data-popper-placement*='top'] .tooltip-arrow::after {\n        border-color: ${tooltipBg} transparent transparent transparent;\n        border-width: 7px 8px 0 7px;\n      }\n\n      &[data-popper-placement*='right'] .tooltip-arrow {\n        left: 0;\n        margin-left: -11px;\n      }\n\n      &[data-popper-placement*='right'] .tooltip-arrow::before {\n        border-color: transparent ${tooltipBorder} transparent transparent;\n        border-width: 7px 6px 7px 0;\n      }\n\n      &[data-popper-placement*='right'] .tooltip-arrow::after {\n        border-color: transparent ${tooltipBg} transparent transparent;\n        border-width: 6px 7px 7px 0;\n        left: 2px;\n        top: 1px;\n      }\n\n      &[data-popper-placement*='left'] .tooltip-arrow {\n        margin-right: -10px;\n        right: 0;\n      }\n\n      &[data-popper-placement*='left'] .tooltip-arrow::before {\n        border-color: transparent transparent transparent ${tooltipBorder};\n        border-width: 7px 0px 6px 7px;\n      }\n\n      &[data-popper-placement*='left'] .tooltip-arrow::after {\n        border-color: transparent transparent transparent ${tooltipBg};\n        border-width: 6px 0 5px 5px;\n        left: 1px;\n        top: 1px;\n      }\n\n      code {\n        border: none;\n        display: inline;\n        background: ${colorManipulator.darken(tooltipBg, 0.3)};\n        color: ${tooltipText};\n      }\n\n      strong,\n      em {\n        color: ${colorManipulator.emphasize(tooltipBg)};\n      }\n\n      a {\n        color: ${tooltipText};\n        text-decoration: underline;\n      }\n\n      a:hover {\n        text-decoration: none;\n      }\n    `;\n  }\n\n  const info = buildTooltipTheme(\n    theme.components.tooltip.background,\n    theme.components.tooltip.background,\n    theme.components.tooltip.text\n  );\n  const error = buildTooltipTheme(theme.colors.error.main, theme.colors.error.main, theme.colors.error.contrastText);\n\n  return {\n    info: info,\n    ['info-alt']: info,\n    error,\n  };\n}\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AAEA,SAASC,gBAAT,QAAgD,eAAhD;AAEA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,MAAT,QAAuB,kBAAvB;;;;AAgBA,OAAO,MAAMC,OAAO,gBAAGL,KAAK,CAACM,IAAN,CAAW,CAAC;EAAEC,QAAF;EAAYC,KAAZ;EAAmBC,WAAnB;EAAgCC,IAAhC;EAAsCC,SAAtC;EAAiDC;AAAjD,CAAD,KAA8E;EAC9G,MAAM;IAAEC,aAAF;IAAiBC,eAAjB;IAAkCC,aAAlC;IAAiDC,aAAjD;IAAgEC,OAAhE;IAAyEC;EAAzE,IAAoFjB,gBAAgB,CAAC;IACzGgB,OAAO,EAAEP,IADgG;IAEzGC,SAAS,EAAEA,SAF8F;IAGzGF,WAAW,EAAEA,WAH4F;IAIzGU,SAAS,EAAEV,WAAW,GAAG,GAAH,GAAS,CAJ0E;IAKzGW,SAAS,EAAE,GAL8F;IAMzGC,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CANiG;IAOzGC,OAAO,EAAE,CAAC,OAAD,EAAU,OAAV;EAPgG,CAAD,CAA1G;EAUA,MAAMC,MAAM,GAAGpB,UAAU,CAACqB,SAAD,CAAzB;EACA,MAAMC,cAAc,GAAGF,MAAM,CAACf,KAAD,aAACA,KAAD,cAACA,KAAD,GAAU,MAAV,CAA7B;EAEA,oBACE;IAAA,wBACGR,KAAK,CAAC0B,YAAN,CAAmBnB,QAAnB,EAA6B;MAC5BoB,GAAG,EAAEX;IADuB,CAA7B,CADH,EAIGC,OAAO,iBACN,KAAC,MAAD;MAAA,uBACE;QAAK,GAAG,EAAEF;MAAV,GAA6BD,eAAe,CAAC;QAAEc,SAAS,EAAEH;MAAb,CAAD,CAA5C;QAAA,wBACE,8BAASZ,aAAa,CAAC;UAAEe,SAAS,EAAE;QAAb,CAAD,CAAtB,EADF,EAEG,OAAOhB,OAAP,KAAmB,QAAnB,IAA+BA,OAFlC,EAGG,aAAAZ,KAAK,CAAC6B,cAAN,CAAqBjB,OAArB,kBAAiCZ,KAAK,CAAC0B,YAAN,CAAmBd,OAAnB,CAHpC,EAIG,OAAOA,OAAP,KAAmB,UAAnB,IACCA,OAAO,CAAC;UACNkB,oBAAoB,EAAEZ;QADhB,CAAD,CALX;MAAA;IADF,EALJ;EAAA,EADF;AAoBD,CAlCsB,CAAhB;AAoCPb,OAAO,CAAC0B,WAAR,GAAsB,SAAtB;;AAEA,SAASP,SAAT,CAAmBhB,KAAnB,EAAyC;EACvC,SAASwB,iBAAT,CAA2BC,SAA3B,EAA8CC,aAA9C,EAAqEC,WAArE,EAA0F;IACxF,OAAOpC,GAAI;AACf,0BAA0BkC,SAAU;AACpC;AACA,0BAA0BC,aAAc;AACxC,oBAAoB1B,KAAK,CAAC4B,OAAN,CAAcC,EAAG;AACrC,eAAeF,WAAY;AAC3B,mBAAmB3B,KAAK,CAAC8B,UAAN,CAAiBC,SAAjB,CAA2BC,QAAS;AACvD,iBAAiBhC,KAAK,CAACiC,OAAN,CAAc,GAAd,EAAmB,CAAnB,CAAsB;AACvC;AACA,iBAAiBjC,KAAK,CAACkC,MAAN,CAAaC,OAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgDT,aAAc;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgDD,SAAU;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBC,aAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBD,SAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoCC,aAAc;AAClD;AACA;AACA;AACA;AACA,oCAAoCD,SAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4DC,aAAc;AAC1E;AACA;AACA;AACA;AACA,4DAA4DD,SAAU;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB/B,gBAAgB,CAAC0C,MAAjB,CAAwBX,SAAxB,EAAmC,GAAnC,CAAwC;AAC9D,iBAAiBE,WAAY;AAC7B;AACA;AACA;AACA;AACA,iBAAiBjC,gBAAgB,CAAC2C,SAAjB,CAA2BZ,SAA3B,CAAsC;AACvD;AACA;AACA;AACA,iBAAiBE,WAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KArII;EAsID;;EAED,MAAMW,IAAI,GAAGd,iBAAiB,CAC5BxB,KAAK,CAACuC,UAAN,CAAiBJ,OAAjB,CAAyBK,UADG,EAE5BxC,KAAK,CAACuC,UAAN,CAAiBJ,OAAjB,CAAyBK,UAFG,EAG5BxC,KAAK,CAACuC,UAAN,CAAiBJ,OAAjB,CAAyBM,IAHG,CAA9B;EAKA,MAAMC,KAAK,GAAGlB,iBAAiB,CAACxB,KAAK,CAAC2C,MAAN,CAAaD,KAAb,CAAmBE,IAApB,EAA0B5C,KAAK,CAAC2C,MAAN,CAAaD,KAAb,CAAmBE,IAA7C,EAAmD5C,KAAK,CAAC2C,MAAN,CAAaD,KAAb,CAAmBG,YAAtE,CAA/B;EAEA,OAAO;IACLP,IAAI,EAAEA,IADD;IAEL,CAAC,UAAD,GAAcA,IAFT;IAGLI;EAHK,CAAP;AAKD"},"metadata":{},"sourceType":"module"}