{"ast":null,"code":"import { FieldColorModeId, FieldConfigProperty, PanelPlugin } from '@grafana/data';\nimport { LegendDisplayMode } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\nimport { addStandardDataReduceOptions } from '../stat/common';\nimport { PieChartPanel } from './PieChartPanel';\nimport { PieChartPanelChangedHandler } from './migrations';\nimport { PieChartSuggestionsSupplier } from './suggestions';\nimport { PieChartType, PieChartLabels, PieChartLegendValues } from './types';\nexport const plugin = new PanelPlugin(PieChartPanel).setPanelChangeHandler(PieChartPanelChangedHandler).useFieldConfig({\n  disableStandardOptions: [FieldConfigProperty.Thresholds],\n  standardOptions: {\n    [FieldConfigProperty.Color]: {\n      settings: {\n        byValueSupport: false,\n        bySeriesSupport: true,\n        preferThresholdsMode: false\n      },\n      defaultValue: {\n        mode: FieldColorModeId.PaletteClassic\n      }\n    }\n  },\n  useCustomConfig: builder => {\n    commonOptionsBuilder.addHideFrom(builder);\n  }\n}).setPanelOptions(builder => {\n  addStandardDataReduceOptions(builder);\n  builder.addRadio({\n    name: 'Piechart type',\n    description: 'How the piechart should be rendered',\n    path: 'pieType',\n    settings: {\n      options: [{\n        value: PieChartType.Pie,\n        label: 'Pie'\n      }, {\n        value: PieChartType.Donut,\n        label: 'Donut'\n      }]\n    },\n    defaultValue: PieChartType.Pie\n  }).addMultiSelect({\n    name: 'Labels',\n    path: 'displayLabels',\n    description: 'Select the labels to be displayed in the pie chart',\n    settings: {\n      options: [{\n        value: PieChartLabels.Percent,\n        label: 'Percent'\n      }, {\n        value: PieChartLabels.Name,\n        label: 'Name'\n      }, {\n        value: PieChartLabels.Value,\n        label: 'Value'\n      }]\n    }\n  });\n  commonOptionsBuilder.addTooltipOptions(builder);\n  commonOptionsBuilder.addLegendOptions(builder, false);\n  builder.addMultiSelect({\n    name: 'Legend values',\n    path: 'legend.values',\n    category: ['Legend'],\n    settings: {\n      options: [{\n        value: PieChartLegendValues.Percent,\n        label: 'Percent'\n      }, {\n        value: PieChartLegendValues.Value,\n        label: 'Value'\n      }]\n    },\n    showIf: c => c.legend.displayMode !== LegendDisplayMode.Hidden\n  });\n}).setSuggestionsSupplier(new PieChartSuggestionsSupplier());","map":{"version":3,"names":["FieldColorModeId","FieldConfigProperty","PanelPlugin","LegendDisplayMode","commonOptionsBuilder","addStandardDataReduceOptions","PieChartPanel","PieChartPanelChangedHandler","PieChartSuggestionsSupplier","PieChartType","PieChartLabels","PieChartLegendValues","plugin","setPanelChangeHandler","useFieldConfig","disableStandardOptions","Thresholds","standardOptions","Color","settings","byValueSupport","bySeriesSupport","preferThresholdsMode","defaultValue","mode","PaletteClassic","useCustomConfig","builder","addHideFrom","setPanelOptions","addRadio","name","description","path","options","value","Pie","label","Donut","addMultiSelect","Percent","Name","Value","addTooltipOptions","addLegendOptions","category","showIf","c","legend","displayMode","Hidden","setSuggestionsSupplier"],"sources":["/home/soula/grafana/public/app/plugins/panel/piechart/module.tsx"],"sourcesContent":["import { FieldColorModeId, FieldConfigProperty, PanelPlugin } from '@grafana/data';\nimport { LegendDisplayMode } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { addStandardDataReduceOptions } from '../stat/common';\n\nimport { PieChartPanel } from './PieChartPanel';\nimport { PieChartPanelChangedHandler } from './migrations';\nimport { PieChartSuggestionsSupplier } from './suggestions';\nimport { PieChartOptions, PieChartType, PieChartLabels, PieChartLegendValues } from './types';\n\nexport const plugin = new PanelPlugin<PieChartOptions>(PieChartPanel)\n  .setPanelChangeHandler(PieChartPanelChangedHandler)\n  .useFieldConfig({\n    disableStandardOptions: [FieldConfigProperty.Thresholds],\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: false,\n          bySeriesSupport: true,\n          preferThresholdsMode: false,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n    },\n    useCustomConfig: (builder) => {\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  })\n  .setPanelOptions((builder) => {\n    addStandardDataReduceOptions(builder);\n    builder\n      .addRadio({\n        name: 'Piechart type',\n        description: 'How the piechart should be rendered',\n        path: 'pieType',\n        settings: {\n          options: [\n            { value: PieChartType.Pie, label: 'Pie' },\n            { value: PieChartType.Donut, label: 'Donut' },\n          ],\n        },\n        defaultValue: PieChartType.Pie,\n      })\n      .addMultiSelect({\n        name: 'Labels',\n        path: 'displayLabels',\n        description: 'Select the labels to be displayed in the pie chart',\n        settings: {\n          options: [\n            { value: PieChartLabels.Percent, label: 'Percent' },\n            { value: PieChartLabels.Name, label: 'Name' },\n            { value: PieChartLabels.Value, label: 'Value' },\n          ],\n        },\n      });\n\n    commonOptionsBuilder.addTooltipOptions(builder);\n    commonOptionsBuilder.addLegendOptions(builder, false);\n\n    builder.addMultiSelect({\n      name: 'Legend values',\n      path: 'legend.values',\n      category: ['Legend'],\n      settings: {\n        options: [\n          { value: PieChartLegendValues.Percent, label: 'Percent' },\n          { value: PieChartLegendValues.Value, label: 'Value' },\n        ],\n      },\n      showIf: (c) => c.legend.displayMode !== LegendDisplayMode.Hidden,\n    });\n  })\n  .setSuggestionsSupplier(new PieChartSuggestionsSupplier());\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,mBAA3B,EAAgDC,WAAhD,QAAmE,eAAnE;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,oBAAT,QAAqC,aAArC;AAEA,SAASC,4BAAT,QAA6C,gBAA7C;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,2BAAT,QAA4C,cAA5C;AACA,SAASC,2BAAT,QAA4C,eAA5C;AACA,SAA0BC,YAA1B,EAAwCC,cAAxC,EAAwDC,oBAAxD,QAAoF,SAApF;AAEA,OAAO,MAAMC,MAAM,GAAG,IAAIV,WAAJ,CAAiCI,aAAjC,EACnBO,qBADmB,CACGN,2BADH,EAEnBO,cAFmB,CAEJ;EACdC,sBAAsB,EAAE,CAACd,mBAAmB,CAACe,UAArB,CADV;EAEdC,eAAe,EAAE;IACf,CAAChB,mBAAmB,CAACiB,KAArB,GAA6B;MAC3BC,QAAQ,EAAE;QACRC,cAAc,EAAE,KADR;QAERC,eAAe,EAAE,IAFT;QAGRC,oBAAoB,EAAE;MAHd,CADiB;MAM3BC,YAAY,EAAE;QACZC,IAAI,EAAExB,gBAAgB,CAACyB;MADX;IANa;EADd,CAFH;EAcdC,eAAe,EAAGC,OAAD,IAAa;IAC5BvB,oBAAoB,CAACwB,WAArB,CAAiCD,OAAjC;EACD;AAhBa,CAFI,EAoBnBE,eApBmB,CAoBFF,OAAD,IAAa;EAC5BtB,4BAA4B,CAACsB,OAAD,CAA5B;EACAA,OAAO,CACJG,QADH,CACY;IACRC,IAAI,EAAE,eADE;IAERC,WAAW,EAAE,qCAFL;IAGRC,IAAI,EAAE,SAHE;IAIRd,QAAQ,EAAE;MACRe,OAAO,EAAE,CACP;QAAEC,KAAK,EAAE1B,YAAY,CAAC2B,GAAtB;QAA2BC,KAAK,EAAE;MAAlC,CADO,EAEP;QAAEF,KAAK,EAAE1B,YAAY,CAAC6B,KAAtB;QAA6BD,KAAK,EAAE;MAApC,CAFO;IADD,CAJF;IAURd,YAAY,EAAEd,YAAY,CAAC2B;EAVnB,CADZ,EAaGG,cAbH,CAakB;IACdR,IAAI,EAAE,QADQ;IAEdE,IAAI,EAAE,eAFQ;IAGdD,WAAW,EAAE,oDAHC;IAIdb,QAAQ,EAAE;MACRe,OAAO,EAAE,CACP;QAAEC,KAAK,EAAEzB,cAAc,CAAC8B,OAAxB;QAAiCH,KAAK,EAAE;MAAxC,CADO,EAEP;QAAEF,KAAK,EAAEzB,cAAc,CAAC+B,IAAxB;QAA8BJ,KAAK,EAAE;MAArC,CAFO,EAGP;QAAEF,KAAK,EAAEzB,cAAc,CAACgC,KAAxB;QAA+BL,KAAK,EAAE;MAAtC,CAHO;IADD;EAJI,CAblB;EA0BAjC,oBAAoB,CAACuC,iBAArB,CAAuChB,OAAvC;EACAvB,oBAAoB,CAACwC,gBAArB,CAAsCjB,OAAtC,EAA+C,KAA/C;EAEAA,OAAO,CAACY,cAAR,CAAuB;IACrBR,IAAI,EAAE,eADe;IAErBE,IAAI,EAAE,eAFe;IAGrBY,QAAQ,EAAE,CAAC,QAAD,CAHW;IAIrB1B,QAAQ,EAAE;MACRe,OAAO,EAAE,CACP;QAAEC,KAAK,EAAExB,oBAAoB,CAAC6B,OAA9B;QAAuCH,KAAK,EAAE;MAA9C,CADO,EAEP;QAAEF,KAAK,EAAExB,oBAAoB,CAAC+B,KAA9B;QAAqCL,KAAK,EAAE;MAA5C,CAFO;IADD,CAJW;IAUrBS,MAAM,EAAGC,CAAD,IAAOA,CAAC,CAACC,MAAF,CAASC,WAAT,KAAyB9C,iBAAiB,CAAC+C;EAVrC,CAAvB;AAYD,CA/DmB,EAgEnBC,sBAhEmB,CAgEI,IAAI3C,2BAAJ,EAhEJ,CAAf"},"metadata":{},"sourceType":"module"}