{"ast":null,"code":"const _excluded = [\"onChange\", \"ref\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport React, { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Checkbox, Field, Input, InputControl, Select, TextArea } from '@grafana/ui';\nimport { KeyValueMapInput } from './KeyValueMapInput';\nimport { StringArrayInput } from './StringArrayInput';\nimport { SubformArrayField } from './SubformArrayField';\nimport { SubformField } from './SubformField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const OptionField = ({\n  option,\n  invalid,\n  pathPrefix,\n  pathSuffix = '',\n  error,\n  defaultValue,\n  readOnly = false\n}) => {\n  const optionPath = `${pathPrefix}${pathSuffix}`;\n\n  if (option.element === 'subform') {\n    return /*#__PURE__*/_jsx(SubformField, {\n      readOnly: readOnly,\n      defaultValue: defaultValue,\n      option: option,\n      errors: error,\n      pathPrefix: optionPath\n    });\n  }\n\n  if (option.element === 'subform_array') {\n    return /*#__PURE__*/_jsx(SubformArrayField, {\n      readOnly: readOnly,\n      defaultValues: defaultValue,\n      option: option,\n      pathPrefix: optionPath,\n      errors: error\n    });\n  }\n\n  return /*#__PURE__*/_jsx(Field, {\n    label: option.element !== 'checkbox' ? option.label : undefined,\n    description: option.description || undefined,\n    invalid: !!error,\n    error: error === null || error === void 0 ? void 0 : error.message,\n    children: /*#__PURE__*/_jsx(OptionInput, {\n      id: `${optionPath}${option.propertyName}`,\n      defaultValue: defaultValue,\n      option: option,\n      invalid: invalid,\n      pathPrefix: optionPath,\n      readOnly: readOnly,\n      pathIndex: pathPrefix\n    })\n  });\n};\n\nconst OptionInput = ({\n  option,\n  invalid,\n  id,\n  pathPrefix = '',\n  pathIndex = '',\n  readOnly = false\n}) => {\n  const {\n    control,\n    register,\n    unregister,\n    getValues\n  } = useFormContext();\n  const name = `${pathPrefix}${option.propertyName}`; // workaround for https://github.com/react-hook-form/react-hook-form/issues/4993#issuecomment-829012506\n\n  useEffect(() => () => {\n    unregister(name, {\n      keepValue: false\n    });\n  }, [unregister, name]);\n\n  switch (option.element) {\n    case 'checkbox':\n      return /*#__PURE__*/_jsx(Checkbox, Object.assign({\n        id: id,\n        readOnly: readOnly,\n        disabled: readOnly,\n        className: styles.checkbox\n      }, register(name), {\n        label: option.label,\n        description: option.description\n      }));\n\n    case 'input':\n      return /*#__PURE__*/_jsx(Input, Object.assign({\n        id: id,\n        readOnly: readOnly || determineReadOnly(option, getValues, pathIndex),\n        invalid: invalid,\n        type: option.inputType\n      }, register(name, {\n        required: determineRequired(option, getValues, pathIndex),\n        validate: v => option.validationRule !== '' ? validateOption(v, option.validationRule) : true\n      }), {\n        placeholder: option.placeholder\n      }));\n\n    case 'select':\n      return /*#__PURE__*/_jsx(InputControl, {\n        render: _ref => {\n          var _option$selectOptions;\n\n          let {\n            field: {\n              onChange\n            }\n          } = _ref,\n              field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n          return /*#__PURE__*/_jsx(Select, Object.assign({\n            disabled: readOnly\n          }, field, {\n            options: (_option$selectOptions = option.selectOptions) !== null && _option$selectOptions !== void 0 ? _option$selectOptions : undefined,\n            invalid: invalid,\n            onChange: value => onChange(value.value)\n          }));\n        },\n        control: control,\n        name: name\n      });\n\n    case 'textarea':\n      return /*#__PURE__*/_jsx(TextArea, Object.assign({\n        id: id,\n        readOnly: readOnly,\n        invalid: invalid\n      }, register(name, {\n        required: option.required ? 'Required' : false,\n        validate: v => option.validationRule !== '' ? validateOption(v, option.validationRule) : true\n      })));\n\n    case 'string_array':\n      return /*#__PURE__*/_jsx(InputControl, {\n        render: ({\n          field: {\n            value,\n            onChange\n          }\n        }) => /*#__PURE__*/_jsx(StringArrayInput, {\n          readOnly: readOnly,\n          value: value,\n          onChange: onChange\n        }),\n        control: control,\n        name: name\n      });\n\n    case 'key_value_map':\n      return /*#__PURE__*/_jsx(InputControl, {\n        render: ({\n          field: {\n            value,\n            onChange\n          }\n        }) => /*#__PURE__*/_jsx(KeyValueMapInput, {\n          readOnly: readOnly,\n          value: value,\n          onChange: onChange\n        }),\n        control: control,\n        name: name\n      });\n\n    default:\n      console.error('Element not supported', option.element);\n      return null;\n  }\n};\n\nconst styles = {\n  checkbox: css`\n    height: auto; // native checkbox has fixed height which does not take into account description\n  `\n};\n\nconst validateOption = (value, validationRule) => {\n  return RegExp(validationRule).test(value) ? true : 'Invalid format';\n};\n\nconst determineRequired = (option, getValues, pathIndex) => {\n  if (!option.dependsOn) {\n    return option.required ? 'Required' : false;\n  }\n\n  if (isEmpty(getValues(`${pathIndex}secureFields`))) {\n    const dependentOn = getValues(`${pathIndex}secureSettings.${option.dependsOn}`);\n    return !Boolean(dependentOn) && option.required ? 'Required' : false;\n  } else {\n    const dependentOn = getValues(`${pathIndex}secureFields.${option.dependsOn}`);\n    return !dependentOn && option.required ? 'Required' : false;\n  }\n};\n\nconst determineReadOnly = (option, getValues, pathIndex) => {\n  if (!option.dependsOn) {\n    return false;\n  }\n\n  if (isEmpty(getValues(`${pathIndex}secureFields`))) {\n    return getValues(`${pathIndex}secureSettings.${option.dependsOn}`);\n  } else {\n    return getValues(`${pathIndex}secureFields.${option.dependsOn}`);\n  }\n};","map":{"version":3,"names":["css","isEmpty","React","useEffect","useFormContext","Checkbox","Field","Input","InputControl","Select","TextArea","KeyValueMapInput","StringArrayInput","SubformArrayField","SubformField","OptionField","option","invalid","pathPrefix","pathSuffix","error","defaultValue","readOnly","optionPath","element","label","undefined","description","message","propertyName","OptionInput","id","pathIndex","control","register","unregister","getValues","name","keepValue","styles","checkbox","determineReadOnly","inputType","required","determineRequired","validate","v","validationRule","validateOption","placeholder","field","onChange","selectOptions","value","console","RegExp","test","dependsOn","dependentOn","Boolean"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/form/fields/OptionField.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport React, { FC, useEffect } from 'react';\nimport { useFormContext, FieldError, DeepMap } from 'react-hook-form';\n\nimport { Checkbox, Field, Input, InputControl, Select, TextArea } from '@grafana/ui';\nimport { NotificationChannelOption } from 'app/types';\n\nimport { KeyValueMapInput } from './KeyValueMapInput';\nimport { StringArrayInput } from './StringArrayInput';\nimport { SubformArrayField } from './SubformArrayField';\nimport { SubformField } from './SubformField';\n\ninterface Props {\n  defaultValue: any;\n  option: NotificationChannelOption;\n  invalid?: boolean;\n  pathPrefix: string;\n  pathSuffix?: string;\n  error?: FieldError | DeepMap<any, FieldError>;\n  readOnly?: boolean;\n}\n\nexport const OptionField: FC<Props> = ({\n  option,\n  invalid,\n  pathPrefix,\n  pathSuffix = '',\n  error,\n  defaultValue,\n  readOnly = false,\n}) => {\n  const optionPath = `${pathPrefix}${pathSuffix}`;\n\n  if (option.element === 'subform') {\n    return (\n      <SubformField\n        readOnly={readOnly}\n        defaultValue={defaultValue}\n        option={option}\n        errors={error as DeepMap<any, FieldError> | undefined}\n        pathPrefix={optionPath}\n      />\n    );\n  }\n  if (option.element === 'subform_array') {\n    return (\n      <SubformArrayField\n        readOnly={readOnly}\n        defaultValues={defaultValue}\n        option={option}\n        pathPrefix={optionPath}\n        errors={error as Array<DeepMap<any, FieldError>> | undefined}\n      />\n    );\n  }\n  return (\n    <Field\n      label={option.element !== 'checkbox' ? option.label : undefined}\n      description={option.description || undefined}\n      invalid={!!error}\n      error={error?.message}\n    >\n      <OptionInput\n        id={`${optionPath}${option.propertyName}`}\n        defaultValue={defaultValue}\n        option={option}\n        invalid={invalid}\n        pathPrefix={optionPath}\n        readOnly={readOnly}\n        pathIndex={pathPrefix}\n      />\n    </Field>\n  );\n};\n\nconst OptionInput: FC<Props & { id: string; pathIndex?: string }> = ({\n  option,\n  invalid,\n  id,\n  pathPrefix = '',\n  pathIndex = '',\n  readOnly = false,\n}) => {\n  const { control, register, unregister, getValues } = useFormContext();\n  const name = `${pathPrefix}${option.propertyName}`;\n\n  // workaround for https://github.com/react-hook-form/react-hook-form/issues/4993#issuecomment-829012506\n  useEffect(\n    () => () => {\n      unregister(name, { keepValue: false });\n    },\n    [unregister, name]\n  );\n  switch (option.element) {\n    case 'checkbox':\n      return (\n        <Checkbox\n          id={id}\n          readOnly={readOnly}\n          disabled={readOnly}\n          className={styles.checkbox}\n          {...register(name)}\n          label={option.label}\n          description={option.description}\n        />\n      );\n    case 'input':\n      return (\n        <Input\n          id={id}\n          readOnly={readOnly || determineReadOnly(option, getValues, pathIndex)}\n          invalid={invalid}\n          type={option.inputType}\n          {...register(name, {\n            required: determineRequired(option, getValues, pathIndex),\n            validate: (v) => (option.validationRule !== '' ? validateOption(v, option.validationRule) : true),\n          })}\n          placeholder={option.placeholder}\n        />\n      );\n\n    case 'select':\n      return (\n        <InputControl\n          render={({ field: { onChange, ref, ...field } }) => (\n            <Select\n              disabled={readOnly}\n              {...field}\n              options={option.selectOptions ?? undefined}\n              invalid={invalid}\n              onChange={(value) => onChange(value.value)}\n            />\n          )}\n          control={control}\n          name={name}\n        />\n      );\n\n    case 'textarea':\n      return (\n        <TextArea\n          id={id}\n          readOnly={readOnly}\n          invalid={invalid}\n          {...register(name, {\n            required: option.required ? 'Required' : false,\n            validate: (v) => (option.validationRule !== '' ? validateOption(v, option.validationRule) : true),\n          })}\n        />\n      );\n    case 'string_array':\n      return (\n        <InputControl\n          render={({ field: { value, onChange } }) => (\n            <StringArrayInput readOnly={readOnly} value={value} onChange={onChange} />\n          )}\n          control={control}\n          name={name}\n        />\n      );\n    case 'key_value_map':\n      return (\n        <InputControl\n          render={({ field: { value, onChange } }) => (\n            <KeyValueMapInput readOnly={readOnly} value={value} onChange={onChange} />\n          )}\n          control={control}\n          name={name}\n        />\n      );\n\n    default:\n      console.error('Element not supported', option.element);\n      return null;\n  }\n};\n\nconst styles = {\n  checkbox: css`\n    height: auto; // native checkbox has fixed height which does not take into account description\n  `,\n};\n\nconst validateOption = (value: string, validationRule: string) => {\n  return RegExp(validationRule).test(value) ? true : 'Invalid format';\n};\n\nconst determineRequired = (option: NotificationChannelOption, getValues: any, pathIndex: string) => {\n  if (!option.dependsOn) {\n    return option.required ? 'Required' : false;\n  }\n  if (isEmpty(getValues(`${pathIndex}secureFields`))) {\n    const dependentOn = getValues(`${pathIndex}secureSettings.${option.dependsOn}`);\n    return !Boolean(dependentOn) && option.required ? 'Required' : false;\n  } else {\n    const dependentOn: boolean = getValues(`${pathIndex}secureFields.${option.dependsOn}`);\n    return !dependentOn && option.required ? 'Required' : false;\n  }\n};\n\nconst determineReadOnly = (option: NotificationChannelOption, getValues: any, pathIndex: string) => {\n  if (!option.dependsOn) {\n    return false;\n  }\n  if (isEmpty(getValues(`${pathIndex}secureFields`))) {\n    return getValues(`${pathIndex}secureSettings.${option.dependsOn}`);\n  } else {\n    return getValues(`${pathIndex}secureFields.${option.dependsOn}`);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}