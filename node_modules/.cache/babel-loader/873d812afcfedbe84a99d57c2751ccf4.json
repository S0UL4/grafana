{"ast":null,"code":"import { css } from '@emotion/css';\nimport { useId } from '@react-aria/utils';\nimport pluralize from 'pluralize';\nimport React, { useCallback, useMemo } from 'react';\nimport { useAsync } from 'react-use';\nimport { InlineField, Select, useStyles2, VerticalGroup } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { filterPanelDataToQuery } from 'app/features/query/components/QueryEditorRow';\nimport { DashboardQueryRow } from './DashboardQueryRow';\nimport { SHARED_DASHBOARD_QUERY } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction getQueryDisplayText(query) {\n  return JSON.stringify(query);\n}\n\nexport function DashboardQueryEditor({\n  panelData,\n  queries,\n  onChange,\n  onRunQueries\n}) {\n  const {\n    value: defaultDatasource\n  } = useAsync(() => getDatasourceSrv().get());\n  const {\n    value: results,\n    loading: loadingResults\n  } = useAsync(async () => {\n    var _query$panelId;\n\n    const query = queries[0];\n    const dashboard = getDashboardSrv().getCurrent();\n    const panel = dashboard === null || dashboard === void 0 ? void 0 : dashboard.getPanelById((_query$panelId = query.panelId) !== null && _query$panelId !== void 0 ? _query$panelId : -124134);\n\n    if (!panel) {\n      return [];\n    }\n\n    const mainDS = await getDatasourceSrv().get(panel.datasource);\n    return Promise.all(panel.targets.map(async query => {\n      var _filterPanelDataToQue;\n\n      const ds = query.datasource ? await getDatasourceSrv().get(query.datasource) : mainDS;\n      const fmt = ds.getQueryDisplayText || getQueryDisplayText;\n      const queryData = (_filterPanelDataToQue = filterPanelDataToQuery(panelData, query.refId)) !== null && _filterPanelDataToQue !== void 0 ? _filterPanelDataToQue : panelData;\n      return {\n        refId: query.refId,\n        query: fmt(query),\n        img: ds.meta.info.logos.small,\n        data: queryData.series,\n        error: queryData.error\n      };\n    }));\n  }, [panelData, queries]);\n  const query = queries[0];\n  const onPanelChanged = useCallback(id => {\n    onChange([Object.assign({}, query, {\n      panelId: id\n    })]);\n    onRunQueries();\n  }, [query, onChange, onRunQueries]);\n  const getPanelDescription = useCallback(panel => {\n    var _panel$datasource, _getDatasourceSrv$get;\n\n    const datasource = (_panel$datasource = panel.datasource) !== null && _panel$datasource !== void 0 ? _panel$datasource : defaultDatasource;\n    const dsname = (_getDatasourceSrv$get = getDatasourceSrv().getInstanceSettings(datasource)) === null || _getDatasourceSrv$get === void 0 ? void 0 : _getDatasourceSrv$get.name;\n    const queryCount = panel.targets.length;\n    return `${queryCount} ${pluralize('query', queryCount)} to ${dsname}`;\n  }, [defaultDatasource]);\n  const dashboard = getDashboardSrv().getCurrent();\n  const panels = useMemo(() => {\n    var _dashboard$panels$fil;\n\n    return (_dashboard$panels$fil = dashboard === null || dashboard === void 0 ? void 0 : dashboard.panels.filter(panel => {\n      var _dashboard$panelInEdi, _panel$datasource2;\n\n      return config.panels[panel.type] && panel.targets && panel.id !== ((_dashboard$panelInEdi = dashboard.panelInEdit) === null || _dashboard$panelInEdi === void 0 ? void 0 : _dashboard$panelInEdi.id) && ((_panel$datasource2 = panel.datasource) === null || _panel$datasource2 === void 0 ? void 0 : _panel$datasource2.uid) !== SHARED_DASHBOARD_QUERY;\n    }).map(panel => {\n      var _panel$title;\n\n      return {\n        value: panel.id,\n        label: (_panel$title = panel.title) !== null && _panel$title !== void 0 ? _panel$title : 'Panel ' + panel.id,\n        description: getPanelDescription(panel),\n        imgUrl: config.panels[panel.type].info.logos.small\n      };\n    })) !== null && _dashboard$panels$fil !== void 0 ? _dashboard$panels$fil : [];\n  }, [dashboard, getPanelDescription]);\n  const styles = useStyles2(getStyles);\n  const selectId = useId();\n\n  if (!dashboard) {\n    return null;\n  }\n\n  if (panels.length < 1) {\n    return /*#__PURE__*/_jsx(\"p\", {\n      className: styles.noQueriesText,\n      children: \"This dashboard does not have any other panels. Add queries to other panels and try again.\"\n    });\n  }\n\n  const selected = panels.find(panel => panel.value === query.panelId); // Same as current URL, but different panelId\n\n  const editURL = `d/${dashboard.uid}/${dashboard.title}?&editPanel=${query.panelId}`;\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineField, {\n      label: \"Use results from panel\",\n      grow: true,\n      children: /*#__PURE__*/_jsx(Select, {\n        inputId: selectId,\n        placeholder: \"Choose panel\",\n        isSearchable: true,\n        options: panels,\n        value: selected,\n        onChange: item => onPanelChanged(item.value)\n      })\n    }), results && !loadingResults && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.results,\n      children: query.panelId && /*#__PURE__*/_jsx(VerticalGroup, {\n        spacing: \"sm\",\n        children: results.map((target, i) => /*#__PURE__*/_jsx(DashboardQueryRow, {\n          editURL: editURL,\n          target: target\n        }, `DashboardQueryRow-${i}`))\n      })\n    })]\n  });\n}\n\nfunction getStyles(theme) {\n  return {\n    results: css({\n      padding: theme.spacing(2)\n    }),\n    noQueriesText: css({\n      padding: theme.spacing(1.25)\n    })\n  };\n}","map":{"version":3,"names":["css","useId","pluralize","React","useCallback","useMemo","useAsync","InlineField","Select","useStyles2","VerticalGroup","config","getDashboardSrv","getDatasourceSrv","filterPanelDataToQuery","DashboardQueryRow","SHARED_DASHBOARD_QUERY","getQueryDisplayText","query","JSON","stringify","DashboardQueryEditor","panelData","queries","onChange","onRunQueries","value","defaultDatasource","get","results","loading","loadingResults","dashboard","getCurrent","panel","getPanelById","panelId","mainDS","datasource","Promise","all","targets","map","ds","fmt","queryData","refId","img","meta","info","logos","small","data","series","error","onPanelChanged","id","getPanelDescription","dsname","getInstanceSettings","name","queryCount","length","panels","filter","type","panelInEdit","uid","label","title","description","imgUrl","styles","getStyles","selectId","noQueriesText","selected","find","editURL","item","target","i","theme","padding","spacing"],"sources":["/home/soula/grafana/public/app/plugins/datasource/dashboard/DashboardQueryEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useId } from '@react-aria/utils';\nimport pluralize from 'pluralize';\nimport React, { useCallback, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataQuery, GrafanaTheme2, PanelData, SelectableValue } from '@grafana/data';\nimport { InlineField, Select, useStyles2, VerticalGroup } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { filterPanelDataToQuery } from 'app/features/query/components/QueryEditorRow';\n\nimport { DashboardQueryRow } from './DashboardQueryRow';\nimport { DashboardQuery, ResultInfo, SHARED_DASHBOARD_QUERY } from './types';\n\nfunction getQueryDisplayText(query: DataQuery): string {\n  return JSON.stringify(query);\n}\n\ninterface Props {\n  queries: DataQuery[];\n  panelData: PanelData;\n  onChange: (queries: DataQuery[]) => void;\n  onRunQueries: () => void;\n}\n\nexport function DashboardQueryEditor({ panelData, queries, onChange, onRunQueries }: Props) {\n  const { value: defaultDatasource } = useAsync(() => getDatasourceSrv().get());\n  const { value: results, loading: loadingResults } = useAsync(async (): Promise<ResultInfo[]> => {\n    const query = queries[0] as DashboardQuery;\n    const dashboard = getDashboardSrv().getCurrent();\n    const panel = dashboard?.getPanelById(query.panelId ?? -124134);\n\n    if (!panel) {\n      return [];\n    }\n\n    const mainDS = await getDatasourceSrv().get(panel.datasource);\n    return Promise.all(\n      panel.targets.map(async (query) => {\n        const ds = query.datasource ? await getDatasourceSrv().get(query.datasource) : mainDS;\n        const fmt = ds.getQueryDisplayText || getQueryDisplayText;\n\n        const queryData = filterPanelDataToQuery(panelData, query.refId) ?? panelData;\n\n        return {\n          refId: query.refId,\n          query: fmt(query),\n          img: ds.meta.info.logos.small,\n          data: queryData.series,\n          error: queryData.error,\n        };\n      })\n    );\n  }, [panelData, queries]);\n\n  const query = queries[0] as DashboardQuery;\n\n  const onPanelChanged = useCallback(\n    (id: number) => {\n      onChange([\n        {\n          ...query,\n          panelId: id,\n        } as DashboardQuery,\n      ]);\n      onRunQueries();\n    },\n    [query, onChange, onRunQueries]\n  );\n\n  const getPanelDescription = useCallback(\n    (panel: PanelModel): string => {\n      const datasource = panel.datasource ?? defaultDatasource;\n      const dsname = getDatasourceSrv().getInstanceSettings(datasource)?.name;\n      const queryCount = panel.targets.length;\n      return `${queryCount} ${pluralize('query', queryCount)} to ${dsname}`;\n    },\n    [defaultDatasource]\n  );\n\n  const dashboard = getDashboardSrv().getCurrent();\n  const panels: Array<SelectableValue<number>> = useMemo(\n    () =>\n      dashboard?.panels\n        .filter(\n          (panel) =>\n            config.panels[panel.type] &&\n            panel.targets &&\n            panel.id !== dashboard.panelInEdit?.id &&\n            panel.datasource?.uid !== SHARED_DASHBOARD_QUERY\n        )\n        .map((panel) => ({\n          value: panel.id,\n          label: panel.title ?? 'Panel ' + panel.id,\n          description: getPanelDescription(panel),\n          imgUrl: config.panels[panel.type].info.logos.small,\n        })) ?? [],\n    [dashboard, getPanelDescription]\n  );\n\n  const styles = useStyles2(getStyles);\n  const selectId = useId();\n\n  if (!dashboard) {\n    return null;\n  }\n\n  if (panels.length < 1) {\n    return (\n      <p className={styles.noQueriesText}>\n        This dashboard does not have any other panels. Add queries to other panels and try again.\n      </p>\n    );\n  }\n\n  const selected = panels.find((panel) => panel.value === query.panelId);\n  // Same as current URL, but different panelId\n  const editURL = `d/${dashboard.uid}/${dashboard.title}?&editPanel=${query.panelId}`;\n\n  return (\n    <>\n      <InlineField label=\"Use results from panel\" grow>\n        <Select\n          inputId={selectId}\n          placeholder=\"Choose panel\"\n          isSearchable={true}\n          options={panels}\n          value={selected}\n          onChange={(item) => onPanelChanged(item.value!)}\n        />\n      </InlineField>\n\n      {results && !loadingResults && (\n        <div className={styles.results}>\n          {query.panelId && (\n            <VerticalGroup spacing=\"sm\">\n              {results.map((target, i) => (\n                <DashboardQueryRow editURL={editURL} target={target} key={`DashboardQueryRow-${i}`} />\n              ))}\n            </VerticalGroup>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    results: css({\n      padding: theme.spacing(2),\n    }),\n    noQueriesText: css({\n      padding: theme.spacing(1.25),\n    }),\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}