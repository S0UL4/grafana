{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport memoizeOne from 'memoize-one';\nimport { colors } from '@grafana/ui'; // TS needs the precise return type\n\nfunction strToRgb(s) {\n  if (s.length !== 7) {\n    return [0, 0, 0];\n  }\n\n  const r = s.slice(1, 3);\n  const g = s.slice(3, 5);\n  const b = s.slice(5);\n  return [parseInt(r, 16), parseInt(g, 16), parseInt(b, 16)];\n}\n\nclass ColorGenerator {\n  constructor(colorsHex) {\n    _defineProperty(this, \"colorsHex\", void 0);\n\n    _defineProperty(this, \"colorsRgb\", void 0);\n\n    _defineProperty(this, \"cache\", void 0);\n\n    this.colorsHex = colorsHex;\n    this.colorsRgb = colorsHex.map(strToRgb);\n    this.cache = new Map();\n  }\n\n  _getColorIndex(key) {\n    let i = this.cache.get(key);\n\n    if (i == null) {\n      const hash = this.hashCode(key.toLowerCase());\n      const hashIndex = Math.abs(hash % this.colorsHex.length); // colors[4] is red (which we want to disallow as a span color because it looks like an error)\n\n      i = hashIndex === 4 ? hashIndex + 1 : hashIndex;\n      this.cache.set(key, i);\n    }\n\n    return i;\n  }\n\n  hashCode(key) {\n    var hash = 0,\n        i,\n        chr;\n\n    for (i = 0; i < key.length; i++) {\n      chr = key.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n    }\n\n    return hash;\n  }\n  /**\n   * Will assign a color to an arbitrary key.\n   * If the key has been used already, it will\n   * use the same color.\n   */\n\n\n  getColorByKey(key) {\n    const i = this._getColorIndex(key);\n\n    return this.colorsHex[i];\n  }\n  /**\n   * Retrieve the RGB values associated with a key. Adds the key and associates\n   * it with a color if the key is not recognized.\n   * @returns {number[]} An array of three ints [0, 255] representing a color.\n   */\n\n\n  getRgbColorByKey(key) {\n    const i = this._getColorIndex(key);\n\n    return this.colorsRgb[i];\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n\n}\n\nconst getGenerator = memoizeOne(colors => {\n  return new ColorGenerator(colors);\n});\nexport function clear() {\n  getGenerator([]);\n}\nexport function getColorByKey(key, theme) {\n  return getGenerator(colors).getColorByKey(key);\n}\nexport function getRgbColorByKey(key, theme) {\n  return getGenerator(colors).getRgbColorByKey(key);\n}","map":{"version":3,"names":["memoizeOne","colors","strToRgb","s","length","r","slice","g","b","parseInt","ColorGenerator","constructor","colorsHex","colorsRgb","map","cache","Map","_getColorIndex","key","i","get","hash","hashCode","toLowerCase","hashIndex","Math","abs","set","chr","charCodeAt","getColorByKey","getRgbColorByKey","clear","getGenerator","theme"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/utils/color-generator.tsx"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport memoizeOne from 'memoize-one';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { colors } from '@grafana/ui';\n\n// TS needs the precise return type\nfunction strToRgb(s: string): [number, number, number] {\n  if (s.length !== 7) {\n    return [0, 0, 0];\n  }\n  const r = s.slice(1, 3);\n  const g = s.slice(3, 5);\n  const b = s.slice(5);\n  return [parseInt(r, 16), parseInt(g, 16), parseInt(b, 16)];\n}\n\nclass ColorGenerator {\n  colorsHex: string[];\n  colorsRgb: Array<[number, number, number]>;\n  cache: Map<string, number>;\n\n  constructor(colorsHex: string[]) {\n    this.colorsHex = colorsHex;\n    this.colorsRgb = colorsHex.map(strToRgb);\n    this.cache = new Map();\n  }\n\n  _getColorIndex(key: string): number {\n    let i = this.cache.get(key);\n    if (i == null) {\n      const hash = this.hashCode(key.toLowerCase());\n      const hashIndex = Math.abs(hash % this.colorsHex.length);\n      // colors[4] is red (which we want to disallow as a span color because it looks like an error)\n      i = hashIndex === 4 ? hashIndex + 1 : hashIndex;\n      this.cache.set(key, i);\n    }\n    return i;\n  }\n\n  hashCode(key: string) {\n    var hash = 0,\n      i,\n      chr;\n    for (i = 0; i < key.length; i++) {\n      chr = key.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n    }\n    return hash;\n  }\n\n  /**\n   * Will assign a color to an arbitrary key.\n   * If the key has been used already, it will\n   * use the same color.\n   */\n  getColorByKey(key: string) {\n    const i = this._getColorIndex(key);\n    return this.colorsHex[i];\n  }\n\n  /**\n   * Retrieve the RGB values associated with a key. Adds the key and associates\n   * it with a color if the key is not recognized.\n   * @returns {number[]} An array of three ints [0, 255] representing a color.\n   */\n  getRgbColorByKey(key: string): [number, number, number] {\n    const i = this._getColorIndex(key);\n    return this.colorsRgb[i];\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n}\n\nconst getGenerator = memoizeOne((colors: string[]) => {\n  return new ColorGenerator(colors);\n});\n\nexport function clear() {\n  getGenerator([]);\n}\n\nexport function getColorByKey(key: string, theme: GrafanaTheme2) {\n  return getGenerator(colors).getColorByKey(key);\n}\n\nexport function getRgbColorByKey(key: string, theme: GrafanaTheme2): [number, number, number] {\n  return getGenerator(colors).getRgbColorByKey(key);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}