{"ast":null,"code":"import { getBackendSrv } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\nexport const getPublicDashboardConfig = async (dashboardUid, setPublicDashboard) => {\n  const url = `/api/dashboards/uid/${dashboardUid}/public-config`;\n  const pdResp = await getBackendSrv().get(url);\n  setPublicDashboard(pdResp);\n};\nexport const savePublicDashboardConfig = async (dashboardUid, publicDashboardConfig, setPublicDashboard) => {\n  const url = `/api/dashboards/uid/${dashboardUid}/public-config`;\n  const pdResp = await getBackendSrv().post(url, publicDashboardConfig); // Never allow a user to send the orgId\n  // @ts-ignore\n\n  delete pdResp.orgId;\n  dispatch(notifyApp(createSuccessNotification('Dashboard sharing configuration saved')));\n  setPublicDashboard(pdResp);\n}; // Instance methods\n\nexport const dashboardHasTemplateVariables = variables => {\n  return variables.length > 0;\n};\nexport const publicDashboardPersisted = publicDashboard => {\n  return publicDashboard.uid !== '' && publicDashboard.uid !== undefined;\n};\nexport const generatePublicDashboardUrl = publicDashboard => {\n  return `${window.location.origin}/public-dashboards/${publicDashboard.accessToken}`;\n};","map":{"version":3,"names":["getBackendSrv","notifyApp","createSuccessNotification","dispatch","getPublicDashboardConfig","dashboardUid","setPublicDashboard","url","pdResp","get","savePublicDashboardConfig","publicDashboardConfig","post","orgId","dashboardHasTemplateVariables","variables","length","publicDashboardPersisted","publicDashboard","uid","undefined","generatePublicDashboardUrl","window","location","origin","accessToken"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/ShareModal/SharePublicDashboardUtils.ts"],"sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport { VariableModel } from 'app/features/variables/types';\nimport { dispatch } from 'app/store/store';\nimport { DashboardDataDTO, DashboardMeta } from 'app/types/dashboard';\n\nexport interface PublicDashboard {\n  accessToken?: string;\n  isEnabled: boolean;\n  uid: string;\n  dashboardUid: string;\n  timeSettings?: object;\n}\n\nexport interface DashboardResponse {\n  dashboard: DashboardDataDTO;\n  meta: DashboardMeta;\n}\n\nexport const getPublicDashboardConfig = async (\n  dashboardUid: string,\n  setPublicDashboard: React.Dispatch<React.SetStateAction<PublicDashboard>>\n) => {\n  const url = `/api/dashboards/uid/${dashboardUid}/public-config`;\n  const pdResp: PublicDashboard = await getBackendSrv().get(url);\n  setPublicDashboard(pdResp);\n};\n\nexport const savePublicDashboardConfig = async (\n  dashboardUid: string,\n  publicDashboardConfig: PublicDashboard,\n  setPublicDashboard: React.Dispatch<React.SetStateAction<PublicDashboard>>\n) => {\n  const url = `/api/dashboards/uid/${dashboardUid}/public-config`;\n  const pdResp: PublicDashboard = await getBackendSrv().post(url, publicDashboardConfig);\n\n  // Never allow a user to send the orgId\n  // @ts-ignore\n  delete pdResp.orgId;\n\n  dispatch(notifyApp(createSuccessNotification('Dashboard sharing configuration saved')));\n  setPublicDashboard(pdResp);\n};\n\n// Instance methods\nexport const dashboardHasTemplateVariables = (variables: VariableModel[]): boolean => {\n  return variables.length > 0;\n};\n\nexport const publicDashboardPersisted = (publicDashboard: PublicDashboard): boolean => {\n  return publicDashboard.uid !== '' && publicDashboard.uid !== undefined;\n};\n\nexport const generatePublicDashboardUrl = (publicDashboard: PublicDashboard): string => {\n  return `${window.location.origin}/public-dashboards/${publicDashboard.accessToken}`;\n};\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AAEA,SAASC,QAAT,QAAyB,iBAAzB;AAgBA,OAAO,MAAMC,wBAAwB,GAAG,OACtCC,YADsC,EAEtCC,kBAFsC,KAGnC;EACH,MAAMC,GAAG,GAAI,uBAAsBF,YAAa,gBAAhD;EACA,MAAMG,MAAuB,GAAG,MAAMR,aAAa,GAAGS,GAAhB,CAAoBF,GAApB,CAAtC;EACAD,kBAAkB,CAACE,MAAD,CAAlB;AACD,CAPM;AASP,OAAO,MAAME,yBAAyB,GAAG,OACvCL,YADuC,EAEvCM,qBAFuC,EAGvCL,kBAHuC,KAIpC;EACH,MAAMC,GAAG,GAAI,uBAAsBF,YAAa,gBAAhD;EACA,MAAMG,MAAuB,GAAG,MAAMR,aAAa,GAAGY,IAAhB,CAAqBL,GAArB,EAA0BI,qBAA1B,CAAtC,CAFG,CAIH;EACA;;EACA,OAAOH,MAAM,CAACK,KAAd;EAEAV,QAAQ,CAACF,SAAS,CAACC,yBAAyB,CAAC,uCAAD,CAA1B,CAAV,CAAR;EACAI,kBAAkB,CAACE,MAAD,CAAlB;AACD,CAdM,C,CAgBP;;AACA,OAAO,MAAMM,6BAA6B,GAAIC,SAAD,IAAyC;EACpF,OAAOA,SAAS,CAACC,MAAV,GAAmB,CAA1B;AACD,CAFM;AAIP,OAAO,MAAMC,wBAAwB,GAAIC,eAAD,IAA+C;EACrF,OAAOA,eAAe,CAACC,GAAhB,KAAwB,EAAxB,IAA8BD,eAAe,CAACC,GAAhB,KAAwBC,SAA7D;AACD,CAFM;AAIP,OAAO,MAAMC,0BAA0B,GAAIH,eAAD,IAA8C;EACtF,OAAQ,GAAEI,MAAM,CAACC,QAAP,CAAgBC,MAAO,sBAAqBN,eAAe,CAACO,WAAY,EAAlF;AACD,CAFM"},"metadata":{},"sourceType":"module"}