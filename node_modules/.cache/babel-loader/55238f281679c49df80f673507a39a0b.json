{"ast":null,"code":"var _h, _p, _div, _LoadingPlaceholder, _p2;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { Subscription } from 'rxjs';\nimport { AppEvents } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Stack } from '@grafana/experimental';\nimport { config, RefreshEvent } from '@grafana/runtime';\nimport { Button, ClipboardButton, JSONFormatter, LoadingPlaceholder } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { supportsDataQuery } from 'app/features/dashboard/components/PanelEditor/utils';\nimport { getPanelInspectorStyles } from './styles';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class QueryInspector extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"formattedJson\", void 0);\n\n    _defineProperty(this, \"subs\", new Subscription());\n\n    _defineProperty(this, \"onPanelRefresh\", () => {\n      this.setState(prevState => Object.assign({}, prevState, {\n        dsQuery: {\n          isLoading: true,\n          response: {}\n        }\n      }));\n    });\n\n    _defineProperty(this, \"setFormattedJson\", formattedJson => {\n      this.formattedJson = formattedJson;\n    });\n\n    _defineProperty(this, \"getTextForClipboard\", () => {\n      return JSON.stringify(this.formattedJson, null, 2);\n    });\n\n    _defineProperty(this, \"onClipboardSuccess\", () => {\n      appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n    });\n\n    _defineProperty(this, \"onToggleExpand\", () => {\n      this.setState(prevState => Object.assign({}, prevState, {\n        allNodesExpanded: !this.state.allNodesExpanded\n      }));\n    });\n\n    _defineProperty(this, \"onToggleMocking\", () => {\n      this.setState(prevState => Object.assign({}, prevState, {\n        isMocking: !this.state.isMocking\n      }));\n    });\n\n    _defineProperty(this, \"getNrOfOpenNodes\", () => {\n      if (this.state.allNodesExpanded === null) {\n        return 3; // 3 is default, ie when state is null\n      } else if (this.state.allNodesExpanded) {\n        return 20;\n      }\n\n      return 1;\n    });\n\n    _defineProperty(this, \"setMockedResponse\", evt => {\n      const mockedResponse = evt.target.value;\n      this.setState(prevState => Object.assign({}, prevState, {\n        mockedResponse\n      }));\n    });\n\n    this.state = {\n      executedQueries: [],\n      allNodesExpanded: null,\n      isMocking: false,\n      mockedResponse: '',\n      dsQuery: {\n        isLoading: false,\n        response: {}\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      panel\n    } = this.props;\n    this.subs.add(backendSrv.getInspectorStream().subscribe({\n      next: response => this.onDataSourceResponse(response)\n    }));\n\n    if (panel) {\n      this.subs.add(panel.events.subscribe(RefreshEvent, this.onPanelRefresh));\n      this.updateQueryList();\n    }\n  }\n\n  componentDidUpdate(oldProps) {\n    if (this.props.data !== oldProps.data) {\n      this.updateQueryList();\n    }\n  }\n  /**\n   * Find the list of executed queries\n   */\n\n\n  updateQueryList() {\n    const {\n      data\n    } = this.props;\n    const executedQueries = [];\n\n    if (data !== null && data !== void 0 && data.length) {\n      let last = undefined;\n      data.forEach((frame, idx) => {\n        var _frame$meta;\n\n        const query = (_frame$meta = frame.meta) === null || _frame$meta === void 0 ? void 0 : _frame$meta.executedQueryString;\n\n        if (query) {\n          var _last;\n\n          const refId = frame.refId || '?';\n\n          if (((_last = last) === null || _last === void 0 ? void 0 : _last.refId) === refId) {\n            last.frames++;\n            last.rows += frame.length;\n          } else {\n            last = {\n              refId,\n              frames: 0,\n              rows: frame.length,\n              query\n            };\n            executedQueries.push(last);\n          }\n        }\n      });\n    }\n\n    this.setState({\n      executedQueries\n    });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  onDataSourceResponse(response) {\n    var _response$config;\n\n    // ignore silent requests\n    if ((_response$config = response.config) !== null && _response$config !== void 0 && _response$config.hideFromInspector) {\n      return;\n    }\n\n    response = Object.assign({}, response); // clone - dont modify the response\n\n    if (response.headers) {\n      delete response.headers;\n    }\n\n    if (response.config) {\n      response.request = response.config;\n      delete response.config;\n      delete response.request.transformRequest;\n      delete response.request.transformResponse;\n      delete response.request.paramSerializer;\n      delete response.request.jsonpCallbackParam;\n      delete response.request.headers;\n      delete response.request.requestId;\n      delete response.request.inspect;\n      delete response.request.retry;\n      delete response.request.timeout;\n    }\n\n    if (response.data) {\n      response.response = response.data;\n      delete response.config;\n      delete response.data;\n      delete response.status;\n      delete response.statusText;\n      delete response.ok;\n      delete response.url;\n      delete response.redirected;\n      delete response.type;\n      delete response.$$config;\n    }\n\n    this.setState(prevState => Object.assign({}, prevState, {\n      dsQuery: {\n        isLoading: false,\n        response: response\n      }\n    }));\n  }\n\n  renderExecutedQueries(executedQueries) {\n    if (!executedQueries.length) {\n      return null;\n    }\n\n    const styles = {\n      refId: css`\n        font-weight: ${config.theme.typography.weight.semibold};\n        color: ${config.theme.colors.textBlue};\n        margin-right: 8px;\n      `\n    };\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: executedQueries.map(info => {\n        return /*#__PURE__*/_jsxs(Stack, {\n          gap: 1,\n          direction: \"column\",\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsxs(\"span\", {\n              className: styles.refId,\n              children: [info.refId, \":\"]\n            }), info.frames > 1 && /*#__PURE__*/_jsxs(\"span\", {\n              children: [info.frames, \" frames, \"]\n            }), /*#__PURE__*/_jsxs(\"span\", {\n              children: [info.rows, \" rows\"]\n            })]\n          }), /*#__PURE__*/_jsx(\"pre\", {\n            children: info.query\n          })]\n        }, info.refId);\n      })\n    });\n  }\n\n  render() {\n    const {\n      allNodesExpanded,\n      executedQueries\n    } = this.state;\n    const {\n      panel,\n      onRefreshQuery\n    } = this.props;\n    const {\n      response,\n      isLoading\n    } = this.state.dsQuery;\n    const openNodes = this.getNrOfOpenNodes();\n    const styles = getPanelInspectorStyles();\n    const haveData = Object.keys(response).length > 0;\n\n    if (panel && !supportsDataQuery(panel.plugin)) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.wrap,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        \"aria-label\": selectors.components.PanelInspector.Query.content,\n        children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n          className: \"section-heading\",\n          children: \"Query inspector\"\n        })), _p || (_p = /*#__PURE__*/_jsx(\"p\", {\n          className: \"small muted\",\n          children: \"Query inspector allows you to view raw request and response. To collect this data Grafana needs to issue a new query. Click refresh button below to trigger a new query.\"\n        }))]\n      }), this.renderExecutedQueries(executedQueries), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.toolbar,\n        children: [/*#__PURE__*/_jsx(Button, {\n          icon: \"sync\",\n          onClick: onRefreshQuery,\n          \"aria-label\": selectors.components.PanelInspector.Query.refreshButton,\n          children: \"Refresh\"\n        }), haveData && allNodesExpanded && /*#__PURE__*/_jsx(Button, {\n          icon: \"minus\",\n          variant: \"secondary\",\n          className: styles.toolbarItem,\n          onClick: this.onToggleExpand,\n          children: \"Collapse all\"\n        }), haveData && !allNodesExpanded && /*#__PURE__*/_jsx(Button, {\n          icon: \"plus\",\n          variant: \"secondary\",\n          className: styles.toolbarItem,\n          onClick: this.onToggleExpand,\n          children: \"Expand all\"\n        }), haveData && /*#__PURE__*/_jsx(ClipboardButton, {\n          getText: this.getTextForClipboard,\n          onClipboardCopy: this.onClipboardSuccess,\n          className: styles.toolbarItem,\n          icon: \"copy\",\n          variant: \"secondary\",\n          children: \"Copy to clipboard\"\n        }), _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n          className: \"flex-grow-1\"\n        }))]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.content,\n        children: [isLoading && (_LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n          text: \"Loading query inspector...\"\n        }))), !isLoading && haveData && /*#__PURE__*/_jsx(JSONFormatter, {\n          json: response,\n          open: openNodes,\n          onDidRender: this.setFormattedJson\n        }), !isLoading && !haveData && (_p2 || (_p2 = /*#__PURE__*/_jsx(\"p\", {\n          className: \"muted\",\n          children: \"No request and response collected yet. Hit refresh button\"\n        })))]\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["css","React","PureComponent","Subscription","AppEvents","selectors","Stack","config","RefreshEvent","Button","ClipboardButton","JSONFormatter","LoadingPlaceholder","appEvents","backendSrv","supportsDataQuery","getPanelInspectorStyles","QueryInspector","constructor","props","setState","prevState","dsQuery","isLoading","response","formattedJson","JSON","stringify","emit","alertSuccess","allNodesExpanded","state","isMocking","evt","mockedResponse","target","value","executedQueries","componentDidMount","panel","subs","add","getInspectorStream","subscribe","next","onDataSourceResponse","events","onPanelRefresh","updateQueryList","componentDidUpdate","oldProps","data","length","last","undefined","forEach","frame","idx","query","meta","executedQueryString","refId","frames","rows","push","componentWillUnmount","unsubscribe","hideFromInspector","headers","request","transformRequest","transformResponse","paramSerializer","jsonpCallbackParam","requestId","inspect","retry","timeout","status","statusText","ok","url","redirected","type","$$config","renderExecutedQueries","styles","theme","typography","weight","semibold","colors","textBlue","map","info","render","onRefreshQuery","openNodes","getNrOfOpenNodes","haveData","Object","keys","plugin","wrap","components","PanelInspector","Query","content","toolbar","refreshButton","toolbarItem","onToggleExpand","getTextForClipboard","onClipboardSuccess","setFormattedJson"],"sources":["/home/soula/grafana/public/app/features/inspector/QueryInspector.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport { AppEvents, DataFrame } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Stack } from '@grafana/experimental';\nimport { config, RefreshEvent } from '@grafana/runtime';\nimport { Button, ClipboardButton, JSONFormatter, LoadingPlaceholder } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { supportsDataQuery } from 'app/features/dashboard/components/PanelEditor/utils';\nimport { PanelModel } from 'app/features/dashboard/state';\n\nimport { getPanelInspectorStyles } from './styles';\n\ninterface DsQuery {\n  isLoading: boolean;\n  response: {};\n}\n\ninterface ExecutedQueryInfo {\n  refId: string;\n  query: string;\n  frames: number;\n  rows: number;\n}\n\ninterface Props {\n  data: DataFrame[];\n  onRefreshQuery: () => void;\n  panel?: PanelModel;\n}\n\ninterface State {\n  allNodesExpanded: boolean | null;\n  isMocking: boolean;\n  mockedResponse: string;\n  dsQuery: DsQuery;\n  executedQueries: ExecutedQueryInfo[];\n}\n\nexport class QueryInspector extends PureComponent<Props, State> {\n  private formattedJson: any;\n  private subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      executedQueries: [],\n      allNodesExpanded: null,\n      isMocking: false,\n      mockedResponse: '',\n      dsQuery: {\n        isLoading: false,\n        response: {},\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n\n    this.subs.add(\n      backendSrv.getInspectorStream().subscribe({\n        next: (response) => this.onDataSourceResponse(response),\n      })\n    );\n\n    if (panel) {\n      this.subs.add(panel.events.subscribe(RefreshEvent, this.onPanelRefresh));\n      this.updateQueryList();\n    }\n  }\n\n  componentDidUpdate(oldProps: Props) {\n    if (this.props.data !== oldProps.data) {\n      this.updateQueryList();\n    }\n  }\n\n  /**\n   * Find the list of executed queries\n   */\n  updateQueryList() {\n    const { data } = this.props;\n    const executedQueries: ExecutedQueryInfo[] = [];\n\n    if (data?.length) {\n      let last: ExecutedQueryInfo | undefined = undefined;\n\n      data.forEach((frame, idx) => {\n        const query = frame.meta?.executedQueryString;\n\n        if (query) {\n          const refId = frame.refId || '?';\n\n          if (last?.refId === refId) {\n            last.frames++;\n            last.rows += frame.length;\n          } else {\n            last = {\n              refId,\n              frames: 0,\n              rows: frame.length,\n              query,\n            };\n            executedQueries.push(last);\n          }\n        }\n      });\n    }\n\n    this.setState({ executedQueries });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  onPanelRefresh = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      dsQuery: {\n        isLoading: true,\n        response: {},\n      },\n    }));\n  };\n\n  onDataSourceResponse(response: any) {\n    // ignore silent requests\n    if (response.config?.hideFromInspector) {\n      return;\n    }\n\n    response = { ...response }; // clone - dont modify the response\n\n    if (response.headers) {\n      delete response.headers;\n    }\n\n    if (response.config) {\n      response.request = response.config;\n\n      delete response.config;\n      delete response.request.transformRequest;\n      delete response.request.transformResponse;\n      delete response.request.paramSerializer;\n      delete response.request.jsonpCallbackParam;\n      delete response.request.headers;\n      delete response.request.requestId;\n      delete response.request.inspect;\n      delete response.request.retry;\n      delete response.request.timeout;\n    }\n\n    if (response.data) {\n      response.response = response.data;\n\n      delete response.config;\n      delete response.data;\n      delete response.status;\n      delete response.statusText;\n      delete response.ok;\n      delete response.url;\n      delete response.redirected;\n      delete response.type;\n      delete response.$$config;\n    }\n\n    this.setState((prevState) => ({\n      ...prevState,\n      dsQuery: {\n        isLoading: false,\n        response: response,\n      },\n    }));\n  }\n\n  setFormattedJson = (formattedJson: any) => {\n    this.formattedJson = formattedJson;\n  };\n\n  getTextForClipboard = () => {\n    return JSON.stringify(this.formattedJson, null, 2);\n  };\n\n  onClipboardSuccess = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  onToggleExpand = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      allNodesExpanded: !this.state.allNodesExpanded,\n    }));\n  };\n\n  onToggleMocking = () => {\n    this.setState((prevState) => ({\n      ...prevState,\n      isMocking: !this.state.isMocking,\n    }));\n  };\n\n  getNrOfOpenNodes = () => {\n    if (this.state.allNodesExpanded === null) {\n      return 3; // 3 is default, ie when state is null\n    } else if (this.state.allNodesExpanded) {\n      return 20;\n    }\n    return 1;\n  };\n\n  setMockedResponse = (evt: any) => {\n    const mockedResponse = evt.target.value;\n    this.setState((prevState) => ({\n      ...prevState,\n      mockedResponse,\n    }));\n  };\n\n  renderExecutedQueries(executedQueries: ExecutedQueryInfo[]) {\n    if (!executedQueries.length) {\n      return null;\n    }\n\n    const styles = {\n      refId: css`\n        font-weight: ${config.theme.typography.weight.semibold};\n        color: ${config.theme.colors.textBlue};\n        margin-right: 8px;\n      `,\n    };\n\n    return (\n      <div>\n        {executedQueries.map((info) => {\n          return (\n            <Stack key={info.refId} gap={1} direction=\"column\">\n              <div>\n                <span className={styles.refId}>{info.refId}:</span>\n                {info.frames > 1 && <span>{info.frames} frames, </span>}\n                <span>{info.rows} rows</span>\n              </div>\n              <pre>{info.query}</pre>\n            </Stack>\n          );\n        })}\n      </div>\n    );\n  }\n\n  render() {\n    const { allNodesExpanded, executedQueries } = this.state;\n    const { panel, onRefreshQuery } = this.props;\n    const { response, isLoading } = this.state.dsQuery;\n    const openNodes = this.getNrOfOpenNodes();\n    const styles = getPanelInspectorStyles();\n    const haveData = Object.keys(response).length > 0;\n\n    if (panel && !supportsDataQuery(panel.plugin)) {\n      return null;\n    }\n\n    return (\n      <div className={styles.wrap}>\n        <div aria-label={selectors.components.PanelInspector.Query.content}>\n          <h3 className=\"section-heading\">Query inspector</h3>\n          <p className=\"small muted\">\n            Query inspector allows you to view raw request and response. To collect this data Grafana needs to issue a\n            new query. Click refresh button below to trigger a new query.\n          </p>\n        </div>\n        {this.renderExecutedQueries(executedQueries)}\n        <div className={styles.toolbar}>\n          <Button\n            icon=\"sync\"\n            onClick={onRefreshQuery}\n            aria-label={selectors.components.PanelInspector.Query.refreshButton}\n          >\n            Refresh\n          </Button>\n\n          {haveData && allNodesExpanded && (\n            <Button icon=\"minus\" variant=\"secondary\" className={styles.toolbarItem} onClick={this.onToggleExpand}>\n              Collapse all\n            </Button>\n          )}\n          {haveData && !allNodesExpanded && (\n            <Button icon=\"plus\" variant=\"secondary\" className={styles.toolbarItem} onClick={this.onToggleExpand}>\n              Expand all\n            </Button>\n          )}\n\n          {haveData && (\n            <ClipboardButton\n              getText={this.getTextForClipboard}\n              onClipboardCopy={this.onClipboardSuccess}\n              className={styles.toolbarItem}\n              icon=\"copy\"\n              variant=\"secondary\"\n            >\n              Copy to clipboard\n            </ClipboardButton>\n          )}\n          <div className=\"flex-grow-1\" />\n        </div>\n        <div className={styles.content}>\n          {isLoading && <LoadingPlaceholder text=\"Loading query inspector...\" />}\n          {!isLoading && haveData && (\n            <JSONFormatter json={response} open={openNodes} onDidRender={this.setFormattedJson} />\n          )}\n          {!isLoading && !haveData && (\n            <p className=\"muted\">No request and response collected yet. Hit refresh button</p>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}