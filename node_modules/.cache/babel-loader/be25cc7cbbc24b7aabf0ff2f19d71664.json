{"ast":null,"code":"import { ResourceDimensionMode, ScalarDimensionMode } from 'app/features/dimensions';\nexport let GeometryTypeId; // StyleConfig is saved in panel json and is used to configure how items get rendered\n\n(function (GeometryTypeId) {\n  GeometryTypeId[\"Point\"] = \"point\";\n  GeometryTypeId[\"Line\"] = \"line\";\n  GeometryTypeId[\"Polygon\"] = \"polygon\";\n  GeometryTypeId[\"Any\"] = \"*any*\";\n})(GeometryTypeId || (GeometryTypeId = {}));\n\nexport const DEFAULT_SIZE = 5;\nexport let TextAlignment;\n\n(function (TextAlignment) {\n  TextAlignment[\"Left\"] = \"left\";\n  TextAlignment[\"Center\"] = \"center\";\n  TextAlignment[\"Right\"] = \"right\";\n})(TextAlignment || (TextAlignment = {}));\n\nexport let TextBaseline;\n\n(function (TextBaseline) {\n  TextBaseline[\"Top\"] = \"top\";\n  TextBaseline[\"Middle\"] = \"middle\";\n  TextBaseline[\"Bottom\"] = \"bottom\";\n})(TextBaseline || (TextBaseline = {}));\n\nexport const defaultStyleConfig = Object.freeze({\n  size: {\n    fixed: DEFAULT_SIZE,\n    min: 2,\n    max: 15\n  },\n  color: {\n    fixed: 'dark-green' // picked from theme\n\n  },\n  opacity: 0.4,\n  symbol: {\n    mode: ResourceDimensionMode.Fixed,\n    fixed: 'img/icons/marker/circle.svg'\n  },\n  textConfig: {\n    fontSize: 12,\n    textAlign: TextAlignment.Center,\n    textBaseline: TextBaseline.Middle,\n    offsetX: 0,\n    offsetY: 0\n  },\n  rotation: {\n    fixed: 0,\n    mode: ScalarDimensionMode.Mod,\n    min: -360,\n    max: 360\n  }\n});\n/**\n * Static options for text display.  See:\n * https://openlayers.org/en/latest/apidoc/module-ol_style_Text.html\n */","map":{"version":3,"names":["ResourceDimensionMode","ScalarDimensionMode","GeometryTypeId","DEFAULT_SIZE","TextAlignment","TextBaseline","defaultStyleConfig","Object","freeze","size","fixed","min","max","color","opacity","symbol","mode","Fixed","textConfig","fontSize","textAlign","Center","textBaseline","Middle","offsetX","offsetY","rotation","Mod"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/style/types.ts"],"sourcesContent":["import { Style } from 'ol/style';\n\nimport {\n  ColorDimensionConfig,\n  DimensionSupplier,\n  ResourceDimensionConfig,\n  ResourceDimensionMode,\n  ScaleDimensionConfig,\n  ScalarDimensionConfig,\n  ScalarDimensionMode,\n  TextDimensionConfig,\n} from 'app/features/dimensions';\n\nexport enum GeometryTypeId {\n  Point = 'point',\n  Line = 'line',\n  Polygon = 'polygon',\n  Any = '*any*',\n}\n\n// StyleConfig is saved in panel json and is used to configure how items get rendered\nexport interface StyleConfig {\n  color?: ColorDimensionConfig;\n  opacity?: number; // defaults to 80%\n\n  // For non-points\n  lineWidth?: number;\n\n  // Used for points and dynamic text\n  size?: ScaleDimensionConfig;\n  symbol?: ResourceDimensionConfig;\n\n  // Can show markers and text together!\n  text?: TextDimensionConfig;\n  textConfig?: TextStyleConfig;\n\n  // Allow for rotation of markers\n  rotation?: ScalarDimensionConfig;\n}\n\nexport const DEFAULT_SIZE = 5;\n\nexport enum TextAlignment {\n  Left = 'left',\n  Center = 'center',\n  Right = 'right',\n}\nexport enum TextBaseline {\n  Top = 'top',\n  Middle = 'middle',\n  Bottom = 'bottom',\n}\n\nexport const defaultStyleConfig = Object.freeze({\n  size: {\n    fixed: DEFAULT_SIZE,\n    min: 2,\n    max: 15,\n  },\n  color: {\n    fixed: 'dark-green', // picked from theme\n  },\n  opacity: 0.4,\n  symbol: {\n    mode: ResourceDimensionMode.Fixed,\n    fixed: 'img/icons/marker/circle.svg',\n  },\n  textConfig: {\n    fontSize: 12,\n    textAlign: TextAlignment.Center,\n    textBaseline: TextBaseline.Middle,\n    offsetX: 0,\n    offsetY: 0,\n  },\n  rotation: {\n    fixed: 0,\n    mode: ScalarDimensionMode.Mod,\n    min: -360,\n    max: 360,\n  },\n});\n\n/**\n * Static options for text display.  See:\n * https://openlayers.org/en/latest/apidoc/module-ol_style_Text.html\n */\nexport interface TextStyleConfig {\n  fontSize?: number;\n  offsetX?: number;\n  offsetY?: number;\n  textAlign?: TextAlignment;\n  textBaseline?: TextBaseline;\n}\n\n// Applying the config to real data gives the values\nexport interface StyleConfigValues {\n  color: string;\n  opacity?: number;\n  lineWidth?: number;\n  size?: number;\n  symbol?: string; // the point symbol\n  rotation?: number;\n  text?: string;\n\n  // Pass though (not value dependant)\n  textConfig?: TextStyleConfig;\n}\n\n/** When the style depends on a field */\nexport interface StyleConfigFields {\n  color?: string;\n  size?: string;\n  text?: string;\n  rotation?: string;\n}\n\nexport interface StyleDimensions {\n  color?: DimensionSupplier<string>;\n  size?: DimensionSupplier<number>;\n  text?: DimensionSupplier<string>;\n  rotation?: DimensionSupplier<number>;\n}\n\nexport interface StyleConfigState {\n  config: StyleConfig;\n  hasText?: boolean;\n  base: StyleConfigValues;\n  fields?: StyleConfigFields;\n  dims?: StyleDimensions;\n  maker: StyleMaker;\n}\n\n/**\n * Given values create a style\n */\nexport type StyleMaker = (values: StyleConfigValues) => Style | Style[];\n"],"mappings":"AAEA,SAIEA,qBAJF,EAOEC,mBAPF,QASO,yBATP;AAWA,WAAYC,cAAZ,C,CAOA;;WAPYA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;GAAAA,c,KAAAA,c;;AA2BZ,OAAO,MAAMC,YAAY,GAAG,CAArB;AAEP,WAAYC,aAAZ;;WAAYA,a;EAAAA,a;EAAAA,a;EAAAA,a;GAAAA,a,KAAAA,a;;AAKZ,WAAYC,YAAZ;;WAAYA,Y;EAAAA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAMZ,OAAO,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CAAc;EAC9CC,IAAI,EAAE;IACJC,KAAK,EAAEP,YADH;IAEJQ,GAAG,EAAE,CAFD;IAGJC,GAAG,EAAE;EAHD,CADwC;EAM9CC,KAAK,EAAE;IACLH,KAAK,EAAE,YADF,CACgB;;EADhB,CANuC;EAS9CI,OAAO,EAAE,GATqC;EAU9CC,MAAM,EAAE;IACNC,IAAI,EAAEhB,qBAAqB,CAACiB,KADtB;IAENP,KAAK,EAAE;EAFD,CAVsC;EAc9CQ,UAAU,EAAE;IACVC,QAAQ,EAAE,EADA;IAEVC,SAAS,EAAEhB,aAAa,CAACiB,MAFf;IAGVC,YAAY,EAAEjB,YAAY,CAACkB,MAHjB;IAIVC,OAAO,EAAE,CAJC;IAKVC,OAAO,EAAE;EALC,CAdkC;EAqB9CC,QAAQ,EAAE;IACRhB,KAAK,EAAE,CADC;IAERM,IAAI,EAAEf,mBAAmB,CAAC0B,GAFlB;IAGRhB,GAAG,EAAE,CAAC,GAHE;IAIRC,GAAG,EAAE;EAJG;AArBoC,CAAd,CAA3B;AA6BP;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}