{"ast":null,"code":"import uPlot from 'uplot';\nimport { isBooleanUnit } from '@grafana/data';\nimport { ScaleDistribution } from '@grafana/schema';\nimport { PlotConfigBuilder } from '../types';\nexport class UPlotScaleBuilder extends PlotConfigBuilder {\n  merge(props) {\n    this.props.min = optMinMax('min', this.props.min, props.min);\n    this.props.max = optMinMax('max', this.props.max, props.max);\n  }\n\n  getConfig() {\n    var _range;\n\n    let {\n      isTime,\n      scaleKey,\n      min: hardMin,\n      max: hardMax,\n      softMin,\n      softMax,\n      range,\n      direction,\n      orientation\n    } = this.props;\n    const distribution = !isTime ? {\n      distr: this.props.distribution === ScaleDistribution.Log ? 3 : this.props.distribution === ScaleDistribution.Ordinal ? 2 : 1,\n      log: this.props.distribution === ScaleDistribution.Log ? this.props.log || 2 : undefined\n    } : {}; // uPlot's default ranging config for both min & max is {pad: 0.1, hard: null, soft: 0, mode: 3}\n\n    let softMinMode = softMin == null ? 3 : 1;\n    let softMaxMode = softMax == null ? 3 : 1;\n    const rangeConfig = {\n      min: {\n        pad: 0.1,\n        hard: hardMin !== null && hardMin !== void 0 ? hardMin : -Infinity,\n        soft: softMin || 0,\n        mode: softMinMode\n      },\n      max: {\n        pad: 0.1,\n        hard: hardMax !== null && hardMax !== void 0 ? hardMax : Infinity,\n        soft: softMax || 0,\n        mode: softMaxMode\n      }\n    };\n    let hardMinOnly = softMin == null && hardMin != null;\n    let hardMaxOnly = softMax == null && hardMax != null; // uPlot range function\n\n    const rangeFn = (u, dataMin, dataMax, scaleKey) => {\n      const scale = u.scales[scaleKey];\n      let minMax = [dataMin, dataMax];\n\n      if (scale.distr === 1 || scale.distr === 2) {\n        // @ts-ignore here we may use hardMin / hardMax to make sure any extra padding is computed from a more accurate delta\n        minMax = uPlot.rangeNum(hardMinOnly ? hardMin : dataMin, hardMaxOnly ? hardMax : dataMax, rangeConfig);\n      } else if (scale.distr === 3) {\n        var _scale$log;\n\n        minMax = uPlot.rangeLog(dataMin, dataMax, (_scale$log = scale.log) !== null && _scale$log !== void 0 ? _scale$log : 10, true);\n      } // if all we got were hard limits, treat them as static min/max\n\n\n      if (hardMinOnly) {\n        minMax[0] = hardMin;\n      }\n\n      if (hardMaxOnly) {\n        minMax[1] = hardMax;\n      }\n\n      return minMax;\n    };\n\n    let auto = !isTime && !(hardMinOnly && hardMaxOnly);\n\n    if (isBooleanUnit(scaleKey)) {\n      auto = false;\n      range = [0, 1];\n    }\n\n    return {\n      [scaleKey]: Object.assign({\n        time: isTime,\n        auto,\n        range: (_range = range) !== null && _range !== void 0 ? _range : rangeFn,\n        dir: direction,\n        ori: orientation\n      }, distribution)\n    };\n  }\n\n}\nexport function optMinMax(minmax, a, b) {\n  const hasA = !(a === undefined || a === null);\n  const hasB = !(b === undefined || b === null);\n\n  if (hasA) {\n    if (!hasB) {\n      return a;\n    }\n\n    if (minmax === 'min') {\n      return a < b ? a : b;\n    }\n\n    return a > b ? a : b;\n  }\n\n  return b;\n}","map":{"version":3,"names":["uPlot","isBooleanUnit","ScaleDistribution","PlotConfigBuilder","UPlotScaleBuilder","merge","props","min","optMinMax","max","getConfig","isTime","scaleKey","hardMin","hardMax","softMin","softMax","range","direction","orientation","distribution","distr","Log","Ordinal","log","undefined","softMinMode","softMaxMode","rangeConfig","pad","hard","Infinity","soft","mode","hardMinOnly","hardMaxOnly","rangeFn","u","dataMin","dataMax","scale","scales","minMax","rangeNum","rangeLog","auto","time","dir","ori","minmax","a","b","hasA","hasB"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/uPlot/config/UPlotScaleBuilder.ts"],"sourcesContent":["import uPlot, { Scale, Range } from 'uplot';\n\nimport { isBooleanUnit } from '@grafana/data';\nimport { ScaleOrientation, ScaleDirection, ScaleDistribution } from '@grafana/schema';\n\nimport { PlotConfigBuilder } from '../types';\n\nexport interface ScaleProps {\n  scaleKey: string;\n  isTime?: boolean;\n  min?: number | null;\n  max?: number | null;\n  softMin?: number | null;\n  softMax?: number | null;\n  range?: Scale.Range;\n  distribution?: ScaleDistribution;\n  orientation: ScaleOrientation;\n  direction: ScaleDirection;\n  log?: number;\n}\n\nexport class UPlotScaleBuilder extends PlotConfigBuilder<ScaleProps, Scale> {\n  merge(props: ScaleProps) {\n    this.props.min = optMinMax('min', this.props.min, props.min);\n    this.props.max = optMinMax('max', this.props.max, props.max);\n  }\n\n  getConfig(): Scale {\n    let { isTime, scaleKey, min: hardMin, max: hardMax, softMin, softMax, range, direction, orientation } = this.props;\n    const distribution = !isTime\n      ? {\n          distr:\n            this.props.distribution === ScaleDistribution.Log\n              ? 3\n              : this.props.distribution === ScaleDistribution.Ordinal\n              ? 2\n              : 1,\n          log: this.props.distribution === ScaleDistribution.Log ? this.props.log || 2 : undefined,\n        }\n      : {};\n\n    // uPlot's default ranging config for both min & max is {pad: 0.1, hard: null, soft: 0, mode: 3}\n    let softMinMode: Range.SoftMode = softMin == null ? 3 : 1;\n    let softMaxMode: Range.SoftMode = softMax == null ? 3 : 1;\n\n    const rangeConfig: Range.Config = {\n      min: {\n        pad: 0.1,\n        hard: hardMin ?? -Infinity,\n        soft: softMin || 0,\n        mode: softMinMode,\n      },\n      max: {\n        pad: 0.1,\n        hard: hardMax ?? Infinity,\n        soft: softMax || 0,\n        mode: softMaxMode,\n      },\n    };\n\n    let hardMinOnly = softMin == null && hardMin != null;\n    let hardMaxOnly = softMax == null && hardMax != null;\n\n    // uPlot range function\n    const rangeFn = (u: uPlot, dataMin: number, dataMax: number, scaleKey: string) => {\n      const scale = u.scales[scaleKey];\n\n      let minMax: uPlot.Range.MinMax = [dataMin, dataMax];\n\n      if (scale.distr === 1 || scale.distr === 2) {\n        // @ts-ignore here we may use hardMin / hardMax to make sure any extra padding is computed from a more accurate delta\n        minMax = uPlot.rangeNum(hardMinOnly ? hardMin : dataMin, hardMaxOnly ? hardMax : dataMax, rangeConfig);\n      } else if (scale.distr === 3) {\n        minMax = uPlot.rangeLog(dataMin, dataMax, scale.log ?? 10, true);\n      }\n\n      // if all we got were hard limits, treat them as static min/max\n      if (hardMinOnly) {\n        minMax[0] = hardMin!;\n      }\n\n      if (hardMaxOnly) {\n        minMax[1] = hardMax!;\n      }\n\n      return minMax;\n    };\n\n    let auto = !isTime && !(hardMinOnly && hardMaxOnly);\n    if (isBooleanUnit(scaleKey)) {\n      auto = false;\n      range = [0, 1];\n    }\n\n    return {\n      [scaleKey]: {\n        time: isTime,\n        auto,\n        range: range ?? rangeFn,\n        dir: direction,\n        ori: orientation,\n        ...distribution,\n      },\n    };\n  }\n}\n\nexport function optMinMax(minmax: 'min' | 'max', a?: number | null, b?: number | null): undefined | number | null {\n  const hasA = !(a === undefined || a === null);\n  const hasB = !(b === undefined || b === null);\n  if (hasA) {\n    if (!hasB) {\n      return a;\n    }\n    if (minmax === 'min') {\n      return a! < b! ? a : b;\n    }\n    return a! > b! ? a : b;\n  }\n  return b;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}