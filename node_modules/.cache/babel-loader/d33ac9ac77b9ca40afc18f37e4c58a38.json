{"ast":null,"code":"var _Icon, _thead;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { getFieldDisplayName, formattedValueToString, AnnotationEventFieldSource, getValueFormat } from '@grafana/data';\nimport { Select, Tooltip, Icon } from '@grafana/ui';\nimport { annotationEventNames } from '../standardAnnotationSupport';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class AnnotationFieldMapper extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"updateFields\", () => {\n      var _this$props$response, _this$props$response$;\n\n      const frame = (_this$props$response = this.props.response) === null || _this$props$response === void 0 ? void 0 : (_this$props$response$ = _this$props$response.panelData) === null || _this$props$response$ === void 0 ? void 0 : _this$props$response$.series[0];\n\n      if (frame && frame.fields) {\n        const fieldNames = frame.fields.map(f => {\n          const name = getFieldDisplayName(f, frame);\n          let description = '';\n\n          for (let i = 0; i < frame.length; i++) {\n            if (i > 0) {\n              description += ', ';\n            }\n\n            if (i > 2) {\n              description += '...';\n              break;\n            }\n\n            description += f.values.get(i);\n          }\n\n          if (description.length > 50) {\n            description = description.substring(0, 50) + '...';\n          }\n\n          return {\n            label: `${name} (${f.type})`,\n            value: name,\n            description\n          };\n        });\n        this.setState({\n          fieldNames\n        });\n      }\n    });\n\n    _defineProperty(this, \"onFieldSourceChange\", (k, v) => {\n      const mappings = this.props.mappings || {};\n      const mapping = mappings[k] || {};\n      this.props.change(Object.assign({}, mappings, {\n        [k]: Object.assign({}, mapping, {\n          source: v.value || AnnotationEventFieldSource.Field\n        })\n      }));\n    });\n\n    _defineProperty(this, \"onFieldNameChange\", (k, v) => {\n      const mappings = this.props.mappings || {};\n      const mapping = mappings[k] || {};\n      this.props.change(Object.assign({}, mappings, {\n        [k]: Object.assign({}, mapping, {\n          value: v.value,\n          source: AnnotationEventFieldSource.Field\n        })\n      }));\n    });\n\n    this.state = {\n      fieldNames: []\n    };\n  }\n\n  componentDidMount() {\n    this.updateFields();\n  }\n\n  componentDidUpdate(oldProps) {\n    if (oldProps.response !== this.props.response) {\n      this.updateFields();\n    }\n  }\n\n  renderRow(row, mapping, first) {\n    const {\n      fieldNames\n    } = this.state;\n    let picker = fieldNames;\n    const current = mapping.value;\n    let currentValue = fieldNames.find(f => current === f.value);\n\n    if (current) {\n      picker = [...fieldNames];\n\n      if (!currentValue) {\n        picker.push({\n          label: current,\n          value: current\n        });\n      }\n    }\n\n    let value = first ? first[row.key] : '';\n\n    if (value && row.key.startsWith('time')) {\n      const fmt = getValueFormat('dateTimeAsIso');\n      value = formattedValueToString(fmt(value));\n    }\n\n    if (value === null || value === undefined) {\n      value = ''; // empty string\n    }\n\n    return /*#__PURE__*/_jsxs(\"tr\", {\n      children: [/*#__PURE__*/_jsxs(\"td\", {\n        children: [row.key, ' ', row.help && /*#__PURE__*/_jsx(Tooltip, {\n          content: row.help,\n          children: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n            name: \"info-circle\"\n          }))\n        })]\n      }), /*#__PURE__*/_jsx(\"td\", {\n        children: /*#__PURE__*/_jsx(Select, {\n          value: currentValue,\n          options: picker,\n          placeholder: row.placeholder || row.key,\n          onChange: v => {\n            this.onFieldNameChange(row.key, v);\n          },\n          noOptionsMessage: \"Unknown field names\",\n          allowCustomValue: true\n        })\n      }), /*#__PURE__*/_jsx(\"td\", {\n        children: `${value}`\n      })]\n    }, row.key);\n  }\n\n  render() {\n    var _this$props$response2, _this$props$response3;\n\n    const first = (_this$props$response2 = this.props.response) === null || _this$props$response2 === void 0 ? void 0 : (_this$props$response3 = _this$props$response2.events) === null || _this$props$response3 === void 0 ? void 0 : _this$props$response3[0];\n    const mappings = this.props.mappings || {};\n    return /*#__PURE__*/_jsxs(\"table\", {\n      className: \"filter-table\",\n      children: [_thead || (_thead = /*#__PURE__*/_jsx(\"thead\", {\n        children: /*#__PURE__*/_jsxs(\"tr\", {\n          children: [/*#__PURE__*/_jsx(\"th\", {\n            children: \"Annotation\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"From\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"First Value\"\n          })]\n        })\n      })), /*#__PURE__*/_jsx(\"tbody\", {\n        children: annotationEventNames.map(row => {\n          return this.renderRow(row, mappings[row.key] || {}, first);\n        })\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","getFieldDisplayName","formattedValueToString","AnnotationEventFieldSource","getValueFormat","Select","Tooltip","Icon","annotationEventNames","AnnotationFieldMapper","constructor","props","frame","response","panelData","series","fields","fieldNames","map","f","name","description","i","length","values","get","substring","label","type","value","setState","k","v","mappings","mapping","change","source","Field","state","componentDidMount","updateFields","componentDidUpdate","oldProps","renderRow","row","first","picker","current","currentValue","find","push","key","startsWith","fmt","undefined","help","placeholder","onFieldNameChange","render","events"],"sources":["/home/soula/grafana/public/app/features/annotations/components/AnnotationResultMapper.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport {\n  SelectableValue,\n  getFieldDisplayName,\n  AnnotationEvent,\n  AnnotationEventMappings,\n  AnnotationEventFieldMapping,\n  formattedValueToString,\n  AnnotationEventFieldSource,\n  getValueFormat,\n} from '@grafana/data';\nimport { Select, Tooltip, Icon } from '@grafana/ui';\n\nimport { annotationEventNames, AnnotationFieldInfo } from '../standardAnnotationSupport';\nimport { AnnotationQueryResponse } from '../types';\n\n// const valueOptions: Array<SelectableValue<AnnotationEventFieldSource>> = [\n//   { value: AnnotationEventFieldSource.Field, label: 'Field', description: 'Set the field value from a response field' },\n//   { value: AnnotationEventFieldSource.Text, label: 'Text', description: 'Enter direct text for the value' },\n//   { value: AnnotationEventFieldSource.Skip, label: 'Skip', description: 'Hide this field' },\n// ];\n\ninterface Props {\n  response?: AnnotationQueryResponse;\n\n  mappings?: AnnotationEventMappings;\n\n  change: (mappings?: AnnotationEventMappings) => void;\n}\n\ninterface State {\n  fieldNames: Array<SelectableValue<string>>;\n}\n\nexport class AnnotationFieldMapper extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      fieldNames: [],\n    };\n  }\n\n  updateFields = () => {\n    const frame = this.props.response?.panelData?.series[0];\n    if (frame && frame.fields) {\n      const fieldNames = frame.fields.map((f) => {\n        const name = getFieldDisplayName(f, frame);\n\n        let description = '';\n        for (let i = 0; i < frame.length; i++) {\n          if (i > 0) {\n            description += ', ';\n          }\n          if (i > 2) {\n            description += '...';\n            break;\n          }\n          description += f.values.get(i);\n        }\n\n        if (description.length > 50) {\n          description = description.substring(0, 50) + '...';\n        }\n\n        return {\n          label: `${name} (${f.type})`,\n          value: name,\n          description,\n        };\n      });\n      this.setState({ fieldNames });\n    }\n  };\n\n  componentDidMount() {\n    this.updateFields();\n  }\n\n  componentDidUpdate(oldProps: Props) {\n    if (oldProps.response !== this.props.response) {\n      this.updateFields();\n    }\n  }\n\n  onFieldSourceChange = (k: keyof AnnotationEvent, v: SelectableValue<AnnotationEventFieldSource>) => {\n    const mappings = this.props.mappings || {};\n    const mapping = mappings[k] || {};\n\n    this.props.change({\n      ...mappings,\n      [k]: {\n        ...mapping,\n        source: v.value || AnnotationEventFieldSource.Field,\n      },\n    });\n  };\n\n  onFieldNameChange = (k: keyof AnnotationEvent, v: SelectableValue<string>) => {\n    const mappings = this.props.mappings || {};\n    const mapping = mappings[k] || {};\n\n    this.props.change({\n      ...mappings,\n      [k]: {\n        ...mapping,\n        value: v.value,\n        source: AnnotationEventFieldSource.Field,\n      },\n    });\n  };\n\n  renderRow(row: AnnotationFieldInfo, mapping: AnnotationEventFieldMapping, first?: AnnotationEvent) {\n    const { fieldNames } = this.state;\n\n    let picker = fieldNames;\n    const current = mapping.value;\n    let currentValue = fieldNames.find((f) => current === f.value);\n    if (current) {\n      picker = [...fieldNames];\n      if (!currentValue) {\n        picker.push({\n          label: current,\n          value: current,\n        });\n      }\n    }\n\n    let value = first ? first[row.key] : '';\n    if (value && row.key.startsWith('time')) {\n      const fmt = getValueFormat('dateTimeAsIso');\n      value = formattedValueToString(fmt(value as number));\n    }\n    if (value === null || value === undefined) {\n      value = ''; // empty string\n    }\n\n    return (\n      <tr key={row.key}>\n        <td>\n          {row.key}{' '}\n          {row.help && (\n            <Tooltip content={row.help}>\n              <Icon name=\"info-circle\" />\n            </Tooltip>\n          )}\n        </td>\n        {/* <td>\n          <Select\n\n            value={valueOptions.find(v => v.value === mapping.source) || valueOptions[0]}\n            options={valueOptions}\n            onChange={(v: SelectableValue<AnnotationEventFieldSource>) => {\n              this.onFieldSourceChange(row.key, v);\n            }}\n          />\n        </td> */}\n        <td>\n          <Select\n            value={currentValue}\n            options={picker}\n            placeholder={row.placeholder || row.key}\n            onChange={(v: SelectableValue<string>) => {\n              this.onFieldNameChange(row.key, v);\n            }}\n            noOptionsMessage=\"Unknown field names\"\n            allowCustomValue={true}\n          />\n        </td>\n        <td>{`${value}`}</td>\n      </tr>\n    );\n  }\n\n  render() {\n    const first = this.props.response?.events?.[0];\n    const mappings = this.props.mappings || {};\n\n    return (\n      <table className=\"filter-table\">\n        <thead>\n          <tr>\n            <th>Annotation</th>\n            <th>From</th>\n            <th>First Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {annotationEventNames.map((row) => {\n            return this.renderRow(row, mappings[row.key] || {}, first);\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}