{"ast":null,"code":"// Code based on Material-UI\n// https://github.com/mui-org/material-ui/blob/1b096070faf102281f8e3c4f9b2bf50acf91f412/packages/material-ui/src/styles/colorManipulator.js#L97\n// MIT License Copyright (c) 2014 Call-Em-All\nimport tinycolor from 'tinycolor2';\n/**\n * Returns a number whose value is limited to the given range.\n * @param value The value to be clamped\n * @param min The lower boundary of the output range\n * @param max The upper boundary of the output range\n * @returns A number in the range [min, max]\n * @beta\n */\n\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param color - Hex color, i.e. #nnn or #nnnnnn\n * @returns A CSS rgb color string\n * @beta\n */\n\n\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param color - RGB color, i.e. rgb(n, n, n)\n * @returns A CSS rgb color string, i.e. #nnnnnn\n * @beta\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map(n => intToHex(n)).join('')}`;\n}\n/**\n * Converts a color to hex6 format if there is no alpha, hex8 if there is.\n * @param color - Hex, RGB, HSL color\n * @returns A hex color string, i.e. #ff0000 or #ff0000ff\n */\n\nexport function asHexString(color) {\n  if (color[0] === '#') {\n    return color;\n  }\n\n  const tColor = tinycolor(color);\n  return tColor.getAlpha() === 1 ? tColor.toHexString() : tColor.toHex8String();\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param color - HSL color values\n * @returns rgb color values\n * @beta\n */\n\nexport function hslToRgb(color) {\n  const parts = decomposeColor(color);\n  const {\n    values\n  } = parts;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (parts.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n * @beta\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (typeof color !== 'string') {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(`Unsupported '${color}' color. The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()`);\n  }\n\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(`Unsupported ${colorSpace} color space. The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.`);\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns A CSS color string\n * @beta\n */\n\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param canvas - A CSS color that alpha based backgrounds blends into\n * @returns A contrast ratio value in the range 0 - 21.\n * @beta\n */\n\nexport function getContrastRatio(foreground, background, canvas) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background, canvas);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param background - CSS color that needs to be take in to account to calculate luminance for colors with opacity\n * @returns The relative brightness of the color in the range 0 - 1\n * @beta\n */\n\nexport function getLuminance(color, background) {\n  const parts = decomposeColor(color);\n  let rgb = parts.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : parts.values;\n\n  if (background && parts.type === 'rgba') {\n    const backgroundParts = decomposeColor(background);\n    const alpha = rgb[3];\n    rgb[0] = rgb[0] * alpha + backgroundParts.values[0] * (1 - alpha);\n    rgb[1] = rgb[1] * alpha + backgroundParts.values[1] * (1 - alpha);\n    rgb[2] = rgb[2] * alpha + backgroundParts.values[2] * (1 - alpha);\n  }\n\n  const rgbNumbers = rgb.map(val => {\n    if (parts.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgbNumbers[0] + 0.7152 * rgbNumbers[1] + 0.0722 * rgbNumbers[2]).toFixed(3));\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param coefficient=0.15 - multiplier in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\n\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param value - value to set the alpha channel to in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\n\nexport function alpha(color, value) {\n  if (color === '') {\n    return '#000000';\n  }\n\n  value = clamp(value); // hex 3, hex 4 (w/alpha), hex 6, hex 8 (w/alpha)\n\n  if (color[0] === '#') {\n    if (color.length === 9) {\n      color = color.substring(0, 7);\n    } else if (color.length <= 5) {\n      let c = '#';\n\n      for (let i = 1; i < 4; i++) {\n        c += color[i] + color[i];\n      }\n\n      color = c;\n    }\n\n    return color + Math.round(value * 255).toString(16).padStart(2, '0');\n  } // rgb(, hsl(\n  else if (color[3] === '(') {\n    // rgb() and hsl() do not require the \"a\" suffix to accept alpha values in modern browsers:\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb()#accepts_alpha_value\n    return color.replace(')', `, ${value})`);\n  } // rgba(, hsla(\n  else if (color[4] === '(') {\n    return color.substring(0, color.lastIndexOf(',')) + `, ${value})`;\n  }\n\n  const parts = decomposeColor(color);\n\n  if (parts.type === 'color') {\n    parts.values[3] = `/${value}`;\n  } else {\n    parts.values[3] = value;\n  }\n\n  return recomposeColor(parts);\n}\n/**\n * Darkens a color.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param coefficient - multiplier in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\n\nexport function darken(color, coefficient) {\n  const parts = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (parts.type.indexOf('hsl') !== -1) {\n    parts.values[2] *= 1 - coefficient;\n  } else if (parts.type.indexOf('rgb') !== -1 || parts.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      parts.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(parts);\n}\n/**\n * Lightens a color.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param coefficient - multiplier in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\n\nexport function lighten(color, coefficient) {\n  const parts = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (parts.type.indexOf('hsl') !== -1) {\n    parts.values[2] += (100 - parts.values[2]) * coefficient;\n  } else if (parts.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      parts.values[i] += (255 - parts.values[i]) * coefficient;\n    }\n  } else if (parts.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      parts.values[i] += (1 - parts.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(parts);\n}","map":{"version":3,"names":["tinycolor","clamp","value","min","max","process","env","NODE_ENV","console","error","Math","hexToRgb","color","slice","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","rgbToHex","indexOf","values","decomposeColor","asHexString","tColor","getAlpha","toHexString","toHex8String","hslToRgb","parts","h","s","l","a","f","k","type","rgb","push","recomposeColor","charAt","marker","substring","Error","colorSpace","split","shift","parseFloat","i","getContrastRatio","foreground","background","canvas","lumA","getLuminance","lumB","backgroundParts","alpha","rgbNumbers","val","Number","toFixed","emphasize","coefficient","darken","lighten","c","padStart","replace","lastIndexOf"],"sources":["/home/soula/grafana/packages/grafana-data/src/themes/colorManipulator.ts"],"sourcesContent":["// Code based on Material-UI\n// https://github.com/mui-org/material-ui/blob/1b096070faf102281f8e3c4f9b2bf50acf91f412/packages/material-ui/src/styles/colorManipulator.js#L97\n// MIT License Copyright (c) 2014 Call-Em-All\n\nimport tinycolor from 'tinycolor2';\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param value The value to be clamped\n * @param min The lower boundary of the output range\n * @param max The upper boundary of the output range\n * @returns A number in the range [min, max]\n * @beta\n */\nfunction clamp(value: number, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param color - Hex color, i.e. #nnn or #nnnnnn\n * @returns A CSS rgb color string\n * @beta\n */\nexport function hexToRgb(color: string) {\n  color = color.slice(1);\n\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map((n) => n + n);\n  }\n\n  return colors\n    ? `rgb${colors.length === 4 ? 'a' : ''}(${colors\n        .map((n, index) => {\n          return index < 3 ? parseInt(n, 16) : Math.round((parseInt(n, 16) / 255) * 1000) / 1000;\n        })\n        .join(', ')})`\n    : '';\n}\n\nfunction intToHex(int: number) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param color - RGB color, i.e. rgb(n, n, n)\n * @returns A CSS rgb color string, i.e. #nnnnnn\n * @beta\n */\nexport function rgbToHex(color: string) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const { values } = decomposeColor(color);\n  return `#${values.map((n: number) => intToHex(n)).join('')}`;\n}\n\n/**\n * Converts a color to hex6 format if there is no alpha, hex8 if there is.\n * @param color - Hex, RGB, HSL color\n * @returns A hex color string, i.e. #ff0000 or #ff0000ff\n */\nexport function asHexString(color: string): string {\n  if (color[0] === '#') {\n    return color;\n  }\n  const tColor = tinycolor(color);\n  return tColor.getAlpha() === 1 ? tColor.toHexString() : tColor.toHex8String();\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param color - HSL color values\n * @returns rgb color values\n * @beta\n */\nexport function hslToRgb(color: string | DecomposeColor) {\n  const parts = decomposeColor(color);\n  const { values } = parts;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n: number, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (parts.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({ type, values: rgb });\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n * @beta\n */\nexport function decomposeColor(color: string | DecomposeColor): DecomposeColor {\n  // Idempotent\n  if (typeof color !== 'string') {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(\n      `Unsupported '${color}' color. The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()`\n    );\n  }\n\n  let values: any = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(\n        `Unsupported ${colorSpace} color space. The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.`\n      );\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map((value: string) => parseFloat(value));\n  return { type, values, colorSpace };\n}\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns A CSS color string\n * @beta\n */\nexport function recomposeColor(color: DecomposeColor) {\n  const { type, colorSpace } = color;\n  let values: any = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n: string, i: number) => (i < 3 ? parseInt(n, 10) : n));\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param canvas - A CSS color that alpha based backgrounds blends into\n * @returns A contrast ratio value in the range 0 - 21.\n * @beta\n */\nexport function getContrastRatio(foreground: string, background: string, canvas?: string) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background, canvas);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param background - CSS color that needs to be take in to account to calculate luminance for colors with opacity\n * @returns The relative brightness of the color in the range 0 - 1\n * @beta\n */\nexport function getLuminance(color: string, background?: string) {\n  const parts = decomposeColor(color);\n\n  let rgb = parts.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : parts.values;\n\n  if (background && parts.type === 'rgba') {\n    const backgroundParts = decomposeColor(background);\n    const alpha = rgb[3];\n    rgb[0] = rgb[0] * alpha + backgroundParts.values[0] * (1 - alpha);\n    rgb[1] = rgb[1] * alpha + backgroundParts.values[1] * (1 - alpha);\n    rgb[2] = rgb[2] * alpha + backgroundParts.values[2] * (1 - alpha);\n  }\n\n  const rgbNumbers = rgb.map((val: any) => {\n    if (parts.type !== 'color') {\n      val /= 255; // normalized\n    }\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgbNumbers[0] + 0.7152 * rgbNumbers[1] + 0.0722 * rgbNumbers[2]).toFixed(3));\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param coefficient=0.15 - multiplier in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\nexport function emphasize(color: string, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param value - value to set the alpha channel to in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\nexport function alpha(color: string, value: number) {\n  if (color === '') {\n    return '#000000';\n  }\n\n  value = clamp(value);\n\n  // hex 3, hex 4 (w/alpha), hex 6, hex 8 (w/alpha)\n  if (color[0] === '#') {\n    if (color.length === 9) {\n      color = color.substring(0, 7);\n    } else if (color.length <= 5) {\n      let c = '#';\n      for (let i = 1; i < 4; i++) {\n        c += color[i] + color[i];\n      }\n      color = c;\n    }\n\n    return (\n      color +\n      Math.round(value * 255)\n        .toString(16)\n        .padStart(2, '0')\n    );\n  }\n  // rgb(, hsl(\n  else if (color[3] === '(') {\n    // rgb() and hsl() do not require the \"a\" suffix to accept alpha values in modern browsers:\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb()#accepts_alpha_value\n    return color.replace(')', `, ${value})`);\n  }\n  // rgba(, hsla(\n  else if (color[4] === '(') {\n    return color.substring(0, color.lastIndexOf(',')) + `, ${value})`;\n  }\n\n  const parts = decomposeColor(color);\n\n  if (parts.type === 'color') {\n    parts.values[3] = `/${value}`;\n  } else {\n    parts.values[3] = value;\n  }\n\n  return recomposeColor(parts);\n}\n\n/**\n * Darkens a color.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param coefficient - multiplier in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\nexport function darken(color: string, coefficient: number) {\n  const parts = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (parts.type.indexOf('hsl') !== -1) {\n    parts.values[2] *= 1 - coefficient;\n  } else if (parts.type.indexOf('rgb') !== -1 || parts.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      parts.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(parts);\n}\n\n/**\n * Lightens a color.\n * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param coefficient - multiplier in the range 0 - 1\n * @returns A CSS color string. Hex input values are returned as rgb\n * @beta\n */\nexport function lighten(color: string, coefficient: number) {\n  const parts = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (parts.type.indexOf('hsl') !== -1) {\n    parts.values[2] += (100 - parts.values[2]) * coefficient;\n  } else if (parts.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      parts.values[i] += (255 - parts.values[i]) * coefficient;\n    }\n  } else if (parts.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      parts.values[i] += (1 - parts.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(parts);\n}\n\ninterface DecomposeColor {\n  type: string;\n  values: any;\n  colorSpace?: string;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}