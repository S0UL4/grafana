{"ast":null,"code":"var _Alert, _Alert2;\n\nimport React, { useEffect, useRef } from 'react';\nimport { SIGV4ConnectionConfig } from '@grafana/aws-sdk';\nimport { Alert, DataSourceHttpSettings } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { isSupportedVersion } from '../utils';\nimport { DataLinks } from './DataLinks';\nimport { ElasticDetails } from './ElasticDetails';\nimport { LogsConfig } from './LogsConfig';\nimport { coerceOptions, isValidOptions } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const ConfigEditor = props => {\n  // we decide on whether to show access options or not at the point when the config page opens.\n  // whatever happens while the page is open, this decision does not change.\n  // (we do this to avoid situations where you switch access-mode and suddenly\n  // the access-mode-select-box vanishes)\n  const showAccessOptions = useRef(props.options.access === 'direct');\n  const {\n    options: originalOptions,\n    onOptionsChange\n  } = props;\n  const options = coerceOptions(originalOptions);\n  useEffect(() => {\n    if (!isValidOptions(originalOptions)) {\n      onOptionsChange(coerceOptions(originalOptions));\n    } // We can't enforce the eslint rule here because we only want to run this once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  const supportedVersion = isSupportedVersion(options.jsonData.esVersion);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [options.access === 'direct' && (_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n      title: \"Error\",\n      severity: \"error\",\n      children: \"Browser access mode in the Elasticsearch datasource is no longer available. Switch to server access mode.\"\n    }))), !supportedVersion && (_Alert2 || (_Alert2 = /*#__PURE__*/_jsx(Alert, {\n      title: \"Deprecation notice\",\n      severity: \"error\",\n      children: `Support for Elasticsearch versions after their end-of-life (currently versions < 7.10) was removed`\n    }))), /*#__PURE__*/_jsx(DataSourceHttpSettings, {\n      defaultUrl: \"http://localhost:9200\",\n      dataSourceConfig: options,\n      showAccessOptions: showAccessOptions.current,\n      onChange: onOptionsChange,\n      sigV4AuthToggleEnabled: config.sigV4AuthEnabled,\n      renderSigV4Editor: /*#__PURE__*/_jsx(SIGV4ConnectionConfig, Object.assign({}, props))\n    }), /*#__PURE__*/_jsx(ElasticDetails, {\n      value: options,\n      onChange: onOptionsChange\n    }), /*#__PURE__*/_jsx(LogsConfig, {\n      value: options.jsonData,\n      onChange: newValue => onOptionsChange(Object.assign({}, options, {\n        jsonData: newValue\n      }))\n    }), /*#__PURE__*/_jsx(DataLinks, {\n      value: options.jsonData.dataLinks,\n      onChange: newValue => {\n        onOptionsChange(Object.assign({}, options, {\n          jsonData: Object.assign({}, options.jsonData, {\n            dataLinks: newValue\n          })\n        }));\n      }\n    })]\n  });\n};","map":{"version":3,"names":["React","useEffect","useRef","SIGV4ConnectionConfig","Alert","DataSourceHttpSettings","config","isSupportedVersion","DataLinks","ElasticDetails","LogsConfig","coerceOptions","isValidOptions","ConfigEditor","props","showAccessOptions","options","access","originalOptions","onOptionsChange","supportedVersion","jsonData","esVersion","current","sigV4AuthEnabled","newValue","dataLinks"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/configuration/ConfigEditor.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nimport { SIGV4ConnectionConfig } from '@grafana/aws-sdk';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { Alert, DataSourceHttpSettings } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { ElasticsearchOptions } from '../types';\nimport { isSupportedVersion } from '../utils';\n\nimport { DataLinks } from './DataLinks';\nimport { ElasticDetails } from './ElasticDetails';\nimport { LogsConfig } from './LogsConfig';\nimport { coerceOptions, isValidOptions } from './utils';\n\nexport type Props = DataSourcePluginOptionsEditorProps<ElasticsearchOptions>;\n\nexport const ConfigEditor = (props: Props) => {\n  // we decide on whether to show access options or not at the point when the config page opens.\n  // whatever happens while the page is open, this decision does not change.\n  // (we do this to avoid situations where you switch access-mode and suddenly\n  // the access-mode-select-box vanishes)\n  const showAccessOptions = useRef(props.options.access === 'direct');\n\n  const { options: originalOptions, onOptionsChange } = props;\n  const options = coerceOptions(originalOptions);\n\n  useEffect(() => {\n    if (!isValidOptions(originalOptions)) {\n      onOptionsChange(coerceOptions(originalOptions));\n    }\n\n    // We can't enforce the eslint rule here because we only want to run this once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const supportedVersion = isSupportedVersion(options.jsonData.esVersion);\n\n  return (\n    <>\n      {options.access === 'direct' && (\n        <Alert title=\"Error\" severity=\"error\">\n          Browser access mode in the Elasticsearch datasource is no longer available. Switch to server access mode.\n        </Alert>\n      )}\n      {!supportedVersion && (\n        <Alert title=\"Deprecation notice\" severity=\"error\">\n          {`Support for Elasticsearch versions after their end-of-life (currently versions < 7.10) was removed`}\n        </Alert>\n      )}\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9200\"\n        dataSourceConfig={options}\n        showAccessOptions={showAccessOptions.current}\n        onChange={onOptionsChange}\n        sigV4AuthToggleEnabled={config.sigV4AuthEnabled}\n        renderSigV4Editor={<SIGV4ConnectionConfig {...props}></SIGV4ConnectionConfig>}\n      />\n\n      <ElasticDetails value={options} onChange={onOptionsChange} />\n\n      <LogsConfig\n        value={options.jsonData}\n        onChange={(newValue) =>\n          onOptionsChange({\n            ...options,\n            jsonData: newValue,\n          })\n        }\n      />\n\n      <DataLinks\n        value={options.jsonData.dataLinks}\n        onChange={(newValue) => {\n          onOptionsChange({\n            ...options,\n            jsonData: {\n              ...options.jsonData,\n              dataLinks: newValue,\n            },\n          });\n        }}\n      />\n    </>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AAEA,SAASC,qBAAT,QAAsC,kBAAtC;AAEA,SAASC,KAAT,EAAgBC,sBAAhB,QAA8C,aAA9C;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAGA,SAASC,kBAAT,QAAmC,UAAnC;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,SAA9C;;;;AAIA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAkB;EAC5C;EACA;EACA;EACA;EACA,MAAMC,iBAAiB,GAAGb,MAAM,CAACY,KAAK,CAACE,OAAN,CAAcC,MAAd,KAAyB,QAA1B,CAAhC;EAEA,MAAM;IAAED,OAAO,EAAEE,eAAX;IAA4BC;EAA5B,IAAgDL,KAAtD;EACA,MAAME,OAAO,GAAGL,aAAa,CAACO,eAAD,CAA7B;EAEAjB,SAAS,CAAC,MAAM;IACd,IAAI,CAACW,cAAc,CAACM,eAAD,CAAnB,EAAsC;MACpCC,eAAe,CAACR,aAAa,CAACO,eAAD,CAAd,CAAf;IACD,CAHa,CAKd;IACA;;EACD,CAPQ,EAON,EAPM,CAAT;EASA,MAAME,gBAAgB,GAAGb,kBAAkB,CAACS,OAAO,CAACK,QAAR,CAAiBC,SAAlB,CAA3C;EAEA,oBACE;IAAA,WACGN,OAAO,CAACC,MAAR,KAAmB,QAAnB,sCACC,KAAC,KAAD;MAAO,KAAK,EAAC,OAAb;MAAqB,QAAQ,EAAC,OAA9B;MAAA;IAAA,EADD,EADH,EAMG,CAACG,gBAAD,wCACC,KAAC,KAAD;MAAO,KAAK,EAAC,oBAAb;MAAkC,QAAQ,EAAC,OAA3C;MAAA,UACI;IADJ,EADD,EANH,eAWE,KAAC,sBAAD;MACE,UAAU,EAAC,uBADb;MAEE,gBAAgB,EAAEJ,OAFpB;MAGE,iBAAiB,EAAED,iBAAiB,CAACQ,OAHvC;MAIE,QAAQ,EAAEJ,eAJZ;MAKE,sBAAsB,EAAEb,MAAM,CAACkB,gBALjC;MAME,iBAAiB,eAAE,KAAC,qBAAD,oBAA2BV,KAA3B;IANrB,EAXF,eAoBE,KAAC,cAAD;MAAgB,KAAK,EAAEE,OAAvB;MAAgC,QAAQ,EAAEG;IAA1C,EApBF,eAsBE,KAAC,UAAD;MACE,KAAK,EAAEH,OAAO,CAACK,QADjB;MAEE,QAAQ,EAAGI,QAAD,IACRN,eAAe,mBACVH,OADU;QAEbK,QAAQ,EAAEI;MAFG;IAHnB,EAtBF,eAgCE,KAAC,SAAD;MACE,KAAK,EAAET,OAAO,CAACK,QAAR,CAAiBK,SAD1B;MAEE,QAAQ,EAAGD,QAAD,IAAc;QACtBN,eAAe,mBACVH,OADU;UAEbK,QAAQ,oBACHL,OAAO,CAACK,QADL;YAENK,SAAS,EAAED;UAFL;QAFK,GAAf;MAOD;IAVH,EAhCF;EAAA,EADF;AA+CD,CApEM"},"metadata":{},"sourceType":"module"}