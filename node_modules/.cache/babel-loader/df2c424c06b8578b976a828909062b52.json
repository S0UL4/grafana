{"ast":null,"code":"import { uniqueId } from 'lodash';\nimport React, { useRef } from 'react';\nimport { InlineField, Select, Input } from '@grafana/ui';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { describeMetric } from '../../../../utils';\nimport { useCreatableSelectPersistedBehaviour } from '../../../hooks/useCreatableSelectPersistedBehaviour';\nimport { useQuery } from '../../ElasticsearchQueryContext';\nimport { isPipelineAggregation } from '../../MetricAggregationsEditor/aggregations';\nimport { changeBucketAggregationSetting } from '../state/actions';\nimport { bucketAggregationConfig, orderByOptions, orderOptions, sizeOptions } from '../utils';\nimport { inlineFieldProps } from '.';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const TermsSettingsEditor = ({\n  bucketAgg\n}) => {\n  var _bucketAgg$settings, _bucketAggregationCon, _bucketAgg$settings2, _bucketAggregationCon2, _bucketAgg$settings3, _bucketAggregationCon3, _bucketAgg$settings4, _bucketAggregationCon4, _bucketAgg$settings5, _bucketAggregationCon5;\n\n  const {\n    metrics\n  } = useQuery();\n  const orderBy = createOrderByOptions(metrics);\n  const {\n    current: baseId\n  } = useRef(uniqueId('es-terms-'));\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Order\"\n    }, inlineFieldProps, {\n      children: /*#__PURE__*/_jsx(Select, {\n        inputId: `${baseId}-order`,\n        onChange: e => dispatch(changeBucketAggregationSetting({\n          bucketAgg,\n          settingName: 'order',\n          newValue: e.value\n        })),\n        options: orderOptions,\n        value: ((_bucketAgg$settings = bucketAgg.settings) === null || _bucketAgg$settings === void 0 ? void 0 : _bucketAgg$settings.order) || ((_bucketAggregationCon = bucketAggregationConfig.terms.defaultSettings) === null || _bucketAggregationCon === void 0 ? void 0 : _bucketAggregationCon.order)\n      })\n    })), /*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Size\"\n    }, inlineFieldProps, {\n      children: /*#__PURE__*/_jsx(Select, Object.assign({\n        inputId: `${baseId}-size` // TODO: isValidNewOption should only allow numbers & template variables\n\n      }, useCreatableSelectPersistedBehaviour({\n        options: sizeOptions,\n        value: ((_bucketAgg$settings2 = bucketAgg.settings) === null || _bucketAgg$settings2 === void 0 ? void 0 : _bucketAgg$settings2.size) || ((_bucketAggregationCon2 = bucketAggregationConfig.terms.defaultSettings) === null || _bucketAggregationCon2 === void 0 ? void 0 : _bucketAggregationCon2.size),\n\n        onChange({\n          value\n        }) {\n          dispatch(changeBucketAggregationSetting({\n            bucketAgg,\n            settingName: 'size',\n            newValue: value\n          }));\n        }\n\n      })))\n    })), /*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Min Doc Count\"\n    }, inlineFieldProps, {\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `${baseId}-min_doc_count`,\n        onBlur: e => dispatch(changeBucketAggregationSetting({\n          bucketAgg,\n          settingName: 'min_doc_count',\n          newValue: e.target.value\n        })),\n        defaultValue: ((_bucketAgg$settings3 = bucketAgg.settings) === null || _bucketAgg$settings3 === void 0 ? void 0 : _bucketAgg$settings3.min_doc_count) || ((_bucketAggregationCon3 = bucketAggregationConfig.terms.defaultSettings) === null || _bucketAggregationCon3 === void 0 ? void 0 : _bucketAggregationCon3.min_doc_count)\n      })\n    })), /*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Order By\"\n    }, inlineFieldProps, {\n      children: /*#__PURE__*/_jsx(Select, {\n        inputId: `${baseId}-order_by`,\n        onChange: e => dispatch(changeBucketAggregationSetting({\n          bucketAgg,\n          settingName: 'orderBy',\n          newValue: e.value\n        })),\n        options: orderBy,\n        value: ((_bucketAgg$settings4 = bucketAgg.settings) === null || _bucketAgg$settings4 === void 0 ? void 0 : _bucketAgg$settings4.orderBy) || ((_bucketAggregationCon4 = bucketAggregationConfig.terms.defaultSettings) === null || _bucketAggregationCon4 === void 0 ? void 0 : _bucketAggregationCon4.orderBy)\n      })\n    })), /*#__PURE__*/_jsx(InlineField, Object.assign({\n      label: \"Missing\"\n    }, inlineFieldProps, {\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `${baseId}-missing`,\n        onBlur: e => dispatch(changeBucketAggregationSetting({\n          bucketAgg,\n          settingName: 'missing',\n          newValue: e.target.value\n        })),\n        defaultValue: ((_bucketAgg$settings5 = bucketAgg.settings) === null || _bucketAgg$settings5 === void 0 ? void 0 : _bucketAgg$settings5.missing) || ((_bucketAggregationCon5 = bucketAggregationConfig.terms.defaultSettings) === null || _bucketAggregationCon5 === void 0 ? void 0 : _bucketAggregationCon5.missing)\n      })\n    }))]\n  });\n};\n/**\n * This returns the valid options for each of the enabled extended stat\n */\n\nfunction createOrderByOptionsForExtendedStats(metric) {\n  if (!metric.meta) {\n    return [];\n  }\n\n  const metaKeys = Object.keys(metric.meta);\n  return metaKeys.filter(key => {\n    var _metric$meta;\n\n    return (_metric$meta = metric.meta) === null || _metric$meta === void 0 ? void 0 : _metric$meta[key];\n  }).map(key => {\n    let method = key; // The bucket path for std_deviation_bounds.lower and std_deviation_bounds.upper\n    // is accessed via std_lower and std_upper, respectively.\n\n    if (key === 'std_deviation_bounds_lower') {\n      method = 'std_lower';\n    }\n\n    if (key === 'std_deviation_bounds_upper') {\n      method = 'std_upper';\n    }\n\n    return {\n      label: `${describeMetric(metric)} (${method})`,\n      value: `${metric.id}[${method}]`\n    };\n  });\n}\n/**\n * This returns the valid options for each of the percents listed in the percentile settings\n */\n\n\nfunction createOrderByOptionsForPercentiles(metric) {\n  var _metric$settings;\n\n  if (!((_metric$settings = metric.settings) !== null && _metric$settings !== void 0 && _metric$settings.percents)) {\n    return [];\n  }\n\n  return metric.settings.percents.map(percent => {\n    // The bucket path for percentile numbers is appended with a `.0` if the number is whole\n    // otherwise you have to use the actual value.\n    const percentString = /^\\d+\\.\\d+/.test(`${percent}`) ? percent : `${percent}.0`;\n    return {\n      label: `${describeMetric(metric)} (${percent})`,\n      value: `${metric.id}[${percentString}]`\n    };\n  });\n}\n\nfunction isValidOrderTarget(metric) {\n  return (// top metrics can't be used for ordering\n    metric.type !== 'top_metrics' && // pipeline aggregations can't be used for ordering: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-order\n    !isPipelineAggregation(metric)\n  );\n}\n/**\n * This creates all the valid order by options based on the metrics\n */\n\n\nexport const createOrderByOptions = (metrics = []) => {\n  const metricOptions = metrics.filter(isValidOrderTarget).flatMap(metric => {\n    if (metric.type === 'extended_stats') {\n      return createOrderByOptionsForExtendedStats(metric);\n    } else if (metric.type === 'percentiles') {\n      return createOrderByOptionsForPercentiles(metric);\n    } else {\n      return {\n        label: describeMetric(metric),\n        value: metric.id\n      };\n    }\n  });\n  return [...orderByOptions, ...metricOptions];\n};","map":{"version":3,"names":["uniqueId","React","useRef","InlineField","Select","Input","useDispatch","describeMetric","useCreatableSelectPersistedBehaviour","useQuery","isPipelineAggregation","changeBucketAggregationSetting","bucketAggregationConfig","orderByOptions","orderOptions","sizeOptions","inlineFieldProps","TermsSettingsEditor","bucketAgg","metrics","orderBy","createOrderByOptions","current","baseId","dispatch","e","settingName","newValue","value","settings","order","terms","defaultSettings","options","size","onChange","target","min_doc_count","missing","createOrderByOptionsForExtendedStats","metric","meta","metaKeys","Object","keys","filter","key","map","method","label","id","createOrderByOptionsForPercentiles","percents","percent","percentString","test","isValidOrderTarget","type","metricOptions","flatMap"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/TermsSettingsEditor.tsx"],"sourcesContent":["import { uniqueId } from 'lodash';\nimport React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, Select, Input } from '@grafana/ui';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { describeMetric } from '../../../../utils';\nimport { useCreatableSelectPersistedBehaviour } from '../../../hooks/useCreatableSelectPersistedBehaviour';\nimport { useQuery } from '../../ElasticsearchQueryContext';\nimport {\n  ExtendedStatMetaType,\n  ExtendedStats,\n  isPipelineAggregation,\n  MetricAggregation,\n  Percentiles,\n} from '../../MetricAggregationsEditor/aggregations';\nimport { Terms } from '../aggregations';\nimport { changeBucketAggregationSetting } from '../state/actions';\nimport { bucketAggregationConfig, orderByOptions, orderOptions, sizeOptions } from '../utils';\n\nimport { inlineFieldProps } from '.';\n\ninterface Props {\n  bucketAgg: Terms;\n}\n\nexport const TermsSettingsEditor = ({ bucketAgg }: Props) => {\n  const { metrics } = useQuery();\n  const orderBy = createOrderByOptions(metrics);\n  const { current: baseId } = useRef(uniqueId('es-terms-'));\n\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <InlineField label=\"Order\" {...inlineFieldProps}>\n        <Select\n          inputId={`${baseId}-order`}\n          onChange={(e) =>\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'order', newValue: e.value }))\n          }\n          options={orderOptions}\n          value={bucketAgg.settings?.order || bucketAggregationConfig.terms.defaultSettings?.order}\n        />\n      </InlineField>\n\n      <InlineField label=\"Size\" {...inlineFieldProps}>\n        <Select\n          inputId={`${baseId}-size`}\n          // TODO: isValidNewOption should only allow numbers & template variables\n          {...useCreatableSelectPersistedBehaviour({\n            options: sizeOptions,\n            value: bucketAgg.settings?.size || bucketAggregationConfig.terms.defaultSettings?.size,\n            onChange({ value }) {\n              dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'size', newValue: value }));\n            },\n          })}\n        />\n      </InlineField>\n\n      <InlineField label=\"Min Doc Count\" {...inlineFieldProps}>\n        <Input\n          id={`${baseId}-min_doc_count`}\n          onBlur={(e) =>\n            dispatch(\n              changeBucketAggregationSetting({ bucketAgg, settingName: 'min_doc_count', newValue: e.target.value })\n            )\n          }\n          defaultValue={\n            bucketAgg.settings?.min_doc_count || bucketAggregationConfig.terms.defaultSettings?.min_doc_count\n          }\n        />\n      </InlineField>\n\n      <InlineField label=\"Order By\" {...inlineFieldProps}>\n        <Select\n          inputId={`${baseId}-order_by`}\n          onChange={(e) =>\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'orderBy', newValue: e.value }))\n          }\n          options={orderBy}\n          value={bucketAgg.settings?.orderBy || bucketAggregationConfig.terms.defaultSettings?.orderBy}\n        />\n      </InlineField>\n\n      <InlineField label=\"Missing\" {...inlineFieldProps}>\n        <Input\n          id={`${baseId}-missing`}\n          onBlur={(e) =>\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'missing', newValue: e.target.value }))\n          }\n          defaultValue={bucketAgg.settings?.missing || bucketAggregationConfig.terms.defaultSettings?.missing}\n        />\n      </InlineField>\n    </>\n  );\n};\n\n/**\n * This returns the valid options for each of the enabled extended stat\n */\nfunction createOrderByOptionsForExtendedStats(metric: ExtendedStats): SelectableValue<string> {\n  if (!metric.meta) {\n    return [];\n  }\n  const metaKeys = Object.keys(metric.meta) as ExtendedStatMetaType[];\n  return metaKeys\n    .filter((key) => metric.meta?.[key])\n    .map((key) => {\n      let method = key as string;\n      // The bucket path for std_deviation_bounds.lower and std_deviation_bounds.upper\n      // is accessed via std_lower and std_upper, respectively.\n      if (key === 'std_deviation_bounds_lower') {\n        method = 'std_lower';\n      }\n      if (key === 'std_deviation_bounds_upper') {\n        method = 'std_upper';\n      }\n      return { label: `${describeMetric(metric)} (${method})`, value: `${metric.id}[${method}]` };\n    });\n}\n\n/**\n * This returns the valid options for each of the percents listed in the percentile settings\n */\nfunction createOrderByOptionsForPercentiles(metric: Percentiles): Array<SelectableValue<string>> {\n  if (!metric.settings?.percents) {\n    return [];\n  }\n  return metric.settings.percents.map((percent) => {\n    // The bucket path for percentile numbers is appended with a `.0` if the number is whole\n    // otherwise you have to use the actual value.\n    const percentString = /^\\d+\\.\\d+/.test(`${percent}`) ? percent : `${percent}.0`;\n    return { label: `${describeMetric(metric)} (${percent})`, value: `${metric.id}[${percentString}]` };\n  });\n}\n\nfunction isValidOrderTarget(metric: MetricAggregation) {\n  return (\n    // top metrics can't be used for ordering\n    metric.type !== 'top_metrics' &&\n    // pipeline aggregations can't be used for ordering: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-order\n    !isPipelineAggregation(metric)\n  );\n}\n\n/**\n * This creates all the valid order by options based on the metrics\n */\nexport const createOrderByOptions = (metrics: MetricAggregation[] = []): Array<SelectableValue<string>> => {\n  const metricOptions = metrics.filter(isValidOrderTarget).flatMap((metric) => {\n    if (metric.type === 'extended_stats') {\n      return createOrderByOptionsForExtendedStats(metric);\n    } else if (metric.type === 'percentiles') {\n      return createOrderByOptionsForPercentiles(metric);\n    } else {\n      return { label: describeMetric(metric), value: metric.id };\n    }\n  });\n  return [...orderByOptions, ...metricOptions];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}