{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\nimport { AsyncSelect } from '@grafana/ui';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function OrgPicker({\n  onSelected,\n  className,\n  inputId,\n  autoFocus,\n  excludeOrgs\n}) {\n  // For whatever reason the autoFocus prop doesn't seem to work\n  // with AsyncSelect, hence this workaround. Maybe fixed in a later version?\n  useEffect(() => {\n    if (autoFocus && inputId) {\n      var _document$getElementB;\n\n      (_document$getElementB = document.getElementById(inputId)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.focus();\n    }\n  }, [autoFocus, inputId]);\n  const [orgOptionsState, getOrgOptions] = useAsyncFn(async () => {\n    const orgs = await getBackendSrv().get('/api/orgs');\n    const allOrgs = orgs.map(org => ({\n      value: {\n        id: org.id,\n        name: org.name\n      },\n      label: org.name\n    }));\n\n    if (excludeOrgs) {\n      let idArray = excludeOrgs.map(anOrg => anOrg.orgId);\n      const filteredOrgs = allOrgs.filter(item => {\n        return !idArray.includes(item.value.id);\n      });\n      return filteredOrgs;\n    } else {\n      return allOrgs;\n    }\n  });\n  return /*#__PURE__*/_jsx(AsyncSelect, {\n    inputId: inputId,\n    className: className,\n    isLoading: orgOptionsState.loading,\n    defaultOptions: true,\n    isSearchable: false,\n    loadOptions: getOrgOptions,\n    onChange: onSelected,\n    placeholder: \"Select organization\",\n    noOptionsMessage: \"No organizations found\"\n  });\n}","map":{"version":3,"names":["React","useEffect","useAsyncFn","AsyncSelect","getBackendSrv","OrgPicker","onSelected","className","inputId","autoFocus","excludeOrgs","document","getElementById","focus","orgOptionsState","getOrgOptions","orgs","get","allOrgs","map","org","value","id","name","label","idArray","anOrg","orgId","filteredOrgs","filter","item","includes","loading"],"sources":["/home/soula/grafana/public/app/core/components/Select/OrgPicker.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncSelect } from '@grafana/ui';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { Organization, UserOrg } from 'app/types';\n\nexport type OrgSelectItem = SelectableValue<Organization>;\n\nexport interface Props {\n  onSelected: (org: OrgSelectItem) => void;\n  className?: string;\n  inputId?: string;\n  autoFocus?: boolean;\n  excludeOrgs?: UserOrg[];\n}\n\nexport function OrgPicker({ onSelected, className, inputId, autoFocus, excludeOrgs }: Props) {\n  // For whatever reason the autoFocus prop doesn't seem to work\n  // with AsyncSelect, hence this workaround. Maybe fixed in a later version?\n  useEffect(() => {\n    if (autoFocus && inputId) {\n      document.getElementById(inputId)?.focus();\n    }\n  }, [autoFocus, inputId]);\n\n  const [orgOptionsState, getOrgOptions] = useAsyncFn(async () => {\n    const orgs: Organization[] = await getBackendSrv().get('/api/orgs');\n    const allOrgs = orgs.map((org) => ({ value: { id: org.id, name: org.name }, label: org.name }));\n    if (excludeOrgs) {\n      let idArray = excludeOrgs.map((anOrg) => anOrg.orgId);\n      const filteredOrgs = allOrgs.filter((item) => {\n        return !idArray.includes(item.value.id);\n      });\n      return filteredOrgs;\n    } else {\n      return allOrgs;\n    }\n  });\n\n  return (\n    <AsyncSelect\n      inputId={inputId}\n      className={className}\n      isLoading={orgOptionsState.loading}\n      defaultOptions={true}\n      isSearchable={false}\n      loadOptions={getOrgOptions}\n      onChange={onSelected}\n      placeholder=\"Select organization\"\n      noOptionsMessage=\"No organizations found\"\n    />\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,WAA3B;AAGA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,QAA8B,+BAA9B;;AAaA,OAAO,SAASC,SAAT,CAAmB;EAAEC,UAAF;EAAcC,SAAd;EAAyBC,OAAzB;EAAkCC,SAAlC;EAA6CC;AAA7C,CAAnB,EAAsF;EAC3F;EACA;EACAT,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS,IAAID,OAAjB,EAA0B;MAAA;;MACxB,yBAAAG,QAAQ,CAACC,cAAT,CAAwBJ,OAAxB,iFAAkCK,KAAlC;IACD;EACF,CAJQ,EAIN,CAACJ,SAAD,EAAYD,OAAZ,CAJM,CAAT;EAMA,MAAM,CAACM,eAAD,EAAkBC,aAAlB,IAAmCb,UAAU,CAAC,YAAY;IAC9D,MAAMc,IAAoB,GAAG,MAAMZ,aAAa,GAAGa,GAAhB,CAAoB,WAApB,CAAnC;IACA,MAAMC,OAAO,GAAGF,IAAI,CAACG,GAAL,CAAUC,GAAD,KAAU;MAAEC,KAAK,EAAE;QAAEC,EAAE,EAAEF,GAAG,CAACE,EAAV;QAAcC,IAAI,EAAEH,GAAG,CAACG;MAAxB,CAAT;MAAyCC,KAAK,EAAEJ,GAAG,CAACG;IAApD,CAAV,CAAT,CAAhB;;IACA,IAAIb,WAAJ,EAAiB;MACf,IAAIe,OAAO,GAAGf,WAAW,CAACS,GAAZ,CAAiBO,KAAD,IAAWA,KAAK,CAACC,KAAjC,CAAd;MACA,MAAMC,YAAY,GAAGV,OAAO,CAACW,MAAR,CAAgBC,IAAD,IAAU;QAC5C,OAAO,CAACL,OAAO,CAACM,QAAR,CAAiBD,IAAI,CAACT,KAAL,CAAWC,EAA5B,CAAR;MACD,CAFoB,CAArB;MAGA,OAAOM,YAAP;IACD,CAND,MAMO;MACL,OAAOV,OAAP;IACD;EACF,CAZkD,CAAnD;EAcA,oBACE,KAAC,WAAD;IACE,OAAO,EAAEV,OADX;IAEE,SAAS,EAAED,SAFb;IAGE,SAAS,EAAEO,eAAe,CAACkB,OAH7B;IAIE,cAAc,EAAE,IAJlB;IAKE,YAAY,EAAE,KALhB;IAME,WAAW,EAAEjB,aANf;IAOE,QAAQ,EAAET,UAPZ;IAQE,WAAW,EAAC,qBARd;IASE,gBAAgB,EAAC;EATnB,EADF;AAaD"},"metadata":{},"sourceType":"module"}