{"ast":null,"code":"var _Alert, _Legend, _Legend2;\n\nimport { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAsyncFn } from 'react-use';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Field, Input, Button, Legend, Alert } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction } from 'app/types';\nimport UsersTable from '../users/UsersTable';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst getOrg = async orgId => {\n  return await getBackendSrv().get('/api/orgs/' + orgId);\n};\n\nconst getOrgUsers = async orgId => {\n  if (contextSrv.hasPermission(AccessControlAction.OrgUsersRead)) {\n    return await getBackendSrv().get(`/api/orgs/${orgId}/users`, accessControlQueryParam());\n  }\n\n  return [];\n};\n\nconst updateOrgUserRole = async (orgUser, orgId) => {\n  await getBackendSrv().patch('/api/orgs/' + orgId + '/users/' + orgUser.userId, orgUser);\n};\n\nconst removeOrgUser = async (orgUser, orgId) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId + '/users/' + orgUser.userId);\n};\n\nexport default function AdminEditOrgPage({\n  match\n}) {\n  const navIndex = useSelector(state => state.navIndex);\n  const navModel = getNavModel(navIndex, 'global-orgs');\n  const orgId = parseInt(match.params.id, 10);\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n  const canReadUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n  const [users, setUsers] = useState([]);\n  const [orgState, fetchOrg] = useAsyncFn(() => getOrg(orgId), []);\n  const [, fetchOrgUsers] = useAsyncFn(() => getOrgUsers(orgId), []);\n  useEffect(() => {\n    fetchOrg();\n    fetchOrgUsers().then(res => setUsers(res));\n  }, [fetchOrg, fetchOrgUsers]);\n\n  const updateOrgName = async name => {\n    return await getBackendSrv().put('/api/orgs/' + orgId, Object.assign({}, orgState.value, {\n      name\n    }));\n  };\n\n  const renderMissingUserListRightsMessage = () => {\n    return _Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n      severity: \"info\",\n      title: \"Access denied\",\n      children: \"You do not have permission to see users in this organization. To update this organization, contact your server administrator.\"\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsx(Page.Contents, {\n      children: /*#__PURE__*/_jsxs(_Fragment, {\n        children: [_Legend || (_Legend = /*#__PURE__*/_jsx(Legend, {\n          children: \"Edit organization\"\n        })), orgState.value && /*#__PURE__*/_jsx(Form, {\n          defaultValues: {\n            orgName: orgState.value.name\n          },\n          onSubmit: async values => await updateOrgName(values.orgName),\n          children: ({\n            register,\n            errors\n          }) => /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Field, {\n              label: \"Name\",\n              invalid: !!errors.orgName,\n              error: \"Name is required\",\n              disabled: !canWriteOrg,\n              children: /*#__PURE__*/_jsx(Input, Object.assign({}, register('orgName', {\n                required: true\n              }), {\n                id: \"org-name-input\"\n              }))\n            }), /*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              disabled: !canWriteOrg,\n              children: \"Update\"\n            })]\n          })\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: css`\n              margin-top: 20px;\n            `,\n          children: [_Legend2 || (_Legend2 = /*#__PURE__*/_jsx(Legend, {\n            children: \"Organization users\"\n          })), !canReadUsers && renderMissingUserListRightsMessage(), canReadUsers && !!users.length && /*#__PURE__*/_jsx(UsersTable, {\n            users: users,\n            orgId: orgId,\n            onRoleChange: (role, orgUser) => {\n              updateOrgUserRole(Object.assign({}, orgUser, {\n                role\n              }), orgId);\n              setUsers(users.map(user => {\n                if (orgUser.userId === user.userId) {\n                  return Object.assign({}, orgUser, {\n                    role\n                  });\n                }\n\n                return user;\n              }));\n              fetchOrgUsers();\n            },\n            onRemoveUser: orgUser => {\n              removeOrgUser(orgUser, orgId);\n              setUsers(users.filter(user => orgUser.userId !== user.userId));\n              fetchOrgUsers();\n            }\n          })]\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"names":["css","React","useState","useEffect","useSelector","useAsyncFn","getBackendSrv","Form","Field","Input","Button","Legend","Alert","Page","contextSrv","getNavModel","accessControlQueryParam","AccessControlAction","UsersTable","getOrg","orgId","get","getOrgUsers","hasPermission","OrgUsersRead","updateOrgUserRole","orgUser","patch","userId","removeOrgUser","delete","AdminEditOrgPage","match","navIndex","state","navModel","parseInt","params","id","canWriteOrg","OrgsWrite","canReadUsers","users","setUsers","orgState","fetchOrg","fetchOrgUsers","then","res","updateOrgName","name","put","value","renderMissingUserListRightsMessage","orgName","values","register","errors","required","length","role","map","user","filter"],"sources":["/home/soula/grafana/public/app/features/admin/AdminEditOrgPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAsyncFn } from 'react-use';\n\nimport { UrlQueryValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Field, Input, Button, Legend, Alert } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { StoreState, OrgUser, AccessControlAction } from 'app/types';\n\nimport UsersTable from '../users/UsersTable';\n\ninterface OrgNameDTO {\n  orgName: string;\n}\n\nconst getOrg = async (orgId: UrlQueryValue) => {\n  return await getBackendSrv().get('/api/orgs/' + orgId);\n};\n\nconst getOrgUsers = async (orgId: UrlQueryValue) => {\n  if (contextSrv.hasPermission(AccessControlAction.OrgUsersRead)) {\n    return await getBackendSrv().get(`/api/orgs/${orgId}/users`, accessControlQueryParam());\n  }\n  return [];\n};\n\nconst updateOrgUserRole = async (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  await getBackendSrv().patch('/api/orgs/' + orgId + '/users/' + orgUser.userId, orgUser);\n};\n\nconst removeOrgUser = async (orgUser: OrgUser, orgId: UrlQueryValue) => {\n  return await getBackendSrv().delete('/api/orgs/' + orgId + '/users/' + orgUser.userId);\n};\n\ninterface Props extends GrafanaRouteComponentProps<{ id: string }> {}\n\nexport default function AdminEditOrgPage({ match }: Props) {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navModel = getNavModel(navIndex, 'global-orgs');\n  const orgId = parseInt(match.params.id, 10);\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n  const canReadUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n\n  const [users, setUsers] = useState<OrgUser[]>([]);\n\n  const [orgState, fetchOrg] = useAsyncFn(() => getOrg(orgId), []);\n  const [, fetchOrgUsers] = useAsyncFn(() => getOrgUsers(orgId), []);\n\n  useEffect(() => {\n    fetchOrg();\n    fetchOrgUsers().then((res) => setUsers(res));\n  }, [fetchOrg, fetchOrgUsers]);\n\n  const updateOrgName = async (name: string) => {\n    return await getBackendSrv().put('/api/orgs/' + orgId, { ...orgState.value, name });\n  };\n\n  const renderMissingUserListRightsMessage = () => {\n    return (\n      <Alert severity=\"info\" title=\"Access denied\">\n        You do not have permission to see users in this organization. To update this organization, contact your server\n        administrator.\n      </Alert>\n    );\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <>\n          <Legend>Edit organization</Legend>\n          {orgState.value && (\n            <Form\n              defaultValues={{ orgName: orgState.value.name }}\n              onSubmit={async (values: OrgNameDTO) => await updateOrgName(values.orgName)}\n            >\n              {({ register, errors }) => (\n                <>\n                  <Field label=\"Name\" invalid={!!errors.orgName} error=\"Name is required\" disabled={!canWriteOrg}>\n                    <Input {...register('orgName', { required: true })} id=\"org-name-input\" />\n                  </Field>\n                  <Button type=\"submit\" disabled={!canWriteOrg}>\n                    Update\n                  </Button>\n                </>\n              )}\n            </Form>\n          )}\n\n          <div\n            className={css`\n              margin-top: 20px;\n            `}\n          >\n            <Legend>Organization users</Legend>\n            {!canReadUsers && renderMissingUserListRightsMessage()}\n            {canReadUsers && !!users.length && (\n              <UsersTable\n                users={users}\n                orgId={orgId}\n                onRoleChange={(role, orgUser) => {\n                  updateOrgUserRole({ ...orgUser, role }, orgId);\n                  setUsers(\n                    users.map((user) => {\n                      if (orgUser.userId === user.userId) {\n                        return { ...orgUser, role };\n                      }\n                      return user;\n                    })\n                  );\n                  fetchOrgUsers();\n                }}\n                onRemoveUser={(orgUser) => {\n                  removeOrgUser(orgUser, orgId);\n                  setUsers(users.filter((user) => orgUser.userId !== user.userId));\n                  fetchOrgUsers();\n                }}\n              />\n            )}\n          </div>\n        </>\n      </Page.Contents>\n    </Page>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}