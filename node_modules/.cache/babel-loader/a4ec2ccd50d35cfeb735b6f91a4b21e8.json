{"ast":null,"code":"const _excluded = [\"label\", \"children\", \"className\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { stylesFactory, useTheme2 } from '../../themes';\nimport { Legend } from './Legend';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const FieldSet = _ref => {\n  let {\n    label,\n    children,\n    className\n  } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  return /*#__PURE__*/_jsxs(\"fieldset\", Object.assign({\n    className: cx(styles.wrapper, className)\n  }, rest, {\n    children: [label && /*#__PURE__*/_jsx(Legend, {\n      children: label\n    }), children]\n  }));\n};\nconst getStyles = stylesFactory(theme => {\n  return {\n    wrapper: css`\n      margin-bottom: ${theme.spacing(4)};\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n    `\n  };\n});","map":{"version":3,"names":["css","cx","React","stylesFactory","useTheme2","Legend","FieldSet","label","children","className","rest","theme","styles","getStyles","wrapper","spacing"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Forms/FieldSet.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { FC, HTMLProps } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { stylesFactory, useTheme2 } from '../../themes';\n\nimport { Legend } from './Legend';\n\nexport interface Props extends Omit<HTMLProps<HTMLFieldSetElement>, 'label'> {\n  children: React.ReactNode[] | React.ReactNode;\n  /** Label for the fieldset's legend */\n  label?: React.ReactNode;\n}\n\nexport const FieldSet: FC<Props> = ({ label, children, className, ...rest }) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <fieldset className={cx(styles.wrapper, className)} {...rest}>\n      {label && <Legend>{label}</Legend>}\n      {children}\n    </fieldset>\n  );\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      margin-bottom: ${theme.spacing(4)};\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n    `,\n  };\n});\n"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAqC,OAArC;AAIA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,cAAzC;AAEA,SAASC,MAAT,QAAuB,UAAvB;;;AAQA,OAAO,MAAMC,QAAmB,GAAG,QAA6C;EAAA,IAA5C;IAAEC,KAAF;IAASC,QAAT;IAAmBC;EAAnB,CAA4C;EAAA,IAAXC,IAAW;;EAC9E,MAAMC,KAAK,GAAGP,SAAS,EAAvB;EACA,MAAMQ,MAAM,GAAGC,SAAS,CAACF,KAAD,CAAxB;EAEA,oBACE;IAAU,SAAS,EAAEV,EAAE,CAACW,MAAM,CAACE,OAAR,EAAiBL,SAAjB;EAAvB,GAAwDC,IAAxD;IAAA,WACGH,KAAK,iBAAI,KAAC,MAAD;MAAA,UAASA;IAAT,EADZ,EAEGC,QAFH;EAAA,GADF;AAMD,CAVM;AAYP,MAAMK,SAAS,GAAGV,aAAa,CAAEQ,KAAD,IAA0B;EACxD,OAAO;IACLG,OAAO,EAAEd,GAAI;AACjB,uBAAuBW,KAAK,CAACI,OAAN,CAAc,CAAd,CAAiB;AACxC;AACA;AACA;AACA;AACA;EAPS,CAAP;AASD,CAV8B,CAA/B"},"metadata":{},"sourceType":"module"}