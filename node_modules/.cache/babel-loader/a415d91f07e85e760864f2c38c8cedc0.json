{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport './graph';\nimport './series_overrides_ctrl';\nimport './thresholds_form';\nimport './time_regions_form';\nimport './annotation_tooltip';\nimport './event_editor';\nimport { defaults, find, without } from 'lodash';\nimport { FieldConfigProperty, PanelEvents, PanelPlugin } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\nimport config from 'app/core/config';\nimport { ThresholdMapper } from 'app/features/alerting/state/ThresholdMapper';\nimport { changePanelPlugin } from 'app/features/panel/state/actions';\nimport { dispatch } from 'app/store/store';\nimport { appEvents } from '../../../core/core';\nimport { loadSnapshotData } from '../../../features/dashboard/utils/loadSnapshotData';\nimport { annotationsFromDataFrames } from '../../../features/query/state/DashboardQueryRunner/utils';\nimport { ZoomOutEvent } from '../../../types/events';\nimport { GraphContextMenuCtrl } from './GraphContextMenuCtrl';\nimport { graphPanelMigrationHandler } from './GraphMigrations';\nimport { axesEditorComponent } from './axes_editor';\nimport { DataProcessor } from './data_processor';\nimport template from './template';\nimport { getDataTimeRange } from './utils';\nexport class GraphCtrl extends MetricsPanelCtrl {\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    _defineProperty(this, \"renderError\", false);\n\n    _defineProperty(this, \"hiddenSeries\", {});\n\n    _defineProperty(this, \"hiddenSeriesTainted\", false);\n\n    _defineProperty(this, \"seriesList\", []);\n\n    _defineProperty(this, \"dataList\", []);\n\n    _defineProperty(this, \"annotations\", []);\n\n    _defineProperty(this, \"alertState\", void 0);\n\n    _defineProperty(this, \"dataWarning\", void 0);\n\n    _defineProperty(this, \"colors\", []);\n\n    _defineProperty(this, \"subTabIndex\", 0);\n\n    _defineProperty(this, \"processor\", void 0);\n\n    _defineProperty(this, \"contextMenuCtrl\", void 0);\n\n    _defineProperty(this, \"panelDefaults\", {\n      // datasource name, null = default datasource\n      datasource: null,\n      // sets client side (flot) or native graphite png renderer (png)\n      renderer: 'flot',\n      yaxes: [{\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short'\n      }, {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short'\n      }],\n      xaxis: {\n        show: true,\n        mode: 'time',\n        name: null,\n        values: [],\n        buckets: null\n      },\n      yaxis: {\n        align: false,\n        alignLevel: null\n      },\n      // show/hide lines\n      lines: true,\n      // fill factor\n      fill: 1,\n      // fill gradient\n      fillGradient: 0,\n      // line width in pixels\n      linewidth: 1,\n      // show/hide dashed line\n      dashes: false,\n      // show/hide line\n      hiddenSeries: false,\n      // length of a dash\n      dashLength: 10,\n      // length of space between two dashes\n      spaceLength: 10,\n      // show hide points\n      points: false,\n      // point radius in pixels\n      pointradius: 2,\n      // show hide bars\n      bars: false,\n      // enable/disable stacking\n      stack: false,\n      // stack percentage mode\n      percentage: false,\n      // legend options\n      legend: {\n        show: true,\n        // disable/enable legend\n        values: false,\n        // disable/enable legend values\n        min: false,\n        max: false,\n        current: false,\n        total: false,\n        avg: false\n      },\n      // how null points should be handled\n      nullPointMode: 'null',\n      // staircase line mode\n      steppedLine: false,\n      // tooltip options\n      tooltip: {\n        value_type: 'individual',\n        shared: true,\n        sort: 0\n      },\n      // time overrides\n      timeFrom: null,\n      timeShift: null,\n      // metric queries\n      targets: [{}],\n      // series color overrides\n      aliasColors: {},\n      // other style overrides\n      seriesOverrides: [],\n      thresholds: [],\n      timeRegions: [],\n      options: {\n        // show/hide alert threshold lines and fill\n        alertThreshold: true\n      }\n    });\n\n    _defineProperty(this, \"onColorChange\", (series, color) => {\n      series.setColor(config.theme.visualization.getColorByName(color));\n      this.panel.aliasColors[series.alias] = color;\n      this.render();\n    });\n\n    _defineProperty(this, \"onToggleSeries\", hiddenSeries => {\n      this.hiddenSeriesTainted = true;\n      this.hiddenSeries = hiddenSeries;\n      this.render();\n    });\n\n    _defineProperty(this, \"onToggleSort\", (sortBy, sortDesc) => {\n      this.panel.legend.sort = sortBy;\n      this.panel.legend.sortDesc = sortDesc;\n      this.render();\n    });\n\n    _defineProperty(this, \"onToggleAxis\", info => {\n      let override = find(this.panel.seriesOverrides, {\n        alias: info.alias\n      });\n\n      if (!override) {\n        override = {\n          alias: info.alias\n        };\n        this.panel.seriesOverrides.push(override);\n      }\n\n      override.yaxis = info.yaxis;\n      this.render();\n    });\n\n    _defineProperty(this, \"onContextMenuClose\", () => {\n      this.contextMenuCtrl.toggleMenu();\n    });\n\n    _defineProperty(this, \"getTimeZone\", () => this.dashboard.getTimezone());\n\n    _defineProperty(this, \"getDataFrameByRefId\", refId => {\n      return this.dataList.filter(dataFrame => dataFrame.refId === refId)[0];\n    });\n\n    defaults(this.panel, this.panelDefaults);\n    defaults(this.panel.tooltip, this.panelDefaults.tooltip);\n    defaults(this.panel.legend, this.panelDefaults.legend);\n    defaults(this.panel.xaxis, this.panelDefaults.xaxis);\n    defaults(this.panel.options, this.panelDefaults.options);\n    this.useDataFrames = true;\n    this.processor = new DataProcessor(this.panel);\n    this.contextMenuCtrl = new GraphContextMenuCtrl($scope);\n    this.events.on(PanelEvents.render, this.onRender.bind(this));\n    this.events.on(PanelEvents.dataFramesReceived, this.onDataFramesReceived.bind(this));\n    this.events.on(PanelEvents.dataSnapshotLoad, this.onDataSnapshotLoad.bind(this));\n    this.events.on(PanelEvents.editModeInitialized, this.onInitEditMode.bind(this));\n    this.events.on(PanelEvents.initPanelActions, this.onInitPanelActions.bind(this)); // set axes format from field config\n\n    const fieldConfigUnit = this.panel.fieldConfig.defaults.unit;\n\n    if (fieldConfigUnit) {\n      this.panel.yaxes[0].format = fieldConfigUnit;\n    }\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Display', 'public/app/plugins/panel/graph/tab_display.html');\n    this.addEditorTab('Series overrides', 'public/app/plugins/panel/graph/tab_series_overrides.html');\n    this.addEditorTab('Axes', axesEditorComponent);\n    this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html');\n    this.addEditorTab('Thresholds', 'public/app/plugins/panel/graph/tab_thresholds.html');\n    this.addEditorTab('Time regions', 'public/app/plugins/panel/graph/tab_time_regions.html');\n    this.subTabIndex = 0;\n    this.hiddenSeriesTainted = false;\n  }\n\n  onInitPanelActions(actions) {\n    actions.push({\n      text: 'Toggle legend',\n      click: 'ctrl.toggleLegend()',\n      shortcut: 'p l'\n    });\n  }\n\n  zoomOut(evt) {\n    appEvents.publish(new ZoomOutEvent({\n      scale: 2\n    }));\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    const {\n      series,\n      annotations\n    } = loadSnapshotData(this.panel, this.dashboard);\n    this.panelData.annotations = annotations;\n    this.onDataFramesReceived(series);\n  }\n\n  onDataFramesReceived(data) {\n    var _annotations;\n\n    this.dataList = data;\n    this.seriesList = this.processor.getSeriesList({\n      dataList: this.dataList,\n      range: this.range\n    });\n    this.dataWarning = this.getDataWarning();\n    this.alertState = undefined;\n    this.seriesList.alertState = undefined;\n\n    if (this.panelData.alertState) {\n      this.alertState = this.panelData.alertState;\n      this.seriesList.alertState = this.alertState.state;\n    }\n\n    this.annotations = [];\n\n    if ((_annotations = this.panelData.annotations) !== null && _annotations !== void 0 && _annotations.length) {\n      this.annotations = annotationsFromDataFrames(this.panelData.annotations);\n    }\n\n    this.loading = false;\n    this.render(this.seriesList);\n  }\n\n  getDataWarning() {\n    const datapointsCount = this.seriesList.reduce((prev, series) => {\n      return prev + series.datapoints.length;\n    }, 0);\n\n    if (datapointsCount === 0) {\n      if (this.dataList) {\n        for (const frame of this.dataList) {\n          var _frame$fields;\n\n          if (frame.length && (_frame$fields = frame.fields) !== null && _frame$fields !== void 0 && _frame$fields.length) {\n            return {\n              title: 'Unable to graph data',\n              tip: 'Data exists, but is not timeseries',\n              actionText: 'Switch to table view',\n              action: () => {\n                dispatch(changePanelPlugin({\n                  panel: this.panel,\n                  pluginId: 'table'\n                }));\n              }\n            };\n          }\n        }\n      }\n\n      return {\n        title: 'No data',\n        tip: 'No data returned from query'\n      };\n    } // If any data is in range, do not return an error\n\n\n    for (const series of this.seriesList) {\n      if (!series.isOutsideRange) {\n        return undefined;\n      }\n    } // All data is outside the time range\n\n\n    const dataWarning = {\n      title: 'Data outside time range',\n      tip: 'Can be caused by timezone mismatch or missing time filter in query'\n    };\n    const range = getDataTimeRange(this.dataList);\n\n    if (range) {\n      dataWarning.actionText = 'Zoom to data';\n\n      dataWarning.action = () => {\n        locationService.partial({\n          from: range.from,\n          to: range.to\n        });\n      };\n    }\n\n    return dataWarning;\n  }\n\n  onRender() {\n    if (!this.seriesList) {\n      return;\n    }\n\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n\n    for (const series of this.seriesList) {\n      series.applySeriesOverrides(this.panel.seriesOverrides); // Always use the configured field unit\n\n      if (series.unit) {\n        this.panel.yaxes[series.yaxis - 1].format = series.unit;\n      }\n\n      if (this.hiddenSeriesTainted === false && series.hiddenSeries === true) {\n        this.hiddenSeries[series.alias] = true;\n      }\n    }\n  }\n\n  addSeriesOverride(override) {\n    this.panel.seriesOverrides.push(override || {});\n  }\n\n  removeSeriesOverride(override) {\n    this.panel.seriesOverrides = without(this.panel.seriesOverrides, override);\n    this.render();\n  }\n\n  toggleLegend() {\n    this.panel.legend.show = !this.panel.legend.show;\n    this.render();\n  }\n\n  legendValuesOptionChanged() {\n    const legend = this.panel.legend;\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\n    this.render();\n  }\n\n  migrateToReact() {\n    this.onPluginTypeChange(config.panels['timeseries']);\n  }\n\n}\nGraphCtrl.$inject = [\"$scope\", \"$injector\"];\n\n_defineProperty(GraphCtrl, \"template\", template);\n\n// Use new react style configuration\nexport const plugin = new PanelPlugin(null).useFieldConfig({\n  disableStandardOptions: [FieldConfigProperty.NoValue, FieldConfigProperty.Thresholds, FieldConfigProperty.Max, FieldConfigProperty.Min, FieldConfigProperty.Decimals, FieldConfigProperty.Color, FieldConfigProperty.Mappings]\n}).setDataSupport({\n  annotations: true,\n  alertStates: true\n}).setMigrationHandler(graphPanelMigrationHandler); // Use the angular ctrt rather than a react one\n\nplugin.angularPanelCtrl = GraphCtrl;","map":{"version":3,"names":["defaults","find","without","FieldConfigProperty","PanelEvents","PanelPlugin","locationService","MetricsPanelCtrl","config","ThresholdMapper","changePanelPlugin","dispatch","appEvents","loadSnapshotData","annotationsFromDataFrames","ZoomOutEvent","GraphContextMenuCtrl","graphPanelMigrationHandler","axesEditorComponent","DataProcessor","template","getDataTimeRange","GraphCtrl","constructor","$scope","$injector","datasource","renderer","yaxes","label","show","logBase","min","max","format","xaxis","mode","name","values","buckets","yaxis","align","alignLevel","lines","fill","fillGradient","linewidth","dashes","hiddenSeries","dashLength","spaceLength","points","pointradius","bars","stack","percentage","legend","current","total","avg","nullPointMode","steppedLine","tooltip","value_type","shared","sort","timeFrom","timeShift","targets","aliasColors","seriesOverrides","thresholds","timeRegions","options","alertThreshold","series","color","setColor","theme","visualization","getColorByName","panel","alias","render","hiddenSeriesTainted","sortBy","sortDesc","info","override","push","contextMenuCtrl","toggleMenu","dashboard","getTimezone","refId","dataList","filter","dataFrame","panelDefaults","useDataFrames","processor","events","on","onRender","bind","dataFramesReceived","onDataFramesReceived","dataSnapshotLoad","onDataSnapshotLoad","editModeInitialized","onInitEditMode","initPanelActions","onInitPanelActions","fieldConfigUnit","fieldConfig","unit","addEditorTab","subTabIndex","actions","text","click","shortcut","zoomOut","evt","publish","scale","snapshotData","annotations","panelData","data","seriesList","getSeriesList","range","dataWarning","getDataWarning","alertState","undefined","state","length","loading","datapointsCount","reduce","prev","datapoints","frame","fields","title","tip","actionText","action","pluginId","isOutsideRange","partial","from","to","alertToGraphThresholds","applySeriesOverrides","addSeriesOverride","removeSeriesOverride","toggleLegend","legendValuesOptionChanged","migrateToReact","onPluginTypeChange","panels","plugin","useFieldConfig","disableStandardOptions","NoValue","Thresholds","Max","Min","Decimals","Color","Mappings","setDataSupport","alertStates","setMigrationHandler","angularPanelCtrl"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/module.ts"],"sourcesContent":["import './graph';\nimport './series_overrides_ctrl';\nimport './thresholds_form';\nimport './time_regions_form';\nimport './annotation_tooltip';\nimport './event_editor';\n\nimport { auto } from 'angular';\nimport { defaults, find, without } from 'lodash';\n\nimport { DataFrame, FieldConfigProperty, PanelEvents, PanelPlugin } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { MetricsPanelCtrl } from 'app/angular/panel/metrics_panel_ctrl';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\nimport { ThresholdMapper } from 'app/features/alerting/state/ThresholdMapper';\nimport { changePanelPlugin } from 'app/features/panel/state/actions';\nimport { dispatch } from 'app/store/store';\n\nimport { appEvents } from '../../../core/core';\nimport { loadSnapshotData } from '../../../features/dashboard/utils/loadSnapshotData';\nimport { annotationsFromDataFrames } from '../../../features/query/state/DashboardQueryRunner/utils';\nimport { ZoomOutEvent } from '../../../types/events';\n\nimport { GraphContextMenuCtrl } from './GraphContextMenuCtrl';\nimport { graphPanelMigrationHandler } from './GraphMigrations';\nimport { axesEditorComponent } from './axes_editor';\nimport { DataProcessor } from './data_processor';\nimport template from './template';\nimport { DataWarning, GraphFieldConfig, GraphPanelOptions } from './types';\nimport { getDataTimeRange } from './utils';\n\nexport class GraphCtrl extends MetricsPanelCtrl {\n  static template = template;\n\n  renderError = false;\n  hiddenSeries: any = {};\n  hiddenSeriesTainted = false;\n  seriesList: TimeSeries[] = [];\n  dataList: DataFrame[] = [];\n  annotations: any = [];\n  alertState: any;\n\n  dataWarning?: DataWarning;\n  colors: any = [];\n  subTabIndex = 0;\n  processor: DataProcessor;\n  contextMenuCtrl: GraphContextMenuCtrl;\n\n  panelDefaults: any = {\n    // datasource name, null = default datasource\n    datasource: null,\n    // sets client side (flot) or native graphite png renderer (png)\n    renderer: 'flot',\n    yaxes: [\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n      {\n        label: null,\n        show: true,\n        logBase: 1,\n        min: null,\n        max: null,\n        format: 'short',\n      },\n    ],\n    xaxis: {\n      show: true,\n      mode: 'time',\n      name: null,\n      values: [],\n      buckets: null,\n    },\n    yaxis: {\n      align: false,\n      alignLevel: null,\n    },\n    // show/hide lines\n    lines: true,\n    // fill factor\n    fill: 1,\n    // fill gradient\n    fillGradient: 0,\n    // line width in pixels\n    linewidth: 1,\n    // show/hide dashed line\n    dashes: false,\n    // show/hide line\n    hiddenSeries: false,\n    // length of a dash\n    dashLength: 10,\n    // length of space between two dashes\n    spaceLength: 10,\n    // show hide points\n    points: false,\n    // point radius in pixels\n    pointradius: 2,\n    // show hide bars\n    bars: false,\n    // enable/disable stacking\n    stack: false,\n    // stack percentage mode\n    percentage: false,\n    // legend options\n    legend: {\n      show: true, // disable/enable legend\n      values: false, // disable/enable legend values\n      min: false,\n      max: false,\n      current: false,\n      total: false,\n      avg: false,\n    },\n    // how null points should be handled\n    nullPointMode: 'null',\n    // staircase line mode\n    steppedLine: false,\n    // tooltip options\n    tooltip: {\n      value_type: 'individual',\n      shared: true,\n      sort: 0,\n    },\n    // time overrides\n    timeFrom: null,\n    timeShift: null,\n    // metric queries\n    targets: [{}],\n    // series color overrides\n    aliasColors: {},\n    // other style overrides\n    seriesOverrides: [],\n    thresholds: [],\n    timeRegions: [],\n    options: {\n      // show/hide alert threshold lines and fill\n      alertThreshold: true,\n    },\n  };\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n\n    defaults(this.panel, this.panelDefaults);\n    defaults(this.panel.tooltip, this.panelDefaults.tooltip);\n    defaults(this.panel.legend, this.panelDefaults.legend);\n    defaults(this.panel.xaxis, this.panelDefaults.xaxis);\n    defaults(this.panel.options, this.panelDefaults.options);\n\n    this.useDataFrames = true;\n    this.processor = new DataProcessor(this.panel);\n    this.contextMenuCtrl = new GraphContextMenuCtrl($scope);\n\n    this.events.on(PanelEvents.render, this.onRender.bind(this));\n    this.events.on(PanelEvents.dataFramesReceived, this.onDataFramesReceived.bind(this));\n    this.events.on(PanelEvents.dataSnapshotLoad, this.onDataSnapshotLoad.bind(this));\n    this.events.on(PanelEvents.editModeInitialized, this.onInitEditMode.bind(this));\n    this.events.on(PanelEvents.initPanelActions, this.onInitPanelActions.bind(this));\n\n    // set axes format from field config\n    const fieldConfigUnit = this.panel.fieldConfig.defaults.unit;\n    if (fieldConfigUnit) {\n      this.panel.yaxes[0].format = fieldConfigUnit;\n    }\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Display', 'public/app/plugins/panel/graph/tab_display.html');\n    this.addEditorTab('Series overrides', 'public/app/plugins/panel/graph/tab_series_overrides.html');\n    this.addEditorTab('Axes', axesEditorComponent);\n    this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html');\n    this.addEditorTab('Thresholds', 'public/app/plugins/panel/graph/tab_thresholds.html');\n    this.addEditorTab('Time regions', 'public/app/plugins/panel/graph/tab_time_regions.html');\n    this.subTabIndex = 0;\n    this.hiddenSeriesTainted = false;\n  }\n\n  onInitPanelActions(actions: any[]) {\n    actions.push({ text: 'Toggle legend', click: 'ctrl.toggleLegend()', shortcut: 'p l' });\n  }\n\n  zoomOut(evt: any) {\n    appEvents.publish(new ZoomOutEvent({ scale: 2 }));\n  }\n\n  onDataSnapshotLoad(snapshotData: any) {\n    const { series, annotations } = loadSnapshotData(this.panel, this.dashboard);\n    this.panelData!.annotations = annotations;\n    this.onDataFramesReceived(series);\n  }\n\n  onDataFramesReceived(data: DataFrame[]) {\n    this.dataList = data;\n    this.seriesList = this.processor.getSeriesList({\n      dataList: this.dataList,\n      range: this.range,\n    });\n\n    this.dataWarning = this.getDataWarning();\n\n    this.alertState = undefined;\n    (this.seriesList as any).alertState = undefined;\n    if (this.panelData!.alertState) {\n      this.alertState = this.panelData!.alertState;\n      (this.seriesList as any).alertState = this.alertState.state;\n    }\n\n    this.annotations = [];\n    if (this.panelData!.annotations?.length) {\n      this.annotations = annotationsFromDataFrames(this.panelData!.annotations);\n    }\n\n    this.loading = false;\n    this.render(this.seriesList);\n  }\n\n  getDataWarning(): DataWarning | undefined {\n    const datapointsCount = this.seriesList.reduce((prev, series) => {\n      return prev + series.datapoints.length;\n    }, 0);\n\n    if (datapointsCount === 0) {\n      if (this.dataList) {\n        for (const frame of this.dataList) {\n          if (frame.length && frame.fields?.length) {\n            return {\n              title: 'Unable to graph data',\n              tip: 'Data exists, but is not timeseries',\n              actionText: 'Switch to table view',\n              action: () => {\n                dispatch(changePanelPlugin({ panel: this.panel, pluginId: 'table' }));\n              },\n            };\n          }\n        }\n      }\n\n      return {\n        title: 'No data',\n        tip: 'No data returned from query',\n      };\n    }\n\n    // If any data is in range, do not return an error\n    for (const series of this.seriesList) {\n      if (!series.isOutsideRange) {\n        return undefined;\n      }\n    }\n\n    // All data is outside the time range\n    const dataWarning: DataWarning = {\n      title: 'Data outside time range',\n      tip: 'Can be caused by timezone mismatch or missing time filter in query',\n    };\n\n    const range = getDataTimeRange(this.dataList);\n\n    if (range) {\n      dataWarning.actionText = 'Zoom to data';\n      dataWarning.action = () => {\n        locationService.partial({\n          from: range.from,\n          to: range.to,\n        });\n      };\n    }\n\n    return dataWarning;\n  }\n\n  onRender() {\n    if (!this.seriesList) {\n      return;\n    }\n\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n\n    for (const series of this.seriesList) {\n      series.applySeriesOverrides(this.panel.seriesOverrides);\n\n      // Always use the configured field unit\n      if (series.unit) {\n        this.panel.yaxes[series.yaxis - 1].format = series.unit;\n      }\n      if (this.hiddenSeriesTainted === false && series.hiddenSeries === true) {\n        this.hiddenSeries[series.alias] = true;\n      }\n    }\n  }\n\n  onColorChange = (series: any, color: string) => {\n    series.setColor(config.theme.visualization.getColorByName(color));\n    this.panel.aliasColors[series.alias] = color;\n    this.render();\n  };\n\n  onToggleSeries = (hiddenSeries: any) => {\n    this.hiddenSeriesTainted = true;\n    this.hiddenSeries = hiddenSeries;\n    this.render();\n  };\n\n  onToggleSort = (sortBy: any, sortDesc: any) => {\n    this.panel.legend.sort = sortBy;\n    this.panel.legend.sortDesc = sortDesc;\n    this.render();\n  };\n\n  onToggleAxis = (info: { alias: any; yaxis: any }) => {\n    let override: any = find(this.panel.seriesOverrides, { alias: info.alias });\n    if (!override) {\n      override = { alias: info.alias };\n      this.panel.seriesOverrides.push(override);\n    }\n    override.yaxis = info.yaxis;\n    this.render();\n  };\n\n  addSeriesOverride(override: any) {\n    this.panel.seriesOverrides.push(override || {});\n  }\n\n  removeSeriesOverride(override: any) {\n    this.panel.seriesOverrides = without(this.panel.seriesOverrides, override);\n    this.render();\n  }\n\n  toggleLegend() {\n    this.panel.legend.show = !this.panel.legend.show;\n    this.render();\n  }\n\n  legendValuesOptionChanged() {\n    const legend = this.panel.legend;\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\n    this.render();\n  }\n\n  onContextMenuClose = () => {\n    this.contextMenuCtrl.toggleMenu();\n  };\n\n  getTimeZone = () => this.dashboard.getTimezone();\n\n  getDataFrameByRefId = (refId: string) => {\n    return this.dataList.filter((dataFrame) => dataFrame.refId === refId)[0];\n  };\n\n  migrateToReact() {\n    this.onPluginTypeChange(config.panels['timeseries']);\n  }\n}\n\n// Use new react style configuration\nexport const plugin = new PanelPlugin<GraphPanelOptions, GraphFieldConfig>(null)\n  .useFieldConfig({\n    disableStandardOptions: [\n      FieldConfigProperty.NoValue,\n      FieldConfigProperty.Thresholds,\n      FieldConfigProperty.Max,\n      FieldConfigProperty.Min,\n      FieldConfigProperty.Decimals,\n      FieldConfigProperty.Color,\n      FieldConfigProperty.Mappings,\n    ],\n  })\n  .setDataSupport({ annotations: true, alertStates: true })\n  .setMigrationHandler(graphPanelMigrationHandler);\n\n// Use the angular ctrt rather than a react one\nplugin.angularPanelCtrl = GraphCtrl;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}