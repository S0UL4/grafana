{"ast":null,"code":"const _excluded = [\"ref\"],\n      _excluded2 = [\"ref\"];\n\nvar _Legend;\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { Button, Field, HorizontalGroup, Input, InputControl, Legend } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { LibraryPanelInputState } from '../state/reducers';\nimport { validateTitle, validateUid } from '../utils/validation';\nimport { ImportDashboardLibraryPanelsList } from './ImportDashboardLibraryPanelsList';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const ImportDashboardForm = ({\n  register,\n  errors,\n  control,\n  getValues,\n  uidReset,\n  inputs,\n  initialFolderId,\n  onUidReset,\n  onCancel,\n  onSubmit,\n  watch\n}) => {\n  var _inputs$libraryPanels, _inputs$libraryPanels2, _inputs$libraryPanels3, _inputs$libraryPanels4;\n\n  const [isSubmitted, setSubmitted] = useState(false);\n  const watchDataSources = watch('dataSources');\n  const watchFolder = watch('folder');\n  /*\n    This useEffect is needed for overwriting a dashboard. It\n    submits the form even if there's validation errors on title or uid.\n  */\n\n  useEffect(() => {\n    if (isSubmitted && (errors.title || errors.uid)) {\n      onSubmit(getValues(), {});\n    }\n  }, [errors, getValues, isSubmitted, onSubmit]);\n  const newLibraryPanels = (_inputs$libraryPanels = inputs === null || inputs === void 0 ? void 0 : (_inputs$libraryPanels2 = inputs.libraryPanels) === null || _inputs$libraryPanels2 === void 0 ? void 0 : _inputs$libraryPanels2.filter(i => i.state === LibraryPanelInputState.New)) !== null && _inputs$libraryPanels !== void 0 ? _inputs$libraryPanels : [];\n  const existingLibraryPanels = (_inputs$libraryPanels3 = inputs === null || inputs === void 0 ? void 0 : (_inputs$libraryPanels4 = inputs.libraryPanels) === null || _inputs$libraryPanels4 === void 0 ? void 0 : _inputs$libraryPanels4.filter(i => i.state === LibraryPanelInputState.Exits)) !== null && _inputs$libraryPanels3 !== void 0 ? _inputs$libraryPanels3 : [];\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [_Legend || (_Legend = /*#__PURE__*/_jsx(Legend, {\n      children: \"Options\"\n    })), /*#__PURE__*/_jsx(Field, {\n      label: \"Name\",\n      invalid: !!errors.title,\n      error: errors.title && errors.title.message,\n      children: /*#__PURE__*/_jsx(Input, Object.assign({}, register('title', {\n        required: 'Name is required',\n        validate: async v => await validateTitle(v, getValues().folder.id)\n      }), {\n        type: \"text\",\n        \"data-testid\": selectors.components.ImportDashboardForm.name\n      }))\n    }), /*#__PURE__*/_jsx(Field, {\n      label: \"Folder\",\n      children: /*#__PURE__*/_jsx(InputControl, {\n        render: _ref => {\n          let {} = _ref,\n              field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n          return /*#__PURE__*/_jsx(FolderPicker, Object.assign({}, field, {\n            enableCreateNew: true,\n            initialFolderId: initialFolderId\n          }));\n        },\n        name: \"folder\",\n        control: control\n      })\n    }), /*#__PURE__*/_jsx(Field, {\n      label: \"Unique identifier (UID)\",\n      description: \"The unique identifier (UID) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs. The UID allows having consistent URLs for accessing dashboards so changing the title of a dashboard will not break any bookmarked links to that dashboard.\",\n      invalid: !!errors.uid,\n      error: errors.uid && errors.uid.message,\n      children: /*#__PURE__*/_jsx(_Fragment, {\n        children: !uidReset ? /*#__PURE__*/_jsx(Input, Object.assign({\n          disabled: true\n        }, register('uid', {\n          validate: async v => await validateUid(v)\n        }), {\n          addonAfter: !uidReset && /*#__PURE__*/_jsx(Button, {\n            onClick: onUidReset,\n            children: \"Change uid\"\n          })\n        })) : /*#__PURE__*/_jsx(Input, Object.assign({}, register('uid', {\n          required: true,\n          validate: async v => await validateUid(v)\n        })))\n      })\n    }), inputs.dataSources && inputs.dataSources.map((input, index) => {\n      if (input.pluginId === ExpressionDatasourceRef.type) {\n        return null;\n      }\n\n      const dataSourceOption = `dataSources[${index}]`;\n      const current = watchDataSources !== null && watchDataSources !== void 0 ? watchDataSources : [];\n      return /*#__PURE__*/_jsx(Field, {\n        label: input.label,\n        invalid: errors.dataSources && !!errors.dataSources[index],\n        error: errors.dataSources && errors.dataSources[index] && 'A data source is required',\n        children: /*#__PURE__*/_jsx(InputControl, {\n          name: dataSourceOption,\n          render: _ref2 => {\n            var _current$index;\n\n            let {} = _ref2,\n                field = _objectWithoutPropertiesLoose(_ref2.field, _excluded2);\n\n            return /*#__PURE__*/_jsx(DataSourcePicker, Object.assign({}, field, {\n              noDefault: true,\n              placeholder: input.info,\n              pluginId: input.pluginId,\n              current: (_current$index = current[index]) === null || _current$index === void 0 ? void 0 : _current$index.uid\n            }));\n          },\n          control: control,\n          rules: {\n            required: true\n          }\n        })\n      }, dataSourceOption);\n    }), inputs.constants && inputs.constants.map((input, index) => {\n      const constantIndex = `constants[${index}]`;\n      return /*#__PURE__*/_jsx(Field, {\n        label: input.label,\n        error: errors.constants && errors.constants[index] && `${input.label} needs a value`,\n        invalid: errors.constants && !!errors.constants[index],\n        children: /*#__PURE__*/_jsx(Input, Object.assign({}, register(constantIndex, {\n          required: true\n        }), {\n          defaultValue: input.value\n        }))\n      }, constantIndex);\n    }), /*#__PURE__*/_jsx(ImportDashboardLibraryPanelsList, {\n      inputs: newLibraryPanels,\n      label: \"New library panels\",\n      description: \"List of new library panels that will get imported.\",\n      folderName: watchFolder.title\n    }), /*#__PURE__*/_jsx(ImportDashboardLibraryPanelsList, {\n      inputs: existingLibraryPanels,\n      label: \"Existing library panels\",\n      description: \"List of existing library panels. These panels are not affected by the import.\",\n      folderName: watchFolder.title\n    }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n      children: [/*#__PURE__*/_jsx(Button, {\n        type: \"submit\",\n        \"data-testid\": selectors.components.ImportDashboardForm.submit,\n        variant: getButtonVariant(errors),\n        onClick: () => {\n          setSubmitted(true);\n        },\n        children: getButtonText(errors)\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"reset\",\n        variant: \"secondary\",\n        onClick: onCancel,\n        children: \"Cancel\"\n      })]\n    })]\n  });\n};\n\nfunction getButtonVariant(errors) {\n  return errors && (errors.title || errors.uid) ? 'destructive' : 'primary';\n}\n\nfunction getButtonText(errors) {\n  return errors && (errors.title || errors.uid) ? 'Import (Overwrite)' : 'Import';\n}","map":{"version":3,"names":["React","useEffect","useState","selectors","DataSourcePicker","ExpressionDatasourceRef","Button","Field","HorizontalGroup","Input","InputControl","Legend","FolderPicker","LibraryPanelInputState","validateTitle","validateUid","ImportDashboardLibraryPanelsList","ImportDashboardForm","register","errors","control","getValues","uidReset","inputs","initialFolderId","onUidReset","onCancel","onSubmit","watch","isSubmitted","setSubmitted","watchDataSources","watchFolder","title","uid","newLibraryPanels","libraryPanels","filter","i","state","New","existingLibraryPanels","Exits","message","required","validate","v","folder","id","components","name","field","dataSources","map","input","index","pluginId","type","dataSourceOption","current","label","info","constants","constantIndex","value","submit","getButtonVariant","getButtonText"],"sources":["/home/soula/grafana/public/app/features/manage-dashboards/components/ImportDashboardForm.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport {\n  Button,\n  Field,\n  FormAPI,\n  FormFieldErrors,\n  FormsOnSubmit,\n  HorizontalGroup,\n  Input,\n  InputControl,\n  Legend,\n} from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\n\nimport {\n  DashboardInput,\n  DashboardInputs,\n  DataSourceInput,\n  ImportDashboardDTO,\n  LibraryPanelInputState,\n} from '../state/reducers';\nimport { validateTitle, validateUid } from '../utils/validation';\n\nimport { ImportDashboardLibraryPanelsList } from './ImportDashboardLibraryPanelsList';\n\ninterface Props extends Pick<FormAPI<ImportDashboardDTO>, 'register' | 'errors' | 'control' | 'getValues' | 'watch'> {\n  uidReset: boolean;\n  inputs: DashboardInputs;\n  initialFolderId: number;\n\n  onCancel: () => void;\n  onUidReset: () => void;\n  onSubmit: FormsOnSubmit<ImportDashboardDTO>;\n}\n\nexport const ImportDashboardForm: FC<Props> = ({\n  register,\n  errors,\n  control,\n  getValues,\n  uidReset,\n  inputs,\n  initialFolderId,\n  onUidReset,\n  onCancel,\n  onSubmit,\n  watch,\n}) => {\n  const [isSubmitted, setSubmitted] = useState(false);\n  const watchDataSources = watch('dataSources');\n  const watchFolder = watch('folder');\n\n  /*\n    This useEffect is needed for overwriting a dashboard. It\n    submits the form even if there's validation errors on title or uid.\n  */\n  useEffect(() => {\n    if (isSubmitted && (errors.title || errors.uid)) {\n      onSubmit(getValues(), {} as any);\n    }\n  }, [errors, getValues, isSubmitted, onSubmit]);\n  const newLibraryPanels = inputs?.libraryPanels?.filter((i) => i.state === LibraryPanelInputState.New) ?? [];\n  const existingLibraryPanels = inputs?.libraryPanels?.filter((i) => i.state === LibraryPanelInputState.Exits) ?? [];\n\n  return (\n    <>\n      <Legend>Options</Legend>\n      <Field label=\"Name\" invalid={!!errors.title} error={errors.title && errors.title.message}>\n        <Input\n          {...register('title', {\n            required: 'Name is required',\n            validate: async (v: string) => await validateTitle(v, getValues().folder.id),\n          })}\n          type=\"text\"\n          data-testid={selectors.components.ImportDashboardForm.name}\n        />\n      </Field>\n      <Field label=\"Folder\">\n        <InputControl\n          render={({ field: { ref, ...field } }) => (\n            <FolderPicker {...field} enableCreateNew initialFolderId={initialFolderId} />\n          )}\n          name=\"folder\"\n          control={control}\n        />\n      </Field>\n      <Field\n        label=\"Unique identifier (UID)\"\n        description=\"The unique identifier (UID) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\n                The UID allows having consistent URLs for accessing dashboards so changing the title of a dashboard will not break any\n                bookmarked links to that dashboard.\"\n        invalid={!!errors.uid}\n        error={errors.uid && errors.uid.message}\n      >\n        <>\n          {!uidReset ? (\n            <Input\n              disabled\n              {...register('uid', { validate: async (v: string) => await validateUid(v) })}\n              addonAfter={!uidReset && <Button onClick={onUidReset}>Change uid</Button>}\n            />\n          ) : (\n            <Input {...register('uid', { required: true, validate: async (v: string) => await validateUid(v) })} />\n          )}\n        </>\n      </Field>\n      {inputs.dataSources &&\n        inputs.dataSources.map((input: DataSourceInput, index: number) => {\n          if (input.pluginId === ExpressionDatasourceRef.type) {\n            return null;\n          }\n          const dataSourceOption = `dataSources[${index}]`;\n          const current = watchDataSources ?? [];\n          return (\n            <Field\n              label={input.label}\n              key={dataSourceOption}\n              invalid={errors.dataSources && !!errors.dataSources[index]}\n              error={errors.dataSources && errors.dataSources[index] && 'A data source is required'}\n            >\n              <InputControl\n                name={dataSourceOption as any}\n                render={({ field: { ref, ...field } }) => (\n                  <DataSourcePicker\n                    {...field}\n                    noDefault={true}\n                    placeholder={input.info}\n                    pluginId={input.pluginId}\n                    current={current[index]?.uid}\n                  />\n                )}\n                control={control}\n                rules={{ required: true }}\n              />\n            </Field>\n          );\n        })}\n      {inputs.constants &&\n        inputs.constants.map((input: DashboardInput, index) => {\n          const constantIndex = `constants[${index}]`;\n          return (\n            <Field\n              label={input.label}\n              error={errors.constants && errors.constants[index] && `${input.label} needs a value`}\n              invalid={errors.constants && !!errors.constants[index]}\n              key={constantIndex}\n            >\n              <Input {...register(constantIndex as any, { required: true })} defaultValue={input.value} />\n            </Field>\n          );\n        })}\n      <ImportDashboardLibraryPanelsList\n        inputs={newLibraryPanels}\n        label=\"New library panels\"\n        description=\"List of new library panels that will get imported.\"\n        folderName={watchFolder.title}\n      />\n      <ImportDashboardLibraryPanelsList\n        inputs={existingLibraryPanels}\n        label=\"Existing library panels\"\n        description=\"List of existing library panels. These panels are not affected by the import.\"\n        folderName={watchFolder.title}\n      />\n      <HorizontalGroup>\n        <Button\n          type=\"submit\"\n          data-testid={selectors.components.ImportDashboardForm.submit}\n          variant={getButtonVariant(errors)}\n          onClick={() => {\n            setSubmitted(true);\n          }}\n        >\n          {getButtonText(errors)}\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </HorizontalGroup>\n    </>\n  );\n};\n\nfunction getButtonVariant(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'destructive' : 'primary';\n}\n\nfunction getButtonText(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'Import (Overwrite)' : 'Import';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}