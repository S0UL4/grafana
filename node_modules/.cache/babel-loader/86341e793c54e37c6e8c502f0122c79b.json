{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nimport { LoadingState } from '@grafana/data';\n\n/**\n * Subscribes and returns latest panel data from PanelQueryRunner\n */\nexport const usePanelLatestData = (panel, options, checkSchema) => {\n  const querySubscription = useRef();\n  const [latestData, setLatestData] = useState();\n  useEffect(() => {\n    let lastRev = -1;\n    let lastUpdate = 0;\n    querySubscription.current = panel.getQueryRunner().getData(options).subscribe({\n      next: data => {\n        if (checkSchema) {\n          var _data$structureRev;\n\n          if (lastRev === data.structureRev) {\n            const now = Date.now();\n            const elapsed = now - lastUpdate;\n\n            if (elapsed < 10000) {\n              return; // avoid updates if the schema has not changed for 10s\n            }\n\n            lastUpdate = now;\n          }\n\n          lastRev = (_data$structureRev = data.structureRev) !== null && _data$structureRev !== void 0 ? _data$structureRev : -1;\n        }\n\n        setLatestData(data);\n      }\n    });\n    return () => {\n      if (querySubscription.current) {\n        querySubscription.current.unsubscribe();\n      }\n    };\n    /**\n     * Adding separate options to dependencies array to avoid additional hook for comparing previous options with current.\n     * Otherwise, passing different references to the same object might cause troubles.\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [panel, options.withFieldConfig, options.withTransforms]);\n  return {\n    data: latestData,\n    error: latestData && latestData.error,\n    isLoading: latestData ? latestData.state === LoadingState.Loading : true,\n    hasSeries: latestData ? !!latestData.series : false\n  };\n};","map":{"version":3,"names":["useEffect","useRef","useState","LoadingState","usePanelLatestData","panel","options","checkSchema","querySubscription","latestData","setLatestData","lastRev","lastUpdate","current","getQueryRunner","getData","subscribe","next","data","structureRev","now","Date","elapsed","unsubscribe","withFieldConfig","withTransforms","error","isLoading","state","Loading","hasSeries","series"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/usePanelLatestData.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { DataQueryError, LoadingState, PanelData } from '@grafana/data';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { PanelModel } from '../../state';\n\ninterface UsePanelLatestData {\n  data?: PanelData;\n  error?: DataQueryError;\n  isLoading: boolean;\n  hasSeries: boolean;\n}\n\n/**\n * Subscribes and returns latest panel data from PanelQueryRunner\n */\nexport const usePanelLatestData = (\n  panel: PanelModel,\n  options: GetDataOptions,\n  checkSchema?: boolean\n): UsePanelLatestData => {\n  const querySubscription = useRef<Unsubscribable>();\n  const [latestData, setLatestData] = useState<PanelData>();\n\n  useEffect(() => {\n    let lastRev = -1;\n    let lastUpdate = 0;\n\n    querySubscription.current = panel\n      .getQueryRunner()\n      .getData(options)\n      .subscribe({\n        next: (data) => {\n          if (checkSchema) {\n            if (lastRev === data.structureRev) {\n              const now = Date.now();\n              const elapsed = now - lastUpdate;\n              if (elapsed < 10000) {\n                return; // avoid updates if the schema has not changed for 10s\n              }\n              lastUpdate = now;\n            }\n            lastRev = data.structureRev ?? -1;\n          }\n          setLatestData(data);\n        },\n      });\n\n    return () => {\n      if (querySubscription.current) {\n        querySubscription.current.unsubscribe();\n      }\n    };\n    /**\n     * Adding separate options to dependencies array to avoid additional hook for comparing previous options with current.\n     * Otherwise, passing different references to the same object might cause troubles.\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [panel, options.withFieldConfig, options.withTransforms]);\n\n  return {\n    data: latestData,\n    error: latestData && latestData.error,\n    isLoading: latestData ? latestData.state === LoadingState.Loading : true,\n    hasSeries: latestData ? !!latestData.series : false,\n  };\n};\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AAGA,SAAyBC,YAAzB,QAAwD,eAAxD;;AAYA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAChCC,KADgC,EAEhCC,OAFgC,EAGhCC,WAHgC,KAIT;EACvB,MAAMC,iBAAiB,GAAGP,MAAM,EAAhC;EACA,MAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,EAA5C;EAEAF,SAAS,CAAC,MAAM;IACd,IAAIW,OAAO,GAAG,CAAC,CAAf;IACA,IAAIC,UAAU,GAAG,CAAjB;IAEAJ,iBAAiB,CAACK,OAAlB,GAA4BR,KAAK,CAC9BS,cADyB,GAEzBC,OAFyB,CAEjBT,OAFiB,EAGzBU,SAHyB,CAGf;MACTC,IAAI,EAAGC,IAAD,IAAU;QACd,IAAIX,WAAJ,EAAiB;UAAA;;UACf,IAAII,OAAO,KAAKO,IAAI,CAACC,YAArB,EAAmC;YACjC,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;YACA,MAAME,OAAO,GAAGF,GAAG,GAAGR,UAAtB;;YACA,IAAIU,OAAO,GAAG,KAAd,EAAqB;cACnB,OADmB,CACX;YACT;;YACDV,UAAU,GAAGQ,GAAb;UACD;;UACDT,OAAO,yBAAGO,IAAI,CAACC,YAAR,mEAAwB,CAAC,CAAhC;QACD;;QACDT,aAAa,CAACQ,IAAD,CAAb;MACD;IAdQ,CAHe,CAA5B;IAoBA,OAAO,MAAM;MACX,IAAIV,iBAAiB,CAACK,OAAtB,EAA+B;QAC7BL,iBAAiB,CAACK,OAAlB,CAA0BU,WAA1B;MACD;IACF,CAJD;IAKA;AACJ;AACA;AACA;IACI;EACD,CAlCQ,EAkCN,CAAClB,KAAD,EAAQC,OAAO,CAACkB,eAAhB,EAAiClB,OAAO,CAACmB,cAAzC,CAlCM,CAAT;EAoCA,OAAO;IACLP,IAAI,EAAET,UADD;IAELiB,KAAK,EAAEjB,UAAU,IAAIA,UAAU,CAACiB,KAF3B;IAGLC,SAAS,EAAElB,UAAU,GAAGA,UAAU,CAACmB,KAAX,KAAqBzB,YAAY,CAAC0B,OAArC,GAA+C,IAH/D;IAILC,SAAS,EAAErB,UAAU,GAAG,CAAC,CAACA,UAAU,CAACsB,MAAhB,GAAyB;EAJzC,CAAP;AAMD,CAlDM"},"metadata":{},"sourceType":"module"}