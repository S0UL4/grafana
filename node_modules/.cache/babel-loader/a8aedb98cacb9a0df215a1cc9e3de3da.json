{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { dateMath } from '@grafana/data';\nimport { TimeRangeUpdatedEvent } from '@grafana/runtime';\nimport { defaultIntervals, RefreshPicker, ToolbarButtonRow } from '@grafana/ui';\nimport { TimePickerWithHistory } from 'app/core/components/TimePicker/TimePickerWithHistory';\nimport { appEvents } from 'app/core/core';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { ShiftTimeEvent, ShiftTimeEventDirection, ZoomOutEvent } from '../../../../types/events';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class DashNavTimeControls extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"sub\", void 0);\n\n    _defineProperty(this, \"onChangeRefreshInterval\", interval => {\n      getTimeSrv().setAutoRefresh(interval);\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"onRefresh\", () => {\n      getTimeSrv().refreshTimeModel();\n      return Promise.resolve();\n    });\n\n    _defineProperty(this, \"onMoveBack\", () => {\n      appEvents.publish(new ShiftTimeEvent({\n        direction: ShiftTimeEventDirection.Left\n      }));\n    });\n\n    _defineProperty(this, \"onMoveForward\", () => {\n      appEvents.publish(new ShiftTimeEvent({\n        direction: ShiftTimeEventDirection.Right\n      }));\n    });\n\n    _defineProperty(this, \"onChangeTimePicker\", timeRange => {\n      const {\n        dashboard\n      } = this.props;\n      const panel = dashboard.timepicker;\n      const hasDelay = panel.nowDelay && timeRange.raw.to === 'now';\n      const adjustedFrom = dateMath.isMathString(timeRange.raw.from) ? timeRange.raw.from : timeRange.from;\n      const adjustedTo = dateMath.isMathString(timeRange.raw.to) ? timeRange.raw.to : timeRange.to;\n      const nextRange = {\n        from: adjustedFrom,\n        to: hasDelay ? 'now-' + panel.nowDelay : adjustedTo\n      };\n      getTimeSrv().setTime(nextRange);\n    });\n\n    _defineProperty(this, \"onChangeTimeZone\", timeZone => {\n      this.props.dashboard.timezone = timeZone;\n      this.props.onChangeTimeZone(timeZone);\n      this.onRefresh();\n    });\n\n    _defineProperty(this, \"onChangeFiscalYearStartMonth\", month => {\n      this.props.dashboard.fiscalYearStartMonth = month;\n      this.onRefresh();\n    });\n\n    _defineProperty(this, \"onZoom\", () => {\n      appEvents.publish(new ZoomOutEvent({\n        scale: 2\n      }));\n    });\n  }\n\n  componentDidMount() {\n    this.sub = this.props.dashboard.events.subscribe(TimeRangeUpdatedEvent, () => this.forceUpdate());\n  }\n\n  componentWillUnmount() {\n    var _this$sub;\n\n    (_this$sub = this.sub) === null || _this$sub === void 0 ? void 0 : _this$sub.unsubscribe();\n  }\n\n  render() {\n    var _dashboard$panelInEdi;\n\n    const {\n      dashboard\n    } = this.props;\n    const {\n      refresh_intervals\n    } = dashboard.timepicker;\n    const intervals = getTimeSrv().getValidIntervals(refresh_intervals || defaultIntervals);\n    const timePickerValue = getTimeSrv().timeRange();\n    const timeZone = dashboard.getTimezone();\n    const fiscalYearStartMonth = dashboard.fiscalYearStartMonth;\n    const hideIntervalPicker = (_dashboard$panelInEdi = dashboard.panelInEdit) === null || _dashboard$panelInEdi === void 0 ? void 0 : _dashboard$panelInEdi.isEditing;\n    return /*#__PURE__*/_jsxs(ToolbarButtonRow, {\n      children: [/*#__PURE__*/_jsx(TimePickerWithHistory, {\n        value: timePickerValue,\n        onChange: this.onChangeTimePicker,\n        timeZone: timeZone,\n        fiscalYearStartMonth: fiscalYearStartMonth,\n        onMoveBackward: this.onMoveBack,\n        onMoveForward: this.onMoveForward,\n        onZoom: this.onZoom,\n        onChangeTimeZone: this.onChangeTimeZone,\n        onChangeFiscalYearStartMonth: this.onChangeFiscalYearStartMonth\n      }), /*#__PURE__*/_jsx(RefreshPicker, {\n        onIntervalChanged: this.onChangeRefreshInterval,\n        onRefresh: this.onRefresh,\n        value: dashboard.refresh,\n        intervals: intervals,\n        tooltip: \"Refresh dashboard\",\n        noIntervalPicker: hideIntervalPicker\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["React","Component","dateMath","TimeRangeUpdatedEvent","defaultIntervals","RefreshPicker","ToolbarButtonRow","TimePickerWithHistory","appEvents","getTimeSrv","ShiftTimeEvent","ShiftTimeEventDirection","ZoomOutEvent","DashNavTimeControls","interval","setAutoRefresh","forceUpdate","refreshTimeModel","Promise","resolve","publish","direction","Left","Right","timeRange","dashboard","props","panel","timepicker","hasDelay","nowDelay","raw","to","adjustedFrom","isMathString","from","adjustedTo","nextRange","setTime","timeZone","timezone","onChangeTimeZone","onRefresh","month","fiscalYearStartMonth","scale","componentDidMount","sub","events","subscribe","componentWillUnmount","unsubscribe","render","refresh_intervals","intervals","getValidIntervals","timePickerValue","getTimezone","hideIntervalPicker","panelInEdit","isEditing","onChangeTimePicker","onMoveBack","onMoveForward","onZoom","onChangeFiscalYearStartMonth","onChangeRefreshInterval","refresh"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/DashNav/DashNavTimeControls.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { dateMath, TimeRange, TimeZone } from '@grafana/data';\nimport { TimeRangeUpdatedEvent } from '@grafana/runtime';\nimport { defaultIntervals, RefreshPicker, ToolbarButtonRow } from '@grafana/ui';\nimport { TimePickerWithHistory } from 'app/core/components/TimePicker/TimePickerWithHistory';\nimport { appEvents } from 'app/core/core';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { ShiftTimeEvent, ShiftTimeEventDirection, ZoomOutEvent } from '../../../../types/events';\nimport { DashboardModel } from '../../state';\n\nexport interface Props {\n  dashboard: DashboardModel;\n  onChangeTimeZone: (timeZone: TimeZone) => void;\n}\n\nexport class DashNavTimeControls extends Component<Props> {\n  private sub?: Unsubscribable;\n\n  componentDidMount() {\n    this.sub = this.props.dashboard.events.subscribe(TimeRangeUpdatedEvent, () => this.forceUpdate());\n  }\n\n  componentWillUnmount() {\n    this.sub?.unsubscribe();\n  }\n\n  onChangeRefreshInterval = (interval: string) => {\n    getTimeSrv().setAutoRefresh(interval);\n    this.forceUpdate();\n  };\n\n  onRefresh = () => {\n    getTimeSrv().refreshTimeModel();\n    return Promise.resolve();\n  };\n\n  onMoveBack = () => {\n    appEvents.publish(new ShiftTimeEvent({ direction: ShiftTimeEventDirection.Left }));\n  };\n\n  onMoveForward = () => {\n    appEvents.publish(new ShiftTimeEvent({ direction: ShiftTimeEventDirection.Right }));\n  };\n\n  onChangeTimePicker = (timeRange: TimeRange) => {\n    const { dashboard } = this.props;\n    const panel = dashboard.timepicker;\n    const hasDelay = panel.nowDelay && timeRange.raw.to === 'now';\n\n    const adjustedFrom = dateMath.isMathString(timeRange.raw.from) ? timeRange.raw.from : timeRange.from;\n    const adjustedTo = dateMath.isMathString(timeRange.raw.to) ? timeRange.raw.to : timeRange.to;\n    const nextRange = {\n      from: adjustedFrom,\n      to: hasDelay ? 'now-' + panel.nowDelay : adjustedTo,\n    };\n\n    getTimeSrv().setTime(nextRange);\n  };\n\n  onChangeTimeZone = (timeZone: TimeZone) => {\n    this.props.dashboard.timezone = timeZone;\n    this.props.onChangeTimeZone(timeZone);\n    this.onRefresh();\n  };\n\n  onChangeFiscalYearStartMonth = (month: number) => {\n    this.props.dashboard.fiscalYearStartMonth = month;\n    this.onRefresh();\n  };\n\n  onZoom = () => {\n    appEvents.publish(new ZoomOutEvent({ scale: 2 }));\n  };\n\n  render() {\n    const { dashboard } = this.props;\n    const { refresh_intervals } = dashboard.timepicker;\n    const intervals = getTimeSrv().getValidIntervals(refresh_intervals || defaultIntervals);\n\n    const timePickerValue = getTimeSrv().timeRange();\n    const timeZone = dashboard.getTimezone();\n    const fiscalYearStartMonth = dashboard.fiscalYearStartMonth;\n    const hideIntervalPicker = dashboard.panelInEdit?.isEditing;\n\n    return (\n      <ToolbarButtonRow>\n        <TimePickerWithHistory\n          value={timePickerValue}\n          onChange={this.onChangeTimePicker}\n          timeZone={timeZone}\n          fiscalYearStartMonth={fiscalYearStartMonth}\n          onMoveBackward={this.onMoveBack}\n          onMoveForward={this.onMoveForward}\n          onZoom={this.onZoom}\n          onChangeTimeZone={this.onChangeTimeZone}\n          onChangeFiscalYearStartMonth={this.onChangeFiscalYearStartMonth}\n        />\n        <RefreshPicker\n          onIntervalChanged={this.onChangeRefreshInterval}\n          onRefresh={this.onRefresh}\n          value={dashboard.refresh}\n          intervals={intervals}\n          tooltip=\"Refresh dashboard\"\n          noIntervalPicker={hideIntervalPicker}\n        />\n      </ToolbarButtonRow>\n    );\n  }\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAGA,SAASC,QAAT,QAA8C,eAA9C;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,gBAA1C,QAAkE,aAAlE;AACA,SAASC,qBAAT,QAAsC,sDAAtC;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,UAAT,QAA2B,yCAA3B;AAEA,SAASC,cAAT,EAAyBC,uBAAzB,EAAkDC,YAAlD,QAAsE,0BAAtE;;;AAQA,OAAO,MAAMC,mBAAN,SAAkCZ,SAAlC,CAAmD;EAAA;IAAA;;IAAA;;IAAA,iDAW7Ba,QAAD,IAAsB;MAC9CL,UAAU,GAAGM,cAAb,CAA4BD,QAA5B;MACA,KAAKE,WAAL;IACD,CAduD;;IAAA,mCAgB5C,MAAM;MAChBP,UAAU,GAAGQ,gBAAb;MACA,OAAOC,OAAO,CAACC,OAAR,EAAP;IACD,CAnBuD;;IAAA,oCAqB3C,MAAM;MACjBX,SAAS,CAACY,OAAV,CAAkB,IAAIV,cAAJ,CAAmB;QAAEW,SAAS,EAAEV,uBAAuB,CAACW;MAArC,CAAnB,CAAlB;IACD,CAvBuD;;IAAA,uCAyBxC,MAAM;MACpBd,SAAS,CAACY,OAAV,CAAkB,IAAIV,cAAJ,CAAmB;QAAEW,SAAS,EAAEV,uBAAuB,CAACY;MAArC,CAAnB,CAAlB;IACD,CA3BuD;;IAAA,4CA6BlCC,SAAD,IAA0B;MAC7C,MAAM;QAAEC;MAAF,IAAgB,KAAKC,KAA3B;MACA,MAAMC,KAAK,GAAGF,SAAS,CAACG,UAAxB;MACA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,QAAN,IAAkBN,SAAS,CAACO,GAAV,CAAcC,EAAd,KAAqB,KAAxD;MAEA,MAAMC,YAAY,GAAG/B,QAAQ,CAACgC,YAAT,CAAsBV,SAAS,CAACO,GAAV,CAAcI,IAApC,IAA4CX,SAAS,CAACO,GAAV,CAAcI,IAA1D,GAAiEX,SAAS,CAACW,IAAhG;MACA,MAAMC,UAAU,GAAGlC,QAAQ,CAACgC,YAAT,CAAsBV,SAAS,CAACO,GAAV,CAAcC,EAApC,IAA0CR,SAAS,CAACO,GAAV,CAAcC,EAAxD,GAA6DR,SAAS,CAACQ,EAA1F;MACA,MAAMK,SAAS,GAAG;QAChBF,IAAI,EAAEF,YADU;QAEhBD,EAAE,EAAEH,QAAQ,GAAG,SAASF,KAAK,CAACG,QAAlB,GAA6BM;MAFzB,CAAlB;MAKA3B,UAAU,GAAG6B,OAAb,CAAqBD,SAArB;IACD,CA1CuD;;IAAA,0CA4CpCE,QAAD,IAAwB;MACzC,KAAKb,KAAL,CAAWD,SAAX,CAAqBe,QAArB,GAAgCD,QAAhC;MACA,KAAKb,KAAL,CAAWe,gBAAX,CAA4BF,QAA5B;MACA,KAAKG,SAAL;IACD,CAhDuD;;IAAA,sDAkDxBC,KAAD,IAAmB;MAChD,KAAKjB,KAAL,CAAWD,SAAX,CAAqBmB,oBAArB,GAA4CD,KAA5C;MACA,KAAKD,SAAL;IACD,CArDuD;;IAAA,gCAuD/C,MAAM;MACblC,SAAS,CAACY,OAAV,CAAkB,IAAIR,YAAJ,CAAiB;QAAEiC,KAAK,EAAE;MAAT,CAAjB,CAAlB;IACD,CAzDuD;EAAA;;EAGxDC,iBAAiB,GAAG;IAClB,KAAKC,GAAL,GAAW,KAAKrB,KAAL,CAAWD,SAAX,CAAqBuB,MAArB,CAA4BC,SAA5B,CAAsC9C,qBAAtC,EAA6D,MAAM,KAAKa,WAAL,EAAnE,CAAX;EACD;;EAEDkC,oBAAoB,GAAG;IAAA;;IACrB,kBAAKH,GAAL,wDAAUI,WAAV;EACD;;EAkDDC,MAAM,GAAG;IAAA;;IACP,MAAM;MAAE3B;IAAF,IAAgB,KAAKC,KAA3B;IACA,MAAM;MAAE2B;IAAF,IAAwB5B,SAAS,CAACG,UAAxC;IACA,MAAM0B,SAAS,GAAG7C,UAAU,GAAG8C,iBAAb,CAA+BF,iBAAiB,IAAIjD,gBAApD,CAAlB;IAEA,MAAMoD,eAAe,GAAG/C,UAAU,GAAGe,SAAb,EAAxB;IACA,MAAMe,QAAQ,GAAGd,SAAS,CAACgC,WAAV,EAAjB;IACA,MAAMb,oBAAoB,GAAGnB,SAAS,CAACmB,oBAAvC;IACA,MAAMc,kBAAkB,4BAAGjC,SAAS,CAACkC,WAAb,0DAAG,sBAAuBC,SAAlD;IAEA,oBACE,MAAC,gBAAD;MAAA,wBACE,KAAC,qBAAD;QACE,KAAK,EAAEJ,eADT;QAEE,QAAQ,EAAE,KAAKK,kBAFjB;QAGE,QAAQ,EAAEtB,QAHZ;QAIE,oBAAoB,EAAEK,oBAJxB;QAKE,cAAc,EAAE,KAAKkB,UALvB;QAME,aAAa,EAAE,KAAKC,aANtB;QAOE,MAAM,EAAE,KAAKC,MAPf;QAQE,gBAAgB,EAAE,KAAKvB,gBARzB;QASE,4BAA4B,EAAE,KAAKwB;MATrC,EADF,eAYE,KAAC,aAAD;QACE,iBAAiB,EAAE,KAAKC,uBAD1B;QAEE,SAAS,EAAE,KAAKxB,SAFlB;QAGE,KAAK,EAAEjB,SAAS,CAAC0C,OAHnB;QAIE,SAAS,EAAEb,SAJb;QAKE,OAAO,EAAC,mBALV;QAME,gBAAgB,EAAEI;MANpB,EAZF;IAAA,EADF;EAuBD;;AA5FuD"},"metadata":{},"sourceType":"module"}