{"ast":null,"code":"// this file is pretty much a copy-paste of TimeSeriesPanel.tsx :(\n// with some extra renderers passed to the <TimeSeries> component\nimport React, { useMemo } from 'react';\nimport { getDisplayProcessor } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { TooltipDisplayMode } from '@grafana/schema';\nimport { usePanelContext, TimeSeries, TooltipPlugin, ZoomPlugin, useTheme2 } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { getFieldLinksForExplore } from 'app/features/explore/utils/links';\nimport { AnnotationEditorPlugin } from '../timeseries/plugins/AnnotationEditorPlugin';\nimport { AnnotationsPlugin } from '../timeseries/plugins/AnnotationsPlugin';\nimport { ContextMenuPlugin } from '../timeseries/plugins/ContextMenuPlugin';\nimport { ExemplarsPlugin } from '../timeseries/plugins/ExemplarsPlugin';\nimport { OutsideRangePlugin } from '../timeseries/plugins/OutsideRangePlugin';\nimport { ThresholdControlsPlugin } from '../timeseries/plugins/ThresholdControlsPlugin';\nimport { prepareCandlestickFields } from './fields';\nimport { defaultColors, VizDisplayMode } from './models.gen';\nimport { drawMarkers } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const CandlestickPanel = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  onChangeTimeRange,\n  replaceVariables\n}) => {\n  const {\n    sync,\n    canAddAnnotations,\n    onThresholdsChange,\n    canEditThresholds,\n    onSplitOpen\n  } = usePanelContext();\n\n  const getFieldLinks = (field, rowIndex) => {\n    return getFieldLinksForExplore({\n      field,\n      rowIndex,\n      splitOpenFn: onSplitOpen,\n      range: timeRange\n    });\n  };\n\n  const theme = useTheme2();\n  const info = useMemo(() => {\n    return prepareCandlestickFields(data === null || data === void 0 ? void 0 : data.series, options, theme, timeRange);\n  }, [data, options, theme, timeRange]);\n  const {\n    renderers,\n    tweakScale,\n    tweakAxis\n  } = useMemo(() => {\n    let tweakScale = (opts, forField) => opts;\n\n    let tweakAxis = (opts, forField) => opts;\n\n    let doNothing = {\n      renderers: [],\n      tweakScale,\n      tweakAxis\n    };\n\n    if (!info) {\n      return doNothing;\n    } // Un-encoding the already parsed special fields\n    // This takes currently matched fields and saves the name so they can be looked up by name later\n    // ¯\\_(ツ)_/¯  someday this can make more sense!\n\n\n    const fieldMap = info.names;\n\n    if (!Object.keys(fieldMap).length) {\n      return doNothing;\n    }\n\n    const {\n      mode,\n      candleStyle,\n      colorStrategy\n    } = options;\n    const colors = Object.assign({}, defaultColors, options.colors);\n    let {\n      open,\n      high,\n      low,\n      close,\n      volume\n    } = fieldMap; // names from matched fields\n\n    if (open == null || close == null) {\n      return doNothing;\n    }\n\n    let volumeAlpha = 0.5;\n    let volumeIdx = -1;\n    let shouldRenderVolume = false; // find volume field and set overrides\n\n    if (volume != null && mode !== VizDisplayMode.Candles) {\n      let volumeField = info.volume;\n\n      if (volumeField != null) {\n        shouldRenderVolume = true;\n        let {\n          fillOpacity\n        } = volumeField.config.custom;\n\n        if (fillOpacity) {\n          volumeAlpha = fillOpacity / 100;\n        } // we only want to put volume on own shorter axis when rendered with price\n\n\n        if (mode !== VizDisplayMode.Volume) {\n          volumeField.config = Object.assign({}, volumeField.config);\n          volumeField.config.unit = 'short';\n          volumeField.display = getDisplayProcessor({\n            field: volumeField,\n            theme: config.theme2\n          });\n\n          tweakAxis = (opts, forField) => {\n            var _info$volume;\n\n            // we can't do forField === info.volume because of copies :(\n            if (forField.name === ((_info$volume = info.volume) === null || _info$volume === void 0 ? void 0 : _info$volume.name)) {\n              let filter = (u, splits) => {\n                let _splits = [];\n                let max = u.series[volumeIdx].max;\n\n                for (let i = 0; i < splits.length; i++) {\n                  _splits.push(splits[i]);\n\n                  if (splits[i] > max) {\n                    break;\n                  }\n                }\n\n                return _splits;\n              };\n\n              opts.space = 20; // reduce tick spacing\n\n              opts.filter = filter; // hide tick labels\n\n              opts.ticks = Object.assign({}, opts.ticks, {\n                filter\n              }); // hide tick marks\n            }\n\n            return opts;\n          };\n\n          tweakScale = (opts, forField) => {\n            var _info$volume2;\n\n            // we can't do forField === info.volume because of copies :(\n            if (forField.name === ((_info$volume2 = info.volume) === null || _info$volume2 === void 0 ? void 0 : _info$volume2.name)) {\n              opts.range = (u, min, max) => [0, max * 7];\n            }\n\n            return opts;\n          };\n        }\n      }\n    }\n\n    let shouldRenderPrice = mode !== VizDisplayMode.Volume && high != null && low != null;\n\n    if (!shouldRenderPrice && !shouldRenderVolume) {\n      return doNothing;\n    }\n\n    let fields = {};\n    let indicesOnly = [];\n\n    if (shouldRenderPrice) {\n      fields = {\n        open,\n        high: high,\n        low: low,\n        close\n      }; // hide series from legend that are rendered as composite markers\n\n      for (let key in fields) {\n        let field = info[key];\n        field.config = Object.assign({}, field.config, {\n          custom: Object.assign({}, field.config.custom, {\n            hideFrom: {\n              legend: true,\n              tooltip: false,\n              viz: false\n            }\n          })\n        });\n      }\n    } else {\n      // these fields should not be omitted from normal rendering if they arent rendered\n      // as part of price markers. they're only here so we can get back their indicies in the\n      // init callback below. TODO: remove this when field mapping happens in the panel instead of deep\n      indicesOnly.push(open, close);\n    }\n\n    if (shouldRenderVolume) {\n      fields.volume = volume;\n      fields.open = open;\n      fields.close = close;\n    }\n\n    return {\n      renderers: [{\n        fieldMap: fields,\n        indicesOnly,\n        init: (builder, fieldIndices) => {\n          volumeIdx = fieldIndices.volume;\n          builder.addHook('drawAxes', drawMarkers({\n            mode,\n            fields: fieldIndices,\n            upColor: config.theme2.visualization.getColorByName(colors.up),\n            downColor: config.theme2.visualization.getColorByName(colors.down),\n            flatColor: config.theme2.visualization.getColorByName(colors.flat),\n            volumeAlpha,\n            colorStrategy,\n            candleStyle,\n            flatAsUp: true\n          }));\n        }\n      }],\n      tweakScale,\n      tweakAxis\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, data.structureRev]);\n\n  if (!info) {\n    return /*#__PURE__*/_jsx(PanelDataErrorView, {\n      panelId: id,\n      fieldConfig: fieldConfig,\n      data: data,\n      needsTimeField: true,\n      needsNumberField: true\n    });\n  }\n\n  const enableAnnotationCreation = Boolean(canAddAnnotations && canAddAnnotations());\n  return /*#__PURE__*/_jsx(TimeSeries, {\n    frames: [info.frame],\n    structureRev: data.structureRev,\n    timeRange: timeRange,\n    timeZone: timeZone,\n    width: width,\n    height: height,\n    legend: options.legend,\n    renderers: renderers,\n    tweakAxis: tweakAxis,\n    tweakScale: tweakScale,\n    options: options,\n    children: (config, alignedDataFrame) => {\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(ZoomPlugin, {\n          config: config,\n          onZoom: onChangeTimeRange\n        }), /*#__PURE__*/_jsx(TooltipPlugin, {\n          data: alignedDataFrame,\n          config: config,\n          mode: TooltipDisplayMode.Multi,\n          sync: sync,\n          timeZone: timeZone\n        }), data.annotations && /*#__PURE__*/_jsx(AnnotationsPlugin, {\n          annotations: data.annotations,\n          config: config,\n          timeZone: timeZone\n        }), enableAnnotationCreation ? /*#__PURE__*/_jsx(AnnotationEditorPlugin, {\n          data: alignedDataFrame,\n          timeZone: timeZone,\n          config: config,\n          children: ({\n            startAnnotating\n          }) => {\n            return /*#__PURE__*/_jsx(ContextMenuPlugin, {\n              data: alignedDataFrame,\n              config: config,\n              timeZone: timeZone,\n              replaceVariables: replaceVariables,\n              defaultItems: enableAnnotationCreation ? [{\n                items: [{\n                  label: 'Add annotation',\n                  ariaLabel: 'Add annotation',\n                  icon: 'comment-alt',\n                  onClick: (e, p) => {\n                    if (!p) {\n                      return;\n                    }\n\n                    startAnnotating({\n                      coords: p.coords\n                    });\n                  }\n                }]\n              }] : []\n            });\n          }\n        }) : /*#__PURE__*/_jsx(ContextMenuPlugin, {\n          data: alignedDataFrame,\n          config: config,\n          timeZone: timeZone,\n          replaceVariables: replaceVariables,\n          defaultItems: []\n        }), data.annotations && /*#__PURE__*/_jsx(ExemplarsPlugin, {\n          config: config,\n          exemplars: data.annotations,\n          timeZone: timeZone,\n          getFieldLinks: getFieldLinks\n        }), canEditThresholds && onThresholdsChange && /*#__PURE__*/_jsx(ThresholdControlsPlugin, {\n          config: config,\n          fieldConfig: fieldConfig,\n          onThresholdsChange: onThresholdsChange\n        }), /*#__PURE__*/_jsx(OutsideRangePlugin, {\n          config: config,\n          onChangeTimeRange: onChangeTimeRange\n        })]\n      });\n    }\n  });\n};","map":{"version":3,"names":["React","useMemo","getDisplayProcessor","PanelDataErrorView","TooltipDisplayMode","usePanelContext","TimeSeries","TooltipPlugin","ZoomPlugin","useTheme2","config","getFieldLinksForExplore","AnnotationEditorPlugin","AnnotationsPlugin","ContextMenuPlugin","ExemplarsPlugin","OutsideRangePlugin","ThresholdControlsPlugin","prepareCandlestickFields","defaultColors","VizDisplayMode","drawMarkers","CandlestickPanel","data","id","timeRange","timeZone","width","height","options","fieldConfig","onChangeTimeRange","replaceVariables","sync","canAddAnnotations","onThresholdsChange","canEditThresholds","onSplitOpen","getFieldLinks","field","rowIndex","splitOpenFn","range","theme","info","series","renderers","tweakScale","tweakAxis","opts","forField","doNothing","fieldMap","names","Object","keys","length","mode","candleStyle","colorStrategy","colors","open","high","low","close","volume","volumeAlpha","volumeIdx","shouldRenderVolume","Candles","volumeField","fillOpacity","custom","Volume","unit","display","theme2","name","filter","u","splits","_splits","max","i","push","space","ticks","min","shouldRenderPrice","fields","indicesOnly","key","hideFrom","legend","tooltip","viz","init","builder","fieldIndices","addHook","upColor","visualization","getColorByName","up","downColor","down","flatColor","flat","flatAsUp","structureRev","enableAnnotationCreation","Boolean","frame","alignedDataFrame","Multi","annotations","startAnnotating","items","label","ariaLabel","icon","onClick","e","p","coords"],"sources":["/home/soula/grafana/public/app/plugins/panel/candlestick/CandlestickPanel.tsx"],"sourcesContent":["// this file is pretty much a copy-paste of TimeSeriesPanel.tsx :(\n// with some extra renderers passed to the <TimeSeries> component\n\nimport React, { useMemo } from 'react';\nimport uPlot from 'uplot';\n\nimport { Field, getDisplayProcessor, PanelProps } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { TooltipDisplayMode } from '@grafana/schema';\nimport { usePanelContext, TimeSeries, TooltipPlugin, ZoomPlugin, UPlotConfigBuilder, useTheme2 } from '@grafana/ui';\nimport { AxisProps } from '@grafana/ui/src/components/uPlot/config/UPlotAxisBuilder';\nimport { ScaleProps } from '@grafana/ui/src/components/uPlot/config/UPlotScaleBuilder';\nimport { config } from 'app/core/config';\nimport { getFieldLinksForExplore } from 'app/features/explore/utils/links';\n\nimport { AnnotationEditorPlugin } from '../timeseries/plugins/AnnotationEditorPlugin';\nimport { AnnotationsPlugin } from '../timeseries/plugins/AnnotationsPlugin';\nimport { ContextMenuPlugin } from '../timeseries/plugins/ContextMenuPlugin';\nimport { ExemplarsPlugin } from '../timeseries/plugins/ExemplarsPlugin';\nimport { OutsideRangePlugin } from '../timeseries/plugins/OutsideRangePlugin';\nimport { ThresholdControlsPlugin } from '../timeseries/plugins/ThresholdControlsPlugin';\n\nimport { prepareCandlestickFields } from './fields';\nimport { defaultColors, CandlestickOptions, VizDisplayMode } from './models.gen';\nimport { drawMarkers, FieldIndices } from './utils';\n\ninterface CandlestickPanelProps extends PanelProps<CandlestickOptions> {}\n\nexport const CandlestickPanel: React.FC<CandlestickPanelProps> = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  onChangeTimeRange,\n  replaceVariables,\n}) => {\n  const { sync, canAddAnnotations, onThresholdsChange, canEditThresholds, onSplitOpen } = usePanelContext();\n\n  const getFieldLinks = (field: Field, rowIndex: number) => {\n    return getFieldLinksForExplore({ field, rowIndex, splitOpenFn: onSplitOpen, range: timeRange });\n  };\n\n  const theme = useTheme2();\n\n  const info = useMemo(() => {\n    return prepareCandlestickFields(data?.series, options, theme, timeRange);\n  }, [data, options, theme, timeRange]);\n\n  const { renderers, tweakScale, tweakAxis } = useMemo(() => {\n    let tweakScale = (opts: ScaleProps, forField: Field) => opts;\n    let tweakAxis = (opts: AxisProps, forField: Field) => opts;\n\n    let doNothing = {\n      renderers: [],\n      tweakScale,\n      tweakAxis,\n    };\n\n    if (!info) {\n      return doNothing;\n    }\n\n    // Un-encoding the already parsed special fields\n    // This takes currently matched fields and saves the name so they can be looked up by name later\n    // ¯\\_(ツ)_/¯  someday this can make more sense!\n    const fieldMap = info.names;\n\n    if (!Object.keys(fieldMap).length) {\n      return doNothing;\n    }\n\n    const { mode, candleStyle, colorStrategy } = options;\n    const colors = { ...defaultColors, ...options.colors };\n    let { open, high, low, close, volume } = fieldMap; // names from matched fields\n\n    if (open == null || close == null) {\n      return doNothing;\n    }\n\n    let volumeAlpha = 0.5;\n\n    let volumeIdx = -1;\n\n    let shouldRenderVolume = false;\n\n    // find volume field and set overrides\n    if (volume != null && mode !== VizDisplayMode.Candles) {\n      let volumeField = info.volume!;\n\n      if (volumeField != null) {\n        shouldRenderVolume = true;\n\n        let { fillOpacity } = volumeField.config.custom;\n\n        if (fillOpacity) {\n          volumeAlpha = fillOpacity / 100;\n        }\n\n        // we only want to put volume on own shorter axis when rendered with price\n        if (mode !== VizDisplayMode.Volume) {\n          volumeField.config = { ...volumeField.config };\n          volumeField.config.unit = 'short';\n          volumeField.display = getDisplayProcessor({\n            field: volumeField,\n            theme: config.theme2,\n          });\n\n          tweakAxis = (opts: AxisProps, forField: Field) => {\n            // we can't do forField === info.volume because of copies :(\n            if (forField.name === info.volume?.name) {\n              let filter = (u: uPlot, splits: number[]) => {\n                let _splits = [];\n                let max = u.series[volumeIdx].max as number;\n\n                for (let i = 0; i < splits.length; i++) {\n                  _splits.push(splits[i]);\n\n                  if (splits[i] > max) {\n                    break;\n                  }\n                }\n\n                return _splits;\n              };\n\n              opts.space = 20; // reduce tick spacing\n              opts.filter = filter; // hide tick labels\n              opts.ticks = { ...opts.ticks, filter }; // hide tick marks\n            }\n\n            return opts;\n          };\n\n          tweakScale = (opts: ScaleProps, forField: Field) => {\n            // we can't do forField === info.volume because of copies :(\n            if (forField.name === info.volume?.name) {\n              opts.range = (u: uPlot, min: number, max: number) => [0, max * 7];\n            }\n\n            return opts;\n          };\n        }\n      }\n    }\n\n    let shouldRenderPrice = mode !== VizDisplayMode.Volume && high != null && low != null;\n\n    if (!shouldRenderPrice && !shouldRenderVolume) {\n      return doNothing;\n    }\n\n    let fields: Record<string, string> = {};\n    let indicesOnly = [];\n\n    if (shouldRenderPrice) {\n      fields = { open, high: high!, low: low!, close };\n\n      // hide series from legend that are rendered as composite markers\n      for (let key in fields) {\n        let field = (info as any)[key] as Field;\n        field.config = {\n          ...field.config,\n          custom: {\n            ...field.config.custom,\n            hideFrom: { legend: true, tooltip: false, viz: false },\n          },\n        };\n      }\n    } else {\n      // these fields should not be omitted from normal rendering if they arent rendered\n      // as part of price markers. they're only here so we can get back their indicies in the\n      // init callback below. TODO: remove this when field mapping happens in the panel instead of deep\n      indicesOnly.push(open, close);\n    }\n\n    if (shouldRenderVolume) {\n      fields.volume = volume!;\n      fields.open = open;\n      fields.close = close;\n    }\n\n    return {\n      renderers: [\n        {\n          fieldMap: fields,\n          indicesOnly,\n          init: (builder: UPlotConfigBuilder, fieldIndices: FieldIndices) => {\n            volumeIdx = fieldIndices.volume!;\n\n            builder.addHook(\n              'drawAxes',\n              drawMarkers({\n                mode,\n                fields: fieldIndices,\n                upColor: config.theme2.visualization.getColorByName(colors.up),\n                downColor: config.theme2.visualization.getColorByName(colors.down),\n                flatColor: config.theme2.visualization.getColorByName(colors.flat),\n                volumeAlpha,\n                colorStrategy,\n                candleStyle,\n                flatAsUp: true,\n              })\n            );\n          },\n        },\n      ],\n      tweakScale,\n      tweakAxis,\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, data.structureRev]);\n\n  if (!info) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsTimeField={true}\n        needsNumberField={true}\n      />\n    );\n  }\n\n  const enableAnnotationCreation = Boolean(canAddAnnotations && canAddAnnotations());\n\n  return (\n    <TimeSeries\n      frames={[info.frame]}\n      structureRev={data.structureRev}\n      timeRange={timeRange}\n      timeZone={timeZone}\n      width={width}\n      height={height}\n      legend={options.legend}\n      renderers={renderers}\n      tweakAxis={tweakAxis}\n      tweakScale={tweakScale}\n      options={options}\n    >\n      {(config, alignedDataFrame) => {\n        return (\n          <>\n            <ZoomPlugin config={config} onZoom={onChangeTimeRange} />\n            <TooltipPlugin\n              data={alignedDataFrame}\n              config={config}\n              mode={TooltipDisplayMode.Multi}\n              sync={sync}\n              timeZone={timeZone}\n            />\n            {/* Renders annotation markers*/}\n            {data.annotations && (\n              <AnnotationsPlugin annotations={data.annotations} config={config} timeZone={timeZone} />\n            )}\n            {/* Enables annotations creation*/}\n            {enableAnnotationCreation ? (\n              <AnnotationEditorPlugin data={alignedDataFrame} timeZone={timeZone} config={config}>\n                {({ startAnnotating }) => {\n                  return (\n                    <ContextMenuPlugin\n                      data={alignedDataFrame}\n                      config={config}\n                      timeZone={timeZone}\n                      replaceVariables={replaceVariables}\n                      defaultItems={\n                        enableAnnotationCreation\n                          ? [\n                              {\n                                items: [\n                                  {\n                                    label: 'Add annotation',\n                                    ariaLabel: 'Add annotation',\n                                    icon: 'comment-alt',\n                                    onClick: (e, p) => {\n                                      if (!p) {\n                                        return;\n                                      }\n                                      startAnnotating({ coords: p.coords });\n                                    },\n                                  },\n                                ],\n                              },\n                            ]\n                          : []\n                      }\n                    />\n                  );\n                }}\n              </AnnotationEditorPlugin>\n            ) : (\n              <ContextMenuPlugin\n                data={alignedDataFrame}\n                config={config}\n                timeZone={timeZone}\n                replaceVariables={replaceVariables}\n                defaultItems={[]}\n              />\n            )}\n            {data.annotations && (\n              <ExemplarsPlugin\n                config={config}\n                exemplars={data.annotations}\n                timeZone={timeZone}\n                getFieldLinks={getFieldLinks}\n              />\n            )}\n\n            {canEditThresholds && onThresholdsChange && (\n              <ThresholdControlsPlugin\n                config={config}\n                fieldConfig={fieldConfig}\n                onThresholdsChange={onThresholdsChange}\n              />\n            )}\n\n            <OutsideRangePlugin config={config} onChangeTimeRange={onChangeTimeRange} />\n          </>\n        );\n      }}\n    </TimeSeries>\n  );\n};\n"],"mappings":"AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAGA,SAAgBC,mBAAhB,QAAuD,eAAvD;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,eAAT,EAA0BC,UAA1B,EAAsCC,aAAtC,EAAqDC,UAArD,EAAqFC,SAArF,QAAsG,aAAtG;AAGA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,uBAAT,QAAwC,kCAAxC;AAEA,SAASC,sBAAT,QAAuC,8CAAvC;AACA,SAASC,iBAAT,QAAkC,yCAAlC;AACA,SAASC,iBAAT,QAAkC,yCAAlC;AACA,SAASC,eAAT,QAAgC,uCAAhC;AACA,SAASC,kBAAT,QAAmC,0CAAnC;AACA,SAASC,uBAAT,QAAwC,+CAAxC;AAEA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,aAAT,EAA4CC,cAA5C,QAAkE,cAAlE;AACA,SAASC,WAAT,QAA0C,SAA1C;;;;AAIA,OAAO,MAAMC,gBAAiD,GAAG,CAAC;EAChEC,IADgE;EAEhEC,EAFgE;EAGhEC,SAHgE;EAIhEC,QAJgE;EAKhEC,KALgE;EAMhEC,MANgE;EAOhEC,OAPgE;EAQhEC,WARgE;EAShEC,iBATgE;EAUhEC;AAVgE,CAAD,KAW3D;EACJ,MAAM;IAAEC,IAAF;IAAQC,iBAAR;IAA2BC,kBAA3B;IAA+CC,iBAA/C;IAAkEC;EAAlE,IAAkFhC,eAAe,EAAvG;;EAEA,MAAMiC,aAAa,GAAG,CAACC,KAAD,EAAeC,QAAf,KAAoC;IACxD,OAAO7B,uBAAuB,CAAC;MAAE4B,KAAF;MAASC,QAAT;MAAmBC,WAAW,EAAEJ,WAAhC;MAA6CK,KAAK,EAAEjB;IAApD,CAAD,CAA9B;EACD,CAFD;;EAIA,MAAMkB,KAAK,GAAGlC,SAAS,EAAvB;EAEA,MAAMmC,IAAI,GAAG3C,OAAO,CAAC,MAAM;IACzB,OAAOiB,wBAAwB,CAACK,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEsB,MAAP,EAAehB,OAAf,EAAwBc,KAAxB,EAA+BlB,SAA/B,CAA/B;EACD,CAFmB,EAEjB,CAACF,IAAD,EAAOM,OAAP,EAAgBc,KAAhB,EAAuBlB,SAAvB,CAFiB,CAApB;EAIA,MAAM;IAAEqB,SAAF;IAAaC,UAAb;IAAyBC;EAAzB,IAAuC/C,OAAO,CAAC,MAAM;IACzD,IAAI8C,UAAU,GAAG,CAACE,IAAD,EAAmBC,QAAnB,KAAuCD,IAAxD;;IACA,IAAID,SAAS,GAAG,CAACC,IAAD,EAAkBC,QAAlB,KAAsCD,IAAtD;;IAEA,IAAIE,SAAS,GAAG;MACdL,SAAS,EAAE,EADG;MAEdC,UAFc;MAGdC;IAHc,CAAhB;;IAMA,IAAI,CAACJ,IAAL,EAAW;MACT,OAAOO,SAAP;IACD,CAZwD,CAczD;IACA;IACA;;;IACA,MAAMC,QAAQ,GAAGR,IAAI,CAACS,KAAtB;;IAEA,IAAI,CAACC,MAAM,CAACC,IAAP,CAAYH,QAAZ,EAAsBI,MAA3B,EAAmC;MACjC,OAAOL,SAAP;IACD;;IAED,MAAM;MAAEM,IAAF;MAAQC,WAAR;MAAqBC;IAArB,IAAuC9B,OAA7C;IACA,MAAM+B,MAAM,qBAAQzC,aAAR,EAA0BU,OAAO,CAAC+B,MAAlC,CAAZ;IACA,IAAI;MAAEC,IAAF;MAAQC,IAAR;MAAcC,GAAd;MAAmBC,KAAnB;MAA0BC;IAA1B,IAAqCb,QAAzC,CAzByD,CAyBN;;IAEnD,IAAIS,IAAI,IAAI,IAAR,IAAgBG,KAAK,IAAI,IAA7B,EAAmC;MACjC,OAAOb,SAAP;IACD;;IAED,IAAIe,WAAW,GAAG,GAAlB;IAEA,IAAIC,SAAS,GAAG,CAAC,CAAjB;IAEA,IAAIC,kBAAkB,GAAG,KAAzB,CAnCyD,CAqCzD;;IACA,IAAIH,MAAM,IAAI,IAAV,IAAkBR,IAAI,KAAKrC,cAAc,CAACiD,OAA9C,EAAuD;MACrD,IAAIC,WAAW,GAAG1B,IAAI,CAACqB,MAAvB;;MAEA,IAAIK,WAAW,IAAI,IAAnB,EAAyB;QACvBF,kBAAkB,GAAG,IAArB;QAEA,IAAI;UAAEG;QAAF,IAAkBD,WAAW,CAAC5D,MAAZ,CAAmB8D,MAAzC;;QAEA,IAAID,WAAJ,EAAiB;UACfL,WAAW,GAAGK,WAAW,GAAG,GAA5B;QACD,CAPsB,CASvB;;;QACA,IAAId,IAAI,KAAKrC,cAAc,CAACqD,MAA5B,EAAoC;UAClCH,WAAW,CAAC5D,MAAZ,qBAA0B4D,WAAW,CAAC5D,MAAtC;UACA4D,WAAW,CAAC5D,MAAZ,CAAmBgE,IAAnB,GAA0B,OAA1B;UACAJ,WAAW,CAACK,OAAZ,GAAsBzE,mBAAmB,CAAC;YACxCqC,KAAK,EAAE+B,WADiC;YAExC3B,KAAK,EAAEjC,MAAM,CAACkE;UAF0B,CAAD,CAAzC;;UAKA5B,SAAS,GAAG,CAACC,IAAD,EAAkBC,QAAlB,KAAsC;YAAA;;YAChD;YACA,IAAIA,QAAQ,CAAC2B,IAAT,sBAAkBjC,IAAI,CAACqB,MAAvB,iDAAkB,aAAaY,IAA/B,CAAJ,EAAyC;cACvC,IAAIC,MAAM,GAAG,CAACC,CAAD,EAAWC,MAAX,KAAgC;gBAC3C,IAAIC,OAAO,GAAG,EAAd;gBACA,IAAIC,GAAG,GAAGH,CAAC,CAAClC,MAAF,CAASsB,SAAT,EAAoBe,GAA9B;;gBAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACxB,MAA3B,EAAmC2B,CAAC,EAApC,EAAwC;kBACtCF,OAAO,CAACG,IAAR,CAAaJ,MAAM,CAACG,CAAD,CAAnB;;kBAEA,IAAIH,MAAM,CAACG,CAAD,CAAN,GAAYD,GAAhB,EAAqB;oBACnB;kBACD;gBACF;;gBAED,OAAOD,OAAP;cACD,CAbD;;cAeAhC,IAAI,CAACoC,KAAL,GAAa,EAAb,CAhBuC,CAgBtB;;cACjBpC,IAAI,CAAC6B,MAAL,GAAcA,MAAd,CAjBuC,CAiBjB;;cACtB7B,IAAI,CAACqC,KAAL,qBAAkBrC,IAAI,CAACqC,KAAvB;gBAA8BR;cAA9B,GAlBuC,CAkBC;YACzC;;YAED,OAAO7B,IAAP;UACD,CAxBD;;UA0BAF,UAAU,GAAG,CAACE,IAAD,EAAmBC,QAAnB,KAAuC;YAAA;;YAClD;YACA,IAAIA,QAAQ,CAAC2B,IAAT,uBAAkBjC,IAAI,CAACqB,MAAvB,kDAAkB,cAAaY,IAA/B,CAAJ,EAAyC;cACvC5B,IAAI,CAACP,KAAL,GAAa,CAACqC,CAAD,EAAWQ,GAAX,EAAwBL,GAAxB,KAAwC,CAAC,CAAD,EAAIA,GAAG,GAAG,CAAV,CAArD;YACD;;YAED,OAAOjC,IAAP;UACD,CAPD;QAQD;MACF;IACF;;IAED,IAAIuC,iBAAiB,GAAG/B,IAAI,KAAKrC,cAAc,CAACqD,MAAxB,IAAkCX,IAAI,IAAI,IAA1C,IAAkDC,GAAG,IAAI,IAAjF;;IAEA,IAAI,CAACyB,iBAAD,IAAsB,CAACpB,kBAA3B,EAA+C;MAC7C,OAAOjB,SAAP;IACD;;IAED,IAAIsC,MAA8B,GAAG,EAArC;IACA,IAAIC,WAAW,GAAG,EAAlB;;IAEA,IAAIF,iBAAJ,EAAuB;MACrBC,MAAM,GAAG;QAAE5B,IAAF;QAAQC,IAAI,EAAEA,IAAd;QAAqBC,GAAG,EAAEA,GAA1B;QAAgCC;MAAhC,CAAT,CADqB,CAGrB;;MACA,KAAK,IAAI2B,GAAT,IAAgBF,MAAhB,EAAwB;QACtB,IAAIlD,KAAK,GAAIK,IAAD,CAAc+C,GAAd,CAAZ;QACApD,KAAK,CAAC7B,MAAN,qBACK6B,KAAK,CAAC7B,MADX;UAEE8D,MAAM,oBACDjC,KAAK,CAAC7B,MAAN,CAAa8D,MADZ;YAEJoB,QAAQ,EAAE;cAAEC,MAAM,EAAE,IAAV;cAAgBC,OAAO,EAAE,KAAzB;cAAgCC,GAAG,EAAE;YAArC;UAFN;QAFR;MAOD;IACF,CAdD,MAcO;MACL;MACA;MACA;MACAL,WAAW,CAACN,IAAZ,CAAiBvB,IAAjB,EAAuBG,KAAvB;IACD;;IAED,IAAII,kBAAJ,EAAwB;MACtBqB,MAAM,CAACxB,MAAP,GAAgBA,MAAhB;MACAwB,MAAM,CAAC5B,IAAP,GAAcA,IAAd;MACA4B,MAAM,CAACzB,KAAP,GAAeA,KAAf;IACD;;IAED,OAAO;MACLlB,SAAS,EAAE,CACT;QACEM,QAAQ,EAAEqC,MADZ;QAEEC,WAFF;QAGEM,IAAI,EAAE,CAACC,OAAD,EAA8BC,YAA9B,KAA6D;UACjE/B,SAAS,GAAG+B,YAAY,CAACjC,MAAzB;UAEAgC,OAAO,CAACE,OAAR,CACE,UADF,EAEE9E,WAAW,CAAC;YACVoC,IADU;YAEVgC,MAAM,EAAES,YAFE;YAGVE,OAAO,EAAE1F,MAAM,CAACkE,MAAP,CAAcyB,aAAd,CAA4BC,cAA5B,CAA2C1C,MAAM,CAAC2C,EAAlD,CAHC;YAIVC,SAAS,EAAE9F,MAAM,CAACkE,MAAP,CAAcyB,aAAd,CAA4BC,cAA5B,CAA2C1C,MAAM,CAAC6C,IAAlD,CAJD;YAKVC,SAAS,EAAEhG,MAAM,CAACkE,MAAP,CAAcyB,aAAd,CAA4BC,cAA5B,CAA2C1C,MAAM,CAAC+C,IAAlD,CALD;YAMVzC,WANU;YAOVP,aAPU;YAQVD,WARU;YASVkD,QAAQ,EAAE;UATA,CAAD,CAFb;QAcD;MApBH,CADS,CADN;MAyBL7D,UAzBK;MA0BLC;IA1BK,CAAP,CArIyD,CAiKzD;EACD,CAlKmD,EAkKjD,CAACnB,OAAD,EAAUN,IAAI,CAACsF,YAAf,CAlKiD,CAApD;;EAoKA,IAAI,CAACjE,IAAL,EAAW;IACT,oBACE,KAAC,kBAAD;MACE,OAAO,EAAEpB,EADX;MAEE,WAAW,EAAEM,WAFf;MAGE,IAAI,EAAEP,IAHR;MAIE,cAAc,EAAE,IAJlB;MAKE,gBAAgB,EAAE;IALpB,EADF;EASD;;EAED,MAAMuF,wBAAwB,GAAGC,OAAO,CAAC7E,iBAAiB,IAAIA,iBAAiB,EAAvC,CAAxC;EAEA,oBACE,KAAC,UAAD;IACE,MAAM,EAAE,CAACU,IAAI,CAACoE,KAAN,CADV;IAEE,YAAY,EAAEzF,IAAI,CAACsF,YAFrB;IAGE,SAAS,EAAEpF,SAHb;IAIE,QAAQ,EAAEC,QAJZ;IAKE,KAAK,EAAEC,KALT;IAME,MAAM,EAAEC,MANV;IAOE,MAAM,EAAEC,OAAO,CAACgE,MAPlB;IAQE,SAAS,EAAE/C,SARb;IASE,SAAS,EAAEE,SATb;IAUE,UAAU,EAAED,UAVd;IAWE,OAAO,EAAElB,OAXX;IAAA,UAaG,CAACnB,MAAD,EAASuG,gBAAT,KAA8B;MAC7B,oBACE;QAAA,wBACE,KAAC,UAAD;UAAY,MAAM,EAAEvG,MAApB;UAA4B,MAAM,EAAEqB;QAApC,EADF,eAEE,KAAC,aAAD;UACE,IAAI,EAAEkF,gBADR;UAEE,MAAM,EAAEvG,MAFV;UAGE,IAAI,EAAEN,kBAAkB,CAAC8G,KAH3B;UAIE,IAAI,EAAEjF,IAJR;UAKE,QAAQ,EAAEP;QALZ,EAFF,EAUGH,IAAI,CAAC4F,WAAL,iBACC,KAAC,iBAAD;UAAmB,WAAW,EAAE5F,IAAI,CAAC4F,WAArC;UAAkD,MAAM,EAAEzG,MAA1D;UAAkE,QAAQ,EAAEgB;QAA5E,EAXJ,EAcGoF,wBAAwB,gBACvB,KAAC,sBAAD;UAAwB,IAAI,EAAEG,gBAA9B;UAAgD,QAAQ,EAAEvF,QAA1D;UAAoE,MAAM,EAAEhB,MAA5E;UAAA,UACG,CAAC;YAAE0G;UAAF,CAAD,KAAyB;YACxB,oBACE,KAAC,iBAAD;cACE,IAAI,EAAEH,gBADR;cAEE,MAAM,EAAEvG,MAFV;cAGE,QAAQ,EAAEgB,QAHZ;cAIE,gBAAgB,EAAEM,gBAJpB;cAKE,YAAY,EACV8E,wBAAwB,GACpB,CACE;gBACEO,KAAK,EAAE,CACL;kBACEC,KAAK,EAAE,gBADT;kBAEEC,SAAS,EAAE,gBAFb;kBAGEC,IAAI,EAAE,aAHR;kBAIEC,OAAO,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU;oBACjB,IAAI,CAACA,CAAL,EAAQ;sBACN;oBACD;;oBACDP,eAAe,CAAC;sBAAEQ,MAAM,EAAED,CAAC,CAACC;oBAAZ,CAAD,CAAf;kBACD;gBATH,CADK;cADT,CADF,CADoB,GAkBpB;YAxBR,EADF;UA6BD;QA/BH,EADuB,gBAmCvB,KAAC,iBAAD;UACE,IAAI,EAAEX,gBADR;UAEE,MAAM,EAAEvG,MAFV;UAGE,QAAQ,EAAEgB,QAHZ;UAIE,gBAAgB,EAAEM,gBAJpB;UAKE,YAAY,EAAE;QALhB,EAjDJ,EAyDGT,IAAI,CAAC4F,WAAL,iBACC,KAAC,eAAD;UACE,MAAM,EAAEzG,MADV;UAEE,SAAS,EAAEa,IAAI,CAAC4F,WAFlB;UAGE,QAAQ,EAAEzF,QAHZ;UAIE,aAAa,EAAEY;QAJjB,EA1DJ,EAkEGF,iBAAiB,IAAID,kBAArB,iBACC,KAAC,uBAAD;UACE,MAAM,EAAEzB,MADV;UAEE,WAAW,EAAEoB,WAFf;UAGE,kBAAkB,EAAEK;QAHtB,EAnEJ,eA0EE,KAAC,kBAAD;UAAoB,MAAM,EAAEzB,MAA5B;UAAoC,iBAAiB,EAAEqB;QAAvD,EA1EF;MAAA,EADF;IA8ED;EA5FH,EADF;AAgGD,CA1SM"},"metadata":{},"sourceType":"module"}