{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { importDashboard, removeDashboard } from '../dashboard/state/actions';\nimport { loadPluginDashboards } from '../plugins/admin/state/actions';\nimport DashboardTable from './DashboardsTable';\nimport { loadDataSource } from './state/actions';\nimport { getDataSource } from './state/selectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction mapStateToProps(state, props) {\n  const dataSourceId = props.match.params.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `datasource-dashboards-${dataSourceId}`),\n    dashboards: state.plugins.dashboards,\n    dataSource: getDataSource(state.dataSources, dataSourceId),\n    isLoading: state.plugins.isLoadingPluginDashboards,\n    dataSourceId\n  };\n}\n\nconst mapDispatchToProps = {\n  importDashboard,\n  loadDataSource,\n  loadPluginDashboards,\n  removeDashboard\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport class DataSourceDashboards extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onImport\", (dashboard, overwrite) => {\n      const {\n        dataSource,\n        importDashboard\n      } = this.props;\n      const data = {\n        pluginId: dashboard.pluginId,\n        path: dashboard.path,\n        overwrite,\n        inputs: []\n      };\n\n      if (dataSource) {\n        data.inputs.push({\n          name: '*',\n          type: 'datasource',\n          pluginId: dataSource.type,\n          value: dataSource.name\n        });\n      }\n\n      importDashboard(data, dashboard.title);\n    });\n\n    _defineProperty(this, \"onRemove\", dashboard => {\n      this.props.removeDashboard(dashboard.uid);\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      loadDataSource,\n      dataSourceId\n    } = this.props;\n    await loadDataSource(dataSourceId);\n    this.props.loadPluginDashboards();\n  }\n\n  render() {\n    const {\n      dashboards,\n      navModel,\n      isLoading\n    } = this.props;\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: navModel,\n      children: /*#__PURE__*/_jsx(Page.Contents, {\n        isLoading: isLoading,\n        children: /*#__PURE__*/_jsx(DashboardTable, {\n          dashboards: dashboards,\n          onImport: (dashboard, overwrite) => this.onImport(dashboard, overwrite),\n          onRemove: dashboard => this.onRemove(dashboard)\n        })\n      })\n    });\n  }\n\n}\nexport default connector(DataSourceDashboards);","map":{"version":3,"names":["React","PureComponent","connect","Page","getNavModel","importDashboard","removeDashboard","loadPluginDashboards","DashboardTable","loadDataSource","getDataSource","mapStateToProps","state","props","dataSourceId","match","params","uid","navModel","navIndex","dashboards","plugins","dataSource","dataSources","isLoading","isLoadingPluginDashboards","mapDispatchToProps","connector","DataSourceDashboards","dashboard","overwrite","data","pluginId","path","inputs","push","name","type","value","title","componentDidMount","render","onImport","onRemove"],"sources":["/home/soula/grafana/public/app/features/datasources/DataSourceDashboards.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport Page from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PluginDashboard, StoreState } from 'app/types';\n\nimport { importDashboard, removeDashboard } from '../dashboard/state/actions';\nimport { loadPluginDashboards } from '../plugins/admin/state/actions';\n\nimport DashboardTable from './DashboardsTable';\nimport { loadDataSource } from './state/actions';\nimport { getDataSource } from './state/selectors';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const dataSourceId = props.match.params.uid;\n\n  return {\n    navModel: getNavModel(state.navIndex, `datasource-dashboards-${dataSourceId}`),\n    dashboards: state.plugins.dashboards,\n    dataSource: getDataSource(state.dataSources, dataSourceId),\n    isLoading: state.plugins.isLoadingPluginDashboards,\n    dataSourceId,\n  };\n}\n\nconst mapDispatchToProps = {\n  importDashboard,\n  loadDataSource,\n  loadPluginDashboards,\n  removeDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DataSourceDashboards extends PureComponent<Props> {\n  async componentDidMount() {\n    const { loadDataSource, dataSourceId } = this.props;\n    await loadDataSource(dataSourceId);\n    this.props.loadPluginDashboards();\n  }\n\n  onImport = (dashboard: PluginDashboard, overwrite: boolean) => {\n    const { dataSource, importDashboard } = this.props;\n    const data: any = {\n      pluginId: dashboard.pluginId,\n      path: dashboard.path,\n      overwrite,\n      inputs: [],\n    };\n\n    if (dataSource) {\n      data.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: dataSource.type,\n        value: dataSource.name,\n      });\n    }\n\n    importDashboard(data, dashboard.title);\n  };\n\n  onRemove = (dashboard: PluginDashboard) => {\n    this.props.removeDashboard(dashboard.uid);\n  };\n\n  render() {\n    const { dashboards, navModel, isLoading } = this.props;\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <DashboardTable\n            dashboards={dashboards}\n            onImport={(dashboard, overwrite) => this.onImport(dashboard, overwrite)}\n            onRemove={(dashboard) => this.onRemove(dashboard)}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(DataSourceDashboards);\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwC,aAAxC;AAEA,OAAOC,IAAP,MAAiB,+BAAjB;AAEA,SAASC,WAAT,QAA4B,6BAA5B;AAGA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,4BAAjD;AACA,SAASC,oBAAT,QAAqC,gCAArC;AAEA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,aAAT,QAA8B,mBAA9B;;;AAIA,SAASC,eAAT,CAAyBC,KAAzB,EAA4CC,KAA5C,EAA6D;EAC3D,MAAMC,YAAY,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,GAAxC;EAEA,OAAO;IACLC,QAAQ,EAAEd,WAAW,CAACQ,KAAK,CAACO,QAAP,EAAkB,yBAAwBL,YAAa,EAAvD,CADhB;IAELM,UAAU,EAAER,KAAK,CAACS,OAAN,CAAcD,UAFrB;IAGLE,UAAU,EAAEZ,aAAa,CAACE,KAAK,CAACW,WAAP,EAAoBT,YAApB,CAHpB;IAILU,SAAS,EAAEZ,KAAK,CAACS,OAAN,CAAcI,yBAJpB;IAKLX;EALK,CAAP;AAOD;;AAED,MAAMY,kBAAkB,GAAG;EACzBrB,eADyB;EAEzBI,cAFyB;EAGzBF,oBAHyB;EAIzBD;AAJyB,CAA3B;AAOA,MAAMqB,SAAS,GAAGzB,OAAO,CAACS,eAAD,EAAkBe,kBAAlB,CAAzB;AAIA,OAAO,MAAME,oBAAN,SAAmC3B,aAAnC,CAAwD;EAAA;IAAA;;IAAA,kCAOlD,CAAC4B,SAAD,EAA6BC,SAA7B,KAAoD;MAC7D,MAAM;QAAER,UAAF;QAAcjB;MAAd,IAAkC,KAAKQ,KAA7C;MACA,MAAMkB,IAAS,GAAG;QAChBC,QAAQ,EAAEH,SAAS,CAACG,QADJ;QAEhBC,IAAI,EAAEJ,SAAS,CAACI,IAFA;QAGhBH,SAHgB;QAIhBI,MAAM,EAAE;MAJQ,CAAlB;;MAOA,IAAIZ,UAAJ,EAAgB;QACdS,IAAI,CAACG,MAAL,CAAYC,IAAZ,CAAiB;UACfC,IAAI,EAAE,GADS;UAEfC,IAAI,EAAE,YAFS;UAGfL,QAAQ,EAAEV,UAAU,CAACe,IAHN;UAIfC,KAAK,EAAEhB,UAAU,CAACc;QAJH,CAAjB;MAMD;;MAED/B,eAAe,CAAC0B,IAAD,EAAOF,SAAS,CAACU,KAAjB,CAAf;IACD,CA1B4D;;IAAA,kCA4BjDV,SAAD,IAAgC;MACzC,KAAKhB,KAAL,CAAWP,eAAX,CAA2BuB,SAAS,CAACZ,GAArC;IACD,CA9B4D;EAAA;;EACtC,MAAjBuB,iBAAiB,GAAG;IACxB,MAAM;MAAE/B,cAAF;MAAkBK;IAAlB,IAAmC,KAAKD,KAA9C;IACA,MAAMJ,cAAc,CAACK,YAAD,CAApB;IACA,KAAKD,KAAL,CAAWN,oBAAX;EACD;;EA2BDkC,MAAM,GAAG;IACP,MAAM;MAAErB,UAAF;MAAcF,QAAd;MAAwBM;IAAxB,IAAsC,KAAKX,KAAjD;IACA,oBACE,KAAC,IAAD;MAAM,QAAQ,EAAEK,QAAhB;MAAA,uBACE,KAAC,IAAD,CAAM,QAAN;QAAe,SAAS,EAAEM,SAA1B;QAAA,uBACE,KAAC,cAAD;UACE,UAAU,EAAEJ,UADd;UAEE,QAAQ,EAAE,CAACS,SAAD,EAAYC,SAAZ,KAA0B,KAAKY,QAAL,CAAcb,SAAd,EAAyBC,SAAzB,CAFtC;UAGE,QAAQ,EAAGD,SAAD,IAAe,KAAKc,QAAL,CAAcd,SAAd;QAH3B;MADF;IADF,EADF;EAWD;;AA7C4D;AAgD/D,eAAeF,SAAS,CAACC,oBAAD,CAAxB"},"metadata":{},"sourceType":"module"}