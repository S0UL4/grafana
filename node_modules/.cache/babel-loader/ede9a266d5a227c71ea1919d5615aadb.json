{"ast":null,"code":"import { omitBy, pickBy, isNil, isNumber, isString } from 'lodash';\nimport { FieldColorModeId, FieldConfigProperty, FieldMatcherID, fieldReducers, FieldType, NullValueMode, ThresholdsMode } from '@grafana/data';\nimport { LegendDisplayMode, TooltipDisplayMode, AxisPlacement, GraphDrawStyle, GraphGradientMode, GraphTresholdsStyleMode, LineInterpolation, VisibilityMode, ScaleDistribution, StackingMode, SortOrder, GraphTransform } from '@grafana/schema';\nimport { defaultGraphConfig } from './config';\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const graphPanelChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  // Changing from angular/flot panel to react/uPlot\n  if (prevPluginId === 'graph' && prevOptions.angular) {\n    const {\n      fieldConfig,\n      options\n    } = flotToGraphOptions(Object.assign({}, prevOptions.angular, {\n      fieldConfig: prevFieldConfig\n    }));\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n\n    panel.alert = prevOptions.angular.alert;\n    return options;\n  } //fixes graph -> viz renaming in custom.hideFrom field config by mutation.\n\n\n  migrateHideFrom(panel);\n  return {};\n};\nexport function flotToGraphOptions(angular) {\n  var _angular$fieldConfig$, _angular$fieldConfig, _angular$yaxes, _angular$fieldConfig2, _angular$dashLength, _angular$spaceLength, _angular$seriesOverri, _y1$custom;\n\n  const overrides = (_angular$fieldConfig$ = (_angular$fieldConfig = angular.fieldConfig) === null || _angular$fieldConfig === void 0 ? void 0 : _angular$fieldConfig.overrides) !== null && _angular$fieldConfig$ !== void 0 ? _angular$fieldConfig$ : [];\n  const yaxes = (_angular$yaxes = angular.yaxes) !== null && _angular$yaxes !== void 0 ? _angular$yaxes : [];\n  let y1 = getFieldConfigFromOldAxis(yaxes[0]);\n\n  if ((_angular$fieldConfig2 = angular.fieldConfig) !== null && _angular$fieldConfig2 !== void 0 && _angular$fieldConfig2.defaults) {\n    var _angular$fieldConfig3;\n\n    y1 = Object.assign({}, (_angular$fieldConfig3 = angular.fieldConfig) === null || _angular$fieldConfig3 === void 0 ? void 0 : _angular$fieldConfig3.defaults, y1);\n  } // Dashes\n\n\n  const dash = {\n    fill: angular.dashes ? 'dash' : 'solid',\n    dash: [(_angular$dashLength = angular.dashLength) !== null && _angular$dashLength !== void 0 ? _angular$dashLength : 10, (_angular$spaceLength = angular.spaceLength) !== null && _angular$spaceLength !== void 0 ? _angular$spaceLength : 10]\n  }; // \"seriesOverrides\": [\n  //   {\n  //     \"$$hashKey\": \"object:183\",\n  //     \"alias\": \"B-series\",\n  //     \"fill\": 3,\n  //     \"nullPointMode\": \"null as zero\",\n  //     \"lines\": true,\n  //     \"linewidth\": 2\n  //   }\n  // ],\n\n  if (angular.aliasColors) {\n    for (const alias of Object.keys(angular.aliasColors)) {\n      const color = angular.aliasColors[alias];\n\n      if (color) {\n        overrides.push({\n          matcher: {\n            id: FieldMatcherID.byName,\n            options: alias\n          },\n          properties: [{\n            id: FieldConfigProperty.Color,\n            value: {\n              mode: FieldColorModeId.Fixed,\n              fixedColor: color\n            }\n          }]\n        });\n      }\n    }\n  }\n\n  let hasFillBelowTo = false;\n\n  if ((_angular$seriesOverri = angular.seriesOverrides) !== null && _angular$seriesOverri !== void 0 && _angular$seriesOverri.length) {\n    for (const seriesOverride of angular.seriesOverrides) {\n      if (!seriesOverride.alias) {\n        continue; // the matcher config\n      }\n\n      const aliasIsRegex = /^([/~@;%#'])(.*?)\\1([gimsuy]*)$/.test(seriesOverride.alias);\n      const rule = {\n        matcher: {\n          id: aliasIsRegex ? FieldMatcherID.byRegexp : FieldMatcherID.byName,\n          options: seriesOverride.alias\n        },\n        properties: []\n      };\n      let dashOverride = undefined;\n\n      for (const p of Object.keys(seriesOverride)) {\n        const v = seriesOverride[p];\n\n        switch (p) {\n          // Ignore\n          case 'alias':\n          case '$$hashKey':\n            break;\n          // Link to y axis settings\n\n          case 'yaxis':\n            if (2 === v) {\n              const y2 = getFieldConfigFromOldAxis(yaxes[1]);\n              fillY2DynamicValues(y1, y2, rule.properties);\n            }\n\n            break;\n\n          case 'fill':\n            rule.properties.push({\n              id: 'custom.fillOpacity',\n              value: v * 10 // was 0-10, new graph is 0 - 100\n\n            });\n            break;\n\n          case 'fillBelowTo':\n            hasFillBelowTo = true;\n            rule.properties.push({\n              id: 'custom.fillBelowTo',\n              value: v\n            });\n            break;\n\n          case 'fillGradient':\n            if (v) {\n              rule.properties.push({\n                id: 'custom.fillGradient',\n                value: 'opacity' // was 0-10\n\n              });\n              rule.properties.push({\n                id: 'custom.fillOpacity',\n                value: v * 10 // was 0-10, new graph is 0 - 100\n\n              });\n            }\n\n            break;\n\n          case 'points':\n            rule.properties.push({\n              id: 'custom.showPoints',\n              value: v ? VisibilityMode.Always : VisibilityMode.Never\n            });\n            break;\n\n          case 'bars':\n            if (v) {\n              rule.properties.push({\n                id: 'custom.drawStyle',\n                value: GraphDrawStyle.Bars\n              });\n              rule.properties.push({\n                id: 'custom.fillOpacity',\n                value: 100 // solid bars\n\n              });\n            } else {\n              rule.properties.push({\n                id: 'custom.drawStyle',\n                value: GraphDrawStyle.Line // Change from bars\n\n              });\n            }\n\n            break;\n\n          case 'lines':\n            rule.properties.push({\n              id: 'custom.lineWidth',\n              value: 0 // don't show lines\n\n            });\n            break;\n\n          case 'linewidth':\n            rule.properties.push({\n              id: 'custom.lineWidth',\n              value: v\n            });\n            break;\n\n          case 'pointradius':\n            rule.properties.push({\n              id: 'custom.pointSize',\n              value: 2 + v * 2\n            });\n            break;\n\n          case 'dashLength':\n          case 'spaceLength':\n          case 'dashes':\n            if (!dashOverride) {\n              dashOverride = {\n                fill: dash.fill,\n                dash: [...dash.dash]\n              };\n            }\n\n            switch (p) {\n              case 'dashLength':\n                dashOverride.dash[0] = v;\n                break;\n\n              case 'spaceLength':\n                dashOverride.dash[1] = v;\n                break;\n\n              case 'dashes':\n                dashOverride.fill = v ? 'dash' : 'solid';\n                break;\n            }\n\n            break;\n\n          case 'stack':\n            rule.properties.push({\n              id: 'custom.stacking',\n              value: {\n                mode: StackingMode.Normal,\n                group: v\n              }\n            });\n            break;\n\n          case 'color':\n            rule.properties.push({\n              id: 'color',\n              value: {\n                fixedColor: v,\n                mode: FieldColorModeId.Fixed\n              }\n            });\n            break;\n\n          case 'transform':\n            rule.properties.push({\n              id: 'custom.transform',\n              value: v === 'negative-Y' ? GraphTransform.NegativeY : GraphTransform.Constant\n            });\n            break;\n\n          default:\n            console.log('Ignore override migration:', seriesOverride.alias, p, v);\n        }\n      }\n\n      if (dashOverride) {\n        rule.properties.push({\n          id: 'custom.lineStyle',\n          value: dashOverride\n        });\n      }\n\n      if (rule.properties.length) {\n        overrides.push(rule);\n      }\n    }\n  }\n\n  const graph = (_y1$custom = y1.custom) !== null && _y1$custom !== void 0 ? _y1$custom : {};\n  graph.drawStyle = angular.bars ? GraphDrawStyle.Bars : angular.lines ? GraphDrawStyle.Line : GraphDrawStyle.Points;\n\n  if (angular.points) {\n    graph.showPoints = VisibilityMode.Always;\n\n    if (isNumber(angular.pointradius)) {\n      graph.pointSize = 2 + angular.pointradius * 2;\n    }\n  } else if (graph.drawStyle !== GraphDrawStyle.Points) {\n    graph.showPoints = VisibilityMode.Never;\n  }\n\n  graph.lineWidth = angular.linewidth;\n\n  if (dash.fill !== 'solid') {\n    graph.lineStyle = dash;\n  }\n\n  if (hasFillBelowTo) {\n    graph.fillOpacity = 35; // bands are hardcoded in flot\n  } else if (isNumber(angular.fill)) {\n    graph.fillOpacity = angular.fill * 10; // fill was 0 - 10, new is 0 to 100\n  }\n\n  if (isNumber(angular.fillGradient) && angular.fillGradient > 0) {\n    graph.gradientMode = GraphGradientMode.Opacity;\n    graph.fillOpacity = angular.fillGradient * 10; // fill is 0-10\n  }\n\n  graph.spanNulls = angular.nullPointMode === NullValueMode.Ignore;\n\n  if (angular.steppedLine) {\n    graph.lineInterpolation = LineInterpolation.StepAfter;\n  }\n\n  if (graph.drawStyle === GraphDrawStyle.Bars) {\n    graph.fillOpacity = 100; // bars were always\n  }\n\n  if (angular.stack) {\n    graph.stacking = {\n      mode: StackingMode.Normal,\n      group: defaultGraphConfig.stacking.group\n    };\n  }\n\n  y1.custom = omitBy(graph, isNil);\n  y1.nullValueMode = angular.nullPointMode;\n  const options = {\n    legend: {\n      displayMode: LegendDisplayMode.List,\n      placement: 'bottom',\n      calcs: []\n    },\n    tooltip: {\n      mode: TooltipDisplayMode.Single,\n      sort: SortOrder.None\n    }\n  }; // Legend config migration\n\n  const legendConfig = angular.legend;\n\n  if (legendConfig) {\n    if (legendConfig.show) {\n      options.legend.displayMode = legendConfig.alignAsTable ? LegendDisplayMode.Table : LegendDisplayMode.List;\n    } else {\n      options.legend.displayMode = LegendDisplayMode.Hidden;\n    }\n\n    if (legendConfig.rightSide) {\n      options.legend.placement = 'right';\n    }\n\n    if (angular.legend.values) {\n      const enabledLegendValues = pickBy(angular.legend);\n      options.legend.calcs = getReducersFromLegend(enabledLegendValues);\n    }\n\n    if (angular.legend.sideWidth) {\n      options.legend.width = angular.legend.sideWidth;\n    }\n  }\n\n  const tooltipConfig = angular.tooltip;\n\n  if (tooltipConfig) {\n    if (tooltipConfig.shared !== undefined) {\n      options.tooltip.mode = tooltipConfig.shared ? TooltipDisplayMode.Multi : TooltipDisplayMode.Single;\n    }\n\n    if (tooltipConfig.sort !== undefined && tooltipConfig.shared) {\n      switch (tooltipConfig.sort) {\n        case 1:\n          options.tooltip.sort = SortOrder.Ascending;\n          break;\n\n        case 2:\n          options.tooltip.sort = SortOrder.Descending;\n          break;\n\n        default:\n          options.tooltip.sort = SortOrder.None;\n      }\n    }\n  }\n\n  if (angular.thresholds && angular.thresholds.length > 0) {\n    let steps = [];\n    let area = false;\n    let line = false;\n    const sorted = angular.thresholds.sort((a, b) => a.value > b.value ? 1 : -1);\n\n    for (let idx = 0; idx < sorted.length; idx++) {\n      const threshold = sorted[idx];\n      const next = sorted.length > idx + 1 ? sorted[idx + 1] : null;\n\n      if (threshold.fill) {\n        area = true;\n      }\n\n      if (threshold.line) {\n        line = true;\n      }\n\n      if (threshold.op === 'gt') {\n        steps.push({\n          value: threshold.value,\n          color: getThresholdColor(threshold)\n        });\n      }\n\n      if (threshold.op === 'lt') {\n        if (steps.length === 0) {\n          steps.push({\n            value: -Infinity,\n            color: getThresholdColor(threshold)\n          });\n        } // next op is gt and there is a gap set color to transparent\n\n\n        if (next && next.op === 'gt' && next.value > threshold.value) {\n          steps.push({\n            value: threshold.value,\n            color: 'transparent'\n          }); // if next is a lt we need to use it's color\n        } else if (next && next.op === 'lt') {\n          steps.push({\n            value: threshold.value,\n            color: getThresholdColor(next)\n          });\n        } else {\n          steps.push({\n            value: threshold.value,\n            color: 'transparent'\n          });\n        }\n      }\n    } // if now less then threshold add an -Infinity base that is transparent\n\n\n    if (steps.length > 0 && steps[0].value !== -Infinity) {\n      steps.unshift({\n        color: 'transparent',\n        value: -Infinity\n      });\n    }\n\n    let displayMode = area ? GraphTresholdsStyleMode.Area : GraphTresholdsStyleMode.Line;\n\n    if (line && area) {\n      displayMode = GraphTresholdsStyleMode.LineAndArea;\n    } // TODO move into standard ThresholdConfig ?\n\n\n    y1.custom.thresholdsStyle = {\n      mode: displayMode\n    };\n    y1.thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps\n    };\n  }\n\n  if (angular.xaxis && angular.xaxis.show === false && angular.xaxis.mode === 'time') {\n    overrides.push({\n      matcher: {\n        id: FieldMatcherID.byType,\n        options: FieldType.time\n      },\n      properties: [{\n        id: 'custom.axisPlacement',\n        value: AxisPlacement.Hidden\n      }]\n    });\n  }\n\n  return {\n    fieldConfig: {\n      defaults: omitBy(y1, isNil),\n      overrides\n    },\n    options\n  };\n}\n\nfunction getThresholdColor(threshold) {\n  if (threshold.colorMode === 'critical') {\n    return 'red';\n  }\n\n  if (threshold.colorMode === 'warning') {\n    return 'orange';\n  }\n\n  if (threshold.colorMode === 'custom') {\n    return threshold.fillColor || threshold.lineColor;\n  }\n\n  return 'red';\n}\n\n// {\n//   \"label\": \"Y111\",\n//   \"show\": true,\n//   \"logBase\": 10,\n//   \"min\": \"0\",\n//   \"max\": \"1000\",\n//   \"format\": \"areaMI2\",\n//   \"$$hashKey\": \"object:19\",\n//   \"decimals\": 3\n// },\nfunction getFieldConfigFromOldAxis(obj) {\n  if (!obj) {\n    return {};\n  }\n\n  const graph = {\n    axisPlacement: obj.show ? AxisPlacement.Auto : AxisPlacement.Hidden\n  };\n\n  if (obj.label) {\n    graph.axisLabel = obj.label;\n  }\n\n  if (obj.logBase) {\n    const log = obj.logBase;\n\n    if (log === 2 || log === 10) {\n      graph.scaleDistribution = {\n        type: ScaleDistribution.Log,\n        log\n      };\n    }\n  }\n\n  return omitBy({\n    unit: obj.format,\n    decimals: validNumber(obj.decimals),\n    min: validNumber(obj.min),\n    max: validNumber(obj.max),\n    custom: graph\n  }, isNil);\n}\n\nfunction fillY2DynamicValues(y1, y2, props) {\n  var _y1$custom2, _y2$custom;\n\n  // The standard properties\n  for (const key of Object.keys(y2)) {\n    const value = y2[key];\n\n    if (key !== 'custom' && value !== y1[key]) {\n      props.push({\n        id: key,\n        value\n      });\n    }\n  } // Add any custom property\n\n\n  const y1G = (_y1$custom2 = y1.custom) !== null && _y1$custom2 !== void 0 ? _y1$custom2 : {};\n  const y2G = (_y2$custom = y2.custom) !== null && _y2$custom !== void 0 ? _y2$custom : {};\n\n  for (const key of Object.keys(y2G)) {\n    const value = y2G[key];\n\n    if (value !== y1G[key]) {\n      props.push({\n        id: `custom.${key}`,\n        value\n      });\n    }\n  }\n}\n\nfunction validNumber(val) {\n  if (isNumber(val)) {\n    return val;\n  }\n\n  if (isString(val)) {\n    const num = Number(val);\n\n    if (!isNaN(num)) {\n      return num;\n    }\n  }\n\n  return undefined;\n}\n\nfunction getReducersFromLegend(obj) {\n  const ids = [];\n\n  for (const key of Object.keys(obj)) {\n    const r = fieldReducers.getIfExists(key);\n\n    if (r) {\n      ids.push(r.id);\n    }\n  }\n\n  return ids;\n}\n\nfunction migrateHideFrom(panel) {\n  var _panel$fieldConfig, _panel$fieldConfig$de, _panel$fieldConfig$de2, _panel$fieldConfig$de3, _panel$fieldConfig2;\n\n  if (((_panel$fieldConfig = panel.fieldConfig) === null || _panel$fieldConfig === void 0 ? void 0 : (_panel$fieldConfig$de = _panel$fieldConfig.defaults) === null || _panel$fieldConfig$de === void 0 ? void 0 : (_panel$fieldConfig$de2 = _panel$fieldConfig$de.custom) === null || _panel$fieldConfig$de2 === void 0 ? void 0 : (_panel$fieldConfig$de3 = _panel$fieldConfig$de2.hideFrom) === null || _panel$fieldConfig$de3 === void 0 ? void 0 : _panel$fieldConfig$de3.graph) !== undefined) {\n    panel.fieldConfig.defaults.custom.hideFrom.viz = panel.fieldConfig.defaults.custom.hideFrom.graph;\n    delete panel.fieldConfig.defaults.custom.hideFrom.graph;\n  }\n\n  if ((_panel$fieldConfig2 = panel.fieldConfig) !== null && _panel$fieldConfig2 !== void 0 && _panel$fieldConfig2.overrides) {\n    panel.fieldConfig.overrides = panel.fieldConfig.overrides.map(fr => {\n      fr.properties = fr.properties.map(p => {\n        if (p.id === 'custom.hideFrom' && p.value.graph) {\n          p.value.viz = p.value.graph;\n          delete p.value.graph;\n        }\n\n        return p;\n      });\n      return fr;\n    });\n  }\n}","map":{"version":3,"names":["omitBy","pickBy","isNil","isNumber","isString","FieldColorModeId","FieldConfigProperty","FieldMatcherID","fieldReducers","FieldType","NullValueMode","ThresholdsMode","LegendDisplayMode","TooltipDisplayMode","AxisPlacement","GraphDrawStyle","GraphGradientMode","GraphTresholdsStyleMode","LineInterpolation","VisibilityMode","ScaleDistribution","StackingMode","SortOrder","GraphTransform","defaultGraphConfig","graphPanelChangedHandler","panel","prevPluginId","prevOptions","prevFieldConfig","angular","fieldConfig","options","flotToGraphOptions","alert","migrateHideFrom","overrides","yaxes","y1","getFieldConfigFromOldAxis","defaults","dash","fill","dashes","dashLength","spaceLength","aliasColors","alias","Object","keys","color","push","matcher","id","byName","properties","Color","value","mode","Fixed","fixedColor","hasFillBelowTo","seriesOverrides","length","seriesOverride","aliasIsRegex","test","rule","byRegexp","dashOverride","undefined","p","v","y2","fillY2DynamicValues","Always","Never","Bars","Line","Normal","group","NegativeY","Constant","console","log","graph","custom","drawStyle","bars","lines","Points","points","showPoints","pointradius","pointSize","lineWidth","linewidth","lineStyle","fillOpacity","fillGradient","gradientMode","Opacity","spanNulls","nullPointMode","Ignore","steppedLine","lineInterpolation","StepAfter","stack","stacking","nullValueMode","legend","displayMode","List","placement","calcs","tooltip","Single","sort","None","legendConfig","show","alignAsTable","Table","Hidden","rightSide","values","enabledLegendValues","getReducersFromLegend","sideWidth","width","tooltipConfig","shared","Multi","Ascending","Descending","thresholds","steps","area","line","sorted","a","b","idx","threshold","next","op","getThresholdColor","Infinity","unshift","Area","LineAndArea","thresholdsStyle","Absolute","xaxis","byType","time","colorMode","fillColor","lineColor","obj","axisPlacement","Auto","label","axisLabel","logBase","scaleDistribution","type","Log","unit","format","decimals","validNumber","min","max","props","key","y1G","y2G","val","num","Number","isNaN","ids","r","getIfExists","hideFrom","viz","map","fr"],"sources":["/home/soula/grafana/public/app/plugins/panel/timeseries/migrations.ts"],"sourcesContent":["import { omitBy, pickBy, isNil, isNumber, isString } from 'lodash';\n\nimport {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldColorModeId,\n  FieldConfig,\n  FieldConfigProperty,\n  FieldConfigSource,\n  FieldMatcherID,\n  fieldReducers,\n  FieldType,\n  NullValueMode,\n  PanelTypeChangedHandler,\n  Threshold,\n  ThresholdsMode,\n} from '@grafana/data';\nimport {\n  LegendDisplayMode,\n  TooltipDisplayMode,\n  AxisPlacement,\n  GraphDrawStyle,\n  GraphFieldConfig,\n  GraphGradientMode,\n  GraphTresholdsStyleMode,\n  LineInterpolation,\n  LineStyle,\n  VisibilityMode,\n  ScaleDistribution,\n  StackingMode,\n  SortOrder,\n  GraphTransform,\n} from '@grafana/schema';\n\nimport { defaultGraphConfig } from './config';\nimport { TimeSeriesOptions } from './types';\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const graphPanelChangedHandler: PanelTypeChangedHandler = (\n  panel,\n  prevPluginId,\n  prevOptions,\n  prevFieldConfig\n) => {\n  // Changing from angular/flot panel to react/uPlot\n  if (prevPluginId === 'graph' && prevOptions.angular) {\n    const { fieldConfig, options } = flotToGraphOptions({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    panel.alert = prevOptions.angular.alert;\n    return options;\n  }\n\n  //fixes graph -> viz renaming in custom.hideFrom field config by mutation.\n  migrateHideFrom(panel);\n\n  return {};\n};\n\nexport function flotToGraphOptions(angular: any): { fieldConfig: FieldConfigSource; options: TimeSeriesOptions } {\n  const overrides: ConfigOverrideRule[] = angular.fieldConfig?.overrides ?? [];\n  const yaxes = angular.yaxes ?? [];\n  let y1 = getFieldConfigFromOldAxis(yaxes[0]);\n  if (angular.fieldConfig?.defaults) {\n    y1 = {\n      ...angular.fieldConfig?.defaults,\n      ...y1, // Keep the y-axis unit and custom\n    };\n  }\n\n  // Dashes\n  const dash: LineStyle = {\n    fill: angular.dashes ? 'dash' : 'solid',\n    dash: [angular.dashLength ?? 10, angular.spaceLength ?? 10],\n  };\n\n  // \"seriesOverrides\": [\n  //   {\n  //     \"$$hashKey\": \"object:183\",\n  //     \"alias\": \"B-series\",\n  //     \"fill\": 3,\n  //     \"nullPointMode\": \"null as zero\",\n  //     \"lines\": true,\n  //     \"linewidth\": 2\n  //   }\n  // ],\n\n  if (angular.aliasColors) {\n    for (const alias of Object.keys(angular.aliasColors)) {\n      const color = angular.aliasColors[alias];\n      if (color) {\n        overrides.push({\n          matcher: {\n            id: FieldMatcherID.byName,\n            options: alias,\n          },\n          properties: [\n            {\n              id: FieldConfigProperty.Color,\n              value: {\n                mode: FieldColorModeId.Fixed,\n                fixedColor: color,\n              },\n            },\n          ],\n        });\n      }\n    }\n  }\n\n  let hasFillBelowTo = false;\n\n  if (angular.seriesOverrides?.length) {\n    for (const seriesOverride of angular.seriesOverrides) {\n      if (!seriesOverride.alias) {\n        continue; // the matcher config\n      }\n      const aliasIsRegex = /^([/~@;%#'])(.*?)\\1([gimsuy]*)$/.test(seriesOverride.alias);\n      const rule: ConfigOverrideRule = {\n        matcher: {\n          id: aliasIsRegex ? FieldMatcherID.byRegexp : FieldMatcherID.byName,\n          options: seriesOverride.alias,\n        },\n        properties: [],\n      };\n      let dashOverride: LineStyle | undefined = undefined;\n\n      for (const p of Object.keys(seriesOverride)) {\n        const v = seriesOverride[p];\n        switch (p) {\n          // Ignore\n          case 'alias':\n          case '$$hashKey':\n            break;\n          // Link to y axis settings\n          case 'yaxis':\n            if (2 === v) {\n              const y2 = getFieldConfigFromOldAxis(yaxes[1]);\n              fillY2DynamicValues(y1, y2, rule.properties);\n            }\n            break;\n          case 'fill':\n            rule.properties.push({\n              id: 'custom.fillOpacity',\n              value: v * 10, // was 0-10, new graph is 0 - 100\n            });\n            break;\n          case 'fillBelowTo':\n            hasFillBelowTo = true;\n            rule.properties.push({\n              id: 'custom.fillBelowTo',\n              value: v,\n            });\n            break;\n          case 'fillGradient':\n            if (v) {\n              rule.properties.push({\n                id: 'custom.fillGradient',\n                value: 'opacity', // was 0-10\n              });\n              rule.properties.push({\n                id: 'custom.fillOpacity',\n                value: v * 10, // was 0-10, new graph is 0 - 100\n              });\n            }\n            break;\n          case 'points':\n            rule.properties.push({\n              id: 'custom.showPoints',\n              value: v ? VisibilityMode.Always : VisibilityMode.Never,\n            });\n            break;\n          case 'bars':\n            if (v) {\n              rule.properties.push({\n                id: 'custom.drawStyle',\n                value: GraphDrawStyle.Bars,\n              });\n              rule.properties.push({\n                id: 'custom.fillOpacity',\n                value: 100, // solid bars\n              });\n            } else {\n              rule.properties.push({\n                id: 'custom.drawStyle',\n                value: GraphDrawStyle.Line, // Change from bars\n              });\n            }\n            break;\n          case 'lines':\n            rule.properties.push({\n              id: 'custom.lineWidth',\n              value: 0, // don't show lines\n            });\n            break;\n          case 'linewidth':\n            rule.properties.push({\n              id: 'custom.lineWidth',\n              value: v,\n            });\n            break;\n          case 'pointradius':\n            rule.properties.push({\n              id: 'custom.pointSize',\n              value: 2 + v * 2,\n            });\n            break;\n          case 'dashLength':\n          case 'spaceLength':\n          case 'dashes':\n            if (!dashOverride) {\n              dashOverride = {\n                fill: dash.fill,\n                dash: [...dash.dash!],\n              };\n            }\n            switch (p) {\n              case 'dashLength':\n                dashOverride.dash![0] = v;\n                break;\n              case 'spaceLength':\n                dashOverride.dash![1] = v;\n                break;\n              case 'dashes':\n                dashOverride.fill = v ? 'dash' : 'solid';\n                break;\n            }\n            break;\n          case 'stack':\n            rule.properties.push({\n              id: 'custom.stacking',\n              value: { mode: StackingMode.Normal, group: v },\n            });\n            break;\n          case 'color':\n            rule.properties.push({\n              id: 'color',\n              value: {\n                fixedColor: v,\n                mode: FieldColorModeId.Fixed,\n              },\n            });\n            break;\n          case 'transform':\n            rule.properties.push({\n              id: 'custom.transform',\n              value: v === 'negative-Y' ? GraphTransform.NegativeY : GraphTransform.Constant,\n            });\n            break;\n          default:\n            console.log('Ignore override migration:', seriesOverride.alias, p, v);\n        }\n      }\n      if (dashOverride) {\n        rule.properties.push({\n          id: 'custom.lineStyle',\n          value: dashOverride,\n        });\n      }\n      if (rule.properties.length) {\n        overrides.push(rule);\n      }\n    }\n  }\n\n  const graph = y1.custom ?? ({} as GraphFieldConfig);\n  graph.drawStyle = angular.bars ? GraphDrawStyle.Bars : angular.lines ? GraphDrawStyle.Line : GraphDrawStyle.Points;\n\n  if (angular.points) {\n    graph.showPoints = VisibilityMode.Always;\n\n    if (isNumber(angular.pointradius)) {\n      graph.pointSize = 2 + angular.pointradius * 2;\n    }\n  } else if (graph.drawStyle !== GraphDrawStyle.Points) {\n    graph.showPoints = VisibilityMode.Never;\n  }\n\n  graph.lineWidth = angular.linewidth;\n  if (dash.fill !== 'solid') {\n    graph.lineStyle = dash;\n  }\n\n  if (hasFillBelowTo) {\n    graph.fillOpacity = 35; // bands are hardcoded in flot\n  } else if (isNumber(angular.fill)) {\n    graph.fillOpacity = angular.fill * 10; // fill was 0 - 10, new is 0 to 100\n  }\n\n  if (isNumber(angular.fillGradient) && angular.fillGradient > 0) {\n    graph.gradientMode = GraphGradientMode.Opacity;\n    graph.fillOpacity = angular.fillGradient * 10; // fill is 0-10\n  }\n\n  graph.spanNulls = angular.nullPointMode === NullValueMode.Ignore;\n\n  if (angular.steppedLine) {\n    graph.lineInterpolation = LineInterpolation.StepAfter;\n  }\n\n  if (graph.drawStyle === GraphDrawStyle.Bars) {\n    graph.fillOpacity = 100; // bars were always\n  }\n\n  if (angular.stack) {\n    graph.stacking = {\n      mode: StackingMode.Normal,\n      group: defaultGraphConfig.stacking!.group,\n    };\n  }\n\n  y1.custom = omitBy(graph, isNil);\n  y1.nullValueMode = angular.nullPointMode as NullValueMode;\n\n  const options: TimeSeriesOptions = {\n    legend: {\n      displayMode: LegendDisplayMode.List,\n      placement: 'bottom',\n      calcs: [],\n    },\n    tooltip: {\n      mode: TooltipDisplayMode.Single,\n      sort: SortOrder.None,\n    },\n  };\n\n  // Legend config migration\n  const legendConfig = angular.legend;\n  if (legendConfig) {\n    if (legendConfig.show) {\n      options.legend.displayMode = legendConfig.alignAsTable ? LegendDisplayMode.Table : LegendDisplayMode.List;\n    } else {\n      options.legend.displayMode = LegendDisplayMode.Hidden;\n    }\n\n    if (legendConfig.rightSide) {\n      options.legend.placement = 'right';\n    }\n\n    if (angular.legend.values) {\n      const enabledLegendValues = pickBy(angular.legend);\n      options.legend.calcs = getReducersFromLegend(enabledLegendValues);\n    }\n\n    if (angular.legend.sideWidth) {\n      options.legend.width = angular.legend.sideWidth;\n    }\n  }\n\n  const tooltipConfig = angular.tooltip;\n  if (tooltipConfig) {\n    if (tooltipConfig.shared !== undefined) {\n      options.tooltip.mode = tooltipConfig.shared ? TooltipDisplayMode.Multi : TooltipDisplayMode.Single;\n    }\n\n    if (tooltipConfig.sort !== undefined && tooltipConfig.shared) {\n      switch (tooltipConfig.sort) {\n        case 1:\n          options.tooltip.sort = SortOrder.Ascending;\n          break;\n        case 2:\n          options.tooltip.sort = SortOrder.Descending;\n          break;\n        default:\n          options.tooltip.sort = SortOrder.None;\n      }\n    }\n  }\n\n  if (angular.thresholds && angular.thresholds.length > 0) {\n    let steps: Threshold[] = [];\n    let area = false;\n    let line = false;\n\n    const sorted = (angular.thresholds as AngularThreshold[]).sort((a, b) => (a.value > b.value ? 1 : -1));\n\n    for (let idx = 0; idx < sorted.length; idx++) {\n      const threshold = sorted[idx];\n      const next = sorted.length > idx + 1 ? sorted[idx + 1] : null;\n\n      if (threshold.fill) {\n        area = true;\n      }\n\n      if (threshold.line) {\n        line = true;\n      }\n\n      if (threshold.op === 'gt') {\n        steps.push({\n          value: threshold.value,\n          color: getThresholdColor(threshold),\n        });\n      }\n\n      if (threshold.op === 'lt') {\n        if (steps.length === 0) {\n          steps.push({\n            value: -Infinity,\n            color: getThresholdColor(threshold),\n          });\n        }\n\n        // next op is gt and there is a gap set color to transparent\n        if (next && next.op === 'gt' && next.value > threshold.value) {\n          steps.push({\n            value: threshold.value,\n            color: 'transparent',\n          });\n          // if next is a lt we need to use it's color\n        } else if (next && next.op === 'lt') {\n          steps.push({\n            value: threshold.value,\n            color: getThresholdColor(next),\n          });\n        } else {\n          steps.push({\n            value: threshold.value,\n            color: 'transparent',\n          });\n        }\n      }\n    }\n\n    // if now less then threshold add an -Infinity base that is transparent\n    if (steps.length > 0 && steps[0].value !== -Infinity) {\n      steps.unshift({\n        color: 'transparent',\n        value: -Infinity,\n      });\n    }\n\n    let displayMode = area ? GraphTresholdsStyleMode.Area : GraphTresholdsStyleMode.Line;\n    if (line && area) {\n      displayMode = GraphTresholdsStyleMode.LineAndArea;\n    }\n\n    // TODO move into standard ThresholdConfig ?\n    y1.custom.thresholdsStyle = { mode: displayMode };\n\n    y1.thresholds = {\n      mode: ThresholdsMode.Absolute,\n      steps,\n    };\n  }\n\n  if (angular.xaxis && angular.xaxis.show === false && angular.xaxis.mode === 'time') {\n    overrides.push({\n      matcher: {\n        id: FieldMatcherID.byType,\n        options: FieldType.time,\n      },\n      properties: [\n        {\n          id: 'custom.axisPlacement',\n          value: AxisPlacement.Hidden,\n        },\n      ],\n    });\n  }\n  return {\n    fieldConfig: {\n      defaults: omitBy(y1, isNil),\n      overrides,\n    },\n    options,\n  };\n}\n\nfunction getThresholdColor(threshold: AngularThreshold): string {\n  if (threshold.colorMode === 'critical') {\n    return 'red';\n  }\n\n  if (threshold.colorMode === 'warning') {\n    return 'orange';\n  }\n\n  if (threshold.colorMode === 'custom') {\n    return threshold.fillColor || threshold.lineColor;\n  }\n\n  return 'red';\n}\n\ninterface AngularThreshold {\n  op: string;\n  fill: boolean;\n  line: boolean;\n  value: number;\n  colorMode: 'critical' | 'warning' | 'custom';\n  yaxis?: 'left' | 'right';\n  fillColor: string;\n  lineColor: string;\n}\n\n// {\n//   \"label\": \"Y111\",\n//   \"show\": true,\n//   \"logBase\": 10,\n//   \"min\": \"0\",\n//   \"max\": \"1000\",\n//   \"format\": \"areaMI2\",\n//   \"$$hashKey\": \"object:19\",\n//   \"decimals\": 3\n// },\nfunction getFieldConfigFromOldAxis(obj: any): FieldConfig<GraphFieldConfig> {\n  if (!obj) {\n    return {};\n  }\n  const graph: GraphFieldConfig = {\n    axisPlacement: obj.show ? AxisPlacement.Auto : AxisPlacement.Hidden,\n  };\n  if (obj.label) {\n    graph.axisLabel = obj.label;\n  }\n  if (obj.logBase) {\n    const log = obj.logBase as number;\n    if (log === 2 || log === 10) {\n      graph.scaleDistribution = {\n        type: ScaleDistribution.Log,\n        log,\n      };\n    }\n  }\n  return omitBy(\n    {\n      unit: obj.format,\n      decimals: validNumber(obj.decimals),\n      min: validNumber(obj.min),\n      max: validNumber(obj.max),\n      custom: graph,\n    },\n    isNil\n  );\n}\n\nfunction fillY2DynamicValues(\n  y1: FieldConfig<GraphFieldConfig>,\n  y2: FieldConfig<GraphFieldConfig>,\n  props: DynamicConfigValue[]\n) {\n  // The standard properties\n  for (const key of Object.keys(y2)) {\n    const value = (y2 as any)[key];\n    if (key !== 'custom' && value !== (y1 as any)[key]) {\n      props.push({\n        id: key,\n        value,\n      });\n    }\n  }\n\n  // Add any custom property\n  const y1G = y1.custom ?? {};\n  const y2G = y2.custom ?? {};\n  for (const key of Object.keys(y2G)) {\n    const value = (y2G as any)[key];\n    if (value !== (y1G as any)[key]) {\n      props.push({\n        id: `custom.${key}`,\n        value,\n      });\n    }\n  }\n}\n\nfunction validNumber(val: any): number | undefined {\n  if (isNumber(val)) {\n    return val;\n  }\n  if (isString(val)) {\n    const num = Number(val);\n    if (!isNaN(num)) {\n      return num;\n    }\n  }\n  return undefined;\n}\n\nfunction getReducersFromLegend(obj: Record<string, any>): string[] {\n  const ids: string[] = [];\n  for (const key of Object.keys(obj)) {\n    const r = fieldReducers.getIfExists(key);\n    if (r) {\n      ids.push(r.id);\n    }\n  }\n  return ids;\n}\n\nfunction migrateHideFrom(panel: {\n  fieldConfig?: { defaults?: { custom?: { hideFrom?: any } }; overrides: ConfigOverrideRule[] };\n}) {\n  if (panel.fieldConfig?.defaults?.custom?.hideFrom?.graph !== undefined) {\n    panel.fieldConfig.defaults.custom.hideFrom.viz = panel.fieldConfig.defaults.custom.hideFrom.graph;\n    delete panel.fieldConfig.defaults.custom.hideFrom.graph;\n  }\n  if (panel.fieldConfig?.overrides) {\n    panel.fieldConfig.overrides = panel.fieldConfig.overrides.map((fr) => {\n      fr.properties = fr.properties.map((p) => {\n        if (p.id === 'custom.hideFrom' && p.value.graph) {\n          p.value.viz = p.value.graph;\n          delete p.value.graph;\n        }\n        return p;\n      });\n      return fr;\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}