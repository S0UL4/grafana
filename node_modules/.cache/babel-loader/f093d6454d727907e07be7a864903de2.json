{"ast":null,"code":"import { useCallback, useEffect } from 'react';\nimport { useDebounce } from 'react-use';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { SearchSrv } from 'app/core/services/search_srv';\nimport { FETCH_RESULTS, FETCH_ITEMS, TOGGLE_SECTION, SEARCH_START, FETCH_ITEMS_START } from '../reducers/actionTypes';\nimport { hasId, getParsedQuery } from '../utils';\nconst searchSrv = new SearchSrv();\n/**\n * Base hook for search functionality.\n * Returns state and dispatch, among others, from 'reducer' param, so it can be\n * further extended.\n * @param query\n * @param reducer - return result of useReducer\n * @param params - custom params\n */\n\nexport const useSearch = (query, reducer, params = {}) => {\n  const {\n    queryParsing\n  } = params;\n  const [state, dispatch] = reducer;\n\n  const search = () => {\n    dispatch({\n      type: SEARCH_START\n    });\n    const parsedQuery = getParsedQuery(query, queryParsing);\n    searchSrv.search(parsedQuery).then(results => {\n      dispatch({\n        type: FETCH_RESULTS,\n        payload: results\n      });\n    });\n  }; // Set loading state before debounced search\n\n\n  useEffect(() => {\n    dispatch({\n      type: SEARCH_START\n    });\n  }, [query.tag, query.sort, query.starred, query.layout, dispatch]);\n  useDebounce(search, 300, [query, queryParsing]);\n  const onToggleSection = useCallback(section => {\n    if (hasId(section.title) && !section.items.length) {\n      dispatch({\n        type: FETCH_ITEMS_START,\n        payload: section.id\n      });\n      backendSrv.search({\n        folderIds: [section.id]\n      }).then(items => {\n        dispatch({\n          type: FETCH_ITEMS,\n          payload: {\n            section,\n            items\n          }\n        });\n        dispatch({\n          type: TOGGLE_SECTION,\n          payload: section\n        });\n      });\n    } else {\n      dispatch({\n        type: TOGGLE_SECTION,\n        payload: section\n      });\n    }\n  }, [dispatch]);\n  return {\n    state,\n    dispatch,\n    onToggleSection\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useDebounce","backendSrv","SearchSrv","FETCH_RESULTS","FETCH_ITEMS","TOGGLE_SECTION","SEARCH_START","FETCH_ITEMS_START","hasId","getParsedQuery","searchSrv","useSearch","query","reducer","params","queryParsing","state","dispatch","search","type","parsedQuery","then","results","payload","tag","sort","starred","layout","onToggleSection","section","title","items","length","id","folderIds"],"sources":["/home/soula/grafana/public/app/features/search/hooks/useSearch.ts"],"sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { SearchSrv } from 'app/core/services/search_srv';\n\nimport { FETCH_RESULTS, FETCH_ITEMS, TOGGLE_SECTION, SEARCH_START, FETCH_ITEMS_START } from '../reducers/actionTypes';\nimport { DashboardSection, UseSearch } from '../types';\nimport { hasId, getParsedQuery } from '../utils';\n\nconst searchSrv = new SearchSrv();\n\n/**\n * Base hook for search functionality.\n * Returns state and dispatch, among others, from 'reducer' param, so it can be\n * further extended.\n * @param query\n * @param reducer - return result of useReducer\n * @param params - custom params\n */\nexport const useSearch: UseSearch = (query, reducer, params = {}) => {\n  const { queryParsing } = params;\n  const [state, dispatch] = reducer;\n\n  const search = () => {\n    dispatch({ type: SEARCH_START });\n    const parsedQuery = getParsedQuery(query, queryParsing);\n    searchSrv.search(parsedQuery).then((results) => {\n      dispatch({ type: FETCH_RESULTS, payload: results });\n    });\n  };\n\n  // Set loading state before debounced search\n  useEffect(() => {\n    dispatch({ type: SEARCH_START });\n  }, [query.tag, query.sort, query.starred, query.layout, dispatch]);\n\n  useDebounce(search, 300, [query, queryParsing]);\n\n  const onToggleSection = useCallback(\n    (section: DashboardSection) => {\n      if (hasId(section.title) && !section.items.length) {\n        dispatch({ type: FETCH_ITEMS_START, payload: section.id });\n        backendSrv.search({ folderIds: [section.id] }).then((items) => {\n          dispatch({ type: FETCH_ITEMS, payload: { section, items } });\n          dispatch({ type: TOGGLE_SECTION, payload: section });\n        });\n      } else {\n        dispatch({ type: TOGGLE_SECTION, payload: section });\n      }\n    },\n    [dispatch]\n  );\n\n  return { state, dispatch, onToggleSection };\n};\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,WAAT,QAA4B,WAA5B;AAEA,SAASC,UAAT,QAA2B,+BAA3B;AACA,SAASC,SAAT,QAA0B,8BAA1B;AAEA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,cAArC,EAAqDC,YAArD,EAAmEC,iBAAnE,QAA4F,yBAA5F;AAEA,SAASC,KAAT,EAAgBC,cAAhB,QAAsC,UAAtC;AAEA,MAAMC,SAAS,GAAG,IAAIR,SAAJ,EAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMS,SAAoB,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAM,GAAG,EAA1B,KAAiC;EACnE,MAAM;IAAEC;EAAF,IAAmBD,MAAzB;EACA,MAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBJ,OAA1B;;EAEA,MAAMK,MAAM,GAAG,MAAM;IACnBD,QAAQ,CAAC;MAAEE,IAAI,EAAEb;IAAR,CAAD,CAAR;IACA,MAAMc,WAAW,GAAGX,cAAc,CAACG,KAAD,EAAQG,YAAR,CAAlC;IACAL,SAAS,CAACQ,MAAV,CAAiBE,WAAjB,EAA8BC,IAA9B,CAAoCC,OAAD,IAAa;MAC9CL,QAAQ,CAAC;QAAEE,IAAI,EAAEhB,aAAR;QAAuBoB,OAAO,EAAED;MAAhC,CAAD,CAAR;IACD,CAFD;EAGD,CAND,CAJmE,CAYnE;;;EACAvB,SAAS,CAAC,MAAM;IACdkB,QAAQ,CAAC;MAAEE,IAAI,EAAEb;IAAR,CAAD,CAAR;EACD,CAFQ,EAEN,CAACM,KAAK,CAACY,GAAP,EAAYZ,KAAK,CAACa,IAAlB,EAAwBb,KAAK,CAACc,OAA9B,EAAuCd,KAAK,CAACe,MAA7C,EAAqDV,QAArD,CAFM,CAAT;EAIAjB,WAAW,CAACkB,MAAD,EAAS,GAAT,EAAc,CAACN,KAAD,EAAQG,YAAR,CAAd,CAAX;EAEA,MAAMa,eAAe,GAAG9B,WAAW,CAChC+B,OAAD,IAA+B;IAC7B,IAAIrB,KAAK,CAACqB,OAAO,CAACC,KAAT,CAAL,IAAwB,CAACD,OAAO,CAACE,KAAR,CAAcC,MAA3C,EAAmD;MACjDf,QAAQ,CAAC;QAAEE,IAAI,EAAEZ,iBAAR;QAA2BgB,OAAO,EAAEM,OAAO,CAACI;MAA5C,CAAD,CAAR;MACAhC,UAAU,CAACiB,MAAX,CAAkB;QAAEgB,SAAS,EAAE,CAACL,OAAO,CAACI,EAAT;MAAb,CAAlB,EAA+CZ,IAA/C,CAAqDU,KAAD,IAAW;QAC7Dd,QAAQ,CAAC;UAAEE,IAAI,EAAEf,WAAR;UAAqBmB,OAAO,EAAE;YAAEM,OAAF;YAAWE;UAAX;QAA9B,CAAD,CAAR;QACAd,QAAQ,CAAC;UAAEE,IAAI,EAAEd,cAAR;UAAwBkB,OAAO,EAAEM;QAAjC,CAAD,CAAR;MACD,CAHD;IAID,CAND,MAMO;MACLZ,QAAQ,CAAC;QAAEE,IAAI,EAAEd,cAAR;QAAwBkB,OAAO,EAAEM;MAAjC,CAAD,CAAR;IACD;EACF,CAXgC,EAYjC,CAACZ,QAAD,CAZiC,CAAnC;EAeA,OAAO;IAAED,KAAF;IAASC,QAAT;IAAmBW;EAAnB,CAAP;AACD,CAnCM"},"metadata":{},"sourceType":"module"}