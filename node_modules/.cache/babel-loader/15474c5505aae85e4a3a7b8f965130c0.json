{"ast":null,"code":"import { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { ExpressionQueryType } from './types';\nexport const isExpressionQuery = dataQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (isExpressionReference(dataQuery.datasource)) {\n    return true;\n  }\n\n  const expression = dataQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};","map":{"version":3,"names":["isExpressionReference","ExpressionQueryType","isExpressionQuery","dataQuery","datasource","expression","type","Object","values","includes"],"sources":["/home/soula/grafana/public/app/features/expressions/guards.ts"],"sourcesContent":["import { DataQuery } from '@grafana/data';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\n\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (isExpressionReference(dataQuery.datasource)) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n"],"mappings":"AACA,SAASA,qBAAT,QAAsC,kDAAtC;AAEA,SAA0BC,mBAA1B,QAAqD,SAArD;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,SAAD,IAAyD;EACxF,IAAI,CAACA,SAAL,EAAgB;IACd,OAAO,KAAP;EACD;;EAED,IAAIH,qBAAqB,CAACG,SAAS,CAACC,UAAX,CAAzB,EAAiD;IAC/C,OAAO,IAAP;EACD;;EAED,MAAMC,UAAU,GAAGF,SAAnB;;EAEA,IAAI,OAAOE,UAAU,CAACC,IAAlB,KAA2B,QAA/B,EAAyC;IACvC,OAAO,KAAP;EACD;;EACD,OAAOC,MAAM,CAACC,MAAP,CAAcP,mBAAd,EAAmCQ,QAAnC,CAA4CJ,UAAU,CAACC,IAAvD,CAAP;AACD,CAfM"},"metadata":{},"sourceType":"module"}