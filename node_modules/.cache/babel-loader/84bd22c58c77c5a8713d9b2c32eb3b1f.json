{"ast":null,"code":"var _p;\n\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { emptyRoute } from '../../utils/amroutes';\nimport { Authorize } from '../Authorize';\nimport { AmRoutesTable } from './AmRoutesTable';\nimport { MuteTimingsTable } from './MuteTimingsTable';\nimport { getGridStyles } from './gridStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const AmRoutesExpandedRead = ({\n  onChange,\n  receivers,\n  routes,\n  readOnly = false,\n  alertManagerSourceName\n}) => {\n  const styles = useStyles2(getStyles);\n  const gridStyles = useStyles2(getGridStyles);\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}` : '-';\n  const repeatInterval = routes.repeatIntervalValue ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}` : '-';\n  const [subroutes, setSubroutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: gridStyles.container,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: gridStyles.titleCell,\n      children: \"Group wait\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: gridStyles.valueCell,\n      children: groupWait\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: gridStyles.titleCell,\n      children: \"Group interval\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: gridStyles.valueCell,\n      children: groupInterval\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: gridStyles.titleCell,\n      children: \"Repeat interval\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: gridStyles.valueCell,\n      children: repeatInterval\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: gridStyles.titleCell,\n      children: \"Nested policies\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: gridStyles.valueCell,\n      children: [!!subroutes.length ? /*#__PURE__*/_jsx(AmRoutesTable, {\n        isAddMode: isAddMode,\n        onCancelAdd: () => {\n          setIsAddMode(false);\n          setSubroutes(subroutes => {\n            const newSubroutes = [...subroutes];\n            newSubroutes.pop();\n            return newSubroutes;\n          });\n        },\n        onChange: newRoutes => {\n          onChange(Object.assign({}, routes, {\n            routes: newRoutes\n          }));\n\n          if (isAddMode) {\n            setIsAddMode(false);\n          }\n        },\n        receivers: receivers,\n        routes: subroutes,\n        alertManagerSourceName: alertManagerSourceName\n      }) : _p || (_p = /*#__PURE__*/_jsx(\"p\", {\n        children: \"No nested policies configured.\"\n      })), !isAddMode && !readOnly && /*#__PURE__*/_jsx(Authorize, {\n        actions: [permissions.create],\n        children: /*#__PURE__*/_jsx(Button, {\n          className: styles.addNestedRoutingBtn,\n          icon: \"plus\",\n          onClick: () => {\n            setSubroutes(subroutes => [...subroutes, emptyRoute]);\n            setIsAddMode(true);\n          },\n          variant: \"secondary\",\n          type: \"button\",\n          children: \"Add nested policy\"\n        })\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: gridStyles.titleCell,\n      children: \"Mute timings\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: gridStyles.valueCell,\n      children: /*#__PURE__*/_jsx(MuteTimingsTable, {\n        alertManagerSourceName: alertManagerSourceName,\n        muteTimingNames: routes.muteTimeIntervals,\n        hideActions: true\n      })\n    })]\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    addNestedRoutingBtn: css`\n      margin-top: ${theme.spacing(2)};\n    `\n  };\n};","map":{"version":3,"names":["css","React","useState","Button","useStyles2","getNotificationsPermissions","emptyRoute","Authorize","AmRoutesTable","MuteTimingsTable","getGridStyles","AmRoutesExpandedRead","onChange","receivers","routes","readOnly","alertManagerSourceName","styles","getStyles","gridStyles","permissions","groupWait","groupWaitValue","groupWaitValueType","groupInterval","groupIntervalValue","groupIntervalValueType","repeatInterval","repeatIntervalValue","repeatIntervalValueType","subroutes","setSubroutes","isAddMode","setIsAddMode","container","titleCell","valueCell","length","newSubroutes","pop","newRoutes","create","addNestedRoutingBtn","muteTimeIntervals","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedRead.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { emptyRoute } from '../../utils/amroutes';\nimport { Authorize } from '../Authorize';\n\nimport { AmRoutesTable } from './AmRoutesTable';\nimport { MuteTimingsTable } from './MuteTimingsTable';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRoutesExpandedReadProps {\n  onChange: (routes: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n  alertManagerSourceName: string;\n}\n\nexport const AmRoutesExpandedRead: FC<AmRoutesExpandedReadProps> = ({\n  onChange,\n  receivers,\n  routes,\n  readOnly = false,\n  alertManagerSourceName,\n}) => {\n  const styles = useStyles2(getStyles);\n  const gridStyles = useStyles2(getGridStyles);\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  const [subroutes, setSubroutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  return (\n    <div className={gridStyles.container}>\n      <div className={gridStyles.titleCell}>Group wait</div>\n      <div className={gridStyles.valueCell}>{groupWait}</div>\n      <div className={gridStyles.titleCell}>Group interval</div>\n      <div className={gridStyles.valueCell}>{groupInterval}</div>\n      <div className={gridStyles.titleCell}>Repeat interval</div>\n      <div className={gridStyles.valueCell}>{repeatInterval}</div>\n      <div className={gridStyles.titleCell}>Nested policies</div>\n      <div className={gridStyles.valueCell}>\n        {!!subroutes.length ? (\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setSubroutes((subroutes) => {\n                const newSubroutes = [...subroutes];\n                newSubroutes.pop();\n\n                return newSubroutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={subroutes}\n            alertManagerSourceName={alertManagerSourceName}\n          />\n        ) : (\n          <p>No nested policies configured.</p>\n        )}\n        {!isAddMode && !readOnly && (\n          <Authorize actions={[permissions.create]}>\n            <Button\n              className={styles.addNestedRoutingBtn}\n              icon=\"plus\"\n              onClick={() => {\n                setSubroutes((subroutes) => [...subroutes, emptyRoute]);\n                setIsAddMode(true);\n              }}\n              variant=\"secondary\"\n              type=\"button\"\n            >\n              Add nested policy\n            </Button>\n          </Authorize>\n        )}\n      </div>\n      <div className={gridStyles.titleCell}>Mute timings</div>\n      <div className={gridStyles.valueCell}>\n        <MuteTimingsTable\n          alertManagerSourceName={alertManagerSourceName!}\n          muteTimingNames={routes.muteTimeIntervals}\n          hideActions\n        />\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    addNestedRoutingBtn: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}