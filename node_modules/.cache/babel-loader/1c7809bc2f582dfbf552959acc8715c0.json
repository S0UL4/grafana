{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { map } from 'lodash';\nimport { getInstanceState } from '../state/selectors';\nimport { initialVariablesState } from '../state/types';\nimport { initialVariableModelState, VariableRefresh } from '../types';\nexport const initialIntervalVariableModelState = Object.assign({}, initialVariableModelState, {\n  type: 'interval',\n  auto_count: 30,\n  auto_min: '10s',\n  options: [],\n  auto: false,\n  query: '1m,10m,30m,1h,6h,12h,1d,7d,14d,30d',\n  refresh: VariableRefresh.onTimeRangeChanged,\n  current: {}\n});\nexport const intervalVariableSlice = createSlice({\n  name: 'templating/interval',\n  initialState: initialVariablesState,\n  reducers: {\n    createIntervalOptions: (state, action) => {\n      const instanceState = getInstanceState(state, action.payload.id);\n      const options = map(instanceState.query.match(/([\"'])(.*?)\\1|\\w+/g), text => {\n        text = text.replace(/[\"']+/g, '');\n        return {\n          text: text.trim(),\n          value: text.trim(),\n          selected: false\n        };\n      });\n\n      if (instanceState.auto) {\n        // add auto option if missing\n        if (options.length && options[0].text !== 'auto') {\n          options.unshift({\n            text: 'auto',\n            value: '$__auto_interval_' + instanceState.name,\n            selected: false\n          });\n        }\n      }\n\n      instanceState.options = options;\n    }\n  }\n});\nexport const intervalVariableReducer = intervalVariableSlice.reducer;\nexport const {\n  createIntervalOptions\n} = intervalVariableSlice.actions;","map":{"version":3,"names":["createSlice","map","getInstanceState","initialVariablesState","initialVariableModelState","VariableRefresh","initialIntervalVariableModelState","type","auto_count","auto_min","options","auto","query","refresh","onTimeRangeChanged","current","intervalVariableSlice","name","initialState","reducers","createIntervalOptions","state","action","instanceState","payload","id","match","text","replace","trim","value","selected","length","unshift","intervalVariableReducer","reducer","actions"],"sources":["/home/soula/grafana/public/app/features/variables/interval/reducer.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { map } from 'lodash';\n\nimport { getInstanceState } from '../state/selectors';\nimport { initialVariablesState, VariablePayload, VariablesState } from '../state/types';\nimport { initialVariableModelState, IntervalVariableModel, VariableOption, VariableRefresh } from '../types';\n\nexport const initialIntervalVariableModelState: IntervalVariableModel = {\n  ...initialVariableModelState,\n  type: 'interval',\n  auto_count: 30,\n  auto_min: '10s',\n  options: [],\n  auto: false,\n  query: '1m,10m,30m,1h,6h,12h,1d,7d,14d,30d',\n  refresh: VariableRefresh.onTimeRangeChanged,\n  current: {} as VariableOption,\n};\n\nexport const intervalVariableSlice = createSlice({\n  name: 'templating/interval',\n  initialState: initialVariablesState,\n  reducers: {\n    createIntervalOptions: (state: VariablesState, action: PayloadAction<VariablePayload>) => {\n      const instanceState = getInstanceState<IntervalVariableModel>(state, action.payload.id);\n      const options: VariableOption[] = map(instanceState.query.match(/([\"'])(.*?)\\1|\\w+/g), (text) => {\n        text = text.replace(/[\"']+/g, '');\n        return { text: text.trim(), value: text.trim(), selected: false };\n      });\n\n      if (instanceState.auto) {\n        // add auto option if missing\n        if (options.length && options[0].text !== 'auto') {\n          options.unshift({\n            text: 'auto',\n            value: '$__auto_interval_' + instanceState.name,\n            selected: false,\n          });\n        }\n      }\n\n      instanceState.options = options;\n    },\n  },\n});\n\nexport const intervalVariableReducer = intervalVariableSlice.reducer;\n\nexport const { createIntervalOptions } = intervalVariableSlice.actions;\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,GAAT,QAAoB,QAApB;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,qBAAT,QAAuE,gBAAvE;AACA,SAASC,yBAAT,EAA2EC,eAA3E,QAAkG,UAAlG;AAEA,OAAO,MAAMC,iCAAwD,qBAChEF,yBADgE;EAEnEG,IAAI,EAAE,UAF6D;EAGnEC,UAAU,EAAE,EAHuD;EAInEC,QAAQ,EAAE,KAJyD;EAKnEC,OAAO,EAAE,EAL0D;EAMnEC,IAAI,EAAE,KAN6D;EAOnEC,KAAK,EAAE,oCAP4D;EAQnEC,OAAO,EAAER,eAAe,CAACS,kBAR0C;EASnEC,OAAO,EAAE;AAT0D,EAA9D;AAYP,OAAO,MAAMC,qBAAqB,GAAGhB,WAAW,CAAC;EAC/CiB,IAAI,EAAE,qBADyC;EAE/CC,YAAY,EAAEf,qBAFiC;EAG/CgB,QAAQ,EAAE;IACRC,qBAAqB,EAAE,CAACC,KAAD,EAAwBC,MAAxB,KAAmE;MACxF,MAAMC,aAAa,GAAGrB,gBAAgB,CAAwBmB,KAAxB,EAA+BC,MAAM,CAACE,OAAP,CAAeC,EAA9C,CAAtC;MACA,MAAMf,OAAyB,GAAGT,GAAG,CAACsB,aAAa,CAACX,KAAd,CAAoBc,KAApB,CAA0B,oBAA1B,CAAD,EAAmDC,IAAD,IAAU;QAC/FA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAAP;QACA,OAAO;UAAED,IAAI,EAAEA,IAAI,CAACE,IAAL,EAAR;UAAqBC,KAAK,EAAEH,IAAI,CAACE,IAAL,EAA5B;UAAyCE,QAAQ,EAAE;QAAnD,CAAP;MACD,CAHoC,CAArC;;MAKA,IAAIR,aAAa,CAACZ,IAAlB,EAAwB;QACtB;QACA,IAAID,OAAO,CAACsB,MAAR,IAAkBtB,OAAO,CAAC,CAAD,CAAP,CAAWiB,IAAX,KAAoB,MAA1C,EAAkD;UAChDjB,OAAO,CAACuB,OAAR,CAAgB;YACdN,IAAI,EAAE,MADQ;YAEdG,KAAK,EAAE,sBAAsBP,aAAa,CAACN,IAF7B;YAGdc,QAAQ,EAAE;UAHI,CAAhB;QAKD;MACF;;MAEDR,aAAa,CAACb,OAAd,GAAwBA,OAAxB;IACD;EApBO;AAHqC,CAAD,CAAzC;AA2BP,OAAO,MAAMwB,uBAAuB,GAAGlB,qBAAqB,CAACmB,OAAtD;AAEP,OAAO,MAAM;EAAEf;AAAF,IAA4BJ,qBAAqB,CAACoB,OAAxD"},"metadata":{},"sourceType":"module"}