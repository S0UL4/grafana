{"ast":null,"code":"import { useState } from 'react';\n\nconst hasValue = searchValue => ({\n  value\n}) => value === searchValue;\n\nconst getInitialState = (initialOptions, initialValue) => {\n  if (initialValue === undefined || initialOptions.some(hasValue(initialValue))) {\n    return initialOptions;\n  }\n\n  return [...initialOptions, {\n    value: initialValue,\n    label: initialValue\n  }];\n};\n\n/**\n * Creates the Props needed by Select to handle custom values and handles custom value creation\n * and the initial value when it is not present in the option array.\n */\nexport const useCreatableSelectPersistedBehaviour = ({\n  options: initialOptions,\n  value,\n  onChange\n}) => {\n  const [options, setOptions] = useState(getInitialState(initialOptions, value));\n\n  const addOption = newValue => setOptions([...options, {\n    value: newValue,\n    label: newValue\n  }]);\n\n  return {\n    onCreateOption: value => {\n      addOption(value);\n      onChange({\n        value\n      });\n    },\n    onChange,\n    allowCustomValue: true,\n    options,\n    value\n  };\n};","map":{"version":3,"names":["useState","hasValue","searchValue","value","getInitialState","initialOptions","initialValue","undefined","some","label","useCreatableSelectPersistedBehaviour","options","onChange","setOptions","addOption","newValue","onCreateOption","allowCustomValue"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/hooks/useCreatableSelectPersistedBehaviour.ts"],"sourcesContent":["import { useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nconst hasValue =\n  <T extends SelectableValue>(searchValue: T['value']) =>\n  ({ value }: T) =>\n    value === searchValue;\n\nconst getInitialState = (initialOptions: SelectableValue[], initialValue?: string): SelectableValue[] => {\n  if (initialValue === undefined || initialOptions.some(hasValue(initialValue))) {\n    return initialOptions;\n  }\n\n  return [\n    ...initialOptions,\n    {\n      value: initialValue,\n      label: initialValue,\n    },\n  ];\n};\n\ninterface Params {\n  options: SelectableValue[];\n  value?: string;\n  onChange: (s: SelectableValue<string>) => void;\n}\n\n/**\n * Creates the Props needed by Select to handle custom values and handles custom value creation\n * and the initial value when it is not present in the option array.\n */\nexport const useCreatableSelectPersistedBehaviour = ({ options: initialOptions, value, onChange }: Params) => {\n  const [options, setOptions] = useState(getInitialState(initialOptions, value));\n\n  const addOption = (newValue: string) => setOptions([...options, { value: newValue, label: newValue }]);\n\n  return {\n    onCreateOption: (value: string) => {\n      addOption(value);\n      onChange({ value });\n    },\n    onChange,\n    allowCustomValue: true,\n    options,\n    value,\n  };\n};\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAIA,MAAMC,QAAQ,GACgBC,WAA5B,IACA,CAAC;EAAEC;AAAF,CAAD,KACEA,KAAK,KAAKD,WAHd;;AAKA,MAAME,eAAe,GAAG,CAACC,cAAD,EAAoCC,YAApC,KAAiF;EACvG,IAAIA,YAAY,KAAKC,SAAjB,IAA8BF,cAAc,CAACG,IAAf,CAAoBP,QAAQ,CAACK,YAAD,CAA5B,CAAlC,EAA+E;IAC7E,OAAOD,cAAP;EACD;;EAED,OAAO,CACL,GAAGA,cADE,EAEL;IACEF,KAAK,EAAEG,YADT;IAEEG,KAAK,EAAEH;EAFT,CAFK,CAAP;AAOD,CAZD;;AAoBA;AACA;AACA;AACA;AACA,OAAO,MAAMI,oCAAoC,GAAG,CAAC;EAAEC,OAAO,EAAEN,cAAX;EAA2BF,KAA3B;EAAkCS;AAAlC,CAAD,KAA0D;EAC5G,MAAM,CAACD,OAAD,EAAUE,UAAV,IAAwBb,QAAQ,CAACI,eAAe,CAACC,cAAD,EAAiBF,KAAjB,CAAhB,CAAtC;;EAEA,MAAMW,SAAS,GAAIC,QAAD,IAAsBF,UAAU,CAAC,CAAC,GAAGF,OAAJ,EAAa;IAAER,KAAK,EAAEY,QAAT;IAAmBN,KAAK,EAAEM;EAA1B,CAAb,CAAD,CAAlD;;EAEA,OAAO;IACLC,cAAc,EAAGb,KAAD,IAAmB;MACjCW,SAAS,CAACX,KAAD,CAAT;MACAS,QAAQ,CAAC;QAAET;MAAF,CAAD,CAAR;IACD,CAJI;IAKLS,QALK;IAMLK,gBAAgB,EAAE,IANb;IAOLN,OAPK;IAQLR;EARK,CAAP;AAUD,CAfM"},"metadata":{},"sourceType":"module"}