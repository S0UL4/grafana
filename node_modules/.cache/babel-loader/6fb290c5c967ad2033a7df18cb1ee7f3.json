{"ast":null,"code":"var _thead;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { compareArrayValues, compareDataFrameStructures, fieldReducers, getFieldDisplayName, getFrameDisplayName, ReducerID } from '@grafana/data';\nimport { IconButton } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class RenderInfoViewer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"lastRender\", Date.now());\n\n    _defineProperty(this, \"counters\", {\n      render: 0,\n      dataChanged: 0,\n      schemaChanged: 0\n    });\n\n    _defineProperty(this, \"resetCounters\", () => {\n      this.counters = {\n        render: 0,\n        dataChanged: 0,\n        schemaChanged: 0\n      };\n      this.forceUpdate();\n    });\n  }\n\n  shouldComponentUpdate(prevProps) {\n    const {\n      data,\n      options\n    } = this.props;\n\n    if (prevProps.data !== data) {\n      var _options$counters;\n\n      this.counters.dataChanged++;\n\n      if ((_options$counters = options.counters) !== null && _options$counters !== void 0 && _options$counters.schemaChanged) {\n        var _prevProps$data;\n\n        const oldSeries = (_prevProps$data = prevProps.data) === null || _prevProps$data === void 0 ? void 0 : _prevProps$data.series;\n        const series = data.series;\n\n        if (series && oldSeries) {\n          const sameStructure = compareArrayValues(series, oldSeries, compareDataFrameStructures);\n\n          if (!sameStructure) {\n            this.counters.schemaChanged++;\n          }\n        }\n      }\n    }\n\n    return true; // always render?\n  }\n\n  render() {\n    var _options$counters2;\n\n    const {\n      data,\n      options\n    } = this.props;\n    const showCounters = (_options$counters2 = options.counters) !== null && _options$counters2 !== void 0 ? _options$counters2 : {};\n    this.counters.render++;\n    const now = Date.now();\n    const elapsed = now - this.lastRender;\n    this.lastRender = now;\n    const reducer = fieldReducers.get(ReducerID.lastNotNull);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(IconButton, {\n          name: \"step-backward\",\n          title: \"reset counters\",\n          onClick: this.resetCounters\n        }), /*#__PURE__*/_jsxs(\"span\", {\n          children: [showCounters.render && /*#__PURE__*/_jsxs(\"span\", {\n            children: [\"Render: \", this.counters.render, \"\\xA0\"]\n          }), showCounters.dataChanged && /*#__PURE__*/_jsxs(\"span\", {\n            children: [\"Data: \", this.counters.dataChanged, \"\\xA0\"]\n          }), showCounters.schemaChanged && /*#__PURE__*/_jsxs(\"span\", {\n            children: [\"Schema: \", this.counters.schemaChanged, \"\\xA0\"]\n          }), /*#__PURE__*/_jsxs(\"span\", {\n            children: [\"TIME: \", elapsed, \"ms\"]\n          })]\n        })]\n      }), data.series && data.series.map((frame, idx) => /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsxs(\"h4\", {\n          children: [getFrameDisplayName(frame, idx), \" (\", frame.length, \")\"]\n        }), /*#__PURE__*/_jsxs(\"table\", {\n          className: \"filter-table\",\n          children: [_thead || (_thead = /*#__PURE__*/_jsx(\"thead\", {\n            children: /*#__PURE__*/_jsxs(\"tr\", {\n              children: [/*#__PURE__*/_jsx(\"td\", {\n                children: \"Field\"\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: \"Type\"\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: \"Last\"\n              })]\n            })\n          })), /*#__PURE__*/_jsx(\"tbody\", {\n            children: frame.fields.map((field, idx) => {\n              const v = reducer.reduce(field, false, false)[reducer.id];\n              return /*#__PURE__*/_jsxs(\"tr\", {\n                children: [/*#__PURE__*/_jsx(\"td\", {\n                  children: getFieldDisplayName(field, frame, data.series)\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  children: field.type\n                }), /*#__PURE__*/_jsx(\"td\", {\n                  children: `${v}`\n                })]\n              }, `${idx}/${field.name}`);\n            })\n          })]\n        })]\n      }, `${idx}/${frame.refId}`))]\n    });\n  }\n\n}","map":{"version":3,"names":["React","Component","compareArrayValues","compareDataFrameStructures","fieldReducers","getFieldDisplayName","getFrameDisplayName","ReducerID","IconButton","RenderInfoViewer","Date","now","render","dataChanged","schemaChanged","counters","forceUpdate","shouldComponentUpdate","prevProps","data","options","props","oldSeries","series","sameStructure","showCounters","elapsed","lastRender","reducer","get","lastNotNull","resetCounters","map","frame","idx","length","fields","field","v","reduce","id","type","name","refId"],"sources":["/home/soula/grafana/public/app/plugins/panel/debug/RenderInfoViewer.tsx"],"sourcesContent":["import React, { Component } from 'react';\n\nimport {\n  compareArrayValues,\n  compareDataFrameStructures,\n  fieldReducers,\n  getFieldDisplayName,\n  getFrameDisplayName,\n  PanelProps,\n  ReducerID,\n} from '@grafana/data';\nimport { IconButton } from '@grafana/ui';\n\nimport { DebugPanelOptions, UpdateCounters, UpdateConfig } from './types';\n\ntype Props = PanelProps<DebugPanelOptions>;\n\nexport class RenderInfoViewer extends Component<Props> {\n  // Intentionally not state to avoid overhead -- yes, things will be 1 tick behind\n  lastRender = Date.now();\n  counters: UpdateCounters = {\n    render: 0,\n    dataChanged: 0,\n    schemaChanged: 0,\n  };\n\n  shouldComponentUpdate(prevProps: Props) {\n    const { data, options } = this.props;\n\n    if (prevProps.data !== data) {\n      this.counters.dataChanged++;\n\n      if (options.counters?.schemaChanged) {\n        const oldSeries = prevProps.data?.series;\n        const series = data.series;\n        if (series && oldSeries) {\n          const sameStructure = compareArrayValues(series, oldSeries, compareDataFrameStructures);\n          if (!sameStructure) {\n            this.counters.schemaChanged++;\n          }\n        }\n      }\n    }\n    return true; // always render?\n  }\n\n  resetCounters = () => {\n    this.counters = {\n      render: 0,\n      dataChanged: 0,\n      schemaChanged: 0,\n    };\n    this.forceUpdate();\n  };\n\n  render() {\n    const { data, options } = this.props;\n    const showCounters = options.counters ?? ({} as UpdateConfig);\n    this.counters.render++;\n    const now = Date.now();\n    const elapsed = now - this.lastRender;\n    this.lastRender = now;\n\n    const reducer = fieldReducers.get(ReducerID.lastNotNull);\n\n    return (\n      <div>\n        <div>\n          <IconButton name=\"step-backward\" title=\"reset counters\" onClick={this.resetCounters} />\n          <span>\n            {showCounters.render && <span>Render: {this.counters.render}&nbsp;</span>}\n            {showCounters.dataChanged && <span>Data: {this.counters.dataChanged}&nbsp;</span>}\n            {showCounters.schemaChanged && <span>Schema: {this.counters.schemaChanged}&nbsp;</span>}\n            <span>TIME: {elapsed}ms</span>\n          </span>\n        </div>\n\n        {data.series &&\n          data.series.map((frame, idx) => (\n            <div key={`${idx}/${frame.refId}`}>\n              <h4>\n                {getFrameDisplayName(frame, idx)} ({frame.length})\n              </h4>\n              <table className=\"filter-table\">\n                <thead>\n                  <tr>\n                    <td>Field</td>\n                    <td>Type</td>\n                    <td>Last</td>\n                  </tr>\n                </thead>\n                <tbody>\n                  {frame.fields.map((field, idx) => {\n                    const v = reducer.reduce!(field, false, false)[reducer.id];\n                    return (\n                      <tr key={`${idx}/${field.name}`}>\n                        <td>{getFieldDisplayName(field, frame, data.series)}</td>\n                        <td>{field.type}</td>\n                        <td>{`${v}`}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          ))}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SACEC,kBADF,EAEEC,0BAFF,EAGEC,aAHF,EAIEC,mBAJF,EAKEC,mBALF,EAOEC,SAPF,QAQO,eARP;AASA,SAASC,UAAT,QAA2B,aAA3B;;;AAMA,OAAO,MAAMC,gBAAN,SAA+BR,SAA/B,CAAgD;EAAA;IAAA;;IAAA,oCAExCS,IAAI,CAACC,GAAL,EAFwC;;IAAA,kCAG1B;MACzBC,MAAM,EAAE,CADiB;MAEzBC,WAAW,EAAE,CAFY;MAGzBC,aAAa,EAAE;IAHU,CAH0B;;IAAA,uCA6BrC,MAAM;MACpB,KAAKC,QAAL,GAAgB;QACdH,MAAM,EAAE,CADM;QAEdC,WAAW,EAAE,CAFC;QAGdC,aAAa,EAAE;MAHD,CAAhB;MAKA,KAAKE,WAAL;IACD,CApCoD;EAAA;;EASrDC,qBAAqB,CAACC,SAAD,EAAmB;IACtC,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAoB,KAAKC,KAA/B;;IAEA,IAAIH,SAAS,CAACC,IAAV,KAAmBA,IAAvB,EAA6B;MAAA;;MAC3B,KAAKJ,QAAL,CAAcF,WAAd;;MAEA,yBAAIO,OAAO,CAACL,QAAZ,8CAAI,kBAAkBD,aAAtB,EAAqC;QAAA;;QACnC,MAAMQ,SAAS,sBAAGJ,SAAS,CAACC,IAAb,oDAAG,gBAAgBI,MAAlC;QACA,MAAMA,MAAM,GAAGJ,IAAI,CAACI,MAApB;;QACA,IAAIA,MAAM,IAAID,SAAd,EAAyB;UACvB,MAAME,aAAa,GAAGtB,kBAAkB,CAACqB,MAAD,EAASD,SAAT,EAAoBnB,0BAApB,CAAxC;;UACA,IAAI,CAACqB,aAAL,EAAoB;YAClB,KAAKT,QAAL,CAAcD,aAAd;UACD;QACF;MACF;IACF;;IACD,OAAO,IAAP,CAjBsC,CAiBzB;EACd;;EAWDF,MAAM,GAAG;IAAA;;IACP,MAAM;MAAEO,IAAF;MAAQC;IAAR,IAAoB,KAAKC,KAA/B;IACA,MAAMI,YAAY,yBAAGL,OAAO,CAACL,QAAX,mEAAwB,EAA1C;IACA,KAAKA,QAAL,CAAcH,MAAd;IACA,MAAMD,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAZ;IACA,MAAMe,OAAO,GAAGf,GAAG,GAAG,KAAKgB,UAA3B;IACA,KAAKA,UAAL,GAAkBhB,GAAlB;IAEA,MAAMiB,OAAO,GAAGxB,aAAa,CAACyB,GAAd,CAAkBtB,SAAS,CAACuB,WAA5B,CAAhB;IAEA,oBACE;MAAA,wBACE;QAAA,wBACE,KAAC,UAAD;UAAY,IAAI,EAAC,eAAjB;UAAiC,KAAK,EAAC,gBAAvC;UAAwD,OAAO,EAAE,KAAKC;QAAtE,EADF,eAEE;UAAA,WACGN,YAAY,CAACb,MAAb,iBAAuB;YAAA,uBAAe,KAAKG,QAAL,CAAcH,MAA7B;UAAA,EAD1B,EAEGa,YAAY,CAACZ,WAAb,iBAA4B;YAAA,qBAAa,KAAKE,QAAL,CAAcF,WAA3B;UAAA,EAF/B,EAGGY,YAAY,CAACX,aAAb,iBAA8B;YAAA,uBAAe,KAAKC,QAAL,CAAcD,aAA7B;UAAA,EAHjC,eAIE;YAAA,qBAAaY,OAAb;UAAA,EAJF;QAAA,EAFF;MAAA,EADF,EAWGP,IAAI,CAACI,MAAL,IACCJ,IAAI,CAACI,MAAL,CAAYS,GAAZ,CAAgB,CAACC,KAAD,EAAQC,GAAR,kBACd;QAAA,wBACE;UAAA,WACG5B,mBAAmB,CAAC2B,KAAD,EAAQC,GAAR,CADtB,QACsCD,KAAK,CAACE,MAD5C;QAAA,EADF,eAIE;UAAO,SAAS,EAAC,cAAjB;UAAA,4CACE;YAAA,uBACE;cAAA,wBACE;gBAAA;cAAA,EADF,eAEE;gBAAA;cAAA,EAFF,eAGE;gBAAA;cAAA,EAHF;YAAA;UADF,EADF,gBAQE;YAAA,UACGF,KAAK,CAACG,MAAN,CAAaJ,GAAb,CAAiB,CAACK,KAAD,EAAQH,GAAR,KAAgB;cAChC,MAAMI,CAAC,GAAGV,OAAO,CAACW,MAAR,CAAgBF,KAAhB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqCT,OAAO,CAACY,EAA7C,CAAV;cACA,oBACE;gBAAA,wBACE;kBAAA,UAAKnC,mBAAmB,CAACgC,KAAD,EAAQJ,KAAR,EAAed,IAAI,CAACI,MAApB;gBAAxB,EADF,eAEE;kBAAA,UAAKc,KAAK,CAACI;gBAAX,EAFF,eAGE;kBAAA,UAAM,GAAEH,CAAE;gBAAV,EAHF;cAAA,GAAU,GAAEJ,GAAI,IAAGG,KAAK,CAACK,IAAK,EAA9B,CADF;YAOD,CATA;UADH,EARF;QAAA,EAJF;MAAA,GAAW,GAAER,GAAI,IAAGD,KAAK,CAACU,KAAM,EAAhC,CADF,CAZJ;IAAA,EADF;EA2CD;;AA3FoD"},"metadata":{},"sourceType":"module"}