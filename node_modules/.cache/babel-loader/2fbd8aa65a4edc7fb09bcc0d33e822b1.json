{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { isGUIDish } from '../ResourcePicker/utils';\n\nasync function migrateWorkspaceQueryToResourceQuery(datasource, query, onChange) {\n  var _query$azureLogAnalyt;\n\n  if (((_query$azureLogAnalyt = query.azureLogAnalytics) === null || _query$azureLogAnalyt === void 0 ? void 0 : _query$azureLogAnalyt.workspace) !== undefined && !query.azureLogAnalytics.resource) {\n    const isWorkspaceGUID = isGUIDish(query.azureLogAnalytics.workspace);\n    let resource;\n\n    if (isWorkspaceGUID) {\n      resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(query.azureLogAnalytics.workspace);\n    } else {\n      // The value of workspace is probably a template variable so we just migrate it over as-is\n      resource = query.azureLogAnalytics.workspace;\n    }\n\n    const newQuery = Object.assign({}, query, {\n      azureLogAnalytics: Object.assign({}, query.azureLogAnalytics, {\n        resource: resource,\n        workspace: undefined\n      })\n    });\n    delete newQuery.azureLogAnalytics.workspace;\n    onChange(newQuery);\n  }\n}\n\nexport default function useMigrations(datasource, query, onChange) {\n  const [migrationError, setMigrationError] = useState();\n  useEffect(() => {\n    migrateWorkspaceQueryToResourceQuery(datasource, query, onChange).catch(err => setMigrationError({\n      title: 'Unable to migrate workspace as a resource',\n      message: err.message\n    }));\n  }, [datasource, query, onChange]);\n  return migrationError;\n}","map":{"version":3,"names":["useEffect","useState","isGUIDish","migrateWorkspaceQueryToResourceQuery","datasource","query","onChange","azureLogAnalytics","workspace","undefined","resource","isWorkspaceGUID","resourcePickerData","getResourceURIFromWorkspace","newQuery","useMigrations","migrationError","setMigrationError","catch","err","title","message"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/useMigrations.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorQuery } from '../../types';\nimport { isGUIDish } from '../ResourcePicker/utils';\n\nasync function migrateWorkspaceQueryToResourceQuery(\n  datasource: Datasource,\n  query: AzureMonitorQuery,\n  onChange: (newQuery: AzureMonitorQuery) => void\n) {\n  if (query.azureLogAnalytics?.workspace !== undefined && !query.azureLogAnalytics.resource) {\n    const isWorkspaceGUID = isGUIDish(query.azureLogAnalytics.workspace);\n    let resource: string;\n\n    if (isWorkspaceGUID) {\n      resource = await datasource.resourcePickerData.getResourceURIFromWorkspace(query.azureLogAnalytics.workspace);\n    } else {\n      // The value of workspace is probably a template variable so we just migrate it over as-is\n      resource = query.azureLogAnalytics.workspace;\n    }\n\n    const newQuery = {\n      ...query,\n      azureLogAnalytics: {\n        ...query.azureLogAnalytics,\n        resource: resource,\n        workspace: undefined,\n      },\n    };\n\n    delete newQuery.azureLogAnalytics.workspace;\n\n    onChange(newQuery);\n  }\n}\n\ninterface ErrorMessage {\n  title: string;\n  message: string;\n}\n\nexport default function useMigrations(\n  datasource: Datasource,\n  query: AzureMonitorQuery,\n  onChange: (newQuery: AzureMonitorQuery) => void\n) {\n  const [migrationError, setMigrationError] = useState<ErrorMessage>();\n\n  useEffect(() => {\n    migrateWorkspaceQueryToResourceQuery(datasource, query, onChange).catch((err) =>\n      setMigrationError({\n        title: 'Unable to migrate workspace as a resource',\n        message: err.message,\n      })\n    );\n  }, [datasource, query, onChange]);\n\n  return migrationError;\n}\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAIA,SAASC,SAAT,QAA0B,yBAA1B;;AAEA,eAAeC,oCAAf,CACEC,UADF,EAEEC,KAFF,EAGEC,QAHF,EAIE;EAAA;;EACA,IAAI,0BAAAD,KAAK,CAACE,iBAAN,gFAAyBC,SAAzB,MAAuCC,SAAvC,IAAoD,CAACJ,KAAK,CAACE,iBAAN,CAAwBG,QAAjF,EAA2F;IACzF,MAAMC,eAAe,GAAGT,SAAS,CAACG,KAAK,CAACE,iBAAN,CAAwBC,SAAzB,CAAjC;IACA,IAAIE,QAAJ;;IAEA,IAAIC,eAAJ,EAAqB;MACnBD,QAAQ,GAAG,MAAMN,UAAU,CAACQ,kBAAX,CAA8BC,2BAA9B,CAA0DR,KAAK,CAACE,iBAAN,CAAwBC,SAAlF,CAAjB;IACD,CAFD,MAEO;MACL;MACAE,QAAQ,GAAGL,KAAK,CAACE,iBAAN,CAAwBC,SAAnC;IACD;;IAED,MAAMM,QAAQ,qBACTT,KADS;MAEZE,iBAAiB,oBACZF,KAAK,CAACE,iBADM;QAEfG,QAAQ,EAAEA,QAFK;QAGfF,SAAS,EAAEC;MAHI;IAFL,EAAd;IASA,OAAOK,QAAQ,CAACP,iBAAT,CAA2BC,SAAlC;IAEAF,QAAQ,CAACQ,QAAD,CAAR;EACD;AACF;;AAOD,eAAe,SAASC,aAAT,CACbX,UADa,EAEbC,KAFa,EAGbC,QAHa,EAIb;EACA,MAAM,CAACU,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,EAApD;EAEAD,SAAS,CAAC,MAAM;IACdG,oCAAoC,CAACC,UAAD,EAAaC,KAAb,EAAoBC,QAApB,CAApC,CAAkEY,KAAlE,CAAyEC,GAAD,IACtEF,iBAAiB,CAAC;MAChBG,KAAK,EAAE,2CADS;MAEhBC,OAAO,EAAEF,GAAG,CAACE;IAFG,CAAD,CADnB;EAMD,CAPQ,EAON,CAACjB,UAAD,EAAaC,KAAb,EAAoBC,QAApB,CAPM,CAAT;EASA,OAAOU,cAAP;AACD"},"metadata":{},"sourceType":"module"}