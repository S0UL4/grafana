{"ast":null,"code":"import { formattedValueToString, getFieldDisplayValuesProxy, getTimeField } from '@grafana/data';\nimport { getLinkSrv } from './link_srv';\n\n/**\n * Link suppliers creates link models based on a link origin\n */\nexport const getFieldLinksSupplier = value => {\n  const links = value.field.links;\n\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: replaceVariables => {\n      const scopedVars = {};\n\n      if (value.view) {\n        const {\n          dataFrame\n        } = value.view;\n        scopedVars['__series'] = {\n          value: {\n            name: dataFrame.name,\n            refId: dataFrame.refId\n          },\n          text: 'Series'\n        };\n        const field = value.colIndex !== undefined ? dataFrame.fields[value.colIndex] : undefined;\n\n        if (field) {\n          scopedVars['__field'] = {\n            value: {\n              name: field.name,\n              labels: field.labels\n            },\n            text: 'Field'\n          };\n\n          if (value.rowIndex !== undefined && value.rowIndex >= 0) {\n            const {\n              timeField\n            } = getTimeField(dataFrame);\n            scopedVars['__value'] = {\n              value: {\n                raw: field.values.get(value.rowIndex),\n                numeric: value.display.numeric,\n                text: formattedValueToString(value.display),\n                time: timeField ? timeField.values.get(value.rowIndex) : undefined\n              },\n              text: 'Value'\n            };\n          } // Expose other values on the row\n\n\n          if (value.view) {\n            scopedVars['__data'] = {\n              value: {\n                name: dataFrame.name,\n                refId: dataFrame.refId,\n                fields: getFieldDisplayValuesProxy({\n                  frame: dataFrame,\n                  rowIndex: value.rowIndex\n                })\n              },\n              text: 'Data'\n            };\n          }\n        } else {\n          // calculation\n          scopedVars['__value'] = {\n            value: {\n              raw: value.display.numeric,\n              numeric: value.display.numeric,\n              text: formattedValueToString(value.display),\n              calc: value.name\n            },\n            text: 'Value'\n          };\n        }\n      } else {\n        console.log('VALUE', value);\n      }\n\n      const replace = (value, vars, fmt) => {\n        const finalVars = Object.assign({}, scopedVars, vars);\n        return replaceVariables(value, finalVars, fmt);\n      };\n\n      return links.map(link => {\n        return getLinkSrv().getDataLinkUIModel(link, replace, value);\n      });\n    }\n  };\n};\nexport const getPanelLinksSupplier = panel => {\n  const links = panel.links;\n\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: () => {\n      return links.map(link => {\n        return getLinkSrv().getDataLinkUIModel(link, panel.replaceVariables, panel);\n      });\n    }\n  };\n};","map":{"version":3,"names":["formattedValueToString","getFieldDisplayValuesProxy","getTimeField","getLinkSrv","getFieldLinksSupplier","value","links","field","length","undefined","getLinks","replaceVariables","scopedVars","view","dataFrame","name","refId","text","colIndex","fields","labels","rowIndex","timeField","raw","values","get","numeric","display","time","frame","calc","console","log","replace","vars","fmt","finalVars","map","link","getDataLinkUIModel","getPanelLinksSupplier","panel"],"sources":["/home/soula/grafana/public/app/features/panel/panellinks/linkSuppliers.ts"],"sourcesContent":["import {\n  DataLink,\n  DisplayValue,\n  FieldDisplay,\n  formattedValueToString,\n  getFieldDisplayValuesProxy,\n  getTimeField,\n  InterpolateFunction,\n  Labels,\n  LinkModelSupplier,\n  ScopedVar,\n  ScopedVars,\n} from '@grafana/data';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\n\nimport { getLinkSrv } from './link_srv';\n\ninterface SeriesVars {\n  name?: string;\n  refId?: string;\n}\n\ninterface FieldVars {\n  name: string;\n  labels?: Labels;\n}\n\ninterface ValueVars {\n  raw: any;\n  numeric: number;\n  text: string;\n  time?: number;\n  calc?: string;\n}\n\ninterface DataViewVars {\n  name?: string;\n  refId?: string;\n  fields?: Record<string, DisplayValue>;\n}\n\ninterface DataLinkScopedVars extends ScopedVars {\n  __series: ScopedVar<SeriesVars>;\n  __field: ScopedVar<FieldVars>;\n  __value: ScopedVar<ValueVars>;\n  __data: ScopedVar<DataViewVars>;\n}\n\n/**\n * Link suppliers creates link models based on a link origin\n */\nexport const getFieldLinksSupplier = (value: FieldDisplay): LinkModelSupplier<FieldDisplay> | undefined => {\n  const links = value.field.links;\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: (replaceVariables: InterpolateFunction) => {\n      const scopedVars: Partial<DataLinkScopedVars> = {};\n\n      if (value.view) {\n        const { dataFrame } = value.view;\n\n        scopedVars['__series'] = {\n          value: {\n            name: dataFrame.name,\n            refId: dataFrame.refId,\n          },\n          text: 'Series',\n        };\n\n        const field = value.colIndex !== undefined ? dataFrame.fields[value.colIndex] : undefined;\n\n        if (field) {\n          scopedVars['__field'] = {\n            value: {\n              name: field.name,\n              labels: field.labels,\n            },\n            text: 'Field',\n          };\n\n          if (value.rowIndex !== undefined && value.rowIndex >= 0) {\n            const { timeField } = getTimeField(dataFrame);\n            scopedVars['__value'] = {\n              value: {\n                raw: field.values.get(value.rowIndex),\n                numeric: value.display.numeric,\n                text: formattedValueToString(value.display),\n                time: timeField ? timeField.values.get(value.rowIndex) : undefined,\n              },\n              text: 'Value',\n            };\n          }\n\n          // Expose other values on the row\n          if (value.view) {\n            scopedVars['__data'] = {\n              value: {\n                name: dataFrame.name,\n                refId: dataFrame.refId,\n                fields: getFieldDisplayValuesProxy({\n                  frame: dataFrame,\n                  rowIndex: value.rowIndex!,\n                }),\n              },\n              text: 'Data',\n            };\n          }\n        } else {\n          // calculation\n          scopedVars['__value'] = {\n            value: {\n              raw: value.display.numeric,\n              numeric: value.display.numeric,\n              text: formattedValueToString(value.display),\n              calc: value.name,\n            },\n            text: 'Value',\n          };\n        }\n      } else {\n        console.log('VALUE', value);\n      }\n\n      const replace: InterpolateFunction = (value: string, vars: ScopedVars | undefined, fmt?: string | Function) => {\n        const finalVars: ScopedVars = {\n          ...(scopedVars as ScopedVars),\n          ...vars,\n        };\n        return replaceVariables(value, finalVars, fmt);\n      };\n\n      return links.map((link: DataLink) => {\n        return getLinkSrv().getDataLinkUIModel(link, replace, value);\n      });\n    },\n  };\n};\n\nexport const getPanelLinksSupplier = (panel: PanelModel): LinkModelSupplier<PanelModel> | undefined => {\n  const links = panel.links;\n\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: () => {\n      return links.map((link) => {\n        return getLinkSrv().getDataLinkUIModel(link, panel.replaceVariables, panel);\n      });\n    },\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}