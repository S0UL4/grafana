{"ast":null,"code":"var _Space;\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Alert, InlineField, Input, Select } from '@grafana/ui';\nimport { migrateStringQueriesToObjectQueries } from '../../grafanaTemplateVariableFns';\nimport { AzureQueryType } from '../../types';\nimport useLastError from '../../utils/useLastError';\nimport LogsQueryEditor from '../LogsQueryEditor';\nimport { Space } from '../Space';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst AZURE_QUERY_VARIABLE_TYPE_OPTIONS = [{\n  label: 'Grafana Query Function',\n  value: AzureQueryType.GrafanaTemplateVariableFn\n}, {\n  label: 'Logs',\n  value: AzureQueryType.LogAnalytics\n}];\n\nconst GrafanaTemplateVariableFnInput = ({\n  query,\n  updateQuery,\n  datasource\n}) => {\n  var _query$grafanaTemplat2;\n\n  const [inputVal, setInputVal] = useState('');\n  useEffect(() => {\n    var _query$grafanaTemplat;\n\n    setInputVal(((_query$grafanaTemplat = query.grafanaTemplateVariableFn) === null || _query$grafanaTemplat === void 0 ? void 0 : _query$grafanaTemplat.rawQuery) || '');\n  }, [(_query$grafanaTemplat2 = query.grafanaTemplateVariableFn) === null || _query$grafanaTemplat2 === void 0 ? void 0 : _query$grafanaTemplat2.rawQuery]);\n  const onRunQuery = useCallback(newQuery => {\n    migrateStringQueriesToObjectQueries(newQuery, {\n      datasource\n    }).then(updatedQuery => {\n      if (updatedQuery.queryType === AzureQueryType.GrafanaTemplateVariableFn) {\n        updateQuery(updatedQuery);\n      } else {\n        updateQuery(Object.assign({}, query, {\n          grafanaTemplateVariableFn: {\n            kind: 'UnknownQuery',\n            rawQuery: newQuery\n          }\n        }));\n      }\n    });\n  }, [datasource, query, updateQuery]);\n\n  const onChange = event => {\n    setInputVal(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsx(InlineField, {\n    label: \"Grafana template variable function\",\n    children: /*#__PURE__*/_jsx(Input, {\n      placeholder: 'type a grafana template variable function, ex: Subscriptions()',\n      value: inputVal,\n      onChange: onChange,\n      onBlur: () => onRunQuery(inputVal)\n    })\n  });\n};\n\nconst VariableEditor = props => {\n  const defaultQuery = {\n    refId: 'A',\n    queryType: AzureQueryType.GrafanaTemplateVariableFn\n  };\n  const [query, setQuery] = useState(defaultQuery);\n  useEffect(() => {\n    migrateStringQueriesToObjectQueries(props.query, {\n      datasource: props.datasource\n    }).then(migratedQuery => {\n      setQuery(migratedQuery);\n    });\n  }, [props.query, props.datasource]);\n\n  const onQueryTypeChange = selectableValue => {\n    if (selectableValue.value) {\n      setQuery(Object.assign({}, query, {\n        queryType: selectableValue.value\n      }));\n    }\n  };\n\n  const onLogsQueryChange = queryChange => {\n    var _queryChange$azureLog;\n\n    setQuery(queryChange); // only hit backend if there's something to query (prevents error when selecting the resource before pinging a query)\n\n    if ((_queryChange$azureLog = queryChange.azureLogAnalytics) !== null && _queryChange$azureLog !== void 0 && _queryChange$azureLog.query) {\n      props.onChange(queryChange);\n    }\n  };\n\n  const [errorMessage, setError] = useLastError();\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    // TODO: figure out a way to filter out the current variable from the variables list\n    // options: props.datasource.getVariables().map((v) => ({ label: v, value: v })),\n    options: []\n  };\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineField, {\n      label: \"Select query type\",\n      children: /*#__PURE__*/_jsx(Select, {\n        \"aria-label\": \"select query type\",\n        onChange: onQueryTypeChange,\n        options: AZURE_QUERY_VARIABLE_TYPE_OPTIONS,\n        width: 25,\n        value: query.queryType\n      })\n    }), query.queryType === AzureQueryType.LogAnalytics && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(LogsQueryEditor, {\n        subscriptionId: query.subscription,\n        query: query,\n        datasource: props.datasource,\n        onChange: onLogsQueryChange,\n        variableOptionGroup: variableOptionGroup,\n        setError: setError,\n        hideFormatAs: true\n      }), errorMessage && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [_Space || (_Space = /*#__PURE__*/_jsx(Space, {\n          v: 2\n        })), /*#__PURE__*/_jsx(Alert, {\n          severity: \"error\",\n          title: \"An error occurred while requesting metadata from Azure Monitor\",\n          children: errorMessage\n        })]\n      })]\n    }), query.queryType === AzureQueryType.GrafanaTemplateVariableFn && /*#__PURE__*/_jsx(GrafanaTemplateVariableFnInput, {\n      query: query,\n      updateQuery: props.onChange,\n      datasource: props.datasource\n    })]\n  });\n};\n\nexport default VariableEditor;","map":{"version":3,"names":["React","useCallback","useEffect","useState","Alert","InlineField","Input","Select","migrateStringQueriesToObjectQueries","AzureQueryType","useLastError","LogsQueryEditor","Space","AZURE_QUERY_VARIABLE_TYPE_OPTIONS","label","value","GrafanaTemplateVariableFn","LogAnalytics","GrafanaTemplateVariableFnInput","query","updateQuery","datasource","inputVal","setInputVal","grafanaTemplateVariableFn","rawQuery","onRunQuery","newQuery","then","updatedQuery","queryType","kind","onChange","event","target","VariableEditor","props","defaultQuery","refId","setQuery","migratedQuery","onQueryTypeChange","selectableValue","onLogsQueryChange","queryChange","azureLogAnalytics","errorMessage","setError","variableOptionGroup","options","subscription"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/VariableEditor/VariableEditor.tsx"],"sourcesContent":["import React, { ChangeEvent, useCallback, useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Alert, InlineField, Input, Select } from '@grafana/ui';\n\nimport DataSource from '../../datasource';\nimport { migrateStringQueriesToObjectQueries } from '../../grafanaTemplateVariableFns';\nimport { AzureMonitorQuery, AzureQueryType } from '../../types';\nimport useLastError from '../../utils/useLastError';\nimport LogsQueryEditor from '../LogsQueryEditor';\nimport { Space } from '../Space';\n\nconst AZURE_QUERY_VARIABLE_TYPE_OPTIONS = [\n  { label: 'Grafana Query Function', value: AzureQueryType.GrafanaTemplateVariableFn },\n  { label: 'Logs', value: AzureQueryType.LogAnalytics },\n];\n\nconst GrafanaTemplateVariableFnInput = ({\n  query,\n  updateQuery,\n  datasource,\n}: {\n  query: AzureMonitorQuery;\n  updateQuery: (val: AzureMonitorQuery) => void;\n  datasource: DataSource;\n}) => {\n  const [inputVal, setInputVal] = useState('');\n  useEffect(() => {\n    setInputVal(query.grafanaTemplateVariableFn?.rawQuery || '');\n  }, [query.grafanaTemplateVariableFn?.rawQuery]);\n\n  const onRunQuery = useCallback(\n    (newQuery: string) => {\n      migrateStringQueriesToObjectQueries(newQuery, { datasource }).then((updatedQuery) => {\n        if (updatedQuery.queryType === AzureQueryType.GrafanaTemplateVariableFn) {\n          updateQuery(updatedQuery);\n        } else {\n          updateQuery({\n            ...query,\n            grafanaTemplateVariableFn: {\n              kind: 'UnknownQuery',\n              rawQuery: newQuery,\n            },\n          });\n        }\n      });\n    },\n    [datasource, query, updateQuery]\n  );\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setInputVal(event.target.value);\n  };\n\n  return (\n    <InlineField label=\"Grafana template variable function\">\n      <Input\n        placeholder={'type a grafana template variable function, ex: Subscriptions()'}\n        value={inputVal}\n        onChange={onChange}\n        onBlur={() => onRunQuery(inputVal)}\n      />\n    </InlineField>\n  );\n};\n\ntype Props = {\n  query: AzureMonitorQuery | string;\n  onChange: (query: AzureMonitorQuery) => void;\n  datasource: DataSource;\n};\n\nconst VariableEditor = (props: Props) => {\n  const defaultQuery: AzureMonitorQuery = {\n    refId: 'A',\n    queryType: AzureQueryType.GrafanaTemplateVariableFn,\n  };\n  const [query, setQuery] = useState(defaultQuery);\n\n  useEffect(() => {\n    migrateStringQueriesToObjectQueries(props.query, { datasource: props.datasource }).then((migratedQuery) => {\n      setQuery(migratedQuery);\n    });\n  }, [props.query, props.datasource]);\n\n  const onQueryTypeChange = (selectableValue: SelectableValue) => {\n    if (selectableValue.value) {\n      setQuery({\n        ...query,\n        queryType: selectableValue.value,\n      });\n    }\n  };\n  const onLogsQueryChange = (queryChange: AzureMonitorQuery) => {\n    setQuery(queryChange);\n\n    // only hit backend if there's something to query (prevents error when selecting the resource before pinging a query)\n    if (queryChange.azureLogAnalytics?.query) {\n      props.onChange(queryChange);\n    }\n  };\n\n  const [errorMessage, setError] = useLastError();\n\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    // TODO: figure out a way to filter out the current variable from the variables list\n    // options: props.datasource.getVariables().map((v) => ({ label: v, value: v })),\n    options: [],\n  };\n\n  return (\n    <>\n      <InlineField label=\"Select query type\">\n        <Select\n          aria-label=\"select query type\"\n          onChange={onQueryTypeChange}\n          options={AZURE_QUERY_VARIABLE_TYPE_OPTIONS}\n          width={25}\n          value={query.queryType}\n        />\n      </InlineField>\n      {query.queryType === AzureQueryType.LogAnalytics && (\n        <>\n          <LogsQueryEditor\n            subscriptionId={query.subscription}\n            query={query}\n            datasource={props.datasource}\n            onChange={onLogsQueryChange}\n            variableOptionGroup={variableOptionGroup}\n            setError={setError}\n            hideFormatAs={true}\n          />\n          {errorMessage && (\n            <>\n              <Space v={2} />\n              <Alert severity=\"error\" title=\"An error occurred while requesting metadata from Azure Monitor\">\n                {errorMessage}\n              </Alert>\n            </>\n          )}\n        </>\n      )}\n      {query.queryType === AzureQueryType.GrafanaTemplateVariableFn && (\n        <GrafanaTemplateVariableFnInput query={query} updateQuery={props.onChange} datasource={props.datasource} />\n      )}\n    </>\n  );\n};\n\nexport default VariableEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}