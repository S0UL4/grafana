{"ast":null,"code":"import { config } from '../config';\nimport { locationService } from '../services';\nimport { getEchoSrv, EchoEventType } from '../services/EchoSrv';\n\n/**\n * Helper function to report meta analytics to the {@link EchoSrv}.\n *\n * @public\n */\nexport const reportMetaAnalytics = payload => {\n  getEchoSrv().addEvent({\n    type: EchoEventType.MetaAnalytics,\n    payload\n  });\n};\n/**\n * Helper function to report pageview events to the {@link EchoSrv}.\n *\n * @public\n */\n\nexport const reportPageview = () => {\n  var _config$appSubUrl;\n\n  const location = locationService.getLocation();\n  const page = `${(_config$appSubUrl = config.appSubUrl) !== null && _config$appSubUrl !== void 0 ? _config$appSubUrl : ''}${location.pathname}${location.search}${location.hash}`;\n  getEchoSrv().addEvent({\n    type: EchoEventType.Pageview,\n    payload: {\n      page\n    }\n  });\n};\n/**\n * Helper function to report interaction events to the {@link EchoSrv}.\n *\n * @public\n */\n\nexport const reportInteraction = (interactionName, properties) => {\n  getEchoSrv().addEvent({\n    type: EchoEventType.Interaction,\n    payload: {\n      interactionName,\n      properties\n    }\n  });\n};\n/**\n * Helper function to report experimentview events to the {@link EchoSrv}.\n *\n * @public\n */\n\nexport const reportExperimentView = (id, group, variant) => {\n  getEchoSrv().addEvent({\n    type: EchoEventType.ExperimentView,\n    payload: {\n      experimentId: id,\n      experimentGroup: group,\n      experimentVariant: variant\n    }\n  });\n};","map":{"version":3,"names":["config","locationService","getEchoSrv","EchoEventType","reportMetaAnalytics","payload","addEvent","type","MetaAnalytics","reportPageview","location","getLocation","page","appSubUrl","pathname","search","hash","Pageview","reportInteraction","interactionName","properties","Interaction","reportExperimentView","id","group","variant","ExperimentView","experimentId","experimentGroup","experimentVariant"],"sources":["/home/soula/grafana/packages/grafana-runtime/src/utils/analytics.ts"],"sourcesContent":["import { config } from '../config';\nimport { locationService } from '../services';\nimport { getEchoSrv, EchoEventType } from '../services/EchoSrv';\nimport {\n  ExperimentViewEchoEvent,\n  InteractionEchoEvent,\n  MetaAnalyticsEvent,\n  MetaAnalyticsEventPayload,\n  PageviewEchoEvent,\n} from '../types/analytics';\n\n/**\n * Helper function to report meta analytics to the {@link EchoSrv}.\n *\n * @public\n */\nexport const reportMetaAnalytics = (payload: MetaAnalyticsEventPayload) => {\n  getEchoSrv().addEvent<MetaAnalyticsEvent>({\n    type: EchoEventType.MetaAnalytics,\n    payload,\n  });\n};\n\n/**\n * Helper function to report pageview events to the {@link EchoSrv}.\n *\n * @public\n */\nexport const reportPageview = () => {\n  const location = locationService.getLocation();\n  const page = `${config.appSubUrl ?? ''}${location.pathname}${location.search}${location.hash}`;\n  getEchoSrv().addEvent<PageviewEchoEvent>({\n    type: EchoEventType.Pageview,\n    payload: {\n      page,\n    },\n  });\n};\n\n/**\n * Helper function to report interaction events to the {@link EchoSrv}.\n *\n * @public\n */\nexport const reportInteraction = (interactionName: string, properties?: Record<string, any>) => {\n  getEchoSrv().addEvent<InteractionEchoEvent>({\n    type: EchoEventType.Interaction,\n    payload: {\n      interactionName,\n      properties,\n    },\n  });\n};\n\n/**\n * Helper function to report experimentview events to the {@link EchoSrv}.\n *\n * @public\n */\nexport const reportExperimentView = (id: string, group: string, variant: string) => {\n  getEchoSrv().addEvent<ExperimentViewEchoEvent>({\n    type: EchoEventType.ExperimentView,\n    payload: {\n      experimentId: id,\n      experimentGroup: group,\n      experimentVariant: variant,\n    },\n  });\n};\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,qBAA1C;;AASA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,IAAwC;EACzEH,UAAU,GAAGI,QAAb,CAA0C;IACxCC,IAAI,EAAEJ,aAAa,CAACK,aADoB;IAExCH;EAFwC,CAA1C;AAID,CALM;AAOP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,cAAc,GAAG,MAAM;EAAA;;EAClC,MAAMC,QAAQ,GAAGT,eAAe,CAACU,WAAhB,EAAjB;EACA,MAAMC,IAAI,GAAI,GAAD,qBAAGZ,MAAM,CAACa,SAAV,iEAAuB,EAAG,GAAEH,QAAQ,CAACI,QAAS,GAAEJ,QAAQ,CAACK,MAAO,GAAEL,QAAQ,CAACM,IAAK,EAA7F;EACAd,UAAU,GAAGI,QAAb,CAAyC;IACvCC,IAAI,EAAEJ,aAAa,CAACc,QADmB;IAEvCZ,OAAO,EAAE;MACPO;IADO;EAF8B,CAAzC;AAMD,CATM;AAWP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,iBAAiB,GAAG,CAACC,eAAD,EAA0BC,UAA1B,KAA+D;EAC9FlB,UAAU,GAAGI,QAAb,CAA4C;IAC1CC,IAAI,EAAEJ,aAAa,CAACkB,WADsB;IAE1ChB,OAAO,EAAE;MACPc,eADO;MAEPC;IAFO;EAFiC,CAA5C;AAOD,CARM;AAUP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,oBAAoB,GAAG,CAACC,EAAD,EAAaC,KAAb,EAA4BC,OAA5B,KAAgD;EAClFvB,UAAU,GAAGI,QAAb,CAA+C;IAC7CC,IAAI,EAAEJ,aAAa,CAACuB,cADyB;IAE7CrB,OAAO,EAAE;MACPsB,YAAY,EAAEJ,EADP;MAEPK,eAAe,EAAEJ,KAFV;MAGPK,iBAAiB,EAAEJ;IAHZ;EAFoC,CAA/C;AAQD,CATM"},"metadata":{},"sourceType":"module"}