{"ast":null,"code":"import TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nexport const standard = {\n  id: 'osm-standard',\n  name: 'Open Street Map',\n  description: 'Add map from a collaborative free geographic world database',\n  isBaseMap: true,\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param options\n   */\n  create: async (map, options, eventBus) => ({\n    init: () => {\n      return new TileLayer({\n        source: new OSM()\n      });\n    }\n  })\n};\nexport const osmLayers = [standard];","map":{"version":3,"names":["TileLayer","OSM","standard","id","name","description","isBaseMap","create","map","options","eventBus","init","source","osmLayers"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/layers/basemaps/osm.ts"],"sourcesContent":["import Map from 'ol/Map';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\n\nimport { MapLayerRegistryItem, MapLayerOptions, EventBus } from '@grafana/data';\n\nexport const standard: MapLayerRegistryItem = {\n  id: 'osm-standard',\n  name: 'Open Street Map',\n  description: 'Add map from a collaborative free geographic world database',\n  isBaseMap: true,\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param options\n   */\n  create: async (map: Map, options: MapLayerOptions, eventBus: EventBus) => ({\n    init: () => {\n      return new TileLayer({\n        source: new OSM(),\n      });\n    },\n  }),\n};\n\nexport const osmLayers = [standard];\n"],"mappings":"AACA,OAAOA,SAAP,MAAsB,eAAtB;AACA,OAAOC,GAAP,MAAgB,eAAhB;AAIA,OAAO,MAAMC,QAA8B,GAAG;EAC5CC,EAAE,EAAE,cADwC;EAE5CC,IAAI,EAAE,iBAFsC;EAG5CC,WAAW,EAAE,6DAH+B;EAI5CC,SAAS,EAAE,IAJiC;;EAM5C;AACF;AACA;AACA;EACEC,MAAM,EAAE,OAAOC,GAAP,EAAiBC,OAAjB,EAA2CC,QAA3C,MAAmE;IACzEC,IAAI,EAAE,MAAM;MACV,OAAO,IAAIX,SAAJ,CAAc;QACnBY,MAAM,EAAE,IAAIX,GAAJ;MADW,CAAd,CAAP;IAGD;EALwE,CAAnE;AAVoC,CAAvC;AAmBP,OAAO,MAAMY,SAAS,GAAG,CAACX,QAAD,CAAlB"},"metadata":{},"sourceType":"module"}