{"ast":null,"code":"/**\n * Returns true if both frames have the same name, fields, labels and configs.\n *\n * @example\n * To compare multiple frames use:\n * ```\n * compareArrayValues(a, b, framesHaveSameStructure);\n * ```\n * NOTE: this does a shallow check on the FieldConfig properties, when using the query\n * editor, this should be sufficient, however if applications are mutating properties\n * deep in the FieldConfig this will not recognize a change\n *\n * @beta\n */\nexport function compareDataFrameStructures(a, b, skipConfig) {\n  var _a$fields, _b$fields;\n\n  if (a === b) {\n    return true;\n  }\n\n  if ((a === null || a === void 0 ? void 0 : (_a$fields = a.fields) === null || _a$fields === void 0 ? void 0 : _a$fields.length) !== (b === null || b === void 0 ? void 0 : (_b$fields = b.fields) === null || _b$fields === void 0 ? void 0 : _b$fields.length)) {\n    return false;\n  }\n\n  if (a.name !== b.name) {\n    return false;\n  }\n\n  for (let i = 0; i < a.fields.length; i++) {\n    const fA = a.fields[i];\n    const fB = b.fields[i];\n\n    if (fA.type !== fB.type || fA.name !== fB.name) {\n      return false;\n    } // Do not check the config fields\n\n\n    if (skipConfig) {\n      continue;\n    } // Check if labels are different\n\n\n    if (fA.labels && fB.labels && !shallowCompare(fA.labels, fB.labels)) {\n      return false;\n    }\n\n    const cfgA = fA.config;\n    const cfgB = fB.config;\n    let aKeys = Object.keys(cfgA);\n    let bKeys = Object.keys(cfgB);\n\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n\n    for (const key of aKeys) {\n      if (!(key in cfgB)) {\n        return false;\n      }\n\n      if (key === 'interval') {\n        continue;\n      }\n\n      if (key === 'custom') {\n        if (!shallowCompare(cfgA[key], cfgB[key])) {\n          return false;\n        }\n      } else if (cfgA[key] !== cfgB[key]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * Check if all values in two arrays match the compare funciton\n *\n * @beta\n */\n\nexport function compareArrayValues(a, b, cmp) {\n  if (a === b) {\n    return true;\n  }\n\n  if ((a === null || a === void 0 ? void 0 : a.length) !== (b === null || b === void 0 ? void 0 : b.length)) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (!cmp(a[i], b[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nconst defaultCmp = (a, b) => a === b;\n/**\n * Checks if two objects are equal shallowly\n *\n * @beta\n */\n\n\nexport function shallowCompare(a, b, cmp = defaultCmp) {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  for (let key of aKeys) {\n    //@ts-ignore\n    if (!cmp(a[key], b[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"names":["compareDataFrameStructures","a","b","skipConfig","fields","length","name","i","fA","fB","type","labels","shallowCompare","cfgA","config","cfgB","aKeys","Object","keys","bKeys","key","compareArrayValues","cmp","defaultCmp"],"sources":["/home/soula/grafana/packages/grafana-data/src/dataframe/frameComparisons.ts"],"sourcesContent":["import { DataFrame } from '../types/dataFrame';\n\n/**\n * Returns true if both frames have the same name, fields, labels and configs.\n *\n * @example\n * To compare multiple frames use:\n * ```\n * compareArrayValues(a, b, framesHaveSameStructure);\n * ```\n * NOTE: this does a shallow check on the FieldConfig properties, when using the query\n * editor, this should be sufficient, however if applications are mutating properties\n * deep in the FieldConfig this will not recognize a change\n *\n * @beta\n */\nexport function compareDataFrameStructures(a: DataFrame, b: DataFrame, skipConfig?: boolean): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a?.fields?.length !== b?.fields?.length) {\n    return false;\n  }\n\n  if (a.name !== b.name) {\n    return false;\n  }\n\n  for (let i = 0; i < a.fields.length; i++) {\n    const fA = a.fields[i];\n    const fB = b.fields[i];\n\n    if (fA.type !== fB.type || fA.name !== fB.name) {\n      return false;\n    }\n\n    // Do not check the config fields\n    if (skipConfig) {\n      continue;\n    }\n\n    // Check if labels are different\n    if (fA.labels && fB.labels && !shallowCompare(fA.labels, fB.labels)) {\n      return false;\n    }\n\n    const cfgA = fA.config as any;\n    const cfgB = fB.config as any;\n\n    let aKeys = Object.keys(cfgA);\n    let bKeys = Object.keys(cfgB);\n\n    if (aKeys.length !== bKeys.length) {\n      return false;\n    }\n\n    for (const key of aKeys) {\n      if (!(key in cfgB)) {\n        return false;\n      }\n\n      if (key === 'interval') {\n        continue;\n      }\n      if (key === 'custom') {\n        if (!shallowCompare(cfgA[key], cfgB[key])) {\n          return false;\n        }\n      } else if (cfgA[key] !== cfgB[key]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Check if all values in two arrays match the compare funciton\n *\n * @beta\n */\nexport function compareArrayValues<T>(a: T[], b: T[], cmp: (a: T, b: T) => boolean) {\n  if (a === b) {\n    return true;\n  }\n  if (a?.length !== b?.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (!cmp(a[i], b[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype Cmp = (valA: any, valB: any) => boolean;\n\nconst defaultCmp: Cmp = (a, b) => a === b;\n\n/**\n * Checks if two objects are equal shallowly\n *\n * @beta\n */\nexport function shallowCompare<T extends {}>(a: T, b: T, cmp: Cmp = defaultCmp) {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  for (let key of aKeys) {\n    //@ts-ignore\n    if (!cmp(a[key], b[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}