{"ast":null,"code":"import { FieldColorModeId, FieldConfigProperty, FieldType, getFieldDisplayName, PanelPlugin, VizOrientation } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { StackingMode, VisibilityMode } from '@grafana/schema';\nimport { graphFieldOptions, commonOptionsBuilder } from '@grafana/ui';\nimport { BarChartPanel } from './BarChartPanel';\nimport { TickSpacingEditor } from './TickSpacingEditor';\nimport { defaultBarChartFieldConfig, defaultPanelOptions } from './models.gen';\nimport { BarChartSuggestionsSupplier } from './suggestions';\nimport { prepareBarChartDisplayValues } from './utils';\nexport const plugin = new PanelPlugin(BarChartPanel).useFieldConfig({\n  standardOptions: {\n    [FieldConfigProperty.Color]: {\n      settings: {\n        byValueSupport: true,\n        preferThresholdsMode: false\n      },\n      defaultValue: {\n        mode: FieldColorModeId.PaletteClassic\n      }\n    }\n  },\n  useCustomConfig: builder => {\n    const cfg = defaultBarChartFieldConfig;\n    builder.addSliderInput({\n      path: 'lineWidth',\n      name: 'Line width',\n      defaultValue: cfg.lineWidth,\n      settings: {\n        min: 0,\n        max: 10,\n        step: 1\n      }\n    }).addSliderInput({\n      path: 'fillOpacity',\n      name: 'Fill opacity',\n      defaultValue: cfg.fillOpacity,\n      settings: {\n        min: 0,\n        max: 100,\n        step: 1\n      }\n    }).addRadio({\n      path: 'gradientMode',\n      name: 'Gradient mode',\n      defaultValue: graphFieldOptions.fillGradient[0].value,\n      settings: {\n        options: graphFieldOptions.fillGradient\n      }\n    });\n    commonOptionsBuilder.addAxisConfig(builder, cfg, false);\n    commonOptionsBuilder.addHideFrom(builder);\n  }\n}).setPanelOptions((builder, context) => {\n  var _context$options, _viz$fields;\n\n  const disp = prepareBarChartDisplayValues(context.data, config.theme2, (_context$options = context.options) !== null && _context$options !== void 0 ? _context$options : {});\n  let xaxisPlaceholder = 'First string or time field';\n  const viz = 'viz' in disp ? disp.viz[0] : undefined;\n\n  if (viz !== null && viz !== void 0 && (_viz$fields = viz.fields) !== null && _viz$fields !== void 0 && _viz$fields.length) {\n    const first = viz.fields[0];\n    xaxisPlaceholder += ` (${getFieldDisplayName(first, viz)})`;\n  }\n\n  builder.addFieldNamePicker({\n    path: 'xField',\n    name: 'X Axis',\n    settings: {\n      placeholderText: xaxisPlaceholder\n    }\n  }).addRadio({\n    path: 'orientation',\n    name: 'Orientation',\n    settings: {\n      options: [{\n        value: VizOrientation.Auto,\n        label: 'Auto'\n      }, {\n        value: VizOrientation.Horizontal,\n        label: 'Horizontal'\n      }, {\n        value: VizOrientation.Vertical,\n        label: 'Vertical'\n      }]\n    },\n    defaultValue: defaultPanelOptions.orientation\n  }).addSliderInput({\n    path: 'xTickLabelRotation',\n    name: 'Rotate bar labels',\n    defaultValue: defaultPanelOptions.xTickLabelRotation,\n    settings: {\n      min: -90,\n      max: 90,\n      step: 15,\n      marks: {\n        '-90': '-90°',\n        '-45': '-45°',\n        0: '0°',\n        45: '45°',\n        90: '90°'\n      },\n      included: false\n    },\n    showIf: opts => {\n      return opts.orientation === VizOrientation.Auto || opts.orientation === VizOrientation.Vertical;\n    }\n  }).addNumberInput({\n    path: 'xTickLabelMaxLength',\n    name: 'Bar label max length',\n    description: 'Bar labels will be truncated to the length provided',\n    settings: {\n      placeholder: 'None',\n      min: 0\n    }\n  }).addCustomEditor({\n    id: 'xTickLabelSpacing',\n    path: 'xTickLabelSpacing',\n    name: 'Bar labels minimum spacing',\n    defaultValue: defaultPanelOptions.xTickLabelSpacing,\n    editor: TickSpacingEditor\n  }).addRadio({\n    path: 'showValue',\n    name: 'Show values',\n    settings: {\n      options: [{\n        value: VisibilityMode.Auto,\n        label: 'Auto'\n      }, {\n        value: VisibilityMode.Always,\n        label: 'Always'\n      }, {\n        value: VisibilityMode.Never,\n        label: 'Never'\n      }]\n    },\n    defaultValue: defaultPanelOptions.showValue\n  }).addRadio({\n    path: 'stacking',\n    name: 'Stacking',\n    settings: {\n      options: graphFieldOptions.stacking\n    },\n    defaultValue: defaultPanelOptions.stacking\n  }).addSliderInput({\n    path: 'groupWidth',\n    name: 'Group width',\n    defaultValue: defaultPanelOptions.groupWidth,\n    settings: {\n      min: 0,\n      max: 1,\n      step: 0.01\n    },\n    showIf: (c, data) => {\n      if (c.stacking && c.stacking !== StackingMode.None) {\n        return false;\n      }\n\n      return countNumberFields(data) !== 1;\n    }\n  }).addSliderInput({\n    path: 'barWidth',\n    name: 'Bar width',\n    defaultValue: defaultPanelOptions.barWidth,\n    settings: {\n      min: 0,\n      max: 1,\n      step: 0.01\n    }\n  }).addSliderInput({\n    path: 'barRadius',\n    name: 'Bar radius',\n    defaultValue: defaultPanelOptions.barRadius,\n    settings: {\n      min: 0,\n      max: 0.5,\n      step: 0.05\n    }\n  });\n  builder.addFieldNamePicker({\n    path: 'colorByField',\n    name: 'Color by field',\n    description: 'Use the color value for a sibling field to color each bar value.'\n  });\n  commonOptionsBuilder.addTooltipOptions(builder);\n  commonOptionsBuilder.addLegendOptions(builder);\n  commonOptionsBuilder.addTextSizeOptions(builder, false);\n}).setSuggestionsSupplier(new BarChartSuggestionsSupplier());\n\nfunction countNumberFields(data) {\n  let count = 0;\n\n  if (data) {\n    for (const frame of data) {\n      for (const field of frame.fields) {\n        if (field.type === FieldType.number) {\n          count++;\n        }\n      }\n    }\n  }\n\n  return count;\n}","map":{"version":3,"names":["FieldColorModeId","FieldConfigProperty","FieldType","getFieldDisplayName","PanelPlugin","VizOrientation","config","StackingMode","VisibilityMode","graphFieldOptions","commonOptionsBuilder","BarChartPanel","TickSpacingEditor","defaultBarChartFieldConfig","defaultPanelOptions","BarChartSuggestionsSupplier","prepareBarChartDisplayValues","plugin","useFieldConfig","standardOptions","Color","settings","byValueSupport","preferThresholdsMode","defaultValue","mode","PaletteClassic","useCustomConfig","builder","cfg","addSliderInput","path","name","lineWidth","min","max","step","fillOpacity","addRadio","fillGradient","value","options","addAxisConfig","addHideFrom","setPanelOptions","context","disp","data","theme2","xaxisPlaceholder","viz","undefined","fields","length","first","addFieldNamePicker","placeholderText","Auto","label","Horizontal","Vertical","orientation","xTickLabelRotation","marks","included","showIf","opts","addNumberInput","description","placeholder","addCustomEditor","id","xTickLabelSpacing","editor","Always","Never","showValue","stacking","groupWidth","c","None","countNumberFields","barWidth","barRadius","addTooltipOptions","addLegendOptions","addTextSizeOptions","setSuggestionsSupplier","count","frame","field","type","number"],"sources":["/home/soula/grafana/public/app/plugins/panel/barchart/module.tsx"],"sourcesContent":["import {\n  DataFrame,\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  getFieldDisplayName,\n  PanelPlugin,\n  VizOrientation,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { StackingMode, VisibilityMode } from '@grafana/schema';\nimport { graphFieldOptions, commonOptionsBuilder } from '@grafana/ui';\n\nimport { BarChartPanel } from './BarChartPanel';\nimport { TickSpacingEditor } from './TickSpacingEditor';\nimport { BarChartFieldConfig, PanelOptions, defaultBarChartFieldConfig, defaultPanelOptions } from './models.gen';\nimport { BarChartSuggestionsSupplier } from './suggestions';\nimport { prepareBarChartDisplayValues } from './utils';\n\nexport const plugin = new PanelPlugin<PanelOptions, BarChartFieldConfig>(BarChartPanel)\n  .useFieldConfig({\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n          preferThresholdsMode: false,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n    },\n    useCustomConfig: (builder) => {\n      const cfg = defaultBarChartFieldConfig;\n\n      builder\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: cfg.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n        })\n        .addSliderInput({\n          path: 'fillOpacity',\n          name: 'Fill opacity',\n          defaultValue: cfg.fillOpacity,\n          settings: {\n            min: 0,\n            max: 100,\n            step: 1,\n          },\n        })\n        .addRadio({\n          path: 'gradientMode',\n          name: 'Gradient mode',\n          defaultValue: graphFieldOptions.fillGradient[0].value,\n          settings: {\n            options: graphFieldOptions.fillGradient,\n          },\n        });\n\n      commonOptionsBuilder.addAxisConfig(builder, cfg, false);\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  })\n  .setPanelOptions((builder, context) => {\n    const disp = prepareBarChartDisplayValues(context.data, config.theme2, context.options ?? ({} as any));\n    let xaxisPlaceholder = 'First string or time field';\n    const viz = 'viz' in disp ? disp.viz[0] : undefined;\n    if (viz?.fields?.length) {\n      const first = viz.fields[0];\n      xaxisPlaceholder += ` (${getFieldDisplayName(first, viz)})`;\n    }\n\n    builder\n      .addFieldNamePicker({\n        path: 'xField',\n        name: 'X Axis',\n        settings: {\n          placeholderText: xaxisPlaceholder,\n        },\n      })\n      .addRadio({\n        path: 'orientation',\n        name: 'Orientation',\n        settings: {\n          options: [\n            { value: VizOrientation.Auto, label: 'Auto' },\n            { value: VizOrientation.Horizontal, label: 'Horizontal' },\n            { value: VizOrientation.Vertical, label: 'Vertical' },\n          ],\n        },\n        defaultValue: defaultPanelOptions.orientation,\n      })\n      .addSliderInput({\n        path: 'xTickLabelRotation',\n        name: 'Rotate bar labels',\n        defaultValue: defaultPanelOptions.xTickLabelRotation,\n        settings: {\n          min: -90,\n          max: 90,\n          step: 15,\n          marks: { '-90': '-90°', '-45': '-45°', 0: '0°', 45: '45°', 90: '90°' },\n          included: false,\n        },\n        showIf: (opts) => {\n          return opts.orientation === VizOrientation.Auto || opts.orientation === VizOrientation.Vertical;\n        },\n      })\n      .addNumberInput({\n        path: 'xTickLabelMaxLength',\n        name: 'Bar label max length',\n        description: 'Bar labels will be truncated to the length provided',\n        settings: {\n          placeholder: 'None',\n          min: 0,\n        },\n      })\n      .addCustomEditor({\n        id: 'xTickLabelSpacing',\n        path: 'xTickLabelSpacing',\n        name: 'Bar labels minimum spacing',\n        defaultValue: defaultPanelOptions.xTickLabelSpacing,\n        editor: TickSpacingEditor,\n      })\n      .addRadio({\n        path: 'showValue',\n        name: 'Show values',\n        settings: {\n          options: [\n            { value: VisibilityMode.Auto, label: 'Auto' },\n            { value: VisibilityMode.Always, label: 'Always' },\n            { value: VisibilityMode.Never, label: 'Never' },\n          ],\n        },\n        defaultValue: defaultPanelOptions.showValue,\n      })\n      .addRadio({\n        path: 'stacking',\n        name: 'Stacking',\n        settings: {\n          options: graphFieldOptions.stacking,\n        },\n        defaultValue: defaultPanelOptions.stacking,\n      })\n      .addSliderInput({\n        path: 'groupWidth',\n        name: 'Group width',\n        defaultValue: defaultPanelOptions.groupWidth,\n        settings: {\n          min: 0,\n          max: 1,\n          step: 0.01,\n        },\n        showIf: (c, data) => {\n          if (c.stacking && c.stacking !== StackingMode.None) {\n            return false;\n          }\n          return countNumberFields(data) !== 1;\n        },\n      })\n      .addSliderInput({\n        path: 'barWidth',\n        name: 'Bar width',\n        defaultValue: defaultPanelOptions.barWidth,\n        settings: {\n          min: 0,\n          max: 1,\n          step: 0.01,\n        },\n      })\n      .addSliderInput({\n        path: 'barRadius',\n        name: 'Bar radius',\n        defaultValue: defaultPanelOptions.barRadius,\n        settings: {\n          min: 0,\n          max: 0.5,\n          step: 0.05,\n        },\n      });\n\n    builder.addFieldNamePicker({\n      path: 'colorByField',\n      name: 'Color by field',\n      description: 'Use the color value for a sibling field to color each bar value.',\n    });\n\n    commonOptionsBuilder.addTooltipOptions(builder);\n    commonOptionsBuilder.addLegendOptions(builder);\n    commonOptionsBuilder.addTextSizeOptions(builder, false);\n  })\n  .setSuggestionsSupplier(new BarChartSuggestionsSupplier());\n\nfunction countNumberFields(data?: DataFrame[]): number {\n  let count = 0;\n  if (data) {\n    for (const frame of data) {\n      for (const field of frame.fields) {\n        if (field.type === FieldType.number) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}