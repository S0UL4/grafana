{"ast":null,"code":"import { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { PluginIncludeType, PluginType } from '@grafana/data';\nimport { usePluginConfig } from '../hooks/usePluginConfig';\nimport { isOrgAdmin } from '../permissions';\nimport { PluginTabIds, PluginTabLabels } from '../types';\nexport const usePluginDetailsTabs = (plugin, defaultTabs = []) => {\n  const {\n    loading,\n    error,\n    value: pluginConfig\n  } = usePluginConfig(plugin);\n  const isPublished = Boolean(plugin === null || plugin === void 0 ? void 0 : plugin.isPublished);\n  const {\n    pathname\n  } = useLocation();\n  const [tabs, defaultTab] = useMemo(() => {\n    const canConfigurePlugins = isOrgAdmin();\n    const tabs = [...defaultTabs];\n    let defaultTab;\n\n    if (isPublished) {\n      tabs.push({\n        label: PluginTabLabels.VERSIONS,\n        icon: 'history',\n        id: PluginTabIds.VERSIONS,\n        href: `${pathname}?page=${PluginTabIds.VERSIONS}`\n      });\n    } // Not extending the tabs with the config pages if the plugin is not installed\n\n\n    if (!pluginConfig) {\n      defaultTab = PluginTabIds.OVERVIEW;\n      return [tabs, defaultTab];\n    }\n\n    if (canConfigurePlugins) {\n      if (pluginConfig.meta.type === PluginType.app) {\n        var _pluginConfig$meta$in;\n\n        if (pluginConfig.angularConfigCtrl) {\n          tabs.push({\n            label: 'Config',\n            icon: 'cog',\n            id: PluginTabIds.CONFIG,\n            href: `${pathname}?page=${PluginTabIds.CONFIG}`\n          });\n          defaultTab = PluginTabIds.CONFIG;\n        }\n\n        if (pluginConfig.configPages) {\n          for (const page of pluginConfig.configPages) {\n            tabs.push({\n              label: page.title,\n              icon: page.icon,\n              id: page.id,\n              href: `${pathname}?page=${page.id}`\n            });\n\n            if (!defaultTab) {\n              defaultTab = page.id;\n            }\n          }\n        }\n\n        if ((_pluginConfig$meta$in = pluginConfig.meta.includes) !== null && _pluginConfig$meta$in !== void 0 && _pluginConfig$meta$in.find(include => include.type === PluginIncludeType.dashboard)) {\n          tabs.push({\n            label: 'Dashboards',\n            icon: 'apps',\n            id: PluginTabIds.DASHBOARDS,\n            href: `${pathname}?page=${PluginTabIds.DASHBOARDS}`\n          });\n        }\n      }\n    }\n\n    if (!defaultTab) {\n      defaultTab = PluginTabIds.OVERVIEW;\n    }\n\n    return [tabs, defaultTab];\n  }, [pluginConfig, defaultTabs, pathname, isPublished]);\n  return {\n    error,\n    loading,\n    tabs,\n    defaultTab\n  };\n};","map":{"version":3,"names":["useMemo","useLocation","PluginIncludeType","PluginType","usePluginConfig","isOrgAdmin","PluginTabIds","PluginTabLabels","usePluginDetailsTabs","plugin","defaultTabs","loading","error","value","pluginConfig","isPublished","Boolean","pathname","tabs","defaultTab","canConfigurePlugins","push","label","VERSIONS","icon","id","href","OVERVIEW","meta","type","app","angularConfigCtrl","CONFIG","configPages","page","title","includes","find","include","dashboard","DASHBOARDS"],"sources":["/home/soula/grafana/public/app/features/plugins/admin/hooks/usePluginDetailsTabs.tsx"],"sourcesContent":["import { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { PluginIncludeType, PluginType } from '@grafana/data';\n\nimport { usePluginConfig } from '../hooks/usePluginConfig';\nimport { isOrgAdmin } from '../permissions';\nimport { CatalogPlugin, PluginDetailsTab, PluginTabIds, PluginTabLabels } from '../types';\n\ntype ReturnType = {\n  error: Error | undefined;\n  loading: boolean;\n  tabs: PluginDetailsTab[];\n  defaultTab: string;\n};\n\nexport const usePluginDetailsTabs = (plugin?: CatalogPlugin, defaultTabs: PluginDetailsTab[] = []): ReturnType => {\n  const { loading, error, value: pluginConfig } = usePluginConfig(plugin);\n  const isPublished = Boolean(plugin?.isPublished);\n  const { pathname } = useLocation();\n\n  const [tabs, defaultTab] = useMemo(() => {\n    const canConfigurePlugins = isOrgAdmin();\n    const tabs: PluginDetailsTab[] = [...defaultTabs];\n    let defaultTab;\n\n    if (isPublished) {\n      tabs.push({\n        label: PluginTabLabels.VERSIONS,\n        icon: 'history',\n        id: PluginTabIds.VERSIONS,\n        href: `${pathname}?page=${PluginTabIds.VERSIONS}`,\n      });\n    }\n\n    // Not extending the tabs with the config pages if the plugin is not installed\n    if (!pluginConfig) {\n      defaultTab = PluginTabIds.OVERVIEW;\n      return [tabs, defaultTab];\n    }\n\n    if (canConfigurePlugins) {\n      if (pluginConfig.meta.type === PluginType.app) {\n        if (pluginConfig.angularConfigCtrl) {\n          tabs.push({\n            label: 'Config',\n            icon: 'cog',\n            id: PluginTabIds.CONFIG,\n            href: `${pathname}?page=${PluginTabIds.CONFIG}`,\n          });\n          defaultTab = PluginTabIds.CONFIG;\n        }\n\n        if (pluginConfig.configPages) {\n          for (const page of pluginConfig.configPages) {\n            tabs.push({\n              label: page.title,\n              icon: page.icon,\n              id: page.id,\n              href: `${pathname}?page=${page.id}`,\n            });\n            if (!defaultTab) {\n              defaultTab = page.id;\n            }\n          }\n        }\n\n        if (pluginConfig.meta.includes?.find((include) => include.type === PluginIncludeType.dashboard)) {\n          tabs.push({\n            label: 'Dashboards',\n            icon: 'apps',\n            id: PluginTabIds.DASHBOARDS,\n            href: `${pathname}?page=${PluginTabIds.DASHBOARDS}`,\n          });\n        }\n      }\n    }\n\n    if (!defaultTab) {\n      defaultTab = PluginTabIds.OVERVIEW;\n    }\n\n    return [tabs, defaultTab];\n  }, [pluginConfig, defaultTabs, pathname, isPublished]);\n\n  return {\n    error,\n    loading,\n    tabs,\n    defaultTab,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}