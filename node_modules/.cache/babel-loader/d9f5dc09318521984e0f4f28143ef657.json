{"ast":null,"code":"var _h;\n\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { Button, useTheme2 } from '@grafana/ui';\nimport { DebugSection } from './DebugSection';\nimport { DerivedField } from './DerivedField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst getStyles = theme => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  derivedField: css`\n    margin-bottom: ${theme.spacing(1)};\n  `\n});\n\nexport const DerivedFields = props => {\n  const {\n    value,\n    onChange\n  } = props;\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const [showDebug, setShowDebug] = useState(false);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n      className: \"page-heading\",\n      children: \"Derived fields\"\n    })), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.infoText,\n      children: \"Derived fields can be used to extract new fields from a log message and create a link from its value.\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"gf-form-group\",\n      children: [value && value.map((field, index) => {\n        return /*#__PURE__*/_jsx(DerivedField, {\n          className: styles.derivedField,\n          value: field,\n          onChange: newField => {\n            const newDerivedFields = [...value];\n            newDerivedFields.splice(index, 1, newField);\n            onChange(newDerivedFields);\n          },\n          onDelete: () => {\n            const newDerivedFields = [...value];\n            newDerivedFields.splice(index, 1);\n            onChange(newDerivedFields);\n          },\n          suggestions: [{\n            value: DataLinkBuiltInVars.valueRaw,\n            label: 'Raw value',\n            documentation: 'Exact string captured by the regular expression',\n            origin: VariableOrigin.Value\n          }]\n        }, index);\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          className: css`\n              margin-right: 10px;\n            `,\n          icon: \"plus\",\n          onClick: event => {\n            event.preventDefault();\n            const newDerivedFields = [...(value || []), {\n              name: '',\n              matcherRegex: ''\n            }];\n            onChange(newDerivedFields);\n          },\n          children: \"Add\"\n        }), value && value.length > 0 && /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          type: \"button\",\n          onClick: () => setShowDebug(!showDebug),\n          children: showDebug ? 'Hide example log message' : 'Show example log message'\n        })]\n      })]\n    }), showDebug && /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-group\",\n      children: /*#__PURE__*/_jsx(DebugSection, {\n        className: css`\n              margin-bottom: 10px;\n            `,\n        derivedFields: value\n      })\n    })]\n  });\n};","map":{"version":3,"names":["css","React","useState","VariableOrigin","DataLinkBuiltInVars","Button","useTheme2","DebugSection","DerivedField","getStyles","theme","infoText","spacing","colors","text","secondary","derivedField","DerivedFields","props","value","onChange","styles","showDebug","setShowDebug","map","field","index","newField","newDerivedFields","splice","valueRaw","label","documentation","origin","Value","event","preventDefault","name","matcherRegex","length"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/configuration/DerivedFields.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { DerivedFieldConfig } from '../types';\n\nimport { DebugSection } from './DebugSection';\nimport { DerivedField } from './DerivedField';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  derivedField: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n});\n\ntype Props = {\n  value?: DerivedFieldConfig[];\n  onChange: (value: DerivedFieldConfig[]) => void;\n};\n\nexport const DerivedFields = (props: Props) => {\n  const { value, onChange } = props;\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const [showDebug, setShowDebug] = useState(false);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Derived fields</h3>\n\n      <div className={styles.infoText}>\n        Derived fields can be used to extract new fields from a log message and create a link from its value.\n      </div>\n\n      <div className=\"gf-form-group\">\n        {value &&\n          value.map((field, index) => {\n            return (\n              <DerivedField\n                className={styles.derivedField}\n                key={index}\n                value={field}\n                onChange={(newField) => {\n                  const newDerivedFields = [...value];\n                  newDerivedFields.splice(index, 1, newField);\n                  onChange(newDerivedFields);\n                }}\n                onDelete={() => {\n                  const newDerivedFields = [...value];\n                  newDerivedFields.splice(index, 1);\n                  onChange(newDerivedFields);\n                }}\n                suggestions={[\n                  {\n                    value: DataLinkBuiltInVars.valueRaw,\n                    label: 'Raw value',\n                    documentation: 'Exact string captured by the regular expression',\n                    origin: VariableOrigin.Value,\n                  },\n                ]}\n              />\n            );\n          })}\n        <div>\n          <Button\n            variant=\"secondary\"\n            className={css`\n              margin-right: 10px;\n            `}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const newDerivedFields = [...(value || []), { name: '', matcherRegex: '' }];\n              onChange(newDerivedFields);\n            }}\n          >\n            Add\n          </Button>\n\n          {value && value.length > 0 && (\n            <Button variant=\"secondary\" type=\"button\" onClick={() => setShowDebug(!showDebug)}>\n              {showDebug ? 'Hide example log message' : 'Show example log message'}\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {showDebug && (\n        <div className=\"gf-form-group\">\n          <DebugSection\n            className={css`\n              margin-bottom: 10px;\n            `}\n            derivedFields={value}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}