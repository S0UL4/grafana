{"ast":null,"code":"import { get as lodashGet } from 'lodash';\nimport React, { useMemo } from 'react';\nimport { useObservable } from 'react-use';\nimport { FrameState } from 'app/features/canvas/runtime/frame';\nimport { OptionsPaneCategoryDescriptor } from 'app/features/dashboard/components/PanelEditor/OptionsPaneCategoryDescriptor';\nimport { fillOptionsPaneItems } from 'app/features/dashboard/components/PanelEditor/getVisualizationOptions';\nimport { setOptionImmutably } from 'app/features/dashboard/components/PanelEditor/utils';\nimport { activePanelSubject } from './CanvasPanel';\nimport { getElementEditor } from './editor/elementEditor';\nimport { getLayerEditor } from './editor/layerEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const InlineEditBody = () => {\n  var _activePanel$panel$co;\n\n  const activePanel = useObservable(activePanelSubject);\n  const instanceState = activePanel === null || activePanel === void 0 ? void 0 : (_activePanel$panel$co = activePanel.panel.context) === null || _activePanel$panel$co === void 0 ? void 0 : _activePanel$panel$co.instanceState;\n  const pane = useMemo(() => {\n    const state = instanceState;\n\n    if (!state) {\n      return new OptionsPaneCategoryDescriptor({\n        id: 'root',\n        title: 'root'\n      });\n    }\n\n    const supplier = (builder, context) => {\n      builder.addNestedOptions(getLayerEditor(instanceState));\n      const selection = state.selected;\n\n      if ((selection === null || selection === void 0 ? void 0 : selection.length) === 1) {\n        const element = selection[0];\n\n        if (!(element instanceof FrameState)) {\n          builder.addNestedOptions(getElementEditor({\n            category: [`Selected element (${element.options.name})`],\n            element,\n            scene: state.scene\n          }));\n        }\n      }\n    };\n\n    return getOptionsPaneCategoryDescriptor({}, supplier);\n  }, [instanceState]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      children: pane.items.map(v => v.render())\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: pane.categories.map(c => {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsx(\"h5\", {\n            children: c.props.title\n          }), /*#__PURE__*/_jsx(\"div\", {\n            children: c.items.map(s => s.render())\n          })]\n        }, c.props.id);\n      })\n    })]\n  });\n}; // ðŸ¤®ðŸ¤®ðŸ¤®ðŸ¤® this oddly does not actually do anything, but structure is required.  I'll try to clean it up...\n\nfunction getOptionsPaneCategoryDescriptor(props, supplier) {\n  const context = {\n    data: props.input,\n    options: props.options\n  };\n  const root = new OptionsPaneCategoryDescriptor({\n    id: 'root',\n    title: 'root'\n  });\n\n  const getOptionsPaneCategory = categoryNames => {\n    if (categoryNames !== null && categoryNames !== void 0 && categoryNames.length) {\n      const key = categoryNames[0];\n      let sub = root.categories.find(v => v.props.id === key);\n\n      if (!sub) {\n        sub = new OptionsPaneCategoryDescriptor({\n          id: key,\n          title: key\n        });\n        root.categories.push(sub);\n      }\n\n      return sub;\n    }\n\n    return root;\n  };\n\n  const access = {\n    getValue: path => lodashGet(props.options, path),\n    onChange: (path, value) => {\n      props.onChange(setOptionImmutably(props.options, path, value));\n    }\n  }; // Use the panel options loader\n\n  fillOptionsPaneItems(supplier, access, getOptionsPaneCategory, context);\n  return root;\n}","map":{"version":3,"names":["get","lodashGet","React","useMemo","useObservable","FrameState","OptionsPaneCategoryDescriptor","fillOptionsPaneItems","setOptionImmutably","activePanelSubject","getElementEditor","getLayerEditor","InlineEditBody","activePanel","instanceState","panel","context","pane","state","id","title","supplier","builder","addNestedOptions","selection","selected","length","element","category","options","name","scene","getOptionsPaneCategoryDescriptor","items","map","v","render","categories","c","props","s","data","input","root","getOptionsPaneCategory","categoryNames","key","sub","find","push","access","getValue","path","onChange","value"],"sources":["/home/soula/grafana/public/app/plugins/panel/canvas/InlineEditBody.tsx"],"sourcesContent":["import { get as lodashGet } from 'lodash';\nimport React, { useMemo } from 'react';\nimport { useObservable } from 'react-use';\n\nimport { PanelOptionsEditorBuilder, StandardEditorContext } from '@grafana/data';\nimport { PanelOptionsSupplier } from '@grafana/data/src/panel/PanelPlugin';\nimport { NestedValueAccess } from '@grafana/data/src/utils/OptionsUIBuilders';\nimport { FrameState } from 'app/features/canvas/runtime/frame';\nimport { OptionsPaneCategoryDescriptor } from 'app/features/dashboard/components/PanelEditor/OptionsPaneCategoryDescriptor';\nimport { fillOptionsPaneItems } from 'app/features/dashboard/components/PanelEditor/getVisualizationOptions';\nimport { setOptionImmutably } from 'app/features/dashboard/components/PanelEditor/utils';\n\nimport { activePanelSubject, InstanceState } from './CanvasPanel';\nimport { getElementEditor } from './editor/elementEditor';\nimport { getLayerEditor } from './editor/layerEditor';\n\nexport const InlineEditBody = () => {\n  const activePanel = useObservable(activePanelSubject);\n  const instanceState = activePanel?.panel.context?.instanceState;\n\n  const pane = useMemo(() => {\n    const state: InstanceState = instanceState;\n    if (!state) {\n      return new OptionsPaneCategoryDescriptor({ id: 'root', title: 'root' });\n    }\n\n    const supplier = (builder: PanelOptionsEditorBuilder<any>, context: StandardEditorContext<any>) => {\n      builder.addNestedOptions(getLayerEditor(instanceState));\n\n      const selection = state.selected;\n      if (selection?.length === 1) {\n        const element = selection[0];\n        if (!(element instanceof FrameState)) {\n          builder.addNestedOptions(\n            getElementEditor({\n              category: [`Selected element (${element.options.name})`],\n              element,\n              scene: state.scene,\n            })\n          );\n        }\n      }\n    };\n\n    return getOptionsPaneCategoryDescriptor({}, supplier);\n  }, [instanceState]);\n\n  return (\n    <div>\n      <div>{pane.items.map((v) => v.render())}</div>\n      <div>\n        {pane.categories.map((c) => {\n          return (\n            <div key={c.props.id}>\n              <h5>{c.props.title}</h5>\n              <div>{c.items.map((s) => s.render())}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\n// ðŸ¤®ðŸ¤®ðŸ¤®ðŸ¤® this oddly does not actually do anything, but structure is required.  I'll try to clean it up...\nfunction getOptionsPaneCategoryDescriptor<T = any>(\n  props: any,\n  supplier: PanelOptionsSupplier<T>\n): OptionsPaneCategoryDescriptor {\n  const context: StandardEditorContext<unknown, unknown> = {\n    data: props.input,\n    options: props.options,\n  };\n\n  const root = new OptionsPaneCategoryDescriptor({ id: 'root', title: 'root' });\n  const getOptionsPaneCategory = (categoryNames?: string[]): OptionsPaneCategoryDescriptor => {\n    if (categoryNames?.length) {\n      const key = categoryNames[0];\n      let sub = root.categories.find((v) => v.props.id === key);\n      if (!sub) {\n        sub = new OptionsPaneCategoryDescriptor({ id: key, title: key });\n        root.categories.push(sub);\n      }\n      return sub;\n    }\n    return root;\n  };\n\n  const access: NestedValueAccess = {\n    getValue: (path: string) => lodashGet(props.options, path),\n    onChange: (path: string, value: any) => {\n      props.onChange(setOptionImmutably(props.options as any, path, value));\n    },\n  };\n\n  // Use the panel options loader\n  fillOptionsPaneItems(supplier, access, getOptionsPaneCategory, context);\n  return root;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}