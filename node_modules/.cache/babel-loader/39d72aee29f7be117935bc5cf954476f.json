{"ast":null,"code":"const _excluded = [\"label\", \"tooltip\", \"labelWidth\", \"inputWidth\", \"inputEl\", \"className\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { InlineFormLabel } from '../FormLabel/FormLabel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultProps = {\n  labelWidth: 6,\n  inputWidth: 12\n};\n/**\n * Default form field including label used in Grafana UI. Default input element is simple <input />. You can also pass\n * custom inputEl if required in which case inputWidth and inputProps are ignored.\n */\n\nexport const FormField = _ref => {\n  let {\n    label,\n    tooltip,\n    labelWidth,\n    inputWidth,\n    inputEl,\n    className\n  } = _ref,\n      inputProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const styles = getStyles();\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: cx(styles.formField, className),\n    children: [/*#__PURE__*/_jsx(InlineFormLabel, {\n      width: labelWidth,\n      tooltip: tooltip,\n      children: label\n    }), inputEl || /*#__PURE__*/_jsx(\"input\", Object.assign({\n      type: \"text\",\n      className: `gf-form-input ${inputWidth ? `width-${inputWidth}` : ''}`\n    }, inputProps))]\n  });\n};\nFormField.displayName = 'FormField';\nFormField.defaultProps = defaultProps;\n\nconst getStyles = () => {\n  return {\n    formField: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-start;\n      text-align: left;\n      position: relative;\n    `\n  };\n};","map":{"version":3,"names":["css","cx","React","InlineFormLabel","defaultProps","labelWidth","inputWidth","FormField","label","tooltip","inputEl","className","inputProps","styles","getStyles","formField","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/FormField/FormField.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { InputHTMLAttributes, FunctionComponent } from 'react';\n\nimport { InlineFormLabel } from '../FormLabel/FormLabel';\nimport { PopoverContent } from '../Tooltip';\n\nexport interface Props extends InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  tooltip?: PopoverContent;\n  labelWidth?: number;\n  // If null no width will be specified not even default one\n  inputWidth?: number | null;\n  inputEl?: React.ReactNode;\n}\n\nconst defaultProps = {\n  labelWidth: 6,\n  inputWidth: 12,\n};\n\n/**\n * Default form field including label used in Grafana UI. Default input element is simple <input />. You can also pass\n * custom inputEl if required in which case inputWidth and inputProps are ignored.\n */\nexport const FormField: FunctionComponent<Props> = ({\n  label,\n  tooltip,\n  labelWidth,\n  inputWidth,\n  inputEl,\n  className,\n  ...inputProps\n}) => {\n  const styles = getStyles();\n  return (\n    <div className={cx(styles.formField, className)}>\n      <InlineFormLabel width={labelWidth} tooltip={tooltip}>\n        {label}\n      </InlineFormLabel>\n      {inputEl || (\n        <input type=\"text\" className={`gf-form-input ${inputWidth ? `width-${inputWidth}` : ''}`} {...inputProps} />\n      )}\n    </div>\n  );\n};\n\nFormField.displayName = 'FormField';\nFormField.defaultProps = defaultProps;\n\nconst getStyles = () => {\n  return {\n    formField: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-start;\n      text-align: left;\n      position: relative;\n    `,\n  };\n};\n"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAA8D,OAA9D;AAEA,SAASC,eAAT,QAAgC,wBAAhC;;;AAYA,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,CADO;EAEnBC,UAAU,EAAE;AAFO,CAArB;AAKA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAmC,GAAG,QAQ7C;EAAA,IAR8C;IAClDC,KADkD;IAElDC,OAFkD;IAGlDJ,UAHkD;IAIlDC,UAJkD;IAKlDI,OALkD;IAMlDC;EANkD,CAQ9C;EAAA,IADDC,UACC;;EACJ,MAAMC,MAAM,GAAGC,SAAS,EAAxB;EACA,oBACE;IAAK,SAAS,EAAEb,EAAE,CAACY,MAAM,CAACE,SAAR,EAAmBJ,SAAnB,CAAlB;IAAA,wBACE,KAAC,eAAD;MAAiB,KAAK,EAAEN,UAAxB;MAAoC,OAAO,EAAEI,OAA7C;MAAA,UACGD;IADH,EADF,EAIGE,OAAO,iBACN;MAAO,IAAI,EAAC,MAAZ;MAAmB,SAAS,EAAG,iBAAgBJ,UAAU,GAAI,SAAQA,UAAW,EAAvB,GAA2B,EAAG;IAAvF,GAA8FM,UAA9F,EALJ;EAAA,EADF;AAUD,CApBM;AAsBPL,SAAS,CAACS,WAAV,GAAwB,WAAxB;AACAT,SAAS,CAACH,YAAV,GAAyBA,YAAzB;;AAEA,MAAMU,SAAS,GAAG,MAAM;EACtB,OAAO;IACLC,SAAS,EAAEf,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;EAPS,CAAP;AASD,CAVD"},"metadata":{},"sourceType":"module"}