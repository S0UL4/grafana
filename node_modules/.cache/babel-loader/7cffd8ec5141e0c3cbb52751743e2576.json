{"ast":null,"code":"import { getBackendSrv } from '@grafana/runtime';\n\nasync function changePassword(payload) {\n  try {\n    await getBackendSrv().put('/api/user/password', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction loadUser() {\n  return getBackendSrv().get('/api/user');\n}\n\nfunction loadTeams() {\n  return getBackendSrv().get('/api/user/teams');\n}\n\nfunction loadOrgs() {\n  return getBackendSrv().get('/api/user/orgs');\n}\n\nfunction loadSessions() {\n  return getBackendSrv().get('/api/user/auth-tokens');\n}\n\nasync function revokeUserSession(tokenId) {\n  await getBackendSrv().post('/api/user/revoke-auth-token', {\n    authTokenId: tokenId\n  });\n}\n\nasync function setUserOrg(org) {\n  await getBackendSrv().post('/api/user/using/' + org.orgId, {});\n}\n\nasync function updateUserProfile(payload) {\n  try {\n    await getBackendSrv().put('/api/user', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport const api = {\n  changePassword,\n  revokeUserSession,\n  loadUser,\n  loadSessions,\n  loadOrgs,\n  loadTeams,\n  setUserOrg,\n  updateUserProfile\n};","map":{"version":3,"names":["getBackendSrv","changePassword","payload","put","err","console","error","loadUser","get","loadTeams","loadOrgs","loadSessions","revokeUserSession","tokenId","post","authTokenId","setUserOrg","org","orgId","updateUserProfile","api"],"sources":["/home/soula/grafana/public/app/features/profile/api.ts"],"sourcesContent":["import { getBackendSrv } from '@grafana/runtime';\n\nimport { Team, UserDTO, UserOrg, UserSession } from '../../types';\n\nimport { ChangePasswordFields, ProfileUpdateFields } from './types';\n\nasync function changePassword(payload: ChangePasswordFields): Promise<void> {\n  try {\n    await getBackendSrv().put('/api/user/password', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction loadUser(): Promise<UserDTO> {\n  return getBackendSrv().get('/api/user');\n}\n\nfunction loadTeams(): Promise<Team[]> {\n  return getBackendSrv().get('/api/user/teams');\n}\n\nfunction loadOrgs(): Promise<UserOrg[]> {\n  return getBackendSrv().get('/api/user/orgs');\n}\n\nfunction loadSessions(): Promise<UserSession[]> {\n  return getBackendSrv().get('/api/user/auth-tokens');\n}\n\nasync function revokeUserSession(tokenId: number): Promise<void> {\n  await getBackendSrv().post('/api/user/revoke-auth-token', {\n    authTokenId: tokenId,\n  });\n}\n\nasync function setUserOrg(org: UserOrg): Promise<void> {\n  await getBackendSrv().post('/api/user/using/' + org.orgId, {});\n}\n\nasync function updateUserProfile(payload: ProfileUpdateFields): Promise<void> {\n  try {\n    await getBackendSrv().put('/api/user', payload);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nexport const api = {\n  changePassword,\n  revokeUserSession,\n  loadUser,\n  loadSessions,\n  loadOrgs,\n  loadTeams,\n  setUserOrg,\n  updateUserProfile,\n};\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;;AAMA,eAAeC,cAAf,CAA8BC,OAA9B,EAA4E;EAC1E,IAAI;IACF,MAAMF,aAAa,GAAGG,GAAhB,CAAoB,oBAApB,EAA0CD,OAA1C,CAAN;EACD,CAFD,CAEE,OAAOE,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAcF,GAAd;EACD;AACF;;AAED,SAASG,QAAT,GAAsC;EACpC,OAAOP,aAAa,GAAGQ,GAAhB,CAAoB,WAApB,CAAP;AACD;;AAED,SAASC,SAAT,GAAsC;EACpC,OAAOT,aAAa,GAAGQ,GAAhB,CAAoB,iBAApB,CAAP;AACD;;AAED,SAASE,QAAT,GAAwC;EACtC,OAAOV,aAAa,GAAGQ,GAAhB,CAAoB,gBAApB,CAAP;AACD;;AAED,SAASG,YAAT,GAAgD;EAC9C,OAAOX,aAAa,GAAGQ,GAAhB,CAAoB,uBAApB,CAAP;AACD;;AAED,eAAeI,iBAAf,CAAiCC,OAAjC,EAAiE;EAC/D,MAAMb,aAAa,GAAGc,IAAhB,CAAqB,6BAArB,EAAoD;IACxDC,WAAW,EAAEF;EAD2C,CAApD,CAAN;AAGD;;AAED,eAAeG,UAAf,CAA0BC,GAA1B,EAAuD;EACrD,MAAMjB,aAAa,GAAGc,IAAhB,CAAqB,qBAAqBG,GAAG,CAACC,KAA9C,EAAqD,EAArD,CAAN;AACD;;AAED,eAAeC,iBAAf,CAAiCjB,OAAjC,EAA8E;EAC5E,IAAI;IACF,MAAMF,aAAa,GAAGG,GAAhB,CAAoB,WAApB,EAAiCD,OAAjC,CAAN;EACD,CAFD,CAEE,OAAOE,GAAP,EAAY;IACZC,OAAO,CAACC,KAAR,CAAcF,GAAd;EACD;AACF;;AAED,OAAO,MAAMgB,GAAG,GAAG;EACjBnB,cADiB;EAEjBW,iBAFiB;EAGjBL,QAHiB;EAIjBI,YAJiB;EAKjBD,QALiB;EAMjBD,SANiB;EAOjBO,UAPiB;EAQjBG;AARiB,CAAZ"},"metadata":{},"sourceType":"module"}