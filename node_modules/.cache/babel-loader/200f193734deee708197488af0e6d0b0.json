{"ast":null,"code":"import React from 'react';\nimport { connect } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { locationUtil, textUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { ButtonGroup, ModalsController, ToolbarButton, PageToolbar, useForceUpdate } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { toggleKioskMode } from 'app/core/navigation/kiosk';\nimport { DashboardCommentsModal } from 'app/features/dashboard/components/DashboardComments/DashboardCommentsModal';\nimport { SaveDashboardDrawer } from 'app/features/dashboard/components/SaveDashboard/SaveDashboardDrawer';\nimport { ShareModal } from 'app/features/dashboard/components/ShareModal';\nimport { playlistSrv } from 'app/features/playlist/PlaylistSrv';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { KioskMode } from 'app/types';\nimport { setStarred } from '../../../../core/reducers/navBarTree';\nimport { getDashboardSrv } from '../../services/DashboardSrv';\nimport { DashNavButton } from './DashNavButton';\nimport { DashNavTimeControls } from './DashNavTimeControls';\nimport { createElement as _createElement } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst mapDispatchToProps = {\n  setStarred,\n  updateTimeZoneForSession\n};\nconst connector = connect(null, mapDispatchToProps);\nconst customLeftActions = [];\nconst customRightActions = [];\nexport function addCustomLeftAction(content) {\n  customLeftActions.push(content);\n}\nexport function addCustomRightAction(content) {\n  customRightActions.push(content);\n}\nexport const DashNav = /*#__PURE__*/React.memo(props => {\n  var _ButtonGroup, _ToolbarButton, _ToolbarButton2;\n\n  const forceUpdate = useForceUpdate();\n\n  const onStarDashboard = () => {\n    const dashboardSrv = getDashboardSrv();\n    const {\n      dashboard,\n      setStarred\n    } = props;\n    dashboardSrv.starDashboard(dashboard.id, dashboard.meta.isStarred).then(newState => {\n      var _dashboard$meta$url;\n\n      setStarred({\n        id: dashboard.uid,\n        title: dashboard.title,\n        url: (_dashboard$meta$url = dashboard.meta.url) !== null && _dashboard$meta$url !== void 0 ? _dashboard$meta$url : '',\n        isStarred: newState\n      });\n      dashboard.meta.isStarred = newState;\n      forceUpdate();\n    });\n  };\n\n  const onClose = () => {\n    locationService.partial({\n      viewPanel: null\n    });\n  };\n\n  const onToggleTVMode = () => {\n    toggleKioskMode();\n  };\n\n  const onOpenSettings = () => {\n    locationService.partial({\n      editview: 'settings'\n    });\n  };\n\n  const onPlaylistPrev = () => {\n    playlistSrv.prev();\n  };\n\n  const onPlaylistNext = () => {\n    playlistSrv.next();\n  };\n\n  const onPlaylistStop = () => {\n    playlistSrv.stop();\n    forceUpdate();\n  };\n\n  const addCustomContent = (actions, buttons) => {\n    actions.map((action, index) => {\n      const Component = action.component;\n\n      const element = /*#__PURE__*/_createElement(Component, Object.assign({}, props, {\n        key: `button-custom-${index}`\n      }));\n\n      typeof action.index === 'number' ? buttons.splice(action.index, 0, element) : buttons.push(element);\n    });\n  };\n\n  const isPlaylistRunning = () => {\n    return playlistSrv.isPlaying;\n  };\n\n  const renderLeftActionsButton = () => {\n    const {\n      dashboard,\n      kioskMode\n    } = props;\n    const {\n      canStar,\n      canShare,\n      isStarred\n    } = dashboard.meta;\n    const buttons = [];\n\n    if (kioskMode !== KioskMode.Off || isPlaylistRunning()) {\n      return [];\n    }\n\n    if (canStar) {\n      let desc = isStarred ? 'Unmark as favorite' : 'Mark as favorite';\n      buttons.push( /*#__PURE__*/_jsx(DashNavButton, {\n        tooltip: desc,\n        icon: isStarred ? 'favorite' : 'star',\n        iconType: isStarred ? 'mono' : 'default',\n        iconSize: \"lg\",\n        onClick: onStarDashboard\n      }, \"button-star\"));\n    }\n\n    if (canShare) {\n      let desc = 'Share dashboard or panel';\n      buttons.push( /*#__PURE__*/_jsx(ModalsController, {\n        children: ({\n          showModal,\n          hideModal\n        }) => /*#__PURE__*/_jsx(DashNavButton, {\n          tooltip: desc,\n          icon: \"share-alt\",\n          iconSize: \"lg\",\n          onClick: () => {\n            showModal(ShareModal, {\n              dashboard,\n              onDismiss: hideModal\n            });\n          }\n        })\n      }, \"button-share\"));\n    }\n\n    if (dashboard.uid && config.featureToggles.dashboardComments) {\n      buttons.push( /*#__PURE__*/_jsx(ModalsController, {\n        children: ({\n          showModal,\n          hideModal\n        }) => /*#__PURE__*/_jsx(DashNavButton, {\n          tooltip: \"Show dashboard comments\",\n          icon: \"comment-alt-message\",\n          iconSize: \"lg\",\n          onClick: () => {\n            showModal(DashboardCommentsModal, {\n              dashboard,\n              onDismiss: hideModal\n            });\n          }\n        })\n      }, \"button-dashboard-comments\"));\n    }\n\n    addCustomContent(customLeftActions, buttons);\n    return buttons;\n  };\n\n  const renderPlaylistControls = () => {\n    return _ButtonGroup || (_ButtonGroup = /*#__PURE__*/_jsxs(ButtonGroup, {\n      children: [/*#__PURE__*/_jsx(ToolbarButton, {\n        tooltip: \"Go to previous dashboard\",\n        icon: \"backward\",\n        onClick: onPlaylistPrev,\n        narrow: true\n      }), /*#__PURE__*/_jsx(ToolbarButton, {\n        onClick: onPlaylistStop,\n        children: \"Stop playlist\"\n      }), /*#__PURE__*/_jsx(ToolbarButton, {\n        tooltip: \"Go to next dashboard\",\n        icon: \"forward\",\n        onClick: onPlaylistNext,\n        narrow: true\n      })]\n    }, \"playlist-buttons\"));\n  };\n\n  const renderTimeControls = () => {\n    const {\n      dashboard,\n      updateTimeZoneForSession,\n      hideTimePicker\n    } = props;\n\n    if (hideTimePicker) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsx(DashNavTimeControls, {\n      dashboard: dashboard,\n      onChangeTimeZone: updateTimeZoneForSession\n    }, \"time-controls\");\n  };\n\n  const renderRightActionsButton = () => {\n    const {\n      dashboard,\n      onAddPanel,\n      isFullscreen,\n      kioskMode\n    } = props;\n    const {\n      canSave,\n      canEdit,\n      showSettings\n    } = dashboard.meta;\n    const {\n      snapshot\n    } = dashboard;\n    const snapshotUrl = snapshot && snapshot.originalUrl;\n    const buttons = [];\n\n    const tvButton = _ToolbarButton || (_ToolbarButton = /*#__PURE__*/_jsx(ToolbarButton, {\n      tooltip: \"Cycle view mode\",\n      icon: \"monitor\",\n      onClick: onToggleTVMode\n    }, \"tv-button\"));\n\n    if (isPlaylistRunning()) {\n      return [renderPlaylistControls(), renderTimeControls()];\n    }\n\n    if (kioskMode === KioskMode.TV) {\n      return [renderTimeControls(), tvButton];\n    }\n\n    if (canEdit && !isFullscreen) {\n      buttons.push( /*#__PURE__*/_jsx(ToolbarButton, {\n        tooltip: \"Add panel\",\n        icon: \"panel-add\",\n        onClick: onAddPanel\n      }, \"button-panel-add\"));\n    }\n\n    if (canSave && !isFullscreen) {\n      buttons.push( /*#__PURE__*/_jsx(ModalsController, {\n        children: ({\n          showModal,\n          hideModal\n        }) => /*#__PURE__*/_jsx(ToolbarButton, {\n          tooltip: \"Save dashboard\",\n          icon: \"save\",\n          onClick: () => {\n            showModal(SaveDashboardDrawer, {\n              dashboard,\n              onDismiss: hideModal\n            });\n          }\n        })\n      }, \"button-save\"));\n    }\n\n    if (snapshotUrl) {\n      buttons.push( /*#__PURE__*/_jsx(ToolbarButton, {\n        tooltip: \"Open original dashboard\",\n        onClick: () => gotoSnapshotOrigin(snapshotUrl),\n        icon: \"link\"\n      }, \"button-snapshot\"));\n    }\n\n    if (showSettings) {\n      buttons.push(_ToolbarButton2 || (_ToolbarButton2 = /*#__PURE__*/_jsx(ToolbarButton, {\n        tooltip: \"Dashboard settings\",\n        icon: \"cog\",\n        onClick: onOpenSettings\n      }, \"button-settings\")));\n    }\n\n    addCustomContent(customRightActions, buttons);\n    buttons.push(renderTimeControls());\n    buttons.push(tvButton);\n    return buttons;\n  };\n\n  const gotoSnapshotOrigin = snapshotUrl => {\n    window.location.href = textUtil.sanitizeUrl(snapshotUrl);\n  };\n\n  const {\n    isFullscreen,\n    title,\n    folderTitle\n  } = props; // this ensures the component rerenders when the location changes\n\n  const location = useLocation();\n  const titleHref = locationUtil.getUrlForPartial(location, {\n    search: 'open'\n  });\n  const parentHref = locationUtil.getUrlForPartial(location, {\n    search: 'open',\n    folder: 'current'\n  });\n  const onGoBack = isFullscreen ? onClose : undefined;\n  return /*#__PURE__*/_jsx(PageToolbar, {\n    pageIcon: isFullscreen ? undefined : 'apps',\n    title: title,\n    parent: folderTitle,\n    titleHref: titleHref,\n    parentHref: parentHref,\n    onGoBack: onGoBack,\n    leftItems: renderLeftActionsButton(),\n    children: renderRightActionsButton()\n  });\n});\nDashNav.displayName = 'DashNav';\nexport default connector(DashNav);","map":{"version":3,"names":["React","connect","useLocation","locationUtil","textUtil","locationService","ButtonGroup","ModalsController","ToolbarButton","PageToolbar","useForceUpdate","config","toggleKioskMode","DashboardCommentsModal","SaveDashboardDrawer","ShareModal","playlistSrv","updateTimeZoneForSession","KioskMode","setStarred","getDashboardSrv","DashNavButton","DashNavTimeControls","mapDispatchToProps","connector","customLeftActions","customRightActions","addCustomLeftAction","content","push","addCustomRightAction","DashNav","memo","props","forceUpdate","onStarDashboard","dashboardSrv","dashboard","starDashboard","id","meta","isStarred","then","newState","uid","title","url","onClose","partial","viewPanel","onToggleTVMode","onOpenSettings","editview","onPlaylistPrev","prev","onPlaylistNext","next","onPlaylistStop","stop","addCustomContent","actions","buttons","map","action","index","Component","component","element","splice","isPlaylistRunning","isPlaying","renderLeftActionsButton","kioskMode","canStar","canShare","Off","desc","showModal","hideModal","onDismiss","featureToggles","dashboardComments","renderPlaylistControls","renderTimeControls","hideTimePicker","renderRightActionsButton","onAddPanel","isFullscreen","canSave","canEdit","showSettings","snapshot","snapshotUrl","originalUrl","tvButton","TV","gotoSnapshotOrigin","window","location","href","sanitizeUrl","folderTitle","titleHref","getUrlForPartial","search","parentHref","folder","onGoBack","undefined","displayName"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/DashNav/DashNav.tsx"],"sourcesContent":["import React, { FC, ReactNode } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationUtil, textUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { ButtonGroup, ModalsController, ToolbarButton, PageToolbar, useForceUpdate } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { toggleKioskMode } from 'app/core/navigation/kiosk';\nimport { DashboardCommentsModal } from 'app/features/dashboard/components/DashboardComments/DashboardCommentsModal';\nimport { SaveDashboardDrawer } from 'app/features/dashboard/components/SaveDashboard/SaveDashboardDrawer';\nimport { ShareModal } from 'app/features/dashboard/components/ShareModal';\nimport { playlistSrv } from 'app/features/playlist/PlaylistSrv';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { KioskMode } from 'app/types';\n\nimport { setStarred } from '../../../../core/reducers/navBarTree';\nimport { getDashboardSrv } from '../../services/DashboardSrv';\nimport { DashboardModel } from '../../state';\n\nimport { DashNavButton } from './DashNavButton';\nimport { DashNavTimeControls } from './DashNavTimeControls';\n\nconst mapDispatchToProps = {\n  setStarred,\n  updateTimeZoneForSession,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport interface OwnProps {\n  dashboard: DashboardModel;\n  isFullscreen: boolean;\n  kioskMode: KioskMode;\n  hideTimePicker: boolean;\n  folderTitle?: string;\n  title: string;\n  onAddPanel: () => void;\n}\n\ninterface DashNavButtonModel {\n  show: (props: Props) => boolean;\n  component: FC<Partial<Props>>;\n  index?: number | 'end';\n}\n\nconst customLeftActions: DashNavButtonModel[] = [];\nconst customRightActions: DashNavButtonModel[] = [];\n\nexport function addCustomLeftAction(content: DashNavButtonModel) {\n  customLeftActions.push(content);\n}\n\nexport function addCustomRightAction(content: DashNavButtonModel) {\n  customRightActions.push(content);\n}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport const DashNav = React.memo<Props>((props) => {\n  const forceUpdate = useForceUpdate();\n\n  const onStarDashboard = () => {\n    const dashboardSrv = getDashboardSrv();\n    const { dashboard, setStarred } = props;\n\n    dashboardSrv.starDashboard(dashboard.id, dashboard.meta.isStarred).then((newState: any) => {\n      setStarred({ id: dashboard.uid, title: dashboard.title, url: dashboard.meta.url ?? '', isStarred: newState });\n      dashboard.meta.isStarred = newState;\n      forceUpdate();\n    });\n  };\n\n  const onClose = () => {\n    locationService.partial({ viewPanel: null });\n  };\n\n  const onToggleTVMode = () => {\n    toggleKioskMode();\n  };\n\n  const onOpenSettings = () => {\n    locationService.partial({ editview: 'settings' });\n  };\n\n  const onPlaylistPrev = () => {\n    playlistSrv.prev();\n  };\n\n  const onPlaylistNext = () => {\n    playlistSrv.next();\n  };\n\n  const onPlaylistStop = () => {\n    playlistSrv.stop();\n    forceUpdate();\n  };\n\n  const addCustomContent = (actions: DashNavButtonModel[], buttons: ReactNode[]) => {\n    actions.map((action, index) => {\n      const Component = action.component;\n      const element = <Component {...props} key={`button-custom-${index}`} />;\n      typeof action.index === 'number' ? buttons.splice(action.index, 0, element) : buttons.push(element);\n    });\n  };\n\n  const isPlaylistRunning = () => {\n    return playlistSrv.isPlaying;\n  };\n\n  const renderLeftActionsButton = () => {\n    const { dashboard, kioskMode } = props;\n    const { canStar, canShare, isStarred } = dashboard.meta;\n    const buttons: ReactNode[] = [];\n\n    if (kioskMode !== KioskMode.Off || isPlaylistRunning()) {\n      return [];\n    }\n\n    if (canStar) {\n      let desc = isStarred ? 'Unmark as favorite' : 'Mark as favorite';\n      buttons.push(\n        <DashNavButton\n          tooltip={desc}\n          icon={isStarred ? 'favorite' : 'star'}\n          iconType={isStarred ? 'mono' : 'default'}\n          iconSize=\"lg\"\n          onClick={onStarDashboard}\n          key=\"button-star\"\n        />\n      );\n    }\n\n    if (canShare) {\n      let desc = 'Share dashboard or panel';\n      buttons.push(\n        <ModalsController key=\"button-share\">\n          {({ showModal, hideModal }) => (\n            <DashNavButton\n              tooltip={desc}\n              icon=\"share-alt\"\n              iconSize=\"lg\"\n              onClick={() => {\n                showModal(ShareModal, {\n                  dashboard,\n                  onDismiss: hideModal,\n                });\n              }}\n            />\n          )}\n        </ModalsController>\n      );\n    }\n\n    if (dashboard.uid && config.featureToggles.dashboardComments) {\n      buttons.push(\n        <ModalsController key=\"button-dashboard-comments\">\n          {({ showModal, hideModal }) => (\n            <DashNavButton\n              tooltip=\"Show dashboard comments\"\n              icon=\"comment-alt-message\"\n              iconSize=\"lg\"\n              onClick={() => {\n                showModal(DashboardCommentsModal, {\n                  dashboard,\n                  onDismiss: hideModal,\n                });\n              }}\n            />\n          )}\n        </ModalsController>\n      );\n    }\n\n    addCustomContent(customLeftActions, buttons);\n    return buttons;\n  };\n\n  const renderPlaylistControls = () => {\n    return (\n      <ButtonGroup key=\"playlist-buttons\">\n        <ToolbarButton tooltip=\"Go to previous dashboard\" icon=\"backward\" onClick={onPlaylistPrev} narrow />\n        <ToolbarButton onClick={onPlaylistStop}>Stop playlist</ToolbarButton>\n        <ToolbarButton tooltip=\"Go to next dashboard\" icon=\"forward\" onClick={onPlaylistNext} narrow />\n      </ButtonGroup>\n    );\n  };\n\n  const renderTimeControls = () => {\n    const { dashboard, updateTimeZoneForSession, hideTimePicker } = props;\n\n    if (hideTimePicker) {\n      return null;\n    }\n\n    return (\n      <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={updateTimeZoneForSession} key=\"time-controls\" />\n    );\n  };\n\n  const renderRightActionsButton = () => {\n    const { dashboard, onAddPanel, isFullscreen, kioskMode } = props;\n    const { canSave, canEdit, showSettings } = dashboard.meta;\n    const { snapshot } = dashboard;\n    const snapshotUrl = snapshot && snapshot.originalUrl;\n    const buttons: ReactNode[] = [];\n    const tvButton = (\n      <ToolbarButton tooltip=\"Cycle view mode\" icon=\"monitor\" onClick={onToggleTVMode} key=\"tv-button\" />\n    );\n\n    if (isPlaylistRunning()) {\n      return [renderPlaylistControls(), renderTimeControls()];\n    }\n\n    if (kioskMode === KioskMode.TV) {\n      return [renderTimeControls(), tvButton];\n    }\n\n    if (canEdit && !isFullscreen) {\n      buttons.push(<ToolbarButton tooltip=\"Add panel\" icon=\"panel-add\" onClick={onAddPanel} key=\"button-panel-add\" />);\n    }\n\n    if (canSave && !isFullscreen) {\n      buttons.push(\n        <ModalsController key=\"button-save\">\n          {({ showModal, hideModal }) => (\n            <ToolbarButton\n              tooltip=\"Save dashboard\"\n              icon=\"save\"\n              onClick={() => {\n                showModal(SaveDashboardDrawer, {\n                  dashboard,\n                  onDismiss: hideModal,\n                });\n              }}\n            />\n          )}\n        </ModalsController>\n      );\n    }\n\n    if (snapshotUrl) {\n      buttons.push(\n        <ToolbarButton\n          tooltip=\"Open original dashboard\"\n          onClick={() => gotoSnapshotOrigin(snapshotUrl)}\n          icon=\"link\"\n          key=\"button-snapshot\"\n        />\n      );\n    }\n\n    if (showSettings) {\n      buttons.push(\n        <ToolbarButton tooltip=\"Dashboard settings\" icon=\"cog\" onClick={onOpenSettings} key=\"button-settings\" />\n      );\n    }\n\n    addCustomContent(customRightActions, buttons);\n\n    buttons.push(renderTimeControls());\n    buttons.push(tvButton);\n    return buttons;\n  };\n\n  const gotoSnapshotOrigin = (snapshotUrl: string) => {\n    window.location.href = textUtil.sanitizeUrl(snapshotUrl);\n  };\n\n  const { isFullscreen, title, folderTitle } = props;\n  // this ensures the component rerenders when the location changes\n  const location = useLocation();\n  const titleHref = locationUtil.getUrlForPartial(location, { search: 'open' });\n  const parentHref = locationUtil.getUrlForPartial(location, { search: 'open', folder: 'current' });\n  const onGoBack = isFullscreen ? onClose : undefined;\n\n  return (\n    <PageToolbar\n      pageIcon={isFullscreen ? undefined : 'apps'}\n      title={title}\n      parent={folderTitle}\n      titleHref={titleHref}\n      parentHref={parentHref}\n      onGoBack={onGoBack}\n      leftItems={renderLeftActionsButton()}\n    >\n      {renderRightActionsButton()}\n    </PageToolbar>\n  );\n});\n\nDashNav.displayName = 'DashNav';\n\nexport default connector(DashNav);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}