{"ast":null,"code":"export let QueryEditorPropertyType;\n\n(function (QueryEditorPropertyType) {\n  QueryEditorPropertyType[\"String\"] = \"string\";\n})(QueryEditorPropertyType || (QueryEditorPropertyType = {}));\n\nexport let QueryEditorExpressionType;\n\n(function (QueryEditorExpressionType) {\n  QueryEditorExpressionType[\"Property\"] = \"property\";\n  QueryEditorExpressionType[\"Operator\"] = \"operator\";\n  QueryEditorExpressionType[\"Or\"] = \"or\";\n  QueryEditorExpressionType[\"And\"] = \"and\";\n  QueryEditorExpressionType[\"GroupBy\"] = \"groupBy\";\n  QueryEditorExpressionType[\"Function\"] = \"function\";\n  QueryEditorExpressionType[\"FunctionParameter\"] = \"functionParameter\";\n})(QueryEditorExpressionType || (QueryEditorExpressionType = {}));","map":{"version":3,"names":["QueryEditorPropertyType","QueryEditorExpressionType"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/expressions.ts"],"sourcesContent":["export enum QueryEditorPropertyType {\n  String = 'string',\n}\n\nexport interface QueryEditorProperty {\n  type: QueryEditorPropertyType;\n  name?: string;\n}\n\nexport type QueryEditorOperatorType = string | boolean | number;\ntype QueryEditorOperatorValueType = QueryEditorOperatorType | QueryEditorOperatorType[];\n\nexport interface QueryEditorOperator<T extends QueryEditorOperatorValueType> {\n  name?: string;\n  value?: T;\n}\n\nexport interface QueryEditorOperatorExpression {\n  type: QueryEditorExpressionType.Operator;\n  property: QueryEditorProperty;\n  operator: QueryEditorOperator<QueryEditorOperatorValueType>;\n}\n\nexport interface QueryEditorArrayExpression {\n  type: QueryEditorExpressionType.And | QueryEditorExpressionType.Or;\n  expressions: QueryEditorExpression[] | QueryEditorArrayExpression[];\n}\n\nexport interface QueryEditorPropertyExpression {\n  type: QueryEditorExpressionType.Property;\n  property: QueryEditorProperty;\n}\n\nexport enum QueryEditorExpressionType {\n  Property = 'property',\n  Operator = 'operator',\n  Or = 'or',\n  And = 'and',\n  GroupBy = 'groupBy',\n  Function = 'function',\n  FunctionParameter = 'functionParameter',\n}\n\nexport type QueryEditorExpression =\n  | QueryEditorArrayExpression\n  | QueryEditorPropertyExpression\n  | QueryEditorGroupByExpression\n  | QueryEditorFunctionExpression\n  | QueryEditorFunctionParameterExpression\n  | QueryEditorOperatorExpression;\n\nexport interface QueryEditorGroupByExpression {\n  type: QueryEditorExpressionType.GroupBy;\n  property: QueryEditorProperty;\n}\n\nexport interface QueryEditorFunctionExpression {\n  type: QueryEditorExpressionType.Function;\n  name?: string;\n  parameters?: QueryEditorFunctionParameterExpression[];\n}\n\nexport interface QueryEditorFunctionParameterExpression {\n  type: QueryEditorExpressionType.FunctionParameter;\n  name?: string;\n}\n"],"mappings":"AAAA,WAAYA,uBAAZ;;WAAYA,uB;EAAAA,uB;GAAAA,uB,KAAAA,uB;;AAiCZ,WAAYC,yBAAZ;;WAAYA,yB;EAAAA,yB;EAAAA,yB;EAAAA,yB;EAAAA,yB;EAAAA,yB;EAAAA,yB;EAAAA,yB;GAAAA,yB,KAAAA,yB"},"metadata":{},"sourceType":"module"}