{"ast":null,"code":"var _Space, _Space2;\n\nimport React from 'react';\nimport { EditorField, EditorHeader, EditorRow, InlineSelect, Space, EditorSwitch } from '@grafana/experimental';\nimport { Alert, Input } from '@grafana/ui';\nimport { isCloudWatchAnnotationQuery } from '../guards';\nimport { useRegions } from '../hooks';\nimport { MetricStatEditor } from './MetricStatEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const AnnotationQueryEditor = props => {\n  const {\n    query,\n    onChange,\n    datasource\n  } = props;\n  const [regions, regionIsLoading] = useRegions(datasource);\n\n  if (!isCloudWatchAnnotationQuery(query)) {\n    return /*#__PURE__*/_jsx(Alert, {\n      severity: \"error\",\n      title: \"Invalid annotation query\",\n      topSpacing: 2,\n      children: JSON.stringify(query, null, 4)\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(EditorHeader, {\n      children: /*#__PURE__*/_jsx(InlineSelect, {\n        label: \"Region\",\n        value: regions.find(v => v.value === query.region),\n        placeholder: \"Select region\",\n        allowCustomValue: true,\n        onChange: ({\n          value: region\n        }) => region && onChange(Object.assign({}, query, {\n          region\n        })),\n        options: regions,\n        isLoading: regionIsLoading\n      })\n    }), _Space || (_Space = /*#__PURE__*/_jsx(Space, {\n      v: 0.5\n    })), /*#__PURE__*/_jsx(MetricStatEditor, Object.assign({}, props, {\n      refId: query.refId,\n      metricStat: query,\n      disableExpressions: true,\n      onChange: metricStat => onChange(Object.assign({}, query, metricStat)),\n      onRunQuery: () => {}\n    })), _Space2 || (_Space2 = /*#__PURE__*/_jsx(Space, {\n      v: 0.5\n    })), /*#__PURE__*/_jsxs(EditorRow, {\n      children: [/*#__PURE__*/_jsx(EditorField, {\n        label: \"Period\",\n        width: 26,\n        tooltip: \"Minimum interval between points in seconds.\",\n        children: /*#__PURE__*/_jsx(Input, {\n          value: query.period || '',\n          placeholder: \"auto\",\n          onChange: event => onChange(Object.assign({}, query, {\n            period: event.target.value\n          }))\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Enable Prefix Matching\",\n        optional: true,\n        children: /*#__PURE__*/_jsx(EditorSwitch, {\n          value: query.prefixMatching,\n          onChange: e => {\n            onChange(Object.assign({}, query, {\n              prefixMatching: e.currentTarget.checked\n            }));\n          }\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Action\",\n        optional: true,\n        disabled: !query.prefixMatching,\n        children: /*#__PURE__*/_jsx(Input, {\n          value: query.actionPrefix || '',\n          onChange: event => onChange(Object.assign({}, query, {\n            actionPrefix: event.target.value\n          }))\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Alarm Name\",\n        optional: true,\n        disabled: !query.prefixMatching,\n        children: /*#__PURE__*/_jsx(Input, {\n          value: query.alarmNamePrefix || '',\n          onChange: event => onChange(Object.assign({}, query, {\n            alarmNamePrefix: event.target.value\n          }))\n        })\n      })]\n    })]\n  });\n};","map":{"version":3,"names":["React","EditorField","EditorHeader","EditorRow","InlineSelect","Space","EditorSwitch","Alert","Input","isCloudWatchAnnotationQuery","useRegions","MetricStatEditor","AnnotationQueryEditor","props","query","onChange","datasource","regions","regionIsLoading","JSON","stringify","find","v","value","region","refId","metricStat","period","event","target","prefixMatching","e","currentTarget","checked","actionPrefix","alarmNamePrefix"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/AnnotationQueryEditor.tsx"],"sourcesContent":["import React, { ChangeEvent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorField, EditorHeader, EditorRow, InlineSelect, Space, EditorSwitch } from '@grafana/experimental';\nimport { Alert, Input } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { isCloudWatchAnnotationQuery } from '../guards';\nimport { useRegions } from '../hooks';\nimport { CloudWatchJsonData, CloudWatchQuery, MetricStat } from '../types';\n\nimport { MetricStatEditor } from './MetricStatEditor';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport const AnnotationQueryEditor = (props: Props) => {\n  const { query, onChange, datasource } = props;\n  const [regions, regionIsLoading] = useRegions(datasource);\n\n  if (!isCloudWatchAnnotationQuery(query)) {\n    return (\n      <Alert severity=\"error\" title=\"Invalid annotation query\" topSpacing={2}>\n        {JSON.stringify(query, null, 4)}\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Region\"\n          value={regions.find((v) => v.value === query.region)}\n          placeholder=\"Select region\"\n          allowCustomValue\n          onChange={({ value: region }) => region && onChange({ ...query, region })}\n          options={regions}\n          isLoading={regionIsLoading}\n        />\n      </EditorHeader>\n      <Space v={0.5} />\n      <MetricStatEditor\n        {...props}\n        refId={query.refId}\n        metricStat={query}\n        disableExpressions={true}\n        onChange={(metricStat: MetricStat) => onChange({ ...query, ...metricStat })}\n        onRunQuery={() => {}}\n      ></MetricStatEditor>\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField label=\"Period\" width={26} tooltip=\"Minimum interval between points in seconds.\">\n          <Input\n            value={query.period || ''}\n            placeholder=\"auto\"\n            onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...query, period: event.target.value })}\n          />\n        </EditorField>\n        <EditorField label=\"Enable Prefix Matching\" optional={true}>\n          <EditorSwitch\n            value={query.prefixMatching}\n            onChange={(e) => {\n              onChange({\n                ...query,\n                prefixMatching: e.currentTarget.checked,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField label=\"Action\" optional={true} disabled={!query.prefixMatching}>\n          <Input\n            value={query.actionPrefix || ''}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...query, actionPrefix: event.target.value })\n            }\n          />\n        </EditorField>\n        <EditorField label=\"Alarm Name\" optional={true} disabled={!query.prefixMatching}>\n          <Input\n            value={query.alarmNamePrefix || ''}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...query, alarmNamePrefix: event.target.value })\n            }\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}