{"ast":null,"code":"const regex = /^now$|^now\\-(\\d{1,10})([wdhms])$/;\nexport const mapOptionToRelativeTimeRange = option => {\n  return {\n    from: relativeToSeconds(option.from),\n    to: relativeToSeconds(option.to)\n  };\n};\nexport const mapRelativeTimeRangeToOption = range => {\n  const from = secondsToRelativeFormat(range.from);\n  const to = secondsToRelativeFormat(range.to);\n  return {\n    from,\n    to,\n    display: `${from} to ${to}`\n  };\n};\nexport const isRangeValid = (relative, now = Date.now()) => {\n  if (!isRelativeFormat(relative)) {\n    return {\n      isValid: false,\n      errorMessage: 'Value not in relative time format.'\n    };\n  }\n\n  const seconds = relativeToSeconds(relative);\n\n  if (seconds > Math.ceil(now / 1000)) {\n    return {\n      isValid: false,\n      errorMessage: 'Can not enter value prior to January 1, 1970.'\n    };\n  }\n\n  return {\n    isValid: true\n  };\n};\nexport const isRelativeFormat = format => {\n  return regex.test(format);\n};\n\nconst relativeToSeconds = relative => {\n  const match = regex.exec(relative);\n\n  if (!match || match.length !== 3) {\n    return 0;\n  }\n\n  const [, value, unit] = match;\n  const parsed = parseInt(value, 10);\n\n  if (isNaN(parsed)) {\n    return 0;\n  }\n\n  return parsed * units[unit];\n};\n\nconst units = {\n  w: 604800,\n  d: 86400,\n  h: 3600,\n  m: 60,\n  s: 1\n};\n\nconst secondsToRelativeFormat = seconds => {\n  if (seconds <= 0) {\n    return 'now';\n  }\n\n  if (seconds >= units.w && seconds % units.w === 0) {\n    return `now-${seconds / units.w}w`;\n  }\n\n  if (seconds >= units.d && seconds % units.d === 0) {\n    return `now-${seconds / units.d}d`;\n  }\n\n  if (seconds >= units.h && seconds % units.h === 0) {\n    return `now-${seconds / units.h}h`;\n  }\n\n  if (seconds >= units.m && seconds % units.m === 0) {\n    return `now-${seconds / units.m}m`;\n  }\n\n  return `now-${seconds}s`;\n};","map":{"version":3,"names":["regex","mapOptionToRelativeTimeRange","option","from","relativeToSeconds","to","mapRelativeTimeRangeToOption","range","secondsToRelativeFormat","display","isRangeValid","relative","now","Date","isRelativeFormat","isValid","errorMessage","seconds","Math","ceil","format","test","match","exec","length","value","unit","parsed","parseInt","isNaN","units","w","d","h","m","s"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/DateTimePickers/RelativeTimeRangePicker/utils.ts"],"sourcesContent":["import { RelativeTimeRange, TimeOption } from '@grafana/data';\n\nconst regex = /^now$|^now\\-(\\d{1,10})([wdhms])$/;\n\nexport const mapOptionToRelativeTimeRange = (option: TimeOption): RelativeTimeRange | undefined => {\n  return {\n    from: relativeToSeconds(option.from),\n    to: relativeToSeconds(option.to),\n  };\n};\n\nexport const mapRelativeTimeRangeToOption = (range: RelativeTimeRange): TimeOption => {\n  const from = secondsToRelativeFormat(range.from);\n  const to = secondsToRelativeFormat(range.to);\n\n  return { from, to, display: `${from} to ${to}` };\n};\n\nexport type RangeValidation = {\n  isValid: boolean;\n  errorMessage?: string;\n};\n\nexport const isRangeValid = (relative: string, now = Date.now()): RangeValidation => {\n  if (!isRelativeFormat(relative)) {\n    return {\n      isValid: false,\n      errorMessage: 'Value not in relative time format.',\n    };\n  }\n\n  const seconds = relativeToSeconds(relative);\n\n  if (seconds > Math.ceil(now / 1000)) {\n    return {\n      isValid: false,\n      errorMessage: 'Can not enter value prior to January 1, 1970.',\n    };\n  }\n\n  return { isValid: true };\n};\n\nexport const isRelativeFormat = (format: string): boolean => {\n  return regex.test(format);\n};\n\nconst relativeToSeconds = (relative: string): number => {\n  const match = regex.exec(relative);\n\n  if (!match || match.length !== 3) {\n    return 0;\n  }\n\n  const [, value, unit] = match;\n  const parsed = parseInt(value, 10);\n\n  if (isNaN(parsed)) {\n    return 0;\n  }\n\n  return parsed * units[unit];\n};\n\nconst units: Record<string, number> = {\n  w: 604800,\n  d: 86400,\n  h: 3600,\n  m: 60,\n  s: 1,\n};\n\nconst secondsToRelativeFormat = (seconds: number): string => {\n  if (seconds <= 0) {\n    return 'now';\n  }\n\n  if (seconds >= units.w && seconds % units.w === 0) {\n    return `now-${seconds / units.w}w`;\n  }\n\n  if (seconds >= units.d && seconds % units.d === 0) {\n    return `now-${seconds / units.d}d`;\n  }\n\n  if (seconds >= units.h && seconds % units.h === 0) {\n    return `now-${seconds / units.h}h`;\n  }\n\n  if (seconds >= units.m && seconds % units.m === 0) {\n    return `now-${seconds / units.m}m`;\n  }\n\n  return `now-${seconds}s`;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}