{"ast":null,"code":"export class MysqlMetaQuery {\n  constructor(target, queryModel) {\n    this.target = target;\n    this.queryModel = queryModel;\n  }\n\n  getOperators(datatype) {\n    switch (datatype) {\n      case 'double':\n      case 'float':\n        {\n          return ['=', '!=', '<', '<=', '>', '>='];\n        }\n\n      case 'text':\n      case 'tinytext':\n      case 'mediumtext':\n      case 'longtext':\n      case 'varchar':\n      case 'char':\n        {\n          return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE'];\n        }\n\n      default:\n        {\n          return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n        }\n    }\n  } // quote identifier as literal to use in metadata queries\n\n\n  quoteIdentAsLiteral(value) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\n  SELECT\n    table_name as table_name,\n    ( SELECT\n        column_name as column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS time_column,\n    ( SELECT\n        column_name AS column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS value_column\n  FROM information_schema.tables t\n  WHERE\n    t.table_schema = database() AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n    ) AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n    )\n  LIMIT 1\n;`;\n    return query;\n  }\n\n  buildTableConstraint(table) {\n    let query = ''; // check for schema qualified table\n\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = 'table_schema = database() AND table_name = ' + this.quoteIdentAsLiteral(table);\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = database() ORDER BY table_name';\n  }\n\n  buildColumnQuery(type) {\n    let query = 'SELECT column_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time':\n        {\n          query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n          break;\n        }\n\n      case 'metric':\n        {\n          query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n          break;\n        }\n\n      case 'value':\n        {\n          query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n          query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n          break;\n        }\n\n      case 'group':\n        {\n          query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n          break;\n        }\n    }\n\n    query += ' ORDER BY column_name';\n    return query;\n  }\n\n  buildValueQuery(column) {\n    let query = 'SELECT DISTINCT QUOTE(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column) {\n    let query = `\nSELECT data_type\nFROM information_schema.columns\nWHERE `;\n    query += ' table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n}","map":{"version":3,"names":["MysqlMetaQuery","constructor","target","queryModel","getOperators","datatype","quoteIdentAsLiteral","value","quoteLiteral","unquoteIdentifier","findMetricTable","query","buildTableConstraint","table","includes","parts","split","buildTableQuery","buildColumnQuery","type","timeColumn","buildValueQuery","column","buildDatatypeQuery"],"sources":["/home/soula/grafana/public/app/plugins/datasource/mysql/meta_query.ts"],"sourcesContent":["export class MysqlMetaQuery {\n  constructor(private target: any, private queryModel: any) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'double':\n      case 'float': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'tinytext':\n      case 'mediumtext':\n      case 'longtext':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    const query = `\n  SELECT\n    table_name as table_name,\n    ( SELECT\n        column_name as column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS time_column,\n    ( SELECT\n        column_name AS column_name\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n      ORDER BY ordinal_position LIMIT 1\n    ) AS value_column\n  FROM information_schema.tables t\n  WHERE\n    t.table_schema = database() AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN ('timestamp', 'datetime')\n    ) AND\n    EXISTS\n    ( SELECT 1\n      FROM information_schema.columns c\n      WHERE\n        c.table_schema = t.table_schema AND\n        c.table_name = t.table_name AND\n        c.data_type IN('float', 'int', 'bigint')\n    )\n  LIMIT 1\n;`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = 'table_schema = database() AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = database() ORDER BY table_name';\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT column_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT QUOTE(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = `\nSELECT data_type\nFROM information_schema.columns\nWHERE `;\n    query += ' table_name = ' + this.quoteIdentAsLiteral(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}