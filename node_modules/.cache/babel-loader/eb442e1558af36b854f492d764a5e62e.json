{"ast":null,"code":"import { FieldType } from '../../../types/dataFrame';\nimport { ValueMatcherID } from '../ids';\nconst isBetweenValueMatcher = {\n  id: ValueMatcherID.between,\n  name: 'Is between',\n  description: 'Match when field value is between given option values.',\n  get: options => {\n    return (valueIndex, field) => {\n      const value = field.values.get(valueIndex);\n\n      if (isNaN(value)) {\n        return false;\n      }\n\n      return value > options.from && value < options.to;\n    };\n  },\n  getOptionsDisplayText: options => {\n    return `Matches all rows where field value is between ${options.from} and ${options.to}.`;\n  },\n  isApplicable: field => field.type === FieldType.number,\n  getDefaultOptions: () => ({\n    from: 0,\n    to: 100\n  })\n};\nexport const getRangeValueMatchers = () => [isBetweenValueMatcher];","map":{"version":3,"names":["FieldType","ValueMatcherID","isBetweenValueMatcher","id","between","name","description","get","options","valueIndex","field","value","values","isNaN","from","to","getOptionsDisplayText","isApplicable","type","number","getDefaultOptions","getRangeValueMatchers"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/matchers/valueMatchers/rangeMatchers.ts"],"sourcesContent":["import { Field, FieldType } from '../../../types/dataFrame';\nimport { ValueMatcherInfo } from '../../../types/transformations';\nimport { ValueMatcherID } from '../ids';\n\nimport { RangeValueMatcherOptions } from './types';\n\nconst isBetweenValueMatcher: ValueMatcherInfo<RangeValueMatcherOptions<number>> = {\n  id: ValueMatcherID.between,\n  name: 'Is between',\n  description: 'Match when field value is between given option values.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values.get(valueIndex);\n      if (isNaN(value)) {\n        return false;\n      }\n      return value > options.from && value < options.to;\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is between ${options.from} and ${options.to}.`;\n  },\n  isApplicable: (field) => field.type === FieldType.number,\n  getDefaultOptions: () => ({ from: 0, to: 100 }),\n};\n\nexport const getRangeValueMatchers = (): ValueMatcherInfo[] => [isBetweenValueMatcher];\n"],"mappings":"AAAA,SAAgBA,SAAhB,QAAiC,0BAAjC;AAEA,SAASC,cAAT,QAA+B,QAA/B;AAIA,MAAMC,qBAAyE,GAAG;EAChFC,EAAE,EAAEF,cAAc,CAACG,OAD6D;EAEhFC,IAAI,EAAE,YAF0E;EAGhFC,WAAW,EAAE,wDAHmE;EAIhFC,GAAG,EAAGC,OAAD,IAAa;IAChB,OAAO,CAACC,UAAD,EAAqBC,KAArB,KAAsC;MAC3C,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaL,GAAb,CAAiBE,UAAjB,CAAd;;MACA,IAAII,KAAK,CAACF,KAAD,CAAT,EAAkB;QAChB,OAAO,KAAP;MACD;;MACD,OAAOA,KAAK,GAAGH,OAAO,CAACM,IAAhB,IAAwBH,KAAK,GAAGH,OAAO,CAACO,EAA/C;IACD,CAND;EAOD,CAZ+E;EAahFC,qBAAqB,EAAGR,OAAD,IAAa;IAClC,OAAQ,iDAAgDA,OAAO,CAACM,IAAK,QAAON,OAAO,CAACO,EAAG,GAAvF;EACD,CAf+E;EAgBhFE,YAAY,EAAGP,KAAD,IAAWA,KAAK,CAACQ,IAAN,KAAelB,SAAS,CAACmB,MAhB8B;EAiBhFC,iBAAiB,EAAE,OAAO;IAAEN,IAAI,EAAE,CAAR;IAAWC,EAAE,EAAE;EAAf,CAAP;AAjB6D,CAAlF;AAoBA,OAAO,MAAMM,qBAAqB,GAAG,MAA0B,CAACnB,qBAAD,CAAxD"},"metadata":{},"sourceType":"module"}