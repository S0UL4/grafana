{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { IconButton, useStyles2 } from '@grafana/ui/src';\nimport { HorizontalConstraint, QuickPlacement, VerticalConstraint } from 'app/features/canvas';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const QuickPositioning = ({\n  onPositionChange,\n  element,\n  settings\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const onQuickPositioningChange = position => {\n    var _element$options$plac, _element$options$plac2, _element$options$plac3, _element$options$plac4, _element$options$plac5, _element$options$plac6, _element$options$plac7, _element$options$plac8;\n\n    const defaultConstraint = {\n      vertical: VerticalConstraint.Top,\n      horizontal: HorizontalConstraint.Left\n    };\n    const originalConstraint = Object.assign({}, element.options.constraint);\n    element.options.constraint = defaultConstraint;\n    element.setPlacementFromConstraint();\n\n    switch (position) {\n      case QuickPlacement.Top:\n        onPositionChange(0, 'top');\n        break;\n\n      case QuickPlacement.Bottom:\n        onPositionChange(getRightBottomPosition((_element$options$plac = (_element$options$plac2 = element.options.placement) === null || _element$options$plac2 === void 0 ? void 0 : _element$options$plac2.height) !== null && _element$options$plac !== void 0 ? _element$options$plac : 0, 'bottom'), 'top');\n        break;\n\n      case QuickPlacement.VerticalCenter:\n        onPositionChange(getCenterPosition((_element$options$plac3 = (_element$options$plac4 = element.options.placement) === null || _element$options$plac4 === void 0 ? void 0 : _element$options$plac4.height) !== null && _element$options$plac3 !== void 0 ? _element$options$plac3 : 0, 'v'), 'top');\n        break;\n\n      case QuickPlacement.Left:\n        onPositionChange(0, 'left');\n        break;\n\n      case QuickPlacement.Right:\n        onPositionChange(getRightBottomPosition((_element$options$plac5 = (_element$options$plac6 = element.options.placement) === null || _element$options$plac6 === void 0 ? void 0 : _element$options$plac6.width) !== null && _element$options$plac5 !== void 0 ? _element$options$plac5 : 0, 'right'), 'left');\n        break;\n\n      case QuickPlacement.HorizontalCenter:\n        onPositionChange(getCenterPosition((_element$options$plac7 = (_element$options$plac8 = element.options.placement) === null || _element$options$plac8 === void 0 ? void 0 : _element$options$plac8.width) !== null && _element$options$plac7 !== void 0 ? _element$options$plac7 : 0, 'h'), 'left');\n        break;\n    }\n\n    element.options.constraint = originalConstraint;\n    element.setPlacementFromConstraint();\n  }; // Basing this on scene will mean that center is based on root for the time being\n\n\n  const getCenterPosition = (elementSize, align) => {\n    const sceneSize = align === 'h' ? settings.scene.width : settings.scene.height;\n    return (sceneSize - elementSize) / 2;\n  };\n\n  const getRightBottomPosition = (elementSize, align) => {\n    const sceneSize = align === 'right' ? settings.scene.width : settings.scene.height;\n    return sceneSize - elementSize;\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.buttonGroup,\n    children: [/*#__PURE__*/_jsx(IconButton, {\n      name: 'horizontal-align-left',\n      onClick: () => onQuickPositioningChange(QuickPlacement.Left),\n      className: styles.button,\n      size: 'lg',\n      tooltip: 'Align left'\n    }), /*#__PURE__*/_jsx(IconButton, {\n      name: 'horizontal-align-center',\n      onClick: () => onQuickPositioningChange(QuickPlacement.HorizontalCenter),\n      className: styles.button,\n      size: 'lg',\n      tooltip: 'Align horizontal centers'\n    }), /*#__PURE__*/_jsx(IconButton, {\n      name: 'horizontal-align-right',\n      onClick: () => onQuickPositioningChange(QuickPlacement.Right),\n      className: styles.button,\n      size: 'lg',\n      tooltip: 'Align right'\n    }), /*#__PURE__*/_jsx(IconButton, {\n      name: 'vertical-align-top',\n      onClick: () => onQuickPositioningChange(QuickPlacement.Top),\n      size: 'lg',\n      tooltip: 'Align top'\n    }), /*#__PURE__*/_jsx(IconButton, {\n      name: 'vertical-align-center',\n      onClick: () => onQuickPositioningChange(QuickPlacement.VerticalCenter),\n      className: styles.button,\n      size: 'lg',\n      tooltip: 'Align vertical centers'\n    }), /*#__PURE__*/_jsx(IconButton, {\n      name: 'vertical-align-bottom',\n      onClick: () => onQuickPositioningChange(QuickPlacement.Bottom),\n      className: styles.button,\n      size: 'lg',\n      tooltip: 'Align bottom'\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  buttonGroup: css`\n    display: flex;\n    flex-wrap: wrap;\n    padding: 12px 0 12px 0;\n  `,\n  button: css`\n    margin-left: 5px;\n    margin-right: 5px;\n  `\n});","map":{"version":3,"names":["css","React","IconButton","useStyles2","HorizontalConstraint","QuickPlacement","VerticalConstraint","QuickPositioning","onPositionChange","element","settings","styles","getStyles","onQuickPositioningChange","position","defaultConstraint","vertical","Top","horizontal","Left","originalConstraint","options","constraint","setPlacementFromConstraint","Bottom","getRightBottomPosition","placement","height","VerticalCenter","getCenterPosition","Right","width","HorizontalCenter","elementSize","align","sceneSize","scene","buttonGroup","button","theme"],"sources":["/home/soula/grafana/public/app/plugins/panel/canvas/editor/QuickPositioning.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { IconButton, useStyles2 } from '@grafana/ui/src';\nimport { HorizontalConstraint, Placement, QuickPlacement, VerticalConstraint } from 'app/features/canvas';\nimport { ElementState } from 'app/features/canvas/runtime/element';\n\nimport { CanvasEditorOptions } from './elementEditor';\n\ntype Props = {\n  onPositionChange: (value: number | undefined, placement: keyof Placement) => void;\n  element: ElementState;\n  settings: CanvasEditorOptions;\n};\n\nexport const QuickPositioning = ({ onPositionChange, element, settings }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const onQuickPositioningChange = (position: QuickPlacement) => {\n    const defaultConstraint = { vertical: VerticalConstraint.Top, horizontal: HorizontalConstraint.Left };\n    const originalConstraint = { ...element.options.constraint };\n\n    element.options.constraint = defaultConstraint;\n    element.setPlacementFromConstraint();\n\n    switch (position) {\n      case QuickPlacement.Top:\n        onPositionChange(0, 'top');\n        break;\n      case QuickPlacement.Bottom:\n        onPositionChange(getRightBottomPosition(element.options.placement?.height ?? 0, 'bottom'), 'top');\n        break;\n      case QuickPlacement.VerticalCenter:\n        onPositionChange(getCenterPosition(element.options.placement?.height ?? 0, 'v'), 'top');\n        break;\n      case QuickPlacement.Left:\n        onPositionChange(0, 'left');\n        break;\n      case QuickPlacement.Right:\n        onPositionChange(getRightBottomPosition(element.options.placement?.width ?? 0, 'right'), 'left');\n        break;\n      case QuickPlacement.HorizontalCenter:\n        onPositionChange(getCenterPosition(element.options.placement?.width ?? 0, 'h'), 'left');\n        break;\n    }\n\n    element.options.constraint = originalConstraint;\n    element.setPlacementFromConstraint();\n  };\n\n  // Basing this on scene will mean that center is based on root for the time being\n  const getCenterPosition = (elementSize: number, align: 'h' | 'v') => {\n    const sceneSize = align === 'h' ? settings.scene.width : settings.scene.height;\n\n    return (sceneSize - elementSize) / 2;\n  };\n\n  const getRightBottomPosition = (elementSize: number, align: 'right' | 'bottom') => {\n    const sceneSize = align === 'right' ? settings.scene.width : settings.scene.height;\n\n    return sceneSize - elementSize;\n  };\n\n  return (\n    <div className={styles.buttonGroup}>\n      <IconButton\n        name={'horizontal-align-left'}\n        onClick={() => onQuickPositioningChange(QuickPlacement.Left)}\n        className={styles.button}\n        size={'lg'}\n        tooltip={'Align left'}\n      />\n      <IconButton\n        name={'horizontal-align-center'}\n        onClick={() => onQuickPositioningChange(QuickPlacement.HorizontalCenter)}\n        className={styles.button}\n        size={'lg'}\n        tooltip={'Align horizontal centers'}\n      />\n      <IconButton\n        name={'horizontal-align-right'}\n        onClick={() => onQuickPositioningChange(QuickPlacement.Right)}\n        className={styles.button}\n        size={'lg'}\n        tooltip={'Align right'}\n      />\n      <IconButton\n        name={'vertical-align-top'}\n        onClick={() => onQuickPositioningChange(QuickPlacement.Top)}\n        size={'lg'}\n        tooltip={'Align top'}\n      />\n      <IconButton\n        name={'vertical-align-center'}\n        onClick={() => onQuickPositioningChange(QuickPlacement.VerticalCenter)}\n        className={styles.button}\n        size={'lg'}\n        tooltip={'Align vertical centers'}\n      />\n      <IconButton\n        name={'vertical-align-bottom'}\n        onClick={() => onQuickPositioningChange(QuickPlacement.Bottom)}\n        className={styles.button}\n        size={'lg'}\n        tooltip={'Align bottom'}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttonGroup: css`\n    display: flex;\n    flex-wrap: wrap;\n    padding: 12px 0 12px 0;\n  `,\n  button: css`\n    margin-left: 5px;\n    margin-right: 5px;\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,iBAAvC;AACA,SAASC,oBAAT,EAA0CC,cAA1C,EAA0DC,kBAA1D,QAAoF,qBAApF;;;AAWA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;EAAEC,gBAAF;EAAoBC,OAApB;EAA6BC;AAA7B,CAAD,KAAoD;EAClF,MAAMC,MAAM,GAAGR,UAAU,CAACS,SAAD,CAAzB;;EAEA,MAAMC,wBAAwB,GAAIC,QAAD,IAA8B;IAAA;;IAC7D,MAAMC,iBAAiB,GAAG;MAAEC,QAAQ,EAAEV,kBAAkB,CAACW,GAA/B;MAAoCC,UAAU,EAAEd,oBAAoB,CAACe;IAArE,CAA1B;IACA,MAAMC,kBAAkB,qBAAQX,OAAO,CAACY,OAAR,CAAgBC,UAAxB,CAAxB;IAEAb,OAAO,CAACY,OAAR,CAAgBC,UAAhB,GAA6BP,iBAA7B;IACAN,OAAO,CAACc,0BAAR;;IAEA,QAAQT,QAAR;MACE,KAAKT,cAAc,CAACY,GAApB;QACET,gBAAgB,CAAC,CAAD,EAAI,KAAJ,CAAhB;QACA;;MACF,KAAKH,cAAc,CAACmB,MAApB;QACEhB,gBAAgB,CAACiB,sBAAsB,oDAAChB,OAAO,CAACY,OAAR,CAAgBK,SAAjB,2DAAC,uBAA2BC,MAA5B,yEAAsC,CAAtC,EAAyC,QAAzC,CAAvB,EAA2E,KAA3E,CAAhB;QACA;;MACF,KAAKtB,cAAc,CAACuB,cAApB;QACEpB,gBAAgB,CAACqB,iBAAiB,qDAACpB,OAAO,CAACY,OAAR,CAAgBK,SAAjB,2DAAC,uBAA2BC,MAA5B,2EAAsC,CAAtC,EAAyC,GAAzC,CAAlB,EAAiE,KAAjE,CAAhB;QACA;;MACF,KAAKtB,cAAc,CAACc,IAApB;QACEX,gBAAgB,CAAC,CAAD,EAAI,MAAJ,CAAhB;QACA;;MACF,KAAKH,cAAc,CAACyB,KAApB;QACEtB,gBAAgB,CAACiB,sBAAsB,qDAAChB,OAAO,CAACY,OAAR,CAAgBK,SAAjB,2DAAC,uBAA2BK,KAA5B,2EAAqC,CAArC,EAAwC,OAAxC,CAAvB,EAAyE,MAAzE,CAAhB;QACA;;MACF,KAAK1B,cAAc,CAAC2B,gBAApB;QACExB,gBAAgB,CAACqB,iBAAiB,qDAACpB,OAAO,CAACY,OAAR,CAAgBK,SAAjB,2DAAC,uBAA2BK,KAA5B,2EAAqC,CAArC,EAAwC,GAAxC,CAAlB,EAAgE,MAAhE,CAAhB;QACA;IAlBJ;;IAqBAtB,OAAO,CAACY,OAAR,CAAgBC,UAAhB,GAA6BF,kBAA7B;IACAX,OAAO,CAACc,0BAAR;EACD,CA9BD,CAHkF,CAmClF;;;EACA,MAAMM,iBAAiB,GAAG,CAACI,WAAD,EAAsBC,KAAtB,KAA2C;IACnE,MAAMC,SAAS,GAAGD,KAAK,KAAK,GAAV,GAAgBxB,QAAQ,CAAC0B,KAAT,CAAeL,KAA/B,GAAuCrB,QAAQ,CAAC0B,KAAT,CAAeT,MAAxE;IAEA,OAAO,CAACQ,SAAS,GAAGF,WAAb,IAA4B,CAAnC;EACD,CAJD;;EAMA,MAAMR,sBAAsB,GAAG,CAACQ,WAAD,EAAsBC,KAAtB,KAAoD;IACjF,MAAMC,SAAS,GAAGD,KAAK,KAAK,OAAV,GAAoBxB,QAAQ,CAAC0B,KAAT,CAAeL,KAAnC,GAA2CrB,QAAQ,CAAC0B,KAAT,CAAeT,MAA5E;IAEA,OAAOQ,SAAS,GAAGF,WAAnB;EACD,CAJD;;EAMA,oBACE;IAAK,SAAS,EAAEtB,MAAM,CAAC0B,WAAvB;IAAA,wBACE,KAAC,UAAD;MACE,IAAI,EAAE,uBADR;MAEE,OAAO,EAAE,MAAMxB,wBAAwB,CAACR,cAAc,CAACc,IAAhB,CAFzC;MAGE,SAAS,EAAER,MAAM,CAAC2B,MAHpB;MAIE,IAAI,EAAE,IAJR;MAKE,OAAO,EAAE;IALX,EADF,eAQE,KAAC,UAAD;MACE,IAAI,EAAE,yBADR;MAEE,OAAO,EAAE,MAAMzB,wBAAwB,CAACR,cAAc,CAAC2B,gBAAhB,CAFzC;MAGE,SAAS,EAAErB,MAAM,CAAC2B,MAHpB;MAIE,IAAI,EAAE,IAJR;MAKE,OAAO,EAAE;IALX,EARF,eAeE,KAAC,UAAD;MACE,IAAI,EAAE,wBADR;MAEE,OAAO,EAAE,MAAMzB,wBAAwB,CAACR,cAAc,CAACyB,KAAhB,CAFzC;MAGE,SAAS,EAAEnB,MAAM,CAAC2B,MAHpB;MAIE,IAAI,EAAE,IAJR;MAKE,OAAO,EAAE;IALX,EAfF,eAsBE,KAAC,UAAD;MACE,IAAI,EAAE,oBADR;MAEE,OAAO,EAAE,MAAMzB,wBAAwB,CAACR,cAAc,CAACY,GAAhB,CAFzC;MAGE,IAAI,EAAE,IAHR;MAIE,OAAO,EAAE;IAJX,EAtBF,eA4BE,KAAC,UAAD;MACE,IAAI,EAAE,uBADR;MAEE,OAAO,EAAE,MAAMJ,wBAAwB,CAACR,cAAc,CAACuB,cAAhB,CAFzC;MAGE,SAAS,EAAEjB,MAAM,CAAC2B,MAHpB;MAIE,IAAI,EAAE,IAJR;MAKE,OAAO,EAAE;IALX,EA5BF,eAmCE,KAAC,UAAD;MACE,IAAI,EAAE,uBADR;MAEE,OAAO,EAAE,MAAMzB,wBAAwB,CAACR,cAAc,CAACmB,MAAhB,CAFzC;MAGE,SAAS,EAAEb,MAAM,CAAC2B,MAHpB;MAIE,IAAI,EAAE,IAJR;MAKE,OAAO,EAAE;IALX,EAnCF;EAAA,EADF;AA6CD,CA7FM;;AA+FP,MAAM1B,SAAS,GAAI2B,KAAD,KAA2B;EAC3CF,WAAW,EAAErC,GAAI;AACnB;AACA;AACA;AACA,GAL6C;EAM3CsC,MAAM,EAAEtC,GAAI;AACd;AACA;AACA;AAT6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}