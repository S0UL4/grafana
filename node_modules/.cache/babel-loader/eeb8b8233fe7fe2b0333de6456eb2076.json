{"ast":null,"code":"import { PluginState } from '@grafana/data';\nimport Feature from 'ol/Feature';\nimport * as style from 'ol/style';\nimport * as source from 'ol/source';\nimport * as layer from 'ol/layer';\nimport { getGeometryField, getLocationMatchers } from 'app/features/geo/utils/location';\nconst defaultOptions = {\n  icon: 'https://openlayers.org/en/latest/examples/data/icon.png'\n};\nexport const lastPointTracker = {\n  id: 'last-point-tracker',\n  name: 'Icon at last point',\n  description: 'Show an icon at the last point',\n  isBaseMap: false,\n  showLocation: true,\n  state: PluginState.alpha,\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param options\n   */\n  create: async (map, options, eventBus, theme) => {\n    const point = new Feature({});\n    const config = Object.assign({}, defaultOptions, options.config);\n    point.setStyle(new style.Style({\n      image: new style.Icon({\n        src: config.icon\n      })\n    }));\n    const vectorSource = new source.Vector({\n      features: [point]\n    });\n    const vectorLayer = new layer.Vector({\n      source: vectorSource\n    });\n    const matchers = await getLocationMatchers(options.location);\n    return {\n      init: () => vectorLayer,\n      update: data => {\n        const frame = data.series[0];\n\n        if (frame && frame.length) {\n          const out = getGeometryField(frame, matchers);\n\n          if (!out.field) {\n            return; // ???\n          }\n\n          point.setGeometry(out.field.values.get(frame.length - 1));\n        }\n      }\n    };\n  },\n  // fill in the default values\n  defaultOptions\n};","map":{"version":3,"names":["PluginState","Feature","style","source","layer","getGeometryField","getLocationMatchers","defaultOptions","icon","lastPointTracker","id","name","description","isBaseMap","showLocation","state","alpha","create","map","options","eventBus","theme","point","config","setStyle","Style","image","Icon","src","vectorSource","Vector","features","vectorLayer","matchers","location","init","update","data","frame","series","length","out","field","setGeometry","values","get"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/layers/data/lastPointTracker.ts"],"sourcesContent":["import { MapLayerRegistryItem, MapLayerOptions, PanelData, GrafanaTheme2, PluginState, EventBus } from '@grafana/data';\nimport Map from 'ol/Map';\nimport Feature from 'ol/Feature';\nimport * as style from 'ol/style';\nimport * as source from 'ol/source';\nimport * as layer from 'ol/layer';\nimport { getGeometryField, getLocationMatchers } from 'app/features/geo/utils/location';\n\nexport interface LastPointConfig {\n  icon?: string;\n}\n\nconst defaultOptions: LastPointConfig = {\n  icon: 'https://openlayers.org/en/latest/examples/data/icon.png',\n};\n\nexport const lastPointTracker: MapLayerRegistryItem<LastPointConfig> = {\n  id: 'last-point-tracker',\n  name: 'Icon at last point',\n  description: 'Show an icon at the last point',\n  isBaseMap: false,\n  showLocation: true,\n  state: PluginState.alpha,\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param options\n   */\n  create: async (map: Map, options: MapLayerOptions<LastPointConfig>, eventBus: EventBus, theme: GrafanaTheme2) => {\n    const point = new Feature({});\n    const config = { ...defaultOptions, ...options.config };\n\n    point.setStyle(\n      new style.Style({\n        image: new style.Icon({\n          src: config.icon,\n        }),\n      })\n    );\n\n    const vectorSource = new source.Vector({\n      features: [point],\n    });\n\n    const vectorLayer = new layer.Vector({\n      source: vectorSource,\n    });\n\n    const matchers = await getLocationMatchers(options.location);\n    return {\n      init: () => vectorLayer,\n      update: (data: PanelData) => {\n        const frame = data.series[0];\n        if (frame && frame.length) {\n          const out = getGeometryField(frame, matchers);\n          if (!out.field) {\n            return; // ???\n          }\n          point.setGeometry(out.field.values.get(frame.length - 1));\n        }\n      },\n    };\n  },\n\n  // fill in the default values\n  defaultOptions,\n};\n"],"mappings":"AAAA,SAA0EA,WAA1E,QAAuG,eAAvG;AAEA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,UAAvB;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,iCAAtD;AAMA,MAAMC,cAA+B,GAAG;EACtCC,IAAI,EAAE;AADgC,CAAxC;AAIA,OAAO,MAAMC,gBAAuD,GAAG;EACrEC,EAAE,EAAE,oBADiE;EAErEC,IAAI,EAAE,oBAF+D;EAGrEC,WAAW,EAAE,gCAHwD;EAIrEC,SAAS,EAAE,KAJ0D;EAKrEC,YAAY,EAAE,IALuD;EAMrEC,KAAK,EAAEf,WAAW,CAACgB,KANkD;;EAQrE;AACF;AACA;AACA;EACEC,MAAM,EAAE,OAAOC,GAAP,EAAiBC,OAAjB,EAA4DC,QAA5D,EAAgFC,KAAhF,KAAyG;IAC/G,MAAMC,KAAK,GAAG,IAAIrB,OAAJ,CAAY,EAAZ,CAAd;IACA,MAAMsB,MAAM,qBAAQhB,cAAR,EAA2BY,OAAO,CAACI,MAAnC,CAAZ;IAEAD,KAAK,CAACE,QAAN,CACE,IAAItB,KAAK,CAACuB,KAAV,CAAgB;MACdC,KAAK,EAAE,IAAIxB,KAAK,CAACyB,IAAV,CAAe;QACpBC,GAAG,EAAEL,MAAM,CAACf;MADQ,CAAf;IADO,CAAhB,CADF;IAQA,MAAMqB,YAAY,GAAG,IAAI1B,MAAM,CAAC2B,MAAX,CAAkB;MACrCC,QAAQ,EAAE,CAACT,KAAD;IAD2B,CAAlB,CAArB;IAIA,MAAMU,WAAW,GAAG,IAAI5B,KAAK,CAAC0B,MAAV,CAAiB;MACnC3B,MAAM,EAAE0B;IAD2B,CAAjB,CAApB;IAIA,MAAMI,QAAQ,GAAG,MAAM3B,mBAAmB,CAACa,OAAO,CAACe,QAAT,CAA1C;IACA,OAAO;MACLC,IAAI,EAAE,MAAMH,WADP;MAELI,MAAM,EAAGC,IAAD,IAAqB;QAC3B,MAAMC,KAAK,GAAGD,IAAI,CAACE,MAAL,CAAY,CAAZ,CAAd;;QACA,IAAID,KAAK,IAAIA,KAAK,CAACE,MAAnB,EAA2B;UACzB,MAAMC,GAAG,GAAGpC,gBAAgB,CAACiC,KAAD,EAAQL,QAAR,CAA5B;;UACA,IAAI,CAACQ,GAAG,CAACC,KAAT,EAAgB;YACd,OADc,CACN;UACT;;UACDpB,KAAK,CAACqB,WAAN,CAAkBF,GAAG,CAACC,KAAJ,CAAUE,MAAV,CAAiBC,GAAjB,CAAqBP,KAAK,CAACE,MAAN,GAAe,CAApC,CAAlB;QACD;MACF;IAXI,CAAP;EAaD,CA9CoE;EAgDrE;EACAjC;AAjDqE,CAAhE"},"metadata":{},"sourceType":"module"}