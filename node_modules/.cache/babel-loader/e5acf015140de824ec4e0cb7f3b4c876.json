{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { executeAnnotationQuery } from '../../../annotations/executeAnnotationQuery';\nimport { handleAnnotationQueryRunnerError } from './utils';\nexport class AnnotationsQueryRunner {\n  canRun(datasource) {\n    if (!datasource) {\n      return false;\n    }\n\n    return Boolean(!datasource.annotationQuery || datasource.annotations);\n  }\n\n  run({\n    annotation,\n    datasource,\n    dashboard,\n    range\n  }) {\n    if (!this.canRun(datasource)) {\n      return of([]);\n    }\n\n    const panel = {}; // deliberate setting panel to empty object because executeAnnotationQuery shouldn't depend on panelModel\n\n    return executeAnnotationQuery({\n      dashboard,\n      range,\n      panel\n    }, datasource, annotation).pipe(map(result => {\n      var _result$events;\n\n      return (_result$events = result.events) !== null && _result$events !== void 0 ? _result$events : [];\n    }), catchError(handleAnnotationQueryRunnerError));\n  }\n\n}","map":{"version":3,"names":["of","catchError","map","executeAnnotationQuery","handleAnnotationQueryRunnerError","AnnotationsQueryRunner","canRun","datasource","Boolean","annotationQuery","annotations","run","annotation","dashboard","range","panel","pipe","result","events"],"sources":["/home/soula/grafana/public/app/features/query/state/DashboardQueryRunner/AnnotationsQueryRunner.ts"],"sourcesContent":["import { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { AnnotationEvent, DataSourceApi } from '@grafana/data';\n\nimport { executeAnnotationQuery } from '../../../annotations/executeAnnotationQuery';\nimport { PanelModel } from '../../../dashboard/state';\n\nimport { AnnotationQueryRunner, AnnotationQueryRunnerOptions } from './types';\nimport { handleAnnotationQueryRunnerError } from './utils';\n\nexport class AnnotationsQueryRunner implements AnnotationQueryRunner {\n  canRun(datasource?: DataSourceApi): boolean {\n    if (!datasource) {\n      return false;\n    }\n\n    return Boolean(!datasource.annotationQuery || datasource.annotations);\n  }\n\n  run({ annotation, datasource, dashboard, range }: AnnotationQueryRunnerOptions): Observable<AnnotationEvent[]> {\n    if (!this.canRun(datasource)) {\n      return of([]);\n    }\n\n    const panel: PanelModel = {} as unknown as PanelModel; // deliberate setting panel to empty object because executeAnnotationQuery shouldn't depend on panelModel\n\n    return executeAnnotationQuery({ dashboard, range, panel }, datasource!, annotation).pipe(\n      map((result) => {\n        return result.events ?? [];\n      }),\n      catchError(handleAnnotationQueryRunnerError)\n    );\n  }\n}\n"],"mappings":"AAAA,SAAqBA,EAArB,QAA+B,MAA/B;AACA,SAASC,UAAT,EAAqBC,GAArB,QAAgC,gBAAhC;AAIA,SAASC,sBAAT,QAAuC,6CAAvC;AAIA,SAASC,gCAAT,QAAiD,SAAjD;AAEA,OAAO,MAAMC,sBAAN,CAA8D;EACnEC,MAAM,CAACC,UAAD,EAAsC;IAC1C,IAAI,CAACA,UAAL,EAAiB;MACf,OAAO,KAAP;IACD;;IAED,OAAOC,OAAO,CAAC,CAACD,UAAU,CAACE,eAAZ,IAA+BF,UAAU,CAACG,WAA3C,CAAd;EACD;;EAEDC,GAAG,CAAC;IAAEC,UAAF;IAAcL,UAAd;IAA0BM,SAA1B;IAAqCC;EAArC,CAAD,EAA4G;IAC7G,IAAI,CAAC,KAAKR,MAAL,CAAYC,UAAZ,CAAL,EAA8B;MAC5B,OAAOP,EAAE,CAAC,EAAD,CAAT;IACD;;IAED,MAAMe,KAAiB,GAAG,EAA1B,CAL6G,CAKtD;;IAEvD,OAAOZ,sBAAsB,CAAC;MAAEU,SAAF;MAAaC,KAAb;MAAoBC;IAApB,CAAD,EAA8BR,UAA9B,EAA2CK,UAA3C,CAAtB,CAA6EI,IAA7E,CACLd,GAAG,CAAEe,MAAD,IAAY;MAAA;;MACd,yBAAOA,MAAM,CAACC,MAAd,2DAAwB,EAAxB;IACD,CAFE,CADE,EAILjB,UAAU,CAACG,gCAAD,CAJL,CAAP;EAMD;;AAtBkE"},"metadata":{},"sourceType":"module"}