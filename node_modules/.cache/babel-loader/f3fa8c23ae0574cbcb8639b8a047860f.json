{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { DataTransformerID, standardTransformers } from '@grafana/data';\nimport { GroupByOperationID } from '@grafana/data/src/transformations/transformers/groupBy';\nimport { Select, StatsPicker, stylesFactory } from '@grafana/ui';\nimport { useAllFieldNamesFromDataFrames } from '../utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GroupByTransformerEditor = ({\n  input,\n  options,\n  onChange\n}) => {\n  const fieldNames = useAllFieldNamesFromDataFrames(input);\n  const onConfigChange = useCallback(fieldName => config => {\n    onChange(Object.assign({}, options, {\n      fields: Object.assign({}, options.fields, {\n        [fieldName]: config\n      })\n    }));\n  }, // Adding options to the dependency array causes infinite loop here.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [onChange]);\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: fieldNames.map(key => /*#__PURE__*/_jsx(GroupByFieldConfiguration, {\n      onConfigChange: onConfigChange(key),\n      fieldName: key,\n      config: options.fields[key]\n    }, key))\n  });\n};\nconst options = [{\n  label: 'Group by',\n  value: GroupByOperationID.groupBy\n}, {\n  label: 'Calculate',\n  value: GroupByOperationID.aggregate\n}];\nexport const GroupByFieldConfiguration = ({\n  fieldName,\n  config,\n  onConfigChange\n}) => {\n  const styles = getStyling();\n  const onChange = useCallback(value => {\n    var _config$aggregations, _value$value;\n\n    onConfigChange({\n      aggregations: (_config$aggregations = config === null || config === void 0 ? void 0 : config.aggregations) !== null && _config$aggregations !== void 0 ? _config$aggregations : [],\n      operation: (_value$value = value === null || value === void 0 ? void 0 : value.value) !== null && _value$value !== void 0 ? _value$value : null\n    });\n  }, [config, onConfigChange]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: cx('gf-form-inline', styles.row),\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: cx('gf-form', styles.fieldName),\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: cx('gf-form-label', styles.rowSpacing),\n        children: fieldName\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: cx('gf-form', styles.cell),\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: cx('gf-form-spacing', styles.rowSpacing),\n        children: /*#__PURE__*/_jsx(Select, {\n          className: \"width-12\",\n          options: options,\n          value: config === null || config === void 0 ? void 0 : config.operation,\n          placeholder: \"Ignored\",\n          onChange: onChange,\n          isClearable: true\n        })\n      })\n    }), (config === null || config === void 0 ? void 0 : config.operation) === GroupByOperationID.aggregate && /*#__PURE__*/_jsx(\"div\", {\n      className: cx('gf-form', 'gf-form--grow', styles.calculations),\n      children: /*#__PURE__*/_jsx(StatsPicker, {\n        className: cx('flex-grow-1', styles.rowSpacing),\n        placeholder: \"Select Stats\",\n        allowMultiple: true,\n        stats: config.aggregations,\n        onChange: stats => {\n          onConfigChange(Object.assign({}, config, {\n            aggregations: stats\n          }));\n        }\n      })\n    })]\n  });\n};\nconst getStyling = stylesFactory(() => {\n  const cell = css`\n    display: table-cell;\n  `;\n  return {\n    row: css`\n      display: table-row;\n    `,\n    cell: cell,\n    rowSpacing: css`\n      margin-bottom: 4px;\n    `,\n    fieldName: css`\n      ${cell}\n      min-width: 250px;\n      white-space: nowrap;\n    `,\n    calculations: css`\n      ${cell}\n      width: 99%;\n    `\n  };\n});\nexport const groupByTransformRegistryItem = {\n  id: DataTransformerID.groupBy,\n  editor: GroupByTransformerEditor,\n  transformation: standardTransformers.groupByTransformer,\n  name: standardTransformers.groupByTransformer.name,\n  description: standardTransformers.groupByTransformer.description\n};","map":{"version":3,"names":["css","cx","React","useCallback","DataTransformerID","standardTransformers","GroupByOperationID","Select","StatsPicker","stylesFactory","useAllFieldNamesFromDataFrames","GroupByTransformerEditor","input","options","onChange","fieldNames","onConfigChange","fieldName","config","fields","map","key","label","value","groupBy","aggregate","GroupByFieldConfiguration","styles","getStyling","aggregations","operation","row","rowSpacing","cell","calculations","stats","groupByTransformRegistryItem","id","editor","transformation","groupByTransformer","name","description"],"sources":["/home/soula/grafana/public/app/features/transformers/editors/GroupByTransformerEditor.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport {\n  DataTransformerID,\n  ReducerID,\n  SelectableValue,\n  standardTransformers,\n  TransformerRegistryItem,\n  TransformerUIProps,\n} from '@grafana/data';\nimport {\n  GroupByFieldOptions,\n  GroupByOperationID,\n  GroupByTransformerOptions,\n} from '@grafana/data/src/transformations/transformers/groupBy';\nimport { Select, StatsPicker, stylesFactory } from '@grafana/ui';\n\nimport { useAllFieldNamesFromDataFrames } from '../utils';\n\ninterface FieldProps {\n  fieldName: string;\n  config?: GroupByFieldOptions;\n  onConfigChange: (config: GroupByFieldOptions) => void;\n}\n\nexport const GroupByTransformerEditor: React.FC<TransformerUIProps<GroupByTransformerOptions>> = ({\n  input,\n  options,\n  onChange,\n}) => {\n  const fieldNames = useAllFieldNamesFromDataFrames(input);\n\n  const onConfigChange = useCallback(\n    (fieldName: string) => (config: GroupByFieldOptions) => {\n      onChange({\n        ...options,\n        fields: {\n          ...options.fields,\n          [fieldName]: config,\n        },\n      });\n    },\n    // Adding options to the dependency array causes infinite loop here.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [onChange]\n  );\n\n  return (\n    <div>\n      {fieldNames.map((key) => (\n        <GroupByFieldConfiguration\n          onConfigChange={onConfigChange(key)}\n          fieldName={key}\n          config={options.fields[key]}\n          key={key}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst options = [\n  { label: 'Group by', value: GroupByOperationID.groupBy },\n  { label: 'Calculate', value: GroupByOperationID.aggregate },\n];\n\nexport const GroupByFieldConfiguration: React.FC<FieldProps> = ({ fieldName, config, onConfigChange }) => {\n  const styles = getStyling();\n\n  const onChange = useCallback(\n    (value: SelectableValue<GroupByOperationID | null>) => {\n      onConfigChange({\n        aggregations: config?.aggregations ?? [],\n        operation: value?.value ?? null,\n      });\n    },\n    [config, onConfigChange]\n  );\n\n  return (\n    <div className={cx('gf-form-inline', styles.row)}>\n      <div className={cx('gf-form', styles.fieldName)}>\n        <div className={cx('gf-form-label', styles.rowSpacing)}>{fieldName}</div>\n      </div>\n\n      <div className={cx('gf-form', styles.cell)}>\n        <div className={cx('gf-form-spacing', styles.rowSpacing)}>\n          <Select\n            className=\"width-12\"\n            options={options}\n            value={config?.operation}\n            placeholder=\"Ignored\"\n            onChange={onChange}\n            isClearable\n          />\n        </div>\n      </div>\n\n      {config?.operation === GroupByOperationID.aggregate && (\n        <div className={cx('gf-form', 'gf-form--grow', styles.calculations)}>\n          <StatsPicker\n            className={cx('flex-grow-1', styles.rowSpacing)}\n            placeholder=\"Select Stats\"\n            allowMultiple\n            stats={config.aggregations}\n            onChange={(stats) => {\n              onConfigChange({ ...config, aggregations: stats as ReducerID[] });\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyling = stylesFactory(() => {\n  const cell = css`\n    display: table-cell;\n  `;\n\n  return {\n    row: css`\n      display: table-row;\n    `,\n    cell: cell,\n    rowSpacing: css`\n      margin-bottom: 4px;\n    `,\n    fieldName: css`\n      ${cell}\n      min-width: 250px;\n      white-space: nowrap;\n    `,\n    calculations: css`\n      ${cell}\n      width: 99%;\n    `,\n  };\n});\n\nexport const groupByTransformRegistryItem: TransformerRegistryItem<GroupByTransformerOptions> = {\n  id: DataTransformerID.groupBy,\n  editor: GroupByTransformerEditor,\n  transformation: standardTransformers.groupByTransformer,\n  name: standardTransformers.groupByTransformer.name,\n  description: standardTransformers.groupByTransformer.description,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}