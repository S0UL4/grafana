{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { DataTransformerID, FrameGeometrySourceMode, PluginState } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\nimport { addLocationFields } from 'app/features/geo/editor/locationEditor';\nimport { SpatialCalculation, SpatialOperation, SpatialAction } from './models.gen';\nimport { getDefaultOptions, getTransformerOptionPane } from './optionsHelper';\nimport { isLineBuilderOption, spatialTransformer } from './spatialTransformer'; // Nothing defined in state\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst supplier = (builder, context) => {\n  var _context$options;\n\n  const options = (_context$options = context.options) !== null && _context$options !== void 0 ? _context$options : {};\n  builder.addSelect({\n    path: `action`,\n    name: 'Action',\n    description: '',\n    defaultValue: SpatialAction.Prepare,\n    settings: {\n      options: [{\n        value: SpatialAction.Prepare,\n        label: 'Prepare spatial field',\n        description: 'Set a geometry field based on the results of other fields'\n      }, {\n        value: SpatialAction.Calculate,\n        label: 'Calculate value',\n        description: 'Use the geometry to define a new field (heading/distance/area)'\n      }, {\n        value: SpatialAction.Modify,\n        label: 'Transform',\n        description: 'Apply spatial operations to the geometry'\n      }]\n    }\n  });\n\n  if (options.action === SpatialAction.Calculate) {\n    builder.addSelect({\n      path: `calculate.calc`,\n      name: 'Function',\n      description: '',\n      defaultValue: SpatialCalculation.Heading,\n      settings: {\n        options: [{\n          value: SpatialCalculation.Heading,\n          label: 'Heading'\n        }, {\n          value: SpatialCalculation.Area,\n          label: 'Area'\n        }, {\n          value: SpatialCalculation.Distance,\n          label: 'Distance'\n        }]\n      }\n    });\n  } else if (options.action === SpatialAction.Modify) {\n    builder.addSelect({\n      path: `modify.op`,\n      name: 'Operation',\n      description: '',\n      defaultValue: SpatialOperation.AsLine,\n      settings: {\n        options: [{\n          value: SpatialOperation.AsLine,\n          label: 'As line',\n          description: 'Create a single line feature with a vertex at each row'\n        }, {\n          value: SpatialOperation.LineBuilder,\n          label: 'Line builder',\n          description: 'Create a line between two points'\n        }]\n      }\n    });\n  }\n\n  if (isLineBuilderOption(options)) {\n    builder.addNestedOptions({\n      category: ['Source'],\n      path: 'source',\n      build: (b, c) => {\n        var _options$source;\n\n        const loc = (_options$source = options.source) !== null && _options$source !== void 0 ? _options$source : {};\n\n        if (!loc.mode) {\n          loc.mode = FrameGeometrySourceMode.Auto;\n        }\n\n        addLocationFields('Point', '', b, loc);\n      }\n    });\n    builder.addNestedOptions({\n      category: ['Target'],\n      path: 'modify',\n      build: (b, c) => {\n        var _options$modify$targe, _options$modify;\n\n        const loc = (_options$modify$targe = (_options$modify = options.modify) === null || _options$modify === void 0 ? void 0 : _options$modify.target) !== null && _options$modify$targe !== void 0 ? _options$modify$targe : {};\n\n        if (!loc.mode) {\n          loc.mode = FrameGeometrySourceMode.Auto;\n        }\n\n        addLocationFields('Point', 'target.', b, loc);\n      }\n    });\n  } else {\n    addLocationFields('Location', 'source.', builder, options.source);\n  }\n};\n\nexport const SetGeometryTransformerEditor = props => {\n  // a new component is created with every change :(\n  useEffect(() => {\n    var _props$options$source;\n\n    if (!((_props$options$source = props.options.source) !== null && _props$options$source !== void 0 && _props$options$source.mode)) {\n      const opts = getDefaultOptions(supplier);\n      props.onChange(Object.assign({}, opts, props.options));\n      console.log('geometry useEffect', opts);\n    }\n  });\n  const styles = getStyles(useTheme2());\n  const pane = getTransformerOptionPane(props, supplier);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      children: pane.items.map(v => v.render())\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: pane.categories.map(c => {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.wrap,\n          children: [/*#__PURE__*/_jsx(\"h5\", {\n            children: c.props.title\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.item,\n            children: c.items.map(s => s.render())\n          })]\n        }, c.props.id);\n      })\n    })]\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    wrap: css`\n      margin-bottom: 20px;\n    `,\n    item: css`\n      border-left: 4px solid ${theme.colors.border.strong};\n      padding-left: 10px;\n    `\n  };\n};\n\nexport const spatialTransformRegistryItem = {\n  id: DataTransformerID.spatial,\n  editor: SetGeometryTransformerEditor,\n  transformation: spatialTransformer,\n  name: spatialTransformer.name,\n  description: spatialTransformer.description,\n  state: PluginState.alpha\n};","map":{"version":3,"names":["css","React","useEffect","DataTransformerID","FrameGeometrySourceMode","PluginState","useTheme2","addLocationFields","SpatialCalculation","SpatialOperation","SpatialAction","getDefaultOptions","getTransformerOptionPane","isLineBuilderOption","spatialTransformer","supplier","builder","context","options","addSelect","path","name","description","defaultValue","Prepare","settings","value","label","Calculate","Modify","action","Heading","Area","Distance","AsLine","LineBuilder","addNestedOptions","category","build","b","c","loc","source","mode","Auto","modify","target","SetGeometryTransformerEditor","props","opts","onChange","console","log","styles","getStyles","pane","items","map","v","render","categories","wrap","title","item","s","id","theme","colors","border","strong","spatialTransformRegistryItem","spatial","editor","transformation","state","alpha"],"sources":["/home/soula/grafana/public/app/features/transformers/spatial/SpatialTransformerEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport {\n  DataTransformerID,\n  FrameGeometrySource,\n  FrameGeometrySourceMode,\n  GrafanaTheme2,\n  PanelOptionsEditorBuilder,\n  PluginState,\n  StandardEditorContext,\n  TransformerRegistryItem,\n  TransformerUIProps,\n} from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\nimport { addLocationFields } from 'app/features/geo/editor/locationEditor';\n\nimport { SpatialCalculation, SpatialOperation, SpatialAction, SpatialTransformOptions } from './models.gen';\nimport { getDefaultOptions, getTransformerOptionPane } from './optionsHelper';\nimport { isLineBuilderOption, spatialTransformer } from './spatialTransformer';\n\n// Nothing defined in state\nconst supplier = (\n  builder: PanelOptionsEditorBuilder<SpatialTransformOptions>,\n  context: StandardEditorContext<SpatialTransformOptions>\n) => {\n  const options = context.options ?? {};\n\n  builder.addSelect({\n    path: `action`,\n    name: 'Action',\n    description: '',\n    defaultValue: SpatialAction.Prepare,\n    settings: {\n      options: [\n        {\n          value: SpatialAction.Prepare,\n          label: 'Prepare spatial field',\n          description: 'Set a geometry field based on the results of other fields',\n        },\n        {\n          value: SpatialAction.Calculate,\n          label: 'Calculate value',\n          description: 'Use the geometry to define a new field (heading/distance/area)',\n        },\n        { value: SpatialAction.Modify, label: 'Transform', description: 'Apply spatial operations to the geometry' },\n      ],\n    },\n  });\n\n  if (options.action === SpatialAction.Calculate) {\n    builder.addSelect({\n      path: `calculate.calc`,\n      name: 'Function',\n      description: '',\n      defaultValue: SpatialCalculation.Heading,\n      settings: {\n        options: [\n          { value: SpatialCalculation.Heading, label: 'Heading' },\n          { value: SpatialCalculation.Area, label: 'Area' },\n          { value: SpatialCalculation.Distance, label: 'Distance' },\n        ],\n      },\n    });\n  } else if (options.action === SpatialAction.Modify) {\n    builder.addSelect({\n      path: `modify.op`,\n      name: 'Operation',\n      description: '',\n      defaultValue: SpatialOperation.AsLine,\n      settings: {\n        options: [\n          {\n            value: SpatialOperation.AsLine,\n            label: 'As line',\n            description: 'Create a single line feature with a vertex at each row',\n          },\n          {\n            value: SpatialOperation.LineBuilder,\n            label: 'Line builder',\n            description: 'Create a line between two points',\n          },\n        ],\n      },\n    });\n  }\n\n  if (isLineBuilderOption(options)) {\n    builder.addNestedOptions({\n      category: ['Source'],\n      path: 'source',\n      build: (b, c) => {\n        const loc = (options.source ?? {}) as FrameGeometrySource;\n        if (!loc.mode) {\n          loc.mode = FrameGeometrySourceMode.Auto;\n        }\n        addLocationFields('Point', '', b, loc);\n      },\n    });\n\n    builder.addNestedOptions({\n      category: ['Target'],\n      path: 'modify',\n      build: (b, c) => {\n        const loc = (options.modify?.target ?? {}) as FrameGeometrySource;\n        if (!loc.mode) {\n          loc.mode = FrameGeometrySourceMode.Auto;\n        }\n        addLocationFields('Point', 'target.', b, loc);\n      },\n    });\n  } else {\n    addLocationFields('Location', 'source.', builder, options.source);\n  }\n};\n\nexport const SetGeometryTransformerEditor: React.FC<TransformerUIProps<SpatialTransformOptions>> = (props) => {\n  // a new component is created with every change :(\n  useEffect(() => {\n    if (!props.options.source?.mode) {\n      const opts = getDefaultOptions(supplier);\n      props.onChange({ ...opts, ...props.options });\n      console.log('geometry useEffect', opts);\n    }\n  });\n\n  const styles = getStyles(useTheme2());\n\n  const pane = getTransformerOptionPane<SpatialTransformOptions>(props, supplier);\n  return (\n    <div>\n      <div>{pane.items.map((v) => v.render())}</div>\n      <div>\n        {pane.categories.map((c) => {\n          return (\n            <div key={c.props.id} className={styles.wrap}>\n              <h5>{c.props.title}</h5>\n              <div className={styles.item}>{c.items.map((s) => s.render())}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      margin-bottom: 20px;\n    `,\n    item: css`\n      border-left: 4px solid ${theme.colors.border.strong};\n      padding-left: 10px;\n    `,\n  };\n};\n\nexport const spatialTransformRegistryItem: TransformerRegistryItem<SpatialTransformOptions> = {\n  id: DataTransformerID.spatial,\n  editor: SetGeometryTransformerEditor,\n  transformation: spatialTransformer,\n  name: spatialTransformer.name,\n  description: spatialTransformer.description,\n  state: PluginState.alpha,\n};\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SACEC,iBADF,EAGEC,uBAHF,EAMEC,WANF,QAUO,eAVP;AAWA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AAEA,SAASC,kBAAT,EAA6BC,gBAA7B,EAA+CC,aAA/C,QAA6F,cAA7F;AACA,SAASC,iBAAT,EAA4BC,wBAA5B,QAA4D,iBAA5D;AACA,SAASC,mBAAT,EAA8BC,kBAA9B,QAAwD,sBAAxD,C,CAEA;;;;;AACA,MAAMC,QAAQ,GAAG,CACfC,OADe,EAEfC,OAFe,KAGZ;EAAA;;EACH,MAAMC,OAAO,uBAAGD,OAAO,CAACC,OAAX,+DAAsB,EAAnC;EAEAF,OAAO,CAACG,SAAR,CAAkB;IAChBC,IAAI,EAAG,QADS;IAEhBC,IAAI,EAAE,QAFU;IAGhBC,WAAW,EAAE,EAHG;IAIhBC,YAAY,EAAEb,aAAa,CAACc,OAJZ;IAKhBC,QAAQ,EAAE;MACRP,OAAO,EAAE,CACP;QACEQ,KAAK,EAAEhB,aAAa,CAACc,OADvB;QAEEG,KAAK,EAAE,uBAFT;QAGEL,WAAW,EAAE;MAHf,CADO,EAMP;QACEI,KAAK,EAAEhB,aAAa,CAACkB,SADvB;QAEED,KAAK,EAAE,iBAFT;QAGEL,WAAW,EAAE;MAHf,CANO,EAWP;QAAEI,KAAK,EAAEhB,aAAa,CAACmB,MAAvB;QAA+BF,KAAK,EAAE,WAAtC;QAAmDL,WAAW,EAAE;MAAhE,CAXO;IADD;EALM,CAAlB;;EAsBA,IAAIJ,OAAO,CAACY,MAAR,KAAmBpB,aAAa,CAACkB,SAArC,EAAgD;IAC9CZ,OAAO,CAACG,SAAR,CAAkB;MAChBC,IAAI,EAAG,gBADS;MAEhBC,IAAI,EAAE,UAFU;MAGhBC,WAAW,EAAE,EAHG;MAIhBC,YAAY,EAAEf,kBAAkB,CAACuB,OAJjB;MAKhBN,QAAQ,EAAE;QACRP,OAAO,EAAE,CACP;UAAEQ,KAAK,EAAElB,kBAAkB,CAACuB,OAA5B;UAAqCJ,KAAK,EAAE;QAA5C,CADO,EAEP;UAAED,KAAK,EAAElB,kBAAkB,CAACwB,IAA5B;UAAkCL,KAAK,EAAE;QAAzC,CAFO,EAGP;UAAED,KAAK,EAAElB,kBAAkB,CAACyB,QAA5B;UAAsCN,KAAK,EAAE;QAA7C,CAHO;MADD;IALM,CAAlB;EAaD,CAdD,MAcO,IAAIT,OAAO,CAACY,MAAR,KAAmBpB,aAAa,CAACmB,MAArC,EAA6C;IAClDb,OAAO,CAACG,SAAR,CAAkB;MAChBC,IAAI,EAAG,WADS;MAEhBC,IAAI,EAAE,WAFU;MAGhBC,WAAW,EAAE,EAHG;MAIhBC,YAAY,EAAEd,gBAAgB,CAACyB,MAJf;MAKhBT,QAAQ,EAAE;QACRP,OAAO,EAAE,CACP;UACEQ,KAAK,EAAEjB,gBAAgB,CAACyB,MAD1B;UAEEP,KAAK,EAAE,SAFT;UAGEL,WAAW,EAAE;QAHf,CADO,EAMP;UACEI,KAAK,EAAEjB,gBAAgB,CAAC0B,WAD1B;UAEER,KAAK,EAAE,cAFT;UAGEL,WAAW,EAAE;QAHf,CANO;MADD;IALM,CAAlB;EAoBD;;EAED,IAAIT,mBAAmB,CAACK,OAAD,CAAvB,EAAkC;IAChCF,OAAO,CAACoB,gBAAR,CAAyB;MACvBC,QAAQ,EAAE,CAAC,QAAD,CADa;MAEvBjB,IAAI,EAAE,QAFiB;MAGvBkB,KAAK,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU;QAAA;;QACf,MAAMC,GAAG,sBAAIvB,OAAO,CAACwB,MAAZ,6DAAsB,EAA/B;;QACA,IAAI,CAACD,GAAG,CAACE,IAAT,EAAe;UACbF,GAAG,CAACE,IAAJ,GAAWvC,uBAAuB,CAACwC,IAAnC;QACD;;QACDrC,iBAAiB,CAAC,OAAD,EAAU,EAAV,EAAcgC,CAAd,EAAiBE,GAAjB,CAAjB;MACD;IATsB,CAAzB;IAYAzB,OAAO,CAACoB,gBAAR,CAAyB;MACvBC,QAAQ,EAAE,CAAC,QAAD,CADa;MAEvBjB,IAAI,EAAE,QAFiB;MAGvBkB,KAAK,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU;QAAA;;QACf,MAAMC,GAAG,+CAAIvB,OAAO,CAAC2B,MAAZ,oDAAI,gBAAgBC,MAApB,yEAA8B,EAAvC;;QACA,IAAI,CAACL,GAAG,CAACE,IAAT,EAAe;UACbF,GAAG,CAACE,IAAJ,GAAWvC,uBAAuB,CAACwC,IAAnC;QACD;;QACDrC,iBAAiB,CAAC,OAAD,EAAU,SAAV,EAAqBgC,CAArB,EAAwBE,GAAxB,CAAjB;MACD;IATsB,CAAzB;EAWD,CAxBD,MAwBO;IACLlC,iBAAiB,CAAC,UAAD,EAAa,SAAb,EAAwBS,OAAxB,EAAiCE,OAAO,CAACwB,MAAzC,CAAjB;EACD;AACF,CA5FD;;AA8FA,OAAO,MAAMK,4BAAmF,GAAIC,KAAD,IAAW;EAC5G;EACA9C,SAAS,CAAC,MAAM;IAAA;;IACd,IAAI,2BAAC8C,KAAK,CAAC9B,OAAN,CAAcwB,MAAf,kDAAC,sBAAsBC,IAAvB,CAAJ,EAAiC;MAC/B,MAAMM,IAAI,GAAGtC,iBAAiB,CAACI,QAAD,CAA9B;MACAiC,KAAK,CAACE,QAAN,mBAAoBD,IAApB,EAA6BD,KAAK,CAAC9B,OAAnC;MACAiC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCH,IAAlC;IACD;EACF,CANQ,CAAT;EAQA,MAAMI,MAAM,GAAGC,SAAS,CAAChD,SAAS,EAAV,CAAxB;EAEA,MAAMiD,IAAI,GAAG3C,wBAAwB,CAA0BoC,KAA1B,EAAiCjC,QAAjC,CAArC;EACA,oBACE;IAAA,wBACE;MAAA,UAAMwC,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAgBC,CAAD,IAAOA,CAAC,CAACC,MAAF,EAAtB;IAAN,EADF,eAEE;MAAA,UACGJ,IAAI,CAACK,UAAL,CAAgBH,GAAhB,CAAqBjB,CAAD,IAAO;QAC1B,oBACE;UAAsB,SAAS,EAAEa,MAAM,CAACQ,IAAxC;UAAA,wBACE;YAAA,UAAKrB,CAAC,CAACQ,KAAF,CAAQc;UAAb,EADF,eAEE;YAAK,SAAS,EAAET,MAAM,CAACU,IAAvB;YAAA,UAA8BvB,CAAC,CAACgB,KAAF,CAAQC,GAAR,CAAaO,CAAD,IAAOA,CAAC,CAACL,MAAF,EAAnB;UAA9B,EAFF;QAAA,GAAUnB,CAAC,CAACQ,KAAF,CAAQiB,EAAlB,CADF;MAMD,CAPA;IADH,EAFF;EAAA,EADF;AAeD,CA5BM;;AA8BP,MAAMX,SAAS,GAAIY,KAAD,IAA0B;EAC1C,OAAO;IACLL,IAAI,EAAE7D,GAAI;AACd;AACA,KAHS;IAIL+D,IAAI,EAAE/D,GAAI;AACd,+BAA+BkE,KAAK,CAACC,MAAN,CAAaC,MAAb,CAAoBC,MAAO;AAC1D;AACA;EAPS,CAAP;AASD,CAVD;;AAYA,OAAO,MAAMC,4BAA8E,GAAG;EAC5FL,EAAE,EAAE9D,iBAAiB,CAACoE,OADsE;EAE5FC,MAAM,EAAEzB,4BAFoF;EAG5F0B,cAAc,EAAE3D,kBAH4E;EAI5FO,IAAI,EAAEP,kBAAkB,CAACO,IAJmE;EAK5FC,WAAW,EAAER,kBAAkB,CAACQ,WAL4D;EAM5FoD,KAAK,EAAErE,WAAW,CAACsE;AANyE,CAAvF"},"metadata":{},"sourceType":"module"}