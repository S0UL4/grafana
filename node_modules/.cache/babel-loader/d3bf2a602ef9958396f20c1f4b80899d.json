{"ast":null,"code":"import React, { useCallback, useEffect, useState } from 'react';\nimport { getAlignmentPickerData } from '../functions';\nimport { AlignmentTypes, EditorMode, MetricKind, PreprocessorType, ValueTypes } from '../types';\nimport { GraphPeriod } from './GraphPeriod';\nimport { MQLQueryEditor } from './MQLQueryEditor';\nimport { AliasBy, Project, VisualMetricQueryEditor } from '.';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const defaultState = {\n  labels: {}\n};\nexport const defaultQuery = dataSource => ({\n  editorMode: EditorMode.Visual,\n  projectName: dataSource.getDefaultProject(),\n  metricType: '',\n  metricKind: MetricKind.GAUGE,\n  valueType: '',\n  crossSeriesReducer: 'REDUCE_MEAN',\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  groupBys: [],\n  filters: [],\n  aliasBy: '',\n  query: '',\n  preprocessor: PreprocessorType.None\n});\n\nfunction Editor({\n  refId,\n  query,\n  datasource,\n  onChange: onQueryChange,\n  onRunQuery,\n  customMetaData,\n  variableOptionGroup\n}) {\n  const [state, setState] = useState(defaultState);\n  const {\n    projectName,\n    metricType,\n    groupBys,\n    editorMode,\n    crossSeriesReducer\n  } = query;\n  useEffect(() => {\n    if (projectName && metricType) {\n      datasource.getLabels(metricType, refId, projectName).then(labels => setState(prevState => Object.assign({}, prevState, {\n        labels\n      })));\n    }\n  }, [datasource, groupBys, metricType, projectName, refId, crossSeriesReducer]);\n  const onChange = useCallback(metricQuery => {\n    onQueryChange(Object.assign({}, query, metricQuery));\n    onRunQuery();\n  }, [onQueryChange, onRunQuery, query]);\n  const onMetricTypeChange = useCallback(({\n    valueType,\n    metricKind,\n    type\n  }) => {\n    const preprocessor = metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION ? PreprocessorType.None : PreprocessorType.Rate;\n    const {\n      perSeriesAligner\n    } = getAlignmentPickerData(valueType, metricKind, state.perSeriesAligner, preprocessor);\n    onChange(Object.assign({}, query, {\n      perSeriesAligner,\n      metricType: type,\n      valueType,\n      metricKind,\n      preprocessor\n    }));\n  }, [onChange, query, state]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Project, {\n      refId: refId,\n      templateVariableOptions: variableOptionGroup.options,\n      projectName: projectName,\n      datasource: datasource,\n      onChange: projectName => {\n        onChange(Object.assign({}, query, {\n          projectName\n        }));\n      }\n    }), editorMode === EditorMode.Visual && /*#__PURE__*/_jsx(VisualMetricQueryEditor, {\n      refId: refId,\n      labels: state.labels,\n      variableOptionGroup: variableOptionGroup,\n      customMetaData: customMetaData,\n      onMetricTypeChange: onMetricTypeChange,\n      onChange: onChange,\n      datasource: datasource,\n      query: query\n    }), editorMode === EditorMode.MQL && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(MQLQueryEditor, {\n        onChange: q => onQueryChange(Object.assign({}, query, {\n          query: q\n        })),\n        onRunQuery: onRunQuery,\n        query: query.query\n      }), /*#__PURE__*/_jsx(GraphPeriod, {\n        onChange: graphPeriod => onQueryChange(Object.assign({}, query, {\n          graphPeriod\n        })),\n        graphPeriod: query.graphPeriod,\n        refId: refId,\n        variableOptionGroup: variableOptionGroup\n      })]\n    }), /*#__PURE__*/_jsx(AliasBy, {\n      refId: refId,\n      value: query.aliasBy,\n      onChange: aliasBy => {\n        onChange(Object.assign({}, query, {\n          aliasBy\n        }));\n      }\n    })]\n  });\n}\n\nexport const MetricQueryEditor = /*#__PURE__*/React.memo(Editor);","map":{"version":3,"names":["React","useCallback","useEffect","useState","getAlignmentPickerData","AlignmentTypes","EditorMode","MetricKind","PreprocessorType","ValueTypes","GraphPeriod","MQLQueryEditor","AliasBy","Project","VisualMetricQueryEditor","defaultState","labels","defaultQuery","dataSource","editorMode","Visual","projectName","getDefaultProject","metricType","metricKind","GAUGE","valueType","crossSeriesReducer","alignmentPeriod","perSeriesAligner","ALIGN_MEAN","groupBys","filters","aliasBy","query","preprocessor","None","Editor","refId","datasource","onChange","onQueryChange","onRunQuery","customMetaData","variableOptionGroup","state","setState","getLabels","then","prevState","metricQuery","onMetricTypeChange","type","DISTRIBUTION","Rate","options","MQL","q","graphPeriod","MetricQueryEditor","memo"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/MetricQueryEditor.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { getAlignmentPickerData } from '../functions';\nimport {\n  AlignmentTypes,\n  CustomMetaData,\n  EditorMode,\n  MetricDescriptor,\n  MetricKind,\n  MetricQuery,\n  PreprocessorType,\n  SLOQuery,\n  ValueTypes,\n} from '../types';\n\nimport { GraphPeriod } from './GraphPeriod';\nimport { MQLQueryEditor } from './MQLQueryEditor';\n\nimport { AliasBy, Project, VisualMetricQueryEditor } from '.';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: MetricQuery) => void;\n  onRunQuery: () => void;\n  query: MetricQuery;\n  datasource: CloudMonitoringDatasource;\n}\n\ninterface State {\n  labels: any;\n  [key: string]: any;\n}\n\nexport const defaultState: State = {\n  labels: {},\n};\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => MetricQuery = (dataSource) => ({\n  editorMode: EditorMode.Visual,\n  projectName: dataSource.getDefaultProject(),\n  metricType: '',\n  metricKind: MetricKind.GAUGE,\n  valueType: '',\n  crossSeriesReducer: 'REDUCE_MEAN',\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  groupBys: [],\n  filters: [],\n  aliasBy: '',\n  query: '',\n  preprocessor: PreprocessorType.None,\n});\n\nfunction Editor({\n  refId,\n  query,\n  datasource,\n  onChange: onQueryChange,\n  onRunQuery,\n  customMetaData,\n  variableOptionGroup,\n}: React.PropsWithChildren<Props>) {\n  const [state, setState] = useState<State>(defaultState);\n  const { projectName, metricType, groupBys, editorMode, crossSeriesReducer } = query;\n\n  useEffect(() => {\n    if (projectName && metricType) {\n      datasource\n        .getLabels(metricType, refId, projectName)\n        .then((labels) => setState((prevState) => ({ ...prevState, labels })));\n    }\n  }, [datasource, groupBys, metricType, projectName, refId, crossSeriesReducer]);\n\n  const onChange = useCallback(\n    (metricQuery: MetricQuery | SLOQuery) => {\n      onQueryChange({ ...query, ...metricQuery });\n      onRunQuery();\n    },\n    [onQueryChange, onRunQuery, query]\n  );\n\n  const onMetricTypeChange = useCallback(\n    ({ valueType, metricKind, type }: MetricDescriptor) => {\n      const preprocessor =\n        metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION\n          ? PreprocessorType.None\n          : PreprocessorType.Rate;\n      const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, state.perSeriesAligner, preprocessor);\n      onChange({\n        ...query,\n        perSeriesAligner,\n        metricType: type,\n        valueType,\n        metricKind,\n        preprocessor,\n      });\n    },\n    [onChange, query, state]\n  );\n\n  return (\n    <>\n      <Project\n        refId={refId}\n        templateVariableOptions={variableOptionGroup.options}\n        projectName={projectName}\n        datasource={datasource}\n        onChange={(projectName) => {\n          onChange({ ...query, projectName });\n        }}\n      />\n\n      {editorMode === EditorMode.Visual && (\n        <VisualMetricQueryEditor\n          refId={refId}\n          labels={state.labels}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onMetricTypeChange={onMetricTypeChange}\n          onChange={onChange}\n          datasource={datasource}\n          query={query}\n        />\n      )}\n\n      {editorMode === EditorMode.MQL && (\n        <>\n          <MQLQueryEditor\n            onChange={(q: string) => onQueryChange({ ...query, query: q })}\n            onRunQuery={onRunQuery}\n            query={query.query}\n          ></MQLQueryEditor>\n          <GraphPeriod\n            onChange={(graphPeriod: string) => onQueryChange({ ...query, graphPeriod })}\n            graphPeriod={query.graphPeriod}\n            refId={refId}\n            variableOptionGroup={variableOptionGroup}\n          />\n        </>\n      )}\n\n      <AliasBy\n        refId={refId}\n        value={query.aliasBy}\n        onChange={(aliasBy) => {\n          onChange({ ...query, aliasBy });\n        }}\n      />\n    </>\n  );\n}\n\nexport const MetricQueryEditor = React.memo(Editor);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}