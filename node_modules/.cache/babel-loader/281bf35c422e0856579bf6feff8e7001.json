{"ast":null,"code":"import { binaryScalarOperations } from './binaryScalarOperations';\nimport { LabelParamEditor } from './components/LabelParamEditor';\nimport { defaultAddOperationHandler, functionRendererLeft, functionRendererRight, getPromAndLokiOperationDisplayName, getRangeVectorParamDef, rangeRendererLeftWithParams, rangeRendererRightWithParams } from './shared/operationUtils';\nimport { PromOperationId, PromVisualQueryOperationCategory } from './types';\nexport function getOperationDefinitions() {\n  const list = [{\n    id: PromOperationId.HistogramQuantile,\n    name: 'Histogram quantile',\n    params: [{\n      name: 'Quantile',\n      type: 'number',\n      options: [0.99, 0.95, 0.9, 0.75, 0.5, 0.25]\n    }],\n    defaultParams: [0.9],\n    category: PromVisualQueryOperationCategory.Functions,\n    renderer: functionRendererLeft,\n    addOperationHandler: defaultAddOperationHandler\n  }, {\n    id: PromOperationId.LabelReplace,\n    name: 'Label replace',\n    params: [{\n      name: 'Destination label',\n      type: 'string'\n    }, {\n      name: 'Replacement',\n      type: 'string'\n    }, {\n      name: 'Source label',\n      type: 'string'\n    }, {\n      name: 'Regex',\n      type: 'string'\n    }],\n    category: PromVisualQueryOperationCategory.Functions,\n    defaultParams: ['', '$1', '', '(.*)'],\n    renderer: functionRendererRight,\n    addOperationHandler: defaultAddOperationHandler\n  }, {\n    id: PromOperationId.Ln,\n    name: 'Ln',\n    params: [],\n    defaultParams: [],\n    category: PromVisualQueryOperationCategory.Functions,\n    renderer: functionRendererLeft,\n    addOperationHandler: defaultAddOperationHandler\n  }, createRangeFunction(PromOperationId.Changes), createRangeFunction(PromOperationId.Rate, true), createRangeFunction(PromOperationId.Irate), createRangeFunction(PromOperationId.Increase, true), createRangeFunction(PromOperationId.Idelta), createRangeFunction(PromOperationId.Delta), createFunction({\n    id: PromOperationId.HoltWinters,\n    params: [getRangeVectorParamDef(), {\n      name: 'Smoothing Factor',\n      type: 'number'\n    }, {\n      name: 'Trend Factor',\n      type: 'number'\n    }],\n    defaultParams: ['$__interval', 0.5, 0.5],\n    alternativesKey: 'range function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: rangeRendererRightWithParams,\n    addOperationHandler: addOperationWithRangeVector,\n    changeTypeHandler: operationTypeChangedHandlerForRangeFunction\n  }), createFunction({\n    id: PromOperationId.PredictLinear,\n    params: [getRangeVectorParamDef(), {\n      name: 'Seconds from now',\n      type: 'number'\n    }],\n    defaultParams: ['$__interval', 60],\n    alternativesKey: 'range function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: rangeRendererRightWithParams,\n    addOperationHandler: addOperationWithRangeVector,\n    changeTypeHandler: operationTypeChangedHandlerForRangeFunction\n  }), createFunction({\n    id: PromOperationId.QuantileOverTime,\n    params: [getRangeVectorParamDef(), {\n      name: 'Quantile',\n      type: 'number'\n    }],\n    defaultParams: ['$__interval', 0.5],\n    alternativesKey: 'overtime function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: rangeRendererLeftWithParams,\n    addOperationHandler: addOperationWithRangeVector,\n    changeTypeHandler: operationTypeChangedHandlerForRangeFunction\n  }), ...binaryScalarOperations, {\n    id: PromOperationId.NestedQuery,\n    name: 'Binary operation with query',\n    params: [],\n    defaultParams: [],\n    category: PromVisualQueryOperationCategory.BinaryOps,\n    renderer: (model, def, innerExpr) => innerExpr,\n    addOperationHandler: addNestedQueryHandler\n  }, createFunction({\n    id: PromOperationId.Absent\n  }), createFunction({\n    id: PromOperationId.Acos,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Acosh,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Asin,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Asinh,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Atan,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Atanh,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Ceil\n  }), createFunction({\n    id: PromOperationId.Clamp,\n    name: 'Clamp',\n    params: [{\n      name: 'Minimum Scalar',\n      type: 'number'\n    }, {\n      name: 'Maximum Scalar',\n      type: 'number'\n    }],\n    defaultParams: [1, 1]\n  }), createFunction({\n    id: PromOperationId.ClampMax,\n    params: [{\n      name: 'Maximum Scalar',\n      type: 'number'\n    }],\n    defaultParams: [1]\n  }), createFunction({\n    id: PromOperationId.ClampMin,\n    params: [{\n      name: 'Minimum Scalar',\n      type: 'number'\n    }],\n    defaultParams: [1]\n  }), createFunction({\n    id: PromOperationId.Cos,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Cosh,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.DayOfMonth,\n    category: PromVisualQueryOperationCategory.Time\n  }), createFunction({\n    id: PromOperationId.DayOfWeek,\n    category: PromVisualQueryOperationCategory.Time\n  }), createFunction({\n    id: PromOperationId.DaysInMonth,\n    category: PromVisualQueryOperationCategory.Time\n  }), createFunction({\n    id: PromOperationId.Deg\n  }), createRangeFunction(PromOperationId.Deriv), //\n  createFunction({\n    id: PromOperationId.Exp\n  }), createFunction({\n    id: PromOperationId.Floor\n  }), createFunction({\n    id: PromOperationId.Group\n  }), createFunction({\n    id: PromOperationId.Hour\n  }), createFunction({\n    id: PromOperationId.LabelJoin,\n    params: [{\n      name: 'Destination Label',\n      type: 'string',\n      editor: LabelParamEditor\n    }, {\n      name: 'Separator',\n      type: 'string'\n    }, {\n      name: 'Source Label',\n      type: 'string',\n      restParam: true,\n      optional: true,\n      editor: LabelParamEditor\n    }],\n    defaultParams: ['', ',', ''],\n    renderer: labelJoinRenderer,\n    addOperationHandler: labelJoinAddOperationHandler\n  }), createFunction({\n    id: PromOperationId.Log10\n  }), createFunction({\n    id: PromOperationId.Log2\n  }), createFunction({\n    id: PromOperationId.Minute\n  }), createFunction({\n    id: PromOperationId.Month\n  }), createFunction({\n    id: PromOperationId.Pi,\n    renderer: model => `${model.id}()`\n  }), createFunction({\n    id: PromOperationId.Quantile,\n    params: [{\n      name: 'Value',\n      type: 'number'\n    }],\n    defaultParams: [1],\n    renderer: functionRendererLeft\n  }), createFunction({\n    id: PromOperationId.Rad\n  }), createRangeFunction(PromOperationId.Resets), createFunction({\n    id: PromOperationId.Round,\n    category: PromVisualQueryOperationCategory.Functions,\n    params: [{\n      name: 'To Nearest',\n      type: 'number'\n    }],\n    defaultParams: [1]\n  }), createFunction({\n    id: PromOperationId.Scalar\n  }), createFunction({\n    id: PromOperationId.Sgn\n  }), createFunction({\n    id: PromOperationId.Sin,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Sinh,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Sort\n  }), createFunction({\n    id: PromOperationId.SortDesc\n  }), createFunction({\n    id: PromOperationId.Sqrt\n  }), createFunction({\n    id: PromOperationId.Stddev\n  }), createFunction({\n    id: PromOperationId.Tan,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Tanh,\n    category: PromVisualQueryOperationCategory.Trigonometric\n  }), createFunction({\n    id: PromOperationId.Time,\n    renderer: model => `${model.id}()`\n  }), createFunction({\n    id: PromOperationId.Timestamp\n  }), createFunction({\n    id: PromOperationId.Vector,\n    params: [{\n      name: 'Value',\n      type: 'number'\n    }],\n    defaultParams: [1],\n    renderer: model => `${model.id}(${model.params[0]})`\n  }), createFunction({\n    id: PromOperationId.Year\n  })];\n  return list;\n}\nexport function createFunction(definition) {\n  var _definition$name, _definition$params, _definition$defaultPa, _definition$category, _definition$renderer, _definition$addOperat;\n\n  return Object.assign({}, definition, {\n    id: definition.id,\n    name: (_definition$name = definition.name) !== null && _definition$name !== void 0 ? _definition$name : getPromAndLokiOperationDisplayName(definition.id),\n    params: (_definition$params = definition.params) !== null && _definition$params !== void 0 ? _definition$params : [],\n    defaultParams: (_definition$defaultPa = definition.defaultParams) !== null && _definition$defaultPa !== void 0 ? _definition$defaultPa : [],\n    category: (_definition$category = definition.category) !== null && _definition$category !== void 0 ? _definition$category : PromVisualQueryOperationCategory.Functions,\n    renderer: (_definition$renderer = definition.renderer) !== null && _definition$renderer !== void 0 ? _definition$renderer : definition.params ? functionRendererRight : functionRendererLeft,\n    addOperationHandler: (_definition$addOperat = definition.addOperationHandler) !== null && _definition$addOperat !== void 0 ? _definition$addOperat : defaultAddOperationHandler\n  });\n}\nexport function createRangeFunction(name, withRateInterval = false) {\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: [getRangeVectorParamDef(withRateInterval)],\n    defaultParams: [withRateInterval ? '$__rate_interval' : '$__interval'],\n    alternativesKey: 'range function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addOperationWithRangeVector,\n    changeTypeHandler: operationTypeChangedHandlerForRangeFunction\n  };\n}\n\nfunction operationTypeChangedHandlerForRangeFunction(operation, newDef) {\n  // validate current parameter\n  if (operation.params[0] === '$__rate_interval' && newDef.defaultParams[0] !== '$__rate_interval') {\n    operation.params = newDef.defaultParams;\n  } else if (operation.params[0] === '$__interval' && newDef.defaultParams[0] !== '$__interval') {\n    operation.params = newDef.defaultParams;\n  }\n\n  return operation;\n}\n\nexport function operationWithRangeVectorRenderer(model, def, innerExpr) {\n  var _, _model$params;\n\n  let rangeVector = (_ = ((_model$params = model.params) !== null && _model$params !== void 0 ? _model$params : [])[0]) !== null && _ !== void 0 ? _ : '5m';\n  return `${def.id}(${innerExpr}[${rangeVector}])`;\n}\n/**\n * Since there can only be one operation with range vector this will replace the current one (if one was added )\n */\n\nexport function addOperationWithRangeVector(def, query, modeller) {\n  const newOperation = {\n    id: def.id,\n    params: def.defaultParams\n  };\n\n  if (query.operations.length > 0) {\n    // If operation exists it has to be in the registry so no point to check if it was found\n    const firstOp = modeller.getOperationDef(query.operations[0].id);\n\n    if (firstOp.addOperationHandler === addOperationWithRangeVector) {\n      return Object.assign({}, query, {\n        operations: [newOperation, ...query.operations.slice(1)]\n      });\n    }\n  }\n\n  return Object.assign({}, query, {\n    operations: [newOperation, ...query.operations]\n  });\n}\n\nfunction addNestedQueryHandler(def, query) {\n  var _query$binaryQueries;\n\n  return Object.assign({}, query, {\n    binaryQueries: [...((_query$binaryQueries = query.binaryQueries) !== null && _query$binaryQueries !== void 0 ? _query$binaryQueries : []), {\n      operator: '/',\n      query\n    }]\n  });\n}\n\nfunction labelJoinRenderer(model, def, innerExpr) {\n  if (typeof model.params[1] !== 'string') {\n    throw 'The separator must be a string';\n  }\n\n  const separator = `\"${model.params[1]}\"`;\n  return `${model.id}(${innerExpr}, \"${model.params[0]}\", ${separator}, \"${model.params.slice(2).join(separator)}\")`;\n}\n\nfunction labelJoinAddOperationHandler(def, query) {\n  const newOperation = {\n    id: def.id,\n    params: def.defaultParams\n  };\n  return Object.assign({}, query, {\n    operations: [...query.operations, newOperation]\n  });\n}","map":{"version":3,"names":["binaryScalarOperations","LabelParamEditor","defaultAddOperationHandler","functionRendererLeft","functionRendererRight","getPromAndLokiOperationDisplayName","getRangeVectorParamDef","rangeRendererLeftWithParams","rangeRendererRightWithParams","PromOperationId","PromVisualQueryOperationCategory","getOperationDefinitions","list","id","HistogramQuantile","name","params","type","options","defaultParams","category","Functions","renderer","addOperationHandler","LabelReplace","Ln","createRangeFunction","Changes","Rate","Irate","Increase","Idelta","Delta","createFunction","HoltWinters","alternativesKey","RangeFunctions","addOperationWithRangeVector","changeTypeHandler","operationTypeChangedHandlerForRangeFunction","PredictLinear","QuantileOverTime","NestedQuery","BinaryOps","model","def","innerExpr","addNestedQueryHandler","Absent","Acos","Trigonometric","Acosh","Asin","Asinh","Atan","Atanh","Ceil","Clamp","ClampMax","ClampMin","Cos","Cosh","DayOfMonth","Time","DayOfWeek","DaysInMonth","Deg","Deriv","Exp","Floor","Group","Hour","LabelJoin","editor","restParam","optional","labelJoinRenderer","labelJoinAddOperationHandler","Log10","Log2","Minute","Month","Pi","Quantile","Rad","Resets","Round","Scalar","Sgn","Sin","Sinh","Sort","SortDesc","Sqrt","Stddev","Tan","Tanh","Timestamp","Vector","Year","definition","withRateInterval","operationWithRangeVectorRenderer","operation","newDef","rangeVector","query","modeller","newOperation","operations","length","firstOp","getOperationDef","slice","binaryQueries","operator","separator","join"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/operations.ts"],"sourcesContent":["import { binaryScalarOperations } from './binaryScalarOperations';\nimport { LabelParamEditor } from './components/LabelParamEditor';\nimport {\n  defaultAddOperationHandler,\n  functionRendererLeft,\n  functionRendererRight,\n  getPromAndLokiOperationDisplayName,\n  getRangeVectorParamDef,\n  rangeRendererLeftWithParams,\n  rangeRendererRightWithParams,\n} from './shared/operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryWithOperations,\n  VisualQueryModeller,\n} from './shared/types';\nimport { PromOperationId, PromVisualQuery, PromVisualQueryOperationCategory } from './types';\n\nexport function getOperationDefinitions(): QueryBuilderOperationDef[] {\n  const list: QueryBuilderOperationDef[] = [\n    {\n      id: PromOperationId.HistogramQuantile,\n      name: 'Histogram quantile',\n      params: [{ name: 'Quantile', type: 'number', options: [0.99, 0.95, 0.9, 0.75, 0.5, 0.25] }],\n      defaultParams: [0.9],\n      category: PromVisualQueryOperationCategory.Functions,\n      renderer: functionRendererLeft,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    {\n      id: PromOperationId.LabelReplace,\n      name: 'Label replace',\n      params: [\n        { name: 'Destination label', type: 'string' },\n        { name: 'Replacement', type: 'string' },\n        { name: 'Source label', type: 'string' },\n        { name: 'Regex', type: 'string' },\n      ],\n      category: PromVisualQueryOperationCategory.Functions,\n      defaultParams: ['', '$1', '', '(.*)'],\n      renderer: functionRendererRight,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    {\n      id: PromOperationId.Ln,\n      name: 'Ln',\n      params: [],\n      defaultParams: [],\n      category: PromVisualQueryOperationCategory.Functions,\n      renderer: functionRendererLeft,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    createRangeFunction(PromOperationId.Changes),\n    createRangeFunction(PromOperationId.Rate, true),\n    createRangeFunction(PromOperationId.Irate),\n    createRangeFunction(PromOperationId.Increase, true),\n    createRangeFunction(PromOperationId.Idelta),\n    createRangeFunction(PromOperationId.Delta),\n    createFunction({\n      id: PromOperationId.HoltWinters,\n      params: [\n        getRangeVectorParamDef(),\n        { name: 'Smoothing Factor', type: 'number' },\n        { name: 'Trend Factor', type: 'number' },\n      ],\n      defaultParams: ['$__interval', 0.5, 0.5],\n      alternativesKey: 'range function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererRightWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    createFunction({\n      id: PromOperationId.PredictLinear,\n      params: [getRangeVectorParamDef(), { name: 'Seconds from now', type: 'number' }],\n      defaultParams: ['$__interval', 60],\n      alternativesKey: 'range function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererRightWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    createFunction({\n      id: PromOperationId.QuantileOverTime,\n      params: [getRangeVectorParamDef(), { name: 'Quantile', type: 'number' }],\n      defaultParams: ['$__interval', 0.5],\n      alternativesKey: 'overtime function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererLeftWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    ...binaryScalarOperations,\n    {\n      id: PromOperationId.NestedQuery,\n      name: 'Binary operation with query',\n      params: [],\n      defaultParams: [],\n      category: PromVisualQueryOperationCategory.BinaryOps,\n      renderer: (model, def, innerExpr) => innerExpr,\n      addOperationHandler: addNestedQueryHandler,\n    },\n    createFunction({ id: PromOperationId.Absent }),\n    createFunction({\n      id: PromOperationId.Acos,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Acosh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Asin,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Asinh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Atan,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Atanh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({ id: PromOperationId.Ceil }),\n    createFunction({\n      id: PromOperationId.Clamp,\n      name: 'Clamp',\n      params: [\n        { name: 'Minimum Scalar', type: 'number' },\n        { name: 'Maximum Scalar', type: 'number' },\n      ],\n      defaultParams: [1, 1],\n    }),\n\n    createFunction({\n      id: PromOperationId.ClampMax,\n      params: [{ name: 'Maximum Scalar', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({\n      id: PromOperationId.ClampMin,\n      params: [{ name: 'Minimum Scalar', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({\n      id: PromOperationId.Cos,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Cosh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.DayOfMonth,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({\n      id: PromOperationId.DayOfWeek,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({\n      id: PromOperationId.DaysInMonth,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({ id: PromOperationId.Deg }),\n    createRangeFunction(PromOperationId.Deriv),\n    //\n    createFunction({ id: PromOperationId.Exp }),\n    createFunction({ id: PromOperationId.Floor }),\n    createFunction({ id: PromOperationId.Group }),\n    createFunction({ id: PromOperationId.Hour }),\n    createFunction({\n      id: PromOperationId.LabelJoin,\n      params: [\n        {\n          name: 'Destination Label',\n          type: 'string',\n          editor: LabelParamEditor,\n        },\n        {\n          name: 'Separator',\n          type: 'string',\n        },\n        {\n          name: 'Source Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: ['', ',', ''],\n      renderer: labelJoinRenderer,\n      addOperationHandler: labelJoinAddOperationHandler,\n    }),\n    createFunction({ id: PromOperationId.Log10 }),\n    createFunction({ id: PromOperationId.Log2 }),\n    createFunction({ id: PromOperationId.Minute }),\n    createFunction({ id: PromOperationId.Month }),\n    createFunction({\n      id: PromOperationId.Pi,\n      renderer: (model) => `${model.id}()`,\n    }),\n    createFunction({\n      id: PromOperationId.Quantile,\n      params: [{ name: 'Value', type: 'number' }],\n      defaultParams: [1],\n      renderer: functionRendererLeft,\n    }),\n    createFunction({ id: PromOperationId.Rad }),\n    createRangeFunction(PromOperationId.Resets),\n    createFunction({\n      id: PromOperationId.Round,\n      category: PromVisualQueryOperationCategory.Functions,\n      params: [{ name: 'To Nearest', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({ id: PromOperationId.Scalar }),\n    createFunction({ id: PromOperationId.Sgn }),\n    createFunction({ id: PromOperationId.Sin, category: PromVisualQueryOperationCategory.Trigonometric }),\n    createFunction({\n      id: PromOperationId.Sinh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({ id: PromOperationId.Sort }),\n    createFunction({ id: PromOperationId.SortDesc }),\n    createFunction({ id: PromOperationId.Sqrt }),\n    createFunction({ id: PromOperationId.Stddev }),\n    createFunction({\n      id: PromOperationId.Tan,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Tanh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Time,\n      renderer: (model) => `${model.id}()`,\n    }),\n    createFunction({ id: PromOperationId.Timestamp }),\n    createFunction({\n      id: PromOperationId.Vector,\n      params: [{ name: 'Value', type: 'number' }],\n      defaultParams: [1],\n      renderer: (model) => `${model.id}(${model.params[0]})`,\n    }),\n    createFunction({ id: PromOperationId.Year }),\n  ];\n\n  return list;\n}\n\nexport function createFunction(definition: Partial<QueryBuilderOperationDef>): QueryBuilderOperationDef {\n  return {\n    ...definition,\n    id: definition.id!,\n    name: definition.name ?? getPromAndLokiOperationDisplayName(definition.id!),\n    params: definition.params ?? [],\n    defaultParams: definition.defaultParams ?? [],\n    category: definition.category ?? PromVisualQueryOperationCategory.Functions,\n    renderer: definition.renderer ?? (definition.params ? functionRendererRight : functionRendererLeft),\n    addOperationHandler: definition.addOperationHandler ?? defaultAddOperationHandler,\n  };\n}\n\nexport function createRangeFunction(name: string, withRateInterval = false): QueryBuilderOperationDef {\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: [getRangeVectorParamDef(withRateInterval)],\n    defaultParams: [withRateInterval ? '$__rate_interval' : '$__interval'],\n    alternativesKey: 'range function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addOperationWithRangeVector,\n    changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n  };\n}\n\nfunction operationTypeChangedHandlerForRangeFunction(\n  operation: QueryBuilderOperation,\n  newDef: QueryBuilderOperationDef\n) {\n  // validate current parameter\n  if (operation.params[0] === '$__rate_interval' && newDef.defaultParams[0] !== '$__rate_interval') {\n    operation.params = newDef.defaultParams;\n  } else if (operation.params[0] === '$__interval' && newDef.defaultParams[0] !== '$__interval') {\n    operation.params = newDef.defaultParams;\n  }\n\n  return operation;\n}\n\nexport function operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  let rangeVector = (model.params ?? [])[0] ?? '5m';\n  return `${def.id}(${innerExpr}[${rangeVector}])`;\n}\n\n/**\n * Since there can only be one operation with range vector this will replace the current one (if one was added )\n */\nexport function addOperationWithRangeVector(\n  def: QueryBuilderOperationDef,\n  query: PromVisualQuery,\n  modeller: VisualQueryModeller\n) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  if (query.operations.length > 0) {\n    // If operation exists it has to be in the registry so no point to check if it was found\n    const firstOp = modeller.getOperationDef(query.operations[0].id)!;\n\n    if (firstOp.addOperationHandler === addOperationWithRangeVector) {\n      return {\n        ...query,\n        operations: [newOperation, ...query.operations.slice(1)],\n      };\n    }\n  }\n\n  return {\n    ...query,\n    operations: [newOperation, ...query.operations],\n  };\n}\n\nfunction addNestedQueryHandler(def: QueryBuilderOperationDef, query: PromVisualQuery): PromVisualQuery {\n  return {\n    ...query,\n    binaryQueries: [\n      ...(query.binaryQueries ?? []),\n      {\n        operator: '/',\n        query,\n      },\n    ],\n  };\n}\n\nfunction labelJoinRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  if (typeof model.params[1] !== 'string') {\n    throw 'The separator must be a string';\n  }\n  const separator = `\"${model.params[1]}\"`;\n  return `${model.id}(${innerExpr}, \"${model.params[0]}\", ${separator}, \"${model.params.slice(2).join(separator)}\")`;\n}\n\nfunction labelJoinAddOperationHandler<T extends QueryWithOperations>(def: QueryBuilderOperationDef, query: T) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  return {\n    ...query,\n    operations: [...query.operations, newOperation],\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}