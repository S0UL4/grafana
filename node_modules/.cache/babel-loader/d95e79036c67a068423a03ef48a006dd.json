{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport Moveable from 'moveable';\nimport React from 'react';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport Selecto from 'selecto';\nimport { locationService } from '@grafana/runtime/src';\nimport { Portal, stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { DEFAULT_CANVAS_ELEMENT_CONFIG } from 'app/features/canvas';\nimport { getColorDimensionFromData, getResourceDimensionFromData, getScalarDimensionFromData, getScaleDimensionFromData, getTextDimensionFromData } from 'app/features/dimensions/utils';\nimport { CanvasContextMenu } from 'app/plugins/panel/canvas/CanvasContextMenu';\nimport { LayerActionID } from 'app/plugins/panel/canvas/types';\nimport { HorizontalConstraint, VerticalConstraint } from '../types';\nimport { constraintViewable, dimensionViewable } from './ables';\nimport { FrameState } from './frame';\nimport { RootElement } from './root';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class Scene {\n  // called after resize/drag for editor updates\n  constructor(cfg, enableEditing, onSave) {\n    _defineProperty(this, \"styles\", getStyles(config.theme2));\n\n    _defineProperty(this, \"selection\", new ReplaySubject(1));\n\n    _defineProperty(this, \"moved\", new Subject());\n\n    _defineProperty(this, \"byName\", new Map());\n\n    _defineProperty(this, \"root\", void 0);\n\n    _defineProperty(this, \"revId\", 0);\n\n    _defineProperty(this, \"width\", 0);\n\n    _defineProperty(this, \"height\", 0);\n\n    _defineProperty(this, \"style\", {});\n\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"selecto\", void 0);\n\n    _defineProperty(this, \"moveable\", void 0);\n\n    _defineProperty(this, \"div\", void 0);\n\n    _defineProperty(this, \"currentLayer\", void 0);\n\n    _defineProperty(this, \"isEditingEnabled\", void 0);\n\n    _defineProperty(this, \"skipNextSelectionBroadcast\", false);\n\n    _defineProperty(this, \"isPanelEditing\", locationService.getSearchObject().editPanel !== undefined);\n\n    _defineProperty(this, \"getNextElementName\", (isFrame = false) => {\n      const label = isFrame ? 'Frame' : 'Element';\n      let idx = this.byName.size + 1;\n      const max = idx + 100;\n\n      while (true && idx < max) {\n        const name = `${label} ${idx++}`;\n\n        if (!this.byName.has(name)) {\n          return name;\n        }\n      }\n\n      return `${label} ${Date.now()}`;\n    });\n\n    _defineProperty(this, \"canRename\", v => {\n      return !this.byName.has(v);\n    });\n\n    _defineProperty(this, \"context\", {\n      getColor: color => getColorDimensionFromData(this.data, color),\n      getScale: scale => getScaleDimensionFromData(this.data, scale),\n      getScalar: scalar => getScalarDimensionFromData(this.data, scalar),\n      getText: text => getTextDimensionFromData(this.data, text),\n      getResource: res => getResourceDimensionFromData(this.data, res)\n    });\n\n    _defineProperty(this, \"generateFrameContainer\", elements => {\n      let minTop = Infinity;\n      let minLeft = Infinity;\n      let maxRight = 0;\n      let maxBottom = 0;\n      elements.forEach(element => {\n        var _element$div;\n\n        const elementContainer = (_element$div = element.div) === null || _element$div === void 0 ? void 0 : _element$div.getBoundingClientRect();\n\n        if (!elementContainer) {\n          return;\n        }\n\n        if (minTop > elementContainer.top) {\n          minTop = elementContainer.top;\n        }\n\n        if (minLeft > elementContainer.left) {\n          minLeft = elementContainer.left;\n        }\n\n        if (maxRight < elementContainer.right) {\n          maxRight = elementContainer.right;\n        }\n\n        if (maxBottom < elementContainer.bottom) {\n          maxBottom = elementContainer.bottom;\n        }\n      });\n      return {\n        top: minTop,\n        left: minLeft,\n        width: maxRight - minLeft,\n        height: maxBottom - minTop\n      };\n    });\n\n    _defineProperty(this, \"save\", (updateMoveable = false) => {\n      this.onSave(this.root.getSaveModel());\n\n      if (updateMoveable) {\n        setTimeout(() => {\n          if (this.div) {\n            this.initMoveable(true, this.isEditingEnabled);\n          }\n        });\n      }\n    });\n\n    _defineProperty(this, \"findElementByTarget\", target => {\n      // We will probably want to add memoization to this as we are calling on drag / resize\n      const stack = [...this.root.elements];\n\n      while (stack.length > 0) {\n        const currentElement = stack.shift();\n\n        if (currentElement && currentElement.div && currentElement.div === target) {\n          return currentElement;\n        }\n\n        const nestedElements = currentElement instanceof FrameState ? currentElement.elements : [];\n\n        for (const nestedElement of nestedElements) {\n          stack.unshift(nestedElement);\n        }\n      }\n\n      return undefined;\n    });\n\n    _defineProperty(this, \"setRef\", sceneContainer => {\n      this.div = sceneContainer;\n    });\n\n    _defineProperty(this, \"select\", selection => {\n      if (this.selecto) {\n        this.selecto.setSelectedTargets(selection.targets);\n        this.updateSelection(selection);\n      }\n    });\n\n    _defineProperty(this, \"updateSelection\", selection => {\n      this.moveable.target = selection.targets;\n\n      if (this.skipNextSelectionBroadcast) {\n        this.skipNextSelectionBroadcast = false;\n        return;\n      }\n\n      if (selection.frame) {\n        this.selection.next([selection.frame]);\n      } else {\n        const s = selection.targets.map(t => this.findElementByTarget(t));\n        this.selection.next(s);\n      }\n    });\n\n    _defineProperty(this, \"generateTargetElements\", rootElements => {\n      let targetElements = [];\n      const stack = [...rootElements];\n\n      while (stack.length > 0) {\n        const currentElement = stack.shift();\n\n        if (currentElement && currentElement.div) {\n          targetElements.push(currentElement.div);\n        }\n\n        const nestedElements = currentElement instanceof FrameState ? currentElement.elements : [];\n\n        for (const nestedElement of nestedElements) {\n          stack.unshift(nestedElement);\n        }\n      }\n\n      return targetElements;\n    });\n\n    _defineProperty(this, \"initMoveable\", (destroySelecto = false, allowChanges = true) => {\n      const targetElements = this.generateTargetElements(this.root.elements);\n\n      if (destroySelecto && this.selecto) {\n        this.selecto.destroy();\n      }\n\n      this.selecto = new Selecto({\n        container: this.div,\n        selectableTargets: targetElements,\n        selectByClick: true\n      });\n      this.moveable = new Moveable(this.div, {\n        draggable: allowChanges,\n        resizable: allowChanges,\n        ables: [dimensionViewable, constraintViewable(this)],\n        props: {\n          dimensionViewable: allowChanges,\n          constraintViewable: allowChanges\n        },\n        origin: false,\n        className: this.styles.selected\n      }).on('clickGroup', event => {\n        this.selecto.clickTarget(event.inputEvent, event.inputTarget);\n      }).on('dragStart', event => {\n        const targetedElement = this.findElementByTarget(event.target);\n\n        if (targetedElement) {\n          targetedElement.isMoving = true;\n        }\n      }).on('drag', event => {\n        const targetedElement = this.findElementByTarget(event.target);\n        targetedElement.applyDrag(event);\n      }).on('dragGroup', e => {\n        e.events.forEach(event => {\n          const targetedElement = this.findElementByTarget(event.target);\n          targetedElement.applyDrag(event);\n        });\n      }).on('dragEnd', event => {\n        const targetedElement = this.findElementByTarget(event.target);\n\n        if (targetedElement) {\n          targetedElement.setPlacementFromConstraint();\n          targetedElement.isMoving = false;\n        }\n\n        this.moved.next(Date.now());\n      }).on('resizeStart', event => {\n        const targetedElement = this.findElementByTarget(event.target);\n\n        if (targetedElement) {\n          targetedElement.tempConstraint = Object.assign({}, targetedElement.options.constraint);\n          targetedElement.options.constraint = {\n            vertical: VerticalConstraint.Top,\n            horizontal: HorizontalConstraint.Left\n          };\n          targetedElement.setPlacementFromConstraint();\n        }\n      }).on('resize', event => {\n        const targetedElement = this.findElementByTarget(event.target);\n        targetedElement.applyResize(event);\n        this.moved.next(Date.now()); // TODO only on end\n      }).on('resizeGroup', e => {\n        e.events.forEach(event => {\n          const targetedElement = this.findElementByTarget(event.target);\n          targetedElement.applyResize(event);\n        });\n        this.moved.next(Date.now()); // TODO only on end\n      }).on('resizeEnd', event => {\n        const targetedElement = this.findElementByTarget(event.target);\n\n        if (targetedElement) {\n          if (targetedElement.tempConstraint) {\n            targetedElement.options.constraint = targetedElement.tempConstraint;\n            targetedElement.tempConstraint = undefined;\n          }\n\n          targetedElement.setPlacementFromConstraint();\n        }\n      });\n      let targets = [];\n      this.selecto.on('dragStart', event => {\n        const selectedTarget = event.inputEvent.target;\n        const isTargetMoveableElement = this.moveable.isMoveableElement(selectedTarget) || targets.some(target => target === selectedTarget || target.contains(selectedTarget));\n\n        if (isTargetMoveableElement) {\n          // Prevent drawing selection box when selected target is a moveable element\n          event.stop();\n        }\n      }).on('selectEnd', event => {\n        targets = event.selected;\n        this.updateSelection({\n          targets\n        });\n\n        if (event.isDragStart) {\n          event.inputEvent.preventDefault();\n          setTimeout(() => {\n            this.moveable.dragStart(event.inputEvent);\n          });\n        }\n      });\n    });\n\n    this.onSave = onSave;\n    this.root = this.load(cfg, enableEditing);\n  }\n\n  load(cfg, enableEditing) {\n    this.root = new RootElement(cfg !== null && cfg !== void 0 ? cfg : {\n      type: 'frame',\n      elements: [DEFAULT_CANVAS_ELEMENT_CONFIG]\n    }, this, this.save // callback when changes are made\n    );\n    this.isEditingEnabled = enableEditing;\n    setTimeout(() => {\n      if (this.div) {\n        // If editing is enabled, clear selecto instance\n        const destroySelecto = enableEditing;\n        this.initMoveable(destroySelecto, enableEditing);\n        this.currentLayer = this.root;\n        this.selection.next([]);\n      }\n    });\n    return this.root;\n  }\n\n  updateData(data) {\n    this.data = data;\n    this.root.updateData(this.context);\n  }\n\n  updateSize(width, height) {\n    var _this$selecto;\n\n    this.width = width;\n    this.height = height;\n    this.style = {\n      width,\n      height\n    };\n\n    if ((_this$selecto = this.selecto) !== null && _this$selecto !== void 0 && _this$selecto.getSelectedTargets().length) {\n      this.clearCurrentSelection();\n    }\n  }\n\n  frameSelection() {\n    this.selection.pipe(first()).subscribe(currentSelectedElements => {\n      var _currentLayer$div;\n\n      const currentLayer = currentSelectedElements[0].parent;\n      const newLayer = new FrameState({\n        type: 'frame',\n        name: this.getNextElementName(true),\n        elements: []\n      }, this, currentSelectedElements[0].parent);\n      const framePlacement = this.generateFrameContainer(currentSelectedElements);\n      newLayer.options.placement = framePlacement;\n      currentSelectedElements.forEach(element => {\n        var _element$div2;\n\n        const elementContainer = (_element$div2 = element.div) === null || _element$div2 === void 0 ? void 0 : _element$div2.getBoundingClientRect();\n        element.setPlacementFromConstraint(elementContainer, framePlacement);\n        currentLayer.doAction(LayerActionID.Delete, element);\n        newLayer.doAction(LayerActionID.Duplicate, element, false, false);\n      });\n      newLayer.setPlacementFromConstraint(framePlacement, (_currentLayer$div = currentLayer.div) === null || _currentLayer$div === void 0 ? void 0 : _currentLayer$div.getBoundingClientRect());\n      currentLayer.elements.push(newLayer);\n      this.byName.set(newLayer.getName(), newLayer);\n      this.save();\n    });\n  }\n\n  clearCurrentSelection(skipNextSelectionBroadcast = false) {\n    var _this$selecto2;\n\n    this.skipNextSelectionBroadcast = skipNextSelectionBroadcast;\n    let event = new MouseEvent('click');\n    (_this$selecto2 = this.selecto) === null || _this$selecto2 === void 0 ? void 0 : _this$selecto2.clickTarget(event, this.div);\n  }\n\n  updateCurrentLayer(newLayer) {\n    this.currentLayer = newLayer;\n    this.clearCurrentSelection();\n    this.save();\n  }\n\n  render() {\n    const canShowContextMenu = this.isPanelEditing || !this.isPanelEditing && this.isEditingEnabled;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: this.styles.wrap,\n      style: this.style,\n      ref: this.setRef,\n      children: [this.root.render(), canShowContextMenu && /*#__PURE__*/_jsx(Portal, {\n        children: /*#__PURE__*/_jsx(CanvasContextMenu, {\n          scene: this\n        })\n      })]\n    }, this.revId);\n  }\n\n}\nconst getStyles = stylesFactory(theme => ({\n  wrap: css`\n    overflow: hidden;\n    position: relative;\n  `,\n  selected: css`\n    z-index: 999 !important;\n  `\n}));","map":{"version":3,"names":["css","Moveable","React","ReplaySubject","Subject","first","Selecto","locationService","Portal","stylesFactory","config","DEFAULT_CANVAS_ELEMENT_CONFIG","getColorDimensionFromData","getResourceDimensionFromData","getScalarDimensionFromData","getScaleDimensionFromData","getTextDimensionFromData","CanvasContextMenu","LayerActionID","HorizontalConstraint","VerticalConstraint","constraintViewable","dimensionViewable","FrameState","RootElement","Scene","constructor","cfg","enableEditing","onSave","getStyles","theme2","Map","getSearchObject","editPanel","undefined","isFrame","label","idx","byName","size","max","name","has","Date","now","v","getColor","color","data","getScale","scale","getScalar","scalar","getText","text","getResource","res","elements","minTop","Infinity","minLeft","maxRight","maxBottom","forEach","element","elementContainer","div","getBoundingClientRect","top","left","right","bottom","width","height","updateMoveable","root","getSaveModel","setTimeout","initMoveable","isEditingEnabled","target","stack","length","currentElement","shift","nestedElements","nestedElement","unshift","sceneContainer","selection","selecto","setSelectedTargets","targets","updateSelection","moveable","skipNextSelectionBroadcast","frame","next","s","map","t","findElementByTarget","rootElements","targetElements","push","destroySelecto","allowChanges","generateTargetElements","destroy","container","selectableTargets","selectByClick","draggable","resizable","ables","props","origin","className","styles","selected","on","event","clickTarget","inputEvent","inputTarget","targetedElement","isMoving","applyDrag","e","events","setPlacementFromConstraint","moved","tempConstraint","options","constraint","vertical","Top","horizontal","Left","applyResize","selectedTarget","isTargetMoveableElement","isMoveableElement","some","contains","stop","isDragStart","preventDefault","dragStart","load","type","save","currentLayer","updateData","context","updateSize","style","getSelectedTargets","clearCurrentSelection","frameSelection","pipe","subscribe","currentSelectedElements","parent","newLayer","getNextElementName","framePlacement","generateFrameContainer","placement","doAction","Delete","Duplicate","set","getName","MouseEvent","updateCurrentLayer","render","canShowContextMenu","isPanelEditing","wrap","setRef","revId","theme"],"sources":["/home/soula/grafana/public/app/features/canvas/runtime/scene.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport Moveable from 'moveable';\nimport React, { CSSProperties } from 'react';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport Selecto from 'selecto';\n\nimport { GrafanaTheme2, PanelData } from '@grafana/data';\nimport { locationService } from '@grafana/runtime/src';\nimport { Portal, stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { CanvasFrameOptions, DEFAULT_CANVAS_ELEMENT_CONFIG } from 'app/features/canvas';\nimport {\n  ColorDimensionConfig,\n  DimensionContext,\n  ResourceDimensionConfig,\n  ScalarDimensionConfig,\n  ScaleDimensionConfig,\n  TextDimensionConfig,\n} from 'app/features/dimensions';\nimport {\n  getColorDimensionFromData,\n  getResourceDimensionFromData,\n  getScalarDimensionFromData,\n  getScaleDimensionFromData,\n  getTextDimensionFromData,\n} from 'app/features/dimensions/utils';\nimport { CanvasContextMenu } from 'app/plugins/panel/canvas/CanvasContextMenu';\nimport { LayerActionID } from 'app/plugins/panel/canvas/types';\n\nimport { HorizontalConstraint, Placement, VerticalConstraint } from '../types';\n\nimport { constraintViewable, dimensionViewable } from './ables';\nimport { ElementState } from './element';\nimport { FrameState } from './frame';\nimport { RootElement } from './root';\n\nexport interface SelectionParams {\n  targets: Array<HTMLElement | SVGElement>;\n  frame?: FrameState;\n}\n\nexport class Scene {\n  styles = getStyles(config.theme2);\n  readonly selection = new ReplaySubject<ElementState[]>(1);\n  readonly moved = new Subject<number>(); // called after resize/drag for editor updates\n  readonly byName = new Map<string, ElementState>();\n\n  root: RootElement;\n\n  revId = 0;\n\n  width = 0;\n  height = 0;\n  style: CSSProperties = {};\n  data?: PanelData;\n  selecto?: Selecto;\n  moveable?: Moveable;\n  div?: HTMLDivElement;\n  currentLayer?: FrameState;\n  isEditingEnabled?: boolean;\n  skipNextSelectionBroadcast = false;\n\n  isPanelEditing = locationService.getSearchObject().editPanel !== undefined;\n\n  constructor(cfg: CanvasFrameOptions, enableEditing: boolean, public onSave: (cfg: CanvasFrameOptions) => void) {\n    this.root = this.load(cfg, enableEditing);\n  }\n\n  getNextElementName = (isFrame = false) => {\n    const label = isFrame ? 'Frame' : 'Element';\n    let idx = this.byName.size + 1;\n\n    const max = idx + 100;\n    while (true && idx < max) {\n      const name = `${label} ${idx++}`;\n      if (!this.byName.has(name)) {\n        return name;\n      }\n    }\n\n    return `${label} ${Date.now()}`;\n  };\n\n  canRename = (v: string) => {\n    return !this.byName.has(v);\n  };\n\n  load(cfg: CanvasFrameOptions, enableEditing: boolean) {\n    this.root = new RootElement(\n      cfg ?? {\n        type: 'frame',\n        elements: [DEFAULT_CANVAS_ELEMENT_CONFIG],\n      },\n      this,\n      this.save // callback when changes are made\n    );\n\n    this.isEditingEnabled = enableEditing;\n\n    setTimeout(() => {\n      if (this.div) {\n        // If editing is enabled, clear selecto instance\n        const destroySelecto = enableEditing;\n        this.initMoveable(destroySelecto, enableEditing);\n        this.currentLayer = this.root;\n        this.selection.next([]);\n      }\n    });\n    return this.root;\n  }\n\n  context: DimensionContext = {\n    getColor: (color: ColorDimensionConfig) => getColorDimensionFromData(this.data, color),\n    getScale: (scale: ScaleDimensionConfig) => getScaleDimensionFromData(this.data, scale),\n    getScalar: (scalar: ScalarDimensionConfig) => getScalarDimensionFromData(this.data, scalar),\n    getText: (text: TextDimensionConfig) => getTextDimensionFromData(this.data, text),\n    getResource: (res: ResourceDimensionConfig) => getResourceDimensionFromData(this.data, res),\n  };\n\n  updateData(data: PanelData) {\n    this.data = data;\n    this.root.updateData(this.context);\n  }\n\n  updateSize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n    this.style = { width, height };\n\n    if (this.selecto?.getSelectedTargets().length) {\n      this.clearCurrentSelection();\n    }\n  }\n\n  frameSelection() {\n    this.selection.pipe(first()).subscribe((currentSelectedElements) => {\n      const currentLayer = currentSelectedElements[0].parent!;\n\n      const newLayer = new FrameState(\n        {\n          type: 'frame',\n          name: this.getNextElementName(true),\n          elements: [],\n        },\n        this,\n        currentSelectedElements[0].parent\n      );\n\n      const framePlacement = this.generateFrameContainer(currentSelectedElements);\n\n      newLayer.options.placement = framePlacement;\n\n      currentSelectedElements.forEach((element: ElementState) => {\n        const elementContainer = element.div?.getBoundingClientRect();\n        element.setPlacementFromConstraint(elementContainer, framePlacement as DOMRect);\n        currentLayer.doAction(LayerActionID.Delete, element);\n        newLayer.doAction(LayerActionID.Duplicate, element, false, false);\n      });\n\n      newLayer.setPlacementFromConstraint(framePlacement as DOMRect, currentLayer.div?.getBoundingClientRect());\n\n      currentLayer.elements.push(newLayer);\n\n      this.byName.set(newLayer.getName(), newLayer);\n\n      this.save();\n    });\n  }\n\n  private generateFrameContainer = (elements: ElementState[]): Placement => {\n    let minTop = Infinity;\n    let minLeft = Infinity;\n    let maxRight = 0;\n    let maxBottom = 0;\n\n    elements.forEach((element: ElementState) => {\n      const elementContainer = element.div?.getBoundingClientRect();\n\n      if (!elementContainer) {\n        return;\n      }\n\n      if (minTop > elementContainer.top) {\n        minTop = elementContainer.top;\n      }\n\n      if (minLeft > elementContainer.left) {\n        minLeft = elementContainer.left;\n      }\n\n      if (maxRight < elementContainer.right) {\n        maxRight = elementContainer.right;\n      }\n\n      if (maxBottom < elementContainer.bottom) {\n        maxBottom = elementContainer.bottom;\n      }\n    });\n\n    return {\n      top: minTop,\n      left: minLeft,\n      width: maxRight - minLeft,\n      height: maxBottom - minTop,\n    };\n  };\n\n  clearCurrentSelection(skipNextSelectionBroadcast = false) {\n    this.skipNextSelectionBroadcast = skipNextSelectionBroadcast;\n    let event: MouseEvent = new MouseEvent('click');\n    this.selecto?.clickTarget(event, this.div);\n  }\n\n  updateCurrentLayer(newLayer: FrameState) {\n    this.currentLayer = newLayer;\n    this.clearCurrentSelection();\n    this.save();\n  }\n\n  save = (updateMoveable = false) => {\n    this.onSave(this.root.getSaveModel());\n\n    if (updateMoveable) {\n      setTimeout(() => {\n        if (this.div) {\n          this.initMoveable(true, this.isEditingEnabled);\n        }\n      });\n    }\n  };\n\n  findElementByTarget = (target: HTMLElement | SVGElement): ElementState | undefined => {\n    // We will probably want to add memoization to this as we are calling on drag / resize\n\n    const stack = [...this.root.elements];\n    while (stack.length > 0) {\n      const currentElement = stack.shift();\n\n      if (currentElement && currentElement.div && currentElement.div === target) {\n        return currentElement;\n      }\n\n      const nestedElements = currentElement instanceof FrameState ? currentElement.elements : [];\n      for (const nestedElement of nestedElements) {\n        stack.unshift(nestedElement);\n      }\n    }\n\n    return undefined;\n  };\n\n  setRef = (sceneContainer: HTMLDivElement) => {\n    this.div = sceneContainer;\n  };\n\n  select = (selection: SelectionParams) => {\n    if (this.selecto) {\n      this.selecto.setSelectedTargets(selection.targets);\n      this.updateSelection(selection);\n    }\n  };\n\n  private updateSelection = (selection: SelectionParams) => {\n    this.moveable!.target = selection.targets;\n\n    if (this.skipNextSelectionBroadcast) {\n      this.skipNextSelectionBroadcast = false;\n      return;\n    }\n\n    if (selection.frame) {\n      this.selection.next([selection.frame]);\n    } else {\n      const s = selection.targets.map((t) => this.findElementByTarget(t)!);\n      this.selection.next(s);\n    }\n  };\n\n  private generateTargetElements = (rootElements: ElementState[]): HTMLDivElement[] => {\n    let targetElements: HTMLDivElement[] = [];\n\n    const stack = [...rootElements];\n    while (stack.length > 0) {\n      const currentElement = stack.shift();\n\n      if (currentElement && currentElement.div) {\n        targetElements.push(currentElement.div);\n      }\n\n      const nestedElements = currentElement instanceof FrameState ? currentElement.elements : [];\n      for (const nestedElement of nestedElements) {\n        stack.unshift(nestedElement);\n      }\n    }\n\n    return targetElements;\n  };\n\n  initMoveable = (destroySelecto = false, allowChanges = true) => {\n    const targetElements = this.generateTargetElements(this.root.elements);\n\n    if (destroySelecto && this.selecto) {\n      this.selecto.destroy();\n    }\n\n    this.selecto = new Selecto({\n      container: this.div,\n      selectableTargets: targetElements,\n      selectByClick: true,\n    });\n\n    this.moveable = new Moveable(this.div!, {\n      draggable: allowChanges,\n      resizable: allowChanges,\n      ables: [dimensionViewable, constraintViewable(this)],\n      props: {\n        dimensionViewable: allowChanges,\n        constraintViewable: allowChanges,\n      },\n      origin: false,\n      className: this.styles.selected,\n    })\n      .on('clickGroup', (event) => {\n        this.selecto!.clickTarget(event.inputEvent, event.inputTarget);\n      })\n      .on('dragStart', (event) => {\n        const targetedElement = this.findElementByTarget(event.target);\n        if (targetedElement) {\n          targetedElement.isMoving = true;\n        }\n      })\n      .on('drag', (event) => {\n        const targetedElement = this.findElementByTarget(event.target);\n        targetedElement!.applyDrag(event);\n      })\n      .on('dragGroup', (e) => {\n        e.events.forEach((event) => {\n          const targetedElement = this.findElementByTarget(event.target);\n          targetedElement!.applyDrag(event);\n        });\n      })\n      .on('dragEnd', (event) => {\n        const targetedElement = this.findElementByTarget(event.target);\n        if (targetedElement) {\n          targetedElement.setPlacementFromConstraint();\n          targetedElement.isMoving = false;\n        }\n\n        this.moved.next(Date.now());\n      })\n      .on('resizeStart', (event) => {\n        const targetedElement = this.findElementByTarget(event.target);\n\n        if (targetedElement) {\n          targetedElement.tempConstraint = { ...targetedElement.options.constraint };\n          targetedElement.options.constraint = {\n            vertical: VerticalConstraint.Top,\n            horizontal: HorizontalConstraint.Left,\n          };\n          targetedElement.setPlacementFromConstraint();\n        }\n      })\n      .on('resize', (event) => {\n        const targetedElement = this.findElementByTarget(event.target);\n        targetedElement!.applyResize(event);\n        this.moved.next(Date.now()); // TODO only on end\n      })\n      .on('resizeGroup', (e) => {\n        e.events.forEach((event) => {\n          const targetedElement = this.findElementByTarget(event.target);\n          targetedElement!.applyResize(event);\n        });\n        this.moved.next(Date.now()); // TODO only on end\n      })\n      .on('resizeEnd', (event) => {\n        const targetedElement = this.findElementByTarget(event.target);\n\n        if (targetedElement) {\n          if (targetedElement.tempConstraint) {\n            targetedElement.options.constraint = targetedElement.tempConstraint;\n            targetedElement.tempConstraint = undefined;\n          }\n\n          targetedElement.setPlacementFromConstraint();\n        }\n      });\n\n    let targets: Array<HTMLElement | SVGElement> = [];\n    this.selecto!.on('dragStart', (event) => {\n      const selectedTarget = event.inputEvent.target;\n\n      const isTargetMoveableElement =\n        this.moveable!.isMoveableElement(selectedTarget) ||\n        targets.some((target) => target === selectedTarget || target.contains(selectedTarget));\n\n      if (isTargetMoveableElement) {\n        // Prevent drawing selection box when selected target is a moveable element\n        event.stop();\n      }\n    }).on('selectEnd', (event) => {\n      targets = event.selected;\n      this.updateSelection({ targets });\n\n      if (event.isDragStart) {\n        event.inputEvent.preventDefault();\n        setTimeout(() => {\n          this.moveable!.dragStart(event.inputEvent);\n        });\n      }\n    });\n  };\n\n  render() {\n    const canShowContextMenu = this.isPanelEditing || (!this.isPanelEditing && this.isEditingEnabled);\n\n    return (\n      <div key={this.revId} className={this.styles.wrap} style={this.style} ref={this.setRef}>\n        {this.root.render()}\n        {canShowContextMenu && (\n          <Portal>\n            <CanvasContextMenu scene={this} />\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  wrap: css`\n    overflow: hidden;\n    position: relative;\n  `,\n  selected: css`\n    z-index: 999 !important;\n  `,\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}