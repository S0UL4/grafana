{"ast":null,"code":"import React, { useEffect, useRef, useState } from 'react';\nimport { DataFrameType, FieldType, formattedValueToString, getFieldDisplayName } from '@grafana/data';\nimport { LinkButton, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\nimport { DataHoverView } from '../geomap/components/DataHoverView';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const HeatmapHoverView = props => {\n  if (props.hover.seriesIdx === 2) {\n    return /*#__PURE__*/_jsx(DataHoverView, {\n      data: props.data.exemplars,\n      rowIndex: props.hover.dataIdx\n    });\n  }\n\n  return /*#__PURE__*/_jsx(HeatmapHoverCell, Object.assign({}, props));\n};\n\nconst HeatmapHoverCell = ({\n  data,\n  hover,\n  showHistogram\n}) => {\n  var _data$heatmap, _data$heatmap2, _data$heatmap3, _meta$yOrdinalDisplay, _ref, _data$heatmap4;\n\n  const index = hover.dataIdx;\n  const xField = (_data$heatmap = data.heatmap) === null || _data$heatmap === void 0 ? void 0 : _data$heatmap.fields[0];\n  const yField = (_data$heatmap2 = data.heatmap) === null || _data$heatmap2 === void 0 ? void 0 : _data$heatmap2.fields[1];\n  const countField = (_data$heatmap3 = data.heatmap) === null || _data$heatmap3 === void 0 ? void 0 : _data$heatmap3.fields[2];\n\n  const xDisp = v => {\n    if (xField !== null && xField !== void 0 && xField.display) {\n      return formattedValueToString(xField.display(v));\n    }\n\n    if ((xField === null || xField === void 0 ? void 0 : xField.type) === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard === null || dashboard === void 0 ? void 0 : dashboard.formatDate(v, tooltipTimeFormat);\n    }\n\n    return `${v}`;\n  };\n\n  const xVals = xField === null || xField === void 0 ? void 0 : xField.values.toArray();\n  const yVals = yField === null || yField === void 0 ? void 0 : yField.values.toArray();\n  const countVals = countField === null || countField === void 0 ? void 0 : countField.values.toArray(); // labeled buckets\n\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDispSrc = (_meta$yOrdinalDisplay = meta.yOrdinalDisplay) !== null && _meta$yOrdinalDisplay !== void 0 ? _meta$yOrdinalDisplay : yVals;\n  const yDisp = yField !== null && yField !== void 0 && yField.display ? v => formattedValueToString(yField.display(v)) : v => `${v}`;\n  const yValueIdx = (_ref = index % data.yBucketCount) !== null && _ref !== void 0 ? _ref : 0;\n  const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n  const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n  const yBucketMin = yDispSrc === null || yDispSrc === void 0 ? void 0 : yDispSrc[yMinIdx];\n  const yBucketMax = yDispSrc === null || yDispSrc === void 0 ? void 0 : yDispSrc[yMaxIdx];\n  const xBucketMin = xVals === null || xVals === void 0 ? void 0 : xVals[index];\n  const xBucketMax = xBucketMin + data.xBucketSize;\n  const count = countVals === null || countVals === void 0 ? void 0 : countVals[index];\n  const visibleFields = (_data$heatmap4 = data.heatmap) === null || _data$heatmap4 === void 0 ? void 0 : _data$heatmap4.fields.filter(f => {\n    var _f$config$custom, _f$config$custom$hide;\n\n    return !Boolean((_f$config$custom = f.config.custom) === null || _f$config$custom === void 0 ? void 0 : (_f$config$custom$hide = _f$config$custom.hideFrom) === null || _f$config$custom$hide === void 0 ? void 0 : _f$config$custom$hide.tooltip);\n  });\n  const links = [];\n  const linkLookup = new Set();\n\n  for (const field of visibleFields !== null && visibleFields !== void 0 ? visibleFields : []) {\n    // TODO: Currently always undefined? (getLinks)\n    if (field.getLinks) {\n      const v = field.values.get(index);\n      const disp = field.display ? field.display(v) : {\n        text: `${v}`,\n        numeric: +v\n      };\n      field.getLinks({\n        calculatedValue: disp,\n        valueRowIndex: index\n      }).forEach(link => {\n        const key = `${link.title}/${link.href}`;\n\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n  }\n\n  let can = useRef(null);\n  let histCssWidth = 150;\n  let histCssHeight = 50;\n  let histCanWidth = Math.round(histCssWidth * devicePixelRatio);\n  let histCanHeight = Math.round(histCssHeight * devicePixelRatio);\n  useEffect(() => {\n    if (showHistogram) {\n      var _can$current;\n\n      let histCtx = (_can$current = can.current) === null || _can$current === void 0 ? void 0 : _can$current.getContext('2d');\n\n      if (histCtx && xVals && yVals && countVals) {\n        let fromIdx = index;\n\n        while (xVals[fromIdx--] === xVals[index]) {}\n\n        fromIdx++;\n        let toIdx = fromIdx + data.yBucketCount;\n        let maxCount = 0;\n        let i = fromIdx;\n\n        while (i < toIdx) {\n          let c = countVals[i];\n          maxCount = Math.max(maxCount, c);\n          i++;\n        }\n\n        let pHov = new Path2D();\n        let pRest = new Path2D();\n        i = fromIdx;\n        let j = 0;\n\n        while (i < toIdx) {\n          let c = countVals[i];\n\n          if (c > 0) {\n            let pctY = c / maxCount;\n            let pctX = j / (data.yBucketCount + 1);\n            let p = i === index ? pHov : pRest;\n            p.rect(Math.round(histCanWidth * pctX), Math.round(histCanHeight * (1 - pctY)), Math.round(histCanWidth / data.yBucketCount), Math.round(histCanHeight * pctY));\n          }\n\n          i++;\n          j++;\n        }\n\n        histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n        histCtx.fillStyle = '#ffffff80';\n        histCtx.fill(pRest);\n        histCtx.fillStyle = '#ff000080';\n        histCtx.fill(pHov);\n      }\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [index]);\n  const [isSparse] = useState(() => {\n    var _data$heatmap5, _data$heatmap5$meta;\n\n    return ((_data$heatmap5 = data.heatmap) === null || _data$heatmap5 === void 0 ? void 0 : (_data$heatmap5$meta = _data$heatmap5.meta) === null || _data$heatmap5$meta === void 0 ? void 0 : _data$heatmap5$meta.type) === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap);\n  });\n\n  if (isSparse) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsx(DataHoverView, {\n        data: data.heatmap,\n        rowIndex: index\n      })\n    });\n  }\n\n  const renderYBuckets = () => {\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return /*#__PURE__*/_jsx(\"div\", {\n          children: yDisp(yBucketMin)\n        });\n    }\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [\"Bucket: \", yDisp(yBucketMin), \" - \", yDisp(yBucketMax)]\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        children: xDisp(xBucketMin)\n      }), /*#__PURE__*/_jsx(\"div\", {\n        children: xDisp(xBucketMax)\n      })]\n    }), showHistogram && /*#__PURE__*/_jsx(\"canvas\", {\n      width: histCanWidth,\n      height: histCanHeight,\n      ref: can,\n      style: {\n        width: histCanWidth + 'px',\n        height: histCanHeight + 'px'\n      }\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [renderYBuckets(), /*#__PURE__*/_jsxs(\"div\", {\n        children: [getFieldDisplayName(countField, data.heatmap), \": \", data.display(count)]\n      })]\n    }), links.length > 0 && /*#__PURE__*/_jsx(VerticalGroup, {\n      children: links.map((link, i) => /*#__PURE__*/_jsx(LinkButton, {\n        icon: 'external-link-alt',\n        target: link.target,\n        href: link.href,\n        onClick: link.onClick,\n        fill: \"text\",\n        style: {\n          width: '100%'\n        },\n        children: link.title\n      }, i))\n    })]\n  });\n};","map":{"version":3,"names":["React","useEffect","useRef","useState","DataFrameType","FieldType","formattedValueToString","getFieldDisplayName","LinkButton","VerticalGroup","getDashboardSrv","isHeatmapCellsDense","readHeatmapRowsCustomMeta","HeatmapCellLayout","DataHoverView","HeatmapHoverView","props","hover","seriesIdx","data","exemplars","dataIdx","HeatmapHoverCell","showHistogram","index","xField","heatmap","fields","yField","countField","xDisp","v","display","type","time","tooltipTimeFormat","dashboard","getCurrent","formatDate","xVals","values","toArray","yVals","countVals","meta","yDispSrc","yOrdinalDisplay","yDisp","yValueIdx","yBucketCount","yMinIdx","yLayout","le","yMaxIdx","yBucketMin","yBucketMax","xBucketMin","xBucketMax","xBucketSize","count","visibleFields","filter","f","Boolean","config","custom","hideFrom","tooltip","links","linkLookup","Set","field","getLinks","get","disp","text","numeric","calculatedValue","valueRowIndex","forEach","link","key","title","href","has","push","add","can","histCssWidth","histCssHeight","histCanWidth","Math","round","devicePixelRatio","histCanHeight","histCtx","current","getContext","fromIdx","toIdx","maxCount","i","c","max","pHov","Path2D","pRest","j","pctY","pctX","p","rect","clearRect","fillStyle","fill","isSparse","HeatmapCells","renderYBuckets","unknown","width","height","length","map","target","onClick"],"sources":["/home/soula/grafana/public/app/plugins/panel/heatmap/HeatmapHoverView.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport { DataFrameType, Field, FieldType, formattedValueToString, getFieldDisplayName, LinkModel } from '@grafana/data';\nimport { LinkButton, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { DataHoverView } from '../geomap/components/DataHoverView';\n\nimport { HeatmapData } from './fields';\nimport { HeatmapHoverEvent } from './utils';\n\ntype Props = {\n  data: HeatmapData;\n  hover: HeatmapHoverEvent;\n  showHistogram?: boolean;\n};\n\nexport const HeatmapHoverView = (props: Props) => {\n  if (props.hover.seriesIdx === 2) {\n    return <DataHoverView data={props.data.exemplars} rowIndex={props.hover.dataIdx} />;\n  }\n  return <HeatmapHoverCell {...props} />;\n};\n\nconst HeatmapHoverCell = ({ data, hover, showHistogram }: Props) => {\n  const index = hover.dataIdx;\n  const xField = data.heatmap?.fields[0];\n  const yField = data.heatmap?.fields[1];\n  const countField = data.heatmap?.fields[2];\n\n  const xDisp = (v: any) => {\n    if (xField?.display) {\n      return formattedValueToString(xField.display(v));\n    }\n    if (xField?.type === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n\n  const xVals = xField?.values.toArray();\n  const yVals = yField?.values.toArray();\n  const countVals = countField?.values.toArray();\n\n  // labeled buckets\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDispSrc = meta.yOrdinalDisplay ?? yVals;\n  const yDisp = yField?.display ? (v: any) => formattedValueToString(yField.display!(v)) : (v: any) => `${v}`;\n\n  const yValueIdx = index % data.yBucketCount! ?? 0;\n\n  const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n  const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n\n  const yBucketMin = yDispSrc?.[yMinIdx];\n  const yBucketMax = yDispSrc?.[yMaxIdx];\n\n  const xBucketMin = xVals?.[index];\n  const xBucketMax = xBucketMin + data.xBucketSize;\n\n  const count = countVals?.[index];\n\n  const visibleFields = data.heatmap?.fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n  const links: Array<LinkModel<Field>> = [];\n  const linkLookup = new Set<string>();\n\n  for (const field of visibleFields ?? []) {\n    // TODO: Currently always undefined? (getLinks)\n    if (field.getLinks) {\n      const v = field.values.get(index);\n      const disp = field.display ? field.display(v) : { text: `${v}`, numeric: +v };\n\n      field.getLinks({ calculatedValue: disp, valueRowIndex: index }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n  }\n\n  let can = useRef<HTMLCanvasElement>(null);\n\n  let histCssWidth = 150;\n  let histCssHeight = 50;\n  let histCanWidth = Math.round(histCssWidth * devicePixelRatio);\n  let histCanHeight = Math.round(histCssHeight * devicePixelRatio);\n\n  useEffect(\n    () => {\n      if (showHistogram) {\n        let histCtx = can.current?.getContext('2d');\n\n        if (histCtx && xVals && yVals && countVals) {\n          let fromIdx = index;\n\n          while (xVals[fromIdx--] === xVals[index]) {}\n\n          fromIdx++;\n\n          let toIdx = fromIdx + data.yBucketCount!;\n\n          let maxCount = 0;\n\n          let i = fromIdx;\n          while (i < toIdx) {\n            let c = countVals[i];\n            maxCount = Math.max(maxCount, c);\n            i++;\n          }\n\n          let pHov = new Path2D();\n          let pRest = new Path2D();\n\n          i = fromIdx;\n          let j = 0;\n          while (i < toIdx) {\n            let c = countVals[i];\n\n            if (c > 0) {\n              let pctY = c / maxCount;\n              let pctX = j / (data.yBucketCount! + 1);\n\n              let p = i === index ? pHov : pRest;\n\n              p.rect(\n                Math.round(histCanWidth * pctX),\n                Math.round(histCanHeight * (1 - pctY)),\n                Math.round(histCanWidth / data.yBucketCount!),\n                Math.round(histCanHeight * pctY)\n              );\n            }\n\n            i++;\n            j++;\n          }\n\n          histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n\n          histCtx.fillStyle = '#ffffff80';\n          histCtx.fill(pRest);\n\n          histCtx.fillStyle = '#ff000080';\n          histCtx.fill(pHov);\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n\n  const [isSparse] = useState(\n    () => data.heatmap?.meta?.type === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap)\n  );\n\n  if (isSparse) {\n    return (\n      <div>\n        <DataHoverView data={data.heatmap} rowIndex={index} />\n      </div>\n    );\n  }\n\n  const renderYBuckets = () => {\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return <div>{yDisp(yBucketMin)}</div>;\n    }\n    return (\n      <div>\n        Bucket: {yDisp(yBucketMin)} - {yDisp(yBucketMax)}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <div>{xDisp(xBucketMin)}</div>\n        <div>{xDisp(xBucketMax)}</div>\n      </div>\n      {showHistogram && (\n        <canvas\n          width={histCanWidth}\n          height={histCanHeight}\n          ref={can}\n          style={{ width: histCanWidth + 'px', height: histCanHeight + 'px' }}\n        />\n      )}\n      <div>\n        {renderYBuckets()}\n        <div>\n          {getFieldDisplayName(countField!, data.heatmap)}: {data.display!(count)}\n        </div>\n      </div>\n      {links.length > 0 && (\n        <VerticalGroup>\n          {links.map((link, i) => (\n            <LinkButton\n              key={i}\n              icon={'external-link-alt'}\n              target={link.target}\n              href={link.href}\n              onClick={link.onClick}\n              fill=\"text\"\n              style={{ width: '100%' }}\n            >\n              {link.title}\n            </LinkButton>\n          ))}\n        </VerticalGroup>\n      )}\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}