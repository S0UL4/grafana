{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { memo } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst getStyles = theme => ({\n  metaContainer: css`\n    flex: 1;\n    color: ${theme.colors.text.secondary};\n    margin-bottom: ${theme.spacing(2)};\n    min-width: 30%;\n    display: flex;\n    flex-wrap: wrap;\n  `,\n  metaItem: css`\n    margin-right: ${theme.spacing(2)};\n    margin-top: ${theme.spacing(0.5)};\n    display: flex;\n    align-items: baseline;\n\n    .logs-meta-item__error {\n      color: ${theme.colors.error.text};\n    }\n  `,\n  metaLabel: css`\n    margin-right: calc(${theme.spacing(2)} / 2);\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.fontWeightMedium};\n  `,\n  metaValue: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `\n});\n\nconst MetaInfoItem = /*#__PURE__*/memo(function MetaInfoItem(props) {\n  const style = useStyles2(getStyles);\n  const {\n    label,\n    value\n  } = props;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    \"data-testid\": \"meta-info-text-item\",\n    className: style.metaItem,\n    children: [label && /*#__PURE__*/_jsxs(\"span\", {\n      className: style.metaLabel,\n      children: [label, \":\"]\n    }), /*#__PURE__*/_jsx(\"span\", {\n      className: style.metaValue,\n      children: value\n    })]\n  });\n});\nexport const MetaInfoText = /*#__PURE__*/memo(function MetaInfoText(props) {\n  const style = useStyles2(getStyles);\n  const {\n    metaItems\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: style.metaContainer,\n    \"data-testid\": \"meta-info-text\",\n    children: metaItems.map((item, index) => /*#__PURE__*/_jsx(MetaInfoItem, {\n      label: item.label,\n      value: item.value\n    }, `${index}-${item.label}`))\n  });\n});","map":{"version":3,"names":["css","React","memo","useStyles2","getStyles","theme","metaContainer","colors","text","secondary","spacing","metaItem","error","metaLabel","typography","bodySmall","fontSize","fontWeightMedium","metaValue","fontFamilyMonospace","MetaInfoItem","props","style","label","value","MetaInfoText","metaItems","map","item","index"],"sources":["/home/soula/grafana/public/app/features/explore/MetaInfoText.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { memo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  metaContainer: css`\n    flex: 1;\n    color: ${theme.colors.text.secondary};\n    margin-bottom: ${theme.spacing(2)};\n    min-width: 30%;\n    display: flex;\n    flex-wrap: wrap;\n  `,\n  metaItem: css`\n    margin-right: ${theme.spacing(2)};\n    margin-top: ${theme.spacing(0.5)};\n    display: flex;\n    align-items: baseline;\n\n    .logs-meta-item__error {\n      color: ${theme.colors.error.text};\n    }\n  `,\n  metaLabel: css`\n    margin-right: calc(${theme.spacing(2)} / 2);\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.fontWeightMedium};\n  `,\n  metaValue: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n\nexport interface MetaItemProps {\n  label?: string;\n  value: string | JSX.Element;\n}\n\nconst MetaInfoItem = memo(function MetaInfoItem(props: MetaItemProps) {\n  const style = useStyles2(getStyles);\n  const { label, value } = props;\n\n  return (\n    <div data-testid=\"meta-info-text-item\" className={style.metaItem}>\n      {label && <span className={style.metaLabel}>{label}:</span>}\n      <span className={style.metaValue}>{value}</span>\n    </div>\n  );\n});\n\ninterface MetaInfoTextProps {\n  metaItems: MetaItemProps[];\n}\n\nexport const MetaInfoText = memo(function MetaInfoText(props: MetaInfoTextProps) {\n  const style = useStyles2(getStyles);\n  const { metaItems } = props;\n\n  return (\n    <div className={style.metaContainer} data-testid=\"meta-info-text\">\n      {metaItems.map((item, index) => (\n        <MetaInfoItem key={`${index}-${item.label}`} label={item.label} value={item.value} />\n      ))}\n    </div>\n  );\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AAGA,SAASC,UAAT,QAA2B,aAA3B;;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,KAA2B;EAC3CC,aAAa,EAAEN,GAAI;AACrB;AACA,aAAaK,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAkBC,SAAU;AACzC,qBAAqBJ,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB;AACtC;AACA;AACA;AACA,GAR6C;EAS3CC,QAAQ,EAAEX,GAAI;AAChB,oBAAoBK,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB;AACrC,kBAAkBL,KAAK,CAACK,OAAN,CAAc,GAAd,CAAmB;AACrC;AACA;AACA;AACA;AACA,eAAeL,KAAK,CAACE,MAAN,CAAaK,KAAb,CAAmBJ,IAAK;AACvC;AACA,GAlB6C;EAmB3CK,SAAS,EAAEb,GAAI;AACjB,yBAAyBK,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB;AAC1C,iBAAiBL,KAAK,CAACS,UAAN,CAAiBC,SAAjB,CAA2BC,QAAS;AACrD,mBAAmBX,KAAK,CAACS,UAAN,CAAiBG,gBAAiB;AACrD,GAvB6C;EAwB3CC,SAAS,EAAElB,GAAI;AACjB,mBAAmBK,KAAK,CAACS,UAAN,CAAiBK,mBAAoB;AACxD,iBAAiBd,KAAK,CAACS,UAAN,CAAiBC,SAAjB,CAA2BC,QAAS;AACrD;AA3B6C,CAA3B,CAAlB;;AAmCA,MAAMI,YAAY,gBAAGlB,IAAI,CAAC,SAASkB,YAAT,CAAsBC,KAAtB,EAA4C;EACpE,MAAMC,KAAK,GAAGnB,UAAU,CAACC,SAAD,CAAxB;EACA,MAAM;IAAEmB,KAAF;IAASC;EAAT,IAAmBH,KAAzB;EAEA,oBACE;IAAK,eAAY,qBAAjB;IAAuC,SAAS,EAAEC,KAAK,CAACX,QAAxD;IAAA,WACGY,KAAK,iBAAI;MAAM,SAAS,EAAED,KAAK,CAACT,SAAvB;MAAA,WAAmCU,KAAnC;IAAA,EADZ,eAEE;MAAM,SAAS,EAAED,KAAK,CAACJ,SAAvB;MAAA,UAAmCM;IAAnC,EAFF;EAAA,EADF;AAMD,CAVwB,CAAzB;AAgBA,OAAO,MAAMC,YAAY,gBAAGvB,IAAI,CAAC,SAASuB,YAAT,CAAsBJ,KAAtB,EAAgD;EAC/E,MAAMC,KAAK,GAAGnB,UAAU,CAACC,SAAD,CAAxB;EACA,MAAM;IAAEsB;EAAF,IAAgBL,KAAtB;EAEA,oBACE;IAAK,SAAS,EAAEC,KAAK,CAAChB,aAAtB;IAAqC,eAAY,gBAAjD;IAAA,UACGoB,SAAS,CAACC,GAAV,CAAc,CAACC,IAAD,EAAOC,KAAP,kBACb,KAAC,YAAD;MAA6C,KAAK,EAAED,IAAI,CAACL,KAAzD;MAAgE,KAAK,EAAEK,IAAI,CAACJ;IAA5E,GAAoB,GAAEK,KAAM,IAAGD,IAAI,CAACL,KAAM,EAA1C,CADD;EADH,EADF;AAOD,CAX+B,CAAzB"},"metadata":{},"sourceType":"module"}