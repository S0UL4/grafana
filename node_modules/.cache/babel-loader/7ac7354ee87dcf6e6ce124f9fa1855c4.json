{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { FieldType, getFieldDisplayName } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const FillBellowToEditor = ({\n  value,\n  context,\n  onChange\n}) => {\n  const names = useMemo(() => {\n    const names = [];\n\n    if (context.data.length) {\n      for (const frame of context.data) {\n        for (const field of frame.fields) {\n          if (field.type === FieldType.number) {\n            const label = getFieldDisplayName(field, frame, context.data);\n            names.push({\n              label,\n              value: label\n            });\n          }\n        }\n      }\n    }\n\n    return names;\n  }, [context]);\n  const current = useMemo(() => {\n    const found = names.find(v => v.value === value);\n\n    if (found) {\n      return found;\n    }\n\n    if (value) {\n      return {\n        label: value,\n        value\n      };\n    }\n\n    return undefined;\n  }, [names, value]);\n  return /*#__PURE__*/_jsx(Select, {\n    options: names,\n    value: current,\n    onChange: v => {\n      onChange(v.value);\n    }\n  });\n};","map":{"version":3,"names":["React","useMemo","FieldType","getFieldDisplayName","Select","FillBellowToEditor","value","context","onChange","names","data","length","frame","field","fields","type","number","label","push","current","found","find","v","undefined"],"sources":["/home/soula/grafana/public/app/plugins/panel/timeseries/FillBelowToEditor.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\n\nimport { FieldOverrideEditorProps, FieldType, getFieldDisplayName, SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nexport const FillBellowToEditor: React.FC<FieldOverrideEditorProps<string, any>> = ({ value, context, onChange }) => {\n  const names = useMemo(() => {\n    const names: Array<SelectableValue<string>> = [];\n    if (context.data.length) {\n      for (const frame of context.data) {\n        for (const field of frame.fields) {\n          if (field.type === FieldType.number) {\n            const label = getFieldDisplayName(field, frame, context.data);\n            names.push({\n              label,\n              value: label,\n            });\n          }\n        }\n      }\n    }\n    return names;\n  }, [context]);\n\n  const current = useMemo(() => {\n    const found = names.find((v) => v.value === value);\n    if (found) {\n      return found;\n    }\n    if (value) {\n      return {\n        label: value,\n        value,\n      };\n    }\n    return undefined;\n  }, [names, value]);\n\n  return (\n    <Select\n      options={names}\n      value={current}\n      onChange={(v) => {\n        onChange(v.value);\n      }}\n    />\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AAEA,SAAmCC,SAAnC,EAA8CC,mBAA9C,QAA0F,eAA1F;AACA,SAASC,MAAT,QAAuB,aAAvB;;AAEA,OAAO,MAAMC,kBAAmE,GAAG,CAAC;EAAEC,KAAF;EAASC,OAAT;EAAkBC;AAAlB,CAAD,KAAkC;EACnH,MAAMC,KAAK,GAAGR,OAAO,CAAC,MAAM;IAC1B,MAAMQ,KAAqC,GAAG,EAA9C;;IACA,IAAIF,OAAO,CAACG,IAAR,CAAaC,MAAjB,EAAyB;MACvB,KAAK,MAAMC,KAAX,IAAoBL,OAAO,CAACG,IAA5B,EAAkC;QAChC,KAAK,MAAMG,KAAX,IAAoBD,KAAK,CAACE,MAA1B,EAAkC;UAChC,IAAID,KAAK,CAACE,IAAN,KAAeb,SAAS,CAACc,MAA7B,EAAqC;YACnC,MAAMC,KAAK,GAAGd,mBAAmB,CAACU,KAAD,EAAQD,KAAR,EAAeL,OAAO,CAACG,IAAvB,CAAjC;YACAD,KAAK,CAACS,IAAN,CAAW;cACTD,KADS;cAETX,KAAK,EAAEW;YAFE,CAAX;UAID;QACF;MACF;IACF;;IACD,OAAOR,KAAP;EACD,CAhBoB,EAgBlB,CAACF,OAAD,CAhBkB,CAArB;EAkBA,MAAMY,OAAO,GAAGlB,OAAO,CAAC,MAAM;IAC5B,MAAMmB,KAAK,GAAGX,KAAK,CAACY,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAAChB,KAAF,KAAYA,KAA9B,CAAd;;IACA,IAAIc,KAAJ,EAAW;MACT,OAAOA,KAAP;IACD;;IACD,IAAId,KAAJ,EAAW;MACT,OAAO;QACLW,KAAK,EAAEX,KADF;QAELA;MAFK,CAAP;IAID;;IACD,OAAOiB,SAAP;EACD,CAZsB,EAYpB,CAACd,KAAD,EAAQH,KAAR,CAZoB,CAAvB;EAcA,oBACE,KAAC,MAAD;IACE,OAAO,EAAEG,KADX;IAEE,KAAK,EAAEU,OAFT;IAGE,QAAQ,EAAGG,CAAD,IAAO;MACfd,QAAQ,CAACc,CAAC,CAAChB,KAAH,CAAR;IACD;EALH,EADF;AASD,CA1CM"},"metadata":{},"sourceType":"module"}