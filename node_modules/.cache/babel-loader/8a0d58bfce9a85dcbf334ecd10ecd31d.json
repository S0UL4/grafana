{"ast":null,"code":"import { useCallback, useMemo, useReducer } from 'react';\nimport { useDebounce } from 'react-use';\nimport { reportInteraction } from '@grafana/runtime/src';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { GENERAL_FOLDER_ID } from '../constants';\nimport { DELETE_ITEMS, MOVE_ITEMS, TOGGLE_ALL_CHECKED, TOGGLE_CHECKED } from '../reducers/actionTypes';\nimport { manageDashboardsReducer, manageDashboardsState } from '../reducers/manageDashboards';\nimport { useSearch } from './useSearch';\nimport { useShowDashboardPreviews } from './useShowDashboardPreviews';\n\nconst hasChecked = section => {\n  return section.checked || section.items.some(item => item.checked);\n};\n\nexport const reportDashboardListViewed = (dashboardListType, showPreviews, previewsEnabled, query) => {\n  var _query$starred, _query$sortValue, _query$tagCount, _query$query$length, _query$query;\n\n  const previews = previewsEnabled ? showPreviews ? 'on' : 'off' : 'feature_disabled';\n  reportInteraction(`${dashboardListType}_viewed`, {\n    previews,\n    layout: query.layout,\n    starredFilter: (_query$starred = query.starred) !== null && _query$starred !== void 0 ? _query$starred : false,\n    sort: (_query$sortValue = query.sortValue) !== null && _query$sortValue !== void 0 ? _query$sortValue : '',\n    tagCount: (_query$tagCount = query.tagCount) !== null && _query$tagCount !== void 0 ? _query$tagCount : 0,\n    queryLength: (_query$query$length = (_query$query = query.query) === null || _query$query === void 0 ? void 0 : _query$query.length) !== null && _query$query$length !== void 0 ? _query$query$length : 0\n  });\n};\nexport const useManageDashboards = (query, state = {}, folder) => {\n  var _query$sort2, _query$query2, _query$tag2;\n\n  const reducer = useReducer(manageDashboardsReducer, Object.assign({}, manageDashboardsState, state));\n  const {\n    showPreviews,\n    setShowPreviews,\n    previewFeatureEnabled\n  } = useShowDashboardPreviews();\n  useDebounce(() => {\n    var _query$sort, _query$tag;\n\n    reportDashboardListViewed('manage_dashboards', showPreviews, previewFeatureEnabled, {\n      layout: query.layout,\n      starred: query.starred,\n      sortValue: (_query$sort = query.sort) === null || _query$sort === void 0 ? void 0 : _query$sort.value,\n      query: query.query,\n      tagCount: (_query$tag = query.tag) === null || _query$tag === void 0 ? void 0 : _query$tag.length\n    });\n  }, 1000, [showPreviews, previewFeatureEnabled, query.layout, query.starred, (_query$sort2 = query.sort) === null || _query$sort2 === void 0 ? void 0 : _query$sort2.value, (_query$query2 = query.query) === null || _query$query2 === void 0 ? void 0 : _query$query2.length, (_query$tag2 = query.tag) === null || _query$tag2 === void 0 ? void 0 : _query$tag2.length]);\n  const {\n    state: {\n      results,\n      loading,\n      initialLoading,\n      allChecked\n    },\n    onToggleSection,\n    dispatch\n  } = useSearch(query, reducer, {});\n  const onToggleChecked = useCallback(item => {\n    dispatch({\n      type: TOGGLE_CHECKED,\n      payload: item\n    });\n  }, [dispatch]);\n\n  const onToggleAllChecked = () => {\n    dispatch({\n      type: TOGGLE_ALL_CHECKED\n    });\n  };\n\n  const onDeleteItems = (folders, dashboards) => {\n    dispatch({\n      type: DELETE_ITEMS,\n      payload: {\n        folders,\n        dashboards\n      }\n    });\n  };\n\n  const onMoveItems = (selectedDashboards, folder) => {\n    dispatch({\n      type: MOVE_ITEMS,\n      payload: {\n        dashboards: selectedDashboards,\n        folder\n      }\n    });\n  };\n\n  const canMove = useMemo(() => results.some(result => result.items.some(item => item.checked)), [results]);\n  const canDelete = useMemo(() => {\n    const somethingChecked = results.some(hasChecked);\n    const includesGeneralFolder = results.find(result => result.checked && result.id === GENERAL_FOLDER_ID);\n    return somethingChecked && !includesGeneralFolder;\n  }, [results]);\n  const canSave = folder === null || folder === void 0 ? void 0 : folder.canSave;\n  const hasEditPermissionInFolders = folder ? canSave : contextSrv.hasEditPermissionInFolders;\n  const noFolders = canSave && (folder === null || folder === void 0 ? void 0 : folder.id) && results.length === 0 && !loading && !initialLoading;\n  return {\n    results,\n    loading,\n    initialLoading,\n    canSave,\n    allChecked,\n    hasEditPermissionInFolders,\n    canMove,\n    canDelete,\n    onToggleSection,\n    onToggleChecked,\n    onToggleAllChecked,\n    onDeleteItems,\n    onMoveItems,\n    noFolders,\n    showPreviews,\n    setShowPreviews\n  };\n};","map":{"version":3,"names":["useCallback","useMemo","useReducer","useDebounce","reportInteraction","contextSrv","GENERAL_FOLDER_ID","DELETE_ITEMS","MOVE_ITEMS","TOGGLE_ALL_CHECKED","TOGGLE_CHECKED","manageDashboardsReducer","manageDashboardsState","useSearch","useShowDashboardPreviews","hasChecked","section","checked","items","some","item","reportDashboardListViewed","dashboardListType","showPreviews","previewsEnabled","query","previews","layout","starredFilter","starred","sort","sortValue","tagCount","queryLength","length","useManageDashboards","state","folder","reducer","setShowPreviews","previewFeatureEnabled","value","tag","results","loading","initialLoading","allChecked","onToggleSection","dispatch","onToggleChecked","type","payload","onToggleAllChecked","onDeleteItems","folders","dashboards","onMoveItems","selectedDashboards","canMove","result","canDelete","somethingChecked","includesGeneralFolder","find","id","canSave","hasEditPermissionInFolders","noFolders"],"sources":["/home/soula/grafana/public/app/features/search/hooks/useManageDashboards.ts"],"sourcesContent":["import { useCallback, useMemo, useReducer } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { reportInteraction } from '@grafana/runtime/src';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { FolderDTO } from 'app/types';\n\nimport { GENERAL_FOLDER_ID } from '../constants';\nimport { DELETE_ITEMS, MOVE_ITEMS, TOGGLE_ALL_CHECKED, TOGGLE_CHECKED } from '../reducers/actionTypes';\nimport { manageDashboardsReducer, manageDashboardsState, ManageDashboardsState } from '../reducers/manageDashboards';\nimport { DashboardQuery, DashboardSection, OnDeleteItems, OnMoveItems, OnToggleChecked, SearchLayout } from '../types';\n\nimport { useSearch } from './useSearch';\nimport { useShowDashboardPreviews } from './useShowDashboardPreviews';\n\nconst hasChecked = (section: DashboardSection) => {\n  return section.checked || section.items.some((item) => item.checked);\n};\n\nexport const reportDashboardListViewed = (\n  dashboardListType: 'manage_dashboards' | 'dashboard_search',\n  showPreviews: boolean,\n  previewsEnabled: boolean,\n  query: {\n    layout?: SearchLayout;\n    starred?: boolean;\n    sortValue?: string;\n    query?: string;\n    tagCount?: number;\n  }\n) => {\n  const previews = previewsEnabled ? (showPreviews ? 'on' : 'off') : 'feature_disabled';\n  reportInteraction(`${dashboardListType}_viewed`, {\n    previews,\n    layout: query.layout,\n    starredFilter: query.starred ?? false,\n    sort: query.sortValue ?? '',\n    tagCount: query.tagCount ?? 0,\n    queryLength: query.query?.length ?? 0,\n  });\n};\n\nexport const useManageDashboards = (\n  query: DashboardQuery,\n  state: Partial<ManageDashboardsState> = {},\n  folder?: FolderDTO\n) => {\n  const reducer = useReducer(manageDashboardsReducer, {\n    ...manageDashboardsState,\n    ...state,\n  });\n\n  const { showPreviews, setShowPreviews, previewFeatureEnabled } = useShowDashboardPreviews();\n  useDebounce(\n    () => {\n      reportDashboardListViewed('manage_dashboards', showPreviews, previewFeatureEnabled, {\n        layout: query.layout,\n        starred: query.starred,\n        sortValue: query.sort?.value,\n        query: query.query,\n        tagCount: query.tag?.length,\n      });\n    },\n    1000,\n    [\n      showPreviews,\n      previewFeatureEnabled,\n      query.layout,\n      query.starred,\n      query.sort?.value,\n      query.query?.length,\n      query.tag?.length,\n    ]\n  );\n\n  const {\n    state: { results, loading, initialLoading, allChecked },\n    onToggleSection,\n    dispatch,\n  } = useSearch<ManageDashboardsState>(query, reducer, {});\n\n  const onToggleChecked: OnToggleChecked = useCallback(\n    (item) => {\n      dispatch({ type: TOGGLE_CHECKED, payload: item });\n    },\n    [dispatch]\n  );\n\n  const onToggleAllChecked = () => {\n    dispatch({ type: TOGGLE_ALL_CHECKED });\n  };\n\n  const onDeleteItems: OnDeleteItems = (folders, dashboards) => {\n    dispatch({ type: DELETE_ITEMS, payload: { folders, dashboards } });\n  };\n\n  const onMoveItems: OnMoveItems = (selectedDashboards, folder) => {\n    dispatch({ type: MOVE_ITEMS, payload: { dashboards: selectedDashboards, folder } });\n  };\n\n  const canMove = useMemo(() => results.some((result) => result.items.some((item) => item.checked)), [results]);\n\n  const canDelete = useMemo(() => {\n    const somethingChecked = results.some(hasChecked);\n    const includesGeneralFolder = results.find((result) => result.checked && result.id === GENERAL_FOLDER_ID);\n    return somethingChecked && !includesGeneralFolder;\n  }, [results]);\n\n  const canSave = folder?.canSave;\n  const hasEditPermissionInFolders = folder ? canSave : contextSrv.hasEditPermissionInFolders;\n  const noFolders = canSave && folder?.id && results.length === 0 && !loading && !initialLoading;\n\n  return {\n    results,\n    loading,\n    initialLoading,\n    canSave,\n    allChecked,\n    hasEditPermissionInFolders,\n    canMove,\n    canDelete,\n    onToggleSection,\n    onToggleChecked,\n    onToggleAllChecked,\n    onDeleteItems,\n    onMoveItems,\n    noFolders,\n    showPreviews,\n    setShowPreviews,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}