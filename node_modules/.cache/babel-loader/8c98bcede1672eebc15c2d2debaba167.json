{"ast":null,"code":"import { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport { AlignmentTypes, EditorMode, MetricKind, QueryType } from './types'; // The legacy query format sets the title and text values to empty strings by default.\n// If the title or text is not undefined at the top-level of the annotation target,\n// then it is a legacy query.\n\nconst isLegacyCloudMonitoringAnnotation = query => {\n  var _target, _target2;\n\n  return ((_target = query.target) === null || _target === void 0 ? void 0 : _target.title) !== undefined || ((_target2 = query.target) === null || _target2 === void 0 ? void 0 : _target2.text) !== undefined;\n};\n\nexport const CloudMonitoringAnnotationSupport = ds => {\n  return {\n    prepareAnnotation: query => {\n      if (!isLegacyCloudMonitoringAnnotation(query)) {\n        return query;\n      }\n\n      const {\n        enable,\n        name,\n        iconColor\n      } = query;\n      const {\n        target\n      } = query;\n      const result = {\n        datasource: query.datasource,\n        enable,\n        name,\n        iconColor,\n        target: {\n          intervalMs: ds.intervalMs,\n          refId: (target === null || target === void 0 ? void 0 : target.refId) || 'annotationQuery',\n          type: 'annotationQuery',\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: (target === null || target === void 0 ? void 0 : target.projectName) || ds.getDefaultProject(),\n            editorMode: EditorMode.Visual,\n            metricType: (target === null || target === void 0 ? void 0 : target.metricType) || '',\n            filters: (target === null || target === void 0 ? void 0 : target.filters) || [],\n            metricKind: (target === null || target === void 0 ? void 0 : target.metricKind) || MetricKind.GAUGE,\n            query: '',\n            crossSeriesReducer: 'REDUCE_NONE',\n            perSeriesAligner: AlignmentTypes.ALIGN_NONE,\n            title: (target === null || target === void 0 ? void 0 : target.title) || '',\n            text: (target === null || target === void 0 ? void 0 : target.text) || ''\n          }\n        }\n      };\n      return result;\n    },\n    prepareQuery: anno => {\n      if (!anno.target) {\n        return undefined;\n      }\n\n      return Object.assign({}, anno.target, {\n        queryType: QueryType.METRICS,\n        type: 'annotationQuery',\n        metricQuery: Object.assign({}, anno.target.metricQuery)\n      });\n    },\n    QueryEditor: AnnotationQueryEditor\n  };\n};","map":{"version":3,"names":["AnnotationQueryEditor","AlignmentTypes","EditorMode","MetricKind","QueryType","isLegacyCloudMonitoringAnnotation","query","target","title","undefined","text","CloudMonitoringAnnotationSupport","ds","prepareAnnotation","enable","name","iconColor","result","datasource","intervalMs","refId","type","queryType","METRICS","metricQuery","projectName","getDefaultProject","editorMode","Visual","metricType","filters","metricKind","GAUGE","crossSeriesReducer","perSeriesAligner","ALIGN_NONE","prepareQuery","anno","QueryEditor"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/annotationSupport.ts"],"sourcesContent":["import { AnnotationSupport, AnnotationQuery } from '@grafana/data';\n\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport {\n  AlignmentTypes,\n  CloudMonitoringQuery,\n  EditorMode,\n  LegacyCloudMonitoringAnnotationQuery,\n  MetricKind,\n  QueryType,\n} from './types';\n\n// The legacy query format sets the title and text values to empty strings by default.\n// If the title or text is not undefined at the top-level of the annotation target,\n// then it is a legacy query.\nconst isLegacyCloudMonitoringAnnotation = (\n  query: unknown\n): query is AnnotationQuery<LegacyCloudMonitoringAnnotationQuery> =>\n  (query as AnnotationQuery<LegacyCloudMonitoringAnnotationQuery>).target?.title !== undefined ||\n  (query as AnnotationQuery<LegacyCloudMonitoringAnnotationQuery>).target?.text !== undefined;\n\nexport const CloudMonitoringAnnotationSupport: (\n  ds: CloudMonitoringDatasource\n) => AnnotationSupport<CloudMonitoringQuery> = (ds: CloudMonitoringDatasource) => {\n  return {\n    prepareAnnotation: (\n      query: AnnotationQuery<LegacyCloudMonitoringAnnotationQuery> | AnnotationQuery<CloudMonitoringQuery>\n    ): AnnotationQuery<CloudMonitoringQuery> => {\n      if (!isLegacyCloudMonitoringAnnotation(query)) {\n        return query;\n      }\n\n      const { enable, name, iconColor } = query;\n      const { target } = query;\n      const result: AnnotationQuery<CloudMonitoringQuery> = {\n        datasource: query.datasource,\n        enable,\n        name,\n        iconColor,\n        target: {\n          intervalMs: ds.intervalMs,\n          refId: target?.refId || 'annotationQuery',\n          type: 'annotationQuery',\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: target?.projectName || ds.getDefaultProject(),\n            editorMode: EditorMode.Visual,\n            metricType: target?.metricType || '',\n            filters: target?.filters || [],\n            metricKind: target?.metricKind || MetricKind.GAUGE,\n            query: '',\n            crossSeriesReducer: 'REDUCE_NONE',\n            perSeriesAligner: AlignmentTypes.ALIGN_NONE,\n            title: target?.title || '',\n            text: target?.text || '',\n          },\n        },\n      };\n      return result;\n    },\n    prepareQuery: (anno: AnnotationQuery<CloudMonitoringQuery>) => {\n      if (!anno.target) {\n        return undefined;\n      }\n\n      return {\n        ...anno.target,\n        queryType: QueryType.METRICS,\n        type: 'annotationQuery',\n        metricQuery: {\n          ...anno.target.metricQuery,\n        },\n      };\n    },\n    QueryEditor: AnnotationQueryEditor,\n  };\n};\n"],"mappings":"AAEA,SAASA,qBAAT,QAAsC,oCAAtC;AAEA,SACEC,cADF,EAGEC,UAHF,EAKEC,UALF,EAMEC,SANF,QAOO,SAPP,C,CASA;AACA;AACA;;AACA,MAAMC,iCAAiC,GACrCC,KADwC;EAAA;;EAAA,OAGxC,YAACA,KAAD,CAAiEC,MAAjE,oDAAyEC,KAAzE,MAAmFC,SAAnF,IACA,aAACH,KAAD,CAAiEC,MAAjE,sDAAyEG,IAAzE,MAAkFD,SAJ1C;AAAA,CAA1C;;AAMA,OAAO,MAAME,gCAE+B,GAAIC,EAAD,IAAmC;EAChF,OAAO;IACLC,iBAAiB,EACfP,KADiB,IAEyB;MAC1C,IAAI,CAACD,iCAAiC,CAACC,KAAD,CAAtC,EAA+C;QAC7C,OAAOA,KAAP;MACD;;MAED,MAAM;QAAEQ,MAAF;QAAUC,IAAV;QAAgBC;MAAhB,IAA8BV,KAApC;MACA,MAAM;QAAEC;MAAF,IAAaD,KAAnB;MACA,MAAMW,MAA6C,GAAG;QACpDC,UAAU,EAAEZ,KAAK,CAACY,UADkC;QAEpDJ,MAFoD;QAGpDC,IAHoD;QAIpDC,SAJoD;QAKpDT,MAAM,EAAE;UACNY,UAAU,EAAEP,EAAE,CAACO,UADT;UAENC,KAAK,EAAE,CAAAb,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEa,KAAR,KAAiB,iBAFlB;UAGNC,IAAI,EAAE,iBAHA;UAINC,SAAS,EAAElB,SAAS,CAACmB,OAJf;UAKNC,WAAW,EAAE;YACXC,WAAW,EAAE,CAAAlB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEkB,WAAR,KAAuBb,EAAE,CAACc,iBAAH,EADzB;YAEXC,UAAU,EAAEzB,UAAU,CAAC0B,MAFZ;YAGXC,UAAU,EAAE,CAAAtB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEsB,UAAR,KAAsB,EAHvB;YAIXC,OAAO,EAAE,CAAAvB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEuB,OAAR,KAAmB,EAJjB;YAKXC,UAAU,EAAE,CAAAxB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEwB,UAAR,KAAsB5B,UAAU,CAAC6B,KALlC;YAMX1B,KAAK,EAAE,EANI;YAOX2B,kBAAkB,EAAE,aAPT;YAQXC,gBAAgB,EAAEjC,cAAc,CAACkC,UARtB;YASX3B,KAAK,EAAE,CAAAD,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEC,KAAR,KAAiB,EATb;YAUXE,IAAI,EAAE,CAAAH,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,IAAR,KAAgB;UAVX;QALP;MAL4C,CAAtD;MAwBA,OAAOO,MAAP;IACD,CAnCI;IAoCLmB,YAAY,EAAGC,IAAD,IAAiD;MAC7D,IAAI,CAACA,IAAI,CAAC9B,MAAV,EAAkB;QAChB,OAAOE,SAAP;MACD;;MAED,yBACK4B,IAAI,CAAC9B,MADV;QAEEe,SAAS,EAAElB,SAAS,CAACmB,OAFvB;QAGEF,IAAI,EAAE,iBAHR;QAIEG,WAAW,oBACNa,IAAI,CAAC9B,MAAL,CAAYiB,WADN;MAJb;IAQD,CAjDI;IAkDLc,WAAW,EAAEtC;EAlDR,CAAP;AAoDD,CAvDM"},"metadata":{},"sourceType":"module"}