{"ast":null,"code":"import React from 'react';\nimport { EditorField, EditorFieldGroup, EditorRow, EditorRows, EditorSwitch } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\nimport { Dimensions } from '..';\nimport { useDimensionKeys, useMetrics, useNamespaces } from '../../hooks';\nimport { appendTemplateVariables, toOption } from '../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function MetricStatEditor({\n  refId,\n  metricStat,\n  datasource,\n  disableExpressions = false,\n  onChange,\n  onRunQuery\n}) {\n  var _metricStat$statistic;\n\n  const {\n    region,\n    namespace,\n    metricName,\n    dimensions\n  } = metricStat;\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, region, namespace);\n  const dimensionKeys = useDimensionKeys(datasource, region, namespace, metricName, dimensions !== null && dimensions !== void 0 ? dimensions : {});\n\n  const onMetricStatChange = metricStat => {\n    onChange(metricStat);\n    onRunQuery();\n  };\n\n  const onNamespaceChange = async metricStat => {\n    const validatedQuery = await validateMetricName(metricStat);\n    onMetricStatChange(validatedQuery);\n  };\n\n  const validateMetricName = async metricStat => {\n    let {\n      metricName,\n      namespace,\n      region\n    } = metricStat;\n\n    if (!metricName) {\n      return metricStat;\n    }\n\n    await datasource.getMetrics(namespace, region).then(result => {\n      if (!result.find(metric => metric.value === metricName)) {\n        metricName = '';\n      }\n    });\n    return Object.assign({}, metricStat, {\n      metricName\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(EditorRows, {\n    children: [/*#__PURE__*/_jsx(EditorRow, {\n      children: /*#__PURE__*/_jsxs(EditorFieldGroup, {\n        children: [/*#__PURE__*/_jsx(EditorField, {\n          label: \"Namespace\",\n          width: 26,\n          children: /*#__PURE__*/_jsx(Select, {\n            \"aria-label\": \"Namespace\",\n            value: metricStat.namespace,\n            allowCustomValue: true,\n            options: namespaces,\n            onChange: ({\n              value: namespace\n            }) => {\n              if (namespace) {\n                onNamespaceChange(Object.assign({}, metricStat, {\n                  namespace\n                }));\n              }\n            }\n          })\n        }), /*#__PURE__*/_jsx(EditorField, {\n          label: \"Metric name\",\n          width: 16,\n          children: /*#__PURE__*/_jsx(Select, {\n            \"aria-label\": \"Metric name\",\n            value: metricStat.metricName || null,\n            allowCustomValue: true,\n            options: metrics,\n            onChange: ({\n              value: metricName\n            }) => {\n              if (metricName) {\n                onMetricStatChange(Object.assign({}, metricStat, {\n                  metricName\n                }));\n              }\n            }\n          })\n        }), /*#__PURE__*/_jsx(EditorField, {\n          label: \"Statistic\",\n          width: 16,\n          children: /*#__PURE__*/_jsx(Select, {\n            inputId: `${refId}-metric-stat-editor-select-statistic`,\n            allowCustomValue: true,\n            value: toOption((_metricStat$statistic = metricStat.statistic) !== null && _metricStat$statistic !== void 0 ? _metricStat$statistic : datasource.standardStatistics[0]),\n            options: appendTemplateVariables(datasource, datasource.standardStatistics.filter(s => s !== metricStat.statistic).map(toOption)),\n            onChange: ({\n              value: statistic\n            }) => {\n              if (!statistic || !datasource.standardStatistics.includes(statistic) && !/^p\\d{2}(?:\\.\\d{1,2})?$/.test(statistic) && !statistic.startsWith('$')) {\n                return;\n              }\n\n              onMetricStatChange(Object.assign({}, metricStat, {\n                statistic\n              }));\n            }\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(EditorRow, {\n      children: /*#__PURE__*/_jsx(EditorField, {\n        label: \"Dimensions\",\n        children: /*#__PURE__*/_jsx(Dimensions, {\n          metricStat: metricStat,\n          onChange: dimensions => onMetricStatChange(Object.assign({}, metricStat, {\n            dimensions\n          })),\n          dimensionKeys: dimensionKeys,\n          disableExpressions: disableExpressions,\n          datasource: datasource\n        })\n      })\n    }), !disableExpressions && /*#__PURE__*/_jsx(EditorRow, {\n      children: /*#__PURE__*/_jsx(EditorField, {\n        label: \"Match exact\",\n        optional: true,\n        tooltip: \"Only show metrics that exactly match all defined dimension names.\",\n        children: /*#__PURE__*/_jsx(EditorSwitch, {\n          id: `${refId}-cloudwatch-match-exact`,\n          value: !!metricStat.matchExact,\n          onChange: e => {\n            onMetricStatChange(Object.assign({}, metricStat, {\n              matchExact: e.currentTarget.checked\n            }));\n          }\n        })\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","EditorField","EditorFieldGroup","EditorRow","EditorRows","EditorSwitch","Select","Dimensions","useDimensionKeys","useMetrics","useNamespaces","appendTemplateVariables","toOption","MetricStatEditor","refId","metricStat","datasource","disableExpressions","onChange","onRunQuery","region","namespace","metricName","dimensions","namespaces","metrics","dimensionKeys","onMetricStatChange","onNamespaceChange","validatedQuery","validateMetricName","getMetrics","then","result","find","metric","value","statistic","standardStatistics","filter","s","map","includes","test","startsWith","matchExact","e","currentTarget","checked"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/MetricStatEditor/MetricStatEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow, EditorRows, EditorSwitch } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { Dimensions } from '..';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces } from '../../hooks';\nimport { MetricStat } from '../../types';\nimport { appendTemplateVariables, toOption } from '../../utils/utils';\n\nexport type Props = {\n  refId: string;\n  metricStat: MetricStat;\n  datasource: CloudWatchDatasource;\n  disableExpressions?: boolean;\n  onChange: (value: MetricStat) => void;\n  onRunQuery: () => void;\n};\n\nexport function MetricStatEditor({\n  refId,\n  metricStat,\n  datasource,\n  disableExpressions = false,\n  onChange,\n  onRunQuery,\n}: React.PropsWithChildren<Props>) {\n  const { region, namespace, metricName, dimensions } = metricStat;\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, region, namespace);\n  const dimensionKeys = useDimensionKeys(datasource, region, namespace, metricName, dimensions ?? {});\n\n  const onMetricStatChange = (metricStat: MetricStat) => {\n    onChange(metricStat);\n    onRunQuery();\n  };\n\n  const onNamespaceChange = async (metricStat: MetricStat) => {\n    const validatedQuery = await validateMetricName(metricStat);\n    onMetricStatChange(validatedQuery);\n  };\n\n  const validateMetricName = async (metricStat: MetricStat) => {\n    let { metricName, namespace, region } = metricStat;\n    if (!metricName) {\n      return metricStat;\n    }\n    await datasource.getMetrics(namespace, region).then((result: Array<SelectableValue<string>>) => {\n      if (!result.find((metric) => metric.value === metricName)) {\n        metricName = '';\n      }\n    });\n    return { ...metricStat, metricName };\n  };\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        <EditorFieldGroup>\n          <EditorField label=\"Namespace\" width={26}>\n            <Select\n              aria-label=\"Namespace\"\n              value={metricStat.namespace}\n              allowCustomValue\n              options={namespaces}\n              onChange={({ value: namespace }) => {\n                if (namespace) {\n                  onNamespaceChange({ ...metricStat, namespace });\n                }\n              }}\n            />\n          </EditorField>\n          <EditorField label=\"Metric name\" width={16}>\n            <Select\n              aria-label=\"Metric name\"\n              value={metricStat.metricName || null}\n              allowCustomValue\n              options={metrics}\n              onChange={({ value: metricName }) => {\n                if (metricName) {\n                  onMetricStatChange({ ...metricStat, metricName });\n                }\n              }}\n            />\n          </EditorField>\n\n          <EditorField label=\"Statistic\" width={16}>\n            <Select\n              inputId={`${refId}-metric-stat-editor-select-statistic`}\n              allowCustomValue\n              value={toOption(metricStat.statistic ?? datasource.standardStatistics[0])}\n              options={appendTemplateVariables(\n                datasource,\n                datasource.standardStatistics.filter((s) => s !== metricStat.statistic).map(toOption)\n              )}\n              onChange={({ value: statistic }) => {\n                if (\n                  !statistic ||\n                  (!datasource.standardStatistics.includes(statistic) &&\n                    !/^p\\d{2}(?:\\.\\d{1,2})?$/.test(statistic) &&\n                    !statistic.startsWith('$'))\n                ) {\n                  return;\n                }\n\n                onMetricStatChange({ ...metricStat, statistic });\n              }}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Dimensions\">\n          <Dimensions\n            metricStat={metricStat}\n            onChange={(dimensions) => onMetricStatChange({ ...metricStat, dimensions })}\n            dimensionKeys={dimensionKeys}\n            disableExpressions={disableExpressions}\n            datasource={datasource}\n          />\n        </EditorField>\n      </EditorRow>\n      {!disableExpressions && (\n        <EditorRow>\n          <EditorField\n            label=\"Match exact\"\n            optional={true}\n            tooltip=\"Only show metrics that exactly match all defined dimension names.\"\n          >\n            <EditorSwitch\n              id={`${refId}-cloudwatch-match-exact`}\n              value={!!metricStat.matchExact}\n              onChange={(e) => {\n                onMetricStatChange({\n                  ...metricStat,\n                  matchExact: e.currentTarget.checked,\n                });\n              }}\n            />\n          </EditorField>\n        </EditorRow>\n      )}\n    </EditorRows>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}