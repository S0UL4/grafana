{"ast":null,"code":"import { omit } from 'lodash';\nimport { SortOrder } from '../utils/richHistoryTypes';\n/**\n * Temporary place for local storage specific items that are still in use in richHistory.ts\n *\n * Should be migrated to RichHistoryLocalStorage.ts\n */\n\nexport function filterAndSortQueries(queries, sortOrder, listOfDatasourceFilters, searchFilter, timeFilter) {\n  const filteredQueriesByDs = filterQueriesByDataSource(queries, listOfDatasourceFilters);\n  const filteredQueriesByDsAndSearchFilter = filterQueriesBySearchFilter(filteredQueriesByDs, searchFilter);\n  const filteredQueriesToBeSorted = timeFilter ? filterQueriesByTime(filteredQueriesByDsAndSearchFilter, timeFilter) : filteredQueriesByDsAndSearchFilter;\n  return sortQueries(filteredQueriesToBeSorted, sortOrder);\n}\nexport const createRetentionPeriodBoundary = (days, isLastTs) => {\n  const today = new Date();\n  const date = new Date(today.setDate(today.getDate() - days));\n  /*\n   * As a retention period boundaries, we consider:\n   * - The last timestamp equals to the 24:00 of the last day of retention\n   * - The first timestamp that equals to the 00:00 of the first day of retention\n   */\n\n  const boundary = isLastTs ? date.setHours(24, 0, 0, 0) : date.setHours(0, 0, 0, 0);\n  return boundary;\n};\n\nfunction filterQueriesByTime(queries, timeFilter) {\n  const filter1 = createRetentionPeriodBoundary(timeFilter[0], true); // probably the vars should have a different name\n\n  const filter2 = createRetentionPeriodBoundary(timeFilter[1], false);\n  return queries.filter(q => q.createdAt < filter1 && q.createdAt > filter2);\n}\n\nfunction filterQueriesByDataSource(queries, listOfDatasourceFilters) {\n  return listOfDatasourceFilters.length > 0 ? queries.filter(q => listOfDatasourceFilters.includes(q.datasourceName)) : queries;\n}\n\nfunction filterQueriesBySearchFilter(queries, searchFilter) {\n  return queries.filter(query => {\n    if (query.comment.includes(searchFilter)) {\n      return true;\n    }\n\n    const listOfMatchingQueries = query.queries.filter(query => // Remove fields in which we don't want to be searching\n    Object.values(omit(query, ['datasource', 'key', 'refId', 'hide', 'queryType'])).some(value => value === null || value === void 0 ? void 0 : value.toString().includes(searchFilter)));\n    return listOfMatchingQueries.length > 0;\n  });\n}\n\nexport const sortQueries = (array, sortOrder) => {\n  let sortFunc;\n\n  if (sortOrder === SortOrder.Ascending) {\n    sortFunc = (a, b) => a.createdAt < b.createdAt ? -1 : a.createdAt > b.createdAt ? 1 : 0;\n  }\n\n  if (sortOrder === SortOrder.Descending) {\n    sortFunc = (a, b) => a.createdAt < b.createdAt ? 1 : a.createdAt > b.createdAt ? -1 : 0;\n  }\n\n  if (sortOrder === SortOrder.DatasourceZA) {\n    sortFunc = (a, b) => a.datasourceName < b.datasourceName ? -1 : a.datasourceName > b.datasourceName ? 1 : 0;\n  }\n\n  if (sortOrder === SortOrder.DatasourceAZ) {\n    sortFunc = (a, b) => a.datasourceName < b.datasourceName ? 1 : a.datasourceName > b.datasourceName ? -1 : 0;\n  }\n\n  return array.sort(sortFunc);\n};\nexport const RICH_HISTORY_SETTING_KEYS = {\n  retentionPeriod: 'grafana.explore.richHistory.retentionPeriod',\n  starredTabAsFirstTab: 'grafana.explore.richHistory.starredTabAsFirstTab',\n  activeDatasourceOnly: 'grafana.explore.richHistory.activeDatasourceOnly',\n  datasourceFilters: 'grafana.explore.richHistory.datasourceFilters',\n  migrated: 'grafana.explore.richHistory.migrated'\n};","map":{"version":3,"names":["omit","SortOrder","filterAndSortQueries","queries","sortOrder","listOfDatasourceFilters","searchFilter","timeFilter","filteredQueriesByDs","filterQueriesByDataSource","filteredQueriesByDsAndSearchFilter","filterQueriesBySearchFilter","filteredQueriesToBeSorted","filterQueriesByTime","sortQueries","createRetentionPeriodBoundary","days","isLastTs","today","Date","date","setDate","getDate","boundary","setHours","filter1","filter2","filter","q","createdAt","length","includes","datasourceName","query","comment","listOfMatchingQueries","Object","values","some","value","toString","array","sortFunc","Ascending","a","b","Descending","DatasourceZA","DatasourceAZ","sort","RICH_HISTORY_SETTING_KEYS","retentionPeriod","starredTabAsFirstTab","activeDatasourceOnly","datasourceFilters","migrated"],"sources":["/home/soula/grafana/public/app/core/history/richHistoryLocalStorageUtils.ts"],"sourcesContent":["import { omit } from 'lodash';\n\nimport { RichHistoryQuery } from '../../types';\nimport { SortOrder } from '../utils/richHistoryTypes';\n\n/**\n * Temporary place for local storage specific items that are still in use in richHistory.ts\n *\n * Should be migrated to RichHistoryLocalStorage.ts\n */\n\nexport function filterAndSortQueries(\n  queries: RichHistoryQuery[],\n  sortOrder: SortOrder,\n  listOfDatasourceFilters: string[],\n  searchFilter: string,\n  timeFilter?: [number, number]\n) {\n  const filteredQueriesByDs = filterQueriesByDataSource(queries, listOfDatasourceFilters);\n  const filteredQueriesByDsAndSearchFilter = filterQueriesBySearchFilter(filteredQueriesByDs, searchFilter);\n  const filteredQueriesToBeSorted = timeFilter\n    ? filterQueriesByTime(filteredQueriesByDsAndSearchFilter, timeFilter)\n    : filteredQueriesByDsAndSearchFilter;\n\n  return sortQueries(filteredQueriesToBeSorted, sortOrder);\n}\n\nexport const createRetentionPeriodBoundary = (days: number, isLastTs: boolean) => {\n  const today = new Date();\n  const date = new Date(today.setDate(today.getDate() - days));\n  /*\n   * As a retention period boundaries, we consider:\n   * - The last timestamp equals to the 24:00 of the last day of retention\n   * - The first timestamp that equals to the 00:00 of the first day of retention\n   */\n  const boundary = isLastTs ? date.setHours(24, 0, 0, 0) : date.setHours(0, 0, 0, 0);\n  return boundary;\n};\n\nfunction filterQueriesByTime(queries: RichHistoryQuery[], timeFilter: [number, number]) {\n  const filter1 = createRetentionPeriodBoundary(timeFilter[0], true); // probably the vars should have a different name\n  const filter2 = createRetentionPeriodBoundary(timeFilter[1], false);\n  return queries.filter((q) => q.createdAt < filter1 && q.createdAt > filter2);\n}\n\nfunction filterQueriesByDataSource(queries: RichHistoryQuery[], listOfDatasourceFilters: string[]) {\n  return listOfDatasourceFilters.length > 0\n    ? queries.filter((q) => listOfDatasourceFilters.includes(q.datasourceName))\n    : queries;\n}\n\nfunction filterQueriesBySearchFilter(queries: RichHistoryQuery[], searchFilter: string) {\n  return queries.filter((query) => {\n    if (query.comment.includes(searchFilter)) {\n      return true;\n    }\n\n    const listOfMatchingQueries = query.queries.filter((query) =>\n      // Remove fields in which we don't want to be searching\n      Object.values(omit(query, ['datasource', 'key', 'refId', 'hide', 'queryType'])).some((value: any) =>\n        value?.toString().includes(searchFilter)\n      )\n    );\n\n    return listOfMatchingQueries.length > 0;\n  });\n}\n\nexport const sortQueries = (array: RichHistoryQuery[], sortOrder: SortOrder) => {\n  let sortFunc;\n\n  if (sortOrder === SortOrder.Ascending) {\n    sortFunc = (a: RichHistoryQuery, b: RichHistoryQuery) =>\n      a.createdAt < b.createdAt ? -1 : a.createdAt > b.createdAt ? 1 : 0;\n  }\n  if (sortOrder === SortOrder.Descending) {\n    sortFunc = (a: RichHistoryQuery, b: RichHistoryQuery) =>\n      a.createdAt < b.createdAt ? 1 : a.createdAt > b.createdAt ? -1 : 0;\n  }\n\n  if (sortOrder === SortOrder.DatasourceZA) {\n    sortFunc = (a: RichHistoryQuery, b: RichHistoryQuery) =>\n      a.datasourceName < b.datasourceName ? -1 : a.datasourceName > b.datasourceName ? 1 : 0;\n  }\n\n  if (sortOrder === SortOrder.DatasourceAZ) {\n    sortFunc = (a: RichHistoryQuery, b: RichHistoryQuery) =>\n      a.datasourceName < b.datasourceName ? 1 : a.datasourceName > b.datasourceName ? -1 : 0;\n  }\n\n  return array.sort(sortFunc);\n};\n\nexport const RICH_HISTORY_SETTING_KEYS = {\n  retentionPeriod: 'grafana.explore.richHistory.retentionPeriod',\n  starredTabAsFirstTab: 'grafana.explore.richHistory.starredTabAsFirstTab',\n  activeDatasourceOnly: 'grafana.explore.richHistory.activeDatasourceOnly',\n  datasourceFilters: 'grafana.explore.richHistory.datasourceFilters',\n  migrated: 'grafana.explore.richHistory.migrated',\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}