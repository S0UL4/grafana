{"ast":null,"code":"import { NullValueMode } from '../types/data';\nexport function getFlotPairs({\n  xField,\n  yField,\n  nullValueMode\n}) {\n  const vX = xField.values;\n  const vY = yField.values;\n  const length = vX.length;\n\n  if (vY.length !== length) {\n    throw new Error('Unexpected field length');\n  }\n\n  const ignoreNulls = nullValueMode === NullValueMode.Ignore;\n  const nullAsZero = nullValueMode === NullValueMode.AsZero;\n  const pairs = [];\n\n  for (let i = 0; i < length; i++) {\n    const x = vX.get(i);\n    let y = vY.get(i);\n\n    if (y === null) {\n      if (ignoreNulls) {\n        continue;\n      }\n\n      if (nullAsZero) {\n        y = 0;\n      }\n    } // X must be a value\n\n\n    if (x === null) {\n      continue;\n    }\n\n    pairs.push([x, y]);\n  }\n\n  return pairs;\n}\n/**\n * Returns a constant series based on the first value from the provide series.\n * @param seriesData Series\n * @param range Start and end time for the constant series\n */\n\nexport function getFlotPairsConstant(seriesData, range) {\n  if (!range.from || !range.to || !seriesData || seriesData.length === 0) {\n    return [];\n  }\n\n  const from = range.from.valueOf();\n  const to = range.to.valueOf();\n  const value = seriesData[0][1];\n  return [[from, value], [to, value]];\n}","map":{"version":3,"names":["NullValueMode","getFlotPairs","xField","yField","nullValueMode","vX","values","vY","length","Error","ignoreNulls","Ignore","nullAsZero","AsZero","pairs","i","x","get","y","push","getFlotPairsConstant","seriesData","range","from","to","valueOf","value"],"sources":["/home/soula/grafana/packages/grafana-data/src/utils/flotPairs.ts"],"sourcesContent":["import { NullValueMode } from '../types/data';\nimport { Field } from '../types/dataFrame';\nimport { GraphSeriesValue } from '../types/graph';\nimport { TimeRange } from '../types/time';\n\n// Types\n// import { NullValueMode, GraphSeriesValue, Field, TimeRange } from '@grafana/data';\nexport interface FlotPairsOptions {\n  xField: Field;\n  yField: Field;\n  nullValueMode?: NullValueMode;\n}\n\nexport function getFlotPairs({ xField, yField, nullValueMode }: FlotPairsOptions): GraphSeriesValue[][] {\n  const vX = xField.values;\n  const vY = yField.values;\n  const length = vX.length;\n  if (vY.length !== length) {\n    throw new Error('Unexpected field length');\n  }\n\n  const ignoreNulls = nullValueMode === NullValueMode.Ignore;\n  const nullAsZero = nullValueMode === NullValueMode.AsZero;\n\n  const pairs: any[][] = [];\n\n  for (let i = 0; i < length; i++) {\n    const x = vX.get(i);\n    let y = vY.get(i);\n\n    if (y === null) {\n      if (ignoreNulls) {\n        continue;\n      }\n      if (nullAsZero) {\n        y = 0;\n      }\n    }\n\n    // X must be a value\n    if (x === null) {\n      continue;\n    }\n\n    pairs.push([x, y]);\n  }\n  return pairs;\n}\n\n/**\n * Returns a constant series based on the first value from the provide series.\n * @param seriesData Series\n * @param range Start and end time for the constant series\n */\nexport function getFlotPairsConstant(seriesData: GraphSeriesValue[][], range: TimeRange): GraphSeriesValue[][] {\n  if (!range.from || !range.to || !seriesData || seriesData.length === 0) {\n    return [];\n  }\n\n  const from = range.from.valueOf();\n  const to = range.to.valueOf();\n  const value = seriesData[0][1];\n  return [\n    [from, value],\n    [to, value],\n  ];\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,eAA9B;AAaA,OAAO,SAASC,YAAT,CAAsB;EAAEC,MAAF;EAAUC,MAAV;EAAkBC;AAAlB,CAAtB,EAAiG;EACtG,MAAMC,EAAE,GAAGH,MAAM,CAACI,MAAlB;EACA,MAAMC,EAAE,GAAGJ,MAAM,CAACG,MAAlB;EACA,MAAME,MAAM,GAAGH,EAAE,CAACG,MAAlB;;EACA,IAAID,EAAE,CAACC,MAAH,KAAcA,MAAlB,EAA0B;IACxB,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;EACD;;EAED,MAAMC,WAAW,GAAGN,aAAa,KAAKJ,aAAa,CAACW,MAApD;EACA,MAAMC,UAAU,GAAGR,aAAa,KAAKJ,aAAa,CAACa,MAAnD;EAEA,MAAMC,KAAc,GAAG,EAAvB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAApB,EAA4BO,CAAC,EAA7B,EAAiC;IAC/B,MAAMC,CAAC,GAAGX,EAAE,CAACY,GAAH,CAAOF,CAAP,CAAV;IACA,IAAIG,CAAC,GAAGX,EAAE,CAACU,GAAH,CAAOF,CAAP,CAAR;;IAEA,IAAIG,CAAC,KAAK,IAAV,EAAgB;MACd,IAAIR,WAAJ,EAAiB;QACf;MACD;;MACD,IAAIE,UAAJ,EAAgB;QACdM,CAAC,GAAG,CAAJ;MACD;IACF,CAX8B,CAa/B;;;IACA,IAAIF,CAAC,KAAK,IAAV,EAAgB;MACd;IACD;;IAEDF,KAAK,CAACK,IAAN,CAAW,CAACH,CAAD,EAAIE,CAAJ,CAAX;EACD;;EACD,OAAOJ,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASM,oBAAT,CAA8BC,UAA9B,EAAgEC,KAAhE,EAAwG;EAC7G,IAAI,CAACA,KAAK,CAACC,IAAP,IAAe,CAACD,KAAK,CAACE,EAAtB,IAA4B,CAACH,UAA7B,IAA2CA,UAAU,CAACb,MAAX,KAAsB,CAArE,EAAwE;IACtE,OAAO,EAAP;EACD;;EAED,MAAMe,IAAI,GAAGD,KAAK,CAACC,IAAN,CAAWE,OAAX,EAAb;EACA,MAAMD,EAAE,GAAGF,KAAK,CAACE,EAAN,CAASC,OAAT,EAAX;EACA,MAAMC,KAAK,GAAGL,UAAU,CAAC,CAAD,CAAV,CAAc,CAAd,CAAd;EACA,OAAO,CACL,CAACE,IAAD,EAAOG,KAAP,CADK,EAEL,CAACF,EAAD,EAAKE,KAAL,CAFK,CAAP;AAID"},"metadata":{},"sourceType":"module"}