{"ast":null,"code":"var _div;\n\nimport React, { useMemo, useState } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Checkbox, Form, TextArea } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const SaveDashboardForm = ({\n  dashboard,\n  saveModel,\n  options,\n  onSubmit,\n  onCancel,\n  onSuccess,\n  onOptionsChange\n}) => {\n  var _Button;\n\n  const hasTimeChanged = useMemo(() => dashboard.hasTimeChanged(), [dashboard]);\n  const hasVariableChanged = useMemo(() => dashboard.hasVariableValuesChanged(), [dashboard]);\n  const [saving, setSaving] = useState(false);\n  return /*#__PURE__*/_jsx(Form, {\n    onSubmit: async data => {\n      if (!onSubmit) {\n        return;\n      }\n\n      setSaving(true);\n      options = Object.assign({}, options, {\n        message: data.message\n      });\n      const result = await onSubmit(saveModel.clone, options, dashboard);\n\n      if (result.status === 'success') {\n        if (options.saveVariables) {\n          dashboard.resetOriginalVariables();\n        }\n\n        if (options.saveTimerange) {\n          dashboard.resetOriginalTime();\n        }\n\n        onSuccess();\n      } else {\n        setSaving(false);\n      }\n    },\n    children: ({\n      register,\n      errors\n    }) => /*#__PURE__*/_jsxs(Stack, {\n      direction: \"column\",\n      gap: 2,\n      children: [hasTimeChanged && /*#__PURE__*/_jsx(Checkbox, {\n        checked: !!options.saveTimerange,\n        onChange: () => onOptionsChange(Object.assign({}, options, {\n          saveTimerange: !options.saveTimerange\n        })),\n        label: \"Save current time range as dashboard default\",\n        \"aria-label\": selectors.pages.SaveDashboardModal.saveTimerange\n      }), hasVariableChanged && /*#__PURE__*/_jsx(Checkbox, {\n        checked: !!options.saveVariables,\n        onChange: () => onOptionsChange(Object.assign({}, options, {\n          saveVariables: !options.saveVariables\n        })),\n        label: \"Save current variable values as dashboard default\",\n        \"aria-label\": selectors.pages.SaveDashboardModal.saveVariables\n      }), /*#__PURE__*/_jsx(TextArea, Object.assign({}, register('message'), {\n        placeholder: \"Add a note to describe your changes.\",\n        autoFocus: true,\n        rows: 5\n      })), /*#__PURE__*/_jsxs(Stack, {\n        alignItems: \"center\",\n        children: [_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: onCancel,\n          fill: \"outline\",\n          children: \"Cancel\"\n        })), /*#__PURE__*/_jsx(Button, {\n          type: \"submit\",\n          disabled: !saveModel.hasChanges,\n          icon: saving ? 'fa fa-spinner' : undefined,\n          \"aria-label\": selectors.pages.SaveDashboardModal.save,\n          children: \"Save\"\n        }), !saveModel.hasChanges && (_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n          children: \"No changes to save\"\n        })))]\n      })]\n    })\n  });\n};","map":{"version":3,"names":["React","useMemo","useState","selectors","Stack","Button","Checkbox","Form","TextArea","SaveDashboardForm","dashboard","saveModel","options","onSubmit","onCancel","onSuccess","onOptionsChange","hasTimeChanged","hasVariableChanged","hasVariableValuesChanged","saving","setSaving","data","message","result","clone","status","saveVariables","resetOriginalVariables","saveTimerange","resetOriginalTime","register","errors","pages","SaveDashboardModal","hasChanges","undefined","save"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/SaveDashboard/forms/SaveDashboardForm.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Checkbox, Form, TextArea } from '@grafana/ui';\nimport { DashboardModel } from 'app/features/dashboard/state';\n\nimport { SaveDashboardData, SaveDashboardOptions } from '../types';\n\ninterface FormDTO {\n  message: string;\n}\n\ntype Props = {\n  dashboard: DashboardModel; // original\n  saveModel: SaveDashboardData; // already cloned\n  onCancel: () => void;\n  onSuccess: () => void;\n  onSubmit?: (clone: any, options: SaveDashboardOptions, dashboard: DashboardModel) => Promise<any>;\n  options: SaveDashboardOptions;\n  onOptionsChange: (opts: SaveDashboardOptions) => void;\n};\n\nexport const SaveDashboardForm = ({\n  dashboard,\n  saveModel,\n  options,\n  onSubmit,\n  onCancel,\n  onSuccess,\n  onOptionsChange,\n}: Props) => {\n  const hasTimeChanged = useMemo(() => dashboard.hasTimeChanged(), [dashboard]);\n  const hasVariableChanged = useMemo(() => dashboard.hasVariableValuesChanged(), [dashboard]);\n\n  const [saving, setSaving] = useState(false);\n\n  return (\n    <Form\n      onSubmit={async (data: FormDTO) => {\n        if (!onSubmit) {\n          return;\n        }\n        setSaving(true);\n        options = { ...options, message: data.message };\n        const result = await onSubmit(saveModel.clone, options, dashboard);\n        if (result.status === 'success') {\n          if (options.saveVariables) {\n            dashboard.resetOriginalVariables();\n          }\n          if (options.saveTimerange) {\n            dashboard.resetOriginalTime();\n          }\n          onSuccess();\n        } else {\n          setSaving(false);\n        }\n      }}\n    >\n      {({ register, errors }) => (\n        <Stack direction=\"column\" gap={2}>\n          {hasTimeChanged && (\n            <Checkbox\n              checked={!!options.saveTimerange}\n              onChange={() =>\n                onOptionsChange({\n                  ...options,\n                  saveTimerange: !options.saveTimerange,\n                })\n              }\n              label=\"Save current time range as dashboard default\"\n              aria-label={selectors.pages.SaveDashboardModal.saveTimerange}\n            />\n          )}\n          {hasVariableChanged && (\n            <Checkbox\n              checked={!!options.saveVariables}\n              onChange={() =>\n                onOptionsChange({\n                  ...options,\n                  saveVariables: !options.saveVariables,\n                })\n              }\n              label=\"Save current variable values as dashboard default\"\n              aria-label={selectors.pages.SaveDashboardModal.saveVariables}\n            />\n          )}\n\n          <TextArea {...register('message')} placeholder=\"Add a note to describe your changes.\" autoFocus rows={5} />\n\n          <Stack alignItems=\"center\">\n            <Button variant=\"secondary\" onClick={onCancel} fill=\"outline\">\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!saveModel.hasChanges}\n              icon={saving ? 'fa fa-spinner' : undefined}\n              aria-label={selectors.pages.SaveDashboardModal.save}\n            >\n              Save\n            </Button>\n            {!saveModel.hasChanges && <div>No changes to save</div>}\n          </Stack>\n        </Stack>\n      )}\n    </Form>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}