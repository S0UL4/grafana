{"ast":null,"code":"import { GeometryTypeId } from '../style/types';\nexport function getLayerPropertyInfo(features) {\n  const types = new Set();\n  const props = new Set();\n  features.some((feature, idx) => {\n    for (const key of Object.keys(feature.getProperties())) {\n      if (key === 'geometry') {\n        continue;\n      }\n\n      props.add(key);\n      const g = feature.getGeometry();\n\n      if (g) {\n        types.add(g.getType());\n      }\n    }\n\n    return idx > 10; // first 10 items\n  });\n  let geometryType = GeometryTypeId.Any;\n\n  if (types.size === 1) {\n    switch (types.values().next().value) {\n      case 'Point':\n      case 'MultiPoint':\n        geometryType = GeometryTypeId.Point;\n        break;\n\n      case 'Line':\n      case 'MultiLine':\n        geometryType = GeometryTypeId.Line;\n        break;\n\n      case 'Polygon':\n        geometryType = GeometryTypeId.Polygon;\n    }\n  }\n\n  return {\n    geometryType,\n    propertes: Array.from(props.keys()).map(v => ({\n      label: v,\n      value: v\n    }))\n  };\n}\nexport function getUniqueFeatureValues(features, key) {\n  const unique = new Set();\n\n  for (const feature of features) {\n    const v = feature.get(key);\n\n    if (v != null) {\n      unique.add(`${v}`); // always string\n    }\n  }\n\n  const buffer = Array.from(unique);\n  buffer.sort();\n  return buffer;\n}","map":{"version":3,"names":["GeometryTypeId","getLayerPropertyInfo","features","types","Set","props","some","feature","idx","key","Object","keys","getProperties","add","g","getGeometry","getType","geometryType","Any","size","values","next","value","Point","Line","Polygon","propertes","Array","from","map","v","label","getUniqueFeatureValues","unique","get","buffer","sort"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/utils/getFeatures.ts"],"sourcesContent":["import { FeatureLike } from 'ol/Feature';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { GeometryTypeId } from '../style/types';\n\nexport interface LayerContentInfo {\n  geometryType: GeometryTypeId;\n  propertes: Array<SelectableValue<string>>;\n}\n\nexport function getLayerPropertyInfo(features: FeatureLike[]): LayerContentInfo {\n  const types = new Set<string>();\n  const props = new Set<string>();\n  features.some((feature, idx) => {\n    for (const key of Object.keys(feature.getProperties())) {\n      if (key === 'geometry') {\n        continue;\n      }\n      props.add(key);\n      const g = feature.getGeometry();\n      if (g) {\n        types.add(g.getType());\n      }\n    }\n    return idx > 10; // first 10 items\n  });\n\n  let geometryType = GeometryTypeId.Any;\n  if (types.size === 1) {\n    switch (types.values().next().value) {\n      case 'Point':\n      case 'MultiPoint':\n        geometryType = GeometryTypeId.Point;\n        break;\n      case 'Line':\n      case 'MultiLine':\n        geometryType = GeometryTypeId.Line;\n        break;\n      case 'Polygon':\n        geometryType = GeometryTypeId.Polygon;\n    }\n  }\n\n  return {\n    geometryType,\n    propertes: Array.from(props.keys()).map((v) => ({ label: v, value: v })),\n  };\n}\n\nexport function getUniqueFeatureValues(features: FeatureLike[], key: string): string[] {\n  const unique = new Set<string>();\n  for (const feature of features) {\n    const v = feature.get(key);\n    if (v != null) {\n      unique.add(`${v}`); // always string\n    }\n  }\n  const buffer = Array.from(unique);\n  buffer.sort();\n  return buffer;\n}\n"],"mappings":"AAIA,SAASA,cAAT,QAA+B,gBAA/B;AAOA,OAAO,SAASC,oBAAT,CAA8BC,QAA9B,EAAyE;EAC9E,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;EACA,MAAMC,KAAK,GAAG,IAAID,GAAJ,EAAd;EACAF,QAAQ,CAACI,IAAT,CAAc,CAACC,OAAD,EAAUC,GAAV,KAAkB;IAC9B,KAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYJ,OAAO,CAACK,aAAR,EAAZ,CAAlB,EAAwD;MACtD,IAAIH,GAAG,KAAK,UAAZ,EAAwB;QACtB;MACD;;MACDJ,KAAK,CAACQ,GAAN,CAAUJ,GAAV;MACA,MAAMK,CAAC,GAAGP,OAAO,CAACQ,WAAR,EAAV;;MACA,IAAID,CAAJ,EAAO;QACLX,KAAK,CAACU,GAAN,CAAUC,CAAC,CAACE,OAAF,EAAV;MACD;IACF;;IACD,OAAOR,GAAG,GAAG,EAAb,CAX8B,CAWb;EAClB,CAZD;EAcA,IAAIS,YAAY,GAAGjB,cAAc,CAACkB,GAAlC;;EACA,IAAIf,KAAK,CAACgB,IAAN,KAAe,CAAnB,EAAsB;IACpB,QAAQhB,KAAK,CAACiB,MAAN,GAAeC,IAAf,GAAsBC,KAA9B;MACE,KAAK,OAAL;MACA,KAAK,YAAL;QACEL,YAAY,GAAGjB,cAAc,CAACuB,KAA9B;QACA;;MACF,KAAK,MAAL;MACA,KAAK,WAAL;QACEN,YAAY,GAAGjB,cAAc,CAACwB,IAA9B;QACA;;MACF,KAAK,SAAL;QACEP,YAAY,GAAGjB,cAAc,CAACyB,OAA9B;IAVJ;EAYD;;EAED,OAAO;IACLR,YADK;IAELS,SAAS,EAAEC,KAAK,CAACC,IAAN,CAAWvB,KAAK,CAACM,IAAN,EAAX,EAAyBkB,GAAzB,CAA8BC,CAAD,KAAQ;MAAEC,KAAK,EAAED,CAAT;MAAYR,KAAK,EAAEQ;IAAnB,CAAR,CAA7B;EAFN,CAAP;AAID;AAED,OAAO,SAASE,sBAAT,CAAgC9B,QAAhC,EAAyDO,GAAzD,EAAgF;EACrF,MAAMwB,MAAM,GAAG,IAAI7B,GAAJ,EAAf;;EACA,KAAK,MAAMG,OAAX,IAAsBL,QAAtB,EAAgC;IAC9B,MAAM4B,CAAC,GAAGvB,OAAO,CAAC2B,GAAR,CAAYzB,GAAZ,CAAV;;IACA,IAAIqB,CAAC,IAAI,IAAT,EAAe;MACbG,MAAM,CAACpB,GAAP,CAAY,GAAEiB,CAAE,EAAhB,EADa,CACO;IACrB;EACF;;EACD,MAAMK,MAAM,GAAGR,KAAK,CAACC,IAAN,CAAWK,MAAX,CAAf;EACAE,MAAM,CAACC,IAAP;EACA,OAAOD,MAAP;AACD"},"metadata":{},"sourceType":"module"}