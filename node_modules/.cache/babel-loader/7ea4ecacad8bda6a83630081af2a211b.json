{"ast":null,"code":"import { isArray } from 'lodash';\nimport React, { useState } from 'react';\nimport { dataFrameToJSON, toDataFrame, toDataFrameDTO } from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { Alert, CodeEditor } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const RawFrameEditor = ({\n  onChange,\n  query\n}) => {\n  var _query$rawFrameConten;\n\n  const [error, setError] = useState();\n  const [warning, setWarning] = useState();\n\n  const onSaveFrames = rawFrameContent => {\n    try {\n      const json = JSON.parse(rawFrameContent);\n\n      if (isArray(json)) {\n        setError(undefined);\n        setWarning(undefined);\n        onChange(Object.assign({}, query, {\n          rawFrameContent\n        }));\n        return;\n      }\n\n      let data = undefined; // Copy paste from panel json\n\n      if (isArray(json.series) && json.state) {\n        data = json.series.map(v => toDataFrameDTO(toDataFrame(v)));\n      } else {\n        var _v$data;\n\n        // Chek if it is a copy of the raw resuls\n        const v = toDataQueryResponse({\n          data: json\n        });\n\n        if ((_v$data = v.data) !== null && _v$data !== void 0 && _v$data.length && !v.error) {\n          data = v.data.map(f => dataFrameToJSON(f));\n        }\n      }\n\n      if (data) {\n        console.log('Original', json);\n        console.log('Save', data);\n        setError(undefined);\n        setWarning('Converted to direct frame result');\n        onChange(Object.assign({}, query, {\n          rawFrameContent: JSON.stringify(data, null, 2)\n        }));\n        return;\n      }\n\n      setError('Unable to read dataframes in text');\n    } catch (e) {\n      console.log('Error parsing json', e);\n      setError('Enter JSON array of data frames (or raw query results body)');\n      setWarning(undefined);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [error && /*#__PURE__*/_jsx(Alert, {\n      title: error,\n      severity: \"error\"\n    }), warning && /*#__PURE__*/_jsx(Alert, {\n      title: warning,\n      severity: \"warning\"\n    }), /*#__PURE__*/_jsx(CodeEditor, {\n      height: 300,\n      language: \"json\",\n      value: (_query$rawFrameConten = query.rawFrameContent) !== null && _query$rawFrameConten !== void 0 ? _query$rawFrameConten : '[]',\n      onBlur: onSaveFrames,\n      onSave: onSaveFrames,\n      showMiniMap: true,\n      showLineNumbers: true\n    })]\n  });\n};","map":{"version":3,"names":["isArray","React","useState","dataFrameToJSON","toDataFrame","toDataFrameDTO","toDataQueryResponse","Alert","CodeEditor","RawFrameEditor","onChange","query","error","setError","warning","setWarning","onSaveFrames","rawFrameContent","json","JSON","parse","undefined","data","series","state","map","v","length","f","console","log","stringify","e"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/components/RawFrameEditor.tsx"],"sourcesContent":["import { isArray } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { dataFrameToJSON, toDataFrame, toDataFrameDTO } from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { Alert, CodeEditor } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const RawFrameEditor = ({ onChange, query }: EditorProps) => {\n  const [error, setError] = useState<string>();\n  const [warning, setWarning] = useState<string>();\n\n  const onSaveFrames = (rawFrameContent: string) => {\n    try {\n      const json = JSON.parse(rawFrameContent);\n      if (isArray(json)) {\n        setError(undefined);\n        setWarning(undefined);\n        onChange({ ...query, rawFrameContent });\n        return;\n      }\n\n      let data: any = undefined;\n\n      // Copy paste from panel json\n      if (isArray(json.series) && json.state) {\n        data = json.series.map((v: any) => toDataFrameDTO(toDataFrame(v)));\n      } else {\n        // Chek if it is a copy of the raw resuls\n        const v = toDataQueryResponse({ data: json });\n        if (v.data?.length && !v.error) {\n          data = v.data.map((f) => dataFrameToJSON(f));\n        }\n      }\n\n      if (data) {\n        console.log('Original', json);\n        console.log('Save', data);\n        setError(undefined);\n        setWarning('Converted to direct frame result');\n        onChange({ ...query, rawFrameContent: JSON.stringify(data, null, 2) });\n        return;\n      }\n\n      setError('Unable to read dataframes in text');\n    } catch (e) {\n      console.log('Error parsing json', e);\n      setError('Enter JSON array of data frames (or raw query results body)');\n      setWarning(undefined);\n    }\n  };\n\n  return (\n    <>\n      {error && <Alert title={error} severity=\"error\" />}\n      {warning && <Alert title={warning} severity=\"warning\" />}\n      <CodeEditor\n        height={300}\n        language=\"json\"\n        value={query.rawFrameContent ?? '[]'}\n        onBlur={onSaveFrames}\n        onSave={onSaveFrames}\n        showMiniMap={true}\n        showLineNumbers={true}\n      />\n    </>\n  );\n};\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,cAAvC,QAA6D,eAA7D;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,aAAlC;;;;AAIA,OAAO,MAAMC,cAAc,GAAG,CAAC;EAAEC,QAAF;EAAYC;AAAZ,CAAD,KAAsC;EAAA;;EAClE,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,EAAlC;EACA,MAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,EAAtC;;EAEA,MAAMc,YAAY,GAAIC,eAAD,IAA6B;IAChD,IAAI;MACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,eAAX,CAAb;;MACA,IAAIjB,OAAO,CAACkB,IAAD,CAAX,EAAmB;QACjBL,QAAQ,CAACQ,SAAD,CAAR;QACAN,UAAU,CAACM,SAAD,CAAV;QACAX,QAAQ,mBAAMC,KAAN;UAAaM;QAAb,GAAR;QACA;MACD;;MAED,IAAIK,IAAS,GAAGD,SAAhB,CATE,CAWF;;MACA,IAAIrB,OAAO,CAACkB,IAAI,CAACK,MAAN,CAAP,IAAwBL,IAAI,CAACM,KAAjC,EAAwC;QACtCF,IAAI,GAAGJ,IAAI,CAACK,MAAL,CAAYE,GAAZ,CAAiBC,CAAD,IAAYrB,cAAc,CAACD,WAAW,CAACsB,CAAD,CAAZ,CAA1C,CAAP;MACD,CAFD,MAEO;QAAA;;QACL;QACA,MAAMA,CAAC,GAAGpB,mBAAmB,CAAC;UAAEgB,IAAI,EAAEJ;QAAR,CAAD,CAA7B;;QACA,IAAI,WAAAQ,CAAC,CAACJ,IAAF,4CAAQK,MAAR,IAAkB,CAACD,CAAC,CAACd,KAAzB,EAAgC;UAC9BU,IAAI,GAAGI,CAAC,CAACJ,IAAF,CAAOG,GAAP,CAAYG,CAAD,IAAOzB,eAAe,CAACyB,CAAD,CAAjC,CAAP;QACD;MACF;;MAED,IAAIN,IAAJ,EAAU;QACRO,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBZ,IAAxB;QACAW,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBR,IAApB;QACAT,QAAQ,CAACQ,SAAD,CAAR;QACAN,UAAU,CAAC,kCAAD,CAAV;QACAL,QAAQ,mBAAMC,KAAN;UAAaM,eAAe,EAAEE,IAAI,CAACY,SAAL,CAAeT,IAAf,EAAqB,IAArB,EAA2B,CAA3B;QAA9B,GAAR;QACA;MACD;;MAEDT,QAAQ,CAAC,mCAAD,CAAR;IACD,CAhCD,CAgCE,OAAOmB,CAAP,EAAU;MACVH,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCE,CAAlC;MACAnB,QAAQ,CAAC,6DAAD,CAAR;MACAE,UAAU,CAACM,SAAD,CAAV;IACD;EACF,CAtCD;;EAwCA,oBACE;IAAA,WACGT,KAAK,iBAAI,KAAC,KAAD;MAAO,KAAK,EAAEA,KAAd;MAAqB,QAAQ,EAAC;IAA9B,EADZ,EAEGE,OAAO,iBAAI,KAAC,KAAD;MAAO,KAAK,EAAEA,OAAd;MAAuB,QAAQ,EAAC;IAAhC,EAFd,eAGE,KAAC,UAAD;MACE,MAAM,EAAE,GADV;MAEE,QAAQ,EAAC,MAFX;MAGE,KAAK,2BAAEH,KAAK,CAACM,eAAR,yEAA2B,IAHlC;MAIE,MAAM,EAAED,YAJV;MAKE,MAAM,EAAEA,YALV;MAME,WAAW,EAAE,IANf;MAOE,eAAe,EAAE;IAPnB,EAHF;EAAA,EADF;AAeD,CA3DM"},"metadata":{},"sourceType":"module"}