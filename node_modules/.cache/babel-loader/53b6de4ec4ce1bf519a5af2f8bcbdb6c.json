{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { Segment } from '@grafana/ui';\nimport { describeMetric } from '../utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst noWrap = css`\n  white-space: nowrap;\n`;\n\nconst toOption = metric => ({\n  label: describeMetric(metric),\n  value: metric\n});\n\nconst toOptions = metrics => metrics.map(toOption);\n\nexport const MetricPicker = ({\n  options,\n  onChange,\n  className,\n  value\n}) => {\n  const selectedOption = options.find(option => option.id === value);\n  return /*#__PURE__*/_jsx(Segment, {\n    className: cx(className, noWrap),\n    options: toOptions(options),\n    onChange: onChange,\n    placeholder: \"Select Metric\",\n    value: !!selectedOption ? toOption(selectedOption) : undefined\n  });\n};","map":{"version":3,"names":["css","cx","React","Segment","describeMetric","noWrap","toOption","metric","label","value","toOptions","metrics","map","MetricPicker","options","onChange","className","selectedOption","find","option","id","undefined"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/MetricPicker.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Segment } from '@grafana/ui';\n\nimport { describeMetric } from '../utils';\n\nimport { MetricAggregation } from './QueryEditor/MetricAggregationsEditor/aggregations';\n\nconst noWrap = css`\n  white-space: nowrap;\n`;\n\nconst toOption = (metric: MetricAggregation) => ({\n  label: describeMetric(metric),\n  value: metric,\n});\n\nconst toOptions = (metrics: MetricAggregation[]): Array<SelectableValue<MetricAggregation>> => metrics.map(toOption);\n\ninterface Props {\n  options: MetricAggregation[];\n  onChange: (e: SelectableValue<MetricAggregation>) => void;\n  className?: string;\n  value?: string;\n}\n\nexport const MetricPicker = ({ options, onChange, className, value }: Props) => {\n  const selectedOption = options.find((option) => option.id === value);\n\n  return (\n    <Segment\n      className={cx(className, noWrap)}\n      options={toOptions(options)}\n      onChange={onChange}\n      placeholder=\"Select Metric\"\n      value={!!selectedOption ? toOption(selectedOption) : undefined}\n    />\n  );\n};\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,cAAT,QAA+B,UAA/B;;AAIA,MAAMC,MAAM,GAAGL,GAAI;AACnB;AACA,CAFA;;AAIA,MAAMM,QAAQ,GAAIC,MAAD,KAAgC;EAC/CC,KAAK,EAAEJ,cAAc,CAACG,MAAD,CAD0B;EAE/CE,KAAK,EAAEF;AAFwC,CAAhC,CAAjB;;AAKA,MAAMG,SAAS,GAAIC,OAAD,IAA6EA,OAAO,CAACC,GAAR,CAAYN,QAAZ,CAA/F;;AASA,OAAO,MAAMO,YAAY,GAAG,CAAC;EAAEC,OAAF;EAAWC,QAAX;EAAqBC,SAArB;EAAgCP;AAAhC,CAAD,KAAoD;EAC9E,MAAMQ,cAAc,GAAGH,OAAO,CAACI,IAAR,CAAcC,MAAD,IAAYA,MAAM,CAACC,EAAP,KAAcX,KAAvC,CAAvB;EAEA,oBACE,KAAC,OAAD;IACE,SAAS,EAAER,EAAE,CAACe,SAAD,EAAYX,MAAZ,CADf;IAEE,OAAO,EAAEK,SAAS,CAACI,OAAD,CAFpB;IAGE,QAAQ,EAAEC,QAHZ;IAIE,WAAW,EAAC,eAJd;IAKE,KAAK,EAAE,CAAC,CAACE,cAAF,GAAmBX,QAAQ,CAACW,cAAD,CAA3B,GAA8CI;EALvD,EADF;AASD,CAZM"},"metadata":{},"sourceType":"module"}