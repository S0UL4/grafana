{"ast":null,"code":"import React, { useCallback, useEffect, useRef } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const NetworkGraph = ({\n  nodes,\n  edges,\n  direction,\n  width,\n  height,\n  onDoubleClick\n}) => {\n  const network = useRef(null);\n  const ref = useRef(null);\n  const onNodeDoubleClick = useCallback(params => {\n    if (onDoubleClick) {\n      onDoubleClick(params.nodes[0]);\n    }\n  }, [onDoubleClick]);\n  useEffect(() => {\n    const createNetwork = async () => {\n      var _network$current;\n\n      // @ts-ignore no types yet for visjs-network\n      const visJs = await import(\n      /* webpackChunkName: \"visjs-network\" */\n      'visjs-network');\n      const data = {\n        nodes: toVisNetworkNodes(visJs, nodes),\n        edges: toVisNetworkEdges(visJs, edges)\n      };\n      const options = {\n        width: '100%',\n        height: '100%',\n        autoResize: true,\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n            enabled: true,\n            direction: direction !== null && direction !== void 0 ? direction : 'DU',\n            sortMethod: 'directed'\n          }\n        },\n        interaction: {\n          navigationButtons: true,\n          dragNodes: false\n        }\n      };\n      network.current = new visJs.Network(ref.current, data, options);\n      (_network$current = network.current) === null || _network$current === void 0 ? void 0 : _network$current.on('doubleClick', onNodeDoubleClick);\n    };\n\n    createNetwork();\n    return () => {\n      // unsubscribe event handlers\n      if (network.current) {\n        network.current.off('doubleClick');\n      }\n    };\n  }, [direction, edges, nodes, onNodeDoubleClick]);\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      ref: ref,\n      style: {\n        width: width !== null && width !== void 0 ? width : '100%',\n        height: height !== null && height !== void 0 ? height : '60vh'\n      }\n    })\n  });\n};\n\nfunction toVisNetworkNodes(visJs, nodes) {\n  const nodesWithStyle = nodes.map(node => Object.assign({}, node, {\n    shape: 'box'\n  }));\n  return new visJs.DataSet(nodesWithStyle);\n}\n\nfunction toVisNetworkEdges(visJs, edges) {\n  const edgesWithStyle = edges.map(edge => Object.assign({}, edge, {\n    arrows: 'to',\n    dashes: true\n  }));\n  return new visJs.DataSet(edgesWithStyle);\n}","map":{"version":3,"names":["React","useCallback","useEffect","useRef","NetworkGraph","nodes","edges","direction","width","height","onDoubleClick","network","ref","onNodeDoubleClick","params","createNetwork","visJs","data","toVisNetworkNodes","toVisNetworkEdges","options","autoResize","layout","improvedLayout","hierarchical","enabled","sortMethod","interaction","navigationButtons","dragNodes","current","Network","on","off","nodesWithStyle","map","node","shape","DataSet","edgesWithStyle","edge","arrows","dashes"],"sources":["/home/soula/grafana/public/app/features/variables/inspect/NetworkGraph.tsx"],"sourcesContent":["import React, { FC, useCallback, useEffect, useRef } from 'react';\n\nimport { GraphEdge, GraphNode } from './utils';\n\ninterface OwnProps {\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n  direction?: 'UD' | 'DU' | 'LR' | 'RL';\n  onDoubleClick?: (node: string) => void;\n  width?: string;\n  height?: string;\n}\n\ninterface ConnectedProps {}\n\ninterface DispatchProps {}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport const NetworkGraph: FC<Props> = ({ nodes, edges, direction, width, height, onDoubleClick }) => {\n  const network = useRef<any>(null);\n  const ref = useRef(null);\n\n  const onNodeDoubleClick = useCallback(\n    (params: { nodes: string[] }) => {\n      if (onDoubleClick) {\n        onDoubleClick(params.nodes[0]);\n      }\n    },\n    [onDoubleClick]\n  );\n\n  useEffect(() => {\n    const createNetwork = async () => {\n      // @ts-ignore no types yet for visjs-network\n      const visJs = await import(/* webpackChunkName: \"visjs-network\" */ 'visjs-network');\n      const data = {\n        nodes: toVisNetworkNodes(visJs, nodes),\n        edges: toVisNetworkEdges(visJs, edges),\n      };\n      const options = {\n        width: '100%',\n        height: '100%',\n        autoResize: true,\n        layout: {\n          improvedLayout: true,\n          hierarchical: {\n            enabled: true,\n            direction: direction ?? 'DU',\n            sortMethod: 'directed',\n          },\n        },\n        interaction: {\n          navigationButtons: true,\n          dragNodes: false,\n        },\n      };\n\n      network.current = new visJs.Network(ref.current, data, options);\n      network.current?.on('doubleClick', onNodeDoubleClick);\n    };\n\n    createNetwork();\n\n    return () => {\n      // unsubscribe event handlers\n      if (network.current) {\n        network.current.off('doubleClick');\n      }\n    };\n  }, [direction, edges, nodes, onNodeDoubleClick]);\n\n  return (\n    <div>\n      <div ref={ref} style={{ width: width ?? '100%', height: height ?? '60vh' }} />\n    </div>\n  );\n};\n\nfunction toVisNetworkNodes(visJs: any, nodes: GraphNode[]): any[] {\n  const nodesWithStyle: any[] = nodes.map((node) => ({\n    ...node,\n    shape: 'box',\n  }));\n  return new visJs.DataSet(nodesWithStyle);\n}\n\nfunction toVisNetworkEdges(visJs: any, edges: GraphEdge[]): any[] {\n  const edgesWithStyle: any[] = edges.map((edge) => ({ ...edge, arrows: 'to', dashes: true }));\n  return new visJs.DataSet(edgesWithStyle);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}