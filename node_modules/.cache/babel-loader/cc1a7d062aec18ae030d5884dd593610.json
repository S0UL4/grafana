{"ast":null,"code":"import UrlBuilder from '../azure_monitor/url_builder';\nimport { setKustoQuery } from '../components/LogsQueryEditor/setQueryValue';\nimport { appendDimensionFilter, setTimeGrain as setMetricsTimeGrain } from '../components/MetricsQueryEditor/setQueryValue';\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureQueryType } from '../types';\nconst OLD_DEFAULT_DROPDOWN_VALUE = 'select';\nexport default function migrateQuery(query) {\n  let workingQuery = query; // The old angular controller also had a `migrateApplicationInsightsKeys` migraiton that\n  // migrated old properties to other properties that still do not appear to be used anymore, so\n  // we decided to not include that migration anymore\n  // See https://github.com/grafana/grafana/blob/a6a09add/public/app/plugins/datasource/grafana-azure-monitor-datasource/query_ctrl.ts#L269-L288\n\n  workingQuery = migrateTimeGrains(workingQuery);\n  workingQuery = migrateLogAnalyticsToFromTimes(workingQuery);\n  workingQuery = migrateToDefaultNamespace(workingQuery);\n  workingQuery = migrateDimensionToDimensionFilter(workingQuery);\n  workingQuery = migrateResourceUri(workingQuery);\n  workingQuery = migrateDimensionFilterToArray(workingQuery);\n  return workingQuery;\n}\n\nfunction migrateTimeGrains(query) {\n  var _workingQuery$azureMo;\n\n  let workingQuery = query;\n\n  if ((_workingQuery$azureMo = workingQuery.azureMonitor) !== null && _workingQuery$azureMo !== void 0 && _workingQuery$azureMo.timeGrainUnit && workingQuery.azureMonitor.timeGrain !== 'auto') {\n    var _workingQuery$azureMo2, _workingQuery$azureMo3;\n\n    const newTimeGrain = TimegrainConverter.createISO8601Duration((_workingQuery$azureMo2 = workingQuery.azureMonitor.timeGrain) !== null && _workingQuery$azureMo2 !== void 0 ? _workingQuery$azureMo2 : 'auto', workingQuery.azureMonitor.timeGrainUnit);\n    workingQuery = setMetricsTimeGrain(workingQuery, newTimeGrain);\n    (_workingQuery$azureMo3 = workingQuery.azureMonitor) === null || _workingQuery$azureMo3 === void 0 ? true : delete _workingQuery$azureMo3.timeGrainUnit;\n  }\n\n  return workingQuery;\n}\n\nfunction migrateLogAnalyticsToFromTimes(query) {\n  var _workingQuery$azureLo, _workingQuery$azureLo2, _workingQuery$azureLo3, _workingQuery$azureLo4;\n\n  let workingQuery = query;\n\n  if ((_workingQuery$azureLo = workingQuery.azureLogAnalytics) !== null && _workingQuery$azureLo !== void 0 && (_workingQuery$azureLo2 = _workingQuery$azureLo.query) !== null && _workingQuery$azureLo2 !== void 0 && _workingQuery$azureLo2.match(/\\$__from\\s/gi)) {\n    workingQuery = setKustoQuery(workingQuery, workingQuery.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() '));\n  }\n\n  if ((_workingQuery$azureLo3 = workingQuery.azureLogAnalytics) !== null && _workingQuery$azureLo3 !== void 0 && (_workingQuery$azureLo4 = _workingQuery$azureLo3.query) !== null && _workingQuery$azureLo4 !== void 0 && _workingQuery$azureLo4.match(/\\$__to\\s/gi)) {\n    workingQuery = setKustoQuery(workingQuery, workingQuery.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() '));\n  }\n\n  return workingQuery;\n}\n\nfunction migrateToDefaultNamespace(query) {\n  var _query$azureMonitor, _query$azureMonitor2;\n\n  const haveMetricNamespace = ((_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.metricNamespace) && query.azureMonitor.metricNamespace !== OLD_DEFAULT_DROPDOWN_VALUE;\n\n  if (!haveMetricNamespace && (_query$azureMonitor2 = query.azureMonitor) !== null && _query$azureMonitor2 !== void 0 && _query$azureMonitor2.metricDefinition) {\n    return Object.assign({}, query, {\n      azureMonitor: Object.assign({}, query.azureMonitor, {\n        metricNamespace: query.azureMonitor.metricDefinition\n      })\n    });\n  }\n\n  return query;\n}\n\nfunction migrateDimensionToDimensionFilter(query) {\n  var _workingQuery$azureMo4;\n\n  let workingQuery = query;\n  const oldDimension = (_workingQuery$azureMo4 = workingQuery.azureMonitor) === null || _workingQuery$azureMo4 === void 0 ? void 0 : _workingQuery$azureMo4.dimension;\n\n  if (oldDimension && oldDimension !== 'None') {\n    var _workingQuery$azureMo5;\n\n    workingQuery = appendDimensionFilter(workingQuery, oldDimension, 'eq', [((_workingQuery$azureMo5 = workingQuery.azureMonitor) === null || _workingQuery$azureMo5 === void 0 ? void 0 : _workingQuery$azureMo5.dimensionFilter) || '']);\n  }\n\n  return workingQuery;\n} // Azure Monitor metric queries prior to Grafana version 9 did not include a `resourceUri`.\n// The resourceUri was previously constructed with the subscription id, resource group,\n// metric definition (a.k.a. resource type), and the resource name.\n\n\nfunction migrateResourceUri(query) {\n  const azureMonitorQuery = query.azureMonitor;\n\n  if (!azureMonitorQuery || azureMonitorQuery.resourceUri) {\n    return query;\n  }\n\n  const {\n    subscription\n  } = query;\n  const {\n    resourceGroup,\n    metricDefinition,\n    resourceName\n  } = azureMonitorQuery;\n\n  if (!(subscription && resourceGroup && metricDefinition && resourceName)) {\n    return query;\n  }\n\n  const resourceUri = UrlBuilder.buildResourceUri(subscription, resourceGroup, metricDefinition, resourceName);\n  return Object.assign({}, query, {\n    azureMonitor: Object.assign({}, azureMonitorQuery, {\n      resourceUri\n    })\n  });\n}\n\nfunction migrateDimensionFilterToArray(query) {\n  const azureMonitorQuery = query.azureMonitor;\n\n  if (!azureMonitorQuery) {\n    return query;\n  }\n\n  const newFilters = [];\n  const dimensionFilters = azureMonitorQuery.dimensionFilters;\n\n  if (dimensionFilters && dimensionFilters.length > 0) {\n    dimensionFilters.forEach(filter => {\n      const staticProps = {\n        dimension: filter.dimension,\n        operator: filter.operator\n      };\n\n      if (!filter.filters && filter.filter) {\n        newFilters.push(Object.assign({}, staticProps, {\n          filters: [filter.filter]\n        }));\n      } else {\n        let hasFilter = false;\n\n        if (filter.filters && filter.filter) {\n          for (const oldFilter of filter.filters) {\n            if (filter.filter === oldFilter) {\n              hasFilter = true;\n              break;\n            }\n          }\n\n          if (!hasFilter && filter.filter !== '*') {\n            filter.filters.push(filter.filter);\n          }\n\n          newFilters.push(Object.assign({}, staticProps, {\n            filters: filter.filters\n          }));\n        }\n      }\n    });\n\n    if (newFilters.length > 0) {\n      return Object.assign({}, query, {\n        azureMonitor: Object.assign({}, azureMonitorQuery, {\n          dimensionFilters: newFilters\n        })\n      });\n    }\n  }\n\n  return query;\n} // datasource.ts also contains some migrations, which have been moved to here. Unsure whether\n// they should also do all the other migrations...\n\n\nexport function datasourceMigrations(query) {\n  let workingQuery = query;\n\n  if (!workingQuery.queryType) {\n    workingQuery = Object.assign({}, workingQuery, {\n      queryType: AzureQueryType.AzureMonitor\n    });\n  }\n\n  if (workingQuery.queryType === AzureQueryType.AzureMonitor && workingQuery.azureMonitor) {\n    workingQuery = migrateDimensionToDimensionFilter(workingQuery);\n    workingQuery = migrateResourceUri(workingQuery);\n    workingQuery = migrateDimensionFilterToArray(workingQuery);\n  }\n\n  return workingQuery;\n}","map":{"version":3,"names":["UrlBuilder","setKustoQuery","appendDimensionFilter","setTimeGrain","setMetricsTimeGrain","TimegrainConverter","AzureQueryType","OLD_DEFAULT_DROPDOWN_VALUE","migrateQuery","query","workingQuery","migrateTimeGrains","migrateLogAnalyticsToFromTimes","migrateToDefaultNamespace","migrateDimensionToDimensionFilter","migrateResourceUri","migrateDimensionFilterToArray","azureMonitor","timeGrainUnit","timeGrain","newTimeGrain","createISO8601Duration","azureLogAnalytics","match","replace","haveMetricNamespace","metricNamespace","metricDefinition","oldDimension","dimension","dimensionFilter","azureMonitorQuery","resourceUri","subscription","resourceGroup","resourceName","buildResourceUri","newFilters","dimensionFilters","length","forEach","filter","staticProps","operator","filters","push","hasFilter","oldFilter","datasourceMigrations","queryType","AzureMonitor"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/migrateQuery.ts"],"sourcesContent":["import UrlBuilder from '../azure_monitor/url_builder';\nimport { setKustoQuery } from '../components/LogsQueryEditor/setQueryValue';\nimport {\n  appendDimensionFilter,\n  setTimeGrain as setMetricsTimeGrain,\n} from '../components/MetricsQueryEditor/setQueryValue';\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureMetricDimension, AzureMonitorQuery, AzureQueryType } from '../types';\n\nconst OLD_DEFAULT_DROPDOWN_VALUE = 'select';\n\nexport default function migrateQuery(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  // The old angular controller also had a `migrateApplicationInsightsKeys` migraiton that\n  // migrated old properties to other properties that still do not appear to be used anymore, so\n  // we decided to not include that migration anymore\n  // See https://github.com/grafana/grafana/blob/a6a09add/public/app/plugins/datasource/grafana-azure-monitor-datasource/query_ctrl.ts#L269-L288\n\n  workingQuery = migrateTimeGrains(workingQuery);\n  workingQuery = migrateLogAnalyticsToFromTimes(workingQuery);\n  workingQuery = migrateToDefaultNamespace(workingQuery);\n  workingQuery = migrateDimensionToDimensionFilter(workingQuery);\n  workingQuery = migrateResourceUri(workingQuery);\n  workingQuery = migrateDimensionFilterToArray(workingQuery);\n\n  return workingQuery;\n}\n\nfunction migrateTimeGrains(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureMonitor?.timeGrainUnit && workingQuery.azureMonitor.timeGrain !== 'auto') {\n    const newTimeGrain = TimegrainConverter.createISO8601Duration(\n      workingQuery.azureMonitor.timeGrain ?? 'auto',\n      workingQuery.azureMonitor.timeGrainUnit\n    );\n    workingQuery = setMetricsTimeGrain(workingQuery, newTimeGrain);\n\n    delete workingQuery.azureMonitor?.timeGrainUnit;\n  }\n\n  return workingQuery;\n}\n\nfunction migrateLogAnalyticsToFromTimes(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (workingQuery.azureLogAnalytics?.query?.match(/\\$__from\\s/gi)) {\n    workingQuery = setKustoQuery(\n      workingQuery,\n      workingQuery.azureLogAnalytics.query.replace(/\\$__from\\s/gi, '$__timeFrom() ')\n    );\n  }\n\n  if (workingQuery.azureLogAnalytics?.query?.match(/\\$__to\\s/gi)) {\n    workingQuery = setKustoQuery(\n      workingQuery,\n      workingQuery.azureLogAnalytics.query.replace(/\\$__to\\s/gi, '$__timeTo() ')\n    );\n  }\n\n  return workingQuery;\n}\n\nfunction migrateToDefaultNamespace(query: AzureMonitorQuery): AzureMonitorQuery {\n  const haveMetricNamespace =\n    query.azureMonitor?.metricNamespace && query.azureMonitor.metricNamespace !== OLD_DEFAULT_DROPDOWN_VALUE;\n\n  if (!haveMetricNamespace && query.azureMonitor?.metricDefinition) {\n    return {\n      ...query,\n      azureMonitor: {\n        ...query.azureMonitor,\n        metricNamespace: query.azureMonitor.metricDefinition,\n      },\n    };\n  }\n\n  return query;\n}\n\nfunction migrateDimensionToDimensionFilter(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  const oldDimension = workingQuery.azureMonitor?.dimension;\n  if (oldDimension && oldDimension !== 'None') {\n    workingQuery = appendDimensionFilter(workingQuery, oldDimension, 'eq', [\n      workingQuery.azureMonitor?.dimensionFilter || '',\n    ]);\n  }\n\n  return workingQuery;\n}\n\n// Azure Monitor metric queries prior to Grafana version 9 did not include a `resourceUri`.\n// The resourceUri was previously constructed with the subscription id, resource group,\n// metric definition (a.k.a. resource type), and the resource name.\nfunction migrateResourceUri(query: AzureMonitorQuery): AzureMonitorQuery {\n  const azureMonitorQuery = query.azureMonitor;\n\n  if (!azureMonitorQuery || azureMonitorQuery.resourceUri) {\n    return query;\n  }\n\n  const { subscription } = query;\n  const { resourceGroup, metricDefinition, resourceName } = azureMonitorQuery;\n  if (!(subscription && resourceGroup && metricDefinition && resourceName)) {\n    return query;\n  }\n\n  const resourceUri = UrlBuilder.buildResourceUri(subscription, resourceGroup, metricDefinition, resourceName);\n\n  return {\n    ...query,\n    azureMonitor: {\n      ...azureMonitorQuery,\n      resourceUri,\n    },\n  };\n}\n\nfunction migrateDimensionFilterToArray(query: AzureMonitorQuery): AzureMonitorQuery {\n  const azureMonitorQuery = query.azureMonitor;\n\n  if (!azureMonitorQuery) {\n    return query;\n  }\n\n  const newFilters: AzureMetricDimension[] = [];\n  const dimensionFilters = azureMonitorQuery.dimensionFilters;\n  if (dimensionFilters && dimensionFilters.length > 0) {\n    dimensionFilters.forEach((filter) => {\n      const staticProps = { dimension: filter.dimension, operator: filter.operator };\n      if (!filter.filters && filter.filter) {\n        newFilters.push({ ...staticProps, filters: [filter.filter] });\n      } else {\n        let hasFilter = false;\n        if (filter.filters && filter.filter) {\n          for (const oldFilter of filter.filters) {\n            if (filter.filter === oldFilter) {\n              hasFilter = true;\n              break;\n            }\n          }\n          if (!hasFilter && filter.filter !== '*') {\n            filter.filters.push(filter.filter);\n          }\n          newFilters.push({ ...staticProps, filters: filter.filters });\n        }\n      }\n    });\n    if (newFilters.length > 0) {\n      return { ...query, azureMonitor: { ...azureMonitorQuery, dimensionFilters: newFilters } };\n    }\n  }\n  return query;\n}\n\n// datasource.ts also contains some migrations, which have been moved to here. Unsure whether\n// they should also do all the other migrations...\nexport function datasourceMigrations(query: AzureMonitorQuery): AzureMonitorQuery {\n  let workingQuery = query;\n\n  if (!workingQuery.queryType) {\n    workingQuery = {\n      ...workingQuery,\n      queryType: AzureQueryType.AzureMonitor,\n    };\n  }\n\n  if (workingQuery.queryType === AzureQueryType.AzureMonitor && workingQuery.azureMonitor) {\n    workingQuery = migrateDimensionToDimensionFilter(workingQuery);\n    workingQuery = migrateResourceUri(workingQuery);\n    workingQuery = migrateDimensionFilterToArray(workingQuery);\n  }\n\n  return workingQuery;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}