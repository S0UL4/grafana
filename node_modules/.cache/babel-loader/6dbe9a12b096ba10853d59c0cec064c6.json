{"ast":null,"code":"var _Icon, _p, _thead;\n\nimport React, { useCallback, useState } from 'react';\nimport { useAsync, useDebounce } from 'react-use';\nimport { Button, Icon, Input, Modal, useStyles } from '@grafana/ui';\nimport { getConnectedDashboards } from '../../state/api';\nimport { getModalStyles } from '../../styles';\nimport { usePanelSave } from '../../utils/usePanelSave';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const SaveLibraryPanelModal = ({\n  panel,\n  folderId,\n  isUnsavedPrompt,\n  onDismiss,\n  onConfirm,\n  onDiscard\n}) => {\n  const [searchString, setSearchString] = useState('');\n  const dashState = useAsync(async () => {\n    const searchHits = await getConnectedDashboards(panel.libraryPanel.uid);\n\n    if (searchHits.length > 0) {\n      return searchHits.map(dash => dash.title);\n    }\n\n    return [];\n  }, [panel.libraryPanel.uid]);\n  const [filteredDashboards, setFilteredDashboards] = useState([]);\n  useDebounce(() => {\n    if (!dashState.value) {\n      return setFilteredDashboards([]);\n    }\n\n    return setFilteredDashboards(dashState.value.filter(dashName => dashName.toLowerCase().includes(searchString.toLowerCase())));\n  }, 300, [dashState.value, searchString]);\n  const {\n    saveLibraryPanel\n  } = usePanelSave();\n  const styles = useStyles(getModalStyles);\n  const discardAndClose = useCallback(() => {\n    onDiscard();\n  }, [onDiscard]);\n  const title = isUnsavedPrompt ? 'Unsaved library panel changes' : 'Save library panel';\n  return /*#__PURE__*/_jsx(Modal, {\n    title: title,\n    icon: \"save\",\n    onDismiss: onDismiss,\n    isOpen: true,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsxs(\"p\", {\n        className: styles.textInfo,\n        children: ['This update will affect ', /*#__PURE__*/_jsxs(\"strong\", {\n          children: [panel.libraryPanel.meta.connectedDashboards, ' ', panel.libraryPanel.meta.connectedDashboards === 1 ? 'dashboard' : 'dashboards', \".\"]\n        }), \"The following dashboards using the panel will be affected:\"]\n      }), /*#__PURE__*/_jsx(Input, {\n        className: styles.dashboardSearch,\n        prefix: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n          name: \"search\"\n        })),\n        placeholder: \"Search affected dashboards\",\n        value: searchString,\n        onChange: e => setSearchString(e.currentTarget.value)\n      }), dashState.loading ? _p || (_p = /*#__PURE__*/_jsx(\"p\", {\n        children: \"Loading connected dashboards...\"\n      })) : /*#__PURE__*/_jsxs(\"table\", {\n        className: styles.myTable,\n        children: [_thead || (_thead = /*#__PURE__*/_jsx(\"thead\", {\n          children: /*#__PURE__*/_jsx(\"tr\", {\n            children: /*#__PURE__*/_jsx(\"th\", {\n              children: \"Dashboard name\"\n            })\n          })\n        })), /*#__PURE__*/_jsx(\"tbody\", {\n          children: filteredDashboards.map((dashName, i) => /*#__PURE__*/_jsx(\"tr\", {\n            children: /*#__PURE__*/_jsx(\"td\", {\n              children: dashName\n            })\n          }, `dashrow-${i}`))\n        })]\n      }), /*#__PURE__*/_jsxs(Modal.ButtonRow, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: onDismiss,\n          fill: \"outline\",\n          children: \"Cancel\"\n        }), isUnsavedPrompt && /*#__PURE__*/_jsx(Button, {\n          variant: \"destructive\",\n          onClick: discardAndClose,\n          children: \"Discard\"\n        }), /*#__PURE__*/_jsx(Button, {\n          onClick: () => {\n            saveLibraryPanel(panel, folderId).then(() => {\n              onConfirm();\n            });\n          },\n          children: \"Update all\"\n        })]\n      })]\n    })\n  });\n};","map":{"version":3,"names":["React","useCallback","useState","useAsync","useDebounce","Button","Icon","Input","Modal","useStyles","getConnectedDashboards","getModalStyles","usePanelSave","SaveLibraryPanelModal","panel","folderId","isUnsavedPrompt","onDismiss","onConfirm","onDiscard","searchString","setSearchString","dashState","searchHits","libraryPanel","uid","length","map","dash","title","filteredDashboards","setFilteredDashboards","value","filter","dashName","toLowerCase","includes","saveLibraryPanel","styles","discardAndClose","textInfo","meta","connectedDashboards","dashboardSearch","e","currentTarget","loading","myTable","i","then"],"sources":["/home/soula/grafana/public/app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal.tsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { useAsync, useDebounce } from 'react-use';\n\nimport { Button, Icon, Input, Modal, useStyles } from '@grafana/ui';\n\nimport { getConnectedDashboards } from '../../state/api';\nimport { getModalStyles } from '../../styles';\nimport { PanelModelWithLibraryPanel } from '../../types';\nimport { usePanelSave } from '../../utils/usePanelSave';\n\ninterface Props {\n  panel: PanelModelWithLibraryPanel;\n  folderId: number;\n  isUnsavedPrompt?: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n  onDiscard: () => void;\n}\n\nexport const SaveLibraryPanelModal: React.FC<Props> = ({\n  panel,\n  folderId,\n  isUnsavedPrompt,\n  onDismiss,\n  onConfirm,\n  onDiscard,\n}) => {\n  const [searchString, setSearchString] = useState('');\n  const dashState = useAsync(async () => {\n    const searchHits = await getConnectedDashboards(panel.libraryPanel.uid);\n    if (searchHits.length > 0) {\n      return searchHits.map((dash) => dash.title);\n    }\n\n    return [];\n  }, [panel.libraryPanel.uid]);\n\n  const [filteredDashboards, setFilteredDashboards] = useState<string[]>([]);\n  useDebounce(\n    () => {\n      if (!dashState.value) {\n        return setFilteredDashboards([]);\n      }\n\n      return setFilteredDashboards(\n        dashState.value.filter((dashName) => dashName.toLowerCase().includes(searchString.toLowerCase()))\n      );\n    },\n    300,\n    [dashState.value, searchString]\n  );\n\n  const { saveLibraryPanel } = usePanelSave();\n  const styles = useStyles(getModalStyles);\n  const discardAndClose = useCallback(() => {\n    onDiscard();\n  }, [onDiscard]);\n\n  const title = isUnsavedPrompt ? 'Unsaved library panel changes' : 'Save library panel';\n\n  return (\n    <Modal title={title} icon=\"save\" onDismiss={onDismiss} isOpen={true}>\n      <div>\n        <p className={styles.textInfo}>\n          {'This update will affect '}\n          <strong>\n            {panel.libraryPanel.meta.connectedDashboards}{' '}\n            {panel.libraryPanel.meta.connectedDashboards === 1 ? 'dashboard' : 'dashboards'}.\n          </strong>\n          The following dashboards using the panel will be affected:\n        </p>\n        <Input\n          className={styles.dashboardSearch}\n          prefix={<Icon name=\"search\" />}\n          placeholder=\"Search affected dashboards\"\n          value={searchString}\n          onChange={(e) => setSearchString(e.currentTarget.value)}\n        />\n        {dashState.loading ? (\n          <p>Loading connected dashboards...</p>\n        ) : (\n          <table className={styles.myTable}>\n            <thead>\n              <tr>\n                <th>Dashboard name</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredDashboards.map((dashName, i) => (\n                <tr key={`dashrow-${i}`}>\n                  <td>{dashName}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n            Cancel\n          </Button>\n          {isUnsavedPrompt && (\n            <Button variant=\"destructive\" onClick={discardAndClose}>\n              Discard\n            </Button>\n          )}\n          <Button\n            onClick={() => {\n              saveLibraryPanel(panel, folderId).then(() => {\n                onConfirm();\n              });\n            }}\n          >\n            Update all\n          </Button>\n        </Modal.ButtonRow>\n      </div>\n    </Modal>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}