{"ast":null,"code":"import React from 'react';\nimport { DataTransformerID } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, Select } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { extractFieldsTransformer } from './extractFields';\nimport { fieldExtractors } from './fieldExtractors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst fieldNamePickerSettings = {\n  settings: {\n    width: 30,\n    placeholderText: 'Select field'\n  },\n  name: '',\n  id: '',\n  editor: () => null\n};\nexport const extractFieldsTransformerEditor = ({\n  input,\n  options,\n  onChange\n}) => {\n  var _options$source, _options$replace;\n\n  const onPickSourceField = source => {\n    onChange(Object.assign({}, options, {\n      source\n    }));\n  };\n\n  const onFormatChange = format => {\n    onChange(Object.assign({}, options, {\n      format: format === null || format === void 0 ? void 0 : format.value\n    }));\n  };\n\n  const onToggleReplace = () => {\n    onChange(Object.assign({}, options, {\n      replace: !options.replace\n    }));\n  };\n\n  const format = fieldExtractors.selectOptions(options.format ? [options.format] : undefined);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: 'Source',\n        labelWidth: 16,\n        children: /*#__PURE__*/_jsx(FieldNamePicker, {\n          context: {\n            data: input\n          },\n          value: (_options$source = options.source) !== null && _options$source !== void 0 ? _options$source : '',\n          onChange: onPickSourceField,\n          item: fieldNamePickerSettings\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: 'Format',\n        labelWidth: 16,\n        children: /*#__PURE__*/_jsx(Select, {\n          value: format.current[0],\n          options: format.options,\n          onChange: onFormatChange,\n          width: 24,\n          placeholder: 'Auto'\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: 'Replace all fields',\n        labelWidth: 16,\n        children: /*#__PURE__*/_jsx(InlineSwitch, {\n          value: (_options$replace = options.replace) !== null && _options$replace !== void 0 ? _options$replace : false,\n          onChange: onToggleReplace\n        })\n      })\n    })]\n  });\n};\nexport const extractFieldsTransformRegistryItem = {\n  id: DataTransformerID.extractFields,\n  editor: extractFieldsTransformerEditor,\n  transformation: extractFieldsTransformer,\n  name: 'Extract fields',\n  description: `Parse fields from content (JSON, labels, etc)`\n};","map":{"version":3,"names":["React","DataTransformerID","InlineField","InlineFieldRow","InlineSwitch","Select","FieldNamePicker","extractFieldsTransformer","fieldExtractors","fieldNamePickerSettings","settings","width","placeholderText","name","id","editor","extractFieldsTransformerEditor","input","options","onChange","onPickSourceField","source","onFormatChange","format","value","onToggleReplace","replace","selectOptions","undefined","data","current","extractFieldsTransformRegistryItem","extractFields","transformation","description"],"sources":["/home/soula/grafana/public/app/features/transformers/extractFields/ExtractFieldsTransformerEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport {\n  DataTransformerID,\n  FieldNamePickerConfigSettings,\n  SelectableValue,\n  StandardEditorsRegistryItem,\n  TransformerRegistryItem,\n  TransformerUIProps,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, Select } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\n\nimport { ExtractFieldsOptions, extractFieldsTransformer } from './extractFields';\nimport { FieldExtractorID, fieldExtractors } from './fieldExtractors';\n\nconst fieldNamePickerSettings: StandardEditorsRegistryItem<string, FieldNamePickerConfigSettings> = {\n  settings: {\n    width: 30,\n    placeholderText: 'Select field',\n  },\n  name: '',\n  id: '',\n  editor: () => null,\n};\n\nexport const extractFieldsTransformerEditor: React.FC<TransformerUIProps<ExtractFieldsOptions>> = ({\n  input,\n  options,\n  onChange,\n}) => {\n  const onPickSourceField = (source?: string) => {\n    onChange({\n      ...options,\n      source,\n    });\n  };\n\n  const onFormatChange = (format?: SelectableValue<FieldExtractorID>) => {\n    onChange({\n      ...options,\n      format: format?.value,\n    });\n  };\n\n  const onToggleReplace = () => {\n    onChange({\n      ...options,\n      replace: !options.replace,\n    });\n  };\n\n  const format = fieldExtractors.selectOptions(options.format ? [options.format] : undefined);\n\n  return (\n    <div>\n      <InlineFieldRow>\n        <InlineField label={'Source'} labelWidth={16}>\n          <FieldNamePicker\n            context={{ data: input }}\n            value={options.source ?? ''}\n            onChange={onPickSourceField}\n            item={fieldNamePickerSettings as any}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label={'Format'} labelWidth={16}>\n          <Select\n            value={format.current[0] as any}\n            options={format.options as any}\n            onChange={onFormatChange}\n            width={24}\n            placeholder={'Auto'}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label={'Replace all fields'} labelWidth={16}>\n          <InlineSwitch value={options.replace ?? false} onChange={onToggleReplace} />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n};\n\nexport const extractFieldsTransformRegistryItem: TransformerRegistryItem<ExtractFieldsOptions> = {\n  id: DataTransformerID.extractFields,\n  editor: extractFieldsTransformerEditor,\n  transformation: extractFieldsTransformer,\n  name: 'Extract fields',\n  description: `Parse fields from content (JSON, labels, etc)`,\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,iBADF,QAOO,eAPP;AAQA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,YAAtC,EAAoDC,MAApD,QAAkE,aAAlE;AACA,SAASC,eAAT,QAAgC,uDAAhC;AAEA,SAA+BC,wBAA/B,QAA+D,iBAA/D;AACA,SAA2BC,eAA3B,QAAkD,mBAAlD;;;AAEA,MAAMC,uBAA2F,GAAG;EAClGC,QAAQ,EAAE;IACRC,KAAK,EAAE,EADC;IAERC,eAAe,EAAE;EAFT,CADwF;EAKlGC,IAAI,EAAE,EAL4F;EAMlGC,EAAE,EAAE,EAN8F;EAOlGC,MAAM,EAAE,MAAM;AAPoF,CAApG;AAUA,OAAO,MAAMC,8BAAkF,GAAG,CAAC;EACjGC,KADiG;EAEjGC,OAFiG;EAGjGC;AAHiG,CAAD,KAI5F;EAAA;;EACJ,MAAMC,iBAAiB,GAAIC,MAAD,IAAqB;IAC7CF,QAAQ,mBACHD,OADG;MAENG;IAFM,GAAR;EAID,CALD;;EAOA,MAAMC,cAAc,GAAIC,MAAD,IAAgD;IACrEJ,QAAQ,mBACHD,OADG;MAENK,MAAM,EAAEA,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEC;IAFV,GAAR;EAID,CALD;;EAOA,MAAMC,eAAe,GAAG,MAAM;IAC5BN,QAAQ,mBACHD,OADG;MAENQ,OAAO,EAAE,CAACR,OAAO,CAACQ;IAFZ,GAAR;EAID,CALD;;EAOA,MAAMH,MAAM,GAAGf,eAAe,CAACmB,aAAhB,CAA8BT,OAAO,CAACK,MAAR,GAAiB,CAACL,OAAO,CAACK,MAAT,CAAjB,GAAoCK,SAAlE,CAAf;EAEA,oBACE;IAAA,wBACE,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAE,QAApB;QAA8B,UAAU,EAAE,EAA1C;QAAA,uBACE,KAAC,eAAD;UACE,OAAO,EAAE;YAAEC,IAAI,EAAEZ;UAAR,CADX;UAEE,KAAK,qBAAEC,OAAO,CAACG,MAAV,6DAAoB,EAF3B;UAGE,QAAQ,EAAED,iBAHZ;UAIE,IAAI,EAAEX;QAJR;MADF;IADF,EADF,eAWE,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAE,QAApB;QAA8B,UAAU,EAAE,EAA1C;QAAA,uBACE,KAAC,MAAD;UACE,KAAK,EAAEc,MAAM,CAACO,OAAP,CAAe,CAAf,CADT;UAEE,OAAO,EAAEP,MAAM,CAACL,OAFlB;UAGE,QAAQ,EAAEI,cAHZ;UAIE,KAAK,EAAE,EAJT;UAKE,WAAW,EAAE;QALf;MADF;IADF,EAXF,eAsBE,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAE,oBAApB;QAA0C,UAAU,EAAE,EAAtD;QAAA,uBACE,KAAC,YAAD;UAAc,KAAK,sBAAEJ,OAAO,CAACQ,OAAV,+DAAqB,KAAxC;UAA+C,QAAQ,EAAED;QAAzD;MADF;IADF,EAtBF;EAAA,EADF;AA8BD,CA1DM;AA4DP,OAAO,MAAMM,kCAAiF,GAAG;EAC/FjB,EAAE,EAAEb,iBAAiB,CAAC+B,aADyE;EAE/FjB,MAAM,EAAEC,8BAFuF;EAG/FiB,cAAc,EAAE1B,wBAH+E;EAI/FM,IAAI,EAAE,gBAJyF;EAK/FqB,WAAW,EAAG;AALiF,CAA1F"},"metadata":{},"sourceType":"module"}