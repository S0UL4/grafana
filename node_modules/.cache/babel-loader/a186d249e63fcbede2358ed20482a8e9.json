{"ast":null,"code":"var _LoadingPlaceholder;\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport { fetchGrafanaNotifiersAction, testReceiversAction, updateAlertManagerConfigAction } from '../../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport { formChannelValuesToGrafanaChannelConfig, formValuesToGrafanaReceiver, grafanaReceiverToFormValues, updateConfigWithReceiver } from '../../../utils/receiver-form';\nimport { ProvisionedResource, ProvisioningAlert } from '../../Provisioning';\nimport { GrafanaCommonChannelSettings } from './GrafanaCommonChannelSettings';\nimport { ReceiverForm } from './ReceiverForm';\nimport { TestContactPointModal } from './TestContactPointModal';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultChannelValues = Object.freeze({\n  __id: '',\n  secureSettings: {},\n  settings: {},\n  secureFields: {},\n  disableResolveMessage: false,\n  type: 'email'\n});\nexport const GrafanaReceiverForm = ({\n  existing,\n  alertManagerSourceName,\n  config\n}) => {\n  var _existing$grafana_man;\n\n  const grafanaNotifiers = useUnifiedAlertingSelector(state => state.grafanaNotifiers);\n  const [testChannelValues, setTestChannelValues] = useState();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!(grafanaNotifiers.result || grafanaNotifiers.loading)) {\n      dispatch(fetchGrafanaNotifiersAction());\n    }\n  }, [grafanaNotifiers, dispatch]); // transform receiver DTO to form values\n\n  const [existingValue, id2original] = useMemo(() => {\n    if (!existing || !grafanaNotifiers.result) {\n      return [undefined, {}];\n    }\n\n    return grafanaReceiverToFormValues(existing, grafanaNotifiers.result);\n  }, [existing, grafanaNotifiers.result]);\n\n  const onSubmit = values => {\n    const newReceiver = formValuesToGrafanaReceiver(values, id2original, defaultChannelValues);\n    dispatch(updateAlertManagerConfigAction({\n      newConfig: updateConfigWithReceiver(config, newReceiver, existing === null || existing === void 0 ? void 0 : existing.name),\n      oldConfig: config,\n      alertManagerSourceName: GRAFANA_RULES_SOURCE_NAME,\n      successMessage: existing ? 'Contact point updated.' : 'Contact point created',\n      redirectPath: '/alerting/notifications'\n    }));\n  };\n\n  const onTestChannel = values => {\n    setTestChannelValues(values);\n  };\n\n  const testNotification = alert => {\n    if (testChannelValues) {\n      const existing = id2original[testChannelValues.__id];\n      const chan = formChannelValuesToGrafanaChannelConfig(testChannelValues, defaultChannelValues, 'test', existing);\n      const payload = {\n        alertManagerSourceName,\n        receivers: [{\n          name: 'test',\n          grafana_managed_receiver_configs: [chan]\n        }],\n        alert\n      };\n      dispatch(testReceiversAction(payload));\n    }\n  };\n\n  const takenReceiverNames = useMemo(() => {\n    var _config$alertmanager_, _config$alertmanager_2;\n\n    return (_config$alertmanager_ = (_config$alertmanager_2 = config.alertmanager_config.receivers) === null || _config$alertmanager_2 === void 0 ? void 0 : _config$alertmanager_2.map(({\n      name\n    }) => name).filter(name => name !== (existing === null || existing === void 0 ? void 0 : existing.name))) !== null && _config$alertmanager_ !== void 0 ? _config$alertmanager_ : [];\n  }, [config, existing]); // if any receivers in the contact point have a \"provenance\", the entire contact point should be readOnly\n\n  const hasProvisionedItems = existing ? ((_existing$grafana_man = existing.grafana_managed_receiver_configs) !== null && _existing$grafana_man !== void 0 ? _existing$grafana_man : []).some(item => Boolean(item.provenance)) : false;\n  const readOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) || hasProvisionedItems;\n\n  if (grafanaNotifiers.result) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [hasProvisionedItems && /*#__PURE__*/_jsx(ProvisioningAlert, {\n        resource: ProvisionedResource.ContactPoint\n      }), /*#__PURE__*/_jsx(ReceiverForm, {\n        readOnly: readOnly,\n        config: config,\n        onSubmit: onSubmit,\n        initialValues: existingValue,\n        onTestChannel: onTestChannel,\n        notifiers: grafanaNotifiers.result,\n        alertManagerSourceName: alertManagerSourceName,\n        defaultItem: defaultChannelValues,\n        takenReceiverNames: takenReceiverNames,\n        commonSettingsComponent: GrafanaCommonChannelSettings\n      }), /*#__PURE__*/_jsx(TestContactPointModal, {\n        onDismiss: () => setTestChannelValues(undefined),\n        isOpen: !!testChannelValues,\n        onTest: alert => testNotification(alert)\n      })]\n    });\n  } else {\n    return _LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n      text: \"Loading notifiers...\"\n    }));\n  }\n};","map":{"version":3,"names":["React","useEffect","useMemo","useState","useDispatch","LoadingPlaceholder","useUnifiedAlertingSelector","fetchGrafanaNotifiersAction","testReceiversAction","updateAlertManagerConfigAction","GRAFANA_RULES_SOURCE_NAME","isVanillaPrometheusAlertManagerDataSource","formChannelValuesToGrafanaChannelConfig","formValuesToGrafanaReceiver","grafanaReceiverToFormValues","updateConfigWithReceiver","ProvisionedResource","ProvisioningAlert","GrafanaCommonChannelSettings","ReceiverForm","TestContactPointModal","defaultChannelValues","Object","freeze","__id","secureSettings","settings","secureFields","disableResolveMessage","type","GrafanaReceiverForm","existing","alertManagerSourceName","config","grafanaNotifiers","state","testChannelValues","setTestChannelValues","dispatch","result","loading","existingValue","id2original","undefined","onSubmit","values","newReceiver","newConfig","name","oldConfig","successMessage","redirectPath","onTestChannel","testNotification","alert","chan","payload","receivers","grafana_managed_receiver_configs","takenReceiverNames","alertmanager_config","map","filter","hasProvisionedItems","some","item","Boolean","provenance","readOnly","ContactPoint"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/form/GrafanaReceiverForm.tsx"],"sourcesContent":["import React, { FC, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport {\n  AlertManagerCortexConfig,\n  GrafanaManagedReceiverConfig,\n  Receiver,\n  TestReceiversAlert,\n} from 'app/plugins/datasource/alertmanager/types';\n\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport {\n  fetchGrafanaNotifiersAction,\n  testReceiversAction,\n  updateAlertManagerConfigAction,\n} from '../../../state/actions';\nimport { GrafanaChannelValues, ReceiverFormValues } from '../../../types/receiver-form';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport {\n  formChannelValuesToGrafanaChannelConfig,\n  formValuesToGrafanaReceiver,\n  grafanaReceiverToFormValues,\n  updateConfigWithReceiver,\n} from '../../../utils/receiver-form';\nimport { ProvisionedResource, ProvisioningAlert } from '../../Provisioning';\n\nimport { GrafanaCommonChannelSettings } from './GrafanaCommonChannelSettings';\nimport { ReceiverForm } from './ReceiverForm';\nimport { TestContactPointModal } from './TestContactPointModal';\n\ninterface Props {\n  alertManagerSourceName: string;\n  config: AlertManagerCortexConfig;\n  existing?: Receiver;\n}\n\nconst defaultChannelValues: GrafanaChannelValues = Object.freeze({\n  __id: '',\n  secureSettings: {},\n  settings: {},\n  secureFields: {},\n  disableResolveMessage: false,\n  type: 'email',\n});\n\nexport const GrafanaReceiverForm: FC<Props> = ({ existing, alertManagerSourceName, config }) => {\n  const grafanaNotifiers = useUnifiedAlertingSelector((state) => state.grafanaNotifiers);\n  const [testChannelValues, setTestChannelValues] = useState<GrafanaChannelValues>();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!(grafanaNotifiers.result || grafanaNotifiers.loading)) {\n      dispatch(fetchGrafanaNotifiersAction());\n    }\n  }, [grafanaNotifiers, dispatch]);\n\n  // transform receiver DTO to form values\n  const [existingValue, id2original] = useMemo((): [\n    ReceiverFormValues<GrafanaChannelValues> | undefined,\n    Record<string, GrafanaManagedReceiverConfig>\n  ] => {\n    if (!existing || !grafanaNotifiers.result) {\n      return [undefined, {}];\n    }\n    return grafanaReceiverToFormValues(existing, grafanaNotifiers.result!);\n  }, [existing, grafanaNotifiers.result]);\n\n  const onSubmit = (values: ReceiverFormValues<GrafanaChannelValues>) => {\n    const newReceiver = formValuesToGrafanaReceiver(values, id2original, defaultChannelValues);\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: updateConfigWithReceiver(config, newReceiver, existing?.name),\n        oldConfig: config,\n        alertManagerSourceName: GRAFANA_RULES_SOURCE_NAME,\n        successMessage: existing ? 'Contact point updated.' : 'Contact point created',\n        redirectPath: '/alerting/notifications',\n      })\n    );\n  };\n\n  const onTestChannel = (values: GrafanaChannelValues) => {\n    setTestChannelValues(values);\n  };\n\n  const testNotification = (alert?: TestReceiversAlert) => {\n    if (testChannelValues) {\n      const existing: GrafanaManagedReceiverConfig | undefined = id2original[testChannelValues.__id];\n      const chan = formChannelValuesToGrafanaChannelConfig(testChannelValues, defaultChannelValues, 'test', existing);\n\n      const payload = {\n        alertManagerSourceName,\n        receivers: [\n          {\n            name: 'test',\n            grafana_managed_receiver_configs: [chan],\n          },\n        ],\n        alert,\n      };\n\n      dispatch(testReceiversAction(payload));\n    }\n  };\n\n  const takenReceiverNames = useMemo(\n    () => config.alertmanager_config.receivers?.map(({ name }) => name).filter((name) => name !== existing?.name) ?? [],\n    [config, existing]\n  );\n\n  // if any receivers in the contact point have a \"provenance\", the entire contact point should be readOnly\n  const hasProvisionedItems = existing\n    ? (existing.grafana_managed_receiver_configs ?? []).some((item) => Boolean(item.provenance))\n    : false;\n\n  const readOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) || hasProvisionedItems;\n\n  if (grafanaNotifiers.result) {\n    return (\n      <>\n        {hasProvisionedItems && <ProvisioningAlert resource={ProvisionedResource.ContactPoint} />}\n\n        <ReceiverForm<GrafanaChannelValues>\n          readOnly={readOnly}\n          config={config}\n          onSubmit={onSubmit}\n          initialValues={existingValue}\n          onTestChannel={onTestChannel}\n          notifiers={grafanaNotifiers.result}\n          alertManagerSourceName={alertManagerSourceName}\n          defaultItem={defaultChannelValues}\n          takenReceiverNames={takenReceiverNames}\n          commonSettingsComponent={GrafanaCommonChannelSettings}\n        />\n        <TestContactPointModal\n          onDismiss={() => setTestChannelValues(undefined)}\n          isOpen={!!testChannelValues}\n          onTest={(alert) => testNotification(alert)}\n        />\n      </>\n    );\n  } else {\n    return <LoadingPlaceholder text=\"Loading notifiers...\" />;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}