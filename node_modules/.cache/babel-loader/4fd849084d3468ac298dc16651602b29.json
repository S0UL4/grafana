{"ast":null,"code":"import { from } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { emptyResult, handleDashboardQueryRunnerWorkerError } from './utils';\nexport class AlertStatesWorker {\n  canWork({\n    dashboard,\n    range\n  }) {\n    if (!dashboard.id) {\n      return false;\n    }\n\n    if (range.raw.to !== 'now') {\n      return false;\n    } // if dashboard has no alerts, no point to query alert states\n\n\n    if (!dashboard.panels.find(panel => !!panel.alert)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  work(options) {\n    if (!this.canWork(options)) {\n      return emptyResult();\n    }\n\n    const {\n      dashboard\n    } = options;\n    return from(getBackendSrv().get('/api/alerts/states-for-dashboard', {\n      dashboardId: dashboard.id\n    }, `dashboard-query-runner-alert-states-${dashboard.id}`)).pipe(map(alertStates => {\n      return {\n        alertStates,\n        annotations: []\n      };\n    }), catchError(handleDashboardQueryRunnerWorkerError));\n  }\n\n}","map":{"version":3,"names":["from","catchError","map","getBackendSrv","emptyResult","handleDashboardQueryRunnerWorkerError","AlertStatesWorker","canWork","dashboard","range","id","raw","to","panels","find","panel","alert","work","options","get","dashboardId","pipe","alertStates","annotations"],"sources":["/home/soula/grafana/public/app/features/query/state/DashboardQueryRunner/AlertStatesWorker.ts"],"sourcesContent":["import { from, Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport { DashboardQueryRunnerOptions, DashboardQueryRunnerWorker, DashboardQueryRunnerWorkerResult } from './types';\nimport { emptyResult, handleDashboardQueryRunnerWorkerError } from './utils';\n\nexport class AlertStatesWorker implements DashboardQueryRunnerWorker {\n  canWork({ dashboard, range }: DashboardQueryRunnerOptions): boolean {\n    if (!dashboard.id) {\n      return false;\n    }\n\n    if (range.raw.to !== 'now') {\n      return false;\n    }\n\n    // if dashboard has no alerts, no point to query alert states\n    if (!dashboard.panels.find((panel) => !!panel.alert)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  work(options: DashboardQueryRunnerOptions): Observable<DashboardQueryRunnerWorkerResult> {\n    if (!this.canWork(options)) {\n      return emptyResult();\n    }\n\n    const { dashboard } = options;\n    return from(\n      getBackendSrv().get(\n        '/api/alerts/states-for-dashboard',\n        {\n          dashboardId: dashboard.id,\n        },\n        `dashboard-query-runner-alert-states-${dashboard.id}`\n      )\n    ).pipe(\n      map((alertStates) => {\n        return { alertStates, annotations: [] };\n      }),\n      catchError(handleDashboardQueryRunnerWorkerError)\n    );\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAT,QAAiC,MAAjC;AACA,SAASC,UAAT,EAAqBC,GAArB,QAAgC,gBAAhC;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AAGA,SAASC,WAAT,EAAsBC,qCAAtB,QAAmE,SAAnE;AAEA,OAAO,MAAMC,iBAAN,CAA8D;EACnEC,OAAO,CAAC;IAAEC,SAAF;IAAaC;EAAb,CAAD,EAA6D;IAClE,IAAI,CAACD,SAAS,CAACE,EAAf,EAAmB;MACjB,OAAO,KAAP;IACD;;IAED,IAAID,KAAK,CAACE,GAAN,CAAUC,EAAV,KAAiB,KAArB,EAA4B;MAC1B,OAAO,KAAP;IACD,CAPiE,CASlE;;;IACA,IAAI,CAACJ,SAAS,CAACK,MAAV,CAAiBC,IAAjB,CAAuBC,KAAD,IAAW,CAAC,CAACA,KAAK,CAACC,KAAzC,CAAL,EAAsD;MACpD,OAAO,KAAP;IACD;;IAED,OAAO,IAAP;EACD;;EAEDC,IAAI,CAACC,OAAD,EAAqF;IACvF,IAAI,CAAC,KAAKX,OAAL,CAAaW,OAAb,CAAL,EAA4B;MAC1B,OAAOd,WAAW,EAAlB;IACD;;IAED,MAAM;MAAEI;IAAF,IAAgBU,OAAtB;IACA,OAAOlB,IAAI,CACTG,aAAa,GAAGgB,GAAhB,CACE,kCADF,EAEE;MACEC,WAAW,EAAEZ,SAAS,CAACE;IADzB,CAFF,EAKG,uCAAsCF,SAAS,CAACE,EAAG,EALtD,CADS,CAAJ,CAQLW,IARK,CASLnB,GAAG,CAAEoB,WAAD,IAAiB;MACnB,OAAO;QAAEA,WAAF;QAAeC,WAAW,EAAE;MAA5B,CAAP;IACD,CAFE,CATE,EAYLtB,UAAU,CAACI,qCAAD,CAZL,CAAP;EAcD;;AAtCkE"},"metadata":{},"sourceType":"module"}