{"ast":null,"code":"import React, { PureComponent } from 'react';\nimport { Button } from '@grafana/ui';\nimport { TextDimensionEditor } from 'app/features/dimensions/editors/TextDimensionEditor';\nimport { APIEditor, callApi } from 'app/plugins/panel/canvas/editor/APIEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nclass ButtonDisplay extends PureComponent {\n  render() {\n    const {\n      data\n    } = this.props;\n\n    const onClick = () => {\n      if (data !== null && data !== void 0 && data.api) {\n        callApi(data.api);\n      }\n    };\n\n    return /*#__PURE__*/_jsx(Button, {\n      type: \"submit\",\n      onClick: onClick,\n      children: data === null || data === void 0 ? void 0 : data.text\n    });\n  }\n\n}\n\nexport const buttonItem = {\n  id: 'button',\n  name: 'Button',\n  description: 'Button',\n  display: ButtonDisplay,\n  defaultSize: {\n    width: 200,\n    height: 50\n  },\n  getNewOptions: options => Object.assign({}, options),\n  // Called when data changes\n  prepareData: (ctx, cfg) => {\n    var _cfg$api;\n\n    const data = {\n      text: cfg !== null && cfg !== void 0 && cfg.text ? ctx.getText(cfg.text).value() : '',\n      api: (_cfg$api = cfg === null || cfg === void 0 ? void 0 : cfg.api) !== null && _cfg$api !== void 0 ? _cfg$api : undefined\n    };\n    return data;\n  },\n  // Heatmap overlay options\n  registerOptionsUI: builder => {\n    const category = ['Button'];\n    builder.addCustomEditor({\n      category,\n      id: 'textSelector',\n      path: 'config.text',\n      name: 'Text',\n      editor: TextDimensionEditor\n    }).addCustomEditor({\n      category,\n      id: 'apiSelector',\n      path: 'config.api',\n      name: 'API',\n      editor: APIEditor\n    });\n  }\n};","map":{"version":3,"names":["React","PureComponent","Button","TextDimensionEditor","APIEditor","callApi","ButtonDisplay","render","data","props","onClick","api","text","buttonItem","id","name","description","display","defaultSize","width","height","getNewOptions","options","prepareData","ctx","cfg","getText","value","undefined","registerOptionsUI","builder","category","addCustomEditor","path","editor"],"sources":["/home/soula/grafana/public/app/features/canvas/elements/button.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { Button } from '@grafana/ui';\nimport { DimensionContext } from 'app/features/dimensions/context';\nimport { TextDimensionEditor } from 'app/features/dimensions/editors/TextDimensionEditor';\nimport { TextDimensionConfig } from 'app/features/dimensions/types';\nimport { APIEditor, APIEditorConfig, callApi } from 'app/plugins/panel/canvas/editor/APIEditor';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\n\ninterface ButtonData {\n  text?: string;\n  api?: APIEditorConfig;\n}\n\ninterface ButtonConfig {\n  text?: TextDimensionConfig;\n  api?: APIEditorConfig;\n}\n\nclass ButtonDisplay extends PureComponent<CanvasElementProps<ButtonConfig, ButtonData>> {\n  render() {\n    const { data } = this.props;\n    const onClick = () => {\n      if (data?.api) {\n        callApi(data.api);\n      }\n    };\n\n    return (\n      <Button type=\"submit\" onClick={onClick}>\n        {data?.text}\n      </Button>\n    );\n  }\n}\n\nexport const buttonItem: CanvasElementItem<ButtonConfig, ButtonData> = {\n  id: 'button',\n  name: 'Button',\n  description: 'Button',\n\n  display: ButtonDisplay,\n\n  defaultSize: {\n    width: 200,\n    height: 50,\n  },\n\n  getNewOptions: (options) => ({\n    ...options,\n  }),\n\n  // Called when data changes\n  prepareData: (ctx: DimensionContext, cfg: ButtonConfig) => {\n    const data: ButtonData = {\n      text: cfg?.text ? ctx.getText(cfg.text).value() : '',\n      api: cfg?.api ?? undefined,\n    };\n\n    return data;\n  },\n\n  // Heatmap overlay options\n  registerOptionsUI: (builder) => {\n    const category = ['Button'];\n    builder\n      .addCustomEditor({\n        category,\n        id: 'textSelector',\n        path: 'config.text',\n        name: 'Text',\n        editor: TextDimensionEditor,\n      })\n      .addCustomEditor({\n        category,\n        id: 'apiSelector',\n        path: 'config.api',\n        name: 'API',\n        editor: APIEditor,\n      });\n  },\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAEA,SAASC,MAAT,QAAuB,aAAvB;AAEA,SAASC,mBAAT,QAAoC,qDAApC;AAEA,SAASC,SAAT,EAAqCC,OAArC,QAAoD,2CAApD;;;AAcA,MAAMC,aAAN,SAA4BL,aAA5B,CAAwF;EACtFM,MAAM,GAAG;IACP,MAAM;MAAEC;IAAF,IAAW,KAAKC,KAAtB;;IACA,MAAMC,OAAO,GAAG,MAAM;MACpB,IAAIF,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEG,GAAV,EAAe;QACbN,OAAO,CAACG,IAAI,CAACG,GAAN,CAAP;MACD;IACF,CAJD;;IAMA,oBACE,KAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAsB,OAAO,EAAED,OAA/B;MAAA,UACGF,IADH,aACGA,IADH,uBACGA,IAAI,CAAEI;IADT,EADF;EAKD;;AAdqF;;AAiBxF,OAAO,MAAMC,UAAuD,GAAG;EACrEC,EAAE,EAAE,QADiE;EAErEC,IAAI,EAAE,QAF+D;EAGrEC,WAAW,EAAE,QAHwD;EAKrEC,OAAO,EAAEX,aAL4D;EAOrEY,WAAW,EAAE;IACXC,KAAK,EAAE,GADI;IAEXC,MAAM,EAAE;EAFG,CAPwD;EAYrEC,aAAa,EAAGC,OAAD,sBACVA,OADU,CAZsD;EAgBrE;EACAC,WAAW,EAAE,CAACC,GAAD,EAAwBC,GAAxB,KAA8C;IAAA;;IACzD,MAAMjB,IAAgB,GAAG;MACvBI,IAAI,EAAEa,GAAG,SAAH,IAAAA,GAAG,WAAH,IAAAA,GAAG,CAAEb,IAAL,GAAYY,GAAG,CAACE,OAAJ,CAAYD,GAAG,CAACb,IAAhB,EAAsBe,KAAtB,EAAZ,GAA4C,EAD3B;MAEvBhB,GAAG,cAAEc,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEd,GAAP,+CAAciB;IAFM,CAAzB;IAKA,OAAOpB,IAAP;EACD,CAxBoE;EA0BrE;EACAqB,iBAAiB,EAAGC,OAAD,IAAa;IAC9B,MAAMC,QAAQ,GAAG,CAAC,QAAD,CAAjB;IACAD,OAAO,CACJE,eADH,CACmB;MACfD,QADe;MAEfjB,EAAE,EAAE,cAFW;MAGfmB,IAAI,EAAE,aAHS;MAIflB,IAAI,EAAE,MAJS;MAKfmB,MAAM,EAAE/B;IALO,CADnB,EAQG6B,eARH,CAQmB;MACfD,QADe;MAEfjB,EAAE,EAAE,aAFW;MAGfmB,IAAI,EAAE,YAHS;MAIflB,IAAI,EAAE,KAJS;MAKfmB,MAAM,EAAE9B;IALO,CARnB;EAeD;AA5CoE,CAAhE"},"metadata":{},"sourceType":"module"}