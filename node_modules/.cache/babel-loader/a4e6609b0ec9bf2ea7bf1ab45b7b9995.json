{"ast":null,"code":"export let PluginListDisplayMode;\n\n(function (PluginListDisplayMode) {\n  PluginListDisplayMode[\"Grid\"] = \"grid\";\n  PluginListDisplayMode[\"List\"] = \"list\";\n})(PluginListDisplayMode || (PluginListDisplayMode = {}));\n\nexport let PluginAdminRoutes;\n\n(function (PluginAdminRoutes) {\n  PluginAdminRoutes[\"Home\"] = \"plugins-home\";\n  PluginAdminRoutes[\"Browse\"] = \"plugins-browse\";\n  PluginAdminRoutes[\"Details\"] = \"plugins-details\";\n  PluginAdminRoutes[\"HomeAdmin\"] = \"plugins-home-admin\";\n  PluginAdminRoutes[\"BrowseAdmin\"] = \"plugins-browse-admin\";\n  PluginAdminRoutes[\"DetailsAdmin\"] = \"plugins-details-admin\";\n})(PluginAdminRoutes || (PluginAdminRoutes = {}));\n\nexport let PluginIconName;\n\n(function (PluginIconName) {\n  PluginIconName[\"app\"] = \"apps\";\n  PluginIconName[\"datasource\"] = \"database\";\n  PluginIconName[\"panel\"] = \"credit-card\";\n  PluginIconName[\"renderer\"] = \"capture\";\n})(PluginIconName || (PluginIconName = {}));\n\nexport let PluginStatus;\n\n(function (PluginStatus) {\n  PluginStatus[\"INSTALL\"] = \"INSTALL\";\n  PluginStatus[\"UNINSTALL\"] = \"UNINSTALL\";\n  PluginStatus[\"UPDATE\"] = \"UPDATE\";\n  PluginStatus[\"REINSTALL\"] = \"REINSTALL\";\n})(PluginStatus || (PluginStatus = {}));\n\nexport let PluginTabLabels;\n\n(function (PluginTabLabels) {\n  PluginTabLabels[\"OVERVIEW\"] = \"Overview\";\n  PluginTabLabels[\"VERSIONS\"] = \"Version history\";\n  PluginTabLabels[\"CONFIG\"] = \"Config\";\n  PluginTabLabels[\"DASHBOARDS\"] = \"Dashboards\";\n})(PluginTabLabels || (PluginTabLabels = {}));\n\nexport let PluginTabIds;\n\n(function (PluginTabIds) {\n  PluginTabIds[\"OVERVIEW\"] = \"overview\";\n  PluginTabIds[\"VERSIONS\"] = \"version-history\";\n  PluginTabIds[\"CONFIG\"] = \"config\";\n  PluginTabIds[\"DASHBOARDS\"] = \"dashboards\";\n})(PluginTabIds || (PluginTabIds = {}));\n\nexport let RequestStatus;\n\n(function (RequestStatus) {\n  RequestStatus[\"Pending\"] = \"Pending\";\n  RequestStatus[\"Fulfilled\"] = \"Fulfilled\";\n  RequestStatus[\"Rejected\"] = \"Rejected\";\n})(RequestStatus || (RequestStatus = {}));","map":{"version":3,"names":["PluginListDisplayMode","PluginAdminRoutes","PluginIconName","PluginStatus","PluginTabLabels","PluginTabIds","RequestStatus"],"sources":["/home/soula/grafana/public/app/features/plugins/admin/types.ts"],"sourcesContent":["import { EntityState } from '@reduxjs/toolkit';\n\nimport {\n  PluginType,\n  PluginSignatureStatus,\n  PluginSignatureType,\n  PluginDependencies,\n  PluginErrorCode,\n} from '@grafana/data';\nimport { IconName } from '@grafana/ui';\nimport { StoreState, PluginsState } from 'app/types';\n\nexport type PluginTypeCode = 'app' | 'panel' | 'datasource';\n\nexport enum PluginListDisplayMode {\n  Grid = 'grid',\n  List = 'list',\n}\n\nexport enum PluginAdminRoutes {\n  Home = 'plugins-home',\n  Browse = 'plugins-browse',\n  Details = 'plugins-details',\n  HomeAdmin = 'plugins-home-admin',\n  BrowseAdmin = 'plugins-browse-admin',\n  DetailsAdmin = 'plugins-details-admin',\n}\n\nexport enum PluginIconName {\n  app = 'apps',\n  datasource = 'database',\n  panel = 'credit-card',\n  renderer = 'capture',\n}\n\nexport interface CatalogPlugin {\n  description: string;\n  downloads: number;\n  hasUpdate: boolean;\n  id: string;\n  info: CatalogPluginInfo;\n  isDev: boolean;\n  isCore: boolean;\n  isEnterprise: boolean;\n  isInstalled: boolean;\n  isDisabled: boolean;\n  // `isPublished` is TRUE if the plugin is published to grafana.com\n  isPublished: boolean;\n  name: string;\n  orgName: string;\n  signature: PluginSignatureStatus;\n  signatureType?: PluginSignatureType;\n  signatureOrg?: string;\n  popularity: number;\n  publishedAt: string;\n  type?: PluginType;\n  updatedAt: string;\n  installedVersion?: string;\n  details?: CatalogPluginDetails;\n  error?: PluginErrorCode;\n}\n\nexport interface CatalogPluginDetails {\n  readme?: string;\n  versions?: Version[];\n  links: Array<{\n    name: string;\n    url: string;\n  }>;\n  grafanaDependency?: string;\n  pluginDependencies?: PluginDependencies['plugins'];\n}\n\nexport interface CatalogPluginInfo {\n  logos: {\n    large: string;\n    small: string;\n  };\n}\n\nexport type RemotePlugin = {\n  createdAt: string;\n  description: string;\n  downloads: number;\n  downloadSlug: string;\n  featured: number;\n  id: number;\n  internal: boolean;\n  json?: {\n    dependencies: PluginDependencies;\n    info: {\n      links: Array<{\n        name: string;\n        url: string;\n      }>;\n    };\n  };\n  links: Array<{ rel: string; href: string }>;\n  name: string;\n  orgId: number;\n  orgName: string;\n  orgSlug: string;\n  orgUrl: string;\n  packages: {\n    [arch: string]: {\n      packageName: string;\n      downloadUrl: string;\n    };\n  };\n  popularity: number;\n  readme?: string;\n  signatureType: PluginSignatureType | '';\n  slug: string;\n  status: string;\n  typeCode: PluginType;\n  typeId: number;\n  typeName: string;\n  updatedAt: string;\n  url: string;\n  userId: number;\n  verified: boolean;\n  version: string;\n  versionSignatureType: PluginSignatureType | '';\n  versionSignedByOrg: string;\n  versionSignedByOrgName: string;\n  versionStatus: string;\n};\n\nexport type LocalPlugin = {\n  category: string;\n  defaultNavUrl: string;\n  dev?: boolean;\n  enabled: boolean;\n  hasUpdate: boolean;\n  id: string;\n  info: {\n    author: Rel;\n    description: string;\n    links?: Rel[];\n    logos: {\n      small: string;\n      large: string;\n    };\n    build: Build;\n    screenshots?: Array<{\n      path: string;\n      name: string;\n    }> | null;\n    version: string;\n    updated: string;\n  };\n  name: string;\n  pinned: boolean;\n  signature: PluginSignatureStatus;\n  signatureOrg: string;\n  signatureType: PluginSignatureType;\n  state: string;\n  type: PluginType;\n  dependencies: PluginDependencies;\n};\n\ninterface Rel {\n  name: string;\n  url: string;\n}\n\nexport interface Build {\n  time?: number;\n  repo?: string;\n  branch?: string;\n  hash?: string;\n}\n\nexport interface Version {\n  version: string;\n  createdAt: string;\n  isCompatible: boolean;\n  grafanaDependency: string | null;\n}\n\nexport interface PluginDetails {\n  remote?: RemotePlugin;\n  remoteVersions?: Version[];\n  local?: LocalPlugin;\n}\n\nexport interface Org {\n  slug: string;\n  name: string;\n  url: string;\n  createdAt: string;\n  updatedAt: string;\n  avatar: string;\n  avatarUrl: string;\n}\n\nexport type CatalogPluginsState = {\n  loading: boolean;\n  error?: Error;\n  plugins: CatalogPlugin[];\n};\n\nexport enum PluginStatus {\n  INSTALL = 'INSTALL',\n  UNINSTALL = 'UNINSTALL',\n  UPDATE = 'UPDATE',\n  REINSTALL = 'REINSTALL',\n}\n\nexport enum PluginTabLabels {\n  OVERVIEW = 'Overview',\n  VERSIONS = 'Version history',\n  CONFIG = 'Config',\n  DASHBOARDS = 'Dashboards',\n}\n\nexport enum PluginTabIds {\n  OVERVIEW = 'overview',\n  VERSIONS = 'version-history',\n  CONFIG = 'config',\n  DASHBOARDS = 'dashboards',\n}\n\nexport enum RequestStatus {\n  Pending = 'Pending',\n  Fulfilled = 'Fulfilled',\n  Rejected = 'Rejected',\n}\nexport type RemotePluginResponse = {\n  plugins: RemotePlugin[];\n  error?: Error;\n};\n\nexport type RequestInfo = {\n  status: RequestStatus;\n  // The whole error object\n  error?: any;\n  // An optional error message\n  errorMessage?: string;\n};\n\nexport type PluginDetailsTab = {\n  label: PluginTabLabels | string;\n  icon?: IconName | string;\n  id: PluginTabIds | string;\n  href?: string;\n};\n\n// TODO<remove `PluginsState &` when the \"plugin_admin_enabled\" feature flag is removed>\nexport type ReducerState = PluginsState & {\n  items: EntityState<CatalogPlugin>;\n  requests: Record<string, RequestInfo>;\n  settings: {\n    displayMode: PluginListDisplayMode;\n  };\n};\n\n// TODO<remove when the \"plugin_admin_enabled\" feature flag is removed>\nexport type PluginCatalogStoreState = StoreState & { plugins: ReducerState };\n\n// The data that we receive when fetching \"/api/gnet/plugins/<plugin>/versions\"\nexport type PluginVersion = {\n  id: number;\n  pluginId: number;\n  pluginSlug: string;\n  version: string;\n  url: string;\n  commit: string;\n  description: string;\n  createdAt: string;\n  updatedAt?: string;\n  downloads: number;\n  verified: boolean;\n  status: string;\n  downloadSlug: string;\n  links: Array<{ rel: string; href: string }>;\n  isCompatible: boolean;\n  grafanaDependency: string | null;\n};\n"],"mappings":"AAcA,WAAYA,qBAAZ;;WAAYA,qB;EAAAA,qB;EAAAA,qB;GAAAA,qB,KAAAA,qB;;AAKZ,WAAYC,iBAAZ;;WAAYA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB;;AASZ,WAAYC,cAAZ;;WAAYA,c;EAAAA,c;EAAAA,c;EAAAA,c;EAAAA,c;GAAAA,c,KAAAA,c;;AA8KZ,WAAYC,YAAZ;;WAAYA,Y;EAAAA,Y;EAAAA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAOZ,WAAYC,eAAZ;;WAAYA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;GAAAA,e,KAAAA,e;;AAOZ,WAAYC,YAAZ;;WAAYA,Y;EAAAA,Y;EAAAA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAOZ,WAAYC,aAAZ;;WAAYA,a;EAAAA,a;EAAAA,a;EAAAA,a;GAAAA,a,KAAAA,a"},"metadata":{},"sourceType":"module"}