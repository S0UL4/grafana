{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react'; // @ts-ignore\n\nimport Highlighter from 'react-highlight-words';\nimport { toOption } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { Select, useStyles2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// We are matching words split with space\nconst splitSeparator = ' ';\nexport function MetricSelect({\n  query,\n  onChange,\n  onGetMetrics\n}) {\n  const styles = useStyles2(getStyles);\n  const [state, setState] = useState({});\n  const customFilterOption = useCallback((option, searchQuery) => {\n    var _option$label;\n\n    const label = (_option$label = option.label) !== null && _option$label !== void 0 ? _option$label : option.value;\n\n    if (!label) {\n      return false;\n    } // custom value is not a string label but a react node\n\n\n    if (!label.toLowerCase) {\n      return true;\n    }\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n  const formatOptionLabel = useCallback((option, meta) => {\n    var _option$label2;\n\n    // For newly created custom value we don't want to add highlight\n    if (option['__isNew__']) {\n      return option.label;\n    }\n\n    return /*#__PURE__*/_jsx(Highlighter, {\n      searchWords: meta.inputValue.split(splitSeparator),\n      textToHighlight: (_option$label2 = option.label) !== null && _option$label2 !== void 0 ? _option$label2 : '',\n      highlightClassName: styles.highlight\n    });\n  }, [styles.highlight]);\n  return /*#__PURE__*/_jsx(EditorFieldGroup, {\n    children: /*#__PURE__*/_jsx(EditorField, {\n      label: \"Metric\",\n      children: /*#__PURE__*/_jsx(Select, {\n        inputId: \"prometheus-metric-select\",\n        className: styles.select,\n        value: query.metric ? toOption(query.metric) : undefined,\n        placeholder: \"Select metric\",\n        allowCustomValue: true,\n        formatOptionLabel: formatOptionLabel,\n        filterOption: customFilterOption,\n        onOpenMenu: async () => {\n          setState({\n            isLoading: true\n          });\n          const metrics = await onGetMetrics();\n          setState({\n            metrics,\n            isLoading: undefined\n          });\n        },\n        isLoading: state.isLoading,\n        options: state.metrics,\n        onChange: ({\n          value\n        }) => {\n          if (value) {\n            onChange(Object.assign({}, query, {\n              metric: value\n            }));\n          }\n        }\n      })\n    })\n  });\n}\n\nconst getStyles = theme => ({\n  select: css`\n    min-width: 125px;\n  `,\n  highlight: css`\n    label: select__match-highlight;\n    background: inherit;\n    padding: inherit;\n    color: ${theme.colors.warning.contrastText};\n    background-color: ${theme.colors.warning.main};\n  `\n});","map":{"version":3,"names":["css","React","useCallback","useState","Highlighter","toOption","EditorField","EditorFieldGroup","Select","useStyles2","splitSeparator","MetricSelect","query","onChange","onGetMetrics","styles","getStyles","state","setState","customFilterOption","option","searchQuery","label","value","toLowerCase","searchWords","split","reduce","acc","cur","includes","formatOptionLabel","meta","inputValue","highlight","select","metric","undefined","isLoading","metrics","theme","colors","warning","contrastText","main"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/components/MetricSelect.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\n\nimport { SelectableValue, toOption, GrafanaTheme2 } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { Select, FormatOptionLabelMeta, useStyles2 } from '@grafana/ui';\n\nimport { PromVisualQuery } from '../types';\n\n// We are matching words split with space\nconst splitSeparator = ' ';\n\nexport interface Props {\n  query: PromVisualQuery;\n  onChange: (query: PromVisualQuery) => void;\n  onGetMetrics: () => Promise<SelectableValue[]>;\n}\n\nexport function MetricSelect({ query, onChange, onGetMetrics }: Props) {\n  const styles = useStyles2(getStyles);\n  const [state, setState] = useState<{\n    metrics?: Array<SelectableValue<any>>;\n    isLoading?: boolean;\n  }>({});\n\n  const customFilterOption = useCallback((option: SelectableValue<any>, searchQuery: string) => {\n    const label = option.label ?? option.value;\n    if (!label) {\n      return false;\n    }\n\n    // custom value is not a string label but a react node\n    if (!label.toLowerCase) {\n      return true;\n    }\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  const formatOptionLabel = useCallback(\n    (option: SelectableValue<any>, meta: FormatOptionLabelMeta<any>) => {\n      // For newly created custom value we don't want to add highlight\n      if (option['__isNew__']) {\n        return option.label;\n      }\n\n      return (\n        <Highlighter\n          searchWords={meta.inputValue.split(splitSeparator)}\n          textToHighlight={option.label ?? ''}\n          highlightClassName={styles.highlight}\n        />\n      );\n    },\n    [styles.highlight]\n  );\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Metric\">\n        <Select\n          inputId=\"prometheus-metric-select\"\n          className={styles.select}\n          value={query.metric ? toOption(query.metric) : undefined}\n          placeholder=\"Select metric\"\n          allowCustomValue\n          formatOptionLabel={formatOptionLabel}\n          filterOption={customFilterOption}\n          onOpenMenu={async () => {\n            setState({ isLoading: true });\n            const metrics = await onGetMetrics();\n            setState({ metrics, isLoading: undefined });\n          }}\n          isLoading={state.isLoading}\n          options={state.metrics}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, metric: value });\n            }\n          }}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  select: css`\n    min-width: 125px;\n  `,\n  highlight: css`\n    label: select__match-highlight;\n    background: inherit;\n    padding: inherit;\n    color: ${theme.colors.warning.contrastText};\n    background-color: ${theme.colors.warning.main};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}