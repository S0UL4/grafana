{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function LokiQueryBuilderContainer(props) {\n  const {\n    query,\n    onChange,\n    onRunQuery,\n    datasource,\n    showRawQuery\n  } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, {\n    expr: query.expr,\n    // Use initial visual query only if query.expr is empty string\n    visQuery: query.expr === '' ? {\n      labels: [],\n      operations: [{\n        id: '__line_contains',\n        params: ['']\n      }]\n    } : undefined\n  }); // Only rebuild visual query if expr changes from outside\n\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = visQuery => {\n    const expr = lokiQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({\n      visQuery,\n      expr\n    }));\n    onChange(Object.assign({}, props.query, {\n      expr: expr\n    }));\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(LokiQueryBuilder, {\n      query: state.visQuery,\n      datasource: datasource,\n      onChange: onVisQueryChange,\n      onRunQuery: onRunQuery\n    }), showRawQuery && /*#__PURE__*/_jsx(QueryPreview, {\n      query: query.expr\n    })]\n  });\n}\nconst stateSlice = createSlice({\n  name: 'loki-builder-container',\n  initialState: {\n    expr: ''\n  },\n  reducers: {\n    visualQueryChange: (state, action) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    }\n  }\n});\nconst {\n  visualQueryChange,\n  exprChanged\n} = stateSlice.actions;","map":{"version":3,"names":["createSlice","React","useEffect","useReducer","lokiQueryModeller","buildVisualQueryFromString","LokiQueryBuilder","QueryPreview","LokiQueryBuilderContainer","props","query","onChange","onRunQuery","datasource","showRawQuery","state","dispatch","stateSlice","reducer","expr","visQuery","labels","operations","id","params","undefined","exprChanged","onVisQueryChange","renderQuery","visualQueryChange","name","initialState","reducers","action","payload","parseResult","actions"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderContainer.tsx"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { LokiDatasource } from '../../datasource';\nimport { LokiQuery } from '../../types';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LokiVisualQuery } from '../types';\n\nimport { LokiQueryBuilder } from './LokiQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\n\nexport interface Props {\n  query: LokiQuery;\n  datasource: LokiDatasource;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n  showRawQuery: boolean;\n}\n\nexport interface State {\n  visQuery?: LokiVisualQuery;\n  expr: string;\n}\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function LokiQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, showRawQuery } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, {\n    expr: query.expr,\n    // Use initial visual query only if query.expr is empty string\n    visQuery:\n      query.expr === ''\n        ? {\n            labels: [],\n            operations: [{ id: '__line_contains', params: [''] }],\n          }\n        : undefined,\n  });\n\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = (visQuery: LokiVisualQuery) => {\n    const expr = lokiQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n    onChange({ ...props.query, expr: expr });\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <LokiQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n      />\n      {showRawQuery && <QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst stateSlice = createSlice({\n  name: 'loki-builder-container',\n  initialState: { expr: '' } as State,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: LokiVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged } = stateSlice.actions;\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AAIA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,0BAAT,QAA2C,YAA3C;AAGA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,YAAT,QAA6B,gBAA7B;;;;;AAeA;AACA;AACA;AACA,OAAO,SAASC,yBAAT,CAAmCC,KAAnC,EAAiD;EACtD,MAAM;IAAEC,KAAF;IAASC,QAAT;IAAmBC,UAAnB;IAA+BC,UAA/B;IAA2CC;EAA3C,IAA4DL,KAAlE;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBb,UAAU,CAACc,UAAU,CAACC,OAAZ,EAAqB;IACvDC,IAAI,EAAET,KAAK,CAACS,IAD2C;IAEvD;IACAC,QAAQ,EACNV,KAAK,CAACS,IAAN,KAAe,EAAf,GACI;MACEE,MAAM,EAAE,EADV;MAEEC,UAAU,EAAE,CAAC;QAAEC,EAAE,EAAE,iBAAN;QAAyBC,MAAM,EAAE,CAAC,EAAD;MAAjC,CAAD;IAFd,CADJ,GAKIC;EATiD,CAArB,CAApC,CAFsD,CActD;;EACAvB,SAAS,CAAC,MAAM;IACdc,QAAQ,CAACU,WAAW,CAAChB,KAAK,CAACS,IAAP,CAAZ,CAAR;EACD,CAFQ,EAEN,CAACT,KAAK,CAACS,IAAP,CAFM,CAAT;;EAIA,MAAMQ,gBAAgB,GAAIP,QAAD,IAA+B;IACtD,MAAMD,IAAI,GAAGf,iBAAiB,CAACwB,WAAlB,CAA8BR,QAA9B,CAAb;IACAJ,QAAQ,CAACa,iBAAiB,CAAC;MAAET,QAAF;MAAYD;IAAZ,CAAD,CAAlB,CAAR;IACAR,QAAQ,mBAAMF,KAAK,CAACC,KAAZ;MAAmBS,IAAI,EAAEA;IAAzB,GAAR;EACD,CAJD;;EAMA,IAAI,CAACJ,KAAK,CAACK,QAAX,EAAqB;IACnB,OAAO,IAAP;EACD;;EAED,oBACE;IAAA,wBACE,KAAC,gBAAD;MACE,KAAK,EAAEL,KAAK,CAACK,QADf;MAEE,UAAU,EAAEP,UAFd;MAGE,QAAQ,EAAEc,gBAHZ;MAIE,UAAU,EAAEf;IAJd,EADF,EAOGE,YAAY,iBAAI,KAAC,YAAD;MAAc,KAAK,EAAEJ,KAAK,CAACS;IAA3B,EAPnB;EAAA,EADF;AAWD;AAED,MAAMF,UAAU,GAAGjB,WAAW,CAAC;EAC7B8B,IAAI,EAAE,wBADuB;EAE7BC,YAAY,EAAE;IAAEZ,IAAI,EAAE;EAAR,CAFe;EAG7Ba,QAAQ,EAAE;IACRH,iBAAiB,EAAE,CAACd,KAAD,EAAQkB,MAAR,KAA+E;MAChGlB,KAAK,CAACI,IAAN,GAAac,MAAM,CAACC,OAAP,CAAef,IAA5B;MACAJ,KAAK,CAACK,QAAN,GAAiBa,MAAM,CAACC,OAAP,CAAed,QAAhC;IACD,CAJO;IAKRM,WAAW,EAAE,CAACX,KAAD,EAAQkB,MAAR,KAA0C;MACrD,IAAI,CAAClB,KAAK,CAACK,QAAP,IAAmBL,KAAK,CAACI,IAAN,KAAec,MAAM,CAACC,OAA7C,EAAsD;QACpDnB,KAAK,CAACI,IAAN,GAAac,MAAM,CAACC,OAApB;QACA,MAAMC,WAAW,GAAG9B,0BAA0B,CAAC4B,MAAM,CAACC,OAAR,CAA9C;QACAnB,KAAK,CAACK,QAAN,GAAiBe,WAAW,CAACzB,KAA7B;MACD;IACF;EAXO;AAHmB,CAAD,CAA9B;AAkBA,MAAM;EAAEmB,iBAAF;EAAqBH;AAArB,IAAqCT,UAAU,CAACmB,OAAtD"},"metadata":{},"sourceType":"module"}