{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { extend } from 'lodash';\nimport { rangeUtil } from '@grafana/data';\nimport { featureEnabled, getBackendSrv } from '@grafana/runtime';\nimport { AccessControlAction } from 'app/types';\nimport config from '../../core/config';\nexport class User {\n  constructor() {\n    _defineProperty(this, \"isSignedIn\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"login\", void 0);\n\n    _defineProperty(this, \"email\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"externalUserId\", void 0);\n\n    _defineProperty(this, \"lightTheme\", void 0);\n\n    _defineProperty(this, \"orgCount\", void 0);\n\n    _defineProperty(this, \"orgId\", void 0);\n\n    _defineProperty(this, \"orgName\", void 0);\n\n    _defineProperty(this, \"orgRole\", void 0);\n\n    _defineProperty(this, \"isGrafanaAdmin\", void 0);\n\n    _defineProperty(this, \"gravatarUrl\", void 0);\n\n    _defineProperty(this, \"timezone\", void 0);\n\n    _defineProperty(this, \"weekStart\", void 0);\n\n    _defineProperty(this, \"locale\", void 0);\n\n    _defineProperty(this, \"helpFlags1\", void 0);\n\n    _defineProperty(this, \"hasEditPermissionInFolders\", void 0);\n\n    _defineProperty(this, \"permissions\", void 0);\n\n    _defineProperty(this, \"fiscalYearStartMonth\", void 0);\n\n    this.id = 0;\n    this.isGrafanaAdmin = false;\n    this.isSignedIn = false;\n    this.orgRole = '';\n    this.orgId = 0;\n    this.orgName = '';\n    this.login = '';\n    this.externalUserId = '';\n    this.orgCount = 0;\n    this.timezone = '';\n    this.fiscalYearStartMonth = 0;\n    this.helpFlags1 = 0;\n    this.lightTheme = false;\n    this.hasEditPermissionInFolders = false;\n    this.email = '';\n    this.name = '';\n    this.locale = '';\n    this.weekStart = '';\n    this.gravatarUrl = '';\n\n    if (config.bootData.user) {\n      extend(this, config.bootData.user);\n    }\n  }\n\n}\nexport class ContextSrv {\n  constructor() {\n    _defineProperty(this, \"pinned\", void 0);\n\n    _defineProperty(this, \"version\", void 0);\n\n    _defineProperty(this, \"user\", void 0);\n\n    _defineProperty(this, \"isSignedIn\", void 0);\n\n    _defineProperty(this, \"isGrafanaAdmin\", void 0);\n\n    _defineProperty(this, \"isEditor\", void 0);\n\n    _defineProperty(this, \"sidemenuSmallBreakpoint\", false);\n\n    _defineProperty(this, \"hasEditPermissionInFolders\", void 0);\n\n    _defineProperty(this, \"minRefreshInterval\", void 0);\n\n    if (!config.bootData) {\n      config.bootData = {\n        user: {},\n        settings: {}\n      };\n    }\n\n    this.user = new User();\n    this.isSignedIn = this.user.isSignedIn;\n    this.isGrafanaAdmin = this.user.isGrafanaAdmin;\n    this.isEditor = this.hasRole('Editor') || this.hasRole('Admin');\n    this.hasEditPermissionInFolders = this.user.hasEditPermissionInFolders;\n    this.minRefreshInterval = config.minRefreshInterval;\n  }\n\n  async fetchUserPermissions() {\n    try {\n      if (this.accessControlEnabled()) {\n        this.user.permissions = await getBackendSrv().get('/api/access-control/user/permissions', {\n          reloadcache: true\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  /**\n   * Indicate the user has been logged out\n   */\n\n\n  setLoggedOut() {\n    this.user.isSignedIn = false;\n    this.isSignedIn = false;\n  }\n\n  hasRole(role) {\n    if (role === 'ServerAdmin') {\n      return this.isGrafanaAdmin;\n    } else {\n      return this.user.orgRole === role;\n    }\n  }\n\n  accessControlEnabled() {\n    return config.rbacEnabled;\n  }\n\n  accessControlBuiltInRoleAssignmentEnabled() {\n    return config.rbacBuiltInRoleAssignmentEnabled;\n  }\n\n  licensedAccessControlEnabled() {\n    return featureEnabled('accesscontrol') && config.rbacEnabled;\n  } // Checks whether user has required permission\n\n\n  hasPermissionInMetadata(action, object) {\n    var _object$accessControl;\n\n    // Fallback if access control disabled\n    if (!this.accessControlEnabled()) {\n      return true;\n    }\n\n    return !!((_object$accessControl = object.accessControl) !== null && _object$accessControl !== void 0 && _object$accessControl[action]);\n  } // Checks whether user has required permission\n\n\n  hasPermission(action) {\n    var _this$user$permission;\n\n    // Fallback if access control disabled\n    if (!this.accessControlEnabled()) {\n      return true;\n    }\n\n    return !!((_this$user$permission = this.user.permissions) !== null && _this$user$permission !== void 0 && _this$user$permission[action]);\n  }\n\n  isGrafanaVisible() {\n    return document.visibilityState === undefined || document.visibilityState === 'visible';\n  } // checks whether the passed interval is longer than the configured minimum refresh rate\n\n\n  isAllowedInterval(interval) {\n    if (!config.minRefreshInterval) {\n      return true;\n    }\n\n    return rangeUtil.intervalToMs(interval) >= rangeUtil.intervalToMs(config.minRefreshInterval);\n  }\n\n  getValidInterval(interval) {\n    if (!this.isAllowedInterval(interval)) {\n      return config.minRefreshInterval;\n    }\n\n    return interval;\n  }\n\n  hasAccessToExplore() {\n    if (this.accessControlEnabled()) {\n      return this.hasPermission(AccessControlAction.DataSourcesExplore);\n    }\n\n    return (this.isEditor || config.viewersCanEdit) && config.exploreEnabled;\n  }\n\n  hasAccess(action, fallBack) {\n    if (!this.accessControlEnabled()) {\n      return fallBack;\n    }\n\n    return this.hasPermission(action);\n  }\n\n  hasAccessInMetadata(action, object, fallBack) {\n    if (!config.rbacEnabled) {\n      return fallBack;\n    }\n\n    return this.hasPermissionInMetadata(action, object);\n  } // evaluates access control permissions, granting access if the user has any of them; uses fallback if access control is disabled\n\n\n  evaluatePermission(fallback, actions) {\n    if (!this.accessControlEnabled()) {\n      return fallback();\n    }\n\n    if (actions.some(action => this.hasPermission(action))) {\n      return [];\n    } // Hack to reject when user does not have permission\n\n\n    return ['Reject'];\n  }\n\n}\nlet contextSrv = new ContextSrv();\nexport { contextSrv };\nexport const setContextSrv = override => {\n  if (process.env.NODE_ENV !== 'test') {\n    throw new Error('contextSrv can be only overridden in test environment');\n  }\n\n  contextSrv = override;\n};","map":{"version":3,"names":["extend","rangeUtil","featureEnabled","getBackendSrv","AccessControlAction","config","User","constructor","id","isGrafanaAdmin","isSignedIn","orgRole","orgId","orgName","login","externalUserId","orgCount","timezone","fiscalYearStartMonth","helpFlags1","lightTheme","hasEditPermissionInFolders","email","name","locale","weekStart","gravatarUrl","bootData","user","ContextSrv","settings","isEditor","hasRole","minRefreshInterval","fetchUserPermissions","accessControlEnabled","permissions","get","reloadcache","e","console","error","setLoggedOut","role","rbacEnabled","accessControlBuiltInRoleAssignmentEnabled","rbacBuiltInRoleAssignmentEnabled","licensedAccessControlEnabled","hasPermissionInMetadata","action","object","accessControl","hasPermission","isGrafanaVisible","document","visibilityState","undefined","isAllowedInterval","interval","intervalToMs","getValidInterval","hasAccessToExplore","DataSourcesExplore","viewersCanEdit","exploreEnabled","hasAccess","fallBack","hasAccessInMetadata","evaluatePermission","fallback","actions","some","contextSrv","setContextSrv","override","process","env","NODE_ENV","Error"],"sources":["/home/soula/grafana/public/app/core/services/context_srv.ts"],"sourcesContent":["import { extend } from 'lodash';\n\nimport { OrgRole, rangeUtil, WithAccessControlMetadata } from '@grafana/data';\nimport { featureEnabled, getBackendSrv } from '@grafana/runtime';\nimport { AccessControlAction, UserPermission } from 'app/types';\nimport { CurrentUserInternal } from 'app/types/config';\n\nimport config from '../../core/config';\n\nexport class User implements CurrentUserInternal {\n  isSignedIn: boolean;\n  id: number;\n  login: string;\n  email: string;\n  name: string;\n  externalUserId: string;\n  lightTheme: boolean;\n  orgCount: number;\n  orgId: number;\n  orgName: string;\n  orgRole: OrgRole | '';\n  isGrafanaAdmin: boolean;\n  gravatarUrl: string;\n  timezone: string;\n  weekStart: string;\n  locale: string;\n  helpFlags1: number;\n  hasEditPermissionInFolders: boolean;\n  permissions?: UserPermission;\n  fiscalYearStartMonth: number;\n\n  constructor() {\n    this.id = 0;\n    this.isGrafanaAdmin = false;\n    this.isSignedIn = false;\n    this.orgRole = '';\n    this.orgId = 0;\n    this.orgName = '';\n    this.login = '';\n    this.externalUserId = '';\n    this.orgCount = 0;\n    this.timezone = '';\n    this.fiscalYearStartMonth = 0;\n    this.helpFlags1 = 0;\n    this.lightTheme = false;\n    this.hasEditPermissionInFolders = false;\n    this.email = '';\n    this.name = '';\n    this.locale = '';\n    this.weekStart = '';\n    this.gravatarUrl = '';\n\n    if (config.bootData.user) {\n      extend(this, config.bootData.user);\n    }\n  }\n}\n\nexport class ContextSrv {\n  pinned: any;\n  version: any;\n  user: User;\n  isSignedIn: any;\n  isGrafanaAdmin: any;\n  isEditor: any;\n  sidemenuSmallBreakpoint = false;\n  hasEditPermissionInFolders: boolean;\n  minRefreshInterval: string;\n\n  constructor() {\n    if (!config.bootData) {\n      config.bootData = { user: {}, settings: {} } as any;\n    }\n\n    this.user = new User();\n    this.isSignedIn = this.user.isSignedIn;\n    this.isGrafanaAdmin = this.user.isGrafanaAdmin;\n    this.isEditor = this.hasRole('Editor') || this.hasRole('Admin');\n    this.hasEditPermissionInFolders = this.user.hasEditPermissionInFolders;\n    this.minRefreshInterval = config.minRefreshInterval;\n  }\n\n  async fetchUserPermissions() {\n    try {\n      if (this.accessControlEnabled()) {\n        this.user.permissions = await getBackendSrv().get('/api/access-control/user/permissions', {\n          reloadcache: true,\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  /**\n   * Indicate the user has been logged out\n   */\n  setLoggedOut() {\n    this.user.isSignedIn = false;\n    this.isSignedIn = false;\n  }\n\n  hasRole(role: string) {\n    if (role === 'ServerAdmin') {\n      return this.isGrafanaAdmin;\n    } else {\n      return this.user.orgRole === role;\n    }\n  }\n\n  accessControlEnabled(): boolean {\n    return config.rbacEnabled;\n  }\n\n  accessControlBuiltInRoleAssignmentEnabled(): boolean {\n    return config.rbacBuiltInRoleAssignmentEnabled;\n  }\n\n  licensedAccessControlEnabled(): boolean {\n    return featureEnabled('accesscontrol') && config.rbacEnabled;\n  }\n\n  // Checks whether user has required permission\n  hasPermissionInMetadata(action: AccessControlAction | string, object: WithAccessControlMetadata): boolean {\n    // Fallback if access control disabled\n    if (!this.accessControlEnabled()) {\n      return true;\n    }\n\n    return !!object.accessControl?.[action];\n  }\n\n  // Checks whether user has required permission\n  hasPermission(action: AccessControlAction | string): boolean {\n    // Fallback if access control disabled\n    if (!this.accessControlEnabled()) {\n      return true;\n    }\n\n    return !!this.user.permissions?.[action];\n  }\n\n  isGrafanaVisible() {\n    return document.visibilityState === undefined || document.visibilityState === 'visible';\n  }\n\n  // checks whether the passed interval is longer than the configured minimum refresh rate\n  isAllowedInterval(interval: string) {\n    if (!config.minRefreshInterval) {\n      return true;\n    }\n    return rangeUtil.intervalToMs(interval) >= rangeUtil.intervalToMs(config.minRefreshInterval);\n  }\n\n  getValidInterval(interval: string) {\n    if (!this.isAllowedInterval(interval)) {\n      return config.minRefreshInterval;\n    }\n    return interval;\n  }\n\n  hasAccessToExplore() {\n    if (this.accessControlEnabled()) {\n      return this.hasPermission(AccessControlAction.DataSourcesExplore);\n    }\n    return (this.isEditor || config.viewersCanEdit) && config.exploreEnabled;\n  }\n\n  hasAccess(action: string, fallBack: boolean) {\n    if (!this.accessControlEnabled()) {\n      return fallBack;\n    }\n    return this.hasPermission(action);\n  }\n\n  hasAccessInMetadata(action: string, object: WithAccessControlMetadata, fallBack: boolean) {\n    if (!config.rbacEnabled) {\n      return fallBack;\n    }\n    return this.hasPermissionInMetadata(action, object);\n  }\n\n  // evaluates access control permissions, granting access if the user has any of them; uses fallback if access control is disabled\n  evaluatePermission(fallback: () => string[], actions: string[]) {\n    if (!this.accessControlEnabled()) {\n      return fallback();\n    }\n    if (actions.some((action) => this.hasPermission(action))) {\n      return [];\n    }\n    // Hack to reject when user does not have permission\n    return ['Reject'];\n  }\n}\n\nlet contextSrv = new ContextSrv();\nexport { contextSrv };\n\nexport const setContextSrv = (override: ContextSrv) => {\n  if (process.env.NODE_ENV !== 'test') {\n    throw new Error('contextSrv can be only overridden in test environment');\n  }\n  contextSrv = override;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}