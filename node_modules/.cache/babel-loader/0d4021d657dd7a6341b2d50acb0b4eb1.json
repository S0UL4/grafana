{"ast":null,"code":"import React from 'react';\nimport { getValueFromDimension, getColumnFromDimension, formattedValueToString, getFieldDisplayName } from '@grafana/data';\nimport { SeriesTable } from '../../VizTooltip';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const SingleModeGraphTooltip = ({\n  dimensions,\n  activeDimensions,\n  timeZone\n}) => {\n  // not hovering over a point, skip rendering\n  if (activeDimensions.yAxis === null || activeDimensions.yAxis[1] === undefined || activeDimensions.xAxis === null || activeDimensions.xAxis[1] === undefined) {\n    return null;\n  }\n\n  const time = getValueFromDimension(dimensions.xAxis, activeDimensions.xAxis[0], activeDimensions.xAxis[1]);\n  const timeField = getColumnFromDimension(dimensions.xAxis, activeDimensions.xAxis[0]);\n  const processedTime = timeField.display ? formattedValueToString(timeField.display(time)) : time;\n  const valueField = getColumnFromDimension(dimensions.yAxis, activeDimensions.yAxis[0]);\n  const value = getValueFromDimension(dimensions.yAxis, activeDimensions.yAxis[0], activeDimensions.yAxis[1]);\n  const display = valueField.display;\n  const disp = display(value);\n  return /*#__PURE__*/_jsx(SeriesTable, {\n    series: [{\n      color: disp.color,\n      label: getFieldDisplayName(valueField),\n      value: formattedValueToString(disp)\n    }],\n    timestamp: processedTime\n  });\n};\nSingleModeGraphTooltip.displayName = 'SingleModeGraphTooltip';","map":{"version":3,"names":["React","getValueFromDimension","getColumnFromDimension","formattedValueToString","getFieldDisplayName","SeriesTable","SingleModeGraphTooltip","dimensions","activeDimensions","timeZone","yAxis","undefined","xAxis","time","timeField","processedTime","display","valueField","value","disp","color","label","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Graph/GraphTooltip/SingleModeGraphTooltip.tsx"],"sourcesContent":["import React from 'react';\n\nimport {\n  getValueFromDimension,\n  getColumnFromDimension,\n  formattedValueToString,\n  getFieldDisplayName,\n} from '@grafana/data';\n\nimport { SeriesTable } from '../../VizTooltip';\n\nimport { GraphTooltipContentProps } from './types';\n\nexport const SingleModeGraphTooltip: React.FC<GraphTooltipContentProps> = ({\n  dimensions,\n  activeDimensions,\n  timeZone,\n}) => {\n  // not hovering over a point, skip rendering\n  if (\n    activeDimensions.yAxis === null ||\n    activeDimensions.yAxis[1] === undefined ||\n    activeDimensions.xAxis === null ||\n    activeDimensions.xAxis[1] === undefined\n  ) {\n    return null;\n  }\n  const time = getValueFromDimension(dimensions.xAxis, activeDimensions.xAxis[0], activeDimensions.xAxis[1]);\n  const timeField = getColumnFromDimension(dimensions.xAxis, activeDimensions.xAxis[0]);\n  const processedTime = timeField.display ? formattedValueToString(timeField.display(time)) : time;\n\n  const valueField = getColumnFromDimension(dimensions.yAxis, activeDimensions.yAxis[0]);\n  const value = getValueFromDimension(dimensions.yAxis, activeDimensions.yAxis[0], activeDimensions.yAxis[1]);\n  const display = valueField.display!;\n  const disp = display(value);\n\n  return (\n    <SeriesTable\n      series={[\n        {\n          color: disp.color,\n          label: getFieldDisplayName(valueField),\n          value: formattedValueToString(disp),\n        },\n      ]}\n      timestamp={processedTime}\n    />\n  );\n};\n\nSingleModeGraphTooltip.displayName = 'SingleModeGraphTooltip';\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACEC,qBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,mBAJF,QAKO,eALP;AAOA,SAASC,WAAT,QAA4B,kBAA5B;;AAIA,OAAO,MAAMC,sBAA0D,GAAG,CAAC;EACzEC,UADyE;EAEzEC,gBAFyE;EAGzEC;AAHyE,CAAD,KAIpE;EACJ;EACA,IACED,gBAAgB,CAACE,KAAjB,KAA2B,IAA3B,IACAF,gBAAgB,CAACE,KAAjB,CAAuB,CAAvB,MAA8BC,SAD9B,IAEAH,gBAAgB,CAACI,KAAjB,KAA2B,IAF3B,IAGAJ,gBAAgB,CAACI,KAAjB,CAAuB,CAAvB,MAA8BD,SAJhC,EAKE;IACA,OAAO,IAAP;EACD;;EACD,MAAME,IAAI,GAAGZ,qBAAqB,CAACM,UAAU,CAACK,KAAZ,EAAmBJ,gBAAgB,CAACI,KAAjB,CAAuB,CAAvB,CAAnB,EAA8CJ,gBAAgB,CAACI,KAAjB,CAAuB,CAAvB,CAA9C,CAAlC;EACA,MAAME,SAAS,GAAGZ,sBAAsB,CAACK,UAAU,CAACK,KAAZ,EAAmBJ,gBAAgB,CAACI,KAAjB,CAAuB,CAAvB,CAAnB,CAAxC;EACA,MAAMG,aAAa,GAAGD,SAAS,CAACE,OAAV,GAAoBb,sBAAsB,CAACW,SAAS,CAACE,OAAV,CAAkBH,IAAlB,CAAD,CAA1C,GAAsEA,IAA5F;EAEA,MAAMI,UAAU,GAAGf,sBAAsB,CAACK,UAAU,CAACG,KAAZ,EAAmBF,gBAAgB,CAACE,KAAjB,CAAuB,CAAvB,CAAnB,CAAzC;EACA,MAAMQ,KAAK,GAAGjB,qBAAqB,CAACM,UAAU,CAACG,KAAZ,EAAmBF,gBAAgB,CAACE,KAAjB,CAAuB,CAAvB,CAAnB,EAA8CF,gBAAgB,CAACE,KAAjB,CAAuB,CAAvB,CAA9C,CAAnC;EACA,MAAMM,OAAO,GAAGC,UAAU,CAACD,OAA3B;EACA,MAAMG,IAAI,GAAGH,OAAO,CAACE,KAAD,CAApB;EAEA,oBACE,KAAC,WAAD;IACE,MAAM,EAAE,CACN;MACEE,KAAK,EAAED,IAAI,CAACC,KADd;MAEEC,KAAK,EAAEjB,mBAAmB,CAACa,UAAD,CAF5B;MAGEC,KAAK,EAAEf,sBAAsB,CAACgB,IAAD;IAH/B,CADM,CADV;IAQE,SAAS,EAAEJ;EARb,EADF;AAYD,CAnCM;AAqCPT,sBAAsB,CAACgB,WAAvB,GAAqC,wBAArC"},"metadata":{},"sourceType":"module"}