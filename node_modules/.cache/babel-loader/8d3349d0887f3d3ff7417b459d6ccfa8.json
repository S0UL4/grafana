{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { fieldMatchers } from '../matchers';\nimport { FieldMatcherID } from '../matchers/ids';\nimport { DataTransformerID } from './ids';\nimport { outerJoinDataFrames } from './joinDataFrames';\nexport const seriesToColumnsTransformer = {\n  id: DataTransformerID.seriesToColumns,\n  name: 'Series as columns',\n  // Called 'Outer join' in the UI!\n  description: 'Groups series by field and returns values as columns',\n  defaultOptions: {\n    byField: undefined // DEFAULT_KEY_FIELD,\n\n  },\n  operator: options => source => source.pipe(map(data => seriesToColumnsTransformer.transformer(options)(data))),\n  transformer: options => {\n    let joinBy = undefined;\n    return data => {\n      if (data.length > 1) {\n        if (options.byField && !joinBy) {\n          joinBy = fieldMatchers.get(FieldMatcherID.byName).get(options.byField);\n        }\n\n        const joined = outerJoinDataFrames({\n          frames: data,\n          joinBy\n        });\n\n        if (joined) {\n          return [joined];\n        }\n      }\n\n      return data;\n    };\n  }\n};","map":{"version":3,"names":["map","fieldMatchers","FieldMatcherID","DataTransformerID","outerJoinDataFrames","seriesToColumnsTransformer","id","seriesToColumns","name","description","defaultOptions","byField","undefined","operator","options","source","pipe","data","transformer","joinBy","length","get","byName","joined","frames"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/transformers/seriesToColumns.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { DataFrame, SynchronousDataTransformerInfo, FieldMatcher } from '../../types';\nimport { fieldMatchers } from '../matchers';\nimport { FieldMatcherID } from '../matchers/ids';\n\nimport { DataTransformerID } from './ids';\nimport { outerJoinDataFrames } from './joinDataFrames';\n\nexport interface SeriesToColumnsOptions {\n  byField?: string; // empty will pick the field automatically\n}\n\nexport const seriesToColumnsTransformer: SynchronousDataTransformerInfo<SeriesToColumnsOptions> = {\n  id: DataTransformerID.seriesToColumns,\n  name: 'Series as columns', // Called 'Outer join' in the UI!\n  description: 'Groups series by field and returns values as columns',\n  defaultOptions: {\n    byField: undefined, // DEFAULT_KEY_FIELD,\n  },\n\n  operator: (options) => (source) => source.pipe(map((data) => seriesToColumnsTransformer.transformer(options)(data))),\n\n  transformer: (options: SeriesToColumnsOptions) => {\n    let joinBy: FieldMatcher | undefined = undefined;\n    return (data: DataFrame[]) => {\n      if (data.length > 1) {\n        if (options.byField && !joinBy) {\n          joinBy = fieldMatchers.get(FieldMatcherID.byName).get(options.byField);\n        }\n        const joined = outerJoinDataFrames({ frames: data, joinBy });\n        if (joined) {\n          return [joined];\n        }\n      }\n      return data;\n    };\n  },\n};\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAGA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA,SAASC,iBAAT,QAAkC,OAAlC;AACA,SAASC,mBAAT,QAAoC,kBAApC;AAMA,OAAO,MAAMC,0BAAkF,GAAG;EAChGC,EAAE,EAAEH,iBAAiB,CAACI,eAD0E;EAEhGC,IAAI,EAAE,mBAF0F;EAErE;EAC3BC,WAAW,EAAE,sDAHmF;EAIhGC,cAAc,EAAE;IACdC,OAAO,EAAEC,SADK,CACM;;EADN,CAJgF;EAQhGC,QAAQ,EAAGC,OAAD,IAAcC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAYhB,GAAG,CAAEiB,IAAD,IAAUZ,0BAA0B,CAACa,WAA3B,CAAuCJ,OAAvC,EAAgDG,IAAhD,CAAX,CAAf,CAR6D;EAUhGC,WAAW,EAAGJ,OAAD,IAAqC;IAChD,IAAIK,MAAgC,GAAGP,SAAvC;IACA,OAAQK,IAAD,IAAuB;MAC5B,IAAIA,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;QACnB,IAAIN,OAAO,CAACH,OAAR,IAAmB,CAACQ,MAAxB,EAAgC;UAC9BA,MAAM,GAAGlB,aAAa,CAACoB,GAAd,CAAkBnB,cAAc,CAACoB,MAAjC,EAAyCD,GAAzC,CAA6CP,OAAO,CAACH,OAArD,CAAT;QACD;;QACD,MAAMY,MAAM,GAAGnB,mBAAmB,CAAC;UAAEoB,MAAM,EAAEP,IAAV;UAAgBE;QAAhB,CAAD,CAAlC;;QACA,IAAII,MAAJ,EAAY;UACV,OAAO,CAACA,MAAD,CAAP;QACD;MACF;;MACD,OAAON,IAAP;IACD,CAXD;EAYD;AAxB+F,CAA3F"},"metadata":{},"sourceType":"module"}