{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Registry } from '@grafana/data';\nimport { PromVisualQueryOperationCategory } from '../types';\nexport class LokiAndPromQueryModellerBase {\n  constructor(getOperations) {\n    _defineProperty(this, \"operationsRegisty\", void 0);\n\n    _defineProperty(this, \"categories\", []);\n\n    this.operationsRegisty = new Registry(getOperations);\n  }\n\n  setOperationCategories(categories) {\n    this.categories = categories;\n  }\n\n  getOperationsForCategory(category) {\n    return this.operationsRegisty.list().filter(op => op.category === category && !op.hideFromList);\n  }\n\n  getAlternativeOperations(key) {\n    return this.operationsRegisty.list().filter(op => op.alternativesKey === key);\n  }\n\n  getCategories() {\n    return this.categories;\n  }\n\n  getOperationDef(id) {\n    return this.operationsRegisty.getIfExists(id);\n  }\n\n  renderOperations(queryString, operations) {\n    for (const operation of operations) {\n      const def = this.operationsRegisty.getIfExists(operation.id);\n\n      if (!def) {\n        throw new Error(`Could not find operation ${operation.id} in the registry`);\n      }\n\n      queryString = def.renderer(operation, def, queryString);\n    }\n\n    return queryString;\n  }\n\n  renderBinaryQueries(queryString, binaryQueries) {\n    if (binaryQueries) {\n      for (const binQuery of binaryQueries) {\n        queryString = `${this.renderBinaryQuery(queryString, binQuery)}`;\n      }\n    }\n\n    return queryString;\n  }\n\n  renderBinaryQuery(leftOperand, binaryQuery) {\n    let result = leftOperand + ` ${binaryQuery.operator} `;\n\n    if (binaryQuery.vectorMatches) {\n      result += `${binaryQuery.vectorMatchesType}(${binaryQuery.vectorMatches}) `;\n    }\n\n    return result + this.renderQuery(binaryQuery.query, true);\n  }\n\n  renderLabels(labels) {\n    if (labels.length === 0) {\n      return '';\n    }\n\n    let expr = '{';\n\n    for (const filter of labels) {\n      if (expr !== '{') {\n        expr += ', ';\n      }\n\n      expr += `${filter.label}${filter.op}\"${filter.value}\"`;\n    }\n\n    return expr + `}`;\n  }\n\n  renderQuery(query, nested) {\n    var _query$metric, _query$binaryQueries, _query$binaryQueries2;\n\n    let queryString = `${(_query$metric = query.metric) !== null && _query$metric !== void 0 ? _query$metric : ''}${this.renderLabels(query.labels)}`;\n    queryString = this.renderOperations(queryString, query.operations);\n\n    if (!nested && this.hasBinaryOp(query) && Boolean((_query$binaryQueries = query.binaryQueries) === null || _query$binaryQueries === void 0 ? void 0 : _query$binaryQueries.length)) {\n      queryString = `(${queryString})`;\n    }\n\n    queryString = this.renderBinaryQueries(queryString, query.binaryQueries);\n\n    if (nested && (this.hasBinaryOp(query) || Boolean((_query$binaryQueries2 = query.binaryQueries) === null || _query$binaryQueries2 === void 0 ? void 0 : _query$binaryQueries2.length))) {\n      queryString = `(${queryString})`;\n    }\n\n    return queryString;\n  }\n\n  hasBinaryOp(query) {\n    return query.operations.find(op => {\n      const def = this.getOperationDef(op.id);\n      return (def === null || def === void 0 ? void 0 : def.category) === PromVisualQueryOperationCategory.BinaryOps;\n    }) !== undefined;\n  }\n\n}","map":{"version":3,"names":["Registry","PromVisualQueryOperationCategory","LokiAndPromQueryModellerBase","constructor","getOperations","operationsRegisty","setOperationCategories","categories","getOperationsForCategory","category","list","filter","op","hideFromList","getAlternativeOperations","key","alternativesKey","getCategories","getOperationDef","id","getIfExists","renderOperations","queryString","operations","operation","def","Error","renderer","renderBinaryQueries","binaryQueries","binQuery","renderBinaryQuery","leftOperand","binaryQuery","result","operator","vectorMatches","vectorMatchesType","renderQuery","query","renderLabels","labels","length","expr","label","value","nested","metric","hasBinaryOp","Boolean","find","BinaryOps","undefined"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/shared/LokiAndPromQueryModellerBase.ts"],"sourcesContent":["import { Registry } from '@grafana/data';\n\nimport { PromVisualQueryOperationCategory } from '../types';\n\nimport { QueryBuilderLabelFilter, QueryBuilderOperation, QueryBuilderOperationDef, VisualQueryModeller } from './types';\n\nexport interface VisualQueryBinary<T> {\n  operator: string;\n  vectorMatchesType?: 'on' | 'ignoring';\n  vectorMatches?: string;\n  query: T;\n}\n\nexport interface PromLokiVisualQuery {\n  metric?: string;\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: Array<VisualQueryBinary<PromLokiVisualQuery>>;\n}\n\nexport abstract class LokiAndPromQueryModellerBase implements VisualQueryModeller {\n  protected operationsRegisty: Registry<QueryBuilderOperationDef>;\n  private categories: string[] = [];\n\n  constructor(getOperations: () => QueryBuilderOperationDef[]) {\n    this.operationsRegisty = new Registry<QueryBuilderOperationDef>(getOperations);\n  }\n\n  protected setOperationCategories(categories: string[]) {\n    this.categories = categories;\n  }\n\n  getOperationsForCategory(category: string) {\n    return this.operationsRegisty.list().filter((op) => op.category === category && !op.hideFromList);\n  }\n\n  getAlternativeOperations(key: string) {\n    return this.operationsRegisty.list().filter((op) => op.alternativesKey === key);\n  }\n\n  getCategories() {\n    return this.categories;\n  }\n\n  getOperationDef(id: string): QueryBuilderOperationDef | undefined {\n    return this.operationsRegisty.getIfExists(id);\n  }\n\n  renderOperations(queryString: string, operations: QueryBuilderOperation[]) {\n    for (const operation of operations) {\n      const def = this.operationsRegisty.getIfExists(operation.id);\n      if (!def) {\n        throw new Error(`Could not find operation ${operation.id} in the registry`);\n      }\n      queryString = def.renderer(operation, def, queryString);\n    }\n\n    return queryString;\n  }\n\n  renderBinaryQueries(queryString: string, binaryQueries?: Array<VisualQueryBinary<PromLokiVisualQuery>>) {\n    if (binaryQueries) {\n      for (const binQuery of binaryQueries) {\n        queryString = `${this.renderBinaryQuery(queryString, binQuery)}`;\n      }\n    }\n    return queryString;\n  }\n\n  private renderBinaryQuery(leftOperand: string, binaryQuery: VisualQueryBinary<PromLokiVisualQuery>) {\n    let result = leftOperand + ` ${binaryQuery.operator} `;\n\n    if (binaryQuery.vectorMatches) {\n      result += `${binaryQuery.vectorMatchesType}(${binaryQuery.vectorMatches}) `;\n    }\n\n    return result + this.renderQuery(binaryQuery.query, true);\n  }\n\n  renderLabels(labels: QueryBuilderLabelFilter[]) {\n    if (labels.length === 0) {\n      return '';\n    }\n\n    let expr = '{';\n    for (const filter of labels) {\n      if (expr !== '{') {\n        expr += ', ';\n      }\n\n      expr += `${filter.label}${filter.op}\"${filter.value}\"`;\n    }\n\n    return expr + `}`;\n  }\n\n  renderQuery(query: PromLokiVisualQuery, nested?: boolean) {\n    let queryString = `${query.metric ?? ''}${this.renderLabels(query.labels)}`;\n    queryString = this.renderOperations(queryString, query.operations);\n\n    if (!nested && this.hasBinaryOp(query) && Boolean(query.binaryQueries?.length)) {\n      queryString = `(${queryString})`;\n    }\n\n    queryString = this.renderBinaryQueries(queryString, query.binaryQueries);\n\n    if (nested && (this.hasBinaryOp(query) || Boolean(query.binaryQueries?.length))) {\n      queryString = `(${queryString})`;\n    }\n\n    return queryString;\n  }\n\n  hasBinaryOp(query: PromLokiVisualQuery): boolean {\n    return (\n      query.operations.find((op) => {\n        const def = this.getOperationDef(op.id);\n        return def?.category === PromVisualQueryOperationCategory.BinaryOps;\n      }) !== undefined\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}