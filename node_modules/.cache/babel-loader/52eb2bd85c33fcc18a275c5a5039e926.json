{"ast":null,"code":"import { cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { FadeTransition, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { NestedEntry } from './NestedEntry';\nimport getStyles from './styles';\nimport { findRow } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst NestedRow = ({\n  row,\n  selectedRows,\n  level,\n  requestNestedRows,\n  onRowSelectedChange,\n  selectableEntryTypes,\n  scrollIntoView\n}) => {\n  var _row$location;\n\n  const styles = useStyles2(getStyles);\n  const [rowStatus, setRowStatus] = useState('closed');\n  const isSelected = !!selectedRows.find(v => v.uri === row.uri);\n  const isDisabled = selectedRows.length > 0 && !isSelected;\n  const isOpen = rowStatus === 'open';\n\n  const onRowToggleCollapse = async () => {\n    if (rowStatus === 'open') {\n      setRowStatus('closed');\n      return;\n    }\n\n    setRowStatus('loading');\n    requestNestedRows(row).then(() => setRowStatus('open')).catch(() => setRowStatus('closed'));\n  }; // opens the resource group on load of component if there was a previously saved selection\n\n\n  useEffect(() => {\n    var _row$children;\n\n    // Assuming we don't have multi-select yet\n    const selectedRow = selectedRows[0];\n    const containsChild = selectedRow && !!findRow((_row$children = row.children) !== null && _row$children !== void 0 ? _row$children : [], selectedRow.uri);\n\n    if (containsChild) {\n      setRowStatus('open');\n    }\n  }, [selectedRows, row]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"tr\", {\n      className: cx(styles.row, isDisabled && styles.disabledRow),\n      children: [/*#__PURE__*/_jsx(\"td\", {\n        className: styles.cell,\n        children: /*#__PURE__*/_jsx(NestedEntry, {\n          level: level,\n          isSelected: isSelected,\n          isDisabled: isDisabled,\n          isOpen: isOpen,\n          entry: row,\n          onToggleCollapse: onRowToggleCollapse,\n          onSelectedChange: onRowSelectedChange,\n          isSelectable: selectableEntryTypes.some(type => type === row.type),\n          scrollIntoView: scrollIntoView\n        })\n      }), /*#__PURE__*/_jsx(\"td\", {\n        className: styles.cell,\n        children: row.typeLabel\n      }), /*#__PURE__*/_jsx(\"td\", {\n        className: styles.cell,\n        children: (_row$location = row.location) !== null && _row$location !== void 0 ? _row$location : '-'\n      })]\n    }, row.id), isOpen && row.children && Object.keys(row.children).length > 0 && row.children.map(childRow => /*#__PURE__*/_jsx(NestedRow, {\n      row: childRow,\n      selectedRows: selectedRows,\n      level: level + 1,\n      requestNestedRows: requestNestedRows,\n      onRowSelectedChange: onRowSelectedChange,\n      selectableEntryTypes: selectableEntryTypes,\n      scrollIntoView: scrollIntoView\n    }, childRow.uri)), /*#__PURE__*/_jsx(FadeTransition, {\n      visible: rowStatus === 'loading',\n      children: /*#__PURE__*/_jsx(\"tr\", {\n        children: /*#__PURE__*/_jsx(\"td\", {\n          className: cx(styles.cell, styles.loadingCell),\n          colSpan: 3,\n          children: /*#__PURE__*/_jsx(LoadingPlaceholder, {\n            text: \"Loading...\",\n            className: styles.spinner\n          })\n        })\n      })\n    })]\n  });\n};\n\nexport default NestedRow;","map":{"version":3,"names":["cx","React","useEffect","useState","FadeTransition","LoadingPlaceholder","useStyles2","NestedEntry","getStyles","findRow","NestedRow","row","selectedRows","level","requestNestedRows","onRowSelectedChange","selectableEntryTypes","scrollIntoView","styles","rowStatus","setRowStatus","isSelected","find","v","uri","isDisabled","length","isOpen","onRowToggleCollapse","then","catch","selectedRow","containsChild","children","disabledRow","cell","some","type","typeLabel","location","id","Object","keys","map","childRow","loadingCell","spinner"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/NestedRow.tsx"],"sourcesContent":["import { cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { FadeTransition, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\n\nimport { NestedEntry } from './NestedEntry';\nimport getStyles from './styles';\nimport { ResourceRow, ResourceRowGroup, ResourceRowType } from './types';\nimport { findRow } from './utils';\n\ninterface NestedRowProps {\n  row: ResourceRow;\n  level: number;\n  selectedRows: ResourceRowGroup;\n  requestNestedRows: (row: ResourceRow) => Promise<void>;\n  onRowSelectedChange: (row: ResourceRow, selected: boolean) => void;\n  selectableEntryTypes: ResourceRowType[];\n  scrollIntoView?: boolean;\n}\n\nconst NestedRow: React.FC<NestedRowProps> = ({\n  row,\n  selectedRows,\n  level,\n  requestNestedRows,\n  onRowSelectedChange,\n  selectableEntryTypes,\n  scrollIntoView,\n}) => {\n  const styles = useStyles2(getStyles);\n  const [rowStatus, setRowStatus] = useState<'open' | 'closed' | 'loading'>('closed');\n\n  const isSelected = !!selectedRows.find((v) => v.uri === row.uri);\n  const isDisabled = selectedRows.length > 0 && !isSelected;\n  const isOpen = rowStatus === 'open';\n\n  const onRowToggleCollapse = async () => {\n    if (rowStatus === 'open') {\n      setRowStatus('closed');\n      return;\n    }\n    setRowStatus('loading');\n    requestNestedRows(row)\n      .then(() => setRowStatus('open'))\n      .catch(() => setRowStatus('closed'));\n  };\n\n  // opens the resource group on load of component if there was a previously saved selection\n  useEffect(() => {\n    // Assuming we don't have multi-select yet\n    const selectedRow = selectedRows[0];\n\n    const containsChild = selectedRow && !!findRow(row.children ?? [], selectedRow.uri);\n\n    if (containsChild) {\n      setRowStatus('open');\n    }\n  }, [selectedRows, row]);\n\n  return (\n    <>\n      <tr className={cx(styles.row, isDisabled && styles.disabledRow)} key={row.id}>\n        <td className={styles.cell}>\n          <NestedEntry\n            level={level}\n            isSelected={isSelected}\n            isDisabled={isDisabled}\n            isOpen={isOpen}\n            entry={row}\n            onToggleCollapse={onRowToggleCollapse}\n            onSelectedChange={onRowSelectedChange}\n            isSelectable={selectableEntryTypes.some((type) => type === row.type)}\n            scrollIntoView={scrollIntoView}\n          />\n        </td>\n\n        <td className={styles.cell}>{row.typeLabel}</td>\n\n        <td className={styles.cell}>{row.location ?? '-'}</td>\n      </tr>\n\n      {isOpen &&\n        row.children &&\n        Object.keys(row.children).length > 0 &&\n        row.children.map((childRow) => (\n          <NestedRow\n            key={childRow.uri}\n            row={childRow}\n            selectedRows={selectedRows}\n            level={level + 1}\n            requestNestedRows={requestNestedRows}\n            onRowSelectedChange={onRowSelectedChange}\n            selectableEntryTypes={selectableEntryTypes}\n            scrollIntoView={scrollIntoView}\n          />\n        ))}\n\n      <FadeTransition visible={rowStatus === 'loading'}>\n        <tr>\n          <td className={cx(styles.cell, styles.loadingCell)} colSpan={3}>\n            <LoadingPlaceholder text=\"Loading...\" className={styles.spinner} />\n          </td>\n        </tr>\n      </FadeTransition>\n    </>\n  );\n};\n\nexport default NestedRow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}