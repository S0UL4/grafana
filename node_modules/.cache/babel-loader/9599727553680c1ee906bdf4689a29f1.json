{"ast":null,"code":"const AGGREGATION_OPERATORS = [{\n  label: 'sum',\n  insertText: 'sum',\n  documentation: 'Calculate sum over dimensions'\n}, {\n  label: 'min',\n  insertText: 'min',\n  documentation: 'Select minimum over dimensions'\n}, {\n  label: 'max',\n  insertText: 'max',\n  documentation: 'Select maximum over dimensions'\n}, {\n  label: 'avg',\n  insertText: 'avg',\n  documentation: 'Calculate the average over dimensions'\n}, {\n  label: 'stddev',\n  insertText: 'stddev',\n  documentation: 'Calculate population standard deviation over dimensions'\n}, {\n  label: 'stdvar',\n  insertText: 'stdvar',\n  documentation: 'Calculate population standard variance over dimensions'\n}, {\n  label: 'count',\n  insertText: 'count',\n  documentation: 'Count number of elements in the vector'\n}, {\n  label: 'bottomk',\n  insertText: 'bottomk',\n  documentation: 'Smallest k elements by sample value'\n}, {\n  label: 'topk',\n  insertText: 'topk',\n  documentation: 'Largest k elements by sample value'\n}];\nexport const PIPE_PARSERS = [{\n  label: 'json',\n  insertText: 'json',\n  documentation: 'Extracting labels from the log line using json parser. Only available in Loki 2.0+.'\n}, {\n  label: 'regexp',\n  insertText: 'regexp \"\"',\n  documentation: 'Extracting labels from the log line using regexp parser. Only available in Loki 2.0+.',\n  move: -1\n}, {\n  label: 'logfmt',\n  insertText: 'logfmt',\n  documentation: 'Extracting labels from the log line using logfmt parser. Only available in Loki 2.0+.'\n}, {\n  label: 'pattern',\n  insertText: 'pattern',\n  documentation: 'Extracting labels from the log line using pattern parser. Only available in Loki 2.3+.'\n}, {\n  label: 'unpack',\n  insertText: 'unpack',\n  detail: 'unpack identifier',\n  documentation: 'Parses a JSON log line, unpacking all embedded labels in the pack stage. A special property \"_entry\" will also be used to replace the original log line. Only available in Loki 2.2+.'\n}];\nexport const PIPE_OPERATORS = [{\n  label: 'unwrap',\n  insertText: 'unwrap',\n  detail: 'unwrap identifier',\n  documentation: 'Take labels and use the values as sample data for metric aggregations. Only available in Loki 2.0+.'\n}, {\n  label: 'label_format',\n  insertText: 'label_format',\n  documentation: 'Use to rename, modify or add labels. For example, | label_format foo=bar . Only available in Loki 2.0+.'\n}, {\n  label: 'line_format',\n  insertText: 'line_format',\n  documentation: 'Rewrites log line content. For example, | line_format \"{{.query}} {{.duration}}\" . Only available in Loki 2.0+.'\n}];\nexport const RANGE_VEC_FUNCTIONS = [{\n  insertText: 'avg_over_time',\n  label: 'avg_over_time',\n  detail: 'avg_over_time(range-vector)',\n  documentation: 'The average of all values in the specified interval. Only available in Loki 2.0+.'\n}, {\n  insertText: 'min_over_time',\n  label: 'min_over_time',\n  detail: 'min_over_time(range-vector)',\n  documentation: 'The minimum of all values in the specified interval. Only available in Loki 2.0+.'\n}, {\n  insertText: 'max_over_time',\n  label: 'max_over_time',\n  detail: 'max_over_time(range-vector)',\n  documentation: 'The maximum of all values in the specified interval. Only available in Loki 2.0+.'\n}, {\n  insertText: 'first_over_time',\n  label: 'first_over_time',\n  detail: 'first_over_time(range-vector)',\n  documentation: 'The first of all values in the specified interval. Only available in Loki 2.3+.'\n}, {\n  insertText: 'last_over_time',\n  label: 'last_over_time',\n  detail: 'last_over_time(range-vector)',\n  documentation: 'The last of all values in the specified interval. Only available in Loki 2.3+.'\n}, {\n  insertText: 'sum_over_time',\n  label: 'sum_over_time',\n  detail: 'sum_over_time(range-vector)',\n  documentation: 'The sum of all values in the specified interval. Only available in Loki 2.0+.'\n}, {\n  insertText: 'count_over_time',\n  label: 'count_over_time',\n  detail: 'count_over_time(range-vector)',\n  documentation: 'The count of all values in the specified interval.'\n}, {\n  insertText: 'stdvar_over_time',\n  label: 'stdvar_over_time',\n  detail: 'stdvar_over_time(range-vector)',\n  documentation: 'The population standard variance of the values in the specified interval. Only available in Loki 2.0+.'\n}, {\n  insertText: 'stddev_over_time',\n  label: 'stddev_over_time',\n  detail: 'stddev_over_time(range-vector)',\n  documentation: 'The population standard deviation of the values in the specified interval. Only available in Loki 2.0+.'\n}, {\n  insertText: 'quantile_over_time',\n  label: 'quantile_over_time',\n  detail: 'quantile_over_time(scalar, range-vector)',\n  documentation: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval. Only available in Loki 2.0+.'\n}, {\n  insertText: 'bytes_over_time',\n  label: 'bytes_over_time',\n  detail: 'bytes_over_time(range-vector)',\n  documentation: 'Counts the amount of bytes used by each log stream for a given range'\n}, {\n  insertText: 'bytes_rate',\n  label: 'bytes_rate',\n  detail: 'bytes_rate(range-vector)',\n  documentation: 'Calculates the number of bytes per second for each stream.'\n}, {\n  insertText: 'rate',\n  label: 'rate',\n  detail: 'rate(v range-vector)',\n  documentation: 'Calculates the number of entries per second.'\n}];\nexport const FUNCTIONS = [...AGGREGATION_OPERATORS, ...RANGE_VEC_FUNCTIONS];\nexport const LOKI_KEYWORDS = [...FUNCTIONS, ...PIPE_OPERATORS, ...PIPE_PARSERS].map(keyword => keyword.label);\nexport const lokiGrammar = {\n  comment: {\n    pattern: /#.*/\n  },\n  'context-aggregation': {\n    pattern: /((without|by)\\s*)\\([^)]*\\)/,\n    // by ()\n    lookbehind: true,\n    inside: {\n      'label-key': {\n        pattern: /[^(),\\s][^,)]*[^),\\s]*/,\n        alias: 'attr-name'\n      },\n      punctuation: /[()]/\n    }\n  },\n  'context-labels': {\n    pattern: /\\{[^}]*(?=}?)/,\n    greedy: true,\n    inside: {\n      comment: {\n        pattern: /#.*/\n      },\n      'label-key': {\n        pattern: /[a-zA-Z_]\\w*(?=\\s*(=|!=|=~|!~))/,\n        alias: 'attr-name',\n        greedy: true\n      },\n      'label-value': {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'attr-value'\n      },\n      punctuation: /[{]/\n    }\n  },\n  'context-pipe': {\n    pattern: /\\s\\|[^=~]\\s?\\w*/i,\n    inside: {\n      'pipe-operator': {\n        pattern: /\\|/i,\n        alias: 'operator'\n      },\n      'pipe-operations': {\n        pattern: new RegExp(`${[...PIPE_PARSERS, ...PIPE_OPERATORS].map(f => f.label).join('|')}`, 'i'),\n        alias: 'keyword'\n      }\n    }\n  },\n  function: new RegExp(`\\\\b(?:${FUNCTIONS.map(f => f.label).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  'context-range': [{\n    pattern: /\\[[^\\]]*(?=\\])/,\n    // [1m]\n    inside: {\n      'range-duration': {\n        pattern: /\\b\\d+[smhdwy]\\b/i,\n        alias: 'number'\n      }\n    }\n  }, {\n    pattern: /(offset\\s+)\\w+/,\n    // offset 1m\n    lookbehind: true,\n    inside: {\n      'range-duration': {\n        pattern: /\\b\\d+[smhdwy]\\b/i,\n        alias: 'number'\n      }\n    }\n  }],\n  quote: {\n    pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n    alias: 'string',\n    greedy: true\n  },\n  backticks: {\n    pattern: /`(?:\\\\.|[^\\\\`])*`/,\n    alias: 'string',\n    greedy: true\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  operator: /\\s?(\\|[=~]?|!=?|<(?:=>?|<|>)?|>[>=]?)\\s?/i,\n  punctuation: /[{}(),.]/\n};\nexport default lokiGrammar;","map":{"version":3,"names":["AGGREGATION_OPERATORS","label","insertText","documentation","PIPE_PARSERS","move","detail","PIPE_OPERATORS","RANGE_VEC_FUNCTIONS","FUNCTIONS","LOKI_KEYWORDS","map","keyword","lokiGrammar","comment","pattern","lookbehind","inside","alias","punctuation","greedy","RegExp","f","join","function","quote","backticks","number","operator"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/syntax.ts"],"sourcesContent":["import { Grammar } from 'prismjs';\n\nimport { CompletionItem } from '@grafana/ui';\n\nconst AGGREGATION_OPERATORS: CompletionItem[] = [\n  {\n    label: 'sum',\n    insertText: 'sum',\n    documentation: 'Calculate sum over dimensions',\n  },\n  {\n    label: 'min',\n    insertText: 'min',\n    documentation: 'Select minimum over dimensions',\n  },\n  {\n    label: 'max',\n    insertText: 'max',\n    documentation: 'Select maximum over dimensions',\n  },\n  {\n    label: 'avg',\n    insertText: 'avg',\n    documentation: 'Calculate the average over dimensions',\n  },\n  {\n    label: 'stddev',\n    insertText: 'stddev',\n    documentation: 'Calculate population standard deviation over dimensions',\n  },\n  {\n    label: 'stdvar',\n    insertText: 'stdvar',\n    documentation: 'Calculate population standard variance over dimensions',\n  },\n  {\n    label: 'count',\n    insertText: 'count',\n    documentation: 'Count number of elements in the vector',\n  },\n  {\n    label: 'bottomk',\n    insertText: 'bottomk',\n    documentation: 'Smallest k elements by sample value',\n  },\n  {\n    label: 'topk',\n    insertText: 'topk',\n    documentation: 'Largest k elements by sample value',\n  },\n];\n\nexport const PIPE_PARSERS: CompletionItem[] = [\n  {\n    label: 'json',\n    insertText: 'json',\n    documentation: 'Extracting labels from the log line using json parser. Only available in Loki 2.0+.',\n  },\n  {\n    label: 'regexp',\n    insertText: 'regexp \"\"',\n    documentation: 'Extracting labels from the log line using regexp parser. Only available in Loki 2.0+.',\n    move: -1,\n  },\n  {\n    label: 'logfmt',\n    insertText: 'logfmt',\n    documentation: 'Extracting labels from the log line using logfmt parser. Only available in Loki 2.0+.',\n  },\n  {\n    label: 'pattern',\n    insertText: 'pattern',\n    documentation: 'Extracting labels from the log line using pattern parser. Only available in Loki 2.3+.',\n  },\n  {\n    label: 'unpack',\n    insertText: 'unpack',\n    detail: 'unpack identifier',\n    documentation:\n      'Parses a JSON log line, unpacking all embedded labels in the pack stage. A special property \"_entry\" will also be used to replace the original log line. Only available in Loki 2.2+.',\n  },\n];\n\nexport const PIPE_OPERATORS: CompletionItem[] = [\n  {\n    label: 'unwrap',\n    insertText: 'unwrap',\n    detail: 'unwrap identifier',\n    documentation:\n      'Take labels and use the values as sample data for metric aggregations. Only available in Loki 2.0+.',\n  },\n  {\n    label: 'label_format',\n    insertText: 'label_format',\n    documentation:\n      'Use to rename, modify or add labels. For example, | label_format foo=bar . Only available in Loki 2.0+.',\n  },\n  {\n    label: 'line_format',\n    insertText: 'line_format',\n    documentation:\n      'Rewrites log line content. For example, | line_format \"{{.query}} {{.duration}}\" . Only available in Loki 2.0+.',\n  },\n];\n\nexport const RANGE_VEC_FUNCTIONS = [\n  {\n    insertText: 'avg_over_time',\n    label: 'avg_over_time',\n    detail: 'avg_over_time(range-vector)',\n    documentation: 'The average of all values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'min_over_time',\n    label: 'min_over_time',\n    detail: 'min_over_time(range-vector)',\n    documentation: 'The minimum of all values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'max_over_time',\n    label: 'max_over_time',\n    detail: 'max_over_time(range-vector)',\n    documentation: 'The maximum of all values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'first_over_time',\n    label: 'first_over_time',\n    detail: 'first_over_time(range-vector)',\n    documentation: 'The first of all values in the specified interval. Only available in Loki 2.3+.',\n  },\n  {\n    insertText: 'last_over_time',\n    label: 'last_over_time',\n    detail: 'last_over_time(range-vector)',\n    documentation: 'The last of all values in the specified interval. Only available in Loki 2.3+.',\n  },\n  {\n    insertText: 'sum_over_time',\n    label: 'sum_over_time',\n    detail: 'sum_over_time(range-vector)',\n    documentation: 'The sum of all values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'count_over_time',\n    label: 'count_over_time',\n    detail: 'count_over_time(range-vector)',\n    documentation: 'The count of all values in the specified interval.',\n  },\n  {\n    insertText: 'stdvar_over_time',\n    label: 'stdvar_over_time',\n    detail: 'stdvar_over_time(range-vector)',\n    documentation:\n      'The population standard variance of the values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'stddev_over_time',\n    label: 'stddev_over_time',\n    detail: 'stddev_over_time(range-vector)',\n    documentation:\n      'The population standard deviation of the values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'quantile_over_time',\n    label: 'quantile_over_time',\n    detail: 'quantile_over_time(scalar, range-vector)',\n    documentation: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval. Only available in Loki 2.0+.',\n  },\n  {\n    insertText: 'bytes_over_time',\n    label: 'bytes_over_time',\n    detail: 'bytes_over_time(range-vector)',\n    documentation: 'Counts the amount of bytes used by each log stream for a given range',\n  },\n  {\n    insertText: 'bytes_rate',\n    label: 'bytes_rate',\n    detail: 'bytes_rate(range-vector)',\n    documentation: 'Calculates the number of bytes per second for each stream.',\n  },\n  {\n    insertText: 'rate',\n    label: 'rate',\n    detail: 'rate(v range-vector)',\n    documentation: 'Calculates the number of entries per second.',\n  },\n];\n\nexport const FUNCTIONS = [...AGGREGATION_OPERATORS, ...RANGE_VEC_FUNCTIONS];\nexport const LOKI_KEYWORDS = [...FUNCTIONS, ...PIPE_OPERATORS, ...PIPE_PARSERS].map((keyword) => keyword.label);\n\nexport const lokiGrammar: Grammar = {\n  comment: {\n    pattern: /#.*/,\n  },\n  'context-aggregation': {\n    pattern: /((without|by)\\s*)\\([^)]*\\)/, // by ()\n    lookbehind: true,\n    inside: {\n      'label-key': {\n        pattern: /[^(),\\s][^,)]*[^),\\s]*/,\n        alias: 'attr-name',\n      },\n      punctuation: /[()]/,\n    },\n  },\n  'context-labels': {\n    pattern: /\\{[^}]*(?=}?)/,\n    greedy: true,\n    inside: {\n      comment: {\n        pattern: /#.*/,\n      },\n      'label-key': {\n        pattern: /[a-zA-Z_]\\w*(?=\\s*(=|!=|=~|!~))/,\n        alias: 'attr-name',\n        greedy: true,\n      },\n      'label-value': {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'attr-value',\n      },\n      punctuation: /[{]/,\n    },\n  },\n  'context-pipe': {\n    pattern: /\\s\\|[^=~]\\s?\\w*/i,\n    inside: {\n      'pipe-operator': {\n        pattern: /\\|/i,\n        alias: 'operator',\n      },\n      'pipe-operations': {\n        pattern: new RegExp(`${[...PIPE_PARSERS, ...PIPE_OPERATORS].map((f) => f.label).join('|')}`, 'i'),\n        alias: 'keyword',\n      },\n    },\n  },\n  function: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  'context-range': [\n    {\n      pattern: /\\[[^\\]]*(?=\\])/, // [1m]\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n    {\n      pattern: /(offset\\s+)\\w+/, // offset 1m\n      lookbehind: true,\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n  ],\n  quote: {\n    pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n    alias: 'string',\n    greedy: true,\n  },\n  backticks: {\n    pattern: /`(?:\\\\.|[^\\\\`])*`/,\n    alias: 'string',\n    greedy: true,\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  operator: /\\s?(\\|[=~]?|!=?|<(?:=>?|<|>)?|>[>=]?)\\s?/i,\n  punctuation: /[{}(),.]/,\n};\n\nexport default lokiGrammar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}