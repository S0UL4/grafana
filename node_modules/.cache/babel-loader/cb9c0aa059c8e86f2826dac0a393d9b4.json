{"ast":null,"code":"var _LoadingIndicator, _Confirm, _span, _thead;\n\nimport React, { useEffect, useMemo, useReducer } from 'react';\nimport { LoadingState } from '@grafana/data';\nimport { Button, Modal, useStyles } from '@grafana/ui';\nimport { getModalStyles } from '../../styles';\nimport { asyncDispatcher } from '../LibraryPanelsView/actions';\nimport { getConnectedDashboards } from './actions';\nimport { deleteLibraryPanelModalReducer, initialDeleteLibraryPanelModalState } from './reducer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DeleteLibraryPanelModal = ({\n  libraryPanel,\n  onDismiss,\n  onConfirm\n}) => {\n  const styles = useStyles(getModalStyles);\n  const [{\n    dashboardTitles,\n    loadingState\n  }, dispatch] = useReducer(deleteLibraryPanelModalReducer, initialDeleteLibraryPanelModalState);\n  const asyncDispatch = useMemo(() => asyncDispatcher(dispatch), [dispatch]);\n  useEffect(() => {\n    asyncDispatch(getConnectedDashboards(libraryPanel));\n  }, [asyncDispatch, libraryPanel]);\n  const connected = Boolean(dashboardTitles.length);\n  const done = loadingState === LoadingState.Done;\n  return /*#__PURE__*/_jsxs(Modal, {\n    className: styles.modal,\n    title: \"Delete library panel\",\n    icon: \"trash-alt\",\n    onDismiss: onDismiss,\n    isOpen: true,\n    children: [!done ? _LoadingIndicator || (_LoadingIndicator = /*#__PURE__*/_jsx(LoadingIndicator, {})) : null, done ? /*#__PURE__*/_jsxs(\"div\", {\n      children: [connected ? /*#__PURE__*/_jsx(HasConnectedDashboards, {\n        dashboardTitles: dashboardTitles\n      }) : null, !connected ? _Confirm || (_Confirm = /*#__PURE__*/_jsx(Confirm, {})) : null, /*#__PURE__*/_jsxs(Modal.ButtonRow, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: onDismiss,\n          fill: \"outline\",\n          children: \"Cancel\"\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"destructive\",\n          onClick: onConfirm,\n          disabled: connected,\n          children: \"Delete\"\n        })]\n      })]\n    }) : null]\n  });\n};\n\nconst LoadingIndicator = () => _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n  children: \"Loading library panel...\"\n}));\n\nconst Confirm = () => {\n  const styles = useStyles(getModalStyles);\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.modalText,\n    children: \"Do you want to delete this panel?\"\n  });\n};\n\nconst HasConnectedDashboards = ({\n  dashboardTitles\n}) => {\n  const styles = useStyles(getModalStyles);\n  const suffix = dashboardTitles.length === 1 ? 'dashboard.' : 'dashboards.';\n  const message = `${dashboardTitles.length} ${suffix}`;\n\n  if (dashboardTitles.length === 0) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsxs(\"p\", {\n      className: styles.textInfo,\n      children: ['This library panel can not be deleted because it is connected to ', /*#__PURE__*/_jsx(\"strong\", {\n        children: message\n      }), ' Remove the library panel from the dashboards listed below and retry.']\n    }), /*#__PURE__*/_jsxs(\"table\", {\n      className: styles.myTable,\n      children: [_thead || (_thead = /*#__PURE__*/_jsx(\"thead\", {\n        children: /*#__PURE__*/_jsx(\"tr\", {\n          children: /*#__PURE__*/_jsx(\"th\", {\n            children: \"Dashboard name\"\n          })\n        })\n      })), /*#__PURE__*/_jsx(\"tbody\", {\n        children: dashboardTitles.map((title, i) => /*#__PURE__*/_jsx(\"tr\", {\n          children: /*#__PURE__*/_jsx(\"td\", {\n            children: title\n          })\n        }, `dash-title-${i}`))\n      })]\n    })]\n  });\n};","map":{"version":3,"names":["React","useEffect","useMemo","useReducer","LoadingState","Button","Modal","useStyles","getModalStyles","asyncDispatcher","getConnectedDashboards","deleteLibraryPanelModalReducer","initialDeleteLibraryPanelModalState","DeleteLibraryPanelModal","libraryPanel","onDismiss","onConfirm","styles","dashboardTitles","loadingState","dispatch","asyncDispatch","connected","Boolean","length","done","Done","modal","LoadingIndicator","Confirm","modalText","HasConnectedDashboards","suffix","message","textInfo","myTable","map","title","i"],"sources":["/home/soula/grafana/public/app/features/library-panels/components/DeleteLibraryPanelModal/DeleteLibraryPanelModal.tsx"],"sourcesContent":["import React, { FC, useEffect, useMemo, useReducer } from 'react';\n\nimport { LoadingState } from '@grafana/data';\nimport { Button, Modal, useStyles } from '@grafana/ui';\n\nimport { getModalStyles } from '../../styles';\nimport { LibraryElementDTO } from '../../types';\nimport { asyncDispatcher } from '../LibraryPanelsView/actions';\n\nimport { getConnectedDashboards } from './actions';\nimport { deleteLibraryPanelModalReducer, initialDeleteLibraryPanelModalState } from './reducer';\n\ninterface Props {\n  libraryPanel: LibraryElementDTO;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport const DeleteLibraryPanelModal: FC<Props> = ({ libraryPanel, onDismiss, onConfirm }) => {\n  const styles = useStyles(getModalStyles);\n  const [{ dashboardTitles, loadingState }, dispatch] = useReducer(\n    deleteLibraryPanelModalReducer,\n    initialDeleteLibraryPanelModalState\n  );\n  const asyncDispatch = useMemo(() => asyncDispatcher(dispatch), [dispatch]);\n  useEffect(() => {\n    asyncDispatch(getConnectedDashboards(libraryPanel));\n  }, [asyncDispatch, libraryPanel]);\n  const connected = Boolean(dashboardTitles.length);\n  const done = loadingState === LoadingState.Done;\n\n  return (\n    <Modal className={styles.modal} title=\"Delete library panel\" icon=\"trash-alt\" onDismiss={onDismiss} isOpen={true}>\n      {!done ? <LoadingIndicator /> : null}\n      {done ? (\n        <div>\n          {connected ? <HasConnectedDashboards dashboardTitles={dashboardTitles} /> : null}\n          {!connected ? <Confirm /> : null}\n\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={onConfirm} disabled={connected}>\n              Delete\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : null}\n    </Modal>\n  );\n};\n\nconst LoadingIndicator: FC = () => <span>Loading library panel...</span>;\n\nconst Confirm: FC = () => {\n  const styles = useStyles(getModalStyles);\n\n  return <div className={styles.modalText}>Do you want to delete this panel?</div>;\n};\n\nconst HasConnectedDashboards: FC<{ dashboardTitles: string[] }> = ({ dashboardTitles }) => {\n  const styles = useStyles(getModalStyles);\n  const suffix = dashboardTitles.length === 1 ? 'dashboard.' : 'dashboards.';\n  const message = `${dashboardTitles.length} ${suffix}`;\n  if (dashboardTitles.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      <p className={styles.textInfo}>\n        {'This library panel can not be deleted because it is connected to '}\n        <strong>{message}</strong>\n        {' Remove the library panel from the dashboards listed below and retry.'}\n      </p>\n      <table className={styles.myTable}>\n        <thead>\n          <tr>\n            <th>Dashboard name</th>\n          </tr>\n        </thead>\n        <tbody>\n          {dashboardTitles.map((title, i) => (\n            <tr key={`dash-title-${i}`}>\n              <td>{title}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}