{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { EchoEventType } from '@grafana/runtime';\nimport { backendSrv } from '../../backend_srv';\n\n/**\n * Echo's performance metrics consumer\n * Reports performance metrics to given url (TODO)\n */\nexport class PerformanceBackend {\n  constructor(options) {\n    _defineProperty(this, \"buffer\", []);\n\n    _defineProperty(this, \"supportedEvents\", [EchoEventType.Performance]);\n\n    _defineProperty(this, \"addEvent\", e => {\n      this.buffer.push(e.payload);\n    });\n\n    _defineProperty(this, \"flush\", () => {\n      if (this.buffer.length === 0) {\n        return;\n      } // Currently we don't have an API for sending the metrics hence logging to console in dev environment\n\n\n      if (process.env.NODE_ENV === 'development') {\n        console.log('PerformanceBackend flushing:', this.buffer);\n      }\n\n      backendSrv.post('/api/frontend-metrics', {\n        events: this.buffer\n      });\n      this.buffer = [];\n    });\n\n    this.options = options;\n  }\n\n}","map":{"version":3,"names":["EchoEventType","backendSrv","PerformanceBackend","constructor","options","Performance","e","buffer","push","payload","length","process","env","NODE_ENV","console","log","post","events"],"sources":["/home/soula/grafana/public/app/core/services/echo/backends/PerformanceBackend.ts"],"sourcesContent":["import { EchoBackend, EchoEvent, EchoEventType } from '@grafana/runtime';\n\nimport { backendSrv } from '../../backend_srv';\n\nexport interface PerformanceEventPayload {\n  name: string;\n  value: number;\n}\n\nexport interface PerformanceEvent extends EchoEvent<EchoEventType.Performance, PerformanceEventPayload> {}\n\nexport interface PerformanceBackendOptions {\n  url?: string;\n}\n\n/**\n * Echo's performance metrics consumer\n * Reports performance metrics to given url (TODO)\n */\nexport class PerformanceBackend implements EchoBackend<PerformanceEvent, PerformanceBackendOptions> {\n  private buffer: PerformanceEventPayload[] = [];\n  supportedEvents = [EchoEventType.Performance];\n\n  constructor(public options: PerformanceBackendOptions) {}\n\n  addEvent = (e: EchoEvent) => {\n    this.buffer.push(e.payload);\n  };\n\n  flush = () => {\n    if (this.buffer.length === 0) {\n      return;\n    }\n\n    // Currently we don't have an API for sending the metrics hence logging to console in dev environment\n    if (process.env.NODE_ENV === 'development') {\n      console.log('PerformanceBackend flushing:', this.buffer);\n    }\n\n    backendSrv.post('/api/frontend-metrics', {\n      events: this.buffer,\n    });\n\n    this.buffer = [];\n  };\n}\n"],"mappings":";;AAAA,SAAiCA,aAAjC,QAAsD,kBAAtD;AAEA,SAASC,UAAT,QAA2B,mBAA3B;;AAaA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAN,CAA6F;EAIlGC,WAAW,CAAQC,OAAR,EAA4C;IAAA,gCAHX,EAGW;;IAAA,yCAFrC,CAACJ,aAAa,CAACK,WAAf,CAEqC;;IAAA,kCAE3CC,CAAD,IAAkB;MAC3B,KAAKC,MAAL,CAAYC,IAAZ,CAAiBF,CAAC,CAACG,OAAnB;IACD,CAJsD;;IAAA,+BAM/C,MAAM;MACZ,IAAI,KAAKF,MAAL,CAAYG,MAAZ,KAAuB,CAA3B,EAA8B;QAC5B;MACD,CAHW,CAKZ;;;MACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;QAC1CC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4C,KAAKR,MAAjD;MACD;;MAEDN,UAAU,CAACe,IAAX,CAAgB,uBAAhB,EAAyC;QACvCC,MAAM,EAAE,KAAKV;MAD0B,CAAzC;MAIA,KAAKA,MAAL,GAAc,EAAd;IACD,CArBsD;;IAAA,KAApCH,OAAoC,GAApCA,OAAoC;EAAE;;AAJyC"},"metadata":{},"sourceType":"module"}