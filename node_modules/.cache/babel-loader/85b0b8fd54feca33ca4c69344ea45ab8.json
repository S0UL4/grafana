{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { EditorField, EditorFieldGroup, EditorRow } from '@grafana/experimental';\nimport { MultiSelect } from '@grafana/ui';\nimport { SYSTEM_LABELS } from '../../constants';\nimport { labelsToGroupedOptions } from '../../functions';\nimport { Aggregation } from './Aggregation';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GroupBy = ({\n  refId,\n  labels: groupBys = [],\n  query,\n  onChange,\n  variableOptionGroup,\n  metricDescriptor\n}) => {\n  var _query$groupBys, _query$groupBys2;\n\n  const options = useMemo(() => [variableOptionGroup, ...labelsToGroupedOptions([...groupBys, ...SYSTEM_LABELS])], [groupBys, variableOptionGroup]);\n  return /*#__PURE__*/_jsx(EditorRow, {\n    children: /*#__PURE__*/_jsxs(EditorFieldGroup, {\n      children: [/*#__PURE__*/_jsx(EditorField, {\n        label: \"Group by\",\n        tooltip: \"You can reduce the amount of data returned for a metric by combining different time series. To combine multiple time series, you can specify a grouping and a function. Grouping is done on the basis of labels. The grouping function is used to combine the time series in the group into a single time series.\",\n        children: /*#__PURE__*/_jsx(MultiSelect, {\n          inputId: `${refId}-group-by`,\n          width: \"auto\",\n          placeholder: \"Choose label\",\n          options: options,\n          value: (_query$groupBys = query.groupBys) !== null && _query$groupBys !== void 0 ? _query$groupBys : [],\n          onChange: options => {\n            onChange(Object.assign({}, query, {\n              groupBys: options.map(o => o.value)\n            }));\n          }\n        })\n      }), /*#__PURE__*/_jsx(Aggregation, {\n        metricDescriptor: metricDescriptor,\n        templateVariableOptions: variableOptionGroup.options,\n        crossSeriesReducer: query.crossSeriesReducer,\n        groupBys: (_query$groupBys2 = query.groupBys) !== null && _query$groupBys2 !== void 0 ? _query$groupBys2 : [],\n        onChange: crossSeriesReducer => onChange(Object.assign({}, query, {\n          crossSeriesReducer\n        })),\n        refId: refId\n      })]\n    })\n  });\n};","map":{"version":3,"names":["React","useMemo","EditorField","EditorFieldGroup","EditorRow","MultiSelect","SYSTEM_LABELS","labelsToGroupedOptions","Aggregation","GroupBy","refId","labels","groupBys","query","onChange","variableOptionGroup","metricDescriptor","options","map","o","value","crossSeriesReducer"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/Experimental/GroupBy.tsx"],"sourcesContent":["import React, { FunctionComponent, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow } from '@grafana/experimental';\nimport { MultiSelect } from '@grafana/ui';\n\nimport { SYSTEM_LABELS } from '../../constants';\nimport { labelsToGroupedOptions } from '../../functions';\nimport { MetricDescriptor, MetricQuery } from '../../types';\n\nimport { Aggregation } from './Aggregation';\n\nexport interface Props {\n  refId: string;\n  variableOptionGroup: SelectableValue<string>;\n  labels: string[];\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: MetricQuery) => void;\n  query: MetricQuery;\n}\n\nexport const GroupBy: FunctionComponent<Props> = ({\n  refId,\n  labels: groupBys = [],\n  query,\n  onChange,\n  variableOptionGroup,\n  metricDescriptor,\n}) => {\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions([...groupBys, ...SYSTEM_LABELS])],\n    [groupBys, variableOptionGroup]\n  );\n\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <EditorField\n          label=\"Group by\"\n          tooltip=\"You can reduce the amount of data returned for a metric by combining different time series. To combine multiple time series, you can specify a grouping and a function. Grouping is done on the basis of labels. The grouping function is used to combine the time series in the group into a single time series.\"\n        >\n          <MultiSelect\n            inputId={`${refId}-group-by`}\n            width=\"auto\"\n            placeholder=\"Choose label\"\n            options={options}\n            value={query.groupBys ?? []}\n            onChange={(options) => {\n              onChange({ ...query, groupBys: options.map((o) => o.value!) });\n            }}\n          />\n        </EditorField>\n        <Aggregation\n          metricDescriptor={metricDescriptor}\n          templateVariableOptions={variableOptionGroup.options}\n          crossSeriesReducer={query.crossSeriesReducer}\n          groupBys={query.groupBys ?? []}\n          onChange={(crossSeriesReducer) => onChange({ ...query, crossSeriesReducer })}\n          refId={refId}\n        />\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAmCC,OAAnC,QAAkD,OAAlD;AAGA,SAASC,WAAT,EAAsBC,gBAAtB,EAAwCC,SAAxC,QAAyD,uBAAzD;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,sBAAT,QAAuC,iBAAvC;AAGA,SAASC,WAAT,QAA4B,eAA5B;;;AAWA,OAAO,MAAMC,OAAiC,GAAG,CAAC;EAChDC,KADgD;EAEhDC,MAAM,EAAEC,QAAQ,GAAG,EAF6B;EAGhDC,KAHgD;EAIhDC,QAJgD;EAKhDC,mBALgD;EAMhDC;AANgD,CAAD,KAO3C;EAAA;;EACJ,MAAMC,OAAO,GAAGhB,OAAO,CACrB,MAAM,CAACc,mBAAD,EAAsB,GAAGR,sBAAsB,CAAC,CAAC,GAAGK,QAAJ,EAAc,GAAGN,aAAjB,CAAD,CAA/C,CADe,EAErB,CAACM,QAAD,EAAWG,mBAAX,CAFqB,CAAvB;EAKA,oBACE,KAAC,SAAD;IAAA,uBACE,MAAC,gBAAD;MAAA,wBACE,KAAC,WAAD;QACE,KAAK,EAAC,UADR;QAEE,OAAO,EAAC,mTAFV;QAAA,uBAIE,KAAC,WAAD;UACE,OAAO,EAAG,GAAEL,KAAM,WADpB;UAEE,KAAK,EAAC,MAFR;UAGE,WAAW,EAAC,cAHd;UAIE,OAAO,EAAEO,OAJX;UAKE,KAAK,qBAAEJ,KAAK,CAACD,QAAR,6DAAoB,EAL3B;UAME,QAAQ,EAAGK,OAAD,IAAa;YACrBH,QAAQ,mBAAMD,KAAN;cAAaD,QAAQ,EAAEK,OAAO,CAACC,GAAR,CAAaC,CAAD,IAAOA,CAAC,CAACC,KAArB;YAAvB,GAAR;UACD;QARH;MAJF,EADF,eAgBE,KAAC,WAAD;QACE,gBAAgB,EAAEJ,gBADpB;QAEE,uBAAuB,EAAED,mBAAmB,CAACE,OAF/C;QAGE,kBAAkB,EAAEJ,KAAK,CAACQ,kBAH5B;QAIE,QAAQ,sBAAER,KAAK,CAACD,QAAR,+DAAoB,EAJ9B;QAKE,QAAQ,EAAGS,kBAAD,IAAwBP,QAAQ,mBAAMD,KAAN;UAAaQ;QAAb,GAL5C;QAME,KAAK,EAAEX;MANT,EAhBF;IAAA;EADF,EADF;AA6BD,CA1CM"},"metadata":{},"sourceType":"module"}