{"ast":null,"code":"import { memoize } from 'lodash';\nimport moment from 'moment-timezone';\nimport { getTimeZone } from './common';\nexport let InternalTimeZones;\n\n(function (InternalTimeZones) {\n  InternalTimeZones[\"default\"] = \"\";\n  InternalTimeZones[\"localBrowserTime\"] = \"browser\";\n  InternalTimeZones[\"utc\"] = \"utc\";\n})(InternalTimeZones || (InternalTimeZones = {}));\n\nexport const timeZoneFormatUserFriendly = timeZone => {\n  switch (getTimeZone({\n    timeZone\n  })) {\n    case 'browser':\n      return 'Local browser time';\n\n    case 'utc':\n      return 'UTC';\n\n    default:\n      return timeZone;\n  }\n};\nexport const getTimeZoneInfo = (zone, timestamp) => {\n  const internal = mapInternal(zone, timestamp);\n\n  if (internal) {\n    return internal;\n  }\n\n  return mapToInfo(zone, timestamp);\n};\nexport const getTimeZones = memoize((includeInternal = false) => {\n  const initial = [];\n\n  if (includeInternal === true) {\n    initial.push(InternalTimeZones.default, InternalTimeZones.localBrowserTime, InternalTimeZones.utc);\n  } else if (includeInternal) {\n    initial.push(...includeInternal);\n  }\n\n  return moment.tz.names().reduce((zones, zone) => {\n    const countriesForZone = countriesByTimeZone[zone];\n\n    if (!Array.isArray(countriesForZone) || countriesForZone.length === 0) {\n      return zones;\n    }\n\n    zones.push(zone);\n    return zones;\n  }, initial);\n});\nexport const getTimeZoneGroups = memoize((includeInternal = false) => {\n  const timeZones = getTimeZones(includeInternal);\n  const groups = timeZones.reduce((groups, zone) => {\n    var _groups$group2;\n\n    const delimiter = zone.indexOf('/');\n\n    if (delimiter === -1) {\n      var _groups$group;\n\n      const group = '';\n      groups[group] = (_groups$group = groups[group]) !== null && _groups$group !== void 0 ? _groups$group : [];\n      groups[group].push(zone);\n      return groups;\n    }\n\n    const group = zone.slice(0, delimiter);\n    groups[group] = (_groups$group2 = groups[group]) !== null && _groups$group2 !== void 0 ? _groups$group2 : [];\n    groups[group].push(zone);\n    return groups;\n  }, {});\n  return Object.keys(groups).map(name => ({\n    name,\n    zones: groups[name]\n  }));\n});\n\nconst mapInternal = (zone, timestamp) => {\n  switch (zone) {\n    case InternalTimeZones.utc:\n      {\n        return {\n          name: 'Coordinated Universal Time',\n          ianaName: 'UTC',\n          zone,\n          countries: [],\n          abbreviation: 'UTC, GMT',\n          offsetInMins: 0\n        };\n      }\n\n    case InternalTimeZones.default:\n      {\n        var _ref, _countriesByTimeZone$;\n\n        const tz = getTimeZone();\n        const isInternal = tz === 'browser' || tz === 'utc';\n        const info = (_ref = isInternal ? mapInternal(tz, timestamp) : mapToInfo(tz, timestamp)) !== null && _ref !== void 0 ? _ref : {};\n        return Object.assign({\n          countries: (_countriesByTimeZone$ = countriesByTimeZone[tz]) !== null && _countriesByTimeZone$ !== void 0 ? _countriesByTimeZone$ : [],\n          abbreviation: '',\n          offsetInMins: 0\n        }, info, {\n          ianaName: info.ianaName,\n          name: 'Default',\n          zone\n        });\n      }\n\n    case InternalTimeZones.localBrowserTime:\n      {\n        var _mapToInfo, _countriesByTimeZone$2;\n\n        const tz = moment.tz.guess(true);\n        const info = (_mapToInfo = mapToInfo(tz, timestamp)) !== null && _mapToInfo !== void 0 ? _mapToInfo : {};\n        return Object.assign({\n          countries: (_countriesByTimeZone$2 = countriesByTimeZone[tz]) !== null && _countriesByTimeZone$2 !== void 0 ? _countriesByTimeZone$2 : [],\n          abbreviation: 'Your local time',\n          offsetInMins: new Date().getTimezoneOffset()\n        }, info, {\n          name: 'Browser Time',\n          ianaName: info.ianaName,\n          zone\n        });\n      }\n\n    default:\n      return undefined;\n  }\n};\n\nconst abbrevationWithoutOffset = abbrevation => {\n  if (/^(\\+|\\-).+/.test(abbrevation)) {\n    return '';\n  }\n\n  return abbrevation;\n};\n\nconst mapToInfo = (timeZone, timestamp) => {\n  var _countriesByTimeZone$3;\n\n  const momentTz = moment.tz.zone(timeZone);\n\n  if (!momentTz) {\n    return undefined;\n  }\n\n  return {\n    name: timeZone,\n    ianaName: momentTz.name,\n    zone: timeZone,\n    countries: (_countriesByTimeZone$3 = countriesByTimeZone[timeZone]) !== null && _countriesByTimeZone$3 !== void 0 ? _countriesByTimeZone$3 : [],\n    abbreviation: abbrevationWithoutOffset(momentTz.abbr(timestamp)),\n    offsetInMins: momentTz.utcOffset(timestamp)\n  };\n}; // Country names by ISO 3166-1-alpha-2 code\n\n\nconst countryByCode = {\n  AF: 'Afghanistan',\n  AX: 'Aland Islands',\n  AL: 'Albania',\n  DZ: 'Algeria',\n  AS: 'American Samoa',\n  AD: 'Andorra',\n  AO: 'Angola',\n  AI: 'Anguilla',\n  AQ: 'Antarctica',\n  AG: 'Antigua And Barbuda',\n  AR: 'Argentina',\n  AM: 'Armenia',\n  AW: 'Aruba',\n  AU: 'Australia',\n  AT: 'Austria',\n  AZ: 'Azerbaijan',\n  BS: 'Bahamas',\n  BH: 'Bahrain',\n  BD: 'Bangladesh',\n  BB: 'Barbados',\n  BY: 'Belarus',\n  BE: 'Belgium',\n  BZ: 'Belize',\n  BJ: 'Benin',\n  BM: 'Bermuda',\n  BT: 'Bhutan',\n  BO: 'Bolivia',\n  BA: 'Bosnia And Herzegovina',\n  BW: 'Botswana',\n  BV: 'Bouvet Island',\n  BR: 'Brazil',\n  IO: 'British Indian Ocean Territory',\n  BN: 'Brunei Darussalam',\n  BG: 'Bulgaria',\n  BF: 'Burkina Faso',\n  BI: 'Burundi',\n  KH: 'Cambodia',\n  CM: 'Cameroon',\n  CA: 'Canada',\n  CV: 'Cape Verde',\n  KY: 'Cayman Islands',\n  CF: 'Central African Republic',\n  TD: 'Chad',\n  CL: 'Chile',\n  CN: 'China',\n  CX: 'Christmas Island',\n  CC: 'Cocos (Keeling) Islands',\n  CO: 'Colombia',\n  KM: 'Comoros',\n  CG: 'Congo',\n  CD: 'Congo, Democratic Republic',\n  CK: 'Cook Islands',\n  CR: 'Costa Rica',\n  CI: \"Cote D'Ivoire\",\n  HR: 'Croatia',\n  CU: 'Cuba',\n  CY: 'Cyprus',\n  CZ: 'Czech Republic',\n  DK: 'Denmark',\n  DJ: 'Djibouti',\n  DM: 'Dominica',\n  DO: 'Dominican Republic',\n  EC: 'Ecuador',\n  EG: 'Egypt',\n  SV: 'El Salvador',\n  GQ: 'Equatorial Guinea',\n  ER: 'Eritrea',\n  EE: 'Estonia',\n  ET: 'Ethiopia',\n  FK: 'Falkland Islands (Malvinas)',\n  FO: 'Faroe Islands',\n  FJ: 'Fiji',\n  FI: 'Finland',\n  FR: 'France',\n  GF: 'French Guiana',\n  PF: 'French Polynesia',\n  TF: 'French Southern Territories',\n  GA: 'Gabon',\n  GM: 'Gambia',\n  GE: 'Georgia',\n  DE: 'Germany',\n  GH: 'Ghana',\n  GI: 'Gibraltar',\n  GR: 'Greece',\n  GL: 'Greenland',\n  GD: 'Grenada',\n  GP: 'Guadeloupe',\n  GU: 'Guam',\n  GT: 'Guatemala',\n  GG: 'Guernsey',\n  GN: 'Guinea',\n  GW: 'Guinea-Bissau',\n  GY: 'Guyana',\n  HT: 'Haiti',\n  HM: 'Heard Island & Mcdonald Islands',\n  VA: 'Holy See (Vatican City State)',\n  HN: 'Honduras',\n  HK: 'Hong Kong',\n  HU: 'Hungary',\n  IS: 'Iceland',\n  IN: 'India',\n  ID: 'Indonesia',\n  IR: 'Iran (Islamic Republic Of)',\n  IQ: 'Iraq',\n  IE: 'Ireland',\n  IM: 'Isle Of Man',\n  IL: 'Israel',\n  IT: 'Italy',\n  JM: 'Jamaica',\n  JP: 'Japan',\n  JE: 'Jersey',\n  JO: 'Jordan',\n  KZ: 'Kazakhstan',\n  KE: 'Kenya',\n  KI: 'Kiribati',\n  KR: 'Korea',\n  KW: 'Kuwait',\n  KG: 'Kyrgyzstan',\n  LA: \"Lao People's Democratic Republic\",\n  LV: 'Latvia',\n  LB: 'Lebanon',\n  LS: 'Lesotho',\n  LR: 'Liberia',\n  LY: 'Libyan Arab Jamahiriya',\n  LI: 'Liechtenstein',\n  LT: 'Lithuania',\n  LU: 'Luxembourg',\n  MO: 'Macao',\n  MK: 'Macedonia',\n  MG: 'Madagascar',\n  MW: 'Malawi',\n  MY: 'Malaysia',\n  MV: 'Maldives',\n  ML: 'Mali',\n  MT: 'Malta',\n  MH: 'Marshall Islands',\n  MQ: 'Martinique',\n  MR: 'Mauritania',\n  MU: 'Mauritius',\n  YT: 'Mayotte',\n  MX: 'Mexico',\n  FM: 'Micronesia (Federated States Of)',\n  MD: 'Moldova',\n  MC: 'Monaco',\n  MN: 'Mongolia',\n  ME: 'Montenegro',\n  MS: 'Montserrat',\n  MA: 'Morocco',\n  MZ: 'Mozambique',\n  MM: 'Myanmar',\n  NA: 'Namibia',\n  NR: 'Nauru',\n  NP: 'Nepal',\n  NL: 'Netherlands',\n  AN: 'Netherlands Antilles',\n  NC: 'New Caledonia',\n  NZ: 'New Zealand',\n  NI: 'Nicaragua',\n  NE: 'Niger',\n  NG: 'Nigeria',\n  NU: 'Niue',\n  NF: 'Norfolk Island',\n  MP: 'Northern Mariana Islands',\n  NO: 'Norway',\n  OM: 'Oman',\n  PK: 'Pakistan',\n  PW: 'Palau',\n  PS: 'Palestinian Territory (Occupied)',\n  PA: 'Panama',\n  PG: 'Papua New Guinea',\n  PY: 'Paraguay',\n  PE: 'Peru',\n  PH: 'Philippines',\n  PN: 'Pitcairn',\n  PL: 'Poland',\n  PT: 'Portugal',\n  PR: 'Puerto Rico',\n  QA: 'Qatar',\n  RE: 'Reunion',\n  RO: 'Romania',\n  RU: 'Russian Federation',\n  RW: 'Rwanda',\n  BL: 'Saint Barthelemy',\n  SH: 'Saint Helena',\n  KN: 'Saint Kitts And Nevis',\n  LC: 'Saint Lucia',\n  MF: 'Saint Martin',\n  PM: 'Saint Pierre And Miquelon',\n  VC: 'Saint Vincent And Grenadines',\n  WS: 'Samoa',\n  SM: 'San Marino',\n  ST: 'Sao Tome And Principe',\n  SA: 'Saudi Arabia',\n  SN: 'Senegal',\n  RS: 'Serbia',\n  SC: 'Seychelles',\n  SL: 'Sierra Leone',\n  SG: 'Singapore',\n  SK: 'Slovakia',\n  SI: 'Slovenia',\n  SB: 'Solomon Islands',\n  SO: 'Somalia',\n  ZA: 'South Africa',\n  GS: 'South Georgia And Sandwich Isl.',\n  ES: 'Spain',\n  LK: 'Sri Lanka',\n  SD: 'Sudan',\n  SR: 'Suriname',\n  SJ: 'Svalbard And Jan Mayen',\n  SZ: 'Swaziland',\n  SE: 'Sweden',\n  CH: 'Switzerland',\n  SY: 'Syrian Arab Republic',\n  TW: 'Taiwan',\n  TJ: 'Tajikistan',\n  TZ: 'Tanzania',\n  TH: 'Thailand',\n  TL: 'Timor-Leste',\n  TG: 'Togo',\n  TK: 'Tokelau',\n  TO: 'Tonga',\n  TT: 'Trinidad And Tobago',\n  TN: 'Tunisia',\n  TR: 'Turkey',\n  TM: 'Turkmenistan',\n  TC: 'Turks And Caicos Islands',\n  TV: 'Tuvalu',\n  UG: 'Uganda',\n  UA: 'Ukraine',\n  AE: 'United Arab Emirates',\n  GB: 'United Kingdom',\n  US: 'United States',\n  UM: 'United States Outlying Islands',\n  UY: 'Uruguay',\n  UZ: 'Uzbekistan',\n  VU: 'Vanuatu',\n  VE: 'Venezuela',\n  VN: 'Viet Nam',\n  VG: 'Virgin Islands, British',\n  VI: 'Virgin Islands, U.S.',\n  WF: 'Wallis And Futuna',\n  EH: 'Western Sahara',\n  YE: 'Yemen',\n  ZM: 'Zambia',\n  ZW: 'Zimbabwe'\n};\n\nconst countriesByTimeZone = (() => {\n  return moment.tz.countries().reduce((all, code) => {\n    const timeZones = moment.tz.zonesForCountry(code);\n    return timeZones.reduce((all, timeZone) => {\n      if (!all[timeZone]) {\n        all[timeZone] = [];\n      }\n\n      const name = countryByCode[code];\n\n      if (!name) {\n        return all;\n      }\n\n      all[timeZone].push({\n        code,\n        name\n      });\n      return all;\n    }, all);\n  }, {});\n})();","map":{"version":3,"names":["memoize","moment","getTimeZone","InternalTimeZones","timeZoneFormatUserFriendly","timeZone","getTimeZoneInfo","zone","timestamp","internal","mapInternal","mapToInfo","getTimeZones","includeInternal","initial","push","default","localBrowserTime","utc","tz","names","reduce","zones","countriesForZone","countriesByTimeZone","Array","isArray","length","getTimeZoneGroups","timeZones","groups","delimiter","indexOf","group","slice","Object","keys","map","name","ianaName","countries","abbreviation","offsetInMins","isInternal","info","guess","Date","getTimezoneOffset","undefined","abbrevationWithoutOffset","abbrevation","test","momentTz","abbr","utcOffset","countryByCode","AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VG","VI","WF","EH","YE","ZM","ZW","all","code","zonesForCountry"],"sources":["/home/soula/grafana/packages/grafana-data/src/datetime/timezones.ts"],"sourcesContent":["import { memoize } from 'lodash';\nimport moment from 'moment-timezone';\n\nimport { TimeZone } from '../types';\n\nimport { getTimeZone } from './common';\n\nexport enum InternalTimeZones {\n  default = '',\n  localBrowserTime = 'browser',\n  utc = 'utc',\n}\n\nexport const timeZoneFormatUserFriendly = (timeZone: TimeZone | undefined) => {\n  switch (getTimeZone({ timeZone })) {\n    case 'browser':\n      return 'Local browser time';\n    case 'utc':\n      return 'UTC';\n    default:\n      return timeZone;\n  }\n};\n\nexport interface TimeZoneCountry {\n  code: string;\n  name: string;\n}\nexport interface TimeZoneInfo {\n  name: string;\n  zone: string;\n  countries: TimeZoneCountry[];\n  abbreviation: string;\n  offsetInMins: number;\n  ianaName: string;\n}\n\nexport interface GroupedTimeZones {\n  name: string;\n  zones: TimeZone[];\n}\n\nexport const getTimeZoneInfo = (zone: string, timestamp: number): TimeZoneInfo | undefined => {\n  const internal = mapInternal(zone, timestamp);\n\n  if (internal) {\n    return internal;\n  }\n\n  return mapToInfo(zone, timestamp);\n};\n\nexport const getTimeZones = memoize((includeInternal: boolean | InternalTimeZones[] = false): TimeZone[] => {\n  const initial: TimeZone[] = [];\n\n  if (includeInternal === true) {\n    initial.push(InternalTimeZones.default, InternalTimeZones.localBrowserTime, InternalTimeZones.utc);\n  } else if (includeInternal) {\n    initial.push(...includeInternal);\n  }\n\n  return moment.tz.names().reduce((zones: TimeZone[], zone: string) => {\n    const countriesForZone = countriesByTimeZone[zone];\n\n    if (!Array.isArray(countriesForZone) || countriesForZone.length === 0) {\n      return zones;\n    }\n\n    zones.push(zone);\n    return zones;\n  }, initial);\n});\n\nexport const getTimeZoneGroups = memoize(\n  (includeInternal: boolean | InternalTimeZones[] = false): GroupedTimeZones[] => {\n    const timeZones = getTimeZones(includeInternal);\n\n    const groups = timeZones.reduce((groups: Record<string, TimeZone[]>, zone: TimeZone) => {\n      const delimiter = zone.indexOf('/');\n\n      if (delimiter === -1) {\n        const group = '';\n        groups[group] = groups[group] ?? [];\n        groups[group].push(zone);\n\n        return groups;\n      }\n\n      const group = zone.slice(0, delimiter);\n      groups[group] = groups[group] ?? [];\n      groups[group].push(zone);\n\n      return groups;\n    }, {});\n\n    return Object.keys(groups).map((name) => ({\n      name,\n      zones: groups[name],\n    }));\n  }\n);\n\nconst mapInternal = (zone: string, timestamp: number): TimeZoneInfo | undefined => {\n  switch (zone) {\n    case InternalTimeZones.utc: {\n      return {\n        name: 'Coordinated Universal Time',\n        ianaName: 'UTC',\n        zone,\n        countries: [],\n        abbreviation: 'UTC, GMT',\n        offsetInMins: 0,\n      };\n    }\n\n    case InternalTimeZones.default: {\n      const tz = getTimeZone();\n      const isInternal = tz === 'browser' || tz === 'utc';\n      const info = (isInternal ? mapInternal(tz, timestamp) : mapToInfo(tz, timestamp)) ?? {};\n\n      return {\n        countries: countriesByTimeZone[tz] ?? [],\n        abbreviation: '',\n        offsetInMins: 0,\n        ...info,\n        ianaName: (info as TimeZoneInfo).ianaName,\n        name: 'Default',\n        zone,\n      };\n    }\n\n    case InternalTimeZones.localBrowserTime: {\n      const tz = moment.tz.guess(true);\n      const info = mapToInfo(tz, timestamp) ?? {};\n\n      return {\n        countries: countriesByTimeZone[tz] ?? [],\n        abbreviation: 'Your local time',\n        offsetInMins: new Date().getTimezoneOffset(),\n        ...info,\n        name: 'Browser Time',\n        ianaName: (info as TimeZoneInfo).ianaName,\n        zone,\n      };\n    }\n\n    default:\n      return undefined;\n  }\n};\n\nconst abbrevationWithoutOffset = (abbrevation: string): string => {\n  if (/^(\\+|\\-).+/.test(abbrevation)) {\n    return '';\n  }\n  return abbrevation;\n};\n\nconst mapToInfo = (timeZone: TimeZone, timestamp: number): TimeZoneInfo | undefined => {\n  const momentTz = moment.tz.zone(timeZone);\n  if (!momentTz) {\n    return undefined;\n  }\n\n  return {\n    name: timeZone,\n    ianaName: momentTz.name,\n    zone: timeZone,\n    countries: countriesByTimeZone[timeZone] ?? [],\n    abbreviation: abbrevationWithoutOffset(momentTz.abbr(timestamp)),\n    offsetInMins: momentTz.utcOffset(timestamp),\n  };\n};\n\n// Country names by ISO 3166-1-alpha-2 code\nconst countryByCode: Record<string, string> = {\n  AF: 'Afghanistan',\n  AX: 'Aland Islands',\n  AL: 'Albania',\n  DZ: 'Algeria',\n  AS: 'American Samoa',\n  AD: 'Andorra',\n  AO: 'Angola',\n  AI: 'Anguilla',\n  AQ: 'Antarctica',\n  AG: 'Antigua And Barbuda',\n  AR: 'Argentina',\n  AM: 'Armenia',\n  AW: 'Aruba',\n  AU: 'Australia',\n  AT: 'Austria',\n  AZ: 'Azerbaijan',\n  BS: 'Bahamas',\n  BH: 'Bahrain',\n  BD: 'Bangladesh',\n  BB: 'Barbados',\n  BY: 'Belarus',\n  BE: 'Belgium',\n  BZ: 'Belize',\n  BJ: 'Benin',\n  BM: 'Bermuda',\n  BT: 'Bhutan',\n  BO: 'Bolivia',\n  BA: 'Bosnia And Herzegovina',\n  BW: 'Botswana',\n  BV: 'Bouvet Island',\n  BR: 'Brazil',\n  IO: 'British Indian Ocean Territory',\n  BN: 'Brunei Darussalam',\n  BG: 'Bulgaria',\n  BF: 'Burkina Faso',\n  BI: 'Burundi',\n  KH: 'Cambodia',\n  CM: 'Cameroon',\n  CA: 'Canada',\n  CV: 'Cape Verde',\n  KY: 'Cayman Islands',\n  CF: 'Central African Republic',\n  TD: 'Chad',\n  CL: 'Chile',\n  CN: 'China',\n  CX: 'Christmas Island',\n  CC: 'Cocos (Keeling) Islands',\n  CO: 'Colombia',\n  KM: 'Comoros',\n  CG: 'Congo',\n  CD: 'Congo, Democratic Republic',\n  CK: 'Cook Islands',\n  CR: 'Costa Rica',\n  CI: \"Cote D'Ivoire\",\n  HR: 'Croatia',\n  CU: 'Cuba',\n  CY: 'Cyprus',\n  CZ: 'Czech Republic',\n  DK: 'Denmark',\n  DJ: 'Djibouti',\n  DM: 'Dominica',\n  DO: 'Dominican Republic',\n  EC: 'Ecuador',\n  EG: 'Egypt',\n  SV: 'El Salvador',\n  GQ: 'Equatorial Guinea',\n  ER: 'Eritrea',\n  EE: 'Estonia',\n  ET: 'Ethiopia',\n  FK: 'Falkland Islands (Malvinas)',\n  FO: 'Faroe Islands',\n  FJ: 'Fiji',\n  FI: 'Finland',\n  FR: 'France',\n  GF: 'French Guiana',\n  PF: 'French Polynesia',\n  TF: 'French Southern Territories',\n  GA: 'Gabon',\n  GM: 'Gambia',\n  GE: 'Georgia',\n  DE: 'Germany',\n  GH: 'Ghana',\n  GI: 'Gibraltar',\n  GR: 'Greece',\n  GL: 'Greenland',\n  GD: 'Grenada',\n  GP: 'Guadeloupe',\n  GU: 'Guam',\n  GT: 'Guatemala',\n  GG: 'Guernsey',\n  GN: 'Guinea',\n  GW: 'Guinea-Bissau',\n  GY: 'Guyana',\n  HT: 'Haiti',\n  HM: 'Heard Island & Mcdonald Islands',\n  VA: 'Holy See (Vatican City State)',\n  HN: 'Honduras',\n  HK: 'Hong Kong',\n  HU: 'Hungary',\n  IS: 'Iceland',\n  IN: 'India',\n  ID: 'Indonesia',\n  IR: 'Iran (Islamic Republic Of)',\n  IQ: 'Iraq',\n  IE: 'Ireland',\n  IM: 'Isle Of Man',\n  IL: 'Israel',\n  IT: 'Italy',\n  JM: 'Jamaica',\n  JP: 'Japan',\n  JE: 'Jersey',\n  JO: 'Jordan',\n  KZ: 'Kazakhstan',\n  KE: 'Kenya',\n  KI: 'Kiribati',\n  KR: 'Korea',\n  KW: 'Kuwait',\n  KG: 'Kyrgyzstan',\n  LA: \"Lao People's Democratic Republic\",\n  LV: 'Latvia',\n  LB: 'Lebanon',\n  LS: 'Lesotho',\n  LR: 'Liberia',\n  LY: 'Libyan Arab Jamahiriya',\n  LI: 'Liechtenstein',\n  LT: 'Lithuania',\n  LU: 'Luxembourg',\n  MO: 'Macao',\n  MK: 'Macedonia',\n  MG: 'Madagascar',\n  MW: 'Malawi',\n  MY: 'Malaysia',\n  MV: 'Maldives',\n  ML: 'Mali',\n  MT: 'Malta',\n  MH: 'Marshall Islands',\n  MQ: 'Martinique',\n  MR: 'Mauritania',\n  MU: 'Mauritius',\n  YT: 'Mayotte',\n  MX: 'Mexico',\n  FM: 'Micronesia (Federated States Of)',\n  MD: 'Moldova',\n  MC: 'Monaco',\n  MN: 'Mongolia',\n  ME: 'Montenegro',\n  MS: 'Montserrat',\n  MA: 'Morocco',\n  MZ: 'Mozambique',\n  MM: 'Myanmar',\n  NA: 'Namibia',\n  NR: 'Nauru',\n  NP: 'Nepal',\n  NL: 'Netherlands',\n  AN: 'Netherlands Antilles',\n  NC: 'New Caledonia',\n  NZ: 'New Zealand',\n  NI: 'Nicaragua',\n  NE: 'Niger',\n  NG: 'Nigeria',\n  NU: 'Niue',\n  NF: 'Norfolk Island',\n  MP: 'Northern Mariana Islands',\n  NO: 'Norway',\n  OM: 'Oman',\n  PK: 'Pakistan',\n  PW: 'Palau',\n  PS: 'Palestinian Territory (Occupied)',\n  PA: 'Panama',\n  PG: 'Papua New Guinea',\n  PY: 'Paraguay',\n  PE: 'Peru',\n  PH: 'Philippines',\n  PN: 'Pitcairn',\n  PL: 'Poland',\n  PT: 'Portugal',\n  PR: 'Puerto Rico',\n  QA: 'Qatar',\n  RE: 'Reunion',\n  RO: 'Romania',\n  RU: 'Russian Federation',\n  RW: 'Rwanda',\n  BL: 'Saint Barthelemy',\n  SH: 'Saint Helena',\n  KN: 'Saint Kitts And Nevis',\n  LC: 'Saint Lucia',\n  MF: 'Saint Martin',\n  PM: 'Saint Pierre And Miquelon',\n  VC: 'Saint Vincent And Grenadines',\n  WS: 'Samoa',\n  SM: 'San Marino',\n  ST: 'Sao Tome And Principe',\n  SA: 'Saudi Arabia',\n  SN: 'Senegal',\n  RS: 'Serbia',\n  SC: 'Seychelles',\n  SL: 'Sierra Leone',\n  SG: 'Singapore',\n  SK: 'Slovakia',\n  SI: 'Slovenia',\n  SB: 'Solomon Islands',\n  SO: 'Somalia',\n  ZA: 'South Africa',\n  GS: 'South Georgia And Sandwich Isl.',\n  ES: 'Spain',\n  LK: 'Sri Lanka',\n  SD: 'Sudan',\n  SR: 'Suriname',\n  SJ: 'Svalbard And Jan Mayen',\n  SZ: 'Swaziland',\n  SE: 'Sweden',\n  CH: 'Switzerland',\n  SY: 'Syrian Arab Republic',\n  TW: 'Taiwan',\n  TJ: 'Tajikistan',\n  TZ: 'Tanzania',\n  TH: 'Thailand',\n  TL: 'Timor-Leste',\n  TG: 'Togo',\n  TK: 'Tokelau',\n  TO: 'Tonga',\n  TT: 'Trinidad And Tobago',\n  TN: 'Tunisia',\n  TR: 'Turkey',\n  TM: 'Turkmenistan',\n  TC: 'Turks And Caicos Islands',\n  TV: 'Tuvalu',\n  UG: 'Uganda',\n  UA: 'Ukraine',\n  AE: 'United Arab Emirates',\n  GB: 'United Kingdom',\n  US: 'United States',\n  UM: 'United States Outlying Islands',\n  UY: 'Uruguay',\n  UZ: 'Uzbekistan',\n  VU: 'Vanuatu',\n  VE: 'Venezuela',\n  VN: 'Viet Nam',\n  VG: 'Virgin Islands, British',\n  VI: 'Virgin Islands, U.S.',\n  WF: 'Wallis And Futuna',\n  EH: 'Western Sahara',\n  YE: 'Yemen',\n  ZM: 'Zambia',\n  ZW: 'Zimbabwe',\n};\n\nconst countriesByTimeZone = ((): Record<string, TimeZoneCountry[]> => {\n  return moment.tz.countries().reduce((all: Record<string, TimeZoneCountry[]>, code) => {\n    const timeZones = moment.tz.zonesForCountry(code);\n    return timeZones.reduce((all: Record<string, TimeZoneCountry[]>, timeZone) => {\n      if (!all[timeZone]) {\n        all[timeZone] = [];\n      }\n\n      const name = countryByCode[code];\n\n      if (!name) {\n        return all;\n      }\n\n      all[timeZone].push({ code, name });\n      return all;\n    }, all);\n  }, {});\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}