{"ast":null,"code":"import { css } from '@emotion/css';\nimport { noop } from 'lodash';\nimport pluralize from 'pluralize';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { AlertInstancesTable } from 'app/features/alerting/unified/components/rules/AlertInstancesTable';\nimport { sortAlerts } from 'app/features/alerting/unified/utils/misc';\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../core/constants';\nimport { GroupMode } from './types';\nimport { filterAlerts } from './util';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const AlertInstances = ({\n  alerts,\n  options\n}) => {\n  // when custom grouping is enabled, we will always uncollapse the list of alert instances\n  const defaultShowInstances = options.groupMode === GroupMode.Custom ? true : options.showInstances;\n  const [displayInstances, setDisplayInstances] = useState(defaultShowInstances);\n  const styles = useStyles2(getStyles);\n  const toggleDisplayInstances = useCallback(() => {\n    setDisplayInstances(display => !display);\n  }, []);\n  const filteredAlerts = useMemo(() => {\n    var _filterAlerts;\n\n    return (_filterAlerts = filterAlerts(options, sortAlerts(options.sortOrder, alerts))) !== null && _filterAlerts !== void 0 ? _filterAlerts : [];\n  }, [alerts, options]);\n  const hiddenInstances = alerts.length - filteredAlerts.length;\n  const uncollapsible = filteredAlerts.length > 0;\n  const toggleShowInstances = uncollapsible ? toggleDisplayInstances : noop;\n  useEffect(() => {\n    if (filteredAlerts.length === 0) {\n      setDisplayInstances(false);\n    }\n  }, [filteredAlerts]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [options.groupMode === GroupMode.Default && /*#__PURE__*/_jsxs(\"div\", {\n      className: uncollapsible ? styles.clickable : '',\n      onClick: () => toggleShowInstances(),\n      children: [uncollapsible && /*#__PURE__*/_jsx(Icon, {\n        name: displayInstances ? 'angle-down' : 'angle-right',\n        size: 'md'\n      }), /*#__PURE__*/_jsx(\"span\", {\n        children: `${filteredAlerts.length} ${pluralize('instance', filteredAlerts.length)}`\n      }), hiddenInstances > 0 && /*#__PURE__*/_jsxs(\"span\", {\n        children: [\", \", `${hiddenInstances} hidden by filters`]\n      })]\n    }), displayInstances && /*#__PURE__*/_jsx(AlertInstancesTable, {\n      instances: filteredAlerts,\n      pagination: {\n        itemsPerPage: 2 * DEFAULT_PER_PAGE_PAGINATION\n      }\n    })]\n  });\n};\n\nconst getStyles = _ => ({\n  clickable: css`\n    cursor: pointer;\n  `\n});","map":{"version":3,"names":["css","noop","pluralize","React","useCallback","useEffect","useMemo","useState","Icon","useStyles2","AlertInstancesTable","sortAlerts","DEFAULT_PER_PAGE_PAGINATION","GroupMode","filterAlerts","AlertInstances","alerts","options","defaultShowInstances","groupMode","Custom","showInstances","displayInstances","setDisplayInstances","styles","getStyles","toggleDisplayInstances","display","filteredAlerts","sortOrder","hiddenInstances","length","uncollapsible","toggleShowInstances","Default","clickable","itemsPerPage","_"],"sources":["/home/soula/grafana/public/app/plugins/panel/alertlist/AlertInstances.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { noop } from 'lodash';\nimport pluralize from 'pluralize';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, PanelProps } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { AlertInstancesTable } from 'app/features/alerting/unified/components/rules/AlertInstancesTable';\nimport { sortAlerts } from 'app/features/alerting/unified/utils/misc';\nimport { Alert } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../core/constants';\n\nimport { GroupMode, UnifiedAlertListOptions } from './types';\nimport { filterAlerts } from './util';\n\ninterface Props {\n  alerts: Alert[];\n  options: PanelProps<UnifiedAlertListOptions>['options'];\n}\n\nexport const AlertInstances: FC<Props> = ({ alerts, options }) => {\n  // when custom grouping is enabled, we will always uncollapse the list of alert instances\n  const defaultShowInstances = options.groupMode === GroupMode.Custom ? true : options.showInstances;\n  const [displayInstances, setDisplayInstances] = useState<boolean>(defaultShowInstances);\n  const styles = useStyles2(getStyles);\n\n  const toggleDisplayInstances = useCallback(() => {\n    setDisplayInstances((display) => !display);\n  }, []);\n\n  const filteredAlerts = useMemo(\n    (): Alert[] => filterAlerts(options, sortAlerts(options.sortOrder, alerts)) ?? [],\n    [alerts, options]\n  );\n\n  const hiddenInstances = alerts.length - filteredAlerts.length;\n\n  const uncollapsible = filteredAlerts.length > 0;\n  const toggleShowInstances = uncollapsible ? toggleDisplayInstances : noop;\n\n  useEffect(() => {\n    if (filteredAlerts.length === 0) {\n      setDisplayInstances(false);\n    }\n  }, [filteredAlerts]);\n\n  return (\n    <div>\n      {options.groupMode === GroupMode.Default && (\n        <div className={uncollapsible ? styles.clickable : ''} onClick={() => toggleShowInstances()}>\n          {uncollapsible && <Icon name={displayInstances ? 'angle-down' : 'angle-right'} size={'md'} />}\n          <span>{`${filteredAlerts.length} ${pluralize('instance', filteredAlerts.length)}`}</span>\n          {hiddenInstances > 0 && <span>, {`${hiddenInstances} hidden by filters`}</span>}\n        </div>\n      )}\n      {displayInstances && (\n        <AlertInstancesTable\n          instances={filteredAlerts}\n          pagination={{ itemsPerPage: 2 * DEFAULT_PER_PAGE_PAGINATION }}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (_: GrafanaTheme2) => ({\n  clickable: css`\n    cursor: pointer;\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,KAAP,IAAoBC,WAApB,EAAiCC,SAAjC,EAA4CC,OAA5C,EAAqDC,QAArD,QAAqE,OAArE;AAGA,SAASC,IAAT,EAAeC,UAAf,QAAiC,aAAjC;AACA,SAASC,mBAAT,QAAoC,oEAApC;AACA,SAASC,UAAT,QAA2B,0CAA3B;AAGA,SAASC,2BAAT,QAA4C,yBAA5C;AAEA,SAASC,SAAT,QAAmD,SAAnD;AACA,SAASC,YAAT,QAA6B,QAA7B;;;AAOA,OAAO,MAAMC,cAAyB,GAAG,CAAC;EAAEC,MAAF;EAAUC;AAAV,CAAD,KAAyB;EAChE;EACA,MAAMC,oBAAoB,GAAGD,OAAO,CAACE,SAAR,KAAsBN,SAAS,CAACO,MAAhC,GAAyC,IAAzC,GAAgDH,OAAO,CAACI,aAArF;EACA,MAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0ChB,QAAQ,CAAUW,oBAAV,CAAxD;EACA,MAAMM,MAAM,GAAGf,UAAU,CAACgB,SAAD,CAAzB;EAEA,MAAMC,sBAAsB,GAAGtB,WAAW,CAAC,MAAM;IAC/CmB,mBAAmB,CAAEI,OAAD,IAAa,CAACA,OAAf,CAAnB;EACD,CAFyC,EAEvC,EAFuC,CAA1C;EAIA,MAAMC,cAAc,GAAGtB,OAAO,CAC5B;IAAA;;IAAA,wBAAeQ,YAAY,CAACG,OAAD,EAAUN,UAAU,CAACM,OAAO,CAACY,SAAT,EAAoBb,MAApB,CAApB,CAA3B,yDAA+E,EAA/E;EAAA,CAD4B,EAE5B,CAACA,MAAD,EAASC,OAAT,CAF4B,CAA9B;EAKA,MAAMa,eAAe,GAAGd,MAAM,CAACe,MAAP,GAAgBH,cAAc,CAACG,MAAvD;EAEA,MAAMC,aAAa,GAAGJ,cAAc,CAACG,MAAf,GAAwB,CAA9C;EACA,MAAME,mBAAmB,GAAGD,aAAa,GAAGN,sBAAH,GAA4BzB,IAArE;EAEAI,SAAS,CAAC,MAAM;IACd,IAAIuB,cAAc,CAACG,MAAf,KAA0B,CAA9B,EAAiC;MAC/BR,mBAAmB,CAAC,KAAD,CAAnB;IACD;EACF,CAJQ,EAIN,CAACK,cAAD,CAJM,CAAT;EAMA,oBACE;IAAA,WACGX,OAAO,CAACE,SAAR,KAAsBN,SAAS,CAACqB,OAAhC,iBACC;MAAK,SAAS,EAAEF,aAAa,GAAGR,MAAM,CAACW,SAAV,GAAsB,EAAnD;MAAuD,OAAO,EAAE,MAAMF,mBAAmB,EAAzF;MAAA,WACGD,aAAa,iBAAI,KAAC,IAAD;QAAM,IAAI,EAAEV,gBAAgB,GAAG,YAAH,GAAkB,aAA9C;QAA6D,IAAI,EAAE;MAAnE,EADpB,eAEE;QAAA,UAAQ,GAAEM,cAAc,CAACG,MAAO,IAAG7B,SAAS,CAAC,UAAD,EAAa0B,cAAc,CAACG,MAA5B,CAAoC;MAAhF,EAFF,EAGGD,eAAe,GAAG,CAAlB,iBAAuB;QAAA,iBAAU,GAAEA,eAAgB,oBAA5B;MAAA,EAH1B;IAAA,EAFJ,EAQGR,gBAAgB,iBACf,KAAC,mBAAD;MACE,SAAS,EAAEM,cADb;MAEE,UAAU,EAAE;QAAEQ,YAAY,EAAE,IAAIxB;MAApB;IAFd,EATJ;EAAA,EADF;AAiBD,CA3CM;;AA6CP,MAAMa,SAAS,GAAIY,CAAD,KAAuB;EACvCF,SAAS,EAAEnC,GAAI;AACjB;AACA;AAHyC,CAAvB,CAAlB"},"metadata":{},"sourceType":"module"}