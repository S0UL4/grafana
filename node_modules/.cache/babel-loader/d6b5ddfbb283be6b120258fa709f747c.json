{"ast":null,"code":"var _span;\n\nimport { toLonLat } from 'ol/proj';\nimport React, { useMemo, useCallback } from 'react';\nimport { Button, InlineField, InlineFieldRow, Select, VerticalGroup } from '@grafana/ui';\nimport { NumberInput } from 'app/core/components/OptionsUI/NumberInput';\nimport { centerPointRegistry, MapCenterID } from '../view';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const MapViewEditor = ({\n  value,\n  onChange,\n  context\n}) => {\n  var _value$zoom;\n\n  const labelWidth = 10;\n  const views = useMemo(() => {\n    const ids = [];\n\n    if (value !== null && value !== void 0 && value.id) {\n      ids.push(value.id);\n    } else {\n      ids.push(centerPointRegistry.list()[0].id);\n    }\n\n    return centerPointRegistry.selectOptions(ids);\n  }, [value === null || value === void 0 ? void 0 : value.id]);\n  const onSetCurrentView = useCallback(() => {\n    var _context$instanceStat;\n\n    const map = (_context$instanceStat = context.instanceState) === null || _context$instanceStat === void 0 ? void 0 : _context$instanceStat.map;\n\n    if (map) {\n      const view = map.getView();\n      const coords = view.getCenter();\n\n      if (coords) {\n        const center = toLonLat(coords, view.getProjection());\n        onChange(Object.assign({}, value, {\n          id: MapCenterID.Coordinates,\n          lon: +center[0].toFixed(6),\n          lat: +center[1].toFixed(6),\n          zoom: +view.getZoom().toFixed(2)\n        }));\n      }\n    }\n  }, [value, onChange, context.instanceState]);\n  const onSelectView = useCallback(selection => {\n    const v = centerPointRegistry.getIfExists(selection.value);\n\n    if (v) {\n      var _v$lat, _v$lon, _v$zoom;\n\n      onChange(Object.assign({}, value, {\n        id: v.id,\n        lat: (_v$lat = v.lat) !== null && _v$lat !== void 0 ? _v$lat : value === null || value === void 0 ? void 0 : value.lat,\n        lon: (_v$lon = v.lon) !== null && _v$lon !== void 0 ? _v$lon : value === null || value === void 0 ? void 0 : value.lon,\n        zoom: (_v$zoom = v.zoom) !== null && _v$zoom !== void 0 ? _v$zoom : value === null || value === void 0 ? void 0 : value.zoom\n      }));\n    }\n  }, [value, onChange]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"View\",\n        labelWidth: labelWidth,\n        grow: true,\n        children: /*#__PURE__*/_jsx(Select, {\n          options: views.options,\n          value: views.current,\n          onChange: onSelectView\n        })\n      })\n    }), (value === null || value === void 0 ? void 0 : value.id) === MapCenterID.Coordinates && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n        children: /*#__PURE__*/_jsx(InlineField, {\n          label: \"Latitude\",\n          labelWidth: labelWidth,\n          grow: true,\n          children: /*#__PURE__*/_jsx(NumberInput, {\n            value: value.lat,\n            min: -90,\n            max: 90,\n            step: 0.001,\n            onChange: v => {\n              onChange(Object.assign({}, value, {\n                lat: v\n              }));\n            }\n          })\n        })\n      }), /*#__PURE__*/_jsx(InlineFieldRow, {\n        children: /*#__PURE__*/_jsx(InlineField, {\n          label: \"Longitude\",\n          labelWidth: labelWidth,\n          grow: true,\n          children: /*#__PURE__*/_jsx(NumberInput, {\n            value: value.lon,\n            min: -180,\n            max: 180,\n            step: 0.001,\n            onChange: v => {\n              onChange(Object.assign({}, value, {\n                lon: v\n              }));\n            }\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Zoom\",\n        labelWidth: labelWidth,\n        grow: true,\n        children: /*#__PURE__*/_jsx(NumberInput, {\n          value: (_value$zoom = value === null || value === void 0 ? void 0 : value.zoom) !== null && _value$zoom !== void 0 ? _value$zoom : 1,\n          min: 1,\n          max: 18,\n          step: 0.01,\n          onChange: v => {\n            onChange(Object.assign({}, value, {\n              zoom: v\n            }));\n          }\n        })\n      })\n    }), /*#__PURE__*/_jsx(VerticalGroup, {\n      children: /*#__PURE__*/_jsx(Button, {\n        variant: \"secondary\",\n        size: \"sm\",\n        fullWidth: true,\n        onClick: onSetCurrentView,\n        children: _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          children: \"Use current map settings\"\n        }))\n      })\n    })]\n  });\n};","map":{"version":3,"names":["toLonLat","React","useMemo","useCallback","Button","InlineField","InlineFieldRow","Select","VerticalGroup","NumberInput","centerPointRegistry","MapCenterID","MapViewEditor","value","onChange","context","labelWidth","views","ids","id","push","list","selectOptions","onSetCurrentView","map","instanceState","view","getView","coords","getCenter","center","getProjection","Coordinates","lon","toFixed","lat","zoom","getZoom","onSelectView","selection","v","getIfExists","options","current"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/editor/MapViewEditor.tsx"],"sourcesContent":["import { toLonLat } from 'ol/proj';\nimport React, { FC, useMemo, useCallback } from 'react';\n\nimport { StandardEditorProps, SelectableValue } from '@grafana/data';\nimport { Button, InlineField, InlineFieldRow, Select, VerticalGroup } from '@grafana/ui';\nimport { NumberInput } from 'app/core/components/OptionsUI/NumberInput';\n\nimport { GeomapInstanceState } from '../GeomapPanel';\nimport { GeomapPanelOptions, MapViewConfig } from '../types';\nimport { centerPointRegistry, MapCenterID } from '../view';\n\nexport const MapViewEditor: FC<StandardEditorProps<MapViewConfig, any, GeomapPanelOptions, GeomapInstanceState>> = ({\n  value,\n  onChange,\n  context,\n}) => {\n  const labelWidth = 10;\n\n  const views = useMemo(() => {\n    const ids: string[] = [];\n    if (value?.id) {\n      ids.push(value.id);\n    } else {\n      ids.push(centerPointRegistry.list()[0].id);\n    }\n    return centerPointRegistry.selectOptions(ids);\n  }, [value?.id]);\n\n  const onSetCurrentView = useCallback(() => {\n    const map = context.instanceState?.map;\n    if (map) {\n      const view = map.getView();\n      const coords = view.getCenter();\n      if (coords) {\n        const center = toLonLat(coords, view.getProjection());\n        onChange({\n          ...value,\n          id: MapCenterID.Coordinates,\n          lon: +center[0].toFixed(6),\n          lat: +center[1].toFixed(6),\n          zoom: +view.getZoom()!.toFixed(2),\n        });\n      }\n    }\n  }, [value, onChange, context.instanceState]);\n\n  const onSelectView = useCallback(\n    (selection: SelectableValue<string>) => {\n      const v = centerPointRegistry.getIfExists(selection.value);\n      if (v) {\n        onChange({\n          ...value,\n          id: v.id,\n          lat: v.lat ?? value?.lat,\n          lon: v.lon ?? value?.lon,\n          zoom: v.zoom ?? value?.zoom,\n        });\n      }\n    },\n    [value, onChange]\n  );\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"View\" labelWidth={labelWidth} grow={true}>\n          <Select options={views.options} value={views.current} onChange={onSelectView} />\n        </InlineField>\n      </InlineFieldRow>\n      {value?.id === MapCenterID.Coordinates && (\n        <>\n          <InlineFieldRow>\n            <InlineField label=\"Latitude\" labelWidth={labelWidth} grow={true}>\n              <NumberInput\n                value={value.lat}\n                min={-90}\n                max={90}\n                step={0.001}\n                onChange={(v) => {\n                  onChange({ ...value, lat: v });\n                }}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField label=\"Longitude\" labelWidth={labelWidth} grow={true}>\n              <NumberInput\n                value={value.lon}\n                min={-180}\n                max={180}\n                step={0.001}\n                onChange={(v) => {\n                  onChange({ ...value, lon: v });\n                }}\n              />\n            </InlineField>\n          </InlineFieldRow>\n        </>\n      )}\n\n      <InlineFieldRow>\n        <InlineField label=\"Zoom\" labelWidth={labelWidth} grow={true}>\n          <NumberInput\n            value={value?.zoom ?? 1}\n            min={1}\n            max={18}\n            step={0.01}\n            onChange={(v) => {\n              onChange({ ...value, zoom: v });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <VerticalGroup>\n        <Button variant=\"secondary\" size=\"sm\" fullWidth onClick={onSetCurrentView}>\n          <span>Use current map settings</span>\n        </Button>\n      </VerticalGroup>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}