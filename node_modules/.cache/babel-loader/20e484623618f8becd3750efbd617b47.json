{"ast":null,"code":"var _Redirect, _LoadingPlaceholder;\n\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport { Alert, LoadingPlaceholder, withErrorBoundary } from '@grafana/ui';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport SilencesEditor from './components/silences/SilencesEditor';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAmAlertsAction, fetchSilencesAction } from './state/actions';\nimport { SILENCES_POLL_INTERVAL_MS } from './utils/constants';\nimport { initialAsyncRequestState } from './utils/redux';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst Silences = () => {\n  var _alertsRequest$error, _alertsRequest$result;\n\n  const alertManagers = useAlertManagersByPermission('instance');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const dispatch = useDispatch();\n  const silences = useUnifiedAlertingSelector(state => state.silences);\n  const alertsRequests = useUnifiedAlertingSelector(state => state.amAlerts);\n  const alertsRequest = alertManagerSourceName ? alertsRequests[alertManagerSourceName] || initialAsyncRequestState : undefined;\n  const location = useLocation();\n  const isRoot = location.pathname.endsWith('/alerting/silences');\n  useEffect(() => {\n    function fetchAll() {\n      if (alertManagerSourceName) {\n        dispatch(fetchSilencesAction(alertManagerSourceName));\n        dispatch(fetchAmAlertsAction(alertManagerSourceName));\n      }\n    }\n\n    fetchAll();\n    const interval = setInterval(() => fetchAll, SILENCES_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [alertManagerSourceName, dispatch]);\n  const {\n    result,\n    loading,\n    error\n  } = alertManagerSourceName && silences[alertManagerSourceName] || initialAsyncRequestState;\n  const getSilenceById = useCallback(id => result && result.find(silence => silence.id === id), [result]);\n\n  if (!alertManagerSourceName) {\n    return isRoot ? /*#__PURE__*/_jsx(AlertingPageWrapper, {\n      pageId: \"silences\",\n      children: /*#__PURE__*/_jsx(NoAlertManagerWarning, {\n        availableAlertManagers: alertManagers\n      })\n    }) : _Redirect || (_Redirect = /*#__PURE__*/_jsx(Redirect, {\n      to: \"/alerting/silences\"\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(AlertingPageWrapper, {\n    pageId: \"silences\",\n    children: [/*#__PURE__*/_jsx(AlertManagerPicker, {\n      disabled: !isRoot,\n      current: alertManagerSourceName,\n      onChange: setAlertManagerSourceName,\n      dataSources: alertManagers\n    }), error && !loading && /*#__PURE__*/_jsx(Alert, {\n      severity: \"error\",\n      title: \"Error loading silences\",\n      children: error.message || 'Unknown error.'\n    }), (alertsRequest === null || alertsRequest === void 0 ? void 0 : alertsRequest.error) && !(alertsRequest !== null && alertsRequest !== void 0 && alertsRequest.loading) && /*#__PURE__*/_jsx(Alert, {\n      severity: \"error\",\n      title: \"Error loading Alertmanager alerts\",\n      children: ((_alertsRequest$error = alertsRequest.error) === null || _alertsRequest$error === void 0 ? void 0 : _alertsRequest$error.message) || 'Unknown error.'\n    }), loading && (_LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n      text: \"loading silences...\"\n    }))), result && !error && /*#__PURE__*/_jsxs(Switch, {\n      children: [/*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/silences\",\n        children: /*#__PURE__*/_jsx(SilencesTable, {\n          silences: result,\n          alertManagerAlerts: (_alertsRequest$result = alertsRequest === null || alertsRequest === void 0 ? void 0 : alertsRequest.result) !== null && _alertsRequest$result !== void 0 ? _alertsRequest$result : [],\n          alertManagerSourceName: alertManagerSourceName\n        })\n      }), /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/silence/new\",\n        children: /*#__PURE__*/_jsx(SilencesEditor, {\n          alertManagerSourceName: alertManagerSourceName\n        })\n      }), /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/silence/:id/edit\",\n        children: ({\n          match\n        }) => {\n          return (match === null || match === void 0 ? void 0 : match.params.id) && /*#__PURE__*/_jsx(SilencesEditor, {\n            silence: getSilenceById(match.params.id),\n            alertManagerSourceName: alertManagerSourceName\n          });\n        }\n      })]\n    })]\n  });\n};\n\nexport default withErrorBoundary(Silences, {\n  style: 'page'\n});","map":{"version":3,"names":["React","useCallback","useEffect","useDispatch","Redirect","Route","Switch","useLocation","Alert","LoadingPlaceholder","withErrorBoundary","AlertManagerPicker","AlertingPageWrapper","NoAlertManagerWarning","SilencesEditor","SilencesTable","useAlertManagerSourceName","useAlertManagersByPermission","useUnifiedAlertingSelector","fetchAmAlertsAction","fetchSilencesAction","SILENCES_POLL_INTERVAL_MS","initialAsyncRequestState","Silences","alertManagers","alertManagerSourceName","setAlertManagerSourceName","dispatch","silences","state","alertsRequests","amAlerts","alertsRequest","undefined","location","isRoot","pathname","endsWith","fetchAll","interval","setInterval","clearInterval","result","loading","error","getSilenceById","id","find","silence","message","match","params","style"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/Silences.tsx"],"sourcesContent":["import React, { FC, useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, RouteChildrenProps, Switch, useLocation } from 'react-router-dom';\n\nimport { Alert, LoadingPlaceholder, withErrorBoundary } from '@grafana/ui';\nimport { Silence } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport SilencesEditor from './components/silences/SilencesEditor';\nimport SilencesTable from './components/silences/SilencesTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAmAlertsAction, fetchSilencesAction } from './state/actions';\nimport { SILENCES_POLL_INTERVAL_MS } from './utils/constants';\nimport { AsyncRequestState, initialAsyncRequestState } from './utils/redux';\n\nconst Silences: FC = () => {\n  const alertManagers = useAlertManagersByPermission('instance');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const dispatch = useDispatch();\n  const silences = useUnifiedAlertingSelector((state) => state.silences);\n  const alertsRequests = useUnifiedAlertingSelector((state) => state.amAlerts);\n  const alertsRequest = alertManagerSourceName\n    ? alertsRequests[alertManagerSourceName] || initialAsyncRequestState\n    : undefined;\n\n  const location = useLocation();\n  const isRoot = location.pathname.endsWith('/alerting/silences');\n\n  useEffect(() => {\n    function fetchAll() {\n      if (alertManagerSourceName) {\n        dispatch(fetchSilencesAction(alertManagerSourceName));\n        dispatch(fetchAmAlertsAction(alertManagerSourceName));\n      }\n    }\n    fetchAll();\n    const interval = setInterval(() => fetchAll, SILENCES_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [alertManagerSourceName, dispatch]);\n\n  const { result, loading, error }: AsyncRequestState<Silence[]> =\n    (alertManagerSourceName && silences[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const getSilenceById = useCallback((id: string) => result && result.find((silence) => silence.id === id), [result]);\n\n  if (!alertManagerSourceName) {\n    return isRoot ? (\n      <AlertingPageWrapper pageId=\"silences\">\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    ) : (\n      <Redirect to=\"/alerting/silences\" />\n    );\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"silences\">\n      <AlertManagerPicker\n        disabled={!isRoot}\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      {error && !loading && (\n        <Alert severity=\"error\" title=\"Error loading silences\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {alertsRequest?.error && !alertsRequest?.loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager alerts\">\n          {alertsRequest.error?.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {loading && <LoadingPlaceholder text=\"loading silences...\" />}\n      {result && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/silences\">\n            <SilencesTable\n              silences={result}\n              alertManagerAlerts={alertsRequest?.result ?? []}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          </Route>\n          <Route exact path=\"/alerting/silence/new\">\n            <SilencesEditor alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact path=\"/alerting/silence/:id/edit\">\n            {({ match }: RouteChildrenProps<{ id: string }>) => {\n              return (\n                match?.params.id && (\n                  <SilencesEditor\n                    silence={getSilenceById(match.params.id)}\n                    alertManagerSourceName={alertManagerSourceName}\n                  />\n                )\n              );\n            }}\n          </Route>\n        </Switch>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(Silences, { style: 'page' });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}