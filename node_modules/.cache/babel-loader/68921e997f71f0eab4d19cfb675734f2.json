{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** Describes plugins life cycle status */\nexport let PluginState;\n/** Describes {@link https://grafana.com/docs/grafana/latest/plugins | type of plugin} */\n\n(function (PluginState) {\n  PluginState[\"alpha\"] = \"alpha\";\n  PluginState[\"beta\"] = \"beta\";\n  PluginState[\"stable\"] = \"stable\";\n  PluginState[\"deprecated\"] = \"deprecated\";\n})(PluginState || (PluginState = {}));\n\nexport let PluginType;\n/** Describes status of {@link https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/ | plugin signature} */\n\n(function (PluginType) {\n  PluginType[\"panel\"] = \"panel\";\n  PluginType[\"datasource\"] = \"datasource\";\n  PluginType[\"app\"] = \"app\";\n  PluginType[\"renderer\"] = \"renderer\";\n})(PluginType || (PluginType = {}));\n\nexport let PluginSignatureStatus;\n/** Describes level of {@link https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/#plugin-signature-levels/ | plugin signature level} */\n\n(function (PluginSignatureStatus) {\n  PluginSignatureStatus[\"internal\"] = \"internal\";\n  PluginSignatureStatus[\"valid\"] = \"valid\";\n  PluginSignatureStatus[\"invalid\"] = \"invalid\";\n  PluginSignatureStatus[\"modified\"] = \"modified\";\n  PluginSignatureStatus[\"missing\"] = \"missing\";\n})(PluginSignatureStatus || (PluginSignatureStatus = {}));\n\nexport let PluginSignatureType;\n/** Describes error code returned from Grafana plugins API call */\n\n(function (PluginSignatureType) {\n  PluginSignatureType[\"grafana\"] = \"grafana\";\n  PluginSignatureType[\"commercial\"] = \"commercial\";\n  PluginSignatureType[\"community\"] = \"community\";\n  PluginSignatureType[\"private\"] = \"private\";\n  PluginSignatureType[\"core\"] = \"core\";\n})(PluginSignatureType || (PluginSignatureType = {}));\n\nexport let PluginErrorCode;\n/** Describes error returned from Grafana plugins API call */\n\n(function (PluginErrorCode) {\n  PluginErrorCode[\"missingSignature\"] = \"signatureMissing\";\n  PluginErrorCode[\"invalidSignature\"] = \"signatureInvalid\";\n  PluginErrorCode[\"modifiedSignature\"] = \"signatureModified\";\n})(PluginErrorCode || (PluginErrorCode = {}));\n\nexport let PluginIncludeType;\n\n(function (PluginIncludeType) {\n  PluginIncludeType[\"dashboard\"] = \"dashboard\";\n  PluginIncludeType[\"page\"] = \"page\";\n  PluginIncludeType[\"panel\"] = \"panel\";\n  PluginIncludeType[\"datasource\"] = \"datasource\";\n})(PluginIncludeType || (PluginIncludeType = {}));\n\nexport class GrafanaPlugin {\n  // Meta is filled in by the plugin loading system\n  // This is set if the plugin system had errors loading the plugin\n  // Config control (app/datasource)\n  // Show configuration tabs on the plugin page\n  // Tabs on the plugin page\n  addConfigPage(tab) {\n    if (!this.configPages) {\n      this.configPages = [];\n    }\n\n    this.configPages.push(tab);\n    return this;\n  }\n  /**\n   * @deprecated -- this is no longer necessary and will be removed\n   */\n\n\n  setChannelSupport(support) {\n    console.warn('[deprecation] plugin is using ignored option: setChannelSupport', this.meta);\n    return this;\n  }\n\n  constructor() {\n    _defineProperty(this, \"meta\", void 0);\n\n    _defineProperty(this, \"loadError\", void 0);\n\n    _defineProperty(this, \"angularConfigCtrl\", void 0);\n\n    _defineProperty(this, \"configPages\", void 0);\n\n    this.meta = {};\n  }\n\n}","map":{"version":3,"names":["PluginState","PluginType","PluginSignatureStatus","PluginSignatureType","PluginErrorCode","PluginIncludeType","GrafanaPlugin","addConfigPage","tab","configPages","push","setChannelSupport","support","console","warn","meta","constructor"],"sources":["/home/soula/grafana/packages/grafana-data/src/types/plugin.ts"],"sourcesContent":["import { ComponentType } from 'react';\n\nimport { KeyValue } from './data';\n\n/** Describes plugins life cycle status */\nexport enum PluginState {\n  alpha = 'alpha', // Only included if `enable_alpha` config option is true\n  beta = 'beta', // Will show a warning banner\n  stable = 'stable', // Will not show anything\n  deprecated = 'deprecated', // Will continue to work -- but not show up in the options to add\n}\n\n/** Describes {@link https://grafana.com/docs/grafana/latest/plugins | type of plugin} */\nexport enum PluginType {\n  panel = 'panel',\n  datasource = 'datasource',\n  app = 'app',\n  renderer = 'renderer',\n}\n\n/** Describes status of {@link https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/ | plugin signature} */\nexport enum PluginSignatureStatus {\n  internal = 'internal', // core plugin, no signature\n  valid = 'valid', // signed and accurate MANIFEST\n  invalid = 'invalid', // invalid signature\n  modified = 'modified', // valid signature, but content mismatch\n  missing = 'missing', // missing signature file\n}\n\n/** Describes level of {@link https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/#plugin-signature-levels/ | plugin signature level} */\nexport enum PluginSignatureType {\n  grafana = 'grafana',\n  commercial = 'commercial',\n  community = 'community',\n  private = 'private',\n  core = 'core',\n}\n\n/** Describes error code returned from Grafana plugins API call */\nexport enum PluginErrorCode {\n  missingSignature = 'signatureMissing',\n  invalidSignature = 'signatureInvalid',\n  modifiedSignature = 'signatureModified',\n}\n\n/** Describes error returned from Grafana plugins API call */\nexport interface PluginError {\n  errorCode: PluginErrorCode;\n  pluginId: string;\n}\n\nexport interface PluginMeta<T extends KeyValue = {}> {\n  id: string;\n  name: string;\n  type: PluginType;\n  info: PluginMetaInfo;\n  includes?: PluginInclude[];\n  state?: PluginState;\n\n  // System.load & relative URLS\n  module: string;\n  baseUrl: string;\n\n  // Define plugin requirements\n  dependencies?: PluginDependencies;\n\n  // Filled in by the backend\n  jsonData?: T;\n  secureJsonData?: KeyValue;\n  enabled?: boolean;\n  defaultNavUrl?: string;\n  hasUpdate?: boolean;\n  enterprise?: boolean;\n  latestVersion?: string;\n  pinned?: boolean;\n  signature?: PluginSignatureStatus;\n  signatureType?: PluginSignatureType;\n  signatureOrg?: string;\n  live?: boolean;\n}\n\ninterface PluginDependencyInfo {\n  id: string;\n  name: string;\n  version: string;\n  type: PluginType;\n}\n\nexport interface PluginDependencies {\n  grafanaDependency?: string;\n  grafanaVersion: string;\n  plugins: PluginDependencyInfo[];\n}\n\nexport enum PluginIncludeType {\n  dashboard = 'dashboard',\n  page = 'page',\n\n  // Only valid for apps\n  panel = 'panel',\n  datasource = 'datasource',\n}\n\nexport interface PluginInclude {\n  type: PluginIncludeType;\n  name: string;\n  path?: string;\n  icon?: string;\n\n  role?: string; // \"Viewer\", Admin, editor???\n  addToNav?: boolean; // Show in the sidebar... only if type=page?\n\n  // Angular app pages\n  component?: string;\n}\n\ninterface PluginMetaInfoLink {\n  name: string;\n  url: string;\n}\n\nexport interface PluginBuildInfo {\n  time?: number;\n  repo?: string;\n  branch?: string;\n  hash?: string;\n  number?: number;\n  pr?: number;\n}\n\nexport interface ScreenshotInfo {\n  name: string;\n  path: string;\n}\n\nexport interface PluginMetaInfo {\n  author: {\n    name: string;\n    url?: string;\n  };\n  description: string;\n  links: PluginMetaInfoLink[];\n  logos: {\n    large: string;\n    small: string;\n  };\n  build?: PluginBuildInfo;\n  screenshots: ScreenshotInfo[];\n  updated: string;\n  version: string;\n}\n\nexport interface PluginConfigPageProps<T extends PluginMeta> {\n  plugin: GrafanaPlugin<T>;\n  query: KeyValue; // The URL query parameters\n}\n\nexport interface PluginConfigPage<T extends PluginMeta> {\n  title: string; // Display\n  icon?: string;\n  id: string; // Unique, in URL\n\n  body: ComponentType<PluginConfigPageProps<T>>;\n}\n\nexport class GrafanaPlugin<T extends PluginMeta = PluginMeta> {\n  // Meta is filled in by the plugin loading system\n  meta: T;\n\n  // This is set if the plugin system had errors loading the plugin\n  loadError?: boolean;\n\n  // Config control (app/datasource)\n  angularConfigCtrl?: any;\n\n  // Show configuration tabs on the plugin page\n  configPages?: Array<PluginConfigPage<T>>;\n\n  // Tabs on the plugin page\n  addConfigPage(tab: PluginConfigPage<T>) {\n    if (!this.configPages) {\n      this.configPages = [];\n    }\n    this.configPages.push(tab);\n    return this;\n  }\n\n  /**\n   * @deprecated -- this is no longer necessary and will be removed\n   */\n  setChannelSupport(support: any) {\n    console.warn('[deprecation] plugin is using ignored option: setChannelSupport', this.meta);\n    return this;\n  }\n\n  constructor() {\n    this.meta = {} as T;\n  }\n}\n"],"mappings":";;AAIA;AACA,WAAYA,WAAZ;AAOA;;WAPYA,W;EAAAA,W;EAAAA,W;EAAAA,W;EAAAA,W;GAAAA,W,KAAAA,W;;AAQZ,WAAYC,UAAZ;AAOA;;WAPYA,U;EAAAA,U;EAAAA,U;EAAAA,U;EAAAA,U;GAAAA,U,KAAAA,U;;AAQZ,WAAYC,qBAAZ;AAQA;;WARYA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;GAAAA,qB,KAAAA,qB;;AASZ,WAAYC,mBAAZ;AAQA;;WARYA,mB;EAAAA,mB;EAAAA,mB;EAAAA,mB;EAAAA,mB;EAAAA,mB;GAAAA,mB,KAAAA,mB;;AASZ,WAAYC,eAAZ;AAMA;;WANYA,e;EAAAA,e;EAAAA,e;EAAAA,e;GAAAA,e,KAAAA,e;;AAuDZ,WAAYC,iBAAZ;;WAAYA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAuEZ,OAAO,MAAMC,aAAN,CAAuD;EAC5D;EAGA;EAGA;EAGA;EAGA;EACAC,aAAa,CAACC,GAAD,EAA2B;IACtC,IAAI,CAAC,KAAKC,WAAV,EAAuB;MACrB,KAAKA,WAAL,GAAmB,EAAnB;IACD;;IACD,KAAKA,WAAL,CAAiBC,IAAjB,CAAsBF,GAAtB;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;;;EACEG,iBAAiB,CAACC,OAAD,EAAe;IAC9BC,OAAO,CAACC,IAAR,CAAa,iEAAb,EAAgF,KAAKC,IAArF;IACA,OAAO,IAAP;EACD;;EAEDC,WAAW,GAAG;IAAA;;IAAA;;IAAA;;IAAA;;IACZ,KAAKD,IAAL,GAAY,EAAZ;EACD;;AAhC2D"},"metadata":{},"sourceType":"module"}