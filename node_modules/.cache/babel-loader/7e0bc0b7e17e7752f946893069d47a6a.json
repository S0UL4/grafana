{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { memo, useState } from 'react';\nimport { useDebounce, useLocalStorage } from 'react-use';\nimport { config } from '@grafana/runtime';\nimport { CustomScrollbar, IconButton, stylesFactory, useStyles2, useTheme2 } from '@grafana/ui';\nimport { SEARCH_PANELS_LOCAL_STORAGE_KEY } from '../constants';\nimport { useDashboardSearch } from '../hooks/useDashboardSearch';\nimport { useKeyNavigationListener } from '../hooks/useSearchKeyboardSelection';\nimport { useSearchQuery } from '../hooks/useSearchQuery';\nimport { SearchView } from '../page/components/SearchView';\nimport { ActionRow } from './ActionRow';\nimport { PreviewsSystemRequirements } from './PreviewsSystemRequirements';\nimport { SearchField } from './SearchField';\nimport { SearchResults } from './SearchResults';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function DashboardSearch({\n  onCloseSearch\n}) {\n  if (config.featureToggles.panelTitleSearch) {\n    // TODO: \"folder:current\" ????\n    return /*#__PURE__*/_jsx(DashboardSearchNew, {\n      onCloseSearch: onCloseSearch\n    });\n  }\n\n  return /*#__PURE__*/_jsx(DashboardSearchOLD, {\n    onCloseSearch: onCloseSearch\n  });\n}\n\nfunction DashboardSearchNew({\n  onCloseSearch\n}) {\n  var _query$query;\n\n  const styles = useStyles2(getStyles);\n  const {\n    query,\n    onQueryChange\n  } = useSearchQuery({});\n  let [includePanels, setIncludePanels] = useLocalStorage(SEARCH_PANELS_LOCAL_STORAGE_KEY, true);\n\n  if (!config.featureToggles.panelTitleSearch) {\n    includePanels = false;\n  }\n\n  const [inputValue, setInputValue] = useState((_query$query = query.query) !== null && _query$query !== void 0 ? _query$query : '');\n\n  const onSearchQueryChange = e => {\n    e.preventDefault();\n    setInputValue(e.currentTarget.value);\n  };\n\n  useDebounce(() => onQueryChange(inputValue), 200, [inputValue]);\n  const {\n    onKeyDown,\n    keyboardEvents\n  } = useKeyNavigationListener();\n  return /*#__PURE__*/_jsx(\"div\", {\n    tabIndex: 0,\n    className: styles.overlay,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.searchField,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(\"input\", {\n            type: \"text\",\n            placeholder: includePanels ? 'Search dashboards and panels by name' : 'Search dashboards by name',\n            value: inputValue,\n            onChange: onSearchQueryChange,\n            onKeyDown: onKeyDown,\n            tabIndex: 0,\n            spellCheck: false,\n            className: styles.input,\n            autoFocus: true\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.closeBtn,\n          children: /*#__PURE__*/_jsx(IconButton, {\n            name: \"times\",\n            onClick: onCloseSearch,\n            size: \"xxl\",\n            tooltip: \"Close search\"\n          })\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.search,\n        children: /*#__PURE__*/_jsx(SearchView, {\n          onQueryTextChange: newQueryText => {\n            setInputValue(newQueryText);\n          },\n          showManage: false,\n          queryText: query.query,\n          includePanels: includePanels,\n          setIncludePanels: setIncludePanels,\n          keyboardEvents: keyboardEvents\n        })\n      })]\n    })\n  });\n}\n\nexport const DashboardSearchOLD = /*#__PURE__*/memo(({\n  onCloseSearch\n}) => {\n  const {\n    query,\n    onQueryChange,\n    onTagFilterChange,\n    onTagAdd,\n    onSortChange,\n    onLayoutChange\n  } = useSearchQuery({});\n  const {\n    results,\n    loading,\n    onToggleSection,\n    onKeyDown,\n    showPreviews,\n    setShowPreviews\n  } = useDashboardSearch(query, onCloseSearch);\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  return /*#__PURE__*/_jsx(\"div\", {\n    tabIndex: 0,\n    className: styles.overlay,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.searchField,\n        children: [/*#__PURE__*/_jsx(SearchField, {\n          query: query,\n          onChange: onQueryChange,\n          onKeyDown: onKeyDown,\n          autoFocus: true,\n          clearable: true\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.closeBtn,\n          children: /*#__PURE__*/_jsx(IconButton, {\n            name: \"times\",\n            onClick: onCloseSearch,\n            size: \"xxl\",\n            tooltip: \"Close search\"\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.search,\n        children: [/*#__PURE__*/_jsx(ActionRow, {\n          onLayoutChange,\n          setShowPreviews,\n          onSortChange,\n          onTagFilterChange,\n          query,\n          showPreviews\n        }), /*#__PURE__*/_jsx(PreviewsSystemRequirements, {\n          bottomSpacing: 3,\n          showPreviews: showPreviews,\n          onRemove: () => setShowPreviews(false)\n        }), /*#__PURE__*/_jsx(CustomScrollbar, {\n          children: /*#__PURE__*/_jsx(SearchResults, {\n            results: results,\n            loading: loading,\n            onTagSelected: onTagAdd,\n            editable: false,\n            onToggleSection: onToggleSection,\n            layout: query.layout,\n            showPreviews: showPreviews\n          })\n        })]\n      })]\n    })\n  });\n});\nDashboardSearchOLD.displayName = 'DashboardSearchOLD';\nconst getStyles = stylesFactory(theme => {\n  return {\n    overlay: css`\n      left: 0;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      z-index: ${theme.zIndex.sidemenu};\n      position: fixed;\n      background: ${theme.colors.background.canvas};\n      padding: ${theme.spacing(1)};\n\n      ${theme.breakpoints.up('md')} {\n        left: ${theme.components.sidemenu.width}px;\n        z-index: ${theme.zIndex.navbarFixed + 1};\n        padding: ${theme.spacing(2)};\n      }\n    `,\n    container: css`\n      display: flex;\n      flex-direction: column;\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: ${theme.spacing(1)};\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.components.panel.borderColor};\n      height: 100%;\n\n      ${theme.breakpoints.up('md')} {\n        padding: ${theme.spacing(3)};\n      }\n    `,\n    closeBtn: css`\n      right: -5px;\n      top: 2px;\n      z-index: 1;\n      position: absolute;\n    `,\n    searchField: css`\n      position: relative;\n    `,\n    search: css`\n      display: flex;\n      flex-direction: column;\n      overflow: hidden;\n      height: 100%;\n      padding: ${theme.spacing(2, 0, 3, 0)};\n    `,\n    input: css`\n      box-sizing: border-box;\n      outline: none;\n      background-color: transparent;\n      background: transparent;\n      border-bottom: 2px solid ${theme.v1.colors.border1};\n      font-size: 20px;\n      line-height: 38px;\n      width: 100%;\n\n      &::placeholder {\n        color: ${theme.v1.colors.textWeak};\n      }\n    `\n  };\n});","map":{"version":3,"names":["css","React","memo","useState","useDebounce","useLocalStorage","config","CustomScrollbar","IconButton","stylesFactory","useStyles2","useTheme2","SEARCH_PANELS_LOCAL_STORAGE_KEY","useDashboardSearch","useKeyNavigationListener","useSearchQuery","SearchView","ActionRow","PreviewsSystemRequirements","SearchField","SearchResults","DashboardSearch","onCloseSearch","featureToggles","panelTitleSearch","DashboardSearchNew","styles","getStyles","query","onQueryChange","includePanels","setIncludePanels","inputValue","setInputValue","onSearchQueryChange","e","preventDefault","currentTarget","value","onKeyDown","keyboardEvents","overlay","container","searchField","input","closeBtn","search","newQueryText","DashboardSearchOLD","onTagFilterChange","onTagAdd","onSortChange","onLayoutChange","results","loading","onToggleSection","showPreviews","setShowPreviews","theme","layout","displayName","zIndex","sidemenu","colors","background","canvas","spacing","breakpoints","up","components","width","navbarFixed","primary","panel","borderColor","v1","border1","textWeak"],"sources":["/home/soula/grafana/public/app/features/search/components/DashboardSearch.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, memo, useState } from 'react';\nimport { useDebounce, useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { CustomScrollbar, IconButton, stylesFactory, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { SEARCH_PANELS_LOCAL_STORAGE_KEY } from '../constants';\nimport { useDashboardSearch } from '../hooks/useDashboardSearch';\nimport { useKeyNavigationListener } from '../hooks/useSearchKeyboardSelection';\nimport { useSearchQuery } from '../hooks/useSearchQuery';\nimport { SearchView } from '../page/components/SearchView';\n\nimport { ActionRow } from './ActionRow';\nimport { PreviewsSystemRequirements } from './PreviewsSystemRequirements';\nimport { SearchField } from './SearchField';\nimport { SearchResults } from './SearchResults';\n\nexport interface Props {\n  onCloseSearch: () => void;\n}\n\nexport default function DashboardSearch({ onCloseSearch }: Props) {\n  if (config.featureToggles.panelTitleSearch) {\n    // TODO: \"folder:current\" ????\n    return <DashboardSearchNew onCloseSearch={onCloseSearch} />;\n  }\n  return <DashboardSearchOLD onCloseSearch={onCloseSearch} />;\n}\n\nfunction DashboardSearchNew({ onCloseSearch }: Props) {\n  const styles = useStyles2(getStyles);\n  const { query, onQueryChange } = useSearchQuery({});\n\n  let [includePanels, setIncludePanels] = useLocalStorage<boolean>(SEARCH_PANELS_LOCAL_STORAGE_KEY, true);\n  if (!config.featureToggles.panelTitleSearch) {\n    includePanels = false;\n  }\n\n  const [inputValue, setInputValue] = useState(query.query ?? '');\n  const onSearchQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    setInputValue(e.currentTarget.value);\n  };\n\n  useDebounce(() => onQueryChange(inputValue), 200, [inputValue]);\n\n  const { onKeyDown, keyboardEvents } = useKeyNavigationListener();\n\n  return (\n    <div tabIndex={0} className={styles.overlay}>\n      <div className={styles.container}>\n        <div className={styles.searchField}>\n          <div>\n            <input\n              type=\"text\"\n              placeholder={includePanels ? 'Search dashboards and panels by name' : 'Search dashboards by name'}\n              value={inputValue}\n              onChange={onSearchQueryChange}\n              onKeyDown={onKeyDown}\n              tabIndex={0}\n              spellCheck={false}\n              className={styles.input}\n              autoFocus\n            />\n          </div>\n\n          <div className={styles.closeBtn}>\n            <IconButton name=\"times\" onClick={onCloseSearch} size=\"xxl\" tooltip=\"Close search\" />\n          </div>\n        </div>\n        <div className={styles.search}>\n          <SearchView\n            onQueryTextChange={(newQueryText) => {\n              setInputValue(newQueryText);\n            }}\n            showManage={false}\n            queryText={query.query}\n            includePanels={includePanels!}\n            setIncludePanels={setIncludePanels}\n            keyboardEvents={keyboardEvents}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport const DashboardSearchOLD: FC<Props> = memo(({ onCloseSearch }) => {\n  const { query, onQueryChange, onTagFilterChange, onTagAdd, onSortChange, onLayoutChange } = useSearchQuery({});\n  const { results, loading, onToggleSection, onKeyDown, showPreviews, setShowPreviews } = useDashboardSearch(\n    query,\n    onCloseSearch\n  );\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <div tabIndex={0} className={styles.overlay}>\n      <div className={styles.container}>\n        <div className={styles.searchField}>\n          <SearchField query={query} onChange={onQueryChange} onKeyDown={onKeyDown} autoFocus clearable />\n          <div className={styles.closeBtn}>\n            <IconButton name=\"times\" onClick={onCloseSearch} size=\"xxl\" tooltip=\"Close search\" />\n          </div>\n        </div>\n        <div className={styles.search}>\n          <ActionRow\n            {...{\n              onLayoutChange,\n              setShowPreviews,\n              onSortChange,\n              onTagFilterChange,\n              query,\n              showPreviews,\n            }}\n          />\n          <PreviewsSystemRequirements\n            bottomSpacing={3}\n            showPreviews={showPreviews}\n            onRemove={() => setShowPreviews(false)}\n          />\n          <CustomScrollbar>\n            <SearchResults\n              results={results}\n              loading={loading}\n              onTagSelected={onTagAdd}\n              editable={false}\n              onToggleSection={onToggleSection}\n              layout={query.layout}\n              showPreviews={showPreviews}\n            />\n          </CustomScrollbar>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nDashboardSearchOLD.displayName = 'DashboardSearchOLD';\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    overlay: css`\n      left: 0;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      z-index: ${theme.zIndex.sidemenu};\n      position: fixed;\n      background: ${theme.colors.background.canvas};\n      padding: ${theme.spacing(1)};\n\n      ${theme.breakpoints.up('md')} {\n        left: ${theme.components.sidemenu.width}px;\n        z-index: ${theme.zIndex.navbarFixed + 1};\n        padding: ${theme.spacing(2)};\n      }\n    `,\n    container: css`\n      display: flex;\n      flex-direction: column;\n      max-width: 1400px;\n      margin: 0 auto;\n      padding: ${theme.spacing(1)};\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.components.panel.borderColor};\n      height: 100%;\n\n      ${theme.breakpoints.up('md')} {\n        padding: ${theme.spacing(3)};\n      }\n    `,\n    closeBtn: css`\n      right: -5px;\n      top: 2px;\n      z-index: 1;\n      position: absolute;\n    `,\n    searchField: css`\n      position: relative;\n    `,\n    search: css`\n      display: flex;\n      flex-direction: column;\n      overflow: hidden;\n      height: 100%;\n      padding: ${theme.spacing(2, 0, 3, 0)};\n    `,\n    input: css`\n      box-sizing: border-box;\n      outline: none;\n      background-color: transparent;\n      background: transparent;\n      border-bottom: 2px solid ${theme.v1.colors.border1};\n      font-size: 20px;\n      line-height: 38px;\n      width: 100%;\n\n      &::placeholder {\n        color: ${theme.v1.colors.textWeak};\n      }\n    `,\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}