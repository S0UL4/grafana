{"ast":null,"code":"import debouncePromise from 'debounce-promise';\nimport React, { useCallback, useState } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AsyncSelect } from '@grafana/ui';\nimport { GENERAL_FOLDER_ID, GENERAL_FOLDER_TITLE } from '../../../../features/search/constants';\nimport { PermissionLevelString } from '../../../../types';\nimport { findOptionWithId, getFolderAsOption, getFoldersAsOptions } from './api';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const ALL_FOLDER = {\n  id: undefined,\n  title: 'All'\n};\nexport const GENERAL_FOLDER = {\n  id: GENERAL_FOLDER_ID,\n  title: GENERAL_FOLDER_TITLE\n};\nexport function ReadonlyFolderPicker({\n  onChange: propsOnChange,\n  extraFolders = [],\n  initialFolderId,\n  permissionLevel = PermissionLevelString.View\n}) {\n  const [initialized, setInitialized] = useState(false);\n  const [option, setOption] = useState(undefined);\n  const [options, setOptions] = useState(undefined);\n  const initialize = useCallback(async options => {\n    let option = findOptionWithId(options, initialFolderId);\n\n    if (!option) {\n      var _await$getFolderAsOpt;\n\n      // we didn't find the option with the initialFolderId\n      // might be because the folder doesn't exist any longer\n      // might be because the folder is outside of the search limit of the api\n      option = (_await$getFolderAsOpt = await getFolderAsOption(initialFolderId)) !== null && _await$getFolderAsOpt !== void 0 ? _await$getFolderAsOpt : options[0]; // get folder by id or select the first item in the options and call propsOnChange\n\n      propsOnChange(option.value);\n    }\n\n    setInitialized(true);\n    setOptions(options);\n    setOption(option);\n  }, [initialFolderId, propsOnChange]);\n  const loadOptions = useCallback(async query => {\n    const options = await getFoldersAsOptions({\n      query,\n      permissionLevel,\n      extraFolders\n    });\n\n    if (!initialized) {\n      await initialize(options);\n    }\n\n    return options;\n  }, [permissionLevel, extraFolders, initialized, initialize]);\n  const debouncedLoadOptions = debouncePromise(loadOptions, 300, {\n    leading: true\n  });\n  const onChange = useCallback(({\n    value\n  }) => {\n    const option = findOptionWithId(options, value === null || value === void 0 ? void 0 : value.id);\n    setOption(option);\n    propsOnChange(value);\n  }, [options, propsOnChange]);\n  return /*#__PURE__*/_jsx(\"div\", {\n    \"data-testid\": selectors.components.ReadonlyFolderPicker.container,\n    children: /*#__PURE__*/_jsx(AsyncSelect, {\n      loadingMessage: \"Loading folders...\",\n      defaultOptions: true,\n      defaultValue: option,\n      value: option,\n      loadOptions: debouncedLoadOptions,\n      onChange: onChange\n    })\n  });\n}","map":{"version":3,"names":["debouncePromise","React","useCallback","useState","selectors","AsyncSelect","GENERAL_FOLDER_ID","GENERAL_FOLDER_TITLE","PermissionLevelString","findOptionWithId","getFolderAsOption","getFoldersAsOptions","ALL_FOLDER","id","undefined","title","GENERAL_FOLDER","ReadonlyFolderPicker","onChange","propsOnChange","extraFolders","initialFolderId","permissionLevel","View","initialized","setInitialized","option","setOption","options","setOptions","initialize","value","loadOptions","query","debouncedLoadOptions","leading","components","container"],"sources":["/home/soula/grafana/public/app/core/components/Select/ReadonlyFolderPicker/ReadonlyFolderPicker.tsx"],"sourcesContent":["import debouncePromise from 'debounce-promise';\nimport React, { ReactElement, useCallback, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AsyncSelect } from '@grafana/ui';\n\nimport { GENERAL_FOLDER_ID, GENERAL_FOLDER_TITLE } from '../../../../features/search/constants';\nimport { FolderInfo, PermissionLevelString } from '../../../../types';\n\nimport { findOptionWithId, getFolderAsOption, getFoldersAsOptions } from './api';\nimport { PermissionLevel } from './types';\n\nexport const ALL_FOLDER: FolderInfo = { id: undefined, title: 'All' };\nexport const GENERAL_FOLDER: FolderInfo = { id: GENERAL_FOLDER_ID, title: GENERAL_FOLDER_TITLE };\n\nexport interface ReadonlyFolderPickerProps {\n  onChange: (folder?: FolderInfo) => void;\n  initialFolderId?: number;\n  /**\n   * By default the folders API doesn't include the General folder because it doesn't exist\n   * Add any extra folders you need to appear in the folder picker with the extraFolders property\n   */\n  extraFolders?: FolderInfo[];\n  permissionLevel?: PermissionLevel;\n}\n\nexport function ReadonlyFolderPicker({\n  onChange: propsOnChange,\n  extraFolders = [],\n  initialFolderId,\n  permissionLevel = PermissionLevelString.View,\n}: ReadonlyFolderPickerProps): ReactElement {\n  const [initialized, setInitialized] = useState(false);\n  const [option, setOption] = useState<SelectableValue<FolderInfo> | undefined>(undefined);\n  const [options, setOptions] = useState<Array<SelectableValue<FolderInfo>> | undefined>(undefined);\n  const initialize = useCallback(\n    async (options: Array<SelectableValue<FolderInfo>>) => {\n      let option = findOptionWithId(options, initialFolderId);\n      if (!option) {\n        // we didn't find the option with the initialFolderId\n        // might be because the folder doesn't exist any longer\n        // might be because the folder is outside of the search limit of the api\n        option = (await getFolderAsOption(initialFolderId)) ?? options[0]; // get folder by id or select the first item in the options and call propsOnChange\n        propsOnChange(option.value);\n      }\n\n      setInitialized(true);\n      setOptions(options);\n      setOption(option);\n    },\n    [initialFolderId, propsOnChange]\n  );\n  const loadOptions = useCallback(\n    async (query: string) => {\n      const options = await getFoldersAsOptions({ query, permissionLevel, extraFolders });\n      if (!initialized) {\n        await initialize(options);\n      }\n      return options;\n    },\n    [permissionLevel, extraFolders, initialized, initialize]\n  );\n  const debouncedLoadOptions = debouncePromise(loadOptions, 300, { leading: true });\n  const onChange = useCallback(\n    ({ value }: SelectableValue<FolderInfo>) => {\n      const option = findOptionWithId(options, value?.id);\n      setOption(option);\n      propsOnChange(value);\n    },\n    [options, propsOnChange]\n  );\n\n  return (\n    <div data-testid={selectors.components.ReadonlyFolderPicker.container}>\n      <AsyncSelect\n        loadingMessage=\"Loading folders...\"\n        defaultOptions\n        defaultValue={option}\n        value={option}\n        loadOptions={debouncedLoadOptions}\n        onChange={onChange}\n      />\n    </div>\n  );\n}\n"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,kBAA5B;AACA,OAAOC,KAAP,IAA8BC,WAA9B,EAA2CC,QAA3C,QAA2D,OAA3D;AAGA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,iBAAT,EAA4BC,oBAA5B,QAAwD,uCAAxD;AACA,SAAqBC,qBAArB,QAAkD,mBAAlD;AAEA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,mBAA9C,QAAyE,OAAzE;;AAGA,OAAO,MAAMC,UAAsB,GAAG;EAAEC,EAAE,EAAEC,SAAN;EAAiBC,KAAK,EAAE;AAAxB,CAA/B;AACP,OAAO,MAAMC,cAA0B,GAAG;EAAEH,EAAE,EAAEP,iBAAN;EAAyBS,KAAK,EAAER;AAAhC,CAAnC;AAaP,OAAO,SAASU,oBAAT,CAA8B;EACnCC,QAAQ,EAAEC,aADyB;EAEnCC,YAAY,GAAG,EAFoB;EAGnCC,eAHmC;EAInCC,eAAe,GAAGd,qBAAqB,CAACe;AAJL,CAA9B,EAKqC;EAC1C,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,KAAD,CAA9C;EACA,MAAM,CAACuB,MAAD,EAASC,SAAT,IAAsBxB,QAAQ,CAA0CW,SAA1C,CAApC;EACA,MAAM,CAACc,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAiDW,SAAjD,CAAtC;EACA,MAAMgB,UAAU,GAAG5B,WAAW,CAC5B,MAAO0B,OAAP,IAAuD;IACrD,IAAIF,MAAM,GAAGjB,gBAAgB,CAACmB,OAAD,EAAUP,eAAV,CAA7B;;IACA,IAAI,CAACK,MAAL,EAAa;MAAA;;MACX;MACA;MACA;MACAA,MAAM,4BAAI,MAAMhB,iBAAiB,CAACW,eAAD,CAA3B,yEAAiDO,OAAO,CAAC,CAAD,CAA9D,CAJW,CAIwD;;MACnET,aAAa,CAACO,MAAM,CAACK,KAAR,CAAb;IACD;;IAEDN,cAAc,CAAC,IAAD,CAAd;IACAI,UAAU,CAACD,OAAD,CAAV;IACAD,SAAS,CAACD,MAAD,CAAT;EACD,CAd2B,EAe5B,CAACL,eAAD,EAAkBF,aAAlB,CAf4B,CAA9B;EAiBA,MAAMa,WAAW,GAAG9B,WAAW,CAC7B,MAAO+B,KAAP,IAAyB;IACvB,MAAML,OAAO,GAAG,MAAMjB,mBAAmB,CAAC;MAAEsB,KAAF;MAASX,eAAT;MAA0BF;IAA1B,CAAD,CAAzC;;IACA,IAAI,CAACI,WAAL,EAAkB;MAChB,MAAMM,UAAU,CAACF,OAAD,CAAhB;IACD;;IACD,OAAOA,OAAP;EACD,CAP4B,EAQ7B,CAACN,eAAD,EAAkBF,YAAlB,EAAgCI,WAAhC,EAA6CM,UAA7C,CAR6B,CAA/B;EAUA,MAAMI,oBAAoB,GAAGlC,eAAe,CAACgC,WAAD,EAAc,GAAd,EAAmB;IAAEG,OAAO,EAAE;EAAX,CAAnB,CAA5C;EACA,MAAMjB,QAAQ,GAAGhB,WAAW,CAC1B,CAAC;IAAE6B;EAAF,CAAD,KAA4C;IAC1C,MAAML,MAAM,GAAGjB,gBAAgB,CAACmB,OAAD,EAAUG,KAAV,aAAUA,KAAV,uBAAUA,KAAK,CAAElB,EAAjB,CAA/B;IACAc,SAAS,CAACD,MAAD,CAAT;IACAP,aAAa,CAACY,KAAD,CAAb;EACD,CALyB,EAM1B,CAACH,OAAD,EAAUT,aAAV,CAN0B,CAA5B;EASA,oBACE;IAAK,eAAaf,SAAS,CAACgC,UAAV,CAAqBnB,oBAArB,CAA0CoB,SAA5D;IAAA,uBACE,KAAC,WAAD;MACE,cAAc,EAAC,oBADjB;MAEE,cAAc,MAFhB;MAGE,YAAY,EAAEX,MAHhB;MAIE,KAAK,EAAEA,MAJT;MAKE,WAAW,EAAEQ,oBALf;MAME,QAAQ,EAAEhB;IANZ;EADF,EADF;AAYD"},"metadata":{},"sourceType":"module"}