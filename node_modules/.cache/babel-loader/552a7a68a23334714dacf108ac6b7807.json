{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\nimport { getAggregationOptionsByMetric } from '../../functions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const Aggregation = props => {\n  const aggOptions = useAggregationOptionsByMetric(props);\n  const selected = useSelectedFromOptions(aggOptions, props);\n  return /*#__PURE__*/_jsx(EditorField, {\n    label: \"Group by function\",\n    \"data-testid\": \"cloud-monitoring-aggregation\",\n    children: /*#__PURE__*/_jsx(Select, {\n      width: \"auto\",\n      onChange: ({\n        value\n      }) => props.onChange(value),\n      value: selected,\n      options: [{\n        label: 'Template Variables',\n        options: props.templateVariableOptions\n      }, {\n        label: 'Aggregations',\n        expanded: true,\n        options: aggOptions\n      }],\n      placeholder: \"Select Reducer\",\n      inputId: `${props.refId}-group-by-function`\n    })\n  });\n};\n\nconst useAggregationOptionsByMetric = ({\n  metricDescriptor\n}) => {\n  const valueType = metricDescriptor === null || metricDescriptor === void 0 ? void 0 : metricDescriptor.valueType;\n  const metricKind = metricDescriptor === null || metricDescriptor === void 0 ? void 0 : metricDescriptor.metricKind;\n  return useMemo(() => {\n    if (!valueType || !metricKind) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(valueType, metricKind).map(a => Object.assign({}, a, {\n      label: a.text\n    }));\n  }, [valueType, metricKind]);\n};\n\nconst useSelectedFromOptions = (aggOptions, props) => {\n  return useMemo(() => {\n    const allOptions = [...aggOptions, ...props.templateVariableOptions];\n    return allOptions.find(s => s.value === props.crossSeriesReducer);\n  }, [aggOptions, props.crossSeriesReducer, props.templateVariableOptions]);\n};","map":{"version":3,"names":["React","useMemo","EditorField","Select","getAggregationOptionsByMetric","Aggregation","props","aggOptions","useAggregationOptionsByMetric","selected","useSelectedFromOptions","value","onChange","label","options","templateVariableOptions","expanded","refId","metricDescriptor","valueType","metricKind","map","a","text","allOptions","find","s","crossSeriesReducer"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/Experimental/Aggregation.tsx"],"sourcesContent":["import React, { FC, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { getAggregationOptionsByMetric } from '../../functions';\nimport { MetricDescriptor, MetricKind, ValueTypes } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (metricDescriptor: string) => void;\n  metricDescriptor?: MetricDescriptor;\n  crossSeriesReducer: string;\n  groupBys: string[];\n  templateVariableOptions: Array<SelectableValue<string>>;\n}\n\nexport const Aggregation: FC<Props> = (props) => {\n  const aggOptions = useAggregationOptionsByMetric(props);\n  const selected = useSelectedFromOptions(aggOptions, props);\n\n  return (\n    <EditorField label=\"Group by function\" data-testid=\"cloud-monitoring-aggregation\">\n      <Select\n        width=\"auto\"\n        onChange={({ value }) => props.onChange(value!)}\n        value={selected}\n        options={[\n          {\n            label: 'Template Variables',\n            options: props.templateVariableOptions,\n          },\n          {\n            label: 'Aggregations',\n            expanded: true,\n            options: aggOptions,\n          },\n        ]}\n        placeholder=\"Select Reducer\"\n        inputId={`${props.refId}-group-by-function`}\n      />\n    </EditorField>\n  );\n};\n\nconst useAggregationOptionsByMetric = ({ metricDescriptor }: Props): Array<SelectableValue<string>> => {\n  const valueType = metricDescriptor?.valueType;\n  const metricKind = metricDescriptor?.metricKind;\n\n  return useMemo(() => {\n    if (!valueType || !metricKind) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(valueType as ValueTypes, metricKind as MetricKind).map((a) => ({\n      ...a,\n      label: a.text,\n    }));\n  }, [valueType, metricKind]);\n};\n\nconst useSelectedFromOptions = (aggOptions: Array<SelectableValue<string>>, props: Props) => {\n  return useMemo(() => {\n    const allOptions = [...aggOptions, ...props.templateVariableOptions];\n    return allOptions.find((s) => s.value === props.crossSeriesReducer);\n  }, [aggOptions, props.crossSeriesReducer, props.templateVariableOptions]);\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AAGA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,MAAT,QAAuB,aAAvB;AAEA,SAASC,6BAAT,QAA8C,iBAA9C;;AAYA,OAAO,MAAMC,WAAsB,GAAIC,KAAD,IAAW;EAC/C,MAAMC,UAAU,GAAGC,6BAA6B,CAACF,KAAD,CAAhD;EACA,MAAMG,QAAQ,GAAGC,sBAAsB,CAACH,UAAD,EAAaD,KAAb,CAAvC;EAEA,oBACE,KAAC,WAAD;IAAa,KAAK,EAAC,mBAAnB;IAAuC,eAAY,8BAAnD;IAAA,uBACE,KAAC,MAAD;MACE,KAAK,EAAC,MADR;MAEE,QAAQ,EAAE,CAAC;QAAEK;MAAF,CAAD,KAAeL,KAAK,CAACM,QAAN,CAAeD,KAAf,CAF3B;MAGE,KAAK,EAAEF,QAHT;MAIE,OAAO,EAAE,CACP;QACEI,KAAK,EAAE,oBADT;QAEEC,OAAO,EAAER,KAAK,CAACS;MAFjB,CADO,EAKP;QACEF,KAAK,EAAE,cADT;QAEEG,QAAQ,EAAE,IAFZ;QAGEF,OAAO,EAAEP;MAHX,CALO,CAJX;MAeE,WAAW,EAAC,gBAfd;MAgBE,OAAO,EAAG,GAAED,KAAK,CAACW,KAAM;IAhB1B;EADF,EADF;AAsBD,CA1BM;;AA4BP,MAAMT,6BAA6B,GAAG,CAAC;EAAEU;AAAF,CAAD,KAAiE;EACrG,MAAMC,SAAS,GAAGD,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEC,SAApC;EACA,MAAMC,UAAU,GAAGF,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEE,UAArC;EAEA,OAAOnB,OAAO,CAAC,MAAM;IACnB,IAAI,CAACkB,SAAD,IAAc,CAACC,UAAnB,EAA+B;MAC7B,OAAO,EAAP;IACD;;IAED,OAAOhB,6BAA6B,CAACe,SAAD,EAA0BC,UAA1B,CAA7B,CAAiFC,GAAjF,CAAsFC,CAAD,sBACvFA,CADuF;MAE1FT,KAAK,EAAES,CAAC,CAACC;IAFiF,EAArF,CAAP;EAID,CATa,EASX,CAACJ,SAAD,EAAYC,UAAZ,CATW,CAAd;AAUD,CAdD;;AAgBA,MAAMV,sBAAsB,GAAG,CAACH,UAAD,EAA6CD,KAA7C,KAA8D;EAC3F,OAAOL,OAAO,CAAC,MAAM;IACnB,MAAMuB,UAAU,GAAG,CAAC,GAAGjB,UAAJ,EAAgB,GAAGD,KAAK,CAACS,uBAAzB,CAAnB;IACA,OAAOS,UAAU,CAACC,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACf,KAAF,KAAYL,KAAK,CAACqB,kBAAzC,CAAP;EACD,CAHa,EAGX,CAACpB,UAAD,EAAaD,KAAK,CAACqB,kBAAnB,EAAuCrB,KAAK,CAACS,uBAA7C,CAHW,CAAd;AAID,CALD"},"metadata":{},"sourceType":"module"}