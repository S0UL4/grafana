{"ast":null,"code":"import { DataFrameView } from '@grafana/data';\nimport { transformTraceData } from '@jaegertracing/jaeger-ui-components';\nexport function transformDataFrames(frame) {\n  if (!frame) {\n    return null;\n  }\n\n  let data = frame.fields.length === 1 ? // For backward compatibility when we sent whole json response in a single field/value\n  frame.fields[0].values.get(0) : transformTraceDataFrame(frame);\n  return transformTraceData(data);\n}\n\nfunction transformTraceDataFrame(frame) {\n  const view = new DataFrameView(frame);\n  const processes = {};\n\n  for (let i = 0; i < view.length; i++) {\n    const span = view.get(i);\n\n    if (!processes[span.spanID]) {\n      processes[span.spanID] = {\n        serviceName: span.serviceName,\n        tags: span.serviceTags\n      };\n    }\n  }\n\n  return {\n    traceID: view.get(0).traceID,\n    processes,\n    spans: view.toArray().map((s, index) => {\n      var _s$logs;\n\n      const references = [];\n\n      if (s.parentSpanID) {\n        references.push({\n          refType: 'CHILD_OF',\n          spanID: s.parentSpanID,\n          traceID: s.traceID\n        });\n      }\n\n      if (s.references) {\n        references.push(...s.references.map(reference => Object.assign({\n          refType: 'FOLLOWS_FROM'\n        }, reference)));\n      }\n\n      return Object.assign({}, s, {\n        duration: s.duration * 1000,\n        startTime: s.startTime * 1000,\n        processID: s.spanID,\n        flags: 0,\n        references,\n        logs: ((_s$logs = s.logs) === null || _s$logs === void 0 ? void 0 : _s$logs.map(l => Object.assign({}, l, {\n          timestamp: l.timestamp * 1000\n        }))) || [],\n        dataFrameRowIndex: index\n      });\n    })\n  };\n}","map":{"version":3,"names":["DataFrameView","transformTraceData","transformDataFrames","frame","data","fields","length","values","get","transformTraceDataFrame","view","processes","i","span","spanID","serviceName","tags","serviceTags","traceID","spans","toArray","map","s","index","references","parentSpanID","push","refType","reference","duration","startTime","processID","flags","logs","l","timestamp","dataFrameRowIndex"],"sources":["/home/soula/grafana/public/app/features/explore/TraceView/utils/transform.ts"],"sourcesContent":["import { DataFrame, DataFrameView, TraceSpanRow } from '@grafana/data';\nimport { Trace, TraceProcess, TraceResponse, transformTraceData } from '@jaegertracing/jaeger-ui-components';\n\nexport function transformDataFrames(frame?: DataFrame): Trace | null {\n  if (!frame) {\n    return null;\n  }\n  let data: TraceResponse =\n    frame.fields.length === 1\n      ? // For backward compatibility when we sent whole json response in a single field/value\n        frame.fields[0].values.get(0)\n      : transformTraceDataFrame(frame);\n  return transformTraceData(data);\n}\n\nfunction transformTraceDataFrame(frame: DataFrame): TraceResponse {\n  const view = new DataFrameView<TraceSpanRow>(frame);\n  const processes: Record<string, TraceProcess> = {};\n  for (let i = 0; i < view.length; i++) {\n    const span = view.get(i);\n    if (!processes[span.spanID]) {\n      processes[span.spanID] = {\n        serviceName: span.serviceName,\n        tags: span.serviceTags,\n      };\n    }\n  }\n\n  return {\n    traceID: view.get(0).traceID,\n    processes,\n    spans: view.toArray().map((s, index) => {\n      const references = [];\n      if (s.parentSpanID) {\n        references.push({ refType: 'CHILD_OF' as const, spanID: s.parentSpanID, traceID: s.traceID });\n      }\n      if (s.references) {\n        references.push(...s.references.map((reference) => ({ refType: 'FOLLOWS_FROM' as const, ...reference })));\n      }\n      return {\n        ...s,\n        duration: s.duration * 1000,\n        startTime: s.startTime * 1000,\n        processID: s.spanID,\n        flags: 0,\n        references,\n        logs: s.logs?.map((l) => ({ ...l, timestamp: l.timestamp * 1000 })) || [],\n        dataFrameRowIndex: index,\n      };\n    }),\n  };\n}\n"],"mappings":"AAAA,SAAoBA,aAApB,QAAuD,eAAvD;AACA,SAA6CC,kBAA7C,QAAuE,qCAAvE;AAEA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAA8D;EACnE,IAAI,CAACA,KAAL,EAAY;IACV,OAAO,IAAP;EACD;;EACD,IAAIC,IAAmB,GACrBD,KAAK,CAACE,MAAN,CAAaC,MAAb,KAAwB,CAAxB,GACI;EACAH,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgBE,MAAhB,CAAuBC,GAAvB,CAA2B,CAA3B,CAFJ,GAGIC,uBAAuB,CAACN,KAAD,CAJ7B;EAKA,OAAOF,kBAAkB,CAACG,IAAD,CAAzB;AACD;;AAED,SAASK,uBAAT,CAAiCN,KAAjC,EAAkE;EAChE,MAAMO,IAAI,GAAG,IAAIV,aAAJ,CAAgCG,KAAhC,CAAb;EACA,MAAMQ,SAAuC,GAAG,EAAhD;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACJ,MAAzB,EAAiCM,CAAC,EAAlC,EAAsC;IACpC,MAAMC,IAAI,GAAGH,IAAI,CAACF,GAAL,CAASI,CAAT,CAAb;;IACA,IAAI,CAACD,SAAS,CAACE,IAAI,CAACC,MAAN,CAAd,EAA6B;MAC3BH,SAAS,CAACE,IAAI,CAACC,MAAN,CAAT,GAAyB;QACvBC,WAAW,EAAEF,IAAI,CAACE,WADK;QAEvBC,IAAI,EAAEH,IAAI,CAACI;MAFY,CAAzB;IAID;EACF;;EAED,OAAO;IACLC,OAAO,EAAER,IAAI,CAACF,GAAL,CAAS,CAAT,EAAYU,OADhB;IAELP,SAFK;IAGLQ,KAAK,EAAET,IAAI,CAACU,OAAL,GAAeC,GAAf,CAAmB,CAACC,CAAD,EAAIC,KAAJ,KAAc;MAAA;;MACtC,MAAMC,UAAU,GAAG,EAAnB;;MACA,IAAIF,CAAC,CAACG,YAAN,EAAoB;QAClBD,UAAU,CAACE,IAAX,CAAgB;UAAEC,OAAO,EAAE,UAAX;UAAgCb,MAAM,EAAEQ,CAAC,CAACG,YAA1C;UAAwDP,OAAO,EAAEI,CAAC,CAACJ;QAAnE,CAAhB;MACD;;MACD,IAAII,CAAC,CAACE,UAAN,EAAkB;QAChBA,UAAU,CAACE,IAAX,CAAgB,GAAGJ,CAAC,CAACE,UAAF,CAAaH,GAAb,CAAkBO,SAAD;UAAkBD,OAAO,EAAE;QAA3B,GAAuDC,SAAvD,CAAjB,CAAnB;MACD;;MACD,yBACKN,CADL;QAEEO,QAAQ,EAAEP,CAAC,CAACO,QAAF,GAAa,IAFzB;QAGEC,SAAS,EAAER,CAAC,CAACQ,SAAF,GAAc,IAH3B;QAIEC,SAAS,EAAET,CAAC,CAACR,MAJf;QAKEkB,KAAK,EAAE,CALT;QAMER,UANF;QAOES,IAAI,EAAE,YAAAX,CAAC,CAACW,IAAF,oDAAQZ,GAAR,CAAaa,CAAD,sBAAaA,CAAb;UAAgBC,SAAS,EAAED,CAAC,CAACC,SAAF,GAAc;QAAzC,EAAZ,MAAiE,EAPzE;QAQEC,iBAAiB,EAAEb;MARrB;IAUD,CAlBM;EAHF,CAAP;AAuBD"},"metadata":{},"sourceType":"module"}