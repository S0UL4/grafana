{"ast":null,"code":"import { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAsync } from 'react-use';\nimport { fetchPromAndRulerRulesAction } from '../state/actions';\nimport { initialAsyncRequestState } from '../utils/redux';\nimport * as ruleId from '../utils/rule-id';\nimport { isRulerNotSupportedResponse } from '../utils/rules';\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nexport function useCombinedRule(identifier, ruleSourceName) {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n  const rule = useMemo(() => {\n    if (!identifier || !ruleSourceName || combinedRules.length === 0) {\n      return;\n    }\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n          if (ruleId.equal(id, identifier)) {\n            return rule;\n          }\n        }\n      }\n    }\n\n    return;\n  }, [identifier, ruleSourceName, combinedRules]);\n  return Object.assign({}, requestState, {\n    result: rule\n  });\n}\nexport function useCombinedRulesMatching(ruleName, ruleSourceName) {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n  return Object.assign({}, requestState, {\n    result: rules\n  });\n}\n\nfunction useCombinedRulesLoader(rulesSourceName) {\n  var _promRuleRequest$erro;\n\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector(state => state.promRules);\n  const promRuleRequest = getRequestState(rulesSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector(state => state.rulerRules);\n  const rulerRuleRequest = getRequestState(rulesSourceName, rulerRuleRequests);\n  const {\n    loading\n  } = useAsync(async () => {\n    if (!rulesSourceName) {\n      return;\n    }\n\n    await dispatch(fetchPromAndRulerRulesAction({\n      rulesSourceName\n    }));\n  }, [dispatch, rulesSourceName]);\n  return {\n    loading,\n    error: ((_promRuleRequest$erro = promRuleRequest.error) !== null && _promRuleRequest$erro !== void 0 ? _promRuleRequest$erro : isRulerNotSupportedResponse(rulerRuleRequest)) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched\n  };\n}\n\nfunction getRequestState(ruleSourceName, slice) {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}","map":{"version":3,"names":["useMemo","useDispatch","useAsync","fetchPromAndRulerRulesAction","initialAsyncRequestState","ruleId","isRulerNotSupportedResponse","useCombinedRuleNamespaces","useUnifiedAlertingSelector","useCombinedRule","identifier","ruleSourceName","requestState","useCombinedRulesLoader","combinedRules","rule","length","namespace","group","groups","rules","id","fromCombinedRule","equal","result","useCombinedRulesMatching","ruleName","name","push","rulesSourceName","dispatch","promRuleRequests","state","promRules","promRuleRequest","getRequestState","rulerRuleRequests","rulerRules","rulerRuleRequest","loading","error","undefined","dispatched","slice"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/hooks/useCombinedRule.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAsync } from 'react-use';\n\nimport { CombinedRule, RuleIdentifier, RuleNamespace } from 'app/types/unified-alerting';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { fetchPromAndRulerRulesAction } from '../state/actions';\nimport { AsyncRequestMapSlice, AsyncRequestState, initialAsyncRequestState } from '../utils/redux';\nimport * as ruleId from '../utils/rule-id';\nimport { isRulerNotSupportedResponse } from '../utils/rules';\n\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useCombinedRule(\n  identifier: RuleIdentifier | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rule = useMemo(() => {\n    if (!identifier || !ruleSourceName || combinedRules.length === 0) {\n      return;\n    }\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n          if (ruleId.equal(id, identifier)) {\n            return rule;\n          }\n        }\n      }\n    }\n\n    return;\n  }, [identifier, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rule,\n  };\n}\n\nexport function useCombinedRulesMatching(\n  ruleName: string | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule[]> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules: CombinedRule[] = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rules,\n  };\n}\n\nfunction useCombinedRulesLoader(rulesSourceName: string | undefined): AsyncRequestState<void> {\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const promRuleRequest = getRequestState(rulesSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRuleRequest = getRequestState(rulesSourceName, rulerRuleRequests);\n\n  const { loading } = useAsync(async () => {\n    if (!rulesSourceName) {\n      return;\n    }\n\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName }));\n  }, [dispatch, rulesSourceName]);\n\n  return {\n    loading,\n    error: promRuleRequest.error ?? isRulerNotSupportedResponse(rulerRuleRequest) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched,\n  };\n}\n\nfunction getRequestState(\n  ruleSourceName: string | undefined,\n  slice: AsyncRequestMapSlice<RulerRulesConfigDTO | RuleNamespace[] | null>\n): AsyncRequestState<RulerRulesConfigDTO | RuleNamespace[] | null> {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}