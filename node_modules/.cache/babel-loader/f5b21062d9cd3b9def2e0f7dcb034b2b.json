{"ast":null,"code":"function roundDec(val, dec) {\n  return Math.round(val * (dec = 10 ** dec)) / dec;\n}\n\nexport const SPACE_BETWEEN = 1;\nexport const SPACE_AROUND = 2;\nexport const SPACE_EVENLY = 3;\n\nconst coord = (i, offs, iwid, gap) => roundDec(offs + i * (iwid + gap), 6);\n\n/**\n * @internal\n */\nexport function distribute(numItems, sizeFactor, justify, onlyIdx, each) {\n  let space = 1 - sizeFactor;\n  /* eslint-disable no-multi-spaces */\n  // prettier-ignore\n\n  let gap = justify === SPACE_BETWEEN ? space / (numItems - 1) : justify === SPACE_AROUND ? space / numItems : justify === SPACE_EVENLY ? space / (numItems + 1) : 0;\n\n  if (isNaN(gap) || gap === Infinity) {\n    gap = 0;\n  } // prettier-ignore\n\n\n  let offs = justify === SPACE_BETWEEN ? 0 : justify === SPACE_AROUND ? gap / 2 : justify === SPACE_EVENLY ? gap : 0;\n  /* eslint-enable */\n\n  let iwid = sizeFactor / numItems;\n\n  let _iwid = roundDec(iwid, 6);\n\n  if (onlyIdx == null) {\n    for (let i = 0; i < numItems; i++) {\n      each(i, coord(i, offs, iwid, gap), _iwid);\n    }\n  } else {\n    each(onlyIdx, coord(onlyIdx, offs, iwid, gap), _iwid);\n  }\n}","map":{"version":3,"names":["roundDec","val","dec","Math","round","SPACE_BETWEEN","SPACE_AROUND","SPACE_EVENLY","coord","i","offs","iwid","gap","distribute","numItems","sizeFactor","justify","onlyIdx","each","space","isNaN","Infinity","_iwid"],"sources":["/home/soula/grafana/public/app/plugins/panel/barchart/distribute.ts"],"sourcesContent":["function roundDec(val: number, dec: number) {\n  return Math.round(val * (dec = 10 ** dec)) / dec;\n}\n\nexport const SPACE_BETWEEN = 1;\nexport const SPACE_AROUND = 2;\nexport const SPACE_EVENLY = 3;\n\nconst coord = (i: number, offs: number, iwid: number, gap: number) => roundDec(offs + i * (iwid + gap), 6);\n\nexport type Each = (idx: number, offPct: number, dimPct: number) => void;\n\n/**\n * @internal\n */\nexport function distribute(numItems: number, sizeFactor: number, justify: number, onlyIdx: number | null, each: Each) {\n  let space = 1 - sizeFactor;\n\n  /* eslint-disable no-multi-spaces */\n  // prettier-ignore\n  let gap = (\n    justify === SPACE_BETWEEN ? space / (numItems - 1) :\n    justify === SPACE_AROUND  ? space / (numItems  )   :\n    justify === SPACE_EVENLY  ? space / (numItems + 1) : 0\n  );\n\n  if (isNaN(gap) || gap === Infinity) {\n    gap = 0;\n  }\n\n  // prettier-ignore\n  let offs = (\n    justify === SPACE_BETWEEN ? 0       :\n    justify === SPACE_AROUND  ? gap / 2 :\n    justify === SPACE_EVENLY  ? gap     : 0\n  );\n  /* eslint-enable */\n\n  let iwid = sizeFactor / numItems;\n  let _iwid = roundDec(iwid, 6);\n\n  if (onlyIdx == null) {\n    for (let i = 0; i < numItems; i++) {\n      each(i, coord(i, offs, iwid, gap), _iwid);\n    }\n  } else {\n    each(onlyIdx, coord(onlyIdx, offs, iwid, gap), _iwid);\n  }\n}\n"],"mappings":"AAAA,SAASA,QAAT,CAAkBC,GAAlB,EAA+BC,GAA/B,EAA4C;EAC1C,OAAOC,IAAI,CAACC,KAAL,CAAWH,GAAG,IAAIC,GAAG,GAAG,MAAMA,GAAhB,CAAd,IAAsCA,GAA7C;AACD;;AAED,OAAO,MAAMG,aAAa,GAAG,CAAtB;AACP,OAAO,MAAMC,YAAY,GAAG,CAArB;AACP,OAAO,MAAMC,YAAY,GAAG,CAArB;;AAEP,MAAMC,KAAK,GAAG,CAACC,CAAD,EAAYC,IAAZ,EAA0BC,IAA1B,EAAwCC,GAAxC,KAAwDZ,QAAQ,CAACU,IAAI,GAAGD,CAAC,IAAIE,IAAI,GAAGC,GAAX,CAAT,EAA0B,CAA1B,CAA9E;;AAIA;AACA;AACA;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAAsCC,UAAtC,EAA0DC,OAA1D,EAA2EC,OAA3E,EAAmGC,IAAnG,EAA+G;EACpH,IAAIC,KAAK,GAAG,IAAIJ,UAAhB;EAEA;EACA;;EACA,IAAIH,GAAG,GACLI,OAAO,KAAKX,aAAZ,GAA4Bc,KAAK,IAAIL,QAAQ,GAAG,CAAf,CAAjC,GACAE,OAAO,KAAKV,YAAZ,GAA4Ba,KAAK,GAAIL,QAArC,GACAE,OAAO,KAAKT,YAAZ,GAA4BY,KAAK,IAAIL,QAAQ,GAAG,CAAf,CAAjC,GAAqD,CAHvD;;EAMA,IAAIM,KAAK,CAACR,GAAD,CAAL,IAAcA,GAAG,KAAKS,QAA1B,EAAoC;IAClCT,GAAG,GAAG,CAAN;EACD,CAbmH,CAepH;;;EACA,IAAIF,IAAI,GACNM,OAAO,KAAKX,aAAZ,GAA4B,CAA5B,GACAW,OAAO,KAAKV,YAAZ,GAA4BM,GAAG,GAAG,CAAlC,GACAI,OAAO,KAAKT,YAAZ,GAA4BK,GAA5B,GAAsC,CAHxC;EAKA;;EAEA,IAAID,IAAI,GAAGI,UAAU,GAAGD,QAAxB;;EACA,IAAIQ,KAAK,GAAGtB,QAAQ,CAACW,IAAD,EAAO,CAAP,CAApB;;EAEA,IAAIM,OAAO,IAAI,IAAf,EAAqB;IACnB,KAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,QAApB,EAA8BL,CAAC,EAA/B,EAAmC;MACjCS,IAAI,CAACT,CAAD,EAAID,KAAK,CAACC,CAAD,EAAIC,IAAJ,EAAUC,IAAV,EAAgBC,GAAhB,CAAT,EAA+BU,KAA/B,CAAJ;IACD;EACF,CAJD,MAIO;IACLJ,IAAI,CAACD,OAAD,EAAUT,KAAK,CAACS,OAAD,EAAUP,IAAV,EAAgBC,IAAhB,EAAsBC,GAAtB,CAAf,EAA2CU,KAA3C,CAAJ;EACD;AACF"},"metadata":{},"sourceType":"module"}