{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { Field, FieldSet, Select, Switch } from '@grafana/ui';\nimport { TagFilter } from 'app/core/components/TagFilter/TagFilter';\nimport { getAnnotationTags } from 'app/features/annotations/api';\nimport { GrafanaAnnotationType } from '../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst matchTooltipContent = 'Enabling this returns annotations that match any of the tags specified below';\n\nconst tagsTooltipContent = /*#__PURE__*/_jsx(\"div\", {\n  children: \"Specify a list of tags to match. To specify a key and value tag use `key:value` syntax.\"\n});\n\nconst annotationTypes = [{\n  label: 'Dashboard',\n  value: GrafanaAnnotationType.Dashboard,\n  description: 'Query for events created on this dashboard and show them in the panels where they where created'\n}, {\n  label: 'Tags',\n  value: GrafanaAnnotationType.Tags,\n  description: 'This will fetch any annotation events that match the tags filter'\n}];\nconst limitOptions = [10, 50, 100, 200, 300, 500, 1000, 2000].map(limit => ({\n  label: String(limit),\n  value: limit\n}));\nexport default function AnnotationQueryEditor({\n  query,\n  onChange\n}) {\n  const annotationQuery = query;\n  const {\n    limit,\n    matchAny,\n    tags,\n    type\n  } = annotationQuery;\n  const styles = getStyles();\n\n  const onFilterByChange = newValue => onChange(Object.assign({}, annotationQuery, {\n    type: newValue.value\n  }));\n\n  const onMaxLimitChange = newValue => onChange(Object.assign({}, annotationQuery, {\n    limit: newValue.value\n  }));\n\n  const onMatchAnyChange = newValue => onChange(Object.assign({}, annotationQuery, {\n    matchAny: newValue.target.checked\n  }));\n\n  const onTagsChange = tags => onChange(Object.assign({}, annotationQuery, {\n    tags\n  }));\n\n  return /*#__PURE__*/_jsxs(FieldSet, {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsx(Field, {\n      label: \"Filter by\",\n      children: /*#__PURE__*/_jsx(Select, {\n        inputId: \"grafana-annotations__filter-by\",\n        options: annotationTypes,\n        value: type,\n        onChange: onFilterByChange\n      })\n    }), /*#__PURE__*/_jsx(Field, {\n      label: \"Max limit\",\n      children: /*#__PURE__*/_jsx(Select, {\n        inputId: \"grafana-annotations__limit\",\n        width: 16,\n        options: limitOptions,\n        value: limit,\n        onChange: onMaxLimitChange\n      })\n    }), type === GrafanaAnnotationType.Tags && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Field, {\n        label: \"Match any\",\n        description: matchTooltipContent,\n        children: /*#__PURE__*/_jsx(Switch, {\n          id: \"grafana-annotations__match-any\",\n          value: matchAny,\n          onChange: onMatchAnyChange\n        })\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Tags\",\n        description: tagsTooltipContent,\n        children: /*#__PURE__*/_jsx(TagFilter, {\n          allowCustomValue: true,\n          inputId: \"grafana-annotations__tags\",\n          onChange: onTagsChange,\n          tagOptions: getAnnotationTags,\n          tags: tags !== null && tags !== void 0 ? tags : []\n        })\n      })]\n    })]\n  });\n}\n\nconst getStyles = () => {\n  return {\n    container: css`\n      max-width: 600px;\n    `\n  };\n};","map":{"version":3,"names":["css","React","Field","FieldSet","Select","Switch","TagFilter","getAnnotationTags","GrafanaAnnotationType","matchTooltipContent","tagsTooltipContent","annotationTypes","label","value","Dashboard","description","Tags","limitOptions","map","limit","String","AnnotationQueryEditor","query","onChange","annotationQuery","matchAny","tags","type","styles","getStyles","onFilterByChange","newValue","onMaxLimitChange","onMatchAnyChange","target","checked","onTagsChange","container"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana/components/AnnotationQueryEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Field, FieldSet, Select, Switch } from '@grafana/ui';\nimport { TagFilter } from 'app/core/components/TagFilter/TagFilter';\nimport { getAnnotationTags } from 'app/features/annotations/api';\n\nimport { GrafanaAnnotationQuery, GrafanaAnnotationType, GrafanaQuery } from '../types';\n\nconst matchTooltipContent = 'Enabling this returns annotations that match any of the tags specified below';\n\nconst tagsTooltipContent = (\n  <div>Specify a list of tags to match. To specify a key and value tag use `key:value` syntax.</div>\n);\n\nconst annotationTypes = [\n  {\n    label: 'Dashboard',\n    value: GrafanaAnnotationType.Dashboard,\n    description: 'Query for events created on this dashboard and show them in the panels where they where created',\n  },\n  {\n    label: 'Tags',\n    value: GrafanaAnnotationType.Tags,\n    description: 'This will fetch any annotation events that match the tags filter',\n  },\n];\n\nconst limitOptions = [10, 50, 100, 200, 300, 500, 1000, 2000].map((limit) => ({\n  label: String(limit),\n  value: limit,\n}));\n\ninterface Props {\n  query: GrafanaQuery;\n  onChange: (newValue: GrafanaAnnotationQuery) => void;\n}\n\nexport default function AnnotationQueryEditor({ query, onChange }: Props) {\n  const annotationQuery = query as GrafanaAnnotationQuery;\n  const { limit, matchAny, tags, type } = annotationQuery;\n  const styles = getStyles();\n\n  const onFilterByChange = (newValue: SelectableValue<GrafanaAnnotationType>) =>\n    onChange({\n      ...annotationQuery,\n      type: newValue.value!,\n    });\n\n  const onMaxLimitChange = (newValue: SelectableValue<number>) =>\n    onChange({\n      ...annotationQuery,\n      limit: newValue.value!,\n    });\n\n  const onMatchAnyChange = (newValue: React.ChangeEvent<HTMLInputElement>) =>\n    onChange({\n      ...annotationQuery,\n      matchAny: newValue.target.checked,\n    });\n\n  const onTagsChange = (tags: string[]) =>\n    onChange({\n      ...annotationQuery,\n      tags,\n    });\n\n  return (\n    <FieldSet className={styles.container}>\n      <Field label=\"Filter by\">\n        <Select\n          inputId=\"grafana-annotations__filter-by\"\n          options={annotationTypes}\n          value={type}\n          onChange={onFilterByChange}\n        />\n      </Field>\n      <Field label=\"Max limit\">\n        <Select\n          inputId=\"grafana-annotations__limit\"\n          width={16}\n          options={limitOptions}\n          value={limit}\n          onChange={onMaxLimitChange}\n        />\n      </Field>\n      {type === GrafanaAnnotationType.Tags && (\n        <>\n          <Field label=\"Match any\" description={matchTooltipContent}>\n            <Switch id=\"grafana-annotations__match-any\" value={matchAny} onChange={onMatchAnyChange} />\n          </Field>\n          <Field label=\"Tags\" description={tagsTooltipContent}>\n            <TagFilter\n              allowCustomValue\n              inputId=\"grafana-annotations__tags\"\n              onChange={onTagsChange}\n              tagOptions={getAnnotationTags}\n              tags={tags ?? []}\n            />\n          </Field>\n        </>\n      )}\n    </FieldSet>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    container: css`\n      max-width: 600px;\n    `,\n  };\n};\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,MAAlC,QAAgD,aAAhD;AACA,SAASC,SAAT,QAA0B,yCAA1B;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AAEA,SAAiCC,qBAAjC,QAA4E,UAA5E;;;;AAEA,MAAMC,mBAAmB,GAAG,8EAA5B;;AAEA,MAAMC,kBAAkB,gBACtB;EAAA;AAAA,EADF;;AAIA,MAAMC,eAAe,GAAG,CACtB;EACEC,KAAK,EAAE,WADT;EAEEC,KAAK,EAAEL,qBAAqB,CAACM,SAF/B;EAGEC,WAAW,EAAE;AAHf,CADsB,EAMtB;EACEH,KAAK,EAAE,MADT;EAEEC,KAAK,EAAEL,qBAAqB,CAACQ,IAF/B;EAGED,WAAW,EAAE;AAHf,CANsB,CAAxB;AAaA,MAAME,YAAY,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyCC,GAAzC,CAA8CC,KAAD,KAAY;EAC5EP,KAAK,EAAEQ,MAAM,CAACD,KAAD,CAD+D;EAE5EN,KAAK,EAAEM;AAFqE,CAAZ,CAA7C,CAArB;AAUA,eAAe,SAASE,qBAAT,CAA+B;EAAEC,KAAF;EAASC;AAAT,CAA/B,EAA2D;EACxE,MAAMC,eAAe,GAAGF,KAAxB;EACA,MAAM;IAAEH,KAAF;IAASM,QAAT;IAAmBC,IAAnB;IAAyBC;EAAzB,IAAkCH,eAAxC;EACA,MAAMI,MAAM,GAAGC,SAAS,EAAxB;;EAEA,MAAMC,gBAAgB,GAAIC,QAAD,IACvBR,QAAQ,mBACHC,eADG;IAENG,IAAI,EAAEI,QAAQ,CAAClB;EAFT,GADV;;EAMA,MAAMmB,gBAAgB,GAAID,QAAD,IACvBR,QAAQ,mBACHC,eADG;IAENL,KAAK,EAAEY,QAAQ,CAAClB;EAFV,GADV;;EAMA,MAAMoB,gBAAgB,GAAIF,QAAD,IACvBR,QAAQ,mBACHC,eADG;IAENC,QAAQ,EAAEM,QAAQ,CAACG,MAAT,CAAgBC;EAFpB,GADV;;EAMA,MAAMC,YAAY,GAAIV,IAAD,IACnBH,QAAQ,mBACHC,eADG;IAENE;EAFM,GADV;;EAMA,oBACE,MAAC,QAAD;IAAU,SAAS,EAAEE,MAAM,CAACS,SAA5B;IAAA,wBACE,KAAC,KAAD;MAAO,KAAK,EAAC,WAAb;MAAA,uBACE,KAAC,MAAD;QACE,OAAO,EAAC,gCADV;QAEE,OAAO,EAAE1B,eAFX;QAGE,KAAK,EAAEgB,IAHT;QAIE,QAAQ,EAAEG;MAJZ;IADF,EADF,eASE,KAAC,KAAD;MAAO,KAAK,EAAC,WAAb;MAAA,uBACE,KAAC,MAAD;QACE,OAAO,EAAC,4BADV;QAEE,KAAK,EAAE,EAFT;QAGE,OAAO,EAAEb,YAHX;QAIE,KAAK,EAAEE,KAJT;QAKE,QAAQ,EAAEa;MALZ;IADF,EATF,EAkBGL,IAAI,KAAKnB,qBAAqB,CAACQ,IAA/B,iBACC;MAAA,wBACE,KAAC,KAAD;QAAO,KAAK,EAAC,WAAb;QAAyB,WAAW,EAAEP,mBAAtC;QAAA,uBACE,KAAC,MAAD;UAAQ,EAAE,EAAC,gCAAX;UAA4C,KAAK,EAAEgB,QAAnD;UAA6D,QAAQ,EAAEQ;QAAvE;MADF,EADF,eAIE,KAAC,KAAD;QAAO,KAAK,EAAC,MAAb;QAAoB,WAAW,EAAEvB,kBAAjC;QAAA,uBACE,KAAC,SAAD;UACE,gBAAgB,MADlB;UAEE,OAAO,EAAC,2BAFV;UAGE,QAAQ,EAAE0B,YAHZ;UAIE,UAAU,EAAE7B,iBAJd;UAKE,IAAI,EAAEmB,IAAF,aAAEA,IAAF,cAAEA,IAAF,GAAU;QALhB;MADF,EAJF;IAAA,EAnBJ;EAAA,EADF;AAqCD;;AAED,MAAMG,SAAS,GAAG,MAAM;EACtB,OAAO;IACLQ,SAAS,EAAErC,GAAI;AACnB;AACA;EAHS,CAAP;AAKD,CAND"},"metadata":{},"sourceType":"module"}