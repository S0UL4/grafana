{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { from, merge, of, throwError } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport { ArrayDataFrame, DataTopic, LiveChannelScope, LoadingState, toDataFrame } from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, getGrafanaLiveSrv, getTemplateSrv } from '@grafana/runtime';\nimport { getSearchFilterScopedVar } from 'app/features/variables/utils';\nimport { queryMetricTree } from './metricTree';\nimport { generateRandomNodes, savedNodesResponse } from './nodeGraphUtils';\nimport { runStream } from './runStreams';\nimport { TestDataVariableSupport } from './variables';\nexport class TestDataDataSource extends DataSourceWithBackend {\n  constructor(instanceSettings, templateSrv = getTemplateSrv()) {\n    super(instanceSettings);\n\n    _defineProperty(this, \"scenariosCache\", void 0);\n\n    this.templateSrv = templateSrv;\n    this.variables = new TestDataVariableSupport();\n  }\n\n  query(options) {\n    const backendQueries = [];\n    const streams = []; // Start streams and prepare queries\n\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      this.resolveTemplateVariables(target, options.scopedVars);\n\n      switch (target.scenarioId) {\n        case 'live':\n          streams.push(runGrafanaLiveQuery(target, options));\n          break;\n\n        case 'streaming_client':\n          streams.push(runStream(target, options));\n          break;\n\n        case 'grafana_api':\n          streams.push(runGrafanaAPI(target, options));\n          break;\n\n        case 'annotations':\n          streams.push(this.annotationDataTopicTest(target, options));\n          break;\n\n        case 'variables-query':\n          streams.push(this.variablesQuery(target, options));\n          break;\n\n        case 'node_graph':\n          streams.push(this.nodesQuery(target, options));\n          break;\n\n        case 'raw_frame':\n          streams.push(this.rawFrameQuery(target, options));\n          break;\n\n        case 'server_error_500':\n          // this now has an option where it can return/throw an error from the frontend.\n          // if it doesn't, send it to the backend where it might panic there :)\n          const query = this.serverErrorQuery(target, options);\n          query ? streams.push(query) : backendQueries.push(target);\n          break;\n        // Unusable since 7, removed in 8\n\n        case 'manual_entry':\n          {\n            let csvContent = 'Time,Value\\n';\n\n            if (target.points) {\n              for (const point of target.points) {\n                csvContent += `${point[1]},${point[0]}\\n`;\n              }\n            }\n\n            target.scenarioId = 'csv_content';\n            target.csvContent = csvContent;\n          }\n\n        default:\n          backendQueries.push(target);\n      }\n    }\n\n    if (backendQueries.length) {\n      const backendOpts = Object.assign({}, options, {\n        targets: backendQueries\n      });\n      streams.push(super.query(backendOpts));\n    }\n\n    if (streams.length === 0) {\n      return of({\n        data: []\n      });\n    }\n\n    return merge(...streams);\n  }\n\n  resolveTemplateVariables(query, scopedVars) {\n    if (query.labels) {\n      query.labels = this.templateSrv.replace(query.labels, scopedVars);\n    }\n\n    if (query.alias) {\n      query.alias = this.templateSrv.replace(query.alias, scopedVars);\n    }\n\n    if (query.scenarioId) {\n      query.scenarioId = this.templateSrv.replace(query.scenarioId, scopedVars);\n    }\n\n    if (query.stringInput) {\n      query.stringInput = this.templateSrv.replace(query.stringInput, scopedVars);\n    }\n\n    if (query.csvContent) {\n      query.csvContent = this.templateSrv.replace(query.csvContent, scopedVars);\n    }\n\n    if (query.rawFrameContent) {\n      query.rawFrameContent = this.templateSrv.replace(query.rawFrameContent, scopedVars);\n    }\n  }\n\n  annotationDataTopicTest(target, req) {\n    const events = this.buildFakeAnnotationEvents(req.range, 50);\n    const dataFrame = new ArrayDataFrame(events);\n    dataFrame.meta = {\n      dataTopic: DataTopic.Annotations\n    };\n    return of({\n      key: target.refId,\n      data: [dataFrame]\n    }).pipe(delay(100));\n  }\n\n  buildFakeAnnotationEvents(range, count) {\n    let timeWalker = range.from.valueOf();\n    const to = range.to.valueOf();\n    const events = [];\n    const step = (to - timeWalker) / count;\n\n    for (let i = 0; i < count; i++) {\n      events.push({\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server']\n      });\n      timeWalker += step;\n    }\n\n    return events;\n  }\n\n  annotationQuery(options) {\n    return Promise.resolve(this.buildFakeAnnotationEvents(options.range, 10));\n  }\n\n  getQueryDisplayText(query) {\n    var _query$scenarioId;\n\n    const scenario = (_query$scenarioId = query.scenarioId) !== null && _query$scenarioId !== void 0 ? _query$scenarioId : 'Default scenario';\n\n    if (query.alias) {\n      return scenario + ' as ' + query.alias;\n    }\n\n    return scenario;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working'\n    });\n  }\n\n  getScenarios() {\n    if (!this.scenariosCache) {\n      this.scenariosCache = this.getResource('scenarios');\n    }\n\n    return this.scenariosCache;\n  }\n\n  variablesQuery(target, options) {\n    var _target$stringInput;\n\n    const query = (_target$stringInput = target.stringInput) !== null && _target$stringInput !== void 0 ? _target$stringInput : '';\n    const interpolatedQuery = this.templateSrv.replace(query, getSearchFilterScopedVar({\n      query,\n      wildcardChar: '*',\n      options: options.scopedVars\n    }));\n    const children = queryMetricTree(interpolatedQuery);\n    const items = children.map(item => ({\n      value: item.name,\n      text: item.name\n    }));\n    const dataFrame = new ArrayDataFrame(items);\n    return of({\n      data: [dataFrame]\n    }).pipe(delay(100));\n  }\n\n  nodesQuery(target, options) {\n    var _target$nodes, _target$nodes2;\n\n    const type = ((_target$nodes = target.nodes) === null || _target$nodes === void 0 ? void 0 : _target$nodes.type) || 'random';\n    let frames;\n\n    switch (type) {\n      case 'random':\n        frames = generateRandomNodes((_target$nodes2 = target.nodes) === null || _target$nodes2 === void 0 ? void 0 : _target$nodes2.count);\n        break;\n\n      case 'response':\n        frames = savedNodesResponse();\n        break;\n\n      default:\n        throw new Error(`Unknown node_graph sub type ${type}`);\n    }\n\n    return of({\n      data: frames\n    }).pipe(delay(100));\n  }\n\n  rawFrameQuery(target, options) {\n    try {\n      var _target$rawFrameConte;\n\n      const data = JSON.parse((_target$rawFrameConte = target.rawFrameContent) !== null && _target$rawFrameConte !== void 0 ? _target$rawFrameConte : '[]').map(v => {\n        const f = toDataFrame(v);\n        f.refId = target.refId;\n        return f;\n      });\n      return of({\n        data,\n        state: LoadingState.Done\n      }).pipe(delay(100));\n    } catch (ex) {\n      return of({\n        data: [],\n        error: ex instanceof Error ? ex : new Error('Unkown error')\n      }).pipe(delay(100));\n    }\n  }\n\n  serverErrorQuery(target, options) {\n    var _target$stringInput2;\n\n    const {\n      errorType\n    } = target;\n    console.log(\"we're here!\", target);\n\n    if (errorType === 'server_panic') {\n      return null;\n    }\n\n    const stringInput = (_target$stringInput2 = target.stringInput) !== null && _target$stringInput2 !== void 0 ? _target$stringInput2 : '';\n\n    if (stringInput === '') {\n      if (errorType === 'frontend_exception') {\n        throw new Error('Scenario threw an exception in the frontend because the input was empty.');\n      } else {\n        return throwError(() => new Error('Scenario returned an error because the input was empty.'));\n      }\n    }\n\n    return null;\n  }\n\n}\n\nfunction runGrafanaAPI(target, req) {\n  const url = `/api/${target.stringInput}`;\n  return from(getBackendSrv().get(url).then(res => {\n    const frame = new ArrayDataFrame(res);\n    return {\n      state: LoadingState.Done,\n      data: [frame]\n    };\n  }));\n}\n\nlet liveQueryCounter = 1000;\n\nfunction runGrafanaLiveQuery(target, req) {\n  if (!target.channel) {\n    throw new Error(`Missing channel config`);\n  }\n\n  return getGrafanaLiveSrv().getDataStream({\n    addr: {\n      scope: LiveChannelScope.Plugin,\n      namespace: 'testdata',\n      path: target.channel\n    },\n    key: `testStream.${liveQueryCounter++}`\n  });\n}","map":{"version":3,"names":["from","merge","of","throwError","delay","ArrayDataFrame","DataTopic","LiveChannelScope","LoadingState","toDataFrame","DataSourceWithBackend","getBackendSrv","getGrafanaLiveSrv","getTemplateSrv","getSearchFilterScopedVar","queryMetricTree","generateRandomNodes","savedNodesResponse","runStream","TestDataVariableSupport","TestDataDataSource","constructor","instanceSettings","templateSrv","variables","query","options","backendQueries","streams","target","targets","hide","resolveTemplateVariables","scopedVars","scenarioId","push","runGrafanaLiveQuery","runGrafanaAPI","annotationDataTopicTest","variablesQuery","nodesQuery","rawFrameQuery","serverErrorQuery","csvContent","points","point","length","backendOpts","data","labels","replace","alias","stringInput","rawFrameContent","req","events","buildFakeAnnotationEvents","range","dataFrame","meta","dataTopic","Annotations","key","refId","pipe","count","timeWalker","valueOf","to","step","i","time","text","tags","annotationQuery","Promise","resolve","getQueryDisplayText","scenario","testDatasource","status","message","getScenarios","scenariosCache","getResource","interpolatedQuery","wildcardChar","children","items","map","item","value","name","type","nodes","frames","Error","JSON","parse","v","f","state","Done","ex","error","errorType","console","log","url","get","then","res","frame","liveQueryCounter","channel","getDataStream","addr","scope","Plugin","namespace","path"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/datasource.ts"],"sourcesContent":["import { from, merge, Observable, of, throwError } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  ArrayDataFrame,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataTopic,\n  LiveChannelScope,\n  LoadingState,\n  TimeRange,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, getGrafanaLiveSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { getSearchFilterScopedVar } from 'app/features/variables/utils';\n\nimport { queryMetricTree } from './metricTree';\nimport { generateRandomNodes, savedNodesResponse } from './nodeGraphUtils';\nimport { runStream } from './runStreams';\nimport { Scenario, TestDataQuery } from './types';\nimport { TestDataVariableSupport } from './variables';\n\nexport class TestDataDataSource extends DataSourceWithBackend<TestDataQuery> {\n  scenariosCache?: Promise<Scenario[]>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.variables = new TestDataVariableSupport();\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const backendQueries: TestDataQuery[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      this.resolveTemplateVariables(target, options.scopedVars);\n\n      switch (target.scenarioId) {\n        case 'live':\n          streams.push(runGrafanaLiveQuery(target, options));\n          break;\n        case 'streaming_client':\n          streams.push(runStream(target, options));\n          break;\n        case 'grafana_api':\n          streams.push(runGrafanaAPI(target, options));\n          break;\n        case 'annotations':\n          streams.push(this.annotationDataTopicTest(target, options));\n          break;\n        case 'variables-query':\n          streams.push(this.variablesQuery(target, options));\n          break;\n        case 'node_graph':\n          streams.push(this.nodesQuery(target, options));\n          break;\n        case 'raw_frame':\n          streams.push(this.rawFrameQuery(target, options));\n          break;\n        case 'server_error_500':\n          // this now has an option where it can return/throw an error from the frontend.\n          // if it doesn't, send it to the backend where it might panic there :)\n          const query = this.serverErrorQuery(target, options);\n          query ? streams.push(query) : backendQueries.push(target);\n          break;\n        // Unusable since 7, removed in 8\n        case 'manual_entry': {\n          let csvContent = 'Time,Value\\n';\n          if ((target as any).points) {\n            for (const point of (target as any).points) {\n              csvContent += `${point[1]},${point[0]}\\n`;\n            }\n          }\n          target.scenarioId = 'csv_content';\n          target.csvContent = csvContent;\n        }\n\n        default:\n          backendQueries.push(target);\n      }\n    }\n\n    if (backendQueries.length) {\n      const backendOpts = {\n        ...options,\n        targets: backendQueries,\n      };\n      streams.push(super.query(backendOpts));\n    }\n\n    if (streams.length === 0) {\n      return of({ data: [] });\n    }\n\n    return merge(...streams);\n  }\n\n  resolveTemplateVariables(query: TestDataQuery, scopedVars: ScopedVars) {\n    if (query.labels) {\n      query.labels = this.templateSrv.replace(query.labels, scopedVars);\n    }\n    if (query.alias) {\n      query.alias = this.templateSrv.replace(query.alias, scopedVars);\n    }\n    if (query.scenarioId) {\n      query.scenarioId = this.templateSrv.replace(query.scenarioId, scopedVars);\n    }\n    if (query.stringInput) {\n      query.stringInput = this.templateSrv.replace(query.stringInput, scopedVars);\n    }\n    if (query.csvContent) {\n      query.csvContent = this.templateSrv.replace(query.csvContent, scopedVars);\n    }\n    if (query.rawFrameContent) {\n      query.rawFrameContent = this.templateSrv.replace(query.rawFrameContent, scopedVars);\n    }\n  }\n\n  annotationDataTopicTest(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const events = this.buildFakeAnnotationEvents(req.range, 50);\n    const dataFrame = new ArrayDataFrame(events);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    return of({ key: target.refId, data: [dataFrame] }).pipe(delay(100));\n  }\n\n  buildFakeAnnotationEvents(range: TimeRange, count: number): AnnotationEvent[] {\n    let timeWalker = range.from.valueOf();\n    const to = range.to.valueOf();\n    const events = [];\n    const step = (to - timeWalker) / count;\n\n    for (let i = 0; i < count; i++) {\n      events.push({\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n\n    return events;\n  }\n\n  annotationQuery(options: any) {\n    return Promise.resolve(this.buildFakeAnnotationEvents(options.range, 10));\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    const scenario = query.scenarioId ?? 'Default scenario';\n\n    if (query.alias) {\n      return scenario + ' as ' + query.alias;\n    }\n\n    return scenario;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    if (!this.scenariosCache) {\n      this.scenariosCache = this.getResource('scenarios');\n    }\n\n    return this.scenariosCache;\n  }\n\n  variablesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const query = target.stringInput ?? '';\n    const interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '*', options: options.scopedVars })\n    );\n    const children = queryMetricTree(interpolatedQuery);\n    const items = children.map((item) => ({ value: item.name, text: item.name }));\n    const dataFrame = new ArrayDataFrame(items);\n\n    return of({ data: [dataFrame] }).pipe(delay(100));\n  }\n\n  nodesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const type = target.nodes?.type || 'random';\n    let frames: DataFrame[];\n    switch (type) {\n      case 'random':\n        frames = generateRandomNodes(target.nodes?.count);\n        break;\n      case 'response':\n        frames = savedNodesResponse();\n        break;\n      default:\n        throw new Error(`Unknown node_graph sub type ${type}`);\n    }\n\n    return of({ data: frames }).pipe(delay(100));\n  }\n\n  rawFrameQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    try {\n      const data = JSON.parse(target.rawFrameContent ?? '[]').map((v: any) => {\n        const f = toDataFrame(v);\n        f.refId = target.refId;\n        return f;\n      });\n      return of({ data, state: LoadingState.Done }).pipe(delay(100));\n    } catch (ex) {\n      return of({\n        data: [],\n        error: ex instanceof Error ? ex : new Error('Unkown error'),\n      }).pipe(delay(100));\n    }\n  }\n\n  serverErrorQuery(\n    target: TestDataQuery,\n    options: DataQueryRequest<TestDataQuery>\n  ): Observable<DataQueryResponse> | null {\n    const { errorType } = target;\n    console.log(\"we're here!\", target);\n\n    if (errorType === 'server_panic') {\n      return null;\n    }\n\n    const stringInput = target.stringInput ?? '';\n    if (stringInput === '') {\n      if (errorType === 'frontend_exception') {\n        throw new Error('Scenario threw an exception in the frontend because the input was empty.');\n      } else {\n        return throwError(() => new Error('Scenario returned an error because the input was empty.'));\n      }\n    }\n\n    return null;\n  }\n}\n\nfunction runGrafanaAPI(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const url = `/api/${target.stringInput}`;\n  return from(\n    getBackendSrv()\n      .get(url)\n      .then((res) => {\n        const frame = new ArrayDataFrame(res);\n        return {\n          state: LoadingState.Done,\n          data: [frame],\n        };\n      })\n  );\n}\n\nlet liveQueryCounter = 1000;\n\nfunction runGrafanaLiveQuery(\n  target: TestDataQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  if (!target.channel) {\n    throw new Error(`Missing channel config`);\n  }\n  return getGrafanaLiveSrv().getDataStream({\n    addr: {\n      scope: LiveChannelScope.Plugin,\n      namespace: 'testdata',\n      path: target.channel,\n    },\n    key: `testStream.${liveQueryCounter++}`,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}