{"ast":null,"code":"var _ProvisioningBadge;\n\nimport { css, cx } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { Annotation } from '../../utils/constants';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { DynamicTable } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { RuleLocation } from '../RuleLocation';\nimport { RuleDetails } from './RuleDetails';\nimport { RuleHealth } from './RuleHealth';\nimport { RuleState } from './RuleState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const RulesTable = ({\n  rules,\n  className,\n  showGuidelines = false,\n  emptyMessage = 'No rules found.',\n  showGroupColumn = false,\n  showSummaryColumn = false\n}) => {\n  const styles = useStyles2(getStyles);\n  const wrapperClass = cx(styles.wrapper, className, {\n    [styles.wrapperMargin]: showGuidelines\n  });\n  const items = useMemo(() => {\n    const seenKeys = [];\n    return rules.map((rule, ruleIdx) => {\n      var _rule$promRule;\n\n      let key = JSON.stringify([(_rule$promRule = rule.promRule) === null || _rule$promRule === void 0 ? void 0 : _rule$promRule.type, rule.labels, rule.query, rule.name, rule.annotations]);\n\n      if (seenKeys.includes(key)) {\n        key += `-${ruleIdx}`;\n      }\n\n      seenKeys.push(key);\n      return {\n        id: key,\n        data: rule\n      };\n    });\n  }, [rules]);\n  const columns = useColumns(showSummaryColumn, showGroupColumn);\n\n  if (!rules.length) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: cx(wrapperClass, styles.emptyMessage),\n      children: emptyMessage\n    });\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: wrapperClass,\n    \"data-testid\": \"rules-table\",\n    children: /*#__PURE__*/_jsx(TableComponent, {\n      cols: columns,\n      isExpandable: true,\n      items: items,\n      renderExpandedContent: ({\n        data: rule\n      }) => /*#__PURE__*/_jsx(RuleDetails, {\n        rule: rule\n      }),\n      pagination: {\n        itemsPerPage: DEFAULT_PER_PAGE_PAGINATION\n      },\n      paginationStyles: styles.pagination\n    })\n  });\n};\nexport const getStyles = theme => ({\n  wrapperMargin: css`\n    ${theme.breakpoints.up('md')} {\n      margin-left: 36px;\n    }\n  `,\n  emptyMessage: css`\n    padding: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    width: auto;\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n  pagination: css`\n    display: flex;\n    margin: 0;\n    padding-top: ${theme.spacing(1)};\n    padding-bottom: ${theme.spacing(0.25)};\n    justify-content: center;\n    border-left: 1px solid ${theme.colors.border.strong};\n    border-right: 1px solid ${theme.colors.border.strong};\n    border-bottom: 1px solid ${theme.colors.border.strong};\n  `\n});\n\nfunction useColumns(showSummaryColumn, showGroupColumn) {\n  const hasRuler = useHasRuler();\n  return useMemo(() => {\n    const columns = [{\n      id: 'state',\n      label: 'State',\n      // eslint-disable-next-line react/display-name\n      renderCell: ({\n        data: rule\n      }) => {\n        const {\n          namespace\n        } = rule;\n        const {\n          rulesSource\n        } = namespace;\n        const {\n          promRule,\n          rulerRule\n        } = rule;\n        const isDeleting = !!(hasRuler(rulesSource) && promRule && !rulerRule);\n        const isCreating = !!(hasRuler(rulesSource) && rulerRule && !promRule);\n        return /*#__PURE__*/_jsx(RuleState, {\n          rule: rule,\n          isDeleting: isDeleting,\n          isCreating: isCreating\n        });\n      },\n      size: '165px'\n    }, {\n      id: 'name',\n      label: 'Name',\n      // eslint-disable-next-line react/display-name\n      renderCell: ({\n        data: rule\n      }) => rule.name,\n      size: 5\n    }, {\n      id: 'provisioned',\n      label: '',\n      // eslint-disable-next-line react/display-name\n      renderCell: ({\n        data: rule\n      }) => {\n        const rulerRule = rule.rulerRule;\n        const isGrafanaManagedRule = isGrafanaRulerRule(rulerRule);\n\n        if (!isGrafanaManagedRule) {\n          return null;\n        }\n\n        const provenance = rulerRule.grafana_alert.provenance;\n        return provenance ? _ProvisioningBadge || (_ProvisioningBadge = /*#__PURE__*/_jsx(ProvisioningBadge, {})) : null;\n      },\n      size: '100px'\n    }, {\n      id: 'health',\n      label: 'Health',\n      // eslint-disable-next-line react/display-name\n      renderCell: ({\n        data: {\n          promRule\n        }\n      }) => promRule ? /*#__PURE__*/_jsx(RuleHealth, {\n        rule: promRule\n      }) : null,\n      size: '75px'\n    }];\n\n    if (showSummaryColumn) {\n      columns.push({\n        id: 'summary',\n        label: 'Summary',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({\n          data: rule\n        }) => {\n          var _rule$annotations$Ann;\n\n          return (_rule$annotations$Ann = rule.annotations[Annotation.summary]) !== null && _rule$annotations$Ann !== void 0 ? _rule$annotations$Ann : '';\n        },\n        size: 5\n      });\n    }\n\n    if (showGroupColumn) {\n      columns.push({\n        id: 'group',\n        label: 'Group',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({\n          data: rule\n        }) => {\n          const {\n            namespace,\n            group\n          } = rule; // ungrouped rules are rules that are in the \"default\" group name\n\n          const isUngrouped = group.name === 'default';\n          const groupName = isUngrouped ? /*#__PURE__*/_jsx(RuleLocation, {\n            namespace: namespace.name\n          }) : /*#__PURE__*/_jsx(RuleLocation, {\n            namespace: namespace.name,\n            group: group.name\n          });\n          return groupName;\n        },\n        size: 5\n      });\n    }\n\n    return columns;\n  }, [hasRuler, showSummaryColumn, showGroupColumn]);\n}","map":{"version":3,"names":["css","cx","React","useMemo","useStyles2","DEFAULT_PER_PAGE_PAGINATION","useHasRuler","Annotation","isGrafanaRulerRule","DynamicTable","DynamicTableWithGuidelines","ProvisioningBadge","RuleLocation","RuleDetails","RuleHealth","RuleState","RulesTable","rules","className","showGuidelines","emptyMessage","showGroupColumn","showSummaryColumn","styles","getStyles","wrapperClass","wrapper","wrapperMargin","items","seenKeys","map","rule","ruleIdx","key","JSON","stringify","promRule","type","labels","query","name","annotations","includes","push","id","data","columns","useColumns","length","TableComponent","itemsPerPage","pagination","theme","breakpoints","up","spacing","shape","borderRadius","colors","border","strong","hasRuler","label","renderCell","namespace","rulesSource","rulerRule","isDeleting","isCreating","size","isGrafanaManagedRule","provenance","grafana_alert","summary","group","isUngrouped","groupName"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rules/RulesTable.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { Annotation } from '../../utils/constants';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { RuleLocation } from '../RuleLocation';\n\nimport { RuleDetails } from './RuleDetails';\nimport { RuleHealth } from './RuleHealth';\nimport { RuleState } from './RuleState';\n\ntype RuleTableColumnProps = DynamicTableColumnProps<CombinedRule>;\ntype RuleTableItemProps = DynamicTableItemProps<CombinedRule>;\n\ninterface Props {\n  rules: CombinedRule[];\n  showGuidelines?: boolean;\n  showGroupColumn?: boolean;\n  showSummaryColumn?: boolean;\n  emptyMessage?: string;\n  className?: string;\n}\n\nexport const RulesTable: FC<Props> = ({\n  rules,\n  className,\n  showGuidelines = false,\n  emptyMessage = 'No rules found.',\n  showGroupColumn = false,\n  showSummaryColumn = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const wrapperClass = cx(styles.wrapper, className, { [styles.wrapperMargin]: showGuidelines });\n\n  const items = useMemo((): RuleTableItemProps[] => {\n    const seenKeys: string[] = [];\n    return rules.map((rule, ruleIdx) => {\n      let key = JSON.stringify([rule.promRule?.type, rule.labels, rule.query, rule.name, rule.annotations]);\n      if (seenKeys.includes(key)) {\n        key += `-${ruleIdx}`;\n      }\n      seenKeys.push(key);\n      return {\n        id: key,\n        data: rule,\n      };\n    });\n  }, [rules]);\n\n  const columns = useColumns(showSummaryColumn, showGroupColumn);\n\n  if (!rules.length) {\n    return <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>;\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  return (\n    <div className={wrapperClass} data-testid=\"rules-table\">\n      <TableComponent\n        cols={columns}\n        isExpandable={true}\n        items={items}\n        renderExpandedContent={({ data: rule }) => <RuleDetails rule={rule} />}\n        pagination={{ itemsPerPage: DEFAULT_PER_PAGE_PAGINATION }}\n        paginationStyles={styles.pagination}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapperMargin: css`\n    ${theme.breakpoints.up('md')} {\n      margin-left: 36px;\n    }\n  `,\n  emptyMessage: css`\n    padding: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    width: auto;\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n  pagination: css`\n    display: flex;\n    margin: 0;\n    padding-top: ${theme.spacing(1)};\n    padding-bottom: ${theme.spacing(0.25)};\n    justify-content: center;\n    border-left: 1px solid ${theme.colors.border.strong};\n    border-right: 1px solid ${theme.colors.border.strong};\n    border-bottom: 1px solid ${theme.colors.border.strong};\n  `,\n});\n\nfunction useColumns(showSummaryColumn: boolean, showGroupColumn: boolean) {\n  const hasRuler = useHasRuler();\n\n  return useMemo((): RuleTableColumnProps[] => {\n    const columns: RuleTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace } = rule;\n          const { rulesSource } = namespace;\n          const { promRule, rulerRule } = rule;\n          const isDeleting = !!(hasRuler(rulesSource) && promRule && !rulerRule);\n          const isCreating = !!(hasRuler(rulesSource) && rulerRule && !promRule);\n          return <RuleState rule={rule} isDeleting={isDeleting} isCreating={isCreating} />;\n        },\n        size: '165px',\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.name,\n        size: 5,\n      },\n      {\n        id: 'provisioned',\n        label: '',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const rulerRule = rule.rulerRule;\n          const isGrafanaManagedRule = isGrafanaRulerRule(rulerRule);\n\n          if (!isGrafanaManagedRule) {\n            return null;\n          }\n\n          const provenance = rulerRule.grafana_alert.provenance;\n          return provenance ? <ProvisioningBadge /> : null;\n        },\n        size: '100px',\n      },\n      {\n        id: 'health',\n        label: 'Health',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { promRule } }) => (promRule ? <RuleHealth rule={promRule} /> : null),\n        size: '75px',\n      },\n    ];\n    if (showSummaryColumn) {\n      columns.push({\n        id: 'summary',\n        label: 'Summary',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.annotations[Annotation.summary] ?? '',\n        size: 5,\n      });\n    }\n    if (showGroupColumn) {\n      columns.push({\n        id: 'group',\n        label: 'Group',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace, group } = rule;\n          // ungrouped rules are rules that are in the \"default\" group name\n          const isUngrouped = group.name === 'default';\n          const groupName = isUngrouped ? (\n            <RuleLocation namespace={namespace.name} />\n          ) : (\n            <RuleLocation namespace={namespace.name} group={group.name} />\n          );\n\n          return groupName;\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [hasRuler, showSummaryColumn, showGroupColumn]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}