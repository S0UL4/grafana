{"ast":null,"code":"annotationTooltipDirective.$inject = [\"$sanitize\", \"dashboardSrv\", \"contextSrv\", \"$compile\"];\nimport $ from 'jquery';\nimport { isString, escape } from 'lodash';\nimport coreModule from 'app/angular/core_module';\nimport alertDef from 'app/features/alerting/state/alertDef';\n\n/** @ngInject */\nexport function annotationTooltipDirective($sanitize, dashboardSrv, contextSrv, $compile) {\n  function sanitizeString(str) {\n    try {\n      return $sanitize(str);\n    } catch (err) {\n      console.log('Could not sanitize annotation string, html escaping instead');\n      return escape(str);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      event: '=',\n      onEdit: '&'\n    },\n    link: (scope, element) => {\n      const event = scope.event;\n      let title = event.title;\n      let text = event.text;\n      const dashboard = dashboardSrv.getCurrent();\n      let tooltip = '<div class=\"graph-annotation\">';\n      let titleStateClass = '';\n\n      if (event.alertId !== undefined && event.newState) {\n        const stateModel = alertDef.getStateDisplayModel(event.newState);\n        titleStateClass = stateModel.stateClass;\n        title = `<i class=\"${stateModel.iconClass}\"></i> ${stateModel.text}`;\n        text = alertDef.getAlertAnnotationInfo(event);\n\n        if (event.text) {\n          text = text + '<br />' + event.text;\n        }\n      } else if (title) {\n        text = title + '<br />' + (isString(text) ? text : '');\n        title = '';\n      }\n\n      let header = `<div class=\"graph-annotation__header\">`;\n\n      if (event.login && event.avatarUrl) {\n        header += `<div class=\"graph-annotation__user\" bs-tooltip=\"'Created by ${event.login}'\"><img src=\"${event.avatarUrl}\" /></div>`;\n      }\n\n      header += `\n          <span class=\"graph-annotation__title ${titleStateClass}\">${sanitizeString(title)}</span>\n          <span class=\"graph-annotation__time\">${dashboard === null || dashboard === void 0 ? void 0 : dashboard.formatDate(event.min)}</span>\n      `; // Show edit icon only for users with at least Editor role\n\n      if (event.id && dashboard !== null && dashboard !== void 0 && dashboard.canEditAnnotations(event.dashboardId)) {\n        header += `\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\n            <i class=\"fa fa-pencil-square\"></i>\n          </span>\n        `;\n      }\n\n      header += `</div>`;\n      tooltip += header;\n      tooltip += '<div class=\"graph-annotation__body\">';\n\n      if (text) {\n        tooltip += '<div ng-non-bindable>' + sanitizeString(text.replace(/\\n/g, '<br>')) + '</div>';\n      }\n\n      const tags = event.tags;\n\n      if (tags && tags.length) {\n        scope.tags = tags;\n        tooltip += '<span class=\"label label-tag small\" ng-repeat=\"tag in tags\" tag-color-from-name=\"tag\">{{tag}}</span><br/>';\n      }\n\n      tooltip += '</div>';\n      tooltip += '</div>';\n      const $tooltip = $(tooltip);\n      $tooltip.appendTo(element);\n      $compile(element.contents())(scope);\n    }\n  };\n}\ncoreModule.directive('annotationTooltip', annotationTooltipDirective);","map":{"version":3,"names":["$","isString","escape","coreModule","alertDef","annotationTooltipDirective","$sanitize","dashboardSrv","contextSrv","$compile","sanitizeString","str","err","console","log","restrict","scope","event","onEdit","link","element","title","text","dashboard","getCurrent","tooltip","titleStateClass","alertId","undefined","newState","stateModel","getStateDisplayModel","stateClass","iconClass","getAlertAnnotationInfo","header","login","avatarUrl","formatDate","min","id","canEditAnnotations","dashboardId","replace","tags","length","$tooltip","appendTo","contents","directive"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/annotation_tooltip.ts"],"sourcesContent":["import $ from 'jquery';\nimport { isString, escape } from 'lodash';\n\nimport coreModule from 'app/angular/core_module';\nimport { ContextSrv } from 'app/core/services/context_srv';\nimport alertDef from 'app/features/alerting/state/alertDef';\nimport { DashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\n\n/** @ngInject */\nexport function annotationTooltipDirective(\n  $sanitize: any,\n  dashboardSrv: DashboardSrv,\n  contextSrv: ContextSrv,\n  $compile: any\n) {\n  function sanitizeString(str: string) {\n    try {\n      return $sanitize(str);\n    } catch (err) {\n      console.log('Could not sanitize annotation string, html escaping instead');\n      return escape(str);\n    }\n  }\n\n  return {\n    restrict: 'E',\n    scope: {\n      event: '=',\n      onEdit: '&',\n    },\n    link: (scope: any, element: JQuery) => {\n      const event = scope.event;\n      let title = event.title;\n      let text = event.text;\n      const dashboard = dashboardSrv.getCurrent();\n\n      let tooltip = '<div class=\"graph-annotation\">';\n      let titleStateClass = '';\n\n      if (event.alertId !== undefined && event.newState) {\n        const stateModel = alertDef.getStateDisplayModel(event.newState);\n        titleStateClass = stateModel.stateClass;\n        title = `<i class=\"${stateModel.iconClass}\"></i> ${stateModel.text}`;\n        text = alertDef.getAlertAnnotationInfo(event);\n        if (event.text) {\n          text = text + '<br />' + event.text;\n        }\n      } else if (title) {\n        text = title + '<br />' + (isString(text) ? text : '');\n        title = '';\n      }\n\n      let header = `<div class=\"graph-annotation__header\">`;\n      if (event.login && event.avatarUrl) {\n        header += `<div class=\"graph-annotation__user\" bs-tooltip=\"'Created by ${event.login}'\"><img src=\"${event.avatarUrl}\" /></div>`;\n      }\n      header += `\n          <span class=\"graph-annotation__title ${titleStateClass}\">${sanitizeString(title)}</span>\n          <span class=\"graph-annotation__time\">${dashboard?.formatDate(event.min)}</span>\n      `;\n\n      // Show edit icon only for users with at least Editor role\n      if (event.id && dashboard?.canEditAnnotations(event.dashboardId)) {\n        header += `\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\n            <i class=\"fa fa-pencil-square\"></i>\n          </span>\n        `;\n      }\n\n      header += `</div>`;\n      tooltip += header;\n      tooltip += '<div class=\"graph-annotation__body\">';\n\n      if (text) {\n        tooltip += '<div ng-non-bindable>' + sanitizeString(text.replace(/\\n/g, '<br>')) + '</div>';\n      }\n\n      const tags = event.tags;\n\n      if (tags && tags.length) {\n        scope.tags = tags;\n        tooltip +=\n          '<span class=\"label label-tag small\" ng-repeat=\"tag in tags\" tag-color-from-name=\"tag\">{{tag}}</span><br/>';\n      }\n\n      tooltip += '</div>';\n      tooltip += '</div>';\n\n      const $tooltip = $(tooltip);\n      $tooltip.appendTo(element);\n\n      $compile(element.contents())(scope);\n    },\n  };\n}\n\ncoreModule.directive('annotationTooltip', annotationTooltipDirective);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}