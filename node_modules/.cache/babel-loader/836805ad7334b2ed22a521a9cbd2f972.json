{"ast":null,"code":"import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\nimport { locationUtil } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport appEvents from 'app/core/app_events';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/core';\nimport { updateDashboardName } from 'app/core/reducers/navBarTree';\nimport { saveDashboard as saveDashboardApiCall } from 'app/features/manage-dashboards/state/actions';\nimport { DashboardSavedEvent } from 'app/types/events';\n\nconst saveDashboard = async (saveModel, options, dashboard) => {\n  let folderId = options.folderId;\n\n  if (folderId === undefined) {\n    var _dashboard$meta$folde;\n\n    folderId = (_dashboard$meta$folde = dashboard.meta.folderId) !== null && _dashboard$meta$folde !== void 0 ? _dashboard$meta$folde : saveModel.folderId;\n  }\n\n  const result = await saveDashboardApiCall(Object.assign({}, options, {\n    folderId,\n    dashboard: saveModel\n  })); // fetch updated access control permissions\n\n  await contextSrv.fetchUserPermissions();\n  return result;\n};\n\nexport const useDashboardSave = dashboard => {\n  const [state, onDashboardSave] = useAsyncFn(async (clone, options, dashboard) => await saveDashboard(clone, options, dashboard), []);\n  const dispatch = useDispatch();\n  const notifyApp = useAppNotification();\n  useEffect(() => {\n    if (state.value) {\n      dashboard.version = state.value.version;\n      dashboard.clearUnsavedChanges(); // important that these happen before location redirect below\n\n      appEvents.publish(new DashboardSavedEvent());\n      notifyApp.success('Dashboard saved');\n      reportInteraction(`Dashboard ${dashboard.id ? 'saved' : 'created'}`, {\n        name: dashboard.title,\n        url: state.value.url\n      });\n      const currentPath = locationService.getLocation().pathname;\n      const newUrl = locationUtil.stripBaseFromUrl(state.value.url);\n\n      if (newUrl !== currentPath) {\n        setTimeout(() => locationService.replace(newUrl));\n      }\n\n      if (dashboard.meta.isStarred) {\n        dispatch(updateDashboardName({\n          id: dashboard.uid,\n          title: dashboard.title,\n          url: newUrl\n        }));\n      }\n    }\n  }, [dashboard, state, notifyApp, dispatch]);\n  return {\n    state,\n    onDashboardSave\n  };\n};","map":{"version":3,"names":["useEffect","useDispatch","useAsyncFn","locationUtil","locationService","reportInteraction","appEvents","useAppNotification","contextSrv","updateDashboardName","saveDashboard","saveDashboardApiCall","DashboardSavedEvent","saveModel","options","dashboard","folderId","undefined","meta","result","fetchUserPermissions","useDashboardSave","state","onDashboardSave","clone","dispatch","notifyApp","value","version","clearUnsavedChanges","publish","success","id","name","title","url","currentPath","getLocation","pathname","newUrl","stripBaseFromUrl","setTimeout","replace","isStarred","uid"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/SaveDashboard/useDashboardSave.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\n\nimport { locationUtil } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport appEvents from 'app/core/app_events';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/core';\nimport { updateDashboardName } from 'app/core/reducers/navBarTree';\nimport { DashboardModel } from 'app/features/dashboard/state';\nimport { saveDashboard as saveDashboardApiCall } from 'app/features/manage-dashboards/state/actions';\nimport { DashboardSavedEvent } from 'app/types/events';\n\nimport { SaveDashboardOptions } from './types';\n\nconst saveDashboard = async (saveModel: any, options: SaveDashboardOptions, dashboard: DashboardModel) => {\n  let folderId = options.folderId;\n  if (folderId === undefined) {\n    folderId = dashboard.meta.folderId ?? saveModel.folderId;\n  }\n\n  const result = await saveDashboardApiCall({ ...options, folderId, dashboard: saveModel });\n  // fetch updated access control permissions\n  await contextSrv.fetchUserPermissions();\n  return result;\n};\n\nexport const useDashboardSave = (dashboard: DashboardModel) => {\n  const [state, onDashboardSave] = useAsyncFn(\n    async (clone: any, options: SaveDashboardOptions, dashboard: DashboardModel) =>\n      await saveDashboard(clone, options, dashboard),\n    []\n  );\n  const dispatch = useDispatch();\n\n  const notifyApp = useAppNotification();\n  useEffect(() => {\n    if (state.value) {\n      dashboard.version = state.value.version;\n      dashboard.clearUnsavedChanges();\n\n      // important that these happen before location redirect below\n      appEvents.publish(new DashboardSavedEvent());\n      notifyApp.success('Dashboard saved');\n      reportInteraction(`Dashboard ${dashboard.id ? 'saved' : 'created'}`, {\n        name: dashboard.title,\n        url: state.value.url,\n      });\n\n      const currentPath = locationService.getLocation().pathname;\n      const newUrl = locationUtil.stripBaseFromUrl(state.value.url);\n\n      if (newUrl !== currentPath) {\n        setTimeout(() => locationService.replace(newUrl));\n      }\n      if (dashboard.meta.isStarred) {\n        dispatch(\n          updateDashboardName({\n            id: dashboard.uid,\n            title: dashboard.title,\n            url: newUrl,\n          })\n        );\n      }\n    }\n  }, [dashboard, state, notifyApp, dispatch]);\n\n  return { state, onDashboardSave };\n};\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,kBAAnD;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AAEA,SAASC,aAAa,IAAIC,oBAA1B,QAAsD,8CAAtD;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAIA,MAAMF,aAAa,GAAG,OAAOG,SAAP,EAAuBC,OAAvB,EAAsDC,SAAtD,KAAoF;EACxG,IAAIC,QAAQ,GAAGF,OAAO,CAACE,QAAvB;;EACA,IAAIA,QAAQ,KAAKC,SAAjB,EAA4B;IAAA;;IAC1BD,QAAQ,4BAAGD,SAAS,CAACG,IAAV,CAAeF,QAAlB,yEAA8BH,SAAS,CAACG,QAAhD;EACD;;EAED,MAAMG,MAAM,GAAG,MAAMR,oBAAoB,mBAAMG,OAAN;IAAeE,QAAf;IAAyBD,SAAS,EAAEF;EAApC,GAAzC,CANwG,CAOxG;;EACA,MAAML,UAAU,CAACY,oBAAX,EAAN;EACA,OAAOD,MAAP;AACD,CAVD;;AAYA,OAAO,MAAME,gBAAgB,GAAIN,SAAD,IAA+B;EAC7D,MAAM,CAACO,KAAD,EAAQC,eAAR,IAA2BrB,UAAU,CACzC,OAAOsB,KAAP,EAAmBV,OAAnB,EAAkDC,SAAlD,KACE,MAAML,aAAa,CAACc,KAAD,EAAQV,OAAR,EAAiBC,SAAjB,CAFoB,EAGzC,EAHyC,CAA3C;EAKA,MAAMU,QAAQ,GAAGxB,WAAW,EAA5B;EAEA,MAAMyB,SAAS,GAAGnB,kBAAkB,EAApC;EACAP,SAAS,CAAC,MAAM;IACd,IAAIsB,KAAK,CAACK,KAAV,EAAiB;MACfZ,SAAS,CAACa,OAAV,GAAoBN,KAAK,CAACK,KAAN,CAAYC,OAAhC;MACAb,SAAS,CAACc,mBAAV,GAFe,CAIf;;MACAvB,SAAS,CAACwB,OAAV,CAAkB,IAAIlB,mBAAJ,EAAlB;MACAc,SAAS,CAACK,OAAV,CAAkB,iBAAlB;MACA1B,iBAAiB,CAAE,aAAYU,SAAS,CAACiB,EAAV,GAAe,OAAf,GAAyB,SAAU,EAAjD,EAAoD;QACnEC,IAAI,EAAElB,SAAS,CAACmB,KADmD;QAEnEC,GAAG,EAAEb,KAAK,CAACK,KAAN,CAAYQ;MAFkD,CAApD,CAAjB;MAKA,MAAMC,WAAW,GAAGhC,eAAe,CAACiC,WAAhB,GAA8BC,QAAlD;MACA,MAAMC,MAAM,GAAGpC,YAAY,CAACqC,gBAAb,CAA8BlB,KAAK,CAACK,KAAN,CAAYQ,GAA1C,CAAf;;MAEA,IAAII,MAAM,KAAKH,WAAf,EAA4B;QAC1BK,UAAU,CAAC,MAAMrC,eAAe,CAACsC,OAAhB,CAAwBH,MAAxB,CAAP,CAAV;MACD;;MACD,IAAIxB,SAAS,CAACG,IAAV,CAAeyB,SAAnB,EAA8B;QAC5BlB,QAAQ,CACNhB,mBAAmB,CAAC;UAClBuB,EAAE,EAAEjB,SAAS,CAAC6B,GADI;UAElBV,KAAK,EAAEnB,SAAS,CAACmB,KAFC;UAGlBC,GAAG,EAAEI;QAHa,CAAD,CADb,CAAR;MAOD;IACF;EACF,CA7BQ,EA6BN,CAACxB,SAAD,EAAYO,KAAZ,EAAmBI,SAAnB,EAA8BD,QAA9B,CA7BM,CAAT;EA+BA,OAAO;IAAEH,KAAF;IAASC;EAAT,CAAP;AACD,CAzCM"},"metadata":{},"sourceType":"module"}