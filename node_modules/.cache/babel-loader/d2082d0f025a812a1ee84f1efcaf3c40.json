{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Enum with the different variable support types\n *\n * @alpha -- experimental\n */\nexport let VariableSupportType;\n/**\n * Base class for VariableSupport classes\n *\n * @alpha -- experimental\n */\n\n(function (VariableSupportType) {\n  VariableSupportType[\"Legacy\"] = \"legacy\";\n  VariableSupportType[\"Standard\"] = \"standard\";\n  VariableSupportType[\"Custom\"] = \"custom\";\n  VariableSupportType[\"Datasource\"] = \"datasource\";\n})(VariableSupportType || (VariableSupportType = {}));\n\nexport class VariableSupportBase {}\n/**\n * Extend this class in a data source plugin to use the standard query editor for Query variables\n *\n * @alpha -- experimental\n */\n\nexport class StandardVariableSupport extends VariableSupportBase {\n  getType() {\n    return VariableSupportType.Standard;\n  }\n\n}\n/**\n * Extend this class in a data source plugin to use a customized query editor for Query variables\n *\n * @alpha -- experimental\n */\n\nexport class CustomVariableSupport extends VariableSupportBase {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"editor\", void 0);\n  }\n\n  getType() {\n    return VariableSupportType.Custom;\n  }\n\n}\n/**\n * Extend this class in a data source plugin to use the query editor in the data source plugin for Query variables\n *\n * @alpha -- experimental\n */\n\nexport class DataSourceVariableSupport extends VariableSupportBase {\n  getType() {\n    return VariableSupportType.Datasource;\n  }\n\n}\n/**\n * Defines the standard DatQuery used by data source plugins that implement StandardVariableSupport\n *\n * @alpha -- experimental\n */","map":{"version":3,"names":["VariableSupportType","VariableSupportBase","StandardVariableSupport","getType","Standard","CustomVariableSupport","Custom","DataSourceVariableSupport","Datasource"],"sources":["/home/soula/grafana/packages/grafana-data/src/types/variables.ts"],"sourcesContent":["import { ComponentType } from 'react';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceJsonData,\n  DataSourceOptionsType,\n  DataSourceQueryType,\n  QueryEditorProps,\n} from './datasource';\nimport { DataQuery } from './query';\n\n/**\n * Enum with the different variable support types\n *\n * @alpha -- experimental\n */\nexport enum VariableSupportType {\n  Legacy = 'legacy',\n  Standard = 'standard',\n  Custom = 'custom',\n  Datasource = 'datasource',\n}\n\n/**\n * Base class for VariableSupport classes\n *\n * @alpha -- experimental\n */\nexport abstract class VariableSupportBase<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataSourceQueryType<DSType>,\n  TOptions extends DataSourceJsonData = DataSourceOptionsType<DSType>\n> {\n  abstract getType(): VariableSupportType;\n}\n\n/**\n * Extend this class in a data source plugin to use the standard query editor for Query variables\n *\n * @alpha -- experimental\n */\nexport abstract class StandardVariableSupport<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataSourceQueryType<DSType>,\n  TOptions extends DataSourceJsonData = DataSourceOptionsType<DSType>\n> extends VariableSupportBase<DSType, TQuery, TOptions> {\n  getType(): VariableSupportType {\n    return VariableSupportType.Standard;\n  }\n\n  abstract toDataQuery(query: StandardVariableQuery): TQuery;\n  query?(request: DataQueryRequest<TQuery>): Observable<DataQueryResponse>;\n}\n\n/**\n * Extend this class in a data source plugin to use a customized query editor for Query variables\n *\n * @alpha -- experimental\n */\nexport abstract class CustomVariableSupport<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  VariableQuery extends DataQuery = any,\n  TQuery extends DataQuery = DataSourceQueryType<DSType>,\n  TOptions extends DataSourceJsonData = DataSourceOptionsType<DSType>\n> extends VariableSupportBase<DSType, TQuery, TOptions> {\n  getType(): VariableSupportType {\n    return VariableSupportType.Custom;\n  }\n\n  abstract editor: ComponentType<QueryEditorProps<DSType, TQuery, TOptions, VariableQuery>>;\n  abstract query(request: DataQueryRequest<VariableQuery>): Observable<DataQueryResponse>;\n}\n\n/**\n * Extend this class in a data source plugin to use the query editor in the data source plugin for Query variables\n *\n * @alpha -- experimental\n */\nexport abstract class DataSourceVariableSupport<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataSourceQueryType<DSType>,\n  TOptions extends DataSourceJsonData = DataSourceOptionsType<DSType>\n> extends VariableSupportBase<DSType, TQuery, TOptions> {\n  getType(): VariableSupportType {\n    return VariableSupportType.Datasource;\n  }\n}\n\n/**\n * Defines the standard DatQuery used by data source plugins that implement StandardVariableSupport\n *\n * @alpha -- experimental\n */\nexport interface StandardVariableQuery extends DataQuery {\n  query: string;\n}\n"],"mappings":";;AAcA;AACA;AACA;AACA;AACA;AACA,WAAYA,mBAAZ;AAOA;AACA;AACA;AACA;AACA;;WAXYA,mB;EAAAA,mB;EAAAA,mB;EAAAA,mB;EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAYZ,OAAO,MAAeC,mBAAf,CAIL;AAIF;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAeC,uBAAf,SAIGD,mBAJH,CAIiD;EACtDE,OAAO,GAAwB;IAC7B,OAAOH,mBAAmB,CAACI,QAA3B;EACD;;AAHqD;AASxD;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAeC,qBAAf,SAKGJ,mBALH,CAKiD;EAAA;IAAA;;IAAA;EAAA;;EACtDE,OAAO,GAAwB;IAC7B,OAAOH,mBAAmB,CAACM,MAA3B;EACD;;AAHqD;AASxD;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAeC,yBAAf,SAIGN,mBAJH,CAIiD;EACtDE,OAAO,GAAwB;IAC7B,OAAOH,mBAAmB,CAACQ,UAA3B;EACD;;AAHqD;AAMxD;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}