{"ast":null,"code":"var _div, _div2, _div3, _div4, _div5;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defaults } from 'lodash';\nimport React from 'react';\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { binaryOperators, DataTransformerID, FieldType, getFieldDisplayName, ReducerID, standardTransformers } from '@grafana/data';\nimport { CalculateFieldMode, getNameFromOptions } from '@grafana/data/src/transformations/transformers/calculateField';\nimport { FilterPill, HorizontalGroup, Input, LegacyForms, Select, StatsPicker } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst calculationModes = [{\n  value: CalculateFieldMode.BinaryOperation,\n  label: 'Binary operation'\n}, {\n  value: CalculateFieldMode.ReduceRow,\n  label: 'Reduce row'\n}];\nconst okTypes = new Set([FieldType.time, FieldType.number, FieldType.string]);\nexport class CalculateFieldTransformerEditor extends React.PureComponent {\n  constructor(props) {\n    var _props$options, _props$options$reduce;\n\n    super(props);\n\n    _defineProperty(this, \"onToggleReplaceFields\", () => {\n      const {\n        options\n      } = this.props;\n      this.props.onChange(Object.assign({}, options, {\n        replaceFields: !options.replaceFields\n      }));\n    });\n\n    _defineProperty(this, \"onModeChanged\", value => {\n      var _value$value;\n\n      const {\n        options,\n        onChange\n      } = this.props;\n      const mode = (_value$value = value.value) !== null && _value$value !== void 0 ? _value$value : CalculateFieldMode.BinaryOperation;\n      onChange(Object.assign({}, options, {\n        mode\n      }));\n    });\n\n    _defineProperty(this, \"onAliasChanged\", evt => {\n      const {\n        options\n      } = this.props;\n      this.props.onChange(Object.assign({}, options, {\n        alias: evt.target.value\n      }));\n    });\n\n    _defineProperty(this, \"updateReduceOptions\", v => {\n      const {\n        options,\n        onChange\n      } = this.props;\n      onChange(Object.assign({}, options, {\n        mode: CalculateFieldMode.ReduceRow,\n        reduce: v\n      }));\n    });\n\n    _defineProperty(this, \"onFieldToggle\", fieldName => {\n      const {\n        selected\n      } = this.state;\n\n      if (selected.indexOf(fieldName) > -1) {\n        this.onChange(selected.filter(s => s !== fieldName));\n      } else {\n        this.onChange([...selected, fieldName]);\n      }\n    });\n\n    _defineProperty(this, \"onChange\", selected => {\n      this.setState({\n        selected\n      });\n      const {\n        reduce\n      } = this.props.options;\n      this.updateReduceOptions(Object.assign({}, reduce, {\n        include: selected\n      }));\n    });\n\n    _defineProperty(this, \"onStatsChange\", stats => {\n      const reducer = stats.length ? stats[0] : ReducerID.sum;\n      const {\n        reduce\n      } = this.props.options;\n      this.updateReduceOptions(Object.assign({}, reduce, {\n        reducer\n      }));\n    });\n\n    _defineProperty(this, \"updateBinaryOptions\", v => {\n      const {\n        options,\n        onChange\n      } = this.props;\n      onChange(Object.assign({}, options, {\n        mode: CalculateFieldMode.BinaryOperation,\n        binary: v\n      }));\n    });\n\n    _defineProperty(this, \"onBinaryLeftChanged\", v => {\n      const {\n        binary\n      } = this.props.options;\n      this.updateBinaryOptions(Object.assign({}, binary, {\n        left: v.value\n      }));\n    });\n\n    _defineProperty(this, \"onBinaryRightChanged\", v => {\n      const {\n        binary\n      } = this.props.options;\n      this.updateBinaryOptions(Object.assign({}, binary, {\n        right: v.value\n      }));\n    });\n\n    _defineProperty(this, \"onBinaryOperationChanged\", v => {\n      const {\n        binary\n      } = this.props.options;\n      this.updateBinaryOptions(Object.assign({}, binary, {\n        operator: v.value\n      }));\n    });\n\n    this.state = {\n      include: ((_props$options = props.options) === null || _props$options === void 0 ? void 0 : (_props$options$reduce = _props$options.reduce) === null || _props$options$reduce === void 0 ? void 0 : _props$options$reduce.include) || [],\n      names: [],\n      selected: []\n    };\n  }\n\n  componentDidMount() {\n    this.initOptions();\n  }\n\n  componentDidUpdate(oldProps) {\n    if (this.props.input !== oldProps.input) {\n      this.initOptions();\n    }\n  }\n\n  initOptions() {\n    var _options$reduce;\n\n    const {\n      options\n    } = this.props;\n    const configuredOptions = (options === null || options === void 0 ? void 0 : (_options$reduce = options.reduce) === null || _options$reduce === void 0 ? void 0 : _options$reduce.include) || [];\n    const subscription = of(this.props.input).pipe(standardTransformers.ensureColumnsTransformer.operator(null), this.extractAllNames(), this.extractNamesAndSelected(configuredOptions)).subscribe(({\n      selected,\n      names\n    }) => {\n      this.setState({\n        names,\n        selected\n      }, () => subscription.unsubscribe());\n    });\n  }\n\n  extractAllNames() {\n    return source => source.pipe(map(input => {\n      const allNames = [];\n      const byName = {};\n\n      for (const frame of input) {\n        for (const field of frame.fields) {\n          if (!okTypes.has(field.type)) {\n            continue;\n          }\n\n          const displayName = getFieldDisplayName(field, frame, input);\n\n          if (!byName[displayName]) {\n            byName[displayName] = true;\n            allNames.push(displayName);\n          }\n        }\n      }\n\n      return allNames;\n    }));\n  }\n\n  extractNamesAndSelected(configuredOptions) {\n    return source => source.pipe(map(allNames => {\n      if (!configuredOptions.length) {\n        return {\n          names: allNames,\n          selected: []\n        };\n      }\n\n      const names = [];\n      const selected = [];\n\n      for (const v of allNames) {\n        if (configuredOptions.includes(v)) {\n          selected.push(v);\n        }\n\n        names.push(v);\n      }\n\n      return {\n        names,\n        selected\n      };\n    }));\n  }\n\n  renderReduceRow(options) {\n    const {\n      names,\n      selected\n    } = this.state;\n    options = defaults(options, {\n      reducer: ReducerID.sum\n    });\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form gf-form--grow\",\n          children: [_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label width-8\",\n            children: \"Field name\"\n          })), /*#__PURE__*/_jsx(HorizontalGroup, {\n            spacing: \"xs\",\n            align: \"flex-start\",\n            wrap: true,\n            children: names.map((o, i) => {\n              return /*#__PURE__*/_jsx(FilterPill, {\n                onClick: () => {\n                  this.onFieldToggle(o);\n                },\n                label: o,\n                selected: selected.indexOf(o) > -1\n              }, `${o}/${i}`);\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label width-8\",\n            children: \"Calculation\"\n          })), /*#__PURE__*/_jsx(StatsPicker, {\n            allowMultiple: false,\n            className: \"width-18\",\n            stats: [options.reducer],\n            onChange: this.onStatsChange,\n            defaultStat: ReducerID.sum\n          })]\n        })\n      })]\n    });\n  } //---------------------------------------------------------\n  // Binary Operator\n  //---------------------------------------------------------\n\n\n  renderBinaryOperation(options) {\n    var _options, _options2, _options5, _options6, _options7, _options8, _options9, _options$operator, _options10;\n\n    options = defaults(options, {\n      reducer: ReducerID.sum\n    });\n    let foundLeft = !((_options = options) !== null && _options !== void 0 && _options.left);\n    let foundRight = !((_options2 = options) !== null && _options2 !== void 0 && _options2.right);\n    const names = this.state.names.map(v => {\n      var _options3, _options4;\n\n      if (v === ((_options3 = options) === null || _options3 === void 0 ? void 0 : _options3.left)) {\n        foundLeft = true;\n      }\n\n      if (v === ((_options4 = options) === null || _options4 === void 0 ? void 0 : _options4.right)) {\n        foundRight = true;\n      }\n\n      return {\n        label: v,\n        value: v\n      };\n    });\n    const leftNames = foundLeft ? names : [...names, {\n      label: (_options5 = options) === null || _options5 === void 0 ? void 0 : _options5.left,\n      value: (_options6 = options) === null || _options6 === void 0 ? void 0 : _options6.left\n    }];\n    const rightNames = foundRight ? names : [...names, {\n      label: (_options7 = options) === null || _options7 === void 0 ? void 0 : _options7.right,\n      value: (_options8 = options) === null || _options8 === void 0 ? void 0 : _options8.right\n    }];\n    const ops = binaryOperators.list().map(v => {\n      return {\n        label: v.id,\n        value: v.id\n      };\n    });\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"gf-form-inline\",\n      children: [_div3 || (_div3 = /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form-label width-8\",\n          children: \"Operation\"\n        })\n      })), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form\",\n        children: [/*#__PURE__*/_jsx(Select, {\n          allowCustomValue: true,\n          placeholder: \"Field or number\",\n          options: leftNames,\n          className: \"min-width-18 gf-form-spacing\",\n          value: (_options9 = options) === null || _options9 === void 0 ? void 0 : _options9.left,\n          onChange: this.onBinaryLeftChanged\n        }), /*#__PURE__*/_jsx(Select, {\n          className: \"width-8 gf-form-spacing\",\n          options: ops,\n          value: (_options$operator = options.operator) !== null && _options$operator !== void 0 ? _options$operator : ops[0].value,\n          onChange: this.onBinaryOperationChanged\n        }), /*#__PURE__*/_jsx(Select, {\n          allowCustomValue: true,\n          placeholder: \"Field or number\",\n          className: \"min-width-10\",\n          options: rightNames,\n          value: (_options10 = options) === null || _options10 === void 0 ? void 0 : _options10.right,\n          onChange: this.onBinaryRightChanged\n        })]\n      })]\n    });\n  } //---------------------------------------------------------\n  // Render\n  //---------------------------------------------------------\n\n\n  render() {\n    var _options$mode, _options$alias;\n\n    const {\n      options\n    } = this.props;\n    const mode = (_options$mode = options.mode) !== null && _options$mode !== void 0 ? _options$mode : CalculateFieldMode.BinaryOperation;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_div4 || (_div4 = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label width-8\",\n            children: \"Mode\"\n          })), /*#__PURE__*/_jsx(Select, {\n            className: \"width-18\",\n            options: calculationModes,\n            value: calculationModes.find(v => v.value === mode),\n            onChange: this.onModeChanged\n          })]\n        })\n      }), mode === CalculateFieldMode.BinaryOperation && this.renderBinaryOperation(options.binary), mode === CalculateFieldMode.ReduceRow && this.renderReduceRow(options.reduce), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_div5 || (_div5 = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label width-8\",\n            children: \"Alias\"\n          })), /*#__PURE__*/_jsx(Input, {\n            className: \"width-18\",\n            value: (_options$alias = options.alias) !== null && _options$alias !== void 0 ? _options$alias : '',\n            placeholder: getNameFromOptions(options),\n            onChange: this.onAliasChanged\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form\",\n          children: /*#__PURE__*/_jsx(LegacyForms.Switch, {\n            label: \"Replace all fields\",\n            labelClass: \"width-8\",\n            checked: !!options.replaceFields,\n            onChange: this.onToggleReplaceFields\n          })\n        })\n      })]\n    });\n  }\n\n}\nexport const calculateFieldTransformRegistryItem = {\n  id: DataTransformerID.calculateField,\n  editor: CalculateFieldTransformerEditor,\n  transformation: standardTransformers.calculateFieldTransformer,\n  name: 'Add field from calculation',\n  description: 'Use the row values to calculate a new field'\n};","map":{"version":3,"names":["defaults","React","of","map","binaryOperators","DataTransformerID","FieldType","getFieldDisplayName","ReducerID","standardTransformers","CalculateFieldMode","getNameFromOptions","FilterPill","HorizontalGroup","Input","LegacyForms","Select","StatsPicker","calculationModes","value","BinaryOperation","label","ReduceRow","okTypes","Set","time","number","string","CalculateFieldTransformerEditor","PureComponent","constructor","props","options","onChange","replaceFields","mode","evt","alias","target","v","reduce","fieldName","selected","state","indexOf","filter","s","setState","updateReduceOptions","include","stats","reducer","length","sum","binary","updateBinaryOptions","left","right","operator","names","componentDidMount","initOptions","componentDidUpdate","oldProps","input","configuredOptions","subscription","pipe","ensureColumnsTransformer","extractAllNames","extractNamesAndSelected","subscribe","unsubscribe","source","allNames","byName","frame","field","fields","has","type","displayName","push","includes","renderReduceRow","o","i","onFieldToggle","onStatsChange","renderBinaryOperation","foundLeft","foundRight","leftNames","rightNames","ops","list","id","onBinaryLeftChanged","onBinaryOperationChanged","onBinaryRightChanged","render","find","onModeChanged","onAliasChanged","onToggleReplaceFields","calculateFieldTransformRegistryItem","calculateField","editor","transformation","calculateFieldTransformer","name","description"],"sources":["/home/soula/grafana/public/app/features/transformers/editors/CalculateFieldTransformerEditor.tsx"],"sourcesContent":["import { defaults } from 'lodash';\nimport React, { ChangeEvent } from 'react';\nimport { of, OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  BinaryOperationID,\n  binaryOperators,\n  DataFrame,\n  DataTransformerID,\n  FieldType,\n  getFieldDisplayName,\n  KeyValue,\n  ReducerID,\n  SelectableValue,\n  standardTransformers,\n  TransformerRegistryItem,\n  TransformerUIProps,\n} from '@grafana/data';\nimport {\n  BinaryOptions,\n  CalculateFieldMode,\n  CalculateFieldTransformerOptions,\n  getNameFromOptions,\n  ReduceOptions,\n} from '@grafana/data/src/transformations/transformers/calculateField';\nimport { FilterPill, HorizontalGroup, Input, LegacyForms, Select, StatsPicker } from '@grafana/ui';\n\ninterface CalculateFieldTransformerEditorProps extends TransformerUIProps<CalculateFieldTransformerOptions> {}\n\ninterface CalculateFieldTransformerEditorState {\n  include: string[];\n  names: string[];\n  selected: string[];\n}\n\nconst calculationModes = [\n  { value: CalculateFieldMode.BinaryOperation, label: 'Binary operation' },\n  { value: CalculateFieldMode.ReduceRow, label: 'Reduce row' },\n];\n\nconst okTypes = new Set<FieldType>([FieldType.time, FieldType.number, FieldType.string]);\n\nexport class CalculateFieldTransformerEditor extends React.PureComponent<\n  CalculateFieldTransformerEditorProps,\n  CalculateFieldTransformerEditorState\n> {\n  constructor(props: CalculateFieldTransformerEditorProps) {\n    super(props);\n\n    this.state = {\n      include: props.options?.reduce?.include || [],\n      names: [],\n      selected: [],\n    };\n  }\n\n  componentDidMount() {\n    this.initOptions();\n  }\n\n  componentDidUpdate(oldProps: CalculateFieldTransformerEditorProps) {\n    if (this.props.input !== oldProps.input) {\n      this.initOptions();\n    }\n  }\n\n  private initOptions() {\n    const { options } = this.props;\n    const configuredOptions = options?.reduce?.include || [];\n    const subscription = of(this.props.input)\n      .pipe(\n        standardTransformers.ensureColumnsTransformer.operator(null),\n        this.extractAllNames(),\n        this.extractNamesAndSelected(configuredOptions)\n      )\n      .subscribe(({ selected, names }) => {\n        this.setState({ names, selected }, () => subscription.unsubscribe());\n      });\n  }\n\n  private extractAllNames(): OperatorFunction<DataFrame[], string[]> {\n    return (source) =>\n      source.pipe(\n        map((input) => {\n          const allNames: string[] = [];\n          const byName: KeyValue<boolean> = {};\n\n          for (const frame of input) {\n            for (const field of frame.fields) {\n              if (!okTypes.has(field.type)) {\n                continue;\n              }\n\n              const displayName = getFieldDisplayName(field, frame, input);\n\n              if (!byName[displayName]) {\n                byName[displayName] = true;\n                allNames.push(displayName);\n              }\n            }\n          }\n\n          return allNames;\n        })\n      );\n  }\n\n  private extractNamesAndSelected(\n    configuredOptions: string[]\n  ): OperatorFunction<string[], { names: string[]; selected: string[] }> {\n    return (source) =>\n      source.pipe(\n        map((allNames) => {\n          if (!configuredOptions.length) {\n            return { names: allNames, selected: [] };\n          }\n\n          const names: string[] = [];\n          const selected: string[] = [];\n\n          for (const v of allNames) {\n            if (configuredOptions.includes(v)) {\n              selected.push(v);\n            }\n            names.push(v);\n          }\n\n          return { names, selected };\n        })\n      );\n  }\n\n  onToggleReplaceFields = () => {\n    const { options } = this.props;\n    this.props.onChange({\n      ...options,\n      replaceFields: !options.replaceFields,\n    });\n  };\n\n  onModeChanged = (value: SelectableValue<CalculateFieldMode>) => {\n    const { options, onChange } = this.props;\n    const mode = value.value ?? CalculateFieldMode.BinaryOperation;\n    onChange({\n      ...options,\n      mode,\n    });\n  };\n\n  onAliasChanged = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { options } = this.props;\n    this.props.onChange({\n      ...options,\n      alias: evt.target.value,\n    });\n  };\n\n  //---------------------------------------------------------\n  // Reduce by Row\n  //---------------------------------------------------------\n\n  updateReduceOptions = (v: ReduceOptions) => {\n    const { options, onChange } = this.props;\n    onChange({\n      ...options,\n      mode: CalculateFieldMode.ReduceRow,\n      reduce: v,\n    });\n  };\n\n  onFieldToggle = (fieldName: string) => {\n    const { selected } = this.state;\n    if (selected.indexOf(fieldName) > -1) {\n      this.onChange(selected.filter((s) => s !== fieldName));\n    } else {\n      this.onChange([...selected, fieldName]);\n    }\n  };\n\n  onChange = (selected: string[]) => {\n    this.setState({ selected });\n    const { reduce } = this.props.options;\n    this.updateReduceOptions({\n      ...reduce!,\n      include: selected,\n    });\n  };\n\n  onStatsChange = (stats: string[]) => {\n    const reducer = stats.length ? (stats[0] as ReducerID) : ReducerID.sum;\n\n    const { reduce } = this.props.options;\n    this.updateReduceOptions({ ...reduce, reducer });\n  };\n\n  renderReduceRow(options?: ReduceOptions) {\n    const { names, selected } = this.state;\n    options = defaults(options, { reducer: ReducerID.sum });\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label width-8\">Field name</div>\n            <HorizontalGroup spacing=\"xs\" align=\"flex-start\" wrap>\n              {names.map((o, i) => {\n                return (\n                  <FilterPill\n                    key={`${o}/${i}`}\n                    onClick={() => {\n                      this.onFieldToggle(o);\n                    }}\n                    label={o}\n                    selected={selected.indexOf(o) > -1}\n                  />\n                );\n              })}\n            </HorizontalGroup>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <div className=\"gf-form-label width-8\">Calculation</div>\n            <StatsPicker\n              allowMultiple={false}\n              className=\"width-18\"\n              stats={[options.reducer]}\n              onChange={this.onStatsChange}\n              defaultStat={ReducerID.sum}\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  //---------------------------------------------------------\n  // Binary Operator\n  //---------------------------------------------------------\n\n  updateBinaryOptions = (v: BinaryOptions) => {\n    const { options, onChange } = this.props;\n    onChange({\n      ...options,\n      mode: CalculateFieldMode.BinaryOperation,\n      binary: v,\n    });\n  };\n\n  onBinaryLeftChanged = (v: SelectableValue<string>) => {\n    const { binary } = this.props.options;\n    this.updateBinaryOptions({\n      ...binary!,\n      left: v.value!,\n    });\n  };\n\n  onBinaryRightChanged = (v: SelectableValue<string>) => {\n    const { binary } = this.props.options;\n    this.updateBinaryOptions({\n      ...binary!,\n      right: v.value!,\n    });\n  };\n\n  onBinaryOperationChanged = (v: SelectableValue<string>) => {\n    const { binary } = this.props.options;\n    this.updateBinaryOptions({\n      ...binary!,\n      operator: v.value! as BinaryOperationID,\n    });\n  };\n\n  renderBinaryOperation(options?: BinaryOptions) {\n    options = defaults(options, { reducer: ReducerID.sum });\n\n    let foundLeft = !options?.left;\n    let foundRight = !options?.right;\n    const names = this.state.names.map((v) => {\n      if (v === options?.left) {\n        foundLeft = true;\n      }\n      if (v === options?.right) {\n        foundRight = true;\n      }\n      return { label: v, value: v };\n    });\n    const leftNames = foundLeft ? names : [...names, { label: options?.left, value: options?.left }];\n    const rightNames = foundRight ? names : [...names, { label: options?.right, value: options?.right }];\n\n    const ops = binaryOperators.list().map((v) => {\n      return { label: v.id, value: v.id };\n    });\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <div className=\"gf-form-label width-8\">Operation</div>\n        </div>\n        <div className=\"gf-form\">\n          <Select\n            allowCustomValue={true}\n            placeholder=\"Field or number\"\n            options={leftNames}\n            className=\"min-width-18 gf-form-spacing\"\n            value={options?.left}\n            onChange={this.onBinaryLeftChanged}\n          />\n          <Select\n            className=\"width-8 gf-form-spacing\"\n            options={ops}\n            value={options.operator ?? ops[0].value}\n            onChange={this.onBinaryOperationChanged}\n          />\n          <Select\n            allowCustomValue={true}\n            placeholder=\"Field or number\"\n            className=\"min-width-10\"\n            options={rightNames}\n            value={options?.right}\n            onChange={this.onBinaryRightChanged}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  //---------------------------------------------------------\n  // Render\n  //---------------------------------------------------------\n\n  render() {\n    const { options } = this.props;\n\n    const mode = options.mode ?? CalculateFieldMode.BinaryOperation;\n\n    return (\n      <div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <div className=\"gf-form-label width-8\">Mode</div>\n            <Select\n              className=\"width-18\"\n              options={calculationModes}\n              value={calculationModes.find((v) => v.value === mode)}\n              onChange={this.onModeChanged}\n            />\n          </div>\n        </div>\n        {mode === CalculateFieldMode.BinaryOperation && this.renderBinaryOperation(options.binary)}\n        {mode === CalculateFieldMode.ReduceRow && this.renderReduceRow(options.reduce)}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <div className=\"gf-form-label width-8\">Alias</div>\n            <Input\n              className=\"width-18\"\n              value={options.alias ?? ''}\n              placeholder={getNameFromOptions(options)}\n              onChange={this.onAliasChanged}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <LegacyForms.Switch\n              label=\"Replace all fields\"\n              labelClass=\"width-8\"\n              checked={!!options.replaceFields}\n              onChange={this.onToggleReplaceFields}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const calculateFieldTransformRegistryItem: TransformerRegistryItem<CalculateFieldTransformerOptions> = {\n  id: DataTransformerID.calculateField,\n  editor: CalculateFieldTransformerEditor,\n  transformation: standardTransformers.calculateFieldTransformer,\n  name: 'Add field from calculation',\n  description: 'Use the row values to calculate a new field',\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}