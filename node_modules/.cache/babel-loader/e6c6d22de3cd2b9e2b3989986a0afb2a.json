{"ast":null,"code":"import { css } from '@emotion/css';\nimport { startCase, uniqBy } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { EditorRow, EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { getSelectStyles, Select, useStyles2, useTheme2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function Metrics(props) {\n  const [metricDescriptors, setMetricDescriptors] = useState([]);\n  const [metricDescriptor, setMetricDescriptor] = useState();\n  const [metrics, setMetrics] = useState([]);\n  const [services, setServices] = useState([]);\n  const [service, setService] = useState('');\n  const theme = useTheme2();\n  const selectStyles = getSelectStyles(theme);\n  const customStyle = useStyles2(getStyles);\n  const {\n    metricType,\n    templateVariableOptions,\n    projectName,\n    datasource,\n    onChange,\n    children\n  } = props;\n  const {\n    templateSrv\n  } = datasource;\n  const getSelectedMetricDescriptor = useCallback((metricDescriptors, metricType) => {\n    return metricDescriptors.find(md => md.type === templateSrv.replace(metricType));\n  }, [templateSrv]);\n  useEffect(() => {\n    const getMetricsList = metricDescriptors => {\n      const selectedMetricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n\n      if (!selectedMetricDescriptor) {\n        return [];\n      }\n\n      const metricsByService = metricDescriptors.filter(m => m.service === selectedMetricDescriptor.service).map(m => ({\n        service: m.service,\n        value: m.type,\n        label: m.displayName,\n        component: function optionComponent() {\n          return /*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsx(\"div\", {\n              className: customStyle,\n              children: m.type\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: selectStyles.optionDescription,\n              children: m.description\n            })]\n          });\n        }\n      }));\n      return metricsByService;\n    };\n\n    const loadMetricDescriptors = async () => {\n      if (projectName) {\n        const metricDescriptors = await datasource.getMetricTypes(projectName);\n        const services = getServicesList(metricDescriptors);\n        const metrics = getMetricsList(metricDescriptors);\n        const service = metrics.length > 0 ? metrics[0].service : '';\n        const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n        setMetricDescriptors(metricDescriptors);\n        setServices(services);\n        setMetrics(metrics);\n        setService(service);\n        setMetricDescriptor(metricDescriptor);\n      }\n    };\n\n    loadMetricDescriptors();\n  }, [datasource, getSelectedMetricDescriptor, metricType, projectName, customStyle, selectStyles.optionDescription]);\n\n  const onServiceChange = ({\n    value: service\n  }) => {\n    const metrics = metricDescriptors.filter(m => m.service === templateSrv.replace(service)).map(m => ({\n      service: m.service,\n      value: m.type,\n      label: m.displayName,\n      description: m.description\n    }));\n\n    if (metrics.length > 0 && !metrics.some(m => m.value === templateSrv.replace(metricType))) {\n      onMetricTypeChange(metrics[0]);\n      setService(service);\n      setMetrics(metrics);\n    } else {\n      setService(service);\n      setMetrics(metrics);\n    }\n  };\n\n  const onMetricTypeChange = ({\n    value\n  }) => {\n    const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, value);\n    setMetricDescriptor(metricDescriptor);\n    onChange(Object.assign({}, metricDescriptor, {\n      type: value\n    }));\n  };\n\n  const getServicesList = metricDescriptors => {\n    const services = metricDescriptors.map(m => ({\n      value: m.service,\n      label: startCase(m.serviceShortName)\n    }));\n    return services.length > 0 ? uniqBy(services, s => s.value) : [];\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(EditorRow, {\n      children: /*#__PURE__*/_jsxs(EditorFieldGroup, {\n        children: [/*#__PURE__*/_jsx(EditorField, {\n          label: \"Service\",\n          width: \"auto\",\n          children: /*#__PURE__*/_jsx(Select, {\n            width: \"auto\",\n            onChange: onServiceChange,\n            value: [...services, ...templateVariableOptions].find(s => s.value === service),\n            options: [{\n              label: 'Template Variables',\n              options: templateVariableOptions\n            }, ...services],\n            placeholder: \"Select Services\",\n            inputId: `${props.refId}-service`\n          })\n        }), /*#__PURE__*/_jsx(EditorField, {\n          label: \"Metric name\",\n          width: \"auto\",\n          children: /*#__PURE__*/_jsx(Select, {\n            width: \"auto\",\n            onChange: onMetricTypeChange,\n            value: [...metrics, ...templateVariableOptions].find(s => s.value === metricType),\n            options: [{\n              label: 'Template Variables',\n              options: templateVariableOptions\n            }, ...metrics],\n            placeholder: \"Select Metric\",\n            inputId: `${props.refId}-select-metric`\n          })\n        })]\n      })\n    }), children(metricDescriptor)]\n  });\n}\n\nconst getStyles = theme => css`\n  label: grafana-select-option-description;\n  font-weight: normal;\n  font-style: italic;\n  color: ${theme.colors.text.secondary};\n`;","map":{"version":3,"names":["css","startCase","uniqBy","React","useCallback","useEffect","useState","EditorRow","EditorField","EditorFieldGroup","getSelectStyles","Select","useStyles2","useTheme2","Metrics","props","metricDescriptors","setMetricDescriptors","metricDescriptor","setMetricDescriptor","metrics","setMetrics","services","setServices","service","setService","theme","selectStyles","customStyle","getStyles","metricType","templateVariableOptions","projectName","datasource","onChange","children","templateSrv","getSelectedMetricDescriptor","find","md","type","replace","getMetricsList","selectedMetricDescriptor","metricsByService","filter","m","map","value","label","displayName","component","optionComponent","optionDescription","description","loadMetricDescriptors","getMetricTypes","getServicesList","length","onServiceChange","some","onMetricTypeChange","serviceShortName","s","options","refId","colors","text","secondary"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/Experimental/Metrics.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { startCase, uniqBy } from 'lodash';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { EditorRow, EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { getSelectStyles, Select, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../../datasource';\nimport { MetricDescriptor } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (metricDescriptor: MetricDescriptor) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n  projectName: string;\n  metricType: string;\n  children: (metricDescriptor?: MetricDescriptor) => JSX.Element;\n}\n\nexport function Metrics(props: Props) {\n  const [metricDescriptors, setMetricDescriptors] = useState<MetricDescriptor[]>([]);\n  const [metricDescriptor, setMetricDescriptor] = useState<MetricDescriptor>();\n  const [metrics, setMetrics] = useState<Array<SelectableValue<string>>>([]);\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const [service, setService] = useState<string>('');\n\n  const theme = useTheme2();\n  const selectStyles = getSelectStyles(theme);\n\n  const customStyle = useStyles2(getStyles);\n\n  const { metricType, templateVariableOptions, projectName, datasource, onChange, children } = props;\n  const { templateSrv } = datasource;\n\n  const getSelectedMetricDescriptor = useCallback(\n    (metricDescriptors: MetricDescriptor[], metricType: string) => {\n      return metricDescriptors.find((md) => md.type === templateSrv.replace(metricType))!;\n    },\n    [templateSrv]\n  );\n\n  useEffect(() => {\n    const getMetricsList = (metricDescriptors: MetricDescriptor[]) => {\n      const selectedMetricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n      if (!selectedMetricDescriptor) {\n        return [];\n      }\n\n      const metricsByService = metricDescriptors\n        .filter((m) => m.service === selectedMetricDescriptor.service)\n        .map((m) => ({\n          service: m.service,\n          value: m.type,\n          label: m.displayName,\n          component: function optionComponent() {\n            return (\n              <div>\n                <div className={customStyle}>{m.type}</div>\n                <div className={selectStyles.optionDescription}>{m.description}</div>\n              </div>\n            );\n          },\n        }));\n      return metricsByService;\n    };\n\n    const loadMetricDescriptors = async () => {\n      if (projectName) {\n        const metricDescriptors = await datasource.getMetricTypes(projectName);\n        const services = getServicesList(metricDescriptors);\n        const metrics = getMetricsList(metricDescriptors);\n        const service = metrics.length > 0 ? metrics[0].service : '';\n        const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n        setMetricDescriptors(metricDescriptors);\n        setServices(services);\n        setMetrics(metrics);\n        setService(service);\n        setMetricDescriptor(metricDescriptor);\n      }\n    };\n    loadMetricDescriptors();\n  }, [datasource, getSelectedMetricDescriptor, metricType, projectName, customStyle, selectStyles.optionDescription]);\n\n  const onServiceChange = ({ value: service }: any) => {\n    const metrics = metricDescriptors\n      .filter((m: MetricDescriptor) => m.service === templateSrv.replace(service))\n      .map((m: MetricDescriptor) => ({\n        service: m.service,\n        value: m.type,\n        label: m.displayName,\n        description: m.description,\n      }));\n\n    if (metrics.length > 0 && !metrics.some((m) => m.value === templateSrv.replace(metricType))) {\n      onMetricTypeChange(metrics[0]);\n      setService(service);\n      setMetrics(metrics);\n    } else {\n      setService(service);\n      setMetrics(metrics);\n    }\n  };\n\n  const onMetricTypeChange = ({ value }: SelectableValue<string>) => {\n    const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, value!);\n    setMetricDescriptor(metricDescriptor);\n    onChange({ ...metricDescriptor, type: value! });\n  };\n\n  const getServicesList = (metricDescriptors: MetricDescriptor[]) => {\n    const services = metricDescriptors.map((m) => ({\n      value: m.service,\n      label: startCase(m.serviceShortName),\n    }));\n\n    return services.length > 0 ? uniqBy(services, (s) => s.value) : [];\n  };\n\n  return (\n    <>\n      <EditorRow>\n        <EditorFieldGroup>\n          <EditorField label=\"Service\" width=\"auto\">\n            <Select\n              width=\"auto\"\n              onChange={onServiceChange}\n              value={[...services, ...templateVariableOptions].find((s) => s.value === service)}\n              options={[\n                {\n                  label: 'Template Variables',\n                  options: templateVariableOptions,\n                },\n                ...services,\n              ]}\n              placeholder=\"Select Services\"\n              inputId={`${props.refId}-service`}\n            />\n          </EditorField>\n          <EditorField label=\"Metric name\" width=\"auto\">\n            <Select\n              width=\"auto\"\n              onChange={onMetricTypeChange}\n              value={[...metrics, ...templateVariableOptions].find((s) => s.value === metricType)}\n              options={[\n                {\n                  label: 'Template Variables',\n                  options: templateVariableOptions,\n                },\n                ...metrics,\n              ]}\n              placeholder=\"Select Metric\"\n              inputId={`${props.refId}-select-metric`}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n      </EditorRow>\n\n      {children(metricDescriptor)}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => css`\n  label: grafana-select-option-description;\n  font-weight: normal;\n  font-style: italic;\n  color: ${theme.colors.text.secondary};\n`;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}