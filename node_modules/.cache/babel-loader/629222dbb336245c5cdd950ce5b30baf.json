{"ast":null,"code":"var _InlineLabel;\n\nimport { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { Fragment, useEffect } from 'react';\nimport { Input, InlineLabel } from '@grafana/ui';\nimport { useStatelessReducer, useDispatch } from '../../../../../hooks/useStatelessReducer';\nimport { AddRemove } from '../../../../AddRemove';\nimport { MetricPicker } from '../../../../MetricPicker';\nimport { changeMetricAttribute } from '../../state/actions';\nimport { SettingField } from '../SettingField';\nimport { addPipelineVariable, removePipelineVariable, renamePipelineVariable, changePipelineVariableMetric } from './state/actions';\nimport { reducer } from './state/reducer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const BucketScriptSettingsEditor = ({\n  value,\n  previousMetrics\n}) => {\n  var _value$pipelineVariab2;\n\n  const upperStateDispatch = useDispatch();\n  const dispatch = useStatelessReducer(newValue => upperStateDispatch(changeMetricAttribute({\n    metric: value,\n    attribute: 'pipelineVariables',\n    newValue\n  })), value.pipelineVariables, reducer); // The model might not have pipeline variables (or an empty array of pipeline vars) in it because of the way it was built in previous versions of the datasource.\n  // If this is the case we add a default one.\n\n  useEffect(() => {\n    var _value$pipelineVariab;\n\n    if (!((_value$pipelineVariab = value.pipelineVariables) !== null && _value$pipelineVariab !== void 0 && _value$pipelineVariab.length)) {\n      dispatch(addPipelineVariable());\n    }\n  }, [dispatch, (_value$pipelineVariab2 = value.pipelineVariables) === null || _value$pipelineVariab2 === void 0 ? void 0 : _value$pipelineVariab2.length]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: css`\n          display: flex;\n        `,\n      children: [_InlineLabel || (_InlineLabel = /*#__PURE__*/_jsx(InlineLabel, {\n        width: 16,\n        children: \"Variables\"\n      })), /*#__PURE__*/_jsx(\"div\", {\n        className: css`\n            display: grid;\n            grid-template-columns: 1fr auto;\n            row-gap: 4px;\n            margin-bottom: 4px;\n          `,\n        children: value.pipelineVariables.map((pipelineVar, index) =>\n        /*#__PURE__*/\n        // index as a key doesn't work here since removing an element\n        // in the middle of the list, will cause the next element to obtain the same key as the removed one.\n        // this will cause react to \"drop\" the last element of the list instead of the just removed one,\n        // and the default value for the input won't match the model as the DOM won't get updated.\n        // using pipelineVar.name is not an option since it might be duplicated by the user.\n        // generating a unique key on every render, while is probably not the best solution in terms of performance\n        // ensures the UI is in a correct state. We might want to optimize this if we see perf issue in the future.\n        _jsxs(Fragment, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: css`\n                  display: grid;\n                  column-gap: 4px;\n                  grid-template-columns: auto auto;\n                `,\n            children: [/*#__PURE__*/_jsx(Input, {\n              \"aria-label\": \"Variable name\",\n              defaultValue: pipelineVar.name,\n              placeholder: \"Variable Name\",\n              onBlur: e => dispatch(renamePipelineVariable({\n                newName: e.target.value,\n                index\n              }))\n            }), /*#__PURE__*/_jsx(MetricPicker, {\n              onChange: e => dispatch(changePipelineVariableMetric({\n                newMetric: e.value.id,\n                index\n              })),\n              options: previousMetrics,\n              value: pipelineVar.pipelineAgg\n            })]\n          }), /*#__PURE__*/_jsx(AddRemove, {\n            index: index,\n            elements: value.pipelineVariables || [],\n            onAdd: () => dispatch(addPipelineVariable()),\n            onRemove: () => dispatch(removePipelineVariable(index))\n          })]\n        }, uniqueId('es-bs-')))\n      })]\n    }), /*#__PURE__*/_jsx(SettingField, {\n      label: \"Script\",\n      metric: value,\n      settingName: \"script\",\n      tooltip: \"Elasticsearch v5.0 and above: Scripting language is Painless. Use params.<var> to reference a variable. Elasticsearch pre-v5.0: Scripting language is per default Groovy if not changed. For Groovy use <var> to reference a variable.\",\n      placeholder: \"params.var1 / params.var2\"\n    })]\n  });\n};","map":{"version":3,"names":["css","uniqueId","React","Fragment","useEffect","Input","InlineLabel","useStatelessReducer","useDispatch","AddRemove","MetricPicker","changeMetricAttribute","SettingField","addPipelineVariable","removePipelineVariable","renamePipelineVariable","changePipelineVariableMetric","reducer","BucketScriptSettingsEditor","value","previousMetrics","upperStateDispatch","dispatch","newValue","metric","attribute","pipelineVariables","length","map","pipelineVar","index","name","e","newName","target","newMetric","id","pipelineAgg"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/BucketScriptSettingsEditor/index.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { Fragment, useEffect } from 'react';\n\nimport { Input, InlineLabel } from '@grafana/ui';\n\nimport { useStatelessReducer, useDispatch } from '../../../../../hooks/useStatelessReducer';\nimport { AddRemove } from '../../../../AddRemove';\nimport { MetricPicker } from '../../../../MetricPicker';\nimport { BucketScript, MetricAggregation } from '../../aggregations';\nimport { changeMetricAttribute } from '../../state/actions';\nimport { SettingField } from '../SettingField';\n\nimport {\n  addPipelineVariable,\n  removePipelineVariable,\n  renamePipelineVariable,\n  changePipelineVariableMetric,\n} from './state/actions';\nimport { reducer } from './state/reducer';\n\ninterface Props {\n  value: BucketScript;\n  previousMetrics: MetricAggregation[];\n}\n\nexport const BucketScriptSettingsEditor = ({ value, previousMetrics }: Props) => {\n  const upperStateDispatch = useDispatch();\n\n  const dispatch = useStatelessReducer(\n    (newValue) =>\n      upperStateDispatch(changeMetricAttribute({ metric: value, attribute: 'pipelineVariables', newValue })),\n    value.pipelineVariables,\n    reducer\n  );\n\n  // The model might not have pipeline variables (or an empty array of pipeline vars) in it because of the way it was built in previous versions of the datasource.\n  // If this is the case we add a default one.\n  useEffect(() => {\n    if (!value.pipelineVariables?.length) {\n      dispatch(addPipelineVariable());\n    }\n  }, [dispatch, value.pipelineVariables?.length]);\n\n  return (\n    <>\n      <div\n        className={css`\n          display: flex;\n        `}\n      >\n        <InlineLabel width={16}>Variables</InlineLabel>\n        <div\n          className={css`\n            display: grid;\n            grid-template-columns: 1fr auto;\n            row-gap: 4px;\n            margin-bottom: 4px;\n          `}\n        >\n          {value.pipelineVariables!.map((pipelineVar, index) => (\n            // index as a key doesn't work here since removing an element\n            // in the middle of the list, will cause the next element to obtain the same key as the removed one.\n            // this will cause react to \"drop\" the last element of the list instead of the just removed one,\n            // and the default value for the input won't match the model as the DOM won't get updated.\n            // using pipelineVar.name is not an option since it might be duplicated by the user.\n            // generating a unique key on every render, while is probably not the best solution in terms of performance\n            // ensures the UI is in a correct state. We might want to optimize this if we see perf issue in the future.\n            <Fragment key={uniqueId('es-bs-')}>\n              <div\n                className={css`\n                  display: grid;\n                  column-gap: 4px;\n                  grid-template-columns: auto auto;\n                `}\n              >\n                <Input\n                  aria-label=\"Variable name\"\n                  defaultValue={pipelineVar.name}\n                  placeholder=\"Variable Name\"\n                  onBlur={(e) => dispatch(renamePipelineVariable({ newName: e.target.value, index }))}\n                />\n                <MetricPicker\n                  onChange={(e) => dispatch(changePipelineVariableMetric({ newMetric: e.value!.id, index }))}\n                  options={previousMetrics}\n                  value={pipelineVar.pipelineAgg}\n                />\n              </div>\n\n              <AddRemove\n                index={index}\n                elements={value.pipelineVariables || []}\n                onAdd={() => dispatch(addPipelineVariable())}\n                onRemove={() => dispatch(removePipelineVariable(index))}\n              />\n            </Fragment>\n          ))}\n        </div>\n      </div>\n\n      <SettingField\n        label=\"Script\"\n        metric={value}\n        settingName=\"script\"\n        tooltip=\"Elasticsearch v5.0 and above: Scripting language is Painless. Use params.<var> to reference a variable. Elasticsearch pre-v5.0: Scripting language is per default Groovy if not changed. For Groovy use <var> to reference a variable.\"\n        placeholder=\"params.var1 / params.var2\"\n      />\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}