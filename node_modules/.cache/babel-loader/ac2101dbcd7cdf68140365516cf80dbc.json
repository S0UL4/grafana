{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { isArray } from 'lodash';\nimport { LoadingState, PanelEvents, toDataFrameDTO, toLegacyResponseData } from '@grafana/data';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\n\nclass MetricsPanelCtrl extends PanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    _defineProperty(this, \"contextSrv\", void 0);\n\n    _defineProperty(this, \"datasourceSrv\", void 0);\n\n    _defineProperty(this, \"timeSrv\", void 0);\n\n    _defineProperty(this, \"templateSrv\", void 0);\n\n    _defineProperty(this, \"interval\", void 0);\n\n    _defineProperty(this, \"intervalMs\", void 0);\n\n    _defineProperty(this, \"resolution\", void 0);\n\n    _defineProperty(this, \"timeInfo\", void 0);\n\n    _defineProperty(this, \"skipDataOnInit\", false);\n\n    _defineProperty(this, \"dataList\", []);\n\n    _defineProperty(this, \"querySubscription\", void 0);\n\n    _defineProperty(this, \"useDataFrames\", false);\n\n    _defineProperty(this, \"panelData\", void 0);\n\n    _defineProperty(this, \"panelDataObserver\", {\n      next: data => {\n        this.panelData = data;\n\n        if (data.state === LoadingState.Error) {\n          this.loading = false;\n          this.processDataError(data.error);\n        } // Ignore data in loading state\n\n\n        if (data.state === LoadingState.Loading) {\n          this.loading = true;\n          this.angularDirtyCheck();\n          return;\n        }\n\n        if (data.request) {\n          const {\n            timeInfo\n          } = data.request;\n\n          if (timeInfo) {\n            this.timeInfo = timeInfo;\n          }\n        }\n\n        if (data.timeRange) {\n          this.range = data.timeRange;\n        }\n\n        if (this.useDataFrames) {\n          this.handleDataFrames(data.series);\n        } else {\n          // Make the results look as if they came directly from a <6.2 datasource request\n          const legacy = data.series.map(v => toLegacyResponseData(v));\n          this.handleQueryResult({\n            data: legacy\n          });\n        }\n\n        this.angularDirtyCheck();\n      }\n    });\n\n    this.contextSrv = $injector.get('contextSrv');\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.timeSrv = $injector.get('timeSrv');\n    this.templateSrv = $injector.get('templateSrv');\n    this.panel.datasource = this.panel.datasource || null;\n    this.events.on(PanelEvents.refresh, this.onMetricsPanelRefresh.bind(this));\n    this.events.on(PanelEvents.panelTeardown, this.onPanelTearDown.bind(this));\n    this.events.on(PanelEvents.componentDidMount, this.onMetricsPanelMounted.bind(this));\n  }\n\n  onMetricsPanelMounted() {\n    const queryRunner = this.panel.getQueryRunner();\n    this.querySubscription = queryRunner.getData({\n      withTransforms: true,\n      withFieldConfig: true\n    }).subscribe(this.panelDataObserver);\n  }\n\n  onPanelTearDown() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    } // if we have snapshot data use that\n\n\n    if (this.panel.snapshotData) {\n      this.updateTimeRange();\n      let data = this.panel.snapshotData; // backward compatibility\n\n      if (!isArray(data)) {\n        data = data.data;\n      }\n\n      this.panelData = {\n        state: LoadingState.Done,\n        series: data,\n        timeRange: this.range\n      }; // Defer panel rendering till the next digest cycle.\n      // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.\n\n      return this.$timeout(() => {\n        this.events.emit(PanelEvents.dataSnapshotLoad, data);\n      });\n    } // clear loading/error state\n\n\n    delete this.error;\n    this.loading = true; // load datasource service\n\n    return this.datasourceSrv.get(this.panel.datasource, this.panel.scopedVars).then(this.issueQueries.bind(this)).catch(err => {\n      this.processDataError(err);\n    });\n  }\n\n  processDataError(err) {\n    // if canceled  keep loading set to true\n    if (err.cancelled) {\n      console.log('Panel request cancelled', err);\n      return;\n    }\n\n    this.error = err.message || 'Request Error';\n\n    if (err.data) {\n      if (err.data.message) {\n        this.error = err.data.message;\n      } else if (err.data.error) {\n        this.error = err.data.error;\n      }\n    }\n\n    this.angularDirtyCheck();\n  }\n\n  angularDirtyCheck() {\n    if (!this.$scope.$root.$$phase) {\n      this.$scope.$digest();\n    }\n  } // Updates the response with information from the stream\n\n\n  updateTimeRange(datasource) {\n    this.datasource = datasource || this.datasource;\n    this.range = this.timeSrv.timeRange();\n    const newTimeData = applyPanelTimeOverrides(this.panel, this.range);\n    this.timeInfo = newTimeData.timeInfo;\n    this.range = newTimeData.timeRange;\n  }\n\n  issueQueries(datasource) {\n    this.updateTimeRange(datasource);\n    this.datasource = datasource;\n    const panel = this.panel;\n    const queryRunner = panel.getQueryRunner();\n    return queryRunner.run({\n      datasource: panel.datasource,\n      queries: panel.targets,\n      panelId: panel.id,\n      dashboardId: this.dashboard.id,\n      timezone: this.dashboard.getTimezone(),\n      timeInfo: this.timeInfo,\n      timeRange: this.range,\n      maxDataPoints: panel.maxDataPoints || this.width,\n      minInterval: panel.interval,\n      scopedVars: panel.scopedVars,\n      cacheTimeout: panel.cacheTimeout,\n      transformations: panel.transformations\n    });\n  }\n\n  handleDataFrames(data) {\n    this.loading = false;\n\n    if (this.dashboard && this.dashboard.snapshot) {\n      this.panel.snapshotData = data.map(frame => toDataFrameDTO(frame));\n    }\n\n    try {\n      this.events.emit(PanelEvents.dataFramesReceived, data);\n    } catch (err) {\n      this.processDataError(err);\n    }\n  }\n\n  handleQueryResult(result) {\n    this.loading = false;\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = {\n        data: []\n      };\n    }\n\n    try {\n      this.events.emit(PanelEvents.dataReceived, result.data);\n    } catch (err) {\n      this.processDataError(err);\n    }\n  }\n\n}\n\nexport { MetricsPanelCtrl };","map":{"version":3,"names":["isArray","LoadingState","PanelEvents","toDataFrameDTO","toLegacyResponseData","PanelCtrl","applyPanelTimeOverrides","MetricsPanelCtrl","constructor","$scope","$injector","next","data","panelData","state","Error","loading","processDataError","error","Loading","angularDirtyCheck","request","timeInfo","timeRange","range","useDataFrames","handleDataFrames","series","legacy","map","v","handleQueryResult","contextSrv","get","datasourceSrv","timeSrv","templateSrv","panel","datasource","events","on","refresh","onMetricsPanelRefresh","bind","panelTeardown","onPanelTearDown","componentDidMount","onMetricsPanelMounted","queryRunner","getQueryRunner","querySubscription","getData","withTransforms","withFieldConfig","subscribe","panelDataObserver","unsubscribe","otherPanelInFullscreenMode","snapshotData","updateTimeRange","Done","$timeout","emit","dataSnapshotLoad","scopedVars","then","issueQueries","catch","err","cancelled","console","log","message","$root","$$phase","$digest","newTimeData","run","queries","targets","panelId","id","dashboardId","dashboard","timezone","getTimezone","maxDataPoints","width","minInterval","interval","cacheTimeout","transformations","snapshot","frame","dataFramesReceived","result","dataReceived"],"sources":["/home/soula/grafana/public/app/angular/panel/metrics_panel_ctrl.ts"],"sourcesContent":["import { isArray } from 'lodash';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataQueryResponse,\n  DataSourceApi,\n  LegacyResponseData,\n  LoadingState,\n  PanelData,\n  PanelEvents,\n  TimeRange,\n  toDataFrameDTO,\n  toLegacyResponseData,\n} from '@grafana/data';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { ContextSrv } from 'app/core/services/context_srv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\n\nimport { PanelQueryRunner } from '../../features/query/state/PanelQueryRunner';\n\nclass MetricsPanelCtrl extends PanelCtrl {\n  declare datasource: DataSourceApi;\n  declare range: TimeRange;\n\n  contextSrv: ContextSrv;\n  datasourceSrv: any;\n  timeSrv: any;\n  templateSrv: any;\n  interval: any;\n  intervalMs: any;\n  resolution: any;\n  timeInfo?: string;\n  skipDataOnInit = false;\n  dataList: LegacyResponseData[] = [];\n  querySubscription?: Unsubscribable | null;\n  useDataFrames = false;\n  panelData?: PanelData;\n\n  constructor($scope: any, $injector: any) {\n    super($scope, $injector);\n\n    this.contextSrv = $injector.get('contextSrv');\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.timeSrv = $injector.get('timeSrv');\n    this.templateSrv = $injector.get('templateSrv');\n    this.panel.datasource = this.panel.datasource || null;\n\n    this.events.on(PanelEvents.refresh, this.onMetricsPanelRefresh.bind(this));\n    this.events.on(PanelEvents.panelTeardown, this.onPanelTearDown.bind(this));\n    this.events.on(PanelEvents.componentDidMount, this.onMetricsPanelMounted.bind(this));\n  }\n\n  private onMetricsPanelMounted() {\n    const queryRunner = this.panel.getQueryRunner() as PanelQueryRunner;\n    this.querySubscription = queryRunner\n      .getData({ withTransforms: true, withFieldConfig: true })\n      .subscribe(this.panelDataObserver);\n  }\n\n  private onPanelTearDown() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  private onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    // if we have snapshot data use that\n    if (this.panel.snapshotData) {\n      this.updateTimeRange();\n      let data = this.panel.snapshotData;\n      // backward compatibility\n      if (!isArray(data)) {\n        data = data.data;\n      }\n\n      this.panelData = {\n        state: LoadingState.Done,\n        series: data,\n        timeRange: this.range,\n      };\n\n      // Defer panel rendering till the next digest cycle.\n      // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.\n      return this.$timeout(() => {\n        this.events.emit(PanelEvents.dataSnapshotLoad, data);\n      });\n    }\n\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n\n    // load datasource service\n    return this.datasourceSrv\n      .get(this.panel.datasource, this.panel.scopedVars)\n      .then(this.issueQueries.bind(this))\n      .catch((err: any) => {\n        this.processDataError(err);\n      });\n  }\n\n  processDataError(err: any) {\n    // if canceled  keep loading set to true\n    if (err.cancelled) {\n      console.log('Panel request cancelled', err);\n      return;\n    }\n\n    this.error = err.message || 'Request Error';\n\n    if (err.data) {\n      if (err.data.message) {\n        this.error = err.data.message;\n      } else if (err.data.error) {\n        this.error = err.data.error;\n      }\n    }\n\n    this.angularDirtyCheck();\n  }\n\n  angularDirtyCheck() {\n    if (!this.$scope.$root.$$phase) {\n      this.$scope.$digest();\n    }\n  }\n\n  // Updates the response with information from the stream\n  panelDataObserver = {\n    next: (data: PanelData) => {\n      this.panelData = data;\n\n      if (data.state === LoadingState.Error) {\n        this.loading = false;\n        this.processDataError(data.error);\n      }\n\n      // Ignore data in loading state\n      if (data.state === LoadingState.Loading) {\n        this.loading = true;\n        this.angularDirtyCheck();\n        return;\n      }\n\n      if (data.request) {\n        const { timeInfo } = data.request;\n        if (timeInfo) {\n          this.timeInfo = timeInfo;\n        }\n      }\n\n      if (data.timeRange) {\n        this.range = data.timeRange;\n      }\n\n      if (this.useDataFrames) {\n        this.handleDataFrames(data.series);\n      } else {\n        // Make the results look as if they came directly from a <6.2 datasource request\n        const legacy = data.series.map((v) => toLegacyResponseData(v));\n        this.handleQueryResult({ data: legacy });\n      }\n\n      this.angularDirtyCheck();\n    },\n  };\n\n  updateTimeRange(datasource?: DataSourceApi) {\n    this.datasource = datasource || this.datasource;\n    this.range = this.timeSrv.timeRange();\n\n    const newTimeData = applyPanelTimeOverrides(this.panel, this.range);\n    this.timeInfo = newTimeData.timeInfo;\n    this.range = newTimeData.timeRange;\n  }\n\n  issueQueries(datasource: DataSourceApi) {\n    this.updateTimeRange(datasource);\n\n    this.datasource = datasource;\n\n    const panel = this.panel as PanelModel;\n    const queryRunner = panel.getQueryRunner();\n\n    return queryRunner.run({\n      datasource: panel.datasource,\n      queries: panel.targets,\n      panelId: panel.id,\n      dashboardId: this.dashboard.id,\n      timezone: this.dashboard.getTimezone(),\n      timeInfo: this.timeInfo,\n      timeRange: this.range,\n      maxDataPoints: panel.maxDataPoints || this.width,\n      minInterval: panel.interval,\n      scopedVars: panel.scopedVars,\n      cacheTimeout: panel.cacheTimeout,\n      transformations: panel.transformations,\n    });\n  }\n\n  handleDataFrames(data: DataFrame[]) {\n    this.loading = false;\n\n    if (this.dashboard && this.dashboard.snapshot) {\n      this.panel.snapshotData = data.map((frame) => toDataFrameDTO(frame));\n    }\n\n    try {\n      this.events.emit(PanelEvents.dataFramesReceived, data);\n    } catch (err) {\n      this.processDataError(err);\n    }\n  }\n\n  handleQueryResult(result: DataQueryResponse) {\n    this.loading = false;\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = { data: [] };\n    }\n\n    try {\n      this.events.emit(PanelEvents.dataReceived, result.data);\n    } catch (err) {\n      this.processDataError(err);\n    }\n  }\n}\n\nexport { MetricsPanelCtrl };\n"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,QAAxB;AAGA,SAKEC,YALF,EAOEC,WAPF,EASEC,cATF,EAUEC,oBAVF,QAWO,eAXP;AAYA,SAASC,SAAT,QAA0B,8BAA1B;AAGA,SAASC,uBAAT,QAAwC,oCAAxC;;AAIA,MAAMC,gBAAN,SAA+BF,SAA/B,CAAyC;EAkBvCG,WAAW,CAACC,MAAD,EAAcC,SAAd,EAA8B;IACvC,MAAMD,MAAN,EAAcC,SAAd;;IADuC;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA,wCANxB,KAMwB;;IAAA,kCALR,EAKQ;;IAAA;;IAAA,uCAHzB,KAGyB;;IAAA;;IAAA,2CAgGrB;MAClBC,IAAI,EAAGC,IAAD,IAAqB;QACzB,KAAKC,SAAL,GAAiBD,IAAjB;;QAEA,IAAIA,IAAI,CAACE,KAAL,KAAeb,YAAY,CAACc,KAAhC,EAAuC;UACrC,KAAKC,OAAL,GAAe,KAAf;UACA,KAAKC,gBAAL,CAAsBL,IAAI,CAACM,KAA3B;QACD,CANwB,CAQzB;;;QACA,IAAIN,IAAI,CAACE,KAAL,KAAeb,YAAY,CAACkB,OAAhC,EAAyC;UACvC,KAAKH,OAAL,GAAe,IAAf;UACA,KAAKI,iBAAL;UACA;QACD;;QAED,IAAIR,IAAI,CAACS,OAAT,EAAkB;UAChB,MAAM;YAAEC;UAAF,IAAeV,IAAI,CAACS,OAA1B;;UACA,IAAIC,QAAJ,EAAc;YACZ,KAAKA,QAAL,GAAgBA,QAAhB;UACD;QACF;;QAED,IAAIV,IAAI,CAACW,SAAT,EAAoB;UAClB,KAAKC,KAAL,GAAaZ,IAAI,CAACW,SAAlB;QACD;;QAED,IAAI,KAAKE,aAAT,EAAwB;UACtB,KAAKC,gBAAL,CAAsBd,IAAI,CAACe,MAA3B;QACD,CAFD,MAEO;UACL;UACA,MAAMC,MAAM,GAAGhB,IAAI,CAACe,MAAL,CAAYE,GAAZ,CAAiBC,CAAD,IAAO1B,oBAAoB,CAAC0B,CAAD,CAA3C,CAAf;UACA,KAAKC,iBAAL,CAAuB;YAAEnB,IAAI,EAAEgB;UAAR,CAAvB;QACD;;QAED,KAAKR,iBAAL;MACD;IApCiB,CAhGqB;;IAGvC,KAAKY,UAAL,GAAkBtB,SAAS,CAACuB,GAAV,CAAc,YAAd,CAAlB;IACA,KAAKC,aAAL,GAAqBxB,SAAS,CAACuB,GAAV,CAAc,eAAd,CAArB;IACA,KAAKE,OAAL,GAAezB,SAAS,CAACuB,GAAV,CAAc,SAAd,CAAf;IACA,KAAKG,WAAL,GAAmB1B,SAAS,CAACuB,GAAV,CAAc,aAAd,CAAnB;IACA,KAAKI,KAAL,CAAWC,UAAX,GAAwB,KAAKD,KAAL,CAAWC,UAAX,IAAyB,IAAjD;IAEA,KAAKC,MAAL,CAAYC,EAAZ,CAAetC,WAAW,CAACuC,OAA3B,EAAoC,KAAKC,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAApC;IACA,KAAKJ,MAAL,CAAYC,EAAZ,CAAetC,WAAW,CAAC0C,aAA3B,EAA0C,KAAKC,eAAL,CAAqBF,IAArB,CAA0B,IAA1B,CAA1C;IACA,KAAKJ,MAAL,CAAYC,EAAZ,CAAetC,WAAW,CAAC4C,iBAA3B,EAA8C,KAAKC,qBAAL,CAA2BJ,IAA3B,CAAgC,IAAhC,CAA9C;EACD;;EAEOI,qBAAqB,GAAG;IAC9B,MAAMC,WAAW,GAAG,KAAKX,KAAL,CAAWY,cAAX,EAApB;IACA,KAAKC,iBAAL,GAAyBF,WAAW,CACjCG,OADsB,CACd;MAAEC,cAAc,EAAE,IAAlB;MAAwBC,eAAe,EAAE;IAAzC,CADc,EAEtBC,SAFsB,CAEZ,KAAKC,iBAFO,CAAzB;EAGD;;EAEOV,eAAe,GAAG;IACxB,IAAI,KAAKK,iBAAT,EAA4B;MAC1B,KAAKA,iBAAL,CAAuBM,WAAvB;MACA,KAAKN,iBAAL,GAAyB,IAAzB;IACD;EACF;;EAEOR,qBAAqB,GAAG;IAC9B;IACA,IAAI,KAAKe,0BAAL,EAAJ,EAAuC;MACrC;IACD,CAJ6B,CAM9B;;;IACA,IAAI,KAAKpB,KAAL,CAAWqB,YAAf,EAA6B;MAC3B,KAAKC,eAAL;MACA,IAAI/C,IAAI,GAAG,KAAKyB,KAAL,CAAWqB,YAAtB,CAF2B,CAG3B;;MACA,IAAI,CAAC1D,OAAO,CAACY,IAAD,CAAZ,EAAoB;QAClBA,IAAI,GAAGA,IAAI,CAACA,IAAZ;MACD;;MAED,KAAKC,SAAL,GAAiB;QACfC,KAAK,EAAEb,YAAY,CAAC2D,IADL;QAEfjC,MAAM,EAAEf,IAFO;QAGfW,SAAS,EAAE,KAAKC;MAHD,CAAjB,CAR2B,CAc3B;MACA;;MACA,OAAO,KAAKqC,QAAL,CAAc,MAAM;QACzB,KAAKtB,MAAL,CAAYuB,IAAZ,CAAiB5D,WAAW,CAAC6D,gBAA7B,EAA+CnD,IAA/C;MACD,CAFM,CAAP;IAGD,CA1B6B,CA4B9B;;;IACA,OAAO,KAAKM,KAAZ;IACA,KAAKF,OAAL,GAAe,IAAf,CA9B8B,CAgC9B;;IACA,OAAO,KAAKkB,aAAL,CACJD,GADI,CACA,KAAKI,KAAL,CAAWC,UADX,EACuB,KAAKD,KAAL,CAAW2B,UADlC,EAEJC,IAFI,CAEC,KAAKC,YAAL,CAAkBvB,IAAlB,CAAuB,IAAvB,CAFD,EAGJwB,KAHI,CAGGC,GAAD,IAAc;MACnB,KAAKnD,gBAAL,CAAsBmD,GAAtB;IACD,CALI,CAAP;EAMD;;EAEDnD,gBAAgB,CAACmD,GAAD,EAAW;IACzB;IACA,IAAIA,GAAG,CAACC,SAAR,EAAmB;MACjBC,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCH,GAAvC;MACA;IACD;;IAED,KAAKlD,KAAL,GAAakD,GAAG,CAACI,OAAJ,IAAe,eAA5B;;IAEA,IAAIJ,GAAG,CAACxD,IAAR,EAAc;MACZ,IAAIwD,GAAG,CAACxD,IAAJ,CAAS4D,OAAb,EAAsB;QACpB,KAAKtD,KAAL,GAAakD,GAAG,CAACxD,IAAJ,CAAS4D,OAAtB;MACD,CAFD,MAEO,IAAIJ,GAAG,CAACxD,IAAJ,CAASM,KAAb,EAAoB;QACzB,KAAKA,KAAL,GAAakD,GAAG,CAACxD,IAAJ,CAASM,KAAtB;MACD;IACF;;IAED,KAAKE,iBAAL;EACD;;EAEDA,iBAAiB,GAAG;IAClB,IAAI,CAAC,KAAKX,MAAL,CAAYgE,KAAZ,CAAkBC,OAAvB,EAAgC;MAC9B,KAAKjE,MAAL,CAAYkE,OAAZ;IACD;EACF,CA/GsC,CAiHvC;;;EAwCAhB,eAAe,CAACrB,UAAD,EAA6B;IAC1C,KAAKA,UAAL,GAAkBA,UAAU,IAAI,KAAKA,UAArC;IACA,KAAKd,KAAL,GAAa,KAAKW,OAAL,CAAaZ,SAAb,EAAb;IAEA,MAAMqD,WAAW,GAAGtE,uBAAuB,CAAC,KAAK+B,KAAN,EAAa,KAAKb,KAAlB,CAA3C;IACA,KAAKF,QAAL,GAAgBsD,WAAW,CAACtD,QAA5B;IACA,KAAKE,KAAL,GAAaoD,WAAW,CAACrD,SAAzB;EACD;;EAED2C,YAAY,CAAC5B,UAAD,EAA4B;IACtC,KAAKqB,eAAL,CAAqBrB,UAArB;IAEA,KAAKA,UAAL,GAAkBA,UAAlB;IAEA,MAAMD,KAAK,GAAG,KAAKA,KAAnB;IACA,MAAMW,WAAW,GAAGX,KAAK,CAACY,cAAN,EAApB;IAEA,OAAOD,WAAW,CAAC6B,GAAZ,CAAgB;MACrBvC,UAAU,EAAED,KAAK,CAACC,UADG;MAErBwC,OAAO,EAAEzC,KAAK,CAAC0C,OAFM;MAGrBC,OAAO,EAAE3C,KAAK,CAAC4C,EAHM;MAIrBC,WAAW,EAAE,KAAKC,SAAL,CAAeF,EAJP;MAKrBG,QAAQ,EAAE,KAAKD,SAAL,CAAeE,WAAf,EALW;MAMrB/D,QAAQ,EAAE,KAAKA,QANM;MAOrBC,SAAS,EAAE,KAAKC,KAPK;MAQrB8D,aAAa,EAAEjD,KAAK,CAACiD,aAAN,IAAuB,KAAKC,KARtB;MASrBC,WAAW,EAAEnD,KAAK,CAACoD,QATE;MAUrBzB,UAAU,EAAE3B,KAAK,CAAC2B,UAVG;MAWrB0B,YAAY,EAAErD,KAAK,CAACqD,YAXC;MAYrBC,eAAe,EAAEtD,KAAK,CAACsD;IAZF,CAAhB,CAAP;EAcD;;EAEDjE,gBAAgB,CAACd,IAAD,EAAoB;IAClC,KAAKI,OAAL,GAAe,KAAf;;IAEA,IAAI,KAAKmE,SAAL,IAAkB,KAAKA,SAAL,CAAeS,QAArC,EAA+C;MAC7C,KAAKvD,KAAL,CAAWqB,YAAX,GAA0B9C,IAAI,CAACiB,GAAL,CAAUgE,KAAD,IAAW1F,cAAc,CAAC0F,KAAD,CAAlC,CAA1B;IACD;;IAED,IAAI;MACF,KAAKtD,MAAL,CAAYuB,IAAZ,CAAiB5D,WAAW,CAAC4F,kBAA7B,EAAiDlF,IAAjD;IACD,CAFD,CAEE,OAAOwD,GAAP,EAAY;MACZ,KAAKnD,gBAAL,CAAsBmD,GAAtB;IACD;EACF;;EAEDrC,iBAAiB,CAACgE,MAAD,EAA4B;IAC3C,KAAK/E,OAAL,GAAe,KAAf;;IAEA,IAAI,KAAKmE,SAAL,CAAeS,QAAnB,EAA6B;MAC3B,KAAKvD,KAAL,CAAWqB,YAAX,GAA0BqC,MAAM,CAACnF,IAAjC;IACD;;IAED,IAAI,CAACmF,MAAD,IAAW,CAACA,MAAM,CAACnF,IAAvB,EAA6B;MAC3B0D,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAqEwB,MAArE;MACAA,MAAM,GAAG;QAAEnF,IAAI,EAAE;MAAR,CAAT;IACD;;IAED,IAAI;MACF,KAAK2B,MAAL,CAAYuB,IAAZ,CAAiB5D,WAAW,CAAC8F,YAA7B,EAA2CD,MAAM,CAACnF,IAAlD;IACD,CAFD,CAEE,OAAOwD,GAAP,EAAY;MACZ,KAAKnD,gBAAL,CAAsBmD,GAAtB;IACD;EACF;;AAzNsC;;AA4NzC,SAAS7D,gBAAT"},"metadata":{},"sourceType":"module"}