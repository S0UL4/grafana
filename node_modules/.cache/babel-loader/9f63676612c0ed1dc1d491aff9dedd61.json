{"ast":null,"code":"var _h, _p, _code, _br, _code2, _br2, _br3, _label, _br4, _li, _li2, _li3, _li4, _li5, _li6, _li7, _li8, _li9, _li10, _li11, _li12;\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default class CloudMonitoringCheatSheet extends PureComponent {\n  render() {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [_h || (_h = /*#__PURE__*/_jsx(\"h2\", {\n        children: \"Cloud Monitoring alias patterns\"\n      })), /*#__PURE__*/_jsxs(\"div\", {\n        children: [_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n          children: \"Format the legend keys any way you want by using alias patterns. Format the legend keys any way you want by using alias patterns.\"\n        })), \"Example:\", _code || (_code = /*#__PURE__*/_jsx(\"code\", {\n          children: `${'{{metric.name}} - {{metric.label.instance_name}}'}`\n        })), _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), \"Result: \\xA0\\xA0\", _code2 || (_code2 = /*#__PURE__*/_jsx(\"code\", {\n          children: \"cpu/usage_time - server1-europe-west-1\"\n        })), _br2 || (_br2 = /*#__PURE__*/_jsx(\"br\", {})), _br3 || (_br3 = /*#__PURE__*/_jsx(\"br\", {})), _label || (_label = /*#__PURE__*/_jsx(\"label\", {\n          children: \"Patterns\"\n        })), _br4 || (_br4 = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsxs(\"ul\", {\n          className: css`\n              list-style: none;\n            `,\n          children: [_li || (_li = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{metric.type}}'}`\n            }), \" = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\"]\n          })), _li2 || (_li2 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{metric.name}}'}`\n            }), \" = name part of metric e.g. instance/cpu/usage_time\"]\n          })), _li3 || (_li3 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{metric.service}}'}`\n            }), \" = service part of metric e.g. compute\"]\n          })), _li4 || (_li4 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{metric.label.label_name}}'}`\n            }), \" = Metric label metadata e.g. metric.label.instance_name\"]\n          })), _li5 || (_li5 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{resource.label.label_name}}'}`\n            }), \" = Resource label metadata e.g. resource.label.zone\"]\n          })), _li6 || (_li6 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{metadata.system_labels.name}}'}`\n            }), \" = Meta data system labels e.g. metadata.system_labels.name. For this to work, the needs to be included in the group by\"]\n          })), _li7 || (_li7 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{metadata.user_labels.name}}'}`\n            }), \" = Meta data user labels e.g. metadata.user_labels.name. For this to work, the needs to be included in the group by\"]\n          })), _li8 || (_li8 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{bucket}}'}`\n            }), \" = bucket boundary for distribution metrics when using a heatmap in Grafana\"]\n          })), _li9 || (_li9 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{project}}'}`\n            }), \" = The project name that was specified in the query editor\"]\n          })), _li10 || (_li10 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{service}}'}`\n            }), \" = The service id that was specified in the SLO query editor\"]\n          })), _li11 || (_li11 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{slo}}'}`\n            }), \" = The SLO id that was specified in the SLO query editor\"]\n          })), _li12 || (_li12 = /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(\"code\", {\n              children: `${'{{selector}}'}`\n            }), \" = The Selector function that was specified in the SLO query editor\"]\n          }))]\n        })]\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["css","React","PureComponent","CloudMonitoringCheatSheet","render"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/CloudMonitoringCheatSheet.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { CloudMonitoringQuery } from '../types';\n\nexport default class CloudMonitoringCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudMonitoringQuery>,\n  { userExamples: string[] }\n> {\n  render() {\n    return (\n      <div>\n        <h2>Cloud Monitoring alias patterns</h2>\n        <div>\n          <p>\n            Format the legend keys any way you want by using alias patterns. Format the legend keys any way you want by\n            using alias patterns.\n          </p>\n          Example:\n          <code>{`${'{{metric.name}} - {{metric.label.instance_name}}'}`}</code>\n          <br />\n          Result: &nbsp;&nbsp;<code>cpu/usage_time - server1-europe-west-1</code>\n          <br />\n          <br />\n          <label>Patterns</label>\n          <br />\n          <ul\n            className={css`\n              list-style: none;\n            `}\n          >\n            <li>\n              <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n            </li>\n            <li>\n              <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n            </li>\n            <li>\n              <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n            </li>\n            <li>\n              <code>{`${'{{metadata.system_labels.name}}'}`}</code> = Meta data system labels e.g.\n              metadata.system_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{metadata.user_labels.name}}'}`}</code> = Meta data user labels e.g.\n              metadata.user_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{bucket}}'}`}</code> = bucket boundary for distribution metrics when using a heatmap in\n              Grafana\n            </li>\n            <li>\n              <code>{`${'{{project}}'}`}</code> = The project name that was specified in the query editor\n            </li>\n            <li>\n              <code>{`${'{{service}}'}`}</code> = The service id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{slo}}'}`}</code> = The SLO id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{selector}}'}`}</code> = The Selector function that was specified in the SLO query editor\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;;;AAMA,eAAe,MAAMC,yBAAN,SAAwCD,aAAxC,CAGb;EACAE,MAAM,GAAG;IACP,oBACE;MAAA,oCACE;QAAA;MAAA,EADF,gBAEE;QAAA,oCACE;UAAA;QAAA,EADF,8CAME;UAAA,UAAQ,GAAE,kDAAmD;QAA7D,EANF,8BAOE,cAPF,wDAQsB;UAAA;QAAA,EARtB,gCASE,cATF,gCAUE,cAVF,oCAWE;UAAA;QAAA,EAXF,gCAYE,cAZF,gBAaE;UACE,SAAS,EAAEJ,GAAI;AAC3B;AACA,aAHU;UAAA,sCAKE;YAAA,wBACE;cAAA,UAAQ,GAAE,iBAAkB;YAA5B,EADF;UAAA,EALF,gCAQE;YAAA,wBACE;cAAA,UAAQ,GAAE,iBAAkB;YAA5B,EADF;UAAA,EARF,gCAWE;YAAA,wBACE;cAAA,UAAQ,GAAE,oBAAqB;YAA/B,EADF;UAAA,EAXF,gCAcE;YAAA,wBACE;cAAA,UAAQ,GAAE,6BAA8B;YAAxC,EADF;UAAA,EAdF,gCAiBE;YAAA,wBACE;cAAA,UAAQ,GAAE,+BAAgC;YAA1C,EADF;UAAA,EAjBF,gCAoBE;YAAA,wBACE;cAAA,UAAQ,GAAE,iCAAkC;YAA5C,EADF;UAAA,EApBF,gCAwBE;YAAA,wBACE;cAAA,UAAQ,GAAE,+BAAgC;YAA1C,EADF;UAAA,EAxBF,gCA4BE;YAAA,wBACE;cAAA,UAAQ,GAAE,YAAa;YAAvB,EADF;UAAA,EA5BF,gCAgCE;YAAA,wBACE;cAAA,UAAQ,GAAE,aAAc;YAAxB,EADF;UAAA,EAhCF,kCAmCE;YAAA,wBACE;cAAA,UAAQ,GAAE,aAAc;YAAxB,EADF;UAAA,EAnCF,kCAsCE;YAAA,wBACE;cAAA,UAAQ,GAAE,SAAU;YAApB,EADF;UAAA,EAtCF,kCAyCE;YAAA,wBACE;cAAA,UAAQ,GAAE,cAAe;YAAzB,EADF;UAAA,EAzCF;QAAA,EAbF;MAAA,EAFF;IAAA,EADF;EAgED;;AAlED"},"metadata":{},"sourceType":"module"}