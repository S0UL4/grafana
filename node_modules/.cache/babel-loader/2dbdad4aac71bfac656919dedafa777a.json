{"ast":null,"code":"import { useMemo } from 'react';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { getFiltersFromUrlParams } from '../utils/misc';\nexport const useFilteredAmGroups = groups => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n  const matchers = parseMatchers(filters.queryString || '');\n  return useMemo(() => {\n    return groups.reduce((filteredGroup, group) => {\n      const alerts = group.alerts.filter(({\n        labels,\n        status\n      }) => {\n        const labelsMatch = labelsMatchMatchers(labels, matchers);\n        const filtersMatch = filters.alertState ? status.state === filters.alertState : true;\n        return labelsMatch && filtersMatch;\n      });\n\n      if (alerts.length > 0) {\n        // The ungrouped alerts should be first in the results\n        if (Object.keys(group.labels).length === 0) {\n          filteredGroup.unshift(Object.assign({}, group, {\n            alerts\n          }));\n        } else {\n          filteredGroup.push(Object.assign({}, group, {\n            alerts\n          }));\n        }\n      }\n\n      return filteredGroup;\n    }, []);\n  }, [groups, filters, matchers]);\n};","map":{"version":3,"names":["useMemo","useQueryParams","labelsMatchMatchers","parseMatchers","getFiltersFromUrlParams","useFilteredAmGroups","groups","queryParams","filters","matchers","queryString","reduce","filteredGroup","group","alerts","filter","labels","status","labelsMatch","filtersMatch","alertState","state","length","Object","keys","unshift","push"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/hooks/useFilteredAmGroups.ts"],"sourcesContent":["import { useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { getFiltersFromUrlParams } from '../utils/misc';\n\nexport const useFilteredAmGroups = (groups: AlertmanagerGroup[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n  const matchers = parseMatchers(filters.queryString || '');\n\n  return useMemo(() => {\n    return groups.reduce((filteredGroup: AlertmanagerGroup[], group) => {\n      const alerts = group.alerts.filter(({ labels, status }) => {\n        const labelsMatch = labelsMatchMatchers(labels, matchers);\n        const filtersMatch = filters.alertState ? status.state === filters.alertState : true;\n        return labelsMatch && filtersMatch;\n      });\n      if (alerts.length > 0) {\n        // The ungrouped alerts should be first in the results\n        if (Object.keys(group.labels).length === 0) {\n          filteredGroup.unshift({ ...group, alerts });\n        } else {\n          filteredGroup.push({ ...group, alerts });\n        }\n      }\n      return filteredGroup;\n    }, []);\n  }, [groups, filters, matchers]);\n};\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AAGA,SAASC,mBAAT,EAA8BC,aAA9B,QAAmD,uBAAnD;AACA,SAASC,uBAAT,QAAwC,eAAxC;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,MAAD,IAAiC;EAClE,MAAM,CAACC,WAAD,IAAgBN,cAAc,EAApC;EACA,MAAMO,OAAO,GAAGJ,uBAAuB,CAACG,WAAD,CAAvC;EACA,MAAME,QAAQ,GAAGN,aAAa,CAACK,OAAO,CAACE,WAAR,IAAuB,EAAxB,CAA9B;EAEA,OAAOV,OAAO,CAAC,MAAM;IACnB,OAAOM,MAAM,CAACK,MAAP,CAAc,CAACC,aAAD,EAAqCC,KAArC,KAA+C;MAClE,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,CAAaC,MAAb,CAAoB,CAAC;QAAEC,MAAF;QAAUC;MAAV,CAAD,KAAwB;QACzD,MAAMC,WAAW,GAAGhB,mBAAmB,CAACc,MAAD,EAASP,QAAT,CAAvC;QACA,MAAMU,YAAY,GAAGX,OAAO,CAACY,UAAR,GAAqBH,MAAM,CAACI,KAAP,KAAiBb,OAAO,CAACY,UAA9C,GAA2D,IAAhF;QACA,OAAOF,WAAW,IAAIC,YAAtB;MACD,CAJc,CAAf;;MAKA,IAAIL,MAAM,CAACQ,MAAP,GAAgB,CAApB,EAAuB;QACrB;QACA,IAAIC,MAAM,CAACC,IAAP,CAAYX,KAAK,CAACG,MAAlB,EAA0BM,MAA1B,KAAqC,CAAzC,EAA4C;UAC1CV,aAAa,CAACa,OAAd,mBAA2BZ,KAA3B;YAAkCC;UAAlC;QACD,CAFD,MAEO;UACLF,aAAa,CAACc,IAAd,mBAAwBb,KAAxB;YAA+BC;UAA/B;QACD;MACF;;MACD,OAAOF,aAAP;IACD,CAfM,EAeJ,EAfI,CAAP;EAgBD,CAjBa,EAiBX,CAACN,MAAD,EAASE,OAAT,EAAkBC,QAAlB,CAjBW,CAAd;AAkBD,CAvBM"},"metadata":{},"sourceType":"module"}