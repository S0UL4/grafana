{"ast":null,"code":"import { FieldColorModeId, FieldConfigProperty, FieldType, identityOverrideProcessor, PanelPlugin } from '@grafana/data';\nimport { VisibilityMode } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\nimport { SpanNullsEditor } from '../timeseries/SpanNullsEditor';\nimport { StateTimelinePanel } from './StateTimelinePanel';\nimport { timelinePanelChangedHandler } from './migrations';\nimport { StatTimelineSuggestionsSupplier } from './suggestions';\nimport { defaultPanelOptions, defaultTimelineFieldConfig } from './types';\nexport const plugin = new PanelPlugin(StateTimelinePanel).setPanelChangeHandler(timelinePanelChangedHandler).useFieldConfig({\n  standardOptions: {\n    [FieldConfigProperty.Color]: {\n      settings: {\n        byValueSupport: true\n      },\n      defaultValue: {\n        mode: FieldColorModeId.ContinuousGrYlRd\n      }\n    }\n  },\n  useCustomConfig: builder => {\n    builder.addSliderInput({\n      path: 'lineWidth',\n      name: 'Line width',\n      defaultValue: defaultTimelineFieldConfig.lineWidth,\n      settings: {\n        min: 0,\n        max: 10,\n        step: 1\n      }\n    }).addSliderInput({\n      path: 'fillOpacity',\n      name: 'Fill opacity',\n      defaultValue: defaultTimelineFieldConfig.fillOpacity,\n      settings: {\n        min: 0,\n        max: 100,\n        step: 1\n      }\n    }).addCustomEditor({\n      id: 'spanNulls',\n      path: 'spanNulls',\n      name: 'Connect null values',\n      defaultValue: false,\n      editor: SpanNullsEditor,\n      override: SpanNullsEditor,\n      shouldApply: f => f.type !== FieldType.time,\n      process: identityOverrideProcessor\n    });\n  }\n}).setPanelOptions(builder => {\n  builder.addBooleanSwitch({\n    path: 'mergeValues',\n    name: 'Merge equal consecutive values',\n    defaultValue: defaultPanelOptions.mergeValues\n  }).addRadio({\n    path: 'showValue',\n    name: 'Show values',\n    settings: {\n      options: [{\n        value: VisibilityMode.Auto,\n        label: 'Auto'\n      }, {\n        value: VisibilityMode.Always,\n        label: 'Always'\n      }, {\n        value: VisibilityMode.Never,\n        label: 'Never'\n      }]\n    },\n    defaultValue: defaultPanelOptions.showValue\n  }).addRadio({\n    path: 'alignValue',\n    name: 'Align values',\n    settings: {\n      options: [{\n        value: 'left',\n        label: 'Left'\n      }, {\n        value: 'center',\n        label: 'Center'\n      }, {\n        value: 'right',\n        label: 'Right'\n      }]\n    },\n    defaultValue: defaultPanelOptions.alignValue\n  }).addSliderInput({\n    path: 'rowHeight',\n    name: 'Row height',\n    settings: {\n      min: 0,\n      max: 1,\n      step: 0.01\n    },\n    defaultValue: defaultPanelOptions.rowHeight\n  });\n  commonOptionsBuilder.addLegendOptions(builder, false);\n  commonOptionsBuilder.addTooltipOptions(builder, true);\n}).setSuggestionsSupplier(new StatTimelineSuggestionsSupplier());","map":{"version":3,"names":["FieldColorModeId","FieldConfigProperty","FieldType","identityOverrideProcessor","PanelPlugin","VisibilityMode","commonOptionsBuilder","SpanNullsEditor","StateTimelinePanel","timelinePanelChangedHandler","StatTimelineSuggestionsSupplier","defaultPanelOptions","defaultTimelineFieldConfig","plugin","setPanelChangeHandler","useFieldConfig","standardOptions","Color","settings","byValueSupport","defaultValue","mode","ContinuousGrYlRd","useCustomConfig","builder","addSliderInput","path","name","lineWidth","min","max","step","fillOpacity","addCustomEditor","id","editor","override","shouldApply","f","type","time","process","setPanelOptions","addBooleanSwitch","mergeValues","addRadio","options","value","Auto","label","Always","Never","showValue","alignValue","rowHeight","addLegendOptions","addTooltipOptions","setSuggestionsSupplier"],"sources":["/home/soula/grafana/public/app/plugins/panel/state-timeline/module.tsx"],"sourcesContent":["import {\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  identityOverrideProcessor,\n  PanelPlugin,\n} from '@grafana/data';\nimport { VisibilityMode } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { SpanNullsEditor } from '../timeseries/SpanNullsEditor';\n\nimport { StateTimelinePanel } from './StateTimelinePanel';\nimport { timelinePanelChangedHandler } from './migrations';\nimport { StatTimelineSuggestionsSupplier } from './suggestions';\nimport { TimelineOptions, TimelineFieldConfig, defaultPanelOptions, defaultTimelineFieldConfig } from './types';\n\nexport const plugin = new PanelPlugin<TimelineOptions, TimelineFieldConfig>(StateTimelinePanel)\n  .setPanelChangeHandler(timelinePanelChangedHandler)\n  .useFieldConfig({\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.ContinuousGrYlRd,\n        },\n      },\n    },\n    useCustomConfig: (builder) => {\n      builder\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: defaultTimelineFieldConfig.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n        })\n        .addSliderInput({\n          path: 'fillOpacity',\n          name: 'Fill opacity',\n          defaultValue: defaultTimelineFieldConfig.fillOpacity,\n          settings: {\n            min: 0,\n            max: 100,\n            step: 1,\n          },\n        })\n        .addCustomEditor<void, boolean>({\n          id: 'spanNulls',\n          path: 'spanNulls',\n          name: 'Connect null values',\n          defaultValue: false,\n          editor: SpanNullsEditor,\n          override: SpanNullsEditor,\n          shouldApply: (f) => f.type !== FieldType.time,\n          process: identityOverrideProcessor,\n        });\n    },\n  })\n  .setPanelOptions((builder) => {\n    builder\n      .addBooleanSwitch({\n        path: 'mergeValues',\n        name: 'Merge equal consecutive values',\n        defaultValue: defaultPanelOptions.mergeValues,\n      })\n      .addRadio({\n        path: 'showValue',\n        name: 'Show values',\n        settings: {\n          options: [\n            { value: VisibilityMode.Auto, label: 'Auto' },\n            { value: VisibilityMode.Always, label: 'Always' },\n            { value: VisibilityMode.Never, label: 'Never' },\n          ],\n        },\n        defaultValue: defaultPanelOptions.showValue,\n      })\n      .addRadio({\n        path: 'alignValue',\n        name: 'Align values',\n        settings: {\n          options: [\n            { value: 'left', label: 'Left' },\n            { value: 'center', label: 'Center' },\n            { value: 'right', label: 'Right' },\n          ],\n        },\n        defaultValue: defaultPanelOptions.alignValue,\n      })\n      .addSliderInput({\n        path: 'rowHeight',\n        name: 'Row height',\n        settings: {\n          min: 0,\n          max: 1,\n          step: 0.01,\n        },\n        defaultValue: defaultPanelOptions.rowHeight,\n      });\n\n    commonOptionsBuilder.addLegendOptions(builder, false);\n    commonOptionsBuilder.addTooltipOptions(builder, true);\n  })\n  .setSuggestionsSupplier(new StatTimelineSuggestionsSupplier());\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}