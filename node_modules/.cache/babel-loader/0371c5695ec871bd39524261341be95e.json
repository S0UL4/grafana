{"ast":null,"code":"import { locationUtil } from '@grafana/data';\nimport { getDataSourceSrv, locationService, getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { getLibraryPanel } from '../../library-panels/state/api';\nimport { LibraryElementKind } from '../../library-panels/types';\nimport { clearDashboard, fetchDashboard, fetchFailed, InputType, LibraryPanelInputState, setGcomDashboard, setInputs, setJsonDashboard, setLibraryPanelInputs } from './reducers';\nexport function fetchGcomDashboard(id) {\n  return async dispatch => {\n    try {\n      dispatch(fetchDashboard());\n      const dashboard = await getBackendSrv().get(`/api/gnet/dashboards/${id}`);\n      dispatch(setGcomDashboard(dashboard));\n      dispatch(processInputs(dashboard.json));\n      dispatch(processElements(dashboard.json));\n    } catch (error) {\n      dispatch(fetchFailed());\n\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.message || error)));\n      }\n    }\n  };\n}\nexport function importDashboardJson(dashboard) {\n  return async dispatch => {\n    dispatch(setJsonDashboard(dashboard));\n    dispatch(processInputs(dashboard));\n    dispatch(processElements(dashboard));\n  };\n}\n\nfunction processInputs(dashboardJson) {\n  return dispatch => {\n    if (dashboardJson && dashboardJson.__inputs) {\n      const inputs = [];\n\n      dashboardJson.__inputs.forEach(input => {\n        const inputModel = {\n          name: input.name,\n          label: input.label,\n          info: input.description,\n          value: input.value,\n          type: input.type,\n          pluginId: input.pluginId,\n          options: []\n        };\n\n        if (input.type === InputType.DataSource) {\n          getDataSourceOptions(input, inputModel);\n        } else if (!inputModel.info) {\n          inputModel.info = 'Specify a string constant';\n        }\n\n        inputs.push(inputModel);\n      });\n\n      dispatch(setInputs(inputs));\n    }\n  };\n}\n\nfunction processElements(dashboardJson) {\n  return async function (dispatch) {\n    if (!dashboardJson || !dashboardJson.__elements) {\n      return;\n    }\n\n    const libraryPanelInputs = [];\n\n    for (const element of dashboardJson.__elements) {\n      if (element.kind !== LibraryElementKind.Panel) {\n        continue;\n      }\n\n      const model = element.model;\n      const {\n        type,\n        description\n      } = model;\n      const {\n        uid,\n        name\n      } = element;\n      const input = {\n        model: {\n          model,\n          uid,\n          name,\n          version: 0,\n          meta: {},\n          id: 0,\n          type,\n          kind: LibraryElementKind.Panel,\n          description\n        },\n        state: LibraryPanelInputState.New\n      };\n\n      try {\n        const panelInDb = await getLibraryPanel(uid, true);\n        input.state = LibraryPanelInputState.Exits;\n        input.model = panelInDb;\n      } catch (e) {\n        if (e.status !== 404) {\n          throw e;\n        }\n      }\n\n      libraryPanelInputs.push(input);\n    }\n\n    dispatch(setLibraryPanelInputs(libraryPanelInputs));\n  };\n}\n\nexport function clearLoadedDashboard() {\n  return dispatch => {\n    dispatch(clearDashboard());\n  };\n}\nexport function importDashboard(importDashboardForm) {\n  return async (dispatch, getState) => {\n    var _importDashboardForm$, _importDashboardForm$2;\n\n    const dashboard = getState().importDashboard.dashboard;\n    const inputs = getState().importDashboard.inputs;\n    let inputsToPersist = [];\n    (_importDashboardForm$ = importDashboardForm.dataSources) === null || _importDashboardForm$ === void 0 ? void 0 : _importDashboardForm$.forEach((dataSource, index) => {\n      const input = inputs.dataSources[index];\n      inputsToPersist.push({\n        name: input.name,\n        type: input.type,\n        pluginId: input.pluginId,\n        value: dataSource.uid\n      });\n    });\n    (_importDashboardForm$2 = importDashboardForm.constants) === null || _importDashboardForm$2 === void 0 ? void 0 : _importDashboardForm$2.forEach((constant, index) => {\n      const input = inputs.constants[index];\n      inputsToPersist.push({\n        value: constant,\n        name: input.name,\n        type: input.type\n      });\n    });\n    const result = await getBackendSrv().post('api/dashboards/import', {\n      // uid: if user changed it, take the new uid from importDashboardForm,\n      // else read it from original dashboard\n      // by default the uid input is disabled, onSubmit ignores values from disabled inputs\n      dashboard: Object.assign({}, dashboard, {\n        title: importDashboardForm.title,\n        uid: importDashboardForm.uid || dashboard.uid\n      }),\n      overwrite: true,\n      inputs: inputsToPersist,\n      folderId: importDashboardForm.folder.id\n    });\n    const dashboardUrl = locationUtil.stripBaseFromUrl(result.importedUrl);\n    locationService.push(dashboardUrl);\n  };\n}\n\nconst getDataSourceOptions = (input, inputModel) => {\n  const sources = getDataSourceSrv().getList({\n    pluginId: input.pluginId\n  });\n\n  if (sources.length === 0) {\n    inputModel.info = 'No data sources of type ' + input.pluginName + ' found';\n  } else if (!inputModel.info) {\n    inputModel.info = 'Select a ' + input.pluginName + ' data source';\n  }\n};\n\nexport function moveDashboards(dashboardUids, toFolder) {\n  const tasks = [];\n\n  for (const uid of dashboardUids) {\n    tasks.push(createTask(moveDashboard, true, uid, toFolder));\n  }\n\n  return executeInOrder(tasks).then(result => {\n    return {\n      totalCount: result.length,\n      successCount: result.filter(res => res.succeeded).length,\n      alreadyInFolderCount: result.filter(res => res.alreadyInFolder).length\n    };\n  });\n}\n\nasync function moveDashboard(uid, toFolder) {\n  const fullDash = await getBackendSrv().get(`/api/dashboards/uid/${uid}`);\n\n  if (!fullDash.meta.folderId && toFolder.id === 0 || fullDash.meta.folderId === toFolder.id) {\n    return {\n      alreadyInFolder: true\n    };\n  }\n\n  const options = {\n    dashboard: fullDash.dashboard,\n    folderId: toFolder.id,\n    overwrite: false\n  };\n\n  try {\n    await saveDashboard(options);\n    return {\n      succeeded: true\n    };\n  } catch (err) {\n    if (isFetchError(err)) {\n      var _err$data;\n\n      if (((_err$data = err.data) === null || _err$data === void 0 ? void 0 : _err$data.status) !== 'plugin-dashboard') {\n        return {\n          succeeded: false\n        };\n      }\n\n      err.isHandled = true;\n    }\n\n    options.overwrite = true;\n\n    try {\n      await saveDashboard(options);\n      return {\n        succeeded: true\n      };\n    } catch (e) {\n      return {\n        succeeded: false\n      };\n    }\n  }\n}\n\nfunction createTask(fn, ignoreRejections, ...args) {\n  return async result => {\n    try {\n      const res = await fn(...args);\n      return Array.prototype.concat(result, [res]);\n    } catch (err) {\n      if (ignoreRejections) {\n        return result;\n      }\n\n      throw err;\n    }\n  };\n}\n\nexport function deleteFoldersAndDashboards(folderUids, dashboardUids) {\n  const tasks = [];\n\n  for (const folderUid of folderUids) {\n    tasks.push(createTask(deleteFolder, true, folderUid, true));\n  }\n\n  for (const dashboardUid of dashboardUids) {\n    tasks.push(createTask(deleteDashboard, true, dashboardUid, true));\n  }\n\n  return executeInOrder(tasks);\n}\nexport function saveDashboard(options) {\n  var _options$message, _options$overwrite;\n\n  dashboardWatcher.ignoreNextSave();\n  return getBackendSrv().post('/api/dashboards/db/', {\n    dashboard: options.dashboard,\n    message: (_options$message = options.message) !== null && _options$message !== void 0 ? _options$message : '',\n    overwrite: (_options$overwrite = options.overwrite) !== null && _options$overwrite !== void 0 ? _options$overwrite : false,\n    folderId: options.folderId\n  });\n}\n\nfunction deleteFolder(uid, showSuccessAlert) {\n  return getBackendSrv().request({\n    method: 'DELETE',\n    url: `/api/folders/${uid}?forceDeleteRules=false`,\n    showSuccessAlert: showSuccessAlert\n  });\n}\n\nexport function createFolder(payload) {\n  return getBackendSrv().post('/api/folders', payload);\n}\nexport function searchFolders(query, permission, withAccessControl = false) {\n  return getBackendSrv().get('/api/search', {\n    query,\n    type: 'dash-folder',\n    permission,\n    accesscontrol: withAccessControl\n  });\n}\nexport function getFolderById(id) {\n  return getBackendSrv().get(`/api/folders/id/${id}`);\n}\nexport function deleteDashboard(uid, showSuccessAlert) {\n  return getBackendSrv().request({\n    method: 'DELETE',\n    url: `/api/dashboards/uid/${uid}`,\n    showSuccessAlert: showSuccessAlert\n  });\n}\n\nfunction executeInOrder(tasks) {\n  return tasks.reduce((acc, task) => {\n    return Promise.resolve(acc).then(task);\n  }, []);\n}","map":{"version":3,"names":["locationUtil","getDataSourceSrv","locationService","getBackendSrv","isFetchError","notifyApp","createErrorNotification","dashboardWatcher","getLibraryPanel","LibraryElementKind","clearDashboard","fetchDashboard","fetchFailed","InputType","LibraryPanelInputState","setGcomDashboard","setInputs","setJsonDashboard","setLibraryPanelInputs","fetchGcomDashboard","id","dispatch","dashboard","get","processInputs","json","processElements","error","data","message","importDashboardJson","dashboardJson","__inputs","inputs","forEach","input","inputModel","name","label","info","description","value","type","pluginId","options","DataSource","getDataSourceOptions","push","__elements","libraryPanelInputs","element","kind","Panel","model","uid","version","meta","state","New","panelInDb","Exits","e","status","clearLoadedDashboard","importDashboard","importDashboardForm","getState","inputsToPersist","dataSources","dataSource","index","constants","constant","result","post","title","overwrite","folderId","folder","dashboardUrl","stripBaseFromUrl","importedUrl","sources","getList","length","pluginName","moveDashboards","dashboardUids","toFolder","tasks","createTask","moveDashboard","executeInOrder","then","totalCount","successCount","filter","res","succeeded","alreadyInFolderCount","alreadyInFolder","fullDash","saveDashboard","err","isHandled","fn","ignoreRejections","args","Array","prototype","concat","deleteFoldersAndDashboards","folderUids","folderUid","deleteFolder","dashboardUid","deleteDashboard","ignoreNextSave","showSuccessAlert","request","method","url","createFolder","payload","searchFolders","query","permission","withAccessControl","accesscontrol","getFolderById","reduce","acc","task","Promise","resolve"],"sources":["/home/soula/grafana/public/app/features/manage-dashboards/state/actions.ts"],"sourcesContent":["import { DataSourceInstanceSettings, locationUtil } from '@grafana/data';\nimport { getDataSourceSrv, locationService, getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { DashboardDataDTO, DashboardDTO, FolderInfo, PermissionLevelString, ThunkResult } from 'app/types';\n\nimport { LibraryElementExport } from '../../dashboard/components/DashExportModal/DashboardExporter';\nimport { getLibraryPanel } from '../../library-panels/state/api';\nimport { LibraryElementDTO, LibraryElementKind } from '../../library-panels/types';\nimport { DashboardSearchHit } from '../../search/types';\n\nimport {\n  clearDashboard,\n  fetchDashboard,\n  fetchFailed,\n  ImportDashboardDTO,\n  InputType,\n  LibraryPanelInput,\n  LibraryPanelInputState,\n  setGcomDashboard,\n  setInputs,\n  setJsonDashboard,\n  setLibraryPanelInputs,\n} from './reducers';\n\nexport function fetchGcomDashboard(id: string): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      dispatch(fetchDashboard());\n      const dashboard = await getBackendSrv().get(`/api/gnet/dashboards/${id}`);\n      dispatch(setGcomDashboard(dashboard));\n      dispatch(processInputs(dashboard.json));\n      dispatch(processElements(dashboard.json));\n    } catch (error) {\n      dispatch(fetchFailed());\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.message || error)));\n      }\n    }\n  };\n}\n\nexport function importDashboardJson(dashboard: any): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(setJsonDashboard(dashboard));\n    dispatch(processInputs(dashboard));\n    dispatch(processElements(dashboard));\n  };\n}\n\nfunction processInputs(dashboardJson: any): ThunkResult<void> {\n  return (dispatch) => {\n    if (dashboardJson && dashboardJson.__inputs) {\n      const inputs: any[] = [];\n      dashboardJson.__inputs.forEach((input: any) => {\n        const inputModel: any = {\n          name: input.name,\n          label: input.label,\n          info: input.description,\n          value: input.value,\n          type: input.type,\n          pluginId: input.pluginId,\n          options: [],\n        };\n\n        if (input.type === InputType.DataSource) {\n          getDataSourceOptions(input, inputModel);\n        } else if (!inputModel.info) {\n          inputModel.info = 'Specify a string constant';\n        }\n\n        inputs.push(inputModel);\n      });\n      dispatch(setInputs(inputs));\n    }\n  };\n}\n\nfunction processElements(dashboardJson?: { __elements?: LibraryElementExport[] }): ThunkResult<void> {\n  return async function (dispatch) {\n    if (!dashboardJson || !dashboardJson.__elements) {\n      return;\n    }\n\n    const libraryPanelInputs: LibraryPanelInput[] = [];\n\n    for (const element of dashboardJson.__elements) {\n      if (element.kind !== LibraryElementKind.Panel) {\n        continue;\n      }\n\n      const model = element.model;\n      const { type, description } = model;\n      const { uid, name } = element;\n      const input: LibraryPanelInput = {\n        model: {\n          model,\n          uid,\n          name,\n          version: 0,\n          meta: {},\n          id: 0,\n          type,\n          kind: LibraryElementKind.Panel,\n          description,\n        } as LibraryElementDTO,\n        state: LibraryPanelInputState.New,\n      };\n\n      try {\n        const panelInDb = await getLibraryPanel(uid, true);\n        input.state = LibraryPanelInputState.Exits;\n        input.model = panelInDb;\n      } catch (e: any) {\n        if (e.status !== 404) {\n          throw e;\n        }\n      }\n\n      libraryPanelInputs.push(input);\n    }\n\n    dispatch(setLibraryPanelInputs(libraryPanelInputs));\n  };\n}\n\nexport function clearLoadedDashboard(): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(clearDashboard());\n  };\n}\n\nexport function importDashboard(importDashboardForm: ImportDashboardDTO): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const dashboard = getState().importDashboard.dashboard;\n    const inputs = getState().importDashboard.inputs;\n\n    let inputsToPersist = [] as any[];\n    importDashboardForm.dataSources?.forEach((dataSource: DataSourceInstanceSettings, index: number) => {\n      const input = inputs.dataSources[index];\n      inputsToPersist.push({\n        name: input.name,\n        type: input.type,\n        pluginId: input.pluginId,\n        value: dataSource.uid,\n      });\n    });\n\n    importDashboardForm.constants?.forEach((constant: any, index: number) => {\n      const input = inputs.constants[index];\n\n      inputsToPersist.push({\n        value: constant,\n        name: input.name,\n        type: input.type,\n      });\n    });\n\n    const result = await getBackendSrv().post('api/dashboards/import', {\n      // uid: if user changed it, take the new uid from importDashboardForm,\n      // else read it from original dashboard\n      // by default the uid input is disabled, onSubmit ignores values from disabled inputs\n      dashboard: { ...dashboard, title: importDashboardForm.title, uid: importDashboardForm.uid || dashboard.uid },\n      overwrite: true,\n      inputs: inputsToPersist,\n      folderId: importDashboardForm.folder.id,\n    });\n\n    const dashboardUrl = locationUtil.stripBaseFromUrl(result.importedUrl);\n    locationService.push(dashboardUrl);\n  };\n}\n\nconst getDataSourceOptions = (input: { pluginId: string; pluginName: string }, inputModel: any) => {\n  const sources = getDataSourceSrv().getList({ pluginId: input.pluginId });\n\n  if (sources.length === 0) {\n    inputModel.info = 'No data sources of type ' + input.pluginName + ' found';\n  } else if (!inputModel.info) {\n    inputModel.info = 'Select a ' + input.pluginName + ' data source';\n  }\n};\n\nexport function moveDashboards(dashboardUids: string[], toFolder: FolderInfo) {\n  const tasks = [];\n\n  for (const uid of dashboardUids) {\n    tasks.push(createTask(moveDashboard, true, uid, toFolder));\n  }\n\n  return executeInOrder(tasks).then((result: any) => {\n    return {\n      totalCount: result.length,\n      successCount: result.filter((res: any) => res.succeeded).length,\n      alreadyInFolderCount: result.filter((res: any) => res.alreadyInFolder).length,\n    };\n  });\n}\n\nasync function moveDashboard(uid: string, toFolder: FolderInfo) {\n  const fullDash: DashboardDTO = await getBackendSrv().get(`/api/dashboards/uid/${uid}`);\n\n  if ((!fullDash.meta.folderId && toFolder.id === 0) || fullDash.meta.folderId === toFolder.id) {\n    return { alreadyInFolder: true };\n  }\n\n  const options = {\n    dashboard: fullDash.dashboard,\n    folderId: toFolder.id,\n    overwrite: false,\n  };\n\n  try {\n    await saveDashboard(options);\n    return { succeeded: true };\n  } catch (err) {\n    if (isFetchError(err)) {\n      if (err.data?.status !== 'plugin-dashboard') {\n        return { succeeded: false };\n      }\n\n      err.isHandled = true;\n    }\n    options.overwrite = true;\n\n    try {\n      await saveDashboard(options);\n      return { succeeded: true };\n    } catch (e) {\n      return { succeeded: false };\n    }\n  }\n}\n\nfunction createTask(fn: (...args: any[]) => Promise<any>, ignoreRejections: boolean, ...args: any[]) {\n  return async (result: any) => {\n    try {\n      const res = await fn(...args);\n      return Array.prototype.concat(result, [res]);\n    } catch (err) {\n      if (ignoreRejections) {\n        return result;\n      }\n\n      throw err;\n    }\n  };\n}\n\nexport function deleteFoldersAndDashboards(folderUids: string[], dashboardUids: string[]) {\n  const tasks = [];\n\n  for (const folderUid of folderUids) {\n    tasks.push(createTask(deleteFolder, true, folderUid, true));\n  }\n\n  for (const dashboardUid of dashboardUids) {\n    tasks.push(createTask(deleteDashboard, true, dashboardUid, true));\n  }\n\n  return executeInOrder(tasks);\n}\n\nexport interface SaveDashboardOptions {\n  dashboard: DashboardDataDTO;\n  message?: string;\n  folderId?: number;\n  overwrite?: boolean;\n}\n\nexport function saveDashboard(options: SaveDashboardOptions) {\n  dashboardWatcher.ignoreNextSave();\n\n  return getBackendSrv().post('/api/dashboards/db/', {\n    dashboard: options.dashboard,\n    message: options.message ?? '',\n    overwrite: options.overwrite ?? false,\n    folderId: options.folderId,\n  });\n}\n\nfunction deleteFolder(uid: string, showSuccessAlert: boolean) {\n  return getBackendSrv().request({\n    method: 'DELETE',\n    url: `/api/folders/${uid}?forceDeleteRules=false`,\n    showSuccessAlert: showSuccessAlert,\n  });\n}\n\nexport function createFolder(payload: any) {\n  return getBackendSrv().post('/api/folders', payload);\n}\n\nexport function searchFolders(\n  query: any,\n  permission?: PermissionLevelString,\n  withAccessControl = false\n): Promise<DashboardSearchHit[]> {\n  return getBackendSrv().get('/api/search', {\n    query,\n    type: 'dash-folder',\n    permission,\n    accesscontrol: withAccessControl,\n  });\n}\n\nexport function getFolderById(id: number): Promise<{ id: number; title: string }> {\n  return getBackendSrv().get(`/api/folders/id/${id}`);\n}\n\nexport function deleteDashboard(uid: string, showSuccessAlert: boolean) {\n  return getBackendSrv().request({\n    method: 'DELETE',\n    url: `/api/dashboards/uid/${uid}`,\n    showSuccessAlert: showSuccessAlert,\n  });\n}\n\nfunction executeInOrder(tasks: any[]) {\n  return tasks.reduce((acc, task) => {\n    return Promise.resolve(acc).then(task);\n  }, []);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}