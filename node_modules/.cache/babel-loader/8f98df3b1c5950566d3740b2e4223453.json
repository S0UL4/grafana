{"ast":null,"code":"const _excluded = [\"text\", \"className\", \"experimentId\", \"eventVariant\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { reportExperimentView } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const ProBadge = _ref => {\n  let {\n    text = 'PRO',\n    className,\n    experimentId,\n    eventVariant = ''\n  } = _ref,\n      htmlProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const styles = useStyles2(getStyles);\n  useEffect(() => {\n    if (experimentId) {\n      reportExperimentView(experimentId, 'test', eventVariant);\n    }\n  }, [experimentId, eventVariant]);\n  return /*#__PURE__*/_jsx(\"span\", Object.assign({\n    className: cx(styles.badge, className)\n  }, htmlProps, {\n    children: text\n  }));\n};\n\nconst getStyles = theme => {\n  return {\n    badge: css`\n      margin-left: ${theme.spacing(1.25)};\n      border-radius: ${theme.shape.borderRadius(5)};\n      background-color: ${theme.colors.success.main};\n      padding: ${theme.spacing(0.25, 0.75)};\n      color: white; // use the same color for both themes\n      font-weight: ${theme.typography.fontWeightMedium};\n      font-size: ${theme.typography.pxToRem(10)};\n    `\n  };\n};","map":{"version":3,"names":["css","cx","React","useEffect","reportExperimentView","useStyles2","ProBadge","text","className","experimentId","eventVariant","htmlProps","styles","getStyles","badge","theme","spacing","shape","borderRadius","colors","success","main","typography","fontWeightMedium","pxToRem"],"sources":["/home/soula/grafana/public/app/core/components/Upgrade/ProBadge.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportExperimentView } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface Props extends HTMLAttributes<HTMLSpanElement> {\n  text?: string;\n  experimentId?: string;\n  eventVariant?: string;\n}\n\nexport const ProBadge = ({ text = 'PRO', className, experimentId, eventVariant = '', ...htmlProps }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    if (experimentId) {\n      reportExperimentView(experimentId, 'test', eventVariant);\n    }\n  }, [experimentId, eventVariant]);\n\n  return (\n    <span className={cx(styles.badge, className)} {...htmlProps}>\n      {text}\n    </span>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    badge: css`\n      margin-left: ${theme.spacing(1.25)};\n      border-radius: ${theme.shape.borderRadius(5)};\n      background-color: ${theme.colors.success.main};\n      padding: ${theme.spacing(0.25, 0.75)};\n      color: white; // use the same color for both themes\n      font-weight: ${theme.typography.fontWeightMedium};\n      font-size: ${theme.typography.pxToRem(10)};\n    `,\n  };\n};\n"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,IAAgCC,SAAhC,QAAiD,OAAjD;AAGA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAQA,OAAO,MAAMC,QAAQ,GAAG,QAAuF;EAAA,IAAtF;IAAEC,IAAI,GAAG,KAAT;IAAgBC,SAAhB;IAA2BC,YAA3B;IAAyCC,YAAY,GAAG;EAAxD,CAAsF;EAAA,IAAvBC,SAAuB;;EAC7G,MAAMC,MAAM,GAAGP,UAAU,CAACQ,SAAD,CAAzB;EAEAV,SAAS,CAAC,MAAM;IACd,IAAIM,YAAJ,EAAkB;MAChBL,oBAAoB,CAACK,YAAD,EAAe,MAAf,EAAuBC,YAAvB,CAApB;IACD;EACF,CAJQ,EAIN,CAACD,YAAD,EAAeC,YAAf,CAJM,CAAT;EAMA,oBACE;IAAM,SAAS,EAAET,EAAE,CAACW,MAAM,CAACE,KAAR,EAAeN,SAAf;EAAnB,GAAkDG,SAAlD;IAAA,UACGJ;EADH,GADF;AAKD,CAdM;;AAgBP,MAAMM,SAAS,GAAIE,KAAD,IAA0B;EAC1C,OAAO;IACLD,KAAK,EAAEd,GAAI;AACf,qBAAqBe,KAAK,CAACC,OAAN,CAAc,IAAd,CAAoB;AACzC,uBAAuBD,KAAK,CAACE,KAAN,CAAYC,YAAZ,CAAyB,CAAzB,CAA4B;AACnD,0BAA0BH,KAAK,CAACI,MAAN,CAAaC,OAAb,CAAqBC,IAAK;AACpD,iBAAiBN,KAAK,CAACC,OAAN,CAAc,IAAd,EAAoB,IAApB,CAA0B;AAC3C;AACA,qBAAqBD,KAAK,CAACO,UAAN,CAAiBC,gBAAiB;AACvD,mBAAmBR,KAAK,CAACO,UAAN,CAAiBE,OAAjB,CAAyB,EAAzB,CAA6B;AAChD;EATS,CAAP;AAWD,CAZD"},"metadata":{},"sourceType":"module"}