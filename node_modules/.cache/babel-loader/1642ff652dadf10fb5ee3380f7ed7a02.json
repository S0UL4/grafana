{"ast":null,"code":"var _Icon, _Icon2, _Icon3, _Icon4, _Icon5;\n\nimport React from 'react';\nimport { dateTime, mapInternalLinkToExplore, rangeUtil } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { Icon } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getFieldLinksForExplore } from '../utils/links';\n/**\n * This is a factory for the link creator. It returns the function mainly so it can return undefined in which case\n * the trace view won't create any links and to capture the datasource and split function making it easier to memoize\n * with useMemo.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function createSpanLinkFactory({\n  splitOpenFn,\n  traceToLogsOptions,\n  traceToMetricsOptions,\n  dataFrame,\n  createFocusSpanLink\n}) {\n  if (!dataFrame || dataFrame.fields.length === 1 || !dataFrame.fields.some(f => {\n    var _f$config$links;\n\n    return Boolean((_f$config$links = f.config.links) === null || _f$config$links === void 0 ? void 0 : _f$config$links.length);\n  })) {\n    // if the dataframe contains just a single blob of data (legacy format) or does not have any links configured,\n    // let's try to use the old legacy path.\n    return legacyCreateSpanLinkFactory(splitOpenFn, traceToLogsOptions, traceToMetricsOptions, createFocusSpanLink);\n  } else {\n    return function SpanLink(span) {\n      // We should be here only if there are some links in the dataframe\n      const field = dataFrame.fields.find(f => {\n        var _f$config$links2;\n\n        return Boolean((_f$config$links2 = f.config.links) === null || _f$config$links2 === void 0 ? void 0 : _f$config$links2.length);\n      });\n\n      try {\n        const links = getFieldLinksForExplore({\n          field,\n          rowIndex: span.dataFrameRowIndex,\n          splitOpenFn,\n          range: getTimeRangeFromSpan(span),\n          dataFrame\n        });\n        return {\n          logLinks: [{\n            href: links[0].href,\n            onClick: links[0].onClick,\n            content: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n              name: \"gf-logs\",\n              title: \"Explore the logs for this in split view\"\n            }))\n          }]\n        };\n      } catch (error) {\n        // It's fairly easy to crash here for example if data source defines wrong interpolation in the data link\n        console.error(error);\n        return undefined;\n      }\n    };\n  }\n}\n\nfunction legacyCreateSpanLinkFactory(splitOpenFn, traceToLogsOptions, traceToMetricsOptions, createFocusSpanLink) {\n  var _logsDataSourceSettin;\n\n  let logsDataSourceSettings;\n  const isSplunkDS = ((_logsDataSourceSettin = logsDataSourceSettings) === null || _logsDataSourceSettin === void 0 ? void 0 : _logsDataSourceSettin.type) === 'grafana-splunk-datasource';\n\n  if (traceToLogsOptions !== null && traceToLogsOptions !== void 0 && traceToLogsOptions.datasourceUid) {\n    logsDataSourceSettings = getDatasourceSrv().getInstanceSettings(traceToLogsOptions.datasourceUid);\n  }\n\n  let metricsDataSourceSettings;\n\n  if (traceToMetricsOptions !== null && traceToMetricsOptions !== void 0 && traceToMetricsOptions.datasourceUid) {\n    metricsDataSourceSettings = getDatasourceSrv().getInstanceSettings(traceToMetricsOptions.datasourceUid);\n  }\n\n  return function SpanLink(span) {\n    var _logsDataSourceSettin2;\n\n    const links = {\n      traceLinks: []\n    }; // This is reusing existing code from derived fields which may not be ideal match so some data is a bit faked at\n    // the moment. Issue is that the trace itself isn't clearly mapped to dataFrame (right now it's just a json blob\n    // inside a single field) so the dataLinks as config of that dataFrame abstraction breaks down a bit and we do\n    // it manually here instead of leaving it for the data source to supply the config.\n\n    let dataLink = {}; // Get logs link\n\n    if (logsDataSourceSettings && traceToLogsOptions) {\n      switch ((_logsDataSourceSettin2 = logsDataSourceSettings) === null || _logsDataSourceSettin2 === void 0 ? void 0 : _logsDataSourceSettin2.type) {\n        case 'loki':\n          dataLink = getLinkForLoki(span, traceToLogsOptions, logsDataSourceSettings);\n          break;\n\n        case 'grafana-splunk-datasource':\n          dataLink = getLinkForSplunk(span, traceToLogsOptions, logsDataSourceSettings);\n          break;\n      }\n\n      if (dataLink) {\n        const link = mapInternalLinkToExplore({\n          link: dataLink,\n          internalLink: dataLink.internal,\n          scopedVars: {},\n          range: getTimeRangeFromSpan(span, {\n            startMs: traceToLogsOptions.spanStartTimeShift ? rangeUtil.intervalToMs(traceToLogsOptions.spanStartTimeShift) : 0,\n            endMs: traceToLogsOptions.spanEndTimeShift ? rangeUtil.intervalToMs(traceToLogsOptions.spanEndTimeShift) : 0\n          }, isSplunkDS),\n          field: {},\n          onClickFn: splitOpenFn,\n          replaceVariables: getTemplateSrv().replace.bind(getTemplateSrv())\n        });\n        links.logLinks = [{\n          href: link.href,\n          onClick: link.onClick,\n          content: _Icon2 || (_Icon2 = /*#__PURE__*/_jsx(Icon, {\n            name: \"gf-logs\",\n            title: \"Explore the logs for this in split view\"\n          }))\n        }];\n      }\n    } // Get metrics links\n\n\n    if (metricsDataSourceSettings && traceToMetricsOptions !== null && traceToMetricsOptions !== void 0 && traceToMetricsOptions.queries) {\n      links.metricLinks = [];\n\n      for (const query of traceToMetricsOptions.queries) {\n        const expr = buildMetricsQuery(query, traceToMetricsOptions === null || traceToMetricsOptions === void 0 ? void 0 : traceToMetricsOptions.tags, span);\n        const dataLink = {\n          title: metricsDataSourceSettings.name,\n          url: '',\n          internal: {\n            datasourceUid: metricsDataSourceSettings.uid,\n            datasourceName: metricsDataSourceSettings.name,\n            query: {\n              expr,\n              refId: 'A'\n            }\n          }\n        };\n        const link = mapInternalLinkToExplore({\n          link: dataLink,\n          internalLink: dataLink.internal,\n          scopedVars: {},\n          range: getTimeRangeFromSpan(span, {\n            startMs: 0,\n            endMs: 0\n          }),\n          field: {},\n          onClickFn: splitOpenFn,\n          replaceVariables: getTemplateSrv().replace.bind(getTemplateSrv())\n        });\n        links.metricLinks.push({\n          title: query === null || query === void 0 ? void 0 : query.name,\n          href: link.href,\n          onClick: link.onClick,\n          content: _Icon3 || (_Icon3 = /*#__PURE__*/_jsx(Icon, {\n            name: \"chart-line\",\n            title: \"Explore metrics for this span\"\n          }))\n        });\n      }\n    } // Get trace links\n\n\n    if (span.references && createFocusSpanLink) {\n      for (const reference of span.references) {\n        // Ignore parent-child links\n        if (reference.refType === 'CHILD_OF') {\n          continue;\n        }\n\n        const link = createFocusSpanLink(reference.traceID, reference.spanID);\n        links.traceLinks.push({\n          href: link.href,\n          title: reference.span ? reference.span.operationName : 'View linked span',\n          content: _Icon4 || (_Icon4 = /*#__PURE__*/_jsx(Icon, {\n            name: \"link\",\n            title: \"View linked span\"\n          })),\n          onClick: link.onClick\n        });\n      }\n    }\n\n    if (span.subsidiarilyReferencedBy && createFocusSpanLink) {\n      for (const reference of span.subsidiarilyReferencedBy) {\n        const link = createFocusSpanLink(reference.traceID, reference.spanID);\n        links.traceLinks.push({\n          href: link.href,\n          title: reference.span ? reference.span.operationName : 'View linked span',\n          content: _Icon5 || (_Icon5 = /*#__PURE__*/_jsx(Icon, {\n            name: \"link\",\n            title: \"View linked span\"\n          })),\n          onClick: link.onClick\n        });\n      }\n    }\n\n    return links;\n  };\n}\n/**\n * Default keys to use when there are no configured tags.\n */\n\n\nconst defaultKeys = ['cluster', 'hostname', 'namespace', 'pod'];\n\nfunction getLinkForLoki(span, options, dataSourceSettings) {\n  const {\n    tags: keys,\n    filterByTraceID,\n    filterBySpanID,\n    mapTagNamesEnabled,\n    mappedTags\n  } = options; // In order, try to use mapped tags -> tags -> default tags\n\n  const keysToCheck = mapTagNamesEnabled && mappedTags !== null && mappedTags !== void 0 && mappedTags.length ? mappedTags : keys !== null && keys !== void 0 && keys.length ? keys : defaultKeys; // Build tag portion of query\n\n  const tags = [...span.process.tags, ...span.tags].reduce((acc, tag) => {\n    if (mapTagNamesEnabled) {\n      const keyValue = keysToCheck.find(keyValue => keyValue.key === tag.key);\n\n      if (keyValue) {\n        acc.push(`${keyValue.value ? keyValue.value : keyValue.key}=\"${tag.value}\"`);\n      }\n    } else {\n      if (keysToCheck.includes(tag.key)) {\n        acc.push(`${tag.key}=\"${tag.value}\"`);\n      }\n    }\n\n    return acc;\n  }, []); // If no tags found, return undefined to prevent an invalid Loki query\n\n  if (!tags.length) {\n    return undefined;\n  }\n\n  let expr = `{${tags.join(', ')}}`;\n\n  if (filterByTraceID && span.traceID) {\n    expr += ` |=\"${span.traceID}\"`;\n  }\n\n  if (filterBySpanID && span.spanID) {\n    expr += ` |=\"${span.spanID}\"`;\n  }\n\n  const dataLink = {\n    title: dataSourceSettings.name,\n    url: '',\n    internal: {\n      datasourceUid: dataSourceSettings.uid,\n      datasourceName: dataSourceSettings.name,\n      query: {\n        expr: expr,\n        refId: ''\n      }\n    }\n  };\n  return dataLink;\n}\n\nfunction getLinkForSplunk(span, options, dataSourceSettings) {\n  const {\n    tags: keys,\n    filterByTraceID,\n    filterBySpanID,\n    mapTagNamesEnabled,\n    mappedTags\n  } = options; // In order, try to use mapped tags -> tags -> default tags\n\n  const keysToCheck = mapTagNamesEnabled && mappedTags !== null && mappedTags !== void 0 && mappedTags.length ? mappedTags : keys !== null && keys !== void 0 && keys.length ? keys : defaultKeys; // Build tag portion of query\n\n  const tags = [...span.process.tags, ...span.tags].reduce((acc, tag) => {\n    if (mapTagNamesEnabled) {\n      const keyValue = keysToCheck.find(keyValue => keyValue.key === tag.key);\n\n      if (keyValue) {\n        acc.push(`${keyValue.value ? keyValue.value : keyValue.key}=\"${tag.value}\"`);\n      }\n    } else {\n      if (keysToCheck.includes(tag.key)) {\n        acc.push(`${tag.key}=\"${tag.value}\"`);\n      }\n    }\n\n    return acc;\n  }, []);\n  let query = '';\n\n  if (tags.length > 0) {\n    query += `${tags.join(' ')}`;\n  }\n\n  if (filterByTraceID && span.traceID) {\n    query += ` \"${span.traceID}\"`;\n  }\n\n  if (filterBySpanID && span.spanID) {\n    query += ` \"${span.spanID}\"`;\n  }\n\n  const dataLink = {\n    title: dataSourceSettings.name,\n    url: '',\n    internal: {\n      datasourceUid: dataSourceSettings.uid,\n      datasourceName: dataSourceSettings.name,\n      query: {\n        query: query,\n        refId: ''\n      }\n    }\n  };\n  return dataLink;\n}\n/**\n * Gets a time range from the span.\n */\n\n\nfunction getTimeRangeFromSpan(span, timeShift = {\n  startMs: 0,\n  endMs: 0\n}, isSplunkDS = false) {\n  const adjustedStartTime = Math.floor(span.startTime / 1000 + timeShift.startMs);\n  const from = dateTime(adjustedStartTime);\n  const spanEndMs = (span.startTime + span.duration) / 1000;\n  let adjustedEndTime = Math.floor(spanEndMs + timeShift.endMs); // Splunk requires a time interval of >= 1s, rather than >=1ms like Loki timerange in below elseif block\n\n  if (isSplunkDS && adjustedEndTime - adjustedStartTime < 1000) {\n    adjustedEndTime = adjustedStartTime + 1000;\n  } else if (adjustedStartTime === adjustedEndTime) {\n    // Because we can only pass milliseconds in the url we need to check if they equal.\n    // We need end time to be later than start time\n    adjustedEndTime++;\n  }\n\n  const to = dateTime(adjustedEndTime); // Beware that public/app/features/explore/state/main.ts SplitOpen fn uses the range from here. No matter what is in the url.\n\n  return {\n    from,\n    to,\n    raw: {\n      from,\n      to\n    }\n  };\n} // Interpolates span attributes into trace to metric query, or returns default query\n\n\nfunction buildMetricsQuery(query, tags = [], span) {\n  if (!query.query) {\n    return `histogram_quantile(0.5, sum(rate(tempo_spanmetrics_latency_bucket{operation=\"${span.operationName}\"}[5m])) by (le))`;\n  }\n\n  let expr = query.query;\n\n  if (tags.length && expr.indexOf('$__tags') !== -1) {\n    const spanTags = [...span.process.tags, ...span.tags];\n    const labels = tags.reduce((acc, tag) => {\n      var _spanTags$find;\n\n      const tagValue = (_spanTags$find = spanTags.find(t => t.key === tag.key)) === null || _spanTags$find === void 0 ? void 0 : _spanTags$find.value;\n\n      if (tagValue) {\n        acc.push(`${tag.value ? tag.value : tag.key}=\"${tagValue}\"`);\n      }\n\n      return acc;\n    }, []);\n    const labelsQuery = labels === null || labels === void 0 ? void 0 : labels.join(', ');\n    expr = expr.replace('$__tags', labelsQuery);\n  }\n\n  return expr;\n}","map":{"version":3,"names":["React","dateTime","mapInternalLinkToExplore","rangeUtil","getTemplateSrv","Icon","getDatasourceSrv","getFieldLinksForExplore","createSpanLinkFactory","splitOpenFn","traceToLogsOptions","traceToMetricsOptions","dataFrame","createFocusSpanLink","fields","length","some","f","Boolean","config","links","legacyCreateSpanLinkFactory","SpanLink","span","field","find","rowIndex","dataFrameRowIndex","range","getTimeRangeFromSpan","logLinks","href","onClick","content","error","console","undefined","logsDataSourceSettings","isSplunkDS","type","datasourceUid","getInstanceSettings","metricsDataSourceSettings","traceLinks","dataLink","getLinkForLoki","getLinkForSplunk","link","internalLink","internal","scopedVars","startMs","spanStartTimeShift","intervalToMs","endMs","spanEndTimeShift","onClickFn","replaceVariables","replace","bind","queries","metricLinks","query","expr","buildMetricsQuery","tags","title","name","url","uid","datasourceName","refId","push","references","reference","refType","traceID","spanID","operationName","subsidiarilyReferencedBy","defaultKeys","options","dataSourceSettings","keys","filterByTraceID","filterBySpanID","mapTagNamesEnabled","mappedTags","keysToCheck","process","reduce","acc","tag","keyValue","key","value","includes","join","timeShift","adjustedStartTime","Math","floor","startTime","from","spanEndMs","duration","adjustedEndTime","to","raw","indexOf","spanTags","labels","tagValue","t","labelsQuery"],"sources":["/home/soula/grafana/public/app/features/explore/TraceView/createSpanLink.tsx"],"sourcesContent":["import { SpanLinks } from '@jaegertracing/jaeger-ui-components/src/types/links';\nimport React from 'react';\n\nimport {\n  DataFrame,\n  DataLink,\n  DataQuery,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  dateTime,\n  Field,\n  KeyValue,\n  LinkModel,\n  mapInternalLinkToExplore,\n  rangeUtil,\n  SplitOpen,\n  TimeRange,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { Icon } from '@grafana/ui';\nimport { SpanLinkFunc, TraceSpan } from '@jaegertracing/jaeger-ui-components';\nimport { TraceToLogsOptions } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { TraceToMetricQuery, TraceToMetricsOptions } from 'app/core/components/TraceToMetrics/TraceToMetricsSettings';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\n\nimport { LokiQuery } from '../../../plugins/datasource/loki/types';\nimport { getFieldLinksForExplore } from '../utils/links';\n\n/**\n * This is a factory for the link creator. It returns the function mainly so it can return undefined in which case\n * the trace view won't create any links and to capture the datasource and split function making it easier to memoize\n * with useMemo.\n */\nexport function createSpanLinkFactory({\n  splitOpenFn,\n  traceToLogsOptions,\n  traceToMetricsOptions,\n  dataFrame,\n  createFocusSpanLink,\n}: {\n  splitOpenFn: SplitOpen;\n  traceToLogsOptions?: TraceToLogsOptions;\n  traceToMetricsOptions?: TraceToMetricsOptions;\n  dataFrame?: DataFrame;\n  createFocusSpanLink?: (traceId: string, spanId: string) => LinkModel<Field>;\n}): SpanLinkFunc | undefined {\n  if (!dataFrame || dataFrame.fields.length === 1 || !dataFrame.fields.some((f) => Boolean(f.config.links?.length))) {\n    // if the dataframe contains just a single blob of data (legacy format) or does not have any links configured,\n    // let's try to use the old legacy path.\n    return legacyCreateSpanLinkFactory(splitOpenFn, traceToLogsOptions, traceToMetricsOptions, createFocusSpanLink);\n  } else {\n    return function SpanLink(span: TraceSpan): SpanLinks | undefined {\n      // We should be here only if there are some links in the dataframe\n      const field = dataFrame.fields.find((f) => Boolean(f.config.links?.length))!;\n      try {\n        const links = getFieldLinksForExplore({\n          field,\n          rowIndex: span.dataFrameRowIndex!,\n          splitOpenFn,\n          range: getTimeRangeFromSpan(span),\n          dataFrame,\n        });\n\n        return {\n          logLinks: [\n            {\n              href: links[0].href,\n              onClick: links[0].onClick,\n              content: <Icon name=\"gf-logs\" title=\"Explore the logs for this in split view\" />,\n            },\n          ],\n        };\n      } catch (error) {\n        // It's fairly easy to crash here for example if data source defines wrong interpolation in the data link\n        console.error(error);\n        return undefined;\n      }\n    };\n  }\n}\n\nfunction legacyCreateSpanLinkFactory(\n  splitOpenFn: SplitOpen,\n  traceToLogsOptions?: TraceToLogsOptions,\n  traceToMetricsOptions?: TraceToMetricsOptions,\n  createFocusSpanLink?: (traceId: string, spanId: string) => LinkModel<Field>\n) {\n  let logsDataSourceSettings: DataSourceInstanceSettings<DataSourceJsonData> | undefined;\n  const isSplunkDS = logsDataSourceSettings?.type === 'grafana-splunk-datasource';\n  if (traceToLogsOptions?.datasourceUid) {\n    logsDataSourceSettings = getDatasourceSrv().getInstanceSettings(traceToLogsOptions.datasourceUid);\n  }\n\n  let metricsDataSourceSettings: DataSourceInstanceSettings<DataSourceJsonData> | undefined;\n  if (traceToMetricsOptions?.datasourceUid) {\n    metricsDataSourceSettings = getDatasourceSrv().getInstanceSettings(traceToMetricsOptions.datasourceUid);\n  }\n\n  return function SpanLink(span: TraceSpan): SpanLinks {\n    const links: SpanLinks = { traceLinks: [] };\n    // This is reusing existing code from derived fields which may not be ideal match so some data is a bit faked at\n    // the moment. Issue is that the trace itself isn't clearly mapped to dataFrame (right now it's just a json blob\n    // inside a single field) so the dataLinks as config of that dataFrame abstraction breaks down a bit and we do\n    // it manually here instead of leaving it for the data source to supply the config.\n    let dataLink: DataLink<LokiQuery | DataQuery> | undefined = {} as DataLink<LokiQuery | DataQuery> | undefined;\n\n    // Get logs link\n    if (logsDataSourceSettings && traceToLogsOptions) {\n      switch (logsDataSourceSettings?.type) {\n        case 'loki':\n          dataLink = getLinkForLoki(span, traceToLogsOptions, logsDataSourceSettings);\n          break;\n        case 'grafana-splunk-datasource':\n          dataLink = getLinkForSplunk(span, traceToLogsOptions, logsDataSourceSettings);\n          break;\n      }\n\n      if (dataLink) {\n        const link = mapInternalLinkToExplore({\n          link: dataLink,\n          internalLink: dataLink.internal!,\n          scopedVars: {},\n          range: getTimeRangeFromSpan(\n            span,\n            {\n              startMs: traceToLogsOptions.spanStartTimeShift\n                ? rangeUtil.intervalToMs(traceToLogsOptions.spanStartTimeShift)\n                : 0,\n              endMs: traceToLogsOptions.spanEndTimeShift\n                ? rangeUtil.intervalToMs(traceToLogsOptions.spanEndTimeShift)\n                : 0,\n            },\n            isSplunkDS\n          ),\n          field: {} as Field,\n          onClickFn: splitOpenFn,\n          replaceVariables: getTemplateSrv().replace.bind(getTemplateSrv()),\n        });\n\n        links.logLinks = [\n          {\n            href: link.href,\n            onClick: link.onClick,\n            content: <Icon name=\"gf-logs\" title=\"Explore the logs for this in split view\" />,\n          },\n        ];\n      }\n    }\n\n    // Get metrics links\n    if (metricsDataSourceSettings && traceToMetricsOptions?.queries) {\n      links.metricLinks = [];\n      for (const query of traceToMetricsOptions.queries) {\n        const expr = buildMetricsQuery(query, traceToMetricsOptions?.tags, span);\n        const dataLink: DataLink<PromQuery> = {\n          title: metricsDataSourceSettings.name,\n          url: '',\n          internal: {\n            datasourceUid: metricsDataSourceSettings.uid,\n            datasourceName: metricsDataSourceSettings.name,\n            query: {\n              expr,\n              refId: 'A',\n            },\n          },\n        };\n\n        const link = mapInternalLinkToExplore({\n          link: dataLink,\n          internalLink: dataLink.internal!,\n          scopedVars: {},\n          range: getTimeRangeFromSpan(span, {\n            startMs: 0,\n            endMs: 0,\n          }),\n          field: {} as Field,\n          onClickFn: splitOpenFn,\n          replaceVariables: getTemplateSrv().replace.bind(getTemplateSrv()),\n        });\n\n        links.metricLinks.push({\n          title: query?.name,\n          href: link.href,\n          onClick: link.onClick,\n          content: <Icon name=\"chart-line\" title=\"Explore metrics for this span\" />,\n        });\n      }\n    }\n\n    // Get trace links\n    if (span.references && createFocusSpanLink) {\n      for (const reference of span.references) {\n        // Ignore parent-child links\n        if (reference.refType === 'CHILD_OF') {\n          continue;\n        }\n\n        const link = createFocusSpanLink(reference.traceID, reference.spanID);\n\n        links.traceLinks!.push({\n          href: link.href,\n          title: reference.span ? reference.span.operationName : 'View linked span',\n          content: <Icon name=\"link\" title=\"View linked span\" />,\n          onClick: link.onClick,\n        });\n      }\n    }\n\n    if (span.subsidiarilyReferencedBy && createFocusSpanLink) {\n      for (const reference of span.subsidiarilyReferencedBy) {\n        const link = createFocusSpanLink(reference.traceID, reference.spanID);\n\n        links.traceLinks!.push({\n          href: link.href,\n          title: reference.span ? reference.span.operationName : 'View linked span',\n          content: <Icon name=\"link\" title=\"View linked span\" />,\n          onClick: link.onClick,\n        });\n      }\n    }\n\n    return links;\n  };\n}\n\n/**\n * Default keys to use when there are no configured tags.\n */\nconst defaultKeys = ['cluster', 'hostname', 'namespace', 'pod'];\nfunction getLinkForLoki(span: TraceSpan, options: TraceToLogsOptions, dataSourceSettings: DataSourceInstanceSettings) {\n  const { tags: keys, filterByTraceID, filterBySpanID, mapTagNamesEnabled, mappedTags } = options;\n\n  // In order, try to use mapped tags -> tags -> default tags\n  const keysToCheck = mapTagNamesEnabled && mappedTags?.length ? mappedTags : keys?.length ? keys : defaultKeys;\n  // Build tag portion of query\n  const tags = [...span.process.tags, ...span.tags].reduce((acc, tag) => {\n    if (mapTagNamesEnabled) {\n      const keyValue = (keysToCheck as KeyValue[]).find((keyValue: KeyValue) => keyValue.key === tag.key);\n      if (keyValue) {\n        acc.push(`${keyValue.value ? keyValue.value : keyValue.key}=\"${tag.value}\"`);\n      }\n    } else {\n      if ((keysToCheck as string[]).includes(tag.key)) {\n        acc.push(`${tag.key}=\"${tag.value}\"`);\n      }\n    }\n    return acc;\n  }, [] as string[]);\n\n  // If no tags found, return undefined to prevent an invalid Loki query\n  if (!tags.length) {\n    return undefined;\n  }\n  let expr = `{${tags.join(', ')}}`;\n  if (filterByTraceID && span.traceID) {\n    expr += ` |=\"${span.traceID}\"`;\n  }\n  if (filterBySpanID && span.spanID) {\n    expr += ` |=\"${span.spanID}\"`;\n  }\n\n  const dataLink: DataLink<LokiQuery> = {\n    title: dataSourceSettings.name,\n    url: '',\n    internal: {\n      datasourceUid: dataSourceSettings.uid,\n      datasourceName: dataSourceSettings.name,\n      query: {\n        expr: expr,\n        refId: '',\n      },\n    },\n  };\n\n  return dataLink;\n}\n\nfunction getLinkForSplunk(\n  span: TraceSpan,\n  options: TraceToLogsOptions,\n  dataSourceSettings: DataSourceInstanceSettings\n) {\n  const { tags: keys, filterByTraceID, filterBySpanID, mapTagNamesEnabled, mappedTags } = options;\n\n  // In order, try to use mapped tags -> tags -> default tags\n  const keysToCheck = mapTagNamesEnabled && mappedTags?.length ? mappedTags : keys?.length ? keys : defaultKeys;\n  // Build tag portion of query\n  const tags = [...span.process.tags, ...span.tags].reduce((acc, tag) => {\n    if (mapTagNamesEnabled) {\n      const keyValue = (keysToCheck as KeyValue[]).find((keyValue: KeyValue) => keyValue.key === tag.key);\n      if (keyValue) {\n        acc.push(`${keyValue.value ? keyValue.value : keyValue.key}=\"${tag.value}\"`);\n      }\n    } else {\n      if ((keysToCheck as string[]).includes(tag.key)) {\n        acc.push(`${tag.key}=\"${tag.value}\"`);\n      }\n    }\n    return acc;\n  }, [] as string[]);\n\n  let query = '';\n  if (tags.length > 0) {\n    query += `${tags.join(' ')}`;\n  }\n  if (filterByTraceID && span.traceID) {\n    query += ` \"${span.traceID}\"`;\n  }\n  if (filterBySpanID && span.spanID) {\n    query += ` \"${span.spanID}\"`;\n  }\n\n  const dataLink: DataLink<DataQuery> = {\n    title: dataSourceSettings.name,\n    url: '',\n    internal: {\n      datasourceUid: dataSourceSettings.uid,\n      datasourceName: dataSourceSettings.name,\n      query: {\n        query: query,\n        refId: '',\n      },\n    },\n  } as DataLink<DataQuery>;\n\n  return dataLink;\n}\n\n/**\n * Gets a time range from the span.\n */\nfunction getTimeRangeFromSpan(\n  span: TraceSpan,\n  timeShift: { startMs: number; endMs: number } = { startMs: 0, endMs: 0 },\n  isSplunkDS = false\n): TimeRange {\n  const adjustedStartTime = Math.floor(span.startTime / 1000 + timeShift.startMs);\n  const from = dateTime(adjustedStartTime);\n  const spanEndMs = (span.startTime + span.duration) / 1000;\n  let adjustedEndTime = Math.floor(spanEndMs + timeShift.endMs);\n\n  // Splunk requires a time interval of >= 1s, rather than >=1ms like Loki timerange in below elseif block\n  if (isSplunkDS && adjustedEndTime - adjustedStartTime < 1000) {\n    adjustedEndTime = adjustedStartTime + 1000;\n  } else if (adjustedStartTime === adjustedEndTime) {\n    // Because we can only pass milliseconds in the url we need to check if they equal.\n    // We need end time to be later than start time\n    adjustedEndTime++;\n  }\n\n  const to = dateTime(adjustedEndTime);\n\n  // Beware that public/app/features/explore/state/main.ts SplitOpen fn uses the range from here. No matter what is in the url.\n  return {\n    from,\n    to,\n    raw: {\n      from,\n      to,\n    },\n  };\n}\n\n// Interpolates span attributes into trace to metric query, or returns default query\nfunction buildMetricsQuery(query: TraceToMetricQuery, tags: Array<KeyValue<string>> = [], span: TraceSpan): string {\n  if (!query.query) {\n    return `histogram_quantile(0.5, sum(rate(tempo_spanmetrics_latency_bucket{operation=\"${span.operationName}\"}[5m])) by (le))`;\n  }\n\n  let expr = query.query;\n  if (tags.length && expr.indexOf('$__tags') !== -1) {\n    const spanTags = [...span.process.tags, ...span.tags];\n    const labels = tags.reduce((acc, tag) => {\n      const tagValue = spanTags.find((t) => t.key === tag.key)?.value;\n      if (tagValue) {\n        acc.push(`${tag.value ? tag.value : tag.key}=\"${tagValue}\"`);\n      }\n      return acc;\n    }, [] as string[]);\n\n    const labelsQuery = labels?.join(', ');\n    expr = expr.replace('$__tags', labelsQuery);\n  }\n\n  return expr;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}