{"ast":null,"code":"const _excluded = [\"hide\", \"refId\", \"datasource\", \"key\", \"queryType\", \"maxLines\", \"metric\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { toOption } from '@grafana/data';\nimport { EditorRows } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Button, Select } from '@grafana/ui';\nimport { QUERY_TYPES, SELECT_WIDTH } from '../constants';\nimport { EditorMode, QueryType } from '../types';\nimport { MetricQueryEditor as ExperimentalMetricQueryEditor } from './Experimental/MetricQueryEditor';\nimport { QueryHeader } from './Experimental/QueryHeader';\nimport { defaultQuery } from './MetricQueryEditor';\nimport { defaultQuery as defaultSLOQuery } from './SLO/SLOQueryEditor';\nimport { MetricQueryEditor, QueryEditorRow, SLOQueryEditor } from './';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class QueryEditor extends PureComponent {\n  async UNSAFE_componentWillMount() {\n    const {\n      datasource,\n      query\n    } = this.props; // Unfortunately, migrations like this need to go UNSAFE_componentWillMount. As soon as there's\n    // migration hook for this module.ts, we can do the migrations there instead.\n\n    if (!this.props.query.hasOwnProperty('metricQuery')) {\n      const _ref = this.props.query,\n            metricQuery = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      this.props.query.metricQuery = metricQuery;\n    }\n\n    if (!this.props.query.hasOwnProperty('queryType')) {\n      this.props.query.queryType = QueryType.METRICS;\n    }\n\n    await datasource.ensureGCEDefaultProject();\n\n    if (!query.metricQuery.projectName) {\n      this.props.query.metricQuery.projectName = datasource.getDefaultProject();\n    }\n  }\n\n  onQueryChange(prop, value) {\n    this.props.onChange(Object.assign({}, this.props.query, {\n      [prop]: value\n    }));\n    this.props.onRunQuery();\n  }\n\n  render() {\n    var _this$props$data, _this$props$data2, _meta$custom;\n\n    const {\n      datasource,\n      query,\n      onRunQuery,\n      onChange\n    } = this.props;\n    const metricQuery = Object.assign({}, defaultQuery(datasource), query.metricQuery);\n    const sloQuery = Object.assign({}, defaultSLOQuery(datasource), query.sloQuery);\n    const queryType = query.queryType || QueryType.METRICS;\n    const meta = (_this$props$data = this.props.data) !== null && _this$props$data !== void 0 && _this$props$data.series.length ? (_this$props$data2 = this.props.data) === null || _this$props$data2 === void 0 ? void 0 : _this$props$data2.series[0].meta : {};\n    const customMetaData = (_meta$custom = meta === null || meta === void 0 ? void 0 : meta.custom) !== null && _meta$custom !== void 0 ? _meta$custom : {};\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: datasource.getVariables().map(toOption)\n    };\n    return config.featureToggles.cloudMonitoringExperimentalUI ? /*#__PURE__*/_jsxs(EditorRows, {\n      children: [/*#__PURE__*/_jsx(QueryHeader, {\n        query: query,\n        metricQuery: metricQuery,\n        sloQuery: sloQuery,\n        onChange: onChange,\n        onRunQuery: onRunQuery\n      }), queryType === QueryType.METRICS && /*#__PURE__*/_jsx(ExperimentalMetricQueryEditor, {\n        refId: query.refId,\n        variableOptionGroup: variableOptionGroup,\n        customMetaData: customMetaData,\n        onChange: metricQuery => {\n          this.props.onChange(Object.assign({}, this.props.query, {\n            metricQuery\n          }));\n        },\n        onRunQuery: onRunQuery,\n        datasource: datasource,\n        query: metricQuery\n      }), queryType === QueryType.SLO && /*#__PURE__*/_jsx(SLOQueryEditor, {\n        refId: query.refId,\n        variableOptionGroup: variableOptionGroup,\n        customMetaData: customMetaData,\n        onChange: query => this.onQueryChange('sloQuery', query),\n        onRunQuery: onRunQuery,\n        datasource: datasource,\n        query: sloQuery\n      })]\n    }) : /*#__PURE__*/_jsxs(EditorRows, {\n      children: [/*#__PURE__*/_jsx(QueryEditorRow, {\n        label: \"Query type\",\n        fillComponent: query.queryType !== QueryType.SLO && /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          className: css`\n                  margin-left: auto;\n                `,\n          icon: \"edit\",\n          onClick: () => this.onQueryChange('metricQuery', Object.assign({}, metricQuery, {\n            editorMode: metricQuery.editorMode === EditorMode.MQL ? EditorMode.Visual : EditorMode.MQL\n          })),\n          children: metricQuery.editorMode === EditorMode.MQL ? 'Switch to builder' : 'Edit MQL'\n        }),\n        htmlFor: `${query.refId}-query-type`,\n        children: /*#__PURE__*/_jsx(Select, {\n          width: SELECT_WIDTH,\n          value: queryType,\n          options: QUERY_TYPES,\n          onChange: ({\n            value\n          }) => {\n            onChange(Object.assign({}, query, {\n              sloQuery,\n              queryType: value\n            }));\n            onRunQuery();\n          },\n          inputId: `${query.refId}-query-type`\n        })\n      }), queryType === QueryType.METRICS && /*#__PURE__*/_jsx(MetricQueryEditor, {\n        refId: query.refId,\n        variableOptionGroup: variableOptionGroup,\n        customMetaData: customMetaData,\n        onChange: metricQuery => {\n          this.props.onChange(Object.assign({}, this.props.query, {\n            metricQuery\n          }));\n        },\n        onRunQuery: onRunQuery,\n        datasource: datasource,\n        query: metricQuery\n      }), queryType === QueryType.SLO && /*#__PURE__*/_jsx(SLOQueryEditor, {\n        refId: query.refId,\n        variableOptionGroup: variableOptionGroup,\n        customMetaData: customMetaData,\n        onChange: query => this.onQueryChange('sloQuery', query),\n        onRunQuery: onRunQuery,\n        datasource: datasource,\n        query: sloQuery\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["css","React","PureComponent","toOption","EditorRows","config","Button","Select","QUERY_TYPES","SELECT_WIDTH","EditorMode","QueryType","MetricQueryEditor","ExperimentalMetricQueryEditor","QueryHeader","defaultQuery","defaultSLOQuery","QueryEditorRow","SLOQueryEditor","QueryEditor","UNSAFE_componentWillMount","datasource","query","props","hasOwnProperty","metricQuery","queryType","METRICS","ensureGCEDefaultProject","projectName","getDefaultProject","onQueryChange","prop","value","onChange","onRunQuery","render","sloQuery","meta","data","series","length","customMetaData","custom","variableOptionGroup","label","expanded","options","getVariables","map","featureToggles","cloudMonitoringExperimentalUI","refId","SLO","editorMode","MQL","Visual"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/QueryEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorProps, toOption } from '@grafana/data';\nimport { EditorRows } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Button, Select } from '@grafana/ui';\n\nimport { QUERY_TYPES, SELECT_WIDTH } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { CloudMonitoringQuery, EditorMode, MetricQuery, QueryType, SLOQuery, CloudMonitoringOptions } from '../types';\n\nimport { MetricQueryEditor as ExperimentalMetricQueryEditor } from './Experimental/MetricQueryEditor';\nimport { QueryHeader } from './Experimental/QueryHeader';\nimport { defaultQuery } from './MetricQueryEditor';\nimport { defaultQuery as defaultSLOQuery } from './SLO/SLOQueryEditor';\n\nimport { MetricQueryEditor, QueryEditorRow, SLOQueryEditor } from './';\n\nexport type Props = QueryEditorProps<CloudMonitoringDatasource, CloudMonitoringQuery, CloudMonitoringOptions>;\n\nexport class QueryEditor extends PureComponent<Props> {\n  async UNSAFE_componentWillMount() {\n    const { datasource, query } = this.props;\n\n    // Unfortunately, migrations like this need to go UNSAFE_componentWillMount. As soon as there's\n    // migration hook for this module.ts, we can do the migrations there instead.\n    if (!this.props.query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, ...metricQuery } = this.props.query as any;\n      this.props.query.metricQuery = metricQuery;\n    }\n\n    if (!this.props.query.hasOwnProperty('queryType')) {\n      this.props.query.queryType = QueryType.METRICS;\n    }\n\n    await datasource.ensureGCEDefaultProject();\n    if (!query.metricQuery.projectName) {\n      this.props.query.metricQuery.projectName = datasource.getDefaultProject();\n    }\n  }\n\n  onQueryChange(prop: string, value: MetricQuery | SLOQuery) {\n    this.props.onChange({ ...this.props.query, [prop]: value });\n    this.props.onRunQuery();\n  }\n\n  render() {\n    const { datasource, query, onRunQuery, onChange } = this.props;\n    const metricQuery = { ...defaultQuery(datasource), ...query.metricQuery };\n    const sloQuery = { ...defaultSLOQuery(datasource), ...query.sloQuery };\n    const queryType = query.queryType || QueryType.METRICS;\n    const meta = this.props.data?.series.length ? this.props.data?.series[0].meta : {};\n    const customMetaData = meta?.custom ?? {};\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: datasource.getVariables().map(toOption),\n    };\n\n    return config.featureToggles.cloudMonitoringExperimentalUI ? (\n      <EditorRows>\n        <QueryHeader\n          query={query}\n          metricQuery={metricQuery}\n          sloQuery={sloQuery}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n        />\n        {queryType === QueryType.METRICS && (\n          <ExperimentalMetricQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={(metricQuery: MetricQuery) => {\n              this.props.onChange({ ...this.props.query, metricQuery });\n            }}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={metricQuery}\n          />\n        )}\n\n        {queryType === QueryType.SLO && (\n          <SLOQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={(query: SLOQuery) => this.onQueryChange('sloQuery', query)}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={sloQuery}\n          />\n        )}\n      </EditorRows>\n    ) : (\n      <EditorRows>\n        <QueryEditorRow\n          label=\"Query type\"\n          fillComponent={\n            query.queryType !== QueryType.SLO && (\n              <Button\n                variant=\"secondary\"\n                className={css`\n                  margin-left: auto;\n                `}\n                icon=\"edit\"\n                onClick={() =>\n                  this.onQueryChange('metricQuery', {\n                    ...metricQuery,\n                    editorMode: metricQuery.editorMode === EditorMode.MQL ? EditorMode.Visual : EditorMode.MQL,\n                  })\n                }\n              >\n                {metricQuery.editorMode === EditorMode.MQL ? 'Switch to builder' : 'Edit MQL'}\n              </Button>\n            )\n          }\n          htmlFor={`${query.refId}-query-type`}\n        >\n          <Select\n            width={SELECT_WIDTH}\n            value={queryType}\n            options={QUERY_TYPES}\n            onChange={({ value }) => {\n              onChange({ ...query, sloQuery, queryType: value! });\n              onRunQuery();\n            }}\n            inputId={`${query.refId}-query-type`}\n          />\n        </QueryEditorRow>\n\n        {queryType === QueryType.METRICS && (\n          <MetricQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={(metricQuery: MetricQuery) => {\n              this.props.onChange({ ...this.props.query, metricQuery });\n            }}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={metricQuery}\n          />\n        )}\n\n        {queryType === QueryType.SLO && (\n          <SLOQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={(query: SLOQuery) => this.onQueryChange('sloQuery', query)}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={sloQuery}\n          />\n        )}\n      </EditorRows>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}