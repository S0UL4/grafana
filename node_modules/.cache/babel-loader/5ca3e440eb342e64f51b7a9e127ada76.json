{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { isNumber } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { FieldType, getDisplayValueAlignmentFactors, getFieldDisplayValues } from '@grafana/data';\nimport { findNumericFieldMinMax } from '@grafana/data/src/field/fieldOverrides';\nimport { BigValueTextMode, BigValueGraphMode } from '@grafana/schema';\nimport { BigValue, DataLinksContextMenu, VizRepeater } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class StatPanel extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"renderComponent\", (valueProps, menuProps) => {\n      const {\n        timeRange,\n        options\n      } = this.props;\n      const {\n        value,\n        alignmentFactors,\n        width,\n        height,\n        count\n      } = valueProps;\n      const {\n        openMenu,\n        targetClassName\n      } = menuProps;\n      let sparkline = value.sparkline;\n\n      if (sparkline) {\n        sparkline.timeRange = timeRange;\n      }\n\n      return /*#__PURE__*/_jsx(BigValue, {\n        value: value.display,\n        count: count,\n        sparkline: sparkline,\n        colorMode: options.colorMode,\n        graphMode: options.graphMode,\n        justifyMode: options.justifyMode,\n        textMode: this.getTextMode(),\n        alignmentFactors: alignmentFactors,\n        text: options.text,\n        width: width,\n        height: height,\n        theme: config.theme2,\n        onClick: openMenu,\n        className: targetClassName\n      });\n    });\n\n    _defineProperty(this, \"renderValue\", valueProps => {\n      const {\n        value\n      } = valueProps;\n      const {\n        getLinks,\n        hasLinks\n      } = value;\n\n      if (hasLinks && getLinks) {\n        return /*#__PURE__*/_jsx(DataLinksContextMenu, {\n          links: getLinks,\n          config: value.field,\n          children: api => {\n            return this.renderComponent(valueProps, api);\n          }\n        });\n      }\n\n      return this.renderComponent(valueProps, {});\n    });\n\n    _defineProperty(this, \"getValues\", () => {\n      const {\n        data,\n        options,\n        replaceVariables,\n        fieldConfig,\n        timeZone\n      } = this.props;\n      let globalRange = undefined;\n\n      for (let frame of data.series) {\n        for (let field of frame.fields) {\n          let {\n            config\n          } = field; // mostly copied from fieldOverrides, since they are skipped during streaming\n          // Set the Min/Max value automatically\n\n          if (field.type === FieldType.number) {\n            var _field$state, _config$min, _config$max, _field$state2;\n\n            if ((_field$state = field.state) !== null && _field$state !== void 0 && _field$state.range) {\n              continue;\n            }\n\n            if (!globalRange && (!isNumber(config.min) || !isNumber(config.max))) {\n              globalRange = findNumericFieldMinMax(data.series);\n            }\n\n            const min = (_config$min = config.min) !== null && _config$min !== void 0 ? _config$min : globalRange.min;\n            const max = (_config$max = config.max) !== null && _config$max !== void 0 ? _config$max : globalRange.max;\n            field.state = (_field$state2 = field.state) !== null && _field$state2 !== void 0 ? _field$state2 : {};\n            field.state.range = {\n              min,\n              max,\n              delta: max - min\n            };\n          }\n        }\n      }\n\n      return getFieldDisplayValues({\n        fieldConfig,\n        reduceOptions: options.reduceOptions,\n        replaceVariables,\n        theme: config.theme2,\n        data: data.series,\n        sparkline: options.graphMode !== BigValueGraphMode.None,\n        timeZone\n      });\n    });\n  }\n\n  getTextMode() {\n    const {\n      options,\n      fieldConfig,\n      title\n    } = this.props; // If we have manually set displayName or panel title switch text mode to value and name\n\n    if (options.textMode === BigValueTextMode.Auto && (fieldConfig.defaults.displayName || !title)) {\n      return BigValueTextMode.ValueAndName;\n    }\n\n    return options.textMode;\n  }\n\n  render() {\n    const {\n      height,\n      options,\n      width,\n      data,\n      renderCounter\n    } = this.props;\n    return /*#__PURE__*/_jsx(VizRepeater, {\n      getValues: this.getValues,\n      getAlignmentFactors: getDisplayValueAlignmentFactors,\n      renderValue: this.renderValue,\n      width: width,\n      height: height,\n      source: data,\n      itemSpacing: 3,\n      renderCounter: renderCounter,\n      autoGrid: true,\n      orientation: options.orientation\n    });\n  }\n\n}","map":{"version":3,"names":["isNumber","React","PureComponent","FieldType","getDisplayValueAlignmentFactors","getFieldDisplayValues","findNumericFieldMinMax","BigValueTextMode","BigValueGraphMode","BigValue","DataLinksContextMenu","VizRepeater","config","StatPanel","valueProps","menuProps","timeRange","options","props","value","alignmentFactors","width","height","count","openMenu","targetClassName","sparkline","display","colorMode","graphMode","justifyMode","getTextMode","text","theme2","getLinks","hasLinks","field","api","renderComponent","data","replaceVariables","fieldConfig","timeZone","globalRange","undefined","frame","series","fields","type","number","state","range","min","max","delta","reduceOptions","theme","None","title","textMode","Auto","defaults","displayName","ValueAndName","render","renderCounter","getValues","renderValue","orientation"],"sources":["/home/soula/grafana/public/app/plugins/panel/stat/StatPanel.tsx"],"sourcesContent":["import { isNumber } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport {\n  DisplayValueAlignmentFactors,\n  FieldDisplay,\n  FieldType,\n  getDisplayValueAlignmentFactors,\n  getFieldDisplayValues,\n  NumericRange,\n  PanelProps,\n} from '@grafana/data';\nimport { findNumericFieldMinMax } from '@grafana/data/src/field/fieldOverrides';\nimport { BigValueTextMode, BigValueGraphMode } from '@grafana/schema';\nimport { BigValue, DataLinksContextMenu, VizRepeater, VizRepeaterRenderValueProps } from '@grafana/ui';\nimport { DataLinksContextMenuApi } from '@grafana/ui/src/components/DataLinks/DataLinksContextMenu';\nimport { config } from 'app/core/config';\n\nimport { PanelOptions } from './models.gen';\n\nexport class StatPanel extends PureComponent<PanelProps<PanelOptions>> {\n  renderComponent = (\n    valueProps: VizRepeaterRenderValueProps<FieldDisplay, DisplayValueAlignmentFactors>,\n    menuProps: DataLinksContextMenuApi\n  ): JSX.Element => {\n    const { timeRange, options } = this.props;\n    const { value, alignmentFactors, width, height, count } = valueProps;\n    const { openMenu, targetClassName } = menuProps;\n    let sparkline = value.sparkline;\n    if (sparkline) {\n      sparkline.timeRange = timeRange;\n    }\n\n    return (\n      <BigValue\n        value={value.display}\n        count={count}\n        sparkline={sparkline}\n        colorMode={options.colorMode}\n        graphMode={options.graphMode}\n        justifyMode={options.justifyMode}\n        textMode={this.getTextMode()}\n        alignmentFactors={alignmentFactors}\n        text={options.text}\n        width={width}\n        height={height}\n        theme={config.theme2}\n        onClick={openMenu}\n        className={targetClassName}\n      />\n    );\n  };\n\n  getTextMode() {\n    const { options, fieldConfig, title } = this.props;\n\n    // If we have manually set displayName or panel title switch text mode to value and name\n    if (options.textMode === BigValueTextMode.Auto && (fieldConfig.defaults.displayName || !title)) {\n      return BigValueTextMode.ValueAndName;\n    }\n\n    return options.textMode;\n  }\n\n  renderValue = (valueProps: VizRepeaterRenderValueProps<FieldDisplay, DisplayValueAlignmentFactors>): JSX.Element => {\n    const { value } = valueProps;\n    const { getLinks, hasLinks } = value;\n\n    if (hasLinks && getLinks) {\n      return (\n        <DataLinksContextMenu links={getLinks} config={value.field}>\n          {(api) => {\n            return this.renderComponent(valueProps, api);\n          }}\n        </DataLinksContextMenu>\n      );\n    }\n\n    return this.renderComponent(valueProps, {});\n  };\n\n  getValues = (): FieldDisplay[] => {\n    const { data, options, replaceVariables, fieldConfig, timeZone } = this.props;\n\n    let globalRange: NumericRange | undefined = undefined;\n\n    for (let frame of data.series) {\n      for (let field of frame.fields) {\n        let { config } = field;\n        // mostly copied from fieldOverrides, since they are skipped during streaming\n        // Set the Min/Max value automatically\n        if (field.type === FieldType.number) {\n          if (field.state?.range) {\n            continue;\n          }\n          if (!globalRange && (!isNumber(config.min) || !isNumber(config.max))) {\n            globalRange = findNumericFieldMinMax(data.series);\n          }\n          const min = config.min ?? globalRange!.min;\n          const max = config.max ?? globalRange!.max;\n          field.state = field.state ?? {};\n          field.state.range = { min, max, delta: max! - min! };\n        }\n      }\n    }\n\n    return getFieldDisplayValues({\n      fieldConfig,\n      reduceOptions: options.reduceOptions,\n      replaceVariables,\n      theme: config.theme2,\n      data: data.series,\n      sparkline: options.graphMode !== BigValueGraphMode.None,\n      timeZone,\n    });\n  };\n\n  render() {\n    const { height, options, width, data, renderCounter } = this.props;\n\n    return (\n      <VizRepeater\n        getValues={this.getValues}\n        getAlignmentFactors={getDisplayValueAlignmentFactors}\n        renderValue={this.renderValue}\n        width={width}\n        height={height}\n        source={data}\n        itemSpacing={3}\n        renderCounter={renderCounter}\n        autoGrid={true}\n        orientation={options.orientation}\n      />\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}