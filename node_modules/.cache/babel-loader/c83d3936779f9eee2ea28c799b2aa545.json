{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { Select } from '@grafana/ui';\nimport { Field } from '../Field';\nimport { setFormatAs } from './setQueryValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FORMAT_OPTIONS = [{\n  label: 'Time series',\n  value: 'time_series'\n}, {\n  label: 'Table',\n  value: 'table'\n}];\n\nconst FormatAsField = ({\n  query,\n  variableOptionGroup,\n  onQueryChange\n}) => {\n  var _query$azureLogAnalyt;\n\n  const options = useMemo(() => [...FORMAT_OPTIONS, variableOptionGroup], [variableOptionGroup]);\n  const handleChange = useCallback(change => {\n    const {\n      value\n    } = change;\n\n    if (!value) {\n      return;\n    }\n\n    const newQuery = setFormatAs(query, value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query]);\n  return /*#__PURE__*/_jsx(Field, {\n    label: \"Format as\",\n    children: /*#__PURE__*/_jsx(Select, {\n      inputId: \"azure-monitor-logs-workspaces-field\",\n      value: (_query$azureLogAnalyt = query.azureLogAnalytics) === null || _query$azureLogAnalyt === void 0 ? void 0 : _query$azureLogAnalyt.resultFormat,\n      onChange: handleChange,\n      options: options,\n      width: 38\n    })\n  });\n};\n\nexport default FormatAsField;","map":{"version":3,"names":["React","useCallback","useMemo","Select","Field","setFormatAs","FORMAT_OPTIONS","label","value","FormatAsField","query","variableOptionGroup","onQueryChange","options","handleChange","change","newQuery","azureLogAnalytics","resultFormat"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/FormatAsField.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setFormatAs } from './setQueryValue';\n\nconst FORMAT_OPTIONS: Array<SelectableValue<string>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n];\n\nconst FormatAsField: React.FC<AzureQueryEditorFieldProps> = ({ query, variableOptionGroup, onQueryChange }) => {\n  const options = useMemo(() => [...FORMAT_OPTIONS, variableOptionGroup], [variableOptionGroup]);\n\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      const { value } = change;\n      if (!value) {\n        return;\n      }\n\n      const newQuery = setFormatAs(query, value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <Field label=\"Format as\">\n      <Select\n        inputId=\"azure-monitor-logs-workspaces-field\"\n        value={query.azureLogAnalytics?.resultFormat}\n        onChange={handleChange}\n        options={options}\n        width={38}\n      />\n    </Field>\n  );\n};\n\nexport default FormatAsField;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAGA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,WAAT,QAA4B,iBAA5B;;AAEA,MAAMC,cAA8C,GAAG,CACrD;EAAEC,KAAK,EAAE,aAAT;EAAwBC,KAAK,EAAE;AAA/B,CADqD,EAErD;EAAED,KAAK,EAAE,OAAT;EAAkBC,KAAK,EAAE;AAAzB,CAFqD,CAAvD;;AAKA,MAAMC,aAAmD,GAAG,CAAC;EAAEC,KAAF;EAASC,mBAAT;EAA8BC;AAA9B,CAAD,KAAmD;EAAA;;EAC7G,MAAMC,OAAO,GAAGX,OAAO,CAAC,MAAM,CAAC,GAAGI,cAAJ,EAAoBK,mBAApB,CAAP,EAAiD,CAACA,mBAAD,CAAjD,CAAvB;EAEA,MAAMG,YAAY,GAAGb,WAAW,CAC7Bc,MAAD,IAAqC;IACnC,MAAM;MAAEP;IAAF,IAAYO,MAAlB;;IACA,IAAI,CAACP,KAAL,EAAY;MACV;IACD;;IAED,MAAMQ,QAAQ,GAAGX,WAAW,CAACK,KAAD,EAAQF,KAAR,CAA5B;IACAI,aAAa,CAACI,QAAD,CAAb;EACD,CAT6B,EAU9B,CAACJ,aAAD,EAAgBF,KAAhB,CAV8B,CAAhC;EAaA,oBACE,KAAC,KAAD;IAAO,KAAK,EAAC,WAAb;IAAA,uBACE,KAAC,MAAD;MACE,OAAO,EAAC,qCADV;MAEE,KAAK,2BAAEA,KAAK,CAACO,iBAAR,0DAAE,sBAAyBC,YAFlC;MAGE,QAAQ,EAAEJ,YAHZ;MAIE,OAAO,EAAED,OAJX;MAKE,KAAK,EAAE;IALT;EADF,EADF;AAWD,CA3BD;;AA6BA,eAAeJ,aAAf"},"metadata":{},"sourceType":"module"}