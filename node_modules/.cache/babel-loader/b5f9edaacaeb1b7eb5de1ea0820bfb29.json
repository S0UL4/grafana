{"ast":null,"code":"// Libraries\nimport { toString, isEmpty, isBoolean, isArray, join } from 'lodash'; // Types\n\nimport { getFieldTypeFromValue } from '../dataframe/processDataFrame';\nimport { toUtc, dateTimeParse } from '../datetime';\nimport { FieldType } from '../types/dataFrame';\nimport { anyToNumber } from '../utils/anyToNumber';\nimport { getValueMappingResult } from '../utils/valueMappings';\nimport { getValueFormat, isBooleanUnit } from '../valueFormats/valueFormats';\nimport { getScaleCalculator } from './scale';\n// Reasonable units for time\nconst timeFormats = {\n  dateTimeAsIso: true,\n  dateTimeAsIsoNoDateIfToday: true,\n  dateTimeAsUS: true,\n  dateTimeAsUSNoDateIfToday: true,\n  dateTimeAsLocal: true,\n  dateTimeAsLocalNoDateIfToday: true,\n  dateTimeFromNow: true\n};\nexport function getDisplayProcessor(options) {\n  var _field$config;\n\n  if (!options || isEmpty(options) || !options.field) {\n    return toStringProcessor;\n  }\n\n  const field = options.field;\n  const config = (_field$config = field.config) !== null && _field$config !== void 0 ? _field$config : {};\n  let unit = config.unit;\n  let hasDateUnit = unit && (timeFormats[unit] || unit.startsWith('time:'));\n  let showMs = false;\n\n  if (field.type === FieldType.time && !hasDateUnit) {\n    unit = `dateTimeAsSystem`;\n    hasDateUnit = true;\n\n    if (field.values && field.values.length > 1) {\n      let start = field.values.get(0);\n      let end = field.values.get(field.values.length - 1);\n\n      if (typeof start === 'string') {\n        start = dateTimeParse(start).unix();\n        end = dateTimeParse(end).unix();\n      } else {\n        start /= 1e3;\n        end /= 1e3;\n      }\n\n      showMs = end - start < 60; //show ms when minute or less\n    }\n  } else if (field.type === FieldType.boolean) {\n    if (!isBooleanUnit(unit)) {\n      unit = 'bool';\n    }\n  } else if (!unit && field.type === FieldType.string) {\n    unit = 'string';\n  }\n\n  const formatFunc = getValueFormat(unit || 'none');\n  const scaleFunc = getScaleCalculator(field, options.theme);\n  return value => {\n    const {\n      mappings\n    } = config;\n    const isStringUnit = unit === 'string';\n\n    if (hasDateUnit && typeof value === 'string') {\n      value = toUtc(value).valueOf();\n    }\n\n    let numeric = isStringUnit ? NaN : anyToNumber(value);\n    let text;\n    let prefix;\n    let suffix;\n    let color;\n    let icon;\n    let percent;\n\n    if (mappings && mappings.length > 0) {\n      const mappingResult = getValueMappingResult(mappings, value);\n\n      if (mappingResult) {\n        if (mappingResult.text != null) {\n          text = mappingResult.text;\n        }\n\n        if (mappingResult.color != null) {\n          color = options.theme.visualization.getColorByName(mappingResult.color);\n        }\n\n        if (mappingResult.icon != null) {\n          icon = mappingResult.icon;\n        }\n      }\n    }\n\n    if (!isNaN(numeric)) {\n      if (text == null && !isBoolean(value)) {\n        const v = formatFunc(numeric, config.decimals, null, options.timeZone, showMs);\n        text = v.text;\n        suffix = v.suffix;\n        prefix = v.prefix;\n      } // Return the value along with scale info\n\n\n      if (color == null) {\n        const scaleResult = scaleFunc(numeric);\n        color = scaleResult.color;\n        percent = scaleResult.percent;\n      }\n    }\n\n    if (text == null && isArray(value)) {\n      text = join(value, ', ');\n    }\n\n    if (text == null) {\n      text = toString(value);\n\n      if (!text) {\n        if (config.noValue) {\n          text = config.noValue;\n        } else {\n          text = ''; // No data?\n        }\n      }\n    }\n\n    if (!color) {\n      const scaleResult = scaleFunc(-Infinity);\n      color = scaleResult.color;\n      percent = scaleResult.percent;\n    }\n\n    const display = {\n      text,\n      numeric,\n      prefix,\n      suffix,\n      color\n    };\n\n    if (icon != null) {\n      display.icon = icon;\n    }\n\n    if (percent != null) {\n      display.percent = percent;\n    }\n\n    return display;\n  };\n}\n\nfunction toStringProcessor(value) {\n  return {\n    text: toString(value),\n    numeric: anyToNumber(value)\n  };\n}\n\nexport function getRawDisplayProcessor() {\n  return value => ({\n    text: getFieldTypeFromValue(value) === 'other' ? `${JSON.stringify(value, getCircularReplacer())}` : `${value}`,\n    numeric: null\n  });\n}\n\nconst getCircularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n\n      seen.add(value);\n    }\n\n    return value;\n  };\n};","map":{"version":3,"names":["toString","isEmpty","isBoolean","isArray","join","getFieldTypeFromValue","toUtc","dateTimeParse","FieldType","anyToNumber","getValueMappingResult","getValueFormat","isBooleanUnit","getScaleCalculator","timeFormats","dateTimeAsIso","dateTimeAsIsoNoDateIfToday","dateTimeAsUS","dateTimeAsUSNoDateIfToday","dateTimeAsLocal","dateTimeAsLocalNoDateIfToday","dateTimeFromNow","getDisplayProcessor","options","field","toStringProcessor","config","unit","hasDateUnit","startsWith","showMs","type","time","values","length","start","get","end","unix","boolean","string","formatFunc","scaleFunc","theme","value","mappings","isStringUnit","valueOf","numeric","NaN","text","prefix","suffix","color","icon","percent","mappingResult","visualization","getColorByName","isNaN","v","decimals","timeZone","scaleResult","noValue","Infinity","display","getRawDisplayProcessor","JSON","stringify","getCircularReplacer","seen","WeakSet","_key","has","add"],"sources":["/home/soula/grafana/packages/grafana-data/src/field/displayProcessor.ts"],"sourcesContent":["// Libraries\nimport { toString, toNumber as _toNumber, isEmpty, isBoolean, isArray, join } from 'lodash';\n\n// Types\nimport { getFieldTypeFromValue } from '../dataframe/processDataFrame';\nimport { toUtc, dateTimeParse } from '../datetime';\nimport { GrafanaTheme2 } from '../themes/types';\nimport { KeyValue, TimeZone } from '../types';\nimport { Field, FieldType } from '../types/dataFrame';\nimport { DisplayProcessor, DisplayValue } from '../types/displayValue';\nimport { anyToNumber } from '../utils/anyToNumber';\nimport { getValueMappingResult } from '../utils/valueMappings';\nimport { getValueFormat, isBooleanUnit } from '../valueFormats/valueFormats';\n\nimport { getScaleCalculator } from './scale';\n\ninterface DisplayProcessorOptions {\n  field: Partial<Field>;\n  /**\n   * Will pick browser timezone if not defined\n   */\n  timeZone?: TimeZone;\n  /**\n   * Will pick 'dark' if not defined\n   */\n  theme: GrafanaTheme2;\n}\n\n// Reasonable units for time\nconst timeFormats: KeyValue<boolean> = {\n  dateTimeAsIso: true,\n  dateTimeAsIsoNoDateIfToday: true,\n  dateTimeAsUS: true,\n  dateTimeAsUSNoDateIfToday: true,\n  dateTimeAsLocal: true,\n  dateTimeAsLocalNoDateIfToday: true,\n  dateTimeFromNow: true,\n};\n\nexport function getDisplayProcessor(options?: DisplayProcessorOptions): DisplayProcessor {\n  if (!options || isEmpty(options) || !options.field) {\n    return toStringProcessor;\n  }\n\n  const field = options.field as Field;\n  const config = field.config ?? {};\n\n  let unit = config.unit;\n  let hasDateUnit = unit && (timeFormats[unit] || unit.startsWith('time:'));\n  let showMs = false;\n\n  if (field.type === FieldType.time && !hasDateUnit) {\n    unit = `dateTimeAsSystem`;\n    hasDateUnit = true;\n    if (field.values && field.values.length > 1) {\n      let start = field.values.get(0);\n      let end = field.values.get(field.values.length - 1);\n      if (typeof start === 'string') {\n        start = dateTimeParse(start).unix();\n        end = dateTimeParse(end).unix();\n      } else {\n        start /= 1e3;\n        end /= 1e3;\n      }\n      showMs = end - start < 60; //show ms when minute or less\n    }\n  } else if (field.type === FieldType.boolean) {\n    if (!isBooleanUnit(unit)) {\n      unit = 'bool';\n    }\n  } else if (!unit && field.type === FieldType.string) {\n    unit = 'string';\n  }\n\n  const formatFunc = getValueFormat(unit || 'none');\n  const scaleFunc = getScaleCalculator(field, options.theme);\n\n  return (value: any) => {\n    const { mappings } = config;\n    const isStringUnit = unit === 'string';\n\n    if (hasDateUnit && typeof value === 'string') {\n      value = toUtc(value).valueOf();\n    }\n\n    let numeric = isStringUnit ? NaN : anyToNumber(value);\n    let text: string | undefined;\n    let prefix: string | undefined;\n    let suffix: string | undefined;\n    let color: string | undefined;\n    let icon: string | undefined;\n    let percent: number | undefined;\n\n    if (mappings && mappings.length > 0) {\n      const mappingResult = getValueMappingResult(mappings, value);\n\n      if (mappingResult) {\n        if (mappingResult.text != null) {\n          text = mappingResult.text;\n        }\n\n        if (mappingResult.color != null) {\n          color = options.theme.visualization.getColorByName(mappingResult.color);\n        }\n\n        if (mappingResult.icon != null) {\n          icon = mappingResult.icon;\n        }\n      }\n    }\n\n    if (!isNaN(numeric)) {\n      if (text == null && !isBoolean(value)) {\n        const v = formatFunc(numeric, config.decimals, null, options.timeZone, showMs);\n        text = v.text;\n        suffix = v.suffix;\n        prefix = v.prefix;\n      }\n\n      // Return the value along with scale info\n      if (color == null) {\n        const scaleResult = scaleFunc(numeric);\n        color = scaleResult.color;\n        percent = scaleResult.percent;\n      }\n    }\n\n    if (text == null && isArray(value)) {\n      text = join(value, ', ');\n    }\n\n    if (text == null) {\n      text = toString(value);\n      if (!text) {\n        if (config.noValue) {\n          text = config.noValue;\n        } else {\n          text = ''; // No data?\n        }\n      }\n    }\n\n    if (!color) {\n      const scaleResult = scaleFunc(-Infinity);\n      color = scaleResult.color;\n      percent = scaleResult.percent;\n    }\n\n    const display: DisplayValue = {\n      text,\n      numeric,\n      prefix,\n      suffix,\n      color,\n    };\n\n    if (icon != null) {\n      display.icon = icon;\n    }\n\n    if (percent != null) {\n      display.percent = percent;\n    }\n\n    return display;\n  };\n}\n\nfunction toStringProcessor(value: any): DisplayValue {\n  return { text: toString(value), numeric: anyToNumber(value) };\n}\n\nexport function getRawDisplayProcessor(): DisplayProcessor {\n  return (value: any) => ({\n    text: getFieldTypeFromValue(value) === 'other' ? `${JSON.stringify(value, getCircularReplacer())}` : `${value}`,\n    numeric: null as unknown as number,\n  });\n}\n\nconst getCircularReplacer = () => {\n  const seen = new WeakSet();\n  return (_key: any, value: object | null) => {\n    if (typeof value === 'object' && value !== null) {\n      if (seen.has(value)) {\n        return;\n      }\n      seen.add(value);\n    }\n    return value;\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}