{"ast":null,"code":"var _h, _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { config } from '@grafana/runtime';\nimport { Form, Spinner } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { NotificationChannelForm } from './components/NotificationChannelForm';\nimport { loadNotificationChannel, testNotificationChannel, updateNotificationChannel } from './state/actions';\nimport { resetSecureField } from './state/reducers';\nimport { mapChannelsToSelectableValue, transformSubmitData, transformTestData } from './utils/notificationChannels';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class EditNotificationChannelPage extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onSubmit\", formData => {\n      const {\n        notificationChannel\n      } = this.props;\n      this.props.updateNotificationChannel(Object.assign({}, transformSubmitData(Object.assign({}, notificationChannel, formData, {\n        settings: Object.assign({}, notificationChannel.settings, formData.settings)\n      })), {\n        id: notificationChannel.id\n      }));\n    });\n\n    _defineProperty(this, \"onTestChannel\", formData => {\n      const {\n        notificationChannel\n      } = this.props;\n      /*\n        Same as submit\n       */\n\n      this.props.testNotificationChannel(transformTestData(Object.assign({}, notificationChannel, formData, {\n        settings: Object.assign({}, notificationChannel.settings, formData.settings)\n      })));\n    });\n  }\n\n  componentDidMount() {\n    this.props.loadNotificationChannel(parseInt(this.props.match.params.id, 10));\n  }\n\n  render() {\n    const {\n      navModel,\n      notificationChannel,\n      notificationChannelTypes\n    } = this.props;\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: navModel,\n      children: /*#__PURE__*/_jsxs(Page.Contents, {\n        children: [_h || (_h = /*#__PURE__*/_jsx(\"h2\", {\n          className: \"page-sub-heading\",\n          children: \"Edit notification channel\"\n        })), notificationChannel && notificationChannel.id > 0 ? /*#__PURE__*/_jsx(Form, {\n          maxWidth: 600,\n          onSubmit: this.onSubmit,\n          defaultValues: Object.assign({}, notificationChannel, {\n            type: notificationChannelTypes.find(n => n.value === notificationChannel.type)\n          }),\n          children: ({\n            control,\n            errors,\n            getValues,\n            register,\n            watch\n          }) => {\n            const selectedChannel = notificationChannelTypes.find(c => c.value === getValues().type.value);\n            return /*#__PURE__*/_jsx(NotificationChannelForm, {\n              selectableChannels: mapChannelsToSelectableValue(notificationChannelTypes, true),\n              selectedChannel: selectedChannel,\n              imageRendererAvailable: config.rendererAvailable,\n              onTestChannel: this.onTestChannel,\n              register: register,\n              watch: watch,\n              errors: errors,\n              getValues: getValues,\n              control: control,\n              resetSecureField: this.props.resetSecureField,\n              secureFields: notificationChannel.secureFields\n            });\n          }\n        }) : _div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n          children: [\"Loading notification channel\", /*#__PURE__*/_jsx(Spinner, {})]\n        }))]\n      })\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    navModel: getNavModel(state.navIndex, 'channels'),\n    notificationChannel: state.notificationChannel.notificationChannel,\n    notificationChannelTypes: state.notificationChannel.notificationChannelTypes\n  };\n};\n\nconst mapDispatchToProps = {\n  loadNotificationChannel,\n  testNotificationChannel,\n  updateNotificationChannel,\n  resetSecureField\n};\nexport default connectWithCleanUp(mapStateToProps, mapDispatchToProps, state => state.notificationChannel)(EditNotificationChannelPage);","map":{"version":3,"names":["React","PureComponent","config","Form","Spinner","Page","connectWithCleanUp","getNavModel","NotificationChannelForm","loadNotificationChannel","testNotificationChannel","updateNotificationChannel","resetSecureField","mapChannelsToSelectableValue","transformSubmitData","transformTestData","EditNotificationChannelPage","formData","notificationChannel","props","settings","id","componentDidMount","parseInt","match","params","render","navModel","notificationChannelTypes","onSubmit","type","find","n","value","control","errors","getValues","register","watch","selectedChannel","c","rendererAvailable","onTestChannel","secureFields","mapStateToProps","state","navIndex","mapDispatchToProps"],"sources":["/home/soula/grafana/public/app/features/alerting/EditNotificationChannelPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { MapDispatchToProps, MapStateToProps } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Form, Spinner } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { NotificationChannelType, NotificationChannelDTO, StoreState } from 'app/types';\n\nimport { NotificationChannelForm } from './components/NotificationChannelForm';\nimport { loadNotificationChannel, testNotificationChannel, updateNotificationChannel } from './state/actions';\nimport { resetSecureField } from './state/reducers';\nimport { mapChannelsToSelectableValue, transformSubmitData, transformTestData } from './utils/notificationChannels';\n\ninterface OwnProps extends GrafanaRouteComponentProps<{ id: string }> {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  notificationChannel: any;\n  notificationChannelTypes: NotificationChannelType[];\n}\n\ninterface DispatchProps {\n  loadNotificationChannel: typeof loadNotificationChannel;\n  testNotificationChannel: typeof testNotificationChannel;\n  updateNotificationChannel: typeof updateNotificationChannel;\n  resetSecureField: typeof resetSecureField;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport class EditNotificationChannelPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadNotificationChannel(parseInt(this.props.match.params.id, 10));\n  }\n\n  onSubmit = (formData: NotificationChannelDTO) => {\n    const { notificationChannel } = this.props;\n\n    this.props.updateNotificationChannel({\n      /*\n       Some settings which lives in a collapsed section will not be registered since\n       the section will not be rendered if a user doesn't expand it. Therefore we need to\n       merge the initialData with any changes from the form.\n      */\n      ...transformSubmitData({\n        ...notificationChannel,\n        ...formData,\n        settings: { ...notificationChannel.settings, ...formData.settings },\n      }),\n      id: notificationChannel.id,\n    });\n  };\n\n  onTestChannel = (formData: NotificationChannelDTO) => {\n    const { notificationChannel } = this.props;\n    /*\n      Same as submit\n     */\n    this.props.testNotificationChannel(\n      transformTestData({\n        ...notificationChannel,\n        ...formData,\n        settings: { ...notificationChannel.settings, ...formData.settings },\n      })\n    );\n  };\n\n  render() {\n    const { navModel, notificationChannel, notificationChannelTypes } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <h2 className=\"page-sub-heading\">Edit notification channel</h2>\n          {notificationChannel && notificationChannel.id > 0 ? (\n            <Form\n              maxWidth={600}\n              onSubmit={this.onSubmit}\n              defaultValues={{\n                ...notificationChannel,\n                type: notificationChannelTypes.find((n) => n.value === notificationChannel.type),\n              }}\n            >\n              {({ control, errors, getValues, register, watch }) => {\n                const selectedChannel = notificationChannelTypes.find((c) => c.value === getValues().type.value);\n\n                return (\n                  <NotificationChannelForm\n                    selectableChannels={mapChannelsToSelectableValue(notificationChannelTypes, true)}\n                    selectedChannel={selectedChannel}\n                    imageRendererAvailable={config.rendererAvailable}\n                    onTestChannel={this.onTestChannel}\n                    register={register}\n                    watch={watch}\n                    errors={errors}\n                    getValues={getValues}\n                    control={control}\n                    resetSecureField={this.props.resetSecureField}\n                    secureFields={notificationChannel.secureFields}\n                  />\n                );\n              }}\n            </Form>\n          ) : (\n            <div>\n              Loading notification channel\n              <Spinner />\n            </div>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state) => {\n  return {\n    navModel: getNavModel(state.navIndex, 'channels'),\n    notificationChannel: state.notificationChannel.notificationChannel,\n    notificationChannelTypes: state.notificationChannel.notificationChannelTypes,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  loadNotificationChannel,\n  testNotificationChannel,\n  updateNotificationChannel,\n  resetSecureField,\n};\n\nexport default connectWithCleanUp(\n  mapStateToProps,\n  mapDispatchToProps,\n  (state) => state.notificationChannel\n)(EditNotificationChannelPage);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}