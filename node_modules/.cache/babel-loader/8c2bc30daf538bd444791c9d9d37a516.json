{"ast":null,"code":"import { Point } from 'ol/geom';\nimport { fromLonLat } from 'ol/proj';\nexport function loadWorldmapPoints(path, data) {\n  let count = 0;\n  const values = new Map();\n\n  for (const v of data) {\n    const point = new Point(fromLonLat([v.longitude, v.latitude]));\n    const info = {\n      point: () => point,\n      geometry: () => point\n    };\n\n    if (v.name) {\n      values.set(v.name, info);\n      values.set(v.name.toUpperCase(), info);\n    }\n\n    if (v.key) {\n      values.set(v.key, info);\n      values.set(v.key.toUpperCase(), info);\n    }\n\n    if (v.keys) {\n      for (const key of v.keys) {\n        values.set(key, info);\n        values.set(key.toUpperCase(), info);\n      }\n    }\n\n    count++;\n  }\n\n  return {\n    path,\n    find: k => {\n      let v = values.get(k);\n\n      if (!v && typeof k === 'string') {\n        v = values.get(k.toUpperCase());\n      }\n\n      return v;\n    },\n    count,\n    examples: count => {\n      const first = [];\n\n      if (values.size < 1) {\n        first.push('no values found');\n      } else {\n        for (const key of values.keys()) {\n          first.push(key);\n\n          if (first.length >= count) {\n            break;\n          }\n        }\n      }\n\n      return first;\n    }\n  };\n}","map":{"version":3,"names":["Point","fromLonLat","loadWorldmapPoints","path","data","count","values","Map","v","point","longitude","latitude","info","geometry","name","set","toUpperCase","key","keys","find","k","get","examples","first","size","push","length"],"sources":["/home/soula/grafana/public/app/features/geo/gazetteer/worldmap.ts"],"sourcesContent":["import { Point } from 'ol/geom';\nimport { fromLonLat } from 'ol/proj';\n\nimport { PlacenameInfo, Gazetteer } from './gazetteer';\n\n// https://github.com/grafana/worldmap-panel/blob/master/src/data/countries.json\nexport interface WorldmapPoint {\n  key?: string;\n  keys?: string[]; // new in grafana 8.1+\n  latitude: number;\n  longitude: number;\n  name?: string;\n}\n\nexport function loadWorldmapPoints(path: string, data: WorldmapPoint[]): Gazetteer {\n  let count = 0;\n  const values = new Map<string, PlacenameInfo>();\n  for (const v of data) {\n    const point = new Point(fromLonLat([v.longitude, v.latitude]));\n    const info: PlacenameInfo = {\n      point: () => point,\n      geometry: () => point,\n    };\n    if (v.name) {\n      values.set(v.name, info);\n      values.set(v.name.toUpperCase(), info);\n    }\n    if (v.key) {\n      values.set(v.key, info);\n      values.set(v.key.toUpperCase(), info);\n    }\n    if (v.keys) {\n      for (const key of v.keys) {\n        values.set(key, info);\n        values.set(key.toUpperCase(), info);\n      }\n    }\n    count++;\n  }\n  return {\n    path,\n    find: (k) => {\n      let v = values.get(k);\n      if (!v && typeof k === 'string') {\n        v = values.get(k.toUpperCase());\n      }\n      return v;\n    },\n    count,\n    examples: (count) => {\n      const first: string[] = [];\n      if (values.size < 1) {\n        first.push('no values found');\n      } else {\n        for (const key of values.keys()) {\n          first.push(key);\n          if (first.length >= count) {\n            break;\n          }\n        }\n      }\n      return first;\n    },\n  };\n}\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,SAAtB;AACA,SAASC,UAAT,QAA2B,SAA3B;AAaA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAA0CC,IAA1C,EAA4E;EACjF,IAAIC,KAAK,GAAG,CAAZ;EACA,MAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;;EACA,KAAK,MAAMC,CAAX,IAAgBJ,IAAhB,EAAsB;IACpB,MAAMK,KAAK,GAAG,IAAIT,KAAJ,CAAUC,UAAU,CAAC,CAACO,CAAC,CAACE,SAAH,EAAcF,CAAC,CAACG,QAAhB,CAAD,CAApB,CAAd;IACA,MAAMC,IAAmB,GAAG;MAC1BH,KAAK,EAAE,MAAMA,KADa;MAE1BI,QAAQ,EAAE,MAAMJ;IAFU,CAA5B;;IAIA,IAAID,CAAC,CAACM,IAAN,EAAY;MACVR,MAAM,CAACS,GAAP,CAAWP,CAAC,CAACM,IAAb,EAAmBF,IAAnB;MACAN,MAAM,CAACS,GAAP,CAAWP,CAAC,CAACM,IAAF,CAAOE,WAAP,EAAX,EAAiCJ,IAAjC;IACD;;IACD,IAAIJ,CAAC,CAACS,GAAN,EAAW;MACTX,MAAM,CAACS,GAAP,CAAWP,CAAC,CAACS,GAAb,EAAkBL,IAAlB;MACAN,MAAM,CAACS,GAAP,CAAWP,CAAC,CAACS,GAAF,CAAMD,WAAN,EAAX,EAAgCJ,IAAhC;IACD;;IACD,IAAIJ,CAAC,CAACU,IAAN,EAAY;MACV,KAAK,MAAMD,GAAX,IAAkBT,CAAC,CAACU,IAApB,EAA0B;QACxBZ,MAAM,CAACS,GAAP,CAAWE,GAAX,EAAgBL,IAAhB;QACAN,MAAM,CAACS,GAAP,CAAWE,GAAG,CAACD,WAAJ,EAAX,EAA8BJ,IAA9B;MACD;IACF;;IACDP,KAAK;EACN;;EACD,OAAO;IACLF,IADK;IAELgB,IAAI,EAAGC,CAAD,IAAO;MACX,IAAIZ,CAAC,GAAGF,MAAM,CAACe,GAAP,CAAWD,CAAX,CAAR;;MACA,IAAI,CAACZ,CAAD,IAAM,OAAOY,CAAP,KAAa,QAAvB,EAAiC;QAC/BZ,CAAC,GAAGF,MAAM,CAACe,GAAP,CAAWD,CAAC,CAACJ,WAAF,EAAX,CAAJ;MACD;;MACD,OAAOR,CAAP;IACD,CARI;IASLH,KATK;IAULiB,QAAQ,EAAGjB,KAAD,IAAW;MACnB,MAAMkB,KAAe,GAAG,EAAxB;;MACA,IAAIjB,MAAM,CAACkB,IAAP,GAAc,CAAlB,EAAqB;QACnBD,KAAK,CAACE,IAAN,CAAW,iBAAX;MACD,CAFD,MAEO;QACL,KAAK,MAAMR,GAAX,IAAkBX,MAAM,CAACY,IAAP,EAAlB,EAAiC;UAC/BK,KAAK,CAACE,IAAN,CAAWR,GAAX;;UACA,IAAIM,KAAK,CAACG,MAAN,IAAgBrB,KAApB,EAA2B;YACzB;UACD;QACF;MACF;;MACD,OAAOkB,KAAP;IACD;EAvBI,CAAP;AAyBD"},"metadata":{},"sourceType":"module"}