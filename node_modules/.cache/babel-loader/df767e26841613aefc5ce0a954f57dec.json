{"ast":null,"code":"import { uniqueId } from 'lodash';\nimport React, { useRef } from 'react';\nimport { Input, InlineField, Select, InlineSwitch } from '@grafana/ui';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { movingAvgModelOptions } from '../../../../query_def';\nimport { isEWMAMovingAverage, isHoltMovingAverage, isHoltWintersMovingAverage } from '../aggregations';\nimport { changeMetricSetting } from '../state/actions';\nimport { SettingField } from './SettingField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n// The way we handle changes for those settings is not ideal compared to the other components in the editor\n// FIXME: using `changeMetricSetting` will cause an error when switching from models that have different options\n// as they might be incompatible. We should clear all other options on model change.\nexport const MovingAverageSettingsEditor = ({\n  metric\n}) => {\n  var _metric$settings, _metric$settings3, _metric$settings3$set, _metric$settings5, _metric$settings5$set, _metric$settings7, _metric$settings7$set, _metric$settings9, _metric$settings9$set, _metric$settings11, _metric$settings11$se, _metric$settings12;\n\n  const dispatch = useDispatch();\n  const {\n    current: baseId\n  } = useRef(uniqueId('es-moving-avg-'));\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineField, {\n      label: \"Model\",\n      labelWidth: 16,\n      children: /*#__PURE__*/_jsx(Select, {\n        inputId: `${baseId}-model`,\n        onChange: value => dispatch(changeMetricSetting({\n          metric,\n          settingName: 'model',\n          newValue: value.value\n        })),\n        options: movingAvgModelOptions,\n        value: (_metric$settings = metric.settings) === null || _metric$settings === void 0 ? void 0 : _metric$settings.model\n      })\n    }), /*#__PURE__*/_jsx(SettingField, {\n      label: \"Window\",\n      settingName: \"window\",\n      metric: metric,\n      placeholder: \"5\"\n    }), /*#__PURE__*/_jsx(SettingField, {\n      label: \"Predict\",\n      settingName: \"predict\",\n      metric: metric\n    }), (isEWMAMovingAverage(metric) || isHoltMovingAverage(metric) || isHoltWintersMovingAverage(metric)) && /*#__PURE__*/_jsx(InlineField, {\n      label: \"Alpha\",\n      labelWidth: 16,\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `${baseId}-alpha`,\n        onBlur: e => {\n          var _metric$settings2;\n\n          return dispatch(changeMetricSetting({\n            metric,\n            settingName: 'settings',\n            newValue: Object.assign({}, (_metric$settings2 = metric.settings) === null || _metric$settings2 === void 0 ? void 0 : _metric$settings2.settings, {\n              alpha: e.target.value\n            })\n          }));\n        },\n        defaultValue: (_metric$settings3 = metric.settings) === null || _metric$settings3 === void 0 ? void 0 : (_metric$settings3$set = _metric$settings3.settings) === null || _metric$settings3$set === void 0 ? void 0 : _metric$settings3$set.alpha\n      })\n    }), (isHoltMovingAverage(metric) || isHoltWintersMovingAverage(metric)) && /*#__PURE__*/_jsx(InlineField, {\n      label: \"Beta\",\n      labelWidth: 16,\n      children: /*#__PURE__*/_jsx(Input, {\n        id: `${baseId}-beta`,\n        onBlur: e => {\n          var _metric$settings4;\n\n          return dispatch(changeMetricSetting({\n            metric,\n            settingName: 'settings',\n            newValue: Object.assign({}, (_metric$settings4 = metric.settings) === null || _metric$settings4 === void 0 ? void 0 : _metric$settings4.settings, {\n              beta: e.target.value\n            })\n          }));\n        },\n        defaultValue: (_metric$settings5 = metric.settings) === null || _metric$settings5 === void 0 ? void 0 : (_metric$settings5$set = _metric$settings5.settings) === null || _metric$settings5$set === void 0 ? void 0 : _metric$settings5$set.beta\n      })\n    }), isHoltWintersMovingAverage(metric) && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        label: \"Gamma\",\n        labelWidth: 16,\n        children: /*#__PURE__*/_jsx(Input, {\n          id: `${baseId}-gamma`,\n          onBlur: e => {\n            var _metric$settings6;\n\n            return dispatch(changeMetricSetting({\n              metric,\n              settingName: 'settings',\n              newValue: Object.assign({}, (_metric$settings6 = metric.settings) === null || _metric$settings6 === void 0 ? void 0 : _metric$settings6.settings, {\n                gamma: e.target.value\n              })\n            }));\n          },\n          defaultValue: (_metric$settings7 = metric.settings) === null || _metric$settings7 === void 0 ? void 0 : (_metric$settings7$set = _metric$settings7.settings) === null || _metric$settings7$set === void 0 ? void 0 : _metric$settings7$set.gamma\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Period\",\n        labelWidth: 16,\n        children: /*#__PURE__*/_jsx(Input, {\n          id: `${baseId}-period`,\n          onBlur: e => {\n            var _metric$settings8;\n\n            return dispatch(changeMetricSetting({\n              metric,\n              settingName: 'settings',\n              newValue: Object.assign({}, (_metric$settings8 = metric.settings) === null || _metric$settings8 === void 0 ? void 0 : _metric$settings8.settings, {\n                period: e.target.value\n              })\n            }));\n          },\n          defaultValue: (_metric$settings9 = metric.settings) === null || _metric$settings9 === void 0 ? void 0 : (_metric$settings9$set = _metric$settings9.settings) === null || _metric$settings9$set === void 0 ? void 0 : _metric$settings9$set.period\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Pad\",\n        labelWidth: 16,\n        children: /*#__PURE__*/_jsx(InlineSwitch, {\n          id: `${baseId}-pad`,\n          onChange: e => {\n            var _metric$settings10;\n\n            return dispatch(changeMetricSetting({\n              metric,\n              settingName: 'settings',\n              newValue: Object.assign({}, (_metric$settings10 = metric.settings) === null || _metric$settings10 === void 0 ? void 0 : _metric$settings10.settings, {\n                pad: e.target.checked\n              })\n            }));\n          },\n          checked: !!((_metric$settings11 = metric.settings) !== null && _metric$settings11 !== void 0 && (_metric$settings11$se = _metric$settings11.settings) !== null && _metric$settings11$se !== void 0 && _metric$settings11$se.pad)\n        })\n      })]\n    }), (isEWMAMovingAverage(metric) || isHoltMovingAverage(metric) || isHoltWintersMovingAverage(metric)) && /*#__PURE__*/_jsx(InlineField, {\n      label: \"Minimize\",\n      labelWidth: 16,\n      children: /*#__PURE__*/_jsx(InlineSwitch, {\n        id: `${baseId}-minimize`,\n        onChange: e => dispatch(changeMetricSetting({\n          metric,\n          settingName: 'minimize',\n          newValue: e.target.checked\n        })),\n        checked: !!((_metric$settings12 = metric.settings) !== null && _metric$settings12 !== void 0 && _metric$settings12.minimize)\n      })\n    })]\n  });\n};","map":{"version":3,"names":["uniqueId","React","useRef","Input","InlineField","Select","InlineSwitch","useDispatch","movingAvgModelOptions","isEWMAMovingAverage","isHoltMovingAverage","isHoltWintersMovingAverage","changeMetricSetting","SettingField","MovingAverageSettingsEditor","metric","dispatch","current","baseId","value","settingName","newValue","settings","model","e","alpha","target","beta","gamma","period","pad","checked","minimize"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/MovingAverageSettingsEditor.tsx"],"sourcesContent":["import { uniqueId } from 'lodash';\nimport React, { useRef } from 'react';\n\nimport { Input, InlineField, Select, InlineSwitch } from '@grafana/ui';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { movingAvgModelOptions } from '../../../../query_def';\nimport { isEWMAMovingAverage, isHoltMovingAverage, isHoltWintersMovingAverage, MovingAverage } from '../aggregations';\nimport { changeMetricSetting } from '../state/actions';\n\nimport { SettingField } from './SettingField';\n\ninterface Props {\n  metric: MovingAverage;\n}\n\n// The way we handle changes for those settings is not ideal compared to the other components in the editor\n// FIXME: using `changeMetricSetting` will cause an error when switching from models that have different options\n// as they might be incompatible. We should clear all other options on model change.\nexport const MovingAverageSettingsEditor = ({ metric }: Props) => {\n  const dispatch = useDispatch();\n  const { current: baseId } = useRef(uniqueId('es-moving-avg-'));\n\n  return (\n    <>\n      <InlineField label=\"Model\" labelWidth={16}>\n        <Select\n          inputId={`${baseId}-model`}\n          onChange={(value) => dispatch(changeMetricSetting({ metric, settingName: 'model', newValue: value.value }))}\n          options={movingAvgModelOptions}\n          value={metric.settings?.model}\n        />\n      </InlineField>\n\n      <SettingField label=\"Window\" settingName=\"window\" metric={metric} placeholder=\"5\" />\n\n      <SettingField label=\"Predict\" settingName=\"predict\" metric={metric} />\n\n      {(isEWMAMovingAverage(metric) || isHoltMovingAverage(metric) || isHoltWintersMovingAverage(metric)) && (\n        <InlineField label=\"Alpha\" labelWidth={16}>\n          <Input\n            id={`${baseId}-alpha`}\n            onBlur={(e) =>\n              dispatch(\n                changeMetricSetting({\n                  metric,\n                  settingName: 'settings',\n                  newValue: {\n                    ...metric.settings?.settings,\n                    alpha: e.target.value,\n                  },\n                })\n              )\n            }\n            defaultValue={metric.settings?.settings?.alpha}\n          />\n        </InlineField>\n      )}\n\n      {(isHoltMovingAverage(metric) || isHoltWintersMovingAverage(metric)) && (\n        <InlineField label=\"Beta\" labelWidth={16}>\n          <Input\n            id={`${baseId}-beta`}\n            onBlur={(e) =>\n              dispatch(\n                changeMetricSetting({\n                  metric,\n                  settingName: 'settings',\n                  newValue: {\n                    ...metric.settings?.settings,\n                    beta: e.target.value,\n                  },\n                })\n              )\n            }\n            defaultValue={metric.settings?.settings?.beta}\n          />\n        </InlineField>\n      )}\n\n      {isHoltWintersMovingAverage(metric) && (\n        <>\n          <InlineField label=\"Gamma\" labelWidth={16}>\n            <Input\n              id={`${baseId}-gamma`}\n              onBlur={(e) =>\n                dispatch(\n                  changeMetricSetting({\n                    metric,\n                    settingName: 'settings',\n                    newValue: {\n                      ...metric.settings?.settings,\n                      gamma: e.target.value,\n                    },\n                  })\n                )\n              }\n              defaultValue={metric.settings?.settings?.gamma}\n            />\n          </InlineField>\n          <InlineField label=\"Period\" labelWidth={16}>\n            <Input\n              id={`${baseId}-period`}\n              onBlur={(e) =>\n                dispatch(\n                  changeMetricSetting({\n                    metric,\n                    settingName: 'settings',\n                    newValue: {\n                      ...metric.settings?.settings,\n                      period: e.target.value!,\n                    },\n                  })\n                )\n              }\n              defaultValue={metric.settings?.settings?.period}\n            />\n          </InlineField>\n\n          <InlineField label=\"Pad\" labelWidth={16}>\n            <InlineSwitch\n              id={`${baseId}-pad`}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                dispatch(\n                  changeMetricSetting({\n                    metric,\n                    settingName: 'settings',\n                    newValue: { ...metric.settings?.settings, pad: e.target.checked },\n                  })\n                )\n              }\n              checked={!!metric.settings?.settings?.pad}\n            />\n          </InlineField>\n        </>\n      )}\n\n      {(isEWMAMovingAverage(metric) || isHoltMovingAverage(metric) || isHoltWintersMovingAverage(metric)) && (\n        <InlineField label=\"Minimize\" labelWidth={16}>\n          <InlineSwitch\n            id={`${baseId}-minimize`}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              dispatch(changeMetricSetting({ metric, settingName: 'minimize', newValue: e.target.checked }))\n            }\n            checked={!!metric.settings?.minimize}\n          />\n        </InlineField>\n      )}\n    </>\n  );\n};\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AAEA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,MAA7B,EAAqCC,YAArC,QAAyD,aAAzD;AAEA,SAASC,WAAT,QAA4B,uCAA5B;AACA,SAASC,qBAAT,QAAsC,uBAAtC;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,0BAAnD,QAAoG,iBAApG;AACA,SAASC,mBAAT,QAAoC,kBAApC;AAEA,SAASC,YAAT,QAA6B,gBAA7B;;;;AAMA;AACA;AACA;AACA,OAAO,MAAMC,2BAA2B,GAAG,CAAC;EAAEC;AAAF,CAAD,KAAuB;EAAA;;EAChE,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;EACA,MAAM;IAAEU,OAAO,EAAEC;EAAX,IAAsBhB,MAAM,CAACF,QAAQ,CAAC,gBAAD,CAAT,CAAlC;EAEA,oBACE;IAAA,wBACE,KAAC,WAAD;MAAa,KAAK,EAAC,OAAnB;MAA2B,UAAU,EAAE,EAAvC;MAAA,uBACE,KAAC,MAAD;QACE,OAAO,EAAG,GAAEkB,MAAO,QADrB;QAEE,QAAQ,EAAGC,KAAD,IAAWH,QAAQ,CAACJ,mBAAmB,CAAC;UAAEG,MAAF;UAAUK,WAAW,EAAE,OAAvB;UAAgCC,QAAQ,EAAEF,KAAK,CAACA;QAAhD,CAAD,CAApB,CAF/B;QAGE,OAAO,EAAEX,qBAHX;QAIE,KAAK,sBAAEO,MAAM,CAACO,QAAT,qDAAE,iBAAiBC;MAJ1B;IADF,EADF,eAUE,KAAC,YAAD;MAAc,KAAK,EAAC,QAApB;MAA6B,WAAW,EAAC,QAAzC;MAAkD,MAAM,EAAER,MAA1D;MAAkE,WAAW,EAAC;IAA9E,EAVF,eAYE,KAAC,YAAD;MAAc,KAAK,EAAC,SAApB;MAA8B,WAAW,EAAC,SAA1C;MAAoD,MAAM,EAAEA;IAA5D,EAZF,EAcG,CAACN,mBAAmB,CAACM,MAAD,CAAnB,IAA+BL,mBAAmB,CAACK,MAAD,CAAlD,IAA8DJ,0BAA0B,CAACI,MAAD,CAAzF,kBACC,KAAC,WAAD;MAAa,KAAK,EAAC,OAAnB;MAA2B,UAAU,EAAE,EAAvC;MAAA,uBACE,KAAC,KAAD;QACE,EAAE,EAAG,GAAEG,MAAO,QADhB;QAEE,MAAM,EAAGM,CAAD;UAAA;;UAAA,OACNR,QAAQ,CACNJ,mBAAmB,CAAC;YAClBG,MADkB;YAElBK,WAAW,EAAE,UAFK;YAGlBC,QAAQ,yCACHN,MAAM,CAACO,QADJ,sDACH,kBAAiBA,QADd;cAENG,KAAK,EAAED,CAAC,CAACE,MAAF,CAASP;YAFV;UAHU,CAAD,CADb,CADF;QAAA,CAFV;QAcE,YAAY,uBAAEJ,MAAM,CAACO,QAAT,+EAAE,kBAAiBA,QAAnB,0DAAE,sBAA2BG;MAd3C;IADF,EAfJ,EAmCG,CAACf,mBAAmB,CAACK,MAAD,CAAnB,IAA+BJ,0BAA0B,CAACI,MAAD,CAA1D,kBACC,KAAC,WAAD;MAAa,KAAK,EAAC,MAAnB;MAA0B,UAAU,EAAE,EAAtC;MAAA,uBACE,KAAC,KAAD;QACE,EAAE,EAAG,GAAEG,MAAO,OADhB;QAEE,MAAM,EAAGM,CAAD;UAAA;;UAAA,OACNR,QAAQ,CACNJ,mBAAmB,CAAC;YAClBG,MADkB;YAElBK,WAAW,EAAE,UAFK;YAGlBC,QAAQ,yCACHN,MAAM,CAACO,QADJ,sDACH,kBAAiBA,QADd;cAENK,IAAI,EAAEH,CAAC,CAACE,MAAF,CAASP;YAFT;UAHU,CAAD,CADb,CADF;QAAA,CAFV;QAcE,YAAY,uBAAEJ,MAAM,CAACO,QAAT,+EAAE,kBAAiBA,QAAnB,0DAAE,sBAA2BK;MAd3C;IADF,EApCJ,EAwDGhB,0BAA0B,CAACI,MAAD,CAA1B,iBACC;MAAA,wBACE,KAAC,WAAD;QAAa,KAAK,EAAC,OAAnB;QAA2B,UAAU,EAAE,EAAvC;QAAA,uBACE,KAAC,KAAD;UACE,EAAE,EAAG,GAAEG,MAAO,QADhB;UAEE,MAAM,EAAGM,CAAD;YAAA;;YAAA,OACNR,QAAQ,CACNJ,mBAAmB,CAAC;cAClBG,MADkB;cAElBK,WAAW,EAAE,UAFK;cAGlBC,QAAQ,yCACHN,MAAM,CAACO,QADJ,sDACH,kBAAiBA,QADd;gBAENM,KAAK,EAAEJ,CAAC,CAACE,MAAF,CAASP;cAFV;YAHU,CAAD,CADb,CADF;UAAA,CAFV;UAcE,YAAY,uBAAEJ,MAAM,CAACO,QAAT,+EAAE,kBAAiBA,QAAnB,0DAAE,sBAA2BM;QAd3C;MADF,EADF,eAmBE,KAAC,WAAD;QAAa,KAAK,EAAC,QAAnB;QAA4B,UAAU,EAAE,EAAxC;QAAA,uBACE,KAAC,KAAD;UACE,EAAE,EAAG,GAAEV,MAAO,SADhB;UAEE,MAAM,EAAGM,CAAD;YAAA;;YAAA,OACNR,QAAQ,CACNJ,mBAAmB,CAAC;cAClBG,MADkB;cAElBK,WAAW,EAAE,UAFK;cAGlBC,QAAQ,yCACHN,MAAM,CAACO,QADJ,sDACH,kBAAiBA,QADd;gBAENO,MAAM,EAAEL,CAAC,CAACE,MAAF,CAASP;cAFX;YAHU,CAAD,CADb,CADF;UAAA,CAFV;UAcE,YAAY,uBAAEJ,MAAM,CAACO,QAAT,+EAAE,kBAAiBA,QAAnB,0DAAE,sBAA2BO;QAd3C;MADF,EAnBF,eAsCE,KAAC,WAAD;QAAa,KAAK,EAAC,KAAnB;QAAyB,UAAU,EAAE,EAArC;QAAA,uBACE,KAAC,YAAD;UACE,EAAE,EAAG,GAAEX,MAAO,MADhB;UAEE,QAAQ,EAAGM,CAAD;YAAA;;YAAA,OACRR,QAAQ,CACNJ,mBAAmB,CAAC;cAClBG,MADkB;cAElBK,WAAW,EAAE,UAFK;cAGlBC,QAAQ,0CAAON,MAAM,CAACO,QAAd,uDAAO,mBAAiBA,QAAxB;gBAAkCQ,GAAG,EAAEN,CAAC,CAACE,MAAF,CAASK;cAAhD;YAHU,CAAD,CADb,CADA;UAAA,CAFZ;UAWE,OAAO,EAAE,CAAC,wBAAChB,MAAM,CAACO,QAAR,wEAAC,mBAAiBA,QAAlB,kDAAC,sBAA2BQ,GAA5B;QAXZ;MADF,EAtCF;IAAA,EAzDJ,EAiHG,CAACrB,mBAAmB,CAACM,MAAD,CAAnB,IAA+BL,mBAAmB,CAACK,MAAD,CAAlD,IAA8DJ,0BAA0B,CAACI,MAAD,CAAzF,kBACC,KAAC,WAAD;MAAa,KAAK,EAAC,UAAnB;MAA8B,UAAU,EAAE,EAA1C;MAAA,uBACE,KAAC,YAAD;QACE,EAAE,EAAG,GAAEG,MAAO,WADhB;QAEE,QAAQ,EAAGM,CAAD,IACRR,QAAQ,CAACJ,mBAAmB,CAAC;UAAEG,MAAF;UAAUK,WAAW,EAAE,UAAvB;UAAmCC,QAAQ,EAAEG,CAAC,CAACE,MAAF,CAASK;QAAtD,CAAD,CAApB,CAHZ;QAKE,OAAO,EAAE,CAAC,wBAAChB,MAAM,CAACO,QAAR,+CAAC,mBAAiBU,QAAlB;MALZ;IADF,EAlHJ;EAAA,EADF;AA+HD,CAnIM"},"metadata":{},"sourceType":"module"}