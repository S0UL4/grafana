{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport { sortBy } from 'lodash';\nimport React, { useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { dateMath, dateTime } from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv } from '@grafana/runtime';\nimport { Card, CustomScrollbar, Icon, stylesFactory, useStyles } from '@grafana/ui';\nimport alertDef from 'app/features/alerting/state/alertDef';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { ShowOption, SortOrder } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function AlertList(props) {\n  const [noAlertsMessage, setNoAlertsMessage] = useState('');\n  const currentAlertState = useAsync(async () => {\n    var _getDashboardSrv$getC;\n\n    if (props.options.showOptions !== ShowOption.Current) {\n      return;\n    }\n\n    const params = {\n      state: getStateFilter(props.options.stateFilter)\n    };\n    const panel = (_getDashboardSrv$getC = getDashboardSrv().getCurrent()) === null || _getDashboardSrv$getC === void 0 ? void 0 : _getDashboardSrv$getC.getPanelById(props.id);\n\n    if (props.options.alertName) {\n      params.query = getTemplateSrv().replace(props.options.alertName, panel.scopedVars);\n    }\n\n    if (props.options.folderId >= 0) {\n      params.folderId = props.options.folderId;\n    }\n\n    if (props.options.dashboardTitle) {\n      params.dashboardQuery = props.options.dashboardTitle;\n    }\n\n    if (props.options.dashboardAlerts) {\n      var _getDashboardSrv$getC2;\n\n      params.dashboardId = (_getDashboardSrv$getC2 = getDashboardSrv().getCurrent()) === null || _getDashboardSrv$getC2 === void 0 ? void 0 : _getDashboardSrv$getC2.id;\n    }\n\n    if (props.options.tags) {\n      params.dashboardTag = props.options.tags;\n    }\n\n    const alerts = await getBackendSrv().get('/api/alerts', params, `alert-list-get-current-alert-state-${props.id}`);\n    let currentAlerts = sortAlerts(props.options.sortOrder, alerts.map(al => Object.assign({}, al, {\n      stateModel: alertDef.getStateDisplayModel(al.state),\n      newStateDateAgo: dateTime(al.newStateDate).locale('en').fromNow(true)\n    })));\n\n    if (currentAlerts.length > props.options.maxItems) {\n      currentAlerts = currentAlerts.slice(0, props.options.maxItems);\n    }\n\n    setNoAlertsMessage(currentAlerts.length === 0 ? 'No alerts' : '');\n    return currentAlerts;\n  }, [props.options.showOptions, props.options.stateFilter.alerting, props.options.stateFilter.execution_error, props.options.stateFilter.no_data, props.options.stateFilter.ok, props.options.stateFilter.paused, props.options.stateFilter.pending, props.options.maxItems, props.options.tags, props.options.dashboardAlerts, props.options.dashboardTitle, props.options.folderId, props.options.alertName, props.options.sortOrder, props.timeRange]);\n  const recentStateChanges = useAsync(async () => {\n    if (props.options.showOptions !== ShowOption.RecentChanges) {\n      return;\n    }\n\n    const params = {\n      limit: props.options.maxItems,\n      type: 'alert',\n      newState: getStateFilter(props.options.stateFilter)\n    };\n    const currentDashboard = getDashboardSrv().getCurrent();\n\n    if (props.options.dashboardAlerts) {\n      params.dashboardId = currentDashboard === null || currentDashboard === void 0 ? void 0 : currentDashboard.id;\n    }\n\n    params.from = dateMath.parse(currentDashboard === null || currentDashboard === void 0 ? void 0 : currentDashboard.time.from).unix() * 1000;\n    params.to = dateMath.parse(currentDashboard === null || currentDashboard === void 0 ? void 0 : currentDashboard.time.to).unix() * 1000;\n    const data = await getBackendSrv().get('/api/annotations', params, `alert-list-get-state-changes-${props.id}`);\n    const alertHistory = sortAlerts(props.options.sortOrder, data.map(al => {\n      return Object.assign({}, al, {\n        time: currentDashboard === null || currentDashboard === void 0 ? void 0 : currentDashboard.formatDate(al.time, 'MMM D, YYYY HH:mm:ss'),\n        stateModel: alertDef.getStateDisplayModel(al.newState),\n        info: alertDef.getAlertAnnotationInfo(al)\n      });\n    }));\n    setNoAlertsMessage(alertHistory.length === 0 ? 'No alerts in current time range' : '');\n    return alertHistory;\n  }, [props.options.showOptions, props.options.maxItems, props.options.stateFilter.alerting, props.options.stateFilter.execution_error, props.options.stateFilter.no_data, props.options.stateFilter.ok, props.options.stateFilter.paused, props.options.stateFilter.pending, props.options.dashboardAlerts, props.options.sortOrder]);\n  const styles = useStyles(getStyles);\n  return /*#__PURE__*/_jsx(CustomScrollbar, {\n    autoHeightMin: \"100%\",\n    autoHeightMax: \"100%\",\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.container,\n      children: [noAlertsMessage && /*#__PURE__*/_jsx(\"div\", {\n        className: styles.noAlertsMessage,\n        children: noAlertsMessage\n      }), /*#__PURE__*/_jsx(\"section\", {\n        children: /*#__PURE__*/_jsx(\"ol\", {\n          className: styles.alertRuleList,\n          children: props.options.showOptions === ShowOption.Current ? !currentAlertState.loading && currentAlertState.value && currentAlertState.value.map(alert => /*#__PURE__*/_jsx(\"li\", {\n            className: styles.alertRuleItem,\n            children: /*#__PURE__*/_jsxs(Card, {\n              href: `${alert.url}?viewPanel=${alert.panelId}`,\n              className: styles.cardContainer,\n              children: [/*#__PURE__*/_jsx(Card.Heading, {\n                children: alert.name\n              }), /*#__PURE__*/_jsx(Card.Figure, {\n                className: cx(styles.alertRuleItemIcon, alert.stateModel.stateClass),\n                children: /*#__PURE__*/_jsx(Icon, {\n                  name: alert.stateModel.iconClass,\n                  size: \"xl\",\n                  className: styles.alertIcon\n                })\n              }), /*#__PURE__*/_jsx(Card.Meta, {\n                children: /*#__PURE__*/_jsxs(\"div\", {\n                  className: styles.alertRuleItemText,\n                  children: [/*#__PURE__*/_jsx(\"span\", {\n                    className: alert.stateModel.stateClass,\n                    children: alert.stateModel.text\n                  }), /*#__PURE__*/_jsxs(\"span\", {\n                    className: styles.alertRuleItemTime,\n                    children: [\" for \", alert.newStateDateAgo]\n                  })]\n                })\n              })]\n            })\n          }, `alert-${alert.id}`)) : !recentStateChanges.loading && recentStateChanges.value && recentStateChanges.value.map(alert => /*#__PURE__*/_jsx(\"li\", {\n            className: styles.alertRuleItem,\n            children: /*#__PURE__*/_jsxs(Card, {\n              className: styles.cardContainer,\n              children: [/*#__PURE__*/_jsx(Card.Heading, {\n                children: alert.alertName\n              }), /*#__PURE__*/_jsx(Card.Figure, {\n                className: cx(styles.alertRuleItemIcon, alert.stateModel.stateClass),\n                children: /*#__PURE__*/_jsx(Icon, {\n                  name: alert.stateModel.iconClass,\n                  size: \"xl\"\n                })\n              }), /*#__PURE__*/_jsxs(Card.Meta, {\n                children: [/*#__PURE__*/_jsx(\"span\", {\n                  className: cx(styles.alertRuleItemText, alert.stateModel.stateClass),\n                  children: alert.stateModel.text\n                }), /*#__PURE__*/_jsx(\"span\", {\n                  children: alert.time\n                }), alert.info && /*#__PURE__*/_jsx(\"span\", {\n                  className: styles.alertRuleItemInfo,\n                  children: alert.info\n                })]\n              })]\n            })\n          }, `alert-${alert.id}`))\n        })\n      })]\n    })\n  });\n}\n\nfunction sortAlerts(sortOrder, alerts) {\n  if (sortOrder === SortOrder.Importance) {\n    // @ts-ignore\n    return sortBy(alerts, a => alertDef.alertStateSortScore[a.state || a.newState]);\n  } else if (sortOrder === SortOrder.TimeAsc) {\n    return sortBy(alerts, a => new Date(a.newStateDate || a.time));\n  } else if (sortOrder === SortOrder.TimeDesc) {\n    return sortBy(alerts, a => new Date(a.newStateDate || a.time)).reverse();\n  }\n\n  const result = sortBy(alerts, a => (a.name || a.alertName).toLowerCase());\n\n  if (sortOrder === SortOrder.AlphaDesc) {\n    result.reverse();\n  }\n\n  return result;\n}\n\nfunction getStateFilter(stateFilter) {\n  return Object.entries(stateFilter).filter(([_, val]) => val).map(([key, _]) => key);\n}\n\nconst getStyles = stylesFactory(theme => ({\n  cardContainer: css`\n    padding: ${theme.spacing.xs} 0 ${theme.spacing.xxs} 0;\n    line-height: ${theme.typography.lineHeight.md};\n    margin-bottom: 0px;\n  `,\n  container: css`\n    overflow-y: auto;\n    height: 100%;\n  `,\n  alertRuleList: css`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    list-style-type: none;\n  `,\n  alertRuleItem: css`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    background: ${theme.colors.bg2};\n    padding: ${theme.spacing.xs} ${theme.spacing.sm};\n    border-radius: ${theme.border.radius.md};\n    margin-bottom: ${theme.spacing.xs};\n  `,\n  alertRuleItemIcon: css`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${theme.spacing.xl};\n    padding: 0 ${theme.spacing.xs} 0 ${theme.spacing.xxs};\n    margin-right: 0px;\n  `,\n  alertRuleItemText: css`\n    font-weight: ${theme.typography.weight.bold};\n    font-size: ${theme.typography.size.sm};\n    margin: 0;\n  `,\n  alertRuleItemTime: css`\n    color: ${theme.colors.textWeak};\n    font-weight: normal;\n    white-space: nowrap;\n  `,\n  alertRuleItemInfo: css`\n    font-weight: normal;\n    flex-grow: 2;\n    display: flex;\n    align-items: flex-end;\n  `,\n  noAlertsMessage: css`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n  `,\n  alertIcon: css`\n    margin-right: ${theme.spacing.xs};\n  `\n}));","map":{"version":3,"names":["css","cx","sortBy","React","useState","useAsync","dateMath","dateTime","getBackendSrv","getTemplateSrv","Card","CustomScrollbar","Icon","stylesFactory","useStyles","alertDef","getDashboardSrv","ShowOption","SortOrder","AlertList","props","noAlertsMessage","setNoAlertsMessage","currentAlertState","options","showOptions","Current","params","state","getStateFilter","stateFilter","panel","getCurrent","getPanelById","id","alertName","query","replace","scopedVars","folderId","dashboardTitle","dashboardQuery","dashboardAlerts","dashboardId","tags","dashboardTag","alerts","get","currentAlerts","sortAlerts","sortOrder","map","al","stateModel","getStateDisplayModel","newStateDateAgo","newStateDate","locale","fromNow","length","maxItems","slice","alerting","execution_error","no_data","ok","paused","pending","timeRange","recentStateChanges","RecentChanges","limit","type","newState","currentDashboard","from","parse","time","unix","to","data","alertHistory","formatDate","info","getAlertAnnotationInfo","styles","getStyles","container","alertRuleList","loading","value","alert","alertRuleItem","url","panelId","cardContainer","name","alertRuleItemIcon","stateClass","iconClass","alertIcon","alertRuleItemText","text","alertRuleItemTime","alertRuleItemInfo","Importance","a","alertStateSortScore","TimeAsc","Date","TimeDesc","reverse","result","toLowerCase","AlphaDesc","Object","entries","filter","_","val","key","theme","spacing","xs","xxs","typography","lineHeight","md","colors","bg2","sm","border","radius","xl","weight","bold","size","textWeak"],"sources":["/home/soula/grafana/public/app/plugins/panel/alertlist/AlertList.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { sortBy } from 'lodash';\nimport React, { useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { dateMath, dateTime, GrafanaTheme, PanelProps } from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv } from '@grafana/runtime';\nimport { Card, CustomScrollbar, Icon, stylesFactory, useStyles } from '@grafana/ui';\nimport alertDef from 'app/features/alerting/state/alertDef';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { AlertRuleDTO, AnnotationItemDTO } from 'app/types';\n\nimport { AlertListOptions, ShowOption, SortOrder } from './types';\n\nexport function AlertList(props: PanelProps<AlertListOptions>) {\n  const [noAlertsMessage, setNoAlertsMessage] = useState('');\n\n  const currentAlertState = useAsync(async () => {\n    if (props.options.showOptions !== ShowOption.Current) {\n      return;\n    }\n\n    const params: any = {\n      state: getStateFilter(props.options.stateFilter),\n    };\n    const panel = getDashboardSrv().getCurrent()?.getPanelById(props.id)!;\n\n    if (props.options.alertName) {\n      params.query = getTemplateSrv().replace(props.options.alertName, panel.scopedVars);\n    }\n\n    if (props.options.folderId >= 0) {\n      params.folderId = props.options.folderId;\n    }\n\n    if (props.options.dashboardTitle) {\n      params.dashboardQuery = props.options.dashboardTitle;\n    }\n\n    if (props.options.dashboardAlerts) {\n      params.dashboardId = getDashboardSrv().getCurrent()?.id;\n    }\n\n    if (props.options.tags) {\n      params.dashboardTag = props.options.tags;\n    }\n\n    const alerts: AlertRuleDTO[] = await getBackendSrv().get(\n      '/api/alerts',\n      params,\n      `alert-list-get-current-alert-state-${props.id}`\n    );\n    let currentAlerts = sortAlerts(\n      props.options.sortOrder,\n      alerts.map((al) => ({\n        ...al,\n        stateModel: alertDef.getStateDisplayModel(al.state),\n        newStateDateAgo: dateTime(al.newStateDate).locale('en').fromNow(true),\n      }))\n    );\n\n    if (currentAlerts.length > props.options.maxItems) {\n      currentAlerts = currentAlerts.slice(0, props.options.maxItems);\n    }\n    setNoAlertsMessage(currentAlerts.length === 0 ? 'No alerts' : '');\n\n    return currentAlerts;\n  }, [\n    props.options.showOptions,\n    props.options.stateFilter.alerting,\n    props.options.stateFilter.execution_error,\n    props.options.stateFilter.no_data,\n    props.options.stateFilter.ok,\n    props.options.stateFilter.paused,\n    props.options.stateFilter.pending,\n    props.options.maxItems,\n    props.options.tags,\n    props.options.dashboardAlerts,\n    props.options.dashboardTitle,\n    props.options.folderId,\n    props.options.alertName,\n    props.options.sortOrder,\n    props.timeRange,\n  ]);\n\n  const recentStateChanges = useAsync(async () => {\n    if (props.options.showOptions !== ShowOption.RecentChanges) {\n      return;\n    }\n\n    const params: any = {\n      limit: props.options.maxItems,\n      type: 'alert',\n      newState: getStateFilter(props.options.stateFilter),\n    };\n    const currentDashboard = getDashboardSrv().getCurrent();\n\n    if (props.options.dashboardAlerts) {\n      params.dashboardId = currentDashboard?.id;\n    }\n\n    params.from = dateMath.parse(currentDashboard?.time.from)!.unix() * 1000;\n    params.to = dateMath.parse(currentDashboard?.time.to)!.unix() * 1000;\n\n    const data: AnnotationItemDTO[] = await getBackendSrv().get(\n      '/api/annotations',\n      params,\n      `alert-list-get-state-changes-${props.id}`\n    );\n    const alertHistory = sortAlerts(\n      props.options.sortOrder,\n      data.map((al) => {\n        return {\n          ...al,\n          time: currentDashboard?.formatDate(al.time, 'MMM D, YYYY HH:mm:ss'),\n          stateModel: alertDef.getStateDisplayModel(al.newState),\n          info: alertDef.getAlertAnnotationInfo(al),\n        };\n      })\n    );\n\n    setNoAlertsMessage(alertHistory.length === 0 ? 'No alerts in current time range' : '');\n    return alertHistory;\n  }, [\n    props.options.showOptions,\n    props.options.maxItems,\n    props.options.stateFilter.alerting,\n    props.options.stateFilter.execution_error,\n    props.options.stateFilter.no_data,\n    props.options.stateFilter.ok,\n    props.options.stateFilter.paused,\n    props.options.stateFilter.pending,\n    props.options.dashboardAlerts,\n    props.options.sortOrder,\n  ]);\n\n  const styles = useStyles(getStyles);\n\n  return (\n    <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n      <div className={styles.container}>\n        {noAlertsMessage && <div className={styles.noAlertsMessage}>{noAlertsMessage}</div>}\n        <section>\n          <ol className={styles.alertRuleList}>\n            {props.options.showOptions === ShowOption.Current\n              ? !currentAlertState.loading &&\n                currentAlertState.value &&\n                currentAlertState.value!.map((alert) => (\n                  <li className={styles.alertRuleItem} key={`alert-${alert.id}`}>\n                    <Card href={`${alert.url}?viewPanel=${alert.panelId}`} className={styles.cardContainer}>\n                      <Card.Heading>{alert.name}</Card.Heading>\n                      <Card.Figure className={cx(styles.alertRuleItemIcon, alert.stateModel.stateClass)}>\n                        <Icon name={alert.stateModel.iconClass} size=\"xl\" className={styles.alertIcon} />\n                      </Card.Figure>\n                      <Card.Meta>\n                        <div className={styles.alertRuleItemText}>\n                          <span className={alert.stateModel.stateClass}>{alert.stateModel.text}</span>\n                          <span className={styles.alertRuleItemTime}> for {alert.newStateDateAgo}</span>\n                        </div>\n                      </Card.Meta>\n                    </Card>\n                  </li>\n                ))\n              : !recentStateChanges.loading &&\n                recentStateChanges.value &&\n                recentStateChanges.value.map((alert) => (\n                  <li className={styles.alertRuleItem} key={`alert-${alert.id}`}>\n                    <Card className={styles.cardContainer}>\n                      <Card.Heading>{alert.alertName}</Card.Heading>\n                      <Card.Figure className={cx(styles.alertRuleItemIcon, alert.stateModel.stateClass)}>\n                        <Icon name={alert.stateModel.iconClass} size=\"xl\" />\n                      </Card.Figure>\n                      <Card.Meta>\n                        <span className={cx(styles.alertRuleItemText, alert.stateModel.stateClass)}>\n                          {alert.stateModel.text}\n                        </span>\n                        <span>{alert.time}</span>\n                        {alert.info && <span className={styles.alertRuleItemInfo}>{alert.info}</span>}\n                      </Card.Meta>\n                    </Card>\n                  </li>\n                ))}\n          </ol>\n        </section>\n      </div>\n    </CustomScrollbar>\n  );\n}\n\nfunction sortAlerts(sortOrder: SortOrder, alerts: any[]) {\n  if (sortOrder === SortOrder.Importance) {\n    // @ts-ignore\n    return sortBy(alerts, (a) => alertDef.alertStateSortScore[a.state || a.newState]);\n  } else if (sortOrder === SortOrder.TimeAsc) {\n    return sortBy(alerts, (a) => new Date(a.newStateDate || a.time));\n  } else if (sortOrder === SortOrder.TimeDesc) {\n    return sortBy(alerts, (a) => new Date(a.newStateDate || a.time)).reverse();\n  }\n\n  const result = sortBy(alerts, (a) => (a.name || a.alertName).toLowerCase());\n  if (sortOrder === SortOrder.AlphaDesc) {\n    result.reverse();\n  }\n\n  return result;\n}\n\nfunction getStateFilter(stateFilter: Record<string, boolean>) {\n  return Object.entries(stateFilter)\n    .filter(([_, val]) => val)\n    .map(([key, _]) => key);\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  cardContainer: css`\n    padding: ${theme.spacing.xs} 0 ${theme.spacing.xxs} 0;\n    line-height: ${theme.typography.lineHeight.md};\n    margin-bottom: 0px;\n  `,\n  container: css`\n    overflow-y: auto;\n    height: 100%;\n  `,\n  alertRuleList: css`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    list-style-type: none;\n  `,\n  alertRuleItem: css`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    background: ${theme.colors.bg2};\n    padding: ${theme.spacing.xs} ${theme.spacing.sm};\n    border-radius: ${theme.border.radius.md};\n    margin-bottom: ${theme.spacing.xs};\n  `,\n  alertRuleItemIcon: css`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: ${theme.spacing.xl};\n    padding: 0 ${theme.spacing.xs} 0 ${theme.spacing.xxs};\n    margin-right: 0px;\n  `,\n  alertRuleItemText: css`\n    font-weight: ${theme.typography.weight.bold};\n    font-size: ${theme.typography.size.sm};\n    margin: 0;\n  `,\n  alertRuleItemTime: css`\n    color: ${theme.colors.textWeak};\n    font-weight: normal;\n    white-space: nowrap;\n  `,\n  alertRuleItemInfo: css`\n    font-weight: normal;\n    flex-grow: 2;\n    display: flex;\n    align-items: flex-end;\n  `,\n  noAlertsMessage: css`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n  `,\n  alertIcon: css`\n    margin-right: ${theme.spacing.xs};\n  `,\n}));\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,SAASC,QAAT,EAAmBC,QAAnB,QAA6D,eAA7D;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,kBAA9C;AACA,SAASC,IAAT,EAAeC,eAAf,EAAgCC,IAAhC,EAAsCC,aAAtC,EAAqDC,SAArD,QAAsE,aAAtE;AACA,OAAOC,QAAP,MAAqB,sCAArB;AACA,SAASC,eAAT,QAAgC,8CAAhC;AAGA,SAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,SAAxD;;;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAAwD;EAC7D,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwClB,QAAQ,CAAC,EAAD,CAAtD;EAEA,MAAMmB,iBAAiB,GAAGlB,QAAQ,CAAC,YAAY;IAAA;;IAC7C,IAAIe,KAAK,CAACI,OAAN,CAAcC,WAAd,KAA8BR,UAAU,CAACS,OAA7C,EAAsD;MACpD;IACD;;IAED,MAAMC,MAAW,GAAG;MAClBC,KAAK,EAAEC,cAAc,CAACT,KAAK,CAACI,OAAN,CAAcM,WAAf;IADH,CAApB;IAGA,MAAMC,KAAK,4BAAGf,eAAe,GAAGgB,UAAlB,EAAH,0DAAG,sBAAgCC,YAAhC,CAA6Cb,KAAK,CAACc,EAAnD,CAAd;;IAEA,IAAId,KAAK,CAACI,OAAN,CAAcW,SAAlB,EAA6B;MAC3BR,MAAM,CAACS,KAAP,GAAe3B,cAAc,GAAG4B,OAAjB,CAAyBjB,KAAK,CAACI,OAAN,CAAcW,SAAvC,EAAkDJ,KAAK,CAACO,UAAxD,CAAf;IACD;;IAED,IAAIlB,KAAK,CAACI,OAAN,CAAce,QAAd,IAA0B,CAA9B,EAAiC;MAC/BZ,MAAM,CAACY,QAAP,GAAkBnB,KAAK,CAACI,OAAN,CAAce,QAAhC;IACD;;IAED,IAAInB,KAAK,CAACI,OAAN,CAAcgB,cAAlB,EAAkC;MAChCb,MAAM,CAACc,cAAP,GAAwBrB,KAAK,CAACI,OAAN,CAAcgB,cAAtC;IACD;;IAED,IAAIpB,KAAK,CAACI,OAAN,CAAckB,eAAlB,EAAmC;MAAA;;MACjCf,MAAM,CAACgB,WAAP,6BAAqB3B,eAAe,GAAGgB,UAAlB,EAArB,2DAAqB,uBAAgCE,EAArD;IACD;;IAED,IAAId,KAAK,CAACI,OAAN,CAAcoB,IAAlB,EAAwB;MACtBjB,MAAM,CAACkB,YAAP,GAAsBzB,KAAK,CAACI,OAAN,CAAcoB,IAApC;IACD;;IAED,MAAME,MAAsB,GAAG,MAAMtC,aAAa,GAAGuC,GAAhB,CACnC,aADmC,EAEnCpB,MAFmC,EAGlC,sCAAqCP,KAAK,CAACc,EAAG,EAHZ,CAArC;IAKA,IAAIc,aAAa,GAAGC,UAAU,CAC5B7B,KAAK,CAACI,OAAN,CAAc0B,SADc,EAE5BJ,MAAM,CAACK,GAAP,CAAYC,EAAD,sBACNA,EADM;MAETC,UAAU,EAAEtC,QAAQ,CAACuC,oBAAT,CAA8BF,EAAE,CAACxB,KAAjC,CAFH;MAGT2B,eAAe,EAAEhD,QAAQ,CAAC6C,EAAE,CAACI,YAAJ,CAAR,CAA0BC,MAA1B,CAAiC,IAAjC,EAAuCC,OAAvC,CAA+C,IAA/C;IAHR,EAAX,CAF4B,CAA9B;;IASA,IAAIV,aAAa,CAACW,MAAd,GAAuBvC,KAAK,CAACI,OAAN,CAAcoC,QAAzC,EAAmD;MACjDZ,aAAa,GAAGA,aAAa,CAACa,KAAd,CAAoB,CAApB,EAAuBzC,KAAK,CAACI,OAAN,CAAcoC,QAArC,CAAhB;IACD;;IACDtC,kBAAkB,CAAC0B,aAAa,CAACW,MAAd,KAAyB,CAAzB,GAA6B,WAA7B,GAA2C,EAA5C,CAAlB;IAEA,OAAOX,aAAP;EACD,CAlDiC,EAkD/B,CACD5B,KAAK,CAACI,OAAN,CAAcC,WADb,EAEDL,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BgC,QAFzB,EAGD1C,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BiC,eAHzB,EAID3C,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BkC,OAJzB,EAKD5C,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BmC,EALzB,EAMD7C,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BoC,MANzB,EAOD9C,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BqC,OAPzB,EAQD/C,KAAK,CAACI,OAAN,CAAcoC,QARb,EASDxC,KAAK,CAACI,OAAN,CAAcoB,IATb,EAUDxB,KAAK,CAACI,OAAN,CAAckB,eAVb,EAWDtB,KAAK,CAACI,OAAN,CAAcgB,cAXb,EAYDpB,KAAK,CAACI,OAAN,CAAce,QAZb,EAaDnB,KAAK,CAACI,OAAN,CAAcW,SAbb,EAcDf,KAAK,CAACI,OAAN,CAAc0B,SAdb,EAeD9B,KAAK,CAACgD,SAfL,CAlD+B,CAAlC;EAoEA,MAAMC,kBAAkB,GAAGhE,QAAQ,CAAC,YAAY;IAC9C,IAAIe,KAAK,CAACI,OAAN,CAAcC,WAAd,KAA8BR,UAAU,CAACqD,aAA7C,EAA4D;MAC1D;IACD;;IAED,MAAM3C,MAAW,GAAG;MAClB4C,KAAK,EAAEnD,KAAK,CAACI,OAAN,CAAcoC,QADH;MAElBY,IAAI,EAAE,OAFY;MAGlBC,QAAQ,EAAE5C,cAAc,CAACT,KAAK,CAACI,OAAN,CAAcM,WAAf;IAHN,CAApB;IAKA,MAAM4C,gBAAgB,GAAG1D,eAAe,GAAGgB,UAAlB,EAAzB;;IAEA,IAAIZ,KAAK,CAACI,OAAN,CAAckB,eAAlB,EAAmC;MACjCf,MAAM,CAACgB,WAAP,GAAqB+B,gBAArB,aAAqBA,gBAArB,uBAAqBA,gBAAgB,CAAExC,EAAvC;IACD;;IAEDP,MAAM,CAACgD,IAAP,GAAcrE,QAAQ,CAACsE,KAAT,CAAeF,gBAAf,aAAeA,gBAAf,uBAAeA,gBAAgB,CAAEG,IAAlB,CAAuBF,IAAtC,EAA6CG,IAA7C,KAAsD,IAApE;IACAnD,MAAM,CAACoD,EAAP,GAAYzE,QAAQ,CAACsE,KAAT,CAAeF,gBAAf,aAAeA,gBAAf,uBAAeA,gBAAgB,CAAEG,IAAlB,CAAuBE,EAAtC,EAA2CD,IAA3C,KAAoD,IAAhE;IAEA,MAAME,IAAyB,GAAG,MAAMxE,aAAa,GAAGuC,GAAhB,CACtC,kBADsC,EAEtCpB,MAFsC,EAGrC,gCAA+BP,KAAK,CAACc,EAAG,EAHH,CAAxC;IAKA,MAAM+C,YAAY,GAAGhC,UAAU,CAC7B7B,KAAK,CAACI,OAAN,CAAc0B,SADe,EAE7B8B,IAAI,CAAC7B,GAAL,CAAUC,EAAD,IAAQ;MACf,yBACKA,EADL;QAEEyB,IAAI,EAAEH,gBAAF,aAAEA,gBAAF,uBAAEA,gBAAgB,CAAEQ,UAAlB,CAA6B9B,EAAE,CAACyB,IAAhC,EAAsC,sBAAtC,CAFR;QAGExB,UAAU,EAAEtC,QAAQ,CAACuC,oBAAT,CAA8BF,EAAE,CAACqB,QAAjC,CAHd;QAIEU,IAAI,EAAEpE,QAAQ,CAACqE,sBAAT,CAAgChC,EAAhC;MAJR;IAMD,CAPD,CAF6B,CAA/B;IAYA9B,kBAAkB,CAAC2D,YAAY,CAACtB,MAAb,KAAwB,CAAxB,GAA4B,iCAA5B,GAAgE,EAAjE,CAAlB;IACA,OAAOsB,YAAP;EACD,CAtCkC,EAsChC,CACD7D,KAAK,CAACI,OAAN,CAAcC,WADb,EAEDL,KAAK,CAACI,OAAN,CAAcoC,QAFb,EAGDxC,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BgC,QAHzB,EAID1C,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BiC,eAJzB,EAKD3C,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BkC,OALzB,EAMD5C,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BmC,EANzB,EAOD7C,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BoC,MAPzB,EAQD9C,KAAK,CAACI,OAAN,CAAcM,WAAd,CAA0BqC,OARzB,EASD/C,KAAK,CAACI,OAAN,CAAckB,eATb,EAUDtB,KAAK,CAACI,OAAN,CAAc0B,SAVb,CAtCgC,CAAnC;EAmDA,MAAMmC,MAAM,GAAGvE,SAAS,CAACwE,SAAD,CAAxB;EAEA,oBACE,KAAC,eAAD;IAAiB,aAAa,EAAC,MAA/B;IAAsC,aAAa,EAAC,MAApD;IAAA,uBACE;MAAK,SAAS,EAAED,MAAM,CAACE,SAAvB;MAAA,WACGlE,eAAe,iBAAI;QAAK,SAAS,EAAEgE,MAAM,CAAChE,eAAvB;QAAA,UAAyCA;MAAzC,EADtB,eAEE;QAAA,uBACE;UAAI,SAAS,EAAEgE,MAAM,CAACG,aAAtB;UAAA,UACGpE,KAAK,CAACI,OAAN,CAAcC,WAAd,KAA8BR,UAAU,CAACS,OAAzC,GACG,CAACH,iBAAiB,CAACkE,OAAnB,IACAlE,iBAAiB,CAACmE,KADlB,IAEAnE,iBAAiB,CAACmE,KAAlB,CAAyBvC,GAAzB,CAA8BwC,KAAD,iBAC3B;YAAI,SAAS,EAAEN,MAAM,CAACO,aAAtB;YAAA,uBACE,MAAC,IAAD;cAAM,IAAI,EAAG,GAAED,KAAK,CAACE,GAAI,cAAaF,KAAK,CAACG,OAAQ,EAApD;cAAuD,SAAS,EAAET,MAAM,CAACU,aAAzE;cAAA,wBACE,KAAC,IAAD,CAAM,OAAN;gBAAA,UAAeJ,KAAK,CAACK;cAArB,EADF,eAEE,KAAC,IAAD,CAAM,MAAN;gBAAa,SAAS,EAAE/F,EAAE,CAACoF,MAAM,CAACY,iBAAR,EAA2BN,KAAK,CAACtC,UAAN,CAAiB6C,UAA5C,CAA1B;gBAAA,uBACE,KAAC,IAAD;kBAAM,IAAI,EAAEP,KAAK,CAACtC,UAAN,CAAiB8C,SAA7B;kBAAwC,IAAI,EAAC,IAA7C;kBAAkD,SAAS,EAAEd,MAAM,CAACe;gBAApE;cADF,EAFF,eAKE,KAAC,IAAD,CAAM,IAAN;gBAAA,uBACE;kBAAK,SAAS,EAAEf,MAAM,CAACgB,iBAAvB;kBAAA,wBACE;oBAAM,SAAS,EAAEV,KAAK,CAACtC,UAAN,CAAiB6C,UAAlC;oBAAA,UAA+CP,KAAK,CAACtC,UAAN,CAAiBiD;kBAAhE,EADF,eAEE;oBAAM,SAAS,EAAEjB,MAAM,CAACkB,iBAAxB;oBAAA,oBAAiDZ,KAAK,CAACpC,eAAvD;kBAAA,EAFF;gBAAA;cADF,EALF;YAAA;UADF,GAA2C,SAAQoC,KAAK,CAACzD,EAAG,EAA5D,CADF,CAHH,GAmBG,CAACmC,kBAAkB,CAACoB,OAApB,IACApB,kBAAkB,CAACqB,KADnB,IAEArB,kBAAkB,CAACqB,KAAnB,CAAyBvC,GAAzB,CAA8BwC,KAAD,iBAC3B;YAAI,SAAS,EAAEN,MAAM,CAACO,aAAtB;YAAA,uBACE,MAAC,IAAD;cAAM,SAAS,EAAEP,MAAM,CAACU,aAAxB;cAAA,wBACE,KAAC,IAAD,CAAM,OAAN;gBAAA,UAAeJ,KAAK,CAACxD;cAArB,EADF,eAEE,KAAC,IAAD,CAAM,MAAN;gBAAa,SAAS,EAAElC,EAAE,CAACoF,MAAM,CAACY,iBAAR,EAA2BN,KAAK,CAACtC,UAAN,CAAiB6C,UAA5C,CAA1B;gBAAA,uBACE,KAAC,IAAD;kBAAM,IAAI,EAAEP,KAAK,CAACtC,UAAN,CAAiB8C,SAA7B;kBAAwC,IAAI,EAAC;gBAA7C;cADF,EAFF,eAKE,MAAC,IAAD,CAAM,IAAN;gBAAA,wBACE;kBAAM,SAAS,EAAElG,EAAE,CAACoF,MAAM,CAACgB,iBAAR,EAA2BV,KAAK,CAACtC,UAAN,CAAiB6C,UAA5C,CAAnB;kBAAA,UACGP,KAAK,CAACtC,UAAN,CAAiBiD;gBADpB,EADF,eAIE;kBAAA,UAAOX,KAAK,CAACd;gBAAb,EAJF,EAKGc,KAAK,CAACR,IAAN,iBAAc;kBAAM,SAAS,EAAEE,MAAM,CAACmB,iBAAxB;kBAAA,UAA4Cb,KAAK,CAACR;gBAAlD,EALjB;cAAA,EALF;YAAA;UADF,GAA2C,SAAQQ,KAAK,CAACzD,EAAG,EAA5D,CADF;QAtBN;MADF,EAFF;IAAA;EADF,EADF;AAiDD;;AAED,SAASe,UAAT,CAAoBC,SAApB,EAA0CJ,MAA1C,EAAyD;EACvD,IAAII,SAAS,KAAKhC,SAAS,CAACuF,UAA5B,EAAwC;IACtC;IACA,OAAOvG,MAAM,CAAC4C,MAAD,EAAU4D,CAAD,IAAO3F,QAAQ,CAAC4F,mBAAT,CAA6BD,CAAC,CAAC9E,KAAF,IAAW8E,CAAC,CAACjC,QAA1C,CAAhB,CAAb;EACD,CAHD,MAGO,IAAIvB,SAAS,KAAKhC,SAAS,CAAC0F,OAA5B,EAAqC;IAC1C,OAAO1G,MAAM,CAAC4C,MAAD,EAAU4D,CAAD,IAAO,IAAIG,IAAJ,CAASH,CAAC,CAAClD,YAAF,IAAkBkD,CAAC,CAAC7B,IAA7B,CAAhB,CAAb;EACD,CAFM,MAEA,IAAI3B,SAAS,KAAKhC,SAAS,CAAC4F,QAA5B,EAAsC;IAC3C,OAAO5G,MAAM,CAAC4C,MAAD,EAAU4D,CAAD,IAAO,IAAIG,IAAJ,CAASH,CAAC,CAAClD,YAAF,IAAkBkD,CAAC,CAAC7B,IAA7B,CAAhB,CAAN,CAA0DkC,OAA1D,EAAP;EACD;;EAED,MAAMC,MAAM,GAAG9G,MAAM,CAAC4C,MAAD,EAAU4D,CAAD,IAAO,CAACA,CAAC,CAACV,IAAF,IAAUU,CAAC,CAACvE,SAAb,EAAwB8E,WAAxB,EAAhB,CAArB;;EACA,IAAI/D,SAAS,KAAKhC,SAAS,CAACgG,SAA5B,EAAuC;IACrCF,MAAM,CAACD,OAAP;EACD;;EAED,OAAOC,MAAP;AACD;;AAED,SAASnF,cAAT,CAAwBC,WAAxB,EAA8D;EAC5D,OAAOqF,MAAM,CAACC,OAAP,CAAetF,WAAf,EACJuF,MADI,CACG,CAAC,CAACC,CAAD,EAAIC,GAAJ,CAAD,KAAcA,GADjB,EAEJpE,GAFI,CAEA,CAAC,CAACqE,GAAD,EAAMF,CAAN,CAAD,KAAcE,GAFd,CAAP;AAGD;;AAED,MAAMlC,SAAS,GAAGzE,aAAa,CAAE4G,KAAD,KAA0B;EACxD1B,aAAa,EAAE/F,GAAI;AACrB,eAAeyH,KAAK,CAACC,OAAN,CAAcC,EAAG,MAAKF,KAAK,CAACC,OAAN,CAAcE,GAAI;AACvD,mBAAmBH,KAAK,CAACI,UAAN,CAAiBC,UAAjB,CAA4BC,EAAG;AAClD;AACA,GAL0D;EAMxDxC,SAAS,EAAEvF,GAAI;AACjB;AACA;AACA,GAT0D;EAUxDwF,aAAa,EAAExF,GAAI;AACrB;AACA;AACA;AACA;AACA,GAf0D;EAgBxD4F,aAAa,EAAE5F,GAAI;AACrB;AACA;AACA;AACA;AACA,kBAAkByH,KAAK,CAACO,MAAN,CAAaC,GAAI;AACnC,eAAeR,KAAK,CAACC,OAAN,CAAcC,EAAG,IAAGF,KAAK,CAACC,OAAN,CAAcQ,EAAG;AACpD,qBAAqBT,KAAK,CAACU,MAAN,CAAaC,MAAb,CAAoBL,EAAG;AAC5C,qBAAqBN,KAAK,CAACC,OAAN,CAAcC,EAAG;AACtC,GAzB0D;EA0BxD1B,iBAAiB,EAAEjG,GAAI;AACzB;AACA;AACA;AACA,aAAayH,KAAK,CAACC,OAAN,CAAcW,EAAG;AAC9B,iBAAiBZ,KAAK,CAACC,OAAN,CAAcC,EAAG,MAAKF,KAAK,CAACC,OAAN,CAAcE,GAAI;AACzD;AACA,GAjC0D;EAkCxDvB,iBAAiB,EAAErG,GAAI;AACzB,mBAAmByH,KAAK,CAACI,UAAN,CAAiBS,MAAjB,CAAwBC,IAAK;AAChD,iBAAiBd,KAAK,CAACI,UAAN,CAAiBW,IAAjB,CAAsBN,EAAG;AAC1C;AACA,GAtC0D;EAuCxD3B,iBAAiB,EAAEvG,GAAI;AACzB,aAAayH,KAAK,CAACO,MAAN,CAAaS,QAAS;AACnC;AACA;AACA,GA3C0D;EA4CxDjC,iBAAiB,EAAExG,GAAI;AACzB;AACA;AACA;AACA;AACA,GAjD0D;EAkDxDqB,eAAe,EAAErB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,GAxD0D;EAyDxDoG,SAAS,EAAEpG,GAAI;AACjB,oBAAoByH,KAAK,CAACC,OAAN,CAAcC,EAAG;AACrC;AA3D0D,CAA1B,CAAD,CAA/B"},"metadata":{},"sourceType":"module"}