{"ast":null,"code":"import { forEach, sortBy } from 'lodash';\nexport function mapStringsToSelectables(values) {\n  return values.map(value => ({\n    value,\n    label: value\n  }));\n}\nexport function mapSegmentsToSelectables(segments) {\n  return segments.map(segment => ({\n    label: segment.value,\n    value: segment\n  }));\n}\nexport function mapFuncDefsToSelectables(funcDefs) {\n  const categories = {};\n  forEach(funcDefs, funcDef => {\n    if (!funcDef.category) {\n      return;\n    }\n\n    if (!categories[funcDef.category]) {\n      categories[funcDef.category] = {\n        label: funcDef.category,\n        value: funcDef.category,\n        options: []\n      };\n    }\n\n    categories[funcDef.category].options.push({\n      label: funcDef.name,\n      value: funcDef.name\n    });\n  });\n  return sortBy(categories, 'label');\n}\n\nfunction createEditableParam(paramDef, additional, value) {\n  var _paramDef$options$map, _paramDef$options;\n\n  return {\n    name: paramDef.name,\n    value: (value === null || value === void 0 ? void 0 : value.toString()) || '',\n    optional: !!paramDef.optional || additional,\n    // only first param is required when multiple are allowed\n    multiple: !!paramDef.multiple,\n    options: (_paramDef$options$map = (_paramDef$options = paramDef.options) === null || _paramDef$options === void 0 ? void 0 : _paramDef$options.map(option => ({\n      value: option.toString(),\n      label: option.toString()\n    }))) !== null && _paramDef$options$map !== void 0 ? _paramDef$options$map : []\n  };\n}\n/**\n * Create a list of params that can be edited in the function editor.\n */\n\n\nexport function mapFuncInstanceToParams(func) {\n  var _params;\n\n  // list of required parameters (from func.def)\n  const params = func.def.params.map((paramDef, index) => createEditableParam(paramDef, false, func.params[index])); // list of additional (multiple or optional) params entered by the user\n\n  while (params.length < func.params.length) {\n    const paramDef = func.def.params[func.def.params.length - 1];\n    const value = func.params[params.length];\n    params.push(createEditableParam(paramDef, true, value));\n  } // extra \"fake\" param to allow adding more multiple values at the end\n\n\n  if (params.length && params[params.length - 1].value && (_params = params[params.length - 1]) !== null && _params !== void 0 && _params.multiple) {\n    const paramDef = func.def.params[func.def.params.length - 1];\n    params.push(createEditableParam(paramDef, true, ''));\n  }\n\n  return params;\n}","map":{"version":3,"names":["forEach","sortBy","mapStringsToSelectables","values","map","value","label","mapSegmentsToSelectables","segments","segment","mapFuncDefsToSelectables","funcDefs","categories","funcDef","category","options","push","name","createEditableParam","paramDef","additional","toString","optional","multiple","option","mapFuncInstanceToParams","func","params","def","index","length"],"sources":["/home/soula/grafana/public/app/plugins/datasource/graphite/components/helpers.ts"],"sourcesContent":["import { forEach, sortBy } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { FuncDefs, FuncInstance, ParamDef } from '../gfunc';\nimport { GraphiteSegment } from '../types';\n\nimport { EditableParam } from './FunctionParamEditor';\n\nexport function mapStringsToSelectables<T extends string>(values: T[]): Array<SelectableValue<T>> {\n  return values.map((value) => ({\n    value,\n    label: value,\n  }));\n}\n\nexport function mapSegmentsToSelectables(segments: GraphiteSegment[]): Array<SelectableValue<GraphiteSegment>> {\n  return segments.map((segment) => ({\n    label: segment.value,\n    value: segment,\n  }));\n}\n\nexport function mapFuncDefsToSelectables(funcDefs: FuncDefs): Array<SelectableValue<string>> {\n  const categories: any = {};\n\n  forEach(funcDefs, (funcDef) => {\n    if (!funcDef.category) {\n      return;\n    }\n    if (!categories[funcDef.category]) {\n      categories[funcDef.category] = { label: funcDef.category, value: funcDef.category, options: [] };\n    }\n    categories[funcDef.category].options.push({\n      label: funcDef.name,\n      value: funcDef.name,\n    });\n  });\n\n  return sortBy(categories, 'label');\n}\n\nfunction createEditableParam(paramDef: ParamDef, additional: boolean, value?: string | number): EditableParam {\n  return {\n    name: paramDef.name,\n    value: value?.toString() || '',\n    optional: !!paramDef.optional || additional, // only first param is required when multiple are allowed\n    multiple: !!paramDef.multiple,\n    options:\n      paramDef.options?.map((option: string | number) => ({\n        value: option.toString(),\n        label: option.toString(),\n      })) ?? [],\n  };\n}\n\n/**\n * Create a list of params that can be edited in the function editor.\n */\nexport function mapFuncInstanceToParams(func: FuncInstance): EditableParam[] {\n  // list of required parameters (from func.def)\n  const params: EditableParam[] = func.def.params.map((paramDef: ParamDef, index: number) =>\n    createEditableParam(paramDef, false, func.params[index])\n  );\n\n  // list of additional (multiple or optional) params entered by the user\n  while (params.length < func.params.length) {\n    const paramDef = func.def.params[func.def.params.length - 1];\n    const value = func.params[params.length];\n    params.push(createEditableParam(paramDef, true, value));\n  }\n\n  // extra \"fake\" param to allow adding more multiple values at the end\n  if (params.length && params[params.length - 1].value && params[params.length - 1]?.multiple) {\n    const paramDef = func.def.params[func.def.params.length - 1];\n    params.push(createEditableParam(paramDef, true, ''));\n  }\n\n  return params;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}