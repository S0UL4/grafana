{"ast":null,"code":"var _IoIosArrowDown, _IoChevronRight;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { get as _get } from 'lodash';\nimport React from 'react';\nimport IoChevronRight from 'react-icons/lib/io/chevron-right';\nimport IoIosArrowDown from 'react-icons/lib/io/ios-arrow-down';\nimport { stylesFactory, withTheme2 } from '@grafana/ui';\nimport { autoColor } from '../Theme';\nimport spanAncestorIds from '../utils/span-ancestor-ids';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const getStyles = stylesFactory(theme => {\n  return {\n    SpanTreeOffset: css`\n      label: SpanTreeOffset;\n      color: ${autoColor(theme, '#000')};\n      position: relative;\n    `,\n    SpanTreeOffsetParent: css`\n      label: SpanTreeOffsetParent;\n      &:hover {\n        cursor: pointer;\n      }\n    `,\n    indentGuide: css`\n      label: indentGuide;\n      /* The size of the indentGuide is based off of the iconWrapper */\n      padding-right: calc(0.5rem + 12px);\n      height: 100%;\n      border-left: 3px solid transparent;\n      display: inline-flex;\n      &::before {\n        content: '';\n        padding-left: 1px;\n        background-color: ${autoColor(theme, 'lightgrey')};\n      }\n    `,\n    indentGuideActive: css`\n      label: indentGuideActive;\n      border-color: ${autoColor(theme, 'darkgrey')};\n      &::before {\n        background-color: transparent;\n      }\n    `,\n    iconWrapper: css`\n      label: iconWrapper;\n      position: absolute;\n      right: 0.25rem;\n    `\n  };\n});\nexport class UnthemedSpanTreeOffset extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"ancestorIds\", void 0);\n\n    _defineProperty(this, \"handleMouseLeave\", (event, ancestorId) => {\n      if (!(event.relatedTarget instanceof HTMLSpanElement) || _get(event, 'relatedTarget.dataset.ancestorId') !== ancestorId) {\n        this.props.removeHoverIndentGuideId(ancestorId);\n      }\n    });\n\n    _defineProperty(this, \"handleMouseEnter\", (event, ancestorId) => {\n      if (!(event.relatedTarget instanceof HTMLSpanElement) || _get(event, 'relatedTarget.dataset.ancestorId') !== ancestorId) {\n        this.props.addHoverIndentGuideId(ancestorId);\n      }\n    });\n\n    this.ancestorIds = spanAncestorIds(props.span); // Some traces have multiple root-level spans, this connects them all under one guideline and adds the\n    // necessary padding for the collapse icon on root-level spans.\n\n    this.ancestorIds.push('root');\n    this.ancestorIds.reverse();\n  }\n  /**\n   * If the mouse leaves to anywhere except another span with the same ancestor id, this span's ancestor id is\n   * removed from the set of hoverIndentGuideIds.\n   *\n   * @param {Object} event - React Synthetic event tied to mouseleave. Includes the related target which is\n   *     the element the user is now hovering.\n   * @param {string} ancestorId - The span id that the user was hovering over.\n   */\n\n\n  render() {\n    const {\n      childrenVisible,\n      onClick,\n      showChildrenIcon,\n      span,\n      theme\n    } = this.props;\n    const {\n      hasChildren,\n      spanID\n    } = span;\n    const wrapperProps = hasChildren ? {\n      onClick,\n      role: 'switch',\n      'aria-checked': childrenVisible\n    } : null;\n    const icon = showChildrenIcon && hasChildren && (childrenVisible ? _IoIosArrowDown || (_IoIosArrowDown = /*#__PURE__*/_jsx(IoIosArrowDown, {})) : _IoChevronRight || (_IoChevronRight = /*#__PURE__*/_jsx(IoChevronRight, {})));\n    const styles = getStyles(theme);\n    return /*#__PURE__*/_jsxs(\"span\", Object.assign({\n      className: cx(styles.SpanTreeOffset, {\n        [styles.SpanTreeOffsetParent]: hasChildren\n      })\n    }, wrapperProps, {\n      children: [this.ancestorIds.map(ancestorId => /*#__PURE__*/_jsx(\"span\", {\n        className: cx(styles.indentGuide, {\n          [styles.indentGuideActive]: this.props.hoverIndentGuideIds.has(ancestorId)\n        }),\n        \"data-ancestor-id\": ancestorId,\n        \"data-testid\": \"SpanTreeOffset--indentGuide\",\n        onMouseEnter: event => this.handleMouseEnter(event, ancestorId),\n        onMouseLeave: event => this.handleMouseLeave(event, ancestorId)\n      }, ancestorId)), icon && /*#__PURE__*/_jsx(\"span\", {\n        className: styles.iconWrapper,\n        onMouseEnter: event => this.handleMouseEnter(event, spanID),\n        onMouseLeave: event => this.handleMouseLeave(event, spanID),\n        \"data-testid\": \"icon-wrapper\",\n        children: icon\n      })]\n    }));\n  }\n\n}\n\n_defineProperty(UnthemedSpanTreeOffset, \"displayName\", 'UnthemedSpanTreeOffset');\n\n_defineProperty(UnthemedSpanTreeOffset, \"defaultProps\", {\n  childrenVisible: false,\n  showChildrenIcon: true\n});\n\nexport default withTheme2(UnthemedSpanTreeOffset);","map":{"version":3,"names":["css","cx","get","_get","React","IoChevronRight","IoIosArrowDown","stylesFactory","withTheme2","autoColor","spanAncestorIds","getStyles","theme","SpanTreeOffset","SpanTreeOffsetParent","indentGuide","indentGuideActive","iconWrapper","UnthemedSpanTreeOffset","PureComponent","constructor","props","event","ancestorId","relatedTarget","HTMLSpanElement","removeHoverIndentGuideId","addHoverIndentGuideId","ancestorIds","span","push","reverse","render","childrenVisible","onClick","showChildrenIcon","hasChildren","spanID","wrapperProps","role","icon","styles","map","hoverIndentGuideIds","has","handleMouseEnter","handleMouseLeave"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/TraceTimelineViewer/SpanTreeOffset.tsx"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { get as _get } from 'lodash';\nimport React from 'react';\nimport IoChevronRight from 'react-icons/lib/io/chevron-right';\nimport IoIosArrowDown from 'react-icons/lib/io/ios-arrow-down';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { stylesFactory, withTheme2 } from '@grafana/ui';\n\nimport { autoColor } from '../Theme';\nimport { TraceSpan } from '../types/trace';\nimport spanAncestorIds from '../utils/span-ancestor-ids';\n\nexport const getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    SpanTreeOffset: css`\n      label: SpanTreeOffset;\n      color: ${autoColor(theme, '#000')};\n      position: relative;\n    `,\n    SpanTreeOffsetParent: css`\n      label: SpanTreeOffsetParent;\n      &:hover {\n        cursor: pointer;\n      }\n    `,\n    indentGuide: css`\n      label: indentGuide;\n      /* The size of the indentGuide is based off of the iconWrapper */\n      padding-right: calc(0.5rem + 12px);\n      height: 100%;\n      border-left: 3px solid transparent;\n      display: inline-flex;\n      &::before {\n        content: '';\n        padding-left: 1px;\n        background-color: ${autoColor(theme, 'lightgrey')};\n      }\n    `,\n    indentGuideActive: css`\n      label: indentGuideActive;\n      border-color: ${autoColor(theme, 'darkgrey')};\n      &::before {\n        background-color: transparent;\n      }\n    `,\n    iconWrapper: css`\n      label: iconWrapper;\n      position: absolute;\n      right: 0.25rem;\n    `,\n  };\n});\n\ntype TProps = {\n  childrenVisible?: boolean;\n  onClick?: () => void;\n  span: TraceSpan;\n  showChildrenIcon?: boolean;\n\n  hoverIndentGuideIds: Set<string>;\n  addHoverIndentGuideId: (spanID: string) => void;\n  removeHoverIndentGuideId: (spanID: string) => void;\n  theme: GrafanaTheme2;\n};\n\nexport class UnthemedSpanTreeOffset extends React.PureComponent<TProps> {\n  static displayName = 'UnthemedSpanTreeOffset';\n\n  ancestorIds: string[];\n\n  static defaultProps = {\n    childrenVisible: false,\n    showChildrenIcon: true,\n  };\n\n  constructor(props: TProps) {\n    super(props);\n\n    this.ancestorIds = spanAncestorIds(props.span);\n    // Some traces have multiple root-level spans, this connects them all under one guideline and adds the\n    // necessary padding for the collapse icon on root-level spans.\n    this.ancestorIds.push('root');\n\n    this.ancestorIds.reverse();\n  }\n\n  /**\n   * If the mouse leaves to anywhere except another span with the same ancestor id, this span's ancestor id is\n   * removed from the set of hoverIndentGuideIds.\n   *\n   * @param {Object} event - React Synthetic event tied to mouseleave. Includes the related target which is\n   *     the element the user is now hovering.\n   * @param {string} ancestorId - The span id that the user was hovering over.\n   */\n  handleMouseLeave = (event: React.MouseEvent<HTMLSpanElement>, ancestorId: string) => {\n    if (\n      !(event.relatedTarget instanceof HTMLSpanElement) ||\n      _get(event, 'relatedTarget.dataset.ancestorId') !== ancestorId\n    ) {\n      this.props.removeHoverIndentGuideId(ancestorId);\n    }\n  };\n\n  /**\n   * If the mouse entered this span from anywhere except another span with the same ancestor id, this span's\n   * ancestorId is added to the set of hoverIndentGuideIds.\n   *\n   * @param {Object} event - React Synthetic event tied to mouseenter. Includes the related target which is\n   *     the last element the user was hovering.\n   * @param {string} ancestorId - The span id that the user is now hovering over.\n   */\n  handleMouseEnter = (event: React.MouseEvent<HTMLSpanElement>, ancestorId: string) => {\n    if (\n      !(event.relatedTarget instanceof HTMLSpanElement) ||\n      _get(event, 'relatedTarget.dataset.ancestorId') !== ancestorId\n    ) {\n      this.props.addHoverIndentGuideId(ancestorId);\n    }\n  };\n\n  render() {\n    const { childrenVisible, onClick, showChildrenIcon, span, theme } = this.props;\n    const { hasChildren, spanID } = span;\n    const wrapperProps = hasChildren ? { onClick, role: 'switch', 'aria-checked': childrenVisible } : null;\n    const icon = showChildrenIcon && hasChildren && (childrenVisible ? <IoIosArrowDown /> : <IoChevronRight />);\n    const styles = getStyles(theme);\n    return (\n      <span className={cx(styles.SpanTreeOffset, { [styles.SpanTreeOffsetParent]: hasChildren })} {...wrapperProps}>\n        {this.ancestorIds.map((ancestorId) => (\n          <span\n            key={ancestorId}\n            className={cx(styles.indentGuide, {\n              [styles.indentGuideActive]: this.props.hoverIndentGuideIds.has(ancestorId),\n            })}\n            data-ancestor-id={ancestorId}\n            data-testid=\"SpanTreeOffset--indentGuide\"\n            onMouseEnter={(event) => this.handleMouseEnter(event, ancestorId)}\n            onMouseLeave={(event) => this.handleMouseLeave(event, ancestorId)}\n          />\n        ))}\n        {icon && (\n          <span\n            className={styles.iconWrapper}\n            onMouseEnter={(event) => this.handleMouseEnter(event, spanID)}\n            onMouseLeave={(event) => this.handleMouseLeave(event, spanID)}\n            data-testid=\"icon-wrapper\"\n          >\n            {icon}\n          </span>\n        )}\n      </span>\n    );\n  }\n}\n\nexport default withTheme2(UnthemedSpanTreeOffset);\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,QAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AAGA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,aAA1C;AAEA,SAASC,SAAT,QAA0B,UAA1B;AAEA,OAAOC,eAAP,MAA4B,4BAA5B;;;AAEA,OAAO,MAAMC,SAAS,GAAGJ,aAAa,CAAEK,KAAD,IAA0B;EAC/D,OAAO;IACLC,cAAc,EAAEb,GAAI;AACxB;AACA,eAAeS,SAAS,CAACG,KAAD,EAAQ,MAAR,CAAgB;AACxC;AACA,KALS;IAMLE,oBAAoB,EAAEd,GAAI;AAC9B;AACA;AACA;AACA;AACA,KAXS;IAYLe,WAAW,EAAEf,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4BS,SAAS,CAACG,KAAD,EAAQ,WAAR,CAAqB;AAC1D;AACA,KAxBS;IAyBLI,iBAAiB,EAAEhB,GAAI;AAC3B;AACA,sBAAsBS,SAAS,CAACG,KAAD,EAAQ,UAAR,CAAoB;AACnD;AACA;AACA;AACA,KA/BS;IAgCLK,WAAW,EAAEjB,GAAI;AACrB;AACA;AACA;AACA;EApCS,CAAP;AAsCD,CAvCqC,CAA/B;AAqDP,OAAO,MAAMkB,sBAAN,SAAqCd,KAAK,CAACe,aAA3C,CAAiE;EAUtEC,WAAW,CAACC,KAAD,EAAgB;IACzB,MAAMA,KAAN;;IADyB;;IAAA,0CAmBR,CAACC,KAAD,EAA2CC,UAA3C,KAAkE;MACnF,IACE,EAAED,KAAK,CAACE,aAAN,YAA+BC,eAAjC,KACAtB,IAAI,CAACmB,KAAD,EAAQ,kCAAR,CAAJ,KAAoDC,UAFtD,EAGE;QACA,KAAKF,KAAL,CAAWK,wBAAX,CAAoCH,UAApC;MACD;IACF,CA1B0B;;IAAA,0CAoCR,CAACD,KAAD,EAA2CC,UAA3C,KAAkE;MACnF,IACE,EAAED,KAAK,CAACE,aAAN,YAA+BC,eAAjC,KACAtB,IAAI,CAACmB,KAAD,EAAQ,kCAAR,CAAJ,KAAoDC,UAFtD,EAGE;QACA,KAAKF,KAAL,CAAWM,qBAAX,CAAiCJ,UAAjC;MACD;IACF,CA3C0B;;IAGzB,KAAKK,WAAL,GAAmBlB,eAAe,CAACW,KAAK,CAACQ,IAAP,CAAlC,CAHyB,CAIzB;IACA;;IACA,KAAKD,WAAL,CAAiBE,IAAjB,CAAsB,MAAtB;IAEA,KAAKF,WAAL,CAAiBG,OAAjB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EA2BEC,MAAM,GAAG;IACP,MAAM;MAAEC,eAAF;MAAmBC,OAAnB;MAA4BC,gBAA5B;MAA8CN,IAA9C;MAAoDjB;IAApD,IAA8D,KAAKS,KAAzE;IACA,MAAM;MAAEe,WAAF;MAAeC;IAAf,IAA0BR,IAAhC;IACA,MAAMS,YAAY,GAAGF,WAAW,GAAG;MAAEF,OAAF;MAAWK,IAAI,EAAE,QAAjB;MAA2B,gBAAgBN;IAA3C,CAAH,GAAkE,IAAlG;IACA,MAAMO,IAAI,GAAGL,gBAAgB,IAAIC,WAApB,KAAoCH,eAAe,sDAAG,KAAC,cAAD,KAAH,uDAAwB,KAAC,cAAD,KAAxB,CAAnD,CAAb;IACA,MAAMQ,MAAM,GAAG9B,SAAS,CAACC,KAAD,CAAxB;IACA,oBACE;MAAM,SAAS,EAAEX,EAAE,CAACwC,MAAM,CAAC5B,cAAR,EAAwB;QAAE,CAAC4B,MAAM,CAAC3B,oBAAR,GAA+BsB;MAAjC,CAAxB;IAAnB,GAAgGE,YAAhG;MAAA,WACG,KAAKV,WAAL,CAAiBc,GAAjB,CAAsBnB,UAAD,iBACpB;QAEE,SAAS,EAAEtB,EAAE,CAACwC,MAAM,CAAC1B,WAAR,EAAqB;UAChC,CAAC0B,MAAM,CAACzB,iBAAR,GAA4B,KAAKK,KAAL,CAAWsB,mBAAX,CAA+BC,GAA/B,CAAmCrB,UAAnC;QADI,CAArB,CAFf;QAKE,oBAAkBA,UALpB;QAME,eAAY,6BANd;QAOE,YAAY,EAAGD,KAAD,IAAW,KAAKuB,gBAAL,CAAsBvB,KAAtB,EAA6BC,UAA7B,CAP3B;QAQE,YAAY,EAAGD,KAAD,IAAW,KAAKwB,gBAAL,CAAsBxB,KAAtB,EAA6BC,UAA7B;MAR3B,GACOA,UADP,CADD,CADH,EAaGiB,IAAI,iBACH;QACE,SAAS,EAAEC,MAAM,CAACxB,WADpB;QAEE,YAAY,EAAGK,KAAD,IAAW,KAAKuB,gBAAL,CAAsBvB,KAAtB,EAA6Be,MAA7B,CAF3B;QAGE,YAAY,EAAGf,KAAD,IAAW,KAAKwB,gBAAL,CAAsBxB,KAAtB,EAA6Be,MAA7B,CAH3B;QAIE,eAAY,cAJd;QAAA,UAMGG;MANH,EAdJ;IAAA,GADF;EA0BD;;AAvFqE;;gBAA3DtB,sB,iBACU,wB;;gBADVA,sB,kBAKW;EACpBe,eAAe,EAAE,KADG;EAEpBE,gBAAgB,EAAE;AAFE,C;;AAqFxB,eAAe3B,UAAU,CAACU,sBAAD,CAAzB"},"metadata":{},"sourceType":"module"}