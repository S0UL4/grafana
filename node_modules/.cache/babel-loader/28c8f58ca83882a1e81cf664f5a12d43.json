{"ast":null,"code":"import tinycolor from 'tinycolor2';\nimport { ThresholdsMode } from '@grafana/data';\nimport { GraphTresholdsStyleMode } from '@grafana/schema';\nimport { getGradientRange, scaleGradient } from './gradientFills';\nexport function getThresholdsDrawHook(options) {\n  function addLines(u, steps, theme, xMin, xMax, yScaleKey) {\n    let ctx = u.ctx; // Thresholds below a transparent threshold is treated like \"less than\", and line drawn previous threshold\n\n    let transparentIndex = 0;\n\n    for (let idx = 0; idx < steps.length; idx++) {\n      const step = steps[idx];\n\n      if (step.color === 'transparent') {\n        transparentIndex = idx;\n        break;\n      }\n    }\n\n    ctx.lineWidth = 2; // Ignore the base -Infinity threshold by always starting on index 1\n\n    for (let idx = 1; idx < steps.length; idx++) {\n      const step = steps[idx];\n      let color; // if we are below a transparent index treat this a less then threshold, use previous thresholds color\n\n      if (transparentIndex >= idx && idx > 0) {\n        color = tinycolor(theme.visualization.getColorByName(steps[idx - 1].color));\n      } else {\n        color = tinycolor(theme.visualization.getColorByName(step.color));\n      } // Unless alpha specififed set to default value\n\n\n      if (color.getAlpha() === 1) {\n        color.setAlpha(0.7);\n      }\n\n      let x0 = Math.round(u.valToPos(xMin, 'x', true));\n      let y0 = Math.round(u.valToPos(step.value, yScaleKey, true));\n      let x1 = Math.round(u.valToPos(xMax, 'x', true));\n      let y1 = Math.round(u.valToPos(step.value, yScaleKey, true));\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n      ctx.strokeStyle = color.toString();\n      ctx.stroke();\n    }\n  }\n\n  function addAreas(u, steps, theme) {\n    let ctx = u.ctx;\n    let grd = scaleGradient(u, u.series[1].scale, steps.map(step => {\n      let color = tinycolor(theme.visualization.getColorByName(step.color));\n\n      if (color.getAlpha() === 1) {\n        color.setAlpha(0.15);\n      }\n\n      return [step.value, color.toString()];\n    }), true);\n    ctx.fillStyle = grd;\n    ctx.fillRect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n  }\n\n  const {\n    scaleKey,\n    thresholds,\n    theme,\n    config,\n    hardMin,\n    hardMax,\n    softMin,\n    softMax\n  } = options;\n  return u => {\n    const ctx = u.ctx;\n    const {\n      min: xMin,\n      max: xMax\n    } = u.scales.x;\n    const {\n      min: yMin,\n      max: yMax\n    } = u.scales[scaleKey];\n\n    if (xMin == null || xMax == null || yMin == null || yMax == null) {\n      return;\n    }\n\n    let {\n      steps,\n      mode\n    } = thresholds;\n\n    if (mode === ThresholdsMode.Percentage) {\n      let [min, max] = getGradientRange(u, scaleKey, hardMin, hardMax, softMin, softMax);\n      let range = max - min;\n      steps = steps.map(step => Object.assign({}, step, {\n        value: min + range * (step.value / 100)\n      }));\n    }\n\n    ctx.save();\n\n    switch (config.mode) {\n      case GraphTresholdsStyleMode.Line:\n        addLines(u, steps, theme, xMin, xMax, scaleKey);\n        break;\n\n      case GraphTresholdsStyleMode.Area:\n        addAreas(u, steps, theme);\n        break;\n\n      case GraphTresholdsStyleMode.LineAndArea:\n        addAreas(u, steps, theme);\n        addLines(u, steps, theme, xMin, xMax, scaleKey);\n    }\n\n    ctx.restore();\n  };\n}","map":{"version":3,"names":["tinycolor","ThresholdsMode","GraphTresholdsStyleMode","getGradientRange","scaleGradient","getThresholdsDrawHook","options","addLines","u","steps","theme","xMin","xMax","yScaleKey","ctx","transparentIndex","idx","length","step","color","lineWidth","visualization","getColorByName","getAlpha","setAlpha","x0","Math","round","valToPos","y0","value","x1","y1","beginPath","moveTo","lineTo","strokeStyle","toString","stroke","addAreas","grd","series","scale","map","fillStyle","fillRect","bbox","left","top","width","height","scaleKey","thresholds","config","hardMin","hardMax","softMin","softMax","min","max","scales","x","yMin","yMax","mode","Percentage","range","save","Line","Area","LineAndArea","restore"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/uPlot/config/UPlotThresholds.ts"],"sourcesContent":["import tinycolor from 'tinycolor2';\nimport uPlot from 'uplot';\n\nimport { GrafanaTheme2, Threshold, ThresholdsConfig, ThresholdsMode } from '@grafana/data';\nimport { GraphThresholdsStyleConfig, GraphTresholdsStyleMode } from '@grafana/schema';\n\nimport { getGradientRange, scaleGradient } from './gradientFills';\n\nexport interface UPlotThresholdOptions {\n  scaleKey: string;\n  thresholds: ThresholdsConfig;\n  config: GraphThresholdsStyleConfig;\n  theme: GrafanaTheme2;\n  hardMin?: number | null;\n  hardMax?: number | null;\n  softMin?: number | null;\n  softMax?: number | null;\n}\n\nexport function getThresholdsDrawHook(options: UPlotThresholdOptions) {\n  function addLines(u: uPlot, steps: Threshold[], theme: GrafanaTheme2, xMin: number, xMax: number, yScaleKey: string) {\n    let ctx = u.ctx;\n\n    // Thresholds below a transparent threshold is treated like \"less than\", and line drawn previous threshold\n    let transparentIndex = 0;\n\n    for (let idx = 0; idx < steps.length; idx++) {\n      const step = steps[idx];\n      if (step.color === 'transparent') {\n        transparentIndex = idx;\n        break;\n      }\n    }\n\n    ctx.lineWidth = 2;\n\n    // Ignore the base -Infinity threshold by always starting on index 1\n    for (let idx = 1; idx < steps.length; idx++) {\n      const step = steps[idx];\n      let color: tinycolor.Instance;\n\n      // if we are below a transparent index treat this a less then threshold, use previous thresholds color\n      if (transparentIndex >= idx && idx > 0) {\n        color = tinycolor(theme.visualization.getColorByName(steps[idx - 1].color));\n      } else {\n        color = tinycolor(theme.visualization.getColorByName(step.color));\n      }\n\n      // Unless alpha specififed set to default value\n      if (color.getAlpha() === 1) {\n        color.setAlpha(0.7);\n      }\n\n      let x0 = Math.round(u.valToPos(xMin!, 'x', true));\n      let y0 = Math.round(u.valToPos(step.value, yScaleKey, true));\n      let x1 = Math.round(u.valToPos(xMax!, 'x', true));\n      let y1 = Math.round(u.valToPos(step.value, yScaleKey, true));\n\n      ctx.beginPath();\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n\n      ctx.strokeStyle = color.toString();\n      ctx.stroke();\n    }\n  }\n\n  function addAreas(u: uPlot, steps: Threshold[], theme: GrafanaTheme2) {\n    let ctx = u.ctx;\n\n    let grd = scaleGradient(\n      u,\n      u.series[1].scale!,\n      steps.map((step) => {\n        let color = tinycolor(theme.visualization.getColorByName(step.color));\n\n        if (color.getAlpha() === 1) {\n          color.setAlpha(0.15);\n        }\n\n        return [step.value, color.toString()];\n      }),\n      true\n    );\n\n    ctx.fillStyle = grd;\n    ctx.fillRect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n  }\n\n  const { scaleKey, thresholds, theme, config, hardMin, hardMax, softMin, softMax } = options;\n\n  return (u: uPlot) => {\n    const ctx = u.ctx;\n    const { min: xMin, max: xMax } = u.scales.x;\n    const { min: yMin, max: yMax } = u.scales[scaleKey];\n\n    if (xMin == null || xMax == null || yMin == null || yMax == null) {\n      return;\n    }\n\n    let { steps, mode } = thresholds;\n\n    if (mode === ThresholdsMode.Percentage) {\n      let [min, max] = getGradientRange(u, scaleKey, hardMin, hardMax, softMin, softMax);\n      let range = max - min;\n\n      steps = steps.map((step) => ({\n        ...step,\n        value: min + range * (step.value / 100),\n      }));\n    }\n\n    ctx.save();\n\n    switch (config.mode) {\n      case GraphTresholdsStyleMode.Line:\n        addLines(u, steps, theme, xMin, xMax, scaleKey);\n        break;\n      case GraphTresholdsStyleMode.Area:\n        addAreas(u, steps, theme);\n        break;\n      case GraphTresholdsStyleMode.LineAndArea:\n        addAreas(u, steps, theme);\n        addLines(u, steps, theme, xMin, xMax, scaleKey);\n    }\n\n    ctx.restore();\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}