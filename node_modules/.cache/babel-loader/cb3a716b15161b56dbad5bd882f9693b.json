{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\nimport { Field, InlineFieldRow, InlineField, Input, Button, IconButton, useStyles2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const MuteTimingTimeRange = ({\n  intervalIndex\n}) => {\n  var _formState$errors$tim, _formErrors$times$som, _formErrors$times;\n\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    formState\n  } = useFormContext();\n  const {\n    fields: timeRanges,\n    append: addTimeRange,\n    remove: removeTimeRange\n  } = useFieldArray({\n    name: `time_intervals.${intervalIndex}.times`\n  });\n\n  const validateTime = timeString => {\n    if (!timeString) {\n      return true;\n    }\n\n    const [hour, minutes] = timeString.split(':').map(x => parseInt(x, 10));\n    const isHourValid = hour >= 0 && hour < 25;\n    const isMinuteValid = minutes > -1 && minutes < 60;\n    const isTimeValid = hour === 24 ? minutes === 0 : isHourValid && isMinuteValid;\n    return isTimeValid || 'Time is invalid';\n  };\n\n  const formErrors = (_formState$errors$tim = formState.errors.time_intervals) === null || _formState$errors$tim === void 0 ? void 0 : _formState$errors$tim[intervalIndex];\n  const timeRangeInvalid = (_formErrors$times$som = formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$times = formErrors.times) === null || _formErrors$times === void 0 ? void 0 : _formErrors$times.some(value => (value === null || value === void 0 ? void 0 : value.start_time) || (value === null || value === void 0 ? void 0 : value.end_time))) !== null && _formErrors$times$som !== void 0 ? _formErrors$times$som : false;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(Field, {\n      className: styles.field,\n      label: \"Time range\",\n      description: \"The time inclusive of the starting time and exclusive of the end time in UTC\",\n      invalid: timeRangeInvalid,\n      error: timeRangeInvalid ? 'Times must be between 00:00 and 24:00 UTC' : '',\n      children: /*#__PURE__*/_jsx(_Fragment, {\n        children: timeRanges.map((timeRange, index) => {\n          var _formErrors$times2, _formErrors$times2$in, _formErrors$times3, _formErrors$times3$in;\n\n          return /*#__PURE__*/_jsx(\"div\", {\n            className: styles.timeRange,\n            children: /*#__PURE__*/_jsxs(InlineFieldRow, {\n              children: [/*#__PURE__*/_jsx(InlineField, {\n                label: \"Start time\",\n                invalid: !!(formErrors !== null && formErrors !== void 0 && (_formErrors$times2 = formErrors.times) !== null && _formErrors$times2 !== void 0 && (_formErrors$times2$in = _formErrors$times2[index]) !== null && _formErrors$times2$in !== void 0 && _formErrors$times2$in.start_time),\n                children: /*#__PURE__*/_jsx(Input, Object.assign({}, register(`time_intervals.${intervalIndex}.times.${index}.start_time`, {\n                  validate: validateTime\n                }), {\n                  className: styles.timeRangeInput // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  ,\n                  defaultValue: timeRange.start_time,\n                  placeholder: \"HH:MM\",\n                  \"data-testid\": \"mute-timing-starts-at\"\n                }))\n              }), /*#__PURE__*/_jsx(InlineField, {\n                label: \"End time\",\n                invalid: !!(formErrors !== null && formErrors !== void 0 && (_formErrors$times3 = formErrors.times) !== null && _formErrors$times3 !== void 0 && (_formErrors$times3$in = _formErrors$times3[index]) !== null && _formErrors$times3$in !== void 0 && _formErrors$times3$in.end_time),\n                children: /*#__PURE__*/_jsx(Input, Object.assign({}, register(`time_intervals.${intervalIndex}.times.${index}.end_time`, {\n                  validate: validateTime\n                }), {\n                  className: styles.timeRangeInput // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                  ,\n                  defaultValue: timeRange.end_time,\n                  placeholder: \"HH:MM\",\n                  \"data-testid\": \"mute-timing-ends-at\"\n                }))\n              }), /*#__PURE__*/_jsx(IconButton, {\n                className: styles.deleteTimeRange,\n                title: 'Remove',\n                name: 'trash-alt',\n                type: \"button\",\n                onClick: e => {\n                  e.preventDefault();\n                  removeTimeRange(index);\n                }\n              })]\n            })\n          }, timeRange.id);\n        })\n      })\n    }), /*#__PURE__*/_jsx(Button, {\n      className: styles.addTimeRange,\n      variant: \"secondary\",\n      type: \"button\",\n      icon: 'plus',\n      onClick: () => addTimeRange({\n        start_time: '',\n        end_time: ''\n      }),\n      children: \"Add another time range\"\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  field: css`\n    margin-bottom: 0;\n  `,\n  timeRange: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  timeRangeInput: css`\n    width: 120px;\n  `,\n  deleteTimeRange: css`\n    margin: ${theme.spacing(1)} 0 0 ${theme.spacing(0.5)};\n  `,\n  addTimeRange: css`\n    margin-bottom: ${theme.spacing(2)};\n  `\n});","map":{"version":3,"names":["css","React","useFieldArray","useFormContext","Field","InlineFieldRow","InlineField","Input","Button","IconButton","useStyles2","MuteTimingTimeRange","intervalIndex","styles","getStyles","register","formState","fields","timeRanges","append","addTimeRange","remove","removeTimeRange","name","validateTime","timeString","hour","minutes","split","map","x","parseInt","isHourValid","isMinuteValid","isTimeValid","formErrors","errors","time_intervals","timeRangeInvalid","times","some","value","start_time","end_time","field","timeRange","index","validate","timeRangeInput","deleteTimeRange","e","preventDefault","id","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/amroutes/MuteTimingTimeRange.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, InlineFieldRow, InlineField, Input, Button, IconButton, useStyles2 } from '@grafana/ui';\n\nimport { MuteTimingFields } from '../../types/mute-timing-form';\n\ninterface Props {\n  intervalIndex: number;\n}\n\nexport const MuteTimingTimeRange: FC<Props> = ({ intervalIndex }) => {\n  const styles = useStyles2(getStyles);\n  const { register, formState } = useFormContext<MuteTimingFields>();\n\n  const {\n    fields: timeRanges,\n    append: addTimeRange,\n    remove: removeTimeRange,\n  } = useFieldArray<MuteTimingFields>({\n    name: `time_intervals.${intervalIndex}.times`,\n  });\n\n  const validateTime = (timeString: string) => {\n    if (!timeString) {\n      return true;\n    }\n    const [hour, minutes] = timeString.split(':').map((x) => parseInt(x, 10));\n    const isHourValid = hour >= 0 && hour < 25;\n    const isMinuteValid = minutes > -1 && minutes < 60;\n    const isTimeValid = hour === 24 ? minutes === 0 : isHourValid && isMinuteValid;\n\n    return isTimeValid || 'Time is invalid';\n  };\n\n  const formErrors = formState.errors.time_intervals?.[intervalIndex];\n  const timeRangeInvalid = formErrors?.times?.some((value) => value?.start_time || value?.end_time) ?? false;\n\n  return (\n    <div>\n      <Field\n        className={styles.field}\n        label=\"Time range\"\n        description=\"The time inclusive of the starting time and exclusive of the end time in UTC\"\n        invalid={timeRangeInvalid}\n        error={timeRangeInvalid ? 'Times must be between 00:00 and 24:00 UTC' : ''}\n      >\n        <>\n          {timeRanges.map((timeRange, index) => {\n            return (\n              <div className={styles.timeRange} key={timeRange.id}>\n                <InlineFieldRow>\n                  <InlineField label=\"Start time\" invalid={!!formErrors?.times?.[index]?.start_time}>\n                    <Input\n                      {...register(`time_intervals.${intervalIndex}.times.${index}.start_time`, {\n                        validate: validateTime,\n                      })}\n                      className={styles.timeRangeInput}\n                      // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                      defaultValue={timeRange.start_time}\n                      placeholder=\"HH:MM\"\n                      data-testid=\"mute-timing-starts-at\"\n                    />\n                  </InlineField>\n                  <InlineField label=\"End time\" invalid={!!formErrors?.times?.[index]?.end_time}>\n                    <Input\n                      {...register(`time_intervals.${intervalIndex}.times.${index}.end_time`, {\n                        validate: validateTime,\n                      })}\n                      className={styles.timeRangeInput}\n                      // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                      defaultValue={timeRange.end_time}\n                      placeholder=\"HH:MM\"\n                      data-testid=\"mute-timing-ends-at\"\n                    />\n                  </InlineField>\n                  <IconButton\n                    className={styles.deleteTimeRange}\n                    title={'Remove'}\n                    name={'trash-alt'}\n                    type=\"button\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      removeTimeRange(index);\n                    }}\n                  />\n                </InlineFieldRow>\n              </div>\n            );\n          })}\n        </>\n      </Field>\n      <Button\n        className={styles.addTimeRange}\n        variant=\"secondary\"\n        type=\"button\"\n        icon={'plus'}\n        onClick={() => addTimeRange({ start_time: '', end_time: '' })}\n      >\n        Add another time range\n      </Button>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: 0;\n  `,\n  timeRange: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  timeRangeInput: css`\n    width: 120px;\n  `,\n  deleteTimeRange: css`\n    margin: ${theme.spacing(1)} 0 0 ${theme.spacing(0.5)};\n  `,\n  addTimeRange: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}