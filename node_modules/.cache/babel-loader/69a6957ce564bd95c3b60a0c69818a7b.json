{"ast":null,"code":"import { ArrayVector, FieldType, getDisplayProcessor, isBooleanUnit } from '@grafana/data';\nimport { LineInterpolation } from '@grafana/schema';\nimport { applyNullInsertThreshold } from '@grafana/ui/src/components/GraphNG/nullInsertThreshold';\nimport { nullToValue } from '@grafana/ui/src/components/GraphNG/nullToValue';\n/**\n * Returns null if there are no graphable fields\n */\n\nexport function prepareGraphableFields(series, theme, timeRange) {\n  var _field$config$custom, _field$config;\n\n  if (!(series !== null && series !== void 0 && series.length)) {\n    return null;\n  }\n\n  let copy;\n  const frames = [];\n\n  for (let frame of series) {\n    const fields = [];\n    let hasTimeField = false;\n    let hasValueField = false;\n    let nulledFrame = applyNullInsertThreshold({\n      frame,\n      refFieldPseudoMin: timeRange === null || timeRange === void 0 ? void 0 : timeRange.from.valueOf(),\n      refFieldPseudoMax: timeRange === null || timeRange === void 0 ? void 0 : timeRange.to.valueOf()\n    });\n\n    for (const field of nullToValue(nulledFrame).fields) {\n      switch (field.type) {\n        case FieldType.time:\n          hasTimeField = true;\n          fields.push(field);\n          break;\n\n        case FieldType.number:\n          hasValueField = true;\n          copy = Object.assign({}, field, {\n            values: new ArrayVector(field.values.toArray().map(v => {\n              if (!(Number.isFinite(v) || v == null)) {\n                return null;\n              }\n\n              return v;\n            }))\n          });\n          fields.push(copy);\n          break;\n        // ok\n\n        case FieldType.boolean:\n          hasValueField = true;\n          const custom = (_field$config$custom = (_field$config = field.config) === null || _field$config === void 0 ? void 0 : _field$config.custom) !== null && _field$config$custom !== void 0 ? _field$config$custom : {};\n          const config = Object.assign({}, field.config, {\n            max: 1,\n            min: 0,\n            custom\n          }); // smooth and linear do not make sense\n\n          if (custom.lineInterpolation !== LineInterpolation.StepBefore) {\n            custom.lineInterpolation = LineInterpolation.StepAfter;\n          }\n\n          copy = Object.assign({}, field, {\n            config,\n            type: FieldType.number,\n            values: new ArrayVector(field.values.toArray().map(v => {\n              if (v == null) {\n                return v;\n              }\n\n              return Boolean(v) ? 1 : 0;\n            }))\n          });\n\n          if (!isBooleanUnit(config.unit)) {\n            config.unit = 'bool';\n            copy.display = getDisplayProcessor({\n              field: copy,\n              theme\n            });\n          }\n\n          fields.push(copy);\n          break;\n      }\n    }\n\n    if (hasTimeField && hasValueField) {\n      frames.push(Object.assign({}, frame, {\n        fields\n      }));\n    }\n  }\n\n  if (frames.length) {\n    return frames;\n  }\n\n  return null;\n}","map":{"version":3,"names":["ArrayVector","FieldType","getDisplayProcessor","isBooleanUnit","LineInterpolation","applyNullInsertThreshold","nullToValue","prepareGraphableFields","series","theme","timeRange","length","copy","frames","frame","fields","hasTimeField","hasValueField","nulledFrame","refFieldPseudoMin","from","valueOf","refFieldPseudoMax","to","field","type","time","push","number","values","toArray","map","v","Number","isFinite","boolean","custom","config","max","min","lineInterpolation","StepBefore","StepAfter","Boolean","unit","display"],"sources":["/home/soula/grafana/public/app/plugins/panel/timeseries/utils.ts"],"sourcesContent":["import {\n  ArrayVector,\n  DataFrame,\n  Field,\n  FieldType,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  isBooleanUnit,\n  TimeRange,\n} from '@grafana/data';\nimport { GraphFieldConfig, LineInterpolation } from '@grafana/schema';\nimport { applyNullInsertThreshold } from '@grafana/ui/src/components/GraphNG/nullInsertThreshold';\nimport { nullToValue } from '@grafana/ui/src/components/GraphNG/nullToValue';\n\n/**\n * Returns null if there are no graphable fields\n */\nexport function prepareGraphableFields(\n  series: DataFrame[],\n  theme: GrafanaTheme2,\n  timeRange?: TimeRange\n): DataFrame[] | null {\n  if (!series?.length) {\n    return null;\n  }\n\n  let copy: Field;\n\n  const frames: DataFrame[] = [];\n\n  for (let frame of series) {\n    const fields: Field[] = [];\n\n    let hasTimeField = false;\n    let hasValueField = false;\n\n    let nulledFrame = applyNullInsertThreshold({\n      frame,\n      refFieldPseudoMin: timeRange?.from.valueOf(),\n      refFieldPseudoMax: timeRange?.to.valueOf(),\n    });\n\n    for (const field of nullToValue(nulledFrame).fields) {\n      switch (field.type) {\n        case FieldType.time:\n          hasTimeField = true;\n          fields.push(field);\n          break;\n        case FieldType.number:\n          hasValueField = true;\n          copy = {\n            ...field,\n            values: new ArrayVector(\n              field.values.toArray().map((v) => {\n                if (!(Number.isFinite(v) || v == null)) {\n                  return null;\n                }\n                return v;\n              })\n            ),\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.boolean:\n          hasValueField = true;\n          const custom: GraphFieldConfig = field.config?.custom ?? {};\n          const config = {\n            ...field.config,\n            max: 1,\n            min: 0,\n            custom,\n          };\n\n          // smooth and linear do not make sense\n          if (custom.lineInterpolation !== LineInterpolation.StepBefore) {\n            custom.lineInterpolation = LineInterpolation.StepAfter;\n          }\n\n          copy = {\n            ...field,\n            config,\n            type: FieldType.number,\n            values: new ArrayVector(\n              field.values.toArray().map((v) => {\n                if (v == null) {\n                  return v;\n                }\n                return Boolean(v) ? 1 : 0;\n              })\n            ),\n          };\n\n          if (!isBooleanUnit(config.unit)) {\n            config.unit = 'bool';\n            copy.display = getDisplayProcessor({ field: copy, theme });\n          }\n\n          fields.push(copy);\n          break;\n      }\n    }\n\n    if (hasTimeField && hasValueField) {\n      frames.push({\n        ...frame,\n        fields,\n      });\n    }\n  }\n\n  if (frames.length) {\n    return frames;\n  }\n\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}