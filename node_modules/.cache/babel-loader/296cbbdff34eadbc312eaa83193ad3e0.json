{"ast":null,"code":"const _excluded = [\"bucketFrame\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { AxisPlacement, ScaleDistribution, VisibilityMode } from '@grafana/schema';\nimport { HeatmapCellLayout, HeatmapCalculationMode } from 'app/features/transformers/calculateHeatmap/models.gen';\nimport { defaultPanelOptions, HeatmapColorMode } from './models.gen';\nimport { colorSchemes } from './palettes';\n/** Called when the version number changes */\n\nexport const heatmapMigrationHandler = panel => {\n  // Migrating from angular\n  if (Object.keys(panel.options).length === 0) {\n    return heatmapChangedHandler(panel, 'heatmap', {\n      angular: panel\n    }, panel.fieldConfig);\n  }\n\n  return panel.options;\n};\n/**\n * This is called when the panel changes from another panel\n */\n\nexport const heatmapChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === 'heatmap' && prevOptions.angular) {\n    const {\n      fieldConfig,\n      options\n    } = angularToReactHeatmap(Object.assign({}, prevOptions.angular, {\n      fieldConfig: prevFieldConfig\n    }));\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n\n    return options;\n  } // alpha for 8.5+, then beta at 9.0.1\n\n\n  if (prevPluginId === 'heatmap-new') {\n    const _panel$options = panel.options,\n          {\n      bucketFrame\n    } = _panel$options,\n          options = _objectWithoutPropertiesLoose(_panel$options, _excluded);\n\n    if (bucketFrame) {\n      return Object.assign({}, options, {\n        rowsFrame: bucketFrame\n      });\n    }\n\n    return panel.options;\n  }\n\n  return {};\n};\nexport function angularToReactHeatmap(angular) {\n  var _angular$cards, _angular$cards2, _angular$tooltip, _angular$tooltip2;\n\n  const fieldConfig = {\n    defaults: {},\n    overrides: []\n  };\n  const calculate = angular.dataFormat === 'tsbuckets' ? false : true;\n  const calculation = Object.assign({}, defaultPanelOptions.calculation);\n  const oldYAxis = Object.assign({\n    logBase: 1\n  }, angular.yAxis);\n\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = {\n        mode: HeatmapCalculationMode.Size,\n        value: `${angular.xBucketSize}`\n      };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: `${angular.xBucketNumber}`\n      };\n    }\n\n    if (angular.yBucketSize) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Size,\n        value: `${angular.yBucketSize}`\n      };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: `${angular.yBucketNumber}`\n      };\n    }\n\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : undefined,\n        scale: {\n          type: ScaleDistribution.Log,\n          log: oldYAxis.logBase\n        }\n      };\n    }\n  }\n\n  const options = {\n    calculate,\n    calculation,\n    color: Object.assign({}, defaultPanelOptions.color, {\n      steps: 128 // best match with existing colors\n\n    }),\n    cellGap: asNumber((_angular$cards = angular.cards) === null || _angular$cards === void 0 ? void 0 : _angular$cards.cardPadding, 2),\n    cellRadius: asNumber((_angular$cards2 = angular.cards) === null || _angular$cards2 === void 0 ? void 0 : _angular$cards2.cardRound),\n    // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? AxisPlacement.Hidden : AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals)\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound)\n    },\n    legend: {\n      show: Boolean(angular.legend.show)\n    },\n    showValue: VisibilityMode.Never,\n    tooltip: {\n      show: Boolean((_angular$tooltip = angular.tooltip) === null || _angular$tooltip === void 0 ? void 0 : _angular$tooltip.show),\n      yHistogram: Boolean((_angular$tooltip2 = angular.tooltip) === null || _angular$tooltip2 === void 0 ? void 0 : _angular$tooltip2.showHistogram)\n    },\n    exemplars: Object.assign({}, defaultPanelOptions.exemplars)\n  };\n\n  if (angular.hideZeroBuckets) {\n    options.filterValues = Object.assign({}, defaultPanelOptions.filterValues); // min: 1e-9\n  } // Migrate color options\n\n\n  const color = angular.color;\n\n  switch (color === null || color === void 0 ? void 0 : color.mode) {\n    case 'spectrum':\n      {\n        options.color.mode = HeatmapColorMode.Scheme;\n        const current = color.colorScheme;\n        let scheme = colorSchemes.find(v => v.name === current);\n\n        if (!scheme) {\n          scheme = colorSchemes.find(v => current.indexOf(v.name) >= 0);\n        }\n\n        options.color.scheme = scheme ? scheme.name : defaultPanelOptions.color.scheme;\n        break;\n      }\n\n    case 'opacity':\n      {\n        options.color.mode = HeatmapColorMode.Opacity;\n        options.color.scale = color.scale;\n        break;\n      }\n  }\n\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n  return {\n    fieldConfig,\n    options\n  };\n}\n\nfunction getHeatmapCellLayout(v) {\n  switch (v) {\n    case 'upper':\n      return HeatmapCellLayout.ge;\n\n    case 'lower':\n      return HeatmapCellLayout.le;\n\n    case 'middle':\n      return HeatmapCellLayout.unknown;\n  }\n\n  return HeatmapCellLayout.auto;\n}\n\nfunction asNumber(v, defaultValue) {\n  if (v == null || v === '') {\n    return defaultValue;\n  }\n\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}","map":{"version":3,"names":["AxisPlacement","ScaleDistribution","VisibilityMode","HeatmapCellLayout","HeatmapCalculationMode","defaultPanelOptions","HeatmapColorMode","colorSchemes","heatmapMigrationHandler","panel","Object","keys","options","length","heatmapChangedHandler","angular","fieldConfig","prevPluginId","prevOptions","prevFieldConfig","angularToReactHeatmap","bucketFrame","rowsFrame","defaults","overrides","calculate","dataFormat","calculation","oldYAxis","logBase","yAxis","xBucketSize","xBuckets","mode","Size","value","xBucketNumber","Count","yBucketSize","yBuckets","yBucketNumber","splitFactor","undefined","scale","type","Log","log","color","steps","cellGap","asNumber","cards","cardPadding","cellRadius","cardRound","axisPlacement","show","Hidden","Left","reverse","Boolean","reverseYBuckets","axisWidth","width","min","max","unit","format","decimals","cellValues","tooltipDecimals","layout","getHeatmapCellLayout","yBucketBound","legend","showValue","Never","tooltip","yHistogram","showHistogram","exemplars","hideZeroBuckets","filterValues","Scheme","current","colorScheme","scheme","find","v","name","indexOf","Opacity","fill","cardColor","ge","le","unknown","auto","defaultValue","num","isNaN"],"sources":["/home/soula/grafana/public/app/plugins/panel/heatmap/migrations.ts"],"sourcesContent":["import { FieldConfigSource, PanelModel, PanelTypeChangedHandler } from '@grafana/data';\nimport { AxisPlacement, ScaleDistribution, VisibilityMode } from '@grafana/schema';\nimport {\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { PanelOptions, defaultPanelOptions, HeatmapColorMode } from './models.gen';\nimport { colorSchemes } from './palettes';\n\n/** Called when the version number changes */\nexport const heatmapMigrationHandler = (panel: PanelModel): Partial<PanelOptions> => {\n  // Migrating from angular\n  if (Object.keys(panel.options).length === 0) {\n    return heatmapChangedHandler(panel, 'heatmap', { angular: panel }, panel.fieldConfig);\n  }\n  return panel.options;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const heatmapChangedHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === 'heatmap' && prevOptions.angular) {\n    const { fieldConfig, options } = angularToReactHeatmap({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    return options;\n  }\n  // alpha for 8.5+, then beta at 9.0.1\n  if (prevPluginId === 'heatmap-new') {\n    const { bucketFrame, ...options } = panel.options;\n    if (bucketFrame) {\n      return { ...options, rowsFrame: bucketFrame };\n    }\n    return panel.options;\n  }\n  return {};\n};\n\nexport function angularToReactHeatmap(angular: any): { fieldConfig: FieldConfigSource; options: PanelOptions } {\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [],\n  };\n\n  const calculate = angular.dataFormat === 'tsbuckets' ? false : true;\n  const calculation: HeatmapCalculationOptions = {\n    ...defaultPanelOptions.calculation,\n  };\n\n  const oldYAxis = { logBase: 1, ...angular.yAxis };\n\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.xBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.xBucketNumber}` };\n    }\n\n    if (angular.yBucketSize) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.yBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.yBucketNumber}` };\n    }\n\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : undefined,\n        scale: {\n          type: ScaleDistribution.Log,\n          log: oldYAxis.logBase,\n        },\n      };\n    }\n  }\n\n  const options: PanelOptions = {\n    calculate,\n    calculation,\n    color: {\n      ...defaultPanelOptions.color,\n      steps: 128, // best match with existing colors\n    },\n    cellGap: asNumber(angular.cards?.cardPadding, 2),\n    cellRadius: asNumber(angular.cards?.cardRound), // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? AxisPlacement.Hidden : AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals,\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals),\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound),\n    },\n    legend: {\n      show: Boolean(angular.legend.show),\n    },\n    showValue: VisibilityMode.Never,\n    tooltip: {\n      show: Boolean(angular.tooltip?.show),\n      yHistogram: Boolean(angular.tooltip?.showHistogram),\n    },\n    exemplars: {\n      ...defaultPanelOptions.exemplars,\n    },\n  };\n\n  if (angular.hideZeroBuckets) {\n    options.filterValues = { ...defaultPanelOptions.filterValues }; // min: 1e-9\n  }\n\n  // Migrate color options\n  const color = angular.color;\n  switch (color?.mode) {\n    case 'spectrum': {\n      options.color.mode = HeatmapColorMode.Scheme;\n\n      const current = color.colorScheme as string;\n      let scheme = colorSchemes.find((v) => v.name === current);\n      if (!scheme) {\n        scheme = colorSchemes.find((v) => current.indexOf(v.name) >= 0);\n      }\n      options.color.scheme = scheme ? scheme.name : defaultPanelOptions.color.scheme;\n      break;\n    }\n    case 'opacity': {\n      options.color.mode = HeatmapColorMode.Opacity;\n      options.color.scale = color.scale;\n      break;\n    }\n  }\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n\n  return { fieldConfig, options };\n}\n\nfunction getHeatmapCellLayout(v?: string): HeatmapCellLayout {\n  switch (v) {\n    case 'upper':\n      return HeatmapCellLayout.ge;\n    case 'lower':\n      return HeatmapCellLayout.le;\n    case 'middle':\n      return HeatmapCellLayout.unknown;\n  }\n  return HeatmapCellLayout.auto;\n}\n\nfunction asNumber(v: any, defaultValue?: number): number | undefined {\n  if (v == null || v === '') {\n    return defaultValue;\n  }\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}