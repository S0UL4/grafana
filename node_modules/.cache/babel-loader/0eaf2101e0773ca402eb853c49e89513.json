{"ast":null,"code":"import { config } from '@grafana/runtime';\n// Call this function to migrate queries from within the plugin.\nexport function migrateMetricQuery(query) {\n  //add metric query migrations here\n  const migratedQuery = migrateAliasPatterns(query);\n  return migratedQuery;\n}\nconst aliasPatterns = {\n  metric: `PROP('MetricName')`,\n  namespace: `PROP('Namespace')`,\n  period: `PROP('Period')`,\n  region: `PROP('Region')`,\n  stat: `PROP('Stat')`,\n  label: `LABEL`\n};\nexport function migrateAliasPatterns(query) {\n  if (config.featureToggles.cloudWatchDynamicLabels && !query.hasOwnProperty('label')) {\n    var _query$alias$replace, _query$alias;\n\n    const regex = /{{\\s*(.+?)\\s*}}/g;\n    query.label = (_query$alias$replace = (_query$alias = query.alias) === null || _query$alias === void 0 ? void 0 : _query$alias.replace(regex, (_, value) => {\n      if (aliasPatterns.hasOwnProperty(value)) {\n        return `\\${${aliasPatterns[value]}}`;\n      }\n\n      return `\\${PROP('Dim.${value}')}`;\n    })) !== null && _query$alias$replace !== void 0 ? _query$alias$replace : '';\n  }\n\n  return query;\n}","map":{"version":3,"names":["config","migrateMetricQuery","query","migratedQuery","migrateAliasPatterns","aliasPatterns","metric","namespace","period","region","stat","label","featureToggles","cloudWatchDynamicLabels","hasOwnProperty","regex","alias","replace","_","value"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/migrations/metricQueryMigrations.ts"],"sourcesContent":["import { config } from '@grafana/runtime';\n\nimport { CloudWatchMetricsQuery } from '../types';\n\n// Call this function to migrate queries from within the plugin.\nexport function migrateMetricQuery(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  //add metric query migrations here\n  const migratedQuery = migrateAliasPatterns(query);\n  return migratedQuery;\n}\n\nconst aliasPatterns: Record<string, string> = {\n  metric: `PROP('MetricName')`,\n  namespace: `PROP('Namespace')`,\n  period: `PROP('Period')`,\n  region: `PROP('Region')`,\n  stat: `PROP('Stat')`,\n  label: `LABEL`,\n};\n\nexport function migrateAliasPatterns(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  if (config.featureToggles.cloudWatchDynamicLabels && !query.hasOwnProperty('label')) {\n    const regex = /{{\\s*(.+?)\\s*}}/g;\n    query.label =\n      query.alias?.replace(regex, (_, value) => {\n        if (aliasPatterns.hasOwnProperty(value)) {\n          return `\\${${aliasPatterns[value]}}`;\n        }\n\n        return `\\${PROP('Dim.${value}')}`;\n      }) ?? '';\n  }\n\n  return query;\n}\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AAIA;AACA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAAmF;EACxF;EACA,MAAMC,aAAa,GAAGC,oBAAoB,CAACF,KAAD,CAA1C;EACA,OAAOC,aAAP;AACD;AAED,MAAME,aAAqC,GAAG;EAC5CC,MAAM,EAAG,oBADmC;EAE5CC,SAAS,EAAG,mBAFgC;EAG5CC,MAAM,EAAG,gBAHmC;EAI5CC,MAAM,EAAG,gBAJmC;EAK5CC,IAAI,EAAG,cALqC;EAM5CC,KAAK,EAAG;AANoC,CAA9C;AASA,OAAO,SAASP,oBAAT,CAA8BF,KAA9B,EAAqF;EAC1F,IAAIF,MAAM,CAACY,cAAP,CAAsBC,uBAAtB,IAAiD,CAACX,KAAK,CAACY,cAAN,CAAqB,OAArB,CAAtD,EAAqF;IAAA;;IACnF,MAAMC,KAAK,GAAG,kBAAd;IACAb,KAAK,CAACS,KAAN,2CACET,KAAK,CAACc,KADR,iDACE,aAAaC,OAAb,CAAqBF,KAArB,EAA4B,CAACG,CAAD,EAAIC,KAAJ,KAAc;MACxC,IAAId,aAAa,CAACS,cAAd,CAA6BK,KAA7B,CAAJ,EAAyC;QACvC,OAAQ,MAAKd,aAAa,CAACc,KAAD,CAAQ,GAAlC;MACD;;MAED,OAAQ,gBAAeA,KAAM,KAA7B;IACD,CAND,CADF,uEAOQ,EAPR;EAQD;;EAED,OAAOjB,KAAP;AACD"},"metadata":{},"sourceType":"module"}