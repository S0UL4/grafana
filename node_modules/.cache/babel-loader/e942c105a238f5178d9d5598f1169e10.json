{"ast":null,"code":"import React, { useCallback, useEffect, useState } from 'react';\nimport { EditorField, EditorRow, EditorRows } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\nimport SQLGenerator from '../../cloudwatch-sql/SQLGenerator';\nimport SQLBuilderSelectRow from './SQLBuilderSelectRow';\nimport SQLFilter from './SQLFilter';\nimport SQLGroupBy from './SQLGroupBy';\nimport SQLOrderByGroup from './SQLOrderByGroup';\nimport { setSql } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function SQLBuilderEditor({\n  query,\n  datasource,\n  onChange,\n  onRunQuery\n}) {\n  var _query$sql, _query$sql4;\n\n  const sql = (_query$sql = query.sql) !== null && _query$sql !== void 0 ? _query$sql : {};\n  const onQueryChange = useCallback(query => {\n    var _query$sql2;\n\n    const sqlGenerator = new SQLGenerator();\n    const sqlString = sqlGenerator.expressionToSqlQuery((_query$sql2 = query.sql) !== null && _query$sql2 !== void 0 ? _query$sql2 : {});\n    const fullQuery = Object.assign({}, query, {\n      sqlExpression: sqlString\n    });\n    onChange(fullQuery);\n    onRunQuery();\n  }, [onChange, onRunQuery]);\n  const [sqlPreview, setSQLPreview] = useState();\n  useEffect(() => {\n    var _query$sql3;\n\n    const sqlGenerator = new SQLGenerator();\n    const sqlString = sqlGenerator.expressionToSqlQuery((_query$sql3 = query.sql) !== null && _query$sql3 !== void 0 ? _query$sql3 : {});\n\n    if (sqlPreview !== sqlString) {\n      setSQLPreview(sqlString);\n    }\n  }, [query, sqlPreview, setSQLPreview]);\n  return /*#__PURE__*/_jsxs(EditorRows, {\n    children: [/*#__PURE__*/_jsx(EditorRow, {\n      children: /*#__PURE__*/_jsx(SQLBuilderSelectRow, {\n        query: query,\n        onQueryChange: onQueryChange,\n        datasource: datasource\n      })\n    }), /*#__PURE__*/_jsx(EditorRow, {\n      children: /*#__PURE__*/_jsx(EditorField, {\n        label: \"Filter\",\n        optional: true,\n        children: /*#__PURE__*/_jsx(SQLFilter, {\n          query: query,\n          onQueryChange: onQueryChange,\n          datasource: datasource\n        })\n      })\n    }), /*#__PURE__*/_jsxs(EditorRow, {\n      children: [/*#__PURE__*/_jsx(EditorField, {\n        label: \"Group by\",\n        optional: true,\n        children: /*#__PURE__*/_jsx(SQLGroupBy, {\n          query: query,\n          onQueryChange: onQueryChange,\n          datasource: datasource\n        })\n      }), /*#__PURE__*/_jsx(SQLOrderByGroup, {\n        query: query,\n        onQueryChange: onQueryChange,\n        datasource: datasource\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Limit\",\n        optional: true,\n        children: /*#__PURE__*/_jsx(Input, {\n          id: `${query.refId}-cloudwatch-sql-builder-editor-limit`,\n          value: sql.limit,\n          onChange: e => {\n            const val = e.currentTarget.valueAsNumber;\n            onQueryChange(setSql(query, {\n              limit: isNaN(val) ? undefined : val\n            }));\n          },\n          type: \"number\",\n          min: 1\n        })\n      })]\n    }), sqlPreview && /*#__PURE__*/_jsxs(EditorRow, {\n      children: [process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsx(\"pre\", {\n        children: JSON.stringify((_query$sql4 = query.sql) !== null && _query$sql4 !== void 0 ? _query$sql4 : {}, null, 2)\n      }), /*#__PURE__*/_jsx(\"pre\", {\n        children: sqlPreview !== null && sqlPreview !== void 0 ? sqlPreview : ''\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","useCallback","useEffect","useState","EditorField","EditorRow","EditorRows","Input","SQLGenerator","SQLBuilderSelectRow","SQLFilter","SQLGroupBy","SQLOrderByGroup","setSql","SQLBuilderEditor","query","datasource","onChange","onRunQuery","sql","onQueryChange","sqlGenerator","sqlString","expressionToSqlQuery","fullQuery","sqlExpression","sqlPreview","setSQLPreview","refId","limit","e","val","currentTarget","valueAsNumber","isNaN","undefined","process","env","NODE_ENV","JSON","stringify"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLBuilderEditor.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport { EditorField, EditorRow, EditorRows } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport SQLGenerator from '../../cloudwatch-sql/SQLGenerator';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchMetricsQuery } from '../../types';\n\nimport SQLBuilderSelectRow from './SQLBuilderSelectRow';\nimport SQLFilter from './SQLFilter';\nimport SQLGroupBy from './SQLGroupBy';\nimport SQLOrderByGroup from './SQLOrderByGroup';\nimport { setSql } from './utils';\n\nexport type Props = {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (value: CloudWatchMetricsQuery) => void;\n  onRunQuery: () => void;\n};\n\nexport function SQLBuilderEditor({ query, datasource, onChange, onRunQuery }: React.PropsWithChildren<Props>) {\n  const sql = query.sql ?? {};\n\n  const onQueryChange = useCallback(\n    (query: CloudWatchMetricsQuery) => {\n      const sqlGenerator = new SQLGenerator();\n      const sqlString = sqlGenerator.expressionToSqlQuery(query.sql ?? {});\n      const fullQuery = {\n        ...query,\n        sqlExpression: sqlString,\n      };\n\n      onChange(fullQuery);\n      onRunQuery();\n    },\n    [onChange, onRunQuery]\n  );\n\n  const [sqlPreview, setSQLPreview] = useState<string | undefined>();\n  useEffect(() => {\n    const sqlGenerator = new SQLGenerator();\n    const sqlString = sqlGenerator.expressionToSqlQuery(query.sql ?? {});\n    if (sqlPreview !== sqlString) {\n      setSQLPreview(sqlString);\n    }\n  }, [query, sqlPreview, setSQLPreview]);\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        <SQLBuilderSelectRow query={query} onQueryChange={onQueryChange} datasource={datasource} />\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Filter\" optional={true}>\n          <SQLFilter query={query} onQueryChange={onQueryChange} datasource={datasource} />\n        </EditorField>\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Group by\" optional>\n          <SQLGroupBy query={query} onQueryChange={onQueryChange} datasource={datasource} />\n        </EditorField>\n\n        <SQLOrderByGroup query={query} onQueryChange={onQueryChange} datasource={datasource}></SQLOrderByGroup>\n\n        <EditorField label=\"Limit\" optional>\n          <Input\n            id={`${query.refId}-cloudwatch-sql-builder-editor-limit`}\n            value={sql.limit}\n            onChange={(e) => {\n              const val = e.currentTarget.valueAsNumber;\n              onQueryChange(setSql(query, { limit: isNaN(val) ? undefined : val }));\n            }}\n            type=\"number\"\n            min={1}\n          />\n        </EditorField>\n      </EditorRow>\n\n      {sqlPreview && (\n        <EditorRow>\n          {process.env.NODE_ENV === 'development' && <pre>{JSON.stringify(query.sql ?? {}, null, 2)}</pre>}\n          <pre>{sqlPreview ?? ''}</pre>\n        </EditorRow>\n      )}\n    </EditorRows>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}