{"ast":null,"code":"import { config } from '@grafana/runtime';\nimport { AzureCloud } from './AzureCredentials';\nconst concealed = Symbol('Concealed client secret');\n\nfunction getDefaultAzureCloud() {\n  return config.azure.cloud || AzureCloud.Public;\n}\n\nfunction getSecret(options) {\n  if (options.secureJsonFields.azureClientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    var _options$secureJsonDa;\n\n    const secret = (_options$secureJsonDa = options.secureJsonData) === null || _options$secureJsonDa === void 0 ? void 0 : _options$secureJsonDa.azureClientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function hasCredentials(options) {\n  return !!options.jsonData.azureCredentials;\n}\nexport function getDefaultCredentials() {\n  if (config.azure.managedIdentityEnabled) {\n    return {\n      authType: 'msi'\n    };\n  } else {\n    return {\n      authType: 'clientsecret',\n      azureCloud: getDefaultAzureCloud()\n    };\n  }\n}\nexport function getCredentials(options) {\n  const credentials = options.jsonData.azureCredentials; // If no credentials saved, then return empty credentials\n  // of type based on whether the managed identity enabled\n\n  if (!credentials) {\n    return getDefaultCredentials();\n  }\n\n  switch (credentials.authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi'\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud()\n        };\n      }\n\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n        tenantId: credentials.tenantId,\n        clientId: credentials.clientId,\n        clientSecret: getSecret(options)\n      };\n  }\n}\nexport function updateCredentials(options, credentials) {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = Object.assign({}, options, {\n        jsonData: Object.assign({}, options.jsonData, {\n          azureCredentials: {\n            authType: 'msi'\n          }\n        })\n      });\n      return options;\n\n    case 'clientsecret':\n      options = Object.assign({}, options, {\n        jsonData: Object.assign({}, options.jsonData, {\n          azureCredentials: {\n            authType: 'clientsecret',\n            azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n            tenantId: credentials.tenantId,\n            clientId: credentials.clientId\n          }\n        }),\n        secureJsonData: Object.assign({}, options.secureJsonData, {\n          azureClientSecret: typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0 ? credentials.clientSecret : undefined\n        }),\n        secureJsonFields: Object.assign({}, options.secureJsonFields, {\n          azureClientSecret: typeof credentials.clientSecret === 'symbol'\n        })\n      });\n      return options;\n  }\n}\nexport function setDefaultCredentials(options) {\n  return {\n    jsonData: Object.assign({}, options.jsonData, {\n      azureCredentials: getDefaultCredentials()\n    })\n  };\n}\nexport function resetCredentials(options) {\n  return {\n    jsonData: Object.assign({}, options.jsonData, {\n      azureAuth: undefined,\n      azureCredentials: undefined,\n      azureEndpointResourceId: undefined\n    })\n  };\n}","map":{"version":3,"names":["config","AzureCloud","concealed","Symbol","getDefaultAzureCloud","azure","cloud","Public","getSecret","options","secureJsonFields","azureClientSecret","secret","secureJsonData","length","undefined","hasCredentials","jsonData","azureCredentials","getDefaultCredentials","managedIdentityEnabled","authType","azureCloud","getCredentials","credentials","tenantId","clientId","clientSecret","updateCredentials","Error","setDefaultCredentials","resetCredentials","azureAuth","azureEndpointResourceId"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/configuration/AzureCredentialsConfig.ts"],"sourcesContent":["import { DataSourceSettings } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { AzureCloud, AzureCredentials, ConcealedSecret } from './AzureCredentials';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nfunction getDefaultAzureCloud(): string {\n  return config.azure.cloud || AzureCloud.Public;\n}\n\nfunction getSecret(options: DataSourceSettings<any, any>): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.azureClientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.azureClientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function hasCredentials(options: DataSourceSettings<any, any>): boolean {\n  return !!options.jsonData.azureCredentials;\n}\n\nexport function getDefaultCredentials(): AzureCredentials {\n  if (config.azure.managedIdentityEnabled) {\n    return { authType: 'msi' };\n  } else {\n    return { authType: 'clientsecret', azureCloud: getDefaultAzureCloud() };\n  }\n}\n\nexport function getCredentials(options: DataSourceSettings<any, any>): AzureCredentials {\n  const credentials = options.jsonData.azureCredentials as AzureCredentials | undefined;\n\n  // If no credentials saved, then return empty credentials\n  // of type based on whether the managed identity enabled\n  if (!credentials) {\n    return getDefaultCredentials();\n  }\n\n  switch (credentials.authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n        tenantId: credentials.tenantId,\n        clientId: credentials.clientId,\n        clientSecret: getSecret(options),\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: DataSourceSettings<any, any>,\n  credentials: AzureCredentials\n): DataSourceSettings<any, any> {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'msi',\n          },\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'clientsecret',\n            azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n            tenantId: credentials.tenantId,\n            clientId: credentials.clientId,\n          },\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          azureClientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          azureClientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n\nexport function setDefaultCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureCredentials: getDefaultCredentials(),\n    },\n  };\n}\n\nexport function resetCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureAuth: undefined,\n      azureCredentials: undefined,\n      azureEndpointResourceId: undefined,\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}