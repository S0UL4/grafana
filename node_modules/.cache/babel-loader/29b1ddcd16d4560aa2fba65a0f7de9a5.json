{"ast":null,"code":"/**\n * Visual query model\n */\nexport let PromVisualQueryOperationCategory;\n\n(function (PromVisualQueryOperationCategory) {\n  PromVisualQueryOperationCategory[\"Aggregations\"] = \"Aggregations\";\n  PromVisualQueryOperationCategory[\"RangeFunctions\"] = \"Range functions\";\n  PromVisualQueryOperationCategory[\"Functions\"] = \"Functions\";\n  PromVisualQueryOperationCategory[\"BinaryOps\"] = \"Binary operations\";\n  PromVisualQueryOperationCategory[\"Trigonometric\"] = \"Trigonometric\";\n  PromVisualQueryOperationCategory[\"Time\"] = \"Time Functions\";\n})(PromVisualQueryOperationCategory || (PromVisualQueryOperationCategory = {}));\n\nexport let PromOperationId;\n\n(function (PromOperationId) {\n  PromOperationId[\"Abs\"] = \"abs\";\n  PromOperationId[\"Absent\"] = \"absent\";\n  PromOperationId[\"AbsentOverTime\"] = \"absent_over_time\";\n  PromOperationId[\"Acos\"] = \"acos\";\n  PromOperationId[\"Acosh\"] = \"acosh\";\n  PromOperationId[\"Asin\"] = \"asin\";\n  PromOperationId[\"Asinh\"] = \"asinh\";\n  PromOperationId[\"Atan\"] = \"atan\";\n  PromOperationId[\"Atanh\"] = \"atanh\";\n  PromOperationId[\"Avg\"] = \"avg\";\n  PromOperationId[\"AvgOverTime\"] = \"avg_over_time\";\n  PromOperationId[\"BottomK\"] = \"bottomk\";\n  PromOperationId[\"Ceil\"] = \"ceil\";\n  PromOperationId[\"Changes\"] = \"changes\";\n  PromOperationId[\"Clamp\"] = \"clamp\";\n  PromOperationId[\"ClampMax\"] = \"clamp_max\";\n  PromOperationId[\"ClampMin\"] = \"clamp_min\";\n  PromOperationId[\"Cos\"] = \"cos\";\n  PromOperationId[\"Cosh\"] = \"cosh\";\n  PromOperationId[\"Count\"] = \"count\";\n  PromOperationId[\"CountOverTime\"] = \"count_over_time\";\n  PromOperationId[\"CountScalar\"] = \"count_scalar\";\n  PromOperationId[\"CountValues\"] = \"count_values\";\n  PromOperationId[\"DayOfMonth\"] = \"day_of_month\";\n  PromOperationId[\"DayOfWeek\"] = \"day_of_week\";\n  PromOperationId[\"DaysInMonth\"] = \"days_in_month\";\n  PromOperationId[\"Deg\"] = \"deg\";\n  PromOperationId[\"Delta\"] = \"delta\";\n  PromOperationId[\"Deriv\"] = \"deriv\";\n  PromOperationId[\"DropCommonLabels\"] = \"drop_common_labels\";\n  PromOperationId[\"Exp\"] = \"exp\";\n  PromOperationId[\"Floor\"] = \"floor\";\n  PromOperationId[\"Group\"] = \"group\";\n  PromOperationId[\"HistogramQuantile\"] = \"histogram_quantile\";\n  PromOperationId[\"HoltWinters\"] = \"holt_winters\";\n  PromOperationId[\"Hour\"] = \"hour\";\n  PromOperationId[\"Idelta\"] = \"idelta\";\n  PromOperationId[\"Increase\"] = \"increase\";\n  PromOperationId[\"Irate\"] = \"irate\";\n  PromOperationId[\"LabelJoin\"] = \"label_join\";\n  PromOperationId[\"LabelReplace\"] = \"label_replace\";\n  PromOperationId[\"Last\"] = \"last\";\n  PromOperationId[\"LastOverTime\"] = \"last_over_time\";\n  PromOperationId[\"Ln\"] = \"ln\";\n  PromOperationId[\"Log10\"] = \"log10\";\n  PromOperationId[\"Log2\"] = \"log2\";\n  PromOperationId[\"Max\"] = \"max\";\n  PromOperationId[\"MaxOverTime\"] = \"max_over_time\";\n  PromOperationId[\"Min\"] = \"min\";\n  PromOperationId[\"MinOverTime\"] = \"min_over_time\";\n  PromOperationId[\"Minute\"] = \"minute\";\n  PromOperationId[\"Month\"] = \"month\";\n  PromOperationId[\"Pi\"] = \"pi\";\n  PromOperationId[\"PredictLinear\"] = \"predict_linear\";\n  PromOperationId[\"Present\"] = \"present\";\n  PromOperationId[\"PresentOverTime\"] = \"present_over_time\";\n  PromOperationId[\"Quantile\"] = \"quantile\";\n  PromOperationId[\"QuantileOverTime\"] = \"quantile_over_time\";\n  PromOperationId[\"Rad\"] = \"rad\";\n  PromOperationId[\"Rate\"] = \"rate\";\n  PromOperationId[\"Resets\"] = \"resets\";\n  PromOperationId[\"Round\"] = \"round\";\n  PromOperationId[\"Scalar\"] = \"scalar\";\n  PromOperationId[\"Sgn\"] = \"sgn\";\n  PromOperationId[\"Sin\"] = \"sin\";\n  PromOperationId[\"Sinh\"] = \"sinh\";\n  PromOperationId[\"Sort\"] = \"sort\";\n  PromOperationId[\"SortDesc\"] = \"sort_desc\";\n  PromOperationId[\"Sqrt\"] = \"sqrt\";\n  PromOperationId[\"Stddev\"] = \"stddev\";\n  PromOperationId[\"StddevOverTime\"] = \"stddev_over_time\";\n  PromOperationId[\"Sum\"] = \"sum\";\n  PromOperationId[\"SumOverTime\"] = \"sum_over_time\";\n  PromOperationId[\"Tan\"] = \"tan\";\n  PromOperationId[\"Tanh\"] = \"tanh\";\n  PromOperationId[\"Time\"] = \"time\";\n  PromOperationId[\"Timestamp\"] = \"timestamp\";\n  PromOperationId[\"TopK\"] = \"topk\";\n  PromOperationId[\"Vector\"] = \"vector\";\n  PromOperationId[\"Year\"] = \"year\";\n  PromOperationId[\"Addition\"] = \"__addition\";\n  PromOperationId[\"Subtraction\"] = \"__subtraction\";\n  PromOperationId[\"MultiplyBy\"] = \"__multiply_by\";\n  PromOperationId[\"DivideBy\"] = \"__divide_by\";\n  PromOperationId[\"Modulo\"] = \"__modulo\";\n  PromOperationId[\"Exponent\"] = \"__exponent\";\n  PromOperationId[\"NestedQuery\"] = \"__nested_query\";\n  PromOperationId[\"EqualTo\"] = \"__equal_to\";\n  PromOperationId[\"NotEqualTo\"] = \"__not_equal_to\";\n  PromOperationId[\"GreaterThan\"] = \"__greater_than\";\n  PromOperationId[\"LessThan\"] = \"__less_than\";\n  PromOperationId[\"GreaterOrEqual\"] = \"__greater_or_equal\";\n  PromOperationId[\"LessOrEqual\"] = \"__less_or_equal\";\n})(PromOperationId || (PromOperationId = {}));","map":{"version":3,"names":["PromVisualQueryOperationCategory","PromOperationId"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/types.ts"],"sourcesContent":["import { VisualQueryBinary } from './shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from './shared/types';\n\n/**\n * Visual query model\n */\nexport interface PromVisualQuery {\n  metric: string;\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: PromVisualQueryBinary[];\n}\n\nexport type PromVisualQueryBinary = VisualQueryBinary<PromVisualQuery>;\n\nexport enum PromVisualQueryOperationCategory {\n  Aggregations = 'Aggregations',\n  RangeFunctions = 'Range functions',\n  Functions = 'Functions',\n  BinaryOps = 'Binary operations',\n  Trigonometric = 'Trigonometric',\n  Time = 'Time Functions',\n}\n\nexport enum PromOperationId {\n  Abs = 'abs',\n  Absent = 'absent',\n  AbsentOverTime = 'absent_over_time',\n  Acos = 'acos',\n  Acosh = 'acosh',\n  Asin = 'asin',\n  Asinh = 'asinh',\n  Atan = 'atan',\n  Atanh = 'atanh',\n  Avg = 'avg',\n  AvgOverTime = 'avg_over_time',\n  BottomK = 'bottomk',\n  Ceil = 'ceil',\n  Changes = 'changes',\n  Clamp = 'clamp',\n  ClampMax = 'clamp_max',\n  ClampMin = 'clamp_min',\n  Cos = 'cos',\n  Cosh = 'cosh',\n  Count = 'count',\n  CountOverTime = 'count_over_time',\n  CountScalar = 'count_scalar',\n  CountValues = 'count_values',\n  DayOfMonth = 'day_of_month',\n  DayOfWeek = 'day_of_week',\n  DaysInMonth = 'days_in_month',\n  Deg = 'deg',\n  Delta = 'delta',\n  Deriv = 'deriv',\n  DropCommonLabels = 'drop_common_labels',\n  Exp = 'exp',\n  Floor = 'floor',\n  Group = 'group',\n  HistogramQuantile = 'histogram_quantile',\n  HoltWinters = 'holt_winters',\n  Hour = 'hour',\n  Idelta = 'idelta',\n  Increase = 'increase',\n  Irate = 'irate',\n  LabelJoin = 'label_join',\n  LabelReplace = 'label_replace',\n  Last = 'last',\n  LastOverTime = 'last_over_time',\n  Ln = 'ln',\n  Log10 = 'log10',\n  Log2 = 'log2',\n  Max = 'max',\n  MaxOverTime = 'max_over_time',\n  Min = 'min',\n  MinOverTime = 'min_over_time',\n  Minute = 'minute',\n  Month = 'month',\n  Pi = 'pi',\n  PredictLinear = 'predict_linear',\n  Present = 'present',\n  PresentOverTime = 'present_over_time',\n  Quantile = 'quantile',\n  QuantileOverTime = 'quantile_over_time',\n  Rad = 'rad',\n  Rate = 'rate',\n  Resets = 'resets',\n  Round = 'round',\n  Scalar = 'scalar',\n  Sgn = 'sgn',\n  Sin = 'sin',\n  Sinh = 'sinh',\n  Sort = 'sort',\n  SortDesc = 'sort_desc',\n  Sqrt = 'sqrt',\n  Stddev = 'stddev',\n  StddevOverTime = 'stddev_over_time',\n  Sum = 'sum',\n  SumOverTime = 'sum_over_time',\n  Tan = 'tan',\n  Tanh = 'tanh',\n  Time = 'time',\n  Timestamp = 'timestamp',\n  TopK = 'topk',\n  Vector = 'vector',\n  Year = 'year',\n  // Binary ops\n  Addition = '__addition',\n  Subtraction = '__subtraction',\n  MultiplyBy = '__multiply_by',\n  DivideBy = '__divide_by',\n  Modulo = '__modulo',\n  Exponent = '__exponent',\n  NestedQuery = '__nested_query',\n  EqualTo = '__equal_to',\n  NotEqualTo = '__not_equal_to',\n  GreaterThan = '__greater_than',\n  LessThan = '__less_than',\n  GreaterOrEqual = '__greater_or_equal',\n  LessOrEqual = '__less_or_equal',\n}\n\nexport interface PromQueryPattern {\n  name: string;\n  operations: QueryBuilderOperation[];\n}\n"],"mappings":"AAGA;AACA;AACA;AAUA,WAAYA,gCAAZ;;WAAYA,gC;EAAAA,gC;EAAAA,gC;EAAAA,gC;EAAAA,gC;EAAAA,gC;EAAAA,gC;GAAAA,gC,KAAAA,gC;;AASZ,WAAYC,eAAZ;;WAAYA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;GAAAA,e,KAAAA,e"},"metadata":{},"sourceType":"module"}