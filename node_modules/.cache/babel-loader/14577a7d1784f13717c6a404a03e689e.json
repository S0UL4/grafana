{"ast":null,"code":"import React from 'react';\nimport { EditorRow, EditorField, EditorFieldGroup, Stack } from '@grafana/experimental';\nimport { ALIGNMENT_PERIODS, SELECT_WIDTH } from '../../constants';\nimport { AlignmentFunction } from './AlignmentFunction';\nimport { AlignmentPeriodLabel } from './AlignmentPeriodLabel';\nimport { PeriodSelect } from './PeriodSelect';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const Alignment = ({\n  refId,\n  templateVariableOptions,\n  onChange,\n  query,\n  customMetaData,\n  datasource\n}) => {\n  return /*#__PURE__*/_jsx(EditorRow, {\n    children: /*#__PURE__*/_jsxs(EditorFieldGroup, {\n      children: [/*#__PURE__*/_jsx(EditorField, {\n        label: \"Alignment function\",\n        tooltip: \"The process of alignment consists of collecting all data points received in a fixed length of time, applying a function to combine those data points, and assigning a timestamp to the result.\",\n        children: /*#__PURE__*/_jsx(AlignmentFunction, {\n          inputId: `${refId}-alignment-function`,\n          templateVariableOptions: templateVariableOptions,\n          query: query,\n          onChange: onChange\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Alignment period\",\n        children: /*#__PURE__*/_jsx(PeriodSelect, {\n          inputId: `${refId}-alignment-period`,\n          selectWidth: SELECT_WIDTH,\n          templateVariableOptions: templateVariableOptions,\n          current: query.alignmentPeriod,\n          onChange: period => onChange(Object.assign({}, query, {\n            alignmentPeriod: period\n          })),\n          aligmentPeriods: ALIGNMENT_PERIODS\n        })\n      }), /*#__PURE__*/_jsx(Stack, {\n        alignItems: \"flex-end\",\n        children: /*#__PURE__*/_jsx(AlignmentPeriodLabel, {\n          datasource: datasource,\n          customMetaData: customMetaData\n        })\n      })]\n    })\n  });\n};","map":{"version":3,"names":["React","EditorRow","EditorField","EditorFieldGroup","Stack","ALIGNMENT_PERIODS","SELECT_WIDTH","AlignmentFunction","AlignmentPeriodLabel","PeriodSelect","Alignment","refId","templateVariableOptions","onChange","query","customMetaData","datasource","alignmentPeriod","period"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/Experimental/Alignment.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorRow, EditorField, EditorFieldGroup, Stack } from '@grafana/experimental';\n\nimport { ALIGNMENT_PERIODS, SELECT_WIDTH } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { CustomMetaData, MetricQuery, SLOQuery } from '../../types';\n\nimport { AlignmentFunction } from './AlignmentFunction';\nimport { AlignmentPeriodLabel } from './AlignmentPeriodLabel';\nimport { PeriodSelect } from './PeriodSelect';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: MetricQuery | SLOQuery) => void;\n  query: MetricQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  customMetaData: CustomMetaData;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Alignment: FC<Props> = ({\n  refId,\n  templateVariableOptions,\n  onChange,\n  query,\n  customMetaData,\n  datasource,\n}) => {\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <EditorField\n          label=\"Alignment function\"\n          tooltip=\"The process of alignment consists of collecting all data points received in a fixed length of time, applying a function to combine those data points, and assigning a timestamp to the result.\"\n        >\n          <AlignmentFunction\n            inputId={`${refId}-alignment-function`}\n            templateVariableOptions={templateVariableOptions}\n            query={query}\n            onChange={onChange}\n          />\n        </EditorField>\n        <EditorField label=\"Alignment period\">\n          <PeriodSelect\n            inputId={`${refId}-alignment-period`}\n            selectWidth={SELECT_WIDTH}\n            templateVariableOptions={templateVariableOptions}\n            current={query.alignmentPeriod}\n            onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n            aligmentPeriods={ALIGNMENT_PERIODS}\n          />\n        </EditorField>\n        <Stack alignItems=\"flex-end\">\n          <AlignmentPeriodLabel datasource={datasource} customMetaData={customMetaData} />\n        </Stack>\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAA0B,OAA1B;AAGA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,gBAAjC,EAAmDC,KAAnD,QAAgE,uBAAhE;AAEA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,iBAAhD;AAIA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,YAAT,QAA6B,gBAA7B;;;AAWA,OAAO,MAAMC,SAAoB,GAAG,CAAC;EACnCC,KADmC;EAEnCC,uBAFmC;EAGnCC,QAHmC;EAInCC,KAJmC;EAKnCC,cALmC;EAMnCC;AANmC,CAAD,KAO9B;EACJ,oBACE,KAAC,SAAD;IAAA,uBACE,MAAC,gBAAD;MAAA,wBACE,KAAC,WAAD;QACE,KAAK,EAAC,oBADR;QAEE,OAAO,EAAC,gMAFV;QAAA,uBAIE,KAAC,iBAAD;UACE,OAAO,EAAG,GAAEL,KAAM,qBADpB;UAEE,uBAAuB,EAAEC,uBAF3B;UAGE,KAAK,EAAEE,KAHT;UAIE,QAAQ,EAAED;QAJZ;MAJF,EADF,eAYE,KAAC,WAAD;QAAa,KAAK,EAAC,kBAAnB;QAAA,uBACE,KAAC,YAAD;UACE,OAAO,EAAG,GAAEF,KAAM,mBADpB;UAEE,WAAW,EAAEL,YAFf;UAGE,uBAAuB,EAAEM,uBAH3B;UAIE,OAAO,EAAEE,KAAK,CAACG,eAJjB;UAKE,QAAQ,EAAGC,MAAD,IAAYL,QAAQ,mBAAMC,KAAN;YAAaG,eAAe,EAAEC;UAA9B,GALhC;UAME,eAAe,EAAEb;QANnB;MADF,EAZF,eAsBE,KAAC,KAAD;QAAO,UAAU,EAAC,UAAlB;QAAA,uBACE,KAAC,oBAAD;UAAsB,UAAU,EAAEW,UAAlC;UAA8C,cAAc,EAAED;QAA9D;MADF,EAtBF;IAAA;EADF,EADF;AA8BD,CAtCM"},"metadata":{},"sourceType":"module"}