{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { Icon, Input, FieldValidationMessage, useStyles } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const LayerName = ({\n  name,\n  onChange,\n  verifyLayerNameUniqueness\n}) => {\n  const styles = useStyles(getStyles);\n  const [isEditing, setIsEditing] = useState(false);\n  const [validationError, setValidationError] = useState(null);\n\n  const onEditLayer = event => {\n    setIsEditing(true);\n  };\n\n  const onEndEditName = newName => {\n    setIsEditing(false);\n\n    if (validationError) {\n      setValidationError(null);\n      return;\n    }\n\n    if (name !== newName) {\n      onChange(newName);\n    }\n  };\n\n  const onInputChange = event => {\n    const newName = event.currentTarget.value.trim();\n\n    if (newName.length === 0) {\n      setValidationError('An empty layer name is not allowed');\n      return;\n    }\n\n    if (verifyLayerNameUniqueness && !verifyLayerNameUniqueness(newName) && newName !== name) {\n      setValidationError('Layer name already exists');\n      return;\n    }\n\n    if (validationError) {\n      setValidationError(null);\n    }\n  };\n\n  const onEditLayerBlur = event => {\n    onEndEditName(event.currentTarget.value.trim());\n  };\n\n  const onKeyDown = event => {\n    if (event.key === 'Enter') {\n      onEndEditName(event.target.value);\n    }\n  };\n\n  const onFocus = event => {\n    event.target.select();\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.wrapper,\n      children: [!isEditing && /*#__PURE__*/_jsxs(\"button\", {\n        className: styles.layerNameWrapper,\n        title: \"Edit layer name\",\n        onClick: onEditLayer,\n        \"data-testid\": \"layer-name-div\",\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          className: styles.layerName,\n          children: name\n        }), /*#__PURE__*/_jsx(Icon, {\n          name: \"pen\",\n          className: styles.layerEditIcon,\n          size: \"sm\"\n        })]\n      }), isEditing && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          defaultValue: name,\n          onBlur: onEditLayerBlur,\n          autoFocus: true,\n          onKeyDown: onKeyDown,\n          onFocus: onFocus,\n          invalid: validationError !== null,\n          onChange: onInputChange,\n          className: styles.layerNameInput,\n          \"data-testid\": \"layer-name-input\"\n        }), validationError && /*#__PURE__*/_jsx(FieldValidationMessage, {\n          horizontal: true,\n          children: validationError\n        })]\n      })]\n    })\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    wrapper: css`\n      label: Wrapper;\n      display: flex;\n      align-items: center;\n      margin-left: ${theme.spacing.xs};\n    `,\n    layerNameWrapper: css`\n      display: flex;\n      cursor: pointer;\n      border: 1px solid transparent;\n      border-radius: ${theme.border.radius.md};\n      align-items: center;\n      padding: 0 0 0 ${theme.spacing.xs};\n      margin: 0;\n      background: transparent;\n\n      &:hover {\n        background: ${theme.colors.bg3};\n        border: 1px dashed ${theme.colors.border3};\n      }\n\n      &:focus {\n        border: 2px solid ${theme.colors.formInputBorderActive};\n      }\n\n      &:hover,\n      &:focus {\n        .query-name-edit-icon {\n          visibility: visible;\n        }\n      }\n    `,\n    layerName: css`\n      font-weight: ${theme.typography.weight.semibold};\n      color: ${theme.colors.textBlue};\n      cursor: pointer;\n      overflow: hidden;\n      margin-left: ${theme.spacing.xs};\n    `,\n    layerEditIcon: cx(css`\n        margin-left: ${theme.spacing.md};\n        visibility: hidden;\n      `, 'query-name-edit-icon'),\n    layerNameInput: css`\n      max-width: 300px;\n      margin: -4px 0;\n    `\n  };\n};","map":{"version":3,"names":["css","cx","React","useState","Icon","Input","FieldValidationMessage","useStyles","LayerName","name","onChange","verifyLayerNameUniqueness","styles","getStyles","isEditing","setIsEditing","validationError","setValidationError","onEditLayer","event","onEndEditName","newName","onInputChange","currentTarget","value","trim","length","onEditLayerBlur","onKeyDown","key","target","onFocus","select","wrapper","layerNameWrapper","layerName","layerEditIcon","layerNameInput","theme","spacing","xs","border","radius","md","colors","bg3","border3","formInputBorderActive","typography","weight","semibold","textBlue"],"sources":["/home/soula/grafana/public/app/core/components/Layers/LayerName.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { Icon, Input, FieldValidationMessage, useStyles } from '@grafana/ui';\n\nexport interface LayerNameProps {\n  name: string;\n  onChange: (v: string) => void;\n  verifyLayerNameUniqueness?: (nameToCheck: string) => boolean;\n}\n\nexport const LayerName = ({ name, onChange, verifyLayerNameUniqueness }: LayerNameProps) => {\n  const styles = useStyles(getStyles);\n\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  const onEditLayer = (event: React.SyntheticEvent) => {\n    setIsEditing(true);\n  };\n\n  const onEndEditName = (newName: string) => {\n    setIsEditing(false);\n\n    if (validationError) {\n      setValidationError(null);\n      return;\n    }\n\n    if (name !== newName) {\n      onChange(newName);\n    }\n  };\n\n  const onInputChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const newName = event.currentTarget.value.trim();\n\n    if (newName.length === 0) {\n      setValidationError('An empty layer name is not allowed');\n      return;\n    }\n\n    if (verifyLayerNameUniqueness && !verifyLayerNameUniqueness(newName) && newName !== name) {\n      setValidationError('Layer name already exists');\n      return;\n    }\n\n    if (validationError) {\n      setValidationError(null);\n    }\n  };\n\n  const onEditLayerBlur = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onEndEditName(event.currentTarget.value.trim());\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      onEndEditName((event.target as any).value);\n    }\n  };\n\n  const onFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.target.select();\n  };\n\n  return (\n    <>\n      <div className={styles.wrapper}>\n        {!isEditing && (\n          <button\n            className={styles.layerNameWrapper}\n            title=\"Edit layer name\"\n            onClick={onEditLayer}\n            data-testid=\"layer-name-div\"\n          >\n            <span className={styles.layerName}>{name}</span>\n            <Icon name=\"pen\" className={styles.layerEditIcon} size=\"sm\" />\n          </button>\n        )}\n\n        {isEditing && (\n          <>\n            <Input\n              type=\"text\"\n              defaultValue={name}\n              onBlur={onEditLayerBlur}\n              autoFocus\n              onKeyDown={onKeyDown}\n              onFocus={onFocus}\n              invalid={validationError !== null}\n              onChange={onInputChange}\n              className={styles.layerNameInput}\n              data-testid=\"layer-name-input\"\n            />\n            {validationError && <FieldValidationMessage horizontal>{validationError}</FieldValidationMessage>}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      label: Wrapper;\n      display: flex;\n      align-items: center;\n      margin-left: ${theme.spacing.xs};\n    `,\n    layerNameWrapper: css`\n      display: flex;\n      cursor: pointer;\n      border: 1px solid transparent;\n      border-radius: ${theme.border.radius.md};\n      align-items: center;\n      padding: 0 0 0 ${theme.spacing.xs};\n      margin: 0;\n      background: transparent;\n\n      &:hover {\n        background: ${theme.colors.bg3};\n        border: 1px dashed ${theme.colors.border3};\n      }\n\n      &:focus {\n        border: 2px solid ${theme.colors.formInputBorderActive};\n      }\n\n      &:hover,\n      &:focus {\n        .query-name-edit-icon {\n          visibility: visible;\n        }\n      }\n    `,\n    layerName: css`\n      font-weight: ${theme.typography.weight.semibold};\n      color: ${theme.colors.textBlue};\n      cursor: pointer;\n      overflow: hidden;\n      margin-left: ${theme.spacing.xs};\n    `,\n    layerEditIcon: cx(\n      css`\n        margin-left: ${theme.spacing.md};\n        visibility: hidden;\n      `,\n      'query-name-edit-icon'\n    ),\n    layerNameInput: css`\n      max-width: 300px;\n      margin: -4px 0;\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}