{"ast":null,"code":"import { omitBy, isUndefined } from 'lodash';\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\nexport const MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\nexport const defaultTimeInterval = {\n  times: [{\n    start_time: '',\n    end_time: ''\n  }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: ''\n};\nexport const validateArrayField = (value, validateValue, invalidText) => {\n  if (value) {\n    return value.split(',').map(x => x.trim()).every(entry => entry.split(':').every(validateValue)) || invalidText;\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = str => {\n  return str ? str.split(',').map(s => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = fields => {\n  const timeIntervals = fields.time_intervals.map(({\n    times,\n    weekdays,\n    days_of_month,\n    months,\n    years\n  }) => {\n    var _convertStringToArray;\n\n    const interval = {\n      times: times.filter(({\n        start_time,\n        end_time\n      }) => !!start_time && !!end_time),\n      weekdays: (_convertStringToArray = convertStringToArray(weekdays)) === null || _convertStringToArray === void 0 ? void 0 : _convertStringToArray.map(v => v.toLowerCase()),\n      days_of_month: convertStringToArray(days_of_month),\n      months: convertStringToArray(months),\n      years: convertStringToArray(years)\n    };\n    return omitBy(interval, isUndefined);\n  });\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals\n  };\n};","map":{"version":3,"names":["omitBy","isUndefined","DAYS_OF_THE_WEEK","MONTHS","defaultTimeInterval","times","start_time","end_time","weekdays","days_of_month","months","years","validateArrayField","value","validateValue","invalidText","split","map","x","trim","every","entry","convertStringToArray","str","s","undefined","createMuteTiming","fields","timeIntervals","time_intervals","interval","filter","v","toLowerCase","name"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/utils/mute-timings.ts"],"sourcesContent":["import { omitBy, isUndefined } from 'lodash';\n\nimport { MuteTimeInterval, TimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MuteTimingFields, MuteTimingIntervalFields } from '../types/mute-timing-form';\n\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n];\n\nexport const defaultTimeInterval: MuteTimingIntervalFields = {\n  times: [{ start_time: '', end_time: '' }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: '',\n};\n\nexport const validateArrayField = (value: string, validateValue: (input: string) => boolean, invalidText: string) => {\n  if (value) {\n    return (\n      value\n        .split(',')\n        .map((x) => x.trim())\n        .every((entry) => entry.split(':').every(validateValue)) || invalidText\n    );\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = (str: string) => {\n  return str ? str.split(',').map((s) => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = (fields: MuteTimingFields): MuteTimeInterval => {\n  const timeIntervals: TimeInterval[] = fields.time_intervals.map(\n    ({ times, weekdays, days_of_month, months, years }) => {\n      const interval = {\n        times: times.filter(({ start_time, end_time }) => !!start_time && !!end_time),\n        weekdays: convertStringToArray(weekdays)?.map((v) => v.toLowerCase()),\n        days_of_month: convertStringToArray(days_of_month),\n        months: convertStringToArray(months),\n        years: convertStringToArray(years),\n      };\n\n      return omitBy(interval, isUndefined);\n    }\n  );\n\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals,\n  };\n};\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,WAAjB,QAAoC,QAApC;AAMA,OAAO,MAAMC,gBAAgB,GAAG,CAAC,QAAD,EAAW,SAAX,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,QAA/C,EAAyD,UAAzD,EAAqE,QAArE,CAAzB;AAEP,OAAO,MAAMC,MAAM,GAAG,CACpB,SADoB,EAEpB,UAFoB,EAGpB,OAHoB,EAIpB,OAJoB,EAKpB,KALoB,EAMpB,MANoB,EAOpB,MAPoB,EAQpB,QARoB,EASpB,WAToB,EAUpB,SAVoB,EAWpB,UAXoB,EAYpB,UAZoB,CAAf;AAeP,OAAO,MAAMC,mBAA6C,GAAG;EAC3DC,KAAK,EAAE,CAAC;IAAEC,UAAU,EAAE,EAAd;IAAkBC,QAAQ,EAAE;EAA5B,CAAD,CADoD;EAE3DC,QAAQ,EAAE,EAFiD;EAG3DC,aAAa,EAAE,EAH4C;EAI3DC,MAAM,EAAE,EAJmD;EAK3DC,KAAK,EAAE;AALoD,CAAtD;AAQP,OAAO,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAgBC,aAAhB,EAA2DC,WAA3D,KAAmF;EACnH,IAAIF,KAAJ,EAAW;IACT,OACEA,KAAK,CACFG,KADH,CACS,GADT,EAEGC,GAFH,CAEQC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAFd,EAGGC,KAHH,CAGUC,KAAD,IAAWA,KAAK,CAACL,KAAN,CAAY,GAAZ,EAAiBI,KAAjB,CAAuBN,aAAvB,CAHpB,KAG8DC,WAJhE;EAMD,CAPD,MAOO;IACL,OAAO,IAAP;EACD;AACF,CAXM;;AAaP,MAAMO,oBAAoB,GAAIC,GAAD,IAAiB;EAC5C,OAAOA,GAAG,GAAGA,GAAG,CAACP,KAAJ,CAAU,GAAV,EAAeC,GAAf,CAAoBO,CAAD,IAAOA,CAAC,CAACL,IAAF,EAA1B,CAAH,GAAyCM,SAAnD;AACD,CAFD;;AAIA,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAgD;EAC9E,MAAMC,aAA6B,GAAGD,MAAM,CAACE,cAAP,CAAsBZ,GAAtB,CACpC,CAAC;IAAEZ,KAAF;IAASG,QAAT;IAAmBC,aAAnB;IAAkCC,MAAlC;IAA0CC;EAA1C,CAAD,KAAuD;IAAA;;IACrD,MAAMmB,QAAQ,GAAG;MACfzB,KAAK,EAAEA,KAAK,CAAC0B,MAAN,CAAa,CAAC;QAAEzB,UAAF;QAAcC;MAAd,CAAD,KAA8B,CAAC,CAACD,UAAF,IAAgB,CAAC,CAACC,QAA7D,CADQ;MAEfC,QAAQ,2BAAEc,oBAAoB,CAACd,QAAD,CAAtB,0DAAE,sBAAgCS,GAAhC,CAAqCe,CAAD,IAAOA,CAAC,CAACC,WAAF,EAA3C,CAFK;MAGfxB,aAAa,EAAEa,oBAAoB,CAACb,aAAD,CAHpB;MAIfC,MAAM,EAAEY,oBAAoB,CAACZ,MAAD,CAJb;MAKfC,KAAK,EAAEW,oBAAoB,CAACX,KAAD;IALZ,CAAjB;IAQA,OAAOX,MAAM,CAAC8B,QAAD,EAAW7B,WAAX,CAAb;EACD,CAXmC,CAAtC;EAcA,OAAO;IACLiC,IAAI,EAAEP,MAAM,CAACO,IADR;IAELL,cAAc,EAAED;EAFX,CAAP;AAID,CAnBM"},"metadata":{},"sourceType":"module"}