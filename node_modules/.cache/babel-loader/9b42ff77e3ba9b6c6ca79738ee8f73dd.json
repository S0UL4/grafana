{"ast":null,"code":"import { createSelector } from '@reduxjs/toolkit';\nimport React, { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CoreApp } from '@grafana/data';\nimport { getNextRefIdChar } from 'app/core/utils/query';\nimport { getDatasourceSrv } from '../plugins/datasource_srv';\nimport { QueryEditorRows } from '../query/components/QueryEditorRows';\nimport { runQueries, changeQueriesAction } from './state/query';\nimport { getExploreItemSelector } from './state/selectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst makeSelectors = exploreId => {\n  const exploreItemSelector = getExploreItemSelector(exploreId);\n  return {\n    getQueries: createSelector(exploreItemSelector, s => s.queries),\n    getQueryResponse: createSelector(exploreItemSelector, s => s.queryResponse),\n    getHistory: createSelector(exploreItemSelector, s => s.history),\n    getEventBridge: createSelector(exploreItemSelector, s => s.eventBridge),\n    getDatasourceInstanceSettings: createSelector(exploreItemSelector, s => {\n      var _datasourceInstance;\n\n      return getDatasourceSrv().getInstanceSettings((_datasourceInstance = s.datasourceInstance) === null || _datasourceInstance === void 0 ? void 0 : _datasourceInstance.uid);\n    })\n  };\n};\n\nexport const QueryRows = ({\n  exploreId\n}) => {\n  const dispatch = useDispatch();\n  const {\n    getQueries,\n    getDatasourceInstanceSettings,\n    getQueryResponse,\n    getHistory,\n    getEventBridge\n  } = useMemo(() => makeSelectors(exploreId), [exploreId]);\n  const queries = useSelector(getQueries);\n  const dsSettings = useSelector(getDatasourceInstanceSettings);\n  const queryResponse = useSelector(getQueryResponse);\n  const history = useSelector(getHistory);\n  const eventBridge = useSelector(getEventBridge);\n  const onRunQueries = useCallback(() => {\n    dispatch(runQueries(exploreId));\n  }, [dispatch, exploreId]);\n  const onChange = useCallback(newQueries => {\n    dispatch(changeQueriesAction({\n      queries: newQueries,\n      exploreId\n    })); // if we are removing a query we want to run the remaining ones\n\n    if (newQueries.length < queries.length) {\n      onRunQueries();\n    }\n  }, [dispatch, exploreId, onRunQueries, queries]);\n  const onAddQuery = useCallback(query => {\n    onChange([...queries, Object.assign({}, query, {\n      refId: getNextRefIdChar(queries)\n    })]);\n  }, [onChange, queries]);\n  return /*#__PURE__*/_jsx(QueryEditorRows, {\n    dsSettings: dsSettings,\n    queries: queries,\n    onQueriesChange: onChange,\n    onAddQuery: onAddQuery,\n    onRunQueries: onRunQueries,\n    data: queryResponse,\n    app: CoreApp.Explore,\n    history: history,\n    eventBus: eventBridge\n  });\n};","map":{"version":3,"names":["createSelector","React","useCallback","useMemo","useDispatch","useSelector","CoreApp","getNextRefIdChar","getDatasourceSrv","QueryEditorRows","runQueries","changeQueriesAction","getExploreItemSelector","makeSelectors","exploreId","exploreItemSelector","getQueries","s","queries","getQueryResponse","queryResponse","getHistory","history","getEventBridge","eventBridge","getDatasourceInstanceSettings","getInstanceSettings","datasourceInstance","uid","QueryRows","dispatch","dsSettings","onRunQueries","onChange","newQueries","length","onAddQuery","query","refId","Explore"],"sources":["/home/soula/grafana/public/app/features/explore/QueryRows.tsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\nimport React, { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CoreApp, DataQuery } from '@grafana/data';\nimport { getNextRefIdChar } from 'app/core/utils/query';\nimport { ExploreId } from 'app/types/explore';\n\nimport { getDatasourceSrv } from '../plugins/datasource_srv';\nimport { QueryEditorRows } from '../query/components/QueryEditorRows';\n\nimport { runQueries, changeQueriesAction } from './state/query';\nimport { getExploreItemSelector } from './state/selectors';\n\ninterface Props {\n  exploreId: ExploreId;\n}\n\nconst makeSelectors = (exploreId: ExploreId) => {\n  const exploreItemSelector = getExploreItemSelector(exploreId);\n  return {\n    getQueries: createSelector(exploreItemSelector, (s) => s!.queries),\n    getQueryResponse: createSelector(exploreItemSelector, (s) => s!.queryResponse),\n    getHistory: createSelector(exploreItemSelector, (s) => s!.history),\n    getEventBridge: createSelector(exploreItemSelector, (s) => s!.eventBridge),\n    getDatasourceInstanceSettings: createSelector(\n      exploreItemSelector,\n      (s) => getDatasourceSrv().getInstanceSettings(s!.datasourceInstance?.uid)!\n    ),\n  };\n};\n\nexport const QueryRows = ({ exploreId }: Props) => {\n  const dispatch = useDispatch();\n  const { getQueries, getDatasourceInstanceSettings, getQueryResponse, getHistory, getEventBridge } = useMemo(\n    () => makeSelectors(exploreId),\n    [exploreId]\n  );\n\n  const queries = useSelector(getQueries)!;\n  const dsSettings = useSelector(getDatasourceInstanceSettings)!;\n  const queryResponse = useSelector(getQueryResponse)!;\n  const history = useSelector(getHistory);\n  const eventBridge = useSelector(getEventBridge);\n\n  const onRunQueries = useCallback(() => {\n    dispatch(runQueries(exploreId));\n  }, [dispatch, exploreId]);\n\n  const onChange = useCallback(\n    (newQueries: DataQuery[]) => {\n      dispatch(changeQueriesAction({ queries: newQueries, exploreId }));\n\n      // if we are removing a query we want to run the remaining ones\n      if (newQueries.length < queries.length) {\n        onRunQueries();\n      }\n    },\n    [dispatch, exploreId, onRunQueries, queries]\n  );\n\n  const onAddQuery = useCallback(\n    (query: DataQuery) => {\n      onChange([...queries, { ...query, refId: getNextRefIdChar(queries) }]);\n    },\n    [onChange, queries]\n  );\n\n  return (\n    <QueryEditorRows\n      dsSettings={dsSettings}\n      queries={queries}\n      onQueriesChange={onChange}\n      onAddQuery={onAddQuery}\n      onRunQueries={onRunQueries}\n      data={queryResponse}\n      app={CoreApp.Explore}\n      history={history}\n      eventBus={eventBridge}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}