{"ast":null,"code":"uiSegmentSrv.$inject = [\"$sce\", \"templateSrv\"];\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { each, isString, map } from 'lodash';\nimport coreModule from '../core_module';\n/** @ngInject */\n\nexport function uiSegmentSrv($sce, templateSrv) {\n  const self = this;\n\n  class MetricSegment {\n    constructor(options) {\n      _defineProperty(this, \"value\", void 0);\n\n      _defineProperty(this, \"html\", void 0);\n\n      _defineProperty(this, \"type\", void 0);\n\n      _defineProperty(this, \"expandable\", void 0);\n\n      _defineProperty(this, \"text\", void 0);\n\n      _defineProperty(this, \"cssClass\", void 0);\n\n      _defineProperty(this, \"fake\", void 0);\n\n      _defineProperty(this, \"custom\", void 0);\n\n      _defineProperty(this, \"selectMode\", void 0);\n\n      if (options === '*' || options.value === '*') {\n        this.value = '*';\n        this.html = $sce.trustAsHtml('<i class=\"fa fa-asterisk\"><i>');\n        this.type = options.type;\n        this.expandable = true;\n        return;\n      }\n\n      if (isString(options)) {\n        this.value = options;\n        this.html = $sce.trustAsHtml(templateSrv.highlightVariablesAsHtml(this.value));\n        return;\n      } // temp hack to work around legacy inconsistency in segment model\n\n\n      this.text = options.value;\n      this.cssClass = options.cssClass;\n      this.custom = options.custom;\n      this.type = options.type;\n      this.fake = options.fake;\n      this.value = options.value;\n      this.selectMode = options.selectMode;\n      this.expandable = options.expandable;\n      this.html = options.html || $sce.trustAsHtml(templateSrv.highlightVariablesAsHtml(this.value));\n    }\n\n  }\n\n  this.getSegmentForValue = function (value, fallbackText) {\n    if (value) {\n      return this.newSegment(value);\n    } else {\n      return this.newSegment({\n        value: fallbackText,\n        fake: true\n      });\n    }\n  };\n\n  this.newSelectMeasurement = () => {\n    return new MetricSegment({\n      value: 'select measurement',\n      fake: true\n    });\n  };\n\n  this.newFake = (text, type, cssClass) => {\n    return new MetricSegment({\n      value: text,\n      fake: true,\n      type: type,\n      cssClass: cssClass\n    });\n  };\n\n  this.newSegment = options => {\n    return new MetricSegment(options);\n  };\n\n  this.newKey = key => {\n    return new MetricSegment({\n      value: key,\n      type: 'key',\n      cssClass: 'query-segment-key'\n    });\n  };\n\n  this.newKeyValue = value => {\n    return new MetricSegment({\n      value: value,\n      type: 'value',\n      cssClass: 'query-segment-value'\n    });\n  };\n\n  this.newCondition = condition => {\n    return new MetricSegment({\n      value: condition,\n      type: 'condition',\n      cssClass: 'query-keyword'\n    });\n  };\n\n  this.newOperator = op => {\n    return new MetricSegment({\n      value: op,\n      type: 'operator',\n      cssClass: 'query-segment-operator'\n    });\n  };\n\n  this.newOperators = ops => {\n    return map(ops, op => {\n      return new MetricSegment({\n        value: op,\n        type: 'operator',\n        cssClass: 'query-segment-operator'\n      });\n    });\n  };\n\n  this.transformToSegments = (addTemplateVars, variableTypeFilter) => {\n    return results => {\n      const segments = map(results, segment => {\n        return self.newSegment({\n          value: segment.text,\n          expandable: segment.expandable\n        });\n      });\n\n      if (addTemplateVars) {\n        each(templateSrv.getVariables(), variable => {\n          if (variableTypeFilter === void 0 || variableTypeFilter === variable.type) {\n            segments.unshift(self.newSegment({\n              type: 'value',\n              value: '$' + variable.name,\n              expandable: true\n            }));\n          }\n        });\n      }\n\n      return segments;\n    };\n  };\n\n  this.newSelectMetric = () => {\n    return new MetricSegment({\n      value: 'select metric',\n      fake: true\n    });\n  };\n\n  this.newPlusButton = () => {\n    return new MetricSegment({\n      fake: true,\n      html: '<i class=\"fa fa-plus \"></i>',\n      type: 'plus-button',\n      cssClass: 'query-part'\n    });\n  };\n}\ncoreModule.service('uiSegmentSrv', uiSegmentSrv);","map":{"version":3,"names":["each","isString","map","coreModule","uiSegmentSrv","$sce","templateSrv","self","MetricSegment","constructor","options","value","html","trustAsHtml","type","expandable","highlightVariablesAsHtml","text","cssClass","custom","fake","selectMode","getSegmentForValue","fallbackText","newSegment","newSelectMeasurement","newFake","newKey","key","newKeyValue","newCondition","condition","newOperator","op","newOperators","ops","transformToSegments","addTemplateVars","variableTypeFilter","results","segments","segment","getVariables","variable","unshift","name","newSelectMetric","newPlusButton","service"],"sources":["/home/soula/grafana/public/app/angular/services/segment_srv.ts"],"sourcesContent":["import { each, isString, map } from 'lodash';\n\nimport coreModule from '../core_module';\n\n/** @ngInject */\nexport function uiSegmentSrv(this: any, $sce: any, templateSrv: any) {\n  const self = this;\n\n  class MetricSegment {\n    value: string;\n    html: any;\n    type: any;\n    expandable?: boolean;\n    text?: string;\n    cssClass?: string;\n    fake?: boolean;\n    custom?: boolean;\n    selectMode?: any;\n\n    constructor(options: any) {\n      if (options === '*' || options.value === '*') {\n        this.value = '*';\n        this.html = $sce.trustAsHtml('<i class=\"fa fa-asterisk\"><i>');\n        this.type = options.type;\n        this.expandable = true;\n        return;\n      }\n\n      if (isString(options)) {\n        this.value = options;\n        this.html = $sce.trustAsHtml(templateSrv.highlightVariablesAsHtml(this.value));\n        return;\n      }\n\n      // temp hack to work around legacy inconsistency in segment model\n      this.text = options.value;\n\n      this.cssClass = options.cssClass;\n      this.custom = options.custom;\n      this.type = options.type;\n      this.fake = options.fake;\n      this.value = options.value;\n      this.selectMode = options.selectMode;\n      this.expandable = options.expandable;\n      this.html = options.html || $sce.trustAsHtml(templateSrv.highlightVariablesAsHtml(this.value));\n    }\n  }\n\n  this.getSegmentForValue = function (value: string, fallbackText: string) {\n    if (value) {\n      return this.newSegment(value);\n    } else {\n      return this.newSegment({ value: fallbackText, fake: true });\n    }\n  };\n\n  this.newSelectMeasurement = () => {\n    return new MetricSegment({ value: 'select measurement', fake: true });\n  };\n\n  this.newFake = (text: string, type: string, cssClass: string) => {\n    return new MetricSegment({ value: text, fake: true, type: type, cssClass: cssClass });\n  };\n\n  this.newSegment = (options: any) => {\n    return new MetricSegment(options);\n  };\n\n  this.newKey = (key: string) => {\n    return new MetricSegment({ value: key, type: 'key', cssClass: 'query-segment-key' });\n  };\n\n  this.newKeyValue = (value: string) => {\n    return new MetricSegment({ value: value, type: 'value', cssClass: 'query-segment-value' });\n  };\n\n  this.newCondition = (condition: string) => {\n    return new MetricSegment({ value: condition, type: 'condition', cssClass: 'query-keyword' });\n  };\n\n  this.newOperator = (op: string) => {\n    return new MetricSegment({ value: op, type: 'operator', cssClass: 'query-segment-operator' });\n  };\n\n  this.newOperators = (ops: string[]) => {\n    return map(ops, (op) => {\n      return new MetricSegment({ value: op, type: 'operator', cssClass: 'query-segment-operator' });\n    });\n  };\n\n  this.transformToSegments = (addTemplateVars: boolean, variableTypeFilter: string) => {\n    return (results: any[]) => {\n      const segments = map(results, (segment) => {\n        return self.newSegment({ value: segment.text, expandable: segment.expandable });\n      });\n\n      if (addTemplateVars) {\n        each(templateSrv.getVariables(), (variable) => {\n          if (variableTypeFilter === void 0 || variableTypeFilter === variable.type) {\n            segments.unshift(self.newSegment({ type: 'value', value: '$' + variable.name, expandable: true }));\n          }\n        });\n      }\n\n      return segments;\n    };\n  };\n\n  this.newSelectMetric = () => {\n    return new MetricSegment({ value: 'select metric', fake: true });\n  };\n\n  this.newPlusButton = () => {\n    return new MetricSegment({\n      fake: true,\n      html: '<i class=\"fa fa-plus \"></i>',\n      type: 'plus-button',\n      cssClass: 'query-part',\n    });\n  };\n}\n\ncoreModule.service('uiSegmentSrv', uiSegmentSrv);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}