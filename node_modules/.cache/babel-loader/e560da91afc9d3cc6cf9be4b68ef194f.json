{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { isString } from 'lodash';\nimport { PanelEvents, EventBusSrv } from '@grafana/data';\nimport { AngularLocationWrapper } from 'app/angular/AngularLocationWrapper';\nimport config from 'app/core/config';\nimport { profiler } from 'app/core/core';\nexport class PanelCtrl {\n  constructor($scope, $injector) {\n    var _this$panel, _this$dashboard;\n\n    _defineProperty(this, \"panel\", void 0);\n\n    _defineProperty(this, \"error\", void 0);\n\n    _defineProperty(this, \"pluginName\", '');\n\n    _defineProperty(this, \"pluginId\", '');\n\n    _defineProperty(this, \"editorTabs\", void 0);\n\n    _defineProperty(this, \"$scope\", void 0);\n\n    _defineProperty(this, \"$injector\", void 0);\n\n    _defineProperty(this, \"$timeout\", void 0);\n\n    _defineProperty(this, \"editModeInitiated\", false);\n\n    _defineProperty(this, \"containerHeight\", void 0);\n\n    _defineProperty(this, \"events\", void 0);\n\n    _defineProperty(this, \"loading\", false);\n\n    _defineProperty(this, \"timing\", void 0);\n\n    _defineProperty(this, \"$location\", void 0);\n\n    _defineProperty(this, \"onPluginTypeChange\", plugin => {});\n\n    this.panel = (_this$panel = this.panel) !== null && _this$panel !== void 0 ? _this$panel : $scope.$parent.panel;\n    this.dashboard = (_this$dashboard = this.dashboard) !== null && _this$dashboard !== void 0 ? _this$dashboard : $scope.$parent.dashboard;\n    this.$injector = $injector;\n    this.$scope = $scope;\n    this.$timeout = $injector.get('$timeout');\n    this.editorTabs = [];\n    this.$location = new AngularLocationWrapper();\n    this.events = new EventBusSrv();\n    this.timing = {}; // not used but here to not break plugins\n\n    const plugin = config.panels[this.panel.type];\n\n    if (plugin) {\n      this.pluginId = plugin.id;\n      this.pluginName = plugin.name;\n    }\n\n    $scope.$on(PanelEvents.componentDidMount.name, () => this.panelDidMount());\n  }\n\n  panelDidMount() {\n    this.events.emit(PanelEvents.componentDidMount);\n    this.events.emit(PanelEvents.initialized);\n    this.dashboard.panelInitialized(this.panel);\n  }\n\n  renderingCompleted() {\n    profiler.renderingCompleted();\n  }\n\n  refresh() {\n    this.panel.refresh();\n  }\n\n  publishAppEvent(event, payload) {\n    this.$scope.$root.appEvent(event, payload);\n  }\n\n  initEditMode() {\n    if (!this.editModeInitiated) {\n      this.editModeInitiated = true;\n      this.events.emit(PanelEvents.editModeInitialized);\n    }\n  }\n\n  addEditorTab(title, directiveFn, index, icon) {\n    const editorTab = {\n      title,\n      directiveFn,\n      icon\n    };\n\n    if (isString(directiveFn)) {\n      editorTab.directiveFn = () => {\n        return {\n          templateUrl: directiveFn\n        };\n      };\n    }\n\n    if (index) {\n      this.editorTabs.splice(index, 0, editorTab);\n    } else {\n      this.editorTabs.push(editorTab);\n    }\n  }\n\n  getExtendedMenu() {\n    const menu = [];\n    this.events.emit(PanelEvents.initPanelActions, menu);\n    return menu;\n  } // Override in sub-class to add items before extended menu\n\n\n  async getAdditionalMenuItems() {\n    return [];\n  }\n\n  otherPanelInFullscreenMode() {\n    return this.dashboard.otherPanelInFullscreen(this.panel);\n  }\n\n  render(payload) {\n    this.events.emit(PanelEvents.render, payload);\n  } // overriden from react\n\n\n}","map":{"version":3,"names":["isString","PanelEvents","EventBusSrv","AngularLocationWrapper","config","profiler","PanelCtrl","constructor","$scope","$injector","plugin","panel","$parent","dashboard","$timeout","get","editorTabs","$location","events","timing","panels","type","pluginId","id","pluginName","name","$on","componentDidMount","panelDidMount","emit","initialized","panelInitialized","renderingCompleted","refresh","publishAppEvent","event","payload","$root","appEvent","initEditMode","editModeInitiated","editModeInitialized","addEditorTab","title","directiveFn","index","icon","editorTab","templateUrl","splice","push","getExtendedMenu","menu","initPanelActions","getAdditionalMenuItems","otherPanelInFullscreenMode","otherPanelInFullscreen","render"],"sources":["/home/soula/grafana/public/app/angular/panel/panel_ctrl.ts"],"sourcesContent":["import { auto } from 'angular';\nimport { isString } from 'lodash';\n\nimport {\n  AppEvent,\n  PanelEvents,\n  PanelPluginMeta,\n  AngularPanelMenuItem,\n  EventBusExtended,\n  EventBusSrv,\n} from '@grafana/data';\nimport { AngularLocationWrapper } from 'app/angular/AngularLocationWrapper';\nimport config from 'app/core/config';\nimport { profiler } from 'app/core/core';\n\nimport { DashboardModel } from '../../features/dashboard/state';\n\nexport class PanelCtrl {\n  panel: any;\n  error: any;\n  declare dashboard: DashboardModel;\n  pluginName = '';\n  pluginId = '';\n  editorTabs: any;\n  $scope: any;\n  $injector: auto.IInjectorService;\n  $timeout: any;\n  editModeInitiated = false;\n  declare height: number;\n  declare width: number;\n  containerHeight: any;\n  events: EventBusExtended;\n  loading = false;\n  timing: any;\n  $location: AngularLocationWrapper;\n\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    this.panel = this.panel ?? $scope.$parent.panel;\n    this.dashboard = this.dashboard ?? $scope.$parent.dashboard;\n    this.$injector = $injector;\n    this.$scope = $scope;\n    this.$timeout = $injector.get('$timeout');\n    this.editorTabs = [];\n    this.$location = new AngularLocationWrapper();\n    this.events = new EventBusSrv();\n    this.timing = {}; // not used but here to not break plugins\n\n    const plugin = config.panels[this.panel.type];\n    if (plugin) {\n      this.pluginId = plugin.id;\n      this.pluginName = plugin.name;\n    }\n\n    $scope.$on(PanelEvents.componentDidMount.name, () => this.panelDidMount());\n  }\n\n  panelDidMount() {\n    this.events.emit(PanelEvents.componentDidMount);\n    this.events.emit(PanelEvents.initialized);\n    this.dashboard.panelInitialized(this.panel);\n  }\n\n  renderingCompleted() {\n    profiler.renderingCompleted();\n  }\n\n  refresh() {\n    this.panel.refresh();\n  }\n\n  publishAppEvent<T>(event: AppEvent<T>, payload?: T) {\n    this.$scope.$root.appEvent(event, payload);\n  }\n\n  initEditMode() {\n    if (!this.editModeInitiated) {\n      this.editModeInitiated = true;\n      this.events.emit(PanelEvents.editModeInitialized);\n    }\n  }\n\n  addEditorTab(title: string, directiveFn: any, index?: number, icon?: any) {\n    const editorTab = { title, directiveFn, icon };\n\n    if (isString(directiveFn)) {\n      editorTab.directiveFn = () => {\n        return { templateUrl: directiveFn };\n      };\n    }\n\n    if (index) {\n      this.editorTabs.splice(index, 0, editorTab);\n    } else {\n      this.editorTabs.push(editorTab);\n    }\n  }\n\n  getExtendedMenu() {\n    const menu: AngularPanelMenuItem[] = [];\n    this.events.emit(PanelEvents.initPanelActions, menu);\n    return menu;\n  }\n\n  // Override in sub-class to add items before extended menu\n  async getAdditionalMenuItems(): Promise<any[]> {\n    return [];\n  }\n\n  otherPanelInFullscreenMode() {\n    return this.dashboard.otherPanelInFullscreen(this.panel);\n  }\n\n  render(payload?: any) {\n    this.events.emit(PanelEvents.render, payload);\n  }\n\n  // overriden from react\n  onPluginTypeChange = (plugin: PanelPluginMeta) => {};\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}