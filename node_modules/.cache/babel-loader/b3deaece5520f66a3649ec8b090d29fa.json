{"ast":null,"code":"var _InlineFormLabel, _InlineFormLabel2;\n\nimport { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\nimport { InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\nimport { PromExemplarField } from './PromExemplarField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const PromExploreExtraField = /*#__PURE__*/memo(({\n  query,\n  datasource,\n  onChange,\n  onRunQuery\n}) => {\n  var _query$interval;\n\n  const rangeOptions = getQueryTypeOptions(true);\n  const prevQuery = usePrevious(query);\n  const onExemplarChange = useCallback(exemplar => {\n    if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n      onChange(Object.assign({}, query, {\n        exemplar\n      }));\n    }\n  }, [prevQuery, query, onChange]);\n\n  function onChangeQueryStep(interval) {\n    onChange(Object.assign({}, query, {\n      interval\n    }));\n  }\n\n  function onStepChange(e) {\n    if (e.currentTarget.value !== query.interval) {\n      onChangeQueryStep(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n    }\n  }\n\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    \"aria-label\": \"Prometheus extra field\",\n    className: \"gf-form-inline\",\n    \"data-testid\": testIds.extraFieldEditor,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      \"data-testid\": testIds.queryTypeField,\n      className: cx('gf-form explore-input-margin', css`\n              flex-wrap: nowrap;\n            `),\n      \"aria-label\": \"Query type field\",\n      children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/_jsx(InlineFormLabel, {\n        width: \"auto\",\n        children: \"Query type\"\n      })), /*#__PURE__*/_jsx(RadioButtonGroup, {\n        options: rangeOptions,\n        value: query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range',\n        onChange: onQueryTypeChange\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      \"data-testid\": testIds.stepField,\n      className: cx('gf-form', css`\n              flex-wrap: nowrap;\n            `),\n      \"aria-label\": \"Step field\",\n      children: [_InlineFormLabel2 || (_InlineFormLabel2 = /*#__PURE__*/_jsx(InlineFormLabel, {\n        width: 6,\n        tooltip: 'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)',\n        children: \"Min step\"\n      })), /*#__PURE__*/_jsx(\"input\", {\n        type: 'text',\n        className: \"gf-form-input width-4\",\n        placeholder: 'auto',\n        onChange: onStepChange,\n        onKeyDown: onReturnKeyDown,\n        value: (_query$interval = query.interval) !== null && _query$interval !== void 0 ? _query$interval : ''\n      })]\n    }), /*#__PURE__*/_jsx(PromExemplarField, {\n      onChange: onExemplarChange,\n      datasource: datasource,\n      query: query\n    })]\n  });\n});\nPromExploreExtraField.displayName = 'PromExploreExtraField';\nexport function getQueryTypeOptions(includeBoth) {\n  const rangeOptions = [{\n    value: 'range',\n    label: 'Range',\n    description: 'Run query over a range of time'\n  }, {\n    value: 'instant',\n    label: 'Instant',\n    description: 'Run query against a single point in time. For this query, the \"To\" time is used'\n  }];\n\n  if (includeBoth) {\n    rangeOptions.push({\n      value: 'both',\n      label: 'Both',\n      description: 'Run an Instant query and a Range query'\n    });\n  }\n\n  return rangeOptions;\n}\nexport function getQueryTypeChangeHandler(query, onChange) {\n  return queryType => {\n    if (queryType === 'instant') {\n      onChange(Object.assign({}, query, {\n        instant: true,\n        range: false,\n        exemplar: false\n      }));\n    } else if (queryType === 'range') {\n      onChange(Object.assign({}, query, {\n        instant: false,\n        range: true\n      }));\n    } else {\n      onChange(Object.assign({}, query, {\n        instant: true,\n        range: true\n      }));\n    }\n  };\n}\nexport const testIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type'\n};","map":{"version":3,"names":["css","cx","isEqual","React","memo","useCallback","usePrevious","InlineFormLabel","RadioButtonGroup","PromExemplarField","PromExploreExtraField","query","datasource","onChange","onRunQuery","rangeOptions","getQueryTypeOptions","prevQuery","onExemplarChange","exemplar","onChangeQueryStep","interval","onStepChange","e","currentTarget","value","onReturnKeyDown","key","shiftKey","onQueryTypeChange","getQueryTypeChangeHandler","testIds","extraFieldEditor","queryTypeField","range","instant","stepField","displayName","includeBoth","label","description","push","queryType"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/components/PromExploreExtraField.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\n\nexport interface PromExploreExtraFieldProps {\n  query: PromQuery;\n  onChange: (value: PromQuery) => void;\n  onRunQuery: () => void;\n  datasource: PrometheusDatasource;\n}\n\nexport const PromExploreExtraField: React.FC<PromExploreExtraFieldProps> = memo(\n  ({ query, datasource, onChange, onRunQuery }) => {\n    const rangeOptions = getQueryTypeOptions(true);\n    const prevQuery = usePrevious(query);\n\n    const onExemplarChange = useCallback(\n      (exemplar: boolean) => {\n        if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n          onChange({ ...query, exemplar });\n        }\n      },\n      [prevQuery, query, onChange]\n    );\n\n    function onChangeQueryStep(interval: string) {\n      onChange({ ...query, interval });\n    }\n\n    function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n      if (e.currentTarget.value !== query.interval) {\n        onChangeQueryStep(e.currentTarget.value);\n      }\n    }\n\n    function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n      if (e.key === 'Enter' && e.shiftKey) {\n        onRunQuery();\n      }\n    }\n\n    const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n    return (\n      <div aria-label=\"Prometheus extra field\" className=\"gf-form-inline\" data-testid={testIds.extraFieldEditor}>\n        {/*Query type field*/}\n        <div\n          data-testid={testIds.queryTypeField}\n          className={cx(\n            'gf-form explore-input-margin',\n            css`\n              flex-wrap: nowrap;\n            `\n          )}\n          aria-label=\"Query type field\"\n        >\n          <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n          <RadioButtonGroup\n            options={rangeOptions}\n            value={query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range'}\n            onChange={onQueryTypeChange}\n          />\n        </div>\n        {/*Step field*/}\n        <div\n          data-testid={testIds.stepField}\n          className={cx(\n            'gf-form',\n            css`\n              flex-wrap: nowrap;\n            `\n          )}\n          aria-label=\"Step field\"\n        >\n          <InlineFormLabel\n            width={6}\n            tooltip={\n              'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)'\n            }\n          >\n            Min step\n          </InlineFormLabel>\n          <input\n            type={'text'}\n            className=\"gf-form-input width-4\"\n            placeholder={'auto'}\n            onChange={onStepChange}\n            onKeyDown={onReturnKeyDown}\n            value={query.interval ?? ''}\n          />\n        </div>\n\n        <PromExemplarField onChange={onExemplarChange} datasource={datasource} query={query} />\n      </div>\n    );\n  }\n);\n\nPromExploreExtraField.displayName = 'PromExploreExtraField';\n\nexport function getQueryTypeOptions(includeBoth: boolean) {\n  const rangeOptions = [\n    { value: 'range', label: 'Range', description: 'Run query over a range of time' },\n    {\n      value: 'instant',\n      label: 'Instant',\n      description: 'Run query against a single point in time. For this query, the \"To\" time is used',\n    },\n  ];\n\n  if (includeBoth) {\n    rangeOptions.push({ value: 'both', label: 'Both', description: 'Run an Instant query and a Range query' });\n  }\n\n  return rangeOptions;\n}\n\nexport function getQueryTypeChangeHandler(query: PromQuery, onChange: (update: PromQuery) => void) {\n  return (queryType: string) => {\n    if (queryType === 'instant') {\n      onChange({ ...query, instant: true, range: false, exemplar: false });\n    } else if (queryType === 'range') {\n      onChange({ ...query, instant: false, range: true });\n    } else {\n      onChange({ ...query, instant: true, range: true });\n    }\n  };\n}\n\nexport const testIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type',\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}