{"ast":null,"code":"const _excluded = [\"size\", \"type\", \"name\", \"className\", \"style\", \"title\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport SVG from 'react-inlinesvg';\nimport { useTheme } from '../../themes/ThemeContext';\nimport { stylesFactory } from '../../themes/stylesFactory';\nimport { cacheInitialized, initIconCache, iconRoot } from './iconBundle';\nimport { getIconSubDir, getSvgSize } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst getIconStyles = stylesFactory(theme => {\n  return {\n    // line-height: 0; is needed for correct icon alignment in Safari\n    container: css`\n      label: Icon;\n      display: inline-block;\n      line-height: 0;\n    `,\n    icon: css`\n      vertical-align: middle;\n      display: inline-block;\n      fill: currentColor;\n    `,\n    orange: css`\n      fill: ${theme.palette.orange};\n    `\n  };\n});\nexport const Icon = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    size = 'md',\n    type = 'default',\n    name,\n    className,\n    style,\n    title = ''\n  } = _ref,\n      divElementProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const theme = useTheme();\n  /* Temporary solution to display also font awesome icons */\n\n  if (name !== null && name !== void 0 && name.startsWith('fa fa-')) {\n    return /*#__PURE__*/_jsx(\"i\", Object.assign({\n      className: getFontAwesomeIconStyles(name, className)\n    }, divElementProps, {\n      style: style\n    }));\n  }\n\n  if (name === 'panel-add') {\n    size = 'xl';\n  }\n\n  if (!cacheInitialized) {\n    initIconCache();\n  }\n\n  const styles = getIconStyles(theme);\n  const svgSize = getSvgSize(size);\n  const svgHgt = svgSize;\n  const svgWid = name !== null && name !== void 0 && name.startsWith('gf-bar-align') ? 16 : name !== null && name !== void 0 && name.startsWith('gf-interp') ? 30 : svgSize;\n  const subDir = getIconSubDir(name, type);\n  const svgPath = `${iconRoot}${subDir}/${name}.svg`;\n  return /*#__PURE__*/_jsx(\"div\", Object.assign({\n    className: styles.container\n  }, divElementProps, {\n    ref: ref,\n    children: /*#__PURE__*/_jsx(SVG, {\n      src: svgPath,\n      width: svgWid,\n      height: svgHgt,\n      title: title,\n      className: cx(styles.icon, className, type === 'mono' ? {\n        [styles.orange]: name === 'favorite'\n      } : ''),\n      style: style\n    })\n  }));\n});\nIcon.displayName = 'Icon';\n\nfunction getFontAwesomeIconStyles(iconName, className) {\n  return cx(iconName, {\n    'fa-spin': iconName === 'fa fa-spinner'\n  }, className);\n}","map":{"version":3,"names":["css","cx","React","SVG","useTheme","stylesFactory","cacheInitialized","initIconCache","iconRoot","getIconSubDir","getSvgSize","getIconStyles","theme","container","icon","orange","palette","Icon","forwardRef","ref","size","type","name","className","style","title","divElementProps","startsWith","getFontAwesomeIconStyles","styles","svgSize","svgHgt","svgWid","subDir","svgPath","displayName","iconName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Icon/Icon.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport SVG from 'react-inlinesvg';\n\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { useTheme } from '../../themes/ThemeContext';\nimport { stylesFactory } from '../../themes/stylesFactory';\nimport { IconName, IconType, IconSize } from '../../types/icon';\n\nimport { cacheInitialized, initIconCache, iconRoot } from './iconBundle';\nimport { getIconSubDir, getSvgSize } from './utils';\n\nexport interface IconProps extends React.HTMLAttributes<HTMLDivElement> {\n  name: IconName;\n  size?: IconSize;\n  type?: IconType;\n  title?: string;\n}\n\nconst getIconStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    // line-height: 0; is needed for correct icon alignment in Safari\n    container: css`\n      label: Icon;\n      display: inline-block;\n      line-height: 0;\n    `,\n    icon: css`\n      vertical-align: middle;\n      display: inline-block;\n      fill: currentColor;\n    `,\n    orange: css`\n      fill: ${theme.palette.orange};\n    `,\n  };\n});\n\nexport const Icon = React.forwardRef<HTMLDivElement, IconProps>(\n  ({ size = 'md', type = 'default', name, className, style, title = '', ...divElementProps }, ref) => {\n    const theme = useTheme();\n\n    /* Temporary solution to display also font awesome icons */\n    if (name?.startsWith('fa fa-')) {\n      return <i className={getFontAwesomeIconStyles(name, className)} {...divElementProps} style={style} />;\n    }\n\n    if (name === 'panel-add') {\n      size = 'xl';\n    }\n\n    if (!cacheInitialized) {\n      initIconCache();\n    }\n\n    const styles = getIconStyles(theme);\n    const svgSize = getSvgSize(size);\n    const svgHgt = svgSize;\n    const svgWid = name?.startsWith('gf-bar-align') ? 16 : name?.startsWith('gf-interp') ? 30 : svgSize;\n    const subDir = getIconSubDir(name, type);\n    const svgPath = `${iconRoot}${subDir}/${name}.svg`;\n\n    return (\n      <div className={styles.container} {...divElementProps} ref={ref}>\n        <SVG\n          src={svgPath}\n          width={svgWid}\n          height={svgHgt}\n          title={title}\n          className={cx(styles.icon, className, type === 'mono' ? { [styles.orange]: name === 'favorite' } : '')}\n          style={style}\n        />\n      </div>\n    );\n  }\n);\n\nIcon.displayName = 'Icon';\n\nfunction getFontAwesomeIconStyles(iconName: string, className?: string): string {\n  return cx(\n    iconName,\n    {\n      'fa-spin': iconName === 'fa fa-spinner',\n    },\n    className\n  );\n}\n"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAIA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAGA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,QAA1C,QAA0D,cAA1D;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,SAA1C;;AASA,MAAMC,aAAa,GAAGN,aAAa,CAAEO,KAAD,IAAyB;EAC3D,OAAO;IACL;IACAC,SAAS,EAAEb,GAAI;AACnB;AACA;AACA;AACA,KANS;IAOLc,IAAI,EAAEd,GAAI;AACd;AACA;AACA;AACA,KAXS;IAYLe,MAAM,EAAEf,GAAI;AAChB,cAAcY,KAAK,CAACI,OAAN,CAAcD,MAAO;AACnC;EAdS,CAAP;AAgBD,CAjBkC,CAAnC;AAmBA,OAAO,MAAME,IAAI,gBAAGf,KAAK,CAACgB,UAAN,CAClB,OAA4FC,GAA5F,KAAoG;EAAA,IAAnG;IAAEC,IAAI,GAAG,IAAT;IAAeC,IAAI,GAAG,SAAtB;IAAiCC,IAAjC;IAAuCC,SAAvC;IAAkDC,KAAlD;IAAyDC,KAAK,GAAG;EAAjE,CAAmG;EAAA,IAA3BC,eAA2B;;EAClG,MAAMd,KAAK,GAAGR,QAAQ,EAAtB;EAEA;;EACA,IAAIkB,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEK,UAAN,CAAiB,QAAjB,CAAJ,EAAgC;IAC9B,oBAAO;MAAG,SAAS,EAAEC,wBAAwB,CAACN,IAAD,EAAOC,SAAP;IAAtC,GAA6DG,eAA7D;MAA8E,KAAK,EAAEF;IAArF,GAAP;EACD;;EAED,IAAIF,IAAI,KAAK,WAAb,EAA0B;IACxBF,IAAI,GAAG,IAAP;EACD;;EAED,IAAI,CAACd,gBAAL,EAAuB;IACrBC,aAAa;EACd;;EAED,MAAMsB,MAAM,GAAGlB,aAAa,CAACC,KAAD,CAA5B;EACA,MAAMkB,OAAO,GAAGpB,UAAU,CAACU,IAAD,CAA1B;EACA,MAAMW,MAAM,GAAGD,OAAf;EACA,MAAME,MAAM,GAAGV,IAAI,SAAJ,IAAAA,IAAI,WAAJ,IAAAA,IAAI,CAAEK,UAAN,CAAiB,cAAjB,IAAmC,EAAnC,GAAwCL,IAAI,SAAJ,IAAAA,IAAI,WAAJ,IAAAA,IAAI,CAAEK,UAAN,CAAiB,WAAjB,IAAgC,EAAhC,GAAqCG,OAA5F;EACA,MAAMG,MAAM,GAAGxB,aAAa,CAACa,IAAD,EAAOD,IAAP,CAA5B;EACA,MAAMa,OAAO,GAAI,GAAE1B,QAAS,GAAEyB,MAAO,IAAGX,IAAK,MAA7C;EAEA,oBACE;IAAK,SAAS,EAAEO,MAAM,CAAChB;EAAvB,GAAsCa,eAAtC;IAAuD,GAAG,EAAEP,GAA5D;IAAA,uBACE,KAAC,GAAD;MACE,GAAG,EAAEe,OADP;MAEE,KAAK,EAAEF,MAFT;MAGE,MAAM,EAAED,MAHV;MAIE,KAAK,EAAEN,KAJT;MAKE,SAAS,EAAExB,EAAE,CAAC4B,MAAM,CAACf,IAAR,EAAcS,SAAd,EAAyBF,IAAI,KAAK,MAAT,GAAkB;QAAE,CAACQ,MAAM,CAACd,MAAR,GAAiBO,IAAI,KAAK;MAA5B,CAAlB,GAA6D,EAAtF,CALf;MAME,KAAK,EAAEE;IANT;EADF,GADF;AAYD,CApCiB,CAAb;AAuCPP,IAAI,CAACkB,WAAL,GAAmB,MAAnB;;AAEA,SAASP,wBAAT,CAAkCQ,QAAlC,EAAoDb,SAApD,EAAgF;EAC9E,OAAOtB,EAAE,CACPmC,QADO,EAEP;IACE,WAAWA,QAAQ,KAAK;EAD1B,CAFO,EAKPb,SALO,CAAT;AAOD"},"metadata":{},"sourceType":"module"}