{"ast":null,"code":"var _td;\n\nimport React, { useState } from 'react';\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { AmAlertStateTag } from './AmAlertStateTag';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const SilencedAlertsTableRow = ({\n  alert,\n  className\n}) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  const duration = intervalToAbbreviatedDurationString({\n    start: new Date(alert.startsAt),\n    end: new Date(alert.endsAt)\n  });\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n\n    return name;\n  }, '');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"tr\", {\n      className: className,\n      children: [/*#__PURE__*/_jsx(\"td\", {\n        children: /*#__PURE__*/_jsx(CollapseToggle, {\n          isCollapsed: isCollapsed,\n          onToggle: collapsed => setIsCollapsed(collapsed)\n        })\n      }), /*#__PURE__*/_jsx(\"td\", {\n        children: /*#__PURE__*/_jsx(AmAlertStateTag, {\n          state: alert.status.state\n        })\n      }), /*#__PURE__*/_jsxs(\"td\", {\n        children: [\"for \", duration, \" seconds\"]\n      }), /*#__PURE__*/_jsx(\"td\", {\n        children: alertName\n      })]\n    }), !isCollapsed && /*#__PURE__*/_jsxs(\"tr\", {\n      className: className,\n      children: [_td || (_td = /*#__PURE__*/_jsx(\"td\", {})), /*#__PURE__*/_jsx(\"td\", {\n        colSpan: 5,\n        children: /*#__PURE__*/_jsx(AlertLabels, {\n          labels: alert.labels\n        })\n      })]\n    })]\n  });\n};","map":{"version":3,"names":["React","useState","intervalToAbbreviatedDurationString","AlertLabels","CollapseToggle","AmAlertStateTag","SilencedAlertsTableRow","alert","className","isCollapsed","setIsCollapsed","duration","start","Date","startsAt","end","endsAt","alertName","Object","entries","labels","reduce","name","labelKey","labelValue","collapsed","status","state"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\n\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow: FC<Props> = ({ alert, className }) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const duration = intervalToAbbreviatedDurationString({\n    start: new Date(alert.startsAt),\n    end: new Date(alert.endsAt),\n  });\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {duration} seconds</td>\n        <td>{alertName}</td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td></td>\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,mCAAT,QAAoD,eAApD;AAGA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;;;AAOA,OAAO,MAAMC,sBAAiC,GAAG,CAAC;EAAEC,KAAF;EAASC;AAAT,CAAD,KAA0B;EACzE,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,IAAD,CAA9C;EAEA,MAAMU,QAAQ,GAAGT,mCAAmC,CAAC;IACnDU,KAAK,EAAE,IAAIC,IAAJ,CAASN,KAAK,CAACO,QAAf,CAD4C;IAEnDC,GAAG,EAAE,IAAIF,IAAJ,CAASN,KAAK,CAACS,MAAf;EAF8C,CAAD,CAApD;EAIA,MAAMC,SAAS,GAAGC,MAAM,CAACC,OAAP,CAAeZ,KAAK,CAACa,MAArB,EAA6BC,MAA7B,CAAoC,CAACC,IAAD,EAAO,CAACC,QAAD,EAAWC,UAAX,CAAP,KAAkC;IACtF,IAAID,QAAQ,KAAK,WAAb,IAA4BA,QAAQ,KAAK,sBAA7C,EAAqE;MACnED,IAAI,GAAGE,UAAP;IACD;;IACD,OAAOF,IAAP;EACD,CALiB,EAKf,EALe,CAAlB;EAMA,oBACE;IAAA,wBACE;MAAI,SAAS,EAAEd,SAAf;MAAA,wBACE;QAAA,uBACE,KAAC,cAAD;UAAgB,WAAW,EAAEC,WAA7B;UAA0C,QAAQ,EAAGgB,SAAD,IAAef,cAAc,CAACe,SAAD;QAAjF;MADF,EADF,eAIE;QAAA,uBACE,KAAC,eAAD;UAAiB,KAAK,EAAElB,KAAK,CAACmB,MAAN,CAAaC;QAArC;MADF,EAJF,eAOE;QAAA,mBAAShB,QAAT;MAAA,EAPF,eAQE;QAAA,UAAKM;MAAL,EARF;IAAA,EADF,EAWG,CAACR,WAAD,iBACC;MAAI,SAAS,EAAED,SAAf;MAAA,sCACE,cADF,gBAEE;QAAI,OAAO,EAAE,CAAb;QAAA,uBACE,KAAC,WAAD;UAAa,MAAM,EAAED,KAAK,CAACa;QAA3B;MADF,EAFF;IAAA,EAZJ;EAAA,EADF;AAsBD,CAnCM"},"metadata":{},"sourceType":"module"}