{"ast":null,"code":"var _Icon;\n\nimport React from 'react';\nimport { LogsDedupStrategy, LogsMetaKind } from '@grafana/data';\nimport { Button, Tooltip, Icon, LogLabels } from '@grafana/ui';\nimport { MAX_CHARACTERS } from '@grafana/ui/src/components/Logs/LogRowMessage';\nimport { MetaInfoText } from './MetaInfoText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const LogsMetaRow = /*#__PURE__*/React.memo(({\n  meta,\n  dedupStrategy,\n  dedupCount,\n  showDetectedFields,\n  clearDetectedFields,\n  hasUnescapedContent,\n  forceEscape,\n  onEscapeNewlines,\n  logRows\n}) => {\n  const logsMetaItem = [...meta]; // Add deduplication info\n\n  if (dedupStrategy !== LogsDedupStrategy.none) {\n    logsMetaItem.push({\n      label: 'Dedup count',\n      value: dedupCount,\n      kind: LogsMetaKind.Number\n    });\n  } // Add info about limit for highlighting\n\n\n  if (logRows.some(r => r.entry.length > MAX_CHARACTERS)) {\n    logsMetaItem.push({\n      label: 'Info',\n      value: 'Logs with more than 100,000 characters could not be parsed and highlighted',\n      kind: LogsMetaKind.String\n    });\n  } // Add detected fields info\n\n\n  if ((showDetectedFields === null || showDetectedFields === void 0 ? void 0 : showDetectedFields.length) > 0) {\n    logsMetaItem.push({\n      label: 'Showing only detected fields',\n      value: renderMetaItem(showDetectedFields, LogsMetaKind.LabelsMap)\n    }, {\n      label: '',\n      value: /*#__PURE__*/_jsx(Button, {\n        variant: \"secondary\",\n        size: \"sm\",\n        onClick: clearDetectedFields,\n        children: \"Show original line\"\n      })\n    });\n  } // Add unescaped content info\n\n\n  if (hasUnescapedContent) {\n    logsMetaItem.push({\n      label: 'Your logs might have incorrectly escaped content',\n      value: /*#__PURE__*/_jsx(Tooltip, {\n        content: \"Fix incorrectly escaped newline and tab sequences in log lines. Manually review the results to confirm that the replacements are correct.\",\n        placement: \"right\",\n        children: /*#__PURE__*/_jsxs(Button, {\n          variant: \"secondary\",\n          size: \"sm\",\n          onClick: onEscapeNewlines,\n          children: [/*#__PURE__*/_jsxs(\"span\", {\n            children: [forceEscape ? 'Remove escaping' : 'Escape newlines', \"\\xA0\"]\n          }), _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n            name: \"exclamation-triangle\",\n            className: \"muted\",\n            size: \"sm\"\n          }))]\n        })\n      })\n    });\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: logsMetaItem && /*#__PURE__*/_jsx(MetaInfoText, {\n      metaItems: logsMetaItem.map(item => {\n        return {\n          label: item.label,\n          value: 'kind' in item ? renderMetaItem(item.value, item.kind) : item.value\n        };\n      })\n    })\n  });\n});\nLogsMetaRow.displayName = 'LogsMetaRow';\n\nfunction renderMetaItem(value, kind) {\n  if (kind === LogsMetaKind.LabelsMap) {\n    return /*#__PURE__*/_jsx(\"span\", {\n      className: \"logs-meta-item__labels\",\n      children: /*#__PURE__*/_jsx(LogLabels, {\n        labels: value\n      })\n    });\n  } else if (kind === LogsMetaKind.Error) {\n    return /*#__PURE__*/_jsx(\"span\", {\n      className: \"logs-meta-item__error\",\n      children: value\n    });\n  }\n\n  return value;\n}","map":{"version":3,"names":["React","LogsDedupStrategy","LogsMetaKind","Button","Tooltip","Icon","LogLabels","MAX_CHARACTERS","MetaInfoText","LogsMetaRow","memo","meta","dedupStrategy","dedupCount","showDetectedFields","clearDetectedFields","hasUnescapedContent","forceEscape","onEscapeNewlines","logRows","logsMetaItem","none","push","label","value","kind","Number","some","r","entry","length","String","renderMetaItem","LabelsMap","map","item","displayName","Error"],"sources":["/home/soula/grafana/public/app/features/explore/LogsMetaRow.tsx"],"sourcesContent":["import React from 'react';\n\nimport { LogsDedupStrategy, LogsMetaItem, LogsMetaKind, LogRowModel } from '@grafana/data';\nimport { Button, Tooltip, Icon, LogLabels } from '@grafana/ui';\nimport { MAX_CHARACTERS } from '@grafana/ui/src/components/Logs/LogRowMessage';\n\nimport { MetaInfoText, MetaItemProps } from './MetaInfoText';\n\nexport type Props = {\n  meta: LogsMetaItem[];\n  dedupStrategy: LogsDedupStrategy;\n  dedupCount: number;\n  showDetectedFields: string[];\n  hasUnescapedContent: boolean;\n  forceEscape: boolean;\n  logRows: LogRowModel[];\n  onEscapeNewlines: () => void;\n  clearDetectedFields: () => void;\n};\n\nexport const LogsMetaRow: React.FC<Props> = React.memo(\n  ({\n    meta,\n    dedupStrategy,\n    dedupCount,\n    showDetectedFields,\n    clearDetectedFields,\n    hasUnescapedContent,\n    forceEscape,\n    onEscapeNewlines,\n    logRows,\n  }) => {\n    const logsMetaItem: Array<LogsMetaItem | MetaItemProps> = [...meta];\n\n    // Add deduplication info\n    if (dedupStrategy !== LogsDedupStrategy.none) {\n      logsMetaItem.push({\n        label: 'Dedup count',\n        value: dedupCount,\n        kind: LogsMetaKind.Number,\n      });\n    }\n    // Add info about limit for highlighting\n    if (logRows.some((r) => r.entry.length > MAX_CHARACTERS)) {\n      logsMetaItem.push({\n        label: 'Info',\n        value: 'Logs with more than 100,000 characters could not be parsed and highlighted',\n        kind: LogsMetaKind.String,\n      });\n    }\n\n    // Add detected fields info\n    if (showDetectedFields?.length > 0) {\n      logsMetaItem.push(\n        {\n          label: 'Showing only detected fields',\n          value: renderMetaItem(showDetectedFields, LogsMetaKind.LabelsMap),\n        },\n        {\n          label: '',\n          value: (\n            <Button variant=\"secondary\" size=\"sm\" onClick={clearDetectedFields}>\n              Show original line\n            </Button>\n          ),\n        }\n      );\n    }\n\n    // Add unescaped content info\n    if (hasUnescapedContent) {\n      logsMetaItem.push({\n        label: 'Your logs might have incorrectly escaped content',\n        value: (\n          <Tooltip\n            content=\"Fix incorrectly escaped newline and tab sequences in log lines. Manually review the results to confirm that the replacements are correct.\"\n            placement=\"right\"\n          >\n            <Button variant=\"secondary\" size=\"sm\" onClick={onEscapeNewlines}>\n              <span>{forceEscape ? 'Remove escaping' : 'Escape newlines'}&nbsp;</span>\n              <Icon name=\"exclamation-triangle\" className=\"muted\" size=\"sm\" />\n            </Button>\n          </Tooltip>\n        ),\n      });\n    }\n\n    return (\n      <>\n        {logsMetaItem && (\n          <MetaInfoText\n            metaItems={logsMetaItem.map((item) => {\n              return {\n                label: item.label,\n                value: 'kind' in item ? renderMetaItem(item.value, item.kind) : item.value,\n              };\n            })}\n          />\n        )}\n      </>\n    );\n  }\n);\n\nLogsMetaRow.displayName = 'LogsMetaRow';\n\nfunction renderMetaItem(value: any, kind: LogsMetaKind) {\n  if (kind === LogsMetaKind.LabelsMap) {\n    return (\n      <span className=\"logs-meta-item__labels\">\n        <LogLabels labels={value} />\n      </span>\n    );\n  } else if (kind === LogsMetaKind.Error) {\n    return <span className=\"logs-meta-item__error\">{value}</span>;\n  }\n  return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}