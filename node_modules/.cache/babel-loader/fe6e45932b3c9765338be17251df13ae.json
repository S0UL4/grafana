{"ast":null,"code":"const _excluded = [\"gridWidth\", \"gridPos\", \"isViewing\", \"windowHeight\", \"windowWidth\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport ReactGridLayout from 'react-grid-layout';\nimport { connect } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Subscription } from 'rxjs';\nimport { config } from '@grafana/runtime';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\nimport { cleanAndRemoveMany } from 'app/features/panel/state/actions';\nimport { DashboardPanelsChangedEvent } from 'app/types/events';\nimport { AddPanelWidget } from '../components/AddPanelWidget';\nimport { DashboardRow } from '../components/DashboardRow';\nimport { DashboardPanel } from './DashboardPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst mapDispatchToProps = {\n  cleanAndRemoveMany\n};\nconst connector = connect(null, mapDispatchToProps);\nexport class DashboardGridUnconnected extends PureComponent {\n  /** Used to keep track of mobile panel layout position */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"panelMap\", {});\n\n    _defineProperty(this, \"eventSubs\", new Subscription());\n\n    _defineProperty(this, \"windowHeight\", 1200);\n\n    _defineProperty(this, \"windowWidth\", 1920);\n\n    _defineProperty(this, \"gridWidth\", 0);\n\n    _defineProperty(this, \"lastPanelBottom\", 0);\n\n    _defineProperty(this, \"onLayoutChange\", newLayout => {\n      for (const newPos of newLayout) {\n        this.panelMap[newPos.i].updateGridPos(newPos);\n      }\n\n      this.props.dashboard.sortPanelsByGridPos(); // This is called on grid mount as it can correct invalid initial grid positions\n\n      if (!this.state.isLayoutInitialized) {\n        this.setState({\n          isLayoutInitialized: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"triggerForceUpdate\", () => {\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"updateGridPos\", (item, layout) => {\n      this.panelMap[item.i].updateGridPos(item);\n    });\n\n    _defineProperty(this, \"onResize\", (layout, oldItem, newItem) => {\n      const panel = this.panelMap[newItem.i];\n      panel.updateGridPos(newItem);\n    });\n\n    _defineProperty(this, \"onResizeStop\", (layout, oldItem, newItem) => {\n      this.updateGridPos(newItem, layout);\n    });\n\n    _defineProperty(this, \"onDragStop\", (layout, oldItem, newItem) => {\n      this.updateGridPos(newItem, layout);\n    });\n\n    this.state = {\n      isLayoutInitialized: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      dashboard\n    } = this.props;\n    this.eventSubs.add(dashboard.events.subscribe(DashboardPanelsChangedEvent, this.triggerForceUpdate));\n  }\n\n  componentWillUnmount() {\n    this.eventSubs.unsubscribe();\n    this.props.cleanAndRemoveMany(Object.keys(this.panelMap));\n  }\n\n  buildLayout() {\n    const layout = [];\n    this.panelMap = {};\n\n    for (const panel of this.props.dashboard.panels) {\n      if (!panel.key) {\n        panel.key = `panel-${panel.id}-${Date.now()}`;\n      }\n\n      this.panelMap[panel.key] = panel;\n\n      if (!panel.gridPos) {\n        console.log('panel without gridpos');\n        continue;\n      }\n\n      const panelPos = {\n        i: panel.key,\n        x: panel.gridPos.x,\n        y: panel.gridPos.y,\n        w: panel.gridPos.w,\n        h: panel.gridPos.h\n      };\n\n      if (panel.type === 'row') {\n        panelPos.w = GRID_COLUMN_COUNT;\n        panelPos.h = 1;\n        panelPos.isResizable = false;\n        panelPos.isDraggable = panel.collapsed;\n      }\n\n      layout.push(panelPos);\n    }\n\n    return layout;\n  }\n\n  getPanelScreenPos(panel, gridWidth) {\n    let top = 0; // mobile layout\n\n    if (gridWidth < config.theme2.breakpoints.values.md) {\n      // In mobile layout panels are stacked so we just add the panel vertical margin to the last panel bottom position\n      top = this.lastPanelBottom + GRID_CELL_VMARGIN;\n    } else {\n      // For top position we need to add back the vertical margin removed by translateGridHeightToScreenHeight\n      top = translateGridHeightToScreenHeight(panel.gridPos.y) + GRID_CELL_VMARGIN;\n    }\n\n    this.lastPanelBottom = top + translateGridHeightToScreenHeight(panel.gridPos.h);\n    return {\n      top,\n      bottom: this.lastPanelBottom\n    };\n  }\n\n  renderPanels(gridWidth) {\n    const panelElements = []; // Reset last panel bottom\n\n    this.lastPanelBottom = 0; // This is to avoid layout re-flows, accessing window.innerHeight can trigger re-flow\n    // We assume here that if width change height might have changed as well\n\n    if (this.gridWidth !== gridWidth) {\n      var _window$innerHeight;\n\n      this.windowHeight = (_window$innerHeight = window.innerHeight) !== null && _window$innerHeight !== void 0 ? _window$innerHeight : 1000;\n      this.windowWidth = window.innerWidth;\n      this.gridWidth = gridWidth;\n    }\n\n    for (const panel of this.props.dashboard.panels) {\n      const panelClasses = classNames({\n        'react-grid-item--fullscreen': panel.isViewing\n      });\n      panelElements.push( /*#__PURE__*/_jsx(GrafanaGridItem, {\n        className: panelClasses,\n        \"data-panelid\": panel.id,\n        gridPos: panel.gridPos,\n        gridWidth: gridWidth,\n        windowHeight: this.windowHeight,\n        windowWidth: this.windowWidth,\n        isViewing: panel.isViewing,\n        children: (width, height) => {\n          return this.renderPanel(panel, width, height);\n        }\n      }, panel.key));\n    }\n\n    return panelElements;\n  }\n\n  renderPanel(panel, width, height) {\n    if (panel.type === 'row') {\n      return /*#__PURE__*/_jsx(DashboardRow, {\n        panel: panel,\n        dashboard: this.props.dashboard\n      }, panel.key);\n    }\n\n    if (panel.type === 'add-panel') {\n      return /*#__PURE__*/_jsx(AddPanelWidget, {\n        panel: panel,\n        dashboard: this.props.dashboard\n      }, panel.key);\n    }\n\n    return /*#__PURE__*/_jsx(DashboardPanel, {\n      stateKey: panel.key,\n      panel: panel,\n      dashboard: this.props.dashboard,\n      isEditing: panel.isEditing,\n      isViewing: panel.isViewing,\n      width: width,\n      height: height\n    }, panel.key);\n  }\n\n  render() {\n    const {\n      dashboard\n    } = this.props;\n    /**\n     * We have a parent with \"flex: 1 1 0\" we need to reset it to \"flex: 1 1 auto\" to have the AutoSizer\n     * properly working. For more information go here:\n     * https://github.com/bvaughn/react-virtualized/blob/master/docs/usingAutoSizer.md#can-i-use-autosizer-within-a-flex-container\n     */\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        flex: '1 1 auto',\n        display: this.props.editPanel ? 'none' : undefined\n      },\n      children: /*#__PURE__*/_jsx(AutoSizer, {\n        disableHeight: true,\n        children: ({\n          width\n        }) => {\n          if (width === 0) {\n            return null;\n          }\n\n          const draggable = width <= 769 ? false : dashboard.meta.canEdit;\n          /*\n          Disable draggable if mobile device, solving an issue with unintentionally\n          moving panels. https://github.com/grafana/grafana/issues/18497\n          theme.breakpoints.md = 769\n          */\n\n          return (\n            /*#__PURE__*/\n\n            /**\n             * The children is using a width of 100% so we need to guarantee that it is wrapped\n             * in an element that has the calculated size given by the AutoSizer. The AutoSizer\n             * has a width of 0 and will let its content overflow its div.\n             */\n            _jsx(\"div\", {\n              style: {\n                width: `${width}px`,\n                height: '100%'\n              },\n              children: /*#__PURE__*/_jsx(ReactGridLayout, {\n                width: width,\n                isDraggable: draggable,\n                isResizable: dashboard.meta.canEdit,\n                containerPadding: [0, 0],\n                useCSSTransforms: false,\n                margin: [GRID_CELL_VMARGIN, GRID_CELL_VMARGIN],\n                cols: GRID_COLUMN_COUNT,\n                rowHeight: GRID_CELL_HEIGHT,\n                draggableHandle: \".grid-drag-handle\",\n                layout: this.buildLayout(),\n                onDragStop: this.onDragStop,\n                onResize: this.onResize,\n                onResizeStop: this.onResizeStop,\n                onLayoutChange: this.onLayoutChange,\n                children: this.renderPanels(width)\n              })\n            })\n          );\n        }\n      })\n    });\n  }\n\n}\n\n/**\n * A hacky way to intercept the react-layout-grid item dimensions and pass them to DashboardPanel\n */\nconst GrafanaGridItem = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _props$style;\n\n  const theme = config.theme2;\n  let width = 100;\n  let height = 100;\n\n  const {\n    gridWidth,\n    gridPos,\n    isViewing,\n    windowHeight,\n    windowWidth\n  } = props,\n        divProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const style = (_props$style = props.style) !== null && _props$style !== void 0 ? _props$style : {};\n\n  if (isViewing) {\n    // In fullscreen view mode a single panel take up full width & 85% height\n    width = gridWidth;\n    height = windowHeight * 0.85;\n    style.height = height;\n    style.width = '100%';\n  } else if (windowWidth < theme.breakpoints.values.md) {\n    // Mobile layout is a bit different, every panel take up full width\n    width = props.gridWidth;\n    height = translateGridHeightToScreenHeight(gridPos.h);\n    style.height = height;\n    style.width = '100%';\n  } else {\n    // Normal grid layout. The grid framework passes width and height directly to children as style props.\n    width = parseFloat(props.style.width);\n    height = parseFloat(props.style.height);\n  } // props.children[0] is our main children. RGL adds the drag handle at props.children[1]\n\n\n  return /*#__PURE__*/_jsx(\"div\", Object.assign({}, divProps, {\n    ref: ref,\n    children: [props.children[0](width, height), props.children.slice(1)]\n  }));\n});\n/**\n * This translates grid height dimensions to real pixels\n */\n\nfunction translateGridHeightToScreenHeight(gridHeight) {\n  return gridHeight * (GRID_CELL_HEIGHT + GRID_CELL_VMARGIN) - GRID_CELL_VMARGIN;\n}\n\nGrafanaGridItem.displayName = 'GridItemWithDimensions';\nexport const DashboardGrid = connector(DashboardGridUnconnected);","map":{"version":3,"names":["classNames","React","PureComponent","ReactGridLayout","connect","AutoSizer","Subscription","config","GRID_CELL_HEIGHT","GRID_CELL_VMARGIN","GRID_COLUMN_COUNT","cleanAndRemoveMany","DashboardPanelsChangedEvent","AddPanelWidget","DashboardRow","DashboardPanel","mapDispatchToProps","connector","DashboardGridUnconnected","constructor","props","newLayout","newPos","panelMap","i","updateGridPos","dashboard","sortPanelsByGridPos","state","isLayoutInitialized","setState","forceUpdate","item","layout","oldItem","newItem","panel","componentDidMount","eventSubs","add","events","subscribe","triggerForceUpdate","componentWillUnmount","unsubscribe","Object","keys","buildLayout","panels","key","id","Date","now","gridPos","console","log","panelPos","x","y","w","h","type","isResizable","isDraggable","collapsed","push","getPanelScreenPos","gridWidth","top","theme2","breakpoints","values","md","lastPanelBottom","translateGridHeightToScreenHeight","bottom","renderPanels","panelElements","windowHeight","window","innerHeight","windowWidth","innerWidth","panelClasses","isViewing","width","height","renderPanel","isEditing","render","flex","display","editPanel","undefined","draggable","meta","canEdit","onDragStop","onResize","onResizeStop","onLayoutChange","GrafanaGridItem","forwardRef","ref","theme","divProps","style","parseFloat","children","slice","gridHeight","displayName","DashboardGrid"],"sources":["/home/soula/grafana/public/app/features/dashboard/dashgrid/DashboardGrid.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { PureComponent, CSSProperties } from 'react';\nimport ReactGridLayout, { ItemCallback } from 'react-grid-layout';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Subscription } from 'rxjs';\n\nimport { config } from '@grafana/runtime';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\nimport { cleanAndRemoveMany } from 'app/features/panel/state/actions';\nimport { DashboardPanelsChangedEvent } from 'app/types/events';\n\nimport { AddPanelWidget } from '../components/AddPanelWidget';\nimport { DashboardRow } from '../components/DashboardRow';\nimport { DashboardModel, PanelModel } from '../state';\nimport { GridPos } from '../state/PanelModel';\n\nimport { DashboardPanel } from './DashboardPanel';\n\nexport interface OwnProps {\n  dashboard: DashboardModel;\n  editPanel: PanelModel | null;\n  viewPanel: PanelModel | null;\n}\n\nexport interface State {\n  isLayoutInitialized: boolean;\n}\n\nconst mapDispatchToProps = {\n  cleanAndRemoveMany,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DashboardGridUnconnected extends PureComponent<Props, State> {\n  private panelMap: { [key: string]: PanelModel } = {};\n  private eventSubs = new Subscription();\n  private windowHeight = 1200;\n  private windowWidth = 1920;\n  private gridWidth = 0;\n  /** Used to keep track of mobile panel layout position */\n  private lastPanelBottom = 0;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLayoutInitialized: false,\n    };\n  }\n\n  componentDidMount() {\n    const { dashboard } = this.props;\n    this.eventSubs.add(dashboard.events.subscribe(DashboardPanelsChangedEvent, this.triggerForceUpdate));\n  }\n\n  componentWillUnmount() {\n    this.eventSubs.unsubscribe();\n    this.props.cleanAndRemoveMany(Object.keys(this.panelMap));\n  }\n\n  buildLayout() {\n    const layout = [];\n    this.panelMap = {};\n\n    for (const panel of this.props.dashboard.panels) {\n      if (!panel.key) {\n        panel.key = `panel-${panel.id}-${Date.now()}`;\n      }\n      this.panelMap[panel.key] = panel;\n\n      if (!panel.gridPos) {\n        console.log('panel without gridpos');\n        continue;\n      }\n\n      const panelPos: any = {\n        i: panel.key,\n        x: panel.gridPos.x,\n        y: panel.gridPos.y,\n        w: panel.gridPos.w,\n        h: panel.gridPos.h,\n      };\n\n      if (panel.type === 'row') {\n        panelPos.w = GRID_COLUMN_COUNT;\n        panelPos.h = 1;\n        panelPos.isResizable = false;\n        panelPos.isDraggable = panel.collapsed;\n      }\n\n      layout.push(panelPos);\n    }\n\n    return layout;\n  }\n\n  onLayoutChange = (newLayout: ReactGridLayout.Layout[]) => {\n    for (const newPos of newLayout) {\n      this.panelMap[newPos.i!].updateGridPos(newPos);\n    }\n\n    this.props.dashboard.sortPanelsByGridPos();\n\n    // This is called on grid mount as it can correct invalid initial grid positions\n    if (!this.state.isLayoutInitialized) {\n      this.setState({ isLayoutInitialized: true });\n    }\n  };\n\n  triggerForceUpdate = () => {\n    this.forceUpdate();\n  };\n\n  updateGridPos = (item: ReactGridLayout.Layout, layout: ReactGridLayout.Layout[]) => {\n    this.panelMap[item.i!].updateGridPos(item);\n  };\n\n  onResize: ItemCallback = (layout, oldItem, newItem) => {\n    const panel = this.panelMap[newItem.i!];\n    panel.updateGridPos(newItem);\n  };\n\n  onResizeStop: ItemCallback = (layout, oldItem, newItem) => {\n    this.updateGridPos(newItem, layout);\n  };\n\n  onDragStop: ItemCallback = (layout, oldItem, newItem) => {\n    this.updateGridPos(newItem, layout);\n  };\n\n  getPanelScreenPos(panel: PanelModel, gridWidth: number): { top: number; bottom: number } {\n    let top = 0;\n\n    // mobile layout\n    if (gridWidth < config.theme2.breakpoints.values.md) {\n      // In mobile layout panels are stacked so we just add the panel vertical margin to the last panel bottom position\n      top = this.lastPanelBottom + GRID_CELL_VMARGIN;\n    } else {\n      // For top position we need to add back the vertical margin removed by translateGridHeightToScreenHeight\n      top = translateGridHeightToScreenHeight(panel.gridPos.y) + GRID_CELL_VMARGIN;\n    }\n\n    this.lastPanelBottom = top + translateGridHeightToScreenHeight(panel.gridPos.h);\n\n    return { top, bottom: this.lastPanelBottom };\n  }\n\n  renderPanels(gridWidth: number) {\n    const panelElements = [];\n\n    // Reset last panel bottom\n    this.lastPanelBottom = 0;\n\n    // This is to avoid layout re-flows, accessing window.innerHeight can trigger re-flow\n    // We assume here that if width change height might have changed as well\n    if (this.gridWidth !== gridWidth) {\n      this.windowHeight = window.innerHeight ?? 1000;\n      this.windowWidth = window.innerWidth;\n      this.gridWidth = gridWidth;\n    }\n\n    for (const panel of this.props.dashboard.panels) {\n      const panelClasses = classNames({ 'react-grid-item--fullscreen': panel.isViewing });\n\n      panelElements.push(\n        <GrafanaGridItem\n          key={panel.key}\n          className={panelClasses}\n          data-panelid={panel.id}\n          gridPos={panel.gridPos}\n          gridWidth={gridWidth}\n          windowHeight={this.windowHeight}\n          windowWidth={this.windowWidth}\n          isViewing={panel.isViewing}\n        >\n          {(width: number, height: number) => {\n            return this.renderPanel(panel, width, height);\n          }}\n        </GrafanaGridItem>\n      );\n    }\n\n    return panelElements;\n  }\n\n  renderPanel(panel: PanelModel, width: any, height: any) {\n    if (panel.type === 'row') {\n      return <DashboardRow key={panel.key} panel={panel} dashboard={this.props.dashboard} />;\n    }\n\n    if (panel.type === 'add-panel') {\n      return <AddPanelWidget key={panel.key} panel={panel} dashboard={this.props.dashboard} />;\n    }\n\n    return (\n      <DashboardPanel\n        key={panel.key}\n        stateKey={panel.key}\n        panel={panel}\n        dashboard={this.props.dashboard}\n        isEditing={panel.isEditing}\n        isViewing={panel.isViewing}\n        width={width}\n        height={height}\n      />\n    );\n  }\n\n  render() {\n    const { dashboard } = this.props;\n\n    /**\n     * We have a parent with \"flex: 1 1 0\" we need to reset it to \"flex: 1 1 auto\" to have the AutoSizer\n     * properly working. For more information go here:\n     * https://github.com/bvaughn/react-virtualized/blob/master/docs/usingAutoSizer.md#can-i-use-autosizer-within-a-flex-container\n     */\n    return (\n      <div style={{ flex: '1 1 auto', display: this.props.editPanel ? 'none' : undefined }}>\n        <AutoSizer disableHeight>\n          {({ width }) => {\n            if (width === 0) {\n              return null;\n            }\n\n            const draggable = width <= 769 ? false : dashboard.meta.canEdit;\n\n            /*\n            Disable draggable if mobile device, solving an issue with unintentionally\n            moving panels. https://github.com/grafana/grafana/issues/18497\n            theme.breakpoints.md = 769\n          */\n\n            return (\n              /**\n               * The children is using a width of 100% so we need to guarantee that it is wrapped\n               * in an element that has the calculated size given by the AutoSizer. The AutoSizer\n               * has a width of 0 and will let its content overflow its div.\n               */\n              <div style={{ width: `${width}px`, height: '100%' }}>\n                <ReactGridLayout\n                  width={width}\n                  isDraggable={draggable}\n                  isResizable={dashboard.meta.canEdit}\n                  containerPadding={[0, 0]}\n                  useCSSTransforms={false}\n                  margin={[GRID_CELL_VMARGIN, GRID_CELL_VMARGIN]}\n                  cols={GRID_COLUMN_COUNT}\n                  rowHeight={GRID_CELL_HEIGHT}\n                  draggableHandle=\".grid-drag-handle\"\n                  layout={this.buildLayout()}\n                  onDragStop={this.onDragStop}\n                  onResize={this.onResize}\n                  onResizeStop={this.onResizeStop}\n                  onLayoutChange={this.onLayoutChange}\n                >\n                  {this.renderPanels(width)}\n                </ReactGridLayout>\n              </div>\n            );\n          }}\n        </AutoSizer>\n      </div>\n    );\n  }\n}\n\ninterface GrafanaGridItemProps extends Record<string, any> {\n  gridWidth?: number;\n  gridPos?: GridPos;\n  isViewing: string;\n  windowHeight: number;\n  windowWidth: number;\n  children: any;\n}\n\n/**\n * A hacky way to intercept the react-layout-grid item dimensions and pass them to DashboardPanel\n */\nconst GrafanaGridItem = React.forwardRef<HTMLDivElement, GrafanaGridItemProps>((props, ref) => {\n  const theme = config.theme2;\n  let width = 100;\n  let height = 100;\n\n  const { gridWidth, gridPos, isViewing, windowHeight, windowWidth, ...divProps } = props;\n  const style: CSSProperties = props.style ?? {};\n\n  if (isViewing) {\n    // In fullscreen view mode a single panel take up full width & 85% height\n    width = gridWidth!;\n    height = windowHeight * 0.85;\n    style.height = height;\n    style.width = '100%';\n  } else if (windowWidth < theme.breakpoints.values.md) {\n    // Mobile layout is a bit different, every panel take up full width\n    width = props.gridWidth!;\n    height = translateGridHeightToScreenHeight(gridPos!.h);\n    style.height = height;\n    style.width = '100%';\n  } else {\n    // Normal grid layout. The grid framework passes width and height directly to children as style props.\n    width = parseFloat(props.style.width);\n    height = parseFloat(props.style.height);\n  }\n\n  // props.children[0] is our main children. RGL adds the drag handle at props.children[1]\n  return (\n    <div {...divProps} ref={ref}>\n      {/* Pass width and height to children as render props */}\n      {[props.children[0](width, height), props.children.slice(1)]}\n    </div>\n  );\n});\n\n/**\n * This translates grid height dimensions to real pixels\n */\nfunction translateGridHeightToScreenHeight(gridHeight: number): number {\n  return gridHeight * (GRID_CELL_HEIGHT + GRID_CELL_VMARGIN) - GRID_CELL_VMARGIN;\n}\n\nGrafanaGridItem.displayName = 'GridItemWithDimensions';\n\nexport const DashboardGrid = connector(DashboardGridUnconnected);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}