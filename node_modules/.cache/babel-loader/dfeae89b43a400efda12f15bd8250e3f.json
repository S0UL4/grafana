{"ast":null,"code":"var _Page$Contents, _AlertWarning, _AlertWarning2, _AlertWarning3, _AlertWarning4, _Page$Contents2, _AlertRuleForm, _LinkButton;\n\nimport { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAsync } from 'react-use';\nimport { Alert, LinkButton, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertRuleForm } from './components/rule-editor/AlertRuleForm';\nimport { useIsRuleEditable } from './hooks/useIsRuleEditable';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromBuildInfoAction, fetchEditableRuleAction } from './state/actions';\nimport { useRulesAccess } from './utils/accessControlHooks';\nimport * as ruleId from './utils/rule-id';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst ExistingRuleEditor = ({\n  identifier\n}) => {\n  useCleanup(state => state.unifiedAlerting.ruleForm.existingRule);\n  const {\n    loading,\n    result,\n    error,\n    dispatched\n  } = useUnifiedAlertingSelector(state => state.ruleForm.existingRule);\n  const dispatch = useDispatch();\n  const {\n    isEditable\n  } = useIsRuleEditable(ruleId.ruleIdentifierToRuleSourceName(identifier), result === null || result === void 0 ? void 0 : result.rule);\n  useEffect(() => {\n    if (!dispatched) {\n      dispatch(fetchEditableRuleAction(identifier));\n    }\n  }, [dispatched, dispatch, identifier]);\n\n  if (loading || isEditable === undefined) {\n    return _Page$Contents || (_Page$Contents = /*#__PURE__*/_jsx(Page.Contents, {\n      children: /*#__PURE__*/_jsx(LoadingPlaceholder, {\n        text: \"Loading rule...\"\n      })\n    }));\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsx(Page.Contents, {\n      children: /*#__PURE__*/_jsx(Alert, {\n        severity: \"error\",\n        title: \"Failed to load rule\",\n        children: error.message\n      })\n    });\n  }\n\n  if (!result) {\n    return _AlertWarning || (_AlertWarning = /*#__PURE__*/_jsx(AlertWarning, {\n      title: \"Rule not found\",\n      children: \"Sorry! This rule does not exist.\"\n    }));\n  }\n\n  if (isEditable === false) {\n    return _AlertWarning2 || (_AlertWarning2 = /*#__PURE__*/_jsx(AlertWarning, {\n      title: \"Cannot edit rule\",\n      children: \"Sorry! You do not have permission to edit this rule.\"\n    }));\n  }\n\n  return /*#__PURE__*/_jsx(AlertRuleForm, {\n    existing: result\n  });\n};\n\nconst RuleEditor = ({\n  match\n}) => {\n  const dispatch = useDispatch();\n  const {\n    id\n  } = match.params;\n  const identifier = ruleId.tryParse(id, true);\n  const {\n    loading\n  } = useAsync(async () => {\n    await dispatch(fetchAllPromBuildInfoAction());\n  }, [dispatch]);\n  const {\n    canCreateGrafanaRules,\n    canCreateCloudRules,\n    canEditRules\n  } = useRulesAccess();\n\n  if (!identifier && !canCreateGrafanaRules && !canCreateCloudRules) {\n    return _AlertWarning3 || (_AlertWarning3 = /*#__PURE__*/_jsx(AlertWarning, {\n      title: \"Cannot create rules\",\n      children: \"Sorry! You are not allowed to create rules.\"\n    }));\n  }\n\n  if (identifier && !canEditRules(identifier.ruleSourceName)) {\n    return _AlertWarning4 || (_AlertWarning4 = /*#__PURE__*/_jsx(AlertWarning, {\n      title: \"Cannot edit rules\",\n      children: \"Sorry! You are not allowed to edit rules.\"\n    }));\n  }\n\n  if (loading) {\n    return _Page$Contents2 || (_Page$Contents2 = /*#__PURE__*/_jsx(Page.Contents, {\n      children: /*#__PURE__*/_jsx(LoadingPlaceholder, {\n        text: \"Loading...\"\n      })\n    }));\n  }\n\n  if (identifier) {\n    return /*#__PURE__*/_jsx(ExistingRuleEditor, {\n      identifier: identifier\n    }, id);\n  }\n\n  return _AlertRuleForm || (_AlertRuleForm = /*#__PURE__*/_jsx(AlertRuleForm, {}));\n};\n\nconst AlertWarning = ({\n  title,\n  children\n}) => /*#__PURE__*/_jsxs(Alert, {\n  className: useStyles2(warningStyles).warning,\n  severity: \"warning\",\n  title: title,\n  children: [/*#__PURE__*/_jsx(\"p\", {\n    children: children\n  }), _LinkButton || (_LinkButton = /*#__PURE__*/_jsx(LinkButton, {\n    href: \"alerting/list\",\n    children: \"To rule list\"\n  }))]\n});\n\nconst warningStyles = theme => ({\n  warning: css`\n    margin: ${theme.spacing(4)};\n  `\n});\n\nexport default withErrorBoundary(RuleEditor, {\n  style: 'page'\n});","map":{"version":3,"names":["css","React","useEffect","useDispatch","useAsync","Alert","LinkButton","LoadingPlaceholder","useStyles2","withErrorBoundary","Page","useCleanup","AlertRuleForm","useIsRuleEditable","useUnifiedAlertingSelector","fetchAllPromBuildInfoAction","fetchEditableRuleAction","useRulesAccess","ruleId","ExistingRuleEditor","identifier","state","unifiedAlerting","ruleForm","existingRule","loading","result","error","dispatched","dispatch","isEditable","ruleIdentifierToRuleSourceName","rule","undefined","message","RuleEditor","match","id","params","tryParse","canCreateGrafanaRules","canCreateCloudRules","canEditRules","ruleSourceName","AlertWarning","title","children","warningStyles","warning","theme","spacing","style"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/RuleEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LinkButton, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { RuleIdentifier } from 'app/types/unified-alerting';\n\nimport { AlertRuleForm } from './components/rule-editor/AlertRuleForm';\nimport { useIsRuleEditable } from './hooks/useIsRuleEditable';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromBuildInfoAction, fetchEditableRuleAction } from './state/actions';\nimport { useRulesAccess } from './utils/accessControlHooks';\nimport * as ruleId from './utils/rule-id';\n\ninterface ExistingRuleEditorProps {\n  identifier: RuleIdentifier;\n}\n\nconst ExistingRuleEditor: FC<ExistingRuleEditorProps> = ({ identifier }) => {\n  useCleanup((state) => state.unifiedAlerting.ruleForm.existingRule);\n  const { loading, result, error, dispatched } = useUnifiedAlertingSelector((state) => state.ruleForm.existingRule);\n  const dispatch = useDispatch();\n  const { isEditable } = useIsRuleEditable(ruleId.ruleIdentifierToRuleSourceName(identifier), result?.rule);\n\n  useEffect(() => {\n    if (!dispatched) {\n      dispatch(fetchEditableRuleAction(identifier));\n    }\n  }, [dispatched, dispatch, identifier]);\n\n  if (loading || isEditable === undefined) {\n    return (\n      <Page.Contents>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </Page.Contents>\n    );\n  }\n\n  if (error) {\n    return (\n      <Page.Contents>\n        <Alert severity=\"error\" title=\"Failed to load rule\">\n          {error.message}\n        </Alert>\n      </Page.Contents>\n    );\n  }\n\n  if (!result) {\n    return <AlertWarning title=\"Rule not found\">Sorry! This rule does not exist.</AlertWarning>;\n  }\n\n  if (isEditable === false) {\n    return <AlertWarning title=\"Cannot edit rule\">Sorry! You do not have permission to edit this rule.</AlertWarning>;\n  }\n\n  return <AlertRuleForm existing={result} />;\n};\n\ntype RuleEditorProps = GrafanaRouteComponentProps<{ id?: string }>;\n\nconst RuleEditor: FC<RuleEditorProps> = ({ match }) => {\n  const dispatch = useDispatch();\n  const { id } = match.params;\n  const identifier = ruleId.tryParse(id, true);\n\n  const { loading } = useAsync(async () => {\n    await dispatch(fetchAllPromBuildInfoAction());\n  }, [dispatch]);\n\n  const { canCreateGrafanaRules, canCreateCloudRules, canEditRules } = useRulesAccess();\n\n  if (!identifier && !canCreateGrafanaRules && !canCreateCloudRules) {\n    return <AlertWarning title=\"Cannot create rules\">Sorry! You are not allowed to create rules.</AlertWarning>;\n  }\n\n  if (identifier && !canEditRules(identifier.ruleSourceName)) {\n    return <AlertWarning title=\"Cannot edit rules\">Sorry! You are not allowed to edit rules.</AlertWarning>;\n  }\n\n  if (loading) {\n    return (\n      <Page.Contents>\n        <LoadingPlaceholder text=\"Loading...\" />\n      </Page.Contents>\n    );\n  }\n\n  if (identifier) {\n    return <ExistingRuleEditor key={id} identifier={identifier} />;\n  }\n\n  return <AlertRuleForm />;\n};\n\nconst AlertWarning: FC<{ title: string }> = ({ title, children }) => (\n  <Alert className={useStyles2(warningStyles).warning} severity=\"warning\" title={title}>\n    <p>{children}</p>\n    <LinkButton href=\"alerting/list\">To rule list</LinkButton>\n  </Alert>\n);\n\nconst warningStyles = (theme: GrafanaTheme2) => ({\n  warning: css`\n    margin: ${theme.spacing(4)};\n  `,\n});\n\nexport default withErrorBoundary(RuleEditor, { style: 'page' });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}