{"ast":null,"code":"var _Card, _Icon;\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useAsync, useLocalStorage } from 'react-use';\nimport { Card, Checkbox, CollapsableSection, Icon, Spinner, stylesFactory, useTheme } from '@grafana/ui';\nimport { getSectionStorageKey } from 'app/features/search/utils';\nimport { useUniqueId } from 'app/plugins/datasource/influxdb/components/useUniqueId';\nimport { SearchItem } from '../..';\nimport { getGrafanaSearcher } from '../../service';\nimport { DashboardSearchItemType } from '../../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const FolderSection = ({\n  section,\n  selectionToggle,\n  onTagSelected,\n  selection,\n  renderStandaloneBody,\n  tags\n}) => {\n  const editable = selectionToggle != null;\n  const theme = useTheme();\n  const styles = getSectionHeaderStyles(theme, section.selected, editable);\n  const [sectionExpanded, setSectionExpanded] = useLocalStorage(getSectionStorageKey(section.title), false);\n  const results = useAsync(async () => {\n    if (!sectionExpanded && !renderStandaloneBody) {\n      return Promise.resolve([]);\n    }\n\n    let folderUid = section.uid;\n    let folderTitle = section.title;\n    let query = {\n      query: '*',\n      kind: ['dashboard'],\n      location: section.uid,\n      sort: 'name_sort'\n    };\n\n    if (section.itemsUIDs) {\n      query = {\n        uid: section.itemsUIDs // array of UIDs\n\n      };\n      folderUid = undefined;\n      folderTitle = undefined;\n    }\n\n    const raw = await getGrafanaSearcher().search(Object.assign({}, query, {\n      tags\n    }));\n    const v = raw.view.map(item => {\n      var _item$tags;\n\n      return {\n        uid: item.uid,\n        title: item.name,\n        url: item.url,\n        uri: item.url,\n        type: item.kind === 'folder' ? DashboardSearchItemType.DashFolder : DashboardSearchItemType.DashDB,\n        id: 666,\n        // do not use me!\n        isStarred: false,\n        tags: (_item$tags = item.tags) !== null && _item$tags !== void 0 ? _item$tags : [],\n        folderUid,\n        folderTitle\n      };\n    });\n    return v;\n  }, [sectionExpanded, section, tags]);\n\n  const onSectionExpand = () => {\n    setSectionExpanded(!sectionExpanded);\n  };\n\n  const onToggleFolder = evt => {\n    evt.preventDefault();\n    evt.stopPropagation();\n\n    if (selectionToggle && selection) {\n      var _results$value;\n\n      const checked = !selection(section.kind, section.uid);\n      selectionToggle(section.kind, section.uid);\n      const sub = (_results$value = results.value) !== null && _results$value !== void 0 ? _results$value : [];\n\n      for (const item of sub) {\n        if (selection('dashboard', item.uid) !== checked) {\n          selectionToggle('dashboard', item.uid);\n        }\n      }\n    }\n  };\n\n  const id = useUniqueId();\n  const labelId = `section-header-label-${id}`;\n  let icon = section.icon;\n\n  if (!icon) {\n    icon = sectionExpanded ? 'folder-open' : 'folder';\n  }\n\n  const renderResults = () => {\n    if (!results.value) {\n      return null;\n    } else if (results.value.length === 0 && !results.loading) {\n      return _Card || (_Card = /*#__PURE__*/_jsx(Card, {\n        children: /*#__PURE__*/_jsx(Card.Heading, {\n          children: \"No results found\"\n        })\n      }));\n    }\n\n    return results.value.map(v => {\n      if (selection && selectionToggle) {\n        const type = v.type === DashboardSearchItemType.DashFolder ? 'folder' : 'dashboard';\n        v = Object.assign({}, v, {\n          checked: selection(type, v.uid)\n        });\n      }\n\n      return /*#__PURE__*/_jsx(SearchItem, {\n        item: v,\n        onTagSelected: onTagSelected,\n        onToggleChecked: item => {\n          if (selectionToggle) {\n            selectionToggle('dashboard', item.uid);\n          }\n        },\n        editable: Boolean(selection != null)\n      }, v.uid);\n    });\n  }; // Skip the folder wrapper\n\n\n  if (renderStandaloneBody) {\n    var _results$value2;\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: styles.folderViewResults,\n      children: !((_results$value2 = results.value) !== null && _results$value2 !== void 0 && _results$value2.length) && results.loading ? /*#__PURE__*/_jsx(Spinner, {\n        className: styles.spinner\n      }) : renderResults()\n    });\n  }\n\n  return /*#__PURE__*/_jsx(CollapsableSection, {\n    isOpen: sectionExpanded !== null && sectionExpanded !== void 0 ? sectionExpanded : false,\n    onToggle: onSectionExpand,\n    className: styles.wrapper,\n    contentClassName: styles.content,\n    loading: results.loading,\n    labelId: labelId,\n    label: /*#__PURE__*/_jsxs(_Fragment, {\n      children: [selectionToggle && selection && /*#__PURE__*/_jsx(\"div\", {\n        className: styles.checkbox,\n        onClick: onToggleFolder,\n        children: /*#__PURE__*/_jsx(Checkbox, {\n          value: selection(section.kind, section.uid),\n          \"aria-label\": \"Select folder\"\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.icon,\n        children: /*#__PURE__*/_jsx(Icon, {\n          name: icon\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.text,\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          id: labelId,\n          children: section.title\n        }), section.url && section.uid !== 'general' && /*#__PURE__*/_jsxs(\"a\", {\n          href: section.url,\n          className: styles.link,\n          children: [/*#__PURE__*/_jsx(\"span\", {\n            className: styles.separator,\n            children: \"|\"\n          }), \" \", _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n            name: \"folder-upload\"\n          })), \" Go to folder\"]\n        })]\n      })]\n    }),\n    children: results.value && /*#__PURE__*/_jsx(\"ul\", {\n      className: styles.sectionItems,\n      children: renderResults()\n    })\n  });\n};\nconst getSectionHeaderStyles = stylesFactory((theme, selected = false, editable) => {\n  const {\n    sm\n  } = theme.spacing;\n  return {\n    wrapper: cx(css`\n        align-items: center;\n        font-size: ${theme.typography.size.base};\n        padding: 12px;\n        border-bottom: none;\n        color: ${theme.colors.textWeak};\n        z-index: 1;\n\n        &:hover,\n        &.selected {\n          color: ${theme.colors.text};\n        }\n\n        &:hover,\n        &:focus-visible,\n        &:focus-within {\n          a {\n            opacity: 1;\n          }\n        }\n      `, 'pointer', {\n      selected\n    }),\n    sectionItems: css`\n      margin: 0 24px 0 32px;\n    `,\n    checkbox: css`\n      padding: 0 ${sm} 0 0;\n    `,\n    icon: css`\n      padding: 0 ${sm} 0 ${editable ? 0 : sm};\n    `,\n    folderViewResults: css`\n      overflow: auto;\n    `,\n    text: css`\n      flex-grow: 1;\n      line-height: 24px;\n    `,\n    link: css`\n      padding: 2px 10px 0;\n      color: ${theme.colors.textWeak};\n      opacity: 0;\n      transition: opacity 150ms ease-in-out;\n    `,\n    separator: css`\n      margin-right: 6px;\n    `,\n    content: css`\n      padding-top: 0px;\n      padding-bottom: 0px;\n    `,\n    spinner: css`\n      display: grid;\n      place-content: center;\n      padding-bottom: 1rem;\n    `\n  };\n});","map":{"version":3,"names":["css","cx","React","useAsync","useLocalStorage","Card","Checkbox","CollapsableSection","Icon","Spinner","stylesFactory","useTheme","getSectionStorageKey","useUniqueId","SearchItem","getGrafanaSearcher","DashboardSearchItemType","FolderSection","section","selectionToggle","onTagSelected","selection","renderStandaloneBody","tags","editable","theme","styles","getSectionHeaderStyles","selected","sectionExpanded","setSectionExpanded","title","results","Promise","resolve","folderUid","uid","folderTitle","query","kind","location","sort","itemsUIDs","undefined","raw","search","v","view","map","item","name","url","uri","type","DashFolder","DashDB","id","isStarred","onSectionExpand","onToggleFolder","evt","preventDefault","stopPropagation","checked","sub","value","labelId","icon","renderResults","length","loading","Boolean","folderViewResults","spinner","wrapper","content","checkbox","text","link","separator","sectionItems","sm","spacing","typography","size","base","colors","textWeak"],"sources":["/home/soula/grafana/public/app/features/search/page/components/FolderSection.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useAsync, useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { Card, Checkbox, CollapsableSection, Icon, IconName, Spinner, stylesFactory, useTheme } from '@grafana/ui';\nimport { getSectionStorageKey } from 'app/features/search/utils';\nimport { useUniqueId } from 'app/plugins/datasource/influxdb/components/useUniqueId';\n\nimport { SearchItem } from '../..';\nimport { getGrafanaSearcher, SearchQuery } from '../../service';\nimport { DashboardSearchItemType, DashboardSectionItem } from '../../types';\nimport { SelectionChecker, SelectionToggle } from '../selection';\n\nexport interface DashboardSection {\n  kind: string; // folder | query!\n  uid: string;\n  title: string;\n  selected?: boolean; // not used ?  keyboard\n  url?: string;\n  icon?: IconName;\n  itemsUIDs?: string[]; // for pseudo folders\n}\n\ninterface SectionHeaderProps {\n  selection?: SelectionChecker;\n  selectionToggle?: SelectionToggle;\n  onTagSelected: (tag: string) => void;\n  section: DashboardSection;\n  renderStandaloneBody?: boolean; // render the body on its own\n  tags?: string[];\n}\n\nexport const FolderSection: FC<SectionHeaderProps> = ({\n  section,\n  selectionToggle,\n  onTagSelected,\n  selection,\n  renderStandaloneBody,\n  tags,\n}) => {\n  const editable = selectionToggle != null;\n  const theme = useTheme();\n  const styles = getSectionHeaderStyles(theme, section.selected, editable);\n  const [sectionExpanded, setSectionExpanded] = useLocalStorage(getSectionStorageKey(section.title), false);\n\n  const results = useAsync(async () => {\n    if (!sectionExpanded && !renderStandaloneBody) {\n      return Promise.resolve([]);\n    }\n    let folderUid: string | undefined = section.uid;\n    let folderTitle: string | undefined = section.title;\n    let query: SearchQuery = {\n      query: '*',\n      kind: ['dashboard'],\n      location: section.uid,\n      sort: 'name_sort',\n    };\n    if (section.itemsUIDs) {\n      query = {\n        uid: section.itemsUIDs, // array of UIDs\n      };\n      folderUid = undefined;\n      folderTitle = undefined;\n    }\n\n    const raw = await getGrafanaSearcher().search({ ...query, tags });\n    const v = raw.view.map<DashboardSectionItem>((item) => ({\n      uid: item.uid,\n      title: item.name,\n      url: item.url,\n      uri: item.url,\n      type: item.kind === 'folder' ? DashboardSearchItemType.DashFolder : DashboardSearchItemType.DashDB,\n      id: 666, // do not use me!\n      isStarred: false,\n      tags: item.tags ?? [],\n      folderUid,\n      folderTitle,\n    }));\n    return v;\n  }, [sectionExpanded, section, tags]);\n\n  const onSectionExpand = () => {\n    setSectionExpanded(!sectionExpanded);\n  };\n\n  const onToggleFolder = (evt: React.FormEvent) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    if (selectionToggle && selection) {\n      const checked = !selection(section.kind, section.uid);\n      selectionToggle(section.kind, section.uid);\n      const sub = results.value ?? [];\n      for (const item of sub) {\n        if (selection('dashboard', item.uid!) !== checked) {\n          selectionToggle('dashboard', item.uid!);\n        }\n      }\n    }\n  };\n\n  const id = useUniqueId();\n  const labelId = `section-header-label-${id}`;\n\n  let icon = section.icon;\n  if (!icon) {\n    icon = sectionExpanded ? 'folder-open' : 'folder';\n  }\n\n  const renderResults = () => {\n    if (!results.value) {\n      return null;\n    } else if (results.value.length === 0 && !results.loading) {\n      return (\n        <Card>\n          <Card.Heading>No results found</Card.Heading>\n        </Card>\n      );\n    }\n\n    return results.value.map((v) => {\n      if (selection && selectionToggle) {\n        const type = v.type === DashboardSearchItemType.DashFolder ? 'folder' : 'dashboard';\n        v = {\n          ...v,\n          checked: selection(type, v.uid!),\n        };\n      }\n      return (\n        <SearchItem\n          key={v.uid}\n          item={v}\n          onTagSelected={onTagSelected}\n          onToggleChecked={(item) => {\n            if (selectionToggle) {\n              selectionToggle('dashboard', item.uid!);\n            }\n          }}\n          editable={Boolean(selection != null)}\n        />\n      );\n    });\n  };\n\n  // Skip the folder wrapper\n  if (renderStandaloneBody) {\n    return (\n      <div className={styles.folderViewResults}>\n        {!results.value?.length && results.loading ? <Spinner className={styles.spinner} /> : renderResults()}\n      </div>\n    );\n  }\n\n  return (\n    <CollapsableSection\n      isOpen={sectionExpanded ?? false}\n      onToggle={onSectionExpand}\n      className={styles.wrapper}\n      contentClassName={styles.content}\n      loading={results.loading}\n      labelId={labelId}\n      label={\n        <>\n          {selectionToggle && selection && (\n            <div className={styles.checkbox} onClick={onToggleFolder}>\n              <Checkbox value={selection(section.kind, section.uid)} aria-label=\"Select folder\" />\n            </div>\n          )}\n\n          <div className={styles.icon}>\n            <Icon name={icon} />\n          </div>\n\n          <div className={styles.text}>\n            <span id={labelId}>{section.title}</span>\n            {section.url && section.uid !== 'general' && (\n              <a href={section.url} className={styles.link}>\n                <span className={styles.separator}>|</span> <Icon name=\"folder-upload\" /> Go to folder\n              </a>\n            )}\n          </div>\n        </>\n      }\n    >\n      {results.value && <ul className={styles.sectionItems}>{renderResults()}</ul>}\n    </CollapsableSection>\n  );\n};\n\nconst getSectionHeaderStyles = stylesFactory((theme: GrafanaTheme, selected = false, editable: boolean) => {\n  const { sm } = theme.spacing;\n  return {\n    wrapper: cx(\n      css`\n        align-items: center;\n        font-size: ${theme.typography.size.base};\n        padding: 12px;\n        border-bottom: none;\n        color: ${theme.colors.textWeak};\n        z-index: 1;\n\n        &:hover,\n        &.selected {\n          color: ${theme.colors.text};\n        }\n\n        &:hover,\n        &:focus-visible,\n        &:focus-within {\n          a {\n            opacity: 1;\n          }\n        }\n      `,\n      'pointer',\n      { selected }\n    ),\n    sectionItems: css`\n      margin: 0 24px 0 32px;\n    `,\n    checkbox: css`\n      padding: 0 ${sm} 0 0;\n    `,\n    icon: css`\n      padding: 0 ${sm} 0 ${editable ? 0 : sm};\n    `,\n    folderViewResults: css`\n      overflow: auto;\n    `,\n    text: css`\n      flex-grow: 1;\n      line-height: 24px;\n    `,\n    link: css`\n      padding: 2px 10px 0;\n      color: ${theme.colors.textWeak};\n      opacity: 0;\n      transition: opacity 150ms ease-in-out;\n    `,\n    separator: css`\n      margin-right: 6px;\n    `,\n    content: css`\n      padding-top: 0px;\n      padding-bottom: 0px;\n    `,\n    spinner: css`\n      display: grid;\n      place-content: center;\n      padding-bottom: 1rem;\n    `,\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}