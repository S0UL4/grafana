{"ast":null,"code":"import { cx } from '@emotion/css';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope } from '@react-aria/focus';\nimport { OverlayContainer, useOverlay } from '@react-aria/overlays';\nimport React, { useRef } from 'react';\nimport { useTheme2 } from '../../themes';\nimport { IconButton } from '../IconButton/IconButton';\nimport { HorizontalGroup } from '../Layout/Layout';\nimport { ModalHeader } from './ModalHeader';\nimport { getModalStyles } from './getModalStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function Modal(props) {\n  const {\n    title,\n    children,\n    isOpen = false,\n    closeOnEscape = true,\n    closeOnBackdropClick = true,\n    className,\n    contentClassName,\n    onDismiss,\n    onClickBackdrop,\n    trapFocus = true\n  } = props;\n  const theme = useTheme2();\n  const styles = getModalStyles(theme);\n  const ref = useRef(null); // Handle interacting outside the dialog and pressing\n  // the Escape key to close the modal.\n\n  const {\n    overlayProps,\n    underlayProps\n  } = useOverlay({\n    isKeyboardDismissDisabled: !closeOnEscape,\n    isOpen,\n    onClose: onDismiss\n  }, ref); // Get props for the dialog and its title\n\n  const {\n    dialogProps,\n    titleProps\n  } = useDialog({}, ref);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const headerClass = cx(styles.modalHeader, typeof title !== 'string' && styles.modalHeaderWithTabs);\n  return /*#__PURE__*/_jsxs(OverlayContainer, {\n    children: [/*#__PURE__*/_jsx(\"div\", Object.assign({\n      className: styles.modalBackdrop,\n      onClick: onClickBackdrop || (closeOnBackdropClick ? onDismiss : undefined)\n    }, underlayProps)), /*#__PURE__*/_jsx(FocusScope, {\n      contain: trapFocus,\n      autoFocus: true,\n      restoreFocus: true,\n      children: /*#__PURE__*/_jsxs(\"div\", Object.assign({\n        className: cx(styles.modal, className),\n        ref: ref\n      }, overlayProps, dialogProps, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: headerClass,\n          children: [typeof title === 'string' && /*#__PURE__*/_jsx(DefaultModalHeader, Object.assign({}, props, {\n            title: title,\n            id: titleProps.id\n          })), // FIXME: custom title components won't get an accessible title.\n          // Do we really want to support them or shall we just limit this ModalTabsHeader?\n          typeof title !== 'string' && title, /*#__PURE__*/_jsx(\"div\", {\n            className: styles.modalHeaderClose,\n            children: /*#__PURE__*/_jsx(IconButton, {\n              \"aria-label\": \"Close dialogue\",\n              name: \"times\",\n              size: \"xl\",\n              onClick: onDismiss\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: cx(styles.modalContent, contentClassName),\n          children: children\n        })]\n      }))\n    })]\n  });\n}\n\nfunction ModalButtonRow({\n  leftItems,\n  children\n}) {\n  const theme = useTheme2();\n  const styles = getModalStyles(theme);\n\n  if (leftItems) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: styles.modalButtonRow,\n      children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n        justify: \"space-between\",\n        children: [/*#__PURE__*/_jsx(HorizontalGroup, {\n          justify: \"flex-start\",\n          spacing: \"md\",\n          children: leftItems\n        }), /*#__PURE__*/_jsx(HorizontalGroup, {\n          justify: \"flex-end\",\n          spacing: \"md\",\n          children: children\n        })]\n      })\n    });\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.modalButtonRow,\n    children: /*#__PURE__*/_jsx(HorizontalGroup, {\n      justify: \"flex-end\",\n      spacing: \"md\",\n      children: children\n    })\n  });\n}\n\nModal.ButtonRow = ModalButtonRow;\n\nfunction DefaultModalHeader({\n  icon,\n  iconTooltip,\n  title,\n  id\n}) {\n  return /*#__PURE__*/_jsx(ModalHeader, {\n    icon: icon,\n    iconTooltip: iconTooltip,\n    title: title,\n    id: id\n  });\n}","map":{"version":3,"names":["cx","useDialog","FocusScope","OverlayContainer","useOverlay","React","useRef","useTheme2","IconButton","HorizontalGroup","ModalHeader","getModalStyles","Modal","props","title","children","isOpen","closeOnEscape","closeOnBackdropClick","className","contentClassName","onDismiss","onClickBackdrop","trapFocus","theme","styles","ref","overlayProps","underlayProps","isKeyboardDismissDisabled","onClose","dialogProps","titleProps","headerClass","modalHeader","modalHeaderWithTabs","modalBackdrop","undefined","modal","id","modalHeaderClose","modalContent","ModalButtonRow","leftItems","modalButtonRow","ButtonRow","DefaultModalHeader","icon","iconTooltip"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Modal/Modal.tsx"],"sourcesContent":["import { cx } from '@emotion/css';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope } from '@react-aria/focus';\nimport { OverlayContainer, useOverlay } from '@react-aria/overlays';\nimport React, { PropsWithChildren, useRef } from 'react';\n\nimport { useTheme2 } from '../../themes';\nimport { IconName } from '../../types';\nimport { IconButton } from '../IconButton/IconButton';\nimport { HorizontalGroup } from '../Layout/Layout';\n\nimport { ModalHeader } from './ModalHeader';\nimport { getModalStyles } from './getModalStyles';\n\nexport interface Props {\n  /** @deprecated no longer used */\n  icon?: IconName;\n  /** @deprecated no longer used */\n  iconTooltip?: string;\n  /** Title for the modal or custom header element */\n  title: string | JSX.Element;\n  className?: string;\n  contentClassName?: string;\n  closeOnEscape?: boolean;\n  closeOnBackdropClick?: boolean;\n  trapFocus?: boolean;\n\n  isOpen?: boolean;\n  onDismiss?: () => void;\n\n  /** If not set will call onDismiss if that is set. */\n  onClickBackdrop?: () => void;\n}\n\nexport function Modal(props: PropsWithChildren<Props>) {\n  const {\n    title,\n    children,\n    isOpen = false,\n    closeOnEscape = true,\n    closeOnBackdropClick = true,\n    className,\n    contentClassName,\n    onDismiss,\n    onClickBackdrop,\n    trapFocus = true,\n  } = props;\n  const theme = useTheme2();\n  const styles = getModalStyles(theme);\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  // Handle interacting outside the dialog and pressing\n  // the Escape key to close the modal.\n  const { overlayProps, underlayProps } = useOverlay(\n    { isKeyboardDismissDisabled: !closeOnEscape, isOpen, onClose: onDismiss },\n    ref\n  );\n\n  // Get props for the dialog and its title\n  const { dialogProps, titleProps } = useDialog({}, ref);\n\n  if (!isOpen) {\n    return null;\n  }\n\n  const headerClass = cx(styles.modalHeader, typeof title !== 'string' && styles.modalHeaderWithTabs);\n\n  return (\n    <OverlayContainer>\n      <div\n        className={styles.modalBackdrop}\n        onClick={onClickBackdrop || (closeOnBackdropClick ? onDismiss : undefined)}\n        {...underlayProps}\n      />\n      <FocusScope contain={trapFocus} autoFocus restoreFocus>\n        <div className={cx(styles.modal, className)} ref={ref} {...overlayProps} {...dialogProps}>\n          <div className={headerClass}>\n            {typeof title === 'string' && <DefaultModalHeader {...props} title={title} id={titleProps.id} />}\n            {\n              // FIXME: custom title components won't get an accessible title.\n              // Do we really want to support them or shall we just limit this ModalTabsHeader?\n              typeof title !== 'string' && title\n            }\n            <div className={styles.modalHeaderClose}>\n              <IconButton aria-label=\"Close dialogue\" name=\"times\" size=\"xl\" onClick={onDismiss} />\n            </div>\n          </div>\n          <div className={cx(styles.modalContent, contentClassName)}>{children}</div>\n        </div>\n      </FocusScope>\n    </OverlayContainer>\n  );\n}\n\nfunction ModalButtonRow({ leftItems, children }: { leftItems?: React.ReactNode; children: React.ReactNode }) {\n  const theme = useTheme2();\n  const styles = getModalStyles(theme);\n\n  if (leftItems) {\n    return (\n      <div className={styles.modalButtonRow}>\n        <HorizontalGroup justify=\"space-between\">\n          <HorizontalGroup justify=\"flex-start\" spacing=\"md\">\n            {leftItems}\n          </HorizontalGroup>\n          <HorizontalGroup justify=\"flex-end\" spacing=\"md\">\n            {children}\n          </HorizontalGroup>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.modalButtonRow}>\n      <HorizontalGroup justify=\"flex-end\" spacing=\"md\">\n        {children}\n      </HorizontalGroup>\n    </div>\n  );\n}\n\nModal.ButtonRow = ModalButtonRow;\n\ninterface DefaultModalHeaderProps {\n  id?: string;\n  title: string;\n  icon?: IconName;\n  iconTooltip?: string;\n}\n\nfunction DefaultModalHeader({ icon, iconTooltip, title, id }: DefaultModalHeaderProps): JSX.Element {\n  return <ModalHeader icon={icon} iconTooltip={iconTooltip} title={title} id={id} />;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}