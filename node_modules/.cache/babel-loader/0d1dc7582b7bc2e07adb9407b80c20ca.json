{"ast":null,"code":"var _Button;\n\nimport React from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Field, Input, Button, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { InnerBox, LoginLayout } from '../Login/LoginLayout';\nimport { PasswordField } from '../PasswordField/PasswordField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const SignupPage = props => {\n  const notifyApp = useAppNotification();\n\n  const onSubmit = async formData => {\n    if (formData.name === '') {\n      delete formData.name;\n    }\n\n    delete formData.confirm;\n    const response = await getBackendSrv().post('/api/user/signup/step2', {\n      email: formData.email,\n      code: formData.code,\n      username: formData.email,\n      orgName: formData.orgName,\n      password: formData.password,\n      name: formData.name\n    }).catch(err => {\n      var _err$data;\n\n      const msg = ((_err$data = err.data) === null || _err$data === void 0 ? void 0 : _err$data.message) || err;\n      notifyApp.warning(msg);\n    });\n\n    if (response.code === 'redirect-to-select-org') {\n      window.location.assign(getConfig().appSubUrl + '/profile/select-org?signup=1');\n    }\n\n    window.location.assign(getConfig().appSubUrl + '/');\n  };\n\n  const defaultValues = {\n    email: props.queryParams.email,\n    code: props.queryParams.code\n  };\n  return /*#__PURE__*/_jsx(LoginLayout, {\n    children: /*#__PURE__*/_jsx(InnerBox, {\n      children: /*#__PURE__*/_jsx(Form, {\n        defaultValues: defaultValues,\n        onSubmit: onSubmit,\n        children: ({\n          errors,\n          register,\n          getValues\n        }) => {\n          var _errors$email, _errors$password, _errors$confirm;\n\n          return /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Field, {\n              label: \"Your name\",\n              children: /*#__PURE__*/_jsx(Input, Object.assign({\n                id: \"user-name\"\n              }, register('name'), {\n                placeholder: \"(optional)\"\n              }))\n            }), /*#__PURE__*/_jsx(Field, {\n              label: \"Email\",\n              invalid: !!errors.email,\n              error: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message,\n              children: /*#__PURE__*/_jsx(Input, Object.assign({\n                id: \"email\"\n              }, register('email', {\n                required: 'Email is required',\n                pattern: {\n                  value: /^\\S+@\\S+$/,\n                  message: 'Email is invalid'\n                }\n              }), {\n                type: \"email\",\n                placeholder: \"Email\"\n              }))\n            }), !getConfig().autoAssignOrg && /*#__PURE__*/_jsx(Field, {\n              label: \"Org. name\",\n              children: /*#__PURE__*/_jsx(Input, Object.assign({\n                id: \"org-name\"\n              }, register('orgName'), {\n                placeholder: \"Org. name\"\n              }))\n            }), getConfig().verifyEmailEnabled && /*#__PURE__*/_jsx(Field, {\n              label: \"Email verification code (sent to your email)\",\n              children: /*#__PURE__*/_jsx(Input, Object.assign({\n                id: \"verification-code\"\n              }, register('code'), {\n                placeholder: \"Code\"\n              }))\n            }), /*#__PURE__*/_jsx(Field, {\n              label: \"Password\",\n              invalid: !!errors.password,\n              error: errors === null || errors === void 0 ? void 0 : (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message,\n              children: /*#__PURE__*/_jsx(PasswordField, Object.assign({\n                id: \"new-password\",\n                autoFocus: true,\n                autoComplete: \"new-password\"\n              }, register('password', {\n                required: 'Password is required'\n              })))\n            }), /*#__PURE__*/_jsx(Field, {\n              label: \"Confirm password\",\n              invalid: !!errors.confirm,\n              error: errors === null || errors === void 0 ? void 0 : (_errors$confirm = errors.confirm) === null || _errors$confirm === void 0 ? void 0 : _errors$confirm.message,\n              children: /*#__PURE__*/_jsx(PasswordField, Object.assign({\n                id: \"confirm-new-password\",\n                autoComplete: \"new-password\"\n              }, register('confirm', {\n                required: 'Confirmed password is required',\n                validate: v => v === getValues().password || 'Passwords must match!'\n              })))\n            }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n              children: [_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n                type: \"submit\",\n                children: \"Submit\"\n              })), /*#__PURE__*/_jsx(LinkButton, {\n                fill: \"text\",\n                href: getConfig().appSubUrl + '/login',\n                children: \"Back to login\"\n              })]\n            })]\n          });\n        }\n      })\n    })\n  });\n};\nexport default SignupPage;","map":{"version":3,"names":["React","getBackendSrv","Form","Field","Input","Button","HorizontalGroup","LinkButton","getConfig","useAppNotification","InnerBox","LoginLayout","PasswordField","SignupPage","props","notifyApp","onSubmit","formData","name","confirm","response","post","email","code","username","orgName","password","catch","err","msg","data","message","warning","window","location","assign","appSubUrl","defaultValues","queryParams","errors","register","getValues","required","pattern","value","autoAssignOrg","verifyEmailEnabled","validate","v"],"sources":["/home/soula/grafana/public/app/core/components/Signup/SignupPage.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Field, Input, Button, HorizontalGroup, LinkButton, FormAPI } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { InnerBox, LoginLayout } from '../Login/LoginLayout';\nimport { PasswordField } from '../PasswordField/PasswordField';\n\ninterface SignupDTO {\n  name?: string;\n  email: string;\n  username: string;\n  orgName?: string;\n  password: string;\n  code: string;\n  confirm?: string;\n}\n\ninterface QueryParams {\n  email?: string;\n  code?: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<{}, QueryParams> {}\n\nexport const SignupPage: FC<Props> = (props) => {\n  const notifyApp = useAppNotification();\n  const onSubmit = async (formData: SignupDTO) => {\n    if (formData.name === '') {\n      delete formData.name;\n    }\n    delete formData.confirm;\n\n    const response = await getBackendSrv()\n      .post('/api/user/signup/step2', {\n        email: formData.email,\n        code: formData.code,\n        username: formData.email,\n        orgName: formData.orgName,\n        password: formData.password,\n        name: formData.name,\n      })\n      .catch((err) => {\n        const msg = err.data?.message || err;\n        notifyApp.warning(msg);\n      });\n\n    if (response.code === 'redirect-to-select-org') {\n      window.location.assign(getConfig().appSubUrl + '/profile/select-org?signup=1');\n    }\n    window.location.assign(getConfig().appSubUrl + '/');\n  };\n\n  const defaultValues = {\n    email: props.queryParams.email,\n    code: props.queryParams.code,\n  };\n\n  return (\n    <LoginLayout>\n      <InnerBox>\n        <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n          {({ errors, register, getValues }: FormAPI<SignupDTO>) => (\n            <>\n              <Field label=\"Your name\">\n                <Input id=\"user-name\" {...register('name')} placeholder=\"(optional)\" />\n              </Field>\n              <Field label=\"Email\" invalid={!!errors.email} error={errors.email?.message}>\n                <Input\n                  id=\"email\"\n                  {...register('email', {\n                    required: 'Email is required',\n                    pattern: {\n                      value: /^\\S+@\\S+$/,\n                      message: 'Email is invalid',\n                    },\n                  })}\n                  type=\"email\"\n                  placeholder=\"Email\"\n                />\n              </Field>\n              {!getConfig().autoAssignOrg && (\n                <Field label=\"Org. name\">\n                  <Input id=\"org-name\" {...register('orgName')} placeholder=\"Org. name\" />\n                </Field>\n              )}\n              {getConfig().verifyEmailEnabled && (\n                <Field label=\"Email verification code (sent to your email)\">\n                  <Input id=\"verification-code\" {...register('code')} placeholder=\"Code\" />\n                </Field>\n              )}\n              <Field label=\"Password\" invalid={!!errors.password} error={errors?.password?.message}>\n                <PasswordField\n                  id=\"new-password\"\n                  autoFocus\n                  autoComplete=\"new-password\"\n                  {...register('password', { required: 'Password is required' })}\n                />\n              </Field>\n              <Field label=\"Confirm password\" invalid={!!errors.confirm} error={errors?.confirm?.message}>\n                <PasswordField\n                  id=\"confirm-new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('confirm', {\n                    required: 'Confirmed password is required',\n                    validate: (v) => v === getValues().password || 'Passwords must match!',\n                  })}\n                />\n              </Field>\n\n              <HorizontalGroup>\n                <Button type=\"submit\">Submit</Button>\n                <LinkButton fill=\"text\" href={getConfig().appSubUrl + '/login'}>\n                  Back to login\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          )}\n        </Form>\n      </InnerBox>\n    </LoginLayout>\n  );\n};\n\nexport default SignupPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}