{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { getDefaultTimeRange, LoadingState } from '@grafana/data';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { SHARED_DASHBOARD_QUERY } from './types';\nexport function isSharedDashboardQuery(datasource) {\n  if (!datasource) {\n    // default datasource\n    return false;\n  }\n\n  if (typeof datasource === 'string') {\n    return datasource === SHARED_DASHBOARD_QUERY;\n  }\n\n  if ('meta' in datasource) {\n    return datasource.meta.name === SHARED_DASHBOARD_QUERY || datasource.uid === SHARED_DASHBOARD_QUERY;\n  }\n\n  return datasource.uid === SHARED_DASHBOARD_QUERY;\n}\nexport function runSharedRequest(options) {\n  return new Observable(subscriber => {\n    const dashboard = getDashboardSrv().getCurrent();\n    const listenToPanelId = getPanelIdFromQuery(options.queries);\n\n    if (!listenToPanelId) {\n      subscriber.next(getQueryError('Missing panel reference ID'));\n      return undefined;\n    }\n\n    const listenToPanel = dashboard === null || dashboard === void 0 ? void 0 : dashboard.getPanelById(listenToPanelId);\n\n    if (!listenToPanel) {\n      subscriber.next(getQueryError('Unknown Panel: ' + listenToPanelId));\n      return undefined;\n    }\n\n    const listenToRunner = listenToPanel.getQueryRunner();\n    const subscription = listenToRunner.getData({\n      withTransforms: false,\n      withFieldConfig: false\n    }).subscribe({\n      next: data => {\n        subscriber.next(data);\n      }\n    }); // If we are in fullscreen the other panel will not execute any queries\n    // So we have to trigger it from here\n\n    if (!listenToPanel.isInView) {\n      const {\n        datasource,\n        targets\n      } = listenToPanel;\n      const modified = Object.assign({}, options, {\n        datasource,\n        panelId: listenToPanelId,\n        queries: targets\n      });\n      listenToRunner.run(modified);\n    }\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  });\n}\n\nfunction getPanelIdFromQuery(queries) {\n  if (!queries || !queries.length) {\n    return undefined;\n  }\n\n  return queries[0].panelId;\n}\n\nfunction getQueryError(msg) {\n  return {\n    state: LoadingState.Error,\n    series: [],\n    request: {},\n    error: {\n      message: msg\n    },\n    timeRange: getDefaultTimeRange()\n  };\n}","map":{"version":3,"names":["Observable","getDefaultTimeRange","LoadingState","getDashboardSrv","SHARED_DASHBOARD_QUERY","isSharedDashboardQuery","datasource","meta","name","uid","runSharedRequest","options","subscriber","dashboard","getCurrent","listenToPanelId","getPanelIdFromQuery","queries","next","getQueryError","undefined","listenToPanel","getPanelById","listenToRunner","getQueryRunner","subscription","getData","withTransforms","withFieldConfig","subscribe","data","isInView","targets","modified","panelId","run","unsubscribe","length","msg","state","Error","series","request","error","message","timeRange"],"sources":["/home/soula/grafana/public/app/plugins/datasource/dashboard/runSharedRequest.ts"],"sourcesContent":["import { Observable } from 'rxjs';\n\nimport {\n  DataQuery,\n  DataQueryRequest,\n  DataSourceApi,\n  DataSourceRef,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n} from '@grafana/data';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { QueryRunnerOptions } from 'app/features/query/state/PanelQueryRunner';\n\nimport { DashboardQuery, SHARED_DASHBOARD_QUERY } from './types';\n\nexport function isSharedDashboardQuery(datasource: string | DataSourceRef | DataSourceApi | null) {\n  if (!datasource) {\n    // default datasource\n    return false;\n  }\n\n  if (typeof datasource === 'string') {\n    return datasource === SHARED_DASHBOARD_QUERY;\n  }\n\n  if ('meta' in datasource) {\n    return datasource.meta.name === SHARED_DASHBOARD_QUERY || datasource.uid === SHARED_DASHBOARD_QUERY;\n  }\n\n  return datasource.uid === SHARED_DASHBOARD_QUERY;\n}\n\nexport function runSharedRequest(options: QueryRunnerOptions): Observable<PanelData> {\n  return new Observable<PanelData>((subscriber) => {\n    const dashboard = getDashboardSrv().getCurrent();\n    const listenToPanelId = getPanelIdFromQuery(options.queries);\n\n    if (!listenToPanelId) {\n      subscriber.next(getQueryError('Missing panel reference ID'));\n      return undefined;\n    }\n\n    const listenToPanel = dashboard?.getPanelById(listenToPanelId);\n\n    if (!listenToPanel) {\n      subscriber.next(getQueryError('Unknown Panel: ' + listenToPanelId));\n      return undefined;\n    }\n\n    const listenToRunner = listenToPanel.getQueryRunner();\n    const subscription = listenToRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n      next: (data: PanelData) => {\n        subscriber.next(data);\n      },\n    });\n\n    // If we are in fullscreen the other panel will not execute any queries\n    // So we have to trigger it from here\n    if (!listenToPanel.isInView) {\n      const { datasource, targets } = listenToPanel;\n      const modified = {\n        ...options,\n        datasource,\n        panelId: listenToPanelId,\n        queries: targets,\n      };\n      listenToRunner.run(modified);\n    }\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  });\n}\n\nfunction getPanelIdFromQuery(queries: DataQuery[]): number | undefined {\n  if (!queries || !queries.length) {\n    return undefined;\n  }\n  return (queries[0] as DashboardQuery).panelId;\n}\n\nfunction getQueryError(msg: string): PanelData {\n  return {\n    state: LoadingState.Error,\n    series: [],\n    request: {} as DataQueryRequest,\n    error: { message: msg },\n    timeRange: getDefaultTimeRange(),\n  };\n}\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,MAA3B;AAEA,SAKEC,mBALF,EAMEC,YANF,QAQO,eARP;AASA,SAASC,eAAT,QAAgC,8CAAhC;AAGA,SAAyBC,sBAAzB,QAAuD,SAAvD;AAEA,OAAO,SAASC,sBAAT,CAAgCC,UAAhC,EAA2F;EAChG,IAAI,CAACA,UAAL,EAAiB;IACf;IACA,OAAO,KAAP;EACD;;EAED,IAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;IAClC,OAAOA,UAAU,KAAKF,sBAAtB;EACD;;EAED,IAAI,UAAUE,UAAd,EAA0B;IACxB,OAAOA,UAAU,CAACC,IAAX,CAAgBC,IAAhB,KAAyBJ,sBAAzB,IAAmDE,UAAU,CAACG,GAAX,KAAmBL,sBAA7E;EACD;;EAED,OAAOE,UAAU,CAACG,GAAX,KAAmBL,sBAA1B;AACD;AAED,OAAO,SAASM,gBAAT,CAA0BC,OAA1B,EAA8E;EACnF,OAAO,IAAIX,UAAJ,CAA2BY,UAAD,IAAgB;IAC/C,MAAMC,SAAS,GAAGV,eAAe,GAAGW,UAAlB,EAAlB;IACA,MAAMC,eAAe,GAAGC,mBAAmB,CAACL,OAAO,CAACM,OAAT,CAA3C;;IAEA,IAAI,CAACF,eAAL,EAAsB;MACpBH,UAAU,CAACM,IAAX,CAAgBC,aAAa,CAAC,4BAAD,CAA7B;MACA,OAAOC,SAAP;IACD;;IAED,MAAMC,aAAa,GAAGR,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAES,YAAX,CAAwBP,eAAxB,CAAtB;;IAEA,IAAI,CAACM,aAAL,EAAoB;MAClBT,UAAU,CAACM,IAAX,CAAgBC,aAAa,CAAC,oBAAoBJ,eAArB,CAA7B;MACA,OAAOK,SAAP;IACD;;IAED,MAAMG,cAAc,GAAGF,aAAa,CAACG,cAAd,EAAvB;IACA,MAAMC,YAAY,GAAGF,cAAc,CAACG,OAAf,CAAuB;MAAEC,cAAc,EAAE,KAAlB;MAAyBC,eAAe,EAAE;IAA1C,CAAvB,EAA0EC,SAA1E,CAAoF;MACvGX,IAAI,EAAGY,IAAD,IAAqB;QACzBlB,UAAU,CAACM,IAAX,CAAgBY,IAAhB;MACD;IAHsG,CAApF,CAArB,CAjB+C,CAuB/C;IACA;;IACA,IAAI,CAACT,aAAa,CAACU,QAAnB,EAA6B;MAC3B,MAAM;QAAEzB,UAAF;QAAc0B;MAAd,IAA0BX,aAAhC;MACA,MAAMY,QAAQ,qBACTtB,OADS;QAEZL,UAFY;QAGZ4B,OAAO,EAAEnB,eAHG;QAIZE,OAAO,EAAEe;MAJG,EAAd;MAMAT,cAAc,CAACY,GAAf,CAAmBF,QAAnB;IACD;;IAED,OAAO,MAAM;MACXR,YAAY,CAACW,WAAb;IACD,CAFD;EAGD,CAvCM,CAAP;AAwCD;;AAED,SAASpB,mBAAT,CAA6BC,OAA7B,EAAuE;EACrE,IAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACoB,MAAzB,EAAiC;IAC/B,OAAOjB,SAAP;EACD;;EACD,OAAQH,OAAO,CAAC,CAAD,CAAR,CAA+BiB,OAAtC;AACD;;AAED,SAASf,aAAT,CAAuBmB,GAAvB,EAA+C;EAC7C,OAAO;IACLC,KAAK,EAAErC,YAAY,CAACsC,KADf;IAELC,MAAM,EAAE,EAFH;IAGLC,OAAO,EAAE,EAHJ;IAILC,KAAK,EAAE;MAAEC,OAAO,EAAEN;IAAX,CAJF;IAKLO,SAAS,EAAE5C,mBAAmB;EALzB,CAAP;AAOD"},"metadata":{},"sourceType":"module"}