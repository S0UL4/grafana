{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst DEFAULT_SYSTEM_DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';\nexport class SystemDateFormatsState {\n  constructor() {\n    _defineProperty(this, \"fullDate\", DEFAULT_SYSTEM_DATE_FORMAT);\n\n    _defineProperty(this, \"interval\", {\n      second: 'HH:mm:ss',\n      minute: 'HH:mm',\n      hour: 'MM/DD HH:mm',\n      day: 'MM/DD',\n      month: 'YYYY-MM',\n      year: 'YYYY'\n    });\n  }\n\n  update(settings) {\n    this.fullDate = settings.fullDate;\n    this.interval = settings.interval;\n\n    if (settings.useBrowserLocale) {\n      this.useBrowserLocale();\n    }\n  }\n\n  get fullDateMS() {\n    // Add millisecond to seconds part\n    return this.fullDate.replace('ss', 'ss.SSS');\n  }\n\n  useBrowserLocale() {\n    this.fullDate = localTimeFormat({\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n    this.interval.second = localTimeFormat({\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    }, null, this.interval.second);\n    this.interval.minute = localTimeFormat({\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    }, null, this.interval.minute);\n    this.interval.hour = localTimeFormat({\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    }, null, this.interval.hour);\n    this.interval.day = localTimeFormat({\n      month: '2-digit',\n      day: '2-digit',\n      hour12: false\n    }, null, this.interval.day);\n    this.interval.month = localTimeFormat({\n      year: 'numeric',\n      month: '2-digit',\n      hour12: false\n    }, null, this.interval.month);\n  }\n\n  getTimeFieldUnit(useMsResolution) {\n    return `time:${useMsResolution ? this.fullDateMS : this.fullDate}`;\n  }\n\n}\n/**\n * localTimeFormat helps to generate date formats for momentjs based on browser's locale\n *\n * @param locale browser locale, or default\n * @param options DateTimeFormatOptions to format date\n * @param fallback default format if Intl API is not present\n */\n\nexport function localTimeFormat(options, locale, fallback) {\n  if (missingIntlDateTimeFormatSupport()) {\n    return fallback !== null && fallback !== void 0 ? fallback : DEFAULT_SYSTEM_DATE_FORMAT;\n  }\n\n  if (!locale && navigator) {\n    locale = [...navigator.languages];\n  } // https://momentjs.com/docs/#/displaying/format/\n\n\n  const dateTimeFormat = new Intl.DateTimeFormat(locale || undefined, options);\n  const parts = dateTimeFormat.formatToParts(new Date());\n  const hour12 = dateTimeFormat.resolvedOptions().hour12;\n  const mapping = {\n    year: 'YYYY',\n    month: 'MM',\n    day: 'DD',\n    hour: hour12 ? 'hh' : 'HH',\n    minute: 'mm',\n    second: 'ss',\n    weekday: 'ddd',\n    era: 'N',\n    dayPeriod: 'A',\n    timeZoneName: 'Z'\n  };\n  return parts.map(part => mapping[part.type] || part.value).join('');\n}\nexport const systemDateFormats = new SystemDateFormatsState();\n\nconst missingIntlDateTimeFormatSupport = () => {\n  return !('DateTimeFormat' in Intl) || !('formatToParts' in Intl.DateTimeFormat.prototype);\n};","map":{"version":3,"names":["DEFAULT_SYSTEM_DATE_FORMAT","SystemDateFormatsState","second","minute","hour","day","month","year","update","settings","fullDate","interval","useBrowserLocale","fullDateMS","replace","localTimeFormat","hour12","getTimeFieldUnit","useMsResolution","options","locale","fallback","missingIntlDateTimeFormatSupport","navigator","languages","dateTimeFormat","Intl","DateTimeFormat","undefined","parts","formatToParts","Date","resolvedOptions","mapping","weekday","era","dayPeriod","timeZoneName","map","part","type","value","join","systemDateFormats","prototype"],"sources":["/home/soula/grafana/packages/grafana-data/src/datetime/formats.ts"],"sourcesContent":["export interface SystemDateFormatSettings {\n  fullDate: string;\n  interval: {\n    second: string;\n    minute: string;\n    hour: string;\n    day: string;\n    month: string;\n    year: string;\n  };\n  useBrowserLocale: boolean;\n}\n\nconst DEFAULT_SYSTEM_DATE_FORMAT = 'YYYY-MM-DD HH:mm:ss';\n\nexport class SystemDateFormatsState {\n  fullDate = DEFAULT_SYSTEM_DATE_FORMAT;\n  interval = {\n    second: 'HH:mm:ss',\n    minute: 'HH:mm',\n    hour: 'MM/DD HH:mm',\n    day: 'MM/DD',\n    month: 'YYYY-MM',\n    year: 'YYYY',\n  };\n\n  update(settings: SystemDateFormatSettings) {\n    this.fullDate = settings.fullDate;\n    this.interval = settings.interval;\n\n    if (settings.useBrowserLocale) {\n      this.useBrowserLocale();\n    }\n  }\n\n  get fullDateMS() {\n    // Add millisecond to seconds part\n    return this.fullDate.replace('ss', 'ss.SSS');\n  }\n\n  useBrowserLocale() {\n    this.fullDate = localTimeFormat({\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    });\n\n    this.interval.second = localTimeFormat(\n      { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false },\n      null,\n      this.interval.second\n    );\n    this.interval.minute = localTimeFormat(\n      { hour: '2-digit', minute: '2-digit', hour12: false },\n      null,\n      this.interval.minute\n    );\n    this.interval.hour = localTimeFormat(\n      { month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false },\n      null,\n      this.interval.hour\n    );\n    this.interval.day = localTimeFormat({ month: '2-digit', day: '2-digit', hour12: false }, null, this.interval.day);\n    this.interval.month = localTimeFormat(\n      { year: 'numeric', month: '2-digit', hour12: false },\n      null,\n      this.interval.month\n    );\n  }\n\n  getTimeFieldUnit(useMsResolution?: boolean) {\n    return `time:${useMsResolution ? this.fullDateMS : this.fullDate}`;\n  }\n}\n\n/**\n * localTimeFormat helps to generate date formats for momentjs based on browser's locale\n *\n * @param locale browser locale, or default\n * @param options DateTimeFormatOptions to format date\n * @param fallback default format if Intl API is not present\n */\nexport function localTimeFormat(\n  options: Intl.DateTimeFormatOptions,\n  locale?: string | string[] | null,\n  fallback?: string\n): string {\n  if (missingIntlDateTimeFormatSupport()) {\n    return fallback ?? DEFAULT_SYSTEM_DATE_FORMAT;\n  }\n\n  if (!locale && navigator) {\n    locale = [...navigator.languages];\n  }\n\n  // https://momentjs.com/docs/#/displaying/format/\n  const dateTimeFormat = new Intl.DateTimeFormat(locale || undefined, options);\n  const parts = dateTimeFormat.formatToParts(new Date());\n  const hour12 = dateTimeFormat.resolvedOptions().hour12;\n\n  const mapping: { [key: string]: string } = {\n    year: 'YYYY',\n    month: 'MM',\n    day: 'DD',\n    hour: hour12 ? 'hh' : 'HH',\n    minute: 'mm',\n    second: 'ss',\n    weekday: 'ddd',\n    era: 'N',\n    dayPeriod: 'A',\n    timeZoneName: 'Z',\n  };\n\n  return parts.map((part) => mapping[part.type] || part.value).join('');\n}\n\nexport const systemDateFormats = new SystemDateFormatsState();\n\nconst missingIntlDateTimeFormatSupport = (): boolean => {\n  return !('DateTimeFormat' in Intl) || !('formatToParts' in Intl.DateTimeFormat.prototype);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}