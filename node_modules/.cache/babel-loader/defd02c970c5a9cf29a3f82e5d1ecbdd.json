{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { map, without } from 'lodash';\nimport { getValueFormats } from '@grafana/data';\nexport class ColumnOptionsCtrl {\n  /** @ngInject */\n  constructor($scope) {\n    _defineProperty(this, \"panel\", void 0);\n\n    _defineProperty(this, \"panelCtrl\", void 0);\n\n    _defineProperty(this, \"colorModes\", void 0);\n\n    _defineProperty(this, \"columnStyles\", void 0);\n\n    _defineProperty(this, \"columnTypes\", void 0);\n\n    _defineProperty(this, \"fontSizes\", void 0);\n\n    _defineProperty(this, \"dateFormats\", void 0);\n\n    _defineProperty(this, \"addColumnSegment\", void 0);\n\n    _defineProperty(this, \"unitFormats\", void 0);\n\n    _defineProperty(this, \"getColumnNames\", void 0);\n\n    _defineProperty(this, \"activeStyleIndex\", void 0);\n\n    _defineProperty(this, \"mappingTypes\", void 0);\n\n    _defineProperty(this, \"alignTypes\", void 0);\n\n    $scope.editor = this;\n    this.activeStyleIndex = 0;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.unitFormats = getValueFormats();\n    this.colorModes = [{\n      text: 'Disabled',\n      value: null\n    }, {\n      text: 'Cell',\n      value: 'cell'\n    }, {\n      text: 'Value',\n      value: 'value'\n    }, {\n      text: 'Row',\n      value: 'row'\n    }];\n    this.columnTypes = [{\n      text: 'Number',\n      value: 'number'\n    }, {\n      text: 'String',\n      value: 'string'\n    }, {\n      text: 'Date',\n      value: 'date'\n    }, {\n      text: 'Hidden',\n      value: 'hidden'\n    }];\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.dateFormats = [{\n      text: 'YYYY-MM-DD HH:mm:ss',\n      value: 'YYYY-MM-DD HH:mm:ss'\n    }, {\n      text: 'YYYY-MM-DD HH:mm:ss.SSS',\n      value: 'YYYY-MM-DD HH:mm:ss.SSS'\n    }, {\n      text: 'MM/DD/YY h:mm:ss a',\n      value: 'MM/DD/YY h:mm:ss a'\n    }, {\n      text: 'MMMM D, YYYY LT',\n      value: 'MMMM D, YYYY LT'\n    }, {\n      text: 'YYYY-MM-DD',\n      value: 'YYYY-MM-DD'\n    }];\n    this.mappingTypes = [{\n      text: 'Value to text',\n      value: 1\n    }, {\n      text: 'Range to text',\n      value: 2\n    }];\n    this.alignTypes = ColumnOptionsCtrl.alignTypesEnum;\n\n    this.getColumnNames = () => {\n      if (!this.panelCtrl.table) {\n        return [];\n      }\n\n      return map(this.panelCtrl.table.columns, col => {\n        return col.text;\n      });\n    };\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  setUnitFormat(column) {\n    return value => {\n      column.unit = value;\n      this.panelCtrl.render();\n    };\n  }\n\n  addColumnStyle() {\n    const newStyleRule = {\n      unit: 'short',\n      type: 'number',\n      alias: '',\n      decimals: 2,\n      colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n      colorMode: null,\n      pattern: '',\n      dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      thresholds: [],\n      mappingType: 1,\n      align: 'auto'\n    };\n    const styles = this.panel.styles;\n    const stylesCount = styles.length;\n    let indexToInsert = stylesCount; // check if last is a catch all rule, then add it before that one\n\n    if (stylesCount > 0) {\n      const last = styles[stylesCount - 1];\n\n      if (last.pattern === '/.*/') {\n        indexToInsert = stylesCount - 1;\n      }\n    }\n\n    styles.splice(indexToInsert, 0, newStyleRule);\n    this.activeStyleIndex = indexToInsert;\n  }\n\n  removeColumnStyle(style) {\n    this.panel.styles = without(this.panel.styles, style);\n  }\n\n  invertColorOrder(index) {\n    const ref = this.panel.styles[index].colors;\n    const copy = ref[0];\n    ref[0] = ref[2];\n    ref[2] = copy;\n    this.panelCtrl.render();\n  }\n\n  onColorChange(style, colorIndex) {\n    return newColor => {\n      style.colors[colorIndex] = newColor;\n      this.render();\n    };\n  }\n\n  addValueMap(style) {\n    if (!style.valueMaps) {\n      style.valueMaps = [];\n    }\n\n    style.valueMaps.push({\n      value: '',\n      text: ''\n    });\n    this.panelCtrl.render();\n  }\n\n  removeValueMap(style, index) {\n    style.valueMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  addRangeMap(style) {\n    if (!style.rangeMaps) {\n      style.rangeMaps = [];\n    }\n\n    style.rangeMaps.push({\n      from: '',\n      to: '',\n      text: ''\n    });\n    this.panelCtrl.render();\n  }\n\n  removeRangeMap(style, index) {\n    style.rangeMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n}\nColumnOptionsCtrl.$inject = [\"$scope\"];\n\n_defineProperty(ColumnOptionsCtrl, \"alignTypesEnum\", [{\n  text: 'auto',\n  value: ''\n}, {\n  text: 'left',\n  value: 'left'\n}, {\n  text: 'center',\n  value: 'center'\n}, {\n  text: 'right',\n  value: 'right'\n}]);\n\nexport function columnOptionsTab() {\n  'use strict';\n\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table-old/column_options.html',\n    controller: ColumnOptionsCtrl\n  };\n}","map":{"version":3,"names":["map","without","getValueFormats","ColumnOptionsCtrl","constructor","$scope","editor","activeStyleIndex","panelCtrl","ctrl","panel","unitFormats","colorModes","text","value","columnTypes","fontSizes","dateFormats","mappingTypes","alignTypes","alignTypesEnum","getColumnNames","table","columns","col","onColorChange","bind","render","setUnitFormat","column","unit","addColumnStyle","newStyleRule","type","alias","decimals","colors","colorMode","pattern","dateFormat","thresholds","mappingType","align","styles","stylesCount","length","indexToInsert","last","splice","removeColumnStyle","style","invertColorOrder","index","ref","copy","colorIndex","newColor","addValueMap","valueMaps","push","removeValueMap","addRangeMap","rangeMaps","from","to","removeRangeMap","columnOptionsTab","restrict","scope","templateUrl","controller"],"sources":["/home/soula/grafana/public/app/plugins/panel/table-old/column_options.ts"],"sourcesContent":["import { map, without } from 'lodash';\n\nimport { getValueFormats } from '@grafana/data';\n\nexport class ColumnOptionsCtrl {\n  panel: any;\n  panelCtrl: any;\n  colorModes: any;\n  columnStyles: any;\n  columnTypes: any;\n  fontSizes: any;\n  dateFormats: any;\n  addColumnSegment: any;\n  unitFormats: any;\n  getColumnNames: any;\n  activeStyleIndex: number;\n  mappingTypes: any;\n\n  alignTypes: any;\n  static readonly alignTypesEnum = [\n    { text: 'auto', value: '' },\n    { text: 'left', value: 'left' },\n    { text: 'center', value: 'center' },\n    { text: 'right', value: 'right' },\n  ];\n\n  /** @ngInject */\n  constructor($scope: any) {\n    $scope.editor = this;\n\n    this.activeStyleIndex = 0;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.unitFormats = getValueFormats();\n    this.colorModes = [\n      { text: 'Disabled', value: null },\n      { text: 'Cell', value: 'cell' },\n      { text: 'Value', value: 'value' },\n      { text: 'Row', value: 'row' },\n    ];\n    this.columnTypes = [\n      { text: 'Number', value: 'number' },\n      { text: 'String', value: 'string' },\n      { text: 'Date', value: 'date' },\n      { text: 'Hidden', value: 'hidden' },\n    ];\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.dateFormats = [\n      { text: 'YYYY-MM-DD HH:mm:ss', value: 'YYYY-MM-DD HH:mm:ss' },\n      { text: 'YYYY-MM-DD HH:mm:ss.SSS', value: 'YYYY-MM-DD HH:mm:ss.SSS' },\n      { text: 'MM/DD/YY h:mm:ss a', value: 'MM/DD/YY h:mm:ss a' },\n      { text: 'MMMM D, YYYY LT', value: 'MMMM D, YYYY LT' },\n      { text: 'YYYY-MM-DD', value: 'YYYY-MM-DD' },\n    ];\n    this.mappingTypes = [\n      { text: 'Value to text', value: 1 },\n      { text: 'Range to text', value: 2 },\n    ];\n    this.alignTypes = ColumnOptionsCtrl.alignTypesEnum;\n\n    this.getColumnNames = () => {\n      if (!this.panelCtrl.table) {\n        return [];\n      }\n      return map(this.panelCtrl.table.columns, (col: any) => {\n        return col.text;\n      });\n    };\n\n    this.onColorChange = this.onColorChange.bind(this);\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  setUnitFormat(column: any) {\n    return (value: any) => {\n      column.unit = value;\n      this.panelCtrl.render();\n    };\n  }\n\n  addColumnStyle() {\n    const newStyleRule: object = {\n      unit: 'short',\n      type: 'number',\n      alias: '',\n      decimals: 2,\n      colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n      colorMode: null,\n      pattern: '',\n      dateFormat: 'YYYY-MM-DD HH:mm:ss',\n      thresholds: [],\n      mappingType: 1,\n      align: 'auto',\n    };\n\n    const styles = this.panel.styles;\n    const stylesCount = styles.length;\n    let indexToInsert = stylesCount;\n\n    // check if last is a catch all rule, then add it before that one\n    if (stylesCount > 0) {\n      const last = styles[stylesCount - 1];\n      if (last.pattern === '/.*/') {\n        indexToInsert = stylesCount - 1;\n      }\n    }\n\n    styles.splice(indexToInsert, 0, newStyleRule);\n    this.activeStyleIndex = indexToInsert;\n  }\n\n  removeColumnStyle(style: any) {\n    this.panel.styles = without(this.panel.styles, style);\n  }\n\n  invertColorOrder(index: number) {\n    const ref = this.panel.styles[index].colors;\n    const copy = ref[0];\n    ref[0] = ref[2];\n    ref[2] = copy;\n    this.panelCtrl.render();\n  }\n\n  onColorChange(style: any, colorIndex: number) {\n    return (newColor: string) => {\n      style.colors[colorIndex] = newColor;\n      this.render();\n    };\n  }\n\n  addValueMap(style: any) {\n    if (!style.valueMaps) {\n      style.valueMaps = [];\n    }\n    style.valueMaps.push({ value: '', text: '' });\n    this.panelCtrl.render();\n  }\n\n  removeValueMap(style: any, index: number) {\n    style.valueMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  addRangeMap(style: any) {\n    if (!style.rangeMaps) {\n      style.rangeMaps = [];\n    }\n    style.rangeMaps.push({ from: '', to: '', text: '' });\n    this.panelCtrl.render();\n  }\n\n  removeRangeMap(style: any, index: number) {\n    style.rangeMaps.splice(index, 1);\n    this.panelCtrl.render();\n  }\n}\n\nexport function columnOptionsTab() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table-old/column_options.html',\n    controller: ColumnOptionsCtrl,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}