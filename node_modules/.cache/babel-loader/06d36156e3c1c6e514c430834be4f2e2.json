{"ast":null,"code":"import React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InspectStatsTable } from './InspectStatsTable';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const InspectStatsTab = ({\n  data,\n  timeZone\n}) => {\n  var _data$timings;\n\n  if (!data.request) {\n    return null;\n  }\n\n  let stats = [];\n  const requestTime = data.request.endTime ? data.request.endTime - data.request.startTime : -1;\n  const processingTime = ((_data$timings = data.timings) === null || _data$timings === void 0 ? void 0 : _data$timings.dataProcessingTime) || -1;\n  let dataRows = 0;\n\n  for (const frame of data.series) {\n    dataRows += frame.length;\n  }\n\n  if (requestTime > 0) {\n    stats.push({\n      displayName: 'Total request time',\n      value: requestTime,\n      unit: 'ms'\n    });\n  }\n\n  if (processingTime > 0) {\n    stats.push({\n      displayName: 'Data processing time',\n      value: processingTime,\n      unit: 'ms'\n    });\n  }\n\n  stats.push({\n    displayName: 'Number of queries',\n    value: data.request.targets.length\n  });\n  stats.push({\n    displayName: 'Total number rows',\n    value: dataRows\n  });\n  let dataStats = [];\n\n  for (const series of data.series) {\n    if (series.meta && series.meta.stats) {\n      dataStats = dataStats.concat(series.meta.stats);\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    \"aria-label\": selectors.components.PanelInspector.Stats.content,\n    children: [/*#__PURE__*/_jsx(InspectStatsTable, {\n      timeZone: timeZone,\n      name: 'Stats',\n      stats: stats\n    }), /*#__PURE__*/_jsx(InspectStatsTable, {\n      timeZone: timeZone,\n      name: 'Data source stats',\n      stats: dataStats\n    })]\n  });\n};","map":{"version":3,"names":["React","selectors","InspectStatsTable","InspectStatsTab","data","timeZone","request","stats","requestTime","endTime","startTime","processingTime","timings","dataProcessingTime","dataRows","frame","series","length","push","displayName","value","unit","targets","dataStats","meta","concat","components","PanelInspector","Stats","content"],"sources":["/home/soula/grafana/public/app/features/inspector/InspectStatsTab.tsx"],"sourcesContent":["import React from 'react';\n\nimport { PanelData, QueryResultMetaStat, TimeZone } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { InspectStatsTable } from './InspectStatsTable';\n\ninterface InspectStatsTabProps {\n  data: PanelData;\n  timeZone: TimeZone;\n}\n\nexport const InspectStatsTab: React.FC<InspectStatsTabProps> = ({ data, timeZone }) => {\n  if (!data.request) {\n    return null;\n  }\n\n  let stats: QueryResultMetaStat[] = [];\n\n  const requestTime = data.request.endTime ? data.request.endTime - data.request.startTime : -1;\n  const processingTime = data.timings?.dataProcessingTime || -1;\n  let dataRows = 0;\n\n  for (const frame of data.series) {\n    dataRows += frame.length;\n  }\n\n  if (requestTime > 0) {\n    stats.push({ displayName: 'Total request time', value: requestTime, unit: 'ms' });\n  }\n  if (processingTime > 0) {\n    stats.push({ displayName: 'Data processing time', value: processingTime, unit: 'ms' });\n  }\n  stats.push({ displayName: 'Number of queries', value: data.request.targets.length });\n  stats.push({ displayName: 'Total number rows', value: dataRows });\n\n  let dataStats: QueryResultMetaStat[] = [];\n\n  for (const series of data.series) {\n    if (series.meta && series.meta.stats) {\n      dataStats = dataStats.concat(series.meta.stats);\n    }\n  }\n\n  return (\n    <div aria-label={selectors.components.PanelInspector.Stats.content}>\n      <InspectStatsTable timeZone={timeZone} name={'Stats'} stats={stats} />\n      <InspectStatsTable timeZone={timeZone} name={'Data source stats'} stats={dataStats} />\n    </div>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,SAAT,QAA0B,wBAA1B;AAEA,SAASC,iBAAT,QAAkC,qBAAlC;;;AAOA,OAAO,MAAMC,eAA+C,GAAG,CAAC;EAAEC,IAAF;EAAQC;AAAR,CAAD,KAAwB;EAAA;;EACrF,IAAI,CAACD,IAAI,CAACE,OAAV,EAAmB;IACjB,OAAO,IAAP;EACD;;EAED,IAAIC,KAA4B,GAAG,EAAnC;EAEA,MAAMC,WAAW,GAAGJ,IAAI,CAACE,OAAL,CAAaG,OAAb,GAAuBL,IAAI,CAACE,OAAL,CAAaG,OAAb,GAAuBL,IAAI,CAACE,OAAL,CAAaI,SAA3D,GAAuE,CAAC,CAA5F;EACA,MAAMC,cAAc,GAAG,kBAAAP,IAAI,CAACQ,OAAL,gEAAcC,kBAAd,KAAoC,CAAC,CAA5D;EACA,IAAIC,QAAQ,GAAG,CAAf;;EAEA,KAAK,MAAMC,KAAX,IAAoBX,IAAI,CAACY,MAAzB,EAAiC;IAC/BF,QAAQ,IAAIC,KAAK,CAACE,MAAlB;EACD;;EAED,IAAIT,WAAW,GAAG,CAAlB,EAAqB;IACnBD,KAAK,CAACW,IAAN,CAAW;MAAEC,WAAW,EAAE,oBAAf;MAAqCC,KAAK,EAAEZ,WAA5C;MAAyDa,IAAI,EAAE;IAA/D,CAAX;EACD;;EACD,IAAIV,cAAc,GAAG,CAArB,EAAwB;IACtBJ,KAAK,CAACW,IAAN,CAAW;MAAEC,WAAW,EAAE,sBAAf;MAAuCC,KAAK,EAAET,cAA9C;MAA8DU,IAAI,EAAE;IAApE,CAAX;EACD;;EACDd,KAAK,CAACW,IAAN,CAAW;IAAEC,WAAW,EAAE,mBAAf;IAAoCC,KAAK,EAAEhB,IAAI,CAACE,OAAL,CAAagB,OAAb,CAAqBL;EAAhE,CAAX;EACAV,KAAK,CAACW,IAAN,CAAW;IAAEC,WAAW,EAAE,mBAAf;IAAoCC,KAAK,EAAEN;EAA3C,CAAX;EAEA,IAAIS,SAAgC,GAAG,EAAvC;;EAEA,KAAK,MAAMP,MAAX,IAAqBZ,IAAI,CAACY,MAA1B,EAAkC;IAChC,IAAIA,MAAM,CAACQ,IAAP,IAAeR,MAAM,CAACQ,IAAP,CAAYjB,KAA/B,EAAsC;MACpCgB,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAiBT,MAAM,CAACQ,IAAP,CAAYjB,KAA7B,CAAZ;IACD;EACF;;EAED,oBACE;IAAK,cAAYN,SAAS,CAACyB,UAAV,CAAqBC,cAArB,CAAoCC,KAApC,CAA0CC,OAA3D;IAAA,wBACE,KAAC,iBAAD;MAAmB,QAAQ,EAAExB,QAA7B;MAAuC,IAAI,EAAE,OAA7C;MAAsD,KAAK,EAAEE;IAA7D,EADF,eAEE,KAAC,iBAAD;MAAmB,QAAQ,EAAEF,QAA7B;MAAuC,IAAI,EAAE,mBAA7C;MAAkE,KAAK,EAAEkB;IAAzE,EAFF;EAAA,EADF;AAMD,CAtCM"},"metadata":{},"sourceType":"module"}