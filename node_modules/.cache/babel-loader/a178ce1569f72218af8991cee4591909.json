{"ast":null,"code":"import { isString as _isString } from 'lodash';\nimport { AppEvents, rangeUtil, dateMath } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport appEvents from 'app/core/app_events';\nimport config from 'app/core/config';\nimport { LS_PANEL_COPY_KEY, PANEL_BORDER } from 'app/core/constants';\nimport store from 'app/core/store';\nimport { ShareModal } from 'app/features/dashboard/components/ShareModal';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { AddLibraryPanelModal } from 'app/features/library-panels/components/AddLibraryPanelModal/AddLibraryPanelModal';\nimport { UnlinkModal } from 'app/features/library-panels/components/UnlinkModal/UnlinkModal';\nimport { cleanUpPanelState } from 'app/features/panel/state/actions';\nimport { dispatch } from 'app/store/store';\nimport { ShowConfirmModalEvent, ShowModalReactEvent } from '../../../types/events';\nexport const removePanel = (dashboard, panel, ask) => {\n  // confirm deletion\n  if (ask !== false) {\n    const text2 = panel.alert && !config.unifiedAlertingEnabled ? 'Panel includes an alert rule. removing the panel will also remove the alert rule' : undefined;\n    const confirmText = panel.alert ? 'YES' : undefined;\n    appEvents.publish(new ShowConfirmModalEvent({\n      title: 'Remove panel',\n      text: 'Are you sure you want to remove this panel?',\n      text2: text2,\n      icon: 'trash-alt',\n      confirmText: confirmText,\n      yesText: 'Remove',\n      onConfirm: () => removePanel(dashboard, panel, false)\n    }));\n    return;\n  }\n\n  dashboard.removePanel(panel);\n  dispatch(cleanUpPanelState(panel.key));\n};\nexport const duplicatePanel = (dashboard, panel) => {\n  dashboard.duplicatePanel(panel);\n};\nexport const copyPanel = panel => {\n  let saveModel = panel;\n\n  if (panel instanceof PanelModel) {\n    saveModel = panel.getSaveModel();\n  }\n\n  store.set(LS_PANEL_COPY_KEY, JSON.stringify(saveModel));\n  appEvents.emit(AppEvents.alertSuccess, ['Panel copied. Click **Add panel** icon to paste.']);\n};\nexport const sharePanel = (dashboard, panel) => {\n  appEvents.publish(new ShowModalReactEvent({\n    component: ShareModal,\n    props: {\n      dashboard: dashboard,\n      panel: panel\n    }\n  }));\n};\nexport const addLibraryPanel = (dashboard, panel) => {\n  appEvents.publish(new ShowModalReactEvent({\n    component: AddLibraryPanelModal,\n    props: {\n      panel,\n      initialFolderId: dashboard.meta.folderId,\n      isOpen: true\n    }\n  }));\n};\nexport const unlinkLibraryPanel = panel => {\n  appEvents.publish(new ShowModalReactEvent({\n    component: UnlinkModal,\n    props: {\n      onConfirm: () => {\n        delete panel.libraryPanel;\n        panel.render();\n      },\n      isOpen: true\n    }\n  }));\n};\nexport const refreshPanel = panel => {\n  panel.refresh();\n};\nexport const toggleLegend = panel => {\n  console.warn('Toggle legend is not implemented yet'); // We need to set panel.legend defaults first\n  // panel.legend.show = !panel.legend.show;\n\n  refreshPanel(panel);\n};\nexport function applyPanelTimeOverrides(panel, timeRange) {\n  const newTimeData = {\n    timeInfo: '',\n    timeRange: timeRange\n  };\n\n  if (panel.timeFrom) {\n    const timeFromInterpolated = getTemplateSrv().replace(panel.timeFrom, panel.scopedVars);\n    const timeFromInfo = rangeUtil.describeTextRange(timeFromInterpolated);\n\n    if (timeFromInfo.invalid) {\n      newTimeData.timeInfo = 'invalid time override';\n      return newTimeData;\n    }\n\n    if (_isString(timeRange.raw.from)) {\n      const timeFromDate = dateMath.parse(timeFromInfo.from);\n      newTimeData.timeInfo = timeFromInfo.display;\n      newTimeData.timeRange = {\n        from: timeFromDate,\n        to: dateMath.parse(timeFromInfo.to),\n        raw: {\n          from: timeFromInfo.from,\n          to: timeFromInfo.to\n        }\n      };\n    }\n  }\n\n  if (panel.timeShift) {\n    const timeShiftInterpolated = getTemplateSrv().replace(panel.timeShift, panel.scopedVars);\n    const timeShiftInfo = rangeUtil.describeTextRange(timeShiftInterpolated);\n\n    if (timeShiftInfo.invalid) {\n      newTimeData.timeInfo = 'invalid timeshift';\n      return newTimeData;\n    }\n\n    const timeShift = '-' + timeShiftInterpolated;\n    newTimeData.timeInfo += ' timeshift ' + timeShift;\n    const from = dateMath.parseDateMath(timeShift, newTimeData.timeRange.from, false);\n    const to = dateMath.parseDateMath(timeShift, newTimeData.timeRange.to, true);\n    newTimeData.timeRange = {\n      from,\n      to,\n      raw: {\n        from,\n        to\n      }\n    };\n  }\n\n  if (panel.hideTimeOverride) {\n    newTimeData.timeInfo = '';\n  }\n\n  return newTimeData;\n}\nexport function getResolution(panel) {\n  const htmlEl = document.getElementsByTagName('html')[0];\n  const width = htmlEl.getBoundingClientRect().width; // https://stackoverflow.com/a/21454625\n\n  return panel.maxDataPoints ? panel.maxDataPoints : Math.ceil(width * (panel.gridPos.w / 24));\n}\nexport function calculateInnerPanelHeight(panel, containerHeight) {\n  const chromePadding = panel.plugin && panel.plugin.noPadding ? 0 : config.theme.panelPadding * 2;\n  const headerHeight = panel.hasTitle() ? config.theme.panelHeaderHeight : 0;\n  return containerHeight - headerHeight - chromePadding - PANEL_BORDER;\n}","map":{"version":3,"names":["isString","_isString","AppEvents","rangeUtil","dateMath","getTemplateSrv","appEvents","config","LS_PANEL_COPY_KEY","PANEL_BORDER","store","ShareModal","PanelModel","AddLibraryPanelModal","UnlinkModal","cleanUpPanelState","dispatch","ShowConfirmModalEvent","ShowModalReactEvent","removePanel","dashboard","panel","ask","text2","alert","unifiedAlertingEnabled","undefined","confirmText","publish","title","text","icon","yesText","onConfirm","key","duplicatePanel","copyPanel","saveModel","getSaveModel","set","JSON","stringify","emit","alertSuccess","sharePanel","component","props","addLibraryPanel","initialFolderId","meta","folderId","isOpen","unlinkLibraryPanel","libraryPanel","render","refreshPanel","refresh","toggleLegend","console","warn","applyPanelTimeOverrides","timeRange","newTimeData","timeInfo","timeFrom","timeFromInterpolated","replace","scopedVars","timeFromInfo","describeTextRange","invalid","raw","from","timeFromDate","parse","display","to","timeShift","timeShiftInterpolated","timeShiftInfo","parseDateMath","hideTimeOverride","getResolution","htmlEl","document","getElementsByTagName","width","getBoundingClientRect","maxDataPoints","Math","ceil","gridPos","w","calculateInnerPanelHeight","containerHeight","chromePadding","plugin","noPadding","theme","panelPadding","headerHeight","hasTitle","panelHeaderHeight"],"sources":["/home/soula/grafana/public/app/features/dashboard/utils/panel.ts"],"sourcesContent":["import { isString as _isString } from 'lodash';\n\nimport { TimeRange, AppEvents, rangeUtil, dateMath, PanelModel as IPanelModel } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport appEvents from 'app/core/app_events';\nimport config from 'app/core/config';\nimport { LS_PANEL_COPY_KEY, PANEL_BORDER } from 'app/core/constants';\nimport store from 'app/core/store';\nimport { ShareModal } from 'app/features/dashboard/components/ShareModal';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { AddLibraryPanelModal } from 'app/features/library-panels/components/AddLibraryPanelModal/AddLibraryPanelModal';\nimport { UnlinkModal } from 'app/features/library-panels/components/UnlinkModal/UnlinkModal';\nimport { cleanUpPanelState } from 'app/features/panel/state/actions';\nimport { dispatch } from 'app/store/store';\n\nimport { ShowConfirmModalEvent, ShowModalReactEvent } from '../../../types/events';\n\nexport const removePanel = (dashboard: DashboardModel, panel: PanelModel, ask: boolean) => {\n  // confirm deletion\n  if (ask !== false) {\n    const text2 =\n      panel.alert && !config.unifiedAlertingEnabled\n        ? 'Panel includes an alert rule. removing the panel will also remove the alert rule'\n        : undefined;\n    const confirmText = panel.alert ? 'YES' : undefined;\n\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Remove panel',\n        text: 'Are you sure you want to remove this panel?',\n        text2: text2,\n        icon: 'trash-alt',\n        confirmText: confirmText,\n        yesText: 'Remove',\n        onConfirm: () => removePanel(dashboard, panel, false),\n      })\n    );\n    return;\n  }\n\n  dashboard.removePanel(panel);\n  dispatch(cleanUpPanelState(panel.key));\n};\n\nexport const duplicatePanel = (dashboard: DashboardModel, panel: PanelModel) => {\n  dashboard.duplicatePanel(panel);\n};\n\nexport const copyPanel = (panel: IPanelModel) => {\n  let saveModel = panel;\n  if (panel instanceof PanelModel) {\n    saveModel = panel.getSaveModel();\n  }\n\n  store.set(LS_PANEL_COPY_KEY, JSON.stringify(saveModel));\n  appEvents.emit(AppEvents.alertSuccess, ['Panel copied. Click **Add panel** icon to paste.']);\n};\n\nexport const sharePanel = (dashboard: DashboardModel, panel: PanelModel) => {\n  appEvents.publish(\n    new ShowModalReactEvent({\n      component: ShareModal,\n      props: {\n        dashboard: dashboard,\n        panel: panel,\n      },\n    })\n  );\n};\n\nexport const addLibraryPanel = (dashboard: DashboardModel, panel: PanelModel) => {\n  appEvents.publish(\n    new ShowModalReactEvent({\n      component: AddLibraryPanelModal,\n      props: {\n        panel,\n        initialFolderId: dashboard.meta.folderId,\n        isOpen: true,\n      },\n    })\n  );\n};\n\nexport const unlinkLibraryPanel = (panel: PanelModel) => {\n  appEvents.publish(\n    new ShowModalReactEvent({\n      component: UnlinkModal,\n      props: {\n        onConfirm: () => {\n          delete panel.libraryPanel;\n          panel.render();\n        },\n        isOpen: true,\n      },\n    })\n  );\n};\n\nexport const refreshPanel = (panel: PanelModel) => {\n  panel.refresh();\n};\n\nexport const toggleLegend = (panel: PanelModel) => {\n  console.warn('Toggle legend is not implemented yet');\n  // We need to set panel.legend defaults first\n  // panel.legend.show = !panel.legend.show;\n  refreshPanel(panel);\n};\n\nexport interface TimeOverrideResult {\n  timeRange: TimeRange;\n  timeInfo: string;\n}\n\nexport function applyPanelTimeOverrides(panel: PanelModel, timeRange: TimeRange): TimeOverrideResult {\n  const newTimeData = {\n    timeInfo: '',\n    timeRange: timeRange,\n  };\n\n  if (panel.timeFrom) {\n    const timeFromInterpolated = getTemplateSrv().replace(panel.timeFrom, panel.scopedVars);\n    const timeFromInfo = rangeUtil.describeTextRange(timeFromInterpolated);\n    if (timeFromInfo.invalid) {\n      newTimeData.timeInfo = 'invalid time override';\n      return newTimeData;\n    }\n\n    if (_isString(timeRange.raw.from)) {\n      const timeFromDate = dateMath.parse(timeFromInfo.from)!;\n      newTimeData.timeInfo = timeFromInfo.display;\n      newTimeData.timeRange = {\n        from: timeFromDate,\n        to: dateMath.parse(timeFromInfo.to)!,\n        raw: {\n          from: timeFromInfo.from,\n          to: timeFromInfo.to,\n        },\n      };\n    }\n  }\n\n  if (panel.timeShift) {\n    const timeShiftInterpolated = getTemplateSrv().replace(panel.timeShift, panel.scopedVars);\n    const timeShiftInfo = rangeUtil.describeTextRange(timeShiftInterpolated);\n    if (timeShiftInfo.invalid) {\n      newTimeData.timeInfo = 'invalid timeshift';\n      return newTimeData;\n    }\n\n    const timeShift = '-' + timeShiftInterpolated;\n    newTimeData.timeInfo += ' timeshift ' + timeShift;\n    const from = dateMath.parseDateMath(timeShift, newTimeData.timeRange.from, false)!;\n    const to = dateMath.parseDateMath(timeShift, newTimeData.timeRange.to, true)!;\n\n    newTimeData.timeRange = {\n      from,\n      to,\n      raw: {\n        from,\n        to,\n      },\n    };\n  }\n\n  if (panel.hideTimeOverride) {\n    newTimeData.timeInfo = '';\n  }\n\n  return newTimeData;\n}\n\nexport function getResolution(panel: PanelModel): number {\n  const htmlEl = document.getElementsByTagName('html')[0];\n  const width = htmlEl.getBoundingClientRect().width; // https://stackoverflow.com/a/21454625\n\n  return panel.maxDataPoints ? panel.maxDataPoints : Math.ceil(width * (panel.gridPos.w / 24));\n}\n\nexport function calculateInnerPanelHeight(panel: PanelModel, containerHeight: number): number {\n  const chromePadding = panel.plugin && panel.plugin.noPadding ? 0 : config.theme.panelPadding * 2;\n  const headerHeight = panel.hasTitle() ? config.theme.panelHeaderHeight : 0;\n  return containerHeight - headerHeight - chromePadding - PANEL_BORDER;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,SAArB,QAAsC,QAAtC;AAEA,SAAoBC,SAApB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAAqF,eAArF;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,UAAT,QAA2B,8CAA3B;AAEA,SAASC,UAAT,QAA2B,yCAA3B;AACA,SAASC,oBAAT,QAAqC,kFAArC;AACA,SAASC,WAAT,QAA4B,gEAA5B;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,uBAA3D;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,SAAD,EAA4BC,KAA5B,EAA+CC,GAA/C,KAAgE;EACzF;EACA,IAAIA,GAAG,KAAK,KAAZ,EAAmB;IACjB,MAAMC,KAAK,GACTF,KAAK,CAACG,KAAN,IAAe,CAACjB,MAAM,CAACkB,sBAAvB,GACI,kFADJ,GAEIC,SAHN;IAIA,MAAMC,WAAW,GAAGN,KAAK,CAACG,KAAN,GAAc,KAAd,GAAsBE,SAA1C;IAEApB,SAAS,CAACsB,OAAV,CACE,IAAIX,qBAAJ,CAA0B;MACxBY,KAAK,EAAE,cADiB;MAExBC,IAAI,EAAE,6CAFkB;MAGxBP,KAAK,EAAEA,KAHiB;MAIxBQ,IAAI,EAAE,WAJkB;MAKxBJ,WAAW,EAAEA,WALW;MAMxBK,OAAO,EAAE,QANe;MAOxBC,SAAS,EAAE,MAAMd,WAAW,CAACC,SAAD,EAAYC,KAAZ,EAAmB,KAAnB;IAPJ,CAA1B,CADF;IAWA;EACD;;EAEDD,SAAS,CAACD,WAAV,CAAsBE,KAAtB;EACAL,QAAQ,CAACD,iBAAiB,CAACM,KAAK,CAACa,GAAP,CAAlB,CAAR;AACD,CAzBM;AA2BP,OAAO,MAAMC,cAAc,GAAG,CAACf,SAAD,EAA4BC,KAA5B,KAAkD;EAC9ED,SAAS,CAACe,cAAV,CAAyBd,KAAzB;AACD,CAFM;AAIP,OAAO,MAAMe,SAAS,GAAIf,KAAD,IAAwB;EAC/C,IAAIgB,SAAS,GAAGhB,KAAhB;;EACA,IAAIA,KAAK,YAAYT,UAArB,EAAiC;IAC/ByB,SAAS,GAAGhB,KAAK,CAACiB,YAAN,EAAZ;EACD;;EAED5B,KAAK,CAAC6B,GAAN,CAAU/B,iBAAV,EAA6BgC,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAA7B;EACA/B,SAAS,CAACoC,IAAV,CAAexC,SAAS,CAACyC,YAAzB,EAAuC,CAAC,kDAAD,CAAvC;AACD,CARM;AAUP,OAAO,MAAMC,UAAU,GAAG,CAACxB,SAAD,EAA4BC,KAA5B,KAAkD;EAC1Ef,SAAS,CAACsB,OAAV,CACE,IAAIV,mBAAJ,CAAwB;IACtB2B,SAAS,EAAElC,UADW;IAEtBmC,KAAK,EAAE;MACL1B,SAAS,EAAEA,SADN;MAELC,KAAK,EAAEA;IAFF;EAFe,CAAxB,CADF;AASD,CAVM;AAYP,OAAO,MAAM0B,eAAe,GAAG,CAAC3B,SAAD,EAA4BC,KAA5B,KAAkD;EAC/Ef,SAAS,CAACsB,OAAV,CACE,IAAIV,mBAAJ,CAAwB;IACtB2B,SAAS,EAAEhC,oBADW;IAEtBiC,KAAK,EAAE;MACLzB,KADK;MAEL2B,eAAe,EAAE5B,SAAS,CAAC6B,IAAV,CAAeC,QAF3B;MAGLC,MAAM,EAAE;IAHH;EAFe,CAAxB,CADF;AAUD,CAXM;AAaP,OAAO,MAAMC,kBAAkB,GAAI/B,KAAD,IAAuB;EACvDf,SAAS,CAACsB,OAAV,CACE,IAAIV,mBAAJ,CAAwB;IACtB2B,SAAS,EAAE/B,WADW;IAEtBgC,KAAK,EAAE;MACLb,SAAS,EAAE,MAAM;QACf,OAAOZ,KAAK,CAACgC,YAAb;QACAhC,KAAK,CAACiC,MAAN;MACD,CAJI;MAKLH,MAAM,EAAE;IALH;EAFe,CAAxB,CADF;AAYD,CAbM;AAeP,OAAO,MAAMI,YAAY,GAAIlC,KAAD,IAAuB;EACjDA,KAAK,CAACmC,OAAN;AACD,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAIpC,KAAD,IAAuB;EACjDqC,OAAO,CAACC,IAAR,CAAa,sCAAb,EADiD,CAEjD;EACA;;EACAJ,YAAY,CAAClC,KAAD,CAAZ;AACD,CALM;AAYP,OAAO,SAASuC,uBAAT,CAAiCvC,KAAjC,EAAoDwC,SAApD,EAA8F;EACnG,MAAMC,WAAW,GAAG;IAClBC,QAAQ,EAAE,EADQ;IAElBF,SAAS,EAAEA;EAFO,CAApB;;EAKA,IAAIxC,KAAK,CAAC2C,QAAV,EAAoB;IAClB,MAAMC,oBAAoB,GAAG5D,cAAc,GAAG6D,OAAjB,CAAyB7C,KAAK,CAAC2C,QAA/B,EAAyC3C,KAAK,CAAC8C,UAA/C,CAA7B;IACA,MAAMC,YAAY,GAAGjE,SAAS,CAACkE,iBAAV,CAA4BJ,oBAA5B,CAArB;;IACA,IAAIG,YAAY,CAACE,OAAjB,EAA0B;MACxBR,WAAW,CAACC,QAAZ,GAAuB,uBAAvB;MACA,OAAOD,WAAP;IACD;;IAED,IAAI7D,SAAS,CAAC4D,SAAS,CAACU,GAAV,CAAcC,IAAf,CAAb,EAAmC;MACjC,MAAMC,YAAY,GAAGrE,QAAQ,CAACsE,KAAT,CAAeN,YAAY,CAACI,IAA5B,CAArB;MACAV,WAAW,CAACC,QAAZ,GAAuBK,YAAY,CAACO,OAApC;MACAb,WAAW,CAACD,SAAZ,GAAwB;QACtBW,IAAI,EAAEC,YADgB;QAEtBG,EAAE,EAAExE,QAAQ,CAACsE,KAAT,CAAeN,YAAY,CAACQ,EAA5B,CAFkB;QAGtBL,GAAG,EAAE;UACHC,IAAI,EAAEJ,YAAY,CAACI,IADhB;UAEHI,EAAE,EAAER,YAAY,CAACQ;QAFd;MAHiB,CAAxB;IAQD;EACF;;EAED,IAAIvD,KAAK,CAACwD,SAAV,EAAqB;IACnB,MAAMC,qBAAqB,GAAGzE,cAAc,GAAG6D,OAAjB,CAAyB7C,KAAK,CAACwD,SAA/B,EAA0CxD,KAAK,CAAC8C,UAAhD,CAA9B;IACA,MAAMY,aAAa,GAAG5E,SAAS,CAACkE,iBAAV,CAA4BS,qBAA5B,CAAtB;;IACA,IAAIC,aAAa,CAACT,OAAlB,EAA2B;MACzBR,WAAW,CAACC,QAAZ,GAAuB,mBAAvB;MACA,OAAOD,WAAP;IACD;;IAED,MAAMe,SAAS,GAAG,MAAMC,qBAAxB;IACAhB,WAAW,CAACC,QAAZ,IAAwB,gBAAgBc,SAAxC;IACA,MAAML,IAAI,GAAGpE,QAAQ,CAAC4E,aAAT,CAAuBH,SAAvB,EAAkCf,WAAW,CAACD,SAAZ,CAAsBW,IAAxD,EAA8D,KAA9D,CAAb;IACA,MAAMI,EAAE,GAAGxE,QAAQ,CAAC4E,aAAT,CAAuBH,SAAvB,EAAkCf,WAAW,CAACD,SAAZ,CAAsBe,EAAxD,EAA4D,IAA5D,CAAX;IAEAd,WAAW,CAACD,SAAZ,GAAwB;MACtBW,IADsB;MAEtBI,EAFsB;MAGtBL,GAAG,EAAE;QACHC,IADG;QAEHI;MAFG;IAHiB,CAAxB;EAQD;;EAED,IAAIvD,KAAK,CAAC4D,gBAAV,EAA4B;IAC1BnB,WAAW,CAACC,QAAZ,GAAuB,EAAvB;EACD;;EAED,OAAOD,WAAP;AACD;AAED,OAAO,SAASoB,aAAT,CAAuB7D,KAAvB,EAAkD;EACvD,MAAM8D,MAAM,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAAf;EACA,MAAMC,KAAK,GAAGH,MAAM,CAACI,qBAAP,GAA+BD,KAA7C,CAFuD,CAEH;;EAEpD,OAAOjE,KAAK,CAACmE,aAAN,GAAsBnE,KAAK,CAACmE,aAA5B,GAA4CC,IAAI,CAACC,IAAL,CAAUJ,KAAK,IAAIjE,KAAK,CAACsE,OAAN,CAAcC,CAAd,GAAkB,EAAtB,CAAf,CAAnD;AACD;AAED,OAAO,SAASC,yBAAT,CAAmCxE,KAAnC,EAAsDyE,eAAtD,EAAuF;EAC5F,MAAMC,aAAa,GAAG1E,KAAK,CAAC2E,MAAN,IAAgB3E,KAAK,CAAC2E,MAAN,CAAaC,SAA7B,GAAyC,CAAzC,GAA6C1F,MAAM,CAAC2F,KAAP,CAAaC,YAAb,GAA4B,CAA/F;EACA,MAAMC,YAAY,GAAG/E,KAAK,CAACgF,QAAN,KAAmB9F,MAAM,CAAC2F,KAAP,CAAaI,iBAAhC,GAAoD,CAAzE;EACA,OAAOR,eAAe,GAAGM,YAAlB,GAAiCL,aAAjC,GAAiDtF,YAAxD;AACD"},"metadata":{},"sourceType":"module"}