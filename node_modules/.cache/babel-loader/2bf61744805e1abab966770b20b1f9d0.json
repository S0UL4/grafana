{"ast":null,"code":"import { Registry } from '@grafana/data';\nimport { xyzTiles, defaultXYZConfig } from './generic';\nconst CUSTOM_SERVICE = 'custom';\nconst DEFAULT_SERVICE = 'streets';\nexport const publicServiceRegistry = new Registry(() => [{\n  id: DEFAULT_SERVICE,\n  name: 'World Street Map',\n  slug: 'World_Street_Map'\n}, {\n  id: 'world-imagery',\n  name: 'World Imagery',\n  slug: 'World_Imagery'\n}, {\n  id: 'world-physical',\n  name: 'World Physical',\n  slug: 'World_Physical_Map'\n}, {\n  id: 'topo',\n  name: 'Topographic',\n  slug: 'World_Topo_Map'\n}, {\n  id: 'usa-topo',\n  name: 'USA Topographic',\n  slug: 'USA_Topo_Maps'\n}, {\n  id: 'ocean',\n  name: 'World Ocean',\n  slug: 'Ocean/World_Ocean_Base'\n}, {\n  id: CUSTOM_SERVICE,\n  name: 'Custom MapServer',\n  description: 'Use a custom MapServer with pre-cached values',\n  slug: ''\n}]);\nexport const esriXYZTiles = {\n  id: 'esri-xyz',\n  name: 'ArcGIS MapServer',\n  description: 'Add layer from an ESRI ArcGIS MapServer',\n  isBaseMap: true,\n  create: async (map, options, eventBus, theme) => {\n    var _cfg$server;\n\n    const cfg = Object.assign({}, options.config);\n    const svc = publicServiceRegistry.getIfExists((_cfg$server = cfg.server) !== null && _cfg$server !== void 0 ? _cfg$server : DEFAULT_SERVICE);\n\n    if (svc.id !== CUSTOM_SERVICE) {\n      const base = 'https://services.arcgisonline.com/ArcGIS/rest/services/';\n      cfg.url = `${base}${svc.slug}/MapServer/tile/{z}/{y}/{x}`;\n      cfg.attribution = `Tiles © <a href=\"${base}${svc.slug}/MapServer\">ArcGIS</a>`;\n    }\n\n    const opts = Object.assign({}, options, {\n      config: cfg\n    });\n    return xyzTiles.create(map, opts, eventBus, theme).then(xyz => {\n      xyz.registerOptionsUI = builder => {\n        builder.addSelect({\n          path: 'config.server',\n          name: 'Server instance',\n          settings: {\n            options: publicServiceRegistry.selectOptions().options\n          }\n        }).addTextInput({\n          path: 'config.url',\n          name: 'URL template',\n          description: 'Must include {x}, {y} or {-y}, and {z} placeholders',\n          settings: {\n            placeholder: defaultXYZConfig.url\n          },\n          showIf: cfg => {\n            var _cfg$config;\n\n            return ((_cfg$config = cfg.config) === null || _cfg$config === void 0 ? void 0 : _cfg$config.server) === CUSTOM_SERVICE;\n          }\n        }).addTextInput({\n          path: 'config.attribution',\n          name: 'Attribution',\n          settings: {\n            placeholder: defaultXYZConfig.attribution\n          },\n          showIf: cfg => {\n            var _cfg$config2;\n\n            return ((_cfg$config2 = cfg.config) === null || _cfg$config2 === void 0 ? void 0 : _cfg$config2.server) === CUSTOM_SERVICE;\n          }\n        });\n      };\n\n      return xyz;\n    });\n  },\n  defaultOptions: {\n    server: DEFAULT_SERVICE\n  }\n};\nexport const esriLayers = [esriXYZTiles];","map":{"version":3,"names":["Registry","xyzTiles","defaultXYZConfig","CUSTOM_SERVICE","DEFAULT_SERVICE","publicServiceRegistry","id","name","slug","description","esriXYZTiles","isBaseMap","create","map","options","eventBus","theme","cfg","config","svc","getIfExists","server","base","url","attribution","opts","then","xyz","registerOptionsUI","builder","addSelect","path","settings","selectOptions","addTextInput","placeholder","showIf","defaultOptions","esriLayers"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/layers/basemaps/esri.ts"],"sourcesContent":["import Map from 'ol/Map';\n\nimport { MapLayerRegistryItem, MapLayerOptions, GrafanaTheme2, RegistryItem, Registry, EventBus } from '@grafana/data';\n\nimport { xyzTiles, defaultXYZConfig, XYZConfig } from './generic';\n\ninterface PublicServiceItem extends RegistryItem {\n  slug: string;\n}\n\nconst CUSTOM_SERVICE = 'custom';\nconst DEFAULT_SERVICE = 'streets';\n\nexport const publicServiceRegistry = new Registry<PublicServiceItem>(() => [\n  {\n    id: DEFAULT_SERVICE,\n    name: 'World Street Map',\n    slug: 'World_Street_Map',\n  },\n  {\n    id: 'world-imagery',\n    name: 'World Imagery',\n    slug: 'World_Imagery',\n  },\n  {\n    id: 'world-physical',\n    name: 'World Physical',\n    slug: 'World_Physical_Map',\n  },\n  {\n    id: 'topo',\n    name: 'Topographic',\n    slug: 'World_Topo_Map',\n  },\n  {\n    id: 'usa-topo',\n    name: 'USA Topographic',\n    slug: 'USA_Topo_Maps',\n  },\n  {\n    id: 'ocean',\n    name: 'World Ocean',\n    slug: 'Ocean/World_Ocean_Base',\n  },\n  {\n    id: CUSTOM_SERVICE,\n    name: 'Custom MapServer',\n    description: 'Use a custom MapServer with pre-cached values',\n    slug: '',\n  },\n]);\n\nexport interface ESRIXYZConfig extends XYZConfig {\n  server: string;\n}\n\nexport const esriXYZTiles: MapLayerRegistryItem<ESRIXYZConfig> = {\n  id: 'esri-xyz',\n  name: 'ArcGIS MapServer',\n  description: 'Add layer from an ESRI ArcGIS MapServer',\n  isBaseMap: true,\n\n  create: async (map: Map, options: MapLayerOptions<ESRIXYZConfig>, eventBus: EventBus, theme: GrafanaTheme2) => {\n    const cfg = { ...options.config };\n    const svc = publicServiceRegistry.getIfExists(cfg.server ?? DEFAULT_SERVICE)!;\n    if (svc.id !== CUSTOM_SERVICE) {\n      const base = 'https://services.arcgisonline.com/ArcGIS/rest/services/';\n      cfg.url = `${base}${svc.slug}/MapServer/tile/{z}/{y}/{x}`;\n      cfg.attribution = `Tiles © <a href=\"${base}${svc.slug}/MapServer\">ArcGIS</a>`;\n    }\n    const opts = { ...options, config: cfg as XYZConfig };\n    return xyzTiles.create(map, opts, eventBus, theme).then((xyz) => {\n      xyz.registerOptionsUI = (builder) => {\n        builder\n          .addSelect({\n            path: 'config.server',\n            name: 'Server instance',\n            settings: {\n              options: publicServiceRegistry.selectOptions().options,\n            },\n          })\n          .addTextInput({\n            path: 'config.url',\n            name: 'URL template',\n            description: 'Must include {x}, {y} or {-y}, and {z} placeholders',\n            settings: {\n              placeholder: defaultXYZConfig.url,\n            },\n            showIf: (cfg) => cfg.config?.server === CUSTOM_SERVICE,\n          })\n          .addTextInput({\n            path: 'config.attribution',\n            name: 'Attribution',\n            settings: {\n              placeholder: defaultXYZConfig.attribution,\n            },\n            showIf: (cfg) => cfg.config?.server === CUSTOM_SERVICE,\n          });\n      };\n      return xyz;\n    });\n  },\n\n  defaultOptions: {\n    server: DEFAULT_SERVICE,\n  },\n};\n\nexport const esriLayers = [esriXYZTiles];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}