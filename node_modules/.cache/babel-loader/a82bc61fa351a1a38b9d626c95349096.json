{"ast":null,"code":"var _HorizontalGroup, _Badge, _br, _br2;\n\nimport { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Badge, ConfirmModal, HorizontalGroup, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport kbn from 'app/core/utils/kbn';\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { deleteRulesGroupAction } from '../../state/actions';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\nimport { ActionIcon } from './ActionIcon';\nimport { EditCloudGroupModal } from './EditCloudGroupModal';\nimport { RuleStats } from './RuleStats';\nimport { RulesTable } from './RulesTable';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const RulesGroup = /*#__PURE__*/React.memo(({\n  group,\n  namespace,\n  expandAll\n}) => {\n  var _group$rules$;\n\n  const {\n    rulesSource\n  } = namespace;\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n  const {\n    canEditRules\n  } = useRulesAccess();\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n  const hasRuler = useHasRuler();\n  const rulerRule = (_group$rules$ = group.rules[0]) === null || _group$rules$ === void 0 ? void 0 : _group$rules$.rulerRule;\n  const folderUID = rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid || undefined;\n  const {\n    folder\n  } = useFolder(folderUID); // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n\n  const isDeleting = hasRuler(rulesSource) && !group.rules.find(rule => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  const deleteGroup = () => {\n    dispatch(deleteRulesGroupAction(namespace, group));\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons = []; // for grafana, link to folder views\n\n  if (isDeleting) {\n    actionIcons.push(_HorizontalGroup || (_HorizontalGroup = /*#__PURE__*/_jsxs(HorizontalGroup, {\n      children: [/*#__PURE__*/_jsx(Spinner, {}), \"deleting\"]\n    }, \"is-deleting\")));\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = `/dashboards/f/${folderUID}/${kbn.slugifyForUrl(namespace.name)}`;\n\n      if (folder !== null && folder !== void 0 && folder.canSave) {\n        actionIcons.push( /*#__PURE__*/_jsx(ActionIcon, {\n          \"aria-label\": \"edit folder\",\n          icon: \"pen\",\n          tooltip: \"edit folder\",\n          to: baseUrl + '/settings',\n          target: \"__blank\"\n        }, \"edit\"));\n      }\n\n      if (folder !== null && folder !== void 0 && folder.canAdmin) {\n        actionIcons.push( /*#__PURE__*/_jsx(ActionIcon, {\n          \"aria-label\": \"manage permissions\",\n          icon: \"lock\",\n          tooltip: \"manage permissions\",\n          to: baseUrl + '/permissions',\n          target: \"__blank\"\n        }, \"manage-perms\"));\n      }\n    }\n  } else if (canEditRules(rulesSource.name) && hasRuler(rulesSource)) {\n    if (!isFederated) {\n      actionIcons.push( /*#__PURE__*/_jsx(ActionIcon, {\n        \"aria-label\": \"edit rule group\",\n        \"data-testid\": \"edit-group\",\n        icon: \"pen\",\n        tooltip: \"edit rule group\",\n        onClick: () => setIsEditingGroup(true)\n      }, \"edit\"));\n    }\n\n    actionIcons.push( /*#__PURE__*/_jsx(ActionIcon, {\n      \"aria-label\": \"delete rule group\",\n      \"data-testid\": \"delete-group\",\n      icon: \"trash-alt\",\n      tooltip: \"delete rule group\",\n      onClick: () => setIsDeletingGroup(true)\n    }, \"delete-group\"));\n  } // ungrouped rules are rules that are in the \"default\" group name\n\n\n  const isUngrouped = group.name === 'default';\n  const groupName = isUngrouped ? /*#__PURE__*/_jsx(RuleLocation, {\n    namespace: namespace.name\n  }) : /*#__PURE__*/_jsx(RuleLocation, {\n    namespace: namespace.name,\n    group: group.name\n  });\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.wrapper,\n    \"data-testid\": \"rule-group\",\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.header,\n      \"data-testid\": \"rule-group-header\",\n      children: [/*#__PURE__*/_jsx(CollapseToggle, {\n        className: styles.collapseToggle,\n        isCollapsed: isCollapsed,\n        onToggle: setIsCollapsed,\n        \"data-testid\": \"group-collapse-toggle\"\n      }), /*#__PURE__*/_jsx(Icon, {\n        name: isCollapsed ? 'folder' : 'folder-open'\n      }), isCloudRulesSource(rulesSource) && /*#__PURE__*/_jsx(Tooltip, {\n        content: rulesSource.name,\n        placement: \"top\",\n        children: /*#__PURE__*/_jsx(\"img\", {\n          alt: rulesSource.meta.name,\n          className: styles.dataSourceIcon,\n          src: rulesSource.meta.info.logos.small\n        })\n      }), /*#__PURE__*/_jsxs(\"h6\", {\n        className: styles.heading,\n        children: [isFederated && (_Badge || (_Badge = /*#__PURE__*/_jsx(Badge, {\n          color: \"purple\",\n          text: \"Federated\"\n        }))), \" \", groupName]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.spacer\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.headerStats,\n        children: /*#__PURE__*/_jsx(RuleStats, {\n          showInactive: false,\n          group: group\n        })\n      }), !!actionIcons.length && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: styles.actionsSeparator,\n          children: \"|\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.actionIcons,\n          children: actionIcons\n        })]\n      })]\n    }), !isCollapsed && /*#__PURE__*/_jsx(RulesTable, {\n      showSummaryColumn: true,\n      className: styles.rulesTable,\n      showGuidelines: true,\n      rules: group.rules\n    }), isEditingGroup && /*#__PURE__*/_jsx(EditCloudGroupModal, {\n      group: group,\n      namespace: namespace,\n      onClose: () => setIsEditingGroup(false)\n    }), /*#__PURE__*/_jsx(ConfirmModal, {\n      isOpen: isDeletingGroup,\n      title: \"Delete group\",\n      body: /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"Deleting this group will permanently remove the group\", _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), \"and \", group.rules.length, \" alert \", pluralize('rule', group.rules.length), \" belonging to it.\", _br2 || (_br2 = /*#__PURE__*/_jsx(\"br\", {})), \"Are you sure you want to delete this group?\"]\n      }),\n      onConfirm: deleteGroup,\n      onDismiss: () => setIsDeletingGroup(false),\n      confirmText: \"Delete\"\n    })]\n  });\n});\nRulesGroup.displayName = 'RulesGroup';\nexport const getStyles = theme => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n    flex-wrap: wrap;\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n\n    ${theme.breakpoints.down('sm')} {\n      order: 2;\n      width: 100%;\n      padding-left: ${theme.spacing(1)};\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `\n});","map":{"version":3,"names":["css","pluralize","React","useEffect","useState","useDispatch","Badge","ConfirmModal","HorizontalGroup","Icon","Spinner","Tooltip","useStyles2","kbn","useFolder","useHasRuler","deleteRulesGroupAction","useRulesAccess","GRAFANA_RULES_SOURCE_NAME","isCloudRulesSource","isFederatedRuleGroup","isGrafanaRulerRule","CollapseToggle","RuleLocation","ActionIcon","EditCloudGroupModal","RuleStats","RulesTable","RulesGroup","memo","group","namespace","expandAll","rulesSource","dispatch","styles","getStyles","isEditingGroup","setIsEditingGroup","isDeletingGroup","setIsDeletingGroup","isCollapsed","setIsCollapsed","canEditRules","hasRuler","rulerRule","rules","folderUID","grafana_alert","namespace_uid","undefined","folder","isDeleting","find","rule","isFederated","deleteGroup","actionIcons","push","baseUrl","slugifyForUrl","name","canSave","canAdmin","isUngrouped","groupName","wrapper","header","collapseToggle","meta","dataSourceIcon","info","logos","small","heading","spacer","headerStats","length","actionsSeparator","rulesTable","displayName","theme","spacing","colors","background","secondary","breakpoints","down","dataSourceOrigin","text","disabled"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rules/RulesGroup.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, ConfirmModal, HorizontalGroup, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport kbn from 'app/core/utils/kbn';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { deleteRulesGroupAction } from '../../state/actions';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\n\nimport { ActionIcon } from './ActionIcon';\nimport { EditCloudGroupModal } from './EditCloudGroupModal';\nimport { RuleStats } from './RuleStats';\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n}\n\nexport const RulesGroup: FC<Props> = React.memo(({ group, namespace, expandAll }) => {\n  const { rulesSource } = namespace;\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  const { canEditRules } = useRulesAccess();\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const hasRuler = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting = hasRuler(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  const deleteGroup = () => {\n    dispatch(deleteRulesGroupAction(namespace, group));\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <HorizontalGroup key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = `/dashboards/f/${folderUID}/${kbn.slugifyForUrl(namespace.name)}`;\n      if (folder?.canSave) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"edit folder\"\n            key=\"edit\"\n            icon=\"pen\"\n            tooltip=\"edit folder\"\n            to={baseUrl + '/settings'}\n            target=\"__blank\"\n          />\n        );\n      }\n      if (folder?.canAdmin) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"manage permissions\"\n            key=\"manage-perms\"\n            icon=\"lock\"\n            tooltip=\"manage permissions\"\n            to={baseUrl + '/permissions'}\n            target=\"__blank\"\n          />\n        );\n      }\n    }\n  } else if (canEditRules(rulesSource.name) && hasRuler(rulesSource)) {\n    if (!isFederated) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"edit rule group\"\n          data-testid=\"edit-group\"\n          key=\"edit\"\n          icon=\"pen\"\n          tooltip=\"edit rule group\"\n          onClick={() => setIsEditingGroup(true)}\n        />\n      );\n    }\n\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"delete rule group\"\n        data-testid=\"delete-group\"\n        key=\"delete-group\"\n        icon=\"trash-alt\"\n        tooltip=\"delete rule group\"\n        onClick={() => setIsDeletingGroup(true)}\n      />\n    );\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const isUngrouped = group.name === 'default';\n  const groupName = isUngrouped ? (\n    <RuleLocation namespace={namespace.name} />\n  ) : (\n    <RuleLocation namespace={namespace.name} group={group.name} />\n  );\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img\n              alt={rulesSource.meta.name}\n              className={styles.dataSourceIcon}\n              src={rulesSource.meta.info.logos.small}\n            />\n          </Tooltip>\n        )}\n        <h6 className={styles.heading}>\n          {isFederated && <Badge color=\"purple\" text=\"Federated\" />} {groupName}\n        </h6>\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleStats showInactive={false} group={group} />\n        </div>\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>{actionIcons}</div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable showSummaryColumn={true} className={styles.rulesTable} showGuidelines={true} rules={group.rules} />\n      )}\n      {isEditingGroup && (\n        <EditCloudGroupModal group={group} namespace={namespace} onClose={() => setIsEditingGroup(false)} />\n      )}\n      <ConfirmModal\n        isOpen={isDeletingGroup}\n        title=\"Delete group\"\n        body={\n          <div>\n            Deleting this group will permanently remove the group\n            <br />\n            and {group.rules.length} alert {pluralize('rule', group.rules.length)} belonging to it.\n            <br />\n            Are you sure you want to delete this group?\n          </div>\n        }\n        onConfirm={deleteGroup}\n        onDismiss={() => setIsDeletingGroup(false)}\n        confirmText=\"Delete\"\n      />\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n    flex-wrap: wrap;\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n\n    ${theme.breakpoints.down('sm')} {\n      order: 2;\n      width: 100%;\n      padding-left: ${theme.spacing(1)};\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}