{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { BehaviorSubject } from 'rxjs';\nimport { dateMath, dateTime } from '@grafana/data';\n// target is 20hz (50ms), but we poll at 100ms to smooth out jitter\nconst interval = 100;\n\nclass LiveTimer {\n  constructor() {\n    _defineProperty(this, \"listeners\", []);\n\n    _defineProperty(this, \"budget\", 1);\n\n    _defineProperty(this, \"threshold\", 1.5);\n\n    _defineProperty(this, \"ok\", new BehaviorSubject(true));\n\n    _defineProperty(this, \"lastUpdate\", Date.now());\n\n    _defineProperty(this, \"isLive\", false);\n\n    _defineProperty(this, \"timeRange\", void 0);\n\n    _defineProperty(this, \"liveTimeOffset\", 0);\n\n    _defineProperty(this, \"measure\", () => {\n      const now = Date.now();\n      this.budget = (now - this.lastUpdate) / interval;\n      const oldOk = this.ok.getValue();\n      const newOk = this.budget <= this.threshold;\n\n      if (oldOk !== newOk) {\n        this.ok.next(newOk);\n      }\n\n      this.lastUpdate = now; // For live dashboards, listen to changes\n\n      if (this.isLive && this.ok.getValue() && this.timeRange) {\n        // when the time-range is relative fire events\n        let tr = undefined;\n\n        for (const listener of this.listeners) {\n          if (!listener.panel.props.isInView) {\n            continue;\n          }\n\n          const elapsed = now - listener.last;\n\n          if (elapsed >= listener.intervalMs) {\n            if (!tr) {\n              const {\n                raw\n              } = this.timeRange;\n              tr = {\n                raw,\n                from: dateTime(now - this.liveTimeOffset),\n                to: dateTime(now)\n              };\n            }\n\n            listener.panel.liveTimeChanged(tr);\n            listener.last = now;\n          }\n        }\n      }\n    });\n  }\n\n  /** Called when the dashboard time range changes */\n  setLiveTimeRange(v) {\n    var _v$raw;\n\n    this.timeRange = v;\n    this.isLive = (v === null || v === void 0 ? void 0 : (_v$raw = v.raw) === null || _v$raw === void 0 ? void 0 : _v$raw.to) === 'now';\n\n    if (this.isLive) {\n      var _dateMath$parse, _dateMath$parse2;\n\n      const from = (_dateMath$parse = dateMath.parse(v.raw.from, false)) === null || _dateMath$parse === void 0 ? void 0 : _dateMath$parse.valueOf();\n      const to = (_dateMath$parse2 = dateMath.parse(v.raw.to, true)) === null || _dateMath$parse2 === void 0 ? void 0 : _dateMath$parse2.valueOf();\n      this.liveTimeOffset = to - from;\n\n      for (const listener of this.listeners) {\n        listener.intervalMs = getLiveTimerInterval(this.liveTimeOffset, listener.panel.props.width);\n      }\n    }\n  }\n\n  listen(panel) {\n    this.listeners.push({\n      last: this.lastUpdate,\n      panel: panel,\n      intervalMs: getLiveTimerInterval(60000, // 1min\n      panel.props.width)\n    });\n  }\n\n  remove(panel) {\n    this.listeners = this.listeners.filter(v => v.panel !== panel);\n  }\n\n  updateInterval(panel) {\n    if (!this.timeRange || !this.isLive) {\n      return;\n    }\n\n    for (const listener of this.listeners) {\n      if (listener.panel === panel) {\n        listener.intervalMs = getLiveTimerInterval(this.liveTimeOffset, listener.panel.props.width);\n        return;\n      }\n    }\n  } // Called at the consistent dashboard interval\n\n\n}\n\nconst FIVE_MINS = 5 * 60 * 1000;\nexport function getLiveTimerInterval(delta, width) {\n  const millisPerPixel = Math.ceil(delta / width / 100) * 100;\n\n  if (millisPerPixel > FIVE_MINS) {\n    return FIVE_MINS;\n  }\n\n  return millisPerPixel;\n}\nexport const liveTimer = new LiveTimer();\nsetInterval(liveTimer.measure, interval);","map":{"version":3,"names":["BehaviorSubject","dateMath","dateTime","interval","LiveTimer","Date","now","budget","lastUpdate","oldOk","ok","getValue","newOk","threshold","next","isLive","timeRange","tr","undefined","listener","listeners","panel","props","isInView","elapsed","last","intervalMs","raw","from","liveTimeOffset","to","liveTimeChanged","setLiveTimeRange","v","parse","valueOf","getLiveTimerInterval","width","listen","push","remove","filter","updateInterval","FIVE_MINS","delta","millisPerPixel","Math","ceil","liveTimer","setInterval","measure"],"sources":["/home/soula/grafana/public/app/features/dashboard/dashgrid/liveTimer.ts"],"sourcesContent":["import { BehaviorSubject } from 'rxjs';\n\nimport { dateMath, dateTime, TimeRange } from '@grafana/data';\n\nimport { PanelChrome } from './PanelChrome';\n\n// target is 20hz (50ms), but we poll at 100ms to smooth out jitter\nconst interval = 100;\n\ninterface LiveListener {\n  last: number;\n  intervalMs: number;\n  panel: PanelChrome;\n}\n\nclass LiveTimer {\n  listeners: LiveListener[] = [];\n\n  budget = 1;\n  threshold = 1.5; // trial and error appears about right\n  ok = new BehaviorSubject(true);\n  lastUpdate = Date.now();\n\n  isLive = false; // the dashboard time range ends in \"now\"\n  timeRange?: TimeRange;\n  liveTimeOffset = 0;\n\n  /** Called when the dashboard time range changes */\n  setLiveTimeRange(v?: TimeRange) {\n    this.timeRange = v;\n    this.isLive = v?.raw?.to === 'now';\n\n    if (this.isLive) {\n      const from = dateMath.parse(v!.raw.from, false)?.valueOf()!;\n      const to = dateMath.parse(v!.raw.to, true)?.valueOf()!;\n      this.liveTimeOffset = to - from;\n\n      for (const listener of this.listeners) {\n        listener.intervalMs = getLiveTimerInterval(this.liveTimeOffset, listener.panel.props.width);\n      }\n    }\n  }\n\n  listen(panel: PanelChrome) {\n    this.listeners.push({\n      last: this.lastUpdate,\n      panel: panel,\n      intervalMs: getLiveTimerInterval(\n        60000, // 1min\n        panel.props.width\n      ),\n    });\n  }\n\n  remove(panel: PanelChrome) {\n    this.listeners = this.listeners.filter((v) => v.panel !== panel);\n  }\n\n  updateInterval(panel: PanelChrome) {\n    if (!this.timeRange || !this.isLive) {\n      return;\n    }\n    for (const listener of this.listeners) {\n      if (listener.panel === panel) {\n        listener.intervalMs = getLiveTimerInterval(this.liveTimeOffset, listener.panel.props.width);\n        return;\n      }\n    }\n  }\n\n  // Called at the consistent dashboard interval\n  measure = () => {\n    const now = Date.now();\n    this.budget = (now - this.lastUpdate) / interval;\n\n    const oldOk = this.ok.getValue();\n    const newOk = this.budget <= this.threshold;\n    if (oldOk !== newOk) {\n      this.ok.next(newOk);\n    }\n    this.lastUpdate = now;\n\n    // For live dashboards, listen to changes\n    if (this.isLive && this.ok.getValue() && this.timeRange) {\n      // when the time-range is relative fire events\n      let tr: TimeRange | undefined = undefined;\n      for (const listener of this.listeners) {\n        if (!listener.panel.props.isInView) {\n          continue;\n        }\n\n        const elapsed = now - listener.last;\n        if (elapsed >= listener.intervalMs) {\n          if (!tr) {\n            const { raw } = this.timeRange;\n            tr = {\n              raw,\n              from: dateTime(now - this.liveTimeOffset),\n              to: dateTime(now),\n            };\n          }\n          listener.panel.liveTimeChanged(tr);\n          listener.last = now;\n        }\n      }\n    }\n  };\n}\n\nconst FIVE_MINS = 5 * 60 * 1000;\n\nexport function getLiveTimerInterval(delta: number, width: number): number {\n  const millisPerPixel = Math.ceil(delta / width / 100) * 100;\n  if (millisPerPixel > FIVE_MINS) {\n    return FIVE_MINS;\n  }\n  return millisPerPixel;\n}\n\nexport const liveTimer = new LiveTimer();\nsetInterval(liveTimer.measure, interval);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}