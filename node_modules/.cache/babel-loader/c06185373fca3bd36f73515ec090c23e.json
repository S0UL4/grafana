{"ast":null,"code":"import React from 'react';\nimport { AlertingSettings, DataSourceHttpSettings } from '@grafana/ui';\nimport { getAllAlertmanagerDataSources } from 'app/features/alerting/unified/utils/alertmanager';\nimport { DerivedFields } from './DerivedFields';\nimport { MaxLinesField } from './MaxLinesField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst makeJsonUpdater = field => (options, value) => {\n  return Object.assign({}, options, {\n    jsonData: Object.assign({}, options.jsonData, {\n      [field]: value\n    })\n  });\n};\n\nconst setMaxLines = makeJsonUpdater('maxLines');\nconst setDerivedFields = makeJsonUpdater('derivedFields');\nexport const ConfigEditor = props => {\n  const {\n    options,\n    onOptionsChange\n  } = props;\n  const alertmanagers = getAllAlertmanagerDataSources();\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(DataSourceHttpSettings, {\n      defaultUrl: 'http://localhost:3100',\n      dataSourceConfig: options,\n      showAccessOptions: false,\n      onChange: onOptionsChange\n    }), /*#__PURE__*/_jsx(AlertingSettings, {\n      alertmanagerDataSources: alertmanagers,\n      options: options,\n      onOptionsChange: onOptionsChange\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-group\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form\",\n          children: /*#__PURE__*/_jsx(MaxLinesField, {\n            value: options.jsonData.maxLines || '',\n            onChange: value => onOptionsChange(setMaxLines(options, value))\n          })\n        })\n      })\n    }), /*#__PURE__*/_jsx(DerivedFields, {\n      value: options.jsonData.derivedFields,\n      onChange: value => onOptionsChange(setDerivedFields(options, value))\n    })]\n  });\n};","map":{"version":3,"names":["React","AlertingSettings","DataSourceHttpSettings","getAllAlertmanagerDataSources","DerivedFields","MaxLinesField","makeJsonUpdater","field","options","value","jsonData","setMaxLines","setDerivedFields","ConfigEditor","props","onOptionsChange","alertmanagers","maxLines","derivedFields"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/configuration/ConfigEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { AlertingSettings, DataSourceHttpSettings } from '@grafana/ui';\nimport { getAllAlertmanagerDataSources } from 'app/features/alerting/unified/utils/alertmanager';\n\nimport { LokiOptions } from '../types';\n\nimport { DerivedFields } from './DerivedFields';\nimport { MaxLinesField } from './MaxLinesField';\n\nexport type Props = DataSourcePluginOptionsEditorProps<LokiOptions>;\n\nconst makeJsonUpdater =\n  <T extends any>(field: keyof LokiOptions) =>\n  (options: DataSourceSettings<LokiOptions>, value: T): DataSourceSettings<LokiOptions> => {\n    return {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [field]: value,\n      },\n    };\n  };\n\nconst setMaxLines = makeJsonUpdater('maxLines');\nconst setDerivedFields = makeJsonUpdater('derivedFields');\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const alertmanagers = getAllAlertmanagerDataSources();\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:3100'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <AlertingSettings<LokiOptions>\n        alertmanagerDataSources={alertmanagers}\n        options={options}\n        onOptionsChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <MaxLinesField\n              value={options.jsonData.maxLines || ''}\n              onChange={(value) => onOptionsChange(setMaxLines(options, value))}\n            />\n          </div>\n        </div>\n      </div>\n\n      <DerivedFields\n        value={options.jsonData.derivedFields}\n        onChange={(value) => onOptionsChange(setDerivedFields(options, value))}\n      />\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,gBAAT,EAA2BC,sBAA3B,QAAyD,aAAzD;AACA,SAASC,6BAAT,QAA8C,kDAA9C;AAIA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,aAAT,QAA8B,iBAA9B;;;;;AAIA,MAAMC,eAAe,GACHC,KAAhB,IACA,CAACC,OAAD,EAA2CC,KAA3C,KAAyF;EACvF,yBACKD,OADL;IAEEE,QAAQ,oBACHF,OAAO,CAACE,QADL;MAEN,CAACH,KAAD,GAASE;IAFH;EAFV;AAOD,CAVH;;AAYA,MAAME,WAAW,GAAGL,eAAe,CAAC,UAAD,CAAnC;AACA,MAAMM,gBAAgB,GAAGN,eAAe,CAAC,eAAD,CAAxC;AAEA,OAAO,MAAMO,YAAY,GAAIC,KAAD,IAAkB;EAC5C,MAAM;IAAEN,OAAF;IAAWO;EAAX,IAA+BD,KAArC;EACA,MAAME,aAAa,GAAGb,6BAA6B,EAAnD;EAEA,oBACE;IAAA,wBACE,KAAC,sBAAD;MACE,UAAU,EAAE,uBADd;MAEE,gBAAgB,EAAEK,OAFpB;MAGE,iBAAiB,EAAE,KAHrB;MAIE,QAAQ,EAAEO;IAJZ,EADF,eAQE,KAAC,gBAAD;MACE,uBAAuB,EAAEC,aAD3B;MAEE,OAAO,EAAER,OAFX;MAGE,eAAe,EAAEO;IAHnB,EARF,eAcE;MAAK,SAAS,EAAC,eAAf;MAAA,uBACE;QAAK,SAAS,EAAC,gBAAf;QAAA,uBACE;UAAK,SAAS,EAAC,SAAf;UAAA,uBACE,KAAC,aAAD;YACE,KAAK,EAAEP,OAAO,CAACE,QAAR,CAAiBO,QAAjB,IAA6B,EADtC;YAEE,QAAQ,EAAGR,KAAD,IAAWM,eAAe,CAACJ,WAAW,CAACH,OAAD,EAAUC,KAAV,CAAZ;UAFtC;QADF;MADF;IADF,EAdF,eAyBE,KAAC,aAAD;MACE,KAAK,EAAED,OAAO,CAACE,QAAR,CAAiBQ,aAD1B;MAEE,QAAQ,EAAGT,KAAD,IAAWM,eAAe,CAACH,gBAAgB,CAACJ,OAAD,EAAUC,KAAV,CAAjB;IAFtC,EAzBF;EAAA,EADF;AAgCD,CApCM"},"metadata":{},"sourceType":"module"}