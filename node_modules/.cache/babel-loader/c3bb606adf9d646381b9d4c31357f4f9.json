{"ast":null,"code":"/**\n * This function will calculate how many squares we can fit inside a rectangle.\n * Please have a look at this post for more details about the implementation:\n * https://math.stackexchange.com/questions/466198/algorithm-to-get-the-maximum-size-of-n-squares-that-fit-into-a-rectangle-with-a\n *\n * @param parentWidth width of the parent container\n * @param parentHeight height of the parent container\n * @param numberOfChildren number of children that should fit in the parent container\n */\nexport const calculateGridDimensions = (parentWidth, parentHeight, itemSpacing, numberOfChildren) => {\n  const vertical = calculateSizeOfChild(parentWidth, parentHeight, numberOfChildren);\n  const horizontal = calculateSizeOfChild(parentHeight, parentWidth, numberOfChildren);\n  const square = Math.max(vertical, horizontal);\n  let xCount = Math.floor(parentWidth / square);\n  let yCount = Math.ceil(numberOfChildren / xCount); // after yCount update xCount to make split between rows more even\n\n  xCount = Math.ceil(numberOfChildren / yCount);\n  const itemsOnLastRow = xCount - (xCount * yCount - numberOfChildren);\n  const widthOnLastRow = parentWidth / itemsOnLastRow - itemSpacing + itemSpacing / itemsOnLastRow;\n  return {\n    width: parentWidth / xCount - itemSpacing + itemSpacing / xCount,\n    height: parentHeight / yCount - itemSpacing + itemSpacing / yCount,\n    widthOnLastRow,\n    xCount,\n    yCount\n  };\n};\n\nfunction calculateSizeOfChild(parentWidth, parentHeight, numberOfChildren) {\n  const parts = Math.ceil(Math.sqrt(numberOfChildren * parentWidth / parentHeight));\n\n  if (Math.floor(parts * parentHeight / parentWidth) * parts < numberOfChildren) {\n    return parentHeight / Math.ceil(parts * parentHeight / parentWidth);\n  }\n\n  return parentWidth / parts;\n}","map":{"version":3,"names":["calculateGridDimensions","parentWidth","parentHeight","itemSpacing","numberOfChildren","vertical","calculateSizeOfChild","horizontal","square","Math","max","xCount","floor","yCount","ceil","itemsOnLastRow","widthOnLastRow","width","height","parts","sqrt"],"sources":["/home/soula/grafana/packages/grafana-ui/src/utils/squares.ts"],"sourcesContent":["/**\n * This function will calculate how many squares we can fit inside a rectangle.\n * Please have a look at this post for more details about the implementation:\n * https://math.stackexchange.com/questions/466198/algorithm-to-get-the-maximum-size-of-n-squares-that-fit-into-a-rectangle-with-a\n *\n * @param parentWidth width of the parent container\n * @param parentHeight height of the parent container\n * @param numberOfChildren number of children that should fit in the parent container\n */\nexport const calculateGridDimensions = (\n  parentWidth: number,\n  parentHeight: number,\n  itemSpacing: number,\n  numberOfChildren: number\n) => {\n  const vertical = calculateSizeOfChild(parentWidth, parentHeight, numberOfChildren);\n  const horizontal = calculateSizeOfChild(parentHeight, parentWidth, numberOfChildren);\n  const square = Math.max(vertical, horizontal);\n  let xCount = Math.floor(parentWidth / square);\n  let yCount = Math.ceil(numberOfChildren / xCount);\n\n  // after yCount update xCount to make split between rows more even\n  xCount = Math.ceil(numberOfChildren / yCount);\n\n  const itemsOnLastRow = xCount - (xCount * yCount - numberOfChildren);\n  const widthOnLastRow = parentWidth / itemsOnLastRow - itemSpacing + itemSpacing / itemsOnLastRow;\n\n  return {\n    width: parentWidth / xCount - itemSpacing + itemSpacing / xCount,\n    height: parentHeight / yCount - itemSpacing + itemSpacing / yCount,\n    widthOnLastRow,\n    xCount,\n    yCount,\n  };\n};\n\nfunction calculateSizeOfChild(parentWidth: number, parentHeight: number, numberOfChildren: number): number {\n  const parts = Math.ceil(Math.sqrt((numberOfChildren * parentWidth) / parentHeight));\n\n  if (Math.floor((parts * parentHeight) / parentWidth) * parts < numberOfChildren) {\n    return parentHeight / Math.ceil((parts * parentHeight) / parentWidth);\n  }\n\n  return parentWidth / parts;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,uBAAuB,GAAG,CACrCC,WADqC,EAErCC,YAFqC,EAGrCC,WAHqC,EAIrCC,gBAJqC,KAKlC;EACH,MAAMC,QAAQ,GAAGC,oBAAoB,CAACL,WAAD,EAAcC,YAAd,EAA4BE,gBAA5B,CAArC;EACA,MAAMG,UAAU,GAAGD,oBAAoB,CAACJ,YAAD,EAAeD,WAAf,EAA4BG,gBAA5B,CAAvC;EACA,MAAMI,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASL,QAAT,EAAmBE,UAAnB,CAAf;EACA,IAAII,MAAM,GAAGF,IAAI,CAACG,KAAL,CAAWX,WAAW,GAAGO,MAAzB,CAAb;EACA,IAAIK,MAAM,GAAGJ,IAAI,CAACK,IAAL,CAAUV,gBAAgB,GAAGO,MAA7B,CAAb,CALG,CAOH;;EACAA,MAAM,GAAGF,IAAI,CAACK,IAAL,CAAUV,gBAAgB,GAAGS,MAA7B,CAAT;EAEA,MAAME,cAAc,GAAGJ,MAAM,IAAIA,MAAM,GAAGE,MAAT,GAAkBT,gBAAtB,CAA7B;EACA,MAAMY,cAAc,GAAGf,WAAW,GAAGc,cAAd,GAA+BZ,WAA/B,GAA6CA,WAAW,GAAGY,cAAlF;EAEA,OAAO;IACLE,KAAK,EAAEhB,WAAW,GAAGU,MAAd,GAAuBR,WAAvB,GAAqCA,WAAW,GAAGQ,MADrD;IAELO,MAAM,EAAEhB,YAAY,GAAGW,MAAf,GAAwBV,WAAxB,GAAsCA,WAAW,GAAGU,MAFvD;IAGLG,cAHK;IAILL,MAJK;IAKLE;EALK,CAAP;AAOD,CAzBM;;AA2BP,SAASP,oBAAT,CAA8BL,WAA9B,EAAmDC,YAAnD,EAAyEE,gBAAzE,EAA2G;EACzG,MAAMe,KAAK,GAAGV,IAAI,CAACK,IAAL,CAAUL,IAAI,CAACW,IAAL,CAAWhB,gBAAgB,GAAGH,WAApB,GAAmCC,YAA7C,CAAV,CAAd;;EAEA,IAAIO,IAAI,CAACG,KAAL,CAAYO,KAAK,GAAGjB,YAAT,GAAyBD,WAApC,IAAmDkB,KAAnD,GAA2Df,gBAA/D,EAAiF;IAC/E,OAAOF,YAAY,GAAGO,IAAI,CAACK,IAAL,CAAWK,KAAK,GAAGjB,YAAT,GAAyBD,WAAnC,CAAtB;EACD;;EAED,OAAOA,WAAW,GAAGkB,KAArB;AACD"},"metadata":{},"sourceType":"module"}