{"ast":null,"code":"export const SELECT = 'SELECT';\nexport const FROM = 'FROM';\nexport const WHERE = 'WHERE';\nexport const GROUP = 'GROUP';\nexport const ORDER = 'ORDER';\nexport const BY = 'BY';\nexport const DESC = 'DESC';\nexport const ASC = 'ASC';\nexport const LIMIT = 'LIMIT';\nexport const WITH = 'WITH';\nexport const SCHEMA = 'SCHEMA';\nexport const KEYWORDS = [SELECT, FROM, WHERE, GROUP, ORDER, BY, DESC, ASC, LIMIT, WITH, SCHEMA];\nexport const STATISTICS = ['AVG', 'COUNT', 'MAX', 'MIN', 'SUM'];\nexport const AND = 'AND';\nexport const LOGICAL_OPERATORS = [AND];\nexport const EQUALS = '=';\nexport const NOT_EQUALS = '!=';\nexport const COMPARISON_OPERATORS = [EQUALS, NOT_EQUALS];\nexport const language = {\n  defaultToken: '',\n  tokenPostfix: '.sql',\n  ignoreCase: true,\n  brackets: [{\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }],\n  keywords: KEYWORDS,\n  operators: LOGICAL_OPERATORS,\n  builtinFunctions: STATISTICS,\n  tokenizer: {\n    root: [[/\\$[a-zA-Z0-9-_]+/, 'variable'], {\n      include: '@comments'\n    }, {\n      include: '@whitespace'\n    }, {\n      include: '@numbers'\n    }, {\n      include: '@strings'\n    }, {\n      include: '@complexIdentifiers'\n    }, [/[;,.]/, 'delimiter'], [/[()]/, '@brackets'], [/[\\w@#$]+/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@operators': 'operator',\n        '@builtinFunctions': 'predefined',\n        '@default': 'identifier'\n      }\n    }], [/[=!%&+\\-*/|~^]/, 'operator'] // TODO: strip these options\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    comments: [[/--+.*/, 'comment']],\n    comment: [[/[^*/]+/, 'comment'], [/./, 'comment']],\n    numbers: [[/0[xX][0-9a-fA-F]*/, 'number'], [/[$][+-]*\\d*(\\.\\d*)?/, 'number'], [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number']],\n    strings: [[/N'/, {\n      token: 'string',\n      next: '@string'\n    }], [/'/, {\n      token: 'string',\n      next: '@string'\n    }], [/\"/, {\n      token: 'type',\n      next: '@string_double'\n    }]],\n    string: [[/[^']+/, 'string'], [/''/, 'string'], [/'/, {\n      token: 'string',\n      next: '@pop'\n    }]],\n    string_double: [[/[^\\\\\"]+/, 'type'], [/\"/, 'type', '@pop']],\n    complexIdentifiers: [[/\\[/, {\n      token: 'identifier.quote',\n      next: '@bracketedIdentifier'\n    }], [/\"/, {\n      token: 'identifier.quote',\n      next: '@quotedIdentifier'\n    }]],\n    bracketedIdentifier: [[/[^\\]]+/, 'identifier'], [/]]/, 'identifier'], [/]/, {\n      token: 'identifier.quote',\n      next: '@pop'\n    }]],\n    quotedIdentifier: [[/[^\"]+/, 'identifier'], [/\"\"/, 'identifier'], [/\"/, {\n      token: 'identifier.quote',\n      next: '@pop'\n    }]]\n  }\n};\nexport const conf = {\n  comments: {\n    lineComment: '--',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }]\n};","map":{"version":3,"names":["SELECT","FROM","WHERE","GROUP","ORDER","BY","DESC","ASC","LIMIT","WITH","SCHEMA","KEYWORDS","STATISTICS","AND","LOGICAL_OPERATORS","EQUALS","NOT_EQUALS","COMPARISON_OPERATORS","language","defaultToken","tokenPostfix","ignoreCase","brackets","open","close","token","keywords","operators","builtinFunctions","tokenizer","root","include","cases","whitespace","comments","comment","numbers","strings","next","string","string_double","complexIdentifiers","bracketedIdentifier","quotedIdentifier","conf","lineComment","blockComment","autoClosingPairs","surroundingPairs"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/cloudwatch-sql/language.ts"],"sourcesContent":["import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\ninterface CloudWatchLanguage extends monacoType.languages.IMonarchLanguage {\n  keywords: string[];\n  operators: string[];\n  builtinFunctions: string[];\n}\n\nexport const SELECT = 'SELECT';\nexport const FROM = 'FROM';\nexport const WHERE = 'WHERE';\nexport const GROUP = 'GROUP';\nexport const ORDER = 'ORDER';\nexport const BY = 'BY';\nexport const DESC = 'DESC';\nexport const ASC = 'ASC';\nexport const LIMIT = 'LIMIT';\nexport const WITH = 'WITH';\nexport const SCHEMA = 'SCHEMA';\n\nexport const KEYWORDS = [SELECT, FROM, WHERE, GROUP, ORDER, BY, DESC, ASC, LIMIT, WITH, SCHEMA];\nexport const STATISTICS = ['AVG', 'COUNT', 'MAX', 'MIN', 'SUM'];\n\nexport const AND = 'AND';\nexport const LOGICAL_OPERATORS = [AND];\n\nexport const EQUALS = '=';\nexport const NOT_EQUALS = '!=';\nexport const COMPARISON_OPERATORS = [EQUALS, NOT_EQUALS];\n\nexport const language: CloudWatchLanguage = {\n  defaultToken: '',\n  tokenPostfix: '.sql',\n  ignoreCase: true,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n  ],\n  keywords: KEYWORDS,\n  operators: LOGICAL_OPERATORS,\n  builtinFunctions: STATISTICS,\n  tokenizer: {\n    root: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'],\n      { include: '@comments' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@strings' },\n      { include: '@complexIdentifiers' },\n      [/[;,.]/, 'delimiter'],\n      [/[()]/, '@brackets'],\n      [\n        /[\\w@#$]+/,\n        {\n          cases: {\n            '@keywords': 'keyword',\n            '@operators': 'operator',\n            '@builtinFunctions': 'predefined',\n            '@default': 'identifier',\n          },\n        },\n      ],\n      [/[=!%&+\\-*/|~^]/, 'operator'], // TODO: strip these options\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    comments: [[/--+.*/, 'comment']],\n    comment: [\n      [/[^*/]+/, 'comment'],\n      [/./, 'comment'],\n    ],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    strings: [\n      [/N'/, { token: 'string', next: '@string' }],\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/[^']+/, 'string'],\n      [/''/, 'string'],\n      [/'/, { token: 'string', next: '@pop' }],\n    ],\n    string_double: [\n      [/[^\\\\\"]+/, 'type'],\n      [/\"/, 'type', '@pop'],\n    ],\n    complexIdentifiers: [\n      [/\\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],\n      [/\"/, { token: 'identifier.quote', next: '@quotedIdentifier' }],\n    ],\n    bracketedIdentifier: [\n      [/[^\\]]+/, 'identifier'],\n      [/]]/, 'identifier'],\n      [/]/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n    quotedIdentifier: [\n      [/[^\"]+/, 'identifier'],\n      [/\"\"/, 'identifier'],\n      [/\"/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  comments: {\n    lineComment: '--',\n    blockComment: ['/*', '*/'],\n  },\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}