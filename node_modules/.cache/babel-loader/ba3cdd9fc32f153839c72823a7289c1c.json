{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { Select } from '@grafana/ui';\nimport { QueryEditorRow } from '..';\nimport { SELECT_WIDTH } from '../../constants';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const SLO = ({\n  refId,\n  query,\n  templateVariableOptions,\n  onChange,\n  datasource\n}) => {\n  const [slos, setSLOs] = useState([]);\n  const {\n    projectName,\n    serviceId\n  } = query;\n  useEffect(() => {\n    if (!projectName || !serviceId) {\n      return;\n    }\n\n    datasource.getServiceLevelObjectives(projectName, serviceId).then(sloIds => {\n      setSLOs([{\n        label: 'Template Variables',\n        options: templateVariableOptions\n      }, ...sloIds]);\n    });\n  }, [datasource, projectName, serviceId, templateVariableOptions]);\n  return /*#__PURE__*/_jsx(QueryEditorRow, {\n    label: \"SLO\",\n    htmlFor: `${refId}-slo`,\n    children: /*#__PURE__*/_jsx(Select, {\n      inputId: `${refId}-slo`,\n      width: SELECT_WIDTH,\n      allowCustomValue: true,\n      value: (query === null || query === void 0 ? void 0 : query.sloId) && {\n        value: query === null || query === void 0 ? void 0 : query.sloId,\n        label: (query === null || query === void 0 ? void 0 : query.sloName) || (query === null || query === void 0 ? void 0 : query.sloId)\n      },\n      placeholder: \"Select SLO\",\n      options: slos,\n      onChange: async ({\n        value: sloId = '',\n        label: sloName = ''\n      }) => {\n        const slos = await datasource.getServiceLevelObjectives(projectName, serviceId);\n        const slo = slos.find(({\n          value\n        }) => value === datasource.templateSrv.replace(sloId));\n        onChange(Object.assign({}, query, {\n          sloId,\n          sloName,\n          goal: slo === null || slo === void 0 ? void 0 : slo.goal\n        }));\n      }\n    })\n  });\n};","map":{"version":3,"names":["React","useEffect","useState","Select","QueryEditorRow","SELECT_WIDTH","SLO","refId","query","templateVariableOptions","onChange","datasource","slos","setSLOs","projectName","serviceId","getServiceLevelObjectives","then","sloIds","label","options","sloId","value","sloName","slo","find","templateSrv","replace","goal"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/SLO/SLO.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorRow } from '..';\nimport { SELECT_WIDTH } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { SLOQuery } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const SLO: React.FC<Props> = ({ refId, query, templateVariableOptions, onChange, datasource }) => {\n  const [slos, setSLOs] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName, serviceId } = query;\n\n  useEffect(() => {\n    if (!projectName || !serviceId) {\n      return;\n    }\n\n    datasource.getServiceLevelObjectives(projectName, serviceId).then((sloIds: Array<SelectableValue<string>>) => {\n      setSLOs([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...sloIds,\n      ]);\n    });\n  }, [datasource, projectName, serviceId, templateVariableOptions]);\n\n  return (\n    <QueryEditorRow label=\"SLO\" htmlFor={`${refId}-slo`}>\n      <Select\n        inputId={`${refId}-slo`}\n        width={SELECT_WIDTH}\n        allowCustomValue\n        value={query?.sloId && { value: query?.sloId, label: query?.sloName || query?.sloId }}\n        placeholder=\"Select SLO\"\n        options={slos}\n        onChange={async ({ value: sloId = '', label: sloName = '' }) => {\n          const slos = await datasource.getServiceLevelObjectives(projectName, serviceId);\n          const slo = slos.find(({ value }) => value === datasource.templateSrv.replace(sloId));\n          onChange({ ...query, sloId, sloName, goal: slo?.goal });\n        }}\n      />\n    </QueryEditorRow>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAEA,SAASC,cAAT,QAA+B,IAA/B;AACA,SAASC,YAAT,QAA6B,iBAA7B;;AAYA,OAAO,MAAMC,GAAoB,GAAG,CAAC;EAAEC,KAAF;EAASC,KAAT;EAAgBC,uBAAhB;EAAyCC,QAAzC;EAAmDC;AAAnD,CAAD,KAAqE;EACvG,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAiC,EAAjC,CAAhC;EACA,MAAM;IAAEY,WAAF;IAAeC;EAAf,IAA6BP,KAAnC;EAEAP,SAAS,CAAC,MAAM;IACd,IAAI,CAACa,WAAD,IAAgB,CAACC,SAArB,EAAgC;MAC9B;IACD;;IAEDJ,UAAU,CAACK,yBAAX,CAAqCF,WAArC,EAAkDC,SAAlD,EAA6DE,IAA7D,CAAmEC,MAAD,IAA4C;MAC5GL,OAAO,CAAC,CACN;QACEM,KAAK,EAAE,oBADT;QAEEC,OAAO,EAAEX;MAFX,CADM,EAKN,GAAGS,MALG,CAAD,CAAP;IAOD,CARD;EASD,CAdQ,EAcN,CAACP,UAAD,EAAaG,WAAb,EAA0BC,SAA1B,EAAqCN,uBAArC,CAdM,CAAT;EAgBA,oBACE,KAAC,cAAD;IAAgB,KAAK,EAAC,KAAtB;IAA4B,OAAO,EAAG,GAAEF,KAAM,MAA9C;IAAA,uBACE,KAAC,MAAD;MACE,OAAO,EAAG,GAAEA,KAAM,MADpB;MAEE,KAAK,EAAEF,YAFT;MAGE,gBAAgB,MAHlB;MAIE,KAAK,EAAE,CAAAG,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEa,KAAP,KAAgB;QAAEC,KAAK,EAAEd,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEa,KAAhB;QAAuBF,KAAK,EAAE,CAAAX,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEe,OAAP,MAAkBf,KAAlB,aAAkBA,KAAlB,uBAAkBA,KAAK,CAAEa,KAAzB;MAA9B,CAJzB;MAKE,WAAW,EAAC,YALd;MAME,OAAO,EAAET,IANX;MAOE,QAAQ,EAAE,OAAO;QAAEU,KAAK,EAAED,KAAK,GAAG,EAAjB;QAAqBF,KAAK,EAAEI,OAAO,GAAG;MAAtC,CAAP,KAAsD;QAC9D,MAAMX,IAAI,GAAG,MAAMD,UAAU,CAACK,yBAAX,CAAqCF,WAArC,EAAkDC,SAAlD,CAAnB;QACA,MAAMS,GAAG,GAAGZ,IAAI,CAACa,IAAL,CAAU,CAAC;UAAEH;QAAF,CAAD,KAAeA,KAAK,KAAKX,UAAU,CAACe,WAAX,CAAuBC,OAAvB,CAA+BN,KAA/B,CAAnC,CAAZ;QACAX,QAAQ,mBAAMF,KAAN;UAAaa,KAAb;UAAoBE,OAApB;UAA6BK,IAAI,EAAEJ,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEI;QAAxC,GAAR;MACD;IAXH;EADF,EADF;AAiBD,CArCM"},"metadata":{},"sourceType":"module"}