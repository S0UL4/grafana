{"ast":null,"code":"var _div, _LinkButton, _div2;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { cx, css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { InlineFormLabel, LinkButton, Segment, CodeEditor, CodeEditorSuggestionItemKind } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst samples = [{\n  label: 'Show buckets',\n  description: 'List the available buckets (table)',\n  value: 'buckets()'\n}, {\n  label: 'Simple query',\n  description: 'filter by measurement and field',\n  value: `from(bucket: \"db/rp\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"example-measurement\" and\n    r._field == \"example-field\"\n  )`\n}, {\n  label: 'Grouped Query',\n  description: 'Group by (min/max/sum/median)',\n  value: `// v.windowPeriod is a variable referring to the current optimized window period (currently: $interval)\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"measurement1\" or r[\"_measurement\"] =~ /^.*?regex.*$/)\n  |> filter(fn: (r) => r[\"_field\"] == \"field2\" or r[\"_field\"] =~ /^.*?regex.*$/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean|median|max|count|derivative|sum)\n  |> yield(name: \"some-name\")`\n}, {\n  label: 'Filter by value',\n  description: 'Results between a min/max',\n  value: `// v.bucket, v.timeRangeStart, and v.timeRange stop are all variables supported by the flux plugin and influxdb\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_value\"] >= 10 and r[\"_value\"] <= 20)`\n}, {\n  label: 'Schema Exploration: (measurements)',\n  description: 'Get a list of measurement using flux',\n  value: `import \"influxdata/influxdb/v1\"\nv1.measurements(bucket: v.bucket)`\n}, {\n  label: 'Schema Exploration: (fields)',\n  description: 'Return every possible key in a single table',\n  value: `from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> keys()\n  |> keep(columns: [\"_value\"])\n  |> group()\n  |> distinct()`\n}, {\n  label: 'Schema Exploration: (tag keys)',\n  description: 'Get a list of tag keys using flux',\n  value: `import \"influxdata/influxdb/v1\"\nv1.tagKeys(bucket: v.bucket)`\n}, {\n  label: 'Schema Exploration: (tag values)',\n  description: 'Get a list of tag values using flux',\n  value: `import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)`\n}];\nexport class FluxQueryEditor extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onFluxQueryChange\", query => {\n      this.props.onChange(Object.assign({}, this.props.query, {\n        query\n      }));\n      this.props.onRunQuery();\n    });\n\n    _defineProperty(this, \"onSampleChange\", val => {\n      this.props.onChange(Object.assign({}, this.props.query, {\n        query: val.value\n      })); // Angular HACK: Since the target does not actually change!\n\n      this.forceUpdate();\n      this.props.onRunQuery();\n    });\n\n    _defineProperty(this, \"getSuggestions\", () => {\n      const sugs = [{\n        label: 'v.timeRangeStart',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The start time'\n      }, {\n        label: 'v.timeRangeStop',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The stop time'\n      }, {\n        label: 'v.windowPeriod',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'based on max data points'\n      }, {\n        label: 'v.defaultBucket',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'bucket configured in the datsource'\n      }, {\n        label: 'v.organization',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'org configured for the datsource'\n      }];\n      const templateSrv = getTemplateSrv();\n      templateSrv.getVariables().forEach(variable => {\n        const label = '${' + variable.name + '}';\n        let val = templateSrv.replace(label);\n\n        if (val === label) {\n          val = '';\n        }\n\n        sugs.push({\n          label,\n          kind: CodeEditorSuggestionItemKind.Text,\n          detail: `(Template Variable) ${val}`\n        });\n      });\n      return sugs;\n    });\n\n    _defineProperty(this, \"editorDidMountCallbackHack\", editor => {\n      setTimeout(() => editor.layout(), 100);\n    });\n  }\n\n  render() {\n    const {\n      query\n    } = this.props;\n\n    const helpTooltip = _div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n      children: [\"Type: \", /*#__PURE__*/_jsx(\"i\", {\n        children: \"ctrl+space\"\n      }), \" to show template variable suggestions \", /*#__PURE__*/_jsx(\"br\", {}), \"Many queries can be copied from Chronograf\"]\n    }));\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(CodeEditor, {\n        height: '200px',\n        language: \"sql\",\n        value: query.query || '',\n        onBlur: this.onFluxQueryChange,\n        onSave: this.onFluxQueryChange,\n        showMiniMap: false,\n        showLineNumbers: true,\n        getSuggestions: this.getSuggestions,\n        onEditorDidMount: this.editorDidMountCallbackHack\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: cx('gf-form-inline', css`\n              margin-top: 6px;\n            `),\n        children: [_LinkButton || (_LinkButton = /*#__PURE__*/_jsx(LinkButton, {\n          icon: \"external-link-alt\",\n          variant: \"secondary\",\n          target: \"blank\",\n          href: \"https://docs.influxdata.com/influxdb/latest/query-data/get-started/\",\n          children: \"Flux language syntax\"\n        })), /*#__PURE__*/_jsx(Segment, {\n          options: samples,\n          value: \"Sample Query\",\n          onChange: this.onSampleChange\n        }), _div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form gf-form--grow\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label gf-form-label--grow\"\n          })\n        })), /*#__PURE__*/_jsx(InlineFormLabel, {\n          width: 5,\n          tooltip: helpTooltip,\n          children: \"Help\"\n        })]\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["cx","css","React","PureComponent","getTemplateSrv","InlineFormLabel","LinkButton","Segment","CodeEditor","CodeEditorSuggestionItemKind","samples","label","description","value","FluxQueryEditor","query","props","onChange","onRunQuery","val","forceUpdate","sugs","kind","Property","detail","templateSrv","getVariables","forEach","variable","name","replace","push","Text","editor","setTimeout","layout","render","helpTooltip","onFluxQueryChange","getSuggestions","editorDidMountCallbackHack","onSampleChange"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/components/FluxQueryEditor.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport {\n  InlineFormLabel,\n  LinkButton,\n  Segment,\n  CodeEditor,\n  MonacoEditor,\n  CodeEditorSuggestionItem,\n  CodeEditorSuggestionItemKind,\n} from '@grafana/ui';\n\nimport InfluxDatasource from '../datasource';\nimport { InfluxQuery } from '../types';\n\ntype Props = {\n  onChange: (query: InfluxQuery) => void;\n  onRunQuery: () => void;\n  query: InfluxQuery;\n  // `datasource` is not used internally, but this component is used at some places\n  // directly, where the `datasource` prop has to exist. later, when the whole\n  // query-editor gets converted to react we can stop using this component directly\n  // and then we can probably remove the datasource attribute.\n  datasource: InfluxDatasource;\n};\n\nconst samples: Array<SelectableValue<string>> = [\n  { label: 'Show buckets', description: 'List the available buckets (table)', value: 'buckets()' },\n  {\n    label: 'Simple query',\n    description: 'filter by measurement and field',\n    value: `from(bucket: \"db/rp\")\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> filter(fn: (r) =>\n    r._measurement == \"example-measurement\" and\n    r._field == \"example-field\"\n  )`,\n  },\n  {\n    label: 'Grouped Query',\n    description: 'Group by (min/max/sum/median)',\n    value: `// v.windowPeriod is a variable referring to the current optimized window period (currently: $interval)\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"measurement1\" or r[\"_measurement\"] =~ /^.*?regex.*$/)\n  |> filter(fn: (r) => r[\"_field\"] == \"field2\" or r[\"_field\"] =~ /^.*?regex.*$/)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean|median|max|count|derivative|sum)\n  |> yield(name: \"some-name\")`,\n  },\n  {\n    label: 'Filter by value',\n    description: 'Results between a min/max',\n    value: `// v.bucket, v.timeRangeStart, and v.timeRange stop are all variables supported by the flux plugin and influxdb\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_value\"] >= 10 and r[\"_value\"] <= 20)`,\n  },\n  {\n    label: 'Schema Exploration: (measurements)',\n    description: 'Get a list of measurement using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.measurements(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (fields)',\n    description: 'Return every possible key in a single table',\n    value: `from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop:v.timeRangeStop)\n  |> keys()\n  |> keep(columns: [\"_value\"])\n  |> group()\n  |> distinct()`,\n  },\n  {\n    label: 'Schema Exploration: (tag keys)',\n    description: 'Get a list of tag keys using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagKeys(bucket: v.bucket)`,\n  },\n  {\n    label: 'Schema Exploration: (tag values)',\n    description: 'Get a list of tag values using flux',\n    value: `import \"influxdata/influxdb/v1\"\nv1.tagValues(\n    bucket: v.bucket,\n    tag: \"host\",\n    predicate: (r) => true,\n    start: -1d\n)`,\n  },\n];\n\nexport class FluxQueryEditor extends PureComponent<Props> {\n  onFluxQueryChange = (query: string) => {\n    this.props.onChange({ ...this.props.query, query });\n    this.props.onRunQuery();\n  };\n\n  onSampleChange = (val: SelectableValue<string>) => {\n    this.props.onChange({\n      ...this.props.query,\n      query: val.value!,\n    });\n\n    // Angular HACK: Since the target does not actually change!\n    this.forceUpdate();\n    this.props.onRunQuery();\n  };\n\n  getSuggestions = (): CodeEditorSuggestionItem[] => {\n    const sugs: CodeEditorSuggestionItem[] = [\n      {\n        label: 'v.timeRangeStart',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The start time',\n      },\n      {\n        label: 'v.timeRangeStop',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'The stop time',\n      },\n      {\n        label: 'v.windowPeriod',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'based on max data points',\n      },\n      {\n        label: 'v.defaultBucket',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'bucket configured in the datsource',\n      },\n      {\n        label: 'v.organization',\n        kind: CodeEditorSuggestionItemKind.Property,\n        detail: 'org configured for the datsource',\n      },\n    ];\n\n    const templateSrv = getTemplateSrv();\n    templateSrv.getVariables().forEach((variable) => {\n      const label = '${' + variable.name + '}';\n      let val = templateSrv.replace(label);\n      if (val === label) {\n        val = '';\n      }\n      sugs.push({\n        label,\n        kind: CodeEditorSuggestionItemKind.Text,\n        detail: `(Template Variable) ${val}`,\n      });\n    });\n\n    return sugs;\n  };\n\n  // For some reason in angular, when this component gets re-mounted, the width\n  // is not set properly.  This forces the layout shortly after mount so that it\n  // displays OK.  Note: this is not an issue when used directly in react\n  editorDidMountCallbackHack = (editor: MonacoEditor) => {\n    setTimeout(() => editor.layout(), 100);\n  };\n\n  render() {\n    const { query } = this.props;\n\n    const helpTooltip = (\n      <div>\n        Type: <i>ctrl+space</i> to show template variable suggestions <br />\n        Many queries can be copied from Chronograf\n      </div>\n    );\n\n    return (\n      <>\n        <CodeEditor\n          height={'200px'}\n          language=\"sql\"\n          value={query.query || ''}\n          onBlur={this.onFluxQueryChange}\n          onSave={this.onFluxQueryChange}\n          showMiniMap={false}\n          showLineNumbers={true}\n          getSuggestions={this.getSuggestions}\n          onEditorDidMount={this.editorDidMountCallbackHack}\n        />\n        <div\n          className={cx(\n            'gf-form-inline',\n            css`\n              margin-top: 6px;\n            `\n          )}\n        >\n          <LinkButton\n            icon=\"external-link-alt\"\n            variant=\"secondary\"\n            target=\"blank\"\n            href=\"https://docs.influxdata.com/influxdb/latest/query-data/get-started/\"\n          >\n            Flux language syntax\n          </LinkButton>\n          <Segment options={samples} value=\"Sample Query\" onChange={this.onSampleChange} />\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n          <InlineFormLabel width={5} tooltip={helpTooltip}>\n            Help\n          </InlineFormLabel>\n        </div>\n      </>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}