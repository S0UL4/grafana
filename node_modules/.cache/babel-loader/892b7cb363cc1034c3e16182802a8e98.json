{"ast":null,"code":"import React from 'react';\nimport { AddButton } from './AddButton';\nimport { Seg } from './Seg';\nimport { adjustOperatorIfNeeded, getCondition, getOperator } from './tagUtils';\nimport { toSelectableValue } from './toSelectableValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst knownOperators = ['=', '!=', '<>', '<', '>', '=~', '!~'];\nconst knownConditions = ['AND', 'OR'];\nconst operatorOptions = knownOperators.map(toSelectableValue);\nconst condititonOptions = knownConditions.map(toSelectableValue);\n\nconst loadConditionOptions = () => Promise.resolve(condititonOptions);\n\nconst loadOperatorOptions = () => Promise.resolve(operatorOptions);\n\nconst Tag = ({\n  tag,\n  isFirst,\n  onRemove,\n  onChange,\n  getTagKeyOptions,\n  getTagValueOptions\n}) => {\n  const operator = getOperator(tag);\n  const condition = getCondition(tag, isFirst);\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().catch(err => {\n      // in this UI element we add a special item to the list of options,\n      // that is used to remove the element.\n      // this causes a problem: if `getTagKeyOptions` fails with an error,\n      // the remove-filter option is never added to the list,\n      // and the UI element can not be removed.\n      // to avoid it, we catch any potential errors coming from `getTagKeyOptions`,\n      // log the error, and pretend that the list of options is an empty list.\n      // this way the remove-item option can always be added to the list.\n      console.error(err);\n      return [];\n    }).then(tags => [{\n      label: '-- remove filter --',\n      value: undefined\n    }, ...tags.map(toSelectableValue)]);\n  };\n\n  const getTagValueSegmentOptions = () => {\n    return getTagValueOptions(tag.key).then(tags => tags.map(toSelectableValue));\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"gf-form\",\n    children: [condition != null && /*#__PURE__*/_jsx(Seg, {\n      value: condition,\n      loadOptions: loadConditionOptions,\n      onChange: v => {\n        onChange(Object.assign({}, tag, {\n          condition: v.value\n        }));\n      }\n    }), /*#__PURE__*/_jsx(Seg, {\n      allowCustomValue: true,\n      value: tag.key,\n      loadOptions: getTagKeySegmentOptions,\n      onChange: v => {\n        const {\n          value\n        } = v;\n\n        if (value === undefined) {\n          onRemove();\n        } else {\n          onChange(Object.assign({}, tag, {\n            key: value !== null && value !== void 0 ? value : ''\n          }));\n        }\n      }\n    }), /*#__PURE__*/_jsx(Seg, {\n      value: operator,\n      loadOptions: loadOperatorOptions,\n      onChange: op => {\n        onChange(Object.assign({}, tag, {\n          operator: op.value\n        }));\n      }\n    }), /*#__PURE__*/_jsx(Seg, {\n      allowCustomValue: true,\n      value: tag.value,\n      loadOptions: getTagValueSegmentOptions,\n      onChange: v => {\n        var _v$value;\n\n        const value = (_v$value = v.value) !== null && _v$value !== void 0 ? _v$value : '';\n        onChange(Object.assign({}, tag, {\n          value,\n          operator: adjustOperatorIfNeeded(operator, value)\n        }));\n      }\n    })]\n  });\n};\n\nexport const TagsSection = ({\n  tags,\n  onChange,\n  getTagKeyOptions,\n  getTagValueOptions\n}) => {\n  const onTagChange = (newTag, index) => {\n    const newTags = tags.map((tag, i) => {\n      return index === i ? newTag : tag;\n    });\n    onChange(newTags);\n  };\n\n  const onTagRemove = index => {\n    const newTags = tags.filter((t, i) => i !== index);\n    onChange(newTags);\n  };\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then(tags => tags.map(toSelectableValue));\n  };\n\n  const addNewTag = (tagKey, isFirst) => {\n    const minimalTag = {\n      key: tagKey,\n      value: 'select tag value'\n    };\n    const newTag = {\n      key: minimalTag.key,\n      value: minimalTag.value,\n      operator: getOperator(minimalTag),\n      condition: getCondition(minimalTag, isFirst)\n    };\n    onChange([...tags, newTag]);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [tags.map((t, i) => /*#__PURE__*/_jsx(Tag, {\n      tag: t,\n      isFirst: i === 0,\n      onChange: newT => {\n        onTagChange(newT, i);\n      },\n      onRemove: () => {\n        onTagRemove(i);\n      },\n      getTagKeyOptions: getTagKeyOptions,\n      getTagValueOptions: getTagValueOptions\n    }, i)), /*#__PURE__*/_jsx(AddButton, {\n      allowCustomValue: true,\n      loadOptions: getTagKeySegmentOptions,\n      onAdd: v => {\n        addNewTag(v, tags.length === 0);\n      }\n    })]\n  });\n};","map":{"version":3,"names":["React","AddButton","Seg","adjustOperatorIfNeeded","getCondition","getOperator","toSelectableValue","knownOperators","knownConditions","operatorOptions","map","condititonOptions","loadConditionOptions","Promise","resolve","loadOperatorOptions","Tag","tag","isFirst","onRemove","onChange","getTagKeyOptions","getTagValueOptions","operator","condition","getTagKeySegmentOptions","catch","err","console","error","then","tags","label","value","undefined","getTagValueSegmentOptions","key","v","op","TagsSection","onTagChange","newTag","index","newTags","i","onTagRemove","filter","t","addNewTag","tagKey","minimalTag","newT","length"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/TagsSection.tsx"],"sourcesContent":["import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { InfluxQueryTag } from '../../types';\n\nimport { AddButton } from './AddButton';\nimport { Seg } from './Seg';\nimport { adjustOperatorIfNeeded, getCondition, getOperator } from './tagUtils';\nimport { toSelectableValue } from './toSelectableValue';\n\ntype KnownOperator = '=' | '!=' | '<>' | '<' | '>' | '=~' | '!~';\nconst knownOperators: KnownOperator[] = ['=', '!=', '<>', '<', '>', '=~', '!~'];\n\ntype KnownCondition = 'AND' | 'OR';\nconst knownConditions: KnownCondition[] = ['AND', 'OR'];\n\nconst operatorOptions: Array<SelectableValue<KnownOperator>> = knownOperators.map(toSelectableValue);\nconst condititonOptions: Array<SelectableValue<KnownCondition>> = knownConditions.map(toSelectableValue);\n\ntype Props = {\n  tags: InfluxQueryTag[];\n  onChange: (tags: InfluxQueryTag[]) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\ntype TagProps = {\n  tag: InfluxQueryTag;\n  isFirst: boolean;\n  onRemove: () => void;\n  onChange: (tag: InfluxQueryTag) => void;\n  getTagKeyOptions: () => Promise<string[]>;\n  getTagValueOptions: (key: string) => Promise<string[]>;\n};\n\nconst loadConditionOptions = () => Promise.resolve(condititonOptions);\n\nconst loadOperatorOptions = () => Promise.resolve(operatorOptions);\n\nconst Tag = ({ tag, isFirst, onRemove, onChange, getTagKeyOptions, getTagValueOptions }: TagProps): JSX.Element => {\n  const operator = getOperator(tag);\n  const condition = getCondition(tag, isFirst);\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions()\n      .catch((err) => {\n        // in this UI element we add a special item to the list of options,\n        // that is used to remove the element.\n        // this causes a problem: if `getTagKeyOptions` fails with an error,\n        // the remove-filter option is never added to the list,\n        // and the UI element can not be removed.\n        // to avoid it, we catch any potential errors coming from `getTagKeyOptions`,\n        // log the error, and pretend that the list of options is an empty list.\n        // this way the remove-item option can always be added to the list.\n        console.error(err);\n        return [];\n      })\n      .then((tags) => [{ label: '-- remove filter --', value: undefined }, ...tags.map(toSelectableValue)]);\n  };\n\n  const getTagValueSegmentOptions = () => {\n    return getTagValueOptions(tag.key).then((tags) => tags.map(toSelectableValue));\n  };\n\n  return (\n    <div className=\"gf-form\">\n      {condition != null && (\n        <Seg\n          value={condition}\n          loadOptions={loadConditionOptions}\n          onChange={(v) => {\n            onChange({ ...tag, condition: v.value });\n          }}\n        />\n      )}\n      <Seg\n        allowCustomValue\n        value={tag.key}\n        loadOptions={getTagKeySegmentOptions}\n        onChange={(v) => {\n          const { value } = v;\n          if (value === undefined) {\n            onRemove();\n          } else {\n            onChange({ ...tag, key: value ?? '' });\n          }\n        }}\n      />\n      <Seg\n        value={operator}\n        loadOptions={loadOperatorOptions}\n        onChange={(op) => {\n          onChange({ ...tag, operator: op.value });\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={tag.value}\n        loadOptions={getTagValueSegmentOptions}\n        onChange={(v) => {\n          const value = v.value ?? '';\n          onChange({ ...tag, value, operator: adjustOperatorIfNeeded(operator, value) });\n        }}\n      />\n    </div>\n  );\n};\n\nexport const TagsSection = ({ tags, onChange, getTagKeyOptions, getTagValueOptions }: Props): JSX.Element => {\n  const onTagChange = (newTag: InfluxQueryTag, index: number) => {\n    const newTags = tags.map((tag, i) => {\n      return index === i ? newTag : tag;\n    });\n    onChange(newTags);\n  };\n\n  const onTagRemove = (index: number) => {\n    const newTags = tags.filter((t, i) => i !== index);\n    onChange(newTags);\n  };\n\n  const getTagKeySegmentOptions = () => {\n    return getTagKeyOptions().then((tags) => tags.map(toSelectableValue));\n  };\n\n  const addNewTag = (tagKey: string, isFirst: boolean) => {\n    const minimalTag: InfluxQueryTag = {\n      key: tagKey,\n      value: 'select tag value',\n    };\n\n    const newTag: InfluxQueryTag = {\n      key: minimalTag.key,\n      value: minimalTag.value,\n      operator: getOperator(minimalTag),\n      condition: getCondition(minimalTag, isFirst),\n    };\n\n    onChange([...tags, newTag]);\n  };\n\n  return (\n    <>\n      {tags.map((t, i) => (\n        <Tag\n          tag={t}\n          isFirst={i === 0}\n          key={i}\n          onChange={(newT) => {\n            onTagChange(newT, i);\n          }}\n          onRemove={() => {\n            onTagRemove(i);\n          }}\n          getTagKeyOptions={getTagKeyOptions}\n          getTagValueOptions={getTagValueOptions}\n        />\n      ))}\n      <AddButton\n        allowCustomValue\n        loadOptions={getTagKeySegmentOptions}\n        onAdd={(v) => {\n          addNewTag(v, tags.length === 0);\n        }}\n      />\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAMA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,sBAAT,EAAiCC,YAAjC,EAA+CC,WAA/C,QAAkE,YAAlE;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;;;AAGA,MAAMC,cAA+B,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,IAA5B,EAAkC,IAAlC,CAAxC;AAGA,MAAMC,eAAiC,GAAG,CAAC,KAAD,EAAQ,IAAR,CAA1C;AAEA,MAAMC,eAAsD,GAAGF,cAAc,CAACG,GAAf,CAAmBJ,iBAAnB,CAA/D;AACA,MAAMK,iBAAyD,GAAGH,eAAe,CAACE,GAAhB,CAAoBJ,iBAApB,CAAlE;;AAkBA,MAAMM,oBAAoB,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAgBH,iBAAhB,CAAnC;;AAEA,MAAMI,mBAAmB,GAAG,MAAMF,OAAO,CAACC,OAAR,CAAgBL,eAAhB,CAAlC;;AAEA,MAAMO,GAAG,GAAG,CAAC;EAAEC,GAAF;EAAOC,OAAP;EAAgBC,QAAhB;EAA0BC,QAA1B;EAAoCC,gBAApC;EAAsDC;AAAtD,CAAD,KAAuG;EACjH,MAAMC,QAAQ,GAAGlB,WAAW,CAACY,GAAD,CAA5B;EACA,MAAMO,SAAS,GAAGpB,YAAY,CAACa,GAAD,EAAMC,OAAN,CAA9B;;EAEA,MAAMO,uBAAuB,GAAG,MAAM;IACpC,OAAOJ,gBAAgB,GACpBK,KADI,CACGC,GAAD,IAAS;MACd;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAC,OAAO,CAACC,KAAR,CAAcF,GAAd;MACA,OAAO,EAAP;IACD,CAZI,EAaJG,IAbI,CAaEC,IAAD,IAAU,CAAC;MAAEC,KAAK,EAAE,qBAAT;MAAgCC,KAAK,EAAEC;IAAvC,CAAD,EAAqD,GAAGH,IAAI,CAACrB,GAAL,CAASJ,iBAAT,CAAxD,CAbX,CAAP;EAcD,CAfD;;EAiBA,MAAM6B,yBAAyB,GAAG,MAAM;IACtC,OAAOb,kBAAkB,CAACL,GAAG,CAACmB,GAAL,CAAlB,CAA4BN,IAA5B,CAAkCC,IAAD,IAAUA,IAAI,CAACrB,GAAL,CAASJ,iBAAT,CAA3C,CAAP;EACD,CAFD;;EAIA,oBACE;IAAK,SAAS,EAAC,SAAf;IAAA,WACGkB,SAAS,IAAI,IAAb,iBACC,KAAC,GAAD;MACE,KAAK,EAAEA,SADT;MAEE,WAAW,EAAEZ,oBAFf;MAGE,QAAQ,EAAGyB,CAAD,IAAO;QACfjB,QAAQ,mBAAMH,GAAN;UAAWO,SAAS,EAAEa,CAAC,CAACJ;QAAxB,GAAR;MACD;IALH,EAFJ,eAUE,KAAC,GAAD;MACE,gBAAgB,MADlB;MAEE,KAAK,EAAEhB,GAAG,CAACmB,GAFb;MAGE,WAAW,EAAEX,uBAHf;MAIE,QAAQ,EAAGY,CAAD,IAAO;QACf,MAAM;UAAEJ;QAAF,IAAYI,CAAlB;;QACA,IAAIJ,KAAK,KAAKC,SAAd,EAAyB;UACvBf,QAAQ;QACT,CAFD,MAEO;UACLC,QAAQ,mBAAMH,GAAN;YAAWmB,GAAG,EAAEH,KAAF,aAAEA,KAAF,cAAEA,KAAF,GAAW;UAAzB,GAAR;QACD;MACF;IAXH,EAVF,eAuBE,KAAC,GAAD;MACE,KAAK,EAAEV,QADT;MAEE,WAAW,EAAER,mBAFf;MAGE,QAAQ,EAAGuB,EAAD,IAAQ;QAChBlB,QAAQ,mBAAMH,GAAN;UAAWM,QAAQ,EAAEe,EAAE,CAACL;QAAxB,GAAR;MACD;IALH,EAvBF,eA8BE,KAAC,GAAD;MACE,gBAAgB,MADlB;MAEE,KAAK,EAAEhB,GAAG,CAACgB,KAFb;MAGE,WAAW,EAAEE,yBAHf;MAIE,QAAQ,EAAGE,CAAD,IAAO;QAAA;;QACf,MAAMJ,KAAK,eAAGI,CAAC,CAACJ,KAAL,+CAAc,EAAzB;QACAb,QAAQ,mBAAMH,GAAN;UAAWgB,KAAX;UAAkBV,QAAQ,EAAEpB,sBAAsB,CAACoB,QAAD,EAAWU,KAAX;QAAlD,GAAR;MACD;IAPH,EA9BF;EAAA,EADF;AA0CD,CAnED;;AAqEA,OAAO,MAAMM,WAAW,GAAG,CAAC;EAAER,IAAF;EAAQX,QAAR;EAAkBC,gBAAlB;EAAoCC;AAApC,CAAD,KAAkF;EAC3G,MAAMkB,WAAW,GAAG,CAACC,MAAD,EAAyBC,KAAzB,KAA2C;IAC7D,MAAMC,OAAO,GAAGZ,IAAI,CAACrB,GAAL,CAAS,CAACO,GAAD,EAAM2B,CAAN,KAAY;MACnC,OAAOF,KAAK,KAAKE,CAAV,GAAcH,MAAd,GAAuBxB,GAA9B;IACD,CAFe,CAAhB;IAGAG,QAAQ,CAACuB,OAAD,CAAR;EACD,CALD;;EAOA,MAAME,WAAW,GAAIH,KAAD,IAAmB;IACrC,MAAMC,OAAO,GAAGZ,IAAI,CAACe,MAAL,CAAY,CAACC,CAAD,EAAIH,CAAJ,KAAUA,CAAC,KAAKF,KAA5B,CAAhB;IACAtB,QAAQ,CAACuB,OAAD,CAAR;EACD,CAHD;;EAKA,MAAMlB,uBAAuB,GAAG,MAAM;IACpC,OAAOJ,gBAAgB,GAAGS,IAAnB,CAAyBC,IAAD,IAAUA,IAAI,CAACrB,GAAL,CAASJ,iBAAT,CAAlC,CAAP;EACD,CAFD;;EAIA,MAAM0C,SAAS,GAAG,CAACC,MAAD,EAAiB/B,OAAjB,KAAsC;IACtD,MAAMgC,UAA0B,GAAG;MACjCd,GAAG,EAAEa,MAD4B;MAEjChB,KAAK,EAAE;IAF0B,CAAnC;IAKA,MAAMQ,MAAsB,GAAG;MAC7BL,GAAG,EAAEc,UAAU,CAACd,GADa;MAE7BH,KAAK,EAAEiB,UAAU,CAACjB,KAFW;MAG7BV,QAAQ,EAAElB,WAAW,CAAC6C,UAAD,CAHQ;MAI7B1B,SAAS,EAAEpB,YAAY,CAAC8C,UAAD,EAAahC,OAAb;IAJM,CAA/B;IAOAE,QAAQ,CAAC,CAAC,GAAGW,IAAJ,EAAUU,MAAV,CAAD,CAAR;EACD,CAdD;;EAgBA,oBACE;IAAA,WACGV,IAAI,CAACrB,GAAL,CAAS,CAACqC,CAAD,EAAIH,CAAJ,kBACR,KAAC,GAAD;MACE,GAAG,EAAEG,CADP;MAEE,OAAO,EAAEH,CAAC,KAAK,CAFjB;MAIE,QAAQ,EAAGO,IAAD,IAAU;QAClBX,WAAW,CAACW,IAAD,EAAOP,CAAP,CAAX;MACD,CANH;MAOE,QAAQ,EAAE,MAAM;QACdC,WAAW,CAACD,CAAD,CAAX;MACD,CATH;MAUE,gBAAgB,EAAEvB,gBAVpB;MAWE,kBAAkB,EAAEC;IAXtB,GAGOsB,CAHP,CADD,CADH,eAgBE,KAAC,SAAD;MACE,gBAAgB,MADlB;MAEE,WAAW,EAAEnB,uBAFf;MAGE,KAAK,EAAGY,CAAD,IAAO;QACZW,SAAS,CAACX,CAAD,EAAIN,IAAI,CAACqB,MAAL,KAAgB,CAApB,CAAT;MACD;IALH,EAhBF;EAAA,EADF;AA0BD,CA3DM"},"metadata":{},"sourceType":"module"}