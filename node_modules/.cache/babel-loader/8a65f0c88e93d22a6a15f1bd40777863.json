{"ast":null,"code":"var _div;\n\nimport React, { useMemo } from 'react';\nimport { HorizontalGroup, IconButton, RadioButtonGroup, Select } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst lineFillOptions = [{\n  label: 'Solid',\n  value: 'solid'\n}, {\n  label: 'Dash',\n  value: 'dash'\n}, {\n  label: 'Dots',\n  value: 'dot'\n}];\nconst dashOptions = ['10, 10', // default\n'10, 15', '10, 20', '10, 25', '10, 30', '10, 40', '15, 10', '20, 10', '25, 10', '30, 10', '40, 10', '50, 10', '5, 10', '30, 3, 3'].map(txt => ({\n  label: txt,\n  value: txt\n}));\nconst dotOptions = ['0, 10', // default\n'0, 20', '0, 30', '0, 40', '0, 3, 3'].map(txt => ({\n  label: txt,\n  value: txt\n}));\nexport const LineStyleEditor = ({\n  value,\n  onChange\n}) => {\n  const options = useMemo(() => (value === null || value === void 0 ? void 0 : value.fill) === 'dash' ? dashOptions : dotOptions, [value]);\n  const current = useMemo(() => {\n    var _value$dash, _value$dash2;\n\n    if (!(value !== null && value !== void 0 && (_value$dash = value.dash) !== null && _value$dash !== void 0 && _value$dash.length)) {\n      return options[0];\n    }\n\n    const str = (_value$dash2 = value.dash) === null || _value$dash2 === void 0 ? void 0 : _value$dash2.join(', ');\n    const val = options.find(o => o.value === str);\n\n    if (!val) {\n      return {\n        label: str,\n        value: str\n      };\n    }\n\n    return val;\n  }, [value, options]);\n  return /*#__PURE__*/_jsxs(HorizontalGroup, {\n    children: [/*#__PURE__*/_jsx(RadioButtonGroup, {\n      value: (value === null || value === void 0 ? void 0 : value.fill) || 'solid',\n      options: lineFillOptions,\n      onChange: v => {\n        let dash = undefined;\n\n        if (v === 'dot') {\n          dash = parseText(dotOptions[0].value);\n        } else if (v === 'dash') {\n          dash = parseText(dashOptions[0].value);\n        }\n\n        onChange(Object.assign({}, value, {\n          fill: v,\n          dash\n        }));\n      }\n    }), (value === null || value === void 0 ? void 0 : value.fill) && (value === null || value === void 0 ? void 0 : value.fill) !== 'solid' && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Select, {\n        allowCustomValue: true,\n        options: options,\n        value: current,\n        width: 20,\n        onChange: v => {\n          var _v$value;\n\n          onChange(Object.assign({}, value, {\n            dash: parseText((_v$value = v.value) !== null && _v$value !== void 0 ? _v$value : '')\n          }));\n        },\n        formatCreateLabel: t => `Segments: ${parseText(t).join(', ')}`\n      }), _div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"\\xA0\", /*#__PURE__*/_jsx(\"a\", {\n          title: \"The input expects a segment list\",\n          href: \"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Parameters\",\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            name: \"question-circle\"\n          })\n        })]\n      }))]\n    })]\n  });\n};\n\nfunction parseText(txt) {\n  const segments = [];\n\n  for (const s of txt.split(/(?:,| )+/)) {\n    const num = Number.parseInt(s, 10);\n\n    if (!isNaN(num)) {\n      segments.push(num);\n    }\n  }\n\n  return segments;\n}","map":{"version":3,"names":["React","useMemo","HorizontalGroup","IconButton","RadioButtonGroup","Select","lineFillOptions","label","value","dashOptions","map","txt","dotOptions","LineStyleEditor","onChange","options","fill","current","dash","length","str","join","val","find","o","v","undefined","parseText","t","segments","s","split","num","Number","parseInt","isNaN","push"],"sources":["/home/soula/grafana/public/app/plugins/panel/timeseries/LineStyleEditor.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\n\nimport { FieldOverrideEditorProps, SelectableValue } from '@grafana/data';\nimport { LineStyle } from '@grafana/schema';\nimport { HorizontalGroup, IconButton, RadioButtonGroup, Select } from '@grafana/ui';\n\ntype LineFill = 'solid' | 'dash' | 'dot';\n\nconst lineFillOptions: Array<SelectableValue<LineFill>> = [\n  {\n    label: 'Solid',\n    value: 'solid',\n  },\n  {\n    label: 'Dash',\n    value: 'dash',\n  },\n  {\n    label: 'Dots',\n    value: 'dot',\n  },\n];\n\nconst dashOptions: Array<SelectableValue<string>> = [\n  '10, 10', // default\n  '10, 15',\n  '10, 20',\n  '10, 25',\n  '10, 30',\n  '10, 40',\n  '15, 10',\n  '20, 10',\n  '25, 10',\n  '30, 10',\n  '40, 10',\n  '50, 10',\n  '5, 10',\n  '30, 3, 3',\n].map((txt) => ({\n  label: txt,\n  value: txt,\n}));\n\nconst dotOptions: Array<SelectableValue<string>> = [\n  '0, 10', // default\n  '0, 20',\n  '0, 30',\n  '0, 40',\n  '0, 3, 3',\n].map((txt) => ({\n  label: txt,\n  value: txt,\n}));\n\nexport const LineStyleEditor: React.FC<FieldOverrideEditorProps<LineStyle, any>> = ({ value, onChange }) => {\n  const options = useMemo(() => (value?.fill === 'dash' ? dashOptions : dotOptions), [value]);\n  const current = useMemo(() => {\n    if (!value?.dash?.length) {\n      return options[0];\n    }\n    const str = value.dash?.join(', ');\n    const val = options.find((o) => o.value === str);\n    if (!val) {\n      return {\n        label: str,\n        value: str,\n      };\n    }\n    return val;\n  }, [value, options]);\n\n  return (\n    <HorizontalGroup>\n      <RadioButtonGroup\n        value={value?.fill || 'solid'}\n        options={lineFillOptions}\n        onChange={(v) => {\n          let dash: number[] | undefined = undefined;\n          if (v === 'dot') {\n            dash = parseText(dotOptions[0].value!);\n          } else if (v === 'dash') {\n            dash = parseText(dashOptions[0].value!);\n          }\n          onChange({\n            ...value,\n            fill: v!,\n            dash,\n          });\n        }}\n      />\n      {value?.fill && value?.fill !== 'solid' && (\n        <>\n          <Select\n            allowCustomValue={true}\n            options={options}\n            value={current}\n            width={20}\n            onChange={(v) => {\n              onChange({\n                ...value,\n                dash: parseText(v.value ?? ''),\n              });\n            }}\n            formatCreateLabel={(t) => `Segments: ${parseText(t).join(', ')}`}\n          />\n          <div>\n            &nbsp;\n            <a\n              title=\"The input expects a segment list\"\n              href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Parameters\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <IconButton name=\"question-circle\" />\n            </a>\n          </div>\n        </>\n      )}\n    </HorizontalGroup>\n  );\n};\n\nfunction parseText(txt: string): number[] {\n  const segments: number[] = [];\n  for (const s of txt.split(/(?:,| )+/)) {\n    const num = Number.parseInt(s, 10);\n    if (!isNaN(num)) {\n      segments.push(num);\n    }\n  }\n  return segments;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}