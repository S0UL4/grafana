{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { formattedValueToString, getFieldDisplayName } from '@grafana/data';\nimport { stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class TooltipView extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"style\", getStyles(config.theme2));\n  }\n\n  render() {\n    const {\n      series,\n      data,\n      rowIndex\n    } = this.props;\n\n    if (!series || rowIndex == null) {\n      return null;\n    }\n\n    const frame = series.frame(data);\n    const y = undefined; // series.y(frame);\n\n    return /*#__PURE__*/_jsx(\"table\", {\n      className: this.style.infoWrap,\n      children: /*#__PURE__*/_jsx(\"tbody\", {\n        children: frame.fields.map((f, i) => /*#__PURE__*/_jsxs(\"tr\", {\n          className: f === y ? this.style.highlight : '',\n          children: [/*#__PURE__*/_jsxs(\"th\", {\n            children: [getFieldDisplayName(f, frame), \":\"]\n          }), /*#__PURE__*/_jsx(\"td\", {\n            children: fmt(f, rowIndex)\n          })]\n        }, `${i}/${rowIndex}`))\n      })\n    });\n  }\n\n}\n\nfunction fmt(field, row) {\n  const v = field.values.get(row);\n\n  if (field.display) {\n    return formattedValueToString(field.display(v));\n  }\n\n  return `${v}`;\n}\n\nconst getStyles = stylesFactory(theme => ({\n  infoWrap: css`\n    padding: 8px;\n    th {\n      font-weight: ${theme.typography.fontWeightMedium};\n      padding: ${theme.spacing(0.25, 2)};\n    }\n  `,\n  highlight: css`\n    background: ${theme.colors.action.hover};\n  `\n}));","map":{"version":3,"names":["css","React","PureComponent","formattedValueToString","getFieldDisplayName","stylesFactory","config","TooltipView","getStyles","theme2","render","series","data","rowIndex","props","frame","y","undefined","style","infoWrap","fields","map","f","i","highlight","fmt","field","row","v","values","get","display","theme","typography","fontWeightMedium","spacing","colors","action","hover"],"sources":["/home/soula/grafana/public/app/plugins/panel/xychart/TooltipView.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { DataFrame, Field, formattedValueToString, getFieldDisplayName, GrafanaTheme2 } from '@grafana/data';\nimport { stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { ScatterSeries } from './types';\n\nexport interface Props {\n  series: ScatterSeries;\n  data: DataFrame[]; // source data\n  rowIndex?: number; // the hover row\n}\n\nexport class TooltipView extends PureComponent<Props> {\n  style = getStyles(config.theme2);\n\n  render() {\n    const { series, data, rowIndex } = this.props;\n    if (!series || rowIndex == null) {\n      return null;\n    }\n    const frame = series.frame(data);\n    const y = undefined; // series.y(frame);\n\n    return (\n      <table className={this.style.infoWrap}>\n        <tbody>\n          {frame.fields.map((f, i) => (\n            <tr key={`${i}/${rowIndex}`} className={f === y ? this.style.highlight : ''}>\n              <th>{getFieldDisplayName(f, frame)}:</th>\n              <td>{fmt(f, rowIndex)}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nfunction fmt(field: Field, row: number): string {\n  const v = field.values.get(row);\n  if (field.display) {\n    return formattedValueToString(field.display(v));\n  }\n  return `${v}`;\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  infoWrap: css`\n    padding: 8px;\n    th {\n      font-weight: ${theme.typography.fontWeightMedium};\n      padding: ${theme.spacing(0.25, 2)};\n    }\n  `,\n  highlight: css`\n    background: ${theme.colors.action.hover};\n  `,\n}));\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAEA,SAA2BC,sBAA3B,EAAmDC,mBAAnD,QAA6F,eAA7F;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;;AAUA,OAAO,MAAMC,WAAN,SAA0BL,aAA1B,CAA+C;EAAA;IAAA;;IAAA,+BAC5CM,SAAS,CAACF,MAAM,CAACG,MAAR,CADmC;EAAA;;EAGpDC,MAAM,GAAG;IACP,MAAM;MAAEC,MAAF;MAAUC,IAAV;MAAgBC;IAAhB,IAA6B,KAAKC,KAAxC;;IACA,IAAI,CAACH,MAAD,IAAWE,QAAQ,IAAI,IAA3B,EAAiC;MAC/B,OAAO,IAAP;IACD;;IACD,MAAME,KAAK,GAAGJ,MAAM,CAACI,KAAP,CAAaH,IAAb,CAAd;IACA,MAAMI,CAAC,GAAGC,SAAV,CANO,CAMc;;IAErB,oBACE;MAAO,SAAS,EAAE,KAAKC,KAAL,CAAWC,QAA7B;MAAA,uBACE;QAAA,UACGJ,KAAK,CAACK,MAAN,CAAaC,GAAb,CAAiB,CAACC,CAAD,EAAIC,CAAJ,kBAChB;UAA6B,SAAS,EAAED,CAAC,KAAKN,CAAN,GAAU,KAAKE,KAAL,CAAWM,SAArB,GAAiC,EAAzE;UAAA,wBACE;YAAA,WAAKpB,mBAAmB,CAACkB,CAAD,EAAIP,KAAJ,CAAxB;UAAA,EADF,eAEE;YAAA,UAAKU,GAAG,CAACH,CAAD,EAAIT,QAAJ;UAAR,EAFF;QAAA,GAAU,GAAEU,CAAE,IAAGV,QAAS,EAA1B,CADD;MADH;IADF,EADF;EAYD;;AAvBmD;;AA0BtD,SAASY,GAAT,CAAaC,KAAb,EAA2BC,GAA3B,EAAgD;EAC9C,MAAMC,CAAC,GAAGF,KAAK,CAACG,MAAN,CAAaC,GAAb,CAAiBH,GAAjB,CAAV;;EACA,IAAID,KAAK,CAACK,OAAV,EAAmB;IACjB,OAAO5B,sBAAsB,CAACuB,KAAK,CAACK,OAAN,CAAcH,CAAd,CAAD,CAA7B;EACD;;EACD,OAAQ,GAAEA,CAAE,EAAZ;AACD;;AAED,MAAMpB,SAAS,GAAGH,aAAa,CAAE2B,KAAD,KAA2B;EACzDb,QAAQ,EAAEnB,GAAI;AAChB;AACA;AACA,qBAAqBgC,KAAK,CAACC,UAAN,CAAiBC,gBAAiB;AACvD,iBAAiBF,KAAK,CAACG,OAAN,CAAc,IAAd,EAAoB,CAApB,CAAuB;AACxC;AACA,GAP2D;EAQzDX,SAAS,EAAExB,GAAI;AACjB,kBAAkBgC,KAAK,CAACI,MAAN,CAAaC,MAAb,CAAoBC,KAAM;AAC5C;AAV2D,CAA3B,CAAD,CAA/B"},"metadata":{},"sourceType":"module"}