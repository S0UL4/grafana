{"ast":null,"code":"import { css } from '@emotion/css';\nimport Prism from 'prismjs';\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport { isValidGoDuration } from '@grafana/data';\nimport { getTemplateSrv, isFetchError } from '@grafana/runtime';\nimport { InlineFieldRow, InlineField, Input, QueryField, SlatePrism, BracesPlugin, Alert, useStyles2, fuzzyMatch, Select } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\nimport TempoLanguageProvider from '../language_provider';\nimport { tokenizer } from '../syntax';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst PRISM_LANGUAGE = 'tempo';\nconst durationPlaceholder = 'e.g. 1.2s, 100ms';\nconst plugins = [BracesPlugin(), SlatePrism({\n  onlyIn: node => node.object === 'block' && node.type === 'code_block',\n  getSyntax: () => PRISM_LANGUAGE\n})];\nPrism.languages[PRISM_LANGUAGE] = tokenizer;\n\nconst NativeSearch = ({\n  datasource,\n  query,\n  onChange,\n  onBlur,\n  onRunQuery\n}) => {\n  const styles = useStyles2(getStyles);\n  const languageProvider = useMemo(() => new TempoLanguageProvider(datasource), [datasource]);\n  const [hasSyntaxLoaded, setHasSyntaxLoaded] = useState(false);\n  const [serviceOptions, setServiceOptions] = useState();\n  const [spanOptions, setSpanOptions] = useState();\n  const [error, setError] = useState(null);\n  const [inputErrors, setInputErrors] = useState({});\n  const [isLoading, setIsLoading] = useState({\n    serviceName: false,\n    spanName: false\n  });\n  const loadOptions = useCallback(async (name, query = '') => {\n    const lpName = name === 'serviceName' ? 'service.name' : 'name';\n    setIsLoading(prevValue => Object.assign({}, prevValue, {\n      [name]: true\n    }));\n\n    try {\n      const options = await languageProvider.getOptions(lpName);\n      const filteredOptions = options.filter(item => item.value ? fuzzyMatch(item.value, query).found : false);\n      return filteredOptions;\n    } catch (error) {\n      if (isFetchError(error) && (error === null || error === void 0 ? void 0 : error.status) === 404) {\n        setError(error);\n      } else if (error instanceof Error) {\n        dispatch(notifyApp(createErrorNotification('Error', error)));\n      }\n\n      return [];\n    } finally {\n      setIsLoading(prevValue => Object.assign({}, prevValue, {\n        [name]: false\n      }));\n    }\n  }, [languageProvider]);\n  useEffect(() => {\n    const fetchOptions = async () => {\n      try {\n        const [services, spans] = await Promise.all([loadOptions('serviceName'), loadOptions('spanName')]);\n        setServiceOptions(services);\n        setSpanOptions(spans);\n      } catch (error) {\n        // Display message if Tempo is connected but search 404's\n        if (isFetchError(error) && (error === null || error === void 0 ? void 0 : error.status) === 404) {\n          setError(error);\n        } else if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n\n    fetchOptions();\n  }, [languageProvider, loadOptions]);\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        await languageProvider.start();\n        setHasSyntaxLoaded(true);\n      } catch (error) {\n        if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n\n    fetchTags();\n  }, [languageProvider]);\n\n  const onTypeahead = async typeahead => {\n    return await languageProvider.provideCompletionItems(typeahead);\n  };\n\n  const cleanText = text => {\n    const splittedText = text.split(/\\s+(?=([^\"]*\"[^\"]*\")*[^\"]*$)/g);\n\n    if (splittedText.length > 1) {\n      return splittedText[splittedText.length - 1];\n    }\n\n    return text;\n  };\n\n  const onKeyDown = keyEvent => {\n    if (keyEvent.key === 'Enter' && (keyEvent.shiftKey || keyEvent.ctrlKey)) {\n      onRunQuery();\n    }\n  };\n\n  const templateSrv = getTemplateSrv();\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n        children: /*#__PURE__*/_jsx(InlineField, {\n          label: \"Service Name\",\n          labelWidth: 14,\n          grow: true,\n          children: /*#__PURE__*/_jsx(Select, {\n            inputId: \"service\",\n            options: serviceOptions,\n            onOpenMenu: () => {\n              loadOptions('serviceName');\n            },\n            isLoading: isLoading.serviceName,\n            value: (serviceOptions === null || serviceOptions === void 0 ? void 0 : serviceOptions.find(v => (v === null || v === void 0 ? void 0 : v.value) === query.serviceName)) || undefined,\n            onChange: v => {\n              onChange(Object.assign({}, query, {\n                serviceName: (v === null || v === void 0 ? void 0 : v.value) || undefined\n              }));\n            },\n            placeholder: \"Select a service\",\n            isClearable: true,\n            onKeyDown: onKeyDown,\n            \"aria-label\": 'select-service-name'\n          })\n        })\n      }), /*#__PURE__*/_jsx(InlineFieldRow, {\n        children: /*#__PURE__*/_jsx(InlineField, {\n          label: \"Span Name\",\n          labelWidth: 14,\n          grow: true,\n          children: /*#__PURE__*/_jsx(Select, {\n            inputId: \"spanName\",\n            options: spanOptions,\n            onOpenMenu: () => {\n              loadOptions('spanName');\n            },\n            isLoading: isLoading.spanName,\n            value: (spanOptions === null || spanOptions === void 0 ? void 0 : spanOptions.find(v => (v === null || v === void 0 ? void 0 : v.value) === query.spanName)) || undefined,\n            onChange: v => {\n              onChange(Object.assign({}, query, {\n                spanName: (v === null || v === void 0 ? void 0 : v.value) || undefined\n              }));\n            },\n            placeholder: \"Select a span\",\n            isClearable: true,\n            onKeyDown: onKeyDown,\n            \"aria-label\": 'select-span-name'\n          })\n        })\n      }), /*#__PURE__*/_jsx(InlineFieldRow, {\n        children: /*#__PURE__*/_jsx(InlineField, {\n          label: \"Tags\",\n          labelWidth: 14,\n          grow: true,\n          tooltip: \"Values should be in the logfmt format.\",\n          children: /*#__PURE__*/_jsx(QueryField, {\n            additionalPlugins: plugins,\n            query: query.search,\n            onTypeahead: onTypeahead,\n            onBlur: onBlur,\n            onChange: value => {\n              onChange(Object.assign({}, query, {\n                search: value\n              }));\n            },\n            placeholder: \"http.status_code=200 error=true\",\n            cleanText: cleanText,\n            onRunQuery: onRunQuery,\n            syntaxLoaded: hasSyntaxLoaded,\n            portalOrigin: \"tempo\"\n          })\n        })\n      }), /*#__PURE__*/_jsx(InlineFieldRow, {\n        children: /*#__PURE__*/_jsx(InlineField, {\n          label: \"Min Duration\",\n          invalid: !!inputErrors.minDuration,\n          labelWidth: 14,\n          grow: true,\n          children: /*#__PURE__*/_jsx(Input, {\n            id: \"minDuration\",\n            value: query.minDuration || '',\n            placeholder: durationPlaceholder,\n            onBlur: () => {\n              var _query$minDuration;\n\n              const templatedMinDuration = templateSrv.replace((_query$minDuration = query.minDuration) !== null && _query$minDuration !== void 0 ? _query$minDuration : '');\n\n              if (query.minDuration && !isValidGoDuration(templatedMinDuration)) {\n                setInputErrors(Object.assign({}, inputErrors, {\n                  minDuration: true\n                }));\n              } else {\n                setInputErrors(Object.assign({}, inputErrors, {\n                  minDuration: false\n                }));\n              }\n            },\n            onChange: v => onChange(Object.assign({}, query, {\n              minDuration: v.currentTarget.value\n            })),\n            onKeyDown: onKeyDown\n          })\n        })\n      }), /*#__PURE__*/_jsx(InlineFieldRow, {\n        children: /*#__PURE__*/_jsx(InlineField, {\n          label: \"Max Duration\",\n          invalid: !!inputErrors.maxDuration,\n          labelWidth: 14,\n          grow: true,\n          children: /*#__PURE__*/_jsx(Input, {\n            id: \"maxDuration\",\n            value: query.maxDuration || '',\n            placeholder: durationPlaceholder,\n            onBlur: () => {\n              var _query$maxDuration;\n\n              const templatedMaxDuration = templateSrv.replace((_query$maxDuration = query.maxDuration) !== null && _query$maxDuration !== void 0 ? _query$maxDuration : '');\n\n              if (query.maxDuration && !isValidGoDuration(templatedMaxDuration)) {\n                setInputErrors(Object.assign({}, inputErrors, {\n                  maxDuration: true\n                }));\n              } else {\n                setInputErrors(Object.assign({}, inputErrors, {\n                  maxDuration: false\n                }));\n              }\n            },\n            onChange: v => onChange(Object.assign({}, query, {\n              maxDuration: v.currentTarget.value\n            })),\n            onKeyDown: onKeyDown\n          })\n        })\n      }), /*#__PURE__*/_jsx(InlineFieldRow, {\n        children: /*#__PURE__*/_jsx(InlineField, {\n          label: \"Limit\",\n          invalid: !!inputErrors.limit,\n          labelWidth: 14,\n          grow: true,\n          tooltip: \"Maximum numbers of returned results\",\n          children: /*#__PURE__*/_jsx(Input, {\n            id: \"limit\",\n            value: query.limit || '',\n            type: \"number\",\n            onChange: v => {\n              let limit = v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined;\n\n              if (limit && (!Number.isInteger(limit) || limit <= 0)) {\n                setInputErrors(Object.assign({}, inputErrors, {\n                  limit: true\n                }));\n              } else {\n                setInputErrors(Object.assign({}, inputErrors, {\n                  limit: false\n                }));\n              }\n\n              onChange(Object.assign({}, query, {\n                limit: v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined\n              }));\n            },\n            onKeyDown: onKeyDown\n          })\n        })\n      })]\n    }), error ? /*#__PURE__*/_jsxs(Alert, {\n      title: \"Unable to connect to Tempo search\",\n      severity: \"info\",\n      className: styles.alert,\n      children: [\"Please ensure that Tempo is configured with search enabled. If you would like to hide this tab, you can configure it in the \", /*#__PURE__*/_jsx(\"a\", {\n        href: `/datasources/edit/${datasource.uid}`,\n        children: \"datasource settings\"\n      }), \".\"]\n    }) : null]\n  });\n};\n\nexport default NativeSearch;\n\nconst getStyles = theme => ({\n  container: css`\n    max-width: 500px;\n  `,\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `\n});","map":{"version":3,"names":["css","Prism","React","useCallback","useState","useEffect","useMemo","isValidGoDuration","getTemplateSrv","isFetchError","InlineFieldRow","InlineField","Input","QueryField","SlatePrism","BracesPlugin","Alert","useStyles2","fuzzyMatch","Select","notifyApp","createErrorNotification","dispatch","TempoLanguageProvider","tokenizer","PRISM_LANGUAGE","durationPlaceholder","plugins","onlyIn","node","object","type","getSyntax","languages","NativeSearch","datasource","query","onChange","onBlur","onRunQuery","styles","getStyles","languageProvider","hasSyntaxLoaded","setHasSyntaxLoaded","serviceOptions","setServiceOptions","spanOptions","setSpanOptions","error","setError","inputErrors","setInputErrors","isLoading","setIsLoading","serviceName","spanName","loadOptions","name","lpName","prevValue","options","getOptions","filteredOptions","filter","item","value","found","status","Error","fetchOptions","services","spans","Promise","all","fetchTags","start","onTypeahead","typeahead","provideCompletionItems","cleanText","text","splittedText","split","length","onKeyDown","keyEvent","key","shiftKey","ctrlKey","templateSrv","container","find","v","undefined","search","minDuration","templatedMinDuration","replace","currentTarget","maxDuration","templatedMaxDuration","limit","parseInt","Number","isInteger","alert","uid","theme","spacing"],"sources":["/home/soula/grafana/public/app/plugins/datasource/tempo/QueryEditor/NativeSearch.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport Prism from 'prismjs';\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport { Node } from 'slate';\n\nimport { GrafanaTheme2, isValidGoDuration, SelectableValue } from '@grafana/data';\nimport { FetchError, getTemplateSrv, isFetchError, TemplateSrv } from '@grafana/runtime';\nimport {\n  InlineFieldRow,\n  InlineField,\n  Input,\n  QueryField,\n  SlatePrism,\n  BracesPlugin,\n  TypeaheadInput,\n  TypeaheadOutput,\n  Alert,\n  useStyles2,\n  fuzzyMatch,\n  Select,\n} from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { TempoDatasource, TempoQuery } from '../datasource';\nimport TempoLanguageProvider from '../language_provider';\nimport { tokenizer } from '../syntax';\n\ninterface Props {\n  datasource: TempoDatasource;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n  onBlur?: () => void;\n  onRunQuery: () => void;\n}\n\nconst PRISM_LANGUAGE = 'tempo';\nconst durationPlaceholder = 'e.g. 1.2s, 100ms';\nconst plugins = [\n  BracesPlugin(),\n  SlatePrism({\n    onlyIn: (node: Node) => node.object === 'block' && node.type === 'code_block',\n    getSyntax: () => PRISM_LANGUAGE,\n  }),\n];\n\nPrism.languages[PRISM_LANGUAGE] = tokenizer;\n\nconst NativeSearch = ({ datasource, query, onChange, onBlur, onRunQuery }: Props) => {\n  const styles = useStyles2(getStyles);\n  const languageProvider = useMemo(() => new TempoLanguageProvider(datasource), [datasource]);\n  const [hasSyntaxLoaded, setHasSyntaxLoaded] = useState(false);\n  const [serviceOptions, setServiceOptions] = useState<Array<SelectableValue<string>>>();\n  const [spanOptions, setSpanOptions] = useState<Array<SelectableValue<string>>>();\n  const [error, setError] = useState<Error | FetchError | null>(null);\n  const [inputErrors, setInputErrors] = useState<{ [key: string]: boolean }>({});\n  const [isLoading, setIsLoading] = useState<{\n    serviceName: boolean;\n    spanName: boolean;\n  }>({\n    serviceName: false,\n    spanName: false,\n  });\n\n  const loadOptions = useCallback(\n    async (name: string, query = '') => {\n      const lpName = name === 'serviceName' ? 'service.name' : 'name';\n      setIsLoading((prevValue) => ({ ...prevValue, [name]: true }));\n\n      try {\n        const options = await languageProvider.getOptions(lpName);\n        const filteredOptions = options.filter((item) => (item.value ? fuzzyMatch(item.value, query).found : false));\n        return filteredOptions;\n      } catch (error) {\n        if (isFetchError(error) && error?.status === 404) {\n          setError(error);\n        } else if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n        return [];\n      } finally {\n        setIsLoading((prevValue) => ({ ...prevValue, [name]: false }));\n      }\n    },\n    [languageProvider]\n  );\n\n  useEffect(() => {\n    const fetchOptions = async () => {\n      try {\n        const [services, spans] = await Promise.all([loadOptions('serviceName'), loadOptions('spanName')]);\n        setServiceOptions(services);\n        setSpanOptions(spans);\n      } catch (error) {\n        // Display message if Tempo is connected but search 404's\n        if (isFetchError(error) && error?.status === 404) {\n          setError(error);\n        } else if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchOptions();\n  }, [languageProvider, loadOptions]);\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        await languageProvider.start();\n        setHasSyntaxLoaded(true);\n      } catch (error) {\n        if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchTags();\n  }, [languageProvider]);\n\n  const onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    return await languageProvider.provideCompletionItems(typeahead);\n  };\n\n  const cleanText = (text: string) => {\n    const splittedText = text.split(/\\s+(?=([^\"]*\"[^\"]*\")*[^\"]*$)/g);\n    if (splittedText.length > 1) {\n      return splittedText[splittedText.length - 1];\n    }\n    return text;\n  };\n\n  const onKeyDown = (keyEvent: React.KeyboardEvent) => {\n    if (keyEvent.key === 'Enter' && (keyEvent.shiftKey || keyEvent.ctrlKey)) {\n      onRunQuery();\n    }\n  };\n\n  const templateSrv: TemplateSrv = getTemplateSrv();\n\n  return (\n    <>\n      <div className={styles.container}>\n        <InlineFieldRow>\n          <InlineField label=\"Service Name\" labelWidth={14} grow>\n            <Select\n              inputId=\"service\"\n              options={serviceOptions}\n              onOpenMenu={() => {\n                loadOptions('serviceName');\n              }}\n              isLoading={isLoading.serviceName}\n              value={serviceOptions?.find((v) => v?.value === query.serviceName) || undefined}\n              onChange={(v) => {\n                onChange({\n                  ...query,\n                  serviceName: v?.value || undefined,\n                });\n              }}\n              placeholder=\"Select a service\"\n              isClearable\n              onKeyDown={onKeyDown}\n              aria-label={'select-service-name'}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Span Name\" labelWidth={14} grow>\n            <Select\n              inputId=\"spanName\"\n              options={spanOptions}\n              onOpenMenu={() => {\n                loadOptions('spanName');\n              }}\n              isLoading={isLoading.spanName}\n              value={spanOptions?.find((v) => v?.value === query.spanName) || undefined}\n              onChange={(v) => {\n                onChange({\n                  ...query,\n                  spanName: v?.value || undefined,\n                });\n              }}\n              placeholder=\"Select a span\"\n              isClearable\n              onKeyDown={onKeyDown}\n              aria-label={'select-span-name'}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Tags\" labelWidth={14} grow tooltip=\"Values should be in the logfmt format.\">\n            <QueryField\n              additionalPlugins={plugins}\n              query={query.search}\n              onTypeahead={onTypeahead}\n              onBlur={onBlur}\n              onChange={(value) => {\n                onChange({\n                  ...query,\n                  search: value,\n                });\n              }}\n              placeholder=\"http.status_code=200 error=true\"\n              cleanText={cleanText}\n              onRunQuery={onRunQuery}\n              syntaxLoaded={hasSyntaxLoaded}\n              portalOrigin=\"tempo\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Min Duration\" invalid={!!inputErrors.minDuration} labelWidth={14} grow>\n            <Input\n              id=\"minDuration\"\n              value={query.minDuration || ''}\n              placeholder={durationPlaceholder}\n              onBlur={() => {\n                const templatedMinDuration = templateSrv.replace(query.minDuration ?? '');\n                if (query.minDuration && !isValidGoDuration(templatedMinDuration)) {\n                  setInputErrors({ ...inputErrors, minDuration: true });\n                } else {\n                  setInputErrors({ ...inputErrors, minDuration: false });\n                }\n              }}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  minDuration: v.currentTarget.value,\n                })\n              }\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Max Duration\" invalid={!!inputErrors.maxDuration} labelWidth={14} grow>\n            <Input\n              id=\"maxDuration\"\n              value={query.maxDuration || ''}\n              placeholder={durationPlaceholder}\n              onBlur={() => {\n                const templatedMaxDuration = templateSrv.replace(query.maxDuration ?? '');\n                if (query.maxDuration && !isValidGoDuration(templatedMaxDuration)) {\n                  setInputErrors({ ...inputErrors, maxDuration: true });\n                } else {\n                  setInputErrors({ ...inputErrors, maxDuration: false });\n                }\n              }}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  maxDuration: v.currentTarget.value,\n                })\n              }\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField\n            label=\"Limit\"\n            invalid={!!inputErrors.limit}\n            labelWidth={14}\n            grow\n            tooltip=\"Maximum numbers of returned results\"\n          >\n            <Input\n              id=\"limit\"\n              value={query.limit || ''}\n              type=\"number\"\n              onChange={(v) => {\n                let limit = v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined;\n                if (limit && (!Number.isInteger(limit) || limit <= 0)) {\n                  setInputErrors({ ...inputErrors, limit: true });\n                } else {\n                  setInputErrors({ ...inputErrors, limit: false });\n                }\n\n                onChange({\n                  ...query,\n                  limit: v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined,\n                });\n              }}\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </div>\n      {error ? (\n        <Alert title=\"Unable to connect to Tempo search\" severity=\"info\" className={styles.alert}>\n          Please ensure that Tempo is configured with search enabled. If you would like to hide this tab, you can\n          configure it in the <a href={`/datasources/edit/${datasource.uid}`}>datasource settings</a>.\n        </Alert>\n      ) : null}\n    </>\n  );\n};\n\nexport default NativeSearch;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 500px;\n  `,\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}