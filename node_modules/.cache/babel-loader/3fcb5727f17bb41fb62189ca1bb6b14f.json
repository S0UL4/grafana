{"ast":null,"code":"import React, { useCallback, useState } from 'react';\nimport { Input } from '@grafana/ui';\nimport { Field } from '../Field';\nimport { setTop } from './setQueryValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst TopField = ({\n  onQueryChange,\n  query\n}) => {\n  var _query$azureMonitor$t, _query$azureMonitor;\n\n  const [value, setValue] = useState((_query$azureMonitor$t = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.top) !== null && _query$azureMonitor$t !== void 0 ? _query$azureMonitor$t : ''); // As calling onQueryChange initiates a the datasource refresh, we only want to call it once\n  // the field loses focus\n\n  const handleChange = useCallback(ev => {\n    if (ev.target instanceof HTMLInputElement) {\n      setValue(ev.target.value);\n    }\n  }, []);\n  const handleBlur = useCallback(() => {\n    const newQuery = setTop(query, value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query, value]);\n  return /*#__PURE__*/_jsx(Field, {\n    label: \"Top\",\n    children: /*#__PURE__*/_jsx(Input, {\n      id: \"azure-monitor-metrics-top-field\",\n      value: value,\n      onChange: handleChange,\n      onBlur: handleBlur,\n      width: 16\n    })\n  });\n};\n\nexport default TopField;","map":{"version":3,"names":["React","useCallback","useState","Input","Field","setTop","TopField","onQueryChange","query","value","setValue","azureMonitor","top","handleChange","ev","target","HTMLInputElement","handleBlur","newQuery"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/TopField.tsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\nimport { Field } from '../Field';\n\nimport { setTop } from './setQueryValue';\n\nconst TopField: React.FC<AzureQueryEditorFieldProps> = ({ onQueryChange, query }) => {\n  const [value, setValue] = useState<string>(query.azureMonitor?.top ?? '');\n\n  // As calling onQueryChange initiates a the datasource refresh, we only want to call it once\n  // the field loses focus\n  const handleChange = useCallback((ev: React.FormEvent) => {\n    if (ev.target instanceof HTMLInputElement) {\n      setValue(ev.target.value);\n    }\n  }, []);\n\n  const handleBlur = useCallback(() => {\n    const newQuery = setTop(query, value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query, value]);\n\n  return (\n    <Field label=\"Top\">\n      <Input\n        id=\"azure-monitor-metrics-top-field\"\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        width={16}\n      />\n    </Field>\n  );\n};\n\nexport default TopField;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AAEA,SAASC,KAAT,QAAsB,aAAtB;AAGA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,MAAT,QAAuB,iBAAvB;;;AAEA,MAAMC,QAA8C,GAAG,CAAC;EAAEC,aAAF;EAAiBC;AAAjB,CAAD,KAA8B;EAAA;;EACnF,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,iDAASM,KAAK,CAACG,YAAf,wDAAS,oBAAoBC,GAA7B,yEAAoC,EAApC,CAAlC,CADmF,CAGnF;EACA;;EACA,MAAMC,YAAY,GAAGZ,WAAW,CAAEa,EAAD,IAAyB;IACxD,IAAIA,EAAE,CAACC,MAAH,YAAqBC,gBAAzB,EAA2C;MACzCN,QAAQ,CAACI,EAAE,CAACC,MAAH,CAAUN,KAAX,CAAR;IACD;EACF,CAJ+B,EAI7B,EAJ6B,CAAhC;EAMA,MAAMQ,UAAU,GAAGhB,WAAW,CAAC,MAAM;IACnC,MAAMiB,QAAQ,GAAGb,MAAM,CAACG,KAAD,EAAQC,KAAR,CAAvB;IACAF,aAAa,CAACW,QAAD,CAAb;EACD,CAH6B,EAG3B,CAACX,aAAD,EAAgBC,KAAhB,EAAuBC,KAAvB,CAH2B,CAA9B;EAKA,oBACE,KAAC,KAAD;IAAO,KAAK,EAAC,KAAb;IAAA,uBACE,KAAC,KAAD;MACE,EAAE,EAAC,iCADL;MAEE,KAAK,EAAEA,KAFT;MAGE,QAAQ,EAAEI,YAHZ;MAIE,MAAM,EAAEI,UAJV;MAKE,KAAK,EAAE;IALT;EADF,EADF;AAWD,CA3BD;;AA6BA,eAAeX,QAAf"},"metadata":{},"sourceType":"module"}