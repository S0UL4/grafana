{"ast":null,"code":"// Dynamic labels: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html\nexport const DYNAMIC_LABEL_PATTERNS = ['${DATAPOINT_COUNT}', '${FIRST}', '${FIRST_LAST_RANGE}', '${FIRST_LAST_TIME_RANGE}', '${FIRST_TIME}', '${FIRST_TIME_RELATIVE}', '${LABEL}', '${LAST}', '${LAST_TIME}', '${LAST_TIME_RELATIVE}', '${MAX}', '${MAX_TIME}', '${MAX_TIME_RELATIVE}', '${MIN}', '${MIN_MAX_RANGE}', '${MIN_MAX_TIME_RANGE}', '${MIN_TIME}', '${MIN_TIME_RELATIVE}', \"${PROP('AccountId')}\", \"${PROP('MetricName')}\", \"${PROP('Namespace')}\", \"${PROP('Period')}\", \"${PROP('Region')}\", \"${PROP('Stat')}\", '${SUM}'];\nexport const language = {\n  id: 'dynamicLabels',\n  ignoreCase: false,\n  tokenizer: {\n    root: [{\n      include: '@whitespace'\n    }, {\n      include: '@builtInFunctions'\n    }, {\n      include: '@string'\n    }, [/\\$\\{PROP\\('Dim.[a-zA-Z0-9-_]?.*'\\)\\}+/, 'predefined'] //custom handling for dimension patterns\n    ],\n    builtInFunctions: [[DYNAMIC_LABEL_PATTERNS.map(escapeRegExp).join('|'), 'predefined']],\n    whitespace: [[/\\s+/, 'white']],\n    string: []\n  }\n};\nexport const conf = {};\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}","map":{"version":3,"names":["DYNAMIC_LABEL_PATTERNS","language","id","ignoreCase","tokenizer","root","include","builtInFunctions","map","escapeRegExp","join","whitespace","string","conf","replace"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/dynamic-labels/language.ts"],"sourcesContent":["import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Dynamic labels: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html\nexport const DYNAMIC_LABEL_PATTERNS = [\n  '${DATAPOINT_COUNT}',\n  '${FIRST}',\n  '${FIRST_LAST_RANGE}',\n  '${FIRST_LAST_TIME_RANGE}',\n  '${FIRST_TIME}',\n  '${FIRST_TIME_RELATIVE}',\n  '${LABEL}',\n  '${LAST}',\n  '${LAST_TIME}',\n  '${LAST_TIME_RELATIVE}',\n  '${MAX}',\n  '${MAX_TIME}',\n  '${MAX_TIME_RELATIVE}',\n  '${MIN}',\n  '${MIN_MAX_RANGE}',\n  '${MIN_MAX_TIME_RANGE}',\n  '${MIN_TIME}',\n  '${MIN_TIME_RELATIVE}',\n  \"${PROP('AccountId')}\",\n  \"${PROP('MetricName')}\",\n  \"${PROP('Namespace')}\",\n  \"${PROP('Period')}\",\n  \"${PROP('Region')}\",\n  \"${PROP('Stat')}\",\n  '${SUM}',\n];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'dynamicLabels',\n  ignoreCase: false,\n  tokenizer: {\n    root: [\n      { include: '@whitespace' },\n      { include: '@builtInFunctions' },\n      { include: '@string' },\n      [/\\$\\{PROP\\('Dim.[a-zA-Z0-9-_]?.*'\\)\\}+/, 'predefined'], //custom handling for dimension patterns\n    ],\n    builtInFunctions: [[DYNAMIC_LABEL_PATTERNS.map(escapeRegExp).join('|'), 'predefined']],\n    whitespace: [[/\\s+/, 'white']],\n    string: [],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n"],"mappings":"AAEA;AACA,OAAO,MAAMA,sBAAsB,GAAG,CACpC,oBADoC,EAEpC,UAFoC,EAGpC,qBAHoC,EAIpC,0BAJoC,EAKpC,eALoC,EAMpC,wBANoC,EAOpC,UAPoC,EAQpC,SARoC,EASpC,cAToC,EAUpC,uBAVoC,EAWpC,QAXoC,EAYpC,aAZoC,EAapC,sBAboC,EAcpC,QAdoC,EAepC,kBAfoC,EAgBpC,uBAhBoC,EAiBpC,aAjBoC,EAkBpC,sBAlBoC,EAmBpC,sBAnBoC,EAoBpC,uBApBoC,EAqBpC,sBArBoC,EAsBpC,mBAtBoC,EAuBpC,mBAvBoC,EAwBpC,iBAxBoC,EAyBpC,QAzBoC,CAA/B;AA4BP,OAAO,MAAMC,QAA+C,GAAG;EAC7DC,EAAE,EAAE,eADyD;EAE7DC,UAAU,EAAE,KAFiD;EAG7DC,SAAS,EAAE;IACTC,IAAI,EAAE,CACJ;MAAEC,OAAO,EAAE;IAAX,CADI,EAEJ;MAAEA,OAAO,EAAE;IAAX,CAFI,EAGJ;MAAEA,OAAO,EAAE;IAAX,CAHI,EAIJ,CAAC,uCAAD,EAA0C,YAA1C,CAJI,CAIqD;IAJrD,CADG;IAOTC,gBAAgB,EAAE,CAAC,CAACP,sBAAsB,CAACQ,GAAvB,CAA2BC,YAA3B,EAAyCC,IAAzC,CAA8C,GAA9C,CAAD,EAAqD,YAArD,CAAD,CAPT;IAQTC,UAAU,EAAE,CAAC,CAAC,KAAD,EAAQ,OAAR,CAAD,CARH;IASTC,MAAM,EAAE;EATC;AAHkD,CAAxD;AAgBP,OAAO,MAAMC,IAAgD,GAAG,EAAzD;;AAEP,SAASJ,YAAT,CAAsBG,MAAtB,EAAsC;EACpC,OAAOA,MAAM,CAACE,OAAP,CAAe,qBAAf,EAAsC,MAAtC,CAAP,CADoC,CACkB;AACvD"},"metadata":{},"sourceType":"module"}