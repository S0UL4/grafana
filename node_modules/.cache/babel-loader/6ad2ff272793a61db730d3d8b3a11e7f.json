{"ast":null,"code":"var _div, _div2;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { DataTransformerID, standardTransformers } from '@grafana/data';\nimport { ConcatenateFrameNameMode } from '@grafana/data/src/transformations/transformers/concat';\nimport { Input, Select } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst nameModes = [{\n  value: ConcatenateFrameNameMode.FieldName,\n  label: 'Copy frame name to field name'\n}, {\n  value: ConcatenateFrameNameMode.Label,\n  label: 'Add a label with the frame name'\n}, {\n  value: ConcatenateFrameNameMode.Drop,\n  label: 'Ignore the frame name'\n}];\nexport class ConcatenateTransformerEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onModeChanged\", value => {\n      var _value$value;\n\n      const {\n        options,\n        onChange\n      } = this.props;\n      const frameNameMode = (_value$value = value.value) !== null && _value$value !== void 0 ? _value$value : ConcatenateFrameNameMode.FieldName;\n      onChange(Object.assign({}, options, {\n        frameNameMode\n      }));\n    });\n\n    _defineProperty(this, \"onLabelChanged\", evt => {\n      const {\n        options\n      } = this.props;\n      this.props.onChange(Object.assign({}, options, {\n        frameNameLabel: evt.target.value\n      }));\n    });\n  }\n\n  //---------------------------------------------------------\n  // Render\n  //---------------------------------------------------------\n  render() {\n    var _options$frameNameMod, _options$frameNameLab;\n\n    const {\n      options\n    } = this.props;\n    const frameNameMode = (_options$frameNameMod = options.frameNameMode) !== null && _options$frameNameMod !== void 0 ? _options$frameNameMod : ConcatenateFrameNameMode.FieldName;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label width-8\",\n            children: \"Name\"\n          })), /*#__PURE__*/_jsx(Select, {\n            className: \"width-18\",\n            options: nameModes,\n            value: nameModes.find(v => v.value === frameNameMode),\n            onChange: this.onModeChanged\n          })]\n        })\n      }), frameNameMode === ConcatenateFrameNameMode.Label && /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label width-8\",\n            children: \"Label\"\n          })), /*#__PURE__*/_jsx(Input, {\n            className: \"width-18\",\n            value: (_options$frameNameLab = options.frameNameLabel) !== null && _options$frameNameLab !== void 0 ? _options$frameNameLab : '',\n            placeholder: \"frame\",\n            onChange: this.onLabelChanged\n          })]\n        })\n      })]\n    });\n  }\n\n}\nexport const concatenateTransformRegistryItem = {\n  id: DataTransformerID.concatenate,\n  editor: ConcatenateTransformerEditor,\n  transformation: standardTransformers.concatenateTransformer,\n  name: 'Concatenate fields',\n  description: 'Combine all fields into a single frame.  Values will be appended with undefined values if not the same length.'\n};","map":{"version":3,"names":["React","DataTransformerID","standardTransformers","ConcatenateFrameNameMode","Input","Select","nameModes","value","FieldName","label","Label","Drop","ConcatenateTransformerEditor","PureComponent","constructor","props","options","onChange","frameNameMode","evt","frameNameLabel","target","render","find","v","onModeChanged","onLabelChanged","concatenateTransformRegistryItem","id","concatenate","editor","transformation","concatenateTransformer","name","description"],"sources":["/home/soula/grafana/public/app/features/transformers/editors/ConcatenateTransformerEditor.tsx"],"sourcesContent":["import React, { ChangeEvent } from 'react';\n\nimport {\n  DataTransformerID,\n  SelectableValue,\n  standardTransformers,\n  TransformerRegistryItem,\n  TransformerUIProps,\n} from '@grafana/data';\nimport {\n  ConcatenateFrameNameMode,\n  ConcatenateTransformerOptions,\n} from '@grafana/data/src/transformations/transformers/concat';\nimport { Input, Select } from '@grafana/ui';\n\ninterface ConcatenateTransformerEditorProps extends TransformerUIProps<ConcatenateTransformerOptions> {}\n\nconst nameModes: Array<SelectableValue<ConcatenateFrameNameMode>> = [\n  { value: ConcatenateFrameNameMode.FieldName, label: 'Copy frame name to field name' },\n  { value: ConcatenateFrameNameMode.Label, label: 'Add a label with the frame name' },\n  { value: ConcatenateFrameNameMode.Drop, label: 'Ignore the frame name' },\n];\n\nexport class ConcatenateTransformerEditor extends React.PureComponent<ConcatenateTransformerEditorProps> {\n  constructor(props: ConcatenateTransformerEditorProps) {\n    super(props);\n  }\n\n  onModeChanged = (value: SelectableValue<ConcatenateFrameNameMode>) => {\n    const { options, onChange } = this.props;\n    const frameNameMode = value.value ?? ConcatenateFrameNameMode.FieldName;\n    onChange({\n      ...options,\n      frameNameMode,\n    });\n  };\n\n  onLabelChanged = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { options } = this.props;\n    this.props.onChange({\n      ...options,\n      frameNameLabel: evt.target.value,\n    });\n  };\n\n  //---------------------------------------------------------\n  // Render\n  //---------------------------------------------------------\n\n  render() {\n    const { options } = this.props;\n\n    const frameNameMode = options.frameNameMode ?? ConcatenateFrameNameMode.FieldName;\n\n    return (\n      <div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <div className=\"gf-form-label width-8\">Name</div>\n            <Select\n              className=\"width-18\"\n              options={nameModes}\n              value={nameModes.find((v) => v.value === frameNameMode)}\n              onChange={this.onModeChanged}\n            />\n          </div>\n        </div>\n        {frameNameMode === ConcatenateFrameNameMode.Label && (\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"gf-form-label width-8\">Label</div>\n              <Input\n                className=\"width-18\"\n                value={options.frameNameLabel ?? ''}\n                placeholder=\"frame\"\n                onChange={this.onLabelChanged}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const concatenateTransformRegistryItem: TransformerRegistryItem<ConcatenateTransformerOptions> = {\n  id: DataTransformerID.concatenate,\n  editor: ConcatenateTransformerEditor,\n  transformation: standardTransformers.concatenateTransformer,\n  name: 'Concatenate fields',\n  description:\n    'Combine all fields into a single frame.  Values will be appended with undefined values if not the same length.',\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAmC,OAAnC;AAEA,SACEC,iBADF,EAGEC,oBAHF,QAMO,eANP;AAOA,SACEC,wBADF,QAGO,uDAHP;AAIA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,aAA9B;;;AAIA,MAAMC,SAA2D,GAAG,CAClE;EAAEC,KAAK,EAAEJ,wBAAwB,CAACK,SAAlC;EAA6CC,KAAK,EAAE;AAApD,CADkE,EAElE;EAAEF,KAAK,EAAEJ,wBAAwB,CAACO,KAAlC;EAAyCD,KAAK,EAAE;AAAhD,CAFkE,EAGlE;EAAEF,KAAK,EAAEJ,wBAAwB,CAACQ,IAAlC;EAAwCF,KAAK,EAAE;AAA/C,CAHkE,CAApE;AAMA,OAAO,MAAMG,4BAAN,SAA2CZ,KAAK,CAACa,aAAjD,CAAkG;EACvGC,WAAW,CAACC,KAAD,EAA2C;IACpD,MAAMA,KAAN;;IADoD,uCAIrCR,KAAD,IAAsD;MAAA;;MACpE,MAAM;QAAES,OAAF;QAAWC;MAAX,IAAwB,KAAKF,KAAnC;MACA,MAAMG,aAAa,mBAAGX,KAAK,CAACA,KAAT,uDAAkBJ,wBAAwB,CAACK,SAA9D;MACAS,QAAQ,mBACHD,OADG;QAENE;MAFM,GAAR;IAID,CAXqD;;IAAA,wCAapCC,GAAD,IAAwC;MACvD,MAAM;QAAEH;MAAF,IAAc,KAAKD,KAAzB;MACA,KAAKA,KAAL,CAAWE,QAAX,mBACKD,OADL;QAEEI,cAAc,EAAED,GAAG,CAACE,MAAJ,CAAWd;MAF7B;IAID,CAnBqD;EAErD;;EAmBD;EACA;EACA;EAEAe,MAAM,GAAG;IAAA;;IACP,MAAM;MAAEN;IAAF,IAAc,KAAKD,KAAzB;IAEA,MAAMG,aAAa,4BAAGF,OAAO,CAACE,aAAX,yEAA4Bf,wBAAwB,CAACK,SAAxE;IAEA,oBACE;MAAA,wBACE;QAAK,SAAS,EAAC,gBAAf;QAAA,uBACE;UAAK,SAAS,EAAC,SAAf;UAAA,wCACE;YAAK,SAAS,EAAC,uBAAf;YAAA;UAAA,EADF,gBAEE,KAAC,MAAD;YACE,SAAS,EAAC,UADZ;YAEE,OAAO,EAAEF,SAFX;YAGE,KAAK,EAAEA,SAAS,CAACiB,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACjB,KAAF,KAAYW,aAAlC,CAHT;YAIE,QAAQ,EAAE,KAAKO;UAJjB,EAFF;QAAA;MADF,EADF,EAYGP,aAAa,KAAKf,wBAAwB,CAACO,KAA3C,iBACC;QAAK,SAAS,EAAC,gBAAf;QAAA,uBACE;UAAK,SAAS,EAAC,SAAf;UAAA,0CACE;YAAK,SAAS,EAAC,uBAAf;YAAA;UAAA,EADF,gBAEE,KAAC,KAAD;YACE,SAAS,EAAC,UADZ;YAEE,KAAK,2BAAEM,OAAO,CAACI,cAAV,yEAA4B,EAFnC;YAGE,WAAW,EAAC,OAHd;YAIE,QAAQ,EAAE,KAAKM;UAJjB,EAFF;QAAA;MADF,EAbJ;IAAA,EADF;EA4BD;;AA3DsG;AA8DzG,OAAO,MAAMC,gCAAwF,GAAG;EACtGC,EAAE,EAAE3B,iBAAiB,CAAC4B,WADgF;EAEtGC,MAAM,EAAElB,4BAF8F;EAGtGmB,cAAc,EAAE7B,oBAAoB,CAAC8B,sBAHiE;EAItGC,IAAI,EAAE,oBAJgG;EAKtGC,WAAW,EACT;AANoG,CAAjG"},"metadata":{},"sourceType":"module"}