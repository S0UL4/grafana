{"ast":null,"code":"import { VariableSupportType } from '@grafana/data';\nimport { LEGACY_VARIABLE_QUERY_EDITOR_NAME } from './editor/LegacyVariableQueryEditor';\nexport const isQuery = model => {\n  return model.type === 'query';\n};\nexport const isAdHoc = model => {\n  return model.type === 'adhoc';\n};\nexport const isConstant = model => {\n  return model.type === 'constant';\n};\nexport const isMulti = model => {\n  const withMulti = model;\n  return withMulti.hasOwnProperty('multi') && typeof withMulti.multi === 'boolean';\n};\nexport const hasOptions = model => {\n  return hasObjectProperty(model, 'options');\n};\nexport const hasCurrent = model => {\n  return hasObjectProperty(model, 'current');\n};\n\nfunction hasObjectProperty(model, property) {\n  if (!model) {\n    return false;\n  }\n\n  const withProperty = model;\n  return withProperty.hasOwnProperty(property) && typeof withProperty[property] === 'object';\n}\n\nexport function isLegacyAdHocDataSource(datasource) {\n  if (datasource === null) {\n    return false;\n  }\n\n  return typeof datasource === 'string';\n}\n\n/*\n * The following guard function are both TypeScript type guards.\n * They also make the basis for the logic used by variableQueryRunner and determining which QueryEditor to use\n * */\nexport const hasLegacyVariableSupport = datasource => {\n  return Boolean(datasource.metricFindQuery) && !Boolean(datasource.variables);\n};\nexport const hasStandardVariableSupport = datasource => {\n  if (!datasource.variables) {\n    return false;\n  }\n\n  if (datasource.variables.getType() !== VariableSupportType.Standard) {\n    return false;\n  }\n\n  const variableSupport = datasource.variables;\n  return Boolean(variableSupport.toDataQuery);\n};\nexport const hasCustomVariableSupport = datasource => {\n  if (!datasource.variables) {\n    return false;\n  }\n\n  if (datasource.variables.getType() !== VariableSupportType.Custom) {\n    return false;\n  }\n\n  const variableSupport = datasource.variables;\n  return Boolean(variableSupport.query) && Boolean(variableSupport.editor);\n};\nexport const hasDatasourceVariableSupport = datasource => {\n  if (!datasource.variables) {\n    return false;\n  }\n\n  return datasource.variables.getType() === VariableSupportType.Datasource;\n};\nexport function isLegacyQueryEditor(component, datasource) {\n  if (!component) {\n    return false;\n  }\n\n  return component.displayName === LEGACY_VARIABLE_QUERY_EDITOR_NAME || hasLegacyVariableSupport(datasource);\n}\nexport function isQueryEditor(component, datasource) {\n  if (!component) {\n    return false;\n  }\n\n  return component.displayName !== LEGACY_VARIABLE_QUERY_EDITOR_NAME && (hasDatasourceVariableSupport(datasource) || hasStandardVariableSupport(datasource) || hasCustomVariableSupport(datasource));\n}","map":{"version":3,"names":["VariableSupportType","LEGACY_VARIABLE_QUERY_EDITOR_NAME","isQuery","model","type","isAdHoc","isConstant","isMulti","withMulti","hasOwnProperty","multi","hasOptions","hasObjectProperty","hasCurrent","property","withProperty","isLegacyAdHocDataSource","datasource","hasLegacyVariableSupport","Boolean","metricFindQuery","variables","hasStandardVariableSupport","getType","Standard","variableSupport","toDataQuery","hasCustomVariableSupport","Custom","query","editor","hasDatasourceVariableSupport","Datasource","isLegacyQueryEditor","component","displayName","isQueryEditor"],"sources":["/home/soula/grafana/public/app/features/variables/guard.ts"],"sourcesContent":["import { ComponentType } from 'react';\nimport { Observable } from 'rxjs';\n\nimport {\n  CustomVariableSupport,\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceJsonData,\n  DataSourceRef,\n  MetricFindValue,\n  StandardVariableQuery,\n  StandardVariableSupport,\n  VariableModel,\n  VariableSupportType,\n} from '@grafana/data';\n\nimport { LEGACY_VARIABLE_QUERY_EDITOR_NAME } from './editor/LegacyVariableQueryEditor';\nimport {\n  AdHocVariableModel,\n  ConstantVariableModel,\n  QueryVariableModel,\n  VariableQueryEditorType,\n  VariableQueryEditorProps,\n  VariableWithMultiSupport,\n  VariableWithOptions,\n} from './types';\n\nexport const isQuery = (model: VariableModel): model is QueryVariableModel => {\n  return model.type === 'query';\n};\n\nexport const isAdHoc = (model: VariableModel): model is AdHocVariableModel => {\n  return model.type === 'adhoc';\n};\n\nexport const isConstant = (model: VariableModel): model is ConstantVariableModel => {\n  return model.type === 'constant';\n};\n\nexport const isMulti = (model: VariableModel): model is VariableWithMultiSupport => {\n  const withMulti = model as VariableWithMultiSupport;\n  return withMulti.hasOwnProperty('multi') && typeof withMulti.multi === 'boolean';\n};\n\nexport const hasOptions = (model: VariableModel): model is VariableWithOptions => {\n  return hasObjectProperty(model, 'options');\n};\n\nexport const hasCurrent = (model: VariableModel): model is VariableWithOptions => {\n  return hasObjectProperty(model, 'current');\n};\n\nfunction hasObjectProperty(model: VariableModel, property: string): model is VariableWithOptions {\n  if (!model) {\n    return false;\n  }\n\n  const withProperty = model as Record<string, any>;\n  return withProperty.hasOwnProperty(property) && typeof withProperty[property] === 'object';\n}\n\nexport function isLegacyAdHocDataSource(datasource: null | DataSourceRef | string): datasource is string {\n  if (datasource === null) {\n    return false;\n  }\n\n  return typeof datasource === 'string';\n}\n\ninterface DataSourceWithLegacyVariableSupport<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> extends DataSourceApi<TQuery, TOptions> {\n  metricFindQuery(query: any, options?: any): Promise<MetricFindValue[]>;\n  variables: undefined;\n}\n\ninterface DataSourceWithStandardVariableSupport<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> extends DataSourceApi<TQuery, TOptions> {\n  variables: {\n    getType(): VariableSupportType;\n    toDataQuery(query: StandardVariableQuery): TQuery;\n    query(request: DataQueryRequest<TQuery>): Observable<DataQueryResponse>;\n  };\n}\n\ninterface DataSourceWithCustomVariableSupport<\n  VariableQuery extends DataQuery = any,\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> extends DataSourceApi<TQuery, TOptions> {\n  variables: {\n    getType(): VariableSupportType;\n    editor: VariableQueryEditorType;\n    query(request: DataQueryRequest<TQuery>): Observable<DataQueryResponse>;\n  };\n}\n\ninterface DataSourceWithDatasourceVariableSupport<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> extends DataSourceApi<TQuery, TOptions> {\n  variables: {\n    getType(): VariableSupportType;\n  };\n}\n\n/*\n * The following guard function are both TypeScript type guards.\n * They also make the basis for the logic used by variableQueryRunner and determining which QueryEditor to use\n * */\nexport const hasLegacyVariableSupport = <\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n>(\n  datasource: DataSourceApi<TQuery, TOptions>\n): datasource is DataSourceWithLegacyVariableSupport<TQuery, TOptions> => {\n  return Boolean(datasource.metricFindQuery) && !Boolean(datasource.variables);\n};\n\nexport const hasStandardVariableSupport = <\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n>(\n  datasource: DataSourceApi<TQuery, TOptions>\n): datasource is DataSourceWithStandardVariableSupport<TQuery, TOptions> => {\n  if (!datasource.variables) {\n    return false;\n  }\n\n  if (datasource.variables.getType() !== VariableSupportType.Standard) {\n    return false;\n  }\n\n  const variableSupport = datasource.variables as StandardVariableSupport<DataSourceApi<TQuery, TOptions>>;\n\n  return Boolean(variableSupport.toDataQuery);\n};\n\nexport const hasCustomVariableSupport = <\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n>(\n  datasource: DataSourceApi<TQuery, TOptions>\n): datasource is DataSourceWithCustomVariableSupport<any, TQuery, TOptions> => {\n  if (!datasource.variables) {\n    return false;\n  }\n\n  if (datasource.variables.getType() !== VariableSupportType.Custom) {\n    return false;\n  }\n\n  const variableSupport = datasource.variables as CustomVariableSupport<DataSourceApi<TQuery, TOptions>>;\n\n  return Boolean(variableSupport.query) && Boolean(variableSupport.editor);\n};\n\nexport const hasDatasourceVariableSupport = <\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n>(\n  datasource: DataSourceApi<TQuery, TOptions>\n): datasource is DataSourceWithDatasourceVariableSupport<TQuery, TOptions> => {\n  if (!datasource.variables) {\n    return false;\n  }\n\n  return datasource.variables.getType() === VariableSupportType.Datasource;\n};\n\nexport function isLegacyQueryEditor<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n>(\n  component: VariableQueryEditorType,\n  datasource: DataSourceApi<TQuery, TOptions>\n): component is ComponentType<VariableQueryEditorProps> {\n  if (!component) {\n    return false;\n  }\n\n  return component.displayName === LEGACY_VARIABLE_QUERY_EDITOR_NAME || hasLegacyVariableSupport(datasource);\n}\n\nexport function isQueryEditor<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n>(\n  component: VariableQueryEditorType,\n  datasource: DataSourceApi<TQuery, TOptions>\n): component is VariableQueryEditorType {\n  if (!component) {\n    return false;\n  }\n\n  return (\n    component.displayName !== LEGACY_VARIABLE_QUERY_EDITOR_NAME &&\n    (hasDatasourceVariableSupport(datasource) ||\n      hasStandardVariableSupport(datasource) ||\n      hasCustomVariableSupport(datasource))\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}