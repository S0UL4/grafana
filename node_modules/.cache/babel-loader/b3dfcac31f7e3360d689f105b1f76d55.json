{"ast":null,"code":"import { set } from 'lodash';\nimport { useCallback } from 'react';\nconst EMPTY_ARRAY = [];\n/*\n * react-hook-form's own useFieldArray is uncontrolled and super buggy.\n * this is a simple controlled version. It's dead simple and more robust at the cost of re-rendering the form\n * on every change to the sub forms in the array.\n * Warning: you'll have to take care of your own unique identiifer to use as `key` for the ReactNode array.\n * Using index will cause problems.\n */\n\nexport function useControlledFieldArray(options) {\n  var _ref, _watch;\n\n  const {\n    name,\n    formAPI,\n    defaults,\n    softDelete\n  } = options;\n  const {\n    watch,\n    getValues,\n    reset,\n    setValue\n  } = formAPI;\n  const fields = (_ref = (_watch = watch(name)) !== null && _watch !== void 0 ? _watch : defaults) !== null && _ref !== void 0 ? _ref : EMPTY_ARRAY;\n  const update = useCallback(updateFn => {\n    const values = JSON.parse(JSON.stringify(getValues()));\n    const newItems = updateFn(fields !== null && fields !== void 0 ? fields : []);\n    reset(set(values, name, newItems));\n  }, [getValues, name, reset, fields]);\n  return {\n    fields,\n    append: useCallback(values => update(fields => [...fields, values]), [update]),\n    remove: useCallback(index => {\n      if (softDelete) {\n        setValue(`${name}.${index}.__deleted`, true);\n      } else {\n        update(items => {\n          const newItems = items.slice();\n          newItems.splice(index, 1);\n          return newItems;\n        });\n      }\n    }, [update, name, setValue, softDelete])\n  };\n}","map":{"version":3,"names":["set","useCallback","EMPTY_ARRAY","useControlledFieldArray","options","name","formAPI","defaults","softDelete","watch","getValues","reset","setValue","fields","update","updateFn","values","JSON","parse","stringify","newItems","append","remove","index","items","slice","splice"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/hooks/useControlledFieldArray.ts"],"sourcesContent":["import { set } from 'lodash';\nimport { useCallback } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\n\ninterface Options<R> {\n  name: string;\n  formAPI: UseFormReturn<any>;\n  defaults?: R[];\n\n  // if true, sets `__deleted: true` but does not remove item from the array in values\n  softDelete?: boolean;\n}\n\nexport type ControlledField<R> = R & {\n  __deleted?: boolean;\n};\n\nconst EMPTY_ARRAY = [] as const;\n\n/*\n * react-hook-form's own useFieldArray is uncontrolled and super buggy.\n * this is a simple controlled version. It's dead simple and more robust at the cost of re-rendering the form\n * on every change to the sub forms in the array.\n * Warning: you'll have to take care of your own unique identiifer to use as `key` for the ReactNode array.\n * Using index will cause problems.\n */\nexport function useControlledFieldArray<R>(options: Options<R>) {\n  const { name, formAPI, defaults, softDelete } = options;\n  const { watch, getValues, reset, setValue } = formAPI;\n\n  const fields: Array<ControlledField<R>> = watch(name) ?? defaults ?? EMPTY_ARRAY;\n\n  const update = useCallback(\n    (updateFn: (fields: R[]) => R[]) => {\n      const values = JSON.parse(JSON.stringify(getValues()));\n      const newItems = updateFn(fields ?? []);\n      reset(set(values, name, newItems));\n    },\n    [getValues, name, reset, fields]\n  );\n\n  return {\n    fields,\n    append: useCallback((values: R) => update((fields) => [...fields, values]), [update]),\n    remove: useCallback(\n      (index: number) => {\n        if (softDelete) {\n          setValue(`${name}.${index}.__deleted`, true);\n        } else {\n          update((items) => {\n            const newItems = items.slice();\n            newItems.splice(index, 1);\n            return newItems;\n          });\n        }\n      },\n      [update, name, setValue, softDelete]\n    ),\n  };\n}\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,QAApB;AACA,SAASC,WAAT,QAA4B,OAA5B;AAgBA,MAAMC,WAAW,GAAG,EAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAoCC,OAApC,EAAyD;EAAA;;EAC9D,MAAM;IAAEC,IAAF;IAAQC,OAAR;IAAiBC,QAAjB;IAA2BC;EAA3B,IAA0CJ,OAAhD;EACA,MAAM;IAAEK,KAAF;IAASC,SAAT;IAAoBC,KAApB;IAA2BC;EAA3B,IAAwCN,OAA9C;EAEA,MAAMO,MAAiC,qBAAGJ,KAAK,CAACJ,IAAD,CAAR,2CAAkBE,QAAlB,uCAA8BL,WAArE;EAEA,MAAMY,MAAM,GAAGb,WAAW,CACvBc,QAAD,IAAoC;IAClC,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeT,SAAS,EAAxB,CAAX,CAAf;IACA,MAAMU,QAAQ,GAAGL,QAAQ,CAACF,MAAD,aAACA,MAAD,cAACA,MAAD,GAAW,EAAX,CAAzB;IACAF,KAAK,CAACX,GAAG,CAACgB,MAAD,EAASX,IAAT,EAAee,QAAf,CAAJ,CAAL;EACD,CALuB,EAMxB,CAACV,SAAD,EAAYL,IAAZ,EAAkBM,KAAlB,EAAyBE,MAAzB,CANwB,CAA1B;EASA,OAAO;IACLA,MADK;IAELQ,MAAM,EAAEpB,WAAW,CAAEe,MAAD,IAAeF,MAAM,CAAED,MAAD,IAAY,CAAC,GAAGA,MAAJ,EAAYG,MAAZ,CAAb,CAAtB,EAAyD,CAACF,MAAD,CAAzD,CAFd;IAGLQ,MAAM,EAAErB,WAAW,CAChBsB,KAAD,IAAmB;MACjB,IAAIf,UAAJ,EAAgB;QACdI,QAAQ,CAAE,GAAEP,IAAK,IAAGkB,KAAM,YAAlB,EAA+B,IAA/B,CAAR;MACD,CAFD,MAEO;QACLT,MAAM,CAAEU,KAAD,IAAW;UAChB,MAAMJ,QAAQ,GAAGI,KAAK,CAACC,KAAN,EAAjB;UACAL,QAAQ,CAACM,MAAT,CAAgBH,KAAhB,EAAuB,CAAvB;UACA,OAAOH,QAAP;QACD,CAJK,CAAN;MAKD;IACF,CAXgB,EAYjB,CAACN,MAAD,EAAST,IAAT,EAAeO,QAAf,EAAyBJ,UAAzB,CAZiB;EAHd,CAAP;AAkBD"},"metadata":{},"sourceType":"module"}