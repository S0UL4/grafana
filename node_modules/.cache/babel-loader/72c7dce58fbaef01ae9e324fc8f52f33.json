{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { FormattedValueDisplay } from '../FormattedValueDisplay/FormattedValueDisplay';\nimport { buildLayout } from './BigValueLayout';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport let BigValueColorMode;\n\n(function (BigValueColorMode) {\n  BigValueColorMode[\"Value\"] = \"value\";\n  BigValueColorMode[\"Background\"] = \"background\";\n  BigValueColorMode[\"None\"] = \"none\";\n})(BigValueColorMode || (BigValueColorMode = {}));\n\nexport let BigValueGraphMode;\n\n(function (BigValueGraphMode) {\n  BigValueGraphMode[\"None\"] = \"none\";\n  BigValueGraphMode[\"Line\"] = \"line\";\n  BigValueGraphMode[\"Area\"] = \"area\";\n})(BigValueGraphMode || (BigValueGraphMode = {}));\n\nexport let BigValueJustifyMode;\n/**\n * Options for how the value & title are to be displayed\n */\n\n(function (BigValueJustifyMode) {\n  BigValueJustifyMode[\"Auto\"] = \"auto\";\n  BigValueJustifyMode[\"Center\"] = \"center\";\n})(BigValueJustifyMode || (BigValueJustifyMode = {}));\n\nexport let BigValueTextMode;\n\n(function (BigValueTextMode) {\n  BigValueTextMode[\"Auto\"] = \"auto\";\n  BigValueTextMode[\"Value\"] = \"value\";\n  BigValueTextMode[\"ValueAndName\"] = \"value_and_name\";\n  BigValueTextMode[\"Name\"] = \"name\";\n  BigValueTextMode[\"None\"] = \"none\";\n})(BigValueTextMode || (BigValueTextMode = {}));\n\nexport class BigValue extends PureComponent {\n  render() {\n    const {\n      onClick,\n      className,\n      hasLinks\n    } = this.props;\n    const layout = buildLayout(this.props);\n    const panelStyles = layout.getPanelStyles();\n    const valueAndTitleContainerStyles = layout.getValueAndTitleContainerStyles();\n    const valueStyles = layout.getValueStyles();\n    const titleStyles = layout.getTitleStyles();\n    const textValues = layout.textValues; // When there is an outer data link this tooltip will override the outer native tooltip\n\n    const tooltip = hasLinks ? undefined : textValues.tooltip;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: className,\n      style: panelStyles,\n      onClick: onClick,\n      title: tooltip,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        style: valueAndTitleContainerStyles,\n        children: [textValues.title && /*#__PURE__*/_jsx(\"div\", {\n          style: titleStyles,\n          children: textValues.title\n        }), /*#__PURE__*/_jsx(FormattedValueDisplay, {\n          value: textValues,\n          style: valueStyles\n        })]\n      }), layout.renderChart()]\n    });\n  }\n\n}\n\n_defineProperty(BigValue, \"defaultProps\", {\n  justifyMode: BigValueJustifyMode.Auto\n});","map":{"version":3,"names":["React","PureComponent","FormattedValueDisplay","buildLayout","BigValueColorMode","BigValueGraphMode","BigValueJustifyMode","BigValueTextMode","BigValue","render","onClick","className","hasLinks","props","layout","panelStyles","getPanelStyles","valueAndTitleContainerStyles","getValueAndTitleContainerStyles","valueStyles","getValueStyles","titleStyles","getTitleStyles","textValues","tooltip","undefined","title","renderChart","justifyMode","Auto"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/BigValue/BigValue.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { DisplayValue, DisplayValueAlignmentFactors, FieldSparkline } from '@grafana/data';\nimport { VizTextDisplayOptions } from '@grafana/schema';\n\nimport { Themeable2 } from '../../types';\nimport { FormattedValueDisplay } from '../FormattedValueDisplay/FormattedValueDisplay';\n\nimport { buildLayout } from './BigValueLayout';\n\nexport enum BigValueColorMode {\n  Value = 'value',\n  Background = 'background',\n  None = 'none',\n}\n\nexport enum BigValueGraphMode {\n  None = 'none',\n  Line = 'line',\n  Area = 'area',\n}\n\nexport enum BigValueJustifyMode {\n  Auto = 'auto',\n  Center = 'center',\n}\n\n/**\n * Options for how the value & title are to be displayed\n */\nexport enum BigValueTextMode {\n  Auto = 'auto',\n  Value = 'value',\n  ValueAndName = 'value_and_name',\n  Name = 'name',\n  None = 'none',\n}\n\nexport interface Props extends Themeable2 {\n  /** Height of the component */\n  height: number;\n  /** Width of the component */\n  width: number;\n  /** Value displayed as Big Value */\n  value: DisplayValue;\n  /** Sparkline values for showing a graph under/behind the value  */\n  sparkline?: FieldSparkline;\n  /** onClick handler for the value */\n  onClick?: React.MouseEventHandler<HTMLElement>;\n  /** Custom styling */\n  className?: string;\n  /** Color mode for coloring the value or the background */\n  colorMode: BigValueColorMode;\n  /** Show a graph behind/under the value */\n  graphMode: BigValueGraphMode;\n  /** Auto justify value and text or center it */\n  justifyMode?: BigValueJustifyMode;\n  /** Factors that should influence the positioning of the text  */\n  alignmentFactors?: DisplayValueAlignmentFactors;\n  /** Explicit font size control */\n  text?: VizTextDisplayOptions;\n  /** Specify which text should be visible in the BigValue */\n  textMode?: BigValueTextMode;\n  /** If true disables the tooltip */\n  hasLinks?: boolean;\n\n  /**\n   * If part of a series of stat panes, this is the total number.\n   * Used by BigValueTextMode.Auto text mode.\n   */\n  count?: number;\n}\n\nexport class BigValue extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    justifyMode: BigValueJustifyMode.Auto,\n  };\n\n  render() {\n    const { onClick, className, hasLinks } = this.props;\n    const layout = buildLayout(this.props);\n    const panelStyles = layout.getPanelStyles();\n    const valueAndTitleContainerStyles = layout.getValueAndTitleContainerStyles();\n    const valueStyles = layout.getValueStyles();\n    const titleStyles = layout.getTitleStyles();\n    const textValues = layout.textValues;\n\n    // When there is an outer data link this tooltip will override the outer native tooltip\n    const tooltip = hasLinks ? undefined : textValues.tooltip;\n\n    return (\n      <div className={className} style={panelStyles} onClick={onClick} title={tooltip}>\n        <div style={valueAndTitleContainerStyles}>\n          {textValues.title && <div style={titleStyles}>{textValues.title}</div>}\n          <FormattedValueDisplay value={textValues} style={valueStyles} />\n        </div>\n        {layout.renderChart()}\n      </div>\n    );\n  }\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAMA,SAASC,qBAAT,QAAsC,gDAAtC;AAEA,SAASC,WAAT,QAA4B,kBAA5B;;;AAEA,WAAYC,iBAAZ;;WAAYA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAMZ,WAAYC,iBAAZ;;WAAYA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAMZ,WAAYC,mBAAZ;AAKA;AACA;AACA;;WAPYA,mB;EAAAA,mB;EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAQZ,WAAYC,gBAAZ;;WAAYA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;GAAAA,gB,KAAAA,gB;;AA2CZ,OAAO,MAAMC,QAAN,SAAuBP,aAAvB,CAA4C;EAKjDQ,MAAM,GAAG;IACP,MAAM;MAAEC,OAAF;MAAWC,SAAX;MAAsBC;IAAtB,IAAmC,KAAKC,KAA9C;IACA,MAAMC,MAAM,GAAGX,WAAW,CAAC,KAAKU,KAAN,CAA1B;IACA,MAAME,WAAW,GAAGD,MAAM,CAACE,cAAP,EAApB;IACA,MAAMC,4BAA4B,GAAGH,MAAM,CAACI,+BAAP,EAArC;IACA,MAAMC,WAAW,GAAGL,MAAM,CAACM,cAAP,EAApB;IACA,MAAMC,WAAW,GAAGP,MAAM,CAACQ,cAAP,EAApB;IACA,MAAMC,UAAU,GAAGT,MAAM,CAACS,UAA1B,CAPO,CASP;;IACA,MAAMC,OAAO,GAAGZ,QAAQ,GAAGa,SAAH,GAAeF,UAAU,CAACC,OAAlD;IAEA,oBACE;MAAK,SAAS,EAAEb,SAAhB;MAA2B,KAAK,EAAEI,WAAlC;MAA+C,OAAO,EAAEL,OAAxD;MAAiE,KAAK,EAAEc,OAAxE;MAAA,wBACE;QAAK,KAAK,EAAEP,4BAAZ;QAAA,WACGM,UAAU,CAACG,KAAX,iBAAoB;UAAK,KAAK,EAAEL,WAAZ;UAAA,UAA0BE,UAAU,CAACG;QAArC,EADvB,eAEE,KAAC,qBAAD;UAAuB,KAAK,EAAEH,UAA9B;UAA0C,KAAK,EAAEJ;QAAjD,EAFF;MAAA,EADF,EAKGL,MAAM,CAACa,WAAP,EALH;IAAA,EADF;EASD;;AA1BgD;;gBAAtCnB,Q,kBAC2B;EACpCoB,WAAW,EAAEtB,mBAAmB,CAACuB;AADG,C"},"metadata":{},"sourceType":"module"}