{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { locationService } from '@grafana/runtime';\nimport { PanelHeaderNotice } from './PanelHeaderNotice';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const PanelHeaderNotices = ({\n  frames,\n  panelId\n}) => {\n  const openInspect = useCallback((e, tab) => {\n    e.stopPropagation();\n    locationService.partial({\n      inspect: panelId,\n      inspectTab: tab\n    });\n  }, [panelId]); // dedupe on severity\n\n  const notices = {};\n\n  for (const frame of frames) {\n    if (!frame.meta || !frame.meta.notices) {\n      continue;\n    }\n\n    for (const notice of frame.meta.notices) {\n      notices[notice.severity] = notice;\n    }\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: Object.values(notices).map(notice => /*#__PURE__*/_jsx(PanelHeaderNotice, {\n      notice: notice,\n      onClick: openInspect\n    }, notice.severity))\n  });\n};","map":{"version":3,"names":["React","useCallback","locationService","PanelHeaderNotice","PanelHeaderNotices","frames","panelId","openInspect","e","tab","stopPropagation","partial","inspect","inspectTab","notices","frame","meta","notice","severity","Object","values","map"],"sources":["/home/soula/grafana/public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotices.tsx"],"sourcesContent":["import React, { FC, useCallback } from 'react';\n\nimport { DataFrame, QueryResultMetaNotice } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { PanelHeaderNotice } from './PanelHeaderNotice';\n\ninterface Props {\n  panelId: number;\n  frames: DataFrame[];\n}\n\nexport const PanelHeaderNotices: FC<Props> = ({ frames, panelId }) => {\n  const openInspect = useCallback(\n    (e: React.SyntheticEvent, tab: string) => {\n      e.stopPropagation();\n      locationService.partial({ inspect: panelId, inspectTab: tab });\n    },\n    [panelId]\n  );\n\n  // dedupe on severity\n  const notices: Record<string, QueryResultMetaNotice> = {};\n  for (const frame of frames) {\n    if (!frame.meta || !frame.meta.notices) {\n      continue;\n    }\n\n    for (const notice of frame.meta.notices) {\n      notices[notice.severity] = notice;\n    }\n  }\n\n  return (\n    <>\n      {Object.values(notices).map((notice) => (\n        <PanelHeaderNotice notice={notice} onClick={openInspect} key={notice.severity} />\n      ))}\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAoBC,WAApB,QAAuC,OAAvC;AAGA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,SAASC,iBAAT,QAAkC,qBAAlC;;;AAOA,OAAO,MAAMC,kBAA6B,GAAG,CAAC;EAAEC,MAAF;EAAUC;AAAV,CAAD,KAAyB;EACpE,MAAMC,WAAW,GAAGN,WAAW,CAC7B,CAACO,CAAD,EAA0BC,GAA1B,KAA0C;IACxCD,CAAC,CAACE,eAAF;IACAR,eAAe,CAACS,OAAhB,CAAwB;MAAEC,OAAO,EAAEN,OAAX;MAAoBO,UAAU,EAAEJ;IAAhC,CAAxB;EACD,CAJ4B,EAK7B,CAACH,OAAD,CAL6B,CAA/B,CADoE,CASpE;;EACA,MAAMQ,OAA8C,GAAG,EAAvD;;EACA,KAAK,MAAMC,KAAX,IAAoBV,MAApB,EAA4B;IAC1B,IAAI,CAACU,KAAK,CAACC,IAAP,IAAe,CAACD,KAAK,CAACC,IAAN,CAAWF,OAA/B,EAAwC;MACtC;IACD;;IAED,KAAK,MAAMG,MAAX,IAAqBF,KAAK,CAACC,IAAN,CAAWF,OAAhC,EAAyC;MACvCA,OAAO,CAACG,MAAM,CAACC,QAAR,CAAP,GAA2BD,MAA3B;IACD;EACF;;EAED,oBACE;IAAA,UACGE,MAAM,CAACC,MAAP,CAAcN,OAAd,EAAuBO,GAAvB,CAA4BJ,MAAD,iBAC1B,KAAC,iBAAD;MAAmB,MAAM,EAAEA,MAA3B;MAAmC,OAAO,EAAEV;IAA5C,GAA8DU,MAAM,CAACC,QAArE,CADD;EADH,EADF;AAOD,CA5BM"},"metadata":{},"sourceType":"module"}