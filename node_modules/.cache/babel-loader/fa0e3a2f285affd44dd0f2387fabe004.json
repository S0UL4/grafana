{"ast":null,"code":"export default class UrlBuilder {\n  static buildResourceUri(subscriptionId, resourceGroup, metricDefinition, resourceName) {\n    const metricDefinitionArray = metricDefinition.split('/');\n    const resourceNameArray = resourceName.split('/');\n    const provider = metricDefinitionArray.shift();\n    const urlArray = ['/subscriptions', subscriptionId, 'resourceGroups', resourceGroup, 'providers', provider];\n\n    for (const i in metricDefinitionArray) {\n      urlArray.push(metricDefinitionArray[i]);\n      urlArray.push(resourceNameArray[i]);\n    }\n\n    return urlArray.join('/');\n  }\n\n  static buildAzureMonitorGetMetricNamespacesUrl(baseUrl, apiVersion, query) {\n    let resourceUri;\n\n    if ('resourceUri' in query) {\n      resourceUri = query.resourceUri;\n    } else {\n      const {\n        subscription,\n        resourceGroup,\n        metricDefinition,\n        resourceName\n      } = query;\n      resourceUri = UrlBuilder.buildResourceUri(subscription, resourceGroup, metricDefinition, resourceName);\n    }\n\n    return `${baseUrl}${resourceUri}/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`;\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(baseUrl, apiVersion, query) {\n    let resourceUri;\n    const {\n      metricNamespace\n    } = query;\n\n    if ('resourceUri' in query) {\n      resourceUri = query.resourceUri;\n    } else {\n      const {\n        subscription,\n        resourceGroup,\n        metricDefinition,\n        resourceName\n      } = query;\n      resourceUri = UrlBuilder.buildResourceUri(subscription, resourceGroup, metricDefinition, resourceName);\n    }\n\n    return `${baseUrl}${resourceUri}/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}` + `&metricnamespace=${encodeURIComponent(metricNamespace)}`;\n  }\n\n}","map":{"version":3,"names":["UrlBuilder","buildResourceUri","subscriptionId","resourceGroup","metricDefinition","resourceName","metricDefinitionArray","split","resourceNameArray","provider","shift","urlArray","i","push","join","buildAzureMonitorGetMetricNamespacesUrl","baseUrl","apiVersion","query","resourceUri","subscription","buildAzureMonitorGetMetricNamesUrl","metricNamespace","encodeURIComponent"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/url_builder.ts"],"sourcesContent":["import { GetMetricNamespacesQuery, GetMetricNamesQuery } from '../types';\n\nexport default class UrlBuilder {\n  static buildResourceUri(\n    subscriptionId: string,\n    resourceGroup: string,\n    metricDefinition: string,\n    resourceName: string\n  ) {\n    const metricDefinitionArray = metricDefinition.split('/');\n    const resourceNameArray = resourceName.split('/');\n    const provider = metricDefinitionArray.shift();\n    const urlArray = ['/subscriptions', subscriptionId, 'resourceGroups', resourceGroup, 'providers', provider];\n    for (const i in metricDefinitionArray) {\n      urlArray.push(metricDefinitionArray[i]);\n      urlArray.push(resourceNameArray[i]);\n    }\n    return urlArray.join('/');\n  }\n\n  static buildAzureMonitorGetMetricNamespacesUrl(baseUrl: string, apiVersion: string, query: GetMetricNamespacesQuery) {\n    let resourceUri: string;\n\n    if ('resourceUri' in query) {\n      resourceUri = query.resourceUri;\n    } else {\n      const { subscription, resourceGroup, metricDefinition, resourceName } = query;\n      resourceUri = UrlBuilder.buildResourceUri(subscription, resourceGroup, metricDefinition, resourceName);\n    }\n\n    return `${baseUrl}${resourceUri}/providers/microsoft.insights/metricNamespaces?api-version=${apiVersion}`;\n  }\n\n  static buildAzureMonitorGetMetricNamesUrl(baseUrl: string, apiVersion: string, query: GetMetricNamesQuery) {\n    let resourceUri: string;\n    const { metricNamespace } = query;\n\n    if ('resourceUri' in query) {\n      resourceUri = query.resourceUri;\n    } else {\n      const { subscription, resourceGroup, metricDefinition, resourceName } = query;\n      resourceUri = UrlBuilder.buildResourceUri(subscription, resourceGroup, metricDefinition, resourceName);\n    }\n\n    return (\n      `${baseUrl}${resourceUri}/providers/microsoft.insights/metricdefinitions?api-version=${apiVersion}` +\n      `&metricnamespace=${encodeURIComponent(metricNamespace)}`\n    );\n  }\n}\n"],"mappings":"AAEA,eAAe,MAAMA,UAAN,CAAiB;EACP,OAAhBC,gBAAgB,CACrBC,cADqB,EAErBC,aAFqB,EAGrBC,gBAHqB,EAIrBC,YAJqB,EAKrB;IACA,MAAMC,qBAAqB,GAAGF,gBAAgB,CAACG,KAAjB,CAAuB,GAAvB,CAA9B;IACA,MAAMC,iBAAiB,GAAGH,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAA1B;IACA,MAAME,QAAQ,GAAGH,qBAAqB,CAACI,KAAtB,EAAjB;IACA,MAAMC,QAAQ,GAAG,CAAC,gBAAD,EAAmBT,cAAnB,EAAmC,gBAAnC,EAAqDC,aAArD,EAAoE,WAApE,EAAiFM,QAAjF,CAAjB;;IACA,KAAK,MAAMG,CAAX,IAAgBN,qBAAhB,EAAuC;MACrCK,QAAQ,CAACE,IAAT,CAAcP,qBAAqB,CAACM,CAAD,CAAnC;MACAD,QAAQ,CAACE,IAAT,CAAcL,iBAAiB,CAACI,CAAD,CAA/B;IACD;;IACD,OAAOD,QAAQ,CAACG,IAAT,CAAc,GAAd,CAAP;EACD;;EAE6C,OAAvCC,uCAAuC,CAACC,OAAD,EAAkBC,UAAlB,EAAsCC,KAAtC,EAAuE;IACnH,IAAIC,WAAJ;;IAEA,IAAI,iBAAiBD,KAArB,EAA4B;MAC1BC,WAAW,GAAGD,KAAK,CAACC,WAApB;IACD,CAFD,MAEO;MACL,MAAM;QAAEC,YAAF;QAAgBjB,aAAhB;QAA+BC,gBAA/B;QAAiDC;MAAjD,IAAkEa,KAAxE;MACAC,WAAW,GAAGnB,UAAU,CAACC,gBAAX,CAA4BmB,YAA5B,EAA0CjB,aAA1C,EAAyDC,gBAAzD,EAA2EC,YAA3E,CAAd;IACD;;IAED,OAAQ,GAAEW,OAAQ,GAAEG,WAAY,8DAA6DF,UAAW,EAAxG;EACD;;EAEwC,OAAlCI,kCAAkC,CAACL,OAAD,EAAkBC,UAAlB,EAAsCC,KAAtC,EAAkE;IACzG,IAAIC,WAAJ;IACA,MAAM;MAAEG;IAAF,IAAsBJ,KAA5B;;IAEA,IAAI,iBAAiBA,KAArB,EAA4B;MAC1BC,WAAW,GAAGD,KAAK,CAACC,WAApB;IACD,CAFD,MAEO;MACL,MAAM;QAAEC,YAAF;QAAgBjB,aAAhB;QAA+BC,gBAA/B;QAAiDC;MAAjD,IAAkEa,KAAxE;MACAC,WAAW,GAAGnB,UAAU,CAACC,gBAAX,CAA4BmB,YAA5B,EAA0CjB,aAA1C,EAAyDC,gBAAzD,EAA2EC,YAA3E,CAAd;IACD;;IAED,OACG,GAAEW,OAAQ,GAAEG,WAAY,+DAA8DF,UAAW,EAAlG,GACC,oBAAmBM,kBAAkB,CAACD,eAAD,CAAkB,EAF1D;EAID;;AA9C6B"},"metadata":{},"sourceType":"module"}