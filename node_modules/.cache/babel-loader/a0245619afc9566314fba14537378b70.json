{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button, useStyles2, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { changeToLibraryPanel } from 'app/features/panel/state/actions';\nimport { PanelTypeFilter } from '../../../../core/components/PanelTypeFilter/PanelTypeFilter';\nimport { AddLibraryPanelModal } from '../AddLibraryPanelModal/AddLibraryPanelModal';\nimport { ChangeLibraryPanelModal } from '../ChangeLibraryPanelModal/ChangeLibraryPanelModal';\nimport { LibraryPanelsView } from '../LibraryPanelsView/LibraryPanelsView';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const PanelLibraryOptionsGroup = ({\n  panel,\n  searchQuery\n}) => {\n  var _panel$libraryPanel;\n\n  const styles = useStyles2(getStyles);\n  const [showingAddPanelModal, setShowingAddPanelModal] = useState(false);\n  const [changeToPanel, setChangeToPanel] = useState(undefined);\n  const [panelFilter, setPanelFilter] = useState([]);\n  const onPanelFilterChange = useCallback(plugins => {\n    setPanelFilter(plugins.map(p => p.id));\n  }, [setPanelFilter]);\n  const dashboard = getDashboardSrv().getCurrent();\n  const dispatch = useDispatch();\n\n  const useLibraryPanel = async () => {\n    if (!changeToPanel) {\n      return;\n    }\n\n    setChangeToPanel(undefined);\n    dispatch(changeToLibraryPanel(panel, changeToPanel));\n  };\n\n  const onAddToPanelLibrary = () => {\n    setShowingAddPanelModal(true);\n  };\n\n  const onChangeLibraryPanel = panel => {\n    setChangeToPanel(panel);\n  };\n\n  const onDismissChangeToPanel = () => {\n    setChangeToPanel(undefined);\n  };\n\n  return /*#__PURE__*/_jsxs(VerticalGroup, {\n    spacing: \"md\",\n    children: [!panel.libraryPanel && /*#__PURE__*/_jsx(VerticalGroup, {\n      align: \"center\",\n      children: /*#__PURE__*/_jsx(Button, {\n        icon: \"plus\",\n        onClick: onAddToPanelLibrary,\n        variant: \"secondary\",\n        fullWidth: true,\n        children: \"Create new library panel\"\n      })\n    }), /*#__PURE__*/_jsx(PanelTypeFilter, {\n      onChange: onPanelFilterChange\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.libraryPanelsView,\n      children: /*#__PURE__*/_jsx(LibraryPanelsView, {\n        currentPanelId: (_panel$libraryPanel = panel.libraryPanel) === null || _panel$libraryPanel === void 0 ? void 0 : _panel$libraryPanel.uid,\n        searchString: searchQuery,\n        panelFilter: panelFilter,\n        onClickCard: onChangeLibraryPanel,\n        showSecondaryActions: true\n      })\n    }), showingAddPanelModal && /*#__PURE__*/_jsx(AddLibraryPanelModal, {\n      panel: panel,\n      onDismiss: () => setShowingAddPanelModal(false),\n      initialFolderId: dashboard === null || dashboard === void 0 ? void 0 : dashboard.meta.folderId,\n      isOpen: showingAddPanelModal\n    }), changeToPanel && /*#__PURE__*/_jsx(ChangeLibraryPanelModal, {\n      panel: panel,\n      onDismiss: onDismissChangeToPanel,\n      onConfirm: useLibraryPanel\n    })]\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    libraryPanelsView: css`\n      width: 100%;\n    `\n  };\n};","map":{"version":3,"names":["css","React","useCallback","useState","useDispatch","Button","useStyles2","VerticalGroup","getDashboardSrv","changeToLibraryPanel","PanelTypeFilter","AddLibraryPanelModal","ChangeLibraryPanelModal","LibraryPanelsView","PanelLibraryOptionsGroup","panel","searchQuery","styles","getStyles","showingAddPanelModal","setShowingAddPanelModal","changeToPanel","setChangeToPanel","undefined","panelFilter","setPanelFilter","onPanelFilterChange","plugins","map","p","id","dashboard","getCurrent","dispatch","useLibraryPanel","onAddToPanelLibrary","onChangeLibraryPanel","onDismissChangeToPanel","libraryPanel","libraryPanelsView","uid","meta","folderId","theme"],"sources":["/home/soula/grafana/public/app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2, PanelPluginMeta } from '@grafana/data';\nimport { Button, useStyles2, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { changeToLibraryPanel } from 'app/features/panel/state/actions';\n\nimport { PanelTypeFilter } from '../../../../core/components/PanelTypeFilter/PanelTypeFilter';\nimport { LibraryElementDTO } from '../../types';\nimport { AddLibraryPanelModal } from '../AddLibraryPanelModal/AddLibraryPanelModal';\nimport { ChangeLibraryPanelModal } from '../ChangeLibraryPanelModal/ChangeLibraryPanelModal';\nimport { LibraryPanelsView } from '../LibraryPanelsView/LibraryPanelsView';\n\ninterface Props {\n  panel: PanelModel;\n  searchQuery: string;\n}\n\nexport const PanelLibraryOptionsGroup: FC<Props> = ({ panel, searchQuery }) => {\n  const styles = useStyles2(getStyles);\n  const [showingAddPanelModal, setShowingAddPanelModal] = useState(false);\n  const [changeToPanel, setChangeToPanel] = useState<LibraryElementDTO | undefined>(undefined);\n  const [panelFilter, setPanelFilter] = useState<string[]>([]);\n  const onPanelFilterChange = useCallback(\n    (plugins: PanelPluginMeta[]) => {\n      setPanelFilter(plugins.map((p) => p.id));\n    },\n    [setPanelFilter]\n  );\n  const dashboard = getDashboardSrv().getCurrent();\n  const dispatch = useDispatch();\n\n  const useLibraryPanel = async () => {\n    if (!changeToPanel) {\n      return;\n    }\n\n    setChangeToPanel(undefined);\n\n    dispatch(changeToLibraryPanel(panel, changeToPanel));\n  };\n\n  const onAddToPanelLibrary = () => {\n    setShowingAddPanelModal(true);\n  };\n\n  const onChangeLibraryPanel = (panel: LibraryElementDTO) => {\n    setChangeToPanel(panel);\n  };\n\n  const onDismissChangeToPanel = () => {\n    setChangeToPanel(undefined);\n  };\n\n  return (\n    <VerticalGroup spacing=\"md\">\n      {!panel.libraryPanel && (\n        <VerticalGroup align=\"center\">\n          <Button icon=\"plus\" onClick={onAddToPanelLibrary} variant=\"secondary\" fullWidth>\n            Create new library panel\n          </Button>\n        </VerticalGroup>\n      )}\n\n      <PanelTypeFilter onChange={onPanelFilterChange} />\n\n      <div className={styles.libraryPanelsView}>\n        <LibraryPanelsView\n          currentPanelId={panel.libraryPanel?.uid}\n          searchString={searchQuery}\n          panelFilter={panelFilter}\n          onClickCard={onChangeLibraryPanel}\n          showSecondaryActions\n        />\n      </div>\n\n      {showingAddPanelModal && (\n        <AddLibraryPanelModal\n          panel={panel}\n          onDismiss={() => setShowingAddPanelModal(false)}\n          initialFolderId={dashboard?.meta.folderId}\n          isOpen={showingAddPanelModal}\n        />\n      )}\n\n      {changeToPanel && (\n        <ChangeLibraryPanelModal panel={panel} onDismiss={onDismissChangeToPanel} onConfirm={useLibraryPanel} />\n      )}\n    </VerticalGroup>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    libraryPanelsView: css`\n      width: 100%;\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}