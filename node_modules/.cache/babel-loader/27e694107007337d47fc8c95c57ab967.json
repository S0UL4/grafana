{"ast":null,"code":"var _h;\n\nimport React, { useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { ConnectionConfig } from '@grafana/aws-sdk';\nimport { rangeUtil, onUpdateDatasourceJsonDataOption, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { Input, InlineField } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createWarningNotification } from 'app/core/copy/appNotification';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { store } from 'app/store/store';\nimport { XrayLinkConfig } from './XrayLinkConfig';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const ConfigEditor = props => {\n  const {\n    options\n  } = props;\n  const datasource = useDatasource(options.name);\n  useAuthenticationWarning(options.jsonData);\n  const logsTimeoutError = useTimoutValidation(props.options.jsonData.logsTimeout);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ConnectionConfig, Object.assign({}, props, {\n      loadRegions: datasource && (() => datasource.getRegions().then(r => r.filter(r => r.value !== 'default').map(v => v.value))),\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Namespaces of Custom Metrics\",\n        labelWidth: 28,\n        tooltip: \"Namespaces of Custom Metrics.\",\n        children: /*#__PURE__*/_jsx(Input, {\n          width: 60,\n          placeholder: \"Namespace1,Namespace2\",\n          value: options.jsonData.customMetricsNamespaces || '',\n          onChange: onUpdateDatasourceJsonDataOption(props, 'customMetricsNamespaces')\n        })\n      })\n    })), _h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n      className: \"page-heading\",\n      children: \"CloudWatch Logs\"\n    })), /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-group\",\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Timeout\",\n        labelWidth: 28,\n        tooltip: \"Custom timout for CloudWatch Logs insights queries which have max concurrency limits. Default is 15 minutes. Must be a valid duration string, such as \\\"15m\\\" \\\"30s\\\" \\\"2000ms\\\" etc.\",\n        invalid: Boolean(logsTimeoutError),\n        children: /*#__PURE__*/_jsx(Input, {\n          width: 60,\n          placeholder: \"15m\",\n          value: options.jsonData.logsTimeout || '',\n          onChange: onUpdateDatasourceJsonDataOption(props, 'logsTimeout'),\n          title: 'The timeout must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'\n        })\n      })\n    }), /*#__PURE__*/_jsx(XrayLinkConfig, {\n      onChange: uid => updateDatasourcePluginJsonDataOption(props, 'tracingDatasourceUid', uid),\n      datasourceUid: options.jsonData.tracingDatasourceUid\n    })]\n  });\n};\n\nfunction useAuthenticationWarning(jsonData) {\n  const addWarning = message => {\n    store.dispatch(notifyApp(createWarningNotification('CloudWatch Authentication', message)));\n  };\n\n  useEffect(() => {\n    if (jsonData.authType === 'arn') {\n      addWarning('Since grafana 7.3 authentication type \"arn\" is deprecated, falling back to default SDK provider');\n    } else if (jsonData.authType === 'credentials' && !jsonData.profile && !jsonData.database) {\n      addWarning('As of grafana 7.3 authentication type \"credentials\" should be used only for shared file credentials. \\\n             If you don\\'t have a credentials file, switch to the default SDK provider for extracting credentials \\\n             from environment variables or IAM roles');\n    }\n  }, [jsonData.authType, jsonData.database, jsonData.profile]);\n}\n\nfunction useDatasource(datasourceName) {\n  const [datasource, setDatasource] = useState();\n  useEffect(() => {\n    getDatasourceSrv().loadDatasource(datasourceName).then(datasource => {\n      // It's really difficult to type .loadDatasource() because it's inherently untyped as it involves two JSON.parse()'s\n      // So a \"as\" type assertion here is a necessary evil.\n      setDatasource(datasource);\n    });\n  }, [datasourceName]);\n  return datasource;\n}\n\nfunction useTimoutValidation(value) {\n  const [err, setErr] = useState(undefined);\n  useDebounce(() => {\n    if (value) {\n      try {\n        rangeUtil.describeInterval(value);\n        setErr(undefined);\n      } catch (e) {\n        if (e instanceof Error) {\n          setErr(e.toString());\n        }\n      }\n    } else {\n      setErr(undefined);\n    }\n  }, 350, [value]);\n  return err;\n}","map":{"version":3,"names":["React","useEffect","useState","useDebounce","ConnectionConfig","rangeUtil","onUpdateDatasourceJsonDataOption","updateDatasourcePluginJsonDataOption","Input","InlineField","notifyApp","createWarningNotification","getDatasourceSrv","store","XrayLinkConfig","ConfigEditor","props","options","datasource","useDatasource","name","useAuthenticationWarning","jsonData","logsTimeoutError","useTimoutValidation","logsTimeout","getRegions","then","r","filter","value","map","v","customMetricsNamespaces","Boolean","uid","tracingDatasourceUid","addWarning","message","dispatch","authType","profile","database","datasourceName","setDatasource","loadDatasource","err","setErr","undefined","describeInterval","e","Error","toString"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { ConnectionConfig } from '@grafana/aws-sdk';\nimport {\n  rangeUtil,\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { Input, InlineField } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createWarningNotification } from 'app/core/copy/appNotification';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { store } from 'app/store/store';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\n\nimport { XrayLinkConfig } from './XrayLinkConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\nexport const ConfigEditor: FC<Props> = (props: Props) => {\n  const { options } = props;\n\n  const datasource = useDatasource(options.name);\n  useAuthenticationWarning(options.jsonData);\n  const logsTimeoutError = useTimoutValidation(props.options.jsonData.logsTimeout);\n\n  return (\n    <>\n      <ConnectionConfig\n        {...props}\n        loadRegions={\n          datasource &&\n          (() => datasource!.getRegions().then((r) => r.filter((r) => r.value !== 'default').map((v) => v.value)))\n        }\n      >\n        <InlineField label=\"Namespaces of Custom Metrics\" labelWidth={28} tooltip=\"Namespaces of Custom Metrics.\">\n          <Input\n            width={60}\n            placeholder=\"Namespace1,Namespace2\"\n            value={options.jsonData.customMetricsNamespaces || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'customMetricsNamespaces')}\n          />\n        </InlineField>\n      </ConnectionConfig>\n\n      <h3 className=\"page-heading\">CloudWatch Logs</h3>\n      <div className=\"gf-form-group\">\n        <InlineField\n          label=\"Timeout\"\n          labelWidth={28}\n          tooltip='Custom timout for CloudWatch Logs insights queries which have max concurrency limits. Default is 15 minutes. Must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'\n          invalid={Boolean(logsTimeoutError)}\n        >\n          <Input\n            width={60}\n            placeholder=\"15m\"\n            value={options.jsonData.logsTimeout || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'logsTimeout')}\n            title={'The timeout must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'}\n          />\n        </InlineField>\n      </div>\n\n      <XrayLinkConfig\n        onChange={(uid) => updateDatasourcePluginJsonDataOption(props, 'tracingDatasourceUid', uid)}\n        datasourceUid={options.jsonData.tracingDatasourceUid}\n      />\n    </>\n  );\n};\n\nfunction useAuthenticationWarning(jsonData: CloudWatchJsonData) {\n  const addWarning = (message: string) => {\n    store.dispatch(notifyApp(createWarningNotification('CloudWatch Authentication', message)));\n  };\n\n  useEffect(() => {\n    if (jsonData.authType === 'arn') {\n      addWarning('Since grafana 7.3 authentication type \"arn\" is deprecated, falling back to default SDK provider');\n    } else if (jsonData.authType === 'credentials' && !jsonData.profile && !jsonData.database) {\n      addWarning(\n        'As of grafana 7.3 authentication type \"credentials\" should be used only for shared file credentials. \\\n             If you don\\'t have a credentials file, switch to the default SDK provider for extracting credentials \\\n             from environment variables or IAM roles'\n      );\n    }\n  }, [jsonData.authType, jsonData.database, jsonData.profile]);\n}\n\nfunction useDatasource(datasourceName: string) {\n  const [datasource, setDatasource] = useState<CloudWatchDatasource>();\n\n  useEffect(() => {\n    getDatasourceSrv()\n      .loadDatasource(datasourceName)\n      .then((datasource) => {\n        // It's really difficult to type .loadDatasource() because it's inherently untyped as it involves two JSON.parse()'s\n        // So a \"as\" type assertion here is a necessary evil.\n        setDatasource(datasource as CloudWatchDatasource);\n      });\n  }, [datasourceName]);\n\n  return datasource;\n}\n\nfunction useTimoutValidation(value: string | undefined) {\n  const [err, setErr] = useState<undefined | string>(undefined);\n  useDebounce(\n    () => {\n      if (value) {\n        try {\n          rangeUtil.describeInterval(value);\n          setErr(undefined);\n        } catch (e) {\n          if (e instanceof Error) {\n            setErr(e.toString());\n          }\n        }\n      } else {\n        setErr(undefined);\n      }\n    },\n    350,\n    [value]\n  );\n  return err;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}