{"ast":null,"code":"import { mergeReducers } from '../utils';\nimport { TOGGLE_ALL_CHECKED, TOGGLE_CHECKED, MOVE_ITEMS, DELETE_ITEMS } from './actionTypes';\nimport { dashboardsSearchState, searchReducer } from './dashboardSearch';\nexport const manageDashboardsState = Object.assign({}, dashboardsSearchState, {\n  allChecked: false\n});\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case TOGGLE_ALL_CHECKED:\n      const newAllChecked = !state.allChecked;\n      return Object.assign({}, state, {\n        results: state.results.map(result => {\n          return Object.assign({}, result, {\n            checked: newAllChecked,\n            items: result.items.map(item => Object.assign({}, item, {\n              checked: newAllChecked\n            }))\n          });\n        }),\n        allChecked: newAllChecked\n      });\n\n    case TOGGLE_CHECKED:\n      const {\n        id\n      } = action.payload;\n      return Object.assign({}, state, {\n        results: state.results.map(result => {\n          if (result.id === id) {\n            return Object.assign({}, result, {\n              checked: !result.checked,\n              items: result.items.map(item => Object.assign({}, item, {\n                checked: !result.checked\n              }))\n            });\n          }\n\n          return Object.assign({}, result, {\n            items: result.items.map(item => item.id === id ? Object.assign({}, item, {\n              checked: !item.checked\n            }) : item)\n          });\n        })\n      });\n\n    case MOVE_ITEMS:\n      {\n        const dashboards = action.payload.dashboards;\n        const folder = action.payload.folder;\n        const uids = dashboards.map(db => db.uid);\n        return Object.assign({}, state, {\n          results: state.results.map(result => {\n            if (folder.id === result.id) {\n              return result.expanded ? Object.assign({}, result, {\n                items: [...result.items, ...dashboards.map(db => Object.assign({}, db, {\n                  checked: false\n                }))],\n                checked: false\n              }) : result;\n            } else {\n              return Object.assign({}, result, {\n                items: result.items.filter(item => !uids.includes(item.uid))\n              });\n            }\n          })\n        });\n      }\n\n    case DELETE_ITEMS:\n      {\n        const {\n          folders,\n          dashboards\n        } = action.payload;\n\n        if (!folders.length && !dashboards.length) {\n          return state;\n        }\n\n        return Object.assign({}, state, {\n          results: state.results.reduce((filtered, result) => {\n            if (!folders.includes(result.uid)) {\n              return [...filtered, Object.assign({}, result, {\n                items: result.items.filter(item => !dashboards.includes(item.uid))\n              })];\n            }\n\n            return filtered;\n          }, [])\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const manageDashboardsReducer = mergeReducers([searchReducer, reducer]);","map":{"version":3,"names":["mergeReducers","TOGGLE_ALL_CHECKED","TOGGLE_CHECKED","MOVE_ITEMS","DELETE_ITEMS","dashboardsSearchState","searchReducer","manageDashboardsState","allChecked","reducer","state","action","type","newAllChecked","results","map","result","checked","items","item","id","payload","dashboards","folder","uids","db","uid","expanded","filter","includes","folders","length","reduce","filtered","manageDashboardsReducer"],"sources":["/home/soula/grafana/public/app/features/search/reducers/manageDashboards.ts"],"sourcesContent":["import { DashboardSection, DashboardSectionItem, SearchAction } from '../types';\nimport { mergeReducers } from '../utils';\n\nimport { TOGGLE_ALL_CHECKED, TOGGLE_CHECKED, MOVE_ITEMS, DELETE_ITEMS } from './actionTypes';\nimport { dashboardsSearchState, DashboardsSearchState, searchReducer } from './dashboardSearch';\n\nexport interface ManageDashboardsState extends DashboardsSearchState {\n  allChecked: boolean;\n}\n\nexport const manageDashboardsState: ManageDashboardsState = {\n  ...dashboardsSearchState,\n  allChecked: false,\n};\n\nconst reducer = (state: ManageDashboardsState, action: SearchAction) => {\n  switch (action.type) {\n    case TOGGLE_ALL_CHECKED:\n      const newAllChecked = !state.allChecked;\n      return {\n        ...state,\n        results: state.results.map((result) => {\n          return {\n            ...result,\n            checked: newAllChecked,\n            items: result.items.map((item) => ({ ...item, checked: newAllChecked })),\n          };\n        }),\n        allChecked: newAllChecked,\n      };\n    case TOGGLE_CHECKED:\n      const { id } = action.payload;\n      return {\n        ...state,\n        results: state.results.map((result) => {\n          if (result.id === id) {\n            return {\n              ...result,\n              checked: !result.checked,\n              items: result.items.map((item) => ({ ...item, checked: !result.checked })),\n            };\n          }\n          return {\n            ...result,\n            items: result.items.map((item) => (item.id === id ? { ...item, checked: !item.checked } : item)),\n          };\n        }),\n      };\n    case MOVE_ITEMS: {\n      const dashboards: DashboardSectionItem[] = action.payload.dashboards;\n      const folder: DashboardSection = action.payload.folder;\n      const uids = dashboards.map((db) => db.uid);\n      return {\n        ...state,\n        results: state.results.map((result) => {\n          if (folder.id === result.id) {\n            return result.expanded\n              ? {\n                  ...result,\n                  items: [...result.items, ...dashboards.map((db) => ({ ...db, checked: false }))],\n                  checked: false,\n                }\n              : result;\n          } else {\n            return { ...result, items: result.items.filter((item) => !uids.includes(item.uid)) };\n          }\n        }),\n      };\n    }\n    case DELETE_ITEMS: {\n      const { folders, dashboards } = action.payload;\n      if (!folders.length && !dashboards.length) {\n        return state;\n      }\n      return {\n        ...state,\n        results: state.results.reduce((filtered, result) => {\n          if (!folders.includes(result.uid)) {\n            return [...filtered, { ...result, items: result.items.filter((item) => !dashboards.includes(item.uid)) }];\n          }\n          return filtered;\n        }, [] as DashboardSection[]),\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const manageDashboardsReducer = mergeReducers([searchReducer, reducer]);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}