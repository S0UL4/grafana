{"ast":null,"code":"import { LegendDisplayMode } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\nimport { PieChartLabels, PieChartType } from './types';\nexport class PieChartSuggestionsSupplier {\n  getSuggestionsForData(builder) {\n    const list = builder.getListAppender({\n      name: SuggestionName.PieChart,\n      pluginId: 'piechart',\n      options: {\n        reduceOptions: {\n          values: false,\n          calcs: ['lastNotNull']\n        },\n        displayLabels: [PieChartLabels.Percent],\n        legend: {\n          placement: 'right',\n          values: []\n        }\n      },\n      cardOptions: {\n        previewModifier: s => {\n          // Hide labels in preview\n          s.options.legend.displayMode = LegendDisplayMode.Hidden;\n        }\n      }\n    });\n    const {\n      dataSummary\n    } = builder;\n\n    if (!dataSummary.hasNumberField) {\n      return;\n    }\n\n    if (dataSummary.hasStringField && dataSummary.frameCount === 1) {\n      // if many values this or single value PieChart is not a good option\n      if (dataSummary.rowCountTotal > 30 || dataSummary.rowCountTotal < 2) {\n        return;\n      }\n\n      list.append({\n        name: SuggestionName.PieChart,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: []\n          }\n        }\n      });\n      list.append({\n        name: SuggestionName.PieChartDonut,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: []\n          },\n          pieType: PieChartType.Donut\n        }\n      });\n      return;\n    }\n\n    if (dataSummary.numberFieldCount > 30 || dataSummary.numberFieldCount < 2) {\n      return;\n    }\n\n    list.append({\n      name: SuggestionName.PieChart\n    });\n    list.append({\n      name: SuggestionName.PieChartDonut,\n      options: {\n        pieType: PieChartType.Donut\n      }\n    });\n  }\n\n}","map":{"version":3,"names":["LegendDisplayMode","SuggestionName","PieChartLabels","PieChartType","PieChartSuggestionsSupplier","getSuggestionsForData","builder","list","getListAppender","name","PieChart","pluginId","options","reduceOptions","values","calcs","displayLabels","Percent","legend","placement","cardOptions","previewModifier","s","displayMode","Hidden","dataSummary","hasNumberField","hasStringField","frameCount","rowCountTotal","append","PieChartDonut","pieType","Donut","numberFieldCount"],"sources":["/home/soula/grafana/public/app/plugins/panel/piechart/suggestions.ts"],"sourcesContent":["import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { LegendDisplayMode } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { PieChartLabels, PieChartOptions, PieChartType } from './types';\n\nexport class PieChartSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const list = builder.getListAppender<PieChartOptions, {}>({\n      name: SuggestionName.PieChart,\n      pluginId: 'piechart',\n      options: {\n        reduceOptions: {\n          values: false,\n          calcs: ['lastNotNull'],\n        },\n        displayLabels: [PieChartLabels.Percent],\n        legend: {\n          placement: 'right',\n          values: [],\n        } as any,\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          // Hide labels in preview\n          s.options!.legend.displayMode = LegendDisplayMode.Hidden;\n        },\n      },\n    });\n\n    const { dataSummary } = builder;\n\n    if (!dataSummary.hasNumberField) {\n      return;\n    }\n\n    if (dataSummary.hasStringField && dataSummary.frameCount === 1) {\n      // if many values this or single value PieChart is not a good option\n      if (dataSummary.rowCountTotal > 30 || dataSummary.rowCountTotal < 2) {\n        return;\n      }\n\n      list.append({\n        name: SuggestionName.PieChart,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n          },\n        },\n      });\n\n      list.append({\n        name: SuggestionName.PieChartDonut,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n          },\n          pieType: PieChartType.Donut,\n        },\n      });\n\n      return;\n    }\n\n    if (dataSummary.numberFieldCount > 30 || dataSummary.numberFieldCount < 2) {\n      return;\n    }\n\n    list.append({\n      name: SuggestionName.PieChart,\n    });\n\n    list.append({\n      name: SuggestionName.PieChartDonut,\n      options: {\n        pieType: PieChartType.Donut,\n      },\n    });\n  }\n}\n"],"mappings":"AACA,SAASA,iBAAT,QAAkC,iBAAlC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,SAASC,cAAT,EAA0CC,YAA1C,QAA8D,SAA9D;AAEA,OAAO,MAAMC,2BAAN,CAAkC;EACvCC,qBAAqB,CAACC,OAAD,EAA2C;IAC9D,MAAMC,IAAI,GAAGD,OAAO,CAACE,eAAR,CAA6C;MACxDC,IAAI,EAAER,cAAc,CAACS,QADmC;MAExDC,QAAQ,EAAE,UAF8C;MAGxDC,OAAO,EAAE;QACPC,aAAa,EAAE;UACbC,MAAM,EAAE,KADK;UAEbC,KAAK,EAAE,CAAC,aAAD;QAFM,CADR;QAKPC,aAAa,EAAE,CAACd,cAAc,CAACe,OAAhB,CALR;QAMPC,MAAM,EAAE;UACNC,SAAS,EAAE,OADL;UAENL,MAAM,EAAE;QAFF;MAND,CAH+C;MAcxDM,WAAW,EAAE;QACXC,eAAe,EAAGC,CAAD,IAAO;UACtB;UACAA,CAAC,CAACV,OAAF,CAAWM,MAAX,CAAkBK,WAAlB,GAAgCvB,iBAAiB,CAACwB,MAAlD;QACD;MAJU;IAd2C,CAA7C,CAAb;IAsBA,MAAM;MAAEC;IAAF,IAAkBnB,OAAxB;;IAEA,IAAI,CAACmB,WAAW,CAACC,cAAjB,EAAiC;MAC/B;IACD;;IAED,IAAID,WAAW,CAACE,cAAZ,IAA8BF,WAAW,CAACG,UAAZ,KAA2B,CAA7D,EAAgE;MAC9D;MACA,IAAIH,WAAW,CAACI,aAAZ,GAA4B,EAA5B,IAAkCJ,WAAW,CAACI,aAAZ,GAA4B,CAAlE,EAAqE;QACnE;MACD;;MAEDtB,IAAI,CAACuB,MAAL,CAAY;QACVrB,IAAI,EAAER,cAAc,CAACS,QADX;QAEVE,OAAO,EAAE;UACPC,aAAa,EAAE;YACbC,MAAM,EAAE,IADK;YAEbC,KAAK,EAAE;UAFM;QADR;MAFC,CAAZ;MAUAR,IAAI,CAACuB,MAAL,CAAY;QACVrB,IAAI,EAAER,cAAc,CAAC8B,aADX;QAEVnB,OAAO,EAAE;UACPC,aAAa,EAAE;YACbC,MAAM,EAAE,IADK;YAEbC,KAAK,EAAE;UAFM,CADR;UAKPiB,OAAO,EAAE7B,YAAY,CAAC8B;QALf;MAFC,CAAZ;MAWA;IACD;;IAED,IAAIR,WAAW,CAACS,gBAAZ,GAA+B,EAA/B,IAAqCT,WAAW,CAACS,gBAAZ,GAA+B,CAAxE,EAA2E;MACzE;IACD;;IAED3B,IAAI,CAACuB,MAAL,CAAY;MACVrB,IAAI,EAAER,cAAc,CAACS;IADX,CAAZ;IAIAH,IAAI,CAACuB,MAAL,CAAY;MACVrB,IAAI,EAAER,cAAc,CAAC8B,aADX;MAEVnB,OAAO,EAAE;QACPoB,OAAO,EAAE7B,YAAY,CAAC8B;MADf;IAFC,CAAZ;EAMD;;AA1EsC"},"metadata":{},"sourceType":"module"}