{"ast":null,"code":"import { VisualizationSuggestionScore } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\nexport class LogsPanelSuggestionsSupplier {\n  getSuggestionsForData(builder) {\n    const list = builder.getListAppender({\n      name: '',\n      pluginId: 'logs',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {}\n        },\n        overrides: []\n      }\n    });\n    const {\n      dataSummary: ds\n    } = builder; // Require a string & time field\n\n    if (!ds.hasData || !ds.hasTimeField || !ds.hasStringField) {\n      return;\n    }\n\n    if (ds.preferredVisualisationType === 'logs') {\n      list.append({\n        name: SuggestionName.Logs,\n        score: VisualizationSuggestionScore.Best\n      });\n    } else {\n      list.append({\n        name: SuggestionName.Logs\n      });\n    }\n  }\n\n}","map":{"version":3,"names":["VisualizationSuggestionScore","SuggestionName","LogsPanelSuggestionsSupplier","getSuggestionsForData","builder","list","getListAppender","name","pluginId","options","fieldConfig","defaults","custom","overrides","dataSummary","ds","hasData","hasTimeField","hasStringField","preferredVisualisationType","append","Logs","score","Best"],"sources":["/home/soula/grafana/public/app/plugins/panel/logs/suggestions.ts"],"sourcesContent":["import { VisualizationSuggestionsBuilder, VisualizationSuggestionScore } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { Options } from './types';\n\nexport class LogsPanelSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const list = builder.getListAppender<Options, {}>({\n      name: '',\n      pluginId: 'logs',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n\n    const { dataSummary: ds } = builder;\n\n    // Require a string & time field\n    if (!ds.hasData || !ds.hasTimeField || !ds.hasStringField) {\n      return;\n    }\n\n    if (ds.preferredVisualisationType === 'logs') {\n      list.append({ name: SuggestionName.Logs, score: VisualizationSuggestionScore.Best });\n    } else {\n      list.append({ name: SuggestionName.Logs });\n    }\n  }\n}\n"],"mappings":"AAAA,SAA0CA,4BAA1C,QAA8E,eAA9E;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAIA,OAAO,MAAMC,4BAAN,CAAmC;EACxCC,qBAAqB,CAACC,OAAD,EAA2C;IAC9D,MAAMC,IAAI,GAAGD,OAAO,CAACE,eAAR,CAAqC;MAChDC,IAAI,EAAE,EAD0C;MAEhDC,QAAQ,EAAE,MAFsC;MAGhDC,OAAO,EAAE,EAHuC;MAIhDC,WAAW,EAAE;QACXC,QAAQ,EAAE;UACRC,MAAM,EAAE;QADA,CADC;QAIXC,SAAS,EAAE;MAJA;IAJmC,CAArC,CAAb;IAYA,MAAM;MAAEC,WAAW,EAAEC;IAAf,IAAsBX,OAA5B,CAb8D,CAe9D;;IACA,IAAI,CAACW,EAAE,CAACC,OAAJ,IAAe,CAACD,EAAE,CAACE,YAAnB,IAAmC,CAACF,EAAE,CAACG,cAA3C,EAA2D;MACzD;IACD;;IAED,IAAIH,EAAE,CAACI,0BAAH,KAAkC,MAAtC,EAA8C;MAC5Cd,IAAI,CAACe,MAAL,CAAY;QAAEb,IAAI,EAAEN,cAAc,CAACoB,IAAvB;QAA6BC,KAAK,EAAEtB,4BAA4B,CAACuB;MAAjE,CAAZ;IACD,CAFD,MAEO;MACLlB,IAAI,CAACe,MAAL,CAAY;QAAEb,IAAI,EAAEN,cAAc,CAACoB;MAAvB,CAAZ;IACD;EACF;;AA1BuC"},"metadata":{},"sourceType":"module"}