{"ast":null,"code":"import { isNumber } from 'lodash';\nimport { reduceField, ReducerID } from '../transformations/fieldReducer';\nimport { FieldType } from '../types';\nimport { getFieldColorModeForField } from './fieldColor';\nimport { getActiveThresholdForValue } from './thresholds';\nexport function getScaleCalculator(field, theme) {\n  var _field$state$range, _field$state;\n\n  if (field.type === FieldType.boolean) {\n    return getBooleanScaleCalculator(field, theme);\n  }\n\n  const mode = getFieldColorModeForField(field);\n  const getColor = mode.getCalculator(field, theme);\n  const info = (_field$state$range = (_field$state = field.state) === null || _field$state === void 0 ? void 0 : _field$state.range) !== null && _field$state$range !== void 0 ? _field$state$range : getMinMaxAndDelta(field);\n  return value => {\n    let percent = 0;\n\n    if (value !== -Infinity) {\n      percent = (value - info.min) / info.delta;\n\n      if (Number.isNaN(percent)) {\n        percent = 0;\n      }\n    }\n\n    const threshold = getActiveThresholdForValue(field, value, percent);\n    return {\n      percent,\n      threshold,\n      color: getColor(value, percent, threshold)\n    };\n  };\n}\n\nfunction getBooleanScaleCalculator(field, theme) {\n  const trueValue = {\n    color: theme.visualization.getColorByName('green'),\n    percent: 1,\n    threshold: undefined\n  };\n  const falseValue = {\n    color: theme.visualization.getColorByName('red'),\n    percent: 0,\n    threshold: undefined\n  };\n  const mode = getFieldColorModeForField(field);\n\n  if (mode.isContinuous && mode.getColors) {\n    const colors = mode.getColors(theme);\n    trueValue.color = colors[colors.length - 1];\n    falseValue.color = colors[0];\n  }\n\n  return value => {\n    return Boolean(value) ? trueValue : falseValue;\n  };\n}\n\nexport function getMinMaxAndDelta(field) {\n  if (field.type !== FieldType.number) {\n    return {\n      min: 0,\n      max: 100,\n      delta: 100\n    };\n  } // Calculate min/max if required\n\n\n  let min = field.config.min;\n  let max = field.config.max;\n\n  if (!isNumber(min) || !isNumber(max)) {\n    if (field.values && field.values.length) {\n      const stats = reduceField({\n        field,\n        reducers: [ReducerID.min, ReducerID.max]\n      });\n\n      if (!isNumber(min)) {\n        min = stats[ReducerID.min];\n      }\n\n      if (!isNumber(max)) {\n        max = stats[ReducerID.max];\n      }\n    } else {\n      min = 0;\n      max = 100;\n    }\n  }\n\n  return {\n    min,\n    max,\n    delta: max - min\n  };\n}\n/**\n * @internal\n */\n\nexport function getFieldConfigWithMinMax(field, local) {\n  var _field$state2;\n\n  const {\n    config\n  } = field;\n  let {\n    min,\n    max\n  } = config;\n\n  if (isNumber(min) && isNumber(max)) {\n    return config;\n  }\n\n  if (local || !((_field$state2 = field.state) !== null && _field$state2 !== void 0 && _field$state2.range)) {\n    return Object.assign({}, config, getMinMaxAndDelta(field));\n  }\n\n  return Object.assign({}, config, field.state.range);\n}","map":{"version":3,"names":["isNumber","reduceField","ReducerID","FieldType","getFieldColorModeForField","getActiveThresholdForValue","getScaleCalculator","field","theme","type","boolean","getBooleanScaleCalculator","mode","getColor","getCalculator","info","state","range","getMinMaxAndDelta","value","percent","Infinity","min","delta","Number","isNaN","threshold","color","trueValue","visualization","getColorByName","undefined","falseValue","isContinuous","getColors","colors","length","Boolean","number","max","config","values","stats","reducers","getFieldConfigWithMinMax","local"],"sources":["/home/soula/grafana/packages/grafana-data/src/field/scale.ts"],"sourcesContent":["import { isNumber } from 'lodash';\n\nimport { GrafanaTheme2 } from '../themes/types';\nimport { reduceField, ReducerID } from '../transformations/fieldReducer';\nimport { Field, FieldConfig, FieldType, NumericRange, Threshold } from '../types';\n\nimport { getFieldColorModeForField } from './fieldColor';\nimport { getActiveThresholdForValue } from './thresholds';\n\nexport interface ColorScaleValue {\n  percent: number; // 0-1\n  threshold: Threshold;\n  color: string;\n}\n\nexport type ScaleCalculator = (value: number) => ColorScaleValue;\n\nexport function getScaleCalculator(field: Field, theme: GrafanaTheme2): ScaleCalculator {\n  if (field.type === FieldType.boolean) {\n    return getBooleanScaleCalculator(field, theme);\n  }\n\n  const mode = getFieldColorModeForField(field);\n  const getColor = mode.getCalculator(field, theme);\n  const info = field.state?.range ?? getMinMaxAndDelta(field);\n\n  return (value: number) => {\n    let percent = 0;\n\n    if (value !== -Infinity) {\n      percent = (value - info.min!) / info.delta;\n\n      if (Number.isNaN(percent)) {\n        percent = 0;\n      }\n    }\n\n    const threshold = getActiveThresholdForValue(field, value, percent);\n\n    return {\n      percent,\n      threshold,\n      color: getColor(value, percent, threshold),\n    };\n  };\n}\n\nfunction getBooleanScaleCalculator(field: Field, theme: GrafanaTheme2): ScaleCalculator {\n  const trueValue: ColorScaleValue = {\n    color: theme.visualization.getColorByName('green'),\n    percent: 1,\n    threshold: undefined as unknown as Threshold,\n  };\n\n  const falseValue: ColorScaleValue = {\n    color: theme.visualization.getColorByName('red'),\n    percent: 0,\n    threshold: undefined as unknown as Threshold,\n  };\n\n  const mode = getFieldColorModeForField(field);\n  if (mode.isContinuous && mode.getColors) {\n    const colors = mode.getColors(theme);\n    trueValue.color = colors[colors.length - 1];\n    falseValue.color = colors[0];\n  }\n\n  return (value: number) => {\n    return Boolean(value) ? trueValue : falseValue;\n  };\n}\n\nexport function getMinMaxAndDelta(field: Field): NumericRange {\n  if (field.type !== FieldType.number) {\n    return { min: 0, max: 100, delta: 100 };\n  }\n\n  // Calculate min/max if required\n  let min = field.config.min;\n  let max = field.config.max;\n\n  if (!isNumber(min) || !isNumber(max)) {\n    if (field.values && field.values.length) {\n      const stats = reduceField({ field, reducers: [ReducerID.min, ReducerID.max] });\n      if (!isNumber(min)) {\n        min = stats[ReducerID.min];\n      }\n      if (!isNumber(max)) {\n        max = stats[ReducerID.max];\n      }\n    } else {\n      min = 0;\n      max = 100;\n    }\n  }\n\n  return {\n    min,\n    max,\n    delta: max! - min!,\n  };\n}\n\n/**\n * @internal\n */\nexport function getFieldConfigWithMinMax(field: Field, local?: boolean): FieldConfig {\n  const { config } = field;\n  let { min, max } = config;\n\n  if (isNumber(min) && isNumber(max)) {\n    return config;\n  }\n\n  if (local || !field.state?.range) {\n    return { ...config, ...getMinMaxAndDelta(field) };\n  }\n\n  return { ...config, ...field.state.range };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}