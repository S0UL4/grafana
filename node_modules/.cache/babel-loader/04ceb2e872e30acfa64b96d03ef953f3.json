{"ast":null,"code":"import { FieldType, getFieldColorModeForField } from '@grafana/data';\nimport * as layer from 'ol/layer';\nimport { getLocationMatchers } from 'app/features/geo/utils/location';\nimport { getScaledDimension } from 'app/features/dimensions';\nimport { ScaleDimensionEditor } from 'app/features/dimensions/editors';\nimport { FrameVectorSource } from 'app/features/geo/utils/frameVectorSource';\nconst defaultOptions = {\n  weight: {\n    fixed: 1,\n    min: 0,\n    max: 1\n  },\n  blur: 15,\n  radius: 5\n};\n/**\n * Map layer configuration for heatmap overlay\n */\n\nexport const heatmapLayer = {\n  id: 'heatmap',\n  name: 'Heatmap',\n  description: 'Visualizes a heatmap of the data',\n  isBaseMap: false,\n  showLocation: true,\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param options\n   */\n  create: async (map, options, eventBus, theme) => {\n    const config = Object.assign({}, defaultOptions, options.config);\n    const location = await getLocationMatchers(options.location);\n    const source = new FrameVectorSource(location);\n    const WEIGHT_KEY = \"_weight\"; // Create a new Heatmap layer\n    // Weight function takes a feature as attribute and returns a normalized weight value\n\n    const vectorLayer = new layer.Heatmap({\n      source,\n      blur: config.blur,\n      radius: config.radius,\n      weight: feature => {\n        return feature.get(WEIGHT_KEY);\n      }\n    });\n    return {\n      init: () => vectorLayer,\n      update: data => {\n        var _weightDim$field;\n\n        const frame = data.series[0];\n\n        if (!frame) {\n          return;\n        }\n\n        source.update(frame);\n        const weightDim = getScaledDimension(frame, config.weight);\n        source.forEachFeature(f => {\n          const idx = f.get('rowIndex');\n\n          if (idx != null) {\n            f.set(WEIGHT_KEY, weightDim.get(idx));\n          }\n        }); // Set heatmap gradient colors\n\n        let colors = ['#00f', '#0ff', '#0f0', '#ff0', '#f00']; // Either the configured field or the first numeric field value\n\n        const field = (_weightDim$field = weightDim.field) !== null && _weightDim$field !== void 0 ? _weightDim$field : frame.fields.find(field => field.type === FieldType.number);\n\n        if (field) {\n          const colorMode = getFieldColorModeForField(field);\n\n          if (colorMode.isContinuous && colorMode.getColors) {\n            // getColors return an array of color string from the color scheme chosen\n            colors = colorMode.getColors(theme);\n          }\n        }\n\n        vectorLayer.setGradient(colors);\n      },\n      // Heatmap overlay options\n      registerOptionsUI: builder => {\n        builder.addCustomEditor({\n          id: 'config.weight',\n          path: 'config.weight',\n          name: 'Weight values',\n          description: 'Scale the distribution for each row',\n          editor: ScaleDimensionEditor,\n          settings: {\n            min: 0,\n            // no contribution\n            max: 1,\n            hideRange: true // Don't show the scale factor\n\n          },\n          defaultValue: {\n            // Configured values\n            fixed: 1,\n            min: 0,\n            max: 1\n          }\n        }).addSliderInput({\n          path: 'config.radius',\n          description: 'Configures the size of clusters',\n          name: 'Radius',\n          defaultValue: defaultOptions.radius,\n          settings: {\n            min: 1,\n            max: 50,\n            step: 1\n          }\n        }).addSliderInput({\n          path: 'config.blur',\n          description: 'Configures the amount of blur of clusters',\n          name: 'Blur',\n          defaultValue: defaultOptions.blur,\n          settings: {\n            min: 1,\n            max: 50,\n            step: 1\n          }\n        });\n      }\n    };\n  },\n  // fill in the default values\n  defaultOptions\n};","map":{"version":3,"names":["FieldType","getFieldColorModeForField","layer","getLocationMatchers","getScaledDimension","ScaleDimensionEditor","FrameVectorSource","defaultOptions","weight","fixed","min","max","blur","radius","heatmapLayer","id","name","description","isBaseMap","showLocation","create","map","options","eventBus","theme","config","location","source","WEIGHT_KEY","vectorLayer","Heatmap","feature","get","init","update","data","frame","series","weightDim","forEachFeature","f","idx","set","colors","field","fields","find","type","number","colorMode","isContinuous","getColors","setGradient","registerOptionsUI","builder","addCustomEditor","path","editor","settings","hideRange","defaultValue","addSliderInput","step"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/layers/data/heatMap.tsx"],"sourcesContent":["import {\n  EventBus,\n  FieldType,\n  getFieldColorModeForField,\n  GrafanaTheme2,\n  MapLayerOptions,\n  MapLayerRegistryItem,\n  PanelData,\n} from '@grafana/data';\nimport Map from 'ol/Map';\nimport * as layer from 'ol/layer';\nimport { getLocationMatchers } from 'app/features/geo/utils/location';\nimport { ScaleDimensionConfig, getScaledDimension } from 'app/features/dimensions';\nimport { ScaleDimensionEditor } from 'app/features/dimensions/editors';\nimport { FrameVectorSource } from 'app/features/geo/utils/frameVectorSource';\nimport { Point } from 'ol/geom';\n\n// Configuration options for Heatmap overlays\nexport interface HeatmapConfig {\n  weight: ScaleDimensionConfig;\n  blur: number;\n  radius: number;\n}\n\nconst defaultOptions: HeatmapConfig = {\n  weight: {\n    fixed: 1,\n    min: 0,\n    max: 1,\n  },\n  blur: 15,\n  radius: 5,\n};\n\n/**\n * Map layer configuration for heatmap overlay\n */\nexport const heatmapLayer: MapLayerRegistryItem<HeatmapConfig> = {\n  id: 'heatmap',\n  name: 'Heatmap',\n  description: 'Visualizes a heatmap of the data',\n  isBaseMap: false,\n  showLocation: true,\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param options\n   */\n  create: async (map: Map, options: MapLayerOptions<HeatmapConfig>, eventBus: EventBus, theme: GrafanaTheme2) => {\n    const config = { ...defaultOptions, ...options.config };\n    \n    const location = await getLocationMatchers(options.location);\n    const source = new FrameVectorSource<Point>(location);\n    const WEIGHT_KEY = \"_weight\";\n\n    // Create a new Heatmap layer\n    // Weight function takes a feature as attribute and returns a normalized weight value\n    const vectorLayer = new layer.Heatmap({\n      source,\n      blur: config.blur,\n      radius: config.radius,\n      weight: (feature) => {\n        return feature.get(WEIGHT_KEY);\n      },\n    });\n\n    return {\n      init: () => vectorLayer,\n      update: (data: PanelData) => {\n        const frame = data.series[0];\n        if (!frame) {\n          return;\n        }\n        source.update(frame);\n\n        const weightDim = getScaledDimension(frame, config.weight);\n        source.forEachFeature( (f) => {\n          const idx = f.get('rowIndex') as number;\n          if(idx != null) {\n            f.set(WEIGHT_KEY, weightDim.get(idx));\n          }\n        });\n\n        // Set heatmap gradient colors\n        let colors = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n        // Either the configured field or the first numeric field value\n        const field = weightDim.field ?? frame.fields.find((field) => field.type === FieldType.number);\n        if (field) {\n          const colorMode = getFieldColorModeForField(field);\n          if (colorMode.isContinuous && colorMode.getColors) {\n            // getColors return an array of color string from the color scheme chosen\n            colors = colorMode.getColors(theme);\n          }\n        }\n        vectorLayer.setGradient(colors);\n      },\n\n      // Heatmap overlay options\n      registerOptionsUI: (builder) => {\n        builder\n          .addCustomEditor({\n            id: 'config.weight',\n            path: 'config.weight',\n            name: 'Weight values',\n            description: 'Scale the distribution for each row',\n            editor: ScaleDimensionEditor,\n            settings: {\n              min: 0, // no contribution\n              max: 1,\n              hideRange: true, // Don't show the scale factor\n            },\n            defaultValue: {\n              // Configured values\n              fixed: 1,\n              min: 0,\n              max: 1,\n            },\n          })\n          .addSliderInput({\n            path: 'config.radius',\n            description: 'Configures the size of clusters',\n            name: 'Radius',\n            defaultValue: defaultOptions.radius,\n            settings: {\n              min: 1,\n              max: 50,\n              step: 1,\n            },\n          })\n          .addSliderInput({\n            path: 'config.blur',\n            description: 'Configures the amount of blur of clusters',\n            name: 'Blur',\n            defaultValue: defaultOptions.blur,\n            settings: {\n              min: 1,\n              max: 50,\n              step: 1,\n            },\n          });\n      },\n    };\n  },\n  // fill in the default values\n  defaultOptions,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}