{"ast":null,"code":"var _NoDataSourceCallToAc, _NoData;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css, cx } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport React, { createRef } from 'react';\nimport { connect } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { compose } from 'redux';\nimport { LoadingState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Collapse, CustomScrollbar, ErrorBoundaryAlert, withTheme2, PanelContainer } from '@grafana/ui';\nimport { FILTER_FOR_OPERATOR, FILTER_OUT_OPERATOR } from '@grafana/ui/src/components/Table/types';\nimport appEvents from 'app/core/app_events';\nimport { supportedFeatures } from 'app/core/history/richHistoryStorageProvider';\nimport { getNodeGraphDataFrames } from 'app/plugins/panel/nodeGraph/utils';\nimport { AbsoluteTimeEvent } from 'app/types/events';\nimport { getTimeZone } from '../profile/state/selectors';\nimport { ExploreGraph } from './ExploreGraph';\nimport { ExploreGraphLabel } from './ExploreGraphLabel';\nimport ExploreQueryInspector from './ExploreQueryInspector';\nimport { ExploreToolbar } from './ExploreToolbar';\nimport LogsContainer from './LogsContainer';\nimport { NoData } from './NoData';\nimport { NoDataSourceCallToAction } from './NoDataSourceCallToAction';\nimport { NodeGraphContainer } from './NodeGraphContainer';\nimport { QueryRows } from './QueryRows';\nimport { ResponseErrorContainer } from './ResponseErrorContainer';\nimport RichHistoryContainer from './RichHistory/RichHistoryContainer';\nimport { SecondaryActions } from './SecondaryActions';\nimport TableContainer from './TableContainer';\nimport { TraceViewContainer } from './TraceView/TraceViewContainer';\nimport { changeSize, changeGraphStyle } from './state/explorePane';\nimport { splitOpen } from './state/main';\nimport { addQueryRow, modifyQueries, scanStart, scanStopAction, setQueries } from './state/query';\nimport { makeAbsoluteTime, updateTimeRange } from './state/time';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst getStyles = theme => {\n  return {\n    exploreMain: css`\n      label: exploreMain;\n      // Is needed for some transition animations to work.\n      position: relative;\n      margin-top: 21px;\n    `,\n    button: css`\n      label: button;\n      margin: 1em 4px 0 0;\n    `,\n    queryContainer: css`\n      label: queryContainer;\n      // Need to override normal css class and don't want to count on ordering of the classes in html.\n      height: auto !important;\n      flex: unset !important;\n      display: unset !important;\n      padding: ${theme.spacing(1)};\n    `,\n    exploreContainer: css`\n      display: flex;\n      flex: 1 1 auto;\n      flex-direction: column;\n      padding: ${theme.spacing(2)};\n      padding-top: 0;\n    `\n  };\n};\n\nvar ExploreDrawer;\n\n(function (ExploreDrawer) {\n  ExploreDrawer[ExploreDrawer[\"RichHistory\"] = 0] = \"RichHistory\";\n  ExploreDrawer[ExploreDrawer[\"QueryInspector\"] = 1] = \"QueryInspector\";\n})(ExploreDrawer || (ExploreDrawer = {}));\n\n/**\n * Explore provides an area for quick query iteration for a given datasource.\n * Once a datasource is selected it populates the query section at the top.\n * When queries are run, their results are being displayed in the main section.\n * The datasource determines what kind of query editor it brings, and what kind\n * of results viewers it supports. The state is managed entirely in Redux.\n *\n * SPLIT VIEW\n *\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\n * Since there can be multiple Explores (e.g., left and right) each action needs\n * the `exploreId` as first parameter so that the reducer knows which Explore state\n * is affected.\n *\n * DATASOURCE REQUESTS\n *\n * A click on Run Query creates transactions for all DataQueries for all expanded\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\n * saves the result. The result viewers construct their data from the currently existing\n * transactions.\n *\n * The result viewers determine some of the query options sent to the datasource, e.g.,\n * `format`, to indicate eventual transformations by the datasources' result transformers.\n */\nexport class Explore extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"scrollElement\", void 0);\n\n    _defineProperty(this, \"absoluteTimeUnsubsciber\", void 0);\n\n    _defineProperty(this, \"topOfViewRef\", /*#__PURE__*/createRef());\n\n    _defineProperty(this, \"onChangeTime\", rawRange => {\n      const {\n        updateTimeRange,\n        exploreId\n      } = this.props;\n      updateTimeRange({\n        exploreId,\n        rawRange\n      });\n    });\n\n    _defineProperty(this, \"onClickExample\", query => {\n      this.props.setQueries(this.props.exploreId, [query]);\n    });\n\n    _defineProperty(this, \"onCellFilterAdded\", filter => {\n      const {\n        value,\n        key,\n        operator\n      } = filter;\n\n      if (operator === FILTER_FOR_OPERATOR) {\n        this.onClickFilterLabel(key, value);\n      }\n\n      if (operator === FILTER_OUT_OPERATOR) {\n        this.onClickFilterOutLabel(key, value);\n      }\n    });\n\n    _defineProperty(this, \"onClickFilterLabel\", (key, value) => {\n      this.onModifyQueries({\n        type: 'ADD_FILTER',\n        key,\n        value\n      });\n    });\n\n    _defineProperty(this, \"onClickFilterOutLabel\", (key, value) => {\n      this.onModifyQueries({\n        type: 'ADD_FILTER_OUT',\n        key,\n        value\n      });\n    });\n\n    _defineProperty(this, \"onClickAddQueryRowButton\", () => {\n      const {\n        exploreId,\n        queryKeys,\n        datasourceInstance\n      } = this.props;\n      this.props.addQueryRow(exploreId, queryKeys.length, datasourceInstance);\n    });\n\n    _defineProperty(this, \"onMakeAbsoluteTime\", () => {\n      const {\n        makeAbsoluteTime\n      } = this.props;\n      makeAbsoluteTime();\n    });\n\n    _defineProperty(this, \"onModifyQueries\", (action, index) => {\n      const {\n        datasourceInstance\n      } = this.props;\n\n      if (datasourceInstance !== null && datasourceInstance !== void 0 && datasourceInstance.modifyQuery) {\n        const modifier = (queries, modification) => datasourceInstance.modifyQuery(queries, modification);\n\n        this.props.modifyQueries(this.props.exploreId, action, modifier, index);\n      }\n    });\n\n    _defineProperty(this, \"onResize\", size => {\n      this.props.changeSize(this.props.exploreId, size);\n    });\n\n    _defineProperty(this, \"onStartScanning\", () => {\n      // Scanner will trigger a query\n      this.props.scanStart(this.props.exploreId);\n    });\n\n    _defineProperty(this, \"onStopScanning\", () => {\n      this.props.scanStopAction({\n        exploreId: this.props.exploreId\n      });\n    });\n\n    _defineProperty(this, \"onUpdateTimeRange\", absoluteRange => {\n      const {\n        exploreId,\n        updateTimeRange\n      } = this.props;\n      updateTimeRange({\n        exploreId,\n        absoluteRange\n      });\n    });\n\n    _defineProperty(this, \"onChangeGraphStyle\", graphStyle => {\n      const {\n        exploreId,\n        changeGraphStyle\n      } = this.props;\n      changeGraphStyle(exploreId, graphStyle);\n    });\n\n    _defineProperty(this, \"toggleShowRichHistory\", () => {\n      this.setState(state => {\n        return {\n          openDrawer: state.openDrawer === ExploreDrawer.RichHistory ? undefined : ExploreDrawer.RichHistory\n        };\n      });\n    });\n\n    _defineProperty(this, \"toggleShowQueryInspector\", () => {\n      this.setState(state => {\n        return {\n          openDrawer: state.openDrawer === ExploreDrawer.QueryInspector ? undefined : ExploreDrawer.QueryInspector\n        };\n      });\n    });\n\n    _defineProperty(this, \"memoizedGetNodeGraphDataFrames\", memoizeOne(getNodeGraphDataFrames));\n\n    this.state = {\n      openDrawer: undefined\n    };\n  }\n\n  componentDidMount() {\n    this.absoluteTimeUnsubsciber = appEvents.subscribe(AbsoluteTimeEvent, this.onMakeAbsoluteTime);\n  }\n\n  componentWillUnmount() {\n    var _this$absoluteTimeUns;\n\n    (_this$absoluteTimeUns = this.absoluteTimeUnsubsciber) === null || _this$absoluteTimeUns === void 0 ? void 0 : _this$absoluteTimeUns.unsubscribe();\n  }\n\n  renderEmptyState(exploreContainerStyles) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: cx(exploreContainerStyles),\n      children: _NoDataSourceCallToAc || (_NoDataSourceCallToAc = /*#__PURE__*/_jsx(NoDataSourceCallToAction, {}))\n    });\n  }\n\n  renderNoData() {\n    return _NoData || (_NoData = /*#__PURE__*/_jsx(NoData, {}));\n  }\n\n  renderGraphPanel(width) {\n    const {\n      graphResult,\n      absoluteRange,\n      timeZone,\n      splitOpen,\n      queryResponse,\n      loading,\n      theme,\n      graphStyle\n    } = this.props;\n    const spacing = parseInt(theme.spacing(2).slice(0, -2), 10);\n\n    const label = /*#__PURE__*/_jsx(ExploreGraphLabel, {\n      graphStyle: graphStyle,\n      onChangeGraphStyle: this.onChangeGraphStyle\n    });\n\n    return /*#__PURE__*/_jsx(Collapse, {\n      label: label,\n      loading: loading,\n      isOpen: true,\n      children: /*#__PURE__*/_jsx(ExploreGraph, {\n        graphStyle: graphStyle,\n        data: graphResult,\n        height: 400,\n        width: width - spacing,\n        absoluteRange: absoluteRange,\n        onChangeTime: this.onUpdateTimeRange,\n        timeZone: timeZone,\n        annotations: queryResponse.annotations,\n        splitOpenFn: splitOpen,\n        loadingState: queryResponse.state\n      })\n    });\n  }\n\n  renderTablePanel(width) {\n    const {\n      exploreId,\n      datasourceInstance,\n      timeZone\n    } = this.props;\n    return /*#__PURE__*/_jsx(TableContainer, {\n      ariaLabel: selectors.pages.Explore.General.table,\n      width: width,\n      exploreId: exploreId,\n      onCellFilterAdded: datasourceInstance !== null && datasourceInstance !== void 0 && datasourceInstance.modifyQuery ? this.onCellFilterAdded : undefined,\n      timeZone: timeZone\n    });\n  }\n\n  renderLogsPanel(width) {\n    const {\n      exploreId,\n      syncedTimes,\n      theme,\n      queryResponse\n    } = this.props;\n    const spacing = parseInt(theme.spacing(2).slice(0, -2), 10);\n    return /*#__PURE__*/_jsx(LogsContainer, {\n      exploreId: exploreId,\n      loadingState: queryResponse.state,\n      syncedTimes: syncedTimes,\n      width: width - spacing,\n      onClickFilterLabel: this.onClickFilterLabel,\n      onClickFilterOutLabel: this.onClickFilterOutLabel,\n      onStartScanning: this.onStartScanning,\n      onStopScanning: this.onStopScanning\n    });\n  }\n\n  renderNodeGraphPanel() {\n    const {\n      exploreId,\n      showTrace,\n      queryResponse\n    } = this.props;\n    return /*#__PURE__*/_jsx(NodeGraphContainer, {\n      dataFrames: this.memoizedGetNodeGraphDataFrames(queryResponse.series),\n      exploreId: exploreId,\n      withTraceView: showTrace\n    });\n  }\n\n  renderTraceViewPanel() {\n    const {\n      queryResponse,\n      splitOpen,\n      exploreId\n    } = this.props;\n    const dataFrames = queryResponse.series.filter(series => {\n      var _series$meta;\n\n      return ((_series$meta = series.meta) === null || _series$meta === void 0 ? void 0 : _series$meta.preferredVisualisationType) === 'trace';\n    });\n    return (// If there is no data (like 404) we show a separate error so no need to show anything here\n      dataFrames.length && /*#__PURE__*/_jsx(TraceViewContainer, {\n        exploreId: exploreId,\n        dataFrames: dataFrames,\n        splitOpenFn: splitOpen,\n        scrollElement: this.scrollElement,\n        queryResponse: queryResponse,\n        topOfViewRef: this.topOfViewRef\n      })\n    );\n  }\n\n  render() {\n    const {\n      datasourceInstance,\n      datasourceMissing,\n      exploreId,\n      graphResult,\n      queryResponse,\n      isLive,\n      theme,\n      showMetrics,\n      showTable,\n      showLogs,\n      showTrace,\n      showNodeGraph,\n      timeZone\n    } = this.props;\n    const {\n      openDrawer\n    } = this.state;\n    const styles = getStyles(theme);\n    const showPanels = queryResponse && queryResponse.state !== LoadingState.NotStarted;\n    const showRichHistory = openDrawer === ExploreDrawer.RichHistory;\n    const richHistoryRowButtonHidden = !supportedFeatures().queryHistoryAvailable;\n    const showQueryInspector = openDrawer === ExploreDrawer.QueryInspector;\n    const showNoData = queryResponse.state === LoadingState.Done && [queryResponse.logsFrames, queryResponse.graphFrames, queryResponse.nodeGraphFrames, queryResponse.tableFrames, queryResponse.traceFrames].every(e => e.length === 0);\n    return /*#__PURE__*/_jsxs(CustomScrollbar, {\n      testId: selectors.pages.Explore.General.scrollView,\n      autoHeightMin: '100%',\n      scrollRefCallback: scrollElement => this.scrollElement = scrollElement || undefined,\n      children: [/*#__PURE__*/_jsx(ExploreToolbar, {\n        exploreId: exploreId,\n        onChangeTime: this.onChangeTime,\n        topOfViewRef: this.topOfViewRef\n      }), datasourceMissing ? this.renderEmptyState(styles.exploreContainer) : null, datasourceInstance && /*#__PURE__*/_jsxs(\"div\", {\n        className: cx(styles.exploreContainer),\n        children: [/*#__PURE__*/_jsxs(PanelContainer, {\n          className: styles.queryContainer,\n          children: [/*#__PURE__*/_jsx(QueryRows, {\n            exploreId: exploreId\n          }), /*#__PURE__*/_jsx(SecondaryActions, {\n            addQueryRowButtonDisabled: isLive // We cannot show multiple traces at the same time right now so we do not show add query button.\n            //TODO:unification\n            ,\n            addQueryRowButtonHidden: false,\n            richHistoryRowButtonHidden: richHistoryRowButtonHidden,\n            richHistoryButtonActive: showRichHistory,\n            queryInspectorButtonActive: showQueryInspector,\n            onClickAddQueryRowButton: this.onClickAddQueryRowButton,\n            onClickRichHistoryButton: this.toggleShowRichHistory,\n            onClickQueryInspectorButton: this.toggleShowQueryInspector\n          }), /*#__PURE__*/_jsx(ResponseErrorContainer, {\n            exploreId: exploreId\n          })]\n        }), /*#__PURE__*/_jsx(AutoSizer, {\n          onResize: this.onResize,\n          disableHeight: true,\n          children: ({\n            width\n          }) => {\n            if (width === 0) {\n              return null;\n            }\n\n            return /*#__PURE__*/_jsx(\"main\", {\n              className: cx(styles.exploreMain),\n              style: {\n                width\n              },\n              children: /*#__PURE__*/_jsxs(ErrorBoundaryAlert, {\n                children: [showPanels && /*#__PURE__*/_jsxs(_Fragment, {\n                  children: [showMetrics && graphResult && /*#__PURE__*/_jsx(ErrorBoundaryAlert, {\n                    children: this.renderGraphPanel(width)\n                  }), showTable && /*#__PURE__*/_jsx(ErrorBoundaryAlert, {\n                    children: this.renderTablePanel(width)\n                  }), showLogs && /*#__PURE__*/_jsx(ErrorBoundaryAlert, {\n                    children: this.renderLogsPanel(width)\n                  }), showNodeGraph && /*#__PURE__*/_jsx(ErrorBoundaryAlert, {\n                    children: this.renderNodeGraphPanel()\n                  }), showTrace && /*#__PURE__*/_jsx(ErrorBoundaryAlert, {\n                    children: this.renderTraceViewPanel()\n                  }), showNoData && /*#__PURE__*/_jsx(ErrorBoundaryAlert, {\n                    children: this.renderNoData()\n                  })]\n                }), showRichHistory && /*#__PURE__*/_jsx(RichHistoryContainer, {\n                  width: width,\n                  exploreId: exploreId,\n                  onClose: this.toggleShowRichHistory\n                }), showQueryInspector && /*#__PURE__*/_jsx(ExploreQueryInspector, {\n                  exploreId: exploreId,\n                  width: width,\n                  onClose: this.toggleShowQueryInspector,\n                  timeZone: timeZone\n                })]\n              })\n            });\n          }\n        })]\n      })]\n    });\n  }\n\n}\n\nfunction mapStateToProps(state, {\n  exploreId\n}) {\n  const explore = state.explore;\n  const {\n    syncedTimes\n  } = explore;\n  const item = explore[exploreId];\n  const timeZone = getTimeZone(state.user);\n  const {\n    datasourceInstance,\n    datasourceMissing,\n    queryKeys,\n    isLive,\n    graphResult,\n    logsResult,\n    showLogs,\n    showMetrics,\n    showTable,\n    showTrace,\n    absoluteRange,\n    queryResponse,\n    showNodeGraph,\n    loading,\n    graphStyle\n  } = item;\n  return {\n    datasourceInstance,\n    datasourceMissing,\n    queryKeys,\n    isLive,\n    graphResult,\n    logsResult: logsResult !== null && logsResult !== void 0 ? logsResult : undefined,\n    absoluteRange,\n    queryResponse,\n    syncedTimes,\n    timeZone,\n    showLogs,\n    showMetrics,\n    showTable,\n    showTrace,\n    showNodeGraph,\n    loading,\n    graphStyle\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSize,\n  changeGraphStyle,\n  modifyQueries,\n  scanStart,\n  scanStopAction,\n  setQueries,\n  updateTimeRange,\n  makeAbsoluteTime,\n  addQueryRow,\n  splitOpen\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(connector, withTheme2)(Explore);","map":{"version":3,"names":["css","cx","memoizeOne","React","createRef","connect","AutoSizer","compose","LoadingState","selectors","Collapse","CustomScrollbar","ErrorBoundaryAlert","withTheme2","PanelContainer","FILTER_FOR_OPERATOR","FILTER_OUT_OPERATOR","appEvents","supportedFeatures","getNodeGraphDataFrames","AbsoluteTimeEvent","getTimeZone","ExploreGraph","ExploreGraphLabel","ExploreQueryInspector","ExploreToolbar","LogsContainer","NoData","NoDataSourceCallToAction","NodeGraphContainer","QueryRows","ResponseErrorContainer","RichHistoryContainer","SecondaryActions","TableContainer","TraceViewContainer","changeSize","changeGraphStyle","splitOpen","addQueryRow","modifyQueries","scanStart","scanStopAction","setQueries","makeAbsoluteTime","updateTimeRange","getStyles","theme","exploreMain","button","queryContainer","spacing","exploreContainer","ExploreDrawer","Explore","PureComponent","constructor","props","rawRange","exploreId","query","filter","value","key","operator","onClickFilterLabel","onClickFilterOutLabel","onModifyQueries","type","queryKeys","datasourceInstance","length","action","index","modifyQuery","modifier","queries","modification","size","absoluteRange","graphStyle","setState","state","openDrawer","RichHistory","undefined","QueryInspector","componentDidMount","absoluteTimeUnsubsciber","subscribe","onMakeAbsoluteTime","componentWillUnmount","unsubscribe","renderEmptyState","exploreContainerStyles","renderNoData","renderGraphPanel","width","graphResult","timeZone","queryResponse","loading","parseInt","slice","label","onChangeGraphStyle","onUpdateTimeRange","annotations","renderTablePanel","pages","General","table","onCellFilterAdded","renderLogsPanel","syncedTimes","onStartScanning","onStopScanning","renderNodeGraphPanel","showTrace","memoizedGetNodeGraphDataFrames","series","renderTraceViewPanel","dataFrames","meta","preferredVisualisationType","scrollElement","topOfViewRef","render","datasourceMissing","isLive","showMetrics","showTable","showLogs","showNodeGraph","styles","showPanels","NotStarted","showRichHistory","richHistoryRowButtonHidden","queryHistoryAvailable","showQueryInspector","showNoData","Done","logsFrames","graphFrames","nodeGraphFrames","tableFrames","traceFrames","every","e","scrollView","onChangeTime","onClickAddQueryRowButton","toggleShowRichHistory","toggleShowQueryInspector","onResize","mapStateToProps","explore","item","user","logsResult","mapDispatchToProps","connector"],"sources":["/home/soula/grafana/public/app/features/explore/Explore.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport memoizeOne from 'memoize-one';\nimport React, { createRef } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { compose } from 'redux';\nimport { Unsubscribable } from 'rxjs';\n\nimport { AbsoluteTimeRange, DataQuery, GrafanaTheme2, LoadingState, RawTimeRange } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Collapse, CustomScrollbar, ErrorBoundaryAlert, Themeable2, withTheme2, PanelContainer } from '@grafana/ui';\nimport { FILTER_FOR_OPERATOR, FILTER_OUT_OPERATOR, FilterItem } from '@grafana/ui/src/components/Table/types';\nimport appEvents from 'app/core/app_events';\nimport { supportedFeatures } from 'app/core/history/richHistoryStorageProvider';\nimport { getNodeGraphDataFrames } from 'app/plugins/panel/nodeGraph/utils';\nimport { StoreState } from 'app/types';\nimport { AbsoluteTimeEvent } from 'app/types/events';\nimport { ExploreGraphStyle, ExploreId, ExploreItemState } from 'app/types/explore';\n\nimport { getTimeZone } from '../profile/state/selectors';\n\nimport { ExploreGraph } from './ExploreGraph';\nimport { ExploreGraphLabel } from './ExploreGraphLabel';\nimport ExploreQueryInspector from './ExploreQueryInspector';\nimport { ExploreToolbar } from './ExploreToolbar';\nimport LogsContainer from './LogsContainer';\nimport { NoData } from './NoData';\nimport { NoDataSourceCallToAction } from './NoDataSourceCallToAction';\nimport { NodeGraphContainer } from './NodeGraphContainer';\nimport { QueryRows } from './QueryRows';\nimport { ResponseErrorContainer } from './ResponseErrorContainer';\nimport RichHistoryContainer from './RichHistory/RichHistoryContainer';\nimport { SecondaryActions } from './SecondaryActions';\nimport TableContainer from './TableContainer';\nimport { TraceViewContainer } from './TraceView/TraceViewContainer';\nimport { changeSize, changeGraphStyle } from './state/explorePane';\nimport { splitOpen } from './state/main';\nimport { addQueryRow, modifyQueries, scanStart, scanStopAction, setQueries } from './state/query';\nimport { makeAbsoluteTime, updateTimeRange } from './state/time';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    exploreMain: css`\n      label: exploreMain;\n      // Is needed for some transition animations to work.\n      position: relative;\n      margin-top: 21px;\n    `,\n    button: css`\n      label: button;\n      margin: 1em 4px 0 0;\n    `,\n    queryContainer: css`\n      label: queryContainer;\n      // Need to override normal css class and don't want to count on ordering of the classes in html.\n      height: auto !important;\n      flex: unset !important;\n      display: unset !important;\n      padding: ${theme.spacing(1)};\n    `,\n    exploreContainer: css`\n      display: flex;\n      flex: 1 1 auto;\n      flex-direction: column;\n      padding: ${theme.spacing(2)};\n      padding-top: 0;\n    `,\n  };\n};\n\nexport interface ExploreProps extends Themeable2 {\n  exploreId: ExploreId;\n  theme: GrafanaTheme2;\n}\n\nenum ExploreDrawer {\n  RichHistory,\n  QueryInspector,\n}\n\ninterface ExploreState {\n  openDrawer?: ExploreDrawer;\n}\n\nexport type Props = ExploreProps & ConnectedProps<typeof connector>;\n\n/**\n * Explore provides an area for quick query iteration for a given datasource.\n * Once a datasource is selected it populates the query section at the top.\n * When queries are run, their results are being displayed in the main section.\n * The datasource determines what kind of query editor it brings, and what kind\n * of results viewers it supports. The state is managed entirely in Redux.\n *\n * SPLIT VIEW\n *\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\n * Since there can be multiple Explores (e.g., left and right) each action needs\n * the `exploreId` as first parameter so that the reducer knows which Explore state\n * is affected.\n *\n * DATASOURCE REQUESTS\n *\n * A click on Run Query creates transactions for all DataQueries for all expanded\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\n * saves the result. The result viewers construct their data from the currently existing\n * transactions.\n *\n * The result viewers determine some of the query options sent to the datasource, e.g.,\n * `format`, to indicate eventual transformations by the datasources' result transformers.\n */\nexport class Explore extends React.PureComponent<Props, ExploreState> {\n  scrollElement: HTMLDivElement | undefined;\n  absoluteTimeUnsubsciber: Unsubscribable | undefined;\n  topOfViewRef = createRef<HTMLDivElement>();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      openDrawer: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.absoluteTimeUnsubsciber = appEvents.subscribe(AbsoluteTimeEvent, this.onMakeAbsoluteTime);\n  }\n\n  componentWillUnmount() {\n    this.absoluteTimeUnsubsciber?.unsubscribe();\n  }\n\n  onChangeTime = (rawRange: RawTimeRange) => {\n    const { updateTimeRange, exploreId } = this.props;\n    updateTimeRange({ exploreId, rawRange });\n  };\n\n  // Use this in help pages to set page to a single query\n  onClickExample = (query: DataQuery) => {\n    this.props.setQueries(this.props.exploreId, [query]);\n  };\n\n  onCellFilterAdded = (filter: FilterItem) => {\n    const { value, key, operator } = filter;\n    if (operator === FILTER_FOR_OPERATOR) {\n      this.onClickFilterLabel(key, value);\n    }\n\n    if (operator === FILTER_OUT_OPERATOR) {\n      this.onClickFilterOutLabel(key, value);\n    }\n  };\n\n  onClickFilterLabel = (key: string, value: string) => {\n    this.onModifyQueries({ type: 'ADD_FILTER', key, value });\n  };\n\n  onClickFilterOutLabel = (key: string, value: string) => {\n    this.onModifyQueries({ type: 'ADD_FILTER_OUT', key, value });\n  };\n\n  onClickAddQueryRowButton = () => {\n    const { exploreId, queryKeys, datasourceInstance } = this.props;\n    this.props.addQueryRow(exploreId, queryKeys.length, datasourceInstance);\n  };\n\n  onMakeAbsoluteTime = () => {\n    const { makeAbsoluteTime } = this.props;\n    makeAbsoluteTime();\n  };\n\n  onModifyQueries = (action: any, index?: number) => {\n    const { datasourceInstance } = this.props;\n    if (datasourceInstance?.modifyQuery) {\n      const modifier = (queries: DataQuery, modification: any) =>\n        datasourceInstance.modifyQuery!(queries, modification);\n      this.props.modifyQueries(this.props.exploreId, action, modifier, index);\n    }\n  };\n\n  onResize = (size: { height: number; width: number }) => {\n    this.props.changeSize(this.props.exploreId, size);\n  };\n\n  onStartScanning = () => {\n    // Scanner will trigger a query\n    this.props.scanStart(this.props.exploreId);\n  };\n\n  onStopScanning = () => {\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\n  };\n\n  onUpdateTimeRange = (absoluteRange: AbsoluteTimeRange) => {\n    const { exploreId, updateTimeRange } = this.props;\n    updateTimeRange({ exploreId, absoluteRange });\n  };\n\n  onChangeGraphStyle = (graphStyle: ExploreGraphStyle) => {\n    const { exploreId, changeGraphStyle } = this.props;\n    changeGraphStyle(exploreId, graphStyle);\n  };\n\n  toggleShowRichHistory = () => {\n    this.setState((state) => {\n      return {\n        openDrawer: state.openDrawer === ExploreDrawer.RichHistory ? undefined : ExploreDrawer.RichHistory,\n      };\n    });\n  };\n\n  toggleShowQueryInspector = () => {\n    this.setState((state) => {\n      return {\n        openDrawer: state.openDrawer === ExploreDrawer.QueryInspector ? undefined : ExploreDrawer.QueryInspector,\n      };\n    });\n  };\n\n  renderEmptyState(exploreContainerStyles: string) {\n    return (\n      <div className={cx(exploreContainerStyles)}>\n        <NoDataSourceCallToAction />\n      </div>\n    );\n  }\n\n  renderNoData() {\n    return <NoData />;\n  }\n\n  renderGraphPanel(width: number) {\n    const { graphResult, absoluteRange, timeZone, splitOpen, queryResponse, loading, theme, graphStyle } = this.props;\n    const spacing = parseInt(theme.spacing(2).slice(0, -2), 10);\n    const label = <ExploreGraphLabel graphStyle={graphStyle} onChangeGraphStyle={this.onChangeGraphStyle} />;\n    return (\n      <Collapse label={label} loading={loading} isOpen>\n        <ExploreGraph\n          graphStyle={graphStyle}\n          data={graphResult!}\n          height={400}\n          width={width - spacing}\n          absoluteRange={absoluteRange}\n          onChangeTime={this.onUpdateTimeRange}\n          timeZone={timeZone}\n          annotations={queryResponse.annotations}\n          splitOpenFn={splitOpen}\n          loadingState={queryResponse.state}\n        />\n      </Collapse>\n    );\n  }\n\n  renderTablePanel(width: number) {\n    const { exploreId, datasourceInstance, timeZone } = this.props;\n    return (\n      <TableContainer\n        ariaLabel={selectors.pages.Explore.General.table}\n        width={width}\n        exploreId={exploreId}\n        onCellFilterAdded={datasourceInstance?.modifyQuery ? this.onCellFilterAdded : undefined}\n        timeZone={timeZone}\n      />\n    );\n  }\n\n  renderLogsPanel(width: number) {\n    const { exploreId, syncedTimes, theme, queryResponse } = this.props;\n    const spacing = parseInt(theme.spacing(2).slice(0, -2), 10);\n    return (\n      <LogsContainer\n        exploreId={exploreId}\n        loadingState={queryResponse.state}\n        syncedTimes={syncedTimes}\n        width={width - spacing}\n        onClickFilterLabel={this.onClickFilterLabel}\n        onClickFilterOutLabel={this.onClickFilterOutLabel}\n        onStartScanning={this.onStartScanning}\n        onStopScanning={this.onStopScanning}\n      />\n    );\n  }\n\n  renderNodeGraphPanel() {\n    const { exploreId, showTrace, queryResponse } = this.props;\n    return (\n      <NodeGraphContainer\n        dataFrames={this.memoizedGetNodeGraphDataFrames(queryResponse.series)}\n        exploreId={exploreId}\n        withTraceView={showTrace}\n      />\n    );\n  }\n\n  memoizedGetNodeGraphDataFrames = memoizeOne(getNodeGraphDataFrames);\n\n  renderTraceViewPanel() {\n    const { queryResponse, splitOpen, exploreId } = this.props;\n    const dataFrames = queryResponse.series.filter((series) => series.meta?.preferredVisualisationType === 'trace');\n\n    return (\n      // If there is no data (like 404) we show a separate error so no need to show anything here\n      dataFrames.length && (\n        <TraceViewContainer\n          exploreId={exploreId}\n          dataFrames={dataFrames}\n          splitOpenFn={splitOpen}\n          scrollElement={this.scrollElement}\n          queryResponse={queryResponse}\n          topOfViewRef={this.topOfViewRef}\n        />\n      )\n    );\n  }\n\n  render() {\n    const {\n      datasourceInstance,\n      datasourceMissing,\n      exploreId,\n      graphResult,\n      queryResponse,\n      isLive,\n      theme,\n      showMetrics,\n      showTable,\n      showLogs,\n      showTrace,\n      showNodeGraph,\n      timeZone,\n    } = this.props;\n    const { openDrawer } = this.state;\n    const styles = getStyles(theme);\n    const showPanels = queryResponse && queryResponse.state !== LoadingState.NotStarted;\n    const showRichHistory = openDrawer === ExploreDrawer.RichHistory;\n    const richHistoryRowButtonHidden = !supportedFeatures().queryHistoryAvailable;\n    const showQueryInspector = openDrawer === ExploreDrawer.QueryInspector;\n    const showNoData =\n      queryResponse.state === LoadingState.Done &&\n      [\n        queryResponse.logsFrames,\n        queryResponse.graphFrames,\n        queryResponse.nodeGraphFrames,\n        queryResponse.tableFrames,\n        queryResponse.traceFrames,\n      ].every((e) => e.length === 0);\n\n    return (\n      <CustomScrollbar\n        testId={selectors.pages.Explore.General.scrollView}\n        autoHeightMin={'100%'}\n        scrollRefCallback={(scrollElement) => (this.scrollElement = scrollElement || undefined)}\n      >\n        <ExploreToolbar exploreId={exploreId} onChangeTime={this.onChangeTime} topOfViewRef={this.topOfViewRef} />\n        {datasourceMissing ? this.renderEmptyState(styles.exploreContainer) : null}\n        {datasourceInstance && (\n          <div className={cx(styles.exploreContainer)}>\n            <PanelContainer className={styles.queryContainer}>\n              <QueryRows exploreId={exploreId} />\n              <SecondaryActions\n                addQueryRowButtonDisabled={isLive}\n                // We cannot show multiple traces at the same time right now so we do not show add query button.\n                //TODO:unification\n                addQueryRowButtonHidden={false}\n                richHistoryRowButtonHidden={richHistoryRowButtonHidden}\n                richHistoryButtonActive={showRichHistory}\n                queryInspectorButtonActive={showQueryInspector}\n                onClickAddQueryRowButton={this.onClickAddQueryRowButton}\n                onClickRichHistoryButton={this.toggleShowRichHistory}\n                onClickQueryInspectorButton={this.toggleShowQueryInspector}\n              />\n              <ResponseErrorContainer exploreId={exploreId} />\n            </PanelContainer>\n            <AutoSizer onResize={this.onResize} disableHeight>\n              {({ width }) => {\n                if (width === 0) {\n                  return null;\n                }\n\n                return (\n                  <main className={cx(styles.exploreMain)} style={{ width }}>\n                    <ErrorBoundaryAlert>\n                      {showPanels && (\n                        <>\n                          {showMetrics && graphResult && (\n                            <ErrorBoundaryAlert>{this.renderGraphPanel(width)}</ErrorBoundaryAlert>\n                          )}\n                          {showTable && <ErrorBoundaryAlert>{this.renderTablePanel(width)}</ErrorBoundaryAlert>}\n                          {showLogs && <ErrorBoundaryAlert>{this.renderLogsPanel(width)}</ErrorBoundaryAlert>}\n                          {showNodeGraph && <ErrorBoundaryAlert>{this.renderNodeGraphPanel()}</ErrorBoundaryAlert>}\n                          {showTrace && <ErrorBoundaryAlert>{this.renderTraceViewPanel()}</ErrorBoundaryAlert>}\n                          {showNoData && <ErrorBoundaryAlert>{this.renderNoData()}</ErrorBoundaryAlert>}\n                        </>\n                      )}\n                      {showRichHistory && (\n                        <RichHistoryContainer\n                          width={width}\n                          exploreId={exploreId}\n                          onClose={this.toggleShowRichHistory}\n                        />\n                      )}\n                      {showQueryInspector && (\n                        <ExploreQueryInspector\n                          exploreId={exploreId}\n                          width={width}\n                          onClose={this.toggleShowQueryInspector}\n                          timeZone={timeZone}\n                        />\n                      )}\n                    </ErrorBoundaryAlert>\n                  </main>\n                );\n              }}\n            </AutoSizer>\n          </div>\n        )}\n      </CustomScrollbar>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: ExploreProps) {\n  const explore = state.explore;\n  const { syncedTimes } = explore;\n  const item: ExploreItemState = explore[exploreId]!;\n  const timeZone = getTimeZone(state.user);\n  const {\n    datasourceInstance,\n    datasourceMissing,\n    queryKeys,\n    isLive,\n    graphResult,\n    logsResult,\n    showLogs,\n    showMetrics,\n    showTable,\n    showTrace,\n    absoluteRange,\n    queryResponse,\n    showNodeGraph,\n    loading,\n    graphStyle,\n  } = item;\n\n  return {\n    datasourceInstance,\n    datasourceMissing,\n    queryKeys,\n    isLive,\n    graphResult,\n    logsResult: logsResult ?? undefined,\n    absoluteRange,\n    queryResponse,\n    syncedTimes,\n    timeZone,\n    showLogs,\n    showMetrics,\n    showTable,\n    showTrace,\n    showNodeGraph,\n    loading,\n    graphStyle,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSize,\n  changeGraphStyle,\n  modifyQueries,\n  scanStart,\n  scanStopAction,\n  setQueries,\n  updateTimeRange,\n  makeAbsoluteTime,\n  addQueryRow,\n  splitOpen,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default compose(connector, withTheme2)(Explore) as React.ComponentType<{ exploreId: ExploreId }>;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}