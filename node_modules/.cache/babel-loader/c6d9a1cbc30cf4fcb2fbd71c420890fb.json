{"ast":null,"code":"import { lastValueFrom, of } from 'rxjs';\nimport { DataSourceApi } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { AlertManagerImplementation } from './types';\nexport class AlertManagerDatasource extends DataSourceApi {\n  constructor(instanceSettings) {\n    super(instanceSettings);\n    this.instanceSettings = instanceSettings;\n  } // `query()` has to be implemented but we actually don't use it, just need this\n  // data source to proxy requests.\n  // @ts-ignore\n\n\n  query() {\n    return of({\n      data: []\n    });\n  }\n\n  _request(url) {\n    const options = {\n      headers: {},\n      method: 'GET',\n      url: this.instanceSettings.url + url\n    };\n\n    if (this.instanceSettings.basicAuth || this.instanceSettings.withCredentials) {\n      this.instanceSettings.withCredentials = true;\n    }\n\n    if (this.instanceSettings.basicAuth) {\n      options.headers.Authorization = this.instanceSettings.basicAuth;\n    }\n\n    return lastValueFrom(getBackendSrv().fetch(options));\n  }\n\n  async testDatasource() {\n    var _alertmanagerResponse3;\n\n    let alertmanagerResponse;\n\n    if (this.instanceSettings.jsonData.implementation === AlertManagerImplementation.prometheus) {\n      try {\n        var _alertmanagerResponse;\n\n        alertmanagerResponse = await this._request('/alertmanager/api/v2/status');\n\n        if (alertmanagerResponse && ((_alertmanagerResponse = alertmanagerResponse) === null || _alertmanagerResponse === void 0 ? void 0 : _alertmanagerResponse.status) === 200) {\n          return {\n            status: 'error',\n            message: 'It looks like you have chosen Prometheus implementation, but detected a Mimir or Cortex endpoint. Please update implementation selection and try again.'\n          };\n        }\n      } catch (e) {}\n\n      try {\n        alertmanagerResponse = await this._request('/api/v2/status');\n      } catch (e) {}\n    } else {\n      try {\n        var _alertmanagerResponse2;\n\n        alertmanagerResponse = await this._request('/api/v2/status');\n\n        if (alertmanagerResponse && ((_alertmanagerResponse2 = alertmanagerResponse) === null || _alertmanagerResponse2 === void 0 ? void 0 : _alertmanagerResponse2.status) === 200) {\n          return {\n            status: 'error',\n            message: 'It looks like you have chosen a Mimir or Cortex implementation, but detected a Prometheus endpoint. Please update implementation selection and try again.'\n          };\n        }\n      } catch (e) {}\n\n      try {\n        alertmanagerResponse = await this._request('/alertmanager/api/v2/status');\n      } catch (e) {}\n    }\n\n    return ((_alertmanagerResponse3 = alertmanagerResponse) === null || _alertmanagerResponse3 === void 0 ? void 0 : _alertmanagerResponse3.status) === 200 ? {\n      status: 'success',\n      message: 'Health check passed.'\n    } : {\n      status: 'error',\n      message: 'Health check failed.'\n    };\n  }\n\n}","map":{"version":3,"names":["lastValueFrom","of","DataSourceApi","getBackendSrv","AlertManagerImplementation","AlertManagerDatasource","constructor","instanceSettings","query","data","_request","url","options","headers","method","basicAuth","withCredentials","Authorization","fetch","testDatasource","alertmanagerResponse","jsonData","implementation","prometheus","status","message","e"],"sources":["/home/soula/grafana/public/app/plugins/datasource/alertmanager/DataSource.ts"],"sourcesContent":["import { lastValueFrom, Observable, of } from 'rxjs';\n\nimport { DataQuery, DataQueryResponse, DataSourceApi, DataSourceInstanceSettings } from '@grafana/data';\nimport { BackendSrvRequest, getBackendSrv } from '@grafana/runtime';\n\nimport { AlertManagerDataSourceJsonData, AlertManagerImplementation } from './types';\n\nexport type AlertManagerQuery = {\n  query: string;\n} & DataQuery;\n\nexport class AlertManagerDatasource extends DataSourceApi<AlertManagerQuery, AlertManagerDataSourceJsonData> {\n  constructor(public instanceSettings: DataSourceInstanceSettings<AlertManagerDataSourceJsonData>) {\n    super(instanceSettings);\n  }\n\n  // `query()` has to be implemented but we actually don't use it, just need this\n  // data source to proxy requests.\n  // @ts-ignore\n  query(): Observable<DataQueryResponse> {\n    return of({\n      data: [],\n    });\n  }\n\n  _request(url: string) {\n    const options: BackendSrvRequest = {\n      headers: {},\n      method: 'GET',\n      url: this.instanceSettings.url + url,\n    };\n\n    if (this.instanceSettings.basicAuth || this.instanceSettings.withCredentials) {\n      this.instanceSettings.withCredentials = true;\n    }\n\n    if (this.instanceSettings.basicAuth) {\n      options.headers!.Authorization = this.instanceSettings.basicAuth;\n    }\n\n    return lastValueFrom(getBackendSrv().fetch<any>(options));\n  }\n\n  async testDatasource() {\n    let alertmanagerResponse;\n\n    if (this.instanceSettings.jsonData.implementation === AlertManagerImplementation.prometheus) {\n      try {\n        alertmanagerResponse = await this._request('/alertmanager/api/v2/status');\n        if (alertmanagerResponse && alertmanagerResponse?.status === 200) {\n          return {\n            status: 'error',\n            message:\n              'It looks like you have chosen Prometheus implementation, but detected a Mimir or Cortex endpoint. Please update implementation selection and try again.',\n          };\n        }\n      } catch (e) {}\n      try {\n        alertmanagerResponse = await this._request('/api/v2/status');\n      } catch (e) {}\n    } else {\n      try {\n        alertmanagerResponse = await this._request('/api/v2/status');\n        if (alertmanagerResponse && alertmanagerResponse?.status === 200) {\n          return {\n            status: 'error',\n            message:\n              'It looks like you have chosen a Mimir or Cortex implementation, but detected a Prometheus endpoint. Please update implementation selection and try again.',\n          };\n        }\n      } catch (e) {}\n      try {\n        alertmanagerResponse = await this._request('/alertmanager/api/v2/status');\n      } catch (e) {}\n    }\n\n    return alertmanagerResponse?.status === 200\n      ? {\n          status: 'success',\n          message: 'Health check passed.',\n        }\n      : {\n          status: 'error',\n          message: 'Health check failed.',\n        };\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAT,EAAoCC,EAApC,QAA8C,MAA9C;AAEA,SAAuCC,aAAvC,QAAwF,eAAxF;AACA,SAA4BC,aAA5B,QAAiD,kBAAjD;AAEA,SAAyCC,0BAAzC,QAA2E,SAA3E;AAMA,OAAO,MAAMC,sBAAN,SAAqCH,aAArC,CAAsG;EAC3GI,WAAW,CAAQC,gBAAR,EAAsF;IAC/F,MAAMA,gBAAN;IAD+F,KAA9EA,gBAA8E,GAA9EA,gBAA8E;EAEhG,CAH0G,CAK3G;EACA;EACA;;;EACAC,KAAK,GAAkC;IACrC,OAAOP,EAAE,CAAC;MACRQ,IAAI,EAAE;IADE,CAAD,CAAT;EAGD;;EAEDC,QAAQ,CAACC,GAAD,EAAc;IACpB,MAAMC,OAA0B,GAAG;MACjCC,OAAO,EAAE,EADwB;MAEjCC,MAAM,EAAE,KAFyB;MAGjCH,GAAG,EAAE,KAAKJ,gBAAL,CAAsBI,GAAtB,GAA4BA;IAHA,CAAnC;;IAMA,IAAI,KAAKJ,gBAAL,CAAsBQ,SAAtB,IAAmC,KAAKR,gBAAL,CAAsBS,eAA7D,EAA8E;MAC5E,KAAKT,gBAAL,CAAsBS,eAAtB,GAAwC,IAAxC;IACD;;IAED,IAAI,KAAKT,gBAAL,CAAsBQ,SAA1B,EAAqC;MACnCH,OAAO,CAACC,OAAR,CAAiBI,aAAjB,GAAiC,KAAKV,gBAAL,CAAsBQ,SAAvD;IACD;;IAED,OAAOf,aAAa,CAACG,aAAa,GAAGe,KAAhB,CAA2BN,OAA3B,CAAD,CAApB;EACD;;EAEmB,MAAdO,cAAc,GAAG;IAAA;;IACrB,IAAIC,oBAAJ;;IAEA,IAAI,KAAKb,gBAAL,CAAsBc,QAAtB,CAA+BC,cAA/B,KAAkDlB,0BAA0B,CAACmB,UAAjF,EAA6F;MAC3F,IAAI;QAAA;;QACFH,oBAAoB,GAAG,MAAM,KAAKV,QAAL,CAAc,6BAAd,CAA7B;;QACA,IAAIU,oBAAoB,IAAI,0BAAAA,oBAAoB,UAApB,sEAAsBI,MAAtB,MAAiC,GAA7D,EAAkE;UAChE,OAAO;YACLA,MAAM,EAAE,OADH;YAELC,OAAO,EACL;UAHG,CAAP;QAKD;MACF,CATD,CASE,OAAOC,CAAP,EAAU,CAAE;;MACd,IAAI;QACFN,oBAAoB,GAAG,MAAM,KAAKV,QAAL,CAAc,gBAAd,CAA7B;MACD,CAFD,CAEE,OAAOgB,CAAP,EAAU,CAAE;IACf,CAdD,MAcO;MACL,IAAI;QAAA;;QACFN,oBAAoB,GAAG,MAAM,KAAKV,QAAL,CAAc,gBAAd,CAA7B;;QACA,IAAIU,oBAAoB,IAAI,2BAAAA,oBAAoB,UAApB,wEAAsBI,MAAtB,MAAiC,GAA7D,EAAkE;UAChE,OAAO;YACLA,MAAM,EAAE,OADH;YAELC,OAAO,EACL;UAHG,CAAP;QAKD;MACF,CATD,CASE,OAAOC,CAAP,EAAU,CAAE;;MACd,IAAI;QACFN,oBAAoB,GAAG,MAAM,KAAKV,QAAL,CAAc,6BAAd,CAA7B;MACD,CAFD,CAEE,OAAOgB,CAAP,EAAU,CAAE;IACf;;IAED,OAAO,2BAAAN,oBAAoB,UAApB,wEAAsBI,MAAtB,MAAiC,GAAjC,GACH;MACEA,MAAM,EAAE,SADV;MAEEC,OAAO,EAAE;IAFX,CADG,GAKH;MACED,MAAM,EAAE,OADV;MAEEC,OAAO,EAAE;IAFX,CALJ;EASD;;AA1E0G"},"metadata":{},"sourceType":"module"}