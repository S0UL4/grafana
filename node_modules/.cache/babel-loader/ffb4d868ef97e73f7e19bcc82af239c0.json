{"ast":null,"code":"var _div;\n\nimport React, { useCallback } from 'react';\nimport { InlineField, InlineFieldRow, RadioButtonGroup } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { getPublicOrAbsoluteUrl, ResourceFolderName } from '..';\nimport { MediaType, ResourceDimensionMode, ResourcePickerSize } from '../types';\nimport { ResourcePicker } from './ResourcePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst resourceOptions = [{\n  label: 'Fixed',\n  value: ResourceDimensionMode.Fixed,\n  description: 'Fixed value'\n}, {\n  label: 'Field',\n  value: ResourceDimensionMode.Field,\n  description: 'Use a string field result'\n} //  { label: 'Mapping', value: ResourceDimensionMode.Mapping, description: 'Map the results of a value to an svg' },\n];\nconst dummyFieldSettings = {\n  settings: {}\n};\nexport const ResourceDimensionEditor = props => {\n  var _value$mode, _item$settings$showSo, _item$settings, _item$settings$resour, _item$settings2, _item$settings$folder, _item$settings3, _value$field, _item$settings$placeh, _item$settings5, _niceName;\n\n  const {\n    value,\n    context,\n    onChange,\n    item\n  } = props;\n  const labelWidth = 9;\n  const onModeChange = useCallback(mode => {\n    onChange(Object.assign({}, value, {\n      mode\n    }));\n  }, [onChange, value]);\n  const onFieldChange = useCallback(field => {\n    onChange(Object.assign({}, value, {\n      field\n    }));\n  }, [onChange, value]);\n  const onFixedChange = useCallback(fixed => {\n    onChange(Object.assign({}, value, {\n      fixed: fixed !== null && fixed !== void 0 ? fixed : ''\n    }));\n  }, [onChange, value]);\n\n  const onClear = event => {\n    event.stopPropagation();\n    onChange({\n      mode: ResourceDimensionMode.Fixed,\n      fixed: '',\n      field: ''\n    });\n  };\n\n  const mode = (_value$mode = value === null || value === void 0 ? void 0 : value.mode) !== null && _value$mode !== void 0 ? _value$mode : ResourceDimensionMode.Fixed;\n  const showSourceRadio = (_item$settings$showSo = (_item$settings = item.settings) === null || _item$settings === void 0 ? void 0 : _item$settings.showSourceRadio) !== null && _item$settings$showSo !== void 0 ? _item$settings$showSo : true;\n  const mediaType = (_item$settings$resour = (_item$settings2 = item.settings) === null || _item$settings2 === void 0 ? void 0 : _item$settings2.resourceType) !== null && _item$settings$resour !== void 0 ? _item$settings$resour : MediaType.Icon;\n  const folderName = (_item$settings$folder = (_item$settings3 = item.settings) === null || _item$settings3 === void 0 ? void 0 : _item$settings3.folderName) !== null && _item$settings$folder !== void 0 ? _item$settings$folder : ResourceFolderName.Icon;\n  let srcPath = '';\n\n  if (mediaType === MediaType.Icon) {\n    var _item$settings4;\n\n    if (value !== null && value !== void 0 && value.fixed) {\n      srcPath = getPublicOrAbsoluteUrl(value.fixed);\n    } else if ((_item$settings4 = item.settings) !== null && _item$settings4 !== void 0 && _item$settings4.placeholderValue) {\n      srcPath = getPublicOrAbsoluteUrl(item.settings.placeholderValue);\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [showSourceRadio && /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Source\",\n        labelWidth: labelWidth,\n        grow: true,\n        children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n          value: mode,\n          options: resourceOptions,\n          onChange: onModeChange,\n          fullWidth: true\n        })\n      })\n    }), mode !== ResourceDimensionMode.Fixed && /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Field\",\n        labelWidth: labelWidth,\n        grow: true,\n        children: /*#__PURE__*/_jsx(FieldNamePicker, {\n          context: context,\n          value: (_value$field = value.field) !== null && _value$field !== void 0 ? _value$field : '',\n          onChange: onFieldChange,\n          item: dummyFieldSettings\n        })\n      })\n    }), mode === ResourceDimensionMode.Fixed && /*#__PURE__*/_jsx(ResourcePicker, {\n      onChange: onFixedChange,\n      onClear: onClear,\n      value: value === null || value === void 0 ? void 0 : value.fixed,\n      src: srcPath,\n      placeholder: (_item$settings$placeh = (_item$settings5 = item.settings) === null || _item$settings5 === void 0 ? void 0 : _item$settings5.placeholderText) !== null && _item$settings$placeh !== void 0 ? _item$settings$placeh : 'Select a value',\n      name: (_niceName = niceName(value === null || value === void 0 ? void 0 : value.fixed)) !== null && _niceName !== void 0 ? _niceName : '',\n      mediaType: mediaType,\n      folderName: folderName,\n      size: ResourcePickerSize.NORMAL\n    }), mode === ResourceDimensionMode.Mapping && /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Mappings\",\n        labelWidth: labelWidth,\n        grow: true,\n        children: _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n          children: \"TODO mappings editor!\"\n        }))\n      })\n    })]\n  });\n};\nexport function niceName(value) {\n  if (!value) {\n    return undefined;\n  }\n\n  const idx = value.lastIndexOf('/');\n\n  if (idx > 0) {\n    return value.substring(idx + 1);\n  }\n\n  return value;\n}","map":{"version":3,"names":["React","useCallback","InlineField","InlineFieldRow","RadioButtonGroup","FieldNamePicker","getPublicOrAbsoluteUrl","ResourceFolderName","MediaType","ResourceDimensionMode","ResourcePickerSize","ResourcePicker","resourceOptions","label","value","Fixed","description","Field","dummyFieldSettings","settings","ResourceDimensionEditor","props","context","onChange","item","labelWidth","onModeChange","mode","onFieldChange","field","onFixedChange","fixed","onClear","event","stopPropagation","showSourceRadio","mediaType","resourceType","Icon","folderName","srcPath","placeholderValue","placeholderText","niceName","NORMAL","Mapping","undefined","idx","lastIndexOf","substring"],"sources":["/home/soula/grafana/public/app/features/dimensions/editors/ResourceDimensionEditor.tsx"],"sourcesContent":["import React, { FC, useCallback } from 'react';\n\nimport { FieldNamePickerConfigSettings, StandardEditorProps, StandardEditorsRegistryItem } from '@grafana/data';\nimport { InlineField, InlineFieldRow, RadioButtonGroup } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\n\nimport { getPublicOrAbsoluteUrl, ResourceFolderName } from '..';\nimport {\n  MediaType,\n  ResourceDimensionConfig,\n  ResourceDimensionMode,\n  ResourceDimensionOptions,\n  ResourcePickerSize,\n} from '../types';\n\nimport { ResourcePicker } from './ResourcePicker';\n\nconst resourceOptions = [\n  { label: 'Fixed', value: ResourceDimensionMode.Fixed, description: 'Fixed value' },\n  { label: 'Field', value: ResourceDimensionMode.Field, description: 'Use a string field result' },\n  //  { label: 'Mapping', value: ResourceDimensionMode.Mapping, description: 'Map the results of a value to an svg' },\n];\n\nconst dummyFieldSettings: StandardEditorsRegistryItem<string, FieldNamePickerConfigSettings> = {\n  settings: {},\n} as any;\n\nexport const ResourceDimensionEditor: FC<\n  StandardEditorProps<ResourceDimensionConfig, ResourceDimensionOptions, any>\n> = (props) => {\n  const { value, context, onChange, item } = props;\n  const labelWidth = 9;\n\n  const onModeChange = useCallback(\n    (mode) => {\n      onChange({\n        ...value,\n        mode,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFieldChange = useCallback(\n    (field) => {\n      onChange({\n        ...value,\n        field,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onFixedChange = useCallback(\n    (fixed?: string) => {\n      onChange({\n        ...value,\n        fixed: fixed ?? '',\n      });\n    },\n    [onChange, value]\n  );\n\n  const onClear = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    onChange({ mode: ResourceDimensionMode.Fixed, fixed: '', field: '' });\n  };\n\n  const mode = value?.mode ?? ResourceDimensionMode.Fixed;\n  const showSourceRadio = item.settings?.showSourceRadio ?? true;\n  const mediaType = item.settings?.resourceType ?? MediaType.Icon;\n  const folderName = item.settings?.folderName ?? ResourceFolderName.Icon;\n  let srcPath = '';\n  if (mediaType === MediaType.Icon) {\n    if (value?.fixed) {\n      srcPath = getPublicOrAbsoluteUrl(value.fixed);\n    } else if (item.settings?.placeholderValue) {\n      srcPath = getPublicOrAbsoluteUrl(item.settings.placeholderValue);\n    }\n  }\n\n  return (\n    <>\n      {showSourceRadio && (\n        <InlineFieldRow>\n          <InlineField label=\"Source\" labelWidth={labelWidth} grow={true}>\n            <RadioButtonGroup value={mode} options={resourceOptions} onChange={onModeChange} fullWidth />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode !== ResourceDimensionMode.Fixed && (\n        <InlineFieldRow>\n          <InlineField label=\"Field\" labelWidth={labelWidth} grow={true}>\n            <FieldNamePicker\n              context={context}\n              value={value.field ?? ''}\n              onChange={onFieldChange}\n              item={dummyFieldSettings}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n      {mode === ResourceDimensionMode.Fixed && (\n        <ResourcePicker\n          onChange={onFixedChange}\n          onClear={onClear}\n          value={value?.fixed}\n          src={srcPath}\n          placeholder={item.settings?.placeholderText ?? 'Select a value'}\n          name={niceName(value?.fixed) ?? ''}\n          mediaType={mediaType}\n          folderName={folderName}\n          size={ResourcePickerSize.NORMAL}\n        />\n      )}\n      {mode === ResourceDimensionMode.Mapping && (\n        <InlineFieldRow>\n          <InlineField label=\"Mappings\" labelWidth={labelWidth} grow={true}>\n            <div>TODO mappings editor!</div>\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </>\n  );\n};\n\nexport function niceName(value?: string): string | undefined {\n  if (!value) {\n    return undefined;\n  }\n  const idx = value.lastIndexOf('/');\n  if (idx > 0) {\n    return value.substring(idx + 1);\n  }\n  return value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}