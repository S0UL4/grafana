{"ast":null,"code":"var _div;\n\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const AnnotationsHelp = () => {\n  return _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n    className: \"gf-form grafana-info-box alert-info\",\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"h5\", {\n        children: \"Annotation Query Format\"\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"An annotation is an event that is overlaid on top of graphs. Annotation rendering is expensive so it is important to limit the number of rows returned.\", ' ']\n      }), /*#__PURE__*/_jsx(\"p\", {\n        children: \"The Title and Text fields support templating and can use data returned from the query. For example, the Title field could have the following text:\"\n      }), /*#__PURE__*/_jsxs(\"code\", {\n        children: [`${'{{metric.type}}'}`, \" has value: \", `${'{{metric.value}}'}`]\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"Example Result: \", /*#__PURE__*/_jsx(\"code\", {\n          children: \"monitoring.googleapis.com/uptime_check/http_status has this value: 502\"\n        })]\n      }), /*#__PURE__*/_jsx(\"label\", {\n        children: \"Patterns:\"\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [/*#__PURE__*/_jsx(\"code\", {\n          children: `${'{{metric.value}}'}`\n        }), \" = value of the metric/point\"]\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [/*#__PURE__*/_jsx(\"code\", {\n          children: `${'{{metric.type}}'}`\n        }), \" = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\"]\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [/*#__PURE__*/_jsx(\"code\", {\n          children: `${'{{metric.name}}'}`\n        }), \" = name part of metric e.g. instance/cpu/usage_time\"]\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [/*#__PURE__*/_jsx(\"code\", {\n          children: `${'{{metric.service}}'}`\n        }), \" = service part of metric e.g. compute\"]\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [/*#__PURE__*/_jsx(\"code\", {\n          children: `${'{{metric.label.label_name}}'}`\n        }), \" = Metric label metadata e.g. metric.label.instance_name\"]\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [/*#__PURE__*/_jsx(\"code\", {\n          children: `${'{{resource.label.label_name}}'}`\n        }), \" = Resource label metadata e.g. resource.label.zone\"]\n      })]\n    })\n  }));\n};","map":{"version":3,"names":["React","AnnotationsHelp"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/AnnotationsHelp.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nexport const AnnotationsHelp: FC = () => {\n  return (\n    <div className=\"gf-form grafana-info-box alert-info\">\n      <div>\n        <h5>Annotation Query Format</h5>\n        <p>\n          An annotation is an event that is overlaid on top of graphs. Annotation rendering is expensive so it is\n          important to limit the number of rows returned.{' '}\n        </p>\n        <p>\n          The Title and Text fields support templating and can use data returned from the query. For example, the Title\n          field could have the following text:\n        </p>\n        <code>\n          {`${'{{metric.type}}'}`} has value: {`${'{{metric.value}}'}`}\n        </code>\n        <p>\n          Example Result: <code>monitoring.googleapis.com/uptime_check/http_status has this value: 502</code>\n        </p>\n        <label>Patterns:</label>\n        <p>\n          <code>{`${'{{metric.value}}'}`}</code> = value of the metric/point\n        </p>\n        <p>\n          <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n        </p>\n        <p>\n          <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n        </p>\n        <p>\n          <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n        </p>\n        <p>\n          <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n        </p>\n        <p>\n          <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n        </p>\n      </div>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAP,MAA0B,OAA1B;;;AAEA,OAAO,MAAMC,eAAmB,GAAG,MAAM;EACvC,oCACE;IAAK,SAAS,EAAC,qCAAf;IAAA,uBACE;MAAA,wBACE;QAAA;MAAA,EADF,eAEE;QAAA,sKAEkD,GAFlD;MAAA,EAFF,eAME;QAAA;MAAA,EANF,eAUE;QAAA,WACI,GAAE,iBAAkB,EADxB,kBACwC,GAAE,kBAAmB,EAD7D;MAAA,EAVF,eAaE;QAAA,4CACkB;UAAA;QAAA,EADlB;MAAA,EAbF,eAgBE;QAAA;MAAA,EAhBF,eAiBE;QAAA,wBACE;UAAA,UAAQ,GAAE,kBAAmB;QAA7B,EADF;MAAA,EAjBF,eAoBE;QAAA,wBACE;UAAA,UAAQ,GAAE,iBAAkB;QAA5B,EADF;MAAA,EApBF,eAuBE;QAAA,wBACE;UAAA,UAAQ,GAAE,iBAAkB;QAA5B,EADF;MAAA,EAvBF,eA0BE;QAAA,wBACE;UAAA,UAAQ,GAAE,oBAAqB;QAA/B,EADF;MAAA,EA1BF,eA6BE;QAAA,wBACE;UAAA,UAAQ,GAAE,6BAA8B;QAAxC,EADF;MAAA,EA7BF,eAgCE;QAAA,wBACE;UAAA,UAAQ,GAAE,+BAAgC;QAA1C,EADF;MAAA,EAhCF;IAAA;EADF,EADF;AAwCD,CAzCM"},"metadata":{},"sourceType":"module"}