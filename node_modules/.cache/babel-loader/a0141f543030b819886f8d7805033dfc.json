{"ast":null,"code":"import { createAction } from '@reduxjs/toolkit';\nimport { dateTimeForTimeZone, LoadingState, sortLogsResult } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { RefreshPicker } from '@grafana/ui';\nimport { getTimeRange, refreshIntervalToSortOrder, stopQueryState } from 'app/core/utils/explore';\nimport { getFiscalYearStartMonth, getTimeZone } from 'app/features/profile/state/selectors';\nimport { ExploreId } from 'app/types/explore';\nimport { getTimeSrv } from '../../dashboard/services/TimeSrv';\nimport { syncTimesAction, stateSave } from './main';\nimport { runQueries } from './query'; //\n// Actions and Payloads\n//\n\nexport const changeRangeAction = createAction('explore/changeRange');\n/**\n * Change the time range of Explore. Usually called from the Timepicker or a graph interaction.\n */\n\nexport const changeRefreshIntervalAction = createAction('explore/changeRefreshInterval');\nexport const updateTimeRange = options => {\n  return (dispatch, getState) => {\n    const {\n      syncedTimes\n    } = getState().explore;\n\n    if (syncedTimes) {\n      dispatch(updateTime(Object.assign({}, options, {\n        exploreId: ExploreId.left\n      }))); // When running query by updating time range, we want to preserve cache.\n      // Cached results are currently used in Logs pagination.\n\n      dispatch(runQueries(ExploreId.left, {\n        preserveCache: true\n      }));\n      dispatch(updateTime(Object.assign({}, options, {\n        exploreId: ExploreId.right\n      })));\n      dispatch(runQueries(ExploreId.right, {\n        preserveCache: true\n      }));\n    } else {\n      dispatch(updateTime(Object.assign({}, options)));\n      dispatch(runQueries(options.exploreId, {\n        preserveCache: true\n      }));\n    }\n  };\n};\n/**\n * Change the refresh interval of Explore. Called from the Refresh picker.\n */\n\nexport function changeRefreshInterval(exploreId, refreshInterval) {\n  return changeRefreshIntervalAction({\n    exploreId,\n    refreshInterval\n  });\n}\nexport const updateTime = config => {\n  return (dispatch, getState) => {\n    const {\n      exploreId,\n      absoluteRange: absRange,\n      rawRange: actionRange\n    } = config;\n    const itemState = getState().explore[exploreId];\n    const timeZone = getTimeZone(getState().user);\n    const fiscalYearStartMonth = getFiscalYearStartMonth(getState().user);\n    const {\n      range: rangeInState\n    } = itemState;\n    let rawRange = rangeInState.raw;\n\n    if (absRange) {\n      rawRange = {\n        from: dateTimeForTimeZone(timeZone, absRange.from),\n        to: dateTimeForTimeZone(timeZone, absRange.to)\n      };\n    }\n\n    if (actionRange) {\n      rawRange = actionRange;\n    }\n\n    const range = getTimeRange(timeZone, rawRange, fiscalYearStartMonth);\n    const absoluteRange = {\n      from: range.from.valueOf(),\n      to: range.to.valueOf()\n    };\n    const timeModel = {\n      time: range.raw,\n      refresh: false,\n      timepicker: {},\n      getTimezone: () => timeZone,\n      timeRangeUpdated: rawTimeRange => {\n        dispatch(updateTimeRange({\n          exploreId: exploreId,\n          rawRange: rawTimeRange\n        }));\n      }\n    }; // We need to re-initialize TimeSrv because it might have been triggered by the other Explore pane (when split)\n\n    getTimeSrv().init(timeModel); // After re-initializing TimeSrv we need to update the time range in Template service for interpolation\n    // of __from and __to variables\n\n    getTemplateSrv().updateTimeRange(getTimeSrv().timeRange());\n    dispatch(changeRangeAction({\n      exploreId,\n      range,\n      absoluteRange\n    }));\n  };\n};\n/**\n * Syncs time interval, if they are not synced on both panels in a split mode.\n * Unsyncs time interval, if they are synced on both panels in a split mode.\n */\n\nexport function syncTimes(exploreId) {\n  return (dispatch, getState) => {\n    if (exploreId === ExploreId.left) {\n      const leftState = getState().explore.left;\n      dispatch(updateTimeRange({\n        exploreId: ExploreId.right,\n        rawRange: leftState.range.raw\n      }));\n    } else {\n      const rightState = getState().explore.right;\n      dispatch(updateTimeRange({\n        exploreId: ExploreId.left,\n        rawRange: rightState.range.raw\n      }));\n    }\n\n    const isTimeSynced = getState().explore.syncedTimes;\n    dispatch(syncTimesAction({\n      syncedTimes: !isTimeSynced\n    }));\n    dispatch(stateSave());\n  };\n}\n/**\n * Forces the timepicker's time into absolute time.\n * The conversion is applied to all Explore panes.\n * Useful to produce a bookmarkable URL that points to the same data.\n */\n\nexport function makeAbsoluteTime() {\n  return (dispatch, getState) => {\n    const timeZone = getTimeZone(getState().user);\n    const fiscalYearStartMonth = getFiscalYearStartMonth(getState().user);\n    const leftState = getState().explore.left;\n    const leftRange = getTimeRange(timeZone, leftState.range.raw, fiscalYearStartMonth);\n    const leftAbsoluteRange = {\n      from: leftRange.from.valueOf(),\n      to: leftRange.to.valueOf()\n    };\n    dispatch(updateTime({\n      exploreId: ExploreId.left,\n      absoluteRange: leftAbsoluteRange\n    }));\n    const rightState = getState().explore.right;\n\n    if (rightState) {\n      const rightRange = getTimeRange(timeZone, rightState.range.raw, fiscalYearStartMonth);\n      const rightAbsoluteRange = {\n        from: rightRange.from.valueOf(),\n        to: rightRange.to.valueOf()\n      };\n      dispatch(updateTime({\n        exploreId: ExploreId.right,\n        absoluteRange: rightAbsoluteRange\n      }));\n    }\n\n    dispatch(stateSave());\n  };\n}\n/**\n * Reducer for an Explore area, to be used by the global Explore reducer.\n */\n// Redux Toolkit uses ImmerJs as part of their solution to ensure that state objects are not mutated.\n// ImmerJs has an autoFreeze option that freezes objects from change which means this reducer can't be migrated to createSlice\n// because the state would become frozen and during run time we would get errors because flot (Graph lib) would try to mutate\n// the frozen state.\n// https://github.com/reduxjs/redux-toolkit/issues/242\n\nexport const timeReducer = (state, action) => {\n  if (changeRefreshIntervalAction.match(action)) {\n    const {\n      refreshInterval\n    } = action.payload;\n    const live = RefreshPicker.isLive(refreshInterval);\n    const sortOrder = refreshIntervalToSortOrder(refreshInterval);\n    const logsResult = sortLogsResult(state.logsResult, sortOrder);\n\n    if (RefreshPicker.isLive(state.refreshInterval) && !live) {\n      stopQueryState(state.querySubscription);\n    }\n\n    return Object.assign({}, state, {\n      refreshInterval,\n      queryResponse: Object.assign({}, state.queryResponse, {\n        state: live ? LoadingState.Streaming : LoadingState.Done\n      }),\n      isLive: live,\n      isPaused: live ? false : state.isPaused,\n      loading: live,\n      logsResult\n    });\n  }\n\n  if (changeRangeAction.match(action)) {\n    const {\n      range,\n      absoluteRange\n    } = action.payload;\n    return Object.assign({}, state, {\n      range,\n      absoluteRange\n    });\n  }\n\n  return state;\n};","map":{"version":3,"names":["createAction","dateTimeForTimeZone","LoadingState","sortLogsResult","getTemplateSrv","RefreshPicker","getTimeRange","refreshIntervalToSortOrder","stopQueryState","getFiscalYearStartMonth","getTimeZone","ExploreId","getTimeSrv","syncTimesAction","stateSave","runQueries","changeRangeAction","changeRefreshIntervalAction","updateTimeRange","options","dispatch","getState","syncedTimes","explore","updateTime","exploreId","left","preserveCache","right","changeRefreshInterval","refreshInterval","config","absoluteRange","absRange","rawRange","actionRange","itemState","timeZone","user","fiscalYearStartMonth","range","rangeInState","raw","from","to","valueOf","timeModel","time","refresh","timepicker","getTimezone","timeRangeUpdated","rawTimeRange","init","timeRange","syncTimes","leftState","rightState","isTimeSynced","makeAbsoluteTime","leftRange","leftAbsoluteRange","rightRange","rightAbsoluteRange","timeReducer","state","action","match","payload","live","isLive","sortOrder","logsResult","querySubscription","queryResponse","Streaming","Done","isPaused","loading"],"sources":["/home/soula/grafana/public/app/features/explore/state/time.ts"],"sourcesContent":["import { AnyAction, createAction, PayloadAction } from '@reduxjs/toolkit';\n\nimport {\n  AbsoluteTimeRange,\n  dateTimeForTimeZone,\n  LoadingState,\n  RawTimeRange,\n  sortLogsResult,\n  TimeRange,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { RefreshPicker } from '@grafana/ui';\nimport { getTimeRange, refreshIntervalToSortOrder, stopQueryState } from 'app/core/utils/explore';\nimport { getFiscalYearStartMonth, getTimeZone } from 'app/features/profile/state/selectors';\nimport { ExploreItemState, ThunkResult } from 'app/types';\nimport { ExploreId } from 'app/types/explore';\n\nimport { getTimeSrv } from '../../dashboard/services/TimeSrv';\nimport { TimeModel } from '../../dashboard/state/TimeModel';\n\nimport { syncTimesAction, stateSave } from './main';\nimport { runQueries } from './query';\n\n//\n// Actions and Payloads\n//\n\nexport interface ChangeRangePayload {\n  exploreId: ExploreId;\n  range: TimeRange;\n  absoluteRange: AbsoluteTimeRange;\n}\nexport const changeRangeAction = createAction<ChangeRangePayload>('explore/changeRange');\n\n/**\n * Change the time range of Explore. Usually called from the Timepicker or a graph interaction.\n */\nexport interface ChangeRefreshIntervalPayload {\n  exploreId: ExploreId;\n  refreshInterval: string;\n}\nexport const changeRefreshIntervalAction = createAction<ChangeRefreshIntervalPayload>('explore/changeRefreshInterval');\n\nexport const updateTimeRange = (options: {\n  exploreId: ExploreId;\n  rawRange?: RawTimeRange;\n  absoluteRange?: AbsoluteTimeRange;\n}): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    const { syncedTimes } = getState().explore;\n    if (syncedTimes) {\n      dispatch(updateTime({ ...options, exploreId: ExploreId.left }));\n      // When running query by updating time range, we want to preserve cache.\n      // Cached results are currently used in Logs pagination.\n      dispatch(runQueries(ExploreId.left, { preserveCache: true }));\n      dispatch(updateTime({ ...options, exploreId: ExploreId.right }));\n      dispatch(runQueries(ExploreId.right, { preserveCache: true }));\n    } else {\n      dispatch(updateTime({ ...options }));\n      dispatch(runQueries(options.exploreId, { preserveCache: true }));\n    }\n  };\n};\n\n/**\n * Change the refresh interval of Explore. Called from the Refresh picker.\n */\nexport function changeRefreshInterval(\n  exploreId: ExploreId,\n  refreshInterval: string\n): PayloadAction<ChangeRefreshIntervalPayload> {\n  return changeRefreshIntervalAction({ exploreId, refreshInterval });\n}\n\nexport const updateTime = (config: {\n  exploreId: ExploreId;\n  rawRange?: RawTimeRange;\n  absoluteRange?: AbsoluteTimeRange;\n}): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    const { exploreId, absoluteRange: absRange, rawRange: actionRange } = config;\n    const itemState = getState().explore[exploreId]!;\n    const timeZone = getTimeZone(getState().user);\n    const fiscalYearStartMonth = getFiscalYearStartMonth(getState().user);\n    const { range: rangeInState } = itemState;\n    let rawRange: RawTimeRange = rangeInState.raw;\n\n    if (absRange) {\n      rawRange = {\n        from: dateTimeForTimeZone(timeZone, absRange.from),\n        to: dateTimeForTimeZone(timeZone, absRange.to),\n      };\n    }\n\n    if (actionRange) {\n      rawRange = actionRange;\n    }\n\n    const range = getTimeRange(timeZone, rawRange, fiscalYearStartMonth);\n    const absoluteRange: AbsoluteTimeRange = { from: range.from.valueOf(), to: range.to.valueOf() };\n    const timeModel: TimeModel = {\n      time: range.raw,\n      refresh: false,\n      timepicker: {},\n      getTimezone: () => timeZone,\n      timeRangeUpdated: (rawTimeRange: RawTimeRange) => {\n        dispatch(updateTimeRange({ exploreId: exploreId, rawRange: rawTimeRange }));\n      },\n    };\n\n    // We need to re-initialize TimeSrv because it might have been triggered by the other Explore pane (when split)\n    getTimeSrv().init(timeModel);\n    // After re-initializing TimeSrv we need to update the time range in Template service for interpolation\n    // of __from and __to variables\n    getTemplateSrv().updateTimeRange(getTimeSrv().timeRange());\n\n    dispatch(changeRangeAction({ exploreId, range, absoluteRange }));\n  };\n};\n\n/**\n * Syncs time interval, if they are not synced on both panels in a split mode.\n * Unsyncs time interval, if they are synced on both panels in a split mode.\n */\nexport function syncTimes(exploreId: ExploreId): ThunkResult<void> {\n  return (dispatch, getState) => {\n    if (exploreId === ExploreId.left) {\n      const leftState = getState().explore.left;\n      dispatch(updateTimeRange({ exploreId: ExploreId.right, rawRange: leftState.range.raw }));\n    } else {\n      const rightState = getState().explore.right!;\n      dispatch(updateTimeRange({ exploreId: ExploreId.left, rawRange: rightState.range.raw }));\n    }\n    const isTimeSynced = getState().explore.syncedTimes;\n    dispatch(syncTimesAction({ syncedTimes: !isTimeSynced }));\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Forces the timepicker's time into absolute time.\n * The conversion is applied to all Explore panes.\n * Useful to produce a bookmarkable URL that points to the same data.\n */\nexport function makeAbsoluteTime(): ThunkResult<void> {\n  return (dispatch, getState) => {\n    const timeZone = getTimeZone(getState().user);\n    const fiscalYearStartMonth = getFiscalYearStartMonth(getState().user);\n    const leftState = getState().explore.left;\n    const leftRange = getTimeRange(timeZone, leftState.range.raw, fiscalYearStartMonth);\n    const leftAbsoluteRange: AbsoluteTimeRange = { from: leftRange.from.valueOf(), to: leftRange.to.valueOf() };\n    dispatch(updateTime({ exploreId: ExploreId.left, absoluteRange: leftAbsoluteRange }));\n    const rightState = getState().explore.right!;\n    if (rightState) {\n      const rightRange = getTimeRange(timeZone, rightState.range.raw, fiscalYearStartMonth);\n      const rightAbsoluteRange: AbsoluteTimeRange = { from: rightRange.from.valueOf(), to: rightRange.to.valueOf() };\n      dispatch(updateTime({ exploreId: ExploreId.right, absoluteRange: rightAbsoluteRange }));\n    }\n    dispatch(stateSave());\n  };\n}\n\n/**\n * Reducer for an Explore area, to be used by the global Explore reducer.\n */\n// Redux Toolkit uses ImmerJs as part of their solution to ensure that state objects are not mutated.\n// ImmerJs has an autoFreeze option that freezes objects from change which means this reducer can't be migrated to createSlice\n// because the state would become frozen and during run time we would get errors because flot (Graph lib) would try to mutate\n// the frozen state.\n// https://github.com/reduxjs/redux-toolkit/issues/242\nexport const timeReducer = (state: ExploreItemState, action: AnyAction): ExploreItemState => {\n  if (changeRefreshIntervalAction.match(action)) {\n    const { refreshInterval } = action.payload;\n    const live = RefreshPicker.isLive(refreshInterval);\n    const sortOrder = refreshIntervalToSortOrder(refreshInterval);\n    const logsResult = sortLogsResult(state.logsResult, sortOrder);\n\n    if (RefreshPicker.isLive(state.refreshInterval) && !live) {\n      stopQueryState(state.querySubscription);\n    }\n\n    return {\n      ...state,\n      refreshInterval,\n      queryResponse: {\n        ...state.queryResponse,\n        state: live ? LoadingState.Streaming : LoadingState.Done,\n      },\n      isLive: live,\n      isPaused: live ? false : state.isPaused,\n      loading: live,\n      logsResult,\n    };\n  }\n\n  if (changeRangeAction.match(action)) {\n    const { range, absoluteRange } = action.payload;\n    return {\n      ...state,\n      range,\n      absoluteRange,\n    };\n  }\n\n  return state;\n};\n"],"mappings":"AAAA,SAAoBA,YAApB,QAAuD,kBAAvD;AAEA,SAEEC,mBAFF,EAGEC,YAHF,EAKEC,cALF,QAOO,eAPP;AAQA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,YAAT,EAAuBC,0BAAvB,EAAmDC,cAAnD,QAAyE,wBAAzE;AACA,SAASC,uBAAT,EAAkCC,WAAlC,QAAqD,sCAArD;AAEA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,SAASC,UAAT,QAA2B,kCAA3B;AAGA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,QAA3C;AACA,SAASC,UAAT,QAA2B,SAA3B,C,CAEA;AACA;AACA;;AAOA,OAAO,MAAMC,iBAAiB,GAAGhB,YAAY,CAAqB,qBAArB,CAAtC;AAEP;AACA;AACA;;AAKA,OAAO,MAAMiB,2BAA2B,GAAGjB,YAAY,CAA+B,+BAA/B,CAAhD;AAEP,OAAO,MAAMkB,eAAe,GAAIC,OAAD,IAIN;EACvB,OAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;IAC7B,MAAM;MAAEC;IAAF,IAAkBD,QAAQ,GAAGE,OAAnC;;IACA,IAAID,WAAJ,EAAiB;MACfF,QAAQ,CAACI,UAAU,mBAAML,OAAN;QAAeM,SAAS,EAAEd,SAAS,CAACe;MAApC,GAAX,CAAR,CADe,CAEf;MACA;;MACAN,QAAQ,CAACL,UAAU,CAACJ,SAAS,CAACe,IAAX,EAAiB;QAAEC,aAAa,EAAE;MAAjB,CAAjB,CAAX,CAAR;MACAP,QAAQ,CAACI,UAAU,mBAAML,OAAN;QAAeM,SAAS,EAAEd,SAAS,CAACiB;MAApC,GAAX,CAAR;MACAR,QAAQ,CAACL,UAAU,CAACJ,SAAS,CAACiB,KAAX,EAAkB;QAAED,aAAa,EAAE;MAAjB,CAAlB,CAAX,CAAR;IACD,CAPD,MAOO;MACLP,QAAQ,CAACI,UAAU,mBAAML,OAAN,EAAX,CAAR;MACAC,QAAQ,CAACL,UAAU,CAACI,OAAO,CAACM,SAAT,EAAoB;QAAEE,aAAa,EAAE;MAAjB,CAApB,CAAX,CAAR;IACD;EACF,CAbD;AAcD,CAnBM;AAqBP;AACA;AACA;;AACA,OAAO,SAASE,qBAAT,CACLJ,SADK,EAELK,eAFK,EAGwC;EAC7C,OAAOb,2BAA2B,CAAC;IAAEQ,SAAF;IAAaK;EAAb,CAAD,CAAlC;AACD;AAED,OAAO,MAAMN,UAAU,GAAIO,MAAD,IAID;EACvB,OAAO,CAACX,QAAD,EAAWC,QAAX,KAAwB;IAC7B,MAAM;MAAEI,SAAF;MAAaO,aAAa,EAAEC,QAA5B;MAAsCC,QAAQ,EAAEC;IAAhD,IAAgEJ,MAAtE;IACA,MAAMK,SAAS,GAAGf,QAAQ,GAAGE,OAAX,CAAmBE,SAAnB,CAAlB;IACA,MAAMY,QAAQ,GAAG3B,WAAW,CAACW,QAAQ,GAAGiB,IAAZ,CAA5B;IACA,MAAMC,oBAAoB,GAAG9B,uBAAuB,CAACY,QAAQ,GAAGiB,IAAZ,CAApD;IACA,MAAM;MAAEE,KAAK,EAAEC;IAAT,IAA0BL,SAAhC;IACA,IAAIF,QAAsB,GAAGO,YAAY,CAACC,GAA1C;;IAEA,IAAIT,QAAJ,EAAc;MACZC,QAAQ,GAAG;QACTS,IAAI,EAAE1C,mBAAmB,CAACoC,QAAD,EAAWJ,QAAQ,CAACU,IAApB,CADhB;QAETC,EAAE,EAAE3C,mBAAmB,CAACoC,QAAD,EAAWJ,QAAQ,CAACW,EAApB;MAFd,CAAX;IAID;;IAED,IAAIT,WAAJ,EAAiB;MACfD,QAAQ,GAAGC,WAAX;IACD;;IAED,MAAMK,KAAK,GAAGlC,YAAY,CAAC+B,QAAD,EAAWH,QAAX,EAAqBK,oBAArB,CAA1B;IACA,MAAMP,aAAgC,GAAG;MAAEW,IAAI,EAAEH,KAAK,CAACG,IAAN,CAAWE,OAAX,EAAR;MAA8BD,EAAE,EAAEJ,KAAK,CAACI,EAAN,CAASC,OAAT;IAAlC,CAAzC;IACA,MAAMC,SAAoB,GAAG;MAC3BC,IAAI,EAAEP,KAAK,CAACE,GADe;MAE3BM,OAAO,EAAE,KAFkB;MAG3BC,UAAU,EAAE,EAHe;MAI3BC,WAAW,EAAE,MAAMb,QAJQ;MAK3Bc,gBAAgB,EAAGC,YAAD,IAAgC;QAChDhC,QAAQ,CAACF,eAAe,CAAC;UAAEO,SAAS,EAAEA,SAAb;UAAwBS,QAAQ,EAAEkB;QAAlC,CAAD,CAAhB,CAAR;MACD;IAP0B,CAA7B,CArB6B,CA+B7B;;IACAxC,UAAU,GAAGyC,IAAb,CAAkBP,SAAlB,EAhC6B,CAiC7B;IACA;;IACA1C,cAAc,GAAGc,eAAjB,CAAiCN,UAAU,GAAG0C,SAAb,EAAjC;IAEAlC,QAAQ,CAACJ,iBAAiB,CAAC;MAAES,SAAF;MAAae,KAAb;MAAoBR;IAApB,CAAD,CAAlB,CAAR;EACD,CAtCD;AAuCD,CA5CM;AA8CP;AACA;AACA;AACA;;AACA,OAAO,SAASuB,SAAT,CAAmB9B,SAAnB,EAA4D;EACjE,OAAO,CAACL,QAAD,EAAWC,QAAX,KAAwB;IAC7B,IAAII,SAAS,KAAKd,SAAS,CAACe,IAA5B,EAAkC;MAChC,MAAM8B,SAAS,GAAGnC,QAAQ,GAAGE,OAAX,CAAmBG,IAArC;MACAN,QAAQ,CAACF,eAAe,CAAC;QAAEO,SAAS,EAAEd,SAAS,CAACiB,KAAvB;QAA8BM,QAAQ,EAAEsB,SAAS,CAAChB,KAAV,CAAgBE;MAAxD,CAAD,CAAhB,CAAR;IACD,CAHD,MAGO;MACL,MAAMe,UAAU,GAAGpC,QAAQ,GAAGE,OAAX,CAAmBK,KAAtC;MACAR,QAAQ,CAACF,eAAe,CAAC;QAAEO,SAAS,EAAEd,SAAS,CAACe,IAAvB;QAA6BQ,QAAQ,EAAEuB,UAAU,CAACjB,KAAX,CAAiBE;MAAxD,CAAD,CAAhB,CAAR;IACD;;IACD,MAAMgB,YAAY,GAAGrC,QAAQ,GAAGE,OAAX,CAAmBD,WAAxC;IACAF,QAAQ,CAACP,eAAe,CAAC;MAAES,WAAW,EAAE,CAACoC;IAAhB,CAAD,CAAhB,CAAR;IACAtC,QAAQ,CAACN,SAAS,EAAV,CAAR;EACD,CAXD;AAYD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6C,gBAAT,GAA+C;EACpD,OAAO,CAACvC,QAAD,EAAWC,QAAX,KAAwB;IAC7B,MAAMgB,QAAQ,GAAG3B,WAAW,CAACW,QAAQ,GAAGiB,IAAZ,CAA5B;IACA,MAAMC,oBAAoB,GAAG9B,uBAAuB,CAACY,QAAQ,GAAGiB,IAAZ,CAApD;IACA,MAAMkB,SAAS,GAAGnC,QAAQ,GAAGE,OAAX,CAAmBG,IAArC;IACA,MAAMkC,SAAS,GAAGtD,YAAY,CAAC+B,QAAD,EAAWmB,SAAS,CAAChB,KAAV,CAAgBE,GAA3B,EAAgCH,oBAAhC,CAA9B;IACA,MAAMsB,iBAAoC,GAAG;MAAElB,IAAI,EAAEiB,SAAS,CAACjB,IAAV,CAAeE,OAAf,EAAR;MAAkCD,EAAE,EAAEgB,SAAS,CAAChB,EAAV,CAAaC,OAAb;IAAtC,CAA7C;IACAzB,QAAQ,CAACI,UAAU,CAAC;MAAEC,SAAS,EAAEd,SAAS,CAACe,IAAvB;MAA6BM,aAAa,EAAE6B;IAA5C,CAAD,CAAX,CAAR;IACA,MAAMJ,UAAU,GAAGpC,QAAQ,GAAGE,OAAX,CAAmBK,KAAtC;;IACA,IAAI6B,UAAJ,EAAgB;MACd,MAAMK,UAAU,GAAGxD,YAAY,CAAC+B,QAAD,EAAWoB,UAAU,CAACjB,KAAX,CAAiBE,GAA5B,EAAiCH,oBAAjC,CAA/B;MACA,MAAMwB,kBAAqC,GAAG;QAAEpB,IAAI,EAAEmB,UAAU,CAACnB,IAAX,CAAgBE,OAAhB,EAAR;QAAmCD,EAAE,EAAEkB,UAAU,CAAClB,EAAX,CAAcC,OAAd;MAAvC,CAA9C;MACAzB,QAAQ,CAACI,UAAU,CAAC;QAAEC,SAAS,EAAEd,SAAS,CAACiB,KAAvB;QAA8BI,aAAa,EAAE+B;MAA7C,CAAD,CAAX,CAAR;IACD;;IACD3C,QAAQ,CAACN,SAAS,EAAV,CAAR;EACD,CAdD;AAeD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMkD,WAAW,GAAG,CAACC,KAAD,EAA0BC,MAA1B,KAAkE;EAC3F,IAAIjD,2BAA2B,CAACkD,KAA5B,CAAkCD,MAAlC,CAAJ,EAA+C;IAC7C,MAAM;MAAEpC;IAAF,IAAsBoC,MAAM,CAACE,OAAnC;IACA,MAAMC,IAAI,GAAGhE,aAAa,CAACiE,MAAd,CAAqBxC,eAArB,CAAb;IACA,MAAMyC,SAAS,GAAGhE,0BAA0B,CAACuB,eAAD,CAA5C;IACA,MAAM0C,UAAU,GAAGrE,cAAc,CAAC8D,KAAK,CAACO,UAAP,EAAmBD,SAAnB,CAAjC;;IAEA,IAAIlE,aAAa,CAACiE,MAAd,CAAqBL,KAAK,CAACnC,eAA3B,KAA+C,CAACuC,IAApD,EAA0D;MACxD7D,cAAc,CAACyD,KAAK,CAACQ,iBAAP,CAAd;IACD;;IAED,yBACKR,KADL;MAEEnC,eAFF;MAGE4C,aAAa,oBACRT,KAAK,CAACS,aADE;QAEXT,KAAK,EAAEI,IAAI,GAAGnE,YAAY,CAACyE,SAAhB,GAA4BzE,YAAY,CAAC0E;MAFzC,EAHf;MAOEN,MAAM,EAAED,IAPV;MAQEQ,QAAQ,EAAER,IAAI,GAAG,KAAH,GAAWJ,KAAK,CAACY,QARjC;MASEC,OAAO,EAAET,IATX;MAUEG;IAVF;EAYD;;EAED,IAAIxD,iBAAiB,CAACmD,KAAlB,CAAwBD,MAAxB,CAAJ,EAAqC;IACnC,MAAM;MAAE1B,KAAF;MAASR;IAAT,IAA2BkC,MAAM,CAACE,OAAxC;IACA,yBACKH,KADL;MAEEzB,KAFF;MAGER;IAHF;EAKD;;EAED,OAAOiC,KAAP;AACD,CAnCM"},"metadata":{},"sourceType":"module"}