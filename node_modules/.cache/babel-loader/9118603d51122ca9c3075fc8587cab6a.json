{"ast":null,"code":"import { formatLabels } from '../utils/labels';\nimport { getFieldDisplayName } from './fieldState';\n/**\n * This object is created often, and only used when tmplates exist.  Using a proxy lets us delay\n * calculations of the more complex structures (label names) until they are actually used\n */\n\nexport function getTemplateProxyForField(field, frame, frames) {\n  return new Proxy({}, // This object shows up in test snapshots\n  {\n    get: (obj, key, reciever) => {\n      if (key === 'name') {\n        return field.name;\n      }\n\n      if (key === 'displayName') {\n        return getFieldDisplayName(field, frame, frames);\n      }\n\n      if (key === 'labels' || key === 'formattedLabels') {\n        // formattedLabels deprecated\n        if (!field.labels) {\n          return '';\n        }\n\n        return Object.assign({}, field.labels, {\n          __values: Object.values(field.labels).sort().join(', '),\n          toString: () => {\n            return formatLabels(field.labels, '', true);\n          }\n        });\n      }\n\n      return undefined; // (field as any)[key]; // any property?\n    }\n  });\n}","map":{"version":3,"names":["formatLabels","getFieldDisplayName","getTemplateProxyForField","field","frame","frames","Proxy","get","obj","key","reciever","name","labels","__values","Object","values","sort","join","toString","undefined"],"sources":["/home/soula/grafana/packages/grafana-data/src/field/templateProxies.ts"],"sourcesContent":["import { DataFrame, Field } from '../types';\nimport { formatLabels } from '../utils/labels';\n\nimport { getFieldDisplayName } from './fieldState';\n\n/**\n * This object is created often, and only used when tmplates exist.  Using a proxy lets us delay\n * calculations of the more complex structures (label names) until they are actually used\n */\nexport function getTemplateProxyForField(field: Field, frame?: DataFrame, frames?: DataFrame[]): any {\n  return new Proxy(\n    {} as any, // This object shows up in test snapshots\n    {\n      get: (obj: Field, key: string, reciever: any) => {\n        if (key === 'name') {\n          return field.name;\n        }\n\n        if (key === 'displayName') {\n          return getFieldDisplayName(field, frame, frames);\n        }\n\n        if (key === 'labels' || key === 'formattedLabels') {\n          // formattedLabels deprecated\n          if (!field.labels) {\n            return '';\n          }\n          return {\n            ...field.labels,\n            __values: Object.values(field.labels).sort().join(', '),\n            toString: () => {\n              return formatLabels(field.labels!, '', true);\n            },\n          };\n        }\n        return undefined; // (field as any)[key]; // any property?\n      },\n    }\n  );\n}\n"],"mappings":"AACA,SAASA,YAAT,QAA6B,iBAA7B;AAEA,SAASC,mBAAT,QAAoC,cAApC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,KAAlC,EAAgDC,KAAhD,EAAmEC,MAAnE,EAA8F;EACnG,OAAO,IAAIC,KAAJ,CACL,EADK,EACM;EACX;IACEC,GAAG,EAAE,CAACC,GAAD,EAAaC,GAAb,EAA0BC,QAA1B,KAA4C;MAC/C,IAAID,GAAG,KAAK,MAAZ,EAAoB;QAClB,OAAON,KAAK,CAACQ,IAAb;MACD;;MAED,IAAIF,GAAG,KAAK,aAAZ,EAA2B;QACzB,OAAOR,mBAAmB,CAACE,KAAD,EAAQC,KAAR,EAAeC,MAAf,CAA1B;MACD;;MAED,IAAII,GAAG,KAAK,QAAR,IAAoBA,GAAG,KAAK,iBAAhC,EAAmD;QACjD;QACA,IAAI,CAACN,KAAK,CAACS,MAAX,EAAmB;UACjB,OAAO,EAAP;QACD;;QACD,yBACKT,KAAK,CAACS,MADX;UAEEC,QAAQ,EAAEC,MAAM,CAACC,MAAP,CAAcZ,KAAK,CAACS,MAApB,EAA4BI,IAA5B,GAAmCC,IAAnC,CAAwC,IAAxC,CAFZ;UAGEC,QAAQ,EAAE,MAAM;YACd,OAAOlB,YAAY,CAACG,KAAK,CAACS,MAAP,EAAgB,EAAhB,EAAoB,IAApB,CAAnB;UACD;QALH;MAOD;;MACD,OAAOO,SAAP,CAtB+C,CAsB7B;IACnB;EAxBH,CAFK,CAAP;AA6BD"},"metadata":{},"sourceType":"module"}