{"ast":null,"code":"import { useRegisterActions, useKBar, Priority } from 'kbar';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { splitOpen, splitClose } from './state/main';\nimport { runQueries } from './state/query';\nimport { isSplit } from './state/selectors';\nexport const ExploreActions = ({\n  exploreIdLeft,\n  exploreIdRight\n}) => {\n  const [actions, setActions] = useState([]);\n  const {\n    query\n  } = useKBar();\n  const dispatch = useDispatch();\n  const splitted = useSelector(isSplit);\n  useEffect(() => {\n    const exploreSection = {\n      name: 'Explore',\n      priority: Priority.HIGH + 1\n    };\n    const actionsArr = [];\n\n    if (splitted) {\n      actionsArr.push({\n        id: 'explore/run-query-left',\n        name: 'Run query (left)',\n        keywords: 'query left',\n        perform: () => {\n          dispatch(runQueries(exploreIdLeft));\n        },\n        section: exploreSection\n      });\n\n      if (exploreIdRight) {\n        // we should always have the right exploreId if split\n        actionsArr.push({\n          id: 'explore/run-query-right',\n          name: 'Run query (right)',\n          keywords: 'query right',\n          perform: () => {\n            dispatch(runQueries(exploreIdRight));\n          },\n          section: exploreSection\n        });\n        actionsArr.push({\n          id: 'explore/split-view-close-left',\n          name: 'Close split view left',\n          keywords: 'split',\n          perform: () => {\n            dispatch(splitClose(exploreIdLeft));\n          },\n          section: exploreSection\n        });\n        actionsArr.push({\n          id: 'explore/split-view-close-right',\n          name: 'Close split view right',\n          keywords: 'split',\n          perform: () => {\n            dispatch(splitClose(exploreIdRight));\n          },\n          section: exploreSection\n        });\n      }\n    } else {\n      actionsArr.push({\n        id: 'explore/run-query',\n        name: 'Run query',\n        keywords: 'query',\n        perform: () => {\n          dispatch(runQueries(exploreIdLeft));\n        },\n        section: exploreSection\n      });\n      actionsArr.push({\n        id: 'explore/split-view-open',\n        name: 'Open split view',\n        keywords: 'split',\n        perform: () => {\n          dispatch(splitOpen());\n        },\n        section: exploreSection\n      });\n    }\n\n    setActions(actionsArr);\n  }, [exploreIdLeft, exploreIdRight, splitted, query, dispatch]);\n  useRegisterActions(!query ? [] : actions, [actions, query]);\n  return null;\n};","map":{"version":3,"names":["useRegisterActions","useKBar","Priority","useEffect","useState","useDispatch","useSelector","splitOpen","splitClose","runQueries","isSplit","ExploreActions","exploreIdLeft","exploreIdRight","actions","setActions","query","dispatch","splitted","exploreSection","name","priority","HIGH","actionsArr","push","id","keywords","perform","section"],"sources":["/home/soula/grafana/public/app/features/explore/ExploreActions.tsx"],"sourcesContent":["import { useRegisterActions, useKBar, Action, Priority } from 'kbar';\nimport { FC, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ExploreId } from 'app/types';\n\nimport { splitOpen, splitClose } from './state/main';\nimport { runQueries } from './state/query';\nimport { isSplit } from './state/selectors';\n\ninterface Props {\n  exploreIdLeft: ExploreId;\n  exploreIdRight?: ExploreId;\n}\n\nexport const ExploreActions: FC<Props> = ({ exploreIdLeft, exploreIdRight }: Props) => {\n  const [actions, setActions] = useState<Action[]>([]);\n  const { query } = useKBar();\n  const dispatch = useDispatch();\n  const splitted = useSelector(isSplit);\n\n  useEffect(() => {\n    const exploreSection = {\n      name: 'Explore',\n      priority: Priority.HIGH + 1,\n    };\n\n    const actionsArr: Action[] = [];\n\n    if (splitted) {\n      actionsArr.push({\n        id: 'explore/run-query-left',\n        name: 'Run query (left)',\n        keywords: 'query left',\n        perform: () => {\n          dispatch(runQueries(exploreIdLeft));\n        },\n        section: exploreSection,\n      });\n      if (exploreIdRight) {\n        // we should always have the right exploreId if split\n        actionsArr.push({\n          id: 'explore/run-query-right',\n          name: 'Run query (right)',\n          keywords: 'query right',\n          perform: () => {\n            dispatch(runQueries(exploreIdRight));\n          },\n          section: exploreSection,\n        });\n        actionsArr.push({\n          id: 'explore/split-view-close-left',\n          name: 'Close split view left',\n          keywords: 'split',\n          perform: () => {\n            dispatch(splitClose(exploreIdLeft));\n          },\n          section: exploreSection,\n        });\n        actionsArr.push({\n          id: 'explore/split-view-close-right',\n          name: 'Close split view right',\n          keywords: 'split',\n          perform: () => {\n            dispatch(splitClose(exploreIdRight));\n          },\n          section: exploreSection,\n        });\n      }\n    } else {\n      actionsArr.push({\n        id: 'explore/run-query',\n        name: 'Run query',\n        keywords: 'query',\n        perform: () => {\n          dispatch(runQueries(exploreIdLeft));\n        },\n        section: exploreSection,\n      });\n      actionsArr.push({\n        id: 'explore/split-view-open',\n        name: 'Open split view',\n        keywords: 'split',\n        perform: () => {\n          dispatch(splitOpen());\n        },\n        section: exploreSection,\n      });\n    }\n    setActions(actionsArr);\n  }, [exploreIdLeft, exploreIdRight, splitted, query, dispatch]);\n\n  useRegisterActions(!query ? [] : actions, [actions, query]);\n\n  return null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}