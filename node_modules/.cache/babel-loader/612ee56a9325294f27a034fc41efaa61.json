{"ast":null,"code":"export let LibraryElementKind;\n\n(function (LibraryElementKind) {\n  LibraryElementKind[LibraryElementKind[\"Panel\"] = 1] = \"Panel\";\n  LibraryElementKind[LibraryElementKind[\"Variable\"] = 2] = \"Variable\";\n})(LibraryElementKind || (LibraryElementKind = {}));\n\nexport let LibraryElementConnectionKind;\n\n(function (LibraryElementConnectionKind) {\n  LibraryElementConnectionKind[LibraryElementConnectionKind[\"Dashboard\"] = 1] = \"Dashboard\";\n})(LibraryElementConnectionKind || (LibraryElementConnectionKind = {}));","map":{"version":3,"names":["LibraryElementKind","LibraryElementConnectionKind"],"sources":["/home/soula/grafana/public/app/features/library-panels/types.ts"],"sourcesContent":["import { AnyAction } from '@reduxjs/toolkit';\nimport { Dispatch } from 'react';\n\nimport { PanelModel } from '../dashboard/state';\n\nexport enum LibraryElementKind {\n  Panel = 1,\n  Variable,\n}\n\nexport enum LibraryElementConnectionKind {\n  Dashboard = 1,\n}\n\nexport interface LibraryElementConnectionDTO {\n  id: number;\n  kind: LibraryElementConnectionKind;\n  elementId: number;\n  connectionId: number;\n  created: string;\n  createdBy: LibraryElementDTOMetaUser;\n}\n\nexport interface LibraryElementsSearchResult {\n  totalCount: number;\n  elements: LibraryElementDTO[];\n  perPage: number;\n  page: number;\n}\n\nexport interface LibraryElementDTO {\n  id: number;\n  orgId: number;\n  folderId: number;\n  uid: string;\n  name: string;\n  kind: LibraryElementKind;\n  type: string;\n  description: string;\n  model: any;\n  version: number;\n  meta: LibraryElementDTOMeta;\n}\n\nexport interface LibraryElementDTOMeta {\n  folderName: string;\n  folderUid: string;\n  connectedDashboards: number;\n  created: string;\n  updated: string;\n  createdBy: LibraryElementDTOMetaUser;\n  updatedBy: LibraryElementDTOMetaUser;\n}\n\nexport interface LibraryElementDTOMetaUser {\n  id: number;\n  name: string;\n  avatarUrl: string;\n}\n\nexport type PanelModelLibraryPanel = Pick<LibraryElementDTO, 'uid' | 'name' | 'meta' | 'version'>;\n\nexport interface PanelModelWithLibraryPanel extends PanelModel {\n  libraryPanel: PanelModelLibraryPanel;\n}\n\nexport type DispatchResult = (dispatch: Dispatch<AnyAction>) => void;\n"],"mappings":"AAKA,WAAYA,kBAAZ;;WAAYA,kB;EAAAA,kB,CAAAA,kB;EAAAA,kB,CAAAA,kB;GAAAA,kB,KAAAA,kB;;AAKZ,WAAYC,4BAAZ;;WAAYA,4B;EAAAA,4B,CAAAA,4B;GAAAA,4B,KAAAA,4B"},"metadata":{},"sourceType":"module"}