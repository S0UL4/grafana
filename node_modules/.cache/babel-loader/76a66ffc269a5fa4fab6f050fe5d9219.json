{"ast":null,"code":"var _LoadingPlaceholder, _p;\n\nimport { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Alert, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { AlertGroup } from './components/alert-groups/AlertGroup';\nimport { AlertGroupFilter } from './components/alert-groups/AlertGroupFilter';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useFilteredAmGroups } from './hooks/useFilteredAmGroups';\nimport { useGroupedAlerts } from './hooks/useGroupedAlerts';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertGroupsAction } from './state/actions';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from './utils/constants';\nimport { getFiltersFromUrlParams } from './utils/misc';\nimport { initialAsyncRequestState } from './utils/redux';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst AlertGroups = () => {\n  var _alertGroups;\n\n  const alertManagers = useAlertManagersByPermission('instance');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n  const {\n    groupBy = []\n  } = getFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n  const alertGroups = useUnifiedAlertingSelector(state => state.amAlertGroups);\n  const {\n    loading,\n    error,\n    result: results = []\n  } = (_alertGroups = alertGroups[alertManagerSourceName || '']) !== null && _alertGroups !== void 0 ? _alertGroups : initialAsyncRequestState;\n  const groupedAlerts = useGroupedAlerts(results, groupBy);\n  const filteredAlertGroups = useFilteredAmGroups(groupedAlerts);\n  useEffect(() => {\n    function fetchNotifications() {\n      if (alertManagerSourceName) {\n        dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n      }\n    }\n\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, alertManagerSourceName]);\n\n  if (!alertManagerSourceName) {\n    return /*#__PURE__*/_jsx(AlertingPageWrapper, {\n      pageId: \"groups\",\n      children: /*#__PURE__*/_jsx(NoAlertManagerWarning, {\n        availableAlertManagers: alertManagers\n      })\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(AlertingPageWrapper, {\n    pageId: \"groups\",\n    children: [/*#__PURE__*/_jsx(AlertGroupFilter, {\n      groups: results\n    }), loading && (_LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n      text: \"Loading notifications\"\n    }))), error && !loading && /*#__PURE__*/_jsx(Alert, {\n      title: 'Error loading notifications',\n      severity: 'error',\n      children: error.message || 'Unknown error'\n    }), results && filteredAlertGroups.map((group, index) => {\n      return /*#__PURE__*/_jsxs(React.Fragment, {\n        children: [(index === 1 && Object.keys(filteredAlertGroups[0].labels).length === 0 || index === 0 && Object.keys(group.labels).length > 0) && /*#__PURE__*/_jsxs(\"p\", {\n          className: styles.groupingBanner,\n          children: [\"Grouped by: \", Object.keys(group.labels).join(', ')]\n        }), /*#__PURE__*/_jsx(AlertGroup, {\n          alertManagerSourceName: alertManagerSourceName || '',\n          group: group\n        })]\n      }, `${JSON.stringify(group.labels)}-group-${index}`);\n    }), results && !filteredAlertGroups.length && (_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n      children: \"No results.\"\n    })))]\n  });\n};\n\nconst getStyles = theme => ({\n  groupingBanner: css`\n    margin: ${theme.spacing(2, 0)};\n  `\n});\n\nexport default AlertGroups;","map":{"version":3,"names":["css","React","useEffect","useDispatch","Alert","LoadingPlaceholder","useStyles2","useQueryParams","AlertingPageWrapper","NoAlertManagerWarning","AlertGroup","AlertGroupFilter","useAlertManagerSourceName","useAlertManagersByPermission","useFilteredAmGroups","useGroupedAlerts","useUnifiedAlertingSelector","fetchAlertGroupsAction","NOTIFICATIONS_POLL_INTERVAL_MS","getFiltersFromUrlParams","initialAsyncRequestState","AlertGroups","alertManagers","alertManagerSourceName","dispatch","queryParams","groupBy","styles","getStyles","alertGroups","state","amAlertGroups","loading","error","result","results","groupedAlerts","filteredAlertGroups","fetchNotifications","interval","setInterval","clearInterval","message","map","group","index","Object","keys","labels","length","groupingBanner","join","JSON","stringify","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/AlertGroups.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { AlertGroup } from './components/alert-groups/AlertGroup';\nimport { AlertGroupFilter } from './components/alert-groups/AlertGroupFilter';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useFilteredAmGroups } from './hooks/useFilteredAmGroups';\nimport { useGroupedAlerts } from './hooks/useGroupedAlerts';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertGroupsAction } from './state/actions';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from './utils/constants';\nimport { getFiltersFromUrlParams } from './utils/misc';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AlertGroups = () => {\n  const alertManagers = useAlertManagersByPermission('instance');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n  const { groupBy = [] } = getFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups);\n  const {\n    loading,\n    error,\n    result: results = [],\n  } = alertGroups[alertManagerSourceName || ''] ?? initialAsyncRequestState;\n\n  const groupedAlerts = useGroupedAlerts(results, groupBy);\n  const filteredAlertGroups = useFilteredAmGroups(groupedAlerts);\n\n  useEffect(() => {\n    function fetchNotifications() {\n      if (alertManagerSourceName) {\n        dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n      }\n    }\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, alertManagerSourceName]);\n\n  if (!alertManagerSourceName) {\n    return (\n      <AlertingPageWrapper pageId=\"groups\">\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    );\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"groups\">\n      <AlertGroupFilter groups={results} />\n      {loading && <LoadingPlaceholder text=\"Loading notifications\" />}\n      {error && !loading && (\n        <Alert title={'Error loading notifications'} severity={'error'}>\n          {error.message || 'Unknown error'}\n        </Alert>\n      )}\n      {results &&\n        filteredAlertGroups.map((group, index) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(group.labels)}-group-${index}`}>\n              {((index === 1 && Object.keys(filteredAlertGroups[0].labels).length === 0) ||\n                (index === 0 && Object.keys(group.labels).length > 0)) && (\n                <p className={styles.groupingBanner}>Grouped by: {Object.keys(group.labels).join(', ')}</p>\n              )}\n              <AlertGroup alertManagerSourceName={alertManagerSourceName || ''} group={group} />\n            </React.Fragment>\n          );\n        })}\n      {results && !filteredAlertGroups.length && <p>No results.</p>}\n    </AlertingPageWrapper>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupingBanner: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n\nexport default AlertGroups;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}