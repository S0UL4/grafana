{"ast":null,"code":"import { debounce } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\nimport { SegmentAsync } from '@grafana/ui';\nimport { actions } from '../state/actions';\nimport { useDispatch } from '../state/context';\nimport { getAltSegmentsSelectables } from '../state/providers';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * Represents a single metric node in the metric path at the given index. Allows to change the metric name to one of the\n * provided options or a custom value.\n *\n * Options for tag names and metric names are reloaded while user is typing with backend taking care of auto-complete\n * (auto-complete cannot be implemented in front-end because backend returns only limited number of entries)\n *\n * getAltSegmentsSelectables() also returns list of tags for segment with index=0. Once a tag is selected the editor\n * enters tag-adding mode (see SeriesSection and GraphiteQueryModel.seriesByTagUsed).\n */\nexport function MetricSegment({\n  metricIndex,\n  segment,\n  state\n}) {\n  const dispatch = useDispatch();\n  const loadOptions = useCallback(value => {\n    return getAltSegmentsSelectables(state, metricIndex, value || '');\n  }, [state, metricIndex]);\n  const debouncedLoadOptions = useMemo(() => debounce(loadOptions, 200, {\n    leading: true\n  }), [loadOptions]);\n  const onSegmentChanged = useCallback(selectableValue => {\n    // selectableValue.value is always defined because emptyValues are not allowed in SegmentAsync by default\n    dispatch(actions.segmentValueChanged({\n      segment: selectableValue.value,\n      index: metricIndex\n    }));\n  }, [dispatch, metricIndex]); // segmentValueChanged action will destroy SegmentAsync immediately if a tag is selected. To give time\n  // for the clean up the action is debounced.\n\n  const onSegmentChangedDebounced = useMemo(() => debounce(onSegmentChanged, 100), [onSegmentChanged]);\n  return /*#__PURE__*/_jsx(SegmentAsync, {\n    value: segment.value,\n    inputMinWidth: 150,\n    allowCustomValue: true,\n    loadOptions: debouncedLoadOptions,\n    reloadOptionsOnChange: true,\n    onChange: onSegmentChangedDebounced\n  });\n}","map":{"version":3,"names":["debounce","React","useCallback","useMemo","SegmentAsync","actions","useDispatch","getAltSegmentsSelectables","MetricSegment","metricIndex","segment","state","dispatch","loadOptions","value","debouncedLoadOptions","leading","onSegmentChanged","selectableValue","segmentValueChanged","index","onSegmentChangedDebounced"],"sources":["/home/soula/grafana/public/app/plugins/datasource/graphite/components/MetricSegment.tsx"],"sourcesContent":["import { debounce } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { SegmentAsync } from '@grafana/ui';\n\nimport { actions } from '../state/actions';\nimport { useDispatch } from '../state/context';\nimport { getAltSegmentsSelectables } from '../state/providers';\nimport { GraphiteQueryEditorState } from '../state/store';\nimport { GraphiteSegment } from '../types';\n\ntype Props = {\n  segment: GraphiteSegment;\n  metricIndex: number;\n  state: GraphiteQueryEditorState;\n};\n\n/**\n * Represents a single metric node in the metric path at the given index. Allows to change the metric name to one of the\n * provided options or a custom value.\n *\n * Options for tag names and metric names are reloaded while user is typing with backend taking care of auto-complete\n * (auto-complete cannot be implemented in front-end because backend returns only limited number of entries)\n *\n * getAltSegmentsSelectables() also returns list of tags for segment with index=0. Once a tag is selected the editor\n * enters tag-adding mode (see SeriesSection and GraphiteQueryModel.seriesByTagUsed).\n */\nexport function MetricSegment({ metricIndex, segment, state }: Props) {\n  const dispatch = useDispatch();\n  const loadOptions = useCallback(\n    (value: string | undefined) => {\n      return getAltSegmentsSelectables(state, metricIndex, value || '');\n    },\n    [state, metricIndex]\n  );\n  const debouncedLoadOptions = useMemo(() => debounce(loadOptions, 200, { leading: true }), [loadOptions]);\n\n  const onSegmentChanged = useCallback(\n    (selectableValue: SelectableValue<GraphiteSegment | string>) => {\n      // selectableValue.value is always defined because emptyValues are not allowed in SegmentAsync by default\n      dispatch(actions.segmentValueChanged({ segment: selectableValue.value!, index: metricIndex }));\n    },\n    [dispatch, metricIndex]\n  );\n\n  // segmentValueChanged action will destroy SegmentAsync immediately if a tag is selected. To give time\n  // for the clean up the action is debounced.\n  const onSegmentChangedDebounced = useMemo(() => debounce(onSegmentChanged, 100), [onSegmentChanged]);\n\n  return (\n    <SegmentAsync<GraphiteSegment | string>\n      value={segment.value}\n      inputMinWidth={150}\n      allowCustomValue={true}\n      loadOptions={debouncedLoadOptions}\n      reloadOptionsOnChange={true}\n      onChange={onSegmentChangedDebounced}\n    />\n  );\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AAGA,SAASC,YAAT,QAA6B,aAA7B;AAEA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,yBAAT,QAA0C,oBAA1C;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAT,CAAuB;EAAEC,WAAF;EAAeC,OAAf;EAAwBC;AAAxB,CAAvB,EAA+D;EACpE,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;EACA,MAAMO,WAAW,GAAGX,WAAW,CAC5BY,KAAD,IAA+B;IAC7B,OAAOP,yBAAyB,CAACI,KAAD,EAAQF,WAAR,EAAqBK,KAAK,IAAI,EAA9B,CAAhC;EACD,CAH4B,EAI7B,CAACH,KAAD,EAAQF,WAAR,CAJ6B,CAA/B;EAMA,MAAMM,oBAAoB,GAAGZ,OAAO,CAAC,MAAMH,QAAQ,CAACa,WAAD,EAAc,GAAd,EAAmB;IAAEG,OAAO,EAAE;EAAX,CAAnB,CAAf,EAAsD,CAACH,WAAD,CAAtD,CAApC;EAEA,MAAMI,gBAAgB,GAAGf,WAAW,CACjCgB,eAAD,IAAgE;IAC9D;IACAN,QAAQ,CAACP,OAAO,CAACc,mBAAR,CAA4B;MAAET,OAAO,EAAEQ,eAAe,CAACJ,KAA3B;MAAmCM,KAAK,EAAEX;IAA1C,CAA5B,CAAD,CAAR;EACD,CAJiC,EAKlC,CAACG,QAAD,EAAWH,WAAX,CALkC,CAApC,CAVoE,CAkBpE;EACA;;EACA,MAAMY,yBAAyB,GAAGlB,OAAO,CAAC,MAAMH,QAAQ,CAACiB,gBAAD,EAAmB,GAAnB,CAAf,EAAwC,CAACA,gBAAD,CAAxC,CAAzC;EAEA,oBACE,KAAC,YAAD;IACE,KAAK,EAAEP,OAAO,CAACI,KADjB;IAEE,aAAa,EAAE,GAFjB;IAGE,gBAAgB,EAAE,IAHpB;IAIE,WAAW,EAAEC,oBAJf;IAKE,qBAAqB,EAAE,IALzB;IAME,QAAQ,EAAEM;EANZ,EADF;AAUD"},"metadata":{},"sourceType":"module"}