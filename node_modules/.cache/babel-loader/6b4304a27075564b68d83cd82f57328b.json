{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport { languages as prismLanguages } from 'prismjs';\nimport React from 'react';\nimport { BracesPlugin, LegacyForms, QueryField, SlatePrism } from '@grafana/ui';\nimport syntax from '../syntax';\nimport { getStatsGroups } from '../utils/query/getStatsGroups';\nimport { LogGroupSelector } from './LogGroupSelector';\nimport QueryHeader from './QueryHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst rowGap = css`\n  gap: 3px;\n`;\nexport class CloudWatchLogsQueryField extends React.PureComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    _defineProperty(this, \"state\", {\n      hint: undefined\n    });\n\n    _defineProperty(this, \"plugins\", void 0);\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      const {\n        query,\n        onChange\n      } = this.props;\n\n      if (onChange) {\n        var _query$logGroupNames;\n\n        onChange(Object.assign({}, query, {\n          logGroupNames: (_query$logGroupNames = query.logGroupNames) !== null && _query$logGroupNames !== void 0 ? _query$logGroupNames : []\n        }));\n      }\n    });\n\n    _defineProperty(this, \"onChangeQuery\", value => {\n      // Send text change to parent\n      const {\n        query,\n        onChange\n      } = this.props;\n\n      if (onChange) {\n        const nextQuery = Object.assign({}, query, {\n          expression: value,\n          statsGroups: getStatsGroups(value)\n        });\n        onChange(nextQuery);\n      }\n    });\n\n    _defineProperty(this, \"onTypeahead\", async typeahead => {\n      const {\n        datasource,\n        query\n      } = this.props;\n      const {\n        logGroupNames\n      } = query;\n\n      if (!datasource.languageProvider) {\n        return {\n          suggestions: []\n        };\n      }\n\n      const cloudwatchLanguageProvider = datasource.languageProvider;\n      const {\n        history,\n        absoluteRange\n      } = this.props;\n      const {\n        prefix,\n        text,\n        value,\n        wrapperClasses,\n        labelKey,\n        editor\n      } = typeahead;\n      return await cloudwatchLanguageProvider.provideCompletionItems({\n        text,\n        value,\n        prefix,\n        wrapperClasses,\n        labelKey,\n        editor\n      }, {\n        history,\n        absoluteRange,\n        logGroupNames,\n        region: query.region\n      });\n    });\n\n    this.plugins = [BracesPlugin(), SlatePrism({\n      onlyIn: node => node.object === 'block' && node.type === 'code_block',\n      getSyntax: node => 'cloudwatch'\n    }, Object.assign({}, prismLanguages, {\n      cloudwatch: syntax\n    }))];\n  }\n\n  render() {\n    var _data$error;\n\n    const {\n      onRunQuery,\n      onChange,\n      ExtraFieldElement,\n      data,\n      query,\n      datasource\n    } = this.props;\n    const {\n      region,\n      refId,\n      expression,\n      logGroupNames\n    } = query;\n    const {\n      hint\n    } = this.state;\n    const showError = data && data.error && data.error.refId === query.refId;\n    const cleanText = datasource.languageProvider ? datasource.languageProvider.cleanText : undefined;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(QueryHeader, {\n        query: query,\n        onRunQuery: onRunQuery,\n        datasource: datasource,\n        onChange: onChange,\n        sqlCodeEditorIsDirty: false\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: `gf-form gf-form--grow flex-grow-1 ${rowGap}`,\n        children: /*#__PURE__*/_jsx(LegacyForms.FormField, {\n          label: \"Log Groups\",\n          labelWidth: 6,\n          className: \"flex-grow-1\",\n          inputEl: /*#__PURE__*/_jsx(LogGroupSelector, {\n            region: region,\n            selectedLogGroups: logGroupNames !== null && logGroupNames !== void 0 ? logGroupNames : [],\n            datasource: datasource,\n            onChange: function (logGroups) {\n              onChange(Object.assign({}, query, {\n                logGroupNames: logGroups\n              }));\n            },\n            onRunQuery: onRunQuery,\n            refId: refId\n          })\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form-inline gf-form-inline--nowrap flex-grow-1\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form gf-form--grow flex-shrink-1\",\n          children: /*#__PURE__*/_jsx(QueryField, {\n            additionalPlugins: this.plugins,\n            query: expression !== null && expression !== void 0 ? expression : '',\n            onChange: this.onChangeQuery,\n            onRunQuery: this.props.onRunQuery,\n            onTypeahead: this.onTypeahead,\n            cleanText: cleanText,\n            placeholder: \"Enter a CloudWatch Logs Insights query (run with Shift+Enter)\",\n            portalOrigin: \"cloudwatch\",\n            disabled: !logGroupNames || logGroupNames.length === 0\n          })\n        }), ExtraFieldElement]\n      }), hint && /*#__PURE__*/_jsx(\"div\", {\n        className: \"query-row-break\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"text-warning\",\n          children: [hint.message, /*#__PURE__*/_jsx(\"a\", {\n            className: \"text-link muted\",\n            onClick: hint.fix.action,\n            children: hint.fix.label\n          })]\n        })\n      }), showError ? /*#__PURE__*/_jsx(\"div\", {\n        className: \"query-row-break\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"prom-query-field-info text-error\",\n          children: data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message\n        })\n      }) : null]\n    });\n  }\n\n}","map":{"version":3,"names":["css","languages","prismLanguages","React","BracesPlugin","LegacyForms","QueryField","SlatePrism","syntax","getStatsGroups","LogGroupSelector","QueryHeader","rowGap","CloudWatchLogsQueryField","PureComponent","constructor","props","context","hint","undefined","query","onChange","logGroupNames","value","nextQuery","expression","statsGroups","typeahead","datasource","languageProvider","suggestions","cloudwatchLanguageProvider","history","absoluteRange","prefix","text","wrapperClasses","labelKey","editor","provideCompletionItems","region","plugins","onlyIn","node","object","type","getSyntax","cloudwatch","render","onRunQuery","ExtraFieldElement","data","refId","state","showError","error","cleanText","logGroups","onChangeQuery","onTypeahead","length","message","fix","action","label"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/LogsQueryField.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { ReactNode } from 'react';\nimport { Node, Plugin } from 'slate';\n\nimport { AbsoluteTimeRange, QueryEditorProps } from '@grafana/data';\nimport { BracesPlugin, LegacyForms, QueryField, SlatePrism, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\nimport { ExploreId } from 'app/types';\n// Utils & Services\n// dom also includes Element polyfills\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchLanguageProvider } from '../language_provider';\nimport syntax from '../syntax';\nimport { CloudWatchJsonData, CloudWatchLogsQuery, CloudWatchQuery } from '../types';\nimport { getStatsGroups } from '../utils/query/getStatsGroups';\n\nimport { LogGroupSelector } from './LogGroupSelector';\nimport QueryHeader from './QueryHeader';\n\nexport interface CloudWatchLogsQueryFieldProps\n  extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  absoluteRange: AbsoluteTimeRange;\n  onLabelsRefresh?: () => void;\n  ExtraFieldElement?: ReactNode;\n  exploreId: ExploreId;\n  query: CloudWatchLogsQuery;\n}\n\nconst rowGap = css`\n  gap: 3px;\n`;\n\ninterface State {\n  hint:\n    | {\n        message: string;\n        fix: {\n          label: string;\n          action: () => void;\n        };\n      }\n    | undefined;\n}\n\nexport class CloudWatchLogsQueryField extends React.PureComponent<CloudWatchLogsQueryFieldProps, State> {\n  state: State = {\n    hint: undefined,\n  };\n\n  plugins: Plugin[];\n\n  constructor(props: CloudWatchLogsQueryFieldProps, context: React.Context<any>) {\n    super(props, context);\n\n    this.plugins = [\n      BracesPlugin(),\n      SlatePrism(\n        {\n          onlyIn: (node: Node) => node.object === 'block' && node.type === 'code_block',\n          getSyntax: (node: Node) => 'cloudwatch',\n        },\n        { ...(prismLanguages as LanguageMap), cloudwatch: syntax }\n      ),\n    ];\n  }\n\n  componentDidMount = () => {\n    const { query, onChange } = this.props;\n\n    if (onChange) {\n      onChange({ ...query, logGroupNames: query.logGroupNames ?? [] });\n    }\n  };\n\n  onChangeQuery = (value: string) => {\n    // Send text change to parent\n    const { query, onChange } = this.props;\n\n    if (onChange) {\n      const nextQuery = {\n        ...query,\n        expression: value,\n        statsGroups: getStatsGroups(value),\n      };\n      onChange(nextQuery);\n    }\n  };\n\n  onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const { datasource, query } = this.props;\n    const { logGroupNames } = query;\n\n    if (!datasource.languageProvider) {\n      return { suggestions: [] };\n    }\n\n    const cloudwatchLanguageProvider = datasource.languageProvider as CloudWatchLanguageProvider;\n    const { history, absoluteRange } = this.props;\n    const { prefix, text, value, wrapperClasses, labelKey, editor } = typeahead;\n\n    return await cloudwatchLanguageProvider.provideCompletionItems(\n      { text, value, prefix, wrapperClasses, labelKey, editor },\n      {\n        history,\n        absoluteRange,\n        logGroupNames,\n        region: query.region,\n      }\n    );\n  };\n\n  render() {\n    const { onRunQuery, onChange, ExtraFieldElement, data, query, datasource } = this.props;\n    const { region, refId, expression, logGroupNames } = query;\n    const { hint } = this.state;\n\n    const showError = data && data.error && data.error.refId === query.refId;\n    const cleanText = datasource.languageProvider ? datasource.languageProvider.cleanText : undefined;\n\n    return (\n      <>\n        <QueryHeader\n          query={query}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          onChange={onChange}\n          sqlCodeEditorIsDirty={false}\n        />\n        <div className={`gf-form gf-form--grow flex-grow-1 ${rowGap}`}>\n          <LegacyForms.FormField\n            label=\"Log Groups\"\n            labelWidth={6}\n            className=\"flex-grow-1\"\n            inputEl={\n              <LogGroupSelector\n                region={region}\n                selectedLogGroups={logGroupNames ?? []}\n                datasource={datasource}\n                onChange={function (logGroups: string[]): void {\n                  onChange({ ...query, logGroupNames: logGroups });\n                }}\n                onRunQuery={onRunQuery}\n                refId={refId}\n              />\n            }\n          />\n        </div>\n        <div className=\"gf-form-inline gf-form-inline--nowrap flex-grow-1\">\n          <div className=\"gf-form gf-form--grow flex-shrink-1\">\n            <QueryField\n              additionalPlugins={this.plugins}\n              query={expression ?? ''}\n              onChange={this.onChangeQuery}\n              onRunQuery={this.props.onRunQuery}\n              onTypeahead={this.onTypeahead}\n              cleanText={cleanText}\n              placeholder=\"Enter a CloudWatch Logs Insights query (run with Shift+Enter)\"\n              portalOrigin=\"cloudwatch\"\n              disabled={!logGroupNames || logGroupNames.length === 0}\n            />\n          </div>\n          {ExtraFieldElement}\n        </div>\n        {hint && (\n          <div className=\"query-row-break\">\n            <div className=\"text-warning\">\n              {hint.message}\n              <a className=\"text-link muted\" onClick={hint.fix.action}>\n                {hint.fix.label}\n              </a>\n            </div>\n          </div>\n        )}\n        {showError ? (\n          <div className=\"query-row-break\">\n            <div className=\"prom-query-field-info text-error\">{data?.error?.message}</div>\n          </div>\n        ) : null}\n      </>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}