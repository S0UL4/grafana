{"ast":null,"code":"import { guessFieldTypeFromValue } from '../dataframe/processDataFrame';\nimport { FieldType } from '../types/dataFrame';\nexport function makeFieldParser(value, field) {\n  if (!field.type) {\n    if (field.name === 'time' || field.name === 'Time') {\n      field.type = FieldType.time;\n    } else {\n      field.type = guessFieldTypeFromValue(value);\n    }\n  }\n\n  if (field.type === FieldType.number) {\n    return value => {\n      return parseFloat(value);\n    };\n  } // Will convert anything that starts with \"T\" to true\n\n\n  if (field.type === FieldType.boolean) {\n    return value => {\n      return !(value[0] === 'F' || value[0] === 'f' || value[0] === '0');\n    };\n  } // Just pass the string back\n\n\n  return value => value;\n}","map":{"version":3,"names":["guessFieldTypeFromValue","FieldType","makeFieldParser","value","field","type","name","time","number","parseFloat","boolean"],"sources":["/home/soula/grafana/packages/grafana-data/src/utils/fieldParser.ts"],"sourcesContent":["import { guessFieldTypeFromValue } from '../dataframe/processDataFrame';\nimport { Field, FieldType } from '../types/dataFrame';\n\nexport function makeFieldParser(value: any, field: Field): (value: string) => any {\n  if (!field.type) {\n    if (field.name === 'time' || field.name === 'Time') {\n      field.type = FieldType.time;\n    } else {\n      field.type = guessFieldTypeFromValue(value);\n    }\n  }\n\n  if (field.type === FieldType.number) {\n    return (value: string) => {\n      return parseFloat(value);\n    };\n  }\n\n  // Will convert anything that starts with \"T\" to true\n  if (field.type === FieldType.boolean) {\n    return (value: string) => {\n      return !(value[0] === 'F' || value[0] === 'f' || value[0] === '0');\n    };\n  }\n\n  // Just pass the string back\n  return (value: string) => value;\n}\n"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,+BAAxC;AACA,SAAgBC,SAAhB,QAAiC,oBAAjC;AAEA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAqCC,KAArC,EAA2E;EAChF,IAAI,CAACA,KAAK,CAACC,IAAX,EAAiB;IACf,IAAID,KAAK,CAACE,IAAN,KAAe,MAAf,IAAyBF,KAAK,CAACE,IAAN,KAAe,MAA5C,EAAoD;MAClDF,KAAK,CAACC,IAAN,GAAaJ,SAAS,CAACM,IAAvB;IACD,CAFD,MAEO;MACLH,KAAK,CAACC,IAAN,GAAaL,uBAAuB,CAACG,KAAD,CAApC;IACD;EACF;;EAED,IAAIC,KAAK,CAACC,IAAN,KAAeJ,SAAS,CAACO,MAA7B,EAAqC;IACnC,OAAQL,KAAD,IAAmB;MACxB,OAAOM,UAAU,CAACN,KAAD,CAAjB;IACD,CAFD;EAGD,CAb+E,CAehF;;;EACA,IAAIC,KAAK,CAACC,IAAN,KAAeJ,SAAS,CAACS,OAA7B,EAAsC;IACpC,OAAQP,KAAD,IAAmB;MACxB,OAAO,EAAEA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,IAAoBA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjC,IAAwCA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAvD,CAAP;IACD,CAFD;EAGD,CApB+E,CAsBhF;;;EACA,OAAQA,KAAD,IAAmBA,KAA1B;AACD"},"metadata":{},"sourceType":"module"}