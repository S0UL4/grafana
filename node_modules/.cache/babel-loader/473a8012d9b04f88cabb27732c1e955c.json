{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertLabel } from 'app/features/alerting/unified/components/AlertLabel';\nimport { AlertInstances } from '../AlertInstances';\nimport { getStyles } from '../UnifiedAlertList';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst GroupedModeView = ({\n  rules,\n  options\n}) => {\n  const styles = useStyles2(getStyles);\n  const groupBy = options.groupBy;\n  const groupedRules = useMemo(() => {\n    const groupedRules = new Map();\n\n    const hasInstancesWithMatchingLabels = rule => groupBy ? alertHasEveryLabel(rule, groupBy) : true;\n\n    const matchingRules = rules.filter(hasInstancesWithMatchingLabels);\n    matchingRules.forEach(rule => {\n      var _rule$rule$alerts;\n\n      ((_rule$rule$alerts = rule.rule.alerts) !== null && _rule$rule$alerts !== void 0 ? _rule$rule$alerts : []).forEach(alert => {\n        var _groupedRules$get;\n\n        const mapKey = createMapKey(groupBy, alert.labels);\n        const existingAlerts = (_groupedRules$get = groupedRules.get(mapKey)) !== null && _groupedRules$get !== void 0 ? _groupedRules$get : [];\n        groupedRules.set(mapKey, [...existingAlerts, alert]);\n      });\n    });\n    return groupedRules;\n  }, [groupBy, rules]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: Array.from(groupedRules).map(([key, alerts]) => /*#__PURE__*/_jsx(\"li\", {\n      className: styles.alertRuleItem,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: styles.customGroupDetails,\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.alertLabels,\n            children: [key && parseMapKey(key).map(([key, value]) => /*#__PURE__*/_jsx(AlertLabel, {\n              labelKey: key,\n              value: value\n            }, key)), !key && 'No grouping']\n          })\n        }), /*#__PURE__*/_jsx(AlertInstances, {\n          alerts: alerts,\n          options: options\n        })]\n      })\n    }, key))\n  });\n};\n\nfunction createMapKey(groupBy, labels) {\n  return new URLSearchParams(groupBy.map(key => [key, labels[key]])).toString();\n}\n\nfunction parseMapKey(key) {\n  return [...new URLSearchParams(key)];\n}\n\nfunction alertHasEveryLabel(rule, groupByKeys) {\n  return groupByKeys.every(key => {\n    var _rule$rule$alerts2;\n\n    return ((_rule$rule$alerts2 = rule.rule.alerts) !== null && _rule$rule$alerts2 !== void 0 ? _rule$rule$alerts2 : []).some(alert => alert.labels[key]);\n  });\n}\n\nexport default GroupedModeView;","map":{"version":3,"names":["React","useMemo","useStyles2","AlertLabel","AlertInstances","getStyles","GroupedModeView","rules","options","styles","groupBy","groupedRules","Map","hasInstancesWithMatchingLabels","rule","alertHasEveryLabel","matchingRules","filter","forEach","alerts","alert","mapKey","createMapKey","labels","existingAlerts","get","set","Array","from","map","key","alertRuleItem","customGroupDetails","alertLabels","parseMapKey","value","URLSearchParams","toString","groupByKeys","every","some"],"sources":["/home/soula/grafana/public/app/plugins/panel/alertlist/unified-alerting/GroupedView.tsx"],"sourcesContent":["import React, { FC, useMemo } from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertLabel } from 'app/features/alerting/unified/components/AlertLabel';\nimport { PromRuleWithLocation } from 'app/types/unified-alerting';\n\nimport { AlertInstances } from '../AlertInstances';\nimport { getStyles } from '../UnifiedAlertList';\nimport { GroupedRules, UnifiedAlertListOptions } from '../types';\n\ntype GroupedModeProps = {\n  rules: PromRuleWithLocation[];\n  options: UnifiedAlertListOptions;\n};\n\nconst GroupedModeView: FC<GroupedModeProps> = ({ rules, options }) => {\n  const styles = useStyles2(getStyles);\n\n  const groupBy = options.groupBy;\n\n  const groupedRules = useMemo<GroupedRules>(() => {\n    const groupedRules = new Map();\n\n    const hasInstancesWithMatchingLabels = (rule: PromRuleWithLocation) =>\n      groupBy ? alertHasEveryLabel(rule, groupBy) : true;\n\n    const matchingRules = rules.filter(hasInstancesWithMatchingLabels);\n    matchingRules.forEach((rule: PromRuleWithLocation) => {\n      (rule.rule.alerts ?? []).forEach((alert) => {\n        const mapKey = createMapKey(groupBy, alert.labels);\n        const existingAlerts = groupedRules.get(mapKey) ?? [];\n        groupedRules.set(mapKey, [...existingAlerts, alert]);\n      });\n    });\n\n    return groupedRules;\n  }, [groupBy, rules]);\n\n  return (\n    <>\n      {Array.from(groupedRules).map(([key, alerts]) => (\n        <li className={styles.alertRuleItem} key={key}>\n          <div>\n            <div className={styles.customGroupDetails}>\n              <div className={styles.alertLabels}>\n                {key && parseMapKey(key).map(([key, value]) => <AlertLabel key={key} labelKey={key} value={value} />)}\n                {!key && 'No grouping'}\n              </div>\n            </div>\n            <AlertInstances alerts={alerts} options={options} />\n          </div>\n        </li>\n      ))}\n    </>\n  );\n};\n\nfunction createMapKey(groupBy: string[], labels: Record<string, string>): string {\n  return new URLSearchParams(groupBy.map((key) => [key, labels[key]])).toString();\n}\n\nfunction parseMapKey(key: string): Array<[string, string]> {\n  return [...new URLSearchParams(key)];\n}\n\nfunction alertHasEveryLabel(rule: PromRuleWithLocation, groupByKeys: string[]) {\n  return groupByKeys.every((key) => {\n    return (rule.rule.alerts ?? []).some((alert) => alert.labels[key]);\n  });\n}\n\nexport default GroupedModeView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}