{"ast":null,"code":"var _PlayButton;\n\nimport { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\nimport { Button, SegmentAsync, useStyles2 } from '@grafana/ui';\nimport { actions } from '../state/actions';\nimport { useDispatch } from '../state/context';\nimport { getTagsAsSegmentsSelectables } from '../state/providers';\nimport { PlayButton } from './PlayButton';\nimport { TagEditor } from './TagEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/**\n * Renders all tags and a button allowing to add more tags.\n *\n * Options for tag names are reloaded while user is typing with backend taking care of auto-complete\n * (auto-complete cannot be implemented in front-end because backend returns only limited number of entries)\n */\nexport function TagsSection({\n  tags,\n  state\n}) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles); // Options are reloaded while user is typing with backend taking care of auto-complete (auto-complete cannot be\n  // implemented in front-end because backend returns only limited number of entries)\n\n  const getTagsAsSegmentsOptions = useCallback(inputValue => {\n    return getTagsAsSegmentsSelectables(state, inputValue || '');\n  }, [state]);\n  const debouncedGetTagsAsSegments = useMemo(() => debounce(getTagsAsSegmentsOptions, 200, {\n    leading: true\n  }), [getTagsAsSegmentsOptions]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [tags.map((tag, index) => {\n      return /*#__PURE__*/_jsx(TagEditor, {\n        tagIndex: index,\n        tag: tag,\n        state: state\n      }, index);\n    }), tags.length && /*#__PURE__*/_jsx(SegmentAsync, {\n      inputMinWidth: 150,\n      onChange: value => {\n        dispatch(actions.addNewTag({\n          segment: value.value\n        }));\n      },\n      loadOptions: debouncedGetTagsAsSegments,\n      reloadOptionsOnChange: true,\n      Component: /*#__PURE__*/_jsx(Button, {\n        icon: \"plus\",\n        variant: \"secondary\",\n        className: styles.button,\n        \"aria-label\": \"Add new tag\"\n      })\n    }), state.paused && (_PlayButton || (_PlayButton = /*#__PURE__*/_jsx(PlayButton, {})))]\n  });\n}\n\nfunction getStyles(theme) {\n  return {\n    button: css`\n      margin-right: ${theme.spacing(0.5)};\n    `\n  };\n}","map":{"version":3,"names":["css","debounce","React","useCallback","useMemo","Button","SegmentAsync","useStyles2","actions","useDispatch","getTagsAsSegmentsSelectables","PlayButton","TagEditor","TagsSection","tags","state","dispatch","styles","getStyles","getTagsAsSegmentsOptions","inputValue","debouncedGetTagsAsSegments","leading","map","tag","index","length","value","addNewTag","segment","button","paused","theme","spacing"],"sources":["/home/soula/grafana/public/app/plugins/datasource/graphite/components/TagsSection.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { useCallback, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, SegmentAsync, useStyles2 } from '@grafana/ui';\n\nimport { GraphiteTag } from '../graphite_query';\nimport { actions } from '../state/actions';\nimport { useDispatch } from '../state/context';\nimport { getTagsAsSegmentsSelectables } from '../state/providers';\nimport { GraphiteQueryEditorState } from '../state/store';\nimport { GraphiteSegment } from '../types';\n\nimport { PlayButton } from './PlayButton';\nimport { TagEditor } from './TagEditor';\n\ntype Props = {\n  tags: GraphiteTag[];\n  state: GraphiteQueryEditorState;\n};\n\n/**\n * Renders all tags and a button allowing to add more tags.\n *\n * Options for tag names are reloaded while user is typing with backend taking care of auto-complete\n * (auto-complete cannot be implemented in front-end because backend returns only limited number of entries)\n */\nexport function TagsSection({ tags, state }: Props) {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  // Options are reloaded while user is typing with backend taking care of auto-complete (auto-complete cannot be\n  // implemented in front-end because backend returns only limited number of entries)\n  const getTagsAsSegmentsOptions = useCallback(\n    (inputValue?: string) => {\n      return getTagsAsSegmentsSelectables(state, inputValue || '');\n    },\n    [state]\n  );\n  const debouncedGetTagsAsSegments = useMemo(\n    () => debounce(getTagsAsSegmentsOptions, 200, { leading: true }),\n    [getTagsAsSegmentsOptions]\n  );\n\n  return (\n    <>\n      {tags.map((tag, index) => {\n        return <TagEditor key={index} tagIndex={index} tag={tag} state={state} />;\n      })}\n      {tags.length && (\n        <SegmentAsync<GraphiteSegment>\n          inputMinWidth={150}\n          onChange={(value) => {\n            dispatch(actions.addNewTag({ segment: value.value! }));\n          }}\n          loadOptions={debouncedGetTagsAsSegments}\n          reloadOptionsOnChange={true}\n          Component={<Button icon=\"plus\" variant=\"secondary\" className={styles.button} aria-label=\"Add new tag\" />}\n        />\n      )}\n      {state.paused && <PlayButton />}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    button: css`\n      margin-right: ${theme.spacing(0.5)};\n    `,\n  };\n}\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AAGA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,UAA/B,QAAiD,aAAjD;AAGA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,4BAAT,QAA6C,oBAA7C;AAIA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAT,CAAqB;EAAEC,IAAF;EAAQC;AAAR,CAArB,EAA6C;EAClD,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;EACA,MAAMQ,MAAM,GAAGV,UAAU,CAACW,SAAD,CAAzB,CAFkD,CAIlD;EACA;;EACA,MAAMC,wBAAwB,GAAGhB,WAAW,CACzCiB,UAAD,IAAyB;IACvB,OAAOV,4BAA4B,CAACK,KAAD,EAAQK,UAAU,IAAI,EAAtB,CAAnC;EACD,CAHyC,EAI1C,CAACL,KAAD,CAJ0C,CAA5C;EAMA,MAAMM,0BAA0B,GAAGjB,OAAO,CACxC,MAAMH,QAAQ,CAACkB,wBAAD,EAA2B,GAA3B,EAAgC;IAAEG,OAAO,EAAE;EAAX,CAAhC,CAD0B,EAExC,CAACH,wBAAD,CAFwC,CAA1C;EAKA,oBACE;IAAA,WACGL,IAAI,CAACS,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,KAAgB;MACxB,oBAAO,KAAC,SAAD;QAAuB,QAAQ,EAAEA,KAAjC;QAAwC,GAAG,EAAED,GAA7C;QAAkD,KAAK,EAAET;MAAzD,GAAgBU,KAAhB,CAAP;IACD,CAFA,CADH,EAIGX,IAAI,CAACY,MAAL,iBACC,KAAC,YAAD;MACE,aAAa,EAAE,GADjB;MAEE,QAAQ,EAAGC,KAAD,IAAW;QACnBX,QAAQ,CAACR,OAAO,CAACoB,SAAR,CAAkB;UAAEC,OAAO,EAAEF,KAAK,CAACA;QAAjB,CAAlB,CAAD,CAAR;MACD,CAJH;MAKE,WAAW,EAAEN,0BALf;MAME,qBAAqB,EAAE,IANzB;MAOE,SAAS,eAAE,KAAC,MAAD;QAAQ,IAAI,EAAC,MAAb;QAAoB,OAAO,EAAC,WAA5B;QAAwC,SAAS,EAAEJ,MAAM,CAACa,MAA1D;QAAkE,cAAW;MAA7E;IAPb,EALJ,EAeGf,KAAK,CAACgB,MAAN,gDAAgB,KAAC,UAAD,KAAhB,EAfH;EAAA,EADF;AAmBD;;AAED,SAASb,SAAT,CAAmBc,KAAnB,EAAyC;EACvC,OAAO;IACLF,MAAM,EAAE9B,GAAI;AAChB,sBAAsBgC,KAAK,CAACC,OAAN,CAAc,GAAd,CAAmB;AACzC;EAHS,CAAP;AAKD"},"metadata":{},"sourceType":"module"}