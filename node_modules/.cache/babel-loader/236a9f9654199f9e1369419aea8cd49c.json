{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport { dataFrameFromJSON, getDefaultTimeRange, LoadingState, withLoadingIndicator } from '@grafana/data';\nimport { getBackendSrv, toDataQueryError } from '@grafana/runtime';\nimport { isCloudPreviewRequest, isGrafanaPreviewRequest } from '../types/preview';\nimport { RuleFormType } from '../types/rule-form';\nexport function previewAlertRule(request) {\n  if (isCloudPreviewRequest(request)) {\n    return previewCloudAlertRule(request);\n  }\n\n  if (isGrafanaPreviewRequest(request)) {\n    return previewGrafanaAlertRule(request);\n  }\n\n  throw new Error('unsupported preview rule request');\n}\n\nfunction previewGrafanaAlertRule(request) {\n  const type = RuleFormType.grafana;\n  return withLoadingIndicator({\n    whileLoading: createResponse(type),\n    source: getBackendSrv().fetch({\n      method: 'POST',\n      url: `/api/v1/rule/test/grafana`,\n      data: request\n    }).pipe(map(({\n      data\n    }) => {\n      return createResponse(type, {\n        state: LoadingState.Done,\n        series: data.instances.map(dataFrameFromJSON)\n      });\n    }), catchError(error => {\n      return of(createResponse(type, {\n        state: LoadingState.Error,\n        error: toDataQueryError(error)\n      }));\n    }), share())\n  });\n}\n\nfunction createResponse(ruleType, data = {}) {\n  return {\n    ruleType,\n    data: Object.assign({\n      state: LoadingState.Loading,\n      series: [],\n      timeRange: getDefaultTimeRange()\n    }, data)\n  };\n}\n\nfunction previewCloudAlertRule(request) {\n  throw new Error('preview for cloud alerting rules is not implemented');\n}","map":{"version":3,"names":["of","catchError","map","share","dataFrameFromJSON","getDefaultTimeRange","LoadingState","withLoadingIndicator","getBackendSrv","toDataQueryError","isCloudPreviewRequest","isGrafanaPreviewRequest","RuleFormType","previewAlertRule","request","previewCloudAlertRule","previewGrafanaAlertRule","Error","type","grafana","whileLoading","createResponse","source","fetch","method","url","data","pipe","state","Done","series","instances","error","ruleType","Loading","timeRange"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/api/preview.ts"],"sourcesContent":["import { Observable, of } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\n\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { getBackendSrv, toDataQueryError } from '@grafana/runtime';\n\nimport {\n  CloudPreviewRuleRequest,\n  GrafanaPreviewRuleRequest,\n  isCloudPreviewRequest,\n  isGrafanaPreviewRequest,\n  PreviewRuleRequest,\n  PreviewRuleResponse,\n} from '../types/preview';\nimport { RuleFormType } from '../types/rule-form';\n\nexport function previewAlertRule(request: PreviewRuleRequest): Observable<PreviewRuleResponse> {\n  if (isCloudPreviewRequest(request)) {\n    return previewCloudAlertRule(request);\n  }\n\n  if (isGrafanaPreviewRequest(request)) {\n    return previewGrafanaAlertRule(request);\n  }\n\n  throw new Error('unsupported preview rule request');\n}\n\ntype GrafanaPreviewRuleResponse = {\n  instances: DataFrameJSON[];\n};\n\nfunction previewGrafanaAlertRule(request: GrafanaPreviewRuleRequest): Observable<PreviewRuleResponse> {\n  const type = RuleFormType.grafana;\n\n  return withLoadingIndicator({\n    whileLoading: createResponse(type),\n    source: getBackendSrv()\n      .fetch<GrafanaPreviewRuleResponse>({\n        method: 'POST',\n        url: `/api/v1/rule/test/grafana`,\n        data: request,\n      })\n      .pipe(\n        map(({ data }) => {\n          return createResponse(type, {\n            state: LoadingState.Done,\n            series: data.instances.map(dataFrameFromJSON),\n          });\n        }),\n        catchError((error: Error) => {\n          return of(\n            createResponse(type, {\n              state: LoadingState.Error,\n              error: toDataQueryError(error),\n            })\n          );\n        }),\n        share()\n      ),\n  });\n}\n\nfunction createResponse(ruleType: RuleFormType, data: Partial<PanelData> = {}): PreviewRuleResponse {\n  return {\n    ruleType,\n    data: {\n      state: LoadingState.Loading,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n      ...data,\n    },\n  };\n}\n\nfunction previewCloudAlertRule(request: CloudPreviewRuleRequest): Observable<PreviewRuleResponse> {\n  throw new Error('preview for cloud alerting rules is not implemented');\n}\n"],"mappings":"AAAA,SAAqBA,EAArB,QAA+B,MAA/B;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,KAA1B,QAAuC,gBAAvC;AAEA,SACEC,iBADF,EAGEC,mBAHF,EAIEC,YAJF,EAMEC,oBANF,QAOO,eAPP;AAQA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,kBAAhD;AAEA,SAGEC,qBAHF,EAIEC,uBAJF,QAOO,kBAPP;AAQA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAwF;EAC7F,IAAIJ,qBAAqB,CAACI,OAAD,CAAzB,EAAoC;IAClC,OAAOC,qBAAqB,CAACD,OAAD,CAA5B;EACD;;EAED,IAAIH,uBAAuB,CAACG,OAAD,CAA3B,EAAsC;IACpC,OAAOE,uBAAuB,CAACF,OAAD,CAA9B;EACD;;EAED,MAAM,IAAIG,KAAJ,CAAU,kCAAV,CAAN;AACD;;AAMD,SAASD,uBAAT,CAAiCF,OAAjC,EAAsG;EACpG,MAAMI,IAAI,GAAGN,YAAY,CAACO,OAA1B;EAEA,OAAOZ,oBAAoB,CAAC;IAC1Ba,YAAY,EAAEC,cAAc,CAACH,IAAD,CADF;IAE1BI,MAAM,EAAEd,aAAa,GAClBe,KADK,CAC6B;MACjCC,MAAM,EAAE,MADyB;MAEjCC,GAAG,EAAG,2BAF2B;MAGjCC,IAAI,EAAEZ;IAH2B,CAD7B,EAMLa,IANK,CAOJzB,GAAG,CAAC,CAAC;MAAEwB;IAAF,CAAD,KAAc;MAChB,OAAOL,cAAc,CAACH,IAAD,EAAO;QAC1BU,KAAK,EAAEtB,YAAY,CAACuB,IADM;QAE1BC,MAAM,EAAEJ,IAAI,CAACK,SAAL,CAAe7B,GAAf,CAAmBE,iBAAnB;MAFkB,CAAP,CAArB;IAID,CALE,CAPC,EAaJH,UAAU,CAAE+B,KAAD,IAAkB;MAC3B,OAAOhC,EAAE,CACPqB,cAAc,CAACH,IAAD,EAAO;QACnBU,KAAK,EAAEtB,YAAY,CAACW,KADD;QAEnBe,KAAK,EAAEvB,gBAAgB,CAACuB,KAAD;MAFJ,CAAP,CADP,CAAT;IAMD,CAPS,CAbN,EAqBJ7B,KAAK,EArBD;EAFkB,CAAD,CAA3B;AA0BD;;AAED,SAASkB,cAAT,CAAwBY,QAAxB,EAAgDP,IAAwB,GAAG,EAA3E,EAAoG;EAClG,OAAO;IACLO,QADK;IAELP,IAAI;MACFE,KAAK,EAAEtB,YAAY,CAAC4B,OADlB;MAEFJ,MAAM,EAAE,EAFN;MAGFK,SAAS,EAAE9B,mBAAmB;IAH5B,GAICqB,IAJD;EAFC,CAAP;AASD;;AAED,SAASX,qBAAT,CAA+BD,OAA/B,EAAkG;EAChG,MAAM,IAAIG,KAAJ,CAAU,qDAAV,CAAN;AACD"},"metadata":{},"sourceType":"module"}