{"ast":null,"code":"import { FALLBACK_COLOR, ThresholdsMode } from '../types';\nexport const fallBackTreshold = {\n  value: 0,\n  color: FALLBACK_COLOR\n};\nexport function getActiveThreshold(value, thresholds) {\n  if (!thresholds || thresholds.length === 0) {\n    return fallBackTreshold;\n  }\n\n  let active = thresholds[0];\n\n  for (const threshold of thresholds) {\n    if (value >= threshold.value) {\n      active = threshold;\n    } else {\n      break;\n    }\n  }\n\n  return active;\n}\nexport function getActiveThresholdForValue(field, value, percent) {\n  const {\n    thresholds\n  } = field.config;\n\n  if ((thresholds === null || thresholds === void 0 ? void 0 : thresholds.mode) === ThresholdsMode.Percentage) {\n    return getActiveThreshold(percent * 100, thresholds === null || thresholds === void 0 ? void 0 : thresholds.steps);\n  }\n\n  return getActiveThreshold(value, thresholds === null || thresholds === void 0 ? void 0 : thresholds.steps);\n}\n/**\n * Sorts the thresholds\n */\n\nexport function sortThresholds(thresholds) {\n  return thresholds.sort((t1, t2) => t1.value - t2.value);\n}","map":{"version":3,"names":["FALLBACK_COLOR","ThresholdsMode","fallBackTreshold","value","color","getActiveThreshold","thresholds","length","active","threshold","getActiveThresholdForValue","field","percent","config","mode","Percentage","steps","sortThresholds","sort","t1","t2"],"sources":["/home/soula/grafana/packages/grafana-data/src/field/thresholds.ts"],"sourcesContent":["import { Threshold, FALLBACK_COLOR, Field, ThresholdsMode } from '../types';\n\nexport const fallBackTreshold: Threshold = { value: 0, color: FALLBACK_COLOR };\n\nexport function getActiveThreshold(value: number, thresholds: Threshold[] | undefined): Threshold {\n  if (!thresholds || thresholds.length === 0) {\n    return fallBackTreshold;\n  }\n\n  let active = thresholds[0];\n\n  for (const threshold of thresholds) {\n    if (value >= threshold.value) {\n      active = threshold;\n    } else {\n      break;\n    }\n  }\n\n  return active;\n}\n\nexport function getActiveThresholdForValue(field: Field, value: number, percent: number): Threshold {\n  const { thresholds } = field.config;\n\n  if (thresholds?.mode === ThresholdsMode.Percentage) {\n    return getActiveThreshold(percent * 100, thresholds?.steps);\n  }\n\n  return getActiveThreshold(value, thresholds?.steps);\n}\n\n/**\n * Sorts the thresholds\n */\nexport function sortThresholds(thresholds: Threshold[]) {\n  return thresholds.sort((t1, t2) => t1.value - t2.value);\n}\n"],"mappings":"AAAA,SAAoBA,cAApB,EAA2CC,cAA3C,QAAiE,UAAjE;AAEA,OAAO,MAAMC,gBAA2B,GAAG;EAAEC,KAAK,EAAE,CAAT;EAAYC,KAAK,EAAEJ;AAAnB,CAApC;AAEP,OAAO,SAASK,kBAAT,CAA4BF,KAA5B,EAA2CG,UAA3C,EAA2F;EAChG,IAAI,CAACA,UAAD,IAAeA,UAAU,CAACC,MAAX,KAAsB,CAAzC,EAA4C;IAC1C,OAAOL,gBAAP;EACD;;EAED,IAAIM,MAAM,GAAGF,UAAU,CAAC,CAAD,CAAvB;;EAEA,KAAK,MAAMG,SAAX,IAAwBH,UAAxB,EAAoC;IAClC,IAAIH,KAAK,IAAIM,SAAS,CAACN,KAAvB,EAA8B;MAC5BK,MAAM,GAAGC,SAAT;IACD,CAFD,MAEO;MACL;IACD;EACF;;EAED,OAAOD,MAAP;AACD;AAED,OAAO,SAASE,0BAAT,CAAoCC,KAApC,EAAkDR,KAAlD,EAAiES,OAAjE,EAA6F;EAClG,MAAM;IAAEN;EAAF,IAAiBK,KAAK,CAACE,MAA7B;;EAEA,IAAI,CAAAP,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEQ,IAAZ,MAAqBb,cAAc,CAACc,UAAxC,EAAoD;IAClD,OAAOV,kBAAkB,CAACO,OAAO,GAAG,GAAX,EAAgBN,UAAhB,aAAgBA,UAAhB,uBAAgBA,UAAU,CAAEU,KAA5B,CAAzB;EACD;;EAED,OAAOX,kBAAkB,CAACF,KAAD,EAAQG,UAAR,aAAQA,UAAR,uBAAQA,UAAU,CAAEU,KAApB,CAAzB;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBX,UAAxB,EAAiD;EACtD,OAAOA,UAAU,CAACY,IAAX,CAAgB,CAACC,EAAD,EAAKC,EAAL,KAAYD,EAAE,CAAChB,KAAH,GAAWiB,EAAE,CAACjB,KAA1C,CAAP;AACD"},"metadata":{},"sourceType":"module"}