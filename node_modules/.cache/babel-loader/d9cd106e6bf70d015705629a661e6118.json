{"ast":null,"code":"import { TextMode } from './models.gen';\nexport const textPanelMigrationHandler = panel => {\n  const previousVersion = parseFloat(panel.pluginVersion || '6.1');\n  let options = panel.options; // Migrates old Angular based text panel props to new props\n\n  if (panel.hasOwnProperty('content') && panel.hasOwnProperty('mode')) {\n    const oldTextPanel = panel;\n    const content = oldTextPanel.content;\n    const mode = oldTextPanel.mode;\n    delete oldTextPanel.content;\n    delete oldTextPanel.mode;\n\n    if (previousVersion < 7.1) {\n      options = {\n        content,\n        mode\n      };\n    }\n  } // The 'text' mode has been removed so we need to update any panels still using it to markdown\n\n\n  if (options.mode !== 'html' && options.mode !== 'markdown') {\n    options = Object.assign({}, options, {\n      mode: TextMode.Markdown\n    });\n  }\n\n  return options;\n};","map":{"version":3,"names":["TextMode","textPanelMigrationHandler","panel","previousVersion","parseFloat","pluginVersion","options","hasOwnProperty","oldTextPanel","content","mode","Markdown"],"sources":["/home/soula/grafana/public/app/plugins/panel/text/textPanelMigrationHandler.ts"],"sourcesContent":["import { PanelModel } from '@grafana/data';\n\nimport { TextMode, PanelOptions } from './models.gen';\n\nexport const textPanelMigrationHandler = (panel: PanelModel<PanelOptions>): Partial<PanelOptions> => {\n  const previousVersion = parseFloat(panel.pluginVersion || '6.1');\n  let options = panel.options;\n\n  // Migrates old Angular based text panel props to new props\n  if (panel.hasOwnProperty('content') && panel.hasOwnProperty('mode')) {\n    const oldTextPanel: any = panel as any;\n    const content = oldTextPanel.content;\n    const mode = oldTextPanel.mode as TextMode;\n\n    delete oldTextPanel.content;\n    delete oldTextPanel.mode;\n\n    if (previousVersion < 7.1) {\n      options = { content, mode };\n    }\n  }\n\n  // The 'text' mode has been removed so we need to update any panels still using it to markdown\n  if (options.mode !== 'html' && options.mode !== 'markdown') {\n    options = { ...options, mode: TextMode.Markdown };\n  }\n\n  return options;\n};\n"],"mappings":"AAEA,SAASA,QAAT,QAAuC,cAAvC;AAEA,OAAO,MAAMC,yBAAyB,GAAIC,KAAD,IAA4D;EACnG,MAAMC,eAAe,GAAGC,UAAU,CAACF,KAAK,CAACG,aAAN,IAAuB,KAAxB,CAAlC;EACA,IAAIC,OAAO,GAAGJ,KAAK,CAACI,OAApB,CAFmG,CAInG;;EACA,IAAIJ,KAAK,CAACK,cAAN,CAAqB,SAArB,KAAmCL,KAAK,CAACK,cAAN,CAAqB,MAArB,CAAvC,EAAqE;IACnE,MAAMC,YAAiB,GAAGN,KAA1B;IACA,MAAMO,OAAO,GAAGD,YAAY,CAACC,OAA7B;IACA,MAAMC,IAAI,GAAGF,YAAY,CAACE,IAA1B;IAEA,OAAOF,YAAY,CAACC,OAApB;IACA,OAAOD,YAAY,CAACE,IAApB;;IAEA,IAAIP,eAAe,GAAG,GAAtB,EAA2B;MACzBG,OAAO,GAAG;QAAEG,OAAF;QAAWC;MAAX,CAAV;IACD;EACF,CAhBkG,CAkBnG;;;EACA,IAAIJ,OAAO,CAACI,IAAR,KAAiB,MAAjB,IAA2BJ,OAAO,CAACI,IAAR,KAAiB,UAAhD,EAA4D;IAC1DJ,OAAO,qBAAQA,OAAR;MAAiBI,IAAI,EAAEV,QAAQ,CAACW;IAAhC,EAAP;EACD;;EAED,OAAOL,OAAP;AACD,CAxBM"},"metadata":{},"sourceType":"module"}