{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { LegendDisplayMode } from '@grafana/schema';\nimport { withTheme2 } from '../../themes/ThemeContext';\nimport { GraphNG } from '../GraphNG/GraphNG';\nimport { PanelContextRoot } from '../PanelChrome/PanelContext';\nimport { PlotLegend } from '../uPlot/PlotLegend';\nimport { preparePlotConfigBuilder } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst propsToDiff = ['legend', 'options'];\nexport class UnthemedTimeSeries extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"panelContext\", {});\n\n    _defineProperty(this, \"prepConfig\", (alignedFrame, allFrames, getTimeRange) => {\n      const {\n        eventBus,\n        sync\n      } = this.context;\n      const {\n        theme,\n        timeZone,\n        renderers,\n        tweakAxis,\n        tweakScale\n      } = this.props;\n      return preparePlotConfigBuilder({\n        frame: alignedFrame,\n        theme,\n        timeZone,\n        getTimeRange,\n        eventBus,\n        sync,\n        allFrames,\n        renderers,\n        tweakScale,\n        tweakAxis\n      });\n    });\n\n    _defineProperty(this, \"renderLegend\", config => {\n      const {\n        legend,\n        frames\n      } = this.props;\n\n      if (!config || legend && legend.displayMode === LegendDisplayMode.Hidden) {\n        return null;\n      }\n\n      return /*#__PURE__*/_jsx(PlotLegend, Object.assign({\n        data: frames,\n        config: config\n      }, legend));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(GraphNG, Object.assign({}, this.props, {\n      prepConfig: this.prepConfig,\n      propsToDiff: propsToDiff,\n      renderLegend: this.renderLegend\n    }));\n  }\n\n}\n\n_defineProperty(UnthemedTimeSeries, \"contextType\", PanelContextRoot);\n\nexport const TimeSeries = withTheme2(UnthemedTimeSeries);\nTimeSeries.displayName = 'TimeSeries';","map":{"version":3,"names":["React","LegendDisplayMode","withTheme2","GraphNG","PanelContextRoot","PlotLegend","preparePlotConfigBuilder","propsToDiff","UnthemedTimeSeries","Component","alignedFrame","allFrames","getTimeRange","eventBus","sync","context","theme","timeZone","renderers","tweakAxis","tweakScale","props","frame","config","legend","frames","displayMode","Hidden","render","prepConfig","renderLegend","TimeSeries","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/TimeSeries/TimeSeries.tsx"],"sourcesContent":["import React from 'react';\n\nimport { DataFrame, TimeRange } from '@grafana/data';\nimport { LegendDisplayMode } from '@grafana/schema';\n\nimport { PropDiffFn } from '../../../../../packages/grafana-ui/src/components/GraphNG/GraphNG';\nimport { withTheme2 } from '../../themes/ThemeContext';\nimport { GraphNG, GraphNGProps } from '../GraphNG/GraphNG';\nimport { PanelContext, PanelContextRoot } from '../PanelChrome/PanelContext';\nimport { PlotLegend } from '../uPlot/PlotLegend';\nimport { UPlotConfigBuilder } from '../uPlot/config/UPlotConfigBuilder';\n\nimport { preparePlotConfigBuilder } from './utils';\n\nconst propsToDiff: Array<string | PropDiffFn> = ['legend', 'options'];\n\ntype TimeSeriesProps = Omit<GraphNGProps, 'prepConfig' | 'propsToDiff' | 'renderLegend'>;\n\nexport class UnthemedTimeSeries extends React.Component<TimeSeriesProps> {\n  static contextType = PanelContextRoot;\n  panelContext: PanelContext = {} as PanelContext;\n\n  prepConfig = (alignedFrame: DataFrame, allFrames: DataFrame[], getTimeRange: () => TimeRange) => {\n    const { eventBus, sync } = this.context as PanelContext;\n    const { theme, timeZone, renderers, tweakAxis, tweakScale } = this.props;\n\n    return preparePlotConfigBuilder({\n      frame: alignedFrame,\n      theme,\n      timeZone,\n      getTimeRange,\n      eventBus,\n      sync,\n      allFrames,\n      renderers,\n      tweakScale,\n      tweakAxis,\n    });\n  };\n\n  renderLegend = (config: UPlotConfigBuilder) => {\n    const { legend, frames } = this.props;\n\n    if (!config || (legend && legend.displayMode === LegendDisplayMode.Hidden)) {\n      return null;\n    }\n\n    return <PlotLegend data={frames} config={config} {...legend} />;\n  };\n\n  render() {\n    return (\n      <GraphNG\n        {...this.props}\n        prepConfig={this.prepConfig}\n        propsToDiff={propsToDiff}\n        renderLegend={this.renderLegend as any}\n      />\n    );\n  }\n}\n\nexport const TimeSeries = withTheme2(UnthemedTimeSeries);\nTimeSeries.displayName = 'TimeSeries';\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,iBAAT,QAAkC,iBAAlC;AAGA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,OAAT,QAAsC,oBAAtC;AACA,SAAuBC,gBAAvB,QAA+C,6BAA/C;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAGA,SAASC,wBAAT,QAAyC,SAAzC;;AAEA,MAAMC,WAAuC,GAAG,CAAC,QAAD,EAAW,SAAX,CAAhD;AAIA,OAAO,MAAMC,kBAAN,SAAiCR,KAAK,CAACS,SAAvC,CAAkE;EAAA;IAAA;;IAAA,sCAE1C,EAF0C;;IAAA,oCAI1D,CAACC,YAAD,EAA0BC,SAA1B,EAAkDC,YAAlD,KAAoF;MAC/F,MAAM;QAAEC,QAAF;QAAYC;MAAZ,IAAqB,KAAKC,OAAhC;MACA,MAAM;QAAEC,KAAF;QAASC,QAAT;QAAmBC,SAAnB;QAA8BC,SAA9B;QAAyCC;MAAzC,IAAwD,KAAKC,KAAnE;MAEA,OAAOf,wBAAwB,CAAC;QAC9BgB,KAAK,EAAEZ,YADuB;QAE9BM,KAF8B;QAG9BC,QAH8B;QAI9BL,YAJ8B;QAK9BC,QAL8B;QAM9BC,IAN8B;QAO9BH,SAP8B;QAQ9BO,SAR8B;QAS9BE,UAT8B;QAU9BD;MAV8B,CAAD,CAA/B;IAYD,CApBsE;;IAAA,sCAsBvDI,MAAD,IAAgC;MAC7C,MAAM;QAAEC,MAAF;QAAUC;MAAV,IAAqB,KAAKJ,KAAhC;;MAEA,IAAI,CAACE,MAAD,IAAYC,MAAM,IAAIA,MAAM,CAACE,WAAP,KAAuBzB,iBAAiB,CAAC0B,MAAnE,EAA4E;QAC1E,OAAO,IAAP;MACD;;MAED,oBAAO,KAAC,UAAD;QAAY,IAAI,EAAEF,MAAlB;QAA0B,MAAM,EAAEF;MAAlC,GAA8CC,MAA9C,EAAP;IACD,CA9BsE;EAAA;;EAgCvEI,MAAM,GAAG;IACP,oBACE,KAAC,OAAD,oBACM,KAAKP,KADX;MAEE,UAAU,EAAE,KAAKQ,UAFnB;MAGE,WAAW,EAAEtB,WAHf;MAIE,YAAY,EAAE,KAAKuB;IAJrB,GADF;EAQD;;AAzCsE;;gBAA5DtB,kB,iBACUJ,gB;;AA2CvB,OAAO,MAAM2B,UAAU,GAAG7B,UAAU,CAACM,kBAAD,CAA7B;AACPuB,UAAU,CAACC,WAAX,GAAyB,YAAzB"},"metadata":{},"sourceType":"module"}