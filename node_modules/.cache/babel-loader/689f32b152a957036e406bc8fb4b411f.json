{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { Select } from '@grafana/ui';\nimport { Field } from '../Field';\nimport { setAggregation } from './setQueryValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst AggregationField = ({\n  query,\n  variableOptionGroup,\n  onQueryChange,\n  aggregationOptions,\n  isLoading\n}) => {\n  var _query$azureMonitor;\n\n  const handleChange = useCallback(change => {\n    if (!change.value) {\n      return;\n    }\n\n    const newQuery = setAggregation(query, change.value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query]);\n  const options = useMemo(() => [...aggregationOptions, variableOptionGroup], [aggregationOptions, variableOptionGroup]);\n  return /*#__PURE__*/_jsx(Field, {\n    label: \"Aggregation\",\n    children: /*#__PURE__*/_jsx(Select, {\n      inputId: \"azure-monitor-metrics-aggregation-field\",\n      value: (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.aggregation,\n      onChange: handleChange,\n      options: options,\n      width: 38,\n      isLoading: isLoading\n    })\n  });\n};\n\nexport default AggregationField;","map":{"version":3,"names":["React","useCallback","useMemo","Select","Field","setAggregation","AggregationField","query","variableOptionGroup","onQueryChange","aggregationOptions","isLoading","handleChange","change","value","newQuery","options","azureMonitor","aggregation"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/AggregationField.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { Field } from '../Field';\n\nimport { setAggregation } from './setQueryValue';\n\ninterface AggregationFieldProps extends AzureQueryEditorFieldProps {\n  aggregationOptions: AzureMonitorOption[];\n  isLoading: boolean;\n}\n\nconst AggregationField: React.FC<AggregationFieldProps> = ({\n  query,\n  variableOptionGroup,\n  onQueryChange,\n  aggregationOptions,\n  isLoading,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setAggregation(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = useMemo(\n    () => [...aggregationOptions, variableOptionGroup],\n    [aggregationOptions, variableOptionGroup]\n  );\n\n  return (\n    <Field label=\"Aggregation\">\n      <Select\n        inputId=\"azure-monitor-metrics-aggregation-field\"\n        value={query.azureMonitor?.aggregation}\n        onChange={handleChange}\n        options={options}\n        width={38}\n        isLoading={isLoading}\n      />\n    </Field>\n  );\n};\n\nexport default AggregationField;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAGA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,cAAT,QAA+B,iBAA/B;;;AAOA,MAAMC,gBAAiD,GAAG,CAAC;EACzDC,KADyD;EAEzDC,mBAFyD;EAGzDC,aAHyD;EAIzDC,kBAJyD;EAKzDC;AALyD,CAAD,KAMpD;EAAA;;EACJ,MAAMC,YAAY,GAAGX,WAAW,CAC7BY,MAAD,IAAqC;IACnC,IAAI,CAACA,MAAM,CAACC,KAAZ,EAAmB;MACjB;IACD;;IAED,MAAMC,QAAQ,GAAGV,cAAc,CAACE,KAAD,EAAQM,MAAM,CAACC,KAAf,CAA/B;IACAL,aAAa,CAACM,QAAD,CAAb;EACD,CAR6B,EAS9B,CAACN,aAAD,EAAgBF,KAAhB,CAT8B,CAAhC;EAYA,MAAMS,OAAO,GAAGd,OAAO,CACrB,MAAM,CAAC,GAAGQ,kBAAJ,EAAwBF,mBAAxB,CADe,EAErB,CAACE,kBAAD,EAAqBF,mBAArB,CAFqB,CAAvB;EAKA,oBACE,KAAC,KAAD;IAAO,KAAK,EAAC,aAAb;IAAA,uBACE,KAAC,MAAD;MACE,OAAO,EAAC,yCADV;MAEE,KAAK,yBAAED,KAAK,CAACU,YAAR,wDAAE,oBAAoBC,WAF7B;MAGE,QAAQ,EAAEN,YAHZ;MAIE,OAAO,EAAEI,OAJX;MAKE,KAAK,EAAE,EALT;MAME,SAAS,EAAEL;IANb;EADF,EADF;AAYD,CApCD;;AAsCA,eAAeL,gBAAf"},"metadata":{},"sourceType":"module"}