{"ast":null,"code":"import React from 'react';\nimport { EditorRow, EditorField } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { RadioButtonGroup, Select, AutoSizeInput } from '@grafana/ui';\nimport { QueryOptionGroup } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup';\nimport { preprocessMaxLines, queryTypeOptions, RESOLUTION_OPTIONS } from '../../components/LokiOptionFields';\nimport { isMetricsQuery } from '../../datasource';\nimport { LokiQueryType } from '../../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const LokiQueryBuilderOptions = /*#__PURE__*/React.memo(({\n  app,\n  query,\n  onChange,\n  onRunQuery\n}) => {\n  var _query$queryType, _query$maxLines$toStr, _query$maxLines;\n\n  const onQueryTypeChange = value => {\n    onChange(Object.assign({}, query, {\n      queryType: value\n    }));\n    onRunQuery();\n  };\n\n  const onResolutionChange = option => {\n    reportInteraction('grafana_loki_resolution_clicked', {\n      app,\n      resolution: option.value\n    });\n    onChange(Object.assign({}, query, {\n      resolution: option.value\n    }));\n    onRunQuery();\n  };\n\n  const onLegendFormatChanged = evt => {\n    onChange(Object.assign({}, query, {\n      legendFormat: evt.currentTarget.value\n    }));\n    onRunQuery();\n  };\n\n  function onMaxLinesChange(e) {\n    const newMaxLines = preprocessMaxLines(e.currentTarget.value);\n\n    if (query.maxLines !== newMaxLines) {\n      onChange(Object.assign({}, query, {\n        maxLines: newMaxLines\n      }));\n      onRunQuery();\n    }\n  }\n\n  let queryType = (_query$queryType = query.queryType) !== null && _query$queryType !== void 0 ? _query$queryType : query.instant ? LokiQueryType.Instant : LokiQueryType.Range;\n  let showMaxLines = !isMetricsQuery(query.expr);\n  return /*#__PURE__*/_jsx(EditorRow, {\n    children: /*#__PURE__*/_jsxs(QueryOptionGroup, {\n      title: \"Options\",\n      collapsedInfo: getCollapsedInfo(query, queryType, showMaxLines),\n      children: [/*#__PURE__*/_jsx(EditorField, {\n        label: \"Legend\",\n        tooltip: \"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\",\n        children: /*#__PURE__*/_jsx(AutoSizeInput, {\n          placeholder: \"{{label}}\",\n          id: \"loki-query-editor-legend-format\",\n          type: \"string\",\n          minWidth: 14,\n          defaultValue: query.legendFormat,\n          onCommitChange: onLegendFormatChanged\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Type\",\n        children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n          options: queryTypeOptions,\n          value: queryType,\n          onChange: onQueryTypeChange\n        })\n      }), showMaxLines && /*#__PURE__*/_jsx(EditorField, {\n        label: \"Line limit\",\n        tooltip: \"Upper limit for number of log lines returned by query.\",\n        children: /*#__PURE__*/_jsx(AutoSizeInput, {\n          className: \"width-4\",\n          placeholder: \"auto\",\n          type: \"number\",\n          min: 0,\n          defaultValue: (_query$maxLines$toStr = (_query$maxLines = query.maxLines) === null || _query$maxLines === void 0 ? void 0 : _query$maxLines.toString()) !== null && _query$maxLines$toStr !== void 0 ? _query$maxLines$toStr : '',\n          onCommitChange: onMaxLinesChange\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Resolution\",\n        children: /*#__PURE__*/_jsx(Select, {\n          isSearchable: false,\n          onChange: onResolutionChange,\n          options: RESOLUTION_OPTIONS,\n          value: query.resolution || 1,\n          \"aria-label\": \"Select resolution\"\n        })\n      })]\n    })\n  });\n});\n\nfunction getCollapsedInfo(query, queryType, showMaxLines) {\n  const queryTypeLabel = queryTypeOptions.find(x => x.value === queryType);\n  const resolutionLabel = RESOLUTION_OPTIONS.find(x => {\n    var _query$resolution;\n\n    return x.value === ((_query$resolution = query.resolution) !== null && _query$resolution !== void 0 ? _query$resolution : 1);\n  });\n  const items = [];\n\n  if (query.legendFormat) {\n    items.push(`Legend: ${query.legendFormat}`);\n  }\n\n  if (query.resolution) {\n    items.push(`Resolution: ${resolutionLabel === null || resolutionLabel === void 0 ? void 0 : resolutionLabel.label}`);\n  }\n\n  items.push(`Type: ${queryTypeLabel === null || queryTypeLabel === void 0 ? void 0 : queryTypeLabel.label}`);\n\n  if (showMaxLines && query.maxLines) {\n    items.push(`Line limit: ${query.maxLines}`);\n  }\n\n  return items;\n}\n\nLokiQueryBuilderOptions.displayName = 'LokiQueryBuilderOptions';","map":{"version":3,"names":["React","EditorRow","EditorField","reportInteraction","RadioButtonGroup","Select","AutoSizeInput","QueryOptionGroup","preprocessMaxLines","queryTypeOptions","RESOLUTION_OPTIONS","isMetricsQuery","LokiQueryType","LokiQueryBuilderOptions","memo","app","query","onChange","onRunQuery","onQueryTypeChange","value","queryType","onResolutionChange","option","resolution","onLegendFormatChanged","evt","legendFormat","currentTarget","onMaxLinesChange","e","newMaxLines","maxLines","instant","Instant","Range","showMaxLines","expr","getCollapsedInfo","toString","queryTypeLabel","find","x","resolutionLabel","items","push","label","displayName"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilderOptions.tsx"],"sourcesContent":["import React from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { EditorRow, EditorField } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { RadioButtonGroup, Select, AutoSizeInput } from '@grafana/ui';\nimport { QueryOptionGroup } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup';\n\nimport { preprocessMaxLines, queryTypeOptions, RESOLUTION_OPTIONS } from '../../components/LokiOptionFields';\nimport { isMetricsQuery } from '../../datasource';\nimport { LokiQuery, LokiQueryType } from '../../types';\n\nexport interface Props {\n  query: LokiQuery;\n  onChange: (update: LokiQuery) => void;\n  onRunQuery: () => void;\n  app?: CoreApp;\n}\n\nexport const LokiQueryBuilderOptions = React.memo<Props>(({ app, query, onChange, onRunQuery }) => {\n  const onQueryTypeChange = (value: LokiQueryType) => {\n    onChange({ ...query, queryType: value });\n    onRunQuery();\n  };\n\n  const onResolutionChange = (option: SelectableValue<number>) => {\n    reportInteraction('grafana_loki_resolution_clicked', {\n      app,\n      resolution: option.value,\n    });\n    onChange({ ...query, resolution: option.value });\n    onRunQuery();\n  };\n\n  const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, legendFormat: evt.currentTarget.value });\n    onRunQuery();\n  };\n\n  function onMaxLinesChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    const newMaxLines = preprocessMaxLines(e.currentTarget.value);\n    if (query.maxLines !== newMaxLines) {\n      onChange({ ...query, maxLines: newMaxLines });\n      onRunQuery();\n    }\n  }\n\n  let queryType = query.queryType ?? (query.instant ? LokiQueryType.Instant : LokiQueryType.Range);\n  let showMaxLines = !isMetricsQuery(query.expr);\n\n  return (\n    <EditorRow>\n      <QueryOptionGroup title=\"Options\" collapsedInfo={getCollapsedInfo(query, queryType, showMaxLines)}>\n        <EditorField\n          label=\"Legend\"\n          tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n        >\n          <AutoSizeInput\n            placeholder=\"{{label}}\"\n            id=\"loki-query-editor-legend-format\"\n            type=\"string\"\n            minWidth={14}\n            defaultValue={query.legendFormat}\n            onCommitChange={onLegendFormatChanged}\n          />\n        </EditorField>\n        <EditorField label=\"Type\">\n          <RadioButtonGroup options={queryTypeOptions} value={queryType} onChange={onQueryTypeChange} />\n        </EditorField>\n        {showMaxLines && (\n          <EditorField label=\"Line limit\" tooltip=\"Upper limit for number of log lines returned by query.\">\n            <AutoSizeInput\n              className=\"width-4\"\n              placeholder=\"auto\"\n              type=\"number\"\n              min={0}\n              defaultValue={query.maxLines?.toString() ?? ''}\n              onCommitChange={onMaxLinesChange}\n            />\n          </EditorField>\n        )}\n        <EditorField label=\"Resolution\">\n          <Select\n            isSearchable={false}\n            onChange={onResolutionChange}\n            options={RESOLUTION_OPTIONS}\n            value={query.resolution || 1}\n            aria-label=\"Select resolution\"\n          />\n        </EditorField>\n      </QueryOptionGroup>\n    </EditorRow>\n  );\n});\n\nfunction getCollapsedInfo(query: LokiQuery, queryType: LokiQueryType, showMaxLines: boolean): string[] {\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryType);\n  const resolutionLabel = RESOLUTION_OPTIONS.find((x) => x.value === (query.resolution ?? 1));\n\n  const items: string[] = [];\n\n  if (query.legendFormat) {\n    items.push(`Legend: ${query.legendFormat}`);\n  }\n\n  if (query.resolution) {\n    items.push(`Resolution: ${resolutionLabel?.label}`);\n  }\n\n  items.push(`Type: ${queryTypeLabel?.label}`);\n\n  if (showMaxLines && query.maxLines) {\n    items.push(`Line limit: ${query.maxLines}`);\n  }\n\n  return items;\n}\n\nLokiQueryBuilderOptions.displayName = 'LokiQueryBuilderOptions';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}