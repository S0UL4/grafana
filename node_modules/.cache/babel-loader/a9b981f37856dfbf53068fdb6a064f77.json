{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { getFieldDisplayName } from '../../field/fieldState';\nimport { DataTransformerID } from './ids';\nexport const renameFieldsTransformer = {\n  id: DataTransformerID.rename,\n  name: 'Rename fields by name',\n  description: 'Rename fields based on configuration given by user',\n  defaultOptions: {\n    renameByName: {}\n  },\n\n  /**\n   * Return a modified copy of the series.  If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: options => source => source.pipe(map(data => {\n    const renamer = createRenamer(options.renameByName);\n\n    if (!Array.isArray(data) || data.length === 0) {\n      return data;\n    }\n\n    return data.map(frame => Object.assign({}, frame, {\n      fields: renamer(frame)\n    }));\n  }))\n};\n\nconst createRenamer = renameByName => frame => {\n  if (!renameByName || Object.keys(renameByName).length === 0) {\n    return frame.fields;\n  }\n\n  return frame.fields.map(field => {\n    const displayName = getFieldDisplayName(field, frame);\n    const renameTo = renameByName[displayName];\n\n    if (typeof renameTo !== 'string' || renameTo.length === 0) {\n      return field;\n    }\n\n    return Object.assign({}, field, {\n      config: Object.assign({}, field.config, {\n        displayName: renameTo\n      }),\n      state: Object.assign({}, field.state, {\n        displayName: renameTo\n      })\n    });\n  });\n};","map":{"version":3,"names":["map","getFieldDisplayName","DataTransformerID","renameFieldsTransformer","id","rename","name","description","defaultOptions","renameByName","operator","options","source","pipe","data","renamer","createRenamer","Array","isArray","length","frame","fields","Object","keys","field","displayName","renameTo","config","state"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/transformers/rename.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { getFieldDisplayName } from '../../field/fieldState';\nimport { DataFrame, Field } from '../../types/dataFrame';\nimport { DataTransformerInfo } from '../../types/transformations';\n\nimport { DataTransformerID } from './ids';\n\nexport interface RenameFieldsTransformerOptions {\n  renameByName: Record<string, string>;\n}\n\nexport const renameFieldsTransformer: DataTransformerInfo<RenameFieldsTransformerOptions> = {\n  id: DataTransformerID.rename,\n  name: 'Rename fields by name',\n  description: 'Rename fields based on configuration given by user',\n  defaultOptions: {\n    renameByName: {},\n  },\n\n  /**\n   * Return a modified copy of the series.  If the transform is not or should not\n   * be applied, just return the input series\n   */\n  operator: (options) => (source) =>\n    source.pipe(\n      map((data) => {\n        const renamer = createRenamer(options.renameByName);\n\n        if (!Array.isArray(data) || data.length === 0) {\n          return data;\n        }\n\n        return data.map((frame) => ({\n          ...frame,\n          fields: renamer(frame),\n        }));\n      })\n    ),\n};\n\nconst createRenamer =\n  (renameByName: Record<string, string>) =>\n  (frame: DataFrame): Field[] => {\n    if (!renameByName || Object.keys(renameByName).length === 0) {\n      return frame.fields;\n    }\n\n    return frame.fields.map((field) => {\n      const displayName = getFieldDisplayName(field, frame);\n      const renameTo = renameByName[displayName];\n\n      if (typeof renameTo !== 'string' || renameTo.length === 0) {\n        return field;\n      }\n\n      return {\n        ...field,\n        config: {\n          ...field.config,\n          displayName: renameTo,\n        },\n        state: {\n          ...field.state,\n          displayName: renameTo,\n        },\n      };\n    });\n  };\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAEA,SAASC,mBAAT,QAAoC,wBAApC;AAIA,SAASC,iBAAT,QAAkC,OAAlC;AAMA,OAAO,MAAMC,uBAA4E,GAAG;EAC1FC,EAAE,EAAEF,iBAAiB,CAACG,MADoE;EAE1FC,IAAI,EAAE,uBAFoF;EAG1FC,WAAW,EAAE,oDAH6E;EAI1FC,cAAc,EAAE;IACdC,YAAY,EAAE;EADA,CAJ0E;;EAQ1F;AACF;AACA;AACA;EACEC,QAAQ,EAAGC,OAAD,IAAcC,MAAD,IACrBA,MAAM,CAACC,IAAP,CACEb,GAAG,CAAEc,IAAD,IAAU;IACZ,MAAMC,OAAO,GAAGC,aAAa,CAACL,OAAO,CAACF,YAAT,CAA7B;;IAEA,IAAI,CAACQ,KAAK,CAACC,OAAN,CAAcJ,IAAd,CAAD,IAAwBA,IAAI,CAACK,MAAL,KAAgB,CAA5C,EAA+C;MAC7C,OAAOL,IAAP;IACD;;IAED,OAAOA,IAAI,CAACd,GAAL,CAAUoB,KAAD,sBACXA,KADW;MAEdC,MAAM,EAAEN,OAAO,CAACK,KAAD;IAFD,EAAT,CAAP;EAID,CAXE,CADL;AAbwF,CAArF;;AA6BP,MAAMJ,aAAa,GAChBP,YAAD,IACCW,KAAD,IAA+B;EAC7B,IAAI,CAACX,YAAD,IAAiBa,MAAM,CAACC,IAAP,CAAYd,YAAZ,EAA0BU,MAA1B,KAAqC,CAA1D,EAA6D;IAC3D,OAAOC,KAAK,CAACC,MAAb;EACD;;EAED,OAAOD,KAAK,CAACC,MAAN,CAAarB,GAAb,CAAkBwB,KAAD,IAAW;IACjC,MAAMC,WAAW,GAAGxB,mBAAmB,CAACuB,KAAD,EAAQJ,KAAR,CAAvC;IACA,MAAMM,QAAQ,GAAGjB,YAAY,CAACgB,WAAD,CAA7B;;IAEA,IAAI,OAAOC,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,CAACP,MAAT,KAAoB,CAAxD,EAA2D;MACzD,OAAOK,KAAP;IACD;;IAED,yBACKA,KADL;MAEEG,MAAM,oBACDH,KAAK,CAACG,MADL;QAEJF,WAAW,EAAEC;MAFT,EAFR;MAMEE,KAAK,oBACAJ,KAAK,CAACI,KADN;QAEHH,WAAW,EAAEC;MAFV;IANP;EAWD,CAnBM,CAAP;AAoBD,CA3BH"},"metadata":{},"sourceType":"module"}