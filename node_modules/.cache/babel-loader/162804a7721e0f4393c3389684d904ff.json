{"ast":null,"code":"var _Spinner;\n\nconst _excluded = [\"text\", \"className\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useStyles } from '../../themes';\nimport { Spinner } from '../Spinner/Spinner';\n/**\n * @public\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/**\n * @public\n */\nexport const LoadingPlaceholder = _ref => {\n  let {\n    text,\n    className\n  } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const styles = useStyles(getStyles);\n  return /*#__PURE__*/_jsxs(\"div\", Object.assign({\n    className: cx(styles.container, className)\n  }, rest, {\n    children: [text, \" \", _Spinner || (_Spinner = /*#__PURE__*/_jsx(Spinner, {\n      inline: true\n    }))]\n  }));\n};\n\nconst getStyles = theme => {\n  return {\n    container: css`\n      margin-bottom: ${theme.spacing.xl};\n    `\n  };\n};","map":{"version":3,"names":["css","cx","React","useStyles","Spinner","LoadingPlaceholder","text","className","rest","styles","getStyles","container","theme","spacing","xl"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/LoadingPlaceholder/LoadingPlaceholder.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes, SFC } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { useStyles } from '../../themes';\nimport { Spinner } from '../Spinner/Spinner';\n\n/**\n * @public\n */\nexport interface LoadingPlaceholderProps extends HTMLAttributes<HTMLDivElement> {\n  text: React.ReactNode;\n}\n\n/**\n * @public\n */\nexport const LoadingPlaceholder: SFC<LoadingPlaceholderProps> = ({ text, className, ...rest }) => {\n  const styles = useStyles(getStyles);\n  return (\n    <div className={cx(styles.container, className)} {...rest}>\n      {text} <Spinner inline={true} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      margin-bottom: ${theme.spacing.xl};\n    `,\n  };\n};\n"],"mappings":";;;;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAA2C,OAA3C;AAIA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA,OAAO,MAAMC,kBAAgD,GAAG,QAAkC;EAAA,IAAjC;IAAEC,IAAF;IAAQC;EAAR,CAAiC;EAAA,IAAXC,IAAW;;EAChG,MAAMC,MAAM,GAAGN,SAAS,CAACO,SAAD,CAAxB;EACA,oBACE;IAAK,SAAS,EAAET,EAAE,CAACQ,MAAM,CAACE,SAAR,EAAmBJ,SAAnB;EAAlB,GAAqDC,IAArD;IAAA,WACGF,IADH,4CACS,KAAC,OAAD;MAAS,MAAM,EAAE;IAAjB,EADT;EAAA,GADF;AAKD,CAPM;;AASP,MAAMI,SAAS,GAAIE,KAAD,IAAyB;EACzC,OAAO;IACLD,SAAS,EAAEX,GAAI;AACnB,uBAAuBY,KAAK,CAACC,OAAN,CAAcC,EAAG;AACxC;EAHS,CAAP;AAKD,CAND"},"metadata":{},"sourceType":"module"}