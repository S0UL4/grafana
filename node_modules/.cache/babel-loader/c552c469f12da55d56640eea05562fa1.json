{"ast":null,"code":"import React from 'react';\n/** Returns the ID value of the first, and only, child element  */\n\nexport function getChildId(children) {\n  let inputId; // Get the first, and only, child to retrieve form input's id\n\n  const child = React.Children.only(children); // Retrieve input's id to apply on the label for correct click interaction\n  // For some components (like Select), we want to get the ID from a different prop\n\n  if ('id' in (child === null || child === void 0 ? void 0 : child.props)) {\n    inputId = child.props.id;\n  } else if ('inputId' in child.props) {\n    inputId = child === null || child === void 0 ? void 0 : child.props.inputId;\n  }\n\n  return typeof inputId === 'string' ? inputId : undefined;\n}\n/**\n * Given react node or function returns element accordingly\n *\n * @param itemToRender\n * @param props props to be passed to the function if item provided as such\n */\n\nexport function renderOrCallToRender(itemToRender, props) {\n  if ( /*#__PURE__*/React.isValidElement(itemToRender) || typeof itemToRender === 'string' || typeof itemToRender === 'number') {\n    return itemToRender;\n  }\n\n  if (typeof itemToRender === 'function') {\n    return itemToRender(props);\n  }\n\n  throw new Error(`${itemToRender} is not a React element nor a function that returns React element`);\n}","map":{"version":3,"names":["React","getChildId","children","inputId","child","Children","only","props","id","undefined","renderOrCallToRender","itemToRender","isValidElement","Error"],"sources":["/home/soula/grafana/packages/grafana-ui/src/utils/reactUtils.ts"],"sourcesContent":["import React, { ReactElement } from 'react';\n\n/** Returns the ID value of the first, and only, child element  */\nexport function getChildId(children: ReactElement): string | undefined {\n  let inputId: unknown;\n\n  // Get the first, and only, child to retrieve form input's id\n  const child = React.Children.only(children);\n\n  // Retrieve input's id to apply on the label for correct click interaction\n  // For some components (like Select), we want to get the ID from a different prop\n  if ('id' in child?.props) {\n    inputId = child.props.id;\n  } else if ('inputId' in child.props) {\n    inputId = child?.props.inputId;\n  }\n\n  return typeof inputId === 'string' ? inputId : undefined;\n}\n\n/**\n * Given react node or function returns element accordingly\n *\n * @param itemToRender\n * @param props props to be passed to the function if item provided as such\n */\nexport function renderOrCallToRender<TProps = any>(\n  itemToRender: ((props?: TProps) => React.ReactNode) | React.ReactNode,\n  props?: TProps\n): React.ReactNode {\n  if (React.isValidElement(itemToRender) || typeof itemToRender === 'string' || typeof itemToRender === 'number') {\n    return itemToRender;\n  }\n\n  if (typeof itemToRender === 'function') {\n    return itemToRender(props);\n  }\n\n  throw new Error(`${itemToRender} is not a React element nor a function that returns React element`);\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAoC,OAApC;AAEA;;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAAgE;EACrE,IAAIC,OAAJ,CADqE,CAGrE;;EACA,MAAMC,KAAK,GAAGJ,KAAK,CAACK,QAAN,CAAeC,IAAf,CAAoBJ,QAApB,CAAd,CAJqE,CAMrE;EACA;;EACA,IAAI,SAAQE,KAAR,aAAQA,KAAR,uBAAQA,KAAK,CAAEG,KAAf,CAAJ,EAA0B;IACxBJ,OAAO,GAAGC,KAAK,CAACG,KAAN,CAAYC,EAAtB;EACD,CAFD,MAEO,IAAI,aAAaJ,KAAK,CAACG,KAAvB,EAA8B;IACnCJ,OAAO,GAAGC,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEG,KAAP,CAAaJ,OAAvB;EACD;;EAED,OAAO,OAAOA,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCM,SAA/C;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CACLC,YADK,EAELJ,KAFK,EAGY;EACjB,IAAI,cAAAP,KAAK,CAACY,cAAN,CAAqBD,YAArB,KAAsC,OAAOA,YAAP,KAAwB,QAA9D,IAA0E,OAAOA,YAAP,KAAwB,QAAtG,EAAgH;IAC9G,OAAOA,YAAP;EACD;;EAED,IAAI,OAAOA,YAAP,KAAwB,UAA5B,EAAwC;IACtC,OAAOA,YAAY,CAACJ,KAAD,CAAnB;EACD;;EAED,MAAM,IAAIM,KAAJ,CAAW,GAAEF,YAAa,mEAA1B,CAAN;AACD"},"metadata":{},"sourceType":"module"}