{"ast":null,"code":"var _h, _Tooltip, _span, _LinkButton, _PageLoader, _th, _th2, _th3, _th4, _th5;\n\nimport { css, cx } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Alert, ConfirmModal, FilterInput, Icon, LinkButton, RadioButtonGroup, Tooltip, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, ServiceAccountStateFilter } from 'app/types';\nimport { CreateTokenModal } from './components/CreateTokenModal';\nimport ServiceAccountListItem from './components/ServiceAccountsListItem';\nimport { changeQuery, fetchACOptions, fetchServiceAccounts, deleteServiceAccount, updateServiceAccount, changeStateFilter, createServiceAccountToken, getApiKeysMigrationStatus, getApiKeysMigrationInfo, closeApiKeysMigrationInfo } from './state/actions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction mapStateToProps(state) {\n  return Object.assign({\n    navModel: getNavModel(state.navIndex, 'serviceaccounts')\n  }, state.serviceAccounts);\n}\n\nconst mapDispatchToProps = {\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport const ServiceAccountsListPageUnconnected = ({\n  navModel,\n  serviceAccounts,\n  isLoading,\n  roleOptions,\n  builtInRoles,\n  query,\n  serviceAccountStateFilter,\n  apiKeysMigrated,\n  showApiKeysMigrationInfo,\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo\n}) => {\n  const styles = useStyles2(getStyles);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n  const [newToken, setNewToken] = useState('');\n  const [currentServiceAccount, setCurrentServiceAccount] = useState(null);\n  useEffect(() => {\n    fetchServiceAccounts({\n      withLoadingIndicator: true\n    });\n    getApiKeysMigrationStatus();\n    getApiKeysMigrationInfo();\n\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [fetchACOptions, fetchServiceAccounts, getApiKeysMigrationStatus, getApiKeysMigrationInfo]);\n  const noServiceAccountsCreated = serviceAccounts.length === 0 && serviceAccountStateFilter === ServiceAccountStateFilter.All && !query;\n\n  const onRoleChange = async (role, serviceAccount) => {\n    const updatedServiceAccount = Object.assign({}, serviceAccount, {\n      role: role\n    });\n    updateServiceAccount(updatedServiceAccount);\n\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  };\n\n  const onQueryChange = value => {\n    changeQuery(value);\n  };\n\n  const onStateFilterChange = value => {\n    changeStateFilter(value);\n  };\n\n  const onRemoveButtonClick = serviceAccount => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsRemoveModalOpen(true);\n  };\n\n  const onServiceAccountRemove = async () => {\n    if (currentServiceAccount) {\n      deleteServiceAccount(currentServiceAccount.id);\n    }\n\n    onRemoveModalClose();\n  };\n\n  const onDisableButtonClick = serviceAccount => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsDisableModalOpen(true);\n  };\n\n  const onDisable = () => {\n    if (currentServiceAccount) {\n      updateServiceAccount(Object.assign({}, currentServiceAccount, {\n        isDisabled: true\n      }));\n    }\n\n    onDisableModalClose();\n  };\n\n  const onEnable = serviceAccount => {\n    updateServiceAccount(Object.assign({}, serviceAccount, {\n      isDisabled: false\n    }));\n  };\n\n  const onTokenAdd = serviceAccount => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsAddModalOpen(true);\n  };\n\n  const onTokenCreate = async token => {\n    if (currentServiceAccount) {\n      createServiceAccountToken(currentServiceAccount.id, token, setNewToken);\n    }\n  };\n\n  const onAddModalClose = () => {\n    setIsAddModalOpen(false);\n    setCurrentServiceAccount(null);\n    setNewToken('');\n  };\n\n  const onRemoveModalClose = () => {\n    setIsRemoveModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onDisableModalClose = () => {\n    setIsDisableModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onMigrationInfoClose = () => {\n    closeApiKeysMigrationInfo();\n  };\n\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      children: [apiKeysMigrated && showApiKeysMigrationInfo && /*#__PURE__*/_jsx(Alert, {\n        title: \"API keys migrated to Service accounts. Your keys are now called tokens and live inside respective service accounts. Learn more.\",\n        severity: \"success\",\n        onRemove: onMigrationInfoClose\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.pageHeader,\n        children: [_h || (_h = /*#__PURE__*/_jsx(\"h2\", {\n          children: \"Service accounts\"\n        })), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.apiKeyInfoLabel,\n          children: [_Tooltip || (_Tooltip = /*#__PURE__*/_jsx(Tooltip, {\n            placement: \"bottom\",\n            interactive: true,\n            content: /*#__PURE__*/_jsxs(_Fragment, {\n              children: [\"API keys are now service Accounts with tokens. \", /*#__PURE__*/_jsx(\"a\", {\n                href: \"\",\n                children: \"Read more\"\n              })]\n            }),\n            children: /*#__PURE__*/_jsx(Icon, {\n              name: \"question-circle\"\n            })\n          })), _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n            children: \"Looking for API keys?\"\n          }))]\n        }), !noServiceAccountsCreated && contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate) && (_LinkButton || (_LinkButton = /*#__PURE__*/_jsx(LinkButton, {\n          href: \"org/serviceaccounts/create\",\n          variant: \"primary\",\n          children: \"Add service account\"\n        })))]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.filterRow,\n        children: [/*#__PURE__*/_jsx(FilterInput, {\n          placeholder: \"Search service account by name\",\n          value: query,\n          onChange: onQueryChange,\n          width: 50\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.filterDelimiter\n        }), /*#__PURE__*/_jsx(RadioButtonGroup, {\n          options: [{\n            label: 'All',\n            value: ServiceAccountStateFilter.All\n          }, {\n            label: 'With expiring tokens',\n            value: ServiceAccountStateFilter.WithExpiredTokens\n          }, {\n            label: 'Disabled',\n            value: ServiceAccountStateFilter.Disabled\n          }],\n          onChange: onStateFilterChange,\n          value: serviceAccountStateFilter,\n          className: styles.filter\n        })]\n      }), isLoading && (_PageLoader || (_PageLoader = /*#__PURE__*/_jsx(PageLoader, {}))), !isLoading && noServiceAccountsCreated && /*#__PURE__*/_jsx(_Fragment, {\n        children: /*#__PURE__*/_jsx(EmptyListCTA, {\n          title: \"You haven't created any service accounts yet.\",\n          buttonIcon: \"key-skeleton-alt\",\n          buttonLink: \"org/serviceaccounts/create\",\n          buttonTitle: \"Add service account\",\n          buttonDisabled: !contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate),\n          proTip: \"Remember, you can provide specific permissions for API access to other applications.\",\n          proTipLink: \"\",\n          proTipLinkTitle: \"\",\n          proTipTarget: \"_blank\"\n        })\n      }), /*#__PURE__*/_jsx(_Fragment, {\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: cx(styles.table, 'admin-list-table'),\n          children: /*#__PURE__*/_jsxs(\"table\", {\n            className: \"filter-table filter-table--hover\",\n            children: [/*#__PURE__*/_jsx(\"thead\", {\n              children: /*#__PURE__*/_jsxs(\"tr\", {\n                children: [_th || (_th = /*#__PURE__*/_jsx(\"th\", {})), _th2 || (_th2 = /*#__PURE__*/_jsx(\"th\", {\n                  children: \"Account\"\n                })), _th3 || (_th3 = /*#__PURE__*/_jsx(\"th\", {\n                  children: \"ID\"\n                })), _th4 || (_th4 = /*#__PURE__*/_jsx(\"th\", {\n                  children: \"Roles\"\n                })), _th5 || (_th5 = /*#__PURE__*/_jsx(\"th\", {\n                  children: \"Tokens\"\n                })), /*#__PURE__*/_jsx(\"th\", {\n                  style: {\n                    width: '34px'\n                  }\n                })]\n              })\n            }), /*#__PURE__*/_jsx(\"tbody\", {\n              children: !isLoading && serviceAccounts.length !== 0 && serviceAccounts.map(serviceAccount => /*#__PURE__*/_jsx(ServiceAccountListItem, {\n                serviceAccount: serviceAccount,\n                builtInRoles: builtInRoles,\n                roleOptions: roleOptions,\n                onRoleChange: onRoleChange,\n                onRemoveButtonClick: onRemoveButtonClick,\n                onDisable: onDisableButtonClick,\n                onEnable: onEnable,\n                onAddTokenClick: onTokenAdd\n              }, serviceAccount.id))\n            })]\n          })\n        })\n      }), currentServiceAccount && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(ConfirmModal, {\n          isOpen: isRemoveModalOpen,\n          body: `Are you sure you want to delete '${currentServiceAccount.name}'${!!currentServiceAccount.tokens ? ` and ${currentServiceAccount.tokens} accompanying ${pluralize('token', currentServiceAccount.tokens)}` : ''}?`,\n          confirmText: \"Delete\",\n          title: \"Delete service account\",\n          onConfirm: onServiceAccountRemove,\n          onDismiss: onRemoveModalClose\n        }), /*#__PURE__*/_jsx(ConfirmModal, {\n          isOpen: isDisableModalOpen,\n          title: \"Disable service account\",\n          body: `Are you sure you want to disable '${currentServiceAccount.name}'?`,\n          confirmText: \"Disable service account\",\n          onConfirm: onDisable,\n          onDismiss: onDisableModalClose\n        }), /*#__PURE__*/_jsx(CreateTokenModal, {\n          isOpen: isAddModalOpen,\n          token: newToken,\n          serviceAccountLogin: currentServiceAccount.login,\n          onCreateToken: onTokenCreate,\n          onClose: onAddModalClose\n        })]\n      })]\n    })\n  });\n};\nexport const getStyles = theme => {\n  return {\n    table: css`\n      margin-top: ${theme.spacing(3)};\n    `,\n    filter: css`\n      margin: 0 ${theme.spacing(1)};\n    `,\n    row: css`\n      display: flex;\n      align-items: center;\n      height: 100% !important;\n\n      a {\n        padding: ${theme.spacing(0.5)} 0 !important;\n      }\n    `,\n    unitTooltip: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    unitItem: css`\n      cursor: pointer;\n      padding: ${theme.spacing(0.5)} 0;\n      margin-right: ${theme.spacing(1)};\n    `,\n    disabled: css`\n      color: ${theme.colors.text.disabled};\n    `,\n    link: css`\n      color: inherit;\n      cursor: pointer;\n      text-decoration: underline;\n    `,\n    pageHeader: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    apiKeyInfoLabel: css`\n      margin-left: ${theme.spacing(1)};\n      line-height: 2.2;\n      flex-grow: 1;\n      color: ${theme.colors.text.secondary};\n\n      span {\n        padding: ${theme.spacing(0.5)};\n      }\n    `,\n    filterRow: cx('page-action-bar', css`\n        display: flex;\n        justifycontent: flex-end;\n      `),\n    filterDelimiter: css`\n      flex-grow: 1;\n    `\n  };\n};\nconst ServiceAccountsListPage = connector(ServiceAccountsListPageUnconnected);\nexport default ServiceAccountsListPage;","map":{"version":3,"names":["css","cx","pluralize","React","useEffect","useState","connect","Alert","ConfirmModal","FilterInput","Icon","LinkButton","RadioButtonGroup","Tooltip","useStyles2","EmptyListCTA","Page","PageLoader","contextSrv","getNavModel","AccessControlAction","ServiceAccountStateFilter","CreateTokenModal","ServiceAccountListItem","changeQuery","fetchACOptions","fetchServiceAccounts","deleteServiceAccount","updateServiceAccount","changeStateFilter","createServiceAccountToken","getApiKeysMigrationStatus","getApiKeysMigrationInfo","closeApiKeysMigrationInfo","mapStateToProps","state","navModel","navIndex","serviceAccounts","mapDispatchToProps","connector","ServiceAccountsListPageUnconnected","isLoading","roleOptions","builtInRoles","query","serviceAccountStateFilter","apiKeysMigrated","showApiKeysMigrationInfo","styles","getStyles","isAddModalOpen","setIsAddModalOpen","isRemoveModalOpen","setIsRemoveModalOpen","isDisableModalOpen","setIsDisableModalOpen","newToken","setNewToken","currentServiceAccount","setCurrentServiceAccount","withLoadingIndicator","licensedAccessControlEnabled","noServiceAccountsCreated","length","All","onRoleChange","role","serviceAccount","updatedServiceAccount","onQueryChange","value","onStateFilterChange","onRemoveButtonClick","onServiceAccountRemove","id","onRemoveModalClose","onDisableButtonClick","onDisable","isDisabled","onDisableModalClose","onEnable","onTokenAdd","onTokenCreate","token","onAddModalClose","onMigrationInfoClose","pageHeader","apiKeyInfoLabel","hasPermission","ServiceAccountsCreate","filterRow","filterDelimiter","label","WithExpiredTokens","Disabled","filter","table","width","map","name","tokens","login","theme","spacing","row","unitTooltip","unitItem","disabled","colors","text","link","secondary","ServiceAccountsListPage"],"sources":["/home/soula/grafana/public/app/features/serviceaccounts/ServiceAccountsListPage.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { Alert, ConfirmModal, FilterInput, Icon, LinkButton, RadioButtonGroup, Tooltip, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState, ServiceAccountDTO, AccessControlAction, ServiceAccountStateFilter } from 'app/types';\n\nimport { CreateTokenModal, ServiceAccountToken } from './components/CreateTokenModal';\nimport ServiceAccountListItem from './components/ServiceAccountsListItem';\nimport {\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo,\n} from './state/actions';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'serviceaccounts'),\n    ...state.serviceAccounts,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const ServiceAccountsListPageUnconnected = ({\n  navModel,\n  serviceAccounts,\n  isLoading,\n  roleOptions,\n  builtInRoles,\n  query,\n  serviceAccountStateFilter,\n  apiKeysMigrated,\n  showApiKeysMigrationInfo,\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo,\n}: Props): JSX.Element => {\n  const styles = useStyles2(getStyles);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n  const [newToken, setNewToken] = useState('');\n  const [currentServiceAccount, setCurrentServiceAccount] = useState<ServiceAccountDTO | null>(null);\n\n  useEffect(() => {\n    fetchServiceAccounts({ withLoadingIndicator: true });\n    getApiKeysMigrationStatus();\n    getApiKeysMigrationInfo();\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [fetchACOptions, fetchServiceAccounts, getApiKeysMigrationStatus, getApiKeysMigrationInfo]);\n\n  const noServiceAccountsCreated =\n    serviceAccounts.length === 0 && serviceAccountStateFilter === ServiceAccountStateFilter.All && !query;\n\n  const onRoleChange = async (role: OrgRole, serviceAccount: ServiceAccountDTO) => {\n    const updatedServiceAccount = { ...serviceAccount, role: role };\n    updateServiceAccount(updatedServiceAccount);\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  };\n\n  const onQueryChange = (value: string) => {\n    changeQuery(value);\n  };\n\n  const onStateFilterChange = (value: ServiceAccountStateFilter) => {\n    changeStateFilter(value);\n  };\n\n  const onRemoveButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsRemoveModalOpen(true);\n  };\n\n  const onServiceAccountRemove = async () => {\n    if (currentServiceAccount) {\n      deleteServiceAccount(currentServiceAccount.id);\n    }\n    onRemoveModalClose();\n  };\n\n  const onDisableButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsDisableModalOpen(true);\n  };\n\n  const onDisable = () => {\n    if (currentServiceAccount) {\n      updateServiceAccount({ ...currentServiceAccount, isDisabled: true });\n    }\n    onDisableModalClose();\n  };\n\n  const onEnable = (serviceAccount: ServiceAccountDTO) => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: false });\n  };\n\n  const onTokenAdd = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsAddModalOpen(true);\n  };\n\n  const onTokenCreate = async (token: ServiceAccountToken) => {\n    if (currentServiceAccount) {\n      createServiceAccountToken(currentServiceAccount.id, token, setNewToken);\n    }\n  };\n\n  const onAddModalClose = () => {\n    setIsAddModalOpen(false);\n    setCurrentServiceAccount(null);\n    setNewToken('');\n  };\n\n  const onRemoveModalClose = () => {\n    setIsRemoveModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onDisableModalClose = () => {\n    setIsDisableModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onMigrationInfoClose = () => {\n    closeApiKeysMigrationInfo();\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {apiKeysMigrated && showApiKeysMigrationInfo && (\n          <Alert\n            title=\"API keys migrated to Service accounts. Your keys are now called tokens and live inside respective service\n          accounts. Learn more.\"\n            severity=\"success\"\n            onRemove={onMigrationInfoClose}\n          ></Alert>\n        )}\n        <div className={styles.pageHeader}>\n          <h2>Service accounts</h2>\n          <div className={styles.apiKeyInfoLabel}>\n            <Tooltip\n              placement=\"bottom\"\n              interactive\n              content={\n                <>\n                  API keys are now service Accounts with tokens. <a href=\"\">Read more</a>\n                </>\n              }\n            >\n              <Icon name=\"question-circle\" />\n            </Tooltip>\n            <span>Looking for API keys?</span>\n          </div>\n          {!noServiceAccountsCreated && contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate) && (\n            <LinkButton href=\"org/serviceaccounts/create\" variant=\"primary\">\n              Add service account\n            </LinkButton>\n          )}\n        </div>\n        <div className={styles.filterRow}>\n          <FilterInput placeholder=\"Search service account by name\" value={query} onChange={onQueryChange} width={50} />\n          <div className={styles.filterDelimiter}></div>\n          <RadioButtonGroup\n            options={[\n              { label: 'All', value: ServiceAccountStateFilter.All },\n              { label: 'With expiring tokens', value: ServiceAccountStateFilter.WithExpiredTokens },\n              { label: 'Disabled', value: ServiceAccountStateFilter.Disabled },\n            ]}\n            onChange={onStateFilterChange}\n            value={serviceAccountStateFilter}\n            className={styles.filter}\n          />\n        </div>\n        {isLoading && <PageLoader />}\n        {!isLoading && noServiceAccountsCreated && (\n          <>\n            <EmptyListCTA\n              title=\"You haven't created any service accounts yet.\"\n              buttonIcon=\"key-skeleton-alt\"\n              buttonLink=\"org/serviceaccounts/create\"\n              buttonTitle=\"Add service account\"\n              buttonDisabled={!contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate)}\n              proTip=\"Remember, you can provide specific permissions for API access to other applications.\"\n              proTipLink=\"\"\n              proTipLinkTitle=\"\"\n              proTipTarget=\"_blank\"\n            />\n          </>\n        )}\n\n        <>\n          <div className={cx(styles.table, 'admin-list-table')}>\n            <table className=\"filter-table filter-table--hover\">\n              <thead>\n                <tr>\n                  <th></th>\n                  <th>Account</th>\n                  <th>ID</th>\n                  <th>Roles</th>\n                  <th>Tokens</th>\n                  <th style={{ width: '34px' }} />\n                </tr>\n              </thead>\n              <tbody>\n                {!isLoading &&\n                  serviceAccounts.length !== 0 &&\n                  serviceAccounts.map((serviceAccount: ServiceAccountDTO) => (\n                    <ServiceAccountListItem\n                      serviceAccount={serviceAccount}\n                      key={serviceAccount.id}\n                      builtInRoles={builtInRoles}\n                      roleOptions={roleOptions}\n                      onRoleChange={onRoleChange}\n                      onRemoveButtonClick={onRemoveButtonClick}\n                      onDisable={onDisableButtonClick}\n                      onEnable={onEnable}\n                      onAddTokenClick={onTokenAdd}\n                    />\n                  ))}\n              </tbody>\n            </table>\n          </div>\n        </>\n        {currentServiceAccount && (\n          <>\n            <ConfirmModal\n              isOpen={isRemoveModalOpen}\n              body={`Are you sure you want to delete '${currentServiceAccount.name}'${\n                !!currentServiceAccount.tokens\n                  ? ` and ${currentServiceAccount.tokens} accompanying ${pluralize(\n                      'token',\n                      currentServiceAccount.tokens\n                    )}`\n                  : ''\n              }?`}\n              confirmText=\"Delete\"\n              title=\"Delete service account\"\n              onConfirm={onServiceAccountRemove}\n              onDismiss={onRemoveModalClose}\n            />\n            <ConfirmModal\n              isOpen={isDisableModalOpen}\n              title=\"Disable service account\"\n              body={`Are you sure you want to disable '${currentServiceAccount.name}'?`}\n              confirmText=\"Disable service account\"\n              onConfirm={onDisable}\n              onDismiss={onDisableModalClose}\n            />\n            <CreateTokenModal\n              isOpen={isAddModalOpen}\n              token={newToken}\n              serviceAccountLogin={currentServiceAccount.login}\n              onCreateToken={onTokenCreate}\n              onClose={onAddModalClose}\n            />\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    table: css`\n      margin-top: ${theme.spacing(3)};\n    `,\n    filter: css`\n      margin: 0 ${theme.spacing(1)};\n    `,\n    row: css`\n      display: flex;\n      align-items: center;\n      height: 100% !important;\n\n      a {\n        padding: ${theme.spacing(0.5)} 0 !important;\n      }\n    `,\n    unitTooltip: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    unitItem: css`\n      cursor: pointer;\n      padding: ${theme.spacing(0.5)} 0;\n      margin-right: ${theme.spacing(1)};\n    `,\n    disabled: css`\n      color: ${theme.colors.text.disabled};\n    `,\n    link: css`\n      color: inherit;\n      cursor: pointer;\n      text-decoration: underline;\n    `,\n    pageHeader: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    apiKeyInfoLabel: css`\n      margin-left: ${theme.spacing(1)};\n      line-height: 2.2;\n      flex-grow: 1;\n      color: ${theme.colors.text.secondary};\n\n      span {\n        padding: ${theme.spacing(0.5)};\n      }\n    `,\n    filterRow: cx(\n      'page-action-bar',\n      css`\n        display: flex;\n        justifycontent: flex-end;\n      `\n    ),\n    filterDelimiter: css`\n      flex-grow: 1;\n    `,\n  };\n};\n\nconst ServiceAccountsListPage = connector(ServiceAccountsListPageUnconnected);\nexport default ServiceAccountsListPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}