{"ast":null,"code":"import { OptionsPaneCategoryDescriptor } from '../OptionsPaneCategoryDescriptor';\nexport class OptionSearchEngine {\n  constructor(categories, overrides) {\n    this.categories = categories;\n    this.overrides = overrides;\n  }\n\n  search(query) {\n    const searchRegex = new RegExp(query, 'i');\n    const optionHits = this.collectHits(this.categories, searchRegex, []);\n    const sortedHits = optionHits.sort(compareHit).map(x => x.item);\n    const overrideHits = this.collectHits(this.overrides, searchRegex, []);\n    const sortedOverridesHits = overrideHits.sort(compareHit).map(x => x.item);\n    return {\n      optionHits: sortedHits,\n      overrideHits: this.buildOverrideHitCategories(sortedOverridesHits),\n      totalCount: this.getAllOptionsCount(this.categories)\n    };\n  }\n\n  collectHits(categories, searchRegex, hits) {\n    for (const category of categories) {\n      const categoryNameMatch = searchRegex.test(category.props.title);\n\n      for (const item of category.items) {\n        if (searchRegex.test(item.props.title)) {\n          hits.push({\n            item: item,\n            rank: 1\n          });\n          continue;\n        }\n\n        if (item.props.description && searchRegex.test(item.props.description)) {\n          hits.push({\n            item: item,\n            rank: 2\n          });\n          continue;\n        }\n\n        if (categoryNameMatch) {\n          hits.push({\n            item: item,\n            rank: 3\n          });\n        }\n      }\n\n      if (category.categories.length > 0) {\n        this.collectHits(category.categories, searchRegex, hits);\n      }\n    }\n\n    return hits;\n  }\n\n  getAllOptionsCount(categories) {\n    var total = 0;\n\n    for (const category of categories) {\n      total += category.items.length;\n\n      if (category.categories.length > 0) {\n        total += this.getAllOptionsCount(category.categories);\n      }\n    }\n\n    return total;\n  }\n\n  buildOverrideHitCategories(hits) {\n    const categories = {};\n\n    for (const hit of hits) {\n      let category = categories[hit.parent.props.title];\n\n      if (!category) {\n        category = categories[hit.parent.props.title] = new OptionsPaneCategoryDescriptor(hit.parent.props); // Add matcher item as that should always be shown\n\n        category.addItem(hit.parent.items[0]);\n      } // Prevent adding matcher twice since it's automatically added for every override\n\n\n      if (category.items[0].props.title !== hit.props.title) {\n        category.addItem(hit);\n      }\n    }\n\n    return Object.values(categories);\n  }\n\n}\n\nfunction compareHit(left, right) {\n  return left.rank - right.rank;\n}","map":{"version":3,"names":["OptionsPaneCategoryDescriptor","OptionSearchEngine","constructor","categories","overrides","search","query","searchRegex","RegExp","optionHits","collectHits","sortedHits","sort","compareHit","map","x","item","overrideHits","sortedOverridesHits","buildOverrideHitCategories","totalCount","getAllOptionsCount","hits","category","categoryNameMatch","test","props","title","items","push","rank","description","length","total","hit","parent","addItem","Object","values","left","right"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/state/OptionSearchEngine.ts"],"sourcesContent":["import { OptionsPaneCategoryDescriptor } from '../OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from '../OptionsPaneItemDescriptor';\n\nexport interface OptionSearchResults {\n  optionHits: OptionsPaneItemDescriptor[];\n  overrideHits: OptionsPaneCategoryDescriptor[];\n  totalCount: number;\n}\n\nexport class OptionSearchEngine {\n  constructor(\n    private categories: OptionsPaneCategoryDescriptor[],\n    private overrides: OptionsPaneCategoryDescriptor[]\n  ) {}\n\n  search(query: string): OptionSearchResults {\n    const searchRegex = new RegExp(query, 'i');\n\n    const optionHits = this.collectHits(this.categories, searchRegex, []);\n    const sortedHits = optionHits.sort(compareHit).map((x) => x.item);\n\n    const overrideHits = this.collectHits(this.overrides, searchRegex, []);\n    const sortedOverridesHits = overrideHits.sort(compareHit).map((x) => x.item);\n\n    return {\n      optionHits: sortedHits,\n      overrideHits: this.buildOverrideHitCategories(sortedOverridesHits),\n      totalCount: this.getAllOptionsCount(this.categories),\n    };\n  }\n\n  private collectHits(categories: OptionsPaneCategoryDescriptor[], searchRegex: RegExp, hits: SearchHit[]) {\n    for (const category of categories) {\n      const categoryNameMatch = searchRegex.test(category.props.title);\n\n      for (const item of category.items) {\n        if (searchRegex.test(item.props.title)) {\n          hits.push({ item: item, rank: 1 });\n          continue;\n        }\n        if (item.props.description && searchRegex.test(item.props.description)) {\n          hits.push({ item: item, rank: 2 });\n          continue;\n        }\n        if (categoryNameMatch) {\n          hits.push({ item: item, rank: 3 });\n        }\n      }\n\n      if (category.categories.length > 0) {\n        this.collectHits(category.categories, searchRegex, hits);\n      }\n    }\n\n    return hits;\n  }\n\n  getAllOptionsCount(categories: OptionsPaneCategoryDescriptor[]) {\n    var total = 0;\n\n    for (const category of categories) {\n      total += category.items.length;\n\n      if (category.categories.length > 0) {\n        total += this.getAllOptionsCount(category.categories);\n      }\n    }\n\n    return total;\n  }\n\n  buildOverrideHitCategories(hits: OptionsPaneItemDescriptor[]): OptionsPaneCategoryDescriptor[] {\n    const categories: Record<string, OptionsPaneCategoryDescriptor> = {};\n\n    for (const hit of hits) {\n      let category = categories[hit.parent.props.title];\n\n      if (!category) {\n        category = categories[hit.parent.props.title] = new OptionsPaneCategoryDescriptor(hit.parent.props);\n        // Add matcher item as that should always be shown\n        category.addItem(hit.parent.items[0]);\n      }\n\n      // Prevent adding matcher twice since it's automatically added for every override\n      if (category.items[0].props.title !== hit.props.title) {\n        category.addItem(hit);\n      }\n    }\n\n    return Object.values(categories);\n  }\n}\n\ninterface SearchHit {\n  item: OptionsPaneItemDescriptor;\n  rank: number;\n}\n\nfunction compareHit(left: SearchHit, right: SearchHit) {\n  return left.rank - right.rank;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}