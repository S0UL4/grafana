{"ast":null,"code":"/* eslint-disable id-blacklist, no-restricted-imports, @typescript-eslint/ban-types */\nimport moment from 'moment-timezone';\nimport { getTimeZone } from './common';\nimport { systemDateFormats } from './formats';\n\n/**\n * Helper function to format date and time according to the specified options. If no options\n * are supplied, then default values are used. For more details, see {@link DateTimeOptionsWithFormat}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const dateTimeFormat = (dateInUtc, options) => toTz(dateInUtc, getTimeZone(options)).format(getFormat(options));\n/**\n * Helper function to format date and time according to the standard ISO format e.g. 2013-02-04T22:44:30.652Z.\n * If no options are supplied, then default values are used. For more details, see {@link DateTimeOptionsWithFormat}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\n\nexport const dateTimeFormatISO = (dateInUtc, options) => toTz(dateInUtc, getTimeZone(options)).format();\n/**\n * Helper function to return elapsed time since passed date. The returned value will be formatted\n * in a human readable format e.g. 4 years ago. If no options are supplied, then default values are used.\n * For more details, see {@link DateTimeOptions}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\n\nexport const dateTimeFormatTimeAgo = (dateInUtc, options) => toTz(dateInUtc, getTimeZone(options)).fromNow();\n/**\n * Helper function to format date and time according to the Grafana default formatting, but it\n * also appends the time zone abbreviation at the end e.g. 2020-05-20 13:37:00 CET. If no options\n * are supplied, then default values are used. For more details please see {@link DateTimeOptions}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\n\nexport const dateTimeFormatWithAbbrevation = (dateInUtc, options) => toTz(dateInUtc, getTimeZone(options)).format(`${systemDateFormats.fullDate} z`);\n/**\n * Helper function to return only the time zone abbreviation for a given date and time value. If no options\n * are supplied, then default values are used. For more details please see {@link DateTimeOptions}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\n\nexport const timeZoneAbbrevation = (dateInUtc, options) => toTz(dateInUtc, getTimeZone(options)).format('z');\n\nconst getFormat = options => {\n  var _options$format2;\n\n  if (options !== null && options !== void 0 && options.defaultWithMS) {\n    var _options$format;\n\n    return (_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : systemDateFormats.fullDateMS;\n  }\n\n  return (_options$format2 = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format2 !== void 0 ? _options$format2 : systemDateFormats.fullDate;\n};\n\nconst toTz = (dateInUtc, timeZone) => {\n  const date = dateInUtc;\n  const zone = moment.tz.zone(timeZone);\n\n  if (zone && zone.name) {\n    return moment.utc(date).tz(zone.name);\n  }\n\n  switch (timeZone) {\n    case 'utc':\n      return moment.utc(date);\n\n    default:\n      return moment.utc(date).local();\n  }\n};","map":{"version":3,"names":["moment","getTimeZone","systemDateFormats","dateTimeFormat","dateInUtc","options","toTz","format","getFormat","dateTimeFormatISO","dateTimeFormatTimeAgo","fromNow","dateTimeFormatWithAbbrevation","fullDate","timeZoneAbbrevation","defaultWithMS","fullDateMS","timeZone","date","zone","tz","name","utc","local"],"sources":["/home/soula/grafana/packages/grafana-data/src/datetime/formatter.ts"],"sourcesContent":["/* eslint-disable id-blacklist, no-restricted-imports, @typescript-eslint/ban-types */\nimport moment, { MomentInput, Moment } from 'moment-timezone';\n\nimport { TimeZone } from '../types';\n\nimport { DateTimeOptions, getTimeZone } from './common';\nimport { systemDateFormats } from './formats';\nimport { DateTimeInput } from './moment_wrapper';\n\n/**\n * The type describing the options that can be passed to the {@link dateTimeFormat}\n * helper function to control how the date and time value passed to the function is\n * formatted.\n *\n * @public\n */\nexport interface DateTimeOptionsWithFormat extends DateTimeOptions {\n  /**\n   * Set this value to `true` if you want to include milliseconds when formatting date and time\n   */\n  defaultWithMS?: boolean;\n}\n\ntype DateTimeFormatter<T extends DateTimeOptions = DateTimeOptions> = (dateInUtc: DateTimeInput, options?: T) => string;\n\n/**\n * Helper function to format date and time according to the specified options. If no options\n * are supplied, then default values are used. For more details, see {@link DateTimeOptionsWithFormat}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const dateTimeFormat: DateTimeFormatter<DateTimeOptionsWithFormat> = (dateInUtc, options?) =>\n  toTz(dateInUtc, getTimeZone(options)).format(getFormat(options));\n\n/**\n * Helper function to format date and time according to the standard ISO format e.g. 2013-02-04T22:44:30.652Z.\n * If no options are supplied, then default values are used. For more details, see {@link DateTimeOptionsWithFormat}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const dateTimeFormatISO: DateTimeFormatter = (dateInUtc, options?) =>\n  toTz(dateInUtc, getTimeZone(options)).format();\n\n/**\n * Helper function to return elapsed time since passed date. The returned value will be formatted\n * in a human readable format e.g. 4 years ago. If no options are supplied, then default values are used.\n * For more details, see {@link DateTimeOptions}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const dateTimeFormatTimeAgo: DateTimeFormatter = (dateInUtc, options?) =>\n  toTz(dateInUtc, getTimeZone(options)).fromNow();\n\n/**\n * Helper function to format date and time according to the Grafana default formatting, but it\n * also appends the time zone abbreviation at the end e.g. 2020-05-20 13:37:00 CET. If no options\n * are supplied, then default values are used. For more details please see {@link DateTimeOptions}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const dateTimeFormatWithAbbrevation: DateTimeFormatter = (dateInUtc, options?) =>\n  toTz(dateInUtc, getTimeZone(options)).format(`${systemDateFormats.fullDate} z`);\n\n/**\n * Helper function to return only the time zone abbreviation for a given date and time value. If no options\n * are supplied, then default values are used. For more details please see {@link DateTimeOptions}.\n *\n * @param dateInUtc - date in UTC format, e.g. string formatted with UTC offset, UNIX epoch in seconds etc.\n * @param options\n *\n * @public\n */\nexport const timeZoneAbbrevation: DateTimeFormatter = (dateInUtc, options?) =>\n  toTz(dateInUtc, getTimeZone(options)).format('z');\n\nconst getFormat = <T extends DateTimeOptionsWithFormat>(options?: T): string => {\n  if (options?.defaultWithMS) {\n    return options?.format ?? systemDateFormats.fullDateMS;\n  }\n  return options?.format ?? systemDateFormats.fullDate;\n};\n\nconst toTz = (dateInUtc: DateTimeInput, timeZone: TimeZone): Moment => {\n  const date = dateInUtc as MomentInput;\n  const zone = moment.tz.zone(timeZone);\n\n  if (zone && zone.name) {\n    return moment.utc(date).tz(zone.name);\n  }\n\n  switch (timeZone) {\n    case 'utc':\n      return moment.utc(date);\n    default:\n      return moment.utc(date).local();\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAA4C,iBAA5C;AAIA,SAA0BC,WAA1B,QAA6C,UAA7C;AACA,SAASC,iBAAT,QAAkC,WAAlC;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAA4D,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAC1EC,IAAI,CAACF,SAAD,EAAYH,WAAW,CAACI,OAAD,CAAvB,CAAJ,CAAsCE,MAAtC,CAA6CC,SAAS,CAACH,OAAD,CAAtD,CADK;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,iBAAoC,GAAG,CAACL,SAAD,EAAYC,OAAZ,KAClDC,IAAI,CAACF,SAAD,EAAYH,WAAW,CAACI,OAAD,CAAvB,CAAJ,CAAsCE,MAAtC,EADK;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,qBAAwC,GAAG,CAACN,SAAD,EAAYC,OAAZ,KACtDC,IAAI,CAACF,SAAD,EAAYH,WAAW,CAACI,OAAD,CAAvB,CAAJ,CAAsCM,OAAtC,EADK;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,6BAAgD,GAAG,CAACR,SAAD,EAAYC,OAAZ,KAC9DC,IAAI,CAACF,SAAD,EAAYH,WAAW,CAACI,OAAD,CAAvB,CAAJ,CAAsCE,MAAtC,CAA8C,GAAEL,iBAAiB,CAACW,QAAS,IAA3E,CADK;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,mBAAsC,GAAG,CAACV,SAAD,EAAYC,OAAZ,KACpDC,IAAI,CAACF,SAAD,EAAYH,WAAW,CAACI,OAAD,CAAvB,CAAJ,CAAsCE,MAAtC,CAA6C,GAA7C,CADK;;AAGP,MAAMC,SAAS,GAAyCH,OAAtC,IAA8D;EAAA;;EAC9E,IAAIA,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEU,aAAb,EAA4B;IAAA;;IAC1B,0BAAOV,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEE,MAAhB,6DAA0BL,iBAAiB,CAACc,UAA5C;EACD;;EACD,2BAAOX,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEE,MAAhB,+DAA0BL,iBAAiB,CAACW,QAA5C;AACD,CALD;;AAOA,MAAMP,IAAI,GAAG,CAACF,SAAD,EAA2Ba,QAA3B,KAA0D;EACrE,MAAMC,IAAI,GAAGd,SAAb;EACA,MAAMe,IAAI,GAAGnB,MAAM,CAACoB,EAAP,CAAUD,IAAV,CAAeF,QAAf,CAAb;;EAEA,IAAIE,IAAI,IAAIA,IAAI,CAACE,IAAjB,EAAuB;IACrB,OAAOrB,MAAM,CAACsB,GAAP,CAAWJ,IAAX,EAAiBE,EAAjB,CAAoBD,IAAI,CAACE,IAAzB,CAAP;EACD;;EAED,QAAQJ,QAAR;IACE,KAAK,KAAL;MACE,OAAOjB,MAAM,CAACsB,GAAP,CAAWJ,IAAX,CAAP;;IACF;MACE,OAAOlB,MAAM,CAACsB,GAAP,CAAWJ,IAAX,EAAiBK,KAAjB,EAAP;EAJJ;AAMD,CAdD"},"metadata":{},"sourceType":"module"}