{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { rangeUtil } from '@grafana/data';\nimport { ALIGNMENTS } from '../constants';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const AlignmentPeriodLabel = ({\n  customMetaData,\n  datasource\n}) => {\n  const {\n    perSeriesAligner,\n    alignmentPeriod\n  } = customMetaData;\n  const formatAlignmentText = useMemo(() => {\n    var _alignment$text;\n\n    if (!alignmentPeriod || !perSeriesAligner) {\n      return '';\n    }\n\n    const alignment = ALIGNMENTS.find(ap => ap.value === datasource.templateSrv.replace(perSeriesAligner));\n    const seconds = parseInt(alignmentPeriod !== null && alignmentPeriod !== void 0 ? alignmentPeriod : ''.replace(/[^0-9]/g, ''), 10);\n    const hms = rangeUtil.secondsToHms(seconds);\n    return `${hms} interval (${(_alignment$text = alignment === null || alignment === void 0 ? void 0 : alignment.text) !== null && _alignment$text !== void 0 ? _alignment$text : ''})`;\n  }, [datasource, perSeriesAligner, alignmentPeriod]);\n  return /*#__PURE__*/_jsx(\"label\", {\n    children: formatAlignmentText\n  });\n};","map":{"version":3,"names":["React","useMemo","rangeUtil","ALIGNMENTS","AlignmentPeriodLabel","customMetaData","datasource","perSeriesAligner","alignmentPeriod","formatAlignmentText","alignment","find","ap","value","templateSrv","replace","seconds","parseInt","hms","secondsToHms","text"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/AlignmentPeriodLabel.tsx"],"sourcesContent":["import React, { FC, useMemo } from 'react';\n\nimport { rangeUtil } from '@grafana/data';\n\nimport { ALIGNMENTS } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { CustomMetaData } from '../types';\n\nexport interface Props {\n  customMetaData: CustomMetaData;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const AlignmentPeriodLabel: FC<Props> = ({ customMetaData, datasource }) => {\n  const { perSeriesAligner, alignmentPeriod } = customMetaData;\n  const formatAlignmentText = useMemo(() => {\n    if (!alignmentPeriod || !perSeriesAligner) {\n      return '';\n    }\n\n    const alignment = ALIGNMENTS.find((ap) => ap.value === datasource.templateSrv.replace(perSeriesAligner));\n    const seconds = parseInt(alignmentPeriod ?? ''.replace(/[^0-9]/g, ''), 10);\n    const hms = rangeUtil.secondsToHms(seconds);\n    return `${hms} interval (${alignment?.text ?? ''})`;\n  }, [datasource, perSeriesAligner, alignmentPeriod]);\n\n  return <label>{formatAlignmentText}</label>;\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AAEA,SAASC,SAAT,QAA0B,eAA1B;AAEA,SAASC,UAAT,QAA2B,cAA3B;;AASA,OAAO,MAAMC,oBAA+B,GAAG,CAAC;EAAEC,cAAF;EAAkBC;AAAlB,CAAD,KAAoC;EACjF,MAAM;IAAEC,gBAAF;IAAoBC;EAApB,IAAwCH,cAA9C;EACA,MAAMI,mBAAmB,GAAGR,OAAO,CAAC,MAAM;IAAA;;IACxC,IAAI,CAACO,eAAD,IAAoB,CAACD,gBAAzB,EAA2C;MACzC,OAAO,EAAP;IACD;;IAED,MAAMG,SAAS,GAAGP,UAAU,CAACQ,IAAX,CAAiBC,EAAD,IAAQA,EAAE,CAACC,KAAH,KAAaP,UAAU,CAACQ,WAAX,CAAuBC,OAAvB,CAA+BR,gBAA/B,CAArC,CAAlB;IACA,MAAMS,OAAO,GAAGC,QAAQ,CAACT,eAAD,aAACA,eAAD,cAACA,eAAD,GAAoB,GAAGO,OAAH,CAAW,SAAX,EAAsB,EAAtB,CAApB,EAA+C,EAA/C,CAAxB;IACA,MAAMG,GAAG,GAAGhB,SAAS,CAACiB,YAAV,CAAuBH,OAAvB,CAAZ;IACA,OAAQ,GAAEE,GAAI,cAAP,mBAAoBR,SAApB,aAAoBA,SAApB,uBAAoBA,SAAS,CAAEU,IAA/B,6DAAuC,EAAG,GAAjD;EACD,CATkC,EAShC,CAACd,UAAD,EAAaC,gBAAb,EAA+BC,eAA/B,CATgC,CAAnC;EAWA,oBAAO;IAAA,UAAQC;EAAR,EAAP;AACD,CAdM"},"metadata":{},"sourceType":"module"}