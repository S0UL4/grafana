{"ast":null,"code":"var _div, _Icon, _br, _div2, _Spinner;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { AppEvents } from '@grafana/data';\nimport { getBackendSrv, reportInteraction } from '@grafana/runtime';\nimport { Button, ClipboardButton, Field, Icon, Input, LinkButton, Modal, Select, Spinner } from '@grafana/ui';\nimport { appEvents } from 'app/core/core';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { VariableRefresh } from '../../../variables/types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst snapshotApiUrl = '/api/snapshots';\nconst expireOptions = [{\n  label: 'Never',\n  value: 0\n}, {\n  label: '1 Hour',\n  value: 60 * 60\n}, {\n  label: '1 Day',\n  value: 60 * 60 * 24\n}, {\n  label: '7 Days',\n  value: 60 * 60 * 24 * 7\n}];\nexport class ShareSnapshot extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"dashboard\", void 0);\n\n    _defineProperty(this, \"createSnapshot\", external => () => {\n      const {\n        timeoutSeconds\n      } = this.state;\n      this.dashboard.snapshot = {\n        timestamp: new Date()\n      };\n\n      if (!external) {\n        this.dashboard.snapshot.originalUrl = window.location.href;\n      }\n\n      this.setState({\n        isLoading: true\n      });\n      this.dashboard.startRefresh();\n      setTimeout(() => {\n        this.saveSnapshot(this.dashboard, external);\n      }, timeoutSeconds * 1000);\n    });\n\n    _defineProperty(this, \"saveSnapshot\", async (dashboard, external) => {\n      const {\n        snapshotExpires\n      } = this.state;\n      const dash = this.dashboard.getSaveModelClone();\n      this.scrubDashboard(dash);\n      const cmdData = {\n        dashboard: dash,\n        name: dash.title,\n        expires: snapshotExpires,\n        external: external\n      };\n\n      try {\n        const results = await getBackendSrv().post(snapshotApiUrl, cmdData);\n        this.setState({\n          deleteUrl: results.deleteUrl,\n          snapshotUrl: results.url,\n          step: 2\n        });\n      } finally {\n        reportInteraction('grafana_dashboards_snapshot_created', {\n          location: external ? 'raintank' : 'local'\n        });\n        this.setState({\n          isLoading: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"scrubDashboard\", dash => {\n      const {\n        panel\n      } = this.props;\n      const {\n        snapshotName\n      } = this.state; // change title\n\n      dash.title = snapshotName; // make relative times absolute\n\n      dash.time = getTimeSrv().timeRange(); // Remove links\n\n      dash.links = []; // remove panel queries & links\n\n      dash.panels.forEach(panel => {\n        panel.targets = [];\n        panel.links = [];\n        panel.datasource = null;\n      }); // remove annotation queries\n\n      const annotations = dash.annotations.list.filter(annotation => annotation.enable);\n      dash.annotations.list = annotations.map(annotation => {\n        return {\n          name: annotation.name,\n          enable: annotation.enable,\n          iconColor: annotation.iconColor,\n          snapshotData: annotation.snapshotData,\n          type: annotation.type,\n          builtIn: annotation.builtIn,\n          hide: annotation.hide\n        };\n      }); // remove template queries\n\n      dash.getVariables().forEach(variable => {\n        variable.query = '';\n        variable.options = variable.current ? [variable.current] : [];\n        variable.refresh = VariableRefresh.never;\n      }); // snapshot single panel\n\n      if (panel) {\n        const singlePanel = panel.getSaveModel();\n        singlePanel.gridPos.w = 24;\n        singlePanel.gridPos.x = 0;\n        singlePanel.gridPos.y = 0;\n        singlePanel.gridPos.h = 20;\n        dash.panels = [singlePanel];\n      } // cleanup snapshotData\n\n\n      delete this.dashboard.snapshot;\n      this.dashboard.forEachPanel(panel => {\n        delete panel.snapshotData;\n      });\n      this.dashboard.annotations.list.forEach(annotation => {\n        delete annotation.snapshotData;\n      });\n    });\n\n    _defineProperty(this, \"deleteSnapshot\", async () => {\n      const {\n        deleteUrl\n      } = this.state;\n      await getBackendSrv().get(deleteUrl);\n      this.setState({\n        step: 3\n      });\n    });\n\n    _defineProperty(this, \"getSnapshotUrl\", () => {\n      return this.state.snapshotUrl;\n    });\n\n    _defineProperty(this, \"onSnapshotNameChange\", event => {\n      this.setState({\n        snapshotName: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onTimeoutChange\", event => {\n      this.setState({\n        timeoutSeconds: Number(event.target.value)\n      });\n    });\n\n    _defineProperty(this, \"onExpireChange\", option => {\n      this.setState({\n        selectedExpireOption: option,\n        snapshotExpires: option.value\n      });\n    });\n\n    _defineProperty(this, \"onSnapshotUrlCopy\", () => {\n      appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n    });\n\n    this.dashboard = props.dashboard;\n    this.state = {\n      isLoading: false,\n      step: 1,\n      selectedExpireOption: expireOptions[0],\n      snapshotExpires: expireOptions[0].value,\n      snapshotName: props.dashboard.title,\n      timeoutSeconds: 4,\n      snapshotUrl: '',\n      deleteUrl: '',\n      externalEnabled: false,\n      sharingButtonText: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getSnaphotShareOptions();\n  }\n\n  async getSnaphotShareOptions() {\n    const shareOptions = await getBackendSrv().get('/api/snapshot/shared-options');\n    this.setState({\n      sharingButtonText: shareOptions['externalSnapshotName'],\n      externalEnabled: shareOptions['externalEnabled']\n    });\n  }\n\n  renderStep1() {\n    const {\n      onDismiss\n    } = this.props;\n    const {\n      snapshotName,\n      selectedExpireOption,\n      timeoutSeconds,\n      isLoading,\n      sharingButtonText,\n      externalEnabled\n    } = this.state;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          className: \"share-modal-info-text\",\n          children: \"A snapshot is an instant way to share an interactive dashboard publicly. When created, we strip sensitive data like queries (metric, template, and annotation) and panel links, leaving only the visible metric data and series names embedded in your dashboard.\"\n        }), /*#__PURE__*/_jsxs(\"p\", {\n          className: \"share-modal-info-text\",\n          children: [\"Keep in mind, your snapshot \", /*#__PURE__*/_jsx(\"em\", {\n            children: \"can be viewed by anyone\"\n          }), \" that has the link and can access the URL. Share wisely.\"]\n        })]\n      })), /*#__PURE__*/_jsx(Field, {\n        label: \"Snapshot name\",\n        children: /*#__PURE__*/_jsx(Input, {\n          id: \"snapshot-name-input\",\n          width: 30,\n          value: snapshotName,\n          onChange: this.onSnapshotNameChange\n        })\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Expire\",\n        children: /*#__PURE__*/_jsx(Select, {\n          inputId: \"expire-select-input\",\n          width: 30,\n          options: expireOptions,\n          value: selectedExpireOption,\n          onChange: this.onExpireChange\n        })\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Timeout (seconds)\",\n        description: \"You might need to configure the timeout value if it takes a long time to collect your dashboard metrics.\",\n        children: /*#__PURE__*/_jsx(Input, {\n          id: \"timeout-input\",\n          type: \"number\",\n          width: 21,\n          value: timeoutSeconds,\n          onChange: this.onTimeoutChange\n        })\n      }), /*#__PURE__*/_jsxs(Modal.ButtonRow, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: onDismiss,\n          fill: \"outline\",\n          children: \"Cancel\"\n        }), externalEnabled && /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          disabled: isLoading,\n          onClick: this.createSnapshot(true),\n          children: sharingButtonText\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"primary\",\n          disabled: isLoading,\n          onClick: this.createSnapshot(),\n          children: \"Local Snapshot\"\n        })]\n      })]\n    });\n  }\n\n  renderStep2() {\n    const {\n      snapshotUrl\n    } = this.state;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form\",\n        style: {\n          marginTop: '40px'\n        },\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form-row\",\n          children: [/*#__PURE__*/_jsxs(\"a\", {\n            href: snapshotUrl,\n            className: \"large share-modal-link\",\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n              name: \"external-link-alt\"\n            })), \" \", snapshotUrl]\n          }), _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsx(ClipboardButton, {\n            variant: \"secondary\",\n            getText: this.getSnapshotUrl,\n            onClipboardCopy: this.onSnapshotUrlCopy,\n            children: \"Copy Link\"\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"pull-right\",\n        style: {\n          padding: '5px'\n        },\n        children: [\"Did you make a mistake?\", ' ', /*#__PURE__*/_jsx(LinkButton, {\n          fill: \"text\",\n          target: \"_blank\",\n          onClick: this.deleteSnapshot,\n          children: \"Delete snapshot.\"\n        })]\n      })]\n    });\n  }\n\n  renderStep3() {\n    return _div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n      className: \"share-modal-header\",\n      children: /*#__PURE__*/_jsx(\"p\", {\n        className: \"share-modal-info-text\",\n        children: \"The snapshot has been deleted. If you have already accessed it once, then it might take up to an hour before before it is removed from browser caches or CDN caches.\"\n      })\n    }));\n  }\n\n  render() {\n    const {\n      isLoading,\n      step\n    } = this.state;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [step === 1 && this.renderStep1(), step === 2 && this.renderStep2(), step === 3 && this.renderStep3(), isLoading && (_Spinner || (_Spinner = /*#__PURE__*/_jsx(Spinner, {\n        inline: true\n      })))]\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","AppEvents","getBackendSrv","reportInteraction","Button","ClipboardButton","Field","Icon","Input","LinkButton","Modal","Select","Spinner","appEvents","getTimeSrv","VariableRefresh","snapshotApiUrl","expireOptions","label","value","ShareSnapshot","constructor","props","external","timeoutSeconds","state","dashboard","snapshot","timestamp","Date","originalUrl","window","location","href","setState","isLoading","startRefresh","setTimeout","saveSnapshot","snapshotExpires","dash","getSaveModelClone","scrubDashboard","cmdData","name","title","expires","results","post","deleteUrl","snapshotUrl","url","step","panel","snapshotName","time","timeRange","links","panels","forEach","targets","datasource","annotations","list","filter","annotation","enable","map","iconColor","snapshotData","type","builtIn","hide","getVariables","variable","query","options","current","refresh","never","singlePanel","getSaveModel","gridPos","w","x","y","h","forEachPanel","get","event","target","Number","option","selectedExpireOption","emit","alertSuccess","externalEnabled","sharingButtonText","componentDidMount","getSnaphotShareOptions","shareOptions","renderStep1","onDismiss","onSnapshotNameChange","onExpireChange","onTimeoutChange","createSnapshot","renderStep2","marginTop","getSnapshotUrl","onSnapshotUrlCopy","padding","deleteSnapshot","renderStep3","render"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/ShareModal/ShareSnapshot.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { AppEvents, SelectableValue } from '@grafana/data';\nimport { getBackendSrv, reportInteraction } from '@grafana/runtime';\nimport { Button, ClipboardButton, Field, Icon, Input, LinkButton, Modal, Select, Spinner } from '@grafana/ui';\nimport { appEvents } from 'app/core/core';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\n\nimport { VariableRefresh } from '../../../variables/types';\n\nimport { ShareModalTabProps } from './types';\n\nconst snapshotApiUrl = '/api/snapshots';\n\nconst expireOptions: Array<SelectableValue<number>> = [\n  { label: 'Never', value: 0 },\n  { label: '1 Hour', value: 60 * 60 },\n  { label: '1 Day', value: 60 * 60 * 24 },\n  { label: '7 Days', value: 60 * 60 * 24 * 7 },\n];\n\ninterface Props extends ShareModalTabProps {}\n\ninterface State {\n  isLoading: boolean;\n  step: number;\n  snapshotName: string;\n  selectedExpireOption: SelectableValue<number>;\n  snapshotExpires?: number;\n  snapshotUrl: string;\n  deleteUrl: string;\n  timeoutSeconds: number;\n  externalEnabled: boolean;\n  sharingButtonText: string;\n}\n\nexport class ShareSnapshot extends PureComponent<Props, State> {\n  private dashboard: DashboardModel;\n\n  constructor(props: Props) {\n    super(props);\n    this.dashboard = props.dashboard;\n    this.state = {\n      isLoading: false,\n      step: 1,\n      selectedExpireOption: expireOptions[0],\n      snapshotExpires: expireOptions[0].value,\n      snapshotName: props.dashboard.title,\n      timeoutSeconds: 4,\n      snapshotUrl: '',\n      deleteUrl: '',\n      externalEnabled: false,\n      sharingButtonText: '',\n    };\n  }\n\n  componentDidMount() {\n    this.getSnaphotShareOptions();\n  }\n\n  async getSnaphotShareOptions() {\n    const shareOptions = await getBackendSrv().get('/api/snapshot/shared-options');\n    this.setState({\n      sharingButtonText: shareOptions['externalSnapshotName'],\n      externalEnabled: shareOptions['externalEnabled'],\n    });\n  }\n\n  createSnapshot = (external?: boolean) => () => {\n    const { timeoutSeconds } = this.state;\n    this.dashboard.snapshot = {\n      timestamp: new Date(),\n    };\n\n    if (!external) {\n      this.dashboard.snapshot.originalUrl = window.location.href;\n    }\n\n    this.setState({ isLoading: true });\n    this.dashboard.startRefresh();\n\n    setTimeout(() => {\n      this.saveSnapshot(this.dashboard, external);\n    }, timeoutSeconds * 1000);\n  };\n\n  saveSnapshot = async (dashboard: DashboardModel, external?: boolean) => {\n    const { snapshotExpires } = this.state;\n    const dash = this.dashboard.getSaveModelClone();\n    this.scrubDashboard(dash);\n\n    const cmdData = {\n      dashboard: dash,\n      name: dash.title,\n      expires: snapshotExpires,\n      external: external,\n    };\n\n    try {\n      const results: { deleteUrl: string; url: string } = await getBackendSrv().post(snapshotApiUrl, cmdData);\n      this.setState({\n        deleteUrl: results.deleteUrl,\n        snapshotUrl: results.url,\n        step: 2,\n      });\n    } finally {\n      reportInteraction('grafana_dashboards_snapshot_created', {\n        location: external ? 'raintank' : 'local',\n      });\n      this.setState({ isLoading: false });\n    }\n  };\n\n  scrubDashboard = (dash: DashboardModel) => {\n    const { panel } = this.props;\n    const { snapshotName } = this.state;\n    // change title\n    dash.title = snapshotName;\n\n    // make relative times absolute\n    dash.time = getTimeSrv().timeRange();\n\n    // Remove links\n    dash.links = [];\n\n    // remove panel queries & links\n    dash.panels.forEach((panel) => {\n      panel.targets = [];\n      panel.links = [];\n      panel.datasource = null;\n    });\n\n    // remove annotation queries\n    const annotations = dash.annotations.list.filter((annotation) => annotation.enable);\n    dash.annotations.list = annotations.map((annotation) => {\n      return {\n        name: annotation.name,\n        enable: annotation.enable,\n        iconColor: annotation.iconColor,\n        snapshotData: annotation.snapshotData,\n        type: annotation.type,\n        builtIn: annotation.builtIn,\n        hide: annotation.hide,\n      };\n    });\n\n    // remove template queries\n    dash.getVariables().forEach((variable: any) => {\n      variable.query = '';\n      variable.options = variable.current ? [variable.current] : [];\n      variable.refresh = VariableRefresh.never;\n    });\n\n    // snapshot single panel\n    if (panel) {\n      const singlePanel = panel.getSaveModel();\n      singlePanel.gridPos.w = 24;\n      singlePanel.gridPos.x = 0;\n      singlePanel.gridPos.y = 0;\n      singlePanel.gridPos.h = 20;\n      dash.panels = [singlePanel];\n    }\n\n    // cleanup snapshotData\n    delete this.dashboard.snapshot;\n    this.dashboard.forEachPanel((panel: PanelModel) => {\n      delete panel.snapshotData;\n    });\n    this.dashboard.annotations.list.forEach((annotation) => {\n      delete annotation.snapshotData;\n    });\n  };\n\n  deleteSnapshot = async () => {\n    const { deleteUrl } = this.state;\n    await getBackendSrv().get(deleteUrl);\n    this.setState({ step: 3 });\n  };\n\n  getSnapshotUrl = () => {\n    return this.state.snapshotUrl;\n  };\n\n  onSnapshotNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ snapshotName: event.target.value });\n  };\n\n  onTimeoutChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ timeoutSeconds: Number(event.target.value) });\n  };\n\n  onExpireChange = (option: SelectableValue<number>) => {\n    this.setState({\n      selectedExpireOption: option,\n      snapshotExpires: option.value,\n    });\n  };\n\n  onSnapshotUrlCopy = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  renderStep1() {\n    const { onDismiss } = this.props;\n    const { snapshotName, selectedExpireOption, timeoutSeconds, isLoading, sharingButtonText, externalEnabled } =\n      this.state;\n\n    return (\n      <>\n        <div>\n          <p className=\"share-modal-info-text\">\n            A snapshot is an instant way to share an interactive dashboard publicly. When created, we strip sensitive\n            data like queries (metric, template, and annotation) and panel links, leaving only the visible metric data\n            and series names embedded in your dashboard.\n          </p>\n          <p className=\"share-modal-info-text\">\n            Keep in mind, your snapshot <em>can be viewed by anyone</em> that has the link and can access the URL. Share\n            wisely.\n          </p>\n        </div>\n        <Field label=\"Snapshot name\">\n          <Input id=\"snapshot-name-input\" width={30} value={snapshotName} onChange={this.onSnapshotNameChange} />\n        </Field>\n        <Field label=\"Expire\">\n          <Select\n            inputId=\"expire-select-input\"\n            width={30}\n            options={expireOptions}\n            value={selectedExpireOption}\n            onChange={this.onExpireChange}\n          />\n        </Field>\n        <Field\n          label=\"Timeout (seconds)\"\n          description=\"You might need to configure the timeout value if it takes a long time to collect your dashboard\n            metrics.\"\n        >\n          <Input id=\"timeout-input\" type=\"number\" width={21} value={timeoutSeconds} onChange={this.onTimeoutChange} />\n        </Field>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n            Cancel\n          </Button>\n          {externalEnabled && (\n            <Button variant=\"secondary\" disabled={isLoading} onClick={this.createSnapshot(true)}>\n              {sharingButtonText}\n            </Button>\n          )}\n          <Button variant=\"primary\" disabled={isLoading} onClick={this.createSnapshot()}>\n            Local Snapshot\n          </Button>\n        </Modal.ButtonRow>\n      </>\n    );\n  }\n\n  renderStep2() {\n    const { snapshotUrl } = this.state;\n\n    return (\n      <>\n        <div className=\"gf-form\" style={{ marginTop: '40px' }}>\n          <div className=\"gf-form-row\">\n            <a href={snapshotUrl} className=\"large share-modal-link\" target=\"_blank\" rel=\"noreferrer\">\n              <Icon name=\"external-link-alt\" /> {snapshotUrl}\n            </a>\n            <br />\n            <ClipboardButton variant=\"secondary\" getText={this.getSnapshotUrl} onClipboardCopy={this.onSnapshotUrlCopy}>\n              Copy Link\n            </ClipboardButton>\n          </div>\n        </div>\n\n        <div className=\"pull-right\" style={{ padding: '5px' }}>\n          Did you make a mistake?{' '}\n          <LinkButton fill=\"text\" target=\"_blank\" onClick={this.deleteSnapshot}>\n            Delete snapshot.\n          </LinkButton>\n        </div>\n      </>\n    );\n  }\n\n  renderStep3() {\n    return (\n      <div className=\"share-modal-header\">\n        <p className=\"share-modal-info-text\">\n          The snapshot has been deleted. If you have already accessed it once, then it might take up to an hour before\n          before it is removed from browser caches or CDN caches.\n        </p>\n      </div>\n    );\n  }\n\n  render() {\n    const { isLoading, step } = this.state;\n\n    return (\n      <>\n        {step === 1 && this.renderStep1()}\n        {step === 2 && this.renderStep2()}\n        {step === 3 && this.renderStep3()}\n        {isLoading && <Spinner inline={true} />}\n      </>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}