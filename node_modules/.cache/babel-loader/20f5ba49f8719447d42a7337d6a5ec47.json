{"ast":null,"code":"import React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { useControlledFieldArray } from 'app/features/alerting/unified/hooks/useControlledFieldArray';\nimport { ActionIcon } from '../../../rules/ActionIcon';\nimport { CollapsibleSection } from '../CollapsibleSection';\nimport { OptionField } from './OptionField';\nimport { getReceiverFormFieldStyles } from './styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const SubformArrayField = ({\n  option,\n  pathPrefix,\n  errors,\n  defaultValues,\n  readOnly = false\n}) => {\n  var _ref;\n\n  const styles = useStyles2(getReceiverFormFieldStyles);\n  const path = `${pathPrefix}${option.propertyName}`;\n  const formAPI = useFormContext();\n  const {\n    fields,\n    append,\n    remove\n  } = useControlledFieldArray({\n    name: path,\n    formAPI,\n    defaults: defaultValues\n  });\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.wrapper,\n    children: /*#__PURE__*/_jsxs(CollapsibleSection, {\n      className: styles.collapsibleSection,\n      label: `${option.label} (${fields.length})`,\n      description: option.description,\n      children: [((_ref = fields !== null && fields !== void 0 ? fields : defaultValues) !== null && _ref !== void 0 ? _ref : []).map((field, itemIndex) => {\n        var _option$subformOption;\n\n        return /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.wrapper,\n          children: [!readOnly && /*#__PURE__*/_jsx(ActionIcon, {\n            \"data-testid\": `${path}.${itemIndex}.delete-button`,\n            icon: \"trash-alt\",\n            tooltip: \"delete\",\n            onClick: () => remove(itemIndex),\n            className: styles.deleteIcon\n          }), (_option$subformOption = option.subformOptions) === null || _option$subformOption === void 0 ? void 0 : _option$subformOption.map(option => {\n            var _errors$itemIndex;\n\n            return /*#__PURE__*/_jsx(OptionField, {\n              readOnly: readOnly,\n              defaultValue: field === null || field === void 0 ? void 0 : field[option.propertyName],\n              option: option,\n              pathPrefix: `${path}.${itemIndex}.`,\n              error: errors === null || errors === void 0 ? void 0 : (_errors$itemIndex = errors[itemIndex]) === null || _errors$itemIndex === void 0 ? void 0 : _errors$itemIndex[option.propertyName]\n            }, option.propertyName);\n          })]\n        }, itemIndex);\n      }), !readOnly && /*#__PURE__*/_jsx(Button, {\n        \"data-testid\": `${path}.add-button`,\n        className: styles.addButton,\n        type: \"button\",\n        variant: \"secondary\",\n        icon: \"plus\",\n        size: \"sm\",\n        onClick: () => append({\n          __id: String(Math.random())\n        }),\n        children: \"Add\"\n      })]\n    })\n  });\n};","map":{"version":3,"names":["React","useFormContext","Button","useStyles2","useControlledFieldArray","ActionIcon","CollapsibleSection","OptionField","getReceiverFormFieldStyles","SubformArrayField","option","pathPrefix","errors","defaultValues","readOnly","styles","path","propertyName","formAPI","fields","append","remove","name","defaults","wrapper","collapsibleSection","label","length","description","map","field","itemIndex","deleteIcon","subformOptions","addButton","__id","String","Math","random"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/form/fields/SubformArrayField.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { FieldError, DeepMap, useFormContext } from 'react-hook-form';\n\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { useControlledFieldArray } from 'app/features/alerting/unified/hooks/useControlledFieldArray';\nimport { NotificationChannelOption } from 'app/types';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\nimport { CollapsibleSection } from '../CollapsibleSection';\n\nimport { OptionField } from './OptionField';\nimport { getReceiverFormFieldStyles } from './styles';\n\ninterface Props {\n  defaultValues?: any[];\n  option: NotificationChannelOption;\n  pathPrefix: string;\n  errors?: Array<DeepMap<any, FieldError>>;\n  readOnly?: boolean;\n}\n\nexport const SubformArrayField: FC<Props> = ({ option, pathPrefix, errors, defaultValues, readOnly = false }) => {\n  const styles = useStyles2(getReceiverFormFieldStyles);\n  const path = `${pathPrefix}${option.propertyName}`;\n  const formAPI = useFormContext();\n  const { fields, append, remove } = useControlledFieldArray({ name: path, formAPI, defaults: defaultValues });\n\n  return (\n    <div className={styles.wrapper}>\n      <CollapsibleSection\n        className={styles.collapsibleSection}\n        label={`${option.label} (${fields.length})`}\n        description={option.description}\n      >\n        {(fields ?? defaultValues ?? []).map((field, itemIndex) => {\n          return (\n            <div key={itemIndex} className={styles.wrapper}>\n              {!readOnly && (\n                <ActionIcon\n                  data-testid={`${path}.${itemIndex}.delete-button`}\n                  icon=\"trash-alt\"\n                  tooltip=\"delete\"\n                  onClick={() => remove(itemIndex)}\n                  className={styles.deleteIcon}\n                />\n              )}\n              {option.subformOptions?.map((option) => (\n                <OptionField\n                  readOnly={readOnly}\n                  defaultValue={field?.[option.propertyName]}\n                  key={option.propertyName}\n                  option={option}\n                  pathPrefix={`${path}.${itemIndex}.`}\n                  error={errors?.[itemIndex]?.[option.propertyName]}\n                />\n              ))}\n            </div>\n          );\n        })}\n        {!readOnly && (\n          <Button\n            data-testid={`${path}.add-button`}\n            className={styles.addButton}\n            type=\"button\"\n            variant=\"secondary\"\n            icon=\"plus\"\n            size=\"sm\"\n            onClick={() => append({ __id: String(Math.random()) })}\n          >\n            Add\n          </Button>\n        )}\n      </CollapsibleSection>\n    </div>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAA8BC,cAA9B,QAAoD,iBAApD;AAEA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,aAAnC;AACA,SAASC,uBAAT,QAAwC,6DAAxC;AAGA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AAEA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,0BAAT,QAA2C,UAA3C;;;AAUA,OAAO,MAAMC,iBAA4B,GAAG,CAAC;EAAEC,MAAF;EAAUC,UAAV;EAAsBC,MAAtB;EAA8BC,aAA9B;EAA6CC,QAAQ,GAAG;AAAxD,CAAD,KAAqE;EAAA;;EAC/G,MAAMC,MAAM,GAAGZ,UAAU,CAACK,0BAAD,CAAzB;EACA,MAAMQ,IAAI,GAAI,GAAEL,UAAW,GAAED,MAAM,CAACO,YAAa,EAAjD;EACA,MAAMC,OAAO,GAAGjB,cAAc,EAA9B;EACA,MAAM;IAAEkB,MAAF;IAAUC,MAAV;IAAkBC;EAAlB,IAA6BjB,uBAAuB,CAAC;IAAEkB,IAAI,EAAEN,IAAR;IAAcE,OAAd;IAAuBK,QAAQ,EAAEV;EAAjC,CAAD,CAA1D;EAEA,oBACE;IAAK,SAAS,EAAEE,MAAM,CAACS,OAAvB;IAAA,uBACE,MAAC,kBAAD;MACE,SAAS,EAAET,MAAM,CAACU,kBADpB;MAEE,KAAK,EAAG,GAAEf,MAAM,CAACgB,KAAM,KAAIP,MAAM,CAACQ,MAAO,GAF3C;MAGE,WAAW,EAAEjB,MAAM,CAACkB,WAHtB;MAAA,WAKG,SAACT,MAAD,aAACA,MAAD,cAACA,MAAD,GAAWN,aAAX,uCAA4B,EAA5B,EAAgCgB,GAAhC,CAAoC,CAACC,KAAD,EAAQC,SAAR,KAAsB;QAAA;;QACzD,oBACE;UAAqB,SAAS,EAAEhB,MAAM,CAACS,OAAvC;UAAA,WACG,CAACV,QAAD,iBACC,KAAC,UAAD;YACE,eAAc,GAAEE,IAAK,IAAGe,SAAU,gBADpC;YAEE,IAAI,EAAC,WAFP;YAGE,OAAO,EAAC,QAHV;YAIE,OAAO,EAAE,MAAMV,MAAM,CAACU,SAAD,CAJvB;YAKE,SAAS,EAAEhB,MAAM,CAACiB;UALpB,EAFJ,2BAUGtB,MAAM,CAACuB,cAVV,0DAUG,sBAAuBJ,GAAvB,CAA4BnB,MAAD;YAAA;;YAAA,oBAC1B,KAAC,WAAD;cACE,QAAQ,EAAEI,QADZ;cAEE,YAAY,EAAEgB,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAGpB,MAAM,CAACO,YAAV,CAFrB;cAIE,MAAM,EAAEP,MAJV;cAKE,UAAU,EAAG,GAAEM,IAAK,IAAGe,SAAU,GALnC;cAME,KAAK,EAAEnB,MAAF,aAAEA,MAAF,4CAAEA,MAAM,CAAGmB,SAAH,CAAR,sDAAE,kBAAsBrB,MAAM,CAACO,YAA7B;YANT,GAGOP,MAAM,CAACO,YAHd,CAD0B;UAAA,CAA3B,CAVH;QAAA,GAAUc,SAAV,CADF;MAuBD,CAxBA,CALH,EA8BG,CAACjB,QAAD,iBACC,KAAC,MAAD;QACE,eAAc,GAAEE,IAAK,aADvB;QAEE,SAAS,EAAED,MAAM,CAACmB,SAFpB;QAGE,IAAI,EAAC,QAHP;QAIE,OAAO,EAAC,WAJV;QAKE,IAAI,EAAC,MALP;QAME,IAAI,EAAC,IANP;QAOE,OAAO,EAAE,MAAMd,MAAM,CAAC;UAAEe,IAAI,EAAEC,MAAM,CAACC,IAAI,CAACC,MAAL,EAAD;QAAd,CAAD,CAPvB;QAAA;MAAA,EA/BJ;IAAA;EADF,EADF;AAgDD,CAtDM"},"metadata":{},"sourceType":"module"}