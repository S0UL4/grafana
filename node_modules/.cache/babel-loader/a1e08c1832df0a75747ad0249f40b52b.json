{"ast":null,"code":"import { from, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { rangeUtil, StandardVariableSupport } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { getTimeSrv } from '../../../features/dashboard/services/TimeSrv';\nimport PrometheusMetricFindQuery from './metric_find_query';\nexport class PrometheusVariableSupport extends StandardVariableSupport {\n  constructor(datasource, templateSrv = getTemplateSrv(), timeSrv = getTimeSrv()) {\n    super();\n    this.datasource = datasource;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n    this.query = this.query.bind(this);\n  }\n\n  query(request) {\n    const query = request.targets[0].expr;\n\n    if (!query) {\n      return of({\n        data: []\n      });\n    }\n\n    const scopedVars = Object.assign({}, request.scopedVars, {\n      __interval: {\n        text: this.datasource.interval,\n        value: this.datasource.interval\n      },\n      __interval_ms: {\n        text: rangeUtil.intervalToMs(this.datasource.interval),\n        value: rangeUtil.intervalToMs(this.datasource.interval)\n      }\n    }, this.datasource.getRangeScopedVars(this.timeSrv.timeRange()));\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.datasource.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this.datasource, interpolated);\n    const metricFindStream = from(metricFindQuery.process());\n    return metricFindStream.pipe(map(results => ({\n      data: results\n    })));\n  }\n\n  toDataQuery(query) {\n    return {\n      refId: 'PrometheusDatasource-VariableQuery',\n      expr: query.query\n    };\n  }\n\n}","map":{"version":3,"names":["from","of","map","rangeUtil","StandardVariableSupport","getTemplateSrv","getTimeSrv","PrometheusMetricFindQuery","PrometheusVariableSupport","constructor","datasource","templateSrv","timeSrv","query","bind","request","targets","expr","data","scopedVars","__interval","text","interval","value","__interval_ms","intervalToMs","getRangeScopedVars","timeRange","interpolated","replace","interpolateQueryExpr","metricFindQuery","metricFindStream","process","pipe","results","toDataQuery","refId"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/variables.ts"],"sourcesContent":["import { from, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  rangeUtil,\n  StandardVariableQuery,\n  StandardVariableSupport,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { getTimeSrv, TimeSrv } from '../../../features/dashboard/services/TimeSrv';\n\nimport { PrometheusDatasource } from './datasource';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { PromQuery } from './types';\n\nexport class PrometheusVariableSupport extends StandardVariableSupport<PrometheusDatasource> {\n  constructor(\n    private readonly datasource: PrometheusDatasource,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super();\n    this.query = this.query.bind(this);\n  }\n\n  query(request: DataQueryRequest<PromQuery>): Observable<DataQueryResponse> {\n    const query = request.targets[0].expr;\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const scopedVars = {\n      ...request.scopedVars,\n      __interval: { text: this.datasource.interval, value: this.datasource.interval },\n      __interval_ms: {\n        text: rangeUtil.intervalToMs(this.datasource.interval),\n        value: rangeUtil.intervalToMs(this.datasource.interval),\n      },\n      ...this.datasource.getRangeScopedVars(this.timeSrv.timeRange()),\n    };\n\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.datasource.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this.datasource, interpolated);\n    const metricFindStream = from(metricFindQuery.process());\n\n    return metricFindStream.pipe(map((results) => ({ data: results })));\n  }\n\n  toDataQuery(query: StandardVariableQuery): PromQuery {\n    return {\n      refId: 'PrometheusDatasource-VariableQuery',\n      expr: query.query,\n    };\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAT,EAA2BC,EAA3B,QAAqC,MAArC;AACA,SAASC,GAAT,QAAoB,gBAApB;AAEA,SAGEC,SAHF,EAKEC,uBALF,QAMO,eANP;AAOA,SAASC,cAAT,QAA4C,kBAA5C;AAEA,SAASC,UAAT,QAAoC,8CAApC;AAGA,OAAOC,yBAAP,MAAsC,qBAAtC;AAGA,OAAO,MAAMC,yBAAN,SAAwCJ,uBAAxC,CAAsF;EAC3FK,WAAW,CACQC,UADR,EAEQC,WAAwB,GAAGN,cAAc,EAFjD,EAGQO,OAAgB,GAAGN,UAAU,EAHrC,EAIT;IACA;IADA,KAHiBI,UAGjB,GAHiBA,UAGjB;IAAA,KAFiBC,WAEjB,GAFiBA,WAEjB;IAAA,KADiBC,OACjB,GADiBA,OACjB;IAEA,KAAKC,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;EACD;;EAEDD,KAAK,CAACE,OAAD,EAAsE;IACzE,MAAMF,KAAK,GAAGE,OAAO,CAACC,OAAR,CAAgB,CAAhB,EAAmBC,IAAjC;;IACA,IAAI,CAACJ,KAAL,EAAY;MACV,OAAOZ,EAAE,CAAC;QAAEiB,IAAI,EAAE;MAAR,CAAD,CAAT;IACD;;IAED,MAAMC,UAAU,qBACXJ,OAAO,CAACI,UADG;MAEdC,UAAU,EAAE;QAAEC,IAAI,EAAE,KAAKX,UAAL,CAAgBY,QAAxB;QAAkCC,KAAK,EAAE,KAAKb,UAAL,CAAgBY;MAAzD,CAFE;MAGdE,aAAa,EAAE;QACbH,IAAI,EAAElB,SAAS,CAACsB,YAAV,CAAuB,KAAKf,UAAL,CAAgBY,QAAvC,CADO;QAEbC,KAAK,EAAEpB,SAAS,CAACsB,YAAV,CAAuB,KAAKf,UAAL,CAAgBY,QAAvC;MAFM;IAHD,GAOX,KAAKZ,UAAL,CAAgBgB,kBAAhB,CAAmC,KAAKd,OAAL,CAAae,SAAb,EAAnC,CAPW,CAAhB;IAUA,MAAMC,YAAY,GAAG,KAAKjB,WAAL,CAAiBkB,OAAjB,CAAyBhB,KAAzB,EAAgCM,UAAhC,EAA4C,KAAKT,UAAL,CAAgBoB,oBAA5D,CAArB;IACA,MAAMC,eAAe,GAAG,IAAIxB,yBAAJ,CAA8B,KAAKG,UAAnC,EAA+CkB,YAA/C,CAAxB;IACA,MAAMI,gBAAgB,GAAGhC,IAAI,CAAC+B,eAAe,CAACE,OAAhB,EAAD,CAA7B;IAEA,OAAOD,gBAAgB,CAACE,IAAjB,CAAsBhC,GAAG,CAAEiC,OAAD,KAAc;MAAEjB,IAAI,EAAEiB;IAAR,CAAd,CAAD,CAAzB,CAAP;EACD;;EAEDC,WAAW,CAACvB,KAAD,EAA0C;IACnD,OAAO;MACLwB,KAAK,EAAE,oCADF;MAELpB,IAAI,EAAEJ,KAAK,CAACA;IAFP,CAAP;EAID;;AAtC0F"},"metadata":{},"sourceType":"module"}