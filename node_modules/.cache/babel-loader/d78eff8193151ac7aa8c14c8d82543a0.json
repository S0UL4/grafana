{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport store from 'app/core/store';\nimport { QueryEditorMode } from '../../prometheus/querybuilder/shared/types';\nimport { LokiQueryType } from '../types';\nconst queryEditorModeDefaultLocalStorageKey = 'LokiQueryEditorModeDefault';\nexport function changeEditorMode(query, editorMode, onChange) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange(Object.assign({}, query, {\n    editorMode\n  }));\n}\nexport function getDefaultEditorMode(expr) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value = store.get(queryEditorModeDefaultLocalStorageKey);\n\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n    case QueryEditorMode.Explain:\n      return value;\n\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\n\nexport function getQueryWithDefaults(query) {\n  // If no expr (ie new query) then default to builder\n  let result = query;\n\n  if (!query.editorMode) {\n    result = Object.assign({}, query, {\n      editorMode: getDefaultEditorMode(query.expr)\n    });\n  }\n\n  if (query.expr == null) {\n    result = Object.assign({}, result, {\n      expr: ''\n    });\n  }\n\n  if (query.queryType == null) {\n    // Default to range query\n    result = Object.assign({}, result, {\n      queryType: LokiQueryType.Range\n    });\n  }\n\n  return result;\n}\nconst queryEditorRawQueryLocalStorageKey = 'LokiQueryEditorRawQueryDefault';\n\nfunction getRawQueryVisibility() {\n  const val = store.get(queryEditorRawQueryLocalStorageKey);\n  return val === undefined ? true : Boolean(parseInt(val, 10));\n}\n\nfunction setRawQueryVisibility(value) {\n  store.set(queryEditorRawQueryLocalStorageKey, value ? '1' : '0');\n}\n/**\n * Use and store value of raw query switch in local storage.\n * Needs to be a hook with local state to trigger rerenders.\n */\n\n\nexport function useRawQuery() {\n  const [rawQuery, setRawQuery] = useState(getRawQueryVisibility());\n  const setter = useCallback(value => {\n    setRawQueryVisibility(value);\n    setRawQuery(value);\n  }, []);\n  return [rawQuery, setter];\n}","map":{"version":3,"names":["useCallback","useState","store","QueryEditorMode","LokiQueryType","queryEditorModeDefaultLocalStorageKey","changeEditorMode","query","editorMode","onChange","expr","set","getDefaultEditorMode","Code","value","get","Builder","Explain","getQueryWithDefaults","result","queryType","Range","queryEditorRawQueryLocalStorageKey","getRawQueryVisibility","val","undefined","Boolean","parseInt","setRawQueryVisibility","useRawQuery","rawQuery","setRawQuery","setter"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/querybuilder/state.ts"],"sourcesContent":["import { useCallback, useState } from 'react';\n\nimport store from 'app/core/store';\n\nimport { QueryEditorMode } from '../../prometheus/querybuilder/shared/types';\nimport { LokiQuery, LokiQueryType } from '../types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'LokiQueryEditorModeDefault';\n\nexport function changeEditorMode(query: LokiQuery, editorMode: QueryEditorMode, onChange: (query: LokiQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nexport function getDefaultEditorMode(expr: string) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value = store.get(queryEditorModeDefaultLocalStorageKey) as QueryEditorMode;\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n    case QueryEditorMode.Explain:\n      return value;\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(query: LokiQuery): LokiQuery {\n  // If no expr (ie new query) then default to builder\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr) };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '' };\n  }\n\n  if (query.queryType == null) {\n    // Default to range query\n    result = { ...result, queryType: LokiQueryType.Range };\n  }\n\n  return result;\n}\n\nconst queryEditorRawQueryLocalStorageKey = 'LokiQueryEditorRawQueryDefault';\n\nfunction getRawQueryVisibility(): boolean {\n  const val = store.get(queryEditorRawQueryLocalStorageKey);\n  return val === undefined ? true : Boolean(parseInt(val, 10));\n}\n\nfunction setRawQueryVisibility(value: boolean) {\n  store.set(queryEditorRawQueryLocalStorageKey, value ? '1' : '0');\n}\n\n/**\n * Use and store value of raw query switch in local storage.\n * Needs to be a hook with local state to trigger rerenders.\n */\nexport function useRawQuery(): [boolean, (val: boolean) => void] {\n  const [rawQuery, setRawQuery] = useState(getRawQueryVisibility());\n  const setter = useCallback((value: boolean) => {\n    setRawQueryVisibility(value);\n    setRawQuery(value);\n  }, []);\n\n  return [rawQuery, setter];\n}\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,SAASC,eAAT,QAAgC,4CAAhC;AACA,SAAoBC,aAApB,QAAyC,UAAzC;AAEA,MAAMC,qCAAqC,GAAG,4BAA9C;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAA4CC,UAA5C,EAAyEC,QAAzE,EAA+G;EACpH;EACA,IAAIF,KAAK,CAACG,IAAN,KAAe,EAAnB,EAAuB;IACrBR,KAAK,CAACS,GAAN,CAAUN,qCAAV,EAAiDG,UAAjD;EACD;;EAEDC,QAAQ,mBAAMF,KAAN;IAAaC;EAAb,GAAR;AACD;AAED,OAAO,SAASI,oBAAT,CAA8BF,IAA9B,EAA4C;EACjD;EACA,IAAIA,IAAI,IAAI,IAAR,IAAgBA,IAAI,KAAK,EAA7B,EAAiC;IAC/B,OAAOP,eAAe,CAACU,IAAvB;EACD;;EAED,MAAMC,KAAK,GAAGZ,KAAK,CAACa,GAAN,CAAUV,qCAAV,CAAd;;EACA,QAAQS,KAAR;IACE,KAAKX,eAAe,CAACa,OAArB;IACA,KAAKb,eAAe,CAACU,IAArB;IACA,KAAKV,eAAe,CAACc,OAArB;MACE,OAAOH,KAAP;;IACF;MACE,OAAOX,eAAe,CAACa,OAAvB;EANJ;AAQD;AAED;AACA;AACA;;AACA,OAAO,SAASE,oBAAT,CAA8BX,KAA9B,EAA2D;EAChE;EACA,IAAIY,MAAM,GAAGZ,KAAb;;EAEA,IAAI,CAACA,KAAK,CAACC,UAAX,EAAuB;IACrBW,MAAM,qBAAQZ,KAAR;MAAeC,UAAU,EAAEI,oBAAoB,CAACL,KAAK,CAACG,IAAP;IAA/C,EAAN;EACD;;EAED,IAAIH,KAAK,CAACG,IAAN,IAAc,IAAlB,EAAwB;IACtBS,MAAM,qBAAQA,MAAR;MAAgBT,IAAI,EAAE;IAAtB,EAAN;EACD;;EAED,IAAIH,KAAK,CAACa,SAAN,IAAmB,IAAvB,EAA6B;IAC3B;IACAD,MAAM,qBAAQA,MAAR;MAAgBC,SAAS,EAAEhB,aAAa,CAACiB;IAAzC,EAAN;EACD;;EAED,OAAOF,MAAP;AACD;AAED,MAAMG,kCAAkC,GAAG,gCAA3C;;AAEA,SAASC,qBAAT,GAA0C;EACxC,MAAMC,GAAG,GAAGtB,KAAK,CAACa,GAAN,CAAUO,kCAAV,CAAZ;EACA,OAAOE,GAAG,KAAKC,SAAR,GAAoB,IAApB,GAA2BC,OAAO,CAACC,QAAQ,CAACH,GAAD,EAAM,EAAN,CAAT,CAAzC;AACD;;AAED,SAASI,qBAAT,CAA+Bd,KAA/B,EAA+C;EAC7CZ,KAAK,CAACS,GAAN,CAAUW,kCAAV,EAA8CR,KAAK,GAAG,GAAH,GAAS,GAA5D;AACD;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAASe,WAAT,GAA0D;EAC/D,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B9B,QAAQ,CAACsB,qBAAqB,EAAtB,CAAxC;EACA,MAAMS,MAAM,GAAGhC,WAAW,CAAEc,KAAD,IAAoB;IAC7Cc,qBAAqB,CAACd,KAAD,CAArB;IACAiB,WAAW,CAACjB,KAAD,CAAX;EACD,CAHyB,EAGvB,EAHuB,CAA1B;EAKA,OAAO,CAACgB,QAAD,EAAWE,MAAX,CAAP;AACD"},"metadata":{},"sourceType":"module"}