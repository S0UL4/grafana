{"ast":null,"code":"import { pick } from 'lodash';\nimport React from 'react';\nimport { ExploreMode } from '@grafana/data';\nimport { EditorHeader, InlineSelect } from '@grafana/experimental';\nimport { useRegions } from '../hooks';\nimport MetricsQueryHeader from './MetricsQueryEditor/MetricsQueryHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst apiModes = [{\n  label: 'CloudWatch Metrics',\n  value: 'Metrics'\n}, {\n  label: 'CloudWatch Logs',\n  value: 'Logs'\n}];\n\nconst QueryHeader = ({\n  query,\n  sqlCodeEditorIsDirty,\n  datasource,\n  onChange,\n  onRunQuery\n}) => {\n  const {\n    queryMode,\n    region\n  } = query;\n  const [regions, regionIsLoading] = useRegions(datasource);\n\n  const onQueryModeChange = ({\n    value\n  }) => {\n    if (value !== queryMode) {\n      const commonProps = pick(query, 'id', 'region', 'namespace', 'refId', 'hide', 'key', 'queryType', 'datasource');\n      onChange(Object.assign({}, commonProps, {\n        queryMode: value\n      }));\n    }\n  };\n\n  const onRegion = async ({\n    value\n  }) => {\n    onChange(Object.assign({}, query, {\n      region: value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxs(EditorHeader, {\n    children: [/*#__PURE__*/_jsx(InlineSelect, {\n      label: \"Region\",\n      value: region,\n      placeholder: \"Select region\",\n      allowCustomValue: true,\n      onChange: ({\n        value: region\n      }) => region && onRegion({\n        value: region\n      }),\n      options: regions,\n      isLoading: regionIsLoading\n    }), /*#__PURE__*/_jsx(InlineSelect, {\n      \"aria-label\": \"Query mode\",\n      value: queryMode,\n      options: apiModes,\n      onChange: onQueryModeChange\n    }), queryMode === ExploreMode.Metrics && /*#__PURE__*/_jsx(MetricsQueryHeader, {\n      query: query,\n      datasource: datasource,\n      onChange: onChange,\n      onRunQuery: onRunQuery,\n      sqlCodeEditorIsDirty: sqlCodeEditorIsDirty\n    })]\n  });\n};\n\nexport default QueryHeader;","map":{"version":3,"names":["pick","React","ExploreMode","EditorHeader","InlineSelect","useRegions","MetricsQueryHeader","apiModes","label","value","QueryHeader","query","sqlCodeEditorIsDirty","datasource","onChange","onRunQuery","queryMode","region","regions","regionIsLoading","onQueryModeChange","commonProps","onRegion","Metrics"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/QueryHeader.tsx"],"sourcesContent":["import { pick } from 'lodash';\nimport React from 'react';\n\nimport { SelectableValue, ExploreMode } from '@grafana/data';\nimport { EditorHeader, InlineSelect } from '@grafana/experimental';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { useRegions } from '../hooks';\nimport { CloudWatchQuery, CloudWatchQueryMode } from '../types';\n\nimport MetricsQueryHeader from './MetricsQueryEditor/MetricsQueryHeader';\n\ninterface QueryHeaderProps {\n  query: CloudWatchQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (query: CloudWatchQuery) => void;\n  onRunQuery: () => void;\n  sqlCodeEditorIsDirty: boolean;\n  onRegionChange?: (region: string) => Promise<void>;\n}\n\nconst apiModes: Array<SelectableValue<CloudWatchQueryMode>> = [\n  { label: 'CloudWatch Metrics', value: 'Metrics' },\n  { label: 'CloudWatch Logs', value: 'Logs' },\n];\n\nconst QueryHeader: React.FC<QueryHeaderProps> = ({ query, sqlCodeEditorIsDirty, datasource, onChange, onRunQuery }) => {\n  const { queryMode, region } = query;\n\n  const [regions, regionIsLoading] = useRegions(datasource);\n\n  const onQueryModeChange = ({ value }: SelectableValue<CloudWatchQueryMode>) => {\n    if (value !== queryMode) {\n      const commonProps = pick(query, 'id', 'region', 'namespace', 'refId', 'hide', 'key', 'queryType', 'datasource');\n      onChange({\n        ...commonProps,\n        queryMode: value,\n      } as CloudWatchQuery);\n    }\n  };\n\n  const onRegion = async ({ value }: SelectableValue<string>) => {\n    onChange({\n      ...query,\n      region: value,\n    } as CloudWatchQuery);\n  };\n\n  return (\n    <EditorHeader>\n      <InlineSelect\n        label=\"Region\"\n        value={region}\n        placeholder=\"Select region\"\n        allowCustomValue\n        onChange={({ value: region }) => region && onRegion({ value: region })}\n        options={regions}\n        isLoading={regionIsLoading}\n      />\n\n      <InlineSelect aria-label=\"Query mode\" value={queryMode} options={apiModes} onChange={onQueryModeChange} />\n\n      {queryMode === ExploreMode.Metrics && (\n        <MetricsQueryHeader\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          sqlCodeEditorIsDirty={sqlCodeEditorIsDirty}\n        />\n      )}\n    </EditorHeader>\n  );\n};\n\nexport default QueryHeader;\n"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAA0BC,WAA1B,QAA6C,eAA7C;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,uBAA3C;AAGA,SAASC,UAAT,QAA2B,UAA3B;AAGA,OAAOC,kBAAP,MAA+B,yCAA/B;;;AAWA,MAAMC,QAAqD,GAAG,CAC5D;EAAEC,KAAK,EAAE,oBAAT;EAA+BC,KAAK,EAAE;AAAtC,CAD4D,EAE5D;EAAED,KAAK,EAAE,iBAAT;EAA4BC,KAAK,EAAE;AAAnC,CAF4D,CAA9D;;AAKA,MAAMC,WAAuC,GAAG,CAAC;EAAEC,KAAF;EAASC,oBAAT;EAA+BC,UAA/B;EAA2CC,QAA3C;EAAqDC;AAArD,CAAD,KAAuE;EACrH,MAAM;IAAEC,SAAF;IAAaC;EAAb,IAAwBN,KAA9B;EAEA,MAAM,CAACO,OAAD,EAAUC,eAAV,IAA6Bd,UAAU,CAACQ,UAAD,CAA7C;;EAEA,MAAMO,iBAAiB,GAAG,CAAC;IAAEX;EAAF,CAAD,KAAqD;IAC7E,IAAIA,KAAK,KAAKO,SAAd,EAAyB;MACvB,MAAMK,WAAW,GAAGrB,IAAI,CAACW,KAAD,EAAQ,IAAR,EAAc,QAAd,EAAwB,WAAxB,EAAqC,OAArC,EAA8C,MAA9C,EAAsD,KAAtD,EAA6D,WAA7D,EAA0E,YAA1E,CAAxB;MACAG,QAAQ,mBACHO,WADG;QAENL,SAAS,EAAEP;MAFL,GAAR;IAID;EACF,CARD;;EAUA,MAAMa,QAAQ,GAAG,OAAO;IAAEb;EAAF,CAAP,KAA8C;IAC7DK,QAAQ,mBACHH,KADG;MAENM,MAAM,EAAER;IAFF,GAAR;EAID,CALD;;EAOA,oBACE,MAAC,YAAD;IAAA,wBACE,KAAC,YAAD;MACE,KAAK,EAAC,QADR;MAEE,KAAK,EAAEQ,MAFT;MAGE,WAAW,EAAC,eAHd;MAIE,gBAAgB,MAJlB;MAKE,QAAQ,EAAE,CAAC;QAAER,KAAK,EAAEQ;MAAT,CAAD,KAAuBA,MAAM,IAAIK,QAAQ,CAAC;QAAEb,KAAK,EAAEQ;MAAT,CAAD,CALrD;MAME,OAAO,EAAEC,OANX;MAOE,SAAS,EAAEC;IAPb,EADF,eAWE,KAAC,YAAD;MAAc,cAAW,YAAzB;MAAsC,KAAK,EAAEH,SAA7C;MAAwD,OAAO,EAAET,QAAjE;MAA2E,QAAQ,EAAEa;IAArF,EAXF,EAaGJ,SAAS,KAAKd,WAAW,CAACqB,OAA1B,iBACC,KAAC,kBAAD;MACE,KAAK,EAAEZ,KADT;MAEE,UAAU,EAAEE,UAFd;MAGE,QAAQ,EAAEC,QAHZ;MAIE,UAAU,EAAEC,UAJd;MAKE,oBAAoB,EAAEH;IALxB,EAdJ;EAAA,EADF;AAyBD,CA/CD;;AAiDA,eAAeF,WAAf"},"metadata":{},"sourceType":"module"}