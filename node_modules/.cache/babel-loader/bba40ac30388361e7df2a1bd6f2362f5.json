{"ast":null,"code":"export let ScaleDimensionMode;\n/** This will map the field value% to a scaled value within the range */\n\n(function (ScaleDimensionMode) {\n  ScaleDimensionMode[\"Linear\"] = \"linear\";\n  ScaleDimensionMode[\"Quadratic\"] = \"quad\";\n})(ScaleDimensionMode || (ScaleDimensionMode = {}));\n\nexport let ScalarDimensionMode;\n\n(function (ScalarDimensionMode) {\n  ScalarDimensionMode[\"Mod\"] = \"mod\";\n  ScalarDimensionMode[\"Clamped\"] = \"clamped\";\n})(ScalarDimensionMode || (ScalarDimensionMode = {}));\n\nexport let TextDimensionMode;\n\n(function (TextDimensionMode) {\n  TextDimensionMode[\"Fixed\"] = \"fixed\";\n  TextDimensionMode[\"Field\"] = \"field\";\n  TextDimensionMode[\"Template\"] = \"template\";\n})(TextDimensionMode || (TextDimensionMode = {}));\n\nexport const defaultTextConfig = Object.freeze({\n  fixed: '',\n  mode: TextDimensionMode.Field,\n  field: ''\n});\n/** Use the color value from field configs */\n\nexport let ResourceDimensionMode;\n/** Get the path to a resource (URL) */\n\n(function (ResourceDimensionMode) {\n  ResourceDimensionMode[\"Fixed\"] = \"fixed\";\n  ResourceDimensionMode[\"Field\"] = \"field\";\n  ResourceDimensionMode[\"Mapping\"] = \"mapping\";\n})(ResourceDimensionMode || (ResourceDimensionMode = {}));\n\nexport let ResourceFolderName;\n\n(function (ResourceFolderName) {\n  ResourceFolderName[\"Icon\"] = \"img/icons/unicons\";\n  ResourceFolderName[\"IOT\"] = \"img/icons/iot\";\n  ResourceFolderName[\"Marker\"] = \"img/icons/marker\";\n  ResourceFolderName[\"BG\"] = \"img/bg\";\n})(ResourceFolderName || (ResourceFolderName = {}));\n\nexport let MediaType;\n\n(function (MediaType) {\n  MediaType[\"Icon\"] = \"icon\";\n  MediaType[\"Image\"] = \"image\";\n})(MediaType || (MediaType = {}));\n\nexport let PickerTabType;\n\n(function (PickerTabType) {\n  PickerTabType[\"Folder\"] = \"folder\";\n  PickerTabType[\"URL\"] = \"url\";\n  PickerTabType[\"Upload\"] = \"upload\";\n})(PickerTabType || (PickerTabType = {}));\n\nexport let ResourcePickerSize;\n\n(function (ResourcePickerSize) {\n  ResourcePickerSize[\"SMALL\"] = \"small\";\n  ResourcePickerSize[\"NORMAL\"] = \"normal\";\n})(ResourcePickerSize || (ResourcePickerSize = {}));","map":{"version":3,"names":["ScaleDimensionMode","ScalarDimensionMode","TextDimensionMode","defaultTextConfig","Object","freeze","fixed","mode","Field","field","ResourceDimensionMode","ResourceFolderName","MediaType","PickerTabType","ResourcePickerSize"],"sources":["/home/soula/grafana/public/app/features/dimensions/types.ts"],"sourcesContent":["import { Field } from '@grafana/data';\n\nexport interface BaseDimensionConfig<T = any> {\n  fixed: T;\n  field?: string;\n}\n\nexport interface DimensionSupplier<T = any> {\n  /**\n   * This means an explicit value was not configured\n   */\n  isAssumed?: boolean;\n\n  /**\n   * The fied used for\n   */\n  field?: Field;\n\n  /**\n   * Explicit value -- if == null, then need a value for each index\n   */\n  fixed?: T;\n\n  /**\n   * A single value -- typically last\n   */\n  value: () => T;\n\n  /**\n   * Supplier for the dimension value\n   */\n  get: (index: number) => T;\n}\n\nexport enum ScaleDimensionMode {\n  Linear = 'linear',\n  Quadratic = 'quad',\n}\n\n/** This will map the field value% to a scaled value within the range */\nexport interface ScaleDimensionConfig extends BaseDimensionConfig<number> {\n  min: number;\n  max: number;\n}\n\n/** Places that use the value */\nexport interface ScaleDimensionOptions {\n  min: number;\n  max: number;\n  step?: number;\n  hideRange?: boolean; // false\n}\n\nexport enum ScalarDimensionMode {\n  Mod = 'mod',\n  Clamped = 'clamped',\n}\nexport interface ScalarDimensionConfig extends BaseDimensionConfig<number> {\n  mode: ScalarDimensionMode;\n  min: number;\n  max: number;\n}\n\nexport interface ScalarDimensionOptions {\n  min: number;\n  max: number;\n}\n\nexport interface TextDimensionOptions {\n  // anything?\n}\n\nexport enum TextDimensionMode {\n  Fixed = 'fixed',\n  Field = 'field',\n  Template = 'template',\n}\n\nexport interface TextDimensionConfig extends BaseDimensionConfig<string> {\n  mode: TextDimensionMode;\n}\n\nexport const defaultTextConfig: TextDimensionConfig = Object.freeze({\n  fixed: '',\n  mode: TextDimensionMode.Field,\n  field: '',\n});\n\n/** Use the color value from field configs */\nexport interface ColorDimensionConfig extends BaseDimensionConfig<string> {}\n\n/** Places that use the value */\nexport interface ResourceDimensionOptions {\n  resourceType: MediaType;\n  folderName?: ResourceFolderName;\n  placeholderText?: string;\n  placeholderValue?: string;\n  // If you want your icon to be driven by value of a field\n  showSourceRadio?: boolean;\n}\n\nexport enum ResourceDimensionMode {\n  Fixed = 'fixed',\n  Field = 'field',\n  Mapping = 'mapping',\n  // pattern? uses field in the pattern\n}\n\n/** Get the path to a resource (URL) */\nexport interface ResourceDimensionConfig extends BaseDimensionConfig<string> {\n  mode: ResourceDimensionMode;\n}\n\nexport enum ResourceFolderName {\n  Icon = 'img/icons/unicons',\n  IOT = 'img/icons/iot',\n  Marker = 'img/icons/marker',\n  BG = 'img/bg',\n}\n\nexport enum MediaType {\n  Icon = 'icon',\n  Image = 'image',\n}\n\nexport enum PickerTabType {\n  Folder = 'folder',\n  URL = 'url',\n  Upload = 'upload',\n}\n\nexport enum ResourcePickerSize {\n  SMALL = 'small',\n  NORMAL = 'normal',\n}\n"],"mappings":"AAkCA,WAAYA,kBAAZ;AAKA;;WALYA,kB;EAAAA,kB;EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAmBZ,WAAYC,mBAAZ;;WAAYA,mB;EAAAA,mB;EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAmBZ,WAAYC,iBAAZ;;WAAYA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAUZ,OAAO,MAAMC,iBAAsC,GAAGC,MAAM,CAACC,MAAP,CAAc;EAClEC,KAAK,EAAE,EAD2D;EAElEC,IAAI,EAAEL,iBAAiB,CAACM,KAF0C;EAGlEC,KAAK,EAAE;AAH2D,CAAd,CAA/C;AAMP;;AAaA,WAAYC,qBAAZ;AAOA;;WAPYA,qB;EAAAA,qB;EAAAA,qB;EAAAA,qB;GAAAA,qB,KAAAA,qB;;AAYZ,WAAYC,kBAAZ;;WAAYA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAOZ,WAAYC,SAAZ;;WAAYA,S;EAAAA,S;EAAAA,S;GAAAA,S,KAAAA,S;;AAKZ,WAAYC,aAAZ;;WAAYA,a;EAAAA,a;EAAAA,a;EAAAA,a;GAAAA,a,KAAAA,a;;AAMZ,WAAYC,kBAAZ;;WAAYA,kB;EAAAA,kB;EAAAA,kB;GAAAA,kB,KAAAA,kB"},"metadata":{},"sourceType":"module"}