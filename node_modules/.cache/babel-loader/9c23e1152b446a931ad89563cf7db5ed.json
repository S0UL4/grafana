{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { ColorDimensionEditor } from 'app/features/dimensions/editors/ColorDimensionEditor';\nimport { TextDimensionEditor } from 'app/features/dimensions/editors/TextDimensionEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport let Align;\n\n(function (Align) {\n  Align[\"Left\"] = \"left\";\n  Align[\"Center\"] = \"center\";\n  Align[\"Right\"] = \"right\";\n})(Align || (Align = {}));\n\nexport let VAlign;\n\n(function (VAlign) {\n  VAlign[\"Top\"] = \"top\";\n  VAlign[\"Middle\"] = \"middle\";\n  VAlign[\"Bottom\"] = \"bottom\";\n})(VAlign || (VAlign = {}));\n\nclass TextBoxDisplay extends PureComponent {\n  render() {\n    const {\n      data\n    } = this.props;\n    const styles = getStyles(config.theme2, data);\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: styles.container,\n      children: /*#__PURE__*/_jsx(\"span\", {\n        className: styles.span,\n        children: data === null || data === void 0 ? void 0 : data.text\n      })\n    });\n  }\n\n}\n\nconst getStyles = stylesFactory((theme, data) => ({\n  container: css`\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    display: table;\n  `,\n  span: css`\n    display: table-cell;\n    vertical-align: ${data.valign};\n    text-align: ${data.align};\n    font-size: ${data === null || data === void 0 ? void 0 : data.size}px;\n    color: ${data === null || data === void 0 ? void 0 : data.color};\n  `\n}));\nexport const textBoxItem = {\n  id: 'text-box',\n  name: 'Text',\n  description: 'Text box',\n  display: TextBoxDisplay,\n  defaultSize: {\n    width: 240,\n    height: 160\n  },\n  getNewOptions: options => Object.assign({\n    background: {\n      color: {\n        fixed: 'grey'\n      }\n    }\n  }, options, {\n    config: {\n      align: Align.Left,\n      valign: VAlign.Middle\n    }\n  }),\n  // Called when data changes\n  prepareData: (ctx, cfg) => {\n    var _cfg$align, _cfg$valign;\n\n    const data = {\n      text: cfg.text ? ctx.getText(cfg.text).value() : '',\n      align: (_cfg$align = cfg.align) !== null && _cfg$align !== void 0 ? _cfg$align : Align.Center,\n      valign: (_cfg$valign = cfg.valign) !== null && _cfg$valign !== void 0 ? _cfg$valign : VAlign.Middle,\n      size: cfg.size\n    };\n\n    if (cfg.color) {\n      data.color = ctx.getColor(cfg.color).value();\n    }\n\n    return data;\n  },\n  // Heatmap overlay options\n  registerOptionsUI: builder => {\n    const category = ['Text box'];\n    builder.addCustomEditor({\n      category,\n      id: 'textSelector',\n      path: 'config.text',\n      name: 'Text',\n      editor: TextDimensionEditor\n    }).addCustomEditor({\n      category,\n      id: 'config.color',\n      path: 'config.color',\n      name: 'Text color',\n      editor: ColorDimensionEditor,\n      settings: {},\n      defaultValue: {}\n    }).addRadio({\n      category,\n      path: 'config.align',\n      name: 'Align text',\n      settings: {\n        options: [{\n          value: Align.Left,\n          label: 'Left'\n        }, {\n          value: Align.Center,\n          label: 'Center'\n        }, {\n          value: Align.Right,\n          label: 'Right'\n        }]\n      },\n      defaultValue: Align.Left\n    }).addRadio({\n      category,\n      path: 'config.valign',\n      name: 'Vertical align',\n      settings: {\n        options: [{\n          value: VAlign.Top,\n          label: 'Top'\n        }, {\n          value: VAlign.Middle,\n          label: 'Middle'\n        }, {\n          value: VAlign.Bottom,\n          label: 'Bottom'\n        }]\n      },\n      defaultValue: VAlign.Middle\n    }).addNumberInput({\n      category,\n      path: 'config.size',\n      name: 'Text size',\n      settings: {\n        placeholder: 'Auto'\n      }\n    });\n  }\n};","map":{"version":3,"names":["css","React","PureComponent","stylesFactory","config","ColorDimensionEditor","TextDimensionEditor","Align","VAlign","TextBoxDisplay","render","data","props","styles","getStyles","theme2","container","span","text","theme","valign","align","size","color","textBoxItem","id","name","description","display","defaultSize","width","height","getNewOptions","options","background","fixed","Left","Middle","prepareData","ctx","cfg","getText","value","Center","getColor","registerOptionsUI","builder","category","addCustomEditor","path","editor","settings","defaultValue","addRadio","label","Right","Top","Bottom","addNumberInput","placeholder"],"sources":["/home/soula/grafana/public/app/features/canvas/elements/textBox.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { DimensionContext } from 'app/features/dimensions/context';\nimport { ColorDimensionEditor } from 'app/features/dimensions/editors/ColorDimensionEditor';\nimport { TextDimensionEditor } from 'app/features/dimensions/editors/TextDimensionEditor';\nimport { ColorDimensionConfig, TextDimensionConfig } from 'app/features/dimensions/types';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\n\nexport enum Align {\n  Left = 'left',\n  Center = 'center',\n  Right = 'right',\n}\n\nexport enum VAlign {\n  Top = 'top',\n  Middle = 'middle',\n  Bottom = 'bottom',\n}\n\ninterface TextBoxData {\n  text?: string;\n  color?: string;\n  size?: number; // 0 or missing will \"auto size\"\n  align: Align;\n  valign: VAlign;\n}\n\ninterface TextBoxConfig {\n  text?: TextDimensionConfig;\n  color?: ColorDimensionConfig;\n  size?: number; // 0 or missing will \"auto size\"\n  align: Align;\n  valign: VAlign;\n}\n\nclass TextBoxDisplay extends PureComponent<CanvasElementProps<TextBoxConfig, TextBoxData>> {\n  render() {\n    const { data } = this.props;\n    const styles = getStyles(config.theme2, data);\n    return (\n      <div className={styles.container}>\n        <span className={styles.span}>{data?.text}</span>\n      </div>\n    );\n  }\n}\nconst getStyles = stylesFactory((theme: GrafanaTheme2, data) => ({\n  container: css`\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    display: table;\n  `,\n  span: css`\n    display: table-cell;\n    vertical-align: ${data.valign};\n    text-align: ${data.align};\n    font-size: ${data?.size}px;\n    color: ${data?.color};\n  `,\n}));\nexport const textBoxItem: CanvasElementItem<TextBoxConfig, TextBoxData> = {\n  id: 'text-box',\n  name: 'Text',\n  description: 'Text box',\n\n  display: TextBoxDisplay,\n\n  defaultSize: {\n    width: 240,\n    height: 160,\n  },\n\n  getNewOptions: (options) => ({\n    background: {\n      color: {\n        fixed: 'grey',\n      },\n    },\n    ...options,\n    config: {\n      align: Align.Left,\n      valign: VAlign.Middle,\n    },\n  }),\n\n  // Called when data changes\n  prepareData: (ctx: DimensionContext, cfg: TextBoxConfig) => {\n    const data: TextBoxData = {\n      text: cfg.text ? ctx.getText(cfg.text).value() : '',\n      align: cfg.align ?? Align.Center,\n      valign: cfg.valign ?? VAlign.Middle,\n      size: cfg.size,\n    };\n\n    if (cfg.color) {\n      data.color = ctx.getColor(cfg.color).value();\n    }\n\n    return data;\n  },\n\n  // Heatmap overlay options\n  registerOptionsUI: (builder) => {\n    const category = ['Text box'];\n    builder\n      .addCustomEditor({\n        category,\n        id: 'textSelector',\n        path: 'config.text',\n        name: 'Text',\n        editor: TextDimensionEditor,\n      })\n      .addCustomEditor({\n        category,\n        id: 'config.color',\n        path: 'config.color',\n        name: 'Text color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {},\n      })\n      .addRadio({\n        category,\n        path: 'config.align',\n        name: 'Align text',\n        settings: {\n          options: [\n            { value: Align.Left, label: 'Left' },\n            { value: Align.Center, label: 'Center' },\n            { value: Align.Right, label: 'Right' },\n          ],\n        },\n        defaultValue: Align.Left,\n      })\n      .addRadio({\n        category,\n        path: 'config.valign',\n        name: 'Vertical align',\n        settings: {\n          options: [\n            { value: VAlign.Top, label: 'Top' },\n            { value: VAlign.Middle, label: 'Middle' },\n            { value: VAlign.Bottom, label: 'Bottom' },\n          ],\n        },\n        defaultValue: VAlign.Middle,\n      })\n      .addNumberInput({\n        category,\n        path: 'config.size',\n        name: 'Text size',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}