{"ast":null,"code":"var _p, _Alert, _p2, _a, _hr, _br, _br2, _br3, _br4, _br5, _br6, _h, _br7, _br8, _Icon;\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { AppEvents } from '@grafana/data';\nimport { Alert, Button, Checkbox, ClipboardButton, Field, FieldSet, Icon, Input, Switch } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { appEvents } from 'app/core/core';\nimport { dispatch } from 'app/store/store';\nimport { dashboardHasTemplateVariables, generatePublicDashboardUrl, getPublicDashboardConfig, publicDashboardPersisted, savePublicDashboardConfig } from './SharePublicDashboardUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const SharePublicDashboard = props => {\n  const dashboardVariables = props.dashboard.getVariables();\n  const [publicDashboard, setPublicDashboardConfig] = useState({\n    isEnabled: false,\n    uid: '',\n    dashboardUid: props.dashboard.uid\n  });\n  const [acknowledgements, setAcknowledgements] = useState({\n    public: false,\n    datasources: false,\n    usage: false\n  });\n  useEffect(() => {\n    getPublicDashboardConfig(props.dashboard.uid, setPublicDashboardConfig).catch();\n  }, [props.dashboard.uid]);\n\n  const onSavePublicConfig = () => {\n    if (dashboardHasTemplateVariables(dashboardVariables)) {\n      dispatch(notifyApp(createErrorNotification('This dashboard cannot be made public because it has template variables')));\n      return;\n    }\n\n    savePublicDashboardConfig(props.dashboard.uid, publicDashboard, setPublicDashboardConfig).catch();\n  };\n\n  const onShareUrlCopy = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  const onAcknowledge = useCallback((field, checked) => {\n    setAcknowledgements(Object.assign({}, acknowledgements, {\n      [field]: checked\n    }));\n  }, [acknowledgements]); // check if all conditions have been acknowledged\n\n  const acknowledged = () => {\n    return acknowledgements.public && acknowledgements.datasources && acknowledgements.usage;\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n      children: \"Welcome to Grafana public dashboards alpha!\"\n    })), dashboardHasTemplateVariables(dashboardVariables) ? _Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n      severity: \"warning\",\n      title: \"dashboard cannot be public\",\n      children: \"This dashboard cannot be made public because it has template variables\"\n    })) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_p2 || (_p2 = /*#__PURE__*/_jsx(\"p\", {\n        children: \"To allow the current dashboard to be published publicly, toggle the switch. For now we do not support template variables or frontend datasources.\"\n      })), \"We'd love your feedback. To share, please comment on this\", ' ', _a || (_a = /*#__PURE__*/_jsx(\"a\", {\n        href: \"https://github.com/grafana/grafana/discussions/49253\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        className: \"text-link\",\n        children: \"github discussion\"\n      })), _hr || (_hr = /*#__PURE__*/_jsx(\"hr\", {})), !publicDashboardPersisted(publicDashboard) && /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"Before you click Save, please acknowledge the following information: \", _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsxs(FieldSet, {\n          children: [_br2 || (_br2 = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(Checkbox, {\n              label: \"Your entire dashboard will be public\",\n              value: acknowledgements.public,\n              onChange: e => onAcknowledge('public', e.currentTarget.checked)\n            })\n          }), _br3 || (_br3 = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(Checkbox, {\n              label: \"Publishing currently only works with a subset of datasources\",\n              value: acknowledgements.datasources,\n              description: \"Learn more about public datasources\",\n              onChange: e => onAcknowledge('datasources', e.currentTarget.checked)\n            })\n          }), _br4 || (_br4 = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsx(Checkbox, {\n            label: \"Making your dashboard public will cause queries to run each time the dashboard is viewed which may increase costs\",\n            value: acknowledgements.usage,\n            description: \"Learn more about query caching\",\n            onChange: e => onAcknowledge('usage', e.currentTarget.checked)\n          }), _br5 || (_br5 = /*#__PURE__*/_jsx(\"br\", {})), _br6 || (_br6 = /*#__PURE__*/_jsx(\"br\", {}))]\n        })]\n      }), (publicDashboardPersisted(publicDashboard) || acknowledged()) && /*#__PURE__*/_jsxs(\"div\", {\n        children: [_h || (_h = /*#__PURE__*/_jsx(\"h4\", {\n          className: \"share-modal-info-text\",\n          children: \"Public Dashboard Configuration\"\n        })), /*#__PURE__*/_jsxs(FieldSet, {\n          children: [\"Time Range\", _br7 || (_br7 = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsxs(\"div\", {\n            style: {\n              padding: '5px'\n            },\n            children: [/*#__PURE__*/_jsx(Input, {\n              value: props.dashboard.time.from,\n              disabled: true,\n              addonBefore: /*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  width: '50px',\n                  display: 'flex',\n                  alignItems: 'center',\n                  padding: '5px'\n                },\n                children: \"From:\"\n              })\n            }), /*#__PURE__*/_jsx(Input, {\n              value: props.dashboard.time.to,\n              disabled: true,\n              addonBefore: /*#__PURE__*/_jsx(\"span\", {\n                style: {\n                  width: '50px',\n                  display: 'flex',\n                  alignItems: 'center',\n                  padding: '5px'\n                },\n                children: \"To:\"\n              })\n            })]\n          }), _br8 || (_br8 = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsx(Field, {\n            label: \"Enabled\",\n            description: \"Configures whether current dashboard can be available publicly\",\n            children: /*#__PURE__*/_jsx(Switch, {\n              disabled: dashboardHasTemplateVariables(dashboardVariables),\n              value: publicDashboard === null || publicDashboard === void 0 ? void 0 : publicDashboard.isEnabled,\n              onChange: () => setPublicDashboardConfig(Object.assign({}, publicDashboard, {\n                isEnabled: !publicDashboard.isEnabled\n              }))\n            })\n          }), publicDashboardPersisted(publicDashboard) && publicDashboard.isEnabled && /*#__PURE__*/_jsx(Field, {\n            label: \"Link URL\",\n            children: /*#__PURE__*/_jsx(Input, {\n              value: generatePublicDashboardUrl(publicDashboard),\n              readOnly: true,\n              addonAfter: /*#__PURE__*/_jsxs(ClipboardButton, {\n                variant: \"primary\",\n                getText: () => {\n                  return generatePublicDashboardUrl(publicDashboard);\n                },\n                onClipboardCopy: onShareUrlCopy,\n                children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n                  name: \"copy\"\n                })), \" Copy\"]\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(Button, {\n          onClick: onSavePublicConfig,\n          children: \"Save Sharing Configuration\"\n        })]\n      })]\n    })]\n  });\n};","map":{"version":3,"names":["React","useCallback","useEffect","useState","AppEvents","Alert","Button","Checkbox","ClipboardButton","Field","FieldSet","Icon","Input","Switch","notifyApp","createErrorNotification","appEvents","dispatch","dashboardHasTemplateVariables","generatePublicDashboardUrl","getPublicDashboardConfig","publicDashboardPersisted","savePublicDashboardConfig","SharePublicDashboard","props","dashboardVariables","dashboard","getVariables","publicDashboard","setPublicDashboardConfig","isEnabled","uid","dashboardUid","acknowledgements","setAcknowledgements","public","datasources","usage","catch","onSavePublicConfig","onShareUrlCopy","emit","alertSuccess","onAcknowledge","field","checked","acknowledged","e","currentTarget","padding","time","from","width","display","alignItems","to"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/ShareModal/SharePublicDashboard.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\n\nimport { AppEvents } from '@grafana/data';\nimport { Alert, Button, Checkbox, ClipboardButton, Field, FieldSet, Icon, Input, Switch } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { appEvents } from 'app/core/core';\nimport { dispatch } from 'app/store/store';\n\nimport {\n  dashboardHasTemplateVariables,\n  generatePublicDashboardUrl,\n  getPublicDashboardConfig,\n  PublicDashboard,\n  publicDashboardPersisted,\n  savePublicDashboardConfig,\n} from './SharePublicDashboardUtils';\nimport { ShareModalTabProps } from './types';\n\ninterface Props extends ShareModalTabProps {}\n\ninterface Acknowledgements {\n  public: boolean;\n  datasources: boolean;\n  usage: boolean;\n}\n\nexport const SharePublicDashboard = (props: Props) => {\n  const dashboardVariables = props.dashboard.getVariables();\n  const [publicDashboard, setPublicDashboardConfig] = useState<PublicDashboard>({\n    isEnabled: false,\n    uid: '',\n    dashboardUid: props.dashboard.uid,\n  });\n  const [acknowledgements, setAcknowledgements] = useState<Acknowledgements>({\n    public: false,\n    datasources: false,\n    usage: false,\n  });\n\n  useEffect(() => {\n    getPublicDashboardConfig(props.dashboard.uid, setPublicDashboardConfig).catch();\n  }, [props.dashboard.uid]);\n\n  const onSavePublicConfig = () => {\n    if (dashboardHasTemplateVariables(dashboardVariables)) {\n      dispatch(\n        notifyApp(createErrorNotification('This dashboard cannot be made public because it has template variables'))\n      );\n      return;\n    }\n\n    savePublicDashboardConfig(props.dashboard.uid, publicDashboard, setPublicDashboardConfig).catch();\n  };\n\n  const onShareUrlCopy = () => {\n    appEvents.emit(AppEvents.alertSuccess, ['Content copied to clipboard']);\n  };\n\n  const onAcknowledge = useCallback(\n    (field: string, checked: boolean) => {\n      setAcknowledgements({ ...acknowledgements, [field]: checked });\n    },\n    [acknowledgements]\n  );\n\n  // check if all conditions have been acknowledged\n  const acknowledged = () => {\n    return acknowledgements.public && acknowledgements.datasources && acknowledgements.usage;\n  };\n\n  return (\n    <>\n      <p>Welcome to Grafana public dashboards alpha!</p>\n      {dashboardHasTemplateVariables(dashboardVariables) ? (\n        <Alert severity=\"warning\" title=\"dashboard cannot be public\">\n          This dashboard cannot be made public because it has template variables\n        </Alert>\n      ) : (\n        <>\n          <p>\n            To allow the current dashboard to be published publicly, toggle the switch. For now we do not support\n            template variables or frontend datasources.\n          </p>\n          We&apos;d love your feedback. To share, please comment on this{' '}\n          <a\n            href=\"https://github.com/grafana/grafana/discussions/49253\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"text-link\"\n          >\n            github discussion\n          </a>\n          <hr />\n          {!publicDashboardPersisted(publicDashboard) && (\n            <div>\n              Before you click Save, please acknowledge the following information: <br />\n              <FieldSet>\n                <br />\n                <div>\n                  <Checkbox\n                    label=\"Your entire dashboard will be public\"\n                    value={acknowledgements.public}\n                    onChange={(e) => onAcknowledge('public', e.currentTarget.checked)}\n                  />\n                </div>\n                <br />\n                <div>\n                  <Checkbox\n                    label=\"Publishing currently only works with a subset of datasources\"\n                    value={acknowledgements.datasources}\n                    description=\"Learn more about public datasources\"\n                    onChange={(e) => onAcknowledge('datasources', e.currentTarget.checked)}\n                  />\n                </div>\n                <br />\n                <Checkbox\n                  label=\"Making your dashboard public will cause queries to run each time the dashboard is viewed which may increase costs\"\n                  value={acknowledgements.usage}\n                  description=\"Learn more about query caching\"\n                  onChange={(e) => onAcknowledge('usage', e.currentTarget.checked)}\n                />\n                <br />\n                <br />\n              </FieldSet>\n            </div>\n          )}\n          {(publicDashboardPersisted(publicDashboard) || acknowledged()) && (\n            <div>\n              <h4 className=\"share-modal-info-text\">Public Dashboard Configuration</h4>\n              <FieldSet>\n                Time Range\n                <br />\n                <div style={{ padding: '5px' }}>\n                  <Input\n                    value={props.dashboard.time.from}\n                    disabled={true}\n                    addonBefore={\n                      <span style={{ width: '50px', display: 'flex', alignItems: 'center', padding: '5px' }}>\n                        From:\n                      </span>\n                    }\n                  />\n                  <Input\n                    value={props.dashboard.time.to}\n                    disabled={true}\n                    addonBefore={\n                      <span style={{ width: '50px', display: 'flex', alignItems: 'center', padding: '5px' }}>To:</span>\n                    }\n                  />\n                </div>\n                <br />\n                <Field label=\"Enabled\" description=\"Configures whether current dashboard can be available publicly\">\n                  <Switch\n                    disabled={dashboardHasTemplateVariables(dashboardVariables)}\n                    value={publicDashboard?.isEnabled}\n                    onChange={() =>\n                      setPublicDashboardConfig({\n                        ...publicDashboard,\n                        isEnabled: !publicDashboard.isEnabled,\n                      })\n                    }\n                  />\n                </Field>\n                {publicDashboardPersisted(publicDashboard) && publicDashboard.isEnabled && (\n                  <Field label=\"Link URL\">\n                    <Input\n                      value={generatePublicDashboardUrl(publicDashboard)}\n                      readOnly\n                      addonAfter={\n                        <ClipboardButton\n                          variant=\"primary\"\n                          getText={() => {\n                            return generatePublicDashboardUrl(publicDashboard);\n                          }}\n                          onClipboardCopy={onShareUrlCopy}\n                        >\n                          <Icon name=\"copy\" /> Copy\n                        </ClipboardButton>\n                      }\n                    />\n                  </Field>\n                )}\n              </FieldSet>\n              <Button onClick={onSavePublicConfig}>Save Sharing Configuration</Button>\n            </div>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}