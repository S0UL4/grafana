{"ast":null,"code":"/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent, depth) {\n  const chars = ['A', 'B', 'C'];\n  const children = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1)\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children, query, queryIndex) {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result = [];\n  let namesToMatch = [nodeQuery]; // handle glob queries\n\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query) {\n  if (query.indexOf('value') === 0) {\n    return [{\n      name: query,\n      children: []\n    }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}","map":{"version":3,"names":["buildMetricTree","parent","depth","chars","children","letter","nodeName","push","name","queryTree","query","queryIndex","length","nodeQuery","result","namesToMatch","startsWith","replace","split","node","nameToMatch","indexOf","pattern","regex","RegExp","test","concat","queryMetricTree"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/metricTree.ts"],"sourcesContent":["export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n"],"mappings":"AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAT,CAAyBC,MAAzB,EAAyCC,KAAzC,EAAoE;EAClE,MAAMC,KAAK,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAd;EACA,MAAMC,QAAoB,GAAG,EAA7B;;EAEA,IAAIF,KAAK,GAAG,CAAZ,EAAe;IACb,OAAO,EAAP;EACD;;EAED,KAAK,MAAMG,MAAX,IAAqBF,KAArB,EAA4B;IAC1B,MAAMG,QAAQ,GAAI,GAAEL,MAAO,GAAEI,MAAO,EAApC;IACAD,QAAQ,CAACG,IAAT,CAAc;MACZC,IAAI,EAAEF,QADM;MAEZF,QAAQ,EAAEJ,eAAe,CAACM,QAAD,EAAWJ,KAAK,GAAG,CAAnB;IAFb,CAAd;EAID;;EAED,OAAOE,QAAP;AACD;;AAED,SAASK,SAAT,CAAmBL,QAAnB,EAAyCM,KAAzC,EAA0DC,UAA1D,EAA0F;EACxF,IAAIA,UAAU,IAAID,KAAK,CAACE,MAAxB,EAAgC;IAC9B,OAAOR,QAAP;EACD;;EAED,IAAIM,KAAK,CAACC,UAAD,CAAL,KAAsB,GAA1B,EAA+B;IAC7B,OAAOP,QAAP;EACD;;EAED,MAAMS,SAAS,GAAGH,KAAK,CAACC,UAAD,CAAvB;EACA,IAAIG,MAAkB,GAAG,EAAzB;EACA,IAAIC,YAAY,GAAG,CAACF,SAAD,CAAnB,CAXwF,CAaxF;;EACA,IAAIA,SAAS,CAACG,UAAV,CAAqB,GAArB,CAAJ,EAA+B;IAC7BD,YAAY,GAAGF,SAAS,CAACI,OAAV,CAAkB,QAAlB,EAA4B,EAA5B,EAAgCC,KAAhC,CAAsC,GAAtC,CAAf;EACD;;EAED,KAAK,MAAMC,IAAX,IAAmBf,QAAnB,EAA6B;IAC3B,KAAK,MAAMgB,WAAX,IAA0BL,YAA1B,EAAwC;MACtC,IAAIK,WAAW,CAACC,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAAlC,EAAqC;QACnC,MAAMC,OAAO,GAAGF,WAAW,CAACH,OAAZ,CAAoB,GAApB,EAAyB,EAAzB,CAAhB;QACA,MAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,IAAGF,OAAQ,IAAvB,EAA4B,IAA5B,CAAd;;QACA,IAAIC,KAAK,CAACE,IAAN,CAAWN,IAAI,CAACX,IAAhB,CAAJ,EAA2B;UACzBM,MAAM,GAAGA,MAAM,CAACY,MAAP,CAAcjB,SAAS,CAAC,CAACU,IAAD,CAAD,EAAST,KAAT,EAAgBC,UAAU,GAAG,CAA7B,CAAvB,CAAT;QACD;MACF,CAND,MAMO,IAAIQ,IAAI,CAACX,IAAL,KAAcY,WAAlB,EAA+B;QACpCN,MAAM,GAAGA,MAAM,CAACY,MAAP,CAAcjB,SAAS,CAACU,IAAI,CAACf,QAAN,EAAgBM,KAAhB,EAAuBC,UAAU,GAAG,CAApC,CAAvB,CAAT;MACD;IACF;EACF;;EAED,OAAOG,MAAP;AACD;;AAED,OAAO,SAASa,eAAT,CAAyBjB,KAAzB,EAAoD;EACzD,IAAIA,KAAK,CAACW,OAAN,CAAc,OAAd,MAA2B,CAA/B,EAAkC;IAChC,OAAO,CAAC;MAAEb,IAAI,EAAEE,KAAR;MAAeN,QAAQ,EAAE;IAAzB,CAAD,CAAP;EACD;;EAED,MAAMA,QAAQ,GAAGJ,eAAe,CAAC,EAAD,EAAK,CAAL,CAAhC;EACA,OAAOS,SAAS,CAACL,QAAD,EAAWM,KAAK,CAACQ,KAAN,CAAY,GAAZ,CAAX,EAA6B,CAA7B,CAAhB;AACD"},"metadata":{},"sourceType":"module"}