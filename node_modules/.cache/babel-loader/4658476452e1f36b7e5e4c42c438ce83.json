{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { DataTransformerID, standardTransformers } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\nimport { useAllFieldNamesFromDataFrames } from '../utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const GroupingToMatrixTransformerEditor = ({\n  input,\n  options,\n  onChange\n}) => {\n  const fieldNames = useAllFieldNamesFromDataFrames(input).map(item => ({\n    label: item,\n    value: item\n  }));\n  const onSelectColumn = useCallback(value => {\n    onChange(Object.assign({}, options, {\n      columnField: value.value\n    }));\n  }, [onChange, options]);\n  const onSelectRow = useCallback(value => {\n    onChange(Object.assign({}, options, {\n      rowField: value.value\n    }));\n  }, [onChange, options]);\n  const onSelectValue = useCallback(value => {\n    onChange(Object.assign({}, options, {\n      valueField: value.value\n    }));\n  }, [onChange, options]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(InlineFieldRow, {\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        label: \"Column\",\n        labelWidth: 8,\n        children: /*#__PURE__*/_jsx(Select, {\n          options: fieldNames,\n          value: options.columnField,\n          onChange: onSelectColumn,\n          isClearable: true\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Row\",\n        labelWidth: 8,\n        children: /*#__PURE__*/_jsx(Select, {\n          options: fieldNames,\n          value: options.rowField,\n          onChange: onSelectRow,\n          isClearable: true\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Cell Value\",\n        labelWidth: 10,\n        children: /*#__PURE__*/_jsx(Select, {\n          options: fieldNames,\n          value: options.valueField,\n          onChange: onSelectValue,\n          isClearable: true\n        })\n      })]\n    })\n  });\n};\nexport const groupingToMatrixTransformRegistryItem = {\n  id: DataTransformerID.groupingToMatrix,\n  editor: GroupingToMatrixTransformerEditor,\n  transformation: standardTransformers.groupingToMatrixTransformer,\n  name: 'Grouping to matrix',\n  description: `Takes a three fields combination and produces a Matrix`\n};","map":{"version":3,"names":["React","useCallback","DataTransformerID","standardTransformers","InlineField","InlineFieldRow","Select","useAllFieldNamesFromDataFrames","GroupingToMatrixTransformerEditor","input","options","onChange","fieldNames","map","item","label","value","onSelectColumn","columnField","onSelectRow","rowField","onSelectValue","valueField","groupingToMatrixTransformRegistryItem","id","groupingToMatrix","editor","transformation","groupingToMatrixTransformer","name","description"],"sources":["/home/soula/grafana/public/app/features/transformers/editors/GroupingToMatrixTransformerEditor.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\n\nimport {\n  DataTransformerID,\n  SelectableValue,\n  standardTransformers,\n  TransformerRegistryItem,\n  TransformerUIProps,\n  GroupingToMatrixTransformerOptions,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { useAllFieldNamesFromDataFrames } from '../utils';\n\nexport const GroupingToMatrixTransformerEditor: React.FC<TransformerUIProps<GroupingToMatrixTransformerOptions>> = ({\n  input,\n  options,\n  onChange,\n}) => {\n  const fieldNames = useAllFieldNamesFromDataFrames(input).map((item: string) => ({ label: item, value: item }));\n\n  const onSelectColumn = useCallback(\n    (value: SelectableValue<string>) => {\n      onChange({\n        ...options,\n        columnField: value.value,\n      });\n    },\n    [onChange, options]\n  );\n\n  const onSelectRow = useCallback(\n    (value: SelectableValue<string>) => {\n      onChange({\n        ...options,\n        rowField: value.value,\n      });\n    },\n    [onChange, options]\n  );\n\n  const onSelectValue = useCallback(\n    (value: SelectableValue<string>) => {\n      onChange({\n        ...options,\n        valueField: value.value,\n      });\n    },\n    [onChange, options]\n  );\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Column\" labelWidth={8}>\n          <Select options={fieldNames} value={options.columnField} onChange={onSelectColumn} isClearable />\n        </InlineField>\n        <InlineField label=\"Row\" labelWidth={8}>\n          <Select options={fieldNames} value={options.rowField} onChange={onSelectRow} isClearable />\n        </InlineField>\n        <InlineField label=\"Cell Value\" labelWidth={10}>\n          <Select options={fieldNames} value={options.valueField} onChange={onSelectValue} isClearable />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n};\n\nexport const groupingToMatrixTransformRegistryItem: TransformerRegistryItem<GroupingToMatrixTransformerOptions> = {\n  id: DataTransformerID.groupingToMatrix,\n  editor: GroupingToMatrixTransformerEditor,\n  transformation: standardTransformers.groupingToMatrixTransformer,\n  name: 'Grouping to matrix',\n  description: `Takes a three fields combination and produces a Matrix`,\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AAEA,SACEC,iBADF,EAGEC,oBAHF,QAOO,eAPP;AAQA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,MAAtC,QAAoD,aAApD;AAEA,SAASC,8BAAT,QAA+C,UAA/C;;;;AAEA,OAAO,MAAMC,iCAAmG,GAAG,CAAC;EAClHC,KADkH;EAElHC,OAFkH;EAGlHC;AAHkH,CAAD,KAI7G;EACJ,MAAMC,UAAU,GAAGL,8BAA8B,CAACE,KAAD,CAA9B,CAAsCI,GAAtC,CAA2CC,IAAD,KAAmB;IAAEC,KAAK,EAAED,IAAT;IAAeE,KAAK,EAAEF;EAAtB,CAAnB,CAA1C,CAAnB;EAEA,MAAMG,cAAc,GAAGhB,WAAW,CAC/Be,KAAD,IAAoC;IAClCL,QAAQ,mBACHD,OADG;MAENQ,WAAW,EAAEF,KAAK,CAACA;IAFb,GAAR;EAID,CAN+B,EAOhC,CAACL,QAAD,EAAWD,OAAX,CAPgC,CAAlC;EAUA,MAAMS,WAAW,GAAGlB,WAAW,CAC5Be,KAAD,IAAoC;IAClCL,QAAQ,mBACHD,OADG;MAENU,QAAQ,EAAEJ,KAAK,CAACA;IAFV,GAAR;EAID,CAN4B,EAO7B,CAACL,QAAD,EAAWD,OAAX,CAP6B,CAA/B;EAUA,MAAMW,aAAa,GAAGpB,WAAW,CAC9Be,KAAD,IAAoC;IAClCL,QAAQ,mBACHD,OADG;MAENY,UAAU,EAAEN,KAAK,CAACA;IAFZ,GAAR;EAID,CAN8B,EAO/B,CAACL,QAAD,EAAWD,OAAX,CAP+B,CAAjC;EAUA,oBACE;IAAA,uBACE,MAAC,cAAD;MAAA,wBACE,KAAC,WAAD;QAAa,KAAK,EAAC,QAAnB;QAA4B,UAAU,EAAE,CAAxC;QAAA,uBACE,KAAC,MAAD;UAAQ,OAAO,EAAEE,UAAjB;UAA6B,KAAK,EAAEF,OAAO,CAACQ,WAA5C;UAAyD,QAAQ,EAAED,cAAnE;UAAmF,WAAW;QAA9F;MADF,EADF,eAIE,KAAC,WAAD;QAAa,KAAK,EAAC,KAAnB;QAAyB,UAAU,EAAE,CAArC;QAAA,uBACE,KAAC,MAAD;UAAQ,OAAO,EAAEL,UAAjB;UAA6B,KAAK,EAAEF,OAAO,CAACU,QAA5C;UAAsD,QAAQ,EAAED,WAAhE;UAA6E,WAAW;QAAxF;MADF,EAJF,eAOE,KAAC,WAAD;QAAa,KAAK,EAAC,YAAnB;QAAgC,UAAU,EAAE,EAA5C;QAAA,uBACE,KAAC,MAAD;UAAQ,OAAO,EAAEP,UAAjB;UAA6B,KAAK,EAAEF,OAAO,CAACY,UAA5C;UAAwD,QAAQ,EAAED,aAAlE;UAAiF,WAAW;QAA5F;MADF,EAPF;IAAA;EADF,EADF;AAeD,CApDM;AAsDP,OAAO,MAAME,qCAAkG,GAAG;EAChHC,EAAE,EAAEtB,iBAAiB,CAACuB,gBAD0F;EAEhHC,MAAM,EAAElB,iCAFwG;EAGhHmB,cAAc,EAAExB,oBAAoB,CAACyB,2BAH2E;EAIhHC,IAAI,EAAE,oBAJ0G;EAKhHC,WAAW,EAAG;AALkG,CAA3G"},"metadata":{},"sourceType":"module"}