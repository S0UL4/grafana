{"ast":null,"code":"import React, { useEffect, useState, useRef } from 'react';\nimport { EditorRows, EditorRow, EditorFieldGroup } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { InlineFieldRow } from '@grafana/ui';\nimport SubscriptionField from '../SubscriptionField';\nimport QueryField from './QueryField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst ERROR_SOURCE = 'arg-subscriptions';\n\nconst ArgQueryEditor = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError\n}) => {\n  const fetchedRef = useRef(false);\n  const [subscriptions, setSubscriptions] = useState([]);\n  useEffect(() => {\n    if (fetchedRef.current) {\n      return;\n    }\n\n    fetchedRef.current = true;\n    datasource.azureMonitorDatasource.getSubscriptions().then(results => {\n      var _query$subscriptions;\n\n      const fetchedSubscriptions = results.map(v => ({\n        label: v.text,\n        value: v.value,\n        description: v.value\n      }));\n      setSubscriptions(fetchedSubscriptions);\n      setError(ERROR_SOURCE, undefined);\n\n      if (!((_query$subscriptions = query.subscriptions) !== null && _query$subscriptions !== void 0 && _query$subscriptions.length) && fetchedSubscriptions !== null && fetchedSubscriptions !== void 0 && fetchedSubscriptions.length) {\n        var _query$subscription;\n\n        onChange(Object.assign({}, query, {\n          subscriptions: [(_query$subscription = query.subscription) !== null && _query$subscription !== void 0 ? _query$subscription : fetchedSubscriptions[0].value]\n        }));\n      }\n    }).catch(err => setError(ERROR_SOURCE, err));\n  }, [datasource, onChange, query, setError]);\n\n  if (config.featureToggles.azureMonitorExperimentalUI) {\n    return /*#__PURE__*/_jsxs(\"span\", {\n      \"data-testid\": \"azure-monitor-arg-query-editor-with-experimental-ui\",\n      children: [/*#__PURE__*/_jsx(EditorRows, {\n        children: /*#__PURE__*/_jsx(EditorRow, {\n          children: /*#__PURE__*/_jsx(EditorFieldGroup, {\n            children: /*#__PURE__*/_jsx(SubscriptionField, {\n              multiSelect: true,\n              subscriptions: subscriptions,\n              query: query,\n              datasource: datasource,\n              subscriptionId: subscriptionId,\n              variableOptionGroup: variableOptionGroup,\n              onQueryChange: onChange,\n              setError: setError\n            })\n          })\n        })\n      }), /*#__PURE__*/_jsx(QueryField, {\n        query: query,\n        datasource: datasource,\n        subscriptionId: subscriptionId,\n        variableOptionGroup: variableOptionGroup,\n        onQueryChange: onChange,\n        setError: setError\n      })]\n    });\n  } else {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      \"data-testid\": \"azure-monitor-arg-query-editor\",\n      children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n        children: /*#__PURE__*/_jsx(SubscriptionField, {\n          multiSelect: true,\n          subscriptions: subscriptions,\n          query: query,\n          datasource: datasource,\n          subscriptionId: subscriptionId,\n          variableOptionGroup: variableOptionGroup,\n          onQueryChange: onChange,\n          setError: setError\n        })\n      }), /*#__PURE__*/_jsx(QueryField, {\n        query: query,\n        datasource: datasource,\n        subscriptionId: subscriptionId,\n        variableOptionGroup: variableOptionGroup,\n        onQueryChange: onChange,\n        setError: setError\n      })]\n    });\n  }\n};\n\nexport default ArgQueryEditor;","map":{"version":3,"names":["React","useEffect","useState","useRef","EditorRows","EditorRow","EditorFieldGroup","config","InlineFieldRow","SubscriptionField","QueryField","ERROR_SOURCE","ArgQueryEditor","query","datasource","subscriptionId","variableOptionGroup","onChange","setError","fetchedRef","subscriptions","setSubscriptions","current","azureMonitorDatasource","getSubscriptions","then","results","fetchedSubscriptions","map","v","label","text","value","description","undefined","length","subscription","catch","err","featureToggles","azureMonitorExperimentalUI"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ArgQueryEditor/ArgQueryEditor.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\nimport { EditorRows, EditorRow, EditorFieldGroup } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { InlineFieldRow } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery } from '../../types';\nimport SubscriptionField from '../SubscriptionField';\n\nimport QueryField from './QueryField';\n\ninterface ArgQueryEditorProps {\n  query: AzureMonitorQuery;\n  datasource: Datasource;\n  subscriptionId?: string;\n  onChange: (newQuery: AzureMonitorQuery) => void;\n  variableOptionGroup: { label: string; options: AzureMonitorOption[] };\n  setError: (source: string, error: AzureMonitorErrorish | undefined) => void;\n}\n\nconst ERROR_SOURCE = 'arg-subscriptions';\nconst ArgQueryEditor: React.FC<ArgQueryEditorProps> = ({\n  query,\n  datasource,\n  subscriptionId,\n  variableOptionGroup,\n  onChange,\n  setError,\n}) => {\n  const fetchedRef = useRef(false);\n  const [subscriptions, setSubscriptions] = useState<AzureMonitorOption[]>([]);\n\n  useEffect(() => {\n    if (fetchedRef.current) {\n      return;\n    }\n\n    fetchedRef.current = true;\n    datasource.azureMonitorDatasource\n      .getSubscriptions()\n      .then((results) => {\n        const fetchedSubscriptions = results.map((v) => ({ label: v.text, value: v.value, description: v.value }));\n        setSubscriptions(fetchedSubscriptions);\n        setError(ERROR_SOURCE, undefined);\n\n        if (!query.subscriptions?.length && fetchedSubscriptions?.length) {\n          onChange({\n            ...query,\n            subscriptions: [query.subscription ?? fetchedSubscriptions[0].value],\n          });\n        }\n      })\n      .catch((err) => setError(ERROR_SOURCE, err));\n  }, [datasource, onChange, query, setError]);\n\n  if (config.featureToggles.azureMonitorExperimentalUI) {\n    return (\n      <span data-testid=\"azure-monitor-arg-query-editor-with-experimental-ui\">\n        <EditorRows>\n          <EditorRow>\n            <EditorFieldGroup>\n              <SubscriptionField\n                multiSelect\n                subscriptions={subscriptions}\n                query={query}\n                datasource={datasource}\n                subscriptionId={subscriptionId}\n                variableOptionGroup={variableOptionGroup}\n                onQueryChange={onChange}\n                setError={setError}\n              />\n            </EditorFieldGroup>\n          </EditorRow>\n        </EditorRows>\n        <QueryField\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n      </span>\n    );\n  } else {\n    return (\n      <div data-testid=\"azure-monitor-arg-query-editor\">\n        <InlineFieldRow>\n          <SubscriptionField\n            multiSelect\n            subscriptions={subscriptions}\n            query={query}\n            datasource={datasource}\n            subscriptionId={subscriptionId}\n            variableOptionGroup={variableOptionGroup}\n            onQueryChange={onChange}\n            setError={setError}\n          />\n        </InlineFieldRow>\n\n        <QueryField\n          query={query}\n          datasource={datasource}\n          subscriptionId={subscriptionId}\n          variableOptionGroup={variableOptionGroup}\n          onQueryChange={onChange}\n          setError={setError}\n        />\n      </div>\n    );\n  }\n};\n\nexport default ArgQueryEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}