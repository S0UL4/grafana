{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { dataFrameFromJSON, getDisplayProcessor } from '@grafana/data';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { Button, CodeEditor, Table, useStyles, Field } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const RuleTest = props => {\n  const [response, setResponse] = useState();\n  const [data, setData] = useState();\n  const styles = useStyles(getStyles);\n\n  const onBlur = text => {\n    setData(text);\n  };\n\n  const onClick = () => {\n    getBackendSrv().post(`api/live/pipeline-convert-test`, {\n      channelRules: [props.rule],\n      channel: props.rule.pattern,\n      data: data\n    }).then(data => {\n      const t = data.channelFrames;\n\n      if (t) {\n        setResponse(t.map(f => {\n          const frame = dataFrameFromJSON(f.frame);\n\n          for (const field of frame.fields) {\n            field.display = getDisplayProcessor({\n              field,\n              theme: config.theme2\n            });\n          }\n\n          return {\n            channel: f.channel,\n            frame\n          };\n        }));\n      }\n    }).catch(e => {\n      setResponse(e);\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(CodeEditor, {\n      height: 100,\n      value: \"\",\n      showLineNumbers: true,\n      readOnly: false,\n      language: \"json\",\n      showMiniMap: false,\n      onBlur: onBlur\n    }), /*#__PURE__*/_jsx(Button, {\n      onClick: onClick,\n      className: styles.margin,\n      children: \"Test\"\n    }), (response === null || response === void 0 ? void 0 : response.length) && response.map(r => /*#__PURE__*/_jsx(Field, {\n      label: r.channel,\n      children: /*#__PURE__*/_jsx(Table, {\n        data: r.frame,\n        width: 700,\n        height: Math.min(10 * r.frame.length + 10, 150),\n        showTypeIcons: true\n      })\n    }, r.channel))]\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    margin: css`\n      margin-bottom: 15px;\n    `\n  };\n};","map":{"version":3,"names":["css","React","useState","dataFrameFromJSON","getDisplayProcessor","getBackendSrv","config","Button","CodeEditor","Table","useStyles","Field","RuleTest","props","response","setResponse","data","setData","styles","getStyles","onBlur","text","onClick","post","channelRules","rule","channel","pattern","then","t","channelFrames","map","f","frame","field","fields","display","theme","theme2","catch","e","margin","length","r","Math","min"],"sources":["/home/soula/grafana/public/app/features/live/pages/RuleTest.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { dataFrameFromJSON, getDisplayProcessor, GrafanaTheme } from '@grafana/data';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { Button, CodeEditor, Table, useStyles, Field } from '@grafana/ui';\n\nimport { ChannelFrame, Rule } from './types';\n\ninterface Props {\n  rule: Rule;\n}\n\nexport const RuleTest: React.FC<Props> = (props) => {\n  const [response, setResponse] = useState<ChannelFrame[]>();\n  const [data, setData] = useState<string>();\n  const styles = useStyles(getStyles);\n\n  const onBlur = (text: string) => {\n    setData(text);\n  };\n\n  const onClick = () => {\n    getBackendSrv()\n      .post(`api/live/pipeline-convert-test`, {\n        channelRules: [props.rule],\n        channel: props.rule.pattern,\n        data: data,\n      })\n      .then((data: any) => {\n        const t = data.channelFrames as any[];\n        if (t) {\n          setResponse(\n            t.map((f) => {\n              const frame = dataFrameFromJSON(f.frame);\n              for (const field of frame.fields) {\n                field.display = getDisplayProcessor({ field, theme: config.theme2 });\n              }\n              return { channel: f.channel, frame };\n            })\n          );\n        }\n      })\n      .catch((e) => {\n        setResponse(e);\n      });\n  };\n\n  return (\n    <div>\n      <CodeEditor\n        height={100}\n        value=\"\"\n        showLineNumbers={true}\n        readOnly={false}\n        language=\"json\"\n        showMiniMap={false}\n        onBlur={onBlur}\n      />\n\n      <Button onClick={onClick} className={styles.margin}>\n        Test\n      </Button>\n\n      {response?.length &&\n        response.map((r) => (\n          <Field key={r.channel} label={r.channel}>\n            <Table data={r.frame} width={700} height={Math.min(10 * r.frame.length + 10, 150)} showTypeIcons></Table>\n          </Field>\n        ))}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    margin: css`\n      margin-bottom: 15px;\n    `,\n  };\n};\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAqE,eAArE;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,kBAAtC;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,KAA7B,EAAoCC,SAApC,EAA+CC,KAA/C,QAA4D,aAA5D;;;AAQA,OAAO,MAAMC,QAAyB,GAAIC,KAAD,IAAW;EAClD,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,EAAxC;EACA,MAAM,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,EAAhC;EACA,MAAMgB,MAAM,GAAGR,SAAS,CAACS,SAAD,CAAxB;;EAEA,MAAMC,MAAM,GAAIC,IAAD,IAAkB;IAC/BJ,OAAO,CAACI,IAAD,CAAP;EACD,CAFD;;EAIA,MAAMC,OAAO,GAAG,MAAM;IACpBjB,aAAa,GACVkB,IADH,CACS,gCADT,EAC0C;MACtCC,YAAY,EAAE,CAACX,KAAK,CAACY,IAAP,CADwB;MAEtCC,OAAO,EAAEb,KAAK,CAACY,IAAN,CAAWE,OAFkB;MAGtCX,IAAI,EAAEA;IAHgC,CAD1C,EAMGY,IANH,CAMSZ,IAAD,IAAe;MACnB,MAAMa,CAAC,GAAGb,IAAI,CAACc,aAAf;;MACA,IAAID,CAAJ,EAAO;QACLd,WAAW,CACTc,CAAC,CAACE,GAAF,CAAOC,CAAD,IAAO;UACX,MAAMC,KAAK,GAAG9B,iBAAiB,CAAC6B,CAAC,CAACC,KAAH,CAA/B;;UACA,KAAK,MAAMC,KAAX,IAAoBD,KAAK,CAACE,MAA1B,EAAkC;YAChCD,KAAK,CAACE,OAAN,GAAgBhC,mBAAmB,CAAC;cAAE8B,KAAF;cAASG,KAAK,EAAE/B,MAAM,CAACgC;YAAvB,CAAD,CAAnC;UACD;;UACD,OAAO;YAAEZ,OAAO,EAAEM,CAAC,CAACN,OAAb;YAAsBO;UAAtB,CAAP;QACD,CAND,CADS,CAAX;MASD;IACF,CAnBH,EAoBGM,KApBH,CAoBUC,CAAD,IAAO;MACZzB,WAAW,CAACyB,CAAD,CAAX;IACD,CAtBH;EAuBD,CAxBD;;EA0BA,oBACE;IAAA,wBACE,KAAC,UAAD;MACE,MAAM,EAAE,GADV;MAEE,KAAK,EAAC,EAFR;MAGE,eAAe,EAAE,IAHnB;MAIE,QAAQ,EAAE,KAJZ;MAKE,QAAQ,EAAC,MALX;MAME,WAAW,EAAE,KANf;MAOE,MAAM,EAAEpB;IAPV,EADF,eAWE,KAAC,MAAD;MAAQ,OAAO,EAAEE,OAAjB;MAA0B,SAAS,EAAEJ,MAAM,CAACuB,MAA5C;MAAA;IAAA,EAXF,EAeG,CAAA3B,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAE4B,MAAV,KACC5B,QAAQ,CAACiB,GAAT,CAAcY,CAAD,iBACX,KAAC,KAAD;MAAuB,KAAK,EAAEA,CAAC,CAACjB,OAAhC;MAAA,uBACE,KAAC,KAAD;QAAO,IAAI,EAAEiB,CAAC,CAACV,KAAf;QAAsB,KAAK,EAAE,GAA7B;QAAkC,MAAM,EAAEW,IAAI,CAACC,GAAL,CAAS,KAAKF,CAAC,CAACV,KAAF,CAAQS,MAAb,GAAsB,EAA/B,EAAmC,GAAnC,CAA1C;QAAmF,aAAa;MAAhG;IADF,GAAYC,CAAC,CAACjB,OAAd,CADF,CAhBJ;EAAA,EADF;AAwBD,CA3DM;;AA6DP,MAAMP,SAAS,GAAIkB,KAAD,IAAyB;EACzC,OAAO;IACLI,MAAM,EAAEzC,GAAI;AAChB;AACA;EAHS,CAAP;AAKD,CAND"},"metadata":{},"sourceType":"module"}