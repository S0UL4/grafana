{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useState, useMemo } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Modal, TabContent, TabsBar, Tab, Button, useStyles } from '@grafana/ui';\nimport { RuleSettingsArray } from './RuleSettingsArray';\nimport { RuleSettingsEditor } from './RuleSettingsEditor';\nimport { RuleTest } from './RuleTest';\nimport { getPipeLineEntities } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst tabs = [{\n  label: 'Converter',\n  type: 'converter',\n  isConverter: true\n}, {\n  label: 'Processors',\n  type: 'frameProcessors'\n}, {\n  label: 'Outputs',\n  type: 'frameOutputs'\n}, {\n  label: 'Test',\n  isTest: true,\n  icon: 'flask'\n}];\nexport const RuleModal = props => {\n  var _rule$settings;\n\n  const {\n    isOpen,\n    onClose,\n    clickColumn\n  } = props;\n  const [rule, setRule] = useState(props.rule);\n  const [activeTab, setActiveTab] = useState(tabs.find(t => t.type === clickColumn)); // to show color of Save button\n\n  const [hasChange, setChange] = useState(false);\n  const [ruleSetting, setRuleSetting] = useState(activeTab !== null && activeTab !== void 0 && activeTab.type ? rule === null || rule === void 0 ? void 0 : (_rule$settings = rule.settings) === null || _rule$settings === void 0 ? void 0 : _rule$settings[activeTab.type] : undefined);\n  const [entitiesInfo, setEntitiesInfo] = useState();\n  const styles = useStyles(getStyles);\n\n  const onRuleSettingChange = value => {\n    setChange(true);\n\n    if (activeTab !== null && activeTab !== void 0 && activeTab.type) {\n      setRule(Object.assign({}, rule, {\n        settings: Object.assign({}, rule.settings, {\n          [activeTab === null || activeTab === void 0 ? void 0 : activeTab.type]: value\n        })\n      }));\n    }\n\n    setRuleSetting(value);\n  }; // load pipeline entities info\n\n\n  useMemo(() => {\n    getPipeLineEntities().then(data => {\n      setEntitiesInfo(data);\n    });\n  }, []);\n\n  const onSave = () => {\n    getBackendSrv().put(`api/live/channel-rules`, rule).then(() => {\n      setChange(false);\n      onClose();\n    }).catch(e => console.error(e));\n  };\n\n  return /*#__PURE__*/_jsxs(Modal, {\n    isOpen: isOpen,\n    title: rule.pattern,\n    onDismiss: onClose,\n    closeOnEscape: true,\n    children: [/*#__PURE__*/_jsx(TabsBar, {\n      children: tabs.map((tab, index) => {\n        return /*#__PURE__*/_jsx(Tab, {\n          label: tab.label,\n          active: tab === activeTab,\n          icon: tab.icon,\n          onChangeTab: () => {\n            setActiveTab(tab);\n\n            if (tab.type) {\n              var _rule$settings2;\n\n              // to notify children of the new rule\n              setRuleSetting(rule === null || rule === void 0 ? void 0 : (_rule$settings2 = rule.settings) === null || _rule$settings2 === void 0 ? void 0 : _rule$settings2[tab.type]);\n            }\n          }\n        }, index);\n      })\n    }), /*#__PURE__*/_jsxs(TabContent, {\n      children: [entitiesInfo && rule && activeTab && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [(activeTab === null || activeTab === void 0 ? void 0 : activeTab.isTest) && /*#__PURE__*/_jsx(RuleTest, {\n          rule: rule\n        }), activeTab.isConverter && /*#__PURE__*/_jsx(RuleSettingsEditor, {\n          onChange: onRuleSettingChange,\n          value: ruleSetting,\n          ruleType: 'converter',\n          entitiesInfo: entitiesInfo\n        }), !activeTab.isConverter && activeTab.type && /*#__PURE__*/_jsx(RuleSettingsArray, {\n          onChange: onRuleSettingChange,\n          value: ruleSetting,\n          ruleType: activeTab.type,\n          entitiesInfo: entitiesInfo\n        })]\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: onSave,\n        className: styles.save,\n        variant: hasChange ? 'primary' : 'secondary',\n        children: \"Save\"\n      })]\n    })]\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    save: css`\n      margin-top: 5px;\n    `\n  };\n};","map":{"version":3,"names":["css","React","useState","useMemo","getBackendSrv","Modal","TabContent","TabsBar","Tab","Button","useStyles","RuleSettingsArray","RuleSettingsEditor","RuleTest","getPipeLineEntities","tabs","label","type","isConverter","isTest","icon","RuleModal","props","isOpen","onClose","clickColumn","rule","setRule","activeTab","setActiveTab","find","t","hasChange","setChange","ruleSetting","setRuleSetting","settings","undefined","entitiesInfo","setEntitiesInfo","styles","getStyles","onRuleSettingChange","value","then","data","onSave","put","catch","e","console","error","pattern","map","tab","index","save","theme"],"sources":["/home/soula/grafana/public/app/features/live/pages/RuleModal.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useMemo } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Modal, TabContent, TabsBar, Tab, Button, useStyles } from '@grafana/ui';\n\nimport { RuleSettingsArray } from './RuleSettingsArray';\nimport { RuleSettingsEditor } from './RuleSettingsEditor';\nimport { RuleTest } from './RuleTest';\nimport { Rule, RuleType, PipeLineEntitiesInfo, RuleSetting } from './types';\nimport { getPipeLineEntities } from './utils';\n\ninterface Props {\n  rule: Rule;\n  isOpen: boolean;\n  onClose: () => void;\n  clickColumn: RuleType;\n}\ninterface TabInfo {\n  label: string;\n  type?: RuleType;\n  isTest?: boolean;\n  isConverter?: boolean;\n  icon?: string;\n}\nconst tabs: TabInfo[] = [\n  { label: 'Converter', type: 'converter', isConverter: true },\n  { label: 'Processors', type: 'frameProcessors' },\n  { label: 'Outputs', type: 'frameOutputs' },\n  { label: 'Test', isTest: true, icon: 'flask' },\n];\n\nexport const RuleModal: React.FC<Props> = (props) => {\n  const { isOpen, onClose, clickColumn } = props;\n  const [rule, setRule] = useState<Rule>(props.rule);\n  const [activeTab, setActiveTab] = useState<TabInfo | undefined>(tabs.find((t) => t.type === clickColumn));\n  // to show color of Save button\n  const [hasChange, setChange] = useState<boolean>(false);\n  const [ruleSetting, setRuleSetting] = useState<any>(activeTab?.type ? rule?.settings?.[activeTab.type] : undefined);\n  const [entitiesInfo, setEntitiesInfo] = useState<PipeLineEntitiesInfo>();\n  const styles = useStyles(getStyles);\n\n  const onRuleSettingChange = (value: RuleSetting | RuleSetting[]) => {\n    setChange(true);\n    if (activeTab?.type) {\n      setRule({\n        ...rule,\n        settings: {\n          ...rule.settings,\n          [activeTab?.type]: value,\n        },\n      });\n    }\n    setRuleSetting(value);\n  };\n\n  // load pipeline entities info\n  useMemo(() => {\n    getPipeLineEntities().then((data) => {\n      setEntitiesInfo(data);\n    });\n  }, []);\n\n  const onSave = () => {\n    getBackendSrv()\n      .put(`api/live/channel-rules`, rule)\n      .then(() => {\n        setChange(false);\n        onClose();\n      })\n      .catch((e) => console.error(e));\n  };\n\n  return (\n    <Modal isOpen={isOpen} title={rule.pattern} onDismiss={onClose} closeOnEscape>\n      <TabsBar>\n        {tabs.map((tab, index) => {\n          return (\n            <Tab\n              key={index}\n              label={tab.label}\n              active={tab === activeTab}\n              icon={tab.icon as any}\n              onChangeTab={() => {\n                setActiveTab(tab);\n                if (tab.type) {\n                  // to notify children of the new rule\n                  setRuleSetting(rule?.settings?.[tab.type]);\n                }\n              }}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent>\n        {entitiesInfo && rule && activeTab && (\n          <>\n            {activeTab?.isTest && <RuleTest rule={rule} />}\n            {activeTab.isConverter && (\n              <RuleSettingsEditor\n                onChange={onRuleSettingChange}\n                value={ruleSetting}\n                ruleType={'converter'}\n                entitiesInfo={entitiesInfo}\n              />\n            )}\n            {!activeTab.isConverter && activeTab.type && (\n              <RuleSettingsArray\n                onChange={onRuleSettingChange}\n                value={ruleSetting}\n                ruleType={activeTab.type}\n                entitiesInfo={entitiesInfo}\n              />\n            )}\n          </>\n        )}\n        <Button onClick={onSave} className={styles.save} variant={hasChange ? 'primary' : 'secondary'}>\n          Save\n        </Button>\n      </TabContent>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    save: css`\n      margin-top: 5px;\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}