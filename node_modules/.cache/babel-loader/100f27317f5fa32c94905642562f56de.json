{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { Component } from 'react';\nimport { ReplaySubject, Subscription } from 'rxjs';\nimport { config, locationService } from '@grafana/runtime/src';\nimport { Button, PanelContextRoot, stylesFactory } from '@grafana/ui';\nimport { Scene } from 'app/features/canvas/runtime/scene';\nimport { PanelEditEnteredEvent, PanelEditExitedEvent } from 'app/types/events';\nimport { InlineEdit } from './InlineEdit';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nlet canvasInstances = [];\nlet activeCanvasPanel = undefined;\nlet isInlineEditOpen = false;\nexport const activePanelSubject = new ReplaySubject(1);\nexport class CanvasPanel extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"panelContext\", {});\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"subs\", new Subscription());\n\n    _defineProperty(this, \"needsReload\", false);\n\n    _defineProperty(this, \"styles\", getStyles(config.theme));\n\n    _defineProperty(this, \"isEditing\", locationService.getSearchObject().editPanel !== undefined);\n\n    _defineProperty(this, \"onUpdateScene\", root => {\n      const {\n        onOptionsChange,\n        options\n      } = this.props;\n      onOptionsChange(Object.assign({}, options, {\n        root\n      }));\n      this.setState({\n        refresh: this.state.refresh + 1\n      }); // console.log('send changes', root);\n    });\n\n    _defineProperty(this, \"inlineEditButtonClick\", () => {\n      if (isInlineEditOpen) {\n        this.forceUpdate();\n        this.setActivePanel();\n        return;\n      }\n\n      this.setActivePanel();\n      this.setState({\n        openInlineEdit: true\n      });\n      isInlineEditOpen = true;\n    });\n\n    _defineProperty(this, \"inlineEditButtonClose\", () => {\n      this.setState({\n        openInlineEdit: false\n      });\n      isInlineEditOpen = false;\n    });\n\n    _defineProperty(this, \"setActivePanel\", () => {\n      activeCanvasPanel = this;\n      activePanelSubject.next({\n        panel: this\n      });\n    });\n\n    _defineProperty(this, \"renderInlineEdit\", () => {\n      return /*#__PURE__*/_jsx(InlineEdit, {\n        onClose: () => this.inlineEditButtonClose()\n      });\n    });\n\n    this.state = {\n      refresh: 0,\n      openInlineEdit: false\n    }; // Only the initial options are ever used.\n    // later changes are all controlled by the scene\n\n    this.scene = new Scene(this.props.options.root, this.props.options.inlineEditing, this.onUpdateScene);\n    this.scene.updateSize(props.width, props.height);\n    this.scene.updateData(props.data);\n    this.subs.add(this.props.eventBus.subscribe(PanelEditEnteredEvent, evt => {\n      // Remove current selection when entering edit mode for any panel in dashboard\n      this.scene.clearCurrentSelection();\n      this.inlineEditButtonClose();\n    }));\n    this.subs.add(this.props.eventBus.subscribe(PanelEditExitedEvent, evt => {\n      if (this.props.id === evt.payload) {\n        this.needsReload = true;\n      }\n    }));\n  }\n\n  componentDidMount() {\n    activeCanvasPanel = this;\n    activePanelSubject.next({\n      panel: this\n    });\n    this.panelContext = this.context;\n\n    if (this.panelContext.onInstanceStateChange) {\n      this.panelContext.onInstanceStateChange({\n        scene: this.scene,\n        layer: this.scene.root\n      });\n      this.subs.add(this.scene.selection.subscribe({\n        next: v => {\n          this.panelContext.onInstanceStateChange({\n            scene: this.scene,\n            selected: v,\n            layer: this.scene.root\n          });\n          activeCanvasPanel = this;\n          activePanelSubject.next({\n            panel: this\n          });\n          canvasInstances.forEach(canvasInstance => {\n            if (canvasInstance !== activeCanvasPanel) {\n              canvasInstance.scene.clearCurrentSelection(true);\n            }\n          });\n        }\n      }));\n    }\n\n    canvasInstances.push(this);\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n    isInlineEditOpen = false;\n    canvasInstances = canvasInstances.filter(ci => {\n      var _activeCanvasPanel;\n\n      return ci.props.id !== ((_activeCanvasPanel = activeCanvasPanel) === null || _activeCanvasPanel === void 0 ? void 0 : _activeCanvasPanel.props.id);\n    });\n  } // NOTE, all changes to the scene flow through this function\n  // even the editor gets current state from the same scene instance!\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const {\n      width,\n      height,\n      data\n    } = this.props;\n    let changed = false;\n\n    if (width !== nextProps.width || height !== nextProps.height) {\n      this.scene.updateSize(nextProps.width, nextProps.height);\n      changed = true;\n    }\n\n    if (data !== nextProps.data) {\n      this.scene.updateData(nextProps.data);\n      changed = true;\n    }\n\n    if (this.state.refresh !== nextState.refresh) {\n      changed = true;\n    }\n\n    if (this.state.openInlineEdit !== nextState.openInlineEdit) {\n      changed = true;\n    } // After editing, the options are valid, but the scene was in a different panel or inline editing mode has changed\n\n\n    const shouldUpdateSceneAndPanel = this.needsReload && this.props.options !== nextProps.options;\n    const inlineEditingSwitched = this.props.options.inlineEditing !== nextProps.options.inlineEditing;\n\n    if (shouldUpdateSceneAndPanel || inlineEditingSwitched) {\n      this.needsReload = false;\n      this.scene.load(nextProps.options.root, nextProps.options.inlineEditing);\n      this.scene.updateSize(nextProps.width, nextProps.height);\n      this.scene.updateData(nextProps.data);\n      changed = true;\n\n      if (inlineEditingSwitched && this.props.options.inlineEditing) {\n        var _this$scene$selecto;\n\n        (_this$scene$selecto = this.scene.selecto) === null || _this$scene$selecto === void 0 ? void 0 : _this$scene$selecto.destroy();\n      }\n    }\n\n    return changed;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [this.scene.render(), this.props.options.inlineEditing && !this.isEditing && /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: this.styles.inlineEditButton,\n          children: /*#__PURE__*/_jsx(Button, {\n            size: \"lg\",\n            variant: \"secondary\",\n            icon: \"edit\",\n            \"data-btninlineedit\": this.props.id,\n            onClick: this.inlineEditButtonClick\n          })\n        }), this.state.openInlineEdit && this.renderInlineEdit()]\n      })]\n    });\n  }\n\n}\n\n_defineProperty(CanvasPanel, \"contextType\", PanelContextRoot);\n\nconst getStyles = stylesFactory(theme => ({\n  inlineEditButton: css`\n    position: absolute;\n    bottom: 8px;\n    left: 8px;\n    z-index: 999;\n  `\n}));","map":{"version":3,"names":["css","React","Component","ReplaySubject","Subscription","config","locationService","Button","PanelContextRoot","stylesFactory","Scene","PanelEditEnteredEvent","PanelEditExitedEvent","InlineEdit","canvasInstances","activeCanvasPanel","undefined","isInlineEditOpen","activePanelSubject","CanvasPanel","constructor","props","getStyles","theme","getSearchObject","editPanel","root","onOptionsChange","options","setState","refresh","state","forceUpdate","setActivePanel","openInlineEdit","next","panel","inlineEditButtonClose","scene","inlineEditing","onUpdateScene","updateSize","width","height","updateData","data","subs","add","eventBus","subscribe","evt","clearCurrentSelection","id","payload","needsReload","componentDidMount","panelContext","context","onInstanceStateChange","layer","selection","v","selected","forEach","canvasInstance","push","componentWillUnmount","unsubscribe","filter","ci","shouldComponentUpdate","nextProps","nextState","changed","shouldUpdateSceneAndPanel","inlineEditingSwitched","load","selecto","destroy","render","isEditing","styles","inlineEditButton","inlineEditButtonClick","renderInlineEdit"],"sources":["/home/soula/grafana/public/app/plugins/panel/canvas/CanvasPanel.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { Component } from 'react';\nimport { ReplaySubject, Subscription } from 'rxjs';\n\nimport { GrafanaTheme, PanelProps } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime/src';\nimport { Button, PanelContext, PanelContextRoot, stylesFactory } from '@grafana/ui';\nimport { CanvasFrameOptions } from 'app/features/canvas';\nimport { ElementState } from 'app/features/canvas/runtime/element';\nimport { Scene } from 'app/features/canvas/runtime/scene';\nimport { PanelEditEnteredEvent, PanelEditExitedEvent } from 'app/types/events';\n\nimport { InlineEdit } from './InlineEdit';\nimport { PanelOptions } from './models.gen';\n\ninterface Props extends PanelProps<PanelOptions> {}\n\ninterface State {\n  refresh: number;\n  openInlineEdit: boolean;\n}\n\nexport interface InstanceState {\n  scene: Scene;\n  selected: ElementState[];\n}\n\nexport interface SelectionAction {\n  panel: CanvasPanel;\n}\n\nlet canvasInstances: CanvasPanel[] = [];\nlet activeCanvasPanel: CanvasPanel | undefined = undefined;\nlet isInlineEditOpen = false;\n\nexport const activePanelSubject = new ReplaySubject<SelectionAction>(1);\n\nexport class CanvasPanel extends Component<Props, State> {\n  static contextType = PanelContextRoot;\n  panelContext: PanelContext = {} as PanelContext;\n\n  readonly scene: Scene;\n  private subs = new Subscription();\n  needsReload = false;\n  styles = getStyles(config.theme);\n  isEditing = locationService.getSearchObject().editPanel !== undefined;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      refresh: 0,\n      openInlineEdit: false,\n    };\n\n    // Only the initial options are ever used.\n    // later changes are all controlled by the scene\n    this.scene = new Scene(this.props.options.root, this.props.options.inlineEditing, this.onUpdateScene);\n    this.scene.updateSize(props.width, props.height);\n    this.scene.updateData(props.data);\n\n    this.subs.add(\n      this.props.eventBus.subscribe(PanelEditEnteredEvent, (evt) => {\n        // Remove current selection when entering edit mode for any panel in dashboard\n        this.scene.clearCurrentSelection();\n        this.inlineEditButtonClose();\n      })\n    );\n\n    this.subs.add(\n      this.props.eventBus.subscribe(PanelEditExitedEvent, (evt) => {\n        if (this.props.id === evt.payload) {\n          this.needsReload = true;\n        }\n      })\n    );\n  }\n\n  componentDidMount() {\n    activeCanvasPanel = this;\n    activePanelSubject.next({ panel: this });\n\n    this.panelContext = this.context as PanelContext;\n    if (this.panelContext.onInstanceStateChange) {\n      this.panelContext.onInstanceStateChange({\n        scene: this.scene,\n        layer: this.scene.root,\n      });\n\n      this.subs.add(\n        this.scene.selection.subscribe({\n          next: (v) => {\n            this.panelContext.onInstanceStateChange!({\n              scene: this.scene,\n              selected: v,\n              layer: this.scene.root,\n            });\n\n            activeCanvasPanel = this;\n            activePanelSubject.next({ panel: this });\n\n            canvasInstances.forEach((canvasInstance) => {\n              if (canvasInstance !== activeCanvasPanel) {\n                canvasInstance.scene.clearCurrentSelection(true);\n              }\n            });\n          },\n        })\n      );\n    }\n\n    canvasInstances.push(this);\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n    isInlineEditOpen = false;\n    canvasInstances = canvasInstances.filter((ci) => ci.props.id !== activeCanvasPanel?.props.id);\n  }\n\n  // NOTE, all changes to the scene flow through this function\n  // even the editor gets current state from the same scene instance!\n  onUpdateScene = (root: CanvasFrameOptions) => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      root,\n    });\n\n    this.setState({ refresh: this.state.refresh + 1 });\n    // console.log('send changes', root);\n  };\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    const { width, height, data } = this.props;\n    let changed = false;\n\n    if (width !== nextProps.width || height !== nextProps.height) {\n      this.scene.updateSize(nextProps.width, nextProps.height);\n      changed = true;\n    }\n    if (data !== nextProps.data) {\n      this.scene.updateData(nextProps.data);\n      changed = true;\n    }\n\n    if (this.state.refresh !== nextState.refresh) {\n      changed = true;\n    }\n\n    if (this.state.openInlineEdit !== nextState.openInlineEdit) {\n      changed = true;\n    }\n\n    // After editing, the options are valid, but the scene was in a different panel or inline editing mode has changed\n    const shouldUpdateSceneAndPanel = this.needsReload && this.props.options !== nextProps.options;\n    const inlineEditingSwitched = this.props.options.inlineEditing !== nextProps.options.inlineEditing;\n    if (shouldUpdateSceneAndPanel || inlineEditingSwitched) {\n      this.needsReload = false;\n      this.scene.load(nextProps.options.root, nextProps.options.inlineEditing);\n      this.scene.updateSize(nextProps.width, nextProps.height);\n      this.scene.updateData(nextProps.data);\n      changed = true;\n\n      if (inlineEditingSwitched && this.props.options.inlineEditing) {\n        this.scene.selecto?.destroy();\n      }\n    }\n\n    return changed;\n  }\n\n  inlineEditButtonClick = () => {\n    if (isInlineEditOpen) {\n      this.forceUpdate();\n      this.setActivePanel();\n      return;\n    }\n\n    this.setActivePanel();\n    this.setState({ openInlineEdit: true });\n    isInlineEditOpen = true;\n  };\n\n  inlineEditButtonClose = () => {\n    this.setState({ openInlineEdit: false });\n    isInlineEditOpen = false;\n  };\n\n  setActivePanel = () => {\n    activeCanvasPanel = this;\n    activePanelSubject.next({ panel: this });\n  };\n\n  renderInlineEdit = () => {\n    return <InlineEdit onClose={() => this.inlineEditButtonClose()} />;\n  };\n\n  render() {\n    return (\n      <>\n        {this.scene.render()}\n        {this.props.options.inlineEditing && !this.isEditing && (\n          <div>\n            <div className={this.styles.inlineEditButton}>\n              <Button\n                size=\"lg\"\n                variant=\"secondary\"\n                icon=\"edit\"\n                data-btninlineedit={this.props.id}\n                onClick={this.inlineEditButtonClick}\n              />\n            </div>\n            {this.state.openInlineEdit && this.renderInlineEdit()}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  inlineEditButton: css`\n    position: absolute;\n    bottom: 8px;\n    left: 8px;\n    z-index: 999;\n  `,\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}