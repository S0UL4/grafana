{"ast":null,"code":"const _excluded = [\"index\", \"id\", \"state\", \"global\", \"rootStateKey\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cloneDeep } from 'lodash';\nimport { dispatch } from '../../../store/store';\nimport { optionPickerFactory } from '../pickers';\nimport { setOptionAsCurrent, setOptionFromUrl } from '../state/actions';\nimport { toKeyedVariableIdentifier } from '../utils';\nimport { IntervalVariableEditor } from './IntervalVariableEditor';\nimport { updateAutoValue, updateIntervalVariableOptions } from './actions';\nimport { initialIntervalVariableModelState, intervalVariableReducer } from './reducer';\nexport const createIntervalVariableAdapter = () => {\n  return {\n    id: 'interval',\n    description: 'Define a timespan interval (ex 1m, 1h, 1d)',\n    name: 'Interval',\n    initialState: initialIntervalVariableModelState,\n    reducer: intervalVariableReducer,\n    picker: optionPickerFactory(),\n    editor: IntervalVariableEditor,\n    dependsOn: () => {\n      return false;\n    },\n    setValue: async (variable, option, emitChanges = false) => {\n      await dispatch(updateAutoValue(toKeyedVariableIdentifier(variable)));\n      await dispatch(setOptionAsCurrent(toKeyedVariableIdentifier(variable), option, emitChanges));\n    },\n    setValueFromUrl: async (variable, urlValue) => {\n      await dispatch(updateAutoValue(toKeyedVariableIdentifier(variable)));\n      await dispatch(setOptionFromUrl(toKeyedVariableIdentifier(variable), urlValue));\n    },\n    updateOptions: async variable => {\n      await dispatch(updateIntervalVariableOptions(toKeyedVariableIdentifier(variable)));\n    },\n    getSaveModel: variable => {\n      const _cloneDeep = cloneDeep(variable),\n            rest = _objectWithoutPropertiesLoose(_cloneDeep, _excluded);\n\n      return rest;\n    },\n    getValueForUrl: variable => {\n      return variable.current.value;\n    }\n  };\n};","map":{"version":3,"names":["cloneDeep","dispatch","optionPickerFactory","setOptionAsCurrent","setOptionFromUrl","toKeyedVariableIdentifier","IntervalVariableEditor","updateAutoValue","updateIntervalVariableOptions","initialIntervalVariableModelState","intervalVariableReducer","createIntervalVariableAdapter","id","description","name","initialState","reducer","picker","editor","dependsOn","setValue","variable","option","emitChanges","setValueFromUrl","urlValue","updateOptions","getSaveModel","rest","getValueForUrl","current","value"],"sources":["/home/soula/grafana/public/app/features/variables/interval/adapter.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\n\nimport { dispatch } from '../../../store/store';\nimport { VariableAdapter } from '../adapters';\nimport { optionPickerFactory } from '../pickers';\nimport { setOptionAsCurrent, setOptionFromUrl } from '../state/actions';\nimport { IntervalVariableModel } from '../types';\nimport { toKeyedVariableIdentifier } from '../utils';\n\nimport { IntervalVariableEditor } from './IntervalVariableEditor';\nimport { updateAutoValue, updateIntervalVariableOptions } from './actions';\nimport { initialIntervalVariableModelState, intervalVariableReducer } from './reducer';\n\nexport const createIntervalVariableAdapter = (): VariableAdapter<IntervalVariableModel> => {\n  return {\n    id: 'interval',\n    description: 'Define a timespan interval (ex 1m, 1h, 1d)',\n    name: 'Interval',\n    initialState: initialIntervalVariableModelState,\n    reducer: intervalVariableReducer,\n    picker: optionPickerFactory<IntervalVariableModel>(),\n    editor: IntervalVariableEditor,\n    dependsOn: () => {\n      return false;\n    },\n    setValue: async (variable, option, emitChanges = false) => {\n      await dispatch(updateAutoValue(toKeyedVariableIdentifier(variable)));\n      await dispatch(setOptionAsCurrent(toKeyedVariableIdentifier(variable), option, emitChanges));\n    },\n    setValueFromUrl: async (variable, urlValue) => {\n      await dispatch(updateAutoValue(toKeyedVariableIdentifier(variable)));\n      await dispatch(setOptionFromUrl(toKeyedVariableIdentifier(variable), urlValue));\n    },\n    updateOptions: async (variable) => {\n      await dispatch(updateIntervalVariableOptions(toKeyedVariableIdentifier(variable)));\n    },\n    getSaveModel: (variable) => {\n      const { index, id, state, global, rootStateKey, ...rest } = cloneDeep(variable);\n      return rest;\n    },\n    getValueForUrl: (variable) => {\n      return variable.current.value;\n    },\n  };\n};\n"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,SAASC,mBAAT,QAAoC,YAApC;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,kBAArD;AAEA,SAASC,yBAAT,QAA0C,UAA1C;AAEA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,eAAT,EAA0BC,6BAA1B,QAA+D,WAA/D;AACA,SAASC,iCAAT,EAA4CC,uBAA5C,QAA2E,WAA3E;AAEA,OAAO,MAAMC,6BAA6B,GAAG,MAA8C;EACzF,OAAO;IACLC,EAAE,EAAE,UADC;IAELC,WAAW,EAAE,4CAFR;IAGLC,IAAI,EAAE,UAHD;IAILC,YAAY,EAAEN,iCAJT;IAKLO,OAAO,EAAEN,uBALJ;IAMLO,MAAM,EAAEf,mBAAmB,EANtB;IAOLgB,MAAM,EAAEZ,sBAPH;IAQLa,SAAS,EAAE,MAAM;MACf,OAAO,KAAP;IACD,CAVI;IAWLC,QAAQ,EAAE,OAAOC,QAAP,EAAiBC,MAAjB,EAAyBC,WAAW,GAAG,KAAvC,KAAiD;MACzD,MAAMtB,QAAQ,CAACM,eAAe,CAACF,yBAAyB,CAACgB,QAAD,CAA1B,CAAhB,CAAd;MACA,MAAMpB,QAAQ,CAACE,kBAAkB,CAACE,yBAAyB,CAACgB,QAAD,CAA1B,EAAsCC,MAAtC,EAA8CC,WAA9C,CAAnB,CAAd;IACD,CAdI;IAeLC,eAAe,EAAE,OAAOH,QAAP,EAAiBI,QAAjB,KAA8B;MAC7C,MAAMxB,QAAQ,CAACM,eAAe,CAACF,yBAAyB,CAACgB,QAAD,CAA1B,CAAhB,CAAd;MACA,MAAMpB,QAAQ,CAACG,gBAAgB,CAACC,yBAAyB,CAACgB,QAAD,CAA1B,EAAsCI,QAAtC,CAAjB,CAAd;IACD,CAlBI;IAmBLC,aAAa,EAAE,MAAOL,QAAP,IAAoB;MACjC,MAAMpB,QAAQ,CAACO,6BAA6B,CAACH,yBAAyB,CAACgB,QAAD,CAA1B,CAA9B,CAAd;IACD,CArBI;IAsBLM,YAAY,EAAGN,QAAD,IAAc;MAC1B,mBAA4DrB,SAAS,CAACqB,QAAD,CAArE;MAAA,MAAmDO,IAAnD;;MACA,OAAOA,IAAP;IACD,CAzBI;IA0BLC,cAAc,EAAGR,QAAD,IAAc;MAC5B,OAAOA,QAAQ,CAACS,OAAT,CAAiBC,KAAxB;IACD;EA5BI,CAAP;AA8BD,CA/BM"},"metadata":{},"sourceType":"module"}