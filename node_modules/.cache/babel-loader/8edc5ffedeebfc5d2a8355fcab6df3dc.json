{"ast":null,"code":"/**\n * @preserve jquery-param (c) 2015 KNOWLEDGECODE | MIT\n */\n\n/**\n * Type to represent the value of a single query variable.\n *\n * @public\n */\n\n/**\n * Type to represent the values parsed from the query string.\n *\n * @public\n */\nfunction renderUrl(path, query) {\n  if (query && Object.keys(query).length > 0) {\n    path += '?' + toUrlParams(query);\n  }\n\n  return path;\n}\n\nfunction encodeURIComponentAsAngularJS(val, pctEncodeSpaces) {\n  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');\n}\n\nfunction toUrlParams(a) {\n  const s = [];\n  const rbracket = /\\[\\]$/;\n\n  const isArray = obj => {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  const add = (k, v) => {\n    v = typeof v === 'function' ? v() : v === null ? '' : v === undefined ? '' : v;\n\n    if (typeof v !== 'boolean') {\n      s[s.length] = encodeURIComponentAsAngularJS(k, true) + '=' + encodeURIComponentAsAngularJS(v, true);\n    } else {\n      const valueQueryPart = v ? '' : '=' + encodeURIComponentAsAngularJS('false', true);\n      s[s.length] = encodeURIComponentAsAngularJS(k, true) + valueQueryPart;\n    }\n  };\n\n  const buildParams = (prefix, obj) => {\n    let i, len, key;\n\n    if (prefix) {\n      if (isArray(obj)) {\n        for (i = 0, len = obj.length; i < len; i++) {\n          if (rbracket.test(prefix)) {\n            add(prefix, obj[i]);\n          } else {\n            buildParams(prefix, obj[i]);\n          }\n        }\n      } else if (obj && String(obj) === '[object Object]') {\n        for (key in obj) {\n          buildParams(prefix + '[' + key + ']', obj[key]);\n        }\n      } else {\n        add(prefix, obj);\n      }\n    } else if (isArray(obj)) {\n      for (i = 0, len = obj.length; i < len; i++) {\n        add(obj[i].name, obj[i].value);\n      }\n    } else {\n      for (key in obj) {\n        buildParams(key, obj[key]);\n      }\n    }\n\n    return s;\n  };\n\n  return buildParams('', a).join('&');\n}\n\nfunction appendQueryToUrl(url, stringToAppend) {\n  if (stringToAppend !== undefined && stringToAppend !== null && stringToAppend !== '') {\n    const pos = url.indexOf('?');\n\n    if (pos !== -1) {\n      if (url.length - pos > 1) {\n        url += '&';\n      }\n    } else {\n      url += '?';\n    }\n\n    url += stringToAppend;\n  }\n\n  return url;\n}\n/**\n * Return search part (as object) of current url\n */\n\n\nfunction getUrlSearchParams() {\n  const search = window.location.search.substring(1);\n  const searchParamsSegments = search.split('&');\n  const params = {};\n\n  for (const p of searchParamsSegments) {\n    const keyValuePair = p.split('=');\n\n    if (keyValuePair.length > 1) {\n      // key-value param\n      const key = decodeURIComponent(keyValuePair[0]);\n      const value = decodeURIComponent(keyValuePair[1]);\n\n      if (key in params) {\n        params[key] = [...params[key], value];\n      } else {\n        params[key] = [value];\n      }\n    } else if (keyValuePair.length === 1) {\n      // boolean param\n      const key = decodeURIComponent(keyValuePair[0]);\n      params[key] = true;\n    }\n  }\n\n  return params;\n}\n/**\n * Parses an escaped url query string into key-value pairs.\n * Attribution: Code dervived from https://github.com/angular/angular.js/master/src/Angular.js#L1396\n * @returns {Object.<string,boolean|Array>}\n */\n\n\nexport function parseKeyValue(keyValue) {\n  var obj = {};\n  const parts = (keyValue || '').split('&');\n\n  for (let keyValue of parts) {\n    let splitPoint;\n    let key;\n    let val;\n\n    if (keyValue) {\n      key = keyValue = keyValue.replace(/\\+/g, '%20');\n      splitPoint = keyValue.indexOf('=');\n\n      if (splitPoint !== -1) {\n        key = keyValue.substring(0, splitPoint);\n        val = keyValue.substring(splitPoint + 1);\n      }\n\n      key = tryDecodeURIComponent(key);\n\n      if (key !== undefined) {\n        val = val !== undefined ? tryDecodeURIComponent(val) : true;\n        let parsedVal;\n\n        if (typeof val === 'string' && val !== '') {\n          parsedVal = val === 'true' || val === 'false' ? val === 'true' : val;\n        } else {\n          parsedVal = val;\n        }\n\n        if (!obj.hasOwnProperty(key)) {\n          obj[key] = isNaN(parsedVal) ? val : parsedVal;\n        } else if (Array.isArray(obj[key])) {\n          obj[key].push(val);\n        } else {\n          obj[key] = [obj[key], isNaN(parsedVal) ? val : parsedVal];\n        }\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction tryDecodeURIComponent(value) {\n  try {\n    return decodeURIComponent(value);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport const urlUtil = {\n  renderUrl,\n  toUrlParams,\n  appendQueryToUrl,\n  getUrlSearchParams,\n  parseKeyValue\n};\n/**\n * Create an string that is used in URL to represent the Explore state. This is basically just a stringified json\n * that is that used as a state of a single Explore pane so it does not represent full Explore URL.\n *\n * @param urlState\n * @param compact this parameter is deprecated and will be removed in a future release.\n */\n\nexport function serializeStateToUrlParam(urlState, compact) {\n  if (compact !== undefined) {\n    console.warn('`compact` parameter is deprecated and will be removed in a future release');\n  }\n\n  return JSON.stringify(urlState);\n}","map":{"version":3,"names":["renderUrl","path","query","Object","keys","length","toUrlParams","encodeURIComponentAsAngularJS","val","pctEncodeSpaces","encodeURIComponent","replace","a","s","rbracket","isArray","obj","prototype","toString","call","add","k","v","undefined","valueQueryPart","buildParams","prefix","i","len","key","test","String","name","value","join","appendQueryToUrl","url","stringToAppend","pos","indexOf","getUrlSearchParams","search","window","location","substring","searchParamsSegments","split","params","p","keyValuePair","decodeURIComponent","parseKeyValue","keyValue","parts","splitPoint","tryDecodeURIComponent","parsedVal","hasOwnProperty","isNaN","Array","push","e","urlUtil","serializeStateToUrlParam","urlState","compact","console","warn","JSON","stringify"],"sources":["/home/soula/grafana/packages/grafana-data/src/utils/url.ts"],"sourcesContent":["/**\n * @preserve jquery-param (c) 2015 KNOWLEDGECODE | MIT\n */\n\nimport { ExploreUrlState } from '../types/explore';\n\n/**\n * Type to represent the value of a single query variable.\n *\n * @public\n */\nexport type UrlQueryValue = string | number | boolean | string[] | number[] | boolean[] | undefined | null;\n\n/**\n * Type to represent the values parsed from the query string.\n *\n * @public\n */\nexport type UrlQueryMap = Record<string, UrlQueryValue>;\n\nfunction renderUrl(path: string, query: UrlQueryMap | undefined): string {\n  if (query && Object.keys(query).length > 0) {\n    path += '?' + toUrlParams(query);\n  }\n  return path;\n}\n\nfunction encodeURIComponentAsAngularJS(val: string, pctEncodeSpaces?: boolean) {\n  return encodeURIComponent(val)\n    .replace(/%40/gi, '@')\n    .replace(/%3A/gi, ':')\n    .replace(/%24/g, '$')\n    .replace(/%2C/gi, ',')\n    .replace(/%3B/gi, ';')\n    .replace(/%20/g, pctEncodeSpaces ? '%20' : '+');\n}\n\nfunction toUrlParams(a: any) {\n  const s: any[] = [];\n  const rbracket = /\\[\\]$/;\n\n  const isArray = (obj: any) => {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  const add = (k: string, v: any) => {\n    v = typeof v === 'function' ? v() : v === null ? '' : v === undefined ? '' : v;\n    if (typeof v !== 'boolean') {\n      s[s.length] = encodeURIComponentAsAngularJS(k, true) + '=' + encodeURIComponentAsAngularJS(v, true);\n    } else {\n      const valueQueryPart = v ? '' : '=' + encodeURIComponentAsAngularJS('false', true);\n      s[s.length] = encodeURIComponentAsAngularJS(k, true) + valueQueryPart;\n    }\n  };\n\n  const buildParams = (prefix: string, obj: any) => {\n    let i, len, key;\n\n    if (prefix) {\n      if (isArray(obj)) {\n        for (i = 0, len = obj.length; i < len; i++) {\n          if (rbracket.test(prefix)) {\n            add(prefix, obj[i]);\n          } else {\n            buildParams(prefix, obj[i]);\n          }\n        }\n      } else if (obj && String(obj) === '[object Object]') {\n        for (key in obj) {\n          buildParams(prefix + '[' + key + ']', obj[key]);\n        }\n      } else {\n        add(prefix, obj);\n      }\n    } else if (isArray(obj)) {\n      for (i = 0, len = obj.length; i < len; i++) {\n        add(obj[i].name, obj[i].value);\n      }\n    } else {\n      for (key in obj) {\n        buildParams(key, obj[key]);\n      }\n    }\n    return s;\n  };\n\n  return buildParams('', a).join('&');\n}\n\nfunction appendQueryToUrl(url: string, stringToAppend: string) {\n  if (stringToAppend !== undefined && stringToAppend !== null && stringToAppend !== '') {\n    const pos = url.indexOf('?');\n    if (pos !== -1) {\n      if (url.length - pos > 1) {\n        url += '&';\n      }\n    } else {\n      url += '?';\n    }\n    url += stringToAppend;\n  }\n\n  return url;\n}\n\n/**\n * Return search part (as object) of current url\n */\nfunction getUrlSearchParams(): UrlQueryMap {\n  const search = window.location.search.substring(1);\n  const searchParamsSegments = search.split('&');\n  const params: UrlQueryMap = {};\n  for (const p of searchParamsSegments) {\n    const keyValuePair = p.split('=');\n    if (keyValuePair.length > 1) {\n      // key-value param\n      const key = decodeURIComponent(keyValuePair[0]);\n      const value = decodeURIComponent(keyValuePair[1]);\n      if (key in params) {\n        params[key] = [...(params[key] as any[]), value];\n      } else {\n        params[key] = [value];\n      }\n    } else if (keyValuePair.length === 1) {\n      // boolean param\n      const key = decodeURIComponent(keyValuePair[0]);\n      params[key] = true;\n    }\n  }\n  return params;\n}\n\n/**\n * Parses an escaped url query string into key-value pairs.\n * Attribution: Code dervived from https://github.com/angular/angular.js/master/src/Angular.js#L1396\n * @returns {Object.<string,boolean|Array>}\n */\nexport function parseKeyValue(keyValue: string) {\n  var obj: any = {};\n  const parts = (keyValue || '').split('&');\n\n  for (let keyValue of parts) {\n    let splitPoint: number | undefined;\n    let key: string | undefined;\n    let val: string | undefined | boolean;\n\n    if (keyValue) {\n      key = keyValue = keyValue.replace(/\\+/g, '%20');\n      splitPoint = keyValue.indexOf('=');\n\n      if (splitPoint !== -1) {\n        key = keyValue.substring(0, splitPoint);\n        val = keyValue.substring(splitPoint + 1);\n      }\n\n      key = tryDecodeURIComponent(key);\n\n      if (key !== undefined) {\n        val = val !== undefined ? tryDecodeURIComponent(val as string) : true;\n\n        let parsedVal: any;\n        if (typeof val === 'string' && val !== '') {\n          parsedVal = val === 'true' || val === 'false' ? val === 'true' : val;\n        } else {\n          parsedVal = val;\n        }\n\n        if (!obj.hasOwnProperty(key)) {\n          obj[key] = isNaN(parsedVal) ? val : parsedVal;\n        } else if (Array.isArray(obj[key])) {\n          obj[key].push(val);\n        } else {\n          obj[key] = [obj[key], isNaN(parsedVal) ? val : parsedVal];\n        }\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction tryDecodeURIComponent(value: string): string | undefined {\n  try {\n    return decodeURIComponent(value);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport const urlUtil = {\n  renderUrl,\n  toUrlParams,\n  appendQueryToUrl,\n  getUrlSearchParams,\n  parseKeyValue,\n};\n\n/**\n * Create an string that is used in URL to represent the Explore state. This is basically just a stringified json\n * that is that used as a state of a single Explore pane so it does not represent full Explore URL.\n *\n * @param urlState\n * @param compact this parameter is deprecated and will be removed in a future release.\n */\nexport function serializeStateToUrlParam(urlState: ExploreUrlState, compact?: boolean): string {\n  if (compact !== undefined) {\n    console.warn('`compact` parameter is deprecated and will be removed in a future release');\n  }\n  return JSON.stringify(urlState);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}