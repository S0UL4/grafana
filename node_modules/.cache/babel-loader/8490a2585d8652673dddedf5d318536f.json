{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { Select } from '@grafana/ui';\nimport { QueryEditorRow } from '..';\nimport { SELECT_WIDTH } from '../../constants';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const Service = ({\n  refId,\n  query,\n  templateVariableOptions,\n  onChange,\n  datasource\n}) => {\n  const [services, setServices] = useState([]);\n  const {\n    projectName\n  } = query;\n  useEffect(() => {\n    if (!projectName) {\n      return;\n    }\n\n    datasource.getSLOServices(projectName).then(services => {\n      setServices([{\n        label: 'Template Variables',\n        options: templateVariableOptions\n      }, ...services]);\n    });\n  }, [datasource, projectName, templateVariableOptions]);\n  return /*#__PURE__*/_jsx(QueryEditorRow, {\n    label: \"Service\",\n    htmlFor: `${refId}-slo-service`,\n    children: /*#__PURE__*/_jsx(Select, {\n      inputId: `${refId}-slo-service`,\n      width: SELECT_WIDTH,\n      allowCustomValue: true,\n      value: (query === null || query === void 0 ? void 0 : query.serviceId) && {\n        value: query === null || query === void 0 ? void 0 : query.serviceId,\n        label: (query === null || query === void 0 ? void 0 : query.serviceName) || (query === null || query === void 0 ? void 0 : query.serviceId)\n      },\n      placeholder: \"Select service\",\n      options: services,\n      onChange: ({\n        value: serviceId = '',\n        label: serviceName = ''\n      }) => onChange(Object.assign({}, query, {\n        serviceId,\n        serviceName,\n        sloId: ''\n      }))\n    })\n  });\n};","map":{"version":3,"names":["React","useEffect","useState","Select","QueryEditorRow","SELECT_WIDTH","Service","refId","query","templateVariableOptions","onChange","datasource","services","setServices","projectName","getSLOServices","then","label","options","serviceId","value","serviceName","sloId"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/SLO/Service.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorRow } from '..';\nimport { SELECT_WIDTH } from '../../constants';\nimport CloudMonitoringDatasource from '../../datasource';\nimport { SLOQuery } from '../../types';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Service: React.FC<Props> = ({ refId, query, templateVariableOptions, onChange, datasource }) => {\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName } = query;\n\n  useEffect(() => {\n    if (!projectName) {\n      return;\n    }\n\n    datasource.getSLOServices(projectName).then((services: Array<SelectableValue<string>>) => {\n      setServices([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...services,\n      ]);\n    });\n  }, [datasource, projectName, templateVariableOptions]);\n\n  return (\n    <QueryEditorRow label=\"Service\" htmlFor={`${refId}-slo-service`}>\n      <Select\n        inputId={`${refId}-slo-service`}\n        width={SELECT_WIDTH}\n        allowCustomValue\n        value={query?.serviceId && { value: query?.serviceId, label: query?.serviceName || query?.serviceId }}\n        placeholder=\"Select service\"\n        options={services}\n        onChange={({ value: serviceId = '', label: serviceName = '' }) =>\n          onChange({ ...query, serviceId, serviceName, sloId: '' })\n        }\n      />\n    </QueryEditorRow>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAEA,SAASC,cAAT,QAA+B,IAA/B;AACA,SAASC,YAAT,QAA6B,iBAA7B;;AAYA,OAAO,MAAMC,OAAwB,GAAG,CAAC;EAAEC,KAAF;EAASC,KAAT;EAAgBC,uBAAhB;EAAyCC,QAAzC;EAAmDC;AAAnD,CAAD,KAAqE;EAC3G,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAiC,EAAjC,CAAxC;EACA,MAAM;IAAEY;EAAF,IAAkBN,KAAxB;EAEAP,SAAS,CAAC,MAAM;IACd,IAAI,CAACa,WAAL,EAAkB;MAChB;IACD;;IAEDH,UAAU,CAACI,cAAX,CAA0BD,WAA1B,EAAuCE,IAAvC,CAA6CJ,QAAD,IAA8C;MACxFC,WAAW,CAAC,CACV;QACEI,KAAK,EAAE,oBADT;QAEEC,OAAO,EAAET;MAFX,CADU,EAKV,GAAGG,QALO,CAAD,CAAX;IAOD,CARD;EASD,CAdQ,EAcN,CAACD,UAAD,EAAaG,WAAb,EAA0BL,uBAA1B,CAdM,CAAT;EAgBA,oBACE,KAAC,cAAD;IAAgB,KAAK,EAAC,SAAtB;IAAgC,OAAO,EAAG,GAAEF,KAAM,cAAlD;IAAA,uBACE,KAAC,MAAD;MACE,OAAO,EAAG,GAAEA,KAAM,cADpB;MAEE,KAAK,EAAEF,YAFT;MAGE,gBAAgB,MAHlB;MAIE,KAAK,EAAE,CAAAG,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEW,SAAP,KAAoB;QAAEC,KAAK,EAAEZ,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEW,SAAhB;QAA2BF,KAAK,EAAE,CAAAT,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEa,WAAP,MAAsBb,KAAtB,aAAsBA,KAAtB,uBAAsBA,KAAK,CAAEW,SAA7B;MAAlC,CAJ7B;MAKE,WAAW,EAAC,gBALd;MAME,OAAO,EAAEP,QANX;MAOE,QAAQ,EAAE,CAAC;QAAEQ,KAAK,EAAED,SAAS,GAAG,EAArB;QAAyBF,KAAK,EAAEI,WAAW,GAAG;MAA9C,CAAD,KACRX,QAAQ,mBAAMF,KAAN;QAAaW,SAAb;QAAwBE,WAAxB;QAAqCC,KAAK,EAAE;MAA5C;IARZ;EADF,EADF;AAeD,CAnCM"},"metadata":{},"sourceType":"module"}