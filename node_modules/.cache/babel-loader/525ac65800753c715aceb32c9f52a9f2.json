{"ast":null,"code":"/* Prometheus internal models */\nimport { mapStateWithReasonToBaseState } from './unified-alerting-dto';\nexport function hasAlertState(alert, state) {\n  return mapStateWithReasonToBaseState(alert.state) === state;\n}","map":{"version":3,"names":["mapStateWithReasonToBaseState","hasAlertState","alert","state"],"sources":["/home/soula/grafana/public/app/types/unified-alerting.ts"],"sourcesContent":["/* Prometheus internal models */\n\nimport { AlertState, DataSourceInstanceSettings } from '@grafana/data';\n\nimport {\n  PromAlertingRuleState,\n  PromRuleType,\n  RulerRuleDTO,\n  Labels,\n  Annotations,\n  RulerRuleGroupDTO,\n  GrafanaAlertState,\n  GrafanaAlertStateWithReason,\n  mapStateWithReasonToBaseState,\n} from './unified-alerting-dto';\n\nexport type Alert = {\n  activeAt: string;\n  annotations: { [key: string]: string };\n  labels: { [key: string]: string };\n  state: PromAlertingRuleState | GrafanaAlertStateWithReason;\n  value: string;\n};\n\nexport function hasAlertState(alert: Alert, state: PromAlertingRuleState | GrafanaAlertState): boolean {\n  return mapStateWithReasonToBaseState(alert.state as GrafanaAlertStateWithReason) === state;\n}\n\ninterface RuleBase {\n  health: string;\n  name: string;\n  query: string;\n  lastEvaluation?: string;\n  evaluationTime?: number;\n  lastError?: string;\n}\n\nexport interface AlertingRule extends RuleBase {\n  alerts?: Alert[];\n  labels: {\n    [key: string]: string;\n  };\n  annotations?: {\n    [key: string]: string;\n  };\n  state: PromAlertingRuleState;\n  type: PromRuleType.Alerting;\n}\n\nexport interface RecordingRule extends RuleBase {\n  type: PromRuleType.Recording;\n\n  labels?: {\n    [key: string]: string;\n  };\n}\n\nexport type Rule = AlertingRule | RecordingRule;\n\nexport type BaseRuleGroup = { name: string };\n\nexport interface RuleGroup {\n  name: string;\n  interval: number;\n  rules: Rule[];\n}\n\nexport interface RuleNamespace {\n  dataSourceName: string;\n  name: string;\n  groups: RuleGroup[];\n}\n\nexport interface RulesSourceResult {\n  dataSourceName: string;\n  error?: unknown;\n  namespaces?: RuleNamespace[];\n}\n\nexport type RulesSource = DataSourceInstanceSettings | 'grafana';\n\n// combined prom and ruler result\nexport interface CombinedRule {\n  name: string;\n  query: string;\n  labels: Labels;\n  annotations: Annotations;\n  promRule?: Rule;\n  rulerRule?: RulerRuleDTO;\n  group: CombinedRuleGroup;\n  namespace: CombinedRuleNamespace;\n}\n\nexport interface CombinedRuleGroup {\n  name: string;\n  interval?: string;\n  source_tenants?: string[];\n  rules: CombinedRule[];\n}\n\nexport interface CombinedRuleNamespace {\n  rulesSource: RulesSource;\n  name: string;\n  groups: CombinedRuleGroup[];\n}\n\nexport interface RuleWithLocation<T = RulerRuleDTO> {\n  ruleSourceName: string;\n  namespace: string;\n  group: RulerRuleGroupDTO;\n  rule: T;\n}\n\nexport interface PromRuleWithLocation {\n  rule: AlertingRule;\n  dataSourceName: string;\n  namespaceName: string;\n  groupName: string;\n}\n\nexport interface CloudRuleIdentifier {\n  ruleSourceName: string;\n  namespace: string;\n  groupName: string;\n  rulerRuleHash: number;\n}\nexport interface GrafanaRuleIdentifier {\n  ruleSourceName: 'grafana';\n  uid: string;\n}\n\n// Rule read directly from Prometheus without existing in the ruler API\nexport interface PrometheusRuleIdentifier {\n  ruleSourceName: string;\n  namespace: string;\n  groupName: string;\n  ruleHash: number;\n}\n\nexport type RuleIdentifier = CloudRuleIdentifier | GrafanaRuleIdentifier | PrometheusRuleIdentifier;\nexport interface FilterState {\n  queryString?: string;\n  dataSource?: string;\n  alertState?: string;\n  groupBy?: string[];\n  ruleType?: string;\n}\n\nexport interface SilenceFilterState {\n  queryString?: string;\n  silenceState?: string;\n}\n\ninterface EvalMatch {\n  metric: string;\n  tags?: any;\n  value: number;\n}\n\nexport interface StateHistoryItemData {\n  noData: boolean;\n  evalMatches?: EvalMatch[];\n}\n\nexport interface StateHistoryItem {\n  id: number;\n  alertId: number;\n  alertName: string;\n  dashboardId: number;\n  panelId: number;\n  userId: number;\n  newState: AlertState;\n  prevState: AlertState;\n  created: number;\n  updated: number;\n  time: number;\n  timeEnd: number;\n  text: string;\n  tags: any[];\n  login: string;\n  email: string;\n  avatarUrl: string;\n  data: StateHistoryItemData;\n}\n\nexport interface RulerDataSourceConfig {\n  dataSourceName: string;\n  apiVersion: 'legacy' | 'config';\n}\n\nexport interface PromBasedDataSource {\n  name: string;\n  id: string | number;\n  rulerConfig?: RulerDataSourceConfig;\n}\n\nexport interface PaginationProps {\n  itemsPerPage: number;\n}\n"],"mappings":"AAAA;AAIA,SASEA,6BATF,QAUO,wBAVP;AAoBA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAAqCC,KAArC,EAAgG;EACrG,OAAOH,6BAA6B,CAACE,KAAK,CAACC,KAAP,CAA7B,KAA8EA,KAArF;AACD"},"metadata":{},"sourceType":"module"}