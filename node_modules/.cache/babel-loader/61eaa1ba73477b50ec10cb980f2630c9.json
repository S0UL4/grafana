{"ast":null,"code":"import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { EditorFieldGroup, EditorList, EditorField } from '@grafana/experimental';\nimport { LabelFilterItem } from './LabelFilterItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function LabelFilters({\n  labelsFilters,\n  onChange,\n  onGetLabelNames,\n  onGetLabelValues,\n  error\n}) {\n  const defaultOp = '=';\n  const [items, setItems] = useState([{\n    op: defaultOp\n  }]);\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{\n        op: defaultOp\n      }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = newItems => {\n    setItems(newItems); // Extract full label filters with both label & value\n\n    const newLabels = newItems.filter(x => x.label != null && x.value != null);\n\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(EditorFieldGroup, {\n    children: /*#__PURE__*/_jsx(EditorField, {\n      label: \"Labels\",\n      error: error,\n      invalid: !!error,\n      children: /*#__PURE__*/_jsx(EditorList, {\n        items: items,\n        onChange: onLabelsChange,\n        renderItem: (item, onChangeItem, onDelete) => /*#__PURE__*/_jsx(LabelFilterItem, {\n          item: item,\n          defaultOp: defaultOp,\n          onChange: onChangeItem,\n          onDelete: onDelete,\n          onGetLabelNames: onGetLabelNames,\n          onGetLabelValues: onGetLabelValues\n        })\n      })\n    })\n  });\n}","map":{"version":3,"names":["isEqual","React","useEffect","useState","EditorFieldGroup","EditorList","EditorField","LabelFilterItem","LabelFilters","labelsFilters","onChange","onGetLabelNames","onGetLabelValues","error","defaultOp","items","setItems","op","length","onLabelsChange","newItems","newLabels","filter","x","label","value","item","onChangeItem","onDelete"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters.tsx"],"sourcesContent":["import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorFieldGroup, EditorList, EditorField } from '@grafana/experimental';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { LabelFilterItem } from './LabelFilterItem';\n\nexport interface Props {\n  labelsFilters: QueryBuilderLabelFilter[];\n  onChange: (labelFilters: QueryBuilderLabelFilter[]) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  error?: string;\n}\n\nexport function LabelFilters({ labelsFilters, onChange, onGetLabelNames, onGetLabelValues, error }: Props) {\n  const defaultOp = '=';\n  const [items, setItems] = useState<Array<Partial<QueryBuilderLabelFilter>>>([{ op: defaultOp }]);\n\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{ op: defaultOp }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = (newItems: Array<Partial<QueryBuilderLabelFilter>>) => {\n    setItems(newItems);\n\n    // Extract full label filters with both label & value\n    const newLabels = newItems.filter((x) => x.label != null && x.value != null);\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels as QueryBuilderLabelFilter[]);\n    }\n  };\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Labels\" error={error} invalid={!!error}>\n        <EditorList\n          items={items}\n          onChange={onLabelsChange}\n          renderItem={(item, onChangeItem, onDelete) => (\n            <LabelFilterItem\n              item={item}\n              defaultOp={defaultOp}\n              onChange={onChangeItem}\n              onDelete={onDelete}\n              onGetLabelNames={onGetLabelNames}\n              onGetLabelValues={onGetLabelValues}\n            />\n          )}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAGA,SAASC,gBAAT,EAA2BC,UAA3B,EAAuCC,WAAvC,QAA0D,uBAA1D;AAIA,SAASC,eAAT,QAAgC,mBAAhC;;AAUA,OAAO,SAASC,YAAT,CAAsB;EAAEC,aAAF;EAAiBC,QAAjB;EAA2BC,eAA3B;EAA4CC,gBAA5C;EAA8DC;AAA9D,CAAtB,EAAoG;EACzG,MAAMC,SAAS,GAAG,GAAlB;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAA0C,CAAC;IAAEc,EAAE,EAAEH;EAAN,CAAD,CAA1C,CAAlC;EAEAZ,SAAS,CAAC,MAAM;IACd,IAAIO,aAAa,CAACS,MAAd,GAAuB,CAA3B,EAA8B;MAC5BF,QAAQ,CAACP,aAAD,CAAR;IACD,CAFD,MAEO;MACLO,QAAQ,CAAC,CAAC;QAAEC,EAAE,EAAEH;MAAN,CAAD,CAAD,CAAR;IACD;EACF,CANQ,EAMN,CAACL,aAAD,CANM,CAAT;;EAQA,MAAMU,cAAc,GAAIC,QAAD,IAAuD;IAC5EJ,QAAQ,CAACI,QAAD,CAAR,CAD4E,CAG5E;;IACA,MAAMC,SAAS,GAAGD,QAAQ,CAACE,MAAT,CAAiBC,CAAD,IAAOA,CAAC,CAACC,KAAF,IAAW,IAAX,IAAmBD,CAAC,CAACE,KAAF,IAAW,IAArD,CAAlB;;IACA,IAAI,CAACzB,OAAO,CAACqB,SAAD,EAAYZ,aAAZ,CAAZ,EAAwC;MACtCC,QAAQ,CAACW,SAAD,CAAR;IACD;EACF,CARD;;EAUA,oBACE,KAAC,gBAAD;IAAA,uBACE,KAAC,WAAD;MAAa,KAAK,EAAC,QAAnB;MAA4B,KAAK,EAAER,KAAnC;MAA0C,OAAO,EAAE,CAAC,CAACA,KAArD;MAAA,uBACE,KAAC,UAAD;QACE,KAAK,EAAEE,KADT;QAEE,QAAQ,EAAEI,cAFZ;QAGE,UAAU,EAAE,CAACO,IAAD,EAAOC,YAAP,EAAqBC,QAArB,kBACV,KAAC,eAAD;UACE,IAAI,EAAEF,IADR;UAEE,SAAS,EAAEZ,SAFb;UAGE,QAAQ,EAAEa,YAHZ;UAIE,QAAQ,EAAEC,QAJZ;UAKE,eAAe,EAAEjB,eALnB;UAME,gBAAgB,EAAEC;QANpB;MAJJ;IADF;EADF,EADF;AAoBD"},"metadata":{},"sourceType":"module"}