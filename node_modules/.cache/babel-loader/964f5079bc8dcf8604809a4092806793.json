{"ast":null,"code":"import add from 'date-fns/add';\nimport intervalToDuration from 'date-fns/intervalToDuration';\nconst durationMap = {\n  years: ['y', 'Y', 'years'],\n  months: ['M', 'months'],\n  weeks: ['w', 'W', 'weeks'],\n  days: ['d', 'D', 'days'],\n  hours: ['h', 'H', 'hours'],\n  minutes: ['m', 'minutes'],\n  seconds: ['s', 'S', 'seconds']\n};\n/**\n * intervalToAbbreviatedDurationString converts interval to readable duration string\n *\n * @param interval - interval to convert\n * @param includeSeconds - optional, default true. If false, will not include seconds unless interval is less than 1 minute\n *\n * @public\n */\n\nexport function intervalToAbbreviatedDurationString(interval, includeSeconds = true) {\n  const duration = intervalToDuration(interval);\n  return Object.entries(duration).reduce((str, [unit, value]) => {\n    if (value && value !== 0 && !(unit === 'seconds' && !includeSeconds && str)) {\n      const padding = str !== '' ? ' ' : '';\n      return str + `${padding}${value}${durationMap[unit][0]}`;\n    }\n\n    return str;\n  }, '');\n}\n/**\n * parseDuration parses duration string into datefns Duration object\n *\n * @param durationString - string to convert. For example '2m', '5h 20s'\n *\n * @public\n */\n\nexport function parseDuration(durationString) {\n  return durationString.split(' ').reduce((acc, value) => {\n    const match = value.match(/(\\d+)(.+)/);\n    const rawLength = match === null || match === void 0 ? void 0 : match[1];\n    const unit = match === null || match === void 0 ? void 0 : match[2];\n\n    if (!(rawLength && unit)) {\n      return acc;\n    }\n\n    const mapping = Object.entries(durationMap).find(([_, abbreviations]) => abbreviations === null || abbreviations === void 0 ? void 0 : abbreviations.includes(match[2]));\n    const length = parseInt(rawLength, 10);\n    return mapping ? Object.assign({}, acc, {\n      [mapping[0]]: length\n    }) : acc;\n  }, {});\n}\n/**\n * addDurationToDate adds given duration to given date and returns a new Date object\n *\n * @param date - date to add to. Can be either Date object or a number (milliseconds since epoch)\n * @param duration - duration to add. For example '2m', '5h 20s'\n *\n * @public\n */\n\nexport function addDurationToDate(date, duration) {\n  return add(date, duration);\n}\n/**\n * durationToMilliseconds convert a duration object to milliseconds\n *\n * @param duration - datefns Duration object\n *\n * @public\n */\n\nexport function durationToMilliseconds(duration) {\n  const now = new Date();\n  return addDurationToDate(now, duration).getTime() - now.getTime();\n}\n/**\n * isValidDate returns true if given string can be parsed into valid Date object, false otherwise\n *\n * @param dateString - string representation of a date\n *\n * @public\n */\n\nexport function isValidDate(dateString) {\n  return !isNaN(Date.parse(dateString));\n}\n/**\n * isValidDuration returns true if the given string can be parsed into a valid Duration object, false otherwise\n *\n * @param durationString - string representation of a duration\n *\n * @public\n */\n\nexport function isValidDuration(durationString) {\n  for (const value of durationString.trim().split(' ')) {\n    var _Object$entries$find;\n\n    const match = value.match(/(\\d+)(.+)/);\n\n    if (match === null || match.length !== 3) {\n      return false;\n    }\n\n    const key = (_Object$entries$find = Object.entries(durationMap).find(([_, abbreviations]) => abbreviations === null || abbreviations === void 0 ? void 0 : abbreviations.includes(match[2]))) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0];\n\n    if (!key) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * isValidGoDuration returns true if the given string can be parsed into a valid Duration object based on\n * Go's time.parseDuration, false otherwise.\n *\n * Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n *\n * Go docs: https://pkg.go.dev/time#ParseDuration\n *\n * @param durationString - string representation of a duration\n *\n * @internal\n */\n\nexport function isValidGoDuration(durationString) {\n  const timeUnits = ['h', 'm', 's', 'ms', 'us', 'µs', 'ns'];\n\n  for (const value of durationString.trim().split(' ')) {\n    const match = value.match(/([0-9]*[.]?[0-9]+)(.+)/);\n\n    if (match === null || match.length !== 3) {\n      return false;\n    }\n\n    const isValidUnit = timeUnits.includes(match[2]);\n\n    if (!isValidUnit) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"names":["add","intervalToDuration","durationMap","years","months","weeks","days","hours","minutes","seconds","intervalToAbbreviatedDurationString","interval","includeSeconds","duration","Object","entries","reduce","str","unit","value","padding","parseDuration","durationString","split","acc","match","rawLength","mapping","find","_","abbreviations","includes","length","parseInt","addDurationToDate","date","durationToMilliseconds","now","Date","getTime","isValidDate","dateString","isNaN","parse","isValidDuration","trim","key","isValidGoDuration","timeUnits","isValidUnit"],"sources":["/home/soula/grafana/packages/grafana-data/src/datetime/durationutil.ts"],"sourcesContent":["import { Duration, Interval } from 'date-fns';\nimport add from 'date-fns/add';\nimport intervalToDuration from 'date-fns/intervalToDuration';\n\nconst durationMap: { [key in Required<keyof Duration>]: string[] } = {\n  years: ['y', 'Y', 'years'],\n  months: ['M', 'months'],\n  weeks: ['w', 'W', 'weeks'],\n  days: ['d', 'D', 'days'],\n  hours: ['h', 'H', 'hours'],\n  minutes: ['m', 'minutes'],\n  seconds: ['s', 'S', 'seconds'],\n};\n\n/**\n * intervalToAbbreviatedDurationString converts interval to readable duration string\n *\n * @param interval - interval to convert\n * @param includeSeconds - optional, default true. If false, will not include seconds unless interval is less than 1 minute\n *\n * @public\n */\nexport function intervalToAbbreviatedDurationString(interval: Interval, includeSeconds = true): string {\n  const duration = intervalToDuration(interval);\n  return (Object.entries(duration) as Array<[keyof Duration, number | undefined]>).reduce((str, [unit, value]) => {\n    if (value && value !== 0 && !(unit === 'seconds' && !includeSeconds && str)) {\n      const padding = str !== '' ? ' ' : '';\n      return str + `${padding}${value}${durationMap[unit][0]}`;\n    }\n\n    return str;\n  }, '');\n}\n\n/**\n * parseDuration parses duration string into datefns Duration object\n *\n * @param durationString - string to convert. For example '2m', '5h 20s'\n *\n * @public\n */\nexport function parseDuration(durationString: string): Duration {\n  return durationString.split(' ').reduce<Duration>((acc, value) => {\n    const match = value.match(/(\\d+)(.+)/);\n\n    const rawLength = match?.[1];\n    const unit = match?.[2];\n\n    if (!(rawLength && unit)) {\n      return acc;\n    }\n\n    const mapping = Object.entries(durationMap).find(([_, abbreviations]) => abbreviations?.includes(match[2]));\n    const length = parseInt(rawLength, 10);\n\n    return mapping ? { ...acc, [mapping[0]]: length } : acc;\n  }, {});\n}\n\n/**\n * addDurationToDate adds given duration to given date and returns a new Date object\n *\n * @param date - date to add to. Can be either Date object or a number (milliseconds since epoch)\n * @param duration - duration to add. For example '2m', '5h 20s'\n *\n * @public\n */\nexport function addDurationToDate(date: Date | number, duration: Duration): Date {\n  return add(date, duration);\n}\n\n/**\n * durationToMilliseconds convert a duration object to milliseconds\n *\n * @param duration - datefns Duration object\n *\n * @public\n */\nexport function durationToMilliseconds(duration: Duration): number {\n  const now = new Date();\n  return addDurationToDate(now, duration).getTime() - now.getTime();\n}\n\n/**\n * isValidDate returns true if given string can be parsed into valid Date object, false otherwise\n *\n * @param dateString - string representation of a date\n *\n * @public\n */\nexport function isValidDate(dateString: string): boolean {\n  return !isNaN(Date.parse(dateString));\n}\n\n/**\n * isValidDuration returns true if the given string can be parsed into a valid Duration object, false otherwise\n *\n * @param durationString - string representation of a duration\n *\n * @public\n */\nexport function isValidDuration(durationString: string): boolean {\n  for (const value of durationString.trim().split(' ')) {\n    const match = value.match(/(\\d+)(.+)/);\n    if (match === null || match.length !== 3) {\n      return false;\n    }\n\n    const key = Object.entries(durationMap).find(([_, abbreviations]) => abbreviations?.includes(match[2]))?.[0];\n    if (!key) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * isValidGoDuration returns true if the given string can be parsed into a valid Duration object based on\n * Go's time.parseDuration, false otherwise.\n *\n * Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\".\n *\n * Go docs: https://pkg.go.dev/time#ParseDuration\n *\n * @param durationString - string representation of a duration\n *\n * @internal\n */\nexport function isValidGoDuration(durationString: string): boolean {\n  const timeUnits = ['h', 'm', 's', 'ms', 'us', 'µs', 'ns'];\n  for (const value of durationString.trim().split(' ')) {\n    const match = value.match(/([0-9]*[.]?[0-9]+)(.+)/);\n    if (match === null || match.length !== 3) {\n      return false;\n    }\n\n    const isValidUnit = timeUnits.includes(match[2]);\n    if (!isValidUnit) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}