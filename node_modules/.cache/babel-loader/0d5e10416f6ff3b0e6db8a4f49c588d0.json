{"ast":null,"code":"const getCopiedText = (textBlocks, startOffset, endOffset) => {\n  if (!textBlocks.length) {\n    return undefined;\n  }\n\n  const excludingLastLineLength = textBlocks.slice(0, -1).join('').length + textBlocks.length - 1;\n  return textBlocks.join('\\n').slice(startOffset, excludingLastLineLength + endOffset);\n}; // Remove unicode special symbol - byte order mark (BOM), U+FEFF.\n\n\nconst removeBom = str => {\n  return str === null || str === void 0 ? void 0 : str.replace(/[\\uFEFF]/g, '');\n};\n\nexport function ClipboardPlugin() {\n  const clipboardPlugin = {\n    onCopy(event, editor, next) {\n      const clipEvent = event;\n      clipEvent.preventDefault();\n      const {\n        document,\n        selection\n      } = editor.value;\n      const {\n        start: {\n          offset: startOffset\n        },\n        end: {\n          offset: endOffset\n        }\n      } = selection;\n      const selectedBlocks = document.getLeafBlocksAtRange(selection).toArray().map(block => block.text);\n      const copiedText = removeBom(getCopiedText(selectedBlocks, startOffset, endOffset));\n\n      if (copiedText && clipEvent.clipboardData) {\n        clipEvent.clipboardData.setData('Text', copiedText);\n      }\n\n      return true;\n    },\n\n    onPaste(event, editor, next) {\n      const clipEvent = event;\n      clipEvent.preventDefault();\n\n      if (clipEvent.clipboardData) {\n        const pastedValue = removeBom(clipEvent.clipboardData.getData('Text'));\n        const lines = pastedValue === null || pastedValue === void 0 ? void 0 : pastedValue.split('\\n');\n\n        if (lines && lines.length) {\n          editor.insertText(lines[0]);\n\n          for (const line of lines.slice(1)) {\n            editor.splitBlock().insertText(line);\n          }\n        }\n      }\n\n      return true;\n    }\n\n  };\n  return Object.assign({}, clipboardPlugin, {\n    onCut(event, editor, next) {\n      const clipEvent = event;\n      clipboardPlugin.onCopy(clipEvent, editor, next);\n      editor.deleteAtRange(editor.value.selection);\n      return true;\n    }\n\n  });\n}","map":{"version":3,"names":["getCopiedText","textBlocks","startOffset","endOffset","length","undefined","excludingLastLineLength","slice","join","removeBom","str","replace","ClipboardPlugin","clipboardPlugin","onCopy","event","editor","next","clipEvent","preventDefault","document","selection","value","start","offset","end","selectedBlocks","getLeafBlocksAtRange","toArray","map","block","text","copiedText","clipboardData","setData","onPaste","pastedValue","getData","lines","split","insertText","line","splitBlock","onCut","deleteAtRange"],"sources":["/home/soula/grafana/packages/grafana-ui/src/slate-plugins/clipboard.ts"],"sourcesContent":["import { Editor as CoreEditor } from 'slate';\n\nimport { Plugin } from '@grafana/slate-react';\n\nconst getCopiedText = (textBlocks: string[], startOffset: number, endOffset: number) => {\n  if (!textBlocks.length) {\n    return undefined;\n  }\n\n  const excludingLastLineLength = textBlocks.slice(0, -1).join('').length + textBlocks.length - 1;\n  return textBlocks.join('\\n').slice(startOffset, excludingLastLineLength + endOffset);\n};\n\n// Remove unicode special symbol - byte order mark (BOM), U+FEFF.\nconst removeBom = (str: string | undefined): string | undefined => {\n  return str?.replace(/[\\uFEFF]/g, '');\n};\n\nexport function ClipboardPlugin(): Plugin {\n  const clipboardPlugin: Plugin = {\n    onCopy(event: Event, editor: CoreEditor, next: () => any) {\n      const clipEvent = event as ClipboardEvent;\n      clipEvent.preventDefault();\n\n      const { document, selection } = editor.value;\n      const {\n        start: { offset: startOffset },\n        end: { offset: endOffset },\n      } = selection;\n      const selectedBlocks = document\n        .getLeafBlocksAtRange(selection)\n        .toArray()\n        .map((block) => block.text);\n\n      const copiedText = removeBom(getCopiedText(selectedBlocks, startOffset, endOffset));\n      if (copiedText && clipEvent.clipboardData) {\n        clipEvent.clipboardData.setData('Text', copiedText);\n      }\n\n      return true;\n    },\n\n    onPaste(event: Event, editor: CoreEditor, next: () => any) {\n      const clipEvent = event as ClipboardEvent;\n      clipEvent.preventDefault();\n      if (clipEvent.clipboardData) {\n        const pastedValue = removeBom(clipEvent.clipboardData.getData('Text'));\n        const lines = pastedValue?.split('\\n');\n\n        if (lines && lines.length) {\n          editor.insertText(lines[0]);\n          for (const line of lines.slice(1)) {\n            editor.splitBlock().insertText(line);\n          }\n        }\n      }\n\n      return true;\n    },\n  };\n\n  return {\n    ...clipboardPlugin,\n    onCut(event: Event, editor: CoreEditor, next: () => any) {\n      const clipEvent = event as ClipboardEvent;\n      clipboardPlugin.onCopy!(clipEvent, editor, next);\n      editor.deleteAtRange(editor.value.selection);\n\n      return true;\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}