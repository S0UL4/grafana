{"ast":null,"code":"var _br, _RuleViewerLayout, _Redirect, _Icon;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Alert, Card, Icon, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { AlertLabels } from './components/AlertLabels';\nimport { RuleViewerLayout } from './components/rule-viewer/RuleViewerLayout';\nimport { useCombinedRulesMatching } from './hooks/useCombinedRule';\nimport { getRulesSourceByName } from './utils/datasource';\nimport { createViewLink } from './utils/misc';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst pageTitle = 'Alerting / Find rule';\nexport function RedirectToRuleViewer(props) {\n  const {\n    name,\n    sourceName\n  } = props.match.params;\n  const styles = useStyles2(getStyles);\n  const {\n    error,\n    loading,\n    result: rules,\n    dispatched\n  } = useCombinedRulesMatching(name, sourceName);\n\n  if (error) {\n    return /*#__PURE__*/_jsx(RuleViewerLayout, {\n      title: pageTitle,\n      children: /*#__PURE__*/_jsx(Alert, {\n        title: `Failed to load rules from ${sourceName}`,\n        children: /*#__PURE__*/_jsxs(\"details\", {\n          className: styles.errorMessage,\n          children: [error.message, _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), !!(error !== null && error !== void 0 && error.stack) && error.stack]\n        })\n      })\n    });\n  }\n\n  if (loading || !dispatched || !Array.isArray(rules)) {\n    return _RuleViewerLayout || (_RuleViewerLayout = /*#__PURE__*/_jsx(RuleViewerLayout, {\n      title: pageTitle,\n      children: /*#__PURE__*/_jsx(LoadingPlaceholder, {\n        text: \"Loading rule...\"\n      })\n    }));\n  }\n\n  if (!name || !sourceName) {\n    return _Redirect || (_Redirect = /*#__PURE__*/_jsx(Redirect, {\n      to: \"/notfound\"\n    }));\n  }\n\n  const rulesSource = getRulesSourceByName(sourceName);\n\n  if (!rulesSource) {\n    return /*#__PURE__*/_jsx(RuleViewerLayout, {\n      title: pageTitle,\n      children: /*#__PURE__*/_jsx(Alert, {\n        title: \"Could not view rule\",\n        children: /*#__PURE__*/_jsx(\"details\", {\n          className: styles.errorMessage,\n          children: `Could not find data source with name: ${sourceName}.`\n        })\n      })\n    });\n  }\n\n  if (rules.length === 1) {\n    const [rule] = rules;\n    return /*#__PURE__*/_jsx(Redirect, {\n      to: createViewLink(rulesSource, rule, '/alerting/list')\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(RuleViewerLayout, {\n    title: pageTitle,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      children: [\"Several rules in \", /*#__PURE__*/_jsx(\"span\", {\n        className: styles.param,\n        children: sourceName\n      }), \" matched the name\", ' ', /*#__PURE__*/_jsx(\"span\", {\n        className: styles.param,\n        children: name\n      }), \", please select the rule you want to view.\"]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.rules,\n      children: rules.map((rule, index) => {\n        return /*#__PURE__*/_jsxs(Card, {\n          href: createViewLink(rulesSource, rule, '/alerting/list'),\n          children: [/*#__PURE__*/_jsx(Card.Heading, {\n            children: rule.name\n          }), /*#__PURE__*/_jsxs(Card.Meta, {\n            separator: '',\n            children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n              name: \"folder\"\n            })), /*#__PURE__*/_jsx(\"span\", {\n              className: styles.namespace,\n              children: `${rule.namespace.name} / ${rule.group.name}`\n            })]\n          }), /*#__PURE__*/_jsx(Card.Tags, {\n            children: /*#__PURE__*/_jsx(AlertLabels, {\n              labels: rule.labels\n            })\n          })]\n        }, `${rule.name}-${index}`);\n      })\n    })]\n  });\n}\n\nfunction getStyles(theme) {\n  return {\n    param: css`\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    rules: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    namespace: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `\n  };\n}\n\nexport default withErrorBoundary(RedirectToRuleViewer, {\n  style: 'page'\n});","map":{"version":3,"names":["css","React","Redirect","Alert","Card","Icon","LoadingPlaceholder","useStyles2","withErrorBoundary","AlertLabels","RuleViewerLayout","useCombinedRulesMatching","getRulesSourceByName","createViewLink","pageTitle","RedirectToRuleViewer","props","name","sourceName","match","params","styles","getStyles","error","loading","result","rules","dispatched","errorMessage","message","stack","Array","isArray","rulesSource","length","rule","param","map","index","namespace","group","labels","theme","colors","text","secondary","spacing","style"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/RedirectToRuleViewer.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Card, Icon, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { AlertLabels } from './components/AlertLabels';\nimport { RuleViewerLayout } from './components/rule-viewer/RuleViewerLayout';\nimport { useCombinedRulesMatching } from './hooks/useCombinedRule';\nimport { getRulesSourceByName } from './utils/datasource';\nimport { createViewLink } from './utils/misc';\n\ntype RedirectToRuleViewerProps = GrafanaRouteComponentProps<{ name?: string; sourceName?: string }>;\nconst pageTitle = 'Alerting / Find rule';\n\nexport function RedirectToRuleViewer(props: RedirectToRuleViewerProps): JSX.Element | null {\n  const { name, sourceName } = props.match.params;\n  const styles = useStyles2(getStyles);\n  const { error, loading, result: rules, dispatched } = useCombinedRulesMatching(name, sourceName);\n\n  if (error) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={`Failed to load rules from ${sourceName}`}>\n          <details className={styles.errorMessage}>\n            {error.message}\n            <br />\n            {!!error?.stack && error.stack}\n          </details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (loading || !dispatched || !Array.isArray(rules)) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </RuleViewerLayout>\n    );\n  }\n\n  if (!name || !sourceName) {\n    return <Redirect to=\"/notfound\" />;\n  }\n\n  const rulesSource = getRulesSourceByName(sourceName);\n\n  if (!rulesSource) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title=\"Could not view rule\">\n          <details className={styles.errorMessage}>{`Could not find data source with name: ${sourceName}.`}</details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (rules.length === 1) {\n    const [rule] = rules;\n    return <Redirect to={createViewLink(rulesSource, rule, '/alerting/list')} />;\n  }\n\n  return (\n    <RuleViewerLayout title={pageTitle}>\n      <div>\n        Several rules in <span className={styles.param}>{sourceName}</span> matched the name{' '}\n        <span className={styles.param}>{name}</span>, please select the rule you want to view.\n      </div>\n      <div className={styles.rules}>\n        {rules.map((rule, index) => {\n          return (\n            <Card key={`${rule.name}-${index}`} href={createViewLink(rulesSource, rule, '/alerting/list')}>\n              <Card.Heading>{rule.name}</Card.Heading>\n              <Card.Meta separator={''}>\n                <Icon name=\"folder\" />\n                <span className={styles.namespace}>{`${rule.namespace.name} / ${rule.group.name}`}</span>\n              </Card.Meta>\n              <Card.Tags>\n                <AlertLabels labels={rule.labels} />\n              </Card.Tags>\n            </Card>\n          );\n        })}\n      </div>\n    </RuleViewerLayout>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    param: css`\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    rules: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    namespace: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n  };\n}\n\nexport default withErrorBoundary(RedirectToRuleViewer, { style: 'page' });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}