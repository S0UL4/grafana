{"ast":null,"code":"import React from 'react';\nimport { connect } from 'react-redux';\nimport { locationService } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PlaylistForm } from './PlaylistForm';\nimport { updatePlaylist } from './api';\nimport { getPlaylistStyles } from './styles';\nimport { usePlaylist } from './usePlaylist';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const PlaylistEditPage = ({\n  navModel,\n  match\n}) => {\n  const styles = useStyles2(getPlaylistStyles);\n  const {\n    playlist,\n    loading\n  } = usePlaylist(match.params.uid);\n\n  const onSubmit = async playlist => {\n    await updatePlaylist(match.params.uid, playlist);\n    locationService.push('/playlists');\n  };\n\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      isLoading: loading,\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        className: styles.subHeading,\n        children: \"Edit playlist\"\n      }), /*#__PURE__*/_jsx(\"p\", {\n        className: styles.description,\n        children: \"A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build situational awareness, or just show off your metrics to your team or visitors.\"\n      }), /*#__PURE__*/_jsx(PlaylistForm, {\n        onSubmit: onSubmit,\n        playlist: playlist\n      })]\n    })\n  });\n};\n\nconst mapStateToProps = state => ({\n  navModel: getNavModel(state.navIndex, 'playlists')\n});\n\nexport default connect(mapStateToProps)(PlaylistEditPage);","map":{"version":3,"names":["React","connect","locationService","useStyles2","Page","getNavModel","PlaylistForm","updatePlaylist","getPlaylistStyles","usePlaylist","PlaylistEditPage","navModel","match","styles","playlist","loading","params","uid","onSubmit","push","subHeading","description","mapStateToProps","state","navIndex"],"sources":["/home/soula/grafana/public/app/features/playlist/PlaylistEditPage.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\n\nimport { PlaylistForm } from './PlaylistForm';\nimport { updatePlaylist } from './api';\nimport { getPlaylistStyles } from './styles';\nimport { Playlist } from './types';\nimport { usePlaylist } from './usePlaylist';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\n\nexport interface RouteParams {\n  uid: string;\n}\n\ninterface Props extends ConnectedProps, GrafanaRouteComponentProps<RouteParams> {}\n\nexport const PlaylistEditPage: FC<Props> = ({ navModel, match }) => {\n  const styles = useStyles2(getPlaylistStyles);\n  const { playlist, loading } = usePlaylist(match.params.uid);\n  const onSubmit = async (playlist: Playlist) => {\n    await updatePlaylist(match.params.uid, playlist);\n    locationService.push('/playlists');\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        <h3 className={styles.subHeading}>Edit playlist</h3>\n\n        <p className={styles.description}>\n          A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build\n          situational awareness, or just show off your metrics to your team or visitors.\n        </p>\n\n        <PlaylistForm onSubmit={onSubmit} playlist={playlist} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'playlists'),\n});\n\nexport default connect(mapStateToProps)(PlaylistEditPage);\n"],"mappings":"AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAASC,OAAT,QAAyC,aAAzC;AAGA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAKA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,iBAAT,QAAkC,UAAlC;AAEA,SAASC,WAAT,QAA4B,eAA5B;;;AAYA,OAAO,MAAMC,gBAA2B,GAAG,CAAC;EAAEC,QAAF;EAAYC;AAAZ,CAAD,KAAyB;EAClE,MAAMC,MAAM,GAAGV,UAAU,CAACK,iBAAD,CAAzB;EACA,MAAM;IAAEM,QAAF;IAAYC;EAAZ,IAAwBN,WAAW,CAACG,KAAK,CAACI,MAAN,CAAaC,GAAd,CAAzC;;EACA,MAAMC,QAAQ,GAAG,MAAOJ,QAAP,IAA8B;IAC7C,MAAMP,cAAc,CAACK,KAAK,CAACI,MAAN,CAAaC,GAAd,EAAmBH,QAAnB,CAApB;IACAZ,eAAe,CAACiB,IAAhB,CAAqB,YAArB;EACD,CAHD;;EAKA,oBACE,KAAC,IAAD;IAAM,QAAQ,EAAER,QAAhB;IAAA,uBACE,MAAC,IAAD,CAAM,QAAN;MAAe,SAAS,EAAEI,OAA1B;MAAA,wBACE;QAAI,SAAS,EAAEF,MAAM,CAACO,UAAtB;QAAA;MAAA,EADF,eAGE;QAAG,SAAS,EAAEP,MAAM,CAACQ,WAArB;QAAA;MAAA,EAHF,eAQE,KAAC,YAAD;QAAc,QAAQ,EAAEH,QAAxB;QAAkC,QAAQ,EAAEJ;MAA5C,EARF;IAAA;EADF,EADF;AAcD,CAtBM;;AAwBP,MAAMQ,eAAgE,GAAIC,KAAD,KAAwB;EAC/FZ,QAAQ,EAAEN,WAAW,CAACkB,KAAK,CAACC,QAAP,EAAiB,WAAjB;AAD0E,CAAxB,CAAzE;;AAIA,eAAevB,OAAO,CAACqB,eAAD,CAAP,CAAyBZ,gBAAzB,CAAf"},"metadata":{},"sourceType":"module"}