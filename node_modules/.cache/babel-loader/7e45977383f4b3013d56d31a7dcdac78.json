{"ast":null,"code":"import { combineLatest, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport { ArrayDataFrame } from '@grafana/data';\nexport function mergePanelAndDashData(panelObservable, dashObservable) {\n  return combineLatest([panelObservable, dashObservable]).pipe(mergeMap(combined => {\n    var _dashData$annotations;\n\n    const [panelData, dashData] = combined;\n\n    if (Boolean((_dashData$annotations = dashData.annotations) === null || _dashData$annotations === void 0 ? void 0 : _dashData$annotations.length) || Boolean(dashData.alertState)) {\n      if (!panelData.annotations) {\n        panelData.annotations = [];\n      }\n\n      const annotations = panelData.annotations.concat(new ArrayDataFrame(dashData.annotations));\n      const alertState = dashData.alertState;\n      return of(Object.assign({}, panelData, {\n        annotations,\n        alertState\n      }));\n    }\n\n    return of(panelData);\n  }));\n}","map":{"version":3,"names":["combineLatest","of","mergeMap","ArrayDataFrame","mergePanelAndDashData","panelObservable","dashObservable","pipe","combined","panelData","dashData","Boolean","annotations","length","alertState","concat"],"sources":["/home/soula/grafana/public/app/features/query/state/mergePanelAndDashData.ts"],"sourcesContent":["import { combineLatest, Observable, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\nimport { ArrayDataFrame, PanelData } from '@grafana/data';\n\nimport { DashboardQueryRunnerResult } from './DashboardQueryRunner/types';\n\nexport function mergePanelAndDashData(\n  panelObservable: Observable<PanelData>,\n  dashObservable: Observable<DashboardQueryRunnerResult>\n): Observable<PanelData> {\n  return combineLatest([panelObservable, dashObservable]).pipe(\n    mergeMap((combined) => {\n      const [panelData, dashData] = combined;\n\n      if (Boolean(dashData.annotations?.length) || Boolean(dashData.alertState)) {\n        if (!panelData.annotations) {\n          panelData.annotations = [];\n        }\n\n        const annotations = panelData.annotations.concat(new ArrayDataFrame(dashData.annotations));\n        const alertState = dashData.alertState;\n        return of({ ...panelData, annotations, alertState });\n      }\n\n      return of(panelData);\n    })\n  );\n}\n"],"mappings":"AAAA,SAASA,aAAT,EAAoCC,EAApC,QAA8C,MAA9C;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,SAASC,cAAT,QAA0C,eAA1C;AAIA,OAAO,SAASC,qBAAT,CACLC,eADK,EAELC,cAFK,EAGkB;EACvB,OAAON,aAAa,CAAC,CAACK,eAAD,EAAkBC,cAAlB,CAAD,CAAb,CAAiDC,IAAjD,CACLL,QAAQ,CAAEM,QAAD,IAAc;IAAA;;IACrB,MAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwBF,QAA9B;;IAEA,IAAIG,OAAO,0BAACD,QAAQ,CAACE,WAAV,0DAAC,sBAAsBC,MAAvB,CAAP,IAAyCF,OAAO,CAACD,QAAQ,CAACI,UAAV,CAApD,EAA2E;MACzE,IAAI,CAACL,SAAS,CAACG,WAAf,EAA4B;QAC1BH,SAAS,CAACG,WAAV,GAAwB,EAAxB;MACD;;MAED,MAAMA,WAAW,GAAGH,SAAS,CAACG,WAAV,CAAsBG,MAAtB,CAA6B,IAAIZ,cAAJ,CAAmBO,QAAQ,CAACE,WAA5B,CAA7B,CAApB;MACA,MAAME,UAAU,GAAGJ,QAAQ,CAACI,UAA5B;MACA,OAAOb,EAAE,mBAAMQ,SAAN;QAAiBG,WAAjB;QAA8BE;MAA9B,GAAT;IACD;;IAED,OAAOb,EAAE,CAACQ,SAAD,CAAT;EACD,CAdO,CADH,CAAP;AAiBD"},"metadata":{},"sourceType":"module"}