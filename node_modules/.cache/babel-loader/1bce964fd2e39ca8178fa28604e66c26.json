{"ast":null,"code":"import { flatten } from 'lodash';\nimport React, { useMemo, useCallback } from 'react';\nimport { LegacyForms } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst {\n  Select\n} = LegacyForms;\nexport const MetricSelect = props => {\n  const {\n    value,\n    placeholder,\n    className,\n    isSearchable,\n    onChange\n  } = props;\n  const options = useSelectOptions(props);\n  const selected = useSelectedOption(options, value);\n  const onChangeValue = useCallback(selectable => onChange(selectable.value), [onChange]);\n  return /*#__PURE__*/_jsx(Select, {\n    className: className,\n    isMulti: false,\n    isClearable: false,\n    backspaceRemovesValue: false,\n    onChange: onChangeValue,\n    options: options,\n    isSearchable: isSearchable,\n    maxMenuHeight: 500,\n    placeholder: placeholder,\n    noOptionsMessage: () => 'No options found',\n    value: selected\n  });\n};\n\nconst useSelectOptions = ({\n  variables = [],\n  options\n}) => {\n  return useMemo(() => {\n    if (!Array.isArray(variables) || variables.length === 0) {\n      return options;\n    }\n\n    return [{\n      label: 'Template Variables',\n      options: variables.map(({\n        name\n      }) => ({\n        label: `$${name}`,\n        value: `$${name}`\n      }))\n    }, ...options];\n  }, [variables, options]);\n};\n\nconst useSelectedOption = (options, value) => {\n  return useMemo(() => {\n    const allOptions = options.every(o => o.options) ? flatten(options.map(o => o.options)) : options;\n    return allOptions.find(option => option.value === value);\n  }, [options, value]);\n};","map":{"version":3,"names":["flatten","React","useMemo","useCallback","LegacyForms","Select","MetricSelect","props","value","placeholder","className","isSearchable","onChange","options","useSelectOptions","selected","useSelectedOption","onChangeValue","selectable","variables","Array","isArray","length","label","map","name","allOptions","every","o","find","option"],"sources":["/home/soula/grafana/public/app/core/components/Select/MetricSelect.tsx"],"sourcesContent":["import { flatten } from 'lodash';\nimport React, { useMemo, useCallback, FC } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { LegacyForms } from '@grafana/ui';\nimport { Variable } from 'app/types/templates';\nconst { Select } = LegacyForms;\n\nexport interface Props {\n  onChange: (value: string | undefined) => void;\n  options: Array<SelectableValue<string>>;\n  isSearchable: boolean;\n  value: string;\n  placeholder?: string;\n  className?: string;\n  variables?: Variable[];\n}\n\nexport const MetricSelect: FC<Props> = (props) => {\n  const { value, placeholder, className, isSearchable, onChange } = props;\n  const options = useSelectOptions(props);\n  const selected = useSelectedOption(options, value);\n  const onChangeValue = useCallback((selectable: SelectableValue<string>) => onChange(selectable.value), [onChange]);\n\n  return (\n    <Select\n      className={className}\n      isMulti={false}\n      isClearable={false}\n      backspaceRemovesValue={false}\n      onChange={onChangeValue}\n      options={options}\n      isSearchable={isSearchable}\n      maxMenuHeight={500}\n      placeholder={placeholder}\n      noOptionsMessage={() => 'No options found'}\n      value={selected}\n    />\n  );\n};\n\nconst useSelectOptions = ({ variables = [], options }: Props): Array<SelectableValue<string>> => {\n  return useMemo(() => {\n    if (!Array.isArray(variables) || variables.length === 0) {\n      return options;\n    }\n\n    return [\n      {\n        label: 'Template Variables',\n        options: variables.map(({ name }) => ({\n          label: `$${name}`,\n          value: `$${name}`,\n        })),\n      },\n      ...options,\n    ];\n  }, [variables, options]);\n};\n\nconst useSelectedOption = (options: Array<SelectableValue<string>>, value: string): SelectableValue<string> => {\n  return useMemo(() => {\n    const allOptions = options.every((o) => o.options) ? flatten(options.map((o) => o.options)) : options;\n    return allOptions.find((option) => option.value === value);\n  }, [options, value]);\n};\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,IAAgBC,OAAhB,EAAyBC,WAAzB,QAAgD,OAAhD;AAGA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAM;EAAEC;AAAF,IAAaD,WAAnB;AAYA,OAAO,MAAME,YAAuB,GAAIC,KAAD,IAAW;EAChD,MAAM;IAAEC,KAAF;IAASC,WAAT;IAAsBC,SAAtB;IAAiCC,YAAjC;IAA+CC;EAA/C,IAA4DL,KAAlE;EACA,MAAMM,OAAO,GAAGC,gBAAgB,CAACP,KAAD,CAAhC;EACA,MAAMQ,QAAQ,GAAGC,iBAAiB,CAACH,OAAD,EAAUL,KAAV,CAAlC;EACA,MAAMS,aAAa,GAAGd,WAAW,CAAEe,UAAD,IAAyCN,QAAQ,CAACM,UAAU,CAACV,KAAZ,CAAlD,EAAsE,CAACI,QAAD,CAAtE,CAAjC;EAEA,oBACE,KAAC,MAAD;IACE,SAAS,EAAEF,SADb;IAEE,OAAO,EAAE,KAFX;IAGE,WAAW,EAAE,KAHf;IAIE,qBAAqB,EAAE,KAJzB;IAKE,QAAQ,EAAEO,aALZ;IAME,OAAO,EAAEJ,OANX;IAOE,YAAY,EAAEF,YAPhB;IAQE,aAAa,EAAE,GARjB;IASE,WAAW,EAAEF,WATf;IAUE,gBAAgB,EAAE,MAAM,kBAV1B;IAWE,KAAK,EAAEM;EAXT,EADF;AAeD,CArBM;;AAuBP,MAAMD,gBAAgB,GAAG,CAAC;EAAEK,SAAS,GAAG,EAAd;EAAkBN;AAAlB,CAAD,KAAwE;EAC/F,OAAOX,OAAO,CAAC,MAAM;IACnB,IAAI,CAACkB,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAD,IAA6BA,SAAS,CAACG,MAAV,KAAqB,CAAtD,EAAyD;MACvD,OAAOT,OAAP;IACD;;IAED,OAAO,CACL;MACEU,KAAK,EAAE,oBADT;MAEEV,OAAO,EAAEM,SAAS,CAACK,GAAV,CAAc,CAAC;QAAEC;MAAF,CAAD,MAAe;QACpCF,KAAK,EAAG,IAAGE,IAAK,EADoB;QAEpCjB,KAAK,EAAG,IAAGiB,IAAK;MAFoB,CAAf,CAAd;IAFX,CADK,EAQL,GAAGZ,OARE,CAAP;EAUD,CAfa,EAeX,CAACM,SAAD,EAAYN,OAAZ,CAfW,CAAd;AAgBD,CAjBD;;AAmBA,MAAMG,iBAAiB,GAAG,CAACH,OAAD,EAA0CL,KAA1C,KAAqF;EAC7G,OAAON,OAAO,CAAC,MAAM;IACnB,MAAMwB,UAAU,GAAGb,OAAO,CAACc,KAAR,CAAeC,CAAD,IAAOA,CAAC,CAACf,OAAvB,IAAkCb,OAAO,CAACa,OAAO,CAACW,GAAR,CAAaI,CAAD,IAAOA,CAAC,CAACf,OAArB,CAAD,CAAzC,GAA2EA,OAA9F;IACA,OAAOa,UAAU,CAACG,IAAX,CAAiBC,MAAD,IAAYA,MAAM,CAACtB,KAAP,KAAiBA,KAA7C,CAAP;EACD,CAHa,EAGX,CAACK,OAAD,EAAUL,KAAV,CAHW,CAAd;AAID,CALD"},"metadata":{},"sourceType":"module"}