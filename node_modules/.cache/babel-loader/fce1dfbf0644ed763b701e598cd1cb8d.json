{"ast":null,"code":"import React from 'react';\nimport { FrameGeometrySourceMode } from '@grafana/data';\nimport { getLocationMatchers } from 'app/features/geo/utils/location';\nimport { getScaledDimension, getColorDimension, getTextDimension, getScalarDimension } from 'app/features/dimensions';\nimport { ObservablePropsWrapper } from '../../components/ObservablePropsWrapper';\nimport { MarkersLegend } from './MarkersLegend';\nimport { ReplaySubject } from 'rxjs';\nimport { defaultStyleConfig } from '../../style/types';\nimport { StyleEditor } from './StyleEditor';\nimport { getStyleConfigState } from '../../style/utils';\nimport VectorLayer from 'ol/layer/Vector';\nimport { isNumber } from 'lodash';\nimport { FrameVectorSource } from 'app/features/geo/utils/frameVectorSource'; // Configuration options for Circle overlays\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultOptions = {\n  style: defaultStyleConfig,\n  showLegend: true\n};\nexport const MARKERS_LAYER_ID = 'markers'; // Used by default when nothing is configured\n\nexport const defaultMarkersConfig = {\n  type: MARKERS_LAYER_ID,\n  name: '',\n  // will get replaced\n  config: defaultOptions,\n  location: {\n    mode: FrameGeometrySourceMode.Auto\n  },\n  tooltip: true\n};\n/**\n * Map layer configuration for circle overlay\n */\n\nexport const markersLayer = {\n  id: MARKERS_LAYER_ID,\n  name: 'Markers',\n  description: 'Use markers to render each data point',\n  isBaseMap: false,\n  showLocation: true,\n  hideOpacity: true,\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param map\n   * @param options\n   * @param theme\n   */\n  create: async (map, options, eventBus, theme) => {\n    // Assert default values\n    const config = Object.assign({}, defaultOptions, options === null || options === void 0 ? void 0 : options.config);\n    const style = await getStyleConfigState(config.style);\n    const location = await getLocationMatchers(options.location);\n    const source = new FrameVectorSource(location);\n    const vectorLayer = new VectorLayer({\n      source\n    });\n    const legendProps = new ReplaySubject(1);\n    let legend = null;\n\n    if (config.showLegend) {\n      legend = /*#__PURE__*/_jsx(ObservablePropsWrapper, {\n        watch: legendProps,\n        initialSubProps: {},\n        child: MarkersLegend\n      });\n    }\n\n    if (!style.fields) {\n      // Set a global style\n      vectorLayer.setStyle(style.maker(style.base));\n    } else {\n      vectorLayer.setStyle(feature => {\n        const idx = feature.get('rowIndex');\n        const dims = style.dims;\n\n        if (!dims || !isNumber(idx)) {\n          return style.maker(style.base);\n        }\n\n        const values = Object.assign({}, style.base);\n\n        if (dims.color) {\n          values.color = dims.color.get(idx);\n        }\n\n        if (dims.size) {\n          values.size = dims.size.get(idx);\n        }\n\n        if (dims.text) {\n          values.text = dims.text.get(idx);\n        }\n\n        if (dims.rotation) {\n          values.rotation = dims.rotation.get(idx);\n        }\n\n        return style.maker(values);\n      });\n    }\n\n    return {\n      init: () => vectorLayer,\n      legend: legend,\n      update: data => {\n        var _data$series;\n\n        if (!((_data$series = data.series) !== null && _data$series !== void 0 && _data$series.length)) {\n          source.clear();\n          return; // ignore empty\n        }\n\n        for (const frame of data.series) {\n          if (style.fields) {\n            const dims = {};\n\n            if (style.fields.color) {\n              var _style$config$color;\n\n              dims.color = getColorDimension(frame, (_style$config$color = style.config.color) !== null && _style$config$color !== void 0 ? _style$config$color : defaultStyleConfig.color, theme);\n            }\n\n            if (style.fields.size) {\n              var _style$config$size;\n\n              dims.size = getScaledDimension(frame, (_style$config$size = style.config.size) !== null && _style$config$size !== void 0 ? _style$config$size : defaultStyleConfig.size);\n            }\n\n            if (style.fields.text) {\n              dims.text = getTextDimension(frame, style.config.text);\n            }\n\n            if (style.fields.rotation) {\n              var _style$config$rotatio;\n\n              dims.rotation = getScalarDimension(frame, (_style$config$rotatio = style.config.rotation) !== null && _style$config$rotatio !== void 0 ? _style$config$rotatio : defaultStyleConfig.rotation);\n            }\n\n            style.dims = dims;\n          } // Post updates to the legend component\n\n\n          if (legend) {\n            var _style$dims;\n\n            legendProps.next({\n              styleConfig: style,\n              size: (_style$dims = style.dims) === null || _style$dims === void 0 ? void 0 : _style$dims.size,\n              layerName: options.name,\n              layer: vectorLayer\n            });\n          }\n\n          source.update(frame);\n          break; // Only the first frame for now!\n        }\n      },\n      // Marker overlay options\n      registerOptionsUI: builder => {\n        builder.addCustomEditor({\n          id: 'config.style',\n          path: 'config.style',\n          name: 'Styles',\n          editor: StyleEditor,\n          settings: {\n            displayRotation: true\n          },\n          defaultValue: defaultOptions.style\n        }).addBooleanSwitch({\n          path: 'config.showLegend',\n          name: 'Show legend',\n          description: 'Show map legend',\n          defaultValue: defaultOptions.showLegend\n        });\n      }\n    };\n  },\n  // fill in the default values\n  defaultOptions\n};","map":{"version":3,"names":["React","FrameGeometrySourceMode","getLocationMatchers","getScaledDimension","getColorDimension","getTextDimension","getScalarDimension","ObservablePropsWrapper","MarkersLegend","ReplaySubject","defaultStyleConfig","StyleEditor","getStyleConfigState","VectorLayer","isNumber","FrameVectorSource","defaultOptions","style","showLegend","MARKERS_LAYER_ID","defaultMarkersConfig","type","name","config","location","mode","Auto","tooltip","markersLayer","id","description","isBaseMap","showLocation","hideOpacity","create","map","options","eventBus","theme","source","vectorLayer","legendProps","legend","fields","setStyle","maker","base","feature","idx","get","dims","values","color","size","text","rotation","init","update","data","series","length","clear","frame","next","styleConfig","layerName","layer","registerOptionsUI","builder","addCustomEditor","path","editor","settings","displayRotation","defaultValue","addBooleanSwitch"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/layers/data/markersLayer.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport {\n  MapLayerRegistryItem,\n  MapLayerOptions,\n  PanelData,\n  GrafanaTheme2,\n  FrameGeometrySourceMode,\n  EventBus,\n} from '@grafana/data';\nimport Map from 'ol/Map';\nimport { FeatureLike } from 'ol/Feature';\nimport { getLocationMatchers } from 'app/features/geo/utils/location';\nimport { getScaledDimension, getColorDimension, getTextDimension, getScalarDimension } from 'app/features/dimensions';\nimport { ObservablePropsWrapper } from '../../components/ObservablePropsWrapper';\nimport { MarkersLegend, MarkersLegendProps } from './MarkersLegend';\nimport { ReplaySubject } from 'rxjs';\nimport { defaultStyleConfig, StyleConfig, StyleDimensions } from '../../style/types';\nimport { StyleEditor } from './StyleEditor';\nimport { getStyleConfigState } from '../../style/utils';\nimport VectorLayer from 'ol/layer/Vector';\nimport { isNumber } from 'lodash';\nimport { FrameVectorSource } from 'app/features/geo/utils/frameVectorSource';\n\n// Configuration options for Circle overlays\nexport interface MarkersConfig {\n  style: StyleConfig;\n  showLegend?: boolean;\n}\n\nconst defaultOptions: MarkersConfig = {\n  style: defaultStyleConfig,\n  showLegend: true,\n};\n\nexport const MARKERS_LAYER_ID = 'markers';\n\n// Used by default when nothing is configured\nexport const defaultMarkersConfig: MapLayerOptions<MarkersConfig> = {\n  type: MARKERS_LAYER_ID,\n  name: '', // will get replaced\n  config: defaultOptions,\n  location: {\n    mode: FrameGeometrySourceMode.Auto,\n  },\n  tooltip: true,\n};\n\n/**\n * Map layer configuration for circle overlay\n */\nexport const markersLayer: MapLayerRegistryItem<MarkersConfig> = {\n  id: MARKERS_LAYER_ID,\n  name: 'Markers',\n  description: 'Use markers to render each data point',\n  isBaseMap: false,\n  showLocation: true,\n  hideOpacity: true,\n\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param map\n   * @param options\n   * @param theme\n   */\n  create: async (map: Map, options: MapLayerOptions<MarkersConfig>, eventBus: EventBus, theme: GrafanaTheme2) => {\n    // Assert default values\n    const config = {\n      ...defaultOptions,\n      ...options?.config,\n    };\n\n    const style = await getStyleConfigState(config.style);\n    const location = await getLocationMatchers(options.location);\n    const source = new FrameVectorSource(location);\n    const vectorLayer = new VectorLayer({\n      source,\n    });\n\n    const legendProps = new ReplaySubject<MarkersLegendProps>(1);\n    let legend: ReactNode = null;\n    if (config.showLegend) {\n      legend = <ObservablePropsWrapper watch={legendProps} initialSubProps={{}} child={MarkersLegend} />;\n    }\n\n    if (!style.fields) {\n      // Set a global style\n      vectorLayer.setStyle(style.maker(style.base));\n    } else {\n      vectorLayer.setStyle((feature: FeatureLike) => {\n        const idx = feature.get('rowIndex') as number;\n        const dims = style.dims;\n        if (!dims || !isNumber(idx)) {\n          return style.maker(style.base);\n        }\n\n        const values = { ...style.base };\n\n        if (dims.color) {\n          values.color = dims.color.get(idx);\n        }\n        if (dims.size) {\n          values.size = dims.size.get(idx);\n        }\n        if (dims.text) {\n          values.text = dims.text.get(idx);\n        }\n        if (dims.rotation) {\n          values.rotation = dims.rotation.get(idx);\n        }\n        return style.maker(values);\n      });\n    }\n\n    return {\n      init: () => vectorLayer,\n      legend: legend,\n      update: (data: PanelData) => {\n        if (!data.series?.length) {\n          source.clear();\n          return; // ignore empty\n        }\n\n        for (const frame of data.series) {\n          if (style.fields) {\n            const dims: StyleDimensions = {};\n            if (style.fields.color) {\n              dims.color = getColorDimension(frame, style.config.color ?? defaultStyleConfig.color, theme);\n            }\n            if (style.fields.size) {\n              dims.size = getScaledDimension(frame, style.config.size ?? defaultStyleConfig.size);\n            }\n            if (style.fields.text) {\n              dims.text = getTextDimension(frame, style.config.text!);\n            }\n            if (style.fields.rotation) {\n              dims.rotation = getScalarDimension(frame, style.config.rotation ?? defaultStyleConfig.rotation);\n            }\n            style.dims = dims;\n          }\n\n          // Post updates to the legend component\n          if (legend) {\n            legendProps.next({\n              styleConfig: style,\n              size: style.dims?.size,\n              layerName: options.name,\n              layer: vectorLayer,\n            });\n          }\n\n          source.update(frame);\n          break; // Only the first frame for now!\n        }\n      },\n\n      // Marker overlay options\n      registerOptionsUI: (builder) => {\n        builder\n          .addCustomEditor({\n            id: 'config.style',\n            path: 'config.style',\n            name: 'Styles',\n            editor: StyleEditor,\n            settings: {\n              displayRotation: true,\n            },\n            defaultValue: defaultOptions.style,\n          })\n          .addBooleanSwitch({\n            path: 'config.showLegend',\n            name: 'Show legend',\n            description: 'Show map legend',\n            defaultValue: defaultOptions.showLegend,\n          });\n      },\n    };\n  },\n\n  // fill in the default values\n  defaultOptions,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}