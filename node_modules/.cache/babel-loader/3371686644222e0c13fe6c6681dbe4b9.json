{"ast":null,"code":"var _h;\n\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { getTimeZone } from '@grafana/data';\nimport { Button, ConfirmModal, IconButton, useStyles2 } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction } from 'app/types';\nimport { CreateTokenModal } from './components/CreateTokenModal';\nimport { ServiceAccountProfile } from './components/ServiceAccountProfile';\nimport { ServiceAccountTokensTable } from './components/ServiceAccountTokensTable';\nimport { fetchACOptions } from './state/actions';\nimport { createServiceAccountToken, deleteServiceAccount, deleteServiceAccountToken, loadServiceAccount, loadServiceAccountTokens, updateServiceAccount } from './state/actionsServiceAccountPage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction mapStateToProps(state) {\n  return {\n    navModel: getNavModel(state.navIndex, 'serviceaccounts'),\n    serviceAccount: state.serviceAccountProfile.serviceAccount,\n    tokens: state.serviceAccountProfile.tokens,\n    isLoading: state.serviceAccountProfile.isLoading,\n    roleOptions: state.serviceAccounts.roleOptions,\n    builtInRoles: state.serviceAccounts.builtInRoles,\n    timezone: getTimeZone(state.user)\n  };\n}\n\nconst mapDispatchToProps = {\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport const ServiceAccountPageUnconnected = ({\n  navModel,\n  match,\n  serviceAccount,\n  tokens,\n  timezone,\n  isLoading,\n  roleOptions,\n  builtInRoles,\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount\n}) => {\n  const [newToken, setNewToken] = useState('');\n  const [isTokenModalOpen, setIsTokenModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n  const styles = useStyles2(getStyles);\n  const serviceAccountId = parseInt(match.params.id, 10);\n  const tokenActionsDisabled = !contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) || serviceAccount.isDisabled;\n  const ableToWrite = contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite);\n  useEffect(() => {\n    loadServiceAccount(serviceAccountId);\n    loadServiceAccountTokens(serviceAccountId);\n\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [loadServiceAccount, loadServiceAccountTokens, serviceAccountId]);\n\n  const onProfileChange = serviceAccount => {\n    updateServiceAccount(serviceAccount);\n  };\n\n  const showDeleteServiceAccountModal = show => () => {\n    setIsDeleteModalOpen(show);\n  };\n\n  const showDisableServiceAccountModal = show => () => {\n    setIsDisableModalOpen(show);\n  };\n\n  const handleServiceAccountDelete = () => {\n    deleteServiceAccount(serviceAccount.id);\n  };\n\n  const handleServiceAccountDisable = () => {\n    updateServiceAccount(Object.assign({}, serviceAccount, {\n      isDisabled: true\n    }));\n    setIsDisableModalOpen(false);\n  };\n\n  const handleServiceAccountEnable = () => {\n    updateServiceAccount(Object.assign({}, serviceAccount, {\n      isDisabled: false\n    }));\n  };\n\n  const onDeleteServiceAccountToken = key => {\n    deleteServiceAccountToken(serviceAccount === null || serviceAccount === void 0 ? void 0 : serviceAccount.id, key.id);\n  };\n\n  const onCreateToken = token => {\n    createServiceAccountToken(serviceAccount === null || serviceAccount === void 0 ? void 0 : serviceAccount.id, token, setNewToken);\n  };\n\n  const onTokenModalClose = () => {\n    setIsTokenModalOpen(false);\n    setNewToken('');\n  };\n\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      isLoading: isLoading,\n      children: [serviceAccount && /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.headerContainer,\n        children: [/*#__PURE__*/_jsx(\"a\", {\n          href: \"org/serviceaccounts\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            size: \"xxl\",\n            variant: \"secondary\",\n            name: \"arrow-left\",\n            className: styles.returnButton,\n            \"aria-label\": \"Back to service accounts list\"\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.headerAvatar,\n          children: /*#__PURE__*/_jsx(\"img\", {\n            src: serviceAccount.avatarUrl,\n            alt: `Avatar for user ${serviceAccount.name}`\n          })\n        }), /*#__PURE__*/_jsx(\"h3\", {\n          children: serviceAccount.name\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.buttonRow,\n          children: [/*#__PURE__*/_jsx(Button, {\n            type: 'button',\n            variant: \"destructive\",\n            onClick: showDeleteServiceAccountModal(true),\n            disabled: !contextSrv.hasPermission(AccessControlAction.ServiceAccountsDelete),\n            children: \"Delete service account\"\n          }), serviceAccount.isDisabled ? /*#__PURE__*/_jsx(Button, {\n            type: 'button',\n            variant: \"secondary\",\n            onClick: handleServiceAccountEnable,\n            disabled: !ableToWrite,\n            children: \"Enable service account\"\n          }) : /*#__PURE__*/_jsx(Button, {\n            type: 'button',\n            variant: \"secondary\",\n            onClick: showDisableServiceAccountModal(true),\n            disabled: !ableToWrite,\n            children: \"Disable service account\"\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.pageBody,\n        children: [serviceAccount && /*#__PURE__*/_jsx(ServiceAccountProfile, {\n          serviceAccount: serviceAccount,\n          timeZone: timezone,\n          roleOptions: roleOptions,\n          builtInRoles: builtInRoles,\n          onChange: onProfileChange\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.tokensListHeader,\n          children: [_h || (_h = /*#__PURE__*/_jsx(\"h4\", {\n            children: \"Tokens\"\n          })), /*#__PURE__*/_jsx(Button, {\n            onClick: () => setIsTokenModalOpen(true),\n            disabled: tokenActionsDisabled,\n            children: \"Add service account token\"\n          })]\n        }), tokens && /*#__PURE__*/_jsx(ServiceAccountTokensTable, {\n          tokens: tokens,\n          timeZone: timezone,\n          onDelete: onDeleteServiceAccountToken,\n          tokenActionsDisabled: tokenActionsDisabled\n        })]\n      }), /*#__PURE__*/_jsx(ConfirmModal, {\n        isOpen: isDeleteModalOpen,\n        title: \"Delete service account\",\n        body: \"Are you sure you want to delete this service account?\",\n        confirmText: \"Delete service account\",\n        onConfirm: handleServiceAccountDelete,\n        onDismiss: showDeleteServiceAccountModal(false)\n      }), /*#__PURE__*/_jsx(ConfirmModal, {\n        isOpen: isDisableModalOpen,\n        title: \"Disable service account\",\n        body: \"Are you sure you want to disable this service account?\",\n        confirmText: \"Disable service account\",\n        onConfirm: handleServiceAccountDisable,\n        onDismiss: showDisableServiceAccountModal(false)\n      }), /*#__PURE__*/_jsx(CreateTokenModal, {\n        isOpen: isTokenModalOpen,\n        token: newToken,\n        serviceAccountLogin: serviceAccount.login,\n        onCreateToken: onCreateToken,\n        onClose: onTokenModalClose\n      })]\n    })\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    headerContainer: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(2)};\n      align-items: center;\n\n      h3 {\n        margin-bottom: ${theme.spacing(0.5)};\n        flex-grow: 1;\n      }\n    `,\n    headerAvatar: css`\n      margin-right: ${theme.spacing(1)};\n      margin-bottom: ${theme.spacing(0.6)};\n      img {\n        width: 25px;\n        height: 25px;\n        border-radius: 50%;\n      }\n    `,\n    returnButton: css`\n      margin-right: ${theme.spacing(1)};\n    `,\n    buttonRow: css`\n      > * {\n        margin-right: ${theme.spacing(2)};\n      }\n    `,\n    pageBody: css`\n      padding-left: ${theme.spacing(5.5)};\n    `,\n    tokensListHeader: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    `\n  };\n};\n\nexport const ServiceAccountPage = connector(ServiceAccountPageUnconnected);","map":{"version":3,"names":["css","React","useEffect","useState","connect","getTimeZone","Button","ConfirmModal","IconButton","useStyles2","Page","contextSrv","getNavModel","AccessControlAction","CreateTokenModal","ServiceAccountProfile","ServiceAccountTokensTable","fetchACOptions","createServiceAccountToken","deleteServiceAccount","deleteServiceAccountToken","loadServiceAccount","loadServiceAccountTokens","updateServiceAccount","mapStateToProps","state","navModel","navIndex","serviceAccount","serviceAccountProfile","tokens","isLoading","roleOptions","serviceAccounts","builtInRoles","timezone","user","mapDispatchToProps","connector","ServiceAccountPageUnconnected","match","newToken","setNewToken","isTokenModalOpen","setIsTokenModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","isDisableModalOpen","setIsDisableModalOpen","styles","getStyles","serviceAccountId","parseInt","params","id","tokenActionsDisabled","hasPermission","ServiceAccountsWrite","isDisabled","ableToWrite","licensedAccessControlEnabled","onProfileChange","showDeleteServiceAccountModal","show","showDisableServiceAccountModal","handleServiceAccountDelete","handleServiceAccountDisable","handleServiceAccountEnable","onDeleteServiceAccountToken","key","onCreateToken","token","onTokenModalClose","headerContainer","returnButton","headerAvatar","avatarUrl","name","buttonRow","ServiceAccountsDelete","pageBody","tokensListHeader","login","theme","spacing","ServiceAccountPage"],"sources":["/home/soula/grafana/public/app/features/serviceaccounts/ServiceAccountPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { getTimeZone, GrafanaTheme2, NavModel } from '@grafana/data';\nimport { Button, ConfirmModal, IconButton, useStyles2 } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, ApiKey, Role, ServiceAccountDTO, StoreState } from 'app/types';\n\nimport { CreateTokenModal, ServiceAccountToken } from './components/CreateTokenModal';\nimport { ServiceAccountProfile } from './components/ServiceAccountProfile';\nimport { ServiceAccountTokensTable } from './components/ServiceAccountTokensTable';\nimport { fetchACOptions } from './state/actions';\nimport {\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n} from './state/actionsServiceAccountPage';\n\ninterface OwnProps extends GrafanaRouteComponentProps<{ id: string }> {\n  navModel: NavModel;\n  serviceAccount?: ServiceAccountDTO;\n  tokens: ApiKey[];\n  isLoading: boolean;\n  roleOptions: Role[];\n  builtInRoles: Record<string, Role[]>;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'serviceaccounts'),\n    serviceAccount: state.serviceAccountProfile.serviceAccount,\n    tokens: state.serviceAccountProfile.tokens,\n    isLoading: state.serviceAccountProfile.isLoading,\n    roleOptions: state.serviceAccounts.roleOptions,\n    builtInRoles: state.serviceAccounts.builtInRoles,\n    timezone: getTimeZone(state.user),\n  };\n}\n\nconst mapDispatchToProps = {\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport const ServiceAccountPageUnconnected = ({\n  navModel,\n  match,\n  serviceAccount,\n  tokens,\n  timezone,\n  isLoading,\n  roleOptions,\n  builtInRoles,\n  createServiceAccountToken,\n  deleteServiceAccount,\n  deleteServiceAccountToken,\n  loadServiceAccount,\n  loadServiceAccountTokens,\n  updateServiceAccount,\n}: Props): JSX.Element => {\n  const [newToken, setNewToken] = useState('');\n  const [isTokenModalOpen, setIsTokenModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n  const styles = useStyles2(getStyles);\n  const serviceAccountId = parseInt(match.params.id, 10);\n  const tokenActionsDisabled =\n    !contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) || serviceAccount.isDisabled;\n\n  const ableToWrite = contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite);\n\n  useEffect(() => {\n    loadServiceAccount(serviceAccountId);\n    loadServiceAccountTokens(serviceAccountId);\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [loadServiceAccount, loadServiceAccountTokens, serviceAccountId]);\n\n  const onProfileChange = (serviceAccount: ServiceAccountDTO) => {\n    updateServiceAccount(serviceAccount);\n  };\n\n  const showDeleteServiceAccountModal = (show: boolean) => () => {\n    setIsDeleteModalOpen(show);\n  };\n\n  const showDisableServiceAccountModal = (show: boolean) => () => {\n    setIsDisableModalOpen(show);\n  };\n\n  const handleServiceAccountDelete = () => {\n    deleteServiceAccount(serviceAccount.id);\n  };\n\n  const handleServiceAccountDisable = () => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: true });\n    setIsDisableModalOpen(false);\n  };\n\n  const handleServiceAccountEnable = () => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: false });\n  };\n\n  const onDeleteServiceAccountToken = (key: ApiKey) => {\n    deleteServiceAccountToken(serviceAccount?.id, key.id!);\n  };\n\n  const onCreateToken = (token: ServiceAccountToken) => {\n    createServiceAccountToken(serviceAccount?.id, token, setNewToken);\n  };\n\n  const onTokenModalClose = () => {\n    setIsTokenModalOpen(false);\n    setNewToken('');\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>\n        {serviceAccount && (\n          <div className={styles.headerContainer}>\n            <a href=\"org/serviceaccounts\">\n              <IconButton\n                size=\"xxl\"\n                variant=\"secondary\"\n                name=\"arrow-left\"\n                className={styles.returnButton}\n                aria-label=\"Back to service accounts list\"\n              />\n            </a>\n            <div className={styles.headerAvatar}>\n              <img src={serviceAccount.avatarUrl} alt={`Avatar for user ${serviceAccount.name}`} />\n            </div>\n            <h3>{serviceAccount.name}</h3>\n            <div className={styles.buttonRow}>\n              <Button\n                type={'button'}\n                variant=\"destructive\"\n                onClick={showDeleteServiceAccountModal(true)}\n                disabled={!contextSrv.hasPermission(AccessControlAction.ServiceAccountsDelete)}\n              >\n                Delete service account\n              </Button>\n              {serviceAccount.isDisabled ? (\n                <Button\n                  type={'button'}\n                  variant=\"secondary\"\n                  onClick={handleServiceAccountEnable}\n                  disabled={!ableToWrite}\n                >\n                  Enable service account\n                </Button>\n              ) : (\n                <Button\n                  type={'button'}\n                  variant=\"secondary\"\n                  onClick={showDisableServiceAccountModal(true)}\n                  disabled={!ableToWrite}\n                >\n                  Disable service account\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        <div className={styles.pageBody}>\n          {serviceAccount && (\n            <ServiceAccountProfile\n              serviceAccount={serviceAccount}\n              timeZone={timezone}\n              roleOptions={roleOptions}\n              builtInRoles={builtInRoles}\n              onChange={onProfileChange}\n            />\n          )}\n          <div className={styles.tokensListHeader}>\n            <h4>Tokens</h4>\n            <Button onClick={() => setIsTokenModalOpen(true)} disabled={tokenActionsDisabled}>\n              Add service account token\n            </Button>\n          </div>\n          {tokens && (\n            <ServiceAccountTokensTable\n              tokens={tokens}\n              timeZone={timezone}\n              onDelete={onDeleteServiceAccountToken}\n              tokenActionsDisabled={tokenActionsDisabled}\n            />\n          )}\n        </div>\n        <ConfirmModal\n          isOpen={isDeleteModalOpen}\n          title=\"Delete service account\"\n          body=\"Are you sure you want to delete this service account?\"\n          confirmText=\"Delete service account\"\n          onConfirm={handleServiceAccountDelete}\n          onDismiss={showDeleteServiceAccountModal(false)}\n        />\n        <ConfirmModal\n          isOpen={isDisableModalOpen}\n          title=\"Disable service account\"\n          body=\"Are you sure you want to disable this service account?\"\n          confirmText=\"Disable service account\"\n          onConfirm={handleServiceAccountDisable}\n          onDismiss={showDisableServiceAccountModal(false)}\n        />\n        <CreateTokenModal\n          isOpen={isTokenModalOpen}\n          token={newToken}\n          serviceAccountLogin={serviceAccount.login}\n          onCreateToken={onCreateToken}\n          onClose={onTokenModalClose}\n        />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    headerContainer: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(2)};\n      align-items: center;\n\n      h3 {\n        margin-bottom: ${theme.spacing(0.5)};\n        flex-grow: 1;\n      }\n    `,\n    headerAvatar: css`\n      margin-right: ${theme.spacing(1)};\n      margin-bottom: ${theme.spacing(0.6)};\n      img {\n        width: 25px;\n        height: 25px;\n        border-radius: 50%;\n      }\n    `,\n    returnButton: css`\n      margin-right: ${theme.spacing(1)};\n    `,\n    buttonRow: css`\n      > * {\n        margin-right: ${theme.spacing(2)};\n      }\n    `,\n    pageBody: css`\n      padding-left: ${theme.spacing(5.5)};\n    `,\n    tokensListHeader: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    `,\n  };\n};\n\nexport const ServiceAccountPage = connector(ServiceAccountPageUnconnected);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}