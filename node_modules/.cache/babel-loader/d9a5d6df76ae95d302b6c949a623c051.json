{"ast":null,"code":"var _div;\n\nconst _excluded = [\"metricDescriptors\", \"labels\", \"metricTypes\", \"services\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport { MetricFindQueryTypes } from '../types';\nimport { VariableQueryField } from './';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class CloudMonitoringVariableQueryEditor extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"queryTypes\", [{\n      value: MetricFindQueryTypes.Projects,\n      label: 'Projects'\n    }, {\n      value: MetricFindQueryTypes.Services,\n      label: 'Services'\n    }, {\n      value: MetricFindQueryTypes.MetricTypes,\n      label: 'Metric Types'\n    }, {\n      value: MetricFindQueryTypes.LabelKeys,\n      label: 'Label Keys'\n    }, {\n      value: MetricFindQueryTypes.LabelValues,\n      label: 'Label Values'\n    }, {\n      value: MetricFindQueryTypes.ResourceTypes,\n      label: 'Resource Types'\n    }, {\n      value: MetricFindQueryTypes.Aggregations,\n      label: 'Aggregations'\n    }, {\n      value: MetricFindQueryTypes.Aligners,\n      label: 'Aligners'\n    }, {\n      value: MetricFindQueryTypes.AlignmentPeriods,\n      label: 'Alignment Periods'\n    }, {\n      value: MetricFindQueryTypes.Selectors,\n      label: 'Selectors'\n    }, {\n      value: MetricFindQueryTypes.SLOServices,\n      label: 'SLO Services'\n    }, {\n      value: MetricFindQueryTypes.SLO,\n      label: 'Service Level Objectives (SLO)'\n    }]);\n\n    _defineProperty(this, \"defaults\", {\n      selectedQueryType: this.queryTypes[0].value,\n      metricDescriptors: [],\n      selectedService: '',\n      selectedMetricType: '',\n      labels: [],\n      labelKey: '',\n      metricTypes: [],\n      services: [],\n      sloServices: [],\n      selectedSLOService: '',\n      projects: [],\n      projectName: '',\n      loading: true\n    });\n\n    _defineProperty(this, \"onPropsChange\", () => {\n      const _this$state = this.state,\n            queryModel = _objectWithoutPropertiesLoose(_this$state, _excluded);\n\n      this.props.onChange(Object.assign({}, queryModel, {\n        refId: 'CloudMonitoringVariableQueryEditor-VariableQuery'\n      }));\n    });\n\n    this.state = Object.assign(this.defaults, {\n      projectName: this.props.datasource.getDefaultProject()\n    }, this.props.query);\n  }\n\n  async componentDidMount() {\n    const projects = await this.props.datasource.getProjects();\n    const metricDescriptors = await this.props.datasource.getMetricTypes(this.props.query.projectName || this.props.datasource.getDefaultProject());\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map(m => ({\n      value: m.service,\n      label: m.serviceShortName\n    }));\n    let selectedService = '';\n\n    if (services.some(s => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const {\n      metricTypes,\n      selectedMetricType\n    } = getMetricTypes(metricDescriptors, this.state.selectedMetricType, getTemplateSrv().replace(this.state.selectedMetricType), getTemplateSrv().replace(selectedService));\n    const sloServices = await this.props.datasource.getSLOServices(this.state.projectName);\n    const state = Object.assign({\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects\n    }, await this.getLabels(selectedMetricType, this.state.projectName), {\n      sloServices,\n      loading: false\n    });\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onQueryTypeChange(queryType) {\n    const state = Object.assign({\n      selectedQueryType: queryType\n    }, await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType));\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const {\n      metricTypes,\n      selectedMetricType\n    } = getMetricTypes(metricDescriptors, this.state.selectedMetricType, getTemplateSrv().replace(this.state.selectedMetricType), getTemplateSrv().replace(this.state.selectedService));\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n    this.setState(Object.assign({}, labels, {\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projectName,\n      sloServices\n    }), () => this.onPropsChange());\n  }\n\n  async onServiceChange(service) {\n    const {\n      metricTypes,\n      selectedMetricType\n    } = getMetricTypes(this.state.metricDescriptors, this.state.selectedMetricType, getTemplateSrv().replace(this.state.selectedMetricType), getTemplateSrv().replace(service));\n    const state = Object.assign({\n      selectedService: service,\n      metricTypes,\n      selectedMetricType\n    }, await this.getLabels(selectedMetricType, this.state.projectName));\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onMetricTypeChange(metricType) {\n    const state = Object.assign({\n      selectedMetricType: metricType\n    }, await this.getLabels(metricType, this.state.projectName));\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onLabelKeyChange(labelKey) {\n    this.setState({\n      labelKey\n    }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType, projectName, selectedQueryType = this.state.selectedQueryType) {\n    let result = {\n      labels: this.state.labels,\n      labelKey: this.state.labelKey\n    };\n\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some(l => l === getTemplateSrv().replace(this.state.labelKey)) ? this.state.labelKey : labels[0];\n      result = {\n        labels,\n        labelKey\n      };\n    }\n\n    return result;\n  }\n\n  renderQueryTypeSwitch(queryType) {\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: getTemplateSrv().getVariables().map(v => ({\n        value: `$${v.name}`,\n        label: `$${v.name}`\n      }))\n    };\n\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(VariableQueryField, {\n            allowCustomValue: true,\n            value: this.state.projectName,\n            options: [variableOptionGroup, ...this.state.projects],\n            onChange: value => this.onProjectChange(value),\n            label: \"Project\"\n          }), /*#__PURE__*/_jsx(VariableQueryField, {\n            value: this.state.selectedService,\n            options: [variableOptionGroup, ...this.state.services],\n            onChange: value => this.onServiceChange(value),\n            label: \"Service\"\n          })]\n        });\n\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(VariableQueryField, {\n            allowCustomValue: true,\n            value: this.state.projectName,\n            options: [variableOptionGroup, ...this.state.projects],\n            onChange: value => this.onProjectChange(value),\n            label: \"Project\"\n          }), /*#__PURE__*/_jsx(VariableQueryField, {\n            value: this.state.selectedService,\n            options: [variableOptionGroup, ...this.state.services],\n            onChange: value => this.onServiceChange(value),\n            label: \"Service\"\n          }), /*#__PURE__*/_jsx(VariableQueryField, {\n            value: this.state.selectedMetricType,\n            options: [variableOptionGroup, ...this.state.metricTypes.map(({\n              value,\n              name\n            }) => ({\n              value,\n              label: name\n            }))],\n            onChange: value => this.onMetricTypeChange(value),\n            label: \"Metric Type\"\n          }), queryType === MetricFindQueryTypes.LabelValues && /*#__PURE__*/_jsx(VariableQueryField, {\n            value: this.state.labelKey,\n            options: [variableOptionGroup, ...this.state.labels.map(l => ({\n              value: l,\n              label: l\n            }))],\n            onChange: value => this.onLabelKeyChange(value),\n            label: \"Label Key\"\n          })]\n        });\n\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(VariableQueryField, {\n            value: this.state.selectedService,\n            options: [variableOptionGroup, ...this.state.services],\n            onChange: value => this.onServiceChange(value),\n            label: \"Service\"\n          }), /*#__PURE__*/_jsx(VariableQueryField, {\n            value: this.state.selectedMetricType,\n            options: [variableOptionGroup, ...this.state.metricTypes.map(({\n              value,\n              name\n            }) => ({\n              value,\n              label: name\n            }))],\n            onChange: value => this.onMetricTypeChange(value),\n            label: \"Metric Type\"\n          })]\n        });\n\n      case MetricFindQueryTypes.SLOServices:\n        return /*#__PURE__*/_jsx(_Fragment, {\n          children: /*#__PURE__*/_jsx(VariableQueryField, {\n            allowCustomValue: true,\n            value: this.state.projectName,\n            options: [variableOptionGroup, ...this.state.projects],\n            onChange: value => this.onProjectChange(value),\n            label: \"Project\"\n          })\n        });\n\n      case MetricFindQueryTypes.SLO:\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(VariableQueryField, {\n            allowCustomValue: true,\n            value: this.state.projectName,\n            options: [variableOptionGroup, ...this.state.projects],\n            onChange: value => this.onProjectChange(value),\n            label: \"Project\"\n          }), /*#__PURE__*/_jsx(VariableQueryField, {\n            value: this.state.selectedSLOService,\n            options: [variableOptionGroup, ...this.state.sloServices],\n            onChange: value => {\n              this.setState(Object.assign({}, this.state, {\n                selectedSLOService: value\n              }));\n            },\n            label: \"SLO Service\"\n          })]\n        });\n\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return _div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form max-width-21\",\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          className: \"gf-form-label width-10 query-keyword\",\n          children: \"Query Type\"\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form-select-wrapper max-width-12\",\n          children: /*#__PURE__*/_jsx(\"select\", {\n            className: \"gf-form-input\",\n            children: /*#__PURE__*/_jsx(\"option\", {\n              children: \"Loading...\"\n            })\n          })\n        })]\n      }));\n    }\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(VariableQueryField, {\n        value: this.state.selectedQueryType,\n        options: this.queryTypes,\n        onChange: value => this.onQueryTypeChange(value),\n        label: \"Query Type\"\n      }), this.renderQueryTypeSwitch(this.state.selectedQueryType)]\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","getTemplateSrv","extractServicesFromMetricDescriptors","getLabelKeys","getMetricTypes","MetricFindQueryTypes","VariableQueryField","CloudMonitoringVariableQueryEditor","constructor","props","value","Projects","label","Services","MetricTypes","LabelKeys","LabelValues","ResourceTypes","Aggregations","Aligners","AlignmentPeriods","Selectors","SLOServices","SLO","selectedQueryType","queryTypes","metricDescriptors","selectedService","selectedMetricType","labels","labelKey","metricTypes","services","sloServices","selectedSLOService","projects","projectName","loading","state","queryModel","onChange","refId","Object","assign","defaults","datasource","getDefaultProject","query","componentDidMount","getProjects","map","m","service","serviceShortName","some","s","replace","length","getSLOServices","getLabels","setState","onPropsChange","onQueryTypeChange","queryType","onProjectChange","onServiceChange","onMetricTypeChange","metricType","onLabelKeyChange","componentDidUpdate","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","result","l","renderQueryTypeSwitch","variableOptionGroup","expanded","options","getVariables","v","name","render"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  CloudMonitoringVariableQuery,\n  MetricDescriptor,\n  MetricFindQueryTypes,\n  VariableQueryData,\n} from '../types';\n\nimport { VariableQueryField } from './';\n\nexport type Props = QueryEditorProps<\n  CloudMonitoringDatasource,\n  CloudMonitoringQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery\n>;\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<Props, VariableQueryData> {\n  queryTypes: Array<{ value: string; label: string }> = [\n    { value: MetricFindQueryTypes.Projects, label: 'Projects' },\n    { value: MetricFindQueryTypes.Services, label: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, label: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, label: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, label: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, label: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, label: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, label: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, label: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, label: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, label: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, label: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = Object.assign(\n      this.defaults,\n      { projectName: this.props.datasource.getDefaultProject() },\n      this.props.query\n    );\n  }\n\n  async componentDidMount() {\n    const projects = (await this.props.datasource.getProjects()) as MetricDescriptor[];\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      label: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some((s) => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(this.state.projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n      sloServices,\n      loading: false,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    this.props.onChange({ ...queryModel, refId: 'CloudMonitoringVariableQueryEditor-VariableQuery' });\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState(\n      {\n        ...labels,\n        metricTypes,\n        selectedMetricType,\n        metricDescriptors,\n        projectName,\n        sloServices,\n      },\n      () => this.onPropsChange()\n    );\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some((l) => l === getTemplateSrv().replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: getTemplateSrv()\n        .getVariables()\n        .map((v: any) => ({\n          value: `$${v.name}`,\n          label: `$${v.name}`,\n        })),\n    };\n\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <VariableQueryField\n                value={this.state.labelKey}\n                options={[variableOptionGroup, ...this.state.labels.map((l) => ({ value: l, label: l }))]}\n                onChange={(value) => this.onLabelKeyChange(value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedSLOService}\n              options={[variableOptionGroup, ...this.state.sloServices]}\n              onChange={(value) => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"gf-form max-width-21\">\n          <span className=\"gf-form-label width-10 query-keyword\">Query Type</span>\n          <div className=\"gf-form-select-wrapper max-width-12\">\n            <select className=\"gf-form-input\">\n              <option>Loading...</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <VariableQueryField\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onChange={(value) => this.onQueryTypeChange(value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}