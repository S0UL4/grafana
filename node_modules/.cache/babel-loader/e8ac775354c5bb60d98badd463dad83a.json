{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { cx, css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React from 'react';\nimport tinycolor from 'tinycolor2';\nimport { useStyles2 } from '../../themes';\nimport { Input } from '../Input/Input';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nclass ColorInput extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"updateColor\", color => {\n      this.props.onChange(color);\n    });\n\n    _defineProperty(this, \"onChange\", event => {\n      const newColor = tinycolor(event.currentTarget.value);\n      this.setState({\n        value: event.currentTarget.value\n      });\n\n      if (newColor.isValid()) {\n        this.updateColor(newColor.toString());\n      }\n    });\n\n    _defineProperty(this, \"onBlur\", () => {\n      const newColor = tinycolor(this.state.value);\n\n      if (!newColor.isValid()) {\n        this.setState({\n          value: this.props.color\n        });\n      }\n    });\n\n    this.state = {\n      previousColor: props.color,\n      value: props.color\n    };\n    this.updateColor = debounce(this.updateColor, 100);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const newColor = tinycolor(props.color);\n\n    if (newColor.isValid() && props.color !== state.previousColor) {\n      return Object.assign({}, state, {\n        previousColor: props.color,\n        value: newColor.toString()\n      });\n    }\n\n    return state;\n  }\n\n  render() {\n    const {\n      value\n    } = this.state;\n    return /*#__PURE__*/_jsx(Input, {\n      className: this.props.className,\n      value: value,\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      addonBefore: /*#__PURE__*/_jsx(ColorPreview, {\n        color: this.props.color\n      })\n    });\n  }\n\n}\n\nexport default ColorInput;\n\nconst ColorPreview = ({\n  color\n}) => {\n  const styles = useStyles2(getColorPreviewStyles);\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: cx(styles, css`\n          background-color: ${color};\n        `)\n  });\n};\n\nconst getColorPreviewStyles = theme => css`\n  height: 100%;\n  width: ${theme.spacing.gridSize * 4}px;\n  border-radius: ${theme.shape.borderRadius()} 0 0 ${theme.shape.borderRadius()};\n  border: 1px solid ${theme.colors.border.medium};\n`;","map":{"version":3,"names":["cx","css","debounce","React","tinycolor","useStyles2","Input","ColorInput","PureComponent","constructor","props","color","onChange","event","newColor","currentTarget","value","setState","isValid","updateColor","toString","state","previousColor","getDerivedStateFromProps","render","className","onBlur","ColorPreview","styles","getColorPreviewStyles","theme","spacing","gridSize","shape","borderRadius","colors","border","medium"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/ColorPicker/ColorInput.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React from 'react';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { Input } from '../Input/Input';\n\nimport { ColorPickerProps } from './ColorPickerPopover';\n\ninterface ColorInputState {\n  previousColor: string;\n  value: string;\n}\n\ninterface ColorInputProps extends ColorPickerProps {\n  style?: React.CSSProperties;\n  className?: string;\n}\n\nclass ColorInput extends React.PureComponent<ColorInputProps, ColorInputState> {\n  constructor(props: ColorInputProps) {\n    super(props);\n    this.state = {\n      previousColor: props.color,\n      value: props.color,\n    };\n\n    this.updateColor = debounce(this.updateColor, 100);\n  }\n\n  static getDerivedStateFromProps(props: ColorPickerProps, state: ColorInputState) {\n    const newColor = tinycolor(props.color);\n    if (newColor.isValid() && props.color !== state.previousColor) {\n      return {\n        ...state,\n        previousColor: props.color,\n        value: newColor.toString(),\n      };\n    }\n\n    return state;\n  }\n  updateColor = (color: string) => {\n    this.props.onChange(color);\n  };\n\n  onChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const newColor = tinycolor(event.currentTarget.value);\n\n    this.setState({\n      value: event.currentTarget.value,\n    });\n\n    if (newColor.isValid()) {\n      this.updateColor(newColor.toString());\n    }\n  };\n\n  onBlur = () => {\n    const newColor = tinycolor(this.state.value);\n\n    if (!newColor.isValid()) {\n      this.setState({\n        value: this.props.color,\n      });\n    }\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <Input\n        className={this.props.className}\n        value={value}\n        onChange={this.onChange}\n        onBlur={this.onBlur}\n        addonBefore={<ColorPreview color={this.props.color} />}\n      />\n    );\n  }\n}\n\nexport default ColorInput;\n\ninterface ColorPreviewProps {\n  color: string;\n}\n\nconst ColorPreview = ({ color }: ColorPreviewProps) => {\n  const styles = useStyles2(getColorPreviewStyles);\n\n  return (\n    <div\n      className={cx(\n        styles,\n        css`\n          background-color: ${color};\n        `\n      )}\n    />\n  );\n};\n\nconst getColorPreviewStyles = (theme: GrafanaTheme2) => css`\n  height: 100%;\n  width: ${theme.spacing.gridSize * 4}px;\n  border-radius: ${theme.shape.borderRadius()} 0 0 ${theme.shape.borderRadius()};\n  border: 1px solid ${theme.colors.border.medium};\n`;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}