{"ast":null,"code":"import React from 'react';\nimport { Stack } from '@grafana/experimental';\nimport { NestedQuery } from './NestedQuery';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function NestedQueryList({\n  query,\n  datasource,\n  onChange,\n  onRunQuery\n}) {\n  var _query$binaryQueries;\n\n  const nestedQueries = (_query$binaryQueries = query.binaryQueries) !== null && _query$binaryQueries !== void 0 ? _query$binaryQueries : [];\n\n  const onNestedQueryUpdate = (index, update) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange(Object.assign({}, query, {\n      binaryQueries: updatedList\n    }));\n  };\n\n  const onRemove = index => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange(Object.assign({}, query, {\n      binaryQueries: updatedList\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(Stack, {\n    direction: \"column\",\n    gap: 1,\n    children: nestedQueries.map((nestedQuery, index) => /*#__PURE__*/_jsx(NestedQuery, {\n      nestedQuery: nestedQuery,\n      index: index,\n      onChange: onNestedQueryUpdate,\n      datasource: datasource,\n      onRemove: onRemove,\n      onRunQuery: onRunQuery\n    }, index.toString()))\n  });\n}","map":{"version":3,"names":["React","Stack","NestedQuery","NestedQueryList","query","datasource","onChange","onRunQuery","nestedQueries","binaryQueries","onNestedQueryUpdate","index","update","updatedList","splice","onRemove","slice","map","nestedQuery","toString"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/components/NestedQueryList.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromVisualQuery, PromVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (query: PromVisualQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport function NestedQueryList({ query, datasource, onChange, onRunQuery }: Props) {\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: PromVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n        />\n      ))}\n    </Stack>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,QAAsB,uBAAtB;AAKA,SAASC,WAAT,QAA4B,eAA5B;;AASA,OAAO,SAASC,eAAT,CAAyB;EAAEC,KAAF;EAASC,UAAT;EAAqBC,QAArB;EAA+BC;AAA/B,CAAzB,EAA6E;EAAA;;EAClF,MAAMC,aAAa,2BAAGJ,KAAK,CAACK,aAAT,uEAA0B,EAA7C;;EAEA,MAAMC,mBAAmB,GAAG,CAACC,KAAD,EAAgBC,MAAhB,KAAkD;IAC5E,MAAMC,WAAW,GAAG,CAAC,GAAGL,aAAJ,CAApB;IACAK,WAAW,CAACC,MAAZ,CAAmBH,KAAnB,EAA0B,CAA1B,EAA6BC,MAA7B;IACAN,QAAQ,mBAAMF,KAAN;MAAaK,aAAa,EAAEI;IAA5B,GAAR;EACD,CAJD;;EAMA,MAAME,QAAQ,GAAIJ,KAAD,IAAmB;IAClC,MAAME,WAAW,GAAG,CAAC,GAAGL,aAAa,CAACQ,KAAd,CAAoB,CAApB,EAAuBL,KAAvB,CAAJ,EAAmC,GAAGH,aAAa,CAACQ,KAAd,CAAoBL,KAAK,GAAG,CAA5B,CAAtC,CAApB;IACAL,QAAQ,mBAAMF,KAAN;MAAaK,aAAa,EAAEI;IAA5B,GAAR;EACD,CAHD;;EAKA,oBACE,KAAC,KAAD;IAAO,SAAS,EAAC,QAAjB;IAA0B,GAAG,EAAE,CAA/B;IAAA,UACGL,aAAa,CAACS,GAAd,CAAkB,CAACC,WAAD,EAAcP,KAAd,kBACjB,KAAC,WAAD;MAEE,WAAW,EAAEO,WAFf;MAGE,KAAK,EAAEP,KAHT;MAIE,QAAQ,EAAED,mBAJZ;MAKE,UAAU,EAAEL,UALd;MAME,QAAQ,EAAEU,QANZ;MAOE,UAAU,EAAER;IAPd,GACOI,KAAK,CAACQ,QAAN,EADP,CADD;EADH,EADF;AAeD"},"metadata":{},"sourceType":"module"}