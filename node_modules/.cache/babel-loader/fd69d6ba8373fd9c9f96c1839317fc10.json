{"ast":null,"code":"import deepEqual from 'fast-deep-equal';\nimport { defaults } from 'lodash';\nimport { useEffect, useMemo } from 'react';\nimport { AzureQueryType } from '../../types';\nimport migrateQuery from '../../utils/migrateQuery';\nconst DEFAULT_QUERY = {\n  queryType: AzureQueryType.AzureMonitor\n};\n\nconst prepareQuery = query => {\n  // Note: _.defaults does not apply default values deeply.\n  const withDefaults = defaults({}, query, DEFAULT_QUERY);\n  const migratedQuery = migrateQuery(withDefaults); // If we didn't make any changes to the object, then return the original object to keep the\n  // identity the same, and not trigger any other useEffects or anything.\n\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n};\n/**\n * Returns queries with some defaults + migrations, and calls onChange function to notify if it changes\n */\n\n\nconst usePreparedQuery = (query, onChangeQuery) => {\n  const preparedQuery = useMemo(() => prepareQuery(query), [query]);\n  useEffect(() => {\n    if (preparedQuery !== query) {\n      onChangeQuery(preparedQuery);\n    }\n  }, [preparedQuery, query, onChangeQuery]);\n  return preparedQuery;\n};\n\nexport default usePreparedQuery;","map":{"version":3,"names":["deepEqual","defaults","useEffect","useMemo","AzureQueryType","migrateQuery","DEFAULT_QUERY","queryType","AzureMonitor","prepareQuery","query","withDefaults","migratedQuery","usePreparedQuery","onChangeQuery","preparedQuery"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/QueryEditor/usePreparedQuery.ts"],"sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport { defaults } from 'lodash';\nimport { useEffect, useMemo } from 'react';\n\nimport { AzureMonitorQuery, AzureQueryType } from '../../types';\nimport migrateQuery from '../../utils/migrateQuery';\n\nconst DEFAULT_QUERY = {\n  queryType: AzureQueryType.AzureMonitor,\n};\n\nconst prepareQuery = (query: AzureMonitorQuery) => {\n  // Note: _.defaults does not apply default values deeply.\n  const withDefaults = defaults({}, query, DEFAULT_QUERY);\n  const migratedQuery = migrateQuery(withDefaults);\n\n  // If we didn't make any changes to the object, then return the original object to keep the\n  // identity the same, and not trigger any other useEffects or anything.\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n};\n\n/**\n * Returns queries with some defaults + migrations, and calls onChange function to notify if it changes\n */\nconst usePreparedQuery = (query: AzureMonitorQuery, onChangeQuery: (newQuery: AzureMonitorQuery) => void) => {\n  const preparedQuery = useMemo(() => prepareQuery(query), [query]);\n\n  useEffect(() => {\n    if (preparedQuery !== query) {\n      onChangeQuery(preparedQuery);\n    }\n  }, [preparedQuery, query, onChangeQuery]);\n\n  return preparedQuery;\n};\n\nexport default usePreparedQuery;\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AAEA,SAA4BC,cAA5B,QAAkD,aAAlD;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AAEA,MAAMC,aAAa,GAAG;EACpBC,SAAS,EAAEH,cAAc,CAACI;AADN,CAAtB;;AAIA,MAAMC,YAAY,GAAIC,KAAD,IAA8B;EACjD;EACA,MAAMC,YAAY,GAAGV,QAAQ,CAAC,EAAD,EAAKS,KAAL,EAAYJ,aAAZ,CAA7B;EACA,MAAMM,aAAa,GAAGP,YAAY,CAACM,YAAD,CAAlC,CAHiD,CAKjD;EACA;;EACA,OAAOX,SAAS,CAACY,aAAD,EAAgBF,KAAhB,CAAT,GAAkCA,KAAlC,GAA0CE,aAAjD;AACD,CARD;AAUA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,CAACH,KAAD,EAA2BI,aAA3B,KAAoF;EAC3G,MAAMC,aAAa,GAAGZ,OAAO,CAAC,MAAMM,YAAY,CAACC,KAAD,CAAnB,EAA4B,CAACA,KAAD,CAA5B,CAA7B;EAEAR,SAAS,CAAC,MAAM;IACd,IAAIa,aAAa,KAAKL,KAAtB,EAA6B;MAC3BI,aAAa,CAACC,aAAD,CAAb;IACD;EACF,CAJQ,EAIN,CAACA,aAAD,EAAgBL,KAAhB,EAAuBI,aAAvB,CAJM,CAAT;EAMA,OAAOC,aAAP;AACD,CAVD;;AAYA,eAAeF,gBAAf"},"metadata":{},"sourceType":"module"}