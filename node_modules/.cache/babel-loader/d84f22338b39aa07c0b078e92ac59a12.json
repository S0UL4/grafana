{"ast":null,"code":"import { importPluginModule } from './plugin_loader';\nexport async function preloadPlugins(pluginsToPreload = []) {\n  await Promise.all(pluginsToPreload.map(preloadPlugin));\n}\n\nasync function preloadPlugin(plugin) {\n  const {\n    path,\n    version\n  } = plugin;\n\n  try {\n    await importPluginModule(path, version);\n  } catch (error) {\n    console.error(`Failed to load plugin: ${path} (version: ${version})`, error);\n  }\n}","map":{"version":3,"names":["importPluginModule","preloadPlugins","pluginsToPreload","Promise","all","map","preloadPlugin","plugin","path","version","error","console"],"sources":["/home/soula/grafana/public/app/features/plugins/pluginPreloader.ts"],"sourcesContent":["import { PreloadPlugin } from '@grafana/data';\n\nimport { importPluginModule } from './plugin_loader';\n\nexport async function preloadPlugins(pluginsToPreload: PreloadPlugin[] = []): Promise<void> {\n  await Promise.all(pluginsToPreload.map(preloadPlugin));\n}\n\nasync function preloadPlugin(plugin: PreloadPlugin): Promise<void> {\n  const { path, version } = plugin;\n  try {\n    await importPluginModule(path, version);\n  } catch (error: unknown) {\n    console.error(`Failed to load plugin: ${path} (version: ${version})`, error);\n  }\n}\n"],"mappings":"AAEA,SAASA,kBAAT,QAAmC,iBAAnC;AAEA,OAAO,eAAeC,cAAf,CAA8BC,gBAAiC,GAAG,EAAlE,EAAqF;EAC1F,MAAMC,OAAO,CAACC,GAAR,CAAYF,gBAAgB,CAACG,GAAjB,CAAqBC,aAArB,CAAZ,CAAN;AACD;;AAED,eAAeA,aAAf,CAA6BC,MAA7B,EAAmE;EACjE,MAAM;IAAEC,IAAF;IAAQC;EAAR,IAAoBF,MAA1B;;EACA,IAAI;IACF,MAAMP,kBAAkB,CAACQ,IAAD,EAAOC,OAAP,CAAxB;EACD,CAFD,CAEE,OAAOC,KAAP,EAAuB;IACvBC,OAAO,CAACD,KAAR,CAAe,0BAAyBF,IAAK,cAAaC,OAAQ,GAAlE,EAAsEC,KAAtE;EACD;AACF"},"metadata":{},"sourceType":"module"}