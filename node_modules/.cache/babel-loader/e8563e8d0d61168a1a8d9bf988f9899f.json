{"ast":null,"code":"import { omit } from 'lodash';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\nimport { DisplayMode } from './types';\nexport function calculatePanelSize(mode, width, height, panel) {\n  if (mode === DisplayMode.Fill) {\n    return {\n      width,\n      height\n    };\n  }\n\n  const panelPadding = 8 * 6;\n  const sidebarWidth = 60;\n  const colWidth = (window.innerWidth - sidebarWidth - GRID_CELL_VMARGIN * 4) / GRID_COLUMN_COUNT;\n  const pWidth = colWidth * panel.gridPos.w;\n  const pHeight = GRID_CELL_HEIGHT * panel.gridPos.h + panelPadding;\n  const scale = Math.min(width / pWidth, height / pHeight);\n\n  if (pWidth <= width && pHeight <= height) {\n    return {\n      width: pWidth,\n      height: pHeight\n    };\n  }\n\n  return {\n    width: pWidth * scale,\n    height: pHeight * scale\n  };\n}\nexport function supportsDataQuery(plugin) {\n  return (plugin === null || plugin === void 0 ? void 0 : plugin.meta.skipDataQuery) === false;\n}\nexport const updateDefaultFieldConfigValue = (config, name, value, isCustom) => {\n  let defaults = Object.assign({}, config.defaults);\n  const remove = value == null || value === '';\n\n  if (isCustom) {\n    if (defaults.custom) {\n      if (remove) {\n        defaults.custom = omit(defaults.custom, name);\n      } else {\n        defaults.custom = setOptionImmutably(defaults.custom, name, value);\n      }\n    } else if (!remove) {\n      defaults.custom = setOptionImmutably(defaults.custom, name, value);\n    }\n  } else if (remove) {\n    defaults = omit(defaults, name);\n  } else {\n    defaults = setOptionImmutably(defaults, name, value);\n  }\n\n  return Object.assign({}, config, {\n    defaults\n  });\n};\nexport function setOptionImmutably(options, path, value) {\n  const splat = !Array.isArray(path) ? path.split('.') : path;\n  const key = splat.shift();\n\n  if (key.endsWith(']')) {\n    const idx = key.lastIndexOf('[');\n    const index = +key.substring(idx + 1, key.length - 1);\n    const propKey = key.substring(0, idx);\n    let current = options[propKey];\n    const arr = Array.isArray(current) ? [...current] : [];\n\n    if (splat.length) {\n      current = arr[index];\n\n      if (current == null || typeof current !== 'object') {\n        current = {};\n      }\n\n      value = setOptionImmutably(current, splat, value);\n    }\n\n    arr[index] = value;\n    return Object.assign({}, options, {\n      [propKey]: arr\n    });\n  }\n\n  if (!splat.length) {\n    return Object.assign({}, options, {\n      [key]: value\n    });\n  }\n\n  let current = options[key];\n\n  if (current == null || typeof current !== 'object') {\n    current = {};\n  }\n\n  return Object.assign({}, options, {\n    [key]: setOptionImmutably(current, splat, value)\n  });\n}","map":{"version":3,"names":["omit","GRID_CELL_HEIGHT","GRID_CELL_VMARGIN","GRID_COLUMN_COUNT","DisplayMode","calculatePanelSize","mode","width","height","panel","Fill","panelPadding","sidebarWidth","colWidth","window","innerWidth","pWidth","gridPos","w","pHeight","h","scale","Math","min","supportsDataQuery","plugin","meta","skipDataQuery","updateDefaultFieldConfigValue","config","name","value","isCustom","defaults","remove","custom","setOptionImmutably","options","path","splat","Array","isArray","split","key","shift","endsWith","idx","lastIndexOf","index","substring","length","propKey","current","arr"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/utils.ts"],"sourcesContent":["import { omit } from 'lodash';\n\nimport { FieldConfigSource, PanelPlugin } from '@grafana/data';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\n\nimport { PanelModel } from '../../state/PanelModel';\n\nimport { DisplayMode } from './types';\n\nexport function calculatePanelSize(mode: DisplayMode, width: number, height: number, panel: PanelModel) {\n  if (mode === DisplayMode.Fill) {\n    return { width, height };\n  }\n  const panelPadding = 8 * 6;\n  const sidebarWidth = 60;\n\n  const colWidth = (window.innerWidth - sidebarWidth - GRID_CELL_VMARGIN * 4) / GRID_COLUMN_COUNT;\n  const pWidth = colWidth * panel.gridPos.w;\n  const pHeight = GRID_CELL_HEIGHT * panel.gridPos.h + panelPadding;\n  const scale = Math.min(width / pWidth, height / pHeight);\n\n  if (pWidth <= width && pHeight <= height) {\n    return {\n      width: pWidth,\n      height: pHeight,\n    };\n  }\n\n  return {\n    width: pWidth * scale,\n    height: pHeight * scale,\n  };\n}\n\nexport function supportsDataQuery(plugin: PanelPlugin | undefined | null): boolean {\n  return plugin?.meta.skipDataQuery === false;\n}\n\nexport const updateDefaultFieldConfigValue = (\n  config: FieldConfigSource,\n  name: string,\n  value: any,\n  isCustom?: boolean\n) => {\n  let defaults = { ...config.defaults };\n  const remove = value == null || value === '';\n\n  if (isCustom) {\n    if (defaults.custom) {\n      if (remove) {\n        defaults.custom = omit(defaults.custom, name);\n      } else {\n        defaults.custom = setOptionImmutably(defaults.custom, name, value);\n      }\n    } else if (!remove) {\n      defaults.custom = setOptionImmutably(defaults.custom, name, value);\n    }\n  } else if (remove) {\n    defaults = omit(defaults, name);\n  } else {\n    defaults = setOptionImmutably(defaults, name, value);\n  }\n\n  return {\n    ...config,\n    defaults,\n  };\n};\n\nexport function setOptionImmutably<T extends object>(options: T, path: string | string[], value: any): T {\n  const splat = !Array.isArray(path) ? path.split('.') : path;\n\n  const key = splat.shift()!;\n  if (key.endsWith(']')) {\n    const idx = key.lastIndexOf('[');\n    const index = +key.substring(idx + 1, key.length - 1);\n    const propKey = key.substring(0, idx);\n    let current = (options as Record<string, any>)[propKey];\n    const arr = Array.isArray(current) ? [...current] : [];\n    if (splat.length) {\n      current = arr[index];\n      if (current == null || typeof current !== 'object') {\n        current = {};\n      }\n      value = setOptionImmutably(current, splat, value);\n    }\n    arr[index] = value;\n    return { ...options, [propKey]: arr };\n  }\n\n  if (!splat.length) {\n    return { ...options, [key]: value };\n  }\n\n  let current = (options as Record<string, any>)[key];\n\n  if (current == null || typeof current !== 'object') {\n    current = {};\n  }\n\n  return { ...options, [key]: setOptionImmutably(current, splat, value) };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}