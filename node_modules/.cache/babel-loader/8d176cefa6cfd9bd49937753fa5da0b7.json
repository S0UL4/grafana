{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport tinycolor from 'tinycolor2';\nimport coreModule from 'app/angular/core_module';\nimport config from 'app/core/config';\nexport class ThresholdFormCtrl {\n  /** @ngInject */\n  constructor($scope) {\n    _defineProperty(this, \"panelCtrl\", void 0);\n\n    _defineProperty(this, \"panel\", void 0);\n\n    _defineProperty(this, \"disabled\", false);\n\n    this.$scope = $scope;\n  }\n\n  $onInit() {\n    this.panel = this.panelCtrl.panel;\n\n    if (this.panel.alert && !config.unifiedAlertingEnabled) {\n      this.disabled = true;\n    }\n\n    const unbindDestroy = this.$scope.$on('$destroy', () => {\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n    this.panelCtrl.editingThresholds = true;\n  }\n\n  addThreshold() {\n    this.panel.thresholds.push({\n      value: undefined,\n      colorMode: 'critical',\n      op: 'gt',\n      fill: true,\n      line: true,\n      yaxis: 'left'\n    });\n    this.panelCtrl.render();\n  }\n\n  removeThreshold(index) {\n    this.panel.thresholds.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index) {\n    return newColor => {\n      this.panel.thresholds[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index) {\n    return newColor => {\n      this.panel.thresholds[index].lineColor = newColor;\n      this.render();\n    };\n  }\n\n  onThresholdTypeChange(index) {\n    // Because of the ng-model binding, threshold's color mode is already set here\n    if (this.panel.thresholds[index].colorMode === 'custom') {\n      this.panel.thresholds[index].fillColor = tinycolor(config.theme.palette.blue85).setAlpha(0.2).toRgbString();\n      this.panel.thresholds[index].lineColor = tinycolor(config.theme.palette.blue77).setAlpha(0.6).toRgbString();\n    }\n\n    this.panelCtrl.render();\n  }\n\n}\nThresholdFormCtrl.$inject = [\"$scope\"];\ncoreModule.directive('graphThresholdForm', () => {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/plugins/panel/graph/thresholds_form.html',\n    controller: ThresholdFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '='\n    }\n  };\n});","map":{"version":3,"names":["tinycolor","coreModule","config","ThresholdFormCtrl","constructor","$scope","$onInit","panel","panelCtrl","alert","unifiedAlertingEnabled","disabled","unbindDestroy","$on","editingThresholds","render","addThreshold","thresholds","push","value","undefined","colorMode","op","fill","line","yaxis","removeThreshold","index","splice","onFillColorChange","newColor","fillColor","onLineColorChange","lineColor","onThresholdTypeChange","theme","palette","blue85","setAlpha","toRgbString","blue77","directive","restrict","templateUrl","controller","bindToController","controllerAs","scope"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/thresholds_form.ts"],"sourcesContent":["import tinycolor from 'tinycolor2';\n\nimport coreModule from 'app/angular/core_module';\nimport config from 'app/core/config';\nexport class ThresholdFormCtrl {\n  panelCtrl: any;\n  panel: any;\n  disabled = false;\n\n  /** @ngInject */\n  constructor(private $scope: any) {}\n\n  $onInit() {\n    this.panel = this.panelCtrl.panel;\n\n    if (this.panel.alert && !config.unifiedAlertingEnabled) {\n      this.disabled = true;\n    }\n\n    const unbindDestroy = this.$scope.$on('$destroy', () => {\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n      unbindDestroy();\n    });\n\n    this.panelCtrl.editingThresholds = true;\n  }\n\n  addThreshold() {\n    this.panel.thresholds.push({\n      value: undefined,\n      colorMode: 'critical',\n      op: 'gt',\n      fill: true,\n      line: true,\n      yaxis: 'left',\n    });\n    this.panelCtrl.render();\n  }\n\n  removeThreshold(index: number) {\n    this.panel.thresholds.splice(index, 1);\n    this.panelCtrl.render();\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  onFillColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.thresholds[index].fillColor = newColor;\n      this.render();\n    };\n  }\n\n  onLineColorChange(index: number) {\n    return (newColor: string) => {\n      this.panel.thresholds[index].lineColor = newColor;\n      this.render();\n    };\n  }\n\n  onThresholdTypeChange(index: number) {\n    // Because of the ng-model binding, threshold's color mode is already set here\n    if (this.panel.thresholds[index].colorMode === 'custom') {\n      this.panel.thresholds[index].fillColor = tinycolor(config.theme.palette.blue85).setAlpha(0.2).toRgbString();\n      this.panel.thresholds[index].lineColor = tinycolor(config.theme.palette.blue77).setAlpha(0.6).toRgbString();\n    }\n    this.panelCtrl.render();\n  }\n}\n\ncoreModule.directive('graphThresholdForm', () => {\n  return {\n    restrict: 'E',\n    templateUrl: 'public/app/plugins/panel/graph/thresholds_form.html',\n    controller: ThresholdFormCtrl,\n    bindToController: true,\n    controllerAs: 'ctrl',\n    scope: {\n      panelCtrl: '=',\n    },\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}