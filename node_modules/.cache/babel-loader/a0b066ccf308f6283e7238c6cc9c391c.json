{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { LoadingState } from '@grafana/data';\nimport { ClickOutsideWrapper } from '@grafana/ui';\nimport { isMulti } from '../../guard';\nimport { getVariableQueryRunner } from '../../query/VariableQueryRunner';\nimport { formatVariableLabel } from '../../shared/formatVariable';\nimport { toKeyedAction } from '../../state/keyedVariablesReducer';\nimport { getVariablesState } from '../../state/selectors';\nimport { toKeyedVariableIdentifier } from '../../utils';\nimport { VariableInput } from '../shared/VariableInput';\nimport { VariableLink } from '../shared/VariableLink';\nimport { VariableOptions } from '../shared/VariableOptions';\nimport { commitChangesToVariable, filterOrSearchOptions, navigateOptions, openOptions } from './actions';\nimport { initialOptionPickerState, toggleAllOptions, toggleOption } from './reducer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const optionPickerFactory = () => {\n  const mapDispatchToProps = dispatch => {\n    return Object.assign({}, bindActionCreators({\n      openOptions,\n      commitChangesToVariable,\n      navigateOptions\n    }, dispatch), {\n      filterOrSearchOptions: (identifier, filter = '') => {\n        dispatch(filterOrSearchOptions(identifier, filter));\n      },\n      toggleAllOptions: identifier => dispatch(toKeyedAction(identifier.rootStateKey, toggleAllOptions())),\n      toggleOption: (identifier, option, clearOthers, forceSelect) => dispatch(toKeyedAction(identifier.rootStateKey, toggleOption({\n        option,\n        clearOthers,\n        forceSelect\n      })))\n    });\n  };\n\n  const mapStateToProps = (state, ownProps) => {\n    const {\n      rootStateKey\n    } = ownProps.variable;\n\n    if (!rootStateKey) {\n      console.error('OptionPickerFactory: variable has no rootStateKey');\n      return {\n        picker: initialOptionPickerState\n      };\n    }\n\n    return {\n      picker: getVariablesState(rootStateKey, state).optionsPicker\n    };\n  };\n\n  const connector = connect(mapStateToProps, mapDispatchToProps);\n\n  class OptionsPickerUnconnected extends PureComponent {\n    constructor(...args) {\n      super(...args);\n\n      _defineProperty(this, \"onShowOptions\", () => this.props.openOptions(toKeyedVariableIdentifier(this.props.variable), this.props.onVariableChange));\n\n      _defineProperty(this, \"onHideOptions\", () => {\n        if (!this.props.variable.rootStateKey) {\n          console.error('Variable has no rootStateKey');\n          return;\n        }\n\n        this.props.commitChangesToVariable(this.props.variable.rootStateKey, this.props.onVariableChange);\n      });\n\n      _defineProperty(this, \"onToggleOption\", (option, clearOthers) => {\n        const toggleFunc = isMulti(this.props.variable) && this.props.variable.multi ? this.onToggleMultiValueVariable : this.onToggleSingleValueVariable;\n        toggleFunc(option, clearOthers);\n      });\n\n      _defineProperty(this, \"onToggleSingleValueVariable\", (option, clearOthers) => {\n        this.props.toggleOption(toKeyedVariableIdentifier(this.props.variable), option, clearOthers, false);\n        this.onHideOptions();\n      });\n\n      _defineProperty(this, \"onToggleMultiValueVariable\", (option, clearOthers) => {\n        this.props.toggleOption(toKeyedVariableIdentifier(this.props.variable), option, clearOthers, false);\n      });\n\n      _defineProperty(this, \"onToggleAllOptions\", () => {\n        this.props.toggleAllOptions(toKeyedVariableIdentifier(this.props.variable));\n      });\n\n      _defineProperty(this, \"onFilterOrSearchOptions\", filter => {\n        this.props.filterOrSearchOptions(toKeyedVariableIdentifier(this.props.variable), filter);\n      });\n\n      _defineProperty(this, \"onNavigate\", (key, clearOthers) => {\n        if (!this.props.variable.rootStateKey) {\n          console.error('Variable has no rootStateKey');\n          return;\n        }\n\n        this.props.navigateOptions(this.props.variable.rootStateKey, key, clearOthers);\n      });\n\n      _defineProperty(this, \"onCancel\", () => {\n        getVariableQueryRunner().cancelRequest(toKeyedVariableIdentifier(this.props.variable));\n      });\n    }\n\n    render() {\n      const {\n        variable,\n        picker\n      } = this.props;\n      const showOptions = picker.id === variable.id;\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: \"variable-link-wrapper\",\n        children: showOptions ? this.renderOptions(picker) : this.renderLink(variable)\n      });\n    }\n\n    renderLink(variable) {\n      const linkText = formatVariableLabel(variable);\n      const loading = variable.state === LoadingState.Loading;\n      return /*#__PURE__*/_jsx(VariableLink, {\n        id: `var-${variable.id}`,\n        text: linkText,\n        onClick: this.onShowOptions,\n        loading: loading,\n        onCancel: this.onCancel\n      });\n    }\n\n    renderOptions(picker) {\n      const {\n        id\n      } = this.props.variable;\n      return /*#__PURE__*/_jsxs(ClickOutsideWrapper, {\n        onClick: this.onHideOptions,\n        children: [/*#__PURE__*/_jsx(VariableInput, {\n          id: `var-${id}`,\n          value: picker.queryValue,\n          onChange: this.onFilterOrSearchOptions,\n          onNavigate: this.onNavigate,\n          \"aria-expanded\": true,\n          \"aria-controls\": `options-${id}`\n        }), /*#__PURE__*/_jsx(VariableOptions, {\n          values: picker.options,\n          onToggle: this.onToggleOption,\n          onToggleAll: this.onToggleAllOptions,\n          highlightIndex: picker.highlightIndex,\n          multi: picker.multi,\n          selectedValues: picker.selectedValues,\n          id: `options-${id}`\n        })]\n      });\n    }\n\n  }\n\n  const OptionsPicker = connector(OptionsPickerUnconnected);\n  OptionsPicker.displayName = 'OptionsPicker';\n  return OptionsPicker;\n};","map":{"version":3,"names":["React","PureComponent","connect","bindActionCreators","LoadingState","ClickOutsideWrapper","isMulti","getVariableQueryRunner","formatVariableLabel","toKeyedAction","getVariablesState","toKeyedVariableIdentifier","VariableInput","VariableLink","VariableOptions","commitChangesToVariable","filterOrSearchOptions","navigateOptions","openOptions","initialOptionPickerState","toggleAllOptions","toggleOption","optionPickerFactory","mapDispatchToProps","dispatch","identifier","filter","rootStateKey","option","clearOthers","forceSelect","mapStateToProps","state","ownProps","variable","console","error","picker","optionsPicker","connector","OptionsPickerUnconnected","props","onVariableChange","toggleFunc","multi","onToggleMultiValueVariable","onToggleSingleValueVariable","onHideOptions","key","cancelRequest","render","showOptions","id","renderOptions","renderLink","linkText","loading","Loading","onShowOptions","onCancel","queryValue","onFilterOrSearchOptions","onNavigate","options","onToggleOption","onToggleAllOptions","highlightIndex","selectedValues","OptionsPicker","displayName"],"sources":["/home/soula/grafana/public/app/features/variables/pickers/OptionsPicker/OptionsPicker.tsx"],"sourcesContent":["import React, { ComponentType, PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { LoadingState } from '@grafana/data';\nimport { ClickOutsideWrapper } from '@grafana/ui';\nimport { StoreState, ThunkDispatch } from 'app/types';\n\nimport { isMulti } from '../../guard';\nimport { getVariableQueryRunner } from '../../query/VariableQueryRunner';\nimport { formatVariableLabel } from '../../shared/formatVariable';\nimport { toKeyedAction } from '../../state/keyedVariablesReducer';\nimport { getVariablesState } from '../../state/selectors';\nimport { KeyedVariableIdentifier } from '../../state/types';\nimport { VariableOption, VariableWithMultiSupport, VariableWithOptions } from '../../types';\nimport { toKeyedVariableIdentifier } from '../../utils';\nimport { VariableInput } from '../shared/VariableInput';\nimport { VariableLink } from '../shared/VariableLink';\nimport { VariableOptions } from '../shared/VariableOptions';\nimport { NavigationKey, VariablePickerProps } from '../types';\n\nimport { commitChangesToVariable, filterOrSearchOptions, navigateOptions, openOptions } from './actions';\nimport { initialOptionPickerState, OptionsPickerState, toggleAllOptions, toggleOption } from './reducer';\n\nexport const optionPickerFactory = <Model extends VariableWithOptions | VariableWithMultiSupport>(): ComponentType<\n  VariablePickerProps<Model>\n> => {\n  const mapDispatchToProps = (dispatch: ThunkDispatch) => {\n    return {\n      ...bindActionCreators({ openOptions, commitChangesToVariable, navigateOptions }, dispatch),\n      filterOrSearchOptions: (identifier: KeyedVariableIdentifier, filter = '') => {\n        dispatch(filterOrSearchOptions(identifier, filter));\n      },\n      toggleAllOptions: (identifier: KeyedVariableIdentifier) =>\n        dispatch(toKeyedAction(identifier.rootStateKey, toggleAllOptions())),\n      toggleOption: (\n        identifier: KeyedVariableIdentifier,\n        option: VariableOption,\n        clearOthers: boolean,\n        forceSelect: boolean\n      ) => dispatch(toKeyedAction(identifier.rootStateKey, toggleOption({ option, clearOthers, forceSelect }))),\n    };\n  };\n\n  const mapStateToProps = (state: StoreState, ownProps: OwnProps) => {\n    const { rootStateKey } = ownProps.variable;\n    if (!rootStateKey) {\n      console.error('OptionPickerFactory: variable has no rootStateKey');\n      return {\n        picker: initialOptionPickerState,\n      };\n    }\n\n    return {\n      picker: getVariablesState(rootStateKey, state).optionsPicker,\n    };\n  };\n\n  const connector = connect(mapStateToProps, mapDispatchToProps);\n\n  interface OwnProps extends VariablePickerProps<Model> {}\n\n  type Props = OwnProps & ConnectedProps<typeof connector>;\n\n  class OptionsPickerUnconnected extends PureComponent<Props> {\n    onShowOptions = () =>\n      this.props.openOptions(toKeyedVariableIdentifier(this.props.variable), this.props.onVariableChange);\n    onHideOptions = () => {\n      if (!this.props.variable.rootStateKey) {\n        console.error('Variable has no rootStateKey');\n        return;\n      }\n\n      this.props.commitChangesToVariable(this.props.variable.rootStateKey, this.props.onVariableChange);\n    };\n\n    onToggleOption = (option: VariableOption, clearOthers: boolean) => {\n      const toggleFunc =\n        isMulti(this.props.variable) && this.props.variable.multi\n          ? this.onToggleMultiValueVariable\n          : this.onToggleSingleValueVariable;\n      toggleFunc(option, clearOthers);\n    };\n\n    onToggleSingleValueVariable = (option: VariableOption, clearOthers: boolean) => {\n      this.props.toggleOption(toKeyedVariableIdentifier(this.props.variable), option, clearOthers, false);\n      this.onHideOptions();\n    };\n\n    onToggleMultiValueVariable = (option: VariableOption, clearOthers: boolean) => {\n      this.props.toggleOption(toKeyedVariableIdentifier(this.props.variable), option, clearOthers, false);\n    };\n\n    onToggleAllOptions = () => {\n      this.props.toggleAllOptions(toKeyedVariableIdentifier(this.props.variable));\n    };\n\n    onFilterOrSearchOptions = (filter: string) => {\n      this.props.filterOrSearchOptions(toKeyedVariableIdentifier(this.props.variable), filter);\n    };\n\n    onNavigate = (key: NavigationKey, clearOthers: boolean) => {\n      if (!this.props.variable.rootStateKey) {\n        console.error('Variable has no rootStateKey');\n        return;\n      }\n\n      this.props.navigateOptions(this.props.variable.rootStateKey, key, clearOthers);\n    };\n\n    render() {\n      const { variable, picker } = this.props;\n      const showOptions = picker.id === variable.id;\n\n      return (\n        <div className=\"variable-link-wrapper\">\n          {showOptions ? this.renderOptions(picker) : this.renderLink(variable)}\n        </div>\n      );\n    }\n\n    renderLink(variable: VariableWithOptions) {\n      const linkText = formatVariableLabel(variable);\n      const loading = variable.state === LoadingState.Loading;\n\n      return (\n        <VariableLink\n          id={`var-${variable.id}`}\n          text={linkText}\n          onClick={this.onShowOptions}\n          loading={loading}\n          onCancel={this.onCancel}\n        />\n      );\n    }\n\n    onCancel = () => {\n      getVariableQueryRunner().cancelRequest(toKeyedVariableIdentifier(this.props.variable));\n    };\n\n    renderOptions(picker: OptionsPickerState) {\n      const { id } = this.props.variable;\n      return (\n        <ClickOutsideWrapper onClick={this.onHideOptions}>\n          <VariableInput\n            id={`var-${id}`}\n            value={picker.queryValue}\n            onChange={this.onFilterOrSearchOptions}\n            onNavigate={this.onNavigate}\n            aria-expanded={true}\n            aria-controls={`options-${id}`}\n          />\n          <VariableOptions\n            values={picker.options}\n            onToggle={this.onToggleOption}\n            onToggleAll={this.onToggleAllOptions}\n            highlightIndex={picker.highlightIndex}\n            multi={picker.multi}\n            selectedValues={picker.selectedValues}\n            id={`options-${id}`}\n          />\n        </ClickOutsideWrapper>\n      );\n    }\n  }\n\n  const OptionsPicker = connector(OptionsPickerUnconnected);\n  OptionsPicker.displayName = 'OptionsPicker';\n\n  return OptionsPicker;\n};\n"],"mappings":";;AAAA,OAAOA,KAAP,IAA+BC,aAA/B,QAAoD,OAApD;AACA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AAEA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,mBAAT,QAAoC,aAApC;AAGA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,sBAAT,QAAuC,iCAAvC;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AAGA,SAASC,yBAAT,QAA0C,aAA1C;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AAGA,SAASC,uBAAT,EAAkCC,qBAAlC,EAAyDC,eAAzD,EAA0EC,WAA1E,QAA6F,WAA7F;AACA,SAASC,wBAAT,EAAuDC,gBAAvD,EAAyEC,YAAzE,QAA6F,WAA7F;;;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAE9B;EACH,MAAMC,kBAAkB,GAAIC,QAAD,IAA6B;IACtD,yBACKrB,kBAAkB,CAAC;MAAEe,WAAF;MAAeH,uBAAf;MAAwCE;IAAxC,CAAD,EAA4DO,QAA5D,CADvB;MAEER,qBAAqB,EAAE,CAACS,UAAD,EAAsCC,MAAM,GAAG,EAA/C,KAAsD;QAC3EF,QAAQ,CAACR,qBAAqB,CAACS,UAAD,EAAaC,MAAb,CAAtB,CAAR;MACD,CAJH;MAKEN,gBAAgB,EAAGK,UAAD,IAChBD,QAAQ,CAACf,aAAa,CAACgB,UAAU,CAACE,YAAZ,EAA0BP,gBAAgB,EAA1C,CAAd,CANZ;MAOEC,YAAY,EAAE,CACZI,UADY,EAEZG,MAFY,EAGZC,WAHY,EAIZC,WAJY,KAKTN,QAAQ,CAACf,aAAa,CAACgB,UAAU,CAACE,YAAZ,EAA0BN,YAAY,CAAC;QAAEO,MAAF;QAAUC,WAAV;QAAuBC;MAAvB,CAAD,CAAtC,CAAd;IAZf;EAcD,CAfD;;EAiBA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAoBC,QAApB,KAA2C;IACjE,MAAM;MAAEN;IAAF,IAAmBM,QAAQ,CAACC,QAAlC;;IACA,IAAI,CAACP,YAAL,EAAmB;MACjBQ,OAAO,CAACC,KAAR,CAAc,mDAAd;MACA,OAAO;QACLC,MAAM,EAAElB;MADH,CAAP;IAGD;;IAED,OAAO;MACLkB,MAAM,EAAE3B,iBAAiB,CAACiB,YAAD,EAAeK,KAAf,CAAjB,CAAuCM;IAD1C,CAAP;EAGD,CAZD;;EAcA,MAAMC,SAAS,GAAGrC,OAAO,CAAC6B,eAAD,EAAkBR,kBAAlB,CAAzB;;EAMA,MAAMiB,wBAAN,SAAuCvC,aAAvC,CAA4D;IAAA;MAAA;;MAAA,uCAC1C,MACd,KAAKwC,KAAL,CAAWvB,WAAX,CAAuBP,yBAAyB,CAAC,KAAK8B,KAAL,CAAWP,QAAZ,CAAhD,EAAuE,KAAKO,KAAL,CAAWC,gBAAlF,CAFwD;;MAAA,uCAG1C,MAAM;QACpB,IAAI,CAAC,KAAKD,KAAL,CAAWP,QAAX,CAAoBP,YAAzB,EAAuC;UACrCQ,OAAO,CAACC,KAAR,CAAc,8BAAd;UACA;QACD;;QAED,KAAKK,KAAL,CAAW1B,uBAAX,CAAmC,KAAK0B,KAAL,CAAWP,QAAX,CAAoBP,YAAvD,EAAqE,KAAKc,KAAL,CAAWC,gBAAhF;MACD,CAVyD;;MAAA,wCAYzC,CAACd,MAAD,EAAyBC,WAAzB,KAAkD;QACjE,MAAMc,UAAU,GACdrC,OAAO,CAAC,KAAKmC,KAAL,CAAWP,QAAZ,CAAP,IAAgC,KAAKO,KAAL,CAAWP,QAAX,CAAoBU,KAApD,GACI,KAAKC,0BADT,GAEI,KAAKC,2BAHX;QAIAH,UAAU,CAACf,MAAD,EAASC,WAAT,CAAV;MACD,CAlByD;;MAAA,qDAoB5B,CAACD,MAAD,EAAyBC,WAAzB,KAAkD;QAC9E,KAAKY,KAAL,CAAWpB,YAAX,CAAwBV,yBAAyB,CAAC,KAAK8B,KAAL,CAAWP,QAAZ,CAAjD,EAAwEN,MAAxE,EAAgFC,WAAhF,EAA6F,KAA7F;QACA,KAAKkB,aAAL;MACD,CAvByD;;MAAA,oDAyB7B,CAACnB,MAAD,EAAyBC,WAAzB,KAAkD;QAC7E,KAAKY,KAAL,CAAWpB,YAAX,CAAwBV,yBAAyB,CAAC,KAAK8B,KAAL,CAAWP,QAAZ,CAAjD,EAAwEN,MAAxE,EAAgFC,WAAhF,EAA6F,KAA7F;MACD,CA3ByD;;MAAA,4CA6BrC,MAAM;QACzB,KAAKY,KAAL,CAAWrB,gBAAX,CAA4BT,yBAAyB,CAAC,KAAK8B,KAAL,CAAWP,QAAZ,CAArD;MACD,CA/ByD;;MAAA,iDAiC/BR,MAAD,IAAoB;QAC5C,KAAKe,KAAL,CAAWzB,qBAAX,CAAiCL,yBAAyB,CAAC,KAAK8B,KAAL,CAAWP,QAAZ,CAA1D,EAAiFR,MAAjF;MACD,CAnCyD;;MAAA,oCAqC7C,CAACsB,GAAD,EAAqBnB,WAArB,KAA8C;QACzD,IAAI,CAAC,KAAKY,KAAL,CAAWP,QAAX,CAAoBP,YAAzB,EAAuC;UACrCQ,OAAO,CAACC,KAAR,CAAc,8BAAd;UACA;QACD;;QAED,KAAKK,KAAL,CAAWxB,eAAX,CAA2B,KAAKwB,KAAL,CAAWP,QAAX,CAAoBP,YAA/C,EAA6DqB,GAA7D,EAAkEnB,WAAlE;MACD,CA5CyD;;MAAA,kCAwE/C,MAAM;QACftB,sBAAsB,GAAG0C,aAAzB,CAAuCtC,yBAAyB,CAAC,KAAK8B,KAAL,CAAWP,QAAZ,CAAhE;MACD,CA1EyD;IAAA;;IA8C1DgB,MAAM,GAAG;MACP,MAAM;QAAEhB,QAAF;QAAYG;MAAZ,IAAuB,KAAKI,KAAlC;MACA,MAAMU,WAAW,GAAGd,MAAM,CAACe,EAAP,KAAclB,QAAQ,CAACkB,EAA3C;MAEA,oBACE;QAAK,SAAS,EAAC,uBAAf;QAAA,UACGD,WAAW,GAAG,KAAKE,aAAL,CAAmBhB,MAAnB,CAAH,GAAgC,KAAKiB,UAAL,CAAgBpB,QAAhB;MAD9C,EADF;IAKD;;IAEDoB,UAAU,CAACpB,QAAD,EAAgC;MACxC,MAAMqB,QAAQ,GAAG/C,mBAAmB,CAAC0B,QAAD,CAApC;MACA,MAAMsB,OAAO,GAAGtB,QAAQ,CAACF,KAAT,KAAmB5B,YAAY,CAACqD,OAAhD;MAEA,oBACE,KAAC,YAAD;QACE,EAAE,EAAG,OAAMvB,QAAQ,CAACkB,EAAG,EADzB;QAEE,IAAI,EAAEG,QAFR;QAGE,OAAO,EAAE,KAAKG,aAHhB;QAIE,OAAO,EAAEF,OAJX;QAKE,QAAQ,EAAE,KAAKG;MALjB,EADF;IASD;;IAMDN,aAAa,CAAChB,MAAD,EAA6B;MACxC,MAAM;QAAEe;MAAF,IAAS,KAAKX,KAAL,CAAWP,QAA1B;MACA,oBACE,MAAC,mBAAD;QAAqB,OAAO,EAAE,KAAKa,aAAnC;QAAA,wBACE,KAAC,aAAD;UACE,EAAE,EAAG,OAAMK,EAAG,EADhB;UAEE,KAAK,EAAEf,MAAM,CAACuB,UAFhB;UAGE,QAAQ,EAAE,KAAKC,uBAHjB;UAIE,UAAU,EAAE,KAAKC,UAJnB;UAKE,iBAAe,IALjB;UAME,iBAAgB,WAAUV,EAAG;QAN/B,EADF,eASE,KAAC,eAAD;UACE,MAAM,EAAEf,MAAM,CAAC0B,OADjB;UAEE,QAAQ,EAAE,KAAKC,cAFjB;UAGE,WAAW,EAAE,KAAKC,kBAHpB;UAIE,cAAc,EAAE5B,MAAM,CAAC6B,cAJzB;UAKE,KAAK,EAAE7B,MAAM,CAACO,KALhB;UAME,cAAc,EAAEP,MAAM,CAAC8B,cANzB;UAOE,EAAE,EAAG,WAAUf,EAAG;QAPpB,EATF;MAAA,EADF;IAqBD;;EAnGyD;;EAsG5D,MAAMgB,aAAa,GAAG7B,SAAS,CAACC,wBAAD,CAA/B;EACA4B,aAAa,CAACC,WAAd,GAA4B,eAA5B;EAEA,OAAOD,aAAP;AACD,CAlJM"},"metadata":{},"sourceType":"module"}