{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { interpolateRgbBasis } from 'd3-interpolate';\nimport { reduceField } from '../transformations/fieldReducer';\nimport { FALLBACK_COLOR, FieldColorModeId, Threshold } from '../types';\nimport { Registry } from '../utils/Registry';\nimport { getScaleCalculator } from './scale';\nimport { fallBackTreshold } from './thresholds';\n/** @beta */\n\n/** @internal */\nexport const fieldColorModeRegistry = new Registry(() => {\n  return [{\n    id: FieldColorModeId.Fixed,\n    name: 'Single color',\n    description: 'Set a specific color',\n    getCalculator: getFixedColor\n  }, {\n    id: FieldColorModeId.Thresholds,\n    name: 'From thresholds',\n    isByValue: true,\n    description: 'Derive colors from thresholds',\n    getCalculator: (_field, theme) => {\n      return (_value, _percent, threshold) => {\n        const thresholdSafe = threshold !== null && threshold !== void 0 ? threshold : fallBackTreshold;\n        return theme.visualization.getColorByName(thresholdSafe.color);\n      };\n    }\n  }, new FieldColorSchemeMode({\n    id: FieldColorModeId.PaletteClassic,\n    name: 'Classic palette',\n    isContinuous: false,\n    isByValue: false,\n    getColors: theme => {\n      return theme.visualization.palette;\n    }\n  }), new FieldColorSchemeMode({\n    id: 'continuous-GrYlRd',\n    name: 'Green-Yellow-Red',\n    isContinuous: true,\n    isByValue: true,\n    getColors: theme => ['green', 'yellow', 'red']\n  }), new FieldColorSchemeMode({\n    id: 'continuous-RdYlGr',\n    name: 'Red-Yellow-Green',\n    isContinuous: true,\n    isByValue: true,\n    getColors: theme => ['red', 'yellow', 'green']\n  }), new FieldColorSchemeMode({\n    id: 'continuous-BlYlRd',\n    name: 'Blue-Yellow-Red',\n    isContinuous: true,\n    isByValue: true,\n    getColors: theme => ['dark-blue', 'super-light-yellow', 'dark-red']\n  }), new FieldColorSchemeMode({\n    id: 'continuous-YlRd',\n    name: 'Yellow-Red',\n    isContinuous: true,\n    isByValue: true,\n    getColors: theme => ['super-light-yellow', 'dark-red']\n  }), new FieldColorSchemeMode({\n    id: 'continuous-BlPu',\n    name: 'Blue-Purple',\n    isContinuous: true,\n    isByValue: true,\n    getColors: theme => ['blue', 'purple']\n  }), new FieldColorSchemeMode({\n    id: 'continuous-YlBl',\n    name: 'Yellow-Blue',\n    isContinuous: true,\n    isByValue: true,\n    getColors: theme => ['super-light-yellow', 'dark-blue']\n  }), new FieldColorSchemeMode({\n    id: 'continuous-blues',\n    name: 'Blues',\n    isContinuous: true,\n    isByValue: true,\n    getColors: theme => ['panel-bg', 'dark-blue']\n  }), new FieldColorSchemeMode({\n    id: 'continuous-reds',\n    name: 'Reds',\n    isContinuous: true,\n    isByValue: true,\n    getColors: theme => ['panel-bg', 'dark-red']\n  }), new FieldColorSchemeMode({\n    id: 'continuous-greens',\n    name: 'Greens',\n    isContinuous: true,\n    isByValue: true,\n    getColors: theme => ['panel-bg', 'dark-green']\n  }), new FieldColorSchemeMode({\n    id: 'continuous-purples',\n    name: 'Purples',\n    isContinuous: true,\n    isByValue: true,\n    getColors: theme => ['panel-bg', 'dark-purple']\n  })];\n});\nexport class FieldColorSchemeMode {\n  constructor(options) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"isContinuous\", void 0);\n\n    _defineProperty(this, \"isByValue\", void 0);\n\n    _defineProperty(this, \"colorCache\", void 0);\n\n    _defineProperty(this, \"colorCacheTheme\", void 0);\n\n    _defineProperty(this, \"interpolator\", void 0);\n\n    _defineProperty(this, \"getNamedColors\", void 0);\n\n    this.id = options.id;\n    this.name = options.name;\n    this.description = options.description;\n    this.getNamedColors = options.getColors;\n    this.isContinuous = options.isContinuous;\n    this.isByValue = options.isByValue;\n  }\n\n  getColors(theme) {\n    if (!this.getNamedColors) {\n      return [];\n    }\n\n    if (this.colorCache && this.colorCacheTheme === theme) {\n      return this.colorCache;\n    }\n\n    this.colorCache = this.getNamedColors(theme).map(theme.visualization.getColorByName);\n    this.colorCacheTheme = theme;\n    return this.colorCache;\n  }\n\n  getInterpolator() {\n    if (!this.interpolator) {\n      this.interpolator = interpolateRgbBasis(this.colorCache);\n    }\n\n    return this.interpolator;\n  }\n\n  getCalculator(field, theme) {\n    const colors = this.getColors(theme);\n\n    if (this.isByValue) {\n      if (this.isContinuous) {\n        return (_, percent, _threshold) => {\n          return this.getInterpolator()(percent);\n        };\n      } else {\n        return (_, percent, _threshold) => {\n          return colors[percent * (colors.length - 1)];\n        };\n      }\n    } else {\n      return (_, _percent, _threshold) => {\n        var _field$state$seriesIn, _field$state;\n\n        const seriesIndex = (_field$state$seriesIn = (_field$state = field.state) === null || _field$state === void 0 ? void 0 : _field$state.seriesIndex) !== null && _field$state$seriesIn !== void 0 ? _field$state$seriesIn : 0;\n        return colors[seriesIndex % colors.length];\n      };\n    }\n  }\n\n}\n/** @beta */\n\nexport function getFieldColorModeForField(field) {\n  var _field$config$color$m, _field$config$color;\n\n  return fieldColorModeRegistry.get((_field$config$color$m = (_field$config$color = field.config.color) === null || _field$config$color === void 0 ? void 0 : _field$config$color.mode) !== null && _field$config$color$m !== void 0 ? _field$config$color$m : FieldColorModeId.Thresholds);\n}\n/** @beta */\n\nexport function getFieldColorMode(mode) {\n  return fieldColorModeRegistry.get(mode !== null && mode !== void 0 ? mode : FieldColorModeId.Thresholds);\n}\n/**\n * @alpha\n * Function that will return a series color for any given color mode. If the color mode is a by value color\n * mode it will use the field.config.color.seriesBy property to figure out which value to use\n */\n\nexport function getFieldSeriesColor(field, theme) {\n  var _field$config$color$s, _field$config$color2, _calcs$stat;\n\n  const mode = getFieldColorModeForField(field);\n\n  if (!mode.isByValue) {\n    return {\n      color: mode.getCalculator(field, theme)(0, 0),\n      threshold: fallBackTreshold,\n      percent: 1\n    };\n  }\n\n  const scale = getScaleCalculator(field, theme);\n  const stat = (_field$config$color$s = (_field$config$color2 = field.config.color) === null || _field$config$color2 === void 0 ? void 0 : _field$config$color2.seriesBy) !== null && _field$config$color$s !== void 0 ? _field$config$color$s : 'last';\n  const calcs = reduceField({\n    field,\n    reducers: [stat]\n  });\n  const value = (_calcs$stat = calcs[stat]) !== null && _calcs$stat !== void 0 ? _calcs$stat : 0;\n  return scale(value);\n}\n\nfunction getFixedColor(field, theme) {\n  return () => {\n    var _field$config$color$f, _field$config$color3;\n\n    return theme.visualization.getColorByName((_field$config$color$f = (_field$config$color3 = field.config.color) === null || _field$config$color3 === void 0 ? void 0 : _field$config$color3.fixedColor) !== null && _field$config$color$f !== void 0 ? _field$config$color$f : FALLBACK_COLOR);\n  };\n}","map":{"version":3,"names":["interpolateRgbBasis","reduceField","FALLBACK_COLOR","FieldColorModeId","Threshold","Registry","getScaleCalculator","fallBackTreshold","fieldColorModeRegistry","id","Fixed","name","description","getCalculator","getFixedColor","Thresholds","isByValue","_field","theme","_value","_percent","threshold","thresholdSafe","visualization","getColorByName","color","FieldColorSchemeMode","PaletteClassic","isContinuous","getColors","palette","constructor","options","getNamedColors","colorCache","colorCacheTheme","map","getInterpolator","interpolator","field","colors","_","percent","_threshold","length","seriesIndex","state","getFieldColorModeForField","get","config","mode","getFieldColorMode","getFieldSeriesColor","scale","stat","seriesBy","calcs","reducers","value","fixedColor"],"sources":["/home/soula/grafana/packages/grafana-data/src/field/fieldColor.ts"],"sourcesContent":["import { interpolateRgbBasis } from 'd3-interpolate';\n\nimport { GrafanaTheme2 } from '../themes/types';\nimport { reduceField } from '../transformations/fieldReducer';\nimport { FALLBACK_COLOR, Field, FieldColorModeId, Threshold } from '../types';\nimport { RegistryItem } from '../utils';\nimport { Registry } from '../utils/Registry';\n\nimport { getScaleCalculator, ColorScaleValue } from './scale';\nimport { fallBackTreshold } from './thresholds';\n\n/** @beta */\nexport type FieldValueColorCalculator = (value: number, percent: number, Threshold?: Threshold) => string;\n\n/** @beta */\nexport interface FieldColorMode extends RegistryItem {\n  getCalculator: (field: Field, theme: GrafanaTheme2) => FieldValueColorCalculator;\n  getColors?: (theme: GrafanaTheme2) => string[];\n  isContinuous?: boolean;\n  isByValue?: boolean;\n}\n\n/** @internal */\nexport const fieldColorModeRegistry = new Registry<FieldColorMode>(() => {\n  return [\n    {\n      id: FieldColorModeId.Fixed,\n      name: 'Single color',\n      description: 'Set a specific color',\n      getCalculator: getFixedColor,\n    },\n    {\n      id: FieldColorModeId.Thresholds,\n      name: 'From thresholds',\n      isByValue: true,\n      description: 'Derive colors from thresholds',\n      getCalculator: (_field, theme) => {\n        return (_value, _percent, threshold) => {\n          const thresholdSafe = threshold ?? fallBackTreshold;\n          return theme.visualization.getColorByName(thresholdSafe.color);\n        };\n      },\n    },\n    new FieldColorSchemeMode({\n      id: FieldColorModeId.PaletteClassic,\n      name: 'Classic palette',\n      isContinuous: false,\n      isByValue: false,\n      getColors: (theme: GrafanaTheme2) => {\n        return theme.visualization.palette;\n      },\n    }),\n    new FieldColorSchemeMode({\n      id: 'continuous-GrYlRd',\n      name: 'Green-Yellow-Red',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['green', 'yellow', 'red'],\n    }),\n    new FieldColorSchemeMode({\n      id: 'continuous-RdYlGr',\n      name: 'Red-Yellow-Green',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['red', 'yellow', 'green'],\n    }),\n    new FieldColorSchemeMode({\n      id: 'continuous-BlYlRd',\n      name: 'Blue-Yellow-Red',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['dark-blue', 'super-light-yellow', 'dark-red'],\n    }),\n    new FieldColorSchemeMode({\n      id: 'continuous-YlRd',\n      name: 'Yellow-Red',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['super-light-yellow', 'dark-red'],\n    }),\n    new FieldColorSchemeMode({\n      id: 'continuous-BlPu',\n      name: 'Blue-Purple',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['blue', 'purple'],\n    }),\n    new FieldColorSchemeMode({\n      id: 'continuous-YlBl',\n      name: 'Yellow-Blue',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['super-light-yellow', 'dark-blue'],\n    }),\n    new FieldColorSchemeMode({\n      id: 'continuous-blues',\n      name: 'Blues',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['panel-bg', 'dark-blue'],\n    }),\n    new FieldColorSchemeMode({\n      id: 'continuous-reds',\n      name: 'Reds',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['panel-bg', 'dark-red'],\n    }),\n    new FieldColorSchemeMode({\n      id: 'continuous-greens',\n      name: 'Greens',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['panel-bg', 'dark-green'],\n    }),\n    new FieldColorSchemeMode({\n      id: 'continuous-purples',\n      name: 'Purples',\n      isContinuous: true,\n      isByValue: true,\n      getColors: (theme: GrafanaTheme2) => ['panel-bg', 'dark-purple'],\n    }),\n  ];\n});\n\ninterface FieldColorSchemeModeOptions {\n  id: string;\n  name: string;\n  description?: string;\n  getColors: (theme: GrafanaTheme2) => string[];\n  isContinuous: boolean;\n  isByValue: boolean;\n}\n\nexport class FieldColorSchemeMode implements FieldColorMode {\n  id: string;\n  name: string;\n  description?: string;\n  isContinuous: boolean;\n  isByValue: boolean;\n  colorCache?: string[];\n  colorCacheTheme?: GrafanaTheme2;\n  interpolator?: (value: number) => string;\n  getNamedColors?: (theme: GrafanaTheme2) => string[];\n\n  constructor(options: FieldColorSchemeModeOptions) {\n    this.id = options.id;\n    this.name = options.name;\n    this.description = options.description;\n    this.getNamedColors = options.getColors;\n    this.isContinuous = options.isContinuous;\n    this.isByValue = options.isByValue;\n  }\n\n  getColors(theme: GrafanaTheme2): string[] {\n    if (!this.getNamedColors) {\n      return [];\n    }\n\n    if (this.colorCache && this.colorCacheTheme === theme) {\n      return this.colorCache;\n    }\n\n    this.colorCache = this.getNamedColors(theme).map(theme.visualization.getColorByName);\n    this.colorCacheTheme = theme;\n\n    return this.colorCache;\n  }\n\n  private getInterpolator() {\n    if (!this.interpolator) {\n      this.interpolator = interpolateRgbBasis(this.colorCache!);\n    }\n\n    return this.interpolator;\n  }\n\n  getCalculator(field: Field, theme: GrafanaTheme2) {\n    const colors = this.getColors(theme);\n\n    if (this.isByValue) {\n      if (this.isContinuous) {\n        return (_: number, percent: number, _threshold?: Threshold) => {\n          return this.getInterpolator()(percent);\n        };\n      } else {\n        return (_: number, percent: number, _threshold?: Threshold) => {\n          return colors[percent * (colors.length - 1)];\n        };\n      }\n    } else {\n      return (_: number, _percent: number, _threshold?: Threshold) => {\n        const seriesIndex = field.state?.seriesIndex ?? 0;\n        return colors[seriesIndex % colors.length];\n      };\n    }\n  }\n}\n\n/** @beta */\nexport function getFieldColorModeForField(field: Field): FieldColorMode {\n  return fieldColorModeRegistry.get(field.config.color?.mode ?? FieldColorModeId.Thresholds);\n}\n\n/** @beta */\nexport function getFieldColorMode(mode?: FieldColorModeId | string): FieldColorMode {\n  return fieldColorModeRegistry.get(mode ?? FieldColorModeId.Thresholds);\n}\n\n/**\n * @alpha\n * Function that will return a series color for any given color mode. If the color mode is a by value color\n * mode it will use the field.config.color.seriesBy property to figure out which value to use\n */\nexport function getFieldSeriesColor(field: Field, theme: GrafanaTheme2): ColorScaleValue {\n  const mode = getFieldColorModeForField(field);\n\n  if (!mode.isByValue) {\n    return {\n      color: mode.getCalculator(field, theme)(0, 0),\n      threshold: fallBackTreshold,\n      percent: 1,\n    };\n  }\n\n  const scale = getScaleCalculator(field, theme);\n  const stat = field.config.color?.seriesBy ?? 'last';\n  const calcs = reduceField({ field, reducers: [stat] });\n  const value = calcs[stat] ?? 0;\n\n  return scale(value);\n}\n\nfunction getFixedColor(field: Field, theme: GrafanaTheme2) {\n  return () => {\n    return theme.visualization.getColorByName(field.config.color?.fixedColor ?? FALLBACK_COLOR);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}