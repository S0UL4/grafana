{"ast":null,"code":"import { captureException } from '@sentry/browser';\nimport { getEchoSrv, EchoEventType } from '@grafana/runtime';\nexport const reportPerformance = (metric, value) => {\n  getEchoSrv().addEvent({\n    type: EchoEventType.Performance,\n    payload: {\n      name: metric,\n      value: value\n    }\n  });\n}; // Sentry will process the error, adding it's own metadata, applying any sampling rules,\n// then push it to EchoSrv as SentryEvent\n\nexport const reportError = error => captureException(error);","map":{"version":3,"names":["captureException","getEchoSrv","EchoEventType","reportPerformance","metric","value","addEvent","type","Performance","payload","name","reportError","error"],"sources":["/home/soula/grafana/public/app/core/services/echo/EchoSrv.ts"],"sourcesContent":["import { captureException } from '@sentry/browser';\n\nimport { getEchoSrv, EchoEventType } from '@grafana/runtime';\n\nimport { PerformanceEvent } from './backends/PerformanceBackend';\n\nexport const reportPerformance = (metric: string, value: number) => {\n  getEchoSrv().addEvent<PerformanceEvent>({\n    type: EchoEventType.Performance,\n    payload: {\n      name: metric,\n      value: value,\n    },\n  });\n};\n\n// Sentry will process the error, adding it's own metadata, applying any sampling rules,\n// then push it to EchoSrv as SentryEvent\nexport const reportError = (error: Error) => captureException(error);\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,iBAAjC;AAEA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,kBAA1C;AAIA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,MAAD,EAAiBC,KAAjB,KAAmC;EAClEJ,UAAU,GAAGK,QAAb,CAAwC;IACtCC,IAAI,EAAEL,aAAa,CAACM,WADkB;IAEtCC,OAAO,EAAE;MACPC,IAAI,EAAEN,MADC;MAEPC,KAAK,EAAEA;IAFA;EAF6B,CAAxC;AAOD,CARM,C,CAUP;AACA;;AACA,OAAO,MAAMM,WAAW,GAAIC,KAAD,IAAkBZ,gBAAgB,CAACY,KAAD,CAAtD"},"metadata":{},"sourceType":"module"}