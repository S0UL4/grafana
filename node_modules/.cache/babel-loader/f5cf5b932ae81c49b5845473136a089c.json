{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { updateDatasourcePluginOption } from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv, isFetchError } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport ResponseParser from '../azure_monitor/response_parser';\nimport { routeNames } from '../utils/common';\nimport { MonitorConfig } from './MonitorConfig';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport class ConfigEditor extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"templateSrv\", getTemplateSrv());\n\n    _defineProperty(this, \"baseURL\", void 0);\n\n    _defineProperty(this, \"updateOptions\", optionsFunc => {\n      const updated = optionsFunc(this.props.options);\n      this.props.onOptionsChange(updated);\n      this.setState({\n        unsaved: true\n      });\n    });\n\n    _defineProperty(this, \"saveOptions\", async () => {\n      if (this.state.unsaved) {\n        await getBackendSrv().put(`/api/datasources/${this.props.options.id}`, this.props.options).then(result => {\n          updateDatasourcePluginOption(this.props, 'version', result.datasource.version);\n        });\n        this.setState({\n          unsaved: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"getSubscriptions\", async () => {\n      await this.saveOptions();\n      const query = `?api-version=2019-03-01`;\n\n      try {\n        const result = await getBackendSrv().fetch({\n          url: this.baseURL + query,\n          method: 'GET'\n        }).toPromise();\n        this.setState({\n          error: undefined\n        });\n        return ResponseParser.parseSubscriptionsForSelect(result);\n      } catch (err) {\n        if (isFetchError(err)) {\n          var _err$data;\n\n          this.setState({\n            error: {\n              title: 'Error requesting subscriptions',\n              description: 'Could not request subscriptions from Azure. Check your credentials and try again.',\n              details: err === null || err === void 0 ? void 0 : (_err$data = err.data) === null || _err$data === void 0 ? void 0 : _err$data.message\n            }\n          });\n        }\n\n        return Promise.resolve([]);\n      }\n    });\n\n    this.state = {\n      unsaved: false\n    };\n    this.baseURL = `/api/datasources/${this.props.options.id}/resources/${routeNames.azureMonitor}/subscriptions`;\n  }\n\n  render() {\n    const {\n      options\n    } = this.props;\n    const {\n      error\n    } = this.state;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(MonitorConfig, {\n        options: options,\n        updateOptions: this.updateOptions,\n        getSubscriptions: this.getSubscriptions\n      }), error && /*#__PURE__*/_jsxs(Alert, {\n        severity: \"error\",\n        title: error.title,\n        children: [/*#__PURE__*/_jsx(\"p\", {\n          children: error.description\n        }), error.details && /*#__PURE__*/_jsx(\"details\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: error.details\n        })]\n      })]\n    });\n  }\n\n}\nexport default ConfigEditor;","map":{"version":3,"names":["React","PureComponent","updateDatasourcePluginOption","getBackendSrv","getTemplateSrv","isFetchError","Alert","ResponseParser","routeNames","MonitorConfig","ConfigEditor","constructor","props","optionsFunc","updated","options","onOptionsChange","setState","unsaved","state","put","id","then","result","datasource","version","saveOptions","query","fetch","url","baseURL","method","toPromise","error","undefined","parseSubscriptionsForSelect","err","title","description","details","data","message","Promise","resolve","azureMonitor","render","updateOptions","getSubscriptions","whiteSpace"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ConfigEditor.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, SelectableValue, updateDatasourcePluginOption } from '@grafana/data';\nimport { getBackendSrv, getTemplateSrv, isFetchError, TemplateSrv } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nimport ResponseParser from '../azure_monitor/response_parser';\nimport { AzureDataSourceJsonData, AzureDataSourceSecureJsonData, AzureDataSourceSettings } from '../types';\nimport { routeNames } from '../utils/common';\n\nimport { MonitorConfig } from './MonitorConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<AzureDataSourceJsonData, AzureDataSourceSecureJsonData>;\n\ninterface ErrorMessage {\n  title: string;\n  description: string;\n  details?: string;\n}\n\nexport interface State {\n  unsaved: boolean;\n  error?: ErrorMessage;\n}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  templateSrv: TemplateSrv = getTemplateSrv();\n  baseURL: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      unsaved: false,\n    };\n    this.baseURL = `/api/datasources/${this.props.options.id}/resources/${routeNames.azureMonitor}/subscriptions`;\n  }\n\n  private updateOptions = (optionsFunc: (options: AzureDataSourceSettings) => AzureDataSourceSettings): void => {\n    const updated = optionsFunc(this.props.options);\n    this.props.onOptionsChange(updated);\n\n    this.setState({ unsaved: true });\n  };\n\n  private saveOptions = async (): Promise<void> => {\n    if (this.state.unsaved) {\n      await getBackendSrv()\n        .put(`/api/datasources/${this.props.options.id}`, this.props.options)\n        .then((result: { datasource: AzureDataSourceSettings }) => {\n          updateDatasourcePluginOption(this.props, 'version', result.datasource.version);\n        });\n\n      this.setState({ unsaved: false });\n    }\n  };\n\n  private getSubscriptions = async (): Promise<Array<SelectableValue<string>>> => {\n    await this.saveOptions();\n\n    const query = `?api-version=2019-03-01`;\n    try {\n      const result = await getBackendSrv()\n        .fetch({\n          url: this.baseURL + query,\n          method: 'GET',\n        })\n        .toPromise();\n\n      this.setState({ error: undefined });\n      return ResponseParser.parseSubscriptionsForSelect(result);\n    } catch (err) {\n      if (isFetchError(err)) {\n        this.setState({\n          error: {\n            title: 'Error requesting subscriptions',\n            description: 'Could not request subscriptions from Azure. Check your credentials and try again.',\n            details: err?.data?.message,\n          },\n        });\n      }\n      return Promise.resolve([]);\n    }\n  };\n\n  render() {\n    const { options } = this.props;\n    const { error } = this.state;\n\n    return (\n      <>\n        <MonitorConfig options={options} updateOptions={this.updateOptions} getSubscriptions={this.getSubscriptions} />\n        {error && (\n          <Alert severity=\"error\" title={error.title}>\n            <p>{error.description}</p>\n            {error.details && <details style={{ whiteSpace: 'pre-wrap' }}>{error.details}</details>}\n          </Alert>\n        )}\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}