{"ast":null,"code":"var _Alert, _label;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { urlUtil } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, Button } from '@grafana/ui';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\nimport { AccessControlAction } from 'app/types/';\nimport { ShowConfirmModalEvent } from '../../../types/events';\nimport { deleteDataSource, initDataSourceSettings, loadDataSource, testDataSource, updateDataSource } from '../state/actions';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from '../state/navModel';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { PluginSettings } from './PluginSettings';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction mapStateToProps(state, props) {\n  const dataSourceId = props.match.params.uid;\n  const params = new URLSearchParams(props.location.search);\n  const dataSource = getDataSource(state.dataSources, dataSourceId);\n  const {\n    plugin,\n    loadError,\n    loading,\n    testingStatus\n  } = state.dataSourceSettings;\n  const page = params.get('page');\n  const nav = plugin ? getDataSourceNav(buildNavModel(dataSource, plugin), page || 'settings') : getDataSourceLoadingNav('settings');\n  const navModel = getNavModel(state.navIndex, page ? `datasource-page-${page}` : `datasource-settings-${dataSourceId}`, nav);\n  return {\n    dataSource: getDataSource(state.dataSources, dataSourceId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    dataSourceId: dataSourceId,\n    page,\n    plugin,\n    loadError,\n    loading,\n    testingStatus,\n    navModel\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n  cleanUpAction\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport class DataSourceSettingsPage extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onSubmit\", async evt => {\n      evt.preventDefault();\n      await this.props.updateDataSource(Object.assign({}, this.props.dataSource));\n      this.testDataSource();\n    });\n\n    _defineProperty(this, \"onTest\", async evt => {\n      evt.preventDefault();\n      this.testDataSource();\n    });\n\n    _defineProperty(this, \"onDelete\", () => {\n      appEvents.publish(new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${this.props.dataSource.name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => {\n          this.confirmDelete();\n        }\n      }));\n    });\n\n    _defineProperty(this, \"confirmDelete\", () => {\n      this.props.deleteDataSource();\n    });\n\n    _defineProperty(this, \"onModelChange\", dataSource => {\n      this.props.dataSourceLoaded(dataSource);\n    });\n  }\n\n  componentDidMount() {\n    const {\n      initDataSourceSettings,\n      dataSourceId\n    } = this.props;\n    initDataSourceSettings(dataSourceId);\n  }\n\n  componentWillUnmount() {\n    this.props.cleanUpAction({\n      stateSelector: state => state.dataSourceSettings\n    });\n  }\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return /*#__PURE__*/_jsx(Alert, {\n      \"aria-label\": selectors.pages.DataSource.readOnly,\n      severity: \"info\",\n      title: \"Provisioned data source\",\n      children: \"This data source was added by config and cannot be modified using the UI. Please contact your server admin to update this data source.\"\n    });\n  }\n\n  renderMissingEditRightsMessage() {\n    return _Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n      severity: \"info\",\n      title: \"Missing rights\",\n      children: \"You are not allowed to modify this data source. Please contact your server admin to update this data source.\"\n    }));\n  }\n\n  testDataSource() {\n    const {\n      dataSource,\n      testDataSource\n    } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  onNavigateToExplore() {\n    const {\n      dataSource\n    } = this.props;\n    const exploreState = JSON.stringify({\n      datasource: dataSource.name,\n      context: 'explore'\n    });\n    const url = urlUtil.renderUrl('/explore', {\n      left: exploreState\n    });\n    return url;\n  }\n\n  renderLoadError() {\n    const {\n      loadError,\n      dataSource\n    } = this.props;\n    const canDeleteDataSource = !this.isReadOnly() && contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n    const node = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle'\n    };\n    const nav = {\n      node: node,\n      main: node\n    };\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: nav,\n      children: /*#__PURE__*/_jsxs(Page.Contents, {\n        isLoading: this.props.loading,\n        children: [this.isReadOnly() && this.renderIsReadOnlyMessage(), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form-button-row\",\n          children: [canDeleteDataSource && /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            variant: \"destructive\",\n            onClick: this.onDelete,\n            children: \"Delete\"\n          }), /*#__PURE__*/_jsx(Button, {\n            variant: \"secondary\",\n            fill: \"outline\",\n            type: \"button\",\n            onClick: () => history.back(),\n            children: \"Back\"\n          })]\n        })]\n      })\n    });\n  }\n\n  renderConfigPageBody(page) {\n    const {\n      plugin\n    } = this.props;\n\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        // Investigate is any plugins using this? We should change this interface\n        return /*#__PURE__*/_jsx(p.body, {\n          plugin: plugin,\n          query: {}\n        });\n      }\n    }\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [\"Page not found: \", page]\n    });\n  }\n\n  renderAlertDetails() {\n    var _testingStatus$detail, _testingStatus$detail2, _testingStatus$detail3;\n\n    const {\n      testingStatus\n    } = this.props;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [testingStatus === null || testingStatus === void 0 ? void 0 : (_testingStatus$detail = testingStatus.details) === null || _testingStatus$detail === void 0 ? void 0 : _testingStatus$detail.message, testingStatus !== null && testingStatus !== void 0 && (_testingStatus$detail2 = testingStatus.details) !== null && _testingStatus$detail2 !== void 0 && _testingStatus$detail2.verboseMessage ? /*#__PURE__*/_jsx(\"details\", {\n        style: {\n          whiteSpace: 'pre-wrap'\n        },\n        children: testingStatus === null || testingStatus === void 0 ? void 0 : (_testingStatus$detail3 = testingStatus.details) === null || _testingStatus$detail3 === void 0 ? void 0 : _testingStatus$detail3.verboseMessage\n      }) : null]\n    });\n  }\n\n  renderSettings() {\n    const {\n      dataSourceMeta,\n      setDataSourceName,\n      setIsDefault,\n      dataSource,\n      plugin,\n      testingStatus\n    } = this.props;\n    const canWriteDataSource = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n    const canDeleteDataSource = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n    return /*#__PURE__*/_jsxs(\"form\", {\n      onSubmit: this.onSubmit,\n      children: [!canWriteDataSource && this.renderMissingEditRightsMessage(), this.isReadOnly() && this.renderIsReadOnlyMessage(), dataSourceMeta.state && /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form\",\n        children: [_label || (_label = /*#__PURE__*/_jsx(\"label\", {\n          className: \"gf-form-label width-10\",\n          children: \"Plugin state\"\n        })), /*#__PURE__*/_jsx(\"label\", {\n          className: \"gf-form-label gf-form-label--transparent\",\n          children: /*#__PURE__*/_jsx(PluginStateInfo, {\n            state: dataSourceMeta.state\n          })\n        })]\n      }), /*#__PURE__*/_jsx(CloudInfoBox, {\n        dataSource: dataSource\n      }), /*#__PURE__*/_jsx(BasicSettings, {\n        dataSourceName: dataSource.name,\n        isDefault: dataSource.isDefault,\n        onDefaultChange: state => setIsDefault(state),\n        onNameChange: name => setDataSourceName(name)\n      }), plugin && /*#__PURE__*/_jsx(PluginSettings, {\n        plugin: plugin,\n        dataSource: dataSource,\n        dataSourceMeta: dataSourceMeta,\n        onModelChange: this.onModelChange\n      }), (testingStatus === null || testingStatus === void 0 ? void 0 : testingStatus.message) && /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-group p-t-2\",\n        children: /*#__PURE__*/_jsx(Alert, {\n          severity: testingStatus.status === 'error' ? 'error' : 'success',\n          title: testingStatus.message,\n          \"aria-label\": selectors.pages.DataSource.alert,\n          children: testingStatus.details && this.renderAlertDetails()\n        })\n      }), /*#__PURE__*/_jsx(ButtonRow, {\n        onSubmit: event => this.onSubmit(event),\n        canSave: !this.isReadOnly() && canWriteDataSource,\n        canDelete: !this.isReadOnly() && canDeleteDataSource,\n        onDelete: this.onDelete,\n        onTest: event => this.onTest(event),\n        exploreUrl: this.onNavigateToExplore()\n      })]\n    });\n  }\n\n  render() {\n    const {\n      navModel,\n      page,\n      loadError,\n      loading\n    } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError();\n    }\n\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: navModel,\n      children: /*#__PURE__*/_jsx(Page.Contents, {\n        isLoading: loading,\n        children: this.hasDataSource ? /*#__PURE__*/_jsx(\"div\", {\n          children: page ? this.renderConfigPageBody(page) : this.renderSettings()\n        }) : null\n      })\n    });\n  }\n\n}\nexport default connector(DataSourceSettingsPage);","map":{"version":3,"names":["React","PureComponent","connect","urlUtil","selectors","Alert","Button","cleanUpAction","appEvents","Page","contextSrv","getNavModel","PluginStateInfo","AccessControlAction","ShowConfirmModalEvent","deleteDataSource","initDataSourceSettings","loadDataSource","testDataSource","updateDataSource","getDataSourceLoadingNav","buildNavModel","getDataSourceNav","dataSourceLoaded","setDataSourceName","setIsDefault","getDataSource","getDataSourceMeta","BasicSettings","ButtonRow","CloudInfoBox","PluginSettings","mapStateToProps","state","props","dataSourceId","match","params","uid","URLSearchParams","location","search","dataSource","dataSources","plugin","loadError","loading","testingStatus","dataSourceSettings","page","get","nav","navModel","navIndex","dataSourceMeta","type","mapDispatchToProps","connector","DataSourceSettingsPage","evt","preventDefault","publish","title","text","name","yesText","icon","onConfirm","confirmDelete","componentDidMount","componentWillUnmount","stateSelector","isReadOnly","readOnly","renderIsReadOnlyMessage","pages","DataSource","renderMissingEditRightsMessage","hasDataSource","id","onNavigateToExplore","exploreState","JSON","stringify","datasource","context","url","renderUrl","left","renderLoadError","canDeleteDataSource","hasPermissionInMetadata","DataSourcesDelete","node","subTitle","main","onDelete","history","back","renderConfigPageBody","configPages","p","renderAlertDetails","details","message","verboseMessage","whiteSpace","renderSettings","canWriteDataSource","DataSourcesWrite","onSubmit","isDefault","onModelChange","status","alert","event","onTest","render"],"sources":["/home/soula/grafana/public/app/features/datasources/settings/DataSourceSettingsPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { DataSourceSettings, urlUtil } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, Button } from '@grafana/ui';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\nimport { StoreState, AccessControlAction } from 'app/types/';\n\nimport { ShowConfirmModalEvent } from '../../../types/events';\nimport {\n  deleteDataSource,\n  initDataSourceSettings,\n  loadDataSource,\n  testDataSource,\n  updateDataSource,\n} from '../state/actions';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from '../state/navModel';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\n\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { PluginSettings } from './PluginSettings';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const dataSourceId = props.match.params.uid;\n  const params = new URLSearchParams(props.location.search);\n  const dataSource = getDataSource(state.dataSources, dataSourceId);\n  const { plugin, loadError, loading, testingStatus } = state.dataSourceSettings;\n  const page = params.get('page');\n\n  const nav = plugin\n    ? getDataSourceNav(buildNavModel(dataSource, plugin), page || 'settings')\n    : getDataSourceLoadingNav('settings');\n\n  const navModel = getNavModel(\n    state.navIndex,\n    page ? `datasource-page-${page}` : `datasource-settings-${dataSourceId}`,\n    nav\n  );\n\n  return {\n    dataSource: getDataSource(state.dataSources, dataSourceId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    dataSourceId: dataSourceId,\n    page,\n    plugin,\n    loadError,\n    loading,\n    testingStatus,\n    navModel,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n  cleanUpAction,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DataSourceSettingsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { initDataSourceSettings, dataSourceId } = this.props;\n    initDataSourceSettings(dataSourceId);\n  }\n\n  componentWillUnmount() {\n    this.props.cleanUpAction({\n      stateSelector: (state) => state.dataSourceSettings,\n    });\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${this.props.dataSource.name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => {\n          this.confirmDelete();\n        },\n      })\n    );\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <Alert aria-label={selectors.pages.DataSource.readOnly} severity=\"info\" title=\"Provisioned data source\">\n        This data source was added by config and cannot be modified using the UI. Please contact your server admin to\n        update this data source.\n      </Alert>\n    );\n  }\n\n  renderMissingEditRightsMessage() {\n    return (\n      <Alert severity=\"info\" title=\"Missing rights\">\n        You are not allowed to modify this data source. Please contact your server admin to update this data source.\n      </Alert>\n    );\n  }\n\n  testDataSource() {\n    const { dataSource, testDataSource } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  onNavigateToExplore() {\n    const { dataSource } = this.props;\n    const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n    const url = urlUtil.renderUrl('/explore', { left: exploreState });\n    return url;\n  }\n\n  renderLoadError() {\n    const { loadError, dataSource } = this.props;\n    const canDeleteDataSource =\n      !this.isReadOnly() && contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n    const node = {\n      text: loadError!,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents isLoading={this.props.loading}>\n          {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n          <div className=\"gf-form-button-row\">\n            {canDeleteDataSource && (\n              <Button type=\"submit\" variant=\"destructive\" onClick={this.onDelete}>\n                Delete\n              </Button>\n            )}\n            <Button variant=\"secondary\" fill=\"outline\" type=\"button\" onClick={() => history.back()}>\n              Back\n            </Button>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.props;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        // Investigate is any plugins using this? We should change this interface\n        return <p.body plugin={plugin} query={{}} />;\n      }\n    }\n\n    return <div>Page not found: {page}</div>;\n  }\n\n  renderAlertDetails() {\n    const { testingStatus } = this.props;\n\n    return (\n      <>\n        {testingStatus?.details?.message}\n        {testingStatus?.details?.verboseMessage ? (\n          <details style={{ whiteSpace: 'pre-wrap' }}>{testingStatus?.details?.verboseMessage}</details>\n        ) : null}\n      </>\n    );\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource, plugin, testingStatus } = this.props;\n    const canWriteDataSource = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n    const canDeleteDataSource = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {!canWriteDataSource && this.renderMissingEditRightsMessage()}\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">Plugin state</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateInfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <CloudInfoBox dataSource={dataSource} />\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={(state) => setIsDefault(state)}\n          onNameChange={(name) => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        {testingStatus?.message && (\n          <div className=\"gf-form-group p-t-2\">\n            <Alert\n              severity={testingStatus.status === 'error' ? 'error' : 'success'}\n              title={testingStatus.message}\n              aria-label={selectors.pages.DataSource.alert}\n            >\n              {testingStatus.details && this.renderAlertDetails()}\n            </Alert>\n          </div>\n        )}\n\n        <ButtonRow\n          onSubmit={(event) => this.onSubmit(event)}\n          canSave={!this.isReadOnly() && canWriteDataSource}\n          canDelete={!this.isReadOnly() && canDeleteDataSource}\n          onDelete={this.onDelete}\n          onTest={(event) => this.onTest(event)}\n          exploreUrl={this.onNavigateToExplore()}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page, loadError, loading } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError();\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={loading}>\n          {this.hasDataSource ? <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div> : null}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(DataSourceSettingsPage);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}