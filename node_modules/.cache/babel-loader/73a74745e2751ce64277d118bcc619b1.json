{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { rangeUtil } from '@grafana/data';\nimport TimegrainConverter from '../../time_grain_converter';\nimport { toOption } from '../../utils/common';\nimport { useAsyncState } from '../../utils/useAsyncState';\nimport { setMetricNamespace } from './setQueryValue';\nexport const useMetricNamespaces = (query, datasource, onChange, setError) => {\n  var _query$azureMonitor;\n\n  const {\n    metricNamespace,\n    resourceUri\n  } = (_query$azureMonitor = query.azureMonitor) !== null && _query$azureMonitor !== void 0 ? _query$azureMonitor : {};\n  const metricNamespaces = useAsyncState(async () => {\n    if (!resourceUri) {\n      return;\n    }\n\n    const results = await datasource.azureMonitorDatasource.getMetricNamespaces({\n      resourceUri\n    });\n    const options = formatOptions(results, metricNamespace); // Do some cleanup of the query state if need be\n\n    if (!metricNamespace && options.length) {\n      onChange(setMetricNamespace(query, options[0].value));\n    }\n\n    return options;\n  }, setError, [resourceUri]);\n  return metricNamespaces;\n};\nexport const useMetricNames = (query, datasource, onChange, setError) => {\n  var _query$azureMonitor2;\n\n  const {\n    metricNamespace,\n    metricName,\n    resourceUri\n  } = (_query$azureMonitor2 = query.azureMonitor) !== null && _query$azureMonitor2 !== void 0 ? _query$azureMonitor2 : {};\n  return useAsyncState(async () => {\n    if (!(metricNamespace && resourceUri)) {\n      return;\n    }\n\n    const results = await datasource.azureMonitorDatasource.getMetricNames({\n      resourceUri,\n      metricNamespace\n    });\n    const options = formatOptions(results, metricName);\n    return options;\n  }, setError, [resourceUri, metricNamespace]);\n};\nconst defaultMetricMetadata = {\n  aggOptions: [],\n  timeGrains: [],\n  dimensions: [],\n  isLoading: false,\n  supportedAggTypes: [],\n  primaryAggType: undefined\n};\nexport const useMetricMetadata = (query, datasource, onChange) => {\n  var _query$azureMonitor3;\n\n  const [metricMetadata, setMetricMetadata] = useState(defaultMetricMetadata);\n  const {\n    resourceUri,\n    metricNamespace,\n    metricName,\n    aggregation,\n    timeGrain\n  } = (_query$azureMonitor3 = query.azureMonitor) !== null && _query$azureMonitor3 !== void 0 ? _query$azureMonitor3 : {}; // Fetch new metric metadata when the fields change\n\n  useEffect(() => {\n    if (!(resourceUri && metricNamespace && metricName)) {\n      setMetricMetadata(defaultMetricMetadata);\n      return;\n    }\n\n    datasource.azureMonitorDatasource.getMetricMetadata({\n      resourceUri,\n      metricNamespace,\n      metricName\n    }).then(metadata => {\n      var _metadata$supportedAg;\n\n      // TODO: Move the aggregationTypes and timeGrain defaults into `getMetricMetadata`\n      const aggregations = (metadata.supportedAggTypes || [metadata.primaryAggType]).map(v => ({\n        label: v,\n        value: v\n      }));\n      setMetricMetadata({\n        aggOptions: aggregations,\n        timeGrains: metadata.supportedTimeGrains,\n        dimensions: metadata.dimensions,\n        isLoading: false,\n        supportedAggTypes: (_metadata$supportedAg = metadata.supportedAggTypes) !== null && _metadata$supportedAg !== void 0 ? _metadata$supportedAg : [],\n        primaryAggType: metadata.primaryAggType\n      });\n    });\n  }, [datasource, resourceUri, metricNamespace, metricName]); // Update the query state in response to the meta data changing\n\n  useEffect(() => {\n    const newAggregation = aggregation || metricMetadata.primaryAggType;\n    const newTimeGrain = timeGrain || 'auto';\n\n    if (newAggregation !== aggregation || newTimeGrain !== timeGrain) {\n      onChange(Object.assign({}, query, {\n        azureMonitor: Object.assign({}, query.azureMonitor, {\n          aggregation: newAggregation,\n          timeGrain: newTimeGrain,\n          allowedTimeGrainsMs: metricMetadata.timeGrains.filter(timeGrain => timeGrain.value !== 'auto').map(timeGrain => rangeUtil.intervalToMs(TimegrainConverter.createKbnUnitFromISO8601Duration(timeGrain.value)))\n        })\n      }));\n    }\n  }, [onChange, metricMetadata, aggregation, timeGrain, query]);\n  return metricMetadata;\n};\n\nfunction formatOptions(rawResults, selectedValue) {\n  const options = rawResults.map(toOption); // account for custom values that might have been set in json file like ones crafted with a template variable (ex: \"cloud-datasource-resource-$Environment\")\n\n  if (selectedValue && !options.find(option => option.value === selectedValue.toLowerCase())) {\n    options.push({\n      label: selectedValue,\n      value: selectedValue\n    });\n  }\n\n  return options;\n}","map":{"version":3,"names":["useEffect","useState","rangeUtil","TimegrainConverter","toOption","useAsyncState","setMetricNamespace","useMetricNamespaces","query","datasource","onChange","setError","metricNamespace","resourceUri","azureMonitor","metricNamespaces","results","azureMonitorDatasource","getMetricNamespaces","options","formatOptions","length","value","useMetricNames","metricName","getMetricNames","defaultMetricMetadata","aggOptions","timeGrains","dimensions","isLoading","supportedAggTypes","primaryAggType","undefined","useMetricMetadata","metricMetadata","setMetricMetadata","aggregation","timeGrain","getMetricMetadata","then","metadata","aggregations","map","v","label","supportedTimeGrains","newAggregation","newTimeGrain","allowedTimeGrainsMs","filter","intervalToMs","createKbnUnitFromISO8601Duration","rawResults","selectedValue","find","option","toLowerCase","push"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/dataHooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { rangeUtil } from '@grafana/data';\n\nimport Datasource from '../../datasource';\nimport TimegrainConverter from '../../time_grain_converter';\nimport { AzureMonitorErrorish, AzureMonitorOption, AzureMonitorQuery } from '../../types';\nimport { toOption } from '../../utils/common';\nimport { useAsyncState } from '../../utils/useAsyncState';\n\nimport { setMetricNamespace } from './setQueryValue';\n\ntype SetErrorFn = (source: string, error: AzureMonitorErrorish | undefined) => void;\n\nexport type DataHook = (\n  query: AzureMonitorQuery,\n  datasource: Datasource,\n  onChange: OnChangeFn,\n  setError: SetErrorFn\n) => AzureMonitorOption[];\n\nexport type MetricsMetadataHook = (\n  query: AzureMonitorQuery,\n  datasource: Datasource,\n  onChange: OnChangeFn\n) => MetricMetadata;\n\nexport interface MetricMetadata {\n  aggOptions: AzureMonitorOption[];\n  timeGrains: AzureMonitorOption[];\n  dimensions: AzureMonitorOption[];\n  isLoading: boolean;\n\n  // These two properties are only used within the hook, and not elsewhere\n  supportedAggTypes: string[];\n  primaryAggType: string | undefined;\n}\n\ntype OnChangeFn = (newQuery: AzureMonitorQuery) => void;\n\nexport const useMetricNamespaces: DataHook = (query, datasource, onChange, setError) => {\n  const { metricNamespace, resourceUri } = query.azureMonitor ?? {};\n\n  const metricNamespaces = useAsyncState(\n    async () => {\n      if (!resourceUri) {\n        return;\n      }\n\n      const results = await datasource.azureMonitorDatasource.getMetricNamespaces({ resourceUri });\n      const options = formatOptions(results, metricNamespace);\n\n      // Do some cleanup of the query state if need be\n      if (!metricNamespace && options.length) {\n        onChange(setMetricNamespace(query, options[0].value));\n      }\n\n      return options;\n    },\n    setError,\n    [resourceUri]\n  );\n\n  return metricNamespaces;\n};\n\nexport const useMetricNames: DataHook = (query, datasource, onChange, setError) => {\n  const { metricNamespace, metricName, resourceUri } = query.azureMonitor ?? {};\n\n  return useAsyncState(\n    async () => {\n      if (!(metricNamespace && resourceUri)) {\n        return;\n      }\n\n      const results = await datasource.azureMonitorDatasource.getMetricNames({ resourceUri, metricNamespace });\n      const options = formatOptions(results, metricName);\n\n      return options;\n    },\n    setError,\n    [resourceUri, metricNamespace]\n  );\n};\n\nconst defaultMetricMetadata: MetricMetadata = {\n  aggOptions: [],\n  timeGrains: [],\n  dimensions: [],\n  isLoading: false,\n  supportedAggTypes: [],\n  primaryAggType: undefined,\n};\n\nexport const useMetricMetadata = (query: AzureMonitorQuery, datasource: Datasource, onChange: OnChangeFn) => {\n  const [metricMetadata, setMetricMetadata] = useState<MetricMetadata>(defaultMetricMetadata);\n\n  const { resourceUri, metricNamespace, metricName, aggregation, timeGrain } = query.azureMonitor ?? {};\n\n  // Fetch new metric metadata when the fields change\n  useEffect(() => {\n    if (!(resourceUri && metricNamespace && metricName)) {\n      setMetricMetadata(defaultMetricMetadata);\n      return;\n    }\n\n    datasource.azureMonitorDatasource\n      .getMetricMetadata({ resourceUri, metricNamespace, metricName })\n      .then((metadata) => {\n        // TODO: Move the aggregationTypes and timeGrain defaults into `getMetricMetadata`\n        const aggregations = (metadata.supportedAggTypes || [metadata.primaryAggType]).map((v) => ({\n          label: v,\n          value: v,\n        }));\n\n        setMetricMetadata({\n          aggOptions: aggregations,\n          timeGrains: metadata.supportedTimeGrains,\n          dimensions: metadata.dimensions,\n          isLoading: false,\n          supportedAggTypes: metadata.supportedAggTypes ?? [],\n          primaryAggType: metadata.primaryAggType,\n        });\n      });\n  }, [datasource, resourceUri, metricNamespace, metricName]);\n\n  // Update the query state in response to the meta data changing\n  useEffect(() => {\n    const newAggregation = aggregation || metricMetadata.primaryAggType;\n    const newTimeGrain = timeGrain || 'auto';\n\n    if (newAggregation !== aggregation || newTimeGrain !== timeGrain) {\n      onChange({\n        ...query,\n        azureMonitor: {\n          ...query.azureMonitor,\n          aggregation: newAggregation,\n          timeGrain: newTimeGrain,\n          allowedTimeGrainsMs: metricMetadata.timeGrains\n            .filter((timeGrain) => timeGrain.value !== 'auto')\n            .map((timeGrain) =>\n              rangeUtil.intervalToMs(TimegrainConverter.createKbnUnitFromISO8601Duration(timeGrain.value))\n            ),\n        },\n      });\n    }\n  }, [onChange, metricMetadata, aggregation, timeGrain, query]);\n\n  return metricMetadata;\n};\n\nfunction formatOptions(\n  rawResults: Array<{\n    text: string;\n    value: string;\n  }>,\n  selectedValue?: string\n) {\n  const options = rawResults.map(toOption);\n\n  // account for custom values that might have been set in json file like ones crafted with a template variable (ex: \"cloud-datasource-resource-$Environment\")\n  if (selectedValue && !options.find((option) => option.value === selectedValue.toLowerCase())) {\n    options.push({ label: selectedValue, value: selectedValue });\n  }\n\n  return options;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}