{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PanelEvents } from '@grafana/data';\nimport { QueryCtrl } from 'app/plugins/sdk';\nconst defaultQuery = `SELECT\n  $__timeEpoch(<time_column>),\n  <value column> as value,\n  <series name column> as metric\nFROM\n  <table name>\nWHERE\n  $__timeFilter(time_column)\nORDER BY\n  <time_column> ASC`;\nexport class MssqlQueryCtrl extends QueryCtrl {\n  /** @ngInject */\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    _defineProperty(this, \"formats\", void 0);\n\n    _defineProperty(this, \"lastQueryMeta\", void 0);\n\n    _defineProperty(this, \"lastQueryError\", void 0);\n\n    _defineProperty(this, \"showHelp\", false);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [{\n      text: 'Time series',\n      value: 'time_series'\n    }, {\n      text: 'Table',\n      value: 'table'\n    }];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList) {\n    var _dataList$;\n\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = (_dataList$ = dataList[0]) === null || _dataList$ === void 0 ? void 0 : _dataList$.meta;\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n}\nMssqlQueryCtrl.$inject = [\"$scope\", \"$injector\"];\n\n_defineProperty(MssqlQueryCtrl, \"templateUrl\", 'partials/query.editor.html');","map":{"version":3,"names":["PanelEvents","QueryCtrl","defaultQuery","MssqlQueryCtrl","constructor","$scope","$injector","target","format","alias","formats","text","value","rawSql","panelCtrl","panel","type","events","on","dataReceived","onDataReceived","bind","dataError","onDataError","dataList","lastQueryError","undefined","lastQueryMeta","meta","err","data","results","queryRes","refId","error"],"sources":["/home/soula/grafana/public/app/plugins/datasource/mssql/query_ctrl.ts"],"sourcesContent":["import { auto } from 'angular';\n\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nimport { MssqlQuery } from './types';\n\nconst defaultQuery = `SELECT\n  $__timeEpoch(<time_column>),\n  <value column> as value,\n  <series name column> as metric\nFROM\n  <table name>\nWHERE\n  $__timeFilter(time_column)\nORDER BY\n  <time_column> ASC`;\n\nexport class MssqlQueryCtrl extends QueryCtrl<MssqlQuery> {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  lastQueryMeta?: QueryResultMeta;\n  lastQueryError?: string;\n  showHelp = false;\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    super($scope, $injector);\n\n    this.target.format = this.target.format || 'time_series';\n    this.target.alias = '';\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n      } else {\n        this.target.rawSql = defaultQuery;\n      }\n    }\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n"],"mappings":";;AAEA,SAASA,WAAT,QAA6C,eAA7C;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAIA,MAAMC,YAAY,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBATA;AAWA,OAAO,MAAMC,cAAN,SAA6BF,SAA7B,CAAmD;EAQxD;EACAG,WAAW,CAACC,MAAD,EAAcC,SAAd,EAAgD;IACzD,MAAMD,MAAN,EAAcC,SAAd;;IADyD;;IAAA;;IAAA;;IAAA,kCAHhD,KAGgD;;IAGzD,KAAKC,MAAL,CAAYC,MAAZ,GAAqB,KAAKD,MAAL,CAAYC,MAAZ,IAAsB,aAA3C;IACA,KAAKD,MAAL,CAAYE,KAAZ,GAAoB,EAApB;IACA,KAAKC,OAAL,GAAe,CACb;MAAEC,IAAI,EAAE,aAAR;MAAuBC,KAAK,EAAE;IAA9B,CADa,EAEb;MAAED,IAAI,EAAE,OAAR;MAAiBC,KAAK,EAAE;IAAxB,CAFa,CAAf;;IAKA,IAAI,CAAC,KAAKL,MAAL,CAAYM,MAAjB,EAAyB;MACvB;MACA,IAAI,KAAKC,SAAL,CAAeC,KAAf,CAAqBC,IAArB,KAA8B,OAAlC,EAA2C;QACzC,KAAKT,MAAL,CAAYC,MAAZ,GAAqB,OAArB;QACA,KAAKD,MAAL,CAAYM,MAAZ,GAAqB,UAArB;MACD,CAHD,MAGO;QACL,KAAKN,MAAL,CAAYM,MAAZ,GAAqBX,YAArB;MACD;IACF;;IAED,KAAKY,SAAL,CAAeG,MAAf,CAAsBC,EAAtB,CAAyBlB,WAAW,CAACmB,YAArC,EAAmD,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAnD,EAAmFhB,MAAnF;IACA,KAAKS,SAAL,CAAeG,MAAf,CAAsBC,EAAtB,CAAyBlB,WAAW,CAACsB,SAArC,EAAgD,KAAKC,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAhD,EAA6EhB,MAA7E;EACD;;EAEDe,cAAc,CAACI,QAAD,EAAgB;IAAA;;IAC5B,KAAKC,cAAL,GAAsBC,SAAtB;IACA,KAAKC,aAAL,iBAAqBH,QAAQ,CAAC,CAAD,CAA7B,+CAAqB,WAAaI,IAAlC;EACD;;EAEDL,WAAW,CAACM,GAAD,EAAW;IACpB,IAAIA,GAAG,CAACC,IAAJ,IAAYD,GAAG,CAACC,IAAJ,CAASC,OAAzB,EAAkC;MAChC,MAAMC,QAAQ,GAAGH,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiB,KAAKxB,MAAL,CAAY0B,KAA7B,CAAjB;;MACA,IAAID,QAAJ,EAAc;QACZ,KAAKP,cAAL,GAAsBO,QAAQ,CAACE,KAA/B;MACD;IACF;EACF;;AA7CuD;;;gBAA7C/B,c,iBACU,4B"},"metadata":{},"sourceType":"module"}