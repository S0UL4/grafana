{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useCallback, useMemo } from 'react';\nimport { InlineField, InlineFieldRow, Select, useStyles2 } from '@grafana/ui';\nimport { NumberInput } from 'app/core/components/OptionsUI/NumberInput';\nimport { useFieldDisplayNames, useSelectOptions } from '../../../../../packages/grafana-ui/src/components/MatchersUI/utils';\nimport { validateScaleOptions, validateScaleConfig } from '../scale';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst fixedValueOption = {\n  label: 'Fixed value',\n  value: '_____fixed_____'\n};\nexport const ScaleDimensionEditor = props => {\n  const {\n    value,\n    context,\n    onChange,\n    item\n  } = props;\n  const {\n    settings\n  } = item;\n  const styles = useStyles2(getStyles);\n  const fieldName = value === null || value === void 0 ? void 0 : value.field;\n  const isFixed = Boolean(!fieldName);\n  const names = useFieldDisplayNames(context.data);\n  const selectOptions = useSelectOptions(names, fieldName, fixedValueOption);\n  const minMaxStep = useMemo(() => {\n    return validateScaleOptions(settings);\n  }, [settings]); // Validate and update\n\n  const validateAndDoChange = useCallback(v => {\n    // always called with a copy so no need to spread\n    onChange(validateScaleConfig(v, minMaxStep));\n  }, [onChange, minMaxStep]);\n  const onSelectChange = useCallback(selection => {\n    const field = selection.value;\n\n    if (field && field !== fixedValueOption.value) {\n      validateAndDoChange(Object.assign({}, value, {\n        field\n      }));\n    } else {\n      validateAndDoChange(Object.assign({}, value, {\n        field: undefined\n      }));\n    }\n  }, [validateAndDoChange, value]);\n  const onMinChange = useCallback(min => {\n    if (min !== undefined) {\n      validateAndDoChange(Object.assign({}, value, {\n        min\n      }));\n    }\n  }, [validateAndDoChange, value]);\n  const onMaxChange = useCallback(max => {\n    if (max !== undefined) {\n      validateAndDoChange(Object.assign({}, value, {\n        max\n      }));\n    }\n  }, [validateAndDoChange, value]);\n  const onValueChange = useCallback(fixed => {\n    if (fixed !== undefined) {\n      validateAndDoChange(Object.assign({}, value, {\n        fixed\n      }));\n    }\n  }, [validateAndDoChange, value]);\n  const val = value !== null && value !== void 0 ? value : {};\n  const selectedOption = isFixed ? fixedValueOption : selectOptions.find(v => v.value === fieldName);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsx(Select, {\n        value: selectedOption,\n        options: selectOptions,\n        onChange: onSelectChange,\n        noOptionsMessage: \"No fields found\"\n      })\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.range,\n      children: [isFixed && /*#__PURE__*/_jsx(InlineFieldRow, {\n        children: /*#__PURE__*/_jsx(InlineField, {\n          label: \"Value\",\n          labelWidth: 8,\n          grow: true,\n          children: /*#__PURE__*/_jsx(NumberInput, Object.assign({\n            value: val.fixed\n          }, minMaxStep, {\n            onChange: onValueChange\n          }))\n        })\n      }), !isFixed && !minMaxStep.hideRange && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n          children: /*#__PURE__*/_jsx(InlineField, {\n            label: \"Min\",\n            labelWidth: 8,\n            grow: true,\n            children: /*#__PURE__*/_jsx(NumberInput, Object.assign({\n              value: val.min\n            }, minMaxStep, {\n              onChange: onMinChange\n            }))\n          })\n        }), /*#__PURE__*/_jsx(InlineFieldRow, {\n          children: /*#__PURE__*/_jsx(InlineField, {\n            label: \"Max\",\n            labelWidth: 8,\n            grow: true,\n            children: /*#__PURE__*/_jsx(NumberInput, Object.assign({\n              value: val.max\n            }, minMaxStep, {\n              onChange: onMaxChange\n            }))\n          })\n        })]\n      })]\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  range: css`\n    padding-top: 8px;\n  `\n});","map":{"version":3,"names":["css","React","useCallback","useMemo","InlineField","InlineFieldRow","Select","useStyles2","NumberInput","useFieldDisplayNames","useSelectOptions","validateScaleOptions","validateScaleConfig","fixedValueOption","label","value","ScaleDimensionEditor","props","context","onChange","item","settings","styles","getStyles","fieldName","field","isFixed","Boolean","names","data","selectOptions","minMaxStep","validateAndDoChange","v","onSelectChange","selection","undefined","onMinChange","min","onMaxChange","max","onValueChange","fixed","val","selectedOption","find","range","hideRange","theme"],"sources":["/home/soula/grafana/public/app/features/dimensions/editors/ScaleDimensionEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useCallback, useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, StandardEditorProps } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select, useStyles2 } from '@grafana/ui';\nimport { NumberInput } from 'app/core/components/OptionsUI/NumberInput';\n\nimport {\n  useFieldDisplayNames,\n  useSelectOptions,\n} from '../../../../../packages/grafana-ui/src/components/MatchersUI/utils';\nimport { validateScaleOptions, validateScaleConfig } from '../scale';\nimport { ScaleDimensionConfig, ScaleDimensionOptions } from '../types';\n\nconst fixedValueOption: SelectableValue<string> = {\n  label: 'Fixed value',\n  value: '_____fixed_____',\n};\n\nexport const ScaleDimensionEditor: FC<StandardEditorProps<ScaleDimensionConfig, ScaleDimensionOptions, any>> = (\n  props\n) => {\n  const { value, context, onChange, item } = props;\n  const { settings } = item;\n  const styles = useStyles2(getStyles);\n\n  const fieldName = value?.field;\n  const isFixed = Boolean(!fieldName);\n  const names = useFieldDisplayNames(context.data);\n  const selectOptions = useSelectOptions(names, fieldName, fixedValueOption);\n  const minMaxStep = useMemo(() => {\n    return validateScaleOptions(settings);\n  }, [settings]);\n\n  // Validate and update\n  const validateAndDoChange = useCallback(\n    (v: ScaleDimensionConfig) => {\n      // always called with a copy so no need to spread\n      onChange(validateScaleConfig(v, minMaxStep));\n    },\n    [onChange, minMaxStep]\n  );\n\n  const onSelectChange = useCallback(\n    (selection: SelectableValue<string>) => {\n      const field = selection.value;\n      if (field && field !== fixedValueOption.value) {\n        validateAndDoChange({\n          ...value,\n          field,\n        });\n      } else {\n        validateAndDoChange({\n          ...value,\n          field: undefined,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const onMinChange = useCallback(\n    (min?: number) => {\n      if (min !== undefined) {\n        validateAndDoChange({\n          ...value,\n          min,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const onMaxChange = useCallback(\n    (max?: number) => {\n      if (max !== undefined) {\n        validateAndDoChange({\n          ...value,\n          max,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const onValueChange = useCallback(\n    (fixed?: number) => {\n      if (fixed !== undefined) {\n        validateAndDoChange({\n          ...value,\n          fixed,\n        });\n      }\n    },\n    [validateAndDoChange, value]\n  );\n\n  const val = value ?? {};\n  const selectedOption = isFixed ? fixedValueOption : selectOptions.find((v) => v.value === fieldName);\n  return (\n    <>\n      <div>\n        <Select\n          value={selectedOption}\n          options={selectOptions}\n          onChange={onSelectChange}\n          noOptionsMessage=\"No fields found\"\n        />\n      </div>\n      <div className={styles.range}>\n        {isFixed && (\n          <InlineFieldRow>\n            <InlineField label=\"Value\" labelWidth={8} grow={true}>\n              <NumberInput value={val.fixed} {...minMaxStep} onChange={onValueChange} />\n            </InlineField>\n          </InlineFieldRow>\n        )}\n        {!isFixed && !minMaxStep.hideRange && (\n          <>\n            <InlineFieldRow>\n              <InlineField label=\"Min\" labelWidth={8} grow={true}>\n                <NumberInput value={val.min} {...minMaxStep} onChange={onMinChange} />\n              </InlineField>\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <InlineField label=\"Max\" labelWidth={8} grow={true}>\n                <NumberInput value={val.max} {...minMaxStep} onChange={onMaxChange} />\n              </InlineField>\n            </InlineFieldRow>\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  range: css`\n    padding-top: 8px;\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAoBC,WAApB,EAAiCC,OAAjC,QAAgD,OAAhD;AAGA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,MAAtC,EAA8CC,UAA9C,QAAgE,aAAhE;AACA,SAASC,WAAT,QAA4B,2CAA5B;AAEA,SACEC,oBADF,EAEEC,gBAFF,QAGO,oEAHP;AAIA,SAASC,oBAAT,EAA+BC,mBAA/B,QAA0D,UAA1D;;;;AAGA,MAAMC,gBAAyC,GAAG;EAChDC,KAAK,EAAE,aADyC;EAEhDC,KAAK,EAAE;AAFyC,CAAlD;AAKA,OAAO,MAAMC,oBAA+F,GAC1GC,KAD6G,IAE1G;EACH,MAAM;IAAEF,KAAF;IAASG,OAAT;IAAkBC,QAAlB;IAA4BC;EAA5B,IAAqCH,KAA3C;EACA,MAAM;IAAEI;EAAF,IAAeD,IAArB;EACA,MAAME,MAAM,GAAGf,UAAU,CAACgB,SAAD,CAAzB;EAEA,MAAMC,SAAS,GAAGT,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEU,KAAzB;EACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,CAACH,SAAF,CAAvB;EACA,MAAMI,KAAK,GAAGnB,oBAAoB,CAACS,OAAO,CAACW,IAAT,CAAlC;EACA,MAAMC,aAAa,GAAGpB,gBAAgB,CAACkB,KAAD,EAAQJ,SAAR,EAAmBX,gBAAnB,CAAtC;EACA,MAAMkB,UAAU,GAAG5B,OAAO,CAAC,MAAM;IAC/B,OAAOQ,oBAAoB,CAACU,QAAD,CAA3B;EACD,CAFyB,EAEvB,CAACA,QAAD,CAFuB,CAA1B,CATG,CAaH;;EACA,MAAMW,mBAAmB,GAAG9B,WAAW,CACpC+B,CAAD,IAA6B;IAC3B;IACAd,QAAQ,CAACP,mBAAmB,CAACqB,CAAD,EAAIF,UAAJ,CAApB,CAAR;EACD,CAJoC,EAKrC,CAACZ,QAAD,EAAWY,UAAX,CALqC,CAAvC;EAQA,MAAMG,cAAc,GAAGhC,WAAW,CAC/BiC,SAAD,IAAwC;IACtC,MAAMV,KAAK,GAAGU,SAAS,CAACpB,KAAxB;;IACA,IAAIU,KAAK,IAAIA,KAAK,KAAKZ,gBAAgB,CAACE,KAAxC,EAA+C;MAC7CiB,mBAAmB,mBACdjB,KADc;QAEjBU;MAFiB,GAAnB;IAID,CALD,MAKO;MACLO,mBAAmB,mBACdjB,KADc;QAEjBU,KAAK,EAAEW;MAFU,GAAnB;IAID;EACF,CAd+B,EAehC,CAACJ,mBAAD,EAAsBjB,KAAtB,CAfgC,CAAlC;EAkBA,MAAMsB,WAAW,GAAGnC,WAAW,CAC5BoC,GAAD,IAAkB;IAChB,IAAIA,GAAG,KAAKF,SAAZ,EAAuB;MACrBJ,mBAAmB,mBACdjB,KADc;QAEjBuB;MAFiB,GAAnB;IAID;EACF,CAR4B,EAS7B,CAACN,mBAAD,EAAsBjB,KAAtB,CAT6B,CAA/B;EAYA,MAAMwB,WAAW,GAAGrC,WAAW,CAC5BsC,GAAD,IAAkB;IAChB,IAAIA,GAAG,KAAKJ,SAAZ,EAAuB;MACrBJ,mBAAmB,mBACdjB,KADc;QAEjByB;MAFiB,GAAnB;IAID;EACF,CAR4B,EAS7B,CAACR,mBAAD,EAAsBjB,KAAtB,CAT6B,CAA/B;EAYA,MAAM0B,aAAa,GAAGvC,WAAW,CAC9BwC,KAAD,IAAoB;IAClB,IAAIA,KAAK,KAAKN,SAAd,EAAyB;MACvBJ,mBAAmB,mBACdjB,KADc;QAEjB2B;MAFiB,GAAnB;IAID;EACF,CAR8B,EAS/B,CAACV,mBAAD,EAAsBjB,KAAtB,CAT+B,CAAjC;EAYA,MAAM4B,GAAG,GAAG5B,KAAH,aAAGA,KAAH,cAAGA,KAAH,GAAY,EAArB;EACA,MAAM6B,cAAc,GAAGlB,OAAO,GAAGb,gBAAH,GAAsBiB,aAAa,CAACe,IAAd,CAAoBZ,CAAD,IAAOA,CAAC,CAAClB,KAAF,KAAYS,SAAtC,CAApD;EACA,oBACE;IAAA,wBACE;MAAA,uBACE,KAAC,MAAD;QACE,KAAK,EAAEoB,cADT;QAEE,OAAO,EAAEd,aAFX;QAGE,QAAQ,EAAEI,cAHZ;QAIE,gBAAgB,EAAC;MAJnB;IADF,EADF,eASE;MAAK,SAAS,EAAEZ,MAAM,CAACwB,KAAvB;MAAA,WACGpB,OAAO,iBACN,KAAC,cAAD;QAAA,uBACE,KAAC,WAAD;UAAa,KAAK,EAAC,OAAnB;UAA2B,UAAU,EAAE,CAAvC;UAA0C,IAAI,EAAE,IAAhD;UAAA,uBACE,KAAC,WAAD;YAAa,KAAK,EAAEiB,GAAG,CAACD;UAAxB,GAAmCX,UAAnC;YAA+C,QAAQ,EAAEU;UAAzD;QADF;MADF,EAFJ,EAQG,CAACf,OAAD,IAAY,CAACK,UAAU,CAACgB,SAAxB,iBACC;QAAA,wBACE,KAAC,cAAD;UAAA,uBACE,KAAC,WAAD;YAAa,KAAK,EAAC,KAAnB;YAAyB,UAAU,EAAE,CAArC;YAAwC,IAAI,EAAE,IAA9C;YAAA,uBACE,KAAC,WAAD;cAAa,KAAK,EAAEJ,GAAG,CAACL;YAAxB,GAAiCP,UAAjC;cAA6C,QAAQ,EAAEM;YAAvD;UADF;QADF,EADF,eAME,KAAC,cAAD;UAAA,uBACE,KAAC,WAAD;YAAa,KAAK,EAAC,KAAnB;YAAyB,UAAU,EAAE,CAArC;YAAwC,IAAI,EAAE,IAA9C;YAAA,uBACE,KAAC,WAAD;cAAa,KAAK,EAAEM,GAAG,CAACH;YAAxB,GAAiCT,UAAjC;cAA6C,QAAQ,EAAEQ;YAAvD;UADF;QADF,EANF;MAAA,EATJ;IAAA,EATF;EAAA,EADF;AAmCD,CAnHM;;AAqHP,MAAMhB,SAAS,GAAIyB,KAAD,KAA2B;EAC3CF,KAAK,EAAE9C,GAAI;AACb;AACA;AAH6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}