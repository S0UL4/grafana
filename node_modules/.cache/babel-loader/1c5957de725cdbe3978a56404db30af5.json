{"ast":null,"code":"const _excluded = [\"onChange\", \"ref\"];\n\nvar _Card$Heading, _Card$Meta;\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css } from '@emotion/css';\nimport { last } from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Alert, Card, Field, InputControl, RadioButtonList, useStyles2 } from '@grafana/ui';\nimport { ExpressionDatasourceUID } from 'app/features/expressions/ExpressionDatasource';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const ConditionField = ({\n  existing = false\n}) => {\n  var _errors$condition, _errors$condition2;\n\n  const {\n    watch,\n    setValue,\n    formState: {\n      errors\n    }\n  } = useFormContext();\n  const queries = watch('queries');\n  const condition = watch('condition');\n  const expressions = useMemo(() => {\n    return queries.filter(query => query.datasourceUid === ExpressionDatasourceUID);\n  }, [queries]);\n  const options = useMemo(() => queries.filter(q => !!q.refId).map(q => ({\n    value: q.refId,\n    label: `${q.refId} - ${expressions.includes(q) ? 'expression' : 'query'}`\n  })), [queries, expressions]); // automatically use the last expression when new expressions have been added\n\n  useEffect(() => {\n    const lastExpression = last(expressions);\n\n    if (lastExpression && !existing) {\n      setValue('condition', lastExpression.refId, {\n        shouldValidate: true\n      });\n    }\n  }, [expressions, setValue, existing]); // reset condition if option no longer exists or if it is unset, but there are options available\n\n  useEffect(() => {\n    const lastExpression = last(expressions);\n    const conditionExists = options.find(({\n      value\n    }) => value === condition);\n\n    if (condition && !conditionExists) {\n      var _lastExpression$refId;\n\n      setValue('condition', (_lastExpression$refId = lastExpression === null || lastExpression === void 0 ? void 0 : lastExpression.refId) !== null && _lastExpression$refId !== void 0 ? _lastExpression$refId : null);\n    } else if (!condition && lastExpression) {\n      setValue('condition', lastExpression.refId, {\n        shouldValidate: true\n      });\n    }\n  }, [condition, expressions, options, setValue]);\n  const styles = useStyles2(getStyles);\n  return options.length ? /*#__PURE__*/_jsxs(Card, {\n    className: styles.container,\n    children: [_Card$Heading || (_Card$Heading = /*#__PURE__*/_jsx(Card.Heading, {\n      children: \"Set alert condition\"\n    })), _Card$Meta || (_Card$Meta = /*#__PURE__*/_jsx(Card.Meta, {\n      children: \"Select one of your queries or expressions set above that contains your alert condition.\"\n    })), /*#__PURE__*/_jsx(Card.Actions, {\n      children: /*#__PURE__*/_jsx(Field, {\n        error: (_errors$condition = errors.condition) === null || _errors$condition === void 0 ? void 0 : _errors$condition.message,\n        invalid: !!((_errors$condition2 = errors.condition) !== null && _errors$condition2 !== void 0 && _errors$condition2.message),\n        children: /*#__PURE__*/_jsx(InputControl, {\n          name: \"condition\",\n          render: _ref => {\n            let {\n              field: {\n                onChange\n              }\n            } = _ref,\n                field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n            return /*#__PURE__*/_jsx(RadioButtonList, Object.assign({\n              options: options,\n              onChange: onChange\n            }, field));\n          },\n          rules: {\n            required: {\n              value: true,\n              message: 'Please select the condition to alert on'\n            }\n          }\n        })\n      })\n    })]\n  }) : /*#__PURE__*/_jsx(Alert, {\n    title: \"No queries or expressions have been configured\",\n    severity: \"warning\",\n    className: styles.container,\n    children: \"Create at least one query or expression to be alerted on\"\n  });\n};\n\nconst getStyles = theme => ({\n  container: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `\n});","map":{"version":3,"names":["css","last","React","useEffect","useMemo","useFormContext","Alert","Card","Field","InputControl","RadioButtonList","useStyles2","ExpressionDatasourceUID","ConditionField","existing","watch","setValue","formState","errors","queries","condition","expressions","filter","query","datasourceUid","options","q","refId","map","value","label","includes","lastExpression","shouldValidate","conditionExists","find","styles","getStyles","length","container","message","field","onChange","required","theme","breakpoints","values","sm"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/ConditionField.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { last } from 'lodash';\nimport React, { FC, useEffect, useMemo } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Alert, Card, Field, InputControl, RadioButtonList, useStyles2 } from '@grafana/ui';\nimport { ExpressionDatasourceUID } from 'app/features/expressions/ExpressionDatasource';\n\nimport { RuleFormValues } from '../../types/rule-form';\n\ninterface Props {\n  existing?: boolean;\n}\n\nexport const ConditionField: FC<Props> = ({ existing = false }) => {\n  const {\n    watch,\n    setValue,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const queries = watch('queries');\n  const condition = watch('condition');\n\n  const expressions = useMemo(() => {\n    return queries.filter((query) => query.datasourceUid === ExpressionDatasourceUID);\n  }, [queries]);\n\n  const options = useMemo(\n    () =>\n      queries\n        .filter((q) => !!q.refId)\n        .map<SelectableValue<string>>((q) => ({\n          value: q.refId,\n          label: `${q.refId} - ${expressions.includes(q) ? 'expression' : 'query'}`,\n        })),\n    [queries, expressions]\n  );\n\n  // automatically use the last expression when new expressions have been added\n  useEffect(() => {\n    const lastExpression = last(expressions);\n    if (lastExpression && !existing) {\n      setValue('condition', lastExpression.refId, { shouldValidate: true });\n    }\n  }, [expressions, setValue, existing]);\n\n  // reset condition if option no longer exists or if it is unset, but there are options available\n  useEffect(() => {\n    const lastExpression = last(expressions);\n    const conditionExists = options.find(({ value }) => value === condition);\n\n    if (condition && !conditionExists) {\n      setValue('condition', lastExpression?.refId ?? null);\n    } else if (!condition && lastExpression) {\n      setValue('condition', lastExpression.refId, { shouldValidate: true });\n    }\n  }, [condition, expressions, options, setValue]);\n\n  const styles = useStyles2(getStyles);\n\n  return options.length ? (\n    <Card className={styles.container}>\n      <Card.Heading>Set alert condition</Card.Heading>\n      <Card.Meta>Select one of your queries or expressions set above that contains your alert condition.</Card.Meta>\n      <Card.Actions>\n        <Field error={errors.condition?.message} invalid={!!errors.condition?.message}>\n          <InputControl\n            name=\"condition\"\n            render={({ field: { onChange, ref, ...field } }) => (\n              <RadioButtonList options={options} onChange={onChange} {...field} />\n            )}\n            rules={{\n              required: {\n                value: true,\n                message: 'Please select the condition to alert on',\n              },\n            }}\n          />\n        </Field>\n      </Card.Actions>\n    </Card>\n  ) : (\n    <Alert title=\"No queries or expressions have been configured\" severity=\"warning\" className={styles.container}>\n      Create at least one query or expression to be alerted on\n    </Alert>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: ${theme.breakpoints.values.sm}px;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}