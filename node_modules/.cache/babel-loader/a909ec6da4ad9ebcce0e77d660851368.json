{"ast":null,"code":"import { get as lodashGet } from 'lodash';\nimport React from 'react';\nimport { isNestedPanelOptions, PanelOptionsEditorBuilder } from '@grafana/data/src/utils/OptionsUIBuilders';\nimport { getDataLinksVariableSuggestions } from 'app/features/panel/panellinks/link_srv';\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { getOptionOverrides } from './state/getOptionOverrides';\nimport { setOptionImmutably, updateDefaultFieldConfigValue } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getStandardEditorContext({\n  data,\n  replaceVariables,\n  options,\n  eventBus,\n  instanceState\n}) {\n  var _data$series;\n\n  const dataSeries = (_data$series = data === null || data === void 0 ? void 0 : data.series) !== null && _data$series !== void 0 ? _data$series : [];\n  const context = {\n    data: dataSeries,\n    replaceVariables,\n    options,\n    eventBus,\n    getSuggestions: scope => getDataLinksVariableSuggestions(dataSeries, scope),\n    instanceState\n  };\n  return context;\n}\nexport function getVisualizationOptions(props) {\n  const {\n    plugin,\n    panel,\n    onPanelOptionsChanged,\n    onFieldConfigsChange,\n    data,\n    dashboard,\n    instanceState\n  } = props;\n  const currentOptions = panel.getOptions();\n  const currentFieldConfig = panel.fieldConfig;\n  const categoryIndex = {};\n  const context = getStandardEditorContext({\n    data,\n    replaceVariables: panel.replaceVariables,\n    options: currentOptions,\n    eventBus: dashboard.events,\n    instanceState\n  });\n\n  const getOptionsPaneCategory = categoryNames => {\n    var _ref;\n\n    const categoryName = (_ref = categoryNames && categoryNames[0]) !== null && _ref !== void 0 ? _ref : `${plugin.meta.name}`;\n    const category = categoryIndex[categoryName];\n\n    if (category) {\n      return category;\n    }\n\n    return categoryIndex[categoryName] = new OptionsPaneCategoryDescriptor({\n      title: categoryName,\n      id: categoryName\n    });\n  };\n\n  const access = {\n    getValue: path => lodashGet(currentOptions, path),\n    onChange: (path, value) => {\n      const newOptions = setOptionImmutably(currentOptions, path, value);\n      onPanelOptionsChanged(newOptions);\n    }\n  }; // Load the options into categories\n\n  fillOptionsPaneItems(plugin.getPanelOptionsSupplier(), access, getOptionsPaneCategory, context);\n  /**\n   * Field options\n   */\n\n  for (const fieldOption of plugin.fieldConfigRegistry.list()) {\n    if (fieldOption.isCustom && fieldOption.showIf && !fieldOption.showIf(currentFieldConfig.defaults.custom, data === null || data === void 0 ? void 0 : data.series)) {\n      continue;\n    }\n\n    if (fieldOption.hideFromDefaults) {\n      continue;\n    }\n\n    const category = getOptionsPaneCategory(fieldOption.category);\n    const Editor = fieldOption.editor;\n    const defaults = currentFieldConfig.defaults;\n    const value = fieldOption.isCustom ? defaults.custom ? lodashGet(defaults.custom, fieldOption.path) : undefined : lodashGet(defaults, fieldOption.path);\n\n    if (fieldOption.getItemsCount) {\n      category.props.itemsCount = fieldOption.getItemsCount(value);\n    }\n\n    category.addItem(new OptionsPaneItemDescriptor({\n      title: fieldOption.name,\n      description: fieldOption.description,\n      overrides: getOptionOverrides(fieldOption, currentFieldConfig, data === null || data === void 0 ? void 0 : data.series),\n      render: function renderEditor() {\n        const onChange = v => {\n          onFieldConfigsChange(updateDefaultFieldConfigValue(currentFieldConfig, fieldOption.path, v, fieldOption.isCustom));\n        };\n\n        return /*#__PURE__*/_jsx(Editor, {\n          value: value,\n          onChange: onChange,\n          item: fieldOption,\n          context: context,\n          id: fieldOption.id\n        });\n      }\n    }));\n  }\n\n  return Object.values(categoryIndex);\n}\n/**\n * This will iterate all options panes and add register them with the configured categories\n *\n * @internal\n */\n\nexport function fillOptionsPaneItems(supplier, access, getOptionsPaneCategory, context, parentCategory) {\n  const builder = new PanelOptionsEditorBuilder();\n  supplier(builder, context);\n\n  for (const pluginOption of builder.getItems()) {\n    var _pluginOption$categor, _pluginOption$categor2;\n\n    if (pluginOption.showIf && !pluginOption.showIf(context.options, context.data)) {\n      continue;\n    }\n\n    let category = parentCategory;\n\n    if (!category) {\n      category = getOptionsPaneCategory(pluginOption.category);\n    } else if ((_pluginOption$categor = pluginOption.category) !== null && _pluginOption$categor !== void 0 && (_pluginOption$categor2 = _pluginOption$categor[0]) !== null && _pluginOption$categor2 !== void 0 && _pluginOption$categor2.length) {\n      category = category.getCategory(pluginOption.category[0]);\n    } // Nested options get passed up one level\n\n\n    if (isNestedPanelOptions(pluginOption)) {\n      const subAccess = pluginOption.getNestedValueAccess(access);\n      const subContext = subAccess.getContext ? subAccess.getContext(context) : Object.assign({}, context, {\n        options: access.getValue(pluginOption.path)\n      });\n      fillOptionsPaneItems(pluginOption.getBuilder(), subAccess, getOptionsPaneCategory, subContext, category // parent category\n      );\n      continue;\n    }\n\n    const Editor = pluginOption.editor;\n    category.addItem(new OptionsPaneItemDescriptor({\n      title: pluginOption.name,\n      description: pluginOption.description,\n      render: function renderEditor() {\n        return /*#__PURE__*/_jsx(Editor, {\n          value: access.getValue(pluginOption.path),\n          onChange: value => {\n            access.onChange(pluginOption.path, value);\n          },\n          item: pluginOption,\n          context: context,\n          id: pluginOption.id\n        });\n      }\n    }));\n  }\n}","map":{"version":3,"names":["get","lodashGet","React","isNestedPanelOptions","PanelOptionsEditorBuilder","getDataLinksVariableSuggestions","OptionsPaneCategoryDescriptor","OptionsPaneItemDescriptor","getOptionOverrides","setOptionImmutably","updateDefaultFieldConfigValue","getStandardEditorContext","data","replaceVariables","options","eventBus","instanceState","dataSeries","series","context","getSuggestions","scope","getVisualizationOptions","props","plugin","panel","onPanelOptionsChanged","onFieldConfigsChange","dashboard","currentOptions","getOptions","currentFieldConfig","fieldConfig","categoryIndex","events","getOptionsPaneCategory","categoryNames","categoryName","meta","name","category","title","id","access","getValue","path","onChange","value","newOptions","fillOptionsPaneItems","getPanelOptionsSupplier","fieldOption","fieldConfigRegistry","list","isCustom","showIf","defaults","custom","hideFromDefaults","Editor","editor","undefined","getItemsCount","itemsCount","addItem","description","overrides","render","renderEditor","v","Object","values","supplier","parentCategory","builder","pluginOption","getItems","length","getCategory","subAccess","getNestedValueAccess","subContext","getContext","getBuilder"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/PanelEditor/getVisualizationOptions.tsx"],"sourcesContent":["import { get as lodashGet } from 'lodash';\nimport React from 'react';\n\nimport {\n  EventBus,\n  InterpolateFunction,\n  PanelData,\n  StandardEditorContext,\n  VariableSuggestionsScope,\n} from '@grafana/data';\nimport { PanelOptionsSupplier } from '@grafana/data/src/panel/PanelPlugin';\nimport {\n  isNestedPanelOptions,\n  NestedValueAccess,\n  PanelOptionsEditorBuilder,\n} from '@grafana/data/src/utils/OptionsUIBuilders';\nimport { getDataLinksVariableSuggestions } from 'app/features/panel/panellinks/link_srv';\n\nimport { OptionsPaneCategoryDescriptor } from './OptionsPaneCategoryDescriptor';\nimport { OptionsPaneItemDescriptor } from './OptionsPaneItemDescriptor';\nimport { getOptionOverrides } from './state/getOptionOverrides';\nimport { OptionPaneRenderProps } from './types';\nimport { setOptionImmutably, updateDefaultFieldConfigValue } from './utils';\n\ntype categoryGetter = (categoryNames?: string[]) => OptionsPaneCategoryDescriptor;\n\ninterface GetStandardEditorContextProps {\n  data: PanelData | undefined;\n  replaceVariables: InterpolateFunction;\n  options: Record<string, unknown>;\n  eventBus: EventBus;\n  instanceState: OptionPaneRenderProps['instanceState'];\n}\n\nexport function getStandardEditorContext({\n  data,\n  replaceVariables,\n  options,\n  eventBus,\n  instanceState,\n}: GetStandardEditorContextProps): StandardEditorContext<unknown, unknown> {\n  const dataSeries = data?.series ?? [];\n\n  const context: StandardEditorContext<unknown, unknown> = {\n    data: dataSeries,\n    replaceVariables,\n    options,\n    eventBus,\n    getSuggestions: (scope?: VariableSuggestionsScope) => getDataLinksVariableSuggestions(dataSeries, scope),\n    instanceState,\n  };\n\n  return context;\n}\n\nexport function getVisualizationOptions(props: OptionPaneRenderProps): OptionsPaneCategoryDescriptor[] {\n  const { plugin, panel, onPanelOptionsChanged, onFieldConfigsChange, data, dashboard, instanceState } = props;\n  const currentOptions = panel.getOptions();\n  const currentFieldConfig = panel.fieldConfig;\n  const categoryIndex: Record<string, OptionsPaneCategoryDescriptor> = {};\n\n  const context = getStandardEditorContext({\n    data,\n    replaceVariables: panel.replaceVariables,\n    options: currentOptions,\n    eventBus: dashboard.events,\n    instanceState,\n  });\n\n  const getOptionsPaneCategory = (categoryNames?: string[]): OptionsPaneCategoryDescriptor => {\n    const categoryName = (categoryNames && categoryNames[0]) ?? `${plugin.meta.name}`;\n    const category = categoryIndex[categoryName];\n\n    if (category) {\n      return category;\n    }\n\n    return (categoryIndex[categoryName] = new OptionsPaneCategoryDescriptor({\n      title: categoryName,\n      id: categoryName,\n    }));\n  };\n\n  const access: NestedValueAccess = {\n    getValue: (path: string) => lodashGet(currentOptions, path),\n    onChange: (path: string, value: any) => {\n      const newOptions = setOptionImmutably(currentOptions, path, value);\n      onPanelOptionsChanged(newOptions);\n    },\n  };\n\n  // Load the options into categories\n  fillOptionsPaneItems(plugin.getPanelOptionsSupplier(), access, getOptionsPaneCategory, context);\n\n  /**\n   * Field options\n   */\n  for (const fieldOption of plugin.fieldConfigRegistry.list()) {\n    if (\n      fieldOption.isCustom &&\n      fieldOption.showIf &&\n      !fieldOption.showIf(currentFieldConfig.defaults.custom, data?.series)\n    ) {\n      continue;\n    }\n\n    if (fieldOption.hideFromDefaults) {\n      continue;\n    }\n\n    const category = getOptionsPaneCategory(fieldOption.category);\n    const Editor = fieldOption.editor;\n\n    const defaults = currentFieldConfig.defaults;\n    const value = fieldOption.isCustom\n      ? defaults.custom\n        ? lodashGet(defaults.custom, fieldOption.path)\n        : undefined\n      : lodashGet(defaults, fieldOption.path);\n\n    if (fieldOption.getItemsCount) {\n      category.props.itemsCount = fieldOption.getItemsCount(value);\n    }\n\n    category.addItem(\n      new OptionsPaneItemDescriptor({\n        title: fieldOption.name,\n        description: fieldOption.description,\n        overrides: getOptionOverrides(fieldOption, currentFieldConfig, data?.series),\n        render: function renderEditor() {\n          const onChange = (v: any) => {\n            onFieldConfigsChange(\n              updateDefaultFieldConfigValue(currentFieldConfig, fieldOption.path, v, fieldOption.isCustom)\n            );\n          };\n\n          return <Editor value={value} onChange={onChange} item={fieldOption} context={context} id={fieldOption.id} />;\n        },\n      })\n    );\n  }\n\n  return Object.values(categoryIndex);\n}\n\n/**\n * This will iterate all options panes and add register them with the configured categories\n *\n * @internal\n */\nexport function fillOptionsPaneItems(\n  supplier: PanelOptionsSupplier<any>,\n  access: NestedValueAccess,\n  getOptionsPaneCategory: categoryGetter,\n  context: StandardEditorContext<any, any>,\n  parentCategory?: OptionsPaneCategoryDescriptor\n) {\n  const builder = new PanelOptionsEditorBuilder<any>();\n  supplier(builder, context);\n\n  for (const pluginOption of builder.getItems()) {\n    if (pluginOption.showIf && !pluginOption.showIf(context.options, context.data)) {\n      continue;\n    }\n\n    let category = parentCategory;\n    if (!category) {\n      category = getOptionsPaneCategory(pluginOption.category);\n    } else if (pluginOption.category?.[0]?.length) {\n      category = category.getCategory(pluginOption.category[0]);\n    }\n\n    // Nested options get passed up one level\n    if (isNestedPanelOptions(pluginOption)) {\n      const subAccess = pluginOption.getNestedValueAccess(access);\n      const subContext = subAccess.getContext\n        ? subAccess.getContext(context)\n        : { ...context, options: access.getValue(pluginOption.path) };\n\n      fillOptionsPaneItems(\n        pluginOption.getBuilder(),\n        subAccess,\n        getOptionsPaneCategory,\n        subContext,\n        category // parent category\n      );\n      continue;\n    }\n\n    const Editor = pluginOption.editor;\n    category.addItem(\n      new OptionsPaneItemDescriptor({\n        title: pluginOption.name,\n        description: pluginOption.description,\n        render: function renderEditor() {\n          return (\n            <Editor\n              value={access.getValue(pluginOption.path)}\n              onChange={(value: any) => {\n                access.onChange(pluginOption.path, value);\n              }}\n              item={pluginOption}\n              context={context}\n              id={pluginOption.id}\n            />\n          );\n        },\n      })\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}