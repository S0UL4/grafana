{"ast":null,"code":"var _thead;\n\nimport { groupBy } from 'lodash';\nimport React, { useMemo } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function MetaInspector({\n  data = []\n}) {\n  const rows = useMemo(() => groupBy(data, 'refId'), [data]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(\"table\", {\n      className: \"filter-table form-inline\",\n      children: [_thead || (_thead = /*#__PURE__*/_jsx(\"thead\", {\n        children: /*#__PURE__*/_jsxs(\"tr\", {\n          children: [/*#__PURE__*/_jsx(\"th\", {\n            children: \"RefId\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"Metric Data Query ID\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"Metric Data Query Expression\"\n          }), /*#__PURE__*/_jsx(\"th\", {\n            children: \"Period\"\n          }), /*#__PURE__*/_jsx(\"th\", {})]\n        })\n      })), Object.entries(rows).map(([refId, frames], idx) => {\n        var _frame$meta, _frame$meta2;\n\n        if (!frames.length) {\n          return null;\n        }\n\n        const frame = frames[0];\n        const custom = (_frame$meta = frame.meta) === null || _frame$meta === void 0 ? void 0 : _frame$meta.custom;\n\n        if (!custom) {\n          return null;\n        }\n\n        return /*#__PURE__*/_jsx(\"tbody\", {\n          children: /*#__PURE__*/_jsxs(\"tr\", {\n            children: [/*#__PURE__*/_jsx(\"td\", {\n              children: refId\n            }), /*#__PURE__*/_jsx(\"td\", {\n              children: custom.id\n            }), /*#__PURE__*/_jsx(\"td\", {\n              children: (_frame$meta2 = frame.meta) === null || _frame$meta2 === void 0 ? void 0 : _frame$meta2.executedQueryString\n            }), /*#__PURE__*/_jsx(\"td\", {\n              children: custom.period\n            })]\n          })\n        }, idx);\n      })]\n    })\n  });\n}","map":{"version":3,"names":["groupBy","React","useMemo","MetaInspector","data","rows","Object","entries","map","refId","frames","idx","length","frame","custom","meta","id","executedQueryString","period"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/MetaInspector.tsx"],"sourcesContent":["import { groupBy } from 'lodash';\nimport React, { useMemo } from 'react';\n\nimport { MetadataInspectorProps } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchQuery, CloudWatchJsonData } from '../types';\n\nexport type Props = MetadataInspectorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport function MetaInspector({ data = [] }: Props) {\n  const rows = useMemo(() => groupBy(data, 'refId'), [data]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>RefId</th>\n            <th>Metric Data Query ID</th>\n            <th>Metric Data Query Expression</th>\n            <th>Period</th>\n            <th />\n          </tr>\n        </thead>\n        {Object.entries(rows).map(([refId, frames], idx) => {\n          if (!frames.length) {\n            return null;\n          }\n\n          const frame = frames[0];\n          const custom = frame.meta?.custom;\n          if (!custom) {\n            return null;\n          }\n\n          return (\n            <tbody key={idx}>\n              <tr>\n                <td>{refId}</td>\n                <td>{custom.id}</td>\n                <td>{frame.meta?.executedQueryString}</td>\n                <td>{custom.period}</td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    </>\n  );\n}\n"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;;;;AASA,OAAO,SAASC,aAAT,CAAuB;EAAEC,IAAI,GAAG;AAAT,CAAvB,EAA6C;EAClD,MAAMC,IAAI,GAAGH,OAAO,CAAC,MAAMF,OAAO,CAACI,IAAD,EAAO,OAAP,CAAd,EAA+B,CAACA,IAAD,CAA/B,CAApB;EAEA,oBACE;IAAA,uBACE;MAAO,SAAS,EAAC,0BAAjB;MAAA,4CACE;QAAA,uBACE;UAAA,wBACE;YAAA;UAAA,EADF,eAEE;YAAA;UAAA,EAFF,eAGE;YAAA;UAAA,EAHF,eAIE;YAAA;UAAA,EAJF,eAKE,cALF;QAAA;MADF,EADF,GAUGE,MAAM,CAACC,OAAP,CAAeF,IAAf,EAAqBG,GAArB,CAAyB,CAAC,CAACC,KAAD,EAAQC,MAAR,CAAD,EAAkBC,GAAlB,KAA0B;QAAA;;QAClD,IAAI,CAACD,MAAM,CAACE,MAAZ,EAAoB;UAClB,OAAO,IAAP;QACD;;QAED,MAAMC,KAAK,GAAGH,MAAM,CAAC,CAAD,CAApB;QACA,MAAMI,MAAM,kBAAGD,KAAK,CAACE,IAAT,gDAAG,YAAYD,MAA3B;;QACA,IAAI,CAACA,MAAL,EAAa;UACX,OAAO,IAAP;QACD;;QAED,oBACE;UAAA,uBACE;YAAA,wBACE;cAAA,UAAKL;YAAL,EADF,eAEE;cAAA,UAAKK,MAAM,CAACE;YAAZ,EAFF,eAGE;cAAA,0BAAKH,KAAK,CAACE,IAAX,iDAAK,aAAYE;YAAjB,EAHF,eAIE;cAAA,UAAKH,MAAM,CAACI;YAAZ,EAJF;UAAA;QADF,GAAYP,GAAZ,CADF;MAUD,CArBA,CAVH;IAAA;EADF,EADF;AAqCD"},"metadata":{},"sourceType":"module"}