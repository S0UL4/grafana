{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Subscription } from 'rxjs';\nimport { getDefaultTimeRange, LoadingState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getAngularLoader, locationService } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { setPanelAngularComponent } from 'app/features/panel/state/reducers';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { isSoloRoute } from '../../../routes/utils';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class PanelChromeAngularUnconnected extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"element\", null);\n\n    _defineProperty(this, \"timeSrv\", getTimeSrv());\n\n    _defineProperty(this, \"scopeProps\", void 0);\n\n    _defineProperty(this, \"subs\", new Subscription());\n\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange()\n      }\n    };\n  }\n\n  componentDidMount() {\n    const {\n      panel\n    } = this.props;\n    this.loadAngularPanel(); // subscribe to data events\n\n    const queryRunner = panel.getQueryRunner(); // we are not displaying any of this data so no need for transforms or field config\n\n    this.subs.add(queryRunner.getData({\n      withTransforms: false,\n      withFieldConfig: false\n    }).subscribe({\n      next: data => this.onPanelDataUpdate(data)\n    }));\n  }\n\n  onPanelDataUpdate(data) {\n    let errorMessage;\n\n    if (data.state === LoadingState.Error) {\n      const {\n        error\n      } = data;\n\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({\n      data,\n      errorMessage\n    });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      plugin,\n      height,\n      width,\n      panel\n    } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.render();\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const {\n      plugin,\n      height\n    } = this.props;\n    const {\n      theme\n    } = config;\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const {\n      plugin,\n      width\n    } = this.props;\n    const {\n      theme\n    } = config;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const {\n      panel,\n      dashboard,\n      setPanelAngularComponent\n    } = this.props; // if we have no element or already have loaded the panel return\n\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: {\n        width: this.getInnerPanelWidth(),\n        height: this.getInnerPanelHeight()\n      }\n    };\n    setPanelAngularComponent({\n      key: panel.key,\n      angularComponent: loader.load(this.element, this.scopeProps, template)\n    });\n  }\n\n  hasOverlayHeader() {\n    const {\n      panel\n    } = this.props;\n    const {\n      data\n    } = this.state; // always show normal header if we have time override\n\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    var _data$alertState;\n\n    const {\n      dashboard,\n      panel,\n      isViewing,\n      isEditing,\n      plugin\n    } = this.props;\n    const {\n      errorMessage,\n      data\n    } = this.state;\n    const {\n      transparent\n    } = panel;\n    const alertState = (_data$alertState = data.alertState) === null || _data$alertState === void 0 ? void 0 : _data$alertState.state;\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': isSoloRoute(locationService.getLocation().pathname),\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      'panel-has-alert': panel.alert !== undefined,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined\n    });\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding\n    });\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: containerClassNames,\n      \"aria-label\": selectors.components.Panels.Panel.containerByTitle(panel.title),\n      children: [/*#__PURE__*/_jsx(PanelHeader, {\n        panel: panel,\n        dashboard: dashboard,\n        title: panel.title,\n        description: panel.description,\n        links: panel.links,\n        error: errorMessage,\n        isViewing: isViewing,\n        isEditing: isEditing,\n        data: data,\n        alertState: alertState\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: panelContentClassNames,\n        children: /*#__PURE__*/_jsx(\"div\", {\n          ref: element => this.element = element,\n          className: \"panel-height-helper\"\n        })\n      })]\n    });\n  }\n\n}\n\nconst mapStateToProps = (state, props) => {\n  var _getPanelStateForMode;\n\n  return {\n    angularComponent: (_getPanelStateForMode = getPanelStateForModel(state, props.panel)) === null || _getPanelStateForMode === void 0 ? void 0 : _getPanelStateForMode.angularComponent\n  };\n};\n\nconst mapDispatchToProps = {\n  setPanelAngularComponent\n};\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);","map":{"version":3,"names":["classNames","React","PureComponent","connect","Subscription","getDefaultTimeRange","LoadingState","selectors","getAngularLoader","locationService","config","PANEL_BORDER","setPanelAngularComponent","getPanelStateForModel","isSoloRoute","getTimeSrv","PanelHeader","PanelChromeAngularUnconnected","constructor","props","state","data","NotStarted","series","timeRange","componentDidMount","panel","loadAngularPanel","queryRunner","getQueryRunner","subs","add","getData","withTransforms","withFieldConfig","subscribe","next","onPanelDataUpdate","errorMessage","Error","error","message","setState","componentWillUnmount","unsubscribe","componentDidUpdate","prevProps","prevState","plugin","height","width","scopeProps","size","getInnerPanelHeight","getInnerPanelWidth","render","theme","headerHeight","hasOverlayHeader","panelHeaderHeight","chromePadding","noPadding","panelPadding","dashboard","element","loader","template","key","angularComponent","load","request","timeInfo","hasTitle","isViewing","isEditing","transparent","alertState","containerClassNames","getLocation","pathname","alert","undefined","panelContentClassNames","components","Panels","Panel","containerByTitle","title","description","links","mapStateToProps","mapDispatchToProps","PanelChromeAngular"],"sources":["/home/soula/grafana/public/app/features/dashboard/dashgrid/PanelChromeAngular.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { Subscription } from 'rxjs';\n\nimport { getDefaultTimeRange, LoadingState, PanelData, PanelPlugin } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AngularComponent, getAngularLoader, locationService } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { setPanelAngularComponent } from 'app/features/panel/state/reducers';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { isSoloRoute } from '../../../routes/utils';\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { PanelHeader } from './PanelHeader/PanelHeader';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\ninterface ConnectedProps {\n  angularComponent?: AngularComponent;\n}\n\ninterface DispatchProps {\n  setPanelAngularComponent: typeof setPanelAngularComponent;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  data: PanelData;\n  errorMessage?: string;\n}\n\ninterface AngularScopeProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  size: {\n    height: number;\n    width: number;\n  };\n}\n\nexport class PanelChromeAngularUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  timeSrv: TimeSrv = getTimeSrv();\n  scopeProps?: AngularScopeProps;\n  subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange(),\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    this.loadAngularPanel();\n\n    // subscribe to data events\n    const queryRunner = panel.getQueryRunner();\n\n    // we are not displaying any of this data so no need for transforms or field config\n    this.subs.add(\n      queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n        next: (data: PanelData) => this.onPanelDataUpdate(data),\n      })\n    );\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    let errorMessage: string | undefined;\n\n    if (data.state === LoadingState.Error) {\n      const { error } = data;\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({ data, errorMessage });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { plugin, height, width, panel } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.render();\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const { plugin, height } = this.props;\n    const { theme } = config;\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const { plugin, width } = this.props;\n    const { theme } = config;\n\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const { panel, dashboard, setPanelAngularComponent } = this.props;\n\n    // if we have no element or already have loaded the panel return\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: { width: this.getInnerPanelWidth(), height: this.getInnerPanelHeight() },\n    };\n\n    setPanelAngularComponent({\n      key: panel.key,\n      angularComponent: loader.load(this.element, this.scopeProps, template),\n    });\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const alertState = data.alertState?.state;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': isSoloRoute(locationService.getLocation().pathname),\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      'panel-has-alert': panel.alert !== undefined,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          data={data}\n          alertState={alertState}\n        />\n        <div className={panelContentClassNames}>\n          <div ref={(element) => (this.element = element)} className=\"panel-height-helper\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { setPanelAngularComponent };\n\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}