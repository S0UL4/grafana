{"ast":null,"code":"import { cloneDeep } from 'lodash';\nimport { of } from 'rxjs';\nimport { DataFrameView } from '@grafana/data';\nimport { config, toDataQueryError } from '@grafana/runtime';\nimport { dispatch } from 'app/store/store';\nimport { createErrorNotification } from '../../../../core/copy/appNotification';\nimport { notifyApp } from '../../../../core/reducers/appNotification';\nexport function handleAnnotationQueryRunnerError(err) {\n  if (err.cancelled) {\n    return of([]);\n  }\n\n  notifyWithError('AnnotationQueryRunner failed', err);\n  return of([]);\n}\nexport function handleDatasourceSrvError(err) {\n  notifyWithError('Failed to retrieve datasource', err);\n  return of(undefined);\n}\nexport const emptyResult = () => of({\n  annotations: [],\n  alertStates: []\n});\nexport function handleDashboardQueryRunnerWorkerError(err) {\n  if (err.cancelled) {\n    return emptyResult();\n  }\n\n  notifyWithError('DashboardQueryRunner failed', err);\n  return emptyResult();\n}\n\nfunction notifyWithError(title, err) {\n  const error = toDataQueryError(err);\n  console.error('handleAnnotationQueryRunnerError', error);\n  const notification = createErrorNotification(title, error.message);\n  dispatch(notifyApp(notification));\n}\n\nexport function getAnnotationsByPanelId(annotations, panelId) {\n  return annotations.filter(item => {\n    var _item$source;\n\n    if (panelId !== undefined && item.panelId && ((_item$source = item.source) === null || _item$source === void 0 ? void 0 : _item$source.type) === 'dashboard') {\n      return item.panelId === panelId;\n    }\n\n    return true;\n  });\n}\nexport function translateQueryResult(annotation, results) {\n  var _item$newState;\n\n  // if annotation has snapshotData\n  // make clone and remove it\n  if (annotation.snapshotData) {\n    annotation = cloneDeep(annotation);\n    delete annotation.snapshotData;\n  }\n\n  for (const item of results) {\n    item.source = annotation;\n    item.color = config.theme2.visualization.getColorByName(annotation.iconColor);\n    item.type = annotation.name;\n    item.isRegion = Boolean(item.timeEnd && item.time !== item.timeEnd);\n\n    switch ((_item$newState = item.newState) === null || _item$newState === void 0 ? void 0 : _item$newState.toLowerCase()) {\n      case 'pending':\n        item.color = 'yellow';\n        break;\n\n      case 'alerting':\n        item.color = 'red';\n        break;\n\n      case 'ok':\n        item.color = 'green';\n        break;\n\n      case 'normal':\n        // ngalert (\"normal\" instead of \"ok\")\n        item.color = 'green';\n        break;\n\n      case 'no_data':\n        item.color = 'gray';\n        break;\n\n      case 'nodata':\n        // ngalert\n        item.color = 'gray';\n        break;\n    }\n  }\n\n  return results;\n}\nexport function annotationsFromDataFrames(data) {\n  if (!data || !data.length) {\n    return [];\n  }\n\n  const annotations = [];\n\n  for (const frame of data) {\n    const view = new DataFrameView(frame);\n\n    for (let index = 0; index < frame.length; index++) {\n      const annotation = cloneDeep(view.get(index));\n      annotations.push(annotation);\n    }\n  }\n\n  return annotations;\n}","map":{"version":3,"names":["cloneDeep","of","DataFrameView","config","toDataQueryError","dispatch","createErrorNotification","notifyApp","handleAnnotationQueryRunnerError","err","cancelled","notifyWithError","handleDatasourceSrvError","undefined","emptyResult","annotations","alertStates","handleDashboardQueryRunnerWorkerError","title","error","console","notification","message","getAnnotationsByPanelId","panelId","filter","item","source","type","translateQueryResult","annotation","results","snapshotData","color","theme2","visualization","getColorByName","iconColor","name","isRegion","Boolean","timeEnd","time","newState","toLowerCase","annotationsFromDataFrames","data","length","frame","view","index","get","push"],"sources":["/home/soula/grafana/public/app/features/query/state/DashboardQueryRunner/utils.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\nimport { Observable, of } from 'rxjs';\n\nimport { AnnotationEvent, AnnotationQuery, DataFrame, DataFrameView, DataSourceApi } from '@grafana/data';\nimport { config, toDataQueryError } from '@grafana/runtime';\nimport { dispatch } from 'app/store/store';\n\nimport { createErrorNotification } from '../../../../core/copy/appNotification';\nimport { notifyApp } from '../../../../core/reducers/appNotification';\n\nimport { DashboardQueryRunnerWorkerResult } from './types';\n\nexport function handleAnnotationQueryRunnerError(err: any): Observable<AnnotationEvent[]> {\n  if (err.cancelled) {\n    return of([]);\n  }\n\n  notifyWithError('AnnotationQueryRunner failed', err);\n  return of([]);\n}\n\nexport function handleDatasourceSrvError(err: any): Observable<DataSourceApi | undefined> {\n  notifyWithError('Failed to retrieve datasource', err);\n  return of(undefined);\n}\n\nexport const emptyResult: () => Observable<DashboardQueryRunnerWorkerResult> = () =>\n  of({ annotations: [], alertStates: [] });\n\nexport function handleDashboardQueryRunnerWorkerError(err: any): Observable<DashboardQueryRunnerWorkerResult> {\n  if (err.cancelled) {\n    return emptyResult();\n  }\n\n  notifyWithError('DashboardQueryRunner failed', err);\n  return emptyResult();\n}\n\nfunction notifyWithError(title: string, err: any) {\n  const error = toDataQueryError(err);\n  console.error('handleAnnotationQueryRunnerError', error);\n  const notification = createErrorNotification(title, error.message);\n  dispatch(notifyApp(notification));\n}\n\nexport function getAnnotationsByPanelId(annotations: AnnotationEvent[], panelId?: number) {\n  return annotations.filter((item) => {\n    if (panelId !== undefined && item.panelId && item.source?.type === 'dashboard') {\n      return item.panelId === panelId;\n    }\n    return true;\n  });\n}\n\nexport function translateQueryResult(annotation: AnnotationQuery, results: AnnotationEvent[]): AnnotationEvent[] {\n  // if annotation has snapshotData\n  // make clone and remove it\n  if (annotation.snapshotData) {\n    annotation = cloneDeep(annotation);\n    delete annotation.snapshotData;\n  }\n\n  for (const item of results) {\n    item.source = annotation;\n    item.color = config.theme2.visualization.getColorByName(annotation.iconColor);\n    item.type = annotation.name;\n    item.isRegion = Boolean(item.timeEnd && item.time !== item.timeEnd);\n\n    switch (item.newState?.toLowerCase()) {\n      case 'pending':\n        item.color = 'yellow';\n        break;\n      case 'alerting':\n        item.color = 'red';\n        break;\n      case 'ok':\n        item.color = 'green';\n        break;\n      case 'normal': // ngalert (\"normal\" instead of \"ok\")\n        item.color = 'green';\n        break;\n      case 'no_data':\n        item.color = 'gray';\n        break;\n      case 'nodata': // ngalert\n        item.color = 'gray';\n        break;\n    }\n  }\n\n  return results;\n}\n\nexport function annotationsFromDataFrames(data?: DataFrame[]): AnnotationEvent[] {\n  if (!data || !data.length) {\n    return [];\n  }\n\n  const annotations: AnnotationEvent[] = [];\n  for (const frame of data) {\n    const view = new DataFrameView<AnnotationEvent>(frame);\n    for (let index = 0; index < frame.length; index++) {\n      const annotation = cloneDeep(view.get(index));\n      annotations.push(annotation);\n    }\n  }\n\n  return annotations;\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAAqBC,EAArB,QAA+B,MAA/B;AAEA,SAAsDC,aAAtD,QAA0F,eAA1F;AACA,SAASC,MAAT,EAAiBC,gBAAjB,QAAyC,kBAAzC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA,SAASC,uBAAT,QAAwC,uCAAxC;AACA,SAASC,SAAT,QAA0B,2CAA1B;AAIA,OAAO,SAASC,gCAAT,CAA0CC,GAA1C,EAAmF;EACxF,IAAIA,GAAG,CAACC,SAAR,EAAmB;IACjB,OAAOT,EAAE,CAAC,EAAD,CAAT;EACD;;EAEDU,eAAe,CAAC,8BAAD,EAAiCF,GAAjC,CAAf;EACA,OAAOR,EAAE,CAAC,EAAD,CAAT;AACD;AAED,OAAO,SAASW,wBAAT,CAAkCH,GAAlC,EAAmF;EACxFE,eAAe,CAAC,+BAAD,EAAkCF,GAAlC,CAAf;EACA,OAAOR,EAAE,CAACY,SAAD,CAAT;AACD;AAED,OAAO,MAAMC,WAA+D,GAAG,MAC7Eb,EAAE,CAAC;EAAEc,WAAW,EAAE,EAAf;EAAmBC,WAAW,EAAE;AAAhC,CAAD,CADG;AAGP,OAAO,SAASC,qCAAT,CAA+CR,GAA/C,EAAuG;EAC5G,IAAIA,GAAG,CAACC,SAAR,EAAmB;IACjB,OAAOI,WAAW,EAAlB;EACD;;EAEDH,eAAe,CAAC,6BAAD,EAAgCF,GAAhC,CAAf;EACA,OAAOK,WAAW,EAAlB;AACD;;AAED,SAASH,eAAT,CAAyBO,KAAzB,EAAwCT,GAAxC,EAAkD;EAChD,MAAMU,KAAK,GAAGf,gBAAgB,CAACK,GAAD,CAA9B;EACAW,OAAO,CAACD,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;EACA,MAAME,YAAY,GAAGf,uBAAuB,CAACY,KAAD,EAAQC,KAAK,CAACG,OAAd,CAA5C;EACAjB,QAAQ,CAACE,SAAS,CAACc,YAAD,CAAV,CAAR;AACD;;AAED,OAAO,SAASE,uBAAT,CAAiCR,WAAjC,EAAiES,OAAjE,EAAmF;EACxF,OAAOT,WAAW,CAACU,MAAZ,CAAoBC,IAAD,IAAU;IAAA;;IAClC,IAAIF,OAAO,KAAKX,SAAZ,IAAyBa,IAAI,CAACF,OAA9B,IAAyC,iBAAAE,IAAI,CAACC,MAAL,8DAAaC,IAAb,MAAsB,WAAnE,EAAgF;MAC9E,OAAOF,IAAI,CAACF,OAAL,KAAiBA,OAAxB;IACD;;IACD,OAAO,IAAP;EACD,CALM,CAAP;AAMD;AAED,OAAO,SAASK,oBAAT,CAA8BC,UAA9B,EAA2DC,OAA3D,EAA0G;EAAA;;EAC/G;EACA;EACA,IAAID,UAAU,CAACE,YAAf,EAA6B;IAC3BF,UAAU,GAAG9B,SAAS,CAAC8B,UAAD,CAAtB;IACA,OAAOA,UAAU,CAACE,YAAlB;EACD;;EAED,KAAK,MAAMN,IAAX,IAAmBK,OAAnB,EAA4B;IAC1BL,IAAI,CAACC,MAAL,GAAcG,UAAd;IACAJ,IAAI,CAACO,KAAL,GAAa9B,MAAM,CAAC+B,MAAP,CAAcC,aAAd,CAA4BC,cAA5B,CAA2CN,UAAU,CAACO,SAAtD,CAAb;IACAX,IAAI,CAACE,IAAL,GAAYE,UAAU,CAACQ,IAAvB;IACAZ,IAAI,CAACa,QAAL,GAAgBC,OAAO,CAACd,IAAI,CAACe,OAAL,IAAgBf,IAAI,CAACgB,IAAL,KAAchB,IAAI,CAACe,OAApC,CAAvB;;IAEA,0BAAQf,IAAI,CAACiB,QAAb,mDAAQ,eAAeC,WAAf,EAAR;MACE,KAAK,SAAL;QACElB,IAAI,CAACO,KAAL,GAAa,QAAb;QACA;;MACF,KAAK,UAAL;QACEP,IAAI,CAACO,KAAL,GAAa,KAAb;QACA;;MACF,KAAK,IAAL;QACEP,IAAI,CAACO,KAAL,GAAa,OAAb;QACA;;MACF,KAAK,QAAL;QAAe;QACbP,IAAI,CAACO,KAAL,GAAa,OAAb;QACA;;MACF,KAAK,SAAL;QACEP,IAAI,CAACO,KAAL,GAAa,MAAb;QACA;;MACF,KAAK,QAAL;QAAe;QACbP,IAAI,CAACO,KAAL,GAAa,MAAb;QACA;IAlBJ;EAoBD;;EAED,OAAOF,OAAP;AACD;AAED,OAAO,SAASc,yBAAT,CAAmCC,IAAnC,EAA0E;EAC/E,IAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACC,MAAnB,EAA2B;IACzB,OAAO,EAAP;EACD;;EAED,MAAMhC,WAA8B,GAAG,EAAvC;;EACA,KAAK,MAAMiC,KAAX,IAAoBF,IAApB,EAA0B;IACxB,MAAMG,IAAI,GAAG,IAAI/C,aAAJ,CAAmC8C,KAAnC,CAAb;;IACA,KAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,KAAK,CAACD,MAAlC,EAA0CG,KAAK,EAA/C,EAAmD;MACjD,MAAMpB,UAAU,GAAG9B,SAAS,CAACiD,IAAI,CAACE,GAAL,CAASD,KAAT,CAAD,CAA5B;MACAnC,WAAW,CAACqC,IAAZ,CAAiBtB,UAAjB;IACD;EACF;;EAED,OAAOf,WAAP;AACD"},"metadata":{},"sourceType":"module"}