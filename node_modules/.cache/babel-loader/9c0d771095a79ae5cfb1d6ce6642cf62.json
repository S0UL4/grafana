{"ast":null,"code":"import { CodeEditorSuggestionItemKind } from './types';\n/**\n * @internal -- only exported for tests\n */\n\nexport function findInsertIndex(line) {\n  for (let i = line.length - 1; i > 0; i--) {\n    const ch = line.charAt(i);\n\n    if (ch === '$') {\n      return {\n        index: i,\n        prefix: line.substring(i)\n      };\n    } // Keep these seperators\n\n\n    if (ch === ' ' || ch === '\\t' || ch === '\"' || ch === \"'\") {\n      return {\n        index: i + 1,\n        prefix: line.substring(i + 1)\n      };\n    }\n  }\n\n  return {\n    index: 0,\n    prefix: line\n  };\n}\n\nfunction getCompletionItems(monaco, prefix, suggestions, range) {\n  const items = [];\n\n  for (const suggestion of suggestions) {\n    var _suggestion$insertTex;\n\n    if (prefix && !suggestion.label.startsWith(prefix)) {\n      continue; // skip non-matching suggestions\n    }\n\n    items.push(Object.assign({}, suggestion, {\n      kind: mapKinds(monaco, suggestion.kind),\n      range,\n      insertText: (_suggestion$insertTex = suggestion.insertText) !== null && _suggestion$insertTex !== void 0 ? _suggestion$insertTex : suggestion.label\n    }));\n  }\n\n  return items;\n}\n\nfunction mapKinds(monaco, sug) {\n  switch (sug) {\n    case CodeEditorSuggestionItemKind.Method:\n      return monaco.languages.CompletionItemKind.Method;\n\n    case CodeEditorSuggestionItemKind.Field:\n      return monaco.languages.CompletionItemKind.Field;\n\n    case CodeEditorSuggestionItemKind.Property:\n      return monaco.languages.CompletionItemKind.Property;\n\n    case CodeEditorSuggestionItemKind.Constant:\n      return monaco.languages.CompletionItemKind.Constant;\n\n    case CodeEditorSuggestionItemKind.Text:\n      return monaco.languages.CompletionItemKind.Text;\n  }\n\n  return monaco.languages.CompletionItemKind.Text;\n}\n/**\n * @alpha\n */\n\n\nexport function registerSuggestions(monaco, language, getSuggestions) {\n  if (!language || !getSuggestions) {\n    return undefined;\n  }\n\n  return monaco.languages.registerCompletionItemProvider(language, {\n    triggerCharacters: ['$'],\n    provideCompletionItems: (model, position, context) => {\n      const range = {\n        startLineNumber: position.lineNumber,\n        endLineNumber: position.lineNumber,\n        startColumn: position.column,\n        endColumn: position.column\n      }; // Simple check if this was triggered by pressing `$`\n\n      if (context.triggerCharacter === '$') {\n        range.startColumn = position.column - 1;\n        return {\n          suggestions: getCompletionItems(monaco, '$', getSuggestions(), range)\n        };\n      } // Find the replacement region\n\n\n      const currentLine = model.getValueInRange({\n        startLineNumber: position.lineNumber,\n        startColumn: 1,\n        endLineNumber: position.lineNumber,\n        endColumn: position.column\n      });\n      const {\n        index,\n        prefix\n      } = findInsertIndex(currentLine);\n      range.startColumn = index + 1;\n      const suggestions = getCompletionItems(monaco, prefix, getSuggestions(), range);\n\n      if (suggestions.length) {\n        // NOTE, this will replace any language provided suggestions\n        return {\n          suggestions\n        };\n      } // Default language suggestions\n\n\n      return undefined;\n    }\n  });\n}","map":{"version":3,"names":["CodeEditorSuggestionItemKind","findInsertIndex","line","i","length","ch","charAt","index","prefix","substring","getCompletionItems","monaco","suggestions","range","items","suggestion","label","startsWith","push","kind","mapKinds","insertText","sug","Method","languages","CompletionItemKind","Field","Property","Constant","Text","registerSuggestions","language","getSuggestions","undefined","registerCompletionItemProvider","triggerCharacters","provideCompletionItems","model","position","context","startLineNumber","lineNumber","endLineNumber","startColumn","column","endColumn","triggerCharacter","currentLine","getValueInRange"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Monaco/suggestions.ts"],"sourcesContent":["import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { CodeEditorSuggestionItem, CodeEditorSuggestionItemKind, CodeEditorSuggestionProvider, Monaco } from './types';\n\n/**\n * @internal -- only exported for tests\n */\nexport function findInsertIndex(line: string): { index: number; prefix: string } {\n  for (let i = line.length - 1; i > 0; i--) {\n    const ch = line.charAt(i);\n    if (ch === '$') {\n      return {\n        index: i,\n        prefix: line.substring(i),\n      };\n    }\n\n    // Keep these seperators\n    if (ch === ' ' || ch === '\\t' || ch === '\"' || ch === \"'\") {\n      return {\n        index: i + 1,\n        prefix: line.substring(i + 1),\n      };\n    }\n  }\n  return {\n    index: 0,\n    prefix: line,\n  };\n}\n\nfunction getCompletionItems(\n  monaco: Monaco,\n  prefix: string,\n  suggestions: CodeEditorSuggestionItem[],\n  range: monacoType.IRange\n): monacoType.languages.CompletionItem[] {\n  const items: monacoType.languages.CompletionItem[] = [];\n  for (const suggestion of suggestions) {\n    if (prefix && !suggestion.label.startsWith(prefix)) {\n      continue; // skip non-matching suggestions\n    }\n\n    items.push({\n      ...suggestion,\n      kind: mapKinds(monaco, suggestion.kind),\n      range,\n      insertText: suggestion.insertText ?? suggestion.label,\n    });\n  }\n  return items;\n}\n\nfunction mapKinds(monaco: Monaco, sug?: CodeEditorSuggestionItemKind): monacoType.languages.CompletionItemKind {\n  switch (sug) {\n    case CodeEditorSuggestionItemKind.Method:\n      return monaco.languages.CompletionItemKind.Method;\n    case CodeEditorSuggestionItemKind.Field:\n      return monaco.languages.CompletionItemKind.Field;\n    case CodeEditorSuggestionItemKind.Property:\n      return monaco.languages.CompletionItemKind.Property;\n    case CodeEditorSuggestionItemKind.Constant:\n      return monaco.languages.CompletionItemKind.Constant;\n    case CodeEditorSuggestionItemKind.Text:\n      return monaco.languages.CompletionItemKind.Text;\n  }\n  return monaco.languages.CompletionItemKind.Text;\n}\n\n/**\n * @alpha\n */\nexport function registerSuggestions(\n  monaco: Monaco,\n  language: string,\n  getSuggestions: CodeEditorSuggestionProvider\n): monacoType.IDisposable | undefined {\n  if (!language || !getSuggestions) {\n    return undefined;\n  }\n  return monaco.languages.registerCompletionItemProvider(language, {\n    triggerCharacters: ['$'],\n\n    provideCompletionItems: (model, position, context) => {\n      const range = {\n        startLineNumber: position.lineNumber,\n        endLineNumber: position.lineNumber,\n        startColumn: position.column,\n        endColumn: position.column,\n      };\n\n      // Simple check if this was triggered by pressing `$`\n      if (context.triggerCharacter === '$') {\n        range.startColumn = position.column - 1;\n        return {\n          suggestions: getCompletionItems(monaco, '$', getSuggestions(), range),\n        };\n      }\n\n      // Find the replacement region\n      const currentLine = model.getValueInRange({\n        startLineNumber: position.lineNumber,\n        startColumn: 1,\n        endLineNumber: position.lineNumber,\n        endColumn: position.column,\n      });\n\n      const { index, prefix } = findInsertIndex(currentLine);\n      range.startColumn = index + 1;\n\n      const suggestions = getCompletionItems(monaco, prefix, getSuggestions(), range);\n      if (suggestions.length) {\n        // NOTE, this will replace any language provided suggestions\n        return { suggestions };\n      }\n\n      // Default language suggestions\n      return undefined;\n    },\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}