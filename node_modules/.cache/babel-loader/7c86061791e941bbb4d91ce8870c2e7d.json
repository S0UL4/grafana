{"ast":null,"code":"import deepEqual from 'fast-deep-equal';\nimport { useEffect, useMemo } from 'react';\nimport { migrateMetricQuery } from '../../migrations/metricQueryMigrations';\nimport { MetricEditorMode, MetricQueryType } from '../../types';\nexport const DEFAULT_QUERY = {\n  queryMode: 'Metrics',\n  namespace: '',\n  metricName: '',\n  expression: '',\n  dimensions: {},\n  region: 'default',\n  id: '',\n  statistic: 'Average',\n  period: '',\n  metricQueryType: MetricQueryType.Search,\n  metricEditorMode: MetricEditorMode.Builder,\n  sqlExpression: '',\n  matchExact: true\n};\n\nconst prepareQuery = query => {\n  const withDefaults = Object.assign({}, DEFAULT_QUERY, query);\n  const migratedQuery = migrateMetricQuery(withDefaults); // If we didn't make any changes to the object, then return the original object to keep the\n  // identity the same, and not trigger any other useEffects or anything.\n\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n};\n/**\n * Returns queries with some defaults + migrations, and calls onChange function to notify if it changes\n */\n\n\nconst usePreparedMetricsQuery = (query, onChangeQuery) => {\n  const preparedQuery = useMemo(() => prepareQuery(query), [query]);\n  useEffect(() => {\n    if (preparedQuery !== query) {\n      onChangeQuery(preparedQuery);\n    }\n  }, [preparedQuery, query, onChangeQuery]);\n  return preparedQuery;\n};\n\nexport default usePreparedMetricsQuery;","map":{"version":3,"names":["deepEqual","useEffect","useMemo","migrateMetricQuery","MetricEditorMode","MetricQueryType","DEFAULT_QUERY","queryMode","namespace","metricName","expression","dimensions","region","id","statistic","period","metricQueryType","Search","metricEditorMode","Builder","sqlExpression","matchExact","prepareQuery","query","withDefaults","migratedQuery","usePreparedMetricsQuery","onChangeQuery","preparedQuery"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/usePreparedMetricsQuery.ts"],"sourcesContent":["import deepEqual from 'fast-deep-equal';\nimport { useEffect, useMemo } from 'react';\n\nimport { migrateMetricQuery } from '../../migrations/metricQueryMigrations';\nimport { CloudWatchMetricsQuery, MetricEditorMode, MetricQueryType } from '../../types';\n\nexport const DEFAULT_QUERY: Omit<CloudWatchMetricsQuery, 'refId'> = {\n  queryMode: 'Metrics',\n  namespace: '',\n  metricName: '',\n  expression: '',\n  dimensions: {},\n  region: 'default',\n  id: '',\n  statistic: 'Average',\n  period: '',\n  metricQueryType: MetricQueryType.Search,\n  metricEditorMode: MetricEditorMode.Builder,\n  sqlExpression: '',\n  matchExact: true,\n};\n\nconst prepareQuery = (query: CloudWatchMetricsQuery) => {\n  const withDefaults = { ...DEFAULT_QUERY, ...query };\n  const migratedQuery = migrateMetricQuery(withDefaults);\n\n  // If we didn't make any changes to the object, then return the original object to keep the\n  // identity the same, and not trigger any other useEffects or anything.\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n};\n\n/**\n * Returns queries with some defaults + migrations, and calls onChange function to notify if it changes\n */\nconst usePreparedMetricsQuery = (\n  query: CloudWatchMetricsQuery,\n  onChangeQuery: (newQuery: CloudWatchMetricsQuery) => void\n) => {\n  const preparedQuery = useMemo(() => prepareQuery(query), [query]);\n\n  useEffect(() => {\n    if (preparedQuery !== query) {\n      onChangeQuery(preparedQuery);\n    }\n  }, [preparedQuery, query, onChangeQuery]);\n\n  return preparedQuery;\n};\n\nexport default usePreparedMetricsQuery;\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AAEA,SAASC,kBAAT,QAAmC,wCAAnC;AACA,SAAiCC,gBAAjC,EAAmDC,eAAnD,QAA0E,aAA1E;AAEA,OAAO,MAAMC,aAAoD,GAAG;EAClEC,SAAS,EAAE,SADuD;EAElEC,SAAS,EAAE,EAFuD;EAGlEC,UAAU,EAAE,EAHsD;EAIlEC,UAAU,EAAE,EAJsD;EAKlEC,UAAU,EAAE,EALsD;EAMlEC,MAAM,EAAE,SAN0D;EAOlEC,EAAE,EAAE,EAP8D;EAQlEC,SAAS,EAAE,SARuD;EASlEC,MAAM,EAAE,EAT0D;EAUlEC,eAAe,EAAEX,eAAe,CAACY,MAViC;EAWlEC,gBAAgB,EAAEd,gBAAgB,CAACe,OAX+B;EAYlEC,aAAa,EAAE,EAZmD;EAalEC,UAAU,EAAE;AAbsD,CAA7D;;AAgBP,MAAMC,YAAY,GAAIC,KAAD,IAAmC;EACtD,MAAMC,YAAY,qBAAQlB,aAAR,EAA0BiB,KAA1B,CAAlB;EACA,MAAME,aAAa,GAAGtB,kBAAkB,CAACqB,YAAD,CAAxC,CAFsD,CAItD;EACA;;EACA,OAAOxB,SAAS,CAACyB,aAAD,EAAgBF,KAAhB,CAAT,GAAkCA,KAAlC,GAA0CE,aAAjD;AACD,CAPD;AASA;AACA;AACA;;;AACA,MAAMC,uBAAuB,GAAG,CAC9BH,KAD8B,EAE9BI,aAF8B,KAG3B;EACH,MAAMC,aAAa,GAAG1B,OAAO,CAAC,MAAMoB,YAAY,CAACC,KAAD,CAAnB,EAA4B,CAACA,KAAD,CAA5B,CAA7B;EAEAtB,SAAS,CAAC,MAAM;IACd,IAAI2B,aAAa,KAAKL,KAAtB,EAA6B;MAC3BI,aAAa,CAACC,aAAD,CAAb;IACD;EACF,CAJQ,EAIN,CAACA,aAAD,EAAgBL,KAAhB,EAAuBI,aAAvB,CAJM,CAAT;EAMA,OAAOC,aAAP;AACD,CAbD;;AAeA,eAAeF,uBAAf"},"metadata":{},"sourceType":"module"}