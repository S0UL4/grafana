{"ast":null,"code":"var _code;\n\nimport React from 'react';\nimport { gte, lt, valid } from 'semver';\nimport { FieldSet, InlineField, Input, Select, InlineSwitch } from '@grafana/ui';\nimport { isTruthy } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst indexPatternTypes = [{\n  label: 'No pattern',\n  value: 'none'\n}, {\n  label: 'Hourly',\n  value: 'Hourly',\n  example: '[logstash-]YYYY.MM.DD.HH'\n}, {\n  label: 'Daily',\n  value: 'Daily',\n  example: '[logstash-]YYYY.MM.DD'\n}, {\n  label: 'Weekly',\n  value: 'Weekly',\n  example: '[logstash-]GGGG.WW'\n}, {\n  label: 'Monthly',\n  value: 'Monthly',\n  example: '[logstash-]YYYY.MM'\n}, {\n  label: 'Yearly',\n  value: 'Yearly',\n  example: '[logstash-]YYYY'\n}];\nconst esVersions = [{\n  label: '7.10+',\n  value: '7.10.0'\n}, {\n  label: '8.0+',\n  value: '8.0.0',\n  description: 'support for Elasticsearch 8 is currently experimental'\n}];\nexport const ElasticDetails = ({\n  value,\n  onChange\n}) => {\n  var _value$jsonData$inclu;\n\n  const currentVersion = esVersions.find(version => version.value === value.jsonData.esVersion);\n  const customOption = !currentVersion && valid(value.jsonData.esVersion) ? {\n    label: value.jsonData.esVersion,\n    value: value.jsonData.esVersion\n  } : undefined;\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsxs(FieldSet, {\n      label: \"Elasticsearch details\",\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        label: \"Index name\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(Input, {\n          id: \"es_config_indexName\",\n          value: value.database || '',\n          onChange: changeHandler('database', value, onChange),\n          width: 24,\n          placeholder: \"es-index-name\",\n          required: true\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Pattern\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(Select, {\n          inputId: \"es_config_indexPattern\",\n          value: indexPatternTypes.find(pattern => pattern.value === (value.jsonData.interval === undefined ? 'none' : value.jsonData.interval)),\n          options: indexPatternTypes,\n          onChange: intervalHandler(value, onChange),\n          width: 24\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Time field name\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(Input, {\n          id: \"es_config_timeField\",\n          value: value.jsonData.timeField || '',\n          onChange: jsonDataChangeHandler('timeField', value, onChange),\n          width: 24,\n          placeholder: \"@timestamp\",\n          required: true\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"ElasticSearch version\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(Select, {\n          inputId: \"es_config_version\",\n          options: [customOption, ...esVersions].filter(isTruthy),\n          onChange: option => {\n            const maxConcurrentShardRequests = getMaxConcurrenShardRequestOrDefault(value.jsonData.maxConcurrentShardRequests, option.value);\n            onChange(Object.assign({}, value, {\n              jsonData: Object.assign({}, value.jsonData, {\n                esVersion: option.value,\n                maxConcurrentShardRequests\n              })\n            }));\n          },\n          value: currentVersion || customOption,\n          width: 24\n        })\n      }), gte(value.jsonData.esVersion, '5.6.0') && /*#__PURE__*/_jsx(InlineField, {\n        label: \"Max concurrent Shard Requests\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(Input, {\n          id: \"es_config_shardRequests\",\n          value: value.jsonData.maxConcurrentShardRequests || '',\n          onChange: jsonDataChangeHandler('maxConcurrentShardRequests', value, onChange),\n          width: 24\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Min time interval\",\n        labelWidth: 26,\n        tooltip: /*#__PURE__*/_jsxs(_Fragment, {\n          children: [\"A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example\", ' ', _code || (_code = /*#__PURE__*/_jsx(\"code\", {\n            children: \"1m\"\n          })), \" if your data is written every minute.\"]\n        }),\n        error: \"Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s\",\n        invalid: !!value.jsonData.timeInterval && !/^\\d+(ms|[Mwdhmsy])$/.test(value.jsonData.timeInterval),\n        children: /*#__PURE__*/_jsx(Input, {\n          id: \"es_config_minTimeInterval\",\n          value: value.jsonData.timeInterval || '',\n          onChange: jsonDataChangeHandler('timeInterval', value, onChange),\n          width: 24,\n          placeholder: \"10s\"\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"X-Pack enabled\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(InlineSwitch, {\n          id: \"es_config_xpackEnabled\",\n          checked: value.jsonData.xpack || false,\n          onChange: jsonDataSwitchChangeHandler('xpack', value, onChange)\n        })\n      }), gte(value.jsonData.esVersion, '6.6.0') && value.jsonData.xpack && /*#__PURE__*/_jsx(InlineField, {\n        label: \"Include Frozen Indices\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(InlineSwitch, {\n          id: \"es_config_frozenIndices\",\n          checked: (_value$jsonData$inclu = value.jsonData.includeFrozen) !== null && _value$jsonData$inclu !== void 0 ? _value$jsonData$inclu : false,\n          onChange: jsonDataSwitchChangeHandler('includeFrozen', value, onChange)\n        })\n      })]\n    })\n  });\n}; // TODO: Use change handlers from @grafana/data\n\nconst changeHandler = (key, value, onChange) => event => {\n  onChange(Object.assign({}, value, {\n    [key]: event.currentTarget.value\n  }));\n}; // TODO: Use change handlers from @grafana/data\n\n\nconst jsonDataChangeHandler = (key, value, onChange) => event => {\n  onChange(Object.assign({}, value, {\n    jsonData: Object.assign({}, value.jsonData, {\n      [key]: event.currentTarget.value\n    })\n  }));\n};\n\nconst jsonDataSwitchChangeHandler = (key, value, onChange) => event => {\n  onChange(Object.assign({}, value, {\n    jsonData: Object.assign({}, value.jsonData, {\n      [key]: event.currentTarget.checked\n    })\n  }));\n};\n\nconst intervalHandler = (value, onChange) => option => {\n  const {\n    database\n  } = value; // If option value is undefined it will send its label instead so we have to convert made up value to undefined here.\n\n  const newInterval = option.value === 'none' ? undefined : option.value;\n\n  if (!database || database.length === 0 || database.startsWith('[logstash-]')) {\n    let newDatabase = '';\n\n    if (newInterval !== undefined) {\n      const pattern = indexPatternTypes.find(pattern => pattern.value === newInterval);\n\n      if (pattern) {\n        var _pattern$example;\n\n        newDatabase = (_pattern$example = pattern.example) !== null && _pattern$example !== void 0 ? _pattern$example : '';\n      }\n    }\n\n    onChange(Object.assign({}, value, {\n      database: newDatabase,\n      jsonData: Object.assign({}, value.jsonData, {\n        interval: newInterval\n      })\n    }));\n  } else {\n    onChange(Object.assign({}, value, {\n      jsonData: Object.assign({}, value.jsonData, {\n        interval: newInterval\n      })\n    }));\n  }\n};\n\nfunction getMaxConcurrenShardRequestOrDefault(maxConcurrentShardRequests, version) {\n  if (maxConcurrentShardRequests === 5 && lt(version, '7.0.0')) {\n    return 256;\n  }\n\n  if (maxConcurrentShardRequests === 256 && gte(version, '7.0.0')) {\n    return 5;\n  }\n\n  return maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(version);\n}\n\nexport function defaultMaxConcurrentShardRequests(version) {\n  return gte(version, '7.0.0') ? 5 : 256;\n}","map":{"version":3,"names":["React","gte","lt","valid","FieldSet","InlineField","Input","Select","InlineSwitch","isTruthy","indexPatternTypes","label","value","example","esVersions","description","ElasticDetails","onChange","currentVersion","find","version","jsonData","esVersion","customOption","undefined","database","changeHandler","pattern","interval","intervalHandler","timeField","jsonDataChangeHandler","filter","option","maxConcurrentShardRequests","getMaxConcurrenShardRequestOrDefault","timeInterval","test","xpack","jsonDataSwitchChangeHandler","includeFrozen","key","event","currentTarget","checked","newInterval","length","startsWith","newDatabase","defaultMaxConcurrentShardRequests"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/configuration/ElasticDetails.tsx"],"sourcesContent":["import React from 'react';\nimport { gte, lt, valid } from 'semver';\n\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { FieldSet, InlineField, Input, Select, InlineSwitch } from '@grafana/ui';\n\nimport { ElasticsearchOptions, Interval } from '../types';\n\nimport { isTruthy } from './utils';\n\nconst indexPatternTypes: Array<SelectableValue<'none' | Interval>> = [\n  { label: 'No pattern', value: 'none' },\n  { label: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n  { label: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n  { label: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n  { label: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n  { label: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n];\n\nconst esVersions: SelectableValue[] = [\n  { label: '7.10+', value: '7.10.0' },\n  {\n    label: '8.0+',\n    value: '8.0.0',\n    description: 'support for Elasticsearch 8 is currently experimental',\n  },\n];\n\ntype Props = {\n  value: DataSourceSettings<ElasticsearchOptions>;\n  onChange: (value: DataSourceSettings<ElasticsearchOptions>) => void;\n};\nexport const ElasticDetails = ({ value, onChange }: Props) => {\n  const currentVersion = esVersions.find((version) => version.value === value.jsonData.esVersion);\n  const customOption =\n    !currentVersion && valid(value.jsonData.esVersion)\n      ? {\n          label: value.jsonData.esVersion,\n          value: value.jsonData.esVersion,\n        }\n      : undefined;\n  return (\n    <>\n      <FieldSet label=\"Elasticsearch details\">\n        <InlineField label=\"Index name\" labelWidth={26}>\n          <Input\n            id=\"es_config_indexName\"\n            value={value.database || ''}\n            onChange={changeHandler('database', value, onChange)}\n            width={24}\n            placeholder=\"es-index-name\"\n            required\n          />\n        </InlineField>\n\n        <InlineField label=\"Pattern\" labelWidth={26}>\n          <Select\n            inputId=\"es_config_indexPattern\"\n            value={indexPatternTypes.find(\n              (pattern) => pattern.value === (value.jsonData.interval === undefined ? 'none' : value.jsonData.interval)\n            )}\n            options={indexPatternTypes}\n            onChange={intervalHandler(value, onChange)}\n            width={24}\n          />\n        </InlineField>\n\n        <InlineField label=\"Time field name\" labelWidth={26}>\n          <Input\n            id=\"es_config_timeField\"\n            value={value.jsonData.timeField || ''}\n            onChange={jsonDataChangeHandler('timeField', value, onChange)}\n            width={24}\n            placeholder=\"@timestamp\"\n            required\n          />\n        </InlineField>\n\n        <InlineField label=\"ElasticSearch version\" labelWidth={26}>\n          <Select\n            inputId=\"es_config_version\"\n            options={[customOption, ...esVersions].filter(isTruthy)}\n            onChange={(option) => {\n              const maxConcurrentShardRequests = getMaxConcurrenShardRequestOrDefault(\n                value.jsonData.maxConcurrentShardRequests,\n                option.value!\n              );\n              onChange({\n                ...value,\n                jsonData: {\n                  ...value.jsonData,\n                  esVersion: option.value!,\n                  maxConcurrentShardRequests,\n                },\n              });\n            }}\n            value={currentVersion || customOption}\n            width={24}\n          />\n        </InlineField>\n\n        {gte(value.jsonData.esVersion, '5.6.0') && (\n          <InlineField label=\"Max concurrent Shard Requests\" labelWidth={26}>\n            <Input\n              id=\"es_config_shardRequests\"\n              value={value.jsonData.maxConcurrentShardRequests || ''}\n              onChange={jsonDataChangeHandler('maxConcurrentShardRequests', value, onChange)}\n              width={24}\n            />\n          </InlineField>\n        )}\n\n        <InlineField\n          label=\"Min time interval\"\n          labelWidth={26}\n          tooltip={\n            <>\n              A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example{' '}\n              <code>1m</code> if your data is written every minute.\n            </>\n          }\n          error=\"Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s\"\n          invalid={!!value.jsonData.timeInterval && !/^\\d+(ms|[Mwdhmsy])$/.test(value.jsonData.timeInterval)}\n        >\n          <Input\n            id=\"es_config_minTimeInterval\"\n            value={value.jsonData.timeInterval || ''}\n            onChange={jsonDataChangeHandler('timeInterval', value, onChange)}\n            width={24}\n            placeholder=\"10s\"\n          />\n        </InlineField>\n\n        <InlineField label=\"X-Pack enabled\" labelWidth={26}>\n          <InlineSwitch\n            id=\"es_config_xpackEnabled\"\n            checked={value.jsonData.xpack || false}\n            onChange={jsonDataSwitchChangeHandler('xpack', value, onChange)}\n          />\n        </InlineField>\n\n        {gte(value.jsonData.esVersion, '6.6.0') && value.jsonData.xpack && (\n          <InlineField label=\"Include Frozen Indices\" labelWidth={26}>\n            <InlineSwitch\n              id=\"es_config_frozenIndices\"\n              checked={value.jsonData.includeFrozen ?? false}\n              onChange={jsonDataSwitchChangeHandler('includeFrozen', value, onChange)}\n            />\n          </InlineField>\n        )}\n      </FieldSet>\n    </>\n  );\n};\n\n// TODO: Use change handlers from @grafana/data\nconst changeHandler =\n  (key: keyof DataSourceSettings<ElasticsearchOptions>, value: Props['value'], onChange: Props['onChange']) =>\n  (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => {\n    onChange({\n      ...value,\n      [key]: event.currentTarget.value,\n    });\n  };\n\n// TODO: Use change handlers from @grafana/data\nconst jsonDataChangeHandler =\n  (key: keyof ElasticsearchOptions, value: Props['value'], onChange: Props['onChange']) =>\n  (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: event.currentTarget.value,\n      },\n    });\n  };\n\nconst jsonDataSwitchChangeHandler =\n  (key: keyof ElasticsearchOptions, value: Props['value'], onChange: Props['onChange']) =>\n  (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: event.currentTarget.checked,\n      },\n    });\n  };\n\nconst intervalHandler =\n  (value: Props['value'], onChange: Props['onChange']) => (option: SelectableValue<Interval | 'none'>) => {\n    const { database } = value;\n    // If option value is undefined it will send its label instead so we have to convert made up value to undefined here.\n    const newInterval = option.value === 'none' ? undefined : option.value;\n\n    if (!database || database.length === 0 || database.startsWith('[logstash-]')) {\n      let newDatabase = '';\n\n      if (newInterval !== undefined) {\n        const pattern = indexPatternTypes.find((pattern) => pattern.value === newInterval);\n\n        if (pattern) {\n          newDatabase = pattern.example ?? '';\n        }\n      }\n\n      onChange({\n        ...value,\n        database: newDatabase,\n        jsonData: {\n          ...value.jsonData,\n          interval: newInterval,\n        },\n      });\n    } else {\n      onChange({\n        ...value,\n        jsonData: {\n          ...value.jsonData,\n          interval: newInterval,\n        },\n      });\n    }\n  };\n\nfunction getMaxConcurrenShardRequestOrDefault(maxConcurrentShardRequests: number | undefined, version: string): number {\n  if (maxConcurrentShardRequests === 5 && lt(version, '7.0.0')) {\n    return 256;\n  }\n\n  if (maxConcurrentShardRequests === 256 && gte(version, '7.0.0')) {\n    return 5;\n  }\n\n  return maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(version);\n}\n\nexport function defaultMaxConcurrentShardRequests(version: string) {\n  return gte(version, '7.0.0') ? 5 : 256;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}