{"ast":null,"code":"import { FieldType } from '../../types/dataFrame';\nimport { FieldMatcherID } from './ids';\nconst firstFieldMatcher = {\n  id: FieldMatcherID.first,\n  name: 'First Field',\n  description: 'The first field in the frame',\n  get: type => {\n    return (field, frame, allFrames) => {\n      return field === frame.fields[0];\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `First field`;\n  }\n};\nconst firstTimeFieldMatcher = {\n  id: FieldMatcherID.firstTimeField,\n  name: 'First time field',\n  description: 'The first field of type time in a frame',\n  get: type => {\n    return (field, frame, allFrames) => {\n      return field.type === FieldType.time && field === frame.fields.find(f => f.type === FieldType.time);\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `First time field`;\n  }\n};\n/**\n * Registry Initialization\n */\n\nexport function getSimpleFieldMatchers() {\n  return [firstFieldMatcher, firstTimeFieldMatcher];\n}","map":{"version":3,"names":["FieldType","FieldMatcherID","firstFieldMatcher","id","first","name","description","get","type","field","frame","allFrames","fields","getOptionsDisplayText","firstTimeFieldMatcher","firstTimeField","time","find","f","getSimpleFieldMatchers"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/matchers/simpleFieldMatcher.ts"],"sourcesContent":["import { Field, FieldType, DataFrame } from '../../types/dataFrame';\nimport { FieldMatcherInfo } from '../../types/transformations';\n\nimport { FieldMatcherID } from './ids';\n\nconst firstFieldMatcher: FieldMatcherInfo = {\n  id: FieldMatcherID.first,\n  name: 'First Field',\n  description: 'The first field in the frame',\n\n  get: (type: FieldType) => {\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      return field === frame.fields[0];\n    };\n  },\n\n  getOptionsDisplayText: () => {\n    return `First field`;\n  },\n};\n\nconst firstTimeFieldMatcher: FieldMatcherInfo = {\n  id: FieldMatcherID.firstTimeField,\n  name: 'First time field',\n  description: 'The first field of type time in a frame',\n\n  get: (type: FieldType) => {\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      return field.type === FieldType.time && field === frame.fields.find((f) => f.type === FieldType.time);\n    };\n  },\n\n  getOptionsDisplayText: () => {\n    return `First time field`;\n  },\n};\n\n/**\n * Registry Initialization\n */\nexport function getSimpleFieldMatchers(): FieldMatcherInfo[] {\n  return [firstFieldMatcher, firstTimeFieldMatcher];\n}\n"],"mappings":"AAAA,SAAgBA,SAAhB,QAA4C,uBAA5C;AAGA,SAASC,cAAT,QAA+B,OAA/B;AAEA,MAAMC,iBAAmC,GAAG;EAC1CC,EAAE,EAAEF,cAAc,CAACG,KADuB;EAE1CC,IAAI,EAAE,aAFoC;EAG1CC,WAAW,EAAE,8BAH6B;EAK1CC,GAAG,EAAGC,IAAD,IAAqB;IACxB,OAAO,CAACC,KAAD,EAAeC,KAAf,EAAiCC,SAAjC,KAA4D;MACjE,OAAOF,KAAK,KAAKC,KAAK,CAACE,MAAN,CAAa,CAAb,CAAjB;IACD,CAFD;EAGD,CATyC;EAW1CC,qBAAqB,EAAE,MAAM;IAC3B,OAAQ,aAAR;EACD;AAbyC,CAA5C;AAgBA,MAAMC,qBAAuC,GAAG;EAC9CX,EAAE,EAAEF,cAAc,CAACc,cAD2B;EAE9CV,IAAI,EAAE,kBAFwC;EAG9CC,WAAW,EAAE,yCAHiC;EAK9CC,GAAG,EAAGC,IAAD,IAAqB;IACxB,OAAO,CAACC,KAAD,EAAeC,KAAf,EAAiCC,SAAjC,KAA4D;MACjE,OAAOF,KAAK,CAACD,IAAN,KAAeR,SAAS,CAACgB,IAAzB,IAAiCP,KAAK,KAAKC,KAAK,CAACE,MAAN,CAAaK,IAAb,CAAmBC,CAAD,IAAOA,CAAC,CAACV,IAAF,KAAWR,SAAS,CAACgB,IAA9C,CAAlD;IACD,CAFD;EAGD,CAT6C;EAW9CH,qBAAqB,EAAE,MAAM;IAC3B,OAAQ,kBAAR;EACD;AAb6C,CAAhD;AAgBA;AACA;AACA;;AACA,OAAO,SAASM,sBAAT,GAAsD;EAC3D,OAAO,CAACjB,iBAAD,EAAoBY,qBAApB,CAAP;AACD"},"metadata":{},"sourceType":"module"}