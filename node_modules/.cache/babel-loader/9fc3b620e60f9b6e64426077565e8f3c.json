{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/home/soula/grafana/packages/grafana-data/src/types/transformations.ts"],"sourcesContent":["import { MonoTypeOperatorFunction } from 'rxjs';\n\nimport { RegistryItemWithOptions } from '../utils/Registry';\n\nimport { ScopedVars } from './ScopedVars';\nimport { DataFrame, Field } from './dataFrame';\n\n/**\n * Function that transform data frames (AKA transformer)\n *\n * @public\n */\nexport interface DataTransformerInfo<TOptions = any> extends RegistryItemWithOptions {\n  /**\n   * Function that configures transformation and returns a transformer\n   * @param options\n   */\n  operator: (\n    options: TOptions,\n    replace?: (target?: string, scopedVars?: ScopedVars, format?: string | Function) => string\n  ) => MonoTypeOperatorFunction<DataFrame[]>;\n}\n\n/**\n * Many transformations can be called with a simple synchronous function.\n * When a transformer is defined, it should have identical behavior to using the operator\n *\n * @public\n */\nexport interface SynchronousDataTransformerInfo<TOptions = any> extends DataTransformerInfo<TOptions> {\n  transformer: (options: TOptions) => (frames: DataFrame[]) => DataFrame[];\n}\n\n/**\n * @public\n */\nexport interface DataTransformerConfig<TOptions = any> {\n  /**\n   * Unique identifier of transformer\n   */\n  id: string;\n  /**\n   * Disabled transformations are skipped\n   */\n  disabled?: boolean;\n  /**\n   * Options to be passed to the transformer\n   */\n  options: TOptions;\n  /**\n   * Function to apply template variable substitution to the DataTransformerConfig\n   */\n  replace?: (target?: string, scopedVars?: ScopedVars, format?: string | Function) => string;\n}\n\nexport type FrameMatcher = (frame: DataFrame) => boolean;\nexport type FieldMatcher = (field: Field, frame: DataFrame, allFrames: DataFrame[]) => boolean;\n\n/**\n * Value matcher type to describe the matcher function\n * @public\n */\nexport type ValueMatcher = (valueIndex: number, field: Field, frame: DataFrame, allFrames: DataFrame[]) => boolean;\n\nexport interface FieldMatcherInfo<TOptions = any> extends RegistryItemWithOptions<TOptions> {\n  get: (options: TOptions) => FieldMatcher;\n}\n\nexport interface FrameMatcherInfo<TOptions = any> extends RegistryItemWithOptions<TOptions> {\n  get: (options: TOptions) => FrameMatcher;\n}\n\n/**\n * Registry item to represent all the different valu matchers supported\n * in the Grafana platform.\n * @public\n */\nexport interface ValueMatcherInfo<TOptions = any> extends RegistryItemWithOptions<TOptions> {\n  get: (options: TOptions) => ValueMatcher;\n  isApplicable: (field: Field) => boolean;\n  getDefaultOptions: (field: Field) => TOptions;\n}\nexport interface MatcherConfig<TOptions = any> {\n  id: string;\n  options?: TOptions;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module"}