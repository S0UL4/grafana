{"ast":null,"code":"import React, { useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { getDataSourceRef } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker, getDataSourceSrv } from '@grafana/runtime';\nimport { Checkbox, CollapsableSection, Field, HorizontalGroup, Input } from '@grafana/ui';\nimport { ColorValueEditor } from 'app/core/components/OptionsUI/color';\nimport StandardAnnotationQueryEditor from 'app/features/annotations/components/StandardAnnotationQueryEditor';\nimport { AngularEditorLoader } from './AngularEditorLoader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const newAnnotationName = 'New annotation';\nexport const AnnotationSettingsEdit = ({\n  editIdx,\n  dashboard\n}) => {\n  const [annotation, setAnnotation] = useState(dashboard.annotations.list[editIdx]);\n  const {\n    value: ds\n  } = useAsync(() => {\n    return getDataSourceSrv().get(annotation.datasource);\n  }, [annotation.datasource]);\n\n  const onUpdate = annotation => {\n    const list = [...dashboard.annotations.list];\n    list.splice(editIdx, 1, annotation);\n    setAnnotation(annotation);\n    dashboard.annotations.list = list;\n  };\n\n  const onNameChange = ev => {\n    onUpdate(Object.assign({}, annotation, {\n      name: ev.currentTarget.value\n    }));\n  };\n\n  const onDataSourceChange = ds => {\n    onUpdate(Object.assign({}, annotation, {\n      datasource: getDataSourceRef(ds)\n    }));\n  };\n\n  const onChange = ev => {\n    const target = ev.currentTarget;\n    onUpdate(Object.assign({}, annotation, {\n      [target.name]: target.type === 'checkbox' ? target.checked : target.value\n    }));\n  };\n\n  const onColorChange = color => {\n    onUpdate(Object.assign({}, annotation, {\n      iconColor: color\n    }));\n  };\n\n  const isNewAnnotation = annotation.name === newAnnotationName;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(Field, {\n      label: \"Name\",\n      children: /*#__PURE__*/_jsx(Input, {\n        \"aria-label\": selectors.pages.Dashboard.Settings.Annotations.Settings.name,\n        name: \"name\",\n        id: \"name\",\n        autoFocus: isNewAnnotation,\n        value: annotation.name,\n        onChange: onNameChange,\n        width: 50\n      })\n    }), /*#__PURE__*/_jsx(Field, {\n      label: \"Data source\",\n      htmlFor: \"data-source-picker\",\n      children: /*#__PURE__*/_jsx(DataSourcePicker, {\n        width: 50,\n        annotations: true,\n        variables: true,\n        current: annotation.datasource,\n        onChange: onDataSourceChange\n      })\n    }), /*#__PURE__*/_jsx(Field, {\n      label: \"Enabled\",\n      description: \"When enabled the annotation query is issued every dashboard refresh\",\n      children: /*#__PURE__*/_jsx(Checkbox, {\n        name: \"enable\",\n        id: \"enable\",\n        value: annotation.enable,\n        onChange: onChange\n      })\n    }), /*#__PURE__*/_jsx(Field, {\n      label: \"Hidden\",\n      description: \"Annotation queries can be toggled on or off at the top of the dashboard. With this option checked this toggle will be hidden.\",\n      children: /*#__PURE__*/_jsx(Checkbox, {\n        name: \"hide\",\n        id: \"hide\",\n        value: annotation.hide,\n        onChange: onChange\n      })\n    }), /*#__PURE__*/_jsx(Field, {\n      label: \"Color\",\n      description: \"Color to use for the annotation event markers\",\n      children: /*#__PURE__*/_jsx(HorizontalGroup, {\n        children: /*#__PURE__*/_jsx(ColorValueEditor, {\n          value: annotation === null || annotation === void 0 ? void 0 : annotation.iconColor,\n          onChange: onColorChange\n        })\n      })\n    }), /*#__PURE__*/_jsxs(CollapsableSection, {\n      isOpen: true,\n      label: \"Query\",\n      children: [(ds === null || ds === void 0 ? void 0 : ds.annotations) && /*#__PURE__*/_jsx(StandardAnnotationQueryEditor, {\n        datasource: ds,\n        annotation: annotation,\n        onChange: onUpdate\n      }), ds && !ds.annotations && /*#__PURE__*/_jsx(AngularEditorLoader, {\n        datasource: ds,\n        annotation: annotation,\n        onChange: onUpdate\n      })]\n    })]\n  });\n};\nAnnotationSettingsEdit.displayName = 'AnnotationSettingsEdit';","map":{"version":3,"names":["React","useState","useAsync","getDataSourceRef","selectors","DataSourcePicker","getDataSourceSrv","Checkbox","CollapsableSection","Field","HorizontalGroup","Input","ColorValueEditor","StandardAnnotationQueryEditor","AngularEditorLoader","newAnnotationName","AnnotationSettingsEdit","editIdx","dashboard","annotation","setAnnotation","annotations","list","value","ds","get","datasource","onUpdate","splice","onNameChange","ev","name","currentTarget","onDataSourceChange","onChange","target","type","checked","onColorChange","color","iconColor","isNewAnnotation","pages","Dashboard","Settings","Annotations","enable","hide","displayName"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/AnnotationSettings/AnnotationSettingsEdit.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { AnnotationQuery, DataSourceInstanceSettings, getDataSourceRef } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker, getDataSourceSrv } from '@grafana/runtime';\nimport { Checkbox, CollapsableSection, Field, HorizontalGroup, Input } from '@grafana/ui';\nimport { ColorValueEditor } from 'app/core/components/OptionsUI/color';\nimport StandardAnnotationQueryEditor from 'app/features/annotations/components/StandardAnnotationQueryEditor';\n\nimport { DashboardModel } from '../../state/DashboardModel';\n\nimport { AngularEditorLoader } from './AngularEditorLoader';\n\ntype Props = {\n  editIdx: number;\n  dashboard: DashboardModel;\n};\n\nexport const newAnnotationName = 'New annotation';\n\nexport const AnnotationSettingsEdit: React.FC<Props> = ({ editIdx, dashboard }) => {\n  const [annotation, setAnnotation] = useState(dashboard.annotations.list[editIdx]);\n\n  const { value: ds } = useAsync(() => {\n    return getDataSourceSrv().get(annotation.datasource);\n  }, [annotation.datasource]);\n\n  const onUpdate = (annotation: AnnotationQuery) => {\n    const list = [...dashboard.annotations.list];\n    list.splice(editIdx, 1, annotation);\n    setAnnotation(annotation);\n    dashboard.annotations.list = list;\n  };\n\n  const onNameChange = (ev: React.FocusEvent<HTMLInputElement>) => {\n    onUpdate({\n      ...annotation,\n      name: ev.currentTarget.value,\n    });\n  };\n\n  const onDataSourceChange = (ds: DataSourceInstanceSettings) => {\n    onUpdate({\n      ...annotation,\n      datasource: getDataSourceRef(ds),\n    });\n  };\n\n  const onChange = (ev: React.FocusEvent<HTMLInputElement>) => {\n    const target = ev.currentTarget;\n    onUpdate({\n      ...annotation,\n      [target.name]: target.type === 'checkbox' ? target.checked : target.value,\n    });\n  };\n\n  const onColorChange = (color: string) => {\n    onUpdate({\n      ...annotation,\n      iconColor: color,\n    });\n  };\n\n  const isNewAnnotation = annotation.name === newAnnotationName;\n\n  return (\n    <div>\n      <Field label=\"Name\">\n        <Input\n          aria-label={selectors.pages.Dashboard.Settings.Annotations.Settings.name}\n          name=\"name\"\n          id=\"name\"\n          autoFocus={isNewAnnotation}\n          value={annotation.name}\n          onChange={onNameChange}\n          width={50}\n        />\n      </Field>\n      <Field label=\"Data source\" htmlFor=\"data-source-picker\">\n        <DataSourcePicker\n          width={50}\n          annotations\n          variables\n          current={annotation.datasource}\n          onChange={onDataSourceChange}\n        />\n      </Field>\n      <Field label=\"Enabled\" description=\"When enabled the annotation query is issued every dashboard refresh\">\n        <Checkbox name=\"enable\" id=\"enable\" value={annotation.enable} onChange={onChange} />\n      </Field>\n      <Field\n        label=\"Hidden\"\n        description=\"Annotation queries can be toggled on or off at the top of the dashboard. With this option checked this toggle will be hidden.\"\n      >\n        <Checkbox name=\"hide\" id=\"hide\" value={annotation.hide} onChange={onChange} />\n      </Field>\n      <Field label=\"Color\" description=\"Color to use for the annotation event markers\">\n        <HorizontalGroup>\n          <ColorValueEditor value={annotation?.iconColor} onChange={onColorChange} />\n        </HorizontalGroup>\n      </Field>\n      <CollapsableSection isOpen={true} label=\"Query\">\n        {ds?.annotations && (\n          <StandardAnnotationQueryEditor datasource={ds} annotation={annotation} onChange={onUpdate} />\n        )}\n        {ds && !ds.annotations && <AngularEditorLoader datasource={ds} annotation={annotation} onChange={onUpdate} />}\n      </CollapsableSection>\n    </div>\n  );\n};\n\nAnnotationSettingsEdit.displayName = 'AnnotationSettingsEdit';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}