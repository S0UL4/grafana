{"ast":null,"code":"import { last } from 'lodash';\n\n/**\n * Graphite-web before v1.6 returns HTTP 500 with full stack traces in an HTML page\n * when a query fails. It results in massive error alerts with HTML tags in the UI.\n * This function removes all HTML tags and keeps only the last line from the stack\n * trace which should be the most meaningful.\n */\nexport function reduceError(error) {\n  var _error$data, _error$data$message;\n\n  if (error && error.status === 500 && (_error$data = error.data) !== null && _error$data !== void 0 && (_error$data$message = _error$data.message) !== null && _error$data$message !== void 0 && _error$data$message.startsWith('<body')) {\n    // Remove all HTML tags and take the last line from the stack trace\n    const newMessage = last(error.data.message.replace(/(<([^>]+)>)/gi, '').trim().split(/\\n/)).replace(/u?&#[^;]+;/g, '');\n    error.data.message = `Graphite encountered an unexpected error while handling your request. ${newMessage}`;\n  }\n\n  return error;\n}\nexport function isGraphiteParserError(e) {\n  return typeof e === 'object' && e !== null && 'message' in e && 'pos' in e;\n}","map":{"version":3,"names":["last","reduceError","error","status","data","message","startsWith","newMessage","replace","trim","split","isGraphiteParserError","e"],"sources":["/home/soula/grafana/public/app/plugins/datasource/graphite/utils.ts"],"sourcesContent":["import { last } from 'lodash';\n\nimport { GraphiteParserError } from './types';\n\n/**\n * Graphite-web before v1.6 returns HTTP 500 with full stack traces in an HTML page\n * when a query fails. It results in massive error alerts with HTML tags in the UI.\n * This function removes all HTML tags and keeps only the last line from the stack\n * trace which should be the most meaningful.\n */\nexport function reduceError(error: any): any {\n  if (error && error.status === 500 && error.data?.message?.startsWith('<body')) {\n    // Remove all HTML tags and take the last line from the stack trace\n    const newMessage = last<string>(\n      error.data.message\n        .replace(/(<([^>]+)>)/gi, '')\n        .trim()\n        .split(/\\n/)\n    )!.replace(/u?&#[^;]+;/g, '');\n    error.data.message = `Graphite encountered an unexpected error while handling your request. ${newMessage}`;\n  }\n  return error;\n}\n\nexport function isGraphiteParserError(e: unknown): e is GraphiteParserError {\n  return typeof e === 'object' && e !== null && 'message' in e && 'pos' in e;\n}\n"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAAsC;EAAA;;EAC3C,IAAIA,KAAK,IAAIA,KAAK,CAACC,MAAN,KAAiB,GAA1B,mBAAiCD,KAAK,CAACE,IAAvC,+DAAiC,YAAYC,OAA7C,gDAAiC,oBAAqBC,UAArB,CAAgC,OAAhC,CAArC,EAA+E;IAC7E;IACA,MAAMC,UAAU,GAAGP,IAAI,CACrBE,KAAK,CAACE,IAAN,CAAWC,OAAX,CACGG,OADH,CACW,eADX,EAC4B,EAD5B,EAEGC,IAFH,GAGGC,KAHH,CAGS,IAHT,CADqB,CAAJ,CAKhBF,OALgB,CAKR,aALQ,EAKO,EALP,CAAnB;IAMAN,KAAK,CAACE,IAAN,CAAWC,OAAX,GAAsB,yEAAwEE,UAAW,EAAzG;EACD;;EACD,OAAOL,KAAP;AACD;AAED,OAAO,SAASS,qBAAT,CAA+BC,CAA/B,EAAqE;EAC1E,OAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,KAAK,IAA/B,IAAuC,aAAaA,CAApD,IAAyD,SAASA,CAAzE;AACD"},"metadata":{},"sourceType":"module"}