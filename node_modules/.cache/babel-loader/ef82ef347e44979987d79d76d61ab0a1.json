{"ast":null,"code":"const _excluded = [\"ref\", \"onChange\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Alert, Button, Field, InputControl, Select, useStyles2 } from '@grafana/ui';\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport { ChannelOptions } from './ChannelOptions';\nimport { CollapsibleSection } from './CollapsibleSection';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function ChannelSubForm({\n  defaultValues,\n  pathPrefix,\n  onDuplicate,\n  onDelete,\n  onTest,\n  notifiers,\n  errors,\n  secureFields,\n  commonSettingsComponent: CommonSettingsComponent,\n  readOnly = false\n}) {\n  var _watch;\n\n  const styles = useStyles2(getStyles);\n\n  const name = fieldName => `${pathPrefix}${fieldName}`;\n\n  const {\n    control,\n    watch,\n    register,\n    trigger,\n    formState,\n    setValue\n  } = useFormContext();\n  const selectedType = (_watch = watch(name('type'))) !== null && _watch !== void 0 ? _watch : defaultValues.type; // nope, setting \"default\" does not work at all.\n\n  const {\n    loading: testingReceiver\n  } = useUnifiedAlertingSelector(state => state.testReceivers);\n  useEffect(() => {\n    register(`${pathPrefix}.__id`);\n    /* Need to manually register secureFields or else they'll\n     be lost when testing a contact point */\n\n    register(`${pathPrefix}.secureFields`);\n  }, [register, pathPrefix]);\n  const [_secureFields, setSecureFields] = useState(secureFields !== null && secureFields !== void 0 ? secureFields : {});\n\n  const onResetSecureField = key => {\n    if (_secureFields[key]) {\n      const updatedSecureFields = Object.assign({}, secureFields);\n      delete updatedSecureFields[key];\n      setSecureFields(updatedSecureFields);\n      setValue(`${pathPrefix}.secureFields`, updatedSecureFields);\n    }\n  };\n\n  const typeOptions = useMemo(() => notifiers.map(({\n    name,\n    type\n  }) => ({\n    label: name,\n    value: type\n  })).sort((a, b) => a.label.localeCompare(b.label)), [notifiers]);\n\n  const handleTest = async () => {\n    await trigger();\n    const isValid = Object.keys(formState.errors).length === 0;\n\n    if (isValid && onTest) {\n      onTest();\n    }\n  };\n\n  const notifier = notifiers.find(({\n    type\n  }) => type === selectedType); // if there are mandatory options defined, optional options will be hidden by a collapse\n  // if there aren't mandatory options, all options will be shown without collapse\n\n  const mandatoryOptions = notifier === null || notifier === void 0 ? void 0 : notifier.options.filter(o => o.required);\n  const optionalOptions = notifier === null || notifier === void 0 ? void 0 : notifier.options.filter(o => !o.required);\n  const contactPointTypeInputId = `contact-point-type-${pathPrefix}`;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.wrapper,\n    \"data-testid\": \"item-container\",\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.topRow,\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(Field, {\n          label: \"Contact point type\",\n          htmlFor: contactPointTypeInputId,\n          \"data-testid\": `${pathPrefix}type`,\n          children: /*#__PURE__*/_jsx(InputControl, {\n            name: name('type'),\n            defaultValue: defaultValues.type,\n            render: _ref => {\n              let {\n                field: {\n                  onChange\n                }\n              } = _ref,\n                  field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n              return /*#__PURE__*/_jsx(Select, Object.assign({\n                disabled: readOnly,\n                inputId: contactPointTypeInputId\n              }, field, {\n                width: 37,\n                options: typeOptions,\n                onChange: value => onChange(value === null || value === void 0 ? void 0 : value.value)\n              }));\n            },\n            control: control,\n            rules: {\n              required: true\n            }\n          })\n        })\n      }), !readOnly && /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.buttons,\n        children: [onTest && /*#__PURE__*/_jsx(Button, {\n          disabled: testingReceiver,\n          size: \"xs\",\n          variant: \"secondary\",\n          type: \"button\",\n          onClick: () => handleTest(),\n          icon: testingReceiver ? 'fa fa-spinner' : 'message',\n          children: \"Test\"\n        }), /*#__PURE__*/_jsx(Button, {\n          size: \"xs\",\n          variant: \"secondary\",\n          type: \"button\",\n          onClick: () => onDuplicate(),\n          icon: \"copy\",\n          children: \"Duplicate\"\n        }), onDelete && /*#__PURE__*/_jsx(Button, {\n          \"data-testid\": `${pathPrefix}delete-button`,\n          size: \"xs\",\n          variant: \"secondary\",\n          type: \"button\",\n          onClick: () => onDelete(),\n          icon: \"trash-alt\",\n          children: \"Delete\"\n        })]\n      })]\n    }), notifier && /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.innerContent,\n      children: [/*#__PURE__*/_jsx(ChannelOptions, {\n        defaultValues: defaultValues,\n        selectedChannelOptions: mandatoryOptions !== null && mandatoryOptions !== void 0 && mandatoryOptions.length ? mandatoryOptions : optionalOptions,\n        secureFields: _secureFields,\n        errors: errors,\n        onResetSecureField: onResetSecureField,\n        pathPrefix: pathPrefix,\n        readOnly: readOnly\n      }), !!(mandatoryOptions !== null && mandatoryOptions !== void 0 && mandatoryOptions.length && optionalOptions !== null && optionalOptions !== void 0 && optionalOptions.length) && /*#__PURE__*/_jsxs(CollapsibleSection, {\n        label: `Optional ${notifier.name} settings`,\n        children: [notifier.info !== '' && /*#__PURE__*/_jsx(Alert, {\n          title: \"\",\n          severity: \"info\",\n          children: notifier.info\n        }), /*#__PURE__*/_jsx(ChannelOptions, {\n          defaultValues: defaultValues,\n          selectedChannelOptions: optionalOptions,\n          secureFields: _secureFields,\n          onResetSecureField: onResetSecureField,\n          errors: errors,\n          pathPrefix: pathPrefix,\n          readOnly: readOnly\n        })]\n      }), /*#__PURE__*/_jsx(CollapsibleSection, {\n        label: \"Notification settings\",\n        children: /*#__PURE__*/_jsx(CommonSettingsComponent, {\n          pathPrefix: pathPrefix,\n          readOnly: readOnly\n        })\n      })]\n    })]\n  });\n}\n\nconst getStyles = theme => ({\n  buttons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  innerContent: css`\n    max-width: 536px;\n  `,\n  wrapper: css`\n    margin: ${theme.spacing(2, 0)};\n    padding: ${theme.spacing(1)};\n    border: solid 1px ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius(1)};\n    max-width: ${theme.breakpoints.values.xl}${theme.breakpoints.unit};\n  `,\n  topRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  `,\n  channelSettingsHeader: css`\n    margin-top: ${theme.spacing(2)};\n  `\n});","map":{"version":3,"names":["css","React","useEffect","useMemo","useState","useFormContext","Alert","Button","Field","InputControl","Select","useStyles2","useUnifiedAlertingSelector","ChannelOptions","CollapsibleSection","ChannelSubForm","defaultValues","pathPrefix","onDuplicate","onDelete","onTest","notifiers","errors","secureFields","commonSettingsComponent","CommonSettingsComponent","readOnly","styles","getStyles","name","fieldName","control","watch","register","trigger","formState","setValue","selectedType","type","loading","testingReceiver","state","testReceivers","_secureFields","setSecureFields","onResetSecureField","key","updatedSecureFields","typeOptions","map","label","value","sort","a","b","localeCompare","handleTest","isValid","Object","keys","length","notifier","find","mandatoryOptions","options","filter","o","required","optionalOptions","contactPointTypeInputId","wrapper","topRow","field","onChange","buttons","innerContent","info","theme","spacing","colors","border","medium","shape","borderRadius","breakpoints","values","xl","unit","channelSettingsHeader"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/form/ChannelSubForm.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useFormContext, FieldErrors } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Alert, Button, Field, InputControl, Select, useStyles2 } from '@grafana/ui';\nimport { NotifierDTO } from 'app/types';\n\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport { ChannelValues, CommonSettingsComponentType } from '../../../types/receiver-form';\n\nimport { ChannelOptions } from './ChannelOptions';\nimport { CollapsibleSection } from './CollapsibleSection';\n\ninterface Props<R> {\n  defaultValues: R;\n  pathPrefix: string;\n  notifiers: NotifierDTO[];\n  onDuplicate: () => void;\n  onTest?: () => void;\n  commonSettingsComponent: CommonSettingsComponentType;\n\n  secureFields?: Record<string, boolean>;\n  errors?: FieldErrors<R>;\n  onDelete?: () => void;\n  readOnly?: boolean;\n}\n\nexport function ChannelSubForm<R extends ChannelValues>({\n  defaultValues,\n  pathPrefix,\n  onDuplicate,\n  onDelete,\n  onTest,\n  notifiers,\n  errors,\n  secureFields,\n  commonSettingsComponent: CommonSettingsComponent,\n  readOnly = false,\n}: Props<R>): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const name = (fieldName: string) => `${pathPrefix}${fieldName}`;\n  const { control, watch, register, trigger, formState, setValue } = useFormContext();\n  const selectedType = watch(name('type')) ?? defaultValues.type; // nope, setting \"default\" does not work at all.\n  const { loading: testingReceiver } = useUnifiedAlertingSelector((state) => state.testReceivers);\n\n  useEffect(() => {\n    register(`${pathPrefix}.__id`);\n    /* Need to manually register secureFields or else they'll\n     be lost when testing a contact point */\n    register(`${pathPrefix}.secureFields`);\n  }, [register, pathPrefix]);\n\n  const [_secureFields, setSecureFields] = useState(secureFields ?? {});\n\n  const onResetSecureField = (key: string) => {\n    if (_secureFields[key]) {\n      const updatedSecureFields = { ...secureFields };\n      delete updatedSecureFields[key];\n      setSecureFields(updatedSecureFields);\n      setValue(`${pathPrefix}.secureFields`, updatedSecureFields);\n    }\n  };\n\n  const typeOptions = useMemo(\n    (): SelectableValue[] =>\n      notifiers\n        .map(({ name, type }) => ({\n          label: name,\n          value: type,\n        }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [notifiers]\n  );\n\n  const handleTest = async () => {\n    await trigger();\n    const isValid = Object.keys(formState.errors).length === 0;\n\n    if (isValid && onTest) {\n      onTest();\n    }\n  };\n\n  const notifier = notifiers.find(({ type }) => type === selectedType);\n  // if there are mandatory options defined, optional options will be hidden by a collapse\n  // if there aren't mandatory options, all options will be shown without collapse\n  const mandatoryOptions = notifier?.options.filter((o) => o.required);\n  const optionalOptions = notifier?.options.filter((o) => !o.required);\n\n  const contactPointTypeInputId = `contact-point-type-${pathPrefix}`;\n  return (\n    <div className={styles.wrapper} data-testid=\"item-container\">\n      <div className={styles.topRow}>\n        <div>\n          <Field label=\"Contact point type\" htmlFor={contactPointTypeInputId} data-testid={`${pathPrefix}type`}>\n            <InputControl\n              name={name('type')}\n              defaultValue={defaultValues.type}\n              render={({ field: { ref, onChange, ...field } }) => (\n                <Select\n                  disabled={readOnly}\n                  inputId={contactPointTypeInputId}\n                  {...field}\n                  width={37}\n                  options={typeOptions}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              control={control}\n              rules={{ required: true }}\n            />\n          </Field>\n        </div>\n        {!readOnly && (\n          <div className={styles.buttons}>\n            {onTest && (\n              <Button\n                disabled={testingReceiver}\n                size=\"xs\"\n                variant=\"secondary\"\n                type=\"button\"\n                onClick={() => handleTest()}\n                icon={testingReceiver ? 'fa fa-spinner' : 'message'}\n              >\n                Test\n              </Button>\n            )}\n            <Button size=\"xs\" variant=\"secondary\" type=\"button\" onClick={() => onDuplicate()} icon=\"copy\">\n              Duplicate\n            </Button>\n            {onDelete && (\n              <Button\n                data-testid={`${pathPrefix}delete-button`}\n                size=\"xs\"\n                variant=\"secondary\"\n                type=\"button\"\n                onClick={() => onDelete()}\n                icon=\"trash-alt\"\n              >\n                Delete\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n      {notifier && (\n        <div className={styles.innerContent}>\n          <ChannelOptions<R>\n            defaultValues={defaultValues}\n            selectedChannelOptions={mandatoryOptions?.length ? mandatoryOptions! : optionalOptions!}\n            secureFields={_secureFields}\n            errors={errors}\n            onResetSecureField={onResetSecureField}\n            pathPrefix={pathPrefix}\n            readOnly={readOnly}\n          />\n          {!!(mandatoryOptions?.length && optionalOptions?.length) && (\n            <CollapsibleSection label={`Optional ${notifier.name} settings`}>\n              {notifier.info !== '' && (\n                <Alert title=\"\" severity=\"info\">\n                  {notifier.info}\n                </Alert>\n              )}\n              <ChannelOptions<R>\n                defaultValues={defaultValues}\n                selectedChannelOptions={optionalOptions!}\n                secureFields={_secureFields}\n                onResetSecureField={onResetSecureField}\n                errors={errors}\n                pathPrefix={pathPrefix}\n                readOnly={readOnly}\n              />\n            </CollapsibleSection>\n          )}\n          <CollapsibleSection label=\"Notification settings\">\n            <CommonSettingsComponent pathPrefix={pathPrefix} readOnly={readOnly} />\n          </CollapsibleSection>\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  innerContent: css`\n    max-width: 536px;\n  `,\n  wrapper: css`\n    margin: ${theme.spacing(2, 0)};\n    padding: ${theme.spacing(1)};\n    border: solid 1px ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius(1)};\n    max-width: ${theme.breakpoints.values.xl}${theme.breakpoints.unit};\n  `,\n  topRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  `,\n  channelSettingsHeader: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}