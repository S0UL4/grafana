{"ast":null,"code":"var _h, _Button;\n\nimport React, { useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Button, Input, Field } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst createUser = async user => getBackendSrv().post('/api/admin/users', user);\n\nconst UserCreatePage = ({\n  navModel\n}) => {\n  const history = useHistory();\n  const onSubmit = useCallback(async data => {\n    await createUser(data);\n    history.push('/admin/users');\n  }, [history]);\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      children: [_h || (_h = /*#__PURE__*/_jsx(\"h1\", {\n        children: \"Add new user\"\n      })), /*#__PURE__*/_jsx(Form, {\n        onSubmit: onSubmit,\n        validateOn: \"onBlur\",\n        children: ({\n          register,\n          errors\n        }) => {\n          return /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Field, {\n              label: \"Name\",\n              required: true,\n              invalid: !!errors.name,\n              error: errors.name ? 'Name is required' : undefined,\n              children: /*#__PURE__*/_jsx(Input, Object.assign({\n                id: \"name-input\"\n              }, register('name', {\n                required: true\n              })))\n            }), /*#__PURE__*/_jsx(Field, {\n              label: \"Email\",\n              children: /*#__PURE__*/_jsx(Input, Object.assign({\n                id: \"email-input\"\n              }, register('email')))\n            }), /*#__PURE__*/_jsx(Field, {\n              label: \"Username\",\n              children: /*#__PURE__*/_jsx(Input, Object.assign({\n                id: \"username-input\"\n              }, register('login')))\n            }), /*#__PURE__*/_jsx(Field, {\n              label: \"Password\",\n              required: true,\n              invalid: !!errors.password,\n              error: errors.password ? 'Password is required and must contain at least 4 characters' : undefined,\n              children: /*#__PURE__*/_jsx(Input, Object.assign({\n                id: \"password-input\"\n              }, register('password', {\n                validate: value => value.trim() !== '' && value.length >= 4\n              }), {\n                type: \"password\"\n              }))\n            }), _Button || (_Button = /*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              children: \"Create user\"\n            }))]\n          });\n        }\n      })]\n    })\n  });\n};\n\nconst mapStateToProps = state => ({\n  navModel: getNavModel(state.navIndex, 'global-users')\n});\n\nexport default connect(mapStateToProps)(UserCreatePage);","map":{"version":3,"names":["React","useCallback","connect","useHistory","getBackendSrv","Form","Button","Input","Field","Page","getNavModel","createUser","user","post","UserCreatePage","navModel","history","onSubmit","data","push","register","errors","name","undefined","required","password","validate","value","trim","length","mapStateToProps","state","navIndex"],"sources":["/home/soula/grafana/public/app/features/admin/UserCreatePage.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { NavModel } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Button, Input, Field } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\n\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { StoreState } from '../../types';\n\ninterface UserCreatePageProps {\n  navModel: NavModel;\n}\ninterface UserDTO {\n  name: string;\n  password: string;\n  email?: string;\n  login?: string;\n}\n\nconst createUser = async (user: UserDTO) => getBackendSrv().post('/api/admin/users', user);\n\nconst UserCreatePage: React.FC<UserCreatePageProps> = ({ navModel }) => {\n  const history = useHistory();\n\n  const onSubmit = useCallback(\n    async (data: UserDTO) => {\n      await createUser(data);\n      history.push('/admin/users');\n    },\n    [history]\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h1>Add new user</h1>\n        <Form onSubmit={onSubmit} validateOn=\"onBlur\">\n          {({ register, errors }) => {\n            return (\n              <>\n                <Field\n                  label=\"Name\"\n                  required\n                  invalid={!!errors.name}\n                  error={errors.name ? 'Name is required' : undefined}\n                >\n                  <Input id=\"name-input\" {...register('name', { required: true })} />\n                </Field>\n\n                <Field label=\"Email\">\n                  <Input id=\"email-input\" {...register('email')} />\n                </Field>\n\n                <Field label=\"Username\">\n                  <Input id=\"username-input\" {...register('login')} />\n                </Field>\n                <Field\n                  label=\"Password\"\n                  required\n                  invalid={!!errors.password}\n                  error={errors.password ? 'Password is required and must contain at least 4 characters' : undefined}\n                >\n                  <Input\n                    id=\"password-input\"\n                    {...register('password', {\n                      validate: (value) => value.trim() !== '' && value.length >= 4,\n                    })}\n                    type=\"password\"\n                  />\n                </Field>\n                <Button type=\"submit\">Create user</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'global-users'),\n});\n\nexport default connect(mapStateToProps)(UserCreatePage);\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAGA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,KAA9B,QAA2C,aAA3C;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AAEA,SAASC,WAAT,QAA4B,+BAA5B;;;;;AAaA,MAAMC,UAAU,GAAG,MAAOC,IAAP,IAAyBR,aAAa,GAAGS,IAAhB,CAAqB,kBAArB,EAAyCD,IAAzC,CAA5C;;AAEA,MAAME,cAA6C,GAAG,CAAC;EAAEC;AAAF,CAAD,KAAkB;EACtE,MAAMC,OAAO,GAAGb,UAAU,EAA1B;EAEA,MAAMc,QAAQ,GAAGhB,WAAW,CAC1B,MAAOiB,IAAP,IAAyB;IACvB,MAAMP,UAAU,CAACO,IAAD,CAAhB;IACAF,OAAO,CAACG,IAAR,CAAa,cAAb;EACD,CAJyB,EAK1B,CAACH,OAAD,CAL0B,CAA5B;EAQA,oBACE,KAAC,IAAD;IAAM,QAAQ,EAAED,QAAhB;IAAA,uBACE,MAAC,IAAD,CAAM,QAAN;MAAA,oCACE;QAAA;MAAA,EADF,gBAEE,KAAC,IAAD;QAAM,QAAQ,EAAEE,QAAhB;QAA0B,UAAU,EAAC,QAArC;QAAA,UACG,CAAC;UAAEG,QAAF;UAAYC;QAAZ,CAAD,KAA0B;UACzB,oBACE;YAAA,wBACE,KAAC,KAAD;cACE,KAAK,EAAC,MADR;cAEE,QAAQ,MAFV;cAGE,OAAO,EAAE,CAAC,CAACA,MAAM,CAACC,IAHpB;cAIE,KAAK,EAAED,MAAM,CAACC,IAAP,GAAc,kBAAd,GAAmCC,SAJ5C;cAAA,uBAME,KAAC,KAAD;gBAAO,EAAE,EAAC;cAAV,GAA2BH,QAAQ,CAAC,MAAD,EAAS;gBAAEI,QAAQ,EAAE;cAAZ,CAAT,CAAnC;YANF,EADF,eAUE,KAAC,KAAD;cAAO,KAAK,EAAC,OAAb;cAAA,uBACE,KAAC,KAAD;gBAAO,EAAE,EAAC;cAAV,GAA4BJ,QAAQ,CAAC,OAAD,CAApC;YADF,EAVF,eAcE,KAAC,KAAD;cAAO,KAAK,EAAC,UAAb;cAAA,uBACE,KAAC,KAAD;gBAAO,EAAE,EAAC;cAAV,GAA+BA,QAAQ,CAAC,OAAD,CAAvC;YADF,EAdF,eAiBE,KAAC,KAAD;cACE,KAAK,EAAC,UADR;cAEE,QAAQ,MAFV;cAGE,OAAO,EAAE,CAAC,CAACC,MAAM,CAACI,QAHpB;cAIE,KAAK,EAAEJ,MAAM,CAACI,QAAP,GAAkB,6DAAlB,GAAkFF,SAJ3F;cAAA,uBAME,KAAC,KAAD;gBACE,EAAE,EAAC;cADL,GAEMH,QAAQ,CAAC,UAAD,EAAa;gBACvBM,QAAQ,EAAGC,KAAD,IAAWA,KAAK,CAACC,IAAN,OAAiB,EAAjB,IAAuBD,KAAK,CAACE,MAAN,IAAgB;cADrC,CAAb,CAFd;gBAKE,IAAI,EAAC;cALP;YANF,EAjBF,qCA+BE,KAAC,MAAD;cAAQ,IAAI,EAAC,QAAb;cAAA;YAAA,EA/BF;UAAA,EADF;QAmCD;MArCH,EAFF;IAAA;EADF,EADF;AA8CD,CAzDD;;AA2DA,MAAMC,eAAe,GAAIC,KAAD,KAAwB;EAC9ChB,QAAQ,EAAEL,WAAW,CAACqB,KAAK,CAACC,QAAP,EAAiB,cAAjB;AADyB,CAAxB,CAAxB;;AAIA,eAAe9B,OAAO,CAAC4B,eAAD,CAAP,CAAyBhB,cAAzB,CAAf"},"metadata":{},"sourceType":"module"}