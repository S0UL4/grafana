{"ast":null,"code":"var _LoadingPlaceholder;\n\nimport { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useCleanup } from '../../../core/hooks/useCleanup';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { ProvisionedResource, ProvisioningAlert } from './components/Provisioning';\nimport { AmRootRoute } from './components/amroutes/AmRootRoute';\nimport { AmSpecificRouting } from './components/amroutes/AmSpecificRouting';\nimport { MuteTimingsTable } from './components/amroutes/MuteTimingsTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from './state/actions';\nimport { amRouteToFormAmRoute, formAmRouteToAmRoute, stringsToSelectableValues } from './utils/amroutes';\nimport { isVanillaPrometheusAlertManagerDataSource } from './utils/datasource';\nimport { initialAsyncRequestState } from './utils/redux';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst AmRoutes = () => {\n  var _config$receivers;\n\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const [isRootRouteEditMode, setIsRootRouteEditMode] = useState(false);\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const amConfigs = useUnifiedAlertingSelector(state => state.amConfigs);\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n  const {\n    result,\n    loading: resultLoading,\n    error: resultError\n  } = alertManagerSourceName && amConfigs[alertManagerSourceName] || initialAsyncRequestState;\n  const config = result === null || result === void 0 ? void 0 : result.alertmanager_config;\n  const [rootRoute, id2ExistingRoute] = useMemo(() => amRouteToFormAmRoute(config === null || config === void 0 ? void 0 : config.route), [config === null || config === void 0 ? void 0 : config.route]);\n  const receivers = stringsToSelectableValues(((_config$receivers = config === null || config === void 0 ? void 0 : config.receivers) !== null && _config$receivers !== void 0 ? _config$receivers : []).map(receiver => receiver.name));\n  const isProvisioned = useMemo(() => {\n    var _config$route;\n\n    return Boolean(config === null || config === void 0 ? void 0 : (_config$route = config.route) === null || _config$route === void 0 ? void 0 : _config$route.provenance);\n  }, [config === null || config === void 0 ? void 0 : config.route]);\n\n  const enterRootRouteEditMode = () => {\n    setIsRootRouteEditMode(true);\n  };\n\n  const exitRootRouteEditMode = () => {\n    setIsRootRouteEditMode(false);\n  };\n\n  useCleanup(state => state.unifiedAlerting.saveAMConfig);\n\n  const handleSave = data => {\n    if (!result) {\n      return;\n    }\n\n    const newData = formAmRouteToAmRoute(alertManagerSourceName, Object.assign({}, rootRoute, data), id2ExistingRoute);\n\n    if (isRootRouteEditMode) {\n      exitRootRouteEditMode();\n    }\n\n    dispatch(updateAlertManagerConfigAction({\n      newConfig: Object.assign({}, result, {\n        alertmanager_config: Object.assign({}, result.alertmanager_config, {\n          route: newData\n        })\n      }),\n      oldConfig: result,\n      alertManagerSourceName: alertManagerSourceName,\n      successMessage: 'Saved',\n      refetch: true\n    }));\n  };\n\n  if (!alertManagerSourceName) {\n    return /*#__PURE__*/_jsx(AlertingPageWrapper, {\n      pageId: \"am-routes\",\n      children: /*#__PURE__*/_jsx(NoAlertManagerWarning, {\n        availableAlertManagers: alertManagers\n      })\n    });\n  }\n\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) || isProvisioned : true;\n  return /*#__PURE__*/_jsxs(AlertingPageWrapper, {\n    pageId: \"am-routes\",\n    children: [/*#__PURE__*/_jsx(AlertManagerPicker, {\n      current: alertManagerSourceName,\n      onChange: setAlertManagerSourceName,\n      dataSources: alertManagers\n    }), resultError && !resultLoading && /*#__PURE__*/_jsx(Alert, {\n      severity: \"error\",\n      title: \"Error loading Alertmanager config\",\n      children: resultError.message || 'Unknown error.'\n    }), isProvisioned && /*#__PURE__*/_jsx(ProvisioningAlert, {\n      resource: ProvisionedResource.RootNotificationPolicy\n    }), resultLoading && (_LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n      text: \"Loading Alertmanager config...\"\n    }))), result && !resultLoading && !resultError && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(AmRootRoute, {\n        readOnly: readOnly,\n        alertManagerSourceName: alertManagerSourceName,\n        isEditMode: isRootRouteEditMode,\n        onSave: handleSave,\n        onEnterEditMode: enterRootRouteEditMode,\n        onExitEditMode: exitRootRouteEditMode,\n        receivers: receivers,\n        routes: rootRoute\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.break\n      }), /*#__PURE__*/_jsx(AmSpecificRouting, {\n        alertManagerSourceName: alertManagerSourceName,\n        onChange: handleSave,\n        readOnly: readOnly,\n        onRootRouteEdit: enterRootRouteEditMode,\n        receivers: receivers,\n        routes: rootRoute\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.break\n      }), /*#__PURE__*/_jsx(MuteTimingsTable, {\n        alertManagerSourceName: alertManagerSourceName\n      })]\n    })]\n  });\n};\n\nexport default withErrorBoundary(AmRoutes, {\n  style: 'page'\n});\n\nconst getStyles = theme => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `\n});","map":{"version":3,"names":["css","React","useCallback","useEffect","useMemo","useState","useDispatch","Alert","LoadingPlaceholder","useStyles2","withErrorBoundary","useCleanup","AlertManagerPicker","AlertingPageWrapper","NoAlertManagerWarning","ProvisionedResource","ProvisioningAlert","AmRootRoute","AmSpecificRouting","MuteTimingsTable","useAlertManagerSourceName","useAlertManagersByPermission","useUnifiedAlertingSelector","fetchAlertManagerConfigAction","updateAlertManagerConfigAction","amRouteToFormAmRoute","formAmRouteToAmRoute","stringsToSelectableValues","isVanillaPrometheusAlertManagerDataSource","initialAsyncRequestState","AmRoutes","dispatch","styles","getStyles","isRootRouteEditMode","setIsRootRouteEditMode","alertManagers","alertManagerSourceName","setAlertManagerSourceName","amConfigs","state","fetchConfig","result","loading","resultLoading","error","resultError","config","alertmanager_config","rootRoute","id2ExistingRoute","route","receivers","map","receiver","name","isProvisioned","Boolean","provenance","enterRootRouteEditMode","exitRootRouteEditMode","unifiedAlerting","saveAMConfig","handleSave","data","newData","newConfig","oldConfig","successMessage","refetch","readOnly","message","RootNotificationPolicy","break","style","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/AmRoutes.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { ProvisionedResource, ProvisioningAlert } from './components/Provisioning';\nimport { AmRootRoute } from './components/amroutes/AmRootRoute';\nimport { AmSpecificRouting } from './components/amroutes/AmSpecificRouting';\nimport { MuteTimingsTable } from './components/amroutes/MuteTimingsTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from './state/actions';\nimport { AmRouteReceiver, FormAmRoute } from './types/amroutes';\nimport { amRouteToFormAmRoute, formAmRouteToAmRoute, stringsToSelectableValues } from './utils/amroutes';\nimport { isVanillaPrometheusAlertManagerDataSource } from './utils/datasource';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AmRoutes: FC = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const [isRootRouteEditMode, setIsRootRouteEditMode] = useState(false);\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const {\n    result,\n    loading: resultLoading,\n    error: resultError,\n  } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n  const [rootRoute, id2ExistingRoute] = useMemo(() => amRouteToFormAmRoute(config?.route), [config?.route]);\n\n  const receivers = stringsToSelectableValues(\n    (config?.receivers ?? []).map((receiver: Receiver) => receiver.name)\n  ) as AmRouteReceiver[];\n\n  const isProvisioned = useMemo(() => Boolean(config?.route?.provenance), [config?.route]);\n\n  const enterRootRouteEditMode = () => {\n    setIsRootRouteEditMode(true);\n  };\n\n  const exitRootRouteEditMode = () => {\n    setIsRootRouteEditMode(false);\n  };\n\n  useCleanup((state) => state.unifiedAlerting.saveAMConfig);\n  const handleSave = (data: Partial<FormAmRoute>) => {\n    if (!result) {\n      return;\n    }\n\n    const newData = formAmRouteToAmRoute(\n      alertManagerSourceName,\n      {\n        ...rootRoute,\n        ...data,\n      },\n      id2ExistingRoute\n    );\n\n    if (isRootRouteEditMode) {\n      exitRootRouteEditMode();\n    }\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newData,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Saved',\n        refetch: true,\n      })\n    );\n  };\n\n  if (!alertManagerSourceName) {\n    return (\n      <AlertingPageWrapper pageId=\"am-routes\">\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    );\n  }\n\n  const readOnly = alertManagerSourceName\n    ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) || isProvisioned\n    : true;\n\n  return (\n    <AlertingPageWrapper pageId=\"am-routes\">\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      {resultError && !resultLoading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n          {resultError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {isProvisioned && <ProvisioningAlert resource={ProvisionedResource.RootNotificationPolicy} />}\n      {resultLoading && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n      {result && !resultLoading && !resultError && (\n        <>\n          <AmRootRoute\n            readOnly={readOnly}\n            alertManagerSourceName={alertManagerSourceName}\n            isEditMode={isRootRouteEditMode}\n            onSave={handleSave}\n            onEnterEditMode={enterRootRouteEditMode}\n            onExitEditMode={exitRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <AmSpecificRouting\n            alertManagerSourceName={alertManagerSourceName}\n            onChange={handleSave}\n            readOnly={readOnly}\n            onRootRouteEdit={enterRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <MuteTimingsTable alertManagerSourceName={alertManagerSourceName} />\n        </>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(AmRoutes, { style: 'page' });\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}