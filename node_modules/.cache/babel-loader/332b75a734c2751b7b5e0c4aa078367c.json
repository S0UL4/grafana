{"ast":null,"code":"var _UpgradeBox, _TeamSyncUpgradeConte;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { includes } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { featureEnabled } from '@grafana/runtime';\nimport { withTheme2 } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport config from 'app/core/config';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\nimport TeamGroupSync, { TeamSyncUpgradeContent } from './TeamGroupSync';\nimport TeamMembers from './TeamMembers';\nimport TeamPermissions from './TeamPermissions';\nimport TeamSettings from './TeamSettings';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar PageTypes;\n\n(function (PageTypes) {\n  PageTypes[\"Members\"] = \"members\";\n  PageTypes[\"Settings\"] = \"settings\";\n  PageTypes[\"GroupSync\"] = \"groupsync\";\n})(PageTypes || (PageTypes = {}));\n\nfunction mapStateToProps(state, props) {\n  var _props$match$params$p;\n\n  const teamId = parseInt(props.match.params.id, 10);\n  const team = getTeam(state.team, teamId);\n  let defaultPage = 'members';\n\n  if (contextSrv.accessControlEnabled()) {\n    // With RBAC the settings page will always be available\n    if (!team || !contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      defaultPage = 'settings';\n    }\n  }\n\n  const pageName = (_props$match$params$p = props.match.params.page) !== null && _props$match$params$p !== void 0 ? _props$match$params$p : defaultPage;\n  const teamLoadingNav = getTeamLoadingNav(pageName);\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\n  const members = getTeamMembers(state.team);\n  return {\n    navModel,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin,\n    // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user // this makes the feature toggle mockable/controllable from tests,\n\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport class TeamPages extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"textsAreEqual\", (text1, text2) => {\n      if (!text1 && !text2) {\n        return true;\n      }\n\n      if (!text1 || !text2) {\n        return false;\n      }\n\n      return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n    });\n\n    _defineProperty(this, \"hideTabsFromNonTeamAdmin\", (navModel, isSignedInUserTeamAdmin) => {\n      if (contextSrv.accessControlEnabled()) {\n        return navModel;\n      }\n\n      if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\n        navModel.main.children.filter(navItem => !this.textsAreEqual(navItem.text, PageTypes.Members)).map(navItem => {\n          navItem.hideFromTabs = true;\n        });\n      }\n\n      return navModel;\n    });\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: featureEnabled('teamsync')\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const {\n      loadTeam,\n      teamId\n    } = this.props;\n    this.setState({\n      isLoading: true\n    });\n    const team = await loadTeam(teamId); // With accesscontrol, the TeamPermissions will fetch team members\n\n    if (!contextSrv.accessControlEnabled()) {\n      await this.props.loadTeamMembers();\n    }\n\n    this.setState({\n      isLoading: false\n    });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  renderPage(isSignedInUserTeamAdmin) {\n    const {\n      isSyncEnabled\n    } = this.state;\n    const {\n      members,\n      team\n    } = this.props;\n    const currentPage = this.getCurrentPage();\n    const canReadTeam = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRead, team, isSignedInUserTeamAdmin);\n    const canReadTeamPermissions = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team, isSignedInUserTeamAdmin);\n    const canWriteTeamPermissions = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsPermissionsWrite, team, isSignedInUserTeamAdmin);\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        if (contextSrv.accessControlEnabled()) {\n          return /*#__PURE__*/_jsx(TeamPermissions, {\n            team: team\n          });\n        } else {\n          return /*#__PURE__*/_jsx(TeamMembers, {\n            syncEnabled: isSyncEnabled,\n            members: members\n          });\n        }\n\n      case PageTypes.Settings:\n        return canReadTeam && /*#__PURE__*/_jsx(TeamSettings, {\n          team: team\n        });\n\n      case PageTypes.GroupSync:\n        if (isSyncEnabled) {\n          if (canReadTeamPermissions) {\n            return /*#__PURE__*/_jsx(TeamGroupSync, {\n              isReadOnly: !canWriteTeamPermissions\n            });\n          }\n        } else if (config.featureToggles.featureHighlights) {\n          return /*#__PURE__*/_jsxs(_Fragment, {\n            children: [_UpgradeBox || (_UpgradeBox = /*#__PURE__*/_jsx(UpgradeBox, {\n              featureName: 'team sync',\n              featureId: 'team-sync'\n            })), _TeamSyncUpgradeConte || (_TeamSyncUpgradeConte = /*#__PURE__*/_jsx(TeamSyncUpgradeContent, {}))]\n          });\n        }\n\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      team,\n      navModel,\n      members,\n      editorsCanAdmin,\n      signedInUser\n    } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({\n      members,\n      editorsCanAdmin,\n      signedInUser\n    });\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin),\n      children: /*#__PURE__*/_jsx(Page.Contents, {\n        isLoading: this.state.isLoading,\n        children: team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)\n      })\n    });\n  }\n\n}\nexport default connector(withTheme2(TeamPages));","map":{"version":3,"names":["includes","React","PureComponent","connect","featureEnabled","withTheme2","Page","UpgradeBox","config","getNavModel","contextSrv","AccessControlAction","TeamGroupSync","TeamSyncUpgradeContent","TeamMembers","TeamPermissions","TeamSettings","loadTeam","loadTeamMembers","getTeamLoadingNav","getTeam","getTeamMembers","isSignedInUserTeamAdmin","PageTypes","mapStateToProps","state","props","teamId","parseInt","match","params","id","team","defaultPage","accessControlEnabled","hasPermissionInMetadata","ActionTeamsPermissionsRead","pageName","page","teamLoadingNav","navModel","navIndex","members","editorsCanAdmin","signedInUser","user","mapDispatchToProps","connector","TeamPages","constructor","text1","text2","toLocaleLowerCase","main","children","filter","navItem","textsAreEqual","text","Members","map","hideFromTabs","isLoading","isSyncEnabled","componentDidMount","fetchTeam","setState","getCurrentPage","pages","currentPage","renderPage","canReadTeam","hasAccessInMetadata","ActionTeamsRead","canReadTeamPermissions","canWriteTeamPermissions","ActionTeamsPermissionsWrite","Settings","GroupSync","featureToggles","featureHighlights","render","isTeamAdmin","hideTabsFromNonTeamAdmin","Object","keys","length"],"sources":["/home/soula/grafana/public/app/features/teams/TeamPages.tsx"],"sourcesContent":["import { includes } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport config from 'app/core/config';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport TeamGroupSync, { TeamSyncUpgradeContent } from './TeamGroupSync';\nimport TeamMembers from './TeamMembers';\nimport TeamPermissions from './TeamPermissions';\nimport TeamSettings from './TeamSettings';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\n\ninterface TeamPageRouteParams {\n  id: string;\n  page: string | null;\n}\n\nexport interface OwnProps extends GrafanaRouteComponentProps<TeamPageRouteParams>, Themeable2 {}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const teamId = parseInt(props.match.params.id, 10);\n  const team = getTeam(state.team, teamId);\n  let defaultPage = 'members';\n  if (contextSrv.accessControlEnabled()) {\n    // With RBAC the settings page will always be available\n    if (!team || !contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      defaultPage = 'settings';\n    }\n  }\n  const pageName = props.match.params.page ?? defaultPage;\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\n  const members = getTeamMembers(state.team);\n\n  return {\n    navModel,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: featureEnabled('teamsync'),\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    // With accesscontrol, the TeamPermissions will fetch team members\n    if (!contextSrv.accessControlEnabled()) {\n      await this.props.loadTeamMembers();\n    }\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (navModel: NavModel, isSignedInUserTeamAdmin: boolean) => {\n    if (contextSrv.accessControlEnabled()) {\n      return navModel;\n    }\n\n    if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\n      navModel.main.children\n        .filter((navItem) => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map((navItem) => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return navModel;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members, team } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    const canReadTeam = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canReadTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canWriteTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsWrite,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        if (contextSrv.accessControlEnabled()) {\n          return <TeamPermissions team={team!} />;\n        } else {\n          return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n        }\n      case PageTypes.Settings:\n        return canReadTeam && <TeamSettings team={team!} />;\n      case PageTypes.GroupSync:\n        if (isSyncEnabled) {\n          if (canReadTeamPermissions) {\n            return <TeamGroupSync isReadOnly={!canWriteTeamPermissions} />;\n          }\n        } else if (config.featureToggles.featureHighlights) {\n          return (\n            <>\n              <UpgradeBox featureName={'team sync'} featureId={'team-sync'} />\n              <TeamSyncUpgradeContent />\n            </>\n          );\n        }\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, navModel, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navModel={this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(withTheme2(TeamPages));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}