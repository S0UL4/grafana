{"ast":null,"code":"const _excluded = [\"includeNoData\", \"includeError\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useMemo } from 'react';\nimport { Select } from '@grafana/ui';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst options = [{\n  value: GrafanaAlertStateDecision.Alerting,\n  label: 'Alerting'\n}, {\n  value: GrafanaAlertStateDecision.NoData,\n  label: 'No Data'\n}, {\n  value: GrafanaAlertStateDecision.OK,\n  label: 'OK'\n}, {\n  value: GrafanaAlertStateDecision.Error,\n  label: 'Error'\n}];\nexport const GrafanaAlertStatePicker = _ref => {\n  let {\n    includeNoData,\n    includeError\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const opts = useMemo(() => {\n    if (!includeNoData) {\n      return options.filter(opt => opt.value !== GrafanaAlertStateDecision.NoData);\n    }\n\n    if (!includeError) {\n      return options.filter(opt => opt.value !== GrafanaAlertStateDecision.Error);\n    }\n\n    return options;\n  }, [includeNoData, includeError]);\n  return /*#__PURE__*/_jsx(Select, Object.assign({\n    options: opts\n  }, props));\n};","map":{"version":3,"names":["React","useMemo","Select","GrafanaAlertStateDecision","options","value","Alerting","label","NoData","OK","Error","GrafanaAlertStatePicker","includeNoData","includeError","props","opts","filter","opt"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/GrafanaAlertStatePicker.tsx"],"sourcesContent":["import React, { FC, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { SelectBaseProps } from '@grafana/ui/src/components/Select/types';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\n\ntype Props = Omit<SelectBaseProps<GrafanaAlertStateDecision>, 'options'> & {\n  includeNoData: boolean;\n  includeError: boolean;\n};\n\nconst options: SelectableValue[] = [\n  { value: GrafanaAlertStateDecision.Alerting, label: 'Alerting' },\n  { value: GrafanaAlertStateDecision.NoData, label: 'No Data' },\n  { value: GrafanaAlertStateDecision.OK, label: 'OK' },\n  { value: GrafanaAlertStateDecision.Error, label: 'Error' },\n];\n\nexport const GrafanaAlertStatePicker: FC<Props> = ({ includeNoData, includeError, ...props }) => {\n  const opts = useMemo(() => {\n    if (!includeNoData) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.NoData);\n    }\n    if (!includeError) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.Error);\n    }\n    return options;\n  }, [includeNoData, includeError]);\n  return <Select options={opts} {...props} />;\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAEA,SAASC,yBAAT,QAA0C,gCAA1C;;AAOA,MAAMC,OAA0B,GAAG,CACjC;EAAEC,KAAK,EAAEF,yBAAyB,CAACG,QAAnC;EAA6CC,KAAK,EAAE;AAApD,CADiC,EAEjC;EAAEF,KAAK,EAAEF,yBAAyB,CAACK,MAAnC;EAA2CD,KAAK,EAAE;AAAlD,CAFiC,EAGjC;EAAEF,KAAK,EAAEF,yBAAyB,CAACM,EAAnC;EAAuCF,KAAK,EAAE;AAA9C,CAHiC,EAIjC;EAAEF,KAAK,EAAEF,yBAAyB,CAACO,KAAnC;EAA0CH,KAAK,EAAE;AAAjD,CAJiC,CAAnC;AAOA,OAAO,MAAMI,uBAAkC,GAAG,QAA+C;EAAA,IAA9C;IAAEC,aAAF;IAAiBC;EAAjB,CAA8C;EAAA,IAAZC,KAAY;;EAC/F,MAAMC,IAAI,GAAGd,OAAO,CAAC,MAAM;IACzB,IAAI,CAACW,aAAL,EAAoB;MAClB,OAAOR,OAAO,CAACY,MAAR,CAAgBC,GAAD,IAASA,GAAG,CAACZ,KAAJ,KAAcF,yBAAyB,CAACK,MAAhE,CAAP;IACD;;IACD,IAAI,CAACK,YAAL,EAAmB;MACjB,OAAOT,OAAO,CAACY,MAAR,CAAgBC,GAAD,IAASA,GAAG,CAACZ,KAAJ,KAAcF,yBAAyB,CAACO,KAAhE,CAAP;IACD;;IACD,OAAON,OAAP;EACD,CARmB,EAQjB,CAACQ,aAAD,EAAgBC,YAAhB,CARiB,CAApB;EASA,oBAAO,KAAC,MAAD;IAAQ,OAAO,EAAEE;EAAjB,GAA2BD,KAA3B,EAAP;AACD,CAXM"},"metadata":{},"sourceType":"module"}