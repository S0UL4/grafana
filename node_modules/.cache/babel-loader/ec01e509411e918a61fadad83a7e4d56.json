{"ast":null,"code":"var _h, _Button;\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Button, Input, Field } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchBuiltinRoles, fetchRoleOptions, updateUserRoles } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgRole } from 'app/types';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst mapStateToProps = state => ({\n  navModel: getNavModel(state.navIndex, 'serviceaccounts')\n});\n\nconst createServiceAccount = async sa => getBackendSrv().post('/api/serviceaccounts/', sa);\n\nconst updateServiceAccount = async (id, sa) => getBackendSrv().patch(`/api/serviceaccounts/${id}`, sa);\n\nexport const ServiceAccountCreatePageUnconnected = ({\n  navModel\n}) => {\n  const [roleOptions, setRoleOptions] = useState([]);\n  const [builtinRoles, setBuiltinRoles] = useState({});\n  const [pendingRoles, setPendingRoles] = useState([]);\n  const currentOrgId = contextSrv.user.orgId;\n  const [serviceAccount, setServiceAccount] = useState({\n    id: 0,\n    orgId: contextSrv.user.orgId,\n    role: OrgRole.Viewer,\n    tokens: 0,\n    name: '',\n    login: '',\n    isDisabled: false,\n    createdAt: '',\n    teams: []\n  });\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(currentOrgId);\n          setRoleOptions(options);\n        }\n\n        if (contextSrv.hasPermission(AccessControlAction.ActionBuiltinRolesList)) {\n          const builtInRoles = await fetchBuiltinRoles(currentOrgId);\n          setBuiltinRoles(builtInRoles);\n        }\n      } catch (e) {\n        console.error('Error loading options', e);\n      }\n    }\n\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [currentOrgId]);\n  const history = useHistory();\n  const onSubmit = useCallback(async data => {\n    data.role = serviceAccount.role;\n    const response = await createServiceAccount(data);\n\n    try {\n      const newAccount = {\n        avatarUrl: response.avatarUrl,\n        id: response.id,\n        isDisabled: response.isDisabled,\n        login: response.login,\n        name: response.name,\n        orgId: response.orgId,\n        role: response.role,\n        tokens: response.tokens\n      };\n      await updateServiceAccount(response.id, data);\n\n      if (contextSrv.licensedAccessControlEnabled()) {\n        await updateUserRoles(pendingRoles, newAccount.id, newAccount.orgId);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    history.push('/org/serviceaccounts/');\n  }, [history, serviceAccount.role, pendingRoles]);\n\n  const onRoleChange = role => {\n    setServiceAccount(Object.assign({}, serviceAccount, {\n      role: role\n    }));\n  };\n\n  const onPendingRolesUpdate = (roles, userId, orgId) => {\n    // keep the new role assignments for user\n    setPendingRoles(roles);\n  };\n\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      children: [_h || (_h = /*#__PURE__*/_jsx(\"h1\", {\n        children: \"Create service account\"\n      })), /*#__PURE__*/_jsx(Form, {\n        onSubmit: onSubmit,\n        validateOn: \"onSubmit\",\n        children: ({\n          register,\n          errors\n        }) => {\n          return /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Field, {\n              label: \"Display name\",\n              required: true,\n              invalid: !!errors.name,\n              error: errors.name ? 'Display name is required' : undefined,\n              children: /*#__PURE__*/_jsx(Input, Object.assign({\n                id: \"display-name-input\"\n              }, register('name', {\n                required: true\n              }), {\n                autoFocus: true\n              }))\n            }), /*#__PURE__*/_jsx(Field, {\n              label: \"Role\",\n              children: contextSrv.licensedAccessControlEnabled() ? /*#__PURE__*/_jsx(UserRolePicker, {\n                userId: serviceAccount.id || 0,\n                orgId: serviceAccount.orgId,\n                builtInRole: serviceAccount.role,\n                builtInRoles: builtinRoles,\n                onBuiltinRoleChange: onRoleChange,\n                builtinRolesDisabled: false,\n                roleOptions: roleOptions,\n                updateDisabled: true,\n                onApplyRoles: onPendingRolesUpdate,\n                pendingRoles: pendingRoles\n              }) : /*#__PURE__*/_jsx(OrgRolePicker, {\n                \"aria-label\": \"Role\",\n                value: serviceAccount.role,\n                onChange: onRoleChange\n              })\n            }), _Button || (_Button = /*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              children: \"Create\"\n            }))]\n          });\n        }\n      })]\n    })\n  });\n};\nexport default connect(mapStateToProps)(ServiceAccountCreatePageUnconnected);","map":{"version":3,"names":["React","useCallback","useEffect","useState","connect","useHistory","getBackendSrv","Form","Button","Input","Field","Page","UserRolePicker","fetchBuiltinRoles","fetchRoleOptions","updateUserRoles","contextSrv","AccessControlAction","OrgRole","getNavModel","OrgRolePicker","mapStateToProps","state","navModel","navIndex","createServiceAccount","sa","post","updateServiceAccount","id","patch","ServiceAccountCreatePageUnconnected","roleOptions","setRoleOptions","builtinRoles","setBuiltinRoles","pendingRoles","setPendingRoles","currentOrgId","user","orgId","serviceAccount","setServiceAccount","role","Viewer","tokens","name","login","isDisabled","createdAt","teams","fetchOptions","hasPermission","ActionRolesList","options","ActionBuiltinRolesList","builtInRoles","e","console","error","licensedAccessControlEnabled","history","onSubmit","data","response","newAccount","avatarUrl","push","onRoleChange","onPendingRolesUpdate","roles","userId","register","errors","undefined","required"],"sources":["/home/soula/grafana/public/app/features/serviceaccounts/ServiceAccountCreatePage.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { NavModel } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Button, Input, Field } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchBuiltinRoles, fetchRoleOptions, updateUserRoles } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgRole, Role, ServiceAccountCreateApiResponse, ServiceAccountDTO } from 'app/types';\n\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { StoreState } from '../../types';\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\nexport interface Props {\n  navModel: NavModel;\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'serviceaccounts'),\n});\n\nconst createServiceAccount = async (sa: ServiceAccountDTO) => getBackendSrv().post('/api/serviceaccounts/', sa);\n\nconst updateServiceAccount = async (id: number, sa: ServiceAccountDTO) =>\n  getBackendSrv().patch(`/api/serviceaccounts/${id}`, sa);\n\nexport const ServiceAccountCreatePageUnconnected = ({ navModel }: Props): JSX.Element => {\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const [builtinRoles, setBuiltinRoles] = useState<{ [key: string]: Role[] }>({});\n  const [pendingRoles, setPendingRoles] = useState<Role[]>([]);\n\n  const currentOrgId = contextSrv.user.orgId;\n  const [serviceAccount, setServiceAccount] = useState<ServiceAccountDTO>({\n    id: 0,\n    orgId: contextSrv.user.orgId,\n    role: OrgRole.Viewer,\n    tokens: 0,\n    name: '',\n    login: '',\n    isDisabled: false,\n    createdAt: '',\n    teams: [],\n  });\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(currentOrgId);\n          setRoleOptions(options);\n        }\n\n        if (contextSrv.hasPermission(AccessControlAction.ActionBuiltinRolesList)) {\n          const builtInRoles = await fetchBuiltinRoles(currentOrgId);\n          setBuiltinRoles(builtInRoles);\n        }\n      } catch (e) {\n        console.error('Error loading options', e);\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [currentOrgId]);\n\n  const history = useHistory();\n\n  const onSubmit = useCallback(\n    async (data: ServiceAccountDTO) => {\n      data.role = serviceAccount.role;\n      const response = await createServiceAccount(data);\n      try {\n        const newAccount: ServiceAccountCreateApiResponse = {\n          avatarUrl: response.avatarUrl,\n          id: response.id,\n          isDisabled: response.isDisabled,\n          login: response.login,\n          name: response.name,\n          orgId: response.orgId,\n          role: response.role,\n          tokens: response.tokens,\n        };\n        await updateServiceAccount(response.id, data);\n        if (contextSrv.licensedAccessControlEnabled()) {\n          await updateUserRoles(pendingRoles, newAccount.id, newAccount.orgId);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      history.push('/org/serviceaccounts/');\n    },\n    [history, serviceAccount.role, pendingRoles]\n  );\n\n  const onRoleChange = (role: OrgRole) => {\n    setServiceAccount({\n      ...serviceAccount,\n      role: role,\n    });\n  };\n\n  const onPendingRolesUpdate = (roles: Role[], userId: number, orgId: number | undefined) => {\n    // keep the new role assignments for user\n    setPendingRoles(roles);\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h1>Create service account</h1>\n        <Form onSubmit={onSubmit} validateOn=\"onSubmit\">\n          {({ register, errors }) => {\n            return (\n              <>\n                <Field\n                  label=\"Display name\"\n                  required\n                  invalid={!!errors.name}\n                  error={errors.name ? 'Display name is required' : undefined}\n                >\n                  <Input id=\"display-name-input\" {...register('name', { required: true })} autoFocus />\n                </Field>\n                <Field label=\"Role\">\n                  {contextSrv.licensedAccessControlEnabled() ? (\n                    <UserRolePicker\n                      userId={serviceAccount.id || 0}\n                      orgId={serviceAccount.orgId}\n                      builtInRole={serviceAccount.role}\n                      builtInRoles={builtinRoles}\n                      onBuiltinRoleChange={onRoleChange}\n                      builtinRolesDisabled={false}\n                      roleOptions={roleOptions}\n                      updateDisabled={true}\n                      onApplyRoles={onPendingRolesUpdate}\n                      pendingRoles={pendingRoles}\n                    />\n                  ) : (\n                    <OrgRolePicker aria-label=\"Role\" value={serviceAccount.role} onChange={onRoleChange} />\n                  )}\n                </Field>\n                <Button type=\"submit\">Create</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connect(mapStateToProps)(ServiceAccountCreatePageUnconnected);\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAGA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,KAA9B,QAA2C,aAA3C;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,SAASC,cAAT,QAA+B,+CAA/B;AACA,SAASC,iBAAT,EAA4BC,gBAA5B,EAA8CC,eAA9C,QAAqE,oCAArE;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,mBAAT,EAA8BC,OAA9B,QAAuG,WAAvG;AAEA,SAASC,WAAT,QAA4B,+BAA5B;AAEA,SAASC,aAAT,QAA8B,wBAA9B;;;;;AAMA,MAAMC,eAAe,GAAIC,KAAD,KAAwB;EAC9CC,QAAQ,EAAEJ,WAAW,CAACG,KAAK,CAACE,QAAP,EAAiB,iBAAjB;AADyB,CAAxB,CAAxB;;AAIA,MAAMC,oBAAoB,GAAG,MAAOC,EAAP,IAAiCpB,aAAa,GAAGqB,IAAhB,CAAqB,uBAArB,EAA8CD,EAA9C,CAA9D;;AAEA,MAAME,oBAAoB,GAAG,OAAOC,EAAP,EAAmBH,EAAnB,KAC3BpB,aAAa,GAAGwB,KAAhB,CAAuB,wBAAuBD,EAAG,EAAjD,EAAoDH,EAApD,CADF;;AAGA,OAAO,MAAMK,mCAAmC,GAAG,CAAC;EAAER;AAAF,CAAD,KAAsC;EACvF,MAAM,CAACS,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAS,EAAT,CAA9C;EACA,MAAM,CAAC+B,YAAD,EAAeC,eAAf,IAAkChC,QAAQ,CAA4B,EAA5B,CAAhD;EACA,MAAM,CAACiC,YAAD,EAAeC,eAAf,IAAkClC,QAAQ,CAAS,EAAT,CAAhD;EAEA,MAAMmC,YAAY,GAAGtB,UAAU,CAACuB,IAAX,CAAgBC,KAArC;EACA,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCvC,QAAQ,CAAoB;IACtE0B,EAAE,EAAE,CADkE;IAEtEW,KAAK,EAAExB,UAAU,CAACuB,IAAX,CAAgBC,KAF+C;IAGtEG,IAAI,EAAEzB,OAAO,CAAC0B,MAHwD;IAItEC,MAAM,EAAE,CAJ8D;IAKtEC,IAAI,EAAE,EALgE;IAMtEC,KAAK,EAAE,EAN+D;IAOtEC,UAAU,EAAE,KAP0D;IAQtEC,SAAS,EAAE,EAR2D;IAStEC,KAAK,EAAE;EAT+D,CAApB,CAApD;EAYAhD,SAAS,CAAC,MAAM;IACd,eAAeiD,YAAf,GAA8B;MAC5B,IAAI;QACF,IAAInC,UAAU,CAACoC,aAAX,CAAyBnC,mBAAmB,CAACoC,eAA7C,CAAJ,EAAmE;UACjE,IAAIC,OAAO,GAAG,MAAMxC,gBAAgB,CAACwB,YAAD,CAApC;UACAL,cAAc,CAACqB,OAAD,CAAd;QACD;;QAED,IAAItC,UAAU,CAACoC,aAAX,CAAyBnC,mBAAmB,CAACsC,sBAA7C,CAAJ,EAA0E;UACxE,MAAMC,YAAY,GAAG,MAAM3C,iBAAiB,CAACyB,YAAD,CAA5C;UACAH,eAAe,CAACqB,YAAD,CAAf;QACD;MACF,CAVD,CAUE,OAAOC,CAAP,EAAU;QACVC,OAAO,CAACC,KAAR,CAAc,uBAAd,EAAuCF,CAAvC;MACD;IACF;;IACD,IAAIzC,UAAU,CAAC4C,4BAAX,EAAJ,EAA+C;MAC7CT,YAAY;IACb;EACF,CAnBQ,EAmBN,CAACb,YAAD,CAnBM,CAAT;EAqBA,MAAMuB,OAAO,GAAGxD,UAAU,EAA1B;EAEA,MAAMyD,QAAQ,GAAG7D,WAAW,CAC1B,MAAO8D,IAAP,IAAmC;IACjCA,IAAI,CAACpB,IAAL,GAAYF,cAAc,CAACE,IAA3B;IACA,MAAMqB,QAAQ,GAAG,MAAMvC,oBAAoB,CAACsC,IAAD,CAA3C;;IACA,IAAI;MACF,MAAME,UAA2C,GAAG;QAClDC,SAAS,EAAEF,QAAQ,CAACE,SAD8B;QAElDrC,EAAE,EAAEmC,QAAQ,CAACnC,EAFqC;QAGlDmB,UAAU,EAAEgB,QAAQ,CAAChB,UAH6B;QAIlDD,KAAK,EAAEiB,QAAQ,CAACjB,KAJkC;QAKlDD,IAAI,EAAEkB,QAAQ,CAAClB,IALmC;QAMlDN,KAAK,EAAEwB,QAAQ,CAACxB,KANkC;QAOlDG,IAAI,EAAEqB,QAAQ,CAACrB,IAPmC;QAQlDE,MAAM,EAAEmB,QAAQ,CAACnB;MARiC,CAApD;MAUA,MAAMjB,oBAAoB,CAACoC,QAAQ,CAACnC,EAAV,EAAckC,IAAd,CAA1B;;MACA,IAAI/C,UAAU,CAAC4C,4BAAX,EAAJ,EAA+C;QAC7C,MAAM7C,eAAe,CAACqB,YAAD,EAAe6B,UAAU,CAACpC,EAA1B,EAA8BoC,UAAU,CAACzB,KAAzC,CAArB;MACD;IACF,CAfD,CAeE,OAAOiB,CAAP,EAAU;MACVC,OAAO,CAACC,KAAR,CAAcF,CAAd;IACD;;IACDI,OAAO,CAACM,IAAR,CAAa,uBAAb;EACD,CAvByB,EAwB1B,CAACN,OAAD,EAAUpB,cAAc,CAACE,IAAzB,EAA+BP,YAA/B,CAxB0B,CAA5B;;EA2BA,MAAMgC,YAAY,GAAIzB,IAAD,IAAmB;IACtCD,iBAAiB,mBACZD,cADY;MAEfE,IAAI,EAAEA;IAFS,GAAjB;EAID,CALD;;EAOA,MAAM0B,oBAAoB,GAAG,CAACC,KAAD,EAAgBC,MAAhB,EAAgC/B,KAAhC,KAA8D;IACzF;IACAH,eAAe,CAACiC,KAAD,CAAf;EACD,CAHD;;EAKA,oBACE,KAAC,IAAD;IAAM,QAAQ,EAAE/C,QAAhB;IAAA,uBACE,MAAC,IAAD,CAAM,QAAN;MAAA,oCACE;QAAA;MAAA,EADF,gBAEE,KAAC,IAAD;QAAM,QAAQ,EAAEuC,QAAhB;QAA0B,UAAU,EAAC,UAArC;QAAA,UACG,CAAC;UAAEU,QAAF;UAAYC;QAAZ,CAAD,KAA0B;UACzB,oBACE;YAAA,wBACE,KAAC,KAAD;cACE,KAAK,EAAC,cADR;cAEE,QAAQ,MAFV;cAGE,OAAO,EAAE,CAAC,CAACA,MAAM,CAAC3B,IAHpB;cAIE,KAAK,EAAE2B,MAAM,CAAC3B,IAAP,GAAc,0BAAd,GAA2C4B,SAJpD;cAAA,uBAME,KAAC,KAAD;gBAAO,EAAE,EAAC;cAAV,GAAmCF,QAAQ,CAAC,MAAD,EAAS;gBAAEG,QAAQ,EAAE;cAAZ,CAAT,CAA3C;gBAAyE,SAAS;cAAlF;YANF,EADF,eASE,KAAC,KAAD;cAAO,KAAK,EAAC,MAAb;cAAA,UACG3D,UAAU,CAAC4C,4BAAX,kBACC,KAAC,cAAD;gBACE,MAAM,EAAEnB,cAAc,CAACZ,EAAf,IAAqB,CAD/B;gBAEE,KAAK,EAAEY,cAAc,CAACD,KAFxB;gBAGE,WAAW,EAAEC,cAAc,CAACE,IAH9B;gBAIE,YAAY,EAAET,YAJhB;gBAKE,mBAAmB,EAAEkC,YALvB;gBAME,oBAAoB,EAAE,KANxB;gBAOE,WAAW,EAAEpC,WAPf;gBAQE,cAAc,EAAE,IARlB;gBASE,YAAY,EAAEqC,oBAThB;gBAUE,YAAY,EAAEjC;cAVhB,EADD,gBAcC,KAAC,aAAD;gBAAe,cAAW,MAA1B;gBAAiC,KAAK,EAAEK,cAAc,CAACE,IAAvD;gBAA6D,QAAQ,EAAEyB;cAAvE;YAfJ,EATF,qCA2BE,KAAC,MAAD;cAAQ,IAAI,EAAC,QAAb;cAAA;YAAA,EA3BF;UAAA,EADF;QA+BD;MAjCH,EAFF;IAAA;EADF,EADF;AA0CD,CA1HM;AA4HP,eAAehE,OAAO,CAACiB,eAAD,CAAP,CAAyBU,mCAAzB,CAAf"},"metadata":{},"sourceType":"module"}