{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE } from '../constants';\nimport { getInstanceState } from '../state/selectors';\nimport { initialVariablesState } from '../state/types';\nimport { initialVariableModelState } from '../types';\nexport const initialCustomVariableModelState = Object.assign({}, initialVariableModelState, {\n  type: 'custom',\n  multi: false,\n  includeAll: false,\n  allValue: null,\n  query: '',\n  options: [],\n  current: {}\n});\nexport const customVariableSlice = createSlice({\n  name: 'templating/custom',\n  initialState: initialVariablesState,\n  reducers: {\n    createCustomOptionsFromQuery: (state, action) => {\n      var _query$match;\n\n      const instanceState = getInstanceState(state, action.payload.id);\n      const {\n        includeAll,\n        query\n      } = instanceState;\n      const match = (_query$match = query.match(/(?:\\\\,|[^,])+/g)) !== null && _query$match !== void 0 ? _query$match : [];\n      const options = match.map(text => {\n        var _$exec;\n\n        text = text.replace(/\\\\,/g, ',');\n        const textMatch = (_$exec = /^(.+)\\s:\\s(.+)$/g.exec(text)) !== null && _$exec !== void 0 ? _$exec : [];\n\n        if (textMatch.length === 3) {\n          const [, key, value] = textMatch;\n          return {\n            text: key.trim(),\n            value: value.trim(),\n            selected: false\n          };\n        } else {\n          return {\n            text: text.trim(),\n            value: text.trim(),\n            selected: false\n          };\n        }\n      });\n\n      if (includeAll) {\n        options.unshift({\n          text: ALL_VARIABLE_TEXT,\n          value: ALL_VARIABLE_VALUE,\n          selected: false\n        });\n      }\n\n      instanceState.options = options;\n    }\n  }\n});\nexport const customVariableReducer = customVariableSlice.reducer;\nexport const {\n  createCustomOptionsFromQuery\n} = customVariableSlice.actions;","map":{"version":3,"names":["createSlice","ALL_VARIABLE_TEXT","ALL_VARIABLE_VALUE","getInstanceState","initialVariablesState","initialVariableModelState","initialCustomVariableModelState","type","multi","includeAll","allValue","query","options","current","customVariableSlice","name","initialState","reducers","createCustomOptionsFromQuery","state","action","instanceState","payload","id","match","map","text","replace","textMatch","exec","length","key","value","trim","selected","unshift","customVariableReducer","reducer","actions"],"sources":["/home/soula/grafana/public/app/features/variables/custom/reducer.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE } from '../constants';\nimport { getInstanceState } from '../state/selectors';\nimport { initialVariablesState, VariablePayload, VariablesState } from '../state/types';\nimport { CustomVariableModel, initialVariableModelState, VariableOption } from '../types';\n\nexport const initialCustomVariableModelState: CustomVariableModel = {\n  ...initialVariableModelState,\n  type: 'custom',\n  multi: false,\n  includeAll: false,\n  allValue: null,\n  query: '',\n  options: [],\n  current: {} as VariableOption,\n};\n\nexport const customVariableSlice = createSlice({\n  name: 'templating/custom',\n  initialState: initialVariablesState,\n  reducers: {\n    createCustomOptionsFromQuery: (state: VariablesState, action: PayloadAction<VariablePayload>) => {\n      const instanceState = getInstanceState<CustomVariableModel>(state, action.payload.id);\n      const { includeAll, query } = instanceState;\n\n      const match = query.match(/(?:\\\\,|[^,])+/g) ?? [];\n      const options = match.map((text) => {\n        text = text.replace(/\\\\,/g, ',');\n        const textMatch = /^(.+)\\s:\\s(.+)$/g.exec(text) ?? [];\n        if (textMatch.length === 3) {\n          const [, key, value] = textMatch;\n          return { text: key.trim(), value: value.trim(), selected: false };\n        } else {\n          return { text: text.trim(), value: text.trim(), selected: false };\n        }\n      });\n\n      if (includeAll) {\n        options.unshift({ text: ALL_VARIABLE_TEXT, value: ALL_VARIABLE_VALUE, selected: false });\n      }\n\n      instanceState.options = options;\n    },\n  },\n});\n\nexport const customVariableReducer = customVariableSlice.reducer;\n\nexport const { createCustomOptionsFromQuery } = customVariableSlice.actions;\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,cAAtD;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,qBAAT,QAAuE,gBAAvE;AACA,SAA8BC,yBAA9B,QAA+E,UAA/E;AAEA,OAAO,MAAMC,+BAAoD,qBAC5DD,yBAD4D;EAE/DE,IAAI,EAAE,QAFyD;EAG/DC,KAAK,EAAE,KAHwD;EAI/DC,UAAU,EAAE,KAJmD;EAK/DC,QAAQ,EAAE,IALqD;EAM/DC,KAAK,EAAE,EANwD;EAO/DC,OAAO,EAAE,EAPsD;EAQ/DC,OAAO,EAAE;AARsD,EAA1D;AAWP,OAAO,MAAMC,mBAAmB,GAAGd,WAAW,CAAC;EAC7Ce,IAAI,EAAE,mBADuC;EAE7CC,YAAY,EAAEZ,qBAF+B;EAG7Ca,QAAQ,EAAE;IACRC,4BAA4B,EAAE,CAACC,KAAD,EAAwBC,MAAxB,KAAmE;MAAA;;MAC/F,MAAMC,aAAa,GAAGlB,gBAAgB,CAAsBgB,KAAtB,EAA6BC,MAAM,CAACE,OAAP,CAAeC,EAA5C,CAAtC;MACA,MAAM;QAAEd,UAAF;QAAcE;MAAd,IAAwBU,aAA9B;MAEA,MAAMG,KAAK,mBAAGb,KAAK,CAACa,KAAN,CAAY,gBAAZ,CAAH,uDAAoC,EAA/C;MACA,MAAMZ,OAAO,GAAGY,KAAK,CAACC,GAAN,CAAWC,IAAD,IAAU;QAAA;;QAClCA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,MAAb,EAAqB,GAArB,CAAP;QACA,MAAMC,SAAS,aAAG,mBAAmBC,IAAnB,CAAwBH,IAAxB,CAAH,2CAAoC,EAAnD;;QACA,IAAIE,SAAS,CAACE,MAAV,KAAqB,CAAzB,EAA4B;UAC1B,MAAM,GAAGC,GAAH,EAAQC,KAAR,IAAiBJ,SAAvB;UACA,OAAO;YAAEF,IAAI,EAAEK,GAAG,CAACE,IAAJ,EAAR;YAAoBD,KAAK,EAAEA,KAAK,CAACC,IAAN,EAA3B;YAAyCC,QAAQ,EAAE;UAAnD,CAAP;QACD,CAHD,MAGO;UACL,OAAO;YAAER,IAAI,EAAEA,IAAI,CAACO,IAAL,EAAR;YAAqBD,KAAK,EAAEN,IAAI,CAACO,IAAL,EAA5B;YAAyCC,QAAQ,EAAE;UAAnD,CAAP;QACD;MACF,CATe,CAAhB;;MAWA,IAAIzB,UAAJ,EAAgB;QACdG,OAAO,CAACuB,OAAR,CAAgB;UAAET,IAAI,EAAEzB,iBAAR;UAA2B+B,KAAK,EAAE9B,kBAAlC;UAAsDgC,QAAQ,EAAE;QAAhE,CAAhB;MACD;;MAEDb,aAAa,CAACT,OAAd,GAAwBA,OAAxB;IACD;EAtBO;AAHmC,CAAD,CAAvC;AA6BP,OAAO,MAAMwB,qBAAqB,GAAGtB,mBAAmB,CAACuB,OAAlD;AAEP,OAAO,MAAM;EAAEnB;AAAF,IAAmCJ,mBAAmB,CAACwB,OAA7D"},"metadata":{},"sourceType":"module"}