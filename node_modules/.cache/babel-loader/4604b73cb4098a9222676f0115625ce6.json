{"ast":null,"code":"metricSegmentModel.$inject = [\"uiSegmentSrv\"];\nmetricSegment.$inject = [\"$compile\", \"$sce\", \"templateSrv\"];\nimport $ from 'jquery';\nimport { debounce, find, indexOf, map, escape, unescape } from 'lodash';\nimport coreModule from './core_module';\n/** @ngInject */\n\nexport function metricSegment($compile, $sce, templateSrv) {\n  const inputTemplate = '<input type=\"text\" data-provide=\"typeahead\" ' + ' class=\"gf-form-input input-medium\"' + ' spellcheck=\"false\" style=\"display:none\"></input>';\n  const linkTemplate = '<a class=\"gf-form-label\" ng-class=\"segment.cssClass\" ' + 'tabindex=\"1\" give-focus=\"segment.focus\" ng-bind-html=\"segment.html\"></a>';\n  const selectTemplate = '<a class=\"gf-form-input gf-form-input--dropdown\" ng-class=\"segment.cssClass\" ' + 'tabindex=\"1\" give-focus=\"segment.focus\" ng-bind-html=\"segment.html\"></a>';\n  return {\n    scope: {\n      segment: '=',\n      getOptions: '&',\n      onChange: '&',\n      debounce: '@'\n    },\n    link: ($scope, elem) => {\n      const $input = $(inputTemplate);\n      const segment = $scope.segment;\n      const $button = $(segment.selectMode ? selectTemplate : linkTemplate);\n      let options = null;\n      let cancelBlur = null;\n      let linkMode = true;\n      const debounceLookup = $scope.debounce;\n      $input.appendTo(elem);\n      $button.appendTo(elem);\n\n      $scope.updateVariableValue = value => {\n        if (value === '' || segment.value === value) {\n          return;\n        }\n\n        $scope.$apply(() => {\n          const selected = find($scope.altSegments, {\n            value: value\n          });\n\n          if (selected) {\n            segment.value = selected.value;\n            segment.html = selected.html || $sce.trustAsHtml(templateSrv.highlightVariablesAsHtml(selected.value));\n            segment.fake = false;\n            segment.expandable = selected.expandable;\n\n            if (selected.type) {\n              segment.type = selected.type;\n            }\n          } else if (segment.custom !== 'false') {\n            segment.value = value;\n            segment.html = $sce.trustAsHtml(templateSrv.highlightVariablesAsHtml(value));\n            segment.expandable = true;\n            segment.fake = false;\n          }\n\n          $scope.onChange();\n        });\n      };\n\n      $scope.switchToLink = fromClick => {\n        if (linkMode && !fromClick) {\n          return;\n        }\n\n        clearTimeout(cancelBlur);\n        cancelBlur = null;\n        linkMode = true;\n        $input.hide();\n        $button.show();\n        $scope.updateVariableValue($input.val());\n      };\n\n      $scope.inputBlur = () => {\n        // happens long before the click event on the typeahead options\n        // need to have long delay because the blur\n        cancelBlur = setTimeout($scope.switchToLink, 200);\n      };\n\n      $scope.source = (query, callback) => {\n        $scope.$apply(() => {\n          $scope.getOptions({\n            $query: query\n          }).then(altSegments => {\n            $scope.altSegments = altSegments;\n            options = map($scope.altSegments, alt => {\n              return escape(alt.value);\n            }); // add custom values\n\n            if (segment.custom !== 'false') {\n              if (!segment.fake && indexOf(options, segment.value) === -1) {\n                options.unshift(escape(segment.value));\n              }\n            }\n\n            callback(options);\n          });\n        });\n      };\n\n      $scope.updater = value => {\n        value = unescape(value);\n\n        if (value === segment.value) {\n          clearTimeout(cancelBlur);\n          $input.focus();\n          return value;\n        }\n\n        $input.val(value);\n        $scope.switchToLink(true);\n        return value;\n      };\n\n      $scope.matcher = function (item) {\n        if (linkMode) {\n          return false;\n        }\n\n        let str = this.query;\n\n        if (str[0] === '/') {\n          str = str.substring(1);\n        }\n\n        if (str[str.length - 1] === '/') {\n          str = str.substring(0, str.length - 1);\n        }\n\n        try {\n          return item.toLowerCase().match(str.toLowerCase());\n        } catch (e) {\n          return false;\n        }\n      };\n\n      $input.attr('data-provide', 'typeahead');\n      $input.typeahead({\n        source: $scope.source,\n        minLength: 0,\n        items: 10000,\n        updater: $scope.updater,\n        matcher: $scope.matcher\n      });\n      const typeahead = $input.data('typeahead');\n\n      typeahead.lookup = function () {\n        this.query = this.$element.val() || '';\n        const items = this.source(this.query, $.proxy(this.process, this));\n        return items ? this.process(items) : items;\n      };\n\n      if (debounceLookup) {\n        typeahead.lookup = debounce(typeahead.lookup, 500, {\n          leading: true\n        });\n      }\n\n      $button.keydown(evt => {\n        // trigger typeahead on down arrow or enter key\n        if (evt.keyCode === 40 || evt.keyCode === 13) {\n          $button.click();\n        }\n      });\n      $button.click(() => {\n        options = null;\n        $input.css('width', Math.max($button.width(), 80) + 16 + 'px');\n        $button.hide();\n        $input.show();\n        $input.focus();\n        linkMode = false;\n        const typeahead = $input.data('typeahead');\n\n        if (typeahead) {\n          $input.val('');\n          typeahead.lookup();\n        }\n      });\n      $input.blur($scope.inputBlur);\n      $compile(elem.contents())($scope);\n    }\n  };\n}\n/** @ngInject */\n\nexport function metricSegmentModel(uiSegmentSrv) {\n  return {\n    template: '<metric-segment segment=\"segment\" get-options=\"getOptionsInternal()\" on-change=\"onSegmentChange()\"></metric-segment>',\n    restrict: 'E',\n    scope: {\n      property: '=',\n      options: '=',\n      getOptions: '&',\n      onChange: '&'\n    },\n    link: {\n      pre: function postLink($scope, elem, attrs) {\n        let cachedOptions;\n\n        $scope.valueToSegment = value => {\n          const option = find($scope.options, {\n            value: value\n          });\n          const segment = {\n            cssClass: attrs.cssClass,\n            custom: attrs.custom,\n            value: option ? option.text : value,\n            selectMode: attrs.selectMode\n          };\n          return uiSegmentSrv.newSegment(segment);\n        };\n\n        $scope.getOptionsInternal = () => {\n          if ($scope.options) {\n            cachedOptions = $scope.options;\n            return Promise.resolve(map($scope.options, option => {\n              return {\n                value: option.text\n              };\n            }));\n          } else {\n            return $scope.getOptions().then(options => {\n              cachedOptions = options;\n              return map(options, option => {\n                if (option.html) {\n                  return option;\n                }\n\n                return {\n                  value: option.text\n                };\n              });\n            });\n          }\n        };\n\n        $scope.onSegmentChange = () => {\n          if (cachedOptions) {\n            const option = find(cachedOptions, {\n              text: $scope.segment.value\n            });\n\n            if (option && option.value !== $scope.property) {\n              $scope.property = option.value;\n            } else if (attrs.custom !== 'false') {\n              $scope.property = $scope.segment.value;\n            }\n          } else {\n            $scope.property = $scope.segment.value;\n          } // needs to call this after digest so\n          // property is synced with outerscope\n\n\n          $scope.$$postDigest(() => {\n            $scope.$apply(() => {\n              $scope.onChange();\n            });\n          });\n        };\n\n        $scope.segment = $scope.valueToSegment($scope.property);\n      }\n    }\n  };\n}\ncoreModule.directive('metricSegment', metricSegment);\ncoreModule.directive('metricSegmentModel', metricSegmentModel);","map":{"version":3,"names":["$","debounce","find","indexOf","map","escape","unescape","coreModule","metricSegment","$compile","$sce","templateSrv","inputTemplate","linkTemplate","selectTemplate","scope","segment","getOptions","onChange","link","$scope","elem","$input","$button","selectMode","options","cancelBlur","linkMode","debounceLookup","appendTo","updateVariableValue","value","$apply","selected","altSegments","html","trustAsHtml","highlightVariablesAsHtml","fake","expandable","type","custom","switchToLink","fromClick","clearTimeout","hide","show","val","inputBlur","setTimeout","source","query","callback","$query","then","alt","unshift","updater","focus","matcher","item","str","substring","length","toLowerCase","match","e","attr","typeahead","minLength","items","data","lookup","$element","proxy","process","leading","keydown","evt","keyCode","click","css","Math","max","width","blur","contents","metricSegmentModel","uiSegmentSrv","template","restrict","property","pre","postLink","attrs","cachedOptions","valueToSegment","option","cssClass","text","newSegment","getOptionsInternal","Promise","resolve","onSegmentChange","$$postDigest","directive"],"sources":["/home/soula/grafana/public/app/angular/metric_segment.ts"],"sourcesContent":["import $ from 'jquery';\nimport { debounce, find, indexOf, map, escape, unescape } from 'lodash';\n\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nimport coreModule from './core_module';\n\n/** @ngInject */\nexport function metricSegment($compile: any, $sce: any, templateSrv: TemplateSrv) {\n  const inputTemplate =\n    '<input type=\"text\" data-provide=\"typeahead\" ' +\n    ' class=\"gf-form-input input-medium\"' +\n    ' spellcheck=\"false\" style=\"display:none\"></input>';\n\n  const linkTemplate =\n    '<a class=\"gf-form-label\" ng-class=\"segment.cssClass\" ' +\n    'tabindex=\"1\" give-focus=\"segment.focus\" ng-bind-html=\"segment.html\"></a>';\n\n  const selectTemplate =\n    '<a class=\"gf-form-input gf-form-input--dropdown\" ng-class=\"segment.cssClass\" ' +\n    'tabindex=\"1\" give-focus=\"segment.focus\" ng-bind-html=\"segment.html\"></a>';\n\n  return {\n    scope: {\n      segment: '=',\n      getOptions: '&',\n      onChange: '&',\n      debounce: '@',\n    },\n    link: ($scope: any, elem: any) => {\n      const $input = $(inputTemplate);\n      const segment = $scope.segment;\n      const $button = $(segment.selectMode ? selectTemplate : linkTemplate);\n      let options = null;\n      let cancelBlur: any = null;\n      let linkMode = true;\n      const debounceLookup = $scope.debounce;\n\n      $input.appendTo(elem);\n      $button.appendTo(elem);\n\n      $scope.updateVariableValue = (value: string) => {\n        if (value === '' || segment.value === value) {\n          return;\n        }\n\n        $scope.$apply(() => {\n          const selected: any = find($scope.altSegments, { value: value });\n          if (selected) {\n            segment.value = selected.value;\n            segment.html = selected.html || $sce.trustAsHtml(templateSrv.highlightVariablesAsHtml(selected.value));\n            segment.fake = false;\n            segment.expandable = selected.expandable;\n\n            if (selected.type) {\n              segment.type = selected.type;\n            }\n          } else if (segment.custom !== 'false') {\n            segment.value = value;\n            segment.html = $sce.trustAsHtml(templateSrv.highlightVariablesAsHtml(value));\n            segment.expandable = true;\n            segment.fake = false;\n          }\n\n          $scope.onChange();\n        });\n      };\n\n      $scope.switchToLink = (fromClick: boolean) => {\n        if (linkMode && !fromClick) {\n          return;\n        }\n\n        clearTimeout(cancelBlur);\n        cancelBlur = null;\n        linkMode = true;\n        $input.hide();\n        $button.show();\n        $scope.updateVariableValue($input.val());\n      };\n\n      $scope.inputBlur = () => {\n        // happens long before the click event on the typeahead options\n        // need to have long delay because the blur\n        cancelBlur = setTimeout($scope.switchToLink, 200);\n      };\n\n      $scope.source = (query: string, callback: any) => {\n        $scope.$apply(() => {\n          $scope.getOptions({ $query: query }).then((altSegments: any) => {\n            $scope.altSegments = altSegments;\n            options = map($scope.altSegments, (alt) => {\n              return escape(alt.value);\n            });\n\n            // add custom values\n            if (segment.custom !== 'false') {\n              if (!segment.fake && indexOf(options, segment.value) === -1) {\n                options.unshift(escape(segment.value));\n              }\n            }\n\n            callback(options);\n          });\n        });\n      };\n\n      $scope.updater = (value: string) => {\n        value = unescape(value);\n        if (value === segment.value) {\n          clearTimeout(cancelBlur);\n          $input.focus();\n          return value;\n        }\n\n        $input.val(value);\n        $scope.switchToLink(true);\n\n        return value;\n      };\n\n      $scope.matcher = function (item: string) {\n        if (linkMode) {\n          return false;\n        }\n        let str = this.query;\n        if (str[0] === '/') {\n          str = str.substring(1);\n        }\n        if (str[str.length - 1] === '/') {\n          str = str.substring(0, str.length - 1);\n        }\n        try {\n          return item.toLowerCase().match(str.toLowerCase());\n        } catch (e) {\n          return false;\n        }\n      };\n\n      $input.attr('data-provide', 'typeahead');\n      $input.typeahead({\n        source: $scope.source,\n        minLength: 0,\n        items: 10000,\n        updater: $scope.updater,\n        matcher: $scope.matcher,\n      });\n\n      const typeahead = $input.data('typeahead');\n      typeahead.lookup = function () {\n        this.query = this.$element.val() || '';\n        const items = this.source(this.query, $.proxy(this.process, this));\n        return items ? this.process(items) : items;\n      };\n\n      if (debounceLookup) {\n        typeahead.lookup = debounce(typeahead.lookup, 500, { leading: true });\n      }\n\n      $button.keydown((evt) => {\n        // trigger typeahead on down arrow or enter key\n        if (evt.keyCode === 40 || evt.keyCode === 13) {\n          $button.click();\n        }\n      });\n\n      $button.click(() => {\n        options = null;\n        $input.css('width', Math.max($button.width()!, 80) + 16 + 'px');\n\n        $button.hide();\n        $input.show();\n        $input.focus();\n\n        linkMode = false;\n\n        const typeahead = $input.data('typeahead');\n        if (typeahead) {\n          $input.val('');\n          typeahead.lookup();\n        }\n      });\n\n      $input.blur($scope.inputBlur);\n\n      $compile(elem.contents())($scope);\n    },\n  };\n}\n\n/** @ngInject */\nexport function metricSegmentModel(uiSegmentSrv: any) {\n  return {\n    template:\n      '<metric-segment segment=\"segment\" get-options=\"getOptionsInternal()\" on-change=\"onSegmentChange()\"></metric-segment>',\n    restrict: 'E',\n    scope: {\n      property: '=',\n      options: '=',\n      getOptions: '&',\n      onChange: '&',\n    },\n    link: {\n      pre: function postLink($scope: any, elem: any, attrs: any) {\n        let cachedOptions: any;\n\n        $scope.valueToSegment = (value: any) => {\n          const option: any = find($scope.options, { value: value });\n          const segment = {\n            cssClass: attrs.cssClass,\n            custom: attrs.custom,\n            value: option ? option.text : value,\n            selectMode: attrs.selectMode,\n          };\n\n          return uiSegmentSrv.newSegment(segment);\n        };\n\n        $scope.getOptionsInternal = () => {\n          if ($scope.options) {\n            cachedOptions = $scope.options;\n            return Promise.resolve(\n              map($scope.options, (option) => {\n                return { value: option.text };\n              })\n            );\n          } else {\n            return $scope.getOptions().then((options: any) => {\n              cachedOptions = options;\n              return map(options, (option) => {\n                if (option.html) {\n                  return option;\n                }\n                return { value: option.text };\n              });\n            });\n          }\n        };\n\n        $scope.onSegmentChange = () => {\n          if (cachedOptions) {\n            const option: any = find(cachedOptions, { text: $scope.segment.value });\n            if (option && option.value !== $scope.property) {\n              $scope.property = option.value;\n            } else if (attrs.custom !== 'false') {\n              $scope.property = $scope.segment.value;\n            }\n          } else {\n            $scope.property = $scope.segment.value;\n          }\n\n          // needs to call this after digest so\n          // property is synced with outerscope\n          $scope.$$postDigest(() => {\n            $scope.$apply(() => {\n              $scope.onChange();\n            });\n          });\n        };\n\n        $scope.segment = $scope.valueToSegment($scope.property);\n      },\n    },\n  };\n}\n\ncoreModule.directive('metricSegment', metricSegment);\ncoreModule.directive('metricSegmentModel', metricSegmentModel);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}