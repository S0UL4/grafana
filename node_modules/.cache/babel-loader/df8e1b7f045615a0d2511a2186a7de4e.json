{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { AsyncMultiSelect, InlineField, SegmentAsync, Select } from '@grafana/ui';\nimport { useFields } from '../../../../hooks/useFields';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { orderOptions } from '../../BucketAggregationsEditor/utils';\nimport { changeMetricSetting } from '../state/actions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst toMultiSelectValue = value => ({\n  value,\n  label: value\n});\n\nexport const TopMetricsSettingsEditor = ({\n  metric\n}) => {\n  var _metric$settings, _metric$settings$metr, _metric$settings2, _metric$settings3;\n\n  const dispatch = useDispatch();\n  const getOrderByOptions = useFields(['number', 'date']);\n  const getMetricsOptions = useFields(metric.type);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineField, {\n      label: \"Metrics\",\n      labelWidth: 16,\n      children: /*#__PURE__*/_jsx(AsyncMultiSelect, {\n        onChange: e => dispatch(changeMetricSetting({\n          metric,\n          settingName: 'metrics',\n          newValue: e.map(v => v.value)\n        })),\n        loadOptions: getMetricsOptions,\n        value: (_metric$settings = metric.settings) === null || _metric$settings === void 0 ? void 0 : (_metric$settings$metr = _metric$settings.metrics) === null || _metric$settings$metr === void 0 ? void 0 : _metric$settings$metr.map(toMultiSelectValue),\n        closeMenuOnSelect: false,\n        defaultOptions: true\n      })\n    }), /*#__PURE__*/_jsx(InlineField, {\n      label: \"Order\",\n      labelWidth: 16,\n      children: /*#__PURE__*/_jsx(Select, {\n        onChange: e => dispatch(changeMetricSetting({\n          metric,\n          settingName: 'order',\n          newValue: e.value\n        })),\n        options: orderOptions,\n        value: (_metric$settings2 = metric.settings) === null || _metric$settings2 === void 0 ? void 0 : _metric$settings2.order\n      })\n    }), /*#__PURE__*/_jsx(InlineField, {\n      label: \"Order By\",\n      labelWidth: 16,\n      className: css`\n          & > div {\n            width: 100%;\n          }\n        `,\n      children: /*#__PURE__*/_jsx(SegmentAsync, {\n        className: css`\n            margin-right: 0;\n          `,\n        loadOptions: getOrderByOptions,\n        onChange: e => dispatch(changeMetricSetting({\n          metric,\n          settingName: 'orderBy',\n          newValue: e.value\n        })),\n        placeholder: \"Select Field\",\n        value: (_metric$settings3 = metric.settings) === null || _metric$settings3 === void 0 ? void 0 : _metric$settings3.orderBy\n      })\n    })]\n  });\n};","map":{"version":3,"names":["css","React","AsyncMultiSelect","InlineField","SegmentAsync","Select","useFields","useDispatch","orderOptions","changeMetricSetting","toMultiSelectValue","value","label","TopMetricsSettingsEditor","metric","dispatch","getOrderByOptions","getMetricsOptions","type","e","settingName","newValue","map","v","settings","metrics","order","orderBy"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/TopMetricsSettingsEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FunctionComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncMultiSelect, InlineField, SegmentAsync, Select } from '@grafana/ui';\n\nimport { useFields } from '../../../../hooks/useFields';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { orderOptions } from '../../BucketAggregationsEditor/utils';\nimport { TopMetrics } from '../aggregations';\nimport { changeMetricSetting } from '../state/actions';\n\ninterface Props {\n  metric: TopMetrics;\n}\n\nconst toMultiSelectValue = (value: string): SelectableValue<string> => ({ value, label: value });\n\nexport const TopMetricsSettingsEditor: FunctionComponent<Props> = ({ metric }) => {\n  const dispatch = useDispatch();\n  const getOrderByOptions = useFields(['number', 'date']);\n  const getMetricsOptions = useFields(metric.type);\n\n  return (\n    <>\n      <InlineField label=\"Metrics\" labelWidth={16}>\n        <AsyncMultiSelect\n          onChange={(e) =>\n            dispatch(\n              changeMetricSetting({\n                metric,\n                settingName: 'metrics',\n                newValue: e.map((v) => v.value!),\n              })\n            )\n          }\n          loadOptions={getMetricsOptions}\n          value={metric.settings?.metrics?.map(toMultiSelectValue)}\n          closeMenuOnSelect={false}\n          defaultOptions\n        />\n      </InlineField>\n      <InlineField label=\"Order\" labelWidth={16}>\n        <Select\n          onChange={(e) => dispatch(changeMetricSetting({ metric, settingName: 'order', newValue: e.value }))}\n          options={orderOptions}\n          value={metric.settings?.order}\n        />\n      </InlineField>\n      <InlineField\n        label=\"Order By\"\n        labelWidth={16}\n        className={css`\n          & > div {\n            width: 100%;\n          }\n        `}\n      >\n        <SegmentAsync\n          className={css`\n            margin-right: 0;\n          `}\n          loadOptions={getOrderByOptions}\n          onChange={(e) => dispatch(changeMetricSetting({ metric, settingName: 'orderBy', newValue: e.value }))}\n          placeholder=\"Select Field\"\n          value={metric.settings?.orderBy}\n        />\n      </InlineField>\n    </>\n  );\n};\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAyC,OAAzC;AAGA,SAASC,gBAAT,EAA2BC,WAA3B,EAAwCC,YAAxC,EAAsDC,MAAtD,QAAoE,aAApE;AAEA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,WAAT,QAA4B,uCAA5B;AACA,SAASC,YAAT,QAA6B,sCAA7B;AAEA,SAASC,mBAAT,QAAoC,kBAApC;;;;;AAMA,MAAMC,kBAAkB,GAAIC,KAAD,KAA6C;EAAEA,KAAF;EAASC,KAAK,EAAED;AAAhB,CAA7C,CAA3B;;AAEA,OAAO,MAAME,wBAAkD,GAAG,CAAC;EAAEC;AAAF,CAAD,KAAgB;EAAA;;EAChF,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;EACA,MAAMS,iBAAiB,GAAGV,SAAS,CAAC,CAAC,QAAD,EAAW,MAAX,CAAD,CAAnC;EACA,MAAMW,iBAAiB,GAAGX,SAAS,CAACQ,MAAM,CAACI,IAAR,CAAnC;EAEA,oBACE;IAAA,wBACE,KAAC,WAAD;MAAa,KAAK,EAAC,SAAnB;MAA6B,UAAU,EAAE,EAAzC;MAAA,uBACE,KAAC,gBAAD;QACE,QAAQ,EAAGC,CAAD,IACRJ,QAAQ,CACNN,mBAAmB,CAAC;UAClBK,MADkB;UAElBM,WAAW,EAAE,SAFK;UAGlBC,QAAQ,EAAEF,CAAC,CAACG,GAAF,CAAOC,CAAD,IAAOA,CAAC,CAACZ,KAAf;QAHQ,CAAD,CADb,CAFZ;QAUE,WAAW,EAAEM,iBAVf;QAWE,KAAK,sBAAEH,MAAM,CAACU,QAAT,8EAAE,iBAAiBC,OAAnB,0DAAE,sBAA0BH,GAA1B,CAA8BZ,kBAA9B,CAXT;QAYE,iBAAiB,EAAE,KAZrB;QAaE,cAAc;MAbhB;IADF,EADF,eAkBE,KAAC,WAAD;MAAa,KAAK,EAAC,OAAnB;MAA2B,UAAU,EAAE,EAAvC;MAAA,uBACE,KAAC,MAAD;QACE,QAAQ,EAAGS,CAAD,IAAOJ,QAAQ,CAACN,mBAAmB,CAAC;UAAEK,MAAF;UAAUM,WAAW,EAAE,OAAvB;UAAgCC,QAAQ,EAAEF,CAAC,CAACR;QAA5C,CAAD,CAApB,CAD3B;QAEE,OAAO,EAAEH,YAFX;QAGE,KAAK,uBAAEM,MAAM,CAACU,QAAT,sDAAE,kBAAiBE;MAH1B;IADF,EAlBF,eAyBE,KAAC,WAAD;MACE,KAAK,EAAC,UADR;MAEE,UAAU,EAAE,EAFd;MAGE,SAAS,EAAE1B,GAAI;AACvB;AACA;AACA;AACA,SAPM;MAAA,uBASE,KAAC,YAAD;QACE,SAAS,EAAEA,GAAI;AACzB;AACA,WAHQ;QAIE,WAAW,EAAEgB,iBAJf;QAKE,QAAQ,EAAGG,CAAD,IAAOJ,QAAQ,CAACN,mBAAmB,CAAC;UAAEK,MAAF;UAAUM,WAAW,EAAE,SAAvB;UAAkCC,QAAQ,EAAEF,CAAC,CAACR;QAA9C,CAAD,CAApB,CAL3B;QAME,WAAW,EAAC,cANd;QAOE,KAAK,uBAAEG,MAAM,CAACU,QAAT,sDAAE,kBAAiBG;MAP1B;IATF,EAzBF;EAAA,EADF;AA+CD,CApDM"},"metadata":{},"sourceType":"module"}