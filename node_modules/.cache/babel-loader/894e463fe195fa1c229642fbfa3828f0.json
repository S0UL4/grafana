{"ast":null,"code":"import { formattedValueToString } from '../valueFormats';\nimport { FunctionalVector } from './FunctionalVector';\n/**\n * @public\n */\n\nexport class FormattedVector extends FunctionalVector {\n  constructor(source, formatter) {\n    super();\n    this.source = source;\n    this.formatter = formatter;\n  }\n\n  get length() {\n    return this.source.length;\n  }\n\n  get(index) {\n    const v = this.source.get(index);\n    return formattedValueToString(this.formatter(v));\n  }\n\n}","map":{"version":3,"names":["formattedValueToString","FunctionalVector","FormattedVector","constructor","source","formatter","length","get","index","v"],"sources":["/home/soula/grafana/packages/grafana-data/src/vector/FormattedVector.ts"],"sourcesContent":["import { DisplayProcessor } from '../types';\nimport { Vector } from '../types/vector';\nimport { formattedValueToString } from '../valueFormats';\n\nimport { FunctionalVector } from './FunctionalVector';\n\n/**\n * @public\n */\nexport class FormattedVector<T = any> extends FunctionalVector<string> {\n  constructor(private source: Vector<T>, private formatter: DisplayProcessor) {\n    super();\n  }\n\n  get length() {\n    return this.source.length;\n  }\n\n  get(index: number): string {\n    const v = this.source.get(index);\n    return formattedValueToString(this.formatter(v));\n  }\n}\n"],"mappings":"AAEA,SAASA,sBAAT,QAAuC,iBAAvC;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,eAAN,SAAuCD,gBAAvC,CAAgE;EACrEE,WAAW,CAASC,MAAT,EAAoCC,SAApC,EAAiE;IAC1E;IAD0E,KAAxDD,MAAwD,GAAxDA,MAAwD;IAAA,KAA7BC,SAA6B,GAA7BA,SAA6B;EAE3E;;EAES,IAANC,MAAM,GAAG;IACX,OAAO,KAAKF,MAAL,CAAYE,MAAnB;EACD;;EAEDC,GAAG,CAACC,KAAD,EAAwB;IACzB,MAAMC,CAAC,GAAG,KAAKL,MAAL,CAAYG,GAAZ,CAAgBC,KAAhB,CAAV;IACA,OAAOR,sBAAsB,CAAC,KAAKK,SAAL,CAAeI,CAAf,CAAD,CAA7B;EACD;;AAZoE"},"metadata":{},"sourceType":"module"}