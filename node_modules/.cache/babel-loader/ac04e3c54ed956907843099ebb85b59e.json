{"ast":null,"code":"import { lastValueFrom } from 'rxjs';\nimport { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { PromApplication } from 'app/types/unified-alerting-dto';\nimport { RULER_NOT_SUPPORTED_MSG } from '../utils/constants';\nimport { getDataSourceByName } from '../utils/datasource';\nimport { fetchRules } from './prometheus';\nimport { fetchTestRulerRulesGroup } from './ruler';\n/**\n * This function will attempt to detect what type of system we are talking to; this could be\n * Prometheus (vanilla) | Cortex | Mimir\n *\n * Cortex and Mimir allow editing rules via their API, Prometheus does not.\n * Prometheus and Mimir expose a `buildinfo` endpoint, Cortex does not.\n * Mimir reports which \"features\" are enabled or available via the buildinfo endpoint, Prometheus does not.\n */\n\nexport async function discoverDataSourceFeatures(dsSettings) {\n  const {\n    url,\n    name,\n    type\n  } = dsSettings; // The current implementation of Loki's build info endpoint is useless\n  // because it doesn't provide information about Loki's available features (e.g. Ruler API)\n  // It's better to skip fetching it for Loki and go the Cortex path (manual discovery)\n\n  const buildInfoResponse = type === 'prometheus' ? await fetchPromBuildInfo(url) : undefined; // check if the component returns buildinfo\n\n  const hasBuildInfo = buildInfoResponse !== undefined; // we are dealing with a Cortex or Loki datasource since the response for buildinfo came up empty\n\n  if (!hasBuildInfo) {\n    // check if we can fetch rules via the prometheus compatible api\n    const promRulesSupported = await hasPromRulesSupport(name);\n\n    if (!promRulesSupported) {\n      throw new Error(`Unable to fetch alert rules. Is the ${name} data source properly configured?`);\n    } // check if the ruler is enabled\n\n\n    const rulerSupported = await hasRulerSupport(name);\n    return {\n      application: PromApplication.Lotex,\n      features: {\n        rulerApiEnabled: rulerSupported\n      }\n    };\n  } // if no features are reported but buildinfo was return we're talking to Prometheus\n\n\n  const {\n    features\n  } = buildInfoResponse.data;\n\n  if (!features) {\n    return {\n      application: PromApplication.Prometheus,\n      features: {\n        rulerApiEnabled: false\n      }\n    };\n  } // if we have both features and buildinfo reported we're talking to Mimir\n\n\n  return {\n    application: PromApplication.Mimir,\n    features: {\n      rulerApiEnabled: (features === null || features === void 0 ? void 0 : features.ruler_config_api) === 'true'\n    }\n  };\n}\n/**\n * Attempt to fetch buildinfo from our component\n */\n\nexport async function discoverFeatures(dataSourceName) {\n  const dsConfig = getDataSourceByName(dataSourceName);\n\n  if (!dsConfig) {\n    throw new Error(`Cannot find data source configuration for ${dataSourceName}`);\n  }\n\n  const {\n    url,\n    name,\n    type\n  } = dsConfig;\n\n  if (!url) {\n    throw new Error(`The data souce url cannot be empty.`);\n  }\n\n  if (type !== 'prometheus' && type !== 'loki') {\n    throw new Error(`The build info request is not available for ${type}. Only 'prometheus' and 'loki' are supported`);\n  }\n\n  return discoverDataSourceFeatures({\n    name,\n    url,\n    type\n  });\n}\n\nasync function fetchPromBuildInfo(url) {\n  const response = await lastValueFrom(getBackendSrv().fetch({\n    url: `${url}/api/v1/status/buildinfo`,\n    showErrorAlert: false,\n    showSuccessAlert: false\n  })).catch(e => {\n    if ('status' in e && e.status === 404) {\n      return undefined; // Cortex does not support buildinfo endpoint, we return an empty response\n    }\n\n    throw e;\n  });\n  return response === null || response === void 0 ? void 0 : response.data;\n}\n/**\n * Check if the component allows us to fetch rules\n */\n\n\nasync function hasPromRulesSupport(dataSourceName) {\n  try {\n    await fetchRules(dataSourceName);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * Attempt to check if the ruler API is enabled for Cortex, Prometheus does not support it and Mimir\n * reports this via the buildInfo \"features\"\n */\n\n\nasync function hasRulerSupport(dataSourceName) {\n  try {\n    await fetchTestRulerRulesGroup(dataSourceName);\n    return true;\n  } catch (e) {\n    if (errorIndicatesMissingRulerSupport(e)) {\n      return false;\n    }\n\n    throw e;\n  }\n} // there errors indicate that the ruler API might be disabled or not supported for Cortex\n\n\nfunction errorIndicatesMissingRulerSupport(error) {\n  var _error$data$message, _error$data$message2, _error$message, _error$data$message3;\n\n  return isFetchError(error) && (((_error$data$message = error.data.message) === null || _error$data$message === void 0 ? void 0 : _error$data$message.includes('GetRuleGroup unsupported in rule local store')) || ( // \"local\" rule storage\n  (_error$data$message2 = error.data.message) === null || _error$data$message2 === void 0 ? void 0 : _error$data$message2.includes('page not found'))) || ( // ruler api disabled\n  (_error$message = error.message) === null || _error$message === void 0 ? void 0 : _error$message.includes('404 from rules config endpoint')) || ( // ruler api disabled\n  (_error$data$message3 = error.data.message) === null || _error$data$message3 === void 0 ? void 0 : _error$data$message3.includes(RULER_NOT_SUPPORTED_MSG)) // ruler api not supported\n  ;\n}","map":{"version":3,"names":["lastValueFrom","getBackendSrv","isFetchError","PromApplication","RULER_NOT_SUPPORTED_MSG","getDataSourceByName","fetchRules","fetchTestRulerRulesGroup","discoverDataSourceFeatures","dsSettings","url","name","type","buildInfoResponse","fetchPromBuildInfo","undefined","hasBuildInfo","promRulesSupported","hasPromRulesSupport","Error","rulerSupported","hasRulerSupport","application","Lotex","features","rulerApiEnabled","data","Prometheus","Mimir","ruler_config_api","discoverFeatures","dataSourceName","dsConfig","response","fetch","showErrorAlert","showSuccessAlert","catch","e","status","errorIndicatesMissingRulerSupport","error","message","includes"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/api/buildInfo.ts"],"sourcesContent":["import { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { PromApplication, PromApiFeatures, PromBuildInfoResponse } from 'app/types/unified-alerting-dto';\n\nimport { RULER_NOT_SUPPORTED_MSG } from '../utils/constants';\nimport { getDataSourceByName } from '../utils/datasource';\n\nimport { fetchRules } from './prometheus';\nimport { fetchTestRulerRulesGroup } from './ruler';\n\n/**\n * This function will attempt to detect what type of system we are talking to; this could be\n * Prometheus (vanilla) | Cortex | Mimir\n *\n * Cortex and Mimir allow editing rules via their API, Prometheus does not.\n * Prometheus and Mimir expose a `buildinfo` endpoint, Cortex does not.\n * Mimir reports which \"features\" are enabled or available via the buildinfo endpoint, Prometheus does not.\n */\nexport async function discoverDataSourceFeatures(dsSettings: {\n  url: string;\n  name: string;\n  type: 'prometheus' | 'loki';\n}): Promise<PromApiFeatures> {\n  const { url, name, type } = dsSettings;\n\n  // The current implementation of Loki's build info endpoint is useless\n  // because it doesn't provide information about Loki's available features (e.g. Ruler API)\n  // It's better to skip fetching it for Loki and go the Cortex path (manual discovery)\n  const buildInfoResponse = type === 'prometheus' ? await fetchPromBuildInfo(url) : undefined;\n\n  // check if the component returns buildinfo\n  const hasBuildInfo = buildInfoResponse !== undefined;\n\n  // we are dealing with a Cortex or Loki datasource since the response for buildinfo came up empty\n  if (!hasBuildInfo) {\n    // check if we can fetch rules via the prometheus compatible api\n    const promRulesSupported = await hasPromRulesSupport(name);\n    if (!promRulesSupported) {\n      throw new Error(`Unable to fetch alert rules. Is the ${name} data source properly configured?`);\n    }\n\n    // check if the ruler is enabled\n    const rulerSupported = await hasRulerSupport(name);\n\n    return {\n      application: PromApplication.Lotex,\n      features: {\n        rulerApiEnabled: rulerSupported,\n      },\n    };\n  }\n\n  // if no features are reported but buildinfo was return we're talking to Prometheus\n  const { features } = buildInfoResponse.data;\n  if (!features) {\n    return {\n      application: PromApplication.Prometheus,\n      features: {\n        rulerApiEnabled: false,\n      },\n    };\n  }\n\n  // if we have both features and buildinfo reported we're talking to Mimir\n  return {\n    application: PromApplication.Mimir,\n    features: {\n      rulerApiEnabled: features?.ruler_config_api === 'true',\n    },\n  };\n}\n\n/**\n * Attempt to fetch buildinfo from our component\n */\nexport async function discoverFeatures(dataSourceName: string): Promise<PromApiFeatures> {\n  const dsConfig = getDataSourceByName(dataSourceName);\n  if (!dsConfig) {\n    throw new Error(`Cannot find data source configuration for ${dataSourceName}`);\n  }\n  const { url, name, type } = dsConfig;\n  if (!url) {\n    throw new Error(`The data souce url cannot be empty.`);\n  }\n\n  if (type !== 'prometheus' && type !== 'loki') {\n    throw new Error(`The build info request is not available for ${type}. Only 'prometheus' and 'loki' are supported`);\n  }\n\n  return discoverDataSourceFeatures({ name, url, type });\n}\n\nasync function fetchPromBuildInfo(url: string): Promise<PromBuildInfoResponse | undefined> {\n  const response = await lastValueFrom(\n    getBackendSrv().fetch<PromBuildInfoResponse>({\n      url: `${url}/api/v1/status/buildinfo`,\n      showErrorAlert: false,\n      showSuccessAlert: false,\n    })\n  ).catch((e) => {\n    if ('status' in e && e.status === 404) {\n      return undefined; // Cortex does not support buildinfo endpoint, we return an empty response\n    }\n\n    throw e;\n  });\n\n  return response?.data;\n}\n\n/**\n * Check if the component allows us to fetch rules\n */\nasync function hasPromRulesSupport(dataSourceName: string) {\n  try {\n    await fetchRules(dataSourceName);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Attempt to check if the ruler API is enabled for Cortex, Prometheus does not support it and Mimir\n * reports this via the buildInfo \"features\"\n */\nasync function hasRulerSupport(dataSourceName: string) {\n  try {\n    await fetchTestRulerRulesGroup(dataSourceName);\n    return true;\n  } catch (e) {\n    if (errorIndicatesMissingRulerSupport(e)) {\n      return false;\n    }\n    throw e;\n  }\n}\n\n// there errors indicate that the ruler API might be disabled or not supported for Cortex\nfunction errorIndicatesMissingRulerSupport(error: any) {\n  return (\n    (isFetchError(error) &&\n      (error.data.message?.includes('GetRuleGroup unsupported in rule local store') || // \"local\" rule storage\n        error.data.message?.includes('page not found'))) || // ruler api disabled\n    error.message?.includes('404 from rules config endpoint') || // ruler api disabled\n    error.data.message?.includes(RULER_NOT_SUPPORTED_MSG) // ruler api not supported\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}