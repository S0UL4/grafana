{"ast":null,"code":"import { config } from '@grafana/runtime';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport store from 'app/core/store';\nimport { API_KEYS_MIGRATION_INFO_STORAGE_KEY } from 'app/features/serviceaccounts/constants';\nimport { apiKeysLoaded, includeExpiredToggled, isFetching, apiKeysMigrationStatusLoaded, setSearchQuery } from './reducers';\nexport function addApiKey(apiKey, openModal) {\n  return async dispatch => {\n    const result = await getBackendSrv().post('/api/auth/keys', apiKey);\n    dispatch(setSearchQuery(''));\n    dispatch(loadApiKeys());\n    openModal(result.key);\n  };\n}\nexport function loadApiKeys() {\n  return async dispatch => {\n    dispatch(isFetching());\n    const [keys, keysIncludingExpired] = await Promise.all([getBackendSrv().get('/api/auth/keys?includeExpired=false&accesscontrol=true'), getBackendSrv().get('/api/auth/keys?includeExpired=true&accesscontrol=true')]);\n    dispatch(apiKeysLoaded({\n      keys,\n      keysIncludingExpired\n    }));\n  };\n}\nexport function deleteApiKey(id) {\n  return async dispatch => {\n    getBackendSrv().delete(`/api/auth/keys/${id}`).then(() => dispatch(loadApiKeys()));\n  };\n}\nexport function migrateApiKey(id) {\n  return async dispatch => {\n    try {\n      await getBackendSrv().post(`/api/serviceaccounts/migrate/${id}`);\n    } finally {\n      dispatch(loadApiKeys());\n    }\n  };\n}\nexport function migrateAll() {\n  return async dispatch => {\n    try {\n      await getBackendSrv().post('/api/serviceaccounts/migrate');\n      store.set(API_KEYS_MIGRATION_INFO_STORAGE_KEY, true);\n    } finally {\n      dispatch(getApiKeysMigrationStatus());\n      dispatch(loadApiKeys());\n    }\n  };\n}\nexport function getApiKeysMigrationStatus() {\n  return async dispatch => {\n    // TODO: remove when service account enabled by default (or use another way to detect if it's enabled)\n    if (config.featureToggles.serviceAccounts) {\n      const result = await getBackendSrv().get('/api/serviceaccounts/migrationstatus');\n      dispatch(apiKeysMigrationStatusLoaded(!!(result !== null && result !== void 0 && result.migrated)));\n    }\n  };\n}\nexport function hideApiKeys() {\n  return async dispatch => {\n    await getBackendSrv().post('/api/serviceaccounts/hideApiKeys');\n  };\n}\nexport function toggleIncludeExpired() {\n  return dispatch => {\n    dispatch(includeExpiredToggled());\n  };\n}","map":{"version":3,"names":["config","getBackendSrv","store","API_KEYS_MIGRATION_INFO_STORAGE_KEY","apiKeysLoaded","includeExpiredToggled","isFetching","apiKeysMigrationStatusLoaded","setSearchQuery","addApiKey","apiKey","openModal","dispatch","result","post","loadApiKeys","key","keys","keysIncludingExpired","Promise","all","get","deleteApiKey","id","delete","then","migrateApiKey","migrateAll","set","getApiKeysMigrationStatus","featureToggles","serviceAccounts","migrated","hideApiKeys","toggleIncludeExpired"],"sources":["/home/soula/grafana/public/app/features/api-keys/state/actions.ts"],"sourcesContent":["import { config } from '@grafana/runtime';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport store from 'app/core/store';\nimport { API_KEYS_MIGRATION_INFO_STORAGE_KEY } from 'app/features/serviceaccounts/constants';\nimport { ApiKey, ThunkResult } from 'app/types';\n\nimport {\n  apiKeysLoaded,\n  includeExpiredToggled,\n  isFetching,\n  apiKeysMigrationStatusLoaded,\n  setSearchQuery,\n} from './reducers';\n\nexport function addApiKey(apiKey: ApiKey, openModal: (key: string) => void): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post('/api/auth/keys', apiKey);\n    dispatch(setSearchQuery(''));\n    dispatch(loadApiKeys());\n    openModal(result.key);\n  };\n}\n\nexport function loadApiKeys(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(isFetching());\n    const [keys, keysIncludingExpired] = await Promise.all([\n      getBackendSrv().get('/api/auth/keys?includeExpired=false&accesscontrol=true'),\n      getBackendSrv().get('/api/auth/keys?includeExpired=true&accesscontrol=true'),\n    ]);\n    dispatch(apiKeysLoaded({ keys, keysIncludingExpired }));\n  };\n}\n\nexport function deleteApiKey(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    getBackendSrv()\n      .delete(`/api/auth/keys/${id}`)\n      .then(() => dispatch(loadApiKeys()));\n  };\n}\n\nexport function migrateApiKey(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/serviceaccounts/migrate/${id}`);\n    } finally {\n      dispatch(loadApiKeys());\n    }\n  };\n}\n\nexport function migrateAll(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post('/api/serviceaccounts/migrate');\n      store.set(API_KEYS_MIGRATION_INFO_STORAGE_KEY, true);\n    } finally {\n      dispatch(getApiKeysMigrationStatus());\n      dispatch(loadApiKeys());\n    }\n  };\n}\n\nexport function getApiKeysMigrationStatus(): ThunkResult<void> {\n  return async (dispatch) => {\n    // TODO: remove when service account enabled by default (or use another way to detect if it's enabled)\n    if (config.featureToggles.serviceAccounts) {\n      const result = await getBackendSrv().get('/api/serviceaccounts/migrationstatus');\n      dispatch(apiKeysMigrationStatusLoaded(!!result?.migrated));\n    }\n  };\n}\n\nexport function hideApiKeys(): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post('/api/serviceaccounts/hideApiKeys');\n  };\n}\n\nexport function toggleIncludeExpired(): ThunkResult<void> {\n  return (dispatch) => {\n    dispatch(includeExpiredToggled());\n  };\n}\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,aAAT,QAA8B,+BAA9B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,mCAAT,QAAoD,wCAApD;AAGA,SACEC,aADF,EAEEC,qBAFF,EAGEC,UAHF,EAIEC,4BAJF,EAKEC,cALF,QAMO,YANP;AAQA,OAAO,SAASC,SAAT,CAAmBC,MAAnB,EAAmCC,SAAnC,EAAwF;EAC7F,OAAO,MAAOC,QAAP,IAAoB;IACzB,MAAMC,MAAM,GAAG,MAAMZ,aAAa,GAAGa,IAAhB,CAAqB,gBAArB,EAAuCJ,MAAvC,CAArB;IACAE,QAAQ,CAACJ,cAAc,CAAC,EAAD,CAAf,CAAR;IACAI,QAAQ,CAACG,WAAW,EAAZ,CAAR;IACAJ,SAAS,CAACE,MAAM,CAACG,GAAR,CAAT;EACD,CALD;AAMD;AAED,OAAO,SAASD,WAAT,GAA0C;EAC/C,OAAO,MAAOH,QAAP,IAAoB;IACzBA,QAAQ,CAACN,UAAU,EAAX,CAAR;IACA,MAAM,CAACW,IAAD,EAAOC,oBAAP,IAA+B,MAAMC,OAAO,CAACC,GAAR,CAAY,CACrDnB,aAAa,GAAGoB,GAAhB,CAAoB,wDAApB,CADqD,EAErDpB,aAAa,GAAGoB,GAAhB,CAAoB,uDAApB,CAFqD,CAAZ,CAA3C;IAIAT,QAAQ,CAACR,aAAa,CAAC;MAAEa,IAAF;MAAQC;IAAR,CAAD,CAAd,CAAR;EACD,CAPD;AAQD;AAED,OAAO,SAASI,YAAT,CAAsBC,EAAtB,EAAqD;EAC1D,OAAO,MAAOX,QAAP,IAAoB;IACzBX,aAAa,GACVuB,MADH,CACW,kBAAiBD,EAAG,EAD/B,EAEGE,IAFH,CAEQ,MAAMb,QAAQ,CAACG,WAAW,EAAZ,CAFtB;EAGD,CAJD;AAKD;AAED,OAAO,SAASW,aAAT,CAAuBH,EAAvB,EAAsD;EAC3D,OAAO,MAAOX,QAAP,IAAoB;IACzB,IAAI;MACF,MAAMX,aAAa,GAAGa,IAAhB,CAAsB,gCAA+BS,EAAG,EAAxD,CAAN;IACD,CAFD,SAEU;MACRX,QAAQ,CAACG,WAAW,EAAZ,CAAR;IACD;EACF,CAND;AAOD;AAED,OAAO,SAASY,UAAT,GAAyC;EAC9C,OAAO,MAAOf,QAAP,IAAoB;IACzB,IAAI;MACF,MAAMX,aAAa,GAAGa,IAAhB,CAAqB,8BAArB,CAAN;MACAZ,KAAK,CAAC0B,GAAN,CAAUzB,mCAAV,EAA+C,IAA/C;IACD,CAHD,SAGU;MACRS,QAAQ,CAACiB,yBAAyB,EAA1B,CAAR;MACAjB,QAAQ,CAACG,WAAW,EAAZ,CAAR;IACD;EACF,CARD;AASD;AAED,OAAO,SAASc,yBAAT,GAAwD;EAC7D,OAAO,MAAOjB,QAAP,IAAoB;IACzB;IACA,IAAIZ,MAAM,CAAC8B,cAAP,CAAsBC,eAA1B,EAA2C;MACzC,MAAMlB,MAAM,GAAG,MAAMZ,aAAa,GAAGoB,GAAhB,CAAoB,sCAApB,CAArB;MACAT,QAAQ,CAACL,4BAA4B,CAAC,CAAC,EAACM,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEmB,QAAT,CAAF,CAA7B,CAAR;IACD;EACF,CAND;AAOD;AAED,OAAO,SAASC,WAAT,GAA0C;EAC/C,OAAO,MAAOrB,QAAP,IAAoB;IACzB,MAAMX,aAAa,GAAGa,IAAhB,CAAqB,kCAArB,CAAN;EACD,CAFD;AAGD;AAED,OAAO,SAASoB,oBAAT,GAAmD;EACxD,OAAQtB,QAAD,IAAc;IACnBA,QAAQ,CAACP,qBAAqB,EAAtB,CAAR;EACD,CAFD;AAGD"},"metadata":{},"sourceType":"module"}