{"ast":null,"code":"const _excluded = [\"ref\"];\n\nvar _Label;\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Button, Field, FieldArray, Input, InputControl, Label, TextArea, useStyles } from '@grafana/ui';\nimport { AnnotationKeyInput } from './AnnotationKeyInput';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst AnnotationsField = () => {\n  const styles = useStyles(getStyles);\n  const {\n    control,\n    register,\n    watch,\n    formState: {\n      errors\n    }\n  } = useFormContext();\n  const annotations = watch('annotations');\n  const existingKeys = useCallback(index => annotations.filter((_, idx) => idx !== index).map(({\n    key\n  }) => key), [annotations]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [_Label || (_Label = /*#__PURE__*/_jsx(Label, {\n      children: \"Summary and annotations\"\n    })), /*#__PURE__*/_jsx(FieldArray, {\n      name: 'annotations',\n      control: control,\n      children: ({\n        fields,\n        append,\n        remove\n      }) => {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.flexColumn,\n          children: [fields.map((field, index) => {\n            var _annotations$index, _annotations$index$ke, _errors$annotations, _errors$annotations$i, _errors$annotations$i2, _errors$annotations2, _errors$annotations2$, _errors$annotations2$2, _annotations$index2, _errors$annotations3, _errors$annotations3$, _errors$annotations3$2, _errors$annotations4, _errors$annotations4$, _errors$annotations4$2;\n\n            const isUrl = (_annotations$index = annotations[index]) === null || _annotations$index === void 0 ? void 0 : (_annotations$index$ke = _annotations$index.key) === null || _annotations$index$ke === void 0 ? void 0 : _annotations$index$ke.toLocaleLowerCase().endsWith('url');\n            const ValueInputComponent = isUrl ? Input : TextArea;\n            return /*#__PURE__*/_jsxs(\"div\", {\n              className: styles.flexRow,\n              children: [/*#__PURE__*/_jsx(Field, {\n                className: styles.field,\n                invalid: !!((_errors$annotations = errors.annotations) !== null && _errors$annotations !== void 0 && (_errors$annotations$i = _errors$annotations[index]) !== null && _errors$annotations$i !== void 0 && (_errors$annotations$i2 = _errors$annotations$i.key) !== null && _errors$annotations$i2 !== void 0 && _errors$annotations$i2.message),\n                error: (_errors$annotations2 = errors.annotations) === null || _errors$annotations2 === void 0 ? void 0 : (_errors$annotations2$ = _errors$annotations2[index]) === null || _errors$annotations2$ === void 0 ? void 0 : (_errors$annotations2$2 = _errors$annotations2$.key) === null || _errors$annotations2$2 === void 0 ? void 0 : _errors$annotations2$2.message,\n                \"data-testid\": `annotation-key-${index}`,\n                children: /*#__PURE__*/_jsx(InputControl, {\n                  name: `annotations[${index}].key`,\n                  render: _ref => {\n                    let {} = _ref,\n                        field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n                    return /*#__PURE__*/_jsx(AnnotationKeyInput, Object.assign({}, field, {\n                      \"aria-label\": `Annotation detail ${index + 1}`,\n                      existingKeys: existingKeys(index),\n                      width: 18\n                    }));\n                  },\n                  control: control,\n                  rules: {\n                    required: {\n                      value: !!((_annotations$index2 = annotations[index]) !== null && _annotations$index2 !== void 0 && _annotations$index2.value),\n                      message: 'Required.'\n                    }\n                  }\n                })\n              }), /*#__PURE__*/_jsx(Field, {\n                className: cx(styles.flexRowItemMargin, styles.field),\n                invalid: !!((_errors$annotations3 = errors.annotations) !== null && _errors$annotations3 !== void 0 && (_errors$annotations3$ = _errors$annotations3[index]) !== null && _errors$annotations3$ !== void 0 && (_errors$annotations3$2 = _errors$annotations3$.value) !== null && _errors$annotations3$2 !== void 0 && _errors$annotations3$2.message),\n                error: (_errors$annotations4 = errors.annotations) === null || _errors$annotations4 === void 0 ? void 0 : (_errors$annotations4$ = _errors$annotations4[index]) === null || _errors$annotations4$ === void 0 ? void 0 : (_errors$annotations4$2 = _errors$annotations4$.value) === null || _errors$annotations4$2 === void 0 ? void 0 : _errors$annotations4$2.message,\n                children: /*#__PURE__*/_jsx(ValueInputComponent, Object.assign({\n                  \"data-testid\": `annotation-value-${index}`,\n                  className: cx(styles.annotationValueInput, {\n                    [styles.textarea]: !isUrl\n                  })\n                }, register(`annotations[${index}].value`), {\n                  placeholder: isUrl ? 'https://' : `Text`,\n                  defaultValue: field.value\n                }))\n              }), /*#__PURE__*/_jsx(Button, {\n                type: \"button\",\n                className: styles.flexRowItemMargin,\n                \"aria-label\": \"delete annotation\",\n                icon: \"trash-alt\",\n                variant: \"secondary\",\n                onClick: () => remove(index)\n              })]\n            }, field.id);\n          }), /*#__PURE__*/_jsx(Button, {\n            className: styles.addAnnotationsButton,\n            icon: \"plus-circle\",\n            type: \"button\",\n            variant: \"secondary\",\n            onClick: () => {\n              append({\n                key: '',\n                value: ''\n              });\n            },\n            children: \"Add info\"\n          })]\n        });\n      }\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  annotationValueInput: css`\n    width: 426px;\n  `,\n  textarea: css`\n    height: 76px;\n  `,\n  addAnnotationsButton: css`\n    flex-grow: 0;\n    align-self: flex-start;\n    margin-left: 148px;\n  `,\n  flexColumn: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  field: css`\n    margin-bottom: ${theme.spacing.xs};\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n  `,\n  flexRowItemMargin: css`\n    margin-left: ${theme.spacing.xs};\n  `\n});\n\nexport default AnnotationsField;","map":{"version":3,"names":["css","cx","React","useCallback","useFormContext","Button","Field","FieldArray","Input","InputControl","Label","TextArea","useStyles","AnnotationKeyInput","AnnotationsField","styles","getStyles","control","register","watch","formState","errors","annotations","existingKeys","index","filter","_","idx","map","key","fields","append","remove","flexColumn","field","isUrl","toLocaleLowerCase","endsWith","ValueInputComponent","flexRow","message","required","value","flexRowItemMargin","annotationValueInput","textarea","id","addAnnotationsButton","theme","spacing","xs"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/AnnotationsField.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { FC, useCallback } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { Button, Field, FieldArray, Input, InputControl, Label, TextArea, useStyles } from '@grafana/ui';\n\nimport { RuleFormValues } from '../../types/rule-form';\n\nimport { AnnotationKeyInput } from './AnnotationKeyInput';\n\nconst AnnotationsField: FC = () => {\n  const styles = useStyles(getStyles);\n  const {\n    control,\n    register,\n    watch,\n    formState: { errors },\n  } = useFormContext();\n  const annotations = watch('annotations') as RuleFormValues['annotations'];\n\n  const existingKeys = useCallback(\n    (index: number): string[] => annotations.filter((_, idx: number) => idx !== index).map(({ key }) => key),\n    [annotations]\n  );\n\n  return (\n    <>\n      <Label>Summary and annotations</Label>\n      <FieldArray name={'annotations'} control={control}>\n        {({ fields, append, remove }) => {\n          return (\n            <div className={styles.flexColumn}>\n              {fields.map((field, index) => {\n                const isUrl = annotations[index]?.key?.toLocaleLowerCase().endsWith('url');\n                const ValueInputComponent = isUrl ? Input : TextArea;\n                return (\n                  <div key={field.id} className={styles.flexRow}>\n                    <Field\n                      className={styles.field}\n                      invalid={!!errors.annotations?.[index]?.key?.message}\n                      error={errors.annotations?.[index]?.key?.message}\n                      data-testid={`annotation-key-${index}`}\n                    >\n                      <InputControl\n                        name={`annotations[${index}].key`}\n                        render={({ field: { ref, ...field } }) => (\n                          <AnnotationKeyInput\n                            {...field}\n                            aria-label={`Annotation detail ${index + 1}`}\n                            existingKeys={existingKeys(index)}\n                            width={18}\n                          />\n                        )}\n                        control={control}\n                        rules={{ required: { value: !!annotations[index]?.value, message: 'Required.' } }}\n                      />\n                    </Field>\n                    <Field\n                      className={cx(styles.flexRowItemMargin, styles.field)}\n                      invalid={!!errors.annotations?.[index]?.value?.message}\n                      error={errors.annotations?.[index]?.value?.message}\n                    >\n                      <ValueInputComponent\n                        data-testid={`annotation-value-${index}`}\n                        className={cx(styles.annotationValueInput, { [styles.textarea]: !isUrl })}\n                        {...register(`annotations[${index}].value`)}\n                        placeholder={isUrl ? 'https://' : `Text`}\n                        defaultValue={field.value}\n                      />\n                    </Field>\n                    <Button\n                      type=\"button\"\n                      className={styles.flexRowItemMargin}\n                      aria-label=\"delete annotation\"\n                      icon=\"trash-alt\"\n                      variant=\"secondary\"\n                      onClick={() => remove(index)}\n                    />\n                  </div>\n                );\n              })}\n              <Button\n                className={styles.addAnnotationsButton}\n                icon=\"plus-circle\"\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => {\n                  append({ key: '', value: '' });\n                }}\n              >\n                Add info\n              </Button>\n            </div>\n          );\n        }}\n      </FieldArray>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  annotationValueInput: css`\n    width: 426px;\n  `,\n  textarea: css`\n    height: 76px;\n  `,\n  addAnnotationsButton: css`\n    flex-grow: 0;\n    align-self: flex-start;\n    margin-left: 148px;\n  `,\n  flexColumn: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  field: css`\n    margin-bottom: ${theme.spacing.xs};\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n  `,\n  flexRowItemMargin: css`\n    margin-left: ${theme.spacing.xs};\n  `,\n});\n\nexport default AnnotationsField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}