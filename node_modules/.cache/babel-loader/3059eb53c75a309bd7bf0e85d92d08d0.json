{"ast":null,"code":"import { getBackendSrv } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport { updateTimeZoneForSession, updateWeekStartForSession } from 'app/features/profile/state/reducers';\nimport { loadPluginDashboards } from '../../plugins/admin/state/actions';\nimport { cancelVariables } from '../../variables/state/actions';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { cleanUpDashboard, loadDashboardPermissions } from './reducers';\nexport function getDashboardPermissions(id) {\n  return async dispatch => {\n    const permissions = await getBackendSrv().get(`/api/dashboards/id/${id}/permissions`);\n    dispatch(loadDashboardPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item) {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission\n  };\n}\n\nexport function updateDashboardPermission(dashboardId, itemToUpdate, level) {\n  return async (dispatch, getStore) => {\n    const {\n      dashboard\n    } = getStore();\n    const itemsToUpdate = [];\n\n    for (const item of dashboard.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item); // if this is the item we want to update, update it's permission\n\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await getBackendSrv().post(`/api/dashboards/id/${dashboardId}/permissions`, {\n      items: itemsToUpdate\n    });\n    await dispatch(getDashboardPermissions(dashboardId));\n  };\n}\nexport function removeDashboardPermission(dashboardId, itemToDelete) {\n  return async (dispatch, getStore) => {\n    const dashboard = getStore().dashboard;\n    const itemsToUpdate = [];\n\n    for (const item of dashboard.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await getBackendSrv().post(`/api/dashboards/id/${dashboardId}/permissions`, {\n      items: itemsToUpdate\n    });\n    await dispatch(getDashboardPermissions(dashboardId));\n  };\n}\nexport function addDashboardPermission(dashboardId, newItem) {\n  return async (dispatch, getStore) => {\n    const {\n      dashboard\n    } = getStore();\n    const itemsToUpdate = [];\n\n    for (const item of dashboard.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission\n    });\n    await getBackendSrv().post(`/api/dashboards/id/${dashboardId}/permissions`, {\n      items: itemsToUpdate\n    });\n    await dispatch(getDashboardPermissions(dashboardId));\n  };\n}\nexport function importDashboard(data, dashboardTitle) {\n  return async dispatch => {\n    await getBackendSrv().post('/api/dashboards/import', data);\n    dispatch(notifyApp(createSuccessNotification('Dashboard Imported', dashboardTitle)));\n    dispatch(loadPluginDashboards());\n  };\n}\nexport function removeDashboard(uid) {\n  return async dispatch => {\n    await getBackendSrv().delete(`/api/dashboards/uid/${uid}`);\n    dispatch(loadPluginDashboards());\n  };\n}\nexport const cleanUpDashboardAndVariables = () => (dispatch, getStore) => {\n  const store = getStore();\n  const dashboard = store.dashboard.getModel();\n\n  if (dashboard) {\n    dashboard.destroy();\n    dispatch(cancelVariables(dashboard.uid));\n  }\n\n  getTimeSrv().stopAutoRefresh();\n  dispatch(cleanUpDashboard());\n};\nexport const updateTimeZoneDashboard = timeZone => dispatch => {\n  dispatch(updateTimeZoneForSession(timeZone));\n  getTimeSrv().refreshTimeModel();\n};\nexport const updateWeekStartDashboard = weekStart => dispatch => {\n  dispatch(updateWeekStartForSession(weekStart));\n  getTimeSrv().refreshTimeModel();\n};","map":{"version":3,"names":["getBackendSrv","notifyApp","createSuccessNotification","updateTimeZoneForSession","updateWeekStartForSession","loadPluginDashboards","cancelVariables","getTimeSrv","cleanUpDashboard","loadDashboardPermissions","getDashboardPermissions","id","dispatch","permissions","get","toUpdateItem","item","userId","teamId","role","permission","updateDashboardPermission","dashboardId","itemToUpdate","level","getStore","dashboard","itemsToUpdate","inherited","updated","push","post","items","removeDashboardPermission","itemToDelete","addDashboardPermission","newItem","importDashboard","data","dashboardTitle","removeDashboard","uid","delete","cleanUpDashboardAndVariables","store","getModel","destroy","stopAutoRefresh","updateTimeZoneDashboard","timeZone","refreshTimeModel","updateWeekStartDashboard","weekStart"],"sources":["/home/soula/grafana/public/app/features/dashboard/state/actions.ts"],"sourcesContent":["import { TimeZone } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport { updateTimeZoneForSession, updateWeekStartForSession } from 'app/features/profile/state/reducers';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel, ThunkResult } from 'app/types';\n\nimport { loadPluginDashboards } from '../../plugins/admin/state/actions';\nimport { cancelVariables } from '../../variables/state/actions';\nimport { getTimeSrv } from '../services/TimeSrv';\n\nimport { cleanUpDashboard, loadDashboardPermissions } from './reducers';\n\nexport function getDashboardPermissions(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const permissions = await getBackendSrv().get(`/api/dashboards/id/${id}/permissions`);\n    dispatch(loadDashboardPermissions(permissions));\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateDashboardPermission(\n  dashboardId: number,\n  itemToUpdate: DashboardAcl,\n  level: PermissionLevel\n): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { dashboard } = getStore();\n    const itemsToUpdate = [];\n\n    for (const item of dashboard.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await getBackendSrv().post(`/api/dashboards/id/${dashboardId}/permissions`, { items: itemsToUpdate });\n    await dispatch(getDashboardPermissions(dashboardId));\n  };\n}\n\nexport function removeDashboardPermission(dashboardId: number, itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dashboard = getStore().dashboard;\n    const itemsToUpdate = [];\n\n    for (const item of dashboard.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await getBackendSrv().post(`/api/dashboards/id/${dashboardId}/permissions`, { items: itemsToUpdate });\n    await dispatch(getDashboardPermissions(dashboardId));\n  };\n}\n\nexport function addDashboardPermission(dashboardId: number, newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { dashboard } = getStore();\n    const itemsToUpdate = [];\n\n    for (const item of dashboard.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await getBackendSrv().post(`/api/dashboards/id/${dashboardId}/permissions`, { items: itemsToUpdate });\n    await dispatch(getDashboardPermissions(dashboardId));\n  };\n}\n\nexport function importDashboard(data: any, dashboardTitle: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post('/api/dashboards/import', data);\n    dispatch(notifyApp(createSuccessNotification('Dashboard Imported', dashboardTitle)));\n    dispatch(loadPluginDashboards());\n  };\n}\n\nexport function removeDashboard(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/dashboards/uid/${uid}`);\n    dispatch(loadPluginDashboards());\n  };\n}\n\nexport const cleanUpDashboardAndVariables = (): ThunkResult<void> => (dispatch, getStore) => {\n  const store = getStore();\n  const dashboard = store.dashboard.getModel();\n\n  if (dashboard) {\n    dashboard.destroy();\n    dispatch(cancelVariables(dashboard.uid));\n  }\n\n  getTimeSrv().stopAutoRefresh();\n\n  dispatch(cleanUpDashboard());\n};\n\nexport const updateTimeZoneDashboard =\n  (timeZone: TimeZone): ThunkResult<void> =>\n  (dispatch) => {\n    dispatch(updateTimeZoneForSession(timeZone));\n    getTimeSrv().refreshTimeModel();\n  };\n\nexport const updateWeekStartDashboard =\n  (weekStart: string): ThunkResult<void> =>\n  (dispatch) => {\n    dispatch(updateWeekStartForSession(weekStart));\n    getTimeSrv().refreshTimeModel();\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}