{"ast":null,"code":"import { getDataSourceSrv } from '@grafana/runtime';\nimport { encodeUrl } from '../aws_url';\nexport async function addDataLinksToLogsResponse(response, request, range, replaceFn, getVariableValueFn, getRegion, tracingDatasourceUid) {\n  const replace = (target, fieldName) => replaceFn(target, request.scopedVars, true, fieldName);\n\n  const getVariableValue = target => getVariableValueFn(target, request.scopedVars);\n\n  for (const dataFrame of response.data) {\n    var _curTarget$region;\n\n    const curTarget = request.targets.find(target => target.refId === dataFrame.refId);\n    const interpolatedRegion = getRegion(replace((_curTarget$region = curTarget.region) !== null && _curTarget$region !== void 0 ? _curTarget$region : '', 'region'));\n\n    for (const field of dataFrame.fields) {\n      if (field.name === '@xrayTraceId' && tracingDatasourceUid) {\n        var _curTarget$region2;\n\n        getRegion(replace((_curTarget$region2 = curTarget.region) !== null && _curTarget$region2 !== void 0 ? _curTarget$region2 : '', 'region'));\n        const xrayLink = await createInternalXrayLink(tracingDatasourceUid, interpolatedRegion);\n\n        if (xrayLink) {\n          field.config.links = [xrayLink];\n        }\n      } else {\n        // Right now we add generic link to open the query in xray console to every field so it shows in the logs row\n        // details. Unfortunately this also creates link for all values inside table which look weird.\n        field.config.links = [createAwsConsoleLink(curTarget, range, interpolatedRegion, replace, getVariableValue)];\n      }\n    }\n  }\n}\n\nasync function createInternalXrayLink(datasourceUid, region) {\n  let ds;\n\n  try {\n    ds = await getDataSourceSrv().get(datasourceUid);\n  } catch (e) {\n    console.error('Could not load linked xray data source, it was probably deleted after it was linked', e);\n    return undefined;\n  }\n\n  return {\n    title: ds.name,\n    url: '',\n    internal: {\n      query: {\n        query: '${__value.raw}',\n        queryType: 'getTrace',\n        region: region\n      },\n      datasourceUid: datasourceUid,\n      datasourceName: ds.name\n    }\n  };\n}\n\nfunction createAwsConsoleLink(target, range, region, replace, getVariableValue) {\n  var _target$logGroupNames, _target$logGroupNames2;\n\n  const interpolatedExpression = target.expression ? replace(target.expression) : '';\n  const interpolatedGroups = (_target$logGroupNames = (_target$logGroupNames2 = target.logGroupNames) === null || _target$logGroupNames2 === void 0 ? void 0 : _target$logGroupNames2.flatMap(getVariableValue)) !== null && _target$logGroupNames !== void 0 ? _target$logGroupNames : [];\n  const urlProps = {\n    end: range.to.toISOString(),\n    start: range.from.toISOString(),\n    timeType: 'ABSOLUTE',\n    tz: 'UTC',\n    editorString: interpolatedExpression,\n    isLiveTail: false,\n    source: interpolatedGroups\n  };\n  const encodedUrl = encodeUrl(urlProps, region);\n  return {\n    url: encodedUrl,\n    title: 'View in CloudWatch console',\n    targetBlank: true\n  };\n}","map":{"version":3,"names":["getDataSourceSrv","encodeUrl","addDataLinksToLogsResponse","response","request","range","replaceFn","getVariableValueFn","getRegion","tracingDatasourceUid","replace","target","fieldName","scopedVars","getVariableValue","dataFrame","data","curTarget","targets","find","refId","interpolatedRegion","region","field","fields","name","xrayLink","createInternalXrayLink","config","links","createAwsConsoleLink","datasourceUid","ds","get","e","console","error","undefined","title","url","internal","query","queryType","datasourceName","interpolatedExpression","expression","interpolatedGroups","logGroupNames","flatMap","urlProps","end","to","toISOString","start","from","timeType","tz","editorString","isLiveTail","source","encodedUrl","targetBlank"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/utils/datalinks.ts"],"sourcesContent":["import { DataFrame, DataLink, DataQueryRequest, DataQueryResponse, ScopedVars, TimeRange } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { AwsUrl, encodeUrl } from '../aws_url';\nimport { CloudWatchLogsQuery, CloudWatchQuery } from '../types';\n\ntype ReplaceFn = (\n  target?: string,\n  scopedVars?: ScopedVars,\n  displayErrorIfIsMultiTemplateVariable?: boolean,\n  fieldName?: string\n) => string;\n\nexport async function addDataLinksToLogsResponse(\n  response: DataQueryResponse,\n  request: DataQueryRequest<CloudWatchQuery>,\n  range: TimeRange,\n  replaceFn: ReplaceFn,\n  getVariableValueFn: (value: string, scopedVars: ScopedVars) => string[],\n  getRegion: (region: string) => string,\n  tracingDatasourceUid?: string\n): Promise<void> {\n  const replace = (target: string, fieldName?: string) => replaceFn(target, request.scopedVars, true, fieldName);\n  const getVariableValue = (target: string) => getVariableValueFn(target, request.scopedVars);\n\n  for (const dataFrame of response.data as DataFrame[]) {\n    const curTarget = request.targets.find((target) => target.refId === dataFrame.refId) as CloudWatchLogsQuery;\n    const interpolatedRegion = getRegion(replace(curTarget.region ?? '', 'region'));\n\n    for (const field of dataFrame.fields) {\n      if (field.name === '@xrayTraceId' && tracingDatasourceUid) {\n        getRegion(replace(curTarget.region ?? '', 'region'));\n        const xrayLink = await createInternalXrayLink(tracingDatasourceUid, interpolatedRegion);\n        if (xrayLink) {\n          field.config.links = [xrayLink];\n        }\n      } else {\n        // Right now we add generic link to open the query in xray console to every field so it shows in the logs row\n        // details. Unfortunately this also creates link for all values inside table which look weird.\n        field.config.links = [createAwsConsoleLink(curTarget, range, interpolatedRegion, replace, getVariableValue)];\n      }\n    }\n  }\n}\n\nasync function createInternalXrayLink(datasourceUid: string, region: string) {\n  let ds;\n  try {\n    ds = await getDataSourceSrv().get(datasourceUid);\n  } catch (e) {\n    console.error('Could not load linked xray data source, it was probably deleted after it was linked', e);\n    return undefined;\n  }\n\n  return {\n    title: ds.name,\n    url: '',\n    internal: {\n      query: { query: '${__value.raw}', queryType: 'getTrace', region: region },\n      datasourceUid: datasourceUid,\n      datasourceName: ds.name,\n    },\n  } as DataLink;\n}\n\nfunction createAwsConsoleLink(\n  target: CloudWatchLogsQuery,\n  range: TimeRange,\n  region: string,\n  replace: (target: string, fieldName?: string) => string,\n  getVariableValue: (value: string) => string[]\n) {\n  const interpolatedExpression = target.expression ? replace(target.expression) : '';\n  const interpolatedGroups = target.logGroupNames?.flatMap(getVariableValue) ?? [];\n\n  const urlProps: AwsUrl = {\n    end: range.to.toISOString(),\n    start: range.from.toISOString(),\n    timeType: 'ABSOLUTE',\n    tz: 'UTC',\n    editorString: interpolatedExpression,\n    isLiveTail: false,\n    source: interpolatedGroups,\n  };\n\n  const encodedUrl = encodeUrl(urlProps, region);\n  return {\n    url: encodedUrl,\n    title: 'View in CloudWatch console',\n    targetBlank: true,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}