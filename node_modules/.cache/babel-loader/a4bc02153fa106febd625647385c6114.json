{"ast":null,"code":"/**\n * To align two Y axes by Y level\n * @param yAxes data [{min: min_y1, min: max_y1}, {min: min_y2, max: max_y2}]\n * @param level Y level\n */\nexport function alignYLevel(yAxes, level) {\n  if (isNaN(level) || !checkCorrectAxis(yAxes)) {\n    return;\n  }\n\n  const [yLeft, yRight] = yAxes;\n  moveLevelToZero(yLeft, yRight, level);\n  expandStuckValues(yLeft, yRight); // one of graphs on zero\n\n  const zero = yLeft.min === 0 || yRight.min === 0 || yLeft.max === 0 || yRight.max === 0;\n  const oneSide = checkOneSide(yLeft, yRight);\n\n  if (zero && oneSide) {\n    yLeft.min = yLeft.max > 0 ? 0 : yLeft.min;\n    yLeft.max = yLeft.max > 0 ? yLeft.max : 0;\n    yRight.min = yRight.max > 0 ? 0 : yRight.min;\n    yRight.max = yRight.max > 0 ? yRight.max : 0;\n  } else {\n    if (checkOppositeSides(yLeft, yRight)) {\n      if (yLeft.min >= 0) {\n        yLeft.min = -yLeft.max;\n        yRight.max = -yRight.min;\n      } else {\n        yLeft.max = -yLeft.min;\n        yRight.min = -yRight.max;\n      }\n    } else {\n      const rate = getRate(yLeft, yRight);\n\n      if (oneSide) {\n        // all graphs above the Y level\n        if (yLeft.min > 0) {\n          yLeft.min = yLeft.max / rate;\n          yRight.min = yRight.max / rate;\n        } else {\n          yLeft.max = yLeft.min / rate;\n          yRight.max = yRight.min / rate;\n        }\n      } else {\n        if (checkTwoCross(yLeft, yRight)) {\n          yLeft.min = yRight.min ? yRight.min * rate : yLeft.min;\n          yRight.min = yLeft.min ? yLeft.min / rate : yRight.min;\n          yLeft.max = yRight.max ? yRight.max * rate : yLeft.max;\n          yRight.max = yLeft.max ? yLeft.max / rate : yRight.max;\n        } else {\n          yLeft.min = yLeft.min > 0 ? yRight.min * rate : yLeft.min;\n          yRight.min = yRight.min > 0 ? yLeft.min / rate : yRight.min;\n          yLeft.max = yLeft.max < 0 ? yRight.max * rate : yLeft.max;\n          yRight.max = yRight.max < 0 ? yLeft.max / rate : yRight.max;\n        }\n      }\n    }\n  }\n\n  restoreLevelFromZero(yLeft, yRight, level);\n}\n\nfunction expandStuckValues(yLeft, yRight) {\n  // wide Y min and max using increased wideFactor\n  const wideFactor = 0.25;\n\n  if (yLeft.max === yLeft.min) {\n    yLeft.min -= wideFactor;\n    yLeft.max += wideFactor;\n  }\n\n  if (yRight.max === yRight.min) {\n    yRight.min -= wideFactor;\n    yRight.max += wideFactor;\n  }\n}\n\nfunction moveLevelToZero(yLeft, yRight, level) {\n  if (level !== 0) {\n    yLeft.min -= level;\n    yLeft.max -= level;\n    yRight.min -= level;\n    yRight.max -= level;\n  }\n}\n\nfunction restoreLevelFromZero(yLeft, yRight, level) {\n  if (level !== 0) {\n    yLeft.min += level;\n    yLeft.max += level;\n    yRight.min += level;\n    yRight.max += level;\n  }\n}\n\nfunction checkCorrectAxis(axis) {\n  return axis.length === 2 && checkCorrectAxes(axis[0]) && checkCorrectAxes(axis[1]);\n}\n\nfunction checkCorrectAxes(axes) {\n  return 'min' in axes && 'max' in axes;\n}\n\nfunction checkOneSide(yLeft, yRight) {\n  // on the one hand with respect to zero\n  return yLeft.min >= 0 && yRight.min >= 0 || yLeft.max <= 0 && yRight.max <= 0;\n}\n\nfunction checkTwoCross(yLeft, yRight) {\n  // both across zero\n  return yLeft.min <= 0 && yLeft.max >= 0 && yRight.min <= 0 && yRight.max >= 0;\n}\n\nfunction checkOppositeSides(yLeft, yRight) {\n  // on the opposite sides with respect to zero\n  return yLeft.min >= 0 && yRight.max <= 0 || yLeft.max <= 0 && yRight.min >= 0;\n}\n\nfunction getRate(yLeft, yRight) {\n  if (checkTwoCross(yLeft, yRight)) {\n    const rateLeft = yRight.min ? yLeft.min / yRight.min : 0;\n    const rateRight = yRight.max ? yLeft.max / yRight.max : 0;\n    return rateLeft > rateRight ? rateLeft : rateRight;\n  }\n\n  if (checkOneSide(yLeft, yRight)) {\n    const absLeftMin = Math.abs(yLeft.min);\n    const absLeftMax = Math.abs(yLeft.max);\n    const absRightMin = Math.abs(yRight.min);\n    const absRightMax = Math.abs(yRight.max);\n    const upLeft = Math.max(absLeftMin, absLeftMax);\n    const downLeft = Math.min(absLeftMin, absLeftMax);\n    const upRight = Math.max(absRightMin, absRightMax);\n    const downRight = Math.min(absRightMin, absRightMax);\n    const rateLeft = downLeft !== 0 ? upLeft / downLeft : upLeft;\n    const rateRight = downRight !== 0 ? upRight / downRight : upRight;\n    return rateLeft > rateRight ? rateLeft : rateRight;\n  }\n\n  if (yLeft.min > 0 || yRight.min > 0) {\n    return yLeft.max / yRight.max;\n  } else {\n    return yLeft.min / yRight.min;\n  }\n}","map":{"version":3,"names":["alignYLevel","yAxes","level","isNaN","checkCorrectAxis","yLeft","yRight","moveLevelToZero","expandStuckValues","zero","min","max","oneSide","checkOneSide","checkOppositeSides","rate","getRate","checkTwoCross","restoreLevelFromZero","wideFactor","axis","length","checkCorrectAxes","axes","rateLeft","rateRight","absLeftMin","Math","abs","absLeftMax","absRightMin","absRightMax","upLeft","downLeft","upRight","downRight"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/align_yaxes.ts"],"sourcesContent":["/**\n * To align two Y axes by Y level\n * @param yAxes data [{min: min_y1, min: max_y1}, {min: min_y2, max: max_y2}]\n * @param level Y level\n */\nexport function alignYLevel(yAxes: any, level: any) {\n  if (isNaN(level) || !checkCorrectAxis(yAxes)) {\n    return;\n  }\n\n  const [yLeft, yRight] = yAxes;\n  moveLevelToZero(yLeft, yRight, level);\n\n  expandStuckValues(yLeft, yRight);\n\n  // one of graphs on zero\n  const zero = yLeft.min === 0 || yRight.min === 0 || yLeft.max === 0 || yRight.max === 0;\n\n  const oneSide = checkOneSide(yLeft, yRight);\n\n  if (zero && oneSide) {\n    yLeft.min = yLeft.max > 0 ? 0 : yLeft.min;\n    yLeft.max = yLeft.max > 0 ? yLeft.max : 0;\n    yRight.min = yRight.max > 0 ? 0 : yRight.min;\n    yRight.max = yRight.max > 0 ? yRight.max : 0;\n  } else {\n    if (checkOppositeSides(yLeft, yRight)) {\n      if (yLeft.min >= 0) {\n        yLeft.min = -yLeft.max;\n        yRight.max = -yRight.min;\n      } else {\n        yLeft.max = -yLeft.min;\n        yRight.min = -yRight.max;\n      }\n    } else {\n      const rate = getRate(yLeft, yRight);\n\n      if (oneSide) {\n        // all graphs above the Y level\n        if (yLeft.min > 0) {\n          yLeft.min = yLeft.max / rate;\n          yRight.min = yRight.max / rate;\n        } else {\n          yLeft.max = yLeft.min / rate;\n          yRight.max = yRight.min / rate;\n        }\n      } else {\n        if (checkTwoCross(yLeft, yRight)) {\n          yLeft.min = yRight.min ? yRight.min * rate : yLeft.min;\n          yRight.min = yLeft.min ? yLeft.min / rate : yRight.min;\n          yLeft.max = yRight.max ? yRight.max * rate : yLeft.max;\n          yRight.max = yLeft.max ? yLeft.max / rate : yRight.max;\n        } else {\n          yLeft.min = yLeft.min > 0 ? yRight.min * rate : yLeft.min;\n          yRight.min = yRight.min > 0 ? yLeft.min / rate : yRight.min;\n          yLeft.max = yLeft.max < 0 ? yRight.max * rate : yLeft.max;\n          yRight.max = yRight.max < 0 ? yLeft.max / rate : yRight.max;\n        }\n      }\n    }\n  }\n\n  restoreLevelFromZero(yLeft, yRight, level);\n}\n\nfunction expandStuckValues(yLeft: { max: number; min: number }, yRight: { max: number; min: number }) {\n  // wide Y min and max using increased wideFactor\n  const wideFactor = 0.25;\n  if (yLeft.max === yLeft.min) {\n    yLeft.min -= wideFactor;\n    yLeft.max += wideFactor;\n  }\n  if (yRight.max === yRight.min) {\n    yRight.min -= wideFactor;\n    yRight.max += wideFactor;\n  }\n}\n\nfunction moveLevelToZero(yLeft: { min: number; max: number }, yRight: { min: number; max: number }, level: number) {\n  if (level !== 0) {\n    yLeft.min -= level;\n    yLeft.max -= level;\n    yRight.min -= level;\n    yRight.max -= level;\n  }\n}\n\nfunction restoreLevelFromZero(\n  yLeft: { min: number; max: number },\n  yRight: { min: number; max: number },\n  level: number\n) {\n  if (level !== 0) {\n    yLeft.min += level;\n    yLeft.max += level;\n    yRight.min += level;\n    yRight.max += level;\n  }\n}\n\ninterface AxisSide {\n  max: number;\n  min: number;\n}\n\nfunction checkCorrectAxis(axis: any[]): boolean {\n  return axis.length === 2 && checkCorrectAxes(axis[0]) && checkCorrectAxes(axis[1]);\n}\n\nfunction checkCorrectAxes(axes: any): boolean {\n  return 'min' in axes && 'max' in axes;\n}\n\nfunction checkOneSide(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // on the one hand with respect to zero\n  return (yLeft.min >= 0 && yRight.min >= 0) || (yLeft.max <= 0 && yRight.max <= 0);\n}\n\nfunction checkTwoCross(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // both across zero\n  return yLeft.min <= 0 && yLeft.max >= 0 && yRight.min <= 0 && yRight.max >= 0;\n}\n\nfunction checkOppositeSides(yLeft: AxisSide, yRight: AxisSide): boolean {\n  // on the opposite sides with respect to zero\n  return (yLeft.min >= 0 && yRight.max <= 0) || (yLeft.max <= 0 && yRight.min >= 0);\n}\n\nfunction getRate(yLeft: AxisSide, yRight: AxisSide): number {\n  if (checkTwoCross(yLeft, yRight)) {\n    const rateLeft = yRight.min ? yLeft.min / yRight.min : 0;\n    const rateRight = yRight.max ? yLeft.max / yRight.max : 0;\n\n    return rateLeft > rateRight ? rateLeft : rateRight;\n  }\n\n  if (checkOneSide(yLeft, yRight)) {\n    const absLeftMin = Math.abs(yLeft.min);\n    const absLeftMax = Math.abs(yLeft.max);\n    const absRightMin = Math.abs(yRight.min);\n    const absRightMax = Math.abs(yRight.max);\n    const upLeft = Math.max(absLeftMin, absLeftMax);\n    const downLeft = Math.min(absLeftMin, absLeftMax);\n    const upRight = Math.max(absRightMin, absRightMax);\n    const downRight = Math.min(absRightMin, absRightMax);\n\n    const rateLeft = downLeft !== 0 ? upLeft / downLeft : upLeft;\n    const rateRight = downRight !== 0 ? upRight / downRight : upRight;\n\n    return rateLeft > rateRight ? rateLeft : rateRight;\n  }\n\n  if (yLeft.min > 0 || yRight.min > 0) {\n    return yLeft.max / yRight.max;\n  } else {\n    return yLeft.min / yRight.min;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,WAAT,CAAqBC,KAArB,EAAiCC,KAAjC,EAA6C;EAClD,IAAIC,KAAK,CAACD,KAAD,CAAL,IAAgB,CAACE,gBAAgB,CAACH,KAAD,CAArC,EAA8C;IAC5C;EACD;;EAED,MAAM,CAACI,KAAD,EAAQC,MAAR,IAAkBL,KAAxB;EACAM,eAAe,CAACF,KAAD,EAAQC,MAAR,EAAgBJ,KAAhB,CAAf;EAEAM,iBAAiB,CAACH,KAAD,EAAQC,MAAR,CAAjB,CARkD,CAUlD;;EACA,MAAMG,IAAI,GAAGJ,KAAK,CAACK,GAAN,KAAc,CAAd,IAAmBJ,MAAM,CAACI,GAAP,KAAe,CAAlC,IAAuCL,KAAK,CAACM,GAAN,KAAc,CAArD,IAA0DL,MAAM,CAACK,GAAP,KAAe,CAAtF;EAEA,MAAMC,OAAO,GAAGC,YAAY,CAACR,KAAD,EAAQC,MAAR,CAA5B;;EAEA,IAAIG,IAAI,IAAIG,OAAZ,EAAqB;IACnBP,KAAK,CAACK,GAAN,GAAYL,KAAK,CAACM,GAAN,GAAY,CAAZ,GAAgB,CAAhB,GAAoBN,KAAK,CAACK,GAAtC;IACAL,KAAK,CAACM,GAAN,GAAYN,KAAK,CAACM,GAAN,GAAY,CAAZ,GAAgBN,KAAK,CAACM,GAAtB,GAA4B,CAAxC;IACAL,MAAM,CAACI,GAAP,GAAaJ,MAAM,CAACK,GAAP,GAAa,CAAb,GAAiB,CAAjB,GAAqBL,MAAM,CAACI,GAAzC;IACAJ,MAAM,CAACK,GAAP,GAAaL,MAAM,CAACK,GAAP,GAAa,CAAb,GAAiBL,MAAM,CAACK,GAAxB,GAA8B,CAA3C;EACD,CALD,MAKO;IACL,IAAIG,kBAAkB,CAACT,KAAD,EAAQC,MAAR,CAAtB,EAAuC;MACrC,IAAID,KAAK,CAACK,GAAN,IAAa,CAAjB,EAAoB;QAClBL,KAAK,CAACK,GAAN,GAAY,CAACL,KAAK,CAACM,GAAnB;QACAL,MAAM,CAACK,GAAP,GAAa,CAACL,MAAM,CAACI,GAArB;MACD,CAHD,MAGO;QACLL,KAAK,CAACM,GAAN,GAAY,CAACN,KAAK,CAACK,GAAnB;QACAJ,MAAM,CAACI,GAAP,GAAa,CAACJ,MAAM,CAACK,GAArB;MACD;IACF,CARD,MAQO;MACL,MAAMI,IAAI,GAAGC,OAAO,CAACX,KAAD,EAAQC,MAAR,CAApB;;MAEA,IAAIM,OAAJ,EAAa;QACX;QACA,IAAIP,KAAK,CAACK,GAAN,GAAY,CAAhB,EAAmB;UACjBL,KAAK,CAACK,GAAN,GAAYL,KAAK,CAACM,GAAN,GAAYI,IAAxB;UACAT,MAAM,CAACI,GAAP,GAAaJ,MAAM,CAACK,GAAP,GAAaI,IAA1B;QACD,CAHD,MAGO;UACLV,KAAK,CAACM,GAAN,GAAYN,KAAK,CAACK,GAAN,GAAYK,IAAxB;UACAT,MAAM,CAACK,GAAP,GAAaL,MAAM,CAACI,GAAP,GAAaK,IAA1B;QACD;MACF,CATD,MASO;QACL,IAAIE,aAAa,CAACZ,KAAD,EAAQC,MAAR,CAAjB,EAAkC;UAChCD,KAAK,CAACK,GAAN,GAAYJ,MAAM,CAACI,GAAP,GAAaJ,MAAM,CAACI,GAAP,GAAaK,IAA1B,GAAiCV,KAAK,CAACK,GAAnD;UACAJ,MAAM,CAACI,GAAP,GAAaL,KAAK,CAACK,GAAN,GAAYL,KAAK,CAACK,GAAN,GAAYK,IAAxB,GAA+BT,MAAM,CAACI,GAAnD;UACAL,KAAK,CAACM,GAAN,GAAYL,MAAM,CAACK,GAAP,GAAaL,MAAM,CAACK,GAAP,GAAaI,IAA1B,GAAiCV,KAAK,CAACM,GAAnD;UACAL,MAAM,CAACK,GAAP,GAAaN,KAAK,CAACM,GAAN,GAAYN,KAAK,CAACM,GAAN,GAAYI,IAAxB,GAA+BT,MAAM,CAACK,GAAnD;QACD,CALD,MAKO;UACLN,KAAK,CAACK,GAAN,GAAYL,KAAK,CAACK,GAAN,GAAY,CAAZ,GAAgBJ,MAAM,CAACI,GAAP,GAAaK,IAA7B,GAAoCV,KAAK,CAACK,GAAtD;UACAJ,MAAM,CAACI,GAAP,GAAaJ,MAAM,CAACI,GAAP,GAAa,CAAb,GAAiBL,KAAK,CAACK,GAAN,GAAYK,IAA7B,GAAoCT,MAAM,CAACI,GAAxD;UACAL,KAAK,CAACM,GAAN,GAAYN,KAAK,CAACM,GAAN,GAAY,CAAZ,GAAgBL,MAAM,CAACK,GAAP,GAAaI,IAA7B,GAAoCV,KAAK,CAACM,GAAtD;UACAL,MAAM,CAACK,GAAP,GAAaL,MAAM,CAACK,GAAP,GAAa,CAAb,GAAiBN,KAAK,CAACM,GAAN,GAAYI,IAA7B,GAAoCT,MAAM,CAACK,GAAxD;QACD;MACF;IACF;EACF;;EAEDO,oBAAoB,CAACb,KAAD,EAAQC,MAAR,EAAgBJ,KAAhB,CAApB;AACD;;AAED,SAASM,iBAAT,CAA2BH,KAA3B,EAAgEC,MAAhE,EAAsG;EACpG;EACA,MAAMa,UAAU,GAAG,IAAnB;;EACA,IAAId,KAAK,CAACM,GAAN,KAAcN,KAAK,CAACK,GAAxB,EAA6B;IAC3BL,KAAK,CAACK,GAAN,IAAaS,UAAb;IACAd,KAAK,CAACM,GAAN,IAAaQ,UAAb;EACD;;EACD,IAAIb,MAAM,CAACK,GAAP,KAAeL,MAAM,CAACI,GAA1B,EAA+B;IAC7BJ,MAAM,CAACI,GAAP,IAAcS,UAAd;IACAb,MAAM,CAACK,GAAP,IAAcQ,UAAd;EACD;AACF;;AAED,SAASZ,eAAT,CAAyBF,KAAzB,EAA8DC,MAA9D,EAAoGJ,KAApG,EAAmH;EACjH,IAAIA,KAAK,KAAK,CAAd,EAAiB;IACfG,KAAK,CAACK,GAAN,IAAaR,KAAb;IACAG,KAAK,CAACM,GAAN,IAAaT,KAAb;IACAI,MAAM,CAACI,GAAP,IAAcR,KAAd;IACAI,MAAM,CAACK,GAAP,IAAcT,KAAd;EACD;AACF;;AAED,SAASgB,oBAAT,CACEb,KADF,EAEEC,MAFF,EAGEJ,KAHF,EAIE;EACA,IAAIA,KAAK,KAAK,CAAd,EAAiB;IACfG,KAAK,CAACK,GAAN,IAAaR,KAAb;IACAG,KAAK,CAACM,GAAN,IAAaT,KAAb;IACAI,MAAM,CAACI,GAAP,IAAcR,KAAd;IACAI,MAAM,CAACK,GAAP,IAAcT,KAAd;EACD;AACF;;AAOD,SAASE,gBAAT,CAA0BgB,IAA1B,EAAgD;EAC9C,OAAOA,IAAI,CAACC,MAAL,KAAgB,CAAhB,IAAqBC,gBAAgB,CAACF,IAAI,CAAC,CAAD,CAAL,CAArC,IAAkDE,gBAAgB,CAACF,IAAI,CAAC,CAAD,CAAL,CAAzE;AACD;;AAED,SAASE,gBAAT,CAA0BC,IAA1B,EAA8C;EAC5C,OAAO,SAASA,IAAT,IAAiB,SAASA,IAAjC;AACD;;AAED,SAASV,YAAT,CAAsBR,KAAtB,EAAuCC,MAAvC,EAAkE;EAChE;EACA,OAAQD,KAAK,CAACK,GAAN,IAAa,CAAb,IAAkBJ,MAAM,CAACI,GAAP,IAAc,CAAjC,IAAwCL,KAAK,CAACM,GAAN,IAAa,CAAb,IAAkBL,MAAM,CAACK,GAAP,IAAc,CAA/E;AACD;;AAED,SAASM,aAAT,CAAuBZ,KAAvB,EAAwCC,MAAxC,EAAmE;EACjE;EACA,OAAOD,KAAK,CAACK,GAAN,IAAa,CAAb,IAAkBL,KAAK,CAACM,GAAN,IAAa,CAA/B,IAAoCL,MAAM,CAACI,GAAP,IAAc,CAAlD,IAAuDJ,MAAM,CAACK,GAAP,IAAc,CAA5E;AACD;;AAED,SAASG,kBAAT,CAA4BT,KAA5B,EAA6CC,MAA7C,EAAwE;EACtE;EACA,OAAQD,KAAK,CAACK,GAAN,IAAa,CAAb,IAAkBJ,MAAM,CAACK,GAAP,IAAc,CAAjC,IAAwCN,KAAK,CAACM,GAAN,IAAa,CAAb,IAAkBL,MAAM,CAACI,GAAP,IAAc,CAA/E;AACD;;AAED,SAASM,OAAT,CAAiBX,KAAjB,EAAkCC,MAAlC,EAA4D;EAC1D,IAAIW,aAAa,CAACZ,KAAD,EAAQC,MAAR,CAAjB,EAAkC;IAChC,MAAMkB,QAAQ,GAAGlB,MAAM,CAACI,GAAP,GAAaL,KAAK,CAACK,GAAN,GAAYJ,MAAM,CAACI,GAAhC,GAAsC,CAAvD;IACA,MAAMe,SAAS,GAAGnB,MAAM,CAACK,GAAP,GAAaN,KAAK,CAACM,GAAN,GAAYL,MAAM,CAACK,GAAhC,GAAsC,CAAxD;IAEA,OAAOa,QAAQ,GAAGC,SAAX,GAAuBD,QAAvB,GAAkCC,SAAzC;EACD;;EAED,IAAIZ,YAAY,CAACR,KAAD,EAAQC,MAAR,CAAhB,EAAiC;IAC/B,MAAMoB,UAAU,GAAGC,IAAI,CAACC,GAAL,CAASvB,KAAK,CAACK,GAAf,CAAnB;IACA,MAAMmB,UAAU,GAAGF,IAAI,CAACC,GAAL,CAASvB,KAAK,CAACM,GAAf,CAAnB;IACA,MAAMmB,WAAW,GAAGH,IAAI,CAACC,GAAL,CAAStB,MAAM,CAACI,GAAhB,CAApB;IACA,MAAMqB,WAAW,GAAGJ,IAAI,CAACC,GAAL,CAAStB,MAAM,CAACK,GAAhB,CAApB;IACA,MAAMqB,MAAM,GAAGL,IAAI,CAAChB,GAAL,CAASe,UAAT,EAAqBG,UAArB,CAAf;IACA,MAAMI,QAAQ,GAAGN,IAAI,CAACjB,GAAL,CAASgB,UAAT,EAAqBG,UAArB,CAAjB;IACA,MAAMK,OAAO,GAAGP,IAAI,CAAChB,GAAL,CAASmB,WAAT,EAAsBC,WAAtB,CAAhB;IACA,MAAMI,SAAS,GAAGR,IAAI,CAACjB,GAAL,CAASoB,WAAT,EAAsBC,WAAtB,CAAlB;IAEA,MAAMP,QAAQ,GAAGS,QAAQ,KAAK,CAAb,GAAiBD,MAAM,GAAGC,QAA1B,GAAqCD,MAAtD;IACA,MAAMP,SAAS,GAAGU,SAAS,KAAK,CAAd,GAAkBD,OAAO,GAAGC,SAA5B,GAAwCD,OAA1D;IAEA,OAAOV,QAAQ,GAAGC,SAAX,GAAuBD,QAAvB,GAAkCC,SAAzC;EACD;;EAED,IAAIpB,KAAK,CAACK,GAAN,GAAY,CAAZ,IAAiBJ,MAAM,CAACI,GAAP,GAAa,CAAlC,EAAqC;IACnC,OAAOL,KAAK,CAACM,GAAN,GAAYL,MAAM,CAACK,GAA1B;EACD,CAFD,MAEO;IACL,OAAON,KAAK,CAACK,GAAN,GAAYJ,MAAM,CAACI,GAA1B;EACD;AACF"},"metadata":{},"sourceType":"module"}