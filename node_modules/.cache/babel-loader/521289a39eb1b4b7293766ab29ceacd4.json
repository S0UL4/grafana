{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { getFieldDisplayValues } from '@grafana/data';\nimport { DataLinksContextMenu, Gauge, VizRepeater } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { clearNameForSingleSeries } from '../bargauge/BarGaugePanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class GaugePanel extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"renderComponent\", (valueProps, menuProps) => {\n      const {\n        options,\n        fieldConfig\n      } = this.props;\n      const {\n        width,\n        height,\n        count,\n        value\n      } = valueProps;\n      const {\n        field,\n        display\n      } = value;\n      const {\n        openMenu,\n        targetClassName\n      } = menuProps;\n      return /*#__PURE__*/_jsx(Gauge, {\n        value: clearNameForSingleSeries(count, fieldConfig.defaults, display),\n        width: width,\n        height: height,\n        field: field,\n        text: options.text,\n        showThresholdLabels: options.showThresholdLabels,\n        showThresholdMarkers: options.showThresholdMarkers,\n        theme: config.theme,\n        onClick: openMenu,\n        className: targetClassName\n      });\n    });\n\n    _defineProperty(this, \"renderValue\", valueProps => {\n      const {\n        value\n      } = valueProps;\n      const {\n        getLinks,\n        hasLinks\n      } = value;\n\n      if (hasLinks && getLinks) {\n        return /*#__PURE__*/_jsx(DataLinksContextMenu, {\n          links: getLinks,\n          config: value.field,\n          children: api => {\n            return this.renderComponent(valueProps, api);\n          }\n        });\n      }\n\n      return this.renderComponent(valueProps, {});\n    });\n\n    _defineProperty(this, \"getValues\", () => {\n      const {\n        data,\n        options,\n        replaceVariables,\n        fieldConfig,\n        timeZone\n      } = this.props;\n      return getFieldDisplayValues({\n        fieldConfig,\n        reduceOptions: options.reduceOptions,\n        replaceVariables,\n        theme: config.theme2,\n        data: data.series,\n        timeZone\n      });\n    });\n  }\n\n  render() {\n    const {\n      height,\n      width,\n      data,\n      renderCounter,\n      options\n    } = this.props;\n    return /*#__PURE__*/_jsx(VizRepeater, {\n      getValues: this.getValues,\n      renderValue: this.renderValue,\n      width: width,\n      height: height,\n      source: data,\n      autoGrid: true,\n      renderCounter: renderCounter,\n      orientation: options.orientation\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","getFieldDisplayValues","DataLinksContextMenu","Gauge","VizRepeater","config","clearNameForSingleSeries","GaugePanel","valueProps","menuProps","options","fieldConfig","props","width","height","count","value","field","display","openMenu","targetClassName","defaults","text","showThresholdLabels","showThresholdMarkers","theme","getLinks","hasLinks","api","renderComponent","data","replaceVariables","timeZone","reduceOptions","theme2","series","render","renderCounter","getValues","renderValue","orientation"],"sources":["/home/soula/grafana/public/app/plugins/panel/gauge/GaugePanel.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { FieldDisplay, getFieldDisplayValues, PanelProps } from '@grafana/data';\nimport { DataLinksContextMenu, Gauge, VizRepeater, VizRepeaterRenderValueProps } from '@grafana/ui';\nimport { DataLinksContextMenuApi } from '@grafana/ui/src/components/DataLinks/DataLinksContextMenu';\nimport { config } from 'app/core/config';\n\nimport { clearNameForSingleSeries } from '../bargauge/BarGaugePanel';\n\nimport { PanelOptions } from './models.gen';\n\nexport class GaugePanel extends PureComponent<PanelProps<PanelOptions>> {\n  renderComponent = (\n    valueProps: VizRepeaterRenderValueProps<FieldDisplay>,\n    menuProps: DataLinksContextMenuApi\n  ): JSX.Element => {\n    const { options, fieldConfig } = this.props;\n    const { width, height, count, value } = valueProps;\n    const { field, display } = value;\n    const { openMenu, targetClassName } = menuProps;\n\n    return (\n      <Gauge\n        value={clearNameForSingleSeries(count, fieldConfig.defaults, display)}\n        width={width}\n        height={height}\n        field={field}\n        text={options.text}\n        showThresholdLabels={options.showThresholdLabels}\n        showThresholdMarkers={options.showThresholdMarkers}\n        theme={config.theme}\n        onClick={openMenu}\n        className={targetClassName}\n      />\n    );\n  };\n\n  renderValue = (valueProps: VizRepeaterRenderValueProps<FieldDisplay>): JSX.Element => {\n    const { value } = valueProps;\n    const { getLinks, hasLinks } = value;\n\n    if (hasLinks && getLinks) {\n      return (\n        <DataLinksContextMenu links={getLinks} config={value.field}>\n          {(api) => {\n            return this.renderComponent(valueProps, api);\n          }}\n        </DataLinksContextMenu>\n      );\n    }\n\n    return this.renderComponent(valueProps, {});\n  };\n\n  getValues = (): FieldDisplay[] => {\n    const { data, options, replaceVariables, fieldConfig, timeZone } = this.props;\n    return getFieldDisplayValues({\n      fieldConfig,\n      reduceOptions: options.reduceOptions,\n      replaceVariables,\n      theme: config.theme2,\n      data: data.series,\n      timeZone,\n    });\n  };\n\n  render() {\n    const { height, width, data, renderCounter, options } = this.props;\n\n    return (\n      <VizRepeater\n        getValues={this.getValues}\n        renderValue={this.renderValue}\n        width={width}\n        height={height}\n        source={data}\n        autoGrid={true}\n        renderCounter={renderCounter}\n        orientation={options.orientation}\n      />\n    );\n  }\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAEA,SAAuBC,qBAAvB,QAAgE,eAAhE;AACA,SAASC,oBAAT,EAA+BC,KAA/B,EAAsCC,WAAtC,QAAsF,aAAtF;AAEA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,SAASC,wBAAT,QAAyC,2BAAzC;;AAIA,OAAO,MAAMC,UAAN,SAAyBP,aAAzB,CAAiE;EAAA;IAAA;;IAAA,yCACpD,CAChBQ,UADgB,EAEhBC,SAFgB,KAGA;MAChB,MAAM;QAAEC,OAAF;QAAWC;MAAX,IAA2B,KAAKC,KAAtC;MACA,MAAM;QAAEC,KAAF;QAASC,MAAT;QAAiBC,KAAjB;QAAwBC;MAAxB,IAAkCR,UAAxC;MACA,MAAM;QAAES,KAAF;QAASC;MAAT,IAAqBF,KAA3B;MACA,MAAM;QAAEG,QAAF;QAAYC;MAAZ,IAAgCX,SAAtC;MAEA,oBACE,KAAC,KAAD;QACE,KAAK,EAAEH,wBAAwB,CAACS,KAAD,EAAQJ,WAAW,CAACU,QAApB,EAA8BH,OAA9B,CADjC;QAEE,KAAK,EAAEL,KAFT;QAGE,MAAM,EAAEC,MAHV;QAIE,KAAK,EAAEG,KAJT;QAKE,IAAI,EAAEP,OAAO,CAACY,IALhB;QAME,mBAAmB,EAAEZ,OAAO,CAACa,mBAN/B;QAOE,oBAAoB,EAAEb,OAAO,CAACc,oBAPhC;QAQE,KAAK,EAAEnB,MAAM,CAACoB,KARhB;QASE,OAAO,EAAEN,QATX;QAUE,SAAS,EAAEC;MAVb,EADF;IAcD,CAxBqE;;IAAA,qCA0BvDZ,UAAD,IAAwE;MACpF,MAAM;QAAEQ;MAAF,IAAYR,UAAlB;MACA,MAAM;QAAEkB,QAAF;QAAYC;MAAZ,IAAyBX,KAA/B;;MAEA,IAAIW,QAAQ,IAAID,QAAhB,EAA0B;QACxB,oBACE,KAAC,oBAAD;UAAsB,KAAK,EAAEA,QAA7B;UAAuC,MAAM,EAAEV,KAAK,CAACC,KAArD;UAAA,UACIW,GAAD,IAAS;YACR,OAAO,KAAKC,eAAL,CAAqBrB,UAArB,EAAiCoB,GAAjC,CAAP;UACD;QAHH,EADF;MAOD;;MAED,OAAO,KAAKC,eAAL,CAAqBrB,UAArB,EAAiC,EAAjC,CAAP;IACD,CAzCqE;;IAAA,mCA2C1D,MAAsB;MAChC,MAAM;QAAEsB,IAAF;QAAQpB,OAAR;QAAiBqB,gBAAjB;QAAmCpB,WAAnC;QAAgDqB;MAAhD,IAA6D,KAAKpB,KAAxE;MACA,OAAOX,qBAAqB,CAAC;QAC3BU,WAD2B;QAE3BsB,aAAa,EAAEvB,OAAO,CAACuB,aAFI;QAG3BF,gBAH2B;QAI3BN,KAAK,EAAEpB,MAAM,CAAC6B,MAJa;QAK3BJ,IAAI,EAAEA,IAAI,CAACK,MALgB;QAM3BH;MAN2B,CAAD,CAA5B;IAQD,CArDqE;EAAA;;EAuDtEI,MAAM,GAAG;IACP,MAAM;MAAEtB,MAAF;MAAUD,KAAV;MAAiBiB,IAAjB;MAAuBO,aAAvB;MAAsC3B;IAAtC,IAAkD,KAAKE,KAA7D;IAEA,oBACE,KAAC,WAAD;MACE,SAAS,EAAE,KAAK0B,SADlB;MAEE,WAAW,EAAE,KAAKC,WAFpB;MAGE,KAAK,EAAE1B,KAHT;MAIE,MAAM,EAAEC,MAJV;MAKE,MAAM,EAAEgB,IALV;MAME,QAAQ,EAAE,IANZ;MAOE,aAAa,EAAEO,aAPjB;MAQE,WAAW,EAAE3B,OAAO,CAAC8B;IARvB,EADF;EAYD;;AAtEqE"},"metadata":{},"sourceType":"module"}