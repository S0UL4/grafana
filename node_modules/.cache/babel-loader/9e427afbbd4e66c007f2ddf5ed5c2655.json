{"ast":null,"code":"import { sortBy } from 'lodash';\nimport { urlUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { alertInstanceKey } from 'app/features/alerting/unified/utils/rules';\nimport { SortOrder } from 'app/plugins/panel/alertlist/types';\nimport { GrafanaAlertState, PromAlertingRuleState, mapStateWithReasonToBaseState } from 'app/types/unified-alerting-dto';\nimport { ALERTMANAGER_NAME_QUERY_KEY } from './constants';\nimport { getRulesSourceName } from './datasource';\nimport { getMatcherQueryParams } from './matchers';\nimport * as ruleId from './rule-id';\nexport function createViewLink(ruleSource, rule, returnTo) {\n  const sourceName = getRulesSourceName(ruleSource);\n  const identifier = ruleId.fromCombinedRule(sourceName, rule);\n  const paramId = encodeURIComponent(ruleId.stringifyIdentifier(identifier));\n  const paramSource = encodeURIComponent(sourceName);\n  return urlUtil.renderUrl(`${config.appSubUrl}/alerting/${paramSource}/${paramId}/view`, {\n    returnTo\n  });\n}\nexport function createExploreLink(dataSourceName, query) {\n  return urlUtil.renderUrl(`${config.appSubUrl}/explore`, {\n    left: JSON.stringify(['now-1h', 'now', dataSourceName, {\n      datasource: dataSourceName,\n      expr: query\n    }, {\n      ui: [true, true, true, 'none']\n    }])\n  });\n}\nexport function arrayToRecord(items) {\n  return items.reduce((rec, {\n    key,\n    value\n  }) => {\n    rec[key] = value;\n    return rec;\n  }, {});\n}\nexport const getFiltersFromUrlParams = queryParams => {\n  const queryString = queryParams['queryString'] === undefined ? undefined : String(queryParams['queryString']);\n  const alertState = queryParams['alertState'] === undefined ? undefined : String(queryParams['alertState']);\n  const dataSource = queryParams['dataSource'] === undefined ? undefined : String(queryParams['dataSource']);\n  const ruleType = queryParams['ruleType'] === undefined ? undefined : String(queryParams['ruleType']);\n  const groupBy = queryParams['groupBy'] === undefined ? undefined : String(queryParams['groupBy']).split(',');\n  return {\n    queryString,\n    alertState,\n    dataSource,\n    groupBy,\n    ruleType\n  };\n};\nexport const getNotificationPoliciesFilters = searchParams => {\n  var _searchParams$get, _searchParams$get2;\n\n  return {\n    queryString: (_searchParams$get = searchParams.get('queryString')) !== null && _searchParams$get !== void 0 ? _searchParams$get : undefined,\n    contactPoint: (_searchParams$get2 = searchParams.get('contactPoint')) !== null && _searchParams$get2 !== void 0 ? _searchParams$get2 : undefined\n  };\n};\nexport const getSilenceFiltersFromUrlParams = queryParams => {\n  const queryString = queryParams['queryString'] === undefined ? undefined : String(queryParams['queryString']);\n  const silenceState = queryParams['silenceState'] === undefined ? undefined : String(queryParams['silenceState']);\n  return {\n    queryString,\n    silenceState\n  };\n};\nexport function recordToArray(record) {\n  return Object.entries(record).map(([key, value]) => ({\n    key,\n    value\n  }));\n}\nexport function makeAMLink(path, alertManagerName, options) {\n  const search = new URLSearchParams(options);\n\n  if (alertManagerName) {\n    search.append(ALERTMANAGER_NAME_QUERY_KEY, alertManagerName);\n  }\n\n  return `${path}?${search.toString()}`;\n}\nexport function makeRuleBasedSilenceLink(alertManagerSourceName, rule) {\n  const labels = Object.assign({\n    alertname: rule.name\n  }, rule.labels);\n  return makeLabelBasedSilenceLink(alertManagerSourceName, labels);\n}\nexport function makeLabelBasedSilenceLink(alertManagerSourceName, labels) {\n  const silenceUrlParams = new URLSearchParams();\n  silenceUrlParams.append('alertmanager', alertManagerSourceName);\n  const matcherParams = getMatcherQueryParams(labels);\n  matcherParams.forEach((value, key) => silenceUrlParams.append(key, value));\n  return `${config.appSubUrl}/alerting/silence/new?${silenceUrlParams.toString()}`;\n} // keep retrying fn if it's error passes shouldRetry(error) and timeout has not elapsed yet\n\nexport function retryWhile(fn, shouldRetry, timeout, // milliseconds, how long to keep retrying\npause = 1000 // milliseconds, pause between retries\n) {\n  const start = new Date().getTime();\n\n  const makeAttempt = () => fn().catch(e => {\n    if (shouldRetry(e) && new Date().getTime() - start < timeout) {\n      return new Promise(resolve => setTimeout(resolve, pause)).then(makeAttempt);\n    }\n\n    throw e;\n  });\n\n  return makeAttempt();\n}\nconst alertStateSortScore = {\n  [GrafanaAlertState.Alerting]: 1,\n  [PromAlertingRuleState.Firing]: 1,\n  [GrafanaAlertState.Error]: 1,\n  [GrafanaAlertState.Pending]: 2,\n  [PromAlertingRuleState.Pending]: 2,\n  [PromAlertingRuleState.Inactive]: 2,\n  [GrafanaAlertState.NoData]: 3,\n  [GrafanaAlertState.Normal]: 4\n};\nexport function sortAlerts(sortOrder, alerts) {\n  // Make sure to handle tie-breaks because API returns alert instances in random order every time\n  if (sortOrder === SortOrder.Importance) {\n    return sortBy(alerts, alert => [alertStateSortScore[mapStateWithReasonToBaseState(alert.state)], alertInstanceKey(alert).toLocaleLowerCase()]);\n  } else if (sortOrder === SortOrder.TimeAsc) {\n    return sortBy(alerts, alert => [new Date(alert.activeAt) || new Date(), alertInstanceKey(alert).toLocaleLowerCase()]);\n  } else if (sortOrder === SortOrder.TimeDesc) {\n    return sortBy(alerts, alert => [new Date(alert.activeAt) || new Date(), alertInstanceKey(alert).toLocaleLowerCase()]).reverse();\n  }\n\n  const result = sortBy(alerts, alert => alertInstanceKey(alert).toLocaleLowerCase());\n\n  if (sortOrder === SortOrder.AlphaDesc) {\n    result.reverse();\n  }\n\n  return result;\n}","map":{"version":3,"names":["sortBy","urlUtil","config","alertInstanceKey","SortOrder","GrafanaAlertState","PromAlertingRuleState","mapStateWithReasonToBaseState","ALERTMANAGER_NAME_QUERY_KEY","getRulesSourceName","getMatcherQueryParams","ruleId","createViewLink","ruleSource","rule","returnTo","sourceName","identifier","fromCombinedRule","paramId","encodeURIComponent","stringifyIdentifier","paramSource","renderUrl","appSubUrl","createExploreLink","dataSourceName","query","left","JSON","stringify","datasource","expr","ui","arrayToRecord","items","reduce","rec","key","value","getFiltersFromUrlParams","queryParams","queryString","undefined","String","alertState","dataSource","ruleType","groupBy","split","getNotificationPoliciesFilters","searchParams","get","contactPoint","getSilenceFiltersFromUrlParams","silenceState","recordToArray","record","Object","entries","map","makeAMLink","path","alertManagerName","options","search","URLSearchParams","append","toString","makeRuleBasedSilenceLink","alertManagerSourceName","labels","alertname","name","makeLabelBasedSilenceLink","silenceUrlParams","matcherParams","forEach","retryWhile","fn","shouldRetry","timeout","pause","start","Date","getTime","makeAttempt","catch","e","Promise","resolve","setTimeout","then","alertStateSortScore","Alerting","Firing","Error","Pending","Inactive","NoData","Normal","sortAlerts","sortOrder","alerts","Importance","alert","state","toLocaleLowerCase","TimeAsc","activeAt","TimeDesc","reverse","result","AlphaDesc"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/utils/misc.ts"],"sourcesContent":["import { sortBy } from 'lodash';\n\nimport { urlUtil, UrlQueryMap, Labels } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { alertInstanceKey } from 'app/features/alerting/unified/utils/rules';\nimport { SortOrder } from 'app/plugins/panel/alertlist/types';\nimport { Alert, CombinedRule, FilterState, RulesSource, SilenceFilterState } from 'app/types/unified-alerting';\nimport {\n  GrafanaAlertState,\n  PromAlertingRuleState,\n  mapStateWithReasonToBaseState,\n} from 'app/types/unified-alerting-dto';\n\nimport { ALERTMANAGER_NAME_QUERY_KEY } from './constants';\nimport { getRulesSourceName } from './datasource';\nimport { getMatcherQueryParams } from './matchers';\nimport * as ruleId from './rule-id';\n\nexport function createViewLink(ruleSource: RulesSource, rule: CombinedRule, returnTo: string): string {\n  const sourceName = getRulesSourceName(ruleSource);\n  const identifier = ruleId.fromCombinedRule(sourceName, rule);\n  const paramId = encodeURIComponent(ruleId.stringifyIdentifier(identifier));\n  const paramSource = encodeURIComponent(sourceName);\n\n  return urlUtil.renderUrl(`${config.appSubUrl}/alerting/${paramSource}/${paramId}/view`, { returnTo });\n}\n\nexport function createExploreLink(dataSourceName: string, query: string) {\n  return urlUtil.renderUrl(`${config.appSubUrl}/explore`, {\n    left: JSON.stringify([\n      'now-1h',\n      'now',\n      dataSourceName,\n      { datasource: dataSourceName, expr: query },\n      { ui: [true, true, true, 'none'] },\n    ]),\n  });\n}\n\nexport function arrayToRecord(items: Array<{ key: string; value: string }>): Record<string, string> {\n  return items.reduce<Record<string, string>>((rec, { key, value }) => {\n    rec[key] = value;\n    return rec;\n  }, {});\n}\n\nexport const getFiltersFromUrlParams = (queryParams: UrlQueryMap): FilterState => {\n  const queryString = queryParams['queryString'] === undefined ? undefined : String(queryParams['queryString']);\n  const alertState = queryParams['alertState'] === undefined ? undefined : String(queryParams['alertState']);\n  const dataSource = queryParams['dataSource'] === undefined ? undefined : String(queryParams['dataSource']);\n  const ruleType = queryParams['ruleType'] === undefined ? undefined : String(queryParams['ruleType']);\n  const groupBy = queryParams['groupBy'] === undefined ? undefined : String(queryParams['groupBy']).split(',');\n  return { queryString, alertState, dataSource, groupBy, ruleType };\n};\n\nexport const getNotificationPoliciesFilters = (searchParams: URLSearchParams) => {\n  return {\n    queryString: searchParams.get('queryString') ?? undefined,\n    contactPoint: searchParams.get('contactPoint') ?? undefined,\n  };\n};\n\nexport const getSilenceFiltersFromUrlParams = (queryParams: UrlQueryMap): SilenceFilterState => {\n  const queryString = queryParams['queryString'] === undefined ? undefined : String(queryParams['queryString']);\n  const silenceState = queryParams['silenceState'] === undefined ? undefined : String(queryParams['silenceState']);\n\n  return { queryString, silenceState };\n};\n\nexport function recordToArray(record: Record<string, string>): Array<{ key: string; value: string }> {\n  return Object.entries(record).map(([key, value]) => ({ key, value }));\n}\n\nexport function makeAMLink(path: string, alertManagerName?: string, options?: Record<string, string>): string {\n  const search = new URLSearchParams(options);\n  if (alertManagerName) {\n    search.append(ALERTMANAGER_NAME_QUERY_KEY, alertManagerName);\n  }\n  return `${path}?${search.toString()}`;\n}\n\nexport function makeRuleBasedSilenceLink(alertManagerSourceName: string, rule: CombinedRule) {\n  const labels: Labels = {\n    alertname: rule.name,\n    ...rule.labels,\n  };\n\n  return makeLabelBasedSilenceLink(alertManagerSourceName, labels);\n}\n\nexport function makeLabelBasedSilenceLink(alertManagerSourceName: string, labels: Labels) {\n  const silenceUrlParams = new URLSearchParams();\n  silenceUrlParams.append('alertmanager', alertManagerSourceName);\n\n  const matcherParams = getMatcherQueryParams(labels);\n  matcherParams.forEach((value, key) => silenceUrlParams.append(key, value));\n\n  return `${config.appSubUrl}/alerting/silence/new?${silenceUrlParams.toString()}`;\n}\n\n// keep retrying fn if it's error passes shouldRetry(error) and timeout has not elapsed yet\nexport function retryWhile<T, E = Error>(\n  fn: () => Promise<T>,\n  shouldRetry: (e: E) => boolean,\n  timeout: number, // milliseconds, how long to keep retrying\n  pause = 1000 // milliseconds, pause between retries\n): Promise<T> {\n  const start = new Date().getTime();\n  const makeAttempt = (): Promise<T> =>\n    fn().catch((e) => {\n      if (shouldRetry(e) && new Date().getTime() - start < timeout) {\n        return new Promise((resolve) => setTimeout(resolve, pause)).then(makeAttempt);\n      }\n      throw e;\n    });\n  return makeAttempt();\n}\n\nconst alertStateSortScore = {\n  [GrafanaAlertState.Alerting]: 1,\n  [PromAlertingRuleState.Firing]: 1,\n  [GrafanaAlertState.Error]: 1,\n  [GrafanaAlertState.Pending]: 2,\n  [PromAlertingRuleState.Pending]: 2,\n  [PromAlertingRuleState.Inactive]: 2,\n  [GrafanaAlertState.NoData]: 3,\n  [GrafanaAlertState.Normal]: 4,\n};\n\nexport function sortAlerts(sortOrder: SortOrder, alerts: Alert[]): Alert[] {\n  // Make sure to handle tie-breaks because API returns alert instances in random order every time\n  if (sortOrder === SortOrder.Importance) {\n    return sortBy(alerts, (alert) => [\n      alertStateSortScore[mapStateWithReasonToBaseState(alert.state)],\n      alertInstanceKey(alert).toLocaleLowerCase(),\n    ]);\n  } else if (sortOrder === SortOrder.TimeAsc) {\n    return sortBy(alerts, (alert) => [\n      new Date(alert.activeAt) || new Date(),\n      alertInstanceKey(alert).toLocaleLowerCase(),\n    ]);\n  } else if (sortOrder === SortOrder.TimeDesc) {\n    return sortBy(alerts, (alert) => [\n      new Date(alert.activeAt) || new Date(),\n      alertInstanceKey(alert).toLocaleLowerCase(),\n    ]).reverse();\n  }\n  const result = sortBy(alerts, (alert) => alertInstanceKey(alert).toLocaleLowerCase());\n  if (sortOrder === SortOrder.AlphaDesc) {\n    result.reverse();\n  }\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}