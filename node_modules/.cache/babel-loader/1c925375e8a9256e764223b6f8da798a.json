{"ast":null,"code":"import React, { useState } from 'react';\nimport { LiveChannelScope } from '@grafana/data';\nimport { DataSourcePicker, getBackendSrv } from '@grafana/runtime';\nimport { Input, Field, Button, ValuePicker, HorizontalGroup } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst patternTypes = [{\n  label: 'Data source',\n  description: 'Configure a channel scoped to a data source instance',\n  value: 'ds'\n}, {\n  label: 'Any',\n  description: 'Enter an arbitray channel pattern',\n  value: 'any'\n}];\nexport function AddNewRule({\n  onRuleAdded\n}) {\n  const [patternType, setPatternType] = useState();\n  const [pattern, setPattern] = useState();\n  const [patternPrefix, setPatternPrefix] = useState('');\n  const [datasource, setDatasource] = useState();\n  const notifyApp = useAppNotification();\n\n  const onSubmit = () => {\n    if (!pattern) {\n      notifyApp.error('Enter path');\n      return;\n    }\n\n    if (patternType === 'ds' && !patternPrefix.length) {\n      notifyApp.error('Select datasource');\n      return;\n    }\n\n    getBackendSrv().post(`api/live/channel-rules`, {\n      pattern: patternPrefix + pattern,\n      settings: {\n        converter: {\n          type: 'jsonAuto'\n        },\n        frameOutputs: [{\n          type: 'managedStream'\n        }]\n      }\n    }).then(v => {\n      console.log('ADDED', v);\n      setPattern(undefined);\n      setPatternType(undefined);\n      onRuleAdded(v.rule);\n    }).catch(e => {\n      notifyApp.error('Error adding rule', e);\n      e.isHandled = true;\n    });\n  };\n\n  if (patternType) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n        children: [patternType === 'any' && /*#__PURE__*/_jsx(Field, {\n          label: \"Pattern\",\n          children: /*#__PURE__*/_jsx(Input, {\n            value: pattern !== null && pattern !== void 0 ? pattern : '',\n            onChange: e => setPattern(e.currentTarget.value),\n            placeholder: \"scope/namespace/path\"\n          })\n        }), patternType === 'ds' && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(Field, {\n            label: \"Data source\",\n            children: /*#__PURE__*/_jsx(DataSourcePicker, {\n              current: datasource,\n              onChange: ds => {\n                setDatasource(ds);\n                setPatternPrefix(`${LiveChannelScope.DataSource}/${ds.uid}/`);\n              }\n            })\n          }), /*#__PURE__*/_jsx(Field, {\n            label: \"Path\",\n            children: /*#__PURE__*/_jsx(Input, {\n              value: pattern !== null && pattern !== void 0 ? pattern : '',\n              onChange: e => setPattern(e.currentTarget.value),\n              placeholder: \"path\"\n            })\n          })]\n        }), /*#__PURE__*/_jsx(Field, {\n          label: \"\",\n          children: /*#__PURE__*/_jsx(Button, {\n            onClick: onSubmit,\n            variant: pattern !== null && pattern !== void 0 && pattern.length ? 'primary' : 'secondary',\n            children: \"Add\"\n          })\n        }), /*#__PURE__*/_jsx(Field, {\n          label: \"\",\n          children: /*#__PURE__*/_jsx(Button, {\n            variant: \"secondary\",\n            onClick: () => setPatternType(undefined),\n            children: \"Cancel\"\n          })\n        })]\n      })\n    });\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: /*#__PURE__*/_jsx(ValuePicker, {\n      label: \"Add channel rule\",\n      variant: \"secondary\",\n      size: \"md\",\n      icon: \"plus\",\n      menuPlacement: \"auto\",\n      isFullWidth: false,\n      options: patternTypes,\n      onChange: v => setPatternType(v.value)\n    })\n  });\n}","map":{"version":3,"names":["React","useState","LiveChannelScope","DataSourcePicker","getBackendSrv","Input","Field","Button","ValuePicker","HorizontalGroup","useAppNotification","patternTypes","label","description","value","AddNewRule","onRuleAdded","patternType","setPatternType","pattern","setPattern","patternPrefix","setPatternPrefix","datasource","setDatasource","notifyApp","onSubmit","error","length","post","settings","converter","type","frameOutputs","then","v","console","log","undefined","rule","catch","e","isHandled","currentTarget","ds","DataSource","uid"],"sources":["/home/soula/grafana/public/app/features/live/pages/AddNewRule.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { DataSourceRef, LiveChannelScope, SelectableValue } from '@grafana/data';\nimport { DataSourcePicker, getBackendSrv } from '@grafana/runtime';\nimport { Input, Field, Button, ValuePicker, HorizontalGroup } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\n\nimport { Rule } from './types';\n\ninterface Props {\n  onRuleAdded: (rule: Rule) => void;\n}\n\ntype PatternType = 'ds' | 'any';\n\nconst patternTypes: Array<SelectableValue<PatternType>> = [\n  {\n    label: 'Data source',\n    description: 'Configure a channel scoped to a data source instance',\n    value: 'ds',\n  },\n  {\n    label: 'Any',\n    description: 'Enter an arbitray channel pattern',\n    value: 'any',\n  },\n];\n\nexport function AddNewRule({ onRuleAdded }: Props) {\n  const [patternType, setPatternType] = useState<PatternType>();\n  const [pattern, setPattern] = useState<string>();\n  const [patternPrefix, setPatternPrefix] = useState<string>('');\n  const [datasource, setDatasource] = useState<DataSourceRef>();\n  const notifyApp = useAppNotification();\n\n  const onSubmit = () => {\n    if (!pattern) {\n      notifyApp.error('Enter path');\n      return;\n    }\n    if (patternType === 'ds' && !patternPrefix.length) {\n      notifyApp.error('Select datasource');\n      return;\n    }\n\n    getBackendSrv()\n      .post(`api/live/channel-rules`, {\n        pattern: patternPrefix + pattern,\n        settings: {\n          converter: {\n            type: 'jsonAuto',\n          },\n          frameOutputs: [\n            {\n              type: 'managedStream',\n            },\n          ],\n        },\n      })\n      .then((v: any) => {\n        console.log('ADDED', v);\n        setPattern(undefined);\n        setPatternType(undefined);\n        onRuleAdded(v.rule);\n      })\n      .catch((e) => {\n        notifyApp.error('Error adding rule', e);\n        e.isHandled = true;\n      });\n  };\n\n  if (patternType) {\n    return (\n      <div>\n        <HorizontalGroup>\n          {patternType === 'any' && (\n            <Field label=\"Pattern\">\n              <Input\n                value={pattern ?? ''}\n                onChange={(e) => setPattern(e.currentTarget.value)}\n                placeholder=\"scope/namespace/path\"\n              />\n            </Field>\n          )}\n          {patternType === 'ds' && (\n            <>\n              <Field label=\"Data source\">\n                <DataSourcePicker\n                  current={datasource}\n                  onChange={(ds) => {\n                    setDatasource(ds);\n                    setPatternPrefix(`${LiveChannelScope.DataSource}/${ds.uid}/`);\n                  }}\n                />\n              </Field>\n              <Field label=\"Path\">\n                <Input value={pattern ?? ''} onChange={(e) => setPattern(e.currentTarget.value)} placeholder=\"path\" />\n              </Field>\n            </>\n          )}\n\n          <Field label=\"\">\n            <Button onClick={onSubmit} variant={pattern?.length ? 'primary' : 'secondary'}>\n              Add\n            </Button>\n          </Field>\n\n          <Field label=\"\">\n            <Button variant=\"secondary\" onClick={() => setPatternType(undefined)}>\n              Cancel\n            </Button>\n          </Field>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <ValuePicker\n        label=\"Add channel rule\"\n        variant=\"secondary\"\n        size=\"md\"\n        icon=\"plus\"\n        menuPlacement=\"auto\"\n        isFullWidth={false}\n        options={patternTypes}\n        onChange={(v) => setPatternType(v.value)}\n      />\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}