{"ast":null,"code":"import { captureMessage, captureException, Severity as LogLevel } from '@sentry/browser';\nexport { LogLevel }; // a bit stricter than what Sentry allows\n\n/**\n * Log a message at INFO level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logInfo(message, contexts) {\n  captureMessage(message, {\n    level: LogLevel.Info,\n    contexts\n  });\n}\n/**\n * Log a message at WARNING level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\n\nexport function logWarning(message, contexts) {\n  captureMessage(message, {\n    level: LogLevel.Warning,\n    contexts\n  });\n}\n/**\n * Log a message at DEBUG level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\n\nexport function logDebug(message, contexts) {\n  captureMessage(message, {\n    level: LogLevel.Debug,\n    contexts\n  });\n}\n/**\n * Log an error. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\n\nexport function logError(err, contexts) {\n  captureException(err, {\n    contexts\n  });\n}","map":{"version":3,"names":["captureMessage","captureException","Severity","LogLevel","logInfo","message","contexts","level","Info","logWarning","Warning","logDebug","Debug","logError","err"],"sources":["/home/soula/grafana/packages/grafana-runtime/src/utils/logging.ts"],"sourcesContent":["import { captureMessage, captureException, Severity as LogLevel } from '@sentry/browser';\nexport { LogLevel };\n\n// a bit stricter than what Sentry allows\ntype Contexts = Record<string, Record<string, number | string | Record<string, string | number>>>;\n\n/**\n * Log a message at INFO level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logInfo(message: string, contexts?: Contexts) {\n  captureMessage(message, {\n    level: LogLevel.Info,\n    contexts,\n  });\n}\n\n/**\n * Log a message at WARNING level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logWarning(message: string, contexts?: Contexts) {\n  captureMessage(message, {\n    level: LogLevel.Warning,\n    contexts,\n  });\n}\n\n/**\n * Log a message at DEBUG level. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logDebug(message: string, contexts?: Contexts) {\n  captureMessage(message, {\n    level: LogLevel.Debug,\n    contexts,\n  });\n}\n\n/**\n * Log an error. Depending on configuration might be forwarded to backend and logged to stdout or sent to Sentry\n *\n * @public\n */\nexport function logError(err: Error, contexts?: Contexts) {\n  captureException(err, { contexts });\n}\n"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,gBAAzB,EAA2CC,QAAQ,IAAIC,QAAvD,QAAuE,iBAAvE;AACA,SAASA,QAAT,G,CAEA;;AAGA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAT,CAAiBC,OAAjB,EAAkCC,QAAlC,EAAuD;EAC5DN,cAAc,CAACK,OAAD,EAAU;IACtBE,KAAK,EAAEJ,QAAQ,CAACK,IADM;IAEtBF;EAFsB,CAAV,CAAd;AAID;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,UAAT,CAAoBJ,OAApB,EAAqCC,QAArC,EAA0D;EAC/DN,cAAc,CAACK,OAAD,EAAU;IACtBE,KAAK,EAAEJ,QAAQ,CAACO,OADM;IAEtBJ;EAFsB,CAAV,CAAd;AAID;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,QAAT,CAAkBN,OAAlB,EAAmCC,QAAnC,EAAwD;EAC7DN,cAAc,CAACK,OAAD,EAAU;IACtBE,KAAK,EAAEJ,QAAQ,CAACS,KADM;IAEtBN;EAFsB,CAAV,CAAd;AAID;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,QAAT,CAAkBC,GAAlB,EAA8BR,QAA9B,EAAmD;EACxDL,gBAAgB,CAACa,GAAD,EAAM;IAAER;EAAF,CAAN,CAAhB;AACD"},"metadata":{},"sourceType":"module"}