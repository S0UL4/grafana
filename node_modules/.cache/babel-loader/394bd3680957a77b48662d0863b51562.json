{"ast":null,"code":"import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\nexport function getColorScale(colorScheme, lightTheme, maxValue, minValue = 0) {\n  //@ts-ignore\n  const colorInterpolator = d3ScaleChromatic[colorScheme.value];\n  const colorScaleInverted = colorScheme.invert === 'always' || colorScheme.invert === (lightTheme ? 'light' : 'dark');\n  const start = colorScaleInverted ? maxValue : minValue;\n  const end = colorScaleInverted ? minValue : maxValue;\n  return d3.scaleSequential(colorInterpolator).domain([start, end]);\n}\nexport function getOpacityScale(options, maxValue, minValue = 0) {\n  let legendOpacityScale;\n\n  if (options.colorScale === 'linear') {\n    legendOpacityScale = d3.scaleLinear().domain([minValue, maxValue]).range([0, 1]);\n  } else if (options.colorScale === 'sqrt') {\n    legendOpacityScale = d3.scalePow().exponent(options.exponent).domain([minValue, maxValue]).range([0, 1]);\n  }\n\n  return legendOpacityScale;\n}","map":{"version":3,"names":["d3","d3ScaleChromatic","getColorScale","colorScheme","lightTheme","maxValue","minValue","colorInterpolator","value","colorScaleInverted","invert","start","end","scaleSequential","domain","getOpacityScale","options","legendOpacityScale","colorScale","scaleLinear","range","scalePow","exponent"],"sources":["/home/soula/grafana/public/app/plugins/panel/heatmap-old/color_scale.ts"],"sourcesContent":["import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\n\nexport function getColorScale(colorScheme: any, lightTheme: boolean, maxValue: number, minValue = 0): (d: any) => any {\n  //@ts-ignore\n  const colorInterpolator = d3ScaleChromatic[colorScheme.value];\n  const colorScaleInverted = colorScheme.invert === 'always' || colorScheme.invert === (lightTheme ? 'light' : 'dark');\n\n  const start = colorScaleInverted ? maxValue : minValue;\n  const end = colorScaleInverted ? minValue : maxValue;\n\n  return d3.scaleSequential(colorInterpolator).domain([start, end]);\n}\n\nexport function getOpacityScale(\n  options: { cardColor?: null; colorScale?: any; exponent?: any },\n  maxValue: number,\n  minValue = 0\n): any {\n  let legendOpacityScale;\n  if (options.colorScale === 'linear') {\n    legendOpacityScale = d3.scaleLinear().domain([minValue, maxValue]).range([0, 1]);\n  } else if (options.colorScale === 'sqrt') {\n    legendOpacityScale = d3.scalePow().exponent(options.exponent).domain([minValue, maxValue]).range([0, 1]);\n  }\n  return legendOpacityScale;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,gBAAZ,MAAkC,oBAAlC;AAEA,OAAO,SAASC,aAAT,CAAuBC,WAAvB,EAAyCC,UAAzC,EAA8DC,QAA9D,EAAgFC,QAAQ,GAAG,CAA3F,EAA+G;EACpH;EACA,MAAMC,iBAAiB,GAAGN,gBAAgB,CAACE,WAAW,CAACK,KAAb,CAA1C;EACA,MAAMC,kBAAkB,GAAGN,WAAW,CAACO,MAAZ,KAAuB,QAAvB,IAAmCP,WAAW,CAACO,MAAZ,MAAwBN,UAAU,GAAG,OAAH,GAAa,MAA/C,CAA9D;EAEA,MAAMO,KAAK,GAAGF,kBAAkB,GAAGJ,QAAH,GAAcC,QAA9C;EACA,MAAMM,GAAG,GAAGH,kBAAkB,GAAGH,QAAH,GAAcD,QAA5C;EAEA,OAAOL,EAAE,CAACa,eAAH,CAAmBN,iBAAnB,EAAsCO,MAAtC,CAA6C,CAACH,KAAD,EAAQC,GAAR,CAA7C,CAAP;AACD;AAED,OAAO,SAASG,eAAT,CACLC,OADK,EAELX,QAFK,EAGLC,QAAQ,GAAG,CAHN,EAIA;EACL,IAAIW,kBAAJ;;EACA,IAAID,OAAO,CAACE,UAAR,KAAuB,QAA3B,EAAqC;IACnCD,kBAAkB,GAAGjB,EAAE,CAACmB,WAAH,GAAiBL,MAAjB,CAAwB,CAACR,QAAD,EAAWD,QAAX,CAAxB,EAA8Ce,KAA9C,CAAoD,CAAC,CAAD,EAAI,CAAJ,CAApD,CAArB;EACD,CAFD,MAEO,IAAIJ,OAAO,CAACE,UAAR,KAAuB,MAA3B,EAAmC;IACxCD,kBAAkB,GAAGjB,EAAE,CAACqB,QAAH,GAAcC,QAAd,CAAuBN,OAAO,CAACM,QAA/B,EAAyCR,MAAzC,CAAgD,CAACR,QAAD,EAAWD,QAAX,CAAhD,EAAsEe,KAAtE,CAA4E,CAAC,CAAD,EAAI,CAAJ,CAA5E,CAArB;EACD;;EACD,OAAOH,kBAAP;AACD"},"metadata":{},"sourceType":"module"}