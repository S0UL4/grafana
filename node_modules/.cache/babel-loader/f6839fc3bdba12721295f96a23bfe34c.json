{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\nimport { RolePicker } from './RolePicker';\nimport { fetchUserRoles, updateUserRoles } from './api';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const UserRolePicker = ({\n  builtInRole,\n  userId,\n  orgId,\n  onBuiltinRoleChange,\n  roleOptions,\n  builtInRoles,\n  disabled,\n  builtinRolesDisabled,\n  updateDisabled,\n  onApplyRoles,\n  pendingRoles\n}) => {\n  const [{\n    loading,\n    value: appliedRoles = []\n  }, getUserRoles] = useAsyncFn(async () => {\n    try {\n      if (updateDisabled) {\n        if ((pendingRoles === null || pendingRoles === void 0 ? void 0 : pendingRoles.length) > 0) {\n          return pendingRoles;\n        }\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionUserRolesList)) {\n        return await fetchUserRoles(userId, orgId);\n      }\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n\n    return [];\n  }, [orgId, userId, pendingRoles]);\n  useEffect(() => {\n    // only load roles when there is an Org selected\n    if (orgId) {\n      getUserRoles();\n    }\n  }, [orgId, getUserRoles, pendingRoles]);\n\n  const onRolesChange = async roles => {\n    if (!updateDisabled) {\n      await updateUserRoles(roles, userId, orgId);\n      await getUserRoles();\n    } else {\n      if (onApplyRoles) {\n        onApplyRoles(roles, userId, orgId);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsx(RolePicker, {\n    appliedRoles: appliedRoles,\n    builtInRole: builtInRole,\n    onRolesChange: onRolesChange,\n    onBuiltinRoleChange: onBuiltinRoleChange,\n    roleOptions: roleOptions,\n    builtInRoles: builtInRoles,\n    isLoading: loading,\n    disabled: disabled,\n    builtinRolesDisabled: builtinRolesDisabled,\n    showBuiltInRole: true,\n    updateDisabled: updateDisabled || false\n  });\n};","map":{"version":3,"names":["React","useEffect","useAsyncFn","contextSrv","AccessControlAction","RolePicker","fetchUserRoles","updateUserRoles","UserRolePicker","builtInRole","userId","orgId","onBuiltinRoleChange","roleOptions","builtInRoles","disabled","builtinRolesDisabled","updateDisabled","onApplyRoles","pendingRoles","loading","value","appliedRoles","getUserRoles","length","hasPermission","ActionUserRolesList","e","console","error","onRolesChange","roles"],"sources":["/home/soula/grafana/public/app/core/components/RolePicker/UserRolePicker.tsx"],"sourcesContent":["import React, { FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, OrgRole, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchUserRoles, updateUserRoles } from './api';\n\nexport interface Props {\n  builtInRole: OrgRole;\n  userId: number;\n  orgId?: number;\n  onBuiltinRoleChange: (newRole: OrgRole) => void;\n  roleOptions: Role[];\n  builtInRoles?: { [key: string]: Role[] };\n  disabled?: boolean;\n  builtinRolesDisabled?: boolean;\n  updateDisabled?: boolean;\n  onApplyRoles?: (newRoles: Role[], userId: number, orgId: number | undefined) => void;\n  pendingRoles?: Role[];\n}\n\nexport const UserRolePicker: FC<Props> = ({\n  builtInRole,\n  userId,\n  orgId,\n  onBuiltinRoleChange,\n  roleOptions,\n  builtInRoles,\n  disabled,\n  builtinRolesDisabled,\n  updateDisabled,\n  onApplyRoles,\n  pendingRoles,\n}) => {\n  const [{ loading, value: appliedRoles = [] }, getUserRoles] = useAsyncFn(async () => {\n    try {\n      if (updateDisabled) {\n        if (pendingRoles?.length! > 0) {\n          return pendingRoles;\n        }\n      }\n      if (contextSrv.hasPermission(AccessControlAction.ActionUserRolesList)) {\n        return await fetchUserRoles(userId, orgId);\n      }\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n    return [];\n  }, [orgId, userId, pendingRoles]);\n\n  useEffect(() => {\n    // only load roles when there is an Org selected\n    if (orgId) {\n      getUserRoles();\n    }\n  }, [orgId, getUserRoles, pendingRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!updateDisabled) {\n      await updateUserRoles(roles, userId, orgId);\n      await getUserRoles();\n    } else {\n      if (onApplyRoles) {\n        onApplyRoles(roles, userId, orgId);\n      }\n    }\n  };\n\n  return (\n    <RolePicker\n      appliedRoles={appliedRoles}\n      builtInRole={builtInRole}\n      onRolesChange={onRolesChange}\n      onBuiltinRoleChange={onBuiltinRoleChange}\n      roleOptions={roleOptions}\n      builtInRoles={builtInRoles}\n      isLoading={loading}\n      disabled={disabled}\n      builtinRolesDisabled={builtinRolesDisabled}\n      showBuiltInRole\n      updateDisabled={updateDisabled || false}\n    />\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAoBC,SAApB,QAAqC,OAArC;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAAwBC,mBAAxB,QAAmD,WAAnD;AAEA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,OAAhD;;AAgBA,OAAO,MAAMC,cAAyB,GAAG,CAAC;EACxCC,WADwC;EAExCC,MAFwC;EAGxCC,KAHwC;EAIxCC,mBAJwC;EAKxCC,WALwC;EAMxCC,YANwC;EAOxCC,QAPwC;EAQxCC,oBARwC;EASxCC,cATwC;EAUxCC,YAVwC;EAWxCC;AAXwC,CAAD,KAYnC;EACJ,MAAM,CAAC;IAAEC,OAAF;IAAWC,KAAK,EAAEC,YAAY,GAAG;EAAjC,CAAD,EAAwCC,YAAxC,IAAwDrB,UAAU,CAAC,YAAY;IACnF,IAAI;MACF,IAAIe,cAAJ,EAAoB;QAClB,IAAI,CAAAE,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEK,MAAd,IAAwB,CAA5B,EAA+B;UAC7B,OAAOL,YAAP;QACD;MACF;;MACD,IAAIhB,UAAU,CAACsB,aAAX,CAAyBrB,mBAAmB,CAACsB,mBAA7C,CAAJ,EAAuE;QACrE,OAAO,MAAMpB,cAAc,CAACI,MAAD,EAASC,KAAT,CAA3B;MACD;IACF,CATD,CASE,OAAOgB,CAAP,EAAU;MACV;MACAC,OAAO,CAACC,KAAR,CAAc,uBAAd;IACD;;IACD,OAAO,EAAP;EACD,CAfuE,EAerE,CAAClB,KAAD,EAAQD,MAAR,EAAgBS,YAAhB,CAfqE,CAAxE;EAiBAlB,SAAS,CAAC,MAAM;IACd;IACA,IAAIU,KAAJ,EAAW;MACTY,YAAY;IACb;EACF,CALQ,EAKN,CAACZ,KAAD,EAAQY,YAAR,EAAsBJ,YAAtB,CALM,CAAT;;EAOA,MAAMW,aAAa,GAAG,MAAOC,KAAP,IAAyB;IAC7C,IAAI,CAACd,cAAL,EAAqB;MACnB,MAAMV,eAAe,CAACwB,KAAD,EAAQrB,MAAR,EAAgBC,KAAhB,CAArB;MACA,MAAMY,YAAY,EAAlB;IACD,CAHD,MAGO;MACL,IAAIL,YAAJ,EAAkB;QAChBA,YAAY,CAACa,KAAD,EAAQrB,MAAR,EAAgBC,KAAhB,CAAZ;MACD;IACF;EACF,CATD;;EAWA,oBACE,KAAC,UAAD;IACE,YAAY,EAAEW,YADhB;IAEE,WAAW,EAAEb,WAFf;IAGE,aAAa,EAAEqB,aAHjB;IAIE,mBAAmB,EAAElB,mBAJvB;IAKE,WAAW,EAAEC,WALf;IAME,YAAY,EAAEC,YANhB;IAOE,SAAS,EAAEM,OAPb;IAQE,QAAQ,EAAEL,QARZ;IASE,oBAAoB,EAAEC,oBATxB;IAUE,eAAe,MAVjB;IAWE,cAAc,EAAEC,cAAc,IAAI;EAXpC,EADF;AAeD,CA/DM"},"metadata":{},"sourceType":"module"}