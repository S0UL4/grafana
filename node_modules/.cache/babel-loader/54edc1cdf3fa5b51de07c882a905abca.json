{"ast":null,"code":"var _span;\n\nimport { css, cx } from '@emotion/css';\nimport React, { memo } from 'react';\nimport { Button, HorizontalGroup, Icon, IconButton, useStyles2 } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { contextSrv } from 'app/core/core';\nimport { OrgRolePicker } from 'app/features/admin/OrgRolePicker';\nimport { AccessControlAction } from 'app/types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst getServiceAccountsAriaLabel = name => {\n  return `Edit service account's ${name} details`;\n};\n\nconst ServiceAccountListItem = /*#__PURE__*/memo(({\n  serviceAccount,\n  onRoleChange,\n  roleOptions,\n  builtInRoles,\n  onRemoveButtonClick,\n  onDisable,\n  onEnable,\n  onAddTokenClick\n}) => {\n  const editUrl = `org/serviceaccounts/${serviceAccount.id}`;\n  const styles = useStyles2(getStyles);\n  const canUpdateRole = contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount);\n  const displayRolePicker = contextSrv.hasPermission(AccessControlAction.ActionRolesList) && contextSrv.hasPermission(AccessControlAction.ActionUserRolesList);\n  const enableRolePicker = contextSrv.hasPermission(AccessControlAction.OrgUsersWrite) && canUpdateRole;\n  return /*#__PURE__*/_jsxs(\"tr\", {\n    className: cx({\n      [styles.disabled]: serviceAccount.isDisabled\n    }),\n    children: [/*#__PURE__*/_jsx(\"td\", {\n      className: \"width-4 text-center link-td\",\n      children: /*#__PURE__*/_jsx(\"a\", {\n        href: editUrl,\n        \"aria-label\": getServiceAccountsAriaLabel(serviceAccount.name),\n        children: /*#__PURE__*/_jsx(\"img\", {\n          className: \"filter-table__avatar\",\n          src: serviceAccount.avatarUrl,\n          alt: `Avatar for user ${serviceAccount.name}`\n        })\n      })\n    }), /*#__PURE__*/_jsx(\"td\", {\n      className: \"link-td max-width-10\",\n      children: /*#__PURE__*/_jsx(\"a\", {\n        className: \"ellipsis\",\n        href: editUrl,\n        title: serviceAccount.name,\n        \"aria-label\": getServiceAccountsAriaLabel(serviceAccount.name),\n        children: serviceAccount.name\n      })\n    }), /*#__PURE__*/_jsx(\"td\", {\n      className: \"link-td max-width-10\",\n      children: /*#__PURE__*/_jsx(\"a\", {\n        className: styles.accountId,\n        href: editUrl,\n        title: serviceAccount.login,\n        \"aria-label\": getServiceAccountsAriaLabel(serviceAccount.name),\n        children: serviceAccount.login\n      })\n    }), contextSrv.licensedAccessControlEnabled() ? /*#__PURE__*/_jsx(\"td\", {\n      children: displayRolePicker && /*#__PURE__*/_jsx(UserRolePicker, {\n        userId: serviceAccount.id,\n        orgId: serviceAccount.orgId,\n        builtInRole: serviceAccount.role,\n        onBuiltinRoleChange: newRole => onRoleChange(newRole, serviceAccount),\n        roleOptions: roleOptions,\n        builtInRoles: builtInRoles,\n        disabled: !enableRolePicker || serviceAccount.isDisabled\n      })\n    }) : /*#__PURE__*/_jsx(\"td\", {\n      children: /*#__PURE__*/_jsx(OrgRolePicker, {\n        \"aria-label\": \"Role\",\n        value: serviceAccount.role,\n        disabled: !canUpdateRole || serviceAccount.isDisabled,\n        onChange: newRole => onRoleChange(newRole, serviceAccount)\n      })\n    }), /*#__PURE__*/_jsx(\"td\", {\n      className: \"link-td max-width-10\",\n      children: /*#__PURE__*/_jsx(\"a\", {\n        className: \"ellipsis\",\n        href: editUrl,\n        title: \"Tokens\",\n        \"aria-label\": getServiceAccountsAriaLabel(serviceAccount.name),\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: cx(styles.tokensInfo, {\n            [styles.tokensInfoSecondary]: !serviceAccount.tokens\n          }),\n          children: [_span || (_span = /*#__PURE__*/_jsx(\"span\", {\n            children: /*#__PURE__*/_jsx(Icon, {\n              name: \"key-skeleton-alt\"\n            })\n          })), serviceAccount.tokens || 'No tokens']\n        })\n      })\n    }), /*#__PURE__*/_jsx(\"td\", {\n      children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n        justify: \"flex-end\",\n        children: [contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) && !serviceAccount.tokens && /*#__PURE__*/_jsx(Button, {\n          onClick: () => onAddTokenClick(serviceAccount),\n          disabled: serviceAccount.isDisabled,\n          children: \"Add token\"\n        }), contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount) && (serviceAccount.isDisabled ? /*#__PURE__*/_jsx(Button, {\n          variant: \"primary\",\n          onClick: () => onEnable(serviceAccount),\n          children: \"Enable\"\n        }) : /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: () => onDisable(serviceAccount),\n          children: \"Disable\"\n        })), contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsDelete, serviceAccount) && /*#__PURE__*/_jsx(IconButton, {\n          className: styles.deleteButton,\n          name: \"trash-alt\",\n          size: \"md\",\n          onClick: () => onRemoveButtonClick(serviceAccount),\n          \"aria-label\": `Delete service account ${serviceAccount.name}`\n        })]\n      })\n    })]\n  }, serviceAccount.id);\n});\nServiceAccountListItem.displayName = 'ServiceAccountListItem';\n\nconst getStyles = theme => {\n  return {\n    iconRow: css`\n      svg {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    accountId: cx('ellipsis', css`\n        color: ${theme.colors.text.secondary};\n      `),\n    deleteButton: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    tokensInfo: css`\n      span {\n        margin-right: ${theme.spacing(1)};\n      }\n    `,\n    tokensInfoSecondary: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    disabled: css`\n      td a {\n        color: ${theme.colors.text.secondary};\n      }\n    `\n  };\n};\n\nexport default ServiceAccountListItem;","map":{"version":3,"names":["css","cx","React","memo","Button","HorizontalGroup","Icon","IconButton","useStyles2","UserRolePicker","contextSrv","OrgRolePicker","AccessControlAction","getServiceAccountsAriaLabel","name","ServiceAccountListItem","serviceAccount","onRoleChange","roleOptions","builtInRoles","onRemoveButtonClick","onDisable","onEnable","onAddTokenClick","editUrl","id","styles","getStyles","canUpdateRole","hasPermissionInMetadata","ServiceAccountsWrite","displayRolePicker","hasPermission","ActionRolesList","ActionUserRolesList","enableRolePicker","OrgUsersWrite","disabled","isDisabled","avatarUrl","accountId","login","licensedAccessControlEnabled","orgId","role","newRole","tokensInfo","tokensInfoSecondary","tokens","ServiceAccountsDelete","deleteButton","displayName","theme","iconRow","spacing","colors","text","secondary"],"sources":["/home/soula/grafana/public/app/features/serviceaccounts/components/ServiceAccountsListItem.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { memo } from 'react';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { Button, HorizontalGroup, Icon, IconButton, useStyles2 } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { contextSrv } from 'app/core/core';\nimport { OrgRolePicker } from 'app/features/admin/OrgRolePicker';\nimport { AccessControlAction, Role, ServiceAccountDTO } from 'app/types';\n\ntype ServiceAccountListItemProps = {\n  serviceAccount: ServiceAccountDTO;\n  onRoleChange: (role: OrgRole, serviceAccount: ServiceAccountDTO) => void;\n  roleOptions: Role[];\n  builtInRoles: Record<string, Role[]>;\n  onRemoveButtonClick: (serviceAccount: ServiceAccountDTO) => void;\n  onDisable: (serviceAccount: ServiceAccountDTO) => void;\n  onEnable: (serviceAccount: ServiceAccountDTO) => void;\n  onAddTokenClick: (serviceAccount: ServiceAccountDTO) => void;\n};\n\nconst getServiceAccountsAriaLabel = (name: string) => {\n  return `Edit service account's ${name} details`;\n};\n\nconst ServiceAccountListItem = memo(\n  ({\n    serviceAccount,\n    onRoleChange,\n    roleOptions,\n    builtInRoles,\n    onRemoveButtonClick,\n    onDisable,\n    onEnable,\n    onAddTokenClick,\n  }: ServiceAccountListItemProps) => {\n    const editUrl = `org/serviceaccounts/${serviceAccount.id}`;\n    const styles = useStyles2(getStyles);\n    const canUpdateRole = contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount);\n    const displayRolePicker =\n      contextSrv.hasPermission(AccessControlAction.ActionRolesList) &&\n      contextSrv.hasPermission(AccessControlAction.ActionUserRolesList);\n    const enableRolePicker = contextSrv.hasPermission(AccessControlAction.OrgUsersWrite) && canUpdateRole;\n\n    return (\n      <tr key={serviceAccount.id} className={cx({ [styles.disabled]: serviceAccount.isDisabled })}>\n        <td className=\"width-4 text-center link-td\">\n          <a href={editUrl} aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}>\n            <img\n              className=\"filter-table__avatar\"\n              src={serviceAccount.avatarUrl}\n              alt={`Avatar for user ${serviceAccount.name}`}\n            />\n          </a>\n        </td>\n        <td className=\"link-td max-width-10\">\n          <a\n            className=\"ellipsis\"\n            href={editUrl}\n            title={serviceAccount.name}\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            {serviceAccount.name}\n          </a>\n        </td>\n        <td className=\"link-td max-width-10\">\n          <a\n            className={styles.accountId}\n            href={editUrl}\n            title={serviceAccount.login}\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            {serviceAccount.login}\n          </a>\n        </td>\n        {contextSrv.licensedAccessControlEnabled() ? (\n          <td>\n            {displayRolePicker && (\n              <UserRolePicker\n                userId={serviceAccount.id}\n                orgId={serviceAccount.orgId}\n                builtInRole={serviceAccount.role}\n                onBuiltinRoleChange={(newRole) => onRoleChange(newRole, serviceAccount)}\n                roleOptions={roleOptions}\n                builtInRoles={builtInRoles}\n                disabled={!enableRolePicker || serviceAccount.isDisabled}\n              />\n            )}\n          </td>\n        ) : (\n          <td>\n            <OrgRolePicker\n              aria-label=\"Role\"\n              value={serviceAccount.role}\n              disabled={!canUpdateRole || serviceAccount.isDisabled}\n              onChange={(newRole) => onRoleChange(newRole, serviceAccount)}\n            />\n          </td>\n        )}\n        <td className=\"link-td max-width-10\">\n          <a\n            className=\"ellipsis\"\n            href={editUrl}\n            title=\"Tokens\"\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            <div className={cx(styles.tokensInfo, { [styles.tokensInfoSecondary]: !serviceAccount.tokens })}>\n              <span>\n                <Icon name=\"key-skeleton-alt\"></Icon>\n              </span>\n              {serviceAccount.tokens || 'No tokens'}\n            </div>\n          </a>\n        </td>\n        <td>\n          <HorizontalGroup justify=\"flex-end\">\n            {contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) && !serviceAccount.tokens && (\n              <Button onClick={() => onAddTokenClick(serviceAccount)} disabled={serviceAccount.isDisabled}>\n                Add token\n              </Button>\n            )}\n            {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount) &&\n              (serviceAccount.isDisabled ? (\n                <Button variant=\"primary\" onClick={() => onEnable(serviceAccount)}>\n                  Enable\n                </Button>\n              ) : (\n                <Button variant=\"secondary\" onClick={() => onDisable(serviceAccount)}>\n                  Disable\n                </Button>\n              ))}\n            {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsDelete, serviceAccount) && (\n              <IconButton\n                className={styles.deleteButton}\n                name=\"trash-alt\"\n                size=\"md\"\n                onClick={() => onRemoveButtonClick(serviceAccount)}\n                aria-label={`Delete service account ${serviceAccount.name}`}\n              />\n            )}\n          </HorizontalGroup>\n        </td>\n      </tr>\n    );\n  }\n);\nServiceAccountListItem.displayName = 'ServiceAccountListItem';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    iconRow: css`\n      svg {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    accountId: cx(\n      'ellipsis',\n      css`\n        color: ${theme.colors.text.secondary};\n      `\n    ),\n    deleteButton: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    tokensInfo: css`\n      span {\n        margin-right: ${theme.spacing(1)};\n      }\n    `,\n    tokensInfoSecondary: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    disabled: css`\n      td a {\n        color: ${theme.colors.text.secondary};\n      }\n    `,\n  };\n};\n\nexport default ServiceAccountListItem;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}