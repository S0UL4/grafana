{"ast":null,"code":"const _excluded = [\"index\", \"id\", \"state\", \"global\", \"queryValue\", \"rootStateKey\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cloneDeep } from 'lodash';\nimport { dispatch } from '../../../store/store';\nimport { ALL_VARIABLE_TEXT } from '../constants';\nimport { optionPickerFactory } from '../pickers';\nimport { setOptionAsCurrent, setOptionFromUrl } from '../state/actions';\nimport { VariableRefresh } from '../types';\nimport { containsVariable, isAllVariable, toKeyedVariableIdentifier } from '../utils';\nimport { QueryVariableEditor } from './QueryVariableEditor';\nimport { updateQueryVariableOptions } from './actions';\nimport { initialQueryVariableModelState, queryVariableReducer } from './reducer';\nexport const createQueryVariableAdapter = () => {\n  return {\n    id: 'query',\n    description: 'Variable values are fetched from a datasource query',\n    name: 'Query',\n    initialState: initialQueryVariableModelState,\n    reducer: queryVariableReducer,\n    picker: optionPickerFactory(),\n    editor: QueryVariableEditor,\n    dependsOn: (variable, variableToTest) => {\n      var _variable$datasource;\n\n      return containsVariable(variable.query, (_variable$datasource = variable.datasource) === null || _variable$datasource === void 0 ? void 0 : _variable$datasource.uid, variable.regex, variableToTest.name);\n    },\n    setValue: async (variable, option, emitChanges = false) => {\n      await dispatch(setOptionAsCurrent(toKeyedVariableIdentifier(variable), option, emitChanges));\n    },\n    setValueFromUrl: async (variable, urlValue) => {\n      await dispatch(setOptionFromUrl(toKeyedVariableIdentifier(variable), urlValue));\n    },\n    updateOptions: async (variable, searchFilter) => {\n      await dispatch(updateQueryVariableOptions(toKeyedVariableIdentifier(variable), searchFilter));\n    },\n    getSaveModel: variable => {\n      const _cloneDeep = cloneDeep(variable),\n            rest = _objectWithoutPropertiesLoose(_cloneDeep, _excluded); // remove options\n\n\n      if (variable.refresh !== VariableRefresh.never) {\n        return Object.assign({}, rest, {\n          options: []\n        });\n      }\n\n      return rest;\n    },\n    getValueForUrl: variable => {\n      if (isAllVariable(variable)) {\n        return ALL_VARIABLE_TEXT;\n      }\n\n      return variable.current.value;\n    }\n  };\n};","map":{"version":3,"names":["cloneDeep","dispatch","ALL_VARIABLE_TEXT","optionPickerFactory","setOptionAsCurrent","setOptionFromUrl","VariableRefresh","containsVariable","isAllVariable","toKeyedVariableIdentifier","QueryVariableEditor","updateQueryVariableOptions","initialQueryVariableModelState","queryVariableReducer","createQueryVariableAdapter","id","description","name","initialState","reducer","picker","editor","dependsOn","variable","variableToTest","query","datasource","uid","regex","setValue","option","emitChanges","setValueFromUrl","urlValue","updateOptions","searchFilter","getSaveModel","rest","refresh","never","options","getValueForUrl","current","value"],"sources":["/home/soula/grafana/public/app/features/variables/query/adapter.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\n\nimport { dispatch } from '../../../store/store';\nimport { VariableAdapter } from '../adapters';\nimport { ALL_VARIABLE_TEXT } from '../constants';\nimport { optionPickerFactory } from '../pickers';\nimport { setOptionAsCurrent, setOptionFromUrl } from '../state/actions';\nimport { QueryVariableModel, VariableRefresh } from '../types';\nimport { containsVariable, isAllVariable, toKeyedVariableIdentifier } from '../utils';\n\nimport { QueryVariableEditor } from './QueryVariableEditor';\nimport { updateQueryVariableOptions } from './actions';\nimport { initialQueryVariableModelState, queryVariableReducer } from './reducer';\n\nexport const createQueryVariableAdapter = (): VariableAdapter<QueryVariableModel> => {\n  return {\n    id: 'query',\n    description: 'Variable values are fetched from a datasource query',\n    name: 'Query',\n    initialState: initialQueryVariableModelState,\n    reducer: queryVariableReducer,\n    picker: optionPickerFactory<QueryVariableModel>(),\n    editor: QueryVariableEditor,\n    dependsOn: (variable, variableToTest) => {\n      return containsVariable(variable.query, variable.datasource?.uid, variable.regex, variableToTest.name);\n    },\n    setValue: async (variable, option, emitChanges = false) => {\n      await dispatch(setOptionAsCurrent(toKeyedVariableIdentifier(variable), option, emitChanges));\n    },\n    setValueFromUrl: async (variable, urlValue) => {\n      await dispatch(setOptionFromUrl(toKeyedVariableIdentifier(variable), urlValue));\n    },\n    updateOptions: async (variable, searchFilter) => {\n      await dispatch(updateQueryVariableOptions(toKeyedVariableIdentifier(variable), searchFilter));\n    },\n    getSaveModel: (variable) => {\n      const { index, id, state, global, queryValue, rootStateKey, ...rest } = cloneDeep(variable);\n      // remove options\n      if (variable.refresh !== VariableRefresh.never) {\n        return { ...rest, options: [] };\n      }\n\n      return rest;\n    },\n    getValueForUrl: (variable) => {\n      if (isAllVariable(variable)) {\n        return ALL_VARIABLE_TEXT;\n      }\n      return variable.current.value;\n    },\n  };\n};\n"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,mBAAT,QAAoC,YAApC;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,kBAArD;AACA,SAA6BC,eAA7B,QAAoD,UAApD;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,yBAA1C,QAA2E,UAA3E;AAEA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,0BAAT,QAA2C,WAA3C;AACA,SAASC,8BAAT,EAAyCC,oBAAzC,QAAqE,WAArE;AAEA,OAAO,MAAMC,0BAA0B,GAAG,MAA2C;EACnF,OAAO;IACLC,EAAE,EAAE,OADC;IAELC,WAAW,EAAE,qDAFR;IAGLC,IAAI,EAAE,OAHD;IAILC,YAAY,EAAEN,8BAJT;IAKLO,OAAO,EAAEN,oBALJ;IAMLO,MAAM,EAAEjB,mBAAmB,EANtB;IAOLkB,MAAM,EAAEX,mBAPH;IAQLY,SAAS,EAAE,CAACC,QAAD,EAAWC,cAAX,KAA8B;MAAA;;MACvC,OAAOjB,gBAAgB,CAACgB,QAAQ,CAACE,KAAV,0BAAiBF,QAAQ,CAACG,UAA1B,yDAAiB,qBAAqBC,GAAtC,EAA2CJ,QAAQ,CAACK,KAApD,EAA2DJ,cAAc,CAACP,IAA1E,CAAvB;IACD,CAVI;IAWLY,QAAQ,EAAE,OAAON,QAAP,EAAiBO,MAAjB,EAAyBC,WAAW,GAAG,KAAvC,KAAiD;MACzD,MAAM9B,QAAQ,CAACG,kBAAkB,CAACK,yBAAyB,CAACc,QAAD,CAA1B,EAAsCO,MAAtC,EAA8CC,WAA9C,CAAnB,CAAd;IACD,CAbI;IAcLC,eAAe,EAAE,OAAOT,QAAP,EAAiBU,QAAjB,KAA8B;MAC7C,MAAMhC,QAAQ,CAACI,gBAAgB,CAACI,yBAAyB,CAACc,QAAD,CAA1B,EAAsCU,QAAtC,CAAjB,CAAd;IACD,CAhBI;IAiBLC,aAAa,EAAE,OAAOX,QAAP,EAAiBY,YAAjB,KAAkC;MAC/C,MAAMlC,QAAQ,CAACU,0BAA0B,CAACF,yBAAyB,CAACc,QAAD,CAA1B,EAAsCY,YAAtC,CAA3B,CAAd;IACD,CAnBI;IAoBLC,YAAY,EAAGb,QAAD,IAAc;MAC1B,mBAAwEvB,SAAS,CAACuB,QAAD,CAAjF;MAAA,MAA+Dc,IAA/D,wDAD0B,CAE1B;;;MACA,IAAId,QAAQ,CAACe,OAAT,KAAqBhC,eAAe,CAACiC,KAAzC,EAAgD;QAC9C,yBAAYF,IAAZ;UAAkBG,OAAO,EAAE;QAA3B;MACD;;MAED,OAAOH,IAAP;IACD,CA5BI;IA6BLI,cAAc,EAAGlB,QAAD,IAAc;MAC5B,IAAIf,aAAa,CAACe,QAAD,CAAjB,EAA6B;QAC3B,OAAOrB,iBAAP;MACD;;MACD,OAAOqB,QAAQ,CAACmB,OAAT,CAAiBC,KAAxB;IACD;EAlCI,CAAP;AAoCD,CArCM"},"metadata":{},"sourceType":"module"}