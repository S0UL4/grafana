{"ast":null,"code":"import { VizOrientation } from '@grafana/data';\nimport { LegendDisplayMode, StackingMode, VisibilityMode } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\nexport class BarChartSuggestionsSupplier {\n  getListWithDefaults(builder) {\n    return builder.getListAppender({\n      name: SuggestionName.BarChart,\n      pluginId: 'barchart',\n      options: {\n        showValue: VisibilityMode.Never,\n        legend: {\n          displayMode: LegendDisplayMode.Hidden,\n          placement: 'right'\n        }\n      },\n      fieldConfig: {\n        defaults: {\n          unit: 'short',\n          custom: {}\n        },\n        overrides: []\n      },\n      cardOptions: {\n        previewModifier: s => {\n          s.options.barWidth = 0.8;\n        }\n      }\n    });\n  }\n\n  getSuggestionsForData(builder) {\n    const list = this.getListWithDefaults(builder);\n    const {\n      dataSummary\n    } = builder;\n\n    if (dataSummary.frameCount !== 1) {\n      return;\n    }\n\n    if (!dataSummary.hasNumberField || !dataSummary.hasStringField) {\n      return;\n    } // if you have this many rows barchart might not be a good fit\n\n\n    if (dataSummary.rowCountTotal > 50) {\n      return;\n    } // Vertical bars\n\n\n    list.append({\n      name: SuggestionName.BarChart\n    });\n\n    if (dataSummary.numberFieldCount > 1) {\n      list.append({\n        name: SuggestionName.BarChartStacked,\n        options: {\n          stacking: StackingMode.Normal\n        }\n      });\n      list.append({\n        name: SuggestionName.BarChartStackedPercent,\n        options: {\n          stacking: StackingMode.Percent\n        }\n      });\n    } // horizontal bars\n\n\n    list.append({\n      name: SuggestionName.BarChartHorizontal,\n      options: {\n        orientation: VizOrientation.Horizontal\n      }\n    });\n\n    if (dataSummary.numberFieldCount > 1) {\n      list.append({\n        name: SuggestionName.BarChartHorizontalStacked,\n        options: {\n          stacking: StackingMode.Normal,\n          orientation: VizOrientation.Horizontal\n        }\n      });\n      list.append({\n        name: SuggestionName.BarChartHorizontalStackedPercent,\n        options: {\n          orientation: VizOrientation.Horizontal,\n          stacking: StackingMode.Percent\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"names":["VizOrientation","LegendDisplayMode","StackingMode","VisibilityMode","SuggestionName","BarChartSuggestionsSupplier","getListWithDefaults","builder","getListAppender","name","BarChart","pluginId","options","showValue","Never","legend","displayMode","Hidden","placement","fieldConfig","defaults","unit","custom","overrides","cardOptions","previewModifier","s","barWidth","getSuggestionsForData","list","dataSummary","frameCount","hasNumberField","hasStringField","rowCountTotal","append","numberFieldCount","BarChartStacked","stacking","Normal","BarChartStackedPercent","Percent","BarChartHorizontal","orientation","Horizontal","BarChartHorizontalStacked","BarChartHorizontalStackedPercent"],"sources":["/home/soula/grafana/public/app/plugins/panel/barchart/suggestions.ts"],"sourcesContent":["import { VisualizationSuggestionsBuilder, VizOrientation } from '@grafana/data';\nimport { LegendDisplayMode, StackingMode, VisibilityMode } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { BarChartFieldConfig, PanelOptions } from './models.gen';\n\nexport class BarChartSuggestionsSupplier {\n  getListWithDefaults(builder: VisualizationSuggestionsBuilder) {\n    return builder.getListAppender<PanelOptions, BarChartFieldConfig>({\n      name: SuggestionName.BarChart,\n      pluginId: 'barchart',\n      options: {\n        showValue: VisibilityMode.Never,\n        legend: {\n          displayMode: LegendDisplayMode.Hidden,\n          placement: 'right',\n        } as any,\n      },\n      fieldConfig: {\n        defaults: {\n          unit: 'short',\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          s.options!.barWidth = 0.8;\n        },\n      },\n    });\n  }\n\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const list = this.getListWithDefaults(builder);\n    const { dataSummary } = builder;\n\n    if (dataSummary.frameCount !== 1) {\n      return;\n    }\n\n    if (!dataSummary.hasNumberField || !dataSummary.hasStringField) {\n      return;\n    }\n\n    // if you have this many rows barchart might not be a good fit\n    if (dataSummary.rowCountTotal > 50) {\n      return;\n    }\n\n    // Vertical bars\n    list.append({\n      name: SuggestionName.BarChart,\n    });\n\n    if (dataSummary.numberFieldCount > 1) {\n      list.append({\n        name: SuggestionName.BarChartStacked,\n        options: {\n          stacking: StackingMode.Normal,\n        },\n      });\n      list.append({\n        name: SuggestionName.BarChartStackedPercent,\n        options: {\n          stacking: StackingMode.Percent,\n        },\n      });\n    }\n\n    // horizontal bars\n    list.append({\n      name: SuggestionName.BarChartHorizontal,\n      options: {\n        orientation: VizOrientation.Horizontal,\n      },\n    });\n\n    if (dataSummary.numberFieldCount > 1) {\n      list.append({\n        name: SuggestionName.BarChartHorizontalStacked,\n        options: {\n          stacking: StackingMode.Normal,\n          orientation: VizOrientation.Horizontal,\n        },\n      });\n\n      list.append({\n        name: SuggestionName.BarChartHorizontalStackedPercent,\n        options: {\n          orientation: VizOrientation.Horizontal,\n          stacking: StackingMode.Percent,\n        },\n      });\n    }\n  }\n}\n"],"mappings":"AAAA,SAA0CA,cAA1C,QAAgE,eAAhE;AACA,SAASC,iBAAT,EAA4BC,YAA5B,EAA0CC,cAA1C,QAAgE,iBAAhE;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAIA,OAAO,MAAMC,2BAAN,CAAkC;EACvCC,mBAAmB,CAACC,OAAD,EAA2C;IAC5D,OAAOA,OAAO,CAACC,eAAR,CAA2D;MAChEC,IAAI,EAAEL,cAAc,CAACM,QAD2C;MAEhEC,QAAQ,EAAE,UAFsD;MAGhEC,OAAO,EAAE;QACPC,SAAS,EAAEV,cAAc,CAACW,KADnB;QAEPC,MAAM,EAAE;UACNC,WAAW,EAAEf,iBAAiB,CAACgB,MADzB;UAENC,SAAS,EAAE;QAFL;MAFD,CAHuD;MAUhEC,WAAW,EAAE;QACXC,QAAQ,EAAE;UACRC,IAAI,EAAE,OADE;UAERC,MAAM,EAAE;QAFA,CADC;QAKXC,SAAS,EAAE;MALA,CAVmD;MAiBhEC,WAAW,EAAE;QACXC,eAAe,EAAGC,CAAD,IAAO;UACtBA,CAAC,CAACd,OAAF,CAAWe,QAAX,GAAsB,GAAtB;QACD;MAHU;IAjBmD,CAA3D,CAAP;EAuBD;;EAEDC,qBAAqB,CAACrB,OAAD,EAA2C;IAC9D,MAAMsB,IAAI,GAAG,KAAKvB,mBAAL,CAAyBC,OAAzB,CAAb;IACA,MAAM;MAAEuB;IAAF,IAAkBvB,OAAxB;;IAEA,IAAIuB,WAAW,CAACC,UAAZ,KAA2B,CAA/B,EAAkC;MAChC;IACD;;IAED,IAAI,CAACD,WAAW,CAACE,cAAb,IAA+B,CAACF,WAAW,CAACG,cAAhD,EAAgE;MAC9D;IACD,CAV6D,CAY9D;;;IACA,IAAIH,WAAW,CAACI,aAAZ,GAA4B,EAAhC,EAAoC;MAClC;IACD,CAf6D,CAiB9D;;;IACAL,IAAI,CAACM,MAAL,CAAY;MACV1B,IAAI,EAAEL,cAAc,CAACM;IADX,CAAZ;;IAIA,IAAIoB,WAAW,CAACM,gBAAZ,GAA+B,CAAnC,EAAsC;MACpCP,IAAI,CAACM,MAAL,CAAY;QACV1B,IAAI,EAAEL,cAAc,CAACiC,eADX;QAEVzB,OAAO,EAAE;UACP0B,QAAQ,EAAEpC,YAAY,CAACqC;QADhB;MAFC,CAAZ;MAMAV,IAAI,CAACM,MAAL,CAAY;QACV1B,IAAI,EAAEL,cAAc,CAACoC,sBADX;QAEV5B,OAAO,EAAE;UACP0B,QAAQ,EAAEpC,YAAY,CAACuC;QADhB;MAFC,CAAZ;IAMD,CAnC6D,CAqC9D;;;IACAZ,IAAI,CAACM,MAAL,CAAY;MACV1B,IAAI,EAAEL,cAAc,CAACsC,kBADX;MAEV9B,OAAO,EAAE;QACP+B,WAAW,EAAE3C,cAAc,CAAC4C;MADrB;IAFC,CAAZ;;IAOA,IAAId,WAAW,CAACM,gBAAZ,GAA+B,CAAnC,EAAsC;MACpCP,IAAI,CAACM,MAAL,CAAY;QACV1B,IAAI,EAAEL,cAAc,CAACyC,yBADX;QAEVjC,OAAO,EAAE;UACP0B,QAAQ,EAAEpC,YAAY,CAACqC,MADhB;UAEPI,WAAW,EAAE3C,cAAc,CAAC4C;QAFrB;MAFC,CAAZ;MAQAf,IAAI,CAACM,MAAL,CAAY;QACV1B,IAAI,EAAEL,cAAc,CAAC0C,gCADX;QAEVlC,OAAO,EAAE;UACP+B,WAAW,EAAE3C,cAAc,CAAC4C,UADrB;UAEPN,QAAQ,EAAEpC,YAAY,CAACuC;QAFhB;MAFC,CAAZ;IAOD;EACF;;AAzFsC"},"metadata":{},"sourceType":"module"}