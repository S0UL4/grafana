{"ast":null,"code":"var _LoadingPlaceholder, _Label, _Label2, _Label3;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css, cx } from '@emotion/css';\nimport { sortBy } from 'lodash';\nimport React from 'react';\nimport { FixedSizeList } from 'react-window';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, HorizontalGroup, Input, Label, LoadingPlaceholder, withTheme2, BrowserLabel as LokiLabel, fuzzyMatch } from '@grafana/ui';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../language_utils'; // Hard limit on labels to render\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst MAX_LABEL_COUNT = 1000;\nconst MAX_VALUE_COUNT = 10000;\nconst MAX_AUTO_SELECT = 4;\nconst EMPTY_SELECTOR = '{}';\nexport function buildSelector(labels) {\n  const selectedLabels = [];\n\n  for (const label of labels) {\n    if (label.selected && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter(value => value.selected).map(value => value.name);\n\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n      }\n    }\n  }\n\n  return ['{', selectedLabels.join(','), '}'].join('');\n}\nexport function facetLabels(labels, possibleLabels, lastFacetted) {\n  return labels.map(label => {\n    const possibleValues = possibleLabels[label.name];\n\n    if (possibleValues) {\n      let existingValues;\n\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        var _label$values;\n\n        // Keep selection in other facets\n        const selectedValues = new Set(((_label$values = label.values) === null || _label$values === void 0 ? void 0 : _label$values.filter(value => value.selected).map(value => value.name)) || []); // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n\n        existingValues = possibleValues.map(value => ({\n          name: value,\n          selected: selectedValues.has(value)\n        }));\n      }\n\n      return Object.assign({}, label, {\n        loading: false,\n        values: existingValues,\n        facets: existingValues.length\n      });\n    } // Label is facetted out, hide all values\n\n\n    return Object.assign({}, label, {\n      loading: false,\n      hidden: !possibleValues,\n      values: undefined,\n      facets: 0\n    });\n  });\n}\n\nconst getStyles = theme => ({\n  wrapper: css`\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(2)};\n    width: 100%;\n  `,\n  list: css`\n    margin-top: ${theme.spacing(1)};\n    display: flex;\n    flex-wrap: wrap;\n    max-height: 200px;\n    overflow: auto;\n  `,\n  section: css`\n    & + & {\n      margin: ${theme.spacing(2, 0)};\n    }\n    position: relative;\n  `,\n  selector: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  status: css`\n    padding: ${theme.spacing(0.5)};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    /* using absolute positioning because flex interferes with ellipsis */\n    position: absolute;\n    width: 50%;\n    right: 0;\n    text-align: right;\n    transition: opacity 100ms linear;\n    opacity: 0;\n  `,\n  statusShowing: css`\n    opacity: 1;\n  `,\n  error: css`\n    color: ${theme.colors.error.main};\n  `,\n  valueList: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  valueListWrapper: css`\n    border-left: 1px solid ${theme.colors.border.medium};\n    margin: ${theme.spacing(1, 0)};\n    padding: ${theme.spacing(1, 0, 1, 1)};\n  `,\n  valueListArea: css`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${theme.spacing(1)};\n  `,\n  valueTitle: css`\n    margin-left: -${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  validationStatus: css`\n    padding: ${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n    color: ${theme.colors.text.maxContrast};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `\n});\n\nexport class UnthemedLokiLabelBrowser extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      labels: [],\n      searchTerm: '',\n      status: 'Ready',\n      error: '',\n      validationStatus: ''\n    });\n\n    _defineProperty(this, \"onChangeSearch\", event => {\n      this.setState({\n        searchTerm: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onClickRunLogsQuery\", () => {\n      reportInteraction('grafana_loki_log_browser_closed', {\n        app: this.props.app,\n        closeType: 'showLogsButton'\n      });\n      const selector = buildSelector(this.state.labels);\n      this.props.onChange(selector);\n    });\n\n    _defineProperty(this, \"onClickRunMetricsQuery\", () => {\n      reportInteraction('grafana_loki_log_browser_closed', {\n        app: this.props.app,\n        closeType: 'showLogsRateButton'\n      });\n      const selector = buildSelector(this.state.labels);\n      const query = `rate(${selector}[$__interval])`;\n      this.props.onChange(query);\n    });\n\n    _defineProperty(this, \"onClickClear\", () => {\n      reportInteraction('grafana_loki_log_browser_closed', {\n        app: this.props.app,\n        closeType: 'clearButton'\n      });\n      this.setState(state => {\n        const labels = state.labels.map(label => Object.assign({}, label, {\n          values: undefined,\n          selected: false,\n          loading: false,\n          hidden: false,\n          facets: undefined\n        }));\n        return {\n          labels,\n          searchTerm: '',\n          status: '',\n          error: '',\n          validationStatus: ''\n        };\n      });\n      this.props.deleteLastUsedLabels();\n    });\n\n    _defineProperty(this, \"onClickLabel\", (name, value, event) => {\n      const label = this.state.labels.find(l => l.name === name);\n\n      if (!label) {\n        return;\n      } // Toggle selected state\n\n\n      const selected = !label.selected;\n      let nextValue = {\n        selected\n      };\n\n      if (label.values && !selected) {\n        // Deselect all values if label was deselected\n        const values = label.values.map(value => Object.assign({}, value, {\n          selected: false\n        }));\n        nextValue = Object.assign({}, nextValue, {\n          facets: 0,\n          values\n        });\n      } // Resetting search to prevent empty results\n\n\n      this.setState({\n        searchTerm: ''\n      });\n      this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n    });\n\n    _defineProperty(this, \"onClickValue\", (name, value, event) => {\n      const label = this.state.labels.find(l => l.name === name);\n\n      if (!label || !label.values) {\n        return;\n      } // Resetting search to prevent empty results\n\n\n      this.setState({\n        searchTerm: ''\n      }); // Toggling value for selected label, leaving other values intact\n\n      const values = label.values.map(v => Object.assign({}, v, {\n        selected: v.name === value ? !v.selected : v.selected\n      }));\n      this.updateLabelState(name, {\n        values\n      }, '', () => this.doFacetting(name));\n    });\n\n    _defineProperty(this, \"onClickValidate\", () => {\n      const selector = buildSelector(this.state.labels);\n      this.validateSelector(selector);\n    });\n\n    _defineProperty(this, \"doFacetting\", lastFacetted => {\n      const selector = buildSelector(this.state.labels);\n\n      if (selector === EMPTY_SELECTOR) {\n        // Clear up facetting\n        const labels = this.state.labels.map(label => {\n          return Object.assign({}, label, {\n            facets: 0,\n            values: undefined,\n            hidden: false\n          });\n        });\n        this.setState({\n          labels\n        }, () => {\n          // Get fresh set of values\n          this.state.labels.forEach(label => label.selected && this.fetchValues(label.name, selector));\n        });\n      } else {\n        // Do facetting\n        this.fetchSeries(selector, lastFacetted);\n      }\n    });\n  }\n\n  updateLabelState(name, updatedFields, status = '', cb) {\n    this.setState(state => {\n      const labels = state.labels.map(label => {\n        if (label.name === name) {\n          return Object.assign({}, label, updatedFields);\n        }\n\n        return label;\n      }); // New status overrides errors\n\n      const error = status ? '' : state.error;\n      return {\n        labels,\n        status,\n        error,\n        validationStatus: ''\n      };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const {\n      languageProvider,\n      autoSelect = MAX_AUTO_SELECT,\n      lastUsedLabels\n    } = this.props;\n\n    if (languageProvider) {\n      const selectedLabels = lastUsedLabels;\n      languageProvider.start().then(() => {\n        let rawLabels = languageProvider.getLabelKeys();\n\n        if (rawLabels.length > MAX_LABEL_COUNT) {\n          const error = `Too many labels found (showing only ${MAX_LABEL_COUNT} of ${rawLabels.length})`;\n          rawLabels = rawLabels.slice(0, MAX_LABEL_COUNT);\n          this.setState({\n            error\n          });\n        } // Auto-select all labels if label list is small enough\n\n\n        const labels = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: arr.length <= autoSelect && selectedLabels.length === 0 || selectedLabels.includes(label),\n          loading: false\n        })); // Pre-fetch values for selected labels\n\n        this.setState({\n          labels\n        }, () => {\n          this.state.labels.forEach(label => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name) {\n    const label = this.state.labels.find(l => l.name === name);\n\n    if (!label) {\n      return;\n    }\n\n    const selectedLabels = this.state.labels.filter(label => label.selected).map(label => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  async fetchValues(name, selector) {\n    const {\n      languageProvider\n    } = this.props;\n    this.updateLabelState(name, {\n      loading: true\n    }, `Fetching values for ${name}`);\n\n    try {\n      let rawValues = await languageProvider.getLabelValues(name); // If selector changed, clear loading state and discard result by returning early\n\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, {\n          loading: false\n        }, '');\n        return;\n      }\n\n      if (rawValues.length > MAX_VALUE_COUNT) {\n        const error = `Too many values for ${name} (showing only ${MAX_VALUE_COUNT} of ${rawValues.length})`;\n        rawValues = rawValues.slice(0, MAX_VALUE_COUNT);\n        this.setState({\n          error\n        });\n      }\n\n      const values = rawValues.map(value => ({\n        name: value\n      }));\n      this.updateLabelState(name, {\n        values,\n        loading: false\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector, lastFacetted) {\n    const {\n      languageProvider\n    } = this.props;\n\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, {\n        loading: true\n      }, `Facetting labels for ${selector}`);\n    }\n\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true); // If selector changed, clear loading state and discard result by returning early\n\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, {\n            loading: false\n          });\n        }\n\n        return;\n      }\n\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({\n          error: `Empty results, no matching label for ${selector}`\n        });\n        return;\n      }\n\n      const labels = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({\n        labels,\n        error: ''\n      });\n\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, {\n          loading: false\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector) {\n    const {\n      languageProvider\n    } = this.props;\n    this.setState({\n      validationStatus: `Validating selector ${selector}`,\n      error: ''\n    });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({\n      validationStatus: `Selector is valid (${streams.length} streams found)`\n    });\n  }\n\n  render() {\n    const {\n      theme\n    } = this.props;\n    const {\n      labels,\n      searchTerm,\n      status,\n      error,\n      validationStatus\n    } = this.state;\n\n    if (labels.length === 0) {\n      return _LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n        text: \"Loading labels...\"\n      }));\n    }\n\n    const styles = getStyles(theme);\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n    let selectedLabels = labels.filter(label => label.selected && label.values);\n\n    if (searchTerm) {\n      selectedLabels = selectedLabels.map(label => {\n        const searchResults = label.values.filter(value => {\n          // Always return selected values\n          if (value.selected) {\n            value.highlightParts = undefined;\n            return true;\n          }\n\n          const fuzzyMatchResult = fuzzyMatch(value.name.toLowerCase(), searchTerm.toLowerCase());\n\n          if (fuzzyMatchResult.found) {\n            value.highlightParts = fuzzyMatchResult.ranges;\n            value.order = fuzzyMatchResult.distance;\n            return true;\n          } else {\n            return false;\n          }\n        });\n        return Object.assign({}, label, {\n          values: sortBy(searchResults, value => value.selected ? -Infinity : value.order)\n        });\n      });\n    } else {\n      // Clear highlight parts when searchTerm is cleared\n      selectedLabels = this.state.labels.filter(label => label.selected && label.values).map(label => Object.assign({}, label, {\n        values: label !== null && label !== void 0 && label.values ? label.values.map(value => Object.assign({}, value, {\n          highlightParts: undefined\n        })) : []\n      }));\n    }\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.wrapper,\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.section,\n        children: [_Label || (_Label = /*#__PURE__*/_jsx(Label, {\n          description: \"Which labels would you like to consider for your search?\",\n          children: \"1. Select labels to search in\"\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.list,\n          children: labels.map(label => /*#__PURE__*/_jsx(LokiLabel, {\n            name: label.name,\n            loading: label.loading,\n            active: label.selected,\n            hidden: label.hidden,\n            facets: label.facets,\n            onClick: this.onClickLabel\n          }, label.name))\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.section,\n        children: [_Label2 || (_Label2 = /*#__PURE__*/_jsx(Label, {\n          description: \"Choose the label values that you would like to use for the query. Use the search field to find values across selected labels.\",\n          children: \"2. Find values for the selected labels\"\n        })), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(Input, {\n            onChange: this.onChangeSearch,\n            \"aria-label\": \"Filter expression for values\",\n            value: searchTerm\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.valueListArea,\n          children: selectedLabels.map(label => {\n            var _label$values2, _label$values3;\n\n            return /*#__PURE__*/_jsxs(\"div\", {\n              role: \"list\",\n              className: styles.valueListWrapper,\n              children: [/*#__PURE__*/_jsx(\"div\", {\n                className: styles.valueTitle,\n                \"aria-label\": `Values for ${label.name}`,\n                children: /*#__PURE__*/_jsx(LokiLabel, {\n                  name: label.name,\n                  loading: label.loading,\n                  active: label.selected,\n                  hidden: label.hidden //If no facets, we want to show number of all label values\n                  ,\n                  facets: label.facets || ((_label$values2 = label.values) === null || _label$values2 === void 0 ? void 0 : _label$values2.length),\n                  onClick: this.onClickLabel\n                })\n              }), /*#__PURE__*/_jsx(FixedSizeList, {\n                height: 200,\n                itemCount: ((_label$values3 = label.values) === null || _label$values3 === void 0 ? void 0 : _label$values3.length) || 0,\n                itemSize: 28,\n                itemKey: i => label.values[i].name,\n                width: 200,\n                className: styles.valueList,\n                children: ({\n                  index,\n                  style\n                }) => {\n                  var _label$values4;\n\n                  const value = (_label$values4 = label.values) === null || _label$values4 === void 0 ? void 0 : _label$values4[index];\n\n                  if (!value) {\n                    return null;\n                  }\n\n                  return /*#__PURE__*/_jsx(\"div\", {\n                    style: style,\n                    children: /*#__PURE__*/_jsx(LokiLabel, {\n                      name: label.name,\n                      value: value === null || value === void 0 ? void 0 : value.name,\n                      active: value === null || value === void 0 ? void 0 : value.selected,\n                      highlightParts: value === null || value === void 0 ? void 0 : value.highlightParts,\n                      onClick: this.onClickValue,\n                      searchTerm: searchTerm\n                    })\n                  });\n                }\n              })]\n            }, label.name);\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.section,\n        children: [_Label3 || (_Label3 = /*#__PURE__*/_jsx(Label, {\n          children: \"3. Resulting selector\"\n        })), /*#__PURE__*/_jsx(\"div\", {\n          \"aria-label\": \"selector\",\n          className: styles.selector,\n          children: selector\n        }), validationStatus && /*#__PURE__*/_jsx(\"div\", {\n          className: styles.validationStatus,\n          children: validationStatus\n        }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n          children: [/*#__PURE__*/_jsx(Button, {\n            \"aria-label\": \"Use selector as logs button\",\n            disabled: empty,\n            onClick: this.onClickRunLogsQuery,\n            children: \"Show logs\"\n          }), /*#__PURE__*/_jsx(Button, {\n            \"aria-label\": \"Use selector as metrics button\",\n            variant: \"secondary\",\n            disabled: empty,\n            onClick: this.onClickRunMetricsQuery,\n            children: \"Show logs rate\"\n          }), /*#__PURE__*/_jsx(Button, {\n            \"aria-label\": \"Validate submit button\",\n            variant: \"secondary\",\n            disabled: empty,\n            onClick: this.onClickValidate,\n            children: \"Validate selector\"\n          }), /*#__PURE__*/_jsx(Button, {\n            \"aria-label\": \"Selector clear button\",\n            variant: \"secondary\",\n            onClick: this.onClickClear,\n            children: \"Clear\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: cx(styles.status, (status || error) && styles.statusShowing),\n            children: /*#__PURE__*/_jsx(\"span\", {\n              className: error ? styles.error : '',\n              children: error || status\n            })\n          })]\n        })]\n      })]\n    });\n  }\n\n}\nexport const LokiLabelBrowser = withTheme2(UnthemedLokiLabelBrowser);","map":{"version":3,"names":["css","cx","sortBy","React","FixedSizeList","reportInteraction","Button","HorizontalGroup","Input","Label","LoadingPlaceholder","withTheme2","BrowserLabel","LokiLabel","fuzzyMatch","escapeLabelValueInExactSelector","escapeLabelValueInRegexSelector","MAX_LABEL_COUNT","MAX_VALUE_COUNT","MAX_AUTO_SELECT","EMPTY_SELECTOR","buildSelector","labels","selectedLabels","label","selected","values","length","selectedValues","filter","value","map","name","push","join","facetLabels","possibleLabels","lastFacetted","possibleValues","existingValues","Set","has","loading","facets","hidden","undefined","getStyles","theme","wrapper","colors","background","secondary","spacing","list","section","selector","typography","fontFamilyMonospace","status","text","statusShowing","error","main","valueList","valueListWrapper","border","medium","valueListArea","valueTitle","validationStatus","maxContrast","UnthemedLokiLabelBrowser","Component","searchTerm","event","setState","target","app","props","closeType","state","onChange","query","deleteLastUsedLabels","find","l","nextValue","updateLabelState","doFacettingForLabel","v","doFacetting","validateSelector","forEach","fetchValues","fetchSeries","updatedFields","cb","componentDidMount","languageProvider","autoSelect","lastUsedLabels","start","then","rawLabels","getLabelKeys","slice","i","arr","includes","storeLastUsedLabels","rawValues","getLabelValues","console","fetchSeriesLabels","Object","keys","streams","render","styles","empty","searchResults","highlightParts","fuzzyMatchResult","toLowerCase","found","ranges","order","distance","Infinity","onClickLabel","onChangeSearch","index","style","onClickValue","onClickRunLogsQuery","onClickRunMetricsQuery","onClickValidate","onClickClear","LokiLabelBrowser"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/components/LokiLabelBrowser.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { sortBy } from 'lodash';\nimport React, { ChangeEvent } from 'react';\nimport { FixedSizeList } from 'react-window';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  HighlightPart,\n  HorizontalGroup,\n  Input,\n  Label,\n  LoadingPlaceholder,\n  withTheme2,\n  BrowserLabel as LokiLabel,\n  fuzzyMatch,\n} from '@grafana/ui';\n\nimport PromQlLanguageProvider from '../../prometheus/language_provider';\nimport LokiLanguageProvider from '../language_provider';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../language_utils';\n\n// Hard limit on labels to render\nconst MAX_LABEL_COUNT = 1000;\nconst MAX_VALUE_COUNT = 10000;\nconst MAX_AUTO_SELECT = 4;\nconst EMPTY_SELECTOR = '{}';\n\nexport interface BrowserProps {\n  // TODO #33976: Is it possible to use a common interface here? For example: LabelsLanguageProvider\n  languageProvider: LokiLanguageProvider | PromQlLanguageProvider;\n  onChange: (selector: string) => void;\n  theme: GrafanaTheme2;\n  app?: CoreApp;\n  autoSelect?: number;\n  hide?: () => void;\n  lastUsedLabels: string[];\n  storeLastUsedLabels: (labels: string[]) => void;\n  deleteLastUsedLabels: () => void;\n}\n\ninterface BrowserState {\n  labels: SelectableLabel[];\n  searchTerm: string;\n  status: string;\n  error: string;\n  validationStatus: string;\n}\n\ninterface FacettableValue {\n  name: string;\n  selected?: boolean;\n  highlightParts?: HighlightPart[];\n  order?: number;\n}\n\nexport interface SelectableLabel {\n  name: string;\n  selected?: boolean;\n  loading?: boolean;\n  values?: FacettableValue[];\n  hidden?: boolean;\n  facets?: number;\n}\n\nexport function buildSelector(labels: SelectableLabel[]): string {\n  const selectedLabels = [];\n  for (const label of labels) {\n    if (label.selected && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter((value) => value.selected).map((value) => value.name);\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n      }\n    }\n  }\n  return ['{', selectedLabels.join(','), '}'].join('');\n}\n\nexport function facetLabels(\n  labels: SelectableLabel[],\n  possibleLabels: Record<string, string[]>,\n  lastFacetted?: string\n): SelectableLabel[] {\n  return labels.map((label) => {\n    const possibleValues = possibleLabels[label.name];\n    if (possibleValues) {\n      let existingValues: FacettableValue[];\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        // Keep selection in other facets\n        const selectedValues: Set<string> = new Set(\n          label.values?.filter((value) => value.selected).map((value) => value.name) || []\n        );\n        // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n        existingValues = possibleValues.map((value) => ({ name: value, selected: selectedValues.has(value) }));\n      }\n      return { ...label, loading: false, values: existingValues, facets: existingValues.length };\n    }\n\n    // Label is facetted out, hide all values\n    return { ...label, loading: false, hidden: !possibleValues, values: undefined, facets: 0 };\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(2)};\n    width: 100%;\n  `,\n  list: css`\n    margin-top: ${theme.spacing(1)};\n    display: flex;\n    flex-wrap: wrap;\n    max-height: 200px;\n    overflow: auto;\n  `,\n  section: css`\n    & + & {\n      margin: ${theme.spacing(2, 0)};\n    }\n    position: relative;\n  `,\n  selector: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  status: css`\n    padding: ${theme.spacing(0.5)};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    /* using absolute positioning because flex interferes with ellipsis */\n    position: absolute;\n    width: 50%;\n    right: 0;\n    text-align: right;\n    transition: opacity 100ms linear;\n    opacity: 0;\n  `,\n  statusShowing: css`\n    opacity: 1;\n  `,\n  error: css`\n    color: ${theme.colors.error.main};\n  `,\n  valueList: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  valueListWrapper: css`\n    border-left: 1px solid ${theme.colors.border.medium};\n    margin: ${theme.spacing(1, 0)};\n    padding: ${theme.spacing(1, 0, 1, 1)};\n  `,\n  valueListArea: css`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${theme.spacing(1)};\n  `,\n  valueTitle: css`\n    margin-left: -${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  validationStatus: css`\n    padding: ${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n    color: ${theme.colors.text.maxContrast};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n});\n\nexport class UnthemedLokiLabelBrowser extends React.Component<BrowserProps, BrowserState> {\n  state: BrowserState = {\n    labels: [] as SelectableLabel[],\n    searchTerm: '',\n    status: 'Ready',\n    error: '',\n    validationStatus: '',\n  };\n\n  onChangeSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ searchTerm: event.target.value });\n  };\n\n  onClickRunLogsQuery = () => {\n    reportInteraction('grafana_loki_log_browser_closed', {\n      app: this.props.app,\n      closeType: 'showLogsButton',\n    });\n    const selector = buildSelector(this.state.labels);\n    this.props.onChange(selector);\n  };\n\n  onClickRunMetricsQuery = () => {\n    reportInteraction('grafana_loki_log_browser_closed', {\n      app: this.props.app,\n      closeType: 'showLogsRateButton',\n    });\n    const selector = buildSelector(this.state.labels);\n    const query = `rate(${selector}[$__interval])`;\n    this.props.onChange(query);\n  };\n\n  onClickClear = () => {\n    reportInteraction('grafana_loki_log_browser_closed', {\n      app: this.props.app,\n      closeType: 'clearButton',\n    });\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => ({\n        ...label,\n        values: undefined,\n        selected: false,\n        loading: false,\n        hidden: false,\n        facets: undefined,\n      }));\n      return { labels, searchTerm: '', status: '', error: '', validationStatus: '' };\n    });\n    this.props.deleteLastUsedLabels();\n  };\n\n  onClickLabel = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    // Toggle selected state\n    const selected = !label.selected;\n    let nextValue: Partial<SelectableLabel> = { selected };\n    if (label.values && !selected) {\n      // Deselect all values if label was deselected\n      const values = label.values.map((value) => ({ ...value, selected: false }));\n      nextValue = { ...nextValue, facets: 0, values };\n    }\n    // Resetting search to prevent empty results\n    this.setState({ searchTerm: '' });\n    this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n  };\n\n  onClickValue = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ searchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({ ...v, selected: v.name === value ? !v.selected : v.selected }));\n    this.updateLabelState(name, { values }, '', () => this.doFacetting(name));\n  };\n\n  onClickValidate = () => {\n    const selector = buildSelector(this.state.labels);\n    this.validateSelector(selector);\n  };\n\n  updateLabelState(name: string, updatedFields: Partial<SelectableLabel>, status = '', cb?: () => void) {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => {\n        if (label.name === name) {\n          return { ...label, ...updatedFields };\n        }\n        return label;\n      });\n      // New status overrides errors\n      const error = status ? '' : state.error;\n      return { labels, status, error, validationStatus: '' };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const { languageProvider, autoSelect = MAX_AUTO_SELECT, lastUsedLabels } = this.props;\n    if (languageProvider) {\n      const selectedLabels: string[] = lastUsedLabels;\n      languageProvider.start().then(() => {\n        let rawLabels: string[] = languageProvider.getLabelKeys();\n        if (rawLabels.length > MAX_LABEL_COUNT) {\n          const error = `Too many labels found (showing only ${MAX_LABEL_COUNT} of ${rawLabels.length})`;\n          rawLabels = rawLabels.slice(0, MAX_LABEL_COUNT);\n          this.setState({ error });\n        }\n        // Auto-select all labels if label list is small enough\n        const labels: SelectableLabel[] = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: (arr.length <= autoSelect && selectedLabels.length === 0) || selectedLabels.includes(label),\n          loading: false,\n        }));\n        // Pre-fetch values for selected labels\n        this.setState({ labels }, () => {\n          this.state.labels.forEach((label) => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name: string) {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    const selectedLabels = this.state.labels.filter((label) => label.selected).map((label) => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  doFacetting = (lastFacetted?: string) => {\n    const selector = buildSelector(this.state.labels);\n    if (selector === EMPTY_SELECTOR) {\n      // Clear up facetting\n      const labels: SelectableLabel[] = this.state.labels.map((label) => {\n        return { ...label, facets: 0, values: undefined, hidden: false };\n      });\n      this.setState({ labels }, () => {\n        // Get fresh set of values\n        this.state.labels.forEach((label) => label.selected && this.fetchValues(label.name, selector));\n      });\n    } else {\n      // Do facetting\n      this.fetchSeries(selector, lastFacetted);\n    }\n  };\n\n  async fetchValues(name: string, selector: string) {\n    const { languageProvider } = this.props;\n    this.updateLabelState(name, { loading: true }, `Fetching values for ${name}`);\n    try {\n      let rawValues = await languageProvider.getLabelValues(name);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, { loading: false }, '');\n        return;\n      }\n      if (rawValues.length > MAX_VALUE_COUNT) {\n        const error = `Too many values for ${name} (showing only ${MAX_VALUE_COUNT} of ${rawValues.length})`;\n        rawValues = rawValues.slice(0, MAX_VALUE_COUNT);\n        this.setState({ error });\n      }\n      const values: FacettableValue[] = rawValues.map((value) => ({ name: value }));\n      this.updateLabelState(name, { values, loading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector: string, lastFacetted?: string) {\n    const { languageProvider } = this.props;\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, { loading: true }, `Facetting labels for ${selector}`);\n    }\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, { loading: false });\n        }\n        return;\n      }\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({ error: `Empty results, no matching label for ${selector}` });\n        return;\n      }\n      const labels: SelectableLabel[] = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({ labels, error: '' });\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, { loading: false });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector: string) {\n    const { languageProvider } = this.props;\n    this.setState({ validationStatus: `Validating selector ${selector}`, error: '' });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({ validationStatus: `Selector is valid (${streams.length} streams found)` });\n  }\n\n  render() {\n    const { theme } = this.props;\n    const { labels, searchTerm, status, error, validationStatus } = this.state;\n    if (labels.length === 0) {\n      return <LoadingPlaceholder text=\"Loading labels...\" />;\n    }\n    const styles = getStyles(theme);\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n\n    let selectedLabels = labels.filter((label) => label.selected && label.values);\n    if (searchTerm) {\n      selectedLabels = selectedLabels.map((label) => {\n        const searchResults = label.values!.filter((value) => {\n          // Always return selected values\n          if (value.selected) {\n            value.highlightParts = undefined;\n            return true;\n          }\n          const fuzzyMatchResult = fuzzyMatch(value.name.toLowerCase(), searchTerm.toLowerCase());\n          if (fuzzyMatchResult.found) {\n            value.highlightParts = fuzzyMatchResult.ranges;\n            value.order = fuzzyMatchResult.distance;\n            return true;\n          } else {\n            return false;\n          }\n        });\n        return {\n          ...label,\n          values: sortBy(searchResults, (value) => (value.selected ? -Infinity : value.order)),\n        };\n      });\n    } else {\n      // Clear highlight parts when searchTerm is cleared\n      selectedLabels = this.state.labels\n        .filter((label) => label.selected && label.values)\n        .map((label) => ({\n          ...label,\n          values: label?.values ? label.values.map((value) => ({ ...value, highlightParts: undefined })) : [],\n        }));\n    }\n\n    return (\n      <div className={styles.wrapper}>\n        <div className={styles.section}>\n          <Label description=\"Which labels would you like to consider for your search?\">\n            1. Select labels to search in\n          </Label>\n          <div className={styles.list}>\n            {labels.map((label) => (\n              <LokiLabel\n                key={label.name}\n                name={label.name}\n                loading={label.loading}\n                active={label.selected}\n                hidden={label.hidden}\n                facets={label.facets}\n                onClick={this.onClickLabel}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <Label description=\"Choose the label values that you would like to use for the query. Use the search field to find values across selected labels.\">\n            2. Find values for the selected labels\n          </Label>\n          <div>\n            <Input onChange={this.onChangeSearch} aria-label=\"Filter expression for values\" value={searchTerm} />\n          </div>\n          <div className={styles.valueListArea}>\n            {selectedLabels.map((label) => (\n              <div role=\"list\" key={label.name} className={styles.valueListWrapper}>\n                <div className={styles.valueTitle} aria-label={`Values for ${label.name}`}>\n                  <LokiLabel\n                    name={label.name}\n                    loading={label.loading}\n                    active={label.selected}\n                    hidden={label.hidden}\n                    //If no facets, we want to show number of all label values\n                    facets={label.facets || label.values?.length}\n                    onClick={this.onClickLabel}\n                  />\n                </div>\n                <FixedSizeList\n                  height={200}\n                  itemCount={label.values?.length || 0}\n                  itemSize={28}\n                  itemKey={(i) => (label.values as FacettableValue[])[i].name}\n                  width={200}\n                  className={styles.valueList}\n                >\n                  {({ index, style }) => {\n                    const value = label.values?.[index];\n                    if (!value) {\n                      return null;\n                    }\n                    return (\n                      <div style={style}>\n                        <LokiLabel\n                          name={label.name}\n                          value={value?.name}\n                          active={value?.selected}\n                          highlightParts={value?.highlightParts}\n                          onClick={this.onClickValue}\n                          searchTerm={searchTerm}\n                        />\n                      </div>\n                    );\n                  }}\n                </FixedSizeList>\n              </div>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <Label>3. Resulting selector</Label>\n          <div aria-label=\"selector\" className={styles.selector}>\n            {selector}\n          </div>\n          {validationStatus && <div className={styles.validationStatus}>{validationStatus}</div>}\n          <HorizontalGroup>\n            <Button aria-label=\"Use selector as logs button\" disabled={empty} onClick={this.onClickRunLogsQuery}>\n              Show logs\n            </Button>\n            <Button\n              aria-label=\"Use selector as metrics button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickRunMetricsQuery}\n            >\n              Show logs rate\n            </Button>\n            <Button\n              aria-label=\"Validate submit button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickValidate}\n            >\n              Validate selector\n            </Button>\n            <Button aria-label=\"Selector clear button\" variant=\"secondary\" onClick={this.onClickClear}>\n              Clear\n            </Button>\n            <div className={cx(styles.status, (status || error) && styles.statusShowing)}>\n              <span className={error ? styles.error : ''}>{error || status}</span>\n            </div>\n          </HorizontalGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const LokiLabelBrowser = withTheme2(UnthemedLokiLabelBrowser);\n"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,KAAP,MAAmC,OAAnC;AACA,SAASC,aAAT,QAA8B,cAA9B;AAGA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SACEC,MADF,EAGEC,eAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,kBANF,EAOEC,UAPF,EAQEC,YAAY,IAAIC,SARlB,EASEC,UATF,QAUO,aAVP;AAcA,SAASC,+BAAT,EAA0CC,+BAA1C,QAAiF,mBAAjF,C,CAEA;;;;AACA,MAAMC,eAAe,GAAG,IAAxB;AACA,MAAMC,eAAe,GAAG,KAAxB;AACA,MAAMC,eAAe,GAAG,CAAxB;AACA,MAAMC,cAAc,GAAG,IAAvB;AAuCA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA0D;EAC/D,MAAMC,cAAc,GAAG,EAAvB;;EACA,KAAK,MAAMC,KAAX,IAAoBF,MAApB,EAA4B;IAC1B,IAAIE,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACE,MAAxB,IAAkCF,KAAK,CAACE,MAAN,CAAaC,MAAb,GAAsB,CAA5D,EAA+D;MAC7D,MAAMC,cAAc,GAAGJ,KAAK,CAACE,MAAN,CAAaG,MAAb,CAAqBC,KAAD,IAAWA,KAAK,CAACL,QAArC,EAA+CM,GAA/C,CAAoDD,KAAD,IAAWA,KAAK,CAACE,IAApE,CAAvB;;MACA,IAAIJ,cAAc,CAACD,MAAf,GAAwB,CAA5B,EAA+B;QAC7BJ,cAAc,CAACU,IAAf,CAAqB,GAAET,KAAK,CAACQ,IAAK,MAAKJ,cAAc,CAACG,GAAf,CAAmBf,+BAAnB,EAAoDkB,IAApD,CAAyD,GAAzD,CAA8D,GAArG;MACD,CAFD,MAEO,IAAIN,cAAc,CAACD,MAAf,KAA0B,CAA9B,EAAiC;QACtCJ,cAAc,CAACU,IAAf,CAAqB,GAAET,KAAK,CAACQ,IAAK,KAAIjB,+BAA+B,CAACa,cAAc,CAAC,CAAD,CAAf,CAAoB,GAAzF;MACD;IACF;EACF;;EACD,OAAO,CAAC,GAAD,EAAML,cAAc,CAACW,IAAf,CAAoB,GAApB,CAAN,EAAgC,GAAhC,EAAqCA,IAArC,CAA0C,EAA1C,CAAP;AACD;AAED,OAAO,SAASC,WAAT,CACLb,MADK,EAELc,cAFK,EAGLC,YAHK,EAIc;EACnB,OAAOf,MAAM,CAACS,GAAP,CAAYP,KAAD,IAAW;IAC3B,MAAMc,cAAc,GAAGF,cAAc,CAACZ,KAAK,CAACQ,IAAP,CAArC;;IACA,IAAIM,cAAJ,EAAoB;MAClB,IAAIC,cAAJ;;MACA,IAAIf,KAAK,CAACQ,IAAN,KAAeK,YAAf,IAA+Bb,KAAK,CAACE,MAAzC,EAAiD;QAC/C;QACAa,cAAc,GAAGf,KAAK,CAACE,MAAvB;MACD,CAHD,MAGO;QAAA;;QACL;QACA,MAAME,cAA2B,GAAG,IAAIY,GAAJ,CAClC,kBAAAhB,KAAK,CAACE,MAAN,gEAAcG,MAAd,CAAsBC,KAAD,IAAWA,KAAK,CAACL,QAAtC,EAAgDM,GAAhD,CAAqDD,KAAD,IAAWA,KAAK,CAACE,IAArE,MAA8E,EAD5C,CAApC,CAFK,CAKL;;QACAO,cAAc,GAAGD,cAAc,CAACP,GAAf,CAAoBD,KAAD,KAAY;UAAEE,IAAI,EAAEF,KAAR;UAAeL,QAAQ,EAAEG,cAAc,CAACa,GAAf,CAAmBX,KAAnB;QAAzB,CAAZ,CAAnB,CAAjB;MACD;;MACD,yBAAYN,KAAZ;QAAmBkB,OAAO,EAAE,KAA5B;QAAmChB,MAAM,EAAEa,cAA3C;QAA2DI,MAAM,EAAEJ,cAAc,CAACZ;MAAlF;IACD,CAhB0B,CAkB3B;;;IACA,yBAAYH,KAAZ;MAAmBkB,OAAO,EAAE,KAA5B;MAAmCE,MAAM,EAAE,CAACN,cAA5C;MAA4DZ,MAAM,EAAEmB,SAApE;MAA+EF,MAAM,EAAE;IAAvF;EACD,CApBM,CAAP;AAqBD;;AAED,MAAMG,SAAS,GAAIC,KAAD,KAA2B;EAC3CC,OAAO,EAAEhD,GAAI;AACf,wBAAwB+C,KAAK,CAACE,MAAN,CAAaC,UAAb,CAAwBC,SAAU;AAC1D,eAAeJ,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB;AAChC;AACA,GAL6C;EAM3CC,IAAI,EAAErD,GAAI;AACZ,kBAAkB+C,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB;AACnC;AACA;AACA;AACA;AACA,GAZ6C;EAa3CE,OAAO,EAAEtD,GAAI;AACf;AACA,gBAAgB+C,KAAK,CAACK,OAAN,CAAc,CAAd,EAAiB,CAAjB,CAAoB;AACpC;AACA;AACA,GAlB6C;EAmB3CG,QAAQ,EAAEvD,GAAI;AAChB,mBAAmB+C,KAAK,CAACS,UAAN,CAAiBC,mBAAoB;AACxD,qBAAqBV,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB;AACtC,GAtB6C;EAuB3CM,MAAM,EAAE1D,GAAI;AACd,eAAe+C,KAAK,CAACK,OAAN,CAAc,GAAd,CAAmB;AAClC,aAAaL,KAAK,CAACE,MAAN,CAAaU,IAAb,CAAkBR,SAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GApC6C;EAqC3CS,aAAa,EAAE5D,GAAI;AACrB;AACA,GAvC6C;EAwC3C6D,KAAK,EAAE7D,GAAI;AACb,aAAa+C,KAAK,CAACE,MAAN,CAAaY,KAAb,CAAmBC,IAAK;AACrC,GA1C6C;EA2C3CC,SAAS,EAAE/D,GAAI;AACjB,oBAAoB+C,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB;AACrC,GA7C6C;EA8C3CY,gBAAgB,EAAEhE,GAAI;AACxB,6BAA6B+C,KAAK,CAACE,MAAN,CAAagB,MAAb,CAAoBC,MAAO;AACxD,cAAcnB,KAAK,CAACK,OAAN,CAAc,CAAd,EAAiB,CAAjB,CAAoB;AAClC,eAAeL,KAAK,CAACK,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAA0B;AACzC,GAlD6C;EAmD3Ce,aAAa,EAAEnE,GAAI;AACrB;AACA;AACA,kBAAkB+C,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB;AACnC,GAvD6C;EAwD3CgB,UAAU,EAAEpE,GAAI;AAClB,oBAAoB+C,KAAK,CAACK,OAAN,CAAc,GAAd,CAAmB;AACvC,qBAAqBL,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB;AACtC,GA3D6C;EA4D3CiB,gBAAgB,EAAErE,GAAI;AACxB,eAAe+C,KAAK,CAACK,OAAN,CAAc,GAAd,CAAmB;AAClC,qBAAqBL,KAAK,CAACK,OAAN,CAAc,CAAd,CAAiB;AACtC,aAAaL,KAAK,CAACE,MAAN,CAAaU,IAAb,CAAkBW,WAAY;AAC3C;AACA;AACA;AACA;AAnE6C,CAA3B,CAAlB;;AAsEA,OAAO,MAAMC,wBAAN,SAAuCpE,KAAK,CAACqE,SAA7C,CAAmF;EAAA;IAAA;;IAAA,+BAClE;MACpBlD,MAAM,EAAE,EADY;MAEpBmD,UAAU,EAAE,EAFQ;MAGpBf,MAAM,EAAE,OAHY;MAIpBG,KAAK,EAAE,EAJa;MAKpBQ,gBAAgB,EAAE;IALE,CADkE;;IAAA,wCAStEK,KAAD,IAA0C;MACzD,KAAKC,QAAL,CAAc;QAAEF,UAAU,EAAEC,KAAK,CAACE,MAAN,CAAa9C;MAA3B,CAAd;IACD,CAXuF;;IAAA,6CAalE,MAAM;MAC1BzB,iBAAiB,CAAC,iCAAD,EAAoC;QACnDwE,GAAG,EAAE,KAAKC,KAAL,CAAWD,GADmC;QAEnDE,SAAS,EAAE;MAFwC,CAApC,CAAjB;MAIA,MAAMxB,QAAQ,GAAGlC,aAAa,CAAC,KAAK2D,KAAL,CAAW1D,MAAZ,CAA9B;MACA,KAAKwD,KAAL,CAAWG,QAAX,CAAoB1B,QAApB;IACD,CApBuF;;IAAA,gDAsB/D,MAAM;MAC7BlD,iBAAiB,CAAC,iCAAD,EAAoC;QACnDwE,GAAG,EAAE,KAAKC,KAAL,CAAWD,GADmC;QAEnDE,SAAS,EAAE;MAFwC,CAApC,CAAjB;MAIA,MAAMxB,QAAQ,GAAGlC,aAAa,CAAC,KAAK2D,KAAL,CAAW1D,MAAZ,CAA9B;MACA,MAAM4D,KAAK,GAAI,QAAO3B,QAAS,gBAA/B;MACA,KAAKuB,KAAL,CAAWG,QAAX,CAAoBC,KAApB;IACD,CA9BuF;;IAAA,sCAgCzE,MAAM;MACnB7E,iBAAiB,CAAC,iCAAD,EAAoC;QACnDwE,GAAG,EAAE,KAAKC,KAAL,CAAWD,GADmC;QAEnDE,SAAS,EAAE;MAFwC,CAApC,CAAjB;MAIA,KAAKJ,QAAL,CAAeK,KAAD,IAAW;QACvB,MAAM1D,MAAyB,GAAG0D,KAAK,CAAC1D,MAAN,CAAaS,GAAb,CAAkBP,KAAD,sBAC9CA,KAD8C;UAEjDE,MAAM,EAAEmB,SAFyC;UAGjDpB,QAAQ,EAAE,KAHuC;UAIjDiB,OAAO,EAAE,KAJwC;UAKjDE,MAAM,EAAE,KALyC;UAMjDD,MAAM,EAAEE;QANyC,EAAjB,CAAlC;QAQA,OAAO;UAAEvB,MAAF;UAAUmD,UAAU,EAAE,EAAtB;UAA0Bf,MAAM,EAAE,EAAlC;UAAsCG,KAAK,EAAE,EAA7C;UAAiDQ,gBAAgB,EAAE;QAAnE,CAAP;MACD,CAVD;MAWA,KAAKS,KAAL,CAAWK,oBAAX;IACD,CAjDuF;;IAAA,sCAmDzE,CAACnD,IAAD,EAAeF,KAAf,EAA0C4C,KAA1C,KAAmF;MAChG,MAAMlD,KAAK,GAAG,KAAKwD,KAAL,CAAW1D,MAAX,CAAkB8D,IAAlB,CAAwBC,CAAD,IAAOA,CAAC,CAACrD,IAAF,KAAWA,IAAzC,CAAd;;MACA,IAAI,CAACR,KAAL,EAAY;QACV;MACD,CAJ+F,CAKhG;;;MACA,MAAMC,QAAQ,GAAG,CAACD,KAAK,CAACC,QAAxB;MACA,IAAI6D,SAAmC,GAAG;QAAE7D;MAAF,CAA1C;;MACA,IAAID,KAAK,CAACE,MAAN,IAAgB,CAACD,QAArB,EAA+B;QAC7B;QACA,MAAMC,MAAM,GAAGF,KAAK,CAACE,MAAN,CAAaK,GAAb,CAAkBD,KAAD,sBAAiBA,KAAjB;UAAwBL,QAAQ,EAAE;QAAlC,EAAjB,CAAf;QACA6D,SAAS,qBAAQA,SAAR;UAAmB3C,MAAM,EAAE,CAA3B;UAA8BjB;QAA9B,EAAT;MACD,CAZ+F,CAahG;;;MACA,KAAKiD,QAAL,CAAc;QAAEF,UAAU,EAAE;MAAd,CAAd;MACA,KAAKc,gBAAL,CAAsBvD,IAAtB,EAA4BsD,SAA5B,EAAuC,EAAvC,EAA2C,MAAM,KAAKE,mBAAL,CAAyBxD,IAAzB,CAAjD;IACD,CAnEuF;;IAAA,sCAqEzE,CAACA,IAAD,EAAeF,KAAf,EAA0C4C,KAA1C,KAAmF;MAChG,MAAMlD,KAAK,GAAG,KAAKwD,KAAL,CAAW1D,MAAX,CAAkB8D,IAAlB,CAAwBC,CAAD,IAAOA,CAAC,CAACrD,IAAF,KAAWA,IAAzC,CAAd;;MACA,IAAI,CAACR,KAAD,IAAU,CAACA,KAAK,CAACE,MAArB,EAA6B;QAC3B;MACD,CAJ+F,CAKhG;;;MACA,KAAKiD,QAAL,CAAc;QAAEF,UAAU,EAAE;MAAd,CAAd,EANgG,CAOhG;;MACA,MAAM/C,MAAM,GAAGF,KAAK,CAACE,MAAN,CAAaK,GAAb,CAAkB0D,CAAD,sBAAaA,CAAb;QAAgBhE,QAAQ,EAAEgE,CAAC,CAACzD,IAAF,KAAWF,KAAX,GAAmB,CAAC2D,CAAC,CAAChE,QAAtB,GAAiCgE,CAAC,CAAChE;MAA7D,EAAjB,CAAf;MACA,KAAK8D,gBAAL,CAAsBvD,IAAtB,EAA4B;QAAEN;MAAF,CAA5B,EAAwC,EAAxC,EAA4C,MAAM,KAAKgE,WAAL,CAAiB1D,IAAjB,CAAlD;IACD,CA/EuF;;IAAA,yCAiFtE,MAAM;MACtB,MAAMuB,QAAQ,GAAGlC,aAAa,CAAC,KAAK2D,KAAL,CAAW1D,MAAZ,CAA9B;MACA,KAAKqE,gBAAL,CAAsBpC,QAAtB;IACD,CApFuF;;IAAA,qCAmJzElB,YAAD,IAA2B;MACvC,MAAMkB,QAAQ,GAAGlC,aAAa,CAAC,KAAK2D,KAAL,CAAW1D,MAAZ,CAA9B;;MACA,IAAIiC,QAAQ,KAAKnC,cAAjB,EAAiC;QAC/B;QACA,MAAME,MAAyB,GAAG,KAAK0D,KAAL,CAAW1D,MAAX,CAAkBS,GAAlB,CAAuBP,KAAD,IAAW;UACjE,yBAAYA,KAAZ;YAAmBmB,MAAM,EAAE,CAA3B;YAA8BjB,MAAM,EAAEmB,SAAtC;YAAiDD,MAAM,EAAE;UAAzD;QACD,CAFiC,CAAlC;QAGA,KAAK+B,QAAL,CAAc;UAAErD;QAAF,CAAd,EAA0B,MAAM;UAC9B;UACA,KAAK0D,KAAL,CAAW1D,MAAX,CAAkBsE,OAAlB,CAA2BpE,KAAD,IAAWA,KAAK,CAACC,QAAN,IAAkB,KAAKoE,WAAL,CAAiBrE,KAAK,CAACQ,IAAvB,EAA6BuB,QAA7B,CAAvD;QACD,CAHD;MAID,CATD,MASO;QACL;QACA,KAAKuC,WAAL,CAAiBvC,QAAjB,EAA2BlB,YAA3B;MACD;IACF,CAlKuF;EAAA;;EAsFxFkD,gBAAgB,CAACvD,IAAD,EAAe+D,aAAf,EAAwDrC,MAAM,GAAG,EAAjE,EAAqEsC,EAArE,EAAsF;IACpG,KAAKrB,QAAL,CAAeK,KAAD,IAAW;MACvB,MAAM1D,MAAyB,GAAG0D,KAAK,CAAC1D,MAAN,CAAaS,GAAb,CAAkBP,KAAD,IAAW;QAC5D,IAAIA,KAAK,CAACQ,IAAN,KAAeA,IAAnB,EAAyB;UACvB,yBAAYR,KAAZ,EAAsBuE,aAAtB;QACD;;QACD,OAAOvE,KAAP;MACD,CALiC,CAAlC,CADuB,CAOvB;;MACA,MAAMqC,KAAK,GAAGH,MAAM,GAAG,EAAH,GAAQsB,KAAK,CAACnB,KAAlC;MACA,OAAO;QAAEvC,MAAF;QAAUoC,MAAV;QAAkBG,KAAlB;QAAyBQ,gBAAgB,EAAE;MAA3C,CAAP;IACD,CAVD,EAUG2B,EAVH;EAWD;;EAEDC,iBAAiB,GAAG;IAClB,MAAM;MAAEC,gBAAF;MAAoBC,UAAU,GAAGhF,eAAjC;MAAkDiF;IAAlD,IAAqE,KAAKtB,KAAhF;;IACA,IAAIoB,gBAAJ,EAAsB;MACpB,MAAM3E,cAAwB,GAAG6E,cAAjC;MACAF,gBAAgB,CAACG,KAAjB,GAAyBC,IAAzB,CAA8B,MAAM;QAClC,IAAIC,SAAmB,GAAGL,gBAAgB,CAACM,YAAjB,EAA1B;;QACA,IAAID,SAAS,CAAC5E,MAAV,GAAmBV,eAAvB,EAAwC;UACtC,MAAM4C,KAAK,GAAI,uCAAsC5C,eAAgB,OAAMsF,SAAS,CAAC5E,MAAO,GAA5F;UACA4E,SAAS,GAAGA,SAAS,CAACE,KAAV,CAAgB,CAAhB,EAAmBxF,eAAnB,CAAZ;UACA,KAAK0D,QAAL,CAAc;YAAEd;UAAF,CAAd;QACD,CANiC,CAOlC;;;QACA,MAAMvC,MAAyB,GAAGiF,SAAS,CAACxE,GAAV,CAAc,CAACP,KAAD,EAAQkF,CAAR,EAAWC,GAAX,MAAoB;UAClE3E,IAAI,EAAER,KAD4D;UAElEC,QAAQ,EAAGkF,GAAG,CAAChF,MAAJ,IAAcwE,UAAd,IAA4B5E,cAAc,CAACI,MAAf,KAA0B,CAAvD,IAA6DJ,cAAc,CAACqF,QAAf,CAAwBpF,KAAxB,CAFL;UAGlEkB,OAAO,EAAE;QAHyD,CAApB,CAAd,CAAlC,CARkC,CAalC;;QACA,KAAKiC,QAAL,CAAc;UAAErD;QAAF,CAAd,EAA0B,MAAM;UAC9B,KAAK0D,KAAL,CAAW1D,MAAX,CAAkBsE,OAAlB,CAA2BpE,KAAD,IAAW;YACnC,IAAIA,KAAK,CAACC,QAAV,EAAoB;cAClB,KAAKoE,WAAL,CAAiBrE,KAAK,CAACQ,IAAvB,EAA6BZ,cAA7B;YACD;UACF,CAJD;QAKD,CAND;MAOD,CArBD;IAsBD;EACF;;EAEDoE,mBAAmB,CAACxD,IAAD,EAAe;IAChC,MAAMR,KAAK,GAAG,KAAKwD,KAAL,CAAW1D,MAAX,CAAkB8D,IAAlB,CAAwBC,CAAD,IAAOA,CAAC,CAACrD,IAAF,KAAWA,IAAzC,CAAd;;IACA,IAAI,CAACR,KAAL,EAAY;MACV;IACD;;IACD,MAAMD,cAAc,GAAG,KAAKyD,KAAL,CAAW1D,MAAX,CAAkBO,MAAlB,CAA0BL,KAAD,IAAWA,KAAK,CAACC,QAA1C,EAAoDM,GAApD,CAAyDP,KAAD,IAAWA,KAAK,CAACQ,IAAzE,CAAvB;IACA,KAAK8C,KAAL,CAAW+B,mBAAX,CAA+BtF,cAA/B;;IACA,IAAIC,KAAK,CAACC,QAAV,EAAoB;MAClB;MACA,IAAI,CAACD,KAAK,CAACE,MAAX,EAAmB;QACjB,KAAKmE,WAAL,CAAiB7D,IAAjB,EAAuBX,aAAa,CAAC,KAAK2D,KAAL,CAAW1D,MAAZ,CAApC;MACD;IACF,CALD,MAKO;MACL;MACA,KAAKoE,WAAL;IACD;EACF;;EAmBgB,MAAXG,WAAW,CAAC7D,IAAD,EAAeuB,QAAf,EAAiC;IAChD,MAAM;MAAE2C;IAAF,IAAuB,KAAKpB,KAAlC;IACA,KAAKS,gBAAL,CAAsBvD,IAAtB,EAA4B;MAAEU,OAAO,EAAE;IAAX,CAA5B,EAAgD,uBAAsBV,IAAK,EAA3E;;IACA,IAAI;MACF,IAAI8E,SAAS,GAAG,MAAMZ,gBAAgB,CAACa,cAAjB,CAAgC/E,IAAhC,CAAtB,CADE,CAEF;;MACA,IAAIuB,QAAQ,KAAKlC,aAAa,CAAC,KAAK2D,KAAL,CAAW1D,MAAZ,CAA9B,EAAmD;QACjD,KAAKiE,gBAAL,CAAsBvD,IAAtB,EAA4B;UAAEU,OAAO,EAAE;QAAX,CAA5B,EAAgD,EAAhD;QACA;MACD;;MACD,IAAIoE,SAAS,CAACnF,MAAV,GAAmBT,eAAvB,EAAwC;QACtC,MAAM2C,KAAK,GAAI,uBAAsB7B,IAAK,kBAAiBd,eAAgB,OAAM4F,SAAS,CAACnF,MAAO,GAAlG;QACAmF,SAAS,GAAGA,SAAS,CAACL,KAAV,CAAgB,CAAhB,EAAmBvF,eAAnB,CAAZ;QACA,KAAKyD,QAAL,CAAc;UAAEd;QAAF,CAAd;MACD;;MACD,MAAMnC,MAAyB,GAAGoF,SAAS,CAAC/E,GAAV,CAAeD,KAAD,KAAY;QAAEE,IAAI,EAAEF;MAAR,CAAZ,CAAd,CAAlC;MACA,KAAKyD,gBAAL,CAAsBvD,IAAtB,EAA4B;QAAEN,MAAF;QAAUgB,OAAO,EAAE;MAAnB,CAA5B;IACD,CAdD,CAcE,OAAOmB,KAAP,EAAc;MACdmD,OAAO,CAACnD,KAAR,CAAcA,KAAd;IACD;EACF;;EAEgB,MAAXiC,WAAW,CAACvC,QAAD,EAAmBlB,YAAnB,EAA0C;IACzD,MAAM;MAAE6D;IAAF,IAAuB,KAAKpB,KAAlC;;IACA,IAAIzC,YAAJ,EAAkB;MAChB,KAAKkD,gBAAL,CAAsBlD,YAAtB,EAAoC;QAAEK,OAAO,EAAE;MAAX,CAApC,EAAwD,wBAAuBa,QAAS,EAAxF;IACD;;IACD,IAAI;MACF,MAAMnB,cAAc,GAAG,MAAM8D,gBAAgB,CAACe,iBAAjB,CAAmC1D,QAAnC,EAA6C,IAA7C,CAA7B,CADE,CAEF;;MACA,IAAIA,QAAQ,KAAKlC,aAAa,CAAC,KAAK2D,KAAL,CAAW1D,MAAZ,CAA9B,EAAmD;QACjD,IAAIe,YAAJ,EAAkB;UAChB,KAAKkD,gBAAL,CAAsBlD,YAAtB,EAAoC;YAAEK,OAAO,EAAE;UAAX,CAApC;QACD;;QACD;MACD;;MACD,IAAIwE,MAAM,CAACC,IAAP,CAAY/E,cAAZ,EAA4BT,MAA5B,KAAuC,CAA3C,EAA8C;QAC5C,KAAKgD,QAAL,CAAc;UAAEd,KAAK,EAAG,wCAAuCN,QAAS;QAA1D,CAAd;QACA;MACD;;MACD,MAAMjC,MAAyB,GAAGa,WAAW,CAAC,KAAK6C,KAAL,CAAW1D,MAAZ,EAAoBc,cAApB,EAAoCC,YAApC,CAA7C;MACA,KAAKsC,QAAL,CAAc;QAAErD,MAAF;QAAUuC,KAAK,EAAE;MAAjB,CAAd;;MACA,IAAIxB,YAAJ,EAAkB;QAChB,KAAKkD,gBAAL,CAAsBlD,YAAtB,EAAoC;UAAEK,OAAO,EAAE;QAAX,CAApC;MACD;IACF,CAlBD,CAkBE,OAAOmB,KAAP,EAAc;MACdmD,OAAO,CAACnD,KAAR,CAAcA,KAAd;IACD;EACF;;EAEqB,MAAhB8B,gBAAgB,CAACpC,QAAD,EAAmB;IACvC,MAAM;MAAE2C;IAAF,IAAuB,KAAKpB,KAAlC;IACA,KAAKH,QAAL,CAAc;MAAEN,gBAAgB,EAAG,uBAAsBd,QAAS,EAApD;MAAuDM,KAAK,EAAE;IAA9D,CAAd;IACA,MAAMuD,OAAO,GAAG,MAAMlB,gBAAgB,CAACJ,WAAjB,CAA6BvC,QAA7B,CAAtB;IACA,KAAKoB,QAAL,CAAc;MAAEN,gBAAgB,EAAG,sBAAqB+C,OAAO,CAACzF,MAAO;IAAzD,CAAd;EACD;;EAED0F,MAAM,GAAG;IACP,MAAM;MAAEtE;IAAF,IAAY,KAAK+B,KAAvB;IACA,MAAM;MAAExD,MAAF;MAAUmD,UAAV;MAAsBf,MAAtB;MAA8BG,KAA9B;MAAqCQ;IAArC,IAA0D,KAAKW,KAArE;;IACA,IAAI1D,MAAM,CAACK,MAAP,KAAkB,CAAtB,EAAyB;MACvB,kEAAO,KAAC,kBAAD;QAAoB,IAAI,EAAC;MAAzB,EAAP;IACD;;IACD,MAAM2F,MAAM,GAAGxE,SAAS,CAACC,KAAD,CAAxB;IACA,MAAMQ,QAAQ,GAAGlC,aAAa,CAAC,KAAK2D,KAAL,CAAW1D,MAAZ,CAA9B;IACA,MAAMiG,KAAK,GAAGhE,QAAQ,KAAKnC,cAA3B;IAEA,IAAIG,cAAc,GAAGD,MAAM,CAACO,MAAP,CAAeL,KAAD,IAAWA,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACE,MAAjD,CAArB;;IACA,IAAI+C,UAAJ,EAAgB;MACdlD,cAAc,GAAGA,cAAc,CAACQ,GAAf,CAAoBP,KAAD,IAAW;QAC7C,MAAMgG,aAAa,GAAGhG,KAAK,CAACE,MAAN,CAAcG,MAAd,CAAsBC,KAAD,IAAW;UACpD;UACA,IAAIA,KAAK,CAACL,QAAV,EAAoB;YAClBK,KAAK,CAAC2F,cAAN,GAAuB5E,SAAvB;YACA,OAAO,IAAP;UACD;;UACD,MAAM6E,gBAAgB,GAAG5G,UAAU,CAACgB,KAAK,CAACE,IAAN,CAAW2F,WAAX,EAAD,EAA2BlD,UAAU,CAACkD,WAAX,EAA3B,CAAnC;;UACA,IAAID,gBAAgB,CAACE,KAArB,EAA4B;YAC1B9F,KAAK,CAAC2F,cAAN,GAAuBC,gBAAgB,CAACG,MAAxC;YACA/F,KAAK,CAACgG,KAAN,GAAcJ,gBAAgB,CAACK,QAA/B;YACA,OAAO,IAAP;UACD,CAJD,MAIO;YACL,OAAO,KAAP;UACD;QACF,CAdqB,CAAtB;QAeA,yBACKvG,KADL;UAEEE,MAAM,EAAExB,MAAM,CAACsH,aAAD,EAAiB1F,KAAD,IAAYA,KAAK,CAACL,QAAN,GAAiB,CAACuG,QAAlB,GAA6BlG,KAAK,CAACgG,KAA/D;QAFhB;MAID,CApBgB,CAAjB;IAqBD,CAtBD,MAsBO;MACL;MACAvG,cAAc,GAAG,KAAKyD,KAAL,CAAW1D,MAAX,CACdO,MADc,CACNL,KAAD,IAAWA,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACE,MAD5B,EAEdK,GAFc,CAETP,KAAD,sBACAA,KADA;QAEHE,MAAM,EAAEF,KAAK,SAAL,IAAAA,KAAK,WAAL,IAAAA,KAAK,CAAEE,MAAP,GAAgBF,KAAK,CAACE,MAAN,CAAaK,GAAb,CAAkBD,KAAD,sBAAiBA,KAAjB;UAAwB2F,cAAc,EAAE5E;QAAxC,EAAjB,CAAhB,GAAyF;MAF9F,EAFU,CAAjB;IAMD;;IAED,oBACE;MAAK,SAAS,EAAEyE,MAAM,CAACtE,OAAvB;MAAA,wBACE;QAAK,SAAS,EAAEsE,MAAM,CAAChE,OAAvB;QAAA,4CACE,KAAC,KAAD;UAAO,WAAW,EAAC,0DAAnB;UAAA;QAAA,EADF,gBAIE;UAAK,SAAS,EAAEgE,MAAM,CAACjE,IAAvB;UAAA,UACG/B,MAAM,CAACS,GAAP,CAAYP,KAAD,iBACV,KAAC,SAAD;YAEE,IAAI,EAAEA,KAAK,CAACQ,IAFd;YAGE,OAAO,EAAER,KAAK,CAACkB,OAHjB;YAIE,MAAM,EAAElB,KAAK,CAACC,QAJhB;YAKE,MAAM,EAAED,KAAK,CAACoB,MALhB;YAME,MAAM,EAAEpB,KAAK,CAACmB,MANhB;YAOE,OAAO,EAAE,KAAKsF;UAPhB,GACOzG,KAAK,CAACQ,IADb,CADD;QADH,EAJF;MAAA,EADF,eAmBE;QAAK,SAAS,EAAEsF,MAAM,CAAChE,OAAvB;QAAA,8CACE,KAAC,KAAD;UAAO,WAAW,EAAC,+HAAnB;UAAA;QAAA,EADF,gBAIE;UAAA,uBACE,KAAC,KAAD;YAAO,QAAQ,EAAE,KAAK4E,cAAtB;YAAsC,cAAW,8BAAjD;YAAgF,KAAK,EAAEzD;UAAvF;QADF,EAJF,eAOE;UAAK,SAAS,EAAE6C,MAAM,CAACnD,aAAvB;UAAA,UACG5C,cAAc,CAACQ,GAAf,CAAoBP,KAAD;YAAA;;YAAA,oBAClB;cAAK,IAAI,EAAC,MAAV;cAAkC,SAAS,EAAE8F,MAAM,CAACtD,gBAApD;cAAA,wBACE;gBAAK,SAAS,EAAEsD,MAAM,CAAClD,UAAvB;gBAAmC,cAAa,cAAa5C,KAAK,CAACQ,IAAK,EAAxE;gBAAA,uBACE,KAAC,SAAD;kBACE,IAAI,EAAER,KAAK,CAACQ,IADd;kBAEE,OAAO,EAAER,KAAK,CAACkB,OAFjB;kBAGE,MAAM,EAAElB,KAAK,CAACC,QAHhB;kBAIE,MAAM,EAAED,KAAK,CAACoB,MAJhB,CAKE;kBALF;kBAME,MAAM,EAAEpB,KAAK,CAACmB,MAAN,uBAAgBnB,KAAK,CAACE,MAAtB,mDAAgB,eAAcC,MAA9B,CANV;kBAOE,OAAO,EAAE,KAAKsG;gBAPhB;cADF,EADF,eAYE,KAAC,aAAD;gBACE,MAAM,EAAE,GADV;gBAEE,SAAS,EAAE,mBAAAzG,KAAK,CAACE,MAAN,kEAAcC,MAAd,KAAwB,CAFrC;gBAGE,QAAQ,EAAE,EAHZ;gBAIE,OAAO,EAAG+E,CAAD,IAAQlF,KAAK,CAACE,MAAP,CAAoCgF,CAApC,EAAuC1E,IAJzD;gBAKE,KAAK,EAAE,GALT;gBAME,SAAS,EAAEsF,MAAM,CAACvD,SANpB;gBAAA,UAQG,CAAC;kBAAEoE,KAAF;kBAASC;gBAAT,CAAD,KAAsB;kBAAA;;kBACrB,MAAMtG,KAAK,qBAAGN,KAAK,CAACE,MAAT,mDAAG,eAAeyG,KAAf,CAAd;;kBACA,IAAI,CAACrG,KAAL,EAAY;oBACV,OAAO,IAAP;kBACD;;kBACD,oBACE;oBAAK,KAAK,EAAEsG,KAAZ;oBAAA,uBACE,KAAC,SAAD;sBACE,IAAI,EAAE5G,KAAK,CAACQ,IADd;sBAEE,KAAK,EAAEF,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEE,IAFhB;sBAGE,MAAM,EAAEF,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEL,QAHjB;sBAIE,cAAc,EAAEK,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAE2F,cAJzB;sBAKE,OAAO,EAAE,KAAKY,YALhB;sBAME,UAAU,EAAE5D;oBANd;kBADF,EADF;gBAYD;cAzBH,EAZF;YAAA,GAAsBjD,KAAK,CAACQ,IAA5B,CADkB;UAAA,CAAnB;QADH,EAPF;MAAA,EAnBF,eAuEE;QAAK,SAAS,EAAEsF,MAAM,CAAChE,OAAvB;QAAA,8CACE,KAAC,KAAD;UAAA;QAAA,EADF,gBAEE;UAAK,cAAW,UAAhB;UAA2B,SAAS,EAAEgE,MAAM,CAAC/D,QAA7C;UAAA,UACGA;QADH,EAFF,EAKGc,gBAAgB,iBAAI;UAAK,SAAS,EAAEiD,MAAM,CAACjD,gBAAvB;UAAA,UAA0CA;QAA1C,EALvB,eAME,MAAC,eAAD;UAAA,wBACE,KAAC,MAAD;YAAQ,cAAW,6BAAnB;YAAiD,QAAQ,EAAEkD,KAA3D;YAAkE,OAAO,EAAE,KAAKe,mBAAhF;YAAA;UAAA,EADF,eAIE,KAAC,MAAD;YACE,cAAW,gCADb;YAEE,OAAO,EAAC,WAFV;YAGE,QAAQ,EAAEf,KAHZ;YAIE,OAAO,EAAE,KAAKgB,sBAJhB;YAAA;UAAA,EAJF,eAYE,KAAC,MAAD;YACE,cAAW,wBADb;YAEE,OAAO,EAAC,WAFV;YAGE,QAAQ,EAAEhB,KAHZ;YAIE,OAAO,EAAE,KAAKiB,eAJhB;YAAA;UAAA,EAZF,eAoBE,KAAC,MAAD;YAAQ,cAAW,uBAAnB;YAA2C,OAAO,EAAC,WAAnD;YAA+D,OAAO,EAAE,KAAKC,YAA7E;YAAA;UAAA,EApBF,eAuBE;YAAK,SAAS,EAAExI,EAAE,CAACqH,MAAM,CAAC5D,MAAR,EAAgB,CAACA,MAAM,IAAIG,KAAX,KAAqByD,MAAM,CAAC1D,aAA5C,CAAlB;YAAA,uBACE;cAAM,SAAS,EAAEC,KAAK,GAAGyD,MAAM,CAACzD,KAAV,GAAkB,EAAxC;cAAA,UAA6CA,KAAK,IAAIH;YAAtD;UADF,EAvBF;QAAA,EANF;MAAA,EAvEF;IAAA,EADF;EA4GD;;AApXuF;AAuX1F,OAAO,MAAMgF,gBAAgB,GAAG/H,UAAU,CAAC4D,wBAAD,CAAnC"},"metadata":{},"sourceType":"module"}