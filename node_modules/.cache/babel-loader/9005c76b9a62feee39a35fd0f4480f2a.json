{"ast":null,"code":"import { cloneDeep, groupBy } from 'lodash';\nimport { forkJoin, from, of } from 'rxjs';\nimport { catchError, map, mergeAll, mergeMap, reduce, toArray } from 'rxjs/operators';\nimport { DataSourceApi, LoadingState } from '@grafana/data';\nimport { getDataSourceSrv, toDataQueryError } from '@grafana/runtime';\nexport const MIXED_DATASOURCE_NAME = '-- Mixed --';\nexport class MixedDatasource extends DataSourceApi {\n  constructor(instanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(request) {\n    // Remove any invalid queries\n    const queries = request.targets.filter(t => {\n      var _t$datasource;\n\n      return ((_t$datasource = t.datasource) === null || _t$datasource === void 0 ? void 0 : _t$datasource.uid) !== MIXED_DATASOURCE_NAME;\n    });\n\n    if (!queries.length) {\n      return of({\n        data: []\n      }); // nothing\n    } // Build groups of queries to run in parallel\n\n\n    const sets = groupBy(queries, 'datasource.uid');\n    const mixed = [];\n\n    for (const key in sets) {\n      const targets = sets[key];\n      mixed.push({\n        datasource: getDataSourceSrv().get(targets[0].datasource, request.scopedVars),\n        targets\n      });\n    } // Missing UIDs?\n\n\n    if (!mixed.length) {\n      return of({\n        data: []\n      }); // nothing\n    }\n\n    return this.batchQueries(mixed, request);\n  }\n\n  batchQueries(mixed, request) {\n    const runningQueries = mixed.filter(this.isQueryable).map((query, i) => from(query.datasource).pipe(mergeMap(api => {\n      const dsRequest = cloneDeep(request);\n      dsRequest.requestId = `mixed-${i}-${dsRequest.requestId || ''}`;\n      dsRequest.targets = query.targets;\n      return from(api.query(dsRequest)).pipe(map(response => {\n        return Object.assign({}, response, {\n          data: response.data || [],\n          state: LoadingState.Loading,\n          key: `mixed-${i}-${response.key || ''}`\n        });\n      }), toArray(), catchError(err => {\n        err = toDataQueryError(err);\n        err.message = `${api.name}: ${err.message}`;\n        return of([{\n          data: [],\n          state: LoadingState.Error,\n          error: err,\n          key: `mixed-${i}-${dsRequest.requestId || ''}`\n        }]);\n      }));\n    })));\n    return forkJoin(runningQueries).pipe(flattenResponses(), map(this.finalizeResponses), mergeAll());\n  }\n\n  testDatasource() {\n    return Promise.resolve({});\n  }\n\n  isQueryable(query) {\n    return query && Array.isArray(query.targets) && query.targets.length > 0;\n  }\n\n  finalizeResponses(responses) {\n    const {\n      length\n    } = responses;\n\n    if (length === 0) {\n      return responses;\n    }\n\n    const error = responses.find(response => response.state === LoadingState.Error);\n\n    if (error) {\n      responses.push(error); // adds the first found error entry so error shows up in the panel\n    } else {\n      responses[length - 1].state = LoadingState.Done;\n    }\n\n    return responses;\n  }\n\n}\n\nfunction flattenResponses() {\n  return reduce((all, current) => {\n    return current.reduce((innerAll, innerCurrent) => {\n      innerAll.push.apply(innerAll, innerCurrent);\n      return innerAll;\n    }, all);\n  }, []);\n}","map":{"version":3,"names":["cloneDeep","groupBy","forkJoin","from","of","catchError","map","mergeAll","mergeMap","reduce","toArray","DataSourceApi","LoadingState","getDataSourceSrv","toDataQueryError","MIXED_DATASOURCE_NAME","MixedDatasource","constructor","instanceSettings","query","request","queries","targets","filter","t","datasource","uid","length","data","sets","mixed","key","push","get","scopedVars","batchQueries","runningQueries","isQueryable","i","pipe","api","dsRequest","requestId","response","state","Loading","err","message","name","Error","error","flattenResponses","finalizeResponses","testDatasource","Promise","resolve","Array","isArray","responses","find","Done","all","current","innerAll","innerCurrent","apply"],"sources":["/home/soula/grafana/public/app/plugins/datasource/mixed/MixedDataSource.ts"],"sourcesContent":["import { cloneDeep, groupBy } from 'lodash';\nimport { forkJoin, from, Observable, of, OperatorFunction } from 'rxjs';\nimport { catchError, map, mergeAll, mergeMap, reduce, toArray } from 'rxjs/operators';\n\nimport {\n  DataQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  LoadingState,\n} from '@grafana/data';\nimport { getDataSourceSrv, toDataQueryError } from '@grafana/runtime';\n\nexport const MIXED_DATASOURCE_NAME = '-- Mixed --';\n\nexport interface BatchedQueries {\n  datasource: Promise<DataSourceApi>;\n  targets: DataQuery[];\n}\n\nexport class MixedDatasource extends DataSourceApi<DataQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    // Remove any invalid queries\n    const queries = request.targets.filter((t) => {\n      return t.datasource?.uid !== MIXED_DATASOURCE_NAME;\n    });\n\n    if (!queries.length) {\n      return of({ data: [] } as DataQueryResponse); // nothing\n    }\n\n    // Build groups of queries to run in parallel\n    const sets: { [key: string]: DataQuery[] } = groupBy(queries, 'datasource.uid');\n    const mixed: BatchedQueries[] = [];\n\n    for (const key in sets) {\n      const targets = sets[key];\n\n      mixed.push({\n        datasource: getDataSourceSrv().get(targets[0].datasource, request.scopedVars),\n        targets,\n      });\n    }\n\n    // Missing UIDs?\n    if (!mixed.length) {\n      return of({ data: [] } as DataQueryResponse); // nothing\n    }\n\n    return this.batchQueries(mixed, request);\n  }\n\n  batchQueries(mixed: BatchedQueries[], request: DataQueryRequest<DataQuery>): Observable<DataQueryResponse> {\n    const runningQueries = mixed.filter(this.isQueryable).map((query, i) =>\n      from(query.datasource).pipe(\n        mergeMap((api: DataSourceApi) => {\n          const dsRequest = cloneDeep(request);\n          dsRequest.requestId = `mixed-${i}-${dsRequest.requestId || ''}`;\n          dsRequest.targets = query.targets;\n\n          return from(api.query(dsRequest)).pipe(\n            map((response) => {\n              return {\n                ...response,\n                data: response.data || [],\n                state: LoadingState.Loading,\n                key: `mixed-${i}-${response.key || ''}`,\n              } as DataQueryResponse;\n            }),\n            toArray(),\n            catchError((err) => {\n              err = toDataQueryError(err);\n              err.message = `${api.name}: ${err.message}`;\n\n              return of<DataQueryResponse[]>([\n                {\n                  data: [],\n                  state: LoadingState.Error,\n                  error: err,\n                  key: `mixed-${i}-${dsRequest.requestId || ''}`,\n                },\n              ]);\n            })\n          );\n        })\n      )\n    );\n\n    return forkJoin(runningQueries).pipe(flattenResponses(), map(this.finalizeResponses), mergeAll());\n  }\n\n  testDatasource() {\n    return Promise.resolve({});\n  }\n\n  private isQueryable(query: BatchedQueries): boolean {\n    return query && Array.isArray(query.targets) && query.targets.length > 0;\n  }\n\n  private finalizeResponses(responses: DataQueryResponse[]): DataQueryResponse[] {\n    const { length } = responses;\n\n    if (length === 0) {\n      return responses;\n    }\n\n    const error = responses.find((response) => response.state === LoadingState.Error);\n    if (error) {\n      responses.push(error); // adds the first found error entry so error shows up in the panel\n    } else {\n      responses[length - 1].state = LoadingState.Done;\n    }\n\n    return responses;\n  }\n}\n\nfunction flattenResponses(): OperatorFunction<DataQueryResponse[][], DataQueryResponse[]> {\n  return reduce((all: DataQueryResponse[], current) => {\n    return current.reduce((innerAll, innerCurrent) => {\n      innerAll.push.apply(innerAll, innerCurrent);\n      return innerAll;\n    }, all);\n  }, []);\n}\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,QAAnC;AACA,SAASC,QAAT,EAAmBC,IAAnB,EAAqCC,EAArC,QAAiE,MAAjE;AACA,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,QAA1B,EAAoCC,QAApC,EAA8CC,MAA9C,EAAsDC,OAAtD,QAAqE,gBAArE;AAEA,SAIEC,aAJF,EAMEC,YANF,QAOO,eAPP;AAQA,SAASC,gBAAT,EAA2BC,gBAA3B,QAAmD,kBAAnD;AAEA,OAAO,MAAMC,qBAAqB,GAAG,aAA9B;AAOP,OAAO,MAAMC,eAAN,SAA8BL,aAA9B,CAAuD;EAC5DM,WAAW,CAACC,gBAAD,EAA+C;IACxD,MAAMA,gBAAN;EACD;;EAEDC,KAAK,CAACC,OAAD,EAAsE;IACzE;IACA,MAAMC,OAAO,GAAGD,OAAO,CAACE,OAAR,CAAgBC,MAAhB,CAAwBC,CAAD,IAAO;MAAA;;MAC5C,OAAO,kBAAAA,CAAC,CAACC,UAAF,gEAAcC,GAAd,MAAsBX,qBAA7B;IACD,CAFe,CAAhB;;IAIA,IAAI,CAACM,OAAO,CAACM,MAAb,EAAqB;MACnB,OAAOvB,EAAE,CAAC;QAAEwB,IAAI,EAAE;MAAR,CAAD,CAAT,CADmB,CAC2B;IAC/C,CARwE,CAUzE;;;IACA,MAAMC,IAAoC,GAAG5B,OAAO,CAACoB,OAAD,EAAU,gBAAV,CAApD;IACA,MAAMS,KAAuB,GAAG,EAAhC;;IAEA,KAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAwB;MACtB,MAAMP,OAAO,GAAGO,IAAI,CAACE,GAAD,CAApB;MAEAD,KAAK,CAACE,IAAN,CAAW;QACTP,UAAU,EAAEZ,gBAAgB,GAAGoB,GAAnB,CAAuBX,OAAO,CAAC,CAAD,CAAP,CAAWG,UAAlC,EAA8CL,OAAO,CAACc,UAAtD,CADH;QAETZ;MAFS,CAAX;IAID,CArBwE,CAuBzE;;;IACA,IAAI,CAACQ,KAAK,CAACH,MAAX,EAAmB;MACjB,OAAOvB,EAAE,CAAC;QAAEwB,IAAI,EAAE;MAAR,CAAD,CAAT,CADiB,CAC6B;IAC/C;;IAED,OAAO,KAAKO,YAAL,CAAkBL,KAAlB,EAAyBV,OAAzB,CAAP;EACD;;EAEDe,YAAY,CAACL,KAAD,EAA0BV,OAA1B,EAA+F;IACzG,MAAMgB,cAAc,GAAGN,KAAK,CAACP,MAAN,CAAa,KAAKc,WAAlB,EAA+B/B,GAA/B,CAAmC,CAACa,KAAD,EAAQmB,CAAR,KACxDnC,IAAI,CAACgB,KAAK,CAACM,UAAP,CAAJ,CAAuBc,IAAvB,CACE/B,QAAQ,CAAEgC,GAAD,IAAwB;MAC/B,MAAMC,SAAS,GAAGzC,SAAS,CAACoB,OAAD,CAA3B;MACAqB,SAAS,CAACC,SAAV,GAAuB,SAAQJ,CAAE,IAAGG,SAAS,CAACC,SAAV,IAAuB,EAAG,EAA9D;MACAD,SAAS,CAACnB,OAAV,GAAoBH,KAAK,CAACG,OAA1B;MAEA,OAAOnB,IAAI,CAACqC,GAAG,CAACrB,KAAJ,CAAUsB,SAAV,CAAD,CAAJ,CAA2BF,IAA3B,CACLjC,GAAG,CAAEqC,QAAD,IAAc;QAChB,yBACKA,QADL;UAEEf,IAAI,EAAEe,QAAQ,CAACf,IAAT,IAAiB,EAFzB;UAGEgB,KAAK,EAAEhC,YAAY,CAACiC,OAHtB;UAIEd,GAAG,EAAG,SAAQO,CAAE,IAAGK,QAAQ,CAACZ,GAAT,IAAgB,EAAG;QAJxC;MAMD,CAPE,CADE,EASLrB,OAAO,EATF,EAULL,UAAU,CAAEyC,GAAD,IAAS;QAClBA,GAAG,GAAGhC,gBAAgB,CAACgC,GAAD,CAAtB;QACAA,GAAG,CAACC,OAAJ,GAAe,GAAEP,GAAG,CAACQ,IAAK,KAAIF,GAAG,CAACC,OAAQ,EAA1C;QAEA,OAAO3C,EAAE,CAAsB,CAC7B;UACEwB,IAAI,EAAE,EADR;UAEEgB,KAAK,EAAEhC,YAAY,CAACqC,KAFtB;UAGEC,KAAK,EAAEJ,GAHT;UAIEf,GAAG,EAAG,SAAQO,CAAE,IAAGG,SAAS,CAACC,SAAV,IAAuB,EAAG;QAJ/C,CAD6B,CAAtB,CAAT;MAQD,CAZS,CAVL,CAAP;IAwBD,CA7BO,CADV,CADqB,CAAvB;IAmCA,OAAOxC,QAAQ,CAACkC,cAAD,CAAR,CAAyBG,IAAzB,CAA8BY,gBAAgB,EAA9C,EAAkD7C,GAAG,CAAC,KAAK8C,iBAAN,CAArD,EAA+E7C,QAAQ,EAAvF,CAAP;EACD;;EAED8C,cAAc,GAAG;IACf,OAAOC,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;EACD;;EAEOlB,WAAW,CAAClB,KAAD,EAAiC;IAClD,OAAOA,KAAK,IAAIqC,KAAK,CAACC,OAAN,CAActC,KAAK,CAACG,OAApB,CAAT,IAAyCH,KAAK,CAACG,OAAN,CAAcK,MAAd,GAAuB,CAAvE;EACD;;EAEOyB,iBAAiB,CAACM,SAAD,EAAsD;IAC7E,MAAM;MAAE/B;IAAF,IAAa+B,SAAnB;;IAEA,IAAI/B,MAAM,KAAK,CAAf,EAAkB;MAChB,OAAO+B,SAAP;IACD;;IAED,MAAMR,KAAK,GAAGQ,SAAS,CAACC,IAAV,CAAgBhB,QAAD,IAAcA,QAAQ,CAACC,KAAT,KAAmBhC,YAAY,CAACqC,KAA7D,CAAd;;IACA,IAAIC,KAAJ,EAAW;MACTQ,SAAS,CAAC1B,IAAV,CAAekB,KAAf,EADS,CACc;IACxB,CAFD,MAEO;MACLQ,SAAS,CAAC/B,MAAM,GAAG,CAAV,CAAT,CAAsBiB,KAAtB,GAA8BhC,YAAY,CAACgD,IAA3C;IACD;;IAED,OAAOF,SAAP;EACD;;AAlG2D;;AAqG9D,SAASP,gBAAT,GAA0F;EACxF,OAAO1C,MAAM,CAAC,CAACoD,GAAD,EAA2BC,OAA3B,KAAuC;IACnD,OAAOA,OAAO,CAACrD,MAAR,CAAe,CAACsD,QAAD,EAAWC,YAAX,KAA4B;MAChDD,QAAQ,CAAC/B,IAAT,CAAciC,KAAd,CAAoBF,QAApB,EAA8BC,YAA9B;MACA,OAAOD,QAAP;IACD,CAHM,EAGJF,GAHI,CAAP;EAID,CALY,EAKV,EALU,CAAb;AAMD"},"metadata":{},"sourceType":"module"}