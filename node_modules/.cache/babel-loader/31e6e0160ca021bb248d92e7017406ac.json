{"ast":null,"code":"var _thead;\n\nimport { css } from '@emotion/css';\nimport cx from 'classnames';\nimport React, { useState } from 'react';\nimport { ArrayVector, FieldType } from '@grafana/data';\nimport { LegacyForms } from '@grafana/ui';\nimport { getFieldLinksForExplore } from '../../../../features/explore/utils/links';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst {\n  FormField\n} = LegacyForms;\nexport const DebugSection = props => {\n  const {\n    derivedFields,\n    className\n  } = props;\n  const [debugText, setDebugText] = useState('');\n  let debugFields = [];\n\n  if (debugText && derivedFields) {\n    debugFields = makeDebugFields(derivedFields, debugText);\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsx(FormField, {\n      labelWidth: 12,\n      label: 'Debug log message',\n      inputEl: /*#__PURE__*/_jsx(\"textarea\", {\n        placeholder: 'Paste an example log line here to test the regular expressions of your derived fields',\n        className: cx('gf-form-input gf-form-textarea', css`\n                width: 100%;\n              `),\n        value: debugText,\n        onChange: event => setDebugText(event.currentTarget.value)\n      })\n    }), !!debugFields.length && /*#__PURE__*/_jsx(DebugFields, {\n      fields: debugFields\n    })]\n  });\n};\n\nconst DebugFields = ({\n  fields\n}) => {\n  return /*#__PURE__*/_jsxs(\"table\", {\n    className: 'filter-table',\n    children: [_thead || (_thead = /*#__PURE__*/_jsx(\"thead\", {\n      children: /*#__PURE__*/_jsxs(\"tr\", {\n        children: [/*#__PURE__*/_jsx(\"th\", {\n          children: \"Name\"\n        }), /*#__PURE__*/_jsx(\"th\", {\n          children: \"Value\"\n        }), /*#__PURE__*/_jsx(\"th\", {\n          children: \"Url\"\n        })]\n      })\n    })), /*#__PURE__*/_jsx(\"tbody\", {\n      children: fields.map(field => {\n        let value = field.value;\n\n        if (field.error) {\n          value = field.error.message;\n        } else if (field.href) {\n          value = /*#__PURE__*/_jsx(\"a\", {\n            href: field.href,\n            children: value\n          });\n        }\n\n        return /*#__PURE__*/_jsxs(\"tr\", {\n          children: [/*#__PURE__*/_jsx(\"td\", {\n            children: field.name\n          }), /*#__PURE__*/_jsx(\"td\", {\n            children: value\n          }), /*#__PURE__*/_jsx(\"td\", {\n            children: field.href ? /*#__PURE__*/_jsx(\"a\", {\n              href: field.href,\n              children: field.href\n            }) : ''\n          })]\n        }, `${field.name}=${field.value}`);\n      })\n    })]\n  });\n};\n\nfunction makeDebugFields(derivedFields, debugText) {\n  return derivedFields.filter(field => field.name && field.matcherRegex).map(field => {\n    try {\n      const testMatch = debugText.match(field.matcherRegex);\n      const value = testMatch && testMatch[1];\n      let link = null;\n\n      if (field.url && value) {\n        link = getFieldLinksForExplore({\n          field: {\n            name: '',\n            type: FieldType.string,\n            values: new ArrayVector([value]),\n            config: {\n              links: [{\n                title: '',\n                url: field.url\n              }]\n            }\n          },\n          rowIndex: 0,\n          range: {}\n        })[0];\n      }\n\n      return {\n        name: field.name,\n        value: value || '<no match>',\n        href: link && link.href\n      };\n    } catch (error) {\n      return {\n        name: field.name,\n        error\n      };\n    }\n  });\n}","map":{"version":3,"names":["css","cx","React","useState","ArrayVector","FieldType","LegacyForms","getFieldLinksForExplore","FormField","DebugSection","props","derivedFields","className","debugText","setDebugText","debugFields","makeDebugFields","event","currentTarget","value","length","DebugFields","fields","map","field","error","message","href","name","filter","matcherRegex","testMatch","match","link","url","type","string","values","config","links","title","rowIndex","range"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/configuration/DebugSection.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport cx from 'classnames';\nimport React, { useState } from 'react';\n\nimport { ArrayVector, Field, FieldType, LinkModel } from '@grafana/data';\nimport { LegacyForms } from '@grafana/ui';\n\nimport { getFieldLinksForExplore } from '../../../../features/explore/utils/links';\nimport { DerivedFieldConfig } from '../types';\n\nconst { FormField } = LegacyForms;\n\ntype Props = {\n  derivedFields?: DerivedFieldConfig[];\n  className?: string;\n};\nexport const DebugSection = (props: Props) => {\n  const { derivedFields, className } = props;\n  const [debugText, setDebugText] = useState('');\n\n  let debugFields: DebugField[] = [];\n  if (debugText && derivedFields) {\n    debugFields = makeDebugFields(derivedFields, debugText);\n  }\n\n  return (\n    <div className={className}>\n      <FormField\n        labelWidth={12}\n        label={'Debug log message'}\n        inputEl={\n          <textarea\n            placeholder={'Paste an example log line here to test the regular expressions of your derived fields'}\n            className={cx(\n              'gf-form-input gf-form-textarea',\n              css`\n                width: 100%;\n              `\n            )}\n            value={debugText}\n            onChange={(event) => setDebugText(event.currentTarget.value)}\n          />\n        }\n      />\n      {!!debugFields.length && <DebugFields fields={debugFields} />}\n    </div>\n  );\n};\n\ntype DebugFieldItemProps = {\n  fields: DebugField[];\n};\nconst DebugFields = ({ fields }: DebugFieldItemProps) => {\n  return (\n    <table className={'filter-table'}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n          <th>Url</th>\n        </tr>\n      </thead>\n      <tbody>\n        {fields.map((field) => {\n          let value: any = field.value;\n          if (field.error) {\n            value = field.error.message;\n          } else if (field.href) {\n            value = <a href={field.href}>{value}</a>;\n          }\n          return (\n            <tr key={`${field.name}=${field.value}`}>\n              <td>{field.name}</td>\n              <td>{value}</td>\n              <td>{field.href ? <a href={field.href}>{field.href}</a> : ''}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\ntype DebugField = {\n  name: string;\n  error?: any;\n  value?: string;\n  href?: string;\n};\n\nfunction makeDebugFields(derivedFields: DerivedFieldConfig[], debugText: string): DebugField[] {\n  return derivedFields\n    .filter((field) => field.name && field.matcherRegex)\n    .map((field) => {\n      try {\n        const testMatch = debugText.match(field.matcherRegex);\n        const value = testMatch && testMatch[1];\n        let link: LinkModel<Field> | null = null;\n\n        if (field.url && value) {\n          link = getFieldLinksForExplore({\n            field: {\n              name: '',\n              type: FieldType.string,\n              values: new ArrayVector([value]),\n              config: {\n                links: [{ title: '', url: field.url }],\n              },\n            },\n            rowIndex: 0,\n            range: {} as any,\n          })[0];\n        }\n\n        return {\n          name: field.name,\n          value: value || '<no match>',\n          href: link && link.href,\n        } as DebugField;\n      } catch (error) {\n        return {\n          name: field.name,\n          error,\n        } as DebugField;\n      }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}