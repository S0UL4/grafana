{"ast":null,"code":"import { fuzzyMatch } from './fuzzy';\n/**\n * List of auto-complete search function used by SuggestionsPlugin.handleTypeahead()\n * @alpha\n */\n\nexport let SearchFunctionType;\n/**\n * Exact-word matching for auto-complete suggestions.\n * - Returns items containing the searched text.\n * @internal\n */\n\n(function (SearchFunctionType) {\n  SearchFunctionType[\"Word\"] = \"Word\";\n  SearchFunctionType[\"Prefix\"] = \"Prefix\";\n  SearchFunctionType[\"Fuzzy\"] = \"Fuzzy\";\n})(SearchFunctionType || (SearchFunctionType = {}));\n\nconst wordSearch = (items, text) => {\n  return items.filter(c => (c.filterText || c.label).includes(text));\n};\n/**\n * Prefix-based search for auto-complete suggestions.\n * - Returns items starting with the searched text.\n * @internal\n */\n\n\nconst prefixSearch = (items, text) => {\n  return items.filter(c => (c.filterText || c.label).startsWith(text));\n};\n/**\n * Fuzzy search for auto-complete suggestions.\n * - Returns items containing all letters from the search text occurring in the same order.\n * - Stores highlight parts with parts of the text phrase found by fuzzy search\n * @internal\n */\n\n\nconst fuzzySearch = (items, text) => {\n  text = text.toLowerCase();\n  return items.filter(item => {\n    const {\n      distance,\n      ranges,\n      found\n    } = fuzzyMatch(item.label.toLowerCase(), text);\n\n    if (!found) {\n      return false;\n    }\n\n    item.sortValue = distance;\n    item.highlightParts = ranges;\n    return true;\n  });\n};\n/**\n * @internal\n */\n\n\nexport const SearchFunctionMap = {\n  [SearchFunctionType.Word]: wordSearch,\n  [SearchFunctionType.Prefix]: prefixSearch,\n  [SearchFunctionType.Fuzzy]: fuzzySearch\n};","map":{"version":3,"names":["fuzzyMatch","SearchFunctionType","wordSearch","items","text","filter","c","filterText","label","includes","prefixSearch","startsWith","fuzzySearch","toLowerCase","item","distance","ranges","found","sortValue","highlightParts","SearchFunctionMap","Word","Prefix","Fuzzy"],"sources":["/home/soula/grafana/packages/grafana-ui/src/utils/searchFunctions.ts"],"sourcesContent":["import { CompletionItem, SearchFunction } from '../types';\n\nimport { fuzzyMatch } from './fuzzy';\n\n/**\n * List of auto-complete search function used by SuggestionsPlugin.handleTypeahead()\n * @alpha\n */\nexport enum SearchFunctionType {\n  Word = 'Word',\n  Prefix = 'Prefix',\n  Fuzzy = 'Fuzzy',\n}\n\n/**\n * Exact-word matching for auto-complete suggestions.\n * - Returns items containing the searched text.\n * @internal\n */\nconst wordSearch: SearchFunction = (items: CompletionItem[], text: string): CompletionItem[] => {\n  return items.filter((c) => (c.filterText || c.label).includes(text));\n};\n\n/**\n * Prefix-based search for auto-complete suggestions.\n * - Returns items starting with the searched text.\n * @internal\n */\nconst prefixSearch: SearchFunction = (items: CompletionItem[], text: string): CompletionItem[] => {\n  return items.filter((c) => (c.filterText || c.label).startsWith(text));\n};\n\n/**\n * Fuzzy search for auto-complete suggestions.\n * - Returns items containing all letters from the search text occurring in the same order.\n * - Stores highlight parts with parts of the text phrase found by fuzzy search\n * @internal\n */\nconst fuzzySearch: SearchFunction = (items: CompletionItem[], text: string): CompletionItem[] => {\n  text = text.toLowerCase();\n  return items.filter((item) => {\n    const { distance, ranges, found } = fuzzyMatch(item.label.toLowerCase(), text);\n    if (!found) {\n      return false;\n    }\n    item.sortValue = distance;\n    item.highlightParts = ranges;\n    return true;\n  });\n};\n\n/**\n * @internal\n */\nexport const SearchFunctionMap = {\n  [SearchFunctionType.Word]: wordSearch,\n  [SearchFunctionType.Prefix]: prefixSearch,\n  [SearchFunctionType.Fuzzy]: fuzzySearch,\n};\n"],"mappings":"AAEA,SAASA,UAAT,QAA2B,SAA3B;AAEA;AACA;AACA;AACA;;AACA,WAAYC,kBAAZ;AAMA;AACA;AACA;AACA;AACA;;WAVYA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAWZ,MAAMC,UAA0B,GAAG,CAACC,KAAD,EAA0BC,IAA1B,KAA6D;EAC9F,OAAOD,KAAK,CAACE,MAAN,CAAcC,CAAD,IAAO,CAACA,CAAC,CAACC,UAAF,IAAgBD,CAAC,CAACE,KAAnB,EAA0BC,QAA1B,CAAmCL,IAAnC,CAApB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,YAA4B,GAAG,CAACP,KAAD,EAA0BC,IAA1B,KAA6D;EAChG,OAAOD,KAAK,CAACE,MAAN,CAAcC,CAAD,IAAO,CAACA,CAAC,CAACC,UAAF,IAAgBD,CAAC,CAACE,KAAnB,EAA0BG,UAA1B,CAAqCP,IAArC,CAApB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMQ,WAA2B,GAAG,CAACT,KAAD,EAA0BC,IAA1B,KAA6D;EAC/FA,IAAI,GAAGA,IAAI,CAACS,WAAL,EAAP;EACA,OAAOV,KAAK,CAACE,MAAN,CAAcS,IAAD,IAAU;IAC5B,MAAM;MAAEC,QAAF;MAAYC,MAAZ;MAAoBC;IAApB,IAA8BjB,UAAU,CAACc,IAAI,CAACN,KAAL,CAAWK,WAAX,EAAD,EAA2BT,IAA3B,CAA9C;;IACA,IAAI,CAACa,KAAL,EAAY;MACV,OAAO,KAAP;IACD;;IACDH,IAAI,CAACI,SAAL,GAAiBH,QAAjB;IACAD,IAAI,CAACK,cAAL,GAAsBH,MAAtB;IACA,OAAO,IAAP;EACD,CARM,CAAP;AASD,CAXD;AAaA;AACA;AACA;;;AACA,OAAO,MAAMI,iBAAiB,GAAG;EAC/B,CAACnB,kBAAkB,CAACoB,IAApB,GAA2BnB,UADI;EAE/B,CAACD,kBAAkB,CAACqB,MAApB,GAA6BZ,YAFE;EAG/B,CAACT,kBAAkB,CAACsB,KAApB,GAA4BX;AAHG,CAA1B"},"metadata":{},"sourceType":"module"}