{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useLayoutEffect, useRef, useState } from 'react';\nimport { CustomScrollbar, TextArea, useStyles2 } from '@grafana/ui';\nimport { Comment } from './Comment';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const CommentView = ({\n  comments,\n  packetCounter,\n  addComment\n}) => {\n  const styles = useStyles2(getStyles);\n  const [comment, setComment] = useState('');\n  const [scrollTop, setScrollTop] = useState(0);\n  const commentViewContainer = useRef(null);\n  useLayoutEffect(() => {\n    if (commentViewContainer.current) {\n      setScrollTop(commentViewContainer.current.offsetHeight);\n    } else {\n      setScrollTop(0);\n    }\n  }, [packetCounter]);\n\n  const onUpdateComment = event => {\n    const element = event.target;\n    setComment(element.value);\n  };\n\n  const onKeyPress = async event => {\n    if ((event === null || event === void 0 ? void 0 : event.key) === 'Enter' && !(event !== null && event !== void 0 && event.shiftKey)) {\n      event.preventDefault();\n\n      if (comment.length > 0) {\n        const result = await addComment(comment);\n\n        if (result) {\n          setComment('');\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsx(CustomScrollbar, {\n    scrollTop: scrollTop,\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      ref: commentViewContainer,\n      className: styles.commentViewContainer,\n      children: [comments.map(msg => /*#__PURE__*/_jsx(Comment, {\n        message: msg\n      }, msg.id)), /*#__PURE__*/_jsx(TextArea, {\n        placeholder: \"Write a comment\",\n        value: comment,\n        onChange: onUpdateComment,\n        onKeyPress: onKeyPress,\n        autoFocus: true\n      })]\n    })\n  });\n};\n\nconst getStyles = theme => ({\n  commentViewContainer: css`\n    margin: 5px;\n  `\n});","map":{"version":3,"names":["css","React","useLayoutEffect","useRef","useState","CustomScrollbar","TextArea","useStyles2","Comment","CommentView","comments","packetCounter","addComment","styles","getStyles","comment","setComment","scrollTop","setScrollTop","commentViewContainer","current","offsetHeight","onUpdateComment","event","element","target","value","onKeyPress","key","shiftKey","preventDefault","length","result","map","msg","id","theme"],"sources":["/home/soula/grafana/public/app/features/comments/CommentView.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FormEvent, useLayoutEffect, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { CustomScrollbar, TextArea, useStyles2 } from '@grafana/ui';\n\nimport { Comment } from './Comment';\nimport { Message } from './types';\n\ntype Props = {\n  comments: Message[];\n  packetCounter: number;\n  addComment: (comment: string) => Promise<boolean>;\n};\n\nexport const CommentView = ({ comments, packetCounter, addComment }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const [comment, setComment] = useState('');\n  const [scrollTop, setScrollTop] = useState(0);\n  const commentViewContainer = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    if (commentViewContainer.current) {\n      setScrollTop(commentViewContainer.current.offsetHeight);\n    } else {\n      setScrollTop(0);\n    }\n  }, [packetCounter]);\n\n  const onUpdateComment = (event: FormEvent<HTMLTextAreaElement>) => {\n    const element = event.target as HTMLInputElement;\n    setComment(element.value);\n  };\n\n  const onKeyPress = async (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event?.key === 'Enter' && !event?.shiftKey) {\n      event.preventDefault();\n\n      if (comment.length > 0) {\n        const result = await addComment(comment);\n        if (result) {\n          setComment('');\n        }\n      }\n    }\n  };\n\n  return (\n    <CustomScrollbar scrollTop={scrollTop}>\n      <div ref={commentViewContainer} className={styles.commentViewContainer}>\n        {comments.map((msg) => (\n          <Comment key={msg.id} message={msg} />\n        ))}\n        <TextArea\n          placeholder=\"Write a comment\"\n          value={comment}\n          onChange={onUpdateComment}\n          onKeyPress={onKeyPress}\n          autoFocus={true}\n        />\n      </div>\n    </CustomScrollbar>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  commentViewContainer: css`\n    margin: 5px;\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAA2BC,eAA3B,EAA4CC,MAA5C,EAAoDC,QAApD,QAAoE,OAApE;AAGA,SAASC,eAAT,EAA0BC,QAA1B,EAAoCC,UAApC,QAAsD,aAAtD;AAEA,SAASC,OAAT,QAAwB,WAAxB;;;AASA,OAAO,MAAMC,WAAW,GAAG,CAAC;EAAEC,QAAF;EAAYC,aAAZ;EAA2BC;AAA3B,CAAD,KAAoD;EAC7E,MAAMC,MAAM,GAAGN,UAAU,CAACO,SAAD,CAAzB;EAEA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,CAAD,CAA1C;EACA,MAAMe,oBAAoB,GAAGhB,MAAM,CAAiB,IAAjB,CAAnC;EAEAD,eAAe,CAAC,MAAM;IACpB,IAAIiB,oBAAoB,CAACC,OAAzB,EAAkC;MAChCF,YAAY,CAACC,oBAAoB,CAACC,OAArB,CAA6BC,YAA9B,CAAZ;IACD,CAFD,MAEO;MACLH,YAAY,CAAC,CAAD,CAAZ;IACD;EACF,CANc,EAMZ,CAACP,aAAD,CANY,CAAf;;EAQA,MAAMW,eAAe,GAAIC,KAAD,IAA2C;IACjE,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAtB;IACAT,UAAU,CAACQ,OAAO,CAACE,KAAT,CAAV;EACD,CAHD;;EAKA,MAAMC,UAAU,GAAG,MAAOJ,KAAP,IAA2D;IAC5E,IAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEK,GAAP,MAAe,OAAf,IAA0B,EAACL,KAAD,aAACA,KAAD,eAACA,KAAK,CAAEM,QAAR,CAA9B,EAAgD;MAC9CN,KAAK,CAACO,cAAN;;MAEA,IAAIf,OAAO,CAACgB,MAAR,GAAiB,CAArB,EAAwB;QACtB,MAAMC,MAAM,GAAG,MAAMpB,UAAU,CAACG,OAAD,CAA/B;;QACA,IAAIiB,MAAJ,EAAY;UACVhB,UAAU,CAAC,EAAD,CAAV;QACD;MACF;IACF;EACF,CAXD;;EAaA,oBACE,KAAC,eAAD;IAAiB,SAAS,EAAEC,SAA5B;IAAA,uBACE;MAAK,GAAG,EAAEE,oBAAV;MAAgC,SAAS,EAAEN,MAAM,CAACM,oBAAlD;MAAA,WACGT,QAAQ,CAACuB,GAAT,CAAcC,GAAD,iBACZ,KAAC,OAAD;QAAsB,OAAO,EAAEA;MAA/B,GAAcA,GAAG,CAACC,EAAlB,CADD,CADH,eAIE,KAAC,QAAD;QACE,WAAW,EAAC,iBADd;QAEE,KAAK,EAAEpB,OAFT;QAGE,QAAQ,EAAEO,eAHZ;QAIE,UAAU,EAAEK,UAJd;QAKE,SAAS,EAAE;MALb,EAJF;IAAA;EADF,EADF;AAgBD,CAjDM;;AAmDP,MAAMb,SAAS,GAAIsB,KAAD,KAA2B;EAC3CjB,oBAAoB,EAAEnB,GAAI;AAC5B;AACA;AAH6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}