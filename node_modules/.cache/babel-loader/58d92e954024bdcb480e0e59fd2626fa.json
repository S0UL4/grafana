{"ast":null,"code":"import { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\n\n/** prepare the query replacing folder:current */\nexport async function replaceCurrentFolderQuery(query) {\n  if (query.query && query.query.indexOf('folder:current') >= 0) {\n    var _query$query;\n\n    query = Object.assign({}, query, {\n      location: await getCurrentFolderUID(),\n      query: query.query.replace('folder:current', '').trim()\n    });\n\n    if (!((_query$query = query.query) !== null && _query$query !== void 0 && _query$query.length)) {\n      query.query = '*';\n    }\n  }\n\n  return Promise.resolve(query);\n}\n\nasync function getCurrentFolderUID() {\n  try {\n    var _dash, _dash$meta;\n\n    let dash = getDashboardSrv().getCurrent();\n\n    if (!dash) {\n      await delay(500); // may not be loaded yet\n\n      dash = getDashboardSrv().getCurrent();\n    }\n\n    return Promise.resolve((_dash = dash) === null || _dash === void 0 ? void 0 : (_dash$meta = _dash.meta) === null || _dash$meta === void 0 ? void 0 : _dash$meta.folderUid);\n  } catch (e) {\n    console.error(e);\n  }\n\n  return undefined;\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","map":{"version":3,"names":["getDashboardSrv","replaceCurrentFolderQuery","query","indexOf","location","getCurrentFolderUID","replace","trim","length","Promise","resolve","dash","getCurrent","delay","meta","folderUid","e","console","error","undefined","ms","setTimeout"],"sources":["/home/soula/grafana/public/app/features/search/service/utils.ts"],"sourcesContent":["import { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\n\nimport { SearchQuery } from './types';\n\n/** prepare the query replacing folder:current */\nexport async function replaceCurrentFolderQuery(query: SearchQuery): Promise<SearchQuery> {\n  if (query.query && query.query.indexOf('folder:current') >= 0) {\n    query = {\n      ...query,\n      location: await getCurrentFolderUID(),\n      query: query.query.replace('folder:current', '').trim(),\n    };\n    if (!query.query?.length) {\n      query.query = '*';\n    }\n  }\n  return Promise.resolve(query);\n}\n\nasync function getCurrentFolderUID(): Promise<string | undefined> {\n  try {\n    let dash = getDashboardSrv().getCurrent();\n    if (!dash) {\n      await delay(500); // may not be loaded yet\n      dash = getDashboardSrv().getCurrent();\n    }\n    return Promise.resolve(dash?.meta?.folderUid);\n  } catch (e) {\n    console.error(e);\n  }\n  return undefined;\n}\n\nfunction delay(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,8CAAhC;;AAIA;AACA,OAAO,eAAeC,yBAAf,CAAyCC,KAAzC,EAAmF;EACxF,IAAIA,KAAK,CAACA,KAAN,IAAeA,KAAK,CAACA,KAAN,CAAYC,OAAZ,CAAoB,gBAApB,KAAyC,CAA5D,EAA+D;IAAA;;IAC7DD,KAAK,qBACAA,KADA;MAEHE,QAAQ,EAAE,MAAMC,mBAAmB,EAFhC;MAGHH,KAAK,EAAEA,KAAK,CAACA,KAAN,CAAYI,OAAZ,CAAoB,gBAApB,EAAsC,EAAtC,EAA0CC,IAA1C;IAHJ,EAAL;;IAKA,IAAI,kBAACL,KAAK,CAACA,KAAP,yCAAC,aAAaM,MAAd,CAAJ,EAA0B;MACxBN,KAAK,CAACA,KAAN,GAAc,GAAd;IACD;EACF;;EACD,OAAOO,OAAO,CAACC,OAAR,CAAgBR,KAAhB,CAAP;AACD;;AAED,eAAeG,mBAAf,GAAkE;EAChE,IAAI;IAAA;;IACF,IAAIM,IAAI,GAAGX,eAAe,GAAGY,UAAlB,EAAX;;IACA,IAAI,CAACD,IAAL,EAAW;MACT,MAAME,KAAK,CAAC,GAAD,CAAX,CADS,CACS;;MAClBF,IAAI,GAAGX,eAAe,GAAGY,UAAlB,EAAP;IACD;;IACD,OAAOH,OAAO,CAACC,OAAR,UAAgBC,IAAhB,wDAAgB,MAAMG,IAAtB,+CAAgB,WAAYC,SAA5B,CAAP;EACD,CAPD,CAOE,OAAOC,CAAP,EAAU;IACVC,OAAO,CAACC,KAAR,CAAcF,CAAd;EACD;;EACD,OAAOG,SAAP;AACD;;AAED,SAASN,KAAT,CAAeO,EAAf,EAA2B;EACzB,OAAO,IAAIX,OAAJ,CAAaC,OAAD,IAAaW,UAAU,CAACX,OAAD,EAAUU,EAAV,CAAnC,CAAP;AACD"},"metadata":{},"sourceType":"module"}