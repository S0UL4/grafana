{"ast":null,"code":"import React from 'react';\nimport { Alignment, GroupBy, LabelFilter, Metrics, Preprocessor } from '.';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Editor({\n  refId,\n  query,\n  labels,\n  datasource,\n  onChange,\n  onMetricTypeChange,\n  customMetaData,\n  variableOptionGroup\n}) {\n  return /*#__PURE__*/_jsx(Metrics, {\n    refId: refId,\n    templateSrv: datasource.templateSrv,\n    projectName: query.projectName,\n    metricType: query.metricType,\n    templateVariableOptions: variableOptionGroup.options,\n    datasource: datasource,\n    onChange: onMetricTypeChange,\n    children: metric => /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(LabelFilter, {\n        labels: labels,\n        filters: query.filters,\n        onChange: filters => onChange(Object.assign({}, query, {\n          filters\n        })),\n        variableOptionGroup: variableOptionGroup\n      }), /*#__PURE__*/_jsx(Preprocessor, {\n        metricDescriptor: metric,\n        query: query,\n        onChange: onChange\n      }), /*#__PURE__*/_jsx(GroupBy, {\n        refId: refId,\n        labels: Object.keys(labels),\n        query: query,\n        onChange: onChange,\n        variableOptionGroup: variableOptionGroup,\n        metricDescriptor: metric\n      }), /*#__PURE__*/_jsx(Alignment, {\n        refId: refId,\n        datasource: datasource,\n        templateVariableOptions: variableOptionGroup.options,\n        query: query,\n        customMetaData: customMetaData,\n        onChange: onChange\n      })]\n    })\n  });\n}\n\nexport const VisualMetricQueryEditor = /*#__PURE__*/React.memo(Editor);","map":{"version":3,"names":["React","Alignment","GroupBy","LabelFilter","Metrics","Preprocessor","Editor","refId","query","labels","datasource","onChange","onMetricTypeChange","customMetaData","variableOptionGroup","templateSrv","projectName","metricType","options","metric","filters","Object","keys","VisualMetricQueryEditor","memo"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/VisualMetricQueryEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { CustomMetaData, MetricDescriptor, MetricQuery, SLOQuery } from '../types';\n\nimport { Alignment, GroupBy, LabelFilter, Metrics, Preprocessor } from '.';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onMetricTypeChange: (query: MetricDescriptor) => void;\n  onChange: (query: MetricQuery | SLOQuery) => void;\n  query: MetricQuery;\n  datasource: CloudMonitoringDatasource;\n  labels: any;\n}\n\nfunction Editor({\n  refId,\n  query,\n  labels,\n  datasource,\n  onChange,\n  onMetricTypeChange,\n  customMetaData,\n  variableOptionGroup,\n}: React.PropsWithChildren<Props>) {\n  return (\n    <Metrics\n      refId={refId}\n      templateSrv={datasource.templateSrv}\n      projectName={query.projectName}\n      metricType={query.metricType}\n      templateVariableOptions={variableOptionGroup.options}\n      datasource={datasource}\n      onChange={onMetricTypeChange}\n    >\n      {(metric) => (\n        <>\n          <LabelFilter\n            labels={labels}\n            filters={query.filters!}\n            onChange={(filters: string[]) => onChange({ ...query, filters })}\n            variableOptionGroup={variableOptionGroup}\n          />\n          <Preprocessor metricDescriptor={metric} query={query} onChange={onChange} />\n          <GroupBy\n            refId={refId}\n            labels={Object.keys(labels)}\n            query={query}\n            onChange={onChange}\n            variableOptionGroup={variableOptionGroup}\n            metricDescriptor={metric}\n          />\n          <Alignment\n            refId={refId}\n            datasource={datasource}\n            templateVariableOptions={variableOptionGroup.options}\n            query={query}\n            customMetaData={customMetaData}\n            onChange={onChange}\n          />\n        </>\n      )}\n    </Metrics>\n  );\n}\n\nexport const VisualMetricQueryEditor = React.memo(Editor);\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAOA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,WAA7B,EAA0CC,OAA1C,EAAmDC,YAAnD,QAAuE,GAAvE;;;;;AAaA,SAASC,MAAT,CAAgB;EACdC,KADc;EAEdC,KAFc;EAGdC,MAHc;EAIdC,UAJc;EAKdC,QALc;EAMdC,kBANc;EAOdC,cAPc;EAQdC;AARc,CAAhB,EASmC;EACjC,oBACE,KAAC,OAAD;IACE,KAAK,EAAEP,KADT;IAEE,WAAW,EAAEG,UAAU,CAACK,WAF1B;IAGE,WAAW,EAAEP,KAAK,CAACQ,WAHrB;IAIE,UAAU,EAAER,KAAK,CAACS,UAJpB;IAKE,uBAAuB,EAAEH,mBAAmB,CAACI,OAL/C;IAME,UAAU,EAAER,UANd;IAOE,QAAQ,EAAEE,kBAPZ;IAAA,UASIO,MAAD,iBACC;MAAA,wBACE,KAAC,WAAD;QACE,MAAM,EAAEV,MADV;QAEE,OAAO,EAAED,KAAK,CAACY,OAFjB;QAGE,QAAQ,EAAGA,OAAD,IAAuBT,QAAQ,mBAAMH,KAAN;UAAaY;QAAb,GAH3C;QAIE,mBAAmB,EAAEN;MAJvB,EADF,eAOE,KAAC,YAAD;QAAc,gBAAgB,EAAEK,MAAhC;QAAwC,KAAK,EAAEX,KAA/C;QAAsD,QAAQ,EAAEG;MAAhE,EAPF,eAQE,KAAC,OAAD;QACE,KAAK,EAAEJ,KADT;QAEE,MAAM,EAAEc,MAAM,CAACC,IAAP,CAAYb,MAAZ,CAFV;QAGE,KAAK,EAAED,KAHT;QAIE,QAAQ,EAAEG,QAJZ;QAKE,mBAAmB,EAAEG,mBALvB;QAME,gBAAgB,EAAEK;MANpB,EARF,eAgBE,KAAC,SAAD;QACE,KAAK,EAAEZ,KADT;QAEE,UAAU,EAAEG,UAFd;QAGE,uBAAuB,EAAEI,mBAAmB,CAACI,OAH/C;QAIE,KAAK,EAAEV,KAJT;QAKE,cAAc,EAAEK,cALlB;QAME,QAAQ,EAAEF;MANZ,EAhBF;IAAA;EAVJ,EADF;AAuCD;;AAED,OAAO,MAAMY,uBAAuB,gBAAGvB,KAAK,CAACwB,IAAN,CAAWlB,MAAX,CAAhC"},"metadata":{},"sourceType":"module"}