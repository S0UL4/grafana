{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { contextSrv } from '../context_srv';\nimport { echoLog } from './utils';\n\n/**\n * Echo is a service for collecting events from Grafana client-app\n * It collects events, distributes them across registered backend and flushes once per configured interval\n * It's up to the registered backend to decide what to do with a given type of metric\n */\nexport class Echo {\n  // meta data added to every event collected\n  constructor(config) {\n    _defineProperty(this, \"config\", {\n      flushInterval: 10000,\n      // By default Echo flushes every 10s\n      debug: false\n    });\n\n    _defineProperty(this, \"backends\", []);\n\n    _defineProperty(this, \"flush\", () => {\n      for (const backend of this.backends) {\n        backend.flush();\n      }\n    });\n\n    _defineProperty(this, \"addBackend\", backend => {\n      echoLog('Adding backend', false, backend);\n      this.backends.push(backend);\n    });\n\n    _defineProperty(this, \"addEvent\", (event, _meta) => {\n      const meta = this.getMeta();\n\n      const _event = Object.assign({}, event, {\n        meta: Object.assign({}, meta, _meta)\n      });\n\n      for (const backend of this.backends) {\n        if (backend.supportedEvents.length === 0 || backend.supportedEvents.indexOf(_event.type) > -1) {\n          backend.addEvent(_event);\n        }\n      }\n\n      echoLog('Reporting event', false, _event);\n    });\n\n    _defineProperty(this, \"getMeta\", () => {\n      return {\n        sessionId: '',\n        userId: contextSrv.user.id,\n        userLogin: contextSrv.user.login,\n        userSignedIn: contextSrv.user.isSignedIn,\n        screenSize: {\n          width: window.innerWidth,\n          height: window.innerHeight\n        },\n        windowSize: {\n          width: window.screen.width,\n          height: window.screen.height\n        },\n        userAgent: window.navigator.userAgent,\n        ts: new Date().getTime(),\n        timeSinceNavigationStart: performance.now(),\n        url: window.location.href\n      };\n    });\n\n    this.config = Object.assign({}, this.config, config);\n    setInterval(this.flush, this.config.flushInterval);\n  }\n\n}","map":{"version":3,"names":["contextSrv","echoLog","Echo","constructor","config","flushInterval","debug","backend","backends","flush","push","event","_meta","meta","getMeta","_event","supportedEvents","length","indexOf","type","addEvent","sessionId","userId","user","id","userLogin","login","userSignedIn","isSignedIn","screenSize","width","window","innerWidth","height","innerHeight","windowSize","screen","userAgent","navigator","ts","Date","getTime","timeSinceNavigationStart","performance","now","url","location","href","setInterval"],"sources":["/home/soula/grafana/public/app/core/services/echo/Echo.ts"],"sourcesContent":["import { EchoBackend, EchoMeta, EchoEvent, EchoSrv } from '@grafana/runtime';\n\nimport { contextSrv } from '../context_srv';\n\nimport { echoLog } from './utils';\n\ninterface EchoConfig {\n  // How often should metrics be reported\n  flushInterval: number;\n  // Enables debug mode\n  debug: boolean;\n}\n\n/**\n * Echo is a service for collecting events from Grafana client-app\n * It collects events, distributes them across registered backend and flushes once per configured interval\n * It's up to the registered backend to decide what to do with a given type of metric\n */\nexport class Echo implements EchoSrv {\n  private config: EchoConfig = {\n    flushInterval: 10000, // By default Echo flushes every 10s\n    debug: false,\n  };\n\n  private backends: EchoBackend[] = [];\n  // meta data added to every event collected\n\n  constructor(config?: Partial<EchoConfig>) {\n    this.config = {\n      ...this.config,\n      ...config,\n    };\n    setInterval(this.flush, this.config.flushInterval);\n  }\n\n  flush = () => {\n    for (const backend of this.backends) {\n      backend.flush();\n    }\n  };\n\n  addBackend = (backend: EchoBackend) => {\n    echoLog('Adding backend', false, backend);\n    this.backends.push(backend);\n  };\n\n  addEvent = <T extends EchoEvent>(event: Omit<T, 'meta'>, _meta?: {}) => {\n    const meta = this.getMeta();\n    const _event = {\n      ...event,\n      meta: {\n        ...meta,\n        ..._meta,\n      },\n    };\n\n    for (const backend of this.backends) {\n      if (backend.supportedEvents.length === 0 || backend.supportedEvents.indexOf(_event.type) > -1) {\n        backend.addEvent(_event);\n      }\n    }\n    echoLog('Reporting event', false, _event);\n  };\n\n  getMeta = (): EchoMeta => {\n    return {\n      sessionId: '',\n      userId: contextSrv.user.id,\n      userLogin: contextSrv.user.login,\n      userSignedIn: contextSrv.user.isSignedIn,\n      screenSize: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      },\n      windowSize: {\n        width: window.screen.width,\n        height: window.screen.height,\n      },\n      userAgent: window.navigator.userAgent,\n      ts: new Date().getTime(),\n      timeSinceNavigationStart: performance.now(),\n      url: window.location.href,\n    };\n  };\n}\n"],"mappings":";;AAEA,SAASA,UAAT,QAA2B,gBAA3B;AAEA,SAASC,OAAT,QAAwB,SAAxB;;AASA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAN,CAA8B;EAOnC;EAEAC,WAAW,CAACC,MAAD,EAA+B;IAAA,gCARb;MAC3BC,aAAa,EAAE,KADY;MACL;MACtBC,KAAK,EAAE;IAFoB,CAQa;;IAAA,kCAHR,EAGQ;;IAAA,+BAQlC,MAAM;MACZ,KAAK,MAAMC,OAAX,IAAsB,KAAKC,QAA3B,EAAqC;QACnCD,OAAO,CAACE,KAAR;MACD;IACF,CAZyC;;IAAA,oCAc5BF,OAAD,IAA0B;MACrCN,OAAO,CAAC,gBAAD,EAAmB,KAAnB,EAA0BM,OAA1B,CAAP;MACA,KAAKC,QAAL,CAAcE,IAAd,CAAmBH,OAAnB;IACD,CAjByC;;IAAA,kCAmB/B,CAAsBI,KAAtB,EAA8CC,KAA9C,KAA6D;MACtE,MAAMC,IAAI,GAAG,KAAKC,OAAL,EAAb;;MACA,MAAMC,MAAM,qBACPJ,KADO;QAEVE,IAAI,oBACCA,IADD,EAECD,KAFD;MAFM,EAAZ;;MAQA,KAAK,MAAML,OAAX,IAAsB,KAAKC,QAA3B,EAAqC;QACnC,IAAID,OAAO,CAACS,eAAR,CAAwBC,MAAxB,KAAmC,CAAnC,IAAwCV,OAAO,CAACS,eAAR,CAAwBE,OAAxB,CAAgCH,MAAM,CAACI,IAAvC,IAA+C,CAAC,CAA5F,EAA+F;UAC7FZ,OAAO,CAACa,QAAR,CAAiBL,MAAjB;QACD;MACF;;MACDd,OAAO,CAAC,iBAAD,EAAoB,KAApB,EAA2Bc,MAA3B,CAAP;IACD,CAnCyC;;IAAA,iCAqChC,MAAgB;MACxB,OAAO;QACLM,SAAS,EAAE,EADN;QAELC,MAAM,EAAEtB,UAAU,CAACuB,IAAX,CAAgBC,EAFnB;QAGLC,SAAS,EAAEzB,UAAU,CAACuB,IAAX,CAAgBG,KAHtB;QAILC,YAAY,EAAE3B,UAAU,CAACuB,IAAX,CAAgBK,UAJzB;QAKLC,UAAU,EAAE;UACVC,KAAK,EAAEC,MAAM,CAACC,UADJ;UAEVC,MAAM,EAAEF,MAAM,CAACG;QAFL,CALP;QASLC,UAAU,EAAE;UACVL,KAAK,EAAEC,MAAM,CAACK,MAAP,CAAcN,KADX;UAEVG,MAAM,EAAEF,MAAM,CAACK,MAAP,CAAcH;QAFZ,CATP;QAaLI,SAAS,EAAEN,MAAM,CAACO,SAAP,CAAiBD,SAbvB;QAcLE,EAAE,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EAdC;QAeLC,wBAAwB,EAAEC,WAAW,CAACC,GAAZ,EAfrB;QAgBLC,GAAG,EAAEd,MAAM,CAACe,QAAP,CAAgBC;MAhBhB,CAAP;IAkBD,CAxDyC;;IACxC,KAAK3C,MAAL,qBACK,KAAKA,MADV,EAEKA,MAFL;IAIA4C,WAAW,CAAC,KAAKvC,KAAN,EAAa,KAAKL,MAAL,CAAYC,aAAzB,CAAX;EACD;;AAfkC"},"metadata":{},"sourceType":"module"}