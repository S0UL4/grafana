{"ast":null,"code":"var _Redirect, _NavBar, _GlobalStyles, _CommandPalette, _AngularRoot, _AppNotificationList, _SearchWrapper, _LiveConnectionWarnin, _ModalRoot, _PortalContainer;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { KBarProvider } from 'kbar';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { config, locationService, navigationLogger, reportInteraction } from '@grafana/runtime';\nimport { ErrorBoundaryAlert, GlobalStyles, ModalRoot, ModalsProvider, PortalContainer } from '@grafana/ui';\nimport { SearchWrapper } from 'app/features/search';\nimport { getAppRoutes } from 'app/routes/routes';\nimport { store } from 'app/store/store';\nimport { AngularRoot } from './angular/AngularRoot';\nimport { loadAndInitAngularIfEnabled } from './angular/loadAndInitAngularIfEnabled';\nimport { AppNotificationList } from './core/components/AppNotifications/AppNotificationList';\nimport { NavBar } from './core/components/NavBar/NavBar';\nimport { I18nProvider } from './core/localisation';\nimport { GrafanaRoute } from './core/navigation/GrafanaRoute';\nimport { contextSrv } from './core/services/context_srv';\nimport { ConfigContext, ThemeProvider } from './core/utils/ConfigProvider';\nimport { CommandPalette } from './features/commandPalette/CommandPalette';\nimport { LiveConnectionWarning } from './features/live/LiveConnectionWarning';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/** Used by enterprise */\nlet bodyRenderHooks = [];\nlet pageBanners = [];\nexport function addBodyRenderHook(fn) {\n  bodyRenderHooks.push(fn);\n}\nexport function addPageBanner(fn) {\n  pageBanners.push(fn);\n}\nexport class AppWrapper extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"renderRoute\", route => {\n      const roles = route.roles ? route.roles() : [];\n      return /*#__PURE__*/_jsx(Route, {\n        exact: route.exact === undefined ? true : route.exact,\n        path: route.path,\n        render: props => {\n          navigationLogger('AppWrapper', false, 'Rendering route', route, 'with match', props.location); // TODO[Router]: test this logic\n\n          if (roles !== null && roles !== void 0 && roles.length) {\n            if (!roles.some(r => contextSrv.hasRole(r))) {\n              return _Redirect || (_Redirect = /*#__PURE__*/_jsx(Redirect, {\n                to: \"/\"\n              }));\n            }\n          }\n\n          return /*#__PURE__*/_jsx(GrafanaRoute, Object.assign({}, props, {\n            route: route\n          }));\n        }\n      }, route.path);\n    });\n\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    await loadAndInitAngularIfEnabled();\n    this.setState({\n      ready: true\n    });\n    $('.preloader').remove();\n  }\n\n  renderRoutes() {\n    return /*#__PURE__*/_jsx(Switch, {\n      children: getAppRoutes().map(r => this.renderRoute(r))\n    });\n  }\n\n  renderNavBar() {\n    if (config.isPublicDashboardView || !this.state.ready || config.featureToggles.topnav) {\n      return null;\n    }\n\n    return _NavBar || (_NavBar = /*#__PURE__*/_jsx(NavBar, {}));\n  }\n\n  commandPaletteEnabled() {\n    return config.featureToggles.commandPalette && !config.isPublicDashboardView;\n  }\n\n  searchBarEnabled() {\n    return !config.isPublicDashboardView;\n  }\n\n  render() {\n    const {\n      ready\n    } = this.state;\n    navigationLogger('AppWrapper', false, 'rendering');\n\n    const commandPaletteActionSelected = action => {\n      reportInteraction('commandPalette_action_selected', {\n        actionId: action.id,\n        actionName: action.name\n      });\n    };\n\n    return /*#__PURE__*/_jsx(Provider, {\n      store: store,\n      children: /*#__PURE__*/_jsx(I18nProvider, {\n        children: /*#__PURE__*/_jsx(ErrorBoundaryAlert, {\n          style: \"page\",\n          children: /*#__PURE__*/_jsx(ConfigContext.Provider, {\n            value: config,\n            children: /*#__PURE__*/_jsx(ThemeProvider, {\n              children: /*#__PURE__*/_jsx(KBarProvider, {\n                actions: [],\n                options: {\n                  enableHistory: true,\n                  callbacks: {\n                    onSelectAction: commandPaletteActionSelected\n                  }\n                },\n                children: /*#__PURE__*/_jsxs(ModalsProvider, {\n                  children: [_GlobalStyles || (_GlobalStyles = /*#__PURE__*/_jsx(GlobalStyles, {})), this.commandPaletteEnabled() && (_CommandPalette || (_CommandPalette = /*#__PURE__*/_jsx(CommandPalette, {}))), /*#__PURE__*/_jsx(\"div\", {\n                    className: \"grafana-app\",\n                    children: /*#__PURE__*/_jsxs(Router, {\n                      history: locationService.getHistory(),\n                      children: [this.renderNavBar(), /*#__PURE__*/_jsxs(\"main\", {\n                        className: \"main-view\",\n                        children: [pageBanners.map((Banner, index) => /*#__PURE__*/_jsx(Banner, {}, index.toString())), _AngularRoot || (_AngularRoot = /*#__PURE__*/_jsx(AngularRoot, {})), _AppNotificationList || (_AppNotificationList = /*#__PURE__*/_jsx(AppNotificationList, {})), this.searchBarEnabled() && (_SearchWrapper || (_SearchWrapper = /*#__PURE__*/_jsx(SearchWrapper, {}))), ready && this.renderRoutes(), bodyRenderHooks.map((Hook, index) => /*#__PURE__*/_jsx(Hook, {}, index.toString()))]\n                      })]\n                    })\n                  }), _LiveConnectionWarnin || (_LiveConnectionWarnin = /*#__PURE__*/_jsx(LiveConnectionWarning, {})), _ModalRoot || (_ModalRoot = /*#__PURE__*/_jsx(ModalRoot, {})), _PortalContainer || (_PortalContainer = /*#__PURE__*/_jsx(PortalContainer, {}))]\n                })\n              })\n            })\n          })\n        })\n      })\n    });\n  }\n\n}","map":{"version":3,"names":["KBarProvider","React","Provider","Router","Route","Redirect","Switch","config","locationService","navigationLogger","reportInteraction","ErrorBoundaryAlert","GlobalStyles","ModalRoot","ModalsProvider","PortalContainer","SearchWrapper","getAppRoutes","store","AngularRoot","loadAndInitAngularIfEnabled","AppNotificationList","NavBar","I18nProvider","GrafanaRoute","contextSrv","ConfigContext","ThemeProvider","CommandPalette","LiveConnectionWarning","bodyRenderHooks","pageBanners","addBodyRenderHook","fn","push","addPageBanner","AppWrapper","Component","constructor","props","route","roles","exact","undefined","path","location","length","some","r","hasRole","state","componentDidMount","setState","ready","$","remove","renderRoutes","map","renderRoute","renderNavBar","isPublicDashboardView","featureToggles","topnav","commandPaletteEnabled","commandPalette","searchBarEnabled","render","commandPaletteActionSelected","action","actionId","id","actionName","name","enableHistory","callbacks","onSelectAction","getHistory","Banner","index","toString","Hook"],"sources":["/home/soula/grafana/public/app/AppWrapper.tsx"],"sourcesContent":["import { Action, KBarProvider } from 'kbar';\nimport React, { ComponentType } from 'react';\nimport { Provider } from 'react-redux';\nimport { Router, Route, Redirect, Switch } from 'react-router-dom';\n\nimport { config, locationService, navigationLogger, reportInteraction } from '@grafana/runtime';\nimport { ErrorBoundaryAlert, GlobalStyles, ModalRoot, ModalsProvider, PortalContainer } from '@grafana/ui';\nimport { SearchWrapper } from 'app/features/search';\nimport { getAppRoutes } from 'app/routes/routes';\nimport { store } from 'app/store/store';\n\nimport { AngularRoot } from './angular/AngularRoot';\nimport { loadAndInitAngularIfEnabled } from './angular/loadAndInitAngularIfEnabled';\nimport { GrafanaApp } from './app';\nimport { AppNotificationList } from './core/components/AppNotifications/AppNotificationList';\nimport { NavBar } from './core/components/NavBar/NavBar';\nimport { I18nProvider } from './core/localisation';\nimport { GrafanaRoute } from './core/navigation/GrafanaRoute';\nimport { RouteDescriptor } from './core/navigation/types';\nimport { contextSrv } from './core/services/context_srv';\nimport { ConfigContext, ThemeProvider } from './core/utils/ConfigProvider';\nimport { CommandPalette } from './features/commandPalette/CommandPalette';\nimport { LiveConnectionWarning } from './features/live/LiveConnectionWarning';\n\ninterface AppWrapperProps {\n  app: GrafanaApp;\n}\n\ninterface AppWrapperState {\n  ready?: boolean;\n}\n\n/** Used by enterprise */\nlet bodyRenderHooks: ComponentType[] = [];\nlet pageBanners: ComponentType[] = [];\n\nexport function addBodyRenderHook(fn: ComponentType) {\n  bodyRenderHooks.push(fn);\n}\n\nexport function addPageBanner(fn: ComponentType) {\n  pageBanners.push(fn);\n}\n\nexport class AppWrapper extends React.Component<AppWrapperProps, AppWrapperState> {\n  constructor(props: AppWrapperProps) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    await loadAndInitAngularIfEnabled();\n    this.setState({ ready: true });\n    $('.preloader').remove();\n  }\n\n  renderRoute = (route: RouteDescriptor) => {\n    const roles = route.roles ? route.roles() : [];\n\n    return (\n      <Route\n        exact={route.exact === undefined ? true : route.exact}\n        path={route.path}\n        key={route.path}\n        render={(props) => {\n          navigationLogger('AppWrapper', false, 'Rendering route', route, 'with match', props.location);\n          // TODO[Router]: test this logic\n          if (roles?.length) {\n            if (!roles.some((r: string) => contextSrv.hasRole(r))) {\n              return <Redirect to=\"/\" />;\n            }\n          }\n\n          return <GrafanaRoute {...props} route={route} />;\n        }}\n      />\n    );\n  };\n\n  renderRoutes() {\n    return <Switch>{getAppRoutes().map((r) => this.renderRoute(r))}</Switch>;\n  }\n\n  renderNavBar() {\n    if (config.isPublicDashboardView || !this.state.ready || config.featureToggles.topnav) {\n      return null;\n    }\n\n    return <NavBar />;\n  }\n\n  commandPaletteEnabled() {\n    return config.featureToggles.commandPalette && !config.isPublicDashboardView;\n  }\n\n  searchBarEnabled() {\n    return !config.isPublicDashboardView;\n  }\n\n  render() {\n    const { ready } = this.state;\n\n    navigationLogger('AppWrapper', false, 'rendering');\n\n    const commandPaletteActionSelected = (action: Action) => {\n      reportInteraction('commandPalette_action_selected', {\n        actionId: action.id,\n        actionName: action.name,\n      });\n    };\n\n    return (\n      <Provider store={store}>\n        <I18nProvider>\n          <ErrorBoundaryAlert style=\"page\">\n            <ConfigContext.Provider value={config}>\n              <ThemeProvider>\n                <KBarProvider\n                  actions={[]}\n                  options={{ enableHistory: true, callbacks: { onSelectAction: commandPaletteActionSelected } }}\n                >\n                  <ModalsProvider>\n                    <GlobalStyles />\n                    {this.commandPaletteEnabled() && <CommandPalette />}\n                    <div className=\"grafana-app\">\n                      <Router history={locationService.getHistory()}>\n                        {this.renderNavBar()}\n                        <main className=\"main-view\">\n                          {pageBanners.map((Banner, index) => (\n                            <Banner key={index.toString()} />\n                          ))}\n\n                          <AngularRoot />\n                          <AppNotificationList />\n                          {this.searchBarEnabled() && <SearchWrapper />}\n                          {ready && this.renderRoutes()}\n                          {bodyRenderHooks.map((Hook, index) => (\n                            <Hook key={index.toString()} />\n                          ))}\n                        </main>\n                      </Router>\n                    </div>\n                    <LiveConnectionWarning />\n                    <ModalRoot />\n                    <PortalContainer />\n                  </ModalsProvider>\n                </KBarProvider>\n              </ThemeProvider>\n            </ConfigContext.Provider>\n          </ErrorBoundaryAlert>\n        </I18nProvider>\n      </Provider>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}