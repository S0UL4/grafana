{"ast":null,"code":"import { FieldConfigOptionsRegistry } from '../field/FieldConfigOptionsRegistry';\nimport { standardFieldConfigEditorRegistry } from '../field/standardFieldConfigEditorRegistry';\nimport { FieldConfigEditorBuilder } from '../utils/OptionsUIBuilders';\n\n/**\n * Helper functionality to create a field config registry.\n *\n * @param config - configuration to base the registry on.\n * @param pluginName - name of the plugin that will use the registry.\n * @internal\n */\nexport function createFieldConfigRegistry(config = {}, pluginName) {\n  const registry = new FieldConfigOptionsRegistry();\n  const standardConfigs = standardFieldConfigEditorRegistry.list();\n  const standardOptionsExtensions = {}; // Add custom options\n\n  if (config.useCustomConfig) {\n    const builder = new FieldConfigEditorBuilder();\n    config.useCustomConfig(builder);\n\n    for (const customProp of builder.getRegistry().list()) {\n      customProp.isCustom = true; // need to do something to make the custom items not conflict with standard ones\n      // problem is id (registry index) is used as property path\n      // so sort of need a property path on the FieldPropertyEditorItem\n\n      customProp.id = 'custom.' + customProp.id;\n\n      if (isStandardConfigExtension(customProp, standardConfigs)) {\n        var _standardOptionsExten;\n\n        const currentExtensions = (_standardOptionsExten = standardOptionsExtensions[customProp.category[0]]) !== null && _standardOptionsExten !== void 0 ? _standardOptionsExten : [];\n        currentExtensions.push(customProp);\n        standardOptionsExtensions[customProp.category[0]] = currentExtensions;\n      } else {\n        registry.register(customProp);\n      }\n    }\n  }\n\n  for (let fieldConfigProp of standardConfigs) {\n    if (config.disableStandardOptions) {\n      const isDisabled = config.disableStandardOptions.indexOf(fieldConfigProp.id) > -1;\n\n      if (isDisabled) {\n        continue;\n      }\n    }\n\n    if (config.standardOptions) {\n      var _config$standardOptio, _config$standardOptio2;\n\n      const customDefault = (_config$standardOptio = config.standardOptions[fieldConfigProp.id]) === null || _config$standardOptio === void 0 ? void 0 : _config$standardOptio.defaultValue;\n      const customSettings = (_config$standardOptio2 = config.standardOptions[fieldConfigProp.id]) === null || _config$standardOptio2 === void 0 ? void 0 : _config$standardOptio2.settings;\n\n      if (customDefault) {\n        fieldConfigProp = Object.assign({}, fieldConfigProp, {\n          defaultValue: customDefault\n        });\n      }\n\n      if (customSettings) {\n        fieldConfigProp = Object.assign({}, fieldConfigProp, {\n          settings: fieldConfigProp.settings ? Object.assign({}, fieldConfigProp.settings, customSettings) : customSettings\n        });\n      }\n    }\n\n    registry.register(fieldConfigProp);\n\n    if (fieldConfigProp.category && standardOptionsExtensions[fieldConfigProp.category[0]]) {\n      for (let extensionProperty of standardOptionsExtensions[fieldConfigProp.category[0]]) {\n        registry.register(extensionProperty);\n      }\n    }\n  } // assert that field configs do not use array path syntax\n\n\n  for (const item of registry.list()) {\n    if (item.path.indexOf('[') > 0) {\n      throw new Error(`[${pluginName}] Field config paths do not support arrays: ${item.id}`);\n    }\n  }\n\n  return registry;\n}\n\nfunction isStandardConfigExtension(property, standardProperties) {\n  return Boolean(standardProperties.find(p => property.category && p.category && property.category[0] === p.category[0]));\n}","map":{"version":3,"names":["FieldConfigOptionsRegistry","standardFieldConfigEditorRegistry","FieldConfigEditorBuilder","createFieldConfigRegistry","config","pluginName","registry","standardConfigs","list","standardOptionsExtensions","useCustomConfig","builder","customProp","getRegistry","isCustom","id","isStandardConfigExtension","currentExtensions","category","push","register","fieldConfigProp","disableStandardOptions","isDisabled","indexOf","standardOptions","customDefault","defaultValue","customSettings","settings","extensionProperty","item","path","Error","property","standardProperties","Boolean","find","p"],"sources":["/home/soula/grafana/packages/grafana-data/src/panel/registryFactories.ts"],"sourcesContent":["import { FieldConfigOptionsRegistry } from '../field/FieldConfigOptionsRegistry';\nimport { standardFieldConfigEditorRegistry } from '../field/standardFieldConfigEditorRegistry';\nimport { FieldConfigProperty, FieldConfigPropertyItem } from '../types/fieldOverrides';\nimport { FieldConfigEditorBuilder } from '../utils/OptionsUIBuilders';\n\nimport { SetFieldConfigOptionsArgs } from './PanelPlugin';\n\n/**\n * Helper functionality to create a field config registry.\n *\n * @param config - configuration to base the registry on.\n * @param pluginName - name of the plugin that will use the registry.\n * @internal\n */\nexport function createFieldConfigRegistry<TFieldConfigOptions>(\n  config: SetFieldConfigOptionsArgs<TFieldConfigOptions> = {},\n  pluginName: string\n): FieldConfigOptionsRegistry {\n  const registry = new FieldConfigOptionsRegistry();\n  const standardConfigs = standardFieldConfigEditorRegistry.list();\n  const standardOptionsExtensions: Record<string, FieldConfigPropertyItem[]> = {};\n\n  // Add custom options\n  if (config.useCustomConfig) {\n    const builder = new FieldConfigEditorBuilder<TFieldConfigOptions>();\n    config.useCustomConfig(builder);\n\n    for (const customProp of builder.getRegistry().list()) {\n      customProp.isCustom = true;\n      // need to do something to make the custom items not conflict with standard ones\n      // problem is id (registry index) is used as property path\n      // so sort of need a property path on the FieldPropertyEditorItem\n      customProp.id = 'custom.' + customProp.id;\n\n      if (isStandardConfigExtension(customProp, standardConfigs)) {\n        const currentExtensions = standardOptionsExtensions[customProp.category![0]] ?? [];\n        currentExtensions.push(customProp);\n        standardOptionsExtensions[customProp.category![0]] = currentExtensions;\n      } else {\n        registry.register(customProp);\n      }\n    }\n  }\n\n  for (let fieldConfigProp of standardConfigs) {\n    if (config.disableStandardOptions) {\n      const isDisabled = config.disableStandardOptions.indexOf(fieldConfigProp.id as FieldConfigProperty) > -1;\n      if (isDisabled) {\n        continue;\n      }\n    }\n    if (config.standardOptions) {\n      const customDefault: any = config.standardOptions[fieldConfigProp.id as FieldConfigProperty]?.defaultValue;\n      const customSettings: any = config.standardOptions[fieldConfigProp.id as FieldConfigProperty]?.settings;\n      if (customDefault) {\n        fieldConfigProp = {\n          ...fieldConfigProp,\n          defaultValue: customDefault,\n        };\n      }\n\n      if (customSettings) {\n        fieldConfigProp = {\n          ...fieldConfigProp,\n          settings: fieldConfigProp.settings ? { ...fieldConfigProp.settings, ...customSettings } : customSettings,\n        };\n      }\n    }\n\n    registry.register(fieldConfigProp);\n\n    if (fieldConfigProp.category && standardOptionsExtensions[fieldConfigProp.category[0]]) {\n      for (let extensionProperty of standardOptionsExtensions[fieldConfigProp.category[0]]) {\n        registry.register(extensionProperty);\n      }\n    }\n  }\n\n  // assert that field configs do not use array path syntax\n  for (const item of registry.list()) {\n    if (item.path.indexOf('[') > 0) {\n      throw new Error(`[${pluginName}] Field config paths do not support arrays: ${item.id}`);\n    }\n  }\n\n  return registry;\n}\n\nfunction isStandardConfigExtension(property: FieldConfigPropertyItem, standardProperties: FieldConfigPropertyItem[]) {\n  return Boolean(\n    standardProperties.find((p) => property.category && p.category && property.category[0] === p.category[0])\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}