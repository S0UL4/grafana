{"ast":null,"code":"import { of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { CoreApp, rangeUtil } from '@grafana/data';\nimport { runRequest } from '../query/state/runRequest';\nimport { standardAnnotationSupport } from './standardAnnotationSupport';\nlet counter = 100;\n\nfunction getNextRequestId() {\n  return 'AQ' + counter++;\n}\n\nexport function executeAnnotationQuery(options, datasource, savedJsonAnno) {\n  const processor = Object.assign({}, standardAnnotationSupport, datasource.annotations);\n  const annotation = processor.prepareAnnotation(savedJsonAnno);\n\n  if (!annotation) {\n    return of({});\n  }\n\n  const query = processor.prepareQuery(annotation);\n\n  if (!query) {\n    return of({});\n  } // No more points than pixels\n\n\n  const maxDataPoints = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; // Add interval to annotation queries\n\n  const interval = rangeUtil.calculateInterval(options.range, maxDataPoints, datasource.interval);\n  const scopedVars = {\n    __interval: {\n      text: interval.interval,\n      value: interval.interval\n    },\n    __interval_ms: {\n      text: interval.intervalMs.toString(),\n      value: interval.intervalMs\n    },\n    __annotation: {\n      text: annotation.name,\n      value: annotation\n    }\n  };\n  const queryRequest = Object.assign({\n    startTime: Date.now(),\n    requestId: getNextRequestId(),\n    range: options.range,\n    maxDataPoints,\n    scopedVars\n  }, interval, {\n    app: CoreApp.Dashboard,\n    timezone: options.dashboard.timezone,\n    targets: [Object.assign({}, query, {\n      refId: 'Anno'\n    })]\n  });\n  return runRequest(datasource, queryRequest).pipe(mergeMap(panelData => {\n    if (!panelData.series) {\n      return of({\n        panelData,\n        events: []\n      });\n    }\n\n    return processor.processEvents(annotation, panelData.series).pipe(map(events => ({\n      panelData,\n      events\n    })));\n  }));\n}","map":{"version":3,"names":["of","map","mergeMap","CoreApp","rangeUtil","runRequest","standardAnnotationSupport","counter","getNextRequestId","executeAnnotationQuery","options","datasource","savedJsonAnno","processor","annotations","annotation","prepareAnnotation","query","prepareQuery","maxDataPoints","window","innerWidth","document","documentElement","clientWidth","body","interval","calculateInterval","range","scopedVars","__interval","text","value","__interval_ms","intervalMs","toString","__annotation","name","queryRequest","startTime","Date","now","requestId","app","Dashboard","timezone","dashboard","targets","refId","pipe","panelData","series","events","processEvents"],"sources":["/home/soula/grafana/public/app/features/annotations/executeAnnotationQuery.ts"],"sourcesContent":["import { Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { CoreApp, DataQueryRequest, DataSourceApi, rangeUtil, ScopedVars } from '@grafana/data';\n\nimport { runRequest } from '../query/state/runRequest';\n\nimport { standardAnnotationSupport } from './standardAnnotationSupport';\nimport { AnnotationQueryOptions, AnnotationQueryResponse } from './types';\n\nlet counter = 100;\nfunction getNextRequestId() {\n  return 'AQ' + counter++;\n}\n\nexport function executeAnnotationQuery(\n  options: AnnotationQueryOptions,\n  datasource: DataSourceApi,\n  savedJsonAnno: any\n): Observable<AnnotationQueryResponse> {\n  const processor = {\n    ...standardAnnotationSupport,\n    ...datasource.annotations,\n  };\n\n  const annotation = processor.prepareAnnotation!(savedJsonAnno);\n  if (!annotation) {\n    return of({});\n  }\n\n  const query = processor.prepareQuery!(annotation);\n  if (!query) {\n    return of({});\n  }\n\n  // No more points than pixels\n  const maxDataPoints = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\n  // Add interval to annotation queries\n  const interval = rangeUtil.calculateInterval(options.range, maxDataPoints, datasource.interval);\n\n  const scopedVars: ScopedVars = {\n    __interval: { text: interval.interval, value: interval.interval },\n    __interval_ms: { text: interval.intervalMs.toString(), value: interval.intervalMs },\n    __annotation: { text: annotation.name, value: annotation },\n  };\n\n  const queryRequest: DataQueryRequest = {\n    startTime: Date.now(),\n    requestId: getNextRequestId(),\n    range: options.range,\n    maxDataPoints,\n    scopedVars,\n    ...interval,\n    app: CoreApp.Dashboard,\n\n    timezone: options.dashboard.timezone,\n\n    targets: [\n      {\n        ...query,\n        refId: 'Anno',\n      },\n    ],\n  };\n\n  return runRequest(datasource, queryRequest).pipe(\n    mergeMap((panelData) => {\n      if (!panelData.series) {\n        return of({ panelData, events: [] });\n      }\n\n      return processor.processEvents!(annotation, panelData.series).pipe(map((events) => ({ panelData, events })));\n    })\n  );\n}\n"],"mappings":"AAAA,SAAqBA,EAArB,QAA+B,MAA/B;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAEA,SAASC,OAAT,EAAmDC,SAAnD,QAAgF,eAAhF;AAEA,SAASC,UAAT,QAA2B,2BAA3B;AAEA,SAASC,yBAAT,QAA0C,6BAA1C;AAGA,IAAIC,OAAO,GAAG,GAAd;;AACA,SAASC,gBAAT,GAA4B;EAC1B,OAAO,OAAOD,OAAO,EAArB;AACD;;AAED,OAAO,SAASE,sBAAT,CACLC,OADK,EAELC,UAFK,EAGLC,aAHK,EAIgC;EACrC,MAAMC,SAAS,qBACVP,yBADU,EAEVK,UAAU,CAACG,WAFD,CAAf;EAKA,MAAMC,UAAU,GAAGF,SAAS,CAACG,iBAAV,CAA6BJ,aAA7B,CAAnB;;EACA,IAAI,CAACG,UAAL,EAAiB;IACf,OAAOf,EAAE,CAAC,EAAD,CAAT;EACD;;EAED,MAAMiB,KAAK,GAAGJ,SAAS,CAACK,YAAV,CAAwBH,UAAxB,CAAd;;EACA,IAAI,CAACE,KAAL,EAAY;IACV,OAAOjB,EAAE,CAAC,EAAD,CAAT;EACD,CAdoC,CAgBrC;;;EACA,MAAMmB,aAAa,GAAGC,MAAM,CAACC,UAAP,IAAqBC,QAAQ,CAACC,eAAT,CAAyBC,WAA9C,IAA6DF,QAAQ,CAACG,IAAT,CAAcD,WAAjG,CAjBqC,CAmBrC;;EACA,MAAME,QAAQ,GAAGtB,SAAS,CAACuB,iBAAV,CAA4BjB,OAAO,CAACkB,KAApC,EAA2CT,aAA3C,EAA0DR,UAAU,CAACe,QAArE,CAAjB;EAEA,MAAMG,UAAsB,GAAG;IAC7BC,UAAU,EAAE;MAAEC,IAAI,EAAEL,QAAQ,CAACA,QAAjB;MAA2BM,KAAK,EAAEN,QAAQ,CAACA;IAA3C,CADiB;IAE7BO,aAAa,EAAE;MAAEF,IAAI,EAAEL,QAAQ,CAACQ,UAAT,CAAoBC,QAApB,EAAR;MAAwCH,KAAK,EAAEN,QAAQ,CAACQ;IAAxD,CAFc;IAG7BE,YAAY,EAAE;MAAEL,IAAI,EAAEhB,UAAU,CAACsB,IAAnB;MAAyBL,KAAK,EAAEjB;IAAhC;EAHe,CAA/B;EAMA,MAAMuB,YAA8B;IAClCC,SAAS,EAAEC,IAAI,CAACC,GAAL,EADuB;IAElCC,SAAS,EAAElC,gBAAgB,EAFO;IAGlCoB,KAAK,EAAElB,OAAO,CAACkB,KAHmB;IAIlCT,aAJkC;IAKlCU;EALkC,GAM/BH,QAN+B;IAOlCiB,GAAG,EAAExC,OAAO,CAACyC,SAPqB;IASlCC,QAAQ,EAAEnC,OAAO,CAACoC,SAAR,CAAkBD,QATM;IAWlCE,OAAO,EAAE,mBAEF9B,KAFE;MAGL+B,KAAK,EAAE;IAHF;EAXyB,EAApC;EAmBA,OAAO3C,UAAU,CAACM,UAAD,EAAa2B,YAAb,CAAV,CAAqCW,IAArC,CACL/C,QAAQ,CAAEgD,SAAD,IAAe;IACtB,IAAI,CAACA,SAAS,CAACC,MAAf,EAAuB;MACrB,OAAOnD,EAAE,CAAC;QAAEkD,SAAF;QAAaE,MAAM,EAAE;MAArB,CAAD,CAAT;IACD;;IAED,OAAOvC,SAAS,CAACwC,aAAV,CAAyBtC,UAAzB,EAAqCmC,SAAS,CAACC,MAA/C,EAAuDF,IAAvD,CAA4DhD,GAAG,CAAEmD,MAAD,KAAa;MAAEF,SAAF;MAAaE;IAAb,CAAb,CAAD,CAA/D,CAAP;EACD,CANO,CADH,CAAP;AASD"},"metadata":{},"sourceType":"module"}