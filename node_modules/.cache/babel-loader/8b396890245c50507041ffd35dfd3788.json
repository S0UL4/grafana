{"ast":null,"code":"/**\n * Calculate tick step.\n * Implementation from d3-array (ticks.js)\n * https://github.com/d3/d3-array/blob/master/src/ticks.js\n * @param start Start value\n * @param stop End value\n * @param count Ticks count\n */\nexport function tickStep(start, stop, count) {\n  const e10 = Math.sqrt(50),\n        e5 = Math.sqrt(10),\n        e2 = Math.sqrt(2);\n  const step0 = Math.abs(stop - start) / Math.max(0, count);\n  let step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10));\n  const error = step0 / step1;\n\n  if (error >= e10) {\n    step1 *= 10;\n  } else if (error >= e5) {\n    step1 *= 5;\n  } else if (error >= e2) {\n    step1 *= 2;\n  }\n\n  return stop < start ? -step1 : step1;\n}\nexport function getScaledDecimals(decimals, tickSize) {\n  return decimals - Math.floor(Math.log(tickSize) / Math.LN10);\n}\n/**\n * Calculate tick size based on min and max values, number of ticks and precision.\n * Implementation from Flot.\n * @param min           Axis minimum\n * @param max           Axis maximum\n * @param noTicks       Number of ticks\n * @param tickDecimals  Tick decimal precision\n */\n\nexport function getFlotTickSize(min, max, noTicks, tickDecimals) {\n  const delta = (max - min) / noTicks;\n  let dec = -Math.floor(Math.log(delta) / Math.LN10);\n  const maxDec = tickDecimals;\n  const magn = Math.pow(10, -dec);\n  const norm = delta / magn; // norm is between 1.0 and 10.0\n\n  let size;\n\n  if (norm < 1.5) {\n    size = 1;\n  } else if (norm < 3) {\n    size = 2; // special case for 2.5, requires an extra decimal\n\n    if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {\n      size = 2.5;\n      ++dec;\n    }\n  } else if (norm < 7.5) {\n    size = 5;\n  } else {\n    size = 10;\n  }\n\n  size *= magn;\n  return size;\n}\n/**\n * Calculate axis range (min and max).\n * Implementation from Flot.\n */\n\nexport function getFlotRange(panelMin, panelMax, datamin, datamax) {\n  const autoscaleMargin = 0.02;\n  let min = +(panelMin != null ? panelMin : datamin);\n  let max = +(panelMax != null ? panelMax : datamax);\n  const delta = max - min;\n\n  if (delta === 0.0) {\n    // Grafana fix: wide Y min and max using increased wideFactor\n    // when all series values are the same\n    const wideFactor = 0.25;\n    const widen = Math.abs(max === 0 ? 1 : max * wideFactor);\n\n    if (panelMin === null) {\n      min -= widen;\n    } // always widen max if we couldn't widen min to ensure we\n    // don't fall into min == max which doesn't work\n\n\n    if (panelMax == null || panelMin != null) {\n      max += widen;\n    }\n  } else {\n    // consider autoscaling\n    const margin = autoscaleMargin;\n\n    if (margin != null) {\n      if (panelMin == null) {\n        min -= delta * margin; // make sure we don't go below zero if all values\n        // are positive\n\n        if (min < 0 && datamin != null && datamin >= 0) {\n          min = 0;\n        }\n      }\n\n      if (panelMax == null) {\n        max += delta * margin;\n\n        if (max > 0 && datamax != null && datamax <= 0) {\n          max = 0;\n        }\n      }\n    }\n  }\n\n  return {\n    min,\n    max\n  };\n}\n/**\n * Calculate tick decimals.\n * Implementation from Flot.\n */\n\nexport function getFlotTickDecimals(datamin, datamax, axis, height) {\n  const {\n    min,\n    max\n  } = getFlotRange(axis.min, axis.max, datamin, datamax);\n  const noTicks = 0.3 * Math.sqrt(height);\n  const delta = (max - min) / noTicks;\n  const dec = -Math.floor(Math.log(delta) / Math.LN10);\n  const magn = Math.pow(10, -dec); // norm is between 1.0 and 10.0\n\n  const norm = delta / magn;\n  let size;\n\n  if (norm < 1.5) {\n    size = 1;\n  } else if (norm < 3) {\n    size = 2; // special case for 2.5, requires an extra decimal\n\n    if (norm > 2.25) {\n      size = 2.5;\n    }\n  } else if (norm < 7.5) {\n    size = 5;\n  } else {\n    size = 10;\n  }\n\n  size *= magn;\n  const tickDecimals = Math.max(0, -Math.floor(Math.log(delta) / Math.LN10) + 1); // grafana addition\n\n  const scaledDecimals = tickDecimals - Math.floor(Math.log(size) / Math.LN10);\n  return {\n    tickDecimals,\n    scaledDecimals\n  };\n}\n/**\n * Format timestamp similar to Grafana graph panel.\n * @param ticks Number of ticks\n * @param min Time from (in milliseconds)\n * @param max Time to (in milliseconds)\n */\n\nexport function grafanaTimeFormat(ticks, min, max) {\n  if (min && max && ticks) {\n    const range = max - min;\n    const secPerTick = range / ticks / 1000;\n    const oneDay = 86400000;\n    const oneYear = 31536000000;\n\n    if (secPerTick <= 45) {\n      return 'HH:mm:ss';\n    }\n\n    if (secPerTick <= 7200 || range <= oneDay) {\n      return 'HH:mm';\n    }\n\n    if (secPerTick <= 80000) {\n      return 'MM/DD HH:mm';\n    }\n\n    if (secPerTick <= 2419200 || range <= oneYear) {\n      return 'MM/DD';\n    }\n\n    return 'YYYY-MM';\n  }\n\n  return 'HH:mm';\n}\n/**\n * Logarithm of value for arbitrary base.\n */\n\nexport function logp(value, base) {\n  return Math.log(value) / Math.log(base);\n}\n/**\n * Get decimal precision of number (3.14 => 2)\n */\n\nexport function getPrecision(num) {\n  const str = num.toString();\n  return getStringPrecision(str);\n}\n/**\n * Get decimal precision of number stored as a string (\"3.14\" => 2)\n */\n\nexport function getStringPrecision(num) {\n  if (isNaN(num)) {\n    return 0;\n  }\n\n  const dotIndex = num.indexOf('.');\n\n  if (dotIndex === -1) {\n    return 0;\n  } else {\n    return num.length - dotIndex - 1;\n  }\n}","map":{"version":3,"names":["tickStep","start","stop","count","e10","Math","sqrt","e5","e2","step0","abs","max","step1","pow","floor","log","LN10","error","getScaledDecimals","decimals","tickSize","getFlotTickSize","min","noTicks","tickDecimals","delta","dec","maxDec","magn","norm","size","getFlotRange","panelMin","panelMax","datamin","datamax","autoscaleMargin","wideFactor","widen","margin","getFlotTickDecimals","axis","height","scaledDecimals","grafanaTimeFormat","ticks","range","secPerTick","oneDay","oneYear","logp","value","base","getPrecision","num","str","toString","getStringPrecision","isNaN","dotIndex","indexOf","length"],"sources":["/home/soula/grafana/public/app/core/utils/ticks.ts"],"sourcesContent":["/**\n * Calculate tick step.\n * Implementation from d3-array (ticks.js)\n * https://github.com/d3/d3-array/blob/master/src/ticks.js\n * @param start Start value\n * @param stop End value\n * @param count Ticks count\n */\nexport function tickStep(start: number, stop: number, count: number): number {\n  const e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\n  const step0 = Math.abs(stop - start) / Math.max(0, count);\n  let step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10));\n  const error = step0 / step1;\n\n  if (error >= e10) {\n    step1 *= 10;\n  } else if (error >= e5) {\n    step1 *= 5;\n  } else if (error >= e2) {\n    step1 *= 2;\n  }\n\n  return stop < start ? -step1 : step1;\n}\n\nexport function getScaledDecimals(decimals: number, tickSize: number) {\n  return decimals - Math.floor(Math.log(tickSize) / Math.LN10);\n}\n\n/**\n * Calculate tick size based on min and max values, number of ticks and precision.\n * Implementation from Flot.\n * @param min           Axis minimum\n * @param max           Axis maximum\n * @param noTicks       Number of ticks\n * @param tickDecimals  Tick decimal precision\n */\nexport function getFlotTickSize(min: number, max: number, noTicks: number, tickDecimals: number) {\n  const delta = (max - min) / noTicks;\n  let dec = -Math.floor(Math.log(delta) / Math.LN10);\n  const maxDec = tickDecimals;\n\n  const magn = Math.pow(10, -dec);\n  const norm = delta / magn; // norm is between 1.0 and 10.0\n  let size;\n\n  if (norm < 1.5) {\n    size = 1;\n  } else if (norm < 3) {\n    size = 2;\n    // special case for 2.5, requires an extra decimal\n    if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {\n      size = 2.5;\n      ++dec;\n    }\n  } else if (norm < 7.5) {\n    size = 5;\n  } else {\n    size = 10;\n  }\n\n  size *= magn;\n\n  return size;\n}\n\n/**\n * Calculate axis range (min and max).\n * Implementation from Flot.\n */\nexport function getFlotRange(panelMin: any, panelMax: any, datamin: number, datamax: number) {\n  const autoscaleMargin = 0.02;\n\n  let min = +(panelMin != null ? panelMin : datamin);\n  let max = +(panelMax != null ? panelMax : datamax);\n  const delta = max - min;\n\n  if (delta === 0.0) {\n    // Grafana fix: wide Y min and max using increased wideFactor\n    // when all series values are the same\n    const wideFactor = 0.25;\n    const widen = Math.abs(max === 0 ? 1 : max * wideFactor);\n\n    if (panelMin === null) {\n      min -= widen;\n    }\n    // always widen max if we couldn't widen min to ensure we\n    // don't fall into min == max which doesn't work\n    if (panelMax == null || panelMin != null) {\n      max += widen;\n    }\n  } else {\n    // consider autoscaling\n    const margin = autoscaleMargin;\n    if (margin != null) {\n      if (panelMin == null) {\n        min -= delta * margin;\n        // make sure we don't go below zero if all values\n        // are positive\n        if (min < 0 && datamin != null && datamin >= 0) {\n          min = 0;\n        }\n      }\n      if (panelMax == null) {\n        max += delta * margin;\n        if (max > 0 && datamax != null && datamax <= 0) {\n          max = 0;\n        }\n      }\n    }\n  }\n  return { min, max };\n}\n\n/**\n * Calculate tick decimals.\n * Implementation from Flot.\n */\nexport function getFlotTickDecimals(datamin: number, datamax: number, axis: { min: any; max: any }, height: number) {\n  const { min, max } = getFlotRange(axis.min, axis.max, datamin, datamax);\n  const noTicks = 0.3 * Math.sqrt(height);\n  const delta = (max - min) / noTicks;\n  const dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n  const magn = Math.pow(10, -dec);\n  // norm is between 1.0 and 10.0\n  const norm = delta / magn;\n  let size;\n\n  if (norm < 1.5) {\n    size = 1;\n  } else if (norm < 3) {\n    size = 2;\n    // special case for 2.5, requires an extra decimal\n    if (norm > 2.25) {\n      size = 2.5;\n    }\n  } else if (norm < 7.5) {\n    size = 5;\n  } else {\n    size = 10;\n  }\n  size *= magn;\n\n  const tickDecimals = Math.max(0, -Math.floor(Math.log(delta) / Math.LN10) + 1);\n  // grafana addition\n  const scaledDecimals = tickDecimals - Math.floor(Math.log(size) / Math.LN10);\n  return { tickDecimals, scaledDecimals };\n}\n\n/**\n * Format timestamp similar to Grafana graph panel.\n * @param ticks Number of ticks\n * @param min Time from (in milliseconds)\n * @param max Time to (in milliseconds)\n */\nexport function grafanaTimeFormat(ticks: number, min: number, max: number) {\n  if (min && max && ticks) {\n    const range = max - min;\n    const secPerTick = range / ticks / 1000;\n    const oneDay = 86400000;\n    const oneYear = 31536000000;\n\n    if (secPerTick <= 45) {\n      return 'HH:mm:ss';\n    }\n    if (secPerTick <= 7200 || range <= oneDay) {\n      return 'HH:mm';\n    }\n    if (secPerTick <= 80000) {\n      return 'MM/DD HH:mm';\n    }\n    if (secPerTick <= 2419200 || range <= oneYear) {\n      return 'MM/DD';\n    }\n    return 'YYYY-MM';\n  }\n\n  return 'HH:mm';\n}\n\n/**\n * Logarithm of value for arbitrary base.\n */\nexport function logp(value: number, base: number) {\n  return Math.log(value) / Math.log(base);\n}\n\n/**\n * Get decimal precision of number (3.14 => 2)\n */\nexport function getPrecision(num: number): number {\n  const str = num.toString();\n  return getStringPrecision(str);\n}\n\n/**\n * Get decimal precision of number stored as a string (\"3.14\" => 2)\n */\nexport function getStringPrecision(num: string): number {\n  if (isNaN(num as unknown as number)) {\n    return 0;\n  }\n\n  const dotIndex = num.indexOf('.');\n  if (dotIndex === -1) {\n    return 0;\n  } else {\n    return num.length - dotIndex - 1;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}