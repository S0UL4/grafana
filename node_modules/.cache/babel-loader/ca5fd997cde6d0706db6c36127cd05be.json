{"ast":null,"code":"import { BigValueColorMode, BigValueGraphMode } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\nexport class StatSuggestionsSupplier {\n  getSuggestionsForData(builder) {\n    const {\n      dataSummary: ds\n    } = builder;\n\n    if (!ds.hasData) {\n      return;\n    }\n\n    const list = builder.getListAppender({\n      name: SuggestionName.Stat,\n      pluginId: 'stat',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          unit: 'short',\n          custom: {}\n        },\n        overrides: []\n      },\n      cardOptions: {\n        previewModifier: s => {\n          if (s.options.reduceOptions.values) {\n            s.options.reduceOptions.limit = 1;\n          }\n        }\n      }\n    }); // String and number field with low row count show individual rows\n\n    if (ds.hasStringField && ds.hasNumberField && ds.frameCount === 1 && ds.rowCountTotal < 10) {\n      list.append({\n        name: SuggestionName.Stat,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n            fields: '/.*/'\n          }\n        }\n      });\n      list.append({\n        name: SuggestionName.StatColoredBackground,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n            fields: '/.*/'\n          },\n          colorMode: BigValueColorMode.Background\n        }\n      });\n    } // Just a single string field\n\n\n    if (ds.stringFieldCount === 1 && ds.frameCount === 1 && ds.rowCountTotal < 10 && ds.fieldCount === 1) {\n      list.append({\n        name: SuggestionName.Stat,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n            fields: '/.*/'\n          },\n          colorMode: BigValueColorMode.None\n        }\n      });\n    }\n\n    if (ds.hasNumberField && ds.hasTimeField) {\n      list.append({\n        options: {\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull']\n          }\n        }\n      });\n      list.append({\n        name: SuggestionName.StatColoredBackground,\n        options: {\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull']\n          },\n          graphMode: BigValueGraphMode.None,\n          colorMode: BigValueColorMode.Background\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"names":["BigValueColorMode","BigValueGraphMode","SuggestionName","StatSuggestionsSupplier","getSuggestionsForData","builder","dataSummary","ds","hasData","list","getListAppender","name","Stat","pluginId","options","fieldConfig","defaults","unit","custom","overrides","cardOptions","previewModifier","s","reduceOptions","values","limit","hasStringField","hasNumberField","frameCount","rowCountTotal","append","calcs","fields","StatColoredBackground","colorMode","Background","stringFieldCount","fieldCount","None","hasTimeField","graphMode"],"sources":["/home/soula/grafana/public/app/plugins/panel/stat/suggestions.ts"],"sourcesContent":["import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { BigValueColorMode, BigValueGraphMode } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { PanelOptions } from './models.gen';\n\nexport class StatSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary: ds } = builder;\n\n    if (!ds.hasData) {\n      return;\n    }\n\n    const list = builder.getListAppender<PanelOptions, {}>({\n      name: SuggestionName.Stat,\n      pluginId: 'stat',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          unit: 'short',\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          if (s.options!.reduceOptions.values) {\n            s.options!.reduceOptions.limit = 1;\n          }\n        },\n      },\n    });\n\n    // String and number field with low row count show individual rows\n    if (ds.hasStringField && ds.hasNumberField && ds.frameCount === 1 && ds.rowCountTotal < 10) {\n      list.append({\n        name: SuggestionName.Stat,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n            fields: '/.*/',\n          },\n        },\n      });\n      list.append({\n        name: SuggestionName.StatColoredBackground,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n            fields: '/.*/',\n          },\n          colorMode: BigValueColorMode.Background,\n        },\n      });\n    }\n\n    // Just a single string field\n    if (ds.stringFieldCount === 1 && ds.frameCount === 1 && ds.rowCountTotal < 10 && ds.fieldCount === 1) {\n      list.append({\n        name: SuggestionName.Stat,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n            fields: '/.*/',\n          },\n          colorMode: BigValueColorMode.None,\n        },\n      });\n    }\n\n    if (ds.hasNumberField && ds.hasTimeField) {\n      list.append({\n        options: {\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull'],\n          },\n        },\n      });\n\n      list.append({\n        name: SuggestionName.StatColoredBackground,\n        options: {\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull'],\n          },\n          graphMode: BigValueGraphMode.None,\n          colorMode: BigValueColorMode.Background,\n        },\n      });\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}