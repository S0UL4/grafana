{"ast":null,"code":"/** @beta */\n\n/** @beta */\n\n/** @beta */\n\n/** @internal */\nexport function createBreakpoints() {\n  const step = 5;\n  const keys = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];\n  const unit = 'px';\n  const values = {\n    xs: 0,\n    sm: 544,\n    md: 769,\n    // 1 more than regular ipad in portrait\n    lg: 992,\n    xl: 1200,\n    xxl: 1440\n  };\n\n  function up(key) {\n    const value = typeof key === 'number' ? key : values[key];\n    return `@media (min-width:${value}${unit})`;\n  }\n\n  function down(key) {\n    const value = typeof key === 'number' ? key : values[key];\n    return `@media (max-width:${value - step / 100}${unit})`;\n  } // TODO add functions for between and only\n\n\n  return {\n    values,\n    up,\n    down,\n    keys,\n    unit\n  };\n}","map":{"version":3,"names":["createBreakpoints","step","keys","unit","values","xs","sm","md","lg","xl","xxl","up","key","value","down"],"sources":["/home/soula/grafana/packages/grafana-data/src/themes/breakpoints.ts"],"sourcesContent":["/** @beta */\nexport interface ThemeBreakpointValues {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n  xl: number;\n  xxl: number;\n}\n\n/** @beta */\nexport type ThemeBreakpointsKey = keyof ThemeBreakpointValues;\n\n/** @beta */\nexport interface ThemeBreakpoints {\n  values: ThemeBreakpointValues;\n  keys: string[];\n  unit: string;\n  up: (key: ThemeBreakpointsKey) => string;\n  down: (key: ThemeBreakpointsKey) => string;\n}\n\n/** @internal */\nexport function createBreakpoints(): ThemeBreakpoints {\n  const step = 5;\n  const keys = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];\n  const unit = 'px';\n  const values: ThemeBreakpointValues = {\n    xs: 0,\n    sm: 544,\n    md: 769, // 1 more than regular ipad in portrait\n    lg: 992,\n    xl: 1200,\n    xxl: 1440,\n  };\n\n  function up(key: ThemeBreakpointsKey | number) {\n    const value = typeof key === 'number' ? key : values[key];\n    return `@media (min-width:${value}${unit})`;\n  }\n\n  function down(key: ThemeBreakpointsKey | number) {\n    const value = typeof key === 'number' ? key : values[key];\n    return `@media (max-width:${value - step / 100}${unit})`;\n  }\n\n  // TODO add functions for between and only\n\n  return {\n    values,\n    up,\n    down,\n    keys,\n    unit,\n  };\n}\n"],"mappings":"AAAA;;AAUA;;AAGA;;AASA;AACA,OAAO,SAASA,iBAAT,GAA+C;EACpD,MAAMC,IAAI,GAAG,CAAb;EACA,MAAMC,IAAI,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,CAAb;EACA,MAAMC,IAAI,GAAG,IAAb;EACA,MAAMC,MAA6B,GAAG;IACpCC,EAAE,EAAE,CADgC;IAEpCC,EAAE,EAAE,GAFgC;IAGpCC,EAAE,EAAE,GAHgC;IAG3B;IACTC,EAAE,EAAE,GAJgC;IAKpCC,EAAE,EAAE,IALgC;IAMpCC,GAAG,EAAE;EAN+B,CAAtC;;EASA,SAASC,EAAT,CAAYC,GAAZ,EAA+C;IAC7C,MAAMC,KAAK,GAAG,OAAOD,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCR,MAAM,CAACQ,GAAD,CAApD;IACA,OAAQ,qBAAoBC,KAAM,GAAEV,IAAK,GAAzC;EACD;;EAED,SAASW,IAAT,CAAcF,GAAd,EAAiD;IAC/C,MAAMC,KAAK,GAAG,OAAOD,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCR,MAAM,CAACQ,GAAD,CAApD;IACA,OAAQ,qBAAoBC,KAAK,GAAGZ,IAAI,GAAG,GAAI,GAAEE,IAAK,GAAtD;EACD,CArBmD,CAuBpD;;;EAEA,OAAO;IACLC,MADK;IAELO,EAFK;IAGLG,IAHK;IAILZ,IAJK;IAKLC;EALK,CAAP;AAOD"},"metadata":{},"sourceType":"module"}