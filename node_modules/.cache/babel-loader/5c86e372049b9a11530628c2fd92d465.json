{"ast":null,"code":"import React, { memo, useMemo, useCallback } from 'react';\nimport { FieldMatcherID, fieldMatchers } from '@grafana/data';\nimport { Select } from '../Select/Select';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * UI to configure \"fields by frame refId\"-matcher.\n * @public\n */\nexport const FieldsByFrameRefIdMatcher = /*#__PURE__*/memo(props => {\n  const {\n    data,\n    options,\n    onChange: onChangeFromProps\n  } = props;\n  const referenceIDs = useFrameRefIds(data);\n  const selectOptions = useSelectOptions(referenceIDs);\n  const onChange = useCallback(selection => {\n    if (!selection.value || !referenceIDs.has(selection.value)) {\n      return;\n    }\n\n    return onChangeFromProps(selection.value);\n  }, [referenceIDs, onChangeFromProps]);\n  const selectedOption = selectOptions.find(v => v.value === options);\n  return /*#__PURE__*/_jsx(Select, {\n    value: selectedOption,\n    options: selectOptions,\n    onChange: onChange\n  });\n});\nFieldsByFrameRefIdMatcher.displayName = 'FieldsByFrameRefIdMatcher';\n/**\n * Registry item for UI to configure \"fields by frame refId\"-matcher.\n * @public\n */\n\nexport const fieldsByFrameRefIdItem = {\n  id: FieldMatcherID.byFrameRefID,\n  component: FieldsByFrameRefIdMatcher,\n  matcher: fieldMatchers.get(FieldMatcherID.byFrameRefID),\n  name: 'Fields returned by query',\n  description: 'Set properties for fields from a specific query',\n  optionsToLabel: options => options\n};\n\nconst useFrameRefIds = data => {\n  return useMemo(() => {\n    const refIds = new Set();\n\n    for (const frame of data) {\n      if (frame.refId) {\n        refIds.add(frame.refId);\n      }\n    }\n\n    return refIds;\n  }, [data]);\n};\n\nconst useSelectOptions = displayNames => {\n  return useMemo(() => {\n    return Array.from(displayNames).map(n => ({\n      value: n,\n      label: n\n    }));\n  }, [displayNames]);\n};","map":{"version":3,"names":["React","memo","useMemo","useCallback","FieldMatcherID","fieldMatchers","Select","FieldsByFrameRefIdMatcher","props","data","options","onChange","onChangeFromProps","referenceIDs","useFrameRefIds","selectOptions","useSelectOptions","selection","value","has","selectedOption","find","v","displayName","fieldsByFrameRefIdItem","id","byFrameRefID","component","matcher","get","name","description","optionsToLabel","refIds","Set","frame","refId","add","displayNames","Array","from","map","n","label"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/MatchersUI/FieldsByFrameRefIdMatcher.tsx"],"sourcesContent":["import React, { memo, useMemo, useCallback } from 'react';\n\nimport { FieldMatcherID, fieldMatchers, SelectableValue, DataFrame } from '@grafana/data';\n\nimport { Select } from '../Select/Select';\n\nimport { MatcherUIProps, FieldMatcherUIRegistryItem } from './types';\n\n/**\n * UI to configure \"fields by frame refId\"-matcher.\n * @public\n */\nexport const FieldsByFrameRefIdMatcher = memo<MatcherUIProps<string>>((props) => {\n  const { data, options, onChange: onChangeFromProps } = props;\n  const referenceIDs = useFrameRefIds(data);\n  const selectOptions = useSelectOptions(referenceIDs);\n\n  const onChange = useCallback(\n    (selection: SelectableValue<string>) => {\n      if (!selection.value || !referenceIDs.has(selection.value)) {\n        return;\n      }\n      return onChangeFromProps(selection.value);\n    },\n    [referenceIDs, onChangeFromProps]\n  );\n\n  const selectedOption = selectOptions.find((v) => v.value === options);\n  return <Select value={selectedOption} options={selectOptions} onChange={onChange} />;\n});\n\nFieldsByFrameRefIdMatcher.displayName = 'FieldsByFrameRefIdMatcher';\n\n/**\n * Registry item for UI to configure \"fields by frame refId\"-matcher.\n * @public\n */\nexport const fieldsByFrameRefIdItem: FieldMatcherUIRegistryItem<string> = {\n  id: FieldMatcherID.byFrameRefID,\n  component: FieldsByFrameRefIdMatcher,\n  matcher: fieldMatchers.get(FieldMatcherID.byFrameRefID),\n  name: 'Fields returned by query',\n  description: 'Set properties for fields from a specific query',\n  optionsToLabel: (options) => options,\n};\n\nconst useFrameRefIds = (data: DataFrame[]): Set<string> => {\n  return useMemo(() => {\n    const refIds: Set<string> = new Set();\n\n    for (const frame of data) {\n      if (frame.refId) {\n        refIds.add(frame.refId);\n      }\n    }\n\n    return refIds;\n  }, [data]);\n};\n\nconst useSelectOptions = (displayNames: Set<string>): Array<SelectableValue<string>> => {\n  return useMemo(() => {\n    return Array.from(displayNames).map((n) => ({\n      value: n,\n      label: n,\n    }));\n  }, [displayNames]);\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,WAA/B,QAAkD,OAAlD;AAEA,SAASC,cAAT,EAAyBC,aAAzB,QAA0E,eAA1E;AAEA,SAASC,MAAT,QAAuB,kBAAvB;;;AAIA;AACA;AACA;AACA;AACA,OAAO,MAAMC,yBAAyB,gBAAGN,IAAI,CAA0BO,KAAD,IAAW;EAC/E,MAAM;IAAEC,IAAF;IAAQC,OAAR;IAAiBC,QAAQ,EAAEC;EAA3B,IAAiDJ,KAAvD;EACA,MAAMK,YAAY,GAAGC,cAAc,CAACL,IAAD,CAAnC;EACA,MAAMM,aAAa,GAAGC,gBAAgB,CAACH,YAAD,CAAtC;EAEA,MAAMF,QAAQ,GAAGR,WAAW,CACzBc,SAAD,IAAwC;IACtC,IAAI,CAACA,SAAS,CAACC,KAAX,IAAoB,CAACL,YAAY,CAACM,GAAb,CAAiBF,SAAS,CAACC,KAA3B,CAAzB,EAA4D;MAC1D;IACD;;IACD,OAAON,iBAAiB,CAACK,SAAS,CAACC,KAAX,CAAxB;EACD,CANyB,EAO1B,CAACL,YAAD,EAAeD,iBAAf,CAP0B,CAA5B;EAUA,MAAMQ,cAAc,GAAGL,aAAa,CAACM,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACJ,KAAF,KAAYR,OAAtC,CAAvB;EACA,oBAAO,KAAC,MAAD;IAAQ,KAAK,EAAEU,cAAf;IAA+B,OAAO,EAAEL,aAAxC;IAAuD,QAAQ,EAAEJ;EAAjE,EAAP;AACD,CAjB4C,CAAtC;AAmBPJ,yBAAyB,CAACgB,WAA1B,GAAwC,2BAAxC;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,sBAA0D,GAAG;EACxEC,EAAE,EAAErB,cAAc,CAACsB,YADqD;EAExEC,SAAS,EAAEpB,yBAF6D;EAGxEqB,OAAO,EAAEvB,aAAa,CAACwB,GAAd,CAAkBzB,cAAc,CAACsB,YAAjC,CAH+D;EAIxEI,IAAI,EAAE,0BAJkE;EAKxEC,WAAW,EAAE,iDAL2D;EAMxEC,cAAc,EAAGtB,OAAD,IAAaA;AAN2C,CAAnE;;AASP,MAAMI,cAAc,GAAIL,IAAD,IAAoC;EACzD,OAAOP,OAAO,CAAC,MAAM;IACnB,MAAM+B,MAAmB,GAAG,IAAIC,GAAJ,EAA5B;;IAEA,KAAK,MAAMC,KAAX,IAAoB1B,IAApB,EAA0B;MACxB,IAAI0B,KAAK,CAACC,KAAV,EAAiB;QACfH,MAAM,CAACI,GAAP,CAAWF,KAAK,CAACC,KAAjB;MACD;IACF;;IAED,OAAOH,MAAP;EACD,CAVa,EAUX,CAACxB,IAAD,CAVW,CAAd;AAWD,CAZD;;AAcA,MAAMO,gBAAgB,GAAIsB,YAAD,IAA+D;EACtF,OAAOpC,OAAO,CAAC,MAAM;IACnB,OAAOqC,KAAK,CAACC,IAAN,CAAWF,YAAX,EAAyBG,GAAzB,CAA8BC,CAAD,KAAQ;MAC1CxB,KAAK,EAAEwB,CADmC;MAE1CC,KAAK,EAAED;IAFmC,CAAR,CAA7B,CAAP;EAID,CALa,EAKX,CAACJ,YAAD,CALW,CAAd;AAMD,CAPD"},"metadata":{},"sourceType":"module"}