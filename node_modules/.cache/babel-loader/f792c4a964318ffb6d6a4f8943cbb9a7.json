{"ast":null,"code":"const _excluded = [\"hide\", \"refId\", \"datasource\", \"key\", \"queryType\", \"maxLines\", \"metric\", \"intervalMs\", \"type\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { chunk, flatten, isString, isArray } from 'lodash';\nimport { from, lastValueFrom, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { DataSourceWithBackend, getBackendSrv, toDataQueryResponse } from '@grafana/runtime';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv } from 'app/features/templating/template_srv';\nimport { CloudMonitoringAnnotationSupport } from './annotationSupport';\nimport { EditorMode, QueryType } from './types';\nimport { CloudMonitoringVariableSupport } from './variables';\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend {\n  constructor(instanceSettings, templateSrv = getTemplateSrv(), timeSrv = getTimeSrv()) {\n    super(instanceSettings);\n\n    _defineProperty(this, \"authenticationType\", void 0);\n\n    _defineProperty(this, \"intervalMs\", void 0);\n\n    this.instanceSettings = instanceSettings;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.variables = new CloudMonitoringVariableSupport(this);\n    this.intervalMs = 0;\n    this.annotations = CloudMonitoringAnnotationSupport(this);\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map(v => `$${v.name}`);\n  }\n\n  query(request) {\n    request.targets = request.targets.map(t => Object.assign({}, this.migrateQuery(t), {\n      intervalMs: request.intervalMs\n    }));\n    return super.query(request);\n  }\n\n  applyTemplateVariables({\n    metricQuery,\n    refId,\n    queryType,\n    sloQuery,\n    type = 'timeSeriesQuery'\n  }, scopedVars) {\n    return {\n      datasource: this.getRef(),\n      refId,\n      intervalMs: this.intervalMs,\n      type,\n      queryType,\n      metricQuery: Object.assign({}, this.interpolateProps(metricQuery, scopedVars), {\n        projectName: this.templateSrv.replace(metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject(), scopedVars),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n        editorMode: metricQuery.editorMode\n      }),\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars)\n    };\n  }\n\n  async getLabels(metricType, refId, projectName, aggregation) {\n    var _aggregation$crossSer;\n\n    const options = {\n      targets: [{\n        refId,\n        datasource: this.getRef(),\n        queryType: QueryType.METRICS,\n        metricQuery: {\n          projectName: this.templateSrv.replace(projectName),\n          metricType: this.templateSrv.replace(metricType),\n          groupBys: this.interpolateGroupBys((aggregation === null || aggregation === void 0 ? void 0 : aggregation.groupBys) || [], {}),\n          crossSeriesReducer: (_aggregation$crossSer = aggregation === null || aggregation === void 0 ? void 0 : aggregation.crossSeriesReducer) !== null && _aggregation$crossSer !== void 0 ? _aggregation$crossSer : 'REDUCE_NONE',\n          view: 'HEADERS'\n        }\n      }],\n      range: this.timeSrv.timeRange()\n    };\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return lastValueFrom(of({\n        results: []\n      }));\n    }\n\n    return lastValueFrom(from(this.ensureGCEDefaultProject()).pipe(mergeMap(() => {\n      return getBackendSrv().fetch({\n        url: '/api/ds/query',\n        method: 'POST',\n        data: {\n          from: options.range.from.valueOf().toString(),\n          to: options.range.to.valueOf().toString(),\n          queries\n        }\n      });\n    }), map(({\n      data\n    }) => {\n      const dataQueryResponse = toDataQueryResponse({\n        data: data\n      });\n      const labels = dataQueryResponse === null || dataQueryResponse === void 0 ? void 0 : dataQueryResponse.data.map(f => {\n        var _f$meta, _f$meta$custom;\n\n        return (_f$meta = f.meta) === null || _f$meta === void 0 ? void 0 : (_f$meta$custom = _f$meta.custom) === null || _f$meta$custom === void 0 ? void 0 : _f$meta$custom.labels;\n      }).filter(p => !!p).reduce((acc, labels) => {\n        for (let key in labels) {\n          if (!acc[key]) {\n            acc[key] = new Set();\n          }\n\n          if (labels[key]) {\n            acc[key].add(labels[key]);\n          }\n        }\n\n        return acc;\n      }, {});\n      return Object.fromEntries(Object.entries(labels).map(l => {\n        l[1] = Array.from(l[1]);\n        return l;\n      }));\n    })));\n  }\n\n  async getGCEDefaultProject() {\n    return this.getResource(`gceDefaultProject`);\n  }\n\n  getDefaultProject() {\n    const {\n      defaultProject,\n      authenticationType,\n      gceDefaultProject\n    } = this.instanceSettings.jsonData;\n\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const {\n      authenticationType,\n      gceDefaultProject\n    } = this.instanceSettings.jsonData;\n\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName) {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(`metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`);\n  }\n\n  async getSLOServices(projectName) {\n    return this.getResource(`services/v3/projects/${this.templateSrv.replace(projectName)}/services?pageSize=1000`);\n  }\n\n  async getServiceLevelObjectives(projectName, serviceId) {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n\n    let {\n      projectName: p,\n      serviceId: s\n    } = this.interpolateProps({\n      projectName,\n      serviceId\n    });\n    return this.getResource(`slo-services/v3/projects/${p}/services/${s}/serviceLevelObjectives`);\n  }\n\n  getProjects() {\n    return this.getResource(`projects`);\n  }\n\n  migrateQuery(query) {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const _ref = query,\n            {\n        hide,\n        refId,\n        intervalMs,\n        type\n      } = _ref,\n            rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      return {\n        refId,\n        intervalMs,\n        type,\n        hide,\n        queryType: QueryType.METRICS,\n        metricQuery: Object.assign({}, rest, {\n          view: rest.view || 'FULL'\n        })\n      };\n    }\n\n    return query;\n  }\n\n  interpolateProps(object, scopedVars = {}) {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return Object.assign({}, acc, {\n        [key]: value && isString(value) ? this.templateSrv.replace(value, scopedVars) : value\n      });\n    }, {});\n  }\n\n  filterQuery(query) {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO && query.sloQuery) {\n      const {\n        selectorName,\n        serviceId,\n        sloId,\n        projectName\n      } = query.sloQuery;\n      return !!selectorName && !!serviceId && !!sloId && !!projectName;\n    }\n\n    if (query.queryType && query.queryType === QueryType.METRICS && query.metricQuery.editorMode === EditorMode.MQL) {\n      return !!query.metricQuery.projectName && !!query.metricQuery.query;\n    }\n\n    const {\n      metricType\n    } = query.metricQuery;\n    return !!metricType;\n  }\n\n  interpolateVariablesInQueries(queries, scopedVars) {\n    return queries.map(query => this.applyTemplateVariables(this.migrateQuery(query), scopedVars));\n  }\n\n  interpolateFilters(filters, scopedVars) {\n    const completeFilter = chunk(filters, 4).map(([key, operator, value, condition]) => Object.assign({\n      key,\n      operator,\n      value\n    }, condition && {\n      condition\n    })).filter(item => item.value);\n    const filterArray = flatten(completeFilter.map(({\n      key,\n      operator,\n      value,\n      condition\n    }) => [this.templateSrv.replace(key, scopedVars || {}), operator, this.templateSrv.replace(value, scopedVars || {}, value => {\n      return isArray(value) && value.length ? `(${value.join('|')})` : value;\n    }), ...(condition ? [condition] : [])]));\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys, scopedVars) {\n    let interpolatedGroupBys = [];\n    (groupBys || []).forEach(gb => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n\n}","map":{"version":3,"names":["chunk","flatten","isString","isArray","from","lastValueFrom","of","map","mergeMap","DataSourceWithBackend","getBackendSrv","toDataQueryResponse","getTimeSrv","getTemplateSrv","CloudMonitoringAnnotationSupport","EditorMode","QueryType","CloudMonitoringVariableSupport","CloudMonitoringDatasource","constructor","instanceSettings","templateSrv","timeSrv","authenticationType","jsonData","variables","intervalMs","annotations","getVariables","v","name","query","request","targets","t","migrateQuery","applyTemplateVariables","metricQuery","refId","queryType","sloQuery","type","scopedVars","datasource","getRef","interpolateProps","projectName","replace","getDefaultProject","filters","interpolateFilters","groupBys","interpolateGroupBys","view","editorMode","getLabels","metricType","aggregation","options","METRICS","crossSeriesReducer","range","timeRange","queries","length","results","ensureGCEDefaultProject","pipe","fetch","url","method","data","valueOf","toString","to","dataQueryResponse","labels","f","meta","custom","filter","p","reduce","acc","key","Set","add","Object","fromEntries","entries","l","Array","getGCEDefaultProject","getResource","defaultProject","gceDefaultProject","getMetricTypes","getSLOServices","getServiceLevelObjectives","serviceId","Promise","resolve","s","getProjects","hasOwnProperty","hide","rest","object","value","filterQuery","SLO","selectorName","sloId","MQL","interpolateVariablesInQueries","completeFilter","operator","condition","item","filterArray","join","interpolatedGroupBys","forEach","gb","interpolated","split","concat","push"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/datasource.ts"],"sourcesContent":["import { chunk, flatten, isString, isArray } from 'lodash';\nimport { from, lastValueFrom, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, toDataQueryResponse } from '@grafana/runtime';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { CloudMonitoringAnnotationSupport } from './annotationSupport';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  EditorMode,\n  Filter,\n  MetricDescriptor,\n  QueryType,\n  PostResponse,\n  Aggregation,\n} from './types';\nimport { CloudMonitoringVariableSupport } from './variables';\n\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend<\n  CloudMonitoringQuery,\n  CloudMonitoringOptions\n> {\n  authenticationType: string;\n  intervalMs: number;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.variables = new CloudMonitoringVariableSupport(this);\n    this.intervalMs = 0;\n    this.annotations = CloudMonitoringAnnotationSupport(this);\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  query(request: DataQueryRequest<CloudMonitoringQuery>): Observable<DataQueryResponse> {\n    request.targets = request.targets.map((t) => ({\n      ...this.migrateQuery(t),\n      intervalMs: request.intervalMs,\n    }));\n    return super.query(request);\n  }\n\n  applyTemplateVariables(\n    { metricQuery, refId, queryType, sloQuery, type = 'timeSeriesQuery' }: CloudMonitoringQuery,\n    scopedVars: ScopedVars\n  ): Record<string, any> {\n    return {\n      datasource: this.getRef(),\n      refId,\n      intervalMs: this.intervalMs,\n      type,\n      queryType,\n      metricQuery: {\n        ...this.interpolateProps(metricQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n        editorMode: metricQuery.editorMode,\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n    };\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, aggregation?: Aggregation) {\n    const options = {\n      targets: [\n        {\n          refId,\n          datasource: this.getRef(),\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: this.templateSrv.replace(projectName),\n            metricType: this.templateSrv.replace(metricType),\n            groupBys: this.interpolateGroupBys(aggregation?.groupBys || [], {}),\n            crossSeriesReducer: aggregation?.crossSeriesReducer ?? 'REDUCE_NONE',\n            view: 'HEADERS',\n          },\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<CloudMonitoringQuery>;\n\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return lastValueFrom(of({ results: [] }));\n    }\n\n    return lastValueFrom(\n      from(this.ensureGCEDefaultProject()).pipe(\n        mergeMap(() => {\n          return getBackendSrv().fetch<PostResponse>({\n            url: '/api/ds/query',\n            method: 'POST',\n            data: {\n              from: options.range.from.valueOf().toString(),\n              to: options.range.to.valueOf().toString(),\n              queries,\n            },\n          });\n        }),\n        map(({ data }) => {\n          const dataQueryResponse = toDataQueryResponse({\n            data: data,\n          });\n          const labels = dataQueryResponse?.data\n            .map((f) => f.meta?.custom?.labels)\n            .filter((p) => !!p)\n            .reduce((acc, labels) => {\n              for (let key in labels) {\n                if (!acc[key]) {\n                  acc[key] = new Set<string>();\n                }\n                if (labels[key]) {\n                  acc[key].add(labels[key]);\n                }\n              }\n              return acc;\n            }, {});\n          return Object.fromEntries(\n            Object.entries(labels).map((l: any) => {\n              l[1] = Array.from(l[1]);\n              return l;\n            })\n          );\n        })\n      )\n    );\n  }\n\n  async getGCEDefaultProject() {\n    return this.getResource(`gceDefaultProject`);\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(\n      `metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`\n    ) as Promise<MetricDescriptor[]>;\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`services/v3/projects/${this.templateSrv.replace(projectName)}/services?pageSize=1000`);\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.getResource(`slo-services/v3/projects/${p}/services/${s}/serviceLevelObjectives`);\n  }\n\n  getProjects(): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`projects`);\n  }\n\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, intervalMs, type, ...rest } = query as any;\n      return {\n        refId,\n        intervalMs,\n        type,\n        hide,\n        queryType: QueryType.METRICS,\n        metricQuery: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  filterQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO && query.sloQuery) {\n      const { selectorName, serviceId, sloId, projectName } = query.sloQuery;\n      return !!selectorName && !!serviceId && !!sloId && !!projectName;\n    }\n\n    if (query.queryType && query.queryType === QueryType.METRICS && query.metricQuery.editorMode === EditorMode.MQL) {\n      return !!query.metricQuery.projectName && !!query.metricQuery.query;\n    }\n\n    const { metricType } = query.metricQuery;\n\n    return !!metricType;\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map(\n      (query) => this.applyTemplateVariables(this.migrateQuery(query), scopedVars) as CloudMonitoringQuery\n    );\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter: Filter[] = chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .filter((item) => item.value);\n\n    const filterArray = flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, (value: string | string[]) => {\n          return isArray(value) && value.length ? `(${value.join('|')})` : value;\n        }),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach((gb) => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}