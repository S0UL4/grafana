{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { find, map, without } from 'lodash';\nimport { transformers } from './transformers';\nexport class TablePanelEditorCtrl {\n  /** @ngInject */\n  constructor($scope, uiSegmentSrv) {\n    _defineProperty(this, \"panel\", void 0);\n\n    _defineProperty(this, \"panelCtrl\", void 0);\n\n    _defineProperty(this, \"transformers\", void 0);\n\n    _defineProperty(this, \"fontSizes\", void 0);\n\n    _defineProperty(this, \"addColumnSegment\", void 0);\n\n    _defineProperty(this, \"getColumnNames\", void 0);\n\n    _defineProperty(this, \"canSetColumns\", false);\n\n    _defineProperty(this, \"columnsHelpMessage\", '');\n\n    this.uiSegmentSrv = uiSegmentSrv;\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.transformers = transformers;\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.addColumnSegment = uiSegmentSrv.newPlusButton();\n    this.updateTransformHints();\n  }\n\n  updateTransformHints() {\n    this.canSetColumns = false;\n    this.columnsHelpMessage = '';\n\n    switch (this.panel.transform) {\n      case 'timeseries_aggregations':\n        {\n          this.canSetColumns = true;\n          break;\n        }\n\n      case 'json':\n        {\n          this.canSetColumns = true;\n          break;\n        }\n\n      case 'table':\n        {\n          this.columnsHelpMessage = 'Columns and their order are determined by the data query';\n        }\n    }\n  }\n\n  getColumnOptions() {\n    if (!this.panelCtrl.dataRaw) {\n      return Promise.resolve([]);\n    }\n\n    const columns = this.transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const segments = map(columns, c => this.uiSegmentSrv.newSegment({\n      value: c.text\n    }));\n    return Promise.resolve(segments);\n  }\n\n  addColumn() {\n    const columns = transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const column = find(columns, {\n      text: this.addColumnSegment.value\n    });\n\n    if (column) {\n      this.panel.columns.push(column);\n      this.render();\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.addColumnSegment.html = plusButton.html;\n    this.addColumnSegment.value = plusButton.value;\n  }\n\n  transformChanged() {\n    this.panel.columns = [];\n\n    if (this.panel.transform === 'annotations') {\n      this.panelCtrl.refresh();\n    } else {\n      if (this.panel.transform === 'timeseries_aggregations') {\n        this.panel.columns.push({\n          text: 'Avg',\n          value: 'avg'\n        });\n      }\n\n      this.updateTransformHints();\n      this.render();\n    }\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  removeColumn(column) {\n    this.panel.columns = without(this.panel.columns, column);\n    this.panelCtrl.render();\n  }\n\n}\nTablePanelEditorCtrl.$inject = [\"$scope\", \"uiSegmentSrv\"];\nexport function tablePanelEditor(uiSegmentSrv) {\n  'use strict';\n\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table-old/editor.html',\n    controller: TablePanelEditorCtrl\n  };\n}","map":{"version":3,"names":["find","map","without","transformers","TablePanelEditorCtrl","constructor","$scope","uiSegmentSrv","editor","panelCtrl","ctrl","panel","fontSizes","addColumnSegment","newPlusButton","updateTransformHints","canSetColumns","columnsHelpMessage","transform","getColumnOptions","dataRaw","Promise","resolve","columns","getColumns","segments","c","newSegment","value","text","addColumn","column","push","render","plusButton","html","transformChanged","refresh","removeColumn","tablePanelEditor","restrict","scope","templateUrl","controller"],"sources":["/home/soula/grafana/public/app/plugins/panel/table-old/editor.ts"],"sourcesContent":["import { find, map, without } from 'lodash';\n\nimport { transformers } from './transformers';\nimport { ColumnStyle } from './types';\n\nexport class TablePanelEditorCtrl {\n  panel: any;\n  panelCtrl: any;\n  transformers: any;\n  fontSizes: any;\n  addColumnSegment: any;\n  getColumnNames: any;\n  canSetColumns = false;\n  columnsHelpMessage = '';\n\n  /** @ngInject */\n  constructor($scope: any, private uiSegmentSrv: any) {\n    $scope.editor = this;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.transformers = transformers;\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\n    this.addColumnSegment = uiSegmentSrv.newPlusButton();\n    this.updateTransformHints();\n  }\n\n  updateTransformHints() {\n    this.canSetColumns = false;\n    this.columnsHelpMessage = '';\n\n    switch (this.panel.transform) {\n      case 'timeseries_aggregations': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'json': {\n        this.canSetColumns = true;\n        break;\n      }\n      case 'table': {\n        this.columnsHelpMessage = 'Columns and their order are determined by the data query';\n      }\n    }\n  }\n\n  getColumnOptions() {\n    if (!this.panelCtrl.dataRaw) {\n      return Promise.resolve([]);\n    }\n    const columns = this.transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const segments = map(columns, (c: any) => this.uiSegmentSrv.newSegment({ value: c.text }));\n    return Promise.resolve(segments);\n  }\n\n  addColumn() {\n    const columns = transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\n    const column: any = find(columns, { text: this.addColumnSegment.value });\n\n    if (column) {\n      this.panel.columns.push(column);\n      this.render();\n    }\n\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    this.addColumnSegment.html = plusButton.html;\n    this.addColumnSegment.value = plusButton.value;\n  }\n\n  transformChanged() {\n    this.panel.columns = [];\n    if (this.panel.transform === 'annotations') {\n      this.panelCtrl.refresh();\n    } else {\n      if (this.panel.transform === 'timeseries_aggregations') {\n        this.panel.columns.push({ text: 'Avg', value: 'avg' });\n      }\n\n      this.updateTransformHints();\n      this.render();\n    }\n  }\n\n  render() {\n    this.panelCtrl.render();\n  }\n\n  removeColumn(column: ColumnStyle) {\n    this.panel.columns = without(this.panel.columns, column);\n    this.panelCtrl.render();\n  }\n}\n\nexport function tablePanelEditor(uiSegmentSrv: any) {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/plugins/panel/table-old/editor.html',\n    controller: TablePanelEditorCtrl,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}