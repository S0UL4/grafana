{"ast":null,"code":"var _VariableSectionHeade, _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineFieldRow, VerticalGroup } from '@grafana/ui';\nimport { SelectionOptionsEditor } from '../editor/SelectionOptionsEditor';\nimport { VariableSectionHeader } from '../editor/VariableSectionHeader';\nimport { VariableSelectField } from '../editor/VariableSelectField';\nimport { VariableTextField } from '../editor/VariableTextField';\nimport { initialVariableEditorState } from '../editor/reducer';\nimport { getDatasourceVariableEditorState } from '../editor/selectors';\nimport { changeVariableMultiValue } from '../state/actions';\nimport { getVariablesState } from '../state/selectors';\nimport { initDataSourceVariableEditor } from './actions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    variable: {\n      rootStateKey\n    }\n  } = ownProps;\n\n  if (!rootStateKey) {\n    console.error('DataSourceVariableEditor: variable has no rootStateKey');\n    return {\n      extended: getDatasourceVariableEditorState(initialVariableEditorState)\n    };\n  }\n\n  const {\n    editor\n  } = getVariablesState(rootStateKey, state);\n  return {\n    extended: getDatasourceVariableEditorState(editor)\n  };\n};\n\nconst mapDispatchToProps = {\n  initDataSourceVariableEditor,\n  changeVariableMultiValue\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport class DataSourceVariableEditorUnConnected extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onRegExChange\", event => {\n      this.props.onPropChange({\n        propName: 'regex',\n        propValue: event.currentTarget.value\n      });\n    });\n\n    _defineProperty(this, \"onRegExBlur\", event => {\n      this.props.onPropChange({\n        propName: 'regex',\n        propValue: event.currentTarget.value,\n        updateOptions: true\n      });\n    });\n\n    _defineProperty(this, \"onSelectionOptionsChange\", async ({\n      propValue,\n      propName\n    }) => {\n      this.props.onPropChange({\n        propName,\n        propValue,\n        updateOptions: true\n      });\n    });\n\n    _defineProperty(this, \"getSelectedDataSourceTypeValue\", () => {\n      const {\n        extended\n      } = this.props;\n\n      if (!(extended !== null && extended !== void 0 && extended.dataSourceTypes.length)) {\n        return '';\n      }\n\n      const foundItem = extended.dataSourceTypes.find(ds => ds.value === this.props.variable.query);\n      const value = foundItem ? foundItem.value : extended.dataSourceTypes[0].value;\n      return value !== null && value !== void 0 ? value : '';\n    });\n\n    _defineProperty(this, \"onDataSourceTypeChanged\", option => {\n      this.props.onPropChange({\n        propName: 'query',\n        propValue: option.value,\n        updateOptions: true\n      });\n    });\n  }\n\n  componentDidMount() {\n    const {\n      rootStateKey\n    } = this.props.variable;\n\n    if (!rootStateKey) {\n      console.error('DataSourceVariableEditor: variable has no rootStateKey');\n      return;\n    }\n\n    this.props.initDataSourceVariableEditor(rootStateKey);\n  }\n\n  render() {\n    var _extended$dataSourceT, _extended$dataSourceT2, _typeOptions$find;\n\n    const {\n      variable,\n      extended,\n      changeVariableMultiValue\n    } = this.props;\n    const typeOptions = extended !== null && extended !== void 0 && (_extended$dataSourceT = extended.dataSourceTypes) !== null && _extended$dataSourceT !== void 0 && _extended$dataSourceT.length ? (_extended$dataSourceT2 = extended.dataSourceTypes) === null || _extended$dataSourceT2 === void 0 ? void 0 : _extended$dataSourceT2.map(ds => {\n      var _ds$value;\n\n      return {\n        value: (_ds$value = ds.value) !== null && _ds$value !== void 0 ? _ds$value : '',\n        label: ds.text\n      };\n    }) : [];\n    const typeValue = (_typeOptions$find = typeOptions.find(o => o.value === variable.query)) !== null && _typeOptions$find !== void 0 ? _typeOptions$find : typeOptions[0];\n    return /*#__PURE__*/_jsxs(VerticalGroup, {\n      spacing: \"xs\",\n      children: [_VariableSectionHeade || (_VariableSectionHeade = /*#__PURE__*/_jsx(VariableSectionHeader, {\n        name: \"Data source options\"\n      })), /*#__PURE__*/_jsxs(VerticalGroup, {\n        spacing: \"md\",\n        children: [/*#__PURE__*/_jsxs(VerticalGroup, {\n          spacing: \"xs\",\n          children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n            children: /*#__PURE__*/_jsx(VariableSelectField, {\n              name: \"Type\",\n              value: typeValue,\n              options: typeOptions,\n              onChange: this.onDataSourceTypeChanged,\n              labelWidth: 10,\n              testId: selectors.pages.Dashboard.Settings.Variables.Edit.DatasourceVariable.datasourceSelect\n            })\n          }), /*#__PURE__*/_jsx(InlineFieldRow, {\n            children: /*#__PURE__*/_jsx(VariableTextField, {\n              value: this.props.variable.regex,\n              name: \"Instance name filter\",\n              placeholder: \"/.*-(.*)-.*/\",\n              onChange: this.onRegExChange,\n              onBlur: this.onRegExBlur,\n              labelWidth: 20,\n              tooltip: _div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n                children: [\"Regex filter for which data source instances to choose from in the variable value list. Leave empty for all.\", /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), \"Example: \", /*#__PURE__*/_jsx(\"code\", {\n                  children: \"/^prod/\"\n                })]\n              }))\n            })\n          })]\n        }), /*#__PURE__*/_jsx(SelectionOptionsEditor, {\n          variable: variable,\n          onPropChange: this.onSelectionOptionsChange,\n          onMultiChanged: changeVariableMultiValue\n        })]\n      })]\n    });\n  }\n\n}\nexport const DataSourceVariableEditor = connector(DataSourceVariableEditorUnConnected);","map":{"version":3,"names":["React","PureComponent","connect","selectors","InlineFieldRow","VerticalGroup","SelectionOptionsEditor","VariableSectionHeader","VariableSelectField","VariableTextField","initialVariableEditorState","getDatasourceVariableEditorState","changeVariableMultiValue","getVariablesState","initDataSourceVariableEditor","mapStateToProps","state","ownProps","variable","rootStateKey","console","error","extended","editor","mapDispatchToProps","connector","DataSourceVariableEditorUnConnected","event","props","onPropChange","propName","propValue","currentTarget","value","updateOptions","dataSourceTypes","length","foundItem","find","ds","query","option","componentDidMount","render","typeOptions","map","label","text","typeValue","o","onDataSourceTypeChanged","pages","Dashboard","Settings","Variables","Edit","DatasourceVariable","datasourceSelect","regex","onRegExChange","onRegExBlur","onSelectionOptionsChange","DataSourceVariableEditor"],"sources":["/home/soula/grafana/public/app/features/variables/datasource/DataSourceVariableEditor.tsx"],"sourcesContent":["import React, { FormEvent, PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineFieldRow, VerticalGroup } from '@grafana/ui';\n\nimport { StoreState } from '../../../types';\nimport { SelectionOptionsEditor } from '../editor/SelectionOptionsEditor';\nimport { VariableSectionHeader } from '../editor/VariableSectionHeader';\nimport { VariableSelectField } from '../editor/VariableSelectField';\nimport { VariableTextField } from '../editor/VariableTextField';\nimport { initialVariableEditorState } from '../editor/reducer';\nimport { getDatasourceVariableEditorState } from '../editor/selectors';\nimport { OnPropChangeArguments, VariableEditorProps } from '../editor/types';\nimport { changeVariableMultiValue } from '../state/actions';\nimport { getVariablesState } from '../state/selectors';\nimport { DataSourceVariableModel, VariableWithMultiSupport } from '../types';\n\nimport { initDataSourceVariableEditor } from './actions';\n\nconst mapStateToProps = (state: StoreState, ownProps: OwnProps) => {\n  const {\n    variable: { rootStateKey },\n  } = ownProps;\n  if (!rootStateKey) {\n    console.error('DataSourceVariableEditor: variable has no rootStateKey');\n    return {\n      extended: getDatasourceVariableEditorState(initialVariableEditorState),\n    };\n  }\n\n  const { editor } = getVariablesState(rootStateKey, state);\n  return {\n    extended: getDatasourceVariableEditorState(editor),\n  };\n};\n\nconst mapDispatchToProps = {\n  initDataSourceVariableEditor,\n  changeVariableMultiValue,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport interface OwnProps extends VariableEditorProps<DataSourceVariableModel> {}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DataSourceVariableEditorUnConnected extends PureComponent<Props> {\n  componentDidMount() {\n    const { rootStateKey } = this.props.variable;\n    if (!rootStateKey) {\n      console.error('DataSourceVariableEditor: variable has no rootStateKey');\n      return;\n    }\n\n    this.props.initDataSourceVariableEditor(rootStateKey);\n  }\n\n  onRegExChange = (event: FormEvent<HTMLInputElement>) => {\n    this.props.onPropChange({\n      propName: 'regex',\n      propValue: event.currentTarget.value,\n    });\n  };\n\n  onRegExBlur = (event: FormEvent<HTMLInputElement>) => {\n    this.props.onPropChange({\n      propName: 'regex',\n      propValue: event.currentTarget.value,\n      updateOptions: true,\n    });\n  };\n\n  onSelectionOptionsChange = async ({ propValue, propName }: OnPropChangeArguments<VariableWithMultiSupport>) => {\n    this.props.onPropChange({ propName, propValue, updateOptions: true });\n  };\n\n  getSelectedDataSourceTypeValue = (): string => {\n    const { extended } = this.props;\n\n    if (!extended?.dataSourceTypes.length) {\n      return '';\n    }\n\n    const foundItem = extended.dataSourceTypes.find((ds) => ds.value === this.props.variable.query);\n    const value = foundItem ? foundItem.value : extended.dataSourceTypes[0].value;\n    return value ?? '';\n  };\n\n  onDataSourceTypeChanged = (option: SelectableValue<string>) => {\n    this.props.onPropChange({ propName: 'query', propValue: option.value, updateOptions: true });\n  };\n\n  render() {\n    const { variable, extended, changeVariableMultiValue } = this.props;\n\n    const typeOptions = extended?.dataSourceTypes?.length\n      ? extended.dataSourceTypes?.map((ds) => ({ value: ds.value ?? '', label: ds.text }))\n      : [];\n\n    const typeValue = typeOptions.find((o) => o.value === variable.query) ?? typeOptions[0];\n\n    return (\n      <VerticalGroup spacing=\"xs\">\n        <VariableSectionHeader name=\"Data source options\" />\n        <VerticalGroup spacing=\"md\">\n          <VerticalGroup spacing=\"xs\">\n            <InlineFieldRow>\n              <VariableSelectField\n                name=\"Type\"\n                value={typeValue}\n                options={typeOptions}\n                onChange={this.onDataSourceTypeChanged}\n                labelWidth={10}\n                testId={selectors.pages.Dashboard.Settings.Variables.Edit.DatasourceVariable.datasourceSelect}\n              />\n            </InlineFieldRow>\n            <InlineFieldRow>\n              <VariableTextField\n                value={this.props.variable.regex}\n                name=\"Instance name filter\"\n                placeholder=\"/.*-(.*)-.*/\"\n                onChange={this.onRegExChange}\n                onBlur={this.onRegExBlur}\n                labelWidth={20}\n                tooltip={\n                  <div>\n                    Regex filter for which data source instances to choose from in the variable value list. Leave empty\n                    for all.\n                    <br />\n                    <br />\n                    Example: <code>/^prod/</code>\n                  </div>\n                }\n              />\n            </InlineFieldRow>\n          </VerticalGroup>\n\n          <SelectionOptionsEditor\n            variable={variable}\n            onPropChange={this.onSelectionOptionsChange}\n            onMultiChanged={changeVariableMultiValue}\n          />\n        </VerticalGroup>\n      </VerticalGroup>\n    );\n  }\n}\n\nexport const DataSourceVariableEditor = connector(DataSourceVariableEditorUnConnected);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}