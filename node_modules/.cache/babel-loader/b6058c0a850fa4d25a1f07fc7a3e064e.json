{"ast":null,"code":"var _Icon;\n\nimport { isEmpty, uniq } from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Icon, MultiSelect } from '@grafana/ui';\nimport { useUnifiedAlertingSelector } from 'app/features/alerting/unified/hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromRulesAction } from 'app/features/alerting/unified/state/actions';\nimport { getAllRulesSourceNames } from 'app/features/alerting/unified/utils/datasource';\nimport { isAsyncRequestMapSliceFulfilled, isAsyncRequestMapSlicePending } from 'app/features/alerting/unified/utils/redux';\nimport { PromRuleType } from 'app/types/unified-alerting-dto';\nimport { isPrivateLabel } from './util';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const GroupBy = props => {\n  const {\n    onChange,\n    id,\n    defaultValue\n  } = props;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchAllPromRulesAction());\n  }, [dispatch]);\n  const promRulesByDatasource = useUnifiedAlertingSelector(state => state.promRules);\n  const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n  const allRequestsReady = isAsyncRequestMapSliceFulfilled(promRulesByDatasource);\n  const loading = isAsyncRequestMapSlicePending(promRulesByDatasource);\n  const labels = useMemo(() => {\n    if (isEmpty(promRulesByDatasource)) {\n      return [];\n    }\n\n    if (!allRequestsReady) {\n      return [];\n    }\n\n    const allLabels = rulesDataSourceNames.flatMap(datasource => {\n      var _promRulesByDatasourc;\n\n      return (_promRulesByDatasourc = promRulesByDatasource[datasource].result) !== null && _promRulesByDatasourc !== void 0 ? _promRulesByDatasourc : [];\n    }).flatMap(rules => rules.groups).flatMap(group => group.rules.filter(rule => rule.type === PromRuleType.Alerting)).flatMap(rule => {\n      var _rule$alerts;\n\n      return (_rule$alerts = rule.alerts) !== null && _rule$alerts !== void 0 ? _rule$alerts : [];\n    }).map(alert => {\n      var _alert$labels;\n\n      return Object.keys((_alert$labels = alert.labels) !== null && _alert$labels !== void 0 ? _alert$labels : {});\n    }).flatMap(labels => labels.filter(isPrivateLabel));\n    return uniq(allLabels);\n  }, [allRequestsReady, promRulesByDatasource, rulesDataSourceNames]);\n  return /*#__PURE__*/_jsx(MultiSelect, {\n    id: id,\n    isLoading: loading,\n    defaultValue: defaultValue,\n    \"aria-label\": 'group by label keys',\n    placeholder: \"Group by\",\n    prefix: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n      name: 'tag-alt'\n    })),\n    onChange: items => {\n      onChange(items.map(item => {\n        var _item$value;\n\n        return (_item$value = item.value) !== null && _item$value !== void 0 ? _item$value : '';\n      }));\n    },\n    options: labels.map(key => ({\n      label: key,\n      value: key\n    }))\n  });\n};","map":{"version":3,"names":["isEmpty","uniq","React","useEffect","useMemo","useDispatch","Icon","MultiSelect","useUnifiedAlertingSelector","fetchAllPromRulesAction","getAllRulesSourceNames","isAsyncRequestMapSliceFulfilled","isAsyncRequestMapSlicePending","PromRuleType","isPrivateLabel","GroupBy","props","onChange","id","defaultValue","dispatch","promRulesByDatasource","state","promRules","rulesDataSourceNames","allRequestsReady","loading","labels","allLabels","flatMap","datasource","result","rules","groups","group","filter","rule","type","Alerting","alerts","map","alert","Object","keys","items","item","value","key","label"],"sources":["/home/soula/grafana/public/app/plugins/panel/alertlist/GroupByWithLoading.tsx"],"sourcesContent":["import { isEmpty, uniq } from 'lodash';\nimport React, { FC, useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, MultiSelect } from '@grafana/ui';\nimport { useUnifiedAlertingSelector } from 'app/features/alerting/unified/hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromRulesAction } from 'app/features/alerting/unified/state/actions';\nimport { getAllRulesSourceNames } from 'app/features/alerting/unified/utils/datasource';\nimport {\n  isAsyncRequestMapSliceFulfilled,\n  isAsyncRequestMapSlicePending,\n} from 'app/features/alerting/unified/utils/redux';\nimport { AlertingRule } from 'app/types/unified-alerting';\nimport { PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport { isPrivateLabel } from './util';\n\ninterface Props {\n  id: string;\n  defaultValue: SelectableValue<string>;\n  onChange: (keys: string[]) => void;\n}\n\nexport const GroupBy: FC<Props> = (props) => {\n  const { onChange, id, defaultValue } = props;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllPromRulesAction());\n  }, [dispatch]);\n\n  const promRulesByDatasource = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n\n  const allRequestsReady = isAsyncRequestMapSliceFulfilled(promRulesByDatasource);\n  const loading = isAsyncRequestMapSlicePending(promRulesByDatasource);\n\n  const labels = useMemo(() => {\n    if (isEmpty(promRulesByDatasource)) {\n      return [];\n    }\n\n    if (!allRequestsReady) {\n      return [];\n    }\n\n    const allLabels = rulesDataSourceNames\n      .flatMap((datasource) => promRulesByDatasource[datasource].result ?? [])\n      .flatMap((rules) => rules.groups)\n      .flatMap((group) => group.rules.filter((rule): rule is AlertingRule => rule.type === PromRuleType.Alerting))\n      .flatMap((rule) => rule.alerts ?? [])\n      .map((alert) => Object.keys(alert.labels ?? {}))\n      .flatMap((labels) => labels.filter(isPrivateLabel));\n\n    return uniq(allLabels);\n  }, [allRequestsReady, promRulesByDatasource, rulesDataSourceNames]);\n\n  return (\n    <MultiSelect<string>\n      id={id}\n      isLoading={loading}\n      defaultValue={defaultValue}\n      aria-label={'group by label keys'}\n      placeholder=\"Group by\"\n      prefix={<Icon name={'tag-alt'} />}\n      onChange={(items) => {\n        onChange(items.map((item) => item.value ?? ''));\n      }}\n      options={labels.map<SelectableValue>((key) => ({\n        label: key,\n        value: key,\n      }))}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}