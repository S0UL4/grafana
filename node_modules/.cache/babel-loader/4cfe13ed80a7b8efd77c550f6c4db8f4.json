{"ast":null,"code":"const _excluded = [\"value\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useCallback } from 'react';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { useRulesSourcesWithRuler } from '../../hooks/useRuleSourcesWithRuler';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function CloudRulesSourcePicker(_ref) {\n  let {\n    value\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const rulesSourcesWithRuler = useRulesSourcesWithRuler();\n  const dataSourceFilter = useCallback(ds => {\n    return !!rulesSourcesWithRuler.find(({\n      id\n    }) => id === ds.id);\n  }, [rulesSourcesWithRuler]);\n  return /*#__PURE__*/_jsx(DataSourcePicker, Object.assign({\n    noDefault: true,\n    alerting: true,\n    filter: dataSourceFilter,\n    current: value\n  }, props));\n}","map":{"version":3,"names":["React","useCallback","DataSourcePicker","useRulesSourcesWithRuler","CloudRulesSourcePicker","value","props","rulesSourcesWithRuler","dataSourceFilter","ds","find","id"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/CloudRulesSourcePicker.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\n\nimport { useRulesSourcesWithRuler } from '../../hooks/useRuleSourcesWithRuler';\n\ninterface Props {\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  value: string | null;\n  onBlur?: () => void;\n  name?: string;\n}\n\nexport function CloudRulesSourcePicker({ value, ...props }: Props): JSX.Element {\n  const rulesSourcesWithRuler = useRulesSourcesWithRuler();\n\n  const dataSourceFilter = useCallback(\n    (ds: DataSourceInstanceSettings): boolean => {\n      return !!rulesSourcesWithRuler.find(({ id }) => id === ds.id);\n    },\n    [rulesSourcesWithRuler]\n  );\n\n  return <DataSourcePicker noDefault alerting filter={dataSourceFilter} current={value} {...props} />;\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AAGA,SAASC,gBAAT,QAAiC,kBAAjC;AAEA,SAASC,wBAAT,QAAyC,qCAAzC;;AASA,OAAO,SAASC,sBAAT,OAAyE;EAAA,IAAzC;IAAEC;EAAF,CAAyC;EAAA,IAA7BC,KAA6B;;EAC9E,MAAMC,qBAAqB,GAAGJ,wBAAwB,EAAtD;EAEA,MAAMK,gBAAgB,GAAGP,WAAW,CACjCQ,EAAD,IAA6C;IAC3C,OAAO,CAAC,CAACF,qBAAqB,CAACG,IAAtB,CAA2B,CAAC;MAAEC;IAAF,CAAD,KAAYA,EAAE,KAAKF,EAAE,CAACE,EAAjD,CAAT;EACD,CAHiC,EAIlC,CAACJ,qBAAD,CAJkC,CAApC;EAOA,oBAAO,KAAC,gBAAD;IAAkB,SAAS,MAA3B;IAA4B,QAAQ,MAApC;IAAqC,MAAM,EAAEC,gBAA7C;IAA+D,OAAO,EAAEH;EAAxE,GAAmFC,KAAnF,EAAP;AACD"},"metadata":{},"sourceType":"module"}