{"ast":null,"code":"function isRegex(text) {\n  return /^\\/.*\\/$/.test(text);\n} // FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\n\n\nexport function getOperator(tag) {\n  var _tag$operator;\n\n  return (_tag$operator = tag.operator) !== null && _tag$operator !== void 0 ? _tag$operator : isRegex(tag.value) ? '=~' : '=';\n} // FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\n\nexport function getCondition(tag, isFirst) {\n  var _tag$condition;\n\n  return isFirst ? undefined : (_tag$condition = tag.condition) !== null && _tag$condition !== void 0 ? _tag$condition : 'AND';\n}\nexport function adjustOperatorIfNeeded(currentOperator, newTagValue) {\n  const isCurrentOperatorRegex = currentOperator === '=~' || currentOperator === '!~';\n  const isNewTagValueRegex = isRegex(newTagValue);\n\n  if (isNewTagValueRegex) {\n    return isCurrentOperatorRegex ? currentOperator : '=~';\n  } else {\n    return isCurrentOperatorRegex ? '=' : currentOperator;\n  }\n}","map":{"version":3,"names":["isRegex","text","test","getOperator","tag","operator","value","getCondition","isFirst","undefined","condition","adjustOperatorIfNeeded","currentOperator","newTagValue","isCurrentOperatorRegex","isNewTagValueRegex"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/tagUtils.ts"],"sourcesContent":["import { InfluxQueryTag } from '../../types';\n\nfunction isRegex(text: string): boolean {\n  return /^\\/.*\\/$/.test(text);\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getOperator(tag: InfluxQueryTag): string {\n  return tag.operator ?? (isRegex(tag.value) ? '=~' : '=');\n}\n\n// FIXME: sync these to the query-string-generation-code\n// probably it's in influx_query_model.ts\nexport function getCondition(tag: InfluxQueryTag, isFirst: boolean): string | undefined {\n  return isFirst ? undefined : tag.condition ?? 'AND';\n}\n\nexport function adjustOperatorIfNeeded(currentOperator: string, newTagValue: string): string {\n  const isCurrentOperatorRegex = currentOperator === '=~' || currentOperator === '!~';\n  const isNewTagValueRegex = isRegex(newTagValue);\n\n  if (isNewTagValueRegex) {\n    return isCurrentOperatorRegex ? currentOperator : '=~';\n  } else {\n    return isCurrentOperatorRegex ? '=' : currentOperator;\n  }\n}\n"],"mappings":"AAEA,SAASA,OAAT,CAAiBC,IAAjB,EAAwC;EACtC,OAAO,WAAWC,IAAX,CAAgBD,IAAhB,CAAP;AACD,C,CAED;AACA;;;AACA,OAAO,SAASE,WAAT,CAAqBC,GAArB,EAAkD;EAAA;;EACvD,wBAAOA,GAAG,CAACC,QAAX,yDAAwBL,OAAO,CAACI,GAAG,CAACE,KAAL,CAAP,GAAqB,IAArB,GAA4B,GAApD;AACD,C,CAED;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBH,GAAtB,EAA2CI,OAA3C,EAAiF;EAAA;;EACtF,OAAOA,OAAO,GAAGC,SAAH,qBAAeL,GAAG,CAACM,SAAnB,2DAAgC,KAA9C;AACD;AAED,OAAO,SAASC,sBAAT,CAAgCC,eAAhC,EAAyDC,WAAzD,EAAsF;EAC3F,MAAMC,sBAAsB,GAAGF,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,IAA/E;EACA,MAAMG,kBAAkB,GAAGf,OAAO,CAACa,WAAD,CAAlC;;EAEA,IAAIE,kBAAJ,EAAwB;IACtB,OAAOD,sBAAsB,GAAGF,eAAH,GAAqB,IAAlD;EACD,CAFD,MAEO;IACL,OAAOE,sBAAsB,GAAG,GAAH,GAASF,eAAtC;EACD;AACF"},"metadata":{},"sourceType":"module"}