{"ast":null,"code":"import { FieldType } from '../../../types/dataFrame';\nimport { ValueMatcherID } from '../ids';\nconst isGreaterValueMatcher = {\n  id: ValueMatcherID.greater,\n  name: 'Is greater',\n  description: 'Match when field value is greater than option.',\n  get: options => {\n    return (valueIndex, field) => {\n      const value = field.values.get(valueIndex);\n\n      if (isNaN(value)) {\n        return false;\n      }\n\n      return value > options.value;\n    };\n  },\n  getOptionsDisplayText: options => {\n    return `Matches all rows where field value is greater than: ${options.value}.`;\n  },\n  isApplicable: field => field.type === FieldType.number,\n  getDefaultOptions: () => ({\n    value: 0\n  })\n};\nconst isGreaterOrEqualValueMatcher = {\n  id: ValueMatcherID.greaterOrEqual,\n  name: 'Is greater or equal',\n  description: 'Match when field value is greater than or equal to option.',\n  get: options => {\n    return (valueIndex, field) => {\n      const value = field.values.get(valueIndex);\n\n      if (isNaN(value)) {\n        return false;\n      }\n\n      return value >= options.value;\n    };\n  },\n  getOptionsDisplayText: options => {\n    return `Matches all rows where field value is greater than or equal to: ${options.value}.`;\n  },\n  isApplicable: field => field.type === FieldType.number,\n  getDefaultOptions: () => ({\n    value: 0\n  })\n};\nconst isLowerValueMatcher = {\n  id: ValueMatcherID.lower,\n  name: 'Is lower',\n  description: 'Match when field value is lower than option.',\n  get: options => {\n    return (valueIndex, field) => {\n      const value = field.values.get(valueIndex);\n\n      if (isNaN(value)) {\n        return false;\n      }\n\n      return value < options.value;\n    };\n  },\n  getOptionsDisplayText: options => {\n    return `Matches all rows where field value is lower than: ${options.value}.`;\n  },\n  isApplicable: field => field.type === FieldType.number,\n  getDefaultOptions: () => ({\n    value: 0\n  })\n};\nconst isLowerOrEqualValueMatcher = {\n  id: ValueMatcherID.lowerOrEqual,\n  name: 'Is lower or equal',\n  description: 'Match when field value is lower or equal than option.',\n  get: options => {\n    return (valueIndex, field) => {\n      const value = field.values.get(valueIndex);\n\n      if (isNaN(value)) {\n        return false;\n      }\n\n      return value <= options.value;\n    };\n  },\n  getOptionsDisplayText: options => {\n    return `Matches all rows where field value is lower or equal than: ${options.value}.`;\n  },\n  isApplicable: field => field.type === FieldType.number,\n  getDefaultOptions: () => ({\n    value: 0\n  })\n};\nexport const getNumericValueMatchers = () => [isGreaterValueMatcher, isGreaterOrEqualValueMatcher, isLowerValueMatcher, isLowerOrEqualValueMatcher];","map":{"version":3,"names":["FieldType","ValueMatcherID","isGreaterValueMatcher","id","greater","name","description","get","options","valueIndex","field","value","values","isNaN","getOptionsDisplayText","isApplicable","type","number","getDefaultOptions","isGreaterOrEqualValueMatcher","greaterOrEqual","isLowerValueMatcher","lower","isLowerOrEqualValueMatcher","lowerOrEqual","getNumericValueMatchers"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/matchers/valueMatchers/numericMatchers.ts"],"sourcesContent":["import { Field, FieldType } from '../../../types/dataFrame';\nimport { ValueMatcherInfo } from '../../../types/transformations';\nimport { ValueMatcherID } from '../ids';\n\nimport { BasicValueMatcherOptions } from './types';\n\nconst isGreaterValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions<number>> = {\n  id: ValueMatcherID.greater,\n  name: 'Is greater',\n  description: 'Match when field value is greater than option.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values.get(valueIndex);\n      if (isNaN(value)) {\n        return false;\n      }\n      return value > options.value;\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is greater than: ${options.value}.`;\n  },\n  isApplicable: (field) => field.type === FieldType.number,\n  getDefaultOptions: () => ({ value: 0 }),\n};\n\nconst isGreaterOrEqualValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions<number>> = {\n  id: ValueMatcherID.greaterOrEqual,\n  name: 'Is greater or equal',\n  description: 'Match when field value is greater than or equal to option.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values.get(valueIndex);\n      if (isNaN(value)) {\n        return false;\n      }\n      return value >= options.value;\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is greater than or equal to: ${options.value}.`;\n  },\n  isApplicable: (field) => field.type === FieldType.number,\n  getDefaultOptions: () => ({ value: 0 }),\n};\n\nconst isLowerValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions<number>> = {\n  id: ValueMatcherID.lower,\n  name: 'Is lower',\n  description: 'Match when field value is lower than option.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values.get(valueIndex);\n      if (isNaN(value)) {\n        return false;\n      }\n      return value < options.value;\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is lower than: ${options.value}.`;\n  },\n  isApplicable: (field) => field.type === FieldType.number,\n  getDefaultOptions: () => ({ value: 0 }),\n};\n\nconst isLowerOrEqualValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions<number>> = {\n  id: ValueMatcherID.lowerOrEqual,\n  name: 'Is lower or equal',\n  description: 'Match when field value is lower or equal than option.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values.get(valueIndex);\n      if (isNaN(value)) {\n        return false;\n      }\n      return value <= options.value;\n    };\n  },\n  getOptionsDisplayText: (options) => {\n    return `Matches all rows where field value is lower or equal than: ${options.value}.`;\n  },\n  isApplicable: (field) => field.type === FieldType.number,\n  getDefaultOptions: () => ({ value: 0 }),\n};\n\nexport const getNumericValueMatchers = (): ValueMatcherInfo[] => [\n  isGreaterValueMatcher,\n  isGreaterOrEqualValueMatcher,\n  isLowerValueMatcher,\n  isLowerOrEqualValueMatcher,\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}