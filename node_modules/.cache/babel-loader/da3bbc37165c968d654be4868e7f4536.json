{"ast":null,"code":"var _InlineFormLabel, _span;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { CoreApp, getDefaultTimeRange, LoadingState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker, getDataSourceSrv } from '@grafana/runtime';\nimport { Button, CustomScrollbar, HorizontalGroup, InlineFormLabel, Modal, stylesFactory } from '@grafana/ui';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport config from 'app/core/config';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { addQuery } from 'app/core/utils/query';\nimport { dataSource as expressionDatasource } from 'app/features/expressions/ExpressionDatasource';\nimport { DashboardQueryEditor, isSharedDashboardQuery } from 'app/plugins/datasource/dashboard';\nimport { updateQueries } from '../state/updateQueries';\nimport { GroupActionComponents } from './QueryActionComponent';\nimport { QueryEditorRows } from './QueryEditorRows';\nimport { QueryGroupOptionsEditor } from './QueryGroupOptions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class QueryGroup extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"backendSrv\", backendSrv);\n\n    _defineProperty(this, \"dataSourceSrv\", getDataSourceSrv());\n\n    _defineProperty(this, \"querySubscription\", null);\n\n    _defineProperty(this, \"state\", {\n      isLoadingHelp: false,\n      helpContent: null,\n      isPickerOpen: false,\n      isAddingMixed: false,\n      isHelpOpen: false,\n      queries: [],\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange()\n      }\n    });\n\n    _defineProperty(this, \"onChangeDataSource\", async newSettings => {\n      const {\n        dsSettings\n      } = this.state;\n      const currentDS = dsSettings ? await getDataSourceSrv().get(dsSettings.uid) : undefined;\n      const nextDS = await getDataSourceSrv().get(newSettings.uid); // We need to pass in newSettings.uid as well here as that can be a variable expression and we want to store that in the query model not the current ds variable value\n\n      const queries = await updateQueries(nextDS, newSettings.uid, this.state.queries, currentDS);\n      const dataSource = await this.dataSourceSrv.get(newSettings.name);\n      this.onChange({\n        queries,\n        dataSource: {\n          name: newSettings.name,\n          uid: newSettings.uid,\n          type: newSettings.meta.id,\n          default: newSettings.isDefault\n        }\n      });\n      this.setState({\n        queries,\n        dataSource: dataSource,\n        dsSettings: newSettings\n      });\n    });\n\n    _defineProperty(this, \"onAddQueryClick\", () => {\n      const {\n        queries\n      } = this.state;\n      this.onQueriesChange(addQuery(queries, this.newQuery()));\n      this.onScrollBottom();\n    });\n\n    _defineProperty(this, \"onAddExpressionClick\", () => {\n      this.onQueriesChange(addQuery(this.state.queries, expressionDatasource.newQuery()));\n      this.onScrollBottom();\n    });\n\n    _defineProperty(this, \"onScrollBottom\", () => {\n      setTimeout(() => {\n        if (this.state.scrollElement) {\n          this.state.scrollElement.scrollTo({\n            top: 10000\n          });\n        }\n      }, 20);\n    });\n\n    _defineProperty(this, \"onUpdateAndRun\", options => {\n      this.props.onOptionsChange(options);\n      this.props.onRunQueries();\n    });\n\n    _defineProperty(this, \"onOpenHelp\", () => {\n      this.setState({\n        isHelpOpen: true\n      });\n    });\n\n    _defineProperty(this, \"onCloseHelp\", () => {\n      this.setState({\n        isHelpOpen: false\n      });\n    });\n\n    _defineProperty(this, \"renderMixedPicker\", () => {\n      return /*#__PURE__*/_jsx(DataSourcePicker, {\n        mixed: false,\n        onChange: this.onAddMixedQuery,\n        current: null,\n        autoFocus: true,\n        variables: true,\n        onBlur: this.onMixedPickerBlur,\n        openMenuOnFocus: true\n      });\n    });\n\n    _defineProperty(this, \"onAddMixedQuery\", datasource => {\n      this.onAddQuery({\n        datasource: datasource.name\n      });\n      this.setState({\n        isAddingMixed: false\n      });\n    });\n\n    _defineProperty(this, \"onMixedPickerBlur\", () => {\n      this.setState({\n        isAddingMixed: false\n      });\n    });\n\n    _defineProperty(this, \"onAddQuery\", query => {\n      const {\n        dsSettings,\n        queries\n      } = this.state;\n      this.onQueriesChange(addQuery(queries, query, {\n        type: dsSettings === null || dsSettings === void 0 ? void 0 : dsSettings.type,\n        uid: dsSettings === null || dsSettings === void 0 ? void 0 : dsSettings.uid\n      }));\n      this.onScrollBottom();\n    });\n\n    _defineProperty(this, \"onQueriesChange\", queries => {\n      this.onChange({\n        queries\n      });\n      this.setState({\n        queries\n      });\n    });\n\n    _defineProperty(this, \"setScrollRef\", scrollElement => {\n      this.setState({\n        scrollElement\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      queryRunner,\n      options\n    } = this.props;\n    this.querySubscription = queryRunner.getData({\n      withTransforms: false,\n      withFieldConfig: false\n    }).subscribe({\n      next: data => this.onPanelDataUpdate(data)\n    });\n\n    try {\n      const ds = await this.dataSourceSrv.get(options.dataSource);\n      const dsSettings = this.dataSourceSrv.getInstanceSettings(options.dataSource);\n      const defaultDataSource = await this.dataSourceSrv.get();\n      const datasource = ds.getRef();\n      const queries = options.queries.map(q => q.datasource ? q : Object.assign({}, q, {\n        datasource\n      }));\n      this.setState({\n        queries,\n        dataSource: ds,\n        dsSettings,\n        defaultDataSource\n      });\n    } catch (error) {\n      console.log('failed to load data source', error);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  onPanelDataUpdate(data) {\n    this.setState({\n      data\n    });\n  }\n\n  newQuery() {\n    var _this$state$dataSourc, _this$state$dataSourc2;\n\n    const {\n      dsSettings,\n      defaultDataSource\n    } = this.state;\n    const ds = !(dsSettings !== null && dsSettings !== void 0 && dsSettings.meta.mixed) ? dsSettings : defaultDataSource;\n    return Object.assign({}, (_this$state$dataSourc = this.state.dataSource) === null || _this$state$dataSourc === void 0 ? void 0 : (_this$state$dataSourc2 = _this$state$dataSourc.getDefaultQuery) === null || _this$state$dataSourc2 === void 0 ? void 0 : _this$state$dataSourc2.call(_this$state$dataSourc, CoreApp.PanelEditor), {\n      datasource: {\n        uid: ds === null || ds === void 0 ? void 0 : ds.uid,\n        type: ds === null || ds === void 0 ? void 0 : ds.type\n      }\n    });\n  }\n\n  onChange(changedProps) {\n    this.props.onOptionsChange(Object.assign({}, this.props.options, changedProps));\n  }\n\n  renderTopSection(styles) {\n    const {\n      onOpenQueryInspector,\n      options\n    } = this.props;\n    const {\n      dataSource,\n      data\n    } = this.state;\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.dataSourceRow,\n        children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/_jsx(InlineFormLabel, {\n          htmlFor: \"data-source-picker\",\n          width: 'auto',\n          children: \"Data source\"\n        })), /*#__PURE__*/_jsx(\"div\", {\n          className: styles.dataSourceRowItem,\n          children: /*#__PURE__*/_jsx(DataSourcePicker, {\n            onChange: this.onChangeDataSource,\n            current: options.dataSource,\n            metrics: true,\n            mixed: true,\n            dashboard: true,\n            variables: true\n          })\n        }), dataSource && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: styles.dataSourceRowItem,\n            children: /*#__PURE__*/_jsx(Button, {\n              variant: \"secondary\",\n              icon: \"question-circle\",\n              title: \"Open data source help\",\n              onClick: this.onOpenHelp\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.dataSourceRowItemOptions,\n            children: /*#__PURE__*/_jsx(QueryGroupOptionsEditor, {\n              options: options,\n              dataSource: dataSource,\n              data: data,\n              onChange: this.onUpdateAndRun\n            })\n          }), onOpenQueryInspector && /*#__PURE__*/_jsx(\"div\", {\n            className: styles.dataSourceRowItem,\n            children: /*#__PURE__*/_jsx(Button, {\n              variant: \"secondary\",\n              onClick: onOpenQueryInspector,\n              \"aria-label\": selectors.components.QueryTab.queryInspectorButton,\n              children: \"Query inspector\"\n            })\n          })]\n        })]\n      })\n    });\n  }\n\n  renderQueries(dsSettings) {\n    const {\n      onRunQueries\n    } = this.props;\n    const {\n      data,\n      queries\n    } = this.state;\n\n    if (isSharedDashboardQuery(dsSettings.name)) {\n      return /*#__PURE__*/_jsx(DashboardQueryEditor, {\n        queries: queries,\n        panelData: data,\n        onChange: this.onQueriesChange,\n        onRunQueries: onRunQueries\n      });\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      \"aria-label\": selectors.components.QueryTab.content,\n      children: /*#__PURE__*/_jsx(QueryEditorRows, {\n        queries: queries,\n        dsSettings: dsSettings,\n        onQueriesChange: this.onQueriesChange,\n        onAddQuery: this.onAddQuery,\n        onRunQueries: onRunQueries,\n        data: data\n      })\n    });\n  }\n\n  isExpressionsSupported(dsSettings) {\n    return (dsSettings.meta.alerting || dsSettings.meta.mixed) === true;\n  }\n\n  renderExtraActions() {\n    return GroupActionComponents.getAllExtraRenderAction().map((action, index) => action({\n      onAddQuery: this.onAddQuery,\n      onChangeDataSource: this.onChangeDataSource,\n      key: index\n    })).filter(Boolean);\n  }\n\n  renderAddQueryRow(dsSettings, styles) {\n    const {\n      isAddingMixed\n    } = this.state;\n    const showAddButton = !(isAddingMixed || isSharedDashboardQuery(dsSettings.name));\n    return /*#__PURE__*/_jsxs(HorizontalGroup, {\n      spacing: \"md\",\n      align: \"flex-start\",\n      children: [showAddButton && /*#__PURE__*/_jsx(Button, {\n        icon: \"plus\",\n        onClick: this.onAddQueryClick,\n        variant: \"secondary\",\n        \"aria-label\": selectors.components.QueryTab.addQuery,\n        children: \"Query\"\n      }), config.expressionsEnabled && this.isExpressionsSupported(dsSettings) && /*#__PURE__*/_jsx(Button, {\n        icon: \"plus\",\n        onClick: this.onAddExpressionClick,\n        variant: \"secondary\",\n        className: styles.expressionButton,\n        children: _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          children: \"Expression\\xA0\"\n        }))\n      }), this.renderExtraActions()]\n    });\n  }\n\n  render() {\n    const {\n      isHelpOpen,\n      dsSettings\n    } = this.state;\n    const styles = getStyles();\n    return /*#__PURE__*/_jsx(CustomScrollbar, {\n      autoHeightMin: \"100%\",\n      scrollRefCallback: this.setScrollRef,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.innerWrapper,\n        children: [this.renderTopSection(styles), dsSettings && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: styles.queriesWrapper,\n            children: this.renderQueries(dsSettings)\n          }), this.renderAddQueryRow(dsSettings, styles), isHelpOpen && /*#__PURE__*/_jsx(Modal, {\n            title: \"Data source help\",\n            isOpen: true,\n            onDismiss: this.onCloseHelp,\n            children: /*#__PURE__*/_jsx(PluginHelp, {\n              plugin: dsSettings.meta,\n              type: \"query_help\"\n            })\n          })]\n        })]\n      })\n    });\n  }\n\n}\nconst getStyles = stylesFactory(() => {\n  const {\n    theme\n  } = config;\n  return {\n    innerWrapper: css`\n      display: flex;\n      flex-direction: column;\n      padding: ${theme.spacing.md};\n    `,\n    dataSourceRow: css`\n      display: flex;\n      margin-bottom: ${theme.spacing.md};\n    `,\n    dataSourceRowItem: css`\n      margin-right: ${theme.spacing.inlineFormMargin};\n    `,\n    dataSourceRowItemOptions: css`\n      flex-grow: 1;\n      margin-right: ${theme.spacing.inlineFormMargin};\n    `,\n    queriesWrapper: css`\n      padding-bottom: 16px;\n    `,\n    expressionWrapper: css``,\n    expressionButton: css`\n      margin-right: ${theme.spacing.sm};\n    `\n  };\n});","map":{"version":3,"names":["css","React","PureComponent","CoreApp","getDefaultTimeRange","LoadingState","selectors","DataSourcePicker","getDataSourceSrv","Button","CustomScrollbar","HorizontalGroup","InlineFormLabel","Modal","stylesFactory","PluginHelp","config","backendSrv","addQuery","dataSource","expressionDatasource","DashboardQueryEditor","isSharedDashboardQuery","updateQueries","GroupActionComponents","QueryEditorRows","QueryGroupOptionsEditor","QueryGroup","isLoadingHelp","helpContent","isPickerOpen","isAddingMixed","isHelpOpen","queries","data","state","NotStarted","series","timeRange","newSettings","dsSettings","currentDS","get","uid","undefined","nextDS","dataSourceSrv","name","onChange","type","meta","id","default","isDefault","setState","onQueriesChange","newQuery","onScrollBottom","setTimeout","scrollElement","scrollTo","top","options","props","onOptionsChange","onRunQueries","onAddMixedQuery","onMixedPickerBlur","datasource","onAddQuery","query","componentDidMount","queryRunner","querySubscription","getData","withTransforms","withFieldConfig","subscribe","next","onPanelDataUpdate","ds","getInstanceSettings","defaultDataSource","getRef","map","q","error","console","log","componentWillUnmount","unsubscribe","mixed","getDefaultQuery","PanelEditor","changedProps","renderTopSection","styles","onOpenQueryInspector","dataSourceRow","dataSourceRowItem","onChangeDataSource","onOpenHelp","dataSourceRowItemOptions","onUpdateAndRun","components","QueryTab","queryInspectorButton","renderQueries","content","isExpressionsSupported","alerting","renderExtraActions","getAllExtraRenderAction","action","index","key","filter","Boolean","renderAddQueryRow","showAddButton","onAddQueryClick","expressionsEnabled","onAddExpressionClick","expressionButton","render","getStyles","setScrollRef","innerWrapper","queriesWrapper","onCloseHelp","theme","spacing","md","inlineFormMargin","expressionWrapper","sm"],"sources":["/home/soula/grafana/public/app/features/query/components/QueryGroup.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker, getDataSourceSrv } from '@grafana/runtime';\nimport { Button, CustomScrollbar, HorizontalGroup, InlineFormLabel, Modal, stylesFactory } from '@grafana/ui';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport config from 'app/core/config';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { addQuery } from 'app/core/utils/query';\nimport { dataSource as expressionDatasource } from 'app/features/expressions/ExpressionDatasource';\nimport { DashboardQueryEditor, isSharedDashboardQuery } from 'app/plugins/datasource/dashboard';\nimport { QueryGroupOptions } from 'app/types';\n\nimport { PanelQueryRunner } from '../state/PanelQueryRunner';\nimport { updateQueries } from '../state/updateQueries';\n\nimport { GroupActionComponents } from './QueryActionComponent';\nimport { QueryEditorRows } from './QueryEditorRows';\nimport { QueryGroupOptionsEditor } from './QueryGroupOptions';\n\ninterface Props {\n  queryRunner: PanelQueryRunner;\n  options: QueryGroupOptions;\n  onOpenQueryInspector?: () => void;\n  onRunQueries: () => void;\n  onOptionsChange: (options: QueryGroupOptions) => void;\n}\n\ninterface State {\n  dataSource?: DataSourceApi;\n  dsSettings?: DataSourceInstanceSettings;\n  queries: DataQuery[];\n  helpContent: React.ReactNode;\n  isLoadingHelp: boolean;\n  isPickerOpen: boolean;\n  isAddingMixed: boolean;\n  data: PanelData;\n  isHelpOpen: boolean;\n  defaultDataSource?: DataSourceApi;\n  scrollElement?: HTMLDivElement;\n}\n\nexport class QueryGroup extends PureComponent<Props, State> {\n  backendSrv = backendSrv;\n  dataSourceSrv = getDataSourceSrv();\n  querySubscription: Unsubscribable | null = null;\n\n  state: State = {\n    isLoadingHelp: false,\n    helpContent: null,\n    isPickerOpen: false,\n    isAddingMixed: false,\n    isHelpOpen: false,\n    queries: [],\n    data: {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n    },\n  };\n\n  async componentDidMount() {\n    const { queryRunner, options } = this.props;\n\n    this.querySubscription = queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n      next: (data: PanelData) => this.onPanelDataUpdate(data),\n    });\n\n    try {\n      const ds = await this.dataSourceSrv.get(options.dataSource);\n      const dsSettings = this.dataSourceSrv.getInstanceSettings(options.dataSource);\n      const defaultDataSource = await this.dataSourceSrv.get();\n      const datasource = ds.getRef();\n      const queries = options.queries.map((q) => (q.datasource ? q : { ...q, datasource }));\n      this.setState({ queries, dataSource: ds, dsSettings, defaultDataSource });\n    } catch (error) {\n      console.log('failed to load data source', error);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    this.setState({ data });\n  }\n\n  onChangeDataSource = async (newSettings: DataSourceInstanceSettings) => {\n    const { dsSettings } = this.state;\n    const currentDS = dsSettings ? await getDataSourceSrv().get(dsSettings.uid) : undefined;\n    const nextDS = await getDataSourceSrv().get(newSettings.uid);\n\n    // We need to pass in newSettings.uid as well here as that can be a variable expression and we want to store that in the query model not the current ds variable value\n    const queries = await updateQueries(nextDS, newSettings.uid, this.state.queries, currentDS);\n\n    const dataSource = await this.dataSourceSrv.get(newSettings.name);\n    this.onChange({\n      queries,\n      dataSource: {\n        name: newSettings.name,\n        uid: newSettings.uid,\n        type: newSettings.meta.id,\n        default: newSettings.isDefault,\n      },\n    });\n\n    this.setState({\n      queries,\n      dataSource: dataSource,\n      dsSettings: newSettings,\n    });\n  };\n\n  onAddQueryClick = () => {\n    const { queries } = this.state;\n    this.onQueriesChange(addQuery(queries, this.newQuery()));\n    this.onScrollBottom();\n  };\n\n  newQuery(): Partial<DataQuery> {\n    const { dsSettings, defaultDataSource } = this.state;\n\n    const ds = !dsSettings?.meta.mixed ? dsSettings : defaultDataSource;\n\n    return {\n      ...this.state.dataSource?.getDefaultQuery?.(CoreApp.PanelEditor),\n      datasource: { uid: ds?.uid, type: ds?.type },\n    };\n  }\n\n  onChange(changedProps: Partial<QueryGroupOptions>) {\n    this.props.onOptionsChange({\n      ...this.props.options,\n      ...changedProps,\n    });\n  }\n\n  onAddExpressionClick = () => {\n    this.onQueriesChange(addQuery(this.state.queries, expressionDatasource.newQuery()));\n    this.onScrollBottom();\n  };\n\n  onScrollBottom = () => {\n    setTimeout(() => {\n      if (this.state.scrollElement) {\n        this.state.scrollElement.scrollTo({ top: 10000 });\n      }\n    }, 20);\n  };\n\n  onUpdateAndRun = (options: QueryGroupOptions) => {\n    this.props.onOptionsChange(options);\n    this.props.onRunQueries();\n  };\n\n  renderTopSection(styles: QueriesTabStyles) {\n    const { onOpenQueryInspector, options } = this.props;\n    const { dataSource, data } = this.state;\n\n    return (\n      <div>\n        <div className={styles.dataSourceRow}>\n          <InlineFormLabel htmlFor=\"data-source-picker\" width={'auto'}>\n            Data source\n          </InlineFormLabel>\n          <div className={styles.dataSourceRowItem}>\n            <DataSourcePicker\n              onChange={this.onChangeDataSource}\n              current={options.dataSource}\n              metrics={true}\n              mixed={true}\n              dashboard={true}\n              variables={true}\n            />\n          </div>\n          {dataSource && (\n            <>\n              <div className={styles.dataSourceRowItem}>\n                <Button\n                  variant=\"secondary\"\n                  icon=\"question-circle\"\n                  title=\"Open data source help\"\n                  onClick={this.onOpenHelp}\n                />\n              </div>\n              <div className={styles.dataSourceRowItemOptions}>\n                <QueryGroupOptionsEditor\n                  options={options}\n                  dataSource={dataSource}\n                  data={data}\n                  onChange={this.onUpdateAndRun}\n                />\n              </div>\n              {onOpenQueryInspector && (\n                <div className={styles.dataSourceRowItem}>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={onOpenQueryInspector}\n                    aria-label={selectors.components.QueryTab.queryInspectorButton}\n                  >\n                    Query inspector\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  onOpenHelp = () => {\n    this.setState({ isHelpOpen: true });\n  };\n\n  onCloseHelp = () => {\n    this.setState({ isHelpOpen: false });\n  };\n\n  renderMixedPicker = () => {\n    return (\n      <DataSourcePicker\n        mixed={false}\n        onChange={this.onAddMixedQuery}\n        current={null}\n        autoFocus={true}\n        variables={true}\n        onBlur={this.onMixedPickerBlur}\n        openMenuOnFocus={true}\n      />\n    );\n  };\n\n  onAddMixedQuery = (datasource: any) => {\n    this.onAddQuery({ datasource: datasource.name });\n    this.setState({ isAddingMixed: false });\n  };\n\n  onMixedPickerBlur = () => {\n    this.setState({ isAddingMixed: false });\n  };\n\n  onAddQuery = (query: Partial<DataQuery>) => {\n    const { dsSettings, queries } = this.state;\n    this.onQueriesChange(addQuery(queries, query, { type: dsSettings?.type, uid: dsSettings?.uid }));\n    this.onScrollBottom();\n  };\n\n  onQueriesChange = (queries: DataQuery[]) => {\n    this.onChange({ queries });\n    this.setState({ queries });\n  };\n\n  renderQueries(dsSettings: DataSourceInstanceSettings) {\n    const { onRunQueries } = this.props;\n    const { data, queries } = this.state;\n\n    if (isSharedDashboardQuery(dsSettings.name)) {\n      return (\n        <DashboardQueryEditor\n          queries={queries}\n          panelData={data}\n          onChange={this.onQueriesChange}\n          onRunQueries={onRunQueries}\n        />\n      );\n    }\n\n    return (\n      <div aria-label={selectors.components.QueryTab.content}>\n        <QueryEditorRows\n          queries={queries}\n          dsSettings={dsSettings}\n          onQueriesChange={this.onQueriesChange}\n          onAddQuery={this.onAddQuery}\n          onRunQueries={onRunQueries}\n          data={data}\n        />\n      </div>\n    );\n  }\n\n  isExpressionsSupported(dsSettings: DataSourceInstanceSettings): boolean {\n    return (dsSettings.meta.alerting || dsSettings.meta.mixed) === true;\n  }\n\n  renderExtraActions() {\n    return GroupActionComponents.getAllExtraRenderAction()\n      .map((action, index) =>\n        action({\n          onAddQuery: this.onAddQuery,\n          onChangeDataSource: this.onChangeDataSource,\n          key: index,\n        })\n      )\n      .filter(Boolean);\n  }\n\n  renderAddQueryRow(dsSettings: DataSourceInstanceSettings, styles: QueriesTabStyles) {\n    const { isAddingMixed } = this.state;\n    const showAddButton = !(isAddingMixed || isSharedDashboardQuery(dsSettings.name));\n\n    return (\n      <HorizontalGroup spacing=\"md\" align=\"flex-start\">\n        {showAddButton && (\n          <Button\n            icon=\"plus\"\n            onClick={this.onAddQueryClick}\n            variant=\"secondary\"\n            aria-label={selectors.components.QueryTab.addQuery}\n          >\n            Query\n          </Button>\n        )}\n        {config.expressionsEnabled && this.isExpressionsSupported(dsSettings) && (\n          <Button\n            icon=\"plus\"\n            onClick={this.onAddExpressionClick}\n            variant=\"secondary\"\n            className={styles.expressionButton}\n          >\n            <span>Expression&nbsp;</span>\n          </Button>\n        )}\n        {this.renderExtraActions()}\n      </HorizontalGroup>\n    );\n  }\n\n  setScrollRef = (scrollElement: HTMLDivElement): void => {\n    this.setState({ scrollElement });\n  };\n\n  render() {\n    const { isHelpOpen, dsSettings } = this.state;\n    const styles = getStyles();\n\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\" scrollRefCallback={this.setScrollRef}>\n        <div className={styles.innerWrapper}>\n          {this.renderTopSection(styles)}\n          {dsSettings && (\n            <>\n              <div className={styles.queriesWrapper}>{this.renderQueries(dsSettings)}</div>\n              {this.renderAddQueryRow(dsSettings, styles)}\n              {isHelpOpen && (\n                <Modal title=\"Data source help\" isOpen={true} onDismiss={this.onCloseHelp}>\n                  <PluginHelp plugin={dsSettings.meta} type=\"query_help\" />\n                </Modal>\n              )}\n            </>\n          )}\n        </div>\n      </CustomScrollbar>\n    );\n  }\n}\n\nconst getStyles = stylesFactory(() => {\n  const { theme } = config;\n\n  return {\n    innerWrapper: css`\n      display: flex;\n      flex-direction: column;\n      padding: ${theme.spacing.md};\n    `,\n    dataSourceRow: css`\n      display: flex;\n      margin-bottom: ${theme.spacing.md};\n    `,\n    dataSourceRowItem: css`\n      margin-right: ${theme.spacing.inlineFormMargin};\n    `,\n    dataSourceRowItemOptions: css`\n      flex-grow: 1;\n      margin-right: ${theme.spacing.inlineFormMargin};\n    `,\n    queriesWrapper: css`\n      padding-bottom: 16px;\n    `,\n    expressionWrapper: css``,\n    expressionButton: css`\n      margin-right: ${theme.spacing.sm};\n    `,\n  };\n});\n\ntype QueriesTabStyles = ReturnType<typeof getStyles>;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}