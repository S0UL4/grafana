{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { set } from 'lodash';\nimport { FieldConfigOptionsRegistry } from '../field';\nimport { GrafanaPlugin } from '../types';\nimport { deprecationWarning } from '../utils';\nimport { PanelOptionsEditorBuilder } from '../utils/OptionsUIBuilders';\nimport { createFieldConfigRegistry } from './registryFactories';\n/** @beta */\n\nexport class PanelPlugin extends GrafanaPlugin {\n  /**\n   * Legacy angular ctrl.  If this exists it will be used instead of the panel\n   */\n  constructor(panel) {\n    super();\n\n    _defineProperty(this, \"_defaults\", void 0);\n\n    _defineProperty(this, \"_fieldConfigDefaults\", {\n      defaults: {},\n      overrides: []\n    });\n\n    _defineProperty(this, \"_fieldConfigRegistry\", void 0);\n\n    _defineProperty(this, \"_initConfigRegistry\", () => {\n      return new FieldConfigOptionsRegistry();\n    });\n\n    _defineProperty(this, \"optionsSupplier\", void 0);\n\n    _defineProperty(this, \"suggestionsSupplier\", void 0);\n\n    _defineProperty(this, \"panel\", void 0);\n\n    _defineProperty(this, \"editor\", void 0);\n\n    _defineProperty(this, \"onPanelMigration\", void 0);\n\n    _defineProperty(this, \"onPanelTypeChanged\", void 0);\n\n    _defineProperty(this, \"noPadding\", void 0);\n\n    _defineProperty(this, \"dataSupport\", {\n      annotations: false,\n      alertStates: false\n    });\n\n    _defineProperty(this, \"angularPanelCtrl\", void 0);\n\n    this.panel = panel;\n  }\n\n  get defaults() {\n    let result = this._defaults || {};\n\n    if (!this._defaults && this.optionsSupplier) {\n      const builder = new PanelOptionsEditorBuilder();\n      this.optionsSupplier(builder, {\n        data: []\n      });\n\n      for (const item of builder.getItems()) {\n        if (item.defaultValue != null) {\n          set(result, item.path, item.defaultValue);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  get fieldConfigDefaults() {\n    const configDefaults = this._fieldConfigDefaults.defaults;\n    configDefaults.custom = {};\n\n    for (const option of this.fieldConfigRegistry.list()) {\n      if (option.defaultValue === undefined) {\n        continue;\n      }\n\n      set(configDefaults, option.id, option.defaultValue);\n    }\n\n    return {\n      defaults: Object.assign({}, configDefaults),\n      overrides: this._fieldConfigDefaults.overrides\n    };\n  }\n  /**\n   * @deprecated setDefaults is deprecated in favor of setPanelOptions\n   */\n\n\n  setDefaults(defaults) {\n    deprecationWarning('PanelPlugin', 'setDefaults', 'setPanelOptions');\n    this._defaults = defaults;\n    return this;\n  }\n\n  get fieldConfigRegistry() {\n    if (!this._fieldConfigRegistry) {\n      this._fieldConfigRegistry = this._initConfigRegistry();\n    }\n\n    return this._fieldConfigRegistry;\n  }\n  /**\n   * @deprecated setEditor is deprecated in favor of setPanelOptions\n   */\n\n\n  setEditor(editor) {\n    deprecationWarning('PanelPlugin', 'setEditor', 'setPanelOptions');\n    this.editor = editor;\n    return this;\n  }\n\n  setNoPadding() {\n    this.noPadding = true;\n    return this;\n  }\n  /**\n   * This function is called before the panel first loads if\n   * the current version is different than the version that was saved.\n   *\n   * This is a good place to support any changes to the options model\n   */\n\n\n  setMigrationHandler(handler) {\n    this.onPanelMigration = handler;\n    return this;\n  }\n  /**\n   * This function is called when the visualization was changed. This\n   * passes in the panel model for previous visualisation options inspection\n   * and panel model updates.\n   *\n   * This is useful for supporting PanelModel API updates when changing\n   * between Angular and React panels.\n   */\n\n\n  setPanelChangeHandler(handler) {\n    this.onPanelTypeChanged = handler;\n    return this;\n  }\n  /**\n   * Enables panel options editor creation\n   *\n   * @example\n   * ```typescript\n   *\n   * import { ShapePanel } from './ShapePanel';\n   *\n   * interface ShapePanelOptions {}\n   *\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *   .setPanelOptions(builder => {\n   *     builder\n   *       .addSelect({\n   *         id: 'shape',\n   *         name: 'Shape',\n   *         description: 'Select shape to render'\n   *         settings: {\n   *           options: [\n   *             {value: 'circle', label: 'Circle' },\n   *             {value: 'square', label: 'Square },\n   *             {value: 'triangle', label: 'Triangle }\n   *            ]\n   *         },\n   *       })\n   *   })\n   * ```\n   *\n   * @public\n   **/\n\n\n  setPanelOptions(builder) {\n    // builder is applied lazily when options UI is created\n    this.optionsSupplier = builder;\n    return this;\n  }\n  /**\n   * This is used while building the panel options editor.\n   *\n   * @internal\n   */\n\n\n  getPanelOptionsSupplier() {\n    var _this$optionsSupplier;\n\n    return (_this$optionsSupplier = this.optionsSupplier) !== null && _this$optionsSupplier !== void 0 ? _this$optionsSupplier : () => {};\n  }\n  /**\n   * Tells Grafana if the plugin should subscribe to annotation and alertState results.\n   *\n   * @example\n   * ```typescript\n   *\n   * import { ShapePanel } from './ShapePanel';\n   *\n   * interface ShapePanelOptions {}\n   *\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *     .useFieldConfig({})\n   *     ...\n   *     ...\n   *     .setDataSupport({\n   *       annotations: true,\n   *       alertStates: true,\n   *     });\n   * ```\n   *\n   * @public\n   **/\n\n\n  setDataSupport(support) {\n    this.dataSupport = Object.assign({}, this.dataSupport, support);\n    return this;\n  }\n  /**\n   * Allows specifying which standard field config options panel should use and defining default values\n   *\n   * @example\n   * ```typescript\n   *\n   * import { ShapePanel } from './ShapePanel';\n   *\n   * interface ShapePanelOptions {}\n   *\n   * // when plugin should use all standard options\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig();\n   *\n   * // when plugin should only display specific standard options\n   * // note, that options will be displayed in the order they are provided\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig({\n   *    standardOptions: [FieldConfigProperty.Min, FieldConfigProperty.Max]\n   *   });\n   *\n   * // when standard option's default value needs to be provided\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig({\n   *    standardOptions: [FieldConfigProperty.Min, FieldConfigProperty.Max],\n   *    standardOptionsDefaults: {\n   *      [FieldConfigProperty.Min]: 20,\n   *      [FieldConfigProperty.Max]: 100\n   *    }\n   *  });\n   *\n   * // when custom field config options needs to be provided\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig({\n   *    useCustomConfig: builder => {\n   *      builder\n   *       .addNumberInput({\n   *         id: 'shapeBorderWidth',\n   *         name: 'Border width',\n   *         description: 'Border width of the shape',\n   *         settings: {\n   *           min: 1,\n   *           max: 5,\n   *         },\n   *       })\n   *       .addSelect({\n   *         id: 'displayMode',\n   *         name: 'Display mode',\n   *         description: 'How the shape shout be rendered'\n   *         settings: {\n   *         options: [{value: 'fill', label: 'Fill' }, {value: 'transparent', label: 'Transparent }]\n   *       },\n   *     })\n   *   },\n   *  });\n   *\n   * ```\n   *\n   * @public\n   */\n\n\n  useFieldConfig(config = {}) {\n    // builder is applied lazily when custom field configs are accessed\n    this._initConfigRegistry = () => createFieldConfigRegistry(config, this.meta.name);\n\n    return this;\n  }\n  /**\n   * Sets function that can return visualization examples and suggestions.\n   * @alpha\n   */\n\n\n  setSuggestionsSupplier(supplier) {\n    this.suggestionsSupplier = supplier;\n    return this;\n  }\n  /**\n   * Returns the suggestions supplier\n   * @alpha\n   */\n\n\n  getSuggestionsSupplier() {\n    return this.suggestionsSupplier;\n  }\n\n  hasPluginId(pluginId) {\n    return this.meta.id === pluginId;\n  }\n\n}","map":{"version":3,"names":["set","FieldConfigOptionsRegistry","GrafanaPlugin","deprecationWarning","PanelOptionsEditorBuilder","createFieldConfigRegistry","PanelPlugin","constructor","panel","defaults","overrides","annotations","alertStates","result","_defaults","optionsSupplier","builder","data","item","getItems","defaultValue","path","fieldConfigDefaults","configDefaults","_fieldConfigDefaults","custom","option","fieldConfigRegistry","list","undefined","id","setDefaults","_fieldConfigRegistry","_initConfigRegistry","setEditor","editor","setNoPadding","noPadding","setMigrationHandler","handler","onPanelMigration","setPanelChangeHandler","onPanelTypeChanged","setPanelOptions","getPanelOptionsSupplier","setDataSupport","support","dataSupport","useFieldConfig","config","meta","name","setSuggestionsSupplier","supplier","suggestionsSupplier","getSuggestionsSupplier","hasPluginId","pluginId"],"sources":["/home/soula/grafana/packages/grafana-data/src/panel/PanelPlugin.ts"],"sourcesContent":["import { set } from 'lodash';\nimport { ComponentClass, ComponentType } from 'react';\n\nimport { FieldConfigOptionsRegistry, StandardEditorContext } from '../field';\nimport {\n  FieldConfigSource,\n  GrafanaPlugin,\n  PanelEditorProps,\n  PanelMigrationHandler,\n  PanelPluginMeta,\n  PanelProps,\n  PanelTypeChangedHandler,\n  FieldConfigProperty,\n  PanelPluginDataSupport,\n  VisualizationSuggestionsSupplier,\n} from '../types';\nimport { deprecationWarning } from '../utils';\nimport { FieldConfigEditorBuilder, PanelOptionsEditorBuilder } from '../utils/OptionsUIBuilders';\n\nimport { createFieldConfigRegistry } from './registryFactories';\n\n/** @beta */\nexport type StandardOptionConfig = {\n  defaultValue?: any;\n  settings?: any;\n};\n\n/** @beta */\nexport interface SetFieldConfigOptionsArgs<TFieldConfigOptions = any> {\n  /**\n   * Configuration object of the standard field config properites\n   *\n   * @example\n   * ```typescript\n   * {\n   *   standardOptions: {\n   *     [FieldConfigProperty.Decimals]: {\n   *       defaultValue: 3\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  standardOptions?: Partial<Record<FieldConfigProperty, StandardOptionConfig>>;\n\n  /**\n   * Array of standard field config properties that should not be available in the panel\n   * @example\n   * ```typescript\n   * {\n   *   disableStandardOptions: [FieldConfigProperty.Min, FieldConfigProperty.Max, FieldConfigProperty.Unit]\n   * }\n   * ```\n   */\n  disableStandardOptions?: FieldConfigProperty[];\n\n  /**\n   * Function that allows custom field config properties definition.\n   *\n   * @param builder\n   *\n   * @example\n   * ```typescript\n   * useCustomConfig: builder => {\n   *   builder\n   *    .addNumberInput({\n   *      id: 'shapeBorderWidth',\n   *      name: 'Border width',\n   *      description: 'Border width of the shape',\n   *      settings: {\n   *        min: 1,\n   *        max: 5,\n   *      },\n   *    })\n   *    .addSelect({\n   *      id: 'displayMode',\n   *      name: 'Display mode',\n   *      description: 'How the shape shout be rendered'\n   *      settings: {\n   *      options: [{value: 'fill', label: 'Fill' }, {value: 'transparent', label: 'Transparent }]\n   *    },\n   *  })\n   * }\n   * ```\n   */\n  useCustomConfig?: (builder: FieldConfigEditorBuilder<TFieldConfigOptions>) => void;\n}\n\nexport type PanelOptionsSupplier<TOptions> = (\n  builder: PanelOptionsEditorBuilder<TOptions>,\n  context: StandardEditorContext<TOptions>\n) => void;\n\nexport class PanelPlugin<\n  TOptions = any,\n  TFieldConfigOptions extends object = any\n> extends GrafanaPlugin<PanelPluginMeta> {\n  private _defaults?: TOptions;\n  private _fieldConfigDefaults: FieldConfigSource<TFieldConfigOptions> = {\n    defaults: {},\n    overrides: [],\n  };\n\n  private _fieldConfigRegistry?: FieldConfigOptionsRegistry;\n  private _initConfigRegistry = () => {\n    return new FieldConfigOptionsRegistry();\n  };\n\n  private optionsSupplier?: PanelOptionsSupplier<TOptions>;\n  private suggestionsSupplier?: VisualizationSuggestionsSupplier;\n\n  panel: ComponentType<PanelProps<TOptions>> | null;\n  editor?: ComponentClass<PanelEditorProps<TOptions>>;\n  onPanelMigration?: PanelMigrationHandler<TOptions>;\n  onPanelTypeChanged?: PanelTypeChangedHandler<TOptions>;\n  noPadding?: boolean;\n  dataSupport: PanelPluginDataSupport = {\n    annotations: false,\n    alertStates: false,\n  };\n\n  /**\n   * Legacy angular ctrl.  If this exists it will be used instead of the panel\n   */\n  angularPanelCtrl?: any;\n\n  constructor(panel: ComponentType<PanelProps<TOptions>> | null) {\n    super();\n    this.panel = panel;\n  }\n\n  get defaults() {\n    let result = this._defaults || {};\n\n    if (!this._defaults && this.optionsSupplier) {\n      const builder = new PanelOptionsEditorBuilder<TOptions>();\n      this.optionsSupplier(builder, { data: [] });\n      for (const item of builder.getItems()) {\n        if (item.defaultValue != null) {\n          set(result, item.path, item.defaultValue);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  get fieldConfigDefaults(): FieldConfigSource<TFieldConfigOptions> {\n    const configDefaults = this._fieldConfigDefaults.defaults;\n    configDefaults.custom = {} as TFieldConfigOptions;\n\n    for (const option of this.fieldConfigRegistry.list()) {\n      if (option.defaultValue === undefined) {\n        continue;\n      }\n\n      set(configDefaults, option.id, option.defaultValue);\n    }\n\n    return {\n      defaults: {\n        ...configDefaults,\n      },\n      overrides: this._fieldConfigDefaults.overrides,\n    };\n  }\n\n  /**\n   * @deprecated setDefaults is deprecated in favor of setPanelOptions\n   */\n  setDefaults(defaults: TOptions) {\n    deprecationWarning('PanelPlugin', 'setDefaults', 'setPanelOptions');\n    this._defaults = defaults;\n    return this;\n  }\n\n  get fieldConfigRegistry() {\n    if (!this._fieldConfigRegistry) {\n      this._fieldConfigRegistry = this._initConfigRegistry();\n    }\n\n    return this._fieldConfigRegistry;\n  }\n\n  /**\n   * @deprecated setEditor is deprecated in favor of setPanelOptions\n   */\n  setEditor(editor: ComponentClass<PanelEditorProps<TOptions>>) {\n    deprecationWarning('PanelPlugin', 'setEditor', 'setPanelOptions');\n    this.editor = editor;\n    return this;\n  }\n\n  setNoPadding() {\n    this.noPadding = true;\n    return this;\n  }\n\n  /**\n   * This function is called before the panel first loads if\n   * the current version is different than the version that was saved.\n   *\n   * This is a good place to support any changes to the options model\n   */\n  setMigrationHandler(handler: PanelMigrationHandler<TOptions>) {\n    this.onPanelMigration = handler;\n    return this;\n  }\n\n  /**\n   * This function is called when the visualization was changed. This\n   * passes in the panel model for previous visualisation options inspection\n   * and panel model updates.\n   *\n   * This is useful for supporting PanelModel API updates when changing\n   * between Angular and React panels.\n   */\n  setPanelChangeHandler(handler: PanelTypeChangedHandler) {\n    this.onPanelTypeChanged = handler;\n    return this;\n  }\n\n  /**\n   * Enables panel options editor creation\n   *\n   * @example\n   * ```typescript\n   *\n   * import { ShapePanel } from './ShapePanel';\n   *\n   * interface ShapePanelOptions {}\n   *\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *   .setPanelOptions(builder => {\n   *     builder\n   *       .addSelect({\n   *         id: 'shape',\n   *         name: 'Shape',\n   *         description: 'Select shape to render'\n   *         settings: {\n   *           options: [\n   *             {value: 'circle', label: 'Circle' },\n   *             {value: 'square', label: 'Square },\n   *             {value: 'triangle', label: 'Triangle }\n   *            ]\n   *         },\n   *       })\n   *   })\n   * ```\n   *\n   * @public\n   **/\n  setPanelOptions(builder: PanelOptionsSupplier<TOptions>) {\n    // builder is applied lazily when options UI is created\n    this.optionsSupplier = builder;\n    return this;\n  }\n\n  /**\n   * This is used while building the panel options editor.\n   *\n   * @internal\n   */\n  getPanelOptionsSupplier(): PanelOptionsSupplier<TOptions> {\n    return this.optionsSupplier ?? ((() => {}) as PanelOptionsSupplier<TOptions>);\n  }\n\n  /**\n   * Tells Grafana if the plugin should subscribe to annotation and alertState results.\n   *\n   * @example\n   * ```typescript\n   *\n   * import { ShapePanel } from './ShapePanel';\n   *\n   * interface ShapePanelOptions {}\n   *\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *     .useFieldConfig({})\n   *     ...\n   *     ...\n   *     .setDataSupport({\n   *       annotations: true,\n   *       alertStates: true,\n   *     });\n   * ```\n   *\n   * @public\n   **/\n  setDataSupport(support: Partial<PanelPluginDataSupport>) {\n    this.dataSupport = { ...this.dataSupport, ...support };\n    return this;\n  }\n\n  /**\n   * Allows specifying which standard field config options panel should use and defining default values\n   *\n   * @example\n   * ```typescript\n   *\n   * import { ShapePanel } from './ShapePanel';\n   *\n   * interface ShapePanelOptions {}\n   *\n   * // when plugin should use all standard options\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig();\n   *\n   * // when plugin should only display specific standard options\n   * // note, that options will be displayed in the order they are provided\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig({\n   *    standardOptions: [FieldConfigProperty.Min, FieldConfigProperty.Max]\n   *   });\n   *\n   * // when standard option's default value needs to be provided\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig({\n   *    standardOptions: [FieldConfigProperty.Min, FieldConfigProperty.Max],\n   *    standardOptionsDefaults: {\n   *      [FieldConfigProperty.Min]: 20,\n   *      [FieldConfigProperty.Max]: 100\n   *    }\n   *  });\n   *\n   * // when custom field config options needs to be provided\n   * export const plugin = new PanelPlugin<ShapePanelOptions>(ShapePanel)\n   *  .useFieldConfig({\n   *    useCustomConfig: builder => {\n   *      builder\n   *       .addNumberInput({\n   *         id: 'shapeBorderWidth',\n   *         name: 'Border width',\n   *         description: 'Border width of the shape',\n   *         settings: {\n   *           min: 1,\n   *           max: 5,\n   *         },\n   *       })\n   *       .addSelect({\n   *         id: 'displayMode',\n   *         name: 'Display mode',\n   *         description: 'How the shape shout be rendered'\n   *         settings: {\n   *         options: [{value: 'fill', label: 'Fill' }, {value: 'transparent', label: 'Transparent }]\n   *       },\n   *     })\n   *   },\n   *  });\n   *\n   * ```\n   *\n   * @public\n   */\n  useFieldConfig(config: SetFieldConfigOptionsArgs<TFieldConfigOptions> = {}) {\n    // builder is applied lazily when custom field configs are accessed\n    this._initConfigRegistry = () => createFieldConfigRegistry(config, this.meta.name);\n\n    return this;\n  }\n\n  /**\n   * Sets function that can return visualization examples and suggestions.\n   * @alpha\n   */\n  setSuggestionsSupplier(supplier: VisualizationSuggestionsSupplier) {\n    this.suggestionsSupplier = supplier;\n    return this;\n  }\n\n  /**\n   * Returns the suggestions supplier\n   * @alpha\n   */\n  getSuggestionsSupplier(): VisualizationSuggestionsSupplier | undefined {\n    return this.suggestionsSupplier;\n  }\n\n  hasPluginId(pluginId: string) {\n    return this.meta.id === pluginId;\n  }\n}\n"],"mappings":"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,uBAAuB,GAAmC;IAAA;;IACxD,gCAAO,KAAK7B,eAAZ,yEAAiC,MAAM,CAAE,CAAzC;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE8B,cAAc,CAACC,OAAD,EAA2C;IACvD,KAAKC,WAAL,qBAAwB,KAAKA,WAA7B,EAA6CD,OAA7C;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEE,cAAc,CAACC,MAAsD,GAAG,EAA1D,EAA8D;IAC1E;IACA,KAAKhB,mBAAL,GAA2B,MAAM5B,yBAAyB,CAAC4C,MAAD,EAAS,KAAKC,IAAL,CAAUC,IAAnB,CAA1D;;IAEA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;;;EACEC,sBAAsB,CAACC,QAAD,EAA6C;IACjE,KAAKC,mBAAL,GAA2BD,QAA3B;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;;;EACEE,sBAAsB,GAAiD;IACrE,OAAO,KAAKD,mBAAZ;EACD;;EAEDE,WAAW,CAACC,QAAD,EAAmB;IAC5B,OAAO,KAAKP,IAAL,CAAUpB,EAAV,KAAiB2B,QAAxB;EACD;;AA5RsC"},"metadata":{},"sourceType":"module"}