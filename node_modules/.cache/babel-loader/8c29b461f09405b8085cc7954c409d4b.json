{"ast":null,"code":"import { rangeUtil } from '@grafana/data';\nimport { getTimeSrv } from '../../dashboard/services/TimeSrv';\nimport { getTemplateSrv } from '../../templating/template_srv';\nimport { validateVariableSelectionState } from '../state/actions';\nimport { toKeyedAction } from '../state/keyedVariablesReducer';\nimport { getVariable } from '../state/selectors';\nimport { toVariablePayload } from '../utils';\nimport { createIntervalOptions } from './reducer';\nexport const updateIntervalVariableOptions = identifier => async dispatch => {\n  const {\n    rootStateKey\n  } = identifier;\n  await dispatch(toKeyedAction(rootStateKey, createIntervalOptions(toVariablePayload(identifier))));\n  await dispatch(updateAutoValue(identifier));\n  await dispatch(validateVariableSelectionState(identifier));\n};\nexport const updateAutoValue = (identifier, dependencies = {\n  calculateInterval: rangeUtil.calculateInterval,\n  getTimeSrv: getTimeSrv,\n  templateSrv: getTemplateSrv()\n}) => (dispatch, getState) => {\n  const variableInState = getVariable(identifier, getState());\n\n  if (variableInState.auto) {\n    const res = dependencies.calculateInterval(dependencies.getTimeSrv().timeRange(), variableInState.auto_count, variableInState.auto_min);\n    dependencies.templateSrv.setGrafanaVariable('$__auto_interval_' + variableInState.name, res.interval); // for backward compatibility, to be removed eventually\n\n    dependencies.templateSrv.setGrafanaVariable('$__auto_interval', res.interval);\n  }\n};","map":{"version":3,"names":["rangeUtil","getTimeSrv","getTemplateSrv","validateVariableSelectionState","toKeyedAction","getVariable","toVariablePayload","createIntervalOptions","updateIntervalVariableOptions","identifier","dispatch","rootStateKey","updateAutoValue","dependencies","calculateInterval","templateSrv","getState","variableInState","auto","res","timeRange","auto_count","auto_min","setGrafanaVariable","name","interval"],"sources":["/home/soula/grafana/public/app/features/variables/interval/actions.ts"],"sourcesContent":["import { rangeUtil } from '@grafana/data';\n\nimport { ThunkResult } from '../../../types';\nimport { getTimeSrv } from '../../dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from '../../templating/template_srv';\nimport { validateVariableSelectionState } from '../state/actions';\nimport { toKeyedAction } from '../state/keyedVariablesReducer';\nimport { getVariable } from '../state/selectors';\nimport { KeyedVariableIdentifier } from '../state/types';\nimport { IntervalVariableModel } from '../types';\nimport { toVariablePayload } from '../utils';\n\nimport { createIntervalOptions } from './reducer';\n\nexport const updateIntervalVariableOptions =\n  (identifier: KeyedVariableIdentifier): ThunkResult<void> =>\n  async (dispatch) => {\n    const { rootStateKey } = identifier;\n    await dispatch(toKeyedAction(rootStateKey, createIntervalOptions(toVariablePayload(identifier))));\n    await dispatch(updateAutoValue(identifier));\n    await dispatch(validateVariableSelectionState(identifier));\n  };\n\nexport interface UpdateAutoValueDependencies {\n  calculateInterval: typeof rangeUtil.calculateInterval;\n  getTimeSrv: typeof getTimeSrv;\n  templateSrv: TemplateSrv;\n}\n\nexport const updateAutoValue =\n  (\n    identifier: KeyedVariableIdentifier,\n    dependencies: UpdateAutoValueDependencies = {\n      calculateInterval: rangeUtil.calculateInterval,\n      getTimeSrv: getTimeSrv,\n      templateSrv: getTemplateSrv(),\n    }\n  ): ThunkResult<void> =>\n  (dispatch, getState) => {\n    const variableInState = getVariable<IntervalVariableModel>(identifier, getState());\n    if (variableInState.auto) {\n      const res = dependencies.calculateInterval(\n        dependencies.getTimeSrv().timeRange(),\n        variableInState.auto_count,\n        variableInState.auto_min\n      );\n      dependencies.templateSrv.setGrafanaVariable('$__auto_interval_' + variableInState.name, res.interval);\n      // for backward compatibility, to be removed eventually\n      dependencies.templateSrv.setGrafanaVariable('$__auto_interval', res.interval);\n    }\n  };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,eAA1B;AAGA,SAASC,UAAT,QAA2B,kCAA3B;AACA,SAASC,cAAT,QAA4C,+BAA5C;AACA,SAASC,8BAAT,QAA+C,kBAA/C;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AAGA,SAASC,iBAAT,QAAkC,UAAlC;AAEA,SAASC,qBAAT,QAAsC,WAAtC;AAEA,OAAO,MAAMC,6BAA6B,GACvCC,UAAD,IACA,MAAOC,QAAP,IAAoB;EAClB,MAAM;IAAEC;EAAF,IAAmBF,UAAzB;EACA,MAAMC,QAAQ,CAACN,aAAa,CAACO,YAAD,EAAeJ,qBAAqB,CAACD,iBAAiB,CAACG,UAAD,CAAlB,CAApC,CAAd,CAAd;EACA,MAAMC,QAAQ,CAACE,eAAe,CAACH,UAAD,CAAhB,CAAd;EACA,MAAMC,QAAQ,CAACP,8BAA8B,CAACM,UAAD,CAA/B,CAAd;AACD,CAPI;AAeP,OAAO,MAAMG,eAAe,GAC1B,CACEH,UADF,EAEEI,YAAyC,GAAG;EAC1CC,iBAAiB,EAAEd,SAAS,CAACc,iBADa;EAE1Cb,UAAU,EAAEA,UAF8B;EAG1Cc,WAAW,EAAEb,cAAc;AAHe,CAF9C,KAQA,CAACQ,QAAD,EAAWM,QAAX,KAAwB;EACtB,MAAMC,eAAe,GAAGZ,WAAW,CAAwBI,UAAxB,EAAoCO,QAAQ,EAA5C,CAAnC;;EACA,IAAIC,eAAe,CAACC,IAApB,EAA0B;IACxB,MAAMC,GAAG,GAAGN,YAAY,CAACC,iBAAb,CACVD,YAAY,CAACZ,UAAb,GAA0BmB,SAA1B,EADU,EAEVH,eAAe,CAACI,UAFN,EAGVJ,eAAe,CAACK,QAHN,CAAZ;IAKAT,YAAY,CAACE,WAAb,CAAyBQ,kBAAzB,CAA4C,sBAAsBN,eAAe,CAACO,IAAlF,EAAwFL,GAAG,CAACM,QAA5F,EANwB,CAOxB;;IACAZ,YAAY,CAACE,WAAb,CAAyBQ,kBAAzB,CAA4C,kBAA5C,EAAgEJ,GAAG,CAACM,QAApE;EACD;AACF,CArBI"},"metadata":{},"sourceType":"module"}