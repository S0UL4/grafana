{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hasLogsContextSupport } from '@grafana/data';\nimport { Collapse } from '@grafana/ui';\nimport { getTimeZone } from '../profile/state/selectors';\nimport { LiveLogsWithTheme } from './LiveLogs';\nimport { Logs } from './Logs';\nimport { splitOpen } from './state/main';\nimport { addResultsToCache, clearCache, loadLogsVolumeData } from './state/query';\nimport { updateTimeRange } from './state/time';\nimport { LiveTailControls } from './useLiveTailControls';\nimport { LogsCrossFadeTransition } from './utils/LogsCrossFadeTransition';\nimport { getFieldLinksForExplore } from './utils/links';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nclass LogsContainer extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onChangeTime\", absoluteRange => {\n      const {\n        exploreId,\n        updateTimeRange\n      } = this.props;\n      updateTimeRange({\n        exploreId,\n        absoluteRange\n      });\n    });\n\n    _defineProperty(this, \"getLogRowContext\", async (row, options) => {\n      const {\n        datasourceInstance\n      } = this.props;\n\n      if (hasLogsContextSupport(datasourceInstance)) {\n        return datasourceInstance.getLogRowContext(row, options);\n      }\n\n      return [];\n    });\n\n    _defineProperty(this, \"showContextToggle\", row => {\n      const {\n        datasourceInstance\n      } = this.props;\n\n      if (hasLogsContextSupport(datasourceInstance)) {\n        return datasourceInstance.showContextToggle(row);\n      }\n\n      return false;\n    });\n\n    _defineProperty(this, \"getFieldLinks\", (field, rowIndex) => {\n      const {\n        splitOpen: splitOpenFn,\n        range\n      } = this.props;\n      return getFieldLinksForExplore({\n        field,\n        rowIndex,\n        splitOpenFn,\n        range\n      });\n    });\n  }\n\n  render() {\n    var _this$props$datasourc;\n\n    const {\n      loading,\n      loadingState,\n      logRows,\n      logsMeta,\n      logsSeries,\n      logsQueries,\n      logsVolumeData,\n      loadLogsVolumeData,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      onStartScanning,\n      onStopScanning,\n      absoluteRange,\n      timeZone,\n      visibleRange,\n      scanning,\n      range,\n      width,\n      splitOpen,\n      isLive,\n      exploreId,\n      addResultsToCache,\n      clearCache\n    } = this.props;\n\n    if (!logRows) {\n      return null;\n    } // We need to override css overflow of divs in Collapse element to enable sticky Logs navigation\n\n\n    const styleOverridesForStickyNavigation = css`\n      & > div {\n        overflow: visible;\n        & > div {\n          overflow: visible;\n        }\n      }\n    `;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(LogsCrossFadeTransition, {\n        visible: isLive,\n        children: /*#__PURE__*/_jsx(Collapse, {\n          label: \"Logs\",\n          loading: false,\n          isOpen: true,\n          children: /*#__PURE__*/_jsx(LiveTailControls, {\n            exploreId: exploreId,\n            children: controls => /*#__PURE__*/_jsx(LiveLogsWithTheme, {\n              logRows: logRows,\n              timeZone: timeZone,\n              stopLive: controls.stop,\n              isPaused: this.props.isPaused,\n              onPause: controls.pause,\n              onResume: controls.resume\n            })\n          })\n        })\n      }), /*#__PURE__*/_jsx(LogsCrossFadeTransition, {\n        visible: !isLive,\n        children: /*#__PURE__*/_jsx(Collapse, {\n          label: \"Logs\",\n          loading: loading,\n          isOpen: true,\n          className: styleOverridesForStickyNavigation,\n          children: /*#__PURE__*/_jsx(Logs, {\n            exploreId: exploreId,\n            datasourceType: (_this$props$datasourc = this.props.datasourceInstance) === null || _this$props$datasourc === void 0 ? void 0 : _this$props$datasourc.type,\n            logRows: logRows,\n            logsMeta: logsMeta,\n            logsSeries: logsSeries,\n            logsVolumeData: logsVolumeData,\n            logsQueries: logsQueries,\n            width: width,\n            splitOpen: splitOpen,\n            loading: loading,\n            loadingState: loadingState,\n            loadLogsVolumeData: loadLogsVolumeData,\n            onChangeTime: this.onChangeTime,\n            onClickFilterLabel: onClickFilterLabel,\n            onClickFilterOutLabel: onClickFilterOutLabel,\n            onStartScanning: onStartScanning,\n            onStopScanning: onStopScanning,\n            absoluteRange: absoluteRange,\n            visibleRange: visibleRange,\n            timeZone: timeZone,\n            scanning: scanning,\n            scanRange: range.raw,\n            showContextToggle: this.showContextToggle,\n            getRowContext: this.getLogRowContext,\n            getFieldLinks: this.getFieldLinks,\n            addResultsToCache: () => addResultsToCache(exploreId),\n            clearCache: () => clearCache(exploreId)\n          })\n        })\n      })]\n    });\n  }\n\n}\n\nfunction mapStateToProps(state, {\n  exploreId\n}) {\n  const explore = state.explore; // @ts-ignore\n\n  const item = explore[exploreId];\n  const {\n    logsResult,\n    loading,\n    scanning,\n    datasourceInstance,\n    isLive,\n    isPaused,\n    range,\n    absoluteRange,\n    logsVolumeDataProvider,\n    logsVolumeData\n  } = item;\n  const timeZone = getTimeZone(state.user);\n  return {\n    loading,\n    logRows: logsResult === null || logsResult === void 0 ? void 0 : logsResult.rows,\n    logsMeta: logsResult === null || logsResult === void 0 ? void 0 : logsResult.meta,\n    logsSeries: logsResult === null || logsResult === void 0 ? void 0 : logsResult.series,\n    logsQueries: logsResult === null || logsResult === void 0 ? void 0 : logsResult.queries,\n    visibleRange: logsResult === null || logsResult === void 0 ? void 0 : logsResult.visibleRange,\n    scanning,\n    timeZone,\n    datasourceInstance,\n    isLive,\n    isPaused,\n    range,\n    absoluteRange,\n    logsVolumeDataProvider,\n    logsVolumeData\n  };\n}\n\nconst mapDispatchToProps = {\n  updateTimeRange,\n  splitOpen,\n  addResultsToCache,\n  clearCache,\n  loadLogsVolumeData\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connector(LogsContainer);","map":{"version":3,"names":["css","React","PureComponent","connect","hasLogsContextSupport","Collapse","getTimeZone","LiveLogsWithTheme","Logs","splitOpen","addResultsToCache","clearCache","loadLogsVolumeData","updateTimeRange","LiveTailControls","LogsCrossFadeTransition","getFieldLinksForExplore","LogsContainer","absoluteRange","exploreId","props","row","options","datasourceInstance","getLogRowContext","showContextToggle","field","rowIndex","splitOpenFn","range","render","loading","loadingState","logRows","logsMeta","logsSeries","logsQueries","logsVolumeData","onClickFilterLabel","onClickFilterOutLabel","onStartScanning","onStopScanning","timeZone","visibleRange","scanning","width","isLive","styleOverridesForStickyNavigation","controls","stop","isPaused","pause","resume","type","onChangeTime","raw","getFieldLinks","mapStateToProps","state","explore","item","logsResult","logsVolumeDataProvider","user","rows","meta","series","queries","mapDispatchToProps","connector"],"sources":["/home/soula/grafana/public/app/features/explore/LogsContainer.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport {\n  AbsoluteTimeRange,\n  Field,\n  hasLogsContextSupport,\n  LoadingState,\n  LogRowModel,\n  RawTimeRange,\n} from '@grafana/data';\nimport { Collapse } from '@grafana/ui';\nimport { StoreState } from 'app/types';\nimport { ExploreId, ExploreItemState } from 'app/types/explore';\n\nimport { getTimeZone } from '../profile/state/selectors';\n\nimport { LiveLogsWithTheme } from './LiveLogs';\nimport { Logs } from './Logs';\nimport { splitOpen } from './state/main';\nimport { addResultsToCache, clearCache, loadLogsVolumeData } from './state/query';\nimport { updateTimeRange } from './state/time';\nimport { LiveTailControls } from './useLiveTailControls';\nimport { LogsCrossFadeTransition } from './utils/LogsCrossFadeTransition';\nimport { getFieldLinksForExplore } from './utils/links';\n\ninterface LogsContainerProps extends PropsFromRedux {\n  width: number;\n  exploreId: ExploreId;\n  scanRange?: RawTimeRange;\n  syncedTimes: boolean;\n  loadingState: LoadingState;\n  onClickFilterLabel?: (key: string, value: string) => void;\n  onClickFilterOutLabel?: (key: string, value: string) => void;\n  onStartScanning: () => void;\n  onStopScanning: () => void;\n}\n\nclass LogsContainer extends PureComponent<LogsContainerProps> {\n  onChangeTime = (absoluteRange: AbsoluteTimeRange) => {\n    const { exploreId, updateTimeRange } = this.props;\n    updateTimeRange({ exploreId, absoluteRange });\n  };\n\n  getLogRowContext = async (row: LogRowModel, options?: any): Promise<any> => {\n    const { datasourceInstance } = this.props;\n\n    if (hasLogsContextSupport(datasourceInstance)) {\n      return datasourceInstance.getLogRowContext(row, options);\n    }\n\n    return [];\n  };\n\n  showContextToggle = (row?: LogRowModel): boolean => {\n    const { datasourceInstance } = this.props;\n\n    if (hasLogsContextSupport(datasourceInstance)) {\n      return datasourceInstance.showContextToggle(row);\n    }\n\n    return false;\n  };\n\n  getFieldLinks = (field: Field, rowIndex: number) => {\n    const { splitOpen: splitOpenFn, range } = this.props;\n    return getFieldLinksForExplore({ field, rowIndex, splitOpenFn, range });\n  };\n\n  render() {\n    const {\n      loading,\n      loadingState,\n      logRows,\n      logsMeta,\n      logsSeries,\n      logsQueries,\n      logsVolumeData,\n      loadLogsVolumeData,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      onStartScanning,\n      onStopScanning,\n      absoluteRange,\n      timeZone,\n      visibleRange,\n      scanning,\n      range,\n      width,\n      splitOpen,\n      isLive,\n      exploreId,\n      addResultsToCache,\n      clearCache,\n    } = this.props;\n\n    if (!logRows) {\n      return null;\n    }\n\n    // We need to override css overflow of divs in Collapse element to enable sticky Logs navigation\n    const styleOverridesForStickyNavigation = css`\n      & > div {\n        overflow: visible;\n        & > div {\n          overflow: visible;\n        }\n      }\n    `;\n\n    return (\n      <>\n        <LogsCrossFadeTransition visible={isLive}>\n          <Collapse label=\"Logs\" loading={false} isOpen>\n            <LiveTailControls exploreId={exploreId}>\n              {(controls) => (\n                <LiveLogsWithTheme\n                  logRows={logRows}\n                  timeZone={timeZone}\n                  stopLive={controls.stop}\n                  isPaused={this.props.isPaused}\n                  onPause={controls.pause}\n                  onResume={controls.resume}\n                />\n              )}\n            </LiveTailControls>\n          </Collapse>\n        </LogsCrossFadeTransition>\n        <LogsCrossFadeTransition visible={!isLive}>\n          <Collapse label=\"Logs\" loading={loading} isOpen className={styleOverridesForStickyNavigation}>\n            <Logs\n              exploreId={exploreId}\n              datasourceType={this.props.datasourceInstance?.type}\n              logRows={logRows}\n              logsMeta={logsMeta}\n              logsSeries={logsSeries}\n              logsVolumeData={logsVolumeData}\n              logsQueries={logsQueries}\n              width={width}\n              splitOpen={splitOpen}\n              loading={loading}\n              loadingState={loadingState}\n              loadLogsVolumeData={loadLogsVolumeData}\n              onChangeTime={this.onChangeTime}\n              onClickFilterLabel={onClickFilterLabel}\n              onClickFilterOutLabel={onClickFilterOutLabel}\n              onStartScanning={onStartScanning}\n              onStopScanning={onStopScanning}\n              absoluteRange={absoluteRange}\n              visibleRange={visibleRange}\n              timeZone={timeZone}\n              scanning={scanning}\n              scanRange={range.raw}\n              showContextToggle={this.showContextToggle}\n              getRowContext={this.getLogRowContext}\n              getFieldLinks={this.getFieldLinks}\n              addResultsToCache={() => addResultsToCache(exploreId)}\n              clearCache={() => clearCache(exploreId)}\n            />\n          </Collapse>\n        </LogsCrossFadeTransition>\n      </>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: { exploreId: string }) {\n  const explore = state.explore;\n  // @ts-ignore\n  const item: ExploreItemState = explore[exploreId];\n  const {\n    logsResult,\n    loading,\n    scanning,\n    datasourceInstance,\n    isLive,\n    isPaused,\n    range,\n    absoluteRange,\n    logsVolumeDataProvider,\n    logsVolumeData,\n  } = item;\n  const timeZone = getTimeZone(state.user);\n\n  return {\n    loading,\n    logRows: logsResult?.rows,\n    logsMeta: logsResult?.meta,\n    logsSeries: logsResult?.series,\n    logsQueries: logsResult?.queries,\n    visibleRange: logsResult?.visibleRange,\n    scanning,\n    timeZone,\n    datasourceInstance,\n    isLive,\n    isPaused,\n    range,\n    absoluteRange,\n    logsVolumeDataProvider,\n    logsVolumeData,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateTimeRange,\n  splitOpen,\n  addResultsToCache,\n  clearCache,\n  loadLogsVolumeData,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(LogsContainer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}