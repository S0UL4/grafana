{"ast":null,"code":"import { groupBy } from 'lodash';\nimport { FieldType, ArrayVector } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nexport function getDerivedFields(dataFrame, derivedFieldConfigs) {\n  if (!derivedFieldConfigs.length) {\n    return [];\n  }\n\n  const derivedFieldsGrouped = groupBy(derivedFieldConfigs, 'name');\n  const newFields = Object.values(derivedFieldsGrouped).map(fieldFromDerivedFieldConfig); // line-field is the first string-field\n  // NOTE: we should create some common log-frame-extra-string-field code somewhere\n\n  const lineField = dataFrame.fields.find(f => f.type === FieldType.string);\n\n  if (lineField === undefined) {\n    // if this is happening, something went wrong, let's raise an error\n    throw new Error('invalid logs-dataframe, string-field missing');\n  }\n\n  lineField.values.toArray().forEach(line => {\n    for (const field of newFields) {\n      const logMatch = line.match(derivedFieldsGrouped[field.name][0].matcherRegex);\n      field.values.add(logMatch && logMatch[1]);\n    }\n  });\n  return newFields;\n}\n/**\n * Transform derivedField config into dataframe field with config that contains link.\n */\n\nfunction fieldFromDerivedFieldConfig(derivedFieldConfigs) {\n  const dataSourceSrv = getDataSourceSrv();\n  const dataLinks = derivedFieldConfigs.reduce((acc, derivedFieldConfig) => {\n    // Having field.datasourceUid means it is an internal link.\n    if (derivedFieldConfig.datasourceUid) {\n      var _dsSettings$name;\n\n      const dsSettings = dataSourceSrv.getInstanceSettings(derivedFieldConfig.datasourceUid);\n      acc.push({\n        // Will be filled out later\n        title: derivedFieldConfig.urlDisplayLabel || '',\n        url: '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        internal: {\n          query: {\n            query: derivedFieldConfig.url\n          },\n          datasourceUid: derivedFieldConfig.datasourceUid,\n          datasourceName: (_dsSettings$name = dsSettings === null || dsSettings === void 0 ? void 0 : dsSettings.name) !== null && _dsSettings$name !== void 0 ? _dsSettings$name : 'Data source not found'\n        }\n      });\n    } else if (derivedFieldConfig.url) {\n      acc.push({\n        // We do not know what title to give here so we count on presentation layer to create a title from metadata.\n        title: derivedFieldConfig.urlDisplayLabel || '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        url: derivedFieldConfig.url\n      });\n    }\n\n    return acc;\n  }, []);\n  return {\n    name: derivedFieldConfigs[0].name,\n    type: FieldType.string,\n    config: {\n      links: dataLinks\n    },\n    // We are adding values later on\n    values: new ArrayVector([])\n  };\n}","map":{"version":3,"names":["groupBy","FieldType","ArrayVector","getDataSourceSrv","getDerivedFields","dataFrame","derivedFieldConfigs","length","derivedFieldsGrouped","newFields","Object","values","map","fieldFromDerivedFieldConfig","lineField","fields","find","f","type","string","undefined","Error","toArray","forEach","line","field","logMatch","match","name","matcherRegex","add","dataSourceSrv","dataLinks","reduce","acc","derivedFieldConfig","datasourceUid","dsSettings","getInstanceSettings","push","title","urlDisplayLabel","url","internal","query","datasourceName","config","links"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/getDerivedFields.ts"],"sourcesContent":["import { groupBy } from 'lodash';\n\nimport { FieldType, DataFrame, ArrayVector, DataLink, Field } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { DerivedFieldConfig } from './types';\n\nexport function getDerivedFields(dataFrame: DataFrame, derivedFieldConfigs: DerivedFieldConfig[]): Field[] {\n  if (!derivedFieldConfigs.length) {\n    return [];\n  }\n  const derivedFieldsGrouped = groupBy(derivedFieldConfigs, 'name');\n\n  const newFields = Object.values(derivedFieldsGrouped).map(fieldFromDerivedFieldConfig);\n\n  // line-field is the first string-field\n  // NOTE: we should create some common log-frame-extra-string-field code somewhere\n  const lineField = dataFrame.fields.find((f) => f.type === FieldType.string);\n\n  if (lineField === undefined) {\n    // if this is happening, something went wrong, let's raise an error\n    throw new Error('invalid logs-dataframe, string-field missing');\n  }\n\n  lineField.values.toArray().forEach((line) => {\n    for (const field of newFields) {\n      const logMatch = line.match(derivedFieldsGrouped[field.name][0].matcherRegex);\n      field.values.add(logMatch && logMatch[1]);\n    }\n  });\n\n  return newFields;\n}\n\n/**\n * Transform derivedField config into dataframe field with config that contains link.\n */\nfunction fieldFromDerivedFieldConfig(derivedFieldConfigs: DerivedFieldConfig[]): Field<any, ArrayVector> {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const dataLinks = derivedFieldConfigs.reduce((acc, derivedFieldConfig) => {\n    // Having field.datasourceUid means it is an internal link.\n    if (derivedFieldConfig.datasourceUid) {\n      const dsSettings = dataSourceSrv.getInstanceSettings(derivedFieldConfig.datasourceUid);\n\n      acc.push({\n        // Will be filled out later\n        title: derivedFieldConfig.urlDisplayLabel || '',\n        url: '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        internal: {\n          query: { query: derivedFieldConfig.url },\n          datasourceUid: derivedFieldConfig.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      });\n    } else if (derivedFieldConfig.url) {\n      acc.push({\n        // We do not know what title to give here so we count on presentation layer to create a title from metadata.\n        title: derivedFieldConfig.urlDisplayLabel || '',\n        // This is hardcoded for Jaeger or Zipkin not way right now to specify datasource specific query object\n        url: derivedFieldConfig.url,\n      });\n    }\n    return acc;\n  }, [] as DataLink[]);\n\n  return {\n    name: derivedFieldConfigs[0].name,\n    type: FieldType.string,\n    config: {\n      links: dataLinks,\n    },\n    // We are adding values later on\n    values: new ArrayVector<string>([]),\n  };\n}\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AAEA,SAASC,SAAT,EAA+BC,WAA/B,QAAmE,eAAnE;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAIA,OAAO,SAASC,gBAAT,CAA0BC,SAA1B,EAAgDC,mBAAhD,EAAoG;EACzG,IAAI,CAACA,mBAAmB,CAACC,MAAzB,EAAiC;IAC/B,OAAO,EAAP;EACD;;EACD,MAAMC,oBAAoB,GAAGR,OAAO,CAACM,mBAAD,EAAsB,MAAtB,CAApC;EAEA,MAAMG,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcH,oBAAd,EAAoCI,GAApC,CAAwCC,2BAAxC,CAAlB,CANyG,CAQzG;EACA;;EACA,MAAMC,SAAS,GAAGT,SAAS,CAACU,MAAV,CAAiBC,IAAjB,CAAuBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWjB,SAAS,CAACkB,MAAlD,CAAlB;;EAEA,IAAIL,SAAS,KAAKM,SAAlB,EAA6B;IAC3B;IACA,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;EACD;;EAEDP,SAAS,CAACH,MAAV,CAAiBW,OAAjB,GAA2BC,OAA3B,CAAoCC,IAAD,IAAU;IAC3C,KAAK,MAAMC,KAAX,IAAoBhB,SAApB,EAA+B;MAC7B,MAAMiB,QAAQ,GAAGF,IAAI,CAACG,KAAL,CAAWnB,oBAAoB,CAACiB,KAAK,CAACG,IAAP,CAApB,CAAiC,CAAjC,EAAoCC,YAA/C,CAAjB;MACAJ,KAAK,CAACd,MAAN,CAAamB,GAAb,CAAiBJ,QAAQ,IAAIA,QAAQ,CAAC,CAAD,CAArC;IACD;EACF,CALD;EAOA,OAAOjB,SAAP;AACD;AAED;AACA;AACA;;AACA,SAASI,2BAAT,CAAqCP,mBAArC,EAAyG;EACvG,MAAMyB,aAAa,GAAG5B,gBAAgB,EAAtC;EAEA,MAAM6B,SAAS,GAAG1B,mBAAmB,CAAC2B,MAApB,CAA2B,CAACC,GAAD,EAAMC,kBAAN,KAA6B;IACxE;IACA,IAAIA,kBAAkB,CAACC,aAAvB,EAAsC;MAAA;;MACpC,MAAMC,UAAU,GAAGN,aAAa,CAACO,mBAAd,CAAkCH,kBAAkB,CAACC,aAArD,CAAnB;MAEAF,GAAG,CAACK,IAAJ,CAAS;QACP;QACAC,KAAK,EAAEL,kBAAkB,CAACM,eAAnB,IAAsC,EAFtC;QAGPC,GAAG,EAAE,EAHE;QAIP;QACAC,QAAQ,EAAE;UACRC,KAAK,EAAE;YAAEA,KAAK,EAAET,kBAAkB,CAACO;UAA5B,CADC;UAERN,aAAa,EAAED,kBAAkB,CAACC,aAF1B;UAGRS,cAAc,sBAAER,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAET,IAAd,+DAAsB;QAH5B;MALH,CAAT;IAWD,CAdD,MAcO,IAAIO,kBAAkB,CAACO,GAAvB,EAA4B;MACjCR,GAAG,CAACK,IAAJ,CAAS;QACP;QACAC,KAAK,EAAEL,kBAAkB,CAACM,eAAnB,IAAsC,EAFtC;QAGP;QACAC,GAAG,EAAEP,kBAAkB,CAACO;MAJjB,CAAT;IAMD;;IACD,OAAOR,GAAP;EACD,CAzBiB,EAyBf,EAzBe,CAAlB;EA2BA,OAAO;IACLN,IAAI,EAAEtB,mBAAmB,CAAC,CAAD,CAAnB,CAAuBsB,IADxB;IAELV,IAAI,EAAEjB,SAAS,CAACkB,MAFX;IAGL2B,MAAM,EAAE;MACNC,KAAK,EAAEf;IADD,CAHH;IAML;IACArB,MAAM,EAAE,IAAIT,WAAJ,CAAwB,EAAxB;EAPH,CAAP;AASD"},"metadata":{},"sourceType":"module"}