{"ast":null,"code":"import { toString, isEmpty } from 'lodash';\nimport { DataFrameView } from '../dataframe/DataFrameView';\nimport { getTimeField } from '../dataframe/processDataFrame';\nimport { getFieldMatcher } from '../transformations';\nimport { reduceField, ReducerID } from '../transformations/fieldReducer';\nimport { FieldMatcherID } from '../transformations/matchers/ids';\nimport { FieldType } from '../types';\nimport { getDisplayProcessor } from './displayProcessor';\nimport { getFieldDisplayName } from './fieldState';\n/**\n * Options for how to turn DataFrames into an array of display values\n */\n\n// TODO: use built in variables, same as for data links?\nexport const VAR_SERIES_NAME = '__series.name';\nexport const VAR_FIELD_NAME = '__field.displayName'; // Includes the rendered tags and naming strategy\n\nexport const VAR_FIELD_LABELS = '__field.labels';\nexport const VAR_CALC = '__calc';\nexport const VAR_CELL_PREFIX = '__cell_'; // consistent with existing table templates\n\nexport const DEFAULT_FIELD_DISPLAY_VALUES_LIMIT = 25;\nexport const getFieldDisplayValues = options => {\n  var _options$data;\n\n  const {\n    replaceVariables,\n    reduceOptions,\n    timeZone,\n    theme\n  } = options;\n  const calcs = reduceOptions.calcs.length ? reduceOptions.calcs : [ReducerID.last];\n  const values = [];\n  const fieldMatcher = getFieldMatcher(reduceOptions.fields ? {\n    id: FieldMatcherID.byRegexp,\n    options: reduceOptions.fields\n  } : {\n    id: FieldMatcherID.numeric\n  });\n  const data = (_options$data = options.data) !== null && _options$data !== void 0 ? _options$data : [];\n  const limit = reduceOptions.limit ? reduceOptions.limit : DEFAULT_FIELD_DISPLAY_VALUES_LIMIT;\n  const scopedVars = {};\n  let hitLimit = false;\n\n  for (let s = 0; s < data.length && !hitLimit; s++) {\n    const dataFrame = data[s]; // Name is already set\n\n    const {\n      timeField\n    } = getTimeField(dataFrame);\n    const view = new DataFrameView(dataFrame);\n\n    for (let i = 0; i < dataFrame.fields.length && !hitLimit; i++) {\n      var _field$state, _field$config$display, _field$display;\n\n      const field = dataFrame.fields[i];\n      const fieldLinksSupplier = field.getLinks; // To filter out time field, need an option for this\n\n      if (!fieldMatcher(field, dataFrame, data)) {\n        continue;\n      }\n\n      let config = field.config; // already set by the prepare task\n\n      if ((_field$state = field.state) !== null && _field$state !== void 0 && _field$state.range) {\n        var _field$state2;\n\n        // Us the global min/max values\n        config = Object.assign({}, config, (_field$state2 = field.state) === null || _field$state2 === void 0 ? void 0 : _field$state2.range);\n      }\n\n      const displayName = (_field$config$display = field.config.displayName) !== null && _field$config$display !== void 0 ? _field$config$display : '';\n      const display = (_field$display = field.display) !== null && _field$display !== void 0 ? _field$display : getDisplayProcessor({\n        field,\n        theme: options.theme,\n        timeZone\n      }); // Show all rows\n\n      if (reduceOptions.values) {\n        const usesCellValues = displayName.indexOf(VAR_CELL_PREFIX) >= 0;\n\n        for (let j = 0; j < field.values.length; j++) {\n          // Add all the row variables\n          if (usesCellValues) {\n            for (let k = 0; k < dataFrame.fields.length; k++) {\n              const f = dataFrame.fields[k];\n              const v = f.values.get(j);\n              scopedVars[VAR_CELL_PREFIX + k] = {\n                value: v,\n                text: toString(v)\n              };\n            }\n          }\n\n          field.state = setIndexForPaletteColor(field, values.length);\n          const displayValue = display(field.values.get(j));\n          const rowName = getSmartDisplayNameForRow(dataFrame, field, j, replaceVariables, scopedVars);\n          const overrideColor = lookupRowColorFromOverride(rowName, options.fieldConfig, theme);\n          values.push({\n            name: '',\n            field: config,\n            display: Object.assign({}, displayValue, {\n              title: rowName,\n              color: overrideColor !== null && overrideColor !== void 0 ? overrideColor : displayValue.color\n            }),\n            view,\n            colIndex: i,\n            rowIndex: j,\n            getLinks: fieldLinksSupplier ? () => fieldLinksSupplier({\n              valueRowIndex: j\n            }) : () => [],\n            hasLinks: hasLinks(field)\n          });\n\n          if (values.length >= limit) {\n            hitLimit = true;\n            break;\n          }\n        }\n      } else {\n        const results = reduceField({\n          field,\n          reducers: calcs // The stats to calculate\n\n        });\n\n        for (const calc of calcs) {\n          scopedVars[VAR_CALC] = {\n            value: calc,\n            text: calc\n          };\n          const displayValue = display(results[calc]);\n\n          if (displayName !== '') {\n            var _field$state3;\n\n            displayValue.title = replaceVariables(displayName, Object.assign({}, (_field$state3 = field.state) === null || _field$state3 === void 0 ? void 0 : _field$state3.scopedVars, scopedVars));\n          } else {\n            displayValue.title = getFieldDisplayName(field, dataFrame, data);\n          }\n\n          let sparkline = undefined;\n\n          if (options.sparkline) {\n            sparkline = {\n              y: dataFrame.fields[i],\n              x: timeField\n            };\n\n            if (calc === ReducerID.last) {\n              sparkline.highlightIndex = sparkline.y.values.length - 1;\n            } else if (calc === ReducerID.first) {\n              sparkline.highlightIndex = 0;\n            }\n          }\n\n          values.push({\n            name: calc,\n            field: config,\n            display: displayValue,\n            sparkline,\n            view,\n            colIndex: i,\n            getLinks: fieldLinksSupplier ? () => fieldLinksSupplier({\n              calculatedValue: displayValue\n            }) : () => [],\n            hasLinks: hasLinks(field)\n          });\n        }\n      }\n    }\n  }\n\n  if (values.length === 0) {\n    values.push(createNoValuesFieldDisplay(options));\n  }\n\n  return values;\n};\n\nfunction getSmartDisplayNameForRow(frame, field, rowIndex, replaceVariables, scopedVars) {\n  let parts = [];\n  let otherNumericFields = 0;\n\n  if (field.config.displayName) {\n    var _field$state4;\n\n    return replaceVariables(field.config.displayName, Object.assign({}, (_field$state4 = field.state) === null || _field$state4 === void 0 ? void 0 : _field$state4.scopedVars, scopedVars));\n  }\n\n  for (const otherField of frame.fields) {\n    if (otherField === field) {\n      continue;\n    }\n\n    if (otherField.type === FieldType.string) {\n      var _otherField$values$ge;\n\n      const value = (_otherField$values$ge = otherField.values.get(rowIndex)) !== null && _otherField$values$ge !== void 0 ? _otherField$values$ge : '';\n      const mappedValue = otherField.display ? otherField.display(value).text : value;\n\n      if (mappedValue.length > 0) {\n        parts.push(mappedValue);\n      }\n    } else if (otherField.type === FieldType.number) {\n      otherNumericFields++;\n    }\n  }\n\n  if (otherNumericFields || parts.length === 0) {\n    parts.push(getFieldDisplayName(field, frame));\n  }\n\n  return parts.join(' ');\n}\n/**\n * Palette color modes use series index (field index) which does not work for when displaing rows\n * So updating seriesIndex here makes the palette color modes work in \"All values\" mode\n */\n\n\nfunction setIndexForPaletteColor(field, currentLength) {\n  return Object.assign({}, field.state, {\n    seriesIndex: currentLength\n  });\n}\n/**\n * This function makes overrides that set color work for row values\n */\n\n\nfunction lookupRowColorFromOverride(displayName, fieldConfig, theme) {\n  for (const override of fieldConfig.overrides) {\n    if (override.matcher.id === 'byName' && override.matcher.options === displayName) {\n      for (const prop of override.properties) {\n        if (prop.id === 'color' && prop.value) {\n          return theme.visualization.getColorByName(prop.value.fixedColor);\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function hasLinks(field) {\n  var _field$config, _field$config$links;\n\n  return (_field$config = field.config) !== null && _field$config !== void 0 && (_field$config$links = _field$config.links) !== null && _field$config$links !== void 0 && _field$config$links.length ? field.config.links.length > 0 : false;\n}\nexport function getDisplayValueAlignmentFactors(values) {\n  const info = {\n    title: '',\n    text: ''\n  };\n  let prefixLength = 0;\n  let suffixLength = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    const v = values[i].display;\n\n    if (v.text && v.text.length > info.text.length) {\n      info.text = v.text;\n    }\n\n    if (v.title && v.title.length > info.title.length) {\n      info.title = v.title;\n    }\n\n    if (v.prefix && v.prefix.length > prefixLength) {\n      info.prefix = v.prefix;\n      prefixLength = v.prefix.length;\n    }\n\n    if (v.suffix && v.suffix.length > suffixLength) {\n      info.suffix = v.suffix;\n      suffixLength = v.suffix.length;\n    }\n  }\n\n  return info;\n}\n\nfunction createNoValuesFieldDisplay(options) {\n  var _defaults$max, _defaults$min;\n\n  const displayName = 'No data';\n  const {\n    fieldConfig,\n    timeZone\n  } = options;\n  const {\n    defaults\n  } = fieldConfig;\n  const displayProcessor = getDisplayProcessor({\n    field: {\n      type: FieldType.other,\n      config: defaults\n    },\n    theme: options.theme,\n    timeZone\n  });\n  const display = displayProcessor(null);\n  const text = getDisplayText(display, displayName);\n  return {\n    name: displayName,\n    field: Object.assign({}, defaults, {\n      max: (_defaults$max = defaults.max) !== null && _defaults$max !== void 0 ? _defaults$max : 0,\n      min: (_defaults$min = defaults.min) !== null && _defaults$min !== void 0 ? _defaults$min : 0\n    }),\n    display: {\n      text,\n      numeric: 0,\n      color: display.color\n    },\n    hasLinks: false\n  };\n}\n\nfunction getDisplayText(display, fallback) {\n  if (!display || isEmpty(display.text)) {\n    return fallback;\n  }\n\n  return display.text;\n}","map":{"version":3,"names":["toString","isEmpty","DataFrameView","getTimeField","getFieldMatcher","reduceField","ReducerID","FieldMatcherID","FieldType","getDisplayProcessor","getFieldDisplayName","VAR_SERIES_NAME","VAR_FIELD_NAME","VAR_FIELD_LABELS","VAR_CALC","VAR_CELL_PREFIX","DEFAULT_FIELD_DISPLAY_VALUES_LIMIT","getFieldDisplayValues","options","replaceVariables","reduceOptions","timeZone","theme","calcs","length","last","values","fieldMatcher","fields","id","byRegexp","numeric","data","limit","scopedVars","hitLimit","s","dataFrame","timeField","view","i","field","fieldLinksSupplier","getLinks","config","state","range","displayName","display","usesCellValues","indexOf","j","k","f","v","get","value","text","setIndexForPaletteColor","displayValue","rowName","getSmartDisplayNameForRow","overrideColor","lookupRowColorFromOverride","fieldConfig","push","name","title","color","colIndex","rowIndex","valueRowIndex","hasLinks","results","reducers","calc","sparkline","undefined","y","x","highlightIndex","first","calculatedValue","createNoValuesFieldDisplay","frame","parts","otherNumericFields","otherField","type","string","mappedValue","number","join","currentLength","seriesIndex","override","overrides","matcher","prop","properties","visualization","getColorByName","fixedColor","links","getDisplayValueAlignmentFactors","info","prefixLength","suffixLength","prefix","suffix","defaults","displayProcessor","other","getDisplayText","max","min","fallback"],"sources":["/home/soula/grafana/packages/grafana-data/src/field/fieldDisplay.ts"],"sourcesContent":["import { toString, isEmpty } from 'lodash';\n\nimport { DataFrameView } from '../dataframe/DataFrameView';\nimport { getTimeField } from '../dataframe/processDataFrame';\nimport { GrafanaTheme2 } from '../themes';\nimport { getFieldMatcher } from '../transformations';\nimport { reduceField, ReducerID } from '../transformations/fieldReducer';\nimport { FieldMatcherID } from '../transformations/matchers/ids';\nimport {\n  DataFrame,\n  DisplayValue,\n  DisplayValueAlignmentFactors,\n  Field,\n  FieldConfig,\n  FieldConfigSource,\n  FieldType,\n  InterpolateFunction,\n  LinkModel,\n  TimeRange,\n  TimeZone,\n} from '../types';\nimport { ScopedVars } from '../types/ScopedVars';\n\nimport { getDisplayProcessor } from './displayProcessor';\nimport { getFieldDisplayName } from './fieldState';\n\n/**\n * Options for how to turn DataFrames into an array of display values\n */\nexport interface ReduceDataOptions {\n  /* If true show each row value */\n  values?: boolean;\n  /** if showing all values limit */\n  limit?: number;\n  /** When !values, pick one value for the whole field */\n  calcs: string[];\n  /** Which fields to show.  By default this is only numeric fields */\n  fields?: string;\n}\n\n// TODO: use built in variables, same as for data links?\nexport const VAR_SERIES_NAME = '__series.name';\nexport const VAR_FIELD_NAME = '__field.displayName'; // Includes the rendered tags and naming strategy\nexport const VAR_FIELD_LABELS = '__field.labels';\nexport const VAR_CALC = '__calc';\nexport const VAR_CELL_PREFIX = '__cell_'; // consistent with existing table templates\n\nexport interface FieldSparkline {\n  y: Field; // Y values\n  x?: Field; // if this does not exist, use the index\n  timeRange?: TimeRange; // Optionally force an absolute time\n  highlightIndex?: number;\n}\n\nexport interface FieldDisplay {\n  name: string; // The field name (title is in display)\n  field: FieldConfig;\n  display: DisplayValue;\n  sparkline?: FieldSparkline;\n\n  // Expose to the original values for delayed inspection (DataLinks etc)\n  view?: DataFrameView;\n  colIndex?: number; // The field column index\n  rowIndex?: number; // only filled in when the value is from a row (ie, not a reduction)\n  getLinks?: () => LinkModel[];\n  hasLinks: boolean;\n}\n\nexport interface GetFieldDisplayValuesOptions {\n  data?: DataFrame[];\n  reduceOptions: ReduceDataOptions;\n  fieldConfig: FieldConfigSource;\n  replaceVariables: InterpolateFunction;\n  sparkline?: boolean; // Calculate the sparkline\n  theme: GrafanaTheme2;\n  timeZone?: TimeZone;\n}\n\nexport const DEFAULT_FIELD_DISPLAY_VALUES_LIMIT = 25;\n\nexport const getFieldDisplayValues = (options: GetFieldDisplayValuesOptions): FieldDisplay[] => {\n  const { replaceVariables, reduceOptions, timeZone, theme } = options;\n  const calcs = reduceOptions.calcs.length ? reduceOptions.calcs : [ReducerID.last];\n\n  const values: FieldDisplay[] = [];\n  const fieldMatcher = getFieldMatcher(\n    reduceOptions.fields\n      ? {\n          id: FieldMatcherID.byRegexp,\n          options: reduceOptions.fields,\n        }\n      : {\n          id: FieldMatcherID.numeric,\n        }\n  );\n\n  const data = options.data ?? [];\n  const limit = reduceOptions.limit ? reduceOptions.limit : DEFAULT_FIELD_DISPLAY_VALUES_LIMIT;\n  const scopedVars: ScopedVars = {};\n\n  let hitLimit = false;\n\n  for (let s = 0; s < data.length && !hitLimit; s++) {\n    const dataFrame = data[s]; // Name is already set\n\n    const { timeField } = getTimeField(dataFrame);\n    const view = new DataFrameView(dataFrame);\n\n    for (let i = 0; i < dataFrame.fields.length && !hitLimit; i++) {\n      const field = dataFrame.fields[i];\n      const fieldLinksSupplier = field.getLinks;\n\n      // To filter out time field, need an option for this\n      if (!fieldMatcher(field, dataFrame, data)) {\n        continue;\n      }\n\n      let config = field.config; // already set by the prepare task\n\n      if (field.state?.range) {\n        // Us the global min/max values\n        config = {\n          ...config,\n          ...field.state?.range,\n        };\n      }\n\n      const displayName = field.config.displayName ?? '';\n\n      const display =\n        field.display ??\n        getDisplayProcessor({\n          field,\n          theme: options.theme,\n          timeZone,\n        });\n\n      // Show all rows\n      if (reduceOptions.values) {\n        const usesCellValues = displayName.indexOf(VAR_CELL_PREFIX) >= 0;\n\n        for (let j = 0; j < field.values.length; j++) {\n          // Add all the row variables\n          if (usesCellValues) {\n            for (let k = 0; k < dataFrame.fields.length; k++) {\n              const f = dataFrame.fields[k];\n              const v = f.values.get(j);\n              scopedVars[VAR_CELL_PREFIX + k] = {\n                value: v,\n                text: toString(v),\n              };\n            }\n          }\n\n          field.state = setIndexForPaletteColor(field, values.length);\n\n          const displayValue = display(field.values.get(j));\n          const rowName = getSmartDisplayNameForRow(dataFrame, field, j, replaceVariables, scopedVars);\n          const overrideColor = lookupRowColorFromOverride(rowName, options.fieldConfig, theme);\n\n          values.push({\n            name: '',\n            field: config,\n            display: {\n              ...displayValue,\n              title: rowName,\n              color: overrideColor ?? displayValue.color,\n            },\n            view,\n            colIndex: i,\n            rowIndex: j,\n            getLinks: fieldLinksSupplier\n              ? () =>\n                  fieldLinksSupplier({\n                    valueRowIndex: j,\n                  })\n              : () => [],\n            hasLinks: hasLinks(field),\n          });\n\n          if (values.length >= limit) {\n            hitLimit = true;\n            break;\n          }\n        }\n      } else {\n        const results = reduceField({\n          field,\n          reducers: calcs, // The stats to calculate\n        });\n\n        for (const calc of calcs) {\n          scopedVars[VAR_CALC] = { value: calc, text: calc };\n          const displayValue = display(results[calc]);\n\n          if (displayName !== '') {\n            displayValue.title = replaceVariables(displayName, {\n              ...field.state?.scopedVars, // series and field scoped vars\n              ...scopedVars,\n            });\n          } else {\n            displayValue.title = getFieldDisplayName(field, dataFrame, data);\n          }\n\n          let sparkline: FieldSparkline | undefined = undefined;\n          if (options.sparkline) {\n            sparkline = {\n              y: dataFrame.fields[i],\n              x: timeField,\n            };\n            if (calc === ReducerID.last) {\n              sparkline.highlightIndex = sparkline.y.values.length - 1;\n            } else if (calc === ReducerID.first) {\n              sparkline.highlightIndex = 0;\n            }\n          }\n\n          values.push({\n            name: calc,\n            field: config,\n            display: displayValue,\n            sparkline,\n            view,\n            colIndex: i,\n            getLinks: fieldLinksSupplier\n              ? () =>\n                  fieldLinksSupplier({\n                    calculatedValue: displayValue,\n                  })\n              : () => [],\n            hasLinks: hasLinks(field),\n          });\n        }\n      }\n    }\n  }\n\n  if (values.length === 0) {\n    values.push(createNoValuesFieldDisplay(options));\n  }\n\n  return values;\n};\n\nfunction getSmartDisplayNameForRow(\n  frame: DataFrame,\n  field: Field,\n  rowIndex: number,\n  replaceVariables: InterpolateFunction,\n  scopedVars: ScopedVars\n): string {\n  let parts: string[] = [];\n  let otherNumericFields = 0;\n\n  if (field.config.displayName) {\n    return replaceVariables(field.config.displayName, {\n      ...field.state?.scopedVars, // series and field scoped vars\n      ...scopedVars,\n    });\n  }\n\n  for (const otherField of frame.fields) {\n    if (otherField === field) {\n      continue;\n    }\n\n    if (otherField.type === FieldType.string) {\n      const value = otherField.values.get(rowIndex) ?? '';\n      const mappedValue = otherField.display ? otherField.display(value).text : value;\n      if (mappedValue.length > 0) {\n        parts.push(mappedValue);\n      }\n    } else if (otherField.type === FieldType.number) {\n      otherNumericFields++;\n    }\n  }\n\n  if (otherNumericFields || parts.length === 0) {\n    parts.push(getFieldDisplayName(field, frame));\n  }\n\n  return parts.join(' ');\n}\n\n/**\n * Palette color modes use series index (field index) which does not work for when displaing rows\n * So updating seriesIndex here makes the palette color modes work in \"All values\" mode\n */\nfunction setIndexForPaletteColor(field: Field, currentLength: number) {\n  return {\n    ...field.state,\n    seriesIndex: currentLength,\n  };\n}\n\n/**\n * This function makes overrides that set color work for row values\n */\nfunction lookupRowColorFromOverride(displayName: string, fieldConfig: FieldConfigSource, theme: GrafanaTheme2) {\n  for (const override of fieldConfig.overrides) {\n    if (override.matcher.id === 'byName' && override.matcher.options === displayName) {\n      for (const prop of override.properties) {\n        if (prop.id === 'color' && prop.value) {\n          return theme.visualization.getColorByName(prop.value.fixedColor);\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nexport function hasLinks(field: Field): boolean {\n  return field.config?.links?.length ? field.config.links.length > 0 : false;\n}\n\nexport function getDisplayValueAlignmentFactors(values: FieldDisplay[]): DisplayValueAlignmentFactors {\n  const info: DisplayValueAlignmentFactors = {\n    title: '',\n    text: '',\n  };\n\n  let prefixLength = 0;\n  let suffixLength = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    const v = values[i].display;\n\n    if (v.text && v.text.length > info.text.length) {\n      info.text = v.text;\n    }\n\n    if (v.title && v.title.length > info.title.length) {\n      info.title = v.title;\n    }\n\n    if (v.prefix && v.prefix.length > prefixLength) {\n      info.prefix = v.prefix;\n      prefixLength = v.prefix.length;\n    }\n\n    if (v.suffix && v.suffix.length > suffixLength) {\n      info.suffix = v.suffix;\n      suffixLength = v.suffix.length;\n    }\n  }\n  return info;\n}\n\nfunction createNoValuesFieldDisplay(options: GetFieldDisplayValuesOptions): FieldDisplay {\n  const displayName = 'No data';\n  const { fieldConfig, timeZone } = options;\n  const { defaults } = fieldConfig;\n\n  const displayProcessor = getDisplayProcessor({\n    field: {\n      type: FieldType.other,\n      config: defaults,\n    },\n    theme: options.theme,\n    timeZone,\n  });\n\n  const display = displayProcessor(null);\n  const text = getDisplayText(display, displayName);\n\n  return {\n    name: displayName,\n    field: {\n      ...defaults,\n      max: defaults.max ?? 0,\n      min: defaults.min ?? 0,\n    },\n    display: {\n      text,\n      numeric: 0,\n      color: display.color,\n    },\n    hasLinks: false,\n  };\n}\n\nfunction getDisplayText(display: DisplayValue, fallback: string): string {\n  if (!display || isEmpty(display.text)) {\n    return fallback;\n  }\n  return display.text;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}