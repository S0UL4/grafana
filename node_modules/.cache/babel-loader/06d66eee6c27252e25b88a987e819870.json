{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { FunctionalVector } from '../vector/FunctionalVector';\n/**\n * This abstraction will present the contents of a DataFrame as if\n * it were a well typed javascript object Vector.\n *\n * @remarks\n * The {@link DataFrameView.get} is optimized for use in a loop and will return same object.\n * See function for more details.\n *\n * @typeParam T - Type of object stored in the DataFrame.\n * @beta\n */\n\nexport class DataFrameView extends FunctionalVector {\n  constructor(data) {\n    super();\n\n    _defineProperty(this, \"index\", 0);\n\n    _defineProperty(this, \"obj\", void 0);\n\n    _defineProperty(this, \"fields\", void 0);\n\n    this.data = data;\n    const obj = {};\n    const fields = {};\n\n    for (let i = 0; i < data.fields.length; i++) {\n      const field = data.fields[i];\n\n      if (!field.name) {\n        continue; // unsupported\n      }\n\n      fields[field.name] = field;\n\n      const getter = () => field.values.get(this.index);\n\n      if (!obj.hasOwnProperty(field.name)) {\n        Object.defineProperty(obj, field.name, {\n          enumerable: true,\n          // Shows up as enumerable property\n          get: getter\n        });\n      }\n\n      if (!obj.hasOwnProperty(i.toString())) {\n        Object.defineProperty(obj, i, {\n          enumerable: false,\n          // Don't enumerate array index\n          get: getter\n        });\n      }\n    }\n\n    this.obj = obj;\n    this.fields = fields;\n  }\n\n  get dataFrame() {\n    return this.data;\n  }\n\n  get length() {\n    return this.data.length;\n  }\n  /**\n   * Helper function to return the {@link DisplayProcessor} for a given field column.\n   * @param colIndex - the field column index for the data frame.\n   */\n\n\n  getFieldDisplayProcessor(colIndex) {\n    if (!this.dataFrame || !this.dataFrame.fields) {\n      return undefined;\n    }\n\n    const field = this.dataFrame.fields[colIndex];\n\n    if (!field || !field.display) {\n      return undefined;\n    }\n\n    return field.display;\n  }\n  /**\n   * The contents of the object returned from this function\n   * are optimized for use in a loop. All calls return the same object\n   * but the index has changed.\n   *\n   * @example\n   * ```typescript\n   *   // `first`, `second` and `third` will all point to the same contents at index 2:\n   *   const first = view.get(0);\n   *   const second = view.get(1);\n   *   const third = view.get(2);\n   *\n   *   // If you need three different objects, consider something like:\n   *   const first = { ...view.get(0) };\n   *   const second = { ...view.get(1) };\n   *   const third = { ...view.get(2) };\n   * ```\n   * @param idx - The index of the object you currently are inspecting\n   */\n\n\n  get(idx) {\n    this.index = idx;\n    return this.obj;\n  }\n\n  toArray() {\n    return new Array(this.data.length).fill(0) // Needs to make a full copy\n    .map((_, i) => Object.assign({}, this.get(i)));\n  }\n\n}","map":{"version":3,"names":["FunctionalVector","DataFrameView","constructor","data","obj","fields","i","length","field","name","getter","values","get","index","hasOwnProperty","Object","defineProperty","enumerable","toString","dataFrame","getFieldDisplayProcessor","colIndex","undefined","display","idx","toArray","Array","fill","map","_"],"sources":["/home/soula/grafana/packages/grafana-data/src/dataframe/DataFrameView.ts"],"sourcesContent":["import { DisplayProcessor } from '../types';\nimport { DataFrame, Field } from '../types/dataFrame';\nimport { FunctionalVector } from '../vector/FunctionalVector';\n\n/**\n * This abstraction will present the contents of a DataFrame as if\n * it were a well typed javascript object Vector.\n *\n * @remarks\n * The {@link DataFrameView.get} is optimized for use in a loop and will return same object.\n * See function for more details.\n *\n * @typeParam T - Type of object stored in the DataFrame.\n * @beta\n */\nexport class DataFrameView<T = any> extends FunctionalVector<T> {\n  private index = 0;\n  private obj: T;\n  readonly fields: {\n    readonly [Property in keyof T]: Field<T[Property]>;\n  };\n\n  constructor(private data: DataFrame) {\n    super();\n    const obj = {} as unknown as T;\n    const fields = {} as any;\n\n    for (let i = 0; i < data.fields.length; i++) {\n      const field = data.fields[i];\n      if (!field.name) {\n        continue; // unsupported\n      }\n\n      fields[field.name] = field;\n      const getter = () => field.values.get(this.index);\n\n      if (!(obj as any).hasOwnProperty(field.name)) {\n        Object.defineProperty(obj, field.name, {\n          enumerable: true, // Shows up as enumerable property\n          get: getter,\n        });\n      }\n\n      if (!(obj as any).hasOwnProperty(i.toString())) {\n        Object.defineProperty(obj, i, {\n          enumerable: false, // Don't enumerate array index\n          get: getter,\n        });\n      }\n    }\n\n    this.obj = obj;\n    this.fields = fields;\n  }\n\n  get dataFrame() {\n    return this.data;\n  }\n\n  get length() {\n    return this.data.length;\n  }\n\n  /**\n   * Helper function to return the {@link DisplayProcessor} for a given field column.\n   * @param colIndex - the field column index for the data frame.\n   */\n  getFieldDisplayProcessor(colIndex: number): DisplayProcessor | undefined {\n    if (!this.dataFrame || !this.dataFrame.fields) {\n      return undefined;\n    }\n\n    const field = this.dataFrame.fields[colIndex];\n\n    if (!field || !field.display) {\n      return undefined;\n    }\n\n    return field.display;\n  }\n\n  /**\n   * The contents of the object returned from this function\n   * are optimized for use in a loop. All calls return the same object\n   * but the index has changed.\n   *\n   * @example\n   * ```typescript\n   *   // `first`, `second` and `third` will all point to the same contents at index 2:\n   *   const first = view.get(0);\n   *   const second = view.get(1);\n   *   const third = view.get(2);\n   *\n   *   // If you need three different objects, consider something like:\n   *   const first = { ...view.get(0) };\n   *   const second = { ...view.get(1) };\n   *   const third = { ...view.get(2) };\n   * ```\n   * @param idx - The index of the object you currently are inspecting\n   */\n  get(idx: number) {\n    this.index = idx;\n    return this.obj;\n  }\n\n  toArray(): T[] {\n    return new Array(this.data.length)\n      .fill(0) // Needs to make a full copy\n      .map((_, i) => ({ ...this.get(i) }));\n  }\n}\n"],"mappings":";;AAEA,SAASA,gBAAT,QAAiC,4BAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,aAAN,SAAqCD,gBAArC,CAAyD;EAO9DE,WAAW,CAASC,IAAT,EAA0B;IACnC;;IADmC,+BANrB,CAMqB;;IAAA;;IAAA;;IAAA,KAAjBA,IAAiB,GAAjBA,IAAiB;IAEnC,MAAMC,GAAG,GAAG,EAAZ;IACA,MAAMC,MAAM,GAAG,EAAf;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACE,MAAL,CAAYE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;MAC3C,MAAME,KAAK,GAAGL,IAAI,CAACE,MAAL,CAAYC,CAAZ,CAAd;;MACA,IAAI,CAACE,KAAK,CAACC,IAAX,EAAiB;QACf,SADe,CACL;MACX;;MAEDJ,MAAM,CAACG,KAAK,CAACC,IAAP,CAAN,GAAqBD,KAArB;;MACA,MAAME,MAAM,GAAG,MAAMF,KAAK,CAACG,MAAN,CAAaC,GAAb,CAAiB,KAAKC,KAAtB,CAArB;;MAEA,IAAI,CAAET,GAAD,CAAaU,cAAb,CAA4BN,KAAK,CAACC,IAAlC,CAAL,EAA8C;QAC5CM,MAAM,CAACC,cAAP,CAAsBZ,GAAtB,EAA2BI,KAAK,CAACC,IAAjC,EAAuC;UACrCQ,UAAU,EAAE,IADyB;UACnB;UAClBL,GAAG,EAAEF;QAFgC,CAAvC;MAID;;MAED,IAAI,CAAEN,GAAD,CAAaU,cAAb,CAA4BR,CAAC,CAACY,QAAF,EAA5B,CAAL,EAAgD;QAC9CH,MAAM,CAACC,cAAP,CAAsBZ,GAAtB,EAA2BE,CAA3B,EAA8B;UAC5BW,UAAU,EAAE,KADgB;UACT;UACnBL,GAAG,EAAEF;QAFuB,CAA9B;MAID;IACF;;IAED,KAAKN,GAAL,GAAWA,GAAX;IACA,KAAKC,MAAL,GAAcA,MAAd;EACD;;EAEY,IAATc,SAAS,GAAG;IACd,OAAO,KAAKhB,IAAZ;EACD;;EAES,IAANI,MAAM,GAAG;IACX,OAAO,KAAKJ,IAAL,CAAUI,MAAjB;EACD;EAED;AACF;AACA;AACA;;;EACEa,wBAAwB,CAACC,QAAD,EAAiD;IACvE,IAAI,CAAC,KAAKF,SAAN,IAAmB,CAAC,KAAKA,SAAL,CAAed,MAAvC,EAA+C;MAC7C,OAAOiB,SAAP;IACD;;IAED,MAAMd,KAAK,GAAG,KAAKW,SAAL,CAAed,MAAf,CAAsBgB,QAAtB,CAAd;;IAEA,IAAI,CAACb,KAAD,IAAU,CAACA,KAAK,CAACe,OAArB,EAA8B;MAC5B,OAAOD,SAAP;IACD;;IAED,OAAOd,KAAK,CAACe,OAAb;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEX,GAAG,CAACY,GAAD,EAAc;IACf,KAAKX,KAAL,GAAaW,GAAb;IACA,OAAO,KAAKpB,GAAZ;EACD;;EAEDqB,OAAO,GAAQ;IACb,OAAO,IAAIC,KAAJ,CAAU,KAAKvB,IAAL,CAAUI,MAApB,EACJoB,IADI,CACC,CADD,EACI;IADJ,CAEJC,GAFI,CAEA,CAACC,CAAD,EAAIvB,CAAJ,uBAAgB,KAAKM,GAAL,CAASN,CAAT,CAAhB,CAFA,CAAP;EAGD;;AA9F6D"},"metadata":{},"sourceType":"module"}