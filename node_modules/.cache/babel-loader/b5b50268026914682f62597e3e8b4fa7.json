{"ast":null,"code":"import { debounce, intersection, unionBy } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { toOption } from '@grafana/data';\nimport { MultiSelect } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\nimport { appendTemplateVariables } from '../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst MAX_LOG_GROUPS = 20;\nconst MAX_VISIBLE_LOG_GROUPS = 4;\nconst DEBOUNCE_TIMER = 300;\nexport const LogGroupSelector = ({\n  region,\n  selectedLogGroups,\n  onChange,\n  datasource,\n  onRunQuery,\n  onOpenMenu,\n  refId,\n  width,\n  saved = true\n}) => {\n  const [loadingLogGroups, setLoadingLogGroups] = useState(false);\n  const [availableLogGroups, setAvailableLogGroups] = useState([]);\n  const logGroupOptions = useMemo(() => unionBy(availableLogGroups, selectedLogGroups === null || selectedLogGroups === void 0 ? void 0 : selectedLogGroups.map(toOption), 'value'), [availableLogGroups, selectedLogGroups]);\n  const fetchLogGroupOptions = useCallback(async (region, logGroupNamePrefix) => {\n    if (!datasource) {\n      return [];\n    }\n\n    try {\n      const logGroups = await datasource.describeLogGroups({\n        refId,\n        region,\n        logGroupNamePrefix\n      });\n      return logGroups.map(toOption);\n    } catch (err) {\n      dispatch(notifyApp(createErrorNotification(typeof err === 'string' ? err : JSON.stringify(err))));\n      return [];\n    }\n  }, [datasource, refId]);\n\n  const onLogGroupSearch = async (searchTerm, region, actionMeta) => {\n    if (actionMeta.action !== 'input-change' || !datasource) {\n      return;\n    } // No need to fetch matching log groups if the search term isn't valid\n    // This is also useful for preventing searches when a user is typing out a log group with template vars\n    // See https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_LogGroup.html for the source of the pattern below\n\n\n    const logGroupNamePattern = /^[\\.\\-_/#A-Za-z0-9]+$/;\n\n    if (!logGroupNamePattern.test(searchTerm)) {\n      if (searchTerm !== '') {\n        dispatch(notifyApp(createErrorNotification('Invalid Log Group name: ' + searchTerm)));\n      }\n\n      return;\n    }\n\n    setLoadingLogGroups(true);\n    const matchingLogGroups = await fetchLogGroupOptions(region, searchTerm);\n    setAvailableLogGroups(unionBy(availableLogGroups, matchingLogGroups, 'value'));\n    setLoadingLogGroups(false);\n  }; // Reset the log group options if the datasource or region change and are saved\n\n\n  useEffect(() => {\n    async function resetLogGroups() {\n      // Don't call describeLogGroups if datasource or region is undefined\n      if (!datasource || !datasource.getActualRegion(region)) {\n        setAvailableLogGroups([]);\n        return;\n      }\n\n      setLoadingLogGroups(true);\n      return fetchLogGroupOptions(datasource.getActualRegion(region)).then(logGroups => {\n        const newSelectedLogGroups = intersection(selectedLogGroups, logGroups.map(l => l.value || ''));\n        onChange(newSelectedLogGroups);\n        setAvailableLogGroups(logGroups);\n      }).finally(() => {\n        setLoadingLogGroups(false);\n      });\n    } // Only reset if the current datasource is saved\n\n\n    saved && resetLogGroups(); // this hook shouldn't get called every time selectedLogGroups or onChange updates\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [datasource, region, saved]);\n\n  const onOpenLogGroupMenu = async () => {\n    if (onOpenMenu) {\n      await onOpenMenu();\n    }\n  };\n\n  const onLogGroupSearchDebounced = debounce(onLogGroupSearch, DEBOUNCE_TIMER);\n  return /*#__PURE__*/_jsx(MultiSelect, {\n    inputId: \"default-log-groups\",\n    \"aria-label\": \"Log Groups\",\n    allowCustomValue: true,\n    options: datasource ? appendTemplateVariables(datasource, logGroupOptions) : logGroupOptions,\n    value: selectedLogGroups,\n    onChange: v => onChange(v.filter(({\n      value\n    }) => value).map(({\n      value\n    }) => value)),\n    onBlur: onRunQuery,\n    closeMenuOnSelect: false,\n    isClearable: true,\n    isOptionDisabled: () => selectedLogGroups.length >= MAX_LOG_GROUPS,\n    placeholder: \"Choose Log Groups\",\n    maxVisibleValues: MAX_VISIBLE_LOG_GROUPS,\n    noOptionsMessage: \"No log groups available\",\n    isLoading: loadingLogGroups,\n    onOpenMenu: onOpenLogGroupMenu,\n    onInputChange: (value, actionMeta) => {\n      onLogGroupSearchDebounced(value, region, actionMeta);\n    },\n    width: width\n  });\n};","map":{"version":3,"names":["debounce","intersection","unionBy","React","useCallback","useEffect","useMemo","useState","toOption","MultiSelect","notifyApp","createErrorNotification","dispatch","appendTemplateVariables","MAX_LOG_GROUPS","MAX_VISIBLE_LOG_GROUPS","DEBOUNCE_TIMER","LogGroupSelector","region","selectedLogGroups","onChange","datasource","onRunQuery","onOpenMenu","refId","width","saved","loadingLogGroups","setLoadingLogGroups","availableLogGroups","setAvailableLogGroups","logGroupOptions","map","fetchLogGroupOptions","logGroupNamePrefix","logGroups","describeLogGroups","err","JSON","stringify","onLogGroupSearch","searchTerm","actionMeta","action","logGroupNamePattern","test","matchingLogGroups","resetLogGroups","getActualRegion","then","newSelectedLogGroups","l","value","finally","onOpenLogGroupMenu","onLogGroupSearchDebounced","v","filter","length"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/LogGroupSelector.tsx"],"sourcesContent":["import { debounce, intersection, unionBy } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { MultiSelect } from '@grafana/ui';\nimport { InputActionMeta } from '@grafana/ui/src/components/Select/types';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { appendTemplateVariables } from '../utils/utils';\n\nconst MAX_LOG_GROUPS = 20;\nconst MAX_VISIBLE_LOG_GROUPS = 4;\nconst DEBOUNCE_TIMER = 300;\n\nexport interface LogGroupSelectorProps {\n  region: string;\n  selectedLogGroups: string[];\n  onChange: (logGroups: string[]) => void;\n\n  datasource?: CloudWatchDatasource;\n  onRunQuery?: () => void;\n  onOpenMenu?: () => Promise<void>;\n  refId?: string;\n  width?: number | 'auto';\n  saved?: boolean;\n}\n\nexport const LogGroupSelector: React.FC<LogGroupSelectorProps> = ({\n  region,\n  selectedLogGroups,\n  onChange,\n  datasource,\n  onRunQuery,\n  onOpenMenu,\n  refId,\n  width,\n  saved = true,\n}) => {\n  const [loadingLogGroups, setLoadingLogGroups] = useState(false);\n  const [availableLogGroups, setAvailableLogGroups] = useState<Array<SelectableValue<string>>>([]);\n  const logGroupOptions = useMemo(\n    () => unionBy(availableLogGroups, selectedLogGroups?.map(toOption), 'value'),\n    [availableLogGroups, selectedLogGroups]\n  );\n\n  const fetchLogGroupOptions = useCallback(\n    async (region: string, logGroupNamePrefix?: string) => {\n      if (!datasource) {\n        return [];\n      }\n      try {\n        const logGroups: string[] = await datasource.describeLogGroups({\n          refId,\n          region,\n          logGroupNamePrefix,\n        });\n        return logGroups.map(toOption);\n      } catch (err) {\n        dispatch(notifyApp(createErrorNotification(typeof err === 'string' ? err : JSON.stringify(err))));\n        return [];\n      }\n    },\n    [datasource, refId]\n  );\n\n  const onLogGroupSearch = async (searchTerm: string, region: string, actionMeta: InputActionMeta) => {\n    if (actionMeta.action !== 'input-change' || !datasource) {\n      return;\n    }\n\n    // No need to fetch matching log groups if the search term isn't valid\n    // This is also useful for preventing searches when a user is typing out a log group with template vars\n    // See https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_LogGroup.html for the source of the pattern below\n    const logGroupNamePattern = /^[\\.\\-_/#A-Za-z0-9]+$/;\n    if (!logGroupNamePattern.test(searchTerm)) {\n      if (searchTerm !== '') {\n        dispatch(notifyApp(createErrorNotification('Invalid Log Group name: ' + searchTerm)));\n      }\n      return;\n    }\n\n    setLoadingLogGroups(true);\n    const matchingLogGroups = await fetchLogGroupOptions(region, searchTerm);\n    setAvailableLogGroups(unionBy(availableLogGroups, matchingLogGroups, 'value'));\n    setLoadingLogGroups(false);\n  };\n\n  // Reset the log group options if the datasource or region change and are saved\n  useEffect(() => {\n    async function resetLogGroups() {\n      // Don't call describeLogGroups if datasource or region is undefined\n      if (!datasource || !datasource.getActualRegion(region)) {\n        setAvailableLogGroups([]);\n        return;\n      }\n\n      setLoadingLogGroups(true);\n      return fetchLogGroupOptions(datasource.getActualRegion(region))\n        .then((logGroups) => {\n          const newSelectedLogGroups = intersection(\n            selectedLogGroups,\n            logGroups.map((l) => l.value || '')\n          );\n          onChange(newSelectedLogGroups);\n          setAvailableLogGroups(logGroups);\n        })\n        .finally(() => {\n          setLoadingLogGroups(false);\n        });\n    }\n    // Only reset if the current datasource is saved\n    saved && resetLogGroups();\n    // this hook shouldn't get called every time selectedLogGroups or onChange updates\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [datasource, region, saved]);\n\n  const onOpenLogGroupMenu = async () => {\n    if (onOpenMenu) {\n      await onOpenMenu();\n    }\n  };\n\n  const onLogGroupSearchDebounced = debounce(onLogGroupSearch, DEBOUNCE_TIMER);\n\n  return (\n    <MultiSelect\n      inputId=\"default-log-groups\"\n      aria-label=\"Log Groups\"\n      allowCustomValue\n      options={datasource ? appendTemplateVariables(datasource, logGroupOptions) : logGroupOptions}\n      value={selectedLogGroups}\n      onChange={(v) => onChange(v.filter(({ value }) => value).map(({ value }) => value))}\n      onBlur={onRunQuery}\n      closeMenuOnSelect={false}\n      isClearable\n      isOptionDisabled={() => selectedLogGroups.length >= MAX_LOG_GROUPS}\n      placeholder=\"Choose Log Groups\"\n      maxVisibleValues={MAX_VISIBLE_LOG_GROUPS}\n      noOptionsMessage=\"No log groups available\"\n      isLoading={loadingLogGroups}\n      onOpenMenu={onOpenLogGroupMenu}\n      onInputChange={(value, actionMeta) => {\n        onLogGroupSearchDebounced(value, region, actionMeta);\n      }}\n      width={width}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}