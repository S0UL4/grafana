{"ast":null,"code":"var _h, _Button;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Input, Form, Field } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { validationSrv } from '../../manage-dashboards/services/ValidationSrv';\nimport { createNewFolder } from '../state/actions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst mapStateToProps = state => ({\n  navModel: getNavModel(state.navIndex, 'manage-dashboards')\n});\n\nconst mapDispatchToProps = {\n  createNewFolder\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nconst initialFormModel = {\n  folderName: ''\n};\nexport class NewDashboardsFolder extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onSubmit\", formData => {\n      this.props.createNewFolder(formData.folderName);\n    });\n\n    _defineProperty(this, \"validateFolderName\", folderName => {\n      return validationSrv.validateNewFolderName(folderName).then(() => {\n        return true;\n      }).catch(e => {\n        return e.message;\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: this.props.navModel,\n      children: /*#__PURE__*/_jsxs(Page.Contents, {\n        children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n          children: \"New dashboard folder\"\n        })), /*#__PURE__*/_jsx(Form, {\n          defaultValues: initialFormModel,\n          onSubmit: this.onSubmit,\n          children: ({\n            register,\n            errors\n          }) => /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Field, {\n              label: \"Folder name\",\n              invalid: !!errors.folderName,\n              error: errors.folderName && errors.folderName.message,\n              children: /*#__PURE__*/_jsx(Input, Object.assign({\n                id: \"folder-name-input\"\n              }, register('folderName', {\n                required: 'Folder name is required.',\n                validate: async v => await this.validateFolderName(v)\n              })))\n            }), _Button || (_Button = /*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              children: \"Create\"\n            }))]\n          })\n        })]\n      })\n    });\n  }\n\n}\nexport default connector(NewDashboardsFolder);","map":{"version":3,"names":["React","PureComponent","connect","Button","Input","Form","Field","Page","getNavModel","validationSrv","createNewFolder","mapStateToProps","state","navModel","navIndex","mapDispatchToProps","connector","initialFormModel","folderName","NewDashboardsFolder","formData","props","validateNewFolderName","then","catch","e","message","render","onSubmit","register","errors","required","validate","v","validateFolderName"],"sources":["/home/soula/grafana/public/app/features/folders/components/NewDashboardsFolder.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Button, Input, Form, Field } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\nimport { validationSrv } from '../../manage-dashboards/services/ValidationSrv';\nimport { createNewFolder } from '../state/actions';\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n});\n\nconst mapDispatchToProps = {\n  createNewFolder,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\ninterface FormModel {\n  folderName: string;\n}\n\nconst initialFormModel: FormModel = { folderName: '' };\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class NewDashboardsFolder extends PureComponent<Props> {\n  onSubmit = (formData: FormModel) => {\n    this.props.createNewFolder(formData.folderName);\n  };\n\n  validateFolderName = (folderName: string) => {\n    return validationSrv\n      .validateNewFolderName(folderName)\n      .then(() => {\n        return true;\n      })\n      .catch((e) => {\n        return e.message;\n      });\n  };\n\n  render() {\n    return (\n      <Page navModel={this.props.navModel}>\n        <Page.Contents>\n          <h3>New dashboard folder</h3>\n          <Form defaultValues={initialFormModel} onSubmit={this.onSubmit}>\n            {({ register, errors }) => (\n              <>\n                <Field\n                  label=\"Folder name\"\n                  invalid={!!errors.folderName}\n                  error={errors.folderName && errors.folderName.message}\n                >\n                  <Input\n                    id=\"folder-name-input\"\n                    {...register('folderName', {\n                      required: 'Folder name is required.',\n                      validate: async (v) => await this.validateFolderName(v),\n                    })}\n                  />\n                </Field>\n                <Button type=\"submit\">Create</Button>\n              </>\n            )}\n          </Form>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(NewDashboardsFolder);\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwC,aAAxC;AAEA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,KAA9B,QAA2C,aAA3C;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAGA,SAASC,aAAT,QAA8B,gDAA9B;AACA,SAASC,eAAT,QAAgC,kBAAhC;;;;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAwB;EAC9CC,QAAQ,EAAEL,WAAW,CAACI,KAAK,CAACE,QAAP,EAAiB,mBAAjB;AADyB,CAAxB,CAAxB;;AAIA,MAAMC,kBAAkB,GAAG;EACzBL;AADyB,CAA3B;AAIA,MAAMM,SAAS,GAAGd,OAAO,CAACS,eAAD,EAAkBI,kBAAlB,CAAzB;AAQA,MAAME,gBAA2B,GAAG;EAAEC,UAAU,EAAE;AAAd,CAApC;AAIA,OAAO,MAAMC,mBAAN,SAAkClB,aAAlC,CAAuD;EAAA;IAAA;;IAAA,kCAChDmB,QAAD,IAAyB;MAClC,KAAKC,KAAL,CAAWX,eAAX,CAA2BU,QAAQ,CAACF,UAApC;IACD,CAH2D;;IAAA,4CAKtCA,UAAD,IAAwB;MAC3C,OAAOT,aAAa,CACjBa,qBADI,CACkBJ,UADlB,EAEJK,IAFI,CAEC,MAAM;QACV,OAAO,IAAP;MACD,CAJI,EAKJC,KALI,CAKGC,CAAD,IAAO;QACZ,OAAOA,CAAC,CAACC,OAAT;MACD,CAPI,CAAP;IAQD,CAd2D;EAAA;;EAgB5DC,MAAM,GAAG;IACP,oBACE,KAAC,IAAD;MAAM,QAAQ,EAAE,KAAKN,KAAL,CAAWR,QAA3B;MAAA,uBACE,MAAC,IAAD,CAAM,QAAN;QAAA,oCACE;UAAA;QAAA,EADF,gBAEE,KAAC,IAAD;UAAM,aAAa,EAAEI,gBAArB;UAAuC,QAAQ,EAAE,KAAKW,QAAtD;UAAA,UACG,CAAC;YAAEC,QAAF;YAAYC;UAAZ,CAAD,kBACC;YAAA,wBACE,KAAC,KAAD;cACE,KAAK,EAAC,aADR;cAEE,OAAO,EAAE,CAAC,CAACA,MAAM,CAACZ,UAFpB;cAGE,KAAK,EAAEY,MAAM,CAACZ,UAAP,IAAqBY,MAAM,CAACZ,UAAP,CAAkBQ,OAHhD;cAAA,uBAKE,KAAC,KAAD;gBACE,EAAE,EAAC;cADL,GAEMG,QAAQ,CAAC,YAAD,EAAe;gBACzBE,QAAQ,EAAE,0BADe;gBAEzBC,QAAQ,EAAE,MAAOC,CAAP,IAAa,MAAM,KAAKC,kBAAL,CAAwBD,CAAxB;cAFJ,CAAf,CAFd;YALF,EADF,qCAcE,KAAC,MAAD;cAAQ,IAAI,EAAC,QAAb;cAAA;YAAA,EAdF;UAAA;QAFJ,EAFF;MAAA;IADF,EADF;EA2BD;;AA5C2D;AA+C9D,eAAejB,SAAS,CAACG,mBAAD,CAAxB"},"metadata":{},"sourceType":"module"}