{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { Select } from '@grafana/ui';\nimport { SELECT_WIDTH } from '../constants';\nimport { getAlignmentPickerData } from '../functions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const AlignmentFunction = ({\n  inputId,\n  query,\n  templateVariableOptions,\n  onChange\n}) => {\n  const {\n    valueType,\n    metricKind,\n    perSeriesAligner: psa,\n    preprocessor\n  } = query;\n  const {\n    perSeriesAligner,\n    alignOptions\n  } = useMemo(() => getAlignmentPickerData(valueType, metricKind, psa, preprocessor), [valueType, metricKind, psa, preprocessor]);\n  return /*#__PURE__*/_jsx(Select, {\n    width: SELECT_WIDTH,\n    onChange: ({\n      value\n    }) => onChange(Object.assign({}, query, {\n      perSeriesAligner: value\n    })),\n    value: [...alignOptions, ...templateVariableOptions].find(s => s.value === perSeriesAligner),\n    options: [{\n      label: 'Template Variables',\n      options: templateVariableOptions\n    }, {\n      label: 'Alignment options',\n      expanded: true,\n      options: alignOptions\n    }],\n    placeholder: \"Select Alignment\",\n    inputId: inputId\n  });\n};","map":{"version":3,"names":["React","useMemo","Select","SELECT_WIDTH","getAlignmentPickerData","AlignmentFunction","inputId","query","templateVariableOptions","onChange","valueType","metricKind","perSeriesAligner","psa","preprocessor","alignOptions","value","find","s","label","options","expanded"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/AlignmentFunction.tsx"],"sourcesContent":["import React, { FC, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { SELECT_WIDTH } from '../constants';\nimport { getAlignmentPickerData } from '../functions';\nimport { MetricQuery } from '../types';\n\nexport interface Props {\n  inputId: string;\n  onChange: (query: MetricQuery) => void;\n  query: MetricQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n}\n\nexport const AlignmentFunction: FC<Props> = ({ inputId, query, templateVariableOptions, onChange }) => {\n  const { valueType, metricKind, perSeriesAligner: psa, preprocessor } = query;\n  const { perSeriesAligner, alignOptions } = useMemo(\n    () => getAlignmentPickerData(valueType, metricKind, psa, preprocessor),\n    [valueType, metricKind, psa, preprocessor]\n  );\n\n  return (\n    <Select\n      width={SELECT_WIDTH}\n      onChange={({ value }) => onChange({ ...query, perSeriesAligner: value! })}\n      value={[...alignOptions, ...templateVariableOptions].find((s) => s.value === perSeriesAligner)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Alignment options',\n          expanded: true,\n          options: alignOptions,\n        },\n      ]}\n      placeholder=\"Select Alignment\"\n      inputId={inputId}\n    ></Select>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAEA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,sBAAT,QAAuC,cAAvC;;AAUA,OAAO,MAAMC,iBAA4B,GAAG,CAAC;EAAEC,OAAF;EAAWC,KAAX;EAAkBC,uBAAlB;EAA2CC;AAA3C,CAAD,KAA2D;EACrG,MAAM;IAAEC,SAAF;IAAaC,UAAb;IAAyBC,gBAAgB,EAAEC,GAA3C;IAAgDC;EAAhD,IAAiEP,KAAvE;EACA,MAAM;IAAEK,gBAAF;IAAoBG;EAApB,IAAqCd,OAAO,CAChD,MAAMG,sBAAsB,CAACM,SAAD,EAAYC,UAAZ,EAAwBE,GAAxB,EAA6BC,YAA7B,CADoB,EAEhD,CAACJ,SAAD,EAAYC,UAAZ,EAAwBE,GAAxB,EAA6BC,YAA7B,CAFgD,CAAlD;EAKA,oBACE,KAAC,MAAD;IACE,KAAK,EAAEX,YADT;IAEE,QAAQ,EAAE,CAAC;MAAEa;IAAF,CAAD,KAAeP,QAAQ,mBAAMF,KAAN;MAAaK,gBAAgB,EAAEI;IAA/B,GAFnC;IAGE,KAAK,EAAE,CAAC,GAAGD,YAAJ,EAAkB,GAAGP,uBAArB,EAA8CS,IAA9C,CAAoDC,CAAD,IAAOA,CAAC,CAACF,KAAF,KAAYJ,gBAAtE,CAHT;IAIE,OAAO,EAAE,CACP;MACEO,KAAK,EAAE,oBADT;MAEEC,OAAO,EAAEZ;IAFX,CADO,EAKP;MACEW,KAAK,EAAE,mBADT;MAEEE,QAAQ,EAAE,IAFZ;MAGED,OAAO,EAAEL;IAHX,CALO,CAJX;IAeE,WAAW,EAAC,kBAfd;IAgBE,OAAO,EAAET;EAhBX,EADF;AAoBD,CA3BM"},"metadata":{},"sourceType":"module"}