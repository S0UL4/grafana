{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { createRef } from 'react';\nimport uPlot from 'uplot';\nimport { DEFAULT_PLOT_CONFIG, pluginLog } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction sameDims(prevProps, nextProps) {\n  return nextProps.width === prevProps.width && nextProps.height === prevProps.height;\n}\n\nfunction sameData(prevProps, nextProps) {\n  return nextProps.data === prevProps.data;\n}\n\nfunction sameConfig(prevProps, nextProps) {\n  return nextProps.config === prevProps.config;\n}\n\nfunction sameTimeRange(prevProps, nextProps) {\n  let prevTime = prevProps.timeRange;\n  let nextTime = nextProps.timeRange;\n  return prevTime === nextTime || nextTime.from.valueOf() === prevTime.from.valueOf() && nextTime.to.valueOf() === prevTime.to.valueOf();\n}\n\n/**\n * @internal\n * uPlot abstraction responsible for plot initialisation, setup and refresh\n * Receives a data frame that is x-axis aligned, as of https://github.com/leeoniya/uPlot/tree/master/docs#data-format\n * Exposes context for uPlot instance access\n */\nexport class UPlotChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"plotContainer\", /*#__PURE__*/createRef());\n\n    _defineProperty(this, \"plotCanvasBBox\", /*#__PURE__*/createRef());\n\n    this.state = {\n      plot: null\n    };\n  }\n\n  reinitPlot() {\n    var _this$state$plot;\n\n    let {\n      width,\n      height,\n      plotRef\n    } = this.props;\n    (_this$state$plot = this.state.plot) === null || _this$state$plot === void 0 ? void 0 : _this$state$plot.destroy();\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    this.props.config.addHook('setSize', u => {\n      const canvas = u.over;\n\n      if (!canvas) {\n        return;\n      }\n    });\n    const config = Object.assign({}, DEFAULT_PLOT_CONFIG, {\n      width: this.props.width,\n      height: this.props.height,\n      ms: 1\n    }, this.props.config.getConfig());\n    pluginLog('UPlot', false, 'Reinitializing plot', config);\n    const plot = new uPlot(config, this.props.data, this.plotContainer.current);\n\n    if (plotRef) {\n      plotRef(plot);\n    }\n\n    this.setState({\n      plot\n    });\n  }\n\n  componentDidMount() {\n    this.reinitPlot();\n  }\n\n  componentWillUnmount() {\n    var _this$state$plot2;\n\n    (_this$state$plot2 = this.state.plot) === null || _this$state$plot2 === void 0 ? void 0 : _this$state$plot2.destroy();\n  }\n\n  componentDidUpdate(prevProps) {\n    let {\n      plot\n    } = this.state;\n\n    if (!sameDims(prevProps, this.props)) {\n      plot === null || plot === void 0 ? void 0 : plot.setSize({\n        width: this.props.width,\n        height: this.props.height\n      });\n    } else if (!sameConfig(prevProps, this.props)) {\n      this.reinitPlot();\n    } else if (!sameData(prevProps, this.props)) {\n      var _this$props$data$;\n\n      plot === null || plot === void 0 ? void 0 : plot.setData(this.props.data); // this is a uPlot cache-busting hack for bar charts in case x axis labels changed\n      // since the x scale's \"range\" doesnt change, the axis size doesnt get recomputed, which is where the tick labels are regenerated & cached\n      // the more expensive, more proper/thorough way to do this is to force all axes to recalc: plot?.redraw(false, true);\n\n      if (plot && typeof ((_this$props$data$ = this.props.data[0]) === null || _this$props$data$ === void 0 ? void 0 : _this$props$data$[0]) === 'string') {\n        //@ts-ignore\n        plot.axes[0]._values = this.props.data[0];\n      }\n    } else if (!sameTimeRange(prevProps, this.props)) {\n      plot === null || plot === void 0 ? void 0 : plot.setScale('x', {\n        min: this.props.timeRange.from.valueOf(),\n        max: this.props.timeRange.to.valueOf()\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        ref: this.plotContainer,\n        \"data-testid\": \"uplot-main-div\"\n      }), this.props.children]\n    });\n  }\n\n}","map":{"version":3,"names":["React","createRef","uPlot","DEFAULT_PLOT_CONFIG","pluginLog","sameDims","prevProps","nextProps","width","height","sameData","data","sameConfig","config","sameTimeRange","prevTime","timeRange","nextTime","from","valueOf","to","UPlotChart","Component","constructor","props","state","plot","reinitPlot","plotRef","destroy","addHook","u","canvas","over","ms","getConfig","plotContainer","current","setState","componentDidMount","componentWillUnmount","componentDidUpdate","setSize","setData","axes","_values","setScale","min","max","render","position","children"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/uPlot/Plot.tsx"],"sourcesContent":["import React, { createRef } from 'react';\nimport uPlot, { AlignedData, Options } from 'uplot';\n\nimport { PlotProps } from './types';\nimport { DEFAULT_PLOT_CONFIG, pluginLog } from './utils';\n\nfunction sameDims(prevProps: PlotProps, nextProps: PlotProps) {\n  return nextProps.width === prevProps.width && nextProps.height === prevProps.height;\n}\n\nfunction sameData(prevProps: PlotProps, nextProps: PlotProps) {\n  return nextProps.data === prevProps.data;\n}\n\nfunction sameConfig(prevProps: PlotProps, nextProps: PlotProps) {\n  return nextProps.config === prevProps.config;\n}\n\nfunction sameTimeRange(prevProps: PlotProps, nextProps: PlotProps) {\n  let prevTime = prevProps.timeRange;\n  let nextTime = nextProps.timeRange;\n\n  return (\n    prevTime === nextTime ||\n    (nextTime.from.valueOf() === prevTime.from.valueOf() && nextTime.to.valueOf() === prevTime.to.valueOf())\n  );\n}\n\ntype UPlotChartState = {\n  plot: uPlot | null;\n};\n\n/**\n * @internal\n * uPlot abstraction responsible for plot initialisation, setup and refresh\n * Receives a data frame that is x-axis aligned, as of https://github.com/leeoniya/uPlot/tree/master/docs#data-format\n * Exposes context for uPlot instance access\n */\nexport class UPlotChart extends React.Component<PlotProps, UPlotChartState> {\n  plotContainer = createRef<HTMLDivElement>();\n  plotCanvasBBox = createRef<DOMRect>();\n\n  constructor(props: PlotProps) {\n    super(props);\n\n    this.state = {\n      plot: null,\n    };\n  }\n\n  reinitPlot() {\n    let { width, height, plotRef } = this.props;\n\n    this.state.plot?.destroy();\n\n    if (width === 0 && height === 0) {\n      return;\n    }\n\n    this.props.config.addHook('setSize', (u) => {\n      const canvas = u.over;\n      if (!canvas) {\n        return;\n      }\n    });\n\n    const config: Options = {\n      ...DEFAULT_PLOT_CONFIG,\n      width: this.props.width,\n      height: this.props.height,\n      ms: 1 as 1,\n      ...this.props.config.getConfig(),\n    };\n\n    pluginLog('UPlot', false, 'Reinitializing plot', config);\n    const plot = new uPlot(config, this.props.data as AlignedData, this.plotContainer!.current!);\n\n    if (plotRef) {\n      plotRef(plot);\n    }\n\n    this.setState({ plot });\n  }\n\n  componentDidMount() {\n    this.reinitPlot();\n  }\n\n  componentWillUnmount() {\n    this.state.plot?.destroy();\n  }\n\n  componentDidUpdate(prevProps: PlotProps) {\n    let { plot } = this.state;\n\n    if (!sameDims(prevProps, this.props)) {\n      plot?.setSize({\n        width: this.props.width,\n        height: this.props.height,\n      });\n    } else if (!sameConfig(prevProps, this.props)) {\n      this.reinitPlot();\n    } else if (!sameData(prevProps, this.props)) {\n      plot?.setData(this.props.data as AlignedData);\n\n      // this is a uPlot cache-busting hack for bar charts in case x axis labels changed\n      // since the x scale's \"range\" doesnt change, the axis size doesnt get recomputed, which is where the tick labels are regenerated & cached\n      // the more expensive, more proper/thorough way to do this is to force all axes to recalc: plot?.redraw(false, true);\n      if (plot && typeof this.props.data[0]?.[0] === 'string') {\n        //@ts-ignore\n        plot.axes[0]._values = this.props.data[0];\n      }\n    } else if (!sameTimeRange(prevProps, this.props)) {\n      plot?.setScale('x', {\n        min: this.props.timeRange.from.valueOf(),\n        max: this.props.timeRange.to.valueOf(),\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ position: 'relative' }}>\n        <div ref={this.plotContainer} data-testid=\"uplot-main-div\" />\n        {this.props.children}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}