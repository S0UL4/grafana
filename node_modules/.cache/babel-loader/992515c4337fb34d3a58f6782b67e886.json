{"ast":null,"code":"import { RouteParamsProvider } from '../core/navigation/patch/RouteParamsProvider';\nimport { RouteProvider } from '../core/navigation/patch/RouteProvider';\nimport { AngularLocationWrapper } from './AngularLocationWrapper';\nimport { coreModule } from './core_module'; // Neutralizing Angular’s location tampering\n// https://stackoverflow.com/a/19825756\n\nconst tamperAngularLocation = () => {\n  coreModule.config(['$provide', $provide => {\n    $provide.decorator('$browser', ['$delegate', $delegate => {\n      $delegate.onUrlChange = () => {};\n\n      $delegate.url = () => '';\n\n      return $delegate;\n    }]);\n  }]);\n}; // Intercepting $location service with implementation based on history\n\n\nconst interceptAngularLocation = () => {\n  coreModule.config(['$provide', $provide => {\n    $provide.decorator('$location', ['$delegate', $delegate => {\n      $delegate = new AngularLocationWrapper();\n      return $delegate;\n    }]);\n  }]);\n  coreModule.provider('$route', RouteProvider);\n  coreModule.provider('$routeParams', RouteParamsProvider);\n};\n\nexport function initAngularRoutingBridge() {\n  tamperAngularLocation();\n  interceptAngularLocation();\n}","map":{"version":3,"names":["RouteParamsProvider","RouteProvider","AngularLocationWrapper","coreModule","tamperAngularLocation","config","$provide","decorator","$delegate","onUrlChange","url","interceptAngularLocation","provider","initAngularRoutingBridge"],"sources":["/home/soula/grafana/public/app/angular/bridgeReactAngularRouting.ts"],"sourcesContent":["import { ILocationService } from 'angular';\n\nimport { RouteParamsProvider } from '../core/navigation/patch/RouteParamsProvider';\nimport { RouteProvider } from '../core/navigation/patch/RouteProvider';\n\nimport { AngularLocationWrapper } from './AngularLocationWrapper';\nimport { coreModule } from './core_module';\n\n// Neutralizing Angular’s location tampering\n// https://stackoverflow.com/a/19825756\nconst tamperAngularLocation = () => {\n  coreModule.config([\n    '$provide',\n    ($provide: any) => {\n      $provide.decorator('$browser', [\n        '$delegate',\n        ($delegate: any) => {\n          $delegate.onUrlChange = () => {};\n          $delegate.url = () => '';\n\n          return $delegate;\n        },\n      ]);\n    },\n  ]);\n};\n\n// Intercepting $location service with implementation based on history\nconst interceptAngularLocation = () => {\n  coreModule.config([\n    '$provide',\n    ($provide: any) => {\n      $provide.decorator('$location', [\n        '$delegate',\n        ($delegate: ILocationService) => {\n          $delegate = new AngularLocationWrapper() as unknown as ILocationService;\n          return $delegate;\n        },\n      ]);\n    },\n  ]);\n  coreModule.provider('$route', RouteProvider);\n  coreModule.provider('$routeParams', RouteParamsProvider);\n};\n\nexport function initAngularRoutingBridge() {\n  tamperAngularLocation();\n  interceptAngularLocation();\n}\n"],"mappings":"AAEA,SAASA,mBAAT,QAAoC,8CAApC;AACA,SAASC,aAAT,QAA8B,wCAA9B;AAEA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,UAAT,QAA2B,eAA3B,C,CAEA;AACA;;AACA,MAAMC,qBAAqB,GAAG,MAAM;EAClCD,UAAU,CAACE,MAAX,CAAkB,CAChB,UADgB,EAEfC,QAAD,IAAmB;IACjBA,QAAQ,CAACC,SAAT,CAAmB,UAAnB,EAA+B,CAC7B,WAD6B,EAE5BC,SAAD,IAAoB;MAClBA,SAAS,CAACC,WAAV,GAAwB,MAAM,CAAE,CAAhC;;MACAD,SAAS,CAACE,GAAV,GAAgB,MAAM,EAAtB;;MAEA,OAAOF,SAAP;IACD,CAP4B,CAA/B;EASD,CAZe,CAAlB;AAcD,CAfD,C,CAiBA;;;AACA,MAAMG,wBAAwB,GAAG,MAAM;EACrCR,UAAU,CAACE,MAAX,CAAkB,CAChB,UADgB,EAEfC,QAAD,IAAmB;IACjBA,QAAQ,CAACC,SAAT,CAAmB,WAAnB,EAAgC,CAC9B,WAD8B,EAE7BC,SAAD,IAAiC;MAC/BA,SAAS,GAAG,IAAIN,sBAAJ,EAAZ;MACA,OAAOM,SAAP;IACD,CAL6B,CAAhC;EAOD,CAVe,CAAlB;EAYAL,UAAU,CAACS,QAAX,CAAoB,QAApB,EAA8BX,aAA9B;EACAE,UAAU,CAACS,QAAX,CAAoB,cAApB,EAAoCZ,mBAApC;AACD,CAfD;;AAiBA,OAAO,SAASa,wBAAT,GAAoC;EACzCT,qBAAqB;EACrBO,wBAAwB;AACzB"},"metadata":{},"sourceType":"module"}