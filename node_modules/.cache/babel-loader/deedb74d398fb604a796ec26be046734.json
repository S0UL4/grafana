{"ast":null,"code":"var _p, _Container, _Legend, _Button;\n\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Field, Input, Button, Legend, Container, useStyles, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst paragraphStyles = theme => css`\n  color: ${theme.colors.formDescription};\n  font-size: ${theme.typography.size.sm};\n  font-weight: ${theme.typography.weight.regular};\n  margin-top: ${theme.spacing.sm};\n  display: block;\n`;\n\nexport const ForgottenPassword = () => {\n  var _HorizontalGroup, _p2;\n\n  const [emailSent, setEmailSent] = useState(false);\n  const styles = useStyles(paragraphStyles);\n  const loginHref = `${config.appSubUrl}/login`;\n\n  const sendEmail = async formModel => {\n    const res = await getBackendSrv().post('/api/user/password/send-reset-email', formModel);\n\n    if (res) {\n      setEmailSent(true);\n    }\n  };\n\n  if (emailSent) {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [_p || (_p = /*#__PURE__*/_jsx(\"p\", {\n        children: \"An email with a reset link has been sent to the email address. You should receive it shortly.\"\n      })), _Container || (_Container = /*#__PURE__*/_jsx(Container, {\n        margin: \"md\"\n      })), /*#__PURE__*/_jsx(LinkButton, {\n        variant: \"primary\",\n        href: loginHref,\n        children: \"Back to login\"\n      })]\n    });\n  }\n\n  return /*#__PURE__*/_jsx(Form, {\n    onSubmit: sendEmail,\n    children: ({\n      register,\n      errors\n    }) => {\n      var _errors$userOrEmail;\n\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [_Legend || (_Legend = /*#__PURE__*/_jsx(Legend, {\n          children: \"Reset password\"\n        })), /*#__PURE__*/_jsx(Field, {\n          label: \"User\",\n          description: \"Enter your information to get a reset link sent to you\",\n          invalid: !!errors.userOrEmail,\n          error: errors === null || errors === void 0 ? void 0 : (_errors$userOrEmail = errors.userOrEmail) === null || _errors$userOrEmail === void 0 ? void 0 : _errors$userOrEmail.message,\n          children: /*#__PURE__*/_jsx(Input, Object.assign({\n            id: \"user-input\",\n            placeholder: \"Email or username\"\n          }, register('userOrEmail', {\n            required: 'Email or username is required'\n          })))\n        }), _HorizontalGroup || (_HorizontalGroup = /*#__PURE__*/_jsxs(HorizontalGroup, {\n          children: [_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            children: \"Send reset email\"\n          })), /*#__PURE__*/_jsx(LinkButton, {\n            fill: \"text\",\n            href: loginHref,\n            children: \"Back to login\"\n          })]\n        })), _p2 || (_p2 = /*#__PURE__*/_jsx(\"p\", {\n          className: styles,\n          children: \"Did you forget your username or email? Contact your Grafana administrator.\"\n        }))]\n      });\n    }\n  });\n};","map":{"version":3,"names":["css","React","useState","getBackendSrv","Form","Field","Input","Button","Legend","Container","useStyles","HorizontalGroup","LinkButton","config","paragraphStyles","theme","colors","formDescription","typography","size","sm","weight","regular","spacing","ForgottenPassword","emailSent","setEmailSent","styles","loginHref","appSubUrl","sendEmail","formModel","res","post","register","errors","userOrEmail","message","required"],"sources":["/home/soula/grafana/public/app/core/components/ForgottenPassword/ForgottenPassword.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Field, Input, Button, Legend, Container, useStyles, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport config from 'app/core/config';\n\ninterface EmailDTO {\n  userOrEmail: string;\n}\n\nconst paragraphStyles = (theme: GrafanaTheme) => css`\n  color: ${theme.colors.formDescription};\n  font-size: ${theme.typography.size.sm};\n  font-weight: ${theme.typography.weight.regular};\n  margin-top: ${theme.spacing.sm};\n  display: block;\n`;\n\nexport const ForgottenPassword: FC = () => {\n  const [emailSent, setEmailSent] = useState(false);\n  const styles = useStyles(paragraphStyles);\n  const loginHref = `${config.appSubUrl}/login`;\n\n  const sendEmail = async (formModel: EmailDTO) => {\n    const res = await getBackendSrv().post('/api/user/password/send-reset-email', formModel);\n    if (res) {\n      setEmailSent(true);\n    }\n  };\n\n  if (emailSent) {\n    return (\n      <div>\n        <p>An email with a reset link has been sent to the email address. You should receive it shortly.</p>\n        <Container margin=\"md\" />\n        <LinkButton variant=\"primary\" href={loginHref}>\n          Back to login\n        </LinkButton>\n      </div>\n    );\n  }\n  return (\n    <Form onSubmit={sendEmail}>\n      {({ register, errors }) => (\n        <>\n          <Legend>Reset password</Legend>\n          <Field\n            label=\"User\"\n            description=\"Enter your information to get a reset link sent to you\"\n            invalid={!!errors.userOrEmail}\n            error={errors?.userOrEmail?.message}\n          >\n            <Input\n              id=\"user-input\"\n              placeholder=\"Email or username\"\n              {...register('userOrEmail', { required: 'Email or username is required' })}\n            />\n          </Field>\n          <HorizontalGroup>\n            <Button type=\"submit\">Send reset email</Button>\n            <LinkButton fill=\"text\" href={loginHref}>\n              Back to login\n            </LinkButton>\n          </HorizontalGroup>\n\n          <p className={styles}>Did you forget your username or email? Contact your Grafana administrator.</p>\n        </>\n      )}\n    </Form>\n  );\n};\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AAGA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCC,MAArC,EAA6CC,SAA7C,EAAwDC,SAAxD,EAAmEC,eAAnE,EAAoFC,UAApF,QAAsG,aAAtG;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;;;;AAMA,MAAMC,eAAe,GAAIC,KAAD,IAAyBf,GAAI;AACrD,WAAWe,KAAK,CAACC,MAAN,CAAaC,eAAgB;AACxC,eAAeF,KAAK,CAACG,UAAN,CAAiBC,IAAjB,CAAsBC,EAAG;AACxC,iBAAiBL,KAAK,CAACG,UAAN,CAAiBG,MAAjB,CAAwBC,OAAQ;AACjD,gBAAgBP,KAAK,CAACQ,OAAN,CAAcH,EAAG;AACjC;AACA,CANA;;AAQA,OAAO,MAAMI,iBAAqB,GAAG,MAAM;EAAA;;EACzC,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BxB,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAMyB,MAAM,GAAGjB,SAAS,CAACI,eAAD,CAAxB;EACA,MAAMc,SAAS,GAAI,GAAEf,MAAM,CAACgB,SAAU,QAAtC;;EAEA,MAAMC,SAAS,GAAG,MAAOC,SAAP,IAA+B;IAC/C,MAAMC,GAAG,GAAG,MAAM7B,aAAa,GAAG8B,IAAhB,CAAqB,qCAArB,EAA4DF,SAA5D,CAAlB;;IACA,IAAIC,GAAJ,EAAS;MACPN,YAAY,CAAC,IAAD,CAAZ;IACD;EACF,CALD;;EAOA,IAAID,SAAJ,EAAe;IACb,oBACE;MAAA,oCACE;QAAA;MAAA,EADF,4CAEE,KAAC,SAAD;QAAW,MAAM,EAAC;MAAlB,EAFF,gBAGE,KAAC,UAAD;QAAY,OAAO,EAAC,SAApB;QAA8B,IAAI,EAAEG,SAApC;QAAA;MAAA,EAHF;IAAA,EADF;EASD;;EACD,oBACE,KAAC,IAAD;IAAM,QAAQ,EAAEE,SAAhB;IAAA,UACG,CAAC;MAAEI,QAAF;MAAYC;IAAZ,CAAD;MAAA;;MAAA,oBACC;QAAA,8CACE,KAAC,MAAD;UAAA;QAAA,EADF,gBAEE,KAAC,KAAD;UACE,KAAK,EAAC,MADR;UAEE,WAAW,EAAC,wDAFd;UAGE,OAAO,EAAE,CAAC,CAACA,MAAM,CAACC,WAHpB;UAIE,KAAK,EAAED,MAAF,aAAEA,MAAF,8CAAEA,MAAM,CAAEC,WAAV,wDAAE,oBAAqBC,OAJ9B;UAAA,uBAME,KAAC,KAAD;YACE,EAAE,EAAC,YADL;YAEE,WAAW,EAAC;UAFd,GAGMH,QAAQ,CAAC,aAAD,EAAgB;YAAEI,QAAQ,EAAE;UAAZ,CAAhB,CAHd;QANF,EAFF,uDAcE,MAAC,eAAD;UAAA,8CACE,KAAC,MAAD;YAAQ,IAAI,EAAC,QAAb;YAAA;UAAA,EADF,gBAEE,KAAC,UAAD;YAAY,IAAI,EAAC,MAAjB;YAAwB,IAAI,EAAEV,SAA9B;YAAA;UAAA,EAFF;QAAA,EAdF,8BAqBE;UAAG,SAAS,EAAED,MAAd;UAAA;QAAA,EArBF;MAAA,EADD;IAAA;EADH,EADF;AA6BD,CApDM"},"metadata":{},"sourceType":"module"}