{"ast":null,"code":"var _HorizontalGroup, _HorizontalGroup2;\n\nimport { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { HorizontalGroup, Spinner, useStyles2 } from '@grafana/ui';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport { isAlertingRule, isRecordingRule, getFirstActiveAt } from '../../utils/rules';\nimport { AlertStateTag } from './AlertStateTag';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const RuleState = ({\n  rule,\n  isDeleting,\n  isCreating\n}) => {\n  const style = useStyles2(getStyle);\n  const {\n    promRule\n  } = rule; // return how long the rule has been in it's firing state, if any\n\n  const forTime = useMemo(() => {\n    var _promRule$alerts;\n\n    if (promRule && isAlertingRule(promRule) && (_promRule$alerts = promRule.alerts) !== null && _promRule$alerts !== void 0 && _promRule$alerts.length && promRule.state !== PromAlertingRuleState.Inactive) {\n      // find earliest alert\n      const firstActiveAt = getFirstActiveAt(promRule); // calculate time elapsed from earliest alert\n\n      if (firstActiveAt) {\n        return /*#__PURE__*/_jsxs(\"span\", {\n          title: String(firstActiveAt),\n          className: style.for,\n          children: [\"for\", ' ', intervalToAbbreviatedDurationString({\n            start: firstActiveAt,\n            end: new Date()\n          }, false)]\n        });\n      }\n    }\n\n    return null;\n  }, [promRule, style]);\n\n  if (isDeleting) {\n    return _HorizontalGroup || (_HorizontalGroup = /*#__PURE__*/_jsxs(HorizontalGroup, {\n      align: \"flex-start\",\n      children: [/*#__PURE__*/_jsx(Spinner, {}), \"deleting\"]\n    }));\n  } else if (isCreating) {\n    return _HorizontalGroup2 || (_HorizontalGroup2 = /*#__PURE__*/_jsxs(HorizontalGroup, {\n      align: \"flex-start\",\n      children: [' ', /*#__PURE__*/_jsx(Spinner, {}), \"creating\"]\n    }));\n  } else if (promRule && isAlertingRule(promRule)) {\n    return /*#__PURE__*/_jsxs(HorizontalGroup, {\n      align: \"flex-start\",\n      children: [/*#__PURE__*/_jsx(AlertStateTag, {\n        state: promRule.state\n      }), forTime]\n    });\n  } else if (promRule && isRecordingRule(promRule)) {\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: \"Recording rule\"\n    });\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: \"n/a\"\n  });\n};\n\nconst getStyle = theme => ({\n  for: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    padding-top: 2px;\n  `\n});","map":{"version":3,"names":["css","React","useMemo","intervalToAbbreviatedDurationString","HorizontalGroup","Spinner","useStyles2","PromAlertingRuleState","isAlertingRule","isRecordingRule","getFirstActiveAt","AlertStateTag","RuleState","rule","isDeleting","isCreating","style","getStyle","promRule","forTime","alerts","length","state","Inactive","firstActiveAt","String","for","start","end","Date","theme","typography","bodySmall","fontSize","colors","text","secondary"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rules/RuleState.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { HorizontalGroup, Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isAlertingRule, isRecordingRule, getFirstActiveAt } from '../../utils/rules';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface Props {\n  rule: CombinedRule;\n  isDeleting: boolean;\n  isCreating: boolean;\n}\n\nexport const RuleState: FC<Props> = ({ rule, isDeleting, isCreating }) => {\n  const style = useStyles2(getStyle);\n  const { promRule } = rule;\n\n  // return how long the rule has been in it's firing state, if any\n  const forTime = useMemo(() => {\n    if (\n      promRule &&\n      isAlertingRule(promRule) &&\n      promRule.alerts?.length &&\n      promRule.state !== PromAlertingRuleState.Inactive\n    ) {\n      // find earliest alert\n      const firstActiveAt = getFirstActiveAt(promRule);\n\n      // calculate time elapsed from earliest alert\n      if (firstActiveAt) {\n        return (\n          <span title={String(firstActiveAt)} className={style.for}>\n            for{' '}\n            {intervalToAbbreviatedDurationString(\n              {\n                start: firstActiveAt,\n                end: new Date(),\n              },\n              false\n            )}\n          </span>\n        );\n      }\n    }\n    return null;\n  }, [promRule, style]);\n\n  if (isDeleting) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (isCreating) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        {' '}\n        <Spinner />\n        creating\n      </HorizontalGroup>\n    );\n  } else if (promRule && isAlertingRule(promRule)) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        <AlertStateTag state={promRule.state} />\n        {forTime}\n      </HorizontalGroup>\n    );\n  } else if (promRule && isRecordingRule(promRule)) {\n    return <>Recording rule</>;\n  }\n  return <>n/a</>;\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  for: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    padding-top: 2px;\n  `,\n});\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AAEA,SAAwBC,mCAAxB,QAAmE,eAAnE;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,UAAnC,QAAqD,aAArD;AAEA,SAASC,qBAAT,QAAsC,gCAAtC;AAEA,SAASC,cAAT,EAAyBC,eAAzB,EAA0CC,gBAA1C,QAAkE,mBAAlE;AAEA,SAASC,aAAT,QAA8B,iBAA9B;;;;AAQA,OAAO,MAAMC,SAAoB,GAAG,CAAC;EAAEC,IAAF;EAAQC,UAAR;EAAoBC;AAApB,CAAD,KAAsC;EACxE,MAAMC,KAAK,GAAGV,UAAU,CAACW,QAAD,CAAxB;EACA,MAAM;IAAEC;EAAF,IAAeL,IAArB,CAFwE,CAIxE;;EACA,MAAMM,OAAO,GAAGjB,OAAO,CAAC,MAAM;IAAA;;IAC5B,IACEgB,QAAQ,IACRV,cAAc,CAACU,QAAD,CADd,wBAEAA,QAAQ,CAACE,MAFT,6CAEA,iBAAiBC,MAFjB,IAGAH,QAAQ,CAACI,KAAT,KAAmBf,qBAAqB,CAACgB,QAJ3C,EAKE;MACA;MACA,MAAMC,aAAa,GAAGd,gBAAgB,CAACQ,QAAD,CAAtC,CAFA,CAIA;;MACA,IAAIM,aAAJ,EAAmB;QACjB,oBACE;UAAM,KAAK,EAAEC,MAAM,CAACD,aAAD,CAAnB;UAAoC,SAAS,EAAER,KAAK,CAACU,GAArD;UAAA,kBACM,GADN,EAEGvB,mCAAmC,CAClC;YACEwB,KAAK,EAAEH,aADT;YAEEI,GAAG,EAAE,IAAIC,IAAJ;UAFP,CADkC,EAKlC,KALkC,CAFtC;QAAA,EADF;MAYD;IACF;;IACD,OAAO,IAAP;EACD,CA3BsB,EA2BpB,CAACX,QAAD,EAAWF,KAAX,CA3BoB,CAAvB;;EA6BA,IAAIF,UAAJ,EAAgB;IACd,4DACE,MAAC,eAAD;MAAiB,KAAK,EAAC,YAAvB;MAAA,wBACE,KAAC,OAAD,KADF;IAAA,EADF;EAMD,CAPD,MAOO,IAAIC,UAAJ,EAAgB;IACrB,8DACE,MAAC,eAAD;MAAiB,KAAK,EAAC,YAAvB;MAAA,WACG,GADH,eAEE,KAAC,OAAD,KAFF;IAAA,EADF;EAOD,CARM,MAQA,IAAIG,QAAQ,IAAIV,cAAc,CAACU,QAAD,CAA9B,EAA0C;IAC/C,oBACE,MAAC,eAAD;MAAiB,KAAK,EAAC,YAAvB;MAAA,wBACE,KAAC,aAAD;QAAe,KAAK,EAAEA,QAAQ,CAACI;MAA/B,EADF,EAEGH,OAFH;IAAA,EADF;EAMD,CAPM,MAOA,IAAID,QAAQ,IAAIT,eAAe,CAACS,QAAD,CAA/B,EAA2C;IAChD,oBAAO;MAAA;IAAA,EAAP;EACD;;EACD,oBAAO;IAAA;EAAA,EAAP;AACD,CA5DM;;AA8DP,MAAMD,QAAQ,GAAIa,KAAD,KAA2B;EAC1CJ,GAAG,EAAE1B,GAAI;AACX,iBAAiB8B,KAAK,CAACC,UAAN,CAAiBC,SAAjB,CAA2BC,QAAS;AACrD,aAAaH,KAAK,CAACI,MAAN,CAAaC,IAAb,CAAkBC,SAAU;AACzC;AACA;AACA;AAN4C,CAA3B,CAAjB"},"metadata":{},"sourceType":"module"}