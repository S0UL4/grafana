{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { DataTransformerID, PluginState, FieldType } from '@grafana/data';\nimport { InlineField, InlineFieldRow } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { GazetteerPathEditor } from 'app/features/geo/editor/GazetteerPathEditor';\nimport { fieldLookupTransformer } from './fieldLookup';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst fieldNamePickerSettings = {\n  settings: {\n    width: 30,\n    filter: f => f.type === FieldType.string,\n    placeholderText: 'Select text field',\n    noFieldsMessage: 'No text fields found'\n  },\n  name: '',\n  id: '',\n  editor: () => null\n};\nconst fieldLookupSettings = {\n  settings: {}\n};\nexport const FieldLookupTransformerEditor = ({\n  input,\n  options,\n  onChange\n}) => {\n  var _options$lookupField, _options$gazetteer;\n\n  const onPickLookupField = useCallback(value => {\n    onChange(Object.assign({}, options, {\n      lookupField: value\n    }));\n  }, [onChange, options]);\n  const onPickGazetteer = useCallback(value => {\n    onChange(Object.assign({}, options, {\n      gazetteer: value\n    }));\n  }, [onChange, options]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: 'Field',\n        labelWidth: 12,\n        children: /*#__PURE__*/_jsx(FieldNamePicker, {\n          context: {\n            data: input\n          },\n          value: (_options$lookupField = options === null || options === void 0 ? void 0 : options.lookupField) !== null && _options$lookupField !== void 0 ? _options$lookupField : '',\n          onChange: onPickLookupField,\n          item: fieldNamePickerSettings\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: 'Lookup',\n        labelWidth: 12,\n        children: /*#__PURE__*/_jsx(GazetteerPathEditor, {\n          value: (_options$gazetteer = options === null || options === void 0 ? void 0 : options.gazetteer) !== null && _options$gazetteer !== void 0 ? _options$gazetteer : '',\n          context: {\n            data: input\n          },\n          item: fieldLookupSettings,\n          onChange: onPickGazetteer\n        })\n      })\n    })]\n  });\n};\nexport const fieldLookupTransformRegistryItem = {\n  id: DataTransformerID.fieldLookup,\n  editor: FieldLookupTransformerEditor,\n  transformation: fieldLookupTransformer,\n  name: 'Field lookup',\n  description: `Use a field value to lookup additional fields from an external source.  This currently supports spatial data, but will eventually support more formats`,\n  state: PluginState.alpha\n};","map":{"version":3,"names":["React","useCallback","DataTransformerID","PluginState","FieldType","InlineField","InlineFieldRow","FieldNamePicker","GazetteerPathEditor","fieldLookupTransformer","fieldNamePickerSettings","settings","width","filter","f","type","string","placeholderText","noFieldsMessage","name","id","editor","fieldLookupSettings","FieldLookupTransformerEditor","input","options","onChange","onPickLookupField","value","lookupField","onPickGazetteer","gazetteer","data","fieldLookupTransformRegistryItem","fieldLookup","transformation","description","state","alpha"],"sources":["/home/soula/grafana/public/app/features/transformers/lookupGazetteer/FieldLookupTransformerEditor.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\n\nimport {\n  DataTransformerID,\n  FieldNamePickerConfigSettings,\n  PluginState,\n  StandardEditorsRegistryItem,\n  TransformerRegistryItem,\n  TransformerUIProps,\n  FieldType,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { GazetteerPathEditor, GazetteerPathEditorConfigSettings } from 'app/features/geo/editor/GazetteerPathEditor';\n\nimport { FieldLookupOptions, fieldLookupTransformer } from './fieldLookup';\n\nconst fieldNamePickerSettings: StandardEditorsRegistryItem<string, FieldNamePickerConfigSettings> = {\n  settings: {\n    width: 30,\n    filter: (f) => f.type === FieldType.string,\n    placeholderText: 'Select text field',\n    noFieldsMessage: 'No text fields found',\n  },\n  name: '',\n  id: '',\n  editor: () => null,\n};\n\nconst fieldLookupSettings: StandardEditorsRegistryItem<string, GazetteerPathEditorConfigSettings> = {\n  settings: {},\n} as any;\n\nexport const FieldLookupTransformerEditor: React.FC<TransformerUIProps<FieldLookupOptions>> = ({\n  input,\n  options,\n  onChange,\n}) => {\n  const onPickLookupField = useCallback(\n    (value: string | undefined) => {\n      onChange({\n        ...options,\n        lookupField: value,\n      });\n    },\n    [onChange, options]\n  );\n\n  const onPickGazetteer = useCallback(\n    (value: string | undefined) => {\n      onChange({\n        ...options,\n        gazetteer: value,\n      });\n    },\n    [onChange, options]\n  );\n  return (\n    <div>\n      <InlineFieldRow>\n        <InlineField label={'Field'} labelWidth={12}>\n          <FieldNamePicker\n            context={{ data: input }}\n            value={options?.lookupField ?? ''}\n            onChange={onPickLookupField}\n            item={fieldNamePickerSettings as any}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label={'Lookup'} labelWidth={12}>\n          <GazetteerPathEditor\n            value={options?.gazetteer ?? ''}\n            context={{ data: input }}\n            item={fieldLookupSettings}\n            onChange={onPickGazetteer}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n};\n\nexport const fieldLookupTransformRegistryItem: TransformerRegistryItem<FieldLookupOptions> = {\n  id: DataTransformerID.fieldLookup,\n  editor: FieldLookupTransformerEditor,\n  transformation: fieldLookupTransformer,\n  name: 'Field lookup',\n  description: `Use a field value to lookup additional fields from an external source.  This currently supports spatial data, but will eventually support more formats`,\n  state: PluginState.alpha,\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AAEA,SACEC,iBADF,EAGEC,WAHF,EAOEC,SAPF,QAQO,eARP;AASA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,aAA5C;AACA,SAASC,eAAT,QAAgC,uDAAhC;AACA,SAASC,mBAAT,QAAuE,6CAAvE;AAEA,SAA6BC,sBAA7B,QAA2D,eAA3D;;;AAEA,MAAMC,uBAA2F,GAAG;EAClGC,QAAQ,EAAE;IACRC,KAAK,EAAE,EADC;IAERC,MAAM,EAAGC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWX,SAAS,CAACY,MAF5B;IAGRC,eAAe,EAAE,mBAHT;IAIRC,eAAe,EAAE;EAJT,CADwF;EAOlGC,IAAI,EAAE,EAP4F;EAQlGC,EAAE,EAAE,EAR8F;EASlGC,MAAM,EAAE,MAAM;AAToF,CAApG;AAYA,MAAMC,mBAA2F,GAAG;EAClGX,QAAQ,EAAE;AADwF,CAApG;AAIA,OAAO,MAAMY,4BAA8E,GAAG,CAAC;EAC7FC,KAD6F;EAE7FC,OAF6F;EAG7FC;AAH6F,CAAD,KAIxF;EAAA;;EACJ,MAAMC,iBAAiB,GAAG1B,WAAW,CAClC2B,KAAD,IAA+B;IAC7BF,QAAQ,mBACHD,OADG;MAENI,WAAW,EAAED;IAFP,GAAR;EAID,CANkC,EAOnC,CAACF,QAAD,EAAWD,OAAX,CAPmC,CAArC;EAUA,MAAMK,eAAe,GAAG7B,WAAW,CAChC2B,KAAD,IAA+B;IAC7BF,QAAQ,mBACHD,OADG;MAENM,SAAS,EAAEH;IAFL,GAAR;EAID,CANgC,EAOjC,CAACF,QAAD,EAAWD,OAAX,CAPiC,CAAnC;EASA,oBACE;IAAA,wBACE,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAE,OAApB;QAA6B,UAAU,EAAE,EAAzC;QAAA,uBACE,KAAC,eAAD;UACE,OAAO,EAAE;YAAEO,IAAI,EAAER;UAAR,CADX;UAEE,KAAK,0BAAEC,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEI,WAAX,uEAA0B,EAFjC;UAGE,QAAQ,EAAEF,iBAHZ;UAIE,IAAI,EAAEjB;QAJR;MADF;IADF,EADF,eAWE,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAE,QAApB;QAA8B,UAAU,EAAE,EAA1C;QAAA,uBACE,KAAC,mBAAD;UACE,KAAK,wBAAEe,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEM,SAAX,mEAAwB,EAD/B;UAEE,OAAO,EAAE;YAAEC,IAAI,EAAER;UAAR,CAFX;UAGE,IAAI,EAAEF,mBAHR;UAIE,QAAQ,EAAEQ;QAJZ;MADF;IADF,EAXF;EAAA,EADF;AAwBD,CAhDM;AAkDP,OAAO,MAAMG,gCAA6E,GAAG;EAC3Fb,EAAE,EAAElB,iBAAiB,CAACgC,WADqE;EAE3Fb,MAAM,EAAEE,4BAFmF;EAG3FY,cAAc,EAAE1B,sBAH2E;EAI3FU,IAAI,EAAE,cAJqF;EAK3FiB,WAAW,EAAG,wJAL6E;EAM3FC,KAAK,EAAElC,WAAW,CAACmC;AANwE,CAAtF"},"metadata":{},"sourceType":"module"}