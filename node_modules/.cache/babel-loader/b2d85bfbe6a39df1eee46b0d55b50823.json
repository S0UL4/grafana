{"ast":null,"code":"var _Spinner, _Button, _Button2;\n\nimport { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { Button, HorizontalGroup, stylesFactory, useTheme, Spinner } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { BasicSettings } from './BasicSettings';\nimport { ChannelSettings } from './ChannelSettings';\nimport { NotificationSettings } from './NotificationSettings';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const NotificationChannelForm = ({\n  control,\n  errors,\n  selectedChannel,\n  selectableChannels,\n  register,\n  watch,\n  getValues,\n  imageRendererAvailable,\n  onTestChannel,\n  resetSecureField,\n  secureFields\n}) => {\n  const styles = getStyles(useTheme());\n  useEffect(() => {\n    /*\n      Find fields that have dependencies on other fields and removes duplicates.\n      Needs to be prefixed with settings.\n    */\n    const fieldsToWatch = new Set(selectedChannel === null || selectedChannel === void 0 ? void 0 : selectedChannel.options.filter(o => o.showWhen.field).map(option => {\n      return `settings.${option.showWhen.field}`;\n    })) || [];\n    watch(['type', 'sendReminder', 'uploadImage', ...fieldsToWatch]);\n  }, [selectedChannel === null || selectedChannel === void 0 ? void 0 : selectedChannel.options, watch]);\n  const currentFormValues = getValues();\n\n  if (!selectedChannel) {\n    return _Spinner || (_Spinner = /*#__PURE__*/_jsx(Spinner, {}));\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.formContainer,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.formItem,\n      children: /*#__PURE__*/_jsx(BasicSettings, {\n        selectedChannel: selectedChannel,\n        channels: selectableChannels,\n        secureFields: secureFields,\n        resetSecureField: resetSecureField,\n        currentFormValues: currentFormValues,\n        register: register,\n        errors: errors,\n        control: control\n      })\n    }), selectedChannel.options.filter(o => !o.required).length > 0 && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.formItem,\n      children: /*#__PURE__*/_jsx(ChannelSettings, {\n        selectedChannel: selectedChannel,\n        secureFields: secureFields,\n        resetSecureField: resetSecureField,\n        currentFormValues: currentFormValues,\n        register: register,\n        errors: errors,\n        control: control\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.formItem,\n      children: /*#__PURE__*/_jsx(NotificationSettings, {\n        imageRendererAvailable: imageRendererAvailable,\n        currentFormValues: currentFormValues,\n        register: register,\n        errors: errors,\n        control: control\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.formButtons,\n      children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n        children: [_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n          type: \"submit\",\n          children: \"Save\"\n        })), /*#__PURE__*/_jsx(Button, {\n          type: \"button\",\n          variant: \"secondary\",\n          onClick: () => onTestChannel(getValues()),\n          children: \"Test\"\n        }), /*#__PURE__*/_jsx(\"a\", {\n          href: `${config.appSubUrl}/alerting/notifications`,\n          children: _Button2 || (_Button2 = /*#__PURE__*/_jsx(Button, {\n            type: \"button\",\n            variant: \"secondary\",\n            children: \"Back\"\n          }))\n        })]\n      })\n    })]\n  });\n};\nconst getStyles = stylesFactory(theme => {\n  return {\n    formContainer: css``,\n    formItem: css`\n      flex-grow: 1;\n      padding-top: ${theme.spacing.md};\n    `,\n    formButtons: css`\n      padding-top: ${theme.spacing.xl};\n    `\n  };\n});","map":{"version":3,"names":["css","React","useEffect","Button","HorizontalGroup","stylesFactory","useTheme","Spinner","config","BasicSettings","ChannelSettings","NotificationSettings","NotificationChannelForm","control","errors","selectedChannel","selectableChannels","register","watch","getValues","imageRendererAvailable","onTestChannel","resetSecureField","secureFields","styles","getStyles","fieldsToWatch","Set","options","filter","o","showWhen","field","map","option","currentFormValues","formContainer","formItem","required","length","formButtons","appSubUrl","theme","spacing","md","xl"],"sources":["/home/soula/grafana/public/app/features/alerting/components/NotificationChannelForm.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useEffect } from 'react';\n\nimport { GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { Button, FormAPI, HorizontalGroup, stylesFactory, useTheme, Spinner } from '@grafana/ui';\nimport config from 'app/core/config';\n\nimport { NotificationChannelType, NotificationChannelDTO, NotificationChannelSecureFields } from '../../../types';\n\nimport { BasicSettings } from './BasicSettings';\nimport { ChannelSettings } from './ChannelSettings';\nimport { NotificationSettings } from './NotificationSettings';\n\ninterface Props\n  extends Pick<FormAPI<NotificationChannelDTO>, 'control' | 'errors' | 'register' | 'watch' | 'getValues'> {\n  selectableChannels: Array<SelectableValue<string>>;\n  selectedChannel?: NotificationChannelType;\n  imageRendererAvailable: boolean;\n  secureFields: NotificationChannelSecureFields;\n  resetSecureField: (key: string) => void;\n  onTestChannel: (data: NotificationChannelDTO) => void;\n}\n\nexport interface NotificationSettingsProps\n  extends Pick<FormAPI<NotificationChannelDTO>, 'control' | 'errors' | 'register'> {\n  currentFormValues: NotificationChannelDTO;\n}\n\nexport const NotificationChannelForm: FC<Props> = ({\n  control,\n  errors,\n  selectedChannel,\n  selectableChannels,\n  register,\n  watch,\n  getValues,\n  imageRendererAvailable,\n  onTestChannel,\n  resetSecureField,\n  secureFields,\n}) => {\n  const styles = getStyles(useTheme());\n\n  useEffect(() => {\n    /*\n      Find fields that have dependencies on other fields and removes duplicates.\n      Needs to be prefixed with settings.\n    */\n    const fieldsToWatch =\n      new Set(\n        selectedChannel?.options\n          .filter((o) => o.showWhen.field)\n          .map((option) => {\n            return `settings.${option.showWhen.field}`;\n          })\n      ) || [];\n    watch(['type', 'sendReminder', 'uploadImage', ...fieldsToWatch]);\n  }, [selectedChannel?.options, watch]);\n\n  const currentFormValues = getValues();\n\n  if (!selectedChannel) {\n    return <Spinner />;\n  }\n\n  return (\n    <div className={styles.formContainer}>\n      <div className={styles.formItem}>\n        <BasicSettings\n          selectedChannel={selectedChannel}\n          channels={selectableChannels}\n          secureFields={secureFields}\n          resetSecureField={resetSecureField}\n          currentFormValues={currentFormValues}\n          register={register}\n          errors={errors}\n          control={control}\n        />\n      </div>\n      {/* If there are no non-required fields, don't render this section*/}\n      {selectedChannel.options.filter((o) => !o.required).length > 0 && (\n        <div className={styles.formItem}>\n          <ChannelSettings\n            selectedChannel={selectedChannel}\n            secureFields={secureFields}\n            resetSecureField={resetSecureField}\n            currentFormValues={currentFormValues}\n            register={register}\n            errors={errors}\n            control={control}\n          />\n        </div>\n      )}\n      <div className={styles.formItem}>\n        <NotificationSettings\n          imageRendererAvailable={imageRendererAvailable}\n          currentFormValues={currentFormValues}\n          register={register}\n          errors={errors}\n          control={control}\n        />\n      </div>\n      <div className={styles.formButtons}>\n        <HorizontalGroup>\n          <Button type=\"submit\">Save</Button>\n          <Button type=\"button\" variant=\"secondary\" onClick={() => onTestChannel(getValues())}>\n            Test\n          </Button>\n          <a href={`${config.appSubUrl}/alerting/notifications`}>\n            <Button type=\"button\" variant=\"secondary\">\n              Back\n            </Button>\n          </a>\n        </HorizontalGroup>\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    formContainer: css``,\n    formItem: css`\n      flex-grow: 1;\n      padding-top: ${theme.spacing.md};\n    `,\n    formButtons: css`\n      padding-top: ${theme.spacing.xl};\n    `,\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}