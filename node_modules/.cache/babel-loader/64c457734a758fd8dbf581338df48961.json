{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport $ from 'jquery';\nimport React, { PureComponent } from 'react';\nimport { formattedValueToString, ThresholdsMode, GAUGE_DEFAULT_MAXIMUM, GAUGE_DEFAULT_MINIMUM } from '@grafana/data';\nimport { calculateFontSize } from '../../utils/measureText';\nimport { calculateGaugeAutoProps, DEFAULT_THRESHOLDS, getFormattedThresholds } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class Gauge extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"canvasElement\", void 0);\n\n    _defineProperty(this, \"renderVisualization\", () => {\n      var _text$titleSize;\n\n      const {\n        width,\n        value,\n        height,\n        onClick,\n        text\n      } = this.props;\n      const autoProps = calculateGaugeAutoProps(width, height, value.title);\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            height: `${autoProps.gaugeHeight}px`,\n            width: '100%'\n          },\n          ref: element => this.canvasElement = element,\n          onClick: onClick\n        }), autoProps.showLabel && /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            textAlign: 'center',\n            fontSize: (_text$titleSize = text === null || text === void 0 ? void 0 : text.titleSize) !== null && _text$titleSize !== void 0 ? _text$titleSize : autoProps.titleFontSize,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            position: 'relative',\n            width: '100%',\n            top: '-4px',\n            cursor: 'default'\n          },\n          children: value.title\n        })]\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    var _this$props$text$valu, _this$props$text, _field$min, _field$max, _field$thresholds;\n\n    const {\n      field,\n      showThresholdLabels,\n      showThresholdMarkers,\n      width,\n      height,\n      theme,\n      value\n    } = this.props;\n    const autoProps = calculateGaugeAutoProps(width, height, value.title);\n    const dimension = Math.min(width, autoProps.gaugeHeight);\n    const backgroundColor = theme.colors.bg2;\n    const gaugeWidthReduceRatio = showThresholdLabels ? 1.5 : 1;\n    const gaugeWidth = Math.min(dimension / 5.5, 40) / gaugeWidthReduceRatio;\n    const thresholdMarkersWidth = gaugeWidth / 5;\n    const text = formattedValueToString(value); // This not 100% accurate as I am unsure of flot's calculations here\n\n    const valueWidthBase = Math.min(width, dimension * 1.3) * 0.9; // remove gauge & marker width (on left and right side)\n    // and 10px is some padding that flot adds to the outer canvas\n\n    const valueWidth = valueWidthBase - ((gaugeWidth + (showThresholdMarkers ? thresholdMarkersWidth : 0) + (showThresholdLabels ? 10 : 0)) * 2 + 10);\n    const fontSize = (_this$props$text$valu = (_this$props$text = this.props.text) === null || _this$props$text === void 0 ? void 0 : _this$props$text.valueSize) !== null && _this$props$text$valu !== void 0 ? _this$props$text$valu : calculateFontSize(text, valueWidth, dimension, 1, gaugeWidth * 1.7);\n    const thresholdLabelFontSize = Math.max(fontSize / 2.5, 12);\n    let min = (_field$min = field.min) !== null && _field$min !== void 0 ? _field$min : GAUGE_DEFAULT_MINIMUM;\n    let max = (_field$max = field.max) !== null && _field$max !== void 0 ? _field$max : GAUGE_DEFAULT_MAXIMUM;\n    let numeric = value.numeric;\n\n    if (((_field$thresholds = field.thresholds) === null || _field$thresholds === void 0 ? void 0 : _field$thresholds.mode) === ThresholdsMode.Percentage) {\n      min = 0;\n      max = 100;\n\n      if (value.percent === undefined) {\n        numeric = (numeric - min) / (max - min) * 100;\n      } else {\n        numeric = value.percent * 100;\n      }\n    }\n\n    const decimals = field.decimals === undefined ? 2 : field.decimals;\n\n    if (showThresholdMarkers) {\n      min = +min.toFixed(decimals);\n      max = +max.toFixed(decimals);\n    }\n\n    const options = {\n      series: {\n        gauges: {\n          gauge: {\n            min,\n            max,\n            background: {\n              color: backgroundColor\n            },\n            border: {\n              color: null\n            },\n            shadow: {\n              show: false\n            },\n            width: gaugeWidth\n          },\n          frame: {\n            show: false\n          },\n          label: {\n            show: false\n          },\n          layout: {\n            margin: 0,\n            thresholdWidth: 0,\n            vMargin: 0\n          },\n          cell: {\n            border: {\n              width: 0\n            }\n          },\n          threshold: {\n            values: getFormattedThresholds(decimals, field, value, theme),\n            label: {\n              show: showThresholdLabels,\n              margin: thresholdMarkersWidth + 1,\n              font: {\n                size: thresholdLabelFontSize\n              }\n            },\n            show: showThresholdMarkers,\n            width: thresholdMarkersWidth\n          },\n          value: {\n            color: value.color,\n            formatter: () => {\n              return text;\n            },\n            font: {\n              size: fontSize,\n              family: theme.typography.fontFamily.sansSerif\n            }\n          },\n          show: true\n        }\n      }\n    };\n    const plotSeries = {\n      data: [[0, numeric]],\n      label: value.title\n    };\n\n    try {\n      $.plot(this.canvasElement, [plotSeries], options);\n    } catch (err) {\n      console.error('Gauge rendering error', err, options, value);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        overflow: 'hidden'\n      },\n      className: this.props.className,\n      children: this.renderVisualization()\n    });\n  }\n\n}\n\n_defineProperty(Gauge, \"defaultProps\", {\n  showThresholdMarkers: true,\n  showThresholdLabels: false,\n  field: {\n    min: 0,\n    max: 100,\n    thresholds: DEFAULT_THRESHOLDS\n  }\n});","map":{"version":3,"names":["$","React","PureComponent","formattedValueToString","ThresholdsMode","GAUGE_DEFAULT_MAXIMUM","GAUGE_DEFAULT_MINIMUM","calculateFontSize","calculateGaugeAutoProps","DEFAULT_THRESHOLDS","getFormattedThresholds","Gauge","width","value","height","onClick","text","props","autoProps","title","gaugeHeight","element","canvasElement","showLabel","textAlign","fontSize","titleSize","titleFontSize","overflow","textOverflow","whiteSpace","position","top","cursor","componentDidMount","draw","componentDidUpdate","field","showThresholdLabels","showThresholdMarkers","theme","dimension","Math","min","backgroundColor","colors","bg2","gaugeWidthReduceRatio","gaugeWidth","thresholdMarkersWidth","valueWidthBase","valueWidth","valueSize","thresholdLabelFontSize","max","numeric","thresholds","mode","Percentage","percent","undefined","decimals","toFixed","options","series","gauges","gauge","background","color","border","shadow","show","frame","label","layout","margin","thresholdWidth","vMargin","cell","threshold","values","font","size","formatter","family","typography","fontFamily","sansSerif","plotSeries","data","plot","err","console","error","render","display","flexDirection","justifyContent","className","renderVisualization"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Gauge/Gauge.tsx"],"sourcesContent":["import $ from 'jquery';\nimport React, { PureComponent } from 'react';\n\nimport {\n  DisplayValue,\n  formattedValueToString,\n  FieldConfig,\n  ThresholdsMode,\n  GAUGE_DEFAULT_MAXIMUM,\n  GAUGE_DEFAULT_MINIMUM,\n} from '@grafana/data';\nimport { VizTextDisplayOptions } from '@grafana/schema';\n\nimport { Themeable } from '../../types';\nimport { calculateFontSize } from '../../utils/measureText';\n\nimport { calculateGaugeAutoProps, DEFAULT_THRESHOLDS, getFormattedThresholds } from './utils';\n\nexport interface Props extends Themeable {\n  height: number;\n  field: FieldConfig;\n  showThresholdMarkers: boolean;\n  showThresholdLabels: boolean;\n  width: number;\n  value: DisplayValue;\n  text?: VizTextDisplayOptions;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n  className?: string;\n}\n\nexport class Gauge extends PureComponent<Props> {\n  canvasElement: any;\n\n  static defaultProps: Partial<Props> = {\n    showThresholdMarkers: true,\n    showThresholdLabels: false,\n    field: {\n      min: 0,\n      max: 100,\n      thresholds: DEFAULT_THRESHOLDS,\n    },\n  };\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    const { field, showThresholdLabels, showThresholdMarkers, width, height, theme, value } = this.props;\n\n    const autoProps = calculateGaugeAutoProps(width, height, value.title);\n    const dimension = Math.min(width, autoProps.gaugeHeight);\n    const backgroundColor = theme.colors.bg2;\n    const gaugeWidthReduceRatio = showThresholdLabels ? 1.5 : 1;\n    const gaugeWidth = Math.min(dimension / 5.5, 40) / gaugeWidthReduceRatio;\n    const thresholdMarkersWidth = gaugeWidth / 5;\n    const text = formattedValueToString(value);\n    // This not 100% accurate as I am unsure of flot's calculations here\n    const valueWidthBase = Math.min(width, dimension * 1.3) * 0.9;\n    // remove gauge & marker width (on left and right side)\n    // and 10px is some padding that flot adds to the outer canvas\n    const valueWidth =\n      valueWidthBase -\n      ((gaugeWidth + (showThresholdMarkers ? thresholdMarkersWidth : 0) + (showThresholdLabels ? 10 : 0)) * 2 + 10);\n    const fontSize = this.props.text?.valueSize ?? calculateFontSize(text, valueWidth, dimension, 1, gaugeWidth * 1.7);\n    const thresholdLabelFontSize = Math.max(fontSize / 2.5, 12);\n\n    let min = field.min ?? GAUGE_DEFAULT_MINIMUM;\n    let max = field.max ?? GAUGE_DEFAULT_MAXIMUM;\n    let numeric = value.numeric;\n\n    if (field.thresholds?.mode === ThresholdsMode.Percentage) {\n      min = 0;\n      max = 100;\n      if (value.percent === undefined) {\n        numeric = ((numeric - min) / (max - min)) * 100;\n      } else {\n        numeric = value.percent! * 100;\n      }\n    }\n\n    const decimals = field.decimals === undefined ? 2 : field.decimals!;\n\n    if (showThresholdMarkers) {\n      min = +min.toFixed(decimals);\n      max = +max.toFixed(decimals);\n    }\n\n    const options: any = {\n      series: {\n        gauges: {\n          gauge: {\n            min,\n            max,\n            background: { color: backgroundColor },\n            border: { color: null },\n            shadow: { show: false },\n            width: gaugeWidth,\n          },\n          frame: { show: false },\n          label: { show: false },\n          layout: { margin: 0, thresholdWidth: 0, vMargin: 0 },\n          cell: { border: { width: 0 } },\n          threshold: {\n            values: getFormattedThresholds(decimals, field, value, theme),\n            label: {\n              show: showThresholdLabels,\n              margin: thresholdMarkersWidth + 1,\n              font: { size: thresholdLabelFontSize },\n            },\n            show: showThresholdMarkers,\n            width: thresholdMarkersWidth,\n          },\n          value: {\n            color: value.color,\n            formatter: () => {\n              return text;\n            },\n            font: { size: fontSize, family: theme.typography.fontFamily.sansSerif },\n          },\n          show: true,\n        },\n      },\n    };\n\n    const plotSeries = {\n      data: [[0, numeric]],\n      label: value.title,\n    };\n\n    try {\n      $.plot(this.canvasElement, [plotSeries], options);\n    } catch (err) {\n      console.error('Gauge rendering error', err, options, value);\n    }\n  }\n\n  renderVisualization = () => {\n    const { width, value, height, onClick, text } = this.props;\n    const autoProps = calculateGaugeAutoProps(width, height, value.title);\n\n    return (\n      <>\n        <div\n          style={{ height: `${autoProps.gaugeHeight}px`, width: '100%' }}\n          ref={(element) => (this.canvasElement = element)}\n          onClick={onClick}\n        />\n        {autoProps.showLabel && (\n          <div\n            style={{\n              textAlign: 'center',\n              fontSize: text?.titleSize ?? autoProps.titleFontSize,\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n              position: 'relative',\n              width: '100%',\n              top: '-4px',\n              cursor: 'default',\n            }}\n          >\n            {value.title}\n          </div>\n        )}\n      </>\n    );\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          overflow: 'hidden',\n        }}\n        className={this.props.className}\n      >\n        {this.renderVisualization()}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}