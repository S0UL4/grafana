{"ast":null,"code":"import { FieldColorModeId } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\nexport class StatusHistorySuggestionsSupplier {\n  getSuggestionsForData(builder) {\n    const {\n      dataSummary: ds\n    } = builder;\n\n    if (!ds.hasData) {\n      return;\n    } // This panel needs a time field and a string or number field\n\n\n    if (!ds.hasTimeField || !ds.hasStringField && !ds.hasNumberField) {\n      return;\n    } // If there are many series then they won't fit on y-axis so this panel is not good fit\n\n\n    if (ds.numberFieldCount >= 30) {\n      return;\n    } // if there a lot of data points for each series then this is not a good match\n\n\n    if (ds.rowCountMax > 100) {\n      return;\n    } // Probably better ways to filter out this by inspecting the types of string values so view this as temporary\n\n\n    if (ds.preferredVisualisationType === 'logs') {\n      return;\n    }\n\n    const list = builder.getListAppender({\n      name: '',\n      pluginId: 'status-history',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          color: {\n            mode: FieldColorModeId.ContinuousGrYlRd\n          },\n          custom: {}\n        },\n        overrides: []\n      },\n      cardOptions: {\n        previewModifier: s => {\n          s.options.colWidth = 0.7;\n        }\n      }\n    });\n    list.append({\n      name: SuggestionName.StatusHistory\n    });\n  }\n\n}","map":{"version":3,"names":["FieldColorModeId","SuggestionName","StatusHistorySuggestionsSupplier","getSuggestionsForData","builder","dataSummary","ds","hasData","hasTimeField","hasStringField","hasNumberField","numberFieldCount","rowCountMax","preferredVisualisationType","list","getListAppender","name","pluginId","options","fieldConfig","defaults","color","mode","ContinuousGrYlRd","custom","overrides","cardOptions","previewModifier","s","colWidth","append","StatusHistory"],"sources":["/home/soula/grafana/public/app/plugins/panel/status-history/suggestions.ts"],"sourcesContent":["import { FieldColorModeId, VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { StatusPanelOptions, StatusFieldConfig } from './types';\n\nexport class StatusHistorySuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary: ds } = builder;\n\n    if (!ds.hasData) {\n      return;\n    }\n\n    // This panel needs a time field and a string or number field\n    if (!ds.hasTimeField || (!ds.hasStringField && !ds.hasNumberField)) {\n      return;\n    }\n\n    // If there are many series then they won't fit on y-axis so this panel is not good fit\n    if (ds.numberFieldCount >= 30) {\n      return;\n    }\n\n    // if there a lot of data points for each series then this is not a good match\n    if (ds.rowCountMax > 100) {\n      return;\n    }\n\n    // Probably better ways to filter out this by inspecting the types of string values so view this as temporary\n    if (ds.preferredVisualisationType === 'logs') {\n      return;\n    }\n\n    const list = builder.getListAppender<StatusPanelOptions, StatusFieldConfig>({\n      name: '',\n      pluginId: 'status-history',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          color: {\n            mode: FieldColorModeId.ContinuousGrYlRd,\n          },\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          s.options!.colWidth = 0.7;\n        },\n      },\n    });\n\n    list.append({ name: SuggestionName.StatusHistory });\n  }\n}\n"],"mappings":"AAAA,SAASA,gBAAT,QAAkE,eAAlE;AACA,SAASC,cAAT,QAA+B,uBAA/B;AAIA,OAAO,MAAMC,gCAAN,CAAuC;EAC5CC,qBAAqB,CAACC,OAAD,EAA2C;IAC9D,MAAM;MAAEC,WAAW,EAAEC;IAAf,IAAsBF,OAA5B;;IAEA,IAAI,CAACE,EAAE,CAACC,OAAR,EAAiB;MACf;IACD,CAL6D,CAO9D;;;IACA,IAAI,CAACD,EAAE,CAACE,YAAJ,IAAqB,CAACF,EAAE,CAACG,cAAJ,IAAsB,CAACH,EAAE,CAACI,cAAnD,EAAoE;MAClE;IACD,CAV6D,CAY9D;;;IACA,IAAIJ,EAAE,CAACK,gBAAH,IAAuB,EAA3B,EAA+B;MAC7B;IACD,CAf6D,CAiB9D;;;IACA,IAAIL,EAAE,CAACM,WAAH,GAAiB,GAArB,EAA0B;MACxB;IACD,CApB6D,CAsB9D;;;IACA,IAAIN,EAAE,CAACO,0BAAH,KAAkC,MAAtC,EAA8C;MAC5C;IACD;;IAED,MAAMC,IAAI,GAAGV,OAAO,CAACW,eAAR,CAA+D;MAC1EC,IAAI,EAAE,EADoE;MAE1EC,QAAQ,EAAE,gBAFgE;MAG1EC,OAAO,EAAE,EAHiE;MAI1EC,WAAW,EAAE;QACXC,QAAQ,EAAE;UACRC,KAAK,EAAE;YACLC,IAAI,EAAEtB,gBAAgB,CAACuB;UADlB,CADC;UAIRC,MAAM,EAAE;QAJA,CADC;QAOXC,SAAS,EAAE;MAPA,CAJ6D;MAa1EC,WAAW,EAAE;QACXC,eAAe,EAAGC,CAAD,IAAO;UACtBA,CAAC,CAACV,OAAF,CAAWW,QAAX,GAAsB,GAAtB;QACD;MAHU;IAb6D,CAA/D,CAAb;IAoBAf,IAAI,CAACgB,MAAL,CAAY;MAAEd,IAAI,EAAEf,cAAc,CAAC8B;IAAvB,CAAZ;EACD;;AAjD2C"},"metadata":{},"sourceType":"module"}