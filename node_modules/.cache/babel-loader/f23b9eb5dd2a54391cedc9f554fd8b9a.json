{"ast":null,"code":"import { useMemo } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { supportsDataQuery } from '../PanelEditor/utils';\n\n/**\n * Given PanelData return first data source supporting metadata inspector\n */\nexport const useDatasourceMetadata = data => {\n  const state = useAsync(async () => {\n    var _data$request;\n\n    const targets = (data === null || data === void 0 ? void 0 : (_data$request = data.request) === null || _data$request === void 0 ? void 0 : _data$request.targets) || [];\n\n    if (data && data.series && targets.length) {\n      for (const frame of data.series) {\n        if (frame.meta && frame.meta.custom) {\n          var _dataSource$component;\n\n          // get data source from first query\n          const dataSource = await getDataSourceSrv().get(targets[0].datasource);\n\n          if (dataSource && (_dataSource$component = dataSource.components) !== null && _dataSource$component !== void 0 && _dataSource$component.MetadataInspector) {\n            return dataSource;\n          }\n        }\n      }\n    }\n\n    return undefined;\n  }, [data]);\n  return state.value;\n};\n/**\n * Configures tabs for PanelInspector\n */\n\nexport const useInspectTabs = (panel, dashboard, plugin, error, metaDs) => {\n  return useMemo(() => {\n    const tabs = [];\n\n    if (supportsDataQuery(plugin)) {\n      tabs.push({\n        label: 'Data',\n        value: InspectTab.Data\n      });\n      tabs.push({\n        label: 'Stats',\n        value: InspectTab.Stats\n      });\n    }\n\n    if (metaDs) {\n      tabs.push({\n        label: 'Meta Data',\n        value: InspectTab.Meta\n      });\n    }\n\n    tabs.push({\n      label: 'JSON',\n      value: InspectTab.JSON\n    });\n\n    if (error && error.message) {\n      tabs.push({\n        label: 'Error',\n        value: InspectTab.Error\n      });\n    } // This is a quick internal hack to allow custom actions in inspect\n    // For 8.1, something like this should be exposed through grafana/runtime\n\n\n    const supplier = window.grafanaPanelInspectActionSupplier;\n\n    if (supplier && supplier.getActions(panel)) {\n      tabs.push({\n        label: 'Actions',\n        value: InspectTab.Actions\n      });\n    }\n\n    if (dashboard.meta.canEdit && supportsDataQuery(plugin)) {\n      tabs.push({\n        label: 'Query',\n        value: InspectTab.Query\n      });\n    }\n\n    return tabs;\n  }, [panel, plugin, metaDs, dashboard, error]);\n};","map":{"version":3,"names":["useMemo","useAsync","getDataSourceSrv","InspectTab","supportsDataQuery","useDatasourceMetadata","data","state","targets","request","series","length","frame","meta","custom","dataSource","get","datasource","components","MetadataInspector","undefined","value","useInspectTabs","panel","dashboard","plugin","error","metaDs","tabs","push","label","Data","Stats","Meta","JSON","message","Error","supplier","window","grafanaPanelInspectActionSupplier","getActions","Actions","canEdit","Query"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/Inspector/hooks.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { DataQueryError, DataSourceApi, PanelData, PanelPlugin } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { supportsDataQuery } from '../PanelEditor/utils';\n\nimport { PanelInspectActionSupplier } from './PanelInspectActions';\n\n/**\n * Given PanelData return first data source supporting metadata inspector\n */\nexport const useDatasourceMetadata = (data?: PanelData) => {\n  const state = useAsync(async () => {\n    const targets = data?.request?.targets || [];\n\n    if (data && data.series && targets.length) {\n      for (const frame of data.series) {\n        if (frame.meta && frame.meta.custom) {\n          // get data source from first query\n          const dataSource = await getDataSourceSrv().get(targets[0].datasource);\n          if (dataSource && dataSource.components?.MetadataInspector) {\n            return dataSource;\n          }\n        }\n      }\n    }\n\n    return undefined;\n  }, [data]);\n  return state.value;\n};\n\n/**\n * Configures tabs for PanelInspector\n */\nexport const useInspectTabs = (\n  panel: PanelModel,\n  dashboard: DashboardModel,\n  plugin: PanelPlugin | undefined | null,\n  error?: DataQueryError,\n  metaDs?: DataSourceApi\n) => {\n  return useMemo(() => {\n    const tabs = [];\n    if (supportsDataQuery(plugin)) {\n      tabs.push({ label: 'Data', value: InspectTab.Data });\n      tabs.push({ label: 'Stats', value: InspectTab.Stats });\n    }\n\n    if (metaDs) {\n      tabs.push({ label: 'Meta Data', value: InspectTab.Meta });\n    }\n\n    tabs.push({ label: 'JSON', value: InspectTab.JSON });\n\n    if (error && error.message) {\n      tabs.push({ label: 'Error', value: InspectTab.Error });\n    }\n\n    // This is a quick internal hack to allow custom actions in inspect\n    // For 8.1, something like this should be exposed through grafana/runtime\n    const supplier = (window as any).grafanaPanelInspectActionSupplier as PanelInspectActionSupplier;\n    if (supplier && supplier.getActions(panel)) {\n      tabs.push({ label: 'Actions', value: InspectTab.Actions });\n    }\n\n    if (dashboard.meta.canEdit && supportsDataQuery(plugin)) {\n      tabs.push({ label: 'Query', value: InspectTab.Query });\n    }\n    return tabs;\n  }, [panel, plugin, metaDs, dashboard, error]);\n};\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAGA,SAASC,gBAAT,QAAiC,kBAAjC;AAEA,SAASC,UAAT,QAA2B,8BAA3B;AAEA,SAASC,iBAAT,QAAkC,sBAAlC;;AAIA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAIC,IAAD,IAAsB;EACzD,MAAMC,KAAK,GAAGN,QAAQ,CAAC,YAAY;IAAA;;IACjC,MAAMO,OAAO,GAAG,CAAAF,IAAI,SAAJ,IAAAA,IAAI,WAAJ,6BAAAA,IAAI,CAAEG,OAAN,gEAAeD,OAAf,KAA0B,EAA1C;;IAEA,IAAIF,IAAI,IAAIA,IAAI,CAACI,MAAb,IAAuBF,OAAO,CAACG,MAAnC,EAA2C;MACzC,KAAK,MAAMC,KAAX,IAAoBN,IAAI,CAACI,MAAzB,EAAiC;QAC/B,IAAIE,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWC,MAA7B,EAAqC;UAAA;;UACnC;UACA,MAAMC,UAAU,GAAG,MAAMb,gBAAgB,GAAGc,GAAnB,CAAuBR,OAAO,CAAC,CAAD,CAAP,CAAWS,UAAlC,CAAzB;;UACA,IAAIF,UAAU,6BAAIA,UAAU,CAACG,UAAf,kDAAI,sBAAuBC,iBAAzC,EAA4D;YAC1D,OAAOJ,UAAP;UACD;QACF;MACF;IACF;;IAED,OAAOK,SAAP;EACD,CAhBqB,EAgBnB,CAACd,IAAD,CAhBmB,CAAtB;EAiBA,OAAOC,KAAK,CAACc,KAAb;AACD,CAnBM;AAqBP;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAC5BC,KAD4B,EAE5BC,SAF4B,EAG5BC,MAH4B,EAI5BC,KAJ4B,EAK5BC,MAL4B,KAMzB;EACH,OAAO3B,OAAO,CAAC,MAAM;IACnB,MAAM4B,IAAI,GAAG,EAAb;;IACA,IAAIxB,iBAAiB,CAACqB,MAAD,CAArB,EAA+B;MAC7BG,IAAI,CAACC,IAAL,CAAU;QAAEC,KAAK,EAAE,MAAT;QAAiBT,KAAK,EAAElB,UAAU,CAAC4B;MAAnC,CAAV;MACAH,IAAI,CAACC,IAAL,CAAU;QAAEC,KAAK,EAAE,OAAT;QAAkBT,KAAK,EAAElB,UAAU,CAAC6B;MAApC,CAAV;IACD;;IAED,IAAIL,MAAJ,EAAY;MACVC,IAAI,CAACC,IAAL,CAAU;QAAEC,KAAK,EAAE,WAAT;QAAsBT,KAAK,EAAElB,UAAU,CAAC8B;MAAxC,CAAV;IACD;;IAEDL,IAAI,CAACC,IAAL,CAAU;MAAEC,KAAK,EAAE,MAAT;MAAiBT,KAAK,EAAElB,UAAU,CAAC+B;IAAnC,CAAV;;IAEA,IAAIR,KAAK,IAAIA,KAAK,CAACS,OAAnB,EAA4B;MAC1BP,IAAI,CAACC,IAAL,CAAU;QAAEC,KAAK,EAAE,OAAT;QAAkBT,KAAK,EAAElB,UAAU,CAACiC;MAApC,CAAV;IACD,CAfkB,CAiBnB;IACA;;;IACA,MAAMC,QAAQ,GAAIC,MAAD,CAAgBC,iCAAjC;;IACA,IAAIF,QAAQ,IAAIA,QAAQ,CAACG,UAAT,CAAoBjB,KAApB,CAAhB,EAA4C;MAC1CK,IAAI,CAACC,IAAL,CAAU;QAAEC,KAAK,EAAE,SAAT;QAAoBT,KAAK,EAAElB,UAAU,CAACsC;MAAtC,CAAV;IACD;;IAED,IAAIjB,SAAS,CAACX,IAAV,CAAe6B,OAAf,IAA0BtC,iBAAiB,CAACqB,MAAD,CAA/C,EAAyD;MACvDG,IAAI,CAACC,IAAL,CAAU;QAAEC,KAAK,EAAE,OAAT;QAAkBT,KAAK,EAAElB,UAAU,CAACwC;MAApC,CAAV;IACD;;IACD,OAAOf,IAAP;EACD,CA5Ba,EA4BX,CAACL,KAAD,EAAQE,MAAR,EAAgBE,MAAhB,EAAwBH,SAAxB,EAAmCE,KAAnC,CA5BW,CAAd;AA6BD,CApCM"},"metadata":{},"sourceType":"module"}