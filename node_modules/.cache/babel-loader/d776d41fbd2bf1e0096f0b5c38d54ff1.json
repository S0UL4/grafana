{"ast":null,"code":"var _Icon;\n\nimport { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { components } from 'react-select';\nimport { escapeStringForRegex } from '@grafana/data';\nimport { Icon, MultiSelect, useStyles2 } from '@grafana/ui';\nimport { TagBadge } from './TagBadge';\nimport { TagOption } from './TagOption';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst filterOption = (option, searchQuery) => {\n  const regex = RegExp(escapeStringForRegex(searchQuery), 'i');\n  return regex.test(option.value);\n};\n\nexport const TagFilter = ({\n  allowCustomValue = false,\n  formatCreateLabel,\n  hideValues,\n  inputId,\n  isClearable,\n  onChange,\n  placeholder = 'Filter by tag',\n  tagOptions,\n  tags,\n  width\n}) => {\n  const styles = useStyles2(getStyles);\n  const currentlySelectedTags = tags.map(tag => ({\n    value: tag,\n    label: tag,\n    count: 0\n  }));\n  const [options, setOptions] = useState(currentlySelectedTags);\n  const [isLoading, setIsLoading] = useState(false);\n  const [previousTags, setPreviousTags] = useState(tags); // Necessary to force re-render to keep tag options up to date / relevant\n\n  const selectKey = useMemo(() => tags.join(), [tags]);\n  const onLoadOptions = useCallback(async () => {\n    const options = await tagOptions();\n    return options.map(option => {\n      if (tags.includes(option.term)) {\n        return {\n          value: option.term,\n          label: option.term,\n          count: 0\n        };\n      } else {\n        return {\n          value: option.term,\n          label: option.term,\n          count: option.count\n        };\n      }\n    });\n  }, [tagOptions, tags]);\n  const onFocus = useCallback(async () => {\n    setIsLoading(true);\n    const results = await onLoadOptions();\n    setOptions(results);\n    setIsLoading(false);\n  }, [onLoadOptions]);\n  useEffect(() => {\n    // Load options when tag is selected externally\n    if (tags.length > 0 && options.length === 0) {\n      onFocus();\n    }\n  }, [onFocus, options.length, tags.length]);\n  useEffect(() => {\n    // Update selected tags to not include (counts) when selected externally\n    if (tags !== previousTags) {\n      setPreviousTags(tags);\n      onFocus();\n    }\n  }, [onFocus, previousTags, tags]);\n\n  const onTagChange = newTags => {\n    // On remove with 1 item returns null, so we need to make sure it's an empty array in that case\n    // https://github.com/JedWatson/react-select/issues/3632\n    newTags.forEach(tag => tag.count = 0);\n    onChange((newTags || []).map(tag => tag.value));\n  };\n\n  const selectOptions = {\n    key: selectKey,\n    onFocus,\n    isLoading,\n    options,\n    allowCreateWhileLoading: true,\n    allowCustomValue,\n    formatCreateLabel,\n    defaultOptions: true,\n    filterOption,\n    getOptionLabel: i => i.label,\n    getOptionValue: i => i.value,\n    inputId,\n    isMulti: true,\n    loadingMessage: 'Loading...',\n    noOptionsMessage: 'No tags found',\n    onChange: onTagChange,\n    placeholder,\n    value: currentlySelectedTags,\n    width,\n    components: {\n      Option: TagOption,\n      MultiValueLabel: () => {\n        return null; // We want the whole tag to be clickable so we use MultiValueRemove instead\n      },\n\n      MultiValueRemove(props) {\n        const {\n          data\n        } = props;\n        return /*#__PURE__*/_jsx(components.MultiValueRemove, Object.assign({}, props, {\n          children: /*#__PURE__*/_jsx(TagBadge, {\n            label: data.label,\n            removeIcon: true,\n            count: data.count\n          }, data.label)\n        }));\n      },\n\n      MultiValueContainer: hideValues ? () => null : components.MultiValueContainer\n    }\n  };\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.tagFilter,\n    children: [isClearable && tags.length > 0 && /*#__PURE__*/_jsx(\"span\", {\n      className: styles.clear,\n      onClick: () => onTagChange([]),\n      children: \"Clear tags\"\n    }), /*#__PURE__*/_jsx(MultiSelect, Object.assign({}, selectOptions, {\n      prefix: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n        name: \"tag-alt\"\n      })),\n      \"aria-label\": \"Tag filter\"\n    }))]\n  });\n};\nTagFilter.displayName = 'TagFilter';\n\nconst getStyles = theme => ({\n  tagFilter: css`\n    position: relative;\n    min-width: 180px;\n    flex-grow: 1;\n\n    .label-tag {\n      margin-left: 6px;\n      cursor: pointer;\n    }\n  `,\n  clear: css`\n    text-decoration: underline;\n    font-size: 12px;\n    position: absolute;\n    top: -22px;\n    right: 0;\n    cursor: pointer;\n    color: ${theme.colors.text.secondary};\n\n    &:hover {\n      color: ${theme.colors.text.primary};\n    }\n  `\n});","map":{"version":3,"names":["css","React","useCallback","useEffect","useMemo","useState","components","escapeStringForRegex","Icon","MultiSelect","useStyles2","TagBadge","TagOption","filterOption","option","searchQuery","regex","RegExp","test","value","TagFilter","allowCustomValue","formatCreateLabel","hideValues","inputId","isClearable","onChange","placeholder","tagOptions","tags","width","styles","getStyles","currentlySelectedTags","map","tag","label","count","options","setOptions","isLoading","setIsLoading","previousTags","setPreviousTags","selectKey","join","onLoadOptions","includes","term","onFocus","results","length","onTagChange","newTags","forEach","selectOptions","key","allowCreateWhileLoading","defaultOptions","getOptionLabel","i","getOptionValue","isMulti","loadingMessage","noOptionsMessage","Option","MultiValueLabel","MultiValueRemove","props","data","MultiValueContainer","tagFilter","clear","displayName","theme","colors","text","secondary","primary"],"sources":["/home/soula/grafana/public/app/core/components/TagFilter/TagFilter.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { components } from 'react-select';\n\nimport { escapeStringForRegex, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, MultiSelect, useStyles2 } from '@grafana/ui';\n\nimport { TagBadge } from './TagBadge';\nimport { TagOption } from './TagOption';\n\nexport interface TermCount {\n  term: string;\n  count: number;\n}\n\ninterface TagSelectOption {\n  value: string;\n  label: string;\n  count: number;\n}\n\nexport interface Props {\n  allowCustomValue?: boolean;\n  formatCreateLabel?: (input: string) => string;\n  /** Do not show selected values inside Select. Useful when the values need to be shown in some other components */\n  hideValues?: boolean;\n  inputId?: string;\n  isClearable?: boolean;\n  onChange: (tags: string[]) => void;\n  placeholder?: string;\n  tagOptions: () => Promise<TermCount[]>;\n  tags: string[];\n  width?: number;\n}\n\nconst filterOption = (option: any, searchQuery: string) => {\n  const regex = RegExp(escapeStringForRegex(searchQuery), 'i');\n  return regex.test(option.value);\n};\n\nexport const TagFilter: FC<Props> = ({\n  allowCustomValue = false,\n  formatCreateLabel,\n  hideValues,\n  inputId,\n  isClearable,\n  onChange,\n  placeholder = 'Filter by tag',\n  tagOptions,\n  tags,\n  width,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const currentlySelectedTags = tags.map((tag) => ({ value: tag, label: tag, count: 0 }));\n  const [options, setOptions] = useState<TagSelectOption[]>(currentlySelectedTags);\n  const [isLoading, setIsLoading] = useState(false);\n  const [previousTags, setPreviousTags] = useState(tags);\n\n  // Necessary to force re-render to keep tag options up to date / relevant\n  const selectKey = useMemo(() => tags.join(), [tags]);\n\n  const onLoadOptions = useCallback(async () => {\n    const options = await tagOptions();\n    return options.map((option) => {\n      if (tags.includes(option.term)) {\n        return {\n          value: option.term,\n          label: option.term,\n          count: 0,\n        };\n      } else {\n        return {\n          value: option.term,\n          label: option.term,\n          count: option.count,\n        };\n      }\n    });\n  }, [tagOptions, tags]);\n\n  const onFocus = useCallback(async () => {\n    setIsLoading(true);\n    const results = await onLoadOptions();\n    setOptions(results);\n    setIsLoading(false);\n  }, [onLoadOptions]);\n\n  useEffect(() => {\n    // Load options when tag is selected externally\n    if (tags.length > 0 && options.length === 0) {\n      onFocus();\n    }\n  }, [onFocus, options.length, tags.length]);\n\n  useEffect(() => {\n    // Update selected tags to not include (counts) when selected externally\n    if (tags !== previousTags) {\n      setPreviousTags(tags);\n      onFocus();\n    }\n  }, [onFocus, previousTags, tags]);\n\n  const onTagChange = (newTags: any[]) => {\n    // On remove with 1 item returns null, so we need to make sure it's an empty array in that case\n    // https://github.com/JedWatson/react-select/issues/3632\n    newTags.forEach((tag) => (tag.count = 0));\n\n    onChange((newTags || []).map((tag) => tag.value));\n  };\n\n  const selectOptions = {\n    key: selectKey,\n    onFocus,\n    isLoading,\n    options,\n    allowCreateWhileLoading: true,\n    allowCustomValue,\n    formatCreateLabel,\n    defaultOptions: true,\n    filterOption,\n    getOptionLabel: (i: any) => i.label,\n    getOptionValue: (i: any) => i.value,\n    inputId,\n    isMulti: true,\n    loadingMessage: 'Loading...',\n    noOptionsMessage: 'No tags found',\n    onChange: onTagChange,\n    placeholder,\n    value: currentlySelectedTags,\n    width,\n    components: {\n      Option: TagOption,\n      MultiValueLabel: (): any => {\n        return null; // We want the whole tag to be clickable so we use MultiValueRemove instead\n      },\n      MultiValueRemove(props: any) {\n        const { data } = props;\n\n        return (\n          <components.MultiValueRemove {...props}>\n            <TagBadge key={data.label} label={data.label} removeIcon={true} count={data.count} />\n          </components.MultiValueRemove>\n        );\n      },\n      MultiValueContainer: hideValues ? (): any => null : components.MultiValueContainer,\n    },\n  };\n\n  return (\n    <div className={styles.tagFilter}>\n      {isClearable && tags.length > 0 && (\n        <span className={styles.clear} onClick={() => onTagChange([])}>\n          Clear tags\n        </span>\n      )}\n      <MultiSelect {...selectOptions} prefix={<Icon name=\"tag-alt\" />} aria-label=\"Tag filter\" />\n    </div>\n  );\n};\n\nTagFilter.displayName = 'TagFilter';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tagFilter: css`\n    position: relative;\n    min-width: 180px;\n    flex-grow: 1;\n\n    .label-tag {\n      margin-left: 6px;\n      cursor: pointer;\n    }\n  `,\n  clear: css`\n    text-decoration: underline;\n    font-size: 12px;\n    position: absolute;\n    top: -22px;\n    right: 0;\n    cursor: pointer;\n    color: ${theme.colors.text.secondary};\n\n    &:hover {\n      color: ${theme.colors.text.primary};\n    }\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}