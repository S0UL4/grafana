{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { ConfirmButton, Input, Label, LegacyInputStatus, useStyles2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const ServiceAccountProfileRow = ({\n  label,\n  value,\n  inputType,\n  disabled,\n  onChange\n}) => {\n  const inputElem = useRef(null);\n  const [inputValue, setInputValue] = useState(value);\n  const [isEditing, setIsEditing] = useState(false);\n  const styles = useStyles2(getStyles);\n  const inputId = `${label}-input`;\n  useEffect(() => {\n    if (isEditing) {\n      focusInput();\n    }\n  }, [isEditing]);\n\n  const onEditClick = () => {\n    setIsEditing(true);\n  };\n\n  const onCancelClick = () => {\n    setIsEditing(false);\n    setInputValue(value || '');\n  };\n\n  const onInputChange = (event, status) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n\n    setInputValue(event.target.value);\n  };\n\n  const onInputBlur = (event, status) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n\n    setInputValue(event.target.value);\n  };\n\n  const focusInput = () => {\n    var _inputElem$current;\n\n    inputElem === null || inputElem === void 0 ? void 0 : (_inputElem$current = inputElem.current) === null || _inputElem$current === void 0 ? void 0 : _inputElem$current.focus();\n  };\n\n  const onSave = () => {\n    setIsEditing(false);\n\n    if (onChange) {\n      onChange(inputValue);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"tr\", {\n    children: [/*#__PURE__*/_jsx(\"td\", {\n      children: /*#__PURE__*/_jsx(Label, {\n        htmlFor: inputId,\n        children: label\n      })\n    }), /*#__PURE__*/_jsx(\"td\", {\n      className: \"width-25\",\n      colSpan: 2,\n      children: !disabled && isEditing ? /*#__PURE__*/_jsx(Input, {\n        id: inputId,\n        type: inputType,\n        defaultValue: value,\n        onBlur: onInputBlur,\n        onChange: onInputChange,\n        ref: inputElem,\n        width: 30\n      }) : /*#__PURE__*/_jsx(\"span\", {\n        className: cx({\n          [styles.disabled]: disabled\n        }),\n        children: value\n      })\n    }), /*#__PURE__*/_jsx(\"td\", {\n      children: onChange && /*#__PURE__*/_jsx(ConfirmButton, {\n        closeOnConfirm: true,\n        confirmText: \"Save\",\n        onConfirm: onSave,\n        onClick: onEditClick,\n        onCancel: onCancelClick,\n        disabled: disabled,\n        children: \"Edit\"\n      })\n    })]\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    disabled: css`\n      color: ${theme.colors.text.secondary};\n    `\n  };\n};","map":{"version":3,"names":["css","cx","React","useEffect","useRef","useState","ConfirmButton","Input","Label","LegacyInputStatus","useStyles2","ServiceAccountProfileRow","label","value","inputType","disabled","onChange","inputElem","inputValue","setInputValue","isEditing","setIsEditing","styles","getStyles","inputId","focusInput","onEditClick","onCancelClick","onInputChange","event","status","Invalid","target","onInputBlur","current","focus","onSave","theme","colors","text","secondary"],"sources":["/home/soula/grafana/public/app/features/serviceaccounts/components/ServiceAccountProfileRow.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ConfirmButton, Input, Label, LegacyInputStatus, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  label: string;\n  value?: string;\n  inputType?: string;\n  disabled?: boolean;\n  onChange?: (value: string) => void;\n}\n\nexport const ServiceAccountProfileRow = ({ label, value, inputType, disabled, onChange }: Props): JSX.Element => {\n  const inputElem = useRef<HTMLInputElement>(null);\n  const [inputValue, setInputValue] = useState(value);\n  const [isEditing, setIsEditing] = useState(false);\n  const styles = useStyles2(getStyles);\n  const inputId = `${label}-input`;\n\n  useEffect(() => {\n    if (isEditing) {\n      focusInput();\n    }\n  }, [isEditing]);\n\n  const onEditClick = () => {\n    setIsEditing(true);\n  };\n\n  const onCancelClick = () => {\n    setIsEditing(false);\n    setInputValue(value || '');\n  };\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>, status?: LegacyInputStatus) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n    setInputValue(event.target.value);\n  };\n\n  const onInputBlur = (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n    setInputValue(event.target.value);\n  };\n\n  const focusInput = () => {\n    inputElem?.current?.focus();\n  };\n\n  const onSave = () => {\n    setIsEditing(false);\n    if (onChange) {\n      onChange(inputValue!);\n    }\n  };\n\n  return (\n    <tr>\n      <td>\n        <Label htmlFor={inputId}>{label}</Label>\n      </td>\n      <td className=\"width-25\" colSpan={2}>\n        {!disabled && isEditing ? (\n          <Input\n            id={inputId}\n            type={inputType}\n            defaultValue={value}\n            onBlur={onInputBlur}\n            onChange={onInputChange}\n            ref={inputElem}\n            width={30}\n          />\n        ) : (\n          <span className={cx({ [styles.disabled]: disabled })}>{value}</span>\n        )}\n      </td>\n      <td>\n        {onChange && (\n          <ConfirmButton\n            closeOnConfirm\n            confirmText=\"Save\"\n            onConfirm={onSave}\n            onClick={onEditClick}\n            onCancel={onCancelClick}\n            disabled={disabled}\n          >\n            Edit\n          </ConfirmButton>\n        )}\n      </td>\n    </tr>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    disabled: css`\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AAGA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,iBAAtC,EAAyDC,UAAzD,QAA2E,aAA3E;;;AAUA,OAAO,MAAMC,wBAAwB,GAAG,CAAC;EAAEC,KAAF;EAASC,KAAT;EAAgBC,SAAhB;EAA2BC,QAA3B;EAAqCC;AAArC,CAAD,KAAyE;EAC/G,MAAMC,SAAS,GAAGb,MAAM,CAAmB,IAAnB,CAAxB;EACA,MAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAACQ,KAAD,CAA5C;EACA,MAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAMiB,MAAM,GAAGZ,UAAU,CAACa,SAAD,CAAzB;EACA,MAAMC,OAAO,GAAI,GAAEZ,KAAM,QAAzB;EAEAT,SAAS,CAAC,MAAM;IACd,IAAIiB,SAAJ,EAAe;MACbK,UAAU;IACX;EACF,CAJQ,EAIN,CAACL,SAAD,CAJM,CAAT;;EAMA,MAAMM,WAAW,GAAG,MAAM;IACxBL,YAAY,CAAC,IAAD,CAAZ;EACD,CAFD;;EAIA,MAAMM,aAAa,GAAG,MAAM;IAC1BN,YAAY,CAAC,KAAD,CAAZ;IACAF,aAAa,CAACN,KAAK,IAAI,EAAV,CAAb;EACD,CAHD;;EAKA,MAAMe,aAAa,GAAG,CAACC,KAAD,EAA6CC,MAA7C,KAA4E;IAChG,IAAIA,MAAM,KAAKrB,iBAAiB,CAACsB,OAAjC,EAA0C;MACxC;IACD;;IACDZ,aAAa,CAACU,KAAK,CAACG,MAAN,CAAanB,KAAd,CAAb;EACD,CALD;;EAOA,MAAMoB,WAAW,GAAG,CAACJ,KAAD,EAA4CC,MAA5C,KAA2E;IAC7F,IAAIA,MAAM,KAAKrB,iBAAiB,CAACsB,OAAjC,EAA0C;MACxC;IACD;;IACDZ,aAAa,CAACU,KAAK,CAACG,MAAN,CAAanB,KAAd,CAAb;EACD,CALD;;EAOA,MAAMY,UAAU,GAAG,MAAM;IAAA;;IACvBR,SAAS,SAAT,IAAAA,SAAS,WAAT,kCAAAA,SAAS,CAAEiB,OAAX,0EAAoBC,KAApB;EACD,CAFD;;EAIA,MAAMC,MAAM,GAAG,MAAM;IACnBf,YAAY,CAAC,KAAD,CAAZ;;IACA,IAAIL,QAAJ,EAAc;MACZA,QAAQ,CAACE,UAAD,CAAR;IACD;EACF,CALD;;EAOA,oBACE;IAAA,wBACE;MAAA,uBACE,KAAC,KAAD;QAAO,OAAO,EAAEM,OAAhB;QAAA,UAA0BZ;MAA1B;IADF,EADF,eAIE;MAAI,SAAS,EAAC,UAAd;MAAyB,OAAO,EAAE,CAAlC;MAAA,UACG,CAACG,QAAD,IAAaK,SAAb,gBACC,KAAC,KAAD;QACE,EAAE,EAAEI,OADN;QAEE,IAAI,EAAEV,SAFR;QAGE,YAAY,EAAED,KAHhB;QAIE,MAAM,EAAEoB,WAJV;QAKE,QAAQ,EAAEL,aALZ;QAME,GAAG,EAAEX,SANP;QAOE,KAAK,EAAE;MAPT,EADD,gBAWC;QAAM,SAAS,EAAEhB,EAAE,CAAC;UAAE,CAACqB,MAAM,CAACP,QAAR,GAAmBA;QAArB,CAAD,CAAnB;QAAA,UAAuDF;MAAvD;IAZJ,EAJF,eAmBE;MAAA,UACGG,QAAQ,iBACP,KAAC,aAAD;QACE,cAAc,MADhB;QAEE,WAAW,EAAC,MAFd;QAGE,SAAS,EAAEoB,MAHb;QAIE,OAAO,EAAEV,WAJX;QAKE,QAAQ,EAAEC,aALZ;QAME,QAAQ,EAAEZ,QANZ;QAAA;MAAA;IAFJ,EAnBF;EAAA,EADF;AAoCD,CAnFM;;AAqFP,MAAMQ,SAAS,GAAIc,KAAD,IAA0B;EAC1C,OAAO;IACLtB,QAAQ,EAAEf,GAAI;AAClB,eAAeqC,KAAK,CAACC,MAAN,CAAaC,IAAb,CAAkBC,SAAU;AAC3C;EAHS,CAAP;AAKD,CAND"},"metadata":{},"sourceType":"module"}