{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { SeriesColorPicker, SeriesIcon } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const LEGEND_STATS = ['min', 'max', 'avg', 'current', 'total'];\nexport class LegendItem extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onLabelClick\", e => this.props.onLabelClick(this.props.series, e));\n\n    _defineProperty(this, \"onToggleAxis\", () => {\n      const yaxis = this.state.yaxis === 2 ? 1 : 2;\n      const info = {\n        alias: this.props.series.alias,\n        yaxis: yaxis\n      };\n      this.setState({\n        yaxis: yaxis\n      });\n      this.props.onToggleAxis(info);\n    });\n\n    _defineProperty(this, \"onColorChange\", color => {\n      this.props.onColorChange(this.props.series, color); // Because of PureComponent nature it makes only shallow props comparison and changing of series.color doesn't run\n      // component re-render. In this case we can't rely on color, selected by user, because it may be overwritten\n      // by series overrides. So we need to use forceUpdate() to make sure we have proper series color.\n\n      this.forceUpdate();\n    });\n\n    this.state = {\n      yaxis: this.props.series.yaxis\n    };\n  }\n\n  renderLegendValues() {\n    const {\n      series,\n      asTable\n    } = this.props;\n    const legendValueItems = [];\n\n    for (const valueName of LEGEND_STATS) {\n      // @ts-ignore\n      if (this.props[valueName]) {\n        const valueFormatted = series.formatValue(series.stats[valueName]);\n        legendValueItems.push( /*#__PURE__*/_jsx(LegendValue, {\n          valueName: valueName,\n          value: valueFormatted,\n          asTable: asTable,\n          onValueClick: this.onLabelClick\n        }, valueName));\n      }\n    }\n\n    return legendValueItems;\n  }\n\n  render() {\n    const {\n      series,\n      values,\n      asTable,\n      hidden\n    } = this.props;\n    const seriesOptionClasses = classNames({\n      'graph-legend-series-hidden': hidden,\n      'graph-legend-series--right-y': series.yaxis === 2\n    });\n    const valueItems = values ? this.renderLegendValues() : [];\n\n    const seriesLabel = /*#__PURE__*/_jsx(LegendSeriesLabel, {\n      label: series.alias,\n      color: series.color,\n      yaxis: this.state.yaxis,\n      onLabelClick: this.onLabelClick,\n      onColorChange: this.onColorChange,\n      onToggleAxis: this.onToggleAxis\n    });\n\n    if (asTable) {\n      return /*#__PURE__*/_jsxs(\"tr\", {\n        className: `graph-legend-series ${seriesOptionClasses}`,\n        children: [/*#__PURE__*/_jsx(\"td\", {\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"graph-legend-series__table-name\",\n            children: seriesLabel\n          })\n        }), valueItems]\n      });\n    } else {\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: `graph-legend-series ${seriesOptionClasses}`,\n        children: [seriesLabel, valueItems]\n      });\n    }\n  }\n\n}\n\n_defineProperty(LegendItem, \"defaultProps\", {\n  asTable: false,\n  hidden: false,\n  onLabelClick: () => {},\n  onColorChange: () => {},\n  onToggleAxis: () => {}\n});\n\nclass LegendSeriesLabel extends PureComponent {\n  render() {\n    const {\n      label,\n      color,\n      yaxis\n    } = this.props;\n    const {\n      onColorChange,\n      onToggleAxis\n    } = this.props;\n    const onLabelClick = this.props.onLabelClick ? this.props.onLabelClick : () => {};\n    return [/*#__PURE__*/_jsx(LegendSeriesIcon, {\n      color: color,\n      yaxis: yaxis,\n      onColorChange: onColorChange,\n      onToggleAxis: onToggleAxis\n    }, \"icon\"), /*#__PURE__*/_jsx(\"a\", {\n      className: \"graph-legend-alias pointer\",\n      title: label,\n      onClick: onLabelClick,\n      \"aria-label\": selectors.components.Panels.Visualization.Graph.Legend.legendItemAlias(label),\n      children: label\n    }, \"label\")];\n  }\n\n}\n\n_defineProperty(LegendSeriesLabel, \"defaultProps\", {\n  yaxis: undefined,\n  onLabelClick: () => {}\n});\n\nclass LegendSeriesIcon extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onColorChange\", color => {\n      const {\n        onColorChange\n      } = this.props;\n\n      if (onColorChange) {\n        onColorChange(color);\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(SeriesColorPicker, {\n      yaxis: this.props.yaxis,\n      color: this.props.color,\n      onChange: this.onColorChange,\n      onToggleAxis: this.props.onToggleAxis,\n      enableNamedColors: true,\n      children: ({\n        ref,\n        showColorPicker,\n        hideColorPicker\n      }) => /*#__PURE__*/_jsx(SeriesIcon, {\n        color: this.props.color,\n        ref: ref,\n        onClick: showColorPicker,\n        onMouseLeave: hideColorPicker,\n        className: \"graph-legend-icon\"\n      })\n    });\n  }\n\n}\n\n_defineProperty(LegendSeriesIcon, \"defaultProps\", {\n  yaxis: undefined,\n  onColorChange: () => {},\n  onToggleAxis: () => {}\n});\n\nfunction LegendValue({\n  value,\n  valueName,\n  asTable,\n  onValueClick\n}) {\n  if (asTable) {\n    return /*#__PURE__*/_jsx(\"td\", {\n      className: `graph-legend-value ${valueName}`,\n      onClick: onValueClick,\n      children: value\n    });\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: `graph-legend-value ${valueName}`,\n    onClick: onValueClick,\n    children: value\n  });\n}","map":{"version":3,"names":["classNames","React","PureComponent","selectors","SeriesColorPicker","SeriesIcon","LEGEND_STATS","LegendItem","constructor","props","e","onLabelClick","series","yaxis","state","info","alias","setState","onToggleAxis","color","onColorChange","forceUpdate","renderLegendValues","asTable","legendValueItems","valueName","valueFormatted","formatValue","stats","push","render","values","hidden","seriesOptionClasses","valueItems","seriesLabel","LegendSeriesLabel","label","components","Panels","Visualization","Graph","Legend","legendItemAlias","undefined","LegendSeriesIcon","ref","showColorPicker","hideColorPicker","LegendValue","value","onValueClick"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/Legend/LegendSeriesItem.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { SeriesColorPicker, SeriesIcon } from '@grafana/ui';\nimport { TimeSeries } from 'app/core/core';\n\nexport const LEGEND_STATS = ['min', 'max', 'avg', 'current', 'total'] as const;\nexport type LegendStat = typeof LEGEND_STATS[number];\n\nexport interface LegendLabelProps {\n  series: TimeSeries;\n  asTable?: boolean;\n  hidden?: boolean;\n  onLabelClick: (series: any, event: any) => void;\n  onColorChange: (series: any, color: string) => void;\n  onToggleAxis: (series: any) => void;\n}\n\nexport interface LegendValuesProps {\n  values?: boolean;\n  min?: boolean;\n  max?: boolean;\n  avg?: boolean;\n  current?: boolean;\n  total?: boolean;\n}\n\ntype LegendItemProps = LegendLabelProps & LegendValuesProps;\n\ninterface LegendItemState {\n  yaxis: number;\n}\n\nexport class LegendItem extends PureComponent<LegendItemProps, LegendItemState> {\n  static defaultProps = {\n    asTable: false,\n    hidden: false,\n    onLabelClick: () => {},\n    onColorChange: () => {},\n    onToggleAxis: () => {},\n  };\n\n  constructor(props: LegendItemProps) {\n    super(props);\n    this.state = {\n      yaxis: this.props.series.yaxis,\n    };\n  }\n\n  onLabelClick = (e: any) => this.props.onLabelClick(this.props.series, e);\n\n  onToggleAxis = () => {\n    const yaxis = this.state.yaxis === 2 ? 1 : 2;\n    const info = { alias: this.props.series.alias, yaxis: yaxis };\n    this.setState({ yaxis: yaxis });\n    this.props.onToggleAxis(info);\n  };\n\n  onColorChange = (color: string) => {\n    this.props.onColorChange(this.props.series, color);\n    // Because of PureComponent nature it makes only shallow props comparison and changing of series.color doesn't run\n    // component re-render. In this case we can't rely on color, selected by user, because it may be overwritten\n    // by series overrides. So we need to use forceUpdate() to make sure we have proper series color.\n    this.forceUpdate();\n  };\n\n  renderLegendValues() {\n    const { series, asTable } = this.props;\n    const legendValueItems = [];\n    for (const valueName of LEGEND_STATS) {\n      // @ts-ignore\n      if (this.props[valueName]) {\n        const valueFormatted = series.formatValue(series.stats[valueName]);\n        legendValueItems.push(\n          <LegendValue\n            key={valueName}\n            valueName={valueName}\n            value={valueFormatted}\n            asTable={asTable}\n            onValueClick={this.onLabelClick}\n          />\n        );\n      }\n    }\n    return legendValueItems;\n  }\n\n  render() {\n    const { series, values, asTable, hidden } = this.props;\n    const seriesOptionClasses = classNames({\n      'graph-legend-series-hidden': hidden,\n      'graph-legend-series--right-y': series.yaxis === 2,\n    });\n    const valueItems = values ? this.renderLegendValues() : [];\n    const seriesLabel = (\n      <LegendSeriesLabel\n        label={series.alias}\n        color={series.color}\n        yaxis={this.state.yaxis}\n        onLabelClick={this.onLabelClick}\n        onColorChange={this.onColorChange}\n        onToggleAxis={this.onToggleAxis}\n      />\n    );\n\n    if (asTable) {\n      return (\n        <tr className={`graph-legend-series ${seriesOptionClasses}`}>\n          <td>\n            <div className=\"graph-legend-series__table-name\">{seriesLabel}</div>\n          </td>\n          {valueItems}\n        </tr>\n      );\n    } else {\n      return (\n        <div className={`graph-legend-series ${seriesOptionClasses}`}>\n          {seriesLabel}\n          {valueItems}\n        </div>\n      );\n    }\n  }\n}\n\ninterface LegendSeriesLabelProps {\n  label: string;\n  color: string;\n  yaxis?: number;\n  onLabelClick: (event: any) => void;\n}\n\nclass LegendSeriesLabel extends PureComponent<LegendSeriesLabelProps & LegendSeriesIconProps> {\n  static defaultProps: Partial<LegendSeriesLabelProps> = {\n    yaxis: undefined,\n    onLabelClick: () => {},\n  };\n\n  render() {\n    const { label, color, yaxis } = this.props;\n    const { onColorChange, onToggleAxis } = this.props;\n    const onLabelClick = this.props.onLabelClick ? this.props.onLabelClick : () => {};\n\n    return [\n      <LegendSeriesIcon\n        key=\"icon\"\n        color={color}\n        yaxis={yaxis}\n        onColorChange={onColorChange}\n        onToggleAxis={onToggleAxis}\n      />,\n      <a\n        className=\"graph-legend-alias pointer\"\n        title={label}\n        key=\"label\"\n        onClick={onLabelClick}\n        aria-label={selectors.components.Panels.Visualization.Graph.Legend.legendItemAlias(label)}\n      >\n        {label}\n      </a>,\n    ];\n  }\n}\n\ninterface LegendSeriesIconProps {\n  color: string;\n  yaxis?: number;\n  onColorChange?: (color: string) => void;\n  onToggleAxis?: () => void;\n}\n\ninterface LegendSeriesIconState {\n  color: string;\n}\n\nclass LegendSeriesIcon extends PureComponent<LegendSeriesIconProps, LegendSeriesIconState> {\n  static defaultProps: Partial<LegendSeriesIconProps> = {\n    yaxis: undefined,\n    onColorChange: () => {},\n    onToggleAxis: () => {},\n  };\n\n  onColorChange = (color: string) => {\n    const { onColorChange } = this.props;\n    if (onColorChange) {\n      onColorChange(color);\n    }\n  };\n  render() {\n    return (\n      <SeriesColorPicker\n        yaxis={this.props.yaxis}\n        color={this.props.color}\n        onChange={this.onColorChange}\n        onToggleAxis={this.props.onToggleAxis}\n        enableNamedColors\n      >\n        {({ ref, showColorPicker, hideColorPicker }) => (\n          <SeriesIcon\n            color={this.props.color}\n            ref={ref}\n            onClick={showColorPicker}\n            onMouseLeave={hideColorPicker}\n            className=\"graph-legend-icon\"\n          />\n        )}\n      </SeriesColorPicker>\n    );\n  }\n}\n\ninterface LegendValueProps {\n  value: string;\n  valueName: string;\n  asTable?: boolean;\n  onValueClick?: (event: any) => void;\n}\n\nfunction LegendValue({ value, valueName, asTable, onValueClick }: LegendValueProps) {\n  if (asTable) {\n    return (\n      <td className={`graph-legend-value ${valueName}`} onClick={onValueClick}>\n        {value}\n      </td>\n    );\n  }\n  return (\n    <div className={`graph-legend-value ${valueName}`} onClick={onValueClick}>\n      {value}\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}