{"ast":null,"code":"var _Query;\n\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormType } from '../../../types/rule-form';\nimport { ConditionField } from '../ConditionField';\nimport { RuleEditorSection } from '../RuleEditorSection';\nimport { AlertType } from './AlertType';\nimport { Query } from './Query';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const QueryAndAlertConditionStep = ({\n  editingExistingRule\n}) => {\n  const {\n    watch\n  } = useFormContext();\n  const type = watch('type');\n  const isGrafanaManagedType = type === RuleFormType.grafana;\n  return /*#__PURE__*/_jsxs(RuleEditorSection, {\n    stepNo: 1,\n    title: \"Set a query and alert condition\",\n    children: [/*#__PURE__*/_jsx(AlertType, {\n      editingExistingRule: editingExistingRule\n    }), type && (_Query || (_Query = /*#__PURE__*/_jsx(Query, {}))), isGrafanaManagedType && /*#__PURE__*/_jsx(ConditionField, {\n      existing: editingExistingRule\n    })]\n  });\n};","map":{"version":3,"names":["React","useFormContext","RuleFormType","ConditionField","RuleEditorSection","AlertType","Query","QueryAndAlertConditionStep","editingExistingRule","watch","type","isGrafanaManagedType","grafana"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/QueryAndAlertConditionStep.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { ConditionField } from '../ConditionField';\nimport { RuleEditorSection } from '../RuleEditorSection';\n\nimport { AlertType } from './AlertType';\nimport { Query } from './Query';\n\ninterface Props {\n  editingExistingRule: boolean;\n}\n\nexport const QueryAndAlertConditionStep: FC<Props> = ({ editingExistingRule }) => {\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const type = watch('type');\n  const isGrafanaManagedType = type === RuleFormType.grafana;\n\n  return (\n    <RuleEditorSection stepNo={1} title=\"Set a query and alert condition\">\n      <AlertType editingExistingRule={editingExistingRule} />\n      {type && <Query />}\n      {isGrafanaManagedType && <ConditionField existing={editingExistingRule} />}\n    </RuleEditorSection>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA,SAASC,YAAT,QAA6C,0BAA7C;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,KAAT,QAAsB,SAAtB;;;AAMA,OAAO,MAAMC,0BAAqC,GAAG,CAAC;EAAEC;AAAF,CAAD,KAA6B;EAChF,MAAM;IAAEC;EAAF,IAAYR,cAAc,EAAhC;EAEA,MAAMS,IAAI,GAAGD,KAAK,CAAC,MAAD,CAAlB;EACA,MAAME,oBAAoB,GAAGD,IAAI,KAAKR,YAAY,CAACU,OAAnD;EAEA,oBACE,MAAC,iBAAD;IAAmB,MAAM,EAAE,CAA3B;IAA8B,KAAK,EAAC,iCAApC;IAAA,wBACE,KAAC,SAAD;MAAW,mBAAmB,EAAEJ;IAAhC,EADF,EAEGE,IAAI,sCAAI,KAAC,KAAD,KAAJ,EAFP,EAGGC,oBAAoB,iBAAI,KAAC,cAAD;MAAgB,QAAQ,EAAEH;IAA1B,EAH3B;EAAA,EADF;AAOD,CAbM"},"metadata":{},"sourceType":"module"}