{"ast":null,"code":"import React from 'react';\nimport { InlineFieldRow, InlineField, Select, MultiSelect, Input } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport function USAQueryEditor({\n  query,\n  onChange\n}) {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(InlineFieldRow, {\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        labelWidth: 14,\n        label: \"Mode\",\n        children: /*#__PURE__*/_jsx(Select, {\n          options: usaQueryModes,\n          onChange: v => {\n            onChange(Object.assign({}, query, {\n              mode: v.value\n            }));\n          },\n          width: 32,\n          value: usaQueryModes.find(ep => ep.value === query.mode)\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Period\",\n        children: /*#__PURE__*/_jsx(Input, {\n          value: query.period,\n          placeholder: '30m',\n          onChange: v => {\n            onChange(Object.assign({}, query, {\n              period: v.currentTarget.value\n            }));\n          }\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(InlineFieldRow, {\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        labelWidth: 14,\n        label: \"Fields\",\n        children: /*#__PURE__*/_jsx(MultiSelect, {\n          options: fieldNames,\n          onChange: vals => {\n            onChange(Object.assign({}, query, {\n              fields: vals.map(v => v.value)\n            }));\n          },\n          width: 32,\n          placeholder: \"all\",\n          value: query.fields\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"States\",\n        grow: true,\n        children: /*#__PURE__*/_jsx(MultiSelect, {\n          options: stateNames,\n          onChange: vals => {\n            onChange(Object.assign({}, query, {\n              states: vals.map(v => v.value)\n            }));\n          },\n          placeholder: \"all\",\n          value: query.states\n        })\n      })]\n    })]\n  });\n}\nexport const usaQueryModes = ['values-as-rows', 'values-as-fields', 'values-as-labeled-fields', 'timeseries', 'timeseries-wide'].map(f => ({\n  label: f,\n  value: f\n}));\nexport const fieldNames = ['foo', 'bar', 'baz' // all short\n].map(f => ({\n  label: f,\n  value: f\n}));\nexport const stateNames = ['AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY'].map(f => ({\n  label: f,\n  value: f\n}));","map":{"version":3,"names":["React","InlineFieldRow","InlineField","Select","MultiSelect","Input","USAQueryEditor","query","onChange","usaQueryModes","v","mode","value","find","ep","period","currentTarget","fieldNames","vals","fields","map","stateNames","states","f","label"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/components/USAQueryEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFieldRow, InlineField, Select, MultiSelect, Input } from '@grafana/ui';\n\nimport { USAQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: USAQuery) => void;\n  query: USAQuery;\n}\n\nexport function USAQueryEditor({ query, onChange }: Props) {\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Mode\">\n          <Select\n            options={usaQueryModes}\n            onChange={(v) => {\n              onChange({ ...query, mode: v.value });\n            }}\n            width={32}\n            value={usaQueryModes.find((ep) => ep.value === query.mode)}\n          />\n        </InlineField>\n        <InlineField label=\"Period\">\n          <Input\n            value={query.period}\n            placeholder={'30m'}\n            onChange={(v) => {\n              onChange({ ...query, period: v.currentTarget.value });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Fields\">\n          <MultiSelect\n            options={fieldNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, fields: vals.map((v) => v.value) });\n            }}\n            width={32}\n            placeholder=\"all\"\n            value={query.fields}\n          />\n        </InlineField>\n        <InlineField label=\"States\" grow>\n          <MultiSelect\n            options={stateNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, states: vals.map((v) => v.value) });\n            }}\n            placeholder=\"all\"\n            value={query.states}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n}\n\nexport const usaQueryModes = [\n  'values-as-rows',\n  'values-as-fields',\n  'values-as-labeled-fields',\n  'timeseries',\n  'timeseries-wide',\n].map((f) => ({ label: f, value: f }));\n\nexport const fieldNames = [\n  'foo',\n  'bar',\n  'baz', // all short\n].map((f) => ({ label: f, value: f }));\n\nexport const stateNames = [\n  'AL',\n  'AK',\n  'AZ',\n  'AR',\n  'CA',\n  'CO',\n  'CT',\n  'DE',\n  'DC',\n  'FL',\n  'GA',\n  'HI',\n  'ID',\n  'IL',\n  'IN',\n  'IA',\n  'KS',\n  'KY',\n  'LA',\n  'ME',\n  'MT',\n  'NE',\n  'NV',\n  'NH',\n  'NJ',\n  'NM',\n  'NY',\n  'NC',\n  'ND',\n  'OH',\n  'OK',\n  'OR',\n  'MD',\n  'MA',\n  'MI',\n  'MN',\n  'MS',\n  'MO',\n  'PA',\n  'RI',\n  'SC',\n  'SD',\n  'TN',\n  'TX',\n  'UT',\n  'VT',\n  'VA',\n  'WA',\n  'WV',\n  'WI',\n  'WY',\n].map((f) => ({ label: f, value: f }));\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,cAAT,EAAyBC,WAAzB,EAAsCC,MAAtC,EAA8CC,WAA9C,EAA2DC,KAA3D,QAAwE,aAAxE;;;;AASA,OAAO,SAASC,cAAT,CAAwB;EAAEC,KAAF;EAASC;AAAT,CAAxB,EAAoD;EACzD,oBACE;IAAA,wBACE,MAAC,cAAD;MAAA,wBACE,KAAC,WAAD;QAAa,UAAU,EAAE,EAAzB;QAA6B,KAAK,EAAC,MAAnC;QAAA,uBACE,KAAC,MAAD;UACE,OAAO,EAAEC,aADX;UAEE,QAAQ,EAAGC,CAAD,IAAO;YACfF,QAAQ,mBAAMD,KAAN;cAAaI,IAAI,EAAED,CAAC,CAACE;YAArB,GAAR;UACD,CAJH;UAKE,KAAK,EAAE,EALT;UAME,KAAK,EAAEH,aAAa,CAACI,IAAd,CAAoBC,EAAD,IAAQA,EAAE,CAACF,KAAH,KAAaL,KAAK,CAACI,IAA9C;QANT;MADF,EADF,eAWE,KAAC,WAAD;QAAa,KAAK,EAAC,QAAnB;QAAA,uBACE,KAAC,KAAD;UACE,KAAK,EAAEJ,KAAK,CAACQ,MADf;UAEE,WAAW,EAAE,KAFf;UAGE,QAAQ,EAAGL,CAAD,IAAO;YACfF,QAAQ,mBAAMD,KAAN;cAAaQ,MAAM,EAAEL,CAAC,CAACM,aAAF,CAAgBJ;YAArC,GAAR;UACD;QALH;MADF,EAXF;IAAA,EADF,eAsBE,MAAC,cAAD;MAAA,wBACE,KAAC,WAAD;QAAa,UAAU,EAAE,EAAzB;QAA6B,KAAK,EAAC,QAAnC;QAAA,uBACE,KAAC,WAAD;UACE,OAAO,EAAEK,UADX;UAEE,QAAQ,EAAGC,IAAD,IAA6B;YACrCV,QAAQ,mBAAMD,KAAN;cAAaY,MAAM,EAAED,IAAI,CAACE,GAAL,CAAUV,CAAD,IAAOA,CAAC,CAACE,KAAlB;YAArB,GAAR;UACD,CAJH;UAKE,KAAK,EAAE,EALT;UAME,WAAW,EAAC,KANd;UAOE,KAAK,EAAEL,KAAK,CAACY;QAPf;MADF,EADF,eAYE,KAAC,WAAD;QAAa,KAAK,EAAC,QAAnB;QAA4B,IAAI,MAAhC;QAAA,uBACE,KAAC,WAAD;UACE,OAAO,EAAEE,UADX;UAEE,QAAQ,EAAGH,IAAD,IAA6B;YACrCV,QAAQ,mBAAMD,KAAN;cAAae,MAAM,EAAEJ,IAAI,CAACE,GAAL,CAAUV,CAAD,IAAOA,CAAC,CAACE,KAAlB;YAArB,GAAR;UACD,CAJH;UAKE,WAAW,EAAC,KALd;UAME,KAAK,EAAEL,KAAK,CAACe;QANf;MADF,EAZF;IAAA,EAtBF;EAAA,EADF;AAgDD;AAED,OAAO,MAAMb,aAAa,GAAG,CAC3B,gBAD2B,EAE3B,kBAF2B,EAG3B,0BAH2B,EAI3B,YAJ2B,EAK3B,iBAL2B,EAM3BW,GAN2B,CAMtBG,CAAD,KAAQ;EAAEC,KAAK,EAAED,CAAT;EAAYX,KAAK,EAAEW;AAAnB,CAAR,CANuB,CAAtB;AAQP,OAAO,MAAMN,UAAU,GAAG,CACxB,KADwB,EAExB,KAFwB,EAGxB,KAHwB,CAGjB;AAHiB,EAIxBG,GAJwB,CAInBG,CAAD,KAAQ;EAAEC,KAAK,EAAED,CAAT;EAAYX,KAAK,EAAEW;AAAnB,CAAR,CAJoB,CAAnB;AAMP,OAAO,MAAMF,UAAU,GAAG,CACxB,IADwB,EAExB,IAFwB,EAGxB,IAHwB,EAIxB,IAJwB,EAKxB,IALwB,EAMxB,IANwB,EAOxB,IAPwB,EAQxB,IARwB,EASxB,IATwB,EAUxB,IAVwB,EAWxB,IAXwB,EAYxB,IAZwB,EAaxB,IAbwB,EAcxB,IAdwB,EAexB,IAfwB,EAgBxB,IAhBwB,EAiBxB,IAjBwB,EAkBxB,IAlBwB,EAmBxB,IAnBwB,EAoBxB,IApBwB,EAqBxB,IArBwB,EAsBxB,IAtBwB,EAuBxB,IAvBwB,EAwBxB,IAxBwB,EAyBxB,IAzBwB,EA0BxB,IA1BwB,EA2BxB,IA3BwB,EA4BxB,IA5BwB,EA6BxB,IA7BwB,EA8BxB,IA9BwB,EA+BxB,IA/BwB,EAgCxB,IAhCwB,EAiCxB,IAjCwB,EAkCxB,IAlCwB,EAmCxB,IAnCwB,EAoCxB,IApCwB,EAqCxB,IArCwB,EAsCxB,IAtCwB,EAuCxB,IAvCwB,EAwCxB,IAxCwB,EAyCxB,IAzCwB,EA0CxB,IA1CwB,EA2CxB,IA3CwB,EA4CxB,IA5CwB,EA6CxB,IA7CwB,EA8CxB,IA9CwB,EA+CxB,IA/CwB,EAgDxB,IAhDwB,EAiDxB,IAjDwB,EAkDxB,IAlDwB,EAmDxB,IAnDwB,EAoDxBD,GApDwB,CAoDnBG,CAAD,KAAQ;EAAEC,KAAK,EAAED,CAAT;EAAYX,KAAK,EAAEW;AAAnB,CAAR,CApDoB,CAAnB"},"metadata":{},"sourceType":"module"}