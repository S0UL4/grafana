{"ast":null,"code":"var _br, _br2, _br3, _br4;\n\nimport React, { useMemo } from 'react';\nimport { useAsync } from 'react-use';\nimport { selectors as editorSelectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Select, TextArea } from '@grafana/ui';\nimport { RandomWalkEditor, StreamingClientEditor } from './components';\nimport { CSVContentEditor } from './components/CSVContentEditor';\nimport { CSVFileEditor } from './components/CSVFileEditor';\nimport { CSVWavesEditor } from './components/CSVWaveEditor';\nimport ErrorEditor from './components/ErrorEditor';\nimport { GrafanaLiveEditor } from './components/GrafanaLiveEditor';\nimport { NodeGraphEditor } from './components/NodeGraphEditor';\nimport { PredictablePulseEditor } from './components/PredictablePulseEditor';\nimport { RawFrameEditor } from './components/RawFrameEditor';\nimport { SimulationQueryEditor } from './components/SimulationQueryEditor';\nimport { USAQueryEditor, usaQueryModes } from './components/USAQueryEditor';\nimport { defaultCSVWaveQuery, defaultPulseQuery, defaultQuery } from './constants';\nimport { defaultStreamQuery } from './runStreams';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst showLabelsFor = ['random_walk', 'predictable_pulse'];\nconst endpoints = [{\n  value: 'datasources',\n  label: 'Data Sources'\n}, {\n  value: 'search',\n  label: 'Search'\n}, {\n  value: 'annotations',\n  label: 'Annotations'\n}];\nconst selectors = editorSelectors.components.DataSource.TestData.QueryTab;\nexport const QueryEditor = ({\n  query,\n  datasource,\n  onChange,\n  onRunQuery\n}) => {\n  var _query, _query$usa;\n\n  query = Object.assign({}, defaultQuery, query);\n  const {\n    loading,\n    value: scenarioList\n  } = useAsync(async () => {\n    // migrate manual_entry (unusable since 7, removed in 8)\n    if (query.scenarioId === 'manual_entry' && query.points) {\n      let csvContent = 'Time,Value\\n';\n\n      for (const point of query.points) {\n        csvContent += `${point[1]},${point[0]}\\n`;\n      }\n\n      onChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        scenarioId: 'csv_content',\n        csvContent\n      });\n    }\n\n    const vals = await datasource.getScenarios();\n    const hideAlias = ['simulation'];\n    return vals.map(v => Object.assign({}, v, {\n      hideAliasField: hideAlias.includes(v.id)\n    }));\n  }, []);\n\n  const onUpdate = query => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  const currentScenario = useMemo(() => scenarioList === null || scenarioList === void 0 ? void 0 : scenarioList.find(scenario => scenario.id === query.scenarioId), [scenarioList, query]);\n  const scenarioId = currentScenario === null || currentScenario === void 0 ? void 0 : currentScenario.id;\n  const description = currentScenario === null || currentScenario === void 0 ? void 0 : currentScenario.description;\n\n  const onScenarioChange = item => {\n    const scenario = scenarioList === null || scenarioList === void 0 ? void 0 : scenarioList.find(sc => sc.id === item.value);\n\n    if (!scenario) {\n      return;\n    } // Clear model from existing props that belong to other scenarios\n\n\n    const update = {\n      scenarioId: item.value,\n      refId: query.refId,\n      alias: query.alias,\n      datasource: query.datasource\n    };\n\n    if (scenario.stringInput) {\n      update.stringInput = scenario.stringInput;\n    }\n\n    switch (scenario.id) {\n      case 'grafana_api':\n        update.stringInput = 'datasources';\n        break;\n\n      case 'streaming_client':\n        update.stream = defaultStreamQuery;\n        break;\n\n      case 'live':\n        update.channel = 'random-2s-stream'; // default stream\n\n        break;\n\n      case 'simulation':\n        update.sim = {\n          key: {\n            type: 'flight',\n            tick: 10\n          }\n        }; // default stream\n\n        break;\n\n      case 'predictable_pulse':\n        update.pulseWave = defaultPulseQuery;\n        break;\n\n      case 'predictable_csv_wave':\n        update.csvWave = defaultCSVWaveQuery;\n        break;\n\n      case 'usa':\n        update.usa = {\n          mode: usaQueryModes[0].value\n        };\n    }\n\n    onUpdate(update);\n  };\n\n  const onInputChange = e => {\n    const {\n      name,\n      value,\n      type\n    } = e.target;\n    let newValue = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    if (name === 'levelColumn') {\n      newValue = e.target.checked;\n    }\n\n    onUpdate(Object.assign({}, query, {\n      [name]: newValue\n    }));\n  };\n\n  const onFieldChange = field => e => {\n    const {\n      name,\n      value,\n      type\n    } = e.target;\n    let newValue = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    onUpdate(Object.assign({}, query, {\n      [field]: Object.assign({}, query[field], {\n        [name]: newValue\n      })\n    }));\n  };\n\n  const onEndPointChange = ({\n    value\n  }) => {\n    onUpdate(Object.assign({}, query, {\n      stringInput: value\n    }));\n  };\n\n  const onStreamClientChange = onFieldChange('stream');\n  const onPulseWaveChange = onFieldChange('pulseWave');\n\n  const onUSAStatsChange = usa => {\n    onUpdate(Object.assign({}, query, {\n      usa\n    }));\n  };\n\n  const onCSVWaveChange = csvWave => {\n    onUpdate(Object.assign({}, query, {\n      csvWave\n    }));\n  };\n\n  const options = useMemo(() => (scenarioList || []).map(item => ({\n    label: item.name,\n    value: item.id\n  })).sort((a, b) => a.label.localeCompare(b.label)), [scenarioList]);\n  const showLabels = useMemo(() => {\n    var _query$scenarioId;\n\n    return showLabelsFor.includes((_query$scenarioId = query.scenarioId) !== null && _query$scenarioId !== void 0 ? _query$scenarioId : '');\n  }, [query]);\n\n  if (loading) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(InlineFieldRow, {\n      \"aria-label\": selectors.scenarioSelectContainer,\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        labelWidth: 14,\n        label: \"Scenario\",\n        children: /*#__PURE__*/_jsx(Select, {\n          inputId: `test-data-scenario-select-${query.refId}`,\n          options: options,\n          value: options.find(item => item.value === query.scenarioId),\n          onChange: onScenarioChange,\n          width: 32\n        })\n      }), (currentScenario === null || currentScenario === void 0 ? void 0 : currentScenario.stringInput) && /*#__PURE__*/_jsx(InlineField, {\n        label: \"String Input\",\n        children: /*#__PURE__*/_jsx(Input, {\n          width: 32,\n          id: `stringInput-${query.refId}`,\n          name: \"stringInput\",\n          placeholder: query.stringInput,\n          value: query.stringInput,\n          onChange: onInputChange\n        })\n      }), Boolean(!(currentScenario !== null && currentScenario !== void 0 && currentScenario.hideAliasField)) && /*#__PURE__*/_jsx(InlineField, {\n        label: \"Alias\",\n        labelWidth: 14,\n        children: /*#__PURE__*/_jsx(Input, {\n          width: 32,\n          id: `alias-${query.refId}`,\n          type: \"text\",\n          placeholder: \"optional\",\n          pattern: \"[^<>&\\\\\\\\\\\"]+\",\n          name: \"alias\",\n          value: query.alias,\n          onChange: onInputChange\n        })\n      }), showLabels && /*#__PURE__*/_jsx(InlineField, {\n        label: \"Labels\",\n        labelWidth: 14,\n        tooltip: /*#__PURE__*/_jsxs(_Fragment, {\n          children: [\"Set labels using a key=value syntax:\", _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), `{ key = \"value\", key2 = \"value\" }`, _br2 || (_br2 = /*#__PURE__*/_jsx(\"br\", {})), \"key=\\\"value\\\", key2=\\\"value\\\"\", _br3 || (_br3 = /*#__PURE__*/_jsx(\"br\", {})), \"key=value, key2=value\", _br4 || (_br4 = /*#__PURE__*/_jsx(\"br\", {}))]\n        }),\n        children: /*#__PURE__*/_jsx(Input, {\n          width: 32,\n          id: `labels-${query.refId}`,\n          name: \"labels\",\n          onChange: onInputChange,\n          value: (_query = query) === null || _query === void 0 ? void 0 : _query.labels,\n          placeholder: \"key=value, key2=value2\"\n        })\n      })]\n    }), scenarioId === 'random_walk' && /*#__PURE__*/_jsx(RandomWalkEditor, {\n      onChange: onInputChange,\n      query: query,\n      ds: datasource\n    }), scenarioId === 'streaming_client' && /*#__PURE__*/_jsx(StreamingClientEditor, {\n      onChange: onStreamClientChange,\n      query: query,\n      ds: datasource\n    }), scenarioId === 'live' && /*#__PURE__*/_jsx(GrafanaLiveEditor, {\n      onChange: onUpdate,\n      query: query,\n      ds: datasource\n    }), scenarioId === 'simulation' && /*#__PURE__*/_jsx(SimulationQueryEditor, {\n      onChange: onUpdate,\n      query: query,\n      ds: datasource\n    }), scenarioId === 'raw_frame' && /*#__PURE__*/_jsx(RawFrameEditor, {\n      onChange: onUpdate,\n      query: query,\n      ds: datasource\n    }), scenarioId === 'csv_file' && /*#__PURE__*/_jsx(CSVFileEditor, {\n      onChange: onUpdate,\n      query: query,\n      ds: datasource\n    }), scenarioId === 'csv_content' && /*#__PURE__*/_jsx(CSVContentEditor, {\n      onChange: onUpdate,\n      query: query,\n      ds: datasource\n    }), scenarioId === 'logs' && /*#__PURE__*/_jsxs(InlineFieldRow, {\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        label: \"Lines\",\n        labelWidth: 14,\n        children: /*#__PURE__*/_jsx(Input, {\n          type: \"number\",\n          name: \"lines\",\n          value: query.lines,\n          width: 32,\n          onChange: onInputChange,\n          placeholder: \"10\"\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Level\",\n        labelWidth: 14,\n        children: /*#__PURE__*/_jsx(InlineSwitch, {\n          onChange: onInputChange,\n          name: \"levelColumn\",\n          value: !!query.levelColumn\n        })\n      })]\n    }), scenarioId === 'usa' && /*#__PURE__*/_jsx(USAQueryEditor, {\n      onChange: onUSAStatsChange,\n      query: (_query$usa = query.usa) !== null && _query$usa !== void 0 ? _query$usa : {}\n    }), scenarioId === 'grafana_api' && /*#__PURE__*/_jsx(InlineField, {\n      labelWidth: 14,\n      label: \"Endpoint\",\n      children: /*#__PURE__*/_jsx(Select, {\n        options: endpoints,\n        onChange: onEndPointChange,\n        width: 32,\n        value: endpoints.find(ep => ep.value === query.stringInput)\n      })\n    }), scenarioId === 'arrow' && /*#__PURE__*/_jsx(InlineField, {\n      grow: true,\n      children: /*#__PURE__*/_jsx(TextArea, {\n        name: \"stringInput\",\n        value: query.stringInput,\n        rows: 10,\n        placeholder: \"Copy base64 text data from query result\",\n        onChange: onInputChange\n      })\n    }), scenarioId === 'predictable_pulse' && /*#__PURE__*/_jsx(PredictablePulseEditor, {\n      onChange: onPulseWaveChange,\n      query: query,\n      ds: datasource\n    }), scenarioId === 'predictable_csv_wave' && /*#__PURE__*/_jsx(CSVWavesEditor, {\n      onChange: onCSVWaveChange,\n      waves: query.csvWave\n    }), scenarioId === 'node_graph' && /*#__PURE__*/_jsx(NodeGraphEditor, {\n      onChange: val => onChange(Object.assign({}, query, {\n        nodes: val\n      })),\n      query: query\n    }), scenarioId === 'server_error_500' && /*#__PURE__*/_jsx(ErrorEditor, {\n      onChange: onUpdate,\n      query: query,\n      ds: datasource\n    }), description && /*#__PURE__*/_jsx(\"p\", {\n      children: description\n    })]\n  });\n};","map":{"version":3,"names":["React","useMemo","useAsync","selectors","editorSelectors","InlineField","InlineFieldRow","InlineSwitch","Input","Select","TextArea","RandomWalkEditor","StreamingClientEditor","CSVContentEditor","CSVFileEditor","CSVWavesEditor","ErrorEditor","GrafanaLiveEditor","NodeGraphEditor","PredictablePulseEditor","RawFrameEditor","SimulationQueryEditor","USAQueryEditor","usaQueryModes","defaultCSVWaveQuery","defaultPulseQuery","defaultQuery","defaultStreamQuery","showLabelsFor","endpoints","value","label","components","DataSource","TestData","QueryTab","QueryEditor","query","datasource","onChange","onRunQuery","loading","scenarioList","scenarioId","points","csvContent","point","refId","vals","getScenarios","hideAlias","map","v","hideAliasField","includes","id","onUpdate","currentScenario","find","scenario","description","onScenarioChange","item","sc","update","alias","stringInput","stream","channel","sim","key","type","tick","pulseWave","csvWave","usa","mode","onInputChange","e","name","target","newValue","Number","checked","onFieldChange","field","onEndPointChange","onStreamClientChange","onPulseWaveChange","onUSAStatsChange","onCSVWaveChange","options","sort","a","b","localeCompare","showLabels","scenarioSelectContainer","Boolean","labels","lines","levelColumn","ep","val","nodes"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/QueryEditor.tsx"],"sourcesContent":["import React, { ChangeEvent, FormEvent, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { selectors as editorSelectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Select, TextArea } from '@grafana/ui';\n\nimport { RandomWalkEditor, StreamingClientEditor } from './components';\nimport { CSVContentEditor } from './components/CSVContentEditor';\nimport { CSVFileEditor } from './components/CSVFileEditor';\nimport { CSVWavesEditor } from './components/CSVWaveEditor';\nimport ErrorEditor from './components/ErrorEditor';\nimport { GrafanaLiveEditor } from './components/GrafanaLiveEditor';\nimport { NodeGraphEditor } from './components/NodeGraphEditor';\nimport { PredictablePulseEditor } from './components/PredictablePulseEditor';\nimport { RawFrameEditor } from './components/RawFrameEditor';\nimport { SimulationQueryEditor } from './components/SimulationQueryEditor';\nimport { USAQueryEditor, usaQueryModes } from './components/USAQueryEditor';\nimport { defaultCSVWaveQuery, defaultPulseQuery, defaultQuery } from './constants';\nimport { TestDataDataSource } from './datasource';\nimport { defaultStreamQuery } from './runStreams';\nimport { CSVWave, NodesQuery, TestDataQuery, USAQuery } from './types';\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse'];\nconst endpoints = [\n  { value: 'datasources', label: 'Data Sources' },\n  { value: 'search', label: 'Search' },\n  { value: 'annotations', label: 'Annotations' },\n];\n\nconst selectors = editorSelectors.components.DataSource.TestData.QueryTab;\n\nexport interface EditorProps {\n  onChange: (value: any) => void;\n  query: TestDataQuery;\n  ds: TestDataDataSource;\n}\n\nexport type Props = QueryEditorProps<TestDataDataSource, TestDataQuery>;\n\nexport const QueryEditor = ({ query, datasource, onChange, onRunQuery }: Props) => {\n  query = { ...defaultQuery, ...query };\n\n  const { loading, value: scenarioList } = useAsync(async () => {\n    // migrate manual_entry (unusable since 7, removed in 8)\n    if (query.scenarioId === 'manual_entry' && (query as any).points) {\n      let csvContent = 'Time,Value\\n';\n      for (const point of (query as any).points) {\n        csvContent += `${point[1]},${point[0]}\\n`;\n      }\n      onChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        scenarioId: 'csv_content',\n        csvContent,\n      });\n    }\n\n    const vals = await datasource.getScenarios();\n    const hideAlias = ['simulation'];\n    return vals.map((v) => ({\n      ...v,\n      hideAliasField: hideAlias.includes(v.id),\n    }));\n  }, []);\n\n  const onUpdate = (query: TestDataQuery) => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  const currentScenario = useMemo(\n    () => scenarioList?.find((scenario) => scenario.id === query.scenarioId),\n    [scenarioList, query]\n  );\n  const scenarioId = currentScenario?.id;\n  const description = currentScenario?.description;\n\n  const onScenarioChange = (item: SelectableValue<string>) => {\n    const scenario = scenarioList?.find((sc) => sc.id === item.value);\n\n    if (!scenario) {\n      return;\n    }\n\n    // Clear model from existing props that belong to other scenarios\n    const update: TestDataQuery = {\n      scenarioId: item.value!,\n      refId: query.refId,\n      alias: query.alias,\n      datasource: query.datasource,\n    };\n\n    if (scenario.stringInput) {\n      update.stringInput = scenario.stringInput;\n    }\n\n    switch (scenario.id) {\n      case 'grafana_api':\n        update.stringInput = 'datasources';\n        break;\n      case 'streaming_client':\n        update.stream = defaultStreamQuery;\n        break;\n      case 'live':\n        update.channel = 'random-2s-stream'; // default stream\n        break;\n      case 'simulation':\n        update.sim = { key: { type: 'flight', tick: 10 } }; // default stream\n        break;\n      case 'predictable_pulse':\n        update.pulseWave = defaultPulseQuery;\n        break;\n      case 'predictable_csv_wave':\n        update.csvWave = defaultCSVWaveQuery;\n        break;\n      case 'usa':\n        update.usa = {\n          mode: usaQueryModes[0].value,\n        };\n    }\n\n    onUpdate(update);\n  };\n\n  const onInputChange = (e: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement | HTMLTextAreaElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    if (name === 'levelColumn') {\n      newValue = (e.target as HTMLInputElement).checked;\n    }\n\n    onUpdate({ ...query, [name]: newValue });\n  };\n\n  const onFieldChange = (field: string) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    onUpdate({ ...query, [field]: { ...(query as any)[field], [name]: newValue } });\n  };\n\n  const onEndPointChange = ({ value }: SelectableValue) => {\n    onUpdate({ ...query, stringInput: value });\n  };\n\n  const onStreamClientChange = onFieldChange('stream');\n  const onPulseWaveChange = onFieldChange('pulseWave');\n  const onUSAStatsChange = (usa?: USAQuery) => {\n    onUpdate({ ...query, usa });\n  };\n\n  const onCSVWaveChange = (csvWave?: CSVWave[]) => {\n    onUpdate({ ...query, csvWave });\n  };\n\n  const options = useMemo(\n    () =>\n      (scenarioList || [])\n        .map((item) => ({ label: item.name, value: item.id }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [scenarioList]\n  );\n  const showLabels = useMemo(() => showLabelsFor.includes(query.scenarioId ?? ''), [query]);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <>\n      <InlineFieldRow aria-label={selectors.scenarioSelectContainer}>\n        <InlineField labelWidth={14} label=\"Scenario\">\n          <Select\n            inputId={`test-data-scenario-select-${query.refId}`}\n            options={options}\n            value={options.find((item) => item.value === query.scenarioId)}\n            onChange={onScenarioChange}\n            width={32}\n          />\n        </InlineField>\n        {currentScenario?.stringInput && (\n          <InlineField label=\"String Input\">\n            <Input\n              width={32}\n              id={`stringInput-${query.refId}`}\n              name=\"stringInput\"\n              placeholder={query.stringInput}\n              value={query.stringInput}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        {Boolean(!currentScenario?.hideAliasField) && (\n          <InlineField label=\"Alias\" labelWidth={14}>\n            <Input\n              width={32}\n              id={`alias-${query.refId}`}\n              type=\"text\"\n              placeholder=\"optional\"\n              pattern='[^<>&\\\\\"]+'\n              name=\"alias\"\n              value={query.alias}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        {showLabels && (\n          <InlineField\n            label=\"Labels\"\n            labelWidth={14}\n            tooltip={\n              <>\n                Set labels using a key=value syntax:\n                <br />\n                {`{ key = \"value\", key2 = \"value\" }`}\n                <br />\n                key=&quot;value&quot;, key2=&quot;value&quot;\n                <br />\n                key=value, key2=value\n                <br />\n              </>\n            }\n          >\n            <Input\n              width={32}\n              id={`labels-${query.refId}`}\n              name=\"labels\"\n              onChange={onInputChange}\n              value={query?.labels}\n              placeholder=\"key=value, key2=value2\"\n            />\n          </InlineField>\n        )}\n      </InlineFieldRow>\n\n      {scenarioId === 'random_walk' && <RandomWalkEditor onChange={onInputChange} query={query} ds={datasource} />}\n      {scenarioId === 'streaming_client' && (\n        <StreamingClientEditor onChange={onStreamClientChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === 'live' && <GrafanaLiveEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'simulation' && <SimulationQueryEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'raw_frame' && <RawFrameEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'csv_file' && <CSVFileEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'csv_content' && <CSVContentEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'logs' && (\n        <InlineFieldRow>\n          <InlineField label=\"Lines\" labelWidth={14}>\n            <Input\n              type=\"number\"\n              name=\"lines\"\n              value={query.lines}\n              width={32}\n              onChange={onInputChange}\n              placeholder=\"10\"\n            />\n          </InlineField>\n          <InlineField label=\"Level\" labelWidth={14}>\n            <InlineSwitch onChange={onInputChange} name=\"levelColumn\" value={!!query.levelColumn} />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {scenarioId === 'usa' && <USAQueryEditor onChange={onUSAStatsChange} query={query.usa ?? {}} />}\n      {scenarioId === 'grafana_api' && (\n        <InlineField labelWidth={14} label=\"Endpoint\">\n          <Select\n            options={endpoints}\n            onChange={onEndPointChange}\n            width={32}\n            value={endpoints.find((ep) => ep.value === query.stringInput)}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'arrow' && (\n        <InlineField grow>\n          <TextArea\n            name=\"stringInput\"\n            value={query.stringInput}\n            rows={10}\n            placeholder=\"Copy base64 text data from query result\"\n            onChange={onInputChange}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'predictable_pulse' && (\n        <PredictablePulseEditor onChange={onPulseWaveChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === 'predictable_csv_wave' && <CSVWavesEditor onChange={onCSVWaveChange} waves={query.csvWave} />}\n      {scenarioId === 'node_graph' && (\n        <NodeGraphEditor onChange={(val: NodesQuery) => onChange({ ...query, nodes: val })} query={query} />\n      )}\n      {scenarioId === 'server_error_500' && <ErrorEditor onChange={onUpdate} query={query} ds={datasource} />}\n\n      {description && <p>{description}</p>}\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}