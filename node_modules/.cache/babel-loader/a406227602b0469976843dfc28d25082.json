{"ast":null,"code":"import React from 'react';\nimport { Input, InlineFieldRow, InlineField, Select } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function NodeGraphEditor({\n  query,\n  onChange\n}) {\n  var _query$nodes, _query$nodes2;\n\n  const type = ((_query$nodes = query.nodes) === null || _query$nodes === void 0 ? void 0 : _query$nodes.type) || 'random';\n  return /*#__PURE__*/_jsxs(InlineFieldRow, {\n    children: [/*#__PURE__*/_jsx(InlineField, {\n      label: \"Data type\",\n      labelWidth: 14,\n      children: /*#__PURE__*/_jsx(Select, {\n        options: options.map(o => ({\n          label: o,\n          value: o\n        })),\n        value: options.find(item => item === type),\n        onChange: value => onChange(Object.assign({}, query.nodes, {\n          type: value.value\n        })),\n        width: 32\n      })\n    }), type === 'random' && /*#__PURE__*/_jsx(InlineField, {\n      label: \"Count\",\n      labelWidth: 14,\n      children: /*#__PURE__*/_jsx(Input, {\n        type: \"number\",\n        name: \"count\",\n        value: (_query$nodes2 = query.nodes) === null || _query$nodes2 === void 0 ? void 0 : _query$nodes2.count,\n        width: 32,\n        onChange: e => onChange(Object.assign({}, query.nodes, {\n          count: e.currentTarget.value ? parseInt(e.currentTarget.value, 10) : 0\n        })),\n        placeholder: \"10\"\n      })\n    })]\n  });\n}\nconst options = ['random', 'response'];","map":{"version":3,"names":["React","Input","InlineFieldRow","InlineField","Select","NodeGraphEditor","query","onChange","type","nodes","options","map","o","label","value","find","item","count","e","currentTarget","parseInt"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/components/NodeGraphEditor.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Input, InlineFieldRow, InlineField, Select } from '@grafana/ui';\n\nimport { NodesQuery, TestDataQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: NodesQuery) => void;\n  query: TestDataQuery;\n}\nexport function NodeGraphEditor({ query, onChange }: Props) {\n  const type = query.nodes?.type || 'random';\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Data type\" labelWidth={14}>\n        <Select<NodesQuery['type']>\n          options={options.map((o) => ({\n            label: o,\n            value: o,\n          }))}\n          value={options.find((item) => item === type)}\n          onChange={(value) => onChange({ ...query.nodes, type: value.value! })}\n          width={32}\n        />\n      </InlineField>\n      {type === 'random' && (\n        <InlineField label=\"Count\" labelWidth={14}>\n          <Input\n            type=\"number\"\n            name=\"count\"\n            value={query.nodes?.count}\n            width={32}\n            onChange={(e) =>\n              onChange({ ...query.nodes, count: e.currentTarget.value ? parseInt(e.currentTarget.value, 10) : 0 })\n            }\n            placeholder=\"10\"\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n}\n\nconst options: Array<NodesQuery['type']> = ['random', 'response'];\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,WAAhC,EAA6CC,MAA7C,QAA2D,aAA3D;;;AAQA,OAAO,SAASC,eAAT,CAAyB;EAAEC,KAAF;EAASC;AAAT,CAAzB,EAAqD;EAAA;;EAC1D,MAAMC,IAAI,GAAG,iBAAAF,KAAK,CAACG,KAAN,8DAAaD,IAAb,KAAqB,QAAlC;EACA,oBACE,MAAC,cAAD;IAAA,wBACE,KAAC,WAAD;MAAa,KAAK,EAAC,WAAnB;MAA+B,UAAU,EAAE,EAA3C;MAAA,uBACE,KAAC,MAAD;QACE,OAAO,EAAEE,OAAO,CAACC,GAAR,CAAaC,CAAD,KAAQ;UAC3BC,KAAK,EAAED,CADoB;UAE3BE,KAAK,EAAEF;QAFoB,CAAR,CAAZ,CADX;QAKE,KAAK,EAAEF,OAAO,CAACK,IAAR,CAAcC,IAAD,IAAUA,IAAI,KAAKR,IAAhC,CALT;QAME,QAAQ,EAAGM,KAAD,IAAWP,QAAQ,mBAAMD,KAAK,CAACG,KAAZ;UAAmBD,IAAI,EAAEM,KAAK,CAACA;QAA/B,GAN/B;QAOE,KAAK,EAAE;MAPT;IADF,EADF,EAYGN,IAAI,KAAK,QAAT,iBACC,KAAC,WAAD;MAAa,KAAK,EAAC,OAAnB;MAA2B,UAAU,EAAE,EAAvC;MAAA,uBACE,KAAC,KAAD;QACE,IAAI,EAAC,QADP;QAEE,IAAI,EAAC,OAFP;QAGE,KAAK,mBAAEF,KAAK,CAACG,KAAR,kDAAE,cAAaQ,KAHtB;QAIE,KAAK,EAAE,EAJT;QAKE,QAAQ,EAAGC,CAAD,IACRX,QAAQ,mBAAMD,KAAK,CAACG,KAAZ;UAAmBQ,KAAK,EAAEC,CAAC,CAACC,aAAF,CAAgBL,KAAhB,GAAwBM,QAAQ,CAACF,CAAC,CAACC,aAAF,CAAgBL,KAAjB,EAAwB,EAAxB,CAAhC,GAA8D;QAAxF,GANZ;QAQE,WAAW,EAAC;MARd;IADF,EAbJ;EAAA,EADF;AA6BD;AAED,MAAMJ,OAAkC,GAAG,CAAC,QAAD,EAAW,UAAX,CAA3C"},"metadata":{},"sourceType":"module"}