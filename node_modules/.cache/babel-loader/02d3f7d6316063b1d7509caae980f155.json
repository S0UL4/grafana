{"ast":null,"code":"import { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\nimport { GRAFANA_RULES_SOURCE_NAME, isGrafanaRulesSource } from './datasource';\n\nfunction getRulesSourceType(alertManagerSourceName) {\n  return isGrafanaRulesSource(alertManagerSourceName) ? 'grafana' : 'external';\n}\n\nexport const instancesPermissions = {\n  read: {\n    grafana: AccessControlAction.AlertingInstanceRead,\n    external: AccessControlAction.AlertingInstancesExternalRead\n  },\n  create: {\n    grafana: AccessControlAction.AlertingInstanceCreate,\n    external: AccessControlAction.AlertingInstancesExternalWrite\n  },\n  update: {\n    grafana: AccessControlAction.AlertingInstanceUpdate,\n    external: AccessControlAction.AlertingInstancesExternalWrite\n  },\n  delete: {\n    grafana: AccessControlAction.AlertingInstanceUpdate,\n    external: AccessControlAction.AlertingInstancesExternalWrite\n  }\n};\nexport const notificationsPermissions = {\n  read: {\n    grafana: AccessControlAction.AlertingNotificationsRead,\n    external: AccessControlAction.AlertingNotificationsExternalRead\n  },\n  create: {\n    grafana: AccessControlAction.AlertingNotificationsWrite,\n    external: AccessControlAction.AlertingNotificationsExternalWrite\n  },\n  update: {\n    grafana: AccessControlAction.AlertingNotificationsWrite,\n    external: AccessControlAction.AlertingNotificationsExternalWrite\n  },\n  delete: {\n    grafana: AccessControlAction.AlertingNotificationsWrite,\n    external: AccessControlAction.AlertingNotificationsExternalWrite\n  }\n};\nconst rulesPermissions = {\n  read: {\n    grafana: AccessControlAction.AlertingRuleRead,\n    external: AccessControlAction.AlertingRuleExternalRead\n  },\n  create: {\n    grafana: AccessControlAction.AlertingRuleCreate,\n    external: AccessControlAction.AlertingRuleExternalWrite\n  },\n  update: {\n    grafana: AccessControlAction.AlertingRuleUpdate,\n    external: AccessControlAction.AlertingRuleExternalWrite\n  },\n  delete: {\n    grafana: AccessControlAction.AlertingRuleDelete,\n    external: AccessControlAction.AlertingRuleExternalWrite\n  }\n};\nexport function getInstancesPermissions(rulesSourceName) {\n  const sourceType = getRulesSourceType(rulesSourceName);\n  return {\n    read: instancesPermissions.read[sourceType],\n    create: instancesPermissions.create[sourceType],\n    update: instancesPermissions.update[sourceType],\n    delete: instancesPermissions.delete[sourceType]\n  };\n}\nexport function getNotificationsPermissions(rulesSourceName) {\n  const sourceType = getRulesSourceType(rulesSourceName);\n  return {\n    read: notificationsPermissions.read[sourceType],\n    create: notificationsPermissions.create[sourceType],\n    update: notificationsPermissions.update[sourceType],\n    delete: notificationsPermissions.delete[sourceType]\n  };\n}\nexport function getRulesPermissions(rulesSourceName) {\n  const sourceType = getRulesSourceType(rulesSourceName);\n  return {\n    read: rulesPermissions.read[sourceType],\n    create: rulesPermissions.create[sourceType],\n    update: rulesPermissions.update[sourceType],\n    delete: rulesPermissions.delete[sourceType]\n  };\n}\nexport function evaluateAccess(actions, fallBackUserRoles) {\n  return () => {\n    return contextSrv.evaluatePermission(() => fallBackUserRoles, actions);\n  };\n}\nexport function getRulesAccess() {\n  return {\n    canCreateGrafanaRules: contextSrv.hasAccess(AccessControlAction.FoldersRead, contextSrv.hasEditPermissionInFolders) && contextSrv.hasAccess(rulesPermissions.create.grafana, contextSrv.hasEditPermissionInFolders),\n    canCreateCloudRules: contextSrv.hasAccess(AccessControlAction.DataSourcesRead, contextSrv.isEditor) && contextSrv.hasAccess(rulesPermissions.create.external, contextSrv.isEditor),\n    canEditRules: rulesSourceName => {\n      const permissionFallback = rulesSourceName === GRAFANA_RULES_SOURCE_NAME ? contextSrv.hasEditPermissionInFolders : contextSrv.isEditor;\n      return contextSrv.hasAccess(getRulesPermissions(rulesSourceName).update, permissionFallback);\n    }\n  };\n}","map":{"version":3,"names":["contextSrv","AccessControlAction","GRAFANA_RULES_SOURCE_NAME","isGrafanaRulesSource","getRulesSourceType","alertManagerSourceName","instancesPermissions","read","grafana","AlertingInstanceRead","external","AlertingInstancesExternalRead","create","AlertingInstanceCreate","AlertingInstancesExternalWrite","update","AlertingInstanceUpdate","delete","notificationsPermissions","AlertingNotificationsRead","AlertingNotificationsExternalRead","AlertingNotificationsWrite","AlertingNotificationsExternalWrite","rulesPermissions","AlertingRuleRead","AlertingRuleExternalRead","AlertingRuleCreate","AlertingRuleExternalWrite","AlertingRuleUpdate","AlertingRuleDelete","getInstancesPermissions","rulesSourceName","sourceType","getNotificationsPermissions","getRulesPermissions","evaluateAccess","actions","fallBackUserRoles","evaluatePermission","getRulesAccess","canCreateGrafanaRules","hasAccess","FoldersRead","hasEditPermissionInFolders","canCreateCloudRules","DataSourcesRead","isEditor","canEditRules","permissionFallback"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/utils/access-control.ts"],"sourcesContent":["import { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\nimport { GRAFANA_RULES_SOURCE_NAME, isGrafanaRulesSource } from './datasource';\n\ntype RulesSourceType = 'grafana' | 'external';\n\nfunction getRulesSourceType(alertManagerSourceName: string): RulesSourceType {\n  return isGrafanaRulesSource(alertManagerSourceName) ? 'grafana' : 'external';\n}\n\nexport const instancesPermissions = {\n  read: {\n    grafana: AccessControlAction.AlertingInstanceRead,\n    external: AccessControlAction.AlertingInstancesExternalRead,\n  },\n  create: {\n    grafana: AccessControlAction.AlertingInstanceCreate,\n    external: AccessControlAction.AlertingInstancesExternalWrite,\n  },\n  update: {\n    grafana: AccessControlAction.AlertingInstanceUpdate,\n    external: AccessControlAction.AlertingInstancesExternalWrite,\n  },\n  delete: {\n    grafana: AccessControlAction.AlertingInstanceUpdate,\n    external: AccessControlAction.AlertingInstancesExternalWrite,\n  },\n};\n\nexport const notificationsPermissions = {\n  read: {\n    grafana: AccessControlAction.AlertingNotificationsRead,\n    external: AccessControlAction.AlertingNotificationsExternalRead,\n  },\n  create: {\n    grafana: AccessControlAction.AlertingNotificationsWrite,\n    external: AccessControlAction.AlertingNotificationsExternalWrite,\n  },\n  update: {\n    grafana: AccessControlAction.AlertingNotificationsWrite,\n    external: AccessControlAction.AlertingNotificationsExternalWrite,\n  },\n  delete: {\n    grafana: AccessControlAction.AlertingNotificationsWrite,\n    external: AccessControlAction.AlertingNotificationsExternalWrite,\n  },\n};\n\nconst rulesPermissions = {\n  read: {\n    grafana: AccessControlAction.AlertingRuleRead,\n    external: AccessControlAction.AlertingRuleExternalRead,\n  },\n  create: {\n    grafana: AccessControlAction.AlertingRuleCreate,\n    external: AccessControlAction.AlertingRuleExternalWrite,\n  },\n  update: {\n    grafana: AccessControlAction.AlertingRuleUpdate,\n    external: AccessControlAction.AlertingRuleExternalWrite,\n  },\n  delete: {\n    grafana: AccessControlAction.AlertingRuleDelete,\n    external: AccessControlAction.AlertingRuleExternalWrite,\n  },\n};\n\nexport function getInstancesPermissions(rulesSourceName: string) {\n  const sourceType = getRulesSourceType(rulesSourceName);\n\n  return {\n    read: instancesPermissions.read[sourceType],\n    create: instancesPermissions.create[sourceType],\n    update: instancesPermissions.update[sourceType],\n    delete: instancesPermissions.delete[sourceType],\n  };\n}\n\nexport function getNotificationsPermissions(rulesSourceName: string) {\n  const sourceType = getRulesSourceType(rulesSourceName);\n\n  return {\n    read: notificationsPermissions.read[sourceType],\n    create: notificationsPermissions.create[sourceType],\n    update: notificationsPermissions.update[sourceType],\n    delete: notificationsPermissions.delete[sourceType],\n  };\n}\n\nexport function getRulesPermissions(rulesSourceName: string) {\n  const sourceType = getRulesSourceType(rulesSourceName);\n\n  return {\n    read: rulesPermissions.read[sourceType],\n    create: rulesPermissions.create[sourceType],\n    update: rulesPermissions.update[sourceType],\n    delete: rulesPermissions.delete[sourceType],\n  };\n}\n\nexport function evaluateAccess(actions: AccessControlAction[], fallBackUserRoles: string[]) {\n  return () => {\n    return contextSrv.evaluatePermission(() => fallBackUserRoles, actions);\n  };\n}\n\nexport function getRulesAccess() {\n  return {\n    canCreateGrafanaRules:\n      contextSrv.hasAccess(AccessControlAction.FoldersRead, contextSrv.hasEditPermissionInFolders) &&\n      contextSrv.hasAccess(rulesPermissions.create.grafana, contextSrv.hasEditPermissionInFolders),\n    canCreateCloudRules:\n      contextSrv.hasAccess(AccessControlAction.DataSourcesRead, contextSrv.isEditor) &&\n      contextSrv.hasAccess(rulesPermissions.create.external, contextSrv.isEditor),\n    canEditRules: (rulesSourceName: string) => {\n      const permissionFallback =\n        rulesSourceName === GRAFANA_RULES_SOURCE_NAME ? contextSrv.hasEditPermissionInFolders : contextSrv.isEditor;\n      return contextSrv.hasAccess(getRulesPermissions(rulesSourceName).update, permissionFallback);\n    },\n  };\n}\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,+BAA3B;AACA,SAASC,mBAAT,QAAoC,WAApC;AAEA,SAASC,yBAAT,EAAoCC,oBAApC,QAAgE,cAAhE;;AAIA,SAASC,kBAAT,CAA4BC,sBAA5B,EAA6E;EAC3E,OAAOF,oBAAoB,CAACE,sBAAD,CAApB,GAA+C,SAA/C,GAA2D,UAAlE;AACD;;AAED,OAAO,MAAMC,oBAAoB,GAAG;EAClCC,IAAI,EAAE;IACJC,OAAO,EAAEP,mBAAmB,CAACQ,oBADzB;IAEJC,QAAQ,EAAET,mBAAmB,CAACU;EAF1B,CAD4B;EAKlCC,MAAM,EAAE;IACNJ,OAAO,EAAEP,mBAAmB,CAACY,sBADvB;IAENH,QAAQ,EAAET,mBAAmB,CAACa;EAFxB,CAL0B;EASlCC,MAAM,EAAE;IACNP,OAAO,EAAEP,mBAAmB,CAACe,sBADvB;IAENN,QAAQ,EAAET,mBAAmB,CAACa;EAFxB,CAT0B;EAalCG,MAAM,EAAE;IACNT,OAAO,EAAEP,mBAAmB,CAACe,sBADvB;IAENN,QAAQ,EAAET,mBAAmB,CAACa;EAFxB;AAb0B,CAA7B;AAmBP,OAAO,MAAMI,wBAAwB,GAAG;EACtCX,IAAI,EAAE;IACJC,OAAO,EAAEP,mBAAmB,CAACkB,yBADzB;IAEJT,QAAQ,EAAET,mBAAmB,CAACmB;EAF1B,CADgC;EAKtCR,MAAM,EAAE;IACNJ,OAAO,EAAEP,mBAAmB,CAACoB,0BADvB;IAENX,QAAQ,EAAET,mBAAmB,CAACqB;EAFxB,CAL8B;EAStCP,MAAM,EAAE;IACNP,OAAO,EAAEP,mBAAmB,CAACoB,0BADvB;IAENX,QAAQ,EAAET,mBAAmB,CAACqB;EAFxB,CAT8B;EAatCL,MAAM,EAAE;IACNT,OAAO,EAAEP,mBAAmB,CAACoB,0BADvB;IAENX,QAAQ,EAAET,mBAAmB,CAACqB;EAFxB;AAb8B,CAAjC;AAmBP,MAAMC,gBAAgB,GAAG;EACvBhB,IAAI,EAAE;IACJC,OAAO,EAAEP,mBAAmB,CAACuB,gBADzB;IAEJd,QAAQ,EAAET,mBAAmB,CAACwB;EAF1B,CADiB;EAKvBb,MAAM,EAAE;IACNJ,OAAO,EAAEP,mBAAmB,CAACyB,kBADvB;IAENhB,QAAQ,EAAET,mBAAmB,CAAC0B;EAFxB,CALe;EASvBZ,MAAM,EAAE;IACNP,OAAO,EAAEP,mBAAmB,CAAC2B,kBADvB;IAENlB,QAAQ,EAAET,mBAAmB,CAAC0B;EAFxB,CATe;EAavBV,MAAM,EAAE;IACNT,OAAO,EAAEP,mBAAmB,CAAC4B,kBADvB;IAENnB,QAAQ,EAAET,mBAAmB,CAAC0B;EAFxB;AAbe,CAAzB;AAmBA,OAAO,SAASG,uBAAT,CAAiCC,eAAjC,EAA0D;EAC/D,MAAMC,UAAU,GAAG5B,kBAAkB,CAAC2B,eAAD,CAArC;EAEA,OAAO;IACLxB,IAAI,EAAED,oBAAoB,CAACC,IAArB,CAA0ByB,UAA1B,CADD;IAELpB,MAAM,EAAEN,oBAAoB,CAACM,MAArB,CAA4BoB,UAA5B,CAFH;IAGLjB,MAAM,EAAET,oBAAoB,CAACS,MAArB,CAA4BiB,UAA5B,CAHH;IAILf,MAAM,EAAEX,oBAAoB,CAACW,MAArB,CAA4Be,UAA5B;EAJH,CAAP;AAMD;AAED,OAAO,SAASC,2BAAT,CAAqCF,eAArC,EAA8D;EACnE,MAAMC,UAAU,GAAG5B,kBAAkB,CAAC2B,eAAD,CAArC;EAEA,OAAO;IACLxB,IAAI,EAAEW,wBAAwB,CAACX,IAAzB,CAA8ByB,UAA9B,CADD;IAELpB,MAAM,EAAEM,wBAAwB,CAACN,MAAzB,CAAgCoB,UAAhC,CAFH;IAGLjB,MAAM,EAAEG,wBAAwB,CAACH,MAAzB,CAAgCiB,UAAhC,CAHH;IAILf,MAAM,EAAEC,wBAAwB,CAACD,MAAzB,CAAgCe,UAAhC;EAJH,CAAP;AAMD;AAED,OAAO,SAASE,mBAAT,CAA6BH,eAA7B,EAAsD;EAC3D,MAAMC,UAAU,GAAG5B,kBAAkB,CAAC2B,eAAD,CAArC;EAEA,OAAO;IACLxB,IAAI,EAAEgB,gBAAgB,CAAChB,IAAjB,CAAsByB,UAAtB,CADD;IAELpB,MAAM,EAAEW,gBAAgB,CAACX,MAAjB,CAAwBoB,UAAxB,CAFH;IAGLjB,MAAM,EAAEQ,gBAAgB,CAACR,MAAjB,CAAwBiB,UAAxB,CAHH;IAILf,MAAM,EAAEM,gBAAgB,CAACN,MAAjB,CAAwBe,UAAxB;EAJH,CAAP;AAMD;AAED,OAAO,SAASG,cAAT,CAAwBC,OAAxB,EAAwDC,iBAAxD,EAAqF;EAC1F,OAAO,MAAM;IACX,OAAOrC,UAAU,CAACsC,kBAAX,CAA8B,MAAMD,iBAApC,EAAuDD,OAAvD,CAAP;EACD,CAFD;AAGD;AAED,OAAO,SAASG,cAAT,GAA0B;EAC/B,OAAO;IACLC,qBAAqB,EACnBxC,UAAU,CAACyC,SAAX,CAAqBxC,mBAAmB,CAACyC,WAAzC,EAAsD1C,UAAU,CAAC2C,0BAAjE,KACA3C,UAAU,CAACyC,SAAX,CAAqBlB,gBAAgB,CAACX,MAAjB,CAAwBJ,OAA7C,EAAsDR,UAAU,CAAC2C,0BAAjE,CAHG;IAILC,mBAAmB,EACjB5C,UAAU,CAACyC,SAAX,CAAqBxC,mBAAmB,CAAC4C,eAAzC,EAA0D7C,UAAU,CAAC8C,QAArE,KACA9C,UAAU,CAACyC,SAAX,CAAqBlB,gBAAgB,CAACX,MAAjB,CAAwBF,QAA7C,EAAuDV,UAAU,CAAC8C,QAAlE,CANG;IAOLC,YAAY,EAAGhB,eAAD,IAA6B;MACzC,MAAMiB,kBAAkB,GACtBjB,eAAe,KAAK7B,yBAApB,GAAgDF,UAAU,CAAC2C,0BAA3D,GAAwF3C,UAAU,CAAC8C,QADrG;MAEA,OAAO9C,UAAU,CAACyC,SAAX,CAAqBP,mBAAmB,CAACH,eAAD,CAAnB,CAAqChB,MAA1D,EAAkEiC,kBAAlE,CAAP;IACD;EAXI,CAAP;AAaD"},"metadata":{},"sourceType":"module"}