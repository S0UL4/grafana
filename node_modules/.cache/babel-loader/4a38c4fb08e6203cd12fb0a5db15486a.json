{"ast":null,"code":"var _div, _div2, _a;\n\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\nimport { config } from '@grafana/runtime';\nimport { Alert, InlineField, InlineFieldRow, useStyles2 } from '@grafana/ui';\nimport { AdHocFilter } from '../../../../features/variables/adhoc/picker/AdHocFilter';\nimport { getDS } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function ServiceGraphSection({\n  graphDatasourceUid,\n  query,\n  onChange\n}) {\n  const styles = useStyles2(getStyles);\n  const dsState = useAsync(() => getDS(graphDatasourceUid), [graphDatasourceUid]); // Check if service graph metrics are being collected. If not, displays a warning\n\n  const [hasKeys, setHasKeys] = useState(undefined);\n  useEffect(() => {\n    async function fn(ds) {\n      const keys = await ds.getTagKeys({\n        series: ['traces_service_graph_request_server_seconds_sum', 'traces_service_graph_request_total', 'traces_service_graph_request_failed_total']\n      });\n      setHasKeys(Boolean(keys.length));\n    }\n\n    if (!dsState.loading && dsState.value) {\n      fn(dsState.value);\n    }\n  }, [dsState]);\n\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value;\n\n  if (!graphDatasourceUid) {\n    return _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n      className: \"text-warning\",\n      children: \"Please set up a service graph datasource in the datasource settings.\"\n    }));\n  }\n\n  if (graphDatasourceUid && !ds) {\n    return _div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n      className: \"text-warning\",\n      children: \"Service graph datasource is configured but the data source no longer exists. Please configure existing data source to use the service graph functionality.\"\n    }));\n  }\n\n  const filters = queryToFilter(query.serviceMapQuery || '');\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Filter\",\n        labelWidth: 14,\n        grow: true,\n        children: /*#__PURE__*/_jsx(AdHocFilter, {\n          datasource: {\n            uid: graphDatasourceUid\n          },\n          filters: filters,\n          getTagKeysOptions: {\n            series: config.featureToggles.tempoApmTable ? ['traces_service_graph_request_total', 'traces_spanmetrics_calls_total'] : ['traces_service_graph_request_total']\n          },\n          addFilter: filter => {\n            onChange(Object.assign({}, query, {\n              serviceMapQuery: filtersToQuery([...filters, filter])\n            }));\n          },\n          removeFilter: index => {\n            const newFilters = [...filters];\n            newFilters.splice(index, 1);\n            onChange(Object.assign({}, query, {\n              serviceMapQuery: filtersToQuery(newFilters)\n            }));\n          },\n          changeFilter: (index, filter) => {\n            const newFilters = [...filters];\n            newFilters.splice(index, 1, filter);\n            onChange(Object.assign({}, query, {\n              serviceMapQuery: filtersToQuery(newFilters)\n            }));\n          }\n        })\n      })\n    }), hasKeys === false ? /*#__PURE__*/_jsxs(Alert, {\n      title: \"No service graph data found\",\n      severity: \"info\",\n      className: styles.alert,\n      children: [\"Please ensure that service graph metrics are set up correctly according to the\", ' ', _a || (_a = /*#__PURE__*/_jsx(\"a\", {\n        target: \"_blank\",\n        rel: \"noreferrer noopener\",\n        href: \"https://grafana.com/docs/tempo/next/grafana-agent/service-graphs/\",\n        children: \"Tempo documentation\"\n      })), \".\"]\n    }) : null]\n  });\n}\n\nfunction queryToFilter(query) {\n  let match;\n  let filters = [];\n  const re = /([\\w_]+)(=|!=|<|>|=~|!~)\"(.*?)\"/g;\n\n  while ((match = re.exec(query)) !== null) {\n    filters.push({\n      key: match[1],\n      operator: match[2],\n      value: match[3],\n      condition: ''\n    });\n  }\n\n  return filters;\n}\n\nfunction filtersToQuery(filters) {\n  return `{${filters.map(f => `${f.key}${f.operator}\"${f.value}\"`).join(',')}}`;\n}\n\nconst getStyles = theme => ({\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `\n});","map":{"version":3,"names":["css","React","useEffect","useState","useAsync","config","Alert","InlineField","InlineFieldRow","useStyles2","AdHocFilter","getDS","ServiceGraphSection","graphDatasourceUid","query","onChange","styles","getStyles","dsState","hasKeys","setHasKeys","undefined","fn","ds","keys","getTagKeys","series","Boolean","length","loading","value","filters","queryToFilter","serviceMapQuery","uid","featureToggles","tempoApmTable","filter","filtersToQuery","index","newFilters","splice","alert","match","re","exec","push","key","operator","condition","map","f","join","theme","spacing"],"sources":["/home/soula/grafana/public/app/plugins/datasource/tempo/QueryEditor/ServiceGraphSection.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, InlineField, InlineFieldRow, useStyles2 } from '@grafana/ui';\n\nimport { AdHocFilter } from '../../../../features/variables/adhoc/picker/AdHocFilter';\nimport { AdHocVariableFilter } from '../../../../features/variables/types';\nimport { PrometheusDatasource } from '../../prometheus/datasource';\nimport { TempoQuery } from '../datasource';\n\nimport { getDS } from './utils';\n\nexport function ServiceGraphSection({\n  graphDatasourceUid,\n  query,\n  onChange,\n}: {\n  graphDatasourceUid?: string;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const dsState = useAsync(() => getDS(graphDatasourceUid), [graphDatasourceUid]);\n\n  // Check if service graph metrics are being collected. If not, displays a warning\n  const [hasKeys, setHasKeys] = useState<boolean | undefined>(undefined);\n  useEffect(() => {\n    async function fn(ds: PrometheusDatasource) {\n      const keys = await ds.getTagKeys({\n        series: [\n          'traces_service_graph_request_server_seconds_sum',\n          'traces_service_graph_request_total',\n          'traces_service_graph_request_failed_total',\n        ],\n      });\n      setHasKeys(Boolean(keys.length));\n    }\n    if (!dsState.loading && dsState.value) {\n      fn(dsState.value as PrometheusDatasource);\n    }\n  }, [dsState]);\n\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value as PrometheusDatasource;\n\n  if (!graphDatasourceUid) {\n    return <div className=\"text-warning\">Please set up a service graph datasource in the datasource settings.</div>;\n  }\n\n  if (graphDatasourceUid && !ds) {\n    return (\n      <div className=\"text-warning\">\n        Service graph datasource is configured but the data source no longer exists. Please configure existing data\n        source to use the service graph functionality.\n      </div>\n    );\n  }\n  const filters = queryToFilter(query.serviceMapQuery || '');\n\n  return (\n    <div>\n      <InlineFieldRow>\n        <InlineField label=\"Filter\" labelWidth={14} grow>\n          <AdHocFilter\n            datasource={{ uid: graphDatasourceUid }}\n            filters={filters}\n            getTagKeysOptions={{\n              series: config.featureToggles.tempoApmTable\n                ? ['traces_service_graph_request_total', 'traces_spanmetrics_calls_total']\n                : ['traces_service_graph_request_total'],\n            }}\n            addFilter={(filter: AdHocVariableFilter) => {\n              onChange({\n                ...query,\n                serviceMapQuery: filtersToQuery([...filters, filter]),\n              });\n            }}\n            removeFilter={(index: number) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n            changeFilter={(index: number, filter: AdHocVariableFilter) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1, filter);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {hasKeys === false ? (\n        <Alert title=\"No service graph data found\" severity=\"info\" className={styles.alert}>\n          Please ensure that service graph metrics are set up correctly according to the{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            href=\"https://grafana.com/docs/tempo/next/grafana-agent/service-graphs/\"\n          >\n            Tempo documentation\n          </a>\n          .\n        </Alert>\n      ) : null}\n    </div>\n  );\n}\n\nfunction queryToFilter(query: string): AdHocVariableFilter[] {\n  let match;\n  let filters: AdHocVariableFilter[] = [];\n  const re = /([\\w_]+)(=|!=|<|>|=~|!~)\"(.*?)\"/g;\n  while ((match = re.exec(query)) !== null) {\n    filters.push({\n      key: match[1],\n      operator: match[2],\n      value: match[3],\n      condition: '',\n    });\n  }\n  return filters;\n}\n\nfunction filtersToQuery(filters: AdHocVariableFilter[]): string {\n  return `{${filters.map((f) => `${f.key}${f.operator}\"${f.value}\"`).join(',')}}`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}