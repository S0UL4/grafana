{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Icon, Input, FieldValidationMessage, useStyles } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const QueryEditorRowHeader = props => {\n  const {\n    query,\n    queries,\n    onClick,\n    onChange,\n    collapsedText,\n    renderExtras,\n    disabled\n  } = props;\n  const styles = useStyles(getStyles);\n  const [isEditing, setIsEditing] = useState(false);\n  const [validationError, setValidationError] = useState(null);\n\n  const onEditQuery = event => {\n    setIsEditing(true);\n  };\n\n  const onEndEditName = newName => {\n    setIsEditing(false); // Ignore change if invalid\n\n    if (validationError) {\n      setValidationError(null);\n      return;\n    }\n\n    if (query.refId !== newName) {\n      onChange(Object.assign({}, query, {\n        refId: newName\n      }));\n    }\n  };\n\n  const onInputChange = event => {\n    const newName = event.currentTarget.value.trim();\n\n    if (newName.length === 0) {\n      setValidationError('An empty query name is not allowed');\n      return;\n    }\n\n    for (const otherQuery of queries) {\n      if (otherQuery !== query && newName === otherQuery.refId) {\n        setValidationError('Query name already exists');\n        return;\n      }\n    }\n\n    if (validationError) {\n      setValidationError(null);\n    }\n  };\n\n  const onEditQueryBlur = event => {\n    onEndEditName(event.currentTarget.value.trim());\n  };\n\n  const onKeyDown = event => {\n    if (event.key === 'Enter') {\n      onEndEditName(event.target.value);\n    }\n  };\n\n  const onFocus = event => {\n    event.target.select();\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.wrapper,\n      children: [!isEditing && /*#__PURE__*/_jsxs(\"button\", {\n        className: styles.queryNameWrapper,\n        \"aria-label\": selectors.components.QueryEditorRow.title(query.refId),\n        title: \"Edit query name\",\n        onClick: onEditQuery,\n        \"data-testid\": \"query-name-div\",\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          className: styles.queryName,\n          children: query.refId\n        }), /*#__PURE__*/_jsx(Icon, {\n          name: \"pen\",\n          className: styles.queryEditIcon,\n          size: \"sm\"\n        })]\n      }), isEditing && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          defaultValue: query.refId,\n          onBlur: onEditQueryBlur,\n          autoFocus: true,\n          onKeyDown: onKeyDown,\n          onFocus: onFocus,\n          invalid: validationError !== null,\n          onChange: onInputChange,\n          className: styles.queryNameInput,\n          \"data-testid\": \"query-name-input\"\n        }), validationError && /*#__PURE__*/_jsx(FieldValidationMessage, {\n          horizontal: true,\n          children: validationError\n        })]\n      }), renderDataSource(props, styles), renderExtras && /*#__PURE__*/_jsx(\"div\", {\n        className: styles.itemWrapper,\n        children: renderExtras()\n      }), disabled && /*#__PURE__*/_jsx(\"em\", {\n        className: styles.contextInfo,\n        children: \"Disabled\"\n      })]\n    }), collapsedText && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.collapsedText,\n      onClick: onClick,\n      children: collapsedText\n    })]\n  });\n};\n\nconst renderDataSource = (props, styles) => {\n  const {\n    alerting,\n    dataSource,\n    onChangeDataSource\n  } = props;\n\n  if (!onChangeDataSource) {\n    return /*#__PURE__*/_jsxs(\"em\", {\n      className: styles.contextInfo,\n      children: [\"(\", dataSource.name, \")\"]\n    });\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.itemWrapper,\n    children: /*#__PURE__*/_jsx(DataSourcePicker, {\n      variables: true,\n      alerting: alerting,\n      current: dataSource.name,\n      onChange: onChangeDataSource\n    })\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    wrapper: css`\n      label: Wrapper;\n      display: flex;\n      align-items: center;\n      margin-left: ${theme.spacing.xs};\n    `,\n    queryNameWrapper: css`\n      display: flex;\n      cursor: pointer;\n      border: 1px solid transparent;\n      border-radius: ${theme.border.radius.md};\n      align-items: center;\n      padding: 0 0 0 ${theme.spacing.xs};\n      margin: 0;\n      background: transparent;\n\n      &:hover {\n        background: ${theme.colors.bg3};\n        border: 1px dashed ${theme.colors.border3};\n      }\n\n      &:focus {\n        border: 2px solid ${theme.colors.formInputBorderActive};\n      }\n\n      &:hover,\n      &:focus {\n        .query-name-edit-icon {\n          visibility: visible;\n        }\n      }\n    `,\n    queryName: css`\n      font-weight: ${theme.typography.weight.semibold};\n      color: ${theme.colors.textBlue};\n      cursor: pointer;\n      overflow: hidden;\n      margin-left: ${theme.spacing.xs};\n    `,\n    queryEditIcon: cx(css`\n        margin-left: ${theme.spacing.md};\n        visibility: hidden;\n      `, 'query-name-edit-icon'),\n    queryNameInput: css`\n      max-width: 300px;\n      margin: -4px 0;\n    `,\n    collapsedText: css`\n      font-weight: ${theme.typography.weight.regular};\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.textWeak};\n      padding-left: ${theme.spacing.sm};\n      align-items: center;\n      overflow: hidden;\n      font-style: italic;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    `,\n    contextInfo: css`\n      font-size: ${theme.typography.size.sm};\n      font-style: italic;\n      color: ${theme.colors.textWeak};\n      padding-left: 10px;\n    `,\n    itemWrapper: css`\n      display: flex;\n      margin-left: 4px;\n    `\n  };\n};","map":{"version":3,"names":["css","cx","React","useState","selectors","DataSourcePicker","Icon","Input","FieldValidationMessage","useStyles","QueryEditorRowHeader","props","query","queries","onClick","onChange","collapsedText","renderExtras","disabled","styles","getStyles","isEditing","setIsEditing","validationError","setValidationError","onEditQuery","event","onEndEditName","newName","refId","onInputChange","currentTarget","value","trim","length","otherQuery","onEditQueryBlur","onKeyDown","key","target","onFocus","select","wrapper","queryNameWrapper","components","QueryEditorRow","title","queryName","queryEditIcon","queryNameInput","renderDataSource","itemWrapper","contextInfo","alerting","dataSource","onChangeDataSource","name","theme","spacing","xs","border","radius","md","colors","bg3","border3","formInputBorderActive","typography","weight","semibold","textBlue","regular","size","sm","textWeak"],"sources":["/home/soula/grafana/public/app/features/query/components/QueryEditorRowHeader.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { ReactNode, useState } from 'react';\n\nimport { DataQuery, DataSourceInstanceSettings, GrafanaTheme } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Icon, Input, FieldValidationMessage, useStyles } from '@grafana/ui';\n\nexport interface Props<TQuery extends DataQuery = DataQuery> {\n  query: TQuery;\n  queries: TQuery[];\n  disabled?: boolean;\n  dataSource: DataSourceInstanceSettings;\n  renderExtras?: () => ReactNode;\n  onChangeDataSource?: (settings: DataSourceInstanceSettings) => void;\n  onChange: (query: TQuery) => void;\n  onClick: (e: React.MouseEvent) => void;\n  collapsedText: string | null;\n  alerting?: boolean;\n}\n\nexport const QueryEditorRowHeader = <TQuery extends DataQuery>(props: Props<TQuery>) => {\n  const { query, queries, onClick, onChange, collapsedText, renderExtras, disabled } = props;\n\n  const styles = useStyles(getStyles);\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  const onEditQuery = (event: React.SyntheticEvent) => {\n    setIsEditing(true);\n  };\n\n  const onEndEditName = (newName: string) => {\n    setIsEditing(false);\n\n    // Ignore change if invalid\n    if (validationError) {\n      setValidationError(null);\n      return;\n    }\n\n    if (query.refId !== newName) {\n      onChange({\n        ...query,\n        refId: newName,\n      });\n    }\n  };\n\n  const onInputChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const newName = event.currentTarget.value.trim();\n\n    if (newName.length === 0) {\n      setValidationError('An empty query name is not allowed');\n      return;\n    }\n\n    for (const otherQuery of queries) {\n      if (otherQuery !== query && newName === otherQuery.refId) {\n        setValidationError('Query name already exists');\n        return;\n      }\n    }\n\n    if (validationError) {\n      setValidationError(null);\n    }\n  };\n\n  const onEditQueryBlur = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onEndEditName(event.currentTarget.value.trim());\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === 'Enter') {\n      onEndEditName((event.target as any).value);\n    }\n  };\n\n  const onFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.target.select();\n  };\n\n  return (\n    <>\n      <div className={styles.wrapper}>\n        {!isEditing && (\n          <button\n            className={styles.queryNameWrapper}\n            aria-label={selectors.components.QueryEditorRow.title(query.refId)}\n            title=\"Edit query name\"\n            onClick={onEditQuery}\n            data-testid=\"query-name-div\"\n          >\n            <span className={styles.queryName}>{query.refId}</span>\n            <Icon name=\"pen\" className={styles.queryEditIcon} size=\"sm\" />\n          </button>\n        )}\n\n        {isEditing && (\n          <>\n            <Input\n              type=\"text\"\n              defaultValue={query.refId}\n              onBlur={onEditQueryBlur}\n              autoFocus\n              onKeyDown={onKeyDown}\n              onFocus={onFocus}\n              invalid={validationError !== null}\n              onChange={onInputChange}\n              className={styles.queryNameInput}\n              data-testid=\"query-name-input\"\n            />\n            {validationError && <FieldValidationMessage horizontal>{validationError}</FieldValidationMessage>}\n          </>\n        )}\n        {renderDataSource(props, styles)}\n        {renderExtras && <div className={styles.itemWrapper}>{renderExtras()}</div>}\n        {disabled && <em className={styles.contextInfo}>Disabled</em>}\n      </div>\n\n      {collapsedText && (\n        <div className={styles.collapsedText} onClick={onClick}>\n          {collapsedText}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst renderDataSource = <TQuery extends DataQuery>(\n  props: Props<TQuery>,\n  styles: ReturnType<typeof getStyles>\n): ReactNode => {\n  const { alerting, dataSource, onChangeDataSource } = props;\n\n  if (!onChangeDataSource) {\n    return <em className={styles.contextInfo}>({dataSource.name})</em>;\n  }\n\n  return (\n    <div className={styles.itemWrapper}>\n      <DataSourcePicker variables={true} alerting={alerting} current={dataSource.name} onChange={onChangeDataSource} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      label: Wrapper;\n      display: flex;\n      align-items: center;\n      margin-left: ${theme.spacing.xs};\n    `,\n    queryNameWrapper: css`\n      display: flex;\n      cursor: pointer;\n      border: 1px solid transparent;\n      border-radius: ${theme.border.radius.md};\n      align-items: center;\n      padding: 0 0 0 ${theme.spacing.xs};\n      margin: 0;\n      background: transparent;\n\n      &:hover {\n        background: ${theme.colors.bg3};\n        border: 1px dashed ${theme.colors.border3};\n      }\n\n      &:focus {\n        border: 2px solid ${theme.colors.formInputBorderActive};\n      }\n\n      &:hover,\n      &:focus {\n        .query-name-edit-icon {\n          visibility: visible;\n        }\n      }\n    `,\n    queryName: css`\n      font-weight: ${theme.typography.weight.semibold};\n      color: ${theme.colors.textBlue};\n      cursor: pointer;\n      overflow: hidden;\n      margin-left: ${theme.spacing.xs};\n    `,\n    queryEditIcon: cx(\n      css`\n        margin-left: ${theme.spacing.md};\n        visibility: hidden;\n      `,\n      'query-name-edit-icon'\n    ),\n    queryNameInput: css`\n      max-width: 300px;\n      margin: -4px 0;\n    `,\n    collapsedText: css`\n      font-weight: ${theme.typography.weight.regular};\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.textWeak};\n      padding-left: ${theme.spacing.sm};\n      align-items: center;\n      overflow: hidden;\n      font-style: italic;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    `,\n    contextInfo: css`\n      font-size: ${theme.typography.size.sm};\n      font-style: italic;\n      color: ${theme.colors.textWeak};\n      padding-left: 10px;\n    `,\n    itemWrapper: css`\n      display: flex;\n      margin-left: 4px;\n    `,\n  };\n};\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,IAA2BC,QAA3B,QAA2C,OAA3C;AAGA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,sBAAtB,EAA8CC,SAA9C,QAA+D,aAA/D;;;;AAeA,OAAO,MAAMC,oBAAoB,GAA8BC,KAA3B,IAAoD;EACtF,MAAM;IAAEC,KAAF;IAASC,OAAT;IAAkBC,OAAlB;IAA2BC,QAA3B;IAAqCC,aAArC;IAAoDC,YAApD;IAAkEC;EAAlE,IAA+EP,KAArF;EAEA,MAAMQ,MAAM,GAAGV,SAAS,CAACW,SAAD,CAAxB;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAU,KAAV,CAA1C;EACA,MAAM,CAACoB,eAAD,EAAkBC,kBAAlB,IAAwCrB,QAAQ,CAAgB,IAAhB,CAAtD;;EAEA,MAAMsB,WAAW,GAAIC,KAAD,IAAiC;IACnDJ,YAAY,CAAC,IAAD,CAAZ;EACD,CAFD;;EAIA,MAAMK,aAAa,GAAIC,OAAD,IAAqB;IACzCN,YAAY,CAAC,KAAD,CAAZ,CADyC,CAGzC;;IACA,IAAIC,eAAJ,EAAqB;MACnBC,kBAAkB,CAAC,IAAD,CAAlB;MACA;IACD;;IAED,IAAIZ,KAAK,CAACiB,KAAN,KAAgBD,OAApB,EAA6B;MAC3Bb,QAAQ,mBACHH,KADG;QAENiB,KAAK,EAAED;MAFD,GAAR;IAID;EACF,CAfD;;EAiBA,MAAME,aAAa,GAAIJ,KAAD,IAAmD;IACvE,MAAME,OAAO,GAAGF,KAAK,CAACK,aAAN,CAAoBC,KAApB,CAA0BC,IAA1B,EAAhB;;IAEA,IAAIL,OAAO,CAACM,MAAR,KAAmB,CAAvB,EAA0B;MACxBV,kBAAkB,CAAC,oCAAD,CAAlB;MACA;IACD;;IAED,KAAK,MAAMW,UAAX,IAAyBtB,OAAzB,EAAkC;MAChC,IAAIsB,UAAU,KAAKvB,KAAf,IAAwBgB,OAAO,KAAKO,UAAU,CAACN,KAAnD,EAA0D;QACxDL,kBAAkB,CAAC,2BAAD,CAAlB;QACA;MACD;IACF;;IAED,IAAID,eAAJ,EAAqB;MACnBC,kBAAkB,CAAC,IAAD,CAAlB;IACD;EACF,CAlBD;;EAoBA,MAAMY,eAAe,GAAIV,KAAD,IAAmD;IACzEC,aAAa,CAACD,KAAK,CAACK,aAAN,CAAoBC,KAApB,CAA0BC,IAA1B,EAAD,CAAb;EACD,CAFD;;EAIA,MAAMI,SAAS,GAAIX,KAAD,IAAgC;IAChD,IAAIA,KAAK,CAACY,GAAN,KAAc,OAAlB,EAA2B;MACzBX,aAAa,CAAED,KAAK,CAACa,MAAP,CAAsBP,KAAvB,CAAb;IACD;EACF,CAJD;;EAMA,MAAMQ,OAAO,GAAId,KAAD,IAA+C;IAC7DA,KAAK,CAACa,MAAN,CAAaE,MAAb;EACD,CAFD;;EAIA,oBACE;IAAA,wBACE;MAAK,SAAS,EAAEtB,MAAM,CAACuB,OAAvB;MAAA,WACG,CAACrB,SAAD,iBACC;QACE,SAAS,EAAEF,MAAM,CAACwB,gBADpB;QAEE,cAAYvC,SAAS,CAACwC,UAAV,CAAqBC,cAArB,CAAoCC,KAApC,CAA0ClC,KAAK,CAACiB,KAAhD,CAFd;QAGE,KAAK,EAAC,iBAHR;QAIE,OAAO,EAAEJ,WAJX;QAKE,eAAY,gBALd;QAAA,wBAOE;UAAM,SAAS,EAAEN,MAAM,CAAC4B,SAAxB;UAAA,UAAoCnC,KAAK,CAACiB;QAA1C,EAPF,eAQE,KAAC,IAAD;UAAM,IAAI,EAAC,KAAX;UAAiB,SAAS,EAAEV,MAAM,CAAC6B,aAAnC;UAAkD,IAAI,EAAC;QAAvD,EARF;MAAA,EAFJ,EAcG3B,SAAS,iBACR;QAAA,wBACE,KAAC,KAAD;UACE,IAAI,EAAC,MADP;UAEE,YAAY,EAAET,KAAK,CAACiB,KAFtB;UAGE,MAAM,EAAEO,eAHV;UAIE,SAAS,MAJX;UAKE,SAAS,EAAEC,SALb;UAME,OAAO,EAAEG,OANX;UAOE,OAAO,EAAEjB,eAAe,KAAK,IAP/B;UAQE,QAAQ,EAAEO,aARZ;UASE,SAAS,EAAEX,MAAM,CAAC8B,cATpB;UAUE,eAAY;QAVd,EADF,EAaG1B,eAAe,iBAAI,KAAC,sBAAD;UAAwB,UAAU,MAAlC;UAAA,UAAoCA;QAApC,EAbtB;MAAA,EAfJ,EA+BG2B,gBAAgB,CAACvC,KAAD,EAAQQ,MAAR,CA/BnB,EAgCGF,YAAY,iBAAI;QAAK,SAAS,EAAEE,MAAM,CAACgC,WAAvB;QAAA,UAAqClC,YAAY;MAAjD,EAhCnB,EAiCGC,QAAQ,iBAAI;QAAI,SAAS,EAAEC,MAAM,CAACiC,WAAtB;QAAA;MAAA,EAjCf;IAAA,EADF,EAqCGpC,aAAa,iBACZ;MAAK,SAAS,EAAEG,MAAM,CAACH,aAAvB;MAAsC,OAAO,EAAEF,OAA/C;MAAA,UACGE;IADH,EAtCJ;EAAA,EADF;AA6CD,CA3GM;;AA6GP,MAAMkC,gBAAgB,GAAG,CACvBvC,KADuB,EAEvBQ,MAFuB,KAGT;EACd,MAAM;IAAEkC,QAAF;IAAYC,UAAZ;IAAwBC;EAAxB,IAA+C5C,KAArD;;EAEA,IAAI,CAAC4C,kBAAL,EAAyB;IACvB,oBAAO;MAAI,SAAS,EAAEpC,MAAM,CAACiC,WAAtB;MAAA,gBAAqCE,UAAU,CAACE,IAAhD;IAAA,EAAP;EACD;;EAED,oBACE;IAAK,SAAS,EAAErC,MAAM,CAACgC,WAAvB;IAAA,uBACE,KAAC,gBAAD;MAAkB,SAAS,EAAE,IAA7B;MAAmC,QAAQ,EAAEE,QAA7C;MAAuD,OAAO,EAAEC,UAAU,CAACE,IAA3E;MAAiF,QAAQ,EAAED;IAA3F;EADF,EADF;AAKD,CAfD;;AAiBA,MAAMnC,SAAS,GAAIqC,KAAD,IAAyB;EACzC,OAAO;IACLf,OAAO,EAAE1C,GAAI;AACjB;AACA;AACA;AACA,qBAAqByD,KAAK,CAACC,OAAN,CAAcC,EAAG;AACtC,KANS;IAOLhB,gBAAgB,EAAE3C,GAAI;AAC1B;AACA;AACA;AACA,uBAAuByD,KAAK,CAACG,MAAN,CAAaC,MAAb,CAAoBC,EAAG;AAC9C;AACA,uBAAuBL,KAAK,CAACC,OAAN,CAAcC,EAAG;AACxC;AACA;AACA;AACA;AACA,sBAAsBF,KAAK,CAACM,MAAN,CAAaC,GAAI;AACvC,6BAA6BP,KAAK,CAACM,MAAN,CAAaE,OAAQ;AAClD;AACA;AACA;AACA,4BAA4BR,KAAK,CAACM,MAAN,CAAaG,qBAAsB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAhCS;IAiCLnB,SAAS,EAAE/C,GAAI;AACnB,qBAAqByD,KAAK,CAACU,UAAN,CAAiBC,MAAjB,CAAwBC,QAAS;AACtD,eAAeZ,KAAK,CAACM,MAAN,CAAaO,QAAS;AACrC;AACA;AACA,qBAAqBb,KAAK,CAACC,OAAN,CAAcC,EAAG;AACtC,KAvCS;IAwCLX,aAAa,EAAE/C,EAAE,CACfD,GAAI;AACV,uBAAuByD,KAAK,CAACC,OAAN,CAAcI,EAAG;AACxC;AACA,OAJqB,EAKf,sBALe,CAxCZ;IA+CLb,cAAc,EAAEjD,GAAI;AACxB;AACA;AACA,KAlDS;IAmDLgB,aAAa,EAAEhB,GAAI;AACvB,qBAAqByD,KAAK,CAACU,UAAN,CAAiBC,MAAjB,CAAwBG,OAAQ;AACrD,mBAAmBd,KAAK,CAACU,UAAN,CAAiBK,IAAjB,CAAsBC,EAAG;AAC5C,eAAehB,KAAK,CAACM,MAAN,CAAaW,QAAS;AACrC,sBAAsBjB,KAAK,CAACC,OAAN,CAAce,EAAG;AACvC;AACA;AACA;AACA;AACA;AACA,KA7DS;IA8DLrB,WAAW,EAAEpD,GAAI;AACrB,mBAAmByD,KAAK,CAACU,UAAN,CAAiBK,IAAjB,CAAsBC,EAAG;AAC5C;AACA,eAAehB,KAAK,CAACM,MAAN,CAAaW,QAAS;AACrC;AACA,KAnES;IAoELvB,WAAW,EAAEnD,GAAI;AACrB;AACA;AACA;EAvES,CAAP;AAyED,CA1ED"},"metadata":{},"sourceType":"module"}