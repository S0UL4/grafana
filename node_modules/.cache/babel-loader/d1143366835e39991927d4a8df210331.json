{"ast":null,"code":"import { addOperationWithRangeVector } from './operations';\nimport { createAggregationOperation, createAggregationOperationWithParam, getPromAndLokiOperationDisplayName, getRangeVectorParamDef } from './shared/operationUtils';\nimport { PromVisualQueryOperationCategory, PromOperationId } from './types';\nexport function getAggregationOperations() {\n  return [...createAggregationOperation(PromOperationId.Sum), ...createAggregationOperation(PromOperationId.Avg), ...createAggregationOperation(PromOperationId.Min), ...createAggregationOperation(PromOperationId.Max), ...createAggregationOperation(PromOperationId.Count), ...createAggregationOperationWithParam(PromOperationId.TopK, {\n    params: [{\n      name: 'K-value',\n      type: 'number'\n    }],\n    defaultParams: [5]\n  }), ...createAggregationOperationWithParam(PromOperationId.BottomK, {\n    params: [{\n      name: 'K-value',\n      type: 'number'\n    }],\n    defaultParams: [5]\n  }), ...createAggregationOperationWithParam(PromOperationId.CountValues, {\n    params: [{\n      name: 'Identifier',\n      type: 'string'\n    }],\n    defaultParams: ['count']\n  }), createAggregationOverTime(PromOperationId.SumOverTime), createAggregationOverTime(PromOperationId.AvgOverTime), createAggregationOverTime(PromOperationId.MinOverTime), createAggregationOverTime(PromOperationId.MaxOverTime), createAggregationOverTime(PromOperationId.CountOverTime), createAggregationOverTime(PromOperationId.LastOverTime), createAggregationOverTime(PromOperationId.PresentOverTime), createAggregationOverTime(PromOperationId.AbsentOverTime), createAggregationOverTime(PromOperationId.StddevOverTime)];\n}\n\nfunction createAggregationOverTime(name) {\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: [getRangeVectorParamDef()],\n    defaultParams: ['$__interval'],\n    alternativesKey: 'overtime function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addOperationWithRangeVector\n  };\n}\n\nfunction operationWithRangeVectorRenderer(model, def, innerExpr) {\n  var _, _model$params;\n\n  let rangeVector = (_ = ((_model$params = model.params) !== null && _model$params !== void 0 ? _model$params : [])[0]) !== null && _ !== void 0 ? _ : '$__interval';\n  return `${def.id}(${innerExpr}[${rangeVector}])`;\n}","map":{"version":3,"names":["addOperationWithRangeVector","createAggregationOperation","createAggregationOperationWithParam","getPromAndLokiOperationDisplayName","getRangeVectorParamDef","PromVisualQueryOperationCategory","PromOperationId","getAggregationOperations","Sum","Avg","Min","Max","Count","TopK","params","name","type","defaultParams","BottomK","CountValues","createAggregationOverTime","SumOverTime","AvgOverTime","MinOverTime","MaxOverTime","CountOverTime","LastOverTime","PresentOverTime","AbsentOverTime","StddevOverTime","id","alternativesKey","category","RangeFunctions","renderer","operationWithRangeVectorRenderer","addOperationHandler","model","def","innerExpr","rangeVector"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/aggregations.ts"],"sourcesContent":["import { addOperationWithRangeVector } from './operations';\nimport {\n  createAggregationOperation,\n  createAggregationOperationWithParam,\n  getPromAndLokiOperationDisplayName,\n  getRangeVectorParamDef,\n} from './shared/operationUtils';\nimport { QueryBuilderOperation, QueryBuilderOperationDef } from './shared/types';\nimport { PromVisualQueryOperationCategory, PromOperationId } from './types';\n\nexport function getAggregationOperations(): QueryBuilderOperationDef[] {\n  return [\n    ...createAggregationOperation(PromOperationId.Sum),\n    ...createAggregationOperation(PromOperationId.Avg),\n    ...createAggregationOperation(PromOperationId.Min),\n    ...createAggregationOperation(PromOperationId.Max),\n    ...createAggregationOperation(PromOperationId.Count),\n    ...createAggregationOperationWithParam(PromOperationId.TopK, {\n      params: [{ name: 'K-value', type: 'number' }],\n      defaultParams: [5],\n    }),\n    ...createAggregationOperationWithParam(PromOperationId.BottomK, {\n      params: [{ name: 'K-value', type: 'number' }],\n      defaultParams: [5],\n    }),\n    ...createAggregationOperationWithParam(PromOperationId.CountValues, {\n      params: [{ name: 'Identifier', type: 'string' }],\n      defaultParams: ['count'],\n    }),\n    createAggregationOverTime(PromOperationId.SumOverTime),\n    createAggregationOverTime(PromOperationId.AvgOverTime),\n    createAggregationOverTime(PromOperationId.MinOverTime),\n    createAggregationOverTime(PromOperationId.MaxOverTime),\n    createAggregationOverTime(PromOperationId.CountOverTime),\n    createAggregationOverTime(PromOperationId.LastOverTime),\n    createAggregationOverTime(PromOperationId.PresentOverTime),\n    createAggregationOverTime(PromOperationId.AbsentOverTime),\n    createAggregationOverTime(PromOperationId.StddevOverTime),\n  ];\n}\n\nfunction createAggregationOverTime(name: string): QueryBuilderOperationDef {\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: [getRangeVectorParamDef()],\n    defaultParams: ['$__interval'],\n    alternativesKey: 'overtime function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addOperationWithRangeVector,\n  };\n}\n\nfunction operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  let rangeVector = (model.params ?? [])[0] ?? '$__interval';\n  return `${def.id}(${innerExpr}[${rangeVector}])`;\n}\n"],"mappings":"AAAA,SAASA,2BAAT,QAA4C,cAA5C;AACA,SACEC,0BADF,EAEEC,mCAFF,EAGEC,kCAHF,EAIEC,sBAJF,QAKO,yBALP;AAOA,SAASC,gCAAT,EAA2CC,eAA3C,QAAkE,SAAlE;AAEA,OAAO,SAASC,wBAAT,GAAgE;EACrE,OAAO,CACL,GAAGN,0BAA0B,CAACK,eAAe,CAACE,GAAjB,CADxB,EAEL,GAAGP,0BAA0B,CAACK,eAAe,CAACG,GAAjB,CAFxB,EAGL,GAAGR,0BAA0B,CAACK,eAAe,CAACI,GAAjB,CAHxB,EAIL,GAAGT,0BAA0B,CAACK,eAAe,CAACK,GAAjB,CAJxB,EAKL,GAAGV,0BAA0B,CAACK,eAAe,CAACM,KAAjB,CALxB,EAML,GAAGV,mCAAmC,CAACI,eAAe,CAACO,IAAjB,EAAuB;IAC3DC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAR;MAAmBC,IAAI,EAAE;IAAzB,CAAD,CADmD;IAE3DC,aAAa,EAAE,CAAC,CAAD;EAF4C,CAAvB,CANjC,EAUL,GAAGf,mCAAmC,CAACI,eAAe,CAACY,OAAjB,EAA0B;IAC9DJ,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,SAAR;MAAmBC,IAAI,EAAE;IAAzB,CAAD,CADsD;IAE9DC,aAAa,EAAE,CAAC,CAAD;EAF+C,CAA1B,CAVjC,EAcL,GAAGf,mCAAmC,CAACI,eAAe,CAACa,WAAjB,EAA8B;IAClEL,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,YAAR;MAAsBC,IAAI,EAAE;IAA5B,CAAD,CAD0D;IAElEC,aAAa,EAAE,CAAC,OAAD;EAFmD,CAA9B,CAdjC,EAkBLG,yBAAyB,CAACd,eAAe,CAACe,WAAjB,CAlBpB,EAmBLD,yBAAyB,CAACd,eAAe,CAACgB,WAAjB,CAnBpB,EAoBLF,yBAAyB,CAACd,eAAe,CAACiB,WAAjB,CApBpB,EAqBLH,yBAAyB,CAACd,eAAe,CAACkB,WAAjB,CArBpB,EAsBLJ,yBAAyB,CAACd,eAAe,CAACmB,aAAjB,CAtBpB,EAuBLL,yBAAyB,CAACd,eAAe,CAACoB,YAAjB,CAvBpB,EAwBLN,yBAAyB,CAACd,eAAe,CAACqB,eAAjB,CAxBpB,EAyBLP,yBAAyB,CAACd,eAAe,CAACsB,cAAjB,CAzBpB,EA0BLR,yBAAyB,CAACd,eAAe,CAACuB,cAAjB,CA1BpB,CAAP;AA4BD;;AAED,SAAST,yBAAT,CAAmCL,IAAnC,EAA2E;EACzE,OAAO;IACLe,EAAE,EAAEf,IADC;IAELA,IAAI,EAAEZ,kCAAkC,CAACY,IAAD,CAFnC;IAGLD,MAAM,EAAE,CAACV,sBAAsB,EAAvB,CAHH;IAILa,aAAa,EAAE,CAAC,aAAD,CAJV;IAKLc,eAAe,EAAE,mBALZ;IAMLC,QAAQ,EAAE3B,gCAAgC,CAAC4B,cANtC;IAOLC,QAAQ,EAAEC,gCAPL;IAQLC,mBAAmB,EAAEpC;EARhB,CAAP;AAUD;;AAED,SAASmC,gCAAT,CACEE,KADF,EAEEC,GAFF,EAGEC,SAHF,EAIE;EAAA;;EACA,IAAIC,WAAW,QAAG,kBAACH,KAAK,CAACvB,MAAP,yDAAiB,EAAjB,EAAqB,CAArB,CAAH,iCAA8B,aAA7C;EACA,OAAQ,GAAEwB,GAAG,CAACR,EAAG,IAAGS,SAAU,IAAGC,WAAY,IAA7C;AACD"},"metadata":{},"sourceType":"module"}