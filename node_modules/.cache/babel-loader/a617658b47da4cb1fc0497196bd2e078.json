{"ast":null,"code":"import { omit } from 'lodash';\nimport { VariableQueryType } from '../types';\nconst jsonVariable = /\\${(\\w+):json}/g;\n\nfunction isVariableQuery(rawQuery) {\n  return typeof rawQuery !== 'string' && typeof rawQuery.ec2Filters !== 'string' && typeof rawQuery.tags !== 'string';\n}\n\nfunction migrateMultiFilters(oldFilters) {\n  const tempFilters = oldFilters.replace(jsonVariable, '\"$$$1\"');\n  const parsedFilters = JSON.parse(tempFilters);\n  const newFilters = {}; // if the old filter was {key:value} transform it to {key:[value]}\n\n  Object.keys(parsedFilters).forEach(key => {\n    const value = parsedFilters[key];\n\n    if (typeof value === 'string') {\n      newFilters[key] = [value];\n    } else if (value !== undefined) {\n      newFilters[key] = value;\n    }\n  });\n  return newFilters;\n}\n\nexport function migrateVariableQuery(rawQuery) {\n  if (isVariableQuery(rawQuery)) {\n    return rawQuery;\n  } // rawQuery is OldVariableQuery\n\n\n  if (typeof rawQuery !== 'string') {\n    const newQuery = omit(rawQuery, ['dimensionFilters', 'ec2Filters', 'tags']);\n    newQuery.dimensionFilters = {};\n    newQuery.ec2Filters = {};\n    newQuery.tags = {};\n\n    if (rawQuery.dimensionFilters !== '' && rawQuery.ec2Filters !== '[]') {\n      const tempFilters = rawQuery.dimensionFilters.replace(jsonVariable, '\"$$$1\"');\n\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.dimensionFilters}`);\n      }\n    }\n\n    if (rawQuery.ec2Filters !== '' && rawQuery.ec2Filters !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(rawQuery.ec2Filters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.ec2Filters}`);\n      }\n    }\n\n    if (rawQuery.tags !== '' && rawQuery.tags !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(rawQuery.tags);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.tags}`);\n      }\n    }\n\n    return newQuery;\n  }\n\n  const newQuery = {\n    refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    queryType: VariableQueryType.Regions,\n    namespace: '',\n    region: '',\n    metricName: '',\n    dimensionKey: '',\n    dimensionFilters: {},\n    ec2Filters: {},\n    instanceID: '',\n    attributeName: '',\n    resourceType: '',\n    tags: {}\n  };\n\n  if (rawQuery === '') {\n    return newQuery;\n  }\n\n  if (rawQuery.match(/^regions\\(\\)/)) {\n    return newQuery;\n  }\n\n  if (rawQuery.match(/^namespaces\\(\\)/)) {\n    newQuery.queryType = VariableQueryType.Namespaces;\n    return newQuery;\n  }\n\n  const metricNameQuery = rawQuery.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n\n  if (metricNameQuery) {\n    newQuery.queryType = VariableQueryType.Metrics;\n    newQuery.namespace = metricNameQuery[1];\n    newQuery.region = metricNameQuery[3] || '';\n    return newQuery;\n  }\n\n  const dimensionKeysQuery = rawQuery.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n\n  if (dimensionKeysQuery) {\n    newQuery.queryType = VariableQueryType.DimensionKeys;\n    newQuery.namespace = dimensionKeysQuery[1];\n    newQuery.region = dimensionKeysQuery[3] || '';\n    return newQuery;\n  }\n\n  const dimensionValuesQuery = rawQuery.match(/^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/);\n\n  if (dimensionValuesQuery) {\n    newQuery.queryType = VariableQueryType.DimensionValues;\n    newQuery.region = dimensionValuesQuery[1];\n    newQuery.namespace = dimensionValuesQuery[2];\n    newQuery.metricName = dimensionValuesQuery[3];\n    newQuery.dimensionKey = dimensionValuesQuery[4];\n    newQuery.dimensionFilters = {};\n\n    if (!!dimensionValuesQuery[6] && dimensionValuesQuery[6] !== '[]') {\n      const tempFilters = dimensionValuesQuery[6].replace(jsonVariable, '\"$$$1\"');\n\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${dimensionValuesQuery[6]}`);\n      }\n    }\n\n    return newQuery;\n  }\n\n  const ebsVolumeIdsQuery = rawQuery.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n\n  if (ebsVolumeIdsQuery) {\n    newQuery.queryType = VariableQueryType.EBSVolumeIDs;\n    newQuery.region = ebsVolumeIdsQuery[1];\n    newQuery.instanceID = ebsVolumeIdsQuery[2];\n    return newQuery;\n  }\n\n  const ec2InstanceAttributeQuery = rawQuery.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n\n  if (ec2InstanceAttributeQuery) {\n    newQuery.queryType = VariableQueryType.EC2InstanceAttributes;\n    newQuery.region = ec2InstanceAttributeQuery[1];\n    newQuery.attributeName = ec2InstanceAttributeQuery[2];\n\n    if (ec2InstanceAttributeQuery[3] && ec2InstanceAttributeQuery[3] !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(ec2InstanceAttributeQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${ec2InstanceAttributeQuery[3]}`);\n      }\n    }\n\n    return newQuery;\n  }\n\n  const resourceARNsQuery = rawQuery.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n\n  if (resourceARNsQuery) {\n    newQuery.queryType = VariableQueryType.ResourceArns;\n    newQuery.region = resourceARNsQuery[1];\n    newQuery.resourceType = resourceARNsQuery[2];\n\n    if (resourceARNsQuery[3] && resourceARNsQuery[3] !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(resourceARNsQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${resourceARNsQuery[3]}`);\n      }\n    }\n\n    return newQuery;\n  }\n\n  const statsQuery = rawQuery.match(/^statistics\\(\\)/);\n\n  if (statsQuery) {\n    newQuery.queryType = VariableQueryType.Statistics;\n    return newQuery;\n  }\n\n  throw new Error('unable to parse old variable query');\n}","map":{"version":3,"names":["omit","VariableQueryType","jsonVariable","isVariableQuery","rawQuery","ec2Filters","tags","migrateMultiFilters","oldFilters","tempFilters","replace","parsedFilters","JSON","parse","newFilters","Object","keys","forEach","key","value","undefined","migrateVariableQuery","newQuery","dimensionFilters","Error","refId","queryType","Regions","namespace","region","metricName","dimensionKey","instanceID","attributeName","resourceType","match","Namespaces","metricNameQuery","Metrics","dimensionKeysQuery","DimensionKeys","dimensionValuesQuery","DimensionValues","ebsVolumeIdsQuery","EBSVolumeIDs","ec2InstanceAttributeQuery","EC2InstanceAttributes","resourceARNsQuery","ResourceArns","statsQuery","Statistics"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/migrations/variableQueryMigrations.ts"],"sourcesContent":["import { omit } from 'lodash';\n\nimport { Dimensions, VariableQuery, VariableQueryType, OldVariableQuery, MultiFilters } from '../types';\n\nconst jsonVariable = /\\${(\\w+):json}/g;\n\nfunction isVariableQuery(rawQuery: string | VariableQuery | OldVariableQuery): rawQuery is VariableQuery {\n  return typeof rawQuery !== 'string' && typeof rawQuery.ec2Filters !== 'string' && typeof rawQuery.tags !== 'string';\n}\n\nfunction migrateMultiFilters(oldFilters: string): MultiFilters {\n  const tempFilters = oldFilters.replace(jsonVariable, '\"$$$1\"');\n  const parsedFilters: Dimensions = JSON.parse(tempFilters);\n  const newFilters: MultiFilters = {};\n  // if the old filter was {key:value} transform it to {key:[value]}\n  Object.keys(parsedFilters).forEach((key) => {\n    const value = parsedFilters[key];\n    if (typeof value === 'string') {\n      newFilters[key] = [value];\n    } else if (value !== undefined) {\n      newFilters[key] = value;\n    }\n  });\n  return newFilters;\n}\n\nexport function migrateVariableQuery(rawQuery: string | VariableQuery | OldVariableQuery): VariableQuery {\n  if (isVariableQuery(rawQuery)) {\n    return rawQuery;\n  }\n\n  // rawQuery is OldVariableQuery\n  if (typeof rawQuery !== 'string') {\n    const newQuery: VariableQuery = omit(rawQuery, ['dimensionFilters', 'ec2Filters', 'tags']);\n    newQuery.dimensionFilters = {};\n    newQuery.ec2Filters = {};\n    newQuery.tags = {};\n\n    if (rawQuery.dimensionFilters !== '' && rawQuery.ec2Filters !== '[]') {\n      const tempFilters = rawQuery.dimensionFilters.replace(jsonVariable, '\"$$$1\"');\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.dimensionFilters}`);\n      }\n    }\n    if (rawQuery.ec2Filters !== '' && rawQuery.ec2Filters !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(rawQuery.ec2Filters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.ec2Filters}`);\n      }\n    }\n    if (rawQuery.tags !== '' && rawQuery.tags !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(rawQuery.tags);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.tags}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const newQuery: VariableQuery = {\n    refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    queryType: VariableQueryType.Regions,\n    namespace: '',\n    region: '',\n    metricName: '',\n    dimensionKey: '',\n    dimensionFilters: {},\n    ec2Filters: {},\n    instanceID: '',\n    attributeName: '',\n    resourceType: '',\n    tags: {},\n  };\n\n  if (rawQuery === '') {\n    return newQuery;\n  }\n\n  if (rawQuery.match(/^regions\\(\\)/)) {\n    return newQuery;\n  }\n  if (rawQuery.match(/^namespaces\\(\\)/)) {\n    newQuery.queryType = VariableQueryType.Namespaces;\n    return newQuery;\n  }\n  const metricNameQuery = rawQuery.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n  if (metricNameQuery) {\n    newQuery.queryType = VariableQueryType.Metrics;\n    newQuery.namespace = metricNameQuery[1];\n    newQuery.region = metricNameQuery[3] || '';\n    return newQuery;\n  }\n  const dimensionKeysQuery = rawQuery.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n  if (dimensionKeysQuery) {\n    newQuery.queryType = VariableQueryType.DimensionKeys;\n    newQuery.namespace = dimensionKeysQuery[1];\n    newQuery.region = dimensionKeysQuery[3] || '';\n    return newQuery;\n  }\n\n  const dimensionValuesQuery = rawQuery.match(\n    /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n  );\n  if (dimensionValuesQuery) {\n    newQuery.queryType = VariableQueryType.DimensionValues;\n    newQuery.region = dimensionValuesQuery[1];\n    newQuery.namespace = dimensionValuesQuery[2];\n    newQuery.metricName = dimensionValuesQuery[3];\n    newQuery.dimensionKey = dimensionValuesQuery[4];\n    newQuery.dimensionFilters = {};\n    if (!!dimensionValuesQuery[6] && dimensionValuesQuery[6] !== '[]') {\n      const tempFilters = dimensionValuesQuery[6].replace(jsonVariable, '\"$$$1\"');\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${dimensionValuesQuery[6]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const ebsVolumeIdsQuery = rawQuery.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n  if (ebsVolumeIdsQuery) {\n    newQuery.queryType = VariableQueryType.EBSVolumeIDs;\n    newQuery.region = ebsVolumeIdsQuery[1];\n    newQuery.instanceID = ebsVolumeIdsQuery[2];\n    return newQuery;\n  }\n\n  const ec2InstanceAttributeQuery = rawQuery.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n  if (ec2InstanceAttributeQuery) {\n    newQuery.queryType = VariableQueryType.EC2InstanceAttributes;\n    newQuery.region = ec2InstanceAttributeQuery[1];\n    newQuery.attributeName = ec2InstanceAttributeQuery[2];\n    if (ec2InstanceAttributeQuery[3] && ec2InstanceAttributeQuery[3] !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(ec2InstanceAttributeQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${ec2InstanceAttributeQuery[3]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const resourceARNsQuery = rawQuery.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n  if (resourceARNsQuery) {\n    newQuery.queryType = VariableQueryType.ResourceArns;\n    newQuery.region = resourceARNsQuery[1];\n    newQuery.resourceType = resourceARNsQuery[2];\n    if (resourceARNsQuery[3] && resourceARNsQuery[3] !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(resourceARNsQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${resourceARNsQuery[3]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const statsQuery = rawQuery.match(/^statistics\\(\\)/);\n  if (statsQuery) {\n    newQuery.queryType = VariableQueryType.Statistics;\n    return newQuery;\n  }\n  throw new Error('unable to parse old variable query');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}