{"ast":null,"code":"var _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { Button, Form, Field, Input, FieldSet } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class CreateTeam extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"create\", async formModel => {\n      const result = await getBackendSrv().post('/api/teams', formModel);\n\n      if (result.teamId) {\n        await contextSrv.fetchUserPermissions();\n        locationService.push(`/org/teams/edit/${result.teamId}`);\n      }\n    });\n  }\n\n  render() {\n    const {\n      navModel\n    } = this.props;\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: navModel,\n      children: /*#__PURE__*/_jsx(Page.Contents, {\n        children: /*#__PURE__*/_jsx(Form, {\n          onSubmit: this.create,\n          children: ({\n            register,\n            errors\n          }) => /*#__PURE__*/_jsxs(FieldSet, {\n            label: \"New Team\",\n            children: [/*#__PURE__*/_jsx(Field, {\n              label: \"Name\",\n              required: true,\n              invalid: !!errors.name,\n              error: \"Team name is required\",\n              children: /*#__PURE__*/_jsx(Input, Object.assign({}, register('name', {\n                required: true\n              }), {\n                id: \"team-name\",\n                width: 60\n              }))\n            }), /*#__PURE__*/_jsx(Field, {\n              label: 'Email',\n              description: 'This is optional and is primarily used for allowing custom team avatars.',\n              children: /*#__PURE__*/_jsx(Input, Object.assign({}, register('email'), {\n                type: \"email\",\n                id: \"team-email\",\n                placeholder: \"email@test.com\",\n                width: 60\n              }))\n            }), _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n              className: \"gf-form-button-row\",\n              children: /*#__PURE__*/_jsx(Button, {\n                type: \"submit\",\n                variant: \"primary\",\n                children: \"Create\"\n              })\n            }))]\n          })\n        })\n      })\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    navModel: getNavModel(state.navIndex, 'teams')\n  };\n}\n\nexport default connect(mapStateToProps)(CreateTeam);","map":{"version":3,"names":["React","PureComponent","connect","getBackendSrv","locationService","Button","Form","Field","Input","FieldSet","Page","contextSrv","getNavModel","CreateTeam","formModel","result","post","teamId","fetchUserPermissions","push","render","navModel","props","create","register","errors","name","required","mapStateToProps","state","navIndex"],"sources":["/home/soula/grafana/public/app/features/teams/CreateTeam.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { getBackendSrv, locationService } from '@grafana/runtime';\nimport { Button, Form, Field, Input, FieldSet } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\nexport interface Props {\n  navModel: NavModel;\n}\n\ninterface TeamDTO {\n  name: string;\n  email: string;\n}\n\nexport class CreateTeam extends PureComponent<Props> {\n  create = async (formModel: TeamDTO) => {\n    const result = await getBackendSrv().post('/api/teams', formModel);\n    if (result.teamId) {\n      await contextSrv.fetchUserPermissions();\n      locationService.push(`/org/teams/edit/${result.teamId}`);\n    }\n  };\n  render() {\n    const { navModel } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <Form onSubmit={this.create}>\n            {({ register, errors }) => (\n              <FieldSet label=\"New Team\">\n                <Field label=\"Name\" required invalid={!!errors.name} error=\"Team name is required\">\n                  <Input {...register('name', { required: true })} id=\"team-name\" width={60} />\n                </Field>\n                <Field\n                  label={'Email'}\n                  description={'This is optional and is primarily used for allowing custom team avatars.'}\n                >\n                  <Input {...register('email')} type=\"email\" id=\"team-email\" placeholder=\"email@test.com\" width={60} />\n                </Field>\n                <div className=\"gf-form-button-row\">\n                  <Button type=\"submit\" variant=\"primary\">\n                    Create\n                  </Button>\n                </div>\n              </FieldSet>\n            )}\n          </Form>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'teams'),\n  };\n}\n\nexport default connect(mapStateToProps)(CreateTeam);\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAGA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,kBAA/C;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqCC,QAArC,QAAqD,aAArD;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,WAAT,QAA4B,6BAA5B;;;AAYA,OAAO,MAAMC,UAAN,SAAyBZ,aAAzB,CAA8C;EAAA;IAAA;;IAAA,gCAC1C,MAAOa,SAAP,IAA8B;MACrC,MAAMC,MAAM,GAAG,MAAMZ,aAAa,GAAGa,IAAhB,CAAqB,YAArB,EAAmCF,SAAnC,CAArB;;MACA,IAAIC,MAAM,CAACE,MAAX,EAAmB;QACjB,MAAMN,UAAU,CAACO,oBAAX,EAAN;QACAd,eAAe,CAACe,IAAhB,CAAsB,mBAAkBJ,MAAM,CAACE,MAAO,EAAtD;MACD;IACF,CAPkD;EAAA;;EAQnDG,MAAM,GAAG;IACP,MAAM;MAAEC;IAAF,IAAe,KAAKC,KAA1B;IAEA,oBACE,KAAC,IAAD;MAAM,QAAQ,EAAED,QAAhB;MAAA,uBACE,KAAC,IAAD,CAAM,QAAN;QAAA,uBACE,KAAC,IAAD;UAAM,QAAQ,EAAE,KAAKE,MAArB;UAAA,UACG,CAAC;YAAEC,QAAF;YAAYC;UAAZ,CAAD,kBACC,MAAC,QAAD;YAAU,KAAK,EAAC,UAAhB;YAAA,wBACE,KAAC,KAAD;cAAO,KAAK,EAAC,MAAb;cAAoB,QAAQ,MAA5B;cAA6B,OAAO,EAAE,CAAC,CAACA,MAAM,CAACC,IAA/C;cAAqD,KAAK,EAAC,uBAA3D;cAAA,uBACE,KAAC,KAAD,oBAAWF,QAAQ,CAAC,MAAD,EAAS;gBAAEG,QAAQ,EAAE;cAAZ,CAAT,CAAnB;gBAAiD,EAAE,EAAC,WAApD;gBAAgE,KAAK,EAAE;cAAvE;YADF,EADF,eAIE,KAAC,KAAD;cACE,KAAK,EAAE,OADT;cAEE,WAAW,EAAE,0EAFf;cAAA,uBAIE,KAAC,KAAD,oBAAWH,QAAQ,CAAC,OAAD,CAAnB;gBAA8B,IAAI,EAAC,OAAnC;gBAA2C,EAAE,EAAC,YAA9C;gBAA2D,WAAW,EAAC,gBAAvE;gBAAwF,KAAK,EAAE;cAA/F;YAJF,EAJF,+BAUE;cAAK,SAAS,EAAC,oBAAf;cAAA,uBACE,KAAC,MAAD;gBAAQ,IAAI,EAAC,QAAb;gBAAsB,OAAO,EAAC,SAA9B;gBAAA;cAAA;YADF,EAVF;UAAA;QAFJ;MADF;IADF,EADF;EA0BD;;AArCkD;;AAwCrD,SAASI,eAAT,CAAyBC,KAAzB,EAA4C;EAC1C,OAAO;IACLR,QAAQ,EAAET,WAAW,CAACiB,KAAK,CAACC,QAAP,EAAiB,OAAjB;EADhB,CAAP;AAGD;;AAED,eAAe5B,OAAO,CAAC0B,eAAD,CAAP,CAAyBf,UAAzB,CAAf"},"metadata":{},"sourceType":"module"}