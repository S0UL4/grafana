{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { Button, HorizontalGroup, Modal, stylesFactory, useTheme } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { moveDashboards } from 'app/features/manage-dashboards/state/actions';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const MoveToFolderModal = ({\n  results,\n  onMoveItems,\n  isOpen,\n  onDismiss\n}) => {\n  var _results$get;\n\n  const [folder, setFolder] = useState(null);\n  const theme = useTheme();\n  const styles = getStyles(theme);\n  const notifyApp = useAppNotification();\n  const selectedDashboards = Array.from((_results$get = results.get('dashboard')) !== null && _results$get !== void 0 ? _results$get : []);\n  const [moving, setMoving] = useState(false);\n\n  const moveTo = () => {\n    if (folder && selectedDashboards.length) {\n      var _folder$title;\n\n      const folderTitle = (_folder$title = folder.title) !== null && _folder$title !== void 0 ? _folder$title : 'General';\n      setMoving(true);\n      moveDashboards(selectedDashboards, folder).then(result => {\n        if (result.successCount > 0) {\n          const ending = result.successCount === 1 ? '' : 's';\n          const header = `Dashboard${ending} Moved`;\n          const msg = `${result.successCount} dashboard${ending} moved to ${folderTitle}`;\n          notifyApp.success(header, msg);\n        }\n\n        if (result.totalCount === result.alreadyInFolderCount) {\n          notifyApp.error('Error', `Dashboard already belongs to folder ${folderTitle}`);\n        } else {\n          //update the list\n          onMoveItems();\n        }\n\n        setMoving(false);\n        onDismiss();\n      });\n    }\n  };\n\n  return isOpen ? /*#__PURE__*/_jsx(Modal, {\n    className: styles.modal,\n    title: \"Choose Dashboard Folder\",\n    icon: \"folder-plus\",\n    isOpen: isOpen,\n    onDismiss: onDismiss,\n    children: /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: styles.content,\n        children: [/*#__PURE__*/_jsxs(\"p\", {\n          children: [\"Move the \", selectedDashboards.length, \" selected dashboard\", selectedDashboards.length === 1 ? '' : 's', \" to the following folder:\"]\n        }), /*#__PURE__*/_jsx(FolderPicker, {\n          onChange: f => setFolder(f)\n        })]\n      }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n        justify: \"center\",\n        children: [/*#__PURE__*/_jsx(Button, {\n          icon: moving ? 'fa fa-spinner' : undefined,\n          variant: \"primary\",\n          onClick: moveTo,\n          children: \"Move\"\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: onDismiss,\n          children: \"Cancel\"\n        })]\n      })]\n    })\n  }) : null;\n};\nconst getStyles = stylesFactory(theme => {\n  return {\n    modal: css`\n      width: 500px;\n    `,\n    content: css`\n      margin-bottom: ${theme.spacing.lg};\n    `\n  };\n});","map":{"version":3,"names":["css","React","useState","Button","HorizontalGroup","Modal","stylesFactory","useTheme","FolderPicker","useAppNotification","moveDashboards","MoveToFolderModal","results","onMoveItems","isOpen","onDismiss","folder","setFolder","theme","styles","getStyles","notifyApp","selectedDashboards","Array","from","get","moving","setMoving","moveTo","length","folderTitle","title","then","result","successCount","ending","header","msg","success","totalCount","alreadyInFolderCount","error","modal","content","f","undefined","spacing","lg"],"sources":["/home/soula/grafana/public/app/features/search/page/components/MoveToFolderModal.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { Button, HorizontalGroup, Modal, stylesFactory, useTheme } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { moveDashboards } from 'app/features/manage-dashboards/state/actions';\nimport { FolderInfo } from 'app/types';\n\nimport { OnMoveOrDeleleSelectedItems } from '../../types';\n\ninterface Props {\n  onMoveItems: OnMoveOrDeleleSelectedItems;\n  results: Map<string, Set<string>>;\n  isOpen: boolean;\n  onDismiss: () => void;\n}\n\nexport const MoveToFolderModal: FC<Props> = ({ results, onMoveItems, isOpen, onDismiss }) => {\n  const [folder, setFolder] = useState<FolderInfo | null>(null);\n  const theme = useTheme();\n  const styles = getStyles(theme);\n  const notifyApp = useAppNotification();\n  const selectedDashboards = Array.from(results.get('dashboard') ?? []);\n  const [moving, setMoving] = useState(false);\n\n  const moveTo = () => {\n    if (folder && selectedDashboards.length) {\n      const folderTitle = folder.title ?? 'General';\n      setMoving(true);\n      moveDashboards(selectedDashboards, folder).then((result: any) => {\n        if (result.successCount > 0) {\n          const ending = result.successCount === 1 ? '' : 's';\n          const header = `Dashboard${ending} Moved`;\n          const msg = `${result.successCount} dashboard${ending} moved to ${folderTitle}`;\n          notifyApp.success(header, msg);\n        }\n\n        if (result.totalCount === result.alreadyInFolderCount) {\n          notifyApp.error('Error', `Dashboard already belongs to folder ${folderTitle}`);\n        } else {\n          //update the list\n          onMoveItems();\n        }\n\n        setMoving(false);\n        onDismiss();\n      });\n    }\n  };\n\n  return isOpen ? (\n    <Modal\n      className={styles.modal}\n      title=\"Choose Dashboard Folder\"\n      icon=\"folder-plus\"\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n    >\n      <>\n        <div className={styles.content}>\n          <p>\n            Move the {selectedDashboards.length} selected dashboard{selectedDashboards.length === 1 ? '' : 's'} to the\n            following folder:\n          </p>\n          <FolderPicker onChange={(f) => setFolder(f as FolderInfo)} />\n        </div>\n\n        <HorizontalGroup justify=\"center\">\n          <Button icon={moving ? 'fa fa-spinner' : undefined} variant=\"primary\" onClick={moveTo}>\n            Move\n          </Button>\n          <Button variant=\"secondary\" onClick={onDismiss}>\n            Cancel\n          </Button>\n        </HorizontalGroup>\n      </>\n    </Modal>\n  ) : null;\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    modal: css`\n      width: 500px;\n    `,\n    content: css`\n      margin-bottom: ${theme.spacing.lg};\n    `,\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}