{"ast":null,"code":"const _excluded = [\"onChange\", \"ref\"],\n      _excluded2 = [\"onChange\", \"ref\"],\n      _excluded3 = [\"onChange\", \"ref\"],\n      _excluded4 = [\"onChange\", \"ref\"],\n      _excluded5 = [\"onChange\", \"ref\"],\n      _excluded6 = [\"onChange\", \"ref\"],\n      _excluded7 = [\"onChange\", \"ref\"];\n\nvar _div, _Button;\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { Button, Field, FieldArray, Form, HorizontalGroup, IconButton, Input, InputControl, MultiSelect, Select, Switch, useStyles2, Badge, VerticalGroup } from '@grafana/ui';\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport { emptyArrayFieldMatcher, mapMultiSelectValueToStrings, mapSelectValueToString, optionalPositiveInteger, stringToSelectableValue, stringsToSelectableValues } from '../../utils/amroutes';\nimport { timeOptions } from '../../utils/time';\nimport { getFormStyles } from './formStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const AmRoutesExpandedForm = ({\n  onCancel,\n  onSave,\n  receivers,\n  routes\n}) => {\n  var _Button2;\n\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n  const muteTimingOptions = useMuteTimingOptions();\n  return /*#__PURE__*/_jsx(Form, {\n    defaultValues: routes,\n    onSubmit: onSave,\n    children: ({\n      control,\n      register,\n      errors,\n      setValue,\n      watch\n    }) => {\n      var _errors$groupWaitValu, _errors$groupInterval, _errors$repeatInterva;\n\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"input\", Object.assign({\n          type: \"hidden\"\n        }, register('id'))), /*#__PURE__*/_jsx(FieldArray, {\n          name: \"object_matchers\",\n          control: control,\n          children: ({\n            fields,\n            append,\n            remove\n          }) => /*#__PURE__*/_jsx(_Fragment, {\n            children: /*#__PURE__*/_jsxs(VerticalGroup, {\n              justify: \"flex-start\",\n              spacing: \"md\",\n              children: [_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n                children: \"Matching labels\"\n              })), fields.length === 0 && /*#__PURE__*/_jsx(Badge, {\n                color: \"orange\",\n                className: styles.noMatchersWarning,\n                icon: \"exclamation-triangle\",\n                text: \"If no matchers are specified, this notification policy will handle all alert instances.\"\n              }), fields.length > 0 && /*#__PURE__*/_jsx(\"div\", {\n                className: styles.matchersContainer,\n                children: fields.map((field, index) => {\n                  var _errors$object_matche, _errors$object_matche2, _errors$object_matche3, _errors$object_matche4, _errors$object_matche5, _errors$object_matche6, _errors$object_matche7, _errors$object_matche8, _errors$object_matche9, _errors$object_matche10;\n\n                  const localPath = `object_matchers[${index}]`;\n                  return /*#__PURE__*/_jsxs(HorizontalGroup, {\n                    align: \"flex-start\",\n                    height: \"auto\",\n                    children: [/*#__PURE__*/_jsx(Field, {\n                      label: \"Label\",\n                      invalid: !!((_errors$object_matche = errors.object_matchers) !== null && _errors$object_matche !== void 0 && (_errors$object_matche2 = _errors$object_matche[index]) !== null && _errors$object_matche2 !== void 0 && _errors$object_matche2.name),\n                      error: (_errors$object_matche3 = errors.object_matchers) === null || _errors$object_matche3 === void 0 ? void 0 : (_errors$object_matche4 = _errors$object_matche3[index]) === null || _errors$object_matche4 === void 0 ? void 0 : (_errors$object_matche5 = _errors$object_matche4.name) === null || _errors$object_matche5 === void 0 ? void 0 : _errors$object_matche5.message,\n                      children: /*#__PURE__*/_jsx(Input, Object.assign({}, register(`${localPath}.name`, {\n                        required: 'Field is required'\n                      }), {\n                        defaultValue: field.name,\n                        placeholder: \"label\"\n                      }))\n                    }), /*#__PURE__*/_jsx(Field, {\n                      label: 'Operator',\n                      children: /*#__PURE__*/_jsx(InputControl, {\n                        render: _ref => {\n                          let {\n                            field: {\n                              onChange\n                            }\n                          } = _ref,\n                              field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n                          return /*#__PURE__*/_jsx(Select, Object.assign({}, field, {\n                            className: styles.matchersOperator,\n                            onChange: value => onChange(value === null || value === void 0 ? void 0 : value.value),\n                            options: matcherFieldOptions,\n                            \"aria-label\": \"Operator\"\n                          }));\n                        },\n                        defaultValue: field.operator,\n                        control: control,\n                        name: `${localPath}.operator`,\n                        rules: {\n                          required: {\n                            value: true,\n                            message: 'Required.'\n                          }\n                        }\n                      })\n                    }), /*#__PURE__*/_jsx(Field, {\n                      label: \"Value\",\n                      invalid: !!((_errors$object_matche6 = errors.object_matchers) !== null && _errors$object_matche6 !== void 0 && (_errors$object_matche7 = _errors$object_matche6[index]) !== null && _errors$object_matche7 !== void 0 && _errors$object_matche7.value),\n                      error: (_errors$object_matche8 = errors.object_matchers) === null || _errors$object_matche8 === void 0 ? void 0 : (_errors$object_matche9 = _errors$object_matche8[index]) === null || _errors$object_matche9 === void 0 ? void 0 : (_errors$object_matche10 = _errors$object_matche9.value) === null || _errors$object_matche10 === void 0 ? void 0 : _errors$object_matche10.message,\n                      children: /*#__PURE__*/_jsx(Input, Object.assign({}, register(`${localPath}.value`, {\n                        required: 'Field is required'\n                      }), {\n                        defaultValue: field.value,\n                        placeholder: \"value\"\n                      }))\n                    }), /*#__PURE__*/_jsx(IconButton, {\n                      className: styles.removeButton,\n                      tooltip: \"Remove matcher\",\n                      name: 'trash-alt',\n                      onClick: () => remove(index),\n                      children: \"Remove\"\n                    })]\n                  }, field.id);\n                })\n              }), /*#__PURE__*/_jsx(Button, {\n                className: styles.addMatcherBtn,\n                icon: \"plus\",\n                onClick: () => append(emptyArrayFieldMatcher),\n                variant: \"secondary\",\n                type: \"button\",\n                children: \"Add matcher\"\n              })]\n            })\n          })\n        }), /*#__PURE__*/_jsx(Field, {\n          label: \"Contact point\",\n          children: /*#__PURE__*/_jsx(InputControl, {\n            render: _ref2 => {\n              let {\n                field: {\n                  onChange\n                }\n              } = _ref2,\n                  field = _objectWithoutPropertiesLoose(_ref2.field, _excluded2);\n\n              return /*#__PURE__*/_jsx(Select, Object.assign({\n                \"aria-label\": \"Contact point\"\n              }, field, {\n                className: formStyles.input,\n                onChange: value => onChange(mapSelectValueToString(value)),\n                options: receivers\n              }));\n            },\n            control: control,\n            name: \"receiver\"\n          })\n        }), /*#__PURE__*/_jsx(Field, {\n          label: \"Continue matching subsequent sibling nodes\",\n          children: /*#__PURE__*/_jsx(Switch, Object.assign({\n            id: \"continue-toggle\"\n          }, register('continue')))\n        }), /*#__PURE__*/_jsx(Field, {\n          label: \"Override grouping\",\n          children: /*#__PURE__*/_jsx(Switch, Object.assign({\n            id: \"override-grouping-toggle\"\n          }, register('overrideGrouping')))\n        }), watch().overrideGrouping && /*#__PURE__*/_jsx(Field, {\n          label: \"Group by\",\n          description: \"Group alerts when you receive a notification based on labels. If empty it will be inherited from the parent policy.\",\n          children: /*#__PURE__*/_jsx(InputControl, {\n            render: _ref3 => {\n              let {\n                field: {\n                  onChange\n                }\n              } = _ref3,\n                  field = _objectWithoutPropertiesLoose(_ref3.field, _excluded3);\n\n              return /*#__PURE__*/_jsx(MultiSelect, Object.assign({\n                \"aria-label\": \"Group by\"\n              }, field, {\n                allowCustomValue: true,\n                className: formStyles.input,\n                onCreateOption: opt => {\n                  setGroupByOptions(opts => [...opts, stringToSelectableValue(opt)]); // @ts-ignore-check: react-hook-form made me do this\n\n                  setValue('groupBy', [...field.value, opt]);\n                },\n                onChange: value => onChange(mapMultiSelectValueToStrings(value)),\n                options: groupByOptions\n              }));\n            },\n            control: control,\n            name: \"groupBy\"\n          })\n        }), /*#__PURE__*/_jsx(Field, {\n          label: \"Override general timings\",\n          children: /*#__PURE__*/_jsx(Switch, Object.assign({\n            id: \"override-timings-toggle\"\n          }, register('overrideTimings')))\n        }), watch().overrideTimings && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(Field, {\n            label: \"Group wait\",\n            description: \"The waiting time until the initial notification is sent for a new group created by an incoming alert. If empty it will be inherited from the parent policy.\",\n            invalid: !!errors.groupWaitValue,\n            error: (_errors$groupWaitValu = errors.groupWaitValue) === null || _errors$groupWaitValu === void 0 ? void 0 : _errors$groupWaitValu.message,\n            children: /*#__PURE__*/_jsx(_Fragment, {\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: cx(formStyles.container, formStyles.timingContainer),\n                children: [/*#__PURE__*/_jsx(InputControl, {\n                  render: ({\n                    field,\n                    fieldState: {\n                      invalid\n                    }\n                  }) => /*#__PURE__*/_jsx(Input, Object.assign({}, field, {\n                    className: formStyles.smallInput,\n                    invalid: invalid,\n                    \"aria-label\": \"Group wait value\"\n                  })),\n                  control: control,\n                  name: \"groupWaitValue\",\n                  rules: {\n                    validate: optionalPositiveInteger\n                  }\n                }), /*#__PURE__*/_jsx(InputControl, {\n                  render: _ref4 => {\n                    let {\n                      field: {\n                        onChange\n                      }\n                    } = _ref4,\n                        field = _objectWithoutPropertiesLoose(_ref4.field, _excluded4);\n\n                    return /*#__PURE__*/_jsx(Select, Object.assign({}, field, {\n                      className: formStyles.input,\n                      onChange: value => onChange(mapSelectValueToString(value)),\n                      options: timeOptions,\n                      \"aria-label\": \"Group wait type\"\n                    }));\n                  },\n                  control: control,\n                  name: \"groupWaitValueType\"\n                })]\n              })\n            })\n          }), /*#__PURE__*/_jsx(Field, {\n            label: \"Group interval\",\n            description: \"The waiting time to send a batch of new alerts for that group after the first notification was sent. If empty it will be inherited from the parent policy.\",\n            invalid: !!errors.groupIntervalValue,\n            error: (_errors$groupInterval = errors.groupIntervalValue) === null || _errors$groupInterval === void 0 ? void 0 : _errors$groupInterval.message,\n            children: /*#__PURE__*/_jsx(_Fragment, {\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: cx(formStyles.container, formStyles.timingContainer),\n                children: [/*#__PURE__*/_jsx(InputControl, {\n                  render: ({\n                    field,\n                    fieldState: {\n                      invalid\n                    }\n                  }) => /*#__PURE__*/_jsx(Input, Object.assign({}, field, {\n                    className: formStyles.smallInput,\n                    invalid: invalid,\n                    \"aria-label\": \"Group interval value\"\n                  })),\n                  control: control,\n                  name: \"groupIntervalValue\",\n                  rules: {\n                    validate: optionalPositiveInteger\n                  }\n                }), /*#__PURE__*/_jsx(InputControl, {\n                  render: _ref5 => {\n                    let {\n                      field: {\n                        onChange\n                      }\n                    } = _ref5,\n                        field = _objectWithoutPropertiesLoose(_ref5.field, _excluded5);\n\n                    return /*#__PURE__*/_jsx(Select, Object.assign({}, field, {\n                      className: formStyles.input,\n                      onChange: value => onChange(mapSelectValueToString(value)),\n                      options: timeOptions,\n                      \"aria-label\": \"Group interval type\"\n                    }));\n                  },\n                  control: control,\n                  name: \"groupIntervalValueType\"\n                })]\n              })\n            })\n          }), /*#__PURE__*/_jsx(Field, {\n            label: \"Repeat interval\",\n            description: \"The waiting time to resend an alert after they have successfully been sent.\",\n            invalid: !!errors.repeatIntervalValue,\n            error: (_errors$repeatInterva = errors.repeatIntervalValue) === null || _errors$repeatInterva === void 0 ? void 0 : _errors$repeatInterva.message,\n            children: /*#__PURE__*/_jsx(_Fragment, {\n              children: /*#__PURE__*/_jsxs(\"div\", {\n                className: cx(formStyles.container, formStyles.timingContainer),\n                children: [/*#__PURE__*/_jsx(InputControl, {\n                  render: ({\n                    field,\n                    fieldState: {\n                      invalid\n                    }\n                  }) => /*#__PURE__*/_jsx(Input, Object.assign({}, field, {\n                    className: formStyles.smallInput,\n                    invalid: invalid,\n                    \"aria-label\": \"Repeat interval value\"\n                  })),\n                  control: control,\n                  name: \"repeatIntervalValue\",\n                  rules: {\n                    validate: optionalPositiveInteger\n                  }\n                }), /*#__PURE__*/_jsx(InputControl, {\n                  render: _ref6 => {\n                    let {\n                      field: {\n                        onChange\n                      }\n                    } = _ref6,\n                        field = _objectWithoutPropertiesLoose(_ref6.field, _excluded6);\n\n                    return /*#__PURE__*/_jsx(Select, Object.assign({}, field, {\n                      className: formStyles.input,\n                      menuPlacement: \"top\",\n                      onChange: value => onChange(mapSelectValueToString(value)),\n                      options: timeOptions,\n                      \"aria-label\": \"Repeat interval type\"\n                    }));\n                  },\n                  control: control,\n                  name: \"repeatIntervalValueType\"\n                })]\n              })\n            })\n          })]\n        }), /*#__PURE__*/_jsx(Field, {\n          label: \"Mute timings\",\n          \"data-testid\": \"am-mute-timing-select\",\n          description: \"Add mute timing to policy\",\n          invalid: !!errors.muteTimeIntervals,\n          children: /*#__PURE__*/_jsx(InputControl, {\n            render: _ref7 => {\n              let {\n                field: {\n                  onChange\n                }\n              } = _ref7,\n                  field = _objectWithoutPropertiesLoose(_ref7.field, _excluded7);\n\n              return /*#__PURE__*/_jsx(MultiSelect, Object.assign({\n                \"aria-label\": \"Mute timings\"\n              }, field, {\n                className: formStyles.input,\n                onChange: value => onChange(mapMultiSelectValueToStrings(value)),\n                options: muteTimingOptions\n              }));\n            },\n            control: control,\n            name: \"muteTimeIntervals\"\n          })\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.buttonGroup,\n          children: [_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            children: \"Save policy\"\n          })), _Button2 || (_Button2 = /*#__PURE__*/_jsx(Button, {\n            onClick: onCancel,\n            fill: \"outline\",\n            type: \"button\",\n            variant: \"secondary\",\n            children: \"Cancel\"\n          }))]\n        })]\n      });\n    }\n  });\n};\n\nconst getStyles = theme => {\n  const commonSpacing = theme.spacing(3.5);\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      margin: ${theme.spacing(1, 0)};\n      padding: ${theme.spacing(1, 4.6, 1, 1.5)};\n      width: fit-content;\n    `,\n    matchersOperator: css`\n      min-width: 140px;\n    `,\n    nestedPolicies: css`\n      margin-top: ${commonSpacing};\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    buttonGroup: css`\n      margin: ${theme.spacing(6)} 0 ${commonSpacing};\n\n      & > * + * {\n        margin-left: ${theme.spacing(1.5)};\n      }\n    `,\n    noMatchersWarning: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n    `\n  };\n};","map":{"version":3,"names":["css","cx","React","useState","Button","Field","FieldArray","Form","HorizontalGroup","IconButton","Input","InputControl","MultiSelect","Select","Switch","useStyles2","Badge","VerticalGroup","useMuteTimingOptions","matcherFieldOptions","emptyArrayFieldMatcher","mapMultiSelectValueToStrings","mapSelectValueToString","optionalPositiveInteger","stringToSelectableValue","stringsToSelectableValues","timeOptions","getFormStyles","AmRoutesExpandedForm","onCancel","onSave","receivers","routes","styles","getStyles","formStyles","groupByOptions","setGroupByOptions","groupBy","muteTimingOptions","control","register","errors","setValue","watch","fields","append","remove","length","noMatchersWarning","matchersContainer","map","field","index","localPath","object_matchers","name","message","required","onChange","matchersOperator","value","operator","removeButton","id","addMatcherBtn","input","overrideGrouping","opt","opts","overrideTimings","groupWaitValue","container","timingContainer","fieldState","invalid","smallInput","validate","groupIntervalValue","repeatIntervalValue","muteTimeIntervals","buttonGroup","theme","commonSpacing","spacing","colors","background","secondary","nestedPolicies"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedForm.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  Field,\n  FieldArray,\n  Form,\n  HorizontalGroup,\n  IconButton,\n  Input,\n  InputControl,\n  MultiSelect,\n  Select,\n  Switch,\n  useStyles2,\n  Badge,\n  VerticalGroup,\n} from '@grafana/ui';\n\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { timeOptions } from '../../utils/time';\n\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRoutesExpandedFormProps {\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRoutesExpandedForm: FC<AmRoutesExpandedFormProps> = ({ onCancel, onSave, receivers, routes }) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n  const muteTimingOptions = useMuteTimingOptions();\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, register, errors, setValue, watch }) => (\n        <>\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <input type=\"hidden\" {...register('id')} />\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <FieldArray name=\"object_matchers\" control={control}>\n            {({ fields, append, remove }) => (\n              <>\n                <VerticalGroup justify=\"flex-start\" spacing=\"md\">\n                  <div>Matching labels</div>\n                  {fields.length === 0 && (\n                    <Badge\n                      color=\"orange\"\n                      className={styles.noMatchersWarning}\n                      icon=\"exclamation-triangle\"\n                      text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n                    />\n                  )}\n                  {fields.length > 0 && (\n                    <div className={styles.matchersContainer}>\n                      {fields.map((field, index) => {\n                        const localPath = `object_matchers[${index}]`;\n                        return (\n                          <HorizontalGroup key={field.id} align=\"flex-start\" height=\"auto\">\n                            <Field\n                              label=\"Label\"\n                              invalid={!!errors.object_matchers?.[index]?.name}\n                              error={errors.object_matchers?.[index]?.name?.message}\n                            >\n                              <Input\n                                {...register(`${localPath}.name`, { required: 'Field is required' })}\n                                defaultValue={field.name}\n                                placeholder=\"label\"\n                              />\n                            </Field>\n                            <Field label={'Operator'}>\n                              <InputControl\n                                render={({ field: { onChange, ref, ...field } }) => (\n                                  <Select\n                                    {...field}\n                                    className={styles.matchersOperator}\n                                    onChange={(value) => onChange(value?.value)}\n                                    options={matcherFieldOptions}\n                                    aria-label=\"Operator\"\n                                  />\n                                )}\n                                defaultValue={field.operator}\n                                control={control}\n                                name={`${localPath}.operator` as const}\n                                rules={{ required: { value: true, message: 'Required.' } }}\n                              />\n                            </Field>\n                            <Field\n                              label=\"Value\"\n                              invalid={!!errors.object_matchers?.[index]?.value}\n                              error={errors.object_matchers?.[index]?.value?.message}\n                            >\n                              <Input\n                                {...register(`${localPath}.value`, { required: 'Field is required' })}\n                                defaultValue={field.value}\n                                placeholder=\"value\"\n                              />\n                            </Field>\n                            <IconButton\n                              className={styles.removeButton}\n                              tooltip=\"Remove matcher\"\n                              name={'trash-alt'}\n                              onClick={() => remove(index)}\n                            >\n                              Remove\n                            </IconButton>\n                          </HorizontalGroup>\n                        );\n                      })}\n                    </div>\n                  )}\n                  <Button\n                    className={styles.addMatcherBtn}\n                    icon=\"plus\"\n                    onClick={() => append(emptyArrayFieldMatcher)}\n                    variant=\"secondary\"\n                    type=\"button\"\n                  >\n                    Add matcher\n                  </Button>\n                </VerticalGroup>\n              </>\n            )}\n          </FieldArray>\n          <Field label=\"Contact point\">\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  aria-label=\"Contact point\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receivers}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n            />\n          </Field>\n          <Field label=\"Continue matching subsequent sibling nodes\">\n            <Switch id=\"continue-toggle\" {...register('continue')} />\n          </Field>\n          <Field label=\"Override grouping\">\n            <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n          </Field>\n          {watch().overrideGrouping && (\n            <Field\n              label=\"Group by\"\n              description=\"Group alerts when you receive a notification based on labels. If empty it will be inherited from the parent policy.\"\n            >\n              <InputControl\n                render={({ field: { onChange, ref, ...field } }) => (\n                  <MultiSelect\n                    aria-label=\"Group by\"\n                    {...field}\n                    allowCustomValue\n                    className={formStyles.input}\n                    onCreateOption={(opt: string) => {\n                      setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                      // @ts-ignore-check: react-hook-form made me do this\n                      setValue('groupBy', [...field.value, opt]);\n                    }}\n                    onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                    options={groupByOptions}\n                  />\n                )}\n                control={control}\n                name=\"groupBy\"\n              />\n            </Field>\n          )}\n          <Field label=\"Override general timings\">\n            <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n          </Field>\n          {watch().overrideTimings && (\n            <>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. If empty it will be inherited from the parent policy.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Group wait value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Group wait type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. If empty it will be inherited from the parent policy.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Group interval value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Group interval type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          aria-label=\"Repeat interval value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={formStyles.input}\n                          menuPlacement=\"top\"\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Repeat interval type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n            </>\n          )}\n          <Field\n            label=\"Mute timings\"\n            data-testid=\"am-mute-timing-select\"\n            description=\"Add mute timing to policy\"\n            invalid={!!errors.muteTimeIntervals}\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Mute timings\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={muteTimingOptions}\n                />\n              )}\n              control={control}\n              name=\"muteTimeIntervals\"\n            />\n          </Field>\n          <div className={styles.buttonGroup}>\n            <Button type=\"submit\">Save policy</Button>\n            <Button onClick={onCancel} fill=\"outline\" type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      margin: ${theme.spacing(1, 0)};\n      padding: ${theme.spacing(1, 4.6, 1, 1.5)};\n      width: fit-content;\n    `,\n    matchersOperator: css`\n      min-width: 140px;\n    `,\n    nestedPolicies: css`\n      margin-top: ${commonSpacing};\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    buttonGroup: css`\n      margin: ${theme.spacing(6)} 0 ${commonSpacing};\n\n      & > * + * {\n        margin-left: ${theme.spacing(1.5)};\n      }\n    `,\n    noMatchersWarning: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}