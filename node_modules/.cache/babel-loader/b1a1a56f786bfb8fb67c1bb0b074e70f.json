{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { defaultsDeep, includes, keys, map, reduce, min as _min, max as _max } from 'lodash';\nimport { PanelEvents, rangeUtil } from '@grafana/data';\nimport appEvents from 'app/core/app_events';\nimport kbn from 'app/core/utils/kbn';\nimport { getProcessedDataFrames } from 'app/features/query/state/runRequest';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { ZoomOutEvent } from 'app/types/events';\nimport { DataProcessor } from '../graph/data_processor';\nimport { axesEditor } from './axes_editor';\nimport { heatmapDisplayEditor } from './display_editor';\nimport { convertToHeatMap, convertToCards, histogramToHeatmap, calculateBucketSize, sortSeriesByLabel } from './heatmap_data_converter';\nimport rendering from './rendering';\nconst X_BUCKET_NUMBER_DEFAULT = 30;\nconst Y_BUCKET_NUMBER_DEFAULT = 10;\nconst panelDefaults = {\n  heatmap: {},\n  cards: {\n    cardPadding: null,\n    cardRound: null\n  },\n  color: {\n    mode: 'spectrum',\n    cardColor: '#b4ff00',\n    colorScale: 'sqrt',\n    exponent: 0.5,\n    colorScheme: 'interpolateOranges'\n  },\n  legend: {\n    show: false\n  },\n  dataFormat: 'timeseries',\n  yBucketBound: 'auto',\n  reverseYBuckets: false,\n  xAxis: {\n    show: true\n  },\n  yAxis: {\n    show: true,\n    format: 'short',\n    decimals: null,\n    logBase: 1,\n    splitFactor: null,\n    min: null,\n    max: null\n  },\n  xBucketSize: null,\n  xBucketNumber: null,\n  yBucketSize: null,\n  yBucketNumber: null,\n  tooltip: {\n    show: true,\n    showHistogram: false\n  },\n  highlightCards: true,\n  hideZeroBuckets: false\n};\nconst colorModes = ['opacity', 'spectrum'];\nconst opacityScales = ['linear', 'sqrt']; // Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\n\nconst colorSchemes = [// Diverging\n{\n  name: 'Spectral',\n  value: 'interpolateSpectral',\n  invert: 'always'\n}, {\n  name: 'RdYlGn',\n  value: 'interpolateRdYlGn',\n  invert: 'always'\n}, // Sequential (Single Hue)\n{\n  name: 'Blues',\n  value: 'interpolateBlues',\n  invert: 'dark'\n}, {\n  name: 'Greens',\n  value: 'interpolateGreens',\n  invert: 'dark'\n}, {\n  name: 'Greys',\n  value: 'interpolateGreys',\n  invert: 'dark'\n}, {\n  name: 'Oranges',\n  value: 'interpolateOranges',\n  invert: 'dark'\n}, {\n  name: 'Purples',\n  value: 'interpolatePurples',\n  invert: 'dark'\n}, {\n  name: 'Reds',\n  value: 'interpolateReds',\n  invert: 'dark'\n}, // Sequential (Multi-Hue)\n{\n  name: 'Turbo',\n  value: 'interpolateTurbo',\n  invert: 'light'\n}, {\n  name: 'Cividis',\n  value: 'interpolateCividis',\n  invert: 'light'\n}, {\n  name: 'Viridis',\n  value: 'interpolateViridis',\n  invert: 'light'\n}, {\n  name: 'Magma',\n  value: 'interpolateMagma',\n  invert: 'light'\n}, {\n  name: 'Inferno',\n  value: 'interpolateInferno',\n  invert: 'light'\n}, {\n  name: 'Plasma',\n  value: 'interpolatePlasma',\n  invert: 'light'\n}, {\n  name: 'Warm',\n  value: 'interpolateWarm',\n  invert: 'light'\n}, {\n  name: 'Cool',\n  value: 'interpolateCool',\n  invert: 'light'\n}, {\n  name: 'Cubehelix',\n  value: 'interpolateCubehelixDefault',\n  invert: 'light'\n}, {\n  name: 'BuGn',\n  value: 'interpolateBuGn',\n  invert: 'dark'\n}, {\n  name: 'BuPu',\n  value: 'interpolateBuPu',\n  invert: 'dark'\n}, {\n  name: 'GnBu',\n  value: 'interpolateGnBu',\n  invert: 'dark'\n}, {\n  name: 'OrRd',\n  value: 'interpolateOrRd',\n  invert: 'dark'\n}, {\n  name: 'PuBuGn',\n  value: 'interpolatePuBuGn',\n  invert: 'dark'\n}, {\n  name: 'PuBu',\n  value: 'interpolatePuBu',\n  invert: 'dark'\n}, {\n  name: 'PuRd',\n  value: 'interpolatePuRd',\n  invert: 'dark'\n}, {\n  name: 'RdPu',\n  value: 'interpolateRdPu',\n  invert: 'dark'\n}, {\n  name: 'YlGnBu',\n  value: 'interpolateYlGnBu',\n  invert: 'dark'\n}, {\n  name: 'YlGn',\n  value: 'interpolateYlGn',\n  invert: 'dark'\n}, {\n  name: 'YlOrBr',\n  value: 'interpolateYlOrBr',\n  invert: 'dark'\n}, {\n  name: 'YlOrRd',\n  value: 'interpolateYlOrRd',\n  invert: 'dark'\n}];\nconst dsSupportHistogramSort = ['elasticsearch'];\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n  // Shared with graph panel\n\n  /** @ngInject */\n  constructor($scope, $injector, templateSrv, timeSrv) {\n    super($scope, $injector);\n\n    _defineProperty(this, \"opacityScales\", []);\n\n    _defineProperty(this, \"colorModes\", []);\n\n    _defineProperty(this, \"colorSchemes\", []);\n\n    _defineProperty(this, \"selectionActivated\", void 0);\n\n    _defineProperty(this, \"unitFormats\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    _defineProperty(this, \"series\", []);\n\n    _defineProperty(this, \"dataWarning\", void 0);\n\n    _defineProperty(this, \"decimals\", 0);\n\n    _defineProperty(this, \"scaledDecimals\", 0);\n\n    _defineProperty(this, \"processor\", void 0);\n\n    this.selectionActivated = false;\n    defaultsDeep(this.panel, panelDefaults);\n    this.opacityScales = opacityScales;\n    this.colorModes = colorModes;\n    this.colorSchemes = colorSchemes; // Use DataFrames\n\n    this.useDataFrames = true;\n    this.processor = new DataProcessor({\n      xaxis: {\n        mode: 'custom'\n      },\n      // NOT: 'histogram' :)\n      aliasColors: {} // avoids null reference\n\n    }); // Bind grafana panel events\n\n    this.events.on(PanelEvents.render, this.onRender.bind(this));\n    this.events.on(PanelEvents.dataFramesReceived, this.onDataFramesReceived.bind(this));\n    this.events.on(PanelEvents.dataSnapshotLoad, this.onSnapshotLoad.bind(this));\n    this.events.on(PanelEvents.editModeInitialized, this.onInitEditMode.bind(this));\n    this.onCardColorChange = this.onCardColorChange.bind(this); // Make sure we do not save the version so migration to react version is kicked off\n\n    delete this.panel.pluginVersion;\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Axes', axesEditor, 2);\n    this.addEditorTab('Display', heatmapDisplayEditor, 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  zoomOut(evt) {\n    appEvents.publish(new ZoomOutEvent({\n      scale: 2\n    }));\n  }\n\n  onRender() {\n    if (this.panel.dataFormat === 'tsbuckets') {\n      this.convertHistogramToHeatmapData();\n    } else {\n      this.convertTimeSeriesToHeatmapData();\n    }\n  }\n\n  convertTimeSeriesToHeatmapData() {\n    if (!this.range || !this.series) {\n      return;\n    }\n\n    let xBucketSize, yBucketSize, bucketsData, heatmapStats;\n    const logBase = this.panel.yAxis.logBase;\n    const xBucketNumber = this.panel.xBucketNumber || X_BUCKET_NUMBER_DEFAULT;\n    const xBucketSizeByNumber = Math.floor((this.range.to.valueOf() - this.range.from.valueOf()) / xBucketNumber); // Parse X bucket size (number or interval)\n\n    const isIntervalString = kbn.intervalRegex.test(this.panel.xBucketSize);\n\n    if (isIntervalString) {\n      xBucketSize = rangeUtil.intervalToMs(this.panel.xBucketSize);\n    } else if (isNaN(Number(this.panel.xBucketSize)) || this.panel.xBucketSize === '' || this.panel.xBucketSize === null) {\n      xBucketSize = xBucketSizeByNumber;\n    } else {\n      xBucketSize = Number(this.panel.xBucketSize);\n    } // Calculate Y bucket size\n\n\n    heatmapStats = this.parseSeries(this.series);\n    const yBucketNumber = this.panel.yBucketNumber || Y_BUCKET_NUMBER_DEFAULT;\n\n    if (logBase !== 1) {\n      yBucketSize = this.panel.yAxis.splitFactor;\n    } else {\n      if (heatmapStats.max === heatmapStats.min) {\n        if (heatmapStats.max) {\n          yBucketSize = heatmapStats.max / Y_BUCKET_NUMBER_DEFAULT;\n        } else {\n          yBucketSize = 1;\n        }\n      } else {\n        yBucketSize = (heatmapStats.max - heatmapStats.min) / yBucketNumber;\n      }\n\n      yBucketSize = this.panel.yBucketSize || yBucketSize;\n    }\n\n    bucketsData = convertToHeatMap(this.series, yBucketSize, xBucketSize, logBase); // Set default Y range if no data\n\n    if (!heatmapStats.min && !heatmapStats.max) {\n      heatmapStats = {\n        min: -1,\n        max: 1,\n        minLog: 1\n      };\n      yBucketSize = 1;\n    }\n\n    const {\n      cards,\n      cardStats\n    } = convertToCards(bucketsData, this.panel.hideZeroBuckets);\n    this.data = {\n      buckets: bucketsData,\n      heatmapStats: heatmapStats,\n      xBucketSize: xBucketSize,\n      yBucketSize: yBucketSize,\n      cards: cards,\n      cardStats: cardStats\n    };\n  }\n\n  convertHistogramToHeatmapData() {\n    if (!this.range || !this.series) {\n      return;\n    }\n\n    const panelDatasource = this.getPanelDataSourceType();\n    let xBucketSize, yBucketSize, bucketsData, tsBuckets; // Try to sort series by bucket bound, if datasource doesn't do it.\n\n    if (!includes(dsSupportHistogramSort, panelDatasource)) {\n      this.series.sort(sortSeriesByLabel);\n    }\n\n    if (this.panel.reverseYBuckets) {\n      this.series.reverse();\n    } // Convert histogram to heatmap. Each histogram bucket represented by the series which name is\n    // a top (or bottom, depends of datasource) bucket bound. Further, these values will be used as Y axis labels.\n\n\n    bucketsData = histogramToHeatmap(this.series);\n    tsBuckets = map(this.series, 'label');\n    const yBucketBound = this.panel.yBucketBound;\n\n    if (panelDatasource === 'prometheus' && yBucketBound !== 'lower' && yBucketBound !== 'middle' || yBucketBound === 'upper') {\n      // Prometheus labels are upper inclusive bounds, so add empty bottom bucket label.\n      tsBuckets = [''].concat(tsBuckets);\n    } else {\n      // Elasticsearch uses labels as lower bucket bounds, so add empty top bucket label.\n      // Use this as a default mode as well.\n      tsBuckets.push('');\n    } // Calculate bucket size based on heatmap data\n\n\n    const xBucketBoundSet = map(keys(bucketsData), key => Number(key));\n    xBucketSize = calculateBucketSize(xBucketBoundSet); // Always let yBucketSize=1 in 'tsbuckets' mode\n\n    yBucketSize = 1;\n    const {\n      cards,\n      cardStats\n    } = convertToCards(bucketsData, this.panel.hideZeroBuckets);\n    this.data = {\n      buckets: bucketsData,\n      xBucketSize: xBucketSize,\n      yBucketSize: yBucketSize,\n      tsBuckets: tsBuckets,\n      cards: cards,\n      cardStats: cardStats\n    };\n  }\n\n  getPanelDataSourceType() {\n    if (this.datasource && this.datasource.meta && this.datasource.meta.id) {\n      return this.datasource.meta.id;\n    } else {\n      return 'unknown';\n    }\n  } // This should only be called from the snapshot callback\n\n\n  onSnapshotLoad(dataList) {\n    this.onDataFramesReceived(getProcessedDataFrames(dataList));\n  } // Directly support DataFrame\n\n\n  onDataFramesReceived(data) {\n    this.series = this.processor.getSeriesList({\n      dataList: data,\n      range: this.range\n    }).map(ts => {\n      ts.color = undefined; // remove whatever the processor set\n\n      ts.flotpairs = ts.getFlotPairs(this.panel.nullPointMode);\n      return ts;\n    });\n    this.dataWarning = null;\n    const datapointsCount = reduce(this.series, (sum, series) => {\n      return sum + series.datapoints.length;\n    }, 0);\n\n    if (datapointsCount === 0) {\n      this.dataWarning = {\n        title: 'No data points',\n        tip: 'No datapoints returned from data query'\n      };\n    } else {\n      for (const series of this.series) {\n        if (series.isOutsideRange) {\n          this.dataWarning = {\n            title: 'Data points outside time range',\n            tip: 'Can be caused by timezone mismatch or missing time filter in query'\n          };\n          break;\n        }\n      }\n    }\n\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onCardColorChange(newColor) {\n    this.panel.color.cardColor = newColor;\n    this.render();\n  }\n\n  parseSeries(series) {\n    const min = _min(map(series, s => s.stats.min));\n\n    const minLog = _min(map(series, s => s.stats.logmin));\n\n    const max = _max(map(series, s => s.stats.max));\n\n    return {\n      max,\n      min,\n      minLog\n    };\n  }\n\n  parseHistogramSeries(series) {\n    const bounds = map(series, s => Number(s.alias));\n\n    const min = _min(bounds);\n\n    const minLog = _min(bounds);\n\n    const max = _max(bounds);\n\n    return {\n      max: max,\n      min: min,\n      minLog: minLog\n    };\n  }\n\n  link(scope, elem, attrs, ctrl) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n\n}\nHeatmapCtrl.$inject = [\"$scope\", \"$injector\", \"templateSrv\", \"timeSrv\"];\n\n_defineProperty(HeatmapCtrl, \"templateUrl\", 'module.html');","map":{"version":3,"names":["defaultsDeep","includes","keys","map","reduce","min","_min","max","_max","PanelEvents","rangeUtil","appEvents","kbn","getProcessedDataFrames","MetricsPanelCtrl","ZoomOutEvent","DataProcessor","axesEditor","heatmapDisplayEditor","convertToHeatMap","convertToCards","histogramToHeatmap","calculateBucketSize","sortSeriesByLabel","rendering","X_BUCKET_NUMBER_DEFAULT","Y_BUCKET_NUMBER_DEFAULT","panelDefaults","heatmap","cards","cardPadding","cardRound","color","mode","cardColor","colorScale","exponent","colorScheme","legend","show","dataFormat","yBucketBound","reverseYBuckets","xAxis","yAxis","format","decimals","logBase","splitFactor","xBucketSize","xBucketNumber","yBucketSize","yBucketNumber","tooltip","showHistogram","highlightCards","hideZeroBuckets","colorModes","opacityScales","colorSchemes","name","value","invert","dsSupportHistogramSort","HeatmapCtrl","constructor","$scope","$injector","templateSrv","timeSrv","selectionActivated","panel","useDataFrames","processor","xaxis","aliasColors","events","on","render","onRender","bind","dataFramesReceived","onDataFramesReceived","dataSnapshotLoad","onSnapshotLoad","editModeInitialized","onInitEditMode","onCardColorChange","pluginVersion","addEditorTab","unitFormats","getUnitFormats","zoomOut","evt","publish","scale","convertHistogramToHeatmapData","convertTimeSeriesToHeatmapData","range","series","bucketsData","heatmapStats","xBucketSizeByNumber","Math","floor","to","valueOf","from","isIntervalString","intervalRegex","test","intervalToMs","isNaN","Number","parseSeries","minLog","cardStats","data","buckets","panelDatasource","getPanelDataSourceType","tsBuckets","sort","reverse","concat","push","xBucketBoundSet","key","datasource","meta","id","dataList","getSeriesList","ts","undefined","flotpairs","getFlotPairs","nullPointMode","dataWarning","datapointsCount","sum","datapoints","length","title","tip","isOutsideRange","onDataError","newColor","s","stats","logmin","parseHistogramSeries","bounds","alias","link","scope","elem","attrs","ctrl"],"sources":["/home/soula/grafana/public/app/plugins/panel/heatmap-old/heatmap_ctrl.ts"],"sourcesContent":["import { auto } from 'angular';\nimport { defaultsDeep, includes, keys, map, reduce, min as _min, max as _max } from 'lodash';\n\nimport { LegacyResponseData, PanelEvents, DataFrame, rangeUtil } from '@grafana/data';\nimport appEvents from 'app/core/app_events';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getProcessedDataFrames } from 'app/features/query/state/runRequest';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { ZoomOutEvent } from 'app/types/events';\n\nimport { DataProcessor } from '../graph/data_processor';\n\nimport { axesEditor } from './axes_editor';\nimport { heatmapDisplayEditor } from './display_editor';\nimport {\n  convertToHeatMap,\n  convertToCards,\n  histogramToHeatmap,\n  calculateBucketSize,\n  sortSeriesByLabel,\n} from './heatmap_data_converter';\nimport rendering from './rendering';\n\nconst X_BUCKET_NUMBER_DEFAULT = 30;\nconst Y_BUCKET_NUMBER_DEFAULT = 10;\n\nconst panelDefaults: any = {\n  heatmap: {},\n  cards: {\n    cardPadding: null,\n    cardRound: null,\n  },\n  color: {\n    mode: 'spectrum',\n    cardColor: '#b4ff00',\n    colorScale: 'sqrt',\n    exponent: 0.5,\n    colorScheme: 'interpolateOranges',\n  },\n  legend: {\n    show: false,\n  },\n  dataFormat: 'timeseries',\n  yBucketBound: 'auto',\n  reverseYBuckets: false,\n  xAxis: {\n    show: true,\n  },\n  yAxis: {\n    show: true,\n    format: 'short',\n    decimals: null,\n    logBase: 1,\n    splitFactor: null,\n    min: null,\n    max: null,\n  },\n  xBucketSize: null,\n  xBucketNumber: null,\n  yBucketSize: null,\n  yBucketNumber: null,\n  tooltip: {\n    show: true,\n    showHistogram: false,\n  },\n  highlightCards: true,\n  hideZeroBuckets: false,\n};\n\nconst colorModes = ['opacity', 'spectrum'];\nconst opacityScales = ['linear', 'sqrt'];\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nconst colorSchemes = [\n  // Diverging\n  { name: 'Spectral', value: 'interpolateSpectral', invert: 'always' },\n  { name: 'RdYlGn', value: 'interpolateRdYlGn', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', value: 'interpolateBlues', invert: 'dark' },\n  { name: 'Greens', value: 'interpolateGreens', invert: 'dark' },\n  { name: 'Greys', value: 'interpolateGreys', invert: 'dark' },\n  { name: 'Oranges', value: 'interpolateOranges', invert: 'dark' },\n  { name: 'Purples', value: 'interpolatePurples', invert: 'dark' },\n  { name: 'Reds', value: 'interpolateReds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Turbo', value: 'interpolateTurbo', invert: 'light' },\n  { name: 'Cividis', value: 'interpolateCividis', invert: 'light' },\n  { name: 'Viridis', value: 'interpolateViridis', invert: 'light' },\n  { name: 'Magma', value: 'interpolateMagma', invert: 'light' },\n  { name: 'Inferno', value: 'interpolateInferno', invert: 'light' },\n  { name: 'Plasma', value: 'interpolatePlasma', invert: 'light' },\n  { name: 'Warm', value: 'interpolateWarm', invert: 'light' },\n  { name: 'Cool', value: 'interpolateCool', invert: 'light' },\n  { name: 'Cubehelix', value: 'interpolateCubehelixDefault', invert: 'light' },\n  { name: 'BuGn', value: 'interpolateBuGn', invert: 'dark' },\n  { name: 'BuPu', value: 'interpolateBuPu', invert: 'dark' },\n  { name: 'GnBu', value: 'interpolateGnBu', invert: 'dark' },\n  { name: 'OrRd', value: 'interpolateOrRd', invert: 'dark' },\n  { name: 'PuBuGn', value: 'interpolatePuBuGn', invert: 'dark' },\n  { name: 'PuBu', value: 'interpolatePuBu', invert: 'dark' },\n  { name: 'PuRd', value: 'interpolatePuRd', invert: 'dark' },\n  { name: 'RdPu', value: 'interpolateRdPu', invert: 'dark' },\n  { name: 'YlGnBu', value: 'interpolateYlGnBu', invert: 'dark' },\n  { name: 'YlGn', value: 'interpolateYlGn', invert: 'dark' },\n  { name: 'YlOrBr', value: 'interpolateYlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', value: 'interpolateYlOrRd', invert: 'dark' },\n];\n\nconst dsSupportHistogramSort = ['elasticsearch'];\n\nexport class HeatmapCtrl extends MetricsPanelCtrl {\n  static templateUrl = 'module.html';\n\n  opacityScales: any = [];\n  colorModes: any = [];\n  colorSchemes: any = [];\n  selectionActivated: boolean;\n  unitFormats: any;\n  data: any;\n  series: TimeSeries[] = [];\n  dataWarning: any;\n  decimals = 0;\n  scaledDecimals = 0;\n\n  processor: DataProcessor; // Shared with graph panel\n\n  /** @ngInject */\n  constructor($scope: any, $injector: auto.IInjectorService, templateSrv: TemplateSrv, timeSrv: TimeSrv) {\n    super($scope, $injector);\n\n    this.selectionActivated = false;\n\n    defaultsDeep(this.panel, panelDefaults);\n    this.opacityScales = opacityScales;\n    this.colorModes = colorModes;\n    this.colorSchemes = colorSchemes;\n\n    // Use DataFrames\n    this.useDataFrames = true;\n    this.processor = new DataProcessor({\n      xaxis: { mode: 'custom' }, // NOT: 'histogram' :)\n      aliasColors: {}, // avoids null reference\n    });\n\n    // Bind grafana panel events\n    this.events.on(PanelEvents.render, this.onRender.bind(this));\n    this.events.on(PanelEvents.dataFramesReceived, this.onDataFramesReceived.bind(this));\n    this.events.on(PanelEvents.dataSnapshotLoad, this.onSnapshotLoad.bind(this));\n    this.events.on(PanelEvents.editModeInitialized, this.onInitEditMode.bind(this));\n\n    this.onCardColorChange = this.onCardColorChange.bind(this);\n\n    // Make sure we do not save the version so migration to react version is kicked off\n    delete this.panel.pluginVersion;\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Axes', axesEditor, 2);\n    this.addEditorTab('Display', heatmapDisplayEditor, 3);\n    this.unitFormats = kbn.getUnitFormats();\n  }\n\n  zoomOut(evt: any) {\n    appEvents.publish(new ZoomOutEvent({ scale: 2 }));\n  }\n\n  onRender() {\n    if (this.panel.dataFormat === 'tsbuckets') {\n      this.convertHistogramToHeatmapData();\n    } else {\n      this.convertTimeSeriesToHeatmapData();\n    }\n  }\n\n  convertTimeSeriesToHeatmapData() {\n    if (!this.range || !this.series) {\n      return;\n    }\n\n    let xBucketSize, yBucketSize, bucketsData, heatmapStats;\n    const logBase = this.panel.yAxis.logBase;\n\n    const xBucketNumber = this.panel.xBucketNumber || X_BUCKET_NUMBER_DEFAULT;\n    const xBucketSizeByNumber = Math.floor((this.range.to.valueOf() - this.range.from.valueOf()) / xBucketNumber);\n\n    // Parse X bucket size (number or interval)\n    const isIntervalString = kbn.intervalRegex.test(this.panel.xBucketSize);\n    if (isIntervalString) {\n      xBucketSize = rangeUtil.intervalToMs(this.panel.xBucketSize);\n    } else if (\n      isNaN(Number(this.panel.xBucketSize)) ||\n      this.panel.xBucketSize === '' ||\n      this.panel.xBucketSize === null\n    ) {\n      xBucketSize = xBucketSizeByNumber;\n    } else {\n      xBucketSize = Number(this.panel.xBucketSize);\n    }\n\n    // Calculate Y bucket size\n    heatmapStats = this.parseSeries(this.series);\n    const yBucketNumber = this.panel.yBucketNumber || Y_BUCKET_NUMBER_DEFAULT;\n    if (logBase !== 1) {\n      yBucketSize = this.panel.yAxis.splitFactor;\n    } else {\n      if (heatmapStats.max === heatmapStats.min) {\n        if (heatmapStats.max) {\n          yBucketSize = heatmapStats.max / Y_BUCKET_NUMBER_DEFAULT;\n        } else {\n          yBucketSize = 1;\n        }\n      } else {\n        yBucketSize = (heatmapStats.max - heatmapStats.min) / yBucketNumber;\n      }\n      yBucketSize = this.panel.yBucketSize || yBucketSize;\n    }\n\n    bucketsData = convertToHeatMap(this.series, yBucketSize, xBucketSize, logBase);\n\n    // Set default Y range if no data\n    if (!heatmapStats.min && !heatmapStats.max) {\n      heatmapStats = { min: -1, max: 1, minLog: 1 };\n      yBucketSize = 1;\n    }\n\n    const { cards, cardStats } = convertToCards(bucketsData, this.panel.hideZeroBuckets);\n\n    this.data = {\n      buckets: bucketsData,\n      heatmapStats: heatmapStats,\n      xBucketSize: xBucketSize,\n      yBucketSize: yBucketSize,\n      cards: cards,\n      cardStats: cardStats,\n    };\n  }\n\n  convertHistogramToHeatmapData() {\n    if (!this.range || !this.series) {\n      return;\n    }\n\n    const panelDatasource = this.getPanelDataSourceType();\n    let xBucketSize, yBucketSize, bucketsData, tsBuckets;\n\n    // Try to sort series by bucket bound, if datasource doesn't do it.\n    if (!includes(dsSupportHistogramSort, panelDatasource)) {\n      this.series.sort(sortSeriesByLabel);\n    }\n\n    if (this.panel.reverseYBuckets) {\n      this.series.reverse();\n    }\n\n    // Convert histogram to heatmap. Each histogram bucket represented by the series which name is\n    // a top (or bottom, depends of datasource) bucket bound. Further, these values will be used as Y axis labels.\n    bucketsData = histogramToHeatmap(this.series);\n\n    tsBuckets = map(this.series, 'label');\n    const yBucketBound = this.panel.yBucketBound;\n    if (\n      (panelDatasource === 'prometheus' && yBucketBound !== 'lower' && yBucketBound !== 'middle') ||\n      yBucketBound === 'upper'\n    ) {\n      // Prometheus labels are upper inclusive bounds, so add empty bottom bucket label.\n      tsBuckets = [''].concat(tsBuckets);\n    } else {\n      // Elasticsearch uses labels as lower bucket bounds, so add empty top bucket label.\n      // Use this as a default mode as well.\n      tsBuckets.push('');\n    }\n\n    // Calculate bucket size based on heatmap data\n    const xBucketBoundSet = map(keys(bucketsData), (key) => Number(key));\n    xBucketSize = calculateBucketSize(xBucketBoundSet);\n    // Always let yBucketSize=1 in 'tsbuckets' mode\n    yBucketSize = 1;\n\n    const { cards, cardStats } = convertToCards(bucketsData, this.panel.hideZeroBuckets);\n\n    this.data = {\n      buckets: bucketsData,\n      xBucketSize: xBucketSize,\n      yBucketSize: yBucketSize,\n      tsBuckets: tsBuckets,\n      cards: cards,\n      cardStats: cardStats,\n    };\n  }\n\n  getPanelDataSourceType() {\n    if (this.datasource && this.datasource.meta && this.datasource.meta.id) {\n      return this.datasource.meta.id;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  // This should only be called from the snapshot callback\n  onSnapshotLoad(dataList: LegacyResponseData[]) {\n    this.onDataFramesReceived(getProcessedDataFrames(dataList));\n  }\n\n  // Directly support DataFrame\n  onDataFramesReceived(data: DataFrame[]) {\n    this.series = this.processor.getSeriesList({ dataList: data, range: this.range }).map((ts) => {\n      ts.color = undefined; // remove whatever the processor set\n      ts.flotpairs = ts.getFlotPairs(this.panel.nullPointMode);\n      return ts;\n    });\n\n    this.dataWarning = null;\n    const datapointsCount = reduce(\n      this.series,\n      (sum, series) => {\n        return sum + series.datapoints.length;\n      },\n      0\n    );\n\n    if (datapointsCount === 0) {\n      this.dataWarning = {\n        title: 'No data points',\n        tip: 'No datapoints returned from data query',\n      };\n    } else {\n      for (const series of this.series) {\n        if (series.isOutsideRange) {\n          this.dataWarning = {\n            title: 'Data points outside time range',\n            tip: 'Can be caused by timezone mismatch or missing time filter in query',\n          };\n          break;\n        }\n      }\n    }\n\n    this.render();\n  }\n\n  onDataError() {\n    this.series = [];\n    this.render();\n  }\n\n  onCardColorChange(newColor: any) {\n    this.panel.color.cardColor = newColor;\n    this.render();\n  }\n\n  parseSeries(series: TimeSeries[]) {\n    const min = _min(map(series, (s) => s.stats.min));\n    const minLog = _min(map(series, (s) => s.stats.logmin));\n    const max = _max(map(series, (s) => s.stats.max));\n\n    return {\n      max,\n      min,\n      minLog,\n    };\n  }\n\n  parseHistogramSeries(series: TimeSeries[]) {\n    const bounds = map(series, (s) => Number(s.alias));\n    const min = _min(bounds);\n    const minLog = _min(bounds);\n    const max = _max(bounds);\n\n    return {\n      max: max,\n      min: min,\n      minLog: minLog,\n    };\n  }\n\n  link(scope: any, elem: any, attrs: any, ctrl: any) {\n    rendering(scope, elem, attrs, ctrl);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}