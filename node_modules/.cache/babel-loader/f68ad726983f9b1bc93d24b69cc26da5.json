{"ast":null,"code":"var _Alert;\n\nimport { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useMountedState } from 'react-use';\nimport { takeWhile } from 'rxjs/operators';\nimport { dateTimeFormatISO, LoadingState } from '@grafana/data';\nimport { Alert, Button, HorizontalGroup, useStyles2 } from '@grafana/ui';\nimport { previewAlertRule } from '../../api/preview';\nimport { useAlertQueriesStatus } from '../../hooks/useAlertQueriesStatus';\nimport { RuleFormType } from '../../types/rule-form';\nimport { PreviewRuleResult } from './PreviewRuleResult';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst fields = ['type', 'dataSourceName', 'condition', 'queries', 'expression'];\nexport function PreviewRule() {\n  const styles = useStyles2(getStyles);\n  const [preview, onPreview] = usePreview();\n  const {\n    watch\n  } = useFormContext();\n  const [type, condition, queries] = watch(['type', 'condition', 'queries']);\n  const {\n    allDataSourcesAvailable\n  } = useAlertQueriesStatus(queries);\n\n  if (type === RuleFormType.cloudRecording || type === RuleFormType.cloudAlerting) {\n    return null;\n  }\n\n  const isPreviewAvailable = Boolean(condition) && allDataSourcesAvailable;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxs(HorizontalGroup, {\n      children: [allDataSourcesAvailable && /*#__PURE__*/_jsx(Button, {\n        disabled: !isPreviewAvailable,\n        type: \"button\",\n        variant: \"primary\",\n        onClick: onPreview,\n        children: \"Preview alerts\"\n      }), !allDataSourcesAvailable && (_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n        title: \"Preview is not available\",\n        severity: \"warning\",\n        children: \"Cannot display the query preview. Some of the data sources used in the queries are not available.\"\n      })))]\n    }), /*#__PURE__*/_jsx(PreviewRuleResult, {\n      preview: preview\n    })]\n  });\n}\n\nfunction usePreview() {\n  const [preview, setPreview] = useState();\n  const {\n    getValues\n  } = useFormContext();\n  const isMounted = useMountedState();\n  const onPreview = useCallback(() => {\n    const values = getValues(fields);\n    const request = createPreviewRequest(values);\n    previewAlertRule(request).pipe(takeWhile(response => !isCompleted(response), true)).subscribe(response => {\n      if (!isMounted()) {\n        return;\n      }\n\n      setPreview(response);\n    });\n  }, [getValues, isMounted]);\n  return [preview, onPreview];\n}\n\nfunction createPreviewRequest(values) {\n  const [type, dataSourceName, condition, queries, expression] = values;\n\n  switch (type) {\n    case RuleFormType.cloudAlerting:\n      return {\n        dataSourceName,\n        expr: expression\n      };\n\n    case RuleFormType.grafana:\n      return {\n        grafana_condition: {\n          condition,\n          data: queries,\n          now: dateTimeFormatISO(Date.now())\n        }\n      };\n\n    default:\n      throw new Error(`Alert type ${type} not supported by preview.`);\n  }\n}\n\nfunction isCompleted(response) {\n  switch (response.data.state) {\n    case LoadingState.Done:\n    case LoadingState.Error:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nfunction getStyles(theme) {\n  return {\n    container: css`\n      margin-top: ${theme.spacing(2)};\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `\n  };\n}","map":{"version":3,"names":["css","React","useCallback","useState","useFormContext","useMountedState","takeWhile","dateTimeFormatISO","LoadingState","Alert","Button","HorizontalGroup","useStyles2","previewAlertRule","useAlertQueriesStatus","RuleFormType","PreviewRuleResult","fields","PreviewRule","styles","getStyles","preview","onPreview","usePreview","watch","type","condition","queries","allDataSourcesAvailable","cloudRecording","cloudAlerting","isPreviewAvailable","Boolean","container","setPreview","getValues","isMounted","values","request","createPreviewRequest","pipe","response","isCompleted","subscribe","dataSourceName","expression","expr","grafana","grafana_condition","data","now","Date","Error","state","Done","theme","spacing","breakpoints","xxl"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/PreviewRule.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useMountedState } from 'react-use';\nimport { takeWhile } from 'rxjs/operators';\n\nimport { dateTimeFormatISO, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { Alert, Button, HorizontalGroup, useStyles2 } from '@grafana/ui';\n\nimport { previewAlertRule } from '../../api/preview';\nimport { useAlertQueriesStatus } from '../../hooks/useAlertQueriesStatus';\nimport { PreviewRuleRequest, PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\n\nimport { PreviewRuleResult } from './PreviewRuleResult';\n\nconst fields: Array<keyof RuleFormValues> = ['type', 'dataSourceName', 'condition', 'queries', 'expression'];\n\nexport function PreviewRule(): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  const [preview, onPreview] = usePreview();\n  const { watch } = useFormContext<RuleFormValues>();\n  const [type, condition, queries] = watch(['type', 'condition', 'queries']);\n  const { allDataSourcesAvailable } = useAlertQueriesStatus(queries);\n\n  if (type === RuleFormType.cloudRecording || type === RuleFormType.cloudAlerting) {\n    return null;\n  }\n\n  const isPreviewAvailable = Boolean(condition) && allDataSourcesAvailable;\n\n  return (\n    <div className={styles.container}>\n      <HorizontalGroup>\n        {allDataSourcesAvailable && (\n          <Button disabled={!isPreviewAvailable} type=\"button\" variant=\"primary\" onClick={onPreview}>\n            Preview alerts\n          </Button>\n        )}\n        {!allDataSourcesAvailable && (\n          <Alert title=\"Preview is not available\" severity=\"warning\">\n            Cannot display the query preview. Some of the data sources used in the queries are not available.\n          </Alert>\n        )}\n      </HorizontalGroup>\n      <PreviewRuleResult preview={preview} />\n    </div>\n  );\n}\n\nfunction usePreview(): [PreviewRuleResponse | undefined, () => void] {\n  const [preview, setPreview] = useState<PreviewRuleResponse | undefined>();\n  const { getValues } = useFormContext<RuleFormValues>();\n  const isMounted = useMountedState();\n\n  const onPreview = useCallback(() => {\n    const values = getValues(fields);\n    const request = createPreviewRequest(values);\n\n    previewAlertRule(request)\n      .pipe(takeWhile((response) => !isCompleted(response), true))\n      .subscribe((response) => {\n        if (!isMounted()) {\n          return;\n        }\n        setPreview(response);\n      });\n  }, [getValues, isMounted]);\n\n  return [preview, onPreview];\n}\n\nfunction createPreviewRequest(values: any[]): PreviewRuleRequest {\n  const [type, dataSourceName, condition, queries, expression] = values;\n\n  switch (type) {\n    case RuleFormType.cloudAlerting:\n      return {\n        dataSourceName,\n        expr: expression,\n      };\n\n    case RuleFormType.grafana:\n      return {\n        grafana_condition: {\n          condition,\n          data: queries,\n          now: dateTimeFormatISO(Date.now()),\n        },\n      };\n\n    default:\n      throw new Error(`Alert type ${type} not supported by preview.`);\n  }\n}\n\nfunction isCompleted(response: PreviewRuleResponse): boolean {\n  switch (response.data.state) {\n    case LoadingState.Done:\n    case LoadingState.Error:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      margin-top: ${theme.spacing(2)};\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}