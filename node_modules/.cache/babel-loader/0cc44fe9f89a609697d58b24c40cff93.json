{"ast":null,"code":"const _excluded = [\"label\", \"labelWidth\", \"inputWidth\", \"onReset\", \"isConfigured\", \"tooltip\", \"placeholder\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport { omit } from 'lodash';\nimport React from 'react';\nimport { Button } from '../Button/Button';\nimport { FormField } from '../FormField/FormField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst getSecretFormFieldStyles = () => {\n  return {\n    noRadiusInput: css`\n      border-bottom-right-radius: 0 !important;\n      border-top-right-radius: 0 !important;\n    `,\n    noRadiusButton: css`\n      border-bottom-left-radius: 0 !important;\n      border-top-left-radius: 0 !important;\n    `\n  };\n};\n/**\n * Form field that has 2 states configured and not configured. If configured it will not show its contents and adds\n * a reset button that will clear the input and makes it accessible. In non configured state it behaves like normal\n * form field. This is used for passwords or anything that is encrypted on the server and is later returned encrypted\n * to the user (like datasource passwords).\n */\n\n\nexport const SecretFormField = _ref => {\n  let {\n    label = 'Password',\n    labelWidth,\n    inputWidth = 12,\n    onReset,\n    isConfigured,\n    tooltip,\n    placeholder = 'Password'\n  } = _ref,\n      inputProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const styles = getSecretFormFieldStyles();\n  return /*#__PURE__*/_jsx(FormField, {\n    label: label,\n    tooltip: tooltip,\n    labelWidth: labelWidth,\n    inputEl: isConfigured ? /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"input\", Object.assign({\n        type: \"text\",\n        className: cx(`gf-form-input width-${inputWidth}`, styles.noRadiusInput),\n        disabled: true,\n        value: \"configured\"\n      }, omit(inputProps, 'value'))), /*#__PURE__*/_jsx(Button, {\n        onClick: onReset,\n        variant: \"secondary\",\n        type: \"button\",\n        children: \"Reset\"\n      })]\n    }) : /*#__PURE__*/_jsx(\"input\", Object.assign({\n      type: \"password\",\n      className: `gf-form-input width-${inputWidth}`,\n      placeholder: placeholder\n    }, inputProps))\n  });\n};\nSecretFormField.displayName = 'SecretFormField';","map":{"version":3,"names":["css","cx","omit","React","Button","FormField","getSecretFormFieldStyles","noRadiusInput","noRadiusButton","SecretFormField","label","labelWidth","inputWidth","onReset","isConfigured","tooltip","placeholder","inputProps","styles","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/SecretFormField/SecretFormField.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { omit } from 'lodash';\nimport React, { InputHTMLAttributes, FunctionComponent } from 'react';\n\nimport { Button } from '../Button/Button';\nimport { FormField } from '../FormField/FormField';\nimport { PopoverContent } from '../Tooltip';\n\nexport interface Props extends Omit<InputHTMLAttributes<HTMLInputElement>, 'onReset'> {\n  // Function to use when reset is clicked. Means you have to reset the input value yourself as this is  uncontrolled\n  // component (or do something else if required).\n  onReset: (event: React.SyntheticEvent<HTMLButtonElement>) => void;\n  isConfigured: boolean;\n\n  label?: string;\n  tooltip?: PopoverContent;\n  labelWidth?: number;\n  inputWidth?: number;\n  // Placeholder of the input field when in non configured state.\n  placeholder?: string;\n}\n\nconst getSecretFormFieldStyles = () => {\n  return {\n    noRadiusInput: css`\n      border-bottom-right-radius: 0 !important;\n      border-top-right-radius: 0 !important;\n    `,\n    noRadiusButton: css`\n      border-bottom-left-radius: 0 !important;\n      border-top-left-radius: 0 !important;\n    `,\n  };\n};\n/**\n * Form field that has 2 states configured and not configured. If configured it will not show its contents and adds\n * a reset button that will clear the input and makes it accessible. In non configured state it behaves like normal\n * form field. This is used for passwords or anything that is encrypted on the server and is later returned encrypted\n * to the user (like datasource passwords).\n */\nexport const SecretFormField: FunctionComponent<Props> = ({\n  label = 'Password',\n  labelWidth,\n  inputWidth = 12,\n  onReset,\n  isConfigured,\n  tooltip,\n  placeholder = 'Password',\n  ...inputProps\n}: Props) => {\n  const styles = getSecretFormFieldStyles();\n  return (\n    <FormField\n      label={label!}\n      tooltip={tooltip}\n      labelWidth={labelWidth}\n      inputEl={\n        isConfigured ? (\n          <>\n            <input\n              type=\"text\"\n              className={cx(`gf-form-input width-${inputWidth}`, styles.noRadiusInput)}\n              disabled={true}\n              value=\"configured\"\n              {...omit(inputProps, 'value')}\n            />\n            <Button onClick={onReset} variant=\"secondary\" type=\"button\">\n              Reset\n            </Button>\n          </>\n        ) : (\n          <input\n            type=\"password\"\n            className={`gf-form-input width-${inputWidth}`}\n            placeholder={placeholder}\n            {...inputProps}\n          />\n        )\n      }\n    />\n  );\n};\n\nSecretFormField.displayName = 'SecretFormField';\n"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAOC,KAAP,MAA8D,OAA9D;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,SAAT,QAA0B,wBAA1B;;;;;AAiBA,MAAMC,wBAAwB,GAAG,MAAM;EACrC,OAAO;IACLC,aAAa,EAAEP,GAAI;AACvB;AACA;AACA,KAJS;IAKLQ,cAAc,EAAER,GAAI;AACxB;AACA;AACA;EARS,CAAP;AAUD,CAXD;AAYA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMS,eAAyC,GAAG,QAS5C;EAAA,IAT6C;IACxDC,KAAK,GAAG,UADgD;IAExDC,UAFwD;IAGxDC,UAAU,GAAG,EAH2C;IAIxDC,OAJwD;IAKxDC,YALwD;IAMxDC,OANwD;IAOxDC,WAAW,GAAG;EAP0C,CAS7C;EAAA,IADRC,UACQ;;EACX,MAAMC,MAAM,GAAGZ,wBAAwB,EAAvC;EACA,oBACE,KAAC,SAAD;IACE,KAAK,EAAEI,KADT;IAEE,OAAO,EAAEK,OAFX;IAGE,UAAU,EAAEJ,UAHd;IAIE,OAAO,EACLG,YAAY,gBACV;MAAA,wBACE;QACE,IAAI,EAAC,MADP;QAEE,SAAS,EAAEb,EAAE,CAAE,uBAAsBW,UAAW,EAAnC,EAAsCM,MAAM,CAACX,aAA7C,CAFf;QAGE,QAAQ,EAAE,IAHZ;QAIE,KAAK,EAAC;MAJR,GAKML,IAAI,CAACe,UAAD,EAAa,OAAb,CALV,EADF,eAQE,KAAC,MAAD;QAAQ,OAAO,EAAEJ,OAAjB;QAA0B,OAAO,EAAC,WAAlC;QAA8C,IAAI,EAAC,QAAnD;QAAA;MAAA,EARF;IAAA,EADU,gBAcV;MACE,IAAI,EAAC,UADP;MAEE,SAAS,EAAG,uBAAsBD,UAAW,EAF/C;MAGE,WAAW,EAAEI;IAHf,GAIMC,UAJN;EAnBN,EADF;AA8BD,CAzCM;AA2CPR,eAAe,CAACU,WAAhB,GAA8B,iBAA9B"},"metadata":{},"sourceType":"module"}