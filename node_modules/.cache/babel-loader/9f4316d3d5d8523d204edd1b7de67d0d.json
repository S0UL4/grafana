{"ast":null,"code":"export const createDimension = (name, columns) => {\n  return {\n    name,\n    columns\n  };\n};\nexport const getColumnsFromDimension = dimension => {\n  return dimension.columns;\n};\nexport const getColumnFromDimension = (dimension, column) => {\n  return dimension.columns[column];\n};\nexport const getValueFromDimension = (dimension, column, row) => {\n  return dimension.columns[column].values.get(row);\n};\nexport const getAllValuesFromDimension = (dimension, column, row) => {\n  return dimension.columns.map(c => c.values.get(row));\n};\nexport const getDimensionByName = (dimensions, name) => dimensions[name];","map":{"version":3,"names":["createDimension","name","columns","getColumnsFromDimension","dimension","getColumnFromDimension","column","getValueFromDimension","row","values","get","getAllValuesFromDimension","map","c","getDimensionByName","dimensions"],"sources":["/home/soula/grafana/packages/grafana-data/src/dataframe/dimensions.ts"],"sourcesContent":["import { KeyValue } from '../types/data';\nimport { Field } from '../types/dataFrame';\n\nexport interface Dimension<T = any> {\n  // Name of the dimension\n  name: string;\n  // Collection of fields representing dimension\n  // I.e. in 2d graph we have two dimension- X and Y axes. Both dimensions can represent\n  // multiple fields being drawn on the graph.\n  // For instance y-axis dimension is a collection of series value fields,\n  // and x-axis dimension is a collection of corresponding time fields\n  columns: Array<Field<T>>;\n}\n\nexport type Dimensions = KeyValue<Dimension>;\n\nexport const createDimension = (name: string, columns: Field[]): Dimension => {\n  return {\n    name,\n    columns,\n  };\n};\n\nexport const getColumnsFromDimension = (dimension: Dimension) => {\n  return dimension.columns;\n};\nexport const getColumnFromDimension = (dimension: Dimension, column: number) => {\n  return dimension.columns[column];\n};\n\nexport const getValueFromDimension = (dimension: Dimension, column: number, row: number) => {\n  return dimension.columns[column].values.get(row);\n};\n\nexport const getAllValuesFromDimension = (dimension: Dimension, column: number, row: number) => {\n  return dimension.columns.map((c) => c.values.get(row));\n};\n\nexport const getDimensionByName = (dimensions: Dimensions, name: string) => dimensions[name];\n"],"mappings":"AAgBA,OAAO,MAAMA,eAAe,GAAG,CAACC,IAAD,EAAeC,OAAf,KAA+C;EAC5E,OAAO;IACLD,IADK;IAELC;EAFK,CAAP;AAID,CALM;AAOP,OAAO,MAAMC,uBAAuB,GAAIC,SAAD,IAA0B;EAC/D,OAAOA,SAAS,CAACF,OAAjB;AACD,CAFM;AAGP,OAAO,MAAMG,sBAAsB,GAAG,CAACD,SAAD,EAAuBE,MAAvB,KAA0C;EAC9E,OAAOF,SAAS,CAACF,OAAV,CAAkBI,MAAlB,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,qBAAqB,GAAG,CAACH,SAAD,EAAuBE,MAAvB,EAAuCE,GAAvC,KAAuD;EAC1F,OAAOJ,SAAS,CAACF,OAAV,CAAkBI,MAAlB,EAA0BG,MAA1B,CAAiCC,GAAjC,CAAqCF,GAArC,CAAP;AACD,CAFM;AAIP,OAAO,MAAMG,yBAAyB,GAAG,CAACP,SAAD,EAAuBE,MAAvB,EAAuCE,GAAvC,KAAuD;EAC9F,OAAOJ,SAAS,CAACF,OAAV,CAAkBU,GAAlB,CAAuBC,CAAD,IAAOA,CAAC,CAACJ,MAAF,CAASC,GAAT,CAAaF,GAAb,CAA7B,CAAP;AACD,CAFM;AAIP,OAAO,MAAMM,kBAAkB,GAAG,CAACC,UAAD,EAAyBd,IAAzB,KAA0Cc,UAAU,CAACd,IAAD,CAA/E"},"metadata":{},"sourceType":"module"}