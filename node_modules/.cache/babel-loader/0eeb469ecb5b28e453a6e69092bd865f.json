{"ast":null,"code":"import * as comlink from 'comlink';\nimport { from, Observable, switchMap } from 'rxjs';\nexport const remoteObservableAsObservable = remoteObs => new Observable(subscriber => {\n  // Passing the callbacks as 3 separate arguments is deprecated, but it's the only option for now\n  //\n  // RxJS recreates the functions via `Function.bind` https://github.com/ReactiveX/rxjs/blob/62aca850a37f598b5db6085661e0594b81ec4281/src/internal/Subscriber.ts#L169\n  // and thus erases the ProxyMarker created via comlink.proxy(fN) when the callbacks\n  // are grouped together in a Observer object (ie. { next: (v) => ..., error: (err) => ..., complete: () => ... })\n  //\n  // solution: TBD (autoproxy all functions?)\n  const remoteSubPromise = remoteObs.subscribe(comlink.proxy(nextValueInRemoteObs => {\n    subscriber.next(nextValueInRemoteObs);\n  }), comlink.proxy(err => {\n    subscriber.error(err);\n  }), comlink.proxy(() => {\n    subscriber.complete();\n  }));\n  return {\n    unsubscribe: () => {\n      remoteSubPromise.then(remoteSub => remoteSub.unsubscribe());\n    }\n  };\n});\nexport const promiseWithRemoteObservableAsObservable = promiseWithProxyObservable => from(promiseWithProxyObservable).pipe(switchMap(val => remoteObservableAsObservable(val)));","map":{"version":3,"names":["comlink","from","Observable","switchMap","remoteObservableAsObservable","remoteObs","subscriber","remoteSubPromise","subscribe","proxy","nextValueInRemoteObs","next","err","error","complete","unsubscribe","then","remoteSub","promiseWithRemoteObservableAsObservable","promiseWithProxyObservable","pipe","val"],"sources":["/home/soula/grafana/public/app/features/live/centrifuge/remoteObservable.ts"],"sourcesContent":["import * as comlink from 'comlink';\nimport { from, Observable, switchMap } from 'rxjs';\n\nexport const remoteObservableAsObservable = <T>(remoteObs: comlink.RemoteObject<Observable<T>>): Observable<T> =>\n  new Observable((subscriber) => {\n    // Passing the callbacks as 3 separate arguments is deprecated, but it's the only option for now\n    //\n    // RxJS recreates the functions via `Function.bind` https://github.com/ReactiveX/rxjs/blob/62aca850a37f598b5db6085661e0594b81ec4281/src/internal/Subscriber.ts#L169\n    // and thus erases the ProxyMarker created via comlink.proxy(fN) when the callbacks\n    // are grouped together in a Observer object (ie. { next: (v) => ..., error: (err) => ..., complete: () => ... })\n    //\n    // solution: TBD (autoproxy all functions?)\n    const remoteSubPromise = remoteObs.subscribe(\n      comlink.proxy((nextValueInRemoteObs: T) => {\n        subscriber.next(nextValueInRemoteObs);\n      }),\n      comlink.proxy((err) => {\n        subscriber.error(err);\n      }),\n      comlink.proxy(() => {\n        subscriber.complete();\n      })\n    );\n    return {\n      unsubscribe: () => {\n        remoteSubPromise.then((remoteSub) => remoteSub.unsubscribe());\n      },\n    };\n  });\n\nexport const promiseWithRemoteObservableAsObservable = <T>(\n  promiseWithProxyObservable: Promise<comlink.RemoteObject<Observable<T>>>\n): Observable<T> => from(promiseWithProxyObservable).pipe(switchMap((val) => remoteObservableAsObservable(val)));\n"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,SAAzB;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,SAA3B,QAA4C,MAA5C;AAEA,OAAO,MAAMC,4BAA4B,GAAOC,SAAJ,IAC1C,IAAIH,UAAJ,CAAgBI,UAAD,IAAgB;EAC7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,gBAAgB,GAAGF,SAAS,CAACG,SAAV,CACvBR,OAAO,CAACS,KAAR,CAAeC,oBAAD,IAA6B;IACzCJ,UAAU,CAACK,IAAX,CAAgBD,oBAAhB;EACD,CAFD,CADuB,EAIvBV,OAAO,CAACS,KAAR,CAAeG,GAAD,IAAS;IACrBN,UAAU,CAACO,KAAX,CAAiBD,GAAjB;EACD,CAFD,CAJuB,EAOvBZ,OAAO,CAACS,KAAR,CAAc,MAAM;IAClBH,UAAU,CAACQ,QAAX;EACD,CAFD,CAPuB,CAAzB;EAWA,OAAO;IACLC,WAAW,EAAE,MAAM;MACjBR,gBAAgB,CAACS,IAAjB,CAAuBC,SAAD,IAAeA,SAAS,CAACF,WAAV,EAArC;IACD;EAHI,CAAP;AAKD,CAxBD,CADK;AA2BP,OAAO,MAAMG,uCAAuC,GAClDC,0BADqD,IAEnClB,IAAI,CAACkB,0BAAD,CAAJ,CAAiCC,IAAjC,CAAsCjB,SAAS,CAAEkB,GAAD,IAASjB,4BAA4B,CAACiB,GAAD,CAAtC,CAA/C,CAFb"},"metadata":{},"sourceType":"module"}