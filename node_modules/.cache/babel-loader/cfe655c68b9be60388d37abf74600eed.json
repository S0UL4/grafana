{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/home/soula/grafana/public/app/features/search/service/types.ts"],"sourcesContent":["import { DataFrameView, SelectableValue } from '@grafana/data';\nimport { TermCount } from 'app/core/components/TagFilter/TagFilter';\n\nexport interface FacetField {\n  field: string;\n  count?: number;\n}\n\nexport interface SearchQuery {\n  query?: string;\n  location?: string;\n  sort?: string;\n  ds_uid?: string;\n  tags?: string[];\n  kind?: string[];\n  uid?: string[];\n  id?: number[];\n  facet?: FacetField[];\n  explain?: boolean;\n  accessInfo?: boolean;\n  hasPreview?: string; // theme\n  limit?: number;\n  from?: number;\n}\n\nexport interface DashboardQueryResult {\n  kind: string; // panel, dashboard, folder\n  name: string;\n  uid: string;\n  url: string; // link to value (unique)\n  panel_type: string;\n  tags: string[];\n  location: string; // url that can be split\n  ds_uid: string[];\n}\n\nexport interface LocationInfo {\n  kind: string;\n  name: string;\n  url: string;\n}\n\nexport interface SearchResultMeta {\n  count: number;\n  max_score: number;\n  locationInfo: Record<string, LocationInfo>;\n  sortBy?: string;\n}\n\nexport interface QueryResponse {\n  view: DataFrameView<DashboardQueryResult>;\n\n  /** Supports lazy loading.  This will mutate the `view` object above, adding rows as needed */\n  loadMoreItems: (startIndex: number, stopIndex: number) => Promise<void>;\n\n  /** Checks if a row in the view needs to be added */\n  isItemLoaded: (index: number) => boolean;\n\n  /** the total query results size */\n  totalRows: number;\n}\n\nexport interface GrafanaSearcher {\n  search: (query: SearchQuery) => Promise<QueryResponse>;\n  tags: (query: SearchQuery) => Promise<TermCount[]>;\n  getSortOptions: () => Promise<SelectableValue[]>;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module"}