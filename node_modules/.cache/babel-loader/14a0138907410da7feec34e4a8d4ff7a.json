{"ast":null,"code":"var _Icon;\n\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Button, ClipboardButton, DatePickerWithInput, Field, FieldSet, HorizontalGroup, Icon, Input, Label, Modal, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst EXPIRATION_OPTIONS = [{\n  label: 'No expiration',\n  value: false\n}, {\n  label: 'Set expiration date',\n  value: true\n}];\nexport const CreateTokenModal = ({\n  isOpen,\n  token,\n  serviceAccountLogin,\n  onCreateToken,\n  onClose\n}) => {\n  let tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  const [defaultTokenName, setDefaultTokenName] = useState('');\n  const [newTokenName, setNewTokenName] = useState('');\n  const [isWithExpirationDate, setIsWithExpirationDate] = useState(false);\n  const [newTokenExpirationDate, setNewTokenExpirationDate] = useState(tomorrow);\n  const [isExpirationDateValid, setIsExpirationDateValid] = useState(newTokenExpirationDate !== '');\n  const styles = useStyles2(getStyles);\n  useEffect(() => {\n    // Generate new token name every time we open modal\n    if (isOpen) {\n      setDefaultTokenName(`${serviceAccountLogin}-${uuidv4()}`);\n    }\n  }, [serviceAccountLogin, isOpen]);\n\n  const onExpirationDateChange = value => {\n    const isValid = value !== '';\n    setIsExpirationDateValid(isValid);\n    setNewTokenExpirationDate(value);\n  };\n\n  const onGenerateToken = () => {\n    onCreateToken({\n      name: newTokenName || defaultTokenName,\n      secondsToLive: isWithExpirationDate ? getSecondsToLive(newTokenExpirationDate) : undefined\n    });\n  };\n\n  const onCloseInternal = () => {\n    setNewTokenName('');\n    setDefaultTokenName('');\n    setIsWithExpirationDate(false);\n    setNewTokenExpirationDate(tomorrow);\n    setIsExpirationDateValid(newTokenExpirationDate !== '');\n    onClose();\n  };\n\n  const modalTitle = /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.modalHeaderTitle,\n    children: [/*#__PURE__*/_jsx(Icon, {\n      className: styles.modalHeaderIcon,\n      name: \"key-skeleton-alt\",\n      size: \"lg\"\n    }), /*#__PURE__*/_jsx(\"span\", {\n      children: !token ? 'Add service account token' : 'Service account token created'\n    })]\n  });\n\n  return /*#__PURE__*/_jsx(Modal, {\n    isOpen: isOpen,\n    title: modalTitle,\n    onDismiss: onCloseInternal,\n    className: styles.modal,\n    contentClassName: styles.modalContent,\n    children: !token ? /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsxs(FieldSet, {\n        children: [/*#__PURE__*/_jsx(Field, {\n          label: \"Display name\",\n          description: \"Name to easily identify the token\",\n          className: styles.modalRow // for now this is required\n          // need to make this optional in backend as well\n          ,\n          required: true,\n          children: /*#__PURE__*/_jsx(Input, {\n            name: \"tokenName\",\n            value: newTokenName,\n            placeholder: defaultTokenName,\n            onChange: e => {\n              setNewTokenName(e.currentTarget.value);\n            }\n          })\n        }), /*#__PURE__*/_jsx(RadioButtonGroup, {\n          className: styles.modalRow,\n          options: EXPIRATION_OPTIONS,\n          value: isWithExpirationDate,\n          onChange: setIsWithExpirationDate,\n          size: \"md\"\n        }), isWithExpirationDate && /*#__PURE__*/_jsx(Field, {\n          label: \"Expiration date\",\n          className: styles.modalRow,\n          children: /*#__PURE__*/_jsx(DatePickerWithInput, {\n            onChange: onExpirationDateChange,\n            value: newTokenExpirationDate,\n            placeholder: \"\",\n            minDate: tomorrow\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: onGenerateToken,\n        disabled: isWithExpirationDate && !isExpirationDateValid,\n        children: \"Generate token\"\n      })]\n    }) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(FieldSet, {\n        children: [/*#__PURE__*/_jsx(Label, {\n          description: \"You will not be able to see or generate it again. Loosing a token requires creating new one.\",\n          className: styles.modalRow,\n          children: \"Copy the token. It will be showed only once.\"\n        }), /*#__PURE__*/_jsx(Field, {\n          label: \"Token\",\n          className: styles.modalRow,\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.modalTokenRow,\n            children: [/*#__PURE__*/_jsx(Input, {\n              name: \"tokenValue\",\n              value: token,\n              readOnly: true\n            }), /*#__PURE__*/_jsxs(ClipboardButton, {\n              className: styles.modalCopyToClipboardButton,\n              variant: \"secondary\",\n              size: \"md\",\n              getText: () => token,\n              children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n                name: \"copy\"\n              })), \" Copy to clipboard\"]\n            })]\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n        children: [/*#__PURE__*/_jsx(ClipboardButton, {\n          variant: \"primary\",\n          getText: () => token,\n          onClipboardCopy: onCloseInternal,\n          children: \"Copy to clipboard and close\"\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"secondary\",\n          onClick: onCloseInternal,\n          children: \"Close\"\n        })]\n      })]\n    })\n  });\n};\n\nconst getSecondsToLive = date => {\n  const dateAsDate = new Date(date);\n  const now = new Date();\n  return Math.ceil((dateAsDate.getTime() - now.getTime()) / 1000);\n};\n\nconst getStyles = theme => {\n  return {\n    modal: css`\n      width: 550px;\n    `,\n    modalContent: css`\n      overflow: visible;\n    `,\n    modalRow: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n    modalTokenRow: css`\n      display: flex;\n    `,\n    modalCopyToClipboardButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n    modalHeaderTitle: css`\n      font-size: ${theme.typography.size.lg};\n      margin: ${theme.spacing(0, 4, 0, 1)};\n      display: flex;\n      align-items: center;\n      position: relative;\n      top: 2px;\n    `,\n    modalHeaderIcon: css`\n      margin-right: ${theme.spacing(2)};\n      font-size: inherit;\n      &:before {\n        vertical-align: baseline;\n      }\n    `\n  };\n};","map":{"version":3,"names":["css","React","useEffect","useState","v4","uuidv4","Button","ClipboardButton","DatePickerWithInput","Field","FieldSet","HorizontalGroup","Icon","Input","Label","Modal","RadioButtonGroup","useStyles2","EXPIRATION_OPTIONS","label","value","CreateTokenModal","isOpen","token","serviceAccountLogin","onCreateToken","onClose","tomorrow","Date","setDate","getDate","defaultTokenName","setDefaultTokenName","newTokenName","setNewTokenName","isWithExpirationDate","setIsWithExpirationDate","newTokenExpirationDate","setNewTokenExpirationDate","isExpirationDateValid","setIsExpirationDateValid","styles","getStyles","onExpirationDateChange","isValid","onGenerateToken","name","secondsToLive","getSecondsToLive","undefined","onCloseInternal","modalTitle","modalHeaderTitle","modalHeaderIcon","modal","modalContent","modalRow","e","currentTarget","modalTokenRow","modalCopyToClipboardButton","date","dateAsDate","now","Math","ceil","getTime","theme","spacing","typography","size","lg"],"sources":["/home/soula/grafana/public/app/features/serviceaccounts/components/CreateTokenModal.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  ClipboardButton,\n  DatePickerWithInput,\n  Field,\n  FieldSet,\n  HorizontalGroup,\n  Icon,\n  Input,\n  Label,\n  Modal,\n  RadioButtonGroup,\n  useStyles2,\n} from '@grafana/ui';\n\nconst EXPIRATION_OPTIONS = [\n  { label: 'No expiration', value: false },\n  { label: 'Set expiration date', value: true },\n];\n\nexport type ServiceAccountToken = {\n  name: string;\n  secondsToLive?: number;\n};\n\ninterface Props {\n  isOpen: boolean;\n  token: string;\n  serviceAccountLogin: string;\n  onCreateToken: (token: ServiceAccountToken) => void;\n  onClose: () => void;\n}\n\nexport const CreateTokenModal = ({ isOpen, token, serviceAccountLogin, onCreateToken, onClose }: Props) => {\n  let tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  const [defaultTokenName, setDefaultTokenName] = useState('');\n  const [newTokenName, setNewTokenName] = useState('');\n  const [isWithExpirationDate, setIsWithExpirationDate] = useState(false);\n  const [newTokenExpirationDate, setNewTokenExpirationDate] = useState<Date | string>(tomorrow);\n  const [isExpirationDateValid, setIsExpirationDateValid] = useState(newTokenExpirationDate !== '');\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Generate new token name every time we open modal\n    if (isOpen) {\n      setDefaultTokenName(`${serviceAccountLogin}-${uuidv4()}`);\n    }\n  }, [serviceAccountLogin, isOpen]);\n\n  const onExpirationDateChange = (value: Date | string) => {\n    const isValid = value !== '';\n    setIsExpirationDateValid(isValid);\n    setNewTokenExpirationDate(value);\n  };\n\n  const onGenerateToken = () => {\n    onCreateToken({\n      name: newTokenName || defaultTokenName,\n      secondsToLive: isWithExpirationDate ? getSecondsToLive(newTokenExpirationDate) : undefined,\n    });\n  };\n\n  const onCloseInternal = () => {\n    setNewTokenName('');\n    setDefaultTokenName('');\n    setIsWithExpirationDate(false);\n    setNewTokenExpirationDate(tomorrow);\n    setIsExpirationDateValid(newTokenExpirationDate !== '');\n    onClose();\n  };\n\n  const modalTitle = (\n    <div className={styles.modalHeaderTitle}>\n      <Icon className={styles.modalHeaderIcon} name=\"key-skeleton-alt\" size=\"lg\" />\n      <span>{!token ? 'Add service account token' : 'Service account token created'}</span>\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={modalTitle}\n      onDismiss={onCloseInternal}\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n    >\n      {!token ? (\n        <div>\n          <FieldSet>\n            <Field\n              label=\"Display name\"\n              description=\"Name to easily identify the token\"\n              className={styles.modalRow}\n              // for now this is required\n              // need to make this optional in backend as well\n              required={true}\n            >\n              <Input\n                name=\"tokenName\"\n                value={newTokenName}\n                placeholder={defaultTokenName}\n                onChange={(e) => {\n                  setNewTokenName(e.currentTarget.value);\n                }}\n              />\n            </Field>\n            <RadioButtonGroup\n              className={styles.modalRow}\n              options={EXPIRATION_OPTIONS}\n              value={isWithExpirationDate}\n              onChange={setIsWithExpirationDate}\n              size=\"md\"\n            />\n            {isWithExpirationDate && (\n              <Field label=\"Expiration date\" className={styles.modalRow}>\n                <DatePickerWithInput\n                  onChange={onExpirationDateChange}\n                  value={newTokenExpirationDate}\n                  placeholder=\"\"\n                  minDate={tomorrow}\n                />\n              </Field>\n            )}\n          </FieldSet>\n          <Button onClick={onGenerateToken} disabled={isWithExpirationDate && !isExpirationDateValid}>\n            Generate token\n          </Button>\n        </div>\n      ) : (\n        <>\n          <FieldSet>\n            <Label\n              description=\"You will not be able to see or generate it again. Loosing a token requires creating new one.\"\n              className={styles.modalRow}\n            >\n              Copy the token. It will be showed only once.\n            </Label>\n            <Field label=\"Token\" className={styles.modalRow}>\n              <div className={styles.modalTokenRow}>\n                <Input name=\"tokenValue\" value={token} readOnly />\n                <ClipboardButton\n                  className={styles.modalCopyToClipboardButton}\n                  variant=\"secondary\"\n                  size=\"md\"\n                  getText={() => token}\n                >\n                  <Icon name=\"copy\" /> Copy to clipboard\n                </ClipboardButton>\n              </div>\n            </Field>\n          </FieldSet>\n          <HorizontalGroup>\n            <ClipboardButton variant=\"primary\" getText={() => token} onClipboardCopy={onCloseInternal}>\n              Copy to clipboard and close\n            </ClipboardButton>\n            <Button variant=\"secondary\" onClick={onCloseInternal}>\n              Close\n            </Button>\n          </HorizontalGroup>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nconst getSecondsToLive = (date: Date | string) => {\n  const dateAsDate = new Date(date);\n  const now = new Date();\n\n  return Math.ceil((dateAsDate.getTime() - now.getTime()) / 1000);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 550px;\n    `,\n    modalContent: css`\n      overflow: visible;\n    `,\n    modalRow: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n    modalTokenRow: css`\n      display: flex;\n    `,\n    modalCopyToClipboardButton: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n    modalHeaderTitle: css`\n      font-size: ${theme.typography.size.lg};\n      margin: ${theme.spacing(0, 4, 0, 1)};\n      display: flex;\n      align-items: center;\n      position: relative;\n      top: 2px;\n    `,\n    modalHeaderIcon: css`\n      margin-right: ${theme.spacing(2)};\n      font-size: inherit;\n      &:before {\n        vertical-align: baseline;\n      }\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}