{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { dateTime } from '@grafana/data';\nimport unifiedAlertingReducer from '../unified/state/reducers';\nimport alertDef from './alertDef';\nexport const initialState = {\n  items: [],\n  searchQuery: '',\n  isLoading: false\n};\nexport const initialChannelState = {\n  notificationChannelTypes: [],\n  notificationChannel: {},\n  notifiers: []\n};\n\nfunction convertToAlertRule(dto, state) {\n  const stateModel = alertDef.getStateDisplayModel(state);\n  const rule = Object.assign({}, dto, {\n    stateText: stateModel.text,\n    stateIcon: stateModel.iconClass,\n    stateClass: stateModel.stateClass,\n    stateAge: dateTime(dto.newStateDate).fromNow(true)\n  });\n\n  if (rule.state !== 'paused') {\n    if (rule.executionError) {\n      rule.info = 'Execution Error: ' + rule.executionError;\n    }\n\n    if (rule.evalData && rule.evalData.noData) {\n      rule.info = 'Query returned no data';\n    }\n  }\n\n  return rule;\n}\n\nconst alertRulesSlice = createSlice({\n  name: 'alertRules',\n  initialState,\n  reducers: {\n    loadAlertRules: state => {\n      return Object.assign({}, state, {\n        isLoading: true\n      });\n    },\n    loadedAlertRules: (state, action) => {\n      const alertRules = action.payload;\n      const alertRulesViewModel = alertRules.map(rule => {\n        return convertToAlertRule(rule, rule.state);\n      });\n      return Object.assign({}, state, {\n        items: alertRulesViewModel,\n        isLoading: false\n      });\n    },\n    setSearchQuery: (state, action) => {\n      return Object.assign({}, state, {\n        searchQuery: action.payload\n      });\n    }\n  }\n});\nconst notificationChannelSlice = createSlice({\n  name: 'notificationChannel',\n  initialState: initialChannelState,\n  reducers: {\n    setNotificationChannels: (state, action) => {\n      return Object.assign({}, state, {\n        notificationChannelTypes: transformNotifiers(action.payload),\n        notifiers: action.payload\n      });\n    },\n    notificationChannelLoaded: (state, action) => {\n      const notificationChannel = action.payload;\n      const selectedType = state.notifiers.find(t => t.type === notificationChannel.type);\n      const secureChannelOptions = selectedType.options.filter(o => o.secure);\n      /*\n        If any secure field is in plain text we need to migrate it to use secure field instead.\n       */\n\n      if (secureChannelOptions.length > 0 && secureChannelOptions.some(o => {\n        return notificationChannel.settings[o.propertyName] !== '';\n      })) {\n        return migrateSecureFields(state, action.payload, secureChannelOptions);\n      }\n\n      return Object.assign({}, state, {\n        notificationChannel: notificationChannel\n      });\n    },\n    resetSecureField: (state, action) => {\n      return Object.assign({}, state, {\n        notificationChannel: Object.assign({}, state.notificationChannel, {\n          secureFields: Object.assign({}, state.notificationChannel.secureFields, {\n            [action.payload]: false\n          })\n        })\n      });\n    }\n  }\n});\nexport const {\n  loadAlertRules,\n  loadedAlertRules,\n  setSearchQuery\n} = alertRulesSlice.actions;\nexport const {\n  setNotificationChannels,\n  notificationChannelLoaded,\n  resetSecureField\n} = notificationChannelSlice.actions;\nexport const alertRulesReducer = alertRulesSlice.reducer;\nexport const notificationChannelReducer = notificationChannelSlice.reducer;\nexport default {\n  alertRules: alertRulesReducer,\n  notificationChannel: notificationChannelReducer,\n  unifiedAlerting: unifiedAlertingReducer\n};\n\nfunction migrateSecureFields(state, notificationChannel, secureChannelOptions) {\n  const cleanedSettings = {};\n  const secureSettings = {};\n  secureChannelOptions.forEach(option => {\n    secureSettings[option.propertyName] = notificationChannel.settings[option.propertyName];\n    cleanedSettings[option.propertyName] = '';\n  });\n  return Object.assign({}, state, {\n    notificationChannel: Object.assign({}, notificationChannel, {\n      settings: Object.assign({}, notificationChannel.settings, cleanedSettings),\n      secureSettings: Object.assign({}, secureSettings)\n    })\n  });\n}\n\nfunction transformNotifiers(notifiers) {\n  return notifiers.map(option => {\n    return Object.assign({\n      value: option.type,\n      label: option.name\n    }, option, {\n      typeName: option.type\n    });\n  }).sort((o1, o2) => {\n    if (o1.name > o2.name) {\n      return 1;\n    }\n\n    return -1;\n  });\n}","map":{"version":3,"names":["createSlice","dateTime","unifiedAlertingReducer","alertDef","initialState","items","searchQuery","isLoading","initialChannelState","notificationChannelTypes","notificationChannel","notifiers","convertToAlertRule","dto","state","stateModel","getStateDisplayModel","rule","stateText","text","stateIcon","iconClass","stateClass","stateAge","newStateDate","fromNow","executionError","info","evalData","noData","alertRulesSlice","name","reducers","loadAlertRules","loadedAlertRules","action","alertRules","payload","alertRulesViewModel","map","setSearchQuery","notificationChannelSlice","setNotificationChannels","transformNotifiers","notificationChannelLoaded","selectedType","find","t","type","secureChannelOptions","options","filter","o","secure","length","some","settings","propertyName","migrateSecureFields","resetSecureField","secureFields","actions","alertRulesReducer","reducer","notificationChannelReducer","unifiedAlerting","cleanedSettings","secureSettings","forEach","option","value","label","typeName","sort","o1","o2"],"sources":["/home/soula/grafana/public/app/features/alerting/state/reducers.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { dateTime } from '@grafana/data';\nimport {\n  AlertRule,\n  AlertRuleDTO,\n  AlertRulesState,\n  NotificationChannelOption,\n  NotificationChannelState,\n  NotifierDTO,\n} from 'app/types';\n\nimport unifiedAlertingReducer from '../unified/state/reducers';\n\nimport alertDef from './alertDef';\n\nexport const initialState: AlertRulesState = {\n  items: [],\n  searchQuery: '',\n  isLoading: false,\n};\n\nexport const initialChannelState: NotificationChannelState = {\n  notificationChannelTypes: [],\n  notificationChannel: {},\n  notifiers: [],\n};\n\nfunction convertToAlertRule(dto: AlertRuleDTO, state: string): AlertRule {\n  const stateModel = alertDef.getStateDisplayModel(state);\n\n  const rule: AlertRule = {\n    ...dto,\n    stateText: stateModel.text,\n    stateIcon: stateModel.iconClass,\n    stateClass: stateModel.stateClass,\n    stateAge: dateTime(dto.newStateDate).fromNow(true),\n  };\n\n  if (rule.state !== 'paused') {\n    if (rule.executionError) {\n      rule.info = 'Execution Error: ' + rule.executionError;\n    }\n    if (rule.evalData && rule.evalData.noData) {\n      rule.info = 'Query returned no data';\n    }\n  }\n\n  return rule;\n}\n\nconst alertRulesSlice = createSlice({\n  name: 'alertRules',\n  initialState,\n  reducers: {\n    loadAlertRules: (state) => {\n      return { ...state, isLoading: true };\n    },\n    loadedAlertRules: (state, action: PayloadAction<AlertRuleDTO[]>): AlertRulesState => {\n      const alertRules: AlertRuleDTO[] = action.payload;\n\n      const alertRulesViewModel: AlertRule[] = alertRules.map((rule) => {\n        return convertToAlertRule(rule, rule.state);\n      });\n\n      return { ...state, items: alertRulesViewModel, isLoading: false };\n    },\n    setSearchQuery: (state, action: PayloadAction<string>): AlertRulesState => {\n      return { ...state, searchQuery: action.payload };\n    },\n  },\n});\n\nconst notificationChannelSlice = createSlice({\n  name: 'notificationChannel',\n  initialState: initialChannelState,\n  reducers: {\n    setNotificationChannels: (state, action: PayloadAction<NotifierDTO[]>): NotificationChannelState => {\n      return {\n        ...state,\n        notificationChannelTypes: transformNotifiers(action.payload),\n        notifiers: action.payload,\n      };\n    },\n    notificationChannelLoaded: (state, action: PayloadAction<any>): NotificationChannelState => {\n      const notificationChannel = action.payload;\n      const selectedType: NotifierDTO = state.notifiers.find((t) => t.type === notificationChannel.type)!;\n      const secureChannelOptions = selectedType.options.filter((o: NotificationChannelOption) => o.secure);\n      /*\n        If any secure field is in plain text we need to migrate it to use secure field instead.\n       */\n      if (\n        secureChannelOptions.length > 0 &&\n        secureChannelOptions.some((o: NotificationChannelOption) => {\n          return notificationChannel.settings[o.propertyName] !== '';\n        })\n      ) {\n        return migrateSecureFields(state, action.payload, secureChannelOptions);\n      }\n\n      return { ...state, notificationChannel: notificationChannel };\n    },\n    resetSecureField: (state, action: PayloadAction<string>): NotificationChannelState => {\n      return {\n        ...state,\n        notificationChannel: {\n          ...state.notificationChannel,\n          secureFields: { ...state.notificationChannel.secureFields, [action.payload]: false },\n        },\n      };\n    },\n  },\n});\n\nexport const { loadAlertRules, loadedAlertRules, setSearchQuery } = alertRulesSlice.actions;\n\nexport const { setNotificationChannels, notificationChannelLoaded, resetSecureField } =\n  notificationChannelSlice.actions;\n\nexport const alertRulesReducer = alertRulesSlice.reducer;\nexport const notificationChannelReducer = notificationChannelSlice.reducer;\n\nexport default {\n  alertRules: alertRulesReducer,\n  notificationChannel: notificationChannelReducer,\n  unifiedAlerting: unifiedAlertingReducer,\n};\n\nfunction migrateSecureFields(\n  state: NotificationChannelState,\n  notificationChannel: any,\n  secureChannelOptions: NotificationChannelOption[]\n) {\n  const cleanedSettings: { [key: string]: string } = {};\n  const secureSettings: { [key: string]: string } = {};\n\n  secureChannelOptions.forEach((option) => {\n    secureSettings[option.propertyName] = notificationChannel.settings[option.propertyName];\n    cleanedSettings[option.propertyName] = '';\n  });\n\n  return {\n    ...state,\n    notificationChannel: {\n      ...notificationChannel,\n      settings: { ...notificationChannel.settings, ...cleanedSettings },\n      secureSettings: { ...secureSettings },\n    },\n  };\n}\n\nfunction transformNotifiers(notifiers: NotifierDTO[]) {\n  return notifiers\n    .map((option: NotifierDTO) => {\n      return {\n        value: option.type,\n        label: option.name,\n        ...option,\n        typeName: option.type,\n      };\n    })\n    .sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}