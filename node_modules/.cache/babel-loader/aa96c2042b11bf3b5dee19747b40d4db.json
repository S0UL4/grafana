{"ast":null,"code":"import React, { useState, useLayoutEffect, useMemo, useRef } from 'react';\nimport { getValueFormat } from '@grafana/data';\nimport { buildScaleKey } from '@grafana/ui';\nimport { ThresholdDragHandle } from './ThresholdDragHandle';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GUTTER_SIZE = 60;\nexport const ThresholdControlsPlugin = ({\n  config,\n  fieldConfig,\n  onThresholdsChange\n}) => {\n  const plotInstance = useRef();\n  const [renderToken, setRenderToken] = useState(0);\n  useLayoutEffect(() => {\n    config.setPadding([0, GUTTER_SIZE, 0, 0]);\n    config.addHook('init', u => {\n      plotInstance.current = u;\n    }); // render token required to re-render handles when resizing uPlot\n\n    config.addHook('draw', () => {\n      setRenderToken(s => s + 1);\n    });\n  }, [config]);\n  const thresholdHandles = useMemo(() => {\n    const plot = plotInstance.current;\n\n    if (!plot) {\n      return null;\n    }\n\n    const thresholds = fieldConfig.defaults.thresholds;\n\n    if (!thresholds) {\n      return null;\n    }\n\n    const scale = buildScaleKey(fieldConfig.defaults);\n    const decimals = fieldConfig.defaults.decimals;\n    const handles = [];\n\n    for (let i = 0; i < thresholds.steps.length; i++) {\n      const step = thresholds.steps[i];\n      const yPos = plot.valToPos(step.value, scale);\n\n      if (Number.isNaN(yPos) || !Number.isFinite(yPos)) {\n        continue;\n      }\n\n      const height = plot.bbox.height / window.devicePixelRatio;\n\n      const handle = /*#__PURE__*/_jsx(ThresholdDragHandle, {\n        step: step,\n        y: yPos,\n        dragBounds: {\n          top: 0,\n          bottom: height\n        },\n        mapPositionToValue: y => plot.posToVal(y, scale),\n        formatValue: v => getValueFormat(scale)(v, decimals).text,\n        onChange: value => {\n          const nextSteps = [...thresholds.steps.slice(0, i), ...thresholds.steps.slice(i + 1), Object.assign({}, thresholds.steps[i], {\n            value\n          })].sort((a, b) => a.value - b.value);\n          onThresholdsChange(Object.assign({}, thresholds, {\n            steps: nextSteps\n          }));\n        }\n      }, `${step.value}-${i}`);\n\n      handles.push(handle);\n    }\n\n    return handles; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [renderToken, fieldConfig, onThresholdsChange]);\n\n  if (!plotInstance.current) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    style: {\n      position: 'absolute',\n      overflow: 'visible',\n      left: `${(plotInstance.current.bbox.left + plotInstance.current.bbox.width) / window.devicePixelRatio}px`,\n      top: `${plotInstance.current.bbox.top / window.devicePixelRatio}px`,\n      width: `${GUTTER_SIZE}px`,\n      height: `${plotInstance.current.bbox.height / window.devicePixelRatio}px`\n    },\n    children: thresholdHandles\n  });\n};\nThresholdControlsPlugin.displayName = 'ThresholdControlsPlugin';","map":{"version":3,"names":["React","useState","useLayoutEffect","useMemo","useRef","getValueFormat","buildScaleKey","ThresholdDragHandle","GUTTER_SIZE","ThresholdControlsPlugin","config","fieldConfig","onThresholdsChange","plotInstance","renderToken","setRenderToken","setPadding","addHook","u","current","s","thresholdHandles","plot","thresholds","defaults","scale","decimals","handles","i","steps","length","step","yPos","valToPos","value","Number","isNaN","isFinite","height","bbox","window","devicePixelRatio","handle","top","bottom","y","posToVal","v","text","nextSteps","slice","sort","a","b","push","position","overflow","left","width","displayName"],"sources":["/home/soula/grafana/public/app/plugins/panel/timeseries/plugins/ThresholdControlsPlugin.tsx"],"sourcesContent":["import React, { useState, useLayoutEffect, useMemo, useRef } from 'react';\nimport uPlot from 'uplot';\n\nimport { FieldConfigSource, ThresholdsConfig, getValueFormat } from '@grafana/data';\nimport { UPlotConfigBuilder, buildScaleKey } from '@grafana/ui';\n\nimport { ThresholdDragHandle } from './ThresholdDragHandle';\n\nconst GUTTER_SIZE = 60;\n\ninterface ThresholdControlsPluginProps {\n  config: UPlotConfigBuilder;\n  fieldConfig: FieldConfigSource;\n  onThresholdsChange: (thresholds: ThresholdsConfig) => void;\n}\n\nexport const ThresholdControlsPlugin: React.FC<ThresholdControlsPluginProps> = ({\n  config,\n  fieldConfig,\n  onThresholdsChange,\n}) => {\n  const plotInstance = useRef<uPlot>();\n  const [renderToken, setRenderToken] = useState(0);\n\n  useLayoutEffect(() => {\n    config.setPadding([0, GUTTER_SIZE, 0, 0]);\n\n    config.addHook('init', (u) => {\n      plotInstance.current = u;\n    });\n    // render token required to re-render handles when resizing uPlot\n    config.addHook('draw', () => {\n      setRenderToken((s) => s + 1);\n    });\n  }, [config]);\n\n  const thresholdHandles = useMemo(() => {\n    const plot = plotInstance.current;\n\n    if (!plot) {\n      return null;\n    }\n    const thresholds = fieldConfig.defaults.thresholds;\n    if (!thresholds) {\n      return null;\n    }\n    const scale = buildScaleKey(fieldConfig.defaults);\n\n    const decimals = fieldConfig.defaults.decimals;\n    const handles = [];\n\n    for (let i = 0; i < thresholds.steps.length; i++) {\n      const step = thresholds.steps[i];\n      const yPos = plot.valToPos(step.value, scale);\n\n      if (Number.isNaN(yPos) || !Number.isFinite(yPos)) {\n        continue;\n      }\n\n      const height = plot.bbox.height / window.devicePixelRatio;\n\n      const handle = (\n        <ThresholdDragHandle\n          key={`${step.value}-${i}`}\n          step={step}\n          y={yPos}\n          dragBounds={{ top: 0, bottom: height }}\n          mapPositionToValue={(y) => plot.posToVal(y, scale)}\n          formatValue={(v) => getValueFormat(scale)(v, decimals).text}\n          onChange={(value) => {\n            const nextSteps = [\n              ...thresholds.steps.slice(0, i),\n              ...thresholds.steps.slice(i + 1),\n              { ...thresholds.steps[i], value },\n            ].sort((a, b) => a.value - b.value);\n\n            onThresholdsChange({\n              ...thresholds,\n              steps: nextSteps,\n            });\n          }}\n        />\n      );\n\n      handles.push(handle);\n    }\n\n    return handles;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [renderToken, fieldConfig, onThresholdsChange]);\n\n  if (!plotInstance.current) {\n    return null;\n  }\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        overflow: 'visible',\n        left: `${(plotInstance.current.bbox.left + plotInstance.current.bbox.width) / window.devicePixelRatio}px`,\n        top: `${plotInstance.current.bbox.top / window.devicePixelRatio}px`,\n        width: `${GUTTER_SIZE}px`,\n        height: `${plotInstance.current.bbox.height / window.devicePixelRatio}px`,\n      }}\n    >\n      {thresholdHandles}\n    </div>\n  );\n};\n\nThresholdControlsPlugin.displayName = 'ThresholdControlsPlugin';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}