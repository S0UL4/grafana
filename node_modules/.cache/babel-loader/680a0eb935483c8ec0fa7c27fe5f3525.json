{"ast":null,"code":"var _Label, _strong, _AnnotationsField, _LabelsField, _Modal$ButtonRow;\n\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { Modal, Button, Label, useStyles2, RadioButtonGroup } from '@grafana/ui';\nimport AnnotationsField from '../../rule-editor/AnnotationsField';\nimport LabelsField from '../../rule-editor/LabelsField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar NotificationType;\n\n(function (NotificationType) {\n  NotificationType[\"predefined\"] = \"Predefined\";\n  NotificationType[\"custom\"] = \"Custom\";\n})(NotificationType || (NotificationType = {}));\n\nconst notificationOptions = Object.values(NotificationType).map(value => ({\n  label: value,\n  value: value\n}));\nconst defaultValues = {\n  annotations: [{\n    key: '',\n    value: ''\n  }],\n  labels: [{\n    key: '',\n    value: ''\n  }]\n};\nexport const TestContactPointModal = ({\n  isOpen,\n  onDismiss,\n  onTest\n}) => {\n  const [notificationType, setNotificationType] = useState(NotificationType.predefined);\n  const styles = useStyles2(getStyles);\n  const formMethods = useForm({\n    defaultValues,\n    mode: 'onBlur'\n  });\n\n  const onSubmit = data => {\n    if (notificationType === NotificationType.custom) {\n      const alert = {\n        annotations: data.annotations.filter(({\n          key,\n          value\n        }) => !!key && !!value).reduce((acc, {\n          key,\n          value\n        }) => {\n          return Object.assign({}, acc, {\n            [key]: value\n          });\n        }, {}),\n        labels: data.labels.filter(({\n          key,\n          value\n        }) => !!key && !!value).reduce((acc, {\n          key,\n          value\n        }) => {\n          return Object.assign({}, acc, {\n            [key]: value\n          });\n        }, {})\n      };\n      onTest(alert);\n    } else {\n      onTest();\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Modal, {\n    onDismiss: onDismiss,\n    isOpen: isOpen,\n    title: 'Test contact point',\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.section,\n      children: [_Label || (_Label = /*#__PURE__*/_jsx(Label, {\n        children: \"Notification message\"\n      })), /*#__PURE__*/_jsx(RadioButtonGroup, {\n        options: notificationOptions,\n        value: notificationType,\n        onChange: value => setNotificationType(value)\n      })]\n    }), /*#__PURE__*/_jsx(FormProvider, Object.assign({}, formMethods, {\n      children: /*#__PURE__*/_jsxs(\"form\", {\n        onSubmit: formMethods.handleSubmit(onSubmit),\n        children: [notificationType === NotificationType.predefined && /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.section,\n          children: [\"You will send a test notification that uses a predefined alert. If you have defined a custom template or message, for better results switch to \", _strong || (_strong = /*#__PURE__*/_jsx(\"strong\", {\n            children: \"custom\"\n          })), \" notification message, from above.\"]\n        }), notificationType === NotificationType.custom && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: styles.section,\n            children: \"You will send a test notification that uses the annotations defined below. This is a good option if you use custom templates and messages.\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.section,\n            children: _AnnotationsField || (_AnnotationsField = /*#__PURE__*/_jsx(AnnotationsField, {}))\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.section,\n            children: _LabelsField || (_LabelsField = /*#__PURE__*/_jsx(LabelsField, {}))\n          })]\n        }), _Modal$ButtonRow || (_Modal$ButtonRow = /*#__PURE__*/_jsx(Modal.ButtonRow, {\n          children: /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            children: \"Send test notification\"\n          })\n        }))]\n      })\n    }))]\n  });\n};\n\nconst getStyles = theme => ({\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  section: css`\n    margin-bottom: ${theme.spacing(2)};\n  `\n});","map":{"version":3,"names":["css","React","useState","useForm","FormProvider","Modal","Button","Label","useStyles2","RadioButtonGroup","AnnotationsField","LabelsField","NotificationType","notificationOptions","Object","values","map","value","label","defaultValues","annotations","key","labels","TestContactPointModal","isOpen","onDismiss","onTest","notificationType","setNotificationType","predefined","styles","getStyles","formMethods","mode","onSubmit","data","custom","alert","filter","reduce","acc","section","handleSubmit","theme","flexRow","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/form/TestContactPointModal.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Modal, Button, Label, useStyles2, RadioButtonGroup } from '@grafana/ui';\nimport { TestReceiversAlert } from 'app/plugins/datasource/alertmanager/types';\nimport { Annotations, Labels } from 'app/types/unified-alerting-dto';\n\nimport AnnotationsField from '../../rule-editor/AnnotationsField';\nimport LabelsField from '../../rule-editor/LabelsField';\n\ninterface Props {\n  isOpen: boolean;\n  onDismiss: () => void;\n  onTest: (alert?: TestReceiversAlert) => void;\n}\n\ntype AnnoField = {\n  key: string;\n  value: string;\n};\n\ninterface FormFields {\n  annotations: AnnoField[];\n  labels: AnnoField[];\n}\n\nenum NotificationType {\n  predefined = 'Predefined',\n  custom = 'Custom',\n}\n\nconst notificationOptions = Object.values(NotificationType).map((value) => ({ label: value, value: value }));\n\nconst defaultValues: FormFields = {\n  annotations: [{ key: '', value: '' }],\n  labels: [{ key: '', value: '' }],\n};\n\nexport const TestContactPointModal = ({ isOpen, onDismiss, onTest }: Props) => {\n  const [notificationType, setNotificationType] = useState<NotificationType>(NotificationType.predefined);\n  const styles = useStyles2(getStyles);\n  const formMethods = useForm<FormFields>({ defaultValues, mode: 'onBlur' });\n\n  const onSubmit = (data: FormFields) => {\n    if (notificationType === NotificationType.custom) {\n      const alert = {\n        annotations: data.annotations\n          .filter(({ key, value }) => !!key && !!value)\n          .reduce((acc, { key, value }) => {\n            return { ...acc, [key]: value };\n          }, {} as Annotations),\n        labels: data.labels\n          .filter(({ key, value }) => !!key && !!value)\n          .reduce((acc, { key, value }) => {\n            return { ...acc, [key]: value };\n          }, {} as Labels),\n      };\n      onTest(alert);\n    } else {\n      onTest();\n    }\n  };\n\n  return (\n    <Modal onDismiss={onDismiss} isOpen={isOpen} title={'Test contact point'}>\n      <div className={styles.section}>\n        <Label>Notification message</Label>\n        <RadioButtonGroup\n          options={notificationOptions}\n          value={notificationType}\n          onChange={(value) => setNotificationType(value)}\n        />\n      </div>\n\n      <FormProvider {...formMethods}>\n        <form onSubmit={formMethods.handleSubmit(onSubmit)}>\n          {notificationType === NotificationType.predefined && (\n            <div className={styles.section}>\n              You will send a test notification that uses a predefined alert. If you have defined a custom template or\n              message, for better results switch to <strong>custom</strong> notification message, from above.\n            </div>\n          )}\n          {notificationType === NotificationType.custom && (\n            <>\n              <div className={styles.section}>\n                You will send a test notification that uses the annotations defined below. This is a good option if you\n                use custom templates and messages.\n              </div>\n              <div className={styles.section}>\n                <AnnotationsField />\n              </div>\n              <div className={styles.section}>\n                <LabelsField />\n              </div>\n            </>\n          )}\n\n          <Modal.ButtonRow>\n            <Button type=\"submit\">Send test notification</Button>\n          </Modal.ButtonRow>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  section: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}