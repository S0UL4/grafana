{"ast":null,"code":"import { ValueMatcherID } from '../ids';\nconst isEqualValueMatcher = {\n  id: ValueMatcherID.equal,\n  name: 'Is equal',\n  description: 'Match where value for given field is equal to options value.',\n  get: options => {\n    return (valueIndex, field) => {\n      const value = field.values.get(valueIndex); // eslint-disable-next-line eqeqeq\n\n      return value == options.value;\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `Matches all rows where field is null.`;\n  },\n  isApplicable: () => true,\n  getDefaultOptions: () => ({\n    value: ''\n  })\n};\nconst isNotEqualValueMatcher = {\n  id: ValueMatcherID.notEqual,\n  name: 'Is not equal',\n  description: 'Match where value for given field is not equal to options value.',\n  get: options => {\n    return (valueIndex, field) => {\n      const value = field.values.get(valueIndex); // eslint-disable-next-line eqeqeq\n\n      return value != options.value;\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `Matches all rows where field is not null.`;\n  },\n  isApplicable: () => true,\n  getDefaultOptions: () => ({\n    value: ''\n  })\n};\nexport const getEqualValueMatchers = () => [isEqualValueMatcher, isNotEqualValueMatcher];","map":{"version":3,"names":["ValueMatcherID","isEqualValueMatcher","id","equal","name","description","get","options","valueIndex","field","value","values","getOptionsDisplayText","isApplicable","getDefaultOptions","isNotEqualValueMatcher","notEqual","getEqualValueMatchers"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/matchers/valueMatchers/equalMatchers.ts"],"sourcesContent":["import { Field } from '../../../types/dataFrame';\nimport { ValueMatcherInfo } from '../../../types/transformations';\nimport { ValueMatcherID } from '../ids';\n\nimport { BasicValueMatcherOptions } from './types';\n\nconst isEqualValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions> = {\n  id: ValueMatcherID.equal,\n  name: 'Is equal',\n  description: 'Match where value for given field is equal to options value.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values.get(valueIndex);\n      // eslint-disable-next-line eqeqeq\n      return value == options.value;\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `Matches all rows where field is null.`;\n  },\n  isApplicable: () => true,\n  getDefaultOptions: () => ({ value: '' }),\n};\n\nconst isNotEqualValueMatcher: ValueMatcherInfo<BasicValueMatcherOptions> = {\n  id: ValueMatcherID.notEqual,\n  name: 'Is not equal',\n  description: 'Match where value for given field is not equal to options value.',\n  get: (options) => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values.get(valueIndex);\n      // eslint-disable-next-line eqeqeq\n      return value != options.value;\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `Matches all rows where field is not null.`;\n  },\n  isApplicable: () => true,\n  getDefaultOptions: () => ({ value: '' }),\n};\n\nexport const getEqualValueMatchers = (): ValueMatcherInfo[] => [isEqualValueMatcher, isNotEqualValueMatcher];\n"],"mappings":"AAEA,SAASA,cAAT,QAA+B,QAA/B;AAIA,MAAMC,mBAA+D,GAAG;EACtEC,EAAE,EAAEF,cAAc,CAACG,KADmD;EAEtEC,IAAI,EAAE,UAFgE;EAGtEC,WAAW,EAAE,8DAHyD;EAItEC,GAAG,EAAGC,OAAD,IAAa;IAChB,OAAO,CAACC,UAAD,EAAqBC,KAArB,KAAsC;MAC3C,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaL,GAAb,CAAiBE,UAAjB,CAAd,CAD2C,CAE3C;;MACA,OAAOE,KAAK,IAAIH,OAAO,CAACG,KAAxB;IACD,CAJD;EAKD,CAVqE;EAWtEE,qBAAqB,EAAE,MAAM;IAC3B,OAAQ,uCAAR;EACD,CAbqE;EActEC,YAAY,EAAE,MAAM,IAdkD;EAetEC,iBAAiB,EAAE,OAAO;IAAEJ,KAAK,EAAE;EAAT,CAAP;AAfmD,CAAxE;AAkBA,MAAMK,sBAAkE,GAAG;EACzEb,EAAE,EAAEF,cAAc,CAACgB,QADsD;EAEzEZ,IAAI,EAAE,cAFmE;EAGzEC,WAAW,EAAE,kEAH4D;EAIzEC,GAAG,EAAGC,OAAD,IAAa;IAChB,OAAO,CAACC,UAAD,EAAqBC,KAArB,KAAsC;MAC3C,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaL,GAAb,CAAiBE,UAAjB,CAAd,CAD2C,CAE3C;;MACA,OAAOE,KAAK,IAAIH,OAAO,CAACG,KAAxB;IACD,CAJD;EAKD,CAVwE;EAWzEE,qBAAqB,EAAE,MAAM;IAC3B,OAAQ,2CAAR;EACD,CAbwE;EAczEC,YAAY,EAAE,MAAM,IAdqD;EAezEC,iBAAiB,EAAE,OAAO;IAAEJ,KAAK,EAAE;EAAT,CAAP;AAfsD,CAA3E;AAkBA,OAAO,MAAMO,qBAAqB,GAAG,MAA0B,CAAChB,mBAAD,EAAsBc,sBAAtB,CAAxD"},"metadata":{},"sourceType":"module"}