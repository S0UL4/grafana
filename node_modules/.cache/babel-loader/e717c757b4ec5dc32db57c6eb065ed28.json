{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { find, map, reduce, remove } from 'lodash';\nimport { rangeUtil } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport coreModule from 'app/angular/core_module';\nimport { promiseToDigest } from 'app/angular/promiseToDigest';\nimport appEvents from 'app/core/app_events';\nimport config from 'app/core/config';\nimport { QueryPart } from 'app/features/alerting/state/query_part';\nimport { CoreEvents } from 'app/types';\nimport { ShowConfirmModalEvent } from '../../types/events';\nimport { getDefaultCondition } from './getAlertingValidationMessage';\nimport { ThresholdMapper } from './state/ThresholdMapper';\nimport alertDef from './state/alertDef';\nexport class AlertTabCtrl {\n  /** @ngInject */\n  constructor($scope, dashboardSrv, uiSegmentSrv, datasourceSrv) {\n    _defineProperty(this, \"panel\", void 0);\n\n    _defineProperty(this, \"panelCtrl\", void 0);\n\n    _defineProperty(this, \"subTabIndex\", void 0);\n\n    _defineProperty(this, \"conditionTypes\", void 0);\n\n    _defineProperty(this, \"alert\", void 0);\n\n    _defineProperty(this, \"conditionModels\", void 0);\n\n    _defineProperty(this, \"evalFunctions\", void 0);\n\n    _defineProperty(this, \"evalOperators\", void 0);\n\n    _defineProperty(this, \"noDataModes\", void 0);\n\n    _defineProperty(this, \"executionErrorModes\", void 0);\n\n    _defineProperty(this, \"addNotificationSegment\", void 0);\n\n    _defineProperty(this, \"notifications\", void 0);\n\n    _defineProperty(this, \"alertNotifications\", void 0);\n\n    _defineProperty(this, \"error\", void 0);\n\n    _defineProperty(this, \"appSubUrl\", void 0);\n\n    _defineProperty(this, \"alertHistory\", void 0);\n\n    _defineProperty(this, \"newAlertRuleTag\", void 0);\n\n    _defineProperty(this, \"alertingMinIntervalSecs\", void 0);\n\n    _defineProperty(this, \"alertingMinInterval\", void 0);\n\n    _defineProperty(this, \"frequencyWarning\", void 0);\n\n    _defineProperty(this, \"enable\", () => {\n      this.panel.alert = {};\n      this.initModel();\n      this.panel.alert.for = '5m'; //default value for new alerts. for existing alerts we use 0m to avoid breaking changes\n    });\n\n    this.$scope = $scope;\n    this.dashboardSrv = dashboardSrv;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.datasourceSrv = datasourceSrv;\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n    this.subTabIndex = 0;\n    this.evalFunctions = alertDef.evalFunctions;\n    this.evalOperators = alertDef.evalOperators;\n    this.conditionTypes = alertDef.conditionTypes;\n    this.noDataModes = alertDef.noDataModes;\n    this.executionErrorModes = alertDef.executionErrorModes;\n    this.appSubUrl = config.appSubUrl;\n    this.panelCtrl._enableAlert = this.enable;\n    this.alertingMinIntervalSecs = config.alertingMinInterval;\n    this.alertingMinInterval = rangeUtil.secondsToHms(config.alertingMinInterval);\n  }\n\n  $onInit() {\n    this.addNotificationSegment = this.uiSegmentSrv.newPlusButton(); // subscribe to graph threshold handle changes\n\n    const thresholdChangedEventHandler = this.graphThresholdChanged.bind(this);\n    this.panelCtrl.events.on(CoreEvents.thresholdChanged, thresholdChangedEventHandler); // set panel alert edit mode\n\n    this.$scope.$on('$destroy', () => {\n      this.panelCtrl.events.off(CoreEvents.thresholdChanged, thresholdChangedEventHandler);\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n    }); // build notification model\n\n    this.notifications = [];\n    this.alertNotifications = [];\n    this.alertHistory = [];\n    return promiseToDigest(this.$scope)(getBackendSrv().get('/api/alert-notifications/lookup').then(res => {\n      this.notifications = res;\n      this.initModel();\n      this.validateModel();\n    }));\n  }\n\n  getAlertHistory() {\n    promiseToDigest(this.$scope)(getBackendSrv().get(`/api/annotations?dashboardId=${this.panelCtrl.dashboard.id}&panelId=${this.panel.id}&limit=50&type=alert`).then(res => {\n      this.alertHistory = map(res, ah => {\n        var _this$dashboardSrv$ge;\n\n        ah.time = (_this$dashboardSrv$ge = this.dashboardSrv.getCurrent()) === null || _this$dashboardSrv$ge === void 0 ? void 0 : _this$dashboardSrv$ge.formatDate(ah.time, 'MMM D, YYYY HH:mm:ss');\n        ah.stateModel = alertDef.getStateDisplayModel(ah.newState);\n        ah.info = alertDef.getAlertAnnotationInfo(ah);\n        return ah;\n      });\n    }));\n  }\n\n  getNotificationIcon(type) {\n    switch (type) {\n      case 'email':\n        return 'envelope';\n\n      case 'slack':\n        return 'slack';\n\n      case 'victorops':\n        return 'fa fa-pagelines';\n\n      case 'webhook':\n        return 'cube';\n\n      case 'pagerduty':\n        return 'fa fa-bullhorn';\n\n      case 'opsgenie':\n        return 'bell';\n\n      case 'hipchat':\n        return 'fa fa-mail-forward';\n\n      case 'pushover':\n        return 'mobile-android';\n\n      case 'kafka':\n        return 'arrow-random';\n\n      case 'teams':\n        return 'fa fa-windows';\n    }\n\n    return 'bell';\n  }\n\n  getNotifications() {\n    return Promise.resolve(this.notifications.map(item => {\n      return this.uiSegmentSrv.newSegment(item.name);\n    }));\n  }\n\n  notificationAdded() {\n    const model = find(this.notifications, {\n      name: this.addNotificationSegment.value\n    });\n\n    if (!model) {\n      return;\n    }\n\n    this.alertNotifications.push({\n      name: model.name,\n      iconClass: this.getNotificationIcon(model.type),\n      isDefault: false,\n      uid: model.uid\n    }); // avoid duplicates using both id and uid to be backwards compatible.\n\n    if (!find(this.alert.notifications, n => n.id === model.id || n.uid === model.uid)) {\n      this.alert.notifications.push({\n        uid: model.uid\n      });\n    } // reset plus button\n\n\n    this.addNotificationSegment.value = this.uiSegmentSrv.newPlusButton().value;\n    this.addNotificationSegment.html = this.uiSegmentSrv.newPlusButton().html;\n    this.addNotificationSegment.fake = true;\n  }\n\n  removeNotification(an) {\n    // remove notifiers referred to by id and uid to support notifiers added\n    // before and after we added support for uid\n    remove(this.alert.notifications, n => n.uid === an.uid || n.id === an.id);\n    remove(this.alertNotifications, n => n.uid === an.uid || n.id === an.id);\n  }\n\n  addAlertRuleTag() {\n    if (this.newAlertRuleTag.name) {\n      this.alert.alertRuleTags[this.newAlertRuleTag.name] = this.newAlertRuleTag.value;\n    }\n\n    this.newAlertRuleTag.name = '';\n    this.newAlertRuleTag.value = '';\n  }\n\n  removeAlertRuleTag(tagName) {\n    delete this.alert.alertRuleTags[tagName];\n  }\n\n  initModel() {\n    const alert = this.alert = this.panel.alert;\n\n    if (!alert) {\n      return;\n    }\n\n    this.checkFrequency();\n    alert.conditions = alert.conditions || [];\n\n    if (alert.conditions.length === 0) {\n      alert.conditions.push(getDefaultCondition());\n    }\n\n    alert.noDataState = alert.noDataState || config.alertingNoDataOrNullValues;\n    alert.executionErrorState = alert.executionErrorState || config.alertingErrorOrTimeout;\n    alert.frequency = alert.frequency || '1m';\n    alert.handler = alert.handler || 1;\n    alert.notifications = alert.notifications || [];\n    alert.for = alert.for || '0m';\n    alert.alertRuleTags = alert.alertRuleTags || {};\n    const defaultName = this.panel.title + ' alert';\n    alert.name = alert.name || defaultName;\n    this.conditionModels = reduce(alert.conditions, (memo, value) => {\n      memo.push(this.buildConditionModel(value));\n      return memo;\n    }, []);\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n\n    for (const addedNotification of alert.notifications) {\n      let identifier = addedNotification.uid; // lookup notifier type by uid\n\n      let model = find(this.notifications, {\n        uid: identifier\n      }); // fallback using id if uid is missing\n\n      if (!model && addedNotification.id) {\n        identifier = addedNotification.id;\n        model = find(this.notifications, {\n          id: identifier\n        });\n      }\n\n      if (!model) {\n        appEvents.publish(new ShowConfirmModalEvent({\n          title: 'Notifier with invalid identifier is detected',\n          text: `Do you want to delete notifier with invalid identifier: ${identifier} from the dashboard JSON?`,\n          text2: 'After successful deletion, make sure to save the dashboard for storing the update JSON.',\n          icon: 'trash-alt',\n          confirmText: 'Delete',\n          yesText: 'Delete',\n          onConfirm: async () => {\n            this.removeNotification(addedNotification);\n          }\n        }));\n      }\n\n      if (model && model.isDefault === false) {\n        model.iconClass = this.getNotificationIcon(model.type);\n        this.alertNotifications.push(model);\n      }\n    }\n\n    for (const notification of this.notifications) {\n      if (notification.isDefault) {\n        notification.iconClass = this.getNotificationIcon(notification.type);\n        this.alertNotifications.push(notification);\n      }\n    }\n\n    this.panelCtrl.editingThresholds = true;\n    this.panelCtrl.render();\n  }\n\n  checkFrequency() {\n    this.frequencyWarning = '';\n\n    if (!this.alert.frequency) {\n      return;\n    }\n\n    if (!this.alert.frequency.match(/^\\d+([dhms])$/)) {\n      this.frequencyWarning = 'Invalid frequency, has to be numeric followed by one of the following units: \"d, h, m, s\"';\n      return;\n    }\n\n    try {\n      const frequencySecs = rangeUtil.intervalToSeconds(this.alert.frequency);\n\n      if (frequencySecs < this.alertingMinIntervalSecs) {\n        this.frequencyWarning = 'A minimum evaluation interval of ' + this.alertingMinInterval + ' have been configured in Grafana and will be used for this alert rule. ' + 'Please contact the administrator to configure a lower interval.';\n      }\n    } catch (err) {\n      this.frequencyWarning = err;\n    }\n  }\n\n  graphThresholdChanged(evt) {\n    for (const condition of this.alert.conditions) {\n      if (condition.type === 'query') {\n        condition.evaluator.params[evt.handleIndex] = evt.threshold.value;\n        this.evaluatorParamsChanged();\n        break;\n      }\n    }\n  }\n\n  validateModel() {\n    if (!this.alert) {\n      return;\n    }\n\n    let firstTarget;\n    let foundTarget = null;\n    const promises = [];\n\n    for (const condition of this.alert.conditions) {\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      for (const target of this.panel.targets) {\n        if (!firstTarget) {\n          firstTarget = target;\n        }\n\n        if (condition.query.params[0] === target.refId) {\n          foundTarget = target;\n          break;\n        }\n      }\n\n      if (!foundTarget) {\n        if (firstTarget) {\n          condition.query.params[0] = firstTarget.refId;\n          foundTarget = firstTarget;\n        } else {\n          this.error = 'Could not find any metric queries';\n          return;\n        }\n      }\n\n      const datasourceName = foundTarget.datasource || this.panel.datasource;\n      promises.push(this.datasourceSrv.get(datasourceName).then((foundTarget => ds => {\n        if (!ds.meta.alerting) {\n          return Promise.reject('The datasource does not support alerting queries');\n        } else if (ds.targetContainsTemplate && ds.targetContainsTemplate(foundTarget)) {\n          return Promise.reject('Template variables are not supported in alert queries');\n        }\n\n        return Promise.resolve();\n      })(foundTarget)));\n    }\n\n    Promise.all(promises).then(() => {\n      this.error = '';\n      this.$scope.$apply();\n    }, e => {\n      this.error = e;\n      this.$scope.$apply();\n    });\n  }\n\n  buildConditionModel(source) {\n    const cm = {\n      source: source,\n      type: source.type\n    };\n    cm.queryPart = new QueryPart(source.query, alertDef.alertQueryDef);\n    cm.reducerPart = alertDef.createReducerPart(source.reducer);\n    cm.evaluator = source.evaluator;\n    cm.operator = source.operator;\n    return cm;\n  }\n\n  handleQueryPartEvent(conditionModel, evt) {\n    switch (evt.name) {\n      case 'action-remove-part':\n        {\n          break;\n        }\n\n      case 'get-part-actions':\n        {\n          return Promise.resolve([]);\n        }\n\n      case 'part-param-changed':\n        {\n          this.validateModel();\n        }\n\n      case 'get-param-options':\n        {\n          const result = this.panel.targets.map(target => {\n            return this.uiSegmentSrv.newSegment({\n              value: target.refId\n            });\n          });\n          return Promise.resolve(result);\n        }\n\n      default:\n        {\n          return Promise.resolve();\n        }\n    }\n\n    return Promise.resolve();\n  }\n\n  handleReducerPartEvent(conditionModel, evt) {\n    switch (evt.name) {\n      case 'action':\n        {\n          conditionModel.source.reducer.type = evt.action.value;\n          conditionModel.reducerPart = alertDef.createReducerPart(conditionModel.source.reducer);\n          this.evaluatorParamsChanged();\n          break;\n        }\n\n      case 'get-part-actions':\n        {\n          const result = [];\n\n          for (const type of alertDef.reducerTypes) {\n            if (type.value !== conditionModel.source.reducer.type) {\n              result.push(type);\n            }\n          }\n\n          return Promise.resolve(result);\n        }\n    }\n\n    return Promise.resolve();\n  }\n\n  addCondition(type) {\n    const condition = getDefaultCondition(); // add to persited model\n\n    this.alert.conditions.push(condition); // add to view model\n\n    this.conditionModels.push(this.buildConditionModel(condition));\n  }\n\n  removeCondition(index) {\n    this.alert.conditions.splice(index, 1);\n    this.conditionModels.splice(index, 1);\n  }\n\n  delete() {\n    appEvents.publish(new ShowConfirmModalEvent({\n      title: 'Delete Alert',\n      text: 'Are you sure you want to delete this alert rule?',\n      text2: 'You need to save dashboard for the delete to take effect',\n      icon: 'trash-alt',\n      yesText: 'Delete',\n      onConfirm: () => {\n        delete this.panel.alert;\n        this.alert = null;\n        this.panel.thresholds = [];\n        this.conditionModels = [];\n        this.panelCtrl.alertState = null;\n        this.panelCtrl.render();\n      }\n    }));\n  }\n\n  evaluatorParamsChanged() {\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n    this.panelCtrl.render();\n  }\n\n  evaluatorTypeChanged(evaluator) {\n    // ensure params array is correct length\n    switch (evaluator.type) {\n      case 'lt':\n      case 'gt':\n        {\n          evaluator.params = [evaluator.params[0]];\n          break;\n        }\n\n      case 'within_range':\n      case 'outside_range':\n        {\n          evaluator.params = [evaluator.params[0], evaluator.params[1]];\n          break;\n        }\n\n      case 'no_value':\n        {\n          evaluator.params = [];\n        }\n    }\n\n    this.evaluatorParamsChanged();\n  }\n\n  clearHistory() {\n    appEvents.publish(new ShowConfirmModalEvent({\n      title: 'Delete Alert History',\n      text: 'Are you sure you want to remove all history & annotations for this alert?',\n      icon: 'trash-alt',\n      yesText: 'Yes',\n      onConfirm: () => {\n        promiseToDigest(this.$scope)(getBackendSrv().post('/api/annotations/mass-delete', {\n          dashboardId: this.panelCtrl.dashboard.id,\n          panelId: this.panel.id\n        }).then(() => {\n          this.alertHistory = [];\n          this.panelCtrl.refresh();\n        }));\n      }\n    }));\n  }\n\n}\nAlertTabCtrl.$inject = [\"$scope\", \"dashboardSrv\", \"uiSegmentSrv\", \"datasourceSrv\"];\n\n/** @ngInject */\nexport function alertTab() {\n  'use strict';\n\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/features/alerting/partials/alert_tab.html',\n    controller: AlertTabCtrl\n  };\n}\ncoreModule.directive('alertTab', alertTab);","map":{"version":3,"names":["find","map","reduce","remove","rangeUtil","getBackendSrv","coreModule","promiseToDigest","appEvents","config","QueryPart","CoreEvents","ShowConfirmModalEvent","getDefaultCondition","ThresholdMapper","alertDef","AlertTabCtrl","constructor","$scope","dashboardSrv","uiSegmentSrv","datasourceSrv","panel","alert","initModel","for","panelCtrl","ctrl","subTabIndex","evalFunctions","evalOperators","conditionTypes","noDataModes","executionErrorModes","appSubUrl","_enableAlert","enable","alertingMinIntervalSecs","alertingMinInterval","secondsToHms","$onInit","addNotificationSegment","newPlusButton","thresholdChangedEventHandler","graphThresholdChanged","bind","events","on","thresholdChanged","$on","off","editingThresholds","render","notifications","alertNotifications","alertHistory","get","then","res","validateModel","getAlertHistory","dashboard","id","ah","time","getCurrent","formatDate","stateModel","getStateDisplayModel","newState","info","getAlertAnnotationInfo","getNotificationIcon","type","getNotifications","Promise","resolve","item","newSegment","name","notificationAdded","model","value","push","iconClass","isDefault","uid","n","html","fake","removeNotification","an","addAlertRuleTag","newAlertRuleTag","alertRuleTags","removeAlertRuleTag","tagName","checkFrequency","conditions","length","noDataState","alertingNoDataOrNullValues","executionErrorState","alertingErrorOrTimeout","frequency","handler","defaultName","title","conditionModels","memo","buildConditionModel","alertToGraphThresholds","addedNotification","identifier","publish","text","text2","icon","confirmText","yesText","onConfirm","notification","frequencyWarning","match","frequencySecs","intervalToSeconds","err","evt","condition","evaluator","params","handleIndex","threshold","evaluatorParamsChanged","firstTarget","foundTarget","promises","target","targets","query","refId","error","datasourceName","datasource","ds","meta","alerting","reject","targetContainsTemplate","all","$apply","e","source","cm","queryPart","alertQueryDef","reducerPart","createReducerPart","reducer","operator","handleQueryPartEvent","conditionModel","result","handleReducerPartEvent","action","reducerTypes","addCondition","removeCondition","index","splice","delete","thresholds","alertState","evaluatorTypeChanged","clearHistory","post","dashboardId","panelId","refresh","alertTab","restrict","scope","templateUrl","controller","directive"],"sources":["/home/soula/grafana/public/app/features/alerting/AlertTabCtrl.ts"],"sourcesContent":["import { find, map, reduce, remove } from 'lodash';\n\nimport { DataQuery, DataSourceApi, rangeUtil } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport coreModule from 'app/angular/core_module';\nimport { promiseToDigest } from 'app/angular/promiseToDigest';\nimport appEvents from 'app/core/app_events';\nimport config from 'app/core/config';\nimport { QueryPart } from 'app/features/alerting/state/query_part';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { CoreEvents } from 'app/types';\n\nimport { ShowConfirmModalEvent } from '../../types/events';\nimport { DashboardSrv } from '../dashboard/services/DashboardSrv';\nimport { DatasourceSrv } from '../plugins/datasource_srv';\n\nimport { getDefaultCondition } from './getAlertingValidationMessage';\nimport { ThresholdMapper } from './state/ThresholdMapper';\nimport alertDef from './state/alertDef';\n\nexport class AlertTabCtrl {\n  panel: PanelModel;\n  panelCtrl: any;\n  subTabIndex: number;\n  conditionTypes: any;\n  alert: any;\n  conditionModels: any;\n  evalFunctions: any;\n  evalOperators: any;\n  noDataModes: any;\n  executionErrorModes: any;\n  addNotificationSegment: any;\n  notifications: any;\n  alertNotifications: any;\n  error?: string;\n  appSubUrl: string;\n  alertHistory: any;\n  newAlertRuleTag: any;\n  alertingMinIntervalSecs: number;\n  alertingMinInterval: string;\n  frequencyWarning: any;\n\n  /** @ngInject */\n  constructor(\n    private $scope: any,\n    private dashboardSrv: DashboardSrv,\n    private uiSegmentSrv: any,\n    private datasourceSrv: DatasourceSrv\n  ) {\n    this.panelCtrl = $scope.ctrl;\n    this.panel = this.panelCtrl.panel;\n    this.$scope.ctrl = this;\n    this.subTabIndex = 0;\n    this.evalFunctions = alertDef.evalFunctions;\n    this.evalOperators = alertDef.evalOperators;\n    this.conditionTypes = alertDef.conditionTypes;\n    this.noDataModes = alertDef.noDataModes;\n    this.executionErrorModes = alertDef.executionErrorModes;\n    this.appSubUrl = config.appSubUrl;\n    this.panelCtrl._enableAlert = this.enable;\n    this.alertingMinIntervalSecs = config.alertingMinInterval;\n    this.alertingMinInterval = rangeUtil.secondsToHms(config.alertingMinInterval);\n  }\n\n  $onInit() {\n    this.addNotificationSegment = this.uiSegmentSrv.newPlusButton();\n\n    // subscribe to graph threshold handle changes\n    const thresholdChangedEventHandler = this.graphThresholdChanged.bind(this);\n    this.panelCtrl.events.on(CoreEvents.thresholdChanged, thresholdChangedEventHandler);\n\n    // set panel alert edit mode\n    this.$scope.$on('$destroy', () => {\n      this.panelCtrl.events.off(CoreEvents.thresholdChanged, thresholdChangedEventHandler);\n      this.panelCtrl.editingThresholds = false;\n      this.panelCtrl.render();\n    });\n\n    // build notification model\n    this.notifications = [];\n    this.alertNotifications = [];\n    this.alertHistory = [];\n\n    return promiseToDigest(this.$scope)(\n      getBackendSrv()\n        .get('/api/alert-notifications/lookup')\n        .then((res: any) => {\n          this.notifications = res;\n\n          this.initModel();\n          this.validateModel();\n        })\n    );\n  }\n\n  getAlertHistory() {\n    promiseToDigest(this.$scope)(\n      getBackendSrv()\n        .get(`/api/annotations?dashboardId=${this.panelCtrl.dashboard.id}&panelId=${this.panel.id}&limit=50&type=alert`)\n        .then((res: any) => {\n          this.alertHistory = map(res, (ah) => {\n            ah.time = this.dashboardSrv.getCurrent()?.formatDate(ah.time, 'MMM D, YYYY HH:mm:ss');\n            ah.stateModel = alertDef.getStateDisplayModel(ah.newState);\n            ah.info = alertDef.getAlertAnnotationInfo(ah);\n            return ah;\n          });\n        })\n    );\n  }\n\n  getNotificationIcon(type: string): string {\n    switch (type) {\n      case 'email':\n        return 'envelope';\n      case 'slack':\n        return 'slack';\n      case 'victorops':\n        return 'fa fa-pagelines';\n      case 'webhook':\n        return 'cube';\n      case 'pagerduty':\n        return 'fa fa-bullhorn';\n      case 'opsgenie':\n        return 'bell';\n      case 'hipchat':\n        return 'fa fa-mail-forward';\n      case 'pushover':\n        return 'mobile-android';\n      case 'kafka':\n        return 'arrow-random';\n      case 'teams':\n        return 'fa fa-windows';\n    }\n    return 'bell';\n  }\n\n  getNotifications() {\n    return Promise.resolve(\n      this.notifications.map((item: any) => {\n        return this.uiSegmentSrv.newSegment(item.name);\n      })\n    );\n  }\n\n  notificationAdded() {\n    const model: any = find(this.notifications, {\n      name: this.addNotificationSegment.value,\n    });\n    if (!model) {\n      return;\n    }\n\n    this.alertNotifications.push({\n      name: model.name,\n      iconClass: this.getNotificationIcon(model.type),\n      isDefault: false,\n      uid: model.uid,\n    });\n\n    // avoid duplicates using both id and uid to be backwards compatible.\n    if (!find(this.alert.notifications, (n) => n.id === model.id || n.uid === model.uid)) {\n      this.alert.notifications.push({ uid: model.uid });\n    }\n\n    // reset plus button\n    this.addNotificationSegment.value = this.uiSegmentSrv.newPlusButton().value;\n    this.addNotificationSegment.html = this.uiSegmentSrv.newPlusButton().html;\n    this.addNotificationSegment.fake = true;\n  }\n\n  removeNotification(an: any) {\n    // remove notifiers referred to by id and uid to support notifiers added\n    // before and after we added support for uid\n    remove(this.alert.notifications, (n: any) => n.uid === an.uid || n.id === an.id);\n    remove(this.alertNotifications, (n: any) => n.uid === an.uid || n.id === an.id);\n  }\n\n  addAlertRuleTag() {\n    if (this.newAlertRuleTag.name) {\n      this.alert.alertRuleTags[this.newAlertRuleTag.name] = this.newAlertRuleTag.value;\n    }\n    this.newAlertRuleTag.name = '';\n    this.newAlertRuleTag.value = '';\n  }\n\n  removeAlertRuleTag(tagName: string) {\n    delete this.alert.alertRuleTags[tagName];\n  }\n\n  initModel() {\n    const alert = (this.alert = this.panel.alert);\n    if (!alert) {\n      return;\n    }\n\n    this.checkFrequency();\n\n    alert.conditions = alert.conditions || [];\n    if (alert.conditions.length === 0) {\n      alert.conditions.push(getDefaultCondition());\n    }\n\n    alert.noDataState = alert.noDataState || config.alertingNoDataOrNullValues;\n    alert.executionErrorState = alert.executionErrorState || config.alertingErrorOrTimeout;\n    alert.frequency = alert.frequency || '1m';\n    alert.handler = alert.handler || 1;\n    alert.notifications = alert.notifications || [];\n    alert.for = alert.for || '0m';\n    alert.alertRuleTags = alert.alertRuleTags || {};\n\n    const defaultName = this.panel.title + ' alert';\n    alert.name = alert.name || defaultName;\n\n    this.conditionModels = reduce(\n      alert.conditions,\n      (memo, value) => {\n        memo.push(this.buildConditionModel(value));\n        return memo;\n      },\n      [] as string[]\n    );\n\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n\n    for (const addedNotification of alert.notifications) {\n      let identifier = addedNotification.uid;\n      // lookup notifier type by uid\n      let model: any = find(this.notifications, { uid: identifier });\n\n      // fallback using id if uid is missing\n      if (!model && addedNotification.id) {\n        identifier = addedNotification.id;\n        model = find(this.notifications, { id: identifier });\n      }\n\n      if (!model) {\n        appEvents.publish(\n          new ShowConfirmModalEvent({\n            title: 'Notifier with invalid identifier is detected',\n            text: `Do you want to delete notifier with invalid identifier: ${identifier} from the dashboard JSON?`,\n            text2: 'After successful deletion, make sure to save the dashboard for storing the update JSON.',\n            icon: 'trash-alt',\n            confirmText: 'Delete',\n            yesText: 'Delete',\n            onConfirm: async () => {\n              this.removeNotification(addedNotification);\n            },\n          })\n        );\n      }\n\n      if (model && model.isDefault === false) {\n        model.iconClass = this.getNotificationIcon(model.type);\n        this.alertNotifications.push(model);\n      }\n    }\n\n    for (const notification of this.notifications) {\n      if (notification.isDefault) {\n        notification.iconClass = this.getNotificationIcon(notification.type);\n        this.alertNotifications.push(notification);\n      }\n    }\n\n    this.panelCtrl.editingThresholds = true;\n    this.panelCtrl.render();\n  }\n\n  checkFrequency() {\n    this.frequencyWarning = '';\n\n    if (!this.alert.frequency) {\n      return;\n    }\n\n    if (!this.alert.frequency.match(/^\\d+([dhms])$/)) {\n      this.frequencyWarning =\n        'Invalid frequency, has to be numeric followed by one of the following units: \"d, h, m, s\"';\n      return;\n    }\n\n    try {\n      const frequencySecs = rangeUtil.intervalToSeconds(this.alert.frequency);\n      if (frequencySecs < this.alertingMinIntervalSecs) {\n        this.frequencyWarning =\n          'A minimum evaluation interval of ' +\n          this.alertingMinInterval +\n          ' have been configured in Grafana and will be used for this alert rule. ' +\n          'Please contact the administrator to configure a lower interval.';\n      }\n    } catch (err) {\n      this.frequencyWarning = err;\n    }\n  }\n\n  graphThresholdChanged(evt: any) {\n    for (const condition of this.alert.conditions) {\n      if (condition.type === 'query') {\n        condition.evaluator.params[evt.handleIndex] = evt.threshold.value;\n        this.evaluatorParamsChanged();\n        break;\n      }\n    }\n  }\n\n  validateModel() {\n    if (!this.alert) {\n      return;\n    }\n\n    let firstTarget;\n    let foundTarget: DataQuery | null = null;\n\n    const promises: Array<Promise<any>> = [];\n    for (const condition of this.alert.conditions) {\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      for (const target of this.panel.targets) {\n        if (!firstTarget) {\n          firstTarget = target;\n        }\n        if (condition.query.params[0] === target.refId) {\n          foundTarget = target;\n          break;\n        }\n      }\n\n      if (!foundTarget) {\n        if (firstTarget) {\n          condition.query.params[0] = firstTarget.refId;\n          foundTarget = firstTarget;\n        } else {\n          this.error = 'Could not find any metric queries';\n          return;\n        }\n      }\n\n      const datasourceName = foundTarget.datasource || this.panel.datasource;\n      promises.push(\n        this.datasourceSrv.get(datasourceName).then(\n          ((foundTarget) => (ds: DataSourceApi) => {\n            if (!ds.meta.alerting) {\n              return Promise.reject('The datasource does not support alerting queries');\n            } else if (ds.targetContainsTemplate && ds.targetContainsTemplate(foundTarget)) {\n              return Promise.reject('Template variables are not supported in alert queries');\n            }\n            return Promise.resolve();\n          })(foundTarget)\n        )\n      );\n    }\n    Promise.all(promises).then(\n      () => {\n        this.error = '';\n        this.$scope.$apply();\n      },\n      (e) => {\n        this.error = e;\n        this.$scope.$apply();\n      }\n    );\n  }\n\n  buildConditionModel(source: any) {\n    const cm: any = { source: source, type: source.type };\n\n    cm.queryPart = new QueryPart(source.query, alertDef.alertQueryDef);\n    cm.reducerPart = alertDef.createReducerPart(source.reducer);\n    cm.evaluator = source.evaluator;\n    cm.operator = source.operator;\n\n    return cm;\n  }\n\n  handleQueryPartEvent(conditionModel: any, evt: any) {\n    switch (evt.name) {\n      case 'action-remove-part': {\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([]);\n      }\n      case 'part-param-changed': {\n        this.validateModel();\n      }\n      case 'get-param-options': {\n        const result = this.panel.targets.map((target) => {\n          return this.uiSegmentSrv.newSegment({ value: target.refId });\n        });\n\n        return Promise.resolve(result);\n      }\n      default: {\n        return Promise.resolve();\n      }\n    }\n\n    return Promise.resolve();\n  }\n\n  handleReducerPartEvent(conditionModel: any, evt: any) {\n    switch (evt.name) {\n      case 'action': {\n        conditionModel.source.reducer.type = evt.action.value;\n        conditionModel.reducerPart = alertDef.createReducerPart(conditionModel.source.reducer);\n        this.evaluatorParamsChanged();\n        break;\n      }\n      case 'get-part-actions': {\n        const result = [];\n        for (const type of alertDef.reducerTypes) {\n          if (type.value !== conditionModel.source.reducer.type) {\n            result.push(type);\n          }\n        }\n        return Promise.resolve(result);\n      }\n    }\n\n    return Promise.resolve();\n  }\n\n  addCondition(type: string) {\n    const condition = getDefaultCondition();\n    // add to persited model\n    this.alert.conditions.push(condition);\n    // add to view model\n    this.conditionModels.push(this.buildConditionModel(condition));\n  }\n\n  removeCondition(index: number) {\n    this.alert.conditions.splice(index, 1);\n    this.conditionModels.splice(index, 1);\n  }\n\n  delete() {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete Alert',\n        text: 'Are you sure you want to delete this alert rule?',\n        text2: 'You need to save dashboard for the delete to take effect',\n        icon: 'trash-alt',\n        yesText: 'Delete',\n        onConfirm: () => {\n          delete this.panel.alert;\n          this.alert = null;\n          this.panel.thresholds = [];\n          this.conditionModels = [];\n          this.panelCtrl.alertState = null;\n          this.panelCtrl.render();\n        },\n      })\n    );\n  }\n\n  enable = () => {\n    this.panel.alert = {};\n    this.initModel();\n    this.panel.alert.for = '5m'; //default value for new alerts. for existing alerts we use 0m to avoid breaking changes\n  };\n\n  evaluatorParamsChanged() {\n    ThresholdMapper.alertToGraphThresholds(this.panel);\n    this.panelCtrl.render();\n  }\n\n  evaluatorTypeChanged(evaluator: any) {\n    // ensure params array is correct length\n    switch (evaluator.type) {\n      case 'lt':\n      case 'gt': {\n        evaluator.params = [evaluator.params[0]];\n        break;\n      }\n      case 'within_range':\n      case 'outside_range': {\n        evaluator.params = [evaluator.params[0], evaluator.params[1]];\n        break;\n      }\n      case 'no_value': {\n        evaluator.params = [];\n      }\n    }\n\n    this.evaluatorParamsChanged();\n  }\n\n  clearHistory() {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete Alert History',\n        text: 'Are you sure you want to remove all history & annotations for this alert?',\n        icon: 'trash-alt',\n        yesText: 'Yes',\n        onConfirm: () => {\n          promiseToDigest(this.$scope)(\n            getBackendSrv()\n              .post('/api/annotations/mass-delete', {\n                dashboardId: this.panelCtrl.dashboard.id,\n                panelId: this.panel.id,\n              })\n              .then(() => {\n                this.alertHistory = [];\n                this.panelCtrl.refresh();\n              })\n          );\n        },\n      })\n    );\n  }\n}\n\n/** @ngInject */\nexport function alertTab() {\n  'use strict';\n  return {\n    restrict: 'E',\n    scope: true,\n    templateUrl: 'public/app/features/alerting/partials/alert_tab.html',\n    controller: AlertTabCtrl,\n  };\n}\n\ncoreModule.directive('alertTab', alertTab);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}