{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, Input } from '..';\nimport { useStyles2 } from '../../themes';\nimport { Button } from '../Button';\nimport { Modal } from '../Modal/Modal';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const ConfirmModal = ({\n  isOpen,\n  title,\n  body,\n  description,\n  confirmText,\n  confirmationText,\n  dismissText = 'Cancel',\n  alternativeText,\n  icon = 'exclamation-triangle',\n  onConfirm,\n  onDismiss,\n  onAlternative\n}) => {\n  const [disabled, setDisabled] = useState(Boolean(confirmationText));\n  const styles = useStyles2(getStyles);\n  const buttonRef = useRef(null);\n\n  const onConfirmationTextChange = event => {\n    setDisabled((confirmationText === null || confirmationText === void 0 ? void 0 : confirmationText.localeCompare(event.currentTarget.value)) !== 0);\n  };\n\n  useEffect(() => {\n    // for some reason autoFocus property did no work on this button, but this does\n    if (isOpen) {\n      var _buttonRef$current;\n\n      (_buttonRef$current = buttonRef.current) === null || _buttonRef$current === void 0 ? void 0 : _buttonRef$current.focus();\n    }\n  }, [isOpen]);\n  return /*#__PURE__*/_jsxs(Modal, {\n    className: styles.modal,\n    title: title,\n    icon: icon,\n    isOpen: isOpen,\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.modalText,\n      children: [body, description ? /*#__PURE__*/_jsx(\"div\", {\n        className: styles.modalDescription,\n        children: description\n      }) : null, confirmationText ? /*#__PURE__*/_jsx(\"div\", {\n        className: styles.modalConfirmationInput,\n        children: /*#__PURE__*/_jsx(HorizontalGroup, {\n          children: /*#__PURE__*/_jsx(Input, {\n            placeholder: `Type ${confirmationText} to confirm`,\n            onChange: onConfirmationTextChange\n          })\n        })\n      }) : null]\n    }), /*#__PURE__*/_jsxs(Modal.ButtonRow, {\n      children: [/*#__PURE__*/_jsx(Button, {\n        variant: \"secondary\",\n        onClick: onDismiss,\n        fill: \"outline\",\n        children: dismissText\n      }), /*#__PURE__*/_jsx(Button, {\n        variant: \"destructive\",\n        onClick: onConfirm,\n        disabled: disabled,\n        ref: buttonRef,\n        \"aria-label\": selectors.pages.ConfirmModal.delete,\n        children: confirmText\n      }), onAlternative ? /*#__PURE__*/_jsx(Button, {\n        variant: \"primary\",\n        onClick: onAlternative,\n        children: alternativeText\n      }) : null]\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  modal: css`\n    width: 500px;\n  `,\n  modalText: css({\n    fontSize: theme.typography.h5.fontSize,\n    color: theme.colors.text.primary\n  }),\n  modalDescription: css({\n    fontSize: theme.typography.body.fontSize\n  }),\n  modalConfirmationInput: css({\n    paddingTop: theme.spacing(1)\n  })\n});","map":{"version":3,"names":["css","React","useEffect","useRef","useState","selectors","HorizontalGroup","Input","useStyles2","Button","Modal","ConfirmModal","isOpen","title","body","description","confirmText","confirmationText","dismissText","alternativeText","icon","onConfirm","onDismiss","onAlternative","disabled","setDisabled","Boolean","styles","getStyles","buttonRef","onConfirmationTextChange","event","localeCompare","currentTarget","value","current","focus","modal","modalText","modalDescription","modalConfirmationInput","pages","delete","theme","fontSize","typography","h5","color","colors","text","primary","paddingTop","spacing"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/ConfirmModal/ConfirmModal.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { HorizontalGroup, Input } from '..';\nimport { useStyles2 } from '../../themes';\nimport { IconName } from '../../types/icon';\nimport { Button } from '../Button';\nimport { Modal } from '../Modal/Modal';\n\nexport interface ConfirmModalProps {\n  /** Toggle modal's open/closed state */\n  isOpen: boolean;\n  /** Title for the modal header */\n  title: string;\n  /** Modal content */\n  body: React.ReactNode;\n  /** Modal description */\n  description?: React.ReactNode;\n  /** Text for confirm button */\n  confirmText: string;\n  /** Text for dismiss button */\n  dismissText?: string;\n  /** Icon for the modal header */\n  icon?: IconName;\n  /** Text user needs to fill in before confirming */\n  confirmationText?: string;\n  /** Text for alternative button */\n  alternativeText?: string;\n  /** Confirm action callback */\n  onConfirm(): void;\n  /** Dismiss action callback */\n  onDismiss(): void;\n  /** Alternative action callback */\n  onAlternative?(): void;\n}\n\nexport const ConfirmModal = ({\n  isOpen,\n  title,\n  body,\n  description,\n  confirmText,\n  confirmationText,\n  dismissText = 'Cancel',\n  alternativeText,\n  icon = 'exclamation-triangle',\n  onConfirm,\n  onDismiss,\n  onAlternative,\n}: ConfirmModalProps): JSX.Element => {\n  const [disabled, setDisabled] = useState(Boolean(confirmationText));\n  const styles = useStyles2(getStyles);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const onConfirmationTextChange = (event: React.FormEvent<HTMLInputElement>) => {\n    setDisabled(confirmationText?.localeCompare(event.currentTarget.value) !== 0);\n  };\n\n  useEffect(() => {\n    // for some reason autoFocus property did no work on this button, but this does\n    if (isOpen) {\n      buttonRef.current?.focus();\n    }\n  }, [isOpen]);\n\n  return (\n    <Modal className={styles.modal} title={title} icon={icon} isOpen={isOpen} onDismiss={onDismiss}>\n      <div className={styles.modalText}>\n        {body}\n        {description ? <div className={styles.modalDescription}>{description}</div> : null}\n        {confirmationText ? (\n          <div className={styles.modalConfirmationInput}>\n            <HorizontalGroup>\n              <Input placeholder={`Type ${confirmationText} to confirm`} onChange={onConfirmationTextChange} />\n            </HorizontalGroup>\n          </div>\n        ) : null}\n      </div>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          {dismissText}\n        </Button>\n        <Button\n          variant=\"destructive\"\n          onClick={onConfirm}\n          disabled={disabled}\n          ref={buttonRef}\n          aria-label={selectors.pages.ConfirmModal.delete}\n        >\n          {confirmText}\n        </Button>\n        {onAlternative ? (\n          <Button variant=\"primary\" onClick={onAlternative}>\n            {alternativeText}\n          </Button>\n        ) : null}\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 500px;\n  `,\n  modalText: css({\n    fontSize: theme.typography.h5.fontSize,\n    color: theme.colors.text.primary,\n  }),\n  modalDescription: css({\n    fontSize: theme.typography.body.fontSize,\n  }),\n  modalConfirmationInput: css({\n    paddingTop: theme.spacing(1),\n  }),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}