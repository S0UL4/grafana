{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { TransactionStatus } from '../types';\nimport { addVariable, changeVariableOrder, changeVariableProp, changeVariableType, duplicateVariable, removeVariable } from './sharedReducer';\nexport const initialTransactionState = {\n  uid: null,\n  status: TransactionStatus.NotStarted,\n  isDirty: false\n};\nconst transactionSlice = createSlice({\n  name: 'templating/transaction',\n  initialState: initialTransactionState,\n  reducers: {\n    variablesInitTransaction: (state, action) => {\n      state.uid = action.payload.uid;\n      state.status = TransactionStatus.Fetching;\n    },\n    variablesCompleteTransaction: (state, action) => {\n      if (state.uid !== action.payload.uid) {\n        // this might be an action from a cancelled batch\n        return;\n      }\n\n      state.status = TransactionStatus.Completed;\n    },\n    variablesClearTransaction: (state, action) => {\n      state.uid = null;\n      state.status = TransactionStatus.NotStarted;\n      state.isDirty = false;\n    }\n  },\n  extraReducers: builder => builder.addMatcher(actionAffectsDirtyState, (state, action) => {\n    if (state.status === TransactionStatus.Completed) {\n      state.isDirty = true;\n    }\n  })\n});\n\nfunction actionAffectsDirtyState(action) {\n  return removeVariable.match(action) || addVariable.match(action) || changeVariableProp.match(action) || changeVariableOrder.match(action) || duplicateVariable.match(action) || changeVariableType.match(action);\n}\n\nexport const {\n  variablesInitTransaction,\n  variablesClearTransaction,\n  variablesCompleteTransaction\n} = transactionSlice.actions;\nexport const transactionReducer = transactionSlice.reducer;","map":{"version":3,"names":["createSlice","TransactionStatus","addVariable","changeVariableOrder","changeVariableProp","changeVariableType","duplicateVariable","removeVariable","initialTransactionState","uid","status","NotStarted","isDirty","transactionSlice","name","initialState","reducers","variablesInitTransaction","state","action","payload","Fetching","variablesCompleteTransaction","Completed","variablesClearTransaction","extraReducers","builder","addMatcher","actionAffectsDirtyState","match","actions","transactionReducer","reducer"],"sources":["/home/soula/grafana/public/app/features/variables/state/transactionReducer.ts"],"sourcesContent":["import { AnyAction, createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { TransactionStatus } from '../types';\n\nimport {\n  addVariable,\n  changeVariableOrder,\n  changeVariableProp,\n  changeVariableType,\n  duplicateVariable,\n  removeVariable,\n} from './sharedReducer';\n\nexport interface TransactionState {\n  uid: string | undefined | null;\n  status: TransactionStatus;\n  isDirty: boolean;\n}\n\nexport const initialTransactionState: TransactionState = {\n  uid: null,\n  status: TransactionStatus.NotStarted,\n  isDirty: false,\n};\n\nconst transactionSlice = createSlice({\n  name: 'templating/transaction',\n  initialState: initialTransactionState,\n  reducers: {\n    variablesInitTransaction: (state, action: PayloadAction<{ uid: string | undefined | null }>) => {\n      state.uid = action.payload.uid;\n      state.status = TransactionStatus.Fetching;\n    },\n    variablesCompleteTransaction: (state, action: PayloadAction<{ uid: string | undefined | null }>) => {\n      if (state.uid !== action.payload.uid) {\n        // this might be an action from a cancelled batch\n        return;\n      }\n\n      state.status = TransactionStatus.Completed;\n    },\n    variablesClearTransaction: (state, action: PayloadAction<undefined>) => {\n      state.uid = null;\n      state.status = TransactionStatus.NotStarted;\n      state.isDirty = false;\n    },\n  },\n  extraReducers: (builder) =>\n    builder.addMatcher(actionAffectsDirtyState, (state, action) => {\n      if (state.status === TransactionStatus.Completed) {\n        state.isDirty = true;\n      }\n    }),\n});\n\nfunction actionAffectsDirtyState(action: AnyAction): boolean {\n  return (\n    removeVariable.match(action) ||\n    addVariable.match(action) ||\n    changeVariableProp.match(action) ||\n    changeVariableOrder.match(action) ||\n    duplicateVariable.match(action) ||\n    changeVariableType.match(action)\n  );\n}\n\nexport const { variablesInitTransaction, variablesClearTransaction, variablesCompleteTransaction } =\n  transactionSlice.actions;\n\nexport const transactionReducer = transactionSlice.reducer;\n"],"mappings":"AAAA,SAAoBA,WAApB,QAAsD,kBAAtD;AAEA,SAASC,iBAAT,QAAkC,UAAlC;AAEA,SACEC,WADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,kBAJF,EAKEC,iBALF,EAMEC,cANF,QAOO,iBAPP;AAeA,OAAO,MAAMC,uBAAyC,GAAG;EACvDC,GAAG,EAAE,IADkD;EAEvDC,MAAM,EAAET,iBAAiB,CAACU,UAF6B;EAGvDC,OAAO,EAAE;AAH8C,CAAlD;AAMP,MAAMC,gBAAgB,GAAGb,WAAW,CAAC;EACnCc,IAAI,EAAE,wBAD6B;EAEnCC,YAAY,EAAEP,uBAFqB;EAGnCQ,QAAQ,EAAE;IACRC,wBAAwB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAsE;MAC9FD,KAAK,CAACT,GAAN,GAAYU,MAAM,CAACC,OAAP,CAAeX,GAA3B;MACAS,KAAK,CAACR,MAAN,GAAeT,iBAAiB,CAACoB,QAAjC;IACD,CAJO;IAKRC,4BAA4B,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAsE;MAClG,IAAID,KAAK,CAACT,GAAN,KAAcU,MAAM,CAACC,OAAP,CAAeX,GAAjC,EAAsC;QACpC;QACA;MACD;;MAEDS,KAAK,CAACR,MAAN,GAAeT,iBAAiB,CAACsB,SAAjC;IACD,CAZO;IAaRC,yBAAyB,EAAE,CAACN,KAAD,EAAQC,MAAR,KAA6C;MACtED,KAAK,CAACT,GAAN,GAAY,IAAZ;MACAS,KAAK,CAACR,MAAN,GAAeT,iBAAiB,CAACU,UAAjC;MACAO,KAAK,CAACN,OAAN,GAAgB,KAAhB;IACD;EAjBO,CAHyB;EAsBnCa,aAAa,EAAGC,OAAD,IACbA,OAAO,CAACC,UAAR,CAAmBC,uBAAnB,EAA4C,CAACV,KAAD,EAAQC,MAAR,KAAmB;IAC7D,IAAID,KAAK,CAACR,MAAN,KAAiBT,iBAAiB,CAACsB,SAAvC,EAAkD;MAChDL,KAAK,CAACN,OAAN,GAAgB,IAAhB;IACD;EACF,CAJD;AAvBiC,CAAD,CAApC;;AA8BA,SAASgB,uBAAT,CAAiCT,MAAjC,EAA6D;EAC3D,OACEZ,cAAc,CAACsB,KAAf,CAAqBV,MAArB,KACAjB,WAAW,CAAC2B,KAAZ,CAAkBV,MAAlB,CADA,IAEAf,kBAAkB,CAACyB,KAAnB,CAAyBV,MAAzB,CAFA,IAGAhB,mBAAmB,CAAC0B,KAApB,CAA0BV,MAA1B,CAHA,IAIAb,iBAAiB,CAACuB,KAAlB,CAAwBV,MAAxB,CAJA,IAKAd,kBAAkB,CAACwB,KAAnB,CAAyBV,MAAzB,CANF;AAQD;;AAED,OAAO,MAAM;EAAEF,wBAAF;EAA4BO,yBAA5B;EAAuDF;AAAvD,IACXT,gBAAgB,CAACiB,OADZ;AAGP,OAAO,MAAMC,kBAAkB,GAAGlB,gBAAgB,CAACmB,OAA5C"},"metadata":{},"sourceType":"module"}