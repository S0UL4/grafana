{"ast":null,"code":"var _Icon;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css, cx } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport tinycolor from 'tinycolor2';\nimport { dateTimeFormat } from '@grafana/data';\nimport { LogMessageAnsi, getLogRowStyles, Icon, Button, withTheme2 } from '@grafana/ui';\nimport { ElapsedTime } from './ElapsedTime';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst getStyles = theme => ({\n  logsRowsLive: css`\n    label: logs-rows-live;\n    font-family: ${theme.typography.fontFamilyMonospace};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    display: flex;\n    flex-flow: column nowrap;\n    height: 60vh;\n    overflow-y: scroll;\n    :first-child {\n      margin-top: auto !important;\n    }\n  `,\n  logsRowFade: css`\n    label: logs-row-fresh;\n    color: ${theme.colors.text};\n    background-color: ${tinycolor(theme.colors.info.transparent).setAlpha(0.25).toString()};\n    animation: fade 1s ease-out 1s 1 normal forwards;\n    @keyframes fade {\n      from {\n        background-color: ${tinycolor(theme.colors.info.transparent).setAlpha(0.25).toString()};\n      }\n      to {\n        background-color: transparent;\n      }\n    }\n  `,\n  logsRowsIndicator: css`\n    font-size: ${theme.typography.h6.fontSize};\n    padding-top: ${theme.spacing(1)};\n    display: flex;\n    align-items: center;\n  `,\n  button: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  fullWidth: css`\n    width: 100%;\n  `\n});\n\nclass LiveLogs extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"liveEndDiv\", null);\n\n    _defineProperty(this, \"scrollContainerRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"onScroll\", event => {\n      const {\n        isPaused,\n        onPause\n      } = this.props;\n      const {\n        scrollTop,\n        clientHeight,\n        scrollHeight\n      } = event.currentTarget;\n      const distanceFromBottom = scrollHeight - (scrollTop + clientHeight);\n\n      if (distanceFromBottom >= 5 && !isPaused) {\n        onPause();\n      }\n    });\n\n    _defineProperty(this, \"rowsToRender\", () => {\n      const {\n        isPaused\n      } = this.props;\n      let {\n        logRowsToRender: rowsToRender = []\n      } = this.state;\n\n      if (!isPaused) {\n        // A perf optimisation here. Show just 100 rows when streaming and full length when the streaming is paused.\n        rowsToRender = rowsToRender.slice(-100);\n      }\n\n      return rowsToRender;\n    });\n\n    this.state = {\n      logRowsToRender: props.logRows\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    if (!nextProps.isPaused) {\n      return {\n        // We update what we show only if not paused. We keep any background subscriptions running and keep updating\n        // our state, but we do not show the updates, this allows us start again showing correct result after resuming\n        // without creating a gap in the log results.\n        logRowsToRender: nextProps.logRows\n      };\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Handle pausing when user scrolls up so that we stop resetting his position to the bottom when new row arrives.\n   * We do not need to throttle it here much, adding new rows should be throttled/buffered itself in the query epics\n   * and after you pause we remove the handler and add it after you manually resume, so this should not be fired often.\n   */\n\n\n  render() {\n    const {\n      theme,\n      timeZone,\n      onPause,\n      onResume,\n      isPaused\n    } = this.props;\n    const styles = getStyles(theme);\n    const {\n      logsRow,\n      logsRowLocalTime,\n      logsRowMessage\n    } = getLogRowStyles(theme);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"table\", {\n        className: styles.fullWidth,\n        children: /*#__PURE__*/_jsxs(\"tbody\", {\n          onScroll: isPaused ? undefined : this.onScroll,\n          className: cx(['logs-rows', styles.logsRowsLive]),\n          ref: this.scrollContainerRef,\n          children: [this.rowsToRender().map(row => {\n            return /*#__PURE__*/_jsxs(\"tr\", {\n              className: cx(logsRow, styles.logsRowFade),\n              children: [/*#__PURE__*/_jsx(\"td\", {\n                className: cx(logsRowLocalTime),\n                children: dateTimeFormat(row.timeEpochMs, {\n                  timeZone\n                })\n              }), /*#__PURE__*/_jsx(\"td\", {\n                className: cx(logsRowMessage),\n                children: row.hasAnsi ? /*#__PURE__*/_jsx(LogMessageAnsi, {\n                  value: row.raw\n                }) : row.entry\n              })]\n            }, row.uid);\n          }), /*#__PURE__*/_jsx(\"tr\", {\n            ref: element => {\n              var _this$scrollContainer;\n\n              this.liveEndDiv = element; // This is triggered on every update so on every new row. It keeps the view scrolled at the bottom by\n              // default.\n              // As scrollTo is not implemented in JSDOM it needs to be part of the condition\n\n              if (this.liveEndDiv && (_this$scrollContainer = this.scrollContainerRef.current) !== null && _this$scrollContainer !== void 0 && _this$scrollContainer.scrollTo && !isPaused) {\n                var _this$scrollContainer2;\n\n                (_this$scrollContainer2 = this.scrollContainerRef.current) === null || _this$scrollContainer2 === void 0 ? void 0 : _this$scrollContainer2.scrollTo(0, this.scrollContainerRef.current.scrollHeight);\n              }\n            }\n          })]\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.logsRowsIndicator,\n        children: [/*#__PURE__*/_jsxs(Button, {\n          variant: \"secondary\",\n          onClick: isPaused ? onResume : onPause,\n          className: styles.button,\n          children: [/*#__PURE__*/_jsx(Icon, {\n            name: isPaused ? 'play' : 'pause'\n          }), \"\\xA0\", isPaused ? 'Resume' : 'Pause']\n        }), /*#__PURE__*/_jsxs(Button, {\n          variant: \"secondary\",\n          onClick: this.props.stopLive,\n          className: styles.button,\n          children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n            name: \"square-shape\",\n            size: \"lg\",\n            type: \"mono\"\n          })), \"\\xA0 Exit live mode\"]\n        }), isPaused || /*#__PURE__*/_jsxs(\"span\", {\n          children: [\"Last line received: \", /*#__PURE__*/_jsx(ElapsedTime, {\n            resetKey: this.props.logRows,\n            humanize: true\n          }), \" ago\"]\n        })]\n      })]\n    });\n  }\n\n}\n\nexport const LiveLogsWithTheme = withTheme2(LiveLogs);","map":{"version":3,"names":["css","cx","React","PureComponent","tinycolor","dateTimeFormat","LogMessageAnsi","getLogRowStyles","Icon","Button","withTheme2","ElapsedTime","getStyles","theme","logsRowsLive","typography","fontFamilyMonospace","bodySmall","fontSize","logsRowFade","colors","text","info","transparent","setAlpha","toString","logsRowsIndicator","h6","spacing","button","fullWidth","LiveLogs","constructor","props","createRef","event","isPaused","onPause","scrollTop","clientHeight","scrollHeight","currentTarget","distanceFromBottom","logRowsToRender","rowsToRender","state","slice","logRows","getDerivedStateFromProps","nextProps","render","timeZone","onResume","styles","logsRow","logsRowLocalTime","logsRowMessage","undefined","onScroll","scrollContainerRef","map","row","timeEpochMs","hasAnsi","raw","entry","uid","element","liveEndDiv","current","scrollTo","stopLive","LiveLogsWithTheme"],"sources":["/home/soula/grafana/public/app/features/explore/LiveLogs.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport tinycolor from 'tinycolor2';\n\nimport { LogRowModel, TimeZone, dateTimeFormat, GrafanaTheme2 } from '@grafana/data';\nimport { LogMessageAnsi, getLogRowStyles, Icon, Button, Themeable2, withTheme2 } from '@grafana/ui';\n\nimport { ElapsedTime } from './ElapsedTime';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  logsRowsLive: css`\n    label: logs-rows-live;\n    font-family: ${theme.typography.fontFamilyMonospace};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    display: flex;\n    flex-flow: column nowrap;\n    height: 60vh;\n    overflow-y: scroll;\n    :first-child {\n      margin-top: auto !important;\n    }\n  `,\n  logsRowFade: css`\n    label: logs-row-fresh;\n    color: ${theme.colors.text};\n    background-color: ${tinycolor(theme.colors.info.transparent).setAlpha(0.25).toString()};\n    animation: fade 1s ease-out 1s 1 normal forwards;\n    @keyframes fade {\n      from {\n        background-color: ${tinycolor(theme.colors.info.transparent).setAlpha(0.25).toString()};\n      }\n      to {\n        background-color: transparent;\n      }\n    }\n  `,\n  logsRowsIndicator: css`\n    font-size: ${theme.typography.h6.fontSize};\n    padding-top: ${theme.spacing(1)};\n    display: flex;\n    align-items: center;\n  `,\n  button: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  fullWidth: css`\n    width: 100%;\n  `,\n});\n\nexport interface Props extends Themeable2 {\n  logRows?: LogRowModel[];\n  timeZone: TimeZone;\n  stopLive: () => void;\n  onPause: () => void;\n  onResume: () => void;\n  isPaused: boolean;\n}\n\ninterface State {\n  logRowsToRender?: LogRowModel[];\n}\n\nclass LiveLogs extends PureComponent<Props, State> {\n  private liveEndDiv: HTMLDivElement | null = null;\n  private scrollContainerRef = React.createRef<HTMLTableSectionElement>();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      logRowsToRender: props.logRows,\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: Props, state: State) {\n    if (!nextProps.isPaused) {\n      return {\n        // We update what we show only if not paused. We keep any background subscriptions running and keep updating\n        // our state, but we do not show the updates, this allows us start again showing correct result after resuming\n        // without creating a gap in the log results.\n        logRowsToRender: nextProps.logRows,\n      };\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Handle pausing when user scrolls up so that we stop resetting his position to the bottom when new row arrives.\n   * We do not need to throttle it here much, adding new rows should be throttled/buffered itself in the query epics\n   * and after you pause we remove the handler and add it after you manually resume, so this should not be fired often.\n   */\n  onScroll = (event: React.SyntheticEvent) => {\n    const { isPaused, onPause } = this.props;\n    const { scrollTop, clientHeight, scrollHeight } = event.currentTarget;\n    const distanceFromBottom = scrollHeight - (scrollTop + clientHeight);\n    if (distanceFromBottom >= 5 && !isPaused) {\n      onPause();\n    }\n  };\n\n  rowsToRender = () => {\n    const { isPaused } = this.props;\n    let { logRowsToRender: rowsToRender = [] } = this.state;\n    if (!isPaused) {\n      // A perf optimisation here. Show just 100 rows when streaming and full length when the streaming is paused.\n      rowsToRender = rowsToRender.slice(-100);\n    }\n    return rowsToRender;\n  };\n\n  render() {\n    const { theme, timeZone, onPause, onResume, isPaused } = this.props;\n    const styles = getStyles(theme);\n    const { logsRow, logsRowLocalTime, logsRowMessage } = getLogRowStyles(theme);\n\n    return (\n      <div>\n        <table className={styles.fullWidth}>\n          <tbody\n            onScroll={isPaused ? undefined : this.onScroll}\n            className={cx(['logs-rows', styles.logsRowsLive])}\n            ref={this.scrollContainerRef}\n          >\n            {this.rowsToRender().map((row: LogRowModel) => {\n              return (\n                <tr className={cx(logsRow, styles.logsRowFade)} key={row.uid}>\n                  <td className={cx(logsRowLocalTime)}>{dateTimeFormat(row.timeEpochMs, { timeZone })}</td>\n                  <td className={cx(logsRowMessage)}>{row.hasAnsi ? <LogMessageAnsi value={row.raw} /> : row.entry}</td>\n                </tr>\n              );\n            })}\n            <tr\n              ref={(element) => {\n                this.liveEndDiv = element;\n                // This is triggered on every update so on every new row. It keeps the view scrolled at the bottom by\n                // default.\n                // As scrollTo is not implemented in JSDOM it needs to be part of the condition\n                if (this.liveEndDiv && this.scrollContainerRef.current?.scrollTo && !isPaused) {\n                  this.scrollContainerRef.current?.scrollTo(0, this.scrollContainerRef.current.scrollHeight);\n                }\n              }}\n            />\n          </tbody>\n        </table>\n        <div className={styles.logsRowsIndicator}>\n          <Button variant=\"secondary\" onClick={isPaused ? onResume : onPause} className={styles.button}>\n            <Icon name={isPaused ? 'play' : 'pause'} />\n            &nbsp;\n            {isPaused ? 'Resume' : 'Pause'}\n          </Button>\n          <Button variant=\"secondary\" onClick={this.props.stopLive} className={styles.button}>\n            <Icon name=\"square-shape\" size=\"lg\" type=\"mono\" />\n            &nbsp; Exit live mode\n          </Button>\n          {isPaused || (\n            <span>\n              Last line received: <ElapsedTime resetKey={this.props.logRows} humanize={true} /> ago\n            </span>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const LiveLogsWithTheme = withTheme2(LiveLogs);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}