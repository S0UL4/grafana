{"ast":null,"code":"var _Spinner;\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { default as ReactSelect } from 'react-select';\nimport { default as ReactAsyncSelect } from 'react-select/async';\nimport { default as AsyncCreatable } from 'react-select/async-creatable';\nimport Creatable from 'react-select/creatable';\nimport { useTheme2 } from '../../themes';\nimport { Icon } from '../Icon/Icon';\nimport { Spinner } from '../Spinner/Spinner';\nimport { DropdownIndicator } from './DropdownIndicator';\nimport { IndicatorsContainer } from './IndicatorsContainer';\nimport { InputControl } from './InputControl';\nimport { MultiValueContainer, MultiValueRemove } from './MultiValue';\nimport { SelectContainer } from './SelectContainer';\nimport { SelectMenu, SelectMenuOptions } from './SelectMenu';\nimport { SelectOptionGroup } from './SelectOptionGroup';\nimport { SingleValue } from './SingleValue';\nimport { ValueContainer } from './ValueContainer';\nimport { getSelectStyles } from './getSelectStyles';\nimport { useCustomSelectStyles } from './resetSelectStyles';\nimport { cleanValue, findSelectedValue } from './utils';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst renderExtraValuesIndicator = props => {\n  const {\n    maxVisibleValues,\n    selectedValuesCount,\n    menuIsOpen,\n    showAllSelectedWhenOpen\n  } = props;\n\n  if (maxVisibleValues !== undefined && selectedValuesCount > maxVisibleValues && !(showAllSelectedWhenOpen && menuIsOpen)) {\n    return /*#__PURE__*/_jsxs(\"span\", {\n      id: \"excess-values\",\n      children: [\"(+\", selectedValuesCount - maxVisibleValues, \")\"]\n    }, \"excess-values\");\n  }\n\n  return null;\n};\n\nconst CustomControl = props => {\n  const {\n    children,\n    innerProps,\n    selectProps: {\n      menuIsOpen,\n      onMenuClose,\n      onMenuOpen\n    },\n    isFocused,\n    isMulti,\n    getValue,\n    innerRef\n  } = props;\n  const selectProps = props.selectProps;\n\n  if (selectProps.renderControl) {\n    return /*#__PURE__*/React.createElement(selectProps.renderControl, {\n      isOpen: menuIsOpen,\n      value: isMulti ? getValue() : getValue()[0],\n      ref: innerRef,\n      onClick: menuIsOpen ? onMenuClose : onMenuOpen,\n      onBlur: onMenuClose,\n      disabled: !!selectProps.disabled,\n      invalid: !!selectProps.invalid\n    });\n  }\n\n  return /*#__PURE__*/_jsx(InputControl, {\n    ref: innerRef,\n    innerProps: innerProps,\n    prefix: selectProps.prefix,\n    focused: isFocused,\n    invalid: !!selectProps.invalid,\n    disabled: !!selectProps.disabled,\n    children: children\n  });\n};\n\nexport function SelectBase({\n  allowCustomValue = false,\n  allowCreateWhileLoading = false,\n  'aria-label': ariaLabel,\n  autoFocus = false,\n  backspaceRemovesValue = true,\n  cacheOptions,\n  className,\n  closeMenuOnSelect = true,\n  components,\n  defaultOptions,\n  defaultValue,\n  disabled = false,\n  filterOption,\n  formatCreateLabel,\n  getOptionLabel,\n  getOptionValue,\n  inputValue,\n  invalid,\n  isClearable = false,\n  id,\n  isLoading = false,\n  isMulti = false,\n  inputId,\n  isOpen,\n  isOptionDisabled,\n  isSearchable = true,\n  loadOptions,\n  loadingMessage = 'Loading options...',\n  maxMenuHeight = 300,\n  minMenuHeight,\n  maxVisibleValues,\n  menuPlacement = 'auto',\n  menuPosition,\n  menuShouldPortal = true,\n  noOptionsMessage = 'No options found',\n  onBlur,\n  onChange,\n  onCloseMenu,\n  onCreateOption,\n  onInputChange,\n  onKeyDown,\n  onOpenMenu,\n  onFocus,\n  openMenuOnFocus = false,\n  options = [],\n  placeholder = 'Choose',\n  prefix,\n  renderControl,\n  showAllSelectedWhenOpen = true,\n  tabSelectsValue = true,\n  value,\n  width,\n  isValidNewOption,\n  formatOptionLabel\n}) {\n  var _selectedValue;\n\n  const theme = useTheme2();\n  const styles = getSelectStyles(theme);\n  const reactSelectRef = useRef(null);\n  const [closeToBottom, setCloseToBottom] = useState(false);\n  const selectStyles = useCustomSelectStyles(theme, width); // Infer the menu position for asynchronously loaded options. menuPlacement=\"auto\" doesn't work when the menu is\n  // automatically opened when the component is created (it happens in SegmentSelect by setting menuIsOpen={true}).\n  // We can remove this workaround when the bug in react-select is fixed: https://github.com/JedWatson/react-select/issues/4936\n  // Note: we use useEffect instead of hooking into onMenuOpen due to another bug: https://github.com/JedWatson/react-select/issues/3375\n\n  useEffect(() => {\n    if (loadOptions && isOpen && reactSelectRef.current && reactSelectRef.current.controlRef && menuPlacement === 'auto') {\n      const distance = window.innerHeight - reactSelectRef.current.controlRef.getBoundingClientRect().bottom;\n      setCloseToBottom(distance < maxMenuHeight);\n    }\n  }, [maxMenuHeight, menuPlacement, loadOptions, isOpen]);\n  const onChangeWithEmpty = useCallback((value, action) => {\n    if (isMulti && (value === undefined || value === null)) {\n      return onChange([], action);\n    }\n\n    onChange(value, action);\n  }, [isMulti, onChange]);\n  let ReactSelectComponent = ReactSelect;\n  const creatableProps = {};\n  let asyncSelectProps = {};\n  let selectedValue;\n\n  if (isMulti && loadOptions) {\n    selectedValue = value;\n  } else {\n    // If option is passed as a plain value (value property from SelectableValue property)\n    // we are selecting the corresponding value from the options\n    if (isMulti && value && Array.isArray(value) && !loadOptions) {\n      // @ts-ignore\n      selectedValue = value.map(v => {\n        var _v$value;\n\n        return findSelectedValue((_v$value = v.value) !== null && _v$value !== void 0 ? _v$value : v, options);\n      });\n    } else if (loadOptions) {\n      const hasValue = defaultValue || value;\n      selectedValue = hasValue ? [hasValue] : [];\n    } else {\n      selectedValue = cleanValue(value, options);\n    }\n  }\n\n  const commonSelectProps = {\n    'aria-label': ariaLabel,\n    autoFocus,\n    backspaceRemovesValue,\n    captureMenuScroll: false,\n    closeMenuOnSelect,\n    // We don't want to close if we're actually scrolling the menu\n    // So only close if none of the parents are the select menu itself\n    defaultValue,\n    // Also passing disabled, as this is the new Select API, and I want to use this prop instead of react-select's one\n    disabled,\n    filterOption,\n    getOptionLabel,\n    getOptionValue,\n    inputValue,\n    invalid,\n    isClearable,\n    id,\n    // Passing isDisabled as react-select accepts this prop\n    isDisabled: disabled,\n    isLoading,\n    isMulti,\n    inputId,\n    isOptionDisabled,\n    isSearchable,\n    maxMenuHeight,\n    minMenuHeight,\n    maxVisibleValues,\n    menuIsOpen: isOpen,\n    menuPlacement: menuPlacement === 'auto' && closeToBottom ? 'top' : menuPlacement,\n    menuPosition,\n    menuShouldBlockScroll: true,\n    menuPortalTarget: menuShouldPortal && typeof document !== 'undefined' ? document.body : undefined,\n    menuShouldScrollIntoView: false,\n    onBlur,\n    onChange: onChangeWithEmpty,\n    onInputChange,\n    onKeyDown,\n    onMenuClose: onCloseMenu,\n    onMenuOpen: onOpenMenu,\n    onFocus,\n    formatOptionLabel,\n    openMenuOnFocus,\n    options,\n    placeholder,\n    prefix,\n    renderControl,\n    showAllSelectedWhenOpen,\n    tabSelectsValue,\n    value: isMulti ? selectedValue : (_selectedValue = selectedValue) === null || _selectedValue === void 0 ? void 0 : _selectedValue[0]\n  };\n\n  if (allowCustomValue) {\n    ReactSelectComponent = Creatable;\n    creatableProps.allowCreateWhileLoading = allowCreateWhileLoading;\n    creatableProps.formatCreateLabel = formatCreateLabel !== null && formatCreateLabel !== void 0 ? formatCreateLabel : defaultFormatCreateLabel;\n    creatableProps.onCreateOption = onCreateOption;\n    creatableProps.isValidNewOption = isValidNewOption;\n  } // Instead of having AsyncSelect, as a separate component we render ReactAsyncSelect\n\n\n  if (loadOptions) {\n    ReactSelectComponent = allowCustomValue ? AsyncCreatable : ReactAsyncSelect;\n    asyncSelectProps = {\n      loadOptions,\n      cacheOptions,\n      defaultOptions\n    };\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(ReactSelectComponent, Object.assign({\n      ref: reactSelectRef,\n      components: Object.assign({\n        MenuList: SelectMenu,\n        Group: SelectOptionGroup,\n        ValueContainer,\n\n        IndicatorsContainer(props) {\n          const {\n            selectProps\n          } = props;\n          const {\n            value,\n            showAllSelectedWhenOpen,\n            maxVisibleValues,\n            menuIsOpen\n          } = selectProps;\n\n          if (maxVisibleValues !== undefined) {\n            const selectedValuesCount = value.length;\n            const indicatorChildren = [...props.children];\n            indicatorChildren.splice(-1, 0, renderExtraValuesIndicator({\n              maxVisibleValues,\n              selectedValuesCount,\n              showAllSelectedWhenOpen,\n              menuIsOpen\n            }));\n            return /*#__PURE__*/_jsx(IndicatorsContainer, Object.assign({}, props, {\n              children: indicatorChildren\n            }));\n          }\n\n          return /*#__PURE__*/_jsx(IndicatorsContainer, Object.assign({}, props));\n        },\n\n        IndicatorSeparator() {\n          return /*#__PURE__*/_jsx(_Fragment, {});\n        },\n\n        Control: CustomControl,\n        Option: SelectMenuOptions,\n\n        ClearIndicator(props) {\n          const {\n            clearValue\n          } = props;\n          return /*#__PURE__*/_jsx(Icon, {\n            name: \"times\",\n            role: \"button\",\n            \"aria-label\": \"select-clear-value\",\n            className: styles.singleValueRemove,\n            onMouseDown: e => {\n              e.preventDefault();\n              e.stopPropagation();\n              clearValue();\n            }\n          });\n        },\n\n        LoadingIndicator(props) {\n          return _Spinner || (_Spinner = /*#__PURE__*/_jsx(Spinner, {\n            inline: true\n          }));\n        },\n\n        LoadingMessage(props) {\n          return /*#__PURE__*/_jsx(\"div\", {\n            className: styles.loadingMessage,\n            children: loadingMessage\n          });\n        },\n\n        NoOptionsMessage(props) {\n          return /*#__PURE__*/_jsx(\"div\", {\n            className: styles.loadingMessage,\n            \"aria-label\": \"No options provided\",\n            children: noOptionsMessage\n          });\n        },\n\n        DropdownIndicator(props) {\n          return /*#__PURE__*/_jsx(DropdownIndicator, {\n            isOpen: props.selectProps.menuIsOpen\n          });\n        },\n\n        SingleValue(props) {\n          return /*#__PURE__*/_jsx(SingleValue, Object.assign({}, props, {\n            disabled: disabled\n          }));\n        },\n\n        MultiValueContainer: MultiValueContainer,\n        MultiValueRemove: MultiValueRemove,\n        SelectContainer\n      }, components),\n      styles: selectStyles,\n      className: className\n    }, commonSelectProps, creatableProps, asyncSelectProps))\n  });\n}\n\nfunction defaultFormatCreateLabel(input) {\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      display: 'flex',\n      gap: '8px',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      children: input\n    }), /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        flexGrow: 1\n      }\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"muted small\",\n      style: {\n        display: 'flex',\n        gap: '8px',\n        alignItems: 'center'\n      },\n      children: \"Hit enter to add\"\n    })]\n  });\n}","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","default","ReactSelect","ReactAsyncSelect","AsyncCreatable","Creatable","useTheme2","Icon","Spinner","DropdownIndicator","IndicatorsContainer","InputControl","MultiValueContainer","MultiValueRemove","SelectContainer","SelectMenu","SelectMenuOptions","SelectOptionGroup","SingleValue","ValueContainer","getSelectStyles","useCustomSelectStyles","cleanValue","findSelectedValue","renderExtraValuesIndicator","props","maxVisibleValues","selectedValuesCount","menuIsOpen","showAllSelectedWhenOpen","undefined","CustomControl","children","innerProps","selectProps","onMenuClose","onMenuOpen","isFocused","isMulti","getValue","innerRef","renderControl","createElement","isOpen","value","ref","onClick","onBlur","disabled","invalid","prefix","SelectBase","allowCustomValue","allowCreateWhileLoading","ariaLabel","autoFocus","backspaceRemovesValue","cacheOptions","className","closeMenuOnSelect","components","defaultOptions","defaultValue","filterOption","formatCreateLabel","getOptionLabel","getOptionValue","inputValue","isClearable","id","isLoading","inputId","isOptionDisabled","isSearchable","loadOptions","loadingMessage","maxMenuHeight","minMenuHeight","menuPlacement","menuPosition","menuShouldPortal","noOptionsMessage","onChange","onCloseMenu","onCreateOption","onInputChange","onKeyDown","onOpenMenu","onFocus","openMenuOnFocus","options","placeholder","tabSelectsValue","width","isValidNewOption","formatOptionLabel","theme","styles","reactSelectRef","closeToBottom","setCloseToBottom","selectStyles","current","controlRef","distance","window","innerHeight","getBoundingClientRect","bottom","onChangeWithEmpty","action","ReactSelectComponent","creatableProps","asyncSelectProps","selectedValue","Array","isArray","map","v","hasValue","commonSelectProps","captureMenuScroll","isDisabled","menuShouldBlockScroll","menuPortalTarget","document","body","menuShouldScrollIntoView","defaultFormatCreateLabel","MenuList","Group","length","indicatorChildren","splice","IndicatorSeparator","Control","Option","ClearIndicator","clearValue","singleValueRemove","e","preventDefault","stopPropagation","LoadingIndicator","LoadingMessage","NoOptionsMessage","input","display","gap","alignItems","flexGrow"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Select/SelectBase.tsx"],"sourcesContent":["import React, { ComponentProps, useCallback, useEffect, useRef, useState } from 'react';\nimport { default as ReactSelect } from 'react-select';\nimport { default as ReactAsyncSelect } from 'react-select/async';\nimport { default as AsyncCreatable } from 'react-select/async-creatable';\nimport Creatable from 'react-select/creatable';\n\nimport { useTheme2 } from '../../themes';\nimport { Icon } from '../Icon/Icon';\nimport { Spinner } from '../Spinner/Spinner';\n\nimport { DropdownIndicator } from './DropdownIndicator';\nimport { IndicatorsContainer } from './IndicatorsContainer';\nimport { InputControl } from './InputControl';\nimport { MultiValueContainer, MultiValueRemove } from './MultiValue';\nimport { SelectContainer } from './SelectContainer';\nimport { SelectMenu, SelectMenuOptions } from './SelectMenu';\nimport { SelectOptionGroup } from './SelectOptionGroup';\nimport { SingleValue } from './SingleValue';\nimport { ValueContainer } from './ValueContainer';\nimport { getSelectStyles } from './getSelectStyles';\nimport { useCustomSelectStyles } from './resetSelectStyles';\nimport { ActionMeta, SelectBaseProps, SelectValue } from './types';\nimport { cleanValue, findSelectedValue } from './utils';\n\ninterface ExtraValuesIndicatorProps {\n  maxVisibleValues?: number | undefined;\n  selectedValuesCount: number;\n  menuIsOpen: boolean;\n  showAllSelectedWhenOpen: boolean;\n}\n\nconst renderExtraValuesIndicator = (props: ExtraValuesIndicatorProps) => {\n  const { maxVisibleValues, selectedValuesCount, menuIsOpen, showAllSelectedWhenOpen } = props;\n\n  if (\n    maxVisibleValues !== undefined &&\n    selectedValuesCount > maxVisibleValues &&\n    !(showAllSelectedWhenOpen && menuIsOpen)\n  ) {\n    return (\n      <span key=\"excess-values\" id=\"excess-values\">\n        (+{selectedValuesCount - maxVisibleValues})\n      </span>\n    );\n  }\n\n  return null;\n};\n\nconst CustomControl = (props: any) => {\n  const {\n    children,\n    innerProps,\n    selectProps: { menuIsOpen, onMenuClose, onMenuOpen },\n    isFocused,\n    isMulti,\n    getValue,\n    innerRef,\n  } = props;\n  const selectProps = props.selectProps as SelectBaseProps<any>;\n\n  if (selectProps.renderControl) {\n    return React.createElement(selectProps.renderControl, {\n      isOpen: menuIsOpen,\n      value: isMulti ? getValue() : getValue()[0],\n      ref: innerRef,\n      onClick: menuIsOpen ? onMenuClose : onMenuOpen,\n      onBlur: onMenuClose,\n      disabled: !!selectProps.disabled,\n      invalid: !!selectProps.invalid,\n    });\n  }\n\n  return (\n    <InputControl\n      ref={innerRef}\n      innerProps={innerProps}\n      prefix={selectProps.prefix}\n      focused={isFocused}\n      invalid={!!selectProps.invalid}\n      disabled={!!selectProps.disabled}\n    >\n      {children}\n    </InputControl>\n  );\n};\n\nexport function SelectBase<T>({\n  allowCustomValue = false,\n  allowCreateWhileLoading = false,\n  'aria-label': ariaLabel,\n  autoFocus = false,\n  backspaceRemovesValue = true,\n  cacheOptions,\n  className,\n  closeMenuOnSelect = true,\n  components,\n  defaultOptions,\n  defaultValue,\n  disabled = false,\n  filterOption,\n  formatCreateLabel,\n  getOptionLabel,\n  getOptionValue,\n  inputValue,\n  invalid,\n  isClearable = false,\n  id,\n  isLoading = false,\n  isMulti = false,\n  inputId,\n  isOpen,\n  isOptionDisabled,\n  isSearchable = true,\n  loadOptions,\n  loadingMessage = 'Loading options...',\n  maxMenuHeight = 300,\n  minMenuHeight,\n  maxVisibleValues,\n  menuPlacement = 'auto',\n  menuPosition,\n  menuShouldPortal = true,\n  noOptionsMessage = 'No options found',\n  onBlur,\n  onChange,\n  onCloseMenu,\n  onCreateOption,\n  onInputChange,\n  onKeyDown,\n  onOpenMenu,\n  onFocus,\n  openMenuOnFocus = false,\n  options = [],\n  placeholder = 'Choose',\n  prefix,\n  renderControl,\n  showAllSelectedWhenOpen = true,\n  tabSelectsValue = true,\n  value,\n  width,\n  isValidNewOption,\n  formatOptionLabel,\n}: SelectBaseProps<T>) {\n  const theme = useTheme2();\n  const styles = getSelectStyles(theme);\n\n  const reactSelectRef = useRef<{ controlRef: HTMLElement }>(null);\n  const [closeToBottom, setCloseToBottom] = useState<boolean>(false);\n  const selectStyles = useCustomSelectStyles(theme, width);\n\n  // Infer the menu position for asynchronously loaded options. menuPlacement=\"auto\" doesn't work when the menu is\n  // automatically opened when the component is created (it happens in SegmentSelect by setting menuIsOpen={true}).\n  // We can remove this workaround when the bug in react-select is fixed: https://github.com/JedWatson/react-select/issues/4936\n  // Note: we use useEffect instead of hooking into onMenuOpen due to another bug: https://github.com/JedWatson/react-select/issues/3375\n  useEffect(() => {\n    if (\n      loadOptions &&\n      isOpen &&\n      reactSelectRef.current &&\n      reactSelectRef.current.controlRef &&\n      menuPlacement === 'auto'\n    ) {\n      const distance = window.innerHeight - reactSelectRef.current.controlRef.getBoundingClientRect().bottom;\n      setCloseToBottom(distance < maxMenuHeight);\n    }\n  }, [maxMenuHeight, menuPlacement, loadOptions, isOpen]);\n\n  const onChangeWithEmpty = useCallback(\n    (value: SelectValue<T>, action: ActionMeta) => {\n      if (isMulti && (value === undefined || value === null)) {\n        return onChange([], action);\n      }\n      onChange(value, action);\n    },\n    [isMulti, onChange]\n  );\n\n  let ReactSelectComponent = ReactSelect;\n\n  const creatableProps: ComponentProps<typeof Creatable> = {};\n  let asyncSelectProps: any = {};\n  let selectedValue;\n  if (isMulti && loadOptions) {\n    selectedValue = value as any;\n  } else {\n    // If option is passed as a plain value (value property from SelectableValue property)\n    // we are selecting the corresponding value from the options\n    if (isMulti && value && Array.isArray(value) && !loadOptions) {\n      // @ts-ignore\n      selectedValue = value.map((v) => findSelectedValue(v.value ?? v, options));\n    } else if (loadOptions) {\n      const hasValue = defaultValue || value;\n      selectedValue = hasValue ? [hasValue] : [];\n    } else {\n      selectedValue = cleanValue(value, options);\n    }\n  }\n\n  const commonSelectProps = {\n    'aria-label': ariaLabel,\n    autoFocus,\n    backspaceRemovesValue,\n    captureMenuScroll: false,\n    closeMenuOnSelect,\n    // We don't want to close if we're actually scrolling the menu\n    // So only close if none of the parents are the select menu itself\n    defaultValue,\n    // Also passing disabled, as this is the new Select API, and I want to use this prop instead of react-select's one\n    disabled,\n    filterOption,\n    getOptionLabel,\n    getOptionValue,\n    inputValue,\n    invalid,\n    isClearable,\n    id,\n    // Passing isDisabled as react-select accepts this prop\n    isDisabled: disabled,\n    isLoading,\n    isMulti,\n    inputId,\n    isOptionDisabled,\n    isSearchable,\n    maxMenuHeight,\n    minMenuHeight,\n    maxVisibleValues,\n    menuIsOpen: isOpen,\n    menuPlacement: menuPlacement === 'auto' && closeToBottom ? 'top' : menuPlacement,\n    menuPosition,\n    menuShouldBlockScroll: true,\n    menuPortalTarget: menuShouldPortal && typeof document !== 'undefined' ? document.body : undefined,\n    menuShouldScrollIntoView: false,\n    onBlur,\n    onChange: onChangeWithEmpty,\n    onInputChange,\n    onKeyDown,\n    onMenuClose: onCloseMenu,\n    onMenuOpen: onOpenMenu,\n    onFocus,\n    formatOptionLabel,\n    openMenuOnFocus,\n    options,\n    placeholder,\n    prefix,\n    renderControl,\n    showAllSelectedWhenOpen,\n    tabSelectsValue,\n    value: isMulti ? selectedValue : selectedValue?.[0],\n  };\n\n  if (allowCustomValue) {\n    ReactSelectComponent = Creatable as any;\n    creatableProps.allowCreateWhileLoading = allowCreateWhileLoading;\n    creatableProps.formatCreateLabel = formatCreateLabel ?? defaultFormatCreateLabel;\n    creatableProps.onCreateOption = onCreateOption;\n    creatableProps.isValidNewOption = isValidNewOption;\n  }\n\n  // Instead of having AsyncSelect, as a separate component we render ReactAsyncSelect\n  if (loadOptions) {\n    ReactSelectComponent = (allowCustomValue ? AsyncCreatable : ReactAsyncSelect) as any;\n    asyncSelectProps = {\n      loadOptions,\n      cacheOptions,\n      defaultOptions,\n    };\n  }\n\n  return (\n    <>\n      <ReactSelectComponent\n        ref={reactSelectRef}\n        components={{\n          MenuList: SelectMenu,\n          Group: SelectOptionGroup,\n          ValueContainer,\n          IndicatorsContainer(props: any) {\n            const { selectProps } = props;\n            const { value, showAllSelectedWhenOpen, maxVisibleValues, menuIsOpen } = selectProps;\n\n            if (maxVisibleValues !== undefined) {\n              const selectedValuesCount = value.length;\n              const indicatorChildren = [...props.children];\n              indicatorChildren.splice(\n                -1,\n                0,\n                renderExtraValuesIndicator({\n                  maxVisibleValues,\n                  selectedValuesCount,\n                  showAllSelectedWhenOpen,\n                  menuIsOpen,\n                })\n              );\n              return <IndicatorsContainer {...props}>{indicatorChildren}</IndicatorsContainer>;\n            }\n\n            return <IndicatorsContainer {...props} />;\n          },\n          IndicatorSeparator() {\n            return <></>;\n          },\n          Control: CustomControl,\n          Option: SelectMenuOptions,\n          ClearIndicator(props: any) {\n            const { clearValue } = props;\n            return (\n              <Icon\n                name=\"times\"\n                role=\"button\"\n                aria-label=\"select-clear-value\"\n                className={styles.singleValueRemove}\n                onMouseDown={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  clearValue();\n                }}\n              />\n            );\n          },\n          LoadingIndicator(props: any) {\n            return <Spinner inline={true} />;\n          },\n          LoadingMessage(props: any) {\n            return <div className={styles.loadingMessage}>{loadingMessage}</div>;\n          },\n          NoOptionsMessage(props: any) {\n            return (\n              <div className={styles.loadingMessage} aria-label=\"No options provided\">\n                {noOptionsMessage}\n              </div>\n            );\n          },\n          DropdownIndicator(props: any) {\n            return <DropdownIndicator isOpen={props.selectProps.menuIsOpen} />;\n          },\n          SingleValue(props: any) {\n            return <SingleValue {...props} disabled={disabled} />;\n          },\n          MultiValueContainer: MultiValueContainer,\n          MultiValueRemove: MultiValueRemove,\n          SelectContainer,\n          ...components,\n        }}\n        styles={selectStyles}\n        className={className}\n        {...commonSelectProps}\n        {...creatableProps}\n        {...asyncSelectProps}\n      />\n    </>\n  );\n}\n\nfunction defaultFormatCreateLabel(input: string) {\n  return (\n    <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n      <div>{input}</div>\n      <div style={{ flexGrow: 1 }} />\n      <div className=\"muted small\" style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>\n        Hit enter to add\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}