{"ast":null,"code":"import { FieldType } from '../../types/dataFrame';\nimport { getFieldMatcher, fieldMatchers, getFrameMatchers, frameMatchers } from '../matchers';\nimport { MatcherID } from './ids';\nconst anyFieldMatcher = {\n  id: MatcherID.anyMatch,\n  name: 'Any',\n  description: 'Any child matches (OR)',\n  excludeFromPicker: true,\n  defaultOptions: [],\n  // empty array\n  get: options => {\n    const children = options.map(option => {\n      return getFieldMatcher(option);\n    });\n    return (field, frame, allFrames) => {\n      for (const child of children) {\n        if (child(field, frame, allFrames)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  },\n  getOptionsDisplayText: options => {\n    let text = '';\n\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' OR ';\n      }\n\n      const matcher = fieldMatchers.get(sub.id);\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n\n    return text;\n  }\n};\nconst anyFrameMatcher = {\n  id: MatcherID.anyMatch,\n  name: 'Any',\n  description: 'Any child matches (OR)',\n  excludeFromPicker: true,\n  defaultOptions: [],\n  // empty array\n  get: options => {\n    const children = options.map(option => {\n      return getFrameMatchers(option);\n    });\n    return frame => {\n      for (const child of children) {\n        if (child(frame)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  },\n  getOptionsDisplayText: options => {\n    let text = '';\n\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' OR ';\n      }\n\n      const matcher = frameMatchers.get(sub.id);\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n\n    return text;\n  }\n};\nconst allFieldsMatcher = {\n  id: MatcherID.allMatch,\n  name: 'All',\n  description: 'Everything matches (AND)',\n  excludeFromPicker: true,\n  defaultOptions: [],\n  // empty array\n  get: options => {\n    const children = options.map(option => {\n      return getFieldMatcher(option);\n    });\n    return (field, frame, allFrames) => {\n      for (const child of children) {\n        if (!child(field, frame, allFrames)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  },\n  getOptionsDisplayText: options => {\n    let text = '';\n\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' AND ';\n      }\n\n      const matcher = fieldMatchers.get(sub.id); // Ugho what about frame\n\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n\n    return text;\n  }\n};\nconst allFramesMatcher = {\n  id: MatcherID.allMatch,\n  name: 'All',\n  description: 'Everything matches (AND)',\n  excludeFromPicker: true,\n  defaultOptions: [],\n  // empty array\n  get: options => {\n    const children = options.map(option => {\n      return getFrameMatchers(option);\n    });\n    return frame => {\n      for (const child of children) {\n        if (!child(frame)) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n  },\n  getOptionsDisplayText: options => {\n    let text = '';\n\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' AND ';\n      }\n\n      const matcher = frameMatchers.get(sub.id);\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n\n    return text;\n  }\n};\nconst notFieldMatcher = {\n  id: MatcherID.invertMatch,\n  name: 'NOT',\n  description: 'Inverts other matchers',\n  excludeFromPicker: true,\n  get: option => {\n    const check = getFieldMatcher(option);\n    return (field, frame, allFrames) => {\n      return !check(field, frame, allFrames);\n    };\n  },\n  getOptionsDisplayText: options => {\n    const matcher = fieldMatchers.get(options.id);\n    const text = matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(options.options) : matcher.name;\n    return 'NOT ' + text;\n  }\n};\nconst notFrameMatcher = {\n  id: MatcherID.invertMatch,\n  name: 'NOT',\n  description: 'Inverts other matchers',\n  excludeFromPicker: true,\n  get: option => {\n    const check = getFrameMatchers(option);\n    return frame => {\n      return !check(frame);\n    };\n  },\n  getOptionsDisplayText: options => {\n    const matcher = frameMatchers.get(options.id);\n    const text = matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(options.options) : matcher.name;\n    return 'NOT ' + text;\n  }\n};\nexport const alwaysFieldMatcher = field => {\n  return true;\n};\nexport const alwaysFrameMatcher = frame => {\n  return true;\n};\nexport const neverFieldMatcher = field => {\n  return false;\n};\nexport const notTimeFieldMatcher = field => {\n  return field.type !== FieldType.time;\n};\nexport const neverFrameMatcher = frame => {\n  return false;\n};\nconst alwaysFieldMatcherInfo = {\n  id: MatcherID.alwaysMatch,\n  name: 'All Fields',\n  description: 'Always Match',\n  get: option => {\n    return alwaysFieldMatcher;\n  },\n  getOptionsDisplayText: options => {\n    return 'Always';\n  }\n};\nconst alwaysFrameMatcherInfo = {\n  id: MatcherID.alwaysMatch,\n  name: 'All Frames',\n  description: 'Always Match',\n  get: option => {\n    return alwaysFrameMatcher;\n  },\n  getOptionsDisplayText: options => {\n    return 'Always';\n  }\n};\nconst neverFieldMatcherInfo = {\n  id: MatcherID.neverMatch,\n  name: 'No Fields',\n  description: 'Never Match',\n  excludeFromPicker: true,\n  get: option => {\n    return neverFieldMatcher;\n  },\n  getOptionsDisplayText: options => {\n    return 'Never';\n  }\n};\nconst neverFrameMatcherInfo = {\n  id: MatcherID.neverMatch,\n  name: 'No Frames',\n  description: 'Never Match',\n  get: option => {\n    return neverFrameMatcher;\n  },\n  getOptionsDisplayText: options => {\n    return 'Never';\n  }\n};\nexport function getFieldPredicateMatchers() {\n  return [anyFieldMatcher, allFieldsMatcher, notFieldMatcher, alwaysFieldMatcherInfo, neverFieldMatcherInfo];\n}\nexport function getFramePredicateMatchers() {\n  return [anyFrameMatcher, allFramesMatcher, notFrameMatcher, alwaysFrameMatcherInfo, neverFrameMatcherInfo];\n}","map":{"version":3,"names":["FieldType","getFieldMatcher","fieldMatchers","getFrameMatchers","frameMatchers","MatcherID","anyFieldMatcher","id","anyMatch","name","description","excludeFromPicker","defaultOptions","get","options","children","map","option","field","frame","allFrames","child","getOptionsDisplayText","text","sub","length","matcher","anyFrameMatcher","allFieldsMatcher","allMatch","allFramesMatcher","notFieldMatcher","invertMatch","check","notFrameMatcher","alwaysFieldMatcher","alwaysFrameMatcher","neverFieldMatcher","notTimeFieldMatcher","type","time","neverFrameMatcher","alwaysFieldMatcherInfo","alwaysMatch","alwaysFrameMatcherInfo","neverFieldMatcherInfo","neverMatch","neverFrameMatcherInfo","getFieldPredicateMatchers","getFramePredicateMatchers"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/matchers/predicates.ts"],"sourcesContent":["import { Field, DataFrame, FieldType } from '../../types/dataFrame';\nimport { FieldMatcherInfo, MatcherConfig, FrameMatcherInfo } from '../../types/transformations';\nimport { getFieldMatcher, fieldMatchers, getFrameMatchers, frameMatchers } from '../matchers';\n\nimport { MatcherID } from './ids';\n\nconst anyFieldMatcher: FieldMatcherInfo<MatcherConfig[]> = {\n  id: MatcherID.anyMatch,\n  name: 'Any',\n  description: 'Any child matches (OR)',\n  excludeFromPicker: true,\n  defaultOptions: [], // empty array\n\n  get: (options: MatcherConfig[]) => {\n    const children = options.map((option) => {\n      return getFieldMatcher(option);\n    });\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      for (const child of children) {\n        if (child(field, frame, allFrames)) {\n          return true;\n        }\n      }\n      return false;\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig[]) => {\n    let text = '';\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' OR ';\n      }\n      const matcher = fieldMatchers.get(sub.id);\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n    return text;\n  },\n};\n\nconst anyFrameMatcher: FrameMatcherInfo<MatcherConfig[]> = {\n  id: MatcherID.anyMatch,\n  name: 'Any',\n  description: 'Any child matches (OR)',\n  excludeFromPicker: true,\n  defaultOptions: [], // empty array\n\n  get: (options: MatcherConfig[]) => {\n    const children = options.map((option) => {\n      return getFrameMatchers(option);\n    });\n    return (frame: DataFrame) => {\n      for (const child of children) {\n        if (child(frame)) {\n          return true;\n        }\n      }\n      return false;\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig[]) => {\n    let text = '';\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' OR ';\n      }\n      const matcher = frameMatchers.get(sub.id);\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n    return text;\n  },\n};\n\nconst allFieldsMatcher: FieldMatcherInfo<MatcherConfig[]> = {\n  id: MatcherID.allMatch,\n  name: 'All',\n  description: 'Everything matches (AND)',\n  excludeFromPicker: true,\n  defaultOptions: [], // empty array\n\n  get: (options: MatcherConfig[]) => {\n    const children = options.map((option) => {\n      return getFieldMatcher(option);\n    });\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      for (const child of children) {\n        if (!child(field, frame, allFrames)) {\n          return false;\n        }\n      }\n      return true;\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig[]) => {\n    let text = '';\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' AND ';\n      }\n      const matcher = fieldMatchers.get(sub.id); // Ugho what about frame\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n    return text;\n  },\n};\n\nconst allFramesMatcher: FrameMatcherInfo<MatcherConfig[]> = {\n  id: MatcherID.allMatch,\n  name: 'All',\n  description: 'Everything matches (AND)',\n  excludeFromPicker: true,\n  defaultOptions: [], // empty array\n\n  get: (options: MatcherConfig[]) => {\n    const children = options.map((option) => {\n      return getFrameMatchers(option);\n    });\n    return (frame: DataFrame) => {\n      for (const child of children) {\n        if (!child(frame)) {\n          return false;\n        }\n      }\n      return true;\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig[]) => {\n    let text = '';\n    for (const sub of options) {\n      if (text.length > 0) {\n        text += ' AND ';\n      }\n      const matcher = frameMatchers.get(sub.id);\n      text += matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(sub) : matcher.name;\n    }\n    return text;\n  },\n};\n\nconst notFieldMatcher: FieldMatcherInfo<MatcherConfig> = {\n  id: MatcherID.invertMatch,\n  name: 'NOT',\n  description: 'Inverts other matchers',\n  excludeFromPicker: true,\n\n  get: (option: MatcherConfig) => {\n    const check = getFieldMatcher(option);\n    return (field: Field, frame: DataFrame, allFrames: DataFrame[]) => {\n      return !check(field, frame, allFrames);\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig) => {\n    const matcher = fieldMatchers.get(options.id);\n    const text = matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(options.options) : matcher.name;\n    return 'NOT ' + text;\n  },\n};\n\nconst notFrameMatcher: FrameMatcherInfo<MatcherConfig> = {\n  id: MatcherID.invertMatch,\n  name: 'NOT',\n  description: 'Inverts other matchers',\n  excludeFromPicker: true,\n\n  get: (option: MatcherConfig) => {\n    const check = getFrameMatchers(option);\n    return (frame: DataFrame) => {\n      return !check(frame);\n    };\n  },\n\n  getOptionsDisplayText: (options: MatcherConfig) => {\n    const matcher = frameMatchers.get(options.id);\n    const text = matcher.getOptionsDisplayText ? matcher.getOptionsDisplayText(options.options) : matcher.name;\n    return 'NOT ' + text;\n  },\n};\n\nexport const alwaysFieldMatcher = (field: Field) => {\n  return true;\n};\n\nexport const alwaysFrameMatcher = (frame: DataFrame) => {\n  return true;\n};\n\nexport const neverFieldMatcher = (field: Field) => {\n  return false;\n};\n\nexport const notTimeFieldMatcher = (field: Field) => {\n  return field.type !== FieldType.time;\n};\n\nexport const neverFrameMatcher = (frame: DataFrame) => {\n  return false;\n};\n\nconst alwaysFieldMatcherInfo: FieldMatcherInfo = {\n  id: MatcherID.alwaysMatch,\n  name: 'All Fields',\n  description: 'Always Match',\n\n  get: (option: any) => {\n    return alwaysFieldMatcher;\n  },\n\n  getOptionsDisplayText: (options: any) => {\n    return 'Always';\n  },\n};\n\nconst alwaysFrameMatcherInfo: FrameMatcherInfo = {\n  id: MatcherID.alwaysMatch,\n  name: 'All Frames',\n  description: 'Always Match',\n\n  get: (option: any) => {\n    return alwaysFrameMatcher;\n  },\n\n  getOptionsDisplayText: (options: any) => {\n    return 'Always';\n  },\n};\n\nconst neverFieldMatcherInfo: FieldMatcherInfo = {\n  id: MatcherID.neverMatch,\n  name: 'No Fields',\n  description: 'Never Match',\n  excludeFromPicker: true,\n\n  get: (option: any) => {\n    return neverFieldMatcher;\n  },\n\n  getOptionsDisplayText: (options: any) => {\n    return 'Never';\n  },\n};\n\nconst neverFrameMatcherInfo: FrameMatcherInfo = {\n  id: MatcherID.neverMatch,\n  name: 'No Frames',\n  description: 'Never Match',\n\n  get: (option: any) => {\n    return neverFrameMatcher;\n  },\n\n  getOptionsDisplayText: (options: any) => {\n    return 'Never';\n  },\n};\n\nexport function getFieldPredicateMatchers(): FieldMatcherInfo[] {\n  return [anyFieldMatcher, allFieldsMatcher, notFieldMatcher, alwaysFieldMatcherInfo, neverFieldMatcherInfo];\n}\n\nexport function getFramePredicateMatchers(): FrameMatcherInfo[] {\n  return [anyFrameMatcher, allFramesMatcher, notFrameMatcher, alwaysFrameMatcherInfo, neverFrameMatcherInfo];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}