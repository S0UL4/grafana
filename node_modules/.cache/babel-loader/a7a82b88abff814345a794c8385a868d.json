{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { LoadingState } from '@grafana/data';\nexport let DashboardSource;\n\n(function (DashboardSource) {\n  DashboardSource[DashboardSource[\"Gcom\"] = 0] = \"Gcom\";\n  DashboardSource[DashboardSource[\"Json\"] = 1] = \"Json\";\n})(DashboardSource || (DashboardSource = {}));\n\nexport let InputType;\n\n(function (InputType) {\n  InputType[\"DataSource\"] = \"datasource\";\n  InputType[\"Constant\"] = \"constant\";\n  InputType[\"LibraryPanel\"] = \"libraryPanel\";\n})(InputType || (InputType = {}));\n\nexport let LibraryPanelInputState;\n\n(function (LibraryPanelInputState) {\n  LibraryPanelInputState[\"New\"] = \"new\";\n  LibraryPanelInputState[\"Exits\"] = \"exists\";\n  LibraryPanelInputState[\"Different\"] = \"different\";\n})(LibraryPanelInputState || (LibraryPanelInputState = {}));\n\nexport const initialImportDashboardState = {\n  meta: {\n    updatedAt: '',\n    orgName: ''\n  },\n  dashboard: {},\n  source: DashboardSource.Json,\n  inputs: {},\n  state: LoadingState.NotStarted\n};\nconst importDashboardSlice = createSlice({\n  name: 'manageDashboards',\n  initialState: initialImportDashboardState,\n  reducers: {\n    setGcomDashboard: (state, action) => {\n      state.dashboard = Object.assign({}, action.payload.json, {\n        id: null\n      });\n      state.meta = {\n        updatedAt: action.payload.updatedAt,\n        orgName: action.payload.orgName\n      };\n      state.source = DashboardSource.Gcom;\n      state.state = LoadingState.Done;\n    },\n    setJsonDashboard: (state, action) => {\n      state.dashboard = Object.assign({}, action.payload, {\n        id: null\n      });\n      state.meta = initialImportDashboardState.meta;\n      state.source = DashboardSource.Json;\n      state.state = LoadingState.Done;\n    },\n    clearDashboard: state => {\n      state.dashboard = {};\n      state.state = LoadingState.NotStarted;\n    },\n    setInputs: (state, action) => {\n      state.inputs = {\n        dataSources: action.payload.filter(p => p.type === InputType.DataSource),\n        constants: action.payload.filter(p => p.type === InputType.Constant),\n        libraryPanels: []\n      };\n    },\n    setLibraryPanelInputs: (state, action) => {\n      state.inputs.libraryPanels = action.payload;\n    },\n    fetchFailed: state => {\n      state.dashboard = {};\n      state.state = LoadingState.Error;\n    },\n    fetchDashboard: state => {\n      state.state = LoadingState.Loading;\n    }\n  }\n});\nexport const {\n  clearDashboard,\n  setInputs,\n  setGcomDashboard,\n  setJsonDashboard,\n  setLibraryPanelInputs,\n  fetchFailed,\n  fetchDashboard\n} = importDashboardSlice.actions;\nexport const importDashboardReducer = importDashboardSlice.reducer;\nexport default {\n  importDashboard: importDashboardReducer\n};","map":{"version":3,"names":["createSlice","LoadingState","DashboardSource","InputType","LibraryPanelInputState","initialImportDashboardState","meta","updatedAt","orgName","dashboard","source","Json","inputs","state","NotStarted","importDashboardSlice","name","initialState","reducers","setGcomDashboard","action","payload","json","id","Gcom","Done","setJsonDashboard","clearDashboard","setInputs","dataSources","filter","p","type","DataSource","constants","Constant","libraryPanels","setLibraryPanelInputs","fetchFailed","Error","fetchDashboard","Loading","actions","importDashboardReducer","reducer","importDashboard"],"sources":["/home/soula/grafana/public/app/features/manage-dashboards/state/reducers.ts"],"sourcesContent":["import { createSlice, Draft, PayloadAction } from '@reduxjs/toolkit';\n\nimport { DataSourceInstanceSettings, LoadingState } from '@grafana/data';\n\nimport { LibraryElementDTO } from '../../library-panels/types';\n\nexport enum DashboardSource {\n  Gcom = 0,\n  Json = 1,\n}\n\nexport interface ImportDashboardDTO {\n  title: string;\n  uid: string;\n  gnetId: string;\n  constants: string[];\n  dataSources: DataSourceInstanceSettings[];\n  elements: LibraryElementDTO[];\n  folder: { id: number; title?: string };\n}\n\nexport enum InputType {\n  DataSource = 'datasource',\n  Constant = 'constant',\n  LibraryPanel = 'libraryPanel',\n}\n\nexport enum LibraryPanelInputState {\n  New = 'new',\n  Exits = 'exists',\n  Different = 'different',\n}\n\nexport interface DashboardInput {\n  name: string;\n  label: string;\n  info: string;\n  value: string;\n  type: InputType;\n}\n\nexport interface DataSourceInput extends DashboardInput {\n  pluginId: string;\n}\n\nexport interface LibraryPanelInput {\n  model: LibraryElementDTO;\n  state: LibraryPanelInputState;\n}\n\nexport interface DashboardInputs {\n  dataSources: DataSourceInput[];\n  constants: DashboardInput[];\n  libraryPanels: LibraryPanelInput[];\n}\n\nexport interface ImportDashboardState {\n  meta: { updatedAt: string; orgName: string };\n  dashboard: any;\n  source: DashboardSource;\n  inputs: DashboardInputs;\n  state: LoadingState;\n}\n\nexport const initialImportDashboardState: ImportDashboardState = {\n  meta: { updatedAt: '', orgName: '' },\n  dashboard: {},\n  source: DashboardSource.Json,\n  inputs: {} as DashboardInputs,\n  state: LoadingState.NotStarted,\n};\n\nconst importDashboardSlice = createSlice({\n  name: 'manageDashboards',\n  initialState: initialImportDashboardState,\n  reducers: {\n    setGcomDashboard: (state: Draft<ImportDashboardState>, action: PayloadAction<any>) => {\n      state.dashboard = {\n        ...action.payload.json,\n        id: null,\n      };\n      state.meta = { updatedAt: action.payload.updatedAt, orgName: action.payload.orgName };\n      state.source = DashboardSource.Gcom;\n      state.state = LoadingState.Done;\n    },\n    setJsonDashboard: (state: Draft<ImportDashboardState>, action: PayloadAction<any>) => {\n      state.dashboard = {\n        ...action.payload,\n        id: null,\n      };\n      state.meta = initialImportDashboardState.meta;\n      state.source = DashboardSource.Json;\n      state.state = LoadingState.Done;\n    },\n    clearDashboard: (state: Draft<ImportDashboardState>) => {\n      state.dashboard = {};\n      state.state = LoadingState.NotStarted;\n    },\n    setInputs: (state: Draft<ImportDashboardState>, action: PayloadAction<any[]>) => {\n      state.inputs = {\n        dataSources: action.payload.filter((p) => p.type === InputType.DataSource),\n        constants: action.payload.filter((p) => p.type === InputType.Constant),\n        libraryPanels: [],\n      };\n    },\n    setLibraryPanelInputs: (state: Draft<ImportDashboardState>, action: PayloadAction<LibraryPanelInput[]>) => {\n      state.inputs.libraryPanels = action.payload;\n    },\n    fetchFailed: (state: Draft<ImportDashboardState>) => {\n      state.dashboard = {};\n      state.state = LoadingState.Error;\n    },\n    fetchDashboard: (state: Draft<ImportDashboardState>) => {\n      state.state = LoadingState.Loading;\n    },\n  },\n});\n\nexport const {\n  clearDashboard,\n  setInputs,\n  setGcomDashboard,\n  setJsonDashboard,\n  setLibraryPanelInputs,\n  fetchFailed,\n  fetchDashboard,\n} = importDashboardSlice.actions;\n\nexport const importDashboardReducer = importDashboardSlice.reducer;\n\nexport default {\n  importDashboard: importDashboardReducer,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}