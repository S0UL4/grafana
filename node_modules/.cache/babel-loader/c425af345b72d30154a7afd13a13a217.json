{"ast":null,"code":"/**\n * Convert an object into a DataQueryError -- if this is an HTTP response,\n * it will put the correct values in the error field\n *\n * @public\n */\nexport function toDataQueryError(err) {\n  const error = err || {};\n\n  if (!error.message) {\n    var _error$data, _error$data2, _error$data3;\n\n    if (typeof err === 'string' || err instanceof String) {\n      return {\n        message: err\n      };\n    }\n\n    let message = 'Query error';\n\n    if (error.message) {\n      message = error.message;\n    } else if (error.data && error.data.message && ((_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.message) !== 'Query data error') {\n      message = error.data.message;\n    } else if ((error === null || error === void 0 ? void 0 : (_error$data2 = error.data) === null || _error$data2 === void 0 ? void 0 : _error$data2.message) === 'Query data error' && error !== null && error !== void 0 && (_error$data3 = error.data) !== null && _error$data3 !== void 0 && _error$data3.error) {\n      message = error.data.error;\n    } else if (error.data && error.data.error) {\n      message = error.data.error;\n    } else if (error.status) {\n      message = `Query error: ${error.status} ${error.statusText}`;\n    }\n\n    error.message = message;\n  }\n\n  return error;\n}","map":{"version":3,"names":["toDataQueryError","err","error","message","String","data","status","statusText"],"sources":["/home/soula/grafana/packages/grafana-runtime/src/utils/toDataQueryError.ts"],"sourcesContent":["import { DataQueryError } from '@grafana/data';\n\n/**\n * Convert an object into a DataQueryError -- if this is an HTTP response,\n * it will put the correct values in the error field\n *\n * @public\n */\nexport function toDataQueryError(err: DataQueryError | string | Object): DataQueryError {\n  const error = (err || {}) as DataQueryError;\n\n  if (!error.message) {\n    if (typeof err === 'string' || err instanceof String) {\n      return { message: err } as DataQueryError;\n    }\n\n    let message = 'Query error';\n    if (error.message) {\n      message = error.message;\n    } else if (error.data && error.data.message && error.data?.message !== 'Query data error') {\n      message = error.data.message;\n    } else if (error?.data?.message === 'Query data error' && error?.data?.error) {\n      message = error.data.error;\n    } else if (error.data && error.data.error) {\n      message = error.data.error;\n    } else if (error.status) {\n      message = `Query error: ${error.status} ${error.statusText}`;\n    }\n    error.message = message;\n  }\n\n  return error;\n}\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAT,CAA0BC,GAA1B,EAAiF;EACtF,MAAMC,KAAK,GAAID,GAAG,IAAI,EAAtB;;EAEA,IAAI,CAACC,KAAK,CAACC,OAAX,EAAoB;IAAA;;IAClB,IAAI,OAAOF,GAAP,KAAe,QAAf,IAA2BA,GAAG,YAAYG,MAA9C,EAAsD;MACpD,OAAO;QAAED,OAAO,EAAEF;MAAX,CAAP;IACD;;IAED,IAAIE,OAAO,GAAG,aAAd;;IACA,IAAID,KAAK,CAACC,OAAV,EAAmB;MACjBA,OAAO,GAAGD,KAAK,CAACC,OAAhB;IACD,CAFD,MAEO,IAAID,KAAK,CAACG,IAAN,IAAcH,KAAK,CAACG,IAAN,CAAWF,OAAzB,IAAoC,gBAAAD,KAAK,CAACG,IAAN,4DAAYF,OAAZ,MAAwB,kBAAhE,EAAoF;MACzFA,OAAO,GAAGD,KAAK,CAACG,IAAN,CAAWF,OAArB;IACD,CAFM,MAEA,IAAI,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,4BAAAA,KAAK,CAAEG,IAAP,8DAAaF,OAAb,MAAyB,kBAAzB,IAA+CD,KAA/C,aAA+CA,KAA/C,+BAA+CA,KAAK,CAAEG,IAAtD,yCAA+C,aAAaH,KAAhE,EAAuE;MAC5EC,OAAO,GAAGD,KAAK,CAACG,IAAN,CAAWH,KAArB;IACD,CAFM,MAEA,IAAIA,KAAK,CAACG,IAAN,IAAcH,KAAK,CAACG,IAAN,CAAWH,KAA7B,EAAoC;MACzCC,OAAO,GAAGD,KAAK,CAACG,IAAN,CAAWH,KAArB;IACD,CAFM,MAEA,IAAIA,KAAK,CAACI,MAAV,EAAkB;MACvBH,OAAO,GAAI,gBAAeD,KAAK,CAACI,MAAO,IAAGJ,KAAK,CAACK,UAAW,EAA3D;IACD;;IACDL,KAAK,CAACC,OAAN,GAAgBA,OAAhB;EACD;;EAED,OAAOD,KAAP;AACD"},"metadata":{},"sourceType":"module"}