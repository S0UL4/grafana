{"ast":null,"code":"var _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\nimport { initDashboard } from '../state/initDashboard';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst mapStateToProps = state => ({\n  dashboard: state.dashboard.getModel()\n});\n\nconst mapDispatchToProps = {\n  initDashboard\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport class SoloPanelPage extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      panel: null,\n      notFound: false\n    });\n  }\n\n  componentDidMount() {\n    const {\n      match,\n      route\n    } = this.props;\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      routeName: route.routeName,\n      fixUrl: false\n    });\n  }\n\n  getPanelId() {\n    var _this$props$queryPara;\n\n    return parseInt((_this$props$queryPara = this.props.queryParams.panelId) !== null && _this$props$queryPara !== void 0 ? _this$props$queryPara : '0', 10);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      dashboard\n    } = this.props;\n\n    if (!dashboard) {\n      return;\n    } // we just got a new dashboard\n\n\n    if (!prevProps.dashboard || prevProps.dashboard.uid !== dashboard.uid) {\n      const panel = dashboard.getPanelByUrlId(this.props.queryParams.panelId);\n\n      if (!panel) {\n        this.setState({\n          notFound: true\n        });\n        return;\n      }\n\n      this.setState({\n        panel\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(SoloPanel, {\n      dashboard: this.props.dashboard,\n      notFound: this.state.notFound,\n      panel: this.state.panel,\n      panelId: this.getPanelId()\n    });\n  }\n\n}\nexport const SoloPanel = ({\n  dashboard,\n  notFound,\n  panel,\n  panelId\n}) => {\n  if (notFound) {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"alert alert-error\",\n      children: [\"Panel with id \", panelId, \" not found\"]\n    });\n  }\n\n  if (!panel || !dashboard) {\n    return _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n      children: \"Loading & initializing dashboard\"\n    }));\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"panel-solo\",\n    children: /*#__PURE__*/_jsx(AutoSizer, {\n      children: ({\n        width,\n        height\n      }) => {\n        if (width === 0) {\n          return null;\n        }\n\n        return /*#__PURE__*/_jsx(DashboardPanel, {\n          stateKey: panel.key,\n          width: width,\n          height: height,\n          dashboard: dashboard,\n          panel: panel,\n          isEditing: false,\n          isViewing: false,\n          lazy: false\n        });\n      }\n    })\n  });\n};\nexport default connector(SoloPanelPage);","map":{"version":3,"names":["React","Component","connect","AutoSizer","DashboardPanel","initDashboard","mapStateToProps","state","dashboard","getModel","mapDispatchToProps","connector","SoloPanelPage","panel","notFound","componentDidMount","match","route","props","urlSlug","params","slug","urlUid","uid","urlType","type","routeName","fixUrl","getPanelId","parseInt","queryParams","panelId","componentDidUpdate","prevProps","getPanelByUrlId","setState","render","SoloPanel","width","height","key"],"sources":["/home/soula/grafana/public/app/features/dashboard/containers/SoloPanelPage.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\nimport { initDashboard } from '../state/initDashboard';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  dashboard: state.dashboard.getModel(),\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId: string }> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nexport class SoloPanelPage extends Component<Props, State> {\n  state: State = {\n    panel: null,\n    notFound: false,\n  };\n\n  componentDidMount() {\n    const { match, route } = this.props;\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      routeName: route.routeName,\n      fixUrl: false,\n    });\n  }\n\n  getPanelId(): number {\n    return parseInt(this.props.queryParams.panelId ?? '0', 10);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // we just got a new dashboard\n    if (!prevProps.dashboard || prevProps.dashboard.uid !== dashboard.uid) {\n      const panel = dashboard.getPanelByUrlId(this.props.queryParams.panelId);\n\n      if (!panel) {\n        this.setState({ notFound: true });\n        return;\n      }\n\n      this.setState({ panel });\n    }\n  }\n\n  render() {\n    return (\n      <SoloPanel\n        dashboard={this.props.dashboard}\n        notFound={this.state.notFound}\n        panel={this.state.panel}\n        panelId={this.getPanelId()}\n      />\n    );\n  }\n}\n\nexport interface SoloPanelProps extends State {\n  dashboard: DashboardModel | null;\n  panelId: number;\n}\n\nexport const SoloPanel = ({ dashboard, notFound, panel, panelId }: SoloPanelProps) => {\n  if (notFound) {\n    return <div className=\"alert alert-error\">Panel with id {panelId} not found</div>;\n  }\n\n  if (!panel || !dashboard) {\n    return <div>Loading & initializing dashboard</div>;\n  }\n\n  return (\n    <div className=\"panel-solo\">\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <DashboardPanel\n              stateKey={panel.key}\n              width={width}\n              height={height}\n              dashboard={dashboard}\n              panel={panel}\n              isEditing={false}\n              isViewing={false}\n              lazy={false}\n            />\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nexport default connector(SoloPanelPage);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}