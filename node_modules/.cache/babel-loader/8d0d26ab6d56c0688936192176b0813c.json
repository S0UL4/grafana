{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { languages as prismLanguages } from 'prismjs';\nimport React from 'react';\nimport { isDataFrame, toLegacyResponseData, CoreApp } from '@grafana/data';\nimport { SlatePrism, BracesPlugin, DOMUtil, Icon } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { isCancelablePromiseRejection, makePromiseCancelable } from 'app/core/utils/CancelablePromise';\nimport { roundMsToMin } from '../language_utils';\nimport { PrometheusMetricsBrowser } from './PrometheusMetricsBrowser';\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const RECORDING_RULES_GROUP = '__recording_rules__';\nconst LAST_USED_LABELS_KEY = 'grafana.datasources.prometheus.browser.labels';\n\nfunction getChooserText(metricsLookupDisabled, hasSyntax, hasMetrics) {\n  if (metricsLookupDisabled) {\n    return '(Disabled)';\n  }\n\n  if (!hasSyntax) {\n    return 'Loading metrics...';\n  }\n\n  if (!hasMetrics) {\n    return '(No metrics found)';\n  }\n\n  return 'Metrics browser';\n}\n\nexport function willApplySuggestion(suggestion, {\n  typeaheadContext,\n  typeaheadText\n}) {\n  // Modify suggestion based on context\n  switch (typeaheadContext) {\n    case 'context-labels':\n      {\n        const nextChar = DOMUtil.getNextCharacter();\n\n        if (!nextChar || nextChar === '}' || nextChar === ',') {\n          suggestion += '=';\n        }\n\n        break;\n      }\n\n    case 'context-label-values':\n      {\n        // Always add quotes and remove existing ones instead\n        if (!typeaheadText.match(/^(!?=~?\"|\")/)) {\n          suggestion = `\"${suggestion}`;\n        }\n\n        if (DOMUtil.getNextCharacter() !== '\"') {\n          suggestion = `${suggestion}\"`;\n        }\n\n        break;\n      }\n\n    default:\n  }\n\n  return suggestion;\n}\n\nclass PromQueryField extends React.PureComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    _defineProperty(this, \"plugins\", void 0);\n\n    _defineProperty(this, \"refreshHint\", () => {\n      const {\n        datasource,\n        query,\n        data\n      } = this.props;\n      const initHints = datasource.getInitHints();\n      const initHint = initHints.length > 0 ? initHints[0] : null;\n\n      if (!data || data.series.length === 0) {\n        this.setState({\n          hint: initHint\n        });\n        return;\n      }\n\n      const result = isDataFrame(data.series[0]) ? data.series.map(toLegacyResponseData) : data.series;\n      const queryHints = datasource.getQueryHints(query, result);\n      let queryHint = queryHints.length > 0 ? queryHints[0] : null;\n      this.setState({\n        hint: queryHint !== null && queryHint !== void 0 ? queryHint : initHint\n      });\n    });\n\n    _defineProperty(this, \"refreshMetrics\", async () => {\n      const {\n        datasource: {\n          languageProvider\n        }\n      } = this.props;\n      this.languageProviderInitializationPromise = makePromiseCancelable(languageProvider.start());\n\n      try {\n        const remainingTasks = await this.languageProviderInitializationPromise.promise;\n        await Promise.all(remainingTasks);\n        this.onUpdateLanguage();\n      } catch (err) {\n        if (isCancelablePromiseRejection(err) && err.isCanceled) {// do nothing, promise was canceled\n        } else {\n          throw err;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onChangeLabelBrowser\", selector => {\n      this.onChangeQuery(selector, true);\n      this.setState({\n        labelBrowserVisible: false\n      });\n    });\n\n    _defineProperty(this, \"onChangeQuery\", (value, override) => {\n      // Send text change to parent\n      const {\n        query,\n        onChange,\n        onRunQuery\n      } = this.props;\n\n      if (onChange) {\n        const nextQuery = Object.assign({}, query, {\n          expr: value\n        });\n        onChange(nextQuery);\n\n        if (override && onRunQuery) {\n          onRunQuery();\n        }\n      }\n    });\n\n    _defineProperty(this, \"onClickChooserButton\", () => {\n      this.setState(state => ({\n        labelBrowserVisible: !state.labelBrowserVisible\n      }));\n    });\n\n    _defineProperty(this, \"onClickHintFix\", () => {\n      const {\n        datasource,\n        query,\n        onChange,\n        onRunQuery\n      } = this.props;\n      const {\n        hint\n      } = this.state;\n      onChange(datasource.modifyQuery(query, hint.fix.action));\n      onRunQuery();\n    });\n\n    _defineProperty(this, \"onUpdateLanguage\", () => {\n      const {\n        datasource: {\n          languageProvider\n        }\n      } = this.props;\n      const {\n        metrics\n      } = languageProvider;\n\n      if (!metrics) {\n        return;\n      }\n\n      this.setState({\n        syntaxLoaded: true\n      });\n    });\n\n    _defineProperty(this, \"onTypeahead\", async typeahead => {\n      const {\n        datasource: {\n          languageProvider\n        }\n      } = this.props;\n\n      if (!languageProvider) {\n        return {\n          suggestions: []\n        };\n      }\n\n      const {\n        history\n      } = this.props;\n      const {\n        prefix,\n        text,\n        value,\n        wrapperClasses,\n        labelKey\n      } = typeahead;\n      const result = await languageProvider.provideCompletionItems({\n        text,\n        value,\n        prefix,\n        wrapperClasses,\n        labelKey\n      }, {\n        history\n      });\n      return result;\n    });\n\n    this.plugins = [BracesPlugin(), SlatePrism({\n      onlyIn: node => node.type === 'code_block',\n      getSyntax: node => 'promql'\n    }, Object.assign({}, prismLanguages, {\n      promql: this.props.datasource.languageProvider.syntax\n    }))];\n    this.state = {\n      labelBrowserVisible: false,\n      syntaxLoaded: false,\n      hint: null\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.datasource.languageProvider) {\n      this.refreshMetrics();\n    }\n\n    this.refreshHint();\n  }\n\n  componentWillUnmount() {\n    if (this.languageProviderInitializationPromise) {\n      this.languageProviderInitializationPromise.cancel();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      data,\n      datasource: {\n        languageProvider\n      },\n      range\n    } = this.props;\n\n    if (languageProvider !== prevProps.datasource.languageProvider) {\n      // We reset this only on DS change so we do not flesh loading state on every rangeChange which happens on every\n      // query run if using relative range.\n      this.setState({\n        syntaxLoaded: false\n      });\n    }\n\n    const changedRangeToRefresh = this.rangeChangedToRefresh(range, prevProps.range); // We want to refresh metrics when language provider changes and/or when range changes (we round up intervals to a minute)\n\n    if (languageProvider !== prevProps.datasource.languageProvider || changedRangeToRefresh) {\n      this.refreshMetrics();\n    }\n\n    if (data && prevProps.data && prevProps.data.series !== data.series) {\n      this.refreshHint();\n    }\n  }\n\n  rangeChangedToRefresh(range, prevRange) {\n    if (range && prevRange) {\n      const sameMinuteFrom = roundMsToMin(range.from.valueOf()) === roundMsToMin(prevRange.from.valueOf());\n      const sameMinuteTo = roundMsToMin(range.to.valueOf()) === roundMsToMin(prevRange.to.valueOf()); // If both are same, don't need to refresh.\n\n      return !(sameMinuteFrom && sameMinuteTo);\n    }\n\n    return false;\n  }\n  /**\n   * TODO #33976: Remove this, add histogram group (query = `histogram_quantile(0.95, sum(rate(${metric}[5m])) by (le))`;)\n   */\n\n\n  render() {\n    const {\n      datasource,\n      datasource: {\n        languageProvider\n      },\n      query,\n      ExtraFieldElement,\n      history = []\n    } = this.props;\n    const {\n      labelBrowserVisible,\n      syntaxLoaded,\n      hint\n    } = this.state;\n    const hasMetrics = languageProvider.metrics.length > 0;\n    const chooserText = getChooserText(datasource.lookupsDisabled, syntaxLoaded, hasMetrics);\n    const buttonDisabled = !(syntaxLoaded && hasMetrics);\n    return /*#__PURE__*/_jsx(LocalStorageValueProvider, {\n      storageKey: LAST_USED_LABELS_KEY,\n      defaultValue: [],\n      children: (lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n        var _query$expr;\n\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\",\n            \"data-testid\": this.props['data-testid'],\n            children: [/*#__PURE__*/_jsxs(\"button\", {\n              className: \"gf-form-label query-keyword pointer\",\n              onClick: this.onClickChooserButton,\n              disabled: buttonDisabled,\n              children: [chooserText, /*#__PURE__*/_jsx(Icon, {\n                name: labelBrowserVisible ? 'angle-down' : 'angle-right'\n              })]\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"gf-form gf-form--grow flex-shrink-1 min-width-15\",\n              children: /*#__PURE__*/_jsx(MonacoQueryFieldWrapper, {\n                runQueryOnBlur: this.props.app !== CoreApp.Explore,\n                languageProvider: languageProvider,\n                history: history,\n                onChange: this.onChangeQuery,\n                onRunQuery: this.props.onRunQuery,\n                initialValue: (_query$expr = query.expr) !== null && _query$expr !== void 0 ? _query$expr : ''\n              })\n            })]\n          }), labelBrowserVisible && /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form\",\n            children: /*#__PURE__*/_jsx(PrometheusMetricsBrowser, {\n              languageProvider: languageProvider,\n              onChange: this.onChangeLabelBrowser,\n              lastUsedLabels: lastUsedLabels || [],\n              storeLastUsedLabels: onLastUsedLabelsSave,\n              deleteLastUsedLabels: onLastUsedLabelsDelete\n            })\n          }), ExtraFieldElement, hint ? /*#__PURE__*/_jsx(\"div\", {\n            className: \"query-row-break\",\n            children: /*#__PURE__*/_jsxs(\"div\", {\n              className: \"prom-query-field-info text-warning\",\n              children: [hint.label, ' ', hint.fix ? /*#__PURE__*/_jsx(\"a\", {\n                className: \"text-link muted\",\n                onClick: this.onClickHintFix,\n                children: hint.fix.label\n              }) : null]\n            })\n          }) : null]\n        });\n      }\n    });\n  }\n\n}\n\nexport default PromQueryField;","map":{"version":3,"names":["languages","prismLanguages","React","isDataFrame","toLegacyResponseData","CoreApp","SlatePrism","BracesPlugin","DOMUtil","Icon","LocalStorageValueProvider","isCancelablePromiseRejection","makePromiseCancelable","roundMsToMin","PrometheusMetricsBrowser","MonacoQueryFieldWrapper","RECORDING_RULES_GROUP","LAST_USED_LABELS_KEY","getChooserText","metricsLookupDisabled","hasSyntax","hasMetrics","willApplySuggestion","suggestion","typeaheadContext","typeaheadText","nextChar","getNextCharacter","match","PromQueryField","PureComponent","constructor","props","context","datasource","query","data","initHints","getInitHints","initHint","length","series","setState","hint","result","map","queryHints","getQueryHints","queryHint","languageProvider","languageProviderInitializationPromise","start","remainingTasks","promise","Promise","all","onUpdateLanguage","err","isCanceled","selector","onChangeQuery","labelBrowserVisible","value","override","onChange","onRunQuery","nextQuery","expr","state","modifyQuery","fix","action","metrics","syntaxLoaded","typeahead","suggestions","history","prefix","text","wrapperClasses","labelKey","provideCompletionItems","plugins","onlyIn","node","type","getSyntax","promql","syntax","componentDidMount","refreshMetrics","refreshHint","componentWillUnmount","cancel","componentDidUpdate","prevProps","range","changedRangeToRefresh","rangeChangedToRefresh","prevRange","sameMinuteFrom","from","valueOf","sameMinuteTo","to","render","ExtraFieldElement","chooserText","lookupsDisabled","buttonDisabled","lastUsedLabels","onLastUsedLabelsSave","onLastUsedLabelsDelete","onClickChooserButton","app","Explore","onChangeLabelBrowser","label","onClickHintFix"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/components/PromQueryField.tsx"],"sourcesContent":["import { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { ReactNode } from 'react';\nimport { Plugin } from 'slate';\n\nimport { QueryEditorProps, QueryHint, isDataFrame, toLegacyResponseData, TimeRange, CoreApp } from '@grafana/data';\nimport {\n  SlatePrism,\n  TypeaheadInput,\n  TypeaheadOutput,\n  BracesPlugin,\n  DOMUtil,\n  SuggestionsState,\n  Icon,\n} from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport {\n  CancelablePromise,\n  isCancelablePromiseRejection,\n  makePromiseCancelable,\n} from 'app/core/utils/CancelablePromise';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { roundMsToMin } from '../language_utils';\nimport { PromQuery, PromOptions } from '../types';\n\nimport { PrometheusMetricsBrowser } from './PrometheusMetricsBrowser';\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\n\nexport const RECORDING_RULES_GROUP = '__recording_rules__';\nconst LAST_USED_LABELS_KEY = 'grafana.datasources.prometheus.browser.labels';\n\nfunction getChooserText(metricsLookupDisabled: boolean, hasSyntax: boolean, hasMetrics: boolean) {\n  if (metricsLookupDisabled) {\n    return '(Disabled)';\n  }\n\n  if (!hasSyntax) {\n    return 'Loading metrics...';\n  }\n\n  if (!hasMetrics) {\n    return '(No metrics found)';\n  }\n\n  return 'Metrics browser';\n}\n\nexport function willApplySuggestion(suggestion: string, { typeaheadContext, typeaheadText }: SuggestionsState): string {\n  // Modify suggestion based on context\n  switch (typeaheadContext) {\n    case 'context-labels': {\n      const nextChar = DOMUtil.getNextCharacter();\n      if (!nextChar || nextChar === '}' || nextChar === ',') {\n        suggestion += '=';\n      }\n      break;\n    }\n\n    case 'context-label-values': {\n      // Always add quotes and remove existing ones instead\n      if (!typeaheadText.match(/^(!?=~?\"|\")/)) {\n        suggestion = `\"${suggestion}`;\n      }\n      if (DOMUtil.getNextCharacter() !== '\"') {\n        suggestion = `${suggestion}\"`;\n      }\n      break;\n    }\n\n    default:\n  }\n  return suggestion;\n}\n\ninterface PromQueryFieldProps extends QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions> {\n  ExtraFieldElement?: ReactNode;\n  'data-testid'?: string;\n}\n\ninterface PromQueryFieldState {\n  labelBrowserVisible: boolean;\n  syntaxLoaded: boolean;\n  hint: QueryHint | null;\n}\n\nclass PromQueryField extends React.PureComponent<PromQueryFieldProps, PromQueryFieldState> {\n  plugins: Plugin[];\n  declare languageProviderInitializationPromise: CancelablePromise<any>;\n\n  constructor(props: PromQueryFieldProps, context: React.Context<any>) {\n    super(props, context);\n\n    this.plugins = [\n      BracesPlugin(),\n      SlatePrism(\n        {\n          onlyIn: (node: any) => node.type === 'code_block',\n          getSyntax: (node: any) => 'promql',\n        },\n        { ...(prismLanguages as LanguageMap), promql: this.props.datasource.languageProvider.syntax }\n      ),\n    ];\n\n    this.state = {\n      labelBrowserVisible: false,\n      syntaxLoaded: false,\n      hint: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.datasource.languageProvider) {\n      this.refreshMetrics();\n    }\n    this.refreshHint();\n  }\n\n  componentWillUnmount() {\n    if (this.languageProviderInitializationPromise) {\n      this.languageProviderInitializationPromise.cancel();\n    }\n  }\n\n  componentDidUpdate(prevProps: PromQueryFieldProps) {\n    const {\n      data,\n      datasource: { languageProvider },\n      range,\n    } = this.props;\n\n    if (languageProvider !== prevProps.datasource.languageProvider) {\n      // We reset this only on DS change so we do not flesh loading state on every rangeChange which happens on every\n      // query run if using relative range.\n      this.setState({\n        syntaxLoaded: false,\n      });\n    }\n\n    const changedRangeToRefresh = this.rangeChangedToRefresh(range, prevProps.range);\n    // We want to refresh metrics when language provider changes and/or when range changes (we round up intervals to a minute)\n    if (languageProvider !== prevProps.datasource.languageProvider || changedRangeToRefresh) {\n      this.refreshMetrics();\n    }\n\n    if (data && prevProps.data && prevProps.data.series !== data.series) {\n      this.refreshHint();\n    }\n  }\n\n  refreshHint = () => {\n    const { datasource, query, data } = this.props;\n    const initHints = datasource.getInitHints();\n    const initHint = initHints.length > 0 ? initHints[0] : null;\n\n    if (!data || data.series.length === 0) {\n      this.setState({\n        hint: initHint,\n      });\n      return;\n    }\n\n    const result = isDataFrame(data.series[0]) ? data.series.map(toLegacyResponseData) : data.series;\n    const queryHints = datasource.getQueryHints(query, result);\n    let queryHint = queryHints.length > 0 ? queryHints[0] : null;\n\n    this.setState({ hint: queryHint ?? initHint });\n  };\n\n  refreshMetrics = async () => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n\n    this.languageProviderInitializationPromise = makePromiseCancelable(languageProvider.start());\n\n    try {\n      const remainingTasks = await this.languageProviderInitializationPromise.promise;\n      await Promise.all(remainingTasks);\n      this.onUpdateLanguage();\n    } catch (err) {\n      if (isCancelablePromiseRejection(err) && err.isCanceled) {\n        // do nothing, promise was canceled\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  rangeChangedToRefresh(range?: TimeRange, prevRange?: TimeRange): boolean {\n    if (range && prevRange) {\n      const sameMinuteFrom = roundMsToMin(range.from.valueOf()) === roundMsToMin(prevRange.from.valueOf());\n      const sameMinuteTo = roundMsToMin(range.to.valueOf()) === roundMsToMin(prevRange.to.valueOf());\n      // If both are same, don't need to refresh.\n      return !(sameMinuteFrom && sameMinuteTo);\n    }\n    return false;\n  }\n\n  /**\n   * TODO #33976: Remove this, add histogram group (query = `histogram_quantile(0.95, sum(rate(${metric}[5m])) by (le))`;)\n   */\n  onChangeLabelBrowser = (selector: string) => {\n    this.onChangeQuery(selector, true);\n    this.setState({ labelBrowserVisible: false });\n  };\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery: PromQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  onClickChooserButton = () => {\n    this.setState((state) => ({ labelBrowserVisible: !state.labelBrowserVisible }));\n  };\n\n  onClickHintFix = () => {\n    const { datasource, query, onChange, onRunQuery } = this.props;\n    const { hint } = this.state;\n\n    onChange(datasource.modifyQuery(query, hint!.fix!.action));\n    onRunQuery();\n  };\n\n  onUpdateLanguage = () => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n    const { metrics } = languageProvider;\n\n    if (!metrics) {\n      return;\n    }\n\n    this.setState({ syntaxLoaded: true });\n  };\n\n  onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n\n    if (!languageProvider) {\n      return { suggestions: [] };\n    }\n\n    const { history } = this.props;\n    const { prefix, text, value, wrapperClasses, labelKey } = typeahead;\n\n    const result = await languageProvider.provideCompletionItems(\n      { text, value, prefix, wrapperClasses, labelKey },\n      { history }\n    );\n\n    return result;\n  };\n\n  render() {\n    const {\n      datasource,\n      datasource: { languageProvider },\n      query,\n      ExtraFieldElement,\n      history = [],\n    } = this.props;\n\n    const { labelBrowserVisible, syntaxLoaded, hint } = this.state;\n    const hasMetrics = languageProvider.metrics.length > 0;\n    const chooserText = getChooserText(datasource.lookupsDisabled, syntaxLoaded, hasMetrics);\n    const buttonDisabled = !(syntaxLoaded && hasMetrics);\n\n    return (\n      <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n        {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n          return (\n            <>\n              <div\n                className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n                data-testid={this.props['data-testid']}\n              >\n                <button\n                  className=\"gf-form-label query-keyword pointer\"\n                  onClick={this.onClickChooserButton}\n                  disabled={buttonDisabled}\n                >\n                  {chooserText}\n                  <Icon name={labelBrowserVisible ? 'angle-down' : 'angle-right'} />\n                </button>\n\n                <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n                  <MonacoQueryFieldWrapper\n                    runQueryOnBlur={this.props.app !== CoreApp.Explore}\n                    languageProvider={languageProvider}\n                    history={history}\n                    onChange={this.onChangeQuery}\n                    onRunQuery={this.props.onRunQuery}\n                    initialValue={query.expr ?? ''}\n                  />\n                </div>\n              </div>\n              {labelBrowserVisible && (\n                <div className=\"gf-form\">\n                  <PrometheusMetricsBrowser\n                    languageProvider={languageProvider}\n                    onChange={this.onChangeLabelBrowser}\n                    lastUsedLabels={lastUsedLabels || []}\n                    storeLastUsedLabels={onLastUsedLabelsSave}\n                    deleteLastUsedLabels={onLastUsedLabelsDelete}\n                  />\n                </div>\n              )}\n\n              {ExtraFieldElement}\n              {hint ? (\n                <div className=\"query-row-break\">\n                  <div className=\"prom-query-field-info text-warning\">\n                    {hint.label}{' '}\n                    {hint.fix ? (\n                      <a className=\"text-link muted\" onClick={this.onClickHintFix}>\n                        {hint.fix.label}\n                      </a>\n                    ) : null}\n                  </div>\n                </div>\n              ) : null}\n            </>\n          );\n        }}\n      </LocalStorageValueProvider>\n    );\n  }\n}\n\nexport default PromQueryField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}