{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeClassES5Compatible } from '../utils/makeClassES5Compatible';\nimport { GrafanaPlugin } from './plugin';\nexport class DataSourcePlugin extends GrafanaPlugin {\n  constructor(DataSourceClass) {\n    super();\n\n    _defineProperty(this, \"components\", {});\n\n    this.DataSourceClass = DataSourceClass;\n  }\n\n  setConfigEditor(editor) {\n    this.components.ConfigEditor = editor;\n    return this;\n  }\n\n  setConfigCtrl(ConfigCtrl) {\n    this.angularConfigCtrl = ConfigCtrl;\n    return this;\n  }\n\n  setQueryCtrl(QueryCtrl) {\n    this.components.QueryCtrl = QueryCtrl;\n    return this;\n  }\n\n  setAnnotationQueryCtrl(AnnotationsQueryCtrl) {\n    this.components.AnnotationsQueryCtrl = AnnotationsQueryCtrl;\n    return this;\n  }\n\n  setQueryEditor(QueryEditor) {\n    this.components.QueryEditor = QueryEditor;\n    return this;\n  }\n  /** @deprecated Use `setQueryEditor` instead. When using Explore `props.app` is equal to `CoreApp.Explore` */\n\n\n  setExploreQueryField(ExploreQueryField) {\n    this.components.ExploreQueryField = ExploreQueryField;\n    return this;\n  }\n  /** @deprecated Use `setQueryEditor` instead. */\n\n\n  setExploreMetricsQueryField(ExploreQueryField) {\n    this.components.ExploreMetricsQueryField = ExploreQueryField;\n    return this;\n  }\n  /** @deprecated Use `setQueryEditor` instead. */\n\n\n  setExploreLogsQueryField(ExploreQueryField) {\n    this.components.ExploreLogsQueryField = ExploreQueryField;\n    return this;\n  }\n\n  setQueryEditorHelp(QueryEditorHelp) {\n    this.components.QueryEditorHelp = QueryEditorHelp;\n    return this;\n  }\n  /**\n   * @deprecated prefer using `setQueryEditorHelp`\n   */\n\n\n  setExploreStartPage(ExploreStartPage) {\n    return this.setQueryEditorHelp(ExploreStartPage);\n  }\n  /*\n   * @deprecated -- prefer using {@link StandardVariableSupport} or {@link CustomVariableSupport} or {@link DataSourceVariableSupport} in data source instead\n   * */\n\n\n  setVariableQueryEditor(VariableQueryEditor) {\n    this.components.VariableQueryEditor = VariableQueryEditor;\n    return this;\n  }\n\n  setMetadataInspector(MetadataInspector) {\n    this.components.MetadataInspector = MetadataInspector;\n    return this;\n  }\n\n  setComponentsFromLegacyExports(pluginExports) {\n    this.angularConfigCtrl = pluginExports.ConfigCtrl;\n    this.components.QueryCtrl = pluginExports.QueryCtrl;\n    this.components.AnnotationsQueryCtrl = pluginExports.AnnotationsQueryCtrl;\n    this.components.ExploreQueryField = pluginExports.ExploreQueryField;\n    this.components.QueryEditor = pluginExports.QueryEditor;\n    this.components.QueryEditorHelp = pluginExports.QueryEditorHelp;\n    this.components.VariableQueryEditor = pluginExports.VariableQueryEditor;\n  }\n\n}\n\n/**\n * The main data source abstraction interface, represents an instance of a data source\n *\n * Although this is a class, datasource implementations do not *yet* need to extend it.\n * As such, we can not yet add functions with default implementations.\n */\nclass DataSourceApi {\n  /**\n   *  Set in constructor\n   */\n\n  /**\n   *  Set in constructor\n   */\n\n  /**\n   *  Set in constructor\n   */\n\n  /**\n   *  Set in constructor\n   */\n\n  /**\n   *  min interval range\n   */\n  constructor(instanceSettings) {\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"uid\", void 0);\n\n    _defineProperty(this, \"interval\", void 0);\n\n    _defineProperty(this, \"init\", void 0);\n\n    _defineProperty(this, \"components\", void 0);\n\n    _defineProperty(this, \"meta\", void 0);\n\n    _defineProperty(this, \"languageProvider\", void 0);\n\n    _defineProperty(this, \"annotations\", void 0);\n\n    _defineProperty(this, \"variables\", void 0);\n\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.type = instanceSettings.type;\n    this.meta = instanceSettings.meta;\n    this.uid = instanceSettings.uid;\n  }\n  /**\n   * @deprecated use DataSourceWithQueryImportSupport and DataSourceWithQueryExportSupport\n   */\n\n\n  /** Get an identifier object for this datasource instance */\n  getRef() {\n    return {\n      type: this.type,\n      uid: this.uid\n    };\n  }\n  /**\n   * Used in explore\n   */\n\n\n}\n\n// TODO: not really needed but used as type in some data sources and in DataQueryRequest\nexport let ExploreMode;\n/**\n * @deprecated use QueryEditorProps instead\n */\n\n(function (ExploreMode) {\n  ExploreMode[\"Logs\"] = \"Logs\";\n  ExploreMode[\"Metrics\"] = \"Metrics\";\n  ExploreMode[\"Tracing\"] = \"Tracing\";\n})(ExploreMode || (ExploreMode = {}));\n\nexport let DataQueryErrorType;\n\n(function (DataQueryErrorType) {\n  DataQueryErrorType[\"Cancelled\"] = \"cancelled\";\n  DataQueryErrorType[\"Timeout\"] = \"timeout\";\n  DataQueryErrorType[\"Unknown\"] = \"unknown\";\n})(DataQueryErrorType || (DataQueryErrorType = {}));\n\nclass LanguageProvider {\n  constructor() {\n    _defineProperty(this, \"datasource\", void 0);\n\n    _defineProperty(this, \"request\", void 0);\n\n    _defineProperty(this, \"start\", void 0);\n\n    _defineProperty(this, \"startTask\", void 0);\n  }\n\n} //@ts-ignore\n\n\nLanguageProvider = makeClassES5Compatible(LanguageProvider);\nexport { LanguageProvider }; //@ts-ignore\n\nDataSourceApi = makeClassES5Compatible(DataSourceApi);\nexport { DataSourceApi };","map":{"version":3,"names":["makeClassES5Compatible","GrafanaPlugin","DataSourcePlugin","constructor","DataSourceClass","setConfigEditor","editor","components","ConfigEditor","setConfigCtrl","ConfigCtrl","angularConfigCtrl","setQueryCtrl","QueryCtrl","setAnnotationQueryCtrl","AnnotationsQueryCtrl","setQueryEditor","QueryEditor","setExploreQueryField","ExploreQueryField","setExploreMetricsQueryField","ExploreMetricsQueryField","setExploreLogsQueryField","ExploreLogsQueryField","setQueryEditorHelp","QueryEditorHelp","setExploreStartPage","ExploreStartPage","setVariableQueryEditor","VariableQueryEditor","setMetadataInspector","MetadataInspector","setComponentsFromLegacyExports","pluginExports","DataSourceApi","instanceSettings","name","id","type","meta","uid","getRef","ExploreMode","DataQueryErrorType","LanguageProvider"],"sources":["/home/soula/grafana/packages/grafana-data/src/types/datasource.ts"],"sourcesContent":["import { ComponentType } from 'react';\nimport { Observable } from 'rxjs';\n\nimport { makeClassES5Compatible } from '../utils/makeClassES5Compatible';\n\nimport { ScopedVars } from './ScopedVars';\nimport { AnnotationEvent, AnnotationQuery, AnnotationSupport } from './annotations';\nimport { CoreApp } from './app';\nimport { KeyValue, LoadingState, TableData, TimeSeries } from './data';\nimport { DataFrame, DataFrameDTO } from './dataFrame';\nimport { PanelData } from './panel';\nimport { GrafanaPlugin, PluginMeta } from './plugin';\nimport { DataQuery } from './query';\nimport { RawTimeRange, TimeRange } from './time';\nimport { CustomVariableSupport, DataSourceVariableSupport, StandardVariableSupport } from './variables';\n\nimport { DataSourceRef, WithAccessControlMetadata } from '.';\n\nexport interface DataSourcePluginOptionsEditorProps<JSONData = DataSourceJsonData, SecureJSONData = {}> {\n  options: DataSourceSettings<JSONData, SecureJSONData>;\n  onOptionsChange: (options: DataSourceSettings<JSONData, SecureJSONData>) => void;\n}\n\n// Utility type to extract the query type TQuery from a class extending DataSourceApi<TQuery, TOptions>\nexport type DataSourceQueryType<DSType> = DSType extends DataSourceApi<infer TQuery, any> ? TQuery : never;\n\n// Utility type to extract the options type TOptions from a class extending DataSourceApi<TQuery, TOptions>\nexport type DataSourceOptionsType<DSType> = DSType extends DataSourceApi<any, infer TOptions> ? TOptions : never;\n\nexport class DataSourcePlugin<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataSourceQueryType<DSType>,\n  TOptions extends DataSourceJsonData = DataSourceOptionsType<DSType>,\n  TSecureOptions = {}\n> extends GrafanaPlugin<DataSourcePluginMeta<TOptions>> {\n  components: DataSourcePluginComponents<DSType, TQuery, TOptions, TSecureOptions> = {};\n\n  constructor(public DataSourceClass: DataSourceConstructor<DSType, TQuery, TOptions>) {\n    super();\n  }\n\n  setConfigEditor(editor: ComponentType<DataSourcePluginOptionsEditorProps<TOptions, TSecureOptions>>) {\n    this.components.ConfigEditor = editor;\n    return this;\n  }\n\n  setConfigCtrl(ConfigCtrl: any) {\n    this.angularConfigCtrl = ConfigCtrl;\n    return this;\n  }\n\n  setQueryCtrl(QueryCtrl: any) {\n    this.components.QueryCtrl = QueryCtrl;\n    return this;\n  }\n\n  setAnnotationQueryCtrl(AnnotationsQueryCtrl: any) {\n    this.components.AnnotationsQueryCtrl = AnnotationsQueryCtrl;\n    return this;\n  }\n\n  setQueryEditor(QueryEditor: ComponentType<QueryEditorProps<DSType, TQuery, TOptions>>) {\n    this.components.QueryEditor = QueryEditor;\n    return this;\n  }\n\n  /** @deprecated Use `setQueryEditor` instead. When using Explore `props.app` is equal to `CoreApp.Explore` */\n  setExploreQueryField(ExploreQueryField: ComponentType<QueryEditorProps<DSType, TQuery, TOptions>>) {\n    this.components.ExploreQueryField = ExploreQueryField;\n    return this;\n  }\n\n  /** @deprecated Use `setQueryEditor` instead. */\n  setExploreMetricsQueryField(ExploreQueryField: ComponentType<QueryEditorProps<DSType, TQuery, TOptions>>) {\n    this.components.ExploreMetricsQueryField = ExploreQueryField;\n    return this;\n  }\n\n  /** @deprecated Use `setQueryEditor` instead. */\n  setExploreLogsQueryField(ExploreQueryField: ComponentType<QueryEditorProps<DSType, TQuery, TOptions>>) {\n    this.components.ExploreLogsQueryField = ExploreQueryField;\n    return this;\n  }\n\n  setQueryEditorHelp(QueryEditorHelp: ComponentType<QueryEditorHelpProps<TQuery>>) {\n    this.components.QueryEditorHelp = QueryEditorHelp;\n    return this;\n  }\n\n  /**\n   * @deprecated prefer using `setQueryEditorHelp`\n   */\n  setExploreStartPage(ExploreStartPage: ComponentType<QueryEditorHelpProps<TQuery>>) {\n    return this.setQueryEditorHelp(ExploreStartPage);\n  }\n\n  /*\n   * @deprecated -- prefer using {@link StandardVariableSupport} or {@link CustomVariableSupport} or {@link DataSourceVariableSupport} in data source instead\n   * */\n  setVariableQueryEditor(VariableQueryEditor: any) {\n    this.components.VariableQueryEditor = VariableQueryEditor;\n    return this;\n  }\n\n  setMetadataInspector(MetadataInspector: ComponentType<MetadataInspectorProps<DSType, TQuery, TOptions>>) {\n    this.components.MetadataInspector = MetadataInspector;\n    return this;\n  }\n\n  setComponentsFromLegacyExports(pluginExports: any) {\n    this.angularConfigCtrl = pluginExports.ConfigCtrl;\n\n    this.components.QueryCtrl = pluginExports.QueryCtrl;\n    this.components.AnnotationsQueryCtrl = pluginExports.AnnotationsQueryCtrl;\n    this.components.ExploreQueryField = pluginExports.ExploreQueryField;\n    this.components.QueryEditor = pluginExports.QueryEditor;\n    this.components.QueryEditorHelp = pluginExports.QueryEditorHelp;\n    this.components.VariableQueryEditor = pluginExports.VariableQueryEditor;\n  }\n}\n\nexport interface DataSourcePluginMeta<T extends KeyValue = {}> extends PluginMeta<T> {\n  builtIn?: boolean; // Is this for all\n  metrics?: boolean;\n  logs?: boolean;\n  annotations?: boolean;\n  alerting?: boolean;\n  tracing?: boolean;\n  mixed?: boolean;\n  hasQueryHelp?: boolean;\n  category?: string;\n  queryOptions?: PluginMetaQueryOptions;\n  sort?: number;\n  streaming?: boolean;\n  unlicensed?: boolean;\n  backend?: boolean;\n  isBackend?: boolean;\n}\n\ninterface PluginMetaQueryOptions {\n  cacheTimeout?: boolean;\n  maxDataPoints?: boolean;\n  minInterval?: boolean;\n}\n\nexport interface DataSourcePluginComponents<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData,\n  TSecureOptions = {}\n> {\n  QueryCtrl?: any;\n  AnnotationsQueryCtrl?: any;\n  VariableQueryEditor?: any;\n  QueryEditor?: ComponentType<QueryEditorProps<DSType, TQuery, TOptions>>;\n  /** @deprecated it will be removed in a future release and `QueryEditor` will be used instead. */\n  ExploreQueryField?: ComponentType<QueryEditorProps<DSType, TQuery, TOptions>>;\n  /** @deprecated it will be removed in a future release and `QueryEditor` will be used instead. */\n  ExploreMetricsQueryField?: ComponentType<QueryEditorProps<DSType, TQuery, TOptions>>;\n  /** @deprecated it will be removed in a future release and `QueryEditor` will be used instead. */\n  ExploreLogsQueryField?: ComponentType<QueryEditorProps<DSType, TQuery, TOptions>>;\n  QueryEditorHelp?: ComponentType<QueryEditorHelpProps<TQuery>>;\n  ConfigEditor?: ComponentType<DataSourcePluginOptionsEditorProps<TOptions, TSecureOptions>>;\n  MetadataInspector?: ComponentType<MetadataInspectorProps<DSType, TQuery, TOptions>>;\n}\n\n// Only exported for tests\nexport interface DataSourceConstructor<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> {\n  new (instanceSettings: DataSourceInstanceSettings<TOptions>, ...args: any[]): DSType;\n}\n\n/**\n * The main data source abstraction interface, represents an instance of a data source\n *\n * Although this is a class, datasource implementations do not *yet* need to extend it.\n * As such, we can not yet add functions with default implementations.\n */\nabstract class DataSourceApi<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData,\n  TQueryImportConfiguration extends Record<string, object> = {}\n> {\n  /**\n   *  Set in constructor\n   */\n  readonly name: string;\n\n  /**\n   *  Set in constructor\n   */\n  readonly id: number;\n\n  /**\n   *  Set in constructor\n   */\n  readonly type: string;\n\n  /**\n   *  Set in constructor\n   */\n  readonly uid: string;\n\n  /**\n   *  min interval range\n   */\n  interval?: string;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<TOptions>) {\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.type = instanceSettings.type;\n    this.meta = instanceSettings.meta;\n    this.uid = instanceSettings.uid;\n  }\n\n  /**\n   * @deprecated use DataSourceWithQueryImportSupport and DataSourceWithQueryExportSupport\n   */\n  async importQueries?(queries: DataQuery[], originDataSource: DataSourceApi<DataQuery>): Promise<TQuery[]>;\n\n  /**\n   * Returns configuration for importing queries from other data sources\n   */\n  getImportQueryConfiguration?(): TQueryImportConfiguration;\n\n  /**\n   * Initializes a datasource after instantiation\n   */\n  init?: () => void;\n\n  /**\n   * Query for data, and optionally stream results\n   */\n  abstract query(request: DataQueryRequest<TQuery>): Promise<DataQueryResponse> | Observable<DataQueryResponse>;\n\n  /**\n   * Test & verify datasource settings & connection details (returning TestingStatus)\n   *\n   * When verification fails - errors specific to the data source should be handled here and converted to\n   * a TestingStatus object. Unknown errors and HTTP errors can be re-thrown and will be handled here:\n   * public/app/features/datasources/state/actions.ts\n   */\n  abstract testDatasource(): Promise<any>;\n\n  /**\n   * Override to skip executing a query\n   *\n   * @returns false if the query should be skipped\n   *\n   * @virtual\n   */\n  filterQuery?(query: TQuery): boolean;\n\n  /**\n   *  Get hints for query improvements\n   */\n  getQueryHints?(query: TQuery, results: any[], ...rest: any): QueryHint[];\n\n  /**\n   * Convert a query to a simple text string\n   */\n  getQueryDisplayText?(query: TQuery): string;\n\n  /**\n   * Variable query action.\n   */\n  metricFindQuery?(query: any, options?: any): Promise<MetricFindValue[]>;\n\n  /**\n   * Get tag keys for adhoc filters\n   */\n  getTagKeys?(options?: any): Promise<MetricFindValue[]>;\n\n  /**\n   * Get tag values for adhoc filters\n   */\n  getTagValues?(options: any): Promise<MetricFindValue[]>;\n\n  /**\n   * Set after constructor call, as the data source instance is the most common thing to pass around\n   * we attach the components to this instance for easy access\n   */\n  components?: DataSourcePluginComponents<DataSourceApi<TQuery, TOptions>, TQuery, TOptions>;\n\n  /**\n   * static information about the datasource\n   */\n  meta: DataSourcePluginMeta;\n\n  /**\n   * Used by alerting to check if query contains template variables\n   */\n  targetContainsTemplate?(query: TQuery): boolean;\n\n  /**\n   * Used in explore\n   */\n  modifyQuery?(query: TQuery, action: QueryFixAction): TQuery;\n\n  /**\n   * @deprecated since version 8.2.0\n   * Not used anymore.\n   */\n  getHighlighterExpression?(query: TQuery): string[];\n\n  /** Get an identifier object for this datasource instance */\n  getRef(): DataSourceRef {\n    return { type: this.type, uid: this.uid };\n  }\n\n  /**\n   * Used in explore\n   */\n  languageProvider?: any;\n\n  getVersion?(optionalOptions?: any): Promise<string>;\n\n  interpolateVariablesInQueries?(queries: TQuery[], scopedVars: ScopedVars | {}): TQuery[];\n\n  /**\n   * An annotation processor allows explicit control for how annotations are managed.\n   *\n   * It is only necessary to configure an annotation processor if the default behavior is not desirable\n   */\n  annotations?: AnnotationSupport<TQuery>;\n\n  /**\n   * Can be optionally implemented to allow datasource to be a source of annotations for dashboard.\n   * This function will only be called if an angular {@link AnnotationsQueryCtrl} is configured and\n   * the {@link annotations} is undefined\n   *\n   * @deprecated -- prefer using {@link AnnotationSupport}\n   */\n  annotationQuery?(options: AnnotationQueryRequest<TQuery>): Promise<AnnotationEvent[]>;\n\n  /**\n   * Defines new variable support\n   * @alpha -- experimental\n   */\n  variables?:\n    | StandardVariableSupport<DataSourceApi<TQuery, TOptions>>\n    | CustomVariableSupport<DataSourceApi<TQuery, TOptions>>\n    | DataSourceVariableSupport<DataSourceApi<TQuery, TOptions>>;\n\n  /*\n   * Optionally, use this method to set default values for a query\n   * @alpha -- experimental\n   */\n  getDefaultQuery?(app: CoreApp): Partial<TQuery>;\n}\n\nexport interface MetadataInspectorProps<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> {\n  datasource: DSType;\n\n  // All Data from this DataSource\n  data: DataFrame[];\n}\n\nexport interface QueryEditorProps<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData,\n  TVQuery extends DataQuery = TQuery\n> {\n  datasource: DSType;\n  query: TVQuery;\n  onRunQuery: () => void;\n  onChange: (value: TVQuery) => void;\n  onBlur?: () => void;\n  /**\n   * Contains query response filtered by refId of QueryResultBase and possible query error\n   */\n  data?: PanelData;\n  range?: TimeRange;\n  exploreId?: any;\n  history?: Array<HistoryItem<TQuery>>;\n  queries?: DataQuery[];\n  app?: CoreApp;\n}\n\n// TODO: not really needed but used as type in some data sources and in DataQueryRequest\nexport enum ExploreMode {\n  Logs = 'Logs',\n  Metrics = 'Metrics',\n  Tracing = 'Tracing',\n}\n\n/**\n * @deprecated use QueryEditorProps instead\n */\nexport type ExploreQueryFieldProps<\n  DSType extends DataSourceApi<TQuery, TOptions>,\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> = QueryEditorProps<DSType, TQuery, TOptions>;\n\nexport interface QueryEditorHelpProps<TQuery extends DataQuery = DataQuery> {\n  datasource: DataSourceApi<TQuery>;\n  query: TQuery;\n  onClickExample: (query: TQuery) => void;\n  exploreId?: any;\n}\n\n/**\n * Starting in v6.2 DataFrame can represent both TimeSeries and TableData\n */\nexport type LegacyResponseData = TimeSeries | TableData | any;\n\nexport type DataQueryResponseData = DataFrame | DataFrameDTO | LegacyResponseData;\n\nexport interface DataQueryResponse {\n  /**\n   * The response data.  When streaming, this may be empty\n   * or a partial result set\n   */\n  data: DataQueryResponseData[];\n\n  /**\n   * When returning multiple partial responses or streams\n   * Use this key to inform Grafana how to combine the partial responses\n   * Multiple responses with same key are replaced (latest used)\n   */\n  key?: string;\n\n  /**\n   * Optionally include error info along with the response data\n   */\n  error?: DataQueryError;\n\n  /**\n   * Use this to control which state the response should have\n   * Defaults to LoadingState.Done if state is not defined\n   */\n  state?: LoadingState;\n}\n\nexport enum DataQueryErrorType {\n  Cancelled = 'cancelled',\n  Timeout = 'timeout',\n  Unknown = 'unknown',\n}\n\nexport interface DataQueryError {\n  data?: {\n    /**\n     * Short information about the error\n     */\n    message?: string;\n    /**\n     * Detailed information about the error. Only returned when app_mode is development.\n     */\n    error?: string;\n  };\n  message?: string;\n  status?: number;\n  statusText?: string;\n  refId?: string;\n  type?: DataQueryErrorType;\n}\n\nexport interface DataQueryRequest<TQuery extends DataQuery = DataQuery> {\n  requestId: string; // Used to identify results and optionally cancel the request in backendSrv\n\n  interval: string;\n  intervalMs: number;\n  maxDataPoints?: number;\n  range: TimeRange;\n  scopedVars: ScopedVars;\n  targets: TQuery[];\n  timezone: string;\n  app: CoreApp | string;\n\n  cacheTimeout?: string | null;\n  rangeRaw?: RawTimeRange;\n  timeInfo?: string; // The query time description (blue text in the upper right)\n  panelId?: number;\n  dashboardId?: number;\n  // Temporary prop for public dashboards, to be replaced by publicAccessKey\n  publicDashboardAccessToken?: string;\n\n  // Request Timing\n  startTime: number;\n  endTime?: number;\n\n  // Explore state used by various datasources\n  liveStreaming?: boolean;\n}\n\nexport interface DataQueryTimings {\n  dataProcessingTime: number;\n}\n\nexport interface QueryFix {\n  label: string;\n  action?: QueryFixAction;\n}\n\nexport interface QueryFixAction {\n  type: string;\n  query?: string;\n  preventSubmit?: boolean;\n}\n\nexport interface QueryHint {\n  type: string;\n  label: string;\n  fix?: QueryFix;\n}\n\nexport interface MetricFindValue {\n  text: string;\n  value?: string | number;\n  expandable?: boolean;\n}\n\nexport interface DataSourceJsonData {\n  authType?: string;\n  defaultRegion?: string;\n  profile?: string;\n  manageAlerts?: boolean;\n  alertmanagerUid?: string;\n}\n\n/**\n * Data Source instance edit model.  This is returned from:\n *  /api/datasources\n */\nexport interface DataSourceSettings<T extends DataSourceJsonData = DataSourceJsonData, S = {}>\n  extends WithAccessControlMetadata {\n  id: number;\n  uid: string;\n  orgId: number;\n  name: string;\n  typeLogoUrl: string;\n  type: string;\n  typeName: string;\n  access: string;\n  url: string;\n  user: string;\n  database: string;\n  basicAuth: boolean;\n  basicAuthUser: string;\n  isDefault: boolean;\n  jsonData: T;\n  secureJsonData?: S;\n  secureJsonFields: KeyValue<boolean>;\n  readOnly: boolean;\n  withCredentials: boolean;\n  version?: number;\n}\n\n/**\n * Frontend settings model that is passed to Datasource constructor. This differs a bit from the model above\n * as this data model is available to every user who has access to a data source (Viewers+).  This is loaded\n * in bootData (on page load), or from: /api/frontend/settings\n */\nexport interface DataSourceInstanceSettings<T extends DataSourceJsonData = DataSourceJsonData> {\n  id: number;\n  uid: string;\n  type: string;\n  name: string;\n  meta: DataSourcePluginMeta;\n  url?: string;\n  jsonData: T;\n  username?: string;\n  password?: string; // when access is direct, for some legacy datasources\n  database?: string;\n  isDefault?: boolean;\n  access: 'direct' | 'proxy'; // Currently we support 2 options - direct (browser) and proxy (server)\n\n  /**\n   * This is the full Authorization header if basic auth is enabled.\n   * Only available here when access is Browser (direct), when access is Server (proxy)\n   * The basic auth header, username & password is never exposed to browser/Frontend\n   * so this will be empty then.\n   */\n  basicAuth?: string;\n  withCredentials?: boolean;\n\n  /** When the name+uid are based on template variables, maintain access to the real values */\n  rawRef?: DataSourceRef;\n}\n\n/**\n * @deprecated -- use {@link DataSourceInstanceSettings} instead\n */\nexport interface DataSourceSelectItem {\n  name: string;\n  value: string | null;\n  meta: DataSourcePluginMeta;\n}\n\n/**\n * Options passed to the datasource.annotationQuery method. See docs/plugins/developing/datasource.md\n *\n * @deprecated -- use {@link AnnotationSupport}\n */\nexport interface AnnotationQueryRequest<MoreOptions = {}> {\n  range: TimeRange;\n  rangeRaw: RawTimeRange;\n  // Should be DataModel but cannot import that here from the main app. Needs to be moved to package first.\n  dashboard: any;\n  annotation: AnnotationQuery;\n}\n\nexport interface HistoryItem<TQuery extends DataQuery = DataQuery> {\n  ts: number;\n  query: TQuery;\n}\n\nabstract class LanguageProvider {\n  abstract datasource: DataSourceApi<any, any>;\n  abstract request: (url: string, params?: any) => Promise<any>;\n\n  /**\n   * Returns startTask that resolves with a task list when main syntax is loaded.\n   * Task list consists of secondary promises that load more detailed language features.\n   */\n  abstract start: () => Promise<Array<Promise<any>>>;\n  startTask?: Promise<any[]>;\n}\n\n//@ts-ignore\nLanguageProvider = makeClassES5Compatible(LanguageProvider);\nexport { LanguageProvider };\n\n//@ts-ignore\nDataSourceApi = makeClassES5Compatible(DataSourceApi);\n\nexport { DataSourceApi };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}