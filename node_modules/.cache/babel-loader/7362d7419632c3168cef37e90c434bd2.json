{"ast":null,"code":"var _br, _CrawlerStartButton, _CrawlerStartButton2;\n\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { isLiveChannelMessageEvent, isLiveChannelStatusEvent, LiveChannelScope } from '@grafana/data';\nimport { getBackendSrv, getGrafanaLiveSrv } from '@grafana/runtime';\nimport { Button, useTheme2 } from '@grafana/ui';\nimport { CrawlerStartButton } from './CrawlerStartButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const CrawlerStatus = () => {\n  const styles = getStyles(useTheme2());\n  const [status, setStatus] = useState();\n  useEffect(() => {\n    const subscription = getGrafanaLiveSrv().getStream({\n      scope: LiveChannelScope.Grafana,\n      namespace: 'broadcast',\n      path: 'crawler'\n    }).subscribe({\n      next: evt => {\n        if (isLiveChannelMessageEvent(evt)) {\n          setStatus(evt.message);\n        } else if (isLiveChannelStatusEvent(evt)) {\n          setStatus(evt.message);\n        }\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  if (!status) {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.wrap,\n      children: [\"No status (never run)\", _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), _CrawlerStartButton || (_CrawlerStartButton = /*#__PURE__*/_jsx(CrawlerStartButton, {}))]\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.wrap,\n    children: [/*#__PURE__*/_jsx(\"pre\", {\n      children: JSON.stringify(status, null, 2)\n    }), status.state !== 'running' && (_CrawlerStartButton2 || (_CrawlerStartButton2 = /*#__PURE__*/_jsx(CrawlerStartButton, {}))), status.state !== 'stopped' && /*#__PURE__*/_jsx(Button, {\n      variant: \"secondary\",\n      onClick: () => {\n        getBackendSrv().post('/api/admin/crawler/stop');\n      },\n      children: \"Stop\"\n    })]\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    wrap: css`\n      border: 4px solid red;\n    `,\n    running: css`\n      border: 4px solid green;\n    `\n  };\n};","map":{"version":3,"names":["css","React","useEffect","useState","isLiveChannelMessageEvent","isLiveChannelStatusEvent","LiveChannelScope","getBackendSrv","getGrafanaLiveSrv","Button","useTheme2","CrawlerStartButton","CrawlerStatus","styles","getStyles","status","setStatus","subscription","getStream","scope","Grafana","namespace","path","subscribe","next","evt","message","unsubscribe","wrap","JSON","stringify","state","post","theme","running"],"sources":["/home/soula/grafana/public/app/features/admin/CrawlerStatus.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, isLiveChannelMessageEvent, isLiveChannelStatusEvent, LiveChannelScope } from '@grafana/data';\nimport { getBackendSrv, getGrafanaLiveSrv } from '@grafana/runtime';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { CrawlerStartButton } from './CrawlerStartButton';\n\ninterface CrawlerStatusMessage {\n  state: string;\n  started: string;\n  finished: string;\n  complete: number;\n  queue: number;\n  last: string;\n}\n\nexport const CrawlerStatus = () => {\n  const styles = getStyles(useTheme2());\n  const [status, setStatus] = useState<CrawlerStatusMessage>();\n\n  useEffect(() => {\n    const subscription = getGrafanaLiveSrv()\n      .getStream<CrawlerStatusMessage>({\n        scope: LiveChannelScope.Grafana,\n        namespace: 'broadcast',\n        path: 'crawler',\n      })\n      .subscribe({\n        next: (evt) => {\n          if (isLiveChannelMessageEvent(evt)) {\n            setStatus(evt.message);\n          } else if (isLiveChannelStatusEvent(evt)) {\n            setStatus(evt.message);\n          }\n        },\n      });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  if (!status) {\n    return (\n      <div className={styles.wrap}>\n        No status (never run)\n        <br />\n        <CrawlerStartButton />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrap}>\n      <pre>{JSON.stringify(status, null, 2)}</pre>\n      {status.state !== 'running' && <CrawlerStartButton />}\n      {status.state !== 'stopped' && (\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            getBackendSrv().post('/api/admin/crawler/stop');\n          }}\n        >\n          Stop\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      border: 4px solid red;\n    `,\n    running: css`\n      border: 4px solid green;\n    `,\n  };\n};\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAAwBC,yBAAxB,EAAmDC,wBAAnD,EAA6EC,gBAA7E,QAAqG,eAArG;AACA,SAASC,aAAT,EAAwBC,iBAAxB,QAAiD,kBAAjD;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,aAAlC;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;;;AAWA,OAAO,MAAMC,aAAa,GAAG,MAAM;EACjC,MAAMC,MAAM,GAAGC,SAAS,CAACJ,SAAS,EAAV,CAAxB;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBb,QAAQ,EAApC;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMe,YAAY,GAAGT,iBAAiB,GACnCU,SADkB,CACc;MAC/BC,KAAK,EAAEb,gBAAgB,CAACc,OADO;MAE/BC,SAAS,EAAE,WAFoB;MAG/BC,IAAI,EAAE;IAHyB,CADd,EAMlBC,SANkB,CAMR;MACTC,IAAI,EAAGC,GAAD,IAAS;QACb,IAAIrB,yBAAyB,CAACqB,GAAD,CAA7B,EAAoC;UAClCT,SAAS,CAACS,GAAG,CAACC,OAAL,CAAT;QACD,CAFD,MAEO,IAAIrB,wBAAwB,CAACoB,GAAD,CAA5B,EAAmC;UACxCT,SAAS,CAACS,GAAG,CAACC,OAAL,CAAT;QACD;MACF;IAPQ,CANQ,CAArB;IAeA,OAAO,MAAM;MACXT,YAAY,CAACU,WAAb;IACD,CAFD;EAGD,CAnBQ,EAmBN,EAnBM,CAAT;;EAqBA,IAAI,CAACZ,MAAL,EAAa;IACX,oBACE;MAAK,SAAS,EAAEF,MAAM,CAACe,IAAvB;MAAA,+DAEE,cAFF,8DAGE,KAAC,kBAAD,KAHF;IAAA,EADF;EAOD;;EAED,oBACE;IAAK,SAAS,EAAEf,MAAM,CAACe,IAAvB;IAAA,wBACE;MAAA,UAAMC,IAAI,CAACC,SAAL,CAAef,MAAf,EAAuB,IAAvB,EAA6B,CAA7B;IAAN,EADF,EAEGA,MAAM,CAACgB,KAAP,KAAiB,SAAjB,kEAA8B,KAAC,kBAAD,KAA9B,EAFH,EAGGhB,MAAM,CAACgB,KAAP,KAAiB,SAAjB,iBACC,KAAC,MAAD;MACE,OAAO,EAAC,WADV;MAEE,OAAO,EAAE,MAAM;QACbxB,aAAa,GAAGyB,IAAhB,CAAqB,yBAArB;MACD,CAJH;MAAA;IAAA,EAJJ;EAAA,EADF;AAgBD,CAnDM;;AAqDP,MAAMlB,SAAS,GAAImB,KAAD,IAA0B;EAC1C,OAAO;IACLL,IAAI,EAAE5B,GAAI;AACd;AACA,KAHS;IAILkC,OAAO,EAAElC,GAAI;AACjB;AACA;EANS,CAAP;AAQD,CATD"},"metadata":{},"sourceType":"module"}