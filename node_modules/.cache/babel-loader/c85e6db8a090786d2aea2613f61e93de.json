{"ast":null,"code":"import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useMemo, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function RuleListErrors() {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const dataSourceConfigRequests = useUnifiedAlertingSelector(state => state.dataSources);\n  const promRuleRequests = useUnifiedAlertingSelector(state => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector(state => state.rulerRules);\n  const styles = useStyles2(getStyles);\n  const errors = useMemo(() => {\n    var _promRuleRequests$GRA, _rulerRuleRequests$GR;\n\n    const [dataSourceConfigErrors, promRequestErrors, rulerRequestErrors] = [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests].map(requests => getRulesDataSources().reduce((result, dataSource) => {\n      var _requests$dataSource$;\n\n      const error = (_requests$dataSource$ = requests[dataSource.name]) === null || _requests$dataSource$ === void 0 ? void 0 : _requests$dataSource$.error;\n\n      if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n        return [...result, {\n          dataSource,\n          error\n        }];\n      }\n\n      return result;\n    }, []));\n    const grafanaPromError = (_promRuleRequests$GRA = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]) === null || _promRuleRequests$GRA === void 0 ? void 0 : _promRuleRequests$GRA.error;\n    const grafanaRulerError = (_rulerRuleRequests$GR = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]) === null || _rulerRuleRequests$GR === void 0 ? void 0 : _rulerRuleRequests$GR.error;\n    const result = [];\n\n    if (grafanaPromError) {\n      result.push( /*#__PURE__*/_jsxs(_Fragment, {\n        children: [\"Failed to load Grafana rules state: \", grafanaPromError.message || 'Unknown error.']\n      }));\n    }\n\n    if (grafanaRulerError) {\n      result.push( /*#__PURE__*/_jsxs(_Fragment, {\n        children: [\"Failed to load Grafana rules config: \", grafanaRulerError.message || 'Unknown error.']\n      }));\n    }\n\n    dataSourceConfigErrors.forEach(({\n      dataSource,\n      error\n    }) => {\n      result.push( /*#__PURE__*/_jsxs(_Fragment, {\n        children: [\"Failed to load the data source configuration for\", ' ', /*#__PURE__*/_jsx(\"a\", {\n          href: `datasources/edit/${dataSource.uid}`,\n          children: dataSource.name\n        }), \": \", error.message || 'Unknown error.']\n      }));\n    });\n    promRequestErrors.forEach(({\n      dataSource,\n      error\n    }) => result.push( /*#__PURE__*/_jsxs(_Fragment, {\n      children: [\"Failed to load rules state from \", /*#__PURE__*/_jsx(\"a\", {\n        href: `datasources/edit/${dataSource.uid}`,\n        children: dataSource.name\n      }), \":\", ' ', error.message || 'Unknown error.']\n    })));\n    rulerRequestErrors.forEach(({\n      dataSource,\n      error\n    }) => result.push( /*#__PURE__*/_jsxs(_Fragment, {\n      children: [\"Failed to load rules config from \", /*#__PURE__*/_jsx(\"a\", {\n        href: `datasources/edit/${dataSource.uid}`,\n        children: dataSource.name\n      }), \":\", ' ', error.message || 'Unknown error.']\n    })));\n    return result;\n  }, [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [!!errors.length && closed && /*#__PURE__*/_jsx(ErrorSummaryButton, {\n      count: errors.length,\n      onClick: () => setClosed(closed => !closed)\n    }), !!errors.length && !closed && /*#__PURE__*/_jsxs(Alert, {\n      \"data-testid\": \"cloud-rulessource-errors\",\n      title: \"Errors loading rules\",\n      severity: \"error\",\n      onRemove: () => setClosed(true),\n      children: [expanded && errors.map((item, idx) => /*#__PURE__*/_jsx(\"div\", {\n        children: item\n      }, idx)), !expanded && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          children: errors[0]\n        }), errors.length >= 2 && /*#__PURE__*/_jsxs(Button, {\n          className: styles.moreButton,\n          fill: \"text\",\n          icon: \"angle-right\",\n          size: \"sm\",\n          onClick: () => setExpanded(true),\n          children: [errors.length - 1, \" more \", pluralize('error', errors.length - 1)]\n        })]\n      })]\n    })]\n  });\n}\n\nconst ErrorSummaryButton = ({\n  count,\n  onClick\n}) => {\n  const styles = useStyles2(getStyles);\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.floatRight,\n    children: /*#__PURE__*/_jsx(Tooltip, {\n      content: \"Show all errors\",\n      placement: \"bottom\",\n      children: /*#__PURE__*/_jsx(Button, {\n        fill: \"text\",\n        variant: \"destructive\",\n        icon: \"exclamation-triangle\",\n        onClick: onClick,\n        children: count > 1 ? /*#__PURE__*/_jsxs(_Fragment, {\n          children: [count, \" errors\"]\n        }) : /*#__PURE__*/_jsx(_Fragment, {\n          children: \"1 error\"\n        })\n      })\n    })\n  });\n};\n\nconst getStyles = theme => ({\n  moreButton: css`\n    padding: 0;\n  `,\n  floatRight: css`\n    display: flex;\n    justify-content: flex-end;\n  `\n});","map":{"version":3,"names":["css","pluralize","React","useMemo","useState","useLocalStorage","Alert","Button","Tooltip","useStyles2","useUnifiedAlertingSelector","getRulesDataSources","GRAFANA_RULES_SOURCE_NAME","isRulerNotSupportedResponse","RuleListErrors","expanded","setExpanded","closed","setClosed","dataSourceConfigRequests","state","dataSources","promRuleRequests","promRules","rulerRuleRequests","rulerRules","styles","getStyles","errors","dataSourceConfigErrors","promRequestErrors","rulerRequestErrors","map","requests","reduce","result","dataSource","error","name","grafanaPromError","grafanaRulerError","push","message","forEach","uid","length","item","idx","moreButton","ErrorSummaryButton","count","onClick","floatRight","theme"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rules/RuleListErrors.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState, FC } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const dataSourceConfigRequests = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [dataSourceConfigErrors, promRequestErrors, rulerRequestErrors] = [\n      dataSourceConfigRequests,\n      promRuleRequests,\n      rulerRuleRequests,\n    ].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    dataSourceConfigErrors.forEach(({ dataSource, error }) => {\n      result.push(\n        <>\n          Failed to load the data source configuration for{' '}\n          <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>: {error.message || 'Unknown error.'}\n        </>\n      );\n    });\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n          {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n          {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css`\n    padding: 0;\n  `,\n  floatRight: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,KAAP,IAAgBC,OAAhB,EAAuCC,QAAvC,QAA2D,OAA3D;AACA,SAASC,eAAT,QAAgC,WAAhC;AAGA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,OAAxB,EAAiCC,UAAjC,QAAmD,aAAnD;AAEA,SAASC,0BAAT,QAA2C,wCAA3C;AACA,SAASC,mBAAT,EAA8BC,yBAA9B,QAA+D,wBAA/D;AACA,SAASC,2BAAT,QAA4C,mBAA5C;;;;AAEA,OAAO,SAASC,cAAT,GAAwC;EAC7C,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAM,CAACa,MAAD,EAASC,SAAT,IAAsBb,eAAe,CAAC,oCAAD,EAAuC,KAAvC,CAA3C;EACA,MAAMc,wBAAwB,GAAGT,0BAA0B,CAAEU,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAA3D;EACA,MAAMC,gBAAgB,GAAGZ,0BAA0B,CAAEU,KAAD,IAAWA,KAAK,CAACG,SAAlB,CAAnD;EACA,MAAMC,iBAAiB,GAAGd,0BAA0B,CAAEU,KAAD,IAAWA,KAAK,CAACK,UAAlB,CAApD;EACA,MAAMC,MAAM,GAAGjB,UAAU,CAACkB,SAAD,CAAzB;EAEA,MAAMC,MAAM,GAAGzB,OAAO,CAAC,MAAqB;IAAA;;IAC1C,MAAM,CAAC0B,sBAAD,EAAyBC,iBAAzB,EAA4CC,kBAA5C,IAAkE,CACtEZ,wBADsE,EAEtEG,gBAFsE,EAGtEE,iBAHsE,EAItEQ,GAJsE,CAIjEC,QAAD,IACJtB,mBAAmB,GAAGuB,MAAtB,CACE,CAACC,MAAD,EAASC,UAAT,KAAwB;MAAA;;MACtB,MAAMC,KAAK,4BAAGJ,QAAQ,CAACG,UAAU,CAACE,IAAZ,CAAX,0DAAG,sBAA2BD,KAAzC;;MACA,IAAIJ,QAAQ,CAACG,UAAU,CAACE,IAAZ,CAAR,IAA6BD,KAA7B,IAAsC,CAACxB,2BAA2B,CAACoB,QAAQ,CAACG,UAAU,CAACE,IAAZ,CAAT,CAAtE,EAAmG;QACjG,OAAO,CAAC,GAAGH,MAAJ,EAAY;UAAEC,UAAF;UAAcC;QAAd,CAAZ,CAAP;MACD;;MACD,OAAOF,MAAP;IACD,CAPH,EAQE,EARF,CALsE,CAAxE;IAgBA,MAAMI,gBAAgB,4BAAGjB,gBAAgB,CAACV,yBAAD,CAAnB,0DAAG,sBAA6CyB,KAAtE;IACA,MAAMG,iBAAiB,4BAAGhB,iBAAiB,CAACZ,yBAAD,CAApB,0DAAG,sBAA8CyB,KAAxE;IAEA,MAAMF,MAAqB,GAAG,EAA9B;;IAEA,IAAII,gBAAJ,EAAsB;MACpBJ,MAAM,CAACM,IAAP,eAAY;QAAA,mDAAuCF,gBAAgB,CAACG,OAAjB,IAA4B,gBAAnE;MAAA,EAAZ;IACD;;IACD,IAAIF,iBAAJ,EAAuB;MACrBL,MAAM,CAACM,IAAP,eAAY;QAAA,oDAAwCD,iBAAiB,CAACE,OAAlB,IAA6B,gBAArE;MAAA,EAAZ;IACD;;IAEDb,sBAAsB,CAACc,OAAvB,CAA+B,CAAC;MAAEP,UAAF;MAAcC;IAAd,CAAD,KAA2B;MACxDF,MAAM,CAACM,IAAP,eACE;QAAA,+DACmD,GADnD,eAEE;UAAG,IAAI,EAAG,oBAAmBL,UAAU,CAACQ,GAAI,EAA5C;UAAA,UAAgDR,UAAU,CAACE;QAA3D,EAFF,QAEyED,KAAK,CAACK,OAAN,IAAiB,gBAF1F;MAAA,EADF;IAMD,CAPD;IASAZ,iBAAiB,CAACa,OAAlB,CAA0B,CAAC;MAAEP,UAAF;MAAcC;IAAd,CAAD,KACxBF,MAAM,CAACM,IAAP,eACE;MAAA,4DACkC;QAAG,IAAI,EAAG,oBAAmBL,UAAU,CAACQ,GAAI,EAA5C;QAAA,UAAgDR,UAAU,CAACE;MAA3D,EADlC,OACwG,GADxG,EAEGD,KAAK,CAACK,OAAN,IAAiB,gBAFpB;IAAA,EADF,CADF;IASAX,kBAAkB,CAACY,OAAnB,CAA2B,CAAC;MAAEP,UAAF;MAAcC;IAAd,CAAD,KACzBF,MAAM,CAACM,IAAP,eACE;MAAA,6DACmC;QAAG,IAAI,EAAG,oBAAmBL,UAAU,CAACQ,GAAI,EAA5C;QAAA,UAAgDR,UAAU,CAACE;MAA3D,EADnC,OACyG,GADzG,EAEGD,KAAK,CAACK,OAAN,IAAiB,gBAFpB;IAAA,EADF,CADF;IASA,OAAOP,MAAP;EACD,CAzDqB,EAyDnB,CAAChB,wBAAD,EAA2BG,gBAA3B,EAA6CE,iBAA7C,CAzDmB,CAAtB;EA2DA,oBACE;IAAA,WACG,CAAC,CAACI,MAAM,CAACiB,MAAT,IAAmB5B,MAAnB,iBACC,KAAC,kBAAD;MAAoB,KAAK,EAAEW,MAAM,CAACiB,MAAlC;MAA0C,OAAO,EAAE,MAAM3B,SAAS,CAAED,MAAD,IAAY,CAACA,MAAd;IAAlE,EAFJ,EAIG,CAAC,CAACW,MAAM,CAACiB,MAAT,IAAmB,CAAC5B,MAApB,iBACC,MAAC,KAAD;MACE,eAAY,0BADd;MAEE,KAAK,EAAC,sBAFR;MAGE,QAAQ,EAAC,OAHX;MAIE,QAAQ,EAAE,MAAMC,SAAS,CAAC,IAAD,CAJ3B;MAAA,WAMGH,QAAQ,IAAIa,MAAM,CAACI,GAAP,CAAW,CAACc,IAAD,EAAOC,GAAP,kBAAe;QAAA,UAAgBD;MAAhB,GAAUC,GAAV,CAA1B,CANf,EAOG,CAAChC,QAAD,iBACC;QAAA,wBACE;UAAA,UAAMa,MAAM,CAAC,CAAD;QAAZ,EADF,EAEGA,MAAM,CAACiB,MAAP,IAAiB,CAAjB,iBACC,MAAC,MAAD;UACE,SAAS,EAAEnB,MAAM,CAACsB,UADpB;UAEE,IAAI,EAAC,MAFP;UAGE,IAAI,EAAC,aAHP;UAIE,IAAI,EAAC,IAJP;UAKE,OAAO,EAAE,MAAMhC,WAAW,CAAC,IAAD,CAL5B;UAAA,WAOGY,MAAM,CAACiB,MAAP,GAAgB,CAPnB,YAO4B5C,SAAS,CAAC,OAAD,EAAU2B,MAAM,CAACiB,MAAP,GAAgB,CAA1B,CAPrC;QAAA,EAHJ;MAAA,EARJ;IAAA,EALJ;EAAA,EADF;AAiCD;;AAOD,MAAMI,kBAAyC,GAAG,CAAC;EAAEC,KAAF;EAASC;AAAT,CAAD,KAAwB;EACxE,MAAMzB,MAAM,GAAGjB,UAAU,CAACkB,SAAD,CAAzB;EAEA,oBACE;IAAK,SAAS,EAAED,MAAM,CAAC0B,UAAvB;IAAA,uBACE,KAAC,OAAD;MAAS,OAAO,EAAC,iBAAjB;MAAmC,SAAS,EAAC,QAA7C;MAAA,uBACE,KAAC,MAAD;QAAQ,IAAI,EAAC,MAAb;QAAoB,OAAO,EAAC,aAA5B;QAA0C,IAAI,EAAC,sBAA/C;QAAsE,OAAO,EAAED,OAA/E;QAAA,UACGD,KAAK,GAAG,CAAR,gBAAY;UAAA,WAAGA,KAAH;QAAA,EAAZ,gBAAkC;UAAA;QAAA;MADrC;IADF;EADF,EADF;AASD,CAZD;;AAcA,MAAMvB,SAAS,GAAI0B,KAAD,KAA2B;EAC3CL,UAAU,EAAEhD,GAAI;AAClB;AACA,GAH6C;EAI3CoD,UAAU,EAAEpD,GAAI;AAClB;AACA;AACA;AAP6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}