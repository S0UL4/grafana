{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { numberOverrideProcessor, selectOverrideProcessor, stringOverrideProcessor, booleanOverrideProcessor, standardEditorsRegistry, identityOverrideProcessor, unitOverrideProcessor } from '../field';\nimport { OptionsUIRegistryBuilder } from '../types/OptionsUIRegistryBuilder';\n\n/**\n * Fluent API for declarative creation of field config option editors\n */\nexport class FieldConfigEditorBuilder extends OptionsUIRegistryBuilder {\n  addNumberInput(config) {\n    var _config$shouldApply;\n\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      override: standardEditorsRegistry.get('number').editor,\n      editor: standardEditorsRegistry.get('number').editor,\n      process: numberOverrideProcessor,\n      shouldApply: (_config$shouldApply = config.shouldApply) !== null && _config$shouldApply !== void 0 ? _config$shouldApply : () => true,\n      settings: config.settings || {}\n    }));\n  }\n\n  addSliderInput(config) {\n    var _config$shouldApply2;\n\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      override: standardEditorsRegistry.get('slider').editor,\n      editor: standardEditorsRegistry.get('slider').editor,\n      process: numberOverrideProcessor,\n      shouldApply: (_config$shouldApply2 = config.shouldApply) !== null && _config$shouldApply2 !== void 0 ? _config$shouldApply2 : () => true,\n      settings: config.settings || {}\n    }));\n  }\n\n  addTextInput(config) {\n    var _config$shouldApply3;\n\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      override: standardEditorsRegistry.get('text').editor,\n      editor: standardEditorsRegistry.get('text').editor,\n      process: stringOverrideProcessor,\n      shouldApply: (_config$shouldApply3 = config.shouldApply) !== null && _config$shouldApply3 !== void 0 ? _config$shouldApply3 : () => true,\n      settings: config.settings || {}\n    }));\n  }\n\n  addSelect(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      override: standardEditorsRegistry.get('select').editor,\n      editor: standardEditorsRegistry.get('select').editor,\n      process: selectOverrideProcessor,\n      // ???\n      shouldApply: config.shouldApply ? config.shouldApply : () => true,\n      settings: config.settings || {\n        options: []\n      }\n    }));\n  }\n\n  addRadio(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      override: standardEditorsRegistry.get('radio').editor,\n      editor: standardEditorsRegistry.get('radio').editor,\n      process: selectOverrideProcessor,\n      // ???\n      shouldApply: config.shouldApply ? config.shouldApply : () => true,\n      settings: config.settings || {\n        options: []\n      }\n    }));\n  }\n\n  addBooleanSwitch(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('boolean').editor,\n      override: standardEditorsRegistry.get('boolean').editor,\n      process: booleanOverrideProcessor,\n      shouldApply: config.shouldApply ? config.shouldApply : () => true,\n      settings: config.settings || {}\n    }));\n  }\n\n  addColorPicker(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('color').editor,\n      override: standardEditorsRegistry.get('color').editor,\n      process: identityOverrideProcessor,\n      shouldApply: config.shouldApply ? config.shouldApply : () => true,\n      settings: config.settings || {}\n    }));\n  }\n\n  addUnitPicker(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('unit').editor,\n      override: standardEditorsRegistry.get('unit').editor,\n      process: unitOverrideProcessor,\n      shouldApply: config.shouldApply ? config.shouldApply : () => true,\n      settings: config.settings || {}\n    }));\n  }\n\n}\nexport class NestedPanelOptionsBuilder {\n  constructor(cfg) {\n    _defineProperty(this, \"path\", '');\n\n    _defineProperty(this, \"category\", void 0);\n\n    _defineProperty(this, \"defaultValue\", void 0);\n\n    _defineProperty(this, \"id\", 'nested-panel-options');\n\n    _defineProperty(this, \"name\", 'nested');\n\n    _defineProperty(this, \"editor\", () => null);\n\n    _defineProperty(this, \"getBuilder\", () => {\n      return this.cfg.build;\n    });\n\n    _defineProperty(this, \"getNestedValueAccess\", parent => {\n      const values = this.cfg.values;\n\n      if (values) {\n        return values(parent);\n      } // by default prefix the path\n\n\n      return {\n        getValue: path => parent.getValue(`${this.path}.${path}`),\n        onChange: (path, value) => parent.onChange(`${this.path}.${path}`, value)\n      };\n    });\n\n    this.cfg = cfg;\n    this.path = cfg.path;\n    this.category = cfg.category;\n    this.defaultValue = cfg.defaultValue;\n  }\n\n}\nexport function isNestedPanelOptions(item) {\n  return item.id === 'nested-panel-options';\n}\n/**\n * Fluent API for declarative creation of panel options\n */\n\nexport class PanelOptionsEditorBuilder extends OptionsUIRegistryBuilder {\n  addNestedOptions(opts) {\n    const s = new NestedPanelOptionsBuilder(opts);\n    return this.addCustomEditor(s);\n  }\n\n  addNumberInput(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('number').editor\n    }));\n  }\n\n  addSliderInput(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('slider').editor\n    }));\n  }\n\n  addTextInput(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('text').editor\n    }));\n  }\n\n  addStringArray(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('strings').editor\n    }));\n  }\n\n  addSelect(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('select').editor\n    }));\n  }\n\n  addMultiSelect(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('multi-select').editor\n    }));\n  }\n\n  addRadio(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('radio').editor\n    }));\n  }\n\n  addBooleanSwitch(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('boolean').editor\n    }));\n  }\n\n  addColorPicker(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('color').editor,\n      settings: config.settings || {}\n    }));\n  }\n\n  addTimeZonePicker(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('timezone').editor,\n      settings: config.settings || {}\n    }));\n  }\n\n  addUnitPicker(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('unit').editor\n    }));\n  }\n\n  addFieldNamePicker(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('field-name').editor\n    }));\n  }\n\n  addDashboardPicker(config) {\n    return this.addCustomEditor(Object.assign({}, config, {\n      id: config.path,\n      editor: standardEditorsRegistry.get('dashboard-uid').editor // added at runtime\n\n    }));\n  }\n\n}","map":{"version":3,"names":["numberOverrideProcessor","selectOverrideProcessor","stringOverrideProcessor","booleanOverrideProcessor","standardEditorsRegistry","identityOverrideProcessor","unitOverrideProcessor","OptionsUIRegistryBuilder","FieldConfigEditorBuilder","addNumberInput","config","addCustomEditor","id","path","override","get","editor","process","shouldApply","settings","addSliderInput","addTextInput","addSelect","options","addRadio","addBooleanSwitch","addColorPicker","addUnitPicker","NestedPanelOptionsBuilder","constructor","cfg","build","parent","values","getValue","onChange","value","category","defaultValue","isNestedPanelOptions","item","PanelOptionsEditorBuilder","addNestedOptions","opts","s","addStringArray","addMultiSelect","addTimeZonePicker","addFieldNamePicker","addDashboardPicker"],"sources":["/home/soula/grafana/packages/grafana-data/src/utils/OptionsUIBuilders.ts"],"sourcesContent":["import {\n  numberOverrideProcessor,\n  selectOverrideProcessor,\n  stringOverrideProcessor,\n  booleanOverrideProcessor,\n  standardEditorsRegistry,\n  SelectFieldConfigSettings,\n  StandardEditorProps,\n  StringFieldConfigSettings,\n  NumberFieldConfigSettings,\n  SliderFieldConfigSettings,\n  identityOverrideProcessor,\n  UnitFieldConfigSettings,\n  unitOverrideProcessor,\n  FieldNamePickerConfigSettings,\n  StandardEditorContext,\n} from '../field';\nimport { PanelOptionsSupplier } from '../panel/PanelPlugin';\nimport { OptionsEditorItem, OptionsUIRegistryBuilder } from '../types/OptionsUIRegistryBuilder';\nimport { FieldConfigEditorProps, FieldConfigPropertyItem, FieldConfigEditorConfig } from '../types/fieldOverrides';\nimport { PanelOptionsEditorConfig, PanelOptionsEditorItem } from '../types/panel';\n\n/**\n * Fluent API for declarative creation of field config option editors\n */\nexport class FieldConfigEditorBuilder<TOptions> extends OptionsUIRegistryBuilder<\n  TOptions,\n  FieldConfigEditorProps<any, any>,\n  FieldConfigPropertyItem<TOptions>\n> {\n  addNumberInput<TSettings>(config: FieldConfigEditorConfig<TOptions, TSettings & NumberFieldConfigSettings, number>) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      override: standardEditorsRegistry.get('number').editor as any,\n      editor: standardEditorsRegistry.get('number').editor as any,\n      process: numberOverrideProcessor,\n      shouldApply: config.shouldApply ?? (() => true),\n      settings: config.settings || {},\n    });\n  }\n\n  addSliderInput<TSettings>(config: FieldConfigEditorConfig<TOptions, TSettings & SliderFieldConfigSettings, number>) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      override: standardEditorsRegistry.get('slider').editor as any,\n      editor: standardEditorsRegistry.get('slider').editor as any,\n      process: numberOverrideProcessor,\n      shouldApply: config.shouldApply ?? (() => true),\n      settings: config.settings || {},\n    });\n  }\n\n  addTextInput<TSettings>(config: FieldConfigEditorConfig<TOptions, TSettings & StringFieldConfigSettings, string>) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      override: standardEditorsRegistry.get('text').editor as any,\n      editor: standardEditorsRegistry.get('text').editor as any,\n      process: stringOverrideProcessor,\n      shouldApply: config.shouldApply ?? (() => true),\n      settings: config.settings || {},\n    });\n  }\n\n  addSelect<TOption, TSettings extends SelectFieldConfigSettings<TOption>>(\n    config: FieldConfigEditorConfig<TOptions, TSettings, TOption>\n  ) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      override: standardEditorsRegistry.get('select').editor as any,\n      editor: standardEditorsRegistry.get('select').editor as any,\n      process: selectOverrideProcessor,\n      // ???\n      shouldApply: config.shouldApply ? config.shouldApply : () => true,\n      settings: config.settings || { options: [] },\n    });\n  }\n\n  addRadio<TOption, TSettings = any>(config: FieldConfigEditorConfig<TOptions, TSettings, TOption>) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      override: standardEditorsRegistry.get('radio').editor as any,\n      editor: standardEditorsRegistry.get('radio').editor as any,\n      process: selectOverrideProcessor,\n      // ???\n      shouldApply: config.shouldApply ? config.shouldApply : () => true,\n      settings: config.settings || { options: [] },\n    });\n  }\n\n  addBooleanSwitch<TSettings = any>(config: FieldConfigEditorConfig<TOptions, TSettings, boolean>) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('boolean').editor as any,\n      override: standardEditorsRegistry.get('boolean').editor as any,\n      process: booleanOverrideProcessor,\n      shouldApply: config.shouldApply ? config.shouldApply : () => true,\n      settings: config.settings || {},\n    });\n  }\n\n  addColorPicker<TSettings = any>(config: FieldConfigEditorConfig<TOptions, TSettings, string>) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('color').editor as any,\n      override: standardEditorsRegistry.get('color').editor as any,\n      process: identityOverrideProcessor,\n      shouldApply: config.shouldApply ? config.shouldApply : () => true,\n      settings: config.settings || {},\n    });\n  }\n\n  addUnitPicker<TSettings = any>(\n    config: FieldConfigEditorConfig<TOptions, TSettings & UnitFieldConfigSettings, string>\n  ) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('unit').editor as any,\n      override: standardEditorsRegistry.get('unit').editor as any,\n      process: unitOverrideProcessor,\n      shouldApply: config.shouldApply ? config.shouldApply : () => true,\n      settings: config.settings || {},\n    });\n  }\n}\n\nexport interface NestedValueAccess {\n  getValue: (path: string) => any;\n  onChange: (path: string, value: any) => void;\n  getContext?: (parent: StandardEditorContext<any, any>) => StandardEditorContext<any, any>;\n}\nexport interface NestedPanelOptions<TSub = any> {\n  path: string;\n  category?: string[];\n  defaultValue?: TSub;\n  build: PanelOptionsSupplier<TSub>;\n  values?: (parent: NestedValueAccess) => NestedValueAccess;\n}\n\nexport class NestedPanelOptionsBuilder<TSub = any> implements OptionsEditorItem<TSub, any, any, any> {\n  path = '';\n  category?: string[];\n  defaultValue?: TSub;\n  id = 'nested-panel-options';\n  name = 'nested';\n  editor = () => null;\n\n  constructor(public cfg: NestedPanelOptions<TSub>) {\n    this.path = cfg.path;\n    this.category = cfg.category;\n    this.defaultValue = cfg.defaultValue;\n  }\n\n  getBuilder = () => {\n    return this.cfg.build;\n  };\n\n  getNestedValueAccess = (parent: NestedValueAccess) => {\n    const values = this.cfg.values;\n    if (values) {\n      return values(parent);\n    }\n    // by default prefix the path\n    return {\n      getValue: (path: string) => parent.getValue(`${this.path}.${path}`),\n      onChange: (path: string, value: any) => parent.onChange(`${this.path}.${path}`, value),\n    };\n  };\n}\n\nexport function isNestedPanelOptions(item: any): item is NestedPanelOptionsBuilder {\n  return item.id === 'nested-panel-options';\n}\n\n/**\n * Fluent API for declarative creation of panel options\n */\nexport class PanelOptionsEditorBuilder<TOptions> extends OptionsUIRegistryBuilder<\n  TOptions,\n  StandardEditorProps,\n  PanelOptionsEditorItem<TOptions>\n> {\n  addNestedOptions<Sub>(opts: NestedPanelOptions<Sub>) {\n    const s = new NestedPanelOptionsBuilder<Sub>(opts);\n    return this.addCustomEditor(s);\n  }\n\n  addNumberInput<TSettings>(config: PanelOptionsEditorConfig<TOptions, TSettings & NumberFieldConfigSettings, number>) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('number').editor as any,\n    });\n  }\n\n  addSliderInput<TSettings>(config: PanelOptionsEditorConfig<TOptions, TSettings & SliderFieldConfigSettings, number>) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('slider').editor as any,\n    });\n  }\n\n  addTextInput<TSettings>(config: PanelOptionsEditorConfig<TOptions, TSettings & StringFieldConfigSettings, string>) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('text').editor as any,\n    });\n  }\n\n  addStringArray<TSettings>(\n    config: PanelOptionsEditorConfig<TOptions, TSettings & StringFieldConfigSettings, string[]>\n  ) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('strings').editor as any,\n    });\n  }\n\n  addSelect<TOption, TSettings extends SelectFieldConfigSettings<TOption>>(\n    config: PanelOptionsEditorConfig<TOptions, TSettings, TOption>\n  ) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('select').editor as any,\n    });\n  }\n\n  addMultiSelect<TOption, TSettings extends SelectFieldConfigSettings<TOption>>(\n    config: PanelOptionsEditorConfig<TOptions, TSettings, TOption>\n  ) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('multi-select').editor as any,\n    });\n  }\n\n  addRadio<TOption, TSettings extends SelectFieldConfigSettings<TOption>>(\n    config: PanelOptionsEditorConfig<TOptions, TSettings, TOption>\n  ) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('radio').editor as any,\n    });\n  }\n\n  addBooleanSwitch<TSettings = any>(config: PanelOptionsEditorConfig<TOptions, TSettings, boolean>) {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('boolean').editor as any,\n    });\n  }\n\n  addColorPicker<TSettings = any>(config: PanelOptionsEditorConfig<TOptions, TSettings, string>): this {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('color').editor as any,\n      settings: config.settings || {},\n    });\n  }\n\n  addTimeZonePicker<TSettings = any>(config: PanelOptionsEditorConfig<TOptions, TSettings, string>): this {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('timezone').editor as any,\n      settings: config.settings || {},\n    });\n  }\n\n  addUnitPicker<TSettings = any>(\n    config: PanelOptionsEditorConfig<TOptions, TSettings & UnitFieldConfigSettings, string>\n  ): this {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('unit').editor as any,\n    });\n  }\n\n  addFieldNamePicker<TSettings = any>(\n    config: PanelOptionsEditorConfig<TOptions, TSettings & FieldNamePickerConfigSettings, string>\n  ): this {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('field-name').editor as any,\n    });\n  }\n\n  addDashboardPicker<TSettings = any>(\n    config: PanelOptionsEditorConfig<TOptions, TSettings & FieldNamePickerConfigSettings, string>\n  ): this {\n    return this.addCustomEditor({\n      ...config,\n      id: config.path,\n      editor: standardEditorsRegistry.get('dashboard-uid').editor as any, // added at runtime\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}