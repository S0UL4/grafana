{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { monacoLanguageRegistry } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { withTheme2 } from '../../themes';\nimport { ReactMonacoEditorLazy } from './ReactMonacoEditorLazy';\nimport { registerSuggestions } from './suggestions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nclass UnthemedCodeEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"completionCancel\", void 0);\n\n    _defineProperty(this, \"monaco\", void 0);\n\n    _defineProperty(this, \"loadCustomLanguage\", () => {\n      const {\n        language\n      } = this.props;\n      const customLanguage = monacoLanguageRegistry.getIfExists(language);\n\n      if (customLanguage) {\n        return customLanguage.init();\n      }\n\n      return Promise.resolve();\n    });\n\n    _defineProperty(this, \"getEditorValue\", () => '');\n\n    _defineProperty(this, \"onBlur\", () => {\n      const {\n        onBlur\n      } = this.props;\n\n      if (onBlur) {\n        onBlur(this.getEditorValue());\n      }\n    });\n\n    _defineProperty(this, \"onSave\", () => {\n      const {\n        onSave\n      } = this.props;\n\n      if (onSave) {\n        onSave(this.getEditorValue());\n      }\n    });\n\n    _defineProperty(this, \"handleBeforeMount\", monaco => {\n      this.monaco = monaco;\n      const {\n        language,\n        getSuggestions,\n        onBeforeEditorMount\n      } = this.props;\n\n      if (getSuggestions) {\n        this.completionCancel = registerSuggestions(monaco, language, getSuggestions);\n      }\n\n      onBeforeEditorMount === null || onBeforeEditorMount === void 0 ? void 0 : onBeforeEditorMount(monaco);\n    });\n\n    _defineProperty(this, \"handleOnMount\", (editor, monaco) => {\n      const {\n        onEditorDidMount\n      } = this.props;\n\n      this.getEditorValue = () => editor.getValue();\n\n      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, this.onSave);\n      const languagePromise = this.loadCustomLanguage();\n\n      if (onEditorDidMount) {\n        languagePromise.then(() => onEditorDidMount(editor, monaco));\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.completionCancel) {\n      this.completionCancel.dispose();\n    }\n  }\n\n  componentDidUpdate(oldProps) {\n    const {\n      getSuggestions,\n      language\n    } = this.props;\n    const newLanguage = oldProps.language !== language;\n    const newGetSuggestions = oldProps.getSuggestions !== getSuggestions;\n\n    if (newGetSuggestions || newLanguage) {\n      if (this.completionCancel) {\n        this.completionCancel.dispose();\n      }\n\n      if (!this.monaco) {\n        console.warn('Monaco instance not loaded yet');\n        return;\n      }\n\n      if (getSuggestions) {\n        this.completionCancel = registerSuggestions(this.monaco, language, getSuggestions);\n      }\n    }\n\n    if (newLanguage) {\n      this.loadCustomLanguage();\n    }\n  }\n\n  render() {\n    var _this$props$value, _this$props$container;\n\n    const {\n      theme,\n      language,\n      width,\n      height,\n      showMiniMap,\n      showLineNumbers,\n      readOnly,\n      monacoOptions\n    } = this.props;\n    const value = (_this$props$value = this.props.value) !== null && _this$props$value !== void 0 ? _this$props$value : '';\n    const longText = value.length > 100;\n    const containerStyles = (_this$props$container = this.props.containerStyles) !== null && _this$props$container !== void 0 ? _this$props$container : getStyles(theme).container;\n    const options = {\n      wordWrap: 'off',\n      tabSize: 2,\n      codeLens: false,\n      contextmenu: false,\n      minimap: {\n        enabled: longText && showMiniMap,\n        renderCharacters: false\n      },\n      readOnly,\n      lineNumbersMinChars: 4,\n      lineDecorationsWidth: 1 * theme.spacing.gridSize,\n      overviewRulerBorder: false,\n      automaticLayout: true,\n      padding: {\n        top: 0.5 * theme.spacing.gridSize,\n        bottom: 0.5 * theme.spacing.gridSize\n      },\n      fixedOverflowWidgets: true // Ensures suggestions menu is drawn on top\n\n    };\n\n    if (!showLineNumbers) {\n      options.glyphMargin = false;\n      options.folding = false;\n      options.lineNumbers = 'off';\n      options.lineNumbersMinChars = 0;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: containerStyles,\n      onBlur: this.onBlur,\n      \"aria-label\": selectors.components.CodeEditor.container,\n      children: /*#__PURE__*/_jsx(ReactMonacoEditorLazy, {\n        width: width,\n        height: height,\n        language: language,\n        value: value,\n        options: Object.assign({}, options, monacoOptions !== null && monacoOptions !== void 0 ? monacoOptions : {}),\n        beforeMount: this.handleBeforeMount,\n        onMount: this.handleOnMount\n      })\n    });\n  }\n\n}\n\nexport const CodeEditor = withTheme2(UnthemedCodeEditor);\n\nconst getStyles = theme => {\n  return {\n    container: css`\n      border-radius: ${theme.shape.borderRadius()};\n      border: 1px solid ${theme.components.input.borderColor};\n    `\n  };\n};","map":{"version":3,"names":["css","React","monacoLanguageRegistry","selectors","withTheme2","ReactMonacoEditorLazy","registerSuggestions","UnthemedCodeEditor","PureComponent","constructor","props","language","customLanguage","getIfExists","init","Promise","resolve","onBlur","getEditorValue","onSave","monaco","getSuggestions","onBeforeEditorMount","completionCancel","editor","onEditorDidMount","getValue","addCommand","KeyMod","CtrlCmd","KeyCode","KeyS","languagePromise","loadCustomLanguage","then","componentWillUnmount","dispose","componentDidUpdate","oldProps","newLanguage","newGetSuggestions","console","warn","render","theme","width","height","showMiniMap","showLineNumbers","readOnly","monacoOptions","value","longText","length","containerStyles","getStyles","container","options","wordWrap","tabSize","codeLens","contextmenu","minimap","enabled","renderCharacters","lineNumbersMinChars","lineDecorationsWidth","spacing","gridSize","overviewRulerBorder","automaticLayout","padding","top","bottom","fixedOverflowWidgets","glyphMargin","folding","lineNumbers","components","CodeEditor","handleBeforeMount","handleOnMount","shape","borderRadius","input","borderColor"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Monaco/CodeEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport React from 'react';\n\nimport { GrafanaTheme2, monacoLanguageRegistry } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { withTheme2 } from '../../themes';\nimport { Themeable2 } from '../../types';\n\nimport { ReactMonacoEditorLazy } from './ReactMonacoEditorLazy';\nimport { registerSuggestions } from './suggestions';\nimport { CodeEditorProps, Monaco, MonacoEditor as MonacoEditorType, MonacoOptions } from './types';\n\ntype Props = CodeEditorProps & Themeable2;\n\nclass UnthemedCodeEditor extends React.PureComponent<Props> {\n  completionCancel?: monacoType.IDisposable;\n  monaco?: Monaco;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentWillUnmount() {\n    if (this.completionCancel) {\n      this.completionCancel.dispose();\n    }\n  }\n\n  componentDidUpdate(oldProps: Props) {\n    const { getSuggestions, language } = this.props;\n\n    const newLanguage = oldProps.language !== language;\n    const newGetSuggestions = oldProps.getSuggestions !== getSuggestions;\n\n    if (newGetSuggestions || newLanguage) {\n      if (this.completionCancel) {\n        this.completionCancel.dispose();\n      }\n\n      if (!this.monaco) {\n        console.warn('Monaco instance not loaded yet');\n        return;\n      }\n\n      if (getSuggestions) {\n        this.completionCancel = registerSuggestions(this.monaco, language, getSuggestions);\n      }\n    }\n\n    if (newLanguage) {\n      this.loadCustomLanguage();\n    }\n  }\n\n  loadCustomLanguage = () => {\n    const { language } = this.props;\n\n    const customLanguage = monacoLanguageRegistry.getIfExists(language);\n\n    if (customLanguage) {\n      return customLanguage.init();\n    }\n\n    return Promise.resolve();\n  };\n\n  // This is replaced with a real function when the actual editor mounts\n  getEditorValue = () => '';\n\n  onBlur = () => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(this.getEditorValue());\n    }\n  };\n\n  onSave = () => {\n    const { onSave } = this.props;\n    if (onSave) {\n      onSave(this.getEditorValue());\n    }\n  };\n\n  handleBeforeMount = (monaco: Monaco) => {\n    this.monaco = monaco;\n    const { language, getSuggestions, onBeforeEditorMount } = this.props;\n\n    if (getSuggestions) {\n      this.completionCancel = registerSuggestions(monaco, language, getSuggestions);\n    }\n\n    onBeforeEditorMount?.(monaco);\n  };\n\n  handleOnMount = (editor: MonacoEditorType, monaco: Monaco) => {\n    const { onEditorDidMount } = this.props;\n    this.getEditorValue = () => editor.getValue();\n\n    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, this.onSave);\n    const languagePromise = this.loadCustomLanguage();\n\n    if (onEditorDidMount) {\n      languagePromise.then(() => onEditorDidMount(editor, monaco));\n    }\n  };\n\n  render() {\n    const { theme, language, width, height, showMiniMap, showLineNumbers, readOnly, monacoOptions } = this.props;\n    const value = this.props.value ?? '';\n    const longText = value.length > 100;\n\n    const containerStyles = this.props.containerStyles ?? getStyles(theme).container;\n\n    const options: MonacoOptions = {\n      wordWrap: 'off',\n      tabSize: 2,\n      codeLens: false,\n      contextmenu: false,\n      minimap: {\n        enabled: longText && showMiniMap,\n        renderCharacters: false,\n      },\n\n      readOnly,\n      lineNumbersMinChars: 4,\n      lineDecorationsWidth: 1 * theme.spacing.gridSize,\n      overviewRulerBorder: false,\n      automaticLayout: true,\n      padding: {\n        top: 0.5 * theme.spacing.gridSize,\n        bottom: 0.5 * theme.spacing.gridSize,\n      },\n      fixedOverflowWidgets: true, // Ensures suggestions menu is drawn on top\n    };\n\n    if (!showLineNumbers) {\n      options.glyphMargin = false;\n      options.folding = false;\n      options.lineNumbers = 'off';\n      options.lineNumbersMinChars = 0;\n    }\n\n    return (\n      <div className={containerStyles} onBlur={this.onBlur} aria-label={selectors.components.CodeEditor.container}>\n        <ReactMonacoEditorLazy\n          width={width}\n          height={height}\n          language={language}\n          value={value}\n          options={{\n            ...options,\n            ...(monacoOptions ?? {}),\n          }}\n          beforeMount={this.handleBeforeMount}\n          onMount={this.handleOnMount}\n        />\n      </div>\n    );\n  }\n}\n\nexport const CodeEditor = withTheme2(UnthemedCodeEditor);\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      border-radius: ${theme.shape.borderRadius()};\n      border: 1px solid ${theme.components.input.borderColor};\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}