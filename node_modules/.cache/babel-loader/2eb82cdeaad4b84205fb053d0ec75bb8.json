{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { CodeEditor, stylesFactory, useTheme, variableSuggestionToCodeEditorSuggestion } from '@grafana/ui';\nimport { TextMode } from './models.gen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const TextPanelEditor = ({\n  value,\n  onChange,\n  context\n}) => {\n  const language = useMemo(() => {\n    var _context$options$mode, _context$options;\n\n    return (_context$options$mode = (_context$options = context.options) === null || _context$options === void 0 ? void 0 : _context$options.mode) !== null && _context$options$mode !== void 0 ? _context$options$mode : TextMode.Markdown;\n  }, [context]);\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  const getSuggestions = () => {\n    if (!context.getSuggestions) {\n      return [];\n    }\n\n    return context.getSuggestions().map(v => variableSuggestionToCodeEditorSuggestion(v));\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: cx(styles.editorBox),\n    children: /*#__PURE__*/_jsx(AutoSizer, {\n      disableHeight: true,\n      children: ({\n        width\n      }) => {\n        if (width === 0) {\n          return null;\n        }\n\n        return /*#__PURE__*/_jsx(CodeEditor, {\n          value: value,\n          onBlur: onChange,\n          onSave: onChange,\n          language: language,\n          width: width,\n          showMiniMap: false,\n          showLineNumbers: false,\n          height: \"500px\",\n          getSuggestions: getSuggestions\n        });\n      }\n    })\n  });\n};\nconst getStyles = stylesFactory(theme => ({\n  editorBox: css`\n    label: editorBox;\n    border: ${theme.border.width.sm} solid ${theme.colors.border2};\n    border-radius: ${theme.border.radius.sm};\n    margin: ${theme.spacing.xs} 0;\n    width: 100%;\n  `\n}));","map":{"version":3,"names":["css","cx","React","useMemo","AutoSizer","CodeEditor","stylesFactory","useTheme","variableSuggestionToCodeEditorSuggestion","TextMode","TextPanelEditor","value","onChange","context","language","options","mode","Markdown","theme","styles","getStyles","getSuggestions","map","v","editorBox","width","border","sm","colors","border2","radius","spacing","xs"],"sources":["/home/soula/grafana/public/app/plugins/panel/text/TextPanelEditor.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme, StandardEditorProps } from '@grafana/data';\nimport {\n  CodeEditor,\n  stylesFactory,\n  useTheme,\n  CodeEditorSuggestionItem,\n  variableSuggestionToCodeEditorSuggestion,\n} from '@grafana/ui';\n\nimport { PanelOptions, TextMode } from './models.gen';\n\nexport const TextPanelEditor: FC<StandardEditorProps<string, any, PanelOptions>> = ({ value, onChange, context }) => {\n  const language = useMemo(() => context.options?.mode ?? TextMode.Markdown, [context]);\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  const getSuggestions = (): CodeEditorSuggestionItem[] => {\n    if (!context.getSuggestions) {\n      return [];\n    }\n    return context.getSuggestions().map((v) => variableSuggestionToCodeEditorSuggestion(v));\n  };\n\n  return (\n    <div className={cx(styles.editorBox)}>\n      <AutoSizer disableHeight>\n        {({ width }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <CodeEditor\n              value={value}\n              onBlur={onChange}\n              onSave={onChange}\n              language={language}\n              width={width}\n              showMiniMap={false}\n              showLineNumbers={false}\n              height=\"500px\"\n              getSuggestions={getSuggestions}\n            />\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  editorBox: css`\n    label: editorBox;\n    border: ${theme.border.width.sm} solid ${theme.colors.border2};\n    border-radius: ${theme.border.radius.sm};\n    margin: ${theme.spacing.xs} 0;\n    width: 100%;\n  `,\n}));\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,OAAOC,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AAGA,SACEC,UADF,EAEEC,aAFF,EAGEC,QAHF,EAKEC,wCALF,QAMO,aANP;AAQA,SAAuBC,QAAvB,QAAuC,cAAvC;;AAEA,OAAO,MAAMC,eAAmE,GAAG,CAAC;EAAEC,KAAF;EAASC,QAAT;EAAmBC;AAAnB,CAAD,KAAkC;EACnH,MAAMC,QAAQ,GAAGX,OAAO,CAAC;IAAA;;IAAA,oDAAMU,OAAO,CAACE,OAAd,qDAAM,iBAAiBC,IAAvB,yEAA+BP,QAAQ,CAACQ,QAAxC;EAAA,CAAD,EAAmD,CAACJ,OAAD,CAAnD,CAAxB;EACA,MAAMK,KAAK,GAAGX,QAAQ,EAAtB;EACA,MAAMY,MAAM,GAAGC,SAAS,CAACF,KAAD,CAAxB;;EAEA,MAAMG,cAAc,GAAG,MAAkC;IACvD,IAAI,CAACR,OAAO,CAACQ,cAAb,EAA6B;MAC3B,OAAO,EAAP;IACD;;IACD,OAAOR,OAAO,CAACQ,cAAR,GAAyBC,GAAzB,CAA8BC,CAAD,IAAOf,wCAAwC,CAACe,CAAD,CAA5E,CAAP;EACD,CALD;;EAOA,oBACE;IAAK,SAAS,EAAEtB,EAAE,CAACkB,MAAM,CAACK,SAAR,CAAlB;IAAA,uBACE,KAAC,SAAD;MAAW,aAAa,MAAxB;MAAA,UACG,CAAC;QAAEC;MAAF,CAAD,KAAe;QACd,IAAIA,KAAK,KAAK,CAAd,EAAiB;UACf,OAAO,IAAP;QACD;;QACD,oBACE,KAAC,UAAD;UACE,KAAK,EAAEd,KADT;UAEE,MAAM,EAAEC,QAFV;UAGE,MAAM,EAAEA,QAHV;UAIE,QAAQ,EAAEE,QAJZ;UAKE,KAAK,EAAEW,KALT;UAME,WAAW,EAAE,KANf;UAOE,eAAe,EAAE,KAPnB;UAQE,MAAM,EAAC,OART;UASE,cAAc,EAAEJ;QATlB,EADF;MAaD;IAlBH;EADF,EADF;AAwBD,CApCM;AAsCP,MAAMD,SAAS,GAAGd,aAAa,CAAEY,KAAD,KAA0B;EACxDM,SAAS,EAAExB,GAAI;AACjB;AACA,cAAckB,KAAK,CAACQ,MAAN,CAAaD,KAAb,CAAmBE,EAAG,UAAST,KAAK,CAACU,MAAN,CAAaC,OAAQ;AAClE,qBAAqBX,KAAK,CAACQ,MAAN,CAAaI,MAAb,CAAoBH,EAAG;AAC5C,cAAcT,KAAK,CAACa,OAAN,CAAcC,EAAG;AAC/B;AACA;AAP0D,CAA1B,CAAD,CAA/B"},"metadata":{},"sourceType":"module"}