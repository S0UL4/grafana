{"ast":null,"code":"var _td, _td2;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { dateTimeFormat } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport { Form, Legend } from '@grafana/ui';\nimport { clearLoadedDashboard, importDashboard } from '../state/actions';\nimport { DashboardSource } from '../state/reducers';\nimport { ImportDashboardForm } from './ImportDashboardForm';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst IMPORT_FINISHED_EVENT_NAME = 'dashboard_import_imported';\n\nconst mapStateToProps = state => {\n  const searchObj = locationService.getSearchObject();\n  return {\n    dashboard: state.importDashboard.dashboard,\n    meta: state.importDashboard.meta,\n    source: state.importDashboard.source,\n    inputs: state.importDashboard.inputs,\n    folder: searchObj.folderId ? {\n      id: Number(searchObj.folderId)\n    } : {\n      id: 0\n    }\n  };\n};\n\nconst mapDispatchToProps = {\n  clearLoadedDashboard,\n  importDashboard\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nclass ImportDashboardOverviewUnConnected extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      uidReset: false\n    });\n\n    _defineProperty(this, \"onSubmit\", form => {\n      reportInteraction(IMPORT_FINISHED_EVENT_NAME);\n      this.props.importDashboard(form);\n    });\n\n    _defineProperty(this, \"onCancel\", () => {\n      this.props.clearLoadedDashboard();\n    });\n\n    _defineProperty(this, \"onUidReset\", () => {\n      this.setState({\n        uidReset: true\n      });\n    });\n  }\n\n  render() {\n    const {\n      dashboard,\n      inputs,\n      meta,\n      source,\n      folder\n    } = this.props;\n    const {\n      uidReset\n    } = this.state;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [source === DashboardSource.Gcom && /*#__PURE__*/_jsxs(\"div\", {\n        style: {\n          marginBottom: '24px'\n        },\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(Legend, {\n            children: [\"Importing dashboard from\", ' ', /*#__PURE__*/_jsx(\"a\", {\n              href: `https://grafana.com/dashboards/${dashboard.gnetId}`,\n              className: \"external-link\",\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: \"Grafana.com\"\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"table\", {\n          className: \"filter-table form-inline\",\n          children: /*#__PURE__*/_jsxs(\"tbody\", {\n            children: [/*#__PURE__*/_jsxs(\"tr\", {\n              children: [_td || (_td = /*#__PURE__*/_jsx(\"td\", {\n                children: \"Published by\"\n              })), /*#__PURE__*/_jsx(\"td\", {\n                children: meta.orgName\n              })]\n            }), /*#__PURE__*/_jsxs(\"tr\", {\n              children: [_td2 || (_td2 = /*#__PURE__*/_jsx(\"td\", {\n                children: \"Updated on\"\n              })), /*#__PURE__*/_jsx(\"td\", {\n                children: dateTimeFormat(meta.updatedAt)\n              })]\n            })]\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Form, {\n        onSubmit: this.onSubmit,\n        defaultValues: Object.assign({}, dashboard, {\n          constants: [],\n          dataSources: [],\n          elements: [],\n          folder: folder\n        }),\n        validateOnMount: true,\n        validateFieldsOnMount: ['title', 'uid'],\n        validateOn: \"onChange\",\n        children: ({\n          register,\n          errors,\n          control,\n          watch,\n          getValues\n        }) => /*#__PURE__*/_jsx(ImportDashboardForm, {\n          register: register,\n          errors: errors,\n          control: control,\n          getValues: getValues,\n          uidReset: uidReset,\n          inputs: inputs,\n          onCancel: this.onCancel,\n          onUidReset: this.onUidReset,\n          onSubmit: this.onSubmit,\n          watch: watch,\n          initialFolderId: folder.id\n        })\n      })]\n    });\n  }\n\n}\n\nexport const ImportDashboardOverview = connector(ImportDashboardOverviewUnConnected);\nImportDashboardOverview.displayName = 'ImportDashboardOverview';","map":{"version":3,"names":["React","PureComponent","connect","dateTimeFormat","locationService","reportInteraction","Form","Legend","clearLoadedDashboard","importDashboard","DashboardSource","ImportDashboardForm","IMPORT_FINISHED_EVENT_NAME","mapStateToProps","state","searchObj","getSearchObject","dashboard","meta","source","inputs","folder","folderId","id","Number","mapDispatchToProps","connector","ImportDashboardOverviewUnConnected","uidReset","form","props","setState","render","Gcom","marginBottom","gnetId","orgName","updatedAt","onSubmit","constants","dataSources","elements","register","errors","control","watch","getValues","onCancel","onUidReset","ImportDashboardOverview","displayName"],"sources":["/home/soula/grafana/public/app/features/manage-dashboards/components/ImportDashboardOverview.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { dateTimeFormat } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport { Form, Legend } from '@grafana/ui';\nimport { StoreState } from 'app/types';\n\nimport { clearLoadedDashboard, importDashboard } from '../state/actions';\nimport { DashboardSource, ImportDashboardDTO } from '../state/reducers';\n\nimport { ImportDashboardForm } from './ImportDashboardForm';\n\nconst IMPORT_FINISHED_EVENT_NAME = 'dashboard_import_imported';\n\nconst mapStateToProps = (state: StoreState) => {\n  const searchObj = locationService.getSearchObject();\n\n  return {\n    dashboard: state.importDashboard.dashboard,\n    meta: state.importDashboard.meta,\n    source: state.importDashboard.source,\n    inputs: state.importDashboard.inputs,\n    folder: searchObj.folderId ? { id: Number(searchObj.folderId) } : { id: 0 },\n  };\n};\n\nconst mapDispatchToProps = {\n  clearLoadedDashboard,\n  importDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector>;\n\ninterface State {\n  uidReset: boolean;\n}\n\nclass ImportDashboardOverviewUnConnected extends PureComponent<Props, State> {\n  state: State = {\n    uidReset: false,\n  };\n\n  onSubmit = (form: ImportDashboardDTO) => {\n    reportInteraction(IMPORT_FINISHED_EVENT_NAME);\n\n    this.props.importDashboard(form);\n  };\n\n  onCancel = () => {\n    this.props.clearLoadedDashboard();\n  };\n\n  onUidReset = () => {\n    this.setState({ uidReset: true });\n  };\n\n  render() {\n    const { dashboard, inputs, meta, source, folder } = this.props;\n    const { uidReset } = this.state;\n\n    return (\n      <>\n        {source === DashboardSource.Gcom && (\n          <div style={{ marginBottom: '24px' }}>\n            <div>\n              <Legend>\n                Importing dashboard from{' '}\n                <a\n                  href={`https://grafana.com/dashboards/${dashboard.gnetId}`}\n                  className=\"external-link\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Grafana.com\n                </a>\n              </Legend>\n            </div>\n            <table className=\"filter-table form-inline\">\n              <tbody>\n                <tr>\n                  <td>Published by</td>\n                  <td>{meta.orgName}</td>\n                </tr>\n                <tr>\n                  <td>Updated on</td>\n                  <td>{dateTimeFormat(meta.updatedAt)}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        )}\n        <Form\n          onSubmit={this.onSubmit}\n          defaultValues={{ ...dashboard, constants: [], dataSources: [], elements: [], folder: folder }}\n          validateOnMount\n          validateFieldsOnMount={['title', 'uid']}\n          validateOn=\"onChange\"\n        >\n          {({ register, errors, control, watch, getValues }) => (\n            <ImportDashboardForm\n              register={register}\n              errors={errors}\n              control={control}\n              getValues={getValues}\n              uidReset={uidReset}\n              inputs={inputs}\n              onCancel={this.onCancel}\n              onUidReset={this.onUidReset}\n              onSubmit={this.onSubmit}\n              watch={watch}\n              initialFolderId={folder.id}\n            />\n          )}\n        </Form>\n      </>\n    );\n  }\n}\n\nexport const ImportDashboardOverview = connector(ImportDashboardOverviewUnConnected);\nImportDashboardOverview.displayName = 'ImportDashboardOverview';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}