{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { processAclItems } from 'app/core/utils/acl';\nimport { DashboardInitPhase } from 'app/types';\nimport { DashboardModel } from './DashboardModel';\nexport const initialState = {\n  initPhase: DashboardInitPhase.NotStarted,\n  getModel: () => null,\n  permissions: [],\n  initError: null\n};\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    loadDashboardPermissions: (state, action) => {\n      state.permissions = processAclItems(action.payload);\n    },\n    dashboardInitFetching: state => {\n      state.initPhase = DashboardInitPhase.Fetching;\n    },\n    dashboardInitServices: state => {\n      state.initPhase = DashboardInitPhase.Services;\n    },\n    dashboardInitCompleted: (state, action) => {\n      state.getModel = () => action.payload;\n\n      state.initPhase = DashboardInitPhase.Completed;\n    },\n    dashboardInitFailed: (state, action) => {\n      state.initPhase = DashboardInitPhase.Failed;\n      state.initError = action.payload;\n\n      state.getModel = () => {\n        return new DashboardModel({\n          title: 'Dashboard init failed'\n        }, {\n          canSave: false,\n          canEdit: false\n        });\n      };\n    },\n    cleanUpDashboard: state => {\n      state.initPhase = DashboardInitPhase.NotStarted;\n      state.initError = null;\n\n      state.getModel = () => null;\n    },\n    addPanel: (state, action) => {//state.panels[action.payload.id] = { pluginId: action.payload.type };\n    }\n  }\n});\nexport const {\n  loadDashboardPermissions,\n  dashboardInitFetching,\n  dashboardInitFailed,\n  dashboardInitCompleted,\n  dashboardInitServices,\n  cleanUpDashboard,\n  addPanel\n} = dashboardSlice.actions;\nexport const dashboardReducer = dashboardSlice.reducer;\nexport default {\n  dashboard: dashboardReducer\n};","map":{"version":3,"names":["createSlice","processAclItems","DashboardInitPhase","DashboardModel","initialState","initPhase","NotStarted","getModel","permissions","initError","dashboardSlice","name","reducers","loadDashboardPermissions","state","action","payload","dashboardInitFetching","Fetching","dashboardInitServices","Services","dashboardInitCompleted","Completed","dashboardInitFailed","Failed","title","canSave","canEdit","cleanUpDashboard","addPanel","actions","dashboardReducer","reducer","dashboard"],"sources":["/home/soula/grafana/public/app/features/dashboard/state/reducers.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { AngularComponent } from '@grafana/runtime';\nimport { processAclItems } from 'app/core/utils/acl';\nimport { DashboardAclDTO, DashboardInitError, DashboardInitPhase, DashboardState } from 'app/types';\n\nimport { DashboardModel } from './DashboardModel';\nimport { PanelModel } from './PanelModel';\n\nexport const initialState: DashboardState = {\n  initPhase: DashboardInitPhase.NotStarted,\n  getModel: () => null,\n  permissions: [],\n  initError: null,\n};\n\nconst dashboardSlice = createSlice({\n  name: 'dashboard',\n  initialState,\n  reducers: {\n    loadDashboardPermissions: (state, action: PayloadAction<DashboardAclDTO[]>) => {\n      state.permissions = processAclItems(action.payload);\n    },\n    dashboardInitFetching: (state) => {\n      state.initPhase = DashboardInitPhase.Fetching;\n    },\n    dashboardInitServices: (state) => {\n      state.initPhase = DashboardInitPhase.Services;\n    },\n    dashboardInitCompleted: (state, action: PayloadAction<DashboardModel>) => {\n      state.getModel = () => action.payload;\n      state.initPhase = DashboardInitPhase.Completed;\n    },\n    dashboardInitFailed: (state, action: PayloadAction<DashboardInitError>) => {\n      state.initPhase = DashboardInitPhase.Failed;\n      state.initError = action.payload;\n      state.getModel = () => {\n        return new DashboardModel({ title: 'Dashboard init failed' }, { canSave: false, canEdit: false });\n      };\n    },\n    cleanUpDashboard: (state) => {\n      state.initPhase = DashboardInitPhase.NotStarted;\n      state.initError = null;\n      state.getModel = () => null;\n    },\n    addPanel: (state, action: PayloadAction<PanelModel>) => {\n      //state.panels[action.payload.id] = { pluginId: action.payload.type };\n    },\n  },\n});\n\nexport interface PanelModelAndPluginReadyPayload {\n  panelId: number;\n  plugin: PanelPlugin;\n}\n\nexport interface SetPanelAngularComponentPayload {\n  panelId: number;\n  angularComponent: AngularComponent | null;\n}\n\nexport interface SetPanelInstanceStatePayload {\n  panelId: number;\n  value: any;\n}\n\nexport const {\n  loadDashboardPermissions,\n  dashboardInitFetching,\n  dashboardInitFailed,\n  dashboardInitCompleted,\n  dashboardInitServices,\n  cleanUpDashboard,\n  addPanel,\n} = dashboardSlice.actions;\n\nexport const dashboardReducer = dashboardSlice.reducer;\n\nexport default {\n  dashboard: dashboardReducer,\n};\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAIA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAA8CC,kBAA9C,QAAwF,WAAxF;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AAGA,OAAO,MAAMC,YAA4B,GAAG;EAC1CC,SAAS,EAAEH,kBAAkB,CAACI,UADY;EAE1CC,QAAQ,EAAE,MAAM,IAF0B;EAG1CC,WAAW,EAAE,EAH6B;EAI1CC,SAAS,EAAE;AAJ+B,CAArC;AAOP,MAAMC,cAAc,GAAGV,WAAW,CAAC;EACjCW,IAAI,EAAE,WAD2B;EAEjCP,YAFiC;EAGjCQ,QAAQ,EAAE;IACRC,wBAAwB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAqD;MAC7ED,KAAK,CAACN,WAAN,GAAoBP,eAAe,CAACc,MAAM,CAACC,OAAR,CAAnC;IACD,CAHO;IAIRC,qBAAqB,EAAGH,KAAD,IAAW;MAChCA,KAAK,CAACT,SAAN,GAAkBH,kBAAkB,CAACgB,QAArC;IACD,CANO;IAORC,qBAAqB,EAAGL,KAAD,IAAW;MAChCA,KAAK,CAACT,SAAN,GAAkBH,kBAAkB,CAACkB,QAArC;IACD,CATO;IAURC,sBAAsB,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAkD;MACxED,KAAK,CAACP,QAAN,GAAiB,MAAMQ,MAAM,CAACC,OAA9B;;MACAF,KAAK,CAACT,SAAN,GAAkBH,kBAAkB,CAACoB,SAArC;IACD,CAbO;IAcRC,mBAAmB,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAsD;MACzED,KAAK,CAACT,SAAN,GAAkBH,kBAAkB,CAACsB,MAArC;MACAV,KAAK,CAACL,SAAN,GAAkBM,MAAM,CAACC,OAAzB;;MACAF,KAAK,CAACP,QAAN,GAAiB,MAAM;QACrB,OAAO,IAAIJ,cAAJ,CAAmB;UAAEsB,KAAK,EAAE;QAAT,CAAnB,EAAuD;UAAEC,OAAO,EAAE,KAAX;UAAkBC,OAAO,EAAE;QAA3B,CAAvD,CAAP;MACD,CAFD;IAGD,CApBO;IAqBRC,gBAAgB,EAAGd,KAAD,IAAW;MAC3BA,KAAK,CAACT,SAAN,GAAkBH,kBAAkB,CAACI,UAArC;MACAQ,KAAK,CAACL,SAAN,GAAkB,IAAlB;;MACAK,KAAK,CAACP,QAAN,GAAiB,MAAM,IAAvB;IACD,CAzBO;IA0BRsB,QAAQ,EAAE,CAACf,KAAD,EAAQC,MAAR,KAA8C,CACtD;IACD;EA5BO;AAHuB,CAAD,CAAlC;AAkDA,OAAO,MAAM;EACXF,wBADW;EAEXI,qBAFW;EAGXM,mBAHW;EAIXF,sBAJW;EAKXF,qBALW;EAMXS,gBANW;EAOXC;AAPW,IAQTnB,cAAc,CAACoB,OARZ;AAUP,OAAO,MAAMC,gBAAgB,GAAGrB,cAAc,CAACsB,OAAxC;AAEP,eAAe;EACbC,SAAS,EAAEF;AADE,CAAf"},"metadata":{},"sourceType":"module"}