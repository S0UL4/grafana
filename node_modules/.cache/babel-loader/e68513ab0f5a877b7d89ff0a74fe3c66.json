{"ast":null,"code":"import { noop } from 'lodash';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { CoreApp } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const ExpressionEditor = ({\n  value,\n  onChange,\n  dataSourceName\n}) => {\n  var _dataSource$component, _dataSource$component2;\n\n  const {\n    mapToValue,\n    mapToQuery\n  } = useQueryMappers(dataSourceName);\n  const [query, setQuery] = useState(mapToQuery({\n    refId: 'A',\n    hide: false\n  }, value));\n  const {\n    error,\n    loading,\n    value: dataSource\n  } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n  const onChangeQuery = useCallback(query => {\n    setQuery(query);\n    onChange(mapToValue(query));\n  }, [onChange, mapToValue]);\n\n  if (loading || (dataSource === null || dataSource === void 0 ? void 0 : dataSource.name) !== dataSourceName) {\n    return null;\n  }\n\n  if (error || !dataSource || !(dataSource !== null && dataSource !== void 0 && (_dataSource$component = dataSource.components) !== null && _dataSource$component !== void 0 && _dataSource$component.QueryEditor)) {\n    const errorMessage = (error === null || error === void 0 ? void 0 : error.message) || 'Data source plugin does not export any Query Editor component';\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [\"Could not load query editor due to: \", errorMessage]\n    });\n  }\n\n  const QueryEditor = dataSource === null || dataSource === void 0 ? void 0 : (_dataSource$component2 = dataSource.components) === null || _dataSource$component2 === void 0 ? void 0 : _dataSource$component2.QueryEditor;\n  return /*#__PURE__*/_jsx(QueryEditor, {\n    query: query,\n    queries: [query],\n    app: CoreApp.CloudAlerting,\n    onChange: onChangeQuery,\n    onRunQuery: noop,\n    datasource: dataSource\n  });\n};\n\nfunction useQueryMappers(dataSourceName) {\n  return useMemo(() => {\n    const settings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n    switch (settings === null || settings === void 0 ? void 0 : settings.type) {\n      case 'loki':\n      case 'prometheus':\n        return {\n          mapToValue: query => query.expr,\n          mapToQuery: (existing, value) => Object.assign({}, existing, {\n            expr: value\n          })\n        };\n\n      default:\n        throw new Error(`${dataSourceName} is not supported as an expression editor`);\n    }\n  }, [dataSourceName]);\n}","map":{"version":3,"names":["noop","React","useCallback","useMemo","useState","useAsync","CoreApp","getDataSourceSrv","ExpressionEditor","value","onChange","dataSourceName","mapToValue","mapToQuery","useQueryMappers","query","setQuery","refId","hide","error","loading","dataSource","get","onChangeQuery","name","components","QueryEditor","errorMessage","message","CloudAlerting","settings","getInstanceSettings","type","expr","existing","Error"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/ExpressionEditor.tsx"],"sourcesContent":["import { noop } from 'lodash';\nimport React, { FC, useCallback, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp, DataQuery } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\n\nexport interface ExpressionEditorProps {\n  value?: string;\n  onChange: (value: string) => void;\n  dataSourceName: string; // will be a prometheus or loki datasource\n}\n\nexport const ExpressionEditor: FC<ExpressionEditorProps> = ({ value, onChange, dataSourceName }) => {\n  const { mapToValue, mapToQuery } = useQueryMappers(dataSourceName);\n  const [query, setQuery] = useState(mapToQuery({ refId: 'A', hide: false }, value));\n  const {\n    error,\n    loading,\n    value: dataSource,\n  } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n\n  const onChangeQuery = useCallback(\n    (query: DataQuery) => {\n      setQuery(query);\n      onChange(mapToValue(query));\n    },\n    [onChange, mapToValue]\n  );\n\n  if (loading || dataSource?.name !== dataSourceName) {\n    return null;\n  }\n\n  if (error || !dataSource || !dataSource?.components?.QueryEditor) {\n    const errorMessage = error?.message || 'Data source plugin does not export any Query Editor component';\n    return <div>Could not load query editor due to: {errorMessage}</div>;\n  }\n\n  const QueryEditor = dataSource?.components?.QueryEditor;\n\n  return (\n    <QueryEditor\n      query={query}\n      queries={[query]}\n      app={CoreApp.CloudAlerting}\n      onChange={onChangeQuery}\n      onRunQuery={noop}\n      datasource={dataSource}\n    />\n  );\n};\n\ntype QueryMappers<T extends DataQuery = DataQuery> = {\n  mapToValue: (query: T) => string;\n  mapToQuery: (existing: T, value: string | undefined) => T;\n};\n\nfunction useQueryMappers(dataSourceName: string): QueryMappers {\n  return useMemo(() => {\n    const settings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n    switch (settings?.type) {\n      case 'loki':\n      case 'prometheus':\n        return {\n          mapToValue: (query: DataQuery) => (query as PromQuery | LokiQuery).expr,\n          mapToQuery: (existing: DataQuery, value: string | undefined) => ({ ...existing, expr: value }),\n        };\n      default:\n        throw new Error(`${dataSourceName} is not supported as an expression editor`);\n    }\n  }, [dataSourceName]);\n}\n"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,OAAOC,KAAP,IAAoBC,WAApB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,SAASC,OAAT,QAAmC,eAAnC;AACA,SAASC,gBAAT,QAAiC,kBAAjC;;;AAUA,OAAO,MAAMC,gBAA2C,GAAG,CAAC;EAAEC,KAAF;EAASC,QAAT;EAAmBC;AAAnB,CAAD,KAAyC;EAAA;;EAClG,MAAM;IAAEC,UAAF;IAAcC;EAAd,IAA6BC,eAAe,CAACH,cAAD,CAAlD;EACA,MAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAACS,UAAU,CAAC;IAAEI,KAAK,EAAE,GAAT;IAAcC,IAAI,EAAE;EAApB,CAAD,EAA8BT,KAA9B,CAAX,CAAlC;EACA,MAAM;IACJU,KADI;IAEJC,OAFI;IAGJX,KAAK,EAAEY;EAHH,IAIFhB,QAAQ,CAAC,MAAM;IACjB,OAAOE,gBAAgB,GAAGe,GAAnB,CAAuBX,cAAvB,CAAP;EACD,CAFW,EAET,CAACA,cAAD,CAFS,CAJZ;EAQA,MAAMY,aAAa,GAAGrB,WAAW,CAC9Ba,KAAD,IAAsB;IACpBC,QAAQ,CAACD,KAAD,CAAR;IACAL,QAAQ,CAACE,UAAU,CAACG,KAAD,CAAX,CAAR;EACD,CAJ8B,EAK/B,CAACL,QAAD,EAAWE,UAAX,CAL+B,CAAjC;;EAQA,IAAIQ,OAAO,IAAI,CAAAC,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEG,IAAZ,MAAqBb,cAApC,EAAoD;IAClD,OAAO,IAAP;EACD;;EAED,IAAIQ,KAAK,IAAI,CAACE,UAAV,IAAwB,EAACA,UAAD,aAACA,UAAD,wCAACA,UAAU,CAAEI,UAAb,kDAAC,sBAAwBC,WAAzB,CAA5B,EAAkE;IAChE,MAAMC,YAAY,GAAG,CAAAR,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAES,OAAP,KAAkB,+DAAvC;IACA,oBAAO;MAAA,mDAA0CD,YAA1C;IAAA,EAAP;EACD;;EAED,MAAMD,WAAW,GAAGL,UAAH,aAAGA,UAAH,iDAAGA,UAAU,CAAEI,UAAf,2DAAG,uBAAwBC,WAA5C;EAEA,oBACE,KAAC,WAAD;IACE,KAAK,EAAEX,KADT;IAEE,OAAO,EAAE,CAACA,KAAD,CAFX;IAGE,GAAG,EAAET,OAAO,CAACuB,aAHf;IAIE,QAAQ,EAAEN,aAJZ;IAKE,UAAU,EAAEvB,IALd;IAME,UAAU,EAAEqB;EANd,EADF;AAUD,CAxCM;;AA+CP,SAASP,eAAT,CAAyBH,cAAzB,EAA+D;EAC7D,OAAOR,OAAO,CAAC,MAAM;IACnB,MAAM2B,QAAQ,GAAGvB,gBAAgB,GAAGwB,mBAAnB,CAAuCpB,cAAvC,CAAjB;;IAEA,QAAQmB,QAAR,aAAQA,QAAR,uBAAQA,QAAQ,CAAEE,IAAlB;MACE,KAAK,MAAL;MACA,KAAK,YAAL;QACE,OAAO;UACLpB,UAAU,EAAGG,KAAD,IAAuBA,KAAD,CAAiCkB,IAD9D;UAELpB,UAAU,EAAE,CAACqB,QAAD,EAAsBzB,KAAtB,uBAA0DyB,QAA1D;YAAoED,IAAI,EAAExB;UAA1E;QAFP,CAAP;;MAIF;QACE,MAAM,IAAI0B,KAAJ,CAAW,GAAExB,cAAe,2CAA5B,CAAN;IARJ;EAUD,CAba,EAaX,CAACA,cAAD,CAbW,CAAd;AAcD"},"metadata":{},"sourceType":"module"}