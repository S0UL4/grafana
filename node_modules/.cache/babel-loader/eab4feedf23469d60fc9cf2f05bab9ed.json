{"ast":null,"code":"const _excluded = [\"ref\"],\n      _excluded2 = [\"ref\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Field, InputControl } from '@grafana/ui';\nimport { RuleFormType } from '../../../types/rule-form';\nimport { ExpressionEditor } from '../ExpressionEditor';\nimport { QueryEditor } from '../QueryEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const Query = () => {\n  var _errors$expression, _errors$expression2;\n\n  const {\n    control,\n    watch,\n    formState: {\n      errors\n    }\n  } = useFormContext();\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n  const isGrafanaManagedType = type === RuleFormType.grafana;\n  const isCloudAlertRuleType = type === RuleFormType.cloudAlerting;\n  const isRecordingRuleType = type === RuleFormType.cloudRecording;\n  const showCloudExpressionEditor = (isRecordingRuleType || isCloudAlertRuleType) && dataSourceName;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [showCloudExpressionEditor && /*#__PURE__*/_jsx(Field, {\n      error: (_errors$expression = errors.expression) === null || _errors$expression === void 0 ? void 0 : _errors$expression.message,\n      invalid: !!((_errors$expression2 = errors.expression) !== null && _errors$expression2 !== void 0 && _errors$expression2.message),\n      children: /*#__PURE__*/_jsx(InputControl, {\n        name: \"expression\",\n        render: _ref => {\n          let {} = _ref,\n              field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n          return /*#__PURE__*/_jsx(ExpressionEditor, Object.assign({}, field, {\n            dataSourceName: dataSourceName\n          }));\n        },\n        control: control,\n        rules: {\n          required: {\n            value: true,\n            message: 'A valid expression is required'\n          }\n        }\n      })\n    }), isGrafanaManagedType && /*#__PURE__*/_jsx(Field, {\n      invalid: !!errors.queries,\n      error: !!errors.queries && 'Must provide at least one valid query.' || undefined,\n      children: /*#__PURE__*/_jsx(InputControl, {\n        name: \"queries\",\n        render: _ref2 => {\n          let {} = _ref2,\n              field = _objectWithoutPropertiesLoose(_ref2.field, _excluded2);\n\n          return /*#__PURE__*/_jsx(QueryEditor, Object.assign({}, field));\n        },\n        control: control,\n        rules: {\n          validate: queries => Array.isArray(queries) && !!queries.length\n        }\n      })\n    })]\n  });\n};","map":{"version":3,"names":["React","useFormContext","Field","InputControl","RuleFormType","ExpressionEditor","QueryEditor","Query","control","watch","formState","errors","type","dataSourceName","isGrafanaManagedType","grafana","isCloudAlertRuleType","cloudAlerting","isRecordingRuleType","cloudRecording","showCloudExpressionEditor","expression","message","field","required","value","queries","undefined","validate","Array","isArray","length"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/Query.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Field, InputControl } from '@grafana/ui';\n\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { ExpressionEditor } from '../ExpressionEditor';\nimport { QueryEditor } from '../QueryEditor';\n\nexport const Query: FC = () => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  const isGrafanaManagedType = type === RuleFormType.grafana;\n  const isCloudAlertRuleType = type === RuleFormType.cloudAlerting;\n  const isRecordingRuleType = type === RuleFormType.cloudRecording;\n\n  const showCloudExpressionEditor = (isRecordingRuleType || isCloudAlertRuleType) && dataSourceName;\n\n  return (\n    <div>\n      {/* This is the PromQL Editor for Cloud rules and recording rules */}\n      {showCloudExpressionEditor && (\n        <Field error={errors.expression?.message} invalid={!!errors.expression?.message}>\n          <InputControl\n            name=\"expression\"\n            render={({ field: { ref, ...field } }) => {\n              return <ExpressionEditor {...field} dataSourceName={dataSourceName} />;\n            }}\n            control={control}\n            rules={{\n              required: { value: true, message: 'A valid expression is required' },\n            }}\n          />\n        </Field>\n      )}\n\n      {/* This is the editor for Grafana managed rules */}\n      {isGrafanaManagedType && (\n        <Field\n          invalid={!!errors.queries}\n          error={(!!errors.queries && 'Must provide at least one valid query.') || undefined}\n        >\n          <InputControl\n            name=\"queries\"\n            render={({ field: { ref, ...field } }) => <QueryEditor {...field} />}\n            control={control}\n            rules={{\n              validate: (queries) => Array.isArray(queries) && !!queries.length,\n            }}\n          />\n        </Field>\n      )}\n    </div>\n  );\n};\n"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA,SAASC,KAAT,EAAgBC,YAAhB,QAAoC,aAApC;AAEA,SAASC,YAAT,QAA6C,0BAA7C;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,WAAT,QAA4B,gBAA5B;;;AAEA,OAAO,MAAMC,KAAS,GAAG,MAAM;EAAA;;EAC7B,MAAM;IACJC,OADI;IAEJC,KAFI;IAGJC,SAAS,EAAE;MAAEC;IAAF;EAHP,IAIFV,cAAc,EAJlB;EAMA,MAAMW,IAAI,GAAGH,KAAK,CAAC,MAAD,CAAlB;EACA,MAAMI,cAAc,GAAGJ,KAAK,CAAC,gBAAD,CAA5B;EAEA,MAAMK,oBAAoB,GAAGF,IAAI,KAAKR,YAAY,CAACW,OAAnD;EACA,MAAMC,oBAAoB,GAAGJ,IAAI,KAAKR,YAAY,CAACa,aAAnD;EACA,MAAMC,mBAAmB,GAAGN,IAAI,KAAKR,YAAY,CAACe,cAAlD;EAEA,MAAMC,yBAAyB,GAAG,CAACF,mBAAmB,IAAIF,oBAAxB,KAAiDH,cAAnF;EAEA,oBACE;IAAA,WAEGO,yBAAyB,iBACxB,KAAC,KAAD;MAAO,KAAK,wBAAET,MAAM,CAACU,UAAT,uDAAE,mBAAmBC,OAAjC;MAA0C,OAAO,EAAE,CAAC,yBAACX,MAAM,CAACU,UAAR,gDAAC,oBAAmBC,OAApB,CAApD;MAAA,uBACE,KAAC,YAAD;QACE,IAAI,EAAC,YADP;QAEE,MAAM,EAAE,QAAkC;UAAA,IAAjC,EAAiC;UAAA,IAAdC,KAAc,sCAA/BA,KAA+B;;UACxC,oBAAO,KAAC,gBAAD,oBAAsBA,KAAtB;YAA6B,cAAc,EAAEV;UAA7C,GAAP;QACD,CAJH;QAKE,OAAO,EAAEL,OALX;QAME,KAAK,EAAE;UACLgB,QAAQ,EAAE;YAAEC,KAAK,EAAE,IAAT;YAAeH,OAAO,EAAE;UAAxB;QADL;MANT;IADF,EAHJ,EAkBGR,oBAAoB,iBACnB,KAAC,KAAD;MACE,OAAO,EAAE,CAAC,CAACH,MAAM,CAACe,OADpB;MAEE,KAAK,EAAG,CAAC,CAACf,MAAM,CAACe,OAAT,IAAoB,wCAArB,IAAkEC,SAF3E;MAAA,uBAIE,KAAC,YAAD;QACE,IAAI,EAAC,SADP;QAEE,MAAM,EAAE;UAAA,IAAC,EAAD;UAAA,IAAoBJ,KAApB,uCAAGA,KAAH;;UAAA,oBAAkC,KAAC,WAAD,oBAAiBA,KAAjB,EAAlC;QAAA,CAFV;QAGE,OAAO,EAAEf,OAHX;QAIE,KAAK,EAAE;UACLoB,QAAQ,EAAGF,OAAD,IAAaG,KAAK,CAACC,OAAN,CAAcJ,OAAd,KAA0B,CAAC,CAACA,OAAO,CAACK;QADtD;MAJT;IAJF,EAnBJ;EAAA,EADF;AAoCD,CApDM"},"metadata":{},"sourceType":"module"}