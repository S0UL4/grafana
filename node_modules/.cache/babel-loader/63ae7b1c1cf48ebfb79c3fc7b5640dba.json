{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createChangeHandler, createResetHandler, PasswordFieldEnum } from '../../../features/datasources/utils/passwordHandlers';\nexport class MssqlConfigCtrl {\n  /** @ngInject */\n  constructor($scope) {\n    _defineProperty(this, \"onPasswordReset\", void 0);\n\n    _defineProperty(this, \"onPasswordChange\", void 0);\n\n    _defineProperty(this, \"showUserCredentials\", false);\n\n    _defineProperty(this, \"showTlsConfig\", false);\n\n    _defineProperty(this, \"showCertificateConfig\", false);\n\n    this.current = $scope.ctrl.current;\n    this.current.jsonData.encrypt = this.current.jsonData.encrypt || 'false';\n    this.current.jsonData.sslRootCertFile = this.current.jsonData.sslRootCertFile || '';\n    this.current.jsonData.tlsSkipVerify = this.current.jsonData.tlsSkipVerify || false;\n    this.current.jsonData.serverName = this.current.jsonData.serverName || '';\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType || 'SQL Server Authentication';\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n    this.onAuthenticationTypeChange();\n    this.onEncryptChange();\n  }\n\n  onAuthenticationTypeChange() {\n    // This is using the fallback in https://github.com/denisenkom/go-mssqldb to use Windows Auth if login/user id is empty.\n    if (this.current.jsonData.authenticationType === 'Windows Authentication') {\n      this.current.user = '';\n      this.current.password = '';\n    }\n\n    this.showUserCredentials = this.current.jsonData.authenticationType !== 'Windows Authentication';\n  }\n\n  onEncryptChange() {\n    this.showTlsConfig = this.current.jsonData.encrypt === 'true';\n    this.showCertificateConfig = this.showTlsConfig && this.current.jsonData.tlsSkipVerify === false;\n  }\n\n}\nMssqlConfigCtrl.$inject = [\"$scope\"];\n\n_defineProperty(MssqlConfigCtrl, \"templateUrl\", 'partials/config.html');","map":{"version":3,"names":["createChangeHandler","createResetHandler","PasswordFieldEnum","MssqlConfigCtrl","constructor","$scope","current","ctrl","jsonData","encrypt","sslRootCertFile","tlsSkipVerify","serverName","authenticationType","onPasswordReset","Password","onPasswordChange","onAuthenticationTypeChange","onEncryptChange","user","password","showUserCredentials","showTlsConfig","showCertificateConfig"],"sources":["/home/soula/grafana/public/app/plugins/datasource/mssql/config_ctrl.ts"],"sourcesContent":["import {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\n\nexport class MssqlConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  // Set through angular bindings\n  declare current: any;\n\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n  showUserCredentials = false;\n  showTlsConfig = false;\n  showCertificateConfig = false;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.current = $scope.ctrl.current;\n    this.current.jsonData.encrypt = this.current.jsonData.encrypt || 'false';\n    this.current.jsonData.sslRootCertFile = this.current.jsonData.sslRootCertFile || '';\n    this.current.jsonData.tlsSkipVerify = this.current.jsonData.tlsSkipVerify || false;\n    this.current.jsonData.serverName = this.current.jsonData.serverName || '';\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType || 'SQL Server Authentication';\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n    this.onAuthenticationTypeChange();\n    this.onEncryptChange();\n  }\n\n  onAuthenticationTypeChange() {\n    // This is using the fallback in https://github.com/denisenkom/go-mssqldb to use Windows Auth if login/user id is empty.\n    if (this.current.jsonData.authenticationType === 'Windows Authentication') {\n      this.current.user = '';\n      this.current.password = '';\n    }\n\n    this.showUserCredentials = this.current.jsonData.authenticationType !== 'Windows Authentication';\n  }\n\n  onEncryptChange() {\n    this.showTlsConfig = this.current.jsonData.encrypt === 'true';\n    this.showCertificateConfig = this.showTlsConfig && this.current.jsonData.tlsSkipVerify === false;\n  }\n}\n"],"mappings":";;AAAA,SACEA,mBADF,EAEEC,kBAFF,EAGEC,iBAHF,QAIO,sDAJP;AAMA,OAAO,MAAMC,eAAN,CAAsB;EAY3B;EACAC,WAAW,CAACC,MAAD,EAAc;IAAA;;IAAA;;IAAA,6CALH,KAKG;;IAAA,uCAJT,KAIS;;IAAA,+CAHD,KAGC;;IACvB,KAAKC,OAAL,GAAeD,MAAM,CAACE,IAAP,CAAYD,OAA3B;IACA,KAAKA,OAAL,CAAaE,QAAb,CAAsBC,OAAtB,GAAgC,KAAKH,OAAL,CAAaE,QAAb,CAAsBC,OAAtB,IAAiC,OAAjE;IACA,KAAKH,OAAL,CAAaE,QAAb,CAAsBE,eAAtB,GAAwC,KAAKJ,OAAL,CAAaE,QAAb,CAAsBE,eAAtB,IAAyC,EAAjF;IACA,KAAKJ,OAAL,CAAaE,QAAb,CAAsBG,aAAtB,GAAsC,KAAKL,OAAL,CAAaE,QAAb,CAAsBG,aAAtB,IAAuC,KAA7E;IACA,KAAKL,OAAL,CAAaE,QAAb,CAAsBI,UAAtB,GAAmC,KAAKN,OAAL,CAAaE,QAAb,CAAsBI,UAAtB,IAAoC,EAAvE;IACA,KAAKN,OAAL,CAAaE,QAAb,CAAsBK,kBAAtB,GAA2C,KAAKP,OAAL,CAAaE,QAAb,CAAsBK,kBAAtB,IAA4C,2BAAvF;IACA,KAAKC,eAAL,GAAuBb,kBAAkB,CAAC,IAAD,EAAOC,iBAAiB,CAACa,QAAzB,CAAzC;IACA,KAAKC,gBAAL,GAAwBhB,mBAAmB,CAAC,IAAD,EAAOE,iBAAiB,CAACa,QAAzB,CAA3C;IACA,KAAKE,0BAAL;IACA,KAAKC,eAAL;EACD;;EAEDD,0BAA0B,GAAG;IAC3B;IACA,IAAI,KAAKX,OAAL,CAAaE,QAAb,CAAsBK,kBAAtB,KAA6C,wBAAjD,EAA2E;MACzE,KAAKP,OAAL,CAAaa,IAAb,GAAoB,EAApB;MACA,KAAKb,OAAL,CAAac,QAAb,GAAwB,EAAxB;IACD;;IAED,KAAKC,mBAAL,GAA2B,KAAKf,OAAL,CAAaE,QAAb,CAAsBK,kBAAtB,KAA6C,wBAAxE;EACD;;EAEDK,eAAe,GAAG;IAChB,KAAKI,aAAL,GAAqB,KAAKhB,OAAL,CAAaE,QAAb,CAAsBC,OAAtB,KAAkC,MAAvD;IACA,KAAKc,qBAAL,GAA6B,KAAKD,aAAL,IAAsB,KAAKhB,OAAL,CAAaE,QAAb,CAAsBG,aAAtB,KAAwC,KAA3F;EACD;;AAvC0B;;;gBAAhBR,e,iBACU,sB"},"metadata":{},"sourceType":"module"}