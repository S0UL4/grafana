{"ast":null,"code":"import { FieldType, reduceField, ReducerID } from '@grafana/data';\n/**\n * Find the min and max time that covers all data\n */\n\nexport function getDataTimeRange(frames) {\n  const range = {\n    from: Number.MAX_SAFE_INTEGER,\n    to: Number.MIN_SAFE_INTEGER\n  };\n  let found = false;\n  const reducers = [ReducerID.min, ReducerID.max];\n\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.time) {\n        const calcs = reduceField({\n          field,\n          reducers\n        });\n        range.from = Math.min(range.from, calcs[ReducerID.min]);\n        range.to = Math.max(range.to, calcs[ReducerID.max]);\n        found = true;\n      }\n    }\n  }\n\n  return found ? range : undefined;\n} // Check wether event is LegacyGraphHoverEvent\n\nexport function isLegacyGraphHoverEvent(event) {\n  return event.hasOwnProperty('pos');\n}","map":{"version":3,"names":["FieldType","reduceField","ReducerID","getDataTimeRange","frames","range","from","Number","MAX_SAFE_INTEGER","to","MIN_SAFE_INTEGER","found","reducers","min","max","frame","field","fields","type","time","calcs","Math","undefined","isLegacyGraphHoverEvent","event","hasOwnProperty"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/utils.ts"],"sourcesContent":["import {\n  AbsoluteTimeRange,\n  DataFrame,\n  FieldType,\n  LegacyGraphHoverEventPayload,\n  reduceField,\n  ReducerID,\n} from '@grafana/data';\n\n/**\n * Find the min and max time that covers all data\n */\nexport function getDataTimeRange(frames: DataFrame[]): AbsoluteTimeRange | undefined {\n  const range: AbsoluteTimeRange = {\n    from: Number.MAX_SAFE_INTEGER,\n    to: Number.MIN_SAFE_INTEGER,\n  };\n  let found = false;\n  const reducers = [ReducerID.min, ReducerID.max];\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.time) {\n        const calcs = reduceField({ field, reducers });\n        range.from = Math.min(range.from, calcs[ReducerID.min]);\n        range.to = Math.max(range.to, calcs[ReducerID.max]);\n        found = true;\n      }\n    }\n  }\n  return found ? range : undefined;\n}\n\n// Check wether event is LegacyGraphHoverEvent\nexport function isLegacyGraphHoverEvent(event: any): event is LegacyGraphHoverEventPayload {\n  return event.hasOwnProperty('pos');\n}\n"],"mappings":"AAAA,SAGEA,SAHF,EAKEC,WALF,EAMEC,SANF,QAOO,eAPP;AASA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,MAA1B,EAA8E;EACnF,MAAMC,KAAwB,GAAG;IAC/BC,IAAI,EAAEC,MAAM,CAACC,gBADkB;IAE/BC,EAAE,EAAEF,MAAM,CAACG;EAFoB,CAAjC;EAIA,IAAIC,KAAK,GAAG,KAAZ;EACA,MAAMC,QAAQ,GAAG,CAACV,SAAS,CAACW,GAAX,EAAgBX,SAAS,CAACY,GAA1B,CAAjB;;EACA,KAAK,MAAMC,KAAX,IAAoBX,MAApB,EAA4B;IAC1B,KAAK,MAAMY,KAAX,IAAoBD,KAAK,CAACE,MAA1B,EAAkC;MAChC,IAAID,KAAK,CAACE,IAAN,KAAelB,SAAS,CAACmB,IAA7B,EAAmC;QACjC,MAAMC,KAAK,GAAGnB,WAAW,CAAC;UAAEe,KAAF;UAASJ;QAAT,CAAD,CAAzB;QACAP,KAAK,CAACC,IAAN,GAAae,IAAI,CAACR,GAAL,CAASR,KAAK,CAACC,IAAf,EAAqBc,KAAK,CAAClB,SAAS,CAACW,GAAX,CAA1B,CAAb;QACAR,KAAK,CAACI,EAAN,GAAWY,IAAI,CAACP,GAAL,CAAST,KAAK,CAACI,EAAf,EAAmBW,KAAK,CAAClB,SAAS,CAACY,GAAX,CAAxB,CAAX;QACAH,KAAK,GAAG,IAAR;MACD;IACF;EACF;;EACD,OAAOA,KAAK,GAAGN,KAAH,GAAWiB,SAAvB;AACD,C,CAED;;AACA,OAAO,SAASC,uBAAT,CAAiCC,KAAjC,EAAoF;EACzF,OAAOA,KAAK,CAACC,cAAN,CAAqB,KAArB,CAAP;AACD"},"metadata":{},"sourceType":"module"}