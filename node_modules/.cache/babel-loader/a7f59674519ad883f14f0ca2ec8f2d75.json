{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { languages as prismLanguages } from 'prismjs';\nimport React from 'react';\nimport { reportInteraction } from '@grafana/runtime';\nimport { SlatePrism, QueryField, BracesPlugin, DOMUtil, Icon } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { escapeLabelValueInSelector, shouldRefreshLabels } from '../language_utils';\nimport { LokiLabelBrowser } from './LokiLabelBrowser';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst LAST_USED_LABELS_KEY = 'grafana.datasources.loki.browser.labels';\n\nfunction getChooserText(hasSyntax, hasLogLabels) {\n  if (!hasSyntax) {\n    return 'Loading labels...';\n  }\n\n  if (!hasLogLabels) {\n    return '(No logs found)';\n  }\n\n  return 'Log browser';\n}\n\nfunction willApplySuggestion(suggestion, {\n  typeaheadContext,\n  typeaheadText\n}) {\n  // Modify suggestion based on context\n  switch (typeaheadContext) {\n    case 'context-labels':\n      {\n        const nextChar = DOMUtil.getNextCharacter();\n\n        if (!nextChar || nextChar === '}' || nextChar === ',') {\n          suggestion += '=';\n        }\n\n        break;\n      }\n\n    case 'context-label-values':\n      {\n        // Always add quotes and remove existing ones instead\n        let suggestionModified = '';\n\n        if (!typeaheadText.match(/^(!?=~?\"|\")/)) {\n          suggestionModified = '\"';\n        }\n\n        suggestionModified += escapeLabelValueInSelector(suggestion, typeaheadText);\n\n        if (DOMUtil.getNextCharacter() !== '\"') {\n          suggestionModified += '\"';\n        }\n\n        suggestion = suggestionModified;\n        break;\n      }\n\n    default:\n  }\n\n  return suggestion;\n}\n\nexport class LokiQueryField extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"plugins\", void 0);\n\n    _defineProperty(this, \"_isMounted\", false);\n\n    _defineProperty(this, \"onChangeLabelBrowser\", selector => {\n      this.onChangeQuery(selector, true);\n      this.setState({\n        labelBrowserVisible: false\n      });\n    });\n\n    _defineProperty(this, \"onChangeQuery\", (value, override) => {\n      // Send text change to parent\n      const {\n        query,\n        onChange,\n        onRunQuery\n      } = this.props;\n\n      if (onChange) {\n        const nextQuery = Object.assign({}, query, {\n          expr: value\n        });\n        onChange(nextQuery);\n\n        if (override && onRunQuery) {\n          onRunQuery();\n        }\n      }\n    });\n\n    _defineProperty(this, \"onClickChooserButton\", () => {\n      if (!this.state.labelBrowserVisible) {\n        reportInteraction('grafana_loki_log_browser_opened', {\n          app: this.props.app\n        });\n      } else {\n        reportInteraction('grafana_loki_log_browser_closed', {\n          app: this.props.app,\n          closeType: 'logBrowserButton'\n        });\n      }\n\n      this.setState(state => ({\n        labelBrowserVisible: !state.labelBrowserVisible\n      }));\n    });\n\n    _defineProperty(this, \"onTypeahead\", async typeahead => {\n      const {\n        datasource\n      } = this.props;\n\n      if (!datasource.languageProvider) {\n        return {\n          suggestions: []\n        };\n      }\n\n      const lokiLanguageProvider = datasource.languageProvider;\n      const {\n        history\n      } = this.props;\n      const {\n        prefix,\n        text,\n        value,\n        wrapperClasses,\n        labelKey\n      } = typeahead;\n      const result = await lokiLanguageProvider.provideCompletionItems({\n        text,\n        value,\n        prefix,\n        wrapperClasses,\n        labelKey\n      }, {\n        history\n      });\n      return result;\n    });\n\n    this.state = {\n      labelsLoaded: false,\n      labelBrowserVisible: false\n    };\n    this.plugins = [BracesPlugin(), SlatePrism({\n      onlyIn: node => node.object === 'block' && node.type === 'code_block',\n      getSyntax: node => 'logql'\n    }, Object.assign({}, prismLanguages, {\n      logql: this.props.datasource.languageProvider.getSyntax()\n    }))];\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await this.props.datasource.languageProvider.start();\n\n    if (this._isMounted) {\n      this.setState({\n        labelsLoaded: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      range,\n      datasource: {\n        languageProvider\n      }\n    } = this.props;\n    const refreshLabels = shouldRefreshLabels(range, prevProps.range); // We want to refresh labels when range changes (we round up intervals to a minute)\n\n    if (refreshLabels) {\n      languageProvider.fetchLabels();\n    }\n  }\n\n  render() {\n    const {\n      ExtraFieldElement,\n      query,\n      app,\n      datasource,\n      placeholder = 'Enter a Loki query (run with Shift+Enter)'\n    } = this.props;\n    const {\n      labelsLoaded,\n      labelBrowserVisible\n    } = this.state;\n    const lokiLanguageProvider = datasource.languageProvider;\n    const cleanText = datasource.languageProvider ? lokiLanguageProvider.cleanText : undefined;\n    const hasLogLabels = lokiLanguageProvider.getLabelKeys().length > 0;\n    const chooserText = getChooserText(labelsLoaded, hasLogLabels);\n    const buttonDisabled = !(labelsLoaded && hasLogLabels);\n    return /*#__PURE__*/_jsx(LocalStorageValueProvider, {\n      storageKey: LAST_USED_LABELS_KEY,\n      defaultValue: [],\n      children: (lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: \"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\",\n            \"data-testid\": this.props['data-testid'],\n            children: [/*#__PURE__*/_jsxs(\"button\", {\n              className: \"gf-form-label query-keyword pointer\",\n              onClick: this.onClickChooserButton,\n              disabled: buttonDisabled,\n              children: [chooserText, /*#__PURE__*/_jsx(Icon, {\n                name: labelBrowserVisible ? 'angle-down' : 'angle-right'\n              })]\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: \"gf-form gf-form--grow flex-shrink-1 min-width-15\",\n              children: /*#__PURE__*/_jsx(QueryField, {\n                additionalPlugins: this.plugins,\n                cleanText: cleanText,\n                query: query.expr,\n                onTypeahead: this.onTypeahead,\n                onWillApplySuggestion: willApplySuggestion,\n                onChange: this.onChangeQuery,\n                onBlur: this.props.onBlur,\n                onRunQuery: this.props.onRunQuery,\n                placeholder: placeholder,\n                portalOrigin: \"loki\"\n              })\n            })]\n          }), labelBrowserVisible && /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form\",\n            children: /*#__PURE__*/_jsx(LokiLabelBrowser, {\n              languageProvider: lokiLanguageProvider,\n              onChange: this.onChangeLabelBrowser,\n              lastUsedLabels: lastUsedLabels || [],\n              storeLastUsedLabels: onLastUsedLabelsSave,\n              deleteLastUsedLabels: onLastUsedLabelsDelete,\n              app: app\n            })\n          }), ExtraFieldElement]\n        });\n      }\n    });\n  }\n\n}","map":{"version":3,"names":["languages","prismLanguages","React","reportInteraction","SlatePrism","QueryField","BracesPlugin","DOMUtil","Icon","LocalStorageValueProvider","escapeLabelValueInSelector","shouldRefreshLabels","LokiLabelBrowser","LAST_USED_LABELS_KEY","getChooserText","hasSyntax","hasLogLabels","willApplySuggestion","suggestion","typeaheadContext","typeaheadText","nextChar","getNextCharacter","suggestionModified","match","LokiQueryField","PureComponent","constructor","props","selector","onChangeQuery","setState","labelBrowserVisible","value","override","query","onChange","onRunQuery","nextQuery","expr","state","app","closeType","typeahead","datasource","languageProvider","suggestions","lokiLanguageProvider","history","prefix","text","wrapperClasses","labelKey","result","provideCompletionItems","labelsLoaded","plugins","onlyIn","node","object","type","getSyntax","logql","componentDidMount","_isMounted","start","componentWillUnmount","componentDidUpdate","prevProps","range","refreshLabels","fetchLabels","render","ExtraFieldElement","placeholder","cleanText","undefined","getLabelKeys","length","chooserText","buttonDisabled","lastUsedLabels","onLastUsedLabelsSave","onLastUsedLabelsDelete","onClickChooserButton","onTypeahead","onBlur","onChangeLabelBrowser"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/components/LokiQueryField.tsx"],"sourcesContent":["import { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { ReactNode } from 'react';\nimport { Plugin, Node } from 'slate';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  SlatePrism,\n  TypeaheadOutput,\n  SuggestionsState,\n  QueryField,\n  TypeaheadInput,\n  BracesPlugin,\n  DOMUtil,\n  Icon,\n} from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\n\nimport { LokiDatasource } from '../datasource';\nimport LokiLanguageProvider from '../language_provider';\nimport { escapeLabelValueInSelector, shouldRefreshLabels } from '../language_utils';\nimport { LokiQuery, LokiOptions } from '../types';\n\nimport { LokiLabelBrowser } from './LokiLabelBrowser';\n\nconst LAST_USED_LABELS_KEY = 'grafana.datasources.loki.browser.labels';\n\nfunction getChooserText(hasSyntax: boolean, hasLogLabels: boolean) {\n  if (!hasSyntax) {\n    return 'Loading labels...';\n  }\n  if (!hasLogLabels) {\n    return '(No logs found)';\n  }\n  return 'Log browser';\n}\n\nfunction willApplySuggestion(suggestion: string, { typeaheadContext, typeaheadText }: SuggestionsState): string {\n  // Modify suggestion based on context\n  switch (typeaheadContext) {\n    case 'context-labels': {\n      const nextChar = DOMUtil.getNextCharacter();\n      if (!nextChar || nextChar === '}' || nextChar === ',') {\n        suggestion += '=';\n      }\n      break;\n    }\n\n    case 'context-label-values': {\n      // Always add quotes and remove existing ones instead\n      let suggestionModified = '';\n\n      if (!typeaheadText.match(/^(!?=~?\"|\")/)) {\n        suggestionModified = '\"';\n      }\n\n      suggestionModified += escapeLabelValueInSelector(suggestion, typeaheadText);\n\n      if (DOMUtil.getNextCharacter() !== '\"') {\n        suggestionModified += '\"';\n      }\n\n      suggestion = suggestionModified;\n\n      break;\n    }\n\n    default:\n  }\n\n  return suggestion;\n}\n\nexport interface LokiQueryFieldProps extends QueryEditorProps<LokiDatasource, LokiQuery, LokiOptions> {\n  ExtraFieldElement?: ReactNode;\n  placeholder?: string;\n  'data-testid'?: string;\n}\n\ninterface LokiQueryFieldState {\n  labelsLoaded: boolean;\n  labelBrowserVisible: boolean;\n}\n\nexport class LokiQueryField extends React.PureComponent<LokiQueryFieldProps, LokiQueryFieldState> {\n  plugins: Plugin[];\n  _isMounted = false;\n\n  constructor(props: LokiQueryFieldProps) {\n    super(props);\n\n    this.state = { labelsLoaded: false, labelBrowserVisible: false };\n\n    this.plugins = [\n      BracesPlugin(),\n      SlatePrism(\n        {\n          onlyIn: (node: Node) => node.object === 'block' && node.type === 'code_block',\n          getSyntax: (node: Node) => 'logql',\n        },\n        { ...(prismLanguages as LanguageMap), logql: this.props.datasource.languageProvider.getSyntax() }\n      ),\n    ];\n  }\n\n  async componentDidMount() {\n    this._isMounted = true;\n    await this.props.datasource.languageProvider.start();\n    if (this._isMounted) {\n      this.setState({ labelsLoaded: true });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  componentDidUpdate(prevProps: LokiQueryFieldProps) {\n    const {\n      range,\n      datasource: { languageProvider },\n    } = this.props;\n    const refreshLabels = shouldRefreshLabels(range, prevProps.range);\n    // We want to refresh labels when range changes (we round up intervals to a minute)\n    if (refreshLabels) {\n      languageProvider.fetchLabels();\n    }\n  }\n\n  onChangeLabelBrowser = (selector: string) => {\n    this.onChangeQuery(selector, true);\n    this.setState({ labelBrowserVisible: false });\n  };\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  onClickChooserButton = () => {\n    if (!this.state.labelBrowserVisible) {\n      reportInteraction('grafana_loki_log_browser_opened', {\n        app: this.props.app,\n      });\n    } else {\n      reportInteraction('grafana_loki_log_browser_closed', {\n        app: this.props.app,\n        closeType: 'logBrowserButton',\n      });\n    }\n    this.setState((state) => ({ labelBrowserVisible: !state.labelBrowserVisible }));\n  };\n\n  onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const { datasource } = this.props;\n\n    if (!datasource.languageProvider) {\n      return { suggestions: [] };\n    }\n\n    const lokiLanguageProvider = datasource.languageProvider as LokiLanguageProvider;\n    const { history } = this.props;\n    const { prefix, text, value, wrapperClasses, labelKey } = typeahead;\n\n    const result = await lokiLanguageProvider.provideCompletionItems(\n      { text, value, prefix, wrapperClasses, labelKey },\n      { history }\n    );\n    return result;\n  };\n\n  render() {\n    const {\n      ExtraFieldElement,\n      query,\n      app,\n      datasource,\n      placeholder = 'Enter a Loki query (run with Shift+Enter)',\n    } = this.props;\n\n    const { labelsLoaded, labelBrowserVisible } = this.state;\n    const lokiLanguageProvider = datasource.languageProvider as LokiLanguageProvider;\n    const cleanText = datasource.languageProvider ? lokiLanguageProvider.cleanText : undefined;\n    const hasLogLabels = lokiLanguageProvider.getLabelKeys().length > 0;\n    const chooserText = getChooserText(labelsLoaded, hasLogLabels);\n    const buttonDisabled = !(labelsLoaded && hasLogLabels);\n\n    return (\n      <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n        {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n          return (\n            <>\n              <div\n                className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n                data-testid={this.props['data-testid']}\n              >\n                <button\n                  className=\"gf-form-label query-keyword pointer\"\n                  onClick={this.onClickChooserButton}\n                  disabled={buttonDisabled}\n                >\n                  {chooserText}\n                  <Icon name={labelBrowserVisible ? 'angle-down' : 'angle-right'} />\n                </button>\n                <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n                  <QueryField\n                    additionalPlugins={this.plugins}\n                    cleanText={cleanText}\n                    query={query.expr}\n                    onTypeahead={this.onTypeahead}\n                    onWillApplySuggestion={willApplySuggestion}\n                    onChange={this.onChangeQuery}\n                    onBlur={this.props.onBlur}\n                    onRunQuery={this.props.onRunQuery}\n                    placeholder={placeholder}\n                    portalOrigin=\"loki\"\n                  />\n                </div>\n              </div>\n              {labelBrowserVisible && (\n                <div className=\"gf-form\">\n                  <LokiLabelBrowser\n                    languageProvider={lokiLanguageProvider}\n                    onChange={this.onChangeLabelBrowser}\n                    lastUsedLabels={lastUsedLabels || []}\n                    storeLastUsedLabels={onLastUsedLabelsSave}\n                    deleteLastUsedLabels={onLastUsedLabelsDelete}\n                    app={app}\n                  />\n                </div>\n              )}\n\n              {ExtraFieldElement}\n            </>\n          );\n        }}\n      </LocalStorageValueProvider>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}