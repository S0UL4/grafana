{"ast":null,"code":"import React, { useCallback, useEffect, useRef } from 'react';\nimport { CodeEditor } from '@grafana/ui';\nimport { Deferred } from 'app/core/utils/deferred';\nimport { setKustoQuery } from './setQueryValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst QueryField = ({\n  query,\n  datasource,\n  onQueryChange\n}) => {\n  var _query$azureLogAnalyt2, _query$azureLogAnalyt3, _query$azureLogAnalyt4;\n\n  const monacoPromiseRef = useRef();\n\n  function getPromise() {\n    if (!monacoPromiseRef.current) {\n      monacoPromiseRef.current = new Deferred();\n    }\n\n    return monacoPromiseRef.current.promise;\n  }\n\n  useEffect(() => {\n    var _query$azureLogAnalyt;\n\n    if (!((_query$azureLogAnalyt = query.azureLogAnalytics) !== null && _query$azureLogAnalyt !== void 0 && _query$azureLogAnalyt.resource)) {\n      return;\n    }\n\n    const promises = [datasource.azureLogAnalyticsDatasource.getKustoSchema(query.azureLogAnalytics.resource), getPromise()]; // the kusto schema call might fail, but its okay for that to happen silently\n\n    Promise.all(promises).then(([schema, {\n      monaco,\n      editor\n    }]) => {\n      const languages = monaco.languages;\n      languages.kusto.getKustoWorker().then(kusto => {\n        const model = editor.getModel();\n        return model && kusto(model.uri);\n      }).then(worker => {\n        worker === null || worker === void 0 ? void 0 : worker.setSchema(schema, 'https://help.kusto.windows.net', 'Samples');\n      });\n    });\n  }, [datasource.azureLogAnalyticsDatasource, (_query$azureLogAnalyt2 = query.azureLogAnalytics) === null || _query$azureLogAnalyt2 === void 0 ? void 0 : _query$azureLogAnalyt2.resource]);\n  const handleEditorMount = useCallback((editor, monaco) => {\n    var _monacoPromiseRef$cur, _monacoPromiseRef$cur2;\n\n    (_monacoPromiseRef$cur = monacoPromiseRef.current) === null || _monacoPromiseRef$cur === void 0 ? void 0 : (_monacoPromiseRef$cur2 = _monacoPromiseRef$cur.resolve) === null || _monacoPromiseRef$cur2 === void 0 ? void 0 : _monacoPromiseRef$cur2.call(_monacoPromiseRef$cur, {\n      editor,\n      monaco\n    });\n  }, []);\n  const onChange = useCallback(newQuery => {\n    onQueryChange(setKustoQuery(query, newQuery));\n  }, [onQueryChange, query]);\n  return /*#__PURE__*/_jsx(CodeEditor, {\n    value: (_query$azureLogAnalyt3 = (_query$azureLogAnalyt4 = query.azureLogAnalytics) === null || _query$azureLogAnalyt4 === void 0 ? void 0 : _query$azureLogAnalyt4.query) !== null && _query$azureLogAnalyt3 !== void 0 ? _query$azureLogAnalyt3 : '',\n    language: \"kusto\",\n    height: 200,\n    width: \"100%\",\n    showMiniMap: false,\n    onBlur: onChange,\n    onSave: onChange,\n    onEditorDidMount: handleEditorMount\n  });\n};\n\nexport default QueryField;","map":{"version":3,"names":["React","useCallback","useEffect","useRef","CodeEditor","Deferred","setKustoQuery","QueryField","query","datasource","onQueryChange","monacoPromiseRef","getPromise","current","promise","azureLogAnalytics","resource","promises","azureLogAnalyticsDatasource","getKustoSchema","Promise","all","then","schema","monaco","editor","languages","kusto","getKustoWorker","model","getModel","uri","worker","setSchema","handleEditorMount","resolve","onChange","newQuery"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/LogsQueryEditor/QueryField.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\n\nimport { CodeEditor, Monaco, MonacoEditor } from '@grafana/ui';\nimport { Deferred } from 'app/core/utils/deferred';\n\nimport { AzureQueryEditorFieldProps } from '../../types';\n\nimport { setKustoQuery } from './setQueryValue';\n\ninterface MonacoPromise {\n  editor: MonacoEditor;\n  monaco: Monaco;\n}\n\ninterface MonacoLanguages {\n  kusto: {\n    getKustoWorker: () => Promise<\n      (url: any) => Promise<{\n        setSchema: (schema: any, clusterUrl: string, name: string) => void;\n      }>\n    >;\n  };\n}\n\nconst QueryField: React.FC<AzureQueryEditorFieldProps> = ({ query, datasource, onQueryChange }) => {\n  const monacoPromiseRef = useRef<Deferred<MonacoPromise>>();\n  function getPromise() {\n    if (!monacoPromiseRef.current) {\n      monacoPromiseRef.current = new Deferred<MonacoPromise>();\n    }\n\n    return monacoPromiseRef.current.promise;\n  }\n\n  useEffect(() => {\n    if (!query.azureLogAnalytics?.resource) {\n      return;\n    }\n\n    const promises = [\n      datasource.azureLogAnalyticsDatasource.getKustoSchema(query.azureLogAnalytics.resource),\n      getPromise(),\n    ] as const;\n\n    // the kusto schema call might fail, but its okay for that to happen silently\n    Promise.all(promises).then(([schema, { monaco, editor }]) => {\n      const languages = monaco.languages as unknown as MonacoLanguages;\n\n      languages.kusto\n        .getKustoWorker()\n        .then((kusto) => {\n          const model = editor.getModel();\n          return model && kusto(model.uri);\n        })\n        .then((worker) => {\n          worker?.setSchema(schema, 'https://help.kusto.windows.net', 'Samples');\n        });\n    });\n  }, [datasource.azureLogAnalyticsDatasource, query.azureLogAnalytics?.resource]);\n\n  const handleEditorMount = useCallback((editor: MonacoEditor, monaco: Monaco) => {\n    monacoPromiseRef.current?.resolve?.({ editor, monaco });\n  }, []);\n\n  const onChange = useCallback(\n    (newQuery: string) => {\n      onQueryChange(setKustoQuery(query, newQuery));\n    },\n    [onQueryChange, query]\n  );\n\n  return (\n    <CodeEditor\n      value={query.azureLogAnalytics?.query ?? ''}\n      language=\"kusto\"\n      height={200}\n      width=\"100%\"\n      showMiniMap={false}\n      onBlur={onChange}\n      onSave={onChange}\n      onEditorDidMount={handleEditorMount}\n    />\n  );\n};\n\nexport default QueryField;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,QAAsD,OAAtD;AAEA,SAASC,UAAT,QAAiD,aAAjD;AACA,SAASC,QAAT,QAAyB,yBAAzB;AAIA,SAASC,aAAT,QAA8B,iBAA9B;;;AAiBA,MAAMC,UAAgD,GAAG,CAAC;EAAEC,KAAF;EAASC,UAAT;EAAqBC;AAArB,CAAD,KAA0C;EAAA;;EACjG,MAAMC,gBAAgB,GAAGR,MAAM,EAA/B;;EACA,SAASS,UAAT,GAAsB;IACpB,IAAI,CAACD,gBAAgB,CAACE,OAAtB,EAA+B;MAC7BF,gBAAgB,CAACE,OAAjB,GAA2B,IAAIR,QAAJ,EAA3B;IACD;;IAED,OAAOM,gBAAgB,CAACE,OAAjB,CAAyBC,OAAhC;EACD;;EAEDZ,SAAS,CAAC,MAAM;IAAA;;IACd,IAAI,2BAACM,KAAK,CAACO,iBAAP,kDAAC,sBAAyBC,QAA1B,CAAJ,EAAwC;MACtC;IACD;;IAED,MAAMC,QAAQ,GAAG,CACfR,UAAU,CAACS,2BAAX,CAAuCC,cAAvC,CAAsDX,KAAK,CAACO,iBAAN,CAAwBC,QAA9E,CADe,EAEfJ,UAAU,EAFK,CAAjB,CALc,CAUd;;IACAQ,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAAsBK,IAAtB,CAA2B,CAAC,CAACC,MAAD,EAAS;MAAEC,MAAF;MAAUC;IAAV,CAAT,CAAD,KAAkC;MAC3D,MAAMC,SAAS,GAAGF,MAAM,CAACE,SAAzB;MAEAA,SAAS,CAACC,KAAV,CACGC,cADH,GAEGN,IAFH,CAESK,KAAD,IAAW;QACf,MAAME,KAAK,GAAGJ,MAAM,CAACK,QAAP,EAAd;QACA,OAAOD,KAAK,IAAIF,KAAK,CAACE,KAAK,CAACE,GAAP,CAArB;MACD,CALH,EAMGT,IANH,CAMSU,MAAD,IAAY;QAChBA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEC,SAAR,CAAkBV,MAAlB,EAA0B,gCAA1B,EAA4D,SAA5D;MACD,CARH;IASD,CAZD;EAaD,CAxBQ,EAwBN,CAACd,UAAU,CAACS,2BAAZ,4BAAyCV,KAAK,CAACO,iBAA/C,2DAAyC,uBAAyBC,QAAlE,CAxBM,CAAT;EA0BA,MAAMkB,iBAAiB,GAAGjC,WAAW,CAAC,CAACwB,MAAD,EAAuBD,MAAvB,KAA0C;IAAA;;IAC9E,yBAAAb,gBAAgB,CAACE,OAAjB,0GAA0BsB,OAA1B,8GAAoC;MAAEV,MAAF;MAAUD;IAAV,CAApC;EACD,CAFoC,EAElC,EAFkC,CAArC;EAIA,MAAMY,QAAQ,GAAGnC,WAAW,CACzBoC,QAAD,IAAsB;IACpB3B,aAAa,CAACJ,aAAa,CAACE,KAAD,EAAQ6B,QAAR,CAAd,CAAb;EACD,CAHyB,EAI1B,CAAC3B,aAAD,EAAgBF,KAAhB,CAJ0B,CAA5B;EAOA,oBACE,KAAC,UAAD;IACE,KAAK,sDAAEA,KAAK,CAACO,iBAAR,2DAAE,uBAAyBP,KAA3B,2EAAoC,EAD3C;IAEE,QAAQ,EAAC,OAFX;IAGE,MAAM,EAAE,GAHV;IAIE,KAAK,EAAC,MAJR;IAKE,WAAW,EAAE,KALf;IAME,MAAM,EAAE4B,QANV;IAOE,MAAM,EAAEA,QAPV;IAQE,gBAAgB,EAAEF;EARpB,EADF;AAYD,CA3DD;;AA6DA,eAAe3B,UAAf"},"metadata":{},"sourceType":"module"}