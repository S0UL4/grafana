{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport { getAlignmentPickerData } from '../functions';\nimport { MetricKind, PreprocessorType, ValueTypes } from '../types';\nimport { QueryEditorRow } from '.';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NONE_OPTION = {\n  label: 'None',\n  value: PreprocessorType.None\n};\nexport const Preprocessor = ({\n  query,\n  metricDescriptor,\n  onChange\n}) => {\n  var _query$preprocessor;\n\n  const options = useOptions(metricDescriptor);\n  return /*#__PURE__*/_jsx(QueryEditorRow, {\n    label: \"Pre-processing\",\n    tooltip: \"Preprocessing options are displayed when the selected metric has a metric kind of delta or cumulative. The specific options available are determined by the metic's value type. If you select 'Rate', data points are aligned and converted to a rate per time series. If you select 'Delta', data points are aligned by their delta (difference) per time series\",\n    children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n      onChange: value => {\n        const {\n          valueType,\n          metricKind,\n          perSeriesAligner: psa\n        } = query;\n        const {\n          perSeriesAligner\n        } = getAlignmentPickerData(valueType, metricKind, psa, value);\n        onChange(Object.assign({}, query, {\n          preprocessor: value,\n          perSeriesAligner\n        }));\n      },\n      value: (_query$preprocessor = query.preprocessor) !== null && _query$preprocessor !== void 0 ? _query$preprocessor : PreprocessorType.None,\n      options: options\n    })\n  });\n};\n\nconst useOptions = metricDescriptor => {\n  const metricKind = metricDescriptor === null || metricDescriptor === void 0 ? void 0 : metricDescriptor.metricKind;\n  const valueType = metricDescriptor === null || metricDescriptor === void 0 ? void 0 : metricDescriptor.valueType;\n  return useMemo(() => {\n    if (!metricKind || metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION) {\n      return [NONE_OPTION];\n    }\n\n    const options = [NONE_OPTION, {\n      label: 'Rate',\n      value: PreprocessorType.Rate,\n      description: 'Data points are aligned and converted to a rate per time series'\n    }];\n    return metricKind === MetricKind.CUMULATIVE ? [...options, {\n      label: 'Delta',\n      value: PreprocessorType.Delta,\n      description: 'Data points are aligned by their delta (difference) per time series'\n    }] : options;\n  }, [metricKind, valueType]);\n};","map":{"version":3,"names":["React","useMemo","RadioButtonGroup","getAlignmentPickerData","MetricKind","PreprocessorType","ValueTypes","QueryEditorRow","NONE_OPTION","label","value","None","Preprocessor","query","metricDescriptor","onChange","options","useOptions","valueType","metricKind","perSeriesAligner","psa","preprocessor","GAUGE","DISTRIBUTION","Rate","description","CUMULATIVE","Delta"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/Preprocessor.tsx"],"sourcesContent":["import React, { FunctionComponent, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { getAlignmentPickerData } from '../functions';\nimport { MetricDescriptor, MetricKind, MetricQuery, PreprocessorType, ValueTypes } from '../types';\n\nimport { QueryEditorRow } from '.';\n\nconst NONE_OPTION = { label: 'None', value: PreprocessorType.None };\n\nexport interface Props {\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: MetricQuery) => void;\n  query: MetricQuery;\n}\n\nexport const Preprocessor: FunctionComponent<Props> = ({ query, metricDescriptor, onChange }) => {\n  const options = useOptions(metricDescriptor);\n  return (\n    <QueryEditorRow\n      label=\"Pre-processing\"\n      tooltip=\"Preprocessing options are displayed when the selected metric has a metric kind of delta or cumulative. The specific options available are determined by the metic's value type. If you select 'Rate', data points are aligned and converted to a rate per time series. If you select 'Delta', data points are aligned by their delta (difference) per time series\"\n    >\n      <RadioButtonGroup\n        onChange={(value: PreprocessorType) => {\n          const { valueType, metricKind, perSeriesAligner: psa } = query;\n          const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, psa, value);\n          onChange({ ...query, preprocessor: value, perSeriesAligner });\n        }}\n        value={query.preprocessor ?? PreprocessorType.None}\n        options={options}\n      ></RadioButtonGroup>\n    </QueryEditorRow>\n  );\n};\n\nconst useOptions = (metricDescriptor?: MetricDescriptor): Array<SelectableValue<PreprocessorType>> => {\n  const metricKind = metricDescriptor?.metricKind;\n  const valueType = metricDescriptor?.valueType;\n\n  return useMemo(() => {\n    if (!metricKind || metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION) {\n      return [NONE_OPTION];\n    }\n\n    const options = [\n      NONE_OPTION,\n      {\n        label: 'Rate',\n        value: PreprocessorType.Rate,\n        description: 'Data points are aligned and converted to a rate per time series',\n      },\n    ];\n\n    return metricKind === MetricKind.CUMULATIVE\n      ? [\n          ...options,\n          {\n            label: 'Delta',\n            value: PreprocessorType.Delta,\n            description: 'Data points are aligned by their delta (difference) per time series',\n          },\n        ]\n      : options;\n  }, [metricKind, valueType]);\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAmCC,OAAnC,QAAkD,OAAlD;AAGA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,SAASC,sBAAT,QAAuC,cAAvC;AACA,SAA2BC,UAA3B,EAAoDC,gBAApD,EAAsEC,UAAtE,QAAwF,UAAxF;AAEA,SAASC,cAAT,QAA+B,GAA/B;;AAEA,MAAMC,WAAW,GAAG;EAAEC,KAAK,EAAE,MAAT;EAAiBC,KAAK,EAAEL,gBAAgB,CAACM;AAAzC,CAApB;AAQA,OAAO,MAAMC,YAAsC,GAAG,CAAC;EAAEC,KAAF;EAASC,gBAAT;EAA2BC;AAA3B,CAAD,KAA2C;EAAA;;EAC/F,MAAMC,OAAO,GAAGC,UAAU,CAACH,gBAAD,CAA1B;EACA,oBACE,KAAC,cAAD;IACE,KAAK,EAAC,gBADR;IAEE,OAAO,EAAC,mWAFV;IAAA,uBAIE,KAAC,gBAAD;MACE,QAAQ,EAAGJ,KAAD,IAA6B;QACrC,MAAM;UAAEQ,SAAF;UAAaC,UAAb;UAAyBC,gBAAgB,EAAEC;QAA3C,IAAmDR,KAAzD;QACA,MAAM;UAAEO;QAAF,IAAuBjB,sBAAsB,CAACe,SAAD,EAAYC,UAAZ,EAAwBE,GAAxB,EAA6BX,KAA7B,CAAnD;QACAK,QAAQ,mBAAMF,KAAN;UAAaS,YAAY,EAAEZ,KAA3B;UAAkCU;QAAlC,GAAR;MACD,CALH;MAME,KAAK,yBAAEP,KAAK,CAACS,YAAR,qEAAwBjB,gBAAgB,CAACM,IANhD;MAOE,OAAO,EAAEK;IAPX;EAJF,EADF;AAgBD,CAlBM;;AAoBP,MAAMC,UAAU,GAAIH,gBAAD,IAAmF;EACpG,MAAMK,UAAU,GAAGL,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEK,UAArC;EACA,MAAMD,SAAS,GAAGJ,gBAAH,aAAGA,gBAAH,uBAAGA,gBAAgB,CAAEI,SAApC;EAEA,OAAOjB,OAAO,CAAC,MAAM;IACnB,IAAI,CAACkB,UAAD,IAAeA,UAAU,KAAKf,UAAU,CAACmB,KAAzC,IAAkDL,SAAS,KAAKZ,UAAU,CAACkB,YAA/E,EAA6F;MAC3F,OAAO,CAAChB,WAAD,CAAP;IACD;;IAED,MAAMQ,OAAO,GAAG,CACdR,WADc,EAEd;MACEC,KAAK,EAAE,MADT;MAEEC,KAAK,EAAEL,gBAAgB,CAACoB,IAF1B;MAGEC,WAAW,EAAE;IAHf,CAFc,CAAhB;IASA,OAAOP,UAAU,KAAKf,UAAU,CAACuB,UAA1B,GACH,CACE,GAAGX,OADL,EAEE;MACEP,KAAK,EAAE,OADT;MAEEC,KAAK,EAAEL,gBAAgB,CAACuB,KAF1B;MAGEF,WAAW,EAAE;IAHf,CAFF,CADG,GASHV,OATJ;EAUD,CAxBa,EAwBX,CAACG,UAAD,EAAaD,SAAb,CAxBW,CAAd;AAyBD,CA7BD"},"metadata":{},"sourceType":"module"}