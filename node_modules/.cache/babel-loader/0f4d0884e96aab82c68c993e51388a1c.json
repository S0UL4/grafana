{"ast":null,"code":"var _span, _EmptyArea;\n\nimport { intersectionWith, isEqual } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Button, ConfirmModal, HorizontalGroup, IconButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { matcherFieldToMatcher, parseMatchers } from '../../utils/alertmanager';\nimport { prepareItems } from '../../utils/dynamicTable';\nimport { DynamicTable } from '../DynamicTable';\nimport { EmptyArea } from '../EmptyArea';\nimport { Matchers } from '../silences/Matchers';\nimport { AmRoutesExpandedForm } from './AmRoutesExpandedForm';\nimport { AmRoutesExpandedRead } from './AmRoutesExpandedRead';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const getFilteredRoutes = (routes, labelMatcherQuery, contactPointQuery) => {\n  const matchers = parseMatchers(labelMatcherQuery !== null && labelMatcherQuery !== void 0 ? labelMatcherQuery : '');\n  let filteredRoutes = routes;\n\n  if (matchers.length) {\n    filteredRoutes = routes.filter(route => {\n      const routeMatchers = route.object_matchers.map(matcherFieldToMatcher);\n      return intersectionWith(routeMatchers, matchers, isEqual).length > 0;\n    });\n  }\n\n  if (contactPointQuery && contactPointQuery.length > 0) {\n    filteredRoutes = filteredRoutes.filter(route => route.receiver.toLowerCase().includes(contactPointQuery.toLowerCase()));\n  }\n\n  return filteredRoutes;\n};\nexport const updatedRoute = (routes, updatedRoute) => {\n  const newRoutes = [...routes];\n  const editIndex = newRoutes.findIndex(route => route.id === updatedRoute.id);\n\n  if (editIndex >= 0) {\n    newRoutes[editIndex] = Object.assign({}, newRoutes[editIndex], updatedRoute);\n  }\n\n  return newRoutes;\n};\nexport const deleteRoute = (routes, routeId) => {\n  return routes.filter(route => route.id !== routeId);\n};\nexport const AmRoutesTable = ({\n  isAddMode,\n  onCancelAdd,\n  onChange,\n  receivers,\n  routes,\n  filters,\n  readOnly = false,\n  alertManagerSourceName\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [deletingRouteId, setDeletingRouteId] = useState(undefined);\n  const [expandedId, setExpandedId] = useState();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canEditRoutes = contextSrv.hasPermission(permissions.update);\n  const canDeleteRoutes = contextSrv.hasPermission(permissions.delete);\n  const showActions = !readOnly && (canEditRoutes || canDeleteRoutes);\n  const expandItem = useCallback(item => setExpandedId(item.id), []);\n  const collapseItem = useCallback(() => setExpandedId(undefined), []);\n  const cols = [{\n    id: 'matchingCriteria',\n    label: 'Matching labels',\n    // eslint-disable-next-line react/display-name\n    renderCell: item => {\n      return item.data.object_matchers.length ? /*#__PURE__*/_jsx(Matchers, {\n        matchers: item.data.object_matchers.map(matcherFieldToMatcher)\n      }) : _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n        children: \"Matches all alert instances\"\n      }));\n    },\n    size: 10\n  }, {\n    id: 'groupBy',\n    label: 'Group by',\n    renderCell: item => item.data.overrideGrouping && item.data.groupBy.join(', ') || '-',\n    size: 5\n  }, {\n    id: 'receiverChannel',\n    label: 'Contact point',\n    renderCell: item => item.data.receiver || '-',\n    size: 5\n  }, {\n    id: 'muteTimings',\n    label: 'Mute timings',\n    renderCell: item => item.data.muteTimeIntervals.join(', ') || '-',\n    size: 5\n  }, ...(!showActions ? [] : [{\n    id: 'actions',\n    label: 'Actions',\n    // eslint-disable-next-line react/display-name\n    renderCell: item => {\n      if (item.renderExpandedContent) {\n        return null;\n      }\n\n      const expandWithCustomContent = () => {\n        expandItem(item);\n        setEditMode(true);\n      };\n\n      return /*#__PURE__*/_jsx(_Fragment, {\n        children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n          children: [/*#__PURE__*/_jsx(Button, {\n            \"aria-label\": \"Edit route\",\n            icon: \"pen\",\n            onClick: expandWithCustomContent,\n            size: \"sm\",\n            type: \"button\",\n            variant: \"secondary\",\n            children: \"Edit\"\n          }), /*#__PURE__*/_jsx(IconButton, {\n            \"aria-label\": \"Delete route\",\n            name: \"trash-alt\",\n            onClick: () => {\n              setDeletingRouteId(item.data.id);\n            },\n            type: \"button\"\n          })]\n        })\n      });\n    },\n    size: '100px'\n  }])];\n  const filteredRoutes = useMemo(() => getFilteredRoutes(routes, filters === null || filters === void 0 ? void 0 : filters.queryString, filters === null || filters === void 0 ? void 0 : filters.contactPoint), [routes, filters]);\n  const dynamicTableRoutes = useMemo(() => prepareItems(isAddMode ? routes : filteredRoutes), [isAddMode, routes, filteredRoutes]); // expand the last item when adding or reset when the length changed\n\n  useEffect(() => {\n    if (isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(dynamicTableRoutes[dynamicTableRoutes.length - 1].id);\n    }\n\n    if (!isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(undefined);\n    }\n  }, [isAddMode, dynamicTableRoutes]);\n\n  if (routes.length > 0 && filteredRoutes.length === 0) {\n    return _EmptyArea || (_EmptyArea = /*#__PURE__*/_jsx(EmptyArea, {\n      children: /*#__PURE__*/_jsx(\"p\", {\n        children: \"No policies found\"\n      })\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(DynamicTable, {\n      cols: cols,\n      isExpandable: true,\n      items: dynamicTableRoutes,\n      testIdGenerator: () => 'am-routes-row',\n      onCollapse: collapseItem,\n      onExpand: expandItem,\n      isExpanded: item => expandedId === item.id,\n      renderExpandedContent: item => isAddMode || editMode ? /*#__PURE__*/_jsx(AmRoutesExpandedForm, {\n        onCancel: () => {\n          if (isAddMode) {\n            onCancelAdd();\n          }\n\n          setEditMode(false);\n        },\n        onSave: data => {\n          const newRoutes = updatedRoute(routes, data);\n          setEditMode(false);\n          onChange(newRoutes);\n        },\n        receivers: receivers,\n        routes: item.data\n      }) : /*#__PURE__*/_jsx(AmRoutesExpandedRead, {\n        onChange: data => {\n          const newRoutes = updatedRoute(routes, data);\n          onChange(newRoutes);\n        },\n        receivers: receivers,\n        routes: item.data,\n        readOnly: readOnly,\n        alertManagerSourceName: alertManagerSourceName\n      })\n    }), /*#__PURE__*/_jsx(ConfirmModal, {\n      isOpen: !!deletingRouteId,\n      title: \"Delete notification policy\",\n      body: \"Deleting this notification policy will permanently remove it. Are you sure you want to delete this policy?\",\n      confirmText: \"Yes, delete\",\n      icon: \"exclamation-triangle\",\n      onConfirm: () => {\n        if (deletingRouteId) {\n          const newRoutes = deleteRoute(routes, deletingRouteId);\n          onChange(newRoutes);\n          setDeletingRouteId(undefined);\n        }\n      },\n      onDismiss: () => setDeletingRouteId(undefined)\n    })]\n  });\n};","map":{"version":3,"names":["intersectionWith","isEqual","React","useCallback","useEffect","useMemo","useState","Button","ConfirmModal","HorizontalGroup","IconButton","contextSrv","getNotificationsPermissions","matcherFieldToMatcher","parseMatchers","prepareItems","DynamicTable","EmptyArea","Matchers","AmRoutesExpandedForm","AmRoutesExpandedRead","getFilteredRoutes","routes","labelMatcherQuery","contactPointQuery","matchers","filteredRoutes","length","filter","route","routeMatchers","object_matchers","map","receiver","toLowerCase","includes","updatedRoute","newRoutes","editIndex","findIndex","id","deleteRoute","routeId","AmRoutesTable","isAddMode","onCancelAdd","onChange","receivers","filters","readOnly","alertManagerSourceName","editMode","setEditMode","deletingRouteId","setDeletingRouteId","undefined","expandedId","setExpandedId","permissions","canEditRoutes","hasPermission","update","canDeleteRoutes","delete","showActions","expandItem","item","collapseItem","cols","label","renderCell","data","size","overrideGrouping","groupBy","join","muteTimeIntervals","renderExpandedContent","expandWithCustomContent","queryString","contactPoint","dynamicTableRoutes"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/amroutes/AmRoutesTable.tsx"],"sourcesContent":["import { intersectionWith, isEqual } from 'lodash';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Button, ConfirmModal, HorizontalGroup, IconButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { matcherFieldToMatcher, parseMatchers } from '../../utils/alertmanager';\nimport { prepareItems } from '../../utils/dynamicTable';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EmptyArea } from '../EmptyArea';\nimport { Matchers } from '../silences/Matchers';\n\nimport { AmRoutesExpandedForm } from './AmRoutesExpandedForm';\nimport { AmRoutesExpandedRead } from './AmRoutesExpandedRead';\n\nexport interface AmRoutesTableProps {\n  isAddMode: boolean;\n  onChange: (routes: FormAmRoute[]) => void;\n  onCancelAdd: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute[];\n  filters?: { queryString?: string; contactPoint?: string };\n  readOnly?: boolean;\n  alertManagerSourceName: string;\n}\n\ntype RouteTableColumnProps = DynamicTableColumnProps<FormAmRoute>;\ntype RouteTableItemProps = DynamicTableItemProps<FormAmRoute>;\n\nexport const getFilteredRoutes = (routes: FormAmRoute[], labelMatcherQuery?: string, contactPointQuery?: string) => {\n  const matchers = parseMatchers(labelMatcherQuery ?? '');\n\n  let filteredRoutes = routes;\n\n  if (matchers.length) {\n    filteredRoutes = routes.filter((route) => {\n      const routeMatchers = route.object_matchers.map(matcherFieldToMatcher);\n      return intersectionWith(routeMatchers, matchers, isEqual).length > 0;\n    });\n  }\n\n  if (contactPointQuery && contactPointQuery.length > 0) {\n    filteredRoutes = filteredRoutes.filter((route) =>\n      route.receiver.toLowerCase().includes(contactPointQuery.toLowerCase())\n    );\n  }\n\n  return filteredRoutes;\n};\n\nexport const updatedRoute = (routes: FormAmRoute[], updatedRoute: FormAmRoute): FormAmRoute[] => {\n  const newRoutes = [...routes];\n  const editIndex = newRoutes.findIndex((route) => route.id === updatedRoute.id);\n\n  if (editIndex >= 0) {\n    newRoutes[editIndex] = {\n      ...newRoutes[editIndex],\n      ...updatedRoute,\n    };\n  }\n  return newRoutes;\n};\n\nexport const deleteRoute = (routes: FormAmRoute[], routeId: string): FormAmRoute[] => {\n  return routes.filter((route) => route.id !== routeId);\n};\n\nexport const AmRoutesTable: FC<AmRoutesTableProps> = ({\n  isAddMode,\n  onCancelAdd,\n  onChange,\n  receivers,\n  routes,\n  filters,\n  readOnly = false,\n  alertManagerSourceName,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [deletingRouteId, setDeletingRouteId] = useState<string | undefined>(undefined);\n  const [expandedId, setExpandedId] = useState<string | number>();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canEditRoutes = contextSrv.hasPermission(permissions.update);\n  const canDeleteRoutes = contextSrv.hasPermission(permissions.delete);\n\n  const showActions = !readOnly && (canEditRoutes || canDeleteRoutes);\n\n  const expandItem = useCallback((item: RouteTableItemProps) => setExpandedId(item.id), []);\n  const collapseItem = useCallback(() => setExpandedId(undefined), []);\n\n  const cols: RouteTableColumnProps[] = [\n    {\n      id: 'matchingCriteria',\n      label: 'Matching labels',\n      // eslint-disable-next-line react/display-name\n      renderCell: (item) => {\n        return item.data.object_matchers.length ? (\n          <Matchers matchers={item.data.object_matchers.map(matcherFieldToMatcher)} />\n        ) : (\n          <span>Matches all alert instances</span>\n        );\n      },\n      size: 10,\n    },\n    {\n      id: 'groupBy',\n      label: 'Group by',\n      renderCell: (item) => (item.data.overrideGrouping && item.data.groupBy.join(', ')) || '-',\n      size: 5,\n    },\n    {\n      id: 'receiverChannel',\n      label: 'Contact point',\n      renderCell: (item) => item.data.receiver || '-',\n      size: 5,\n    },\n    {\n      id: 'muteTimings',\n      label: 'Mute timings',\n      renderCell: (item) => item.data.muteTimeIntervals.join(', ') || '-',\n      size: 5,\n    },\n    ...(!showActions\n      ? []\n      : [\n          {\n            id: 'actions',\n            label: 'Actions',\n            // eslint-disable-next-line react/display-name\n            renderCell: (item) => {\n              if (item.renderExpandedContent) {\n                return null;\n              }\n\n              const expandWithCustomContent = () => {\n                expandItem(item);\n                setEditMode(true);\n              };\n\n              return (\n                <>\n                  <HorizontalGroup>\n                    <Button\n                      aria-label=\"Edit route\"\n                      icon=\"pen\"\n                      onClick={expandWithCustomContent}\n                      size=\"sm\"\n                      type=\"button\"\n                      variant=\"secondary\"\n                    >\n                      Edit\n                    </Button>\n                    <IconButton\n                      aria-label=\"Delete route\"\n                      name=\"trash-alt\"\n                      onClick={() => {\n                        setDeletingRouteId(item.data.id);\n                      }}\n                      type=\"button\"\n                    />\n                  </HorizontalGroup>\n                </>\n              );\n            },\n            size: '100px',\n          } as RouteTableColumnProps,\n        ]),\n  ];\n\n  const filteredRoutes = useMemo(\n    () => getFilteredRoutes(routes, filters?.queryString, filters?.contactPoint),\n    [routes, filters]\n  );\n\n  const dynamicTableRoutes = useMemo(\n    () => prepareItems(isAddMode ? routes : filteredRoutes),\n    [isAddMode, routes, filteredRoutes]\n  );\n\n  // expand the last item when adding or reset when the length changed\n  useEffect(() => {\n    if (isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(dynamicTableRoutes[dynamicTableRoutes.length - 1].id);\n    }\n    if (!isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(undefined);\n    }\n  }, [isAddMode, dynamicTableRoutes]);\n\n  if (routes.length > 0 && filteredRoutes.length === 0) {\n    return (\n      <EmptyArea>\n        <p>No policies found</p>\n      </EmptyArea>\n    );\n  }\n\n  return (\n    <>\n      <DynamicTable\n        cols={cols}\n        isExpandable={true}\n        items={dynamicTableRoutes}\n        testIdGenerator={() => 'am-routes-row'}\n        onCollapse={collapseItem}\n        onExpand={expandItem}\n        isExpanded={(item) => expandedId === item.id}\n        renderExpandedContent={(item: RouteTableItemProps) =>\n          isAddMode || editMode ? (\n            <AmRoutesExpandedForm\n              onCancel={() => {\n                if (isAddMode) {\n                  onCancelAdd();\n                }\n                setEditMode(false);\n              }}\n              onSave={(data) => {\n                const newRoutes = updatedRoute(routes, data);\n\n                setEditMode(false);\n                onChange(newRoutes);\n              }}\n              receivers={receivers}\n              routes={item.data}\n            />\n          ) : (\n            <AmRoutesExpandedRead\n              onChange={(data) => {\n                const newRoutes = updatedRoute(routes, data);\n                onChange(newRoutes);\n              }}\n              receivers={receivers}\n              routes={item.data}\n              readOnly={readOnly}\n              alertManagerSourceName={alertManagerSourceName}\n            />\n          )\n        }\n      />\n      <ConfirmModal\n        isOpen={!!deletingRouteId}\n        title=\"Delete notification policy\"\n        body=\"Deleting this notification policy will permanently remove it. Are you sure you want to delete this policy?\"\n        confirmText=\"Yes, delete\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          if (deletingRouteId) {\n            const newRoutes = deleteRoute(routes, deletingRouteId);\n            onChange(newRoutes);\n            setDeletingRouteId(undefined);\n          }\n        }}\n        onDismiss={() => setDeletingRouteId(undefined)}\n      />\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}