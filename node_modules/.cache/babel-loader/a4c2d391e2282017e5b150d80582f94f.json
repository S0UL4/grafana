{"ast":null,"code":"import { FieldType, formattedValueToString } from '@grafana/data';\nimport { TextDimensionMode } from './types';\nimport { findField, getLastNotNullFieldValue } from './utils'; //---------------------------------------------------------\n// Resource dimension\n//---------------------------------------------------------\n\nexport function getTextDimension(frame, config) {\n  const field = config.field ? findField(frame, config.field) : frame === null || frame === void 0 ? void 0 : frame.fields.find(f => f.type === FieldType.string);\n  return getTextDimensionForField(field, config);\n}\nexport function getTextDimensionForField(field, config) {\n  var _config$mode;\n\n  let v = config.fixed;\n  const mode = (_config$mode = config.mode) !== null && _config$mode !== void 0 ? _config$mode : TextDimensionMode.Fixed;\n\n  if (mode === TextDimensionMode.Fixed) {\n    return {\n      isAssumed: !Boolean(v),\n      fixed: v,\n      value: () => v,\n      get: i => v\n    };\n  }\n\n  if (mode === TextDimensionMode.Template) {\n    const disp = v => {\n      return `TEMPLATE[${config.fixed} // ${v}]`;\n    };\n\n    if (!field) {\n      v = disp('');\n      return {\n        isAssumed: true,\n        fixed: v,\n        value: () => v,\n        get: i => v\n      };\n    }\n\n    return {\n      field,\n      get: i => disp(field.values.get(i)),\n      value: () => disp(getLastNotNullFieldValue(field))\n    };\n  }\n\n  if (!field) {\n    return {\n      isAssumed: true,\n      fixed: v,\n      value: () => v,\n      get: i => v\n    };\n  }\n\n  let disp = v => formattedValueToString(field.display(v));\n\n  return {\n    field,\n    get: i => disp(field.values.get(i)),\n    value: () => disp(getLastNotNullFieldValue(field))\n  };\n}","map":{"version":3,"names":["FieldType","formattedValueToString","TextDimensionMode","findField","getLastNotNullFieldValue","getTextDimension","frame","config","field","fields","find","f","type","string","getTextDimensionForField","v","fixed","mode","Fixed","isAssumed","Boolean","value","get","i","Template","disp","values","display"],"sources":["/home/soula/grafana/public/app/features/dimensions/text.ts"],"sourcesContent":["import { DataFrame, Field, FieldType, formattedValueToString } from '@grafana/data';\n\nimport { DimensionSupplier, TextDimensionConfig, TextDimensionMode } from './types';\nimport { findField, getLastNotNullFieldValue } from './utils';\n\n//---------------------------------------------------------\n// Resource dimension\n//---------------------------------------------------------\n\nexport function getTextDimension(frame: DataFrame | undefined, config: TextDimensionConfig): DimensionSupplier<string> {\n  const field = config.field ? findField(frame, config.field) : frame?.fields.find((f) => f.type === FieldType.string);\n  return getTextDimensionForField(field, config);\n}\n\nexport function getTextDimensionForField(\n  field: Field | undefined,\n  config: TextDimensionConfig\n): DimensionSupplier<string> {\n  let v = config.fixed;\n  const mode = config.mode ?? TextDimensionMode.Fixed;\n  if (mode === TextDimensionMode.Fixed) {\n    return {\n      isAssumed: !Boolean(v),\n      fixed: v,\n      value: () => v,\n      get: (i) => v,\n    };\n  }\n\n  if (mode === TextDimensionMode.Template) {\n    const disp = (v: any) => {\n      return `TEMPLATE[${config.fixed} // ${v}]`;\n    };\n    if (!field) {\n      v = disp('');\n      return {\n        isAssumed: true,\n        fixed: v,\n        value: () => v,\n        get: (i) => v,\n      };\n    }\n    return {\n      field,\n      get: (i) => disp(field.values.get(i)),\n      value: () => disp(getLastNotNullFieldValue(field)),\n    };\n  }\n\n  if (!field) {\n    return {\n      isAssumed: true,\n      fixed: v,\n      value: () => v,\n      get: (i) => v,\n    };\n  }\n\n  let disp = (v: any) => formattedValueToString(field.display!(v));\n  return {\n    field,\n    get: (i) => disp(field.values.get(i)),\n    value: () => disp(getLastNotNullFieldValue(field)),\n  };\n}\n"],"mappings":"AAAA,SAA2BA,SAA3B,EAAsCC,sBAAtC,QAAoE,eAApE;AAEA,SAAiDC,iBAAjD,QAA0E,SAA1E;AACA,SAASC,SAAT,EAAoBC,wBAApB,QAAoD,SAApD,C,CAEA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAwDC,MAAxD,EAAgH;EACrH,MAAMC,KAAK,GAAGD,MAAM,CAACC,KAAP,GAAeL,SAAS,CAACG,KAAD,EAAQC,MAAM,CAACC,KAAf,CAAxB,GAAgDF,KAAhD,aAAgDA,KAAhD,uBAAgDA,KAAK,CAAEG,MAAP,CAAcC,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWZ,SAAS,CAACa,MAA/C,CAA9D;EACA,OAAOC,wBAAwB,CAACN,KAAD,EAAQD,MAAR,CAA/B;AACD;AAED,OAAO,SAASO,wBAAT,CACLN,KADK,EAELD,MAFK,EAGsB;EAAA;;EAC3B,IAAIQ,CAAC,GAAGR,MAAM,CAACS,KAAf;EACA,MAAMC,IAAI,mBAAGV,MAAM,CAACU,IAAV,uDAAkBf,iBAAiB,CAACgB,KAA9C;;EACA,IAAID,IAAI,KAAKf,iBAAiB,CAACgB,KAA/B,EAAsC;IACpC,OAAO;MACLC,SAAS,EAAE,CAACC,OAAO,CAACL,CAAD,CADd;MAELC,KAAK,EAAED,CAFF;MAGLM,KAAK,EAAE,MAAMN,CAHR;MAILO,GAAG,EAAGC,CAAD,IAAOR;IAJP,CAAP;EAMD;;EAED,IAAIE,IAAI,KAAKf,iBAAiB,CAACsB,QAA/B,EAAyC;IACvC,MAAMC,IAAI,GAAIV,CAAD,IAAY;MACvB,OAAQ,YAAWR,MAAM,CAACS,KAAM,OAAMD,CAAE,GAAxC;IACD,CAFD;;IAGA,IAAI,CAACP,KAAL,EAAY;MACVO,CAAC,GAAGU,IAAI,CAAC,EAAD,CAAR;MACA,OAAO;QACLN,SAAS,EAAE,IADN;QAELH,KAAK,EAAED,CAFF;QAGLM,KAAK,EAAE,MAAMN,CAHR;QAILO,GAAG,EAAGC,CAAD,IAAOR;MAJP,CAAP;IAMD;;IACD,OAAO;MACLP,KADK;MAELc,GAAG,EAAGC,CAAD,IAAOE,IAAI,CAACjB,KAAK,CAACkB,MAAN,CAAaJ,GAAb,CAAiBC,CAAjB,CAAD,CAFX;MAGLF,KAAK,EAAE,MAAMI,IAAI,CAACrB,wBAAwB,CAACI,KAAD,CAAzB;IAHZ,CAAP;EAKD;;EAED,IAAI,CAACA,KAAL,EAAY;IACV,OAAO;MACLW,SAAS,EAAE,IADN;MAELH,KAAK,EAAED,CAFF;MAGLM,KAAK,EAAE,MAAMN,CAHR;MAILO,GAAG,EAAGC,CAAD,IAAOR;IAJP,CAAP;EAMD;;EAED,IAAIU,IAAI,GAAIV,CAAD,IAAYd,sBAAsB,CAACO,KAAK,CAACmB,OAAN,CAAeZ,CAAf,CAAD,CAA7C;;EACA,OAAO;IACLP,KADK;IAELc,GAAG,EAAGC,CAAD,IAAOE,IAAI,CAACjB,KAAK,CAACkB,MAAN,CAAaJ,GAAb,CAAiBC,CAAjB,CAAD,CAFX;IAGLF,KAAK,EAAE,MAAMI,IAAI,CAACrB,wBAAwB,CAACI,KAAD,CAAzB;EAHZ,CAAP;AAKD"},"metadata":{},"sourceType":"module"}