{"ast":null,"code":"// Based on work https://github.com/mohsen1/json-formatter-js\n// License MIT, Copyright (c) 2015 Mohsen Azimi\n\n/*\n * Escapes `\"` characters from string\n */\nexport function formatString(str) {\n  return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n}\n/*\n * Determines if a value is an object\n */\n\nexport function isObject(value) {\n  const type = typeof value;\n  return !!value && type === 'object';\n}\n/*\n * Gets constructor name of an object.\n * From http://stackoverflow.com/a/332429\n *\n */\n\nexport function getObjectName(object) {\n  if (object === undefined) {\n    return '';\n  }\n\n  if (object === null) {\n    return 'Object';\n  }\n\n  if (typeof object === 'object' && !object.constructor) {\n    return 'Object';\n  }\n\n  const funcNameRegex = /function ([^(]*)/;\n  const results = funcNameRegex.exec(object.constructor.toString());\n\n  if (results && results.length > 1) {\n    return results[1];\n  } else {\n    return '';\n  }\n}\n/*\n * Gets type of an object. Returns \"null\" for null objects\n */\n\nexport function getType(object) {\n  if (object === null) {\n    return 'null';\n  }\n\n  return typeof object;\n}\n/*\n * Generates inline preview for a JavaScript object based on a value\n */\n\nexport function getValuePreview(object, value) {\n  const type = getType(object);\n\n  if (type === 'null' || type === 'undefined') {\n    return type;\n  }\n\n  if (type === 'string') {\n    value = '\"' + formatString(value) + '\"';\n  }\n\n  if (type === 'function') {\n    // Remove content of the function\n    return object.toString().replace(/[\\r\\n]/g, '').replace(/\\{.*\\}/, '') + '{…}';\n  }\n\n  return value;\n}\n/*\n * Generates inline preview for a JavaScript object\n */\n\nlet value = '';\nexport function getPreview(obj) {\n  if (isObject(obj)) {\n    value = getObjectName(obj);\n\n    if (Array.isArray(obj)) {\n      value += '[' + obj.length + ']';\n    }\n  } else {\n    value = getValuePreview(obj, obj.toString());\n  }\n\n  return value;\n}\n/*\n * Generates a prefixed CSS class name\n */\n\nexport function cssClass(className) {\n  return `json-formatter-${className}`;\n}\n/*\n * Creates a new DOM element with given type and class\n * TODO: move me to helpers\n */\n\nexport function createElement(type, className, content) {\n  const el = document.createElement(type);\n\n  if (className) {\n    el.classList.add(cssClass(className));\n  }\n\n  if (content !== undefined) {\n    if (content instanceof Node) {\n      el.appendChild(content);\n    } else {\n      el.appendChild(document.createTextNode(String(content)));\n    }\n  }\n\n  return el;\n}","map":{"version":3,"names":["formatString","str","replace","isObject","value","type","getObjectName","object","undefined","constructor","funcNameRegex","results","exec","toString","length","getType","getValuePreview","getPreview","obj","Array","isArray","cssClass","className","createElement","content","el","document","classList","add","Node","appendChild","createTextNode","String"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/JSONFormatter/json_explorer/helpers.ts"],"sourcesContent":["// Based on work https://github.com/mohsen1/json-formatter-js\n// License MIT, Copyright (c) 2015 Mohsen Azimi\n\n/*\n * Escapes `\"` characters from string\n */\nexport function formatString(str: string): string {\n  return str.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"');\n}\n\n/*\n * Determines if a value is an object\n */\nexport function isObject(value: any): boolean {\n  const type = typeof value;\n  return !!value && type === 'object';\n}\n\n/*\n * Gets constructor name of an object.\n * From http://stackoverflow.com/a/332429\n *\n */\nexport function getObjectName(object: object): string {\n  if (object === undefined) {\n    return '';\n  }\n  if (object === null) {\n    return 'Object';\n  }\n  if (typeof object === 'object' && !object.constructor) {\n    return 'Object';\n  }\n\n  const funcNameRegex = /function ([^(]*)/;\n  const results = funcNameRegex.exec(object.constructor.toString());\n  if (results && results.length > 1) {\n    return results[1];\n  } else {\n    return '';\n  }\n}\n\n/*\n * Gets type of an object. Returns \"null\" for null objects\n */\nexport function getType(object: object): string {\n  if (object === null) {\n    return 'null';\n  }\n  return typeof object;\n}\n\n/*\n * Generates inline preview for a JavaScript object based on a value\n */\nexport function getValuePreview(object: object, value: string): string {\n  const type = getType(object);\n\n  if (type === 'null' || type === 'undefined') {\n    return type;\n  }\n\n  if (type === 'string') {\n    value = '\"' + formatString(value) + '\"';\n  }\n  if (type === 'function') {\n    // Remove content of the function\n    return (\n      object\n        .toString()\n        .replace(/[\\r\\n]/g, '')\n        .replace(/\\{.*\\}/, '') + '{…}'\n    );\n  }\n  return value;\n}\n\n/*\n * Generates inline preview for a JavaScript object\n */\nlet value = '';\nexport function getPreview(obj: object): string {\n  if (isObject(obj)) {\n    value = getObjectName(obj);\n    if (Array.isArray(obj)) {\n      value += '[' + obj.length + ']';\n    }\n  } else {\n    value = getValuePreview(obj, obj.toString());\n  }\n  return value;\n}\n\n/*\n * Generates a prefixed CSS class name\n */\nexport function cssClass(className: string): string {\n  return `json-formatter-${className}`;\n}\n\n/*\n * Creates a new DOM element with given type and class\n * TODO: move me to helpers\n */\nexport function createElement(type: string, className?: string, content?: Element | string): Element {\n  const el = document.createElement(type);\n  if (className) {\n    el.classList.add(cssClass(className));\n  }\n  if (content !== undefined) {\n    if (content instanceof Node) {\n      el.appendChild(content);\n    } else {\n      el.appendChild(document.createTextNode(String(content)));\n    }\n  }\n  return el;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}