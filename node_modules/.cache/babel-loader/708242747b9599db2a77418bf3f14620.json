{"ast":null,"code":"import { SortOrder } from '@grafana/schema';\n/** @internal */\n\nexport function moveItemImmutably(arr, from, to) {\n  const clone = [...arr];\n  Array.prototype.splice.call(clone, to, 0, Array.prototype.splice.call(clone, from, 1)[0]);\n  return clone;\n}\n/**\n * Given a sort order and a value, return a function that can be used to sort values\n * Null/undefined/empty string values are always sorted to the end regardless of the sort order provided\n */\n\nconst collator = new Intl.Collator(undefined, {\n  numeric: true,\n  sensitivity: 'base'\n});\n\nconst numericCompare = (a, b) => a - b;\n\nexport function sortValues(sort) {\n  return (a, b) => {\n    if (a === b) {\n      return 0;\n    }\n\n    if (b == null || typeof b === 'string' && b.trim() === '') {\n      return -1;\n    }\n\n    if (a == null || typeof a === 'string' && (a === null || a === void 0 ? void 0 : a.trim()) === '') {\n      return 1;\n    }\n\n    let compareFn = collator.compare;\n\n    if (typeof a === 'number' && typeof b === 'number') {\n      compareFn = numericCompare;\n    }\n\n    if (sort === SortOrder.Descending) {\n      return compareFn(b, a);\n    }\n\n    return compareFn(a, b);\n  };\n}","map":{"version":3,"names":["SortOrder","moveItemImmutably","arr","from","to","clone","Array","prototype","splice","call","collator","Intl","Collator","undefined","numeric","sensitivity","numericCompare","a","b","sortValues","sort","trim","compareFn","compare","Descending"],"sources":["/home/soula/grafana/packages/grafana-data/src/utils/arrayUtils.ts"],"sourcesContent":["import { SortOrder } from '@grafana/schema';\n\n/** @internal */\nexport function moveItemImmutably<T>(arr: T[], from: number, to: number) {\n  const clone = [...arr];\n  Array.prototype.splice.call(clone, to, 0, Array.prototype.splice.call(clone, from, 1)[0]);\n  return clone;\n}\n\n/**\n * Given a sort order and a value, return a function that can be used to sort values\n * Null/undefined/empty string values are always sorted to the end regardless of the sort order provided\n */\nconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\nconst numericCompare = (a: number, b: number) => a - b;\n\nexport function sortValues(sort: SortOrder.Ascending | SortOrder.Descending) {\n  return (a: any, b: any) => {\n    if (a === b) {\n      return 0;\n    }\n\n    if (b == null || (typeof b === 'string' && b.trim() === '')) {\n      return -1;\n    }\n    if (a == null || (typeof a === 'string' && a?.trim() === '')) {\n      return 1;\n    }\n\n    let compareFn: (a: any, b: any) => number = collator.compare;\n\n    if (typeof a === 'number' && typeof b === 'number') {\n      compareFn = numericCompare;\n    }\n\n    if (sort === SortOrder.Descending) {\n      return compareFn(b, a);\n    }\n\n    return compareFn(a, b);\n  };\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AAEA;;AACA,OAAO,SAASC,iBAAT,CAA8BC,GAA9B,EAAwCC,IAAxC,EAAsDC,EAAtD,EAAkE;EACvE,MAAMC,KAAK,GAAG,CAAC,GAAGH,GAAJ,CAAd;EACAI,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC,IAAvB,CAA4BJ,KAA5B,EAAmCD,EAAnC,EAAuC,CAAvC,EAA0CE,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC,IAAvB,CAA4BJ,KAA5B,EAAmCF,IAAnC,EAAyC,CAAzC,EAA4C,CAA5C,CAA1C;EACA,OAAOE,KAAP;AACD;AAED;AACA;AACA;AACA;;AACA,MAAMK,QAAQ,GAAG,IAAIC,IAAI,CAACC,QAAT,CAAkBC,SAAlB,EAA6B;EAAEC,OAAO,EAAE,IAAX;EAAiBC,WAAW,EAAE;AAA9B,CAA7B,CAAjB;;AACA,MAAMC,cAAc,GAAG,CAACC,CAAD,EAAYC,CAAZ,KAA0BD,CAAC,GAAGC,CAArD;;AAEA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAAsE;EAC3E,OAAO,CAACH,CAAD,EAASC,CAAT,KAAoB;IACzB,IAAID,CAAC,KAAKC,CAAV,EAAa;MACX,OAAO,CAAP;IACD;;IAED,IAAIA,CAAC,IAAI,IAAL,IAAc,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACG,IAAF,OAAa,EAAxD,EAA6D;MAC3D,OAAO,CAAC,CAAR;IACD;;IACD,IAAIJ,CAAC,IAAI,IAAL,IAAc,OAAOA,CAAP,KAAa,QAAb,IAAyB,CAAAA,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEI,IAAH,QAAc,EAAzD,EAA8D;MAC5D,OAAO,CAAP;IACD;;IAED,IAAIC,SAAqC,GAAGZ,QAAQ,CAACa,OAArD;;IAEA,IAAI,OAAON,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;MAClDI,SAAS,GAAGN,cAAZ;IACD;;IAED,IAAII,IAAI,KAAKpB,SAAS,CAACwB,UAAvB,EAAmC;MACjC,OAAOF,SAAS,CAACJ,CAAD,EAAID,CAAJ,CAAhB;IACD;;IAED,OAAOK,SAAS,CAACL,CAAD,EAAIC,CAAJ,CAAhB;EACD,CAvBD;AAwBD"},"metadata":{},"sourceType":"module"}