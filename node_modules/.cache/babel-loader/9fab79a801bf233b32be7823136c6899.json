{"ast":null,"code":"export const getDataSources = state => {\n  const regex = new RegExp(state.searchQuery, 'i');\n  return state.dataSources.filter(dataSource => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\nexport const getDataSourcePlugins = state => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n  return state.plugins.filter(type => {\n    return regex.test(type.name);\n  });\n};\nexport const getDataSource = (state, dataSourceId) => {\n  if (state.dataSource.uid === dataSourceId) {\n    return state.dataSource;\n  }\n\n  return {};\n};\nexport const getDataSourceMeta = (state, type) => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {};\n};\nexport const getDataSourcesSearchQuery = state => state.searchQuery;\nexport const getDataSourcesLayoutMode = state => state.layoutMode;\nexport const getDataSourcesCount = state => state.dataSourcesCount;","map":{"version":3,"names":["getDataSources","state","regex","RegExp","searchQuery","dataSources","filter","dataSource","test","name","database","type","getDataSourcePlugins","dataSourceTypeSearchQuery","plugins","getDataSource","dataSourceId","uid","getDataSourceMeta","dataSourceMeta","id","getDataSourcesSearchQuery","getDataSourcesLayoutMode","layoutMode","getDataSourcesCount","dataSourcesCount"],"sources":["/home/soula/grafana/public/app/features/datasources/state/selectors.ts"],"sourcesContent":["import { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\n\nimport { DataSourcesState } from '../../../types/datasources';\n\nexport const getDataSources = (state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n};\n\nexport const getDataSourcePlugins = (state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n};\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.uid === dataSourceId) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\n"],"mappings":"AAIA,OAAO,MAAMA,cAAc,GAAIC,KAAD,IAA6B;EACzD,MAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAWF,KAAK,CAACG,WAAjB,EAA8B,GAA9B,CAAd;EAEA,OAAOH,KAAK,CAACI,WAAN,CAAkBC,MAAlB,CAA0BC,UAAD,IAAoC;IAClE,OAAOL,KAAK,CAACM,IAAN,CAAWD,UAAU,CAACE,IAAtB,KAA+BP,KAAK,CAACM,IAAN,CAAWD,UAAU,CAACG,QAAtB,CAA/B,IAAkER,KAAK,CAACM,IAAN,CAAWD,UAAU,CAACI,IAAtB,CAAzE;EACD,CAFM,CAAP;AAGD,CANM;AAQP,OAAO,MAAMC,oBAAoB,GAAIX,KAAD,IAA6B;EAC/D,MAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAWF,KAAK,CAACY,yBAAjB,EAA4C,GAA5C,CAAd;EAEA,OAAOZ,KAAK,CAACa,OAAN,CAAcR,MAAd,CAAsBK,IAAD,IAAgC;IAC1D,OAAOT,KAAK,CAACM,IAAN,CAAWG,IAAI,CAACF,IAAhB,CAAP;EACD,CAFM,CAAP;AAGD,CANM;AAQP,OAAO,MAAMM,aAAa,GAAG,CAACd,KAAD,EAA0Be,YAA1B,KAA8E;EACzG,IAAIf,KAAK,CAACM,UAAN,CAAiBU,GAAjB,KAAyBD,YAA7B,EAA2C;IACzC,OAAOf,KAAK,CAACM,UAAb;EACD;;EACD,OAAO,EAAP;AACD,CALM;AAOP,OAAO,MAAMW,iBAAiB,GAAG,CAACjB,KAAD,EAA0BU,IAA1B,KAAiE;EAChG,IAAIV,KAAK,CAACkB,cAAN,CAAqBC,EAArB,KAA4BT,IAAhC,EAAsC;IACpC,OAAOV,KAAK,CAACkB,cAAb;EACD;;EAED,OAAO,EAAP;AACD,CANM;AAQP,OAAO,MAAME,yBAAyB,GAAIpB,KAAD,IAA6BA,KAAK,CAACG,WAArE;AACP,OAAO,MAAMkB,wBAAwB,GAAIrB,KAAD,IAA6BA,KAAK,CAACsB,UAApE;AACP,OAAO,MAAMC,mBAAmB,GAAIvB,KAAD,IAA6BA,KAAK,CAACwB,gBAA/D"},"metadata":{},"sourceType":"module"}