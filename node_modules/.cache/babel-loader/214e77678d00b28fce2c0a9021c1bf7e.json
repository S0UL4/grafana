{"ast":null,"code":"/* eslint-disable react/jsx-no-undef */\nimport { css } from '@emotion/css';\nimport React, { useEffect, useRef, useCallback, useState } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport { useStyles2 } from '@grafana/ui';\nimport { SearchItem } from '../../components/SearchItem';\nimport { useSearchKeyboardNavigation } from '../../hooks/useSearchKeyboardSelection';\nimport { DashboardSearchItemType } from '../../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const SearchResultsCards = /*#__PURE__*/React.memo(({\n  response,\n  width,\n  height,\n  selection,\n  selectionToggle,\n  clearSelection,\n  onTagSelected,\n  onDatasourceChange,\n  keyboardEvents\n}) => {\n  const styles = useStyles2(getStyles);\n  const infiniteLoaderRef = useRef(null);\n  const [listEl, setListEl] = useState(null);\n  const highlightIndex = useSearchKeyboardNavigation(keyboardEvents, 0, response); // Scroll to the top and clear loader cache when the query results change\n\n  useEffect(() => {\n    if (infiniteLoaderRef.current) {\n      infiniteLoaderRef.current.resetloadMoreItemsCache();\n    }\n\n    if (listEl) {\n      listEl.scrollTo(0);\n    }\n  }, [response, listEl]);\n  const RenderRow = useCallback(({\n    index: rowIndex,\n    style\n  }) => {\n    var _response$view$dataFr, _item$tags;\n\n    const meta = (_response$view$dataFr = response.view.dataFrame.meta) === null || _response$view$dataFr === void 0 ? void 0 : _response$view$dataFr.custom;\n    let className = '';\n\n    if (rowIndex === highlightIndex.y) {\n      className += ' ' + styles.selectedRow;\n    }\n\n    const item = response.view.get(rowIndex);\n    let v = {\n      uid: item.uid,\n      title: item.name,\n      url: item.url,\n      uri: item.url,\n      type: item.kind === 'folder' ? DashboardSearchItemType.DashFolder : DashboardSearchItemType.DashDB,\n      id: 666,\n      // do not use me!\n      isStarred: false,\n      tags: (_item$tags = item.tags) !== null && _item$tags !== void 0 ? _item$tags : []\n    };\n\n    if (item.location) {\n      const first = item.location.split('/')[0];\n      const finfo = meta.locationInfo[first];\n\n      if (finfo) {\n        v.folderUid = item.location;\n        v.folderTitle = finfo.name;\n      }\n    }\n\n    if (selection && selectionToggle) {\n      const type = v.type === DashboardSearchItemType.DashFolder ? 'folder' : 'dashboard';\n      v = Object.assign({}, v, {\n        checked: selection(type, v.uid)\n      });\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      style: style,\n      className: className,\n      role: \"row\",\n      children: /*#__PURE__*/_jsx(SearchItem, {\n        item: v,\n        onTagSelected: onTagSelected,\n        onToggleChecked: item => {\n          if (selectionToggle) {\n            selectionToggle('dashboard', item.uid);\n          }\n        },\n        editable: Boolean(selection != null)\n      })\n    }, item.uid);\n  }, [response.view, highlightIndex, styles, onTagSelected, selection, selectionToggle]);\n\n  if (!response.totalRows) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: styles.noData,\n      style: {\n        width\n      },\n      children: \"No data\"\n    });\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    \"aria-label\": \"Search results list\",\n    style: {\n      width\n    },\n    role: \"list\",\n    children: /*#__PURE__*/_jsx(InfiniteLoader, {\n      ref: infiniteLoaderRef,\n      isItemLoaded: response.isItemLoaded,\n      itemCount: response.totalRows,\n      loadMoreItems: response.loadMoreItems,\n      children: ({\n        onItemsRendered,\n        ref\n      }) => /*#__PURE__*/_jsx(FixedSizeList, {\n        ref: innerRef => {\n          ref(innerRef);\n          setListEl(innerRef);\n        },\n        onItemsRendered: onItemsRendered,\n        height: height,\n        itemCount: response.totalRows,\n        itemSize: 72,\n        width: \"100%\",\n        style: {\n          overflow: 'hidden auto'\n        },\n        children: RenderRow\n      })\n    })\n  });\n});\nSearchResultsCards.displayName = 'SearchResultsCards';\n\nconst getStyles = theme => {\n  return {\n    noData: css`\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      height: 100%;\n    `,\n    selectedRow: css`\n      border-left: 3px solid ${theme.colors.primary.border};\n    `\n  };\n};","map":{"version":3,"names":["css","React","useEffect","useRef","useCallback","useState","FixedSizeList","InfiniteLoader","useStyles2","SearchItem","useSearchKeyboardNavigation","DashboardSearchItemType","SearchResultsCards","memo","response","width","height","selection","selectionToggle","clearSelection","onTagSelected","onDatasourceChange","keyboardEvents","styles","getStyles","infiniteLoaderRef","listEl","setListEl","highlightIndex","current","resetloadMoreItemsCache","scrollTo","RenderRow","index","rowIndex","style","meta","view","dataFrame","custom","className","y","selectedRow","item","get","v","uid","title","name","url","uri","type","kind","DashFolder","DashDB","id","isStarred","tags","location","first","split","finfo","locationInfo","folderUid","folderTitle","checked","Boolean","totalRows","noData","isItemLoaded","loadMoreItems","onItemsRendered","ref","innerRef","overflow","displayName","theme","colors","primary","border"],"sources":["/home/soula/grafana/public/app/features/search/page/components/SearchResultsCards.tsx"],"sourcesContent":["/* eslint-disable react/jsx-no-undef */\nimport { css } from '@emotion/css';\nimport React, { useEffect, useRef, useCallback, useState } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { SearchItem } from '../../components/SearchItem';\nimport { useSearchKeyboardNavigation } from '../../hooks/useSearchKeyboardSelection';\nimport { SearchResultMeta } from '../../service';\nimport { DashboardSearchItemType, DashboardSectionItem } from '../../types';\n\nimport { SearchResultsProps } from './SearchResultsTable';\n\nexport const SearchResultsCards = React.memo(\n  ({\n    response,\n    width,\n    height,\n    selection,\n    selectionToggle,\n    clearSelection,\n    onTagSelected,\n    onDatasourceChange,\n    keyboardEvents,\n  }: SearchResultsProps) => {\n    const styles = useStyles2(getStyles);\n    const infiniteLoaderRef = useRef<InfiniteLoader>(null);\n    const [listEl, setListEl] = useState<FixedSizeList | null>(null);\n    const highlightIndex = useSearchKeyboardNavigation(keyboardEvents, 0, response);\n\n    // Scroll to the top and clear loader cache when the query results change\n    useEffect(() => {\n      if (infiniteLoaderRef.current) {\n        infiniteLoaderRef.current.resetloadMoreItemsCache();\n      }\n      if (listEl) {\n        listEl.scrollTo(0);\n      }\n    }, [response, listEl]);\n\n    const RenderRow = useCallback(\n      ({ index: rowIndex, style }) => {\n        const meta = response.view.dataFrame.meta?.custom as SearchResultMeta;\n\n        let className = '';\n        if (rowIndex === highlightIndex.y) {\n          className += ' ' + styles.selectedRow;\n        }\n\n        const item = response.view.get(rowIndex);\n        let v: DashboardSectionItem = {\n          uid: item.uid,\n          title: item.name,\n          url: item.url,\n          uri: item.url,\n          type: item.kind === 'folder' ? DashboardSearchItemType.DashFolder : DashboardSearchItemType.DashDB,\n          id: 666, // do not use me!\n          isStarred: false,\n          tags: item.tags ?? [],\n        };\n\n        if (item.location) {\n          const first = item.location.split('/')[0];\n          const finfo = meta.locationInfo[first];\n          if (finfo) {\n            v.folderUid = item.location;\n            v.folderTitle = finfo.name;\n          }\n        }\n\n        if (selection && selectionToggle) {\n          const type = v.type === DashboardSearchItemType.DashFolder ? 'folder' : 'dashboard';\n          v = {\n            ...v,\n            checked: selection(type, v.uid!),\n          };\n        }\n        return (\n          <div style={style} key={item.uid} className={className} role=\"row\">\n            <SearchItem\n              item={v}\n              onTagSelected={onTagSelected}\n              onToggleChecked={(item) => {\n                if (selectionToggle) {\n                  selectionToggle('dashboard', item.uid!);\n                }\n              }}\n              editable={Boolean(selection != null)}\n            />\n          </div>\n        );\n      },\n      [response.view, highlightIndex, styles, onTagSelected, selection, selectionToggle]\n    );\n\n    if (!response.totalRows) {\n      return (\n        <div className={styles.noData} style={{ width }}>\n          No data\n        </div>\n      );\n    }\n\n    return (\n      <div aria-label=\"Search results list\" style={{ width }} role=\"list\">\n        <InfiniteLoader\n          ref={infiniteLoaderRef}\n          isItemLoaded={response.isItemLoaded}\n          itemCount={response.totalRows}\n          loadMoreItems={response.loadMoreItems}\n        >\n          {({ onItemsRendered, ref }) => (\n            <FixedSizeList\n              ref={(innerRef) => {\n                ref(innerRef);\n                setListEl(innerRef);\n              }}\n              onItemsRendered={onItemsRendered}\n              height={height}\n              itemCount={response.totalRows}\n              itemSize={72}\n              width=\"100%\"\n              style={{ overflow: 'hidden auto' }}\n            >\n              {RenderRow}\n            </FixedSizeList>\n          )}\n        </InfiniteLoader>\n      </div>\n    );\n  }\n);\nSearchResultsCards.displayName = 'SearchResultsCards';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    noData: css`\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      height: 100%;\n    `,\n    selectedRow: css`\n      border-left: 3px solid ${theme.colors.primary.border};\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}