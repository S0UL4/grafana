{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { LanguageProvider } from '@grafana/data';\nexport default class TempoLanguageProvider extends LanguageProvider {\n  constructor(datasource, initialValues) {\n    super();\n\n    _defineProperty(this, \"datasource\", void 0);\n\n    _defineProperty(this, \"tags\", void 0);\n\n    _defineProperty(this, \"request\", async (url, params = {}) => {\n      const res = await this.datasource.metadataRequest(url, params);\n      return res === null || res === void 0 ? void 0 : res.data;\n    });\n\n    _defineProperty(this, \"start\", async () => {\n      await this.fetchTags();\n      return [];\n    });\n\n    _defineProperty(this, \"provideCompletionItems\", async ({\n      prefix,\n      text,\n      value,\n      labelKey,\n      wrapperClasses\n    }, context = {\n      history: []\n    }) => {\n      const emptyResult = {\n        suggestions: []\n      };\n\n      if (!value) {\n        return emptyResult;\n      }\n\n      const query = value.endText.getText();\n      const isValue = query[query.indexOf(text) - 1] === '=';\n\n      if (isValue || text === '=') {\n        return this.getTagValueCompletionItems(value);\n      }\n\n      return this.getTagsCompletionItems();\n    });\n\n    _defineProperty(this, \"getTagsCompletionItems\", () => {\n      const {\n        tags\n      } = this;\n      const suggestions = [];\n\n      if (tags !== null && tags !== void 0 && tags.length) {\n        suggestions.push({\n          label: `Tag`,\n          items: tags.map(tag => ({\n            label: tag\n          }))\n        });\n      }\n\n      return {\n        suggestions\n      };\n    });\n\n    this.datasource = datasource;\n    Object.assign(this, initialValues);\n  }\n\n  async fetchTags() {\n    const response = await this.request('/api/search/tags', []);\n    this.tags = response.tagNames;\n  }\n\n  async getTagValueCompletionItems(value) {\n    var _tags;\n\n    const tags = value.endText.getText().split(' ');\n    let tagName = (_tags = tags[tags.length - 1]) !== null && _tags !== void 0 ? _tags : '';\n    tagName = tagName.split('=')[0];\n    const response = await this.request(`/api/search/tag/${tagName}/values`, []);\n    const suggestions = [];\n\n    if (response && response.tagValues) {\n      suggestions.push({\n        label: `Tag Values`,\n        items: response.tagValues.map(tagValue => ({\n          label: tagValue\n        }))\n      });\n    }\n\n    return {\n      suggestions\n    };\n  }\n\n  async getOptions(tag) {\n    const response = await this.request(`/api/search/tag/${tag}/values`);\n    let options = [];\n\n    if (response && response.tagValues) {\n      options = response.tagValues.map(v => ({\n        value: v,\n        label: v\n      }));\n    }\n\n    return options;\n  }\n\n}","map":{"version":3,"names":["LanguageProvider","TempoLanguageProvider","constructor","datasource","initialValues","url","params","res","metadataRequest","data","fetchTags","prefix","text","value","labelKey","wrapperClasses","context","history","emptyResult","suggestions","query","endText","getText","isValue","indexOf","getTagValueCompletionItems","getTagsCompletionItems","tags","length","push","label","items","map","tag","Object","assign","response","request","tagNames","split","tagName","tagValues","tagValue","getOptions","options","v"],"sources":["/home/soula/grafana/public/app/plugins/datasource/tempo/language_provider.ts"],"sourcesContent":["import { Value } from 'slate';\n\nimport { HistoryItem, LanguageProvider, SelectableValue } from '@grafana/data';\nimport { CompletionItemGroup, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport { TempoDatasource } from './datasource';\n\nexport default class TempoLanguageProvider extends LanguageProvider {\n  datasource: TempoDatasource;\n  tags?: string[];\n  constructor(datasource: TempoDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    Object.assign(this, initialValues);\n  }\n\n  request = async (url: string, params = {}) => {\n    const res = await this.datasource.metadataRequest(url, params);\n    return res?.data;\n  };\n\n  start = async () => {\n    await this.fetchTags();\n    return [];\n  };\n\n  async fetchTags() {\n    const response = await this.request('/api/search/tags', []);\n    this.tags = response.tagNames;\n  }\n\n  provideCompletionItems = async (\n    { prefix, text, value, labelKey, wrapperClasses }: TypeaheadInput,\n    context: { history: Array<HistoryItem<any>> } = { history: [] }\n  ): Promise<TypeaheadOutput> => {\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    const query = value.endText.getText();\n    const isValue = query[query.indexOf(text) - 1] === '=';\n    if (isValue || text === '=') {\n      return this.getTagValueCompletionItems(value);\n    }\n    return this.getTagsCompletionItems();\n  };\n\n  getTagsCompletionItems = (): TypeaheadOutput => {\n    const { tags } = this;\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (tags?.length) {\n      suggestions.push({\n        label: `Tag`,\n        items: tags.map((tag) => ({ label: tag })),\n      });\n    }\n\n    return { suggestions };\n  };\n\n  async getTagValueCompletionItems(value: Value) {\n    const tags = value.endText.getText().split(' ');\n\n    let tagName = tags[tags.length - 1] ?? '';\n    tagName = tagName.split('=')[0];\n\n    const response = await this.request(`/api/search/tag/${tagName}/values`, []);\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (response && response.tagValues) {\n      suggestions.push({\n        label: `Tag Values`,\n        items: response.tagValues.map((tagValue: string) => ({ label: tagValue })),\n      });\n    }\n    return { suggestions };\n  }\n\n  async getOptions(tag: string): Promise<Array<SelectableValue<string>>> {\n    const response = await this.request(`/api/search/tag/${tag}/values`);\n    let options: Array<SelectableValue<string>> = [];\n\n    if (response && response.tagValues) {\n      options = response.tagValues.map((v: string) => ({\n        value: v,\n        label: v,\n      }));\n    }\n\n    return options;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}