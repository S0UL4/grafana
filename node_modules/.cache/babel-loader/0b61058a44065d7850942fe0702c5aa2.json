{"ast":null,"code":"var _InlineFormLabel, _h;\n\nimport React from 'react';\nimport { onUpdateDatasourceJsonDataOptionChecked, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { InlineField, InlineSwitch, EventsWithValidation, InlineFormLabel, LegacyForms, regexValidation } from '@grafana/ui';\nimport { ExemplarsSettings } from './ExemplarsSettings';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst {\n  Select,\n  Input,\n  FormField\n} = LegacyForms;\nconst httpOptions = [{\n  value: 'POST',\n  label: 'POST'\n}, {\n  value: 'GET',\n  label: 'GET'\n}];\nexport const PromSettings = props => {\n  var _options$jsonData$dis;\n\n  const {\n    options,\n    onOptionsChange\n  } = props; // We are explicitly adding httpMethod so it is correctly displayed in dropdown. This way, it is more predictable for users.\n\n  if (!options.jsonData.httpMethod) {\n    options.jsonData.httpMethod = 'POST';\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"gf-form-group\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form\",\n          children: /*#__PURE__*/_jsx(FormField, {\n            label: \"Scrape interval\",\n            labelWidth: 13,\n            inputEl: /*#__PURE__*/_jsx(Input, {\n              className: \"width-6\",\n              value: options.jsonData.timeInterval,\n              spellCheck: false,\n              placeholder: \"15s\",\n              onChange: onChangeHandler('timeInterval', options, onOptionsChange),\n              validationEvents: promSettingsValidationEvents\n            }),\n            tooltip: \"Set this to the typical scrape and evaluation interval configured in Prometheus. Defaults to 15s.\"\n          })\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form\",\n          children: /*#__PURE__*/_jsx(FormField, {\n            label: \"Query timeout\",\n            labelWidth: 13,\n            inputEl: /*#__PURE__*/_jsx(Input, {\n              className: \"width-6\",\n              value: options.jsonData.queryTimeout,\n              onChange: onChangeHandler('queryTimeout', options, onOptionsChange),\n              spellCheck: false,\n              placeholder: \"60s\",\n              validationEvents: promSettingsValidationEvents\n            }),\n            tooltip: \"Set the Prometheus query timeout.\"\n          })\n        })\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form\",\n        children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/_jsx(InlineFormLabel, {\n          width: 13,\n          tooltip: \"You can use either POST or GET HTTP method to query your Prometheus data source. POST is the recommended method as it allows bigger queries. Change this to GET if you have a Prometheus version older than 2.1 or if POST requests are restricted in your network.\",\n          children: \"HTTP Method\"\n        })), /*#__PURE__*/_jsx(Select, {\n          \"aria-label\": \"Select HTTP method\",\n          options: httpOptions,\n          value: httpOptions.find(o => o.value === options.jsonData.httpMethod),\n          onChange: onChangeHandler('httpMethod', options, onOptionsChange),\n          width: 7\n        })]\n      })]\n    }), _h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n      className: \"page-heading\",\n      children: \"Misc\"\n    })), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"gf-form-group\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form\",\n        children: /*#__PURE__*/_jsx(InlineField, {\n          labelWidth: 28,\n          label: \"Disable metrics lookup\",\n          tooltip: \"Checking this option will disable the metrics chooser and metric/label support in the query field's autocomplete. This helps if you have performance issues with bigger Prometheus instances.\",\n          children: /*#__PURE__*/_jsx(InlineSwitch, {\n            value: (_options$jsonData$dis = options.jsonData.disableMetricsLookup) !== null && _options$jsonData$dis !== void 0 ? _options$jsonData$dis : false,\n            onChange: onUpdateDatasourceJsonDataOptionChecked(props, 'disableMetricsLookup')\n          })\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form max-width-30\",\n          children: /*#__PURE__*/_jsx(FormField, {\n            label: \"Custom query parameters\",\n            labelWidth: 14,\n            tooltip: \"Add Custom parameters to all Prometheus or Thanos queries.\",\n            inputEl: /*#__PURE__*/_jsx(Input, {\n              className: \"width-25\",\n              value: options.jsonData.customQueryParameters,\n              onChange: onChangeHandler('customQueryParameters', options, onOptionsChange),\n              spellCheck: false,\n              placeholder: \"Example: max_source_resolution=5m&timeout=10\"\n            })\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(ExemplarsSettings, {\n      options: options.jsonData.exemplarTraceIdDestinations,\n      onChange: exemplarOptions => updateDatasourcePluginJsonDataOption({\n        onOptionsChange,\n        options\n      }, 'exemplarTraceIdDestinations', exemplarOptions)\n    })]\n  });\n};\nexport const promSettingsValidationEvents = {\n  [EventsWithValidation.onBlur]: [regexValidation(/^$|^\\d+(ms|[Mwdhmsy])$/, 'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s')]\n};\nexport const getValueFromEventItem = eventItem => {\n  if (!eventItem) {\n    return '';\n  }\n\n  if (eventItem.hasOwnProperty('currentTarget')) {\n    return eventItem.currentTarget.value;\n  }\n\n  return eventItem.value;\n};\n\nconst onChangeHandler = (key, options, onOptionsChange) => eventItem => {\n  onOptionsChange(Object.assign({}, options, {\n    jsonData: Object.assign({}, options.jsonData, {\n      [key]: getValueFromEventItem(eventItem)\n    })\n  }));\n};","map":{"version":3,"names":["React","onUpdateDatasourceJsonDataOptionChecked","updateDatasourcePluginJsonDataOption","InlineField","InlineSwitch","EventsWithValidation","InlineFormLabel","LegacyForms","regexValidation","ExemplarsSettings","Select","Input","FormField","httpOptions","value","label","PromSettings","props","options","onOptionsChange","jsonData","httpMethod","timeInterval","onChangeHandler","promSettingsValidationEvents","queryTimeout","find","o","disableMetricsLookup","customQueryParameters","exemplarTraceIdDestinations","exemplarOptions","onBlur","getValueFromEventItem","eventItem","hasOwnProperty","currentTarget","key"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/configuration/PromSettings.tsx"],"sourcesContent":["import React, { SyntheticEvent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionChecked,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport {\n  InlineField,\n  InlineSwitch,\n  EventsWithValidation,\n  InlineFormLabel,\n  LegacyForms,\n  regexValidation,\n} from '@grafana/ui';\n\nimport { PromOptions } from '../types';\n\nimport { ExemplarsSettings } from './ExemplarsSettings';\nconst { Select, Input, FormField } = LegacyForms;\n\nconst httpOptions = [\n  { value: 'POST', label: 'POST' },\n  { value: 'GET', label: 'GET' },\n];\n\ntype Props = Pick<DataSourcePluginOptionsEditorProps<PromOptions>, 'options' | 'onOptionsChange'>;\n\nexport const PromSettings = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // We are explicitly adding httpMethod so it is correctly displayed in dropdown. This way, it is more predictable for users.\n\n  if (!options.jsonData.httpMethod) {\n    options.jsonData.httpMethod = 'POST';\n  }\n\n  return (\n    <>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Scrape interval\"\n              labelWidth={13}\n              inputEl={\n                <Input\n                  className=\"width-6\"\n                  value={options.jsonData.timeInterval}\n                  spellCheck={false}\n                  placeholder=\"15s\"\n                  onChange={onChangeHandler('timeInterval', options, onOptionsChange)}\n                  validationEvents={promSettingsValidationEvents}\n                />\n              }\n              tooltip=\"Set this to the typical scrape and evaluation interval configured in Prometheus. Defaults to 15s.\"\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Query timeout\"\n              labelWidth={13}\n              inputEl={\n                <Input\n                  className=\"width-6\"\n                  value={options.jsonData.queryTimeout}\n                  onChange={onChangeHandler('queryTimeout', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"60s\"\n                  validationEvents={promSettingsValidationEvents}\n                />\n              }\n              tooltip=\"Set the Prometheus query timeout.\"\n            />\n          </div>\n        </div>\n        <div className=\"gf-form\">\n          <InlineFormLabel\n            width={13}\n            tooltip=\"You can use either POST or GET HTTP method to query your Prometheus data source. POST is the recommended method as it allows bigger queries. Change this to GET if you have a Prometheus version older than 2.1 or if POST requests are restricted in your network.\"\n          >\n            HTTP Method\n          </InlineFormLabel>\n          <Select\n            aria-label=\"Select HTTP method\"\n            options={httpOptions}\n            value={httpOptions.find((o) => o.value === options.jsonData.httpMethod)}\n            onChange={onChangeHandler('httpMethod', options, onOptionsChange)}\n            width={7}\n          />\n        </div>\n      </div>\n      <h3 className=\"page-heading\">Misc</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <InlineField\n            labelWidth={28}\n            label=\"Disable metrics lookup\"\n            tooltip=\"Checking this option will disable the metrics chooser and metric/label support in the query field's autocomplete. This helps if you have performance issues with bigger Prometheus instances.\"\n          >\n            <InlineSwitch\n              value={options.jsonData.disableMetricsLookup ?? false}\n              onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableMetricsLookup')}\n            />\n          </InlineField>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form max-width-30\">\n            <FormField\n              label=\"Custom query parameters\"\n              labelWidth={14}\n              tooltip=\"Add Custom parameters to all Prometheus or Thanos queries.\"\n              inputEl={\n                <Input\n                  className=\"width-25\"\n                  value={options.jsonData.customQueryParameters}\n                  onChange={onChangeHandler('customQueryParameters', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"Example: max_source_resolution=5m&timeout=10\"\n                />\n              }\n            />\n          </div>\n        </div>\n      </div>\n      <ExemplarsSettings\n        options={options.jsonData.exemplarTraceIdDestinations}\n        onChange={(exemplarOptions) =>\n          updateDatasourcePluginJsonDataOption(\n            { onOptionsChange, options },\n            'exemplarTraceIdDestinations',\n            exemplarOptions\n          )\n        }\n      />\n    </>\n  );\n};\n\nexport const promSettingsValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    regexValidation(\n      /^$|^\\d+(ms|[Mwdhmsy])$/,\n      'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s'\n    ),\n  ],\n};\n\nexport const getValueFromEventItem = (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n  if (!eventItem) {\n    return '';\n  }\n\n  if (eventItem.hasOwnProperty('currentTarget')) {\n    return eventItem.currentTarget.value;\n  }\n\n  return (eventItem as SelectableValue<string>).value;\n};\n\nconst onChangeHandler =\n  (key: keyof PromOptions, options: Props['options'], onOptionsChange: Props['onOptionsChange']) =>\n  (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [key]: getValueFromEventItem(eventItem),\n      },\n    });\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}