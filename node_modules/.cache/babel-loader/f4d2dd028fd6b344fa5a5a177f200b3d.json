{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { mapInternalLinkToExplore } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport { TracePageHeader, TraceTimelineViewer } from '@jaegertracing/jaeger-ui-components';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\nimport { changePanelState } from '../state/explorePane';\nimport { createSpanLinkFactory } from './createSpanLink';\nimport { useChildrenState } from './useChildrenState';\nimport { useDetailState } from './useDetailState';\nimport { useHoverIndentGuide } from './useHoverIndentGuide';\nimport { useViewRange } from './useViewRange';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst getStyles = theme => ({\n  noDataMsg: css`\n    height: 100%;\n    width: 100%;\n    display: grid;\n    place-items: center;\n    font-size: ${theme.typography.h4.fontSize};\n    color: ${theme.colors.text.secondary};\n  `\n});\n\nfunction noop() {\n  return {};\n}\n\nexport function TraceView(props) {\n  var _props$dataFrames$, _props$traceProp2, _instanceSettings$jso, _instanceSettings$jso2, _props$dataFrames, _props$dataFrames$2, _props$dataFrames$2$m;\n\n  const {\n    spanFindMatches,\n    traceProp,\n    datasource,\n    topOfViewRef,\n    topOfViewRefType\n  } = props;\n  const {\n    detailStates,\n    toggleDetail,\n    detailLogItemToggle,\n    detailLogsToggle,\n    detailProcessToggle,\n    detailReferencesToggle,\n    detailReferenceItemToggle,\n    detailTagsToggle,\n    detailWarningsToggle,\n    detailStackTracesToggle\n  } = useDetailState(props.dataFrames[0]);\n  const {\n    removeHoverIndentGuideId,\n    addHoverIndentGuideId,\n    hoverIndentGuideIds\n  } = useHoverIndentGuide();\n  const {\n    viewRange,\n    updateViewRangeTime,\n    updateNextViewRangeTime\n  } = useViewRange();\n  const {\n    expandOne,\n    collapseOne,\n    childrenToggle,\n    collapseAll,\n    childrenHiddenIDs,\n    expandAll\n  } = useChildrenState();\n  const styles = useStyles2(getStyles);\n  /**\n   * Keeps state of resizable name column width\n   */\n\n  const [spanNameColumnWidth, setSpanNameColumnWidth] = useState(0.25);\n  /**\n   * State of the top minimap, slim means it is collapsed.\n   */\n\n  const [slim, setSlim] = useState(false);\n  const [focusedSpanId, createFocusSpanLink] = useFocusSpanLink({\n    refId: (_props$dataFrames$ = props.dataFrames[0]) === null || _props$dataFrames$ === void 0 ? void 0 : _props$dataFrames$.refId,\n    exploreId: props.exploreId,\n    datasource,\n    splitOpenFn: props.splitOpenFn\n  });\n  const traceTimeline = useMemo(() => {\n    var _props$traceProp;\n\n    return {\n      childrenHiddenIDs,\n      detailStates,\n      hoverIndentGuideIds,\n      shouldScrollToFirstUiFindMatch: false,\n      spanNameColumnWidth,\n      traceID: (_props$traceProp = props.traceProp) === null || _props$traceProp === void 0 ? void 0 : _props$traceProp.traceID\n    };\n  }, [childrenHiddenIDs, detailStates, hoverIndentGuideIds, spanNameColumnWidth, (_props$traceProp2 = props.traceProp) === null || _props$traceProp2 === void 0 ? void 0 : _props$traceProp2.traceID]);\n  const instanceSettings = getDatasourceSrv().getInstanceSettings(datasource === null || datasource === void 0 ? void 0 : datasource.name);\n  const traceToLogsOptions = instanceSettings === null || instanceSettings === void 0 ? void 0 : (_instanceSettings$jso = instanceSettings.jsonData) === null || _instanceSettings$jso === void 0 ? void 0 : _instanceSettings$jso.tracesToLogs;\n  const traceToMetricsOptions = instanceSettings === null || instanceSettings === void 0 ? void 0 : (_instanceSettings$jso2 = instanceSettings.jsonData) === null || _instanceSettings$jso2 === void 0 ? void 0 : _instanceSettings$jso2.tracesToMetrics;\n  const createSpanLink = useMemo(() => createSpanLinkFactory({\n    splitOpenFn: props.splitOpenFn,\n    traceToLogsOptions,\n    traceToMetricsOptions,\n    dataFrame: props.dataFrames[0],\n    createFocusSpanLink\n  }), [props.splitOpenFn, traceToLogsOptions, traceToMetricsOptions, props.dataFrames, createFocusSpanLink]);\n  const onSlimViewClicked = useCallback(() => setSlim(!slim), [slim]);\n  const timeZone = useSelector(state => getTimeZone(state.user));\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: (_props$dataFrames = props.dataFrames) !== null && _props$dataFrames !== void 0 && _props$dataFrames.length && ((_props$dataFrames$2 = props.dataFrames[0]) === null || _props$dataFrames$2 === void 0 ? void 0 : (_props$dataFrames$2$m = _props$dataFrames$2.meta) === null || _props$dataFrames$2$m === void 0 ? void 0 : _props$dataFrames$2$m.preferredVisualisationType) === 'trace' && traceProp ? /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(TracePageHeader, {\n        canCollapse: false,\n        hideMap: false,\n        hideSummary: false,\n        onSlimViewClicked: onSlimViewClicked,\n        onTraceGraphViewClicked: noop,\n        slimView: slim,\n        trace: traceProp,\n        updateNextViewRangeTime: updateNextViewRangeTime,\n        updateViewRangeTime: updateViewRangeTime,\n        viewRange: viewRange,\n        timeZone: timeZone\n      }), /*#__PURE__*/_jsx(TraceTimelineViewer, {\n        registerAccessors: noop,\n        scrollToFirstVisibleSpan: noop,\n        findMatchesIDs: spanFindMatches,\n        trace: traceProp,\n        traceTimeline: traceTimeline,\n        updateNextViewRangeTime: updateNextViewRangeTime,\n        updateViewRangeTime: updateViewRangeTime,\n        viewRange: viewRange,\n        timeZone: timeZone,\n        setSpanNameColumnWidth: setSpanNameColumnWidth,\n        collapseAll: collapseAll,\n        collapseOne: collapseOne,\n        expandAll: expandAll,\n        expandOne: expandOne,\n        childrenToggle: childrenToggle,\n        clearShouldScrollToFirstUiFindMatch: noop,\n        detailLogItemToggle: detailLogItemToggle,\n        detailLogsToggle: detailLogsToggle,\n        detailWarningsToggle: detailWarningsToggle,\n        detailStackTracesToggle: detailStackTracesToggle,\n        detailReferencesToggle: detailReferencesToggle,\n        detailReferenceItemToggle: detailReferenceItemToggle,\n        detailProcessToggle: detailProcessToggle,\n        detailTagsToggle: detailTagsToggle,\n        detailToggle: toggleDetail,\n        setTrace: noop,\n        addHoverIndentGuideId: addHoverIndentGuideId,\n        removeHoverIndentGuideId: removeHoverIndentGuideId,\n        linksGetter: noop,\n        uiFind: props.search,\n        createSpanLink: createSpanLink,\n        scrollElement: props.scrollElement,\n        focusedSpanId: focusedSpanId,\n        focusedSpanIdForSearch: props.focusedSpanIdForSearch,\n        createFocusSpanLink: createFocusSpanLink,\n        topOfViewRef: topOfViewRef,\n        topOfViewRefType: topOfViewRefType\n      })]\n    }) : /*#__PURE__*/_jsx(\"div\", {\n      className: styles.noDataMsg,\n      children: \"No data\"\n    })\n  });\n}\n/**\n * Handles focusing a span. Returns the span id to focus to based on what is in current explore state and also a\n * function to change the focused span id.\n * @param options\n */\n\nfunction useFocusSpanLink(options) {\n  const panelState = useSelector(state => {\n    var _state$explore$option;\n\n    return (_state$explore$option = state.explore[options.exploreId]) === null || _state$explore$option === void 0 ? void 0 : _state$explore$option.panelsState.trace;\n  });\n  const focusedSpanId = panelState === null || panelState === void 0 ? void 0 : panelState.spanId;\n  const dispatch = useDispatch();\n\n  const setFocusedSpanId = spanId => dispatch(changePanelState(options.exploreId, 'trace', Object.assign({}, panelState, {\n    spanId\n  })));\n\n  const query = useSelector(state => {\n    var _state$explore$option2;\n\n    return (_state$explore$option2 = state.explore[options.exploreId]) === null || _state$explore$option2 === void 0 ? void 0 : _state$explore$option2.queries.find(query => query.refId === options.refId);\n  });\n\n  const createFocusSpanLink = (traceId, spanId) => {\n    var _options$datasource, _options$datasource2;\n\n    const link = {\n      title: 'Deep link to this span',\n      url: '',\n      internal: {\n        datasourceUid: (_options$datasource = options.datasource) === null || _options$datasource === void 0 ? void 0 : _options$datasource.uid,\n        datasourceName: (_options$datasource2 = options.datasource) === null || _options$datasource2 === void 0 ? void 0 : _options$datasource2.name,\n        query: Object.assign({}, query, {\n          query: traceId\n        }),\n        panelsState: {\n          trace: {\n            spanId\n          }\n        }\n      }\n    }; // Check if the link is to a different trace or not.\n    // If it's the same trace, only update panel state with setFocusedSpanId (no navigation).\n    // If it's a different trace, use splitOpenFn to open a new explore panel\n\n    const sameTrace = (query === null || query === void 0 ? void 0 : query.queryType) === 'traceId' && query.query === traceId;\n    return mapInternalLinkToExplore({\n      link,\n      internalLink: link.internal,\n      scopedVars: {},\n      range: {},\n      field: {},\n      onClickFn: sameTrace ? () => setFocusedSpanId(focusedSpanId === spanId ? undefined : spanId) : options.splitOpenFn ? () => {\n        var _options$datasource3;\n\n        return options.splitOpenFn({\n          datasourceUid: (_options$datasource3 = options.datasource) === null || _options$datasource3 === void 0 ? void 0 : _options$datasource3.uid,\n          query: Object.assign({}, query, {\n            query: traceId\n          }),\n          panelsState: {\n            trace: {\n              spanId\n            }\n          }\n        });\n      } : undefined,\n      replaceVariables: getTemplateSrv().replace.bind(getTemplateSrv())\n    });\n  };\n\n  return [focusedSpanId, createFocusSpanLink];\n}","map":{"version":3,"names":["css","React","useCallback","useMemo","useState","useDispatch","useSelector","mapInternalLinkToExplore","getTemplateSrv","useStyles2","TracePageHeader","TraceTimelineViewer","getDatasourceSrv","getTimeZone","changePanelState","createSpanLinkFactory","useChildrenState","useDetailState","useHoverIndentGuide","useViewRange","getStyles","theme","noDataMsg","typography","h4","fontSize","colors","text","secondary","noop","TraceView","props","spanFindMatches","traceProp","datasource","topOfViewRef","topOfViewRefType","detailStates","toggleDetail","detailLogItemToggle","detailLogsToggle","detailProcessToggle","detailReferencesToggle","detailReferenceItemToggle","detailTagsToggle","detailWarningsToggle","detailStackTracesToggle","dataFrames","removeHoverIndentGuideId","addHoverIndentGuideId","hoverIndentGuideIds","viewRange","updateViewRangeTime","updateNextViewRangeTime","expandOne","collapseOne","childrenToggle","collapseAll","childrenHiddenIDs","expandAll","styles","spanNameColumnWidth","setSpanNameColumnWidth","slim","setSlim","focusedSpanId","createFocusSpanLink","useFocusSpanLink","refId","exploreId","splitOpenFn","traceTimeline","shouldScrollToFirstUiFindMatch","traceID","instanceSettings","getInstanceSettings","name","traceToLogsOptions","jsonData","tracesToLogs","traceToMetricsOptions","tracesToMetrics","createSpanLink","dataFrame","onSlimViewClicked","timeZone","state","user","length","meta","preferredVisualisationType","search","scrollElement","focusedSpanIdForSearch","options","panelState","explore","panelsState","trace","spanId","dispatch","setFocusedSpanId","query","queries","find","traceId","link","title","url","internal","datasourceUid","uid","datasourceName","sameTrace","queryType","internalLink","scopedVars","range","field","onClickFn","undefined","replaceVariables","replace","bind"],"sources":["/home/soula/grafana/public/app/features/explore/TraceView/TraceView.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { TopOfViewRefType } from '@jaegertracing/jaeger-ui-components/src/TraceTimelineViewer/VirtualizedTraceView';\nimport React, { RefObject, useCallback, useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  DataFrame,\n  DataLink,\n  DataQuery,\n  DataSourceApi,\n  DataSourceJsonData,\n  Field,\n  GrafanaTheme2,\n  LinkModel,\n  mapInternalLinkToExplore,\n  PanelData,\n  SplitOpen,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport { Trace, TracePageHeader, TraceTimelineViewer, TTraceTimeline } from '@jaegertracing/jaeger-ui-components';\nimport { TraceToLogsData } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { TraceToMetricsData } from 'app/core/components/TraceToMetrics/TraceToMetricsSettings';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getTimeZone } from 'app/features/profile/state/selectors';\nimport { TempoQuery } from 'app/plugins/datasource/tempo/datasource';\nimport { StoreState } from 'app/types';\nimport { ExploreId } from 'app/types/explore';\n\nimport { changePanelState } from '../state/explorePane';\n\nimport { createSpanLinkFactory } from './createSpanLink';\nimport { useChildrenState } from './useChildrenState';\nimport { useDetailState } from './useDetailState';\nimport { useHoverIndentGuide } from './useHoverIndentGuide';\nimport { useViewRange } from './useViewRange';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  noDataMsg: css`\n    height: 100%;\n    width: 100%;\n    display: grid;\n    place-items: center;\n    font-size: ${theme.typography.h4.fontSize};\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\nfunction noop(): {} {\n  return {};\n}\n\ntype Props = {\n  dataFrames: DataFrame[];\n  splitOpenFn?: SplitOpen;\n  exploreId?: ExploreId;\n  scrollElement?: Element;\n  traceProp: Trace;\n  spanFindMatches?: Set<string>;\n  search: string;\n  focusedSpanIdForSearch: string;\n  queryResponse: PanelData;\n  datasource: DataSourceApi<DataQuery, DataSourceJsonData, {}> | undefined;\n  topOfViewRef: RefObject<HTMLDivElement>;\n  topOfViewRefType: TopOfViewRefType;\n};\n\nexport function TraceView(props: Props) {\n  const { spanFindMatches, traceProp, datasource, topOfViewRef, topOfViewRefType } = props;\n\n  const {\n    detailStates,\n    toggleDetail,\n    detailLogItemToggle,\n    detailLogsToggle,\n    detailProcessToggle,\n    detailReferencesToggle,\n    detailReferenceItemToggle,\n    detailTagsToggle,\n    detailWarningsToggle,\n    detailStackTracesToggle,\n  } = useDetailState(props.dataFrames[0]);\n\n  const { removeHoverIndentGuideId, addHoverIndentGuideId, hoverIndentGuideIds } = useHoverIndentGuide();\n  const { viewRange, updateViewRangeTime, updateNextViewRangeTime } = useViewRange();\n  const { expandOne, collapseOne, childrenToggle, collapseAll, childrenHiddenIDs, expandAll } = useChildrenState();\n\n  const styles = useStyles2(getStyles);\n\n  /**\n   * Keeps state of resizable name column width\n   */\n  const [spanNameColumnWidth, setSpanNameColumnWidth] = useState(0.25);\n  /**\n   * State of the top minimap, slim means it is collapsed.\n   */\n  const [slim, setSlim] = useState(false);\n\n  const [focusedSpanId, createFocusSpanLink] = useFocusSpanLink({\n    refId: props.dataFrames[0]?.refId,\n    exploreId: props.exploreId!,\n    datasource,\n    splitOpenFn: props.splitOpenFn!,\n  });\n\n  const traceTimeline: TTraceTimeline = useMemo(\n    () => ({\n      childrenHiddenIDs,\n      detailStates,\n      hoverIndentGuideIds,\n      shouldScrollToFirstUiFindMatch: false,\n      spanNameColumnWidth,\n      traceID: props.traceProp?.traceID,\n    }),\n    [childrenHiddenIDs, detailStates, hoverIndentGuideIds, spanNameColumnWidth, props.traceProp?.traceID]\n  );\n\n  const instanceSettings = getDatasourceSrv().getInstanceSettings(datasource?.name);\n  const traceToLogsOptions = (instanceSettings?.jsonData as TraceToLogsData)?.tracesToLogs;\n  const traceToMetricsOptions = (instanceSettings?.jsonData as TraceToMetricsData)?.tracesToMetrics;\n\n  const createSpanLink = useMemo(\n    () =>\n      createSpanLinkFactory({\n        splitOpenFn: props.splitOpenFn!,\n        traceToLogsOptions,\n        traceToMetricsOptions,\n        dataFrame: props.dataFrames[0],\n        createFocusSpanLink,\n      }),\n    [props.splitOpenFn, traceToLogsOptions, traceToMetricsOptions, props.dataFrames, createFocusSpanLink]\n  );\n  const onSlimViewClicked = useCallback(() => setSlim(!slim), [slim]);\n  const timeZone = useSelector((state: StoreState) => getTimeZone(state.user));\n\n  return (\n    <>\n      {props.dataFrames?.length && props.dataFrames[0]?.meta?.preferredVisualisationType === 'trace' && traceProp ? (\n        <>\n          <TracePageHeader\n            canCollapse={false}\n            hideMap={false}\n            hideSummary={false}\n            onSlimViewClicked={onSlimViewClicked}\n            onTraceGraphViewClicked={noop}\n            slimView={slim}\n            trace={traceProp}\n            updateNextViewRangeTime={updateNextViewRangeTime}\n            updateViewRangeTime={updateViewRangeTime}\n            viewRange={viewRange}\n            timeZone={timeZone}\n          />\n          <TraceTimelineViewer\n            registerAccessors={noop}\n            scrollToFirstVisibleSpan={noop}\n            findMatchesIDs={spanFindMatches}\n            trace={traceProp}\n            traceTimeline={traceTimeline}\n            updateNextViewRangeTime={updateNextViewRangeTime}\n            updateViewRangeTime={updateViewRangeTime}\n            viewRange={viewRange}\n            timeZone={timeZone}\n            setSpanNameColumnWidth={setSpanNameColumnWidth}\n            collapseAll={collapseAll}\n            collapseOne={collapseOne}\n            expandAll={expandAll}\n            expandOne={expandOne}\n            childrenToggle={childrenToggle}\n            clearShouldScrollToFirstUiFindMatch={noop}\n            detailLogItemToggle={detailLogItemToggle}\n            detailLogsToggle={detailLogsToggle}\n            detailWarningsToggle={detailWarningsToggle}\n            detailStackTracesToggle={detailStackTracesToggle}\n            detailReferencesToggle={detailReferencesToggle}\n            detailReferenceItemToggle={detailReferenceItemToggle}\n            detailProcessToggle={detailProcessToggle}\n            detailTagsToggle={detailTagsToggle}\n            detailToggle={toggleDetail}\n            setTrace={noop}\n            addHoverIndentGuideId={addHoverIndentGuideId}\n            removeHoverIndentGuideId={removeHoverIndentGuideId}\n            linksGetter={noop as any}\n            uiFind={props.search}\n            createSpanLink={createSpanLink}\n            scrollElement={props.scrollElement}\n            focusedSpanId={focusedSpanId}\n            focusedSpanIdForSearch={props.focusedSpanIdForSearch!}\n            createFocusSpanLink={createFocusSpanLink}\n            topOfViewRef={topOfViewRef}\n            topOfViewRefType={topOfViewRefType}\n          />\n        </>\n      ) : (\n        <div className={styles.noDataMsg}>No data</div>\n      )}\n    </>\n  );\n}\n\n/**\n * Handles focusing a span. Returns the span id to focus to based on what is in current explore state and also a\n * function to change the focused span id.\n * @param options\n */\nfunction useFocusSpanLink(options: {\n  exploreId: ExploreId;\n  splitOpenFn: SplitOpen;\n  refId?: string;\n  datasource?: DataSourceApi;\n}): [string | undefined, (traceId: string, spanId: string) => LinkModel<Field>] {\n  const panelState = useSelector((state: StoreState) => state.explore[options.exploreId]?.panelsState.trace);\n  const focusedSpanId = panelState?.spanId;\n\n  const dispatch = useDispatch();\n  const setFocusedSpanId = (spanId?: string) =>\n    dispatch(\n      changePanelState(options.exploreId, 'trace', {\n        ...panelState,\n        spanId,\n      })\n    );\n\n  const query = useSelector((state: StoreState) =>\n    state.explore[options.exploreId]?.queries.find((query) => query.refId === options.refId)\n  );\n\n  const createFocusSpanLink = (traceId: string, spanId: string) => {\n    const link: DataLink = {\n      title: 'Deep link to this span',\n      url: '',\n      internal: {\n        datasourceUid: options.datasource?.uid!,\n        datasourceName: options.datasource?.name!,\n        query: {\n          ...query,\n          query: traceId,\n        },\n        panelsState: {\n          trace: {\n            spanId,\n          },\n        },\n      },\n    };\n\n    // Check if the link is to a different trace or not.\n    // If it's the same trace, only update panel state with setFocusedSpanId (no navigation).\n    // If it's a different trace, use splitOpenFn to open a new explore panel\n    const sameTrace = query?.queryType === 'traceId' && (query as TempoQuery).query === traceId;\n\n    return mapInternalLinkToExplore({\n      link,\n      internalLink: link.internal!,\n      scopedVars: {},\n      range: {} as any,\n      field: {} as Field,\n      onClickFn: sameTrace\n        ? () => setFocusedSpanId(focusedSpanId === spanId ? undefined : spanId)\n        : options.splitOpenFn\n        ? () =>\n            options.splitOpenFn({\n              datasourceUid: options.datasource?.uid!,\n              query: {\n                ...query!,\n                query: traceId,\n              },\n              panelsState: {\n                trace: {\n                  spanId,\n                },\n              },\n            })\n        : undefined,\n      replaceVariables: getTemplateSrv().replace.bind(getTemplateSrv()),\n    });\n  };\n\n  return [focusedSpanId, createFocusSpanLink];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}