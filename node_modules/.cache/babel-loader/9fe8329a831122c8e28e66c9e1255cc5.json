{"ast":null,"code":"// These are used in some other plugins for some reason\nimport { escapeStringForRegex, getFieldDisplayName, ReducerID, standardEditorsRegistry } from '@grafana/data';\nimport { VizOrientation } from '@grafana/schema';\nexport function addStandardDataReduceOptions(builder, includeFieldMatcher = true) {\n  const valueOptionsCategory = ['Value options'];\n  builder.addRadio({\n    path: 'reduceOptions.values',\n    name: 'Show',\n    description: 'Calculate a single value per column or series or show each row',\n    settings: {\n      options: [{\n        value: false,\n        label: 'Calculate'\n      }, {\n        value: true,\n        label: 'All values'\n      }]\n    },\n    category: valueOptionsCategory,\n    defaultValue: false\n  });\n  builder.addNumberInput({\n    path: 'reduceOptions.limit',\n    name: 'Limit',\n    description: 'Max number of rows to display',\n    category: valueOptionsCategory,\n    settings: {\n      placeholder: '25',\n      integer: true,\n      min: 1,\n      max: 5000\n    },\n    showIf: options => options.reduceOptions.values === true\n  });\n  builder.addCustomEditor({\n    id: 'reduceOptions.calcs',\n    path: 'reduceOptions.calcs',\n    name: 'Calculation',\n    description: 'Choose a reducer function / calculation',\n    category: valueOptionsCategory,\n    editor: standardEditorsRegistry.get('stats-picker').editor,\n    // TODO: Get ReducerID from generated schema one day?\n    defaultValue: [ReducerID.lastNotNull],\n    // Hides it when all values mode is on\n    showIf: currentConfig => currentConfig.reduceOptions.values === false\n  });\n\n  if (includeFieldMatcher) {\n    builder.addSelect({\n      path: 'reduceOptions.fields',\n      name: 'Fields',\n      description: 'Select the fields that should be included in the panel',\n      category: valueOptionsCategory,\n      settings: {\n        allowCustomValue: true,\n        options: [],\n        getOptions: async context => {\n          const options = [{\n            value: '',\n            label: 'Numeric Fields'\n          }, {\n            value: '/.*/',\n            label: 'All Fields'\n          }];\n\n          if (context && context.data) {\n            for (const frame of context.data) {\n              for (const field of frame.fields) {\n                const name = getFieldDisplayName(field, frame, context.data);\n                const value = `/^${escapeStringForRegex(name)}$/`;\n                options.push({\n                  value,\n                  label: name\n                });\n              }\n            }\n          }\n\n          return Promise.resolve(options);\n        }\n      },\n      defaultValue: ''\n    });\n  }\n}\nexport function addOrientationOption(builder, category) {\n  builder.addRadio({\n    path: 'orientation',\n    name: 'Orientation',\n    description: 'Layout orientation',\n    category,\n    settings: {\n      options: [{\n        value: VizOrientation.Auto,\n        label: 'Auto'\n      }, {\n        value: VizOrientation.Horizontal,\n        label: 'Horizontal'\n      }, {\n        value: VizOrientation.Vertical,\n        label: 'Vertical'\n      }]\n    },\n    defaultValue: VizOrientation.Auto\n  });\n}","map":{"version":3,"names":["escapeStringForRegex","getFieldDisplayName","ReducerID","standardEditorsRegistry","VizOrientation","addStandardDataReduceOptions","builder","includeFieldMatcher","valueOptionsCategory","addRadio","path","name","description","settings","options","value","label","category","defaultValue","addNumberInput","placeholder","integer","min","max","showIf","reduceOptions","values","addCustomEditor","id","editor","get","lastNotNull","currentConfig","addSelect","allowCustomValue","getOptions","context","data","frame","field","fields","push","Promise","resolve","addOrientationOption","Auto","Horizontal","Vertical"],"sources":["/home/soula/grafana/public/app/plugins/panel/stat/common.ts"],"sourcesContent":["// These are used in some other plugins for some reason\n\nimport {\n  escapeStringForRegex,\n  FieldOverrideContext,\n  getFieldDisplayName,\n  PanelOptionsEditorBuilder,\n  ReducerID,\n  standardEditorsRegistry,\n} from '@grafana/data';\nimport { SingleStatBaseOptions, VizOrientation } from '@grafana/schema';\n\nexport function addStandardDataReduceOptions<T extends SingleStatBaseOptions>(\n  builder: PanelOptionsEditorBuilder<T>,\n  includeFieldMatcher = true\n) {\n  const valueOptionsCategory = ['Value options'];\n\n  builder.addRadio({\n    path: 'reduceOptions.values',\n    name: 'Show',\n    description: 'Calculate a single value per column or series or show each row',\n    settings: {\n      options: [\n        { value: false, label: 'Calculate' },\n        { value: true, label: 'All values' },\n      ],\n    },\n    category: valueOptionsCategory,\n    defaultValue: false,\n  });\n\n  builder.addNumberInput({\n    path: 'reduceOptions.limit',\n    name: 'Limit',\n    description: 'Max number of rows to display',\n    category: valueOptionsCategory,\n    settings: {\n      placeholder: '25',\n      integer: true,\n      min: 1,\n      max: 5000,\n    },\n    showIf: (options) => options.reduceOptions.values === true,\n  });\n\n  builder.addCustomEditor({\n    id: 'reduceOptions.calcs',\n    path: 'reduceOptions.calcs',\n    name: 'Calculation',\n    description: 'Choose a reducer function / calculation',\n    category: valueOptionsCategory,\n    editor: standardEditorsRegistry.get('stats-picker').editor as any,\n    // TODO: Get ReducerID from generated schema one day?\n    defaultValue: [ReducerID.lastNotNull],\n    // Hides it when all values mode is on\n    showIf: (currentConfig) => currentConfig.reduceOptions.values === false,\n  });\n\n  if (includeFieldMatcher) {\n    builder.addSelect({\n      path: 'reduceOptions.fields',\n      name: 'Fields',\n      description: 'Select the fields that should be included in the panel',\n      category: valueOptionsCategory,\n      settings: {\n        allowCustomValue: true,\n        options: [],\n        getOptions: async (context: FieldOverrideContext) => {\n          const options = [\n            { value: '', label: 'Numeric Fields' },\n            { value: '/.*/', label: 'All Fields' },\n          ];\n          if (context && context.data) {\n            for (const frame of context.data) {\n              for (const field of frame.fields) {\n                const name = getFieldDisplayName(field, frame, context.data);\n                const value = `/^${escapeStringForRegex(name)}$/`;\n                options.push({ value, label: name });\n              }\n            }\n          }\n          return Promise.resolve(options);\n        },\n      },\n      defaultValue: '',\n    });\n  }\n}\n\nexport function addOrientationOption<T extends SingleStatBaseOptions>(\n  builder: PanelOptionsEditorBuilder<T>,\n  category?: string[]\n) {\n  builder.addRadio({\n    path: 'orientation',\n    name: 'Orientation',\n    description: 'Layout orientation',\n    category,\n    settings: {\n      options: [\n        { value: VizOrientation.Auto, label: 'Auto' },\n        { value: VizOrientation.Horizontal, label: 'Horizontal' },\n        { value: VizOrientation.Vertical, label: 'Vertical' },\n      ],\n    },\n    defaultValue: VizOrientation.Auto,\n  });\n}\n"],"mappings":"AAAA;AAEA,SACEA,oBADF,EAGEC,mBAHF,EAKEC,SALF,EAMEC,uBANF,QAOO,eAPP;AAQA,SAAgCC,cAAhC,QAAsD,iBAAtD;AAEA,OAAO,SAASC,4BAAT,CACLC,OADK,EAELC,mBAAmB,GAAG,IAFjB,EAGL;EACA,MAAMC,oBAAoB,GAAG,CAAC,eAAD,CAA7B;EAEAF,OAAO,CAACG,QAAR,CAAiB;IACfC,IAAI,EAAE,sBADS;IAEfC,IAAI,EAAE,MAFS;IAGfC,WAAW,EAAE,gEAHE;IAIfC,QAAQ,EAAE;MACRC,OAAO,EAAE,CACP;QAAEC,KAAK,EAAE,KAAT;QAAgBC,KAAK,EAAE;MAAvB,CADO,EAEP;QAAED,KAAK,EAAE,IAAT;QAAeC,KAAK,EAAE;MAAtB,CAFO;IADD,CAJK;IAUfC,QAAQ,EAAET,oBAVK;IAWfU,YAAY,EAAE;EAXC,CAAjB;EAcAZ,OAAO,CAACa,cAAR,CAAuB;IACrBT,IAAI,EAAE,qBADe;IAErBC,IAAI,EAAE,OAFe;IAGrBC,WAAW,EAAE,+BAHQ;IAIrBK,QAAQ,EAAET,oBAJW;IAKrBK,QAAQ,EAAE;MACRO,WAAW,EAAE,IADL;MAERC,OAAO,EAAE,IAFD;MAGRC,GAAG,EAAE,CAHG;MAIRC,GAAG,EAAE;IAJG,CALW;IAWrBC,MAAM,EAAGV,OAAD,IAAaA,OAAO,CAACW,aAAR,CAAsBC,MAAtB,KAAiC;EAXjC,CAAvB;EAcApB,OAAO,CAACqB,eAAR,CAAwB;IACtBC,EAAE,EAAE,qBADkB;IAEtBlB,IAAI,EAAE,qBAFgB;IAGtBC,IAAI,EAAE,aAHgB;IAItBC,WAAW,EAAE,yCAJS;IAKtBK,QAAQ,EAAET,oBALY;IAMtBqB,MAAM,EAAE1B,uBAAuB,CAAC2B,GAAxB,CAA4B,cAA5B,EAA4CD,MAN9B;IAOtB;IACAX,YAAY,EAAE,CAAChB,SAAS,CAAC6B,WAAX,CARQ;IAStB;IACAP,MAAM,EAAGQ,aAAD,IAAmBA,aAAa,CAACP,aAAd,CAA4BC,MAA5B,KAAuC;EAV5C,CAAxB;;EAaA,IAAInB,mBAAJ,EAAyB;IACvBD,OAAO,CAAC2B,SAAR,CAAkB;MAChBvB,IAAI,EAAE,sBADU;MAEhBC,IAAI,EAAE,QAFU;MAGhBC,WAAW,EAAE,wDAHG;MAIhBK,QAAQ,EAAET,oBAJM;MAKhBK,QAAQ,EAAE;QACRqB,gBAAgB,EAAE,IADV;QAERpB,OAAO,EAAE,EAFD;QAGRqB,UAAU,EAAE,MAAOC,OAAP,IAAyC;UACnD,MAAMtB,OAAO,GAAG,CACd;YAAEC,KAAK,EAAE,EAAT;YAAaC,KAAK,EAAE;UAApB,CADc,EAEd;YAAED,KAAK,EAAE,MAAT;YAAiBC,KAAK,EAAE;UAAxB,CAFc,CAAhB;;UAIA,IAAIoB,OAAO,IAAIA,OAAO,CAACC,IAAvB,EAA6B;YAC3B,KAAK,MAAMC,KAAX,IAAoBF,OAAO,CAACC,IAA5B,EAAkC;cAChC,KAAK,MAAME,KAAX,IAAoBD,KAAK,CAACE,MAA1B,EAAkC;gBAChC,MAAM7B,IAAI,GAAGV,mBAAmB,CAACsC,KAAD,EAAQD,KAAR,EAAeF,OAAO,CAACC,IAAvB,CAAhC;gBACA,MAAMtB,KAAK,GAAI,KAAIf,oBAAoB,CAACW,IAAD,CAAO,IAA9C;gBACAG,OAAO,CAAC2B,IAAR,CAAa;kBAAE1B,KAAF;kBAASC,KAAK,EAAEL;gBAAhB,CAAb;cACD;YACF;UACF;;UACD,OAAO+B,OAAO,CAACC,OAAR,CAAgB7B,OAAhB,CAAP;QACD;MAlBO,CALM;MAyBhBI,YAAY,EAAE;IAzBE,CAAlB;EA2BD;AACF;AAED,OAAO,SAAS0B,oBAAT,CACLtC,OADK,EAELW,QAFK,EAGL;EACAX,OAAO,CAACG,QAAR,CAAiB;IACfC,IAAI,EAAE,aADS;IAEfC,IAAI,EAAE,aAFS;IAGfC,WAAW,EAAE,oBAHE;IAIfK,QAJe;IAKfJ,QAAQ,EAAE;MACRC,OAAO,EAAE,CACP;QAAEC,KAAK,EAAEX,cAAc,CAACyC,IAAxB;QAA8B7B,KAAK,EAAE;MAArC,CADO,EAEP;QAAED,KAAK,EAAEX,cAAc,CAAC0C,UAAxB;QAAoC9B,KAAK,EAAE;MAA3C,CAFO,EAGP;QAAED,KAAK,EAAEX,cAAc,CAAC2C,QAAxB;QAAkC/B,KAAK,EAAE;MAAzC,CAHO;IADD,CALK;IAYfE,YAAY,EAAEd,cAAc,CAACyC;EAZd,CAAjB;AAcD"},"metadata":{},"sourceType":"module"}