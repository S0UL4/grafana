{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { each, find, findIndex, flattenDeep, isArray, isBoolean, isNumber, isString, map, max, some } from 'lodash';\nimport { DataLinkBuiltInVars, FieldMatcherID, FieldType, getActiveThreshold, getDataSourceRef, isDataSourceRef, MappingType, SpecialValueMatch, standardEditorsRegistry, standardFieldConfigEditorRegistry, urlUtil } from '@grafana/data';\nimport { getDataSourceSrv, setDataSourceSrv } from '@grafana/runtime';\nimport { AxisPlacement } from '@grafana/ui';\nimport { getAllOptionEditors, getAllStandardFieldConfigs } from 'app/core/components/OptionsUI/registry';\nimport { config } from 'app/core/config';\nimport { DEFAULT_PANEL_SPAN, DEFAULT_ROW_HEIGHT, GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT, MIN_PANEL_HEIGHT } from 'app/core/constants';\nimport getFactors from 'app/core/utils/factors';\nimport kbn from 'app/core/utils/kbn';\nimport { DatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { isConstant, isMulti } from 'app/features/variables/guard';\nimport { alignCurrentWithMulti } from 'app/features/variables/shared/multiOptions';\nimport { plugin as gaugePanelPlugin } from 'app/plugins/panel/gauge/module';\nimport { plugin as statPanelPlugin } from 'app/plugins/panel/stat/module';\nimport { labelsToFieldsTransformer } from '../../../../../packages/grafana-data/src/transformations/transformers/labelsToFields';\nimport { mergeTransformer } from '../../../../../packages/grafana-data/src/transformations/transformers/merge';\nimport { migrateCloudWatchQuery, migrateMultipleStatsAnnotationQuery, migrateMultipleStatsMetricsQuery } from '../../../plugins/datasource/cloudwatch/migrations/dashboardMigrations';\nimport { VariableHide } from '../../variables/types';\nimport { PanelModel } from './PanelModel';\nstandardEditorsRegistry.setInit(getAllOptionEditors);\nstandardFieldConfigEditorRegistry.setInit(getAllStandardFieldConfigs);\nexport class DashboardMigrator {\n  constructor(dashboardModel) {\n    _defineProperty(this, \"dashboard\", void 0);\n\n    this.dashboard = dashboardModel; // for tests to pass\n\n    if (!getDataSourceSrv()) {\n      setDataSourceSrv(new DatasourceSrv());\n    }\n  }\n\n  updateSchema(old) {\n    let i, j, k, n;\n    const oldVersion = this.dashboard.schemaVersion;\n    const panelUpgrades = [];\n    this.dashboard.schemaVersion = 36;\n\n    if (oldVersion === this.dashboard.schemaVersion) {\n      return;\n    } // version 2 schema changes\n\n\n    if (oldVersion < 2) {\n      if (old.services) {\n        if (old.services.filter) {\n          this.dashboard.time = old.services.filter.time;\n          this.dashboard.templating.list = old.services.filter.list || [];\n        }\n      }\n\n      panelUpgrades.push(panel => {\n        // rename panel type\n        if (panel.type === 'graphite') {\n          panel.type = 'graph';\n        }\n\n        if (panel.type !== 'graph') {\n          return panel;\n        }\n\n        if (isBoolean(panel.legend)) {\n          panel.legend = {\n            show: panel.legend\n          };\n        }\n\n        if (panel.grid) {\n          if (panel.grid.min) {\n            panel.grid.leftMin = panel.grid.min;\n            delete panel.grid.min;\n          }\n\n          if (panel.grid.max) {\n            panel.grid.leftMax = panel.grid.max;\n            delete panel.grid.max;\n          }\n        }\n\n        if (panel.y_format) {\n          if (!panel.y_formats) {\n            panel.y_formats = [];\n          }\n\n          panel.y_formats[0] = panel.y_format;\n          delete panel.y_format;\n        }\n\n        if (panel.y2_format) {\n          if (!panel.y_formats) {\n            panel.y_formats = [];\n          }\n\n          panel.y_formats[1] = panel.y2_format;\n          delete panel.y2_format;\n        }\n\n        return panel;\n      });\n    } // schema version 3 changes\n\n\n    if (oldVersion < 3) {\n      // ensure panel IDs\n      let maxId = this.dashboard.getNextPanelId();\n      panelUpgrades.push(panel => {\n        if (!panel.id) {\n          panel.id = maxId;\n          maxId += 1;\n        }\n\n        return panel;\n      });\n    } // schema version 4 changes\n\n\n    if (oldVersion < 4) {\n      // move aliasYAxis changes\n      panelUpgrades.push(panel => {\n        if (panel.type !== 'graph') {\n          return panel;\n        }\n\n        each(panel.aliasYAxis, (value, key) => {\n          panel.seriesOverrides = [{\n            alias: key,\n            yaxis: value\n          }];\n        });\n        delete panel.aliasYAxis;\n        return panel;\n      });\n    }\n\n    if (oldVersion < 6) {\n      // move drop-downs to new schema\n      const annotations = find(old.pulldowns, {\n        type: 'annotations'\n      });\n\n      if (annotations) {\n        this.dashboard.annotations = {\n          list: annotations.annotations || []\n        };\n      } // update template variables\n\n\n      for (i = 0; i < this.dashboard.templating.list.length; i++) {\n        const variable = this.dashboard.templating.list[i];\n\n        if (variable.datasource === void 0) {\n          variable.datasource = null;\n        }\n\n        if (variable.type === 'filter') {\n          variable.type = 'query';\n        }\n\n        if (variable.type === void 0) {\n          variable.type = 'query';\n        }\n\n        if (variable.allFormat === void 0) {\n          variable.allFormat = 'glob';\n        }\n      }\n    }\n\n    if (oldVersion < 7) {\n      if (old.nav && old.nav.length) {\n        this.dashboard.timepicker = old.nav[0];\n      } // ensure query refIds\n\n\n      panelUpgrades.push(panel => {\n        each(panel.targets, target => {\n          if (!target.refId) {\n            target.refId = panel.getNextQueryLetter && panel.getNextQueryLetter();\n          }\n        });\n        return panel;\n      });\n    }\n\n    if (oldVersion < 8) {\n      panelUpgrades.push(panel => {\n        each(panel.targets, target => {\n          // update old influxdb query schema\n          if (target.fields && target.tags && target.groupBy) {\n            if (target.rawQuery) {\n              delete target.fields;\n              delete target.fill;\n            } else {\n              target.select = map(target.fields, field => {\n                const parts = [];\n                parts.push({\n                  type: 'field',\n                  params: [field.name]\n                });\n                parts.push({\n                  type: field.func,\n                  params: []\n                });\n\n                if (field.mathExpr) {\n                  parts.push({\n                    type: 'math',\n                    params: [field.mathExpr]\n                  });\n                }\n\n                if (field.asExpr) {\n                  parts.push({\n                    type: 'alias',\n                    params: [field.asExpr]\n                  });\n                }\n\n                return parts;\n              });\n              delete target.fields;\n              each(target.groupBy, part => {\n                if (part.type === 'time' && part.interval) {\n                  part.params = [part.interval];\n                  delete part.interval;\n                }\n\n                if (part.type === 'tag' && part.key) {\n                  part.params = [part.key];\n                  delete part.key;\n                }\n              });\n\n              if (target.fill) {\n                target.groupBy.push({\n                  type: 'fill',\n                  params: [target.fill]\n                });\n                delete target.fill;\n              }\n            }\n          }\n        });\n        return panel;\n      });\n    } // schema version 9 changes\n\n\n    if (oldVersion < 9) {\n      // move aliasYAxis changes\n      panelUpgrades.push(panel => {\n        if (panel.type !== 'singlestat' && panel.thresholds !== '') {\n          return panel;\n        }\n\n        if (panel.thresholds) {\n          const k = panel.thresholds.split(',');\n\n          if (k.length >= 3) {\n            k.shift();\n            panel.thresholds = k.join(',');\n          }\n        }\n\n        return panel;\n      });\n    } // schema version 10 changes\n\n\n    if (oldVersion < 10) {\n      // move aliasYAxis changes\n      panelUpgrades.push(panel => {\n        if (panel.type !== 'table') {\n          return panel;\n        }\n\n        each(panel.styles, style => {\n          if (style.thresholds && style.thresholds.length >= 3) {\n            const k = style.thresholds;\n            k.shift();\n            style.thresholds = k;\n          }\n        });\n        return panel;\n      });\n    }\n\n    if (oldVersion < 12) {\n      // update template variables\n      each(this.dashboard.getVariables(), templateVariable => {\n        if (templateVariable.refresh) {\n          templateVariable.refresh = 1;\n        }\n\n        if (!templateVariable.refresh) {\n          templateVariable.refresh = 0;\n        }\n\n        if (templateVariable.hideVariable) {\n          templateVariable.hide = 2;\n        } else if (templateVariable.hideLabel) {\n          templateVariable.hide = 1;\n        }\n      });\n    }\n\n    if (oldVersion < 12) {\n      // update graph yaxes changes\n      panelUpgrades.push(panel => {\n        if (panel.type !== 'graph') {\n          return panel;\n        }\n\n        if (!panel.grid) {\n          return panel;\n        }\n\n        if (!panel.yaxes) {\n          panel.yaxes = [{\n            show: panel['y-axis'],\n            min: panel.grid.leftMin,\n            max: panel.grid.leftMax,\n            logBase: panel.grid.leftLogBase,\n            format: panel.y_formats[0],\n            label: panel.leftYAxisLabel\n          }, {\n            show: panel['y-axis'],\n            min: panel.grid.rightMin,\n            max: panel.grid.rightMax,\n            logBase: panel.grid.rightLogBase,\n            format: panel.y_formats[1],\n            label: panel.rightYAxisLabel\n          }];\n          panel.xaxis = {\n            show: panel['x-axis']\n          };\n          delete panel.grid.leftMin;\n          delete panel.grid.leftMax;\n          delete panel.grid.leftLogBase;\n          delete panel.grid.rightMin;\n          delete panel.grid.rightMax;\n          delete panel.grid.rightLogBase;\n          delete panel.y_formats;\n          delete panel.leftYAxisLabel;\n          delete panel.rightYAxisLabel;\n          delete panel['y-axis'];\n          delete panel['x-axis'];\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 13) {\n      // update graph yaxes changes\n      panelUpgrades.push(panel => {\n        if (panel.type !== 'graph') {\n          return panel;\n        }\n\n        if (!panel.grid) {\n          return panel;\n        }\n\n        if (!panel.thresholds) {\n          panel.thresholds = [];\n        }\n\n        const t1 = {},\n              t2 = {};\n\n        if (panel.grid.threshold1 !== null) {\n          t1.value = panel.grid.threshold1;\n\n          if (panel.grid.thresholdLine) {\n            t1.line = true;\n            t1.lineColor = panel.grid.threshold1Color;\n            t1.colorMode = 'custom';\n          } else {\n            t1.fill = true;\n            t1.fillColor = panel.grid.threshold1Color;\n            t1.colorMode = 'custom';\n          }\n        }\n\n        if (panel.grid.threshold2 !== null) {\n          t2.value = panel.grid.threshold2;\n\n          if (panel.grid.thresholdLine) {\n            t2.line = true;\n            t2.lineColor = panel.grid.threshold2Color;\n            t2.colorMode = 'custom';\n          } else {\n            t2.fill = true;\n            t2.fillColor = panel.grid.threshold2Color;\n            t2.colorMode = 'custom';\n          }\n        }\n\n        if (isNumber(t1.value)) {\n          if (isNumber(t2.value)) {\n            if (t1.value > t2.value) {\n              t1.op = t2.op = 'lt';\n              panel.thresholds.push(t1);\n              panel.thresholds.push(t2);\n            } else {\n              t1.op = t2.op = 'gt';\n              panel.thresholds.push(t1);\n              panel.thresholds.push(t2);\n            }\n          } else {\n            t1.op = 'gt';\n            panel.thresholds.push(t1);\n          }\n        }\n\n        delete panel.grid.threshold1;\n        delete panel.grid.threshold1Color;\n        delete panel.grid.threshold2;\n        delete panel.grid.threshold2Color;\n        delete panel.grid.thresholdLine;\n        return panel;\n      });\n    }\n\n    if (oldVersion < 14) {\n      this.dashboard.graphTooltip = old.sharedCrosshair ? 1 : 0;\n    }\n\n    if (oldVersion < 16) {\n      this.upgradeToGridLayout(old);\n    }\n\n    if (oldVersion < 17) {\n      panelUpgrades.push(panel => {\n        if (panel.minSpan) {\n          const max = GRID_COLUMN_COUNT / panel.minSpan;\n          const factors = getFactors(GRID_COLUMN_COUNT); // find the best match compared to factors\n          // (ie. [1,2,3,4,6,12,24] for 24 columns)\n\n          panel.maxPerRow = factors[findIndex(factors, o => {\n            return o > max;\n          }) - 1];\n        }\n\n        delete panel.minSpan;\n        return panel;\n      });\n    }\n\n    if (oldVersion < 18) {\n      // migrate change to gauge options\n      panelUpgrades.push(panel => {\n        if (panel['options-gauge']) {\n          panel.options = panel['options-gauge'];\n          panel.options.valueOptions = {\n            unit: panel.options.unit,\n            stat: panel.options.stat,\n            decimals: panel.options.decimals,\n            prefix: panel.options.prefix,\n            suffix: panel.options.suffix\n          }; // correct order\n\n          if (panel.options.thresholds) {\n            panel.options.thresholds.reverse();\n          } // this options prop was due to a bug\n\n\n          delete panel.options.options;\n          delete panel.options.unit;\n          delete panel.options.stat;\n          delete panel.options.decimals;\n          delete panel.options.prefix;\n          delete panel.options.suffix;\n          delete panel['options-gauge'];\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 19) {\n      // migrate change to gauge options\n      panelUpgrades.push(panel => {\n        if (panel.links && isArray(panel.links)) {\n          panel.links = panel.links.map(upgradePanelLink);\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 20) {\n      const updateLinks = link => {\n        return Object.assign({}, link, {\n          url: updateVariablesSyntax(link.url)\n        });\n      };\n\n      panelUpgrades.push(panel => {\n        // For graph panel\n        if (panel.options && panel.options.dataLinks && isArray(panel.options.dataLinks)) {\n          panel.options.dataLinks = panel.options.dataLinks.map(updateLinks);\n        } // For panel with fieldOptions\n\n\n        if (panel.options && panel.options.fieldOptions && panel.options.fieldOptions.defaults) {\n          if (panel.options.fieldOptions.defaults.links && isArray(panel.options.fieldOptions.defaults.links)) {\n            panel.options.fieldOptions.defaults.links = panel.options.fieldOptions.defaults.links.map(updateLinks);\n          }\n\n          if (panel.options.fieldOptions.defaults.title) {\n            panel.options.fieldOptions.defaults.title = updateVariablesSyntax(panel.options.fieldOptions.defaults.title);\n          }\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 21) {\n      const updateLinks = link => {\n        return Object.assign({}, link, {\n          url: link.url.replace(/__series.labels/g, '__field.labels')\n        });\n      };\n\n      panelUpgrades.push(panel => {\n        // For graph panel\n        if (panel.options && panel.options.dataLinks && isArray(panel.options.dataLinks)) {\n          panel.options.dataLinks = panel.options.dataLinks.map(updateLinks);\n        } // For panel with fieldOptions\n\n\n        if (panel.options && panel.options.fieldOptions && panel.options.fieldOptions.defaults) {\n          if (panel.options.fieldOptions.defaults.links && isArray(panel.options.fieldOptions.defaults.links)) {\n            panel.options.fieldOptions.defaults.links = panel.options.fieldOptions.defaults.links.map(updateLinks);\n          }\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 22) {\n      panelUpgrades.push(panel => {\n        if (panel.type !== 'table') {\n          return panel;\n        }\n\n        each(panel.styles, style => {\n          style.align = 'auto';\n        });\n        return panel;\n      });\n    }\n\n    if (oldVersion < 23) {\n      for (const variable of this.dashboard.templating.list) {\n        if (!isMulti(variable)) {\n          continue;\n        }\n\n        const {\n          multi,\n          current\n        } = variable;\n        variable.current = alignCurrentWithMulti(current, multi);\n      }\n    }\n\n    if (oldVersion < 24) {\n      // 7.0\n      // - migrate existing tables to 'table-old'\n      panelUpgrades.push(panel => {\n        const wasAngularTable = panel.type === 'table';\n\n        if (wasAngularTable && !panel.styles) {\n          return panel; // styles are missing so assumes default settings\n        }\n\n        const wasReactTable = panel.table === 'table2';\n\n        if (!wasAngularTable || wasReactTable) {\n          return panel;\n        }\n\n        panel.type = wasAngularTable ? 'table-old' : 'table';\n        return panel;\n      });\n    }\n\n    if (oldVersion < 25) {// tags are removed in version 28\n    }\n\n    if (oldVersion < 26) {\n      panelUpgrades.push(panel => {\n        const wasReactText = panel.type === 'text2';\n\n        if (!wasReactText) {\n          return panel;\n        }\n\n        panel.type = 'text';\n        delete panel.options.angular;\n        return panel;\n      });\n    }\n\n    if (oldVersion < 27) {\n      for (const variable of this.dashboard.templating.list) {\n        var _variable$query, _variable$query2;\n\n        if (!isConstant(variable)) {\n          continue;\n        }\n\n        if (variable.hide === VariableHide.dontHide || variable.hide === VariableHide.hideLabel) {\n          variable.type = 'textbox';\n        }\n\n        variable.current = {\n          selected: true,\n          text: (_variable$query = variable.query) !== null && _variable$query !== void 0 ? _variable$query : '',\n          value: (_variable$query2 = variable.query) !== null && _variable$query2 !== void 0 ? _variable$query2 : ''\n        };\n        variable.options = [variable.current];\n      }\n    }\n\n    if (oldVersion < 28) {\n      panelUpgrades.push(panel => {\n        if (panel.type === 'singlestat') {\n          return migrateSinglestat(panel);\n        }\n\n        return panel;\n      });\n\n      for (const variable of this.dashboard.templating.list) {\n        if (variable.tags) {\n          delete variable.tags;\n        }\n\n        if (variable.tagsQuery) {\n          delete variable.tagsQuery;\n        }\n\n        if (variable.tagValuesQuery) {\n          delete variable.tagValuesQuery;\n        }\n\n        if (variable.useTags) {\n          delete variable.useTags;\n        }\n      }\n    }\n\n    if (oldVersion < 29) {\n      for (const variable of this.dashboard.templating.list) {\n        var _variable$options;\n\n        if (variable.type !== 'query') {\n          continue;\n        }\n\n        if (variable.refresh !== 1 && variable.refresh !== 2) {\n          variable.refresh = 1;\n        }\n\n        if ((_variable$options = variable.options) !== null && _variable$options !== void 0 && _variable$options.length) {\n          variable.options = [];\n        }\n      }\n    }\n\n    if (oldVersion < 30) {\n      panelUpgrades.push(upgradeValueMappingsForPanel);\n      panelUpgrades.push(migrateTooltipOptions);\n    }\n\n    if (oldVersion < 31) {\n      panelUpgrades.push(panel => {\n        if (panel.transformations) {\n          for (const t of panel.transformations) {\n            if (t.id === labelsToFieldsTransformer.id) {\n              return appendTransformerAfter(panel, labelsToFieldsTransformer.id, {\n                id: mergeTransformer.id,\n                options: {}\n              });\n            }\n          }\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 32) {// CloudWatch migrations have been moved to version 34\n    } // Replace datasource name with reference, uid and type\n\n\n    if (oldVersion < 33) {\n      panelUpgrades.push(panel => {\n        panel.datasource = migrateDatasourceNameToRef(panel.datasource, {\n          returnDefaultAsNull: true\n        });\n\n        if (!panel.targets) {\n          return panel;\n        }\n\n        for (const target of panel.targets) {\n          const targetRef = migrateDatasourceNameToRef(target.datasource, {\n            returnDefaultAsNull: true\n          });\n\n          if (targetRef != null) {\n            target.datasource = targetRef;\n          }\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 34) {\n      panelUpgrades.push(panel => {\n        this.migrateCloudWatchQueries(panel);\n        return panel;\n      });\n      this.migrateCloudWatchAnnotationQuery();\n    }\n\n    if (oldVersion < 35) {\n      panelUpgrades.push(ensureXAxisVisibility);\n    }\n\n    if (oldVersion < 36) {\n      // Migrate datasource to refs in annotations\n      for (const query of this.dashboard.annotations.list) {\n        query.datasource = migrateDatasourceNameToRef(query.datasource, {\n          returnDefaultAsNull: false\n        });\n      } // Migrate datasource: null to current default\n\n\n      const defaultDs = getDataSourceSrv().getInstanceSettings(null);\n\n      if (defaultDs) {\n        for (const variable of this.dashboard.templating.list) {\n          if (variable.type === 'query' && variable.datasource === null) {\n            variable.datasource = getDataSourceRef(defaultDs);\n          }\n        }\n\n        panelUpgrades.push(panel => {\n          if (panel.targets) {\n            let panelDataSourceWasDefault = false;\n\n            if (panel.datasource == null && panel.targets.length > 0) {\n              panel.datasource = getDataSourceRef(defaultDs);\n              panelDataSourceWasDefault = true;\n            }\n\n            for (const target of panel.targets) {\n              if (target.datasource == null || target.datasource.uid == null) {\n                target.datasource = Object.assign({}, panel.datasource);\n              }\n\n              if (panelDataSourceWasDefault && target.datasource.uid !== '__expr__') {\n                // We can have situations when default ds changed and the panel level data source is different from the queries\n                // In this case we use the query level data source as source for truth\n                panel.datasource = target.datasource;\n              }\n            }\n          }\n\n          return panel;\n        });\n      }\n    }\n\n    if (panelUpgrades.length === 0) {\n      return;\n    }\n\n    for (j = 0; j < this.dashboard.panels.length; j++) {\n      for (k = 0; k < panelUpgrades.length; k++) {\n        this.dashboard.panels[j] = panelUpgrades[k].call(this, this.dashboard.panels[j]);\n        const rowPanels = this.dashboard.panels[j].panels;\n\n        if (rowPanels) {\n          for (n = 0; n < rowPanels.length; n++) {\n            rowPanels[n] = panelUpgrades[k].call(this, rowPanels[n]);\n          }\n        }\n      }\n    }\n  } // Migrates metric queries and/or annotation queries that use more than one statistic.\n  // E.g query.statistics = ['Max', 'Min'] will be migrated to two queries - query1.statistic = 'Max' and query2.statistic = 'Min'\n  // New queries, that were created during migration, are put at the end of the array.\n\n\n  migrateCloudWatchQueries(panel) {\n    for (const target of panel.targets || []) {\n      if (isCloudWatchQuery(target)) {\n        migrateCloudWatchQuery(target);\n\n        if (target.hasOwnProperty('statistics')) {\n          // New queries, that were created during migration, are put at the end of the array.\n          const newQueries = migrateMultipleStatsMetricsQuery(target, [...panel.targets]);\n\n          for (const newQuery of newQueries) {\n            panel.targets.push(newQuery);\n          }\n        }\n      }\n    }\n  }\n\n  migrateCloudWatchAnnotationQuery() {\n    for (const annotation of this.dashboard.annotations.list) {\n      if (isLegacyCloudWatchAnnotationQuery(annotation)) {\n        const newAnnotationQueries = migrateMultipleStatsAnnotationQuery(annotation);\n\n        for (const newAnnotationQuery of newAnnotationQueries) {\n          this.dashboard.annotations.list.push(newAnnotationQuery);\n        }\n      }\n    }\n  }\n\n  upgradeToGridLayout(old) {\n    let yPos = 0;\n    const widthFactor = GRID_COLUMN_COUNT / 12;\n    const maxPanelId = max(flattenDeep(map(old.rows, row => {\n      return map(row.panels, 'id');\n    })));\n    let nextRowId = maxPanelId + 1;\n\n    if (!old.rows) {\n      return;\n    } // Add special \"row\" panels if even one row is collapsed, repeated or has visible title\n\n\n    const showRows = some(old.rows, row => row.collapse || row.showTitle || row.repeat);\n\n    for (const row of old.rows) {\n      if (row.repeatIteration) {\n        continue;\n      }\n\n      const height = row.height || DEFAULT_ROW_HEIGHT;\n      const rowGridHeight = getGridHeight(height);\n      const rowPanel = {};\n      let rowPanelModel;\n\n      if (showRows) {\n        // add special row panel\n        rowPanel.id = nextRowId;\n        rowPanel.type = 'row';\n        rowPanel.title = row.title;\n        rowPanel.collapsed = row.collapse;\n        rowPanel.repeat = row.repeat;\n        rowPanel.panels = [];\n        rowPanel.gridPos = {\n          x: 0,\n          y: yPos,\n          w: GRID_COLUMN_COUNT,\n          h: rowGridHeight\n        };\n        rowPanelModel = new PanelModel(rowPanel);\n        nextRowId++;\n        yPos++;\n      }\n\n      const rowArea = new RowArea(rowGridHeight, GRID_COLUMN_COUNT, yPos);\n\n      for (const panel of row.panels) {\n        panel.span = panel.span || DEFAULT_PANEL_SPAN;\n\n        if (panel.minSpan) {\n          panel.minSpan = Math.min(GRID_COLUMN_COUNT, GRID_COLUMN_COUNT / 12 * panel.minSpan);\n        }\n\n        const panelWidth = Math.floor(panel.span) * widthFactor;\n        const panelHeight = panel.height ? getGridHeight(panel.height) : rowGridHeight;\n        const panelPos = rowArea.getPanelPosition(panelHeight, panelWidth);\n        yPos = rowArea.yPos;\n        panel.gridPos = {\n          x: panelPos.x,\n          y: yPos + panelPos.y,\n          w: panelWidth,\n          h: panelHeight\n        };\n        rowArea.addPanel(panel.gridPos);\n        delete panel.span;\n\n        if (rowPanelModel && rowPanel.collapsed) {\n          var _rowPanelModel$panels;\n\n          (_rowPanelModel$panels = rowPanelModel.panels) === null || _rowPanelModel$panels === void 0 ? void 0 : _rowPanelModel$panels.push(panel);\n        } else {\n          this.dashboard.panels.push(new PanelModel(panel));\n        }\n      }\n\n      if (rowPanelModel) {\n        this.dashboard.panels.push(rowPanelModel);\n      }\n\n      if (!(rowPanelModel && rowPanel.collapsed)) {\n        yPos += rowGridHeight;\n      }\n    }\n  }\n\n}\n\nfunction getGridHeight(height) {\n  if (isString(height)) {\n    height = parseInt(height.replace('px', ''), 10);\n  }\n\n  if (height < MIN_PANEL_HEIGHT) {\n    height = MIN_PANEL_HEIGHT;\n  }\n\n  const gridHeight = Math.ceil(height / (GRID_CELL_HEIGHT + GRID_CELL_VMARGIN));\n  return gridHeight;\n}\n/**\n * RowArea represents dashboard row filled by panels\n * area is an array of numbers represented filled column's cells like\n *  -----------------------\n * |******** ****\n * |******** ****\n * |********\n *  -----------------------\n *  33333333 2222 00000 ...\n */\n\n\nclass RowArea {\n  constructor(height, width = GRID_COLUMN_COUNT, rowYPos = 0) {\n    _defineProperty(this, \"area\", void 0);\n\n    _defineProperty(this, \"yPos\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    this.area = new Array(width).fill(0);\n    this.yPos = rowYPos;\n    this.height = height;\n  }\n\n  reset() {\n    this.area.fill(0);\n  }\n  /**\n   * Update area after adding the panel.\n   */\n\n\n  addPanel(gridPos) {\n    for (let i = gridPos.x; i < gridPos.x + gridPos.w; i++) {\n      if (!this.area[i] || gridPos.y + gridPos.h - this.yPos > this.area[i]) {\n        this.area[i] = gridPos.y + gridPos.h - this.yPos;\n      }\n    }\n\n    return this.area;\n  }\n  /**\n   * Calculate position for the new panel in the row.\n   */\n\n\n  getPanelPosition(panelHeight, panelWidth, callOnce = false) {\n    let startPlace, endPlace;\n    let place;\n\n    for (let i = this.area.length - 1; i >= 0; i--) {\n      if (this.height - this.area[i] > 0) {\n        if (endPlace === undefined) {\n          endPlace = i;\n        } else {\n          if (i < this.area.length - 1 && this.area[i] <= this.area[i + 1]) {\n            startPlace = i;\n          } else {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (startPlace !== undefined && endPlace !== undefined && endPlace - startPlace >= panelWidth - 1) {\n      const yPos = max(this.area.slice(startPlace));\n      place = {\n        x: startPlace,\n        y: yPos\n      };\n    } else if (!callOnce) {\n      // wrap to next row\n      this.yPos += this.height;\n      this.reset();\n      return this.getPanelPosition(panelHeight, panelWidth, true);\n    } else {\n      return null;\n    }\n\n    return place;\n  }\n\n}\n\nfunction upgradePanelLink(link) {\n  let url = link.url;\n\n  if (!url && link.dashboard) {\n    url = `dashboard/db/${kbn.slugifyForUrl(link.dashboard)}`;\n  }\n\n  if (!url && link.dashUri) {\n    url = `dashboard/${link.dashUri}`;\n  } // some models are incomplete and have no dashboard or dashUri\n\n\n  if (!url) {\n    url = '/';\n  }\n\n  if (link.keepTime) {\n    url = urlUtil.appendQueryToUrl(url, `$${DataLinkBuiltInVars.keepTime}`);\n  }\n\n  if (link.includeVars) {\n    url = urlUtil.appendQueryToUrl(url, `$${DataLinkBuiltInVars.includeVars}`);\n  }\n\n  if (link.params) {\n    url = urlUtil.appendQueryToUrl(url, link.params);\n  }\n\n  return {\n    url: url,\n    title: link.title,\n    targetBlank: link.targetBlank\n  };\n}\n\nfunction updateVariablesSyntax(text) {\n  const legacyVariableNamesRegex = /(__series_name)|(\\$__series_name)|(__value_time)|(__field_name)|(\\$__field_name)/g;\n  return text.replace(legacyVariableNamesRegex, (match, seriesName, seriesName1, valueTime, fieldName, fieldName1) => {\n    if (seriesName) {\n      return '__series.name';\n    }\n\n    if (seriesName1) {\n      return '${__series.name}';\n    }\n\n    if (valueTime) {\n      return '__value.time';\n    }\n\n    if (fieldName) {\n      return '__field.name';\n    }\n\n    if (fieldName1) {\n      return '${__field.name}';\n    }\n\n    return match;\n  });\n}\n\nfunction migrateSinglestat(panel) {\n  var _gauge;\n\n  // If   'grafana-singlestat-panel' exists, move to that\n  if (config.panels['grafana-singlestat-panel']) {\n    panel.type = 'grafana-singlestat-panel';\n    return panel;\n  }\n\n  let returnSaveModel = false;\n\n  if (!panel.changePlugin) {\n    returnSaveModel = true;\n    panel = new PanelModel(panel);\n  } // To make sure PanelModel.isAngularPlugin logic thinks the current panel is angular\n  // And since this plugin no longer exist we just fake it here\n\n\n  panel.plugin = {\n    angularPanelCtrl: {}\n  }; // Otheriwse use gauge or stat panel\n\n  if ((_gauge = panel.gauge) !== null && _gauge !== void 0 && _gauge.show) {\n    gaugePanelPlugin.meta = config.panels['gauge'];\n    panel.changePlugin(gaugePanelPlugin);\n  } else {\n    statPanelPlugin.meta = config.panels['stat'];\n    panel.changePlugin(statPanelPlugin);\n  }\n\n  if (returnSaveModel) {\n    return panel.getSaveModel();\n  }\n\n  return panel;\n}\n\nexport function migrateDatasourceNameToRef(nameOrRef, options) {\n  if (options.returnDefaultAsNull && (nameOrRef == null || nameOrRef === 'default')) {\n    return null;\n  }\n\n  if (isDataSourceRef(nameOrRef)) {\n    return nameOrRef;\n  }\n\n  const ds = getDataSourceSrv().getInstanceSettings(nameOrRef);\n\n  if (!ds) {\n    return {\n      uid: nameOrRef\n    }; // not found\n  }\n\n  return getDataSourceRef(ds);\n} // mutates transformations appending a new transformer after the existing one\n\nfunction appendTransformerAfter(panel, id, cfg) {\n  if (panel.transformations) {\n    const transformations = [];\n\n    for (const t of panel.transformations) {\n      transformations.push(t);\n\n      if (t.id === id) {\n        transformations.push(Object.assign({}, cfg));\n      }\n    }\n\n    panel.transformations = transformations;\n  }\n\n  return panel;\n}\n\nfunction upgradeValueMappingsForPanel(panel) {\n  const fieldConfig = panel.fieldConfig;\n\n  if (!fieldConfig) {\n    return panel;\n  }\n\n  if (fieldConfig.defaults && fieldConfig.defaults.mappings) {\n    fieldConfig.defaults.mappings = upgradeValueMappings(fieldConfig.defaults.mappings, fieldConfig.defaults.thresholds);\n  } // Protect against no overrides\n\n\n  if (Array.isArray(fieldConfig.overrides)) {\n    for (const override of fieldConfig.overrides) {\n      for (const prop of override.properties) {\n        if (prop.id === 'mappings') {\n          prop.value = upgradeValueMappings(prop.value);\n        }\n      }\n    }\n  }\n\n  return panel;\n}\n\nfunction isCloudWatchQuery(target) {\n  return target.hasOwnProperty('dimensions') && target.hasOwnProperty('namespace') && target.hasOwnProperty('region') && target.hasOwnProperty('metricName');\n}\n\nfunction isLegacyCloudWatchAnnotationQuery(target) {\n  return target.hasOwnProperty('dimensions') && target.hasOwnProperty('namespace') && target.hasOwnProperty('region') && target.hasOwnProperty('prefixMatching') && target.hasOwnProperty('statistics');\n}\n\nfunction upgradeValueMappings(oldMappings, thresholds) {\n  if (!oldMappings) {\n    return undefined;\n  }\n\n  const valueMaps = {\n    type: MappingType.ValueToText,\n    options: {}\n  };\n  const newMappings = [];\n\n  for (const old of oldMappings) {\n    // when migrating singlestat to stat/gauge, mappings are handled by panel type change handler used in that migration\n    if (old.type && old.options) {\n      // collect al value->text mappings in a single value map object. These are migrated by panel change handler as a separate value maps\n      if (old.type === MappingType.ValueToText) {\n        valueMaps.options = Object.assign({}, valueMaps.options, old.options);\n      } else {\n        newMappings.push(old);\n      }\n\n      continue;\n    } // Use the color we would have picked from thesholds\n\n\n    let color = undefined;\n    const numeric = parseFloat(old.text);\n\n    if (thresholds && !isNaN(numeric)) {\n      const level = getActiveThreshold(numeric, thresholds.steps);\n\n      if (level && level.color) {\n        color = level.color;\n      }\n    }\n\n    switch (old.type) {\n      case 1:\n        // MappingType.ValueToText:\n        if (old.value != null) {\n          if (old.value === 'null') {\n            newMappings.push({\n              type: MappingType.SpecialValue,\n              options: {\n                match: SpecialValueMatch.Null,\n                result: {\n                  text: old.text,\n                  color\n                }\n              }\n            });\n          } else {\n            valueMaps.options[String(old.value)] = {\n              text: old.text,\n              color\n            };\n          }\n        }\n\n        break;\n\n      case 2:\n        // MappingType.RangeToText:\n        newMappings.push({\n          type: MappingType.RangeToText,\n          options: {\n            from: +old.from,\n            to: +old.to,\n            result: {\n              text: old.text,\n              color\n            }\n          }\n        });\n        break;\n    }\n  }\n\n  if (Object.keys(valueMaps.options).length > 0) {\n    newMappings.unshift(valueMaps);\n  }\n\n  return newMappings;\n}\n\nfunction migrateTooltipOptions(panel) {\n  if (panel.type === 'timeseries' || panel.type === 'xychart') {\n    if (panel.options.tooltipOptions) {\n      panel.options = Object.assign({}, panel.options, {\n        tooltip: panel.options.tooltipOptions\n      });\n      delete panel.options.tooltipOptions;\n    }\n  }\n\n  return panel;\n} // This migration is performed when there is a time series panel with all axes configured to be hidden\n// To avoid breaking dashboards we add override that persists x-axis visibility\n\n\nfunction ensureXAxisVisibility(panel) {\n  if (panel.type === 'timeseries') {\n    var _panel$fieldConfig, _panel$fieldConfig$de;\n\n    if (((_panel$fieldConfig = panel.fieldConfig) === null || _panel$fieldConfig === void 0 ? void 0 : (_panel$fieldConfig$de = _panel$fieldConfig.defaults.custom) === null || _panel$fieldConfig$de === void 0 ? void 0 : _panel$fieldConfig$de.axisPlacement) === AxisPlacement.Hidden) {\n      panel.fieldConfig = Object.assign({}, panel.fieldConfig, {\n        overrides: [...panel.fieldConfig.overrides, {\n          matcher: {\n            id: FieldMatcherID.byType,\n            options: FieldType.time\n          },\n          properties: [{\n            id: 'custom.axisPlacement',\n            value: AxisPlacement.Auto\n          }]\n        }]\n      });\n    }\n  }\n\n  return panel;\n}","map":{"version":3,"names":["each","find","findIndex","flattenDeep","isArray","isBoolean","isNumber","isString","map","max","some","DataLinkBuiltInVars","FieldMatcherID","FieldType","getActiveThreshold","getDataSourceRef","isDataSourceRef","MappingType","SpecialValueMatch","standardEditorsRegistry","standardFieldConfigEditorRegistry","urlUtil","getDataSourceSrv","setDataSourceSrv","AxisPlacement","getAllOptionEditors","getAllStandardFieldConfigs","config","DEFAULT_PANEL_SPAN","DEFAULT_ROW_HEIGHT","GRID_CELL_HEIGHT","GRID_CELL_VMARGIN","GRID_COLUMN_COUNT","MIN_PANEL_HEIGHT","getFactors","kbn","DatasourceSrv","isConstant","isMulti","alignCurrentWithMulti","plugin","gaugePanelPlugin","statPanelPlugin","labelsToFieldsTransformer","mergeTransformer","migrateCloudWatchQuery","migrateMultipleStatsAnnotationQuery","migrateMultipleStatsMetricsQuery","VariableHide","PanelModel","setInit","DashboardMigrator","constructor","dashboardModel","dashboard","updateSchema","old","i","j","k","n","oldVersion","schemaVersion","panelUpgrades","services","filter","time","templating","list","push","panel","type","legend","show","grid","min","leftMin","leftMax","y_format","y_formats","y2_format","maxId","getNextPanelId","id","aliasYAxis","value","key","seriesOverrides","alias","yaxis","annotations","pulldowns","length","variable","datasource","allFormat","nav","timepicker","targets","target","refId","getNextQueryLetter","fields","tags","groupBy","rawQuery","fill","select","field","parts","params","name","func","mathExpr","asExpr","part","interval","thresholds","split","shift","join","styles","style","getVariables","templateVariable","refresh","hideVariable","hide","hideLabel","yaxes","logBase","leftLogBase","format","label","leftYAxisLabel","rightMin","rightMax","rightLogBase","rightYAxisLabel","xaxis","t1","t2","threshold1","thresholdLine","line","lineColor","threshold1Color","colorMode","fillColor","threshold2","threshold2Color","op","graphTooltip","sharedCrosshair","upgradeToGridLayout","minSpan","factors","maxPerRow","o","options","valueOptions","unit","stat","decimals","prefix","suffix","reverse","links","upgradePanelLink","updateLinks","link","url","updateVariablesSyntax","dataLinks","fieldOptions","defaults","title","replace","align","multi","current","wasAngularTable","wasReactTable","table","wasReactText","angular","dontHide","selected","text","query","migrateSinglestat","tagsQuery","tagValuesQuery","useTags","upgradeValueMappingsForPanel","migrateTooltipOptions","transformations","t","appendTransformerAfter","migrateDatasourceNameToRef","returnDefaultAsNull","targetRef","migrateCloudWatchQueries","migrateCloudWatchAnnotationQuery","ensureXAxisVisibility","defaultDs","getInstanceSettings","panelDataSourceWasDefault","uid","panels","call","rowPanels","isCloudWatchQuery","hasOwnProperty","newQueries","newQuery","annotation","isLegacyCloudWatchAnnotationQuery","newAnnotationQueries","newAnnotationQuery","yPos","widthFactor","maxPanelId","rows","row","nextRowId","showRows","collapse","showTitle","repeat","repeatIteration","height","rowGridHeight","getGridHeight","rowPanel","rowPanelModel","collapsed","gridPos","x","y","w","h","rowArea","RowArea","span","Math","panelWidth","floor","panelHeight","panelPos","getPanelPosition","addPanel","parseInt","gridHeight","ceil","width","rowYPos","area","Array","reset","callOnce","startPlace","endPlace","place","undefined","slice","slugifyForUrl","dashUri","keepTime","appendQueryToUrl","includeVars","targetBlank","legacyVariableNamesRegex","match","seriesName","seriesName1","valueTime","fieldName","fieldName1","returnSaveModel","changePlugin","angularPanelCtrl","gauge","meta","getSaveModel","nameOrRef","ds","cfg","fieldConfig","mappings","upgradeValueMappings","overrides","override","prop","properties","oldMappings","valueMaps","ValueToText","newMappings","color","numeric","parseFloat","isNaN","level","steps","SpecialValue","Null","result","String","RangeToText","from","to","Object","keys","unshift","tooltipOptions","tooltip","custom","axisPlacement","Hidden","matcher","byType","Auto"],"sources":["/home/soula/grafana/public/app/features/dashboard/state/DashboardMigrator.ts"],"sourcesContent":["import { each, find, findIndex, flattenDeep, isArray, isBoolean, isNumber, isString, map, max, some } from 'lodash';\n\nimport {\n  AnnotationQuery,\n  DataLink,\n  DataLinkBuiltInVars,\n  DataQuery,\n  DataSourceRef,\n  DataTransformerConfig,\n  FieldConfigSource,\n  FieldMatcherID,\n  FieldType,\n  getActiveThreshold,\n  getDataSourceRef,\n  isDataSourceRef,\n  MappingType,\n  PanelPlugin,\n  SpecialValueMatch,\n  standardEditorsRegistry,\n  standardFieldConfigEditorRegistry,\n  ThresholdsConfig,\n  urlUtil,\n  ValueMap,\n  ValueMapping,\n} from '@grafana/data';\nimport { getDataSourceSrv, setDataSourceSrv } from '@grafana/runtime';\nimport { AxisPlacement, GraphFieldConfig } from '@grafana/ui';\nimport { getAllOptionEditors, getAllStandardFieldConfigs } from 'app/core/components/OptionsUI/registry';\nimport { config } from 'app/core/config';\nimport {\n  DEFAULT_PANEL_SPAN,\n  DEFAULT_ROW_HEIGHT,\n  GRID_CELL_HEIGHT,\n  GRID_CELL_VMARGIN,\n  GRID_COLUMN_COUNT,\n  MIN_PANEL_HEIGHT,\n} from 'app/core/constants';\nimport getFactors from 'app/core/utils/factors';\nimport kbn from 'app/core/utils/kbn';\nimport { DatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { isConstant, isMulti } from 'app/features/variables/guard';\nimport { alignCurrentWithMulti } from 'app/features/variables/shared/multiOptions';\nimport { CloudWatchMetricsQuery, LegacyAnnotationQuery } from 'app/plugins/datasource/cloudwatch/types';\nimport { plugin as gaugePanelPlugin } from 'app/plugins/panel/gauge/module';\nimport { plugin as statPanelPlugin } from 'app/plugins/panel/stat/module';\n\nimport { labelsToFieldsTransformer } from '../../../../../packages/grafana-data/src/transformations/transformers/labelsToFields';\nimport { mergeTransformer } from '../../../../../packages/grafana-data/src/transformations/transformers/merge';\nimport {\n  migrateCloudWatchQuery,\n  migrateMultipleStatsAnnotationQuery,\n  migrateMultipleStatsMetricsQuery,\n} from '../../../plugins/datasource/cloudwatch/migrations/dashboardMigrations';\nimport { VariableHide } from '../../variables/types';\n\nimport { DashboardModel } from './DashboardModel';\nimport { PanelModel } from './PanelModel';\n\nstandardEditorsRegistry.setInit(getAllOptionEditors);\nstandardFieldConfigEditorRegistry.setInit(getAllStandardFieldConfigs);\n\ntype PanelSchemeUpgradeHandler = (panel: PanelModel) => PanelModel;\nexport class DashboardMigrator {\n  dashboard: DashboardModel;\n\n  constructor(dashboardModel: DashboardModel) {\n    this.dashboard = dashboardModel;\n\n    // for tests to pass\n    if (!getDataSourceSrv()) {\n      setDataSourceSrv(new DatasourceSrv());\n    }\n  }\n\n  updateSchema(old: any) {\n    let i, j, k, n;\n    const oldVersion = this.dashboard.schemaVersion;\n    const panelUpgrades: PanelSchemeUpgradeHandler[] = [];\n    this.dashboard.schemaVersion = 36;\n\n    if (oldVersion === this.dashboard.schemaVersion) {\n      return;\n    }\n\n    // version 2 schema changes\n    if (oldVersion < 2) {\n      if (old.services) {\n        if (old.services.filter) {\n          this.dashboard.time = old.services.filter.time;\n          this.dashboard.templating.list = old.services.filter.list || [];\n        }\n      }\n\n      panelUpgrades.push((panel: any) => {\n        // rename panel type\n        if (panel.type === 'graphite') {\n          panel.type = 'graph';\n        }\n\n        if (panel.type !== 'graph') {\n          return panel;\n        }\n\n        if (isBoolean(panel.legend)) {\n          panel.legend = { show: panel.legend };\n        }\n\n        if (panel.grid) {\n          if (panel.grid.min) {\n            panel.grid.leftMin = panel.grid.min;\n            delete panel.grid.min;\n          }\n\n          if (panel.grid.max) {\n            panel.grid.leftMax = panel.grid.max;\n            delete panel.grid.max;\n          }\n        }\n\n        if (panel.y_format) {\n          if (!panel.y_formats) {\n            panel.y_formats = [];\n          }\n          panel.y_formats[0] = panel.y_format;\n          delete panel.y_format;\n        }\n\n        if (panel.y2_format) {\n          if (!panel.y_formats) {\n            panel.y_formats = [];\n          }\n          panel.y_formats[1] = panel.y2_format;\n          delete panel.y2_format;\n        }\n\n        return panel;\n      });\n    }\n\n    // schema version 3 changes\n    if (oldVersion < 3) {\n      // ensure panel IDs\n      let maxId = this.dashboard.getNextPanelId();\n      panelUpgrades.push((panel: any) => {\n        if (!panel.id) {\n          panel.id = maxId;\n          maxId += 1;\n        }\n\n        return panel;\n      });\n    }\n\n    // schema version 4 changes\n    if (oldVersion < 4) {\n      // move aliasYAxis changes\n      panelUpgrades.push((panel: any) => {\n        if (panel.type !== 'graph') {\n          return panel;\n        }\n\n        each(panel.aliasYAxis, (value, key) => {\n          panel.seriesOverrides = [{ alias: key, yaxis: value }];\n        });\n\n        delete panel.aliasYAxis;\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 6) {\n      // move drop-downs to new schema\n      const annotations: any = find(old.pulldowns, { type: 'annotations' });\n\n      if (annotations) {\n        this.dashboard.annotations = {\n          list: annotations.annotations || [],\n        };\n      }\n\n      // update template variables\n      for (i = 0; i < this.dashboard.templating.list.length; i++) {\n        const variable = this.dashboard.templating.list[i];\n        if (variable.datasource === void 0) {\n          variable.datasource = null;\n        }\n        if (variable.type === 'filter') {\n          variable.type = 'query';\n        }\n        if (variable.type === void 0) {\n          variable.type = 'query';\n        }\n        if (variable.allFormat === void 0) {\n          variable.allFormat = 'glob';\n        }\n      }\n    }\n\n    if (oldVersion < 7) {\n      if (old.nav && old.nav.length) {\n        this.dashboard.timepicker = old.nav[0];\n      }\n\n      // ensure query refIds\n      panelUpgrades.push((panel: any) => {\n        each(panel.targets, (target) => {\n          if (!target.refId) {\n            target.refId = panel.getNextQueryLetter && panel.getNextQueryLetter();\n          }\n        });\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 8) {\n      panelUpgrades.push((panel: any) => {\n        each(panel.targets, (target) => {\n          // update old influxdb query schema\n          if (target.fields && target.tags && target.groupBy) {\n            if (target.rawQuery) {\n              delete target.fields;\n              delete target.fill;\n            } else {\n              target.select = map(target.fields, (field) => {\n                const parts = [];\n                parts.push({ type: 'field', params: [field.name] });\n                parts.push({ type: field.func, params: [] });\n                if (field.mathExpr) {\n                  parts.push({ type: 'math', params: [field.mathExpr] });\n                }\n                if (field.asExpr) {\n                  parts.push({ type: 'alias', params: [field.asExpr] });\n                }\n                return parts;\n              });\n              delete target.fields;\n              each(target.groupBy, (part) => {\n                if (part.type === 'time' && part.interval) {\n                  part.params = [part.interval];\n                  delete part.interval;\n                }\n                if (part.type === 'tag' && part.key) {\n                  part.params = [part.key];\n                  delete part.key;\n                }\n              });\n\n              if (target.fill) {\n                target.groupBy.push({ type: 'fill', params: [target.fill] });\n                delete target.fill;\n              }\n            }\n          }\n        });\n\n        return panel;\n      });\n    }\n\n    // schema version 9 changes\n    if (oldVersion < 9) {\n      // move aliasYAxis changes\n      panelUpgrades.push((panel: any) => {\n        if (panel.type !== 'singlestat' && panel.thresholds !== '') {\n          return panel;\n        }\n\n        if (panel.thresholds) {\n          const k = panel.thresholds.split(',');\n\n          if (k.length >= 3) {\n            k.shift();\n            panel.thresholds = k.join(',');\n          }\n        }\n\n        return panel;\n      });\n    }\n\n    // schema version 10 changes\n    if (oldVersion < 10) {\n      // move aliasYAxis changes\n      panelUpgrades.push((panel: any) => {\n        if (panel.type !== 'table') {\n          return panel;\n        }\n\n        each(panel.styles, (style) => {\n          if (style.thresholds && style.thresholds.length >= 3) {\n            const k = style.thresholds;\n            k.shift();\n            style.thresholds = k;\n          }\n        });\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 12) {\n      // update template variables\n      each(this.dashboard.getVariables(), (templateVariable: any) => {\n        if (templateVariable.refresh) {\n          templateVariable.refresh = 1;\n        }\n        if (!templateVariable.refresh) {\n          templateVariable.refresh = 0;\n        }\n        if (templateVariable.hideVariable) {\n          templateVariable.hide = 2;\n        } else if (templateVariable.hideLabel) {\n          templateVariable.hide = 1;\n        }\n      });\n    }\n\n    if (oldVersion < 12) {\n      // update graph yaxes changes\n      panelUpgrades.push((panel: any) => {\n        if (panel.type !== 'graph') {\n          return panel;\n        }\n        if (!panel.grid) {\n          return panel;\n        }\n\n        if (!panel.yaxes) {\n          panel.yaxes = [\n            {\n              show: panel['y-axis'],\n              min: panel.grid.leftMin,\n              max: panel.grid.leftMax,\n              logBase: panel.grid.leftLogBase,\n              format: panel.y_formats[0],\n              label: panel.leftYAxisLabel,\n            },\n            {\n              show: panel['y-axis'],\n              min: panel.grid.rightMin,\n              max: panel.grid.rightMax,\n              logBase: panel.grid.rightLogBase,\n              format: panel.y_formats[1],\n              label: panel.rightYAxisLabel,\n            },\n          ];\n\n          panel.xaxis = {\n            show: panel['x-axis'],\n          };\n\n          delete panel.grid.leftMin;\n          delete panel.grid.leftMax;\n          delete panel.grid.leftLogBase;\n          delete panel.grid.rightMin;\n          delete panel.grid.rightMax;\n          delete panel.grid.rightLogBase;\n          delete panel.y_formats;\n          delete panel.leftYAxisLabel;\n          delete panel.rightYAxisLabel;\n          delete panel['y-axis'];\n          delete panel['x-axis'];\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 13) {\n      // update graph yaxes changes\n      panelUpgrades.push((panel: any) => {\n        if (panel.type !== 'graph') {\n          return panel;\n        }\n        if (!panel.grid) {\n          return panel;\n        }\n\n        if (!panel.thresholds) {\n          panel.thresholds = [];\n        }\n        const t1: any = {},\n          t2: any = {};\n\n        if (panel.grid.threshold1 !== null) {\n          t1.value = panel.grid.threshold1;\n          if (panel.grid.thresholdLine) {\n            t1.line = true;\n            t1.lineColor = panel.grid.threshold1Color;\n            t1.colorMode = 'custom';\n          } else {\n            t1.fill = true;\n            t1.fillColor = panel.grid.threshold1Color;\n            t1.colorMode = 'custom';\n          }\n        }\n\n        if (panel.grid.threshold2 !== null) {\n          t2.value = panel.grid.threshold2;\n          if (panel.grid.thresholdLine) {\n            t2.line = true;\n            t2.lineColor = panel.grid.threshold2Color;\n            t2.colorMode = 'custom';\n          } else {\n            t2.fill = true;\n            t2.fillColor = panel.grid.threshold2Color;\n            t2.colorMode = 'custom';\n          }\n        }\n\n        if (isNumber(t1.value)) {\n          if (isNumber(t2.value)) {\n            if (t1.value > t2.value) {\n              t1.op = t2.op = 'lt';\n              panel.thresholds.push(t1);\n              panel.thresholds.push(t2);\n            } else {\n              t1.op = t2.op = 'gt';\n              panel.thresholds.push(t1);\n              panel.thresholds.push(t2);\n            }\n          } else {\n            t1.op = 'gt';\n            panel.thresholds.push(t1);\n          }\n        }\n\n        delete panel.grid.threshold1;\n        delete panel.grid.threshold1Color;\n        delete panel.grid.threshold2;\n        delete panel.grid.threshold2Color;\n        delete panel.grid.thresholdLine;\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 14) {\n      this.dashboard.graphTooltip = old.sharedCrosshair ? 1 : 0;\n    }\n\n    if (oldVersion < 16) {\n      this.upgradeToGridLayout(old);\n    }\n\n    if (oldVersion < 17) {\n      panelUpgrades.push((panel: any) => {\n        if (panel.minSpan) {\n          const max = GRID_COLUMN_COUNT / panel.minSpan;\n          const factors = getFactors(GRID_COLUMN_COUNT);\n          // find the best match compared to factors\n          // (ie. [1,2,3,4,6,12,24] for 24 columns)\n          panel.maxPerRow =\n            factors[\n              findIndex(factors, (o) => {\n                return o > max;\n              }) - 1\n            ];\n        }\n\n        delete panel.minSpan;\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 18) {\n      // migrate change to gauge options\n      panelUpgrades.push((panel: any) => {\n        if (panel['options-gauge']) {\n          panel.options = panel['options-gauge'];\n          panel.options.valueOptions = {\n            unit: panel.options.unit,\n            stat: panel.options.stat,\n            decimals: panel.options.decimals,\n            prefix: panel.options.prefix,\n            suffix: panel.options.suffix,\n          };\n\n          // correct order\n          if (panel.options.thresholds) {\n            panel.options.thresholds.reverse();\n          }\n\n          // this options prop was due to a bug\n          delete panel.options.options;\n          delete panel.options.unit;\n          delete panel.options.stat;\n          delete panel.options.decimals;\n          delete panel.options.prefix;\n          delete panel.options.suffix;\n          delete panel['options-gauge'];\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 19) {\n      // migrate change to gauge options\n      panelUpgrades.push((panel: any) => {\n        if (panel.links && isArray(panel.links)) {\n          panel.links = panel.links.map(upgradePanelLink);\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 20) {\n      const updateLinks = (link: DataLink) => {\n        return {\n          ...link,\n          url: updateVariablesSyntax(link.url),\n        };\n      };\n      panelUpgrades.push((panel: any) => {\n        // For graph panel\n        if (panel.options && panel.options.dataLinks && isArray(panel.options.dataLinks)) {\n          panel.options.dataLinks = panel.options.dataLinks.map(updateLinks);\n        }\n\n        // For panel with fieldOptions\n        if (panel.options && panel.options.fieldOptions && panel.options.fieldOptions.defaults) {\n          if (panel.options.fieldOptions.defaults.links && isArray(panel.options.fieldOptions.defaults.links)) {\n            panel.options.fieldOptions.defaults.links = panel.options.fieldOptions.defaults.links.map(updateLinks);\n          }\n          if (panel.options.fieldOptions.defaults.title) {\n            panel.options.fieldOptions.defaults.title = updateVariablesSyntax(\n              panel.options.fieldOptions.defaults.title\n            );\n          }\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 21) {\n      const updateLinks = (link: DataLink) => {\n        return {\n          ...link,\n          url: link.url.replace(/__series.labels/g, '__field.labels'),\n        };\n      };\n      panelUpgrades.push((panel: any) => {\n        // For graph panel\n        if (panel.options && panel.options.dataLinks && isArray(panel.options.dataLinks)) {\n          panel.options.dataLinks = panel.options.dataLinks.map(updateLinks);\n        }\n\n        // For panel with fieldOptions\n        if (panel.options && panel.options.fieldOptions && panel.options.fieldOptions.defaults) {\n          if (panel.options.fieldOptions.defaults.links && isArray(panel.options.fieldOptions.defaults.links)) {\n            panel.options.fieldOptions.defaults.links = panel.options.fieldOptions.defaults.links.map(updateLinks);\n          }\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 22) {\n      panelUpgrades.push((panel: any) => {\n        if (panel.type !== 'table') {\n          return panel;\n        }\n\n        each(panel.styles, (style) => {\n          style.align = 'auto';\n        });\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 23) {\n      for (const variable of this.dashboard.templating.list) {\n        if (!isMulti(variable)) {\n          continue;\n        }\n        const { multi, current } = variable;\n        variable.current = alignCurrentWithMulti(current, multi);\n      }\n    }\n\n    if (oldVersion < 24) {\n      // 7.0\n      // - migrate existing tables to 'table-old'\n      panelUpgrades.push((panel: any) => {\n        const wasAngularTable = panel.type === 'table';\n        if (wasAngularTable && !panel.styles) {\n          return panel; // styles are missing so assumes default settings\n        }\n        const wasReactTable = panel.table === 'table2';\n        if (!wasAngularTable || wasReactTable) {\n          return panel;\n        }\n        panel.type = wasAngularTable ? 'table-old' : 'table';\n        return panel;\n      });\n    }\n\n    if (oldVersion < 25) {\n      // tags are removed in version 28\n    }\n\n    if (oldVersion < 26) {\n      panelUpgrades.push((panel: any) => {\n        const wasReactText = panel.type === 'text2';\n        if (!wasReactText) {\n          return panel;\n        }\n\n        panel.type = 'text';\n        delete panel.options.angular;\n        return panel;\n      });\n    }\n\n    if (oldVersion < 27) {\n      for (const variable of this.dashboard.templating.list) {\n        if (!isConstant(variable)) {\n          continue;\n        }\n\n        if (variable.hide === VariableHide.dontHide || variable.hide === VariableHide.hideLabel) {\n          variable.type = 'textbox';\n        }\n\n        variable.current = { selected: true, text: variable.query ?? '', value: variable.query ?? '' };\n        variable.options = [variable.current];\n      }\n    }\n\n    if (oldVersion < 28) {\n      panelUpgrades.push((panel: PanelModel) => {\n        if (panel.type === 'singlestat') {\n          return migrateSinglestat(panel);\n        }\n\n        return panel;\n      });\n\n      for (const variable of this.dashboard.templating.list) {\n        if (variable.tags) {\n          delete variable.tags;\n        }\n\n        if (variable.tagsQuery) {\n          delete variable.tagsQuery;\n        }\n\n        if (variable.tagValuesQuery) {\n          delete variable.tagValuesQuery;\n        }\n\n        if (variable.useTags) {\n          delete variable.useTags;\n        }\n      }\n    }\n\n    if (oldVersion < 29) {\n      for (const variable of this.dashboard.templating.list) {\n        if (variable.type !== 'query') {\n          continue;\n        }\n\n        if (variable.refresh !== 1 && variable.refresh !== 2) {\n          variable.refresh = 1;\n        }\n\n        if (variable.options?.length) {\n          variable.options = [];\n        }\n      }\n    }\n\n    if (oldVersion < 30) {\n      panelUpgrades.push(upgradeValueMappingsForPanel);\n      panelUpgrades.push(migrateTooltipOptions);\n    }\n\n    if (oldVersion < 31) {\n      panelUpgrades.push((panel: PanelModel) => {\n        if (panel.transformations) {\n          for (const t of panel.transformations) {\n            if (t.id === labelsToFieldsTransformer.id) {\n              return appendTransformerAfter(panel, labelsToFieldsTransformer.id, {\n                id: mergeTransformer.id,\n                options: {},\n              });\n            }\n          }\n        }\n        return panel;\n      });\n    }\n\n    if (oldVersion < 32) {\n      // CloudWatch migrations have been moved to version 34\n    }\n\n    // Replace datasource name with reference, uid and type\n    if (oldVersion < 33) {\n      panelUpgrades.push((panel) => {\n        panel.datasource = migrateDatasourceNameToRef(panel.datasource, { returnDefaultAsNull: true });\n\n        if (!panel.targets) {\n          return panel;\n        }\n\n        for (const target of panel.targets) {\n          const targetRef = migrateDatasourceNameToRef(target.datasource, { returnDefaultAsNull: true });\n          if (targetRef != null) {\n            target.datasource = targetRef;\n          }\n        }\n\n        return panel;\n      });\n    }\n\n    if (oldVersion < 34) {\n      panelUpgrades.push((panel: PanelModel) => {\n        this.migrateCloudWatchQueries(panel);\n        return panel;\n      });\n\n      this.migrateCloudWatchAnnotationQuery();\n    }\n\n    if (oldVersion < 35) {\n      panelUpgrades.push(ensureXAxisVisibility);\n    }\n\n    if (oldVersion < 36) {\n      // Migrate datasource to refs in annotations\n      for (const query of this.dashboard.annotations.list) {\n        query.datasource = migrateDatasourceNameToRef(query.datasource, { returnDefaultAsNull: false });\n      }\n\n      // Migrate datasource: null to current default\n      const defaultDs = getDataSourceSrv().getInstanceSettings(null);\n      if (defaultDs) {\n        for (const variable of this.dashboard.templating.list) {\n          if (variable.type === 'query' && variable.datasource === null) {\n            variable.datasource = getDataSourceRef(defaultDs);\n          }\n        }\n\n        panelUpgrades.push((panel: PanelModel) => {\n          if (panel.targets) {\n            let panelDataSourceWasDefault = false;\n            if (panel.datasource == null && panel.targets.length > 0) {\n              panel.datasource = getDataSourceRef(defaultDs);\n              panelDataSourceWasDefault = true;\n            }\n\n            for (const target of panel.targets) {\n              if (target.datasource == null || target.datasource.uid == null) {\n                target.datasource = { ...panel.datasource };\n              }\n\n              if (panelDataSourceWasDefault && target.datasource.uid !== '__expr__') {\n                // We can have situations when default ds changed and the panel level data source is different from the queries\n                // In this case we use the query level data source as source for truth\n                panel.datasource = target.datasource as DataSourceRef;\n              }\n            }\n          }\n          return panel;\n        });\n      }\n    }\n\n    if (panelUpgrades.length === 0) {\n      return;\n    }\n\n    for (j = 0; j < this.dashboard.panels.length; j++) {\n      for (k = 0; k < panelUpgrades.length; k++) {\n        this.dashboard.panels[j] = panelUpgrades[k].call(this, this.dashboard.panels[j]);\n        const rowPanels = this.dashboard.panels[j].panels;\n        if (rowPanels) {\n          for (n = 0; n < rowPanels.length; n++) {\n            rowPanels[n] = panelUpgrades[k].call(this, rowPanels[n]);\n          }\n        }\n      }\n    }\n  }\n\n  // Migrates metric queries and/or annotation queries that use more than one statistic.\n  // E.g query.statistics = ['Max', 'Min'] will be migrated to two queries - query1.statistic = 'Max' and query2.statistic = 'Min'\n  // New queries, that were created during migration, are put at the end of the array.\n  migrateCloudWatchQueries(panel: PanelModel) {\n    for (const target of panel.targets || []) {\n      if (isCloudWatchQuery(target)) {\n        migrateCloudWatchQuery(target);\n        if (target.hasOwnProperty('statistics')) {\n          // New queries, that were created during migration, are put at the end of the array.\n          const newQueries = migrateMultipleStatsMetricsQuery(target, [...panel.targets]);\n          for (const newQuery of newQueries) {\n            panel.targets.push(newQuery);\n          }\n        }\n      }\n    }\n  }\n\n  migrateCloudWatchAnnotationQuery() {\n    for (const annotation of this.dashboard.annotations.list) {\n      if (isLegacyCloudWatchAnnotationQuery(annotation)) {\n        const newAnnotationQueries = migrateMultipleStatsAnnotationQuery(annotation);\n        for (const newAnnotationQuery of newAnnotationQueries) {\n          this.dashboard.annotations.list.push(newAnnotationQuery);\n        }\n      }\n    }\n  }\n\n  upgradeToGridLayout(old: any) {\n    let yPos = 0;\n    const widthFactor = GRID_COLUMN_COUNT / 12;\n\n    const maxPanelId = max(\n      flattenDeep(\n        map(old.rows, (row) => {\n          return map(row.panels, 'id');\n        })\n      )\n    );\n    let nextRowId = maxPanelId + 1;\n\n    if (!old.rows) {\n      return;\n    }\n\n    // Add special \"row\" panels if even one row is collapsed, repeated or has visible title\n    const showRows = some(old.rows, (row) => row.collapse || row.showTitle || row.repeat);\n\n    for (const row of old.rows) {\n      if (row.repeatIteration) {\n        continue;\n      }\n\n      const height: any = row.height || DEFAULT_ROW_HEIGHT;\n      const rowGridHeight = getGridHeight(height);\n\n      const rowPanel: any = {};\n      let rowPanelModel: PanelModel | undefined;\n\n      if (showRows) {\n        // add special row panel\n        rowPanel.id = nextRowId;\n        rowPanel.type = 'row';\n        rowPanel.title = row.title;\n        rowPanel.collapsed = row.collapse;\n        rowPanel.repeat = row.repeat;\n        rowPanel.panels = [];\n        rowPanel.gridPos = {\n          x: 0,\n          y: yPos,\n          w: GRID_COLUMN_COUNT,\n          h: rowGridHeight,\n        };\n        rowPanelModel = new PanelModel(rowPanel);\n        nextRowId++;\n        yPos++;\n      }\n\n      const rowArea = new RowArea(rowGridHeight, GRID_COLUMN_COUNT, yPos);\n\n      for (const panel of row.panels) {\n        panel.span = panel.span || DEFAULT_PANEL_SPAN;\n        if (panel.minSpan) {\n          panel.minSpan = Math.min(GRID_COLUMN_COUNT, (GRID_COLUMN_COUNT / 12) * panel.minSpan);\n        }\n        const panelWidth = Math.floor(panel.span) * widthFactor;\n        const panelHeight = panel.height ? getGridHeight(panel.height) : rowGridHeight;\n\n        const panelPos = rowArea.getPanelPosition(panelHeight, panelWidth);\n        yPos = rowArea.yPos;\n        panel.gridPos = {\n          x: panelPos.x,\n          y: yPos + panelPos.y,\n          w: panelWidth,\n          h: panelHeight,\n        };\n        rowArea.addPanel(panel.gridPos);\n\n        delete panel.span;\n\n        if (rowPanelModel && rowPanel.collapsed) {\n          rowPanelModel.panels?.push(panel);\n        } else {\n          this.dashboard.panels.push(new PanelModel(panel));\n        }\n      }\n\n      if (rowPanelModel) {\n        this.dashboard.panels.push(rowPanelModel);\n      }\n\n      if (!(rowPanelModel && rowPanel.collapsed)) {\n        yPos += rowGridHeight;\n      }\n    }\n  }\n}\n\nfunction getGridHeight(height: number | string) {\n  if (isString(height)) {\n    height = parseInt(height.replace('px', ''), 10);\n  }\n\n  if (height < MIN_PANEL_HEIGHT) {\n    height = MIN_PANEL_HEIGHT;\n  }\n\n  const gridHeight = Math.ceil(height / (GRID_CELL_HEIGHT + GRID_CELL_VMARGIN));\n  return gridHeight;\n}\n\n/**\n * RowArea represents dashboard row filled by panels\n * area is an array of numbers represented filled column's cells like\n *  -----------------------\n * |******** ****\n * |******** ****\n * |********\n *  -----------------------\n *  33333333 2222 00000 ...\n */\nclass RowArea {\n  area: number[];\n  yPos: number;\n  height: number;\n\n  constructor(height: number, width = GRID_COLUMN_COUNT, rowYPos = 0) {\n    this.area = new Array(width).fill(0);\n    this.yPos = rowYPos;\n    this.height = height;\n  }\n\n  reset() {\n    this.area.fill(0);\n  }\n\n  /**\n   * Update area after adding the panel.\n   */\n  addPanel(gridPos: any) {\n    for (let i = gridPos.x; i < gridPos.x + gridPos.w; i++) {\n      if (!this.area[i] || gridPos.y + gridPos.h - this.yPos > this.area[i]) {\n        this.area[i] = gridPos.y + gridPos.h - this.yPos;\n      }\n    }\n    return this.area;\n  }\n\n  /**\n   * Calculate position for the new panel in the row.\n   */\n  getPanelPosition(panelHeight: number, panelWidth: number, callOnce = false): any {\n    let startPlace, endPlace;\n    let place;\n    for (let i = this.area.length - 1; i >= 0; i--) {\n      if (this.height - this.area[i] > 0) {\n        if (endPlace === undefined) {\n          endPlace = i;\n        } else {\n          if (i < this.area.length - 1 && this.area[i] <= this.area[i + 1]) {\n            startPlace = i;\n          } else {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (startPlace !== undefined && endPlace !== undefined && endPlace - startPlace >= panelWidth - 1) {\n      const yPos = max(this.area.slice(startPlace));\n      place = {\n        x: startPlace,\n        y: yPos,\n      };\n    } else if (!callOnce) {\n      // wrap to next row\n      this.yPos += this.height;\n      this.reset();\n      return this.getPanelPosition(panelHeight, panelWidth, true);\n    } else {\n      return null;\n    }\n\n    return place;\n  }\n}\n\nfunction upgradePanelLink(link: any): DataLink {\n  let url = link.url;\n\n  if (!url && link.dashboard) {\n    url = `dashboard/db/${kbn.slugifyForUrl(link.dashboard)}`;\n  }\n\n  if (!url && link.dashUri) {\n    url = `dashboard/${link.dashUri}`;\n  }\n\n  // some models are incomplete and have no dashboard or dashUri\n  if (!url) {\n    url = '/';\n  }\n\n  if (link.keepTime) {\n    url = urlUtil.appendQueryToUrl(url, `$${DataLinkBuiltInVars.keepTime}`);\n  }\n\n  if (link.includeVars) {\n    url = urlUtil.appendQueryToUrl(url, `$${DataLinkBuiltInVars.includeVars}`);\n  }\n\n  if (link.params) {\n    url = urlUtil.appendQueryToUrl(url, link.params);\n  }\n\n  return {\n    url: url,\n    title: link.title,\n    targetBlank: link.targetBlank,\n  };\n}\n\nfunction updateVariablesSyntax(text: string) {\n  const legacyVariableNamesRegex = /(__series_name)|(\\$__series_name)|(__value_time)|(__field_name)|(\\$__field_name)/g;\n\n  return text.replace(legacyVariableNamesRegex, (match, seriesName, seriesName1, valueTime, fieldName, fieldName1) => {\n    if (seriesName) {\n      return '__series.name';\n    }\n    if (seriesName1) {\n      return '${__series.name}';\n    }\n    if (valueTime) {\n      return '__value.time';\n    }\n    if (fieldName) {\n      return '__field.name';\n    }\n    if (fieldName1) {\n      return '${__field.name}';\n    }\n    return match;\n  });\n}\n\nfunction migrateSinglestat(panel: PanelModel) {\n  // If   'grafana-singlestat-panel' exists, move to that\n  if (config.panels['grafana-singlestat-panel']) {\n    panel.type = 'grafana-singlestat-panel';\n    return panel;\n  }\n\n  let returnSaveModel = false;\n\n  if (!panel.changePlugin) {\n    returnSaveModel = true;\n    panel = new PanelModel(panel);\n  }\n\n  // To make sure PanelModel.isAngularPlugin logic thinks the current panel is angular\n  // And since this plugin no longer exist we just fake it here\n  panel.plugin = { angularPanelCtrl: {} } as PanelPlugin;\n\n  // Otheriwse use gauge or stat panel\n  if ((panel as any).gauge?.show) {\n    gaugePanelPlugin.meta = config.panels['gauge'];\n    panel.changePlugin(gaugePanelPlugin);\n  } else {\n    statPanelPlugin.meta = config.panels['stat'];\n    panel.changePlugin(statPanelPlugin);\n  }\n\n  if (returnSaveModel) {\n    return panel.getSaveModel();\n  }\n\n  return panel;\n}\n\ninterface MigrateDatasourceNameOptions {\n  returnDefaultAsNull: boolean;\n}\n\nexport function migrateDatasourceNameToRef(\n  nameOrRef: string | DataSourceRef | null | undefined,\n  options: MigrateDatasourceNameOptions\n): DataSourceRef | null {\n  if (options.returnDefaultAsNull && (nameOrRef == null || nameOrRef === 'default')) {\n    return null;\n  }\n\n  if (isDataSourceRef(nameOrRef)) {\n    return nameOrRef;\n  }\n\n  const ds = getDataSourceSrv().getInstanceSettings(nameOrRef);\n  if (!ds) {\n    return { uid: nameOrRef as string }; // not found\n  }\n\n  return getDataSourceRef(ds);\n}\n\n// mutates transformations appending a new transformer after the existing one\nfunction appendTransformerAfter(panel: PanelModel, id: string, cfg: DataTransformerConfig) {\n  if (panel.transformations) {\n    const transformations: DataTransformerConfig[] = [];\n    for (const t of panel.transformations) {\n      transformations.push(t);\n      if (t.id === id) {\n        transformations.push({ ...cfg });\n      }\n    }\n    panel.transformations = transformations;\n  }\n  return panel;\n}\n\nfunction upgradeValueMappingsForPanel(panel: PanelModel) {\n  const fieldConfig = panel.fieldConfig;\n  if (!fieldConfig) {\n    return panel;\n  }\n\n  if (fieldConfig.defaults && fieldConfig.defaults.mappings) {\n    fieldConfig.defaults.mappings = upgradeValueMappings(\n      fieldConfig.defaults.mappings,\n      fieldConfig.defaults.thresholds\n    );\n  }\n\n  // Protect against no overrides\n  if (Array.isArray(fieldConfig.overrides)) {\n    for (const override of fieldConfig.overrides) {\n      for (const prop of override.properties) {\n        if (prop.id === 'mappings') {\n          prop.value = upgradeValueMappings(prop.value);\n        }\n      }\n    }\n  }\n\n  return panel;\n}\n\nfunction isCloudWatchQuery(target: DataQuery): target is CloudWatchMetricsQuery {\n  return (\n    target.hasOwnProperty('dimensions') &&\n    target.hasOwnProperty('namespace') &&\n    target.hasOwnProperty('region') &&\n    target.hasOwnProperty('metricName')\n  );\n}\n\nfunction isLegacyCloudWatchAnnotationQuery(\n  target: AnnotationQuery<DataQuery>\n): target is AnnotationQuery<LegacyAnnotationQuery> {\n  return (\n    target.hasOwnProperty('dimensions') &&\n    target.hasOwnProperty('namespace') &&\n    target.hasOwnProperty('region') &&\n    target.hasOwnProperty('prefixMatching') &&\n    target.hasOwnProperty('statistics')\n  );\n}\n\nfunction upgradeValueMappings(oldMappings: any, thresholds?: ThresholdsConfig): ValueMapping[] | undefined {\n  if (!oldMappings) {\n    return undefined;\n  }\n\n  const valueMaps: ValueMap = { type: MappingType.ValueToText, options: {} };\n  const newMappings: ValueMapping[] = [];\n\n  for (const old of oldMappings) {\n    // when migrating singlestat to stat/gauge, mappings are handled by panel type change handler used in that migration\n    if (old.type && old.options) {\n      // collect al value->text mappings in a single value map object. These are migrated by panel change handler as a separate value maps\n      if (old.type === MappingType.ValueToText) {\n        valueMaps.options = {\n          ...valueMaps.options,\n          ...old.options,\n        };\n      } else {\n        newMappings.push(old);\n      }\n      continue;\n    }\n\n    // Use the color we would have picked from thesholds\n    let color: string | undefined = undefined;\n    const numeric = parseFloat(old.text);\n    if (thresholds && !isNaN(numeric)) {\n      const level = getActiveThreshold(numeric, thresholds.steps);\n      if (level && level.color) {\n        color = level.color;\n      }\n    }\n\n    switch (old.type) {\n      case 1: // MappingType.ValueToText:\n        if (old.value != null) {\n          if (old.value === 'null') {\n            newMappings.push({\n              type: MappingType.SpecialValue,\n              options: {\n                match: SpecialValueMatch.Null,\n                result: { text: old.text, color },\n              },\n            });\n          } else {\n            valueMaps.options[String(old.value)] = {\n              text: old.text,\n              color,\n            };\n          }\n        }\n        break;\n      case 2: // MappingType.RangeToText:\n        newMappings.push({\n          type: MappingType.RangeToText,\n          options: {\n            from: +old.from,\n            to: +old.to,\n            result: { text: old.text, color },\n          },\n        });\n        break;\n    }\n  }\n\n  if (Object.keys(valueMaps.options).length > 0) {\n    newMappings.unshift(valueMaps);\n  }\n\n  return newMappings;\n}\n\nfunction migrateTooltipOptions(panel: PanelModel) {\n  if (panel.type === 'timeseries' || panel.type === 'xychart') {\n    if (panel.options.tooltipOptions) {\n      panel.options = {\n        ...panel.options,\n        tooltip: panel.options.tooltipOptions,\n      };\n      delete panel.options.tooltipOptions;\n    }\n  }\n\n  return panel;\n}\n\n// This migration is performed when there is a time series panel with all axes configured to be hidden\n// To avoid breaking dashboards we add override that persists x-axis visibility\nfunction ensureXAxisVisibility(panel: PanelModel) {\n  if (panel.type === 'timeseries') {\n    if (\n      (panel.fieldConfig as FieldConfigSource<GraphFieldConfig>)?.defaults.custom?.axisPlacement ===\n      AxisPlacement.Hidden\n    ) {\n      panel.fieldConfig = {\n        ...panel.fieldConfig,\n        overrides: [\n          ...panel.fieldConfig.overrides,\n          {\n            matcher: {\n              id: FieldMatcherID.byType,\n              options: FieldType.time,\n            },\n            properties: [\n              {\n                id: 'custom.axisPlacement',\n                value: AxisPlacement.Auto,\n              },\n            ],\n          },\n        ],\n      };\n    }\n  }\n\n  return panel;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}