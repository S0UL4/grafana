{"ast":null,"code":"const _excluded = [\"validationEvents\", \"className\", \"hideErrorMessage\", \"inputRef\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { validate, EventsWithValidation, hasValidationEvent } from '../../../../utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport let LegacyInputStatus;\n\n(function (LegacyInputStatus) {\n  LegacyInputStatus[\"Invalid\"] = \"invalid\";\n  LegacyInputStatus[\"Valid\"] = \"valid\";\n})(LegacyInputStatus || (LegacyInputStatus = {}));\n\nexport class Input extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      error: null\n    });\n\n    _defineProperty(this, \"validatorAsync\", validationRules => {\n      return evt => {\n        const errors = validate(evt.target.value, validationRules);\n        this.setState(prevState => {\n          return Object.assign({}, prevState, {\n            error: errors ? errors[0] : null\n          });\n        });\n      };\n    });\n\n    _defineProperty(this, \"populateEventPropsWithStatus\", (restProps, validationEvents) => {\n      const inputElementProps = Object.assign({}, restProps);\n\n      if (!validationEvents) {\n        return inputElementProps;\n      }\n\n      Object.keys(EventsWithValidation).forEach(eventName => {\n        if (hasValidationEvent(eventName, validationEvents) || restProps[eventName]) {\n          inputElementProps[eventName] = async evt => {\n            evt.persist(); // Needed for async. https://reactjs.org/docs/events.html#event-pooling\n\n            if (hasValidationEvent(eventName, validationEvents)) {\n              await this.validatorAsync(validationEvents[eventName]).apply(this, [evt]);\n            }\n\n            if (restProps[eventName]) {\n              restProps[eventName].apply(null, [evt, this.status]);\n            }\n          };\n        }\n      });\n      return inputElementProps;\n    });\n  }\n\n  get status() {\n    return this.state.error ? LegacyInputStatus.Invalid : LegacyInputStatus.Valid;\n  }\n\n  get isInvalid() {\n    return this.status === LegacyInputStatus.Invalid;\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      validationEvents,\n      className,\n      hideErrorMessage,\n      inputRef\n    } = _this$props,\n          restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    const {\n      error\n    } = this.state;\n    const inputClassName = classNames('gf-form-input', {\n      invalid: this.isInvalid\n    }, className);\n    const inputElementProps = this.populateEventPropsWithStatus(restProps, validationEvents);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        flexGrow: 1\n      },\n      children: [/*#__PURE__*/_jsx(\"input\", Object.assign({}, inputElementProps, {\n        ref: inputRef,\n        className: inputClassName\n      })), error && !hideErrorMessage && /*#__PURE__*/_jsx(\"span\", {\n        children: error\n      })]\n    });\n  }\n\n}\n\n_defineProperty(Input, \"defaultProps\", {\n  className: ''\n});","map":{"version":3,"names":["classNames","React","PureComponent","validate","EventsWithValidation","hasValidationEvent","LegacyInputStatus","Input","error","validationRules","evt","errors","target","value","setState","prevState","restProps","validationEvents","inputElementProps","Object","keys","forEach","eventName","persist","validatorAsync","apply","status","state","Invalid","Valid","isInvalid","render","props","className","hideErrorMessage","inputRef","inputClassName","invalid","populateEventPropsWithStatus","flexGrow"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Forms/Legacy/Input/Input.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { PureComponent, ChangeEvent } from 'react';\n\nimport { ValidationEvents, ValidationRule } from '../../../../types';\nimport { validate, EventsWithValidation, hasValidationEvent } from '../../../../utils';\n\nexport enum LegacyInputStatus {\n  Invalid = 'invalid',\n  Valid = 'valid',\n}\n\nexport interface Props extends React.HTMLProps<HTMLInputElement> {\n  validationEvents?: ValidationEvents;\n  hideErrorMessage?: boolean;\n  inputRef?: React.LegacyRef<HTMLInputElement>;\n\n  // Override event props and append status as argument\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => void;\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => void;\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>, status?: LegacyInputStatus) => void;\n}\n\ninterface State {\n  error: string | null;\n}\n\nexport class Input extends PureComponent<Props, State> {\n  static defaultProps = {\n    className: '',\n  };\n\n  state: State = {\n    error: null,\n  };\n\n  get status() {\n    return this.state.error ? LegacyInputStatus.Invalid : LegacyInputStatus.Valid;\n  }\n\n  get isInvalid() {\n    return this.status === LegacyInputStatus.Invalid;\n  }\n\n  validatorAsync = (validationRules: ValidationRule[]) => {\n    return (evt: ChangeEvent<HTMLInputElement>) => {\n      const errors = validate(evt.target.value, validationRules);\n      this.setState((prevState) => {\n        return { ...prevState, error: errors ? errors[0] : null };\n      });\n    };\n  };\n\n  populateEventPropsWithStatus = (restProps: any, validationEvents: ValidationEvents | undefined) => {\n    const inputElementProps = { ...restProps };\n    if (!validationEvents) {\n      return inputElementProps;\n    }\n    Object.keys(EventsWithValidation).forEach((eventName) => {\n      if (hasValidationEvent(eventName as EventsWithValidation, validationEvents) || restProps[eventName]) {\n        inputElementProps[eventName] = async (evt: ChangeEvent<HTMLInputElement>) => {\n          evt.persist(); // Needed for async. https://reactjs.org/docs/events.html#event-pooling\n          if (hasValidationEvent(eventName as EventsWithValidation, validationEvents)) {\n            await this.validatorAsync(validationEvents[eventName]).apply(this, [evt]);\n          }\n          if (restProps[eventName]) {\n            restProps[eventName].apply(null, [evt, this.status]);\n          }\n        };\n      }\n    });\n    return inputElementProps;\n  };\n\n  render() {\n    const { validationEvents, className, hideErrorMessage, inputRef, ...restProps } = this.props;\n    const { error } = this.state;\n    const inputClassName = classNames('gf-form-input', { invalid: this.isInvalid }, className);\n    const inputElementProps = this.populateEventPropsWithStatus(restProps, validationEvents);\n\n    return (\n      <div style={{ flexGrow: 1 }}>\n        <input {...inputElementProps} ref={inputRef} className={inputClassName} />\n        {error && !hideErrorMessage && <span>{error}</span>}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}