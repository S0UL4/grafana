{"ast":null,"code":"var _h, _h2;\n\nimport { css, cx } from '@emotion/css';\nimport { stripIndent, stripIndents } from 'common-tags';\nimport Prism from 'prismjs';\nimport React, { PureComponent } from 'react';\nimport { flattenTokens } from '@grafana/ui/src/slate-plugins/slate-prism';\nimport tokenizer from '../syntax';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst CLIQ_EXAMPLES = [{\n  category: 'Lambda',\n  examples: [{\n    title: 'View latency statistics for 5-minute intervals',\n    expr: stripIndents`filter @type = \"REPORT\" |\n                           stats avg(@duration), max(@duration), min(@duration) by bin(5m)`\n  }, {\n    title: 'Determine the amount of overprovisioned memory',\n    expr: stripIndent`\n        filter @type = \"REPORT\" |\n        stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\n              min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\n              avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\n              max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\n              provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB`\n  }, {\n    title: 'Find the most expensive requests',\n    expr: stripIndents`filter @type = \"REPORT\" |\n                           fields @requestId, @billedDuration |\n                           sort by @billedDuration desc`\n  }]\n}, {\n  category: 'VPC Flow Logs',\n  examples: [{\n    title: 'Average, min, and max byte transfers by source and destination IP addresses',\n    expr: `stats avg(bytes), min(bytes), max(bytes) by srcAddr, dstAddr`\n  }, {\n    title: 'IP addresses using UDP transfer protocol',\n    expr: 'filter protocol=17 | stats count(*) by srcAddr'\n  }, {\n    title: 'Top 10 byte transfers by source and destination IP addresses',\n    expr: stripIndents`stats sum(bytes) as bytesTransferred by srcAddr, dstAddr |\n                           sort bytesTransferred desc |\n                           limit 10`\n  }, {\n    title: 'Top 20 source IP addresses with highest number of rejected requests',\n    expr: stripIndents`filter action=\"REJECT\" |\n                           stats count(*) as numRejections by srcAddr |\n                           sort numRejections desc |\n                           limit 20`\n  }]\n}, {\n  category: 'CloudTrail',\n  examples: [{\n    title: 'Number of log entries by service, event type, and region',\n    expr: 'stats count(*) by eventSource, eventName, awsRegion'\n  }, {\n    title: 'Number of log entries by region and EC2 event type',\n    expr: stripIndents`filter eventSource=\"ec2.amazonaws.com\" |\n                           stats count(*) as eventCount by eventName, awsRegion |\n                           sort eventCount desc`\n  }, {\n    title: 'Regions, usernames, and ARNs of newly created IAM users',\n    expr: stripIndents`filter eventName=\"CreateUser\" |\n                           fields awsRegion, requestParameters.userName, responseElements.user.arn`\n  }]\n}, {\n  category: 'Common Queries',\n  examples: [{\n    title: '25 most recently added log events',\n    expr: stripIndents`fields @timestamp, @message |\n                           sort @timestamp desc |\n                           limit 25`\n  }, {\n    title: 'Number of exceptions logged every 5 minutes',\n    expr: stripIndents`filter @message like /Exception/ |\n                           stats count(*) as exceptionCount by bin(5m) |\n                           sort exceptionCount desc`\n  }, {\n    title: 'List of log events that are not exceptions',\n    expr: 'fields @message | filter @message not like /Exception/'\n  }]\n}, {\n  category: 'Route 53',\n  examples: [{\n    title: 'Number of requests received every 10  minutes by edge location',\n    expr: 'stats count(*) by queryType, bin(10m)'\n  }, {\n    title: 'Number of unsuccessful requests by domain',\n    expr: 'filter responseCode=\"SERVFAIL\" | stats count(*) by queryName'\n  }, {\n    title: 'Number of requests received every 10  minutes by edge location',\n    expr: 'stats count(*) as numRequests by resolverIp | sort numRequests desc | limit 10'\n  }]\n}, {\n  category: 'AWS AppSync',\n  examples: [{\n    title: 'Number of unique HTTP status codes',\n    expr: stripIndents`fields ispresent(graphQLAPIId) as isApi |\n                           filter isApi |\n                           filter logType = \"RequestSummary\" |\n                           stats count() as statusCount by statusCode |\n                           sort statusCount desc`\n  }, {\n    title: 'Top 10 resolvers with maximum latency',\n    expr: stripIndents`fields resolverArn, duration |\n                           filter logType = \"Tracing\" |\n                           sort duration desc |\n                           limit 10`\n  }, {\n    title: 'Most frequently invoked resolvers',\n    expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as invocationCount by resolverArn |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           sort invocationCount desc |\n                           limit 10`\n  }, {\n    title: 'Resolvers with most errors in mapping templates',\n    expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as errorCount by resolverArn, logType |\n                           filter isRes and (logType = \"RequestMapping\" or logType = \"ResponseMapping\") and fieldInError |\n                           sort errorCount desc |\n                           limit 10`\n  }, {\n    title: 'Field latency statistics',\n    expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`\n  }, {\n    title: 'Resolver latency statistics',\n    expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           stats min(duration), max(duration), avg(duration) as avgDur by resolverArn |\n                           sort avgDur desc |\n                           limit 10`\n  }, {\n    title: 'Top 10 requests with maximum latency',\n    expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`\n  }]\n}];\n\nfunction renderHighlightedMarkup(code, keyPrefix) {\n  const grammar = tokenizer;\n  const tokens = flattenTokens(Prism.tokenize(code, grammar));\n  const spans = tokens.filter(token => typeof token !== 'string').map((token, i) => {\n    return /*#__PURE__*/_jsx(\"span\", {\n      className: `prism-token token ${token.types.join(' ')} ${token.aliases.join(' ')}`,\n      children: token.content\n    }, `${keyPrefix}-token-${i}`);\n  });\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"slate-query-field\",\n    children: spans\n  });\n}\n\nconst exampleCategory = css`\n  margin-top: 5px;\n`;\nexport default class LogsCheatSheet extends PureComponent {\n  onClickExample(query) {\n    this.props.onClickExample(query);\n  }\n\n  renderExpression(expr, keyPrefix) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"cheat-sheet-item__example\",\n      onClick: () => {\n        var _this$props$query$ref, _this$props$query$ref2;\n\n        return this.onClickExample({\n          refId: (_this$props$query$ref = this.props.query.refId) !== null && _this$props$query$ref !== void 0 ? _this$props$query$ref : 'A',\n          expression: expr,\n          queryMode: 'Logs',\n          region: this.props.query.region,\n          id: (_this$props$query$ref2 = this.props.query.refId) !== null && _this$props$query$ref2 !== void 0 ? _this$props$query$ref2 : 'A',\n          logGroupNames: 'logGroupNames' in this.props.query ? this.props.query.logGroupNames : []\n        });\n      },\n      children: /*#__PURE__*/_jsx(\"pre\", {\n        children: renderHighlightedMarkup(expr, keyPrefix)\n      })\n    }, expr);\n  }\n\n  renderLogsCheatSheet() {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [_h || (_h = /*#__PURE__*/_jsx(\"h2\", {\n        children: \"CloudWatch Logs Cheat Sheet\"\n      })), CLIQ_EXAMPLES.map((cat, i) => /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: `cheat-sheet-item__title ${cx(exampleCategory)}`,\n          children: cat.category\n        }), cat.examples.map((item, j) => /*#__PURE__*/_jsxs(\"div\", {\n          className: \"cheat-sheet-item\",\n          children: [/*#__PURE__*/_jsx(\"h4\", {\n            children: item.title\n          }), this.renderExpression(item.expr, `item-${j}`)]\n        }, `item-${j}`))]\n      }, `${cat.category}-${i}`))]\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [_h2 || (_h2 = /*#__PURE__*/_jsx(\"h3\", {\n        children: \"CloudWatch Logs cheat sheet\"\n      })), CLIQ_EXAMPLES.map((cat, i) => /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: `cheat-sheet-item__title ${cx(exampleCategory)}`,\n          children: cat.category\n        }), cat.examples.map((item, j) => /*#__PURE__*/_jsxs(\"div\", {\n          className: \"cheat-sheet-item\",\n          children: [/*#__PURE__*/_jsx(\"h4\", {\n            children: item.title\n          }), this.renderExpression(item.expr, `item-${j}`)]\n        }, `item-${j}`))]\n      }, `cat-${i}`))]\n    });\n  }\n\n}","map":{"version":3,"names":["css","cx","stripIndent","stripIndents","Prism","React","PureComponent","flattenTokens","tokenizer","CLIQ_EXAMPLES","category","examples","title","expr","renderHighlightedMarkup","code","keyPrefix","grammar","tokens","tokenize","spans","filter","token","map","i","types","join","aliases","content","exampleCategory","LogsCheatSheet","onClickExample","query","props","renderExpression","refId","expression","queryMode","region","id","logGroupNames","renderLogsCheatSheet","cat","item","j","render"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/LogsCheatSheet.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { stripIndent, stripIndents } from 'common-tags';\nimport Prism from 'prismjs';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { flattenTokens } from '@grafana/ui/src/slate-plugins/slate-prism';\n\nimport tokenizer from '../syntax';\nimport { CloudWatchQuery } from '../types';\n\ninterface QueryExample {\n  category: string;\n  examples: Array<{\n    title: string;\n    expr: string;\n  }>;\n}\n\nconst CLIQ_EXAMPLES: QueryExample[] = [\n  {\n    category: 'Lambda',\n    examples: [\n      {\n        title: 'View latency statistics for 5-minute intervals',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           stats avg(@duration), max(@duration), min(@duration) by bin(5m)`,\n      },\n      {\n        title: 'Determine the amount of overprovisioned memory',\n        expr: stripIndent`\n        filter @type = \"REPORT\" |\n        stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\n              min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\n              avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\n              max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\n              provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB`,\n      },\n      {\n        title: 'Find the most expensive requests',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           fields @requestId, @billedDuration |\n                           sort by @billedDuration desc`,\n      },\n    ],\n  },\n\n  {\n    category: 'VPC Flow Logs',\n    examples: [\n      {\n        title: 'Average, min, and max byte transfers by source and destination IP addresses',\n        expr: `stats avg(bytes), min(bytes), max(bytes) by srcAddr, dstAddr`,\n      },\n      {\n        title: 'IP addresses using UDP transfer protocol',\n        expr: 'filter protocol=17 | stats count(*) by srcAddr',\n      },\n      {\n        title: 'Top 10 byte transfers by source and destination IP addresses',\n        expr: stripIndents`stats sum(bytes) as bytesTransferred by srcAddr, dstAddr |\n                           sort bytesTransferred desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 20 source IP addresses with highest number of rejected requests',\n        expr: stripIndents`filter action=\"REJECT\" |\n                           stats count(*) as numRejections by srcAddr |\n                           sort numRejections desc |\n                           limit 20`,\n      },\n    ],\n  },\n  {\n    category: 'CloudTrail',\n    examples: [\n      {\n        title: 'Number of log entries by service, event type, and region',\n        expr: 'stats count(*) by eventSource, eventName, awsRegion',\n      },\n\n      {\n        title: 'Number of log entries by region and EC2 event type',\n        expr: stripIndents`filter eventSource=\"ec2.amazonaws.com\" |\n                           stats count(*) as eventCount by eventName, awsRegion |\n                           sort eventCount desc`,\n      },\n\n      {\n        title: 'Regions, usernames, and ARNs of newly created IAM users',\n        expr: stripIndents`filter eventName=\"CreateUser\" |\n                           fields awsRegion, requestParameters.userName, responseElements.user.arn`,\n      },\n    ],\n  },\n  {\n    category: 'Common Queries',\n    examples: [\n      {\n        title: '25 most recently added log events',\n        expr: stripIndents`fields @timestamp, @message |\n                           sort @timestamp desc |\n                           limit 25`,\n      },\n      {\n        title: 'Number of exceptions logged every 5 minutes',\n        expr: stripIndents`filter @message like /Exception/ |\n                           stats count(*) as exceptionCount by bin(5m) |\n                           sort exceptionCount desc`,\n      },\n      {\n        title: 'List of log events that are not exceptions',\n        expr: 'fields @message | filter @message not like /Exception/',\n      },\n    ],\n  },\n  {\n    category: 'Route 53',\n    examples: [\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) by queryType, bin(10m)',\n      },\n      {\n        title: 'Number of unsuccessful requests by domain',\n        expr: 'filter responseCode=\"SERVFAIL\" | stats count(*) by queryName',\n      },\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) as numRequests by resolverIp | sort numRequests desc | limit 10',\n      },\n    ],\n  },\n  {\n    category: 'AWS AppSync',\n    examples: [\n      {\n        title: 'Number of unique HTTP status codes',\n        expr: stripIndents`fields ispresent(graphQLAPIId) as isApi |\n                           filter isApi |\n                           filter logType = \"RequestSummary\" |\n                           stats count() as statusCount by statusCode |\n                           sort statusCount desc`,\n      },\n      {\n        title: 'Top 10 resolvers with maximum latency',\n        expr: stripIndents`fields resolverArn, duration |\n                           filter logType = \"Tracing\" |\n                           sort duration desc |\n                           limit 10`,\n      },\n      {\n        title: 'Most frequently invoked resolvers',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as invocationCount by resolverArn |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           sort invocationCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolvers with most errors in mapping templates',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as errorCount by resolverArn, logType |\n                           filter isRes and (logType = \"RequestMapping\" or logType = \"ResponseMapping\") and fieldInError |\n                           sort errorCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Field latency statistics',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolver latency statistics',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           stats min(duration), max(duration), avg(duration) as avgDur by resolverArn |\n                           sort avgDur desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 10 requests with maximum latency',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n    ],\n  },\n];\n\nfunction renderHighlightedMarkup(code: string, keyPrefix: string) {\n  const grammar = tokenizer;\n  const tokens = flattenTokens(Prism.tokenize(code, grammar));\n  const spans = tokens\n    .filter((token) => typeof token !== 'string')\n    .map((token, i) => {\n      return (\n        <span\n          className={`prism-token token ${token.types.join(' ')} ${token.aliases.join(' ')}`}\n          key={`${keyPrefix}-token-${i}`}\n        >\n          {token.content}\n        </span>\n      );\n    });\n\n  return <div className=\"slate-query-field\">{spans}</div>;\n}\n\nconst exampleCategory = css`\n  margin-top: 5px;\n`;\n\nexport default class LogsCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudWatchQuery>,\n  { userExamples: string[] }\n> {\n  onClickExample(query: CloudWatchQuery) {\n    this.props.onClickExample(query);\n  }\n\n  renderExpression(expr: string, keyPrefix: string) {\n    return (\n      <div\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={() =>\n          this.onClickExample({\n            refId: this.props.query.refId ?? 'A',\n            expression: expr,\n            queryMode: 'Logs',\n            region: this.props.query.region,\n            id: this.props.query.refId ?? 'A',\n            logGroupNames: 'logGroupNames' in this.props.query ? this.props.query.logGroupNames : [],\n          })\n        }\n      >\n        <pre>{renderHighlightedMarkup(expr, keyPrefix)}</pre>\n      </div>\n    );\n  }\n\n  renderLogsCheatSheet() {\n    return (\n      <div>\n        <h2>CloudWatch Logs Cheat Sheet</h2>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`${cat.category}-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>CloudWatch Logs cheat sheet</h3>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`cat-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}