{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { Select } from '@grafana/ui';\nimport { Field } from '../Field';\nimport { setMetricName } from './setQueryValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst MetricNameField = ({\n  metricNames,\n  query,\n  variableOptionGroup,\n  onQueryChange\n}) => {\n  var _query$azureMonitor$m, _query$azureMonitor;\n\n  const handleChange = useCallback(change => {\n    if (!change.value) {\n      return;\n    }\n\n    const newQuery = setMetricName(query, change.value);\n    onQueryChange(newQuery);\n  }, [onQueryChange, query]);\n  const options = useMemo(() => [...metricNames, variableOptionGroup], [metricNames, variableOptionGroup]);\n  return /*#__PURE__*/_jsx(Field, {\n    label: \"Metric\",\n    children: /*#__PURE__*/_jsx(Select, {\n      inputId: \"azure-monitor-metrics-metric-field\",\n      value: (_query$azureMonitor$m = (_query$azureMonitor = query.azureMonitor) === null || _query$azureMonitor === void 0 ? void 0 : _query$azureMonitor.metricName) !== null && _query$azureMonitor$m !== void 0 ? _query$azureMonitor$m : null,\n      onChange: handleChange,\n      options: options,\n      width: 38,\n      allowCustomValue: true\n    })\n  });\n};\n\nexport default MetricNameField;","map":{"version":3,"names":["React","useCallback","useMemo","Select","Field","setMetricName","MetricNameField","metricNames","query","variableOptionGroup","onQueryChange","handleChange","change","value","newQuery","options","azureMonitor","metricName"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/MetricsQueryEditor/MetricNameField.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { AzureQueryEditorFieldProps, AzureMonitorOption } from '../../types';\nimport { Field } from '../Field';\n\nimport { setMetricName } from './setQueryValue';\n\ninterface MetricNameProps extends AzureQueryEditorFieldProps {\n  metricNames: AzureMonitorOption[];\n}\n\nconst MetricNameField: React.FC<MetricNameProps> = ({ metricNames, query, variableOptionGroup, onQueryChange }) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      const newQuery = setMetricName(query, change.value);\n      onQueryChange(newQuery);\n    },\n    [onQueryChange, query]\n  );\n\n  const options = useMemo(() => [...metricNames, variableOptionGroup], [metricNames, variableOptionGroup]);\n\n  return (\n    <Field label=\"Metric\">\n      <Select\n        inputId=\"azure-monitor-metrics-metric-field\"\n        value={query.azureMonitor?.metricName ?? null}\n        onChange={handleChange}\n        options={options}\n        width={38}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default MetricNameField;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAGA,SAASC,KAAT,QAAsB,UAAtB;AAEA,SAASC,aAAT,QAA8B,iBAA9B;;;AAMA,MAAMC,eAA0C,GAAG,CAAC;EAAEC,WAAF;EAAeC,KAAf;EAAsBC,mBAAtB;EAA2CC;AAA3C,CAAD,KAAgE;EAAA;;EACjH,MAAMC,YAAY,GAAGV,WAAW,CAC7BW,MAAD,IAAqC;IACnC,IAAI,CAACA,MAAM,CAACC,KAAZ,EAAmB;MACjB;IACD;;IAED,MAAMC,QAAQ,GAAGT,aAAa,CAACG,KAAD,EAAQI,MAAM,CAACC,KAAf,CAA9B;IACAH,aAAa,CAACI,QAAD,CAAb;EACD,CAR6B,EAS9B,CAACJ,aAAD,EAAgBF,KAAhB,CAT8B,CAAhC;EAYA,MAAMO,OAAO,GAAGb,OAAO,CAAC,MAAM,CAAC,GAAGK,WAAJ,EAAiBE,mBAAjB,CAAP,EAA8C,CAACF,WAAD,EAAcE,mBAAd,CAA9C,CAAvB;EAEA,oBACE,KAAC,KAAD;IAAO,KAAK,EAAC,QAAb;IAAA,uBACE,KAAC,MAAD;MACE,OAAO,EAAC,oCADV;MAEE,KAAK,kDAAED,KAAK,CAACQ,YAAR,wDAAE,oBAAoBC,UAAtB,yEAAoC,IAF3C;MAGE,QAAQ,EAAEN,YAHZ;MAIE,OAAO,EAAEI,OAJX;MAKE,KAAK,EAAE,EALT;MAME,gBAAgB;IANlB;EADF,EADF;AAYD,CA3BD;;AA6BA,eAAeT,eAAf"},"metadata":{},"sourceType":"module"}