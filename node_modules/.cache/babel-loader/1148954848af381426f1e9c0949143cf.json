{"ast":null,"code":"const _excluded = [\"setSpanNameColumnWidth\", \"updateNextViewRangeTime\", \"updateViewRangeTime\", \"viewRange\", \"traceTimeline\", \"theme\", \"topOfViewRef\", \"focusedSpanIdForSearch\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { stylesFactory, withTheme2 } from '@grafana/ui';\nimport { autoColor } from '../Theme';\nimport { merge as mergeShortcuts } from '../keyboard-shortcuts';\nimport TimelineHeaderRow from './TimelineHeaderRow';\nimport VirtualizedTraceView from './VirtualizedTraceView';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst getStyles = stylesFactory(theme => {\n  return {\n    TraceTimelineViewer: css`\n      label: TraceTimelineViewer;\n      border-bottom: 1px solid ${autoColor(theme, '#bbb')};\n\n      & .json-markup {\n        line-height: 17px;\n        font-size: 13px;\n        font-family: monospace;\n        white-space: pre-wrap;\n      }\n\n      & .json-markup-key {\n        font-weight: bold;\n      }\n\n      & .json-markup-bool {\n        color: ${autoColor(theme, 'firebrick')};\n      }\n\n      & .json-markup-string {\n        color: ${autoColor(theme, 'teal')};\n      }\n\n      & .json-markup-null {\n        color: ${autoColor(theme, 'teal')};\n      }\n\n      & .json-markup-number {\n        color: ${autoColor(theme, 'blue', 'black')};\n      }\n    `\n  };\n});\nconst NUM_TICKS = 5;\n/**\n * `TraceTimelineViewer` now renders the header row because it is sensitive to\n * `props.viewRange.time.cursor`. If `VirtualizedTraceView` renders it, it will\n * re-render the ListView every time the cursor is moved on the trace minimap\n * or `TimelineHeaderRow`.\n */\n\nexport class UnthemedTraceTimelineViewer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"collapseAll\", () => {\n      this.props.collapseAll(this.props.trace.spans);\n    });\n\n    _defineProperty(this, \"collapseOne\", () => {\n      this.props.collapseOne(this.props.trace.spans);\n    });\n\n    _defineProperty(this, \"expandAll\", () => {\n      this.props.expandAll();\n    });\n\n    _defineProperty(this, \"expandOne\", () => {\n      this.props.expandOne(this.props.trace.spans);\n    });\n\n    this.state = {\n      height: 0\n    };\n  }\n\n  componentDidMount() {\n    mergeShortcuts({\n      collapseAll: this.collapseAll,\n      expandAll: this.expandAll,\n      collapseOne: this.collapseOne,\n      expandOne: this.expandOne\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      setSpanNameColumnWidth,\n      updateNextViewRangeTime,\n      updateViewRangeTime,\n      viewRange,\n      traceTimeline,\n      theme,\n      topOfViewRef,\n      focusedSpanIdForSearch\n    } = _this$props,\n          rest = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    const {\n      trace\n    } = rest;\n    const styles = getStyles(theme);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.TraceTimelineViewer,\n      ref: ref => ref && this.setState({\n        height: ref.getBoundingClientRect().height\n      }),\n      children: [/*#__PURE__*/_jsx(TimelineHeaderRow, {\n        duration: trace.duration,\n        nameColumnWidth: traceTimeline.spanNameColumnWidth,\n        numTicks: NUM_TICKS,\n        onCollapseAll: this.collapseAll,\n        onCollapseOne: this.collapseOne,\n        onColummWidthChange: setSpanNameColumnWidth,\n        onExpandAll: this.expandAll,\n        onExpandOne: this.expandOne,\n        viewRangeTime: viewRange.time,\n        updateNextViewRangeTime: updateNextViewRangeTime,\n        updateViewRangeTime: updateViewRangeTime,\n        columnResizeHandleHeight: this.state.height\n      }), /*#__PURE__*/_jsx(VirtualizedTraceView, Object.assign({}, rest, traceTimeline, {\n        setSpanNameColumnWidth: setSpanNameColumnWidth,\n        currentViewRangeTime: viewRange.time.current,\n        topOfViewRef: topOfViewRef,\n        focusedSpanIdForSearch: focusedSpanIdForSearch\n      }))]\n    });\n  }\n\n}\nexport default withTheme2(UnthemedTraceTimelineViewer);","map":{"version":3,"names":["css","React","stylesFactory","withTheme2","autoColor","merge","mergeShortcuts","TimelineHeaderRow","VirtualizedTraceView","getStyles","theme","TraceTimelineViewer","NUM_TICKS","UnthemedTraceTimelineViewer","PureComponent","constructor","props","collapseAll","trace","spans","collapseOne","expandAll","expandOne","state","height","componentDidMount","render","setSpanNameColumnWidth","updateNextViewRangeTime","updateViewRangeTime","viewRange","traceTimeline","topOfViewRef","focusedSpanIdForSearch","rest","styles","ref","setState","getBoundingClientRect","duration","spanNameColumnWidth","time","current"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/TraceTimelineViewer/index.tsx"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { css } from '@emotion/css';\nimport React, { RefObject } from 'react';\n\nimport { GrafanaTheme2, LinkModel, TimeZone } from '@grafana/data';\nimport { stylesFactory, withTheme2 } from '@grafana/ui';\n\nimport { Accessors } from '../ScrollManager';\nimport { autoColor } from '../Theme';\nimport { merge as mergeShortcuts } from '../keyboard-shortcuts';\nimport { SpanLinkFunc, TNil } from '../types';\nimport TTraceTimeline from '../types/TTraceTimeline';\nimport { TraceSpan, Trace, TraceLog, TraceKeyValuePair, TraceLink, TraceSpanReference } from '../types/trace';\n\nimport TimelineHeaderRow from './TimelineHeaderRow';\nimport VirtualizedTraceView, { TopOfViewRefType } from './VirtualizedTraceView';\nimport { TUpdateViewRangeTimeFunction, ViewRange, ViewRangeTimeUpdate } from './types';\n\ntype TExtractUiFindFromStateReturn = {\n  uiFind: string | undefined;\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    TraceTimelineViewer: css`\n      label: TraceTimelineViewer;\n      border-bottom: 1px solid ${autoColor(theme, '#bbb')};\n\n      & .json-markup {\n        line-height: 17px;\n        font-size: 13px;\n        font-family: monospace;\n        white-space: pre-wrap;\n      }\n\n      & .json-markup-key {\n        font-weight: bold;\n      }\n\n      & .json-markup-bool {\n        color: ${autoColor(theme, 'firebrick')};\n      }\n\n      & .json-markup-string {\n        color: ${autoColor(theme, 'teal')};\n      }\n\n      & .json-markup-null {\n        color: ${autoColor(theme, 'teal')};\n      }\n\n      & .json-markup-number {\n        color: ${autoColor(theme, 'blue', 'black')};\n      }\n    `,\n  };\n});\n\ntype TProps = TExtractUiFindFromStateReturn & {\n  registerAccessors: (accessors: Accessors) => void;\n  findMatchesIDs: Set<string> | TNil;\n  scrollToFirstVisibleSpan: () => void;\n  traceTimeline: TTraceTimeline;\n  trace: Trace;\n  updateNextViewRangeTime: (update: ViewRangeTimeUpdate) => void;\n  updateViewRangeTime: TUpdateViewRangeTimeFunction;\n  viewRange: ViewRange;\n  timeZone: TimeZone;\n\n  setSpanNameColumnWidth: (width: number) => void;\n  collapseAll: (spans: TraceSpan[]) => void;\n  collapseOne: (spans: TraceSpan[]) => void;\n  expandAll: () => void;\n  expandOne: (spans: TraceSpan[]) => void;\n\n  childrenToggle: (spanID: string) => void;\n  clearShouldScrollToFirstUiFindMatch: () => void;\n  detailLogItemToggle: (spanID: string, log: TraceLog) => void;\n  detailLogsToggle: (spanID: string) => void;\n  detailWarningsToggle: (spanID: string) => void;\n  detailStackTracesToggle: (spanID: string) => void;\n  detailReferencesToggle: (spanID: string) => void;\n  detailReferenceItemToggle: (spanID: string, reference: TraceSpanReference) => void;\n  detailProcessToggle: (spanID: string) => void;\n  detailTagsToggle: (spanID: string) => void;\n  detailToggle: (spanID: string) => void;\n  setTrace: (trace: Trace | TNil, uiFind: string | TNil) => void;\n  addHoverIndentGuideId: (spanID: string) => void;\n  removeHoverIndentGuideId: (spanID: string) => void;\n  linksGetter: (span: TraceSpan, items: TraceKeyValuePair[], itemIndex: number) => TraceLink[];\n  theme: GrafanaTheme2;\n  createSpanLink?: SpanLinkFunc;\n  scrollElement?: Element;\n  focusedSpanId?: string;\n  focusedSpanIdForSearch: string;\n  createFocusSpanLink: (traceId: string, spanId: string) => LinkModel;\n  topOfViewRef?: RefObject<HTMLDivElement>;\n  topOfViewRefType?: TopOfViewRefType;\n};\n\ntype State = {\n  // Will be set to real height of the component so it can be passed down to size some other elements.\n  height: number;\n};\n\nconst NUM_TICKS = 5;\n\n/**\n * `TraceTimelineViewer` now renders the header row because it is sensitive to\n * `props.viewRange.time.cursor`. If `VirtualizedTraceView` renders it, it will\n * re-render the ListView every time the cursor is moved on the trace minimap\n * or `TimelineHeaderRow`.\n */\nexport class UnthemedTraceTimelineViewer extends React.PureComponent<TProps, State> {\n  constructor(props: TProps) {\n    super(props);\n    this.state = { height: 0 };\n  }\n\n  componentDidMount() {\n    mergeShortcuts({\n      collapseAll: this.collapseAll,\n      expandAll: this.expandAll,\n      collapseOne: this.collapseOne,\n      expandOne: this.expandOne,\n    });\n  }\n\n  collapseAll = () => {\n    this.props.collapseAll(this.props.trace.spans);\n  };\n\n  collapseOne = () => {\n    this.props.collapseOne(this.props.trace.spans);\n  };\n\n  expandAll = () => {\n    this.props.expandAll();\n  };\n\n  expandOne = () => {\n    this.props.expandOne(this.props.trace.spans);\n  };\n\n  render() {\n    const {\n      setSpanNameColumnWidth,\n      updateNextViewRangeTime,\n      updateViewRangeTime,\n      viewRange,\n      traceTimeline,\n      theme,\n      topOfViewRef,\n      focusedSpanIdForSearch,\n      ...rest\n    } = this.props;\n    const { trace } = rest;\n    const styles = getStyles(theme);\n\n    return (\n      <div\n        className={styles.TraceTimelineViewer}\n        ref={(ref: HTMLDivElement | null) => ref && this.setState({ height: ref.getBoundingClientRect().height })}\n      >\n        <TimelineHeaderRow\n          duration={trace.duration}\n          nameColumnWidth={traceTimeline.spanNameColumnWidth}\n          numTicks={NUM_TICKS}\n          onCollapseAll={this.collapseAll}\n          onCollapseOne={this.collapseOne}\n          onColummWidthChange={setSpanNameColumnWidth}\n          onExpandAll={this.expandAll}\n          onExpandOne={this.expandOne}\n          viewRangeTime={viewRange.time}\n          updateNextViewRangeTime={updateNextViewRangeTime}\n          updateViewRangeTime={updateViewRangeTime}\n          columnResizeHandleHeight={this.state.height}\n        />\n        <VirtualizedTraceView\n          {...rest}\n          {...traceTimeline}\n          setSpanNameColumnWidth={setSpanNameColumnWidth}\n          currentViewRangeTime={viewRange.time.current}\n          topOfViewRef={topOfViewRef}\n          focusedSpanIdForSearch={focusedSpanIdForSearch}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withTheme2(UnthemedTraceTimelineViewer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}