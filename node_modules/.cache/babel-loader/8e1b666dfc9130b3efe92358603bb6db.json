{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { cloneDeep } from 'lodash';\nimport { from, ReplaySubject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { CoreApp, rangeUtil, LoadingState } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getNextRequestId } from './PanelQueryRunner';\nimport { setStructureRevision } from './processing/revision';\nimport { preProcessPanelData, runRequest } from './runRequest';\nexport class QueryRunner {\n  constructor() {\n    _defineProperty(this, \"subject\", void 0);\n\n    _defineProperty(this, \"subscription\", void 0);\n\n    _defineProperty(this, \"lastResult\", void 0);\n\n    this.subject = new ReplaySubject(1);\n  }\n\n  get() {\n    return this.subject.asObservable();\n  }\n\n  run(options) {\n    const {\n      queries,\n      timezone,\n      datasource,\n      panelId,\n      app,\n      dashboardId,\n      timeRange,\n      timeInfo,\n      cacheTimeout,\n      maxDataPoints,\n      scopedVars,\n      minInterval\n    } = options;\n\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n\n    const request = {\n      app: app !== null && app !== void 0 ? app : CoreApp.Unknown,\n      requestId: getNextRequestId(),\n      timezone,\n      panelId,\n      dashboardId,\n      range: timeRange,\n      timeInfo,\n      interval: '',\n      intervalMs: 0,\n      targets: cloneDeep(queries),\n      maxDataPoints: maxDataPoints,\n      scopedVars: scopedVars || {},\n      cacheTimeout,\n      startTime: Date.now()\n    }; // Add deprecated property\n\n    request.rangeRaw = timeRange.raw;\n    from(getDataSource(datasource, request.scopedVars)).pipe(first()).subscribe({\n      next: ds => {\n        // Attach the datasource name to each query\n        request.targets = request.targets.map(query => {\n          if (!query.datasource) {\n            query.datasource = ds.getRef();\n          }\n\n          return query;\n        });\n        const lowerIntervalLimit = minInterval ? getTemplateSrv().replace(minInterval, request.scopedVars) : ds.interval;\n        const norm = rangeUtil.calculateInterval(timeRange, maxDataPoints, lowerIntervalLimit); // make shallow copy of scoped vars,\n        // and add built in variables interval and interval_ms\n\n        request.scopedVars = Object.assign({}, request.scopedVars, {\n          __interval: {\n            text: norm.interval,\n            value: norm.interval\n          },\n          __interval_ms: {\n            text: norm.intervalMs.toString(),\n            value: norm.intervalMs\n          }\n        });\n        request.interval = norm.interval;\n        request.intervalMs = norm.intervalMs;\n        this.subscription = runRequest(ds, request).subscribe({\n          next: data => {\n            const results = preProcessPanelData(data, this.lastResult);\n            this.lastResult = setStructureRevision(results, this.lastResult); // Store preprocessed query results for applying overrides later on in the pipeline\n\n            this.subject.next(this.lastResult);\n          }\n        });\n      },\n      error: error => console.error('PanelQueryRunner Error', error)\n    });\n  }\n\n  cancel() {\n    if (!this.subscription) {\n      return;\n    }\n\n    this.subscription.unsubscribe(); // If we have an old result with loading state, send it with done state\n\n    if (this.lastResult && this.lastResult.state === LoadingState.Loading) {\n      this.subject.next(Object.assign({}, this.lastResult, {\n        state: LoadingState.Done\n      }));\n    }\n  }\n\n  destroy() {\n    // Tell anyone listening that we are done\n    if (this.subject) {\n      this.subject.complete();\n    }\n\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n\nasync function getDataSource(datasource, scopedVars) {\n  if (datasource && 'query' in datasource) {\n    return datasource;\n  }\n\n  return getDatasourceSrv().get(datasource, scopedVars);\n}","map":{"version":3,"names":["cloneDeep","from","ReplaySubject","first","CoreApp","rangeUtil","LoadingState","getTemplateSrv","getDatasourceSrv","getNextRequestId","setStructureRevision","preProcessPanelData","runRequest","QueryRunner","constructor","subject","get","asObservable","run","options","queries","timezone","datasource","panelId","app","dashboardId","timeRange","timeInfo","cacheTimeout","maxDataPoints","scopedVars","minInterval","subscription","unsubscribe","request","Unknown","requestId","range","interval","intervalMs","targets","startTime","Date","now","rangeRaw","raw","getDataSource","pipe","subscribe","next","ds","map","query","getRef","lowerIntervalLimit","replace","norm","calculateInterval","Object","assign","__interval","text","value","__interval_ms","toString","data","results","lastResult","error","console","cancel","state","Loading","Done","destroy","complete"],"sources":["/home/soula/grafana/public/app/features/query/state/QueryRunner.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\nimport { from, Observable, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\nimport {\n  CoreApp,\n  DataQueryRequest,\n  DataSourceApi,\n  PanelData,\n  rangeUtil,\n  ScopedVars,\n  QueryRunnerOptions,\n  QueryRunner as QueryRunnerSrv,\n  LoadingState,\n  DataSourceRef,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { getNextRequestId } from './PanelQueryRunner';\nimport { setStructureRevision } from './processing/revision';\nimport { preProcessPanelData, runRequest } from './runRequest';\n\nexport class QueryRunner implements QueryRunnerSrv {\n  private subject: ReplaySubject<PanelData>;\n  private subscription?: Unsubscribable;\n  private lastResult?: PanelData;\n\n  constructor() {\n    this.subject = new ReplaySubject(1);\n  }\n\n  get(): Observable<PanelData> {\n    return this.subject.asObservable();\n  }\n\n  run(options: QueryRunnerOptions): void {\n    const {\n      queries,\n      timezone,\n      datasource,\n      panelId,\n      app,\n      dashboardId,\n      timeRange,\n      timeInfo,\n      cacheTimeout,\n      maxDataPoints,\n      scopedVars,\n      minInterval,\n    } = options;\n\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n\n    const request: DataQueryRequest = {\n      app: app ?? CoreApp.Unknown,\n      requestId: getNextRequestId(),\n      timezone,\n      panelId,\n      dashboardId,\n      range: timeRange,\n      timeInfo,\n      interval: '',\n      intervalMs: 0,\n      targets: cloneDeep(queries),\n      maxDataPoints: maxDataPoints,\n      scopedVars: scopedVars || {},\n      cacheTimeout,\n      startTime: Date.now(),\n    };\n\n    // Add deprecated property\n    request.rangeRaw = timeRange.raw;\n\n    from(getDataSource(datasource, request.scopedVars))\n      .pipe(first())\n      .subscribe({\n        next: (ds) => {\n          // Attach the datasource name to each query\n          request.targets = request.targets.map((query) => {\n            if (!query.datasource) {\n              query.datasource = ds.getRef();\n            }\n            return query;\n          });\n\n          const lowerIntervalLimit = minInterval\n            ? getTemplateSrv().replace(minInterval, request.scopedVars)\n            : ds.interval;\n          const norm = rangeUtil.calculateInterval(timeRange, maxDataPoints, lowerIntervalLimit);\n\n          // make shallow copy of scoped vars,\n          // and add built in variables interval and interval_ms\n          request.scopedVars = Object.assign({}, request.scopedVars, {\n            __interval: { text: norm.interval, value: norm.interval },\n            __interval_ms: { text: norm.intervalMs.toString(), value: norm.intervalMs },\n          });\n\n          request.interval = norm.interval;\n          request.intervalMs = norm.intervalMs;\n\n          this.subscription = runRequest(ds, request).subscribe({\n            next: (data) => {\n              const results = preProcessPanelData(data, this.lastResult);\n              this.lastResult = setStructureRevision(results, this.lastResult);\n              // Store preprocessed query results for applying overrides later on in the pipeline\n              this.subject.next(this.lastResult);\n            },\n          });\n        },\n        error: (error) => console.error('PanelQueryRunner Error', error),\n      });\n  }\n\n  cancel(): void {\n    if (!this.subscription) {\n      return;\n    }\n\n    this.subscription.unsubscribe();\n\n    // If we have an old result with loading state, send it with done state\n    if (this.lastResult && this.lastResult.state === LoadingState.Loading) {\n      this.subject.next({\n        ...this.lastResult,\n        state: LoadingState.Done,\n      });\n    }\n  }\n\n  destroy(): void {\n    // Tell anyone listening that we are done\n    if (this.subject) {\n      this.subject.complete();\n    }\n\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n\nasync function getDataSource(\n  datasource: DataSourceRef | DataSourceApi | null,\n  scopedVars: ScopedVars\n): Promise<DataSourceApi> {\n  if (datasource && 'query' in datasource) {\n    return datasource;\n  }\n\n  return getDatasourceSrv().get(datasource, scopedVars);\n}\n"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,IAAT,EAA2BC,aAA3B,QAAgE,MAAhE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SACEC,OADF,EAKEC,SALF,EASEC,YATF,QAWO,eAXP;AAYA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,mBAAT,EAA8BC,UAA9B,QAAgD,cAAhD;AAEA,OAAO,MAAMC,WAAN,CAA4C;EAKjDC,WAAW,GAAG;IAAA;;IAAA;;IAAA;;IACZ,KAAKC,OAAL,GAAe,IAAIb,aAAJ,CAAkB,CAAlB,CAAf;EACD;;EAEDc,GAAG,GAA0B;IAC3B,OAAO,KAAKD,OAAL,CAAaE,YAAb,EAAP;EACD;;EAEDC,GAAG,CAACC,OAAD,EAAoC;IACrC,MAAM;MACJC,OADI;MAEJC,QAFI;MAGJC,UAHI;MAIJC,OAJI;MAKJC,GALI;MAMJC,WANI;MAOJC,SAPI;MAQJC,QARI;MASJC,YATI;MAUJC,aAVI;MAWJC,UAXI;MAYJC;IAZI,IAaFZ,OAbJ;;IAeA,IAAI,KAAKa,YAAT,EAAuB;MACrB,KAAKA,YAAL,CAAkBC,WAAlB;IACD;;IAED,MAAMC,OAAyB,GAAG;MAChCV,GAAG,EAAEA,GAAF,aAAEA,GAAF,cAAEA,GAAF,GAASpB,OAAO,CAAC+B,OADY;MAEhCC,SAAS,EAAE3B,gBAAgB,EAFK;MAGhCY,QAHgC;MAIhCE,OAJgC;MAKhCE,WALgC;MAMhCY,KAAK,EAAEX,SANyB;MAOhCC,QAPgC;MAQhCW,QAAQ,EAAE,EARsB;MAShCC,UAAU,EAAE,CAToB;MAUhCC,OAAO,EAAExC,SAAS,CAACoB,OAAD,CAVc;MAWhCS,aAAa,EAAEA,aAXiB;MAYhCC,UAAU,EAAEA,UAAU,IAAI,EAZM;MAahCF,YAbgC;MAchCa,SAAS,EAAEC,IAAI,CAACC,GAAL;IAdqB,CAAlC,CApBqC,CAqCrC;;IACAT,OAAO,CAACU,QAAR,GAAmBlB,SAAS,CAACmB,GAA7B;IAEA5C,IAAI,CAAC6C,aAAa,CAACxB,UAAD,EAAaY,OAAO,CAACJ,UAArB,CAAd,CAAJ,CACGiB,IADH,CACQ5C,KAAK,EADb,EAEG6C,SAFH,CAEa;MACTC,IAAI,EAAGC,EAAD,IAAQ;QACZ;QACAhB,OAAO,CAACM,OAAR,GAAkBN,OAAO,CAACM,OAAR,CAAgBW,GAAhB,CAAqBC,KAAD,IAAW;UAC/C,IAAI,CAACA,KAAK,CAAC9B,UAAX,EAAuB;YACrB8B,KAAK,CAAC9B,UAAN,GAAmB4B,EAAE,CAACG,MAAH,EAAnB;UACD;;UACD,OAAOD,KAAP;QACD,CALiB,CAAlB;QAOA,MAAME,kBAAkB,GAAGvB,WAAW,GAClCxB,cAAc,GAAGgD,OAAjB,CAAyBxB,WAAzB,EAAsCG,OAAO,CAACJ,UAA9C,CADkC,GAElCoB,EAAE,CAACZ,QAFP;QAGA,MAAMkB,IAAI,GAAGnD,SAAS,CAACoD,iBAAV,CAA4B/B,SAA5B,EAAuCG,aAAvC,EAAsDyB,kBAAtD,CAAb,CAZY,CAcZ;QACA;;QACApB,OAAO,CAACJ,UAAR,GAAqB4B,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBzB,OAAO,CAACJ,UAA1B,EAAsC;UACzD8B,UAAU,EAAE;YAAEC,IAAI,EAAEL,IAAI,CAAClB,QAAb;YAAuBwB,KAAK,EAAEN,IAAI,CAAClB;UAAnC,CAD6C;UAEzDyB,aAAa,EAAE;YAAEF,IAAI,EAAEL,IAAI,CAACjB,UAAL,CAAgByB,QAAhB,EAAR;YAAoCF,KAAK,EAAEN,IAAI,CAACjB;UAAhD;QAF0C,CAAtC,CAArB;QAKAL,OAAO,CAACI,QAAR,GAAmBkB,IAAI,CAAClB,QAAxB;QACAJ,OAAO,CAACK,UAAR,GAAqBiB,IAAI,CAACjB,UAA1B;QAEA,KAAKP,YAAL,GAAoBpB,UAAU,CAACsC,EAAD,EAAKhB,OAAL,CAAV,CAAwBc,SAAxB,CAAkC;UACpDC,IAAI,EAAGgB,IAAD,IAAU;YACd,MAAMC,OAAO,GAAGvD,mBAAmB,CAACsD,IAAD,EAAO,KAAKE,UAAZ,CAAnC;YACA,KAAKA,UAAL,GAAkBzD,oBAAoB,CAACwD,OAAD,EAAU,KAAKC,UAAf,CAAtC,CAFc,CAGd;;YACA,KAAKpD,OAAL,CAAakC,IAAb,CAAkB,KAAKkB,UAAvB;UACD;QANmD,CAAlC,CAApB;MAQD,CAjCQ;MAkCTC,KAAK,EAAGA,KAAD,IAAWC,OAAO,CAACD,KAAR,CAAc,wBAAd,EAAwCA,KAAxC;IAlCT,CAFb;EAsCD;;EAEDE,MAAM,GAAS;IACb,IAAI,CAAC,KAAKtC,YAAV,EAAwB;MACtB;IACD;;IAED,KAAKA,YAAL,CAAkBC,WAAlB,GALa,CAOb;;IACA,IAAI,KAAKkC,UAAL,IAAmB,KAAKA,UAAL,CAAgBI,KAAhB,KAA0BjE,YAAY,CAACkE,OAA9D,EAAuE;MACrE,KAAKzD,OAAL,CAAakC,IAAb,mBACK,KAAKkB,UADV;QAEEI,KAAK,EAAEjE,YAAY,CAACmE;MAFtB;IAID;EACF;;EAEDC,OAAO,GAAS;IACd;IACA,IAAI,KAAK3D,OAAT,EAAkB;MAChB,KAAKA,OAAL,CAAa4D,QAAb;IACD;;IAED,IAAI,KAAK3C,YAAT,EAAuB;MACrB,KAAKA,YAAL,CAAkBC,WAAlB;IACD;EACF;;AAtHgD;;AAyHnD,eAAea,aAAf,CACExB,UADF,EAEEQ,UAFF,EAG0B;EACxB,IAAIR,UAAU,IAAI,WAAWA,UAA7B,EAAyC;IACvC,OAAOA,UAAP;EACD;;EAED,OAAOd,gBAAgB,GAAGQ,GAAnB,CAAuBM,UAAvB,EAAmCQ,UAAnC,CAAP;AACD"},"metadata":{},"sourceType":"module"}