{"ast":null,"code":"import hoistNonReactStatics from 'hoist-non-react-statics';\nimport React, { useContext } from 'react';\nimport { createTheme } from '@grafana/data';\nimport { stylesFactory } from './stylesFactory';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * Mock used in tests\n */\nlet ThemeContextMock = null; // Used by useStyles()\n\nexport const memoizedStyleCreators = new WeakMap(); // Use Grafana Dark theme by default\n\n/** @public */\n\nexport const ThemeContext = /*#__PURE__*/React.createContext(createTheme());\nThemeContext.displayName = 'ThemeContext';\n/** @deprecated use withTheme2 */\n\n/** @public */\n\nexport const withTheme = Component => {\n  const WithTheme = props => {\n    /**\n     * If theme context is mocked, let's use it instead of the original context\n     * This is used in tests when mocking theme using mockThemeContext function defined below\n     */\n    const ContextComponent = ThemeContextMock || ThemeContext;\n    return (\n      /*#__PURE__*/\n      // @ts-ignore\n      _jsx(ContextComponent.Consumer, {\n        children: theme => /*#__PURE__*/_jsx(Component, Object.assign({}, props, {\n          theme: theme.v1\n        }))\n      })\n    );\n  };\n\n  WithTheme.displayName = `WithTheme(${Component.displayName})`;\n  hoistNonReactStatics(WithTheme, Component);\n  return WithTheme;\n};\n/** @alpha */\n\nexport const withTheme2 = Component => {\n  const WithTheme = props => {\n    /**\n     * If theme context is mocked, let's use it instead of the original context\n     * This is used in tests when mocking theme using mockThemeContext function defined below\n     */\n    const ContextComponent = ThemeContextMock || ThemeContext;\n    return (\n      /*#__PURE__*/\n      // @ts-ignore\n      _jsx(ContextComponent.Consumer, {\n        children: theme => /*#__PURE__*/_jsx(Component, Object.assign({}, props, {\n          theme: theme\n        }))\n      })\n    );\n  };\n\n  WithTheme.displayName = `WithTheme(${Component.displayName})`;\n  hoistNonReactStatics(WithTheme, Component);\n  return WithTheme;\n};\n/** @deprecated use useTheme2 */\n\n/** @public */\n\nexport function useTheme() {\n  return useContext(ThemeContextMock || ThemeContext).v1;\n}\n/** @public */\n\nexport function useTheme2() {\n  return useContext(ThemeContextMock || ThemeContext);\n}\n/**\n * Hook for using memoized styles with access to the theme.\n *\n * NOTE: For memoization to work, you need to ensure that the function\n * you pass in doesn't change, or only if it needs to. (i.e. declare\n * your style creator outside of a function component or use `useCallback()`.)\n * */\n\n/** @public */\n\nexport function useStyles(getStyles) {\n  const theme = useTheme();\n  let memoizedStyleCreator = memoizedStyleCreators.get(getStyles);\n\n  if (!memoizedStyleCreator) {\n    memoizedStyleCreator = stylesFactory(getStyles);\n    memoizedStyleCreators.set(getStyles, memoizedStyleCreator);\n  }\n\n  return memoizedStyleCreator(theme);\n}\n/**\n * Hook for using memoized styles with access to the theme.\n *\n * NOTE: For memoization to work, you need to ensure that the function\n * you pass in doesn't change, or only if it needs to. (i.e. declare\n * your style creator outside of a function component or use `useCallback()`.)\n * */\n\n/** @public */\n\nexport function useStyles2(getStyles) {\n  const theme = useTheme2();\n  let memoizedStyleCreator = memoizedStyleCreators.get(getStyles);\n\n  if (!memoizedStyleCreator) {\n    memoizedStyleCreator = stylesFactory(getStyles);\n    memoizedStyleCreators.set(getStyles, memoizedStyleCreator);\n  }\n\n  return memoizedStyleCreator(theme);\n}\n/**\n * Enables theme context  mocking\n */\n\n/** @public */\n\nexport const mockThemeContext = theme => {\n  ThemeContextMock = /*#__PURE__*/React.createContext(theme);\n  return () => {\n    ThemeContextMock = null;\n  };\n};","map":{"version":3,"names":["hoistNonReactStatics","React","useContext","createTheme","stylesFactory","ThemeContextMock","memoizedStyleCreators","WeakMap","ThemeContext","createContext","displayName","withTheme","Component","WithTheme","props","ContextComponent","theme","v1","withTheme2","useTheme","useTheme2","useStyles","getStyles","memoizedStyleCreator","get","set","useStyles2","mockThemeContext"],"sources":["/home/soula/grafana/packages/grafana-ui/src/themes/ThemeContext.tsx"],"sourcesContent":["import hoistNonReactStatics from 'hoist-non-react-statics';\nimport React, { useContext } from 'react';\n\nimport { createTheme, GrafanaTheme, GrafanaTheme2 } from '@grafana/data';\n\nimport { Themeable, Themeable2 } from '../types/theme';\n\nimport { stylesFactory } from './stylesFactory';\n\ntype Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\ntype Subtract<T, K> = Omit<T, keyof K>;\n\n/**\n * Mock used in tests\n */\nlet ThemeContextMock: React.Context<GrafanaTheme2> | null = null;\n\n// Used by useStyles()\nexport const memoizedStyleCreators = new WeakMap();\n\n// Use Grafana Dark theme by default\n/** @public */\nexport const ThemeContext = React.createContext(createTheme());\n\nThemeContext.displayName = 'ThemeContext';\n\n/** @deprecated use withTheme2 */\n/** @public */\nexport const withTheme = <P extends Themeable, S extends {} = {}>(Component: React.ComponentType<P>) => {\n  const WithTheme: React.FunctionComponent<Subtract<P, Themeable>> = (props) => {\n    /**\n     * If theme context is mocked, let's use it instead of the original context\n     * This is used in tests when mocking theme using mockThemeContext function defined below\n     */\n    const ContextComponent = ThemeContextMock || ThemeContext;\n    return (\n      // @ts-ignore\n      <ContextComponent.Consumer>{(theme) => <Component {...props} theme={theme.v1} />}</ContextComponent.Consumer>\n    );\n  };\n\n  WithTheme.displayName = `WithTheme(${Component.displayName})`;\n  hoistNonReactStatics(WithTheme, Component);\n  type Hoisted = typeof WithTheme & S;\n  return WithTheme as Hoisted;\n};\n\n/** @alpha */\nexport const withTheme2 = <P extends Themeable2, S extends {} = {}>(Component: React.ComponentType<P>) => {\n  const WithTheme: React.FunctionComponent<Subtract<P, Themeable2>> = (props) => {\n    /**\n     * If theme context is mocked, let's use it instead of the original context\n     * This is used in tests when mocking theme using mockThemeContext function defined below\n     */\n    const ContextComponent = ThemeContextMock || ThemeContext;\n    return (\n      // @ts-ignore\n      <ContextComponent.Consumer>{(theme) => <Component {...props} theme={theme} />}</ContextComponent.Consumer>\n    );\n  };\n\n  WithTheme.displayName = `WithTheme(${Component.displayName})`;\n  hoistNonReactStatics(WithTheme, Component);\n  type Hoisted = typeof WithTheme & S;\n  return WithTheme as Hoisted;\n};\n\n/** @deprecated use useTheme2 */\n/** @public */\nexport function useTheme(): GrafanaTheme {\n  return useContext(ThemeContextMock || ThemeContext).v1;\n}\n\n/** @public */\nexport function useTheme2(): GrafanaTheme2 {\n  return useContext(ThemeContextMock || ThemeContext);\n}\n\n/**\n * Hook for using memoized styles with access to the theme.\n *\n * NOTE: For memoization to work, you need to ensure that the function\n * you pass in doesn't change, or only if it needs to. (i.e. declare\n * your style creator outside of a function component or use `useCallback()`.)\n * */\n/** @public */\nexport function useStyles<T>(getStyles: (theme: GrafanaTheme) => T) {\n  const theme = useTheme();\n\n  let memoizedStyleCreator = memoizedStyleCreators.get(getStyles) as typeof getStyles;\n  if (!memoizedStyleCreator) {\n    memoizedStyleCreator = stylesFactory(getStyles);\n    memoizedStyleCreators.set(getStyles, memoizedStyleCreator);\n  }\n\n  return memoizedStyleCreator(theme);\n}\n\n/**\n * Hook for using memoized styles with access to the theme.\n *\n * NOTE: For memoization to work, you need to ensure that the function\n * you pass in doesn't change, or only if it needs to. (i.e. declare\n * your style creator outside of a function component or use `useCallback()`.)\n * */\n/** @public */\nexport function useStyles2<T>(getStyles: (theme: GrafanaTheme2) => T) {\n  const theme = useTheme2();\n\n  let memoizedStyleCreator = memoizedStyleCreators.get(getStyles) as typeof getStyles;\n  if (!memoizedStyleCreator) {\n    memoizedStyleCreator = stylesFactory(getStyles);\n    memoizedStyleCreators.set(getStyles, memoizedStyleCreator);\n  }\n\n  return memoizedStyleCreator(theme);\n}\n\n/**\n * Enables theme context  mocking\n */\n/** @public */\nexport const mockThemeContext = (theme: Partial<GrafanaTheme2>) => {\n  ThemeContextMock = React.createContext(theme as GrafanaTheme2);\n\n  return () => {\n    ThemeContextMock = null;\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}