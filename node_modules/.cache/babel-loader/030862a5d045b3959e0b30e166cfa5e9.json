{"ast":null,"code":"var _Alert, _Label, _Label2, _Label3;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { LiveChannelScope } from '@grafana/data';\nimport { Select, Alert, Label, stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst scopes = [{\n  label: 'Grafana',\n  value: LiveChannelScope.Grafana,\n  description: 'Core grafana live features'\n}, {\n  label: 'Data Sources',\n  value: LiveChannelScope.DataSource,\n  description: 'Data sources with live support'\n}, {\n  label: 'Plugins',\n  value: LiveChannelScope.Plugin,\n  description: 'Plugins with live support'\n}];\nexport class LiveChannelEditor extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      namespaces: [],\n      paths: []\n    });\n\n    _defineProperty(this, \"onScopeChanged\", v => {\n      if (v.value) {\n        this.props.onChange({\n          scope: v.value,\n          namespace: undefined,\n          path: undefined\n        });\n      }\n    });\n\n    _defineProperty(this, \"onNamespaceChanged\", v => {\n      var _this$props$value;\n\n      const update = {\n        scope: (_this$props$value = this.props.value) === null || _this$props$value === void 0 ? void 0 : _this$props$value.scope,\n        path: undefined\n      };\n\n      if (v.value) {\n        update.namespace = v.value;\n      }\n\n      this.props.onChange(update);\n    });\n\n    _defineProperty(this, \"onPathChanged\", v => {\n      const {\n        value,\n        onChange\n      } = this.props;\n      const update = {\n        scope: value.scope,\n        namespace: value.namespace\n      };\n\n      if (v.value) {\n        update.path = v.value;\n      }\n\n      onChange(update);\n    });\n  }\n\n  async componentDidMount() {\n    this.updateSelectOptions();\n  }\n\n  async componentDidUpdate(oldProps) {\n    if (this.props.value !== oldProps.value) {\n      this.updateSelectOptions();\n    }\n  }\n\n  async updateSelectOptions() {\n    this.setState({\n      namespaces: [],\n      paths: []\n    });\n  }\n\n  render() {\n    var _namespaces$find;\n\n    const {\n      namespaces,\n      paths\n    } = this.state;\n    const {\n      scope,\n      namespace,\n      path\n    } = this.props.value;\n    const style = getStyles(config.theme);\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n        title: \"Grafana Live\",\n        severity: \"info\",\n        children: \"This supports real-time event streams in grafana core. This feature is under heavy development. Expect the intefaces and structures to change as this becomes more production ready.\"\n      })), /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: style.dropWrap,\n          children: [_Label || (_Label = /*#__PURE__*/_jsx(Label, {\n            children: \"Scope\"\n          })), /*#__PURE__*/_jsx(Select, {\n            options: scopes,\n            value: scopes.find(s => s.value === scope),\n            onChange: this.onScopeChanged\n          })]\n        }), scope && /*#__PURE__*/_jsxs(\"div\", {\n          className: style.dropWrap,\n          children: [_Label2 || (_Label2 = /*#__PURE__*/_jsx(Label, {\n            children: \"Namespace\"\n          })), /*#__PURE__*/_jsx(Select, {\n            options: namespaces,\n            value: (_namespaces$find = namespaces.find(s => s.value === namespace)) !== null && _namespaces$find !== void 0 ? _namespaces$find : namespace ? {\n              label: namespace,\n              value: namespace\n            } : undefined,\n            onChange: this.onNamespaceChanged,\n            allowCustomValue: true,\n            backspaceRemovesValue: true\n          })]\n        }), scope && namespace && /*#__PURE__*/_jsxs(\"div\", {\n          className: style.dropWrap,\n          children: [_Label3 || (_Label3 = /*#__PURE__*/_jsx(Label, {\n            children: \"Path\"\n          })), /*#__PURE__*/_jsx(Select, {\n            options: paths,\n            value: findPathOption(paths, path),\n            onChange: this.onPathChanged,\n            allowCustomValue: true,\n            backspaceRemovesValue: true\n          })]\n        })]\n      })]\n    });\n  }\n\n}\n\nfunction findPathOption(paths, path) {\n  const v = paths.find(s => s.value === path);\n\n  if (v) {\n    return v;\n  }\n\n  if (path) {\n    return {\n      label: path,\n      value: path\n    };\n  }\n\n  return undefined;\n}\n\nconst getStyles = stylesFactory(theme => ({\n  dropWrap: css`\n    margin-bottom: ${theme.spacing.sm};\n  `\n}));","map":{"version":3,"names":["css","React","PureComponent","LiveChannelScope","Select","Alert","Label","stylesFactory","config","scopes","label","value","Grafana","description","DataSource","Plugin","LiveChannelEditor","namespaces","paths","v","props","onChange","scope","namespace","undefined","path","update","componentDidMount","updateSelectOptions","componentDidUpdate","oldProps","setState","render","state","style","getStyles","theme","dropWrap","find","s","onScopeChanged","onNamespaceChanged","findPathOption","onPathChanged","spacing","sm"],"sources":["/home/soula/grafana/public/app/plugins/panel/live/LiveChannelEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport {\n  LiveChannelScope,\n  LiveChannelAddress,\n  SelectableValue,\n  StandardEditorProps,\n  GrafanaTheme,\n} from '@grafana/data';\nimport { Select, Alert, Label, stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { LivePanelOptions } from './types';\n\ntype Props = StandardEditorProps<LiveChannelAddress, any, LivePanelOptions>;\n\nconst scopes: Array<SelectableValue<LiveChannelScope>> = [\n  { label: 'Grafana', value: LiveChannelScope.Grafana, description: 'Core grafana live features' },\n  { label: 'Data Sources', value: LiveChannelScope.DataSource, description: 'Data sources with live support' },\n  { label: 'Plugins', value: LiveChannelScope.Plugin, description: 'Plugins with live support' },\n];\n\ninterface State {\n  namespaces: Array<SelectableValue<string>>;\n  paths: Array<SelectableValue<string>>;\n}\n\nexport class LiveChannelEditor extends PureComponent<Props, State> {\n  state: State = {\n    namespaces: [],\n    paths: [],\n  };\n\n  async componentDidMount() {\n    this.updateSelectOptions();\n  }\n\n  async componentDidUpdate(oldProps: Props) {\n    if (this.props.value !== oldProps.value) {\n      this.updateSelectOptions();\n    }\n  }\n\n  async updateSelectOptions() {\n    this.setState({\n      namespaces: [],\n      paths: [],\n    });\n  }\n\n  onScopeChanged = (v: SelectableValue<LiveChannelScope>) => {\n    if (v.value) {\n      this.props.onChange({\n        scope: v.value,\n        namespace: undefined as unknown as string,\n        path: undefined as unknown as string,\n      } as LiveChannelAddress);\n    }\n  };\n\n  onNamespaceChanged = (v: SelectableValue<string>) => {\n    const update = {\n      scope: this.props.value?.scope,\n      path: undefined as unknown as string,\n    } as LiveChannelAddress;\n\n    if (v.value) {\n      update.namespace = v.value;\n    }\n    this.props.onChange(update);\n  };\n\n  onPathChanged = (v: SelectableValue<string>) => {\n    const { value, onChange } = this.props;\n    const update = {\n      scope: value.scope,\n      namespace: value.namespace,\n    } as LiveChannelAddress;\n    if (v.value) {\n      update.path = v.value;\n    }\n    onChange(update);\n  };\n\n  render() {\n    const { namespaces, paths } = this.state;\n    const { scope, namespace, path } = this.props.value;\n    const style = getStyles(config.theme);\n\n    return (\n      <>\n        <Alert title=\"Grafana Live\" severity=\"info\">\n          This supports real-time event streams in grafana core. This feature is under heavy development. Expect the\n          intefaces and structures to change as this becomes more production ready.\n        </Alert>\n\n        <div>\n          <div className={style.dropWrap}>\n            <Label>Scope</Label>\n            <Select options={scopes} value={scopes.find((s) => s.value === scope)} onChange={this.onScopeChanged} />\n          </div>\n\n          {scope && (\n            <div className={style.dropWrap}>\n              <Label>Namespace</Label>\n              <Select\n                options={namespaces}\n                value={\n                  namespaces.find((s) => s.value === namespace) ??\n                  (namespace ? { label: namespace, value: namespace } : undefined)\n                }\n                onChange={this.onNamespaceChanged}\n                allowCustomValue={true}\n                backspaceRemovesValue={true}\n              />\n            </div>\n          )}\n\n          {scope && namespace && (\n            <div className={style.dropWrap}>\n              <Label>Path</Label>\n              <Select\n                options={paths}\n                value={findPathOption(paths, path)}\n                onChange={this.onPathChanged}\n                allowCustomValue={true}\n                backspaceRemovesValue={true}\n              />\n            </div>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nfunction findPathOption(paths: Array<SelectableValue<string>>, path?: string): SelectableValue<string> | undefined {\n  const v = paths.find((s) => s.value === path);\n  if (v) {\n    return v;\n  }\n  if (path) {\n    return { label: path, value: path };\n  }\n  return undefined;\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  dropWrap: css`\n    margin-bottom: ${theme.spacing.sm};\n  `,\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}