{"ast":null,"code":"import { isArray, map, replace } from 'lodash';\nimport { dateTime, Registry, textUtil } from '@grafana/data';\nimport kbn from 'app/core/utils/kbn';\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE } from '../variables/constants';\nimport { formatVariableLabel } from '../variables/shared/formatVariable';\nexport let FormatRegistryID;\n\n(function (FormatRegistryID) {\n  FormatRegistryID[\"lucene\"] = \"lucene\";\n  FormatRegistryID[\"raw\"] = \"raw\";\n  FormatRegistryID[\"regex\"] = \"regex\";\n  FormatRegistryID[\"pipe\"] = \"pipe\";\n  FormatRegistryID[\"distributed\"] = \"distributed\";\n  FormatRegistryID[\"csv\"] = \"csv\";\n  FormatRegistryID[\"html\"] = \"html\";\n  FormatRegistryID[\"json\"] = \"json\";\n  FormatRegistryID[\"percentEncode\"] = \"percentencode\";\n  FormatRegistryID[\"singleQuote\"] = \"singlequote\";\n  FormatRegistryID[\"doubleQuote\"] = \"doublequote\";\n  FormatRegistryID[\"sqlString\"] = \"sqlstring\";\n  FormatRegistryID[\"date\"] = \"date\";\n  FormatRegistryID[\"glob\"] = \"glob\";\n  FormatRegistryID[\"text\"] = \"text\";\n  FormatRegistryID[\"queryParam\"] = \"queryparam\";\n})(FormatRegistryID || (FormatRegistryID = {}));\n\nexport const formatRegistry = new Registry(() => {\n  const formats = [{\n    id: FormatRegistryID.lucene,\n    name: 'Lucene',\n    description: 'Values are lucene escaped and multi-valued variables generate an OR expression',\n    formatter: ({\n      value\n    }) => {\n      if (typeof value === 'string') {\n        return luceneEscape(value);\n      }\n\n      if (value instanceof Array && value.length === 0) {\n        return '__empty__';\n      }\n\n      const quotedValues = map(value, val => {\n        return '\"' + luceneEscape(val) + '\"';\n      });\n      return '(' + quotedValues.join(' OR ') + ')';\n    }\n  }, {\n    id: FormatRegistryID.raw,\n    name: 'raw',\n    description: 'Keep value as is',\n    formatter: ({\n      value\n    }) => value\n  }, {\n    id: FormatRegistryID.regex,\n    name: 'Regex',\n    description: 'Values are regex escaped and multi-valued variables generate a (<value>|<value>) expression',\n    formatter: ({\n      value\n    }) => {\n      if (typeof value === 'string') {\n        return kbn.regexEscape(value);\n      }\n\n      const escapedValues = map(value, kbn.regexEscape);\n\n      if (escapedValues.length === 1) {\n        return escapedValues[0];\n      }\n\n      return '(' + escapedValues.join('|') + ')';\n    }\n  }, {\n    id: FormatRegistryID.pipe,\n    name: 'Pipe',\n    description: 'Values are separated by | character',\n    formatter: ({\n      value\n    }) => {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      return value.join('|');\n    }\n  }, {\n    id: FormatRegistryID.distributed,\n    name: 'Distributed',\n    description: 'Multiple values are formatted like variable=value',\n    formatter: ({\n      value\n    }, variable) => {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      value = map(value, (val, index) => {\n        if (index !== 0) {\n          return variable.name + '=' + val;\n        } else {\n          return val;\n        }\n      });\n      return value.join(',');\n    }\n  }, {\n    id: FormatRegistryID.csv,\n    name: 'Csv',\n    description: 'Comma-separated values',\n    formatter: ({\n      value\n    }) => {\n      if (isArray(value)) {\n        return value.join(',');\n      }\n\n      return value;\n    }\n  }, {\n    id: FormatRegistryID.html,\n    name: 'HTML',\n    description: 'HTML escaping of values',\n    formatter: ({\n      value\n    }) => {\n      if (isArray(value)) {\n        return textUtil.escapeHtml(value.join(', '));\n      }\n\n      return textUtil.escapeHtml(value);\n    }\n  }, {\n    id: FormatRegistryID.json,\n    name: 'JSON',\n    description: 'JSON stringify valu',\n    formatter: ({\n      value\n    }) => {\n      return JSON.stringify(value);\n    }\n  }, {\n    id: FormatRegistryID.percentEncode,\n    name: 'Percent encode',\n    description: 'Useful for URL escaping values',\n    formatter: ({\n      value\n    }) => {\n      // like glob, but url escaped\n      if (isArray(value)) {\n        return encodeURIComponentStrict('{' + value.join(',') + '}');\n      }\n\n      return encodeURIComponentStrict(value);\n    }\n  }, {\n    id: FormatRegistryID.singleQuote,\n    name: 'Single quote',\n    description: 'Single quoted values',\n    formatter: ({\n      value\n    }) => {\n      // escape single quotes with backslash\n      const regExp = new RegExp(`'`, 'g');\n\n      if (isArray(value)) {\n        return map(value, v => `'${replace(v, regExp, `\\\\'`)}'`).join(',');\n      }\n\n      return `'${replace(value, regExp, `\\\\'`)}'`;\n    }\n  }, {\n    id: FormatRegistryID.doubleQuote,\n    name: 'Double quote',\n    description: 'Double quoted values',\n    formatter: ({\n      value\n    }) => {\n      // escape double quotes with backslash\n      const regExp = new RegExp('\"', 'g');\n\n      if (isArray(value)) {\n        return map(value, v => `\"${replace(v, regExp, '\\\\\"')}\"`).join(',');\n      }\n\n      return `\"${replace(value, regExp, '\\\\\"')}\"`;\n    }\n  }, {\n    id: FormatRegistryID.sqlString,\n    name: 'SQL string',\n    description: 'SQL string quoting and commas for use in IN statements and other scenarios',\n    formatter: ({\n      value\n    }) => {\n      // escape single quotes by pairing them\n      const regExp = new RegExp(`'`, 'g');\n\n      if (isArray(value)) {\n        return map(value, v => `'${replace(v, regExp, \"''\")}'`).join(',');\n      }\n\n      return `'${replace(value, regExp, \"''\")}'`;\n    }\n  }, {\n    id: FormatRegistryID.date,\n    name: 'Date',\n    description: 'Format date in different ways',\n    formatter: ({\n      value,\n      args\n    }) => {\n      var _args$;\n\n      const arg = (_args$ = args[0]) !== null && _args$ !== void 0 ? _args$ : 'iso';\n\n      switch (arg) {\n        case 'ms':\n          return value;\n\n        case 'seconds':\n          return `${Math.round(parseInt(value, 10) / 1000)}`;\n\n        case 'iso':\n          return dateTime(parseInt(value, 10)).toISOString();\n\n        default:\n          return dateTime(parseInt(value, 10)).format(arg);\n      }\n    }\n  }, {\n    id: FormatRegistryID.glob,\n    name: 'Glob',\n    description: 'Format multi-valued variables using glob syntax, example {value1,value2}',\n    formatter: ({\n      value\n    }) => {\n      if (isArray(value) && value.length > 1) {\n        return '{' + value.join(',') + '}';\n      }\n\n      return value;\n    }\n  }, {\n    id: FormatRegistryID.text,\n    name: 'Text',\n    description: 'Format variables in their text representation. Example in multi-variable scenario A + B + C.',\n    formatter: (options, variable) => {\n      if (typeof options.text === 'string') {\n        return options.value === ALL_VARIABLE_VALUE ? ALL_VARIABLE_TEXT : options.text;\n      }\n\n      const current = variable === null || variable === void 0 ? void 0 : variable.current;\n\n      if (!current) {\n        return options.value;\n      }\n\n      return formatVariableLabel(variable);\n    }\n  }, {\n    id: FormatRegistryID.queryParam,\n    name: 'Query parameter',\n    description: 'Format variables as URL parameters. Example in multi-variable scenario A + B + C => var-foo=A&var-foo=B&var-foo=C.',\n    formatter: (options, variable) => {\n      const {\n        value\n      } = options;\n      const {\n        name\n      } = variable;\n\n      if (Array.isArray(value)) {\n        return value.map(v => formatQueryParameter(name, v)).join('&');\n      }\n\n      return formatQueryParameter(name, value);\n    }\n  }];\n  return formats;\n});\n\nfunction luceneEscape(value) {\n  return value.replace(/([\\!\\*\\+\\-\\=<>\\s\\&\\|\\(\\)\\[\\]\\{\\}\\^\\~\\?\\:\\\\/\"])/g, '\\\\$1');\n}\n/**\n * encode string according to RFC 3986; in contrast to encodeURIComponent()\n * also the sub-delims \"!\", \"'\", \"(\", \")\" and \"*\" are encoded;\n * unicode handling uses UTF-8 as in ECMA-262.\n */\n\n\nfunction encodeURIComponentStrict(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, c => {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n\nfunction formatQueryParameter(name, value) {\n  return `var-${name}=${encodeURIComponentStrict(value)}`;\n}\n\nexport function isAllValue(value) {\n  return value === ALL_VARIABLE_VALUE || Array.isArray(value) && value[0] === ALL_VARIABLE_VALUE;\n}","map":{"version":3,"names":["isArray","map","replace","dateTime","Registry","textUtil","kbn","ALL_VARIABLE_TEXT","ALL_VARIABLE_VALUE","formatVariableLabel","FormatRegistryID","formatRegistry","formats","id","lucene","name","description","formatter","value","luceneEscape","Array","length","quotedValues","val","join","raw","regex","regexEscape","escapedValues","pipe","distributed","variable","index","csv","html","escapeHtml","json","JSON","stringify","percentEncode","encodeURIComponentStrict","singleQuote","regExp","RegExp","v","doubleQuote","sqlString","date","args","arg","Math","round","parseInt","toISOString","format","glob","text","options","current","queryParam","formatQueryParameter","str","encodeURIComponent","c","charCodeAt","toString","toUpperCase","isAllValue"],"sources":["/home/soula/grafana/public/app/features/templating/formatRegistry.ts"],"sourcesContent":["import { isArray, map, replace } from 'lodash';\n\nimport { dateTime, Registry, RegistryItem, textUtil, VariableModel } from '@grafana/data';\nimport kbn from 'app/core/utils/kbn';\n\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE } from '../variables/constants';\nimport { formatVariableLabel } from '../variables/shared/formatVariable';\n\nexport interface FormatOptions {\n  value: any;\n  text: string;\n  args: string[];\n}\n\nexport interface FormatRegistryItem extends RegistryItem {\n  formatter(options: FormatOptions, variable: VariableModel): string;\n}\n\nexport enum FormatRegistryID {\n  lucene = 'lucene',\n  raw = 'raw',\n  regex = 'regex',\n  pipe = 'pipe',\n  distributed = 'distributed',\n  csv = 'csv',\n  html = 'html',\n  json = 'json',\n  percentEncode = 'percentencode',\n  singleQuote = 'singlequote',\n  doubleQuote = 'doublequote',\n  sqlString = 'sqlstring',\n  date = 'date',\n  glob = 'glob',\n  text = 'text',\n  queryParam = 'queryparam',\n}\n\nexport const formatRegistry = new Registry<FormatRegistryItem>(() => {\n  const formats: FormatRegistryItem[] = [\n    {\n      id: FormatRegistryID.lucene,\n      name: 'Lucene',\n      description: 'Values are lucene escaped and multi-valued variables generate an OR expression',\n      formatter: ({ value }) => {\n        if (typeof value === 'string') {\n          return luceneEscape(value);\n        }\n\n        if (value instanceof Array && value.length === 0) {\n          return '__empty__';\n        }\n\n        const quotedValues = map(value, (val: string) => {\n          return '\"' + luceneEscape(val) + '\"';\n        });\n\n        return '(' + quotedValues.join(' OR ') + ')';\n      },\n    },\n    {\n      id: FormatRegistryID.raw,\n      name: 'raw',\n      description: 'Keep value as is',\n      formatter: ({ value }) => value,\n    },\n    {\n      id: FormatRegistryID.regex,\n      name: 'Regex',\n      description: 'Values are regex escaped and multi-valued variables generate a (<value>|<value>) expression',\n      formatter: ({ value }) => {\n        if (typeof value === 'string') {\n          return kbn.regexEscape(value);\n        }\n\n        const escapedValues = map(value, kbn.regexEscape);\n        if (escapedValues.length === 1) {\n          return escapedValues[0];\n        }\n        return '(' + escapedValues.join('|') + ')';\n      },\n    },\n    {\n      id: FormatRegistryID.pipe,\n      name: 'Pipe',\n      description: 'Values are separated by | character',\n      formatter: ({ value }) => {\n        if (typeof value === 'string') {\n          return value;\n        }\n        return value.join('|');\n      },\n    },\n    {\n      id: FormatRegistryID.distributed,\n      name: 'Distributed',\n      description: 'Multiple values are formatted like variable=value',\n      formatter: ({ value }, variable) => {\n        if (typeof value === 'string') {\n          return value;\n        }\n\n        value = map(value, (val: any, index: number) => {\n          if (index !== 0) {\n            return variable.name + '=' + val;\n          } else {\n            return val;\n          }\n        });\n        return value.join(',');\n      },\n    },\n    {\n      id: FormatRegistryID.csv,\n      name: 'Csv',\n      description: 'Comma-separated values',\n      formatter: ({ value }) => {\n        if (isArray(value)) {\n          return value.join(',');\n        }\n        return value;\n      },\n    },\n    {\n      id: FormatRegistryID.html,\n      name: 'HTML',\n      description: 'HTML escaping of values',\n      formatter: ({ value }) => {\n        if (isArray(value)) {\n          return textUtil.escapeHtml(value.join(', '));\n        }\n        return textUtil.escapeHtml(value);\n      },\n    },\n    {\n      id: FormatRegistryID.json,\n      name: 'JSON',\n      description: 'JSON stringify valu',\n      formatter: ({ value }) => {\n        return JSON.stringify(value);\n      },\n    },\n    {\n      id: FormatRegistryID.percentEncode,\n      name: 'Percent encode',\n      description: 'Useful for URL escaping values',\n      formatter: ({ value }) => {\n        // like glob, but url escaped\n        if (isArray(value)) {\n          return encodeURIComponentStrict('{' + value.join(',') + '}');\n        }\n        return encodeURIComponentStrict(value);\n      },\n    },\n    {\n      id: FormatRegistryID.singleQuote,\n      name: 'Single quote',\n      description: 'Single quoted values',\n      formatter: ({ value }) => {\n        // escape single quotes with backslash\n        const regExp = new RegExp(`'`, 'g');\n        if (isArray(value)) {\n          return map(value, (v: string) => `'${replace(v, regExp, `\\\\'`)}'`).join(',');\n        }\n        return `'${replace(value, regExp, `\\\\'`)}'`;\n      },\n    },\n    {\n      id: FormatRegistryID.doubleQuote,\n      name: 'Double quote',\n      description: 'Double quoted values',\n      formatter: ({ value }) => {\n        // escape double quotes with backslash\n        const regExp = new RegExp('\"', 'g');\n        if (isArray(value)) {\n          return map(value, (v: string) => `\"${replace(v, regExp, '\\\\\"')}\"`).join(',');\n        }\n        return `\"${replace(value, regExp, '\\\\\"')}\"`;\n      },\n    },\n    {\n      id: FormatRegistryID.sqlString,\n      name: 'SQL string',\n      description: 'SQL string quoting and commas for use in IN statements and other scenarios',\n      formatter: ({ value }) => {\n        // escape single quotes by pairing them\n        const regExp = new RegExp(`'`, 'g');\n        if (isArray(value)) {\n          return map(value, (v) => `'${replace(v, regExp, \"''\")}'`).join(',');\n        }\n        return `'${replace(value, regExp, \"''\")}'`;\n      },\n    },\n    {\n      id: FormatRegistryID.date,\n      name: 'Date',\n      description: 'Format date in different ways',\n      formatter: ({ value, args }) => {\n        const arg = args[0] ?? 'iso';\n\n        switch (arg) {\n          case 'ms':\n            return value;\n          case 'seconds':\n            return `${Math.round(parseInt(value, 10)! / 1000)}`;\n          case 'iso':\n            return dateTime(parseInt(value, 10)).toISOString();\n          default:\n            return dateTime(parseInt(value, 10)).format(arg);\n        }\n      },\n    },\n    {\n      id: FormatRegistryID.glob,\n      name: 'Glob',\n      description: 'Format multi-valued variables using glob syntax, example {value1,value2}',\n      formatter: ({ value }) => {\n        if (isArray(value) && value.length > 1) {\n          return '{' + value.join(',') + '}';\n        }\n        return value;\n      },\n    },\n    {\n      id: FormatRegistryID.text,\n      name: 'Text',\n      description: 'Format variables in their text representation. Example in multi-variable scenario A + B + C.',\n      formatter: (options, variable) => {\n        if (typeof options.text === 'string') {\n          return options.value === ALL_VARIABLE_VALUE ? ALL_VARIABLE_TEXT : options.text;\n        }\n\n        const current = (variable as any)?.current;\n\n        if (!current) {\n          return options.value;\n        }\n\n        return formatVariableLabel(variable);\n      },\n    },\n    {\n      id: FormatRegistryID.queryParam,\n      name: 'Query parameter',\n      description:\n        'Format variables as URL parameters. Example in multi-variable scenario A + B + C => var-foo=A&var-foo=B&var-foo=C.',\n      formatter: (options, variable) => {\n        const { value } = options;\n        const { name } = variable;\n\n        if (Array.isArray(value)) {\n          return value.map((v) => formatQueryParameter(name, v)).join('&');\n        }\n\n        return formatQueryParameter(name, value);\n      },\n    },\n  ];\n\n  return formats;\n});\n\nfunction luceneEscape(value: string) {\n  return value.replace(/([\\!\\*\\+\\-\\=<>\\s\\&\\|\\(\\)\\[\\]\\{\\}\\^\\~\\?\\:\\\\/\"])/g, '\\\\$1');\n}\n\n/**\n * encode string according to RFC 3986; in contrast to encodeURIComponent()\n * also the sub-delims \"!\", \"'\", \"(\", \")\" and \"*\" are encoded;\n * unicode handling uses UTF-8 as in ECMA-262.\n */\nfunction encodeURIComponentStrict(str: string) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, (c) => {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n\nfunction formatQueryParameter(name: string, value: string): string {\n  return `var-${name}=${encodeURIComponentStrict(value)}`;\n}\n\nexport function isAllValue(value: any) {\n  return value === ALL_VARIABLE_VALUE || (Array.isArray(value) && value[0] === ALL_VARIABLE_VALUE);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}