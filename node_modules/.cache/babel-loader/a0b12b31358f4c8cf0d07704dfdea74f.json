{"ast":null,"code":"import React, { useRef } from 'react';\nimport { EditorField } from '@grafana/experimental';\nimport { Select, AutoSizeInput } from '@grafana/ui';\nimport { LegendFormatMode } from '../../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst legendModeOptions = [{\n  label: 'Auto',\n  value: LegendFormatMode.Auto,\n  description: 'Only includes unique labels'\n}, {\n  label: 'Verbose',\n  value: LegendFormatMode.Verbose,\n  description: 'All label names and values'\n}, {\n  label: 'Custom',\n  value: LegendFormatMode.Custom,\n  description: 'Provide a naming template'\n}];\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\n\nexport const PromQueryLegendEditor = /*#__PURE__*/React.memo(({\n  legendFormat,\n  onChange,\n  onRunQuery\n}) => {\n  const mode = getLegendMode(legendFormat);\n  const inputRef = useRef(null);\n\n  const onLegendFormatChanged = evt => {\n    let newFormat = evt.currentTarget.value;\n\n    if (newFormat.length === 0) {\n      newFormat = LegendFormatMode.Auto;\n    }\n\n    if (newFormat !== legendFormat) {\n      onChange(newFormat);\n      onRunQuery();\n    }\n  };\n\n  const onLegendModeChanged = value => {\n    switch (value.value) {\n      case LegendFormatMode.Auto:\n        onChange(LegendFormatMode.Auto);\n        break;\n\n      case LegendFormatMode.Custom:\n        onChange('{{label_name}}');\n        setTimeout(() => {\n          var _inputRef$current, _inputRef$current2;\n\n          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n          (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.setSelectionRange(2, 12, 'forward');\n        }, 10);\n        break;\n\n      case LegendFormatMode.Verbose:\n        onChange('');\n        break;\n    }\n\n    onRunQuery();\n  };\n\n  return /*#__PURE__*/_jsx(EditorField, {\n    label: \"Legend\",\n    tooltip: \"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\",\n    children: /*#__PURE__*/_jsxs(_Fragment, {\n      children: [mode === LegendFormatMode.Custom && /*#__PURE__*/_jsx(AutoSizeInput, {\n        id: \"legendFormat\",\n        minWidth: 22,\n        placeholder: \"auto\",\n        defaultValue: legendFormat,\n        onCommitChange: onLegendFormatChanged,\n        ref: inputRef\n      }), mode !== LegendFormatMode.Custom && /*#__PURE__*/_jsx(Select, {\n        inputId: \"legend.mode\",\n        isSearchable: false,\n        placeholder: \"Select legend mode\",\n        options: legendModeOptions,\n        width: 22,\n        onChange: onLegendModeChanged,\n        value: legendModeOptions.find(x => x.value === mode)\n      })]\n    })\n  });\n});\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  } // Missing or empty legend format is the old verbose behavior\n\n\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat) {\n  const mode = getLegendMode(legendFormat);\n\n  if (mode !== LegendFormatMode.Custom) {\n    var _legendModeOptions$fi;\n\n    return (_legendModeOptions$fi = legendModeOptions.find(x => x.value === mode)) === null || _legendModeOptions$fi === void 0 ? void 0 : _legendModeOptions$fi.label;\n  }\n\n  return legendFormat;\n}","map":{"version":3,"names":["React","useRef","EditorField","Select","AutoSizeInput","LegendFormatMode","legendModeOptions","label","value","Auto","description","Verbose","Custom","PromQueryLegendEditor","memo","legendFormat","onChange","onRunQuery","mode","getLegendMode","inputRef","onLegendFormatChanged","evt","newFormat","currentTarget","length","onLegendModeChanged","setTimeout","current","focus","setSelectionRange","find","x","displayName","getLegendModeLabel"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryLegendEditor.tsx"],"sourcesContent":["import React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select, AutoSizeInput } from '@grafana/ui';\n\nimport { LegendFormatMode } from '../../types';\n\nexport interface Props {\n  legendFormat: string | undefined;\n  onChange: (legendFormat: string) => void;\n  onRunQuery: () => void;\n}\n\nconst legendModeOptions = [\n  {\n    label: 'Auto',\n    value: LegendFormatMode.Auto,\n    description: 'Only includes unique labels',\n  },\n  { label: 'Verbose', value: LegendFormatMode.Verbose, description: 'All label names and values' },\n  { label: 'Custom', value: LegendFormatMode.Custom, description: 'Provide a naming template' },\n];\n\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\nexport const PromQueryLegendEditor = React.memo<Props>(({ legendFormat, onChange, onRunQuery }) => {\n  const mode = getLegendMode(legendFormat);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n    let newFormat = evt.currentTarget.value;\n    if (newFormat.length === 0) {\n      newFormat = LegendFormatMode.Auto;\n    }\n\n    if (newFormat !== legendFormat) {\n      onChange(newFormat);\n      onRunQuery();\n    }\n  };\n\n  const onLegendModeChanged = (value: SelectableValue<LegendFormatMode>) => {\n    switch (value.value!) {\n      case LegendFormatMode.Auto:\n        onChange(LegendFormatMode.Auto);\n        break;\n      case LegendFormatMode.Custom:\n        onChange('{{label_name}}');\n        setTimeout(() => {\n          inputRef.current?.focus();\n          inputRef.current?.setSelectionRange(2, 12, 'forward');\n        }, 10);\n        break;\n      case LegendFormatMode.Verbose:\n        onChange('');\n        break;\n    }\n    onRunQuery();\n  };\n\n  return (\n    <EditorField\n      label=\"Legend\"\n      tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n    >\n      <>\n        {mode === LegendFormatMode.Custom && (\n          <AutoSizeInput\n            id=\"legendFormat\"\n            minWidth={22}\n            placeholder=\"auto\"\n            defaultValue={legendFormat}\n            onCommitChange={onLegendFormatChanged}\n            ref={inputRef}\n          />\n        )}\n        {mode !== LegendFormatMode.Custom && (\n          <Select\n            inputId=\"legend.mode\"\n            isSearchable={false}\n            placeholder=\"Select legend mode\"\n            options={legendModeOptions}\n            width={22}\n            onChange={onLegendModeChanged}\n            value={legendModeOptions.find((x) => x.value === mode)}\n          />\n        )}\n      </>\n    </EditorField>\n  );\n});\n\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat: string | undefined) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  }\n\n  // Missing or empty legend format is the old verbose behavior\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat: string | undefined) {\n  const mode = getLegendMode(legendFormat);\n  if (mode !== LegendFormatMode.Custom) {\n    return legendModeOptions.find((x) => x.value === mode)?.label;\n  }\n  return legendFormat;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}