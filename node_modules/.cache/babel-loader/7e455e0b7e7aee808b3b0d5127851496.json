{"ast":null,"code":"import { useCallback } from 'react';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers) {\n  return useCallback(alertManagerName => {\n    const availableAlertManagersNames = availableAlertManagers.map(am => am.name);\n    return availableAlertManagersNames.includes(alertManagerName);\n  }, [availableAlertManagers]);\n}\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\n\n\nexport function useAlertManagerSourceName(availableAlertManagers) {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n  const update = useCallback(alertManagerSourceName => {\n    if (!isAlertManagerAvailable(alertManagerSourceName)) {\n      return;\n    }\n\n    if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n      store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n      updateQueryParams({\n        [ALERTMANAGER_NAME_QUERY_KEY]: null\n      });\n    } else {\n      store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n      updateQueryParams({\n        [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName\n      });\n    }\n  }, [updateQueryParams, isAlertManagerAvailable]);\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}","map":{"version":3,"names":["useCallback","useQueryParams","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","GRAFANA_RULES_SOURCE_NAME","useIsAlertManagerAvailable","availableAlertManagers","alertManagerName","availableAlertManagersNames","map","am","name","includes","useAlertManagerSourceName","queryParams","updateQueryParams","isAlertManagerAvailable","update","alertManagerSourceName","delete","set","querySource","undefined","storeSource","get"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts"],"sourcesContent":["import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neihter GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,SAASC,mCAAT,EAA8CC,2BAA9C,QAAiF,oBAAjF;AACA,SAAiCC,yBAAjC,QAAkE,qBAAlE;;AAEA,SAASC,0BAAT,CAAoCC,sBAApC,EAAsF;EACpF,OAAOP,WAAW,CACfQ,gBAAD,IAA8B;IAC5B,MAAMC,2BAA2B,GAAGF,sBAAsB,CAACG,GAAvB,CAA4BC,EAAD,IAAQA,EAAE,CAACC,IAAtC,CAApC;IACA,OAAOH,2BAA2B,CAACI,QAA5B,CAAqCL,gBAArC,CAAP;EACD,CAJe,EAKhB,CAACD,sBAAD,CALgB,CAAlB;AAOD;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAASO,yBAAT,CACLP,sBADK,EAE2D;EAChE,MAAM,CAACQ,WAAD,EAAcC,iBAAd,IAAmCf,cAAc,EAAvD;EACA,MAAMgB,uBAAuB,GAAGX,0BAA0B,CAACC,sBAAD,CAA1D;EAEA,MAAMW,MAAM,GAAGlB,WAAW,CACvBmB,sBAAD,IAAoC;IAClC,IAAI,CAACF,uBAAuB,CAACE,sBAAD,CAA5B,EAAsD;MACpD;IACD;;IACD,IAAIA,sBAAsB,KAAKd,yBAA/B,EAA0D;MACxDH,KAAK,CAACkB,MAAN,CAAajB,mCAAb;MACAa,iBAAiB,CAAC;QAAE,CAACZ,2BAAD,GAA+B;MAAjC,CAAD,CAAjB;IACD,CAHD,MAGO;MACLF,KAAK,CAACmB,GAAN,CAAUlB,mCAAV,EAA+CgB,sBAA/C;MACAH,iBAAiB,CAAC;QAAE,CAACZ,2BAAD,GAA+Be;MAAjC,CAAD,CAAjB;IACD;EACF,CAZuB,EAaxB,CAACH,iBAAD,EAAoBC,uBAApB,CAbwB,CAA1B;EAgBA,MAAMK,WAAW,GAAGP,WAAW,CAACX,2BAAD,CAA/B;;EAEA,IAAIkB,WAAW,IAAI,OAAOA,WAAP,KAAuB,QAA1C,EAAoD;IAClD,IAAIL,uBAAuB,CAACK,WAAD,CAA3B,EAA0C;MACxC,OAAO,CAACA,WAAD,EAAcJ,MAAd,CAAP;IACD,CAFD,MAEO;MACL;MACA,OAAO,CAACK,SAAD,EAAYL,MAAZ,CAAP;IACD;EACF;;EAED,MAAMM,WAAW,GAAGtB,KAAK,CAACuB,GAAN,CAAUtB,mCAAV,CAApB;;EACA,IAAIqB,WAAW,IAAI,OAAOA,WAAP,KAAuB,QAAtC,IAAkDP,uBAAuB,CAACO,WAAD,CAA7E,EAA4F;IAC1FN,MAAM,CAACM,WAAD,CAAN;IACA,OAAO,CAACA,WAAD,EAAcN,MAAd,CAAP;EACD;;EAED,IAAID,uBAAuB,CAACZ,yBAAD,CAA3B,EAAwD;IACtD,OAAO,CAACA,yBAAD,EAA4Ba,MAA5B,CAAP;EACD;;EAED,OAAO,CAACK,SAAD,EAAYL,MAAZ,CAAP;AACD"},"metadata":{},"sourceType":"module"}