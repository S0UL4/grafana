{"ast":null,"code":"import React, { useState } from 'react';\nimport { Select } from '@grafana/ui';\nimport { RuleSettingsEditor } from './RuleSettingsEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const RuleSettingsArray = ({\n  onChange,\n  value,\n  ruleType,\n  entitiesInfo\n}) => {\n  const [index, setIndex] = useState(0);\n  const arr = value !== null && value !== void 0 ? value : [];\n\n  const onRuleChange = v => {\n    if (!value) {\n      onChange([v]);\n    } else {\n      const copy = [...value];\n      copy[index] = v;\n      onChange(copy);\n    }\n  }; // create array of value.length + 1\n\n\n  let indexArr = [];\n\n  for (let i = 0; i <= arr.length; i++) {\n    indexArr.push({\n      label: `${ruleType}: ${i}`,\n      value: i\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Select, {\n      placeholder: \"Select an index\",\n      options: indexArr,\n      value: index,\n      onChange: index => {\n        // set index to find the correct setting\n        setIndex(index.value);\n      }\n    }), /*#__PURE__*/_jsx(RuleSettingsEditor, {\n      onChange: onRuleChange,\n      value: arr[index],\n      ruleType: ruleType,\n      entitiesInfo: entitiesInfo\n    })]\n  });\n};","map":{"version":3,"names":["React","useState","Select","RuleSettingsEditor","RuleSettingsArray","onChange","value","ruleType","entitiesInfo","index","setIndex","arr","onRuleChange","v","copy","indexArr","i","length","push","label"],"sources":["/home/soula/grafana/public/app/features/live/pages/RuleSettingsArray.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { Select } from '@grafana/ui';\n\nimport { SelectableValue } from '../../../../../packages/grafana-data/src';\n\nimport { RuleSettingsEditor } from './RuleSettingsEditor';\nimport { RuleType, RuleSetting, PipeLineEntitiesInfo } from './types';\n\ninterface Props {\n  ruleType: RuleType;\n  onChange: (value: RuleSetting[]) => void;\n  value: RuleSetting[];\n  entitiesInfo: PipeLineEntitiesInfo;\n}\n\nexport const RuleSettingsArray: React.FC<Props> = ({ onChange, value, ruleType, entitiesInfo }) => {\n  const [index, setIndex] = useState<number>(0);\n  const arr = value ?? [];\n  const onRuleChange = (v: RuleSetting) => {\n    if (!value) {\n      onChange([v]);\n    } else {\n      const copy = [...value];\n      copy[index] = v;\n      onChange(copy);\n    }\n  };\n  // create array of value.length + 1\n  let indexArr: Array<SelectableValue<number>> = [];\n  for (let i = 0; i <= arr.length; i++) {\n    indexArr.push({\n      label: `${ruleType}: ${i}`,\n      value: i,\n    });\n  }\n\n  return (\n    <>\n      <Select\n        placeholder=\"Select an index\"\n        options={indexArr}\n        value={index}\n        onChange={(index) => {\n          // set index to find the correct setting\n          setIndex(index.value!);\n        }}\n      ></Select>\n      <RuleSettingsEditor onChange={onRuleChange} value={arr[index]} ruleType={ruleType} entitiesInfo={entitiesInfo} />\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,MAAT,QAAuB,aAAvB;AAIA,SAASC,kBAAT,QAAmC,sBAAnC;;;;AAUA,OAAO,MAAMC,iBAAkC,GAAG,CAAC;EAAEC,QAAF;EAAYC,KAAZ;EAAmBC,QAAnB;EAA6BC;AAA7B,CAAD,KAAiD;EACjG,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAS,CAAT,CAAlC;EACA,MAAMU,GAAG,GAAGL,KAAH,aAAGA,KAAH,cAAGA,KAAH,GAAY,EAArB;;EACA,MAAMM,YAAY,GAAIC,CAAD,IAAoB;IACvC,IAAI,CAACP,KAAL,EAAY;MACVD,QAAQ,CAAC,CAACQ,CAAD,CAAD,CAAR;IACD,CAFD,MAEO;MACL,MAAMC,IAAI,GAAG,CAAC,GAAGR,KAAJ,CAAb;MACAQ,IAAI,CAACL,KAAD,CAAJ,GAAcI,CAAd;MACAR,QAAQ,CAACS,IAAD,CAAR;IACD;EACF,CARD,CAHiG,CAYjG;;;EACA,IAAIC,QAAwC,GAAG,EAA/C;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,GAAG,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;IACpCD,QAAQ,CAACG,IAAT,CAAc;MACZC,KAAK,EAAG,GAAEZ,QAAS,KAAIS,CAAE,EADb;MAEZV,KAAK,EAAEU;IAFK,CAAd;EAID;;EAED,oBACE;IAAA,wBACE,KAAC,MAAD;MACE,WAAW,EAAC,iBADd;MAEE,OAAO,EAAED,QAFX;MAGE,KAAK,EAAEN,KAHT;MAIE,QAAQ,EAAGA,KAAD,IAAW;QACnB;QACAC,QAAQ,CAACD,KAAK,CAACH,KAAP,CAAR;MACD;IAPH,EADF,eAUE,KAAC,kBAAD;MAAoB,QAAQ,EAAEM,YAA9B;MAA4C,KAAK,EAAED,GAAG,CAACF,KAAD,CAAtD;MAA+D,QAAQ,EAAEF,QAAzE;MAAmF,YAAY,EAAEC;IAAjG,EAVF;EAAA,EADF;AAcD,CAnCM"},"metadata":{},"sourceType":"module"}