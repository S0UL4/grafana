{"ast":null,"code":"const _excluded = [\"defaultValues\", \"onSubmit\", \"validateOnMount\", \"validateFieldsOnMount\", \"children\", \"validateOn\", \"maxWidth\"],\n      _excluded2 = [\"handleSubmit\", \"trigger\", \"formState\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function Form(_ref) {\n  let {\n    defaultValues,\n    onSubmit,\n    validateOnMount = false,\n    validateFieldsOnMount,\n    children,\n    validateOn = 'onSubmit',\n    maxWidth = 600\n  } = _ref,\n      htmlProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const _useForm = useForm({\n    mode: validateOn,\n    defaultValues\n  }),\n        {\n    handleSubmit,\n    trigger,\n    formState\n  } = _useForm,\n        rest = _objectWithoutPropertiesLoose(_useForm, _excluded2);\n\n  useEffect(() => {\n    if (validateOnMount) {\n      //@ts-expect-error\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n  return /*#__PURE__*/_jsx(\"form\", Object.assign({\n    className: css`\n        max-width: ${maxWidth !== 'none' ? maxWidth + 'px' : maxWidth};\n        width: 100%;\n      `,\n    onSubmit: handleSubmit(onSubmit)\n  }, htmlProps, {\n    children: children(Object.assign({\n      errors: formState.errors,\n      formState\n    }, rest))\n  }));\n}","map":{"version":3,"names":["css","React","useEffect","useForm","Form","defaultValues","onSubmit","validateOnMount","validateFieldsOnMount","children","validateOn","maxWidth","htmlProps","mode","handleSubmit","trigger","formState","rest","errors"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Forms/Form.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { HTMLProps, useEffect } from 'react';\nimport { useForm, Mode, DeepPartial, UnpackNestedValue, SubmitHandler } from 'react-hook-form';\n\nimport { FormAPI } from '../../types';\n\ninterface FormProps<T> extends Omit<HTMLProps<HTMLFormElement>, 'onSubmit'> {\n  validateOn?: Mode;\n  validateOnMount?: boolean;\n  validateFieldsOnMount?: string | string[];\n  defaultValues?: UnpackNestedValue<DeepPartial<T>>;\n  onSubmit: SubmitHandler<T>;\n  children: (api: FormAPI<T>) => React.ReactNode;\n  /** Sets max-width for container. Use it instead of setting individual widths on inputs.*/\n  maxWidth?: number | 'none';\n}\n\nexport function Form<T>({\n  defaultValues,\n  onSubmit,\n  validateOnMount = false,\n  validateFieldsOnMount,\n  children,\n  validateOn = 'onSubmit',\n  maxWidth = 600,\n  ...htmlProps\n}: FormProps<T>) {\n  const { handleSubmit, trigger, formState, ...rest } = useForm<T>({\n    mode: validateOn,\n    defaultValues,\n  });\n\n  useEffect(() => {\n    if (validateOnMount) {\n      //@ts-expect-error\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n\n  return (\n    <form\n      className={css`\n        max-width: ${maxWidth !== 'none' ? maxWidth + 'px' : maxWidth};\n        width: 100%;\n      `}\n      onSubmit={handleSubmit(onSubmit)}\n      {...htmlProps}\n    >\n      {children({ errors: formState.errors, formState, ...rest })}\n    </form>\n  );\n}\n"],"mappings":";;;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,OAAT,QAA6E,iBAA7E;;AAeA,OAAO,SAASC,IAAT,OASU;EAAA,IATO;IACtBC,aADsB;IAEtBC,QAFsB;IAGtBC,eAAe,GAAG,KAHI;IAItBC,qBAJsB;IAKtBC,QALsB;IAMtBC,UAAU,GAAG,UANS;IAOtBC,QAAQ,GAAG;EAPW,CASP;EAAA,IADZC,SACY;;EACf,iBAAsDT,OAAO,CAAI;IAC/DU,IAAI,EAAEH,UADyD;IAE/DL;EAF+D,CAAJ,CAA7D;EAAA,MAAM;IAAES,YAAF;IAAgBC,OAAhB;IAAyBC;EAAzB,CAAN;EAAA,MAA6CC,IAA7C;;EAKAf,SAAS,CAAC,MAAM;IACd,IAAIK,eAAJ,EAAqB;MACnB;MACAQ,OAAO,CAACP,qBAAD,CAAP;IACD;EACF,CALQ,EAKN,CAACO,OAAD,EAAUP,qBAAV,EAAiCD,eAAjC,CALM,CAAT;EAOA,oBACE;IACE,SAAS,EAAEP,GAAI;AACrB,qBAAqBW,QAAQ,KAAK,MAAb,GAAsBA,QAAQ,GAAG,IAAjC,GAAwCA,QAAS;AACtE;AACA,OAJI;IAKE,QAAQ,EAAEG,YAAY,CAACR,QAAD;EALxB,GAMMM,SANN;IAAA,UAQGH,QAAQ;MAAGS,MAAM,EAAEF,SAAS,CAACE,MAArB;MAA6BF;IAA7B,GAA2CC,IAA3C;EARX,GADF;AAYD"},"metadata":{},"sourceType":"module"}