{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { GraphTresholdsStyleMode } from '@grafana/schema';\nimport { PanelContextProvider, useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { useVizHeight } from '../../hooks/useVizHeight';\nimport { PanelPluginsButtonGroup } from '../PanelPluginsButtonGroup';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const VizWrapper = ({\n  data,\n  currentPanel,\n  changePanel,\n  onThresholdsChange,\n  thresholds\n}) => {\n  const [options, setOptions] = useState({\n    frameIndex: 0,\n    showHeader: true\n  });\n  const vizHeight = useVizHeight(data, currentPanel, options.frameIndex);\n  const styles = useStyles2(getStyles(vizHeight));\n  const [fieldConfig, setFieldConfig] = useState(defaultFieldConfig(thresholds, data));\n  useEffect(() => {\n    setFieldConfig(fieldConfig => Object.assign({}, fieldConfig, {\n      defaults: Object.assign({}, fieldConfig.defaults, {\n        thresholds: thresholds,\n        unit: defaultUnit(data),\n        custom: Object.assign({}, fieldConfig.defaults.custom, {\n          thresholdsStyle: {\n            mode: GraphTresholdsStyleMode.Line\n          }\n        })\n      })\n    }));\n  }, [thresholds, setFieldConfig, data]);\n  const context = useMemo(() => ({\n    eventBus: appEvents,\n    canEditThresholds: true,\n    onThresholdsChange: onThresholdsChange\n  }), [onThresholdsChange]);\n\n  if (!options || !data) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.wrapper,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: styles.buttonGroup,\n      children: /*#__PURE__*/_jsx(PanelPluginsButtonGroup, {\n        onChange: changePanel,\n        value: currentPanel\n      })\n    }), /*#__PURE__*/_jsx(AutoSizer, {\n      children: ({\n        width\n      }) => {\n        if (width === 0) {\n          return null;\n        }\n\n        return /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            height: `${vizHeight}px`,\n            width: `${width}px`\n          },\n          children: /*#__PURE__*/_jsx(PanelContextProvider, {\n            value: context,\n            children: /*#__PURE__*/_jsx(PanelRenderer, {\n              height: vizHeight,\n              width: width,\n              data: data,\n              pluginId: currentPanel,\n              title: \"title\",\n              onOptionsChange: setOptions,\n              options: options,\n              fieldConfig: fieldConfig\n            })\n          })\n        });\n      }\n    })]\n  });\n};\n\nconst getStyles = visHeight => theme => ({\n  wrapper: css`\n    padding: 0 ${theme.spacing(2)};\n    height: ${visHeight + theme.spacing.gridSize * 4}px;\n  `,\n  buttonGroup: css`\n    display: flex;\n    justify-content: flex-end;\n  `\n});\n\nfunction defaultUnit(data) {\n  var _data$series$, _data$series$$fields$;\n\n  return (_data$series$ = data.series[0]) === null || _data$series$ === void 0 ? void 0 : (_data$series$$fields$ = _data$series$.fields.find(field => field.type === 'number')) === null || _data$series$$fields$ === void 0 ? void 0 : _data$series$$fields$.config.unit;\n}\n\nfunction defaultFieldConfig(thresholds, data) {\n  if (!thresholds) {\n    return {\n      defaults: {},\n      overrides: []\n    };\n  }\n\n  return {\n    defaults: {\n      thresholds: thresholds,\n      unit: defaultUnit(data),\n      custom: {\n        thresholdsStyle: {\n          mode: GraphTresholdsStyleMode.Line\n        }\n      }\n    },\n    overrides: []\n  };\n}","map":{"version":3,"names":["css","React","useEffect","useMemo","useState","AutoSizer","PanelRenderer","GraphTresholdsStyleMode","PanelContextProvider","useStyles2","appEvents","useVizHeight","PanelPluginsButtonGroup","VizWrapper","data","currentPanel","changePanel","onThresholdsChange","thresholds","options","setOptions","frameIndex","showHeader","vizHeight","styles","getStyles","fieldConfig","setFieldConfig","defaultFieldConfig","defaults","unit","defaultUnit","custom","thresholdsStyle","mode","Line","context","eventBus","canEditThresholds","wrapper","buttonGroup","width","height","visHeight","theme","spacing","gridSize","series","fields","find","field","type","config","overrides"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/VizWrapper.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, useEffect, useMemo, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { FieldConfigSource, GrafanaTheme2, PanelData, ThresholdsConfig } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { GraphFieldConfig, GraphTresholdsStyleMode } from '@grafana/schema';\nimport { PanelContext, PanelContextProvider, useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { PanelOptions } from 'app/plugins/panel/table/models.gen';\n\nimport { useVizHeight } from '../../hooks/useVizHeight';\nimport { SupportedPanelPlugins, PanelPluginsButtonGroup } from '../PanelPluginsButtonGroup';\n\ninterface Props {\n  data: PanelData;\n  currentPanel: SupportedPanelPlugins;\n  changePanel: (panel: SupportedPanelPlugins) => void;\n  thresholds: ThresholdsConfig;\n  onThresholdsChange: (thresholds: ThresholdsConfig) => void;\n}\n\ntype PanelFieldConfig = FieldConfigSource<GraphFieldConfig>;\n\nexport const VizWrapper: FC<Props> = ({ data, currentPanel, changePanel, onThresholdsChange, thresholds }) => {\n  const [options, setOptions] = useState<PanelOptions>({\n    frameIndex: 0,\n    showHeader: true,\n  });\n  const vizHeight = useVizHeight(data, currentPanel, options.frameIndex);\n  const styles = useStyles2(getStyles(vizHeight));\n\n  const [fieldConfig, setFieldConfig] = useState<PanelFieldConfig>(defaultFieldConfig(thresholds, data));\n\n  useEffect(() => {\n    setFieldConfig((fieldConfig) => ({\n      ...fieldConfig,\n      defaults: {\n        ...fieldConfig.defaults,\n        thresholds: thresholds,\n        unit: defaultUnit(data),\n        custom: {\n          ...fieldConfig.defaults.custom,\n          thresholdsStyle: {\n            mode: GraphTresholdsStyleMode.Line,\n          },\n        },\n      },\n    }));\n  }, [thresholds, setFieldConfig, data]);\n\n  const context: PanelContext = useMemo(\n    () => ({\n      eventBus: appEvents,\n      canEditThresholds: true,\n      onThresholdsChange: onThresholdsChange,\n    }),\n    [onThresholdsChange]\n  );\n\n  if (!options || !data) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.buttonGroup}>\n        <PanelPluginsButtonGroup onChange={changePanel} value={currentPanel} />\n      </div>\n      <AutoSizer>\n        {({ width }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <div style={{ height: `${vizHeight}px`, width: `${width}px` }}>\n              <PanelContextProvider value={context}>\n                <PanelRenderer\n                  height={vizHeight}\n                  width={width}\n                  data={data}\n                  pluginId={currentPanel}\n                  title=\"title\"\n                  onOptionsChange={setOptions}\n                  options={options}\n                  fieldConfig={fieldConfig}\n                />\n              </PanelContextProvider>\n            </div>\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nconst getStyles = (visHeight: number) => (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    padding: 0 ${theme.spacing(2)};\n    height: ${visHeight + theme.spacing.gridSize * 4}px;\n  `,\n  buttonGroup: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n});\n\nfunction defaultUnit(data: PanelData): string | undefined {\n  return data.series[0]?.fields.find((field) => field.type === 'number')?.config.unit;\n}\n\nfunction defaultFieldConfig(thresholds: ThresholdsConfig, data: PanelData): PanelFieldConfig {\n  if (!thresholds) {\n    return { defaults: {}, overrides: [] };\n  }\n\n  return {\n    defaults: {\n      thresholds: thresholds,\n      unit: defaultUnit(data),\n      custom: {\n        thresholdsStyle: {\n          mode: GraphTresholdsStyleMode.Line,\n        },\n      },\n    },\n    overrides: [],\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}