{"ast":null,"code":"import { useCallback, useState, useEffect } from 'react';\nimport { DetailState } from '@jaegertracing/jaeger-ui-components';\n/**\n * Keeps state of the span detail. This means whether span details are open but also state of each detail subitem\n * like logs or tags.\n */\n\nexport function useDetailState(frame) {\n  const [detailStates, setDetailStates] = useState(new Map()); // Clear detail state when new trace arrives\n\n  useEffect(() => {\n    setDetailStates(new Map());\n  }, [frame, setDetailStates]);\n  const toggleDetail = useCallback(function toggleDetail(spanID) {\n    const newDetailStates = new Map(detailStates);\n\n    if (newDetailStates.has(spanID)) {\n      newDetailStates.delete(spanID);\n    } else {\n      newDetailStates.set(spanID, new DetailState());\n    }\n\n    setDetailStates(newDetailStates);\n  }, [detailStates]);\n  const detailLogItemToggle = useCallback(function detailLogItemToggle(spanID, log) {\n    const old = detailStates.get(spanID);\n\n    if (!old) {\n      return;\n    }\n\n    const detailState = old.toggleLogItem(log);\n    const newDetailStates = new Map(detailStates);\n    newDetailStates.set(spanID, detailState);\n    return setDetailStates(newDetailStates);\n  }, [detailStates]);\n  const detailReferenceItemToggle = useCallback(function detailReferenceItemToggle(spanID, reference) {\n    const old = detailStates.get(spanID);\n\n    if (!old) {\n      return;\n    }\n\n    const detailState = old.toggleReferenceItem(reference);\n    const newDetailStates = new Map(detailStates);\n    newDetailStates.set(spanID, detailState);\n    return setDetailStates(newDetailStates);\n  }, [detailStates]);\n  return {\n    detailStates,\n    toggleDetail,\n    detailLogItemToggle,\n    detailLogsToggle: useCallback(spanID => makeDetailSubsectionToggle('logs', detailStates, setDetailStates)(spanID), [detailStates]),\n    detailWarningsToggle: useCallback(spanID => makeDetailSubsectionToggle('warnings', detailStates, setDetailStates)(spanID), [detailStates]),\n    detailStackTracesToggle: useCallback(spanID => makeDetailSubsectionToggle('stackTraces', detailStates, setDetailStates)(spanID), [detailStates]),\n    detailReferenceItemToggle,\n    detailReferencesToggle: useCallback(spanID => makeDetailSubsectionToggle('references', detailStates, setDetailStates)(spanID), [detailStates]),\n    detailProcessToggle: useCallback(spanID => makeDetailSubsectionToggle('process', detailStates, setDetailStates)(spanID), [detailStates]),\n    detailTagsToggle: useCallback(spanID => makeDetailSubsectionToggle('tags', detailStates, setDetailStates)(spanID), [detailStates])\n  };\n}\n\nfunction makeDetailSubsectionToggle(subSection, detailStates, setDetailStates) {\n  return spanID => {\n    const old = detailStates.get(spanID);\n\n    if (!old) {\n      return;\n    }\n\n    let detailState;\n\n    if (subSection === 'tags') {\n      detailState = old.toggleTags();\n    } else if (subSection === 'process') {\n      detailState = old.toggleProcess();\n    } else if (subSection === 'warnings') {\n      detailState = old.toggleWarnings();\n    } else if (subSection === 'references') {\n      detailState = old.toggleReferences();\n    } else if (subSection === 'stackTraces') {\n      detailState = old.toggleStackTraces();\n    } else {\n      detailState = old.toggleLogs();\n    }\n\n    const newDetailStates = new Map(detailStates);\n    newDetailStates.set(spanID, detailState);\n    setDetailStates(newDetailStates);\n  };\n}","map":{"version":3,"names":["useCallback","useState","useEffect","DetailState","useDetailState","frame","detailStates","setDetailStates","Map","toggleDetail","spanID","newDetailStates","has","delete","set","detailLogItemToggle","log","old","get","detailState","toggleLogItem","detailReferenceItemToggle","reference","toggleReferenceItem","detailLogsToggle","makeDetailSubsectionToggle","detailWarningsToggle","detailStackTracesToggle","detailReferencesToggle","detailProcessToggle","detailTagsToggle","subSection","toggleTags","toggleProcess","toggleWarnings","toggleReferences","toggleStackTraces","toggleLogs"],"sources":["/home/soula/grafana/public/app/features/explore/TraceView/useDetailState.ts"],"sourcesContent":["import { TraceLog, TraceSpanReference } from '@jaegertracing/jaeger-ui-components/src/types/trace';\nimport { useCallback, useState, useEffect } from 'react';\n\nimport { DataFrame } from '@grafana/data';\nimport { DetailState } from '@jaegertracing/jaeger-ui-components';\n\n/**\n * Keeps state of the span detail. This means whether span details are open but also state of each detail subitem\n * like logs or tags.\n */\nexport function useDetailState(frame: DataFrame) {\n  const [detailStates, setDetailStates] = useState(new Map<string, DetailState>());\n\n  // Clear detail state when new trace arrives\n  useEffect(() => {\n    setDetailStates(new Map<string, DetailState>());\n  }, [frame, setDetailStates]);\n\n  const toggleDetail = useCallback(\n    function toggleDetail(spanID: string) {\n      const newDetailStates = new Map(detailStates);\n      if (newDetailStates.has(spanID)) {\n        newDetailStates.delete(spanID);\n      } else {\n        newDetailStates.set(spanID, new DetailState());\n      }\n      setDetailStates(newDetailStates);\n    },\n    [detailStates]\n  );\n\n  const detailLogItemToggle = useCallback(\n    function detailLogItemToggle(spanID: string, log: TraceLog) {\n      const old = detailStates.get(spanID);\n      if (!old) {\n        return;\n      }\n      const detailState = old.toggleLogItem(log);\n      const newDetailStates = new Map(detailStates);\n      newDetailStates.set(spanID, detailState);\n      return setDetailStates(newDetailStates);\n    },\n    [detailStates]\n  );\n\n  const detailReferenceItemToggle = useCallback(\n    function detailReferenceItemToggle(spanID: string, reference: TraceSpanReference) {\n      const old = detailStates.get(spanID);\n      if (!old) {\n        return;\n      }\n      const detailState = old.toggleReferenceItem(reference);\n      const newDetailStates = new Map(detailStates);\n      newDetailStates.set(spanID, detailState);\n      return setDetailStates(newDetailStates);\n    },\n    [detailStates]\n  );\n\n  return {\n    detailStates,\n    toggleDetail,\n    detailLogItemToggle,\n    detailLogsToggle: useCallback(\n      (spanID: string) => makeDetailSubsectionToggle('logs', detailStates, setDetailStates)(spanID),\n      [detailStates]\n    ),\n    detailWarningsToggle: useCallback(\n      (spanID: string) => makeDetailSubsectionToggle('warnings', detailStates, setDetailStates)(spanID),\n      [detailStates]\n    ),\n    detailStackTracesToggle: useCallback(\n      (spanID: string) => makeDetailSubsectionToggle('stackTraces', detailStates, setDetailStates)(spanID),\n      [detailStates]\n    ),\n    detailReferenceItemToggle,\n    detailReferencesToggle: useCallback(\n      (spanID: string) => makeDetailSubsectionToggle('references', detailStates, setDetailStates)(spanID),\n      [detailStates]\n    ),\n    detailProcessToggle: useCallback(\n      (spanID: string) => makeDetailSubsectionToggle('process', detailStates, setDetailStates)(spanID),\n      [detailStates]\n    ),\n    detailTagsToggle: useCallback(\n      (spanID: string) => makeDetailSubsectionToggle('tags', detailStates, setDetailStates)(spanID),\n      [detailStates]\n    ),\n  };\n}\n\nfunction makeDetailSubsectionToggle(\n  subSection: 'tags' | 'process' | 'logs' | 'warnings' | 'references' | 'stackTraces',\n  detailStates: Map<string, DetailState>,\n  setDetailStates: (detailStates: Map<string, DetailState>) => void\n) {\n  return (spanID: string) => {\n    const old = detailStates.get(spanID);\n    if (!old) {\n      return;\n    }\n    let detailState;\n    if (subSection === 'tags') {\n      detailState = old.toggleTags();\n    } else if (subSection === 'process') {\n      detailState = old.toggleProcess();\n    } else if (subSection === 'warnings') {\n      detailState = old.toggleWarnings();\n    } else if (subSection === 'references') {\n      detailState = old.toggleReferences();\n    } else if (subSection === 'stackTraces') {\n      detailState = old.toggleStackTraces();\n    } else {\n      detailState = old.toggleLogs();\n    }\n    const newDetailStates = new Map(detailStates);\n    newDetailStates.set(spanID, detailState);\n    setDetailStates(newDetailStates);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}