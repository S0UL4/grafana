{"ast":null,"code":"var _th, _th2;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport { transform } from 'ol/proj';\nimport React, { PureComponent } from 'react';\nimport tinycolor from 'tinycolor2';\nimport { stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class DebugOverlay extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"style\", getStyles(config.theme));\n\n    _defineProperty(this, \"updateViewState\", () => {\n      const view = this.props.map.getView();\n      this.setState({\n        zoom: view.getZoom(),\n        center: transform(view.getCenter(), view.getProjection(), 'EPSG:4326')\n      });\n    });\n\n    this.state = {\n      zoom: 0,\n      center: [0, 0]\n    };\n  }\n\n  componentDidMount() {\n    this.props.map.on('moveend', this.updateViewState);\n    this.updateViewState();\n  }\n\n  render() {\n    const {\n      zoom,\n      center\n    } = this.state;\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: this.style.infoWrap,\n      children: /*#__PURE__*/_jsx(\"table\", {\n        children: /*#__PURE__*/_jsxs(\"tbody\", {\n          children: [/*#__PURE__*/_jsxs(\"tr\", {\n            children: [_th || (_th = /*#__PURE__*/_jsx(\"th\", {\n              children: \"Zoom:\"\n            })), /*#__PURE__*/_jsx(\"td\", {\n              children: zoom === null || zoom === void 0 ? void 0 : zoom.toFixed(1)\n            })]\n          }), /*#__PURE__*/_jsxs(\"tr\", {\n            children: [_th2 || (_th2 = /*#__PURE__*/_jsx(\"th\", {\n              children: \"Center:\\xA0\"\n            })), /*#__PURE__*/_jsxs(\"td\", {\n              children: [center[0].toFixed(5), \", \", center[1].toFixed(5)]\n            })]\n          })]\n        })\n      })\n    });\n  }\n\n}\nconst getStyles = stylesFactory(theme => ({\n  infoWrap: css`\n    color: ${theme.colors.text};\n    background: ${tinycolor(theme.colors.panelBg).setAlpha(0.7).toString()};\n    border-radius: 2px;\n    padding: 8px;\n  `\n}));","map":{"version":3,"names":["css","transform","React","PureComponent","tinycolor","stylesFactory","config","DebugOverlay","constructor","props","getStyles","theme","view","map","getView","setState","zoom","getZoom","center","getCenter","getProjection","state","componentDidMount","on","updateViewState","render","style","infoWrap","toFixed","colors","text","panelBg","setAlpha","toString"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/components/DebugOverlay.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { Map } from 'ol';\nimport { Coordinate } from 'ol/coordinate';\nimport { transform } from 'ol/proj';\nimport React, { PureComponent } from 'react';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { stylesFactory } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\ninterface Props {\n  map: Map;\n}\n\ninterface State {\n  zoom?: number;\n  center: Coordinate;\n}\n\nexport class DebugOverlay extends PureComponent<Props, State> {\n  style = getStyles(config.theme);\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { zoom: 0, center: [0, 0] };\n  }\n\n  updateViewState = () => {\n    const view = this.props.map.getView();\n    this.setState({\n      zoom: view.getZoom(),\n      center: transform(view.getCenter()!, view.getProjection(), 'EPSG:4326'),\n    });\n  };\n\n  componentDidMount() {\n    this.props.map.on('moveend', this.updateViewState);\n    this.updateViewState();\n  }\n\n  render() {\n    const { zoom, center } = this.state;\n\n    return (\n      <div className={this.style.infoWrap}>\n        <table>\n          <tbody>\n            <tr>\n              <th>Zoom:</th>\n              <td>{zoom?.toFixed(1)}</td>\n            </tr>\n            <tr>\n              <th>Center:&nbsp;</th>\n              <td>\n                {center[0].toFixed(5)}, {center[1].toFixed(5)}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  infoWrap: css`\n    color: ${theme.colors.text};\n    background: ${tinycolor(theme.colors.panelBg).setAlpha(0.7).toString()};\n    border-radius: 2px;\n    padding: 8px;\n  `,\n}));\n"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AAGA,SAASC,SAAT,QAA0B,SAA1B;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAGA,SAASC,aAAT,QAA8B,aAA9B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;;AAWA,OAAO,MAAMC,YAAN,SAA2BJ,aAA3B,CAAuD;EAG5DK,WAAW,CAACC,KAAD,EAAe;IACxB,MAAMA,KAAN;;IADwB,+BAFlBC,SAAS,CAACJ,MAAM,CAACK,KAAR,CAES;;IAAA,yCAKR,MAAM;MACtB,MAAMC,IAAI,GAAG,KAAKH,KAAL,CAAWI,GAAX,CAAeC,OAAf,EAAb;MACA,KAAKC,QAAL,CAAc;QACZC,IAAI,EAAEJ,IAAI,CAACK,OAAL,EADM;QAEZC,MAAM,EAAEjB,SAAS,CAACW,IAAI,CAACO,SAAL,EAAD,EAAoBP,IAAI,CAACQ,aAAL,EAApB,EAA0C,WAA1C;MAFL,CAAd;IAID,CAXyB;;IAExB,KAAKC,KAAL,GAAa;MAAEL,IAAI,EAAE,CAAR;MAAWE,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ;IAAnB,CAAb;EACD;;EAUDI,iBAAiB,GAAG;IAClB,KAAKb,KAAL,CAAWI,GAAX,CAAeU,EAAf,CAAkB,SAAlB,EAA6B,KAAKC,eAAlC;IACA,KAAKA,eAAL;EACD;;EAEDC,MAAM,GAAG;IACP,MAAM;MAAET,IAAF;MAAQE;IAAR,IAAmB,KAAKG,KAA9B;IAEA,oBACE;MAAK,SAAS,EAAE,KAAKK,KAAL,CAAWC,QAA3B;MAAA,uBACE;QAAA,uBACE;UAAA,wBACE;YAAA,sCACE;cAAA;YAAA,EADF,gBAEE;cAAA,UAAKX,IAAL,aAAKA,IAAL,uBAAKA,IAAI,CAAEY,OAAN,CAAc,CAAd;YAAL,EAFF;UAAA,EADF,eAKE;YAAA,wCACE;cAAA;YAAA,EADF,gBAEE;cAAA,WACGV,MAAM,CAAC,CAAD,CAAN,CAAUU,OAAV,CAAkB,CAAlB,CADH,QAC2BV,MAAM,CAAC,CAAD,CAAN,CAAUU,OAAV,CAAkB,CAAlB,CAD3B;YAAA,EAFF;UAAA,EALF;QAAA;MADF;IADF,EADF;EAkBD;;AA1C2D;AA6C9D,MAAMlB,SAAS,GAAGL,aAAa,CAAEM,KAAD,KAA0B;EACxDgB,QAAQ,EAAE3B,GAAI;AAChB,aAAaW,KAAK,CAACkB,MAAN,CAAaC,IAAK;AAC/B,kBAAkB1B,SAAS,CAACO,KAAK,CAACkB,MAAN,CAAaE,OAAd,CAAT,CAAgCC,QAAhC,CAAyC,GAAzC,EAA8CC,QAA9C,EAAyD;AAC3E;AACA;AACA;AAN0D,CAA1B,CAAD,CAA/B"},"metadata":{},"sourceType":"module"}