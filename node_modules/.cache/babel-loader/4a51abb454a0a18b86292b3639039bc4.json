{"ast":null,"code":"const _excluded = [\"libraryPanel\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { defaults, each, sortBy } from 'lodash';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\nimport { LibraryElementKind } from '../../../library-panels/types';\nimport { isConstant, isQuery } from '../../../variables/guard';\nimport { VariableRefresh } from '../../../variables/types';\nexport class DashboardExporter {\n  async makeExportable(dashboard) {\n    // clean up repeated rows and panels,\n    // this is done on the live real dashboard instance, not on a clone\n    // so we need to undo this\n    // this is pretty hacky and needs to be changed\n    dashboard.cleanUpRepeats();\n    const saveModel = dashboard.getSaveModelClone();\n    saveModel.id = null; // undo repeat cleanup\n\n    dashboard.processRepeats();\n    const inputs = [];\n    const requires = {};\n    const datasources = {};\n    const variableLookup = {};\n    const libraryPanels = new Map();\n\n    for (const variable of saveModel.getVariables()) {\n      variableLookup[variable.name] = variable;\n    }\n\n    const templateizeDatasourceUsage = (obj, fallback) => {\n      if (obj.datasource === undefined) {\n        obj.datasource = fallback;\n        return;\n      }\n\n      let datasource = obj.datasource;\n      let datasourceVariable = null; // ignore data source properties that contain a variable\n\n      if (datasource && datasource.uid) {\n        const uid = datasource.uid;\n\n        if (uid.indexOf('$') === 0) {\n          datasourceVariable = variableLookup[uid.substring(1)];\n\n          if (datasourceVariable && datasourceVariable.current) {\n            datasource = datasourceVariable.current.value;\n          }\n        }\n      }\n\n      return getDataSourceSrv().get(datasource).then(ds => {\n        var _ds$meta, _ds$meta2, _ds$meta3, _ds$meta4;\n\n        if ((_ds$meta = ds.meta) !== null && _ds$meta !== void 0 && _ds$meta.builtIn) {\n          return;\n        } // add data source type to require list\n\n\n        requires['datasource' + ((_ds$meta2 = ds.meta) === null || _ds$meta2 === void 0 ? void 0 : _ds$meta2.id)] = {\n          type: 'datasource',\n          id: ds.meta.id,\n          name: ds.meta.name,\n          version: ds.meta.info.version || '1.0.0'\n        }; // if used via variable we can skip templatizing usage\n\n        if (datasourceVariable) {\n          return;\n        }\n\n        const refName = 'DS_' + ds.name.replace(' ', '_').toUpperCase();\n        datasources[refName] = {\n          name: refName,\n          label: ds.name,\n          description: '',\n          type: 'datasource',\n          pluginId: (_ds$meta3 = ds.meta) === null || _ds$meta3 === void 0 ? void 0 : _ds$meta3.id,\n          pluginName: (_ds$meta4 = ds.meta) === null || _ds$meta4 === void 0 ? void 0 : _ds$meta4.name\n        };\n        obj.datasource = {\n          type: ds.meta.id,\n          uid: '${' + refName + '}'\n        };\n      });\n    };\n\n    const processPanel = async panel => {\n      if (panel.type !== 'row') {\n        await templateizeDatasourceUsage(panel);\n\n        if (panel.targets) {\n          for (const target of panel.targets) {\n            await templateizeDatasourceUsage(target, panel.datasource);\n          }\n        }\n\n        const panelDef = config.panels[panel.type];\n\n        if (panelDef) {\n          requires['panel' + panelDef.id] = {\n            type: 'panel',\n            id: panelDef.id,\n            name: panelDef.name,\n            version: panelDef.info.version\n          };\n        }\n      }\n    };\n\n    const processLibraryPanels = panel => {\n      if (isPanelModelLibraryPanel(panel)) {\n        const {\n          libraryPanel\n        } = panel,\n              model = _objectWithoutPropertiesLoose(panel, _excluded);\n\n        const {\n          name,\n          uid\n        } = libraryPanel;\n\n        if (!libraryPanels.has(uid)) {\n          libraryPanels.set(uid, {\n            name,\n            uid,\n            kind: LibraryElementKind.Panel,\n            model\n          });\n        }\n      }\n    };\n\n    try {\n      // check up panel data sources\n      for (const panel of saveModel.panels) {\n        await processPanel(panel); // handle collapsed rows\n\n        if (panel.collapsed !== undefined && panel.collapsed === true && panel.panels) {\n          for (const rowPanel of panel.panels) {\n            await processPanel(rowPanel);\n          }\n        }\n      } // templatize template vars\n\n\n      for (const variable of saveModel.getVariables()) {\n        if (isQuery(variable)) {\n          await templateizeDatasourceUsage(variable);\n          variable.options = [];\n          variable.current = {};\n          variable.refresh = variable.refresh !== VariableRefresh.never ? variable.refresh : VariableRefresh.onDashboardLoad;\n        }\n      } // templatize annotations vars\n\n\n      for (const annotationDef of saveModel.annotations.list) {\n        await templateizeDatasourceUsage(annotationDef);\n      } // add grafana version\n\n\n      requires['grafana'] = {\n        type: 'grafana',\n        id: 'grafana',\n        name: 'Grafana',\n        version: config.buildInfo.version\n      };\n      each(datasources, value => {\n        inputs.push(value);\n      }); // we need to process all panels again after all the promises are resolved\n      // so all data sources, variables and targets have been templateized when we process library panels\n\n      for (const panel of saveModel.panels) {\n        processLibraryPanels(panel);\n\n        if (panel.collapsed !== undefined && panel.collapsed === true && panel.panels) {\n          for (const rowPanel of panel.panels) {\n            processLibraryPanels(rowPanel);\n          }\n        }\n      } // templatize constants\n\n\n      for (const variable of saveModel.getVariables()) {\n        if (isConstant(variable)) {\n          const refName = 'VAR_' + variable.name.replace(' ', '_').toUpperCase();\n          inputs.push({\n            name: refName,\n            type: 'constant',\n            label: variable.label || variable.name,\n            value: variable.query,\n            description: ''\n          }); // update current and option\n\n          variable.query = '${' + refName + '}';\n          variable.current = {\n            value: variable.query,\n            text: variable.query,\n            selected: false\n          };\n          variable.options = [variable.current];\n        }\n      } // make inputs and requires a top thing\n\n\n      const newObj = {};\n      newObj['__inputs'] = inputs;\n      newObj['__elements'] = [...libraryPanels.values()];\n      newObj['__requires'] = sortBy(requires, ['id']);\n      defaults(newObj, saveModel);\n      return newObj;\n    } catch (err) {\n      console.error('Export failed:', err);\n      return {\n        error: err\n      };\n    }\n  }\n\n}","map":{"version":3,"names":["defaults","each","sortBy","getDataSourceSrv","config","isPanelModelLibraryPanel","LibraryElementKind","isConstant","isQuery","VariableRefresh","DashboardExporter","makeExportable","dashboard","cleanUpRepeats","saveModel","getSaveModelClone","id","processRepeats","inputs","requires","datasources","variableLookup","libraryPanels","Map","variable","getVariables","name","templateizeDatasourceUsage","obj","fallback","datasource","undefined","datasourceVariable","uid","indexOf","substring","current","value","get","then","ds","meta","builtIn","type","version","info","refName","replace","toUpperCase","label","description","pluginId","pluginName","processPanel","panel","targets","target","panelDef","panels","processLibraryPanels","libraryPanel","model","has","set","kind","Panel","collapsed","rowPanel","options","refresh","never","onDashboardLoad","annotationDef","annotations","list","buildInfo","push","query","text","selected","newObj","values","err","console","error"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/DashExportModal/DashboardExporter.ts"],"sourcesContent":["import { defaults, each, sortBy } from 'lodash';\n\nimport { DataSourceRef, PanelPluginMeta } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport { PanelModel } from 'app/features/dashboard/state';\n\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\nimport { LibraryElementKind } from '../../../library-panels/types';\nimport { isConstant, isQuery } from '../../../variables/guard';\nimport { VariableOption, VariableRefresh } from '../../../variables/types';\nimport { DashboardModel } from '../../state/DashboardModel';\n\ninterface Input {\n  name: string;\n  type: string;\n  label: string;\n  value: any;\n  description: string;\n}\n\ninterface Requires {\n  [key: string]: {\n    type: string;\n    id: string;\n    name: string;\n    version: string;\n  };\n}\n\ninterface DataSources {\n  [key: string]: {\n    name: string;\n    label: string;\n    description: string;\n    type: string;\n    pluginId: string;\n    pluginName: string;\n  };\n}\n\nexport interface LibraryElementExport {\n  name: string;\n  uid: string;\n  model: any;\n  kind: LibraryElementKind;\n}\n\nexport class DashboardExporter {\n  async makeExportable(dashboard: DashboardModel) {\n    // clean up repeated rows and panels,\n    // this is done on the live real dashboard instance, not on a clone\n    // so we need to undo this\n    // this is pretty hacky and needs to be changed\n    dashboard.cleanUpRepeats();\n\n    const saveModel = dashboard.getSaveModelClone();\n    saveModel.id = null;\n\n    // undo repeat cleanup\n    dashboard.processRepeats();\n\n    const inputs: Input[] = [];\n    const requires: Requires = {};\n    const datasources: DataSources = {};\n    const variableLookup: { [key: string]: any } = {};\n    const libraryPanels: Map<string, LibraryElementExport> = new Map<string, LibraryElementExport>();\n\n    for (const variable of saveModel.getVariables()) {\n      variableLookup[variable.name] = variable;\n    }\n\n    const templateizeDatasourceUsage = (obj: any, fallback?: DataSourceRef) => {\n      if (obj.datasource === undefined) {\n        obj.datasource = fallback;\n        return;\n      }\n\n      let datasource: string = obj.datasource;\n      let datasourceVariable: any = null;\n\n      // ignore data source properties that contain a variable\n      if (datasource && (datasource as any).uid) {\n        const uid = (datasource as any).uid as string;\n        if (uid.indexOf('$') === 0) {\n          datasourceVariable = variableLookup[uid.substring(1)];\n          if (datasourceVariable && datasourceVariable.current) {\n            datasource = datasourceVariable.current.value;\n          }\n        }\n      }\n\n      return getDataSourceSrv()\n        .get(datasource)\n        .then((ds) => {\n          if (ds.meta?.builtIn) {\n            return;\n          }\n\n          // add data source type to require list\n          requires['datasource' + ds.meta?.id] = {\n            type: 'datasource',\n            id: ds.meta.id,\n            name: ds.meta.name,\n            version: ds.meta.info.version || '1.0.0',\n          };\n\n          // if used via variable we can skip templatizing usage\n          if (datasourceVariable) {\n            return;\n          }\n\n          const refName = 'DS_' + ds.name.replace(' ', '_').toUpperCase();\n          datasources[refName] = {\n            name: refName,\n            label: ds.name,\n            description: '',\n            type: 'datasource',\n            pluginId: ds.meta?.id,\n            pluginName: ds.meta?.name,\n          };\n\n          obj.datasource = { type: ds.meta.id, uid: '${' + refName + '}' };\n        });\n    };\n\n    const processPanel = async (panel: PanelModel) => {\n      if (panel.type !== 'row') {\n        await templateizeDatasourceUsage(panel);\n\n        if (panel.targets) {\n          for (const target of panel.targets) {\n            await templateizeDatasourceUsage(target, panel.datasource!);\n          }\n        }\n\n        const panelDef: PanelPluginMeta = config.panels[panel.type];\n        if (panelDef) {\n          requires['panel' + panelDef.id] = {\n            type: 'panel',\n            id: panelDef.id,\n            name: panelDef.name,\n            version: panelDef.info.version,\n          };\n        }\n      }\n    };\n\n    const processLibraryPanels = (panel: any) => {\n      if (isPanelModelLibraryPanel(panel)) {\n        const { libraryPanel, ...model } = panel;\n        const { name, uid } = libraryPanel;\n        if (!libraryPanels.has(uid)) {\n          libraryPanels.set(uid, { name, uid, kind: LibraryElementKind.Panel, model });\n        }\n      }\n    };\n\n    try {\n      // check up panel data sources\n      for (const panel of saveModel.panels) {\n        await processPanel(panel);\n\n        // handle collapsed rows\n        if (panel.collapsed !== undefined && panel.collapsed === true && panel.panels) {\n          for (const rowPanel of panel.panels) {\n            await processPanel(rowPanel);\n          }\n        }\n      }\n\n      // templatize template vars\n      for (const variable of saveModel.getVariables()) {\n        if (isQuery(variable)) {\n          await templateizeDatasourceUsage(variable);\n          variable.options = [];\n          variable.current = {} as unknown as VariableOption;\n          variable.refresh =\n            variable.refresh !== VariableRefresh.never ? variable.refresh : VariableRefresh.onDashboardLoad;\n        }\n      }\n\n      // templatize annotations vars\n      for (const annotationDef of saveModel.annotations.list) {\n        await templateizeDatasourceUsage(annotationDef);\n      }\n\n      // add grafana version\n      requires['grafana'] = {\n        type: 'grafana',\n        id: 'grafana',\n        name: 'Grafana',\n        version: config.buildInfo.version,\n      };\n\n      each(datasources, (value: any) => {\n        inputs.push(value);\n      });\n\n      // we need to process all panels again after all the promises are resolved\n      // so all data sources, variables and targets have been templateized when we process library panels\n      for (const panel of saveModel.panels) {\n        processLibraryPanels(panel);\n        if (panel.collapsed !== undefined && panel.collapsed === true && panel.panels) {\n          for (const rowPanel of panel.panels) {\n            processLibraryPanels(rowPanel);\n          }\n        }\n      }\n\n      // templatize constants\n      for (const variable of saveModel.getVariables()) {\n        if (isConstant(variable)) {\n          const refName = 'VAR_' + variable.name.replace(' ', '_').toUpperCase();\n          inputs.push({\n            name: refName,\n            type: 'constant',\n            label: variable.label || variable.name,\n            value: variable.query,\n            description: '',\n          });\n          // update current and option\n          variable.query = '${' + refName + '}';\n          variable.current = {\n            value: variable.query,\n            text: variable.query,\n            selected: false,\n          };\n          variable.options = [variable.current];\n        }\n      }\n\n      // make inputs and requires a top thing\n      const newObj: { [key: string]: {} } = {};\n      newObj['__inputs'] = inputs;\n      newObj['__elements'] = [...libraryPanels.values()];\n      newObj['__requires'] = sortBy(requires, ['id']);\n\n      defaults(newObj, saveModel);\n      return newObj;\n    } catch (err) {\n      console.error('Export failed:', err);\n      return {\n        error: err,\n      };\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}