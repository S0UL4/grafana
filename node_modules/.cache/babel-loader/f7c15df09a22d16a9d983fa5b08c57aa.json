{"ast":null,"code":"import { omitBy, isNil, isNumber, defaultTo } from 'lodash';\nimport { FieldMatcherID, ThresholdsMode } from '@grafana/data';\n\n/**\n * At 7.0, the `table` panel was swapped from an angular implementation to a react one.\n * The models do not match, so this process will delegate to the old implementation when\n * a saved table configuration exists.\n */\nexport const tableMigrationHandler = panel => {\n  // Table was saved as an angular table, lets just swap to the 'table-old' panel\n  if (!panel.pluginVersion && panel.columns) {\n    console.log('Was angular table', panel);\n  } // Nothing changed\n\n\n  return panel.options;\n};\nconst transformsMap = {\n  timeseries_to_rows: 'seriesToRows',\n  timeseries_to_columns: 'seriesToColumns',\n  timeseries_aggregations: 'reduce',\n  table: 'merge'\n};\nconst columnsMap = {\n  avg: 'mean',\n  min: 'min',\n  max: 'max',\n  total: 'sum',\n  current: 'lastNotNull',\n  count: 'count'\n};\nconst colorModeMap = {\n  cell: 'color-background',\n  row: 'color-background',\n  value: 'color-text'\n};\n\nconst generateThresholds = (thresholds, colors) => {\n  return [-Infinity, ...thresholds].map((threshold, idx) => ({\n    color: colors[idx],\n    value: isNumber(threshold) ? threshold : parseInt(threshold, 10)\n  }));\n};\n\nconst migrateTransformations = (panel, oldOpts) => {\n  var _panel$transformation;\n\n  const transformations = (_panel$transformation = panel.transformations) !== null && _panel$transformation !== void 0 ? _panel$transformation : [];\n\n  if (Object.keys(transformsMap).includes(oldOpts.transform)) {\n    const opts = {\n      reducers: []\n    };\n\n    if (oldOpts.transform === 'timeseries_aggregations') {\n      opts.includeTimeField = false;\n      opts.reducers = oldOpts.columns.map(column => columnsMap[column.value]);\n    }\n\n    transformations.push({\n      id: transformsMap[oldOpts.transform],\n      options: opts\n    });\n  }\n\n  return transformations;\n};\n\nconst migrateTableStyleToOverride = style => {\n  var _style$thresholds;\n\n  const fieldMatcherId = /^\\/.*\\/$/.test(style.pattern) ? FieldMatcherID.byRegexp : FieldMatcherID.byName;\n  const override = {\n    matcher: {\n      id: fieldMatcherId,\n      options: style.pattern\n    },\n    properties: []\n  };\n\n  if (style.alias) {\n    override.properties.push({\n      id: 'displayName',\n      value: style.alias\n    });\n  }\n\n  if (style.unit) {\n    override.properties.push({\n      id: 'unit',\n      value: style.unit\n    });\n  }\n\n  if (style.decimals) {\n    override.properties.push({\n      id: 'decimals',\n      value: style.decimals\n    });\n  }\n\n  if (style.type === 'date') {\n    override.properties.push({\n      id: 'unit',\n      value: `time: ${style.dateFormat}`\n    });\n  }\n\n  if (style.link) {\n    override.properties.push({\n      id: 'links',\n      value: [{\n        title: defaultTo(style.linkTooltip, ''),\n        url: defaultTo(style.linkUrl, ''),\n        targetBlank: defaultTo(style.linkTargetBlank, false)\n      }]\n    });\n  }\n\n  if (style.colorMode) {\n    override.properties.push({\n      id: 'custom.displayMode',\n      value: colorModeMap[style.colorMode]\n    });\n  }\n\n  if (style.align) {\n    override.properties.push({\n      id: 'custom.align',\n      value: style.align === 'auto' ? null : style.align\n    });\n  }\n\n  if ((_style$thresholds = style.thresholds) !== null && _style$thresholds !== void 0 && _style$thresholds.length) {\n    override.properties.push({\n      id: 'thresholds',\n      value: {\n        mode: ThresholdsMode.Absolute,\n        steps: generateThresholds(style.thresholds, style.colors)\n      }\n    });\n  }\n\n  return override;\n};\n\nconst migrateDefaults = prevDefaults => {\n  let defaults = {\n    custom: {}\n  };\n\n  if (prevDefaults) {\n    defaults = omitBy({\n      unit: prevDefaults.unit,\n      decimals: prevDefaults.decimals,\n      displayName: prevDefaults.alias,\n      custom: {\n        align: prevDefaults.align === 'auto' ? null : prevDefaults.align,\n        displayMode: colorModeMap[prevDefaults.colorMode]\n      }\n    }, isNil);\n\n    if (prevDefaults.thresholds.length) {\n      const thresholds = {\n        mode: ThresholdsMode.Absolute,\n        steps: generateThresholds(prevDefaults.thresholds, prevDefaults.colors)\n      };\n      defaults.thresholds = thresholds;\n    }\n  }\n\n  return defaults;\n};\n/**\n * This is called when the panel changes from another panel\n */\n\n\nexport const tablePanelChangedHandler = (panel, prevPluginId, prevOptions) => {\n  // Changing from angular table panel\n  if (prevPluginId === 'table-old' && prevOptions.angular) {\n    const oldOpts = prevOptions.angular;\n    const transformations = migrateTransformations(panel, oldOpts);\n    const prevDefaults = oldOpts.styles.find(style => style.pattern === '/.*/');\n    const defaults = migrateDefaults(prevDefaults);\n    const overrides = oldOpts.styles.filter(style => style.pattern !== '/.*/').map(migrateTableStyleToOverride);\n    panel.transformations = transformations;\n    panel.fieldConfig = {\n      defaults,\n      overrides\n    };\n  }\n\n  return {};\n};","map":{"version":3,"names":["omitBy","isNil","isNumber","defaultTo","FieldMatcherID","ThresholdsMode","tableMigrationHandler","panel","pluginVersion","columns","console","log","options","transformsMap","timeseries_to_rows","timeseries_to_columns","timeseries_aggregations","table","columnsMap","avg","min","max","total","current","count","colorModeMap","cell","row","value","generateThresholds","thresholds","colors","Infinity","map","threshold","idx","color","parseInt","migrateTransformations","oldOpts","transformations","Object","keys","includes","transform","opts","reducers","includeTimeField","column","push","id","migrateTableStyleToOverride","style","fieldMatcherId","test","pattern","byRegexp","byName","override","matcher","properties","alias","unit","decimals","type","dateFormat","link","title","linkTooltip","url","linkUrl","targetBlank","linkTargetBlank","colorMode","align","length","mode","Absolute","steps","migrateDefaults","prevDefaults","defaults","custom","displayName","displayMode","tablePanelChangedHandler","prevPluginId","prevOptions","angular","styles","find","overrides","filter","fieldConfig"],"sources":["/home/soula/grafana/public/app/plugins/panel/table/migrations.ts"],"sourcesContent":["import { omitBy, isNil, isNumber, defaultTo } from 'lodash';\n\nimport {\n  PanelModel,\n  FieldMatcherID,\n  ConfigOverrideRule,\n  ThresholdsMode,\n  ThresholdsConfig,\n  FieldConfig,\n} from '@grafana/data';\nimport { ReduceTransformerOptions } from '@grafana/data/src/transformations/transformers/reduce';\n\nimport { PanelOptions } from './models.gen';\n\n/**\n * At 7.0, the `table` panel was swapped from an angular implementation to a react one.\n * The models do not match, so this process will delegate to the old implementation when\n * a saved table configuration exists.\n */\nexport const tableMigrationHandler = (panel: PanelModel<PanelOptions>): Partial<PanelOptions> => {\n  // Table was saved as an angular table, lets just swap to the 'table-old' panel\n  if (!panel.pluginVersion && (panel as any).columns) {\n    console.log('Was angular table', panel);\n  }\n\n  // Nothing changed\n  return panel.options;\n};\n\nconst transformsMap = {\n  timeseries_to_rows: 'seriesToRows',\n  timeseries_to_columns: 'seriesToColumns',\n  timeseries_aggregations: 'reduce',\n  table: 'merge',\n};\n\nconst columnsMap = {\n  avg: 'mean',\n  min: 'min',\n  max: 'max',\n  total: 'sum',\n  current: 'lastNotNull',\n  count: 'count',\n};\n\nconst colorModeMap = {\n  cell: 'color-background',\n  row: 'color-background',\n  value: 'color-text',\n};\n\ntype Transformations = keyof typeof transformsMap;\n\ntype Transformation = {\n  id: string;\n  options: ReduceTransformerOptions;\n};\n\ntype Columns = keyof typeof columnsMap;\n\ntype Column = {\n  value: Columns;\n  text: string;\n};\n\ntype ColorModes = keyof typeof colorModeMap;\n\nconst generateThresholds = (thresholds: string[], colors: string[]) => {\n  return [-Infinity, ...thresholds].map((threshold, idx) => ({\n    color: colors[idx],\n    value: isNumber(threshold) ? threshold : parseInt(threshold, 10),\n  }));\n};\n\nconst migrateTransformations = (\n  panel: PanelModel<Partial<PanelOptions>> | any,\n  oldOpts: { columns: any; transform: Transformations }\n) => {\n  const transformations: Transformation[] = panel.transformations ?? [];\n  if (Object.keys(transformsMap).includes(oldOpts.transform)) {\n    const opts: ReduceTransformerOptions = {\n      reducers: [],\n    };\n    if (oldOpts.transform === 'timeseries_aggregations') {\n      opts.includeTimeField = false;\n      opts.reducers = oldOpts.columns.map((column: Column) => columnsMap[column.value]);\n    }\n    transformations.push({\n      id: transformsMap[oldOpts.transform],\n      options: opts,\n    });\n  }\n  return transformations;\n};\n\ntype Style = {\n  unit: string;\n  type: string;\n  alias: string;\n  decimals: number;\n  colors: string[];\n  colorMode: ColorModes;\n  pattern: string;\n  thresholds: string[];\n  align?: string;\n  dateFormat: string;\n  link: boolean;\n  linkTargetBlank?: boolean;\n  linkTooltip?: string;\n  linkUrl?: string;\n};\n\nconst migrateTableStyleToOverride = (style: Style) => {\n  const fieldMatcherId = /^\\/.*\\/$/.test(style.pattern) ? FieldMatcherID.byRegexp : FieldMatcherID.byName;\n  const override: ConfigOverrideRule = {\n    matcher: {\n      id: fieldMatcherId,\n      options: style.pattern,\n    },\n    properties: [],\n  };\n\n  if (style.alias) {\n    override.properties.push({\n      id: 'displayName',\n      value: style.alias,\n    });\n  }\n\n  if (style.unit) {\n    override.properties.push({\n      id: 'unit',\n      value: style.unit,\n    });\n  }\n\n  if (style.decimals) {\n    override.properties.push({\n      id: 'decimals',\n      value: style.decimals,\n    });\n  }\n\n  if (style.type === 'date') {\n    override.properties.push({\n      id: 'unit',\n      value: `time: ${style.dateFormat}`,\n    });\n  }\n\n  if (style.link) {\n    override.properties.push({\n      id: 'links',\n      value: [\n        {\n          title: defaultTo(style.linkTooltip, ''),\n          url: defaultTo(style.linkUrl, ''),\n          targetBlank: defaultTo(style.linkTargetBlank, false),\n        },\n      ],\n    });\n  }\n\n  if (style.colorMode) {\n    override.properties.push({\n      id: 'custom.displayMode',\n      value: colorModeMap[style.colorMode],\n    });\n  }\n\n  if (style.align) {\n    override.properties.push({\n      id: 'custom.align',\n      value: style.align === 'auto' ? null : style.align,\n    });\n  }\n\n  if (style.thresholds?.length) {\n    override.properties.push({\n      id: 'thresholds',\n      value: {\n        mode: ThresholdsMode.Absolute,\n        steps: generateThresholds(style.thresholds, style.colors),\n      },\n    });\n  }\n\n  return override;\n};\n\nconst migrateDefaults = (prevDefaults: Style) => {\n  let defaults: FieldConfig = {\n    custom: {},\n  };\n  if (prevDefaults) {\n    defaults = omitBy(\n      {\n        unit: prevDefaults.unit,\n        decimals: prevDefaults.decimals,\n        displayName: prevDefaults.alias,\n        custom: {\n          align: prevDefaults.align === 'auto' ? null : prevDefaults.align,\n          displayMode: colorModeMap[prevDefaults.colorMode],\n        },\n      },\n      isNil\n    );\n    if (prevDefaults.thresholds.length) {\n      const thresholds: ThresholdsConfig = {\n        mode: ThresholdsMode.Absolute,\n        steps: generateThresholds(prevDefaults.thresholds, prevDefaults.colors),\n      };\n      defaults.thresholds = thresholds;\n    }\n  }\n  return defaults;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const tablePanelChangedHandler = (\n  panel: PanelModel<Partial<PanelOptions>> | any,\n  prevPluginId: string,\n  prevOptions: any\n) => {\n  // Changing from angular table panel\n  if (prevPluginId === 'table-old' && prevOptions.angular) {\n    const oldOpts = prevOptions.angular;\n    const transformations = migrateTransformations(panel, oldOpts);\n    const prevDefaults = oldOpts.styles.find((style: any) => style.pattern === '/.*/');\n    const defaults = migrateDefaults(prevDefaults);\n    const overrides = oldOpts.styles.filter((style: any) => style.pattern !== '/.*/').map(migrateTableStyleToOverride);\n\n    panel.transformations = transformations;\n    panel.fieldConfig = {\n      defaults,\n      overrides,\n    };\n  }\n\n  return {};\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}