{"ast":null,"code":"import { css } from '@emotion/css';\nimport { isString } from 'lodash';\nimport React, { useState } from 'react';\nimport { FieldType, getFieldDisplayName } from '@grafana/data';\nimport { Collapse, TabContent, useStyles2 } from '@grafana/ui';\nimport { DataHoverRow } from './DataHoverRow';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const DataHoverRows = ({\n  layers,\n  activeTabIndex\n}) => {\n  const styles = useStyles2(getStyles);\n  const [rowMap, setRowMap] = useState(new Map());\n\n  const updateRowMap = (key, value) => {\n    setRowMap(new Map(rowMap.set(key, value)));\n  };\n\n  return /*#__PURE__*/_jsx(TabContent, {\n    children: layers.map((geomapLayer, index) => index === activeTabIndex && /*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsx(\"div\", {\n        children: geomapLayer.features.map((feature, idx) => {\n          var _feature$getId;\n\n          const key = (_feature$getId = feature.getId()) !== null && _feature$getId !== void 0 ? _feature$getId : idx;\n          const shouldDisplayCollapse = geomapLayer.features.length > 1;\n          return shouldDisplayCollapse ? /*#__PURE__*/_jsx(Collapse, {\n            collapsible: true,\n            label: generateLabel(feature, idx),\n            isOpen: rowMap.get(key),\n            onToggle: () => {\n              updateRowMap(key, !rowMap.get(key));\n            },\n            className: styles.collapsibleRow,\n            children: /*#__PURE__*/_jsx(DataHoverRow, {\n              feature: feature\n            })\n          }, key) : /*#__PURE__*/_jsx(DataHoverRow, {\n            feature: feature\n          }, key);\n        })\n      })\n    }, geomapLayer.layer.getName()))\n  });\n};\nexport const generateLabel = (feature, idx) => {\n  const names = ['Name', 'name', 'Title', 'ID', 'id'];\n  let props = feature.getProperties();\n  let first = '';\n  const frame = feature.get('frame');\n\n  if (frame) {\n    const rowIndex = feature.get('rowIndex');\n\n    for (const f of frame.fields) {\n      if (f.type === FieldType.string) {\n        const k = getFieldDisplayName(f, frame);\n\n        if (!first) {\n          first = k;\n        }\n\n        props[k] = f.values.get(rowIndex);\n      }\n    }\n  }\n\n  for (let k of names) {\n    const v = props[k];\n\n    if (v) {\n      return v;\n    }\n  }\n\n  if (first) {\n    return `${first}: ${props[first]}`;\n  }\n\n  for (let k of Object.keys(props)) {\n    const v = props[k];\n\n    if (isString(v)) {\n      return `${k}: ${v}`;\n    }\n  }\n\n  return `Match: ${idx + 1}`;\n};\n\nconst getStyles = theme => ({\n  collapsibleRow: css`\n    margin-bottom: 0px;\n  `\n});","map":{"version":3,"names":["css","isString","React","useState","FieldType","getFieldDisplayName","Collapse","TabContent","useStyles2","DataHoverRow","DataHoverRows","layers","activeTabIndex","styles","getStyles","rowMap","setRowMap","Map","updateRowMap","key","value","set","map","geomapLayer","index","features","feature","idx","getId","shouldDisplayCollapse","length","generateLabel","get","collapsibleRow","layer","getName","names","props","getProperties","first","frame","rowIndex","f","fields","type","string","k","values","v","Object","keys","theme"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/components/DataHoverRows.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { isString } from 'lodash';\nimport { FeatureLike } from 'ol/Feature';\nimport React, { useState } from 'react';\n\nimport { DataFrame, FieldType, getFieldDisplayName, GrafanaTheme2 } from '@grafana/data';\nimport { Collapse, TabContent, useStyles2 } from '@grafana/ui';\n\nimport { GeomapLayerHover } from '../event';\n\nimport { DataHoverRow } from './DataHoverRow';\n\ntype Props = {\n  layers: GeomapLayerHover[];\n  activeTabIndex: number;\n};\n\nexport const DataHoverRows = ({ layers, activeTabIndex }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [rowMap, setRowMap] = useState(new Map<string | number, boolean>());\n\n  const updateRowMap = (key: string | number, value: boolean) => {\n    setRowMap(new Map(rowMap.set(key, value)));\n  };\n\n  return (\n    <TabContent>\n      {layers.map(\n        (geomapLayer, index) =>\n          index === activeTabIndex && (\n            <div key={geomapLayer.layer.getName()}>\n              <div>\n                {geomapLayer.features.map((feature, idx) => {\n                  const key = feature.getId() ?? idx;\n                  const shouldDisplayCollapse = geomapLayer.features.length > 1;\n\n                  return shouldDisplayCollapse ? (\n                    <Collapse\n                      key={key}\n                      collapsible\n                      label={generateLabel(feature, idx)}\n                      isOpen={rowMap.get(key)}\n                      onToggle={() => {\n                        updateRowMap(key, !rowMap.get(key));\n                      }}\n                      className={styles.collapsibleRow}\n                    >\n                      <DataHoverRow feature={feature} />\n                    </Collapse>\n                  ) : (\n                    <DataHoverRow key={key} feature={feature} />\n                  );\n                })}\n              </div>\n            </div>\n          )\n      )}\n    </TabContent>\n  );\n};\n\nexport const generateLabel = (feature: FeatureLike, idx: number): string => {\n  const names = ['Name', 'name', 'Title', 'ID', 'id'];\n  let props = feature.getProperties();\n  let first = '';\n  const frame = feature.get('frame') as DataFrame;\n  if (frame) {\n    const rowIndex = feature.get('rowIndex');\n    for (const f of frame.fields) {\n      if (f.type === FieldType.string) {\n        const k = getFieldDisplayName(f, frame);\n        if (!first) {\n          first = k;\n        }\n        props[k] = f.values.get(rowIndex);\n      }\n    }\n  }\n\n  for (let k of names) {\n    const v = props[k];\n    if (v) {\n      return v;\n    }\n  }\n\n  if (first) {\n    return `${first}: ${props[first]}`;\n  }\n\n  for (let k of Object.keys(props)) {\n    const v = props[k];\n    if (isString(v)) {\n      return `${k}: ${v}`;\n    }\n  }\n\n  return `Match: ${idx + 1}`;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapsibleRow: css`\n    margin-bottom: 0px;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}