{"ast":null,"code":"var _i, _span;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { renderMarkdown } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService, getTemplateSrv } from '@grafana/runtime';\nimport { Tooltip } from '@grafana/ui';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar InfoMode;\n\n(function (InfoMode) {\n  InfoMode[\"Error\"] = \"Error\";\n  InfoMode[\"Info\"] = \"Info\";\n  InfoMode[\"Links\"] = \"Links\";\n})(InfoMode || (InfoMode = {}));\n\nexport class PanelHeaderCorner extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"timeSrv\", getTimeSrv());\n\n    _defineProperty(this, \"getInfoMode\", () => {\n      const {\n        panel,\n        error\n      } = this.props;\n\n      if (error) {\n        return InfoMode.Error;\n      }\n\n      if (!!panel.description) {\n        return InfoMode.Info;\n      }\n\n      if (panel.links && panel.links.length) {\n        return InfoMode.Links;\n      }\n\n      return undefined;\n    });\n\n    _defineProperty(this, \"getInfoContent\", () => {\n      const {\n        panel\n      } = this.props;\n      const markdown = panel.description || '';\n      const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n      const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n      const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n      return /*#__PURE__*/_jsxs(\"div\", {\n        className: \"panel-info-content markdown-html\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: markedInterpolatedMarkdown\n          }\n        }), links && links.length > 0 && /*#__PURE__*/_jsx(\"ul\", {\n          className: \"panel-info-corner-links\",\n          children: links.map((link, idx) => {\n            return /*#__PURE__*/_jsx(\"li\", {\n              children: /*#__PURE__*/_jsx(\"a\", {\n                className: \"panel-info-corner-links__item\",\n                href: link.href,\n                target: link.target,\n                children: link.title\n              })\n            }, idx);\n          })\n        })]\n      });\n    });\n\n    _defineProperty(this, \"onClickError\", () => {\n      locationService.partial({\n        inspect: this.props.panel.id,\n        inspectTab: InspectTab.Error\n      });\n    });\n  }\n\n  renderCornerType(infoMode, content, onClick) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    const className = `panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`;\n    const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n    return /*#__PURE__*/_jsx(Tooltip, {\n      content: content,\n      placement: \"top-start\",\n      theme: theme,\n      interactive: true,\n      children: /*#__PURE__*/_jsxs(\"section\", {\n        className: className,\n        onClick: onClick,\n        \"aria-label\": ariaLabel,\n        children: [_i || (_i = /*#__PURE__*/_jsx(\"i\", {\n          \"aria-hidden\": true,\n          className: \"fa\"\n        })), _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n          className: \"panel-info-corner-inner\"\n        }))]\n      })\n    });\n  }\n\n  render() {\n    const {\n      error\n    } = this.props;\n    const infoMode = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n\n}\nexport default PanelHeaderCorner;","map":{"version":3,"names":["React","Component","renderMarkdown","selectors","locationService","getTemplateSrv","Tooltip","getTimeSrv","InspectTab","InfoMode","PanelHeaderCorner","panel","error","props","Error","description","Info","links","length","Links","undefined","markdown","interpolatedMarkdown","replace","scopedVars","markedInterpolatedMarkdown","getLinks","replaceVariables","__html","map","link","idx","href","target","title","partial","inspect","id","inspectTab","renderCornerType","infoMode","content","onClick","theme","className","toLowerCase","ariaLabel","components","Panels","Panel","headerCornerInfo","render","getInfoMode","onClickError","getInfoContent"],"sources":["/home/soula/grafana/public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderCorner.tsx"],"sourcesContent":["import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService, getTemplateSrv } from '@grafana/runtime';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { InspectTab } from 'app/features/inspector/types';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\nexport interface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: InspectTab.Error,\n    });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    const className = `panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`;\n    const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme} interactive>\n        <section className={className} onClick={onClick} aria-label={ariaLabel}>\n          <i aria-hidden className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </section>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,cAAT,QAA8D,eAA9D;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD;AACA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,UAAT,QAAoC,yCAApC;AAEA,SAASC,UAAT,QAA2B,8BAA3B;;;IAEKC,Q;;WAAAA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAeL,OAAO,MAAMC,iBAAN,SAAgCT,SAAhC,CAAiD;EAAA;IAAA;;IAAA,iCACnCM,UAAU,EADyB;;IAAA,qCAGxC,MAAM;MAClB,MAAM;QAAEI,KAAF;QAASC;MAAT,IAAmB,KAAKC,KAA9B;;MACA,IAAID,KAAJ,EAAW;QACT,OAAOH,QAAQ,CAACK,KAAhB;MACD;;MACD,IAAI,CAAC,CAACH,KAAK,CAACI,WAAZ,EAAyB;QACvB,OAAON,QAAQ,CAACO,IAAhB;MACD;;MACD,IAAIL,KAAK,CAACM,KAAN,IAAeN,KAAK,CAACM,KAAN,CAAYC,MAA/B,EAAuC;QACrC,OAAOT,QAAQ,CAACU,KAAhB;MACD;;MAED,OAAOC,SAAP;IACD,CAhBqD;;IAAA,wCAkBrC,MAAmB;MAClC,MAAM;QAAET;MAAF,IAAY,KAAKE,KAAvB;MACA,MAAMQ,QAAQ,GAAGV,KAAK,CAACI,WAAN,IAAqB,EAAtC;MACA,MAAMO,oBAAoB,GAAGjB,cAAc,GAAGkB,OAAjB,CAAyBF,QAAzB,EAAmCV,KAAK,CAACa,UAAzC,CAA7B;MACA,MAAMC,0BAA0B,GAAGvB,cAAc,CAACoB,oBAAD,CAAjD;MACA,MAAML,KAAK,GAAG,KAAKJ,KAAL,CAAWI,KAAX,IAAoB,KAAKJ,KAAL,CAAWI,KAAX,CAAiBS,QAAjB,CAA0Bf,KAAK,CAACgB,gBAAhC,CAAlC;MAEA,oBACE;QAAK,SAAS,EAAC,kCAAf;QAAA,wBACE;UAAK,uBAAuB,EAAE;YAAEC,MAAM,EAAEH;UAAV;QAA9B,EADF,EAGGR,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,CAAxB,iBACC;UAAI,SAAS,EAAC,yBAAd;UAAA,UACGD,KAAK,CAACY,GAAN,CAAU,CAACC,IAAD,EAAOC,GAAP,KAAe;YACxB,oBACE;cAAA,uBACE;gBAAG,SAAS,EAAC,+BAAb;gBAA6C,IAAI,EAAED,IAAI,CAACE,IAAxD;gBAA8D,MAAM,EAAEF,IAAI,CAACG,MAA3E;gBAAA,UACGH,IAAI,CAACI;cADR;YADF,GAASH,GAAT,CADF;UAOD,CARA;QADH,EAJJ;MAAA,EADF;IAmBD,CA5CqD;;IAAA,sCAiDvC,MAAM;MACnB3B,eAAe,CAAC+B,OAAhB,CAAwB;QACtBC,OAAO,EAAE,KAAKvB,KAAL,CAAWF,KAAX,CAAiB0B,EADJ;QAEtBC,UAAU,EAAE9B,UAAU,CAACM;MAFD,CAAxB;IAID,CAtDqD;EAAA;;EAwDtDyB,gBAAgB,CAACC,QAAD,EAAqBC,OAArB,EAA8CC,OAA9C,EAAoE;IAClF,MAAMC,KAAK,GAAGH,QAAQ,KAAK/B,QAAQ,CAACK,KAAtB,GAA8B,OAA9B,GAAwC,MAAtD;IACA,MAAM8B,SAAS,GAAI,wCAAuCJ,QAAQ,CAACK,WAAT,EAAuB,EAAjF;IACA,MAAMC,SAAS,GAAG3C,SAAS,CAAC4C,UAAV,CAAqBC,MAArB,CAA4BC,KAA5B,CAAkCC,gBAAlC,CAAmDV,QAAQ,CAACK,WAAT,EAAnD,CAAlB;IAEA,oBACE,KAAC,OAAD;MAAS,OAAO,EAAEJ,OAAlB;MAA2B,SAAS,EAAC,WAArC;MAAiD,KAAK,EAAEE,KAAxD;MAA+D,WAAW,MAA1E;MAAA,uBACE;QAAS,SAAS,EAAEC,SAApB;QAA+B,OAAO,EAAEF,OAAxC;QAAiD,cAAYI,SAA7D;QAAA,oCACE;UAAG,mBAAH;UAAe,SAAS,EAAC;QAAzB,EADF,kCAEE;UAAM,SAAS,EAAC;QAAhB,EAFF;MAAA;IADF,EADF;EAQD;;EAEDK,MAAM,GAAG;IACP,MAAM;MAAEvC;IAAF,IAAY,KAAKC,KAAvB;IACA,MAAM2B,QAA8B,GAAG,KAAKY,WAAL,EAAvC;;IAEA,IAAI,CAACZ,QAAL,EAAe;MACb,OAAO,IAAP;IACD;;IAED,IAAIA,QAAQ,KAAK/B,QAAQ,CAACK,KAAtB,IAA+BF,KAAnC,EAA0C;MACxC,OAAO,KAAK2B,gBAAL,CAAsBC,QAAtB,EAAgC5B,KAAhC,EAAuC,KAAKyC,YAA5C,CAAP;IACD;;IAED,IAAIb,QAAQ,KAAK/B,QAAQ,CAACO,IAAtB,IAA8BwB,QAAQ,KAAK/B,QAAQ,CAACU,KAAxD,EAA+D;MAC7D,OAAO,KAAKoB,gBAAL,CAAsBC,QAAtB,EAAgC,KAAKc,cAArC,CAAP;IACD;;IAED,OAAO,IAAP;EACD;;AAxFqD;AA2FxD,eAAe5C,iBAAf"},"metadata":{},"sourceType":"module"}