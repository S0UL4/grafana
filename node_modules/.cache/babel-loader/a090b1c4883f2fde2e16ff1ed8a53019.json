{"ast":null,"code":"var _p, _p2;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { Button, Field, Form, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { PasswordField } from '../../core/components/PasswordField/PasswordField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const ChangePasswordForm = ({\n  user,\n  onChangePassword,\n  isSaving\n}) => {\n  var _user$authLabels, _Button;\n\n  const {\n    ldapEnabled,\n    authProxyEnabled,\n    disableLoginForm\n  } = config;\n  const authSource = ((_user$authLabels = user.authLabels) === null || _user$authLabels === void 0 ? void 0 : _user$authLabels.length) && user.authLabels[0];\n\n  if (ldapEnabled || authProxyEnabled) {\n    return _p || (_p = /*#__PURE__*/_jsx(\"p\", {\n      children: \"You cannot change password when LDAP or auth proxy authentication is enabled.\"\n    }));\n  }\n\n  if (authSource && disableLoginForm) {\n    return _p2 || (_p2 = /*#__PURE__*/_jsx(\"p\", {\n      children: \"Password cannot be changed here.\"\n    }));\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: css`\n        max-width: 400px;\n      `,\n    children: /*#__PURE__*/_jsx(Form, {\n      onSubmit: onChangePassword,\n      children: ({\n        register,\n        errors,\n        getValues\n      }) => {\n        var _errors$oldPassword, _errors$newPassword, _errors$confirmNew;\n\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(Field, {\n            label: \"Old password\",\n            invalid: !!errors.oldPassword,\n            error: errors === null || errors === void 0 ? void 0 : (_errors$oldPassword = errors.oldPassword) === null || _errors$oldPassword === void 0 ? void 0 : _errors$oldPassword.message,\n            children: /*#__PURE__*/_jsx(PasswordField, Object.assign({\n              id: \"current-password\",\n              autoComplete: \"current-password\"\n            }, register('oldPassword', {\n              required: 'Old password is required'\n            })))\n          }), /*#__PURE__*/_jsx(Field, {\n            label: \"New password\",\n            invalid: !!errors.newPassword,\n            error: errors === null || errors === void 0 ? void 0 : (_errors$newPassword = errors.newPassword) === null || _errors$newPassword === void 0 ? void 0 : _errors$newPassword.message,\n            children: /*#__PURE__*/_jsx(PasswordField, Object.assign({\n              id: \"new-password\",\n              autoComplete: \"new-password\"\n            }, register('newPassword', {\n              required: 'New password is required',\n              validate: {\n                confirm: v => v === getValues().confirmNew || 'Passwords must match',\n                old: v => v !== getValues().oldPassword || `New password can't be the same as the old one.`\n              }\n            })))\n          }), /*#__PURE__*/_jsx(Field, {\n            label: \"Confirm password\",\n            invalid: !!errors.confirmNew,\n            error: errors === null || errors === void 0 ? void 0 : (_errors$confirmNew = errors.confirmNew) === null || _errors$confirmNew === void 0 ? void 0 : _errors$confirmNew.message,\n            children: /*#__PURE__*/_jsx(PasswordField, Object.assign({\n              id: \"confirm-new-password\",\n              autoComplete: \"new-password\"\n            }, register('confirmNew', {\n              required: 'New password confirmation is required',\n              validate: v => v === getValues().newPassword || 'Passwords must match'\n            })))\n          }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n            children: [_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n              variant: \"primary\",\n              disabled: isSaving,\n              type: \"submit\",\n              children: \"Change Password\"\n            })), /*#__PURE__*/_jsx(LinkButton, {\n              variant: \"secondary\",\n              href: `${config.appSubUrl}/profile`,\n              fill: \"outline\",\n              children: \"Cancel\"\n            })]\n          })]\n        });\n      }\n    })\n  });\n};","map":{"version":3,"names":["css","React","Button","Field","Form","HorizontalGroup","LinkButton","config","PasswordField","ChangePasswordForm","user","onChangePassword","isSaving","ldapEnabled","authProxyEnabled","disableLoginForm","authSource","authLabels","length","register","errors","getValues","oldPassword","message","required","newPassword","validate","confirm","v","confirmNew","old","appSubUrl"],"sources":["/home/soula/grafana/public/app/features/profile/ChangePasswordForm.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { Button, Field, Form, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { UserDTO } from 'app/types';\n\nimport { PasswordField } from '../../core/components/PasswordField/PasswordField';\n\nimport { ChangePasswordFields } from './types';\n\nexport interface Props {\n  user: UserDTO;\n  isSaving: boolean;\n  onChangePassword: (payload: ChangePasswordFields) => void;\n}\n\nexport const ChangePasswordForm: FC<Props> = ({ user, onChangePassword, isSaving }) => {\n  const { ldapEnabled, authProxyEnabled, disableLoginForm } = config;\n  const authSource = user.authLabels?.length && user.authLabels[0];\n\n  if (ldapEnabled || authProxyEnabled) {\n    return <p>You cannot change password when LDAP or auth proxy authentication is enabled.</p>;\n  }\n  if (authSource && disableLoginForm) {\n    return <p>Password cannot be changed here.</p>;\n  }\n\n  return (\n    <div\n      className={css`\n        max-width: 400px;\n      `}\n    >\n      <Form onSubmit={onChangePassword}>\n        {({ register, errors, getValues }) => {\n          return (\n            <>\n              <Field label=\"Old password\" invalid={!!errors.oldPassword} error={errors?.oldPassword?.message}>\n                <PasswordField\n                  id=\"current-password\"\n                  autoComplete=\"current-password\"\n                  {...register('oldPassword', { required: 'Old password is required' })}\n                />\n              </Field>\n\n              <Field label=\"New password\" invalid={!!errors.newPassword} error={errors?.newPassword?.message}>\n                <PasswordField\n                  id=\"new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('newPassword', {\n                    required: 'New password is required',\n                    validate: {\n                      confirm: (v) => v === getValues().confirmNew || 'Passwords must match',\n                      old: (v) => v !== getValues().oldPassword || `New password can't be the same as the old one.`,\n                    },\n                  })}\n                />\n              </Field>\n\n              <Field label=\"Confirm password\" invalid={!!errors.confirmNew} error={errors?.confirmNew?.message}>\n                <PasswordField\n                  id=\"confirm-new-password\"\n                  autoComplete=\"new-password\"\n                  {...register('confirmNew', {\n                    required: 'New password confirmation is required',\n                    validate: (v) => v === getValues().newPassword || 'Passwords must match',\n                  })}\n                />\n              </Field>\n              <HorizontalGroup>\n                <Button variant=\"primary\" disabled={isSaving} type=\"submit\">\n                  Change Password\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/profile`} fill=\"outline\">\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}