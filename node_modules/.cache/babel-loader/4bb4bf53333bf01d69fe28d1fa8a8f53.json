{"ast":null,"code":"var _h;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { config } from '@grafana/runtime';\nimport { Form } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { NotificationChannelForm } from './components/NotificationChannelForm';\nimport { createNotificationChannel, loadNotificationTypes, testNotificationChannel } from './state/actions';\nimport { resetSecureField } from './state/reducers';\nimport { defaultValues, mapChannelsToSelectableValue, transformSubmitData, transformTestData } from './utils/notificationChannels';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nclass NewNotificationChannelPage extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onSubmit\", data => {\n      this.props.createNotificationChannel(transformSubmitData(Object.assign({}, defaultValues, data)));\n    });\n\n    _defineProperty(this, \"onTestChannel\", data => {\n      this.props.testNotificationChannel(transformTestData(Object.assign({}, defaultValues, data)));\n    });\n  }\n\n  componentDidMount() {\n    this.props.loadNotificationTypes();\n  }\n\n  render() {\n    const {\n      navModel,\n      notificationChannelTypes\n    } = this.props;\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: navModel,\n      children: /*#__PURE__*/_jsxs(Page.Contents, {\n        children: [_h || (_h = /*#__PURE__*/_jsx(\"h2\", {\n          className: \"page-sub-heading\",\n          children: \"New notification channel\"\n        })), /*#__PURE__*/_jsx(Form, {\n          onSubmit: this.onSubmit,\n          validateOn: \"onChange\",\n          defaultValues: defaultValues,\n          maxWidth: 600,\n          children: ({\n            register,\n            errors,\n            control,\n            getValues,\n            watch\n          }) => {\n            const selectedChannel = notificationChannelTypes.find(c => c.value === getValues().type.value);\n            return /*#__PURE__*/_jsx(NotificationChannelForm, {\n              selectableChannels: mapChannelsToSelectableValue(notificationChannelTypes, true),\n              selectedChannel: selectedChannel,\n              onTestChannel: this.onTestChannel,\n              register: register,\n              errors: errors,\n              getValues: getValues,\n              control: control,\n              watch: watch,\n              imageRendererAvailable: config.rendererAvailable,\n              resetSecureField: this.props.resetSecureField,\n              secureFields: {}\n            });\n          }\n        })]\n      })\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  navModel: getNavModel(state.navIndex, 'channels'),\n  notificationChannelTypes: state.notificationChannel.notificationChannelTypes\n});\n\nconst mapDispatchToProps = {\n  createNotificationChannel,\n  loadNotificationTypes,\n  testNotificationChannel,\n  resetSecureField\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connector(NewNotificationChannelPage);","map":{"version":3,"names":["React","PureComponent","connect","config","Form","Page","getNavModel","NotificationChannelForm","createNotificationChannel","loadNotificationTypes","testNotificationChannel","resetSecureField","defaultValues","mapChannelsToSelectableValue","transformSubmitData","transformTestData","NewNotificationChannelPage","data","props","componentDidMount","render","navModel","notificationChannelTypes","onSubmit","register","errors","control","getValues","watch","selectedChannel","find","c","value","type","onTestChannel","rendererAvailable","mapStateToProps","state","navIndex","notificationChannel","mapDispatchToProps","connector"],"sources":["/home/soula/grafana/public/app/features/alerting/NewNotificationChannelPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { config } from '@grafana/runtime';\nimport { Form } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nimport { NotificationChannelDTO, StoreState } from '../../types';\n\nimport { NotificationChannelForm } from './components/NotificationChannelForm';\nimport { createNotificationChannel, loadNotificationTypes, testNotificationChannel } from './state/actions';\nimport { resetSecureField } from './state/reducers';\nimport {\n  defaultValues,\n  mapChannelsToSelectableValue,\n  transformSubmitData,\n  transformTestData,\n} from './utils/notificationChannels';\n\nclass NewNotificationChannelPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadNotificationTypes();\n  }\n\n  onSubmit = (data: NotificationChannelDTO) => {\n    this.props.createNotificationChannel(transformSubmitData({ ...defaultValues, ...data }));\n  };\n\n  onTestChannel = (data: NotificationChannelDTO) => {\n    this.props.testNotificationChannel(transformTestData({ ...defaultValues, ...data }));\n  };\n\n  render() {\n    const { navModel, notificationChannelTypes } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <h2 className=\"page-sub-heading\">New notification channel</h2>\n          <Form onSubmit={this.onSubmit} validateOn=\"onChange\" defaultValues={defaultValues} maxWidth={600}>\n            {({ register, errors, control, getValues, watch }) => {\n              const selectedChannel = notificationChannelTypes.find((c) => c.value === getValues().type.value);\n\n              return (\n                <NotificationChannelForm\n                  selectableChannels={mapChannelsToSelectableValue(notificationChannelTypes, true)}\n                  selectedChannel={selectedChannel}\n                  onTestChannel={this.onTestChannel}\n                  register={register}\n                  errors={errors}\n                  getValues={getValues}\n                  control={control}\n                  watch={watch}\n                  imageRendererAvailable={config.rendererAvailable}\n                  resetSecureField={this.props.resetSecureField}\n                  secureFields={{}}\n                />\n              );\n            }}\n          </Form>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'channels'),\n  notificationChannelTypes: state.notificationChannel.notificationChannelTypes,\n});\n\nconst mapDispatchToProps = {\n  createNotificationChannel,\n  loadNotificationTypes,\n  testNotificationChannel,\n  resetSecureField,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = ConnectedProps<typeof connector>;\nexport default connector(NewNotificationChannelPage);\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwC,aAAxC;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAIA,SAASC,uBAAT,QAAwC,sCAAxC;AACA,SAASC,yBAAT,EAAoCC,qBAApC,EAA2DC,uBAA3D,QAA0F,iBAA1F;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SACEC,aADF,EAEEC,4BAFF,EAGEC,mBAHF,EAIEC,iBAJF,QAKO,8BALP;;;;AAOA,MAAMC,0BAAN,SAAyCf,aAAzC,CAA8D;EAAA;IAAA;;IAAA,kCAKhDgB,IAAD,IAAkC;MAC3C,KAAKC,KAAL,CAAWV,yBAAX,CAAqCM,mBAAmB,mBAAMF,aAAN,EAAwBK,IAAxB,EAAxD;IACD,CAP2D;;IAAA,uCAS3CA,IAAD,IAAkC;MAChD,KAAKC,KAAL,CAAWR,uBAAX,CAAmCK,iBAAiB,mBAAMH,aAAN,EAAwBK,IAAxB,EAApD;IACD,CAX2D;EAAA;;EAC5DE,iBAAiB,GAAG;IAClB,KAAKD,KAAL,CAAWT,qBAAX;EACD;;EAUDW,MAAM,GAAG;IACP,MAAM;MAAEC,QAAF;MAAYC;IAAZ,IAAyC,KAAKJ,KAApD;IAEA,oBACE,KAAC,IAAD;MAAM,QAAQ,EAAEG,QAAhB;MAAA,uBACE,MAAC,IAAD,CAAM,QAAN;QAAA,oCACE;UAAI,SAAS,EAAC,kBAAd;UAAA;QAAA,EADF,gBAEE,KAAC,IAAD;UAAM,QAAQ,EAAE,KAAKE,QAArB;UAA+B,UAAU,EAAC,UAA1C;UAAqD,aAAa,EAAEX,aAApE;UAAmF,QAAQ,EAAE,GAA7F;UAAA,UACG,CAAC;YAAEY,QAAF;YAAYC,MAAZ;YAAoBC,OAApB;YAA6BC,SAA7B;YAAwCC;UAAxC,CAAD,KAAqD;YACpD,MAAMC,eAAe,GAAGP,wBAAwB,CAACQ,IAAzB,CAA+BC,CAAD,IAAOA,CAAC,CAACC,KAAF,KAAYL,SAAS,GAAGM,IAAZ,CAAiBD,KAAlE,CAAxB;YAEA,oBACE,KAAC,uBAAD;cACE,kBAAkB,EAAEnB,4BAA4B,CAACS,wBAAD,EAA2B,IAA3B,CADlD;cAEE,eAAe,EAAEO,eAFnB;cAGE,aAAa,EAAE,KAAKK,aAHtB;cAIE,QAAQ,EAAEV,QAJZ;cAKE,MAAM,EAAEC,MALV;cAME,SAAS,EAAEE,SANb;cAOE,OAAO,EAAED,OAPX;cAQE,KAAK,EAAEE,KART;cASE,sBAAsB,EAAEzB,MAAM,CAACgC,iBATjC;cAUE,gBAAgB,EAAE,KAAKjB,KAAL,CAAWP,gBAV/B;cAWE,YAAY,EAAE;YAXhB,EADF;UAeD;QAnBH,EAFF;MAAA;IADF,EADF;EA4BD;;AA5C2D;;AA+C9D,MAAMyB,eAAe,GAAIC,KAAD,KAAwB;EAC9ChB,QAAQ,EAAEf,WAAW,CAAC+B,KAAK,CAACC,QAAP,EAAiB,UAAjB,CADyB;EAE9ChB,wBAAwB,EAAEe,KAAK,CAACE,mBAAN,CAA0BjB;AAFN,CAAxB,CAAxB;;AAKA,MAAMkB,kBAAkB,GAAG;EACzBhC,yBADyB;EAEzBC,qBAFyB;EAGzBC,uBAHyB;EAIzBC;AAJyB,CAA3B;AAOA,MAAM8B,SAAS,GAAGvC,OAAO,CAACkC,eAAD,EAAkBI,kBAAlB,CAAzB;AAEA,eAAeC,SAAS,CAACzB,0BAAD,CAAxB"},"metadata":{},"sourceType":"module"}