{"ast":null,"code":"var _CollapseLabel, _VerticalGroup, _NoUnknowns, _span, _thead;\n\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { reportInteraction } from '@grafana/runtime';\nimport { CollapsableSection, HorizontalGroup, Icon, Spinner, Tooltip, useStyles, VerticalGroup } from '@grafana/ui';\nimport { VariablesUnknownButton } from './VariablesUnknownButton';\nimport { getUnknownsNetwork } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const SLOW_VARIABLES_EXPANSION_THRESHOLD = 1000;\nexport function VariablesUnknownTable({\n  variables,\n  dashboard\n}) {\n  const [open, setOpen] = useState(false);\n  const [changed, setChanged] = useState(0);\n  const [usages, setUsages] = useState([]);\n  const style = useStyles(getStyles);\n  useEffect(() => setChanged(prevState => prevState + 1), [variables, dashboard]);\n  const {\n    loading\n  } = useAsync(async () => {\n    if (open && changed > 0) {\n      // make sure we only fetch when opened and variables or dashboard have changed\n      const start = Date.now();\n      const unknownsNetwork = await getUnknownsNetwork(variables, dashboard);\n      const stop = Date.now();\n      const elapsed = stop - start;\n\n      if (elapsed >= SLOW_VARIABLES_EXPANSION_THRESHOLD) {\n        reportInteraction('Slow unknown variables expansion', {\n          elapsed\n        });\n      }\n\n      setChanged(0);\n      setUsages(unknownsNetwork);\n      return unknownsNetwork;\n    }\n\n    return [];\n  }, [variables, dashboard, open, changed]);\n\n  const onToggle = isOpen => {\n    if (isOpen) {\n      reportInteraction('Unknown variables section expanded');\n    }\n\n    setOpen(isOpen);\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: style.container,\n    children: /*#__PURE__*/_jsxs(CollapsableSection, {\n      label: _CollapseLabel || (_CollapseLabel = /*#__PURE__*/_jsx(CollapseLabel, {})),\n      isOpen: open,\n      onToggle: onToggle,\n      children: [loading && (_VerticalGroup || (_VerticalGroup = /*#__PURE__*/_jsx(VerticalGroup, {\n        justify: \"center\",\n        children: /*#__PURE__*/_jsxs(HorizontalGroup, {\n          justify: \"center\",\n          children: [/*#__PURE__*/_jsx(\"span\", {\n            children: \"Loading...\"\n          }), /*#__PURE__*/_jsx(Spinner, {\n            size: 16\n          })]\n        })\n      }))), !loading && usages && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [usages.length === 0 && (_NoUnknowns || (_NoUnknowns = /*#__PURE__*/_jsx(NoUnknowns, {}))), usages.length > 0 && /*#__PURE__*/_jsx(UnknownTable, {\n          usages: usages\n        })]\n      })]\n    })\n  });\n}\n\nfunction CollapseLabel() {\n  const style = useStyles(getStyles);\n  return /*#__PURE__*/_jsxs(\"h5\", {\n    children: [\"Renamed or missing variables\", /*#__PURE__*/_jsx(Tooltip, {\n      content: \"Click to expand a list with all variable references that have been renamed or are missing from the dashboard.\",\n      children: /*#__PURE__*/_jsx(Icon, {\n        name: \"info-circle\",\n        className: style.infoIcon\n      })\n    })]\n  });\n}\n\nfunction NoUnknowns() {\n  return _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n    children: \"No renamed or missing variables found.\"\n  }));\n}\n\nfunction UnknownTable({\n  usages\n}) {\n  const style = useStyles(getStyles);\n  return /*#__PURE__*/_jsxs(\"table\", {\n    className: \"filter-table filter-table--hover\",\n    children: [_thead || (_thead = /*#__PURE__*/_jsx(\"thead\", {\n      children: /*#__PURE__*/_jsxs(\"tr\", {\n        children: [/*#__PURE__*/_jsx(\"th\", {\n          children: \"Variable\"\n        }), /*#__PURE__*/_jsx(\"th\", {\n          colSpan: 5\n        })]\n      })\n    })), /*#__PURE__*/_jsx(\"tbody\", {\n      children: usages.map(usage => {\n        const {\n          variable\n        } = usage;\n        const {\n          id,\n          name\n        } = variable;\n        return /*#__PURE__*/_jsxs(\"tr\", {\n          children: [/*#__PURE__*/_jsx(\"td\", {\n            className: style.firstColumn,\n            children: /*#__PURE__*/_jsx(\"span\", {\n              children: name\n            })\n          }), /*#__PURE__*/_jsx(\"td\", {\n            className: style.defaultColumn\n          }), /*#__PURE__*/_jsx(\"td\", {\n            className: style.defaultColumn\n          }), /*#__PURE__*/_jsx(\"td\", {\n            className: style.defaultColumn\n          }), /*#__PURE__*/_jsx(\"td\", {\n            className: style.lastColumn,\n            children: /*#__PURE__*/_jsx(VariablesUnknownButton, {\n              id: variable.id,\n              usages: usages\n            })\n          })]\n        }, id);\n      })\n    })]\n  });\n}\n\nconst getStyles = theme => ({\n  container: css`\n    margin-top: ${theme.spacing.xl};\n    padding-top: ${theme.spacing.xl};\n  `,\n  infoIcon: css`\n    margin-left: ${theme.spacing.sm};\n  `,\n  defaultColumn: css`\n    width: 1%;\n  `,\n  firstColumn: css`\n    width: 1%;\n    vertical-align: top;\n    color: ${theme.colors.textStrong};\n  `,\n  lastColumn: css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 100%;\n    text-align: right;\n  `\n});","map":{"version":3,"names":["css","React","useEffect","useState","useAsync","reportInteraction","CollapsableSection","HorizontalGroup","Icon","Spinner","Tooltip","useStyles","VerticalGroup","VariablesUnknownButton","getUnknownsNetwork","SLOW_VARIABLES_EXPANSION_THRESHOLD","VariablesUnknownTable","variables","dashboard","open","setOpen","changed","setChanged","usages","setUsages","style","getStyles","prevState","loading","start","Date","now","unknownsNetwork","stop","elapsed","onToggle","isOpen","container","length","CollapseLabel","infoIcon","NoUnknowns","UnknownTable","map","usage","variable","id","name","firstColumn","defaultColumn","lastColumn","theme","spacing","xl","sm","colors","textStrong"],"sources":["/home/soula/grafana/public/app/features/variables/inspect/VariablesUnknownTable.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { CollapsableSection, HorizontalGroup, Icon, Spinner, Tooltip, useStyles, VerticalGroup } from '@grafana/ui';\n\nimport { DashboardModel } from '../../dashboard/state';\nimport { VariableModel } from '../types';\n\nimport { VariablesUnknownButton } from './VariablesUnknownButton';\nimport { getUnknownsNetwork, UsagesToNetwork } from './utils';\n\nexport const SLOW_VARIABLES_EXPANSION_THRESHOLD = 1000;\n\nexport interface VariablesUnknownTableProps {\n  variables: VariableModel[];\n  dashboard: DashboardModel | null;\n}\n\nexport function VariablesUnknownTable({ variables, dashboard }: VariablesUnknownTableProps): ReactElement {\n  const [open, setOpen] = useState(false);\n  const [changed, setChanged] = useState(0);\n  const [usages, setUsages] = useState<UsagesToNetwork[]>([]);\n  const style = useStyles(getStyles);\n  useEffect(() => setChanged((prevState) => prevState + 1), [variables, dashboard]);\n  const { loading } = useAsync(async () => {\n    if (open && changed > 0) {\n      // make sure we only fetch when opened and variables or dashboard have changed\n      const start = Date.now();\n      const unknownsNetwork = await getUnknownsNetwork(variables, dashboard);\n      const stop = Date.now();\n      const elapsed = stop - start;\n      if (elapsed >= SLOW_VARIABLES_EXPANSION_THRESHOLD) {\n        reportInteraction('Slow unknown variables expansion', { elapsed });\n      }\n      setChanged(0);\n      setUsages(unknownsNetwork);\n      return unknownsNetwork;\n    }\n\n    return [];\n  }, [variables, dashboard, open, changed]);\n\n  const onToggle = (isOpen: boolean) => {\n    if (isOpen) {\n      reportInteraction('Unknown variables section expanded');\n    }\n\n    setOpen(isOpen);\n  };\n\n  return (\n    <div className={style.container}>\n      <CollapsableSection label={<CollapseLabel />} isOpen={open} onToggle={onToggle}>\n        {loading && (\n          <VerticalGroup justify=\"center\">\n            <HorizontalGroup justify=\"center\">\n              <span>Loading...</span>\n              <Spinner size={16} />\n            </HorizontalGroup>\n          </VerticalGroup>\n        )}\n        {!loading && usages && (\n          <>\n            {usages.length === 0 && <NoUnknowns />}\n            {usages.length > 0 && <UnknownTable usages={usages} />}\n          </>\n        )}\n      </CollapsableSection>\n    </div>\n  );\n}\n\nfunction CollapseLabel(): ReactElement {\n  const style = useStyles(getStyles);\n  return (\n    <h5>\n      Renamed or missing variables\n      <Tooltip content=\"Click to expand a list with all variable references that have been renamed or are missing from the dashboard.\">\n        <Icon name=\"info-circle\" className={style.infoIcon} />\n      </Tooltip>\n    </h5>\n  );\n}\n\nfunction NoUnknowns(): ReactElement {\n  return <span>No renamed or missing variables found.</span>;\n}\n\nfunction UnknownTable({ usages }: { usages: UsagesToNetwork[] }): ReactElement {\n  const style = useStyles(getStyles);\n  return (\n    <table className=\"filter-table filter-table--hover\">\n      <thead>\n        <tr>\n          <th>Variable</th>\n          <th colSpan={5} />\n        </tr>\n      </thead>\n      <tbody>\n        {usages.map((usage) => {\n          const { variable } = usage;\n          const { id, name } = variable;\n          return (\n            <tr key={id}>\n              <td className={style.firstColumn}>\n                <span>{name}</span>\n              </td>\n              <td className={style.defaultColumn} />\n              <td className={style.defaultColumn} />\n              <td className={style.defaultColumn} />\n              <td className={style.lastColumn}>\n                <VariablesUnknownButton id={variable.id} usages={usages} />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  container: css`\n    margin-top: ${theme.spacing.xl};\n    padding-top: ${theme.spacing.xl};\n  `,\n  infoIcon: css`\n    margin-left: ${theme.spacing.sm};\n  `,\n  defaultColumn: css`\n    width: 1%;\n  `,\n  firstColumn: css`\n    width: 1%;\n    vertical-align: top;\n    color: ${theme.colors.textStrong};\n  `,\n  lastColumn: css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    width: 100%;\n    text-align: right;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}