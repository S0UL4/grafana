{"ast":null,"code":"var _h;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, TagsInput, useStyles, InlineSwitch } from '@grafana/ui';\nimport KeyValueInput from './KeyValueInput';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function TraceToLogsSettings({\n  options,\n  onOptionsChange\n}) {\n  var _options$jsonData$tra, _options$jsonData$tra3, _ref, _options$jsonData$tra4, _options$jsonData$tra5, _options$jsonData$tra6, _options$jsonData$tra7, _options$jsonData$tra8, _options$jsonData$tra9, _options$jsonData$tra10, _options$jsonData$tra11, _options$jsonData$tra12, _options$jsonData$tra13, _options$jsonData$tra14;\n\n  const styles = useStyles(getStyles);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: css({\n      width: '100%'\n    }),\n    children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n      className: \"page-heading\",\n      children: \"Trace to logs\"\n    })), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.infoText,\n      children: \"Trace to logs lets you navigate from a trace span to the selected data source's logs.\"\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        tooltip: \"The data source the trace is going to navigate to\",\n        label: \"Data source\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(DataSourcePicker, {\n          inputId: \"trace-to-logs-data-source-picker\",\n          filter: ds => {\n            // Trace to logs only supports loki and splunk at the moment\n            return ds.type === 'loki' || ds.type === 'grafana-splunk-datasource';\n          },\n          current: (_options$jsonData$tra = options.jsonData.tracesToLogs) === null || _options$jsonData$tra === void 0 ? void 0 : _options$jsonData$tra.datasourceUid,\n          noDefault: true,\n          width: 40,\n          onChange: ds => {\n            var _options$jsonData$tra2;\n\n            return updateDatasourcePluginJsonDataOption({\n              onOptionsChange,\n              options\n            }, 'tracesToLogs', Object.assign({}, options.jsonData.tracesToLogs, {\n              datasourceUid: ds.uid,\n              tags: (_options$jsonData$tra2 = options.jsonData.tracesToLogs) === null || _options$jsonData$tra2 === void 0 ? void 0 : _options$jsonData$tra2.tags\n            }));\n          }\n        })\n      })\n    }), (_options$jsonData$tra3 = options.jsonData.tracesToLogs) !== null && _options$jsonData$tra3 !== void 0 && _options$jsonData$tra3.mapTagNamesEnabled ? /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        tooltip: \"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\",\n        label: \"Tags\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(KeyValueInput, {\n          keyPlaceholder: \"Tag\",\n          values: (_ref = (_options$jsonData$tra4 = (_options$jsonData$tra5 = options.jsonData.tracesToLogs) === null || _options$jsonData$tra5 === void 0 ? void 0 : _options$jsonData$tra5.mappedTags) !== null && _options$jsonData$tra4 !== void 0 ? _options$jsonData$tra4 : (_options$jsonData$tra6 = options.jsonData.tracesToLogs) === null || _options$jsonData$tra6 === void 0 ? void 0 : (_options$jsonData$tra7 = _options$jsonData$tra6.tags) === null || _options$jsonData$tra7 === void 0 ? void 0 : _options$jsonData$tra7.map(tag => ({\n            key: tag\n          }))) !== null && _ref !== void 0 ? _ref : [],\n          onChange: v => updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToLogs', Object.assign({}, options.jsonData.tracesToLogs, {\n            mappedTags: v\n          }))\n        })\n      })\n    }) : /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        tooltip: \"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\",\n        label: \"Tags\",\n        labelWidth: 26,\n        children: /*#__PURE__*/_jsx(TagsInput, {\n          tags: (_options$jsonData$tra8 = options.jsonData.tracesToLogs) === null || _options$jsonData$tra8 === void 0 ? void 0 : _options$jsonData$tra8.tags,\n          width: 40,\n          onChange: tags => updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToLogs', Object.assign({}, options.jsonData.tracesToLogs, {\n            tags: tags\n          }))\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Map tag names\",\n        labelWidth: 26,\n        grow: true,\n        tooltip: \"Map trace tag names to log label names. Ex: k8s.pod.name -> pod\",\n        children: /*#__PURE__*/_jsx(InlineSwitch, {\n          id: \"mapTagNames\",\n          value: (_options$jsonData$tra9 = (_options$jsonData$tra10 = options.jsonData.tracesToLogs) === null || _options$jsonData$tra10 === void 0 ? void 0 : _options$jsonData$tra10.mapTagNamesEnabled) !== null && _options$jsonData$tra9 !== void 0 ? _options$jsonData$tra9 : false,\n          onChange: event => updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToLogs', Object.assign({}, options.jsonData.tracesToLogs, {\n            mapTagNamesEnabled: event.currentTarget.checked\n          }))\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Span start time shift\",\n        labelWidth: 26,\n        grow: true,\n        tooltip: \"Shifts the start time of the span. Default 0 (Time units can be used here, for example: 5s, 1m, 3h)\",\n        children: /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          placeholder: \"1h\",\n          width: 40,\n          onChange: v => updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToLogs', Object.assign({}, options.jsonData.tracesToLogs, {\n            spanStartTimeShift: v.currentTarget.value\n          })),\n          value: ((_options$jsonData$tra11 = options.jsonData.tracesToLogs) === null || _options$jsonData$tra11 === void 0 ? void 0 : _options$jsonData$tra11.spanStartTimeShift) || ''\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Span end time shift\",\n        labelWidth: 26,\n        grow: true,\n        tooltip: \"Shifts the end time of the span. Default 0 Time units can be used here, for example: 5s, 1m, 3h\",\n        children: /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          placeholder: \"1h\",\n          width: 40,\n          onChange: v => updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToLogs', Object.assign({}, options.jsonData.tracesToLogs, {\n            spanEndTimeShift: v.currentTarget.value\n          })),\n          value: ((_options$jsonData$tra12 = options.jsonData.tracesToLogs) === null || _options$jsonData$tra12 === void 0 ? void 0 : _options$jsonData$tra12.spanEndTimeShift) || ''\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Filter by Trace ID\",\n        labelWidth: 26,\n        grow: true,\n        tooltip: \"Filters logs by Trace ID. Appends '|=<trace id>' to the query.\",\n        children: /*#__PURE__*/_jsx(InlineSwitch, {\n          id: \"filterByTraceID\",\n          value: (_options$jsonData$tra13 = options.jsonData.tracesToLogs) === null || _options$jsonData$tra13 === void 0 ? void 0 : _options$jsonData$tra13.filterByTraceID,\n          onChange: event => updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToLogs', Object.assign({}, options.jsonData.tracesToLogs, {\n            filterByTraceID: event.currentTarget.checked\n          }))\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Filter by Span ID\",\n        labelWidth: 26,\n        grow: true,\n        tooltip: \"Filters logs by Span ID. Appends '|=<span id>' to the query.\",\n        children: /*#__PURE__*/_jsx(InlineSwitch, {\n          id: \"filterBySpanID\",\n          value: (_options$jsonData$tra14 = options.jsonData.tracesToLogs) === null || _options$jsonData$tra14 === void 0 ? void 0 : _options$jsonData$tra14.filterBySpanID,\n          onChange: event => updateDatasourcePluginJsonDataOption({\n            onOptionsChange,\n            options\n          }, 'tracesToLogs', Object.assign({}, options.jsonData.tracesToLogs, {\n            filterBySpanID: event.currentTarget.checked\n          }))\n        })\n      })\n    })]\n  });\n}\n\nconst getStyles = theme => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `\n});","map":{"version":3,"names":["css","React","updateDatasourcePluginJsonDataOption","DataSourcePicker","InlineField","InlineFieldRow","Input","TagsInput","useStyles","InlineSwitch","KeyValueInput","TraceToLogsSettings","options","onOptionsChange","styles","getStyles","width","infoText","ds","type","jsonData","tracesToLogs","datasourceUid","uid","tags","mapTagNamesEnabled","mappedTags","map","tag","key","v","event","currentTarget","checked","spanStartTimeShift","value","spanEndTimeShift","filterByTraceID","filterBySpanID","theme","spacing","md","colors","textSemiWeak"],"sources":["/home/soula/grafana/public/app/core/components/TraceToLogs/TraceToLogsSettings.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourceInstanceSettings,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  KeyValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, TagsInput, useStyles, InlineSwitch } from '@grafana/ui';\n\nimport KeyValueInput from './KeyValueInput';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n  mappedTags?: Array<KeyValue<string>>;\n  mapTagNamesEnabled?: boolean;\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n  filterByTraceID?: boolean;\n  filterBySpanID?: boolean;\n  lokiSearch?: boolean; // legacy\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs lets you navigate from a trace span to the selected data source&apos;s logs.\n      </div>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"trace-to-logs-data-source-picker\"\n            filter={(ds) => {\n              // Trace to logs only supports loki and splunk at the moment\n              return ds.type === 'loki' || ds.type === 'grafana-splunk-datasource';\n            }}\n            current={options.jsonData.tracesToLogs?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                datasourceUid: ds.uid,\n                tags: options.jsonData.tracesToLogs?.tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToLogs?.mapTagNamesEnabled ? (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <KeyValueInput\n              keyPlaceholder=\"Tag\"\n              values={\n                options.jsonData.tracesToLogs?.mappedTags ??\n                options.jsonData.tracesToLogs?.tags?.map((tag) => ({ key: tag })) ??\n                []\n              }\n              onChange={(v) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  mappedTags: v,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      ) : (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <TagsInput\n              tags={options.jsonData.tracesToLogs?.tags}\n              width={40}\n              onChange={(tags) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  tags: tags,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Map tag names\"\n          labelWidth={26}\n          grow\n          tooltip=\"Map trace tag names to log label names. Ex: k8s.pod.name -> pod\"\n        >\n          <InlineSwitch\n            id=\"mapTagNames\"\n            value={options.jsonData.tracesToLogs?.mapTagNamesEnabled ?? false}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                mapTagNamesEnabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span start time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the start time of the span. Default 0 (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span end time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the end time of the span. Default 0 Time units can be used here, for example: 5s, 1m, 3h\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Trace ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Trace ID. Appends '|=<trace id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterByTraceID\"\n            value={options.jsonData.tracesToLogs?.filterByTraceID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterByTraceID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Span ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Span ID. Appends '|=<span id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterBySpanID\"\n            value={options.jsonData.tracesToLogs?.filterBySpanID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterBySpanID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}