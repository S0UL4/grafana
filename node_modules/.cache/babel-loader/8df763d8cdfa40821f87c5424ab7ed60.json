{"ast":null,"code":"import { toDataQueryResponse } from '@grafana/runtime';\nexport default class ResponseParser {\n  transformMetricFindResponse(raw) {\n    const frames = toDataQueryResponse(raw).data;\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n    const values = [];\n    const textField = frame.fields.find(f => f.name === '__text');\n    const valueField = frame.fields.find(f => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({\n          text: '' + textField.values.get(i),\n          value: '' + valueField.values.get(i)\n        });\n      }\n    } else {\n      values.push(...frame.fields.flatMap(f => f.values.toArray()).map(v => ({\n        text: v\n      })));\n    }\n\n    return Array.from(new Set(values.map(v => v.text))).map(text => {\n      var _values$find;\n\n      return {\n        text,\n        value: (_values$find = values.find(v => v.text === text)) === null || _values$find === void 0 ? void 0 : _values$find.value\n      };\n    });\n  }\n\n  async transformAnnotationResponse(options, data) {\n    const frames = toDataQueryResponse({\n      data: data\n    }).data;\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n    const timeField = frame.fields.find(f => f.name === 'time');\n\n    if (!timeField) {\n      throw new Error('Missing mandatory time column (with time column alias) in annotation query');\n    }\n\n    const timeEndField = frame.fields.find(f => f.name === 'timeend');\n    const textField = frame.fields.find(f => f.name === 'text');\n    const tagsField = frame.fields.find(f => f.name === 'tags');\n    const list = [];\n\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags: tagsField && tagsField.values.get(i) ? tagsField.values.get(i).trim().split(/\\s*,\\s*/) : []\n      });\n    }\n\n    return list;\n  }\n\n}","map":{"version":3,"names":["toDataQueryResponse","ResponseParser","transformMetricFindResponse","raw","frames","data","length","frame","values","textField","fields","find","f","name","valueField","i","push","text","get","value","flatMap","toArray","map","v","Array","from","Set","transformAnnotationResponse","options","timeField","Error","timeEndField","tagsField","list","timeEnd","Math","floor","undefined","annotation","time","tags","trim","split"],"sources":["/home/soula/grafana/public/app/plugins/datasource/postgres/response_parser.ts"],"sourcesContent":["import { AnnotationEvent, DataFrame, MetricFindValue } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(raw: FetchResponse<BackendDataSourceResponse>): MetricFindValue[] {\n    const frames = toDataQueryResponse(raw).data as DataFrame[];\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      values.push(\n        ...frame.fields\n          .flatMap((f) => f.values.toArray())\n          .map((v) => ({\n            text: v,\n          }))\n      );\n    }\n\n    return Array.from(new Set(values.map((v) => v.text))).map((text) => ({\n      text,\n      value: values.find((v) => v.text === text)?.value,\n    }));\n  }\n\n  async transformAnnotationResponse(options: any, data: BackendDataSourceResponse): Promise<AnnotationEvent[]> {\n    const frames = toDataQueryResponse({ data: data }).data as DataFrame[];\n    if (!frames || !frames.length) {\n      return [];\n    }\n    const frame = frames[0];\n    const timeField = frame.fields.find((f) => f.name === 'time');\n\n    if (!timeField) {\n      throw new Error('Missing mandatory time column (with time column alias) in annotation query');\n    }\n\n    const timeEndField = frame.fields.find((f) => f.name === 'timeend');\n    const textField = frame.fields.find((f) => f.name === 'text');\n    const tagsField = frame.fields.find((f) => f.name === 'tags');\n\n    const list: AnnotationEvent[] = [];\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags:\n          tagsField && tagsField.values.get(i)\n            ? tagsField.values\n                .get(i)\n                .trim()\n                .split(/\\s*,\\s*/)\n            : [],\n      });\n    }\n\n    return list;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}