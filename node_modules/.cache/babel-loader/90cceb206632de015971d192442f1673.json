{"ast":null,"code":"var _Alert, _Button, _Button2;\n\nimport { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { Alert, Button, Field, Input, LinkButton, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useControlledFieldArray } from '../../../hooks/useControlledFieldArray';\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport { makeAMLink } from '../../../utils/misc';\nimport { ChannelSubForm } from './ChannelSubForm';\nimport { DeletedSubForm } from './fields/DeletedSubform';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function ReceiverForm({\n  config,\n  initialValues,\n  defaultItem,\n  notifiers,\n  alertManagerSourceName,\n  onSubmit,\n  onTestChannel,\n  takenReceiverNames,\n  commonSettingsComponent,\n  readOnly\n}) {\n  const notifyApp = useAppNotification();\n  const styles = useStyles2(getStyles);\n  const defaultValues = initialValues || {\n    name: '',\n    items: [Object.assign({}, defaultItem, {\n      __id: String(Math.random())\n    })]\n  };\n  const formAPI = useForm({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: JSON.parse(JSON.stringify(defaultValues))\n  });\n  useCleanup(state => state.unifiedAlerting.saveAMConfig);\n  const {\n    loading\n  } = useUnifiedAlertingSelector(state => state.saveAMConfig);\n  const {\n    handleSubmit,\n    register,\n    formState: {\n      errors\n    },\n    getValues\n  } = formAPI;\n  const {\n    fields,\n    append,\n    remove\n  } = useControlledFieldArray({\n    name: 'items',\n    formAPI,\n    softDelete: true\n  });\n  const validateNameIsAvailable = useCallback(name => takenReceiverNames.map(name => name.trim().toLowerCase()).includes(name.trim().toLowerCase()) ? 'Another receiver with this name already exists.' : true, [takenReceiverNames]);\n\n  const submitCallback = values => {\n    onSubmit(Object.assign({}, values, {\n      items: values.items.filter(item => !item.__deleted)\n    }));\n  };\n\n  const onInvalid = () => {\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  return /*#__PURE__*/_jsxs(FormProvider, Object.assign({}, formAPI, {\n    children: [!config.alertmanager_config.route && (_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n      severity: \"warning\",\n      title: \"Attention\",\n      children: \"Because there is no default policy configured yet, this contact point will automatically be set as default.\"\n    }))), /*#__PURE__*/_jsxs(\"form\", {\n      onSubmit: handleSubmit(submitCallback, onInvalid),\n      children: [/*#__PURE__*/_jsx(\"h4\", {\n        className: styles.heading,\n        children: readOnly ? 'Contact point' : initialValues ? 'Update contact point' : 'Create contact point'\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Name\",\n        invalid: !!errors.name,\n        error: errors.name && errors.name.message,\n        required: true,\n        children: /*#__PURE__*/_jsx(Input, Object.assign({\n          readOnly: readOnly,\n          id: \"name\"\n        }, register('name', {\n          required: 'Name is required',\n          validate: {\n            nameIsAvailable: validateNameIsAvailable\n          }\n        }), {\n          width: 39,\n          placeholder: \"Name\"\n        }))\n      }), fields.map((field, index) => {\n        var _errors$items;\n\n        const pathPrefix = `items.${index}.`;\n\n        if (field.__deleted) {\n          return /*#__PURE__*/_jsx(DeletedSubForm, {\n            pathPrefix: pathPrefix\n          }, field.__id);\n        }\n\n        const initialItem = initialValues === null || initialValues === void 0 ? void 0 : initialValues.items.find(({\n          __id\n        }) => __id === field.__id);\n        return /*#__PURE__*/_jsx(ChannelSubForm, {\n          defaultValues: field,\n          onDuplicate: () => {\n            const currentValues = getValues().items[index];\n            append(Object.assign({}, currentValues, {\n              __id: String(Math.random())\n            }));\n          },\n          onTest: onTestChannel ? () => {\n            const currentValues = getValues().items[index];\n            onTestChannel(currentValues);\n          } : undefined,\n          onDelete: () => remove(index),\n          pathPrefix: pathPrefix,\n          notifiers: notifiers,\n          secureFields: initialItem === null || initialItem === void 0 ? void 0 : initialItem.secureFields,\n          errors: errors === null || errors === void 0 ? void 0 : (_errors$items = errors.items) === null || _errors$items === void 0 ? void 0 : _errors$items[index],\n          commonSettingsComponent: commonSettingsComponent,\n          readOnly: readOnly\n        }, field.__id);\n      }), /*#__PURE__*/_jsxs(_Fragment, {\n        children: [!readOnly && /*#__PURE__*/_jsx(Button, {\n          type: \"button\",\n          icon: \"plus\",\n          variant: \"secondary\",\n          onClick: () => append(Object.assign({}, defaultItem, {\n            __id: String(Math.random())\n          })),\n          children: \"New contact point type\"\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.buttons,\n          children: [!readOnly && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [loading && (_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n              disabled: true,\n              icon: \"fa fa-spinner\",\n              variant: \"primary\",\n              children: \"Saving...\"\n            }))), !loading && (_Button2 || (_Button2 = /*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              children: \"Save contact point\"\n            })))]\n          }), /*#__PURE__*/_jsx(LinkButton, {\n            disabled: loading,\n            fill: \"outline\",\n            variant: \"secondary\",\n            \"data-testid\": \"cancel-button\",\n            href: makeAMLink('alerting/notifications', alertManagerSourceName),\n            children: \"Cancel\"\n          })]\n        })]\n      })]\n    })]\n  }));\n}\n\nconst getStyles = theme => ({\n  heading: css`\n    margin: ${theme.spacing(4, 0)};\n  `,\n  buttons: css`\n    margin-top: ${theme.spacing(4)};\n\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `\n});","map":{"version":3,"names":["css","React","useCallback","useForm","FormProvider","Alert","Button","Field","Input","LinkButton","useStyles2","useAppNotification","useCleanup","useControlledFieldArray","useUnifiedAlertingSelector","makeAMLink","ChannelSubForm","DeletedSubForm","ReceiverForm","config","initialValues","defaultItem","notifiers","alertManagerSourceName","onSubmit","onTestChannel","takenReceiverNames","commonSettingsComponent","readOnly","notifyApp","styles","getStyles","defaultValues","name","items","__id","String","Math","random","formAPI","JSON","parse","stringify","state","unifiedAlerting","saveAMConfig","loading","handleSubmit","register","formState","errors","getValues","fields","append","remove","softDelete","validateNameIsAvailable","map","trim","toLowerCase","includes","submitCallback","values","filter","item","__deleted","onInvalid","error","alertmanager_config","route","heading","message","required","validate","nameIsAvailable","field","index","pathPrefix","initialItem","find","currentValues","undefined","secureFields","buttons","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/form/ReceiverForm.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { useForm, FormProvider, FieldErrors, Validate } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Field, Input, LinkButton, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { NotifierDTO } from 'app/types';\n\nimport { useControlledFieldArray } from '../../../hooks/useControlledFieldArray';\nimport { useUnifiedAlertingSelector } from '../../../hooks/useUnifiedAlertingSelector';\nimport { ChannelValues, CommonSettingsComponentType, ReceiverFormValues } from '../../../types/receiver-form';\nimport { makeAMLink } from '../../../utils/misc';\n\nimport { ChannelSubForm } from './ChannelSubForm';\nimport { DeletedSubForm } from './fields/DeletedSubform';\n\ninterface Props<R extends ChannelValues> {\n  config: AlertManagerCortexConfig;\n  notifiers: NotifierDTO[];\n  defaultItem: R;\n  alertManagerSourceName: string;\n  onTestChannel?: (channel: R) => void;\n  onSubmit: (values: ReceiverFormValues<R>) => void;\n  takenReceiverNames: string[]; // will validate that user entered receiver name is not one of these\n  commonSettingsComponent: CommonSettingsComponentType;\n  initialValues?: ReceiverFormValues<R>;\n  readOnly: boolean;\n}\n\nexport function ReceiverForm<R extends ChannelValues>({\n  config,\n  initialValues,\n  defaultItem,\n  notifiers,\n  alertManagerSourceName,\n  onSubmit,\n  onTestChannel,\n  takenReceiverNames,\n  commonSettingsComponent,\n  readOnly,\n}: Props<R>): JSX.Element {\n  const notifyApp = useAppNotification();\n  const styles = useStyles2(getStyles);\n\n  const defaultValues = initialValues || {\n    name: '',\n    items: [\n      {\n        ...defaultItem,\n        __id: String(Math.random()),\n      } as any,\n    ],\n  };\n\n  const formAPI = useForm<ReceiverFormValues<R>>({\n    // making a copy here beacuse react-hook-form will mutate these, and break if the object is frozen. for real.\n    defaultValues: JSON.parse(JSON.stringify(defaultValues)),\n  });\n\n  useCleanup((state) => state.unifiedAlerting.saveAMConfig);\n\n  const { loading } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    getValues,\n  } = formAPI;\n\n  const { fields, append, remove } = useControlledFieldArray<R>({ name: 'items', formAPI, softDelete: true });\n\n  const validateNameIsAvailable: Validate<string> = useCallback(\n    (name: string) =>\n      takenReceiverNames.map((name) => name.trim().toLowerCase()).includes(name.trim().toLowerCase())\n        ? 'Another receiver with this name already exists.'\n        : true,\n    [takenReceiverNames]\n  );\n\n  const submitCallback = (values: ReceiverFormValues<R>) => {\n    onSubmit({\n      ...values,\n      items: values.items.filter((item) => !item.__deleted),\n    });\n  };\n\n  const onInvalid = () => {\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      {!config.alertmanager_config.route && (\n        <Alert severity=\"warning\" title=\"Attention\">\n          Because there is no default policy configured yet, this contact point will automatically be set as default.\n        </Alert>\n      )}\n      <form onSubmit={handleSubmit(submitCallback, onInvalid)}>\n        <h4 className={styles.heading}>\n          {readOnly ? 'Contact point' : initialValues ? 'Update contact point' : 'Create contact point'}\n        </h4>\n        <Field label=\"Name\" invalid={!!errors.name} error={errors.name && errors.name.message} required>\n          <Input\n            readOnly={readOnly}\n            id=\"name\"\n            {...register('name', {\n              required: 'Name is required',\n              validate: { nameIsAvailable: validateNameIsAvailable },\n            })}\n            width={39}\n            placeholder=\"Name\"\n          />\n        </Field>\n        {fields.map((field, index) => {\n          const pathPrefix = `items.${index}.`;\n          if (field.__deleted) {\n            return <DeletedSubForm key={field.__id} pathPrefix={pathPrefix} />;\n          }\n          const initialItem = initialValues?.items.find(({ __id }) => __id === field.__id);\n          return (\n            <ChannelSubForm<R>\n              defaultValues={field}\n              key={field.__id}\n              onDuplicate={() => {\n                const currentValues: R = getValues().items[index];\n                append({ ...currentValues, __id: String(Math.random()) });\n              }}\n              onTest={\n                onTestChannel\n                  ? () => {\n                      const currentValues: R = getValues().items[index];\n                      onTestChannel(currentValues);\n                    }\n                  : undefined\n              }\n              onDelete={() => remove(index)}\n              pathPrefix={pathPrefix}\n              notifiers={notifiers}\n              secureFields={initialItem?.secureFields}\n              errors={errors?.items?.[index] as FieldErrors<R>}\n              commonSettingsComponent={commonSettingsComponent}\n              readOnly={readOnly}\n            />\n          );\n        })}\n        <>\n          {!readOnly && (\n            <Button\n              type=\"button\"\n              icon=\"plus\"\n              variant=\"secondary\"\n              onClick={() => append({ ...defaultItem, __id: String(Math.random()) } as R)}\n            >\n              New contact point type\n            </Button>\n          )}\n          <div className={styles.buttons}>\n            {!readOnly && (\n              <>\n                {loading && (\n                  <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n                    Saving...\n                  </Button>\n                )}\n                {!loading && <Button type=\"submit\">Save contact point</Button>}\n              </>\n            )}\n            <LinkButton\n              disabled={loading}\n              fill=\"outline\"\n              variant=\"secondary\"\n              data-testid=\"cancel-button\"\n              href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n            >\n              Cancel\n            </LinkButton>\n          </div>\n        </>\n      </form>\n    </FormProvider>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css`\n    margin: ${theme.spacing(4, 0)};\n  `,\n  buttons: css`\n    margin-top: ${theme.spacing(4)};\n\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}