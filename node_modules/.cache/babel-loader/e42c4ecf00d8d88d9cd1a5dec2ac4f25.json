{"ast":null,"code":"var _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { DataTransformerID, standardTransformers, getFieldDisplayName, stringToJsRegex } from '@grafana/data';\nimport { Field, Input, FilterPill, HorizontalGroup } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class FilterByNameTransformerEditor extends React.PureComponent {\n  constructor(props) {\n    var _props$options$includ, _props$options$includ2;\n\n    super(props);\n\n    _defineProperty(this, \"onFieldToggle\", fieldName => {\n      const {\n        selected\n      } = this.state;\n\n      if (selected.indexOf(fieldName) > -1) {\n        this.onChange(selected.filter(s => s !== fieldName));\n      } else {\n        this.onChange([...selected, fieldName]);\n      }\n    });\n\n    _defineProperty(this, \"onChange\", selected => {\n      const {\n        regex,\n        isRegexValid\n      } = this.state;\n      const options = Object.assign({}, this.props.options, {\n        include: {\n          names: selected\n        }\n      });\n\n      if (regex && isRegexValid) {\n        var _options$include;\n\n        options.include = (_options$include = options.include) !== null && _options$include !== void 0 ? _options$include : {};\n        options.include.pattern = regex;\n      }\n\n      this.setState({\n        selected\n      }, () => {\n        this.props.onChange(options);\n      });\n    });\n\n    _defineProperty(this, \"onInputBlur\", e => {\n      const {\n        selected,\n        regex\n      } = this.state;\n      let isRegexValid = true;\n\n      try {\n        if (regex) {\n          stringToJsRegex(regex);\n        }\n      } catch (e) {\n        isRegexValid = false;\n      }\n\n      if (isRegexValid) {\n        this.props.onChange(Object.assign({}, this.props.options, {\n          include: {\n            pattern: regex\n          }\n        }));\n      } else {\n        this.props.onChange(Object.assign({}, this.props.options, {\n          include: {\n            names: selected\n          }\n        }));\n      }\n\n      this.setState({\n        isRegexValid\n      });\n    });\n\n    this.state = {\n      include: ((_props$options$includ = props.options.include) === null || _props$options$includ === void 0 ? void 0 : _props$options$includ.names) || [],\n      regex: (_props$options$includ2 = props.options.include) === null || _props$options$includ2 === void 0 ? void 0 : _props$options$includ2.pattern,\n      options: [],\n      selected: [],\n      isRegexValid: true\n    };\n  }\n\n  componentDidMount() {\n    this.initOptions();\n  }\n\n  componentDidUpdate(oldProps) {\n    if (this.props.input !== oldProps.input) {\n      this.initOptions();\n    }\n  }\n\n  initOptions() {\n    var _options$include$name, _options$include2, _options$include3;\n\n    const {\n      input,\n      options\n    } = this.props;\n    const configuredOptions = Array.from((_options$include$name = (_options$include2 = options.include) === null || _options$include2 === void 0 ? void 0 : _options$include2.names) !== null && _options$include$name !== void 0 ? _options$include$name : []);\n    const allNames = [];\n    const byName = {};\n\n    for (const frame of input) {\n      for (const field of frame.fields) {\n        const displayName = getFieldDisplayName(field, frame, input);\n        let v = byName[displayName];\n\n        if (!v) {\n          v = byName[displayName] = {\n            name: displayName,\n            count: 0\n          };\n          allNames.push(v);\n        }\n\n        v.count++;\n      }\n    }\n\n    if ((_options$include3 = options.include) !== null && _options$include3 !== void 0 && _options$include3.pattern) {\n      try {\n        const regex = stringToJsRegex(options.include.pattern);\n\n        for (const info of allNames) {\n          if (regex.test(info.name)) {\n            configuredOptions.push(info.name);\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (configuredOptions.length) {\n      var _options$include4;\n\n      const selected = allNames.filter(n => configuredOptions.includes(n.name));\n      this.setState({\n        options: allNames,\n        selected: selected.map(s => s.name),\n        regex: (_options$include4 = options.include) === null || _options$include4 === void 0 ? void 0 : _options$include4.pattern\n      });\n    } else {\n      var _options$include5;\n\n      this.setState({\n        options: allNames,\n        selected: allNames.map(n => n.name),\n        regex: (_options$include5 = options.include) === null || _options$include5 === void 0 ? void 0 : _options$include5.pattern\n      });\n    }\n  }\n\n  render() {\n    const {\n      options,\n      selected,\n      isRegexValid\n    } = this.state;\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-inline\",\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form gf-form--grow\",\n        children: [_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form-label width-8\",\n          children: \"Identifier\"\n        })), /*#__PURE__*/_jsxs(HorizontalGroup, {\n          spacing: \"xs\",\n          align: \"flex-start\",\n          wrap: true,\n          children: [/*#__PURE__*/_jsx(Field, {\n            invalid: !isRegexValid,\n            error: !isRegexValid ? 'Invalid pattern' : undefined,\n            className: css`\n                margin-bottom: 0;\n              `,\n            children: /*#__PURE__*/_jsx(Input, {\n              placeholder: \"Regular expression pattern\",\n              value: this.state.regex || '',\n              onChange: e => this.setState({\n                regex: e.currentTarget.value\n              }),\n              onBlur: this.onInputBlur,\n              width: 25\n            })\n          }), options.map((o, i) => {\n            const label = `${o.name}${o.count > 1 ? ' (' + o.count + ')' : ''}`;\n            const isSelected = selected.indexOf(o.name) > -1;\n            return /*#__PURE__*/_jsx(FilterPill, {\n              onClick: () => {\n                this.onFieldToggle(o.name);\n              },\n              label: label,\n              selected: isSelected\n            }, `${o.name}/${i}`);\n          })]\n        })]\n      })\n    });\n  }\n\n}\nexport const filterFieldsByNameTransformRegistryItem = {\n  id: DataTransformerID.filterFieldsByName,\n  editor: FilterByNameTransformerEditor,\n  transformation: standardTransformers.filterFieldsByNameTransformer,\n  name: 'Filter by name',\n  description: 'Removes part of the query results using a regex pattern. The pattern can be inclusive or exclusive.'\n};","map":{"version":3,"names":["css","React","DataTransformerID","standardTransformers","getFieldDisplayName","stringToJsRegex","Field","Input","FilterPill","HorizontalGroup","FilterByNameTransformerEditor","PureComponent","constructor","props","fieldName","selected","state","indexOf","onChange","filter","s","regex","isRegexValid","options","include","names","pattern","setState","e","componentDidMount","initOptions","componentDidUpdate","oldProps","input","configuredOptions","Array","from","allNames","byName","frame","field","fields","displayName","v","name","count","push","info","test","error","console","length","n","includes","map","render","undefined","currentTarget","value","onInputBlur","o","i","label","isSelected","onFieldToggle","filterFieldsByNameTransformRegistryItem","id","filterFieldsByName","editor","transformation","filterFieldsByNameTransformer","description"],"sources":["/home/soula/grafana/public/app/features/transformers/editors/FilterByNameTransformerEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataTransformerID,\n  KeyValue,\n  standardTransformers,\n  TransformerRegistryItem,\n  TransformerUIProps,\n  getFieldDisplayName,\n  stringToJsRegex,\n} from '@grafana/data';\nimport { FilterFieldsByNameTransformerOptions } from '@grafana/data/src/transformations/transformers/filterByName';\nimport { Field, Input, FilterPill, HorizontalGroup } from '@grafana/ui';\n\ninterface FilterByNameTransformerEditorProps extends TransformerUIProps<FilterFieldsByNameTransformerOptions> {}\n\ninterface FilterByNameTransformerEditorState {\n  include: string[];\n  options: FieldNameInfo[];\n  selected: string[];\n  regex?: string;\n  isRegexValid?: boolean;\n}\n\ninterface FieldNameInfo {\n  name: string;\n  count: number;\n}\nexport class FilterByNameTransformerEditor extends React.PureComponent<\n  FilterByNameTransformerEditorProps,\n  FilterByNameTransformerEditorState\n> {\n  constructor(props: FilterByNameTransformerEditorProps) {\n    super(props);\n    this.state = {\n      include: props.options.include?.names || [],\n      regex: props.options.include?.pattern,\n      options: [],\n      selected: [],\n      isRegexValid: true,\n    };\n  }\n\n  componentDidMount() {\n    this.initOptions();\n  }\n\n  componentDidUpdate(oldProps: FilterByNameTransformerEditorProps) {\n    if (this.props.input !== oldProps.input) {\n      this.initOptions();\n    }\n  }\n\n  private initOptions() {\n    const { input, options } = this.props;\n    const configuredOptions = Array.from(options.include?.names ?? []);\n\n    const allNames: FieldNameInfo[] = [];\n    const byName: KeyValue<FieldNameInfo> = {};\n\n    for (const frame of input) {\n      for (const field of frame.fields) {\n        const displayName = getFieldDisplayName(field, frame, input);\n        let v = byName[displayName];\n\n        if (!v) {\n          v = byName[displayName] = {\n            name: displayName,\n            count: 0,\n          };\n          allNames.push(v);\n        }\n\n        v.count++;\n      }\n    }\n\n    if (options.include?.pattern) {\n      try {\n        const regex = stringToJsRegex(options.include.pattern);\n\n        for (const info of allNames) {\n          if (regex.test(info.name)) {\n            configuredOptions.push(info.name);\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (configuredOptions.length) {\n      const selected: FieldNameInfo[] = allNames.filter((n) => configuredOptions.includes(n.name));\n\n      this.setState({\n        options: allNames,\n        selected: selected.map((s) => s.name),\n        regex: options.include?.pattern,\n      });\n    } else {\n      this.setState({\n        options: allNames,\n        selected: allNames.map((n) => n.name),\n        regex: options.include?.pattern,\n      });\n    }\n  }\n\n  onFieldToggle = (fieldName: string) => {\n    const { selected } = this.state;\n    if (selected.indexOf(fieldName) > -1) {\n      this.onChange(selected.filter((s) => s !== fieldName));\n    } else {\n      this.onChange([...selected, fieldName]);\n    }\n  };\n\n  onChange = (selected: string[]) => {\n    const { regex, isRegexValid } = this.state;\n    const options: FilterFieldsByNameTransformerOptions = {\n      ...this.props.options,\n      include: { names: selected },\n    };\n\n    if (regex && isRegexValid) {\n      options.include = options.include ?? {};\n      options.include.pattern = regex;\n    }\n\n    this.setState({ selected }, () => {\n      this.props.onChange(options);\n    });\n  };\n\n  onInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const { selected, regex } = this.state;\n    let isRegexValid = true;\n\n    try {\n      if (regex) {\n        stringToJsRegex(regex);\n      }\n    } catch (e) {\n      isRegexValid = false;\n    }\n\n    if (isRegexValid) {\n      this.props.onChange({\n        ...this.props.options,\n        include: { pattern: regex },\n      });\n    } else {\n      this.props.onChange({\n        ...this.props.options,\n        include: { names: selected },\n      });\n    }\n\n    this.setState({ isRegexValid });\n  };\n\n  render() {\n    const { options, selected, isRegexValid } = this.state;\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form gf-form--grow\">\n          <div className=\"gf-form-label width-8\">Identifier</div>\n          <HorizontalGroup spacing=\"xs\" align=\"flex-start\" wrap>\n            <Field\n              invalid={!isRegexValid}\n              error={!isRegexValid ? 'Invalid pattern' : undefined}\n              className={css`\n                margin-bottom: 0;\n              `}\n            >\n              <Input\n                placeholder=\"Regular expression pattern\"\n                value={this.state.regex || ''}\n                onChange={(e) => this.setState({ regex: e.currentTarget.value })}\n                onBlur={this.onInputBlur}\n                width={25}\n              />\n            </Field>\n            {options.map((o, i) => {\n              const label = `${o.name}${o.count > 1 ? ' (' + o.count + ')' : ''}`;\n              const isSelected = selected.indexOf(o.name) > -1;\n              return (\n                <FilterPill\n                  key={`${o.name}/${i}`}\n                  onClick={() => {\n                    this.onFieldToggle(o.name);\n                  }}\n                  label={label}\n                  selected={isSelected}\n                />\n              );\n            })}\n          </HorizontalGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const filterFieldsByNameTransformRegistryItem: TransformerRegistryItem<FilterFieldsByNameTransformerOptions> = {\n  id: DataTransformerID.filterFieldsByName,\n  editor: FilterByNameTransformerEditor,\n  transformation: standardTransformers.filterFieldsByNameTransformer,\n  name: 'Filter by name',\n  description: 'Removes part of the query results using a regex pattern. The pattern can be inclusive or exclusive.',\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}