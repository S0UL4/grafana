{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { Button, InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { defaultCSVWaveQuery } from '../constants';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nclass CSVWaveEditor extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onFieldChange\", field => e => {\n      const {\n        value\n      } = e.target;\n      this.props.onChange(this.props.index, Object.assign({}, this.props.wave, {\n        [field]: value\n      }));\n    });\n\n    _defineProperty(this, \"onNameChange\", this.onFieldChange('name'));\n\n    _defineProperty(this, \"onLabelsChange\", this.onFieldChange('labels'));\n\n    _defineProperty(this, \"onCSVChange\", this.onFieldChange('valuesCSV'));\n\n    _defineProperty(this, \"onTimeStepChange\", e => {\n      const timeStep = e.target.valueAsNumber;\n      this.props.onChange(this.props.index, Object.assign({}, this.props.wave, {\n        timeStep\n      }));\n    });\n  }\n\n  render() {\n    const {\n      wave,\n      last\n    } = this.props;\n    let action = this.props.onAdd;\n\n    if (!last) {\n      action = () => {\n        this.props.onChange(this.props.index, undefined); // remove\n      };\n    }\n\n    return /*#__PURE__*/_jsxs(InlineFieldRow, {\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        label: 'Values',\n        grow: true,\n        tooltip: \"Comma separated values. Each value may be an int, float, or null and must not be empty. Whitespace and trailing commas are removed\",\n        children: /*#__PURE__*/_jsx(Input, {\n          value: wave.valuesCSV,\n          placeholder: 'CSV values',\n          onChange: this.onCSVChange,\n          autoFocus: true\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: 'Step',\n        tooltip: \"The number of seconds between datapoints.\",\n        children: /*#__PURE__*/_jsx(Input, {\n          value: wave.timeStep,\n          type: \"number\",\n          placeholder: '60',\n          width: 6,\n          onChange: this.onTimeStepChange\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: 'Labels',\n        children: /*#__PURE__*/_jsx(Input, {\n          value: wave.labels,\n          placeholder: 'labels',\n          width: 12,\n          onChange: this.onLabelsChange\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: 'Name',\n        children: /*#__PURE__*/_jsx(Input, {\n          value: wave.name,\n          placeholder: 'name',\n          width: 10,\n          onChange: this.onNameChange\n        })\n      }), /*#__PURE__*/_jsx(Button, {\n        icon: last ? 'plus' : 'minus',\n        variant: \"secondary\",\n        onClick: action\n      })]\n    });\n  }\n\n}\n\nexport class CSVWavesEditor extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onChange\", (index, wave) => {\n      var _this$props$waves;\n\n      let waves = [...((_this$props$waves = this.props.waves) !== null && _this$props$waves !== void 0 ? _this$props$waves : defaultCSVWaveQuery)];\n\n      if (wave) {\n        waves[index] = Object.assign({}, wave);\n      } else {\n        // remove the element\n        waves.splice(index, 1);\n      }\n\n      this.props.onChange(waves);\n    });\n\n    _defineProperty(this, \"onAdd\", () => {\n      var _this$props$waves2;\n\n      const waves = [...((_this$props$waves2 = this.props.waves) !== null && _this$props$waves2 !== void 0 ? _this$props$waves2 : defaultCSVWaveQuery)];\n      waves.push(Object.assign({}, defaultCSVWaveQuery[0]));\n      this.props.onChange(waves);\n    });\n  }\n\n  render() {\n    var _this$props$waves3;\n\n    let waves = (_this$props$waves3 = this.props.waves) !== null && _this$props$waves3 !== void 0 ? _this$props$waves3 : defaultCSVWaveQuery;\n\n    if (!waves.length) {\n      waves = defaultCSVWaveQuery;\n    }\n\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: waves.map((wave, index) => /*#__PURE__*/_jsx(CSVWaveEditor, {\n        wave: wave,\n        index: index,\n        onAdd: this.onAdd,\n        onChange: this.onChange,\n        last: index === waves.length - 1\n      }, `${index}/${wave.valuesCSV}`))\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","Button","InlineField","InlineFieldRow","Input","defaultCSVWaveQuery","CSVWaveEditor","field","e","value","target","props","onChange","index","wave","onFieldChange","timeStep","valueAsNumber","render","last","action","onAdd","undefined","valuesCSV","onCSVChange","onTimeStepChange","labels","onLabelsChange","name","onNameChange","CSVWavesEditor","waves","splice","push","length","map"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/components/CSVWaveEditor.tsx"],"sourcesContent":["import React, { ChangeEvent, PureComponent } from 'react';\n\nimport { Button, InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { defaultCSVWaveQuery } from '../constants';\nimport { CSVWave } from '../types';\n\ninterface WavesProps {\n  waves?: CSVWave[];\n  onChange: (waves: CSVWave[]) => void;\n}\n\ninterface WaveProps {\n  wave: CSVWave;\n  index: number;\n  last: boolean;\n  onChange: (index: number, wave?: CSVWave) => void;\n  onAdd: () => void;\n}\n\nclass CSVWaveEditor extends PureComponent<WaveProps> {\n  onFieldChange = (field: keyof CSVWave) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n\n    this.props.onChange(this.props.index, {\n      ...this.props.wave,\n      [field]: value,\n    });\n  };\n\n  onNameChange = this.onFieldChange('name');\n  onLabelsChange = this.onFieldChange('labels');\n  onCSVChange = this.onFieldChange('valuesCSV');\n  onTimeStepChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const timeStep = e.target.valueAsNumber;\n    this.props.onChange(this.props.index, {\n      ...this.props.wave,\n      timeStep,\n    });\n  };\n\n  render() {\n    const { wave, last } = this.props;\n    let action = this.props.onAdd;\n    if (!last) {\n      action = () => {\n        this.props.onChange(this.props.index, undefined); // remove\n      };\n    }\n\n    return (\n      <InlineFieldRow>\n        <InlineField\n          label={'Values'}\n          grow\n          tooltip=\"Comma separated values. Each value may be an int, float, or null and must not be empty. Whitespace and trailing commas are removed\"\n        >\n          <Input value={wave.valuesCSV} placeholder={'CSV values'} onChange={this.onCSVChange} autoFocus={true} />\n        </InlineField>\n        <InlineField label={'Step'} tooltip=\"The number of seconds between datapoints.\">\n          <Input value={wave.timeStep} type=\"number\" placeholder={'60'} width={6} onChange={this.onTimeStepChange} />\n        </InlineField>\n        <InlineField label={'Labels'}>\n          <Input value={wave.labels} placeholder={'labels'} width={12} onChange={this.onLabelsChange} />\n        </InlineField>\n        <InlineField label={'Name'}>\n          <Input value={wave.name} placeholder={'name'} width={10} onChange={this.onNameChange} />\n        </InlineField>\n        <Button icon={last ? 'plus' : 'minus'} variant=\"secondary\" onClick={action} />\n      </InlineFieldRow>\n    );\n  }\n}\n\nexport class CSVWavesEditor extends PureComponent<WavesProps> {\n  onChange = (index: number, wave?: CSVWave) => {\n    let waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    if (wave) {\n      waves[index] = { ...wave };\n    } else {\n      // remove the element\n      waves.splice(index, 1);\n    }\n    this.props.onChange(waves);\n  };\n\n  onAdd = () => {\n    const waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    waves.push({ ...defaultCSVWaveQuery[0] });\n    this.props.onChange(waves);\n  };\n\n  render() {\n    let waves = this.props.waves ?? defaultCSVWaveQuery;\n    if (!waves.length) {\n      waves = defaultCSVWaveQuery;\n    }\n\n    return (\n      <>\n        {waves.map((wave, index) => (\n          <CSVWaveEditor\n            key={`${index}/${wave.valuesCSV}`}\n            wave={wave}\n            index={index}\n            onAdd={this.onAdd}\n            onChange={this.onChange}\n            last={index === waves.length - 1}\n          />\n        ))}\n      </>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}