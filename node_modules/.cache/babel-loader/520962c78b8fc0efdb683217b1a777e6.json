{"ast":null,"code":"var _Icon, _Icon2;\n\nimport { css, cx } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { useStyles2 } from '../../themes';\nimport { Button } from '../Button';\nimport { Icon } from '../Icon/Icon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const Pagination = ({\n  currentPage,\n  numberOfPages,\n  onNavigate,\n  hideWhenSinglePage,\n  showSmallVersion,\n  className\n}) => {\n  const styles = useStyles2(getStyles);\n  const pageLengthToCondense = showSmallVersion ? 1 : 8;\n  const pageButtons = useMemo(() => {\n    const pages = [...new Array(numberOfPages).keys()];\n    const condensePages = numberOfPages > pageLengthToCondense;\n\n    const getListItem = (page, variant) => /*#__PURE__*/_jsx(\"li\", {\n      className: styles.item,\n      children: /*#__PURE__*/_jsx(Button, {\n        size: \"sm\",\n        variant: variant,\n        onClick: () => onNavigate(page),\n        children: page\n      })\n    }, page);\n\n    return pages.reduce((pagesToRender, pageIndex) => {\n      const page = pageIndex + 1;\n      const variant = page === currentPage ? 'primary' : 'secondary'; // The indexes at which to start and stop condensing pages\n\n      const lowerBoundIndex = pageLengthToCondense;\n      const upperBoundIndex = numberOfPages - pageLengthToCondense + 1; // When the indexes overlap one another this number is negative\n\n      const differenceOfBounds = upperBoundIndex - lowerBoundIndex;\n      const isFirstOrLastPage = page === 1 || page === numberOfPages; // This handles when the lowerBoundIndex < currentPage < upperBoundIndex\n\n      const currentPageIsBetweenBounds = differenceOfBounds > -1 && currentPage >= lowerBoundIndex && currentPage <= upperBoundIndex; // Show ellipsis after that many pages\n\n      const ellipsisOffset = showSmallVersion ? 1 : 3; // The offset to show more pages when currentPageIsBetweenBounds\n\n      const pageOffset = showSmallVersion ? 0 : 2;\n\n      if (condensePages) {\n        if (isFirstOrLastPage || currentPage < lowerBoundIndex && page < lowerBoundIndex || differenceOfBounds >= 0 && currentPage > upperBoundIndex && page > upperBoundIndex || differenceOfBounds < 0 && currentPage >= lowerBoundIndex && page > upperBoundIndex || currentPageIsBetweenBounds && page >= currentPage - pageOffset && page <= currentPage + pageOffset) {\n          // Renders a button for the page\n          pagesToRender.push(getListItem(page, variant));\n        } else if (page === lowerBoundIndex && currentPage < lowerBoundIndex || page === upperBoundIndex && currentPage > upperBoundIndex || currentPageIsBetweenBounds && (page === currentPage - ellipsisOffset || page === currentPage + ellipsisOffset)) {\n          // Renders and ellipsis to represent condensed pages\n          pagesToRender.push( /*#__PURE__*/_jsx(\"li\", {\n            className: styles.item,\n            children: /*#__PURE__*/_jsx(Icon, {\n              className: styles.ellipsis,\n              name: \"ellipsis-v\"\n            })\n          }, page));\n        }\n      } else {\n        pagesToRender.push(getListItem(page, variant));\n      }\n\n      return pagesToRender;\n    }, []);\n  }, [currentPage, numberOfPages, onNavigate, pageLengthToCondense, showSmallVersion, styles.ellipsis, styles.item]);\n\n  if (hideWhenSinglePage && numberOfPages <= 1) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: cx(styles.container, className),\n    children: /*#__PURE__*/_jsxs(\"ol\", {\n      children: [/*#__PURE__*/_jsx(\"li\", {\n        className: styles.item,\n        children: /*#__PURE__*/_jsx(Button, {\n          \"aria-label\": \"previous\",\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: () => onNavigate(currentPage - 1),\n          disabled: currentPage === 1,\n          children: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n            name: \"angle-left\"\n          }))\n        })\n      }), pageButtons, /*#__PURE__*/_jsx(\"li\", {\n        className: styles.item,\n        children: /*#__PURE__*/_jsx(Button, {\n          \"aria-label\": \"next\",\n          size: \"sm\",\n          variant: \"secondary\",\n          onClick: () => onNavigate(currentPage + 1),\n          disabled: currentPage === numberOfPages,\n          children: _Icon2 || (_Icon2 = /*#__PURE__*/_jsx(Icon, {\n            name: \"angle-right\"\n          }))\n        })\n      })]\n    })\n  });\n};\n\nconst getStyles = () => {\n  return {\n    container: css`\n      float: right;\n    `,\n    item: css`\n      display: inline-block;\n      padding-left: 10px;\n      margin-bottom: 5px;\n    `,\n    ellipsis: css`\n      transform: rotate(90deg);\n    `\n  };\n};","map":{"version":3,"names":["css","cx","React","useMemo","useStyles2","Button","Icon","Pagination","currentPage","numberOfPages","onNavigate","hideWhenSinglePage","showSmallVersion","className","styles","getStyles","pageLengthToCondense","pageButtons","pages","Array","keys","condensePages","getListItem","page","variant","item","reduce","pagesToRender","pageIndex","lowerBoundIndex","upperBoundIndex","differenceOfBounds","isFirstOrLastPage","currentPageIsBetweenBounds","ellipsisOffset","pageOffset","push","ellipsis","container"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Pagination/Pagination.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { useStyles2 } from '../../themes';\nimport { Button, ButtonVariant } from '../Button';\nimport { Icon } from '../Icon/Icon';\n\nexport interface Props {\n  /** The current page index being shown. */\n  currentPage: number;\n  /** Number of total pages. */\n  numberOfPages: number;\n  /** Callback function for fetching the selected page.  */\n  onNavigate: (toPage: number) => void;\n  /** When set to true and the pagination result is only one page it will not render the pagination at all. */\n  hideWhenSinglePage?: boolean;\n  /** Small version only shows the current page and the navigation buttons. */\n  showSmallVersion?: boolean;\n  className?: string;\n}\n\nexport const Pagination: React.FC<Props> = ({\n  currentPage,\n  numberOfPages,\n  onNavigate,\n  hideWhenSinglePage,\n  showSmallVersion,\n  className,\n}) => {\n  const styles = useStyles2(getStyles);\n  const pageLengthToCondense = showSmallVersion ? 1 : 8;\n\n  const pageButtons = useMemo(() => {\n    const pages = [...new Array(numberOfPages).keys()];\n\n    const condensePages = numberOfPages > pageLengthToCondense;\n    const getListItem = (page: number, variant: 'primary' | 'secondary') => (\n      <li key={page} className={styles.item}>\n        <Button size=\"sm\" variant={variant} onClick={() => onNavigate(page)}>\n          {page}\n        </Button>\n      </li>\n    );\n\n    return pages.reduce<JSX.Element[]>((pagesToRender, pageIndex) => {\n      const page = pageIndex + 1;\n      const variant: ButtonVariant = page === currentPage ? 'primary' : 'secondary';\n\n      // The indexes at which to start and stop condensing pages\n      const lowerBoundIndex = pageLengthToCondense;\n      const upperBoundIndex = numberOfPages - pageLengthToCondense + 1;\n      // When the indexes overlap one another this number is negative\n      const differenceOfBounds = upperBoundIndex - lowerBoundIndex;\n\n      const isFirstOrLastPage = page === 1 || page === numberOfPages;\n      // This handles when the lowerBoundIndex < currentPage < upperBoundIndex\n      const currentPageIsBetweenBounds =\n        differenceOfBounds > -1 && currentPage >= lowerBoundIndex && currentPage <= upperBoundIndex;\n\n      // Show ellipsis after that many pages\n      const ellipsisOffset = showSmallVersion ? 1 : 3;\n\n      // The offset to show more pages when currentPageIsBetweenBounds\n      const pageOffset = showSmallVersion ? 0 : 2;\n\n      if (condensePages) {\n        if (\n          isFirstOrLastPage ||\n          (currentPage < lowerBoundIndex && page < lowerBoundIndex) ||\n          (differenceOfBounds >= 0 && currentPage > upperBoundIndex && page > upperBoundIndex) ||\n          (differenceOfBounds < 0 && currentPage >= lowerBoundIndex && page > upperBoundIndex) ||\n          (currentPageIsBetweenBounds && page >= currentPage - pageOffset && page <= currentPage + pageOffset)\n        ) {\n          // Renders a button for the page\n          pagesToRender.push(getListItem(page, variant));\n        } else if (\n          (page === lowerBoundIndex && currentPage < lowerBoundIndex) ||\n          (page === upperBoundIndex && currentPage > upperBoundIndex) ||\n          (currentPageIsBetweenBounds &&\n            (page === currentPage - ellipsisOffset || page === currentPage + ellipsisOffset))\n        ) {\n          // Renders and ellipsis to represent condensed pages\n          pagesToRender.push(\n            <li key={page} className={styles.item}>\n              <Icon className={styles.ellipsis} name=\"ellipsis-v\" />\n            </li>\n          );\n        }\n      } else {\n        pagesToRender.push(getListItem(page, variant));\n      }\n      return pagesToRender;\n    }, []);\n  }, [currentPage, numberOfPages, onNavigate, pageLengthToCondense, showSmallVersion, styles.ellipsis, styles.item]);\n\n  if (hideWhenSinglePage && numberOfPages <= 1) {\n    return null;\n  }\n\n  return (\n    <div className={cx(styles.container, className)}>\n      <ol>\n        <li className={styles.item}>\n          <Button\n            aria-label=\"previous\"\n            size=\"sm\"\n            variant=\"secondary\"\n            onClick={() => onNavigate(currentPage - 1)}\n            disabled={currentPage === 1}\n          >\n            <Icon name=\"angle-left\" />\n          </Button>\n        </li>\n        {pageButtons}\n        <li className={styles.item}>\n          <Button\n            aria-label=\"next\"\n            size=\"sm\"\n            variant=\"secondary\"\n            onClick={() => onNavigate(currentPage + 1)}\n            disabled={currentPage === numberOfPages}\n          >\n            <Icon name=\"angle-right\" />\n          </Button>\n        </li>\n      </ol>\n    </div>\n  );\n};\n\nconst getStyles = () => {\n  return {\n    container: css`\n      float: right;\n    `,\n    item: css`\n      display: inline-block;\n      padding-left: 10px;\n      margin-bottom: 5px;\n    `,\n    ellipsis: css`\n      transform: rotate(90deg);\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}