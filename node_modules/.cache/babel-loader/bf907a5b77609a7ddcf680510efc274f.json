{"ast":null,"code":"var _EmptyQueryListBanner;\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useDebounce } from 'react-use';\nimport { ConfirmModal } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport EmptyListCTA from '../../core/components/EmptyListCTA/EmptyListCTA';\nimport { EmptyQueryListBanner } from './EmptyQueryListBanner';\nimport { PlaylistPageList } from './PlaylistPageList';\nimport { StartModal } from './StartModal';\nimport { deletePlaylist, getAllPlaylist } from './api';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const PlaylistPage = ({\n  navModel\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState(searchQuery);\n  const [hasFetched, setHasFetched] = useState(false);\n  const [startPlaylist, setStartPlaylist] = useState();\n  const [playlistToDelete, setPlaylistToDelete] = useState();\n  const [forcePlaylistsFetch, setForcePlaylistsFetch] = useState(0);\n  const [playlists, setPlaylists] = useState([]);\n  useDebounce(async () => {\n    const playlists = await getAllPlaylist(searchQuery);\n\n    if (!hasFetched) {\n      setHasFetched(true);\n    }\n\n    setPlaylists(playlists);\n    setDebouncedSearchQuery(searchQuery);\n  }, 350, [forcePlaylistsFetch, searchQuery]);\n  const hasPlaylists = playlists && playlists.length > 0;\n\n  const onDismissDelete = () => setPlaylistToDelete(undefined);\n\n  const onDeletePlaylist = () => {\n    if (!playlistToDelete) {\n      return;\n    }\n\n    deletePlaylist(playlistToDelete.uid).finally(() => {\n      setForcePlaylistsFetch(forcePlaylistsFetch + 1);\n      setPlaylistToDelete(undefined);\n    });\n  };\n\n  const emptyListBanner = /*#__PURE__*/_jsx(EmptyListCTA, {\n    title: \"There are no playlists created yet\",\n    buttonIcon: \"plus\",\n    buttonLink: \"playlists/new\",\n    buttonTitle: \"Create Playlist\",\n    buttonDisabled: !contextSrv.isEditor,\n    proTip: \"You can use playlists to cycle dashboards on TVs without user control\",\n    proTipLink: \"http://docs.grafana.org/reference/playlist/\",\n    proTipLinkTitle: \"Learn more\",\n    proTipTarget: \"_blank\"\n  });\n\n  const showSearch = playlists.length > 0 || searchQuery.length > 0 || debouncedSearchQuery.length > 0;\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      isLoading: !hasFetched,\n      children: [showSearch && /*#__PURE__*/_jsx(PageActionBar, {\n        searchQuery: searchQuery,\n        linkButton: contextSrv.isEditor && {\n          title: 'New playlist',\n          href: '/playlists/new'\n        },\n        setSearchQuery: setSearchQuery\n      }), !hasPlaylists && searchQuery ? _EmptyQueryListBanner || (_EmptyQueryListBanner = /*#__PURE__*/_jsx(EmptyQueryListBanner, {})) : /*#__PURE__*/_jsx(PlaylistPageList, {\n        playlists: playlists,\n        setStartPlaylist: setStartPlaylist,\n        setPlaylistToDelete: setPlaylistToDelete\n      }), !showSearch && emptyListBanner, playlistToDelete && /*#__PURE__*/_jsx(ConfirmModal, {\n        title: playlistToDelete.name,\n        confirmText: \"Delete\",\n        body: `Are you sure you want to delete '${playlistToDelete.name}' playlist?`,\n        onConfirm: onDeletePlaylist,\n        isOpen: Boolean(playlistToDelete),\n        onDismiss: onDismissDelete\n      }), startPlaylist && /*#__PURE__*/_jsx(StartModal, {\n        playlist: startPlaylist,\n        onDismiss: () => setStartPlaylist(undefined)\n      })]\n    })\n  });\n};\n\nconst mapStateToProps = state => ({\n  navModel: getNavModel(state.navIndex, 'playlists')\n});\n\nexport default connect(mapStateToProps)(PlaylistPage);","map":{"version":3,"names":["React","useState","connect","useDebounce","ConfirmModal","Page","PageActionBar","getNavModel","contextSrv","EmptyListCTA","EmptyQueryListBanner","PlaylistPageList","StartModal","deletePlaylist","getAllPlaylist","PlaylistPage","navModel","searchQuery","setSearchQuery","debouncedSearchQuery","setDebouncedSearchQuery","hasFetched","setHasFetched","startPlaylist","setStartPlaylist","playlistToDelete","setPlaylistToDelete","forcePlaylistsFetch","setForcePlaylistsFetch","playlists","setPlaylists","hasPlaylists","length","onDismissDelete","undefined","onDeletePlaylist","uid","finally","emptyListBanner","isEditor","showSearch","title","href","name","Boolean","mapStateToProps","state","navIndex"],"sources":["/home/soula/grafana/public/app/features/playlist/PlaylistPage.tsx"],"sourcesContent":["import React, { FC, useState } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { useDebounce } from 'react-use';\n\nimport { NavModel } from '@grafana/data';\nimport { ConfirmModal } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { StoreState } from 'app/types';\n\nimport EmptyListCTA from '../../core/components/EmptyListCTA/EmptyListCTA';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\n\nimport { EmptyQueryListBanner } from './EmptyQueryListBanner';\nimport { PlaylistPageList } from './PlaylistPageList';\nimport { StartModal } from './StartModal';\nimport { deletePlaylist, getAllPlaylist } from './api';\nimport { PlaylistDTO } from './types';\n\ninterface ConnectedProps {\n  navModel: NavModel;\n}\nexport interface PlaylistPageProps extends ConnectedProps, GrafanaRouteComponentProps {}\n\nexport const PlaylistPage: FC<PlaylistPageProps> = ({ navModel }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState(searchQuery);\n  const [hasFetched, setHasFetched] = useState(false);\n  const [startPlaylist, setStartPlaylist] = useState<PlaylistDTO | undefined>();\n  const [playlistToDelete, setPlaylistToDelete] = useState<PlaylistDTO | undefined>();\n  const [forcePlaylistsFetch, setForcePlaylistsFetch] = useState(0);\n\n  const [playlists, setPlaylists] = useState<PlaylistDTO[]>([]);\n\n  useDebounce(\n    async () => {\n      const playlists = await getAllPlaylist(searchQuery);\n      if (!hasFetched) {\n        setHasFetched(true);\n      }\n      setPlaylists(playlists);\n      setDebouncedSearchQuery(searchQuery);\n    },\n    350,\n    [forcePlaylistsFetch, searchQuery]\n  );\n\n  const hasPlaylists = playlists && playlists.length > 0;\n  const onDismissDelete = () => setPlaylistToDelete(undefined);\n  const onDeletePlaylist = () => {\n    if (!playlistToDelete) {\n      return;\n    }\n    deletePlaylist(playlistToDelete.uid).finally(() => {\n      setForcePlaylistsFetch(forcePlaylistsFetch + 1);\n      setPlaylistToDelete(undefined);\n    });\n  };\n\n  const emptyListBanner = (\n    <EmptyListCTA\n      title=\"There are no playlists created yet\"\n      buttonIcon=\"plus\"\n      buttonLink=\"playlists/new\"\n      buttonTitle=\"Create Playlist\"\n      buttonDisabled={!contextSrv.isEditor}\n      proTip=\"You can use playlists to cycle dashboards on TVs without user control\"\n      proTipLink=\"http://docs.grafana.org/reference/playlist/\"\n      proTipLinkTitle=\"Learn more\"\n      proTipTarget=\"_blank\"\n    />\n  );\n\n  const showSearch = playlists.length > 0 || searchQuery.length > 0 || debouncedSearchQuery.length > 0;\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={!hasFetched}>\n        {showSearch && (\n          <PageActionBar\n            searchQuery={searchQuery}\n            linkButton={contextSrv.isEditor && { title: 'New playlist', href: '/playlists/new' }}\n            setSearchQuery={setSearchQuery}\n          />\n        )}\n\n        {!hasPlaylists && searchQuery ? (\n          <EmptyQueryListBanner />\n        ) : (\n          <PlaylistPageList\n            playlists={playlists}\n            setStartPlaylist={setStartPlaylist}\n            setPlaylistToDelete={setPlaylistToDelete}\n          />\n        )}\n        {!showSearch && emptyListBanner}\n        {playlistToDelete && (\n          <ConfirmModal\n            title={playlistToDelete.name}\n            confirmText=\"Delete\"\n            body={`Are you sure you want to delete '${playlistToDelete.name}' playlist?`}\n            onConfirm={onDeletePlaylist}\n            isOpen={Boolean(playlistToDelete)}\n            onDismiss={onDismissDelete}\n          />\n        )}\n        {startPlaylist && <StartModal playlist={startPlaylist} onDismiss={() => setStartPlaylist(undefined)} />}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'playlists'),\n});\n\nexport default connect(mapStateToProps)(PlaylistPage);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}