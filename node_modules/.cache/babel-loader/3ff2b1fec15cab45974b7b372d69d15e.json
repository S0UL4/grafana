{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { linkedTokenBuilder } from './linkedTokenBuilder';\nimport { StatementPosition } from './types';\n\n/*\nCompletionItemProvider is an extendable class which needs to implement :\n- tokenTypes\n- getStatementPosition\n- getSuggestionKinds\n- getSuggestions\n*/\nexport class CompletionItemProvider {\n  constructor(datasource, templateSrv = getTemplateSrv()) {\n    _defineProperty(this, \"templateVariables\", void 0);\n\n    _defineProperty(this, \"datasource\", void 0);\n\n    _defineProperty(this, \"templateSrv\", void 0);\n\n    _defineProperty(this, \"tokenTypes\", void 0);\n\n    this.datasource = datasource;\n    this.templateSrv = templateSrv;\n    this.templateVariables = this.datasource.getVariables();\n    this.templateSrv = templateSrv; // implement with more specific tokens when extending this class\n\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis',\n      Whitespace: 'white',\n      Keyword: 'keyword',\n      Delimiter: 'delimiter',\n      Operator: 'operator',\n      Identifier: 'identifier',\n      Type: 'type',\n      Function: 'predefined',\n      Number: 'number',\n      String: 'string',\n      Variable: 'variable'\n    };\n  } // implemented by subclasses, given a token, returns a lexical position in a query\n\n\n  getStatementPosition(currentToken) {\n    return StatementPosition.Unknown;\n  } // implemented by subclasses, given a lexical statement position, returns potential kinds of suggestions\n\n\n  getSuggestionKinds(position) {\n    return [];\n  } // implemented by subclasses, given potential suggestions kinds, returns suggestion objects for monaco aka \"CompletionItem\"\n\n\n  getSuggestions(monaco, currentToken, suggestionKinds, statementPosition, position) {\n    return Promise.reject([]);\n  } // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n\n\n  getCompletionProvider(monaco, languageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"],\n      // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model, position) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const statementPosition = this.getStatementPosition(currentToken);\n        const suggestionKinds = this.getSuggestionKinds(statementPosition);\n        const suggestions = await this.getSuggestions(monaco, currentToken, suggestionKinds, statementPosition, position);\n        return {\n          suggestions\n        };\n      }\n    };\n  }\n\n}","map":{"version":3,"names":["getTemplateSrv","linkedTokenBuilder","StatementPosition","CompletionItemProvider","constructor","datasource","templateSrv","templateVariables","getVariables","tokenTypes","Parenthesis","Whitespace","Keyword","Delimiter","Operator","Identifier","Type","Function","Number","String","Variable","getStatementPosition","currentToken","Unknown","getSuggestionKinds","position","getSuggestions","monaco","suggestionKinds","statementPosition","Promise","reject","getCompletionProvider","languageDefinition","triggerCharacters","provideCompletionItems","model","suggestions"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/monarch/CompletionItemProvider.ts"],"sourcesContent":["import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\n\nimport { LinkedToken } from './LinkedToken';\nimport { linkedTokenBuilder } from './linkedTokenBuilder';\nimport { LanguageDefinition } from './register';\nimport { Completeable, StatementPosition, SuggestionKind, TokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\n/*\nCompletionItemProvider is an extendable class which needs to implement :\n- tokenTypes\n- getStatementPosition\n- getSuggestionKinds\n- getSuggestions\n*/\nexport class CompletionItemProvider implements Completeable {\n  templateVariables: string[];\n  datasource: CloudWatchDatasource;\n  templateSrv: TemplateSrv;\n  tokenTypes: TokenTypes;\n\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    this.datasource = datasource;\n    this.templateSrv = templateSrv;\n    this.templateVariables = this.datasource.getVariables();\n    this.templateSrv = templateSrv;\n\n    // implement with more specific tokens when extending this class\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis',\n      Whitespace: 'white',\n      Keyword: 'keyword',\n      Delimiter: 'delimiter',\n      Operator: 'operator',\n      Identifier: 'identifier',\n      Type: 'type',\n      Function: 'predefined',\n      Number: 'number',\n      String: 'string',\n      Variable: 'variable',\n    };\n  }\n\n  // implemented by subclasses, given a token, returns a lexical position in a query\n  getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n    return StatementPosition.Unknown;\n  }\n\n  // implemented by subclasses, given a lexical statement position, returns potential kinds of suggestions\n  getSuggestionKinds(position: StatementPosition): SuggestionKind[] {\n    return [];\n  }\n\n  // implemented by subclasses, given potential suggestions kinds, returns suggestion objects for monaco aka \"CompletionItem\"\n  getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    return Promise.reject([]);\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const statementPosition = this.getStatementPosition(currentToken);\n        const suggestionKinds = this.getSuggestionKinds(statementPosition);\n        const suggestions = await this.getSuggestions(\n          monaco,\n          currentToken,\n          suggestionKinds,\n          statementPosition,\n          position\n        );\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n"],"mappings":";;AAAA,SAASA,cAAT,QAA4C,kBAA5C;AAMA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,SAAuBC,iBAAvB,QAA4E,SAA5E;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAN,CAAqD;EAM1DC,WAAW,CAACC,UAAD,EAAmCC,WAAwB,GAAGN,cAAc,EAA5E,EAAgF;IAAA;;IAAA;;IAAA;;IAAA;;IACzF,KAAKK,UAAL,GAAkBA,UAAlB;IACA,KAAKC,WAAL,GAAmBA,WAAnB;IACA,KAAKC,iBAAL,GAAyB,KAAKF,UAAL,CAAgBG,YAAhB,EAAzB;IACA,KAAKF,WAAL,GAAmBA,WAAnB,CAJyF,CAMzF;;IACA,KAAKG,UAAL,GAAkB;MAChBC,WAAW,EAAE,uBADG;MAEhBC,UAAU,EAAE,OAFI;MAGhBC,OAAO,EAAE,SAHO;MAIhBC,SAAS,EAAE,WAJK;MAKhBC,QAAQ,EAAE,UALM;MAMhBC,UAAU,EAAE,YANI;MAOhBC,IAAI,EAAE,MAPU;MAQhBC,QAAQ,EAAE,YARM;MAShBC,MAAM,EAAE,QATQ;MAUhBC,MAAM,EAAE,QAVQ;MAWhBC,QAAQ,EAAE;IAXM,CAAlB;EAaD,CA1ByD,CA4B1D;;;EACAC,oBAAoB,CAACC,YAAD,EAAsD;IACxE,OAAOpB,iBAAiB,CAACqB,OAAzB;EACD,CA/ByD,CAiC1D;;;EACAC,kBAAkB,CAACC,QAAD,EAAgD;IAChE,OAAO,EAAP;EACD,CApCyD,CAsC1D;;;EACAC,cAAc,CACZC,MADY,EAEZL,YAFY,EAGZM,eAHY,EAIZC,iBAJY,EAKZJ,QALY,EAMe;IAC3B,OAAOK,OAAO,CAACC,MAAR,CAAe,EAAf,CAAP;EACD,CA/CyD,CAiD1D;EACA;;;EACAC,qBAAqB,CAACL,MAAD,EAAiBM,kBAAjB,EAAyD;IAC5E,OAAO;MACLC,iBAAiB,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CADd;MACyC;MAC9CC,sBAAsB,EAAE,OAAOC,KAAP,EAA6CX,QAA7C,KAAiF;QACvG,MAAMH,YAAY,GAAGrB,kBAAkB,CAAC0B,MAAD,EAASM,kBAAT,EAA6BG,KAA7B,EAAoCX,QAApC,EAA8C,KAAKhB,UAAnD,CAAvC;QACA,MAAMoB,iBAAiB,GAAG,KAAKR,oBAAL,CAA0BC,YAA1B,CAA1B;QACA,MAAMM,eAAe,GAAG,KAAKJ,kBAAL,CAAwBK,iBAAxB,CAAxB;QACA,MAAMQ,WAAW,GAAG,MAAM,KAAKX,cAAL,CACxBC,MADwB,EAExBL,YAFwB,EAGxBM,eAHwB,EAIxBC,iBAJwB,EAKxBJ,QALwB,CAA1B;QAQA,OAAO;UACLY;QADK,CAAP;MAGD;IAjBI,CAAP;EAmBD;;AAvEyD"},"metadata":{},"sourceType":"module"}