{"ast":null,"code":"import { FieldType, getFieldDisplayName, PanelPlugin, ReducerID, standardEditorsRegistry } from '@grafana/data';\nimport { TableCellDisplayMode } from '@grafana/ui';\nimport { PaginationEditor } from './PaginationEditor';\nimport { TablePanel } from './TablePanel';\nimport { tableMigrationHandler, tablePanelChangedHandler } from './migrations';\nimport { defaultPanelOptions, defaultPanelFieldConfig } from './models.gen';\nimport { TableSuggestionsSupplier } from './suggestions';\nconst footerCategory = 'Table footer';\nexport const plugin = new PanelPlugin(TablePanel).setPanelChangeHandler(tablePanelChangedHandler).setMigrationHandler(tableMigrationHandler).setNoPadding().useFieldConfig({\n  useCustomConfig: builder => {\n    builder.addNumberInput({\n      path: 'minWidth',\n      name: 'Minimum column width',\n      description: 'The minimum width for column auto resizing',\n      settings: {\n        placeholder: '150',\n        min: 50,\n        max: 500\n      },\n      shouldApply: () => true,\n      defaultValue: defaultPanelFieldConfig.minWidth\n    }).addNumberInput({\n      path: 'width',\n      name: 'Column width',\n      settings: {\n        placeholder: 'auto',\n        min: 20,\n        max: 300\n      },\n      shouldApply: () => true,\n      defaultValue: defaultPanelFieldConfig.width\n    }).addRadio({\n      path: 'align',\n      name: 'Column alignment',\n      settings: {\n        options: [{\n          label: 'auto',\n          value: 'auto'\n        }, {\n          label: 'left',\n          value: 'left'\n        }, {\n          label: 'center',\n          value: 'center'\n        }, {\n          label: 'right',\n          value: 'right'\n        }]\n      },\n      defaultValue: defaultPanelFieldConfig.align\n    }).addSelect({\n      path: 'displayMode',\n      name: 'Cell display mode',\n      description: 'Color text, background, show as gauge, etc',\n      settings: {\n        options: [{\n          value: TableCellDisplayMode.Auto,\n          label: 'Auto'\n        }, {\n          value: TableCellDisplayMode.ColorText,\n          label: 'Color text'\n        }, {\n          value: TableCellDisplayMode.ColorBackground,\n          label: 'Color background (gradient)'\n        }, {\n          value: TableCellDisplayMode.ColorBackgroundSolid,\n          label: 'Color background (solid)'\n        }, {\n          value: TableCellDisplayMode.GradientGauge,\n          label: 'Gradient gauge'\n        }, {\n          value: TableCellDisplayMode.LcdGauge,\n          label: 'LCD gauge'\n        }, {\n          value: TableCellDisplayMode.BasicGauge,\n          label: 'Basic gauge'\n        }, {\n          value: TableCellDisplayMode.JSONView,\n          label: 'JSON View'\n        }, {\n          value: TableCellDisplayMode.Image,\n          label: 'Image'\n        }]\n      },\n      defaultValue: defaultPanelFieldConfig.displayMode\n    }).addBooleanSwitch({\n      path: 'inspect',\n      name: 'Cell value inspect',\n      description: 'Enable cell value inspection in a modal window',\n      defaultValue: false,\n      showIf: cfg => {\n        return cfg.displayMode === TableCellDisplayMode.Auto || cfg.displayMode === TableCellDisplayMode.JSONView || cfg.displayMode === TableCellDisplayMode.ColorText || cfg.displayMode === TableCellDisplayMode.ColorBackground || cfg.displayMode === TableCellDisplayMode.ColorBackgroundSolid;\n      }\n    }).addBooleanSwitch({\n      path: 'filterable',\n      name: 'Column filter',\n      description: 'Enables/disables field filters in table',\n      defaultValue: defaultPanelFieldConfig.filterable\n    }).addBooleanSwitch({\n      path: 'hidden',\n      name: 'Hide in table',\n      defaultValue: undefined,\n      hideFromDefaults: true\n    });\n  }\n}).setPanelOptions(builder => {\n  var _defaultPanelOptions$;\n\n  builder.addBooleanSwitch({\n    path: 'showHeader',\n    name: 'Show table header',\n    defaultValue: defaultPanelOptions.showHeader\n  }).addBooleanSwitch({\n    path: 'footer.show',\n    category: [footerCategory],\n    name: 'Show table footer',\n    defaultValue: (_defaultPanelOptions$ = defaultPanelOptions.footer) === null || _defaultPanelOptions$ === void 0 ? void 0 : _defaultPanelOptions$.show\n  }).addCustomEditor({\n    id: 'footer.reducer',\n    category: [footerCategory],\n    path: 'footer.reducer',\n    name: 'Calculation',\n    description: 'Choose a reducer function / calculation',\n    editor: standardEditorsRegistry.get('stats-picker').editor,\n    defaultValue: [ReducerID.sum],\n    showIf: cfg => {\n      var _cfg$footer;\n\n      return (_cfg$footer = cfg.footer) === null || _cfg$footer === void 0 ? void 0 : _cfg$footer.show;\n    }\n  }).addMultiSelect({\n    path: 'footer.fields',\n    category: [footerCategory],\n    name: 'Fields',\n    description: 'Select the fields that should be calculated',\n    settings: {\n      allowCustomValue: false,\n      options: [],\n      placeholder: 'All Numeric Fields',\n      getOptions: async context => {\n        const options = [];\n\n        if (context && context.data && context.data.length > 0) {\n          const frame = context.data[0];\n\n          for (const field of frame.fields) {\n            if (field.type === FieldType.number) {\n              const name = getFieldDisplayName(field, frame, context.data);\n              const value = field.name;\n              options.push({\n                value,\n                label: name\n              });\n            }\n          }\n        }\n\n        return options;\n      }\n    },\n    defaultValue: '',\n    showIf: cfg => {\n      var _cfg$footer2;\n\n      return (_cfg$footer2 = cfg.footer) === null || _cfg$footer2 === void 0 ? void 0 : _cfg$footer2.show;\n    }\n  }).addCustomEditor({\n    id: 'footer.enablePagination',\n    path: 'footer.enablePagination',\n    name: 'Enable pagination',\n    editor: PaginationEditor\n  });\n}).setSuggestionsSupplier(new TableSuggestionsSupplier());","map":{"version":3,"names":["FieldType","getFieldDisplayName","PanelPlugin","ReducerID","standardEditorsRegistry","TableCellDisplayMode","PaginationEditor","TablePanel","tableMigrationHandler","tablePanelChangedHandler","defaultPanelOptions","defaultPanelFieldConfig","TableSuggestionsSupplier","footerCategory","plugin","setPanelChangeHandler","setMigrationHandler","setNoPadding","useFieldConfig","useCustomConfig","builder","addNumberInput","path","name","description","settings","placeholder","min","max","shouldApply","defaultValue","minWidth","width","addRadio","options","label","value","align","addSelect","Auto","ColorText","ColorBackground","ColorBackgroundSolid","GradientGauge","LcdGauge","BasicGauge","JSONView","Image","displayMode","addBooleanSwitch","showIf","cfg","filterable","undefined","hideFromDefaults","setPanelOptions","showHeader","category","footer","show","addCustomEditor","id","editor","get","sum","addMultiSelect","allowCustomValue","getOptions","context","data","length","frame","field","fields","type","number","push","setSuggestionsSupplier"],"sources":["/home/soula/grafana/public/app/plugins/panel/table/module.tsx"],"sourcesContent":["import {\n  FieldOverrideContext,\n  FieldType,\n  getFieldDisplayName,\n  PanelPlugin,\n  ReducerID,\n  standardEditorsRegistry,\n} from '@grafana/data';\nimport { TableFieldOptions } from '@grafana/schema';\nimport { TableCellDisplayMode } from '@grafana/ui';\n\nimport { PaginationEditor } from './PaginationEditor';\nimport { TablePanel } from './TablePanel';\nimport { tableMigrationHandler, tablePanelChangedHandler } from './migrations';\nimport { PanelOptions, defaultPanelOptions, defaultPanelFieldConfig } from './models.gen';\nimport { TableSuggestionsSupplier } from './suggestions';\n\nconst footerCategory = 'Table footer';\n\nexport const plugin = new PanelPlugin<PanelOptions, TableFieldOptions>(TablePanel)\n  .setPanelChangeHandler(tablePanelChangedHandler)\n  .setMigrationHandler(tableMigrationHandler)\n  .setNoPadding()\n  .useFieldConfig({\n    useCustomConfig: (builder) => {\n      builder\n        .addNumberInput({\n          path: 'minWidth',\n          name: 'Minimum column width',\n          description: 'The minimum width for column auto resizing',\n          settings: {\n            placeholder: '150',\n            min: 50,\n            max: 500,\n          },\n          shouldApply: () => true,\n          defaultValue: defaultPanelFieldConfig.minWidth,\n        })\n        .addNumberInput({\n          path: 'width',\n          name: 'Column width',\n          settings: {\n            placeholder: 'auto',\n            min: 20,\n            max: 300,\n          },\n          shouldApply: () => true,\n          defaultValue: defaultPanelFieldConfig.width,\n        })\n        .addRadio({\n          path: 'align',\n          name: 'Column alignment',\n          settings: {\n            options: [\n              { label: 'auto', value: 'auto' },\n              { label: 'left', value: 'left' },\n              { label: 'center', value: 'center' },\n              { label: 'right', value: 'right' },\n            ],\n          },\n          defaultValue: defaultPanelFieldConfig.align,\n        })\n        .addSelect({\n          path: 'displayMode',\n          name: 'Cell display mode',\n          description: 'Color text, background, show as gauge, etc',\n          settings: {\n            options: [\n              { value: TableCellDisplayMode.Auto, label: 'Auto' },\n              { value: TableCellDisplayMode.ColorText, label: 'Color text' },\n              { value: TableCellDisplayMode.ColorBackground, label: 'Color background (gradient)' },\n              { value: TableCellDisplayMode.ColorBackgroundSolid, label: 'Color background (solid)' },\n              { value: TableCellDisplayMode.GradientGauge, label: 'Gradient gauge' },\n              { value: TableCellDisplayMode.LcdGauge, label: 'LCD gauge' },\n              { value: TableCellDisplayMode.BasicGauge, label: 'Basic gauge' },\n              { value: TableCellDisplayMode.JSONView, label: 'JSON View' },\n              { value: TableCellDisplayMode.Image, label: 'Image' },\n            ],\n          },\n          defaultValue: defaultPanelFieldConfig.displayMode,\n        })\n        .addBooleanSwitch({\n          path: 'inspect',\n          name: 'Cell value inspect',\n          description: 'Enable cell value inspection in a modal window',\n          defaultValue: false,\n          showIf: (cfg) => {\n            return (\n              cfg.displayMode === TableCellDisplayMode.Auto ||\n              cfg.displayMode === TableCellDisplayMode.JSONView ||\n              cfg.displayMode === TableCellDisplayMode.ColorText ||\n              cfg.displayMode === TableCellDisplayMode.ColorBackground ||\n              cfg.displayMode === TableCellDisplayMode.ColorBackgroundSolid\n            );\n          },\n        })\n        .addBooleanSwitch({\n          path: 'filterable',\n          name: 'Column filter',\n          description: 'Enables/disables field filters in table',\n          defaultValue: defaultPanelFieldConfig.filterable,\n        })\n        .addBooleanSwitch({\n          path: 'hidden',\n          name: 'Hide in table',\n          defaultValue: undefined,\n          hideFromDefaults: true,\n        });\n    },\n  })\n  .setPanelOptions((builder) => {\n    builder\n      .addBooleanSwitch({\n        path: 'showHeader',\n        name: 'Show table header',\n        defaultValue: defaultPanelOptions.showHeader,\n      })\n      .addBooleanSwitch({\n        path: 'footer.show',\n        category: [footerCategory],\n        name: 'Show table footer',\n        defaultValue: defaultPanelOptions.footer?.show,\n      })\n      .addCustomEditor({\n        id: 'footer.reducer',\n        category: [footerCategory],\n        path: 'footer.reducer',\n        name: 'Calculation',\n        description: 'Choose a reducer function / calculation',\n        editor: standardEditorsRegistry.get('stats-picker').editor as any,\n        defaultValue: [ReducerID.sum],\n        showIf: (cfg) => cfg.footer?.show,\n      })\n      .addMultiSelect({\n        path: 'footer.fields',\n        category: [footerCategory],\n        name: 'Fields',\n        description: 'Select the fields that should be calculated',\n        settings: {\n          allowCustomValue: false,\n          options: [],\n          placeholder: 'All Numeric Fields',\n          getOptions: async (context: FieldOverrideContext) => {\n            const options = [];\n            if (context && context.data && context.data.length > 0) {\n              const frame = context.data[0];\n              for (const field of frame.fields) {\n                if (field.type === FieldType.number) {\n                  const name = getFieldDisplayName(field, frame, context.data);\n                  const value = field.name;\n                  options.push({ value, label: name } as any);\n                }\n              }\n            }\n            return options;\n          },\n        },\n        defaultValue: '',\n        showIf: (cfg) => cfg.footer?.show,\n      })\n      .addCustomEditor({\n        id: 'footer.enablePagination',\n        path: 'footer.enablePagination',\n        name: 'Enable pagination',\n        editor: PaginationEditor,\n      });\n  })\n  .setSuggestionsSupplier(new TableSuggestionsSupplier());\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}