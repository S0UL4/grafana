{"ast":null,"code":"export let PromQueryType;\n\n(function (PromQueryType) {\n  PromQueryType[\"timeSeriesQuery\"] = \"timeSeriesQuery\";\n})(PromQueryType || (PromQueryType = {}));\n\nexport function isMatrixData(result) {\n  return 'values' in result;\n}\nexport function isExemplarData(result) {\n  if (result == null || !Array.isArray(result)) {\n    return false;\n  }\n\n  return result.length ? 'exemplars' in result[0] : false;\n}\n\n/**\n * Auto = query.legendFormat == '__auto'\n * Verbose = query.legendFormat == null/undefined/''\n * Custom query.legendFormat.length > 0 && query.legendFormat !== '__auto'\n */\nexport let LegendFormatMode;\n\n(function (LegendFormatMode) {\n  LegendFormatMode[\"Auto\"] = \"__auto\";\n  LegendFormatMode[\"Verbose\"] = \"__verbose\";\n  LegendFormatMode[\"Custom\"] = \"__custom\";\n})(LegendFormatMode || (LegendFormatMode = {}));","map":{"version":3,"names":["PromQueryType","isMatrixData","result","isExemplarData","Array","isArray","length","LegendFormatMode"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/types.ts"],"sourcesContent":["import { DataQuery, DataSourceJsonData, QueryResultMeta, ScopedVars } from '@grafana/data';\n\nimport { QueryEditorMode } from './querybuilder/shared/types';\n\nexport interface PromQuery extends DataQuery {\n  expr: string;\n  format?: string;\n  instant?: boolean;\n  range?: boolean;\n  exemplar?: boolean;\n  hinting?: boolean;\n  interval?: string;\n  intervalFactor?: number;\n  // Timezone offset to align start & end time on backend\n  utcOffsetSec?: number;\n  legendFormat?: string;\n  valueWithRefId?: boolean;\n  requestId?: string;\n  showingGraph?: boolean;\n  showingTable?: boolean;\n  /** Code, Builder or Explain */\n  editorMode?: QueryEditorMode;\n}\n\nexport interface PromOptions extends DataSourceJsonData {\n  timeInterval?: string;\n  queryTimeout?: string;\n  httpMethod?: string;\n  directUrl?: string;\n  customQueryParameters?: string;\n  disableMetricsLookup?: boolean;\n  exemplarTraceIdDestinations?: ExemplarTraceIdDestination[];\n}\n\nexport enum PromQueryType {\n  timeSeriesQuery = 'timeSeriesQuery',\n}\n\nexport type ExemplarTraceIdDestination = {\n  name: string;\n  url?: string;\n  urlDisplayLabel?: string;\n  datasourceUid?: string;\n};\n\nexport interface PromQueryRequest extends PromQuery {\n  step?: number;\n  requestId?: string;\n  start: number;\n  end: number;\n  headers?: any;\n}\n\nexport interface PromMetricsMetadataItem {\n  type: string;\n  help: string;\n  unit?: string;\n}\n\nexport interface PromMetricsMetadata {\n  [metric: string]: PromMetricsMetadataItem;\n}\n\nexport interface PromDataSuccessResponse<T = PromData> {\n  status: 'success';\n  data: T;\n}\n\nexport interface PromDataErrorResponse<T = PromData> {\n  status: 'error';\n  errorType: string;\n  error: string;\n  data: T;\n}\n\nexport type PromData = PromMatrixData | PromVectorData | PromScalarData | PromExemplarData[];\n\nexport interface Labels {\n  [index: string]: any;\n}\n\nexport interface Exemplar {\n  labels: Labels;\n  value: number;\n  timestamp: number;\n}\n\nexport interface PromExemplarData {\n  seriesLabels: PromMetric;\n  exemplars: Exemplar[];\n}\n\nexport interface PromVectorData {\n  resultType: 'vector';\n  result: Array<{\n    metric: PromMetric;\n    value: PromValue;\n  }>;\n}\n\nexport interface PromMatrixData {\n  resultType: 'matrix';\n  result: Array<{\n    metric: PromMetric;\n    values: PromValue[];\n  }>;\n}\n\nexport interface PromScalarData {\n  resultType: 'scalar';\n  result: PromValue;\n}\n\nexport type PromValue = [number, any];\n\nexport interface PromMetric {\n  __name__?: string;\n  [index: string]: any;\n}\n\nexport function isMatrixData(result: MatrixOrVectorResult): result is PromMatrixData['result'][0] {\n  return 'values' in result;\n}\n\nexport function isExemplarData(result: PromData): result is PromExemplarData[] {\n  if (result == null || !Array.isArray(result)) {\n    return false;\n  }\n  return result.length ? 'exemplars' in result[0] : false;\n}\n\nexport type MatrixOrVectorResult = PromMatrixData['result'][0] | PromVectorData['result'][0];\n\nexport interface TransformOptions {\n  format?: string;\n  step?: number;\n  legendFormat?: string;\n  start: number;\n  end: number;\n  query: string;\n  responseListLength: number;\n  scopedVars?: ScopedVars;\n  refId: string;\n  valueWithRefId?: boolean;\n  meta: QueryResultMeta;\n}\n\nexport interface PromLabelQueryResponse {\n  data: {\n    status: string;\n    data: string[];\n  };\n  cancelled?: boolean;\n}\n\n/**\n * Auto = query.legendFormat == '__auto'\n * Verbose = query.legendFormat == null/undefined/''\n * Custom query.legendFormat.length > 0 && query.legendFormat !== '__auto'\n */\nexport enum LegendFormatMode {\n  Auto = '__auto',\n  Verbose = '__verbose',\n  Custom = '__custom',\n}\n"],"mappings":"AAkCA,WAAYA,aAAZ;;WAAYA,a;EAAAA,a;GAAAA,a,KAAAA,a;;AAsFZ,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA2F;EAChG,OAAO,YAAYA,MAAnB;AACD;AAED,OAAO,SAASC,cAAT,CAAwBD,MAAxB,EAAwE;EAC7E,IAAIA,MAAM,IAAI,IAAV,IAAkB,CAACE,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAvB,EAA8C;IAC5C,OAAO,KAAP;EACD;;EACD,OAAOA,MAAM,CAACI,MAAP,GAAgB,eAAeJ,MAAM,CAAC,CAAD,CAArC,GAA2C,KAAlD;AACD;;AA0BD;AACA;AACA;AACA;AACA;AACA,WAAYK,gBAAZ;;WAAYA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;GAAAA,gB,KAAAA,gB"},"metadata":{},"sourceType":"module"}