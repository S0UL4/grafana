{"ast":null,"code":"import { FieldColorModeId, FieldMatcherID } from '@grafana/data';\nexport const changeSeriesColorConfigFactory = (label, color, fieldConfig) => {\n  const {\n    overrides\n  } = fieldConfig;\n  const currentIndex = fieldConfig.overrides.findIndex(override => {\n    return override.matcher.id === FieldMatcherID.byName && override.matcher.options === label;\n  });\n\n  if (currentIndex < 0) {\n    return Object.assign({}, fieldConfig, {\n      overrides: [...fieldConfig.overrides, createOverride(label, color)]\n    });\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const existing = overridesCopy[currentIndex];\n  const propertyIndex = existing.properties.findIndex(p => p.id === 'color');\n\n  if (propertyIndex < 0) {\n    overridesCopy[currentIndex] = Object.assign({}, existing, {\n      properties: [...existing.properties, createProperty(color)]\n    });\n    return Object.assign({}, fieldConfig, {\n      overrides: overridesCopy\n    });\n  }\n\n  const propertiesCopy = Array.from(existing.properties);\n  propertiesCopy[propertyIndex] = createProperty(color);\n  overridesCopy[currentIndex] = Object.assign({}, existing, {\n    properties: propertiesCopy\n  });\n  return Object.assign({}, fieldConfig, {\n    overrides: overridesCopy\n  });\n};\n\nconst createOverride = (label, color) => {\n  return {\n    matcher: {\n      id: FieldMatcherID.byName,\n      options: label\n    },\n    properties: [createProperty(color)]\n  };\n};\n\nconst createProperty = color => {\n  return {\n    id: 'color',\n    value: {\n      mode: FieldColorModeId.Fixed,\n      fixedColor: color\n    }\n  };\n};","map":{"version":3,"names":["FieldColorModeId","FieldMatcherID","changeSeriesColorConfigFactory","label","color","fieldConfig","overrides","currentIndex","findIndex","override","matcher","id","byName","options","createOverride","overridesCopy","Array","from","existing","propertyIndex","properties","p","createProperty","propertiesCopy","value","mode","Fixed","fixedColor"],"sources":["/home/soula/grafana/public/app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory.ts"],"sourcesContent":["import {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldColorModeId,\n  FieldConfigSource,\n  FieldMatcherID,\n} from '@grafana/data';\n\nexport const changeSeriesColorConfigFactory = (\n  label: string,\n  color: string,\n  fieldConfig: FieldConfigSource\n): FieldConfigSource => {\n  const { overrides } = fieldConfig;\n  const currentIndex = fieldConfig.overrides.findIndex((override) => {\n    return override.matcher.id === FieldMatcherID.byName && override.matcher.options === label;\n  });\n\n  if (currentIndex < 0) {\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, createOverride(label, color)],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const existing = overridesCopy[currentIndex];\n  const propertyIndex = existing.properties.findIndex((p) => p.id === 'color');\n\n  if (propertyIndex < 0) {\n    overridesCopy[currentIndex] = {\n      ...existing,\n      properties: [...existing.properties, createProperty(color)],\n    };\n\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  const propertiesCopy = Array.from(existing.properties);\n  propertiesCopy[propertyIndex] = createProperty(color);\n\n  overridesCopy[currentIndex] = {\n    ...existing,\n    properties: propertiesCopy,\n  };\n\n  return {\n    ...fieldConfig,\n    overrides: overridesCopy,\n  };\n};\n\nconst createOverride = (label: string, color: string): ConfigOverrideRule => {\n  return {\n    matcher: {\n      id: FieldMatcherID.byName,\n      options: label,\n    },\n    properties: [createProperty(color)],\n  };\n};\n\nconst createProperty = (color: string): DynamicConfigValue => {\n  return {\n    id: 'color',\n    value: {\n      mode: FieldColorModeId.Fixed,\n      fixedColor: color,\n    },\n  };\n};\n"],"mappings":"AAAA,SAGEA,gBAHF,EAKEC,cALF,QAMO,eANP;AAQA,OAAO,MAAMC,8BAA8B,GAAG,CAC5CC,KAD4C,EAE5CC,KAF4C,EAG5CC,WAH4C,KAItB;EACtB,MAAM;IAAEC;EAAF,IAAgBD,WAAtB;EACA,MAAME,YAAY,GAAGF,WAAW,CAACC,SAAZ,CAAsBE,SAAtB,CAAiCC,QAAD,IAAc;IACjE,OAAOA,QAAQ,CAACC,OAAT,CAAiBC,EAAjB,KAAwBV,cAAc,CAACW,MAAvC,IAAiDH,QAAQ,CAACC,OAAT,CAAiBG,OAAjB,KAA6BV,KAArF;EACD,CAFoB,CAArB;;EAIA,IAAII,YAAY,GAAG,CAAnB,EAAsB;IACpB,yBACKF,WADL;MAEEC,SAAS,EAAE,CAAC,GAAGD,WAAW,CAACC,SAAhB,EAA2BQ,cAAc,CAACX,KAAD,EAAQC,KAAR,CAAzC;IAFb;EAID;;EAED,MAAMW,aAAa,GAAGC,KAAK,CAACC,IAAN,CAAWX,SAAX,CAAtB;EACA,MAAMY,QAAQ,GAAGH,aAAa,CAACR,YAAD,CAA9B;EACA,MAAMY,aAAa,GAAGD,QAAQ,CAACE,UAAT,CAAoBZ,SAApB,CAA+Ba,CAAD,IAAOA,CAAC,CAACV,EAAF,KAAS,OAA9C,CAAtB;;EAEA,IAAIQ,aAAa,GAAG,CAApB,EAAuB;IACrBJ,aAAa,CAACR,YAAD,CAAb,qBACKW,QADL;MAEEE,UAAU,EAAE,CAAC,GAAGF,QAAQ,CAACE,UAAb,EAAyBE,cAAc,CAAClB,KAAD,CAAvC;IAFd;IAKA,yBACKC,WADL;MAEEC,SAAS,EAAES;IAFb;EAID;;EAED,MAAMQ,cAAc,GAAGP,KAAK,CAACC,IAAN,CAAWC,QAAQ,CAACE,UAApB,CAAvB;EACAG,cAAc,CAACJ,aAAD,CAAd,GAAgCG,cAAc,CAAClB,KAAD,CAA9C;EAEAW,aAAa,CAACR,YAAD,CAAb,qBACKW,QADL;IAEEE,UAAU,EAAEG;EAFd;EAKA,yBACKlB,WADL;IAEEC,SAAS,EAAES;EAFb;AAID,CA7CM;;AA+CP,MAAMD,cAAc,GAAG,CAACX,KAAD,EAAgBC,KAAhB,KAAsD;EAC3E,OAAO;IACLM,OAAO,EAAE;MACPC,EAAE,EAAEV,cAAc,CAACW,MADZ;MAEPC,OAAO,EAAEV;IAFF,CADJ;IAKLiB,UAAU,EAAE,CAACE,cAAc,CAAClB,KAAD,CAAf;EALP,CAAP;AAOD,CARD;;AAUA,MAAMkB,cAAc,GAAIlB,KAAD,IAAuC;EAC5D,OAAO;IACLO,EAAE,EAAE,OADC;IAELa,KAAK,EAAE;MACLC,IAAI,EAAEzB,gBAAgB,CAAC0B,KADlB;MAELC,UAAU,EAAEvB;IAFP;EAFF,CAAP;AAOD,CARD"},"metadata":{},"sourceType":"module"}