{"ast":null,"code":"import { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchPromRulesAction, fetchRulerRulesAction } from '../state/actions';\nimport { Annotation, RULE_LIST_POLL_INTERVAL_MS } from '../utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport { initialAsyncRequestState } from '../utils/redux';\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nexport function usePanelCombinedRules({\n  dashboard,\n  panel,\n  poll = false\n}) {\n  var _useUnifiedAlertingSe, _useUnifiedAlertingSe2;\n\n  const dispatch = useDispatch();\n  const promRuleRequest = (_useUnifiedAlertingSe = useUnifiedAlertingSelector(state => state.promRules[GRAFANA_RULES_SOURCE_NAME])) !== null && _useUnifiedAlertingSe !== void 0 ? _useUnifiedAlertingSe : initialAsyncRequestState;\n  const rulerRuleRequest = (_useUnifiedAlertingSe2 = useUnifiedAlertingSelector(state => state.rulerRules[GRAFANA_RULES_SOURCE_NAME])) !== null && _useUnifiedAlertingSe2 !== void 0 ? _useUnifiedAlertingSe2 : initialAsyncRequestState; // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n\n  useEffect(() => {\n    const fetch = () => {\n      dispatch(fetchPromRulesAction({\n        rulesSourceName: GRAFANA_RULES_SOURCE_NAME,\n        filter: {\n          dashboardUID: dashboard.uid,\n          panelId: panel.id\n        }\n      }));\n      dispatch(fetchRulerRulesAction({\n        rulesSourceName: GRAFANA_RULES_SOURCE_NAME,\n        filter: {\n          dashboardUID: dashboard.uid,\n          panelId: panel.id\n        }\n      }));\n    };\n\n    fetch();\n\n    if (poll) {\n      const interval = setInterval(fetch, RULE_LIST_POLL_INTERVAL_MS);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n\n    return () => {};\n  }, [dispatch, poll, panel.id, dashboard.uid]);\n  const loading = promRuleRequest.loading || rulerRuleRequest.loading;\n  const errors = [promRuleRequest.error, rulerRuleRequest.error].filter(err => !!err);\n  const combinedNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME); // filter out rules that are relevant to this panel\n\n  const rules = useMemo(() => combinedNamespaces.flatMap(ns => ns.groups).flatMap(group => group.rules).filter(rule => rule.annotations[Annotation.dashboardUID] === dashboard.uid && rule.annotations[Annotation.panelID] === String(panel.id)), [combinedNamespaces, dashboard, panel]);\n  return {\n    rules,\n    errors,\n    loading\n  };\n}","map":{"version":3,"names":["useEffect","useMemo","useDispatch","fetchPromRulesAction","fetchRulerRulesAction","Annotation","RULE_LIST_POLL_INTERVAL_MS","GRAFANA_RULES_SOURCE_NAME","initialAsyncRequestState","useCombinedRuleNamespaces","useUnifiedAlertingSelector","usePanelCombinedRules","dashboard","panel","poll","dispatch","promRuleRequest","state","promRules","rulerRuleRequest","rulerRules","fetch","rulesSourceName","filter","dashboardUID","uid","panelId","id","interval","setInterval","clearInterval","loading","errors","error","err","combinedNamespaces","rules","flatMap","ns","groups","group","rule","annotations","panelID","String"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/hooks/usePanelCombinedRules.ts"],"sourcesContent":["import { SerializedError } from '@reduxjs/toolkit';\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { fetchPromRulesAction, fetchRulerRulesAction } from '../state/actions';\nimport { Annotation, RULE_LIST_POLL_INTERVAL_MS } from '../utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport { initialAsyncRequestState } from '../utils/redux';\n\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface Options {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n\n  poll?: boolean;\n}\n\ninterface ReturnBag {\n  errors: SerializedError[];\n  rules: CombinedRule[];\n\n  loading?: boolean;\n}\n\nexport function usePanelCombinedRules({ dashboard, panel, poll = false }: Options): ReturnBag {\n  const dispatch = useDispatch();\n\n  const promRuleRequest =\n    useUnifiedAlertingSelector((state) => state.promRules[GRAFANA_RULES_SOURCE_NAME]) ?? initialAsyncRequestState;\n  const rulerRuleRequest =\n    useUnifiedAlertingSelector((state) => state.rulerRules[GRAFANA_RULES_SOURCE_NAME]) ?? initialAsyncRequestState;\n\n  // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n  useEffect(() => {\n    const fetch = () => {\n      dispatch(\n        fetchPromRulesAction({\n          rulesSourceName: GRAFANA_RULES_SOURCE_NAME,\n          filter: { dashboardUID: dashboard.uid, panelId: panel.id },\n        })\n      );\n      dispatch(\n        fetchRulerRulesAction({\n          rulesSourceName: GRAFANA_RULES_SOURCE_NAME,\n          filter: { dashboardUID: dashboard.uid, panelId: panel.id },\n        })\n      );\n    };\n    fetch();\n    if (poll) {\n      const interval = setInterval(fetch, RULE_LIST_POLL_INTERVAL_MS);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n    return () => {};\n  }, [dispatch, poll, panel.id, dashboard.uid]);\n\n  const loading = promRuleRequest.loading || rulerRuleRequest.loading;\n  const errors = [promRuleRequest.error, rulerRuleRequest.error].filter(\n    (err: SerializedError | undefined): err is SerializedError => !!err\n  );\n\n  const combinedNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n\n  // filter out rules that are relevant to this panel\n  const rules = useMemo(\n    (): CombinedRule[] =>\n      combinedNamespaces\n        .flatMap((ns) => ns.groups)\n        .flatMap((group) => group.rules)\n        .filter(\n          (rule) =>\n            rule.annotations[Annotation.dashboardUID] === dashboard.uid &&\n            rule.annotations[Annotation.panelID] === String(panel.id)\n        ),\n    [combinedNamespaces, dashboard, panel]\n  );\n\n  return {\n    rules,\n    errors,\n    loading,\n  };\n}\n"],"mappings":"AACA,SAASA,SAAT,EAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAKA,SAASC,oBAAT,EAA+BC,qBAA/B,QAA4D,kBAA5D;AACA,SAASC,UAAT,EAAqBC,0BAArB,QAAuD,oBAAvD;AACA,SAASC,yBAAT,QAA0C,qBAA1C;AACA,SAASC,wBAAT,QAAyC,gBAAzC;AAEA,SAASC,yBAAT,QAA0C,6BAA1C;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AAgBA,OAAO,SAASC,qBAAT,CAA+B;EAAEC,SAAF;EAAaC,KAAb;EAAoBC,IAAI,GAAG;AAA3B,CAA/B,EAAuF;EAAA;;EAC5F,MAAMC,QAAQ,GAAGb,WAAW,EAA5B;EAEA,MAAMc,eAAe,4BACnBN,0BAA0B,CAAEO,KAAD,IAAWA,KAAK,CAACC,SAAN,CAAgBX,yBAAhB,CAAZ,CADP,yEACkEC,wBADvF;EAEA,MAAMW,gBAAgB,6BACpBT,0BAA0B,CAAEO,KAAD,IAAWA,KAAK,CAACG,UAAN,CAAiBb,yBAAjB,CAAZ,CADN,2EACkEC,wBADxF,CAL4F,CAQ5F;;EACAR,SAAS,CAAC,MAAM;IACd,MAAMqB,KAAK,GAAG,MAAM;MAClBN,QAAQ,CACNZ,oBAAoB,CAAC;QACnBmB,eAAe,EAAEf,yBADE;QAEnBgB,MAAM,EAAE;UAAEC,YAAY,EAAEZ,SAAS,CAACa,GAA1B;UAA+BC,OAAO,EAAEb,KAAK,CAACc;QAA9C;MAFW,CAAD,CADd,CAAR;MAMAZ,QAAQ,CACNX,qBAAqB,CAAC;QACpBkB,eAAe,EAAEf,yBADG;QAEpBgB,MAAM,EAAE;UAAEC,YAAY,EAAEZ,SAAS,CAACa,GAA1B;UAA+BC,OAAO,EAAEb,KAAK,CAACc;QAA9C;MAFY,CAAD,CADf,CAAR;IAMD,CAbD;;IAcAN,KAAK;;IACL,IAAIP,IAAJ,EAAU;MACR,MAAMc,QAAQ,GAAGC,WAAW,CAACR,KAAD,EAAQf,0BAAR,CAA5B;MACA,OAAO,MAAM;QACXwB,aAAa,CAACF,QAAD,CAAb;MACD,CAFD;IAGD;;IACD,OAAO,MAAM,CAAE,CAAf;EACD,CAvBQ,EAuBN,CAACb,QAAD,EAAWD,IAAX,EAAiBD,KAAK,CAACc,EAAvB,EAA2Bf,SAAS,CAACa,GAArC,CAvBM,CAAT;EAyBA,MAAMM,OAAO,GAAGf,eAAe,CAACe,OAAhB,IAA2BZ,gBAAgB,CAACY,OAA5D;EACA,MAAMC,MAAM,GAAG,CAAChB,eAAe,CAACiB,KAAjB,EAAwBd,gBAAgB,CAACc,KAAzC,EAAgDV,MAAhD,CACZW,GAAD,IAA8D,CAAC,CAACA,GADnD,CAAf;EAIA,MAAMC,kBAAkB,GAAG1B,yBAAyB,CAACF,yBAAD,CAApD,CAvC4F,CAyC5F;;EACA,MAAM6B,KAAK,GAAGnC,OAAO,CACnB,MACEkC,kBAAkB,CACfE,OADH,CACYC,EAAD,IAAQA,EAAE,CAACC,MADtB,EAEGF,OAFH,CAEYG,KAAD,IAAWA,KAAK,CAACJ,KAF5B,EAGGb,MAHH,CAIKkB,IAAD,IACEA,IAAI,CAACC,WAAL,CAAiBrC,UAAU,CAACmB,YAA5B,MAA8CZ,SAAS,CAACa,GAAxD,IACAgB,IAAI,CAACC,WAAL,CAAiBrC,UAAU,CAACsC,OAA5B,MAAyCC,MAAM,CAAC/B,KAAK,CAACc,EAAP,CANrD,CAFiB,EAUnB,CAACQ,kBAAD,EAAqBvB,SAArB,EAAgCC,KAAhC,CAVmB,CAArB;EAaA,OAAO;IACLuB,KADK;IAELJ,MAFK;IAGLD;EAHK,CAAP;AAKD"},"metadata":{},"sourceType":"module"}