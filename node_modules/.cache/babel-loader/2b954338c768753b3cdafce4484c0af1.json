{"ast":null,"code":"var _br;\n\nimport React, { useCallback } from 'react';\nimport { AppEvents } from '@grafana/data';\nimport { config, getBackendSrv } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, JSONFormatter } from '@grafana/ui';\nimport { StringValueEditor } from 'app/core/components/OptionsUI/string';\nimport { appEvents } from 'app/core/core';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst dummyStringSettings = {\n  settings: {}\n};\nexport const callApi = (api, isTest = false) => {\n  if (api) {\n    var _api$data;\n\n    getBackendSrv().fetch({\n      url: api.endpoint,\n      method: 'POST',\n      data: (_api$data = api.data) !== null && _api$data !== void 0 ? _api$data : {}\n    }).subscribe({\n      error: error => {\n        if (isTest) {\n          appEvents.emit(AppEvents.alertError, ['Error has occurred: ', JSON.stringify(error)]);\n          console.error(error);\n        }\n      },\n      complete: () => {\n        if (isTest) {\n          appEvents.emit(AppEvents.alertSuccess, ['Test successful']);\n        }\n      }\n    });\n  }\n};\nexport const APIEditor = props => {\n  var _value$data, _value$data2;\n\n  const {\n    value,\n    context,\n    onChange\n  } = props;\n  const labelWidth = 9;\n  const onEndpointChange = useCallback(endpoint => {\n    onChange(Object.assign({}, value, {\n      endpoint\n    }));\n  }, [onChange, value]);\n  const onDataChange = useCallback(data => {\n    onChange(Object.assign({}, value, {\n      data\n    }));\n  }, [onChange, value]);\n\n  const renderJSON = data => {\n    try {\n      const json = JSON.parse(data);\n      return /*#__PURE__*/_jsx(JSONFormatter, {\n        json: json\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        return `Invalid JSON provided: ${error.message}`;\n      } else {\n        return 'Invalid JSON provided';\n      }\n    }\n  };\n\n  const renderTestAPIButton = api => {\n    if (api && api.endpoint) {\n      return /*#__PURE__*/_jsx(Button, {\n        onClick: () => callApi(api, true),\n        title: 'Test API',\n        children: \"Test API\"\n      });\n    }\n\n    return;\n  };\n\n  return config.disableSanitizeHtml ? /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: 'Endpoint',\n        labelWidth: labelWidth,\n        grow: true,\n        children: /*#__PURE__*/_jsx(StringValueEditor, {\n          context: context,\n          value: value === null || value === void 0 ? void 0 : value.endpoint,\n          onChange: onEndpointChange,\n          item: dummyStringSettings\n        })\n      })\n    }), /*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: 'Data',\n        labelWidth: labelWidth,\n        grow: true,\n        children: /*#__PURE__*/_jsx(StringValueEditor, {\n          context: context,\n          value: (_value$data = value === null || value === void 0 ? void 0 : value.data) !== null && _value$data !== void 0 ? _value$data : '{}',\n          onChange: onDataChange,\n          item: dummyStringSettings\n        })\n      })\n    }), renderTestAPIButton(value), _br || (_br = /*#__PURE__*/_jsx(\"br\", {})), renderJSON((_value$data2 = value === null || value === void 0 ? void 0 : value.data) !== null && _value$data2 !== void 0 ? _value$data2 : '{}')]\n  }) : /*#__PURE__*/_jsx(_Fragment, {\n    children: \"Must enable disableSanitizeHtml feature flag to access\"\n  });\n};","map":{"version":3,"names":["React","useCallback","AppEvents","config","getBackendSrv","Button","InlineField","InlineFieldRow","JSONFormatter","StringValueEditor","appEvents","dummyStringSettings","settings","callApi","api","isTest","fetch","url","endpoint","method","data","subscribe","error","emit","alertError","JSON","stringify","console","complete","alertSuccess","APIEditor","props","value","context","onChange","labelWidth","onEndpointChange","onDataChange","renderJSON","json","parse","Error","message","renderTestAPIButton","disableSanitizeHtml"],"sources":["/home/soula/grafana/public/app/plugins/panel/canvas/editor/APIEditor.tsx"],"sourcesContent":["import React, { FC, useCallback } from 'react';\n\nimport { AppEvents, StandardEditorProps, StandardEditorsRegistryItem, StringFieldConfigSettings } from '@grafana/data';\nimport { config, getBackendSrv } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, JSONFormatter } from '@grafana/ui';\nimport { StringValueEditor } from 'app/core/components/OptionsUI/string';\nimport { appEvents } from 'app/core/core';\n\nexport interface APIEditorConfig {\n  endpoint: string;\n  data?: string;\n}\n\nconst dummyStringSettings: StandardEditorsRegistryItem<string, StringFieldConfigSettings> = {\n  settings: {},\n} as any;\n\nexport const callApi = (api: APIEditorConfig, isTest = false) => {\n  if (api) {\n    getBackendSrv()\n      .fetch({\n        url: api.endpoint!,\n        method: 'POST',\n        data: api.data ?? {},\n      })\n      .subscribe({\n        error: (error: any) => {\n          if (isTest) {\n            appEvents.emit(AppEvents.alertError, ['Error has occurred: ', JSON.stringify(error)]);\n            console.error(error);\n          }\n        },\n        complete: () => {\n          if (isTest) {\n            appEvents.emit(AppEvents.alertSuccess, ['Test successful']);\n          }\n        },\n      });\n  }\n};\n\nexport const APIEditor: FC<StandardEditorProps<APIEditorConfig, any, any>> = (props) => {\n  const { value, context, onChange } = props;\n  const labelWidth = 9;\n\n  const onEndpointChange = useCallback(\n    (endpoint) => {\n      onChange({\n        ...value,\n        endpoint,\n      });\n    },\n    [onChange, value]\n  );\n\n  const onDataChange = useCallback(\n    (data) => {\n      onChange({\n        ...value,\n        data,\n      });\n    },\n    [onChange, value]\n  );\n\n  const renderJSON = (data: string) => {\n    try {\n      const json = JSON.parse(data);\n      return <JSONFormatter json={json} />;\n    } catch (error) {\n      if (error instanceof Error) {\n        return `Invalid JSON provided: ${error.message}`;\n      } else {\n        return 'Invalid JSON provided';\n      }\n    }\n  };\n\n  const renderTestAPIButton = (api: APIEditorConfig) => {\n    if (api && api.endpoint) {\n      return (\n        <Button onClick={() => callApi(api, true)} title={'Test API'}>\n          Test API\n        </Button>\n      );\n    }\n\n    return;\n  };\n\n  return config.disableSanitizeHtml ? (\n    <>\n      <InlineFieldRow>\n        <InlineField label={'Endpoint'} labelWidth={labelWidth} grow={true}>\n          <StringValueEditor\n            context={context}\n            value={value?.endpoint}\n            onChange={onEndpointChange}\n            item={dummyStringSettings}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label={'Data'} labelWidth={labelWidth} grow={true}>\n          <StringValueEditor\n            context={context}\n            value={value?.data ?? '{}'}\n            onChange={onDataChange}\n            item={dummyStringSettings}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {renderTestAPIButton(value)}\n      <br />\n      {renderJSON(value?.data ?? '{}')}\n    </>\n  ) : (\n    <>Must enable disableSanitizeHtml feature flag to access</>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}