{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as H from 'history';\nimport { deprecationWarning, urlUtil } from '@grafana/data';\nimport { attachDebugger, createLogger } from '@grafana/ui';\nimport { config } from '../config';\n\n/** @internal */\nexport class HistoryWrapper {\n  constructor(history) {\n    var _config$appSubUrl;\n\n    _defineProperty(this, \"history\", void 0);\n\n    // If no history passed create an in memory one if being called from test\n    this.history = history || (process.env.NODE_ENV === 'test' ? H.createMemoryHistory({\n      initialEntries: ['/']\n    }) : H.createBrowserHistory({\n      basename: (_config$appSubUrl = config.appSubUrl) !== null && _config$appSubUrl !== void 0 ? _config$appSubUrl : '/'\n    }));\n    this.partial = this.partial.bind(this);\n    this.push = this.push.bind(this);\n    this.replace = this.replace.bind(this);\n    this.getSearch = this.getSearch.bind(this);\n    this.getHistory = this.getHistory.bind(this);\n    this.getLocation = this.getLocation.bind(this);\n  }\n\n  getHistory() {\n    return this.history;\n  }\n\n  getSearch() {\n    return new URLSearchParams(this.history.location.search);\n  }\n\n  partial(query, replace) {\n    const currentLocation = this.history.location;\n    const newQuery = this.getSearchObject();\n\n    for (const key of Object.keys(query)) {\n      // removing params with null | undefined\n      if (query[key] === null || query[key] === undefined) {\n        delete newQuery[key];\n      } else {\n        newQuery[key] = query[key];\n      }\n    }\n\n    const updatedUrl = urlUtil.renderUrl(currentLocation.pathname, newQuery);\n\n    if (replace) {\n      this.history.replace(updatedUrl, this.history.location.state);\n    } else {\n      this.history.push(updatedUrl, this.history.location.state);\n    }\n  }\n\n  push(location) {\n    this.history.push(location);\n  }\n\n  replace(location) {\n    this.history.replace(location);\n  }\n\n  reload() {\n    var _this$history$locatio;\n\n    const prevState = (_this$history$locatio = this.history.location.state) === null || _this$history$locatio === void 0 ? void 0 : _this$history$locatio.routeReloadCounter;\n    this.history.replace(Object.assign({}, this.history.location, {\n      state: {\n        routeReloadCounter: prevState ? prevState + 1 : 1\n      }\n    }));\n  }\n\n  getLocation() {\n    return this.history.location;\n  }\n\n  getSearchObject() {\n    return locationSearchToObject(this.history.location.search);\n  }\n  /** @deprecated use partial, push or replace instead */\n\n\n  update(options) {\n    deprecationWarning('LocationSrv', 'update', 'partial, push or replace');\n\n    if (options.partial && options.query) {\n      this.partial(options.query, options.partial);\n    } else {\n      const newLocation = {\n        pathname: options.path\n      };\n\n      if (options.query) {\n        newLocation.search = urlUtil.toUrlParams(options.query);\n      }\n\n      if (options.replace) {\n        this.replace(newLocation);\n      } else {\n        this.push(newLocation);\n      }\n    }\n  }\n\n}\n/**\n * @public\n * Parses a location search string to an object\n * */\n\nexport function locationSearchToObject(search) {\n  let queryString = typeof search === 'number' ? String(search) : search;\n\n  if (queryString.length > 0) {\n    if (queryString.startsWith('?')) {\n      return urlUtil.parseKeyValue(queryString.substring(1));\n    }\n\n    return urlUtil.parseKeyValue(queryString);\n  }\n\n  return {};\n}\n/**\n * @public\n */\n\nexport let locationService = new HistoryWrapper();\n/**\n * Used for tests only\n * @internal\n */\n\nexport const setLocationService = location => {\n  if (process.env.NODE_ENV !== 'test') {\n    throw new Error('locationService can be only overriden in test environment');\n  }\n\n  locationService = location;\n};\nconst navigationLog = createLogger('Router');\n/** @internal */\n\nexport const navigationLogger = navigationLog.logger; // For debugging purposes the location service is attached to global _debug variable\n\nattachDebugger('location', locationService, navigationLog);","map":{"version":3,"names":["H","deprecationWarning","urlUtil","attachDebugger","createLogger","config","HistoryWrapper","constructor","history","process","env","NODE_ENV","createMemoryHistory","initialEntries","createBrowserHistory","basename","appSubUrl","partial","bind","push","replace","getSearch","getHistory","getLocation","URLSearchParams","location","search","query","currentLocation","newQuery","getSearchObject","key","Object","keys","undefined","updatedUrl","renderUrl","pathname","state","reload","prevState","routeReloadCounter","locationSearchToObject","update","options","newLocation","path","toUrlParams","queryString","String","length","startsWith","parseKeyValue","substring","locationService","setLocationService","Error","navigationLog","navigationLogger","logger"],"sources":["/home/soula/grafana/packages/grafana-runtime/src/services/LocationService.ts"],"sourcesContent":["import * as H from 'history';\n\nimport { deprecationWarning, UrlQueryMap, urlUtil } from '@grafana/data';\nimport { attachDebugger, createLogger } from '@grafana/ui';\n\nimport { config } from '../config';\n\nimport { LocationUpdate } from './LocationSrv';\n\n/**\n * @public\n * A wrapper to help work with browser location and history\n */\nexport interface LocationService {\n  partial: (query: Record<string, any>, replace?: boolean) => void;\n  push: (location: H.Path | H.LocationDescriptor<any>) => void;\n  replace: (location: H.Path | H.LocationDescriptor<any>) => void;\n  reload: () => void;\n  getLocation: () => H.Location;\n  getHistory: () => H.History;\n  getSearch: () => URLSearchParams;\n  getSearchObject: () => UrlQueryMap;\n\n  /**\n   * This is from the old LocationSrv interface\n   * @deprecated use partial, push or replace instead */\n  update: (update: LocationUpdate) => void;\n}\n\n/** @internal */\nexport class HistoryWrapper implements LocationService {\n  private readonly history: H.History;\n\n  constructor(history?: H.History) {\n    // If no history passed create an in memory one if being called from test\n    this.history =\n      history ||\n      (process.env.NODE_ENV === 'test'\n        ? H.createMemoryHistory({ initialEntries: ['/'] })\n        : H.createBrowserHistory({ basename: config.appSubUrl ?? '/' }));\n\n    this.partial = this.partial.bind(this);\n    this.push = this.push.bind(this);\n    this.replace = this.replace.bind(this);\n    this.getSearch = this.getSearch.bind(this);\n    this.getHistory = this.getHistory.bind(this);\n    this.getLocation = this.getLocation.bind(this);\n  }\n\n  getHistory() {\n    return this.history;\n  }\n\n  getSearch() {\n    return new URLSearchParams(this.history.location.search);\n  }\n\n  partial(query: Record<string, any>, replace?: boolean) {\n    const currentLocation = this.history.location;\n    const newQuery = this.getSearchObject();\n\n    for (const key of Object.keys(query)) {\n      // removing params with null | undefined\n      if (query[key] === null || query[key] === undefined) {\n        delete newQuery[key];\n      } else {\n        newQuery[key] = query[key];\n      }\n    }\n\n    const updatedUrl = urlUtil.renderUrl(currentLocation.pathname, newQuery);\n\n    if (replace) {\n      this.history.replace(updatedUrl, this.history.location.state);\n    } else {\n      this.history.push(updatedUrl, this.history.location.state);\n    }\n  }\n\n  push(location: H.Path | H.LocationDescriptor) {\n    this.history.push(location);\n  }\n\n  replace(location: H.Path | H.LocationDescriptor) {\n    this.history.replace(location);\n  }\n\n  reload() {\n    const prevState = (this.history.location.state as any)?.routeReloadCounter;\n    this.history.replace({\n      ...this.history.location,\n      state: { routeReloadCounter: prevState ? prevState + 1 : 1 },\n    });\n  }\n\n  getLocation() {\n    return this.history.location;\n  }\n\n  getSearchObject() {\n    return locationSearchToObject(this.history.location.search);\n  }\n\n  /** @deprecated use partial, push or replace instead */\n  update(options: LocationUpdate) {\n    deprecationWarning('LocationSrv', 'update', 'partial, push or replace');\n    if (options.partial && options.query) {\n      this.partial(options.query, options.partial);\n    } else {\n      const newLocation: H.LocationDescriptor = {\n        pathname: options.path,\n      };\n      if (options.query) {\n        newLocation.search = urlUtil.toUrlParams(options.query);\n      }\n      if (options.replace) {\n        this.replace(newLocation);\n      } else {\n        this.push(newLocation);\n      }\n    }\n  }\n}\n\n/**\n * @public\n * Parses a location search string to an object\n * */\nexport function locationSearchToObject(search: string | number): UrlQueryMap {\n  let queryString = typeof search === 'number' ? String(search) : search;\n\n  if (queryString.length > 0) {\n    if (queryString.startsWith('?')) {\n      return urlUtil.parseKeyValue(queryString.substring(1));\n    }\n    return urlUtil.parseKeyValue(queryString);\n  }\n\n  return {};\n}\n\n/**\n * @public\n */\nexport let locationService: LocationService = new HistoryWrapper();\n\n/**\n * Used for tests only\n * @internal\n */\nexport const setLocationService = (location: LocationService) => {\n  if (process.env.NODE_ENV !== 'test') {\n    throw new Error('locationService can be only overriden in test environment');\n  }\n  locationService = location;\n};\n\nconst navigationLog = createLogger('Router');\n\n/** @internal */\nexport const navigationLogger = navigationLog.logger;\n\n// For debugging purposes the location service is attached to global _debug variable\nattachDebugger('location', locationService, navigationLog);\n"],"mappings":";;AAAA,OAAO,KAAKA,CAAZ,MAAmB,SAAnB;AAEA,SAASC,kBAAT,EAA0CC,OAA1C,QAAyD,eAAzD;AACA,SAASC,cAAT,EAAyBC,YAAzB,QAA6C,aAA7C;AAEA,SAASC,MAAT,QAAuB,WAAvB;;AAwBA;AACA,OAAO,MAAMC,cAAN,CAAgD;EAGrDC,WAAW,CAACC,OAAD,EAAsB;IAAA;;IAAA;;IAC/B;IACA,KAAKA,OAAL,GACEA,OAAO,KACNC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAAzB,GACGX,CAAC,CAACY,mBAAF,CAAsB;MAAEC,cAAc,EAAE,CAAC,GAAD;IAAlB,CAAtB,CADH,GAEGb,CAAC,CAACc,oBAAF,CAAuB;MAAEC,QAAQ,uBAAEV,MAAM,CAACW,SAAT,iEAAsB;IAAhC,CAAvB,CAHG,CADT;IAMA,KAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;IACA,KAAKC,IAAL,GAAY,KAAKA,IAAL,CAAUD,IAAV,CAAe,IAAf,CAAZ;IACA,KAAKE,OAAL,GAAe,KAAKA,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAAf;IACA,KAAKG,SAAL,GAAiB,KAAKA,SAAL,CAAeH,IAAf,CAAoB,IAApB,CAAjB;IACA,KAAKI,UAAL,GAAkB,KAAKA,UAAL,CAAgBJ,IAAhB,CAAqB,IAArB,CAAlB;IACA,KAAKK,WAAL,GAAmB,KAAKA,WAAL,CAAiBL,IAAjB,CAAsB,IAAtB,CAAnB;EACD;;EAEDI,UAAU,GAAG;IACX,OAAO,KAAKd,OAAZ;EACD;;EAEDa,SAAS,GAAG;IACV,OAAO,IAAIG,eAAJ,CAAoB,KAAKhB,OAAL,CAAaiB,QAAb,CAAsBC,MAA1C,CAAP;EACD;;EAEDT,OAAO,CAACU,KAAD,EAA6BP,OAA7B,EAAgD;IACrD,MAAMQ,eAAe,GAAG,KAAKpB,OAAL,CAAaiB,QAArC;IACA,MAAMI,QAAQ,GAAG,KAAKC,eAAL,EAAjB;;IAEA,KAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYN,KAAZ,CAAlB,EAAsC;MACpC;MACA,IAAIA,KAAK,CAACI,GAAD,CAAL,KAAe,IAAf,IAAuBJ,KAAK,CAACI,GAAD,CAAL,KAAeG,SAA1C,EAAqD;QACnD,OAAOL,QAAQ,CAACE,GAAD,CAAf;MACD,CAFD,MAEO;QACLF,QAAQ,CAACE,GAAD,CAAR,GAAgBJ,KAAK,CAACI,GAAD,CAArB;MACD;IACF;;IAED,MAAMI,UAAU,GAAGjC,OAAO,CAACkC,SAAR,CAAkBR,eAAe,CAACS,QAAlC,EAA4CR,QAA5C,CAAnB;;IAEA,IAAIT,OAAJ,EAAa;MACX,KAAKZ,OAAL,CAAaY,OAAb,CAAqBe,UAArB,EAAiC,KAAK3B,OAAL,CAAaiB,QAAb,CAAsBa,KAAvD;IACD,CAFD,MAEO;MACL,KAAK9B,OAAL,CAAaW,IAAb,CAAkBgB,UAAlB,EAA8B,KAAK3B,OAAL,CAAaiB,QAAb,CAAsBa,KAApD;IACD;EACF;;EAEDnB,IAAI,CAACM,QAAD,EAA0C;IAC5C,KAAKjB,OAAL,CAAaW,IAAb,CAAkBM,QAAlB;EACD;;EAEDL,OAAO,CAACK,QAAD,EAA0C;IAC/C,KAAKjB,OAAL,CAAaY,OAAb,CAAqBK,QAArB;EACD;;EAEDc,MAAM,GAAG;IAAA;;IACP,MAAMC,SAAS,4BAAI,KAAKhC,OAAL,CAAaiB,QAAb,CAAsBa,KAA1B,0DAAG,sBAAsCG,kBAAxD;IACA,KAAKjC,OAAL,CAAaY,OAAb,mBACK,KAAKZ,OAAL,CAAaiB,QADlB;MAEEa,KAAK,EAAE;QAAEG,kBAAkB,EAAED,SAAS,GAAGA,SAAS,GAAG,CAAf,GAAmB;MAAlD;IAFT;EAID;;EAEDjB,WAAW,GAAG;IACZ,OAAO,KAAKf,OAAL,CAAaiB,QAApB;EACD;;EAEDK,eAAe,GAAG;IAChB,OAAOY,sBAAsB,CAAC,KAAKlC,OAAL,CAAaiB,QAAb,CAAsBC,MAAvB,CAA7B;EACD;EAED;;;EACAiB,MAAM,CAACC,OAAD,EAA0B;IAC9B3C,kBAAkB,CAAC,aAAD,EAAgB,QAAhB,EAA0B,0BAA1B,CAAlB;;IACA,IAAI2C,OAAO,CAAC3B,OAAR,IAAmB2B,OAAO,CAACjB,KAA/B,EAAsC;MACpC,KAAKV,OAAL,CAAa2B,OAAO,CAACjB,KAArB,EAA4BiB,OAAO,CAAC3B,OAApC;IACD,CAFD,MAEO;MACL,MAAM4B,WAAiC,GAAG;QACxCR,QAAQ,EAAEO,OAAO,CAACE;MADsB,CAA1C;;MAGA,IAAIF,OAAO,CAACjB,KAAZ,EAAmB;QACjBkB,WAAW,CAACnB,MAAZ,GAAqBxB,OAAO,CAAC6C,WAAR,CAAoBH,OAAO,CAACjB,KAA5B,CAArB;MACD;;MACD,IAAIiB,OAAO,CAACxB,OAAZ,EAAqB;QACnB,KAAKA,OAAL,CAAayB,WAAb;MACD,CAFD,MAEO;QACL,KAAK1B,IAAL,CAAU0B,WAAV;MACD;IACF;EACF;;AA3FoD;AA8FvD;AACA;AACA;AACA;;AACA,OAAO,SAASH,sBAAT,CAAgChB,MAAhC,EAAsE;EAC3E,IAAIsB,WAAW,GAAG,OAAOtB,MAAP,KAAkB,QAAlB,GAA6BuB,MAAM,CAACvB,MAAD,CAAnC,GAA8CA,MAAhE;;EAEA,IAAIsB,WAAW,CAACE,MAAZ,GAAqB,CAAzB,EAA4B;IAC1B,IAAIF,WAAW,CAACG,UAAZ,CAAuB,GAAvB,CAAJ,EAAiC;MAC/B,OAAOjD,OAAO,CAACkD,aAAR,CAAsBJ,WAAW,CAACK,SAAZ,CAAsB,CAAtB,CAAtB,CAAP;IACD;;IACD,OAAOnD,OAAO,CAACkD,aAAR,CAAsBJ,WAAtB,CAAP;EACD;;EAED,OAAO,EAAP;AACD;AAED;AACA;AACA;;AACA,OAAO,IAAIM,eAAgC,GAAG,IAAIhD,cAAJ,EAAvC;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMiD,kBAAkB,GAAI9B,QAAD,IAA+B;EAC/D,IAAIhB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;IACnC,MAAM,IAAI6C,KAAJ,CAAU,2DAAV,CAAN;EACD;;EACDF,eAAe,GAAG7B,QAAlB;AACD,CALM;AAOP,MAAMgC,aAAa,GAAGrD,YAAY,CAAC,QAAD,CAAlC;AAEA;;AACA,OAAO,MAAMsD,gBAAgB,GAAGD,aAAa,CAACE,MAAvC,C,CAEP;;AACAxD,cAAc,CAAC,UAAD,EAAamD,eAAb,EAA8BG,aAA9B,CAAd"},"metadata":{},"sourceType":"module"}