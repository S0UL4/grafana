{"ast":null,"code":"var _span, _span2;\n\nimport { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { LoadingState } from '@grafana/data';\nimport { Alert, Button, Collapse, InlineField, TooltipDisplayMode, useStyles2, useTheme2 } from '@grafana/ui';\nimport { ExploreGraph } from './ExploreGraph';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst SHORT_ERROR_MESSAGE_LIMIT = 100;\n\nfunction ErrorAlert(props) {\n  var _props$error$data;\n\n  const [isOpen, setIsOpen] = useState(false); // generic get-error-message-logic, taken from\n  // /public/app/features/explore/ErrorContainer.tsx\n\n  const message = props.error.message || ((_props$error$data = props.error.data) === null || _props$error$data === void 0 ? void 0 : _props$error$data.message) || '';\n  const showButton = !isOpen && message.length > SHORT_ERROR_MESSAGE_LIMIT;\n  return /*#__PURE__*/_jsx(Alert, {\n    title: \"Failed to load log volume for this query\",\n    severity: \"warning\",\n    children: showButton ? /*#__PURE__*/_jsx(Button, {\n      variant: \"secondary\",\n      size: \"xs\",\n      onClick: () => {\n        setIsOpen(true);\n      },\n      children: \"Show details\"\n    }) : message\n  });\n}\n\nfunction createVisualisationData(logLinesBased, logLinesBasedVisibleRange, fullRangeData, absoluteRange) {\n  if (fullRangeData !== undefined) {\n    return {\n      logsVolumeData: fullRangeData,\n      fullRangeData: true,\n      range: absoluteRange\n    };\n  }\n\n  if (logLinesBased !== undefined) {\n    return {\n      logsVolumeData: logLinesBased,\n      fullRangeData: false,\n      range: logLinesBasedVisibleRange || absoluteRange\n    };\n  }\n\n  return undefined;\n}\n\nexport function LogsVolumePanel(props) {\n  const {\n    width,\n    timeZone,\n    splitOpen,\n    onUpdateTimeRange,\n    onLoadLogsVolume,\n    onHiddenSeriesChanged\n  } = props;\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const spacing = parseInt(theme.spacing(2).slice(0, -2), 10);\n  const height = 150;\n  const data = createVisualisationData(props.logLinesBasedData, props.logLinesBasedDataVisibleRange, props.logsVolumeData, props.absoluteRange);\n\n  if (data === undefined) {\n    return null;\n  }\n\n  const {\n    logsVolumeData,\n    fullRangeData,\n    range\n  } = data;\n\n  if (logsVolumeData.error !== undefined) {\n    return /*#__PURE__*/_jsx(ErrorAlert, {\n      error: logsVolumeData.error\n    });\n  }\n\n  let LogsVolumePanelContent;\n\n  if ((logsVolumeData === null || logsVolumeData === void 0 ? void 0 : logsVolumeData.state) === LoadingState.Loading) {\n    LogsVolumePanelContent = _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n      children: \"Log volume is loading...\"\n    }));\n  } else if (logsVolumeData !== null && logsVolumeData !== void 0 && logsVolumeData.data) {\n    if (logsVolumeData.data.length > 0) {\n      LogsVolumePanelContent = /*#__PURE__*/_jsx(ExploreGraph, {\n        graphStyle: \"lines\",\n        loadingState: LoadingState.Done,\n        data: logsVolumeData.data,\n        height: height,\n        width: width - spacing,\n        absoluteRange: range,\n        onChangeTime: onUpdateTimeRange,\n        timeZone: timeZone,\n        splitOpenFn: splitOpen,\n        tooltipDisplayMode: TooltipDisplayMode.Multi,\n        onHiddenSeriesChanged: onHiddenSeriesChanged\n      });\n    } else {\n      LogsVolumePanelContent = _span2 || (_span2 = /*#__PURE__*/_jsx(\"span\", {\n        children: \"No volume data.\"\n      }));\n    }\n  }\n\n  let extraInfo;\n\n  if (fullRangeData) {\n    const zoomRatio = logsLevelZoomRatio(logsVolumeData, range);\n\n    if (zoomRatio !== undefined && zoomRatio < 1) {\n      extraInfo = /*#__PURE__*/_jsx(InlineField, {\n        label: \"Reload log volume\",\n        transparent: true,\n        children: /*#__PURE__*/_jsx(Button, {\n          size: \"xs\",\n          icon: \"sync\",\n          variant: \"secondary\",\n          onClick: onLoadLogsVolume,\n          id: \"reload-volume\"\n        })\n      });\n    }\n  } else {\n    extraInfo = /*#__PURE__*/_jsx(\"div\", {\n      className: styles.oldInfoText,\n      children: \"This datasource does not support full-range histograms. The graph is based on the logs seen in the response.\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(Collapse, {\n    label: \"\",\n    isOpen: true,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      style: {\n        height\n      },\n      className: styles.contentContainer,\n      children: LogsVolumePanelContent\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: styles.extraInfoContainer,\n      children: extraInfo\n    })]\n  });\n}\n\nconst getStyles = theme => {\n  return {\n    extraInfoContainer: css`\n      display: flex;\n      justify-content: end;\n      position: absolute;\n      right: 5px;\n      top: 5px;\n    `,\n    contentContainer: css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `,\n    oldInfoText: css`\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.text.secondary};\n    `\n  };\n};\n\nfunction logsLevelZoomRatio(logsVolumeData, selectedTimeRange) {\n  var _logsVolumeData$data$, _logsVolumeData$data$2;\n\n  const dataRange = logsVolumeData && logsVolumeData.data[0] && ((_logsVolumeData$data$ = logsVolumeData.data[0].meta) === null || _logsVolumeData$data$ === void 0 ? void 0 : (_logsVolumeData$data$2 = _logsVolumeData$data$.custom) === null || _logsVolumeData$data$2 === void 0 ? void 0 : _logsVolumeData$data$2.absoluteRange);\n  return dataRange ? (selectedTimeRange.from - selectedTimeRange.to) / (dataRange.from - dataRange.to) : undefined;\n}","map":{"version":3,"names":["css","React","useState","LoadingState","Alert","Button","Collapse","InlineField","TooltipDisplayMode","useStyles2","useTheme2","ExploreGraph","SHORT_ERROR_MESSAGE_LIMIT","ErrorAlert","props","isOpen","setIsOpen","message","error","data","showButton","length","createVisualisationData","logLinesBased","logLinesBasedVisibleRange","fullRangeData","absoluteRange","undefined","logsVolumeData","range","LogsVolumePanel","width","timeZone","splitOpen","onUpdateTimeRange","onLoadLogsVolume","onHiddenSeriesChanged","theme","styles","getStyles","spacing","parseInt","slice","height","logLinesBasedData","logLinesBasedDataVisibleRange","LogsVolumePanelContent","state","Loading","Done","Multi","extraInfo","zoomRatio","logsLevelZoomRatio","oldInfoText","contentContainer","extraInfoContainer","typography","size","sm","colors","text","secondary","selectedTimeRange","dataRange","meta","custom","from","to"],"sources":["/home/soula/grafana/public/app/features/explore/LogsVolumePanel.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport {\n  AbsoluteTimeRange,\n  DataQueryError,\n  DataQueryResponse,\n  GrafanaTheme2,\n  LoadingState,\n  SplitOpen,\n  TimeZone,\n} from '@grafana/data';\nimport { Alert, Button, Collapse, InlineField, TooltipDisplayMode, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { ExploreGraph } from './ExploreGraph';\n\ntype Props = {\n  logsVolumeData: DataQueryResponse | undefined;\n  absoluteRange: AbsoluteTimeRange;\n  logLinesBasedData: DataQueryResponse | undefined;\n  logLinesBasedDataVisibleRange: AbsoluteTimeRange | undefined;\n  timeZone: TimeZone;\n  splitOpen: SplitOpen;\n  width: number;\n  onUpdateTimeRange: (timeRange: AbsoluteTimeRange) => void;\n  onLoadLogsVolume: () => void;\n  onHiddenSeriesChanged: (hiddenSeries: string[]) => void;\n};\n\nconst SHORT_ERROR_MESSAGE_LIMIT = 100;\n\nfunction ErrorAlert(props: { error: DataQueryError }) {\n  const [isOpen, setIsOpen] = useState(false);\n  // generic get-error-message-logic, taken from\n  // /public/app/features/explore/ErrorContainer.tsx\n  const message = props.error.message || props.error.data?.message || '';\n\n  const showButton = !isOpen && message.length > SHORT_ERROR_MESSAGE_LIMIT;\n\n  return (\n    <Alert title=\"Failed to load log volume for this query\" severity=\"warning\">\n      {showButton ? (\n        <Button\n          variant=\"secondary\"\n          size=\"xs\"\n          onClick={() => {\n            setIsOpen(true);\n          }}\n        >\n          Show details\n        </Button>\n      ) : (\n        message\n      )}\n    </Alert>\n  );\n}\n\nfunction createVisualisationData(\n  logLinesBased: DataQueryResponse | undefined,\n  logLinesBasedVisibleRange: AbsoluteTimeRange | undefined,\n  fullRangeData: DataQueryResponse | undefined,\n  absoluteRange: AbsoluteTimeRange\n):\n  | {\n      logsVolumeData: DataQueryResponse;\n      fullRangeData: boolean;\n      range: AbsoluteTimeRange;\n    }\n  | undefined {\n  if (fullRangeData !== undefined) {\n    return {\n      logsVolumeData: fullRangeData,\n      fullRangeData: true,\n      range: absoluteRange,\n    };\n  }\n\n  if (logLinesBased !== undefined) {\n    return {\n      logsVolumeData: logLinesBased,\n      fullRangeData: false,\n      range: logLinesBasedVisibleRange || absoluteRange,\n    };\n  }\n\n  return undefined;\n}\n\nexport function LogsVolumePanel(props: Props) {\n  const { width, timeZone, splitOpen, onUpdateTimeRange, onLoadLogsVolume, onHiddenSeriesChanged } = props;\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const spacing = parseInt(theme.spacing(2).slice(0, -2), 10);\n  const height = 150;\n\n  const data = createVisualisationData(\n    props.logLinesBasedData,\n    props.logLinesBasedDataVisibleRange,\n    props.logsVolumeData,\n    props.absoluteRange\n  );\n\n  if (data === undefined) {\n    return null;\n  }\n\n  const { logsVolumeData, fullRangeData, range } = data;\n\n  if (logsVolumeData.error !== undefined) {\n    return <ErrorAlert error={logsVolumeData.error} />;\n  }\n\n  let LogsVolumePanelContent;\n\n  if (logsVolumeData?.state === LoadingState.Loading) {\n    LogsVolumePanelContent = <span>Log volume is loading...</span>;\n  } else if (logsVolumeData?.data) {\n    if (logsVolumeData.data.length > 0) {\n      LogsVolumePanelContent = (\n        <ExploreGraph\n          graphStyle=\"lines\"\n          loadingState={LoadingState.Done}\n          data={logsVolumeData.data}\n          height={height}\n          width={width - spacing}\n          absoluteRange={range}\n          onChangeTime={onUpdateTimeRange}\n          timeZone={timeZone}\n          splitOpenFn={splitOpen}\n          tooltipDisplayMode={TooltipDisplayMode.Multi}\n          onHiddenSeriesChanged={onHiddenSeriesChanged}\n        />\n      );\n    } else {\n      LogsVolumePanelContent = <span>No volume data.</span>;\n    }\n  }\n\n  let extraInfo;\n  if (fullRangeData) {\n    const zoomRatio = logsLevelZoomRatio(logsVolumeData, range);\n\n    if (zoomRatio !== undefined && zoomRatio < 1) {\n      extraInfo = (\n        <InlineField label=\"Reload log volume\" transparent>\n          <Button size=\"xs\" icon=\"sync\" variant=\"secondary\" onClick={onLoadLogsVolume} id=\"reload-volume\" />\n        </InlineField>\n      );\n    }\n  } else {\n    extraInfo = (\n      <div className={styles.oldInfoText}>\n        This datasource does not support full-range histograms. The graph is based on the logs seen in the response.\n      </div>\n    );\n  }\n  return (\n    <Collapse label=\"\" isOpen={true}>\n      <div style={{ height }} className={styles.contentContainer}>\n        {LogsVolumePanelContent}\n      </div>\n      <div className={styles.extraInfoContainer}>{extraInfo}</div>\n    </Collapse>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    extraInfoContainer: css`\n      display: flex;\n      justify-content: end;\n      position: absolute;\n      right: 5px;\n      top: 5px;\n    `,\n    contentContainer: css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `,\n    oldInfoText: css`\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n\nfunction logsLevelZoomRatio(\n  logsVolumeData: DataQueryResponse | undefined,\n  selectedTimeRange: AbsoluteTimeRange\n): number | undefined {\n  const dataRange = logsVolumeData && logsVolumeData.data[0] && logsVolumeData.data[0].meta?.custom?.absoluteRange;\n  return dataRange ? (selectedTimeRange.from - selectedTimeRange.to) / (dataRange.from - dataRange.to) : undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}