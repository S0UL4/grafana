{"ast":null,"code":"import { DefaultTimeZone } from '../types/time';\n/**\n * Used for helper functions handling time zones.\n *\n * @public\n */\n\nlet defaultTimeZoneResolver = () => DefaultTimeZone;\n/**\n * Used by Grafana internals to set the {@link TimeZoneResolver} to access the current\n * user timeZone.\n *\n * @internal\n */\n\n\nexport const setTimeZoneResolver = resolver => {\n  defaultTimeZoneResolver = resolver !== null && resolver !== void 0 ? resolver : defaultTimeZoneResolver;\n};\n/**\n * Used to get the current selected time zone. If a valid time zone is passed in the\n * options it will be returned. If no valid time zone is passed either the time zone\n * configured for the user account will be returned or the default for Grafana.\n *\n * @public\n */\n\nexport const getTimeZone = options => {\n  var _ref, _options$timeZone;\n\n  return (_ref = (_options$timeZone = options === null || options === void 0 ? void 0 : options.timeZone) !== null && _options$timeZone !== void 0 ? _options$timeZone : defaultTimeZoneResolver()) !== null && _ref !== void 0 ? _ref : DefaultTimeZone;\n};","map":{"version":3,"names":["DefaultTimeZone","defaultTimeZoneResolver","setTimeZoneResolver","resolver","getTimeZone","options","timeZone"],"sources":["/home/soula/grafana/packages/grafana-data/src/datetime/common.ts"],"sourcesContent":["import { TimeZone, DefaultTimeZone } from '../types/time';\n\n/**\n * Used for helper functions handling time zones.\n *\n * @public\n */\nexport interface TimeZoneOptions {\n  /**\n   * Specify this if you want to override the timeZone used when parsing or formatting\n   * a date and time value. If no timeZone is set, the default timeZone for the current\n   * user is used.\n   */\n  timeZone?: TimeZone;\n}\n\n/**\n * The type describing date and time options. Used for all the helper functions\n * available to parse or format date and time values.\n *\n * @public\n */\nexport interface DateTimeOptions extends TimeZoneOptions {\n  /**\n   * Specify a {@link https://momentjs.com/docs/#/displaying/format | momentjs} format to\n   * use a custom formatting pattern or parsing pattern. If no format is set,\n   * then system configured default format is used.\n   */\n  format?: string;\n}\n\n/**\n * The type to describe the time zone resolver function that will be used to access\n * the default time zone of a user.\n *\n * @public\n */\nexport type TimeZoneResolver = () => TimeZone | undefined;\n\nlet defaultTimeZoneResolver: TimeZoneResolver = () => DefaultTimeZone;\n\n/**\n * Used by Grafana internals to set the {@link TimeZoneResolver} to access the current\n * user timeZone.\n *\n * @internal\n */\nexport const setTimeZoneResolver = (resolver: TimeZoneResolver) => {\n  defaultTimeZoneResolver = resolver ?? defaultTimeZoneResolver;\n};\n\n/**\n * Used to get the current selected time zone. If a valid time zone is passed in the\n * options it will be returned. If no valid time zone is passed either the time zone\n * configured for the user account will be returned or the default for Grafana.\n *\n * @public\n */\nexport const getTimeZone = <T extends TimeZoneOptions>(options?: T): TimeZone => {\n  return options?.timeZone ?? defaultTimeZoneResolver() ?? DefaultTimeZone;\n};\n"],"mappings":"AAAA,SAAmBA,eAAnB,QAA0C,eAA1C;AAEA;AACA;AACA;AACA;AACA;;AAiCA,IAAIC,uBAAyC,GAAG,MAAMD,eAAtD;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAME,mBAAmB,GAAIC,QAAD,IAAgC;EACjEF,uBAAuB,GAAGE,QAAH,aAAGA,QAAH,cAAGA,QAAH,GAAeF,uBAAtC;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,WAAW,GAA+BC,OAA5B,IAAsD;EAAA;;EAC/E,oCAAOA,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEC,QAAhB,iEAA4BL,uBAAuB,EAAnD,uCAAyDD,eAAzD;AACD,CAFM"},"metadata":{},"sourceType":"module"}