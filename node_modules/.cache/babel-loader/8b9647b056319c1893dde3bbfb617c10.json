{"ast":null,"code":"import { marked } from 'marked';\nimport { sanitize, sanitizeTextPanelContent } from './sanitize';\nlet hasInitialized = false;\nconst markdownOptions = {\n  pedantic: false,\n  gfm: true,\n  smartLists: true,\n  smartypants: false,\n  xhtml: false,\n  breaks: false\n};\nexport function renderMarkdown(str, options) {\n  if (!hasInitialized) {\n    marked.setOptions(Object.assign({}, markdownOptions));\n    hasInitialized = true;\n  }\n\n  let opts = undefined;\n\n  if (options !== null && options !== void 0 && options.breaks) {\n    opts = Object.assign({}, markdownOptions, {\n      breaks: true\n    });\n  }\n\n  const html = marked(str || '', opts);\n\n  if (options !== null && options !== void 0 && options.noSanitize) {\n    return html;\n  }\n\n  return sanitize(html);\n}\nexport function renderTextPanelMarkdown(str, options) {\n  if (!hasInitialized) {\n    marked.setOptions(Object.assign({}, markdownOptions));\n    hasInitialized = true;\n  }\n\n  const html = marked(str || '');\n\n  if (options !== null && options !== void 0 && options.noSanitize) {\n    return html;\n  }\n\n  return sanitizeTextPanelContent(html);\n}","map":{"version":3,"names":["marked","sanitize","sanitizeTextPanelContent","hasInitialized","markdownOptions","pedantic","gfm","smartLists","smartypants","xhtml","breaks","renderMarkdown","str","options","setOptions","opts","undefined","html","noSanitize","renderTextPanelMarkdown"],"sources":["/home/soula/grafana/packages/grafana-data/src/text/markdown.ts"],"sourcesContent":["import { marked } from 'marked';\n\nimport { sanitize, sanitizeTextPanelContent } from './sanitize';\n\nlet hasInitialized = false;\n\nexport interface RenderMarkdownOptions {\n  noSanitize?: boolean;\n  breaks?: boolean;\n}\n\nconst markdownOptions = {\n  pedantic: false,\n  gfm: true,\n  smartLists: true,\n  smartypants: false,\n  xhtml: false,\n  breaks: false,\n};\n\nexport function renderMarkdown(str?: string, options?: RenderMarkdownOptions): string {\n  if (!hasInitialized) {\n    marked.setOptions({ ...markdownOptions });\n    hasInitialized = true;\n  }\n\n  let opts = undefined;\n  if (options?.breaks) {\n    opts = {\n      ...markdownOptions,\n      breaks: true,\n    };\n  }\n  const html = marked(str || '', opts);\n\n  if (options?.noSanitize) {\n    return html;\n  }\n\n  return sanitize(html);\n}\n\nexport function renderTextPanelMarkdown(str?: string, options?: RenderMarkdownOptions): string {\n  if (!hasInitialized) {\n    marked.setOptions({ ...markdownOptions });\n    hasInitialized = true;\n  }\n\n  const html = marked(str || '');\n  if (options?.noSanitize) {\n    return html;\n  }\n\n  return sanitizeTextPanelContent(html);\n}\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,SAASC,QAAT,EAAmBC,wBAAnB,QAAmD,YAAnD;AAEA,IAAIC,cAAc,GAAG,KAArB;AAOA,MAAMC,eAAe,GAAG;EACtBC,QAAQ,EAAE,KADY;EAEtBC,GAAG,EAAE,IAFiB;EAGtBC,UAAU,EAAE,IAHU;EAItBC,WAAW,EAAE,KAJS;EAKtBC,KAAK,EAAE,KALe;EAMtBC,MAAM,EAAE;AANc,CAAxB;AASA,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAAsCC,OAAtC,EAA+E;EACpF,IAAI,CAACV,cAAL,EAAqB;IACnBH,MAAM,CAACc,UAAP,mBAAuBV,eAAvB;IACAD,cAAc,GAAG,IAAjB;EACD;;EAED,IAAIY,IAAI,GAAGC,SAAX;;EACA,IAAIH,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEH,MAAb,EAAqB;IACnBK,IAAI,qBACCX,eADD;MAEFM,MAAM,EAAE;IAFN,EAAJ;EAID;;EACD,MAAMO,IAAI,GAAGjB,MAAM,CAACY,GAAG,IAAI,EAAR,EAAYG,IAAZ,CAAnB;;EAEA,IAAIF,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEK,UAAb,EAAyB;IACvB,OAAOD,IAAP;EACD;;EAED,OAAOhB,QAAQ,CAACgB,IAAD,CAAf;AACD;AAED,OAAO,SAASE,uBAAT,CAAiCP,GAAjC,EAA+CC,OAA/C,EAAwF;EAC7F,IAAI,CAACV,cAAL,EAAqB;IACnBH,MAAM,CAACc,UAAP,mBAAuBV,eAAvB;IACAD,cAAc,GAAG,IAAjB;EACD;;EAED,MAAMc,IAAI,GAAGjB,MAAM,CAACY,GAAG,IAAI,EAAR,CAAnB;;EACA,IAAIC,OAAJ,aAAIA,OAAJ,eAAIA,OAAO,CAAEK,UAAb,EAAyB;IACvB,OAAOD,IAAP;EACD;;EAED,OAAOf,wBAAwB,CAACe,IAAD,CAA/B;AACD"},"metadata":{},"sourceType":"module"}