{"ast":null,"code":"import { createErrorNotification, createSuccessNotification } from '../../core/copy/appNotification';\nimport { addLibraryPanel, updateLibraryPanel } from './state/api';\nexport function createPanelLibraryErrorNotification(message) {\n  return createErrorNotification(message);\n}\nexport function createPanelLibrarySuccessNotification(message) {\n  return createSuccessNotification(message);\n}\nexport function toPanelModelLibraryPanel(libraryPanelDto) {\n  const {\n    uid,\n    name,\n    meta,\n    version\n  } = libraryPanelDto;\n  return {\n    uid,\n    name,\n    meta,\n    version\n  };\n}\nexport async function saveAndRefreshLibraryPanel(panel, folderId) {\n  const panelSaveModel = toPanelSaveModel(panel);\n  const savedPanel = await saveOrUpdateLibraryPanel(panelSaveModel, folderId);\n  updatePanelModelWithUpdate(panel, savedPanel);\n  return savedPanel;\n}\n\nfunction toPanelSaveModel(panel) {\n  let panelSaveModel = panel.getSaveModel();\n  panelSaveModel = Object.assign({\n    libraryPanel: {\n      name: panel.title,\n      uid: undefined\n    }\n  }, panelSaveModel);\n  return panelSaveModel;\n}\n\nfunction updatePanelModelWithUpdate(panel, updated) {\n  panel.restoreModel(Object.assign({}, updated.model, {\n    configRev: 0,\n    // reset config rev, since changes have been saved\n    libraryPanel: toPanelModelLibraryPanel(updated),\n    title: panel.title\n  }));\n  panel.refresh();\n}\n\nfunction saveOrUpdateLibraryPanel(panel, folderId) {\n  if (!panel.libraryPanel) {\n    return Promise.reject();\n  }\n\n  if (panel.libraryPanel && panel.libraryPanel.uid === undefined) {\n    return addLibraryPanel(panel, folderId);\n  }\n\n  return updateLibraryPanel(panel);\n}","map":{"version":3,"names":["createErrorNotification","createSuccessNotification","addLibraryPanel","updateLibraryPanel","createPanelLibraryErrorNotification","message","createPanelLibrarySuccessNotification","toPanelModelLibraryPanel","libraryPanelDto","uid","name","meta","version","saveAndRefreshLibraryPanel","panel","folderId","panelSaveModel","toPanelSaveModel","savedPanel","saveOrUpdateLibraryPanel","updatePanelModelWithUpdate","getSaveModel","libraryPanel","title","undefined","updated","restoreModel","model","configRev","refresh","Promise","reject"],"sources":["/home/soula/grafana/public/app/features/library-panels/utils.ts"],"sourcesContent":["import { createErrorNotification, createSuccessNotification } from '../../core/copy/appNotification';\nimport { AppNotification } from '../../types';\nimport { PanelModel } from '../dashboard/state';\n\nimport { addLibraryPanel, updateLibraryPanel } from './state/api';\nimport { LibraryElementDTO, PanelModelLibraryPanel } from './types';\n\nexport function createPanelLibraryErrorNotification(message: string): AppNotification {\n  return createErrorNotification(message);\n}\n\nexport function createPanelLibrarySuccessNotification(message: string): AppNotification {\n  return createSuccessNotification(message);\n}\n\nexport function toPanelModelLibraryPanel(libraryPanelDto: LibraryElementDTO): PanelModelLibraryPanel {\n  const { uid, name, meta, version } = libraryPanelDto;\n  return { uid, name, meta, version };\n}\n\nexport async function saveAndRefreshLibraryPanel(panel: PanelModel, folderId: number): Promise<LibraryElementDTO> {\n  const panelSaveModel = toPanelSaveModel(panel);\n  const savedPanel = await saveOrUpdateLibraryPanel(panelSaveModel, folderId);\n  updatePanelModelWithUpdate(panel, savedPanel);\n  return savedPanel;\n}\n\nfunction toPanelSaveModel(panel: PanelModel): any {\n  let panelSaveModel = panel.getSaveModel();\n  panelSaveModel = {\n    libraryPanel: {\n      name: panel.title,\n      uid: undefined,\n    },\n    ...panelSaveModel,\n  };\n\n  return panelSaveModel;\n}\n\nfunction updatePanelModelWithUpdate(panel: PanelModel, updated: LibraryElementDTO): void {\n  panel.restoreModel({\n    ...updated.model,\n    configRev: 0, // reset config rev, since changes have been saved\n    libraryPanel: toPanelModelLibraryPanel(updated),\n    title: panel.title,\n  });\n  panel.refresh();\n}\n\nfunction saveOrUpdateLibraryPanel(panel: any, folderId: number): Promise<LibraryElementDTO> {\n  if (!panel.libraryPanel) {\n    return Promise.reject();\n  }\n\n  if (panel.libraryPanel && panel.libraryPanel.uid === undefined) {\n    return addLibraryPanel(panel, folderId!);\n  }\n\n  return updateLibraryPanel(panel);\n}\n"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,yBAAlC,QAAmE,iCAAnE;AAIA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,aAApD;AAGA,OAAO,SAASC,mCAAT,CAA6CC,OAA7C,EAA+E;EACpF,OAAOL,uBAAuB,CAACK,OAAD,CAA9B;AACD;AAED,OAAO,SAASC,qCAAT,CAA+CD,OAA/C,EAAiF;EACtF,OAAOJ,yBAAyB,CAACI,OAAD,CAAhC;AACD;AAED,OAAO,SAASE,wBAAT,CAAkCC,eAAlC,EAA8F;EACnG,MAAM;IAAEC,GAAF;IAAOC,IAAP;IAAaC,IAAb;IAAmBC;EAAnB,IAA+BJ,eAArC;EACA,OAAO;IAAEC,GAAF;IAAOC,IAAP;IAAaC,IAAb;IAAmBC;EAAnB,CAAP;AACD;AAED,OAAO,eAAeC,0BAAf,CAA0CC,KAA1C,EAA6DC,QAA7D,EAA2G;EAChH,MAAMC,cAAc,GAAGC,gBAAgB,CAACH,KAAD,CAAvC;EACA,MAAMI,UAAU,GAAG,MAAMC,wBAAwB,CAACH,cAAD,EAAiBD,QAAjB,CAAjD;EACAK,0BAA0B,CAACN,KAAD,EAAQI,UAAR,CAA1B;EACA,OAAOA,UAAP;AACD;;AAED,SAASD,gBAAT,CAA0BH,KAA1B,EAAkD;EAChD,IAAIE,cAAc,GAAGF,KAAK,CAACO,YAAN,EAArB;EACAL,cAAc;IACZM,YAAY,EAAE;MACZZ,IAAI,EAAEI,KAAK,CAACS,KADA;MAEZd,GAAG,EAAEe;IAFO;EADF,GAKTR,cALS,CAAd;EAQA,OAAOA,cAAP;AACD;;AAED,SAASI,0BAAT,CAAoCN,KAApC,EAAuDW,OAAvD,EAAyF;EACvFX,KAAK,CAACY,YAAN,mBACKD,OAAO,CAACE,KADb;IAEEC,SAAS,EAAE,CAFb;IAEgB;IACdN,YAAY,EAAEf,wBAAwB,CAACkB,OAAD,CAHxC;IAIEF,KAAK,EAAET,KAAK,CAACS;EAJf;EAMAT,KAAK,CAACe,OAAN;AACD;;AAED,SAASV,wBAAT,CAAkCL,KAAlC,EAA8CC,QAA9C,EAA4F;EAC1F,IAAI,CAACD,KAAK,CAACQ,YAAX,EAAyB;IACvB,OAAOQ,OAAO,CAACC,MAAR,EAAP;EACD;;EAED,IAAIjB,KAAK,CAACQ,YAAN,IAAsBR,KAAK,CAACQ,YAAN,CAAmBb,GAAnB,KAA2Be,SAArD,EAAgE;IAC9D,OAAOtB,eAAe,CAACY,KAAD,EAAQC,QAAR,CAAtB;EACD;;EAED,OAAOZ,kBAAkB,CAACW,KAAD,CAAzB;AACD"},"metadata":{},"sourceType":"module"}