{"ast":null,"code":"import { cloneDeep } from 'lodash';\nimport { from, merge, of } from 'rxjs';\nimport { catchError, filter, finalize, map, mergeAll, mergeMap, reduce, takeUntil } from 'rxjs/operators';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { AnnotationQueryFinished, AnnotationQueryStarted } from '../../../../types/events';\nimport { AnnotationsQueryRunner } from './AnnotationsQueryRunner';\nimport { getDashboardQueryRunner } from './DashboardQueryRunner';\nimport { LegacyAnnotationQueryRunner } from './LegacyAnnotationQueryRunner';\nimport { emptyResult, handleDatasourceSrvError, translateQueryResult } from './utils';\nexport class AnnotationsWorker {\n  constructor(runners = [new LegacyAnnotationQueryRunner(), new AnnotationsQueryRunner()]) {\n    this.runners = runners;\n  }\n\n  canWork({\n    dashboard\n  }) {\n    const annotations = dashboard.annotations.list.find(AnnotationsWorker.getAnnotationsToProcessFilter); // We shouldn't return annotations for public dashboards v1\n\n    return Boolean(annotations) && !this.publicDashboardViewMode(dashboard);\n  }\n\n  work(options) {\n    if (!this.canWork(options)) {\n      return emptyResult();\n    }\n\n    const {\n      dashboard,\n      range\n    } = options;\n    const annotations = dashboard.annotations.list.filter(AnnotationsWorker.getAnnotationsToProcessFilter);\n    const observables = annotations.map(annotation => {\n      const datasourceObservable = from(getDataSourceSrv().get(annotation.datasource)).pipe(catchError(handleDatasourceSrvError) // because of the reduce all observables need to be completed, so an erroneous observable wont do\n      );\n      return datasourceObservable.pipe(mergeMap(datasource => {\n        const runner = this.runners.find(r => r.canRun(datasource));\n\n        if (!runner) {\n          return of([]);\n        }\n\n        dashboard.events.publish(new AnnotationQueryStarted(annotation));\n        return runner.run({\n          annotation,\n          datasource,\n          dashboard,\n          range\n        }).pipe(takeUntil(getDashboardQueryRunner().cancellations().pipe(filter(a => a === annotation))), map(results => {\n          // store response in annotation object if this is a snapshot call\n          if (dashboard.snapshot) {\n            annotation.snapshotData = cloneDeep(results);\n          } // translate result\n\n\n          return translateQueryResult(annotation, results);\n        }), finalize(() => {\n          dashboard.events.publish(new AnnotationQueryFinished(annotation));\n        }));\n      }));\n    });\n    return merge(observables).pipe(mergeAll(), reduce((acc, value) => {\n      // should we use scan or reduce here\n      // reduce will only emit when all observables are completed\n      // scan will emit when any observable is completed\n      // choosing reduce to minimize re-renders\n      return acc.concat(value);\n    }), map(annotations => {\n      return {\n        annotations,\n        alertStates: []\n      };\n    }));\n  }\n\n  static getAnnotationsToProcessFilter(annotation) {\n    return annotation.enable && !Boolean(annotation.snapshotData);\n  }\n\n  publicDashboardViewMode(dashboard) {\n    return dashboard.meta.publicDashboardAccessToken !== undefined && dashboard.meta.publicDashboardAccessToken !== '';\n  }\n\n}","map":{"version":3,"names":["cloneDeep","from","merge","of","catchError","filter","finalize","map","mergeAll","mergeMap","reduce","takeUntil","getDataSourceSrv","AnnotationQueryFinished","AnnotationQueryStarted","AnnotationsQueryRunner","getDashboardQueryRunner","LegacyAnnotationQueryRunner","emptyResult","handleDatasourceSrvError","translateQueryResult","AnnotationsWorker","constructor","runners","canWork","dashboard","annotations","list","find","getAnnotationsToProcessFilter","Boolean","publicDashboardViewMode","work","options","range","observables","annotation","datasourceObservable","get","datasource","pipe","runner","r","canRun","events","publish","run","cancellations","a","results","snapshot","snapshotData","acc","value","concat","alertStates","enable","meta","publicDashboardAccessToken","undefined"],"sources":["/home/soula/grafana/public/app/features/query/state/DashboardQueryRunner/AnnotationsWorker.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\nimport { from, merge, Observable, of } from 'rxjs';\nimport { catchError, filter, finalize, map, mergeAll, mergeMap, reduce, takeUntil } from 'rxjs/operators';\n\nimport { AnnotationQuery, DataSourceApi } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { AnnotationQueryFinished, AnnotationQueryStarted } from '../../../../types/events';\nimport { DashboardModel } from '../../../dashboard/state';\n\nimport { AnnotationsQueryRunner } from './AnnotationsQueryRunner';\nimport { getDashboardQueryRunner } from './DashboardQueryRunner';\nimport { LegacyAnnotationQueryRunner } from './LegacyAnnotationQueryRunner';\nimport {\n  AnnotationQueryRunner,\n  DashboardQueryRunnerOptions,\n  DashboardQueryRunnerWorker,\n  DashboardQueryRunnerWorkerResult,\n} from './types';\nimport { emptyResult, handleDatasourceSrvError, translateQueryResult } from './utils';\n\nexport class AnnotationsWorker implements DashboardQueryRunnerWorker {\n  constructor(\n    private readonly runners: AnnotationQueryRunner[] = [\n      new LegacyAnnotationQueryRunner(),\n      new AnnotationsQueryRunner(),\n    ]\n  ) {}\n\n  canWork({ dashboard }: DashboardQueryRunnerOptions): boolean {\n    const annotations = dashboard.annotations.list.find(AnnotationsWorker.getAnnotationsToProcessFilter);\n    // We shouldn't return annotations for public dashboards v1\n    return Boolean(annotations) && !this.publicDashboardViewMode(dashboard);\n  }\n\n  work(options: DashboardQueryRunnerOptions): Observable<DashboardQueryRunnerWorkerResult> {\n    if (!this.canWork(options)) {\n      return emptyResult();\n    }\n\n    const { dashboard, range } = options;\n    const annotations = dashboard.annotations.list.filter(AnnotationsWorker.getAnnotationsToProcessFilter);\n    const observables = annotations.map((annotation) => {\n      const datasourceObservable = from(getDataSourceSrv().get(annotation.datasource)).pipe(\n        catchError(handleDatasourceSrvError) // because of the reduce all observables need to be completed, so an erroneous observable wont do\n      );\n      return datasourceObservable.pipe(\n        mergeMap((datasource?: DataSourceApi) => {\n          const runner = this.runners.find((r) => r.canRun(datasource));\n          if (!runner) {\n            return of([]);\n          }\n\n          dashboard.events.publish(new AnnotationQueryStarted(annotation));\n\n          return runner.run({ annotation, datasource, dashboard, range }).pipe(\n            takeUntil(\n              getDashboardQueryRunner()\n                .cancellations()\n                .pipe(filter((a) => a === annotation))\n            ),\n            map((results) => {\n              // store response in annotation object if this is a snapshot call\n              if (dashboard.snapshot) {\n                annotation.snapshotData = cloneDeep(results);\n              }\n              // translate result\n              return translateQueryResult(annotation, results);\n            }),\n            finalize(() => {\n              dashboard.events.publish(new AnnotationQueryFinished(annotation));\n            })\n          );\n        })\n      );\n    });\n\n    return merge(observables).pipe(\n      mergeAll(),\n      reduce((acc, value) => {\n        // should we use scan or reduce here\n        // reduce will only emit when all observables are completed\n        // scan will emit when any observable is completed\n        // choosing reduce to minimize re-renders\n        return acc.concat(value);\n      }),\n      map((annotations) => {\n        return { annotations, alertStates: [] };\n      })\n    );\n  }\n\n  private static getAnnotationsToProcessFilter(annotation: AnnotationQuery): boolean {\n    return annotation.enable && !Boolean(annotation.snapshotData);\n  }\n\n  publicDashboardViewMode(dashboard: DashboardModel): boolean {\n    return dashboard.meta.publicDashboardAccessToken !== undefined && dashboard.meta.publicDashboardAccessToken !== '';\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}