{"ast":null,"code":"var _Card$Heading, _Card$Description, _Card$Figure;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { omit } from 'lodash';\nimport React, { PureComponent, useState } from 'react';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { LoadingState, ThresholdsMode } from '@grafana/data';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport { Button, Card, Icon } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { EmptyQueryWrapper, QueryWrapper } from './QueryWrapper';\nimport { queriesWithUpdatedReferences } from './util';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class QueryRows extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onRemoveQuery\", query => {\n      this.props.onQueriesChange(this.props.queries.filter(item => {\n        return item.model.refId !== query.refId;\n      }));\n    });\n\n    _defineProperty(this, \"onChangeTimeRange\", (timeRange, index) => {\n      const {\n        queries,\n        onQueriesChange\n      } = this.props;\n      onQueriesChange(queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        return Object.assign({}, item, {\n          relativeTimeRange: timeRange\n        });\n      }));\n    });\n\n    _defineProperty(this, \"onChangeThreshold\", (thresholds, index) => {\n      const {\n        queries,\n        onQueriesChange\n      } = this.props;\n      const referencedRefId = queries[index].refId;\n      onQueriesChange(queries.map(query => {\n        if (!isExpressionQuery(query.model)) {\n          return query;\n        }\n\n        if (query.model.conditions && query.model.conditions[0].query.params[0] === referencedRefId) {\n          return Object.assign({}, query, {\n            model: Object.assign({}, query.model, {\n              conditions: query.model.conditions.map((condition, conditionIndex) => {\n                // Only update the first condition for a given refId.\n                if (condition.query.params[0] === referencedRefId && conditionIndex === 0) {\n                  return Object.assign({}, condition, {\n                    evaluator: Object.assign({}, condition.evaluator, {\n                      params: [parseFloat(thresholds.steps[1].value.toPrecision(3))]\n                    })\n                  });\n                }\n\n                return condition;\n              })\n            })\n          });\n        }\n\n        return query;\n      }));\n    });\n\n    _defineProperty(this, \"onChangeDataSource\", (settings, index) => {\n      const {\n        queries,\n        onQueriesChange\n      } = this.props;\n      const updatedQueries = queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        return copyModel(item, settings.uid);\n      });\n      onQueriesChange(updatedQueries);\n    });\n\n    _defineProperty(this, \"onChangeQuery\", (query, index) => {\n      const {\n        queries,\n        onQueriesChange\n      } = this.props; // find what queries still have a reference to the old name\n\n      const previousRefId = queries[index].refId;\n      const newRefId = query.refId;\n      onQueriesChange(queriesWithUpdatedReferences(queries, previousRefId, newRefId).map((item, itemIndex) => {\n        var _item$model$queryType;\n\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        return Object.assign({}, item, {\n          refId: query.refId,\n          queryType: (_item$model$queryType = item.model.queryType) !== null && _item$model$queryType !== void 0 ? _item$model$queryType : '',\n          model: Object.assign({}, item.model, query, {\n            datasource: query.datasource\n          })\n        });\n      }));\n    });\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      const {\n        queries,\n        onQueriesChange\n      } = this.props;\n\n      if (!result || !result.destination) {\n        return;\n      }\n\n      const startIndex = result.source.index;\n      const endIndex = result.destination.index;\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      const update = Array.from(queries);\n      const [removed] = update.splice(startIndex, 1);\n      update.splice(endIndex, 0, removed);\n      onQueriesChange(update);\n    });\n\n    _defineProperty(this, \"onDuplicateQuery\", (query, source) => {\n      this.props.onDuplicateQuery(Object.assign({}, source, {\n        model: query\n      }));\n    });\n\n    _defineProperty(this, \"getDataSourceSettings\", query => {\n      return getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    });\n\n    _defineProperty(this, \"getThresholdsForQueries\", queries => {\n      const record = {};\n\n      for (const query of queries) {\n        if (!isExpressionQuery(query.model)) {\n          continue;\n        }\n\n        if (!Array.isArray(query.model.conditions)) {\n          continue;\n        }\n\n        query.model.conditions.forEach((condition, index) => {\n          if (index > 0) {\n            return;\n          }\n\n          const threshold = condition.evaluator.params[0];\n          const refId = condition.query.params[0];\n\n          if (condition.evaluator.type === 'outside_range' || condition.evaluator.type === 'within_range') {\n            return;\n          }\n\n          if (!record[refId]) {\n            record[refId] = {\n              mode: ThresholdsMode.Absolute,\n              steps: [{\n                value: -Infinity,\n                color: config.theme2.colors.success.main\n              }]\n            };\n          }\n\n          record[refId].steps.push({\n            value: threshold,\n            color: config.theme2.colors.error.main\n          });\n        });\n      }\n\n      return record;\n    });\n\n    this.state = {\n      dataPerQuery: {}\n    };\n  }\n\n  render() {\n    const {\n      onDuplicateQuery,\n      onRunQueries,\n      queries\n    } = this.props;\n    const thresholdByRefId = this.getThresholdsForQueries(queries);\n    return /*#__PURE__*/_jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      children: /*#__PURE__*/_jsx(Droppable, {\n        droppableId: \"alerting-queries\",\n        direction: \"vertical\",\n        children: provided => {\n          return /*#__PURE__*/_jsxs(\"div\", Object.assign({\n            ref: provided.innerRef\n          }, provided.droppableProps, {\n            children: [queries.map((query, index) => {\n              var _this$props$data$quer, _this$props$data;\n\n              const data = (_this$props$data$quer = (_this$props$data = this.props.data) === null || _this$props$data === void 0 ? void 0 : _this$props$data[query.refId]) !== null && _this$props$data$quer !== void 0 ? _this$props$data$quer : {\n                series: [],\n                state: LoadingState.NotStarted\n              };\n              const dsSettings = this.getDataSourceSettings(query);\n\n              if (!dsSettings) {\n                return /*#__PURE__*/_jsx(DatasourceNotFound, {\n                  index: index,\n                  model: query.model,\n                  onUpdateDatasource: () => {\n                    const defaultDataSource = getDatasourceSrv().getInstanceSettings(null);\n\n                    if (defaultDataSource) {\n                      this.onChangeDataSource(defaultDataSource, index);\n                    }\n                  },\n                  onRemoveQuery: () => {\n                    this.onRemoveQuery(query);\n                  }\n                }, `${query.refId}-${index}`);\n              }\n\n              return /*#__PURE__*/_jsx(QueryWrapper, {\n                index: index,\n                dsSettings: dsSettings,\n                data: data,\n                query: query,\n                onChangeQuery: this.onChangeQuery,\n                onRemoveQuery: this.onRemoveQuery,\n                queries: queries,\n                onChangeDataSource: this.onChangeDataSource,\n                onDuplicateQuery: onDuplicateQuery,\n                onRunQueries: onRunQueries,\n                onChangeTimeRange: this.onChangeTimeRange,\n                thresholds: thresholdByRefId[query.refId],\n                onChangeThreshold: this.onChangeThreshold\n              }, query.refId);\n            }), provided.placeholder]\n          }));\n        }\n      })\n    });\n  }\n\n}\n\nfunction copyModel(item, uid) {\n  return Object.assign({}, item, {\n    model: omit(item.model, 'datasource'),\n    datasourceUid: uid\n  });\n}\n\nconst DatasourceNotFound = ({\n  index,\n  onUpdateDatasource,\n  onRemoveQuery,\n  model\n}) => {\n  const refId = model.refId;\n  const [showDetails, setShowDetails] = useState(false);\n\n  const toggleDetails = () => {\n    setShowDetails(show => !show);\n  };\n\n  const handleUpdateDatasource = () => {\n    onUpdateDatasource();\n  };\n\n  return /*#__PURE__*/_jsx(EmptyQueryWrapper, {\n    children: /*#__PURE__*/_jsxs(QueryOperationRow, {\n      title: refId,\n      draggable: true,\n      index: index,\n      id: refId,\n      isOpen: true,\n      children: [/*#__PURE__*/_jsxs(Card, {\n        children: [_Card$Heading || (_Card$Heading = /*#__PURE__*/_jsx(Card.Heading, {\n          children: \"This datasource has been removed\"\n        })), _Card$Description || (_Card$Description = /*#__PURE__*/_jsx(Card.Description, {\n          children: \"The datasource for this query was not found, it was either removed or is not installed correctly.\"\n        })), _Card$Figure || (_Card$Figure = /*#__PURE__*/_jsx(Card.Figure, {\n          children: /*#__PURE__*/_jsx(Icon, {\n            name: \"question-circle\"\n          })\n        })), /*#__PURE__*/_jsxs(Card.Actions, {\n          children: [/*#__PURE__*/_jsx(Button, {\n            variant: \"secondary\",\n            onClick: handleUpdateDatasource,\n            children: \"Update datasource\"\n          }, \"update\"), /*#__PURE__*/_jsx(Button, {\n            variant: \"destructive\",\n            onClick: onRemoveQuery,\n            children: \"Remove query\"\n          }, \"remove\")]\n        }), /*#__PURE__*/_jsx(Card.SecondaryActions, {\n          children: /*#__PURE__*/_jsx(Button, {\n            onClick: toggleDetails,\n            icon: showDetails ? 'angle-up' : 'angle-down',\n            fill: \"text\",\n            size: \"sm\",\n            children: \"Show details\"\n          }, \"details\")\n        })]\n      }), showDetails && /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsx(\"pre\", {\n          children: /*#__PURE__*/_jsx(\"code\", {\n            children: JSON.stringify(model, null, 2)\n          })\n        })\n      })]\n    })\n  });\n};","map":{"version":3,"names":["omit","React","PureComponent","useState","DragDropContext","Droppable","LoadingState","ThresholdsMode","config","getDataSourceSrv","Button","Card","Icon","QueryOperationRow","isExpressionQuery","getDatasourceSrv","EmptyQueryWrapper","QueryWrapper","queriesWithUpdatedReferences","QueryRows","constructor","props","query","onQueriesChange","queries","filter","item","model","refId","timeRange","index","map","itemIndex","relativeTimeRange","thresholds","referencedRefId","conditions","params","condition","conditionIndex","evaluator","parseFloat","steps","value","toPrecision","settings","updatedQueries","copyModel","uid","previousRefId","newRefId","queryType","datasource","result","destination","startIndex","source","endIndex","update","Array","from","removed","splice","onDuplicateQuery","getInstanceSettings","datasourceUid","record","isArray","forEach","threshold","type","mode","Absolute","Infinity","color","theme2","colors","success","main","push","error","state","dataPerQuery","render","onRunQueries","thresholdByRefId","getThresholdsForQueries","onDragEnd","provided","innerRef","droppableProps","data","series","NotStarted","dsSettings","getDataSourceSettings","defaultDataSource","onChangeDataSource","onRemoveQuery","onChangeQuery","onChangeTimeRange","onChangeThreshold","placeholder","DatasourceNotFound","onUpdateDatasource","showDetails","setShowDetails","toggleDetails","show","handleUpdateDatasource","JSON","stringify"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/QueryRows.tsx"],"sourcesContent":["import { omit } from 'lodash';\nimport React, { PureComponent, useState } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport {\n  DataQuery,\n  DataSourceInstanceSettings,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n  ThresholdsConfig,\n  ThresholdsMode,\n} from '@grafana/data';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport { Button, Card, Icon } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { EmptyQueryWrapper, QueryWrapper } from './QueryWrapper';\nimport { queriesWithUpdatedReferences } from './util';\n\ninterface Props {\n  // The query configuration\n  queries: AlertQuery[];\n  data: Record<string, PanelData>;\n\n  // Query editing\n  onQueriesChange: (queries: AlertQuery[]) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n}\n\ninterface State {\n  dataPerQuery: Record<string, PanelData>;\n}\n\nexport class QueryRows extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { dataPerQuery: {} };\n  }\n\n  onRemoveQuery = (query: DataQuery) => {\n    this.props.onQueriesChange(\n      this.props.queries.filter((item) => {\n        return item.model.refId !== query.refId;\n      })\n    );\n  };\n\n  onChangeTimeRange = (timeRange: RelativeTimeRange, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          relativeTimeRange: timeRange,\n        };\n      })\n    );\n  };\n\n  onChangeThreshold = (thresholds: ThresholdsConfig, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    const referencedRefId = queries[index].refId;\n\n    onQueriesChange(\n      queries.map((query) => {\n        if (!isExpressionQuery(query.model)) {\n          return query;\n        }\n\n        if (query.model.conditions && query.model.conditions[0].query.params[0] === referencedRefId) {\n          return {\n            ...query,\n            model: {\n              ...query.model,\n              conditions: query.model.conditions.map((condition, conditionIndex) => {\n                // Only update the first condition for a given refId.\n                if (condition.query.params[0] === referencedRefId && conditionIndex === 0) {\n                  return {\n                    ...condition,\n                    evaluator: {\n                      ...condition.evaluator,\n                      params: [parseFloat(thresholds.steps[1].value.toPrecision(3))],\n                    },\n                  };\n                }\n                return condition;\n              }),\n            },\n          };\n        }\n        return query;\n      })\n    );\n  };\n\n  onChangeDataSource = (settings: DataSourceInstanceSettings, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    const updatedQueries = queries.map((item, itemIndex) => {\n      if (itemIndex !== index) {\n        return item;\n      }\n\n      return copyModel(item, settings.uid);\n    });\n    onQueriesChange(updatedQueries);\n  };\n\n  onChangeQuery = (query: DataQuery, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    // find what queries still have a reference to the old name\n    const previousRefId = queries[index].refId;\n    const newRefId = query.refId;\n\n    onQueriesChange(\n      queriesWithUpdatedReferences(queries, previousRefId, newRefId).map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        return {\n          ...item,\n          refId: query.refId,\n          queryType: item.model.queryType ?? '',\n          model: {\n            ...item.model,\n            ...query,\n            datasource: query.datasource!,\n          },\n        };\n      })\n    );\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n  };\n\n  onDuplicateQuery = (query: DataQuery, source: AlertQuery): void => {\n    this.props.onDuplicateQuery({\n      ...source,\n      model: query,\n    });\n  };\n\n  getDataSourceSettings = (query: AlertQuery): DataSourceInstanceSettings | undefined => {\n    return getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n  };\n\n  getThresholdsForQueries = (queries: AlertQuery[]): Record<string, ThresholdsConfig> => {\n    const record: Record<string, ThresholdsConfig> = {};\n\n    for (const query of queries) {\n      if (!isExpressionQuery(query.model)) {\n        continue;\n      }\n\n      if (!Array.isArray(query.model.conditions)) {\n        continue;\n      }\n\n      query.model.conditions.forEach((condition, index) => {\n        if (index > 0) {\n          return;\n        }\n        const threshold = condition.evaluator.params[0];\n        const refId = condition.query.params[0];\n\n        if (condition.evaluator.type === 'outside_range' || condition.evaluator.type === 'within_range') {\n          return;\n        }\n        if (!record[refId]) {\n          record[refId] = {\n            mode: ThresholdsMode.Absolute,\n            steps: [\n              {\n                value: -Infinity,\n                color: config.theme2.colors.success.main,\n              },\n            ],\n          };\n        }\n\n        record[refId].steps.push({\n          value: threshold,\n          color: config.theme2.colors.error.main,\n        });\n      });\n    }\n\n    return record;\n  };\n\n  render() {\n    const { onDuplicateQuery, onRunQueries, queries } = this.props;\n    const thresholdByRefId = this.getThresholdsForQueries(queries);\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"alerting-queries\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {queries.map((query, index) => {\n                  const data: PanelData = this.props.data?.[query.refId] ?? {\n                    series: [],\n                    state: LoadingState.NotStarted,\n                  };\n                  const dsSettings = this.getDataSourceSettings(query);\n\n                  if (!dsSettings) {\n                    return (\n                      <DatasourceNotFound\n                        key={`${query.refId}-${index}`}\n                        index={index}\n                        model={query.model}\n                        onUpdateDatasource={() => {\n                          const defaultDataSource = getDatasourceSrv().getInstanceSettings(null);\n                          if (defaultDataSource) {\n                            this.onChangeDataSource(defaultDataSource, index);\n                          }\n                        }}\n                        onRemoveQuery={() => {\n                          this.onRemoveQuery(query);\n                        }}\n                      />\n                    );\n                  }\n\n                  return (\n                    <QueryWrapper\n                      index={index}\n                      key={query.refId}\n                      dsSettings={dsSettings}\n                      data={data}\n                      query={query}\n                      onChangeQuery={this.onChangeQuery}\n                      onRemoveQuery={this.onRemoveQuery}\n                      queries={queries}\n                      onChangeDataSource={this.onChangeDataSource}\n                      onDuplicateQuery={onDuplicateQuery}\n                      onRunQueries={onRunQueries}\n                      onChangeTimeRange={this.onChangeTimeRange}\n                      thresholds={thresholdByRefId[query.refId]}\n                      onChangeThreshold={this.onChangeThreshold}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nfunction copyModel(item: AlertQuery, uid: string): Omit<AlertQuery, 'datasource'> {\n  return {\n    ...item,\n    model: omit(item.model, 'datasource'),\n    datasourceUid: uid,\n  };\n}\n\ninterface DatasourceNotFoundProps {\n  index: number;\n  model: AlertDataQuery;\n  onUpdateDatasource: () => void;\n  onRemoveQuery: () => void;\n}\n\nconst DatasourceNotFound = ({ index, onUpdateDatasource, onRemoveQuery, model }: DatasourceNotFoundProps) => {\n  const refId = model.refId;\n\n  const [showDetails, setShowDetails] = useState<boolean>(false);\n\n  const toggleDetails = () => {\n    setShowDetails((show) => !show);\n  };\n\n  const handleUpdateDatasource = () => {\n    onUpdateDatasource();\n  };\n\n  return (\n    <EmptyQueryWrapper>\n      <QueryOperationRow title={refId} draggable index={index} id={refId} isOpen>\n        <Card>\n          <Card.Heading>This datasource has been removed</Card.Heading>\n          <Card.Description>\n            The datasource for this query was not found, it was either removed or is not installed correctly.\n          </Card.Description>\n          <Card.Figure>\n            <Icon name=\"question-circle\" />\n          </Card.Figure>\n          <Card.Actions>\n            <Button key=\"update\" variant=\"secondary\" onClick={handleUpdateDatasource}>\n              Update datasource\n            </Button>\n            <Button key=\"remove\" variant=\"destructive\" onClick={onRemoveQuery}>\n              Remove query\n            </Button>\n          </Card.Actions>\n          <Card.SecondaryActions>\n            <Button\n              key=\"details\"\n              onClick={toggleDetails}\n              icon={showDetails ? 'angle-up' : 'angle-down'}\n              fill=\"text\"\n              size=\"sm\"\n            >\n              Show details\n            </Button>\n          </Card.SecondaryActions>\n        </Card>\n        {showDetails && (\n          <div>\n            <pre>\n              <code>{JSON.stringify(model, null, 2)}</code>\n            </pre>\n          </div>\n        )}\n      </QueryOperationRow>\n    </EmptyQueryWrapper>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}