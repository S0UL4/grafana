{"ast":null,"code":"import { createAsyncThunk as createAsyncThunkUntyped } from '@reduxjs/toolkit';\nimport { useSelector as useSelectorUntyped, useDispatch as useDispatchUntyped } from 'react-redux';\nexport const useDispatch = () => useDispatchUntyped();\nexport const useSelector = useSelectorUntyped;\nexport const createAsyncThunk = (typePrefix, payloadCreator, options) => createAsyncThunkUntyped(typePrefix, payloadCreator, options);","map":{"version":3,"names":["createAsyncThunk","createAsyncThunkUntyped","useSelector","useSelectorUntyped","useDispatch","useDispatchUntyped","typePrefix","payloadCreator","options"],"sources":["/home/soula/grafana/public/app/types/store.ts"],"sourcesContent":["import {\n  Action,\n  AsyncThunk,\n  AsyncThunkOptions,\n  AsyncThunkPayloadCreator,\n  createAsyncThunk as createAsyncThunkUntyped,\n  PayloadAction,\n} from '@reduxjs/toolkit';\nimport {\n  useSelector as useSelectorUntyped,\n  TypedUseSelectorHook,\n  useDispatch as useDispatchUntyped,\n} from 'react-redux';\nimport { ThunkAction, ThunkDispatch as GenericThunkDispatch } from 'redux-thunk';\n\nimport type { createRootReducer } from 'app/core/reducers/root';\nimport { configureStore } from 'app/store/configureStore';\n\nexport type StoreState = ReturnType<ReturnType<typeof createRootReducer>>;\n\n/*\n * Utility type to get strongly types thunks\n */\nexport type ThunkResult<R> = ThunkAction<R, StoreState, undefined, PayloadAction<any>>;\n\nexport type ThunkDispatch = GenericThunkDispatch<StoreState, undefined, Action>;\n\n// Typed useDispatch & useSelector hooks\nexport type AppDispatch = ReturnType<typeof configureStore>['dispatch'];\nexport const useDispatch = () => useDispatchUntyped<AppDispatch>();\nexport const useSelector: TypedUseSelectorHook<StoreState> = useSelectorUntyped;\n\ntype DefaultThunkApiConfig = { dispatch: AppDispatch; state: StoreState };\nexport const createAsyncThunk = <Returned, ThunkArg = void, ThunkApiConfig = DefaultThunkApiConfig>(\n  typePrefix: string,\n  payloadCreator: AsyncThunkPayloadCreator<Returned, ThunkArg, ThunkApiConfig>,\n  options?: AsyncThunkOptions<ThunkArg, ThunkApiConfig>\n): AsyncThunk<Returned, ThunkArg, ThunkApiConfig> => createAsyncThunkUntyped(typePrefix, payloadCreator, options);\n"],"mappings":"AAAA,SAKEA,gBAAgB,IAAIC,uBALtB,QAOO,kBAPP;AAQA,SACEC,WAAW,IAAIC,kBADjB,EAGEC,WAAW,IAAIC,kBAHjB,QAIO,aAJP;AAqBA,OAAO,MAAMD,WAAW,GAAG,MAAMC,kBAAkB,EAA5C;AACP,OAAO,MAAMH,WAA6C,GAAGC,kBAAtD;AAGP,OAAO,MAAMH,gBAAgB,GAAG,CAC9BM,UAD8B,EAE9BC,cAF8B,EAG9BC,OAH8B,KAIqBP,uBAAuB,CAACK,UAAD,EAAaC,cAAb,EAA6BC,OAA7B,CAJrE"},"metadata":{},"sourceType":"module"}