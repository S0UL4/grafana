{"ast":null,"code":"const _excluded = [\"iconName\", \"onClick\", \"className\", \"label\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cx, css } from '@emotion/css';\nimport React from 'react';\nimport { Icon } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst SROnly = css`\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`;\nexport const IconButton = _ref => {\n  let {\n    iconName,\n    onClick,\n    className,\n    label\n  } = _ref,\n      buttonProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return /*#__PURE__*/_jsxs(\"button\", Object.assign({\n    className: cx('gf-form-label gf-form-label--btn query-part', className),\n    onClick: onClick\n  }, buttonProps, {\n    children: [/*#__PURE__*/_jsx(\"span\", {\n      className: SROnly,\n      children: label\n    }), /*#__PURE__*/_jsx(Icon, {\n      name: iconName,\n      \"aria-hidden\": \"true\"\n    })]\n  }));\n};","map":{"version":3,"names":["cx","css","React","Icon","SROnly","IconButton","iconName","onClick","className","label","buttonProps"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/IconButton.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport React, { ComponentProps, ButtonHTMLAttributes } from 'react';\n\nimport { Icon } from '@grafana/ui';\n\nconst SROnly = css`\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`;\n\ninterface Props {\n  iconName: ComponentProps<typeof Icon>['name'];\n  onClick: () => void;\n  className?: string;\n  label: string;\n}\n\nexport const IconButton = ({\n  iconName,\n  onClick,\n  className,\n  label,\n  ...buttonProps\n}: Props & ButtonHTMLAttributes<HTMLButtonElement>) => (\n  <button className={cx('gf-form-label gf-form-label--btn query-part', className)} onClick={onClick} {...buttonProps}>\n    <span className={SROnly}>{label}</span>\n    <Icon name={iconName} aria-hidden=\"true\" />\n  </button>\n);\n"],"mappings":";;;;AAAA,SAASA,EAAT,EAAaC,GAAb,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAA4D,OAA5D;AAEA,SAASC,IAAT,QAAqB,aAArB;;;AAEA,MAAMC,MAAM,GAAGH,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAiBA,OAAO,MAAMI,UAAU,GAAG;EAAA,IAAC;IACzBC,QADyB;IAEzBC,OAFyB;IAGzBC,SAHyB;IAIzBC;EAJyB,CAAD;EAAA,IAKrBC,WALqB;;EAAA,oBAOxB;IAAQ,SAAS,EAAEV,EAAE,CAAC,6CAAD,EAAgDQ,SAAhD,CAArB;IAAiF,OAAO,EAAED;EAA1F,GAAuGG,WAAvG;IAAA,wBACE;MAAM,SAAS,EAAEN,MAAjB;MAAA,UAA0BK;IAA1B,EADF,eAEE,KAAC,IAAD;MAAM,IAAI,EAAEH,QAAZ;MAAsB,eAAY;IAAlC,EAFF;EAAA,GAPwB;AAAA,CAAnB"},"metadata":{},"sourceType":"module"}