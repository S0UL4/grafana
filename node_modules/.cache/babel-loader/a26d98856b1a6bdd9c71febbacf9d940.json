{"ast":null,"code":"import { isArray } from 'lodash';\nimport { MappingType } from '@grafana/data';\n// This is called when the panel changes from another panel\nexport const timelinePanelChangedHandler = (panel, prevPluginId, prevOptions) => {\n  var _panel$options;\n\n  let options = (_panel$options = panel.options) !== null && _panel$options !== void 0 ? _panel$options : {}; // Changing from angular singlestat\n\n  if (prevPluginId === 'natel-discrete-panel' && prevOptions.angular) {\n    var _panel$fieldConfig;\n\n    const oldOptions = prevOptions.angular;\n    const fieldConfig = (_panel$fieldConfig = panel.fieldConfig) !== null && _panel$fieldConfig !== void 0 ? _panel$fieldConfig : {\n      defaults: {},\n      overrides: []\n    };\n\n    if (oldOptions.units) {\n      fieldConfig.defaults.unit = oldOptions.units;\n    }\n\n    const custom = {\n      fillOpacity: 100,\n      lineWidth: 0\n    };\n    fieldConfig.defaults.custom = custom;\n    options.mergeValues = true; // Convert mappings\n\n    const valuemap = {\n      type: MappingType.ValueToText,\n      options: {}\n    };\n    fieldConfig.defaults.mappings = [valuemap];\n\n    if (isArray(oldOptions.colorMaps)) {\n      for (const p of oldOptions.colorMaps) {\n        const color = p.color;\n\n        if (color) {\n          valuemap.options[p.text] = {\n            color\n          };\n        }\n      }\n    }\n\n    if (isArray(oldOptions.valueMaps)) {\n      for (const p of oldOptions.valueMaps) {\n        const text = p.text;\n        const value = p.value;\n\n        if (text && value) {\n          let old = valuemap.options[value];\n\n          if (old) {\n            old.text = text;\n          } else {\n            valuemap.options[value] = {\n              text\n            };\n          }\n        }\n      }\n    }\n\n    if (isArray(oldOptions.rangeMaps)) {\n      for (const p of oldOptions.rangeMaps) {\n        let from = +p.from;\n        let to = +p.to;\n        const text = p.text;\n\n        if (text) {\n          fieldConfig.defaults.mappings.push({\n            type: MappingType.RangeToText,\n            options: {\n              from,\n              to,\n              result: {\n                text\n              }\n            }\n          });\n        }\n      }\n    } // mutates the input\n\n\n    panel.fieldConfig = fieldConfig;\n  }\n\n  return options;\n};","map":{"version":3,"names":["isArray","MappingType","timelinePanelChangedHandler","panel","prevPluginId","prevOptions","options","angular","oldOptions","fieldConfig","defaults","overrides","units","unit","custom","fillOpacity","lineWidth","mergeValues","valuemap","type","ValueToText","mappings","colorMaps","p","color","text","valueMaps","value","old","rangeMaps","from","to","push","RangeToText","result"],"sources":["/home/soula/grafana/public/app/plugins/panel/state-timeline/migrations.ts"],"sourcesContent":["import { isArray } from 'lodash';\n\nimport { FieldConfigSource, MappingType, PanelModel, ValueMap } from '@grafana/data';\n\nimport { TimelineFieldConfig, TimelineOptions } from './types';\n\n// This is called when the panel changes from another panel\nexport const timelinePanelChangedHandler = (\n  panel: PanelModel<Partial<TimelineOptions>> | any,\n  prevPluginId: string,\n  prevOptions: any\n) => {\n  let options = (panel.options ?? {}) as TimelineOptions;\n\n  // Changing from angular singlestat\n  if (prevPluginId === 'natel-discrete-panel' && prevOptions.angular) {\n    const oldOptions = prevOptions.angular;\n    const fieldConfig: FieldConfigSource = panel.fieldConfig ?? { defaults: {}, overrides: [] };\n\n    if (oldOptions.units) {\n      fieldConfig.defaults.unit = oldOptions.units;\n    }\n\n    const custom: TimelineFieldConfig = {\n      fillOpacity: 100,\n      lineWidth: 0,\n    };\n    fieldConfig.defaults.custom = custom;\n    options.mergeValues = true;\n\n    // Convert mappings\n    const valuemap: ValueMap = { type: MappingType.ValueToText, options: {} };\n    fieldConfig.defaults.mappings = [valuemap];\n\n    if (isArray(oldOptions.colorMaps)) {\n      for (const p of oldOptions.colorMaps) {\n        const color = p.color as string;\n        if (color) {\n          valuemap.options[p.text as string] = { color };\n        }\n      }\n    }\n\n    if (isArray(oldOptions.valueMaps)) {\n      for (const p of oldOptions.valueMaps) {\n        const text = p.text as string;\n        const value = p.value as string;\n        if (text && value) {\n          let old = valuemap.options[value];\n          if (old) {\n            old.text = text;\n          } else {\n            valuemap.options[value] = { text };\n          }\n        }\n      }\n    }\n\n    if (isArray(oldOptions.rangeMaps)) {\n      for (const p of oldOptions.rangeMaps) {\n        let from = +p.from;\n        let to = +p.to;\n        const text = p.text as string;\n        if (text) {\n          fieldConfig.defaults.mappings.push({\n            type: MappingType.RangeToText,\n            options: {\n              from,\n              to,\n              result: { text },\n            },\n          });\n        }\n      }\n    }\n\n    // mutates the input\n    panel.fieldConfig = fieldConfig;\n  }\n\n  return options;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}