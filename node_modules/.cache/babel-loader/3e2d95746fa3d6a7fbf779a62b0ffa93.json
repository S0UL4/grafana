{"ast":null,"code":"const _excluded = [\"ref\"],\n      _excluded2 = [\"ref\", \"value\", \"onChange\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { partial } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useSelector } from 'react-redux';\nimport { locationUtil } from '@grafana/data';\nimport { config, locationService, reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, Field, InputControl, Modal, RadioButtonGroup } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { removeDashboardToFetchFromLocalStorage } from 'app/features/dashboard/state/initDashboard';\nimport { AccessControlAction } from 'app/types';\nimport { getExploreItemSelector } from '../state/selectors';\nimport { setDashboardInLocalStorage, AddToDashboardError } from './addToDashboard';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar SaveTarget;\n\n(function (SaveTarget) {\n  SaveTarget[\"NewDashboard\"] = \"new-dashboard\";\n  SaveTarget[\"ExistingDashboard\"] = \"existing-dashboard\";\n})(SaveTarget || (SaveTarget = {}));\n\nfunction assertIsSaveToExistingDashboardError(errors) {// the shape of the errors object is always compatible with the type above, but we need to\n  // explicitly assert its type so that TS can narrow down FormDTO to SaveToExistingDashboard\n  // when we use it in the form.\n}\n\nfunction getDashboardURL(dashboardUid) {\n  return dashboardUid ? `d/${dashboardUid}` : 'dashboard/new';\n}\n\nvar GenericError;\n\n(function (GenericError) {\n  GenericError[\"UNKNOWN\"] = \"unknown-error\";\n  GenericError[\"NAVIGATION\"] = \"navigation-error\";\n})(GenericError || (GenericError = {}));\n\nexport const AddToDashboardModal = ({\n  onClose,\n  exploreId\n}) => {\n  const exploreItem = useSelector(getExploreItemSelector(exploreId));\n  const [submissionError, setSubmissionError] = useState();\n  const {\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    },\n    watch\n  } = useForm({\n    defaultValues: {\n      saveTarget: SaveTarget.NewDashboard\n    }\n  });\n  const canCreateDashboard = contextSrv.hasAccess(AccessControlAction.DashboardsCreate, contextSrv.isEditor);\n  const canWriteDashboard = contextSrv.hasAccess(AccessControlAction.DashboardsWrite, contextSrv.isEditor);\n  const saveTargets = [];\n\n  if (canCreateDashboard) {\n    saveTargets.push({\n      label: 'New dashboard',\n      value: SaveTarget.NewDashboard\n    });\n  }\n\n  if (canWriteDashboard) {\n    saveTargets.push({\n      label: 'Existing dashboard',\n      value: SaveTarget.ExistingDashboard\n    });\n  }\n\n  const saveTarget = saveTargets.length > 1 ? watch('saveTarget') : saveTargets[0].value;\n  const modalTitle = `Add panel to ${saveTargets.length > 1 ? 'dashboard' : saveTargets[0].label.toLowerCase()}`;\n\n  const onSubmit = async (openInNewTab, data) => {\n    setSubmissionError(undefined);\n    const dashboardUid = data.saveTarget === SaveTarget.ExistingDashboard ? data.dashboardUid : undefined;\n    reportInteraction('e2d_submit', {\n      newTab: openInNewTab,\n      saveTarget: data.saveTarget,\n      queries: exploreItem.queries.length\n    });\n\n    try {\n      var _exploreItem$datasour;\n\n      await setDashboardInLocalStorage({\n        dashboardUid,\n        datasource: (_exploreItem$datasour = exploreItem.datasourceInstance) === null || _exploreItem$datasour === void 0 ? void 0 : _exploreItem$datasour.getRef(),\n        queries: exploreItem.queries,\n        queryResponse: exploreItem.queryResponse\n      });\n    } catch (error) {\n      switch (error) {\n        case AddToDashboardError.FETCH_DASHBOARD:\n          setSubmissionError({\n            error,\n            message: 'Could not fetch dashboard information. Please try again.'\n          });\n          break;\n\n        case AddToDashboardError.SET_DASHBOARD_LS:\n          setSubmissionError({\n            error,\n            message: 'Could not add panel to dashboard. Please try again.'\n          });\n          break;\n\n        default:\n          setSubmissionError({\n            error: GenericError.UNKNOWN,\n            message: 'Something went wrong. Please try again.'\n          });\n      }\n\n      return;\n    }\n\n    const dashboardURL = getDashboardURL(dashboardUid);\n\n    if (!openInNewTab) {\n      onClose();\n      locationService.push(locationUtil.stripBaseFromUrl(dashboardURL));\n      return;\n    }\n\n    const didTabOpen = !!global.open(config.appUrl + dashboardURL, '_blank');\n\n    if (!didTabOpen) {\n      setSubmissionError({\n        error: GenericError.NAVIGATION,\n        message: 'Could not navigate to the selected dashboard. Please try again.'\n      });\n      removeDashboardToFetchFromLocalStorage();\n      return;\n    }\n\n    onClose();\n  };\n\n  useEffect(() => {\n    reportInteraction('e2d_open');\n  }, []);\n  return /*#__PURE__*/_jsx(Modal, {\n    title: modalTitle,\n    onDismiss: onClose,\n    isOpen: true,\n    children: /*#__PURE__*/_jsxs(\"form\", {\n      children: [saveTargets.length > 1 && /*#__PURE__*/_jsx(InputControl, {\n        control: control,\n        render: _ref => {\n          let {} = _ref,\n              field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n          return /*#__PURE__*/_jsx(Field, {\n            label: \"Target dashboard\",\n            description: \"Choose where to add the panel.\",\n            children: /*#__PURE__*/_jsx(RadioButtonGroup, Object.assign({\n              options: saveTargets\n            }, field, {\n              id: \"e2d-save-target\"\n            }))\n          });\n        },\n        name: \"saveTarget\"\n      }), saveTarget === SaveTarget.ExistingDashboard && (() => {\n        assertIsSaveToExistingDashboardError(errors);\n        return /*#__PURE__*/_jsx(InputControl, {\n          render: _ref2 => {\n            var _errors$dashboardUid;\n\n            let {\n              field: {\n                onChange\n              }\n            } = _ref2,\n                field = _objectWithoutPropertiesLoose(_ref2.field, _excluded2);\n\n            return /*#__PURE__*/_jsx(Field, {\n              label: \"Dashboard\",\n              description: \"Select in which dashboard the panel will be created.\",\n              error: (_errors$dashboardUid = errors.dashboardUid) === null || _errors$dashboardUid === void 0 ? void 0 : _errors$dashboardUid.message,\n              invalid: !!errors.dashboardUid,\n              children: /*#__PURE__*/_jsx(DashboardPicker, Object.assign({}, field, {\n                inputId: \"e2d-dashboard-picker\",\n                defaultOptions: true,\n                onChange: d => onChange(d === null || d === void 0 ? void 0 : d.uid)\n              }))\n            });\n          },\n          control: control,\n          name: \"dashboardUid\",\n          shouldUnregister: true,\n          rules: {\n            required: {\n              value: true,\n              message: 'This field is required.'\n            }\n          }\n        });\n      })(), submissionError && /*#__PURE__*/_jsx(Alert, {\n        severity: \"error\",\n        title: \"Error adding the panel\",\n        children: submissionError.message\n      }), /*#__PURE__*/_jsxs(Modal.ButtonRow, {\n        children: [/*#__PURE__*/_jsx(Button, {\n          type: \"reset\",\n          onClick: onClose,\n          fill: \"outline\",\n          variant: \"secondary\",\n          children: \"Cancel\"\n        }), /*#__PURE__*/_jsx(Button, {\n          type: \"submit\",\n          variant: \"secondary\",\n          onClick: handleSubmit(partial(onSubmit, true)),\n          icon: \"external-link-alt\",\n          children: \"Open in new tab\"\n        }), /*#__PURE__*/_jsx(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          onClick: handleSubmit(partial(onSubmit, false)),\n          icon: \"apps\",\n          children: \"Open dashboard\"\n        })]\n      })]\n    })\n  });\n};","map":{"version":3,"names":["partial","React","useEffect","useState","useForm","useSelector","locationUtil","config","locationService","reportInteraction","Alert","Button","Field","InputControl","Modal","RadioButtonGroup","DashboardPicker","contextSrv","removeDashboardToFetchFromLocalStorage","AccessControlAction","getExploreItemSelector","setDashboardInLocalStorage","AddToDashboardError","SaveTarget","assertIsSaveToExistingDashboardError","errors","getDashboardURL","dashboardUid","GenericError","AddToDashboardModal","onClose","exploreId","exploreItem","submissionError","setSubmissionError","handleSubmit","control","formState","watch","defaultValues","saveTarget","NewDashboard","canCreateDashboard","hasAccess","DashboardsCreate","isEditor","canWriteDashboard","DashboardsWrite","saveTargets","push","label","value","ExistingDashboard","length","modalTitle","toLowerCase","onSubmit","openInNewTab","data","undefined","newTab","queries","datasource","datasourceInstance","getRef","queryResponse","error","FETCH_DASHBOARD","message","SET_DASHBOARD_LS","UNKNOWN","dashboardURL","stripBaseFromUrl","didTabOpen","global","open","appUrl","NAVIGATION","field","onChange","d","uid","required"],"sources":["/home/soula/grafana/public/app/features/explore/AddToDashboard/AddToDashboardModal.tsx"],"sourcesContent":["import { partial } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { DeepMap, FieldError, useForm } from 'react-hook-form';\nimport { useSelector } from 'react-redux';\n\nimport { locationUtil, SelectableValue } from '@grafana/data';\nimport { config, locationService, reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, Field, InputControl, Modal, RadioButtonGroup } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { removeDashboardToFetchFromLocalStorage } from 'app/features/dashboard/state/initDashboard';\nimport { ExploreId, AccessControlAction } from 'app/types';\n\nimport { getExploreItemSelector } from '../state/selectors';\n\nimport { setDashboardInLocalStorage, AddToDashboardError } from './addToDashboard';\n\nenum SaveTarget {\n  NewDashboard = 'new-dashboard',\n  ExistingDashboard = 'existing-dashboard',\n}\n\ninterface SaveTargetDTO {\n  saveTarget: SaveTarget;\n}\ninterface SaveToNewDashboardDTO extends SaveTargetDTO {\n  saveTarget: SaveTarget.NewDashboard;\n}\n\ninterface SaveToExistingDashboard extends SaveTargetDTO {\n  saveTarget: SaveTarget.ExistingDashboard;\n  dashboardUid: string;\n}\n\ntype FormDTO = SaveToNewDashboardDTO | SaveToExistingDashboard;\n\nfunction assertIsSaveToExistingDashboardError(\n  errors: DeepMap<FormDTO, FieldError>\n): asserts errors is DeepMap<SaveToExistingDashboard, FieldError> {\n  // the shape of the errors object is always compatible with the type above, but we need to\n  // explicitly assert its type so that TS can narrow down FormDTO to SaveToExistingDashboard\n  // when we use it in the form.\n}\n\nfunction getDashboardURL(dashboardUid?: string) {\n  return dashboardUid ? `d/${dashboardUid}` : 'dashboard/new';\n}\n\nenum GenericError {\n  UNKNOWN = 'unknown-error',\n  NAVIGATION = 'navigation-error',\n}\n\ninterface SubmissionError {\n  error: AddToDashboardError | GenericError;\n  message: string;\n}\n\ninterface Props {\n  onClose: () => void;\n  exploreId: ExploreId;\n}\n\nexport const AddToDashboardModal = ({ onClose, exploreId }: Props) => {\n  const exploreItem = useSelector(getExploreItemSelector(exploreId))!;\n  const [submissionError, setSubmissionError] = useState<SubmissionError | undefined>();\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    watch,\n  } = useForm<FormDTO>({\n    defaultValues: { saveTarget: SaveTarget.NewDashboard },\n  });\n\n  const canCreateDashboard = contextSrv.hasAccess(AccessControlAction.DashboardsCreate, contextSrv.isEditor);\n  const canWriteDashboard = contextSrv.hasAccess(AccessControlAction.DashboardsWrite, contextSrv.isEditor);\n\n  const saveTargets: Array<SelectableValue<SaveTarget>> = [];\n  if (canCreateDashboard) {\n    saveTargets.push({\n      label: 'New dashboard',\n      value: SaveTarget.NewDashboard,\n    });\n  }\n  if (canWriteDashboard) {\n    saveTargets.push({\n      label: 'Existing dashboard',\n      value: SaveTarget.ExistingDashboard,\n    });\n  }\n\n  const saveTarget = saveTargets.length > 1 ? watch('saveTarget') : saveTargets[0].value;\n\n  const modalTitle = `Add panel to ${saveTargets.length > 1 ? 'dashboard' : saveTargets[0].label!.toLowerCase()}`;\n\n  const onSubmit = async (openInNewTab: boolean, data: FormDTO) => {\n    setSubmissionError(undefined);\n    const dashboardUid = data.saveTarget === SaveTarget.ExistingDashboard ? data.dashboardUid : undefined;\n\n    reportInteraction('e2d_submit', {\n      newTab: openInNewTab,\n      saveTarget: data.saveTarget,\n      queries: exploreItem.queries.length,\n    });\n\n    try {\n      await setDashboardInLocalStorage({\n        dashboardUid,\n        datasource: exploreItem.datasourceInstance?.getRef(),\n        queries: exploreItem.queries,\n        queryResponse: exploreItem.queryResponse,\n      });\n    } catch (error) {\n      switch (error) {\n        case AddToDashboardError.FETCH_DASHBOARD:\n          setSubmissionError({ error, message: 'Could not fetch dashboard information. Please try again.' });\n          break;\n        case AddToDashboardError.SET_DASHBOARD_LS:\n          setSubmissionError({ error, message: 'Could not add panel to dashboard. Please try again.' });\n          break;\n        default:\n          setSubmissionError({ error: GenericError.UNKNOWN, message: 'Something went wrong. Please try again.' });\n      }\n      return;\n    }\n\n    const dashboardURL = getDashboardURL(dashboardUid);\n    if (!openInNewTab) {\n      onClose();\n      locationService.push(locationUtil.stripBaseFromUrl(dashboardURL));\n      return;\n    }\n\n    const didTabOpen = !!global.open(config.appUrl + dashboardURL, '_blank');\n    if (!didTabOpen) {\n      setSubmissionError({\n        error: GenericError.NAVIGATION,\n        message: 'Could not navigate to the selected dashboard. Please try again.',\n      });\n      removeDashboardToFetchFromLocalStorage();\n      return;\n    }\n    onClose();\n  };\n\n  useEffect(() => {\n    reportInteraction('e2d_open');\n  }, []);\n\n  return (\n    <Modal title={modalTitle} onDismiss={onClose} isOpen>\n      <form>\n        {saveTargets.length > 1 && (\n          <InputControl\n            control={control}\n            render={({ field: { ref, ...field } }) => (\n              <Field label=\"Target dashboard\" description=\"Choose where to add the panel.\">\n                <RadioButtonGroup options={saveTargets} {...field} id=\"e2d-save-target\" />\n              </Field>\n            )}\n            name=\"saveTarget\"\n          />\n        )}\n\n        {saveTarget === SaveTarget.ExistingDashboard &&\n          (() => {\n            assertIsSaveToExistingDashboardError(errors);\n            return (\n              <InputControl\n                render={({ field: { ref, value, onChange, ...field } }) => (\n                  <Field\n                    label=\"Dashboard\"\n                    description=\"Select in which dashboard the panel will be created.\"\n                    error={errors.dashboardUid?.message}\n                    invalid={!!errors.dashboardUid}\n                  >\n                    <DashboardPicker\n                      {...field}\n                      inputId=\"e2d-dashboard-picker\"\n                      defaultOptions\n                      onChange={(d) => onChange(d?.uid)}\n                    />\n                  </Field>\n                )}\n                control={control}\n                name=\"dashboardUid\"\n                shouldUnregister\n                rules={{ required: { value: true, message: 'This field is required.' } }}\n              />\n            );\n          })()}\n\n        {submissionError && (\n          <Alert severity=\"error\" title=\"Error adding the panel\">\n            {submissionError.message}\n          </Alert>\n        )}\n\n        <Modal.ButtonRow>\n          <Button type=\"reset\" onClick={onClose} fill=\"outline\" variant=\"secondary\">\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"secondary\"\n            onClick={handleSubmit(partial(onSubmit, true))}\n            icon=\"external-link-alt\"\n          >\n            Open in new tab\n          </Button>\n          <Button type=\"submit\" variant=\"primary\" onClick={handleSubmit(partial(onSubmit, false))} icon=\"apps\">\n            Open dashboard\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}