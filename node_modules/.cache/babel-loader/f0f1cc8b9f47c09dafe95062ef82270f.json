{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport { identity } from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { usePrevious } from 'react-use';\nimport { applyFieldOverrides, compareArrayValues, compareDataFrameStructures, createFieldConfigRegistry, dateTime, FieldColorModeId, getFrameDisplayName } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { GraphDrawStyle, LegendDisplayMode, TooltipDisplayMode, SortOrder } from '@grafana/schema';\nimport { Icon, PanelContextProvider, useStyles2, useTheme2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { defaultGraphConfig, getGraphFieldConfig } from 'app/plugins/panel/timeseries/config';\nimport { seriesVisibilityConfigFactory } from '../dashboard/dashgrid/SeriesVisibilityConfigFactory';\nimport { applyGraphStyle } from './exploreGraphStyleUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\nexport function ExploreGraph({\n  data,\n  height,\n  width,\n  timeZone,\n  absoluteRange,\n  onChangeTime,\n  loadingState,\n  annotations,\n  onHiddenSeriesChanged,\n  splitOpenFn,\n  graphStyle,\n  tooltipDisplayMode = TooltipDisplayMode.Single\n}) {\n  const theme = useTheme2();\n  const [showAllTimeSeries, setShowAllTimeSeries] = useState(false);\n  const [baseStructureRev, setBaseStructureRev] = useState(1);\n  const previousData = usePrevious(data);\n  const structureChangesRef = useRef(0);\n  const structureRev = baseStructureRev + structureChangesRef.current;\n  const prevStructureRev = usePrevious(structureRev);\n  const [fieldConfig, setFieldConfig] = useState({\n    defaults: {\n      color: {\n        mode: FieldColorModeId.PaletteClassic\n      },\n      custom: {\n        drawStyle: GraphDrawStyle.Line,\n        fillOpacity: 0,\n        pointSize: 5\n      }\n    },\n    overrides: []\n  });\n\n  if (data && previousData && !compareArrayValues(previousData, data, compareDataFrameStructures)) {\n    structureChangesRef.current++;\n\n    if (prevStructureRev === structureRev) {\n      setFieldConfig(Object.assign({}, fieldConfig, {\n        overrides: []\n      }));\n    }\n  }\n\n  const style = useStyles2(getStyles);\n  const timeRange = {\n    from: dateTime(absoluteRange.from),\n    to: dateTime(absoluteRange.to),\n    raw: {\n      from: dateTime(absoluteRange.from),\n      to: dateTime(absoluteRange.to)\n    }\n  };\n  const dataWithConfig = useMemo(() => {\n    const registry = createFieldConfigRegistry(getGraphFieldConfig(defaultGraphConfig), 'Explore');\n    const styledFieldConfig = applyGraphStyle(fieldConfig, graphStyle);\n    return applyFieldOverrides({\n      fieldConfig: styledFieldConfig,\n      data,\n      timeZone,\n      replaceVariables: value => value,\n      // We don't need proper replace here as it is only used in getLinks and we use getFieldLinks\n      theme,\n      fieldConfigRegistry: registry\n    });\n  }, [fieldConfig, graphStyle, data, timeZone, theme]);\n  useEffect(() => {\n    if (onHiddenSeriesChanged) {\n      const hiddenFrames = [];\n      dataWithConfig.forEach(frame => {\n        const allFieldsHidden = frame.fields.map(field => {\n          var _field$config, _field$config$custom, _field$config$custom$;\n\n          return (_field$config = field.config) === null || _field$config === void 0 ? void 0 : (_field$config$custom = _field$config.custom) === null || _field$config$custom === void 0 ? void 0 : (_field$config$custom$ = _field$config$custom.hideFrom) === null || _field$config$custom$ === void 0 ? void 0 : _field$config$custom$.viz;\n        }).every(identity);\n\n        if (allFieldsHidden) {\n          hiddenFrames.push(getFrameDisplayName(frame));\n        }\n      });\n      onHiddenSeriesChanged(hiddenFrames);\n    }\n  }, [dataWithConfig, onHiddenSeriesChanged]);\n  const seriesToShow = showAllTimeSeries ? dataWithConfig : dataWithConfig.slice(0, MAX_NUMBER_OF_TIME_SERIES);\n  const panelContext = {\n    eventBus: appEvents,\n    onSplitOpen: splitOpenFn,\n\n    onToggleSeriesVisibility(label, mode) {\n      setBaseStructureRev(r => r + 1);\n      setFieldConfig(seriesVisibilityConfigFactory(label, mode, fieldConfig, data));\n    }\n\n  };\n  return /*#__PURE__*/_jsxs(PanelContextProvider, {\n    value: panelContext,\n    children: [dataWithConfig.length > MAX_NUMBER_OF_TIME_SERIES && !showAllTimeSeries && /*#__PURE__*/_jsxs(\"div\", {\n      className: cx([style.timeSeriesDisclaimer]),\n      children: [/*#__PURE__*/_jsx(Icon, {\n        className: style.disclaimerIcon,\n        name: \"exclamation-triangle\"\n      }), `Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `, /*#__PURE__*/_jsx(\"span\", {\n        className: cx([style.showAllTimeSeries]),\n        onClick: () => {\n          structureChangesRef.current++;\n          setShowAllTimeSeries(true);\n        },\n        children: `Show all ${dataWithConfig.length}`\n      })]\n    }), /*#__PURE__*/_jsx(PanelRenderer, {\n      data: {\n        series: seriesToShow,\n        timeRange,\n        structureRev,\n        state: loadingState,\n        annotations\n      },\n      pluginId: \"timeseries\",\n      title: \"\",\n      width: width,\n      height: height,\n      onChangeTimeRange: onChangeTime,\n      timeZone: timeZone,\n      options: {\n        tooltip: {\n          mode: tooltipDisplayMode,\n          sort: SortOrder.None\n        },\n        legend: {\n          displayMode: LegendDisplayMode.List,\n          placement: 'bottom',\n          calcs: []\n        }\n      }\n    })]\n  });\n}\n\nconst getStyles = theme => ({\n  timeSeriesDisclaimer: css`\n    label: time-series-disclaimer;\n    width: 300px;\n    margin: ${theme.spacing(1)} auto;\n    padding: 10px 0;\n    border-radius: ${theme.spacing(2)};\n    text-align: center;\n    background-color: ${theme.colors.background.primary};\n  `,\n  disclaimerIcon: css`\n    label: disclaimer-icon;\n    color: ${theme.colors.warning.main};\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  showAllTimeSeries: css`\n    label: show-all-time-series;\n    cursor: pointer;\n    color: ${theme.colors.text.link};\n  `\n});","map":{"version":3,"names":["css","cx","identity","React","useEffect","useMemo","useRef","useState","usePrevious","applyFieldOverrides","compareArrayValues","compareDataFrameStructures","createFieldConfigRegistry","dateTime","FieldColorModeId","getFrameDisplayName","PanelRenderer","GraphDrawStyle","LegendDisplayMode","TooltipDisplayMode","SortOrder","Icon","PanelContextProvider","useStyles2","useTheme2","appEvents","defaultGraphConfig","getGraphFieldConfig","seriesVisibilityConfigFactory","applyGraphStyle","MAX_NUMBER_OF_TIME_SERIES","ExploreGraph","data","height","width","timeZone","absoluteRange","onChangeTime","loadingState","annotations","onHiddenSeriesChanged","splitOpenFn","graphStyle","tooltipDisplayMode","Single","theme","showAllTimeSeries","setShowAllTimeSeries","baseStructureRev","setBaseStructureRev","previousData","structureChangesRef","structureRev","current","prevStructureRev","fieldConfig","setFieldConfig","defaults","color","mode","PaletteClassic","custom","drawStyle","Line","fillOpacity","pointSize","overrides","style","getStyles","timeRange","from","to","raw","dataWithConfig","registry","styledFieldConfig","replaceVariables","value","fieldConfigRegistry","hiddenFrames","forEach","frame","allFieldsHidden","fields","map","field","config","hideFrom","viz","every","push","seriesToShow","slice","panelContext","eventBus","onSplitOpen","onToggleSeriesVisibility","label","r","length","timeSeriesDisclaimer","disclaimerIcon","series","state","tooltip","sort","None","legend","displayMode","List","placement","calcs","spacing","colors","background","primary","warning","main","text","link"],"sources":["/home/soula/grafana/public/app/features/explore/ExploreGraph.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { identity } from 'lodash';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport {\n  AbsoluteTimeRange,\n  applyFieldOverrides,\n  compareArrayValues,\n  compareDataFrameStructures,\n  createFieldConfigRegistry,\n  DataFrame,\n  dateTime,\n  FieldColorModeId,\n  FieldConfigSource,\n  getFrameDisplayName,\n  GrafanaTheme2,\n  LoadingState,\n  SplitOpen,\n  TimeZone,\n} from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { GraphDrawStyle, LegendDisplayMode, TooltipDisplayMode, SortOrder } from '@grafana/schema';\nimport {\n  Icon,\n  PanelContext,\n  PanelContextProvider,\n  SeriesVisibilityChangeMode,\n  useStyles2,\n  useTheme2,\n} from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { defaultGraphConfig, getGraphFieldConfig } from 'app/plugins/panel/timeseries/config';\nimport { TimeSeriesOptions } from 'app/plugins/panel/timeseries/types';\n\nimport { ExploreGraphStyle } from '../../types';\nimport { seriesVisibilityConfigFactory } from '../dashboard/dashgrid/SeriesVisibilityConfigFactory';\n\nimport { applyGraphStyle } from './exploreGraphStyleUtils';\n\nconst MAX_NUMBER_OF_TIME_SERIES = 20;\n\ninterface Props {\n  data: DataFrame[];\n  height: number;\n  width: number;\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  loadingState: LoadingState;\n  annotations?: DataFrame[];\n  onHiddenSeriesChanged?: (hiddenSeries: string[]) => void;\n  tooltipDisplayMode?: TooltipDisplayMode;\n  splitOpenFn?: SplitOpen;\n  onChangeTime: (timeRange: AbsoluteTimeRange) => void;\n  graphStyle: ExploreGraphStyle;\n}\n\nexport function ExploreGraph({\n  data,\n  height,\n  width,\n  timeZone,\n  absoluteRange,\n  onChangeTime,\n  loadingState,\n  annotations,\n  onHiddenSeriesChanged,\n  splitOpenFn,\n  graphStyle,\n  tooltipDisplayMode = TooltipDisplayMode.Single,\n}: Props) {\n  const theme = useTheme2();\n  const [showAllTimeSeries, setShowAllTimeSeries] = useState(false);\n  const [baseStructureRev, setBaseStructureRev] = useState(1);\n\n  const previousData = usePrevious(data);\n  const structureChangesRef = useRef(0);\n  const structureRev = baseStructureRev + structureChangesRef.current;\n  const prevStructureRev = usePrevious(structureRev);\n\n  const [fieldConfig, setFieldConfig] = useState<FieldConfigSource>({\n    defaults: {\n      color: {\n        mode: FieldColorModeId.PaletteClassic,\n      },\n      custom: {\n        drawStyle: GraphDrawStyle.Line,\n        fillOpacity: 0,\n        pointSize: 5,\n      },\n    },\n    overrides: [],\n  });\n\n  if (data && previousData && !compareArrayValues(previousData, data, compareDataFrameStructures)) {\n    structureChangesRef.current++;\n\n    if (prevStructureRev === structureRev) {\n      setFieldConfig({ ...fieldConfig, overrides: [] });\n    }\n  }\n\n  const style = useStyles2(getStyles);\n  const timeRange = {\n    from: dateTime(absoluteRange.from),\n    to: dateTime(absoluteRange.to),\n    raw: {\n      from: dateTime(absoluteRange.from),\n      to: dateTime(absoluteRange.to),\n    },\n  };\n\n  const dataWithConfig = useMemo(() => {\n    const registry = createFieldConfigRegistry(getGraphFieldConfig(defaultGraphConfig), 'Explore');\n    const styledFieldConfig = applyGraphStyle(fieldConfig, graphStyle);\n    return applyFieldOverrides({\n      fieldConfig: styledFieldConfig,\n      data,\n      timeZone,\n      replaceVariables: (value) => value, // We don't need proper replace here as it is only used in getLinks and we use getFieldLinks\n      theme,\n      fieldConfigRegistry: registry,\n    });\n  }, [fieldConfig, graphStyle, data, timeZone, theme]);\n\n  useEffect(() => {\n    if (onHiddenSeriesChanged) {\n      const hiddenFrames: string[] = [];\n      dataWithConfig.forEach((frame) => {\n        const allFieldsHidden = frame.fields.map((field) => field.config?.custom?.hideFrom?.viz).every(identity);\n        if (allFieldsHidden) {\n          hiddenFrames.push(getFrameDisplayName(frame));\n        }\n      });\n      onHiddenSeriesChanged(hiddenFrames);\n    }\n  }, [dataWithConfig, onHiddenSeriesChanged]);\n\n  const seriesToShow = showAllTimeSeries ? dataWithConfig : dataWithConfig.slice(0, MAX_NUMBER_OF_TIME_SERIES);\n\n  const panelContext: PanelContext = {\n    eventBus: appEvents,\n    onSplitOpen: splitOpenFn,\n    onToggleSeriesVisibility(label: string, mode: SeriesVisibilityChangeMode) {\n      setBaseStructureRev((r) => r + 1);\n      setFieldConfig(seriesVisibilityConfigFactory(label, mode, fieldConfig, data));\n    },\n  };\n\n  return (\n    <PanelContextProvider value={panelContext}>\n      {dataWithConfig.length > MAX_NUMBER_OF_TIME_SERIES && !showAllTimeSeries && (\n        <div className={cx([style.timeSeriesDisclaimer])}>\n          <Icon className={style.disclaimerIcon} name=\"exclamation-triangle\" />\n          {`Showing only ${MAX_NUMBER_OF_TIME_SERIES} time series. `}\n          <span\n            className={cx([style.showAllTimeSeries])}\n            onClick={() => {\n              structureChangesRef.current++;\n              setShowAllTimeSeries(true);\n            }}\n          >{`Show all ${dataWithConfig.length}`}</span>\n        </div>\n      )}\n      <PanelRenderer\n        data={{ series: seriesToShow, timeRange, structureRev, state: loadingState, annotations }}\n        pluginId=\"timeseries\"\n        title=\"\"\n        width={width}\n        height={height}\n        onChangeTimeRange={onChangeTime}\n        timeZone={timeZone}\n        options={\n          {\n            tooltip: { mode: tooltipDisplayMode, sort: SortOrder.None },\n            legend: { displayMode: LegendDisplayMode.List, placement: 'bottom', calcs: [] },\n          } as TimeSeriesOptions\n        }\n      />\n    </PanelContextProvider>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  timeSeriesDisclaimer: css`\n    label: time-series-disclaimer;\n    width: 300px;\n    margin: ${theme.spacing(1)} auto;\n    padding: 10px 0;\n    border-radius: ${theme.spacing(2)};\n    text-align: center;\n    background-color: ${theme.colors.background.primary};\n  `,\n  disclaimerIcon: css`\n    label: disclaimer-icon;\n    color: ${theme.colors.warning.main};\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  showAllTimeSeries: css`\n    label: show-all-time-series;\n    cursor: pointer;\n    color: ${theme.colors.text.link};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}