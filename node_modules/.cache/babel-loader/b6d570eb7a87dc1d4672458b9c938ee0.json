{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE } from '../constants';\nimport { getInstanceState } from '../state/selectors';\nimport { initialVariablesState } from '../state/types';\nimport { initialVariableModelState, VariableRefresh } from '../types';\nexport const initialDataSourceVariableModelState = Object.assign({}, initialVariableModelState, {\n  type: 'datasource',\n  current: {},\n  regex: '',\n  options: [],\n  query: '',\n  multi: false,\n  includeAll: false,\n  refresh: VariableRefresh.onDashboardLoad\n});\nexport const dataSourceVariableSlice = createSlice({\n  name: 'templating/datasource',\n  initialState: initialVariablesState,\n  reducers: {\n    createDataSourceOptions: (state, action) => {\n      const {\n        sources,\n        regex\n      } = action.payload.data;\n      const options = [];\n      const instanceState = getInstanceState(state, action.payload.id);\n\n      for (let i = 0; i < sources.length; i++) {\n        const source = sources[i]; // must match on type\n\n        if (source.meta.id !== instanceState.query) {\n          continue;\n        }\n\n        if (isValid(source, regex)) {\n          options.push({\n            text: source.name,\n            value: source.name,\n            selected: false\n          });\n        }\n\n        if (isDefault(source, regex)) {\n          options.push({\n            text: 'default',\n            value: 'default',\n            selected: false\n          });\n        }\n      }\n\n      if (options.length === 0) {\n        options.push({\n          text: 'No data sources found',\n          value: '',\n          selected: false\n        });\n      }\n\n      if (instanceState.includeAll) {\n        options.unshift({\n          text: ALL_VARIABLE_TEXT,\n          value: ALL_VARIABLE_VALUE,\n          selected: false\n        });\n      }\n\n      instanceState.options = options;\n    }\n  }\n});\n\nfunction isValid(source, regex) {\n  if (!regex) {\n    return true;\n  }\n\n  return regex.exec(source.name);\n}\n\nfunction isDefault(source, regex) {\n  if (!source.isDefault) {\n    return false;\n  }\n\n  if (!regex) {\n    return true;\n  }\n\n  return regex.exec('default');\n}\n\nexport const dataSourceVariableReducer = dataSourceVariableSlice.reducer;\nexport const {\n  createDataSourceOptions\n} = dataSourceVariableSlice.actions;","map":{"version":3,"names":["createSlice","ALL_VARIABLE_TEXT","ALL_VARIABLE_VALUE","getInstanceState","initialVariablesState","initialVariableModelState","VariableRefresh","initialDataSourceVariableModelState","type","current","regex","options","query","multi","includeAll","refresh","onDashboardLoad","dataSourceVariableSlice","name","initialState","reducers","createDataSourceOptions","state","action","sources","payload","data","instanceState","id","i","length","source","meta","isValid","push","text","value","selected","isDefault","unshift","exec","dataSourceVariableReducer","reducer","actions"],"sources":["/home/soula/grafana/public/app/features/variables/datasource/reducer.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\n\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE } from '../constants';\nimport { getInstanceState } from '../state/selectors';\nimport { initialVariablesState, VariablePayload, VariablesState } from '../state/types';\nimport { DataSourceVariableModel, initialVariableModelState, VariableOption, VariableRefresh } from '../types';\n\nexport const initialDataSourceVariableModelState: DataSourceVariableModel = {\n  ...initialVariableModelState,\n  type: 'datasource',\n  current: {} as VariableOption,\n  regex: '',\n  options: [],\n  query: '',\n  multi: false,\n  includeAll: false,\n  refresh: VariableRefresh.onDashboardLoad,\n};\n\nexport const dataSourceVariableSlice = createSlice({\n  name: 'templating/datasource',\n  initialState: initialVariablesState,\n  reducers: {\n    createDataSourceOptions: (\n      state: VariablesState,\n      action: PayloadAction<VariablePayload<{ sources: DataSourceInstanceSettings[]; regex: RegExp | undefined }>>\n    ) => {\n      const { sources, regex } = action.payload.data;\n      const options: VariableOption[] = [];\n      const instanceState = getInstanceState<DataSourceVariableModel>(state, action.payload.id);\n      for (let i = 0; i < sources.length; i++) {\n        const source = sources[i];\n        // must match on type\n        if (source.meta.id !== instanceState.query) {\n          continue;\n        }\n\n        if (isValid(source, regex)) {\n          options.push({ text: source.name, value: source.name, selected: false });\n        }\n\n        if (isDefault(source, regex)) {\n          options.push({ text: 'default', value: 'default', selected: false });\n        }\n      }\n\n      if (options.length === 0) {\n        options.push({ text: 'No data sources found', value: '', selected: false });\n      }\n\n      if (instanceState.includeAll) {\n        options.unshift({ text: ALL_VARIABLE_TEXT, value: ALL_VARIABLE_VALUE, selected: false });\n      }\n\n      instanceState.options = options;\n    },\n  },\n});\n\nfunction isValid(source: DataSourceInstanceSettings, regex?: RegExp) {\n  if (!regex) {\n    return true;\n  }\n\n  return regex.exec(source.name);\n}\n\nfunction isDefault(source: DataSourceInstanceSettings, regex?: RegExp) {\n  if (!source.isDefault) {\n    return false;\n  }\n\n  if (!regex) {\n    return true;\n  }\n\n  return regex.exec('default');\n}\n\nexport const dataSourceVariableReducer = dataSourceVariableSlice.reducer;\nexport const { createDataSourceOptions } = dataSourceVariableSlice.actions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}