{"ast":null,"code":"import { Fill, RegularShape, Stroke, Circle, Style, Icon, Text } from 'ol/style';\nimport tinycolor from 'tinycolor2';\nimport { Registry } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { getPublicOrAbsoluteUrl } from 'app/features/dimensions';\nimport { defaultStyleConfig, DEFAULT_SIZE } from './types';\nvar RegularShapeId;\n\n(function (RegularShapeId) {\n  RegularShapeId[\"circle\"] = \"circle\";\n  RegularShapeId[\"square\"] = \"square\";\n  RegularShapeId[\"triangle\"] = \"triangle\";\n  RegularShapeId[\"star\"] = \"star\";\n  RegularShapeId[\"cross\"] = \"cross\";\n  RegularShapeId[\"x\"] = \"x\";\n})(RegularShapeId || (RegularShapeId = {}));\n\nconst MarkerShapePath = {\n  circle: 'img/icons/marker/circle.svg',\n  square: 'img/icons/marker/square.svg',\n  triangle: 'img/icons/marker/triangle.svg',\n  star: 'img/icons/marker/star.svg',\n  cross: 'img/icons/marker/cross.svg',\n  x: 'img/icons/marker/x-mark.svg'\n};\nexport function getFillColor(cfg) {\n  const opacity = cfg.opacity == null ? 0.8 : cfg.opacity;\n\n  if (opacity === 1) {\n    return new Fill({\n      color: cfg.color\n    });\n  }\n\n  if (opacity > 0) {\n    const color = tinycolor(cfg.color).setAlpha(opacity).toRgbString();\n    return new Fill({\n      color\n    });\n  }\n\n  return undefined;\n}\n\nconst textLabel = cfg => {\n  var _cfg$color;\n\n  if (!cfg.text) {\n    return undefined;\n  }\n\n  const fontFamily = config.theme2.typography.fontFamily;\n  const textConfig = Object.assign({}, defaultStyleConfig.textConfig, cfg.textConfig);\n  return new Text(Object.assign({\n    text: cfg.text,\n    fill: new Fill({\n      color: (_cfg$color = cfg.color) !== null && _cfg$color !== void 0 ? _cfg$color : defaultStyleConfig.color.fixed\n    }),\n    font: `normal ${textConfig.fontSize}px ${fontFamily}`\n  }, textConfig));\n};\n\nexport const textMarker = cfg => {\n  return new Style({\n    text: textLabel(cfg)\n  });\n};\nexport const circleMarker = cfg => {\n  var _cfg$lineWidth, _cfg$size;\n\n  const stroke = new Stroke({\n    color: cfg.color,\n    width: (_cfg$lineWidth = cfg.lineWidth) !== null && _cfg$lineWidth !== void 0 ? _cfg$lineWidth : 1\n  });\n  return new Style({\n    image: new Circle({\n      stroke,\n      fill: getFillColor(cfg),\n      radius: (_cfg$size = cfg.size) !== null && _cfg$size !== void 0 ? _cfg$size : DEFAULT_SIZE\n    }),\n    text: textLabel(cfg),\n    stroke // in case lines are sent to the markers layer\n\n  });\n}; // Does not have image\n\nexport const polyStyle = cfg => {\n  var _cfg$lineWidth2;\n\n  return new Style({\n    fill: getFillColor(cfg),\n    stroke: new Stroke({\n      color: cfg.color,\n      width: (_cfg$lineWidth2 = cfg.lineWidth) !== null && _cfg$lineWidth2 !== void 0 ? _cfg$lineWidth2 : 1\n    }),\n    text: textLabel(cfg)\n  });\n}; // Square and cross\n\nconst errorMarker = cfg => {\n  var _cfg$size2;\n\n  const radius = (_cfg$size2 = cfg.size) !== null && _cfg$size2 !== void 0 ? _cfg$size2 : DEFAULT_SIZE;\n  const stroke = new Stroke({\n    color: '#F00',\n    width: 1\n  });\n  return [new Style({\n    image: new RegularShape({\n      stroke,\n      points: 4,\n      radius,\n      angle: Math.PI / 4\n    })\n  }), new Style({\n    image: new RegularShape({\n      stroke,\n      points: 4,\n      radius,\n      radius2: 0,\n      angle: 0\n    })\n  })];\n};\n\nconst makers = [{\n  id: RegularShapeId.circle,\n  name: 'Circle',\n  aliasIds: [MarkerShapePath.circle],\n  make: circleMarker\n}, {\n  id: RegularShapeId.square,\n  name: 'Square',\n  aliasIds: [MarkerShapePath.square],\n  make: cfg => {\n    var _cfg$size3, _cfg$rotation, _cfg$lineWidth3;\n\n    const radius = (_cfg$size3 = cfg.size) !== null && _cfg$size3 !== void 0 ? _cfg$size3 : DEFAULT_SIZE;\n    const rotation = (_cfg$rotation = cfg.rotation) !== null && _cfg$rotation !== void 0 ? _cfg$rotation : 0;\n    return new Style({\n      image: new RegularShape({\n        stroke: new Stroke({\n          color: cfg.color,\n          width: (_cfg$lineWidth3 = cfg.lineWidth) !== null && _cfg$lineWidth3 !== void 0 ? _cfg$lineWidth3 : 1\n        }),\n        fill: getFillColor(cfg),\n        points: 4,\n        radius,\n        rotation: rotation * Math.PI / 180 + Math.PI / 4\n      }),\n      text: textLabel(cfg)\n    });\n  }\n}, {\n  id: RegularShapeId.triangle,\n  name: 'Triangle',\n  aliasIds: [MarkerShapePath.triangle],\n  make: cfg => {\n    var _cfg$size4, _cfg$rotation2, _cfg$lineWidth4;\n\n    const radius = (_cfg$size4 = cfg.size) !== null && _cfg$size4 !== void 0 ? _cfg$size4 : DEFAULT_SIZE;\n    const rotation = (_cfg$rotation2 = cfg.rotation) !== null && _cfg$rotation2 !== void 0 ? _cfg$rotation2 : 0;\n    return new Style({\n      image: new RegularShape({\n        stroke: new Stroke({\n          color: cfg.color,\n          width: (_cfg$lineWidth4 = cfg.lineWidth) !== null && _cfg$lineWidth4 !== void 0 ? _cfg$lineWidth4 : 1\n        }),\n        fill: getFillColor(cfg),\n        points: 3,\n        radius,\n        rotation: rotation * Math.PI / 180,\n        angle: 0\n      }),\n      text: textLabel(cfg)\n    });\n  }\n}, {\n  id: RegularShapeId.star,\n  name: 'Star',\n  aliasIds: [MarkerShapePath.star],\n  make: cfg => {\n    var _cfg$size5, _cfg$rotation3, _cfg$lineWidth5;\n\n    const radius = (_cfg$size5 = cfg.size) !== null && _cfg$size5 !== void 0 ? _cfg$size5 : DEFAULT_SIZE;\n    const rotation = (_cfg$rotation3 = cfg.rotation) !== null && _cfg$rotation3 !== void 0 ? _cfg$rotation3 : 0;\n    return new Style({\n      image: new RegularShape({\n        stroke: new Stroke({\n          color: cfg.color,\n          width: (_cfg$lineWidth5 = cfg.lineWidth) !== null && _cfg$lineWidth5 !== void 0 ? _cfg$lineWidth5 : 1\n        }),\n        fill: getFillColor(cfg),\n        points: 5,\n        radius,\n        radius2: radius * 0.4,\n        angle: 0,\n        rotation: rotation * Math.PI / 180\n      }),\n      text: textLabel(cfg)\n    });\n  }\n}, {\n  id: RegularShapeId.cross,\n  name: 'Cross',\n  aliasIds: [MarkerShapePath.cross],\n  make: cfg => {\n    var _cfg$size6, _cfg$rotation4, _cfg$lineWidth6;\n\n    const radius = (_cfg$size6 = cfg.size) !== null && _cfg$size6 !== void 0 ? _cfg$size6 : DEFAULT_SIZE;\n    const rotation = (_cfg$rotation4 = cfg.rotation) !== null && _cfg$rotation4 !== void 0 ? _cfg$rotation4 : 0;\n    return new Style({\n      image: new RegularShape({\n        stroke: new Stroke({\n          color: cfg.color,\n          width: (_cfg$lineWidth6 = cfg.lineWidth) !== null && _cfg$lineWidth6 !== void 0 ? _cfg$lineWidth6 : 1\n        }),\n        points: 4,\n        radius,\n        radius2: 0,\n        angle: 0,\n        rotation: rotation * Math.PI / 180\n      }),\n      text: textLabel(cfg)\n    });\n  }\n}, {\n  id: RegularShapeId.x,\n  name: 'X',\n  aliasIds: [MarkerShapePath.x],\n  make: cfg => {\n    var _cfg$size7, _cfg$rotation5, _cfg$lineWidth7;\n\n    const radius = (_cfg$size7 = cfg.size) !== null && _cfg$size7 !== void 0 ? _cfg$size7 : DEFAULT_SIZE;\n    const rotation = (_cfg$rotation5 = cfg.rotation) !== null && _cfg$rotation5 !== void 0 ? _cfg$rotation5 : 0;\n    return new Style({\n      image: new RegularShape({\n        stroke: new Stroke({\n          color: cfg.color,\n          width: (_cfg$lineWidth7 = cfg.lineWidth) !== null && _cfg$lineWidth7 !== void 0 ? _cfg$lineWidth7 : 1\n        }),\n        points: 4,\n        radius,\n        radius2: 0,\n        rotation: rotation * Math.PI / 180 + Math.PI / 4\n      }),\n      text: textLabel(cfg)\n    });\n  }\n}];\n\nasync function prepareSVG(url, size) {\n  return fetch(url, {\n    method: 'GET'\n  }).then(res => {\n    return res.text();\n  }).then(text => {\n    var _svg$getAttribute, _svg$getAttribute2;\n\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(text, 'image/svg+xml');\n    const svg = doc.getElementsByTagName('svg')[0];\n\n    if (!svg) {\n      return '';\n    }\n\n    const svgSize = size !== null && size !== void 0 ? size : 100;\n    const width = (_svg$getAttribute = svg.getAttribute('width')) !== null && _svg$getAttribute !== void 0 ? _svg$getAttribute : svgSize;\n    const height = (_svg$getAttribute2 = svg.getAttribute('height')) !== null && _svg$getAttribute2 !== void 0 ? _svg$getAttribute2 : svgSize; // open layers requires a white fill becaues it uses tint to set color\n\n    svg.setAttribute('fill', '#fff');\n    svg.setAttribute('width', `${width}px`);\n    svg.setAttribute('height', `${height}px`);\n    const svgString = new XMLSerializer().serializeToString(svg);\n    const svgURI = encodeURIComponent(svgString);\n    return `data:image/svg+xml,${svgURI}`;\n  }).catch(error => {\n    console.error(error);\n    return '';\n  });\n} // Really just a cache for the various symbol styles\n\n\nconst markerMakers = new Registry(() => makers);\nexport function getMarkerAsPath(shape) {\n  var _marker$aliasIds;\n\n  const marker = markerMakers.getIfExists(shape);\n\n  if (marker !== null && marker !== void 0 && (_marker$aliasIds = marker.aliasIds) !== null && _marker$aliasIds !== void 0 && _marker$aliasIds.length) {\n    return marker.aliasIds[0];\n  }\n\n  return undefined;\n} // Will prepare symbols as necessary\n\nexport async function getMarkerMaker(symbol, hasTextLabel) {\n  if (!symbol) {\n    return hasTextLabel ? textMarker : circleMarker;\n  }\n\n  let maker = markerMakers.getIfExists(symbol);\n\n  if (maker) {\n    return maker.make;\n  } // Prepare svg as icon\n\n\n  if (symbol.endsWith('.svg')) {\n    const src = await prepareSVG(getPublicOrAbsoluteUrl(symbol));\n    maker = {\n      id: symbol,\n      name: symbol,\n      aliasIds: [],\n      make: src ? cfg => {\n        var _cfg$size8, _cfg$rotation6, _cfg$opacity;\n\n        const radius = (_cfg$size8 = cfg.size) !== null && _cfg$size8 !== void 0 ? _cfg$size8 : DEFAULT_SIZE;\n        const rotation = (_cfg$rotation6 = cfg.rotation) !== null && _cfg$rotation6 !== void 0 ? _cfg$rotation6 : 0;\n        return [new Style({\n          image: new Icon({\n            src,\n            color: cfg.color,\n            opacity: (_cfg$opacity = cfg.opacity) !== null && _cfg$opacity !== void 0 ? _cfg$opacity : 1,\n            scale: (DEFAULT_SIZE + radius) / 100,\n            rotation: rotation * Math.PI / 180\n          }),\n          text: !(cfg !== null && cfg !== void 0 && cfg.text) ? undefined : textLabel(cfg)\n        }), // transparent bounding box for featureAtPixel detection\n        new Style({\n          image: new RegularShape({\n            fill: new Fill({\n              color: 'rgba(0,0,0,0)'\n            }),\n            points: 4,\n            radius: cfg.size,\n            rotation: rotation * Math.PI / 180 + Math.PI / 4\n          })\n        })];\n      } : errorMarker\n    };\n    markerMakers.register(maker);\n    return maker.make;\n  } // default to showing a circle\n\n\n  return errorMarker;\n}","map":{"version":3,"names":["Fill","RegularShape","Stroke","Circle","Style","Icon","Text","tinycolor","Registry","config","getPublicOrAbsoluteUrl","defaultStyleConfig","DEFAULT_SIZE","RegularShapeId","MarkerShapePath","circle","square","triangle","star","cross","x","getFillColor","cfg","opacity","color","setAlpha","toRgbString","undefined","textLabel","text","fontFamily","theme2","typography","textConfig","fill","fixed","font","fontSize","textMarker","circleMarker","stroke","width","lineWidth","image","radius","size","polyStyle","errorMarker","points","angle","Math","PI","radius2","makers","id","name","aliasIds","make","rotation","prepareSVG","url","fetch","method","then","res","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgSize","getAttribute","height","setAttribute","svgString","XMLSerializer","serializeToString","svgURI","encodeURIComponent","catch","error","console","markerMakers","getMarkerAsPath","shape","marker","getIfExists","length","getMarkerMaker","symbol","hasTextLabel","maker","endsWith","src","scale","register"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/style/markers.ts"],"sourcesContent":["import { Fill, RegularShape, Stroke, Circle, Style, Icon, Text } from 'ol/style';\nimport tinycolor from 'tinycolor2';\n\nimport { Registry, RegistryItem } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { getPublicOrAbsoluteUrl } from 'app/features/dimensions';\n\nimport { defaultStyleConfig, DEFAULT_SIZE, StyleConfigValues, StyleMaker } from './types';\n\ninterface SymbolMaker extends RegistryItem {\n  aliasIds: string[];\n  make: StyleMaker;\n}\n\nenum RegularShapeId {\n  circle = 'circle',\n  square = 'square',\n  triangle = 'triangle',\n  star = 'star',\n  cross = 'cross',\n  x = 'x',\n}\n\nconst MarkerShapePath = {\n  circle: 'img/icons/marker/circle.svg',\n  square: 'img/icons/marker/square.svg',\n  triangle: 'img/icons/marker/triangle.svg',\n  star: 'img/icons/marker/star.svg',\n  cross: 'img/icons/marker/cross.svg',\n  x: 'img/icons/marker/x-mark.svg',\n};\n\nexport function getFillColor(cfg: StyleConfigValues) {\n  const opacity = cfg.opacity == null ? 0.8 : cfg.opacity;\n  if (opacity === 1) {\n    return new Fill({ color: cfg.color });\n  }\n  if (opacity > 0) {\n    const color = tinycolor(cfg.color).setAlpha(opacity).toRgbString();\n    return new Fill({ color });\n  }\n  return undefined;\n}\n\nconst textLabel = (cfg: StyleConfigValues) => {\n  if (!cfg.text) {\n    return undefined;\n  }\n\n  const fontFamily = config.theme2.typography.fontFamily;\n  const textConfig = {\n    ...defaultStyleConfig.textConfig,\n    ...cfg.textConfig,\n  };\n  return new Text({\n    text: cfg.text,\n    fill: new Fill({ color: cfg.color ?? defaultStyleConfig.color.fixed }),\n    font: `normal ${textConfig.fontSize}px ${fontFamily}`,\n    ...textConfig,\n  });\n};\n\nexport const textMarker = (cfg: StyleConfigValues) => {\n  return new Style({\n    text: textLabel(cfg),\n  });\n};\n\nexport const circleMarker = (cfg: StyleConfigValues) => {\n  const stroke = new Stroke({ color: cfg.color, width: cfg.lineWidth ?? 1 });\n  return new Style({\n    image: new Circle({\n      stroke,\n      fill: getFillColor(cfg),\n      radius: cfg.size ?? DEFAULT_SIZE,\n    }),\n    text: textLabel(cfg),\n    stroke, // in case lines are sent to the markers layer\n  });\n};\n\n// Does not have image\nexport const polyStyle = (cfg: StyleConfigValues) => {\n  return new Style({\n    fill: getFillColor(cfg),\n    stroke: new Stroke({ color: cfg.color, width: cfg.lineWidth ?? 1 }),\n    text: textLabel(cfg),\n  });\n};\n\n// Square and cross\nconst errorMarker = (cfg: StyleConfigValues) => {\n  const radius = cfg.size ?? DEFAULT_SIZE;\n  const stroke = new Stroke({ color: '#F00', width: 1 });\n  return [\n    new Style({\n      image: new RegularShape({\n        stroke,\n        points: 4,\n        radius,\n        angle: Math.PI / 4,\n      }),\n    }),\n    new Style({\n      image: new RegularShape({\n        stroke,\n        points: 4,\n        radius,\n        radius2: 0,\n        angle: 0,\n      }),\n    }),\n  ];\n};\n\nconst makers: SymbolMaker[] = [\n  {\n    id: RegularShapeId.circle,\n    name: 'Circle',\n    aliasIds: [MarkerShapePath.circle],\n    make: circleMarker,\n  },\n  {\n    id: RegularShapeId.square,\n    name: 'Square',\n    aliasIds: [MarkerShapePath.square],\n    make: (cfg: StyleConfigValues) => {\n      const radius = cfg.size ?? DEFAULT_SIZE;\n      const rotation = cfg.rotation ?? 0;\n      return new Style({\n        image: new RegularShape({\n          stroke: new Stroke({ color: cfg.color, width: cfg.lineWidth ?? 1 }),\n          fill: getFillColor(cfg),\n          points: 4,\n          radius,\n          rotation: (rotation * Math.PI) / 180 + Math.PI / 4,\n        }),\n        text: textLabel(cfg),\n      });\n    },\n  },\n  {\n    id: RegularShapeId.triangle,\n    name: 'Triangle',\n    aliasIds: [MarkerShapePath.triangle],\n    make: (cfg: StyleConfigValues) => {\n      const radius = cfg.size ?? DEFAULT_SIZE;\n      const rotation = cfg.rotation ?? 0;\n      return new Style({\n        image: new RegularShape({\n          stroke: new Stroke({ color: cfg.color, width: cfg.lineWidth ?? 1 }),\n          fill: getFillColor(cfg),\n          points: 3,\n          radius,\n          rotation: (rotation * Math.PI) / 180,\n          angle: 0,\n        }),\n        text: textLabel(cfg),\n      });\n    },\n  },\n  {\n    id: RegularShapeId.star,\n    name: 'Star',\n    aliasIds: [MarkerShapePath.star],\n    make: (cfg: StyleConfigValues) => {\n      const radius = cfg.size ?? DEFAULT_SIZE;\n      const rotation = cfg.rotation ?? 0;\n      return new Style({\n        image: new RegularShape({\n          stroke: new Stroke({ color: cfg.color, width: cfg.lineWidth ?? 1 }),\n          fill: getFillColor(cfg),\n          points: 5,\n          radius,\n          radius2: radius * 0.4,\n          angle: 0,\n          rotation: (rotation * Math.PI) / 180,\n        }),\n        text: textLabel(cfg),\n      });\n    },\n  },\n  {\n    id: RegularShapeId.cross,\n    name: 'Cross',\n    aliasIds: [MarkerShapePath.cross],\n    make: (cfg: StyleConfigValues) => {\n      const radius = cfg.size ?? DEFAULT_SIZE;\n      const rotation = cfg.rotation ?? 0;\n      return new Style({\n        image: new RegularShape({\n          stroke: new Stroke({ color: cfg.color, width: cfg.lineWidth ?? 1 }),\n          points: 4,\n          radius,\n          radius2: 0,\n          angle: 0,\n          rotation: (rotation * Math.PI) / 180,\n        }),\n        text: textLabel(cfg),\n      });\n    },\n  },\n  {\n    id: RegularShapeId.x,\n    name: 'X',\n    aliasIds: [MarkerShapePath.x],\n    make: (cfg: StyleConfigValues) => {\n      const radius = cfg.size ?? DEFAULT_SIZE;\n      const rotation = cfg.rotation ?? 0;\n      return new Style({\n        image: new RegularShape({\n          stroke: new Stroke({ color: cfg.color, width: cfg.lineWidth ?? 1 }),\n          points: 4,\n          radius,\n          radius2: 0,\n          rotation: (rotation * Math.PI) / 180 + Math.PI / 4,\n        }),\n        text: textLabel(cfg),\n      });\n    },\n  },\n];\n\nasync function prepareSVG(url: string, size?: number): Promise<string> {\n  return fetch(url, { method: 'GET' })\n    .then((res) => {\n      return res.text();\n    })\n    .then((text) => {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(text, 'image/svg+xml');\n      const svg = doc.getElementsByTagName('svg')[0];\n      if (!svg) {\n        return '';\n      }\n\n      const svgSize = size ?? 100;\n      const width = svg.getAttribute('width') ?? svgSize;\n      const height = svg.getAttribute('height') ?? svgSize;\n\n      // open layers requires a white fill becaues it uses tint to set color\n      svg.setAttribute('fill', '#fff');\n      svg.setAttribute('width', `${width}px`);\n      svg.setAttribute('height', `${height}px`);\n      const svgString = new XMLSerializer().serializeToString(svg);\n      const svgURI = encodeURIComponent(svgString);\n      return `data:image/svg+xml,${svgURI}`;\n    })\n    .catch((error) => {\n      console.error(error);\n      return '';\n    });\n}\n\n// Really just a cache for the various symbol styles\nconst markerMakers = new Registry<SymbolMaker>(() => makers);\n\nexport function getMarkerAsPath(shape?: string): string | undefined {\n  const marker = markerMakers.getIfExists(shape);\n  if (marker?.aliasIds?.length) {\n    return marker.aliasIds[0];\n  }\n  return undefined;\n}\n\n// Will prepare symbols as necessary\nexport async function getMarkerMaker(symbol?: string, hasTextLabel?: boolean): Promise<StyleMaker> {\n  if (!symbol) {\n    return hasTextLabel ? textMarker : circleMarker;\n  }\n\n  let maker = markerMakers.getIfExists(symbol);\n  if (maker) {\n    return maker.make;\n  }\n\n  // Prepare svg as icon\n  if (symbol.endsWith('.svg')) {\n    const src = await prepareSVG(getPublicOrAbsoluteUrl(symbol));\n    maker = {\n      id: symbol,\n      name: symbol,\n      aliasIds: [],\n      make: src\n        ? (cfg: StyleConfigValues) => {\n            const radius = cfg.size ?? DEFAULT_SIZE;\n            const rotation = cfg.rotation ?? 0;\n            return [\n              new Style({\n                image: new Icon({\n                  src,\n                  color: cfg.color,\n                  opacity: cfg.opacity ?? 1,\n                  scale: (DEFAULT_SIZE + radius) / 100,\n                  rotation: (rotation * Math.PI) / 180,\n                }),\n                text: !cfg?.text ? undefined : textLabel(cfg),\n              }),\n              // transparent bounding box for featureAtPixel detection\n              new Style({\n                image: new RegularShape({\n                  fill: new Fill({ color: 'rgba(0,0,0,0)' }),\n                  points: 4,\n                  radius: cfg.size,\n                  rotation: (rotation * Math.PI) / 180 + Math.PI / 4,\n                }),\n              }),\n            ];\n          }\n        : errorMarker,\n    };\n    markerMakers.register(maker);\n    return maker.make;\n  }\n\n  // default to showing a circle\n  return errorMarker;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}