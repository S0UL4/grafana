{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { isNumber, sortBy, toLower, uniqBy } from 'lodash';\nimport { stringToJsRegex } from '@grafana/data';\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE, NONE_VARIABLE_TEXT, NONE_VARIABLE_VALUE } from '../constants';\nimport { getInstanceState } from '../state/selectors';\nimport { initialVariablesState } from '../state/types';\nimport { initialVariableModelState, VariableRefresh, VariableSort } from '../types';\nexport const initialQueryVariableModelState = Object.assign({}, initialVariableModelState, {\n  type: 'query',\n  datasource: null,\n  query: '',\n  regex: '',\n  sort: VariableSort.disabled,\n  refresh: VariableRefresh.onDashboardLoad,\n  multi: false,\n  includeAll: false,\n  allValue: null,\n  options: [],\n  current: {},\n  definition: ''\n});\nexport const sortVariableValues = (options, sortOrder) => {\n  if (sortOrder === VariableSort.disabled) {\n    return options;\n  }\n\n  const sortType = Math.ceil(sortOrder / 2);\n  const reverseSort = sortOrder % 2 === 0;\n\n  if (sortType === 1) {\n    options = sortBy(options, 'text');\n  } else if (sortType === 2) {\n    options = sortBy(options, opt => {\n      if (!opt.text) {\n        return -1;\n      }\n\n      const matches = opt.text.match(/.*?(\\d+).*/);\n\n      if (!matches || matches.length < 2) {\n        return -1;\n      } else {\n        return parseInt(matches[1], 10);\n      }\n    });\n  } else if (sortType === 3) {\n    options = sortBy(options, opt => {\n      return toLower(opt.text);\n    });\n  }\n\n  if (reverseSort) {\n    options = options.reverse();\n  }\n\n  return options;\n};\n\nconst getAllMatches = (str, regex) => {\n  const results = [];\n  let matches = null;\n  regex.lastIndex = 0;\n\n  do {\n    matches = regex.exec(str);\n\n    if (matches) {\n      results.push(matches);\n    }\n  } while (regex.global && matches && matches[0] !== '' && matches[0] !== undefined);\n\n  return results;\n};\n\nexport const metricNamesToVariableValues = (variableRegEx, sort, metricNames) => {\n  let regex;\n  let options = [];\n\n  if (variableRegEx) {\n    regex = stringToJsRegex(variableRegEx);\n  }\n\n  for (let i = 0; i < metricNames.length; i++) {\n    const item = metricNames[i];\n    let text = item.text === undefined || item.text === null ? item.value : item.text;\n    let value = item.value === undefined || item.value === null ? item.text : item.value;\n\n    if (isNumber(value)) {\n      value = value.toString();\n    }\n\n    if (isNumber(text)) {\n      text = text.toString();\n    }\n\n    if (regex) {\n      const matches = getAllMatches(value, regex);\n\n      if (!matches.length) {\n        continue;\n      }\n\n      const valueGroup = matches.find(m => m.groups && m.groups.value);\n      const textGroup = matches.find(m => m.groups && m.groups.text);\n      const firstMatch = matches.find(m => m.length > 1);\n      const manyMatches = matches.length > 1 && firstMatch;\n\n      if (valueGroup || textGroup) {\n        var _valueGroup$groups$va, _valueGroup$groups, _textGroup$groups, _textGroup$groups$tex, _textGroup$groups2, _valueGroup$groups2;\n\n        value = (_valueGroup$groups$va = valueGroup === null || valueGroup === void 0 ? void 0 : (_valueGroup$groups = valueGroup.groups) === null || _valueGroup$groups === void 0 ? void 0 : _valueGroup$groups.value) !== null && _valueGroup$groups$va !== void 0 ? _valueGroup$groups$va : textGroup === null || textGroup === void 0 ? void 0 : (_textGroup$groups = textGroup.groups) === null || _textGroup$groups === void 0 ? void 0 : _textGroup$groups.text;\n        text = (_textGroup$groups$tex = textGroup === null || textGroup === void 0 ? void 0 : (_textGroup$groups2 = textGroup.groups) === null || _textGroup$groups2 === void 0 ? void 0 : _textGroup$groups2.text) !== null && _textGroup$groups$tex !== void 0 ? _textGroup$groups$tex : valueGroup === null || valueGroup === void 0 ? void 0 : (_valueGroup$groups2 = valueGroup.groups) === null || _valueGroup$groups2 === void 0 ? void 0 : _valueGroup$groups2.value;\n      } else if (manyMatches) {\n        for (let j = 0; j < matches.length; j++) {\n          const match = matches[j];\n          options.push({\n            text: match[1],\n            value: match[1],\n            selected: false\n          });\n        }\n\n        continue;\n      } else if (firstMatch) {\n        text = firstMatch[1];\n        value = firstMatch[1];\n      }\n    }\n\n    options.push({\n      text: text,\n      value: value,\n      selected: false\n    });\n  }\n\n  options = uniqBy(options, 'value');\n  return sortVariableValues(options, sort);\n};\nexport const queryVariableSlice = createSlice({\n  name: 'templating/query',\n  initialState: initialVariablesState,\n  reducers: {\n    updateVariableOptions: (state, action) => {\n      const {\n        results,\n        templatedRegex\n      } = action.payload.data;\n      const instanceState = getInstanceState(state, action.payload.id);\n      const {\n        includeAll,\n        sort\n      } = instanceState;\n      const options = metricNamesToVariableValues(templatedRegex, sort, results);\n\n      if (includeAll) {\n        options.unshift({\n          text: ALL_VARIABLE_TEXT,\n          value: ALL_VARIABLE_VALUE,\n          selected: false\n        });\n      }\n\n      if (!options.length) {\n        options.push({\n          text: NONE_VARIABLE_TEXT,\n          value: NONE_VARIABLE_VALUE,\n          isNone: true,\n          selected: false\n        });\n      }\n\n      instanceState.options = options;\n    }\n  }\n});\nexport const queryVariableReducer = queryVariableSlice.reducer;\nexport const {\n  updateVariableOptions\n} = queryVariableSlice.actions;","map":{"version":3,"names":["createSlice","isNumber","sortBy","toLower","uniqBy","stringToJsRegex","ALL_VARIABLE_TEXT","ALL_VARIABLE_VALUE","NONE_VARIABLE_TEXT","NONE_VARIABLE_VALUE","getInstanceState","initialVariablesState","initialVariableModelState","VariableRefresh","VariableSort","initialQueryVariableModelState","type","datasource","query","regex","sort","disabled","refresh","onDashboardLoad","multi","includeAll","allValue","options","current","definition","sortVariableValues","sortOrder","sortType","Math","ceil","reverseSort","opt","text","matches","match","length","parseInt","reverse","getAllMatches","str","results","lastIndex","exec","push","global","undefined","metricNamesToVariableValues","variableRegEx","metricNames","i","item","value","toString","valueGroup","find","m","groups","textGroup","firstMatch","manyMatches","j","selected","queryVariableSlice","name","initialState","reducers","updateVariableOptions","state","action","templatedRegex","payload","data","instanceState","id","unshift","isNone","queryVariableReducer","reducer","actions"],"sources":["/home/soula/grafana/public/app/features/variables/query/reducer.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { isNumber, sortBy, toLower, uniqBy } from 'lodash';\n\nimport { MetricFindValue, stringToJsRegex } from '@grafana/data';\n\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE, NONE_VARIABLE_TEXT, NONE_VARIABLE_VALUE } from '../constants';\nimport { getInstanceState } from '../state/selectors';\nimport { initialVariablesState, VariablePayload, VariablesState } from '../state/types';\nimport { initialVariableModelState, QueryVariableModel, VariableOption, VariableRefresh, VariableSort } from '../types';\n\ninterface VariableOptionsUpdate {\n  templatedRegex: string;\n  results: MetricFindValue[];\n}\n\nexport const initialQueryVariableModelState: QueryVariableModel = {\n  ...initialVariableModelState,\n  type: 'query',\n  datasource: null,\n  query: '',\n  regex: '',\n  sort: VariableSort.disabled,\n  refresh: VariableRefresh.onDashboardLoad,\n  multi: false,\n  includeAll: false,\n  allValue: null,\n  options: [],\n  current: {} as VariableOption,\n  definition: '',\n};\n\nexport const sortVariableValues = (options: any[], sortOrder: VariableSort) => {\n  if (sortOrder === VariableSort.disabled) {\n    return options;\n  }\n\n  const sortType = Math.ceil(sortOrder / 2);\n  const reverseSort = sortOrder % 2 === 0;\n\n  if (sortType === 1) {\n    options = sortBy(options, 'text');\n  } else if (sortType === 2) {\n    options = sortBy(options, (opt) => {\n      if (!opt.text) {\n        return -1;\n      }\n\n      const matches = opt.text.match(/.*?(\\d+).*/);\n      if (!matches || matches.length < 2) {\n        return -1;\n      } else {\n        return parseInt(matches[1], 10);\n      }\n    });\n  } else if (sortType === 3) {\n    options = sortBy(options, (opt) => {\n      return toLower(opt.text);\n    });\n  }\n\n  if (reverseSort) {\n    options = options.reverse();\n  }\n\n  return options;\n};\n\nconst getAllMatches = (str: string, regex: RegExp): RegExpExecArray[] => {\n  const results: RegExpExecArray[] = [];\n  let matches = null;\n\n  regex.lastIndex = 0;\n\n  do {\n    matches = regex.exec(str);\n    if (matches) {\n      results.push(matches);\n    }\n  } while (regex.global && matches && matches[0] !== '' && matches[0] !== undefined);\n\n  return results;\n};\n\nexport const metricNamesToVariableValues = (variableRegEx: string, sort: VariableSort, metricNames: any[]) => {\n  let regex;\n  let options: VariableOption[] = [];\n\n  if (variableRegEx) {\n    regex = stringToJsRegex(variableRegEx);\n  }\n\n  for (let i = 0; i < metricNames.length; i++) {\n    const item = metricNames[i];\n    let text = item.text === undefined || item.text === null ? item.value : item.text;\n    let value = item.value === undefined || item.value === null ? item.text : item.value;\n\n    if (isNumber(value)) {\n      value = value.toString();\n    }\n\n    if (isNumber(text)) {\n      text = text.toString();\n    }\n\n    if (regex) {\n      const matches = getAllMatches(value, regex);\n      if (!matches.length) {\n        continue;\n      }\n\n      const valueGroup = matches.find((m) => m.groups && m.groups.value);\n      const textGroup = matches.find((m) => m.groups && m.groups.text);\n      const firstMatch = matches.find((m) => m.length > 1);\n      const manyMatches = matches.length > 1 && firstMatch;\n\n      if (valueGroup || textGroup) {\n        value = valueGroup?.groups?.value ?? textGroup?.groups?.text;\n        text = textGroup?.groups?.text ?? valueGroup?.groups?.value;\n      } else if (manyMatches) {\n        for (let j = 0; j < matches.length; j++) {\n          const match = matches[j];\n          options.push({ text: match[1], value: match[1], selected: false });\n        }\n        continue;\n      } else if (firstMatch) {\n        text = firstMatch[1];\n        value = firstMatch[1];\n      }\n    }\n\n    options.push({ text: text, value: value, selected: false });\n  }\n\n  options = uniqBy(options, 'value');\n  return sortVariableValues(options, sort);\n};\n\nexport const queryVariableSlice = createSlice({\n  name: 'templating/query',\n  initialState: initialVariablesState,\n  reducers: {\n    updateVariableOptions: (state: VariablesState, action: PayloadAction<VariablePayload<VariableOptionsUpdate>>) => {\n      const { results, templatedRegex } = action.payload.data;\n      const instanceState = getInstanceState<QueryVariableModel>(state, action.payload.id);\n      const { includeAll, sort } = instanceState;\n      const options = metricNamesToVariableValues(templatedRegex, sort, results);\n\n      if (includeAll) {\n        options.unshift({ text: ALL_VARIABLE_TEXT, value: ALL_VARIABLE_VALUE, selected: false });\n      }\n\n      if (!options.length) {\n        options.push({ text: NONE_VARIABLE_TEXT, value: NONE_VARIABLE_VALUE, isNone: true, selected: false });\n      }\n\n      instanceState.options = options;\n    },\n  },\n});\n\nexport const queryVariableReducer = queryVariableSlice.reducer;\n\nexport const { updateVariableOptions } = queryVariableSlice.actions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}