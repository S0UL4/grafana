{"ast":null,"code":"import { cloneDeep } from 'lodash';\nimport InfluxQueryModel from './influx_query_model';\n// FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n// into a simpler approach with full typescript types.\n// later we should be able to migrate the unit-tests\n// that relate to these functions here, and then perhaps even move the implementation\n// to this place\nexport function buildRawQuery(query) {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n\n  const model = new InfluxQueryModel(queryCopy);\n  return model.render(false);\n}\nexport function normalizeQuery(query) {\n  // we return the original query if there is no need to update it\n  if (query.policy !== undefined && query.resultFormat !== undefined && query.orderByTime !== undefined && query.tags !== undefined && query.groupBy !== undefined && query.select !== undefined) {\n    return query;\n  } // FIXME: we should move the whole normalizeQuery logic here,\n  // and then have influxQueryModel call this function,\n  // to concentrate the whole logic here\n\n\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n\n  return new InfluxQueryModel(queryCopy).target;\n}\nexport function addNewSelectPart(query, type, index) {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n\n  const model = new InfluxQueryModel(queryCopy);\n  model.addSelectPart(model.selectModels[index], type);\n  return model.target;\n}\nexport function removeSelectPart(query, partIndex, index) {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n\n  const model = new InfluxQueryModel(queryCopy);\n  const selectModel = model.selectModels[index];\n  model.removeSelectPart(selectModel, selectModel[partIndex]);\n  return model.target;\n}\nexport function changeSelectPart(query, listIndex, partIndex, newParams) {\n  var _query$select;\n\n  // we need to make shallow copy of `query.select` down to `query.select[listIndex][partIndex]`\n  const newSel = [...((_query$select = query.select) !== null && _query$select !== void 0 ? _query$select : [])];\n  newSel[listIndex] = [...newSel[listIndex]];\n  newSel[listIndex][partIndex] = Object.assign({}, newSel[listIndex][partIndex], {\n    params: newParams\n  });\n  return Object.assign({}, query, {\n    select: newSel\n  });\n}\nexport function addNewGroupByPart(query, type) {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n\n  const model = new InfluxQueryModel(queryCopy);\n  model.addGroupBy(type);\n  return model.target;\n}\nexport function removeGroupByPart(query, partIndex) {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n\n  const model = new InfluxQueryModel(queryCopy);\n  model.removeGroupByPart(model.groupByParts[partIndex], partIndex);\n  return model.target;\n}\nexport function changeGroupByPart(query, partIndex, newParams) {\n  var _query$groupBy;\n\n  // we need to make shallow copy of `query.groupBy` down to `query.groupBy[partIndex]`\n  const newGroupBy = [...((_query$groupBy = query.groupBy) !== null && _query$groupBy !== void 0 ? _query$groupBy : [])];\n  newGroupBy[partIndex] = Object.assign({}, newGroupBy[partIndex], {\n    params: newParams\n  });\n  return Object.assign({}, query, {\n    groupBy: newGroupBy\n  });\n}","map":{"version":3,"names":["cloneDeep","InfluxQueryModel","buildRawQuery","query","queryCopy","model","render","normalizeQuery","policy","undefined","resultFormat","orderByTime","tags","groupBy","select","target","addNewSelectPart","type","index","addSelectPart","selectModels","removeSelectPart","partIndex","selectModel","changeSelectPart","listIndex","newParams","newSel","params","addNewGroupByPart","addGroupBy","removeGroupByPart","groupByParts","changeGroupByPart","newGroupBy"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/queryUtils.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\n\nimport InfluxQueryModel from './influx_query_model';\nimport { InfluxQuery } from './types';\n\n// FIXME: these functions are a beginning of a refactoring of influx_query_model.ts\n// into a simpler approach with full typescript types.\n// later we should be able to migrate the unit-tests\n// that relate to these functions here, and then perhaps even move the implementation\n// to this place\n\nexport function buildRawQuery(query: InfluxQuery): string {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  return model.render(false);\n}\n\nexport function normalizeQuery(query: InfluxQuery): InfluxQuery {\n  // we return the original query if there is no need to update it\n  if (\n    query.policy !== undefined &&\n    query.resultFormat !== undefined &&\n    query.orderByTime !== undefined &&\n    query.tags !== undefined &&\n    query.groupBy !== undefined &&\n    query.select !== undefined\n  ) {\n    return query;\n  }\n\n  // FIXME: we should move the whole normalizeQuery logic here,\n  // and then have influxQueryModel call this function,\n  // to concentrate the whole logic here\n\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  return new InfluxQueryModel(queryCopy).target;\n}\n\nexport function addNewSelectPart(query: InfluxQuery, type: string, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addSelectPart(model.selectModels[index], type);\n  return model.target;\n}\n\nexport function removeSelectPart(query: InfluxQuery, partIndex: number, index: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  const selectModel = model.selectModels[index];\n  model.removeSelectPart(selectModel, selectModel[partIndex]);\n  return model.target;\n}\n\nexport function changeSelectPart(\n  query: InfluxQuery,\n  listIndex: number,\n  partIndex: number,\n  newParams: string[]\n): InfluxQuery {\n  // we need to make shallow copy of `query.select` down to `query.select[listIndex][partIndex]`\n  const newSel = [...(query.select ?? [])];\n  newSel[listIndex] = [...newSel[listIndex]];\n  newSel[listIndex][partIndex] = {\n    ...newSel[listIndex][partIndex],\n    params: newParams,\n  };\n  return { ...query, select: newSel };\n}\n\nexport function addNewGroupByPart(query: InfluxQuery, type: string): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.addGroupBy(type);\n  return model.target;\n}\n\nexport function removeGroupByPart(query: InfluxQuery, partIndex: number): InfluxQuery {\n  const queryCopy = cloneDeep(query); // the query-model mutates the query\n  const model = new InfluxQueryModel(queryCopy);\n  model.removeGroupByPart(model.groupByParts[partIndex], partIndex);\n  return model.target;\n}\n\nexport function changeGroupByPart(query: InfluxQuery, partIndex: number, newParams: string[]): InfluxQuery {\n  // we need to make shallow copy of `query.groupBy` down to `query.groupBy[partIndex]`\n  const newGroupBy = [...(query.groupBy ?? [])];\n  newGroupBy[partIndex] = {\n    ...newGroupBy[partIndex],\n    params: newParams,\n  };\n  return { ...query, groupBy: newGroupBy };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}