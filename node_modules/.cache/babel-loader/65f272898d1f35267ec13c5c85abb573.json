{"ast":null,"code":"var _Icon, _div, _DocumentedFunction, _DocumentedFunction2, _DocumentedFunction3, _DocumentedFunction4, _DocumentedFunction5, _DocumentedFunction6, _DocumentedFunction7, _DocumentedFunction8, _DocumentedFunction9, _DocumentedFunction10, _Icon2;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Icon, InlineField, TextArea, useStyles2 } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst mathPlaceholder = 'Math operations on one or more queries. You reference the query by ${refId} ie. $A, $B, $C etc\\n' + 'The sum of two scalar values: $A + $B > 10';\nexport const Math = ({\n  labelWidth,\n  onChange,\n  query,\n  onRunQuery\n}) => {\n  const [showHelp, toggleShowHelp] = useToggle(false);\n\n  const onExpressionChange = event => {\n    onChange(Object.assign({}, query, {\n      expression: event.target.value\n    }));\n  };\n\n  const styles = useStyles2(theme => getStyles(theme, showHelp));\n\n  const executeQuery = () => {\n    if (query.expression) {\n      onRunQuery();\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Stack, {\n    direction: \"row\",\n    children: [/*#__PURE__*/_jsx(InlineField, {\n      label: \"Expression\",\n      labelWidth: labelWidth,\n      grow: true,\n      shrink: true,\n      className: css`\n          align-items: flex-start;\n          flex: 0.7;\n        `,\n      children: /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(TextArea, {\n          value: query.expression,\n          onChange: onExpressionChange,\n          rows: 5,\n          placeholder: mathPlaceholder,\n          onBlur: executeQuery\n        }), /*#__PURE__*/_jsxs(Button, {\n          variant: \"secondary\",\n          size: \"sm\",\n          onClick: toggleShowHelp,\n          children: [showHelp === false ? 'Show' : 'Hide', \" help\"]\n        })]\n      })\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.documentationContainer,\n      children: [/*#__PURE__*/_jsxs(\"header\", {\n        className: styles.documentationHeader,\n        children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n          name: \"book-open\"\n        })), \" Math operator\"]\n      }), _div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"Run math operations on one or more queries. You reference the query by \", '${refId}', \" ie. $A, $B, $C etc.\", /*#__PURE__*/_jsx(\"br\", {}), \"Example: \", /*#__PURE__*/_jsx(\"code\", {\n          children: \"$A + $B\"\n        })]\n      })), /*#__PURE__*/_jsx(\"header\", {\n        className: styles.documentationHeader,\n        children: \"Available Math functions\"\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.documentationFunctions,\n        children: [_DocumentedFunction || (_DocumentedFunction = /*#__PURE__*/_jsx(DocumentedFunction, {\n          name: \"abs\",\n          description: \"returns the absolute value of its argument which can be a number or a series\"\n        })), _DocumentedFunction2 || (_DocumentedFunction2 = /*#__PURE__*/_jsx(DocumentedFunction, {\n          name: \"is_inf\",\n          description: \"returns 1 for Inf values (negative or positive) and 0 for other values. It's able to operate on series or scalar values.\"\n        })), _DocumentedFunction3 || (_DocumentedFunction3 = /*#__PURE__*/_jsx(DocumentedFunction, {\n          name: \"is_nan\",\n          description: \"returns 1 for NaN values and 0 for other values. It's able to operate on series or scalar values.\"\n        })), _DocumentedFunction4 || (_DocumentedFunction4 = /*#__PURE__*/_jsx(DocumentedFunction, {\n          name: \"is_null\",\n          description: \"returns 1 for null values and 0 for other values. It's able to operate on series or scalar values.\"\n        })), _DocumentedFunction5 || (_DocumentedFunction5 = /*#__PURE__*/_jsx(DocumentedFunction, {\n          name: \"is_number\",\n          description: \"returns 1 for all real number values and 0 for non-number. It's able to operate on series or scalar values.\"\n        })), _DocumentedFunction6 || (_DocumentedFunction6 = /*#__PURE__*/_jsx(DocumentedFunction, {\n          name: \"log\",\n          description: \"returns the natural logarithm of its argument, which can be a number or a series\"\n        })), _DocumentedFunction7 || (_DocumentedFunction7 = /*#__PURE__*/_jsx(DocumentedFunction, {\n          name: \"inf, infn, nan, and null\",\n          description: \"The inf for infinity positive, infn for infinity negative, nan, and null functions all return a single scalar value that matches its name.\"\n        })), _DocumentedFunction8 || (_DocumentedFunction8 = /*#__PURE__*/_jsx(DocumentedFunction, {\n          name: \"round\",\n          description: \"returns a rounded integer value. It's able to operate on series or escalar values.\"\n        })), _DocumentedFunction9 || (_DocumentedFunction9 = /*#__PURE__*/_jsx(DocumentedFunction, {\n          name: \"ceil\",\n          description: \"rounds the number up to the nearest integer value. It's able to operate on series or escalar values.\"\n        })), _DocumentedFunction10 || (_DocumentedFunction10 = /*#__PURE__*/_jsx(DocumentedFunction, {\n          name: \"floor\",\n          description: \"rounds the number down to the nearest integer value. It's able to operate on series or escalar values.\"\n        }))]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        children: [\"See our additional documentation on\", ' ', /*#__PURE__*/_jsxs(\"a\", {\n          className: styles.documentationLink,\n          target: \"_blank\",\n          href: \"https://grafana.com/docs/grafana/latest/panels/query-a-data-source/use-expressions-to-manipulate-data/about-expressions/#math\",\n          rel: \"noreferrer\",\n          children: [_Icon2 || (_Icon2 = /*#__PURE__*/_jsx(Icon, {\n            size: \"xs\",\n            name: \"external-link-alt\"\n          })), \" Math expressions\"]\n        }), \".\"]\n      })]\n    })]\n  });\n};\n\nconst DocumentedFunction = ({\n  name,\n  description\n}) => {\n  const styles = useStyles2(getDocumentedFunctionStyles);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"span\", {\n      className: styles.name,\n      children: name\n    }), /*#__PURE__*/_jsx(\"span\", {\n      className: styles.description,\n      children: description\n    })]\n  });\n};\n\nconst getStyles = (theme, showHelp) => ({\n  documentationHeader: css`\n    font-size: ${theme.typography.h5.fontSize};\n    font-weight: ${theme.typography.h5.fontWeight};\n  `,\n  documentationLink: css`\n    color: ${theme.colors.text.link};\n  `,\n  documentationContainer: css`\n    display: ${showHelp ? 'flex' : 'none'};\n    flex: 1;\n    flex-direction: column;\n    gap: ${theme.spacing(2)};\n  `,\n  documentationFunctions: css`\n    display: grid;\n    grid-template-columns: max-content auto;\n    column-gap: ${theme.spacing(2)};\n  `\n});\n\nconst getDocumentedFunctionStyles = theme => ({\n  name: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  description: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.disabled};\n  `\n});","map":{"version":3,"names":["css","React","useToggle","Stack","Button","Icon","InlineField","TextArea","useStyles2","mathPlaceholder","Math","labelWidth","onChange","query","onRunQuery","showHelp","toggleShowHelp","onExpressionChange","event","expression","target","value","styles","theme","getStyles","executeQuery","documentationContainer","documentationHeader","documentationFunctions","documentationLink","DocumentedFunction","name","description","getDocumentedFunctionStyles","typography","h5","fontSize","fontWeight","colors","text","link","spacing","fontWeightBold","bodySmall","disabled"],"sources":["/home/soula/grafana/public/app/features/expressions/components/Math.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { ChangeEvent, FC } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Icon, InlineField, TextArea, useStyles2 } from '@grafana/ui';\n\nimport { ExpressionQuery } from '../types';\n\ninterface Props {\n  labelWidth: number;\n  query: ExpressionQuery;\n  onChange: (query: ExpressionQuery) => void;\n  onRunQuery: () => void;\n}\n\nconst mathPlaceholder =\n  'Math operations on one or more queries. You reference the query by ${refId} ie. $A, $B, $C etc\\n' +\n  'The sum of two scalar values: $A + $B > 10';\n\nexport const Math: FC<Props> = ({ labelWidth, onChange, query, onRunQuery }) => {\n  const [showHelp, toggleShowHelp] = useToggle(false);\n\n  const onExpressionChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    onChange({ ...query, expression: event.target.value });\n  };\n\n  const styles = useStyles2((theme) => getStyles(theme, showHelp));\n\n  const executeQuery = () => {\n    if (query.expression) {\n      onRunQuery();\n    }\n  };\n\n  return (\n    <Stack direction=\"row\">\n      <InlineField\n        label=\"Expression\"\n        labelWidth={labelWidth}\n        grow={true}\n        shrink={true}\n        className={css`\n          align-items: flex-start;\n          flex: 0.7;\n        `}\n      >\n        <>\n          <TextArea\n            value={query.expression}\n            onChange={onExpressionChange}\n            rows={5}\n            placeholder={mathPlaceholder}\n            onBlur={executeQuery}\n          />\n          <Button variant=\"secondary\" size=\"sm\" onClick={toggleShowHelp}>\n            {showHelp === false ? 'Show' : 'Hide'} help\n          </Button>\n        </>\n      </InlineField>\n      <div className={styles.documentationContainer}>\n        <header className={styles.documentationHeader}>\n          <Icon name=\"book-open\" /> Math operator\n        </header>\n        <div>\n          Run math operations on one or more queries. You reference the query by {'${refId}'} ie. $A, $B, $C etc.\n          <br />\n          Example: <code>$A + $B</code>\n        </div>\n        <header className={styles.documentationHeader}>Available Math functions</header>\n        <div className={styles.documentationFunctions}>\n          <DocumentedFunction\n            name=\"abs\"\n            description=\"returns the absolute value of its argument which can be a number or a series\"\n          />\n          <DocumentedFunction\n            name=\"is_inf\"\n            description=\"returns 1 for Inf values (negative or positive) and 0 for other values. It's able to operate on series or scalar values.\"\n          />\n          <DocumentedFunction\n            name=\"is_nan\"\n            description=\"returns 1 for NaN values and 0 for other values. It's able to operate on series or scalar values.\"\n          />\n          <DocumentedFunction\n            name=\"is_null\"\n            description=\"returns 1 for null values and 0 for other values. It's able to operate on series or scalar values.\"\n          />\n          <DocumentedFunction\n            name=\"is_number\"\n            description=\"returns 1 for all real number values and 0 for non-number. It's able to operate on series or scalar values.\"\n          />\n          <DocumentedFunction\n            name=\"log\"\n            description=\"returns the natural logarithm of its argument, which can be a number or a series\"\n          />\n          <DocumentedFunction\n            name=\"inf, infn, nan, and null\"\n            description=\"The inf for infinity positive, infn for infinity negative, nan, and null functions all return a single scalar value that matches its name.\"\n          />\n          <DocumentedFunction\n            name=\"round\"\n            description=\"returns a rounded integer value. It's able to operate on series or escalar values.\"\n          />\n          <DocumentedFunction\n            name=\"ceil\"\n            description=\"rounds the number up to the nearest integer value. It's able to operate on series or escalar values.\"\n          />\n          <DocumentedFunction\n            name=\"floor\"\n            description=\"rounds the number down to the nearest integer value. It's able to operate on series or escalar values.\"\n          />\n        </div>\n        <div>\n          See our additional documentation on{' '}\n          <a\n            className={styles.documentationLink}\n            target=\"_blank\"\n            href=\"https://grafana.com/docs/grafana/latest/panels/query-a-data-source/use-expressions-to-manipulate-data/about-expressions/#math\"\n            rel=\"noreferrer\"\n          >\n            <Icon size=\"xs\" name=\"external-link-alt\" /> Math expressions\n          </a>\n          .\n        </div>\n      </div>\n    </Stack>\n  );\n};\n\ninterface DocumentedFunctionProps {\n  name: string;\n  description: React.ReactNode;\n}\nconst DocumentedFunction = ({ name, description }: DocumentedFunctionProps) => {\n  const styles = useStyles2(getDocumentedFunctionStyles);\n\n  return (\n    <>\n      <span className={styles.name}>{name}</span>\n      <span className={styles.description}>{description}</span>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, showHelp?: boolean) => ({\n  documentationHeader: css`\n    font-size: ${theme.typography.h5.fontSize};\n    font-weight: ${theme.typography.h5.fontWeight};\n  `,\n  documentationLink: css`\n    color: ${theme.colors.text.link};\n  `,\n  documentationContainer: css`\n    display: ${showHelp ? 'flex' : 'none'};\n    flex: 1;\n    flex-direction: column;\n    gap: ${theme.spacing(2)};\n  `,\n  documentationFunctions: css`\n    display: grid;\n    grid-template-columns: max-content auto;\n    column-gap: ${theme.spacing(2)};\n  `,\n});\n\nconst getDocumentedFunctionStyles = (theme: GrafanaTheme2) => ({\n  name: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  description: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.disabled};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}