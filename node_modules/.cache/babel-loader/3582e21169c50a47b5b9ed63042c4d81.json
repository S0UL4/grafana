{"ast":null,"code":"import React, { useCallback, useState } from 'react';\nimport { ValueMatcherID } from '@grafana/data';\nimport { Input } from '@grafana/ui';\nimport { convertToType } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function basicMatcherEditor(config) {\n  return function Render({\n    options,\n    onChange,\n    field\n  }) {\n    const {\n      validator,\n      converter = convertToType\n    } = config;\n    const {\n      value\n    } = options;\n    const [isInvalid, setInvalid] = useState(!validator(value));\n    const onChangeValue = useCallback(event => {\n      setInvalid(!validator(event.currentTarget.value));\n    }, [setInvalid, validator]);\n    const onChangeOptions = useCallback(event => {\n      if (isInvalid) {\n        return;\n      }\n\n      const {\n        value\n      } = event.currentTarget;\n      onChange(Object.assign({}, options, {\n        value: converter(value, field)\n      }));\n    }, [options, onChange, isInvalid, field, converter]);\n    return /*#__PURE__*/_jsx(Input, {\n      className: \"flex-grow-1\",\n      invalid: isInvalid,\n      defaultValue: String(options.value),\n      placeholder: \"Value\",\n      onChange: onChangeValue,\n      onBlur: onChangeOptions\n    });\n  };\n}\nexport const getBasicValueMatchersUI = () => {\n  return [{\n    name: 'Is greater',\n    id: ValueMatcherID.greater,\n    component: basicMatcherEditor({\n      validator: value => !isNaN(value)\n    })\n  }, {\n    name: 'Is greater or equal',\n    id: ValueMatcherID.greaterOrEqual,\n    component: basicMatcherEditor({\n      validator: value => !isNaN(value)\n    })\n  }, {\n    name: 'Is lower',\n    id: ValueMatcherID.lower,\n    component: basicMatcherEditor({\n      validator: value => !isNaN(value)\n    })\n  }, {\n    name: 'Is lower or equal',\n    id: ValueMatcherID.lowerOrEqual,\n    component: basicMatcherEditor({\n      validator: value => !isNaN(value)\n    })\n  }, {\n    name: 'Is equal',\n    id: ValueMatcherID.equal,\n    component: basicMatcherEditor({\n      validator: () => true\n    })\n  }, {\n    name: 'Is not equal',\n    id: ValueMatcherID.notEqual,\n    component: basicMatcherEditor({\n      validator: () => true\n    })\n  }, {\n    name: 'Regex',\n    id: ValueMatcherID.regex,\n    component: basicMatcherEditor({\n      validator: () => true,\n      converter: value => String(value)\n    })\n  }];\n};","map":{"version":3,"names":["React","useCallback","useState","ValueMatcherID","Input","convertToType","basicMatcherEditor","config","Render","options","onChange","field","validator","converter","value","isInvalid","setInvalid","onChangeValue","event","currentTarget","onChangeOptions","String","getBasicValueMatchersUI","name","id","greater","component","isNaN","greaterOrEqual","lower","lowerOrEqual","equal","notEqual","regex"],"sources":["/home/soula/grafana/public/app/features/transformers/FilterByValueTransformer/ValueMatchers/BasicMatcherEditor.tsx"],"sourcesContent":["import React, { useCallback, useState } from 'react';\n\nimport { ValueMatcherID, BasicValueMatcherOptions } from '@grafana/data';\nimport { Input } from '@grafana/ui';\n\nimport { ValueMatcherEditorConfig, ValueMatcherUIProps, ValueMatcherUIRegistryItem } from './types';\nimport { convertToType } from './utils';\n\nexport function basicMatcherEditor<T = any>(\n  config: ValueMatcherEditorConfig\n): React.FC<ValueMatcherUIProps<BasicValueMatcherOptions<T>>> {\n  return function Render({ options, onChange, field }) {\n    const { validator, converter = convertToType } = config;\n    const { value } = options;\n    const [isInvalid, setInvalid] = useState(!validator(value));\n\n    const onChangeValue = useCallback(\n      (event: React.FormEvent<HTMLInputElement>) => {\n        setInvalid(!validator(event.currentTarget.value));\n      },\n      [setInvalid, validator]\n    );\n\n    const onChangeOptions = useCallback(\n      (event: React.FocusEvent<HTMLInputElement>) => {\n        if (isInvalid) {\n          return;\n        }\n\n        const { value } = event.currentTarget;\n\n        onChange({\n          ...options,\n          value: converter(value, field),\n        });\n      },\n      [options, onChange, isInvalid, field, converter]\n    );\n\n    return (\n      <Input\n        className=\"flex-grow-1\"\n        invalid={isInvalid}\n        defaultValue={String(options.value)}\n        placeholder=\"Value\"\n        onChange={onChangeValue}\n        onBlur={onChangeOptions}\n      />\n    );\n  };\n}\n\nexport const getBasicValueMatchersUI = (): Array<ValueMatcherUIRegistryItem<BasicValueMatcherOptions>> => {\n  return [\n    {\n      name: 'Is greater',\n      id: ValueMatcherID.greater,\n      component: basicMatcherEditor<number>({\n        validator: (value) => !isNaN(value),\n      }),\n    },\n    {\n      name: 'Is greater or equal',\n      id: ValueMatcherID.greaterOrEqual,\n      component: basicMatcherEditor<number>({\n        validator: (value) => !isNaN(value),\n      }),\n    },\n    {\n      name: 'Is lower',\n      id: ValueMatcherID.lower,\n      component: basicMatcherEditor<number>({\n        validator: (value) => !isNaN(value),\n      }),\n    },\n    {\n      name: 'Is lower or equal',\n      id: ValueMatcherID.lowerOrEqual,\n      component: basicMatcherEditor<number>({\n        validator: (value) => !isNaN(value),\n      }),\n    },\n    {\n      name: 'Is equal',\n      id: ValueMatcherID.equal,\n      component: basicMatcherEditor<any>({\n        validator: () => true,\n      }),\n    },\n    {\n      name: 'Is not equal',\n      id: ValueMatcherID.notEqual,\n      component: basicMatcherEditor<any>({\n        validator: () => true,\n      }),\n    },\n    {\n      name: 'Regex',\n      id: ValueMatcherID.regex,\n      component: basicMatcherEditor<string>({\n        validator: () => true,\n        converter: (value: any) => String(value),\n      }),\n    },\n  ];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}