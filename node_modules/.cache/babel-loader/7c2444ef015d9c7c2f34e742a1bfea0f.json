{"ast":null,"code":"import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport React from 'react';\nimport { Stack } from '@grafana/experimental';\nimport { useStyles2 } from '@grafana/ui';\nimport { useRulesSourcesWithRuler } from '../../../hooks/useRuleSourcesWithRuler';\nimport { RuleFormType } from '../../../types/rule-form';\nimport { GrafanaManagedRuleType } from './GrafanaManagedAlert';\nimport { MimirFlavoredType } from './MimirOrLokiAlert';\nimport { RecordingRuleType } from './MimirOrLokiRecordingRule';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst RuleTypePicker = ({\n  selected,\n  onChange,\n  enabledTypes\n}) => {\n  const rulesSourcesWithRuler = useRulesSourcesWithRuler();\n  const hasLotexDatasources = !isEmpty(rulesSourcesWithRuler);\n  const styles = useStyles2(getStyles);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Stack, {\n      direction: \"row\",\n      gap: 2,\n      children: [enabledTypes.includes(RuleFormType.grafana) && /*#__PURE__*/_jsx(GrafanaManagedRuleType, {\n        selected: selected === RuleFormType.grafana,\n        onClick: onChange\n      }), enabledTypes.includes(RuleFormType.cloudAlerting) && /*#__PURE__*/_jsx(MimirFlavoredType, {\n        selected: selected === RuleFormType.cloudAlerting,\n        onClick: onChange,\n        disabled: !hasLotexDatasources\n      }), enabledTypes.includes(RuleFormType.cloudRecording) && /*#__PURE__*/_jsx(RecordingRuleType, {\n        selected: selected === RuleFormType.cloudRecording,\n        onClick: onChange,\n        disabled: !hasLotexDatasources\n      })]\n    }), enabledTypes.includes(RuleFormType.grafana) && /*#__PURE__*/_jsx(\"small\", {\n      className: styles.meta,\n      children: \"Select \\u201CGrafana managed\\u201D unless you have a Mimir, Loki or Cortex data source with the Ruler API enabled.\"\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  meta: css`\n    color: ${theme.colors.text.disabled};\n  `\n});\n\nexport { RuleTypePicker };","map":{"version":3,"names":["css","isEmpty","React","Stack","useStyles2","useRulesSourcesWithRuler","RuleFormType","GrafanaManagedRuleType","MimirFlavoredType","RecordingRuleType","RuleTypePicker","selected","onChange","enabledTypes","rulesSourcesWithRuler","hasLotexDatasources","styles","getStyles","includes","grafana","cloudAlerting","cloudRecording","meta","theme","colors","text","disabled"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/rule-types/RuleTypePicker.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Stack } from '@grafana/experimental';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { useRulesSourcesWithRuler } from '../../../hooks/useRuleSourcesWithRuler';\nimport { RuleFormType } from '../../../types/rule-form';\n\nimport { GrafanaManagedRuleType } from './GrafanaManagedAlert';\nimport { MimirFlavoredType } from './MimirOrLokiAlert';\nimport { RecordingRuleType } from './MimirOrLokiRecordingRule';\n\ninterface RuleTypePickerProps {\n  onChange: (value: RuleFormType) => void;\n  selected: RuleFormType;\n  enabledTypes: RuleFormType[];\n}\n\nconst RuleTypePicker: FC<RuleTypePickerProps> = ({ selected, onChange, enabledTypes }) => {\n  const rulesSourcesWithRuler = useRulesSourcesWithRuler();\n  const hasLotexDatasources = !isEmpty(rulesSourcesWithRuler);\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <Stack direction=\"row\" gap={2}>\n        {enabledTypes.includes(RuleFormType.grafana) && (\n          <GrafanaManagedRuleType selected={selected === RuleFormType.grafana} onClick={onChange} />\n        )}\n        {enabledTypes.includes(RuleFormType.cloudAlerting) && (\n          <MimirFlavoredType\n            selected={selected === RuleFormType.cloudAlerting}\n            onClick={onChange}\n            disabled={!hasLotexDatasources}\n          />\n        )}\n        {enabledTypes.includes(RuleFormType.cloudRecording) && (\n          <RecordingRuleType\n            selected={selected === RuleFormType.cloudRecording}\n            onClick={onChange}\n            disabled={!hasLotexDatasources}\n          />\n        )}\n      </Stack>\n      {enabledTypes.includes(RuleFormType.grafana) && (\n        <small className={styles.meta}>\n          Select &ldquo;Grafana managed&rdquo; unless you have a Mimir, Loki or Cortex data source with the Ruler API\n          enabled.\n        </small>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  meta: css`\n    color: ${theme.colors.text.disabled};\n  `,\n});\n\nexport { RuleTypePicker };\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,MAA0B,OAA1B;AAGA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,SAASC,wBAAT,QAAyC,wCAAzC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,SAASC,sBAAT,QAAuC,uBAAvC;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AACA,SAASC,iBAAT,QAAkC,4BAAlC;;;;;AAQA,MAAMC,cAAuC,GAAG,CAAC;EAAEC,QAAF;EAAYC,QAAZ;EAAsBC;AAAtB,CAAD,KAA0C;EACxF,MAAMC,qBAAqB,GAAGT,wBAAwB,EAAtD;EACA,MAAMU,mBAAmB,GAAG,CAACd,OAAO,CAACa,qBAAD,CAApC;EAEA,MAAME,MAAM,GAAGZ,UAAU,CAACa,SAAD,CAAzB;EAEA,oBACE;IAAA,wBACE,MAAC,KAAD;MAAO,SAAS,EAAC,KAAjB;MAAuB,GAAG,EAAE,CAA5B;MAAA,WACGJ,YAAY,CAACK,QAAb,CAAsBZ,YAAY,CAACa,OAAnC,kBACC,KAAC,sBAAD;QAAwB,QAAQ,EAAER,QAAQ,KAAKL,YAAY,CAACa,OAA5D;QAAqE,OAAO,EAAEP;MAA9E,EAFJ,EAIGC,YAAY,CAACK,QAAb,CAAsBZ,YAAY,CAACc,aAAnC,kBACC,KAAC,iBAAD;QACE,QAAQ,EAAET,QAAQ,KAAKL,YAAY,CAACc,aADtC;QAEE,OAAO,EAAER,QAFX;QAGE,QAAQ,EAAE,CAACG;MAHb,EALJ,EAWGF,YAAY,CAACK,QAAb,CAAsBZ,YAAY,CAACe,cAAnC,kBACC,KAAC,iBAAD;QACE,QAAQ,EAAEV,QAAQ,KAAKL,YAAY,CAACe,cADtC;QAEE,OAAO,EAAET,QAFX;QAGE,QAAQ,EAAE,CAACG;MAHb,EAZJ;IAAA,EADF,EAoBGF,YAAY,CAACK,QAAb,CAAsBZ,YAAY,CAACa,OAAnC,kBACC;MAAO,SAAS,EAAEH,MAAM,CAACM,IAAzB;MAAA;IAAA,EArBJ;EAAA,EADF;AA6BD,CAnCD;;AAqCA,MAAML,SAAS,GAAIM,KAAD,KAA2B;EAC3CD,IAAI,EAAEtB,GAAI;AACZ,aAAauB,KAAK,CAACC,MAAN,CAAaC,IAAb,CAAkBC,QAAS;AACxC;AAH6C,CAA3B,CAAlB;;AAMA,SAAShB,cAAT"},"metadata":{},"sourceType":"module"}