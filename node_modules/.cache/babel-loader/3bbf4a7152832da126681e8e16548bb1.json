{"ast":null,"code":"import { describeMetric, convertOrderByToMetricId } from '../../../../utils';\nimport { useQuery } from '../../ElasticsearchQueryContext';\nimport { bucketAggregationConfig, orderByOptions, orderOptions } from '../utils';\n\nconst hasValue = value => object => object.value === value; // FIXME: We should apply the same defaults we have in bucketAggregationsConfig here instead of \"custom\" values\n// as they might get out of sync.\n// The reason we need them is that even though after the refactoring each setting is created with its default value,\n// queries created with the old version might not have them.\n\n\nexport const useDescription = bucketAgg => {\n  const {\n    metrics\n  } = useQuery();\n\n  switch (bucketAgg.type) {\n    case 'terms':\n      {\n        var _bucketAgg$settings, _bucketAgg$settings2, _bucketAgg$settings3, _bucketAgg$settings4;\n\n        const order = ((_bucketAgg$settings = bucketAgg.settings) === null || _bucketAgg$settings === void 0 ? void 0 : _bucketAgg$settings.order) || 'desc';\n        const size = ((_bucketAgg$settings2 = bucketAgg.settings) === null || _bucketAgg$settings2 === void 0 ? void 0 : _bucketAgg$settings2.size) || '10';\n        const minDocCount = parseInt(((_bucketAgg$settings3 = bucketAgg.settings) === null || _bucketAgg$settings3 === void 0 ? void 0 : _bucketAgg$settings3.min_doc_count) || '0', 10);\n        const orderBy = ((_bucketAgg$settings4 = bucketAgg.settings) === null || _bucketAgg$settings4 === void 0 ? void 0 : _bucketAgg$settings4.orderBy) || '_term';\n        let description = '';\n\n        if (size !== '0') {\n          var _orderOptions$find;\n\n          const orderLabel = (_orderOptions$find = orderOptions.find(hasValue(order))) === null || _orderOptions$find === void 0 ? void 0 : _orderOptions$find.label;\n          description = `${orderLabel} ${size}, `;\n        }\n\n        if (minDocCount > 0) {\n          description += `Min Doc Count: ${minDocCount}, `;\n        }\n\n        description += 'Order by: ';\n        const orderByOption = orderByOptions.find(hasValue(orderBy));\n\n        if (orderByOption) {\n          description += orderByOption.label;\n        } else {\n          const metric = metrics === null || metrics === void 0 ? void 0 : metrics.find(m => m.id === convertOrderByToMetricId(orderBy));\n\n          if (metric) {\n            description += describeMetric(metric);\n          } else {\n            description += 'metric not found';\n          }\n        }\n\n        if (size === '0') {\n          description += ` (${order})`;\n        }\n\n        return description;\n      }\n\n    case 'histogram':\n      {\n        var _bucketAgg$settings5, _bucketAgg$settings6;\n\n        const interval = ((_bucketAgg$settings5 = bucketAgg.settings) === null || _bucketAgg$settings5 === void 0 ? void 0 : _bucketAgg$settings5.interval) || 1000;\n        const minDocCount = ((_bucketAgg$settings6 = bucketAgg.settings) === null || _bucketAgg$settings6 === void 0 ? void 0 : _bucketAgg$settings6.min_doc_count) || 1;\n        return `Interval: ${interval}${minDocCount > 0 ? `, Min Doc Count: ${minDocCount}` : ''}`;\n      }\n\n    case 'filters':\n      {\n        var _bucketAgg$settings7, _bucketAggregationCon;\n\n        const filters = ((_bucketAgg$settings7 = bucketAgg.settings) === null || _bucketAgg$settings7 === void 0 ? void 0 : _bucketAgg$settings7.filters) || ((_bucketAggregationCon = bucketAggregationConfig['filters'].defaultSettings) === null || _bucketAggregationCon === void 0 ? void 0 : _bucketAggregationCon.filters);\n        return `Filter Queries (${filters.length})`;\n      }\n\n    case 'geohash_grid':\n      {\n        var _bucketAgg$settings8;\n\n        const precision = Math.max(Math.min(parseInt(((_bucketAgg$settings8 = bucketAgg.settings) === null || _bucketAgg$settings8 === void 0 ? void 0 : _bucketAgg$settings8.precision) || '5', 10), 12), 1);\n        return `Precision: ${precision}`;\n      }\n\n    case 'date_histogram':\n      {\n        var _bucketAgg$settings9, _bucketAgg$settings10, _bucketAgg$settings11;\n\n        const interval = ((_bucketAgg$settings9 = bucketAgg.settings) === null || _bucketAgg$settings9 === void 0 ? void 0 : _bucketAgg$settings9.interval) || 'auto';\n        const minDocCount = ((_bucketAgg$settings10 = bucketAgg.settings) === null || _bucketAgg$settings10 === void 0 ? void 0 : _bucketAgg$settings10.min_doc_count) || 0;\n        const trimEdges = ((_bucketAgg$settings11 = bucketAgg.settings) === null || _bucketAgg$settings11 === void 0 ? void 0 : _bucketAgg$settings11.trimEdges) || 0;\n        let description = `Interval: ${interval}`;\n\n        if (minDocCount > 0) {\n          description += `, Min Doc Count: ${minDocCount}`;\n        }\n\n        if (trimEdges > 0) {\n          description += `, Trim edges: ${trimEdges}`;\n        }\n\n        return description;\n      }\n\n    default:\n      return 'Settings';\n  }\n};","map":{"version":3,"names":["describeMetric","convertOrderByToMetricId","useQuery","bucketAggregationConfig","orderByOptions","orderOptions","hasValue","value","object","useDescription","bucketAgg","metrics","type","order","settings","size","minDocCount","parseInt","min_doc_count","orderBy","description","orderLabel","find","label","orderByOption","metric","m","id","interval","filters","defaultSettings","length","precision","Math","max","min","trimEdges"],"sources":["/home/soula/grafana/public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/useDescription.ts"],"sourcesContent":["import { describeMetric, convertOrderByToMetricId } from '../../../../utils';\nimport { useQuery } from '../../ElasticsearchQueryContext';\nimport { BucketAggregation } from '../aggregations';\nimport { bucketAggregationConfig, orderByOptions, orderOptions } from '../utils';\n\nconst hasValue = (value: string) => (object: { value?: string }) => object.value === value;\n\n// FIXME: We should apply the same defaults we have in bucketAggregationsConfig here instead of \"custom\" values\n// as they might get out of sync.\n// The reason we need them is that even though after the refactoring each setting is created with its default value,\n// queries created with the old version might not have them.\nexport const useDescription = (bucketAgg: BucketAggregation): string => {\n  const { metrics } = useQuery();\n\n  switch (bucketAgg.type) {\n    case 'terms': {\n      const order = bucketAgg.settings?.order || 'desc';\n      const size = bucketAgg.settings?.size || '10';\n      const minDocCount = parseInt(bucketAgg.settings?.min_doc_count || '0', 10);\n      const orderBy = bucketAgg.settings?.orderBy || '_term';\n      let description = '';\n\n      if (size !== '0') {\n        const orderLabel = orderOptions.find(hasValue(order))?.label!;\n        description = `${orderLabel} ${size}, `;\n      }\n\n      if (minDocCount > 0) {\n        description += `Min Doc Count: ${minDocCount}, `;\n      }\n\n      description += 'Order by: ';\n      const orderByOption = orderByOptions.find(hasValue(orderBy));\n      if (orderByOption) {\n        description += orderByOption.label;\n      } else {\n        const metric = metrics?.find((m) => m.id === convertOrderByToMetricId(orderBy));\n        if (metric) {\n          description += describeMetric(metric);\n        } else {\n          description += 'metric not found';\n        }\n      }\n\n      if (size === '0') {\n        description += ` (${order})`;\n      }\n      return description;\n    }\n\n    case 'histogram': {\n      const interval = bucketAgg.settings?.interval || 1000;\n      const minDocCount = bucketAgg.settings?.min_doc_count || 1;\n\n      return `Interval: ${interval}${minDocCount > 0 ? `, Min Doc Count: ${minDocCount}` : ''}`;\n    }\n\n    case 'filters': {\n      const filters = bucketAgg.settings?.filters || bucketAggregationConfig['filters'].defaultSettings?.filters;\n      return `Filter Queries (${filters!.length})`;\n    }\n\n    case 'geohash_grid': {\n      const precision = Math.max(Math.min(parseInt(bucketAgg.settings?.precision || '5', 10), 12), 1);\n      return `Precision: ${precision}`;\n    }\n\n    case 'date_histogram': {\n      const interval = bucketAgg.settings?.interval || 'auto';\n      const minDocCount = bucketAgg.settings?.min_doc_count || 0;\n      const trimEdges = bucketAgg.settings?.trimEdges || 0;\n\n      let description = `Interval: ${interval}`;\n\n      if (minDocCount > 0) {\n        description += `, Min Doc Count: ${minDocCount}`;\n      }\n\n      if (trimEdges > 0) {\n        description += `, Trim edges: ${trimEdges}`;\n      }\n\n      return description;\n    }\n\n    default:\n      return 'Settings';\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}