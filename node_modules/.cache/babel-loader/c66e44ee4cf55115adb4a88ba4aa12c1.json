{"ast":null,"code":"//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// NOTE: This file will be auto generated from models.cue\n// It is currenty hand written but will serve as the target for cuetsy\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nimport { TableCellDisplayMode } from '@grafana/ui';\n// Only the latest schema version is translated to TypeScript, on the premise\n// that either the dashboard loading process, or (eventually) CUE-defined\n// migrations ensure that bulk of the frontend application only ever\n// need directly consider the most recent version of the schema.\nexport const modelVersion = Object.freeze([1, 0]);\nexport const defaultPanelOptions = {\n  frameIndex: 0,\n  showHeader: true,\n  showTypeIcons: false,\n  footer: {\n    show: false,\n    reducer: []\n  }\n};\nexport const defaultPanelFieldConfig = {\n  displayMode: TableCellDisplayMode.Auto,\n  align: 'auto',\n  inspect: false\n};","map":{"version":3,"names":["TableCellDisplayMode","modelVersion","Object","freeze","defaultPanelOptions","frameIndex","showHeader","showTypeIcons","footer","show","reducer","defaultPanelFieldConfig","displayMode","Auto","align","inspect"],"sources":["/home/soula/grafana/public/app/plugins/panel/table/models.gen.ts"],"sourcesContent":["//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// NOTE: This file will be auto generated from models.cue\n// It is currenty hand written but will serve as the target for cuetsy\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { TableCellDisplayMode, TableSortByFieldState } from '@grafana/ui';\nimport { TableFieldOptions } from '@grafana/schema';\n\n// Only the latest schema version is translated to TypeScript, on the premise\n// that either the dashboard loading process, or (eventually) CUE-defined\n// migrations ensure that bulk of the frontend application only ever\n// need directly consider the most recent version of the schema.\nexport const modelVersion = Object.freeze([1, 0]);\n\nexport interface PanelOptions {\n  frameIndex: number;\n  showHeader: boolean;\n  showTypeIcons?: boolean;\n  sortBy?: TableSortByFieldState[];\n  footer?: TableFooterCalc; // TODO: should be array (options builder is limited)\n}\n\nexport interface TableFooterCalc {\n  show: boolean;\n  reducer: string[]; // actually 1 value\n  fields?: string[];\n  enablePagination?: boolean;\n}\n\nexport const defaultPanelOptions: PanelOptions = {\n  frameIndex: 0,\n  showHeader: true,\n  showTypeIcons: false,\n  footer: {\n    show: false,\n    reducer: [],\n  },\n};\n\nexport const defaultPanelFieldConfig: TableFieldOptions = {\n  displayMode: TableCellDisplayMode.Auto,\n  align: 'auto',\n  inspect: false,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,oBAAT,QAA4D,aAA5D;AAGA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,CAAC,CAAD,EAAI,CAAJ,CAAd,CAArB;AAiBP,OAAO,MAAMC,mBAAiC,GAAG;EAC/CC,UAAU,EAAE,CADmC;EAE/CC,UAAU,EAAE,IAFmC;EAG/CC,aAAa,EAAE,KAHgC;EAI/CC,MAAM,EAAE;IACNC,IAAI,EAAE,KADA;IAENC,OAAO,EAAE;EAFH;AAJuC,CAA1C;AAUP,OAAO,MAAMC,uBAA0C,GAAG;EACxDC,WAAW,EAAEZ,oBAAoB,CAACa,IADsB;EAExDC,KAAK,EAAE,MAFiD;EAGxDC,OAAO,EAAE;AAH+C,CAAnD"},"metadata":{},"sourceType":"module"}