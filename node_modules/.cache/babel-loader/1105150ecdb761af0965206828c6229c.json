{"ast":null,"code":"import { debounce } from 'lodash';\nimport { useCallback, useReducer } from 'react';\nimport { locationService } from '@grafana/runtime';\nimport { SEARCH_SELECTED_LAYOUT } from '../constants';\nimport { ADD_TAG, CLEAR_FILTERS, LAYOUT_CHANGE, QUERY_CHANGE, SET_TAGS, TOGGLE_SORT, TOGGLE_STARRED, DATASOURCE_CHANGE } from '../reducers/actionTypes';\nimport { defaultQuery, defaultQueryParams, queryReducer } from '../reducers/searchQueryReducer';\nimport { SearchLayout } from '../types';\nimport { hasFilters, parseRouteParams } from '../utils';\nconst updateLocation = debounce(query => locationService.partial(query), 300);\nexport const useSearchQuery = defaults => {\n  var _queryParams$layout;\n\n  const queryParams = parseRouteParams(locationService.getSearchObject());\n  const initialState = Object.assign({}, defaultQuery, defaults, queryParams);\n  const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT);\n\n  if (!((_queryParams$layout = queryParams.layout) !== null && _queryParams$layout !== void 0 && _queryParams$layout.length) && selectedLayout !== null && selectedLayout !== void 0 && selectedLayout.length) {\n    initialState.layout = selectedLayout;\n  }\n\n  const [query, dispatch] = useReducer(queryReducer, initialState);\n  const onQueryChange = useCallback(query => {\n    dispatch({\n      type: QUERY_CHANGE,\n      payload: query\n    });\n    updateLocation({\n      query\n    });\n  }, []);\n  const onTagFilterChange = useCallback(tags => {\n    dispatch({\n      type: SET_TAGS,\n      payload: tags\n    });\n    updateLocation({\n      tag: tags\n    });\n  }, []);\n  const onDatasourceChange = useCallback(datasource => {\n    dispatch({\n      type: DATASOURCE_CHANGE,\n      payload: datasource\n    });\n    updateLocation({\n      datasource\n    });\n  }, []);\n  const onTagAdd = useCallback(tag => {\n    dispatch({\n      type: ADD_TAG,\n      payload: tag\n    });\n    updateLocation({\n      tag: [...query.tag, tag]\n    });\n  }, [query.tag]);\n  const onClearFilters = useCallback(() => {\n    dispatch({\n      type: CLEAR_FILTERS\n    });\n    updateLocation(defaultQueryParams);\n  }, []);\n  const onStarredFilterChange = useCallback(e => {\n    const starred = e.target.checked;\n    dispatch({\n      type: TOGGLE_STARRED,\n      payload: starred\n    });\n    updateLocation({\n      starred: starred || null\n    });\n  }, []);\n  const onSortChange = useCallback(sort => {\n    dispatch({\n      type: TOGGLE_SORT,\n      payload: sort\n    });\n    updateLocation({\n      sort: sort === null || sort === void 0 ? void 0 : sort.value,\n      layout: SearchLayout.List\n    });\n  }, []);\n  const onLayoutChange = useCallback(layout => {\n    dispatch({\n      type: LAYOUT_CHANGE,\n      payload: layout\n    });\n\n    if (layout === SearchLayout.Folders) {\n      updateLocation({\n        layout,\n        sort: null\n      });\n      return;\n    }\n\n    updateLocation({\n      layout\n    });\n  }, []);\n  return {\n    query,\n    hasFilters: hasFilters(query),\n    onQueryChange,\n    onClearFilters,\n    onTagFilterChange,\n    onStarredFilterChange,\n    onTagAdd,\n    onSortChange,\n    onLayoutChange,\n    onDatasourceChange\n  };\n};","map":{"version":3,"names":["debounce","useCallback","useReducer","locationService","SEARCH_SELECTED_LAYOUT","ADD_TAG","CLEAR_FILTERS","LAYOUT_CHANGE","QUERY_CHANGE","SET_TAGS","TOGGLE_SORT","TOGGLE_STARRED","DATASOURCE_CHANGE","defaultQuery","defaultQueryParams","queryReducer","SearchLayout","hasFilters","parseRouteParams","updateLocation","query","partial","useSearchQuery","defaults","queryParams","getSearchObject","initialState","selectedLayout","localStorage","getItem","layout","length","dispatch","onQueryChange","type","payload","onTagFilterChange","tags","tag","onDatasourceChange","datasource","onTagAdd","onClearFilters","onStarredFilterChange","e","starred","target","checked","onSortChange","sort","value","List","onLayoutChange","Folders"],"sources":["/home/soula/grafana/public/app/features/search/hooks/useSearchQuery.ts"],"sourcesContent":["import { debounce } from 'lodash';\nimport { FormEvent, useCallback, useReducer } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { SEARCH_SELECTED_LAYOUT } from '../constants';\nimport {\n  ADD_TAG,\n  CLEAR_FILTERS,\n  LAYOUT_CHANGE,\n  QUERY_CHANGE,\n  SET_TAGS,\n  TOGGLE_SORT,\n  TOGGLE_STARRED,\n  DATASOURCE_CHANGE,\n} from '../reducers/actionTypes';\nimport { defaultQuery, defaultQueryParams, queryReducer } from '../reducers/searchQueryReducer';\nimport { DashboardQuery, SearchLayout } from '../types';\nimport { hasFilters, parseRouteParams } from '../utils';\n\nconst updateLocation = debounce((query) => locationService.partial(query), 300);\n\nexport const useSearchQuery = (defaults: Partial<DashboardQuery>) => {\n  const queryParams = parseRouteParams(locationService.getSearchObject());\n  const initialState = { ...defaultQuery, ...defaults, ...queryParams };\n  const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT) as SearchLayout;\n  if (!queryParams.layout?.length && selectedLayout?.length) {\n    initialState.layout = selectedLayout;\n  }\n  const [query, dispatch] = useReducer(queryReducer, initialState);\n\n  const onQueryChange = useCallback((query: string) => {\n    dispatch({ type: QUERY_CHANGE, payload: query });\n    updateLocation({ query });\n  }, []);\n\n  const onTagFilterChange = useCallback((tags: string[]) => {\n    dispatch({ type: SET_TAGS, payload: tags });\n    updateLocation({ tag: tags });\n  }, []);\n\n  const onDatasourceChange = useCallback((datasource?: string) => {\n    dispatch({ type: DATASOURCE_CHANGE, payload: datasource });\n    updateLocation({ datasource });\n  }, []);\n\n  const onTagAdd = useCallback(\n    (tag: string) => {\n      dispatch({ type: ADD_TAG, payload: tag });\n      updateLocation({ tag: [...query.tag, tag] });\n    },\n    [query.tag]\n  );\n\n  const onClearFilters = useCallback(() => {\n    dispatch({ type: CLEAR_FILTERS });\n    updateLocation(defaultQueryParams);\n  }, []);\n\n  const onStarredFilterChange = useCallback((e: FormEvent<HTMLInputElement>) => {\n    const starred = (e.target as HTMLInputElement).checked;\n    dispatch({ type: TOGGLE_STARRED, payload: starred });\n    updateLocation({ starred: starred || null });\n  }, []);\n\n  const onSortChange = useCallback((sort: SelectableValue | null) => {\n    dispatch({ type: TOGGLE_SORT, payload: sort });\n    updateLocation({ sort: sort?.value, layout: SearchLayout.List });\n  }, []);\n\n  const onLayoutChange = useCallback((layout: SearchLayout) => {\n    dispatch({ type: LAYOUT_CHANGE, payload: layout });\n    if (layout === SearchLayout.Folders) {\n      updateLocation({ layout, sort: null });\n      return;\n    }\n    updateLocation({ layout });\n  }, []);\n\n  return {\n    query,\n    hasFilters: hasFilters(query),\n    onQueryChange,\n    onClearFilters,\n    onTagFilterChange,\n    onStarredFilterChange,\n    onTagAdd,\n    onSortChange,\n    onLayoutChange,\n    onDatasourceChange,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}