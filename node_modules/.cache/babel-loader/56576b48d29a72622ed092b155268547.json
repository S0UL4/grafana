{"ast":null,"code":"var _InlineFormLabel;\n\nconst _excluded = [\"instant\", \"range\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// Libraries\nimport { css, cx } from '@emotion/css';\nimport { map } from 'lodash';\nimport React, { memo } from 'react'; // Types\n\nimport { config } from '@grafana/runtime';\nimport { InlineFormLabel, RadioButtonGroup, InlineField, Input, Select } from '@grafana/ui';\nimport { LokiQueryType } from '../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const queryTypeOptions = [{\n  value: LokiQueryType.Range,\n  label: 'Range',\n  description: 'Run query over a range of time.'\n}, {\n  value: LokiQueryType.Instant,\n  label: 'Instant',\n  description: 'Run query against a single point in time. For this query, the \"To\" time is used.'\n}];\n\nif (config.featureToggles.lokiLive) {\n  queryTypeOptions.push({\n    value: LokiQueryType.Stream,\n    label: 'Stream',\n    description: 'Run a query and keep sending results on an interval'\n  });\n}\n\nexport const DEFAULT_RESOLUTION = {\n  value: 1,\n  label: '1/1'\n};\nexport const RESOLUTION_OPTIONS = [DEFAULT_RESOLUTION].concat(map([2, 3, 4, 5, 10], value => ({\n  value,\n  label: '1/' + value\n})));\nexport function LokiOptionFields(props) {\n  var _props$query, _query$queryType;\n\n  const {\n    lineLimitValue,\n    resolution,\n    onRunQuery,\n    runOnBlur,\n    onChange\n  } = props;\n  const query = (_props$query = props.query) !== null && _props$query !== void 0 ? _props$query : {};\n  let queryType = (_query$queryType = query.queryType) !== null && _query$queryType !== void 0 ? _query$queryType : query.instant ? LokiQueryType.Instant : LokiQueryType.Range;\n\n  function onChangeQueryLimit(value) {\n    const nextQuery = Object.assign({}, query, {\n      maxLines: preprocessMaxLines(value)\n    });\n    onChange(nextQuery);\n  }\n\n  function onQueryTypeChange(queryType) {\n    const rest = _objectWithoutPropertiesLoose(query, _excluded);\n\n    onChange(Object.assign({}, rest, {\n      queryType\n    }));\n  }\n\n  function onMaxLinesChange(e) {\n    if (query.maxLines !== preprocessMaxLines(e.currentTarget.value)) {\n      onChangeQueryLimit(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e) {\n    if (e.key === 'Enter') {\n      onRunQuery();\n    }\n  }\n\n  function onResolutionChange(option) {\n    const nextQuery = Object.assign({}, query, {\n      resolution: option.value\n    });\n    onChange(nextQuery);\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    \"aria-label\": \"Loki extra field\",\n    className: \"gf-form-inline\",\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      \"data-testid\": \"queryTypeField\",\n      className: cx('gf-form explore-input-margin', css`\n            flex-wrap: nowrap;\n          `),\n      \"aria-label\": \"Query type field\",\n      children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/_jsx(InlineFormLabel, {\n        width: \"auto\",\n        children: \"Query type\"\n      })), /*#__PURE__*/_jsx(RadioButtonGroup, {\n        options: queryTypeOptions,\n        value: queryType,\n        onChange: type => {\n          onQueryTypeChange(type);\n\n          if (runOnBlur) {\n            onRunQuery();\n          }\n        }\n      })]\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      \"data-testid\": \"lineLimitField\",\n      className: cx('gf-form', css`\n            flex-wrap: nowrap;\n          `),\n      \"aria-label\": \"Line limit field\",\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        label: \"Line limit\",\n        tooltip: 'Upper limit for number of log lines returned by query.',\n        children: /*#__PURE__*/_jsx(Input, {\n          className: \"width-4\",\n          placeholder: \"auto\",\n          type: \"number\",\n          min: 0,\n          onChange: onMaxLinesChange,\n          onKeyDown: onReturnKeyDown,\n          value: lineLimitValue,\n          onBlur: () => {\n            if (runOnBlur) {\n              onRunQuery();\n            }\n          }\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Resolution\",\n        tooltip: 'Resolution 1/1 sets step parameter of Loki metrics range queries such that each pixel corresponds to one data point. For better performance, lower resolutions can be picked. 1/2 only retrieves a data point for every other pixel, and 1/10 retrieves one data point per 10 pixels.',\n        children: /*#__PURE__*/_jsx(Select, {\n          isSearchable: false,\n          onChange: onResolutionChange,\n          options: RESOLUTION_OPTIONS,\n          value: resolution,\n          \"aria-label\": \"Select resolution\"\n        })\n      })]\n    })]\n  });\n}\nexport default /*#__PURE__*/memo(LokiOptionFields);\nexport function preprocessMaxLines(value) {\n  if (value.length === 0) {\n    // empty input - falls back to dataSource.maxLines limit\n    return NaN;\n  } else if (value.length > 0 && (isNaN(+value) || +value < 0)) {\n    // input with at least 1 character and that is either incorrect (value in the input field is not a number) or negative\n    // falls back to the limit of 0 lines\n    return 0;\n  } else {\n    // default case - correct input\n    return +value;\n  }\n}","map":{"version":3,"names":["css","cx","map","React","memo","config","InlineFormLabel","RadioButtonGroup","InlineField","Input","Select","LokiQueryType","queryTypeOptions","value","Range","label","description","Instant","featureToggles","lokiLive","push","Stream","DEFAULT_RESOLUTION","RESOLUTION_OPTIONS","concat","LokiOptionFields","props","lineLimitValue","resolution","onRunQuery","runOnBlur","onChange","query","queryType","instant","onChangeQueryLimit","nextQuery","maxLines","preprocessMaxLines","onQueryTypeChange","rest","onMaxLinesChange","e","currentTarget","onReturnKeyDown","key","onResolutionChange","option","type","length","NaN","isNaN"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/components/LokiOptionFields.tsx"],"sourcesContent":["// Libraries\nimport { css, cx } from '@emotion/css';\nimport { map } from 'lodash';\nimport React, { memo } from 'react';\n\n// Types\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { InlineFormLabel, RadioButtonGroup, InlineField, Input, Select } from '@grafana/ui';\n\nimport { LokiQuery, LokiQueryType } from '../types';\n\nexport interface LokiOptionFieldsProps {\n  lineLimitValue: string;\n  resolution: number;\n  query: LokiQuery;\n  onChange: (value: LokiQuery) => void;\n  onRunQuery: () => void;\n  runOnBlur?: boolean;\n}\n\nexport const queryTypeOptions: Array<SelectableValue<LokiQueryType>> = [\n  { value: LokiQueryType.Range, label: 'Range', description: 'Run query over a range of time.' },\n  {\n    value: LokiQueryType.Instant,\n    label: 'Instant',\n    description: 'Run query against a single point in time. For this query, the \"To\" time is used.',\n  },\n];\n\nif (config.featureToggles.lokiLive) {\n  queryTypeOptions.push({\n    value: LokiQueryType.Stream,\n    label: 'Stream',\n    description: 'Run a query and keep sending results on an interval',\n  });\n}\n\nexport const DEFAULT_RESOLUTION: SelectableValue<number> = {\n  value: 1,\n  label: '1/1',\n};\n\nexport const RESOLUTION_OPTIONS: Array<SelectableValue<number>> = [DEFAULT_RESOLUTION].concat(\n  map([2, 3, 4, 5, 10], (value: number) => ({\n    value,\n    label: '1/' + value,\n  }))\n);\n\nexport function LokiOptionFields(props: LokiOptionFieldsProps) {\n  const { lineLimitValue, resolution, onRunQuery, runOnBlur, onChange } = props;\n  const query = props.query ?? {};\n  let queryType = query.queryType ?? (query.instant ? LokiQueryType.Instant : LokiQueryType.Range);\n\n  function onChangeQueryLimit(value: string) {\n    const nextQuery = { ...query, maxLines: preprocessMaxLines(value) };\n    onChange(nextQuery);\n  }\n\n  function onQueryTypeChange(queryType: LokiQueryType) {\n    const { instant, range, ...rest } = query;\n    onChange({ ...rest, queryType });\n  }\n\n  function onMaxLinesChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    if (query.maxLines !== preprocessMaxLines(e.currentTarget.value)) {\n      onChangeQueryLimit(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter') {\n      onRunQuery();\n    }\n  }\n\n  function onResolutionChange(option: SelectableValue<number>) {\n    const nextQuery = { ...query, resolution: option.value };\n    onChange(nextQuery);\n  }\n\n  return (\n    <div aria-label=\"Loki extra field\" className=\"gf-form-inline\">\n      {/*Query type field*/}\n      <div\n        data-testid=\"queryTypeField\"\n        className={cx(\n          'gf-form explore-input-margin',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Query type field\"\n      >\n        <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n        <RadioButtonGroup\n          options={queryTypeOptions}\n          value={queryType}\n          onChange={(type: LokiQueryType) => {\n            onQueryTypeChange(type);\n            if (runOnBlur) {\n              onRunQuery();\n            }\n          }}\n        />\n      </div>\n      {/*Line limit field*/}\n      <div\n        data-testid=\"lineLimitField\"\n        className={cx(\n          'gf-form',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Line limit field\"\n      >\n        <InlineField label=\"Line limit\" tooltip={'Upper limit for number of log lines returned by query.'}>\n          <Input\n            className=\"width-4\"\n            placeholder=\"auto\"\n            type=\"number\"\n            min={0}\n            onChange={onMaxLinesChange}\n            onKeyDown={onReturnKeyDown}\n            value={lineLimitValue}\n            onBlur={() => {\n              if (runOnBlur) {\n                onRunQuery();\n              }\n            }}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Resolution\"\n          tooltip={\n            'Resolution 1/1 sets step parameter of Loki metrics range queries such that each pixel corresponds to one data point. For better performance, lower resolutions can be picked. 1/2 only retrieves a data point for every other pixel, and 1/10 retrieves one data point per 10 pixels.'\n          }\n        >\n          <Select\n            isSearchable={false}\n            onChange={onResolutionChange}\n            options={RESOLUTION_OPTIONS}\n            value={resolution}\n            aria-label=\"Select resolution\"\n          />\n        </InlineField>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(LokiOptionFields);\n\nexport function preprocessMaxLines(value: string): number {\n  if (value.length === 0) {\n    // empty input - falls back to dataSource.maxLines limit\n    return NaN;\n  } else if (value.length > 0 && (isNaN(+value) || +value < 0)) {\n    // input with at least 1 character and that is either incorrect (value in the input field is not a number) or negative\n    // falls back to the limit of 0 lines\n    return 0;\n  } else {\n    // default case - correct input\n    return +value;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}