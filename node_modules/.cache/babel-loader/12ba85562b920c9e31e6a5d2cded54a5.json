{"ast":null,"code":"var _InlineFormLabel;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { InlineFormLabel, TextArea } from '@grafana/ui';\nimport { FluxQueryEditor } from './FluxQueryEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default class VariableQueryEditor extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onRefresh\", () => {// noop\n    });\n  }\n\n  render() {\n    let {\n      query,\n      datasource,\n      onChange\n    } = this.props;\n\n    if (datasource.isFlux) {\n      return /*#__PURE__*/_jsx(FluxQueryEditor, {\n        datasource: datasource,\n        query: {\n          refId: 'A',\n          query\n        },\n        onRunQuery: this.onRefresh,\n        onChange: v => onChange(v.query)\n      });\n    }\n\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"gf-form-inline\",\n      children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/_jsx(InlineFormLabel, {\n        width: 10,\n        children: \"Query\"\n      })), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline gf-form--grow\",\n        children: /*#__PURE__*/_jsx(TextArea, {\n          defaultValue: query || '',\n          placeholder: \"metric name or tags query\",\n          rows: 1,\n          className: \"gf-form-input\",\n          onBlur: e => onChange(e.currentTarget.value)\n        })\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","InlineFormLabel","TextArea","FluxQueryEditor","VariableQueryEditor","render","query","datasource","onChange","props","isFlux","refId","onRefresh","v","e","currentTarget","value"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/components/VariableQueryEditor.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { InlineFormLabel, TextArea } from '@grafana/ui';\n\nimport InfluxDatasource from '../datasource';\n\nimport { FluxQueryEditor } from './FluxQueryEditor';\n\ninterface Props {\n  query: string; // before flux, it was always a string\n  onChange: (query?: string) => void;\n  datasource: InfluxDatasource;\n}\n\nexport default class VariableQueryEditor extends PureComponent<Props> {\n  onRefresh = () => {\n    // noop\n  };\n\n  render() {\n    let { query, datasource, onChange } = this.props;\n    if (datasource.isFlux) {\n      return (\n        <FluxQueryEditor\n          datasource={datasource}\n          query={{\n            refId: 'A',\n            query,\n          }}\n          onRunQuery={this.onRefresh}\n          onChange={(v) => onChange(v.query)}\n        />\n      );\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <InlineFormLabel width={10}>Query</InlineFormLabel>\n        <div className=\"gf-form-inline gf-form--grow\">\n          <TextArea\n            defaultValue={query || ''}\n            placeholder=\"metric name or tags query\"\n            rows={1}\n            className=\"gf-form-input\"\n            onBlur={(e) => onChange(e.currentTarget.value)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAEA,SAASC,eAAT,EAA0BC,QAA1B,QAA0C,aAA1C;AAIA,SAASC,eAAT,QAAgC,mBAAhC;;;AAQA,eAAe,MAAMC,mBAAN,SAAkCJ,aAAlC,CAAuD;EAAA;IAAA;;IAAA,mCACxD,MAAM,CAChB;IACD,CAHmE;EAAA;;EAKpEK,MAAM,GAAG;IACP,IAAI;MAAEC,KAAF;MAASC,UAAT;MAAqBC;IAArB,IAAkC,KAAKC,KAA3C;;IACA,IAAIF,UAAU,CAACG,MAAf,EAAuB;MACrB,oBACE,KAAC,eAAD;QACE,UAAU,EAAEH,UADd;QAEE,KAAK,EAAE;UACLI,KAAK,EAAE,GADF;UAELL;QAFK,CAFT;QAME,UAAU,EAAE,KAAKM,SANnB;QAOE,QAAQ,EAAGC,CAAD,IAAOL,QAAQ,CAACK,CAAC,CAACP,KAAH;MAP3B,EADF;IAWD;;IAED,oBACE;MAAK,SAAS,EAAC,gBAAf;MAAA,gEACE,KAAC,eAAD;QAAiB,KAAK,EAAE,EAAxB;QAAA;MAAA,EADF,gBAEE;QAAK,SAAS,EAAC,8BAAf;QAAA,uBACE,KAAC,QAAD;UACE,YAAY,EAAEA,KAAK,IAAI,EADzB;UAEE,WAAW,EAAC,2BAFd;UAGE,IAAI,EAAE,CAHR;UAIE,SAAS,EAAC,eAJZ;UAKE,MAAM,EAAGQ,CAAD,IAAON,QAAQ,CAACM,CAAC,CAACC,aAAF,CAAgBC,KAAjB;QALzB;MADF,EAFF;IAAA,EADF;EAcD;;AAnCmE"},"metadata":{},"sourceType":"module"}