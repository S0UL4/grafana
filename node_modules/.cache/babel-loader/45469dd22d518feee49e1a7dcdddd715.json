{"ast":null,"code":"import { getBackendSrv, locationService } from '@grafana/runtime';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { serviceAccountFetchBegin, serviceAccountFetchEnd, serviceAccountLoaded, serviceAccountTokensLoaded } from './reducers';\nconst BASE_URL = `/api/serviceaccounts`;\nexport function loadServiceAccount(saID) {\n  return async dispatch => {\n    dispatch(serviceAccountFetchBegin());\n\n    try {\n      const response = await getBackendSrv().get(`${BASE_URL}/${saID}`, accessControlQueryParam());\n      dispatch(serviceAccountLoaded(response));\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountFetchEnd());\n    }\n  };\n}\nexport function updateServiceAccount(serviceAccount) {\n  return async dispatch => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, Object.assign({}, serviceAccount));\n    dispatch(loadServiceAccount(serviceAccount.id));\n  };\n}\nexport function deleteServiceAccount(serviceAccountId) {\n  return async () => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    locationService.push('/org/serviceaccounts');\n  };\n}\nexport function createServiceAccountToken(saID, token, onTokenCreated) {\n  return async dispatch => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(loadServiceAccountTokens(saID));\n  };\n}\nexport function deleteServiceAccountToken(saID, id) {\n  return async dispatch => {\n    await getBackendSrv().delete(`${BASE_URL}/${saID}/tokens/${id}`);\n    dispatch(loadServiceAccountTokens(saID));\n  };\n}\nexport function loadServiceAccountTokens(saID) {\n  return async dispatch => {\n    try {\n      const response = await getBackendSrv().get(`${BASE_URL}/${saID}/tokens`);\n      dispatch(serviceAccountTokensLoaded(response));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}","map":{"version":3,"names":["getBackendSrv","locationService","accessControlQueryParam","serviceAccountFetchBegin","serviceAccountFetchEnd","serviceAccountLoaded","serviceAccountTokensLoaded","BASE_URL","loadServiceAccount","saID","dispatch","response","get","error","console","updateServiceAccount","serviceAccount","patch","id","deleteServiceAccount","serviceAccountId","delete","push","createServiceAccountToken","token","onTokenCreated","result","post","key","loadServiceAccountTokens","deleteServiceAccountToken"],"sources":["/home/soula/grafana/public/app/features/serviceaccounts/state/actionsServiceAccountPage.ts"],"sourcesContent":["import { getBackendSrv, locationService } from '@grafana/runtime';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { ServiceAccountDTO, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\n\nimport {\n  serviceAccountFetchBegin,\n  serviceAccountFetchEnd,\n  serviceAccountLoaded,\n  serviceAccountTokensLoaded,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function loadServiceAccount(saID: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(serviceAccountFetchBegin());\n    try {\n      const response = await getBackendSrv().get(`${BASE_URL}/${saID}`, accessControlQueryParam());\n      dispatch(serviceAccountLoaded(response));\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountFetchEnd());\n    }\n  };\n}\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(loadServiceAccount(serviceAccount.id));\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async () => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    locationService.push('/org/serviceaccounts');\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(loadServiceAccountTokens(saID));\n  };\n}\n\nexport function deleteServiceAccountToken(saID: number, id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${saID}/tokens/${id}`);\n    dispatch(loadServiceAccountTokens(saID));\n  };\n}\n\nexport function loadServiceAccountTokens(saID: number): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      const response = await getBackendSrv().get(`${BASE_URL}/${saID}/tokens`);\n      dispatch(serviceAccountTokensLoaded(response));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,eAAxB,QAA+C,kBAA/C;AACA,SAASC,uBAAT,QAAwC,8BAAxC;AAKA,SACEC,wBADF,EAEEC,sBAFF,EAGEC,oBAHF,EAIEC,0BAJF,QAKO,YALP;AAOA,MAAMC,QAAQ,GAAI,sBAAlB;AAEA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAA6D;EAClE,OAAO,MAAOC,QAAP,IAAoB;IACzBA,QAAQ,CAACP,wBAAwB,EAAzB,CAAR;;IACA,IAAI;MACF,MAAMQ,QAAQ,GAAG,MAAMX,aAAa,GAAGY,GAAhB,CAAqB,GAAEL,QAAS,IAAGE,IAAK,EAAxC,EAA2CP,uBAAuB,EAAlE,CAAvB;MACAQ,QAAQ,CAACL,oBAAoB,CAACM,QAAD,CAArB,CAAR;IACD,CAHD,CAGE,OAAOE,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;IACD,CALD,SAKU;MACRH,QAAQ,CAACN,sBAAsB,EAAvB,CAAR;IACD;EACF,CAVD;AAWD;AAED,OAAO,SAASW,oBAAT,CAA8BC,cAA9B,EAAoF;EACzF,OAAO,MAAON,QAAP,IAAoB;IACzB,MAAMV,aAAa,GAAGiB,KAAhB,CAAuB,GAAEV,QAAS,IAAGS,cAAc,CAACE,EAAG,qBAAvD,oBACDF,cADC,EAAN;IAGAN,QAAQ,CAACF,kBAAkB,CAACQ,cAAc,CAACE,EAAhB,CAAnB,CAAR;EACD,CALD;AAMD;AAED,OAAO,SAASC,oBAAT,CAA8BC,gBAA9B,EAA2E;EAChF,OAAO,YAAY;IACjB,MAAMpB,aAAa,GAAGqB,MAAhB,CAAwB,GAAEd,QAAS,IAAGa,gBAAiB,EAAvD,CAAN;IACAnB,eAAe,CAACqB,IAAhB,CAAqB,sBAArB;EACD,CAHD;AAID;AAED,OAAO,SAASC,yBAAT,CACLd,IADK,EAELe,KAFK,EAGLC,cAHK,EAIc;EACnB,OAAO,MAAOf,QAAP,IAAoB;IACzB,MAAMgB,MAAM,GAAG,MAAM1B,aAAa,GAAG2B,IAAhB,CAAsB,GAAEpB,QAAS,IAAGE,IAAK,SAAzC,EAAmDe,KAAnD,CAArB;IACAC,cAAc,CAACC,MAAM,CAACE,GAAR,CAAd;IACAlB,QAAQ,CAACmB,wBAAwB,CAACpB,IAAD,CAAzB,CAAR;EACD,CAJD;AAKD;AAED,OAAO,SAASqB,yBAAT,CAAmCrB,IAAnC,EAAiDS,EAAjD,EAAgF;EACrF,OAAO,MAAOR,QAAP,IAAoB;IACzB,MAAMV,aAAa,GAAGqB,MAAhB,CAAwB,GAAEd,QAAS,IAAGE,IAAK,WAAUS,EAAG,EAAxD,CAAN;IACAR,QAAQ,CAACmB,wBAAwB,CAACpB,IAAD,CAAzB,CAAR;EACD,CAHD;AAID;AAED,OAAO,SAASoB,wBAAT,CAAkCpB,IAAlC,EAAmE;EACxE,OAAO,MAAOC,QAAP,IAAoB;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,aAAa,GAAGY,GAAhB,CAAqB,GAAEL,QAAS,IAAGE,IAAK,SAAxC,CAAvB;MACAC,QAAQ,CAACJ,0BAA0B,CAACK,QAAD,CAA3B,CAAR;IACD,CAHD,CAGE,OAAOE,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;IACD;EACF,CAPD;AAQD"},"metadata":{},"sourceType":"module"}