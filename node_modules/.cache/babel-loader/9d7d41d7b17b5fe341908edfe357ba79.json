{"ast":null,"code":"import { ByNamesMatcherMode, FieldMatcherID, FieldType, getFieldDisplayName, isSystemOverrideWithRef } from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\nconst displayOverrideRef = 'hideSeriesFrom';\nconst isHideSeriesOverride = isSystemOverrideWithRef(displayOverrideRef);\nexport function seriesVisibilityConfigFactory(label, mode, fieldConfig, data) {\n  const {\n    overrides\n  } = fieldConfig;\n  const displayName = label;\n  const currentIndex = overrides.findIndex(isHideSeriesOverride);\n\n  if (currentIndex < 0) {\n    if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n      const override = createOverride([displayName]);\n      return Object.assign({}, fieldConfig, {\n        overrides: [...fieldConfig.overrides, override]\n      });\n    }\n\n    const displayNames = getDisplayNames(data, displayName);\n    const override = createOverride(displayNames);\n    return Object.assign({}, fieldConfig, {\n      overrides: [...fieldConfig.overrides, override]\n    });\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const [current] = overridesCopy.splice(currentIndex, 1);\n\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    const existing = getExistingDisplayNames(current);\n\n    if (existing[0] === displayName && existing.length === 1) {\n      return Object.assign({}, fieldConfig, {\n        overrides: overridesCopy\n      });\n    }\n\n    const override = createOverride([displayName]);\n    return Object.assign({}, fieldConfig, {\n      overrides: [...overridesCopy, override]\n    });\n  }\n\n  const override = createExtendedOverride(current, displayName);\n\n  if (allFieldsAreExcluded(override, data)) {\n    return Object.assign({}, fieldConfig, {\n      overrides: overridesCopy\n    });\n  }\n\n  return Object.assign({}, fieldConfig, {\n    overrides: [...overridesCopy, override]\n  });\n}\n\nfunction createOverride(names, mode = ByNamesMatcherMode.exclude, property) {\n  var _property;\n\n  property = (_property = property) !== null && _property !== void 0 ? _property : {\n    id: 'custom.hideFrom',\n    value: {\n      viz: true,\n      legend: false,\n      tooltip: false\n    }\n  };\n  return {\n    __systemRef: displayOverrideRef,\n    matcher: {\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: mode,\n        names: names,\n        prefix: mode === ByNamesMatcherMode.exclude ? 'All except:' : undefined,\n        readOnly: true\n      }\n    },\n    properties: [Object.assign({}, property, {\n      value: {\n        viz: true,\n        legend: false,\n        tooltip: false\n      }\n    })]\n  };\n}\n\nconst createExtendedOverride = (current, displayName, mode = ByNamesMatcherMode.exclude) => {\n  const property = current.properties.find(p => p.id === 'custom.hideFrom');\n  const existing = getExistingDisplayNames(current);\n  const index = existing.findIndex(name => name === displayName);\n\n  if (index < 0) {\n    existing.push(displayName);\n  } else {\n    existing.splice(index, 1);\n  }\n\n  return createOverride(existing, mode, property);\n};\n\nconst getExistingDisplayNames = rule => {\n  var _rule$matcher$options;\n\n  const names = (_rule$matcher$options = rule.matcher.options) === null || _rule$matcher$options === void 0 ? void 0 : _rule$matcher$options.names;\n\n  if (!Array.isArray(names)) {\n    return [];\n  }\n\n  return [...names];\n};\n\nconst allFieldsAreExcluded = (override, data) => {\n  return getExistingDisplayNames(override).length === getDisplayNames(data).length;\n};\n\nconst getDisplayNames = (data, excludeName) => {\n  const unique = new Set();\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type !== FieldType.number) {\n        continue;\n      }\n\n      const name = getFieldDisplayName(field, frame, data);\n\n      if (name === excludeName) {\n        continue;\n      }\n\n      unique.add(name);\n    }\n  }\n\n  return Array.from(unique);\n};","map":{"version":3,"names":["ByNamesMatcherMode","FieldMatcherID","FieldType","getFieldDisplayName","isSystemOverrideWithRef","SeriesVisibilityChangeMode","displayOverrideRef","isHideSeriesOverride","seriesVisibilityConfigFactory","label","mode","fieldConfig","data","overrides","displayName","currentIndex","findIndex","ToggleSelection","override","createOverride","displayNames","getDisplayNames","overridesCopy","Array","from","current","splice","existing","getExistingDisplayNames","length","createExtendedOverride","allFieldsAreExcluded","names","exclude","property","id","value","viz","legend","tooltip","__systemRef","matcher","byNames","options","prefix","undefined","readOnly","properties","find","p","index","name","push","rule","isArray","excludeName","unique","Set","frame","field","fields","type","number","add"],"sources":["/home/soula/grafana/public/app/features/dashboard/dashgrid/SeriesVisibilityConfigFactory.ts"],"sourcesContent":["import {\n  ByNamesMatcherMode,\n  DataFrame,\n  DynamicConfigValue,\n  FieldConfigSource,\n  FieldMatcherID,\n  FieldType,\n  getFieldDisplayName,\n  isSystemOverrideWithRef,\n  SystemConfigOverrideRule,\n} from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\n\nconst displayOverrideRef = 'hideSeriesFrom';\nconst isHideSeriesOverride = isSystemOverrideWithRef(displayOverrideRef);\n\nexport function seriesVisibilityConfigFactory(\n  label: string,\n  mode: SeriesVisibilityChangeMode,\n  fieldConfig: FieldConfigSource,\n  data: DataFrame[]\n) {\n  const { overrides } = fieldConfig;\n\n  const displayName = label;\n  const currentIndex = overrides.findIndex(isHideSeriesOverride);\n\n  if (currentIndex < 0) {\n    if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n      const override = createOverride([displayName]);\n\n      return {\n        ...fieldConfig,\n        overrides: [...fieldConfig.overrides, override],\n      };\n    }\n\n    const displayNames = getDisplayNames(data, displayName);\n    const override = createOverride(displayNames);\n\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, override],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const [current] = overridesCopy.splice(currentIndex, 1) as SystemConfigOverrideRule[];\n\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    const existing = getExistingDisplayNames(current);\n\n    if (existing[0] === displayName && existing.length === 1) {\n      return {\n        ...fieldConfig,\n        overrides: overridesCopy,\n      };\n    }\n\n    const override = createOverride([displayName]);\n\n    return {\n      ...fieldConfig,\n      overrides: [...overridesCopy, override],\n    };\n  }\n\n  const override = createExtendedOverride(current, displayName);\n\n  if (allFieldsAreExcluded(override, data)) {\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  return {\n    ...fieldConfig,\n    overrides: [...overridesCopy, override],\n  };\n}\n\nfunction createOverride(\n  names: string[],\n  mode = ByNamesMatcherMode.exclude,\n  property?: DynamicConfigValue\n): SystemConfigOverrideRule {\n  property = property ?? {\n    id: 'custom.hideFrom',\n    value: {\n      viz: true,\n      legend: false,\n      tooltip: false,\n    },\n  };\n\n  return {\n    __systemRef: displayOverrideRef,\n    matcher: {\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: mode,\n        names: names,\n        prefix: mode === ByNamesMatcherMode.exclude ? 'All except:' : undefined,\n        readOnly: true,\n      },\n    },\n    properties: [\n      {\n        ...property,\n        value: {\n          viz: true,\n          legend: false,\n          tooltip: false,\n        },\n      },\n    ],\n  };\n}\n\nconst createExtendedOverride = (\n  current: SystemConfigOverrideRule,\n  displayName: string,\n  mode = ByNamesMatcherMode.exclude\n): SystemConfigOverrideRule => {\n  const property = current.properties.find((p) => p.id === 'custom.hideFrom');\n  const existing = getExistingDisplayNames(current);\n  const index = existing.findIndex((name) => name === displayName);\n\n  if (index < 0) {\n    existing.push(displayName);\n  } else {\n    existing.splice(index, 1);\n  }\n\n  return createOverride(existing, mode, property);\n};\n\nconst getExistingDisplayNames = (rule: SystemConfigOverrideRule): string[] => {\n  const names = rule.matcher.options?.names;\n  if (!Array.isArray(names)) {\n    return [];\n  }\n  return [...names];\n};\n\nconst allFieldsAreExcluded = (override: SystemConfigOverrideRule, data: DataFrame[]): boolean => {\n  return getExistingDisplayNames(override).length === getDisplayNames(data).length;\n};\n\nconst getDisplayNames = (data: DataFrame[], excludeName?: string): string[] => {\n  const unique = new Set<string>();\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type !== FieldType.number) {\n        continue;\n      }\n\n      const name = getFieldDisplayName(field, frame, data);\n\n      if (name === excludeName) {\n        continue;\n      }\n\n      unique.add(name);\n    }\n  }\n\n  return Array.from(unique);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}