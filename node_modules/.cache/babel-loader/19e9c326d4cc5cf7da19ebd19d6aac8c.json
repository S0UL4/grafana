{"ast":null,"code":"import { hasQueryExportSupport, hasQueryImportSupport } from '@grafana/data';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nexport async function updateQueries(nextDS, nextDSUidOrVariableExpression, queries, currentDS) {\n  let nextQueries = queries;\n  const datasource = {\n    type: nextDS.type,\n    uid: nextDSUidOrVariableExpression\n  }; // we are changing data source type\n\n  if ((currentDS === null || currentDS === void 0 ? void 0 : currentDS.meta.id) !== nextDS.meta.id) {\n    // If changing to mixed do nothing\n    if (nextDS.meta.mixed) {\n      return queries;\n    } // when both data sources support abstract queries\n    else if (hasQueryExportSupport(currentDS) && hasQueryImportSupport(nextDS)) {\n      const abstractQueries = await currentDS.exportToAbstractQueries(queries);\n      nextQueries = await nextDS.importFromAbstractQueries(abstractQueries);\n    } // when datasource supports query import\n    else if (currentDS && nextDS.importQueries) {\n      nextQueries = await nextDS.importQueries(queries, currentDS);\n    } // Otherwise clear queries\n    else {\n      return [{\n        refId: 'A',\n        datasource\n      }];\n    }\n  }\n\n  if (nextQueries.length === 0) {\n    return [{\n      refId: 'A',\n      datasource\n    }];\n  } // Set data source on all queries except expression queries\n\n\n  return nextQueries.map(query => {\n    if (!isExpressionReference(query.datasource) && !nextDS.meta.mixed) {\n      query.datasource = datasource;\n    }\n\n    return query;\n  });\n}","map":{"version":3,"names":["hasQueryExportSupport","hasQueryImportSupport","isExpressionReference","updateQueries","nextDS","nextDSUidOrVariableExpression","queries","currentDS","nextQueries","datasource","type","uid","meta","id","mixed","abstractQueries","exportToAbstractQueries","importFromAbstractQueries","importQueries","refId","length","map","query"],"sources":["/home/soula/grafana/public/app/features/query/state/updateQueries.ts"],"sourcesContent":["import { DataQuery, DataSourceApi, hasQueryExportSupport, hasQueryImportSupport } from '@grafana/data';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\n\nexport async function updateQueries(\n  nextDS: DataSourceApi,\n  nextDSUidOrVariableExpression: string,\n  queries: DataQuery[],\n  currentDS?: DataSourceApi\n): Promise<DataQuery[]> {\n  let nextQueries = queries;\n  const datasource = { type: nextDS.type, uid: nextDSUidOrVariableExpression };\n\n  // we are changing data source type\n  if (currentDS?.meta.id !== nextDS.meta.id) {\n    // If changing to mixed do nothing\n    if (nextDS.meta.mixed) {\n      return queries;\n    }\n    // when both data sources support abstract queries\n    else if (hasQueryExportSupport(currentDS) && hasQueryImportSupport(nextDS)) {\n      const abstractQueries = await currentDS.exportToAbstractQueries(queries);\n      nextQueries = await nextDS.importFromAbstractQueries(abstractQueries);\n    }\n    // when datasource supports query import\n    else if (currentDS && nextDS.importQueries) {\n      nextQueries = await nextDS.importQueries(queries, currentDS);\n    }\n    // Otherwise clear queries\n    else {\n      return [{ refId: 'A', datasource }];\n    }\n  }\n\n  if (nextQueries.length === 0) {\n    return [{ refId: 'A', datasource }];\n  }\n\n  // Set data source on all queries except expression queries\n  return nextQueries.map((query) => {\n    if (!isExpressionReference(query.datasource) && !nextDS.meta.mixed) {\n      query.datasource = datasource;\n    }\n    return query;\n  });\n}\n"],"mappings":"AAAA,SAAmCA,qBAAnC,EAA0DC,qBAA1D,QAAuF,eAAvF;AACA,SAASC,qBAAT,QAAsC,kDAAtC;AAEA,OAAO,eAAeC,aAAf,CACLC,MADK,EAELC,6BAFK,EAGLC,OAHK,EAILC,SAJK,EAKiB;EACtB,IAAIC,WAAW,GAAGF,OAAlB;EACA,MAAMG,UAAU,GAAG;IAAEC,IAAI,EAAEN,MAAM,CAACM,IAAf;IAAqBC,GAAG,EAAEN;EAA1B,CAAnB,CAFsB,CAItB;;EACA,IAAI,CAAAE,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEK,IAAX,CAAgBC,EAAhB,MAAuBT,MAAM,CAACQ,IAAP,CAAYC,EAAvC,EAA2C;IACzC;IACA,IAAIT,MAAM,CAACQ,IAAP,CAAYE,KAAhB,EAAuB;MACrB,OAAOR,OAAP;IACD,CAFD,CAGA;IAHA,KAIK,IAAIN,qBAAqB,CAACO,SAAD,CAArB,IAAoCN,qBAAqB,CAACG,MAAD,CAA7D,EAAuE;MAC1E,MAAMW,eAAe,GAAG,MAAMR,SAAS,CAACS,uBAAV,CAAkCV,OAAlC,CAA9B;MACAE,WAAW,GAAG,MAAMJ,MAAM,CAACa,yBAAP,CAAiCF,eAAjC,CAApB;IACD,CAHI,CAIL;IAJK,KAKA,IAAIR,SAAS,IAAIH,MAAM,CAACc,aAAxB,EAAuC;MAC1CV,WAAW,GAAG,MAAMJ,MAAM,CAACc,aAAP,CAAqBZ,OAArB,EAA8BC,SAA9B,CAApB;IACD,CAFI,CAGL;IAHK,KAIA;MACH,OAAO,CAAC;QAAEY,KAAK,EAAE,GAAT;QAAcV;MAAd,CAAD,CAAP;IACD;EACF;;EAED,IAAID,WAAW,CAACY,MAAZ,KAAuB,CAA3B,EAA8B;IAC5B,OAAO,CAAC;MAAED,KAAK,EAAE,GAAT;MAAcV;IAAd,CAAD,CAAP;EACD,CA3BqB,CA6BtB;;;EACA,OAAOD,WAAW,CAACa,GAAZ,CAAiBC,KAAD,IAAW;IAChC,IAAI,CAACpB,qBAAqB,CAACoB,KAAK,CAACb,UAAP,CAAtB,IAA4C,CAACL,MAAM,CAACQ,IAAP,CAAYE,KAA7D,EAAoE;MAClEQ,KAAK,CAACb,UAAN,GAAmBA,UAAnB;IACD;;IACD,OAAOa,KAAP;EACD,CALM,CAAP;AAMD"},"metadata":{},"sourceType":"module"}