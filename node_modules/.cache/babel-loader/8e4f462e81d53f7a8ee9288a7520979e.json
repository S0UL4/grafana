{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { FixedSizeGrid } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\nimport { config } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport { SearchCard } from '../../components/SearchCard';\nimport { useSearchKeyboardNavigation } from '../../hooks/useSearchKeyboardSelection';\nimport { DashboardSearchItemType } from '../../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const SearchResultsGrid = ({\n  response,\n  width,\n  height,\n  selection,\n  selectionToggle,\n  onTagSelected,\n  keyboardEvents\n}) => {\n  var _response$totalRows;\n\n  const styles = useStyles2(getStyles); // Hacked to reuse existing SearchCard (and old DashboardSectionItem)\n\n  const itemProps = {\n    editable: selection != null,\n    onToggleChecked: item => {\n      const d = item;\n      const t = d.type === DashboardSearchItemType.DashFolder ? 'folder' : 'dashboard';\n\n      if (selectionToggle) {\n        selectionToggle(t, d.uid);\n      }\n    },\n    onTagSelected\n  };\n  const itemCount = (_response$totalRows = response.totalRows) !== null && _response$totalRows !== void 0 ? _response$totalRows : response.view.length;\n  const view = response.view;\n  const numColumns = Math.ceil(width / 320);\n  const cellWidth = width / numColumns;\n  const cellHeight = (cellWidth - 64) * 0.75 + 56 + 8;\n  const numRows = Math.ceil(itemCount / numColumns);\n  const highlightIndex = useSearchKeyboardNavigation(keyboardEvents, numColumns, response);\n  return /*#__PURE__*/_jsx(InfiniteLoader, {\n    isItemLoaded: response.isItemLoaded,\n    itemCount: itemCount,\n    loadMoreItems: response.loadMoreItems,\n    children: ({\n      onItemsRendered,\n      ref\n    }) => /*#__PURE__*/_jsx(FixedSizeGrid, {\n      ref: ref,\n      onItemsRendered: v => {\n        onItemsRendered({\n          visibleStartIndex: v.visibleRowStartIndex * numColumns,\n          visibleStopIndex: v.visibleRowStopIndex * numColumns,\n          overscanStartIndex: v.overscanRowStartIndex * numColumns,\n          overscanStopIndex: v.overscanColumnStopIndex * numColumns\n        });\n      },\n      columnCount: numColumns,\n      columnWidth: cellWidth,\n      rowCount: numRows,\n      rowHeight: cellHeight,\n      className: styles.wrapper,\n      innerElementType: \"ul\",\n      height: height,\n      width: width - 2,\n      children: ({\n        columnIndex,\n        rowIndex,\n        style\n      }) => {\n        var _item$kind, _item$tags;\n\n        const index = rowIndex * numColumns + columnIndex;\n\n        if (index >= view.length) {\n          return null;\n        }\n\n        const item = view.get(index);\n        const kind = (_item$kind = item.kind) !== null && _item$kind !== void 0 ? _item$kind : 'dashboard';\n        const facade = {\n          uid: item.uid,\n          title: item.name,\n          url: item.url,\n          uri: item.url,\n          type: kind === 'folder' ? DashboardSearchItemType.DashFolder : DashboardSearchItemType.DashDB,\n          id: 666,\n          // do not use me!\n          isStarred: false,\n          tags: (_item$tags = item.tags) !== null && _item$tags !== void 0 ? _item$tags : [],\n          checked: selection ? selection(kind, item.uid) : false\n        };\n\n        if (kind === 'panel') {\n          const type = item.panel_type;\n          facade.icon = 'public/img/icons/unicons/graph-bar.svg';\n\n          if (type) {\n            const info = config.panels[type];\n\n            if (info !== null && info !== void 0 && info.name) {\n              var _info$info;\n\n              const v = (_info$info = info.info) === null || _info$info === void 0 ? void 0 : _info$info.logos.small;\n\n              if (v && v.endsWith('.svg')) {\n                facade.icon = v;\n              }\n            }\n          }\n        }\n\n        let className = styles.virtualizedGridItemWrapper;\n\n        if (rowIndex === highlightIndex.y && columnIndex === highlightIndex.x) {\n          className += ' ' + styles.selectedItem;\n        } // The wrapper div is needed as the inner SearchItem has margin-bottom spacing\n        // And without this wrapper there is no room for that margin\n\n\n        return item ? /*#__PURE__*/_jsx(\"li\", {\n          style: style,\n          className: className,\n          children: /*#__PURE__*/_jsx(SearchCard, Object.assign({}, itemProps, {\n            item: facade\n          }), item.uid)\n        }) : null;\n      }\n    })\n  });\n};\n\nconst getStyles = theme => ({\n  virtualizedGridItemWrapper: css`\n    padding: 4px;\n  `,\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n\n    > ul {\n      list-style: none;\n    }\n  `,\n  selectedItem: css`\n    box-shadow: inset 1px 1px 3px 3px ${theme.colors.primary.border};\n  `\n});","map":{"version":3,"names":["css","React","FixedSizeGrid","InfiniteLoader","config","useStyles2","SearchCard","useSearchKeyboardNavigation","DashboardSearchItemType","SearchResultsGrid","response","width","height","selection","selectionToggle","onTagSelected","keyboardEvents","styles","getStyles","itemProps","editable","onToggleChecked","item","d","t","type","DashFolder","uid","itemCount","totalRows","view","length","numColumns","Math","ceil","cellWidth","cellHeight","numRows","highlightIndex","isItemLoaded","loadMoreItems","onItemsRendered","ref","v","visibleStartIndex","visibleRowStartIndex","visibleStopIndex","visibleRowStopIndex","overscanStartIndex","overscanRowStartIndex","overscanStopIndex","overscanColumnStopIndex","wrapper","columnIndex","rowIndex","style","index","get","kind","facade","title","name","url","uri","DashDB","id","isStarred","tags","checked","panel_type","icon","info","panels","logos","small","endsWith","className","virtualizedGridItemWrapper","y","x","selectedItem","theme","colors","primary","border"],"sources":["/home/soula/grafana/public/app/features/search/page/components/SearchResultsGrid.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\nimport { FixedSizeGrid } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { SearchCard } from '../../components/SearchCard';\nimport { useSearchKeyboardNavigation } from '../../hooks/useSearchKeyboardSelection';\nimport { DashboardSearchItemType, DashboardSectionItem } from '../../types';\n\nimport { SearchResultsProps } from './SearchResultsTable';\n\nexport const SearchResultsGrid = ({\n  response,\n  width,\n  height,\n  selection,\n  selectionToggle,\n  onTagSelected,\n  keyboardEvents,\n}: SearchResultsProps) => {\n  const styles = useStyles2(getStyles);\n\n  // Hacked to reuse existing SearchCard (and old DashboardSectionItem)\n  const itemProps = {\n    editable: selection != null,\n    onToggleChecked: (item: any) => {\n      const d = item as DashboardSectionItem;\n      const t = d.type === DashboardSearchItemType.DashFolder ? 'folder' : 'dashboard';\n      if (selectionToggle) {\n        selectionToggle(t, d.uid!);\n      }\n    },\n    onTagSelected,\n  };\n\n  const itemCount = response.totalRows ?? response.view.length;\n  const view = response.view;\n  const numColumns = Math.ceil(width / 320);\n  const cellWidth = width / numColumns;\n  const cellHeight = (cellWidth - 64) * 0.75 + 56 + 8;\n  const numRows = Math.ceil(itemCount / numColumns);\n  const highlightIndex = useSearchKeyboardNavigation(keyboardEvents, numColumns, response);\n\n  return (\n    <InfiniteLoader isItemLoaded={response.isItemLoaded} itemCount={itemCount} loadMoreItems={response.loadMoreItems}>\n      {({ onItemsRendered, ref }) => (\n        <FixedSizeGrid\n          ref={ref}\n          onItemsRendered={(v) => {\n            onItemsRendered({\n              visibleStartIndex: v.visibleRowStartIndex * numColumns,\n              visibleStopIndex: v.visibleRowStopIndex * numColumns,\n              overscanStartIndex: v.overscanRowStartIndex * numColumns,\n              overscanStopIndex: v.overscanColumnStopIndex * numColumns,\n            });\n          }}\n          columnCount={numColumns}\n          columnWidth={cellWidth}\n          rowCount={numRows}\n          rowHeight={cellHeight}\n          className={styles.wrapper}\n          innerElementType=\"ul\"\n          height={height}\n          width={width - 2}\n        >\n          {({ columnIndex, rowIndex, style }) => {\n            const index = rowIndex * numColumns + columnIndex;\n            if (index >= view.length) {\n              return null;\n            }\n            const item = view.get(index);\n            const kind = item.kind ?? 'dashboard';\n\n            const facade: DashboardSectionItem = {\n              uid: item.uid,\n              title: item.name,\n              url: item.url,\n              uri: item.url,\n              type: kind === 'folder' ? DashboardSearchItemType.DashFolder : DashboardSearchItemType.DashDB,\n              id: 666, // do not use me!\n              isStarred: false,\n              tags: item.tags ?? [],\n              checked: selection ? selection(kind, item.uid) : false,\n            };\n\n            if (kind === 'panel') {\n              const type = item.panel_type;\n              facade.icon = 'public/img/icons/unicons/graph-bar.svg';\n              if (type) {\n                const info = config.panels[type];\n                if (info?.name) {\n                  const v = info.info?.logos.small;\n                  if (v && v.endsWith('.svg')) {\n                    facade.icon = v;\n                  }\n                }\n              }\n            }\n\n            let className = styles.virtualizedGridItemWrapper;\n            if (rowIndex === highlightIndex.y && columnIndex === highlightIndex.x) {\n              className += ' ' + styles.selectedItem;\n            }\n\n            // The wrapper div is needed as the inner SearchItem has margin-bottom spacing\n            // And without this wrapper there is no room for that margin\n            return item ? (\n              <li style={style} className={className}>\n                <SearchCard key={item.uid} {...itemProps} item={facade} />\n              </li>\n            ) : null;\n          }}\n        </FixedSizeGrid>\n      )}\n    </InfiniteLoader>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  virtualizedGridItemWrapper: css`\n    padding: 4px;\n  `,\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n\n    > ul {\n      list-style: none;\n    }\n  `,\n  selectedItem: css`\n    box-shadow: inset 1px 1px 3px 3px ${theme.colors.primary.border};\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAGA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,2BAAT,QAA4C,wCAA5C;AACA,SAASC,uBAAT,QAA8D,aAA9D;;AAIA,OAAO,MAAMC,iBAAiB,GAAG,CAAC;EAChCC,QADgC;EAEhCC,KAFgC;EAGhCC,MAHgC;EAIhCC,SAJgC;EAKhCC,eALgC;EAMhCC,aANgC;EAOhCC;AAPgC,CAAD,KAQP;EAAA;;EACxB,MAAMC,MAAM,GAAGZ,UAAU,CAACa,SAAD,CAAzB,CADwB,CAGxB;;EACA,MAAMC,SAAS,GAAG;IAChBC,QAAQ,EAAEP,SAAS,IAAI,IADP;IAEhBQ,eAAe,EAAGC,IAAD,IAAe;MAC9B,MAAMC,CAAC,GAAGD,IAAV;MACA,MAAME,CAAC,GAAGD,CAAC,CAACE,IAAF,KAAWjB,uBAAuB,CAACkB,UAAnC,GAAgD,QAAhD,GAA2D,WAArE;;MACA,IAAIZ,eAAJ,EAAqB;QACnBA,eAAe,CAACU,CAAD,EAAID,CAAC,CAACI,GAAN,CAAf;MACD;IACF,CARe;IAShBZ;EATgB,CAAlB;EAYA,MAAMa,SAAS,0BAAGlB,QAAQ,CAACmB,SAAZ,qEAAyBnB,QAAQ,CAACoB,IAAT,CAAcC,MAAtD;EACA,MAAMD,IAAI,GAAGpB,QAAQ,CAACoB,IAAtB;EACA,MAAME,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUvB,KAAK,GAAG,GAAlB,CAAnB;EACA,MAAMwB,SAAS,GAAGxB,KAAK,GAAGqB,UAA1B;EACA,MAAMI,UAAU,GAAG,CAACD,SAAS,GAAG,EAAb,IAAmB,IAAnB,GAA0B,EAA1B,GAA+B,CAAlD;EACA,MAAME,OAAO,GAAGJ,IAAI,CAACC,IAAL,CAAUN,SAAS,GAAGI,UAAtB,CAAhB;EACA,MAAMM,cAAc,GAAG/B,2BAA2B,CAACS,cAAD,EAAiBgB,UAAjB,EAA6BtB,QAA7B,CAAlD;EAEA,oBACE,KAAC,cAAD;IAAgB,YAAY,EAAEA,QAAQ,CAAC6B,YAAvC;IAAqD,SAAS,EAAEX,SAAhE;IAA2E,aAAa,EAAElB,QAAQ,CAAC8B,aAAnG;IAAA,UACG,CAAC;MAAEC,eAAF;MAAmBC;IAAnB,CAAD,kBACC,KAAC,aAAD;MACE,GAAG,EAAEA,GADP;MAEE,eAAe,EAAGC,CAAD,IAAO;QACtBF,eAAe,CAAC;UACdG,iBAAiB,EAAED,CAAC,CAACE,oBAAF,GAAyBb,UAD9B;UAEdc,gBAAgB,EAAEH,CAAC,CAACI,mBAAF,GAAwBf,UAF5B;UAGdgB,kBAAkB,EAAEL,CAAC,CAACM,qBAAF,GAA0BjB,UAHhC;UAIdkB,iBAAiB,EAAEP,CAAC,CAACQ,uBAAF,GAA4BnB;QAJjC,CAAD,CAAf;MAMD,CATH;MAUE,WAAW,EAAEA,UAVf;MAWE,WAAW,EAAEG,SAXf;MAYE,QAAQ,EAAEE,OAZZ;MAaE,SAAS,EAAED,UAbb;MAcE,SAAS,EAAEnB,MAAM,CAACmC,OAdpB;MAeE,gBAAgB,EAAC,IAfnB;MAgBE,MAAM,EAAExC,MAhBV;MAiBE,KAAK,EAAED,KAAK,GAAG,CAjBjB;MAAA,UAmBG,CAAC;QAAE0C,WAAF;QAAeC,QAAf;QAAyBC;MAAzB,CAAD,KAAsC;QAAA;;QACrC,MAAMC,KAAK,GAAGF,QAAQ,GAAGtB,UAAX,GAAwBqB,WAAtC;;QACA,IAAIG,KAAK,IAAI1B,IAAI,CAACC,MAAlB,EAA0B;UACxB,OAAO,IAAP;QACD;;QACD,MAAMT,IAAI,GAAGQ,IAAI,CAAC2B,GAAL,CAASD,KAAT,CAAb;QACA,MAAME,IAAI,iBAAGpC,IAAI,CAACoC,IAAR,mDAAgB,WAA1B;QAEA,MAAMC,MAA4B,GAAG;UACnChC,GAAG,EAAEL,IAAI,CAACK,GADyB;UAEnCiC,KAAK,EAAEtC,IAAI,CAACuC,IAFuB;UAGnCC,GAAG,EAAExC,IAAI,CAACwC,GAHyB;UAInCC,GAAG,EAAEzC,IAAI,CAACwC,GAJyB;UAKnCrC,IAAI,EAAEiC,IAAI,KAAK,QAAT,GAAoBlD,uBAAuB,CAACkB,UAA5C,GAAyDlB,uBAAuB,CAACwD,MALpD;UAMnCC,EAAE,EAAE,GAN+B;UAM1B;UACTC,SAAS,EAAE,KAPwB;UAQnCC,IAAI,gBAAE7C,IAAI,CAAC6C,IAAP,mDAAe,EARgB;UASnCC,OAAO,EAAEvD,SAAS,GAAGA,SAAS,CAAC6C,IAAD,EAAOpC,IAAI,CAACK,GAAZ,CAAZ,GAA+B;QATd,CAArC;;QAYA,IAAI+B,IAAI,KAAK,OAAb,EAAsB;UACpB,MAAMjC,IAAI,GAAGH,IAAI,CAAC+C,UAAlB;UACAV,MAAM,CAACW,IAAP,GAAc,wCAAd;;UACA,IAAI7C,IAAJ,EAAU;YACR,MAAM8C,IAAI,GAAGnE,MAAM,CAACoE,MAAP,CAAc/C,IAAd,CAAb;;YACA,IAAI8C,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEV,IAAV,EAAgB;cAAA;;cACd,MAAMlB,CAAC,iBAAG4B,IAAI,CAACA,IAAR,+CAAG,WAAWE,KAAX,CAAiBC,KAA3B;;cACA,IAAI/B,CAAC,IAAIA,CAAC,CAACgC,QAAF,CAAW,MAAX,CAAT,EAA6B;gBAC3BhB,MAAM,CAACW,IAAP,GAAc3B,CAAd;cACD;YACF;UACF;QACF;;QAED,IAAIiC,SAAS,GAAG3D,MAAM,CAAC4D,0BAAvB;;QACA,IAAIvB,QAAQ,KAAKhB,cAAc,CAACwC,CAA5B,IAAiCzB,WAAW,KAAKf,cAAc,CAACyC,CAApE,EAAuE;UACrEH,SAAS,IAAI,MAAM3D,MAAM,CAAC+D,YAA1B;QACD,CArCoC,CAuCrC;QACA;;;QACA,OAAO1D,IAAI,gBACT;UAAI,KAAK,EAAEiC,KAAX;UAAkB,SAAS,EAAEqB,SAA7B;UAAA,uBACE,KAAC,UAAD,oBAA+BzD,SAA/B;YAA0C,IAAI,EAAEwC;UAAhD,IAAiBrC,IAAI,CAACK,GAAtB;QADF,EADS,GAIP,IAJJ;MAKD;IAjEH;EAFJ,EADF;AAyED,CAzGM;;AA2GP,MAAMT,SAAS,GAAI+D,KAAD,KAA2B;EAC3CJ,0BAA0B,EAAE7E,GAAI;AAClC;AACA,GAH6C;EAI3CoD,OAAO,EAAEpD,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA,GAX6C;EAY3CgF,YAAY,EAAEhF,GAAI;AACpB,wCAAwCiF,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBC,MAAO;AACpE;AAd6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}