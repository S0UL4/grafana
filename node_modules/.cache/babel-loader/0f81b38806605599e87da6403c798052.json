{"ast":null,"code":"import { VizOrientation } from '@grafana/data';\nimport { BarGaugeDisplayMode } from '@grafana/ui';\nimport { SuggestionName } from 'app/types/suggestions';\nexport class BarGaugeSuggestionsSupplier {\n  getSuggestionsForData(builder) {\n    const {\n      dataSummary\n    } = builder;\n\n    if (!dataSummary.hasData || !dataSummary.hasNumberField) {\n      return;\n    }\n\n    const list = builder.getListAppender({\n      name: '',\n      pluginId: 'bargauge',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {}\n        },\n        overrides: []\n      }\n    }); // This is probably not a good option for many numeric fields\n\n    if (dataSummary.numberFieldCount > 50) {\n      return;\n    } // To use show individual row values we also need a string field to give each value a name\n\n\n    if (dataSummary.hasStringField && dataSummary.frameCount === 1 && dataSummary.rowCountTotal < 30) {\n      list.append({\n        name: SuggestionName.BarGaugeBasic,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: []\n          },\n          displayMode: BarGaugeDisplayMode.Basic,\n          orientation: VizOrientation.Horizontal\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd'\n            }\n          },\n          overrides: []\n        }\n      });\n      list.append({\n        name: SuggestionName.BarGaugeLCD,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: []\n          },\n          displayMode: BarGaugeDisplayMode.Lcd,\n          orientation: VizOrientation.Horizontal\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd'\n            }\n          },\n          overrides: []\n        }\n      });\n    } else {\n      list.append({\n        name: SuggestionName.BarGaugeBasic,\n        options: {\n          displayMode: BarGaugeDisplayMode.Basic,\n          orientation: VizOrientation.Horizontal,\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull']\n          }\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd'\n            }\n          },\n          overrides: []\n        }\n      });\n      list.append({\n        name: SuggestionName.BarGaugeLCD,\n        options: {\n          displayMode: BarGaugeDisplayMode.Lcd,\n          orientation: VizOrientation.Horizontal,\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull']\n          }\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd'\n            }\n          },\n          overrides: []\n        }\n      });\n    }\n  }\n\n}","map":{"version":3,"names":["VizOrientation","BarGaugeDisplayMode","SuggestionName","BarGaugeSuggestionsSupplier","getSuggestionsForData","builder","dataSummary","hasData","hasNumberField","list","getListAppender","name","pluginId","options","fieldConfig","defaults","custom","overrides","numberFieldCount","hasStringField","frameCount","rowCountTotal","append","BarGaugeBasic","reduceOptions","values","calcs","displayMode","Basic","orientation","Horizontal","color","mode","BarGaugeLCD","Lcd"],"sources":["/home/soula/grafana/public/app/plugins/panel/bargauge/suggestions.ts"],"sourcesContent":["import { VisualizationSuggestionsBuilder, VizOrientation } from '@grafana/data';\nimport { BarGaugeDisplayMode } from '@grafana/ui';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { PanelOptions } from './models.gen';\n\nexport class BarGaugeSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (!dataSummary.hasData || !dataSummary.hasNumberField) {\n      return;\n    }\n\n    const list = builder.getListAppender<PanelOptions, {}>({\n      name: '',\n      pluginId: 'bargauge',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n\n    // This is probably not a good option for many numeric fields\n    if (dataSummary.numberFieldCount > 50) {\n      return;\n    }\n\n    // To use show individual row values we also need a string field to give each value a name\n    if (dataSummary.hasStringField && dataSummary.frameCount === 1 && dataSummary.rowCountTotal < 30) {\n      list.append({\n        name: SuggestionName.BarGaugeBasic,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n          },\n          displayMode: BarGaugeDisplayMode.Basic,\n          orientation: VizOrientation.Horizontal,\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd',\n            },\n          },\n          overrides: [],\n        },\n      });\n\n      list.append({\n        name: SuggestionName.BarGaugeLCD,\n        options: {\n          reduceOptions: {\n            values: true,\n            calcs: [],\n          },\n          displayMode: BarGaugeDisplayMode.Lcd,\n          orientation: VizOrientation.Horizontal,\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd',\n            },\n          },\n          overrides: [],\n        },\n      });\n    } else {\n      list.append({\n        name: SuggestionName.BarGaugeBasic,\n        options: {\n          displayMode: BarGaugeDisplayMode.Basic,\n          orientation: VizOrientation.Horizontal,\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull'],\n          },\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd',\n            },\n          },\n          overrides: [],\n        },\n      });\n\n      list.append({\n        name: SuggestionName.BarGaugeLCD,\n        options: {\n          displayMode: BarGaugeDisplayMode.Lcd,\n          orientation: VizOrientation.Horizontal,\n          reduceOptions: {\n            values: false,\n            calcs: ['lastNotNull'],\n          },\n        },\n        fieldConfig: {\n          defaults: {\n            color: {\n              mode: 'continuous-GrYlRd',\n            },\n          },\n          overrides: [],\n        },\n      });\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}