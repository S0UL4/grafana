{"ast":null,"code":"var _Button;\n\nconst _excluded = [\"ref\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Button, Input, Switch, Form, Field, InputControl, HorizontalGroup } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { validationSrv } from 'app/features/manage-dashboards/services/ValidationSrv';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst getSaveAsDashboardClone = dashboard => {\n  const clone = dashboard.getSaveModelClone();\n  clone.id = null;\n  clone.uid = '';\n  clone.title += ' Copy';\n  clone.editable = true; // remove alerts if source dashboard is already persisted\n  // do not want to create alert dupes\n\n  if (dashboard.id > 0) {\n    clone.panels.forEach(panel => {\n      if (panel.type === 'graph' && panel.alert) {\n        delete panel.thresholds;\n      }\n\n      delete panel.alert;\n    });\n  }\n\n  delete clone.autoUpdate;\n  return clone;\n};\n\nexport const SaveDashboardAsForm = ({\n  dashboard,\n  isNew,\n  onSubmit,\n  onCancel,\n  onSuccess\n}) => {\n  var _HorizontalGroup;\n\n  const defaultValues = {\n    title: isNew ? dashboard.title : `${dashboard.title} Copy`,\n    $folder: {\n      id: dashboard.meta.folderId,\n      title: dashboard.meta.folderTitle\n    },\n    copyTags: false\n  };\n\n  const validateDashboardName = getFormValues => async dashboardName => {\n    var _getFormValues$$folde;\n\n    if (dashboardName && dashboardName === ((_getFormValues$$folde = getFormValues().$folder.title) === null || _getFormValues$$folde === void 0 ? void 0 : _getFormValues$$folde.trim())) {\n      return 'Dashboard name cannot be the same as folder name';\n    }\n\n    try {\n      await validationSrv.validateNewDashboardName(getFormValues().$folder.id, dashboardName);\n      return true;\n    } catch (e) {\n      return e instanceof Error ? e.message : 'Dashboard name is invalid';\n    }\n  };\n\n  return /*#__PURE__*/_jsx(Form, {\n    defaultValues: defaultValues,\n    onSubmit: async data => {\n      if (!onSubmit) {\n        return;\n      }\n\n      const clone = getSaveAsDashboardClone(dashboard);\n      clone.title = data.title;\n\n      if (!data.copyTags) {\n        clone.tags = [];\n      }\n\n      const result = await onSubmit(clone, {\n        folderId: data.$folder.id\n      }, dashboard);\n\n      if (result.status === 'success') {\n        onSuccess();\n      }\n    },\n    children: ({\n      register,\n      control,\n      errors,\n      getValues\n    }) => {\n      var _errors$title;\n\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(Field, {\n          label: \"Dashboard name\",\n          invalid: !!errors.title,\n          error: (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message,\n          children: /*#__PURE__*/_jsx(Input, Object.assign({}, register('title', {\n            validate: validateDashboardName(getValues)\n          }), {\n            \"aria-label\": \"Save dashboard title field\",\n            autoFocus: true\n          }))\n        }), /*#__PURE__*/_jsx(Field, {\n          label: \"Folder\",\n          children: /*#__PURE__*/_jsx(InputControl, {\n            render: _ref => {\n              let {} = _ref,\n                  field = _objectWithoutPropertiesLoose(_ref.field, _excluded);\n\n              return /*#__PURE__*/_jsx(FolderPicker, Object.assign({}, field, {\n                dashboardId: dashboard.id,\n                initialFolderId: dashboard.meta.folderId,\n                initialTitle: dashboard.meta.folderTitle,\n                enableCreateNew: true\n              }));\n            },\n            control: control,\n            name: \"$folder\"\n          })\n        }), !isNew && /*#__PURE__*/_jsx(Field, {\n          label: \"Copy tags\",\n          children: /*#__PURE__*/_jsx(Switch, Object.assign({}, register('copyTags')))\n        }), _HorizontalGroup || (_HorizontalGroup = /*#__PURE__*/_jsxs(HorizontalGroup, {\n          children: [/*#__PURE__*/_jsx(Button, {\n            type: \"button\",\n            variant: \"secondary\",\n            onClick: onCancel,\n            fill: \"outline\",\n            children: \"Cancel\"\n          }), _Button || (_Button = /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            \"aria-label\": \"Save dashboard button\",\n            children: \"Save\"\n          }))]\n        }))]\n      });\n    }\n  });\n};","map":{"version":3,"names":["React","Button","Input","Switch","Form","Field","InputControl","HorizontalGroup","FolderPicker","validationSrv","getSaveAsDashboardClone","dashboard","clone","getSaveModelClone","id","uid","title","editable","panels","forEach","panel","type","alert","thresholds","autoUpdate","SaveDashboardAsForm","isNew","onSubmit","onCancel","onSuccess","defaultValues","$folder","meta","folderId","folderTitle","copyTags","validateDashboardName","getFormValues","dashboardName","trim","validateNewDashboardName","e","Error","message","data","tags","result","status","register","control","errors","getValues","validate","field"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/SaveDashboard/forms/SaveDashboardAsForm.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Button, Input, Switch, Form, Field, InputControl, HorizontalGroup } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { validationSrv } from 'app/features/manage-dashboards/services/ValidationSrv';\n\nimport { SaveDashboardFormProps } from '../types';\n\ninterface SaveDashboardAsFormDTO {\n  title: string;\n  $folder: { id?: number; title?: string };\n  copyTags: boolean;\n}\n\nconst getSaveAsDashboardClone = (dashboard: DashboardModel) => {\n  const clone: any = dashboard.getSaveModelClone();\n  clone.id = null;\n  clone.uid = '';\n  clone.title += ' Copy';\n  clone.editable = true;\n\n  // remove alerts if source dashboard is already persisted\n  // do not want to create alert dupes\n  if (dashboard.id > 0) {\n    clone.panels.forEach((panel: PanelModel) => {\n      if (panel.type === 'graph' && panel.alert) {\n        delete panel.thresholds;\n      }\n      delete panel.alert;\n    });\n  }\n\n  delete clone.autoUpdate;\n  return clone;\n};\n\nexport interface SaveDashboardAsFormProps extends SaveDashboardFormProps {\n  isNew?: boolean;\n}\n\nexport const SaveDashboardAsForm: React.FC<SaveDashboardAsFormProps> = ({\n  dashboard,\n  isNew,\n  onSubmit,\n  onCancel,\n  onSuccess,\n}) => {\n  const defaultValues: SaveDashboardAsFormDTO = {\n    title: isNew ? dashboard.title : `${dashboard.title} Copy`,\n    $folder: {\n      id: dashboard.meta.folderId,\n      title: dashboard.meta.folderTitle,\n    },\n    copyTags: false,\n  };\n\n  const validateDashboardName = (getFormValues: () => SaveDashboardAsFormDTO) => async (dashboardName: string) => {\n    if (dashboardName && dashboardName === getFormValues().$folder.title?.trim()) {\n      return 'Dashboard name cannot be the same as folder name';\n    }\n    try {\n      await validationSrv.validateNewDashboardName(getFormValues().$folder.id, dashboardName);\n      return true;\n    } catch (e) {\n      return e instanceof Error ? e.message : 'Dashboard name is invalid';\n    }\n  };\n\n  return (\n    <Form\n      defaultValues={defaultValues}\n      onSubmit={async (data: SaveDashboardAsFormDTO) => {\n        if (!onSubmit) {\n          return;\n        }\n\n        const clone = getSaveAsDashboardClone(dashboard);\n        clone.title = data.title;\n        if (!data.copyTags) {\n          clone.tags = [];\n        }\n\n        const result = await onSubmit(\n          clone,\n          {\n            folderId: data.$folder.id,\n          },\n          dashboard\n        );\n\n        if (result.status === 'success') {\n          onSuccess();\n        }\n      }}\n    >\n      {({ register, control, errors, getValues }) => (\n        <>\n          <Field label=\"Dashboard name\" invalid={!!errors.title} error={errors.title?.message}>\n            <Input\n              {...register('title', {\n                validate: validateDashboardName(getValues),\n              })}\n              aria-label=\"Save dashboard title field\"\n              autoFocus\n            />\n          </Field>\n          <Field label=\"Folder\">\n            <InputControl\n              render={({ field: { ref, ...field } }) => (\n                <FolderPicker\n                  {...field}\n                  dashboardId={dashboard.id}\n                  initialFolderId={dashboard.meta.folderId}\n                  initialTitle={dashboard.meta.folderTitle}\n                  enableCreateNew\n                />\n              )}\n              control={control}\n              name=\"$folder\"\n            />\n          </Field>\n          {!isNew && (\n            <Field label=\"Copy tags\">\n              <Switch {...register('copyTags')} />\n            </Field>\n          )}\n          <HorizontalGroup>\n            <Button type=\"button\" variant=\"secondary\" onClick={onCancel} fill=\"outline\">\n              Cancel\n            </Button>\n            <Button type=\"submit\" aria-label=\"Save dashboard button\">\n              Save\n            </Button>\n          </HorizontalGroup>\n        </>\n      )}\n    </Form>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}