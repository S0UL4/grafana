{"ast":null,"code":"var _Space, _Space2;\n\nimport React, { useState } from 'react';\nimport { EditorField, EditorRow, Space } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Input } from '@grafana/ui';\nimport { MathExpressionQueryField, MetricStatEditor, SQLBuilderEditor, SQLCodeEditor } from '../';\nimport { isCloudWatchMetricsQuery } from '../../guards';\nimport { MetricEditorMode, MetricQueryType } from '../../types';\nimport { DynamicLabelsField } from '../DynamicLabelsField';\nimport QueryHeader from '../QueryHeader';\nimport { Alias } from './Alias';\nimport usePreparedMetricsQuery from './usePreparedMetricsQuery';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const MetricsQueryEditor = props => {\n  var _query$expression, _query$sqlExpression, _preparedQuery$label, _preparedQuery$alias;\n\n  const {\n    query,\n    onRunQuery,\n    datasource\n  } = props;\n  const [sqlCodeEditorIsDirty, setSQLCodeEditorIsDirty] = useState(false);\n  const preparedQuery = usePreparedMetricsQuery(query, props.onChange);\n\n  const onChange = query => {\n    const {\n      onChange,\n      onRunQuery\n    } = props;\n    onChange(query);\n    onRunQuery();\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(QueryHeader, {\n      query: query,\n      onRunQuery: onRunQuery,\n      datasource: datasource,\n      onChange: newQuery => {\n        if (isCloudWatchMetricsQuery(newQuery) && newQuery.metricEditorMode !== query.metricEditorMode) {\n          setSQLCodeEditorIsDirty(false);\n        }\n\n        onChange(newQuery);\n      },\n      sqlCodeEditorIsDirty: sqlCodeEditorIsDirty\n    }), _Space || (_Space = /*#__PURE__*/_jsx(Space, {\n      v: 0.5\n    })), query.metricQueryType === MetricQueryType.Search && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [query.metricEditorMode === MetricEditorMode.Builder && /*#__PURE__*/_jsx(MetricStatEditor, Object.assign({}, props, {\n        refId: query.refId,\n        metricStat: query,\n        onChange: metricStat => props.onChange(Object.assign({}, query, metricStat))\n      })), query.metricEditorMode === MetricEditorMode.Code && /*#__PURE__*/_jsx(MathExpressionQueryField, {\n        onRunQuery: onRunQuery,\n        expression: (_query$expression = query.expression) !== null && _query$expression !== void 0 ? _query$expression : '',\n        onChange: expression => props.onChange(Object.assign({}, query, {\n          expression\n        })),\n        datasource: datasource\n      })]\n    }), query.metricQueryType === MetricQueryType.Query && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [query.metricEditorMode === MetricEditorMode.Code && /*#__PURE__*/_jsx(SQLCodeEditor, {\n        region: query.region,\n        sql: (_query$sqlExpression = query.sqlExpression) !== null && _query$sqlExpression !== void 0 ? _query$sqlExpression : '',\n        onChange: sqlExpression => {\n          if (!sqlCodeEditorIsDirty) {\n            setSQLCodeEditorIsDirty(true);\n          }\n\n          props.onChange(Object.assign({}, preparedQuery, {\n            sqlExpression\n          }));\n        },\n        onRunQuery: onRunQuery,\n        datasource: datasource\n      }), query.metricEditorMode === MetricEditorMode.Builder && /*#__PURE__*/_jsx(_Fragment, {\n        children: /*#__PURE__*/_jsx(SQLBuilderEditor, {\n          query: query,\n          onChange: props.onChange,\n          onRunQuery: onRunQuery,\n          datasource: datasource\n        })\n      })]\n    }), _Space2 || (_Space2 = /*#__PURE__*/_jsx(Space, {\n      v: 0.5\n    })), /*#__PURE__*/_jsxs(EditorRow, {\n      children: [/*#__PURE__*/_jsx(EditorField, {\n        label: \"ID\",\n        width: 26,\n        optional: true,\n        tooltip: \"ID can be used to reference other queries in math expressions. The ID can include numbers, letters, and underscore, and must start with a lowercase letter.\",\n        invalid: !!query.id && !/^$|^[a-z][a-zA-Z0-9_]*$/.test(query.id),\n        children: /*#__PURE__*/_jsx(Input, {\n          id: `${query.refId}-cloudwatch-metric-query-editor-id`,\n          onBlur: onRunQuery,\n          onChange: event => onChange(Object.assign({}, preparedQuery, {\n            id: event.target.value\n          })),\n          type: \"text\",\n          value: query.id\n        })\n      }), /*#__PURE__*/_jsx(EditorField, {\n        label: \"Period\",\n        width: 26,\n        tooltip: \"Minimum interval between points in seconds.\",\n        children: /*#__PURE__*/_jsx(Input, {\n          id: `${query.refId}-cloudwatch-metric-query-editor-period`,\n          value: query.period || '',\n          placeholder: \"auto\",\n          onBlur: onRunQuery,\n          onChange: event => onChange(Object.assign({}, preparedQuery, {\n            period: event.target.value\n          }))\n        })\n      }), config.featureToggles.cloudWatchDynamicLabels ? /*#__PURE__*/_jsx(EditorField, {\n        label: \"Label\",\n        width: 26,\n        optional: true,\n        tooltip: \"Change time series legend name using Dynamic labels. See documentation for details.\",\n        children: /*#__PURE__*/_jsx(DynamicLabelsField, {\n          width: 52,\n          onRunQuery: onRunQuery,\n          label: (_preparedQuery$label = preparedQuery.label) !== null && _preparedQuery$label !== void 0 ? _preparedQuery$label : '',\n          onChange: label => props.onChange(Object.assign({}, query, {\n            label\n          }))\n        })\n      }) : /*#__PURE__*/_jsx(EditorField, {\n        label: \"Alias\",\n        width: 26,\n        optional: true,\n        tooltip: \"Change time series legend name using this field. See documentation for replacement variable formats.\",\n        children: /*#__PURE__*/_jsx(Alias, {\n          id: `${query.refId}-cloudwatch-metric-query-editor-alias`,\n          value: (_preparedQuery$alias = preparedQuery.alias) !== null && _preparedQuery$alias !== void 0 ? _preparedQuery$alias : '',\n          onChange: value => onChange(Object.assign({}, preparedQuery, {\n            alias: value\n          }))\n        })\n      })]\n    })]\n  });\n};","map":{"version":3,"names":["React","useState","EditorField","EditorRow","Space","config","Input","MathExpressionQueryField","MetricStatEditor","SQLBuilderEditor","SQLCodeEditor","isCloudWatchMetricsQuery","MetricEditorMode","MetricQueryType","DynamicLabelsField","QueryHeader","Alias","usePreparedMetricsQuery","MetricsQueryEditor","props","query","onRunQuery","datasource","sqlCodeEditorIsDirty","setSQLCodeEditorIsDirty","preparedQuery","onChange","newQuery","metricEditorMode","metricQueryType","Search","Builder","refId","metricStat","Code","expression","Query","region","sqlExpression","id","test","event","target","value","period","featureToggles","cloudWatchDynamicLabels","label","alias"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/MetricsQueryEditor.tsx"],"sourcesContent":["import React, { ChangeEvent, useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorField, EditorRow, Space } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Input } from '@grafana/ui';\n\nimport { MathExpressionQueryField, MetricStatEditor, SQLBuilderEditor, SQLCodeEditor } from '../';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { isCloudWatchMetricsQuery } from '../../guards';\nimport {\n  CloudWatchJsonData,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  MetricEditorMode,\n  MetricQueryType,\n  MetricStat,\n} from '../../types';\nimport { DynamicLabelsField } from '../DynamicLabelsField';\nimport QueryHeader from '../QueryHeader';\n\nimport { Alias } from './Alias';\nimport usePreparedMetricsQuery from './usePreparedMetricsQuery';\n\nexport interface Props extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  query: CloudWatchMetricsQuery;\n}\n\nexport const MetricsQueryEditor = (props: Props) => {\n  const { query, onRunQuery, datasource } = props;\n  const [sqlCodeEditorIsDirty, setSQLCodeEditorIsDirty] = useState(false);\n  const preparedQuery = usePreparedMetricsQuery(query, props.onChange);\n\n  const onChange = (query: CloudWatchQuery) => {\n    const { onChange, onRunQuery } = props;\n    onChange(query);\n    onRunQuery();\n  };\n\n  return (\n    <>\n      <QueryHeader\n        query={query}\n        onRunQuery={onRunQuery}\n        datasource={datasource}\n        onChange={(newQuery) => {\n          if (isCloudWatchMetricsQuery(newQuery) && newQuery.metricEditorMode !== query.metricEditorMode) {\n            setSQLCodeEditorIsDirty(false);\n          }\n          onChange(newQuery);\n        }}\n        sqlCodeEditorIsDirty={sqlCodeEditorIsDirty}\n      />\n      <Space v={0.5} />\n\n      {query.metricQueryType === MetricQueryType.Search && (\n        <>\n          {query.metricEditorMode === MetricEditorMode.Builder && (\n            <MetricStatEditor\n              {...props}\n              refId={query.refId}\n              metricStat={query}\n              onChange={(metricStat: MetricStat) => props.onChange({ ...query, ...metricStat })}\n            ></MetricStatEditor>\n          )}\n          {query.metricEditorMode === MetricEditorMode.Code && (\n            <MathExpressionQueryField\n              onRunQuery={onRunQuery}\n              expression={query.expression ?? ''}\n              onChange={(expression) => props.onChange({ ...query, expression })}\n              datasource={datasource}\n            ></MathExpressionQueryField>\n          )}\n        </>\n      )}\n      {query.metricQueryType === MetricQueryType.Query && (\n        <>\n          {query.metricEditorMode === MetricEditorMode.Code && (\n            <SQLCodeEditor\n              region={query.region}\n              sql={query.sqlExpression ?? ''}\n              onChange={(sqlExpression) => {\n                if (!sqlCodeEditorIsDirty) {\n                  setSQLCodeEditorIsDirty(true);\n                }\n                props.onChange({ ...preparedQuery, sqlExpression });\n              }}\n              onRunQuery={onRunQuery}\n              datasource={datasource}\n            />\n          )}\n\n          {query.metricEditorMode === MetricEditorMode.Builder && (\n            <>\n              <SQLBuilderEditor\n                query={query}\n                onChange={props.onChange}\n                onRunQuery={onRunQuery}\n                datasource={datasource}\n              ></SQLBuilderEditor>\n            </>\n          )}\n        </>\n      )}\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField\n          label=\"ID\"\n          width={26}\n          optional\n          tooltip=\"ID can be used to reference other queries in math expressions. The ID can include numbers, letters, and underscore, and must start with a lowercase letter.\"\n          invalid={!!query.id && !/^$|^[a-z][a-zA-Z0-9_]*$/.test(query.id)}\n        >\n          <Input\n            id={`${query.refId}-cloudwatch-metric-query-editor-id`}\n            onBlur={onRunQuery}\n            onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...preparedQuery, id: event.target.value })}\n            type=\"text\"\n            value={query.id}\n          />\n        </EditorField>\n\n        <EditorField label=\"Period\" width={26} tooltip=\"Minimum interval between points in seconds.\">\n          <Input\n            id={`${query.refId}-cloudwatch-metric-query-editor-period`}\n            value={query.period || ''}\n            placeholder=\"auto\"\n            onBlur={onRunQuery}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...preparedQuery, period: event.target.value })\n            }\n          />\n        </EditorField>\n\n        {config.featureToggles.cloudWatchDynamicLabels ? (\n          <EditorField\n            label=\"Label\"\n            width={26}\n            optional\n            tooltip=\"Change time series legend name using Dynamic labels. See documentation for details.\"\n          >\n            <DynamicLabelsField\n              width={52}\n              onRunQuery={onRunQuery}\n              label={preparedQuery.label ?? ''}\n              onChange={(label) => props.onChange({ ...query, label })}\n            ></DynamicLabelsField>\n          </EditorField>\n        ) : (\n          <EditorField\n            label=\"Alias\"\n            width={26}\n            optional\n            tooltip=\"Change time series legend name using this field. See documentation for replacement variable formats.\"\n          >\n            <Alias\n              id={`${query.refId}-cloudwatch-metric-query-editor-alias`}\n              value={preparedQuery.alias ?? ''}\n              onChange={(value: string) => onChange({ ...preparedQuery, alias: value })}\n            />\n          </EditorField>\n        )}\n      </EditorRow>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}