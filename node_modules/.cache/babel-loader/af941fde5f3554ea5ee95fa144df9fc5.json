{"ast":null,"code":"import React from 'react';\nimport { FieldType, standardEditorsRegistry, ThresholdsMode, thresholdsOverrideProcessor, valueMappingsOverrideProcessor, dataLinksOverrideProcessor, numberOverrideProcessor, stringOverrideProcessor, identityOverrideProcessor, displayNameOverrideProcessor } from '@grafana/data';\nimport { RadioButtonGroup, TimeZonePicker, Switch } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { ThresholdsValueEditor } from 'app/features/dimensions/editors/ThresholdsEditor/thresholds';\nimport { ValueMappingsEditor } from 'app/features/dimensions/editors/ValueMappingsEditor/ValueMappingsEditor';\nimport { DashboardPicker } from './DashboardPicker';\nimport { ColorValueEditor } from './color';\nimport { FieldColorEditor } from './fieldColor';\nimport { DataLinksValueEditor } from './links';\nimport { MultiSelectValueEditor } from './multiSelect';\nimport { NumberValueEditor } from './number';\nimport { SelectValueEditor } from './select';\nimport { SliderValueEditor } from './slider';\nimport { StatsPickerEditor } from './stats';\nimport { StringValueEditor } from './string';\nimport { StringArrayEditor } from './strings';\nimport { UnitValueEditor } from './units';\n/**\n * Returns collection of standard option editors definitions\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const getAllOptionEditors = () => {\n  const number = {\n    id: 'number',\n    name: 'Number',\n    description: 'Allows numeric values input',\n    editor: NumberValueEditor\n  };\n  const slider = {\n    id: 'slider',\n    name: 'Slider',\n    description: 'Allows numeric values input',\n    editor: SliderValueEditor\n  };\n  const text = {\n    id: 'text',\n    name: 'Text',\n    description: 'Allows string values input',\n    editor: StringValueEditor\n  };\n  const strings = {\n    id: 'strings',\n    name: 'String array',\n    description: 'An array of strings',\n    editor: StringArrayEditor\n  };\n  const boolean = {\n    id: 'boolean',\n    name: 'Boolean',\n    description: 'Allows boolean values input',\n\n    editor(props) {\n      return /*#__PURE__*/_jsx(Switch, Object.assign({}, props, {\n        onChange: e => props.onChange(e.currentTarget.checked)\n      }));\n    }\n\n  };\n  const select = {\n    id: 'select',\n    name: 'Select',\n    description: 'Allows option selection',\n    editor: SelectValueEditor\n  };\n  const multiSelect = {\n    id: 'multi-select',\n    name: 'Multi select',\n    description: 'Allows for multiple option selection',\n    editor: MultiSelectValueEditor\n  };\n  const radio = {\n    id: 'radio',\n    name: 'Radio',\n    description: 'Allows option selection',\n\n    editor(props) {\n      var _props$item$settings;\n\n      return /*#__PURE__*/_jsx(RadioButtonGroup, Object.assign({}, props, {\n        options: (_props$item$settings = props.item.settings) === null || _props$item$settings === void 0 ? void 0 : _props$item$settings.options\n      }));\n    }\n\n  };\n  const unit = {\n    id: 'unit',\n    name: 'Unit',\n    description: 'Allows unit input',\n    editor: UnitValueEditor\n  };\n  const color = {\n    id: 'color',\n    name: 'Color',\n    description: 'Allows color selection',\n\n    editor(props) {\n      return /*#__PURE__*/_jsx(ColorValueEditor, {\n        value: props.value,\n        onChange: props.onChange\n      });\n    }\n\n  };\n  const fieldColor = {\n    id: 'fieldColor',\n    name: 'Field Color',\n    description: 'Field color selection',\n    editor: FieldColorEditor\n  };\n  const links = {\n    id: 'links',\n    name: 'Links',\n    description: 'Allows defining data links',\n    editor: DataLinksValueEditor\n  };\n  const statsPicker = {\n    id: 'stats-picker',\n    name: 'Stats Picker',\n    editor: StatsPickerEditor,\n    description: ''\n  };\n  const timeZone = {\n    id: 'timezone',\n    name: 'Time Zone',\n    description: 'Time zone selection',\n    editor: TimeZonePicker\n  };\n  const fieldName = {\n    id: 'field-name',\n    name: 'Field name',\n    description: 'Allows selecting a field name from a data frame',\n    editor: FieldNamePicker\n  };\n  const dashboardPicker = {\n    id: 'dashboard-uid',\n    name: 'Dashboard',\n    description: 'Select dashboard',\n    editor: DashboardPicker\n  };\n  const mappings = {\n    id: 'mappings',\n    name: 'Mappings',\n    description: 'Allows defining value mappings',\n    editor: ValueMappingsEditor\n  };\n  const thresholds = {\n    id: 'thresholds',\n    name: 'Thresholds',\n    description: 'Allows defining thresholds',\n    editor: ThresholdsValueEditor\n  };\n  return [text, number, slider, boolean, radio, select, unit, links, statsPicker, strings, timeZone, fieldColor, color, multiSelect, fieldName, dashboardPicker, mappings, thresholds];\n};\n/**\n * Returns collection of common field config properties definitions\n */\n\nexport const getAllStandardFieldConfigs = () => {\n  const category = ['Standard options'];\n  const displayName = {\n    id: 'displayName',\n    path: 'displayName',\n    name: 'Display name',\n    description: 'Change the field or series name',\n    editor: standardEditorsRegistry.get('text').editor,\n    override: standardEditorsRegistry.get('text').editor,\n    process: displayNameOverrideProcessor,\n    settings: {\n      placeholder: 'none',\n      expandTemplateVars: true\n    },\n    shouldApply: () => true,\n    category\n  };\n  const unit = {\n    id: 'unit',\n    path: 'unit',\n    name: 'Unit',\n    description: '',\n    editor: standardEditorsRegistry.get('unit').editor,\n    override: standardEditorsRegistry.get('unit').editor,\n    process: stringOverrideProcessor,\n    settings: {\n      placeholder: 'none'\n    },\n    shouldApply: () => true,\n    category\n  };\n  const min = {\n    id: 'min',\n    path: 'min',\n    name: 'Min',\n    description: 'Leave empty to calculate based on all values',\n    editor: standardEditorsRegistry.get('number').editor,\n    override: standardEditorsRegistry.get('number').editor,\n    process: numberOverrideProcessor,\n    settings: {\n      placeholder: 'auto'\n    },\n    shouldApply: field => field.type === FieldType.number,\n    category\n  };\n  const max = {\n    id: 'max',\n    path: 'max',\n    name: 'Max',\n    description: 'Leave empty to calculate based on all values',\n    editor: standardEditorsRegistry.get('number').editor,\n    override: standardEditorsRegistry.get('number').editor,\n    process: numberOverrideProcessor,\n    settings: {\n      placeholder: 'auto'\n    },\n    shouldApply: field => field.type === FieldType.number,\n    category\n  };\n  const decimals = {\n    id: 'decimals',\n    path: 'decimals',\n    name: 'Decimals',\n    editor: standardEditorsRegistry.get('number').editor,\n    override: standardEditorsRegistry.get('number').editor,\n    process: numberOverrideProcessor,\n    settings: {\n      placeholder: 'auto',\n      min: 0,\n      max: 15,\n      integer: true\n    },\n    shouldApply: field => field.type === FieldType.number,\n    category\n  };\n  const noValue = {\n    id: 'noValue',\n    path: 'noValue',\n    name: 'No value',\n    description: 'What to show when there is no value',\n    editor: standardEditorsRegistry.get('text').editor,\n    override: standardEditorsRegistry.get('text').editor,\n    process: stringOverrideProcessor,\n    settings: {\n      placeholder: '-'\n    },\n    // ??? any optionsUi with no value\n    shouldApply: () => true,\n    category\n  };\n  const links = {\n    id: 'links',\n    path: 'links',\n    name: 'Data links',\n    editor: standardEditorsRegistry.get('links').editor,\n    override: standardEditorsRegistry.get('links').editor,\n    process: dataLinksOverrideProcessor,\n    settings: {\n      placeholder: '-'\n    },\n    shouldApply: () => true,\n    category: ['Data links'],\n    getItemsCount: value => value ? value.length : 0\n  };\n  const color = {\n    id: 'color',\n    path: 'color',\n    name: 'Color scheme',\n    editor: standardEditorsRegistry.get('fieldColor').editor,\n    override: standardEditorsRegistry.get('fieldColor').editor,\n    process: identityOverrideProcessor,\n    shouldApply: () => true,\n    settings: {\n      byValueSupport: true,\n      preferThresholdsMode: true\n    },\n    category\n  };\n  const mappings = {\n    id: 'mappings',\n    path: 'mappings',\n    name: 'Value mappings',\n    description: 'Modify the display text based on input value',\n    editor: standardEditorsRegistry.get('mappings').editor,\n    override: standardEditorsRegistry.get('mappings').editor,\n    process: valueMappingsOverrideProcessor,\n    settings: {},\n    defaultValue: [],\n    shouldApply: x => x.type !== FieldType.time,\n    category: ['Value mappings'],\n    getItemsCount: value => value ? value.length : 0\n  };\n  const thresholds = {\n    id: 'thresholds',\n    path: 'thresholds',\n    name: 'Thresholds',\n    editor: standardEditorsRegistry.get('thresholds').editor,\n    override: standardEditorsRegistry.get('thresholds').editor,\n    process: thresholdsOverrideProcessor,\n    settings: {},\n    defaultValue: {\n      mode: ThresholdsMode.Absolute,\n      steps: [{\n        value: -Infinity,\n        color: 'green'\n      }, {\n        value: 80,\n        color: 'red'\n      }]\n    },\n    shouldApply: () => true,\n    category: ['Thresholds'],\n    getItemsCount: value => value ? value.steps.length : 0\n  };\n  return [unit, min, max, decimals, displayName, color, noValue, links, mappings, thresholds];\n};","map":{"version":3,"names":["React","FieldType","standardEditorsRegistry","ThresholdsMode","thresholdsOverrideProcessor","valueMappingsOverrideProcessor","dataLinksOverrideProcessor","numberOverrideProcessor","stringOverrideProcessor","identityOverrideProcessor","displayNameOverrideProcessor","RadioButtonGroup","TimeZonePicker","Switch","FieldNamePicker","ThresholdsValueEditor","ValueMappingsEditor","DashboardPicker","ColorValueEditor","FieldColorEditor","DataLinksValueEditor","MultiSelectValueEditor","NumberValueEditor","SelectValueEditor","SliderValueEditor","StatsPickerEditor","StringValueEditor","StringArrayEditor","UnitValueEditor","getAllOptionEditors","number","id","name","description","editor","slider","text","strings","boolean","props","e","onChange","currentTarget","checked","select","multiSelect","radio","item","settings","options","unit","color","value","fieldColor","links","statsPicker","timeZone","fieldName","dashboardPicker","mappings","thresholds","getAllStandardFieldConfigs","category","displayName","path","get","override","process","placeholder","expandTemplateVars","shouldApply","min","field","type","max","decimals","integer","noValue","getItemsCount","length","byValueSupport","preferThresholdsMode","defaultValue","x","time","mode","Absolute","steps","Infinity"],"sources":["/home/soula/grafana/public/app/core/components/OptionsUI/registry.tsx"],"sourcesContent":["import React from 'react';\n\nimport {\n  FieldConfigPropertyItem,\n  FieldType,\n  standardEditorsRegistry,\n  StandardEditorsRegistryItem,\n  ThresholdsConfig,\n  ThresholdsFieldConfigSettings,\n  ThresholdsMode,\n  thresholdsOverrideProcessor,\n  ValueMapping,\n  ValueMappingFieldConfigSettings,\n  valueMappingsOverrideProcessor,\n  DataLink,\n  dataLinksOverrideProcessor,\n  NumberFieldConfigSettings,\n  numberOverrideProcessor,\n  StringFieldConfigSettings,\n  stringOverrideProcessor,\n  identityOverrideProcessor,\n  TimeZone,\n  FieldColor,\n  FieldColorConfigSettings,\n  StatsPickerConfigSettings,\n  displayNameOverrideProcessor,\n  FieldNamePickerConfigSettings,\n} from '@grafana/data';\nimport { RadioButtonGroup, TimeZonePicker, Switch } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { ThresholdsValueEditor } from 'app/features/dimensions/editors/ThresholdsEditor/thresholds';\nimport { ValueMappingsEditor } from 'app/features/dimensions/editors/ValueMappingsEditor/ValueMappingsEditor';\n\nimport { DashboardPicker, DashboardPickerOptions } from './DashboardPicker';\nimport { ColorValueEditor } from './color';\nimport { FieldColorEditor } from './fieldColor';\nimport { DataLinksValueEditor } from './links';\nimport { MultiSelectValueEditor } from './multiSelect';\nimport { NumberValueEditor } from './number';\nimport { SelectValueEditor } from './select';\nimport { SliderValueEditor } from './slider';\nimport { StatsPickerEditor } from './stats';\nimport { StringValueEditor } from './string';\nimport { StringArrayEditor } from './strings';\nimport { UnitValueEditor } from './units';\n\n/**\n * Returns collection of standard option editors definitions\n */\nexport const getAllOptionEditors = () => {\n  const number: StandardEditorsRegistryItem<number> = {\n    id: 'number',\n    name: 'Number',\n    description: 'Allows numeric values input',\n    editor: NumberValueEditor as any,\n  };\n\n  const slider: StandardEditorsRegistryItem<number> = {\n    id: 'slider',\n    name: 'Slider',\n    description: 'Allows numeric values input',\n    editor: SliderValueEditor as any,\n  };\n\n  const text: StandardEditorsRegistryItem<string> = {\n    id: 'text',\n    name: 'Text',\n    description: 'Allows string values input',\n    editor: StringValueEditor as any,\n  };\n\n  const strings: StandardEditorsRegistryItem<string[]> = {\n    id: 'strings',\n    name: 'String array',\n    description: 'An array of strings',\n    editor: StringArrayEditor as any,\n  };\n\n  const boolean: StandardEditorsRegistryItem<boolean> = {\n    id: 'boolean',\n    name: 'Boolean',\n    description: 'Allows boolean values input',\n    editor(props) {\n      return <Switch {...props} onChange={(e) => props.onChange(e.currentTarget.checked)} />;\n    },\n  };\n\n  const select: StandardEditorsRegistryItem<any> = {\n    id: 'select',\n    name: 'Select',\n    description: 'Allows option selection',\n    editor: SelectValueEditor as any,\n  };\n\n  const multiSelect: StandardEditorsRegistryItem<any> = {\n    id: 'multi-select',\n    name: 'Multi select',\n    description: 'Allows for multiple option selection',\n    editor: MultiSelectValueEditor as any,\n  };\n\n  const radio: StandardEditorsRegistryItem<any> = {\n    id: 'radio',\n    name: 'Radio',\n    description: 'Allows option selection',\n    editor(props) {\n      return <RadioButtonGroup {...props} options={props.item.settings?.options} />;\n    },\n  };\n\n  const unit: StandardEditorsRegistryItem<string> = {\n    id: 'unit',\n    name: 'Unit',\n    description: 'Allows unit input',\n    editor: UnitValueEditor as any,\n  };\n\n  const color: StandardEditorsRegistryItem<string> = {\n    id: 'color',\n    name: 'Color',\n    description: 'Allows color selection',\n    editor(props) {\n      return <ColorValueEditor value={props.value} onChange={props.onChange} />;\n    },\n  };\n\n  const fieldColor: StandardEditorsRegistryItem<FieldColor> = {\n    id: 'fieldColor',\n    name: 'Field Color',\n    description: 'Field color selection',\n    editor: FieldColorEditor as any,\n  };\n\n  const links: StandardEditorsRegistryItem<DataLink[]> = {\n    id: 'links',\n    name: 'Links',\n    description: 'Allows defining data links',\n    editor: DataLinksValueEditor as any,\n  };\n\n  const statsPicker: StandardEditorsRegistryItem<string[], StatsPickerConfigSettings> = {\n    id: 'stats-picker',\n    name: 'Stats Picker',\n    editor: StatsPickerEditor as any,\n    description: '',\n  };\n\n  const timeZone: StandardEditorsRegistryItem<TimeZone> = {\n    id: 'timezone',\n    name: 'Time Zone',\n    description: 'Time zone selection',\n    editor: TimeZonePicker as any,\n  };\n\n  const fieldName: StandardEditorsRegistryItem<string, FieldNamePickerConfigSettings> = {\n    id: 'field-name',\n    name: 'Field name',\n    description: 'Allows selecting a field name from a data frame',\n    editor: FieldNamePicker as any,\n  };\n\n  const dashboardPicker: StandardEditorsRegistryItem<string, DashboardPickerOptions> = {\n    id: 'dashboard-uid',\n    name: 'Dashboard',\n    description: 'Select dashboard',\n    editor: DashboardPicker as any,\n  };\n\n  const mappings: StandardEditorsRegistryItem<ValueMapping[]> = {\n    id: 'mappings',\n    name: 'Mappings',\n    description: 'Allows defining value mappings',\n    editor: ValueMappingsEditor as any,\n  };\n\n  const thresholds: StandardEditorsRegistryItem<ThresholdsConfig> = {\n    id: 'thresholds',\n    name: 'Thresholds',\n    description: 'Allows defining thresholds',\n    editor: ThresholdsValueEditor as any,\n  };\n\n  return [\n    text,\n    number,\n    slider,\n    boolean,\n    radio,\n    select,\n    unit,\n    links,\n    statsPicker,\n    strings,\n    timeZone,\n    fieldColor,\n    color,\n    multiSelect,\n    fieldName,\n    dashboardPicker,\n    mappings,\n    thresholds,\n  ];\n};\n\n/**\n * Returns collection of common field config properties definitions\n */\nexport const getAllStandardFieldConfigs = () => {\n  const category = ['Standard options'];\n  const displayName: FieldConfigPropertyItem<any, string, StringFieldConfigSettings> = {\n    id: 'displayName',\n    path: 'displayName',\n    name: 'Display name',\n    description: 'Change the field or series name',\n    editor: standardEditorsRegistry.get('text').editor as any,\n    override: standardEditorsRegistry.get('text').editor as any,\n    process: displayNameOverrideProcessor,\n    settings: {\n      placeholder: 'none',\n      expandTemplateVars: true,\n    },\n    shouldApply: () => true,\n    category,\n  };\n\n  const unit: FieldConfigPropertyItem<any, string, StringFieldConfigSettings> = {\n    id: 'unit',\n    path: 'unit',\n    name: 'Unit',\n    description: '',\n\n    editor: standardEditorsRegistry.get('unit').editor as any,\n    override: standardEditorsRegistry.get('unit').editor as any,\n    process: stringOverrideProcessor,\n\n    settings: {\n      placeholder: 'none',\n    },\n\n    shouldApply: () => true,\n    category,\n  };\n\n  const min: FieldConfigPropertyItem<any, number, NumberFieldConfigSettings> = {\n    id: 'min',\n    path: 'min',\n    name: 'Min',\n    description: 'Leave empty to calculate based on all values',\n\n    editor: standardEditorsRegistry.get('number').editor as any,\n    override: standardEditorsRegistry.get('number').editor as any,\n    process: numberOverrideProcessor,\n\n    settings: {\n      placeholder: 'auto',\n    },\n    shouldApply: (field) => field.type === FieldType.number,\n    category,\n  };\n\n  const max: FieldConfigPropertyItem<any, number, NumberFieldConfigSettings> = {\n    id: 'max',\n    path: 'max',\n    name: 'Max',\n    description: 'Leave empty to calculate based on all values',\n\n    editor: standardEditorsRegistry.get('number').editor as any,\n    override: standardEditorsRegistry.get('number').editor as any,\n    process: numberOverrideProcessor,\n\n    settings: {\n      placeholder: 'auto',\n    },\n\n    shouldApply: (field) => field.type === FieldType.number,\n    category,\n  };\n\n  const decimals: FieldConfigPropertyItem<any, number, NumberFieldConfigSettings> = {\n    id: 'decimals',\n    path: 'decimals',\n    name: 'Decimals',\n\n    editor: standardEditorsRegistry.get('number').editor as any,\n    override: standardEditorsRegistry.get('number').editor as any,\n    process: numberOverrideProcessor,\n\n    settings: {\n      placeholder: 'auto',\n      min: 0,\n      max: 15,\n      integer: true,\n    },\n\n    shouldApply: (field) => field.type === FieldType.number,\n    category,\n  };\n\n  const noValue: FieldConfigPropertyItem<any, string, StringFieldConfigSettings> = {\n    id: 'noValue',\n    path: 'noValue',\n    name: 'No value',\n    description: 'What to show when there is no value',\n\n    editor: standardEditorsRegistry.get('text').editor as any,\n    override: standardEditorsRegistry.get('text').editor as any,\n    process: stringOverrideProcessor,\n\n    settings: {\n      placeholder: '-',\n    },\n    // ??? any optionsUi with no value\n    shouldApply: () => true,\n    category,\n  };\n\n  const links: FieldConfigPropertyItem<any, DataLink[], StringFieldConfigSettings> = {\n    id: 'links',\n    path: 'links',\n    name: 'Data links',\n    editor: standardEditorsRegistry.get('links').editor as any,\n    override: standardEditorsRegistry.get('links').editor as any,\n    process: dataLinksOverrideProcessor,\n    settings: {\n      placeholder: '-',\n    },\n    shouldApply: () => true,\n    category: ['Data links'],\n    getItemsCount: (value) => (value ? value.length : 0),\n  };\n\n  const color: FieldConfigPropertyItem<any, FieldColor | undefined, FieldColorConfigSettings> = {\n    id: 'color',\n    path: 'color',\n    name: 'Color scheme',\n    editor: standardEditorsRegistry.get('fieldColor').editor as any,\n    override: standardEditorsRegistry.get('fieldColor').editor as any,\n    process: identityOverrideProcessor,\n    shouldApply: () => true,\n    settings: {\n      byValueSupport: true,\n      preferThresholdsMode: true,\n    },\n    category,\n  };\n\n  const mappings: FieldConfigPropertyItem<any, ValueMapping[], ValueMappingFieldConfigSettings> = {\n    id: 'mappings',\n    path: 'mappings',\n    name: 'Value mappings',\n    description: 'Modify the display text based on input value',\n\n    editor: standardEditorsRegistry.get('mappings').editor as any,\n    override: standardEditorsRegistry.get('mappings').editor as any,\n    process: valueMappingsOverrideProcessor,\n    settings: {},\n    defaultValue: [],\n    shouldApply: (x) => x.type !== FieldType.time,\n    category: ['Value mappings'],\n    getItemsCount: (value?) => (value ? value.length : 0),\n  };\n\n  const thresholds: FieldConfigPropertyItem<any, ThresholdsConfig, ThresholdsFieldConfigSettings> = {\n    id: 'thresholds',\n    path: 'thresholds',\n    name: 'Thresholds',\n    editor: standardEditorsRegistry.get('thresholds').editor as any,\n    override: standardEditorsRegistry.get('thresholds').editor as any,\n    process: thresholdsOverrideProcessor,\n    settings: {},\n    defaultValue: {\n      mode: ThresholdsMode.Absolute,\n      steps: [\n        { value: -Infinity, color: 'green' },\n        { value: 80, color: 'red' },\n      ],\n    },\n    shouldApply: () => true,\n    category: ['Thresholds'],\n    getItemsCount: (value) => (value ? value.steps.length : 0),\n  };\n\n  return [unit, min, max, decimals, displayName, color, noValue, links, mappings, thresholds];\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAEEC,SAFF,EAGEC,uBAHF,EAOEC,cAPF,EAQEC,2BARF,EAWEC,8BAXF,EAaEC,0BAbF,EAeEC,uBAfF,EAiBEC,uBAjBF,EAkBEC,yBAlBF,EAuBEC,4BAvBF,QAyBO,eAzBP;AA0BA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,MAA3C,QAAyD,aAAzD;AACA,SAASC,eAAT,QAAgC,uDAAhC;AACA,SAASC,qBAAT,QAAsC,6DAAtC;AACA,SAASC,mBAAT,QAAoC,yEAApC;AAEA,SAASC,eAAT,QAAwD,mBAAxD;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,sBAAT,QAAuC,eAAvC;AACA,SAASC,iBAAT,QAAkC,UAAlC;AACA,SAASC,iBAAT,QAAkC,UAAlC;AACA,SAASC,iBAAT,QAAkC,UAAlC;AACA,SAASC,iBAAT,QAAkC,SAAlC;AACA,SAASC,iBAAT,QAAkC,UAAlC;AACA,SAASC,iBAAT,QAAkC,WAAlC;AACA,SAASC,eAAT,QAAgC,SAAhC;AAEA;AACA;AACA;;;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;EACvC,MAAMC,MAA2C,GAAG;IAClDC,EAAE,EAAE,QAD8C;IAElDC,IAAI,EAAE,QAF4C;IAGlDC,WAAW,EAAE,6BAHqC;IAIlDC,MAAM,EAAEZ;EAJ0C,CAApD;EAOA,MAAMa,MAA2C,GAAG;IAClDJ,EAAE,EAAE,QAD8C;IAElDC,IAAI,EAAE,QAF4C;IAGlDC,WAAW,EAAE,6BAHqC;IAIlDC,MAAM,EAAEV;EAJ0C,CAApD;EAOA,MAAMY,IAAyC,GAAG;IAChDL,EAAE,EAAE,MAD4C;IAEhDC,IAAI,EAAE,MAF0C;IAGhDC,WAAW,EAAE,4BAHmC;IAIhDC,MAAM,EAAER;EAJwC,CAAlD;EAOA,MAAMW,OAA8C,GAAG;IACrDN,EAAE,EAAE,SADiD;IAErDC,IAAI,EAAE,cAF+C;IAGrDC,WAAW,EAAE,qBAHwC;IAIrDC,MAAM,EAAEP;EAJ6C,CAAvD;EAOA,MAAMW,OAA6C,GAAG;IACpDP,EAAE,EAAE,SADgD;IAEpDC,IAAI,EAAE,SAF8C;IAGpDC,WAAW,EAAE,6BAHuC;;IAIpDC,MAAM,CAACK,KAAD,EAAQ;MACZ,oBAAO,KAAC,MAAD,oBAAYA,KAAZ;QAAmB,QAAQ,EAAGC,CAAD,IAAOD,KAAK,CAACE,QAAN,CAAeD,CAAC,CAACE,aAAF,CAAgBC,OAA/B;MAApC,GAAP;IACD;;EANmD,CAAtD;EASA,MAAMC,MAAwC,GAAG;IAC/Cb,EAAE,EAAE,QAD2C;IAE/CC,IAAI,EAAE,QAFyC;IAG/CC,WAAW,EAAE,yBAHkC;IAI/CC,MAAM,EAAEX;EAJuC,CAAjD;EAOA,MAAMsB,WAA6C,GAAG;IACpDd,EAAE,EAAE,cADgD;IAEpDC,IAAI,EAAE,cAF8C;IAGpDC,WAAW,EAAE,sCAHuC;IAIpDC,MAAM,EAAEb;EAJ4C,CAAtD;EAOA,MAAMyB,KAAuC,GAAG;IAC9Cf,EAAE,EAAE,OAD0C;IAE9CC,IAAI,EAAE,OAFwC;IAG9CC,WAAW,EAAE,yBAHiC;;IAI9CC,MAAM,CAACK,KAAD,EAAQ;MAAA;;MACZ,oBAAO,KAAC,gBAAD,oBAAsBA,KAAtB;QAA6B,OAAO,0BAAEA,KAAK,CAACQ,IAAN,CAAWC,QAAb,yDAAE,qBAAqBC;MAA3D,GAAP;IACD;;EAN6C,CAAhD;EASA,MAAMC,IAAyC,GAAG;IAChDnB,EAAE,EAAE,MAD4C;IAEhDC,IAAI,EAAE,MAF0C;IAGhDC,WAAW,EAAE,mBAHmC;IAIhDC,MAAM,EAAEN;EAJwC,CAAlD;EAOA,MAAMuB,KAA0C,GAAG;IACjDpB,EAAE,EAAE,OAD6C;IAEjDC,IAAI,EAAE,OAF2C;IAGjDC,WAAW,EAAE,wBAHoC;;IAIjDC,MAAM,CAACK,KAAD,EAAQ;MACZ,oBAAO,KAAC,gBAAD;QAAkB,KAAK,EAAEA,KAAK,CAACa,KAA/B;QAAsC,QAAQ,EAAEb,KAAK,CAACE;MAAtD,EAAP;IACD;;EANgD,CAAnD;EASA,MAAMY,UAAmD,GAAG;IAC1DtB,EAAE,EAAE,YADsD;IAE1DC,IAAI,EAAE,aAFoD;IAG1DC,WAAW,EAAE,uBAH6C;IAI1DC,MAAM,EAAEf;EAJkD,CAA5D;EAOA,MAAMmC,KAA8C,GAAG;IACrDvB,EAAE,EAAE,OADiD;IAErDC,IAAI,EAAE,OAF+C;IAGrDC,WAAW,EAAE,4BAHwC;IAIrDC,MAAM,EAAEd;EAJ6C,CAAvD;EAOA,MAAMmC,WAA6E,GAAG;IACpFxB,EAAE,EAAE,cADgF;IAEpFC,IAAI,EAAE,cAF8E;IAGpFE,MAAM,EAAET,iBAH4E;IAIpFQ,WAAW,EAAE;EAJuE,CAAtF;EAOA,MAAMuB,QAA+C,GAAG;IACtDzB,EAAE,EAAE,UADkD;IAEtDC,IAAI,EAAE,WAFgD;IAGtDC,WAAW,EAAE,qBAHyC;IAItDC,MAAM,EAAEtB;EAJ8C,CAAxD;EAOA,MAAM6C,SAA6E,GAAG;IACpF1B,EAAE,EAAE,YADgF;IAEpFC,IAAI,EAAE,YAF8E;IAGpFC,WAAW,EAAE,iDAHuE;IAIpFC,MAAM,EAAEpB;EAJ4E,CAAtF;EAOA,MAAM4C,eAA4E,GAAG;IACnF3B,EAAE,EAAE,eAD+E;IAEnFC,IAAI,EAAE,WAF6E;IAGnFC,WAAW,EAAE,kBAHsE;IAInFC,MAAM,EAAEjB;EAJ2E,CAArF;EAOA,MAAM0C,QAAqD,GAAG;IAC5D5B,EAAE,EAAE,UADwD;IAE5DC,IAAI,EAAE,UAFsD;IAG5DC,WAAW,EAAE,gCAH+C;IAI5DC,MAAM,EAAElB;EAJoD,CAA9D;EAOA,MAAM4C,UAAyD,GAAG;IAChE7B,EAAE,EAAE,YAD4D;IAEhEC,IAAI,EAAE,YAF0D;IAGhEC,WAAW,EAAE,4BAHmD;IAIhEC,MAAM,EAAEnB;EAJwD,CAAlE;EAOA,OAAO,CACLqB,IADK,EAELN,MAFK,EAGLK,MAHK,EAILG,OAJK,EAKLQ,KALK,EAMLF,MANK,EAOLM,IAPK,EAQLI,KARK,EASLC,WATK,EAULlB,OAVK,EAWLmB,QAXK,EAYLH,UAZK,EAaLF,KAbK,EAcLN,WAdK,EAeLY,SAfK,EAgBLC,eAhBK,EAiBLC,QAjBK,EAkBLC,UAlBK,CAAP;AAoBD,CAzJM;AA2JP;AACA;AACA;;AACA,OAAO,MAAMC,0BAA0B,GAAG,MAAM;EAC9C,MAAMC,QAAQ,GAAG,CAAC,kBAAD,CAAjB;EACA,MAAMC,WAA4E,GAAG;IACnFhC,EAAE,EAAE,aAD+E;IAEnFiC,IAAI,EAAE,aAF6E;IAGnFhC,IAAI,EAAE,cAH6E;IAInFC,WAAW,EAAE,iCAJsE;IAKnFC,MAAM,EAAEhC,uBAAuB,CAAC+D,GAAxB,CAA4B,MAA5B,EAAoC/B,MALuC;IAMnFgC,QAAQ,EAAEhE,uBAAuB,CAAC+D,GAAxB,CAA4B,MAA5B,EAAoC/B,MANqC;IAOnFiC,OAAO,EAAEzD,4BAP0E;IAQnFsC,QAAQ,EAAE;MACRoB,WAAW,EAAE,MADL;MAERC,kBAAkB,EAAE;IAFZ,CARyE;IAYnFC,WAAW,EAAE,MAAM,IAZgE;IAanFR;EAbmF,CAArF;EAgBA,MAAMZ,IAAqE,GAAG;IAC5EnB,EAAE,EAAE,MADwE;IAE5EiC,IAAI,EAAE,MAFsE;IAG5EhC,IAAI,EAAE,MAHsE;IAI5EC,WAAW,EAAE,EAJ+D;IAM5EC,MAAM,EAAEhC,uBAAuB,CAAC+D,GAAxB,CAA4B,MAA5B,EAAoC/B,MANgC;IAO5EgC,QAAQ,EAAEhE,uBAAuB,CAAC+D,GAAxB,CAA4B,MAA5B,EAAoC/B,MAP8B;IAQ5EiC,OAAO,EAAE3D,uBARmE;IAU5EwC,QAAQ,EAAE;MACRoB,WAAW,EAAE;IADL,CAVkE;IAc5EE,WAAW,EAAE,MAAM,IAdyD;IAe5ER;EAf4E,CAA9E;EAkBA,MAAMS,GAAoE,GAAG;IAC3ExC,EAAE,EAAE,KADuE;IAE3EiC,IAAI,EAAE,KAFqE;IAG3EhC,IAAI,EAAE,KAHqE;IAI3EC,WAAW,EAAE,8CAJ8D;IAM3EC,MAAM,EAAEhC,uBAAuB,CAAC+D,GAAxB,CAA4B,QAA5B,EAAsC/B,MAN6B;IAO3EgC,QAAQ,EAAEhE,uBAAuB,CAAC+D,GAAxB,CAA4B,QAA5B,EAAsC/B,MAP2B;IAQ3EiC,OAAO,EAAE5D,uBARkE;IAU3EyC,QAAQ,EAAE;MACRoB,WAAW,EAAE;IADL,CAViE;IAa3EE,WAAW,EAAGE,KAAD,IAAWA,KAAK,CAACC,IAAN,KAAexE,SAAS,CAAC6B,MAb0B;IAc3EgC;EAd2E,CAA7E;EAiBA,MAAMY,GAAoE,GAAG;IAC3E3C,EAAE,EAAE,KADuE;IAE3EiC,IAAI,EAAE,KAFqE;IAG3EhC,IAAI,EAAE,KAHqE;IAI3EC,WAAW,EAAE,8CAJ8D;IAM3EC,MAAM,EAAEhC,uBAAuB,CAAC+D,GAAxB,CAA4B,QAA5B,EAAsC/B,MAN6B;IAO3EgC,QAAQ,EAAEhE,uBAAuB,CAAC+D,GAAxB,CAA4B,QAA5B,EAAsC/B,MAP2B;IAQ3EiC,OAAO,EAAE5D,uBARkE;IAU3EyC,QAAQ,EAAE;MACRoB,WAAW,EAAE;IADL,CAViE;IAc3EE,WAAW,EAAGE,KAAD,IAAWA,KAAK,CAACC,IAAN,KAAexE,SAAS,CAAC6B,MAd0B;IAe3EgC;EAf2E,CAA7E;EAkBA,MAAMa,QAAyE,GAAG;IAChF5C,EAAE,EAAE,UAD4E;IAEhFiC,IAAI,EAAE,UAF0E;IAGhFhC,IAAI,EAAE,UAH0E;IAKhFE,MAAM,EAAEhC,uBAAuB,CAAC+D,GAAxB,CAA4B,QAA5B,EAAsC/B,MALkC;IAMhFgC,QAAQ,EAAEhE,uBAAuB,CAAC+D,GAAxB,CAA4B,QAA5B,EAAsC/B,MANgC;IAOhFiC,OAAO,EAAE5D,uBAPuE;IAShFyC,QAAQ,EAAE;MACRoB,WAAW,EAAE,MADL;MAERG,GAAG,EAAE,CAFG;MAGRG,GAAG,EAAE,EAHG;MAIRE,OAAO,EAAE;IAJD,CATsE;IAgBhFN,WAAW,EAAGE,KAAD,IAAWA,KAAK,CAACC,IAAN,KAAexE,SAAS,CAAC6B,MAhB+B;IAiBhFgC;EAjBgF,CAAlF;EAoBA,MAAMe,OAAwE,GAAG;IAC/E9C,EAAE,EAAE,SAD2E;IAE/EiC,IAAI,EAAE,SAFyE;IAG/EhC,IAAI,EAAE,UAHyE;IAI/EC,WAAW,EAAE,qCAJkE;IAM/EC,MAAM,EAAEhC,uBAAuB,CAAC+D,GAAxB,CAA4B,MAA5B,EAAoC/B,MANmC;IAO/EgC,QAAQ,EAAEhE,uBAAuB,CAAC+D,GAAxB,CAA4B,MAA5B,EAAoC/B,MAPiC;IAQ/EiC,OAAO,EAAE3D,uBARsE;IAU/EwC,QAAQ,EAAE;MACRoB,WAAW,EAAE;IADL,CAVqE;IAa/E;IACAE,WAAW,EAAE,MAAM,IAd4D;IAe/ER;EAf+E,CAAjF;EAkBA,MAAMR,KAA0E,GAAG;IACjFvB,EAAE,EAAE,OAD6E;IAEjFiC,IAAI,EAAE,OAF2E;IAGjFhC,IAAI,EAAE,YAH2E;IAIjFE,MAAM,EAAEhC,uBAAuB,CAAC+D,GAAxB,CAA4B,OAA5B,EAAqC/B,MAJoC;IAKjFgC,QAAQ,EAAEhE,uBAAuB,CAAC+D,GAAxB,CAA4B,OAA5B,EAAqC/B,MALkC;IAMjFiC,OAAO,EAAE7D,0BANwE;IAOjF0C,QAAQ,EAAE;MACRoB,WAAW,EAAE;IADL,CAPuE;IAUjFE,WAAW,EAAE,MAAM,IAV8D;IAWjFR,QAAQ,EAAE,CAAC,YAAD,CAXuE;IAYjFgB,aAAa,EAAG1B,KAAD,IAAYA,KAAK,GAAGA,KAAK,CAAC2B,MAAT,GAAkB;EAZ+B,CAAnF;EAeA,MAAM5B,KAAqF,GAAG;IAC5FpB,EAAE,EAAE,OADwF;IAE5FiC,IAAI,EAAE,OAFsF;IAG5FhC,IAAI,EAAE,cAHsF;IAI5FE,MAAM,EAAEhC,uBAAuB,CAAC+D,GAAxB,CAA4B,YAA5B,EAA0C/B,MAJ0C;IAK5FgC,QAAQ,EAAEhE,uBAAuB,CAAC+D,GAAxB,CAA4B,YAA5B,EAA0C/B,MALwC;IAM5FiC,OAAO,EAAE1D,yBANmF;IAO5F6D,WAAW,EAAE,MAAM,IAPyE;IAQ5FtB,QAAQ,EAAE;MACRgC,cAAc,EAAE,IADR;MAERC,oBAAoB,EAAE;IAFd,CARkF;IAY5FnB;EAZ4F,CAA9F;EAeA,MAAMH,QAAuF,GAAG;IAC9F5B,EAAE,EAAE,UAD0F;IAE9FiC,IAAI,EAAE,UAFwF;IAG9FhC,IAAI,EAAE,gBAHwF;IAI9FC,WAAW,EAAE,8CAJiF;IAM9FC,MAAM,EAAEhC,uBAAuB,CAAC+D,GAAxB,CAA4B,UAA5B,EAAwC/B,MAN8C;IAO9FgC,QAAQ,EAAEhE,uBAAuB,CAAC+D,GAAxB,CAA4B,UAA5B,EAAwC/B,MAP4C;IAQ9FiC,OAAO,EAAE9D,8BARqF;IAS9F2C,QAAQ,EAAE,EAToF;IAU9FkC,YAAY,EAAE,EAVgF;IAW9FZ,WAAW,EAAGa,CAAD,IAAOA,CAAC,CAACV,IAAF,KAAWxE,SAAS,CAACmF,IAXqD;IAY9FtB,QAAQ,EAAE,CAAC,gBAAD,CAZoF;IAa9FgB,aAAa,EAAG1B,KAAD,IAAaA,KAAK,GAAGA,KAAK,CAAC2B,MAAT,GAAkB;EAb2C,CAAhG;EAgBA,MAAMnB,UAAyF,GAAG;IAChG7B,EAAE,EAAE,YAD4F;IAEhGiC,IAAI,EAAE,YAF0F;IAGhGhC,IAAI,EAAE,YAH0F;IAIhGE,MAAM,EAAEhC,uBAAuB,CAAC+D,GAAxB,CAA4B,YAA5B,EAA0C/B,MAJ8C;IAKhGgC,QAAQ,EAAEhE,uBAAuB,CAAC+D,GAAxB,CAA4B,YAA5B,EAA0C/B,MAL4C;IAMhGiC,OAAO,EAAE/D,2BANuF;IAOhG4C,QAAQ,EAAE,EAPsF;IAQhGkC,YAAY,EAAE;MACZG,IAAI,EAAElF,cAAc,CAACmF,QADT;MAEZC,KAAK,EAAE,CACL;QAAEnC,KAAK,EAAE,CAACoC,QAAV;QAAoBrC,KAAK,EAAE;MAA3B,CADK,EAEL;QAAEC,KAAK,EAAE,EAAT;QAAaD,KAAK,EAAE;MAApB,CAFK;IAFK,CARkF;IAehGmB,WAAW,EAAE,MAAM,IAf6E;IAgBhGR,QAAQ,EAAE,CAAC,YAAD,CAhBsF;IAiBhGgB,aAAa,EAAG1B,KAAD,IAAYA,KAAK,GAAGA,KAAK,CAACmC,KAAN,CAAYR,MAAf,GAAwB;EAjBwC,CAAlG;EAoBA,OAAO,CAAC7B,IAAD,EAAOqB,GAAP,EAAYG,GAAZ,EAAiBC,QAAjB,EAA2BZ,WAA3B,EAAwCZ,KAAxC,EAA+C0B,OAA/C,EAAwDvB,KAAxD,EAA+DK,QAA/D,EAAyEC,UAAzE,CAAP;AACD,CAhLM"},"metadata":{},"sourceType":"module"}