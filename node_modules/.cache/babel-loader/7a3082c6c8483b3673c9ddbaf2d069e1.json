{"ast":null,"code":"var _Divider;\n\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { css } from '@emotion/css';\nimport cx from 'classnames';\nimport React from 'react';\nimport IoLink from 'react-icons/lib/io/link';\nimport { dateTimeFormat } from '@grafana/data';\nimport { DataLinkButton, TextArea, useStyles2 } from '@grafana/ui';\nimport { autoColor } from '../../Theme';\nimport { Divider } from '../../common/Divider';\nimport LabeledList from '../../common/LabeledList';\nimport { uAlignIcon, ubM0, ubMb1, ubMy1, ubTxRightAlign } from '../../uberUtilityStyles';\nimport { TopOfViewRefType } from '../VirtualizedTraceView';\nimport { formatDuration } from '../utils';\nimport AccordianKeyValues from './AccordianKeyValues';\nimport AccordianLogs from './AccordianLogs';\nimport AccordianReferences from './AccordianReferences';\nimport AccordianText from './AccordianText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst getStyles = theme => {\n  return {\n    header: css`\n      display: flex;\n      align-items: flex-start;\n      justify-content: space-between;\n      gap: 0 1rem;\n      margin-bottom: 0.25rem;\n    `,\n    listWrapper: css`\n      overflow: hidden;\n    `,\n    debugInfo: css`\n      label: debugInfo;\n      display: block;\n      letter-spacing: 0.25px;\n      margin: 0.5em 0 -0.75em;\n      text-align: right;\n    `,\n    debugLabel: css`\n      label: debugLabel;\n      &::before {\n        color: ${autoColor(theme, '#bbb')};\n        content: attr(data-label);\n      }\n    `,\n    debugValue: css`\n      label: debugValue;\n      background-color: inherit;\n      border: none;\n      color: ${autoColor(theme, '#888')};\n      cursor: pointer;\n      &:hover {\n        color: ${autoColor(theme, '#333')};\n      }\n    `,\n    AccordianWarnings: css`\n      label: AccordianWarnings;\n      background: ${autoColor(theme, '#fafafa')};\n      border: 1px solid ${autoColor(theme, '#e4e4e4')};\n      margin-bottom: 0.25rem;\n    `,\n    AccordianWarningsHeader: css`\n      label: AccordianWarningsHeader;\n      background: ${autoColor(theme, '#fff7e6')};\n      padding: 0.25rem 0.5rem;\n      &:hover {\n        background: ${autoColor(theme, '#ffe7ba')};\n      }\n    `,\n    AccordianWarningsHeaderOpen: css`\n      label: AccordianWarningsHeaderOpen;\n      border-bottom: 1px solid ${autoColor(theme, '#e8e8e8')};\n    `,\n    AccordianWarningsLabel: css`\n      label: AccordianWarningsLabel;\n      color: ${autoColor(theme, '#d36c08')};\n    `,\n    Textarea: css`\n      word-break: break-all;\n      white-space: pre;\n    `,\n    LinkIcon: css`\n      font-size: 1.5em;\n    `\n  };\n};\n\nexport default function SpanDetail(props) {\n  var _links$logLinks, _links$logLinks2;\n\n  const {\n    detailState,\n    linksGetter,\n    logItemToggle,\n    logsToggle,\n    processToggle,\n    span,\n    tagsToggle,\n    traceStartTime,\n    warningsToggle,\n    stackTracesToggle,\n    referencesToggle,\n    referenceItemToggle,\n    createSpanLink,\n    createFocusSpanLink,\n    topOfViewRefType\n  } = props;\n  const {\n    isTagsOpen,\n    isProcessOpen,\n    logs: logsState,\n    isWarningsOpen,\n    references: referencesState,\n    isStackTracesOpen\n  } = detailState;\n  const {\n    operationName,\n    process,\n    duration,\n    relativeStartTime,\n    startTime,\n    traceID,\n    spanID,\n    logs,\n    tags,\n    warnings,\n    references,\n    stackTraces\n  } = span;\n  const {\n    timeZone\n  } = props;\n  const overviewItems = [{\n    key: 'svc',\n    label: 'Service:',\n    value: process.serviceName\n  }, {\n    key: 'duration',\n    label: 'Duration:',\n    value: formatDuration(duration)\n  }, {\n    key: 'start',\n    label: 'Start Time:',\n    value: formatDuration(relativeStartTime) + getAbsoluteTime(startTime, timeZone)\n  }, ...(span.childSpanCount > 0 ? [{\n    key: 'child_count',\n    label: 'Child Count:',\n    value: span.childSpanCount\n  }] : [])];\n  const styles = useStyles2(getStyles);\n  const links = createSpanLink === null || createSpanLink === void 0 ? void 0 : createSpanLink(span);\n  const focusSpanLink = createFocusSpanLink(traceID, spanID);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: styles.header,\n      children: [/*#__PURE__*/_jsx(\"h2\", {\n        className: cx(ubM0),\n        children: operationName\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: styles.listWrapper,\n        children: /*#__PURE__*/_jsx(LabeledList, {\n          className: ubTxRightAlign,\n          divider: true,\n          items: overviewItems\n        })\n      })]\n    }), links !== null && links !== void 0 && (_links$logLinks = links.logLinks) !== null && _links$logLinks !== void 0 && _links$logLinks[0] ? /*#__PURE__*/_jsx(DataLinkButton, {\n      link: Object.assign({}, links === null || links === void 0 ? void 0 : (_links$logLinks2 = links.logLinks) === null || _links$logLinks2 === void 0 ? void 0 : _links$logLinks2[0], {\n        title: 'Logs for this span'\n      }),\n      buttonProps: {\n        icon: 'gf-logs'\n      }\n    }) : null, _Divider || (_Divider = /*#__PURE__*/_jsx(Divider, {\n      className: ubMy1,\n      type: 'horizontal'\n    })), /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(AccordianKeyValues, {\n          data: tags,\n          label: \"Tags\",\n          linksGetter: linksGetter,\n          isOpen: isTagsOpen,\n          onToggle: () => tagsToggle(spanID)\n        }), process.tags && /*#__PURE__*/_jsx(AccordianKeyValues, {\n          className: ubMb1,\n          data: process.tags,\n          label: \"Process\",\n          linksGetter: linksGetter,\n          isOpen: isProcessOpen,\n          onToggle: () => processToggle(spanID)\n        })]\n      }), logs && logs.length > 0 && /*#__PURE__*/_jsx(AccordianLogs, {\n        linksGetter: linksGetter,\n        logs: logs,\n        isOpen: logsState.isOpen,\n        openedItems: logsState.openedItems,\n        onToggle: () => logsToggle(spanID),\n        onItemToggle: logItem => logItemToggle(spanID, logItem),\n        timestamp: traceStartTime\n      }), warnings && warnings.length > 0 && /*#__PURE__*/_jsx(AccordianText, {\n        className: styles.AccordianWarnings,\n        headerClassName: styles.AccordianWarningsHeader,\n        label: /*#__PURE__*/_jsx(\"span\", {\n          className: styles.AccordianWarningsLabel,\n          children: \"Warnings\"\n        }),\n        data: warnings,\n        isOpen: isWarningsOpen,\n        onToggle: () => warningsToggle(spanID)\n      }), stackTraces && stackTraces.length && /*#__PURE__*/_jsx(AccordianText, {\n        label: \"Stack trace\",\n        data: stackTraces,\n        isOpen: isStackTracesOpen,\n        TextComponent: textComponentProps => {\n          var _textComponentProps$d;\n\n          let text;\n\n          if (((_textComponentProps$d = textComponentProps.data) === null || _textComponentProps$d === void 0 ? void 0 : _textComponentProps$d.length) > 1) {\n            text = textComponentProps.data.map((stackTrace, index) => `StackTrace ${index + 1}:\\n${stackTrace}`).join('\\n');\n          } else {\n            var _textComponentProps$d2;\n\n            text = (_textComponentProps$d2 = textComponentProps.data) === null || _textComponentProps$d2 === void 0 ? void 0 : _textComponentProps$d2[0];\n          }\n\n          return /*#__PURE__*/_jsx(TextArea, {\n            className: styles.Textarea,\n            style: {\n              cursor: 'unset'\n            },\n            readOnly: true,\n            cols: 10,\n            rows: 10,\n            value: text\n          });\n        },\n        onToggle: () => stackTracesToggle(spanID)\n      }), references && references.length > 0 && (references.length > 1 || references[0].refType !== 'CHILD_OF') && /*#__PURE__*/_jsx(AccordianReferences, {\n        data: references,\n        isOpen: referencesState.isOpen,\n        openedItems: referencesState.openedItems,\n        onToggle: () => referencesToggle(spanID),\n        onItemToggle: reference => referenceItemToggle(spanID, reference),\n        createFocusSpanLink: createFocusSpanLink\n      }), topOfViewRefType === TopOfViewRefType.Explore && /*#__PURE__*/_jsxs(\"small\", {\n        className: styles.debugInfo,\n        children: [/*#__PURE__*/_jsx(\"a\", Object.assign({}, focusSpanLink, {\n          onClick: e => {\n            // click handling logic copied from react router:\n            // https://github.com/remix-run/react-router/blob/997b4d67e506d39ac6571cb369d6d2d6b3dda557/packages/react-router-dom/index.tsx#L392-L394s\n            if (focusSpanLink.onClick && e.button === 0 && ( // Ignore everything but left clicks\n            !e.currentTarget.target || e.currentTarget.target === '_self') && // Let browser handle \"target=_blank\" etc.\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) // Ignore clicks with modifier keys\n            ) {\n              e.preventDefault();\n              focusSpanLink.onClick(e);\n            }\n          },\n          children: /*#__PURE__*/_jsx(IoLink, {\n            className: cx(uAlignIcon, styles.LinkIcon)\n          })\n        })), /*#__PURE__*/_jsx(\"span\", {\n          className: styles.debugLabel,\n          \"data-label\": \"SpanID:\"\n        }), \" \", spanID]\n      })]\n    })]\n  });\n}\nexport const getAbsoluteTime = (startTime, timeZone) => {\n  const dateStr = dateTimeFormat(startTime / 1000, {\n    timeZone,\n    defaultWithMS: true\n  });\n  const match = dateStr.split(' ');\n  const absoluteTime = match[1] ? match[1] : dateStr;\n  return ` (${absoluteTime})`;\n};","map":{"version":3,"names":["css","cx","React","IoLink","dateTimeFormat","DataLinkButton","TextArea","useStyles2","autoColor","Divider","LabeledList","uAlignIcon","ubM0","ubMb1","ubMy1","ubTxRightAlign","TopOfViewRefType","formatDuration","AccordianKeyValues","AccordianLogs","AccordianReferences","AccordianText","getStyles","theme","header","listWrapper","debugInfo","debugLabel","debugValue","AccordianWarnings","AccordianWarningsHeader","AccordianWarningsHeaderOpen","AccordianWarningsLabel","Textarea","LinkIcon","SpanDetail","props","detailState","linksGetter","logItemToggle","logsToggle","processToggle","span","tagsToggle","traceStartTime","warningsToggle","stackTracesToggle","referencesToggle","referenceItemToggle","createSpanLink","createFocusSpanLink","topOfViewRefType","isTagsOpen","isProcessOpen","logs","logsState","isWarningsOpen","references","referencesState","isStackTracesOpen","operationName","process","duration","relativeStartTime","startTime","traceID","spanID","tags","warnings","stackTraces","timeZone","overviewItems","key","label","value","serviceName","getAbsoluteTime","childSpanCount","styles","links","focusSpanLink","logLinks","title","icon","length","isOpen","openedItems","logItem","textComponentProps","text","data","map","stackTrace","index","join","cursor","refType","reference","Explore","e","onClick","button","currentTarget","target","metaKey","altKey","ctrlKey","shiftKey","preventDefault","dateStr","defaultWithMS","match","split","absoluteTime"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/TraceTimelineViewer/SpanDetail/index.tsx"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { css } from '@emotion/css';\nimport cx from 'classnames';\nimport React from 'react';\nimport IoLink from 'react-icons/lib/io/link';\n\nimport { dateTimeFormat, GrafanaTheme2, LinkModel, TimeZone } from '@grafana/data';\nimport { DataLinkButton, TextArea, useStyles2 } from '@grafana/ui';\n\nimport { autoColor } from '../../Theme';\nimport { Divider } from '../../common/Divider';\nimport LabeledList from '../../common/LabeledList';\nimport { SpanLinkFunc, TNil } from '../../types';\nimport { TraceKeyValuePair, TraceLink, TraceLog, TraceSpan, TraceSpanReference } from '../../types/trace';\nimport { uAlignIcon, ubM0, ubMb1, ubMy1, ubTxRightAlign } from '../../uberUtilityStyles';\nimport { TopOfViewRefType } from '../VirtualizedTraceView';\nimport { formatDuration } from '../utils';\n\nimport AccordianKeyValues from './AccordianKeyValues';\nimport AccordianLogs from './AccordianLogs';\nimport AccordianReferences from './AccordianReferences';\nimport AccordianText from './AccordianText';\nimport DetailState from './DetailState';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css`\n      display: flex;\n      align-items: flex-start;\n      justify-content: space-between;\n      gap: 0 1rem;\n      margin-bottom: 0.25rem;\n    `,\n    listWrapper: css`\n      overflow: hidden;\n    `,\n    debugInfo: css`\n      label: debugInfo;\n      display: block;\n      letter-spacing: 0.25px;\n      margin: 0.5em 0 -0.75em;\n      text-align: right;\n    `,\n    debugLabel: css`\n      label: debugLabel;\n      &::before {\n        color: ${autoColor(theme, '#bbb')};\n        content: attr(data-label);\n      }\n    `,\n    debugValue: css`\n      label: debugValue;\n      background-color: inherit;\n      border: none;\n      color: ${autoColor(theme, '#888')};\n      cursor: pointer;\n      &:hover {\n        color: ${autoColor(theme, '#333')};\n      }\n    `,\n    AccordianWarnings: css`\n      label: AccordianWarnings;\n      background: ${autoColor(theme, '#fafafa')};\n      border: 1px solid ${autoColor(theme, '#e4e4e4')};\n      margin-bottom: 0.25rem;\n    `,\n    AccordianWarningsHeader: css`\n      label: AccordianWarningsHeader;\n      background: ${autoColor(theme, '#fff7e6')};\n      padding: 0.25rem 0.5rem;\n      &:hover {\n        background: ${autoColor(theme, '#ffe7ba')};\n      }\n    `,\n    AccordianWarningsHeaderOpen: css`\n      label: AccordianWarningsHeaderOpen;\n      border-bottom: 1px solid ${autoColor(theme, '#e8e8e8')};\n    `,\n    AccordianWarningsLabel: css`\n      label: AccordianWarningsLabel;\n      color: ${autoColor(theme, '#d36c08')};\n    `,\n    Textarea: css`\n      word-break: break-all;\n      white-space: pre;\n    `,\n    LinkIcon: css`\n      font-size: 1.5em;\n    `,\n  };\n};\n\ntype SpanDetailProps = {\n  detailState: DetailState;\n  linksGetter: ((links: TraceKeyValuePair[], index: number) => TraceLink[]) | TNil;\n  logItemToggle: (spanID: string, log: TraceLog) => void;\n  logsToggle: (spanID: string) => void;\n  processToggle: (spanID: string) => void;\n  span: TraceSpan;\n  timeZone: TimeZone;\n  tagsToggle: (spanID: string) => void;\n  traceStartTime: number;\n  warningsToggle: (spanID: string) => void;\n  stackTracesToggle: (spanID: string) => void;\n  referenceItemToggle: (spanID: string, reference: TraceSpanReference) => void;\n  referencesToggle: (spanID: string) => void;\n  createSpanLink?: SpanLinkFunc;\n  focusedSpanId?: string;\n  createFocusSpanLink: (traceId: string, spanId: string) => LinkModel;\n  topOfViewRefType?: TopOfViewRefType;\n};\n\nexport default function SpanDetail(props: SpanDetailProps) {\n  const {\n    detailState,\n    linksGetter,\n    logItemToggle,\n    logsToggle,\n    processToggle,\n    span,\n    tagsToggle,\n    traceStartTime,\n    warningsToggle,\n    stackTracesToggle,\n    referencesToggle,\n    referenceItemToggle,\n    createSpanLink,\n    createFocusSpanLink,\n    topOfViewRefType,\n  } = props;\n  const {\n    isTagsOpen,\n    isProcessOpen,\n    logs: logsState,\n    isWarningsOpen,\n    references: referencesState,\n    isStackTracesOpen,\n  } = detailState;\n  const {\n    operationName,\n    process,\n    duration,\n    relativeStartTime,\n    startTime,\n    traceID,\n    spanID,\n    logs,\n    tags,\n    warnings,\n    references,\n    stackTraces,\n  } = span;\n  const { timeZone } = props;\n  const overviewItems = [\n    {\n      key: 'svc',\n      label: 'Service:',\n      value: process.serviceName,\n    },\n    {\n      key: 'duration',\n      label: 'Duration:',\n      value: formatDuration(duration),\n    },\n    {\n      key: 'start',\n      label: 'Start Time:',\n      value: formatDuration(relativeStartTime) + getAbsoluteTime(startTime, timeZone),\n    },\n    ...(span.childSpanCount > 0\n      ? [\n          {\n            key: 'child_count',\n            label: 'Child Count:',\n            value: span.childSpanCount,\n          },\n        ]\n      : []),\n  ];\n  const styles = useStyles2(getStyles);\n  const links = createSpanLink?.(span);\n  const focusSpanLink = createFocusSpanLink(traceID, spanID);\n\n  return (\n    <div>\n      <div className={styles.header}>\n        <h2 className={cx(ubM0)}>{operationName}</h2>\n        <div className={styles.listWrapper}>\n          <LabeledList className={ubTxRightAlign} divider={true} items={overviewItems} />\n        </div>\n      </div>\n      {links?.logLinks?.[0] ? (\n        <DataLinkButton\n          link={{ ...links?.logLinks?.[0], title: 'Logs for this span' } as any}\n          buttonProps={{ icon: 'gf-logs' }}\n        />\n      ) : null}\n      <Divider className={ubMy1} type={'horizontal'} />\n      <div>\n        <div>\n          <AccordianKeyValues\n            data={tags}\n            label=\"Tags\"\n            linksGetter={linksGetter}\n            isOpen={isTagsOpen}\n            onToggle={() => tagsToggle(spanID)}\n          />\n          {process.tags && (\n            <AccordianKeyValues\n              className={ubMb1}\n              data={process.tags}\n              label=\"Process\"\n              linksGetter={linksGetter}\n              isOpen={isProcessOpen}\n              onToggle={() => processToggle(spanID)}\n            />\n          )}\n        </div>\n        {logs && logs.length > 0 && (\n          <AccordianLogs\n            linksGetter={linksGetter}\n            logs={logs}\n            isOpen={logsState.isOpen}\n            openedItems={logsState.openedItems}\n            onToggle={() => logsToggle(spanID)}\n            onItemToggle={(logItem) => logItemToggle(spanID, logItem)}\n            timestamp={traceStartTime}\n          />\n        )}\n        {warnings && warnings.length > 0 && (\n          <AccordianText\n            className={styles.AccordianWarnings}\n            headerClassName={styles.AccordianWarningsHeader}\n            label={<span className={styles.AccordianWarningsLabel}>Warnings</span>}\n            data={warnings}\n            isOpen={isWarningsOpen}\n            onToggle={() => warningsToggle(spanID)}\n          />\n        )}\n        {stackTraces && stackTraces.length && (\n          <AccordianText\n            label=\"Stack trace\"\n            data={stackTraces}\n            isOpen={isStackTracesOpen}\n            TextComponent={(textComponentProps) => {\n              let text;\n              if (textComponentProps.data?.length > 1) {\n                text = textComponentProps.data\n                  .map((stackTrace, index) => `StackTrace ${index + 1}:\\n${stackTrace}`)\n                  .join('\\n');\n              } else {\n                text = textComponentProps.data?.[0];\n              }\n              return (\n                <TextArea\n                  className={styles.Textarea}\n                  style={{ cursor: 'unset' }}\n                  readOnly\n                  cols={10}\n                  rows={10}\n                  value={text}\n                />\n              );\n            }}\n            onToggle={() => stackTracesToggle(spanID)}\n          />\n        )}\n        {references && references.length > 0 && (references.length > 1 || references[0].refType !== 'CHILD_OF') && (\n          <AccordianReferences\n            data={references}\n            isOpen={referencesState.isOpen}\n            openedItems={referencesState.openedItems}\n            onToggle={() => referencesToggle(spanID)}\n            onItemToggle={(reference) => referenceItemToggle(spanID, reference)}\n            createFocusSpanLink={createFocusSpanLink}\n          />\n        )}\n        {topOfViewRefType === TopOfViewRefType.Explore && (\n          <small className={styles.debugInfo}>\n            <a\n              {...focusSpanLink}\n              onClick={(e) => {\n                // click handling logic copied from react router:\n                // https://github.com/remix-run/react-router/blob/997b4d67e506d39ac6571cb369d6d2d6b3dda557/packages/react-router-dom/index.tsx#L392-L394s\n                if (\n                  focusSpanLink.onClick &&\n                  e.button === 0 && // Ignore everything but left clicks\n                  (!e.currentTarget.target || e.currentTarget.target === '_self') && // Let browser handle \"target=_blank\" etc.\n                  !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) // Ignore clicks with modifier keys\n                ) {\n                  e.preventDefault();\n                  focusSpanLink.onClick(e);\n                }\n              }}\n            >\n              <IoLink className={cx(uAlignIcon, styles.LinkIcon)}></IoLink>\n            </a>\n            <span className={styles.debugLabel} data-label=\"SpanID:\" /> {spanID}\n          </small>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const getAbsoluteTime = (startTime: number, timeZone: TimeZone) => {\n  const dateStr = dateTimeFormat(startTime / 1000, { timeZone, defaultWithMS: true });\n  const match = dateStr.split(' ');\n  const absoluteTime = match[1] ? match[1] : dateStr;\n  return ` (${absoluteTime})`;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}