{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport memoizeOne from 'memoize-one';\nimport React, { PureComponent } from 'react';\nimport { LogsDedupStrategy, sortLogRows } from '@grafana/data';\nimport { withTheme2 } from '../../themes/index';\n//Components\nimport { LogRow } from './LogRow';\nimport { getLogRowStyles } from './getLogRowStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const PREVIEW_LIMIT = 100;\n\nclass UnThemedLogRows extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"renderAllTimer\", null);\n\n    _defineProperty(this, \"state\", {\n      renderAll: false\n    });\n\n    _defineProperty(this, \"makeGetRows\", memoizeOne(orderedRows => {\n      return () => orderedRows;\n    }));\n\n    _defineProperty(this, \"sortLogs\", memoizeOne((logRows, logsSortOrder) => sortLogRows(logRows, logsSortOrder)));\n  }\n\n  componentDidMount() {\n    // Staged rendering\n    const {\n      logRows,\n      previewLimit\n    } = this.props;\n    const rowCount = logRows ? logRows.length : 0; // Render all right away if not too far over the limit\n\n    const renderAll = rowCount <= previewLimit * 2;\n\n    if (renderAll) {\n      this.setState({\n        renderAll\n      });\n    } else {\n      this.renderAllTimer = window.setTimeout(() => this.setState({\n        renderAll: true\n      }), 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.renderAllTimer) {\n      clearTimeout(this.renderAllTimer);\n    }\n  }\n\n  render() {\n    const {\n      dedupStrategy,\n      showContextToggle,\n      showLabels,\n      showTime,\n      wrapLogMessage,\n      prettifyLogMessage,\n      logRows,\n      deduplicatedRows,\n      timeZone,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      theme,\n      enableLogDetails,\n      previewLimit,\n      getFieldLinks,\n      logsSortOrder,\n      showDetectedFields,\n      onClickShowDetectedField,\n      onClickHideDetectedField,\n      forceEscape,\n      onLogRowHover\n    } = this.props;\n    const {\n      renderAll\n    } = this.state;\n    const {\n      logsRowsTable\n    } = getLogRowStyles(theme);\n    const dedupedRows = deduplicatedRows ? deduplicatedRows : logRows;\n    const hasData = logRows && logRows.length > 0;\n    const dedupCount = dedupedRows ? dedupedRows.reduce((sum, row) => row.duplicates ? sum + row.duplicates : sum, 0) : 0;\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none && dedupCount > 0; // Staged rendering\n\n    const processedRows = dedupedRows ? dedupedRows : [];\n    const orderedRows = logsSortOrder ? this.sortLogs(processedRows, logsSortOrder) : processedRows;\n    const firstRows = orderedRows.slice(0, previewLimit);\n    const lastRows = orderedRows.slice(previewLimit, orderedRows.length); // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n\n    const getRows = this.makeGetRows(orderedRows);\n    const getRowContext = this.props.getRowContext ? this.props.getRowContext : () => Promise.resolve([]);\n    return /*#__PURE__*/_jsx(\"table\", {\n      className: logsRowsTable,\n      children: /*#__PURE__*/_jsxs(\"tbody\", {\n        children: [hasData && firstRows.map((row, index) => /*#__PURE__*/_jsx(LogRow, {\n          getRows: getRows,\n          getRowContext: getRowContext,\n          row: row,\n          showContextToggle: showContextToggle,\n          showDuplicates: showDuplicates,\n          showLabels: showLabels,\n          showTime: showTime,\n          showDetectedFields: showDetectedFields,\n          wrapLogMessage: wrapLogMessage,\n          prettifyLogMessage: prettifyLogMessage,\n          timeZone: timeZone,\n          enableLogDetails: enableLogDetails,\n          onClickFilterLabel: onClickFilterLabel,\n          onClickFilterOutLabel: onClickFilterOutLabel,\n          onClickShowDetectedField: onClickShowDetectedField,\n          onClickHideDetectedField: onClickHideDetectedField,\n          getFieldLinks: getFieldLinks,\n          logsSortOrder: logsSortOrder,\n          forceEscape: forceEscape,\n          onLogRowHover: onLogRowHover\n        }, row.uid)), hasData && renderAll && lastRows.map((row, index) => /*#__PURE__*/_jsx(LogRow, {\n          getRows: getRows,\n          getRowContext: getRowContext,\n          row: row,\n          showContextToggle: showContextToggle,\n          showDuplicates: showDuplicates,\n          showLabels: showLabels,\n          showTime: showTime,\n          showDetectedFields: showDetectedFields,\n          wrapLogMessage: wrapLogMessage,\n          prettifyLogMessage: prettifyLogMessage,\n          timeZone: timeZone,\n          enableLogDetails: enableLogDetails,\n          onClickFilterLabel: onClickFilterLabel,\n          onClickFilterOutLabel: onClickFilterOutLabel,\n          onClickShowDetectedField: onClickShowDetectedField,\n          onClickHideDetectedField: onClickHideDetectedField,\n          getFieldLinks: getFieldLinks,\n          logsSortOrder: logsSortOrder,\n          forceEscape: forceEscape,\n          onLogRowHover: onLogRowHover\n        }, row.uid)), hasData && !renderAll && /*#__PURE__*/_jsx(\"tr\", {\n          children: /*#__PURE__*/_jsxs(\"td\", {\n            colSpan: 5,\n            children: [\"Rendering \", orderedRows.length - previewLimit, \" rows...\"]\n          })\n        })]\n      })\n    });\n  }\n\n}\n\n_defineProperty(UnThemedLogRows, \"defaultProps\", {\n  previewLimit: PREVIEW_LIMIT\n});\n\nexport const LogRows = withTheme2(UnThemedLogRows);\nLogRows.displayName = 'LogsRows';","map":{"version":3,"names":["memoizeOne","React","PureComponent","LogsDedupStrategy","sortLogRows","withTheme2","LogRow","getLogRowStyles","PREVIEW_LIMIT","UnThemedLogRows","renderAll","orderedRows","logRows","logsSortOrder","componentDidMount","previewLimit","props","rowCount","length","setState","renderAllTimer","window","setTimeout","componentWillUnmount","clearTimeout","render","dedupStrategy","showContextToggle","showLabels","showTime","wrapLogMessage","prettifyLogMessage","deduplicatedRows","timeZone","onClickFilterLabel","onClickFilterOutLabel","theme","enableLogDetails","getFieldLinks","showDetectedFields","onClickShowDetectedField","onClickHideDetectedField","forceEscape","onLogRowHover","state","logsRowsTable","dedupedRows","hasData","dedupCount","reduce","sum","row","duplicates","showDuplicates","none","processedRows","sortLogs","firstRows","slice","lastRows","getRows","makeGetRows","getRowContext","Promise","resolve","map","index","uid","LogRows","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Logs/LogRows.tsx"],"sourcesContent":["import memoizeOne from 'memoize-one';\nimport React, { PureComponent } from 'react';\n\nimport { TimeZone, LogsDedupStrategy, LogRowModel, Field, LinkModel, LogsSortOrder, sortLogRows } from '@grafana/data';\n\nimport { withTheme2 } from '../../themes/index';\nimport { Themeable2 } from '../../types/theme';\n\n//Components\nimport { LogRow } from './LogRow';\nimport { RowContextOptions } from './LogRowContextProvider';\nimport { getLogRowStyles } from './getLogRowStyles';\n\nexport const PREVIEW_LIMIT = 100;\n\nexport interface Props extends Themeable2 {\n  logRows?: LogRowModel[];\n  deduplicatedRows?: LogRowModel[];\n  dedupStrategy: LogsDedupStrategy;\n  showLabels: boolean;\n  showTime: boolean;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  timeZone: TimeZone;\n  enableLogDetails: boolean;\n  logsSortOrder?: LogsSortOrder | null;\n  previewLimit?: number;\n  forceEscape?: boolean;\n  showDetectedFields?: string[];\n  showContextToggle?: (row?: LogRowModel) => boolean;\n  onClickFilterLabel?: (key: string, value: string) => void;\n  onClickFilterOutLabel?: (key: string, value: string) => void;\n  getRowContext?: (row: LogRowModel, options?: RowContextOptions) => Promise<any>;\n  getFieldLinks?: (field: Field, rowIndex: number) => Array<LinkModel<Field>>;\n  onClickShowDetectedField?: (key: string) => void;\n  onClickHideDetectedField?: (key: string) => void;\n  onLogRowHover?: (row?: LogRowModel) => void;\n}\n\ninterface State {\n  renderAll: boolean;\n}\n\nclass UnThemedLogRows extends PureComponent<Props, State> {\n  renderAllTimer: number | null = null;\n\n  static defaultProps = {\n    previewLimit: PREVIEW_LIMIT,\n  };\n\n  state: State = {\n    renderAll: false,\n  };\n\n  componentDidMount() {\n    // Staged rendering\n    const { logRows, previewLimit } = this.props;\n    const rowCount = logRows ? logRows.length : 0;\n    // Render all right away if not too far over the limit\n    const renderAll = rowCount <= previewLimit! * 2;\n    if (renderAll) {\n      this.setState({ renderAll });\n    } else {\n      this.renderAllTimer = window.setTimeout(() => this.setState({ renderAll: true }), 2000);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.renderAllTimer) {\n      clearTimeout(this.renderAllTimer);\n    }\n  }\n\n  makeGetRows = memoizeOne((orderedRows: LogRowModel[]) => {\n    return () => orderedRows;\n  });\n\n  sortLogs = memoizeOne((logRows: LogRowModel[], logsSortOrder: LogsSortOrder): LogRowModel[] =>\n    sortLogRows(logRows, logsSortOrder)\n  );\n\n  render() {\n    const {\n      dedupStrategy,\n      showContextToggle,\n      showLabels,\n      showTime,\n      wrapLogMessage,\n      prettifyLogMessage,\n      logRows,\n      deduplicatedRows,\n      timeZone,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      theme,\n      enableLogDetails,\n      previewLimit,\n      getFieldLinks,\n      logsSortOrder,\n      showDetectedFields,\n      onClickShowDetectedField,\n      onClickHideDetectedField,\n      forceEscape,\n      onLogRowHover,\n    } = this.props;\n    const { renderAll } = this.state;\n    const { logsRowsTable } = getLogRowStyles(theme);\n    const dedupedRows = deduplicatedRows ? deduplicatedRows : logRows;\n    const hasData = logRows && logRows.length > 0;\n    const dedupCount = dedupedRows\n      ? dedupedRows.reduce((sum, row) => (row.duplicates ? sum + row.duplicates : sum), 0)\n      : 0;\n    const showDuplicates = dedupStrategy !== LogsDedupStrategy.none && dedupCount > 0;\n    // Staged rendering\n    const processedRows = dedupedRows ? dedupedRows : [];\n    const orderedRows = logsSortOrder ? this.sortLogs(processedRows, logsSortOrder) : processedRows;\n    const firstRows = orderedRows.slice(0, previewLimit!);\n    const lastRows = orderedRows.slice(previewLimit!, orderedRows.length);\n\n    // React profiler becomes unusable if we pass all rows to all rows and their labels, using getter instead\n    const getRows = this.makeGetRows(orderedRows);\n    const getRowContext = this.props.getRowContext ? this.props.getRowContext : () => Promise.resolve([]);\n\n    return (\n      <table className={logsRowsTable}>\n        <tbody>\n          {hasData &&\n            firstRows.map((row, index) => (\n              <LogRow\n                key={row.uid}\n                getRows={getRows}\n                getRowContext={getRowContext}\n                row={row}\n                showContextToggle={showContextToggle}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels}\n                showTime={showTime}\n                showDetectedFields={showDetectedFields}\n                wrapLogMessage={wrapLogMessage}\n                prettifyLogMessage={prettifyLogMessage}\n                timeZone={timeZone}\n                enableLogDetails={enableLogDetails}\n                onClickFilterLabel={onClickFilterLabel}\n                onClickFilterOutLabel={onClickFilterOutLabel}\n                onClickShowDetectedField={onClickShowDetectedField}\n                onClickHideDetectedField={onClickHideDetectedField}\n                getFieldLinks={getFieldLinks}\n                logsSortOrder={logsSortOrder}\n                forceEscape={forceEscape}\n                onLogRowHover={onLogRowHover}\n              />\n            ))}\n          {hasData &&\n            renderAll &&\n            lastRows.map((row, index) => (\n              <LogRow\n                key={row.uid}\n                getRows={getRows}\n                getRowContext={getRowContext}\n                row={row}\n                showContextToggle={showContextToggle}\n                showDuplicates={showDuplicates}\n                showLabels={showLabels}\n                showTime={showTime}\n                showDetectedFields={showDetectedFields}\n                wrapLogMessage={wrapLogMessage}\n                prettifyLogMessage={prettifyLogMessage}\n                timeZone={timeZone}\n                enableLogDetails={enableLogDetails}\n                onClickFilterLabel={onClickFilterLabel}\n                onClickFilterOutLabel={onClickFilterOutLabel}\n                onClickShowDetectedField={onClickShowDetectedField}\n                onClickHideDetectedField={onClickHideDetectedField}\n                getFieldLinks={getFieldLinks}\n                logsSortOrder={logsSortOrder}\n                forceEscape={forceEscape}\n                onLogRowHover={onLogRowHover}\n              />\n            ))}\n          {hasData && !renderAll && (\n            <tr>\n              <td colSpan={5}>Rendering {orderedRows.length - previewLimit!} rows...</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport const LogRows = withTheme2(UnThemedLogRows);\nLogRows.displayName = 'LogsRows';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}