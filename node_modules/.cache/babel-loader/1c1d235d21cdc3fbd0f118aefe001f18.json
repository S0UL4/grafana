{"ast":null,"code":"import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ToolbarButton } from '@grafana/ui';\nimport { getExploreItemSelector } from '../state/selectors';\nimport { AddToDashboardModal } from './AddToDashboardModal';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const AddToDashboard = ({\n  exploreId\n}) => {\n  var _useSelector, _useSelector$queries;\n\n  const [isOpen, setIsOpen] = useState(false);\n  const selectExploreItem = getExploreItemSelector(exploreId);\n  const explorePaneHasQueries = !!((_useSelector = useSelector(selectExploreItem)) !== null && _useSelector !== void 0 && (_useSelector$queries = _useSelector.queries) !== null && _useSelector$queries !== void 0 && _useSelector$queries.length);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ToolbarButton, {\n      icon: \"apps\",\n      onClick: () => setIsOpen(true),\n      \"aria-label\": \"Add to dashboard\",\n      disabled: !explorePaneHasQueries,\n      children: \"Add to dashboard\"\n    }), isOpen && /*#__PURE__*/_jsx(AddToDashboardModal, {\n      onClose: () => setIsOpen(false),\n      exploreId: exploreId\n    })]\n  });\n};","map":{"version":3,"names":["React","useState","useSelector","ToolbarButton","getExploreItemSelector","AddToDashboardModal","AddToDashboard","exploreId","isOpen","setIsOpen","selectExploreItem","explorePaneHasQueries","queries","length"],"sources":["/home/soula/grafana/public/app/features/explore/AddToDashboard/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { ToolbarButton } from '@grafana/ui';\nimport { ExploreId } from 'app/types';\n\nimport { getExploreItemSelector } from '../state/selectors';\n\nimport { AddToDashboardModal } from './AddToDashboardModal';\n\ninterface Props {\n  exploreId: ExploreId;\n}\n\nexport const AddToDashboard = ({ exploreId }: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const selectExploreItem = getExploreItemSelector(exploreId);\n  const explorePaneHasQueries = !!useSelector(selectExploreItem)?.queries?.length;\n\n  return (\n    <>\n      <ToolbarButton\n        icon=\"apps\"\n        onClick={() => setIsOpen(true)}\n        aria-label=\"Add to dashboard\"\n        disabled={!explorePaneHasQueries}\n      >\n        Add to dashboard\n      </ToolbarButton>\n\n      {isOpen && <AddToDashboardModal onClose={() => setIsOpen(false)} exploreId={exploreId} />}\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,aAAT,QAA8B,aAA9B;AAGA,SAASC,sBAAT,QAAuC,oBAAvC;AAEA,SAASC,mBAAT,QAAoC,uBAApC;;;;AAMA,OAAO,MAAMC,cAAc,GAAG,CAAC;EAAEC;AAAF,CAAD,KAA0B;EAAA;;EACtD,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,KAAD,CAApC;EACA,MAAMS,iBAAiB,GAAGN,sBAAsB,CAACG,SAAD,CAAhD;EACA,MAAMI,qBAAqB,GAAG,CAAC,kBAACT,WAAW,CAACQ,iBAAD,CAAZ,iEAAC,aAAgCE,OAAjC,iDAAC,qBAAyCC,MAA1C,CAA/B;EAEA,oBACE;IAAA,wBACE,KAAC,aAAD;MACE,IAAI,EAAC,MADP;MAEE,OAAO,EAAE,MAAMJ,SAAS,CAAC,IAAD,CAF1B;MAGE,cAAW,kBAHb;MAIE,QAAQ,EAAE,CAACE,qBAJb;MAAA;IAAA,EADF,EAUGH,MAAM,iBAAI,KAAC,mBAAD;MAAqB,OAAO,EAAE,MAAMC,SAAS,CAAC,KAAD,CAA7C;MAAsD,SAAS,EAAEF;IAAjE,EAVb;EAAA,EADF;AAcD,CAnBM"},"metadata":{},"sourceType":"module"}