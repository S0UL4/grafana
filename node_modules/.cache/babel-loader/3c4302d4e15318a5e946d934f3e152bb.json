{"ast":null,"code":"/**\n * Returns minimal time step from series time field\n * @param timeField\n */\nexport const getSeriesTimeStep = timeField => {\n  let previousTime;\n  let minTimeStep;\n  let returnTimeStep = Number.MAX_VALUE;\n\n  for (let i = 0; i < timeField.values.length; i++) {\n    const currentTime = timeField.values.get(i);\n\n    if (previousTime !== undefined) {\n      const timeStep = currentTime - previousTime;\n\n      if (minTimeStep === undefined) {\n        returnTimeStep = timeStep;\n      }\n\n      if (timeStep < returnTimeStep) {\n        returnTimeStep = timeStep;\n      }\n    }\n\n    previousTime = currentTime;\n  }\n\n  return returnTimeStep;\n};\n/**\n * Checks if series time field has ms resolution\n * @param timeField\n */\n\nexport const hasMsResolution = timeField => {\n  for (let i = 0; i < timeField.values.length; i++) {\n    const value = timeField.values.get(i);\n\n    if (value !== null && value !== undefined) {\n      const timestamp = value.toString();\n\n      if (timestamp.length === 13 && timestamp % 1000 !== 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};","map":{"version":3,"names":["getSeriesTimeStep","timeField","previousTime","minTimeStep","returnTimeStep","Number","MAX_VALUE","i","values","length","currentTime","get","undefined","timeStep","hasMsResolution","value","timestamp","toString"],"sources":["/home/soula/grafana/packages/grafana-data/src/utils/series.ts"],"sourcesContent":["import { Field } from '../types/dataFrame';\n\n/**\n * Returns minimal time step from series time field\n * @param timeField\n */\nexport const getSeriesTimeStep = (timeField: Field): number => {\n  let previousTime: number | undefined;\n  let minTimeStep: number | undefined;\n  let returnTimeStep = Number.MAX_VALUE;\n\n  for (let i = 0; i < timeField.values.length; i++) {\n    const currentTime = timeField.values.get(i);\n\n    if (previousTime !== undefined) {\n      const timeStep = currentTime - previousTime;\n\n      if (minTimeStep === undefined) {\n        returnTimeStep = timeStep;\n      }\n\n      if (timeStep < returnTimeStep) {\n        returnTimeStep = timeStep;\n      }\n    }\n    previousTime = currentTime;\n  }\n  return returnTimeStep;\n};\n\n/**\n * Checks if series time field has ms resolution\n * @param timeField\n */\nexport const hasMsResolution = (timeField: Field) => {\n  for (let i = 0; i < timeField.values.length; i++) {\n    const value = timeField.values.get(i);\n    if (value !== null && value !== undefined) {\n      const timestamp = value.toString();\n      if (timestamp.length === 13 && timestamp % 1000 !== 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,GAAIC,SAAD,IAA8B;EAC7D,IAAIC,YAAJ;EACA,IAAIC,WAAJ;EACA,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAA5B;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,SAAS,CAACO,MAAV,CAAiBC,MAArC,EAA6CF,CAAC,EAA9C,EAAkD;IAChD,MAAMG,WAAW,GAAGT,SAAS,CAACO,MAAV,CAAiBG,GAAjB,CAAqBJ,CAArB,CAApB;;IAEA,IAAIL,YAAY,KAAKU,SAArB,EAAgC;MAC9B,MAAMC,QAAQ,GAAGH,WAAW,GAAGR,YAA/B;;MAEA,IAAIC,WAAW,KAAKS,SAApB,EAA+B;QAC7BR,cAAc,GAAGS,QAAjB;MACD;;MAED,IAAIA,QAAQ,GAAGT,cAAf,EAA+B;QAC7BA,cAAc,GAAGS,QAAjB;MACD;IACF;;IACDX,YAAY,GAAGQ,WAAf;EACD;;EACD,OAAON,cAAP;AACD,CAtBM;AAwBP;AACA;AACA;AACA;;AACA,OAAO,MAAMU,eAAe,GAAIb,SAAD,IAAsB;EACnD,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,SAAS,CAACO,MAAV,CAAiBC,MAArC,EAA6CF,CAAC,EAA9C,EAAkD;IAChD,MAAMQ,KAAK,GAAGd,SAAS,CAACO,MAAV,CAAiBG,GAAjB,CAAqBJ,CAArB,CAAd;;IACA,IAAIQ,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKH,SAAhC,EAA2C;MACzC,MAAMI,SAAS,GAAGD,KAAK,CAACE,QAAN,EAAlB;;MACA,IAAID,SAAS,CAACP,MAAV,KAAqB,EAArB,IAA2BO,SAAS,GAAG,IAAZ,KAAqB,CAApD,EAAuD;QACrD,OAAO,IAAP;MACD;IACF;EACF;;EACD,OAAO,KAAP;AACD,CAXM"},"metadata":{},"sourceType":"module"}