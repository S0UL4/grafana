{"ast":null,"code":"// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport Combokeys from 'combokeys';\nimport keyboardMappings from './keyboard-mappings';\nlet instance;\n\nfunction getInstance() {\n  if (instance) {\n    return instance;\n  }\n\n  const local = new Combokeys(document.body);\n  instance = local;\n  return local;\n}\n\nexport function merge(callbacks) {\n  const inst = getInstance();\n  Object.keys(callbacks).forEach(name => {\n    const keysHandler = callbacks[name];\n\n    if (keysHandler) {\n      inst.bind(keyboardMappings[name].binding, keysHandler);\n    }\n  });\n}\nexport function reset() {\n  const combokeys = getInstance();\n  combokeys.reset();\n}","map":{"version":3,"names":["Combokeys","keyboardMappings","instance","getInstance","local","document","body","merge","callbacks","inst","Object","keys","forEach","name","keysHandler","bind","binding","reset","combokeys"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/keyboard-shortcuts.tsx"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport Combokeys from 'combokeys';\nimport * as React from 'react';\n\nimport keyboardMappings from './keyboard-mappings';\n\nexport type CombokeysHandler =\n  | (() => void)\n  | ((event: React.KeyboardEvent<any>) => void)\n  | ((event: React.KeyboardEvent<any>, s: string) => void);\n\nexport type ShortcutCallbacks = {\n  [name: string]: CombokeysHandler;\n};\n\nlet instance: Combokeys | undefined;\n\nfunction getInstance(): Combokeys {\n  if (instance) {\n    return instance;\n  }\n  const local = new Combokeys(document.body);\n  instance = local;\n  return local;\n}\n\nexport function merge(callbacks: ShortcutCallbacks) {\n  const inst = getInstance();\n  Object.keys(callbacks).forEach((name) => {\n    const keysHandler = callbacks[name];\n    if (keysHandler) {\n      inst.bind(keyboardMappings[name].binding, keysHandler);\n    }\n  });\n}\n\nexport function reset() {\n  const combokeys = getInstance();\n  combokeys.reset();\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,SAAP,MAAsB,WAAtB;AAGA,OAAOC,gBAAP,MAA6B,qBAA7B;AAWA,IAAIC,QAAJ;;AAEA,SAASC,WAAT,GAAkC;EAChC,IAAID,QAAJ,EAAc;IACZ,OAAOA,QAAP;EACD;;EACD,MAAME,KAAK,GAAG,IAAIJ,SAAJ,CAAcK,QAAQ,CAACC,IAAvB,CAAd;EACAJ,QAAQ,GAAGE,KAAX;EACA,OAAOA,KAAP;AACD;;AAED,OAAO,SAASG,KAAT,CAAeC,SAAf,EAA6C;EAClD,MAAMC,IAAI,GAAGN,WAAW,EAAxB;EACAO,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBI,OAAvB,CAAgCC,IAAD,IAAU;IACvC,MAAMC,WAAW,GAAGN,SAAS,CAACK,IAAD,CAA7B;;IACA,IAAIC,WAAJ,EAAiB;MACfL,IAAI,CAACM,IAAL,CAAUd,gBAAgB,CAACY,IAAD,CAAhB,CAAuBG,OAAjC,EAA0CF,WAA1C;IACD;EACF,CALD;AAMD;AAED,OAAO,SAASG,KAAT,GAAiB;EACtB,MAAMC,SAAS,GAAGf,WAAW,EAA7B;EACAe,SAAS,CAACD,KAAV;AACD"},"metadata":{},"sourceType":"module"}