{"ast":null,"code":"var _AnnotationsHelp;\n\nimport React, { useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport { toOption } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Input } from '@grafana/ui';\nimport { INPUT_WIDTH } from '../constants';\nimport { EditorMode, MetricKind, AlignmentTypes } from '../types';\nimport { MetricQueryEditor as ExperimentalMetricQueryEditor } from './Experimental/MetricQueryEditor';\nimport { MetricQueryEditor } from './MetricQueryEditor';\nimport { AnnotationsHelp, QueryEditorRow } from './';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const defaultQuery = datasource => ({\n  editorMode: EditorMode.Visual,\n  projectName: datasource.getDefaultProject(),\n  projects: [],\n  metricType: '',\n  filters: [],\n  metricKind: MetricKind.GAUGE,\n  valueType: '',\n  refId: 'annotationQuery',\n  title: '',\n  text: '',\n  labels: {},\n  variableOptionGroup: {},\n  variableOptions: [],\n  query: '',\n  crossSeriesReducer: 'REDUCE_NONE',\n  perSeriesAligner: AlignmentTypes.ALIGN_NONE,\n  alignmentPeriod: 'grafana-auto'\n});\nexport const AnnotationQueryEditor = props => {\n  var _meta$custom;\n\n  const {\n    datasource,\n    query,\n    onRunQuery,\n    data,\n    onChange\n  } = props;\n  const meta = data !== null && data !== void 0 && data.series.length ? data === null || data === void 0 ? void 0 : data.series[0].meta : {};\n  const customMetaData = (_meta$custom = meta === null || meta === void 0 ? void 0 : meta.custom) !== null && _meta$custom !== void 0 ? _meta$custom : {};\n  const metricQuery = Object.assign({}, defaultQuery(datasource), query.metricQuery);\n  const [title, setTitle] = useState(metricQuery.title || '');\n  const [text, setText] = useState(metricQuery.text || '');\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map(toOption)\n  };\n\n  const handleQueryChange = metricQuery => onChange(Object.assign({}, query, {\n    metricQuery\n  }));\n\n  const handleTitleChange = e => {\n    setTitle(e.target.value);\n  };\n\n  const handleTextChange = e => {\n    setText(e.target.value);\n  };\n\n  useDebounce(() => {\n    onChange(Object.assign({}, query, {\n      metricQuery: Object.assign({}, metricQuery, {\n        title\n      })\n    }));\n  }, 1000, [title, onChange]);\n  useDebounce(() => {\n    onChange(Object.assign({}, query, {\n      metricQuery: Object.assign({}, metricQuery, {\n        text\n      })\n    }));\n  }, 1000, [text, onChange]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [config.featureToggles.cloudMonitoringExperimentalUI ? /*#__PURE__*/_jsx(ExperimentalMetricQueryEditor, {\n      refId: query.refId,\n      variableOptionGroup: variableOptionGroup,\n      customMetaData: customMetaData,\n      onChange: handleQueryChange,\n      onRunQuery: onRunQuery,\n      datasource: datasource,\n      query: metricQuery\n    }) : /*#__PURE__*/_jsx(MetricQueryEditor, {\n      refId: query.refId,\n      variableOptionGroup: variableOptionGroup,\n      customMetaData: customMetaData,\n      onChange: handleQueryChange,\n      onRunQuery: onRunQuery,\n      datasource: datasource,\n      query: metricQuery\n    }), /*#__PURE__*/_jsx(QueryEditorRow, {\n      label: \"Title\",\n      htmlFor: \"annotation-query-title\",\n      children: /*#__PURE__*/_jsx(Input, {\n        id: \"annotation-query-title\",\n        value: title,\n        width: INPUT_WIDTH,\n        onChange: handleTitleChange\n      })\n    }), /*#__PURE__*/_jsx(QueryEditorRow, {\n      label: \"Text\",\n      htmlFor: \"annotation-query-text\",\n      children: /*#__PURE__*/_jsx(Input, {\n        id: \"annotation-query-text\",\n        value: text,\n        width: INPUT_WIDTH,\n        onChange: handleTextChange\n      })\n    }), _AnnotationsHelp || (_AnnotationsHelp = /*#__PURE__*/_jsx(AnnotationsHelp, {}))]\n  });\n};","map":{"version":3,"names":["React","useState","useDebounce","toOption","config","Input","INPUT_WIDTH","EditorMode","MetricKind","AlignmentTypes","MetricQueryEditor","ExperimentalMetricQueryEditor","AnnotationsHelp","QueryEditorRow","defaultQuery","datasource","editorMode","Visual","projectName","getDefaultProject","projects","metricType","filters","metricKind","GAUGE","valueType","refId","title","text","labels","variableOptionGroup","variableOptions","query","crossSeriesReducer","perSeriesAligner","ALIGN_NONE","alignmentPeriod","AnnotationQueryEditor","props","onRunQuery","data","onChange","meta","series","length","customMetaData","custom","metricQuery","setTitle","setText","label","options","getVariables","map","handleQueryChange","handleTitleChange","e","target","value","handleTextChange","featureToggles","cloudMonitoringExperimentalUI"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloud-monitoring/components/AnnotationQueryEditor.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { QueryEditorProps, toOption } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Input } from '@grafana/ui';\n\nimport { INPUT_WIDTH } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport {\n  EditorMode,\n  MetricKind,\n  AnnotationMetricQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  AlignmentTypes,\n} from '../types';\n\nimport { MetricQueryEditor as ExperimentalMetricQueryEditor } from './Experimental/MetricQueryEditor';\nimport { MetricQueryEditor } from './MetricQueryEditor';\n\nimport { AnnotationsHelp, QueryEditorRow } from './';\n\nexport type Props = QueryEditorProps<CloudMonitoringDatasource, CloudMonitoringQuery, CloudMonitoringOptions>;\n\nexport const defaultQuery: (datasource: CloudMonitoringDatasource) => AnnotationMetricQuery = (datasource) => ({\n  editorMode: EditorMode.Visual,\n  projectName: datasource.getDefaultProject(),\n  projects: [],\n  metricType: '',\n  filters: [],\n  metricKind: MetricKind.GAUGE,\n  valueType: '',\n  refId: 'annotationQuery',\n  title: '',\n  text: '',\n  labels: {},\n  variableOptionGroup: {},\n  variableOptions: [],\n  query: '',\n  crossSeriesReducer: 'REDUCE_NONE',\n  perSeriesAligner: AlignmentTypes.ALIGN_NONE,\n  alignmentPeriod: 'grafana-auto',\n});\n\nexport const AnnotationQueryEditor = (props: Props) => {\n  const { datasource, query, onRunQuery, data, onChange } = props;\n  const meta = data?.series.length ? data?.series[0].meta : {};\n  const customMetaData = meta?.custom ?? {};\n  const metricQuery = { ...defaultQuery(datasource), ...query.metricQuery };\n  const [title, setTitle] = useState(metricQuery.title || '');\n  const [text, setText] = useState(metricQuery.text || '');\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map(toOption),\n  };\n\n  const handleQueryChange = (metricQuery: AnnotationMetricQuery) => onChange({ ...query, metricQuery });\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  };\n  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setText(e.target.value);\n  };\n\n  useDebounce(\n    () => {\n      onChange({ ...query, metricQuery: { ...metricQuery, title } });\n    },\n    1000,\n    [title, onChange]\n  );\n  useDebounce(\n    () => {\n      onChange({ ...query, metricQuery: { ...metricQuery, text } });\n    },\n    1000,\n    [text, onChange]\n  );\n\n  return (\n    <>\n      {config.featureToggles.cloudMonitoringExperimentalUI ? (\n        <ExperimentalMetricQueryEditor\n          refId={query.refId}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onChange={handleQueryChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          query={metricQuery}\n        />\n      ) : (\n        <MetricQueryEditor\n          refId={query.refId}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onChange={handleQueryChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          query={metricQuery}\n        />\n      )}\n\n      <QueryEditorRow label=\"Title\" htmlFor=\"annotation-query-title\">\n        <Input id=\"annotation-query-title\" value={title} width={INPUT_WIDTH} onChange={handleTitleChange} />\n      </QueryEditorRow>\n\n      <QueryEditorRow label=\"Text\" htmlFor=\"annotation-query-text\">\n        <Input id=\"annotation-query-text\" value={text} width={INPUT_WIDTH} onChange={handleTextChange} />\n      </QueryEditorRow>\n\n      <AnnotationsHelp />\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}