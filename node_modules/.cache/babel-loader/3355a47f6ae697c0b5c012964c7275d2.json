{"ast":null,"code":"import { filter, isArray, isNumber } from 'lodash';\nimport config from 'app/core/config';\nimport store from 'app/core/store';\nexport class ImpressionSrv {\n  constructor() {}\n\n  addDashboardImpression(dashboardId) {\n    const impressionsKey = this.impressionKey();\n    let impressions = [];\n\n    if (store.exists(impressionsKey)) {\n      impressions = JSON.parse(store.get(impressionsKey));\n\n      if (!isArray(impressions)) {\n        impressions = [];\n      }\n    }\n\n    impressions = impressions.filter(imp => {\n      return dashboardId !== imp;\n    });\n    impressions.unshift(dashboardId);\n\n    if (impressions.length > 50) {\n      impressions.pop();\n    }\n\n    store.set(impressionsKey, JSON.stringify(impressions));\n  }\n  /** Returns an array of internal (numeric) dashboard IDs */\n\n\n  getDashboardOpened() {\n    let impressions = store.get(this.impressionKey()) || '[]';\n    impressions = JSON.parse(impressions);\n    impressions = filter(impressions, el => {\n      return isNumber(el);\n    });\n    return impressions;\n  }\n\n  impressionKey() {\n    return 'dashboard_impressions-' + config.bootData.user.orgId;\n  }\n\n}\nconst impressionSrv = new ImpressionSrv();\nexport default impressionSrv;","map":{"version":3,"names":["filter","isArray","isNumber","config","store","ImpressionSrv","constructor","addDashboardImpression","dashboardId","impressionsKey","impressionKey","impressions","exists","JSON","parse","get","imp","unshift","length","pop","set","stringify","getDashboardOpened","el","bootData","user","orgId","impressionSrv"],"sources":["/home/soula/grafana/public/app/core/services/impression_srv.ts"],"sourcesContent":["import { filter, isArray, isNumber } from 'lodash';\n\nimport config from 'app/core/config';\nimport store from 'app/core/store';\n\nexport class ImpressionSrv {\n  constructor() {}\n\n  addDashboardImpression(dashboardId: number) {\n    const impressionsKey = this.impressionKey();\n    let impressions = [];\n    if (store.exists(impressionsKey)) {\n      impressions = JSON.parse(store.get(impressionsKey));\n      if (!isArray(impressions)) {\n        impressions = [];\n      }\n    }\n\n    impressions = impressions.filter((imp) => {\n      return dashboardId !== imp;\n    });\n\n    impressions.unshift(dashboardId);\n\n    if (impressions.length > 50) {\n      impressions.pop();\n    }\n    store.set(impressionsKey, JSON.stringify(impressions));\n  }\n\n  /** Returns an array of internal (numeric) dashboard IDs */\n  getDashboardOpened(): number[] {\n    let impressions = store.get(this.impressionKey()) || '[]';\n\n    impressions = JSON.parse(impressions);\n\n    impressions = filter(impressions, (el) => {\n      return isNumber(el);\n    });\n\n    return impressions;\n  }\n\n  impressionKey() {\n    return 'dashboard_impressions-' + config.bootData.user.orgId;\n  }\n}\n\nconst impressionSrv = new ImpressionSrv();\nexport default impressionSrv;\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,OAAjB,EAA0BC,QAA1B,QAA0C,QAA1C;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAO,MAAMC,aAAN,CAAoB;EACzBC,WAAW,GAAG,CAAE;;EAEhBC,sBAAsB,CAACC,WAAD,EAAsB;IAC1C,MAAMC,cAAc,GAAG,KAAKC,aAAL,EAAvB;IACA,IAAIC,WAAW,GAAG,EAAlB;;IACA,IAAIP,KAAK,CAACQ,MAAN,CAAaH,cAAb,CAAJ,EAAkC;MAChCE,WAAW,GAAGE,IAAI,CAACC,KAAL,CAAWV,KAAK,CAACW,GAAN,CAAUN,cAAV,CAAX,CAAd;;MACA,IAAI,CAACR,OAAO,CAACU,WAAD,CAAZ,EAA2B;QACzBA,WAAW,GAAG,EAAd;MACD;IACF;;IAEDA,WAAW,GAAGA,WAAW,CAACX,MAAZ,CAAoBgB,GAAD,IAAS;MACxC,OAAOR,WAAW,KAAKQ,GAAvB;IACD,CAFa,CAAd;IAIAL,WAAW,CAACM,OAAZ,CAAoBT,WAApB;;IAEA,IAAIG,WAAW,CAACO,MAAZ,GAAqB,EAAzB,EAA6B;MAC3BP,WAAW,CAACQ,GAAZ;IACD;;IACDf,KAAK,CAACgB,GAAN,CAAUX,cAAV,EAA0BI,IAAI,CAACQ,SAAL,CAAeV,WAAf,CAA1B;EACD;EAED;;;EACAW,kBAAkB,GAAa;IAC7B,IAAIX,WAAW,GAAGP,KAAK,CAACW,GAAN,CAAU,KAAKL,aAAL,EAAV,KAAmC,IAArD;IAEAC,WAAW,GAAGE,IAAI,CAACC,KAAL,CAAWH,WAAX,CAAd;IAEAA,WAAW,GAAGX,MAAM,CAACW,WAAD,EAAeY,EAAD,IAAQ;MACxC,OAAOrB,QAAQ,CAACqB,EAAD,CAAf;IACD,CAFmB,CAApB;IAIA,OAAOZ,WAAP;EACD;;EAEDD,aAAa,GAAG;IACd,OAAO,2BAA2BP,MAAM,CAACqB,QAAP,CAAgBC,IAAhB,CAAqBC,KAAvD;EACD;;AAxCwB;AA2C3B,MAAMC,aAAa,GAAG,IAAItB,aAAJ,EAAtB;AACA,eAAesB,aAAf"},"metadata":{},"sourceType":"module"}