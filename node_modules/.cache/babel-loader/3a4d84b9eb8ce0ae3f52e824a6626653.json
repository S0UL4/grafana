{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useAsync } from 'react-use';\nimport Page from '../../core/components/Page/Page';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { LibraryPanelsSearch } from '../library-panels/components/LibraryPanelsSearch/LibraryPanelsSearch';\nimport { OpenLibraryPanelModal } from '../library-panels/components/OpenLibraryPanelModal/OpenLibraryPanelModal';\nimport { getFolderByUid } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst mapStateToProps = (state, props) => {\n  const uid = props.match.params.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-library-panels-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport function FolderLibraryPanelsPage({\n  navModel,\n  getFolderByUid,\n  folderUid,\n  folder\n}) {\n  const {\n    loading\n  } = useAsync(async () => await getFolderByUid(folderUid), [getFolderByUid, folderUid]);\n  const [selected, setSelected] = useState(undefined);\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: navModel,\n    children: /*#__PURE__*/_jsxs(Page.Contents, {\n      isLoading: loading,\n      children: [/*#__PURE__*/_jsx(LibraryPanelsSearch, {\n        onClick: setSelected,\n        currentFolderId: folder.id,\n        showSecondaryActions: true,\n        showSort: true,\n        showPanelFilter: true\n      }), selected ? /*#__PURE__*/_jsx(OpenLibraryPanelModal, {\n        onDismiss: () => setSelected(undefined),\n        libraryPanel: selected\n      }) : null]\n    })\n  });\n}\nexport default connector(FolderLibraryPanelsPage);","map":{"version":3,"names":["React","useState","connect","useAsync","Page","getNavModel","LibraryPanelsSearch","OpenLibraryPanelModal","getFolderByUid","getLoadingNav","mapStateToProps","state","props","uid","match","params","navModel","navIndex","folderUid","folder","mapDispatchToProps","connector","FolderLibraryPanelsPage","loading","selected","setSelected","undefined","id"],"sources":["/home/soula/grafana/public/app/features/folders/FolderLibraryPanelsPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useAsync } from 'react-use';\n\nimport Page from '../../core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { StoreState } from '../../types';\nimport { LibraryPanelsSearch } from '../library-panels/components/LibraryPanelsSearch/LibraryPanelsSearch';\nimport { OpenLibraryPanelModal } from '../library-panels/components/OpenLibraryPanelModal/OpenLibraryPanelModal';\nimport { LibraryElementDTO } from '../library-panels/types';\n\nimport { getFolderByUid } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-library-panels-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function FolderLibraryPanelsPage({ navModel, getFolderByUid, folderUid, folder }: Props): JSX.Element {\n  const { loading } = useAsync(async () => await getFolderByUid(folderUid), [getFolderByUid, folderUid]);\n  const [selected, setSelected] = useState<LibraryElementDTO | undefined>(undefined);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        <LibraryPanelsSearch\n          onClick={setSelected}\n          currentFolderId={folder.id}\n          showSecondaryActions\n          showSort\n          showPanelFilter\n        />\n        {selected ? <OpenLibraryPanelModal onDismiss={() => setSelected(undefined)} libraryPanel={selected} /> : null}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(FolderLibraryPanelsPage);\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwC,aAAxC;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,OAAOC,IAAP,MAAiB,iCAAjB;AAEA,SAASC,WAAT,QAA4B,+BAA5B;AAEA,SAASC,mBAAT,QAAoC,sEAApC;AACA,SAASC,qBAAT,QAAsC,0EAAtC;AAGA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,aAAT,QAA8B,kBAA9B;;;;AAIA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAoBC,KAApB,KAAwC;EAC9D,MAAMC,GAAG,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,GAA/B;EACA,OAAO;IACLG,QAAQ,EAAEX,WAAW,CAACM,KAAK,CAACM,QAAP,EAAkB,yBAAwBJ,GAAI,EAA9C,EAAiDJ,aAAa,CAAC,CAAD,CAA9D,CADhB;IAELS,SAAS,EAAEL,GAFN;IAGLM,MAAM,EAAER,KAAK,CAACQ;EAHT,CAAP;AAKD,CAPD;;AASA,MAAMC,kBAAkB,GAAG;EACzBZ;AADyB,CAA3B;AAIA,MAAMa,SAAS,GAAGnB,OAAO,CAACQ,eAAD,EAAkBU,kBAAlB,CAAzB;AAIA,OAAO,SAASE,uBAAT,CAAiC;EAAEN,QAAF;EAAYR,cAAZ;EAA4BU,SAA5B;EAAuCC;AAAvC,CAAjC,EAAsG;EAC3G,MAAM;IAAEI;EAAF,IAAcpB,QAAQ,CAAC,YAAY,MAAMK,cAAc,CAACU,SAAD,CAAjC,EAA8C,CAACV,cAAD,EAAiBU,SAAjB,CAA9C,CAA5B;EACA,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAAgCyB,SAAhC,CAAxC;EAEA,oBACE,KAAC,IAAD;IAAM,QAAQ,EAAEV,QAAhB;IAAA,uBACE,MAAC,IAAD,CAAM,QAAN;MAAe,SAAS,EAAEO,OAA1B;MAAA,wBACE,KAAC,mBAAD;QACE,OAAO,EAAEE,WADX;QAEE,eAAe,EAAEN,MAAM,CAACQ,EAF1B;QAGE,oBAAoB,MAHtB;QAIE,QAAQ,MAJV;QAKE,eAAe;MALjB,EADF,EAQGH,QAAQ,gBAAG,KAAC,qBAAD;QAAuB,SAAS,EAAE,MAAMC,WAAW,CAACC,SAAD,CAAnD;QAAgE,YAAY,EAAEF;MAA9E,EAAH,GAAgG,IAR3G;IAAA;EADF,EADF;AAcD;AAED,eAAeH,SAAS,CAACC,uBAAD,CAAxB"},"metadata":{},"sourceType":"module"}