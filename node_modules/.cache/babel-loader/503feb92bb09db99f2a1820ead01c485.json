{"ast":null,"code":"const _excluded = [\"index\", \"id\", \"state\", \"global\", \"rootStateKey\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cloneDeep } from 'lodash';\nimport { dispatch } from '../../../store/store';\nimport { ALL_VARIABLE_TEXT } from '../constants';\nimport { optionPickerFactory } from '../pickers';\nimport { setOptionAsCurrent, setOptionFromUrl } from '../state/actions';\nimport { isAllVariable, toKeyedVariableIdentifier } from '../utils';\nimport { CustomVariableEditor } from './CustomVariableEditor';\nimport { updateCustomVariableOptions } from './actions';\nimport { customVariableReducer, initialCustomVariableModelState } from './reducer';\nexport const createCustomVariableAdapter = () => {\n  return {\n    id: 'custom',\n    description: 'Define variable values manually',\n    name: 'Custom',\n    initialState: initialCustomVariableModelState,\n    reducer: customVariableReducer,\n    picker: optionPickerFactory(),\n    editor: CustomVariableEditor,\n    dependsOn: () => {\n      return false;\n    },\n    setValue: async (variable, option, emitChanges = false) => {\n      await dispatch(setOptionAsCurrent(toKeyedVariableIdentifier(variable), option, emitChanges));\n    },\n    setValueFromUrl: async (variable, urlValue) => {\n      await dispatch(setOptionFromUrl(toKeyedVariableIdentifier(variable), urlValue));\n    },\n    updateOptions: async variable => {\n      await dispatch(updateCustomVariableOptions(toKeyedVariableIdentifier(variable)));\n    },\n    getSaveModel: variable => {\n      const _cloneDeep = cloneDeep(variable),\n            rest = _objectWithoutPropertiesLoose(_cloneDeep, _excluded);\n\n      return rest;\n    },\n    getValueForUrl: variable => {\n      if (isAllVariable(variable)) {\n        return ALL_VARIABLE_TEXT;\n      }\n\n      return variable.current.value;\n    }\n  };\n};","map":{"version":3,"names":["cloneDeep","dispatch","ALL_VARIABLE_TEXT","optionPickerFactory","setOptionAsCurrent","setOptionFromUrl","isAllVariable","toKeyedVariableIdentifier","CustomVariableEditor","updateCustomVariableOptions","customVariableReducer","initialCustomVariableModelState","createCustomVariableAdapter","id","description","name","initialState","reducer","picker","editor","dependsOn","setValue","variable","option","emitChanges","setValueFromUrl","urlValue","updateOptions","getSaveModel","rest","getValueForUrl","current","value"],"sources":["/home/soula/grafana/public/app/features/variables/custom/adapter.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\n\nimport { dispatch } from '../../../store/store';\nimport { VariableAdapter } from '../adapters';\nimport { ALL_VARIABLE_TEXT } from '../constants';\nimport { optionPickerFactory } from '../pickers';\nimport { setOptionAsCurrent, setOptionFromUrl } from '../state/actions';\nimport { CustomVariableModel } from '../types';\nimport { isAllVariable, toKeyedVariableIdentifier } from '../utils';\n\nimport { CustomVariableEditor } from './CustomVariableEditor';\nimport { updateCustomVariableOptions } from './actions';\nimport { customVariableReducer, initialCustomVariableModelState } from './reducer';\n\nexport const createCustomVariableAdapter = (): VariableAdapter<CustomVariableModel> => {\n  return {\n    id: 'custom',\n    description: 'Define variable values manually',\n    name: 'Custom',\n    initialState: initialCustomVariableModelState,\n    reducer: customVariableReducer,\n    picker: optionPickerFactory<CustomVariableModel>(),\n    editor: CustomVariableEditor,\n    dependsOn: () => {\n      return false;\n    },\n    setValue: async (variable, option, emitChanges = false) => {\n      await dispatch(setOptionAsCurrent(toKeyedVariableIdentifier(variable), option, emitChanges));\n    },\n    setValueFromUrl: async (variable, urlValue) => {\n      await dispatch(setOptionFromUrl(toKeyedVariableIdentifier(variable), urlValue));\n    },\n    updateOptions: async (variable) => {\n      await dispatch(updateCustomVariableOptions(toKeyedVariableIdentifier(variable)));\n    },\n    getSaveModel: (variable) => {\n      const { index, id, state, global, rootStateKey, ...rest } = cloneDeep(variable);\n      return rest;\n    },\n    getValueForUrl: (variable) => {\n      if (isAllVariable(variable)) {\n        return ALL_VARIABLE_TEXT;\n      }\n      return variable.current.value;\n    },\n  };\n};\n"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,mBAAT,QAAoC,YAApC;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,kBAArD;AAEA,SAASC,aAAT,EAAwBC,yBAAxB,QAAyD,UAAzD;AAEA,SAASC,oBAAT,QAAqC,wBAArC;AACA,SAASC,2BAAT,QAA4C,WAA5C;AACA,SAASC,qBAAT,EAAgCC,+BAAhC,QAAuE,WAAvE;AAEA,OAAO,MAAMC,2BAA2B,GAAG,MAA4C;EACrF,OAAO;IACLC,EAAE,EAAE,QADC;IAELC,WAAW,EAAE,iCAFR;IAGLC,IAAI,EAAE,QAHD;IAILC,YAAY,EAAEL,+BAJT;IAKLM,OAAO,EAAEP,qBALJ;IAMLQ,MAAM,EAAEf,mBAAmB,EANtB;IAOLgB,MAAM,EAAEX,oBAPH;IAQLY,SAAS,EAAE,MAAM;MACf,OAAO,KAAP;IACD,CAVI;IAWLC,QAAQ,EAAE,OAAOC,QAAP,EAAiBC,MAAjB,EAAyBC,WAAW,GAAG,KAAvC,KAAiD;MACzD,MAAMvB,QAAQ,CAACG,kBAAkB,CAACG,yBAAyB,CAACe,QAAD,CAA1B,EAAsCC,MAAtC,EAA8CC,WAA9C,CAAnB,CAAd;IACD,CAbI;IAcLC,eAAe,EAAE,OAAOH,QAAP,EAAiBI,QAAjB,KAA8B;MAC7C,MAAMzB,QAAQ,CAACI,gBAAgB,CAACE,yBAAyB,CAACe,QAAD,CAA1B,EAAsCI,QAAtC,CAAjB,CAAd;IACD,CAhBI;IAiBLC,aAAa,EAAE,MAAOL,QAAP,IAAoB;MACjC,MAAMrB,QAAQ,CAACQ,2BAA2B,CAACF,yBAAyB,CAACe,QAAD,CAA1B,CAA5B,CAAd;IACD,CAnBI;IAoBLM,YAAY,EAAGN,QAAD,IAAc;MAC1B,mBAA4DtB,SAAS,CAACsB,QAAD,CAArE;MAAA,MAAmDO,IAAnD;;MACA,OAAOA,IAAP;IACD,CAvBI;IAwBLC,cAAc,EAAGR,QAAD,IAAc;MAC5B,IAAIhB,aAAa,CAACgB,QAAD,CAAjB,EAA6B;QAC3B,OAAOpB,iBAAP;MACD;;MACD,OAAOoB,QAAQ,CAACS,OAAT,CAAiBC,KAAxB;IACD;EA7BI,CAAP;AA+BD,CAhCM"},"metadata":{},"sourceType":"module"}