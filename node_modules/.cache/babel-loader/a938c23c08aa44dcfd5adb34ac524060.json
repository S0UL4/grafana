{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2, LinkButton } from '@grafana/ui';\nimport { AlertLabels } from 'app/features/alerting/unified/components/AlertLabels';\nimport { CollapseToggle } from 'app/features/alerting/unified/components/CollapseToggle';\nimport { AlertGroupHeader } from 'app/features/alerting/unified/components/alert-groups/AlertGroupHeader';\nimport { getNotificationsTextColors } from 'app/features/alerting/unified/styles/notifications';\nimport { makeAMLink, makeLabelBasedSilenceLink } from 'app/features/alerting/unified/utils/misc';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const AlertGroup = ({\n  alertManagerSourceName,\n  group,\n  expandAll\n}) => {\n  const [showAlerts, setShowAlerts] = useState(expandAll);\n  const styles = useStyles2(getStyles);\n  const textStyles = useStyles2(getNotificationsTextColors);\n  useEffect(() => setShowAlerts(expandAll), [expandAll]);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.group,\n    \"data-testid\": \"alert-group\",\n    children: [Object.keys(group.labels).length > 0 ? /*#__PURE__*/_jsx(AlertLabels, {\n      labels: group.labels\n    }) : /*#__PURE__*/_jsx(\"div\", {\n      className: styles.noGroupingText,\n      children: \"No grouping\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.row,\n      children: [/*#__PURE__*/_jsx(CollapseToggle, {\n        isCollapsed: !showAlerts,\n        onToggle: () => setShowAlerts(!showAlerts)\n      }), ' ', /*#__PURE__*/_jsx(AlertGroupHeader, {\n        group: group\n      })]\n    }), showAlerts && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.alerts,\n      children: group.alerts.map((alert, index) => {\n        const state = alert.status.state.toUpperCase();\n        const interval = intervalToAbbreviatedDurationString({\n          start: new Date(alert.startsAt),\n          end: Date.now()\n        });\n        return /*#__PURE__*/_jsxs(\"div\", {\n          \"data-testid\": 'alert-group-alert',\n          className: styles.alert,\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsxs(\"span\", {\n              className: textStyles[alert.status.state],\n              children: [state, \" \"]\n            }), \"for \", interval]\n          }), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(AlertLabels, {\n              labels: alert.labels\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.actionsRow,\n            children: [alert.status.state === AlertState.Suppressed && /*#__PURE__*/_jsx(LinkButton, {\n              href: `${makeAMLink('/alerting/silences', alertManagerSourceName)}&silenceIds=${alert.status.silencedBy.join(',')}`,\n              className: styles.button,\n              icon: 'bell',\n              size: 'sm',\n              children: \"Manage silences\"\n            }), alert.status.state === AlertState.Active && /*#__PURE__*/_jsx(LinkButton, {\n              href: makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels),\n              className: styles.button,\n              icon: 'bell-slash',\n              size: 'sm',\n              children: \"Silence\"\n            }), alert.generatorURL && /*#__PURE__*/_jsx(LinkButton, {\n              className: styles.button,\n              href: alert.generatorURL,\n              icon: 'chart-line',\n              size: 'sm',\n              children: \"See source\"\n            })]\n          })]\n        }, `${alert.fingerprint}-${index}`);\n      })\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  noGroupingText: css`\n    height: ${theme.spacing(4)};\n  `,\n  group: css`\n    background-color: ${theme.colors.background.secondary};\n    margin: ${theme.spacing(0.5, 1, 0.5, 1)};\n    padding: ${theme.spacing(1)};\n  `,\n  row: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  alerts: css`\n    margin: ${theme.spacing(0, 2, 0, 4)};\n  `,\n  alert: css`\n    padding: ${theme.spacing(1, 0)};\n    & + & {\n      border-top: 1px solid ${theme.colors.border.medium};\n    }\n  `,\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(1, 0)};\n  `\n});","map":{"version":3,"names":["css","React","useState","useEffect","intervalToAbbreviatedDurationString","useStyles2","LinkButton","AlertLabels","CollapseToggle","AlertGroupHeader","getNotificationsTextColors","makeAMLink","makeLabelBasedSilenceLink","AlertState","AlertGroup","alertManagerSourceName","group","expandAll","showAlerts","setShowAlerts","styles","getStyles","textStyles","Object","keys","labels","length","noGroupingText","row","alerts","map","alert","index","state","status","toUpperCase","interval","start","Date","startsAt","end","now","actionsRow","Suppressed","silencedBy","join","button","Active","generatorURL","fingerprint","theme","spacing","colors","background","secondary","border","medium"],"sources":["/home/soula/grafana/public/app/plugins/panel/alertGroups/AlertGroup.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2, LinkButton } from '@grafana/ui';\nimport { AlertLabels } from 'app/features/alerting/unified/components/AlertLabels';\nimport { CollapseToggle } from 'app/features/alerting/unified/components/CollapseToggle';\nimport { AlertGroupHeader } from 'app/features/alerting/unified/components/alert-groups/AlertGroupHeader';\nimport { getNotificationsTextColors } from 'app/features/alerting/unified/styles/notifications';\nimport { makeAMLink, makeLabelBasedSilenceLink } from 'app/features/alerting/unified/utils/misc';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\ntype Props = {\n  alertManagerSourceName: string;\n  group: AlertmanagerGroup;\n  expandAll: boolean;\n};\n\nexport const AlertGroup = ({ alertManagerSourceName, group, expandAll }: Props) => {\n  const [showAlerts, setShowAlerts] = useState(expandAll);\n  const styles = useStyles2(getStyles);\n  const textStyles = useStyles2(getNotificationsTextColors);\n\n  useEffect(() => setShowAlerts(expandAll), [expandAll]);\n\n  return (\n    <div className={styles.group} data-testid=\"alert-group\">\n      {Object.keys(group.labels).length > 0 ? (\n        <AlertLabels labels={group.labels} />\n      ) : (\n        <div className={styles.noGroupingText}>No grouping</div>\n      )}\n      <div className={styles.row}>\n        <CollapseToggle isCollapsed={!showAlerts} onToggle={() => setShowAlerts(!showAlerts)} />{' '}\n        <AlertGroupHeader group={group} />\n      </div>\n      {showAlerts && (\n        <div className={styles.alerts}>\n          {group.alerts.map((alert, index) => {\n            const state = alert.status.state.toUpperCase();\n            const interval = intervalToAbbreviatedDurationString({\n              start: new Date(alert.startsAt),\n              end: Date.now(),\n            });\n\n            return (\n              <div data-testid={'alert-group-alert'} className={styles.alert} key={`${alert.fingerprint}-${index}`}>\n                <div>\n                  <span className={textStyles[alert.status.state]}>{state} </span>for {interval}\n                </div>\n                <div>\n                  <AlertLabels labels={alert.labels} />\n                </div>\n                <div className={styles.actionsRow}>\n                  {alert.status.state === AlertState.Suppressed && (\n                    <LinkButton\n                      href={`${makeAMLink(\n                        '/alerting/silences',\n                        alertManagerSourceName\n                      )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n                      className={styles.button}\n                      icon={'bell'}\n                      size={'sm'}\n                    >\n                      Manage silences\n                    </LinkButton>\n                  )}\n                  {alert.status.state === AlertState.Active && (\n                    <LinkButton\n                      href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n                      className={styles.button}\n                      icon={'bell-slash'}\n                      size={'sm'}\n                    >\n                      Silence\n                    </LinkButton>\n                  )}\n                  {alert.generatorURL && (\n                    <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n                      See source\n                    </LinkButton>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  noGroupingText: css`\n    height: ${theme.spacing(4)};\n  `,\n  group: css`\n    background-color: ${theme.colors.background.secondary};\n    margin: ${theme.spacing(0.5, 1, 0.5, 1)};\n    padding: ${theme.spacing(1)};\n  `,\n  row: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  alerts: css`\n    margin: ${theme.spacing(0, 2, 0, 4)};\n  `,\n  alert: css`\n    padding: ${theme.spacing(1, 0)};\n    & + & {\n      border-top: 1px solid ${theme.colors.border.medium};\n    }\n  `,\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SAAwBC,mCAAxB,QAAmE,eAAnE;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,aAAvC;AACA,SAASC,WAAT,QAA4B,sDAA5B;AACA,SAASC,cAAT,QAA+B,yDAA/B;AACA,SAASC,gBAAT,QAAiC,wEAAjC;AACA,SAASC,0BAAT,QAA2C,oDAA3C;AACA,SAASC,UAAT,EAAqBC,yBAArB,QAAsD,0CAAtD;AACA,SAA4BC,UAA5B,QAA8C,2CAA9C;;;AAQA,OAAO,MAAMC,UAAU,GAAG,CAAC;EAAEC,sBAAF;EAA0BC,KAA1B;EAAiCC;AAAjC,CAAD,KAAyD;EACjF,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAACe,SAAD,CAA5C;EACA,MAAMG,MAAM,GAAGf,UAAU,CAACgB,SAAD,CAAzB;EACA,MAAMC,UAAU,GAAGjB,UAAU,CAACK,0BAAD,CAA7B;EAEAP,SAAS,CAAC,MAAMgB,aAAa,CAACF,SAAD,CAApB,EAAiC,CAACA,SAAD,CAAjC,CAAT;EAEA,oBACE;IAAK,SAAS,EAAEG,MAAM,CAACJ,KAAvB;IAA8B,eAAY,aAA1C;IAAA,WACGO,MAAM,CAACC,IAAP,CAAYR,KAAK,CAACS,MAAlB,EAA0BC,MAA1B,GAAmC,CAAnC,gBACC,KAAC,WAAD;MAAa,MAAM,EAAEV,KAAK,CAACS;IAA3B,EADD,gBAGC;MAAK,SAAS,EAAEL,MAAM,CAACO,cAAvB;MAAA;IAAA,EAJJ,eAME;MAAK,SAAS,EAAEP,MAAM,CAACQ,GAAvB;MAAA,wBACE,KAAC,cAAD;QAAgB,WAAW,EAAE,CAACV,UAA9B;QAA0C,QAAQ,EAAE,MAAMC,aAAa,CAAC,CAACD,UAAF;MAAvE,EADF,EAC2F,GAD3F,eAEE,KAAC,gBAAD;QAAkB,KAAK,EAAEF;MAAzB,EAFF;IAAA,EANF,EAUGE,UAAU,iBACT;MAAK,SAAS,EAAEE,MAAM,CAACS,MAAvB;MAAA,UACGb,KAAK,CAACa,MAAN,CAAaC,GAAb,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkB;QAClC,MAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaD,KAAb,CAAmBE,WAAnB,EAAd;QACA,MAAMC,QAAQ,GAAGhC,mCAAmC,CAAC;UACnDiC,KAAK,EAAE,IAAIC,IAAJ,CAASP,KAAK,CAACQ,QAAf,CAD4C;UAEnDC,GAAG,EAAEF,IAAI,CAACG,GAAL;QAF8C,CAAD,CAApD;QAKA,oBACE;UAAK,eAAa,mBAAlB;UAAuC,SAAS,EAAErB,MAAM,CAACW,KAAzD;UAAA,wBACE;YAAA,wBACE;cAAM,SAAS,EAAET,UAAU,CAACS,KAAK,CAACG,MAAN,CAAaD,KAAd,CAA3B;cAAA,WAAkDA,KAAlD;YAAA,EADF,UACuEG,QADvE;UAAA,EADF,eAIE;YAAA,uBACE,KAAC,WAAD;cAAa,MAAM,EAAEL,KAAK,CAACN;YAA3B;UADF,EAJF,eAOE;YAAK,SAAS,EAAEL,MAAM,CAACsB,UAAvB;YAAA,WACGX,KAAK,CAACG,MAAN,CAAaD,KAAb,KAAuBpB,UAAU,CAAC8B,UAAlC,iBACC,KAAC,UAAD;cACE,IAAI,EAAG,GAAEhC,UAAU,CACjB,oBADiB,EAEjBI,sBAFiB,CAGjB,eAAcgB,KAAK,CAACG,MAAN,CAAaU,UAAb,CAAwBC,IAAxB,CAA6B,GAA7B,CAAkC,EAJpD;cAKE,SAAS,EAAEzB,MAAM,CAAC0B,MALpB;cAME,IAAI,EAAE,MANR;cAOE,IAAI,EAAE,IAPR;cAAA;YAAA,EAFJ,EAcGf,KAAK,CAACG,MAAN,CAAaD,KAAb,KAAuBpB,UAAU,CAACkC,MAAlC,iBACC,KAAC,UAAD;cACE,IAAI,EAAEnC,yBAAyB,CAACG,sBAAD,EAAyBgB,KAAK,CAACN,MAA/B,CADjC;cAEE,SAAS,EAAEL,MAAM,CAAC0B,MAFpB;cAGE,IAAI,EAAE,YAHR;cAIE,IAAI,EAAE,IAJR;cAAA;YAAA,EAfJ,EAwBGf,KAAK,CAACiB,YAAN,iBACC,KAAC,UAAD;cAAY,SAAS,EAAE5B,MAAM,CAAC0B,MAA9B;cAAsC,IAAI,EAAEf,KAAK,CAACiB,YAAlD;cAAgE,IAAI,EAAE,YAAtE;cAAoF,IAAI,EAAE,IAA1F;cAAA;YAAA,EAzBJ;UAAA,EAPF;QAAA,GAAsE,GAAEjB,KAAK,CAACkB,WAAY,IAAGjB,KAAM,EAAnG,CADF;MAwCD,CA/CA;IADH,EAXJ;EAAA,EADF;AAiED,CAxEM;;AA0EP,MAAMX,SAAS,GAAI6B,KAAD,KAA2B;EAC3CvB,cAAc,EAAE3B,GAAI;AACtB,cAAckD,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AAC/B,GAH6C;EAI3CnC,KAAK,EAAEhB,GAAI;AACb,wBAAwBkD,KAAK,CAACE,MAAN,CAAaC,UAAb,CAAwBC,SAAU;AAC1D,cAAcJ,KAAK,CAACC,OAAN,CAAc,GAAd,EAAmB,CAAnB,EAAsB,GAAtB,EAA2B,CAA3B,CAA8B;AAC5C,eAAeD,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AAChC,GAR6C;EAS3CvB,GAAG,EAAE5B,GAAI;AACX;AACA;AACA;AACA,GAb6C;EAc3C6B,MAAM,EAAE7B,GAAI;AACd,cAAckD,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAA0B;AACxC,GAhB6C;EAiB3CpB,KAAK,EAAE/B,GAAI;AACb,eAAekD,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiB,CAAjB,CAAoB;AACnC;AACA,8BAA8BD,KAAK,CAACE,MAAN,CAAaG,MAAb,CAAoBC,MAAO;AACzD;AACA,GAtB6C;EAuB3CV,MAAM,EAAE9C,GAAI;AACd;AACA,qBAAqBkD,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AACtC;AACA,GA3B6C;EA4B3CT,UAAU,EAAE1C,GAAI;AAClB,eAAekD,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiB,CAAjB,CAAoB;AACnC;AA9B6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}