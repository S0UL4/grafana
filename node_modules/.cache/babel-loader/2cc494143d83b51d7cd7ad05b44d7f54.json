{"ast":null,"code":"import { PanelPlugin } from '@grafana/data';\nimport { DebugPanel } from './DebugPanel';\nimport { StateViewEditor } from './StateView';\nimport { DebugMode } from './types';\nexport const plugin = new PanelPlugin(DebugPanel).useFieldConfig().setPanelOptions(builder => {\n  builder.addSelect({\n    path: 'mode',\n    name: 'Mode',\n    defaultValue: DebugMode.Render,\n    settings: {\n      options: [{\n        label: 'Render',\n        value: DebugMode.Render\n      }, {\n        label: 'Events',\n        value: DebugMode.Events\n      }, {\n        label: 'Cursor',\n        value: DebugMode.Cursor\n      }, {\n        label: 'Cursor',\n        value: DebugMode.Cursor\n      }, {\n        label: 'Share state',\n        value: DebugMode.State\n      }, {\n        label: 'Throw error',\n        value: DebugMode.ThrowError\n      }]\n    }\n  }).addCustomEditor({\n    id: 'stateView',\n    path: 'stateView',\n    name: 'State view',\n    defaultValue: '',\n    showIf: ({\n      mode\n    }) => mode === DebugMode.State,\n    editor: StateViewEditor\n  }).addBooleanSwitch({\n    path: 'counters.render',\n    name: 'Render Count',\n    defaultValue: true,\n    showIf: ({\n      mode\n    }) => mode === DebugMode.Render\n  }).addBooleanSwitch({\n    path: 'counters.dataChanged',\n    name: 'Data Changed Count',\n    defaultValue: true,\n    showIf: ({\n      mode\n    }) => mode === DebugMode.Render\n  }).addBooleanSwitch({\n    path: 'counters.schemaChanged',\n    name: 'Schema Changed Count',\n    defaultValue: true,\n    showIf: ({\n      mode\n    }) => mode === DebugMode.Render\n  }).addDashboardPicker({\n    path: 'dashboardUID',\n    name: 'Dashboard',\n    settings: {\n      placeholder: 'Select dashboard',\n      isClearable: true\n    }\n  });\n});","map":{"version":3,"names":["PanelPlugin","DebugPanel","StateViewEditor","DebugMode","plugin","useFieldConfig","setPanelOptions","builder","addSelect","path","name","defaultValue","Render","settings","options","label","value","Events","Cursor","State","ThrowError","addCustomEditor","id","showIf","mode","editor","addBooleanSwitch","addDashboardPicker","placeholder","isClearable"],"sources":["/home/soula/grafana/public/app/plugins/panel/debug/module.tsx"],"sourcesContent":["import { PanelPlugin } from '@grafana/data';\n\nimport { DebugPanel } from './DebugPanel';\nimport { StateViewEditor } from './StateView';\nimport { DebugMode, DebugPanelOptions } from './types';\n\nexport const plugin = new PanelPlugin<DebugPanelOptions>(DebugPanel).useFieldConfig().setPanelOptions((builder) => {\n  builder\n    .addSelect({\n      path: 'mode',\n      name: 'Mode',\n      defaultValue: DebugMode.Render,\n      settings: {\n        options: [\n          { label: 'Render', value: DebugMode.Render },\n          { label: 'Events', value: DebugMode.Events },\n          { label: 'Cursor', value: DebugMode.Cursor },\n          { label: 'Cursor', value: DebugMode.Cursor },\n          { label: 'Share state', value: DebugMode.State },\n          { label: 'Throw error', value: DebugMode.ThrowError },\n        ],\n      },\n    })\n    .addCustomEditor({\n      id: 'stateView',\n      path: 'stateView',\n      name: 'State view',\n      defaultValue: '',\n      showIf: ({ mode }) => mode === DebugMode.State,\n      editor: StateViewEditor,\n    })\n    .addBooleanSwitch({\n      path: 'counters.render',\n      name: 'Render Count',\n      defaultValue: true,\n      showIf: ({ mode }) => mode === DebugMode.Render,\n    })\n    .addBooleanSwitch({\n      path: 'counters.dataChanged',\n      name: 'Data Changed Count',\n      defaultValue: true,\n      showIf: ({ mode }) => mode === DebugMode.Render,\n    })\n    .addBooleanSwitch({\n      path: 'counters.schemaChanged',\n      name: 'Schema Changed Count',\n      defaultValue: true,\n      showIf: ({ mode }) => mode === DebugMode.Render,\n    })\n    .addDashboardPicker({\n      path: 'dashboardUID',\n      name: 'Dashboard',\n      settings: {\n        placeholder: 'Select dashboard',\n        isClearable: true,\n      },\n    });\n});\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,eAA5B;AAEA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,SAAT,QAA6C,SAA7C;AAEA,OAAO,MAAMC,MAAM,GAAG,IAAIJ,WAAJ,CAAmCC,UAAnC,EAA+CI,cAA/C,GAAgEC,eAAhE,CAAiFC,OAAD,IAAa;EACjHA,OAAO,CACJC,SADH,CACa;IACTC,IAAI,EAAE,MADG;IAETC,IAAI,EAAE,MAFG;IAGTC,YAAY,EAAER,SAAS,CAACS,MAHf;IAITC,QAAQ,EAAE;MACRC,OAAO,EAAE,CACP;QAAEC,KAAK,EAAE,QAAT;QAAmBC,KAAK,EAAEb,SAAS,CAACS;MAApC,CADO,EAEP;QAAEG,KAAK,EAAE,QAAT;QAAmBC,KAAK,EAAEb,SAAS,CAACc;MAApC,CAFO,EAGP;QAAEF,KAAK,EAAE,QAAT;QAAmBC,KAAK,EAAEb,SAAS,CAACe;MAApC,CAHO,EAIP;QAAEH,KAAK,EAAE,QAAT;QAAmBC,KAAK,EAAEb,SAAS,CAACe;MAApC,CAJO,EAKP;QAAEH,KAAK,EAAE,aAAT;QAAwBC,KAAK,EAAEb,SAAS,CAACgB;MAAzC,CALO,EAMP;QAAEJ,KAAK,EAAE,aAAT;QAAwBC,KAAK,EAAEb,SAAS,CAACiB;MAAzC,CANO;IADD;EAJD,CADb,EAgBGC,eAhBH,CAgBmB;IACfC,EAAE,EAAE,WADW;IAEfb,IAAI,EAAE,WAFS;IAGfC,IAAI,EAAE,YAHS;IAIfC,YAAY,EAAE,EAJC;IAKfY,MAAM,EAAE,CAAC;MAAEC;IAAF,CAAD,KAAcA,IAAI,KAAKrB,SAAS,CAACgB,KAL1B;IAMfM,MAAM,EAAEvB;EANO,CAhBnB,EAwBGwB,gBAxBH,CAwBoB;IAChBjB,IAAI,EAAE,iBADU;IAEhBC,IAAI,EAAE,cAFU;IAGhBC,YAAY,EAAE,IAHE;IAIhBY,MAAM,EAAE,CAAC;MAAEC;IAAF,CAAD,KAAcA,IAAI,KAAKrB,SAAS,CAACS;EAJzB,CAxBpB,EA8BGc,gBA9BH,CA8BoB;IAChBjB,IAAI,EAAE,sBADU;IAEhBC,IAAI,EAAE,oBAFU;IAGhBC,YAAY,EAAE,IAHE;IAIhBY,MAAM,EAAE,CAAC;MAAEC;IAAF,CAAD,KAAcA,IAAI,KAAKrB,SAAS,CAACS;EAJzB,CA9BpB,EAoCGc,gBApCH,CAoCoB;IAChBjB,IAAI,EAAE,wBADU;IAEhBC,IAAI,EAAE,sBAFU;IAGhBC,YAAY,EAAE,IAHE;IAIhBY,MAAM,EAAE,CAAC;MAAEC;IAAF,CAAD,KAAcA,IAAI,KAAKrB,SAAS,CAACS;EAJzB,CApCpB,EA0CGe,kBA1CH,CA0CsB;IAClBlB,IAAI,EAAE,cADY;IAElBC,IAAI,EAAE,WAFY;IAGlBG,QAAQ,EAAE;MACRe,WAAW,EAAE,kBADL;MAERC,WAAW,EAAE;IAFL;EAHQ,CA1CtB;AAkDD,CAnDqB,CAAf"},"metadata":{},"sourceType":"module"}