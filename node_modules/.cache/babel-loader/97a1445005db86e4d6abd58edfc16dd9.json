{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { DataTransformerID, FieldType, standardTransformers } from '@grafana/data';\nimport { Button, InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { FieldNamePicker } from '../../../../../packages/grafana-ui/src/components/MatchersUI/FieldNamePicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst fieldNamePickerSettings = {\n  settings: {\n    width: 24\n  }\n};\nexport const ConvertFieldTypeTransformerEditor = ({\n  input,\n  options,\n  onChange\n}) => {\n  const allTypes = [{\n    value: FieldType.number,\n    label: 'Numeric'\n  }, {\n    value: FieldType.string,\n    label: 'String'\n  }, {\n    value: FieldType.time,\n    label: 'Time'\n  }, {\n    value: FieldType.boolean,\n    label: 'Boolean'\n  }, {\n    value: FieldType.other,\n    label: 'JSON'\n  }];\n  const onSelectField = useCallback(idx => value => {\n    const conversions = options.conversions;\n    conversions[idx] = Object.assign({}, conversions[idx], {\n      targetField: value !== null && value !== void 0 ? value : ''\n    });\n    onChange(Object.assign({}, options, {\n      conversions: conversions\n    }));\n  }, [onChange, options]);\n  const onSelectDestinationType = useCallback(idx => value => {\n    const conversions = options.conversions;\n    conversions[idx] = Object.assign({}, conversions[idx], {\n      destinationType: value.value\n    });\n    onChange(Object.assign({}, options, {\n      conversions: conversions\n    }));\n  }, [onChange, options]);\n  const onInputFormat = useCallback(idx => e => {\n    const conversions = options.conversions;\n    conversions[idx] = Object.assign({}, conversions[idx], {\n      dateFormat: e.currentTarget.value\n    });\n    onChange(Object.assign({}, options, {\n      conversions: conversions\n    }));\n  }, [onChange, options]);\n  const onAddConvertFieldType = useCallback(() => {\n    onChange(Object.assign({}, options, {\n      conversions: [...options.conversions, {\n        targetField: undefined,\n        destinationType: undefined,\n        dateFormat: undefined\n      }]\n    }));\n  }, [onChange, options]);\n  const onRemoveConvertFieldType = useCallback(idx => {\n    const removed = options.conversions;\n    removed.splice(idx, 1);\n    onChange(Object.assign({}, options, {\n      conversions: removed\n    }));\n  }, [onChange, options]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [options.conversions.map((c, idx) => {\n      var _c$targetField;\n\n      return /*#__PURE__*/_jsxs(InlineFieldRow, {\n        children: [/*#__PURE__*/_jsx(InlineField, {\n          label: 'Field',\n          children: /*#__PURE__*/_jsx(FieldNamePicker, {\n            context: {\n              data: input\n            },\n            value: (_c$targetField = c.targetField) !== null && _c$targetField !== void 0 ? _c$targetField : '',\n            onChange: onSelectField(idx),\n            item: fieldNamePickerSettings\n          })\n        }), /*#__PURE__*/_jsx(InlineField, {\n          label: 'as',\n          children: /*#__PURE__*/_jsx(Select, {\n            options: allTypes,\n            value: c.destinationType,\n            placeholder: 'Type',\n            onChange: onSelectDestinationType(idx),\n            width: 18\n          })\n        }), c.destinationType === FieldType.time && /*#__PURE__*/_jsx(InlineField, {\n          label: \"Input format\",\n          tooltip: \"Specify the format of the input field so Grafana can parse the date string correctly.\",\n          children: /*#__PURE__*/_jsx(Input, {\n            value: c.dateFormat,\n            placeholder: 'e.g. YYYY-MM-DD',\n            onChange: onInputFormat(idx),\n            width: 24\n          })\n        }), /*#__PURE__*/_jsx(Button, {\n          size: \"md\",\n          icon: \"trash-alt\",\n          variant: \"secondary\",\n          onClick: () => onRemoveConvertFieldType(idx),\n          \"aria-label\": 'Remove convert field type transformer'\n        })]\n      }, `${c.targetField}-${idx}`);\n    }), /*#__PURE__*/_jsx(Button, {\n      size: \"sm\",\n      icon: \"plus\",\n      onClick: onAddConvertFieldType,\n      variant: \"secondary\",\n      \"aria-label\": 'Add a convert field type transformer',\n      children: 'Convert field type'\n    })]\n  });\n};\nexport const convertFieldTypeTransformRegistryItem = {\n  id: DataTransformerID.convertFieldType,\n  editor: ConvertFieldTypeTransformerEditor,\n  transformation: standardTransformers.convertFieldTypeTransformer,\n  name: standardTransformers.convertFieldTypeTransformer.name,\n  description: standardTransformers.convertFieldTypeTransformer.description\n};","map":{"version":3,"names":["React","useCallback","DataTransformerID","FieldType","standardTransformers","Button","InlineField","InlineFieldRow","Input","Select","FieldNamePicker","fieldNamePickerSettings","settings","width","ConvertFieldTypeTransformerEditor","input","options","onChange","allTypes","value","number","label","string","time","boolean","other","onSelectField","idx","conversions","targetField","onSelectDestinationType","destinationType","onInputFormat","e","dateFormat","currentTarget","onAddConvertFieldType","undefined","onRemoveConvertFieldType","removed","splice","map","c","data","convertFieldTypeTransformRegistryItem","id","convertFieldType","editor","transformation","convertFieldTypeTransformer","name","description"],"sources":["/home/soula/grafana/public/app/features/transformers/editors/ConvertFieldTypeTransformerEditor.tsx"],"sourcesContent":["import React, { ChangeEvent, useCallback } from 'react';\n\nimport {\n  DataTransformerID,\n  FieldNamePickerConfigSettings,\n  FieldType,\n  SelectableValue,\n  StandardEditorsRegistryItem,\n  standardTransformers,\n  TransformerRegistryItem,\n  TransformerUIProps,\n} from '@grafana/data';\nimport { ConvertFieldTypeTransformerOptions } from '@grafana/data/src/transformations/transformers/convertFieldType';\nimport { Button, InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\n\nimport { ConvertFieldTypeOptions } from '../../../../../packages/grafana-data/src/transformations/transformers/convertFieldType';\nimport { FieldNamePicker } from '../../../../../packages/grafana-ui/src/components/MatchersUI/FieldNamePicker';\n\nconst fieldNamePickerSettings: StandardEditorsRegistryItem<string, FieldNamePickerConfigSettings> = {\n  settings: { width: 24 },\n} as any;\n\nexport const ConvertFieldTypeTransformerEditor: React.FC<TransformerUIProps<ConvertFieldTypeTransformerOptions>> = ({\n  input,\n  options,\n  onChange,\n}) => {\n  const allTypes: Array<SelectableValue<FieldType>> = [\n    { value: FieldType.number, label: 'Numeric' },\n    { value: FieldType.string, label: 'String' },\n    { value: FieldType.time, label: 'Time' },\n    { value: FieldType.boolean, label: 'Boolean' },\n    { value: FieldType.other, label: 'JSON' },\n  ];\n\n  const onSelectField = useCallback(\n    (idx) => (value: string | undefined) => {\n      const conversions = options.conversions;\n      conversions[idx] = { ...conversions[idx], targetField: value ?? '' };\n      onChange({\n        ...options,\n        conversions: conversions,\n      });\n    },\n    [onChange, options]\n  );\n\n  const onSelectDestinationType = useCallback(\n    (idx) => (value: SelectableValue<FieldType>) => {\n      const conversions = options.conversions;\n      conversions[idx] = { ...conversions[idx], destinationType: value.value };\n      onChange({\n        ...options,\n        conversions: conversions,\n      });\n    },\n    [onChange, options]\n  );\n\n  const onInputFormat = useCallback(\n    (idx) => (e: ChangeEvent<HTMLInputElement>) => {\n      const conversions = options.conversions;\n      conversions[idx] = { ...conversions[idx], dateFormat: e.currentTarget.value };\n      onChange({\n        ...options,\n        conversions: conversions,\n      });\n    },\n    [onChange, options]\n  );\n\n  const onAddConvertFieldType = useCallback(() => {\n    onChange({\n      ...options,\n      conversions: [\n        ...options.conversions,\n        { targetField: undefined, destinationType: undefined, dateFormat: undefined },\n      ],\n    });\n  }, [onChange, options]);\n\n  const onRemoveConvertFieldType = useCallback(\n    (idx) => {\n      const removed = options.conversions;\n      removed.splice(idx, 1);\n      onChange({\n        ...options,\n        conversions: removed,\n      });\n    },\n    [onChange, options]\n  );\n\n  return (\n    <>\n      {options.conversions.map((c: ConvertFieldTypeOptions, idx: number) => {\n        return (\n          <InlineFieldRow key={`${c.targetField}-${idx}`}>\n            <InlineField label={'Field'}>\n              <FieldNamePicker\n                context={{ data: input }}\n                value={c.targetField ?? ''}\n                onChange={onSelectField(idx)}\n                item={fieldNamePickerSettings}\n              />\n            </InlineField>\n            <InlineField label={'as'}>\n              <Select\n                options={allTypes}\n                value={c.destinationType}\n                placeholder={'Type'}\n                onChange={onSelectDestinationType(idx)}\n                width={18}\n              />\n            </InlineField>\n            {c.destinationType === FieldType.time && (\n              <InlineField\n                label=\"Input format\"\n                tooltip=\"Specify the format of the input field so Grafana can parse the date string correctly.\"\n              >\n                <Input value={c.dateFormat} placeholder={'e.g. YYYY-MM-DD'} onChange={onInputFormat(idx)} width={24} />\n              </InlineField>\n            )}\n            <Button\n              size=\"md\"\n              icon=\"trash-alt\"\n              variant=\"secondary\"\n              onClick={() => onRemoveConvertFieldType(idx)}\n              aria-label={'Remove convert field type transformer'}\n            />\n          </InlineFieldRow>\n        );\n      })}\n      <Button\n        size=\"sm\"\n        icon=\"plus\"\n        onClick={onAddConvertFieldType}\n        variant=\"secondary\"\n        aria-label={'Add a convert field type transformer'}\n      >\n        {'Convert field type'}\n      </Button>\n    </>\n  );\n};\n\nexport const convertFieldTypeTransformRegistryItem: TransformerRegistryItem<ConvertFieldTypeTransformerOptions> = {\n  id: DataTransformerID.convertFieldType,\n  editor: ConvertFieldTypeTransformerEditor,\n  transformation: standardTransformers.convertFieldTypeTransformer,\n  name: standardTransformers.convertFieldTypeTransformer.name,\n  description: standardTransformers.convertFieldTypeTransformer.description,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}