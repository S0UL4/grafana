{"ast":null,"code":"import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction } from 'app/types';\nimport DataSourcesList from './DataSourcesList';\nimport { loadDataSources } from './state/actions';\nimport { setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/reducers';\nimport { getDataSources, getDataSourcesCount, getDataSourcesLayoutMode, getDataSourcesSearchQuery } from './state/selectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction mapStateToProps(state) {\n  return {\n    navModel: getNavModel(state.navIndex, 'datasources'),\n    dataSources: getDataSources(state.dataSources),\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\n    hasFetched: state.dataSources.hasFetched\n  };\n}\n\nconst mapDispatchToProps = {\n  loadDataSources,\n  setDataSourcesSearchQuery,\n  setDataSourcesLayoutMode\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nconst emptyListModel = {\n  title: 'No data sources defined',\n  buttonIcon: 'database',\n  buttonLink: 'datasources/new',\n  buttonTitle: 'Add data source',\n  proTip: 'You can also define data sources through configuration files.',\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\n  proTipLinkTitle: 'Learn more',\n  proTipTarget: '_blank'\n};\nexport class DataSourcesListPage extends PureComponent {\n  componentDidMount() {\n    this.props.loadDataSources();\n  }\n\n  render() {\n    const {\n      dataSources,\n      dataSourcesCount,\n      navModel,\n      layoutMode,\n      searchQuery,\n      setDataSourcesSearchQuery,\n      hasFetched\n    } = this.props;\n    const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n    const linkButton = {\n      href: 'datasources/new',\n      title: 'Add data source',\n      disabled: !canCreateDataSource\n    };\n    const emptyList = Object.assign({}, emptyListModel, {\n      buttonDisabled: !canCreateDataSource\n    });\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: navModel,\n      children: /*#__PURE__*/_jsx(Page.Contents, {\n        isLoading: !hasFetched,\n        children: /*#__PURE__*/_jsxs(_Fragment, {\n          children: [hasFetched && dataSourcesCount === 0 && /*#__PURE__*/_jsx(EmptyListCTA, Object.assign({}, emptyList)), hasFetched && dataSourcesCount > 0 && [/*#__PURE__*/_jsx(PageActionBar, {\n            searchQuery: searchQuery,\n            setSearchQuery: query => setDataSourcesSearchQuery(query),\n            linkButton: linkButton\n          }, \"action-bar\"), /*#__PURE__*/_jsx(DataSourcesList, {\n            dataSources: dataSources,\n            layoutMode: layoutMode\n          }, \"list\")]]\n        })\n      })\n    });\n  }\n\n}\nexport default connector(DataSourcesListPage);","map":{"version":3,"names":["React","PureComponent","connect","EmptyListCTA","Page","PageActionBar","contextSrv","getNavModel","AccessControlAction","DataSourcesList","loadDataSources","setDataSourcesLayoutMode","setDataSourcesSearchQuery","getDataSources","getDataSourcesCount","getDataSourcesLayoutMode","getDataSourcesSearchQuery","mapStateToProps","state","navModel","navIndex","dataSources","layoutMode","dataSourcesCount","searchQuery","hasFetched","mapDispatchToProps","connector","emptyListModel","title","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","DataSourcesListPage","componentDidMount","props","render","canCreateDataSource","hasPermission","DataSourcesCreate","linkButton","href","disabled","emptyList","buttonDisabled","query"],"sources":["/home/soula/grafana/public/app/features/datasources/DataSourcesListPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { IconName } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState, AccessControlAction } from 'app/types';\n\nimport DataSourcesList from './DataSourcesList';\nimport { loadDataSources } from './state/actions';\nimport { setDataSourcesLayoutMode, setDataSourcesSearchQuery } from './state/reducers';\nimport {\n  getDataSources,\n  getDataSourcesCount,\n  getDataSourcesLayoutMode,\n  getDataSourcesSearchQuery,\n} from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'datasources'),\n    dataSources: getDataSources(state.dataSources),\n    layoutMode: getDataSourcesLayoutMode(state.dataSources),\n    dataSourcesCount: getDataSourcesCount(state.dataSources),\n    searchQuery: getDataSourcesSearchQuery(state.dataSources),\n    hasFetched: state.dataSources.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadDataSources,\n  setDataSourcesSearchQuery,\n  setDataSourcesLayoutMode,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nconst emptyListModel = {\n  title: 'No data sources defined',\n  buttonIcon: 'database' as IconName,\n  buttonLink: 'datasources/new',\n  buttonTitle: 'Add data source',\n  proTip: 'You can also define data sources through configuration files.',\n  proTipLink: 'http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list',\n  proTipLinkTitle: 'Learn more',\n  proTipTarget: '_blank',\n};\n\nexport class DataSourcesListPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSources();\n  }\n\n  render() {\n    const { dataSources, dataSourcesCount, navModel, layoutMode, searchQuery, setDataSourcesSearchQuery, hasFetched } =\n      this.props;\n\n    const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n\n    const linkButton = {\n      href: 'datasources/new',\n      title: 'Add data source',\n      disabled: !canCreateDataSource,\n    };\n\n    const emptyList = {\n      ...emptyListModel,\n      buttonDisabled: !canCreateDataSource,\n    };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            {hasFetched && dataSourcesCount === 0 && <EmptyListCTA {...emptyList} />}\n            {hasFetched &&\n              dataSourcesCount > 0 && [\n                <PageActionBar\n                  searchQuery={searchQuery}\n                  setSearchQuery={(query) => setDataSourcesSearchQuery(query)}\n                  linkButton={linkButton}\n                  key=\"action-bar\"\n                />,\n                <DataSourcesList dataSources={dataSources} layoutMode={layoutMode} key=\"list\" />,\n              ]}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(DataSourcesListPage);\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwC,aAAxC;AAGA,OAAOC,YAAP,MAAyB,+CAAzB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,aAAP,MAA0B,iDAA1B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAAqBC,mBAArB,QAAgD,WAAhD;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,wBAAT,EAAmCC,yBAAnC,QAAoE,kBAApE;AACA,SACEC,cADF,EAEEC,mBAFF,EAGEC,wBAHF,EAIEC,yBAJF,QAKO,mBALP;;;;;AAOA,SAASC,eAAT,CAAyBC,KAAzB,EAA4C;EAC1C,OAAO;IACLC,QAAQ,EAAEZ,WAAW,CAACW,KAAK,CAACE,QAAP,EAAiB,aAAjB,CADhB;IAELC,WAAW,EAAER,cAAc,CAACK,KAAK,CAACG,WAAP,CAFtB;IAGLC,UAAU,EAAEP,wBAAwB,CAACG,KAAK,CAACG,WAAP,CAH/B;IAILE,gBAAgB,EAAET,mBAAmB,CAACI,KAAK,CAACG,WAAP,CAJhC;IAKLG,WAAW,EAAER,yBAAyB,CAACE,KAAK,CAACG,WAAP,CALjC;IAMLI,UAAU,EAAEP,KAAK,CAACG,WAAN,CAAkBI;EANzB,CAAP;AAQD;;AAED,MAAMC,kBAAkB,GAAG;EACzBhB,eADyB;EAEzBE,yBAFyB;EAGzBD;AAHyB,CAA3B;AAMA,MAAMgB,SAAS,GAAGzB,OAAO,CAACe,eAAD,EAAkBS,kBAAlB,CAAzB;AAIA,MAAME,cAAc,GAAG;EACrBC,KAAK,EAAE,yBADc;EAErBC,UAAU,EAAE,UAFS;EAGrBC,UAAU,EAAE,iBAHS;EAIrBC,WAAW,EAAE,iBAJQ;EAKrBC,MAAM,EAAE,+DALa;EAMrBC,UAAU,EAAE,6FANS;EAOrBC,eAAe,EAAE,YAPI;EAQrBC,YAAY,EAAE;AARO,CAAvB;AAWA,OAAO,MAAMC,mBAAN,SAAkCpC,aAAlC,CAAuD;EAC5DqC,iBAAiB,GAAG;IAClB,KAAKC,KAAL,CAAW7B,eAAX;EACD;;EAED8B,MAAM,GAAG;IACP,MAAM;MAAEnB,WAAF;MAAeE,gBAAf;MAAiCJ,QAAjC;MAA2CG,UAA3C;MAAuDE,WAAvD;MAAoEZ,yBAApE;MAA+Fa;IAA/F,IACJ,KAAKc,KADP;IAGA,MAAME,mBAAmB,GAAGnC,UAAU,CAACoC,aAAX,CAAyBlC,mBAAmB,CAACmC,iBAA7C,CAA5B;IAEA,MAAMC,UAAU,GAAG;MACjBC,IAAI,EAAE,iBADW;MAEjBhB,KAAK,EAAE,iBAFU;MAGjBiB,QAAQ,EAAE,CAACL;IAHM,CAAnB;IAMA,MAAMM,SAAS,qBACVnB,cADU;MAEboB,cAAc,EAAE,CAACP;IAFJ,EAAf;IAKA,oBACE,KAAC,IAAD;MAAM,QAAQ,EAAEtB,QAAhB;MAAA,uBACE,KAAC,IAAD,CAAM,QAAN;QAAe,SAAS,EAAE,CAACM,UAA3B;QAAA,uBACE;UAAA,WACGA,UAAU,IAAIF,gBAAgB,KAAK,CAAnC,iBAAwC,KAAC,YAAD,oBAAkBwB,SAAlB,EAD3C,EAEGtB,UAAU,IACTF,gBAAgB,GAAG,CADpB,IACyB,cACtB,KAAC,aAAD;YACE,WAAW,EAAEC,WADf;YAEE,cAAc,EAAGyB,KAAD,IAAWrC,yBAAyB,CAACqC,KAAD,CAFtD;YAGE,UAAU,EAAEL;UAHd,GAIM,YAJN,CADsB,eAOtB,KAAC,eAAD;YAAiB,WAAW,EAAEvB,WAA9B;YAA2C,UAAU,EAAEC;UAAvD,GAAuE,MAAvE,CAPsB,CAH5B;QAAA;MADF;IADF,EADF;EAmBD;;AAzC2D;AA4C9D,eAAeK,SAAS,CAACU,mBAAD,CAAxB"},"metadata":{},"sourceType":"module"}