{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { FieldColorModeId, fieldColorModeRegistry, getFieldColorMode } from '@grafana/data';\nimport { useStyles2, useTheme2, Field, RadioButtonGroup, Select } from '@grafana/ui';\nimport { ColorValueEditor } from './color';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const FieldColorEditor = ({\n  value,\n  onChange,\n  item,\n  id\n}) => {\n  var _item$settings, _value$mode, _item$settings2;\n\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const colorMode = getFieldColorMode(value === null || value === void 0 ? void 0 : value.mode);\n  const availableOptions = (_item$settings = item.settings) !== null && _item$settings !== void 0 && _item$settings.byValueSupport ? fieldColorModeRegistry.list() : fieldColorModeRegistry.list().filter(m => !m.isByValue);\n  const options = availableOptions.map(mode => {\n    var _FieldColorModeViz;\n\n    let suffix = mode.isByValue ? ' (by value)' : '';\n    return {\n      value: mode.id,\n      label: `${mode.name}${suffix}`,\n      description: mode.description,\n      isContinuous: mode.isContinuous,\n      isByValue: mode.isByValue,\n\n      component() {\n        return _FieldColorModeViz || (_FieldColorModeViz = /*#__PURE__*/_jsx(FieldColorModeViz, {\n          mode: mode,\n          theme: theme\n        }));\n      }\n\n    };\n  });\n\n  const onModeChange = newMode => {\n    onChange(Object.assign({}, value, {\n      mode: newMode.value\n    }));\n  };\n\n  const onColorChange = color => {\n    onChange(Object.assign({}, value, {\n      mode,\n      fixedColor: color\n    }));\n  };\n\n  const onSeriesModeChange = seriesBy => {\n    onChange(Object.assign({}, value, {\n      mode,\n      seriesBy\n    }));\n  };\n\n  const mode = (_value$mode = value === null || value === void 0 ? void 0 : value.mode) !== null && _value$mode !== void 0 ? _value$mode : FieldColorModeId.Thresholds;\n\n  if (mode === FieldColorModeId.Fixed) {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.group,\n      children: [/*#__PURE__*/_jsx(Select, {\n        minMenuHeight: 200,\n        options: options,\n        value: mode,\n        onChange: onModeChange,\n        className: styles.select,\n        inputId: id\n      }), /*#__PURE__*/_jsx(ColorValueEditor, {\n        value: value === null || value === void 0 ? void 0 : value.fixedColor,\n        onChange: onColorChange\n      })]\n    });\n  }\n\n  if ((_item$settings2 = item.settings) !== null && _item$settings2 !== void 0 && _item$settings2.bySeriesSupport && colorMode.isByValue) {\n    var _value$seriesBy;\n\n    const seriesModes = [{\n      label: 'Last',\n      value: 'last'\n    }, {\n      label: 'Min',\n      value: 'min'\n    }, {\n      label: 'Max',\n      value: 'max'\n    }];\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        style: {\n          marginBottom: theme.spacing(2)\n        },\n        children: /*#__PURE__*/_jsx(Select, {\n          minMenuHeight: 200,\n          options: options,\n          value: mode,\n          onChange: onModeChange,\n          inputId: id\n        })\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Color series by\",\n        children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n          value: (_value$seriesBy = value === null || value === void 0 ? void 0 : value.seriesBy) !== null && _value$seriesBy !== void 0 ? _value$seriesBy : 'last',\n          options: seriesModes,\n          onChange: onSeriesModeChange\n        })\n      })]\n    });\n  }\n\n  return /*#__PURE__*/_jsx(Select, {\n    minMenuHeight: 200,\n    options: options,\n    value: mode,\n    onChange: onModeChange,\n    inputId: id\n  });\n};\n\nconst FieldColorModeViz = ({\n  mode,\n  theme\n}) => {\n  if (!mode.getColors) {\n    return null;\n  }\n\n  const colors = mode.getColors(theme).map(theme.visualization.getColorByName);\n  const style = {\n    height: '8px',\n    width: '100%',\n    margin: '2px 0',\n    borderRadius: '3px',\n    opacity: 1\n  };\n\n  if (mode.isContinuous) {\n    style.background = `linear-gradient(90deg, ${colors.join(',')})`;\n  } else {\n    let gradient = '';\n    let lastColor = '';\n\n    for (let i = 0; i < colors.length; i++) {\n      const color = colors[i];\n\n      if (gradient === '') {\n        gradient = `linear-gradient(90deg, ${color} 0%`;\n      } else {\n        const valuePercent = i / (colors.length - 1);\n        const pos = valuePercent * 100;\n        gradient += `, ${lastColor} ${pos}%, ${color} ${pos}%`;\n      }\n\n      lastColor = color;\n    }\n\n    style.background = gradient;\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    style: style\n  });\n};\n\nconst getStyles = theme => {\n  return {\n    group: css`\n      display: flex;\n    `,\n    select: css`\n      margin-right: 8px;\n      flex-grow: 1;\n    `\n  };\n};","map":{"version":3,"names":["css","React","FieldColorModeId","fieldColorModeRegistry","getFieldColorMode","useStyles2","useTheme2","Field","RadioButtonGroup","Select","ColorValueEditor","FieldColorEditor","value","onChange","item","id","theme","styles","getStyles","colorMode","mode","availableOptions","settings","byValueSupport","list","filter","m","isByValue","options","map","suffix","label","name","description","isContinuous","component","onModeChange","newMode","onColorChange","color","fixedColor","onSeriesModeChange","seriesBy","Thresholds","Fixed","group","select","bySeriesSupport","seriesModes","marginBottom","spacing","FieldColorModeViz","getColors","colors","visualization","getColorByName","style","height","width","margin","borderRadius","opacity","background","join","gradient","lastColor","i","length","valuePercent","pos"],"sources":["/home/soula/grafana/public/app/core/components/OptionsUI/fieldColor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { CSSProperties, FC } from 'react';\n\nimport {\n  FieldConfigEditorProps,\n  FieldColorModeId,\n  SelectableValue,\n  FieldColor,\n  fieldColorModeRegistry,\n  FieldColorMode,\n  GrafanaTheme2,\n  FieldColorConfigSettings,\n  FieldColorSeriesByMode,\n  getFieldColorMode,\n} from '@grafana/data';\nimport { useStyles2, useTheme2, Field, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { ColorValueEditor } from './color';\n\nexport const FieldColorEditor: React.FC<FieldConfigEditorProps<FieldColor | undefined, FieldColorConfigSettings>> = ({\n  value,\n  onChange,\n  item,\n  id,\n}) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n\n  const colorMode = getFieldColorMode(value?.mode);\n  const availableOptions = item.settings?.byValueSupport\n    ? fieldColorModeRegistry.list()\n    : fieldColorModeRegistry.list().filter((m) => !m.isByValue);\n\n  const options = availableOptions.map((mode) => {\n    let suffix = mode.isByValue ? ' (by value)' : '';\n\n    return {\n      value: mode.id,\n      label: `${mode.name}${suffix}`,\n      description: mode.description,\n      isContinuous: mode.isContinuous,\n      isByValue: mode.isByValue,\n      component() {\n        return <FieldColorModeViz mode={mode} theme={theme} />;\n      },\n    };\n  });\n\n  const onModeChange = (newMode: SelectableValue<string>) => {\n    onChange({\n      ...value,\n      mode: newMode.value! as FieldColorModeId,\n    });\n  };\n\n  const onColorChange = (color?: string) => {\n    onChange({\n      ...value,\n      mode,\n      fixedColor: color,\n    });\n  };\n\n  const onSeriesModeChange = (seriesBy?: FieldColorSeriesByMode) => {\n    onChange({\n      ...value,\n      mode,\n      seriesBy,\n    });\n  };\n\n  const mode = value?.mode ?? FieldColorModeId.Thresholds;\n\n  if (mode === FieldColorModeId.Fixed) {\n    return (\n      <div className={styles.group}>\n        <Select\n          minMenuHeight={200}\n          options={options}\n          value={mode}\n          onChange={onModeChange}\n          className={styles.select}\n          inputId={id}\n        />\n        <ColorValueEditor value={value?.fixedColor} onChange={onColorChange} />\n      </div>\n    );\n  }\n\n  if (item.settings?.bySeriesSupport && colorMode.isByValue) {\n    const seriesModes: Array<SelectableValue<FieldColorSeriesByMode>> = [\n      { label: 'Last', value: 'last' },\n      { label: 'Min', value: 'min' },\n      { label: 'Max', value: 'max' },\n    ];\n\n    return (\n      <>\n        <div style={{ marginBottom: theme.spacing(2) }}>\n          <Select minMenuHeight={200} options={options} value={mode} onChange={onModeChange} inputId={id} />\n        </div>\n        <Field label=\"Color series by\">\n          <RadioButtonGroup value={value?.seriesBy ?? 'last'} options={seriesModes} onChange={onSeriesModeChange} />\n        </Field>\n      </>\n    );\n  }\n\n  return <Select minMenuHeight={200} options={options} value={mode} onChange={onModeChange} inputId={id} />;\n};\n\ninterface ModeProps {\n  mode: FieldColorMode;\n  theme: GrafanaTheme2;\n}\n\nconst FieldColorModeViz: FC<ModeProps> = ({ mode, theme }) => {\n  if (!mode.getColors) {\n    return null;\n  }\n\n  const colors = mode.getColors(theme).map(theme.visualization.getColorByName);\n  const style: CSSProperties = {\n    height: '8px',\n    width: '100%',\n    margin: '2px 0',\n    borderRadius: '3px',\n    opacity: 1,\n  };\n\n  if (mode.isContinuous) {\n    style.background = `linear-gradient(90deg, ${colors.join(',')})`;\n  } else {\n    let gradient = '';\n    let lastColor = '';\n\n    for (let i = 0; i < colors.length; i++) {\n      const color = colors[i];\n      if (gradient === '') {\n        gradient = `linear-gradient(90deg, ${color} 0%`;\n      } else {\n        const valuePercent = i / (colors.length - 1);\n        const pos = valuePercent * 100;\n        gradient += `, ${lastColor} ${pos}%, ${color} ${pos}%`;\n      }\n      lastColor = color;\n    }\n    style.background = gradient;\n  }\n\n  return <div style={style} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    group: css`\n      display: flex;\n    `,\n    select: css`\n      margin-right: 8px;\n      flex-grow: 1;\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}