{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport memoizeOne from 'memoize-one';\nimport React, { PureComponent, createRef } from 'react';\nimport { rangeUtil, LogLevel, LogsDedupStrategy, LogsDedupDescription, LogsSortOrder } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { RadioButtonGroup, LogRows, Button, InlineField, InlineFieldRow, InlineSwitch, withTheme2 } from '@grafana/ui';\nimport { dedupLogRows, filterLogLevels } from 'app/core/logs_model';\nimport store from 'app/core/store';\nimport { LogsMetaRow } from './LogsMetaRow';\nimport LogsNavigation from './LogsNavigation';\nimport { LogsVolumePanel } from './LogsVolumePanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst SETTINGS_KEYS = {\n  showLabels: 'grafana.explore.logs.showLabels',\n  showTime: 'grafana.explore.logs.showTime',\n  wrapLogMessage: 'grafana.explore.logs.wrapLogMessage',\n  prettifyLogMessage: 'grafana.explore.logs.prettifyLogMessage',\n  logsSortOrder: 'grafana.explore.logs.sortOrder'\n};\n\nclass UnthemedLogs extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"flipOrderTimer\", void 0);\n\n    _defineProperty(this, \"cancelFlippingTimer\", void 0);\n\n    _defineProperty(this, \"topLogsRef\", /*#__PURE__*/createRef());\n\n    _defineProperty(this, \"state\", {\n      showLabels: store.getBool(SETTINGS_KEYS.showLabels, false),\n      showTime: store.getBool(SETTINGS_KEYS.showTime, true),\n      wrapLogMessage: store.getBool(SETTINGS_KEYS.wrapLogMessage, true),\n      prettifyLogMessage: store.getBool(SETTINGS_KEYS.prettifyLogMessage, false),\n      dedupStrategy: LogsDedupStrategy.none,\n      hiddenLogLevels: [],\n      logsSortOrder: store.get(SETTINGS_KEYS.logsSortOrder) || LogsSortOrder.Descending,\n      isFlipping: false,\n      showDetectedFields: [],\n      forceEscape: false\n    });\n\n    _defineProperty(this, \"onChangeLogsSortOrder\", () => {\n      this.setState({\n        isFlipping: true\n      }); // we are using setTimeout here to make sure that disabled button is rendered before the rendering of reordered logs\n\n      this.flipOrderTimer = window.setTimeout(() => {\n        this.setState(prevState => {\n          const newSortOrder = prevState.logsSortOrder === LogsSortOrder.Descending ? LogsSortOrder.Ascending : LogsSortOrder.Descending;\n          store.set(SETTINGS_KEYS.logsSortOrder, newSortOrder);\n          return {\n            logsSortOrder: newSortOrder\n          };\n        });\n      }, 0);\n      this.cancelFlippingTimer = window.setTimeout(() => this.setState({\n        isFlipping: false\n      }), 1000);\n    });\n\n    _defineProperty(this, \"onEscapeNewlines\", () => {\n      this.setState(prevState => ({\n        forceEscape: !prevState.forceEscape\n      }));\n    });\n\n    _defineProperty(this, \"onChangeDedup\", dedupStrategy => {\n      reportInteraction('grafana_explore_logs_deduplication_clicked', {\n        deduplicationType: dedupStrategy,\n        datasourceType: this.props.datasourceType\n      });\n      this.setState({\n        dedupStrategy\n      });\n    });\n\n    _defineProperty(this, \"onChangeLabels\", event => {\n      const {\n        target\n      } = event;\n\n      if (target) {\n        const showLabels = target.checked;\n        this.setState({\n          showLabels\n        });\n        store.set(SETTINGS_KEYS.showLabels, showLabels);\n      }\n    });\n\n    _defineProperty(this, \"onChangeTime\", event => {\n      const {\n        target\n      } = event;\n\n      if (target) {\n        const showTime = target.checked;\n        this.setState({\n          showTime\n        });\n        store.set(SETTINGS_KEYS.showTime, showTime);\n      }\n    });\n\n    _defineProperty(this, \"onChangeWrapLogMessage\", event => {\n      const {\n        target\n      } = event;\n\n      if (target) {\n        const wrapLogMessage = target.checked;\n        this.setState({\n          wrapLogMessage\n        });\n        store.set(SETTINGS_KEYS.wrapLogMessage, wrapLogMessage);\n      }\n    });\n\n    _defineProperty(this, \"onChangePrettifyLogMessage\", event => {\n      const {\n        target\n      } = event;\n\n      if (target) {\n        const prettifyLogMessage = target.checked;\n        this.setState({\n          prettifyLogMessage\n        });\n        store.set(SETTINGS_KEYS.prettifyLogMessage, prettifyLogMessage);\n      }\n    });\n\n    _defineProperty(this, \"onToggleLogLevel\", hiddenRawLevels => {\n      const hiddenLogLevels = hiddenRawLevels.map(level => LogLevel[level]);\n      this.setState({\n        hiddenLogLevels\n      });\n    });\n\n    _defineProperty(this, \"onClickScan\", event => {\n      event.preventDefault();\n\n      if (this.props.onStartScanning) {\n        this.props.onStartScanning();\n      }\n    });\n\n    _defineProperty(this, \"onClickStopScan\", event => {\n      event.preventDefault();\n\n      if (this.props.onStopScanning) {\n        this.props.onStopScanning();\n      }\n    });\n\n    _defineProperty(this, \"showDetectedField\", key => {\n      const index = this.state.showDetectedFields.indexOf(key);\n\n      if (index === -1) {\n        this.setState(state => {\n          return {\n            showDetectedFields: state.showDetectedFields.concat(key)\n          };\n        });\n      }\n    });\n\n    _defineProperty(this, \"hideDetectedField\", key => {\n      const index = this.state.showDetectedFields.indexOf(key);\n\n      if (index > -1) {\n        this.setState(state => {\n          return {\n            showDetectedFields: state.showDetectedFields.filter(k => key !== k)\n          };\n        });\n      }\n    });\n\n    _defineProperty(this, \"clearDetectedFields\", () => {\n      this.setState(state => {\n        return {\n          showDetectedFields: []\n        };\n      });\n    });\n\n    _defineProperty(this, \"checkUnescapedContent\", memoizeOne(logRows => {\n      return !!logRows.some(r => r.hasUnescapedContent);\n    }));\n\n    _defineProperty(this, \"dedupRows\", memoizeOne((logRows, dedupStrategy) => {\n      const dedupedRows = dedupLogRows(logRows, dedupStrategy);\n      const dedupCount = dedupedRows.reduce((sum, row) => row.duplicates ? sum + row.duplicates : sum, 0);\n      return {\n        dedupedRows,\n        dedupCount\n      };\n    }));\n\n    _defineProperty(this, \"filterRows\", memoizeOne((logRows, hiddenLogLevels) => {\n      return filterLogLevels(logRows, new Set(hiddenLogLevels));\n    }));\n\n    _defineProperty(this, \"createNavigationRange\", memoizeOne(logRows => {\n      if (!logRows || logRows.length === 0) {\n        return undefined;\n      }\n\n      const firstTimeStamp = logRows[0].timeEpochMs;\n      const lastTimeStamp = logRows[logRows.length - 1].timeEpochMs;\n\n      if (lastTimeStamp < firstTimeStamp) {\n        return {\n          from: lastTimeStamp,\n          to: firstTimeStamp\n        };\n      }\n\n      return {\n        from: firstTimeStamp,\n        to: lastTimeStamp\n      };\n    }));\n\n    _defineProperty(this, \"scrollToTopLogs\", () => {\n      var _this$topLogsRef$curr;\n\n      return (_this$topLogsRef$curr = this.topLogsRef.current) === null || _this$topLogsRef$curr === void 0 ? void 0 : _this$topLogsRef$curr.scrollIntoView();\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.flipOrderTimer) {\n      window.clearTimeout(this.flipOrderTimer);\n    }\n\n    if (this.cancelFlippingTimer) {\n      window.clearTimeout(this.cancelFlippingTimer);\n    }\n  }\n\n  render() {\n    const {\n      width,\n      splitOpen,\n      logRows,\n      logsMeta,\n      logsSeries,\n      visibleRange,\n      logsVolumeData,\n      loadLogsVolumeData,\n      loading = false,\n      loadingState,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      timeZone,\n      scanning,\n      scanRange,\n      showContextToggle,\n      absoluteRange,\n      onChangeTime,\n      getFieldLinks,\n      theme,\n      logsQueries,\n      clearCache,\n      addResultsToCache,\n      exploreId\n    } = this.props;\n    const {\n      showLabels,\n      showTime,\n      wrapLogMessage,\n      prettifyLogMessage,\n      dedupStrategy,\n      hiddenLogLevels,\n      logsSortOrder,\n      isFlipping,\n      showDetectedFields,\n      forceEscape\n    } = this.state;\n    const styles = getStyles(theme, wrapLogMessage);\n    const hasData = logRows && logRows.length > 0;\n    const hasUnescapedContent = this.checkUnescapedContent(logRows);\n    const filteredLogs = this.filterRows(logRows, hiddenLogLevels);\n    const {\n      dedupedRows,\n      dedupCount\n    } = this.dedupRows(filteredLogs, dedupStrategy);\n    const navigationRange = this.createNavigationRange(logRows);\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(LogsVolumePanel, {\n        absoluteRange: absoluteRange,\n        width: width,\n        logsVolumeData: logsVolumeData,\n        logLinesBasedData: logsSeries ? {\n          data: logsSeries,\n          state: loadingState\n        } : undefined,\n        logLinesBasedDataVisibleRange: visibleRange,\n        onUpdateTimeRange: onChangeTime,\n        timeZone: timeZone,\n        splitOpen: splitOpen,\n        onLoadLogsVolume: () => loadLogsVolumeData(exploreId),\n        onHiddenSeriesChanged: this.onToggleLogLevel\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.logOptions,\n        ref: this.topLogsRef,\n        children: [/*#__PURE__*/_jsxs(InlineFieldRow, {\n          children: [/*#__PURE__*/_jsx(InlineField, {\n            label: \"Time\",\n            className: styles.horizontalInlineLabel,\n            transparent: true,\n            children: /*#__PURE__*/_jsx(InlineSwitch, {\n              value: showTime,\n              onChange: this.onChangeTime,\n              className: styles.horizontalInlineSwitch,\n              transparent: true,\n              id: `show-time_${exploreId}`\n            })\n          }), /*#__PURE__*/_jsx(InlineField, {\n            label: \"Unique labels\",\n            className: styles.horizontalInlineLabel,\n            transparent: true,\n            children: /*#__PURE__*/_jsx(InlineSwitch, {\n              value: showLabels,\n              onChange: this.onChangeLabels,\n              className: styles.horizontalInlineSwitch,\n              transparent: true,\n              id: `unique-labels_${exploreId}`\n            })\n          }), /*#__PURE__*/_jsx(InlineField, {\n            label: \"Wrap lines\",\n            className: styles.horizontalInlineLabel,\n            transparent: true,\n            children: /*#__PURE__*/_jsx(InlineSwitch, {\n              value: wrapLogMessage,\n              onChange: this.onChangeWrapLogMessage,\n              className: styles.horizontalInlineSwitch,\n              transparent: true,\n              id: `wrap-lines_${exploreId}`\n            })\n          }), /*#__PURE__*/_jsx(InlineField, {\n            label: \"Prettify JSON\",\n            className: styles.horizontalInlineLabel,\n            transparent: true,\n            children: /*#__PURE__*/_jsx(InlineSwitch, {\n              value: prettifyLogMessage,\n              onChange: this.onChangePrettifyLogMessage,\n              className: styles.horizontalInlineSwitch,\n              transparent: true,\n              id: `prettify_${exploreId}`\n            })\n          }), /*#__PURE__*/_jsx(InlineField, {\n            label: \"Dedup\",\n            className: styles.horizontalInlineLabel,\n            transparent: true,\n            children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n              options: Object.values(LogsDedupStrategy).map(dedupType => ({\n                label: capitalize(dedupType),\n                value: dedupType,\n                description: LogsDedupDescription[dedupType]\n              })),\n              value: dedupStrategy,\n              onChange: this.onChangeDedup,\n              className: styles.radioButtons\n            })\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(InlineField, {\n            label: \"Display results\",\n            className: styles.horizontalInlineLabel,\n            transparent: true,\n            children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n              disabled: isFlipping,\n              options: [{\n                label: 'Newest first',\n                value: LogsSortOrder.Descending,\n                description: 'Show results newest to oldest'\n              }, {\n                label: 'Oldest first',\n                value: LogsSortOrder.Ascending,\n                description: 'Show results oldest to newest'\n              }],\n              value: logsSortOrder,\n              onChange: this.onChangeLogsSortOrder,\n              className: styles.radioButtons\n            })\n          })\n        })]\n      }), /*#__PURE__*/_jsx(LogsMetaRow, {\n        logRows: logRows,\n        meta: logsMeta || [],\n        dedupStrategy: dedupStrategy,\n        dedupCount: dedupCount,\n        hasUnescapedContent: hasUnescapedContent,\n        forceEscape: forceEscape,\n        showDetectedFields: showDetectedFields,\n        onEscapeNewlines: this.onEscapeNewlines,\n        clearDetectedFields: this.clearDetectedFields\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.logsSection,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: styles.logRows,\n          \"data-testid\": \"logRows\",\n          children: /*#__PURE__*/_jsx(LogRows, {\n            logRows: logRows,\n            deduplicatedRows: dedupedRows,\n            dedupStrategy: dedupStrategy,\n            getRowContext: this.props.getRowContext,\n            onClickFilterLabel: onClickFilterLabel,\n            onClickFilterOutLabel: onClickFilterOutLabel,\n            showContextToggle: showContextToggle,\n            showLabels: showLabels,\n            showTime: showTime,\n            enableLogDetails: true,\n            forceEscape: forceEscape,\n            wrapLogMessage: wrapLogMessage,\n            prettifyLogMessage: prettifyLogMessage,\n            timeZone: timeZone,\n            getFieldLinks: getFieldLinks,\n            logsSortOrder: logsSortOrder,\n            showDetectedFields: showDetectedFields,\n            onClickShowDetectedField: this.showDetectedField,\n            onClickHideDetectedField: this.hideDetectedField\n          })\n        }), /*#__PURE__*/_jsx(LogsNavigation, {\n          logsSortOrder: logsSortOrder,\n          visibleRange: navigationRange !== null && navigationRange !== void 0 ? navigationRange : absoluteRange,\n          absoluteRange: absoluteRange,\n          timeZone: timeZone,\n          onChangeTime: onChangeTime,\n          loading: loading,\n          queries: logsQueries !== null && logsQueries !== void 0 ? logsQueries : [],\n          scrollToTopLogs: this.scrollToTopLogs,\n          addResultsToCache: addResultsToCache,\n          clearCache: clearCache\n        })]\n      }), !loading && !hasData && !scanning && /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.noData,\n        children: [\"No logs found.\", /*#__PURE__*/_jsx(Button, {\n          size: \"xs\",\n          fill: \"text\",\n          onClick: this.onClickScan,\n          children: \"Scan for older logs\"\n        })]\n      }), scanning && /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.noData,\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          children: scanText\n        }), /*#__PURE__*/_jsx(Button, {\n          size: \"xs\",\n          fill: \"text\",\n          onClick: this.onClickStopScan,\n          children: \"Stop scan\"\n        })]\n      })]\n    });\n  }\n\n}\n\nexport const Logs = withTheme2(UnthemedLogs);\n\nconst getStyles = (theme, wrapLogMessage) => {\n  return {\n    noData: css`\n      > * {\n        margin-left: 0.5em;\n      }\n    `,\n    logOptions: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: baseline;\n      flex-wrap: wrap;\n      background-color: ${theme.colors.background.primary};\n      padding: ${theme.spacing(1, 2)};\n      border-radius: ${theme.shape.borderRadius()};\n      margin: ${theme.spacing(2, 0, 1)};\n      border: 1px solid ${theme.colors.border.medium};\n    `,\n    headerButton: css`\n      margin: ${theme.spacing(0.5, 0, 0, 1)};\n    `,\n    horizontalInlineLabel: css`\n      > label {\n        margin-right: 0;\n      }\n    `,\n    horizontalInlineSwitch: css`\n      padding: 0 ${theme.spacing(1)} 0 0;\n    `,\n    radioButtons: css`\n      margin: 0;\n    `,\n    logsSection: css`\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n    `,\n    logRows: css`\n      overflow-x: ${wrapLogMessage ? 'unset' : 'scroll'};\n      overflow-y: visible;\n      width: 100%;\n    `\n  };\n};","map":{"version":3,"names":["css","capitalize","memoizeOne","React","PureComponent","createRef","rangeUtil","LogLevel","LogsDedupStrategy","LogsDedupDescription","LogsSortOrder","reportInteraction","RadioButtonGroup","LogRows","Button","InlineField","InlineFieldRow","InlineSwitch","withTheme2","dedupLogRows","filterLogLevels","store","LogsMetaRow","LogsNavigation","LogsVolumePanel","SETTINGS_KEYS","showLabels","showTime","wrapLogMessage","prettifyLogMessage","logsSortOrder","UnthemedLogs","getBool","dedupStrategy","none","hiddenLogLevels","get","Descending","isFlipping","showDetectedFields","forceEscape","setState","flipOrderTimer","window","setTimeout","prevState","newSortOrder","Ascending","set","cancelFlippingTimer","deduplicationType","datasourceType","props","event","target","checked","hiddenRawLevels","map","level","preventDefault","onStartScanning","onStopScanning","key","index","state","indexOf","concat","filter","k","logRows","some","r","hasUnescapedContent","dedupedRows","dedupCount","reduce","sum","row","duplicates","Set","length","undefined","firstTimeStamp","timeEpochMs","lastTimeStamp","from","to","topLogsRef","current","scrollIntoView","componentWillUnmount","clearTimeout","render","width","splitOpen","logsMeta","logsSeries","visibleRange","logsVolumeData","loadLogsVolumeData","loading","loadingState","onClickFilterLabel","onClickFilterOutLabel","timeZone","scanning","scanRange","showContextToggle","absoluteRange","onChangeTime","getFieldLinks","theme","logsQueries","clearCache","addResultsToCache","exploreId","styles","getStyles","hasData","checkUnescapedContent","filteredLogs","filterRows","dedupRows","navigationRange","createNavigationRange","scanText","describeTimeRange","data","onToggleLogLevel","logOptions","horizontalInlineLabel","horizontalInlineSwitch","onChangeLabels","onChangeWrapLogMessage","onChangePrettifyLogMessage","Object","values","dedupType","label","value","description","onChangeDedup","radioButtons","onChangeLogsSortOrder","onEscapeNewlines","clearDetectedFields","logsSection","getRowContext","showDetectedField","hideDetectedField","scrollToTopLogs","noData","onClickScan","onClickStopScan","Logs","colors","background","primary","spacing","shape","borderRadius","border","medium","headerButton"],"sources":["/home/soula/grafana/public/app/features/explore/Logs.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport memoizeOne from 'memoize-one';\nimport React, { PureComponent, createRef } from 'react';\n\nimport {\n  rangeUtil,\n  RawTimeRange,\n  LogLevel,\n  TimeZone,\n  AbsoluteTimeRange,\n  LogsDedupStrategy,\n  LogRowModel,\n  LogsDedupDescription,\n  LogsMetaItem,\n  LogsSortOrder,\n  LinkModel,\n  Field,\n  DataQuery,\n  DataFrame,\n  GrafanaTheme2,\n  LoadingState,\n  SplitOpen,\n  DataQueryResponse,\n} from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  RadioButtonGroup,\n  LogRows,\n  Button,\n  InlineField,\n  InlineFieldRow,\n  InlineSwitch,\n  withTheme2,\n  Themeable2,\n} from '@grafana/ui';\nimport { RowContextOptions } from '@grafana/ui/src/components/Logs/LogRowContextProvider';\nimport { dedupLogRows, filterLogLevels } from 'app/core/logs_model';\nimport store from 'app/core/store';\nimport { ExploreId } from 'app/types/explore';\n\nimport { LogsMetaRow } from './LogsMetaRow';\nimport LogsNavigation from './LogsNavigation';\nimport { LogsVolumePanel } from './LogsVolumePanel';\n\nconst SETTINGS_KEYS = {\n  showLabels: 'grafana.explore.logs.showLabels',\n  showTime: 'grafana.explore.logs.showTime',\n  wrapLogMessage: 'grafana.explore.logs.wrapLogMessage',\n  prettifyLogMessage: 'grafana.explore.logs.prettifyLogMessage',\n  logsSortOrder: 'grafana.explore.logs.sortOrder',\n};\n\ninterface Props extends Themeable2 {\n  width: number;\n  splitOpen: SplitOpen;\n  logRows: LogRowModel[];\n  logsMeta?: LogsMetaItem[];\n  logsSeries?: DataFrame[];\n  logsQueries?: DataQuery[];\n  visibleRange?: AbsoluteTimeRange;\n  theme: GrafanaTheme2;\n  loading: boolean;\n  loadingState: LoadingState;\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  exploreId: ExploreId;\n  datasourceType?: string;\n  logsVolumeData: DataQueryResponse | undefined;\n  loadLogsVolumeData: (exploreId: ExploreId) => void;\n  showContextToggle?: (row?: LogRowModel) => boolean;\n  onChangeTime: (range: AbsoluteTimeRange) => void;\n  onClickFilterLabel?: (key: string, value: string) => void;\n  onClickFilterOutLabel?: (key: string, value: string) => void;\n  onStartScanning?: () => void;\n  onStopScanning?: () => void;\n  getRowContext?: (row: LogRowModel, options?: RowContextOptions) => Promise<any>;\n  getFieldLinks: (field: Field, rowIndex: number) => Array<LinkModel<Field>>;\n  addResultsToCache: () => void;\n  clearCache: () => void;\n}\n\ninterface State {\n  showLabels: boolean;\n  showTime: boolean;\n  wrapLogMessage: boolean;\n  prettifyLogMessage: boolean;\n  dedupStrategy: LogsDedupStrategy;\n  hiddenLogLevels: LogLevel[];\n  logsSortOrder: LogsSortOrder | null;\n  isFlipping: boolean;\n  showDetectedFields: string[];\n  forceEscape: boolean;\n}\n\nclass UnthemedLogs extends PureComponent<Props, State> {\n  flipOrderTimer?: number;\n  cancelFlippingTimer?: number;\n  topLogsRef = createRef<HTMLDivElement>();\n\n  state: State = {\n    showLabels: store.getBool(SETTINGS_KEYS.showLabels, false),\n    showTime: store.getBool(SETTINGS_KEYS.showTime, true),\n    wrapLogMessage: store.getBool(SETTINGS_KEYS.wrapLogMessage, true),\n    prettifyLogMessage: store.getBool(SETTINGS_KEYS.prettifyLogMessage, false),\n    dedupStrategy: LogsDedupStrategy.none,\n    hiddenLogLevels: [],\n    logsSortOrder: store.get(SETTINGS_KEYS.logsSortOrder) || LogsSortOrder.Descending,\n    isFlipping: false,\n    showDetectedFields: [],\n    forceEscape: false,\n  };\n\n  componentWillUnmount() {\n    if (this.flipOrderTimer) {\n      window.clearTimeout(this.flipOrderTimer);\n    }\n\n    if (this.cancelFlippingTimer) {\n      window.clearTimeout(this.cancelFlippingTimer);\n    }\n  }\n\n  onChangeLogsSortOrder = () => {\n    this.setState({ isFlipping: true });\n    // we are using setTimeout here to make sure that disabled button is rendered before the rendering of reordered logs\n    this.flipOrderTimer = window.setTimeout(() => {\n      this.setState((prevState) => {\n        const newSortOrder =\n          prevState.logsSortOrder === LogsSortOrder.Descending ? LogsSortOrder.Ascending : LogsSortOrder.Descending;\n        store.set(SETTINGS_KEYS.logsSortOrder, newSortOrder);\n        return { logsSortOrder: newSortOrder };\n      });\n    }, 0);\n    this.cancelFlippingTimer = window.setTimeout(() => this.setState({ isFlipping: false }), 1000);\n  };\n\n  onEscapeNewlines = () => {\n    this.setState((prevState) => ({\n      forceEscape: !prevState.forceEscape,\n    }));\n  };\n\n  onChangeDedup = (dedupStrategy: LogsDedupStrategy) => {\n    reportInteraction('grafana_explore_logs_deduplication_clicked', {\n      deduplicationType: dedupStrategy,\n      datasourceType: this.props.datasourceType,\n    });\n    this.setState({ dedupStrategy });\n  };\n\n  onChangeLabels = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    if (target) {\n      const showLabels = target.checked;\n      this.setState({\n        showLabels,\n      });\n      store.set(SETTINGS_KEYS.showLabels, showLabels);\n    }\n  };\n\n  onChangeTime = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    if (target) {\n      const showTime = target.checked;\n      this.setState({\n        showTime,\n      });\n      store.set(SETTINGS_KEYS.showTime, showTime);\n    }\n  };\n\n  onChangeWrapLogMessage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    if (target) {\n      const wrapLogMessage = target.checked;\n      this.setState({\n        wrapLogMessage,\n      });\n      store.set(SETTINGS_KEYS.wrapLogMessage, wrapLogMessage);\n    }\n  };\n\n  onChangePrettifyLogMessage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    if (target) {\n      const prettifyLogMessage = target.checked;\n      this.setState({\n        prettifyLogMessage,\n      });\n      store.set(SETTINGS_KEYS.prettifyLogMessage, prettifyLogMessage);\n    }\n  };\n\n  onToggleLogLevel = (hiddenRawLevels: string[]) => {\n    const hiddenLogLevels = hiddenRawLevels.map((level) => LogLevel[level as LogLevel]);\n    this.setState({ hiddenLogLevels });\n  };\n\n  onClickScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    if (this.props.onStartScanning) {\n      this.props.onStartScanning();\n    }\n  };\n\n  onClickStopScan = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    if (this.props.onStopScanning) {\n      this.props.onStopScanning();\n    }\n  };\n\n  showDetectedField = (key: string) => {\n    const index = this.state.showDetectedFields.indexOf(key);\n\n    if (index === -1) {\n      this.setState((state) => {\n        return {\n          showDetectedFields: state.showDetectedFields.concat(key),\n        };\n      });\n    }\n  };\n\n  hideDetectedField = (key: string) => {\n    const index = this.state.showDetectedFields.indexOf(key);\n    if (index > -1) {\n      this.setState((state) => {\n        return {\n          showDetectedFields: state.showDetectedFields.filter((k) => key !== k),\n        };\n      });\n    }\n  };\n\n  clearDetectedFields = () => {\n    this.setState((state) => {\n      return {\n        showDetectedFields: [],\n      };\n    });\n  };\n\n  checkUnescapedContent = memoizeOne((logRows: LogRowModel[]) => {\n    return !!logRows.some((r) => r.hasUnescapedContent);\n  });\n\n  dedupRows = memoizeOne((logRows: LogRowModel[], dedupStrategy: LogsDedupStrategy) => {\n    const dedupedRows = dedupLogRows(logRows, dedupStrategy);\n    const dedupCount = dedupedRows.reduce((sum, row) => (row.duplicates ? sum + row.duplicates : sum), 0);\n    return { dedupedRows, dedupCount };\n  });\n\n  filterRows = memoizeOne((logRows: LogRowModel[], hiddenLogLevels: LogLevel[]) => {\n    return filterLogLevels(logRows, new Set(hiddenLogLevels));\n  });\n\n  createNavigationRange = memoizeOne((logRows: LogRowModel[]): { from: number; to: number } | undefined => {\n    if (!logRows || logRows.length === 0) {\n      return undefined;\n    }\n    const firstTimeStamp = logRows[0].timeEpochMs;\n    const lastTimeStamp = logRows[logRows.length - 1].timeEpochMs;\n\n    if (lastTimeStamp < firstTimeStamp) {\n      return { from: lastTimeStamp, to: firstTimeStamp };\n    }\n\n    return { from: firstTimeStamp, to: lastTimeStamp };\n  });\n\n  scrollToTopLogs = () => this.topLogsRef.current?.scrollIntoView();\n\n  render() {\n    const {\n      width,\n      splitOpen,\n      logRows,\n      logsMeta,\n      logsSeries,\n      visibleRange,\n      logsVolumeData,\n      loadLogsVolumeData,\n      loading = false,\n      loadingState,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      timeZone,\n      scanning,\n      scanRange,\n      showContextToggle,\n      absoluteRange,\n      onChangeTime,\n      getFieldLinks,\n      theme,\n      logsQueries,\n      clearCache,\n      addResultsToCache,\n      exploreId,\n    } = this.props;\n\n    const {\n      showLabels,\n      showTime,\n      wrapLogMessage,\n      prettifyLogMessage,\n      dedupStrategy,\n      hiddenLogLevels,\n      logsSortOrder,\n      isFlipping,\n      showDetectedFields,\n      forceEscape,\n    } = this.state;\n\n    const styles = getStyles(theme, wrapLogMessage);\n    const hasData = logRows && logRows.length > 0;\n    const hasUnescapedContent = this.checkUnescapedContent(logRows);\n\n    const filteredLogs = this.filterRows(logRows, hiddenLogLevels);\n    const { dedupedRows, dedupCount } = this.dedupRows(filteredLogs, dedupStrategy);\n    const navigationRange = this.createNavigationRange(logRows);\n\n    const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\n\n    return (\n      <>\n        <LogsVolumePanel\n          absoluteRange={absoluteRange}\n          width={width}\n          logsVolumeData={logsVolumeData}\n          logLinesBasedData={\n            logsSeries\n              ? {\n                  data: logsSeries,\n                  state: loadingState,\n                }\n              : undefined\n          }\n          logLinesBasedDataVisibleRange={visibleRange}\n          onUpdateTimeRange={onChangeTime}\n          timeZone={timeZone}\n          splitOpen={splitOpen}\n          onLoadLogsVolume={() => loadLogsVolumeData(exploreId)}\n          onHiddenSeriesChanged={this.onToggleLogLevel}\n        />\n        <div className={styles.logOptions} ref={this.topLogsRef}>\n          <InlineFieldRow>\n            <InlineField label=\"Time\" className={styles.horizontalInlineLabel} transparent>\n              <InlineSwitch\n                value={showTime}\n                onChange={this.onChangeTime}\n                className={styles.horizontalInlineSwitch}\n                transparent\n                id={`show-time_${exploreId}`}\n              />\n            </InlineField>\n            <InlineField label=\"Unique labels\" className={styles.horizontalInlineLabel} transparent>\n              <InlineSwitch\n                value={showLabels}\n                onChange={this.onChangeLabels}\n                className={styles.horizontalInlineSwitch}\n                transparent\n                id={`unique-labels_${exploreId}`}\n              />\n            </InlineField>\n            <InlineField label=\"Wrap lines\" className={styles.horizontalInlineLabel} transparent>\n              <InlineSwitch\n                value={wrapLogMessage}\n                onChange={this.onChangeWrapLogMessage}\n                className={styles.horizontalInlineSwitch}\n                transparent\n                id={`wrap-lines_${exploreId}`}\n              />\n            </InlineField>\n            <InlineField label=\"Prettify JSON\" className={styles.horizontalInlineLabel} transparent>\n              <InlineSwitch\n                value={prettifyLogMessage}\n                onChange={this.onChangePrettifyLogMessage}\n                className={styles.horizontalInlineSwitch}\n                transparent\n                id={`prettify_${exploreId}`}\n              />\n            </InlineField>\n            <InlineField label=\"Dedup\" className={styles.horizontalInlineLabel} transparent>\n              <RadioButtonGroup\n                options={Object.values(LogsDedupStrategy).map((dedupType) => ({\n                  label: capitalize(dedupType),\n                  value: dedupType,\n                  description: LogsDedupDescription[dedupType],\n                }))}\n                value={dedupStrategy}\n                onChange={this.onChangeDedup}\n                className={styles.radioButtons}\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <div>\n            <InlineField label=\"Display results\" className={styles.horizontalInlineLabel} transparent>\n              <RadioButtonGroup\n                disabled={isFlipping}\n                options={[\n                  {\n                    label: 'Newest first',\n                    value: LogsSortOrder.Descending,\n                    description: 'Show results newest to oldest',\n                  },\n                  {\n                    label: 'Oldest first',\n                    value: LogsSortOrder.Ascending,\n                    description: 'Show results oldest to newest',\n                  },\n                ]}\n                value={logsSortOrder}\n                onChange={this.onChangeLogsSortOrder}\n                className={styles.radioButtons}\n              />\n            </InlineField>\n          </div>\n        </div>\n        <LogsMetaRow\n          logRows={logRows}\n          meta={logsMeta || []}\n          dedupStrategy={dedupStrategy}\n          dedupCount={dedupCount}\n          hasUnescapedContent={hasUnescapedContent}\n          forceEscape={forceEscape}\n          showDetectedFields={showDetectedFields}\n          onEscapeNewlines={this.onEscapeNewlines}\n          clearDetectedFields={this.clearDetectedFields}\n        />\n        <div className={styles.logsSection}>\n          <div className={styles.logRows} data-testid=\"logRows\">\n            <LogRows\n              logRows={logRows}\n              deduplicatedRows={dedupedRows}\n              dedupStrategy={dedupStrategy}\n              getRowContext={this.props.getRowContext}\n              onClickFilterLabel={onClickFilterLabel}\n              onClickFilterOutLabel={onClickFilterOutLabel}\n              showContextToggle={showContextToggle}\n              showLabels={showLabels}\n              showTime={showTime}\n              enableLogDetails={true}\n              forceEscape={forceEscape}\n              wrapLogMessage={wrapLogMessage}\n              prettifyLogMessage={prettifyLogMessage}\n              timeZone={timeZone}\n              getFieldLinks={getFieldLinks}\n              logsSortOrder={logsSortOrder}\n              showDetectedFields={showDetectedFields}\n              onClickShowDetectedField={this.showDetectedField}\n              onClickHideDetectedField={this.hideDetectedField}\n            />\n          </div>\n          <LogsNavigation\n            logsSortOrder={logsSortOrder}\n            visibleRange={navigationRange ?? absoluteRange}\n            absoluteRange={absoluteRange}\n            timeZone={timeZone}\n            onChangeTime={onChangeTime}\n            loading={loading}\n            queries={logsQueries ?? []}\n            scrollToTopLogs={this.scrollToTopLogs}\n            addResultsToCache={addResultsToCache}\n            clearCache={clearCache}\n          />\n        </div>\n        {!loading && !hasData && !scanning && (\n          <div className={styles.noData}>\n            No logs found.\n            <Button size=\"xs\" fill=\"text\" onClick={this.onClickScan}>\n              Scan for older logs\n            </Button>\n          </div>\n        )}\n        {scanning && (\n          <div className={styles.noData}>\n            <span>{scanText}</span>\n            <Button size=\"xs\" fill=\"text\" onClick={this.onClickStopScan}>\n              Stop scan\n            </Button>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport const Logs = withTheme2(UnthemedLogs);\n\nconst getStyles = (theme: GrafanaTheme2, wrapLogMessage: boolean) => {\n  return {\n    noData: css`\n      > * {\n        margin-left: 0.5em;\n      }\n    `,\n    logOptions: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: baseline;\n      flex-wrap: wrap;\n      background-color: ${theme.colors.background.primary};\n      padding: ${theme.spacing(1, 2)};\n      border-radius: ${theme.shape.borderRadius()};\n      margin: ${theme.spacing(2, 0, 1)};\n      border: 1px solid ${theme.colors.border.medium};\n    `,\n    headerButton: css`\n      margin: ${theme.spacing(0.5, 0, 0, 1)};\n    `,\n    horizontalInlineLabel: css`\n      > label {\n        margin-right: 0;\n      }\n    `,\n    horizontalInlineSwitch: css`\n      padding: 0 ${theme.spacing(1)} 0 0;\n    `,\n    radioButtons: css`\n      margin: 0;\n    `,\n    logsSection: css`\n      display: flex;\n      flex-direction: row;\n      justify-content: space-between;\n    `,\n    logRows: css`\n      overflow-x: ${wrapLogMessage ? 'unset' : 'scroll'};\n      overflow-y: visible;\n      width: 100%;\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}