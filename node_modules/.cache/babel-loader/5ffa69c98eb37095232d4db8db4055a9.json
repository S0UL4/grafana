{"ast":null,"code":"import { vectorToArray } from './vectorToArray';\n/** @public */\n\nexport class FunctionalVector {\n  // Implement \"iterator protocol\"\n  *iterator() {\n    for (let i = 0; i < this.length; i++) {\n      yield this.get(i);\n    }\n  } // Implement \"iterable protocol\"\n\n\n  [Symbol.iterator]() {\n    return this.iterator();\n  }\n\n  forEach(iterator) {\n    return vectorator(this).forEach(iterator);\n  }\n\n  map(transform) {\n    return vectorator(this).map(transform);\n  }\n\n  filter(predicate) {\n    return vectorator(this).filter(predicate);\n  }\n\n  toArray() {\n    return vectorToArray(this);\n  }\n\n  toJSON() {\n    return this.toArray();\n  }\n\n}\n/**\n * Use functional programming with your vector\n */\n\nexport function vectorator(vector) {\n  return {\n    *[Symbol.iterator]() {\n      for (let i = 0; i < vector.length; i++) {\n        yield vector.get(i);\n      }\n    },\n\n    forEach(iterator) {\n      for (let i = 0; i < vector.length; i++) {\n        iterator(vector.get(i));\n      }\n    },\n\n    map(transform) {\n      const result = [];\n\n      for (let i = 0; i < vector.length; i++) {\n        result.push(transform(vector.get(i), i));\n      }\n\n      return result;\n    },\n\n    /** Add a predicate where you return true if it should *keep* the value */\n    filter(predicate) {\n      const result = [];\n\n      for (const val of this) {\n        if (predicate(val)) {\n          result.push(val);\n        }\n      }\n\n      return result;\n    }\n\n  };\n}","map":{"version":3,"names":["vectorToArray","FunctionalVector","iterator","i","length","get","Symbol","forEach","vectorator","map","transform","filter","predicate","toArray","toJSON","vector","result","push","val"],"sources":["/home/soula/grafana/packages/grafana-data/src/vector/FunctionalVector.ts"],"sourcesContent":["import { Vector } from '../types';\n\nimport { vectorToArray } from './vectorToArray';\n\n/** @public */\nexport abstract class FunctionalVector<T = any> implements Vector<T>, Iterable<T> {\n  abstract get length(): number;\n\n  abstract get(index: number): T;\n\n  // Implement \"iterator protocol\"\n  *iterator() {\n    for (let i = 0; i < this.length; i++) {\n      yield this.get(i);\n    }\n  }\n\n  // Implement \"iterable protocol\"\n  [Symbol.iterator]() {\n    return this.iterator();\n  }\n\n  forEach(iterator: (row: T) => void) {\n    return vectorator(this).forEach(iterator);\n  }\n\n  map<V>(transform: (item: T, index: number) => V) {\n    return vectorator(this).map(transform);\n  }\n\n  filter(predicate: (item: T) => boolean): T[] {\n    return vectorator(this).filter(predicate);\n  }\n\n  toArray(): T[] {\n    return vectorToArray(this);\n  }\n\n  toJSON(): any {\n    return this.toArray();\n  }\n}\n\n/**\n * Use functional programming with your vector\n */\nexport function vectorator<T>(vector: Vector<T>) {\n  return {\n    *[Symbol.iterator]() {\n      for (let i = 0; i < vector.length; i++) {\n        yield vector.get(i);\n      }\n    },\n\n    forEach(iterator: (row: T) => void) {\n      for (let i = 0; i < vector.length; i++) {\n        iterator(vector.get(i));\n      }\n    },\n\n    map<V>(transform: (item: T, index: number) => V) {\n      const result: V[] = [];\n      for (let i = 0; i < vector.length; i++) {\n        result.push(transform(vector.get(i), i));\n      }\n      return result;\n    },\n\n    /** Add a predicate where you return true if it should *keep* the value */\n    filter(predicate: (item: T) => boolean): T[] {\n      const result: T[] = [];\n      for (const val of this) {\n        if (predicate(val)) {\n          result.push(val);\n        }\n      }\n      return result;\n    },\n  };\n}\n"],"mappings":"AAEA,SAASA,aAAT,QAA8B,iBAA9B;AAEA;;AACA,OAAO,MAAeC,gBAAf,CAA2E;EAKhF;EACS,CAARC,QAAQ,GAAG;IACV,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;MACpC,MAAM,KAAKE,GAAL,CAASF,CAAT,CAAN;IACD;EACF,CAV+E,CAYhF;;;EACgB,CAAfG,MAAM,CAACJ,QAAQ,IAAI;IAClB,OAAO,KAAKA,QAAL,EAAP;EACD;;EAEDK,OAAO,CAACL,QAAD,EAA6B;IAClC,OAAOM,UAAU,CAAC,IAAD,CAAV,CAAiBD,OAAjB,CAAyBL,QAAzB,CAAP;EACD;;EAEDO,GAAG,CAAIC,SAAJ,EAA8C;IAC/C,OAAOF,UAAU,CAAC,IAAD,CAAV,CAAiBC,GAAjB,CAAqBC,SAArB,CAAP;EACD;;EAEDC,MAAM,CAACC,SAAD,EAAuC;IAC3C,OAAOJ,UAAU,CAAC,IAAD,CAAV,CAAiBG,MAAjB,CAAwBC,SAAxB,CAAP;EACD;;EAEDC,OAAO,GAAQ;IACb,OAAOb,aAAa,CAAC,IAAD,CAApB;EACD;;EAEDc,MAAM,GAAQ;IACZ,OAAO,KAAKD,OAAL,EAAP;EACD;;AAnC+E;AAsClF;AACA;AACA;;AACA,OAAO,SAASL,UAAT,CAAuBO,MAAvB,EAA0C;EAC/C,OAAO;IACL,EAAET,MAAM,CAACJ,QAAT,IAAqB;MACnB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,MAAM,CAACX,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;QACtC,MAAMY,MAAM,CAACV,GAAP,CAAWF,CAAX,CAAN;MACD;IACF,CALI;;IAOLI,OAAO,CAACL,QAAD,EAA6B;MAClC,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,MAAM,CAACX,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;QACtCD,QAAQ,CAACa,MAAM,CAACV,GAAP,CAAWF,CAAX,CAAD,CAAR;MACD;IACF,CAXI;;IAaLM,GAAG,CAAIC,SAAJ,EAA8C;MAC/C,MAAMM,MAAW,GAAG,EAApB;;MACA,KAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,MAAM,CAACX,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;QACtCa,MAAM,CAACC,IAAP,CAAYP,SAAS,CAACK,MAAM,CAACV,GAAP,CAAWF,CAAX,CAAD,EAAgBA,CAAhB,CAArB;MACD;;MACD,OAAOa,MAAP;IACD,CAnBI;;IAqBL;IACAL,MAAM,CAACC,SAAD,EAAuC;MAC3C,MAAMI,MAAW,GAAG,EAApB;;MACA,KAAK,MAAME,GAAX,IAAkB,IAAlB,EAAwB;QACtB,IAAIN,SAAS,CAACM,GAAD,CAAb,EAAoB;UAClBF,MAAM,CAACC,IAAP,CAAYC,GAAZ;QACD;MACF;;MACD,OAAOF,MAAP;IACD;;EA9BI,CAAP;AAgCD"},"metadata":{},"sourceType":"module"}