{"ast":null,"code":"import React, { useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Label, Select } from '@grafana/ui';\nimport { SimulationSchemaForm } from './SimulationSchemaForm'; // Type         string      `json:\"type\"`\n// Name         string      `json:\"name\"`\n// Description  string      `json:\"description\"`\n// OnlyForward  bool        `json:\"forward\"`\n// ConfigFields *data.Frame `json:\"config\"`\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport const SimulationQueryEditor = ({\n  onChange,\n  query,\n  ds\n}) => {\n  var _query$sim, _simQuery$key, _info$value$options, _info$value, _current$details$conf, _current$details;\n\n  const simQuery = (_query$sim = query.sim) !== null && _query$sim !== void 0 ? _query$sim : {};\n  const simKey = (_simQuery$key = simQuery.key) !== null && _simQuery$key !== void 0 ? _simQuery$key : {}; // keep track of updated config state to pass down to form\n\n  const [cfgValue, setCfgValue] = useState({}); // This only changes once\n\n  const info = useAsync(async () => {\n    const v = await ds.getResource('sims');\n    return {\n      sims: v,\n      options: v.map(s => ({\n        label: s.name,\n        value: s.type,\n        description: s.description\n      }))\n    };\n  }, [ds]);\n  const current = useMemo(() => {\n    const type = simKey.type;\n\n    if (!type || !info.value) {\n      return {};\n    }\n\n    return {\n      details: info.value.sims.find(v => v.type === type),\n      option: info.value.options.find(v => v.value === type)\n    };\n  }, [info.value, simKey === null || simKey === void 0 ? void 0 : simKey.type]);\n  let config = useAsync(async () => {\n    var _await$ds$getResource;\n\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n\n    let config = (_await$ds$getResource = await ds.getResource('sim/' + path)) === null || _await$ds$getResource === void 0 ? void 0 : _await$ds$getResource.config;\n    setCfgValue(config.value);\n    return config;\n  }, [simKey.type, simKey.tick, simKey.uid]);\n\n  const onUpdateKey = key => {\n    onChange(Object.assign({}, query, {\n      sim: Object.assign({}, simQuery, {\n        key\n      })\n    }));\n  };\n\n  const onUIDChanged = e => {\n    const {\n      value\n    } = e.target;\n    onUpdateKey(Object.assign({}, simKey, {\n      uid: value !== null && value !== void 0 ? value : undefined\n    }));\n  };\n\n  const onTickChanged = e => {\n    const tick = e.currentTarget.valueAsNumber;\n    onUpdateKey(Object.assign({}, simKey, {\n      tick\n    }));\n  };\n\n  const onTypeChange = v => {\n    onUpdateKey(Object.assign({}, simKey, {\n      type: v.value\n    }));\n  };\n\n  const onToggleStream = () => {\n    onChange(Object.assign({}, query, {\n      sim: Object.assign({}, simQuery, {\n        stream: !simQuery.stream\n      })\n    }));\n  };\n\n  const onToggleLast = () => {\n    onChange(Object.assign({}, query, {\n      sim: Object.assign({}, simQuery, {\n        last: !simQuery.last\n      })\n    }));\n  };\n\n  const onSchemaFormChange = config => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n\n    ds.postResource('sim/' + path, config).then(res => {\n      setCfgValue(res.config);\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        labelWidth: 14,\n        label: \"Simulation\",\n        tooltip: \"\",\n        children: /*#__PURE__*/_jsx(Select, {\n          isLoading: info.loading,\n          options: (_info$value$options = (_info$value = info.value) === null || _info$value === void 0 ? void 0 : _info$value.options) !== null && _info$value$options !== void 0 ? _info$value$options : [],\n          value: current.option,\n          onChange: onTypeChange,\n          width: 32\n        })\n      })\n    }), /*#__PURE__*/_jsxs(InlineFieldRow, {\n      children: [/*#__PURE__*/_jsx(InlineField, {\n        labelWidth: 14,\n        label: \"Stream\",\n        tooltip: \"connect to the live channel\",\n        children: /*#__PURE__*/_jsx(InlineSwitch, {\n          value: Boolean(simQuery.stream),\n          onChange: onToggleStream\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Interval\",\n        tooltip: \"the rate a simulation will spit out events\",\n        children: /*#__PURE__*/_jsx(Input, {\n          width: 10,\n          type: \"number\",\n          value: simKey.tick,\n          onChange: onTickChanged,\n          min: 1 / 10,\n          max: 50,\n          suffix: \"hz\"\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"Last\",\n        tooltip: \"Only return the last value\",\n        children: /*#__PURE__*/_jsx(Label, {\n          children: /*#__PURE__*/_jsx(InlineSwitch, {\n            value: Boolean(simQuery.last),\n            onChange: onToggleLast\n          })\n        })\n      }), /*#__PURE__*/_jsx(InlineField, {\n        label: \"UID\",\n        tooltip: \"A UID will allow multiple simulations to run at the same time\",\n        children: /*#__PURE__*/_jsx(Input, {\n          type: \"text\",\n          placeholder: \"optional\",\n          value: simQuery.key.uid,\n          onChange: onUIDChanged\n        })\n      })]\n    }), /*#__PURE__*/_jsx(SimulationSchemaForm, {\n      onChange: onSchemaFormChange,\n      config: cfgValue !== null && cfgValue !== void 0 ? cfgValue : config.value,\n      schema: (_current$details$conf = (_current$details = current.details) === null || _current$details === void 0 ? void 0 : _current$details.config.schema) !== null && _current$details$conf !== void 0 ? _current$details$conf : {\n        fields: []\n      }\n    })]\n  });\n};","map":{"version":3,"names":["React","useMemo","useState","useAsync","InlineField","InlineFieldRow","InlineSwitch","Input","Label","Select","SimulationSchemaForm","SimulationQueryEditor","onChange","query","ds","simQuery","sim","simKey","key","cfgValue","setCfgValue","info","v","getResource","sims","options","map","s","label","name","value","type","description","current","details","find","option","config","path","tick","uid","onUpdateKey","onUIDChanged","e","target","undefined","onTickChanged","currentTarget","valueAsNumber","onTypeChange","onToggleStream","stream","onToggleLast","last","onSchemaFormChange","postResource","then","res","loading","Boolean","schema","fields"],"sources":["/home/soula/grafana/public/app/plugins/datasource/testdata/components/SimulationQueryEditor.tsx"],"sourcesContent":["import React, { FormEvent, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrameJSON, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Label, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { SimulationQuery } from '../types';\n\nimport { SimulationSchemaForm } from './SimulationSchemaForm';\n\n// Type         string      `json:\"type\"`\n// Name         string      `json:\"name\"`\n// Description  string      `json:\"description\"`\n// OnlyForward  bool        `json:\"forward\"`\n// ConfigFields *data.Frame `json:\"config\"`\n\ninterface SimInfo {\n  type: string;\n  name: string;\n  description: string;\n  forward: boolean;\n  config: DataFrameJSON;\n}\n\nexport const SimulationQueryEditor = ({ onChange, query, ds }: EditorProps) => {\n  const simQuery = query.sim ?? ({} as SimulationQuery);\n  const simKey = simQuery.key ?? ({} as typeof simQuery.key);\n  // keep track of updated config state to pass down to form\n  const [cfgValue, setCfgValue] = useState<Record<string, any>>({});\n\n  // This only changes once\n  const info = useAsync(async () => {\n    const v = (await ds.getResource('sims')) as SimInfo[];\n    return {\n      sims: v,\n      options: v.map((s) => ({ label: s.name, value: s.type, description: s.description })),\n    };\n  }, [ds]);\n\n  const current = useMemo(() => {\n    const type = simKey.type;\n    if (!type || !info.value) {\n      return {};\n    }\n    return {\n      details: info.value.sims.find((v) => v.type === type),\n      option: info.value.options.find((v) => v.value === type),\n    };\n  }, [info.value, simKey?.type]);\n\n  let config = useAsync(async () => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n    let config = (await ds.getResource('sim/' + path))?.config;\n    setCfgValue(config.value);\n    return config;\n  }, [simKey.type, simKey.tick, simKey.uid]);\n\n  const onUpdateKey = (key: typeof simQuery.key) => {\n    onChange({ ...query, sim: { ...simQuery, key } });\n  };\n\n  const onUIDChanged = (e: FormEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n    onUpdateKey({ ...simKey, uid: value ?? undefined });\n  };\n\n  const onTickChanged = (e: FormEvent<HTMLInputElement>) => {\n    const tick = e.currentTarget.valueAsNumber;\n    onUpdateKey({ ...simKey, tick });\n  };\n\n  const onTypeChange = (v: SelectableValue<string>) => {\n    onUpdateKey({ ...simKey, type: v.value! });\n  };\n\n  const onToggleStream = () => {\n    onChange({ ...query, sim: { ...simQuery, stream: !simQuery.stream } });\n  };\n\n  const onToggleLast = () => {\n    onChange({ ...query, sim: { ...simQuery, last: !simQuery.last } });\n  };\n\n  const onSchemaFormChange = (config: Record<string, any>) => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n    ds.postResource('sim/' + path, config).then((res) => {\n      setCfgValue(res.config);\n    });\n  };\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Simulation\" tooltip=\"\">\n          <Select\n            isLoading={info.loading}\n            options={info.value?.options ?? []}\n            value={current.option}\n            onChange={onTypeChange}\n            width={32}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Stream\" tooltip=\"connect to the live channel\">\n          <InlineSwitch value={Boolean(simQuery.stream)} onChange={onToggleStream} />\n        </InlineField>\n\n        <InlineField label=\"Interval\" tooltip=\"the rate a simulation will spit out events\">\n          <Input\n            width={10}\n            type=\"number\"\n            value={simKey.tick}\n            onChange={onTickChanged}\n            min={1 / 10}\n            max={50}\n            suffix=\"hz\"\n          />\n        </InlineField>\n\n        <InlineField label=\"Last\" tooltip=\"Only return the last value\">\n          <Label>\n            <InlineSwitch value={Boolean(simQuery.last)} onChange={onToggleLast} />\n          </Label>\n        </InlineField>\n        <InlineField label=\"UID\" tooltip=\"A UID will allow multiple simulations to run at the same time\">\n          <Input type=\"text\" placeholder=\"optional\" value={simQuery.key.uid} onChange={onUIDChanged} />\n        </InlineField>\n      </InlineFieldRow>\n      <SimulationSchemaForm\n        onChange={onSchemaFormChange}\n        config={cfgValue ?? config.value}\n        schema={current.details?.config.schema ?? { fields: [] }}\n      />\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}