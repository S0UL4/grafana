{"ast":null,"code":"import React from 'react';\nimport { Seg } from './Seg';\nimport { toSelectableValue } from './toSelectableValue';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DEFAULT_POLICY = 'default'; // we use the value \"default\" as a magic-value, it means\n// we use the default retention-policy.\n// unfortunately, IF the user has a retention-policy named \"default\",\n// and it is not the default-retention-policy in influxdb,\n// bad things will happen.\n// https://github.com/grafana/grafana/issues/4347 :-(\n// FIXME: we could maybe at least detect here that problem-is-happening,\n// and show an error message or something.\n// unfortunately, currently the ResponseParser does not return the\n// is-default info for the retention-policies, so that should change first.\n\nexport const FromSection = ({\n  policy,\n  measurement,\n  onChange,\n  getPolicyOptions,\n  getMeasurementOptions\n}) => {\n  const handlePolicyLoadOptions = async () => {\n    const allPolicies = await getPolicyOptions(); // if `default` does not exist in the list of policies, we add it\n\n    const allPoliciesWithDefault = allPolicies.some(p => p === 'default') ? allPolicies : [DEFAULT_POLICY, ...allPolicies];\n    return allPoliciesWithDefault.map(toSelectableValue);\n  };\n\n  const handleMeasurementLoadOptions = async filter => {\n    const allMeasurements = await getMeasurementOptions(filter);\n    return allMeasurements.map(toSelectableValue);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Seg, {\n      allowCustomValue: true,\n      value: policy !== null && policy !== void 0 ? policy : 'using default policy',\n      loadOptions: handlePolicyLoadOptions,\n      onChange: v => {\n        onChange(v.value, measurement);\n      }\n    }), /*#__PURE__*/_jsx(Seg, {\n      allowCustomValue: true,\n      value: measurement !== null && measurement !== void 0 ? measurement : 'select measurement',\n      loadOptions: handleMeasurementLoadOptions,\n      filterByLoadOptions: true,\n      onChange: v => {\n        onChange(policy, v.value);\n      }\n    })]\n  });\n};","map":{"version":3,"names":["React","Seg","toSelectableValue","DEFAULT_POLICY","FromSection","policy","measurement","onChange","getPolicyOptions","getMeasurementOptions","handlePolicyLoadOptions","allPolicies","allPoliciesWithDefault","some","p","map","handleMeasurementLoadOptions","filter","allMeasurements","v","value"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/components/VisualInfluxQLEditor/FromSection.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Seg } from './Seg';\nimport { toSelectableValue } from './toSelectableValue';\n\nconst DEFAULT_POLICY = 'default';\n\n// we use the value \"default\" as a magic-value, it means\n// we use the default retention-policy.\n// unfortunately, IF the user has a retention-policy named \"default\",\n// and it is not the default-retention-policy in influxdb,\n// bad things will happen.\n// https://github.com/grafana/grafana/issues/4347 :-(\n// FIXME: we could maybe at least detect here that problem-is-happening,\n// and show an error message or something.\n// unfortunately, currently the ResponseParser does not return the\n// is-default info for the retention-policies, so that should change first.\n\ntype Props = {\n  onChange: (policy: string | undefined, measurement: string | undefined) => void;\n  policy: string | undefined;\n  measurement: string | undefined;\n  getPolicyOptions: () => Promise<string[]>;\n  getMeasurementOptions: (filter: string) => Promise<string[]>;\n};\n\nexport const FromSection = ({\n  policy,\n  measurement,\n  onChange,\n  getPolicyOptions,\n  getMeasurementOptions,\n}: Props): JSX.Element => {\n  const handlePolicyLoadOptions = async () => {\n    const allPolicies = await getPolicyOptions();\n    // if `default` does not exist in the list of policies, we add it\n    const allPoliciesWithDefault = allPolicies.some((p) => p === 'default')\n      ? allPolicies\n      : [DEFAULT_POLICY, ...allPolicies];\n\n    return allPoliciesWithDefault.map(toSelectableValue);\n  };\n\n  const handleMeasurementLoadOptions = async (filter: string) => {\n    const allMeasurements = await getMeasurementOptions(filter);\n    return allMeasurements.map(toSelectableValue);\n  };\n\n  return (\n    <>\n      <Seg\n        allowCustomValue\n        value={policy ?? 'using default policy'}\n        loadOptions={handlePolicyLoadOptions}\n        onChange={(v) => {\n          onChange(v.value, measurement);\n        }}\n      />\n      <Seg\n        allowCustomValue\n        value={measurement ?? 'select measurement'}\n        loadOptions={handleMeasurementLoadOptions}\n        filterByLoadOptions\n        onChange={(v) => {\n          onChange(policy, v.value);\n        }}\n      />\n    </>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;;;AAEA,MAAMC,cAAc,GAAG,SAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA,OAAO,MAAMC,WAAW,GAAG,CAAC;EAC1BC,MAD0B;EAE1BC,WAF0B;EAG1BC,QAH0B;EAI1BC,gBAJ0B;EAK1BC;AAL0B,CAAD,KAMD;EACxB,MAAMC,uBAAuB,GAAG,YAAY;IAC1C,MAAMC,WAAW,GAAG,MAAMH,gBAAgB,EAA1C,CAD0C,CAE1C;;IACA,MAAMI,sBAAsB,GAAGD,WAAW,CAACE,IAAZ,CAAkBC,CAAD,IAAOA,CAAC,KAAK,SAA9B,IAC3BH,WAD2B,GAE3B,CAACR,cAAD,EAAiB,GAAGQ,WAApB,CAFJ;IAIA,OAAOC,sBAAsB,CAACG,GAAvB,CAA2Bb,iBAA3B,CAAP;EACD,CARD;;EAUA,MAAMc,4BAA4B,GAAG,MAAOC,MAAP,IAA0B;IAC7D,MAAMC,eAAe,GAAG,MAAMT,qBAAqB,CAACQ,MAAD,CAAnD;IACA,OAAOC,eAAe,CAACH,GAAhB,CAAoBb,iBAApB,CAAP;EACD,CAHD;;EAKA,oBACE;IAAA,wBACE,KAAC,GAAD;MACE,gBAAgB,MADlB;MAEE,KAAK,EAAEG,MAAF,aAAEA,MAAF,cAAEA,MAAF,GAAY,sBAFnB;MAGE,WAAW,EAAEK,uBAHf;MAIE,QAAQ,EAAGS,CAAD,IAAO;QACfZ,QAAQ,CAACY,CAAC,CAACC,KAAH,EAAUd,WAAV,CAAR;MACD;IANH,EADF,eASE,KAAC,GAAD;MACE,gBAAgB,MADlB;MAEE,KAAK,EAAEA,WAAF,aAAEA,WAAF,cAAEA,WAAF,GAAiB,oBAFxB;MAGE,WAAW,EAAEU,4BAHf;MAIE,mBAAmB,MAJrB;MAKE,QAAQ,EAAGG,CAAD,IAAO;QACfZ,QAAQ,CAACF,MAAD,EAASc,CAAC,CAACC,KAAX,CAAR;MACD;IAPH,EATF;EAAA,EADF;AAqBD,CA3CM"},"metadata":{},"sourceType":"module"}