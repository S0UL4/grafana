{"ast":null,"code":"import { reduce } from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nfunction renderTagCondition(tag, index) {\n  // FIXME: merge this function with influx_query_model/renderTagCondition\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  } // quote value unless regex or number, or if empty-string\n\n\n  if (value === '' || operator !== '=~' && operator !== '!~' && isNaN(+value)) {\n    value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n  }\n\n  return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n}\n\nexport class InfluxQueryBuilder {\n  constructor(target, database) {\n    this.target = target;\n    this.database = database;\n  }\n\n  buildExploreQuery(type, withKey, withMeasurementFilter) {\n    let query = '';\n    let measurement;\n    let policy;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SHOW TAG KEYS';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'TAG_VALUES') {\n      query = 'SHOW TAG VALUES';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'MEASUREMENTS') {\n      query = 'SHOW MEASUREMENTS';\n\n      if (withMeasurementFilter) {\n        // we do a case-insensitive regex-based lookup\n        query += ' WITH MEASUREMENT =~ /(?i)' + kbn.regexEscape(withMeasurementFilter) + '/';\n      }\n    } else if (type === 'FIELDS') {\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n\n      if (!measurement.match('^/.*/')) {\n        measurement = '\"' + measurement + '\"';\n\n        if (policy && policy !== 'default') {\n          policy = '\"' + policy + '\"';\n          measurement = policy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    } else if (type === 'RETENTION POLICIES') {\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\n      return query;\n    }\n\n    if (measurement) {\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n        measurement = '\"' + measurement + '\"';\n      }\n\n      if (policy && policy !== 'default') {\n        policy = '\"' + policy + '\"';\n        measurement = policy + '.' + measurement;\n      }\n\n      query += ' FROM ' + measurement;\n    }\n\n    if (withKey) {\n      query += ' WITH KEY = \"' + withKey + '\"';\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      const whereConditions = reduce(this.target.tags, (memo, tag) => {\n        // do not add a condition for the key we want to explore for\n        if (tag.key === withKey) {\n          return memo;\n        } // value operators not supported in these types of queries\n\n\n        if (tag.operator === '>' || tag.operator === '<') {\n          return memo;\n        }\n\n        memo.push(renderTagCondition(tag, memo.length));\n        return memo;\n      }, []);\n\n      if (whereConditions.length > 0) {\n        query += ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n\n    if (type === 'MEASUREMENTS') {\n      query += ' LIMIT 100'; //Solve issue #2524 by limiting the number of measurements returned\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\n    }\n\n    return query;\n  }\n\n}","map":{"version":3,"names":["reduce","kbn","renderTagCondition","tag","index","str","operator","value","condition","test","isNaN","replace","key","InfluxQueryBuilder","constructor","target","database","buildExploreQuery","type","withKey","withMeasurementFilter","query","measurement","policy","regexEscape","match","tags","length","whereConditions","memo","push","join"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/query_builder.ts"],"sourcesContent":["import { reduce } from 'lodash';\n\nimport kbn from 'app/core/utils/kbn';\n\nfunction renderTagCondition(tag: { operator: any; value: string; condition: any; key: string }, index: number) {\n  // FIXME: merge this function with influx_query_model/renderTagCondition\n  let str = '';\n  let operator = tag.operator;\n  let value = tag.value;\n  if (index > 0) {\n    str = (tag.condition || 'AND') + ' ';\n  }\n\n  if (!operator) {\n    if (/^\\/.*\\/$/.test(tag.value)) {\n      operator = '=~';\n    } else {\n      operator = '=';\n    }\n  }\n\n  // quote value unless regex or number, or if empty-string\n  if (value === '' || (operator !== '=~' && operator !== '!~' && isNaN(+value))) {\n    value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\').replace(/\\'/g, \"\\\\'\") + \"'\";\n  }\n\n  return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\n}\n\nexport class InfluxQueryBuilder {\n  constructor(private target: { measurement: any; tags: any; policy?: any }, private database?: string) {}\n\n  buildExploreQuery(type: string, withKey?: string, withMeasurementFilter?: string): string {\n    let query = '';\n    let measurement;\n    let policy;\n\n    if (type === 'TAG_KEYS') {\n      query = 'SHOW TAG KEYS';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'TAG_VALUES') {\n      query = 'SHOW TAG VALUES';\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n    } else if (type === 'MEASUREMENTS') {\n      query = 'SHOW MEASUREMENTS';\n      if (withMeasurementFilter) {\n        // we do a case-insensitive regex-based lookup\n        query += ' WITH MEASUREMENT =~ /(?i)' + kbn.regexEscape(withMeasurementFilter) + '/';\n      }\n    } else if (type === 'FIELDS') {\n      measurement = this.target.measurement;\n      policy = this.target.policy;\n\n      if (!measurement.match('^/.*/')) {\n        measurement = '\"' + measurement + '\"';\n\n        if (policy && policy !== 'default') {\n          policy = '\"' + policy + '\"';\n          measurement = policy + '.' + measurement;\n        }\n      }\n\n      return 'SHOW FIELD KEYS FROM ' + measurement;\n    } else if (type === 'RETENTION POLICIES') {\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\n      return query;\n    }\n\n    if (measurement) {\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\n        measurement = '\"' + measurement + '\"';\n      }\n\n      if (policy && policy !== 'default') {\n        policy = '\"' + policy + '\"';\n        measurement = policy + '.' + measurement;\n      }\n\n      query += ' FROM ' + measurement;\n    }\n\n    if (withKey) {\n      query += ' WITH KEY = \"' + withKey + '\"';\n    }\n\n    if (this.target.tags && this.target.tags.length > 0) {\n      const whereConditions = reduce(\n        this.target.tags,\n        (memo, tag) => {\n          // do not add a condition for the key we want to explore for\n          if (tag.key === withKey) {\n            return memo;\n          }\n\n          // value operators not supported in these types of queries\n          if (tag.operator === '>' || tag.operator === '<') {\n            return memo;\n          }\n\n          memo.push(renderTagCondition(tag, memo.length));\n          return memo;\n        },\n        [] as string[]\n      );\n\n      if (whereConditions.length > 0) {\n        query += ' WHERE ' + whereConditions.join(' ');\n      }\n    }\n\n    if (type === 'MEASUREMENTS') {\n      query += ' LIMIT 100';\n      //Solve issue #2524 by limiting the number of measurements returned\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\n    }\n\n    return query;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}