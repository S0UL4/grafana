{"ast":null,"code":"import { createSlice, createEntityAdapter } from '@reduxjs/toolkit';\nimport { STATE_PREFIX } from '../constants';\nimport { PluginListDisplayMode, RequestStatus } from '../types';\nimport { fetchAll, fetchDetails, install, uninstall, loadPluginDashboards, panelPluginLoaded } from './actions';\nexport const pluginsAdapter = createEntityAdapter();\n\nconst isPendingRequest = action => new RegExp(`${STATE_PREFIX}\\/(.*)\\/pending`).test(action.type);\n\nconst isFulfilledRequest = action => new RegExp(`${STATE_PREFIX}\\/(.*)\\/fulfilled`).test(action.type);\n\nconst isRejectedRequest = action => new RegExp(`${STATE_PREFIX}\\/(.*)\\/rejected`).test(action.type); // Extract the trailing '/pending', '/rejected', or '/fulfilled'\n\n\nconst getOriginalActionType = type => {\n  const separator = type.lastIndexOf('/');\n  return type.substring(0, separator);\n};\n\nconst slice = createSlice({\n  name: 'plugins',\n  initialState: {\n    items: pluginsAdapter.getInitialState(),\n    requests: {},\n    settings: {\n      displayMode: PluginListDisplayMode.Grid\n    },\n    // Backwards compatibility\n    // (we need to have the following fields in the store as well to be backwards compatible with other parts of Grafana)\n    // TODO<remove once the \"plugin_admin_enabled\" feature flag is removed>\n    plugins: [],\n    errors: [],\n    searchQuery: '',\n    hasFetched: false,\n    dashboards: [],\n    isLoadingPluginDashboards: false,\n    panels: {}\n  },\n  reducers: {\n    setDisplayMode(state, action) {\n      state.settings.displayMode = action.payload;\n    }\n\n  },\n  extraReducers: builder => builder // Fetch All\n  .addCase(fetchAll.fulfilled, (state, action) => {\n    pluginsAdapter.upsertMany(state.items, action.payload);\n  }) // Fetch Details\n  .addCase(fetchDetails.fulfilled, (state, action) => {\n    pluginsAdapter.updateOne(state.items, action.payload);\n  }) // Install\n  .addCase(install.fulfilled, (state, action) => {\n    pluginsAdapter.updateOne(state.items, action.payload);\n  }) // Uninstall\n  .addCase(uninstall.fulfilled, (state, action) => {\n    pluginsAdapter.updateOne(state.items, action.payload);\n  }) // Load a panel plugin (backward-compatibility)\n  // TODO<remove once the \"plugin_admin_enabled\" feature flag is removed>\n  .addCase(panelPluginLoaded, (state, action) => {\n    state.panels[action.payload.meta.id] = action.payload;\n  }) // Start loading panel dashboards (backward-compatibility)\n  // TODO<remove once the \"plugin_admin_enabled\" feature flag is removed>\n  .addCase(loadPluginDashboards.pending, (state, action) => {\n    state.isLoadingPluginDashboards = true;\n    state.dashboards = [];\n  }) // Load panel dashboards (backward-compatibility)\n  // TODO<remove once the \"plugin_admin_enabled\" feature flag is removed>\n  .addCase(loadPluginDashboards.fulfilled, (state, action) => {\n    state.isLoadingPluginDashboards = false;\n    state.dashboards = action.payload;\n  }).addMatcher(isPendingRequest, (state, action) => {\n    state.requests[getOriginalActionType(action.type)] = {\n      status: RequestStatus.Pending\n    };\n  }).addMatcher(isFulfilledRequest, (state, action) => {\n    state.requests[getOriginalActionType(action.type)] = {\n      status: RequestStatus.Fulfilled\n    };\n  }).addMatcher(isRejectedRequest, (state, action) => {\n    state.requests[getOriginalActionType(action.type)] = {\n      status: RequestStatus.Rejected,\n      error: action.payload\n    };\n  })\n});\nexport const {\n  setDisplayMode\n} = slice.actions;\nexport const reducer = slice.reducer;","map":{"version":3,"names":["createSlice","createEntityAdapter","STATE_PREFIX","PluginListDisplayMode","RequestStatus","fetchAll","fetchDetails","install","uninstall","loadPluginDashboards","panelPluginLoaded","pluginsAdapter","isPendingRequest","action","RegExp","test","type","isFulfilledRequest","isRejectedRequest","getOriginalActionType","separator","lastIndexOf","substring","slice","name","initialState","items","getInitialState","requests","settings","displayMode","Grid","plugins","errors","searchQuery","hasFetched","dashboards","isLoadingPluginDashboards","panels","reducers","setDisplayMode","state","payload","extraReducers","builder","addCase","fulfilled","upsertMany","updateOne","meta","id","pending","addMatcher","status","Pending","Fulfilled","Rejected","error","actions","reducer"],"sources":["/home/soula/grafana/public/app/features/plugins/admin/state/reducer.ts"],"sourcesContent":["import { createSlice, createEntityAdapter, Reducer, AnyAction, PayloadAction } from '@reduxjs/toolkit';\n\nimport { PanelPlugin } from '@grafana/data';\n\nimport { STATE_PREFIX } from '../constants';\nimport { CatalogPlugin, PluginListDisplayMode, ReducerState, RequestStatus } from '../types';\n\nimport { fetchAll, fetchDetails, install, uninstall, loadPluginDashboards, panelPluginLoaded } from './actions';\n\nexport const pluginsAdapter = createEntityAdapter<CatalogPlugin>();\n\nconst isPendingRequest = (action: AnyAction) => new RegExp(`${STATE_PREFIX}\\/(.*)\\/pending`).test(action.type);\n\nconst isFulfilledRequest = (action: AnyAction) => new RegExp(`${STATE_PREFIX}\\/(.*)\\/fulfilled`).test(action.type);\n\nconst isRejectedRequest = (action: AnyAction) => new RegExp(`${STATE_PREFIX}\\/(.*)\\/rejected`).test(action.type);\n\n// Extract the trailing '/pending', '/rejected', or '/fulfilled'\nconst getOriginalActionType = (type: string) => {\n  const separator = type.lastIndexOf('/');\n\n  return type.substring(0, separator);\n};\n\nconst slice = createSlice({\n  name: 'plugins',\n  initialState: {\n    items: pluginsAdapter.getInitialState(),\n    requests: {},\n    settings: {\n      displayMode: PluginListDisplayMode.Grid,\n    },\n    // Backwards compatibility\n    // (we need to have the following fields in the store as well to be backwards compatible with other parts of Grafana)\n    // TODO<remove once the \"plugin_admin_enabled\" feature flag is removed>\n    plugins: [],\n    errors: [],\n    searchQuery: '',\n    hasFetched: false,\n    dashboards: [],\n    isLoadingPluginDashboards: false,\n    panels: {},\n  } as ReducerState,\n  reducers: {\n    setDisplayMode(state, action: PayloadAction<PluginListDisplayMode>) {\n      state.settings.displayMode = action.payload;\n    },\n  },\n  extraReducers: (builder) =>\n    builder\n      // Fetch All\n      .addCase(fetchAll.fulfilled, (state, action) => {\n        pluginsAdapter.upsertMany(state.items, action.payload);\n      })\n      // Fetch Details\n      .addCase(fetchDetails.fulfilled, (state, action) => {\n        pluginsAdapter.updateOne(state.items, action.payload);\n      })\n      // Install\n      .addCase(install.fulfilled, (state, action) => {\n        pluginsAdapter.updateOne(state.items, action.payload);\n      })\n      // Uninstall\n      .addCase(uninstall.fulfilled, (state, action) => {\n        pluginsAdapter.updateOne(state.items, action.payload);\n      })\n      // Load a panel plugin (backward-compatibility)\n      // TODO<remove once the \"plugin_admin_enabled\" feature flag is removed>\n      .addCase(panelPluginLoaded, (state, action: PayloadAction<PanelPlugin>) => {\n        state.panels[action.payload.meta.id] = action.payload;\n      })\n      // Start loading panel dashboards (backward-compatibility)\n      // TODO<remove once the \"plugin_admin_enabled\" feature flag is removed>\n      .addCase(loadPluginDashboards.pending, (state, action) => {\n        state.isLoadingPluginDashboards = true;\n        state.dashboards = [];\n      })\n      // Load panel dashboards (backward-compatibility)\n      // TODO<remove once the \"plugin_admin_enabled\" feature flag is removed>\n      .addCase(loadPluginDashboards.fulfilled, (state, action) => {\n        state.isLoadingPluginDashboards = false;\n        state.dashboards = action.payload;\n      })\n      .addMatcher(isPendingRequest, (state, action) => {\n        state.requests[getOriginalActionType(action.type)] = {\n          status: RequestStatus.Pending,\n        };\n      })\n      .addMatcher(isFulfilledRequest, (state, action) => {\n        state.requests[getOriginalActionType(action.type)] = {\n          status: RequestStatus.Fulfilled,\n        };\n      })\n      .addMatcher(isRejectedRequest, (state, action) => {\n        state.requests[getOriginalActionType(action.type)] = {\n          status: RequestStatus.Rejected,\n          error: action.payload,\n        };\n      }),\n});\n\nexport const { setDisplayMode } = slice.actions;\nexport const reducer: Reducer<ReducerState, AnyAction> = slice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,mBAAtB,QAAoF,kBAApF;AAIA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAAwBC,qBAAxB,EAA6DC,aAA7D,QAAkF,UAAlF;AAEA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,OAAjC,EAA0CC,SAA1C,EAAqDC,oBAArD,EAA2EC,iBAA3E,QAAoG,WAApG;AAEA,OAAO,MAAMC,cAAc,GAAGV,mBAAmB,EAA1C;;AAEP,MAAMW,gBAAgB,GAAIC,MAAD,IAAuB,IAAIC,MAAJ,CAAY,GAAEZ,YAAa,iBAA3B,EAA6Ca,IAA7C,CAAkDF,MAAM,CAACG,IAAzD,CAAhD;;AAEA,MAAMC,kBAAkB,GAAIJ,MAAD,IAAuB,IAAIC,MAAJ,CAAY,GAAEZ,YAAa,mBAA3B,EAA+Ca,IAA/C,CAAoDF,MAAM,CAACG,IAA3D,CAAlD;;AAEA,MAAME,iBAAiB,GAAIL,MAAD,IAAuB,IAAIC,MAAJ,CAAY,GAAEZ,YAAa,kBAA3B,EAA8Ca,IAA9C,CAAmDF,MAAM,CAACG,IAA1D,CAAjD,C,CAEA;;;AACA,MAAMG,qBAAqB,GAAIH,IAAD,IAAkB;EAC9C,MAAMI,SAAS,GAAGJ,IAAI,CAACK,WAAL,CAAiB,GAAjB,CAAlB;EAEA,OAAOL,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBF,SAAlB,CAAP;AACD,CAJD;;AAMA,MAAMG,KAAK,GAAGvB,WAAW,CAAC;EACxBwB,IAAI,EAAE,SADkB;EAExBC,YAAY,EAAE;IACZC,KAAK,EAAEf,cAAc,CAACgB,eAAf,EADK;IAEZC,QAAQ,EAAE,EAFE;IAGZC,QAAQ,EAAE;MACRC,WAAW,EAAE3B,qBAAqB,CAAC4B;IAD3B,CAHE;IAMZ;IACA;IACA;IACAC,OAAO,EAAE,EATG;IAUZC,MAAM,EAAE,EAVI;IAWZC,WAAW,EAAE,EAXD;IAYZC,UAAU,EAAE,KAZA;IAaZC,UAAU,EAAE,EAbA;IAcZC,yBAAyB,EAAE,KAdf;IAeZC,MAAM,EAAE;EAfI,CAFU;EAmBxBC,QAAQ,EAAE;IACRC,cAAc,CAACC,KAAD,EAAQ5B,MAAR,EAAsD;MAClE4B,KAAK,CAACZ,QAAN,CAAeC,WAAf,GAA6BjB,MAAM,CAAC6B,OAApC;IACD;;EAHO,CAnBc;EAwBxBC,aAAa,EAAGC,OAAD,IACbA,OAAO,CACL;EADK,CAEJC,OAFH,CAEWxC,QAAQ,CAACyC,SAFpB,EAE+B,CAACL,KAAD,EAAQ5B,MAAR,KAAmB;IAC9CF,cAAc,CAACoC,UAAf,CAA0BN,KAAK,CAACf,KAAhC,EAAuCb,MAAM,CAAC6B,OAA9C;EACD,CAJH,EAKE;EALF,CAMGG,OANH,CAMWvC,YAAY,CAACwC,SANxB,EAMmC,CAACL,KAAD,EAAQ5B,MAAR,KAAmB;IAClDF,cAAc,CAACqC,SAAf,CAAyBP,KAAK,CAACf,KAA/B,EAAsCb,MAAM,CAAC6B,OAA7C;EACD,CARH,EASE;EATF,CAUGG,OAVH,CAUWtC,OAAO,CAACuC,SAVnB,EAU8B,CAACL,KAAD,EAAQ5B,MAAR,KAAmB;IAC7CF,cAAc,CAACqC,SAAf,CAAyBP,KAAK,CAACf,KAA/B,EAAsCb,MAAM,CAAC6B,OAA7C;EACD,CAZH,EAaE;EAbF,CAcGG,OAdH,CAcWrC,SAAS,CAACsC,SAdrB,EAcgC,CAACL,KAAD,EAAQ5B,MAAR,KAAmB;IAC/CF,cAAc,CAACqC,SAAf,CAAyBP,KAAK,CAACf,KAA/B,EAAsCb,MAAM,CAAC6B,OAA7C;EACD,CAhBH,EAiBE;EACA;EAlBF,CAmBGG,OAnBH,CAmBWnC,iBAnBX,EAmB8B,CAAC+B,KAAD,EAAQ5B,MAAR,KAA+C;IACzE4B,KAAK,CAACH,MAAN,CAAazB,MAAM,CAAC6B,OAAP,CAAeO,IAAf,CAAoBC,EAAjC,IAAuCrC,MAAM,CAAC6B,OAA9C;EACD,CArBH,EAsBE;EACA;EAvBF,CAwBGG,OAxBH,CAwBWpC,oBAAoB,CAAC0C,OAxBhC,EAwByC,CAACV,KAAD,EAAQ5B,MAAR,KAAmB;IACxD4B,KAAK,CAACJ,yBAAN,GAAkC,IAAlC;IACAI,KAAK,CAACL,UAAN,GAAmB,EAAnB;EACD,CA3BH,EA4BE;EACA;EA7BF,CA8BGS,OA9BH,CA8BWpC,oBAAoB,CAACqC,SA9BhC,EA8B2C,CAACL,KAAD,EAAQ5B,MAAR,KAAmB;IAC1D4B,KAAK,CAACJ,yBAAN,GAAkC,KAAlC;IACAI,KAAK,CAACL,UAAN,GAAmBvB,MAAM,CAAC6B,OAA1B;EACD,CAjCH,EAkCGU,UAlCH,CAkCcxC,gBAlCd,EAkCgC,CAAC6B,KAAD,EAAQ5B,MAAR,KAAmB;IAC/C4B,KAAK,CAACb,QAAN,CAAeT,qBAAqB,CAACN,MAAM,CAACG,IAAR,CAApC,IAAqD;MACnDqC,MAAM,EAAEjD,aAAa,CAACkD;IAD6B,CAArD;EAGD,CAtCH,EAuCGF,UAvCH,CAuCcnC,kBAvCd,EAuCkC,CAACwB,KAAD,EAAQ5B,MAAR,KAAmB;IACjD4B,KAAK,CAACb,QAAN,CAAeT,qBAAqB,CAACN,MAAM,CAACG,IAAR,CAApC,IAAqD;MACnDqC,MAAM,EAAEjD,aAAa,CAACmD;IAD6B,CAArD;EAGD,CA3CH,EA4CGH,UA5CH,CA4CclC,iBA5Cd,EA4CiC,CAACuB,KAAD,EAAQ5B,MAAR,KAAmB;IAChD4B,KAAK,CAACb,QAAN,CAAeT,qBAAqB,CAACN,MAAM,CAACG,IAAR,CAApC,IAAqD;MACnDqC,MAAM,EAAEjD,aAAa,CAACoD,QAD6B;MAEnDC,KAAK,EAAE5C,MAAM,CAAC6B;IAFqC,CAArD;EAID,CAjDH;AAzBsB,CAAD,CAAzB;AA6EA,OAAO,MAAM;EAAEF;AAAF,IAAqBjB,KAAK,CAACmC,OAAjC;AACP,OAAO,MAAMC,OAAyC,GAAGpC,KAAK,CAACoC,OAAxD"},"metadata":{},"sourceType":"module"}