{"ast":null,"code":"import React from 'react';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\nimport { ReducerMode, reducerMode, reducerTypes } from '../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const Reduce = ({\n  labelWidth,\n  onChange,\n  refIds,\n  query\n}) => {\n  var _query$settings$mode, _query$settings3;\n\n  const reducer = reducerTypes.find(o => o.value === query.reducer);\n\n  const onRefIdChange = value => {\n    onChange(Object.assign({}, query, {\n      expression: value.value\n    }));\n  };\n\n  const onSelectReducer = value => {\n    onChange(Object.assign({}, query, {\n      reducer: value.value\n    }));\n  };\n\n  const onSettingsChanged = settings => {\n    onChange(Object.assign({}, query, {\n      settings: settings\n    }));\n  };\n\n  const onModeChanged = value => {\n    var _query$settings;\n\n    let newSettings;\n\n    switch (value.value) {\n      case ReducerMode.ReplaceNonNumbers:\n        let replaceWithNumber = 0;\n\n        if (((_query$settings = query.settings) === null || _query$settings === void 0 ? void 0 : _query$settings.mode) === ReducerMode.ReplaceNonNumbers) {\n          var _query$settings$repla, _query$settings2;\n\n          replaceWithNumber = (_query$settings$repla = (_query$settings2 = query.settings) === null || _query$settings2 === void 0 ? void 0 : _query$settings2.replaceWithValue) !== null && _query$settings$repla !== void 0 ? _query$settings$repla : 0;\n        }\n\n        newSettings = {\n          mode: ReducerMode.ReplaceNonNumbers,\n          replaceWithValue: replaceWithNumber\n        };\n        break;\n\n      default:\n        newSettings = {\n          mode: value.value\n        };\n    }\n\n    onSettingsChanged(newSettings);\n  };\n\n  const onReplaceWithChanged = e => {\n    const value = e.currentTarget.valueAsNumber;\n    onSettingsChanged({\n      mode: ReducerMode.ReplaceNonNumbers,\n      replaceWithValue: value !== null && value !== void 0 ? value : 0\n    });\n  };\n\n  const mode = (_query$settings$mode = (_query$settings3 = query.settings) === null || _query$settings3 === void 0 ? void 0 : _query$settings3.mode) !== null && _query$settings$mode !== void 0 ? _query$settings$mode : ReducerMode.Strict;\n\n  const replaceWithNumber = () => {\n    var _query$settings$repla2, _query$settings4;\n\n    if (mode !== ReducerMode.ReplaceNonNumbers) {\n      return;\n    }\n\n    return /*#__PURE__*/_jsx(InlineField, {\n      label: \"Replace With\",\n      labelWidth: labelWidth,\n      children: /*#__PURE__*/_jsx(Input, {\n        type: \"number\",\n        width: 10,\n        onChange: onReplaceWithChanged,\n        value: (_query$settings$repla2 = (_query$settings4 = query.settings) === null || _query$settings4 === void 0 ? void 0 : _query$settings4.replaceWithValue) !== null && _query$settings$repla2 !== void 0 ? _query$settings$repla2 : 0\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxs(InlineFieldRow, {\n    children: [/*#__PURE__*/_jsx(InlineField, {\n      label: \"Function\",\n      labelWidth: labelWidth,\n      children: /*#__PURE__*/_jsx(Select, {\n        options: reducerTypes,\n        value: reducer,\n        onChange: onSelectReducer,\n        width: 25\n      })\n    }), /*#__PURE__*/_jsx(InlineField, {\n      label: \"Input\",\n      labelWidth: labelWidth,\n      children: /*#__PURE__*/_jsx(Select, {\n        onChange: onRefIdChange,\n        options: refIds,\n        value: query.expression,\n        width: 20\n      })\n    }), /*#__PURE__*/_jsx(InlineField, {\n      label: \"Mode\",\n      labelWidth: labelWidth,\n      children: /*#__PURE__*/_jsx(Select, {\n        onChange: onModeChanged,\n        options: reducerMode,\n        value: mode,\n        width: 25\n      })\n    }), replaceWithNumber()]\n  });\n};","map":{"version":3,"names":["React","InlineField","InlineFieldRow","Input","Select","ReducerMode","reducerMode","reducerTypes","Reduce","labelWidth","onChange","refIds","query","reducer","find","o","value","onRefIdChange","expression","onSelectReducer","onSettingsChanged","settings","onModeChanged","newSettings","ReplaceNonNumbers","replaceWithNumber","mode","replaceWithValue","onReplaceWithChanged","e","currentTarget","valueAsNumber","Strict"],"sources":["/home/soula/grafana/public/app/features/expressions/components/Reduce.tsx"],"sourcesContent":["import React, { FC } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\n\nimport { ExpressionQuery, ExpressionQuerySettings, ReducerMode, reducerMode, reducerTypes } from '../types';\n\ninterface Props {\n  labelWidth: number;\n  refIds: Array<SelectableValue<string>>;\n  query: ExpressionQuery;\n  onChange: (query: ExpressionQuery) => void;\n}\n\nexport const Reduce: FC<Props> = ({ labelWidth, onChange, refIds, query }) => {\n  const reducer = reducerTypes.find((o) => o.value === query.reducer);\n\n  const onRefIdChange = (value: SelectableValue<string>) => {\n    onChange({ ...query, expression: value.value });\n  };\n\n  const onSelectReducer = (value: SelectableValue<string>) => {\n    onChange({ ...query, reducer: value.value });\n  };\n\n  const onSettingsChanged = (settings: ExpressionQuerySettings) => {\n    onChange({ ...query, settings: settings });\n  };\n\n  const onModeChanged = (value: SelectableValue<ReducerMode>) => {\n    let newSettings: ExpressionQuerySettings;\n    switch (value.value) {\n      case ReducerMode.ReplaceNonNumbers:\n        let replaceWithNumber = 0;\n        if (query.settings?.mode === ReducerMode.ReplaceNonNumbers) {\n          replaceWithNumber = query.settings?.replaceWithValue ?? 0;\n        }\n        newSettings = {\n          mode: ReducerMode.ReplaceNonNumbers,\n          replaceWithValue: replaceWithNumber,\n        };\n        break;\n      default:\n        newSettings = {\n          mode: value.value,\n        };\n    }\n    onSettingsChanged(newSettings);\n  };\n\n  const onReplaceWithChanged = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.valueAsNumber;\n    onSettingsChanged({ mode: ReducerMode.ReplaceNonNumbers, replaceWithValue: value ?? 0 });\n  };\n\n  const mode = query.settings?.mode ?? ReducerMode.Strict;\n\n  const replaceWithNumber = () => {\n    if (mode !== ReducerMode.ReplaceNonNumbers) {\n      return;\n    }\n    return (\n      <InlineField label=\"Replace With\" labelWidth={labelWidth}>\n        <Input type=\"number\" width={10} onChange={onReplaceWithChanged} value={query.settings?.replaceWithValue ?? 0} />\n      </InlineField>\n    );\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Function\" labelWidth={labelWidth}>\n        <Select options={reducerTypes} value={reducer} onChange={onSelectReducer} width={25} />\n      </InlineField>\n      <InlineField label=\"Input\" labelWidth={labelWidth}>\n        <Select onChange={onRefIdChange} options={refIds} value={query.expression} width={20} />\n      </InlineField>\n      <InlineField label=\"Mode\" labelWidth={labelWidth}>\n        <Select onChange={onModeChanged} options={reducerMode} value={mode} width={25} />\n      </InlineField>\n      {replaceWithNumber()}\n    </InlineFieldRow>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}