{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/types/trace.ts"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * All timestamps are in microseconds\n */\n\n// TODO: Everett Tech Debt: Fix KeyValuePair types\nexport type TraceKeyValuePair = {\n  key: string;\n  type?: string;\n  value: any;\n};\n\nexport type TraceLink = {\n  url: string;\n  text: string;\n};\n\nexport type TraceLog = {\n  timestamp: number;\n  fields: TraceKeyValuePair[];\n};\n\nexport type TraceProcess = {\n  serviceName: string;\n  tags: TraceKeyValuePair[];\n};\n\nexport type TraceSpanReference = {\n  refType: 'CHILD_OF' | 'FOLLOWS_FROM';\n  // eslint-disable-next-line no-use-before-define\n  span?: TraceSpan | null | undefined;\n  spanID: string;\n  traceID: string;\n  tags?: TraceKeyValuePair[];\n};\n\nexport type TraceSpanData = {\n  spanID: string;\n  traceID: string;\n  processID: string;\n  operationName: string;\n  // Times are in microseconds\n  startTime: number;\n  duration: number;\n  logs: TraceLog[];\n  tags?: TraceKeyValuePair[];\n  references?: TraceSpanReference[];\n  warnings?: string[] | null;\n  stackTraces?: string[];\n  flags: number;\n  errorIconColor?: string;\n  dataFrameRowIndex?: number;\n};\n\nexport type TraceSpan = TraceSpanData & {\n  depth: number;\n  hasChildren: boolean;\n  childSpanCount: number;\n  process: TraceProcess;\n  relativeStartTime: number;\n  tags: NonNullable<TraceSpanData['tags']>;\n  references: NonNullable<TraceSpanData['references']>;\n  warnings: NonNullable<TraceSpanData['warnings']>;\n  subsidiarilyReferencedBy: TraceSpanReference[];\n};\n\nexport type TraceData = {\n  processes: Record<string, TraceProcess>;\n  traceID: string;\n  warnings?: string[] | null;\n};\n\nexport type TraceResponse = TraceData & {\n  spans: TraceSpanData[];\n};\n\nexport type Trace = TraceData & {\n  duration: number;\n  endTime: number;\n  spans: TraceSpan[];\n  startTime: number;\n  traceName: string;\n  services: Array<{ name: string; numberOfSpans: number }>;\n};\n"],"mappings":""},"metadata":{},"sourceType":"module"}