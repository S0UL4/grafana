{"ast":null,"code":"import { css } from '@emotion/css';\nimport React from 'react';\nimport { useStyles } from '../../themes';\nimport { Portal } from '../Portal/Portal';\nimport { VizTooltipContainer } from './VizTooltipContainer'; // Describes active dimensions user interacts with\n// It's a key-value pair where:\n// - key is the name of the dimension\n// - value is a tuple addressing which column and row from given dimension is active.\n//   If row is undefined, it means that we are not hovering over a datapoint\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/**\n * @public\n */\nexport const VizTooltip = ({\n  content,\n  position,\n  offset\n}) => {\n  const styles = useStyles(getStyles);\n\n  if (position) {\n    return /*#__PURE__*/_jsx(Portal, {\n      className: styles.portal,\n      children: /*#__PURE__*/_jsx(VizTooltipContainer, {\n        position: position,\n        offset: offset || {\n          x: 0,\n          y: 0\n        },\n        children: content\n      })\n    });\n  }\n\n  return null;\n};\nVizTooltip.displayName = 'VizTooltip';\n\nconst getStyles = () => {\n  return {\n    portal: css`\n      position: absolute;\n      top: 0;\n      left: 0;\n      pointer-events: none;\n      width: 100%;\n      height: 100%;\n    `\n  };\n};","map":{"version":3,"names":["css","React","useStyles","Portal","VizTooltipContainer","VizTooltip","content","position","offset","styles","getStyles","portal","x","y","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/VizTooltip/VizTooltip.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { Dimensions, TimeZone } from '@grafana/data';\nimport { TooltipDisplayMode } from '@grafana/schema';\n\nimport { useStyles } from '../../themes';\nimport { FlotPosition } from '../Graph/types';\nimport { Portal } from '../Portal/Portal';\n\nimport { VizTooltipContainer } from './VizTooltipContainer';\n\n// Describes active dimensions user interacts with\n// It's a key-value pair where:\n// - key is the name of the dimension\n// - value is a tuple addressing which column and row from given dimension is active.\n//   If row is undefined, it means that we are not hovering over a datapoint\nexport type ActiveDimensions<T extends Dimensions = any> = { [key in keyof T]: [number, number | undefined] | null };\n\nexport interface VizTooltipContentProps<T extends Dimensions = any> {\n  // Each dimension is described by array of fields representing it\n  // I.e. for graph there are two dimensions: x and y axis:\n  // { xAxis: [<array of time fields>], yAxis: [<array of value fields>]}\n  // TODO: type this better, no good idea how yet\n  dimensions: T; // Dimension[]\n  activeDimensions?: ActiveDimensions<T>;\n  timeZone?: TimeZone;\n  pos: FlotPosition;\n  mode: TooltipDisplayMode;\n}\n\nexport interface VizTooltipProps {\n  /** Element used as tooltips content */\n  content?: React.ReactElement<any>;\n\n  /** Optional component to be used as a tooltip content */\n  tooltipComponent?: React.ComponentType<VizTooltipContentProps>;\n\n  /** x/y position relative to the window */\n  position?: { x: number; y: number };\n\n  /** x/y offset relative to tooltip origin element, i.e. graph's datapoint */\n  offset?: { x: number; y: number };\n\n  // Mode in which tooltip works\n  // - single - display single series info\n  // - multi - display all series info\n  mode?: TooltipDisplayMode;\n}\n\n/**\n * @public\n */\nexport const VizTooltip: React.FC<VizTooltipProps> = ({ content, position, offset }) => {\n  const styles = useStyles(getStyles);\n  if (position) {\n    return (\n      <Portal className={styles.portal}>\n        <VizTooltipContainer position={position} offset={offset || { x: 0, y: 0 }}>\n          {content}\n        </VizTooltipContainer>\n      </Portal>\n    );\n  }\n  return null;\n};\n\nVizTooltip.displayName = 'VizTooltip';\n\nconst getStyles = () => {\n  return {\n    portal: css`\n      position: absolute;\n      top: 0;\n      left: 0;\n      pointer-events: none;\n      width: 100%;\n      height: 100%;\n    `,\n  };\n};\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAKA,SAASC,SAAT,QAA0B,cAA1B;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,SAASC,mBAAT,QAAoC,uBAApC,C,CAEA;AACA;AACA;AACA;AACA;;;;AAkCA;AACA;AACA;AACA,OAAO,MAAMC,UAAqC,GAAG,CAAC;EAAEC,OAAF;EAAWC,QAAX;EAAqBC;AAArB,CAAD,KAAmC;EACtF,MAAMC,MAAM,GAAGP,SAAS,CAACQ,SAAD,CAAxB;;EACA,IAAIH,QAAJ,EAAc;IACZ,oBACE,KAAC,MAAD;MAAQ,SAAS,EAAEE,MAAM,CAACE,MAA1B;MAAA,uBACE,KAAC,mBAAD;QAAqB,QAAQ,EAAEJ,QAA/B;QAAyC,MAAM,EAAEC,MAAM,IAAI;UAAEI,CAAC,EAAE,CAAL;UAAQC,CAAC,EAAE;QAAX,CAA3D;QAAA,UACGP;MADH;IADF,EADF;EAOD;;EACD,OAAO,IAAP;AACD,CAZM;AAcPD,UAAU,CAACS,WAAX,GAAyB,YAAzB;;AAEA,MAAMJ,SAAS,GAAG,MAAM;EACtB,OAAO;IACLC,MAAM,EAAEX,GAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;EARS,CAAP;AAUD,CAXD"},"metadata":{},"sourceType":"module"}