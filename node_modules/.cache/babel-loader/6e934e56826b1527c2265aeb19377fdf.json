{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Registry } from '../utils/Registry';\nexport class OptionsUIRegistryBuilder {\n  constructor() {\n    _defineProperty(this, \"properties\", []);\n  }\n\n  addCustomEditor(config) {\n    this.properties.push(config);\n    return this;\n  }\n\n  getRegistry() {\n    return new Registry(() => {\n      return this.properties;\n    });\n  }\n\n  getItems() {\n    return this.properties;\n  }\n\n}","map":{"version":3,"names":["Registry","OptionsUIRegistryBuilder","addCustomEditor","config","properties","push","getRegistry","getItems"],"sources":["/home/soula/grafana/packages/grafana-data/src/types/OptionsUIRegistryBuilder.ts"],"sourcesContent":["import { ComponentType } from 'react';\n\nimport {\n  NumberFieldConfigSettings,\n  SliderFieldConfigSettings,\n  SelectFieldConfigSettings,\n  StringFieldConfigSettings,\n} from '../field';\nimport { RegistryItem, Registry } from '../utils/Registry';\n\nimport { OptionEditorConfig } from './options';\n\n/**\n * Option editor registry item\n */\nexport interface OptionsEditorItem<TOptions, TSettings, TEditorProps, TValue>\n  extends RegistryItem,\n    OptionEditorConfig<TOptions, TSettings, TValue> {\n  /**\n   * React component used to edit the options property\n   */\n  editor: ComponentType<TEditorProps>;\n\n  /*\n   * @param value\n   */\n  getItemsCount?: (value?: TValue) => number;\n}\n\n/**\n * Describes an API for option editors UI builder\n */\nexport interface OptionsUIRegistryBuilderAPI<\n  TOptions,\n  TEditorProps,\n  T extends OptionsEditorItem<TOptions, any, TEditorProps, any>\n> {\n  addNumberInput?<TSettings extends NumberFieldConfigSettings = NumberFieldConfigSettings>(\n    config: OptionEditorConfig<TOptions, TSettings, number>\n  ): this;\n\n  addSliderInput?<TSettings extends SliderFieldConfigSettings = SliderFieldConfigSettings>(\n    config: OptionEditorConfig<TOptions, TSettings, number>\n  ): this;\n\n  addTextInput?<TSettings extends StringFieldConfigSettings = StringFieldConfigSettings>(\n    config: OptionEditorConfig<TOptions, TSettings, string>\n  ): this;\n\n  addStringArray?<TSettings extends StringFieldConfigSettings = StringFieldConfigSettings>(\n    config: OptionEditorConfig<TOptions, TSettings, string[]>\n  ): this;\n\n  addSelect?<TOption, TSettings extends SelectFieldConfigSettings<TOption>>(\n    config: OptionEditorConfig<TOptions, TSettings, TOption>\n  ): this;\n\n  addRadio?<TOption, TSettings extends SelectFieldConfigSettings<TOption> = SelectFieldConfigSettings<TOption>>(\n    config: OptionEditorConfig<TOptions, TSettings, TOption>\n  ): this;\n\n  addBooleanSwitch?<TSettings = any>(config: OptionEditorConfig<TOptions, TSettings, boolean>): this;\n\n  addUnitPicker?<TSettings = any>(config: OptionEditorConfig<TOptions, TSettings, string>): this;\n\n  addColorPicker?<TSettings = any>(config: OptionEditorConfig<TOptions, TSettings, string>): this;\n\n  /**\n   * Enables custom editor definition\n   * @param config\n   */\n  addCustomEditor<TSettings, TValue>(config: OptionsEditorItem<TOptions, TSettings, TEditorProps, TValue>): this;\n\n  /**\n   * Returns registry of option editors\n   */\n  getRegistry: () => Registry<T>;\n}\n\nexport abstract class OptionsUIRegistryBuilder<\n  TOptions,\n  TEditorProps,\n  T extends OptionsEditorItem<TOptions, any, TEditorProps, any>\n> implements OptionsUIRegistryBuilderAPI<TOptions, TEditorProps, T>\n{\n  private properties: T[] = [];\n\n  addCustomEditor<TSettings, TValue>(config: T & OptionsEditorItem<TOptions, TSettings, TEditorProps, TValue>): this {\n    this.properties.push(config);\n    return this;\n  }\n\n  getRegistry() {\n    return new Registry(() => {\n      return this.properties;\n    });\n  }\n\n  getItems() {\n    return this.properties;\n  }\n}\n"],"mappings":";;AAQA,SAAuBA,QAAvB,QAAuC,mBAAvC;AAuEA,OAAO,MAAeC,wBAAf,CAKP;EAAA;IAAA,oCAC4B,EAD5B;EAAA;;EAGEC,eAAe,CAAoBC,MAApB,EAAoG;IACjH,KAAKC,UAAL,CAAgBC,IAAhB,CAAqBF,MAArB;IACA,OAAO,IAAP;EACD;;EAEDG,WAAW,GAAG;IACZ,OAAO,IAAIN,QAAJ,CAAa,MAAM;MACxB,OAAO,KAAKI,UAAZ;IACD,CAFM,CAAP;EAGD;;EAEDG,QAAQ,GAAG;IACT,OAAO,KAAKH,UAAZ;EACD;;AAhBH"},"metadata":{},"sourceType":"module"}