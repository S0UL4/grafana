{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { find } from 'lodash';\nimport { createChangeHandler, createResetHandler, PasswordFieldEnum } from '../../../features/datasources/utils/passwordHandlers';\nexport class PostgresConfigCtrl {\n  /** @ngInject */\n  constructor($scope, datasourceSrv) {\n    _defineProperty(this, \"datasourceSrv\", void 0);\n\n    _defineProperty(this, \"showTimescaleDBHelp\", void 0);\n\n    _defineProperty(this, \"onPasswordReset\", void 0);\n\n    _defineProperty(this, \"onPasswordChange\", void 0);\n\n    _defineProperty(this, \"postgresVersions\", [{\n      name: '9.3',\n      value: 903\n    }, {\n      name: '9.4',\n      value: 904\n    }, {\n      name: '9.5',\n      value: 905\n    }, {\n      name: '9.6',\n      value: 906\n    }, {\n      name: '10',\n      value: 1000\n    }, {\n      name: '11',\n      value: 1100\n    }, {\n      name: '12+',\n      value: 1200\n    }]);\n\n    this.current = $scope.ctrl.current;\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.tlsConfigurationMethod = this.current.jsonData.tlsConfigurationMethod || 'file-path';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n    this.tlsModeMapping();\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then(ds => {\n      return ds.getVersion().then(version => {\n        version = Number(version[0].text); // timescaledb is only available for 9.6+\n\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then(version => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n\n        if (!find(this.postgresVersions, p => p.value === version)) {\n          this.postgresVersions.push({\n            name: name,\n            value: version\n          });\n        }\n\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  tlsModeMapping() {\n    if (this.current.jsonData.sslmode === 'disable') {\n      this.current.jsonData.tlsAuth = false;\n      this.current.jsonData.tlsAuthWithCACert = false;\n      this.current.jsonData.tlsSkipVerify = true;\n    } else {\n      this.current.jsonData.tlsAuth = true;\n      this.current.jsonData.tlsAuthWithCACert = true;\n      this.current.jsonData.tlsSkipVerify = false;\n    }\n  } // the value portion is derived from postgres server_version_num/100\n\n\n}\nPostgresConfigCtrl.$inject = [\"$scope\", \"datasourceSrv\"];\n\n_defineProperty(PostgresConfigCtrl, \"templateUrl\", 'partials/config.html');","map":{"version":3,"names":["find","createChangeHandler","createResetHandler","PasswordFieldEnum","PostgresConfigCtrl","constructor","$scope","datasourceSrv","name","value","current","ctrl","jsonData","sslmode","tlsConfigurationMethod","postgresVersion","showTimescaleDBHelp","autoDetectFeatures","onPasswordReset","Password","onPasswordChange","tlsModeMapping","id","loadDatasource","then","ds","getVersion","version","Number","text","getTimescaleDBVersion","length","timescaledb","major","Math","trunc","minor","String","postgresVersions","p","push","toggleTimescaleDBHelp","tlsAuth","tlsAuthWithCACert","tlsSkipVerify"],"sources":["/home/soula/grafana/public/app/plugins/datasource/postgres/config_ctrl.ts"],"sourcesContent":["import { find } from 'lodash';\n\nimport { DatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport {\n  createChangeHandler,\n  createResetHandler,\n  PasswordFieldEnum,\n} from '../../../features/datasources/utils/passwordHandlers';\n\nexport class PostgresConfigCtrl {\n  static templateUrl = 'partials/config.html';\n\n  // Set through angular bindings\n  declare current: any;\n\n  datasourceSrv: any;\n  showTimescaleDBHelp: boolean;\n  onPasswordReset: ReturnType<typeof createResetHandler>;\n  onPasswordChange: ReturnType<typeof createChangeHandler>;\n\n  /** @ngInject */\n  constructor($scope: any, datasourceSrv: DatasourceSrv) {\n    this.current = $scope.ctrl.current;\n    this.datasourceSrv = datasourceSrv;\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\n    this.current.jsonData.tlsConfigurationMethod = this.current.jsonData.tlsConfigurationMethod || 'file-path';\n    this.current.jsonData.postgresVersion = this.current.jsonData.postgresVersion || 903;\n    this.showTimescaleDBHelp = false;\n    this.autoDetectFeatures();\n    this.onPasswordReset = createResetHandler(this, PasswordFieldEnum.Password);\n    this.onPasswordChange = createChangeHandler(this, PasswordFieldEnum.Password);\n    this.tlsModeMapping();\n  }\n\n  autoDetectFeatures() {\n    if (!this.current.id) {\n      return;\n    }\n\n    this.datasourceSrv.loadDatasource(this.current.name).then((ds: any) => {\n      return ds.getVersion().then((version: any) => {\n        version = Number(version[0].text);\n\n        // timescaledb is only available for 9.6+\n        if (version >= 906) {\n          ds.getTimescaleDBVersion().then((version: any) => {\n            if (version.length === 1) {\n              this.current.jsonData.timescaledb = true;\n            }\n          });\n        }\n\n        const major = Math.trunc(version / 100);\n        const minor = version % 100;\n        let name = String(major);\n        if (version < 1000) {\n          name = String(major) + '.' + String(minor);\n        }\n        if (!find(this.postgresVersions, (p: any) => p.value === version)) {\n          this.postgresVersions.push({ name: name, value: version });\n        }\n        this.current.jsonData.postgresVersion = version;\n      });\n    });\n  }\n\n  toggleTimescaleDBHelp() {\n    this.showTimescaleDBHelp = !this.showTimescaleDBHelp;\n  }\n\n  tlsModeMapping() {\n    if (this.current.jsonData.sslmode === 'disable') {\n      this.current.jsonData.tlsAuth = false;\n      this.current.jsonData.tlsAuthWithCACert = false;\n      this.current.jsonData.tlsSkipVerify = true;\n    } else {\n      this.current.jsonData.tlsAuth = true;\n      this.current.jsonData.tlsAuthWithCACert = true;\n      this.current.jsonData.tlsSkipVerify = false;\n    }\n  }\n\n  // the value portion is derived from postgres server_version_num/100\n  postgresVersions = [\n    { name: '9.3', value: 903 },\n    { name: '9.4', value: 904 },\n    { name: '9.5', value: 905 },\n    { name: '9.6', value: 906 },\n    { name: '10', value: 1000 },\n    { name: '11', value: 1100 },\n    { name: '12+', value: 1200 },\n  ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}