{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { cloneDeep, isString, trim } from 'lodash';\nimport { applyStateChanges } from '../../../../core/utils/applyStateChanges';\nimport { ALL_VARIABLE_VALUE } from '../../constants';\nimport { isMulti, isQuery } from '../../guard';\nimport { containsSearchFilter } from '../../utils';\nexport const initialOptionPickerState = {\n  id: '',\n  highlightIndex: -1,\n  queryValue: '',\n  selectedValues: [],\n  options: [],\n  multi: false\n};\nexport const OPTIONS_LIMIT = 1000;\n\nconst optionsToRecord = options => {\n  if (!Array.isArray(options)) {\n    return {};\n  }\n\n  return options.reduce((all, option) => {\n    if (isString(option.value)) {\n      all[option.value] = option;\n    }\n\n    return all;\n  }, {});\n};\n\nconst updateOptions = state => {\n  if (!Array.isArray(state.options)) {\n    state.options = [];\n    return state;\n  }\n\n  const selectedOptions = optionsToRecord(state.selectedValues);\n  state.selectedValues = Object.values(selectedOptions);\n  state.options = state.options.map(option => {\n    if (!isString(option.value)) {\n      return option;\n    }\n\n    const selected = !!selectedOptions[option.value];\n\n    if (option.selected === selected) {\n      return option;\n    }\n\n    return Object.assign({}, option, {\n      selected\n    });\n  });\n  state.options = applyLimit(state.options);\n  return state;\n};\n\nconst applyLimit = options => {\n  if (!Array.isArray(options)) {\n    return [];\n  }\n\n  if (options.length <= OPTIONS_LIMIT) {\n    return options;\n  }\n\n  return options.slice(0, OPTIONS_LIMIT);\n};\n\nconst updateDefaultSelection = state => {\n  const {\n    options,\n    selectedValues\n  } = state;\n\n  if (options.length === 0 || selectedValues.length > 0) {\n    return state;\n  }\n\n  if (!options[0] || options[0].value !== ALL_VARIABLE_VALUE) {\n    return state;\n  }\n\n  state.selectedValues = [Object.assign({}, options[0], {\n    selected: true\n  })];\n  return state;\n};\n\nconst updateAllSelection = state => {\n  const {\n    selectedValues\n  } = state;\n\n  if (selectedValues.length > 1) {\n    state.selectedValues = selectedValues.filter(option => option.value !== ALL_VARIABLE_VALUE);\n  }\n\n  return state;\n};\n\nconst optionsPickerSlice = createSlice({\n  name: 'templating/optionsPicker',\n  initialState: initialOptionPickerState,\n  reducers: {\n    showOptions: (state, action) => {\n      const {\n        query,\n        options\n      } = action.payload;\n      state.highlightIndex = -1;\n      state.options = cloneDeep(options);\n      state.id = action.payload.id;\n      state.queryValue = '';\n      state.multi = false;\n\n      if (isMulti(action.payload)) {\n        var _action$payload$multi;\n\n        state.multi = (_action$payload$multi = action.payload.multi) !== null && _action$payload$multi !== void 0 ? _action$payload$multi : false;\n      }\n\n      if (isQuery(action.payload)) {\n        const {\n          queryValue\n        } = action.payload;\n        const queryHasSearchFilter = containsSearchFilter(query);\n        state.queryValue = queryHasSearchFilter && queryValue ? queryValue : '';\n      }\n\n      state.selectedValues = state.options.filter(option => option.selected);\n      return applyStateChanges(state, updateDefaultSelection, updateOptions);\n    },\n    hideOptions: (state, action) => {\n      return Object.assign({}, initialOptionPickerState);\n    },\n    toggleOption: (state, action) => {\n      const {\n        option,\n        clearOthers,\n        forceSelect\n      } = action.payload;\n      const {\n        multi,\n        selectedValues\n      } = state;\n\n      if (option) {\n        const selected = !selectedValues.find(o => o.value === option.value && o.text === option.text);\n\n        if (option.value === ALL_VARIABLE_VALUE || !multi || clearOthers) {\n          if (selected || forceSelect) {\n            state.selectedValues = [Object.assign({}, option, {\n              selected: true\n            })];\n          } else {\n            state.selectedValues = [];\n          }\n\n          return applyStateChanges(state, updateDefaultSelection, updateAllSelection, updateOptions);\n        }\n\n        if (forceSelect || selected) {\n          state.selectedValues.push(Object.assign({}, option, {\n            selected: true\n          }));\n          return applyStateChanges(state, updateDefaultSelection, updateAllSelection, updateOptions);\n        }\n\n        state.selectedValues = selectedValues.filter(o => o.value !== option.value && o.text !== option.text);\n      } else {\n        state.selectedValues = [];\n      }\n\n      return applyStateChanges(state, updateDefaultSelection, updateAllSelection, updateOptions);\n    },\n    moveOptionsHighlight: (state, action) => {\n      let nextIndex = state.highlightIndex + action.payload;\n\n      if (nextIndex < 0) {\n        nextIndex = 0;\n      } else if (nextIndex >= state.options.length) {\n        nextIndex = state.options.length - 1;\n      }\n\n      return Object.assign({}, state, {\n        highlightIndex: nextIndex\n      });\n    },\n    toggleAllOptions: (state, action) => {\n      if (state.selectedValues.length > 0) {\n        state.selectedValues = [];\n        return applyStateChanges(state, updateOptions);\n      }\n\n      state.selectedValues = state.options.filter(option => option.value !== ALL_VARIABLE_VALUE).map(option => Object.assign({}, option, {\n        selected: true\n      }));\n      return applyStateChanges(state, updateOptions);\n    },\n    updateSearchQuery: (state, action) => {\n      state.queryValue = action.payload;\n      return state;\n    },\n    updateOptionsAndFilter: (state, action) => {\n      var _state$queryValue;\n\n      const searchQuery = trim(((_state$queryValue = state.queryValue) !== null && _state$queryValue !== void 0 ? _state$queryValue : '').toLowerCase());\n      state.options = action.payload.filter(option => {\n        var _option$text;\n\n        const optionsText = (_option$text = option.text) !== null && _option$text !== void 0 ? _option$text : '';\n        const text = Array.isArray(optionsText) ? optionsText.toString() : optionsText;\n        return text.toLowerCase().indexOf(searchQuery) !== -1;\n      });\n      state.highlightIndex = 0;\n      return applyStateChanges(state, updateDefaultSelection, updateOptions);\n    },\n    updateOptionsFromSearch: (state, action) => {\n      state.options = action.payload;\n      state.highlightIndex = 0;\n      return applyStateChanges(state, updateDefaultSelection, updateOptions);\n    },\n    cleanPickerState: () => initialOptionPickerState\n  }\n});\nexport const {\n  toggleOption,\n  showOptions,\n  hideOptions,\n  moveOptionsHighlight,\n  toggleAllOptions,\n  updateSearchQuery,\n  updateOptionsAndFilter,\n  updateOptionsFromSearch,\n  cleanPickerState\n} = optionsPickerSlice.actions;\nexport const optionsPickerReducer = optionsPickerSlice.reducer;","map":{"version":3,"names":["createSlice","cloneDeep","isString","trim","applyStateChanges","ALL_VARIABLE_VALUE","isMulti","isQuery","containsSearchFilter","initialOptionPickerState","id","highlightIndex","queryValue","selectedValues","options","multi","OPTIONS_LIMIT","optionsToRecord","Array","isArray","reduce","all","option","value","updateOptions","state","selectedOptions","Object","values","map","selected","applyLimit","length","slice","updateDefaultSelection","updateAllSelection","filter","optionsPickerSlice","name","initialState","reducers","showOptions","action","query","payload","queryHasSearchFilter","hideOptions","toggleOption","clearOthers","forceSelect","find","o","text","push","moveOptionsHighlight","nextIndex","toggleAllOptions","updateSearchQuery","updateOptionsAndFilter","searchQuery","toLowerCase","optionsText","toString","indexOf","updateOptionsFromSearch","cleanPickerState","actions","optionsPickerReducer","reducer"],"sources":["/home/soula/grafana/public/app/features/variables/pickers/OptionsPicker/reducer.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { cloneDeep, isString, trim } from 'lodash';\n\nimport { applyStateChanges } from '../../../../core/utils/applyStateChanges';\nimport { ALL_VARIABLE_VALUE } from '../../constants';\nimport { isMulti, isQuery } from '../../guard';\nimport { VariableOption, VariableWithOptions } from '../../types';\nimport { containsSearchFilter } from '../../utils';\n\nexport interface ToggleOption {\n  option?: VariableOption;\n  forceSelect: boolean;\n  clearOthers: boolean;\n}\n\nexport interface OptionsPickerState {\n  id: string;\n  selectedValues: VariableOption[];\n  queryValue: string;\n  highlightIndex: number;\n  options: VariableOption[];\n  multi: boolean;\n}\n\nexport const initialOptionPickerState: OptionsPickerState = {\n  id: '',\n  highlightIndex: -1,\n  queryValue: '',\n  selectedValues: [],\n  options: [],\n  multi: false,\n};\n\nexport const OPTIONS_LIMIT = 1000;\n\nconst optionsToRecord = (options: VariableOption[]): Record<string, VariableOption> => {\n  if (!Array.isArray(options)) {\n    return {};\n  }\n\n  return options.reduce((all: Record<string, VariableOption>, option) => {\n    if (isString(option.value)) {\n      all[option.value] = option;\n    }\n    return all;\n  }, {});\n};\n\nconst updateOptions = (state: OptionsPickerState): OptionsPickerState => {\n  if (!Array.isArray(state.options)) {\n    state.options = [];\n    return state;\n  }\n\n  const selectedOptions = optionsToRecord(state.selectedValues);\n  state.selectedValues = Object.values(selectedOptions);\n\n  state.options = state.options.map((option) => {\n    if (!isString(option.value)) {\n      return option;\n    }\n\n    const selected = !!selectedOptions[option.value];\n\n    if (option.selected === selected) {\n      return option;\n    }\n\n    return { ...option, selected };\n  });\n  state.options = applyLimit(state.options);\n  return state;\n};\n\nconst applyLimit = (options: VariableOption[]): VariableOption[] => {\n  if (!Array.isArray(options)) {\n    return [];\n  }\n  if (options.length <= OPTIONS_LIMIT) {\n    return options;\n  }\n  return options.slice(0, OPTIONS_LIMIT);\n};\n\nconst updateDefaultSelection = (state: OptionsPickerState): OptionsPickerState => {\n  const { options, selectedValues } = state;\n\n  if (options.length === 0 || selectedValues.length > 0) {\n    return state;\n  }\n\n  if (!options[0] || options[0].value !== ALL_VARIABLE_VALUE) {\n    return state;\n  }\n\n  state.selectedValues = [{ ...options[0], selected: true }];\n  return state;\n};\n\nconst updateAllSelection = (state: OptionsPickerState): OptionsPickerState => {\n  const { selectedValues } = state;\n  if (selectedValues.length > 1) {\n    state.selectedValues = selectedValues.filter((option) => option.value !== ALL_VARIABLE_VALUE);\n  }\n  return state;\n};\n\nconst optionsPickerSlice = createSlice({\n  name: 'templating/optionsPicker',\n  initialState: initialOptionPickerState,\n  reducers: {\n    showOptions: (state, action: PayloadAction<VariableWithOptions>): OptionsPickerState => {\n      const { query, options } = action.payload;\n\n      state.highlightIndex = -1;\n      state.options = cloneDeep(options);\n      state.id = action.payload.id;\n      state.queryValue = '';\n      state.multi = false;\n\n      if (isMulti(action.payload)) {\n        state.multi = action.payload.multi ?? false;\n      }\n\n      if (isQuery(action.payload)) {\n        const { queryValue } = action.payload;\n        const queryHasSearchFilter = containsSearchFilter(query);\n        state.queryValue = queryHasSearchFilter && queryValue ? queryValue : '';\n      }\n\n      state.selectedValues = state.options.filter((option) => option.selected);\n      return applyStateChanges(state, updateDefaultSelection, updateOptions);\n    },\n    hideOptions: (state, action: PayloadAction): OptionsPickerState => {\n      return { ...initialOptionPickerState };\n    },\n    toggleOption: (state, action: PayloadAction<ToggleOption>): OptionsPickerState => {\n      const { option, clearOthers, forceSelect } = action.payload;\n      const { multi, selectedValues } = state;\n\n      if (option) {\n        const selected = !selectedValues.find((o) => o.value === option.value && o.text === option.text);\n\n        if (option.value === ALL_VARIABLE_VALUE || !multi || clearOthers) {\n          if (selected || forceSelect) {\n            state.selectedValues = [{ ...option, selected: true }];\n          } else {\n            state.selectedValues = [];\n          }\n          return applyStateChanges(state, updateDefaultSelection, updateAllSelection, updateOptions);\n        }\n        if (forceSelect || selected) {\n          state.selectedValues.push({ ...option, selected: true });\n          return applyStateChanges(state, updateDefaultSelection, updateAllSelection, updateOptions);\n        }\n\n        state.selectedValues = selectedValues.filter((o) => o.value !== option.value && o.text !== option.text);\n      } else {\n        state.selectedValues = [];\n      }\n\n      return applyStateChanges(state, updateDefaultSelection, updateAllSelection, updateOptions);\n    },\n    moveOptionsHighlight: (state, action: PayloadAction<number>): OptionsPickerState => {\n      let nextIndex = state.highlightIndex + action.payload;\n\n      if (nextIndex < 0) {\n        nextIndex = 0;\n      } else if (nextIndex >= state.options.length) {\n        nextIndex = state.options.length - 1;\n      }\n\n      return {\n        ...state,\n        highlightIndex: nextIndex,\n      };\n    },\n    toggleAllOptions: (state, action: PayloadAction): OptionsPickerState => {\n      if (state.selectedValues.length > 0) {\n        state.selectedValues = [];\n        return applyStateChanges(state, updateOptions);\n      }\n\n      state.selectedValues = state.options\n        .filter((option) => option.value !== ALL_VARIABLE_VALUE)\n        .map((option) => ({\n          ...option,\n          selected: true,\n        }));\n\n      return applyStateChanges(state, updateOptions);\n    },\n    updateSearchQuery: (state, action: PayloadAction<string>): OptionsPickerState => {\n      state.queryValue = action.payload;\n      return state;\n    },\n    updateOptionsAndFilter: (state, action: PayloadAction<VariableOption[]>): OptionsPickerState => {\n      const searchQuery = trim((state.queryValue ?? '').toLowerCase());\n\n      state.options = action.payload.filter((option) => {\n        const optionsText = option.text ?? '';\n        const text = Array.isArray(optionsText) ? optionsText.toString() : optionsText;\n        return text.toLowerCase().indexOf(searchQuery) !== -1;\n      });\n\n      state.highlightIndex = 0;\n\n      return applyStateChanges(state, updateDefaultSelection, updateOptions);\n    },\n    updateOptionsFromSearch: (state, action: PayloadAction<VariableOption[]>): OptionsPickerState => {\n      state.options = action.payload;\n      state.highlightIndex = 0;\n\n      return applyStateChanges(state, updateDefaultSelection, updateOptions);\n    },\n    cleanPickerState: () => initialOptionPickerState,\n  },\n});\n\nexport const {\n  toggleOption,\n  showOptions,\n  hideOptions,\n  moveOptionsHighlight,\n  toggleAllOptions,\n  updateSearchQuery,\n  updateOptionsAndFilter,\n  updateOptionsFromSearch,\n  cleanPickerState,\n} = optionsPickerSlice.actions;\n\nexport const optionsPickerReducer = optionsPickerSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}