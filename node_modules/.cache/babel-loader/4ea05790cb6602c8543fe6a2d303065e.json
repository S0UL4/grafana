{"ast":null,"code":"const _excluded = [\"children\", \"className\", \"grow\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { cx, css } from '@emotion/css';\nimport React from 'react';\nimport { useTheme } from '../../themes';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n/** @beta */\nexport const InlineSegmentGroup = _ref => {\n  let {\n    children,\n    className,\n    grow\n  } = _ref,\n      htmlProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const theme = useTheme();\n  const styles = getStyles(theme, grow);\n  return /*#__PURE__*/_jsx(\"div\", Object.assign({\n    className: cx(styles.container, className)\n  }, htmlProps, {\n    children: children\n  }));\n};\nInlineSegmentGroup.displayName = 'InlineSegmentGroup';\n\nconst getStyles = (theme, grow) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-start;\n      text-align: left;\n      position: relative;\n      flex: ${grow ? 1 : 0} 0 auto;\n      margin-bottom: ${theme.spacing.xs};\n    `\n  };\n};","map":{"version":3,"names":["cx","css","React","useTheme","InlineSegmentGroup","children","className","grow","htmlProps","theme","styles","getStyles","container","displayName","spacing","xs"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Forms/InlineSegmentGroup.tsx"],"sourcesContent":["import { cx, css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { useTheme } from '../../themes';\n\nexport interface Props {\n  grow?: boolean;\n  className?: string;\n}\n\n/** @beta */\nexport const InlineSegmentGroup: FC<Props> = ({ children, className, grow, ...htmlProps }) => {\n  const theme = useTheme();\n  const styles = getStyles(theme, grow);\n\n  return (\n    <div className={cx(styles.container, className)} {...htmlProps}>\n      {children}\n    </div>\n  );\n};\n\nInlineSegmentGroup.displayName = 'InlineSegmentGroup';\n\nconst getStyles = (theme: GrafanaTheme, grow?: boolean) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-start;\n      text-align: left;\n      position: relative;\n      flex: ${grow ? 1 : 0} 0 auto;\n      margin-bottom: ${theme.spacing.xs};\n    `,\n  };\n};\n"],"mappings":";;;;AAAA,SAASA,EAAT,EAAaC,GAAb,QAAwB,cAAxB;AACA,OAAOC,KAAP,MAA0B,OAA1B;AAIA,SAASC,QAAT,QAAyB,cAAzB;;;AAOA;AACA,OAAO,MAAMC,kBAA6B,GAAG,QAAiD;EAAA,IAAhD;IAAEC,QAAF;IAAYC,SAAZ;IAAuBC;EAAvB,CAAgD;EAAA,IAAhBC,SAAgB;;EAC5F,MAAMC,KAAK,GAAGN,QAAQ,EAAtB;EACA,MAAMO,MAAM,GAAGC,SAAS,CAACF,KAAD,EAAQF,IAAR,CAAxB;EAEA,oBACE;IAAK,SAAS,EAAEP,EAAE,CAACU,MAAM,CAACE,SAAR,EAAmBN,SAAnB;EAAlB,GAAqDE,SAArD;IAAA,UACGH;EADH,GADF;AAKD,CATM;AAWPD,kBAAkB,CAACS,WAAnB,GAAiC,oBAAjC;;AAEA,MAAMF,SAAS,GAAG,CAACF,KAAD,EAAsBF,IAAtB,KAAyC;EACzD,OAAO;IACLK,SAAS,EAAEX,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA,cAAcM,IAAI,GAAG,CAAH,GAAO,CAAE;AAC3B,uBAAuBE,KAAK,CAACK,OAAN,CAAcC,EAAG;AACxC;EATS,CAAP;AAWD,CAZD"},"metadata":{},"sourceType":"module"}