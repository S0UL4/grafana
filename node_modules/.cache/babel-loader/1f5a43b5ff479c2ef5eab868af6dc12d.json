{"ast":null,"code":"var _LoadingPlaceholder, _Label, _Label2, _Label3, _Label4;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { FixedSizeList } from 'react-window';\nimport { Button, HorizontalGroup, Input, Label, LoadingPlaceholder, stylesFactory, withTheme, BrowserLabel as PromLabel } from '@grafana/ui';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../language_utils'; // Hard limit on labels to render\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst EMPTY_SELECTOR = '{}';\nconst METRIC_LABEL = '__name__';\nconst LIST_ITEM_SIZE = 25;\nexport function buildSelector(labels) {\n  let singleMetric = '';\n  const selectedLabels = [];\n\n  for (const label of labels) {\n    if ((label.name === METRIC_LABEL || label.selected) && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter(value => value.selected).map(value => value.name);\n\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        if (label.name === METRIC_LABEL) {\n          singleMetric = selectedValues[0];\n        } else {\n          selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n        }\n      }\n    }\n  }\n\n  return [singleMetric, '{', selectedLabels.join(','), '}'].join('');\n}\nexport function facetLabels(labels, possibleLabels, lastFacetted) {\n  return labels.map(label => {\n    const possibleValues = possibleLabels[label.name];\n\n    if (possibleValues) {\n      let existingValues;\n\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        var _label$values;\n\n        // Keep selection in other facets\n        const selectedValues = new Set(((_label$values = label.values) === null || _label$values === void 0 ? void 0 : _label$values.filter(value => value.selected).map(value => value.name)) || []); // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n\n        existingValues = possibleValues.map(value => ({\n          name: value,\n          selected: selectedValues.has(value)\n        }));\n      }\n\n      return Object.assign({}, label, {\n        loading: false,\n        values: existingValues,\n        hidden: !possibleValues,\n        facets: existingValues.length\n      });\n    } // Label is facetted out, hide all values\n\n\n    return Object.assign({}, label, {\n      loading: false,\n      hidden: !possibleValues,\n      values: undefined,\n      facets: 0\n    });\n  });\n}\nconst getStyles = stylesFactory(theme => ({\n  wrapper: css`\n    background-color: ${theme.colors.bg2};\n    padding: ${theme.spacing.sm};\n    width: 100%;\n  `,\n  list: css`\n    margin-top: ${theme.spacing.sm};\n    display: flex;\n    flex-wrap: wrap;\n    max-height: 200px;\n    overflow: auto;\n    align-content: flex-start;\n  `,\n  section: css`\n    & + & {\n      margin: ${theme.spacing.md} 0;\n    }\n    position: relative;\n  `,\n  selector: css`\n    font-family: ${theme.typography.fontFamily.monospace};\n    margin-bottom: ${theme.spacing.sm};\n  `,\n  status: css`\n    padding: ${theme.spacing.xs};\n    color: ${theme.colors.textSemiWeak};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    /* using absolute positioning because flex interferes with ellipsis */\n    position: absolute;\n    width: 50%;\n    right: 0;\n    text-align: right;\n    transition: opacity 100ms linear;\n    opacity: 0;\n  `,\n  statusShowing: css`\n    opacity: 1;\n  `,\n  error: css`\n    color: ${theme.palette.brandDanger};\n  `,\n  valueList: css`\n    margin-right: ${theme.spacing.sm};\n  `,\n  valueListWrapper: css`\n    border-left: 1px solid ${theme.colors.border2};\n    margin: ${theme.spacing.sm} 0;\n    padding: ${theme.spacing.sm} 0 ${theme.spacing.sm} ${theme.spacing.sm};\n  `,\n  valueListArea: css`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${theme.spacing.sm};\n  `,\n  valueTitle: css`\n    margin-left: -${theme.spacing.xs};\n    margin-bottom: ${theme.spacing.sm};\n  `,\n  validationStatus: css`\n    padding: ${theme.spacing.xs};\n    margin-bottom: ${theme.spacing.sm};\n    color: ${theme.colors.textStrong};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `\n}));\n/**\n * TODO #33976: Remove duplicated code. The component is very similar to LokiLabelBrowser.tsx. Check if it's possible\n *              to create a single, generic component.\n */\n\nexport class UnthemedPrometheusMetricsBrowser extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"valueListsRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"state\", {\n      labels: [],\n      labelSearchTerm: '',\n      metricSearchTerm: '',\n      status: 'Ready',\n      error: '',\n      validationStatus: '',\n      valueSearchTerm: ''\n    });\n\n    _defineProperty(this, \"onChangeLabelSearch\", event => {\n      this.setState({\n        labelSearchTerm: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onChangeMetricSearch\", event => {\n      this.setState({\n        metricSearchTerm: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onChangeValueSearch\", event => {\n      this.setState({\n        valueSearchTerm: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onClickRunQuery\", () => {\n      const selector = buildSelector(this.state.labels);\n      this.props.onChange(selector);\n    });\n\n    _defineProperty(this, \"onClickRunRateQuery\", () => {\n      const selector = buildSelector(this.state.labels);\n      const query = `rate(${selector}[$__interval])`;\n      this.props.onChange(query);\n    });\n\n    _defineProperty(this, \"onClickClear\", () => {\n      this.setState(state => {\n        const labels = state.labels.map(label => Object.assign({}, label, {\n          values: undefined,\n          selected: false,\n          loading: false,\n          hidden: false,\n          facets: undefined\n        }));\n        return {\n          labels,\n          labelSearchTerm: '',\n          metricSearchTerm: '',\n          status: '',\n          error: '',\n          validationStatus: '',\n          valueSearchTerm: ''\n        };\n      });\n      this.props.deleteLastUsedLabels(); // Get metrics\n\n      this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n    });\n\n    _defineProperty(this, \"onClickLabel\", (name, value, event) => {\n      const label = this.state.labels.find(l => l.name === name);\n\n      if (!label) {\n        return;\n      } // Toggle selected state\n\n\n      const selected = !label.selected;\n      let nextValue = {\n        selected\n      };\n\n      if (label.values && !selected) {\n        // Deselect all values if label was deselected\n        const values = label.values.map(value => Object.assign({}, value, {\n          selected: false\n        }));\n        nextValue = Object.assign({}, nextValue, {\n          facets: 0,\n          values\n        });\n      } // Resetting search to prevent empty results\n\n\n      this.setState({\n        labelSearchTerm: ''\n      });\n      this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n    });\n\n    _defineProperty(this, \"onClickValue\", (name, value, event) => {\n      const label = this.state.labels.find(l => l.name === name);\n\n      if (!label || !label.values) {\n        return;\n      } // Resetting search to prevent empty results\n\n\n      this.setState({\n        labelSearchTerm: ''\n      }); // Toggling value for selected label, leaving other values intact\n\n      const values = label.values.map(v => Object.assign({}, v, {\n        selected: v.name === value ? !v.selected : v.selected\n      }));\n      this.updateLabelState(name, {\n        values\n      }, '', () => this.doFacetting(name));\n    });\n\n    _defineProperty(this, \"onClickMetric\", (name, value, event) => {\n      // Finding special metric label\n      const label = this.state.labels.find(l => l.name === name);\n\n      if (!label || !label.values) {\n        return;\n      } // Resetting search to prevent empty results\n\n\n      this.setState({\n        metricSearchTerm: ''\n      }); // Toggling value for selected label, leaving other values intact\n\n      const values = label.values.map(v => Object.assign({}, v, {\n        selected: v.name === value || v.selected ? !v.selected : v.selected\n      })); // Toggle selected state of special metrics label\n\n      const selected = values.some(v => v.selected);\n      this.updateLabelState(name, {\n        selected,\n        values\n      }, '', () => this.doFacetting(name));\n    });\n\n    _defineProperty(this, \"onClickValidate\", () => {\n      const selector = buildSelector(this.state.labels);\n      this.validateSelector(selector);\n    });\n\n    _defineProperty(this, \"doFacetting\", lastFacetted => {\n      const selector = buildSelector(this.state.labels);\n\n      if (selector === EMPTY_SELECTOR) {\n        // Clear up facetting\n        const labels = this.state.labels.map(label => {\n          return Object.assign({}, label, {\n            facets: 0,\n            values: undefined,\n            hidden: false\n          });\n        });\n        this.setState({\n          labels\n        }, () => {\n          // Get fresh set of values\n          this.state.labels.forEach(label => (label.selected || label.name === METRIC_LABEL) && this.fetchValues(label.name, selector));\n        });\n      } else {\n        // Do facetting\n        this.fetchSeries(selector, lastFacetted);\n      }\n    });\n  }\n\n  updateLabelState(name, updatedFields, status = '', cb) {\n    this.setState(state => {\n      const labels = state.labels.map(label => {\n        if (label.name === name) {\n          return Object.assign({}, label, updatedFields);\n        }\n\n        return label;\n      }); // New status overrides errors\n\n      const error = status ? '' : state.error;\n      return {\n        labels,\n        status,\n        error,\n        validationStatus: ''\n      };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const {\n      languageProvider,\n      lastUsedLabels\n    } = this.props;\n\n    if (languageProvider) {\n      const selectedLabels = lastUsedLabels;\n      languageProvider.start().then(() => {\n        let rawLabels = languageProvider.getLabelKeys(); // Get metrics\n\n        this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR); // Auto-select previously selected labels\n\n        const labels = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: selectedLabels.includes(label),\n          loading: false\n        })); // Pre-fetch values for selected labels\n\n        this.setState({\n          labels\n        }, () => {\n          this.state.labels.forEach(label => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name) {\n    const label = this.state.labels.find(l => l.name === name);\n\n    if (!label) {\n      return;\n    }\n\n    const selectedLabels = this.state.labels.filter(label => label.selected).map(label => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  async fetchValues(name, selector) {\n    const {\n      languageProvider\n    } = this.props;\n    this.updateLabelState(name, {\n      loading: true\n    }, `Fetching values for ${name}`);\n\n    try {\n      let rawValues = await languageProvider.getLabelValues(name); // If selector changed, clear loading state and discard result by returning early\n\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, {\n          loading: false\n        });\n        return;\n      }\n\n      const values = [];\n      const {\n        metricsMetadata\n      } = languageProvider;\n\n      for (const labelValue of rawValues) {\n        const value = {\n          name: labelValue\n        }; // Adding type/help text to metrics\n\n        if (name === METRIC_LABEL && metricsMetadata) {\n          const meta = metricsMetadata[labelValue];\n\n          if (meta) {\n            value.details = `(${meta.type}) ${meta.help}`;\n          }\n        }\n\n        values.push(value);\n      }\n\n      this.updateLabelState(name, {\n        values,\n        loading: false\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector, lastFacetted) {\n    const {\n      languageProvider\n    } = this.props;\n\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, {\n        loading: true\n      }, `Facetting labels for ${selector}`);\n    }\n\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true); // If selector changed, clear loading state and discard result by returning early\n\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, {\n            loading: false\n          });\n        }\n\n        return;\n      }\n\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({\n          error: `Empty results, no matching label for ${selector}`\n        });\n        return;\n      }\n\n      const labels = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({\n        labels,\n        error: ''\n      });\n\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, {\n          loading: false\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector) {\n    const {\n      languageProvider\n    } = this.props;\n    this.setState({\n      validationStatus: `Validating selector ${selector}`,\n      error: ''\n    });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({\n      validationStatus: `Selector is valid (${streams.length} series found)`\n    });\n  }\n\n  render() {\n    var _metrics, _metrics$values2;\n\n    const {\n      theme\n    } = this.props;\n    const {\n      labels,\n      labelSearchTerm,\n      metricSearchTerm,\n      status,\n      error,\n      validationStatus,\n      valueSearchTerm\n    } = this.state;\n    const styles = getStyles(theme);\n\n    if (labels.length === 0) {\n      return /*#__PURE__*/_jsx(\"div\", {\n        className: styles.wrapper,\n        children: _LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n          text: \"Loading labels...\"\n        }))\n      });\n    } // Filter metrics\n\n\n    let metrics = labels.find(label => label.name === METRIC_LABEL);\n\n    if (metrics && metricSearchTerm) {\n      var _metrics$values;\n\n      metrics = Object.assign({}, metrics, {\n        values: (_metrics$values = metrics.values) === null || _metrics$values === void 0 ? void 0 : _metrics$values.filter(value => value.selected || value.name.includes(metricSearchTerm))\n      });\n    } // Filter labels\n\n\n    let nonMetricLabels = labels.filter(label => !label.hidden && label.name !== METRIC_LABEL);\n\n    if (labelSearchTerm) {\n      nonMetricLabels = nonMetricLabels.filter(label => label.selected || label.name.includes(labelSearchTerm));\n    } // Filter non-metric label values\n\n\n    let selectedLabels = nonMetricLabels.filter(label => label.selected && label.values);\n\n    if (valueSearchTerm) {\n      selectedLabels = selectedLabels.map(label => {\n        var _label$values2;\n\n        return Object.assign({}, label, {\n          values: (_label$values2 = label.values) === null || _label$values2 === void 0 ? void 0 : _label$values2.filter(value => value.selected || value.name.includes(valueSearchTerm))\n        });\n      });\n    }\n\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n    const metricCount = ((_metrics = metrics) === null || _metrics === void 0 ? void 0 : (_metrics$values2 = _metrics.values) === null || _metrics$values2 === void 0 ? void 0 : _metrics$values2.length) || 0;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.wrapper,\n      children: [/*#__PURE__*/_jsxs(HorizontalGroup, {\n        align: \"flex-start\",\n        spacing: \"lg\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.section,\n            children: [_Label || (_Label = /*#__PURE__*/_jsx(Label, {\n              description: \"Once a metric is selected only possible labels are shown.\",\n              children: \"1. Select a metric\"\n            })), /*#__PURE__*/_jsx(\"div\", {\n              children: /*#__PURE__*/_jsx(Input, {\n                onChange: this.onChangeMetricSearch,\n                \"aria-label\": \"Filter expression for metric\",\n                value: metricSearchTerm\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              role: \"list\",\n              className: styles.valueListWrapper,\n              children: /*#__PURE__*/_jsx(FixedSizeList, {\n                height: Math.min(450, metricCount * LIST_ITEM_SIZE),\n                itemCount: metricCount,\n                itemSize: LIST_ITEM_SIZE,\n                itemKey: i => metrics.values[i].name,\n                width: 300,\n                className: styles.valueList,\n                children: ({\n                  index,\n                  style\n                }) => {\n                  var _metrics2, _metrics2$values;\n\n                  const value = (_metrics2 = metrics) === null || _metrics2 === void 0 ? void 0 : (_metrics2$values = _metrics2.values) === null || _metrics2$values === void 0 ? void 0 : _metrics2$values[index];\n\n                  if (!value) {\n                    return null;\n                  }\n\n                  return /*#__PURE__*/_jsx(\"div\", {\n                    style: style,\n                    children: /*#__PURE__*/_jsx(PromLabel, {\n                      name: metrics.name,\n                      value: value === null || value === void 0 ? void 0 : value.name,\n                      title: value.details,\n                      active: value === null || value === void 0 ? void 0 : value.selected,\n                      onClick: this.onClickMetric,\n                      searchTerm: metricSearchTerm\n                    })\n                  });\n                }\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            className: styles.section,\n            children: [_Label2 || (_Label2 = /*#__PURE__*/_jsx(Label, {\n              description: \"Once label values are selected, only possible label combinations are shown.\",\n              children: \"2. Select labels to search in\"\n            })), /*#__PURE__*/_jsx(\"div\", {\n              children: /*#__PURE__*/_jsx(Input, {\n                onChange: this.onChangeLabelSearch,\n                \"aria-label\": \"Filter expression for label\",\n                value: labelSearchTerm\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.list,\n              style: {\n                height: 120\n              },\n              children: nonMetricLabels.map(label => /*#__PURE__*/_jsx(PromLabel, {\n                name: label.name,\n                loading: label.loading,\n                active: label.selected,\n                hidden: label.hidden,\n                facets: label.facets,\n                onClick: this.onClickLabel,\n                searchTerm: labelSearchTerm\n              }, label.name))\n            })]\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: styles.section,\n            children: [_Label3 || (_Label3 = /*#__PURE__*/_jsx(Label, {\n              description: \"Use the search field to find values across selected labels.\",\n              children: \"3. Select (multiple) values for your labels\"\n            })), /*#__PURE__*/_jsx(\"div\", {\n              children: /*#__PURE__*/_jsx(Input, {\n                onChange: this.onChangeValueSearch,\n                \"aria-label\": \"Filter expression for label values\",\n                value: valueSearchTerm\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              className: styles.valueListArea,\n              ref: this.valueListsRef,\n              children: selectedLabels.map(label => {\n                var _label$values3, _label$values4, _label$values5;\n\n                return /*#__PURE__*/_jsxs(\"div\", {\n                  role: \"list\",\n                  \"aria-label\": `Values for ${label.name}`,\n                  className: styles.valueListWrapper,\n                  children: [/*#__PURE__*/_jsx(\"div\", {\n                    className: styles.valueTitle,\n                    children: /*#__PURE__*/_jsx(PromLabel, {\n                      name: label.name,\n                      loading: label.loading,\n                      active: label.selected,\n                      hidden: label.hidden //If no facets, we want to show number of all label values\n                      ,\n                      facets: label.facets || ((_label$values3 = label.values) === null || _label$values3 === void 0 ? void 0 : _label$values3.length),\n                      onClick: this.onClickLabel\n                    })\n                  }), /*#__PURE__*/_jsx(FixedSizeList, {\n                    height: Math.min(200, LIST_ITEM_SIZE * (((_label$values4 = label.values) === null || _label$values4 === void 0 ? void 0 : _label$values4.length) || 0)),\n                    itemCount: ((_label$values5 = label.values) === null || _label$values5 === void 0 ? void 0 : _label$values5.length) || 0,\n                    itemSize: 28,\n                    itemKey: i => label.values[i].name,\n                    width: 200,\n                    className: styles.valueList,\n                    children: ({\n                      index,\n                      style\n                    }) => {\n                      var _label$values6;\n\n                      const value = (_label$values6 = label.values) === null || _label$values6 === void 0 ? void 0 : _label$values6[index];\n\n                      if (!value) {\n                        return null;\n                      }\n\n                      return /*#__PURE__*/_jsx(\"div\", {\n                        style: style,\n                        children: /*#__PURE__*/_jsx(PromLabel, {\n                          name: label.name,\n                          value: value === null || value === void 0 ? void 0 : value.name,\n                          active: value === null || value === void 0 ? void 0 : value.selected,\n                          onClick: this.onClickValue,\n                          searchTerm: valueSearchTerm\n                        })\n                      });\n                    }\n                  })]\n                }, label.name);\n              })\n            })]\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.section,\n        children: [_Label4 || (_Label4 = /*#__PURE__*/_jsx(Label, {\n          children: \"4. Resulting selector\"\n        })), /*#__PURE__*/_jsx(\"div\", {\n          \"aria-label\": \"selector\",\n          className: styles.selector,\n          children: selector\n        }), validationStatus && /*#__PURE__*/_jsx(\"div\", {\n          className: styles.validationStatus,\n          children: validationStatus\n        }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n          children: [/*#__PURE__*/_jsx(Button, {\n            \"aria-label\": \"Use selector for query button\",\n            disabled: empty,\n            onClick: this.onClickRunQuery,\n            children: \"Use query\"\n          }), /*#__PURE__*/_jsx(Button, {\n            \"aria-label\": \"Use selector as metrics button\",\n            variant: \"secondary\",\n            disabled: empty,\n            onClick: this.onClickRunRateQuery,\n            children: \"Use as rate query\"\n          }), /*#__PURE__*/_jsx(Button, {\n            \"aria-label\": \"Validate submit button\",\n            variant: \"secondary\",\n            disabled: empty,\n            onClick: this.onClickValidate,\n            children: \"Validate selector\"\n          }), /*#__PURE__*/_jsx(Button, {\n            \"aria-label\": \"Selector clear button\",\n            variant: \"secondary\",\n            onClick: this.onClickClear,\n            children: \"Clear\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: cx(styles.status, (status || error) && styles.statusShowing),\n            children: /*#__PURE__*/_jsx(\"span\", {\n              className: error ? styles.error : '',\n              children: error || status\n            })\n          })]\n        })]\n      })]\n    });\n  }\n\n}\nexport const PrometheusMetricsBrowser = withTheme(UnthemedPrometheusMetricsBrowser);","map":{"version":3,"names":["css","cx","React","FixedSizeList","Button","HorizontalGroup","Input","Label","LoadingPlaceholder","stylesFactory","withTheme","BrowserLabel","PromLabel","escapeLabelValueInExactSelector","escapeLabelValueInRegexSelector","EMPTY_SELECTOR","METRIC_LABEL","LIST_ITEM_SIZE","buildSelector","labels","singleMetric","selectedLabels","label","name","selected","values","length","selectedValues","filter","value","map","push","join","facetLabels","possibleLabels","lastFacetted","possibleValues","existingValues","Set","has","loading","hidden","facets","undefined","getStyles","theme","wrapper","colors","bg2","spacing","sm","list","section","md","selector","typography","fontFamily","monospace","status","xs","textSemiWeak","statusShowing","error","palette","brandDanger","valueList","valueListWrapper","border2","valueListArea","valueTitle","validationStatus","textStrong","UnthemedPrometheusMetricsBrowser","Component","createRef","labelSearchTerm","metricSearchTerm","valueSearchTerm","event","setState","target","state","props","onChange","query","deleteLastUsedLabels","fetchValues","find","l","nextValue","updateLabelState","doFacettingForLabel","v","doFacetting","some","validateSelector","forEach","fetchSeries","updatedFields","cb","componentDidMount","languageProvider","lastUsedLabels","start","then","rawLabels","getLabelKeys","i","arr","includes","storeLastUsedLabels","rawValues","getLabelValues","metricsMetadata","labelValue","meta","details","type","help","console","fetchSeriesLabels","Object","keys","streams","render","styles","metrics","nonMetricLabels","empty","metricCount","onChangeMetricSearch","Math","min","index","style","onClickMetric","onChangeLabelSearch","height","onClickLabel","onChangeValueSearch","valueListsRef","onClickValue","onClickRunQuery","onClickRunRateQuery","onClickValidate","onClickClear","PrometheusMetricsBrowser"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/components/PrometheusMetricsBrowser.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { ChangeEvent } from 'react';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport {\n  Button,\n  HorizontalGroup,\n  Input,\n  Label,\n  LoadingPlaceholder,\n  stylesFactory,\n  withTheme,\n  BrowserLabel as PromLabel,\n} from '@grafana/ui';\n\nimport PromQlLanguageProvider from '../language_provider';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../language_utils';\n\n// Hard limit on labels to render\nconst EMPTY_SELECTOR = '{}';\nconst METRIC_LABEL = '__name__';\nconst LIST_ITEM_SIZE = 25;\n\nexport interface BrowserProps {\n  languageProvider: PromQlLanguageProvider;\n  onChange: (selector: string) => void;\n  theme: GrafanaTheme;\n  autoSelect?: number;\n  hide?: () => void;\n  lastUsedLabels: string[];\n  storeLastUsedLabels: (labels: string[]) => void;\n  deleteLastUsedLabels: () => void;\n}\n\ninterface BrowserState {\n  labels: SelectableLabel[];\n  labelSearchTerm: string;\n  metricSearchTerm: string;\n  status: string;\n  error: string;\n  validationStatus: string;\n  valueSearchTerm: string;\n}\n\ninterface FacettableValue {\n  name: string;\n  selected?: boolean;\n  details?: string;\n}\n\nexport interface SelectableLabel {\n  name: string;\n  selected?: boolean;\n  loading?: boolean;\n  values?: FacettableValue[];\n  hidden?: boolean;\n  facets?: number;\n}\n\nexport function buildSelector(labels: SelectableLabel[]): string {\n  let singleMetric = '';\n  const selectedLabels = [];\n  for (const label of labels) {\n    if ((label.name === METRIC_LABEL || label.selected) && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter((value) => value.selected).map((value) => value.name);\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        if (label.name === METRIC_LABEL) {\n          singleMetric = selectedValues[0];\n        } else {\n          selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n        }\n      }\n    }\n  }\n  return [singleMetric, '{', selectedLabels.join(','), '}'].join('');\n}\n\nexport function facetLabels(\n  labels: SelectableLabel[],\n  possibleLabels: Record<string, string[]>,\n  lastFacetted?: string\n): SelectableLabel[] {\n  return labels.map((label) => {\n    const possibleValues = possibleLabels[label.name];\n    if (possibleValues) {\n      let existingValues: FacettableValue[];\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        // Keep selection in other facets\n        const selectedValues: Set<string> = new Set(\n          label.values?.filter((value) => value.selected).map((value) => value.name) || []\n        );\n        // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n        existingValues = possibleValues.map((value) => ({ name: value, selected: selectedValues.has(value) }));\n      }\n      return {\n        ...label,\n        loading: false,\n        values: existingValues,\n        hidden: !possibleValues,\n        facets: existingValues.length,\n      };\n    }\n\n    // Label is facetted out, hide all values\n    return { ...label, loading: false, hidden: !possibleValues, values: undefined, facets: 0 };\n  });\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  wrapper: css`\n    background-color: ${theme.colors.bg2};\n    padding: ${theme.spacing.sm};\n    width: 100%;\n  `,\n  list: css`\n    margin-top: ${theme.spacing.sm};\n    display: flex;\n    flex-wrap: wrap;\n    max-height: 200px;\n    overflow: auto;\n    align-content: flex-start;\n  `,\n  section: css`\n    & + & {\n      margin: ${theme.spacing.md} 0;\n    }\n    position: relative;\n  `,\n  selector: css`\n    font-family: ${theme.typography.fontFamily.monospace};\n    margin-bottom: ${theme.spacing.sm};\n  `,\n  status: css`\n    padding: ${theme.spacing.xs};\n    color: ${theme.colors.textSemiWeak};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    /* using absolute positioning because flex interferes with ellipsis */\n    position: absolute;\n    width: 50%;\n    right: 0;\n    text-align: right;\n    transition: opacity 100ms linear;\n    opacity: 0;\n  `,\n  statusShowing: css`\n    opacity: 1;\n  `,\n  error: css`\n    color: ${theme.palette.brandDanger};\n  `,\n  valueList: css`\n    margin-right: ${theme.spacing.sm};\n  `,\n  valueListWrapper: css`\n    border-left: 1px solid ${theme.colors.border2};\n    margin: ${theme.spacing.sm} 0;\n    padding: ${theme.spacing.sm} 0 ${theme.spacing.sm} ${theme.spacing.sm};\n  `,\n  valueListArea: css`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${theme.spacing.sm};\n  `,\n  valueTitle: css`\n    margin-left: -${theme.spacing.xs};\n    margin-bottom: ${theme.spacing.sm};\n  `,\n  validationStatus: css`\n    padding: ${theme.spacing.xs};\n    margin-bottom: ${theme.spacing.sm};\n    color: ${theme.colors.textStrong};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n}));\n\n/**\n * TODO #33976: Remove duplicated code. The component is very similar to LokiLabelBrowser.tsx. Check if it's possible\n *              to create a single, generic component.\n */\nexport class UnthemedPrometheusMetricsBrowser extends React.Component<BrowserProps, BrowserState> {\n  valueListsRef = React.createRef<HTMLDivElement>();\n  state: BrowserState = {\n    labels: [] as SelectableLabel[],\n    labelSearchTerm: '',\n    metricSearchTerm: '',\n    status: 'Ready',\n    error: '',\n    validationStatus: '',\n    valueSearchTerm: '',\n  };\n\n  onChangeLabelSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ labelSearchTerm: event.target.value });\n  };\n\n  onChangeMetricSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ metricSearchTerm: event.target.value });\n  };\n\n  onChangeValueSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ valueSearchTerm: event.target.value });\n  };\n\n  onClickRunQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    this.props.onChange(selector);\n  };\n\n  onClickRunRateQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    const query = `rate(${selector}[$__interval])`;\n    this.props.onChange(query);\n  };\n\n  onClickClear = () => {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => ({\n        ...label,\n        values: undefined,\n        selected: false,\n        loading: false,\n        hidden: false,\n        facets: undefined,\n      }));\n      return {\n        labels,\n        labelSearchTerm: '',\n        metricSearchTerm: '',\n        status: '',\n        error: '',\n        validationStatus: '',\n        valueSearchTerm: '',\n      };\n    });\n    this.props.deleteLastUsedLabels();\n    // Get metrics\n    this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n  };\n\n  onClickLabel = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    // Toggle selected state\n    const selected = !label.selected;\n    let nextValue: Partial<SelectableLabel> = { selected };\n    if (label.values && !selected) {\n      // Deselect all values if label was deselected\n      const values = label.values.map((value) => ({ ...value, selected: false }));\n      nextValue = { ...nextValue, facets: 0, values };\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n  };\n\n  onClickValue = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({ ...v, selected: v.name === value ? !v.selected : v.selected }));\n    this.updateLabelState(name, { values }, '', () => this.doFacetting(name));\n  };\n\n  onClickMetric = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    // Finding special metric label\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ metricSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({\n      ...v,\n      selected: v.name === value || v.selected ? !v.selected : v.selected,\n    }));\n    // Toggle selected state of special metrics label\n    const selected = values.some((v) => v.selected);\n    this.updateLabelState(name, { selected, values }, '', () => this.doFacetting(name));\n  };\n\n  onClickValidate = () => {\n    const selector = buildSelector(this.state.labels);\n    this.validateSelector(selector);\n  };\n\n  updateLabelState(name: string, updatedFields: Partial<SelectableLabel>, status = '', cb?: () => void) {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => {\n        if (label.name === name) {\n          return { ...label, ...updatedFields };\n        }\n        return label;\n      });\n      // New status overrides errors\n      const error = status ? '' : state.error;\n      return { labels, status, error, validationStatus: '' };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const { languageProvider, lastUsedLabels } = this.props;\n    if (languageProvider) {\n      const selectedLabels: string[] = lastUsedLabels;\n      languageProvider.start().then(() => {\n        let rawLabels: string[] = languageProvider.getLabelKeys();\n        // Get metrics\n        this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n        // Auto-select previously selected labels\n        const labels: SelectableLabel[] = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: selectedLabels.includes(label),\n          loading: false,\n        }));\n        // Pre-fetch values for selected labels\n        this.setState({ labels }, () => {\n          this.state.labels.forEach((label) => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name: string) {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    const selectedLabels = this.state.labels.filter((label) => label.selected).map((label) => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  doFacetting = (lastFacetted?: string) => {\n    const selector = buildSelector(this.state.labels);\n    if (selector === EMPTY_SELECTOR) {\n      // Clear up facetting\n      const labels: SelectableLabel[] = this.state.labels.map((label) => {\n        return { ...label, facets: 0, values: undefined, hidden: false };\n      });\n      this.setState({ labels }, () => {\n        // Get fresh set of values\n        this.state.labels.forEach(\n          (label) => (label.selected || label.name === METRIC_LABEL) && this.fetchValues(label.name, selector)\n        );\n      });\n    } else {\n      // Do facetting\n      this.fetchSeries(selector, lastFacetted);\n    }\n  };\n\n  async fetchValues(name: string, selector: string) {\n    const { languageProvider } = this.props;\n    this.updateLabelState(name, { loading: true }, `Fetching values for ${name}`);\n    try {\n      let rawValues = await languageProvider.getLabelValues(name);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, { loading: false });\n        return;\n      }\n      const values: FacettableValue[] = [];\n      const { metricsMetadata } = languageProvider;\n      for (const labelValue of rawValues) {\n        const value: FacettableValue = { name: labelValue };\n        // Adding type/help text to metrics\n        if (name === METRIC_LABEL && metricsMetadata) {\n          const meta = metricsMetadata[labelValue];\n          if (meta) {\n            value.details = `(${meta.type}) ${meta.help}`;\n          }\n        }\n        values.push(value);\n      }\n      this.updateLabelState(name, { values, loading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector: string, lastFacetted?: string) {\n    const { languageProvider } = this.props;\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, { loading: true }, `Facetting labels for ${selector}`);\n    }\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, { loading: false });\n        }\n        return;\n      }\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({ error: `Empty results, no matching label for ${selector}` });\n        return;\n      }\n      const labels: SelectableLabel[] = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({ labels, error: '' });\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, { loading: false });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector: string) {\n    const { languageProvider } = this.props;\n    this.setState({ validationStatus: `Validating selector ${selector}`, error: '' });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({ validationStatus: `Selector is valid (${streams.length} series found)` });\n  }\n\n  render() {\n    const { theme } = this.props;\n    const { labels, labelSearchTerm, metricSearchTerm, status, error, validationStatus, valueSearchTerm } = this.state;\n    const styles = getStyles(theme);\n    if (labels.length === 0) {\n      return (\n        <div className={styles.wrapper}>\n          <LoadingPlaceholder text=\"Loading labels...\" />\n        </div>\n      );\n    }\n\n    // Filter metrics\n    let metrics = labels.find((label) => label.name === METRIC_LABEL);\n    if (metrics && metricSearchTerm) {\n      metrics = {\n        ...metrics,\n        values: metrics.values?.filter((value) => value.selected || value.name.includes(metricSearchTerm)),\n      };\n    }\n\n    // Filter labels\n    let nonMetricLabels = labels.filter((label) => !label.hidden && label.name !== METRIC_LABEL);\n    if (labelSearchTerm) {\n      nonMetricLabels = nonMetricLabels.filter((label) => label.selected || label.name.includes(labelSearchTerm));\n    }\n\n    // Filter non-metric label values\n    let selectedLabels = nonMetricLabels.filter((label) => label.selected && label.values);\n    if (valueSearchTerm) {\n      selectedLabels = selectedLabels.map((label) => ({\n        ...label,\n        values: label.values?.filter((value) => value.selected || value.name.includes(valueSearchTerm)),\n      }));\n    }\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n    const metricCount = metrics?.values?.length || 0;\n\n    return (\n      <div className={styles.wrapper}>\n        <HorizontalGroup align=\"flex-start\" spacing=\"lg\">\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once a metric is selected only possible labels are shown.\">1. Select a metric</Label>\n              <div>\n                <Input\n                  onChange={this.onChangeMetricSearch}\n                  aria-label=\"Filter expression for metric\"\n                  value={metricSearchTerm}\n                />\n              </div>\n              <div role=\"list\" className={styles.valueListWrapper}>\n                <FixedSizeList\n                  height={Math.min(450, metricCount * LIST_ITEM_SIZE)}\n                  itemCount={metricCount}\n                  itemSize={LIST_ITEM_SIZE}\n                  itemKey={(i) => (metrics!.values as FacettableValue[])[i].name}\n                  width={300}\n                  className={styles.valueList}\n                >\n                  {({ index, style }) => {\n                    const value = metrics?.values?.[index];\n                    if (!value) {\n                      return null;\n                    }\n                    return (\n                      <div style={style}>\n                        <PromLabel\n                          name={metrics!.name}\n                          value={value?.name}\n                          title={value.details}\n                          active={value?.selected}\n                          onClick={this.onClickMetric}\n                          searchTerm={metricSearchTerm}\n                        />\n                      </div>\n                    );\n                  }}\n                </FixedSizeList>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once label values are selected, only possible label combinations are shown.\">\n                2. Select labels to search in\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeLabelSearch}\n                  aria-label=\"Filter expression for label\"\n                  value={labelSearchTerm}\n                />\n              </div>\n              {/* Using fixed height here to prevent jumpy layout */}\n              <div className={styles.list} style={{ height: 120 }}>\n                {nonMetricLabels.map((label) => (\n                  <PromLabel\n                    key={label.name}\n                    name={label.name}\n                    loading={label.loading}\n                    active={label.selected}\n                    hidden={label.hidden}\n                    facets={label.facets}\n                    onClick={this.onClickLabel}\n                    searchTerm={labelSearchTerm}\n                  />\n                ))}\n              </div>\n            </div>\n            <div className={styles.section}>\n              <Label description=\"Use the search field to find values across selected labels.\">\n                3. Select (multiple) values for your labels\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeValueSearch}\n                  aria-label=\"Filter expression for label values\"\n                  value={valueSearchTerm}\n                />\n              </div>\n              <div className={styles.valueListArea} ref={this.valueListsRef}>\n                {selectedLabels.map((label) => (\n                  <div\n                    role=\"list\"\n                    key={label.name}\n                    aria-label={`Values for ${label.name}`}\n                    className={styles.valueListWrapper}\n                  >\n                    <div className={styles.valueTitle}>\n                      <PromLabel\n                        name={label.name}\n                        loading={label.loading}\n                        active={label.selected}\n                        hidden={label.hidden}\n                        //If no facets, we want to show number of all label values\n                        facets={label.facets || label.values?.length}\n                        onClick={this.onClickLabel}\n                      />\n                    </div>\n                    <FixedSizeList\n                      height={Math.min(200, LIST_ITEM_SIZE * (label.values?.length || 0))}\n                      itemCount={label.values?.length || 0}\n                      itemSize={28}\n                      itemKey={(i) => (label.values as FacettableValue[])[i].name}\n                      width={200}\n                      className={styles.valueList}\n                    >\n                      {({ index, style }) => {\n                        const value = label.values?.[index];\n                        if (!value) {\n                          return null;\n                        }\n                        return (\n                          <div style={style}>\n                            <PromLabel\n                              name={label.name}\n                              value={value?.name}\n                              active={value?.selected}\n                              onClick={this.onClickValue}\n                              searchTerm={valueSearchTerm}\n                            />\n                          </div>\n                        );\n                      }}\n                    </FixedSizeList>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </HorizontalGroup>\n\n        <div className={styles.section}>\n          <Label>4. Resulting selector</Label>\n          <div aria-label=\"selector\" className={styles.selector}>\n            {selector}\n          </div>\n          {validationStatus && <div className={styles.validationStatus}>{validationStatus}</div>}\n          <HorizontalGroup>\n            <Button aria-label=\"Use selector for query button\" disabled={empty} onClick={this.onClickRunQuery}>\n              Use query\n            </Button>\n            <Button\n              aria-label=\"Use selector as metrics button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickRunRateQuery}\n            >\n              Use as rate query\n            </Button>\n            <Button\n              aria-label=\"Validate submit button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickValidate}\n            >\n              Validate selector\n            </Button>\n            <Button aria-label=\"Selector clear button\" variant=\"secondary\" onClick={this.onClickClear}>\n              Clear\n            </Button>\n            <div className={cx(styles.status, (status || error) && styles.statusShowing)}>\n              <span className={error ? styles.error : ''}>{error || status}</span>\n            </div>\n          </HorizontalGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const PrometheusMetricsBrowser = withTheme(UnthemedPrometheusMetricsBrowser);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}