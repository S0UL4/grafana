{"ast":null,"code":"var _br, _strong, _br2;\n\nimport React from 'react';\nimport { FALLBACK_COLOR, getDisplayProcessor, getFieldDisplayName } from '@grafana/data';\nimport { SeriesTableRow, useTheme2 } from '@grafana/ui';\nimport { findNextStateIndex, fmtDuration } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const StateTimelineTooltip = ({\n  data,\n  alignedData,\n  seriesIdx,\n  datapointIdx,\n  timeZone\n}) => {\n  var _field$state;\n\n  const theme = useTheme2();\n  const xField = alignedData.fields[0];\n  const xFieldFmt = xField.display || getDisplayProcessor({\n    field: xField,\n    timeZone,\n    theme\n  });\n  const field = alignedData.fields[seriesIdx];\n  const dataFrameFieldIndex = (_field$state = field.state) === null || _field$state === void 0 ? void 0 : _field$state.origin;\n  const fieldFmt = field.display || getDisplayProcessor({\n    field,\n    timeZone,\n    theme\n  });\n  const value = field.values.get(datapointIdx);\n  const display = fieldFmt(value);\n  const fieldDisplayName = dataFrameFieldIndex ? getFieldDisplayName(data[dataFrameFieldIndex.frameIndex].fields[dataFrameFieldIndex.fieldIndex], data[dataFrameFieldIndex.frameIndex], data) : null;\n  const nextStateIdx = findNextStateIndex(field, datapointIdx);\n  let nextStateTs;\n\n  if (nextStateIdx) {\n    nextStateTs = xField.values.get(nextStateIdx);\n  }\n\n  const stateTs = xField.values.get(datapointIdx);\n  let toFragment = null;\n  let durationFragment = null;\n\n  if (nextStateTs) {\n    const duration = nextStateTs && fmtDuration(nextStateTs - stateTs);\n    durationFragment = /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_br || (_br = /*#__PURE__*/_jsx(\"br\", {})), _strong || (_strong = /*#__PURE__*/_jsx(\"strong\", {\n        children: \"Duration:\"\n      })), \" \", duration]\n    });\n    toFragment = /*#__PURE__*/_jsxs(_Fragment, {\n      children: [' to', \" \", /*#__PURE__*/_jsx(\"strong\", {\n        children: xFieldFmt(xField.values.get(nextStateIdx)).text\n      })]\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      fontSize: theme.typography.bodySmall.fontSize\n    },\n    children: [fieldDisplayName, _br2 || (_br2 = /*#__PURE__*/_jsx(\"br\", {})), /*#__PURE__*/_jsx(SeriesTableRow, {\n      label: display.text,\n      color: display.color || FALLBACK_COLOR,\n      isActive: true\n    }), \"From \", /*#__PURE__*/_jsx(\"strong\", {\n      children: xFieldFmt(xField.values.get(datapointIdx)).text\n    }), toFragment, durationFragment]\n  });\n};\nStateTimelineTooltip.displayName = 'StateTimelineTooltip';","map":{"version":3,"names":["React","FALLBACK_COLOR","getDisplayProcessor","getFieldDisplayName","SeriesTableRow","useTheme2","findNextStateIndex","fmtDuration","StateTimelineTooltip","data","alignedData","seriesIdx","datapointIdx","timeZone","theme","xField","fields","xFieldFmt","display","field","dataFrameFieldIndex","state","origin","fieldFmt","value","values","get","fieldDisplayName","frameIndex","fieldIndex","nextStateIdx","nextStateTs","stateTs","toFragment","durationFragment","duration","text","fontSize","typography","bodySmall","color","displayName"],"sources":["/home/soula/grafana/public/app/plugins/panel/state-timeline/StateTimelineTooltip.tsx"],"sourcesContent":["import React from 'react';\n\nimport { DataFrame, FALLBACK_COLOR, getDisplayProcessor, getFieldDisplayName, TimeZone } from '@grafana/data';\nimport { SeriesTableRow, useTheme2 } from '@grafana/ui';\n\nimport { findNextStateIndex, fmtDuration } from './utils';\n\ninterface StateTimelineTooltipProps {\n  data: DataFrame[];\n  alignedData: DataFrame;\n  seriesIdx: number;\n  datapointIdx: number;\n  timeZone: TimeZone;\n}\n\nexport const StateTimelineTooltip: React.FC<StateTimelineTooltipProps> = ({\n  data,\n  alignedData,\n  seriesIdx,\n  datapointIdx,\n  timeZone,\n}) => {\n  const theme = useTheme2();\n\n  const xField = alignedData.fields[0];\n  const xFieldFmt = xField.display || getDisplayProcessor({ field: xField, timeZone, theme });\n\n  const field = alignedData.fields[seriesIdx!];\n\n  const dataFrameFieldIndex = field.state?.origin;\n  const fieldFmt = field.display || getDisplayProcessor({ field, timeZone, theme });\n  const value = field.values.get(datapointIdx!);\n  const display = fieldFmt(value);\n  const fieldDisplayName = dataFrameFieldIndex\n    ? getFieldDisplayName(\n        data[dataFrameFieldIndex.frameIndex].fields[dataFrameFieldIndex.fieldIndex],\n        data[dataFrameFieldIndex.frameIndex],\n        data\n      )\n    : null;\n\n  const nextStateIdx = findNextStateIndex(field, datapointIdx!);\n  let nextStateTs;\n  if (nextStateIdx) {\n    nextStateTs = xField.values.get(nextStateIdx!);\n  }\n\n  const stateTs = xField.values.get(datapointIdx!);\n\n  let toFragment = null;\n  let durationFragment = null;\n\n  if (nextStateTs) {\n    const duration = nextStateTs && fmtDuration(nextStateTs - stateTs);\n    durationFragment = (\n      <>\n        <br />\n        <strong>Duration:</strong> {duration}\n      </>\n    );\n    toFragment = (\n      <>\n        {' to'} <strong>{xFieldFmt(xField.values.get(nextStateIdx!)).text}</strong>\n      </>\n    );\n  }\n\n  return (\n    <div style={{ fontSize: theme.typography.bodySmall.fontSize }}>\n      {fieldDisplayName}\n      <br />\n      <SeriesTableRow label={display.text} color={display.color || FALLBACK_COLOR} isActive />\n      From <strong>{xFieldFmt(xField.values.get(datapointIdx!)).text}</strong>\n      {toFragment}\n      {durationFragment}\n    </div>\n  );\n};\n\nStateTimelineTooltip.displayName = 'StateTimelineTooltip';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}