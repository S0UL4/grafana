{"ast":null,"code":"var _Alert;\n\nimport { css } from '@emotion/css';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Alert, Button, ConfirmModal, TextArea, HorizontalGroup, Field, Form, useStyles2 } from '@grafana/ui';\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { deleteAlertManagerConfigAction, fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function AlertmanagerConfig() {\n  var _Button;\n\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const [showConfirmDeleteAMConfig, setShowConfirmDeleteAMConfig] = useState(false);\n  const {\n    loading: isDeleting\n  } = useUnifiedAlertingSelector(state => state.deleteAMConfig);\n  const {\n    loading: isSaving\n  } = useUnifiedAlertingSelector(state => state.saveAMConfig);\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) : false;\n  const styles = useStyles2(getStyles);\n  const configRequests = useUnifiedAlertingSelector(state => state.amConfigs);\n  const {\n    result: config,\n    loading: isLoadingConfig,\n    error: loadingError\n  } = alertManagerSourceName && configRequests[alertManagerSourceName] || initialAsyncRequestState;\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  const resetConfig = () => {\n    if (alertManagerSourceName) {\n      dispatch(deleteAlertManagerConfigAction(alertManagerSourceName));\n    }\n\n    setShowConfirmDeleteAMConfig(false);\n  };\n\n  const defaultValues = useMemo(() => ({\n    configJSON: config ? JSON.stringify(config, null, 2) : ''\n  }), [config]);\n  const loading = isDeleting || isLoadingConfig || isSaving;\n\n  const onSubmit = values => {\n    if (alertManagerSourceName && config) {\n      dispatch(updateAlertManagerConfigAction({\n        newConfig: JSON.parse(values.configJSON),\n        oldConfig: config,\n        alertManagerSourceName,\n        successMessage: 'Alertmanager configuration updated.',\n        refetch: true\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsx(AlertManagerPicker, {\n      current: alertManagerSourceName,\n      onChange: setAlertManagerSourceName,\n      dataSources: alertManagers\n    }), loadingError && !loading && /*#__PURE__*/_jsx(Alert, {\n      severity: \"error\",\n      title: \"Error loading Alertmanager configuration\",\n      children: loadingError.message || 'Unknown error.'\n    }), isDeleting && alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME && (_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n      severity: \"info\",\n      title: \"Resetting Alertmanager configuration\",\n      children: \"It might take a while...\"\n    }))), alertManagerSourceName && config && /*#__PURE__*/_jsx(Form, {\n      defaultValues: defaultValues,\n      onSubmit: onSubmit,\n      children: ({\n        register,\n        errors\n      }) => {\n        var _errors$configJSON;\n\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [!readOnly && /*#__PURE__*/_jsx(Field, {\n            disabled: loading,\n            label: \"Configuration\",\n            invalid: !!errors.configJSON,\n            error: (_errors$configJSON = errors.configJSON) === null || _errors$configJSON === void 0 ? void 0 : _errors$configJSON.message,\n            children: /*#__PURE__*/_jsx(TextArea, Object.assign({}, register('configJSON', {\n              required: {\n                value: true,\n                message: 'Required.'\n              },\n              validate: v => {\n                try {\n                  JSON.parse(v);\n                  return true;\n                } catch (e) {\n                  return e instanceof Error ? e.message : 'Invalid JSON.';\n                }\n              }\n            }), {\n              id: \"configuration\",\n              rows: 25\n            }))\n          }), readOnly && /*#__PURE__*/_jsx(Field, {\n            label: \"Configuration\",\n            children: /*#__PURE__*/_jsx(\"pre\", {\n              \"data-testid\": \"readonly-config\",\n              children: defaultValues.configJSON\n            })\n          }), !readOnly && /*#__PURE__*/_jsxs(HorizontalGroup, {\n            children: [_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n              type: \"submit\",\n              variant: \"primary\",\n              disabled: loading,\n              children: \"Save\"\n            })), /*#__PURE__*/_jsx(Button, {\n              type: \"button\",\n              disabled: loading,\n              variant: \"destructive\",\n              onClick: () => setShowConfirmDeleteAMConfig(true),\n              children: \"Reset configuration\"\n            })]\n          }), !!showConfirmDeleteAMConfig && /*#__PURE__*/_jsx(ConfirmModal, {\n            isOpen: true,\n            title: \"Reset Alertmanager configuration\",\n            body: `Are you sure you want to reset configuration ${alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ? 'for the Grafana Alertmanager' : `for \"${alertManagerSourceName}\"`}? Contact points and notification policies will be reset to their defaults.`,\n            confirmText: \"Yes, reset configuration\",\n            onConfirm: resetConfig,\n            onDismiss: () => setShowConfirmDeleteAMConfig(false)\n          })]\n        });\n      }\n    }, defaultValues.configJSON)]\n  });\n}\n\nconst getStyles = theme => ({\n  container: css`\n    margin-bottom: ${theme.spacing(4)};\n  `\n});","map":{"version":3,"names":["css","React","useEffect","useState","useMemo","useDispatch","Alert","Button","ConfirmModal","TextArea","HorizontalGroup","Field","Form","useStyles2","useAlertManagerSourceName","useAlertManagersByPermission","useUnifiedAlertingSelector","deleteAlertManagerConfigAction","fetchAlertManagerConfigAction","updateAlertManagerConfigAction","GRAFANA_RULES_SOURCE_NAME","isVanillaPrometheusAlertManagerDataSource","initialAsyncRequestState","AlertManagerPicker","AlertmanagerConfig","dispatch","alertManagers","alertManagerSourceName","setAlertManagerSourceName","showConfirmDeleteAMConfig","setShowConfirmDeleteAMConfig","loading","isDeleting","state","deleteAMConfig","isSaving","saveAMConfig","readOnly","styles","getStyles","configRequests","amConfigs","result","config","isLoadingConfig","error","loadingError","resetConfig","defaultValues","configJSON","JSON","stringify","onSubmit","values","newConfig","parse","oldConfig","successMessage","refetch","container","message","register","errors","required","value","validate","v","e","Error","theme","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/admin/AlertmanagerConfig.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ConfirmModal, TextArea, HorizontalGroup, Field, Form, useStyles2 } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport {\n  deleteAlertManagerConfigAction,\n  fetchAlertManagerConfigAction,\n  updateAlertManagerConfigAction,\n} from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\n\ninterface FormValues {\n  configJSON: string;\n}\n\nexport default function AlertmanagerConfig(): JSX.Element {\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const [showConfirmDeleteAMConfig, setShowConfirmDeleteAMConfig] = useState(false);\n  const { loading: isDeleting } = useUnifiedAlertingSelector((state) => state.deleteAMConfig);\n  const { loading: isSaving } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) : false;\n  const styles = useStyles2(getStyles);\n\n  const configRequests = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const {\n    result: config,\n    loading: isLoadingConfig,\n    error: loadingError,\n  } = (alertManagerSourceName && configRequests[alertManagerSourceName]) || initialAsyncRequestState;\n\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  const resetConfig = () => {\n    if (alertManagerSourceName) {\n      dispatch(deleteAlertManagerConfigAction(alertManagerSourceName));\n    }\n    setShowConfirmDeleteAMConfig(false);\n  };\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      configJSON: config ? JSON.stringify(config, null, 2) : '',\n    }),\n    [config]\n  );\n\n  const loading = isDeleting || isLoadingConfig || isSaving;\n\n  const onSubmit = (values: FormValues) => {\n    if (alertManagerSourceName && config) {\n      dispatch(\n        updateAlertManagerConfigAction({\n          newConfig: JSON.parse(values.configJSON),\n          oldConfig: config,\n          alertManagerSourceName,\n          successMessage: 'Alertmanager configuration updated.',\n          refetch: true,\n        })\n      );\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      {loadingError && !loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager configuration\">\n          {loadingError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {isDeleting && alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME && (\n        <Alert severity=\"info\" title=\"Resetting Alertmanager configuration\">\n          It might take a while...\n        </Alert>\n      )}\n      {alertManagerSourceName && config && (\n        <Form defaultValues={defaultValues} onSubmit={onSubmit} key={defaultValues.configJSON}>\n          {({ register, errors }) => (\n            <>\n              {!readOnly && (\n                <Field\n                  disabled={loading}\n                  label=\"Configuration\"\n                  invalid={!!errors.configJSON}\n                  error={errors.configJSON?.message}\n                >\n                  <TextArea\n                    {...register('configJSON', {\n                      required: { value: true, message: 'Required.' },\n                      validate: (v) => {\n                        try {\n                          JSON.parse(v);\n                          return true;\n                        } catch (e) {\n                          return e instanceof Error ? e.message : 'Invalid JSON.';\n                        }\n                      },\n                    })}\n                    id=\"configuration\"\n                    rows={25}\n                  />\n                </Field>\n              )}\n              {readOnly && (\n                <Field label=\"Configuration\">\n                  <pre data-testid=\"readonly-config\">{defaultValues.configJSON}</pre>\n                </Field>\n              )}\n              {!readOnly && (\n                <HorizontalGroup>\n                  <Button type=\"submit\" variant=\"primary\" disabled={loading}>\n                    Save\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    disabled={loading}\n                    variant=\"destructive\"\n                    onClick={() => setShowConfirmDeleteAMConfig(true)}\n                  >\n                    Reset configuration\n                  </Button>\n                </HorizontalGroup>\n              )}\n              {!!showConfirmDeleteAMConfig && (\n                <ConfirmModal\n                  isOpen={true}\n                  title=\"Reset Alertmanager configuration\"\n                  body={`Are you sure you want to reset configuration ${\n                    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME\n                      ? 'for the Grafana Alertmanager'\n                      : `for \"${alertManagerSourceName}\"`\n                  }? Contact points and notification policies will be reset to their defaults.`}\n                  confirmText=\"Yes, reset configuration\"\n                  onConfirm={resetConfig}\n                  onDismiss={() => setShowConfirmDeleteAMConfig(false)}\n                />\n              )}\n            </>\n          )}\n        </Form>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}