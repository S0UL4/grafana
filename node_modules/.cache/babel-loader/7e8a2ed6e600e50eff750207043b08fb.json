{"ast":null,"code":"import { useReducer } from 'react';\nimport { useDebounce } from 'react-use';\nimport { locationUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { MOVE_SELECTION_DOWN, MOVE_SELECTION_UP } from '../reducers/actionTypes';\nimport { dashboardsSearchState, searchReducer } from '../reducers/dashboardSearch';\nimport { DashboardSearchItemType } from '../types';\nimport { findSelected } from '../utils';\nimport { reportDashboardListViewed } from './useManageDashboards';\nimport { useSearch } from './useSearch';\nimport { useShowDashboardPreviews } from './useShowDashboardPreviews';\nexport const useDashboardSearch = (query, onCloseSearch) => {\n  var _query$sort2, _query$query, _query$tag2;\n\n  const reducer = useReducer(searchReducer, dashboardsSearchState);\n  const {\n    showPreviews,\n    setShowPreviews,\n    previewFeatureEnabled\n  } = useShowDashboardPreviews();\n  const {\n    state: {\n      results,\n      loading\n    },\n    onToggleSection,\n    dispatch\n  } = useSearch(query, reducer, {\n    queryParsing: true\n  });\n  useDebounce(() => {\n    var _query$sort, _query$tag;\n\n    reportDashboardListViewed('dashboard_search', showPreviews, previewFeatureEnabled, {\n      layout: query.layout,\n      starred: query.starred,\n      sortValue: (_query$sort = query.sort) === null || _query$sort === void 0 ? void 0 : _query$sort.value,\n      query: query.query,\n      tagCount: (_query$tag = query.tag) === null || _query$tag === void 0 ? void 0 : _query$tag.length\n    });\n  }, 1000, [showPreviews, previewFeatureEnabled, query.layout, query.starred, (_query$sort2 = query.sort) === null || _query$sort2 === void 0 ? void 0 : _query$sort2.value, (_query$query = query.query) === null || _query$query === void 0 ? void 0 : _query$query.length, (_query$tag2 = query.tag) === null || _query$tag2 === void 0 ? void 0 : _query$tag2.length]);\n\n  const onKeyDown = event => {\n    switch (event.key) {\n      case 'Escape':\n        onCloseSearch();\n        break;\n\n      case 'ArrowUp':\n        dispatch({\n          type: MOVE_SELECTION_UP\n        });\n        break;\n\n      case 'ArrowDown':\n        dispatch({\n          type: MOVE_SELECTION_DOWN\n        });\n        break;\n\n      case 'Enter':\n        const selectedItem = findSelected(results);\n\n        if (selectedItem) {\n          if (selectedItem.type === DashboardSearchItemType.DashFolder) {\n            onToggleSection(selectedItem);\n          } else {\n            locationService.push(locationUtil.stripBaseFromUrl(selectedItem.url)); // Delay closing to prevent current page flicker\n\n            setTimeout(onCloseSearch, 0);\n          }\n        }\n\n    }\n  };\n\n  return {\n    results,\n    loading,\n    onToggleSection,\n    onKeyDown,\n    showPreviews,\n    setShowPreviews\n  };\n};","map":{"version":3,"names":["useReducer","useDebounce","locationUtil","locationService","MOVE_SELECTION_DOWN","MOVE_SELECTION_UP","dashboardsSearchState","searchReducer","DashboardSearchItemType","findSelected","reportDashboardListViewed","useSearch","useShowDashboardPreviews","useDashboardSearch","query","onCloseSearch","reducer","showPreviews","setShowPreviews","previewFeatureEnabled","state","results","loading","onToggleSection","dispatch","queryParsing","layout","starred","sortValue","sort","value","tagCount","tag","length","onKeyDown","event","key","type","selectedItem","DashFolder","push","stripBaseFromUrl","url","setTimeout"],"sources":["/home/soula/grafana/public/app/features/search/hooks/useDashboardSearch.ts"],"sourcesContent":["import { KeyboardEvent, useReducer } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { locationUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { MOVE_SELECTION_DOWN, MOVE_SELECTION_UP } from '../reducers/actionTypes';\nimport { dashboardsSearchState, DashboardsSearchState, searchReducer } from '../reducers/dashboardSearch';\nimport { DashboardQuery, DashboardSearchItemType, DashboardSection } from '../types';\nimport { findSelected } from '../utils';\n\nimport { reportDashboardListViewed } from './useManageDashboards';\nimport { useSearch } from './useSearch';\nimport { useShowDashboardPreviews } from './useShowDashboardPreviews';\n\nexport const useDashboardSearch = (query: DashboardQuery, onCloseSearch: () => void) => {\n  const reducer = useReducer(searchReducer, dashboardsSearchState);\n  const { showPreviews, setShowPreviews, previewFeatureEnabled } = useShowDashboardPreviews();\n  const {\n    state: { results, loading },\n    onToggleSection,\n    dispatch,\n  } = useSearch<DashboardsSearchState>(query, reducer, { queryParsing: true });\n\n  useDebounce(\n    () => {\n      reportDashboardListViewed('dashboard_search', showPreviews, previewFeatureEnabled, {\n        layout: query.layout,\n        starred: query.starred,\n        sortValue: query.sort?.value,\n        query: query.query,\n        tagCount: query.tag?.length,\n      });\n    },\n    1000,\n    [\n      showPreviews,\n      previewFeatureEnabled,\n      query.layout,\n      query.starred,\n      query.sort?.value,\n      query.query?.length,\n      query.tag?.length,\n    ]\n  );\n\n  const onKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    switch (event.key) {\n      case 'Escape':\n        onCloseSearch();\n        break;\n      case 'ArrowUp':\n        dispatch({ type: MOVE_SELECTION_UP });\n        break;\n      case 'ArrowDown':\n        dispatch({ type: MOVE_SELECTION_DOWN });\n        break;\n      case 'Enter':\n        const selectedItem = findSelected(results);\n        if (selectedItem) {\n          if (selectedItem.type === DashboardSearchItemType.DashFolder) {\n            onToggleSection(selectedItem as DashboardSection);\n          } else {\n            locationService.push(locationUtil.stripBaseFromUrl(selectedItem.url));\n            // Delay closing to prevent current page flicker\n            setTimeout(onCloseSearch, 0);\n          }\n        }\n    }\n  };\n\n  return {\n    results,\n    loading,\n    onToggleSection,\n    onKeyDown,\n    showPreviews,\n    setShowPreviews,\n  };\n};\n"],"mappings":"AAAA,SAAwBA,UAAxB,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,WAA5B;AAEA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,SAASC,mBAAT,EAA8BC,iBAA9B,QAAuD,yBAAvD;AACA,SAASC,qBAAT,EAAuDC,aAAvD,QAA4E,6BAA5E;AACA,SAAyBC,uBAAzB,QAA0E,UAA1E;AACA,SAASC,YAAT,QAA6B,UAA7B;AAEA,SAASC,yBAAT,QAA0C,uBAA1C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAwBC,aAAxB,KAAsD;EAAA;;EACtF,MAAMC,OAAO,GAAGhB,UAAU,CAACO,aAAD,EAAgBD,qBAAhB,CAA1B;EACA,MAAM;IAAEW,YAAF;IAAgBC,eAAhB;IAAiCC;EAAjC,IAA2DP,wBAAwB,EAAzF;EACA,MAAM;IACJQ,KAAK,EAAE;MAAEC,OAAF;MAAWC;IAAX,CADH;IAEJC,eAFI;IAGJC;EAHI,IAIFb,SAAS,CAAwBG,KAAxB,EAA+BE,OAA/B,EAAwC;IAAES,YAAY,EAAE;EAAhB,CAAxC,CAJb;EAMAxB,WAAW,CACT,MAAM;IAAA;;IACJS,yBAAyB,CAAC,kBAAD,EAAqBO,YAArB,EAAmCE,qBAAnC,EAA0D;MACjFO,MAAM,EAAEZ,KAAK,CAACY,MADmE;MAEjFC,OAAO,EAAEb,KAAK,CAACa,OAFkE;MAGjFC,SAAS,iBAAEd,KAAK,CAACe,IAAR,gDAAE,YAAYC,KAH0D;MAIjFhB,KAAK,EAAEA,KAAK,CAACA,KAJoE;MAKjFiB,QAAQ,gBAAEjB,KAAK,CAACkB,GAAR,+CAAE,WAAWC;IAL4D,CAA1D,CAAzB;EAOD,CATQ,EAUT,IAVS,EAWT,CACEhB,YADF,EAEEE,qBAFF,EAGEL,KAAK,CAACY,MAHR,EAIEZ,KAAK,CAACa,OAJR,kBAKEb,KAAK,CAACe,IALR,iDAKE,aAAYC,KALd,kBAMEhB,KAAK,CAACA,KANR,iDAME,aAAamB,MANf,iBAOEnB,KAAK,CAACkB,GAPR,gDAOE,YAAWC,MAPb,CAXS,CAAX;;EAsBA,MAAMC,SAAS,GAAIC,KAAD,IAA4C;IAC5D,QAAQA,KAAK,CAACC,GAAd;MACE,KAAK,QAAL;QACErB,aAAa;QACb;;MACF,KAAK,SAAL;QACES,QAAQ,CAAC;UAAEa,IAAI,EAAEhC;QAAR,CAAD,CAAR;QACA;;MACF,KAAK,WAAL;QACEmB,QAAQ,CAAC;UAAEa,IAAI,EAAEjC;QAAR,CAAD,CAAR;QACA;;MACF,KAAK,OAAL;QACE,MAAMkC,YAAY,GAAG7B,YAAY,CAACY,OAAD,CAAjC;;QACA,IAAIiB,YAAJ,EAAkB;UAChB,IAAIA,YAAY,CAACD,IAAb,KAAsB7B,uBAAuB,CAAC+B,UAAlD,EAA8D;YAC5DhB,eAAe,CAACe,YAAD,CAAf;UACD,CAFD,MAEO;YACLnC,eAAe,CAACqC,IAAhB,CAAqBtC,YAAY,CAACuC,gBAAb,CAA8BH,YAAY,CAACI,GAA3C,CAArB,EADK,CAEL;;YACAC,UAAU,CAAC5B,aAAD,EAAgB,CAAhB,CAAV;UACD;QACF;;IApBL;EAsBD,CAvBD;;EAyBA,OAAO;IACLM,OADK;IAELC,OAFK;IAGLC,eAHK;IAILW,SAJK;IAKLjB,YALK;IAMLC;EANK,CAAP;AAQD,CAhEM"},"metadata":{},"sourceType":"module"}