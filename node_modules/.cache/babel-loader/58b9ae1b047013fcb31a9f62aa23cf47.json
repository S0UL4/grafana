{"ast":null,"code":"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { CollapsableSection, Field, Input, RadioButtonGroup, TagsInput } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { updateTimeZoneDashboard, updateWeekStartDashboard } from 'app/features/dashboard/state/actions';\nimport { DeleteDashboardButton } from '../DeleteDashboard/DeleteDashboardButton';\nimport { PreviewSettings } from './PreviewSettings';\nimport { TimePickerSettings } from './TimePickerSettings';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst GRAPH_TOOLTIP_OPTIONS = [{\n  value: 0,\n  label: 'Default'\n}, {\n  value: 1,\n  label: 'Shared crosshair'\n}, {\n  value: 2,\n  label: 'Shared Tooltip'\n}];\nexport function GeneralSettingsUnconnected({\n  dashboard,\n  updateTimeZone,\n  updateWeekStart\n}) {\n  const [renderCounter, setRenderCounter] = useState(0);\n\n  const onFolderChange = folder => {\n    dashboard.meta.folderId = folder.id;\n    dashboard.meta.folderTitle = folder.title;\n    dashboard.meta.hasUnsavedFolderChange = true;\n  };\n\n  const onBlur = event => {\n    dashboard[event.currentTarget.name] = event.currentTarget.value;\n  };\n\n  const onTooltipChange = graphTooltip => {\n    dashboard.graphTooltip = graphTooltip;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onRefreshIntervalChange = intervals => {\n    dashboard.timepicker.refresh_intervals = intervals.filter(i => i.trim() !== '');\n  };\n\n  const onNowDelayChange = nowDelay => {\n    dashboard.timepicker.nowDelay = nowDelay;\n  };\n\n  const onHideTimePickerChange = hide => {\n    dashboard.timepicker.hidden = hide;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onLiveNowChange = v => {\n    dashboard.liveNow = v;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onTimeZoneChange = timeZone => {\n    dashboard.timezone = timeZone;\n    setRenderCounter(renderCounter + 1);\n    updateTimeZone(timeZone);\n  };\n\n  const onWeekStartChange = weekStart => {\n    dashboard.weekStart = weekStart;\n    setRenderCounter(renderCounter + 1);\n    updateWeekStart(weekStart);\n  };\n\n  const onTagsChange = tags => {\n    dashboard.tags = tags;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onEditableChange = value => {\n    dashboard.editable = value;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const editableOptions = [{\n    label: 'Editable',\n    value: true\n  }, {\n    label: 'Read-only',\n    value: false\n  }];\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      maxWidth: '600px'\n    },\n    children: [/*#__PURE__*/_jsx(\"h3\", {\n      className: \"dashboard-settings__header\",\n      \"aria-label\": selectors.pages.Dashboard.Settings.General.title,\n      children: \"General\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"gf-form-group\",\n      children: [/*#__PURE__*/_jsx(Field, {\n        label: \"Name\",\n        children: /*#__PURE__*/_jsx(Input, {\n          id: \"title-input\",\n          name: \"title\",\n          onBlur: onBlur,\n          defaultValue: dashboard.title\n        })\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Description\",\n        children: /*#__PURE__*/_jsx(Input, {\n          id: \"description-input\",\n          name: \"description\",\n          onBlur: onBlur,\n          defaultValue: dashboard.description\n        })\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Tags\",\n        children: /*#__PURE__*/_jsx(TagsInput, {\n          id: \"tags-input\",\n          tags: dashboard.tags,\n          onChange: onTagsChange\n        })\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Folder\",\n        children: /*#__PURE__*/_jsx(FolderPicker, {\n          inputId: \"dashboard-folder-input\",\n          initialTitle: dashboard.meta.folderTitle,\n          initialFolderId: dashboard.meta.folderId,\n          onChange: onFolderChange,\n          enableCreateNew: true,\n          dashboardId: dashboard.id,\n          skipInitialLoad: true\n        })\n      }), /*#__PURE__*/_jsx(Field, {\n        label: \"Editable\",\n        description: \"Set to read-only to disable all editing. Reload the dashboard for changes to take effect\",\n        children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n          value: dashboard.editable,\n          options: editableOptions,\n          onChange: onEditableChange\n        })\n      })]\n    }), config.featureToggles.dashboardPreviews && config.featureToggles.dashboardPreviewsAdmin && /*#__PURE__*/_jsx(PreviewSettings, {\n      uid: dashboard.uid\n    }), /*#__PURE__*/_jsx(TimePickerSettings, {\n      onTimeZoneChange: onTimeZoneChange,\n      onWeekStartChange: onWeekStartChange,\n      onRefreshIntervalChange: onRefreshIntervalChange,\n      onNowDelayChange: onNowDelayChange,\n      onHideTimePickerChange: onHideTimePickerChange,\n      onLiveNowChange: onLiveNowChange,\n      refreshIntervals: dashboard.timepicker.refresh_intervals,\n      timePickerHidden: dashboard.timepicker.hidden,\n      nowDelay: dashboard.timepicker.nowDelay,\n      timezone: dashboard.timezone,\n      weekStart: dashboard.weekStart,\n      liveNow: dashboard.liveNow\n    }), /*#__PURE__*/_jsx(CollapsableSection, {\n      label: \"Panel options\",\n      isOpen: true,\n      children: /*#__PURE__*/_jsx(Field, {\n        label: \"Graph tooltip\",\n        description: \"Controls tooltip and hover highlight behavior across different panels\",\n        children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n          onChange: onTooltipChange,\n          options: GRAPH_TOOLTIP_OPTIONS,\n          value: dashboard.graphTooltip\n        })\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-button-row\",\n      children: dashboard.meta.canDelete && /*#__PURE__*/_jsx(DeleteDashboardButton, {\n        dashboard: dashboard\n      })\n    })]\n  });\n}\nconst mapDispatchToProps = {\n  updateTimeZone: updateTimeZoneDashboard,\n  updateWeekStart: updateWeekStartDashboard\n};\nconst connector = connect(null, mapDispatchToProps);\nexport const GeneralSettings = connector(GeneralSettingsUnconnected);","map":{"version":3,"names":["React","useState","connect","selectors","config","CollapsableSection","Field","Input","RadioButtonGroup","TagsInput","FolderPicker","updateTimeZoneDashboard","updateWeekStartDashboard","DeleteDashboardButton","PreviewSettings","TimePickerSettings","GRAPH_TOOLTIP_OPTIONS","value","label","GeneralSettingsUnconnected","dashboard","updateTimeZone","updateWeekStart","renderCounter","setRenderCounter","onFolderChange","folder","meta","folderId","id","folderTitle","title","hasUnsavedFolderChange","onBlur","event","currentTarget","name","onTooltipChange","graphTooltip","onRefreshIntervalChange","intervals","timepicker","refresh_intervals","filter","i","trim","onNowDelayChange","nowDelay","onHideTimePickerChange","hide","hidden","onLiveNowChange","v","liveNow","onTimeZoneChange","timeZone","timezone","onWeekStartChange","weekStart","onTagsChange","tags","onEditableChange","editable","editableOptions","maxWidth","pages","Dashboard","Settings","General","description","featureToggles","dashboardPreviews","dashboardPreviewsAdmin","uid","canDelete","mapDispatchToProps","connector","GeneralSettings"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/DashboardSettings/GeneralSettings.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { TimeZone } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { CollapsableSection, Field, Input, RadioButtonGroup, TagsInput } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { updateTimeZoneDashboard, updateWeekStartDashboard } from 'app/features/dashboard/state/actions';\n\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { DeleteDashboardButton } from '../DeleteDashboard/DeleteDashboardButton';\n\nimport { PreviewSettings } from './PreviewSettings';\nimport { TimePickerSettings } from './TimePickerSettings';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst GRAPH_TOOLTIP_OPTIONS = [\n  { value: 0, label: 'Default' },\n  { value: 1, label: 'Shared crosshair' },\n  { value: 2, label: 'Shared Tooltip' },\n];\n\nexport function GeneralSettingsUnconnected({ dashboard, updateTimeZone, updateWeekStart }: Props): JSX.Element {\n  const [renderCounter, setRenderCounter] = useState(0);\n\n  const onFolderChange = (folder: { id: number; title: string }) => {\n    dashboard.meta.folderId = folder.id;\n    dashboard.meta.folderTitle = folder.title;\n    dashboard.meta.hasUnsavedFolderChange = true;\n  };\n\n  const onBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    dashboard[event.currentTarget.name as 'title' | 'description'] = event.currentTarget.value;\n  };\n\n  const onTooltipChange = (graphTooltip: number) => {\n    dashboard.graphTooltip = graphTooltip;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onRefreshIntervalChange = (intervals: string[]) => {\n    dashboard.timepicker.refresh_intervals = intervals.filter((i) => i.trim() !== '');\n  };\n\n  const onNowDelayChange = (nowDelay: string) => {\n    dashboard.timepicker.nowDelay = nowDelay;\n  };\n\n  const onHideTimePickerChange = (hide: boolean) => {\n    dashboard.timepicker.hidden = hide;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onLiveNowChange = (v: boolean) => {\n    dashboard.liveNow = v;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onTimeZoneChange = (timeZone: TimeZone) => {\n    dashboard.timezone = timeZone;\n    setRenderCounter(renderCounter + 1);\n    updateTimeZone(timeZone);\n  };\n\n  const onWeekStartChange = (weekStart: string) => {\n    dashboard.weekStart = weekStart;\n    setRenderCounter(renderCounter + 1);\n    updateWeekStart(weekStart);\n  };\n\n  const onTagsChange = (tags: string[]) => {\n    dashboard.tags = tags;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onEditableChange = (value: boolean) => {\n    dashboard.editable = value;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const editableOptions = [\n    { label: 'Editable', value: true },\n    { label: 'Read-only', value: false },\n  ];\n\n  return (\n    <div style={{ maxWidth: '600px' }}>\n      <h3 className=\"dashboard-settings__header\" aria-label={selectors.pages.Dashboard.Settings.General.title}>\n        General\n      </h3>\n      <div className=\"gf-form-group\">\n        <Field label=\"Name\">\n          <Input id=\"title-input\" name=\"title\" onBlur={onBlur} defaultValue={dashboard.title} />\n        </Field>\n        <Field label=\"Description\">\n          <Input id=\"description-input\" name=\"description\" onBlur={onBlur} defaultValue={dashboard.description} />\n        </Field>\n        <Field label=\"Tags\">\n          <TagsInput id=\"tags-input\" tags={dashboard.tags} onChange={onTagsChange} />\n        </Field>\n        <Field label=\"Folder\">\n          <FolderPicker\n            inputId=\"dashboard-folder-input\"\n            initialTitle={dashboard.meta.folderTitle}\n            initialFolderId={dashboard.meta.folderId}\n            onChange={onFolderChange}\n            enableCreateNew={true}\n            dashboardId={dashboard.id}\n            skipInitialLoad={true}\n          />\n        </Field>\n\n        <Field\n          label=\"Editable\"\n          description=\"Set to read-only to disable all editing. Reload the dashboard for changes to take effect\"\n        >\n          <RadioButtonGroup value={dashboard.editable} options={editableOptions} onChange={onEditableChange} />\n        </Field>\n      </div>\n\n      {config.featureToggles.dashboardPreviews && config.featureToggles.dashboardPreviewsAdmin && (\n        <PreviewSettings uid={dashboard.uid} />\n      )}\n\n      <TimePickerSettings\n        onTimeZoneChange={onTimeZoneChange}\n        onWeekStartChange={onWeekStartChange}\n        onRefreshIntervalChange={onRefreshIntervalChange}\n        onNowDelayChange={onNowDelayChange}\n        onHideTimePickerChange={onHideTimePickerChange}\n        onLiveNowChange={onLiveNowChange}\n        refreshIntervals={dashboard.timepicker.refresh_intervals}\n        timePickerHidden={dashboard.timepicker.hidden}\n        nowDelay={dashboard.timepicker.nowDelay}\n        timezone={dashboard.timezone}\n        weekStart={dashboard.weekStart}\n        liveNow={dashboard.liveNow}\n      />\n\n      <CollapsableSection label=\"Panel options\" isOpen={true}>\n        <Field\n          label=\"Graph tooltip\"\n          description=\"Controls tooltip and hover highlight behavior across different panels\"\n        >\n          <RadioButtonGroup onChange={onTooltipChange} options={GRAPH_TOOLTIP_OPTIONS} value={dashboard.graphTooltip} />\n        </Field>\n      </CollapsableSection>\n\n      <div className=\"gf-form-button-row\">\n        {dashboard.meta.canDelete && <DeleteDashboardButton dashboard={dashboard} />}\n      </div>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = {\n  updateTimeZone: updateTimeZoneDashboard,\n  updateWeekStart: updateWeekStartDashboard,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport const GeneralSettings = connector(GeneralSettingsUnconnected);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}