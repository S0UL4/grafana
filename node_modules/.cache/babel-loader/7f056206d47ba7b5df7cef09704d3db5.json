{"ast":null,"code":"var _Button, _Button2;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { Alert, Button, Field, FieldSet, Input, LinkButton, TextArea, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { makeAMLink } from '../../utils/misc';\nimport { ensureDefine } from '../../utils/templates';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaults = Object.freeze({\n  name: '',\n  content: ''\n});\nexport const TemplateForm = ({\n  existing,\n  alertManagerSourceName,\n  config,\n  provenance\n}) => {\n  var _data, _errors$name, _errors$name2, _errors$content, _errors$content2;\n\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  useCleanup(state => state.unifiedAlerting.saveAMConfig);\n  const {\n    loading,\n    error\n  } = useUnifiedAlertingSelector(state => state.saveAMConfig);\n\n  const submit = values => {\n    var _config$alertmanager_;\n\n    // wrap content in \"define\" if it's not already wrapped, in case user did not do it/\n    // it's not obvious that this is needed for template to work\n    const content = ensureDefine(values.name, values.content); // add new template to template map\n\n    const template_files = Object.assign({}, config.template_files, {\n      [values.name]: content\n    }); // delete existing one (if name changed, otherwise it was overwritten in previous step)\n\n    if (existing && existing.name !== values.name) {\n      delete template_files[existing.name];\n    } // make sure name for the template is configured on the alertmanager config object\n\n\n    const templates = [...((_config$alertmanager_ = config.alertmanager_config.templates) !== null && _config$alertmanager_ !== void 0 ? _config$alertmanager_ : []).filter(name => name !== (existing === null || existing === void 0 ? void 0 : existing.name)), values.name];\n    const newConfig = {\n      template_files,\n      alertmanager_config: Object.assign({}, config.alertmanager_config, {\n        templates\n      })\n    };\n    dispatch(updateAlertManagerConfigAction({\n      alertManagerSourceName,\n      newConfig,\n      oldConfig: config,\n      successMessage: 'Template saved.',\n      redirectPath: '/alerting/notifications'\n    }));\n  };\n\n  const {\n    handleSubmit,\n    register,\n    formState: {\n      errors\n    }\n  } = useForm({\n    mode: 'onSubmit',\n    defaultValues: existing !== null && existing !== void 0 ? existing : defaults\n  });\n\n  const validateNameIsUnique = name => {\n    return !config.template_files[name] || (existing === null || existing === void 0 ? void 0 : existing.name) === name ? true : 'Another template with this name already exists.';\n  };\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    onSubmit: handleSubmit(submit),\n    children: [/*#__PURE__*/_jsx(\"h4\", {\n      children: existing ? 'Edit message template' : 'Create message template'\n    }), error && /*#__PURE__*/_jsx(Alert, {\n      severity: \"error\",\n      title: \"Error saving template\",\n      children: error.message || (error === null || error === void 0 ? void 0 : (_data = error.data) === null || _data === void 0 ? void 0 : _data.message) || String(error)\n    }), provenance && /*#__PURE__*/_jsx(ProvisioningAlert, {\n      resource: ProvisionedResource.Template\n    }), /*#__PURE__*/_jsxs(FieldSet, {\n      disabled: Boolean(provenance),\n      children: [/*#__PURE__*/_jsx(Field, {\n        label: \"Template name\",\n        error: errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message,\n        invalid: !!((_errors$name2 = errors.name) !== null && _errors$name2 !== void 0 && _errors$name2.message),\n        required: true,\n        children: /*#__PURE__*/_jsx(Input, Object.assign({}, register('name', {\n          required: {\n            value: true,\n            message: 'Required.'\n          },\n          validate: {\n            nameIsUnique: validateNameIsUnique\n          }\n        }), {\n          placeholder: \"Give your template a name\",\n          width: 42,\n          autoFocus: true\n        }))\n      }), /*#__PURE__*/_jsx(Field, {\n        description: /*#__PURE__*/_jsxs(_Fragment, {\n          children: [\"You can use the\", ' ', /*#__PURE__*/_jsx(\"a\", {\n            href: \"https://pkg.go.dev/text/template?utm_source=godoc\",\n            target: \"__blank\",\n            rel: \"noreferrer\",\n            className: styles.externalLink,\n            children: \"Go templating language\"\n          }), \".\", ' ', /*#__PURE__*/_jsx(\"a\", {\n            href: \"https://prometheus.io/blog/2016/03/03/custom-alertmanager-templates/\",\n            target: \"__blank\",\n            rel: \"noreferrer\",\n            className: styles.externalLink,\n            children: \"More info about alertmanager templates\"\n          })]\n        }),\n        label: \"Content\",\n        error: errors === null || errors === void 0 ? void 0 : (_errors$content = errors.content) === null || _errors$content === void 0 ? void 0 : _errors$content.message,\n        invalid: !!((_errors$content2 = errors.content) !== null && _errors$content2 !== void 0 && _errors$content2.message),\n        required: true,\n        children: /*#__PURE__*/_jsx(TextArea, Object.assign({}, register('content', {\n          required: {\n            value: true,\n            message: 'Required.'\n          }\n        }), {\n          className: styles.textarea,\n          placeholder: \"Message\",\n          rows: 12\n        }))\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.buttons,\n        children: [loading && (_Button || (_Button = /*#__PURE__*/_jsx(Button, {\n          disabled: true,\n          icon: \"fa fa-spinner\",\n          variant: \"primary\",\n          children: \"Saving...\"\n        }))), !loading && (_Button2 || (_Button2 = /*#__PURE__*/_jsx(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"Save template\"\n        }))), /*#__PURE__*/_jsx(LinkButton, {\n          disabled: loading,\n          href: makeAMLink('alerting/notifications', alertManagerSourceName),\n          variant: \"secondary\",\n          type: \"button\",\n          fill: \"outline\",\n          children: \"Cancel\"\n        })]\n      })]\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  externalLink: css`\n    color: ${theme.colors.text.secondary};\n    text-decoration: underline;\n  `,\n  buttons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  textarea: css`\n    max-width: 758px;\n  `\n});","map":{"version":3,"names":["css","React","useForm","useDispatch","Alert","Button","Field","FieldSet","Input","LinkButton","TextArea","useStyles2","useCleanup","useUnifiedAlertingSelector","updateAlertManagerConfigAction","makeAMLink","ensureDefine","ProvisionedResource","ProvisioningAlert","defaults","Object","freeze","name","content","TemplateForm","existing","alertManagerSourceName","config","provenance","styles","getStyles","dispatch","state","unifiedAlerting","saveAMConfig","loading","error","submit","values","template_files","templates","alertmanager_config","filter","newConfig","oldConfig","successMessage","redirectPath","handleSubmit","register","formState","errors","mode","defaultValues","validateNameIsUnique","message","data","String","Template","Boolean","required","value","validate","nameIsUnique","externalLink","textarea","buttons","theme","colors","text","secondary","spacing"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/receivers/TemplateForm.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\nimport { useForm, Validate } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Field, FieldSet, Input, LinkButton, TextArea, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { makeAMLink } from '../../utils/misc';\nimport { ensureDefine } from '../../utils/templates';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\n\ninterface Values {\n  name: string;\n  content: string;\n}\n\nconst defaults: Values = Object.freeze({\n  name: '',\n  content: '',\n});\n\ninterface Props {\n  existing?: Values;\n  config: AlertManagerCortexConfig;\n  alertManagerSourceName: string;\n  provenance?: string;\n}\n\nexport const TemplateForm: FC<Props> = ({ existing, alertManagerSourceName, config, provenance }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  useCleanup((state) => state.unifiedAlerting.saveAMConfig);\n\n  const { loading, error } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n\n  const submit = (values: Values) => {\n    // wrap content in \"define\" if it's not already wrapped, in case user did not do it/\n    // it's not obvious that this is needed for template to work\n    const content = ensureDefine(values.name, values.content);\n\n    // add new template to template map\n    const template_files = {\n      ...config.template_files,\n      [values.name]: content,\n    };\n\n    // delete existing one (if name changed, otherwise it was overwritten in previous step)\n    if (existing && existing.name !== values.name) {\n      delete template_files[existing.name];\n    }\n\n    // make sure name for the template is configured on the alertmanager config object\n    const templates = [\n      ...(config.alertmanager_config.templates ?? []).filter((name) => name !== existing?.name),\n      values.name,\n    ];\n\n    const newConfig: AlertManagerCortexConfig = {\n      template_files,\n      alertmanager_config: {\n        ...config.alertmanager_config,\n        templates,\n      },\n    };\n    dispatch(\n      updateAlertManagerConfigAction({\n        alertManagerSourceName,\n        newConfig,\n        oldConfig: config,\n        successMessage: 'Template saved.',\n        redirectPath: '/alerting/notifications',\n      })\n    );\n  };\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = useForm<Values>({\n    mode: 'onSubmit',\n    defaultValues: existing ?? defaults,\n  });\n\n  const validateNameIsUnique: Validate<string> = (name: string) => {\n    return !config.template_files[name] || existing?.name === name\n      ? true\n      : 'Another template with this name already exists.';\n  };\n\n  return (\n    <form onSubmit={handleSubmit(submit)}>\n      <h4>{existing ? 'Edit message template' : 'Create message template'}</h4>\n      {error && (\n        <Alert severity=\"error\" title=\"Error saving template\">\n          {error.message || (error as any)?.data?.message || String(error)}\n        </Alert>\n      )}\n      {provenance && <ProvisioningAlert resource={ProvisionedResource.Template} />}\n      <FieldSet disabled={Boolean(provenance)}>\n        <Field label=\"Template name\" error={errors?.name?.message} invalid={!!errors.name?.message} required>\n          <Input\n            {...register('name', {\n              required: { value: true, message: 'Required.' },\n              validate: { nameIsUnique: validateNameIsUnique },\n            })}\n            placeholder=\"Give your template a name\"\n            width={42}\n            autoFocus={true}\n          />\n        </Field>\n        <Field\n          description={\n            <>\n              You can use the{' '}\n              <a\n                href=\"https://pkg.go.dev/text/template?utm_source=godoc\"\n                target=\"__blank\"\n                rel=\"noreferrer\"\n                className={styles.externalLink}\n              >\n                Go templating language\n              </a>\n              .{' '}\n              <a\n                href=\"https://prometheus.io/blog/2016/03/03/custom-alertmanager-templates/\"\n                target=\"__blank\"\n                rel=\"noreferrer\"\n                className={styles.externalLink}\n              >\n                More info about alertmanager templates\n              </a>\n            </>\n          }\n          label=\"Content\"\n          error={errors?.content?.message}\n          invalid={!!errors.content?.message}\n          required\n        >\n          <TextArea\n            {...register('content', { required: { value: true, message: 'Required.' } })}\n            className={styles.textarea}\n            placeholder=\"Message\"\n            rows={12}\n          />\n        </Field>\n        <div className={styles.buttons}>\n          {loading && (\n            <Button disabled={true} icon=\"fa fa-spinner\" variant=\"primary\">\n              Saving...\n            </Button>\n          )}\n          {!loading && (\n            <Button type=\"submit\" variant=\"primary\">\n              Save template\n            </Button>\n          )}\n          <LinkButton\n            disabled={loading}\n            href={makeAMLink('alerting/notifications', alertManagerSourceName)}\n            variant=\"secondary\"\n            type=\"button\"\n            fill=\"outline\"\n          >\n            Cancel\n          </LinkButton>\n        </div>\n      </FieldSet>\n    </form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  externalLink: css`\n    color: ${theme.colors.text.secondary};\n    text-decoration: underline;\n  `,\n  buttons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  textarea: css`\n    max-width: 758px;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}