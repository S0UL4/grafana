{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { isLiveChannelMessageEvent, LiveChannelScope } from '@grafana/data';\nimport { getBackendSrv, getGrafanaLiveSrv } from '@grafana/runtime';\nimport { CommentView } from './CommentView';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class CommentManager extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"subscription\", void 0);\n\n    _defineProperty(this, \"packetCounter\", 0);\n\n    _defineProperty(this, \"getLiveChannel\", () => {\n      const live = getGrafanaLiveSrv();\n\n      if (!live) {\n        console.error('Grafana live not running, enable \"live\" feature toggle');\n        return undefined;\n      }\n\n      const address = this.getLiveAddress();\n\n      if (!address) {\n        return undefined;\n      }\n\n      return live.getStream(address);\n    });\n\n    _defineProperty(this, \"getLiveAddress\", () => {\n      return {\n        scope: LiveChannelScope.Grafana,\n        namespace: 'comment',\n        path: `${this.props.objectType}/${this.props.objectId}`\n      };\n    });\n\n    _defineProperty(this, \"updateSubscription\", () => {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n        this.subscription = undefined;\n      }\n\n      const channel = this.getLiveChannel();\n\n      if (channel) {\n        this.subscription = channel.subscribe({\n          next: msg => {\n            if (isLiveChannelMessageEvent(msg)) {\n              const {\n                commentCreated\n              } = msg.message;\n\n              if (commentCreated) {\n                this.setState(prevState => ({\n                  messages: [...prevState.messages, commentCreated]\n                }));\n                this.packetCounter++;\n              }\n            }\n          }\n        });\n      }\n    });\n\n    _defineProperty(this, \"addComment\", async comment => {\n      const response = await getBackendSrv().post('/api/comments/create', {\n        objectType: this.props.objectType,\n        objectId: this.props.objectId,\n        content: comment\n      }); // TODO: set up error handling\n\n      console.log(response);\n      return true;\n    });\n\n    this.state = {\n      messages: [],\n      value: ''\n    };\n  }\n\n  async componentDidMount() {\n    const resp = await getBackendSrv().post('/api/comments/get', {\n      objectType: this.props.objectType,\n      objectId: this.props.objectId\n    });\n    this.packetCounter++;\n    this.setState({\n      messages: resp.comments\n    });\n    this.updateSubscription();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(CommentView, {\n      comments: this.state.messages,\n      packetCounter: this.packetCounter,\n      addComment: this.addComment\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","isLiveChannelMessageEvent","LiveChannelScope","getBackendSrv","getGrafanaLiveSrv","CommentView","CommentManager","constructor","props","live","console","error","undefined","address","getLiveAddress","getStream","scope","Grafana","namespace","path","objectType","objectId","subscription","unsubscribe","channel","getLiveChannel","subscribe","next","msg","commentCreated","message","setState","prevState","messages","packetCounter","comment","response","post","content","log","state","value","componentDidMount","resp","comments","updateSubscription","render","addComment"],"sources":["/home/soula/grafana/public/app/features/comments/CommentManager.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { isLiveChannelMessageEvent, LiveChannelScope } from '@grafana/data';\nimport { getBackendSrv, getGrafanaLiveSrv } from '@grafana/runtime';\n\nimport { CommentView } from './CommentView';\nimport { Message, MessagePacket } from './types';\n\nexport interface Props {\n  objectType: string;\n  objectId: string;\n}\n\nexport interface State {\n  messages: Message[];\n  value: string;\n}\n\nexport class CommentManager extends PureComponent<Props, State> {\n  subscription?: Unsubscribable;\n  packetCounter = 0;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      messages: [],\n      value: '',\n    };\n  }\n\n  async componentDidMount() {\n    const resp = await getBackendSrv().post('/api/comments/get', {\n      objectType: this.props.objectType,\n      objectId: this.props.objectId,\n    });\n    this.packetCounter++;\n    this.setState({\n      messages: resp.comments,\n    });\n    this.updateSubscription();\n  }\n\n  getLiveChannel = () => {\n    const live = getGrafanaLiveSrv();\n    if (!live) {\n      console.error('Grafana live not running, enable \"live\" feature toggle');\n      return undefined;\n    }\n\n    const address = this.getLiveAddress();\n    if (!address) {\n      return undefined;\n    }\n\n    return live.getStream<MessagePacket>(address);\n  };\n\n  getLiveAddress = () => {\n    return {\n      scope: LiveChannelScope.Grafana,\n      namespace: 'comment',\n      path: `${this.props.objectType}/${this.props.objectId}`,\n    };\n  };\n\n  updateSubscription = () => {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n\n    const channel = this.getLiveChannel();\n    if (channel) {\n      this.subscription = channel.subscribe({\n        next: (msg) => {\n          if (isLiveChannelMessageEvent(msg)) {\n            const { commentCreated } = msg.message;\n            if (commentCreated) {\n              this.setState((prevState) => ({\n                messages: [...prevState.messages, commentCreated],\n              }));\n              this.packetCounter++;\n            }\n          }\n        },\n      });\n    }\n  };\n\n  addComment = async (comment: string): Promise<boolean> => {\n    const response = await getBackendSrv().post('/api/comments/create', {\n      objectType: this.props.objectType,\n      objectId: this.props.objectId,\n      content: comment,\n    });\n\n    // TODO: set up error handling\n    console.log(response);\n\n    return true;\n  };\n\n  render() {\n    return (\n      <CommentView comments={this.state.messages} packetCounter={this.packetCounter} addComment={this.addComment} />\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}