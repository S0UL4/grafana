{"ast":null,"code":"const _excluded = [\"suggestions\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { css, cx } from '@emotion/css';\nimport { groupBy, capitalize } from 'lodash';\nimport React, { useRef, useMemo } from 'react';\nimport useClickAway from 'react-use/lib/useClickAway';\nimport { useStyles2 } from '../../themes';\nimport { List } from '../index';\nimport { createElement as _createElement } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst getStyles = theme => {\n  return {\n    list: css`\n      border-bottom: 1px solid ${theme.colors.border.weak};\n      &:last-child {\n        border: none;\n      }\n    `,\n    wrapper: css`\n      background: ${theme.colors.background.primary};\n      width: 250px;\n    `,\n    item: css`\n      background: none;\n      padding: 2px 8px;\n      color: ${theme.colors.text.primary};\n      cursor: pointer;\n      &:hover {\n        background: ${theme.colors.action.hover};\n      }\n    `,\n    label: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    activeItem: css`\n      background: ${theme.colors.background.secondary};\n      &:hover {\n        background: ${theme.colors.background.secondary};\n      }\n    `,\n    itemValue: css`\n      font-family: ${theme.typography.fontFamilyMonospace};\n      font-size: ${theme.typography.size.sm};\n    `\n  };\n};\n\nexport const DataLinkSuggestions = _ref => {\n  let {\n    suggestions\n  } = _ref,\n      otherProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const ref = useRef(null);\n  useClickAway(ref, () => {\n    if (otherProps.onClose) {\n      otherProps.onClose();\n    }\n  });\n  const groupedSuggestions = useMemo(() => {\n    return groupBy(suggestions, s => s.origin);\n  }, [suggestions]);\n  const styles = useStyles2(getStyles);\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    className: styles.wrapper,\n    children: Object.keys(groupedSuggestions).map((key, i) => {\n      const indexOffset = i === 0 ? 0 : Object.keys(groupedSuggestions).reduce((acc, current, index) => {\n        if (index >= i) {\n          return acc;\n        }\n\n        return acc + groupedSuggestions[current].length;\n      }, 0);\n      return /*#__PURE__*/_createElement(DataLinkSuggestionsList, Object.assign({}, otherProps, {\n        suggestions: groupedSuggestions[key],\n        label: `${capitalize(key)}`,\n        activeIndex: otherProps.activeIndex,\n        activeIndexOffset: indexOffset,\n        key: key\n      }));\n    })\n  });\n};\nDataLinkSuggestions.displayName = 'DataLinkSuggestions';\nconst DataLinkSuggestionsList = /*#__PURE__*/React.memo(({\n  activeIndex,\n  activeIndexOffset,\n  label,\n  onClose,\n  onSuggestionSelect,\n  suggestions,\n  activeRef: selectedRef\n}) => {\n  const styles = useStyles2(getStyles);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(List, {\n      className: styles.list,\n      items: suggestions,\n      renderItem: (item, index) => {\n        const isActive = index + activeIndexOffset === activeIndex;\n        return /*#__PURE__*/_jsx(\"div\", {\n          className: cx(styles.item, isActive && styles.activeItem),\n          ref: isActive ? selectedRef : undefined,\n          onClick: () => {\n            onSuggestionSelect(item);\n          },\n          title: item.documentation,\n          children: /*#__PURE__*/_jsxs(\"span\", {\n            className: styles.itemValue,\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              className: styles.label,\n              children: label\n            }), \" \", item.label]\n          })\n        });\n      }\n    })\n  });\n});\nDataLinkSuggestionsList.displayName = 'DataLinkSuggestionsList';","map":{"version":3,"names":["css","cx","groupBy","capitalize","React","useRef","useMemo","useClickAway","useStyles2","List","getStyles","theme","list","colors","border","weak","wrapper","background","primary","item","text","action","hover","label","secondary","activeItem","itemValue","typography","fontFamilyMonospace","size","sm","DataLinkSuggestions","suggestions","otherProps","ref","onClose","groupedSuggestions","s","origin","styles","Object","keys","map","key","i","indexOffset","reduce","acc","current","index","length","activeIndex","displayName","DataLinkSuggestionsList","memo","activeIndexOffset","onSuggestionSelect","activeRef","selectedRef","isActive","undefined","documentation"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/DataLinks/DataLinkSuggestions.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { groupBy, capitalize } from 'lodash';\nimport React, { useRef, useMemo } from 'react';\nimport useClickAway from 'react-use/lib/useClickAway';\n\nimport { VariableSuggestion, GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { List } from '../index';\n\ninterface DataLinkSuggestionsProps {\n  activeRef?: React.RefObject<HTMLDivElement>;\n  suggestions: VariableSuggestion[];\n  activeIndex: number;\n  onSuggestionSelect: (suggestion: VariableSuggestion) => void;\n  onClose?: () => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    list: css`\n      border-bottom: 1px solid ${theme.colors.border.weak};\n      &:last-child {\n        border: none;\n      }\n    `,\n    wrapper: css`\n      background: ${theme.colors.background.primary};\n      width: 250px;\n    `,\n    item: css`\n      background: none;\n      padding: 2px 8px;\n      color: ${theme.colors.text.primary};\n      cursor: pointer;\n      &:hover {\n        background: ${theme.colors.action.hover};\n      }\n    `,\n    label: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    activeItem: css`\n      background: ${theme.colors.background.secondary};\n      &:hover {\n        background: ${theme.colors.background.secondary};\n      }\n    `,\n    itemValue: css`\n      font-family: ${theme.typography.fontFamilyMonospace};\n      font-size: ${theme.typography.size.sm};\n    `,\n  };\n};\n\nexport const DataLinkSuggestions: React.FC<DataLinkSuggestionsProps> = ({ suggestions, ...otherProps }) => {\n  const ref = useRef(null);\n\n  useClickAway(ref, () => {\n    if (otherProps.onClose) {\n      otherProps.onClose();\n    }\n  });\n\n  const groupedSuggestions = useMemo(() => {\n    return groupBy(suggestions, (s) => s.origin);\n  }, [suggestions]);\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div ref={ref} className={styles.wrapper}>\n      {Object.keys(groupedSuggestions).map((key, i) => {\n        const indexOffset =\n          i === 0\n            ? 0\n            : Object.keys(groupedSuggestions).reduce((acc, current, index) => {\n                if (index >= i) {\n                  return acc;\n                }\n                return acc + groupedSuggestions[current].length;\n              }, 0);\n\n        return (\n          <DataLinkSuggestionsList\n            {...otherProps}\n            suggestions={groupedSuggestions[key]}\n            label={`${capitalize(key)}`}\n            activeIndex={otherProps.activeIndex}\n            activeIndexOffset={indexOffset}\n            key={key}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nDataLinkSuggestions.displayName = 'DataLinkSuggestions';\n\ninterface DataLinkSuggestionsListProps extends DataLinkSuggestionsProps {\n  label: string;\n  activeIndexOffset: number;\n  activeRef?: React.RefObject<HTMLDivElement>;\n}\n\nconst DataLinkSuggestionsList: React.FC<DataLinkSuggestionsListProps> = React.memo(\n  ({ activeIndex, activeIndexOffset, label, onClose, onSuggestionSelect, suggestions, activeRef: selectedRef }) => {\n    const styles = useStyles2(getStyles);\n\n    return (\n      <>\n        <List\n          className={styles.list}\n          items={suggestions}\n          renderItem={(item, index) => {\n            const isActive = index + activeIndexOffset === activeIndex;\n            return (\n              <div\n                className={cx(styles.item, isActive && styles.activeItem)}\n                ref={isActive ? selectedRef : undefined}\n                onClick={() => {\n                  onSuggestionSelect(item);\n                }}\n                title={item.documentation}\n              >\n                <span className={styles.itemValue}>\n                  <span className={styles.label}>{label}</span> {item.label}\n                </span>\n              </div>\n            );\n          }}\n        />\n      </>\n    );\n  }\n);\n\nDataLinkSuggestionsList.displayName = 'DataLinkSuggestionsList';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}