{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { getAngularLoader } from '@grafana/runtime';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class AngularEditorLoader extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ref\", null);\n\n    _defineProperty(this, \"angularComponent\", void 0);\n\n    _defineProperty(this, \"scopeProps\", void 0);\n  }\n\n  componentWillUnmount() {\n    if (this.angularComponent) {\n      this.angularComponent.destroy();\n    }\n  }\n\n  componentDidMount() {\n    if (this.ref) {\n      this.loadAngular();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.datasource !== this.props.datasource) {\n      this.loadAngular();\n    }\n\n    if (this.scopeProps && this.scopeProps.ctrl.currentAnnotation !== this.props.annotation) {\n      var _this$angularComponen;\n\n      this.scopeProps.ctrl.ignoreNextWatcherFiring = true;\n      this.scopeProps.ctrl.currentAnnotation = this.props.annotation;\n      (_this$angularComponen = this.angularComponent) === null || _this$angularComponen === void 0 ? void 0 : _this$angularComponen.digest();\n    }\n  }\n\n  loadAngular() {\n    if (this.angularComponent) {\n      this.angularComponent.destroy();\n      this.scopeProps = undefined;\n    }\n\n    const loader = getAngularLoader(); // NOTE: BE CAREFUL HERE\n    // If this template contains an ng-if, then it won't be removed correctly by AngularLoader.\n    // The compiledElem will only contain the single comment node (e.g. <!-- ngIf !ctrl.currentDatasource.annotations -->)\n\n    const template = `<plugin-component type=\"annotations-query-ctrl\"> </plugin-component>`;\n    const scopeProps = {\n      ctrl: {\n        currentDatasource: this.props.datasource,\n        currentAnnotation: this.props.annotation,\n        ignoreNextWatcherFiring: false\n      }\n    };\n    this.angularComponent = loader.load(this.ref, scopeProps, template);\n    this.angularComponent.digest();\n    this.angularComponent.getScope().$watch(() => {\n      // To avoid recursive loop when the annotation is updated from outside angular in componentDidUpdate\n      if (scopeProps.ctrl.ignoreNextWatcherFiring) {\n        scopeProps.ctrl.ignoreNextWatcherFiring = false;\n        return;\n      }\n\n      this.props.onChange(scopeProps.ctrl.currentAnnotation);\n    });\n    this.scopeProps = scopeProps;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(\"div\", {\n      ref: element => this.ref = element\n    });\n  }\n\n}","map":{"version":3,"names":["React","getAngularLoader","AngularEditorLoader","PureComponent","componentWillUnmount","angularComponent","destroy","componentDidMount","ref","loadAngular","componentDidUpdate","prevProps","datasource","props","scopeProps","ctrl","currentAnnotation","annotation","ignoreNextWatcherFiring","digest","undefined","loader","template","currentDatasource","load","getScope","$watch","onChange","render","element"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/AnnotationSettings/AngularEditorLoader.tsx"],"sourcesContent":["import React from 'react';\n\nimport { AnnotationQuery, DataSourceApi } from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\n\nexport interface Props {\n  annotation: AnnotationQuery;\n  datasource: DataSourceApi;\n  onChange: (annotation: AnnotationQuery) => void;\n}\n\ninterface ScopeProps {\n  ctrl: {\n    currentDatasource: DataSourceApi;\n    currentAnnotation: AnnotationQuery;\n    ignoreNextWatcherFiring: boolean;\n  };\n}\n\nexport class AngularEditorLoader extends React.PureComponent<Props> {\n  ref: HTMLDivElement | null = null;\n  angularComponent?: AngularComponent;\n  scopeProps?: ScopeProps;\n\n  componentWillUnmount() {\n    if (this.angularComponent) {\n      this.angularComponent.destroy();\n    }\n  }\n\n  componentDidMount() {\n    if (this.ref) {\n      this.loadAngular();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.datasource !== this.props.datasource) {\n      this.loadAngular();\n    }\n\n    if (this.scopeProps && this.scopeProps.ctrl.currentAnnotation !== this.props.annotation) {\n      this.scopeProps.ctrl.ignoreNextWatcherFiring = true;\n      this.scopeProps.ctrl.currentAnnotation = this.props.annotation;\n      this.angularComponent?.digest();\n    }\n  }\n\n  loadAngular() {\n    if (this.angularComponent) {\n      this.angularComponent.destroy();\n      this.scopeProps = undefined;\n    }\n\n    const loader = getAngularLoader();\n    // NOTE: BE CAREFUL HERE\n    // If this template contains an ng-if, then it won't be removed correctly by AngularLoader.\n    // The compiledElem will only contain the single comment node (e.g. <!-- ngIf !ctrl.currentDatasource.annotations -->)\n    const template = `<plugin-component type=\"annotations-query-ctrl\"> </plugin-component>`;\n    const scopeProps = {\n      ctrl: {\n        currentDatasource: this.props.datasource,\n        currentAnnotation: this.props.annotation,\n        ignoreNextWatcherFiring: false,\n      },\n    };\n\n    this.angularComponent = loader.load(this.ref, scopeProps, template);\n    this.angularComponent.digest();\n    this.angularComponent.getScope().$watch(() => {\n      // To avoid recursive loop when the annotation is updated from outside angular in componentDidUpdate\n      if (scopeProps.ctrl.ignoreNextWatcherFiring) {\n        scopeProps.ctrl.ignoreNextWatcherFiring = false;\n        return;\n      }\n\n      this.props.onChange(scopeProps.ctrl.currentAnnotation);\n    });\n\n    this.scopeProps = scopeProps;\n  }\n\n  render() {\n    return <div ref={(element) => (this.ref = element)} />;\n  }\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAA2BC,gBAA3B,QAAmD,kBAAnD;;AAgBA,OAAO,MAAMC,mBAAN,SAAkCF,KAAK,CAACG,aAAxC,CAA6D;EAAA;IAAA;;IAAA,6BACrC,IADqC;;IAAA;;IAAA;EAAA;;EAKlEC,oBAAoB,GAAG;IACrB,IAAI,KAAKC,gBAAT,EAA2B;MACzB,KAAKA,gBAAL,CAAsBC,OAAtB;IACD;EACF;;EAEDC,iBAAiB,GAAG;IAClB,IAAI,KAAKC,GAAT,EAAc;MACZ,KAAKC,WAAL;IACD;EACF;;EAEDC,kBAAkB,CAACC,SAAD,EAAmB;IACnC,IAAIA,SAAS,CAACC,UAAV,KAAyB,KAAKC,KAAL,CAAWD,UAAxC,EAAoD;MAClD,KAAKH,WAAL;IACD;;IAED,IAAI,KAAKK,UAAL,IAAmB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqBC,iBAArB,KAA2C,KAAKH,KAAL,CAAWI,UAA7E,EAAyF;MAAA;;MACvF,KAAKH,UAAL,CAAgBC,IAAhB,CAAqBG,uBAArB,GAA+C,IAA/C;MACA,KAAKJ,UAAL,CAAgBC,IAAhB,CAAqBC,iBAArB,GAAyC,KAAKH,KAAL,CAAWI,UAApD;MACA,8BAAKZ,gBAAL,gFAAuBc,MAAvB;IACD;EACF;;EAEDV,WAAW,GAAG;IACZ,IAAI,KAAKJ,gBAAT,EAA2B;MACzB,KAAKA,gBAAL,CAAsBC,OAAtB;MACA,KAAKQ,UAAL,GAAkBM,SAAlB;IACD;;IAED,MAAMC,MAAM,GAAGpB,gBAAgB,EAA/B,CANY,CAOZ;IACA;IACA;;IACA,MAAMqB,QAAQ,GAAI,sEAAlB;IACA,MAAMR,UAAU,GAAG;MACjBC,IAAI,EAAE;QACJQ,iBAAiB,EAAE,KAAKV,KAAL,CAAWD,UAD1B;QAEJI,iBAAiB,EAAE,KAAKH,KAAL,CAAWI,UAF1B;QAGJC,uBAAuB,EAAE;MAHrB;IADW,CAAnB;IAQA,KAAKb,gBAAL,GAAwBgB,MAAM,CAACG,IAAP,CAAY,KAAKhB,GAAjB,EAAsBM,UAAtB,EAAkCQ,QAAlC,CAAxB;IACA,KAAKjB,gBAAL,CAAsBc,MAAtB;IACA,KAAKd,gBAAL,CAAsBoB,QAAtB,GAAiCC,MAAjC,CAAwC,MAAM;MAC5C;MACA,IAAIZ,UAAU,CAACC,IAAX,CAAgBG,uBAApB,EAA6C;QAC3CJ,UAAU,CAACC,IAAX,CAAgBG,uBAAhB,GAA0C,KAA1C;QACA;MACD;;MAED,KAAKL,KAAL,CAAWc,QAAX,CAAoBb,UAAU,CAACC,IAAX,CAAgBC,iBAApC;IACD,CARD;IAUA,KAAKF,UAAL,GAAkBA,UAAlB;EACD;;EAEDc,MAAM,GAAG;IACP,oBAAO;MAAK,GAAG,EAAGC,OAAD,IAAc,KAAKrB,GAAL,GAAWqB;IAAnC,EAAP;EACD;;AAjEiE"},"metadata":{},"sourceType":"module"}