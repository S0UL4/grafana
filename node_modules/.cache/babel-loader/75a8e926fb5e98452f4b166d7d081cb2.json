{"ast":null,"code":"/**\n * @alpha\n */\nexport let MappingType;\n/**\n * @alpha\n */\n\n(function (MappingType) {\n  MappingType[\"ValueToText\"] = \"value\";\n  MappingType[\"RangeToText\"] = \"range\";\n  MappingType[\"RegexToText\"] = \"regex\";\n  MappingType[\"SpecialValue\"] = \"special\";\n})(MappingType || (MappingType = {}));\n\n/**\n * @alpha\n */\nexport let SpecialValueMatch;\n/**\n * @alpha\n */\n\n(function (SpecialValueMatch) {\n  SpecialValueMatch[\"True\"] = \"true\";\n  SpecialValueMatch[\"False\"] = \"false\";\n  SpecialValueMatch[\"Null\"] = \"null\";\n  SpecialValueMatch[\"NaN\"] = \"nan\";\n  SpecialValueMatch[\"NullAndNaN\"] = \"null+nan\";\n  SpecialValueMatch[\"Empty\"] = \"empty\";\n})(SpecialValueMatch || (SpecialValueMatch = {}));","map":{"version":3,"names":["MappingType","SpecialValueMatch"],"sources":["/home/soula/grafana/packages/grafana-data/src/types/valueMapping.ts"],"sourcesContent":["/**\n * @alpha\n */\nexport enum MappingType {\n  ValueToText = 'value', // was 1\n  RangeToText = 'range', // was 2\n  RegexToText = 'regex',\n  SpecialValue = 'special',\n}\n\n/**\n * @alpha\n */\nexport interface ValueMappingResult {\n  text?: string;\n  color?: string;\n  icon?: string;\n  index?: number;\n}\n\n/**\n * @alpha\n */\ninterface BaseValueMap<T> {\n  type: MappingType;\n  options: T;\n}\n\n/**\n * @alpha\n */\nexport interface ValueMap extends BaseValueMap<Record<string, ValueMappingResult>> {\n  type: MappingType.ValueToText;\n}\n\n/**\n * @alpha\n */\nexport interface RangeMapOptions {\n  from: number | null; // changed from string\n  to: number | null;\n  result: ValueMappingResult;\n}\n\n/**\n * @alpha\n */\nexport interface RangeMap extends BaseValueMap<RangeMapOptions> {\n  type: MappingType.RangeToText;\n}\n\n/**\n * @alpha\n */\nexport interface RegexMapOptions {\n  pattern: string;\n  result: ValueMappingResult;\n}\n\n/**\n * @alpha\n */\nexport interface RegexMap extends BaseValueMap<RegexMapOptions> {\n  type: MappingType.RegexToText;\n}\n\n/**\n * @alpha\n */\nexport interface SpecialValueOptions {\n  match: SpecialValueMatch;\n  result: ValueMappingResult;\n}\n\n/**\n * @alpha\n */\nexport enum SpecialValueMatch {\n  True = 'true',\n  False = 'false',\n  Null = 'null',\n  NaN = 'nan',\n  NullAndNaN = 'null+nan',\n  Empty = 'empty',\n}\n\n/**\n * @alpha\n */\nexport interface SpecialValueMap extends BaseValueMap<SpecialValueOptions> {\n  type: MappingType.SpecialValue;\n}\n\n/**\n * @alpha\n */\nexport type ValueMapping = ValueMap | RangeMap | RegexMap | SpecialValueMap;\n"],"mappings":"AAAA;AACA;AACA;AACA,WAAYA,WAAZ;AAOA;AACA;AACA;;WATYA,W;EAAAA,W;EAAAA,W;EAAAA,W;EAAAA,W;GAAAA,W,KAAAA,W;;AAuEZ;AACA;AACA;AACA,WAAYC,iBAAZ;AASA;AACA;AACA;;WAXYA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB"},"metadata":{},"sourceType":"module"}