{"ast":null,"code":"import { InfluxQueryBuilder } from './query_builder';\n\nconst runExploreQuery = (type, withKey, withMeasurementFilter, target, datasource) => {\n  const builder = new InfluxQueryBuilder(target, datasource.database);\n  const q = builder.buildExploreQuery(type, withKey, withMeasurementFilter);\n  return datasource.metricFindQuery(q);\n};\n\nexport async function getAllPolicies(datasource) {\n  const target = {\n    tags: [],\n    measurement: undefined,\n    policy: undefined\n  };\n  const data = await runExploreQuery('RETENTION POLICIES', undefined, undefined, target, datasource);\n  return data.map(item => item.text);\n}\nexport async function getAllMeasurementsForTags(measurementFilter, tags, datasource) {\n  const target = {\n    tags,\n    measurement: undefined,\n    policy: undefined\n  };\n  const data = await runExploreQuery('MEASUREMENTS', undefined, measurementFilter, target, datasource);\n  return data.map(item => item.text);\n}\nexport async function getTagKeysForMeasurementAndTags(measurement, policy, tags, datasource) {\n  const target = {\n    tags,\n    measurement,\n    policy\n  };\n  const data = await runExploreQuery('TAG_KEYS', undefined, undefined, target, datasource);\n  return data.map(item => item.text);\n}\nexport async function getTagValues(tagKey, measurement, policy, tags, datasource) {\n  const target = {\n    tags,\n    measurement,\n    policy\n  };\n  const data = await runExploreQuery('TAG_VALUES', tagKey, undefined, target, datasource);\n  return data.map(item => item.text);\n}\nexport async function getFieldKeysForMeasurement(measurement, policy, datasource) {\n  const target = {\n    tags: [],\n    measurement,\n    policy\n  };\n  const data = await runExploreQuery('FIELDS', undefined, undefined, target, datasource);\n  return data.map(item => item.text);\n}","map":{"version":3,"names":["InfluxQueryBuilder","runExploreQuery","type","withKey","withMeasurementFilter","target","datasource","builder","database","q","buildExploreQuery","metricFindQuery","getAllPolicies","tags","measurement","undefined","policy","data","map","item","text","getAllMeasurementsForTags","measurementFilter","getTagKeysForMeasurementAndTags","getTagValues","tagKey","getFieldKeysForMeasurement"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/influxQLMetadataQuery.ts"],"sourcesContent":["import InfluxDatasource from './datasource';\nimport { InfluxQueryBuilder } from './query_builder';\nimport { InfluxQueryTag } from './types';\n\nconst runExploreQuery = (\n  type: string,\n  withKey: string | undefined,\n  withMeasurementFilter: string | undefined,\n  target: { measurement: string | undefined; tags: InfluxQueryTag[]; policy: string | undefined },\n  datasource: InfluxDatasource\n): Promise<Array<{ text: string }>> => {\n  const builder = new InfluxQueryBuilder(target, datasource.database);\n  const q = builder.buildExploreQuery(type, withKey, withMeasurementFilter);\n  return datasource.metricFindQuery(q);\n};\n\nexport async function getAllPolicies(datasource: InfluxDatasource): Promise<string[]> {\n  const target = { tags: [], measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('RETENTION POLICIES', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getAllMeasurementsForTags(\n  measurementFilter: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement: undefined, policy: undefined };\n  const data = await runExploreQuery('MEASUREMENTS', undefined, measurementFilter, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagKeysForMeasurementAndTags(\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n  const data = await runExploreQuery('TAG_KEYS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getTagValues(\n  tagKey: string,\n  measurement: string | undefined,\n  policy: string | undefined,\n  tags: InfluxQueryTag[],\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags, measurement, policy };\n  const data = await runExploreQuery('TAG_VALUES', tagKey, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n\nexport async function getFieldKeysForMeasurement(\n  measurement: string,\n  policy: string | undefined,\n  datasource: InfluxDatasource\n): Promise<string[]> {\n  const target = { tags: [], measurement, policy };\n  const data = await runExploreQuery('FIELDS', undefined, undefined, target, datasource);\n  return data.map((item) => item.text);\n}\n"],"mappings":"AACA,SAASA,kBAAT,QAAmC,iBAAnC;;AAGA,MAAMC,eAAe,GAAG,CACtBC,IADsB,EAEtBC,OAFsB,EAGtBC,qBAHsB,EAItBC,MAJsB,EAKtBC,UALsB,KAMe;EACrC,MAAMC,OAAO,GAAG,IAAIP,kBAAJ,CAAuBK,MAAvB,EAA+BC,UAAU,CAACE,QAA1C,CAAhB;EACA,MAAMC,CAAC,GAAGF,OAAO,CAACG,iBAAR,CAA0BR,IAA1B,EAAgCC,OAAhC,EAAyCC,qBAAzC,CAAV;EACA,OAAOE,UAAU,CAACK,eAAX,CAA2BF,CAA3B,CAAP;AACD,CAVD;;AAYA,OAAO,eAAeG,cAAf,CAA8BN,UAA9B,EAA+E;EACpF,MAAMD,MAAM,GAAG;IAAEQ,IAAI,EAAE,EAAR;IAAYC,WAAW,EAAEC,SAAzB;IAAoCC,MAAM,EAAED;EAA5C,CAAf;EACA,MAAME,IAAI,GAAG,MAAMhB,eAAe,CAAC,oBAAD,EAAuBc,SAAvB,EAAkCA,SAAlC,EAA6CV,MAA7C,EAAqDC,UAArD,CAAlC;EACA,OAAOW,IAAI,CAACC,GAAL,CAAUC,IAAD,IAAUA,IAAI,CAACC,IAAxB,CAAP;AACD;AAED,OAAO,eAAeC,yBAAf,CACLC,iBADK,EAELT,IAFK,EAGLP,UAHK,EAIc;EACnB,MAAMD,MAAM,GAAG;IAAEQ,IAAF;IAAQC,WAAW,EAAEC,SAArB;IAAgCC,MAAM,EAAED;EAAxC,CAAf;EACA,MAAME,IAAI,GAAG,MAAMhB,eAAe,CAAC,cAAD,EAAiBc,SAAjB,EAA4BO,iBAA5B,EAA+CjB,MAA/C,EAAuDC,UAAvD,CAAlC;EACA,OAAOW,IAAI,CAACC,GAAL,CAAUC,IAAD,IAAUA,IAAI,CAACC,IAAxB,CAAP;AACD;AAED,OAAO,eAAeG,+BAAf,CACLT,WADK,EAELE,MAFK,EAGLH,IAHK,EAILP,UAJK,EAKc;EACnB,MAAMD,MAAM,GAAG;IAAEQ,IAAF;IAAQC,WAAR;IAAqBE;EAArB,CAAf;EACA,MAAMC,IAAI,GAAG,MAAMhB,eAAe,CAAC,UAAD,EAAac,SAAb,EAAwBA,SAAxB,EAAmCV,MAAnC,EAA2CC,UAA3C,CAAlC;EACA,OAAOW,IAAI,CAACC,GAAL,CAAUC,IAAD,IAAUA,IAAI,CAACC,IAAxB,CAAP;AACD;AAED,OAAO,eAAeI,YAAf,CACLC,MADK,EAELX,WAFK,EAGLE,MAHK,EAILH,IAJK,EAKLP,UALK,EAMc;EACnB,MAAMD,MAAM,GAAG;IAAEQ,IAAF;IAAQC,WAAR;IAAqBE;EAArB,CAAf;EACA,MAAMC,IAAI,GAAG,MAAMhB,eAAe,CAAC,YAAD,EAAewB,MAAf,EAAuBV,SAAvB,EAAkCV,MAAlC,EAA0CC,UAA1C,CAAlC;EACA,OAAOW,IAAI,CAACC,GAAL,CAAUC,IAAD,IAAUA,IAAI,CAACC,IAAxB,CAAP;AACD;AAED,OAAO,eAAeM,0BAAf,CACLZ,WADK,EAELE,MAFK,EAGLV,UAHK,EAIc;EACnB,MAAMD,MAAM,GAAG;IAAEQ,IAAI,EAAE,EAAR;IAAYC,WAAZ;IAAyBE;EAAzB,CAAf;EACA,MAAMC,IAAI,GAAG,MAAMhB,eAAe,CAAC,QAAD,EAAWc,SAAX,EAAsBA,SAAtB,EAAiCV,MAAjC,EAAyCC,UAAzC,CAAlC;EACA,OAAOW,IAAI,CAACC,GAAL,CAAUC,IAAD,IAAUA,IAAI,CAACC,IAAxB,CAAP;AACD"},"metadata":{},"sourceType":"module"}