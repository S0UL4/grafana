{"ast":null,"code":"var _Icon, _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getTemplateSrv, RefreshEvent } from '@grafana/runtime';\nimport { Icon } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { ShowConfirmModalEvent } from '../../../../types/events';\nimport { RowOptionsButton } from '../RowOptions/RowOptionsButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class DashboardRow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"sub\", void 0);\n\n    _defineProperty(this, \"onVariableUpdated\", () => {\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"onToggle\", () => {\n      this.props.dashboard.toggleRow(this.props.panel);\n      this.setState(prevState => {\n        return {\n          collapsed: !prevState.collapsed\n        };\n      });\n    });\n\n    _defineProperty(this, \"onUpdate\", (title, repeat) => {\n      this.props.panel.setProperty('title', title);\n      this.props.panel.setProperty('repeat', repeat !== null && repeat !== void 0 ? repeat : undefined);\n      this.props.panel.render();\n      this.props.dashboard.processRepeats();\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"onDelete\", () => {\n      appEvents.publish(new ShowConfirmModalEvent({\n        title: 'Delete row',\n        text: 'Are you sure you want to remove this row and all its panels?',\n        altActionText: 'Delete row only',\n        icon: 'trash-alt',\n        onConfirm: () => {\n          this.props.dashboard.removeRow(this.props.panel, true);\n        },\n        onAltAction: () => {\n          this.props.dashboard.removeRow(this.props.panel, false);\n        }\n      }));\n    });\n\n    this.state = {\n      collapsed: this.props.panel.collapsed\n    };\n  }\n\n  componentDidMount() {\n    this.sub = this.props.dashboard.events.subscribe(RefreshEvent, this.onVariableUpdated);\n  }\n\n  componentWillUnmount() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  render() {\n    const classes = classNames({\n      'dashboard-row': true,\n      'dashboard-row--collapsed': this.state.collapsed\n    });\n    const title = getTemplateSrv().replace(this.props.panel.title, this.props.panel.scopedVars, 'text');\n    const count = this.props.panel.panels ? this.props.panel.panels.length : 0;\n    const panels = count === 1 ? 'panel' : 'panels';\n    const canEdit = this.props.dashboard.meta.canEdit === true;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: classes,\n      \"data-testid\": \"dashboard-row-container\",\n      children: [/*#__PURE__*/_jsxs(\"a\", {\n        className: \"dashboard-row__title pointer\",\n        \"data-testid\": selectors.components.DashboardRow.title(title),\n        onClick: this.onToggle,\n        children: [/*#__PURE__*/_jsx(Icon, {\n          name: this.state.collapsed ? 'angle-right' : 'angle-down'\n        }), title, /*#__PURE__*/_jsxs(\"span\", {\n          className: \"dashboard-row__panel_count\",\n          children: [\"(\", count, \" \", panels, \")\"]\n        })]\n      }), canEdit && /*#__PURE__*/_jsxs(\"div\", {\n        className: \"dashboard-row__actions\",\n        children: [/*#__PURE__*/_jsx(RowOptionsButton, {\n          title: this.props.panel.title,\n          repeat: this.props.panel.repeat,\n          onUpdate: this.onUpdate\n        }), /*#__PURE__*/_jsx(\"a\", {\n          className: \"pointer\",\n          onClick: this.onDelete,\n          role: \"button\",\n          \"aria-label\": \"Delete row\",\n          children: _Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n            name: \"trash-alt\"\n          }))\n        })]\n      }), this.state.collapsed === true && /*#__PURE__*/_jsx(\"div\", {\n        className: \"dashboard-row__toggle-target\",\n        onClick: this.onToggle,\n        children: \"\\xA0\"\n      }), canEdit && (_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n        \"data-testid\": \"dashboard-row-drag\",\n        className: \"dashboard-row__drag grid-drag-handle\"\n      })))]\n    });\n  }\n\n}","map":{"version":3,"names":["classNames","React","selectors","getTemplateSrv","RefreshEvent","Icon","appEvents","ShowConfirmModalEvent","RowOptionsButton","DashboardRow","Component","constructor","props","forceUpdate","dashboard","toggleRow","panel","setState","prevState","collapsed","title","repeat","setProperty","undefined","render","processRepeats","publish","text","altActionText","icon","onConfirm","removeRow","onAltAction","state","componentDidMount","sub","events","subscribe","onVariableUpdated","componentWillUnmount","unsubscribe","classes","replace","scopedVars","count","panels","length","canEdit","meta","components","onToggle","onUpdate","onDelete"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/DashboardRow/DashboardRow.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getTemplateSrv, RefreshEvent } from '@grafana/runtime';\nimport { Icon } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\n\nimport { ShowConfirmModalEvent } from '../../../../types/events';\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { PanelModel } from '../../state/PanelModel';\nimport { RowOptionsButton } from '../RowOptions/RowOptionsButton';\n\nexport interface DashboardRowProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\nexport class DashboardRow extends React.Component<DashboardRowProps, any> {\n  sub?: Unsubscribable;\n  constructor(props: DashboardRowProps) {\n    super(props);\n\n    this.state = {\n      collapsed: this.props.panel.collapsed,\n    };\n  }\n\n  componentDidMount() {\n    this.sub = this.props.dashboard.events.subscribe(RefreshEvent, this.onVariableUpdated);\n  }\n\n  componentWillUnmount() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n\n  onVariableUpdated = () => {\n    this.forceUpdate();\n  };\n\n  onToggle = () => {\n    this.props.dashboard.toggleRow(this.props.panel);\n\n    this.setState((prevState: any) => {\n      return { collapsed: !prevState.collapsed };\n    });\n  };\n\n  onUpdate = (title: string, repeat?: string | null) => {\n    this.props.panel.setProperty('title', title);\n    this.props.panel.setProperty('repeat', repeat ?? undefined);\n    this.props.panel.render();\n    this.props.dashboard.processRepeats();\n    this.forceUpdate();\n  };\n\n  onDelete = () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete row',\n        text: 'Are you sure you want to remove this row and all its panels?',\n        altActionText: 'Delete row only',\n        icon: 'trash-alt',\n        onConfirm: () => {\n          this.props.dashboard.removeRow(this.props.panel, true);\n        },\n        onAltAction: () => {\n          this.props.dashboard.removeRow(this.props.panel, false);\n        },\n      })\n    );\n  };\n\n  render() {\n    const classes = classNames({\n      'dashboard-row': true,\n      'dashboard-row--collapsed': this.state.collapsed,\n    });\n\n    const title = getTemplateSrv().replace(this.props.panel.title, this.props.panel.scopedVars, 'text');\n    const count = this.props.panel.panels ? this.props.panel.panels.length : 0;\n    const panels = count === 1 ? 'panel' : 'panels';\n    const canEdit = this.props.dashboard.meta.canEdit === true;\n\n    return (\n      <div className={classes} data-testid=\"dashboard-row-container\">\n        <a\n          className=\"dashboard-row__title pointer\"\n          data-testid={selectors.components.DashboardRow.title(title)}\n          onClick={this.onToggle}\n        >\n          <Icon name={this.state.collapsed ? 'angle-right' : 'angle-down'} />\n          {title}\n          <span className=\"dashboard-row__panel_count\">\n            ({count} {panels})\n          </span>\n        </a>\n        {canEdit && (\n          <div className=\"dashboard-row__actions\">\n            <RowOptionsButton\n              title={this.props.panel.title}\n              repeat={this.props.panel.repeat}\n              onUpdate={this.onUpdate}\n            />\n            <a className=\"pointer\" onClick={this.onDelete} role=\"button\" aria-label=\"Delete row\">\n              <Icon name=\"trash-alt\" />\n            </a>\n          </div>\n        )}\n        {this.state.collapsed === true && (\n          <div className=\"dashboard-row__toggle-target\" onClick={this.onToggle}>\n            &nbsp;\n          </div>\n        )}\n        {canEdit && <div data-testid=\"dashboard-row-drag\" className=\"dashboard-row__drag grid-drag-handle\" />}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}