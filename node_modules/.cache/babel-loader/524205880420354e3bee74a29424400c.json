{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { lastValueFrom } from 'rxjs';\nimport { getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { PreferencesService } from '../services/PreferencesService';\nimport { SortOrder } from '../utils/richHistoryTypes';\nimport { fromDTO, toDTO } from './remoteStorageConverter';\nexport default class RichHistoryRemoteStorage {\n  constructor() {\n    _defineProperty(this, \"preferenceService\", void 0);\n\n    this.preferenceService = new PreferencesService('user');\n  }\n\n  async addToRichHistory(newRichHistoryQuery) {\n    const {\n      result\n    } = await getBackendSrv().post(`/api/query-history`, {\n      dataSourceUid: newRichHistoryQuery.datasourceUid,\n      queries: newRichHistoryQuery.queries\n    });\n    return {\n      richHistoryQuery: fromDTO(result)\n    };\n  }\n\n  async deleteAll() {\n    throw new Error('not supported');\n  }\n\n  async deleteRichHistory(id) {\n    getBackendSrv().delete(`/api/query-history/${id}`);\n  }\n\n  async getRichHistory(filters) {\n    const params = buildQueryParams(filters);\n    const queryHistory = await lastValueFrom(getBackendSrv().fetch({\n      method: 'GET',\n      url: `/api/query-history?${params}`,\n      // to ensure any previous requests are cancelled\n      requestId: 'query-history-get-all'\n    }));\n    const data = queryHistory.data;\n    const richHistory = (data.result.queryHistory || []).map(fromDTO);\n    const total = data.result.totalCount || 0;\n    return {\n      richHistory,\n      total\n    };\n  }\n\n  async getSettings() {\n    var _preferences$queryHis;\n\n    const preferences = await this.preferenceService.load();\n    return {\n      activeDatasourceOnly: false,\n      lastUsedDatasourceFilters: undefined,\n      retentionPeriod: 14,\n      starredTabAsFirstTab: ((_preferences$queryHis = preferences.queryHistory) === null || _preferences$queryHis === void 0 ? void 0 : _preferences$queryHis.homeTab) === 'starred'\n    };\n  }\n\n  async updateComment(id, comment) {\n    const dto = await getBackendSrv().patch(`/api/query-history/${id}`, {\n      comment: comment\n    });\n    return fromDTO(dto.result);\n  }\n\n  updateSettings(settings) {\n    return this.preferenceService.patch({\n      queryHistory: {\n        homeTab: settings.starredTabAsFirstTab ? 'starred' : 'query'\n      }\n    });\n  }\n\n  async updateStarred(id, starred) {\n    let dto;\n\n    if (starred) {\n      dto = await getBackendSrv().post(`/api/query-history/star/${id}`);\n    } else {\n      dto = await getBackendSrv().delete(`/api/query-history/star/${id}`);\n    }\n\n    return fromDTO(dto.result);\n  }\n  /**\n   * @internal Used only for migration purposes. Will be removed in future.\n   */\n\n\n  async migrate(richHistory) {\n    await lastValueFrom(getBackendSrv().fetch({\n      url: '/api/query-history/migrate',\n      method: 'POST',\n      data: {\n        queries: richHistory.map(toDTO)\n      },\n      showSuccessAlert: false\n    }));\n  }\n\n}\n\nfunction buildQueryParams(filters) {\n  let params = `${filters.datasourceFilters.map(datasourceName => {\n    const uid = getDataSourceSrv().getInstanceSettings(datasourceName).uid;\n    return `datasourceUid=${encodeURIComponent(uid)}`;\n  }).join('&')}`;\n\n  if (filters.search) {\n    params = params + `&searchString=${filters.search}`;\n  }\n\n  if (filters.sortOrder) {\n    params = params + `&sort=${filters.sortOrder === SortOrder.Ascending ? 'time-asc' : 'time-desc'}`;\n  }\n\n  const relativeFrom = filters.from === 0 ? 'now' : `now-${filters.from}d`;\n  const relativeTo = filters.to === 0 ? 'now' : `now-${filters.to}d`; // TODO: Unify: remote storage from/to params are swapped comparing to frontend and local storage filters\n\n  params = params + `&to=${relativeFrom}`;\n  params = params + `&from=${relativeTo}`;\n  params = params + `&limit=100`;\n  params = params + `&page=${filters.page || 1}`;\n\n  if (filters.starred) {\n    params = params + `&onlyStarred=${filters.starred}`;\n  }\n\n  return params;\n}","map":{"version":3,"names":["lastValueFrom","getBackendSrv","getDataSourceSrv","PreferencesService","SortOrder","fromDTO","toDTO","RichHistoryRemoteStorage","constructor","preferenceService","addToRichHistory","newRichHistoryQuery","result","post","dataSourceUid","datasourceUid","queries","richHistoryQuery","deleteAll","Error","deleteRichHistory","id","delete","getRichHistory","filters","params","buildQueryParams","queryHistory","fetch","method","url","requestId","data","richHistory","map","total","totalCount","getSettings","preferences","load","activeDatasourceOnly","lastUsedDatasourceFilters","undefined","retentionPeriod","starredTabAsFirstTab","homeTab","updateComment","comment","dto","patch","updateSettings","settings","updateStarred","starred","migrate","showSuccessAlert","datasourceFilters","datasourceName","uid","getInstanceSettings","encodeURIComponent","join","search","sortOrder","Ascending","relativeFrom","from","relativeTo","to","page"],"sources":["/home/soula/grafana/public/app/core/history/RichHistoryRemoteStorage.ts"],"sourcesContent":["import { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { RichHistoryQuery } from 'app/types/explore';\n\nimport { DataQuery } from '../../../../packages/grafana-data';\nimport { PreferencesService } from '../services/PreferencesService';\nimport { RichHistorySearchFilters, RichHistorySettings, SortOrder } from '../utils/richHistoryTypes';\n\nimport RichHistoryStorage, { RichHistoryStorageWarningDetails } from './RichHistoryStorage';\nimport { fromDTO, toDTO } from './remoteStorageConverter';\n\nexport type RichHistoryRemoteStorageDTO = {\n  uid: string;\n  createdAt: number;\n  datasourceUid: string;\n  starred: boolean;\n  comment: string;\n  queries: DataQuery[];\n};\n\ntype RichHistoryRemoteStorageMigrationDTO = {\n  datasourceUid: string;\n  queries: DataQuery[];\n  createdAt: number;\n  starred: boolean;\n  comment: string;\n};\n\ntype RichHistoryRemoteStorageMigrationPayloadDTO = {\n  queries: RichHistoryRemoteStorageMigrationDTO[];\n};\n\ntype RichHistoryRemoteStorageResultsPayloadDTO = {\n  result: {\n    queryHistory: RichHistoryRemoteStorageDTO[];\n    totalCount: number;\n  };\n};\n\ntype RichHistoryRemoteStorageUpdatePayloadDTO = {\n  result: RichHistoryRemoteStorageDTO;\n};\n\nexport default class RichHistoryRemoteStorage implements RichHistoryStorage {\n  private readonly preferenceService: PreferencesService;\n\n  constructor() {\n    this.preferenceService = new PreferencesService('user');\n  }\n\n  async addToRichHistory(\n    newRichHistoryQuery: Omit<RichHistoryQuery, 'id' | 'createdAt'>\n  ): Promise<{ warning?: RichHistoryStorageWarningDetails; richHistoryQuery: RichHistoryQuery }> {\n    const { result } = await getBackendSrv().post(`/api/query-history`, {\n      dataSourceUid: newRichHistoryQuery.datasourceUid,\n      queries: newRichHistoryQuery.queries,\n    });\n    return {\n      richHistoryQuery: fromDTO(result),\n    };\n  }\n\n  async deleteAll(): Promise<void> {\n    throw new Error('not supported');\n  }\n\n  async deleteRichHistory(id: string): Promise<void> {\n    getBackendSrv().delete(`/api/query-history/${id}`);\n  }\n\n  async getRichHistory(filters: RichHistorySearchFilters) {\n    const params = buildQueryParams(filters);\n\n    const queryHistory = await lastValueFrom(\n      getBackendSrv().fetch({\n        method: 'GET',\n        url: `/api/query-history?${params}`,\n        // to ensure any previous requests are cancelled\n        requestId: 'query-history-get-all',\n      })\n    );\n\n    const data = queryHistory.data as RichHistoryRemoteStorageResultsPayloadDTO;\n    const richHistory = (data.result.queryHistory || []).map(fromDTO);\n    const total = data.result.totalCount || 0;\n\n    return { richHistory, total };\n  }\n\n  async getSettings(): Promise<RichHistorySettings> {\n    const preferences = await this.preferenceService.load();\n    return {\n      activeDatasourceOnly: false,\n      lastUsedDatasourceFilters: undefined,\n      retentionPeriod: 14,\n      starredTabAsFirstTab: preferences.queryHistory?.homeTab === 'starred',\n    };\n  }\n\n  async updateComment(id: string, comment: string | undefined): Promise<RichHistoryQuery> {\n    const dto: RichHistoryRemoteStorageUpdatePayloadDTO = await getBackendSrv().patch(`/api/query-history/${id}`, {\n      comment: comment,\n    });\n    return fromDTO(dto.result);\n  }\n\n  updateSettings(settings: RichHistorySettings): Promise<void> {\n    return this.preferenceService.patch({\n      queryHistory: {\n        homeTab: settings.starredTabAsFirstTab ? 'starred' : 'query',\n      },\n    });\n  }\n\n  async updateStarred(id: string, starred: boolean): Promise<RichHistoryQuery> {\n    let dto: RichHistoryRemoteStorageUpdatePayloadDTO;\n    if (starred) {\n      dto = await getBackendSrv().post(`/api/query-history/star/${id}`);\n    } else {\n      dto = await getBackendSrv().delete(`/api/query-history/star/${id}`);\n    }\n    return fromDTO(dto.result);\n  }\n\n  /**\n   * @internal Used only for migration purposes. Will be removed in future.\n   */\n  async migrate(richHistory: RichHistoryQuery[]) {\n    await lastValueFrom(\n      getBackendSrv().fetch({\n        url: '/api/query-history/migrate',\n        method: 'POST',\n        data: { queries: richHistory.map(toDTO) } as RichHistoryRemoteStorageMigrationPayloadDTO,\n        showSuccessAlert: false,\n      })\n    );\n  }\n}\n\nfunction buildQueryParams(filters: RichHistorySearchFilters): string {\n  let params = `${filters.datasourceFilters\n    .map((datasourceName) => {\n      const uid = getDataSourceSrv().getInstanceSettings(datasourceName)!.uid;\n      return `datasourceUid=${encodeURIComponent(uid)}`;\n    })\n    .join('&')}`;\n  if (filters.search) {\n    params = params + `&searchString=${filters.search}`;\n  }\n  if (filters.sortOrder) {\n    params = params + `&sort=${filters.sortOrder === SortOrder.Ascending ? 'time-asc' : 'time-desc'}`;\n  }\n  const relativeFrom = filters.from === 0 ? 'now' : `now-${filters.from}d`;\n  const relativeTo = filters.to === 0 ? 'now' : `now-${filters.to}d`;\n  // TODO: Unify: remote storage from/to params are swapped comparing to frontend and local storage filters\n  params = params + `&to=${relativeFrom}`;\n  params = params + `&from=${relativeTo}`;\n  params = params + `&limit=100`;\n  params = params + `&page=${filters.page || 1}`;\n  if (filters.starred) {\n    params = params + `&onlyStarred=${filters.starred}`;\n  }\n  return params;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}