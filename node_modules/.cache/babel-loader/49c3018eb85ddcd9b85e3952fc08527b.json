{"ast":null,"code":"import { ValueMatcherID } from '../ids';\nconst isNullValueMatcher = {\n  id: ValueMatcherID.isNull,\n  name: 'Is null',\n  description: 'Match where value for given field is null.',\n  get: () => {\n    return (valueIndex, field) => {\n      const value = field.values.get(valueIndex);\n      return value == null;\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `Matches all rows where field is null.`;\n  },\n  isApplicable: () => true,\n  getDefaultOptions: () => ({})\n};\nconst isNotNullValueMatcher = {\n  id: ValueMatcherID.isNotNull,\n  name: 'Is not null',\n  description: 'Match where value for given field is not null.',\n  get: () => {\n    return (valueIndex, field) => {\n      const value = field.values.get(valueIndex);\n      return value != null;\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `Matches all rows where field is not null.`;\n  },\n  isApplicable: () => true,\n  getDefaultOptions: () => ({})\n};\nexport const getNullValueMatchers = () => [isNullValueMatcher, isNotNullValueMatcher];","map":{"version":3,"names":["ValueMatcherID","isNullValueMatcher","id","isNull","name","description","get","valueIndex","field","value","values","getOptionsDisplayText","isApplicable","getDefaultOptions","isNotNullValueMatcher","isNotNull","getNullValueMatchers"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/matchers/valueMatchers/nullMatchers.ts"],"sourcesContent":["import { Field } from '../../../types/dataFrame';\nimport { ValueMatcherInfo } from '../../../types/transformations';\nimport { ValueMatcherID } from '../ids';\n\nimport { ValueMatcherOptions } from './types';\n\nconst isNullValueMatcher: ValueMatcherInfo<ValueMatcherOptions> = {\n  id: ValueMatcherID.isNull,\n  name: 'Is null',\n  description: 'Match where value for given field is null.',\n  get: () => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values.get(valueIndex);\n      return value == null;\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `Matches all rows where field is null.`;\n  },\n  isApplicable: () => true,\n  getDefaultOptions: () => ({}),\n};\n\nconst isNotNullValueMatcher: ValueMatcherInfo<ValueMatcherOptions> = {\n  id: ValueMatcherID.isNotNull,\n  name: 'Is not null',\n  description: 'Match where value for given field is not null.',\n  get: () => {\n    return (valueIndex: number, field: Field) => {\n      const value = field.values.get(valueIndex);\n      return value != null;\n    };\n  },\n  getOptionsDisplayText: () => {\n    return `Matches all rows where field is not null.`;\n  },\n  isApplicable: () => true,\n  getDefaultOptions: () => ({}),\n};\n\nexport const getNullValueMatchers = (): ValueMatcherInfo[] => [isNullValueMatcher, isNotNullValueMatcher];\n"],"mappings":"AAEA,SAASA,cAAT,QAA+B,QAA/B;AAIA,MAAMC,kBAAyD,GAAG;EAChEC,EAAE,EAAEF,cAAc,CAACG,MAD6C;EAEhEC,IAAI,EAAE,SAF0D;EAGhEC,WAAW,EAAE,4CAHmD;EAIhEC,GAAG,EAAE,MAAM;IACT,OAAO,CAACC,UAAD,EAAqBC,KAArB,KAAsC;MAC3C,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaJ,GAAb,CAAiBC,UAAjB,CAAd;MACA,OAAOE,KAAK,IAAI,IAAhB;IACD,CAHD;EAID,CAT+D;EAUhEE,qBAAqB,EAAE,MAAM;IAC3B,OAAQ,uCAAR;EACD,CAZ+D;EAahEC,YAAY,EAAE,MAAM,IAb4C;EAchEC,iBAAiB,EAAE,OAAO,EAAP;AAd6C,CAAlE;AAiBA,MAAMC,qBAA4D,GAAG;EACnEZ,EAAE,EAAEF,cAAc,CAACe,SADgD;EAEnEX,IAAI,EAAE,aAF6D;EAGnEC,WAAW,EAAE,gDAHsD;EAInEC,GAAG,EAAE,MAAM;IACT,OAAO,CAACC,UAAD,EAAqBC,KAArB,KAAsC;MAC3C,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaJ,GAAb,CAAiBC,UAAjB,CAAd;MACA,OAAOE,KAAK,IAAI,IAAhB;IACD,CAHD;EAID,CATkE;EAUnEE,qBAAqB,EAAE,MAAM;IAC3B,OAAQ,2CAAR;EACD,CAZkE;EAanEC,YAAY,EAAE,MAAM,IAb+C;EAcnEC,iBAAiB,EAAE,OAAO,EAAP;AAdgD,CAArE;AAiBA,OAAO,MAAMG,oBAAoB,GAAG,MAA0B,CAACf,kBAAD,EAAqBa,qBAArB,CAAvD"},"metadata":{},"sourceType":"module"}