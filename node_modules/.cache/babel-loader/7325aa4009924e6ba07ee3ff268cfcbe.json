{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction } from '../actions/cleanUp';\nexport function useCleanup(stateSelector) {\n  const dispatch = useDispatch(); //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({\n        stateSelector: selectorRef.current\n      }));\n    };\n  }, [dispatch]);\n}","map":{"version":3,"names":["useEffect","useRef","useDispatch","cleanUpAction","useCleanup","stateSelector","dispatch","selectorRef","current"],"sources":["/home/soula/grafana/public/app/core/hooks/useCleanup.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,aAAT,QAA6C,oBAA7C;AAEA,OAAO,SAASC,UAAT,CAAuBC,aAAvB,EAAwD;EAC7D,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B,CAD6D,CAE7D;;EACA,MAAMK,WAAW,GAAGN,MAAM,CAACI,aAAD,CAA1B;EACAE,WAAW,CAACC,OAAZ,GAAsBH,aAAtB;EACAL,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXM,QAAQ,CAACH,aAAa,CAAC;QAAEE,aAAa,EAAEE,WAAW,CAACC;MAA7B,CAAD,CAAd,CAAR;IACD,CAFD;EAGD,CAJQ,EAIN,CAACF,QAAD,CAJM,CAAT;AAKD"},"metadata":{},"sourceType":"module"}