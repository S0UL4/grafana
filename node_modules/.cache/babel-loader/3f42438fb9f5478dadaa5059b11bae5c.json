{"ast":null,"code":"interpolateTemplateVars.$inject = [\"templateSrv\"];\nimport angular from 'angular';\nimport { isArray, isNull, isObject, isUndefined } from 'lodash';\nimport { dateTime } from '@grafana/data';\nimport { getTemplateSrv } from 'app/features/templating/template_srv';\nimport coreModule from '../core_module';\ncoreModule.filter('stringSort', () => {\n  return input => {\n    return input.sort();\n  };\n});\ncoreModule.filter('slice', () => {\n  return (arr, start, end) => {\n    if (!isUndefined(arr)) {\n      return arr.slice(start, end);\n    }\n\n    return arr;\n  };\n});\ncoreModule.filter('stringify', () => {\n  return arr => {\n    if (isObject(arr) && !isArray(arr)) {\n      return angular.toJson(arr);\n    } else {\n      return isNull(arr) ? null : arr.toString();\n    }\n  };\n});\ncoreModule.filter('moment', () => {\n  return (date, mode) => {\n    switch (mode) {\n      case 'ago':\n        return dateTime(date).fromNow();\n    }\n\n    return dateTime(date).fromNow();\n  };\n});\n\nfunction interpolateTemplateVars(templateSrv = getTemplateSrv()) {\n  const filterFunc = (text, scope) => {\n    let scopedVars;\n\n    if (scope.ctrl) {\n      scopedVars = (scope.ctrl.panel || scope.ctrl.row).scopedVars;\n    } else {\n      scopedVars = scope.row.scopedVars;\n    }\n\n    return templateSrv.replaceWithText(text, scopedVars);\n  };\n\n  filterFunc.$stateful = true;\n  return filterFunc;\n}\n\ncoreModule.filter('interpolateTemplateVars', interpolateTemplateVars);\nexport default {};","map":{"version":3,"names":["angular","isArray","isNull","isObject","isUndefined","dateTime","getTemplateSrv","coreModule","filter","input","sort","arr","start","end","slice","toJson","toString","date","mode","fromNow","interpolateTemplateVars","templateSrv","filterFunc","text","scope","scopedVars","ctrl","panel","row","replaceWithText","$stateful"],"sources":["/home/soula/grafana/public/app/angular/filters/filters.ts"],"sourcesContent":["import angular from 'angular';\nimport { isArray, isNull, isObject, isUndefined } from 'lodash';\n\nimport { dateTime } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport coreModule from '../core_module';\n\ncoreModule.filter('stringSort', () => {\n  return (input: any) => {\n    return input.sort();\n  };\n});\n\ncoreModule.filter('slice', () => {\n  return (arr: any[], start: any, end: any) => {\n    if (!isUndefined(arr)) {\n      return arr.slice(start, end);\n    }\n    return arr;\n  };\n});\n\ncoreModule.filter('stringify', () => {\n  return (arr: any[]) => {\n    if (isObject(arr) && !isArray(arr)) {\n      return angular.toJson(arr);\n    } else {\n      return isNull(arr) ? null : arr.toString();\n    }\n  };\n});\n\ncoreModule.filter('moment', () => {\n  return (date: string, mode: string) => {\n    switch (mode) {\n      case 'ago':\n        return dateTime(date).fromNow();\n    }\n    return dateTime(date).fromNow();\n  };\n});\n\nfunction interpolateTemplateVars(templateSrv: TemplateSrv = getTemplateSrv()) {\n  const filterFunc: any = (text: string, scope: any) => {\n    let scopedVars;\n    if (scope.ctrl) {\n      scopedVars = (scope.ctrl.panel || scope.ctrl.row).scopedVars;\n    } else {\n      scopedVars = scope.row.scopedVars;\n    }\n\n    return templateSrv.replaceWithText(text, scopedVars);\n  };\n\n  filterFunc.$stateful = true;\n  return filterFunc;\n}\n\ncoreModule.filter('interpolateTemplateVars', interpolateTemplateVars);\nexport default {};\n"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,QAA1B,EAAoCC,WAApC,QAAuD,QAAvD;AAEA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,cAAT,QAA4C,sCAA5C;AAEA,OAAOC,UAAP,MAAuB,gBAAvB;AAEAA,UAAU,CAACC,MAAX,CAAkB,YAAlB,EAAgC,MAAM;EACpC,OAAQC,KAAD,IAAgB;IACrB,OAAOA,KAAK,CAACC,IAAN,EAAP;EACD,CAFD;AAGD,CAJD;AAMAH,UAAU,CAACC,MAAX,CAAkB,OAAlB,EAA2B,MAAM;EAC/B,OAAO,CAACG,GAAD,EAAaC,KAAb,EAAyBC,GAAzB,KAAsC;IAC3C,IAAI,CAACT,WAAW,CAACO,GAAD,CAAhB,EAAuB;MACrB,OAAOA,GAAG,CAACG,KAAJ,CAAUF,KAAV,EAAiBC,GAAjB,CAAP;IACD;;IACD,OAAOF,GAAP;EACD,CALD;AAMD,CAPD;AASAJ,UAAU,CAACC,MAAX,CAAkB,WAAlB,EAA+B,MAAM;EACnC,OAAQG,GAAD,IAAgB;IACrB,IAAIR,QAAQ,CAACQ,GAAD,CAAR,IAAiB,CAACV,OAAO,CAACU,GAAD,CAA7B,EAAoC;MAClC,OAAOX,OAAO,CAACe,MAAR,CAAeJ,GAAf,CAAP;IACD,CAFD,MAEO;MACL,OAAOT,MAAM,CAACS,GAAD,CAAN,GAAc,IAAd,GAAqBA,GAAG,CAACK,QAAJ,EAA5B;IACD;EACF,CAND;AAOD,CARD;AAUAT,UAAU,CAACC,MAAX,CAAkB,QAAlB,EAA4B,MAAM;EAChC,OAAO,CAACS,IAAD,EAAeC,IAAf,KAAgC;IACrC,QAAQA,IAAR;MACE,KAAK,KAAL;QACE,OAAOb,QAAQ,CAACY,IAAD,CAAR,CAAeE,OAAf,EAAP;IAFJ;;IAIA,OAAOd,QAAQ,CAACY,IAAD,CAAR,CAAeE,OAAf,EAAP;EACD,CAND;AAOD,CARD;;AAUA,SAASC,uBAAT,CAAiCC,WAAwB,GAAGf,cAAc,EAA1E,EAA8E;EAC5E,MAAMgB,UAAe,GAAG,CAACC,IAAD,EAAeC,KAAf,KAA8B;IACpD,IAAIC,UAAJ;;IACA,IAAID,KAAK,CAACE,IAAV,EAAgB;MACdD,UAAU,GAAG,CAACD,KAAK,CAACE,IAAN,CAAWC,KAAX,IAAoBH,KAAK,CAACE,IAAN,CAAWE,GAAhC,EAAqCH,UAAlD;IACD,CAFD,MAEO;MACLA,UAAU,GAAGD,KAAK,CAACI,GAAN,CAAUH,UAAvB;IACD;;IAED,OAAOJ,WAAW,CAACQ,eAAZ,CAA4BN,IAA5B,EAAkCE,UAAlC,CAAP;EACD,CATD;;EAWAH,UAAU,CAACQ,SAAX,GAAuB,IAAvB;EACA,OAAOR,UAAP;AACD;;AAEDf,UAAU,CAACC,MAAX,CAAkB,yBAAlB,EAA6CY,uBAA7C;AACA,eAAe,EAAf"},"metadata":{},"sourceType":"module"}