{"ast":null,"code":"const _excluded = [\"key\"];\n\nvar _Label;\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport { isNumber } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { sortThresholds, ThresholdsMode } from '@grafana/data';\nimport { Input, colors, ColorPicker, Icon, ThemeContext, Button, Label, RadioButtonGroup, stylesFactory } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst modes = [{\n  value: ThresholdsMode.Absolute,\n  label: 'Absolute',\n  description: 'Pick thresholds based on the absolute values'\n}, {\n  value: ThresholdsMode.Percentage,\n  label: 'Percentage',\n  description: 'Pick threshold based on the percent between min/max'\n}];\nexport class ThresholdsEditor extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"latestThresholdInputRef\", void 0);\n\n    _defineProperty(this, \"onAddThreshold\", () => {\n      const {\n        steps\n      } = this.state;\n      let nextValue = 0;\n\n      if (steps.length > 1) {\n        nextValue = steps[steps.length - 1].value + 10;\n      }\n\n      let color = colors.filter(c => !steps.some(t => t.color === c))[1];\n\n      if (!color) {\n        // Default color when all colors are used\n        color = '#CCCCCC';\n      }\n\n      const add = {\n        value: nextValue,\n        color: color,\n        key: counter++\n      };\n      const newThresholds = [...steps, add];\n      sortThresholds(newThresholds);\n      this.setState({\n        steps: newThresholds\n      }, () => {\n        if (this.latestThresholdInputRef.current) {\n          this.latestThresholdInputRef.current.focus();\n        }\n\n        this.onChange();\n      });\n    });\n\n    _defineProperty(this, \"onRemoveThreshold\", threshold => {\n      const {\n        steps\n      } = this.state;\n\n      if (!steps.length) {\n        return;\n      } // Don't remove index 0\n\n\n      if (threshold.key === steps[0].key) {\n        return;\n      }\n\n      this.setState({\n        steps: steps.filter(t => t.key !== threshold.key)\n      }, this.onChange);\n    });\n\n    _defineProperty(this, \"onChangeThresholdValue\", (event, threshold) => {\n      const cleanValue = event.target.value.replace(/,/g, '.');\n      const parsedValue = parseFloat(cleanValue);\n      const value = isNaN(parsedValue) ? '' : parsedValue;\n      const steps = this.state.steps.map(t => {\n        if (t.key === threshold.key) {\n          t = Object.assign({}, t, {\n            value: value\n          });\n        }\n\n        return t;\n      });\n\n      if (steps.length) {\n        steps[0].value = -Infinity;\n      }\n\n      sortThresholds(steps);\n      this.setState({\n        steps\n      });\n    });\n\n    _defineProperty(this, \"onChangeThresholdColor\", (threshold, color) => {\n      const {\n        steps\n      } = this.state;\n      const newThresholds = steps.map(t => {\n        if (t.key === threshold.key) {\n          t = Object.assign({}, t, {\n            color: color\n          });\n        }\n\n        return t;\n      });\n      this.setState({\n        steps: newThresholds\n      }, this.onChange);\n    });\n\n    _defineProperty(this, \"onBlur\", () => {\n      const steps = [...this.state.steps];\n      sortThresholds(steps);\n      this.setState({\n        steps\n      }, this.onChange);\n    });\n\n    _defineProperty(this, \"onChange\", () => {\n      this.props.onChange(thresholdsWithoutKey(this.props.thresholds, this.state.steps));\n    });\n\n    _defineProperty(this, \"onModeChanged\", value => {\n      this.props.onChange(Object.assign({}, this.props.thresholds, {\n        mode: value\n      }));\n    });\n\n    const _steps = toThresholdsWithKey(props.thresholds.steps);\n\n    _steps[0].value = -Infinity;\n    this.state = {\n      steps: _steps\n    };\n    this.latestThresholdInputRef = /*#__PURE__*/React.createRef();\n  }\n\n  renderInput(threshold, styles, idx) {\n    const isPercent = this.props.thresholds.mode === ThresholdsMode.Percentage;\n    const ariaLabel = `Threshold ${idx + 1}`;\n\n    if (!isFinite(threshold.value)) {\n      return /*#__PURE__*/_jsx(Input, {\n        type: \"text\",\n        value: 'Base',\n        \"aria-label\": ariaLabel,\n        disabled: true,\n        prefix: /*#__PURE__*/_jsx(\"div\", {\n          className: styles.colorPicker,\n          children: /*#__PURE__*/_jsx(ColorPicker, {\n            color: threshold.color,\n            onChange: color => this.onChangeThresholdColor(threshold, color),\n            enableNamedColors: true\n          })\n        })\n      });\n    }\n\n    return /*#__PURE__*/_jsx(Input, {\n      type: \"number\",\n      step: \"0.0001\",\n      onChange: event => this.onChangeThresholdValue(event, threshold),\n      value: threshold.value,\n      \"aria-label\": ariaLabel,\n      ref: idx === 0 ? this.latestThresholdInputRef : null,\n      onBlur: this.onBlur,\n      prefix: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.inputPrefix,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: styles.colorPicker,\n          children: /*#__PURE__*/_jsx(ColorPicker, {\n            color: threshold.color,\n            onChange: color => this.onChangeThresholdColor(threshold, color),\n            enableNamedColors: true\n          })\n        }), isPercent && /*#__PURE__*/_jsx(\"div\", {\n          className: styles.percentIcon,\n          children: \"%\"\n        })]\n      }),\n      suffix: /*#__PURE__*/_jsx(Icon, {\n        className: styles.trashIcon,\n        name: \"trash-alt\",\n        onClick: () => this.onRemoveThreshold(threshold)\n      })\n    }, isPercent.toString());\n  }\n\n  render() {\n    const {\n      thresholds\n    } = this.props;\n    const {\n      steps\n    } = this.state;\n    return /*#__PURE__*/_jsx(ThemeContext.Consumer, {\n      children: theme => {\n        const styles = getStyles(theme.v1);\n        return /*#__PURE__*/_jsxs(\"div\", {\n          className: styles.wrapper,\n          children: [/*#__PURE__*/_jsx(Button, {\n            size: \"sm\",\n            icon: \"plus\",\n            onClick: () => this.onAddThreshold(),\n            variant: \"secondary\",\n            className: styles.addButton,\n            fullWidth: true,\n            children: \"Add threshold\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.thresholds,\n            children: steps.slice(0).reverse().map((threshold, idx) => /*#__PURE__*/_jsx(\"div\", {\n              className: styles.item,\n              children: this.renderInput(threshold, styles, idx)\n            }, `${threshold.key}`))\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            children: [_Label || (_Label = /*#__PURE__*/_jsx(Label, {\n              description: \"Percentage means thresholds relative to min & max\",\n              children: \"Thresholds mode\"\n            })), /*#__PURE__*/_jsx(RadioButtonGroup, {\n              options: modes,\n              onChange: this.onModeChanged,\n              value: thresholds.mode\n            })]\n          })]\n        });\n      }\n    });\n  }\n\n}\nlet counter = 100;\n\nfunction toThresholdsWithKey(steps) {\n  if (!steps || steps.length === 0) {\n    steps = [{\n      value: -Infinity,\n      color: 'green'\n    }];\n  }\n\n  return steps.filter((t, i) => isNumber(t.value) || i === 0).map(t => {\n    return {\n      color: t.color,\n      value: t.value === null ? -Infinity : t.value,\n      key: counter++\n    };\n  });\n}\n\nexport function thresholdsWithoutKey(thresholds, steps) {\n  var _thresholds$mode;\n\n  const mode = (_thresholds$mode = thresholds.mode) !== null && _thresholds$mode !== void 0 ? _thresholds$mode : ThresholdsMode.Absolute;\n  return {\n    mode,\n    steps: steps.map(t => {\n      const rest = _objectWithoutPropertiesLoose(t, _excluded);\n\n      return rest; // everything except key\n    })\n  };\n}\nconst getStyles = stylesFactory(theme => {\n  return {\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    thresholds: css`\n      display: flex;\n      flex-direction: column;\n      margin-bottom: ${theme.spacing.formSpacingBase * 2}px;\n    `,\n    item: css`\n      margin-bottom: ${theme.spacing.sm};\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n    `,\n    colorPicker: css`\n      padding: 0 ${theme.spacing.sm};\n    `,\n    addButton: css`\n      margin-bottom: ${theme.spacing.sm};\n    `,\n    percentIcon: css`\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.textWeak};\n    `,\n    inputPrefix: css`\n      display: flex;\n      align-items: center;\n    `,\n    trashIcon: css`\n      color: ${theme.colors.textWeak};\n      cursor: pointer;\n\n      &:hover {\n        color: ${theme.colors.text};\n      }\n    `\n  };\n});","map":{"version":3,"names":["css","isNumber","React","PureComponent","sortThresholds","ThresholdsMode","Input","colors","ColorPicker","Icon","ThemeContext","Button","Label","RadioButtonGroup","stylesFactory","modes","value","Absolute","label","description","Percentage","ThresholdsEditor","constructor","props","steps","state","nextValue","length","color","filter","c","some","t","add","key","counter","newThresholds","setState","latestThresholdInputRef","current","focus","onChange","threshold","event","cleanValue","target","replace","parsedValue","parseFloat","isNaN","map","Infinity","thresholdsWithoutKey","thresholds","mode","toThresholdsWithKey","createRef","renderInput","styles","idx","isPercent","ariaLabel","isFinite","colorPicker","onChangeThresholdColor","onChangeThresholdValue","onBlur","inputPrefix","percentIcon","trashIcon","onRemoveThreshold","toString","render","theme","getStyles","v1","wrapper","onAddThreshold","addButton","slice","reverse","item","onModeChanged","i","rest","spacing","formSpacingBase","sm","typography","size","textWeak","text"],"sources":["/home/soula/grafana/public/app/features/dimensions/editors/ThresholdsEditor/ThresholdsEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { isNumber } from 'lodash';\nimport React, { PureComponent, ChangeEvent } from 'react';\n\nimport {\n  Threshold,\n  sortThresholds,\n  ThresholdsConfig,\n  ThresholdsMode,\n  SelectableValue,\n  GrafanaTheme,\n} from '@grafana/data';\nimport {\n  Input,\n  colors,\n  ColorPicker,\n  Icon,\n  ThemeContext,\n  Button,\n  Label,\n  RadioButtonGroup,\n  stylesFactory,\n} from '@grafana/ui';\n\nconst modes: Array<SelectableValue<ThresholdsMode>> = [\n  { value: ThresholdsMode.Absolute, label: 'Absolute', description: 'Pick thresholds based on the absolute values' },\n  {\n    value: ThresholdsMode.Percentage,\n    label: 'Percentage',\n    description: 'Pick threshold based on the percent between min/max',\n  },\n];\n\nexport interface Props {\n  thresholds: ThresholdsConfig;\n  onChange: (thresholds: ThresholdsConfig) => void;\n}\n\ninterface State {\n  steps: ThresholdWithKey[];\n}\n\nexport class ThresholdsEditor extends PureComponent<Props, State> {\n  private latestThresholdInputRef: React.RefObject<HTMLInputElement>;\n\n  constructor(props: Props) {\n    super(props);\n\n    const steps = toThresholdsWithKey(props.thresholds!.steps);\n    steps[0].value = -Infinity;\n\n    this.state = { steps };\n    this.latestThresholdInputRef = React.createRef();\n  }\n\n  onAddThreshold = () => {\n    const { steps } = this.state;\n\n    let nextValue = 0;\n\n    if (steps.length > 1) {\n      nextValue = steps[steps.length - 1].value + 10;\n    }\n\n    let color = colors.filter((c) => !steps.some((t) => t.color === c))[1];\n    if (!color) {\n      // Default color when all colors are used\n      color = '#CCCCCC';\n    }\n\n    const add = {\n      value: nextValue,\n      color: color,\n      key: counter++,\n    };\n\n    const newThresholds = [...steps, add];\n    sortThresholds(newThresholds);\n\n    this.setState({ steps: newThresholds }, () => {\n      if (this.latestThresholdInputRef.current) {\n        this.latestThresholdInputRef.current.focus();\n      }\n      this.onChange();\n    });\n  };\n\n  onRemoveThreshold = (threshold: ThresholdWithKey) => {\n    const { steps } = this.state;\n\n    if (!steps.length) {\n      return;\n    }\n\n    // Don't remove index 0\n    if (threshold.key === steps[0].key) {\n      return;\n    }\n\n    this.setState({ steps: steps.filter((t) => t.key !== threshold.key) }, this.onChange);\n  };\n\n  onChangeThresholdValue = (event: ChangeEvent<HTMLInputElement>, threshold: ThresholdWithKey) => {\n    const cleanValue = event.target.value.replace(/,/g, '.');\n    const parsedValue = parseFloat(cleanValue);\n    const value = isNaN(parsedValue) ? '' : parsedValue;\n\n    const steps = this.state.steps.map((t) => {\n      if (t.key === threshold.key) {\n        t = { ...t, value: value as number };\n      }\n      return t;\n    });\n\n    if (steps.length) {\n      steps[0].value = -Infinity;\n    }\n\n    sortThresholds(steps);\n    this.setState({ steps });\n  };\n\n  onChangeThresholdColor = (threshold: ThresholdWithKey, color: string) => {\n    const { steps } = this.state;\n\n    const newThresholds = steps.map((t) => {\n      if (t.key === threshold.key) {\n        t = { ...t, color: color };\n      }\n\n      return t;\n    });\n\n    this.setState({ steps: newThresholds }, this.onChange);\n  };\n\n  onBlur = () => {\n    const steps = [...this.state.steps];\n    sortThresholds(steps);\n    this.setState({ steps }, this.onChange);\n  };\n\n  onChange = () => {\n    this.props.onChange(thresholdsWithoutKey(this.props.thresholds, this.state.steps));\n  };\n\n  onModeChanged = (value?: ThresholdsMode) => {\n    this.props.onChange({\n      ...this.props.thresholds,\n      mode: value!,\n    });\n  };\n\n  renderInput(threshold: ThresholdWithKey, styles: ThresholdStyles, idx: number) {\n    const isPercent = this.props.thresholds.mode === ThresholdsMode.Percentage;\n\n    const ariaLabel = `Threshold ${idx + 1}`;\n    if (!isFinite(threshold.value)) {\n      return (\n        <Input\n          type=\"text\"\n          value={'Base'}\n          aria-label={ariaLabel}\n          disabled\n          prefix={\n            <div className={styles.colorPicker}>\n              <ColorPicker\n                color={threshold.color}\n                onChange={(color) => this.onChangeThresholdColor(threshold, color)}\n                enableNamedColors={true}\n              />\n            </div>\n          }\n        />\n      );\n    }\n\n    return (\n      <Input\n        type=\"number\"\n        step=\"0.0001\"\n        key={isPercent.toString()}\n        onChange={(event: ChangeEvent<HTMLInputElement>) => this.onChangeThresholdValue(event, threshold)}\n        value={threshold.value}\n        aria-label={ariaLabel}\n        ref={idx === 0 ? this.latestThresholdInputRef : null}\n        onBlur={this.onBlur}\n        prefix={\n          <div className={styles.inputPrefix}>\n            <div className={styles.colorPicker}>\n              <ColorPicker\n                color={threshold.color}\n                onChange={(color) => this.onChangeThresholdColor(threshold, color)}\n                enableNamedColors={true}\n              />\n            </div>\n            {isPercent && <div className={styles.percentIcon}>%</div>}\n          </div>\n        }\n        suffix={\n          <Icon className={styles.trashIcon} name=\"trash-alt\" onClick={() => this.onRemoveThreshold(threshold)} />\n        }\n      />\n    );\n  }\n\n  render() {\n    const { thresholds } = this.props;\n    const { steps } = this.state;\n\n    return (\n      <ThemeContext.Consumer>\n        {(theme) => {\n          const styles = getStyles(theme.v1);\n          return (\n            <div className={styles.wrapper}>\n              <Button\n                size=\"sm\"\n                icon=\"plus\"\n                onClick={() => this.onAddThreshold()}\n                variant=\"secondary\"\n                className={styles.addButton}\n                fullWidth\n              >\n                Add threshold\n              </Button>\n              <div className={styles.thresholds}>\n                {steps\n                  .slice(0)\n                  .reverse()\n                  .map((threshold, idx) => (\n                    <div className={styles.item} key={`${threshold.key}`}>\n                      {this.renderInput(threshold, styles, idx)}\n                    </div>\n                  ))}\n              </div>\n\n              <div>\n                <Label description=\"Percentage means thresholds relative to min & max\">Thresholds mode</Label>\n                <RadioButtonGroup options={modes} onChange={this.onModeChanged} value={thresholds.mode} />\n              </div>\n            </div>\n          );\n        }}\n      </ThemeContext.Consumer>\n    );\n  }\n}\n\ninterface ThresholdWithKey extends Threshold {\n  key: number;\n}\n\nlet counter = 100;\n\nfunction toThresholdsWithKey(steps?: Threshold[]): ThresholdWithKey[] {\n  if (!steps || steps.length === 0) {\n    steps = [{ value: -Infinity, color: 'green' }];\n  }\n\n  return steps\n    .filter((t, i) => isNumber(t.value) || i === 0)\n    .map((t) => {\n      return {\n        color: t.color,\n        value: t.value === null ? -Infinity : t.value,\n        key: counter++,\n      };\n    });\n}\n\nexport function thresholdsWithoutKey(thresholds: ThresholdsConfig, steps: ThresholdWithKey[]): ThresholdsConfig {\n  const mode = thresholds.mode ?? ThresholdsMode.Absolute;\n  return {\n    mode,\n    steps: steps.map((t) => {\n      const { key, ...rest } = t;\n      return rest; // everything except key\n    }),\n  };\n}\n\ninterface ThresholdStyles {\n  wrapper: string;\n  thresholds: string;\n  item: string;\n  colorPicker: string;\n  addButton: string;\n  percentIcon: string;\n  inputPrefix: string;\n  trashIcon: string;\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme): ThresholdStyles => {\n  return {\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    thresholds: css`\n      display: flex;\n      flex-direction: column;\n      margin-bottom: ${theme.spacing.formSpacingBase * 2}px;\n    `,\n    item: css`\n      margin-bottom: ${theme.spacing.sm};\n\n      &:last-child {\n        margin-bottom: 0;\n      }\n    `,\n    colorPicker: css`\n      padding: 0 ${theme.spacing.sm};\n    `,\n    addButton: css`\n      margin-bottom: ${theme.spacing.sm};\n    `,\n    percentIcon: css`\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.textWeak};\n    `,\n    inputPrefix: css`\n      display: flex;\n      align-items: center;\n    `,\n    trashIcon: css`\n      color: ${theme.colors.textWeak};\n      cursor: pointer;\n\n      &:hover {\n        color: ${theme.colors.text};\n      }\n    `,\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}