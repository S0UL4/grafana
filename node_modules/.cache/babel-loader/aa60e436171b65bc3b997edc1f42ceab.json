{"ast":null,"code":"import { cx } from '@emotion/css';\nimport { Global } from '@emotion/react';\nimport SliderComponent from 'rc-slider';\nimport React, { useState, useCallback } from 'react';\nimport { useTheme2 } from '../../themes/ThemeContext';\nimport { Input } from '../Input/Input';\nimport { getStyles } from './styles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\n/**\n * @public\n */\nexport const Slider = ({\n  min,\n  max,\n  onChange,\n  onAfterChange,\n  orientation = 'horizontal',\n  reverse,\n  step,\n  value,\n  ariaLabelForHandle,\n  marks,\n  included\n}) => {\n  const isHorizontal = orientation === 'horizontal';\n  const theme = useTheme2();\n  const styles = getStyles(theme, isHorizontal, Boolean(marks));\n  const SliderWithTooltip = SliderComponent;\n  const [sliderValue, setSliderValue] = useState(value !== null && value !== void 0 ? value : min);\n  const onSliderChange = useCallback(v => {\n    setSliderValue(v);\n\n    if (onChange) {\n      onChange(v);\n    }\n  }, [setSliderValue, onChange]);\n  const onSliderInputChange = useCallback(e => {\n    let v = +e.target.value;\n\n    if (Number.isNaN(v)) {\n      v = 0;\n    }\n\n    setSliderValue(v);\n\n    if (onChange) {\n      onChange(v);\n    }\n\n    if (onAfterChange) {\n      onAfterChange(v);\n    }\n  }, [onChange, onAfterChange]); // Check for min/max on input blur so user is able to enter\n  // custom values that might seem above/below min/max on first keystroke\n\n  const onSliderInputBlur = useCallback(e => {\n    const v = +e.target.value;\n\n    if (v > max) {\n      setSliderValue(max);\n    } else if (v < min) {\n      setSliderValue(min);\n    }\n  }, [max, min]);\n  const sliderInputClassNames = !isHorizontal ? [styles.sliderInputVertical] : [];\n  const sliderInputFieldClassNames = !isHorizontal ? [styles.sliderInputFieldVertical] : [];\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: cx(styles.container, styles.slider),\n    children: [/*#__PURE__*/_jsx(Global, {\n      styles: styles.tooltip\n    }), /*#__PURE__*/_jsxs(\"label\", {\n      className: cx(styles.sliderInput, ...sliderInputClassNames),\n      children: [/*#__PURE__*/_jsx(SliderWithTooltip, {\n        min: min,\n        max: max,\n        step: step,\n        defaultValue: value,\n        value: sliderValue,\n        onChange: onSliderChange,\n        onAfterChange: onAfterChange,\n        vertical: !isHorizontal,\n        reverse: reverse,\n        ariaLabelForHandle: ariaLabelForHandle,\n        marks: marks,\n        included: included\n      }), /*#__PURE__*/_jsx(Input, {\n        type: \"text\",\n        className: cx(styles.sliderInputField, ...sliderInputFieldClassNames),\n        value: `${sliderValue}` // to fix the react leading zero issue\n        ,\n        onChange: onSliderInputChange,\n        onBlur: onSliderInputBlur,\n        min: min,\n        max: max\n      })]\n    })]\n  });\n};\nSlider.displayName = 'Slider';","map":{"version":3,"names":["cx","Global","SliderComponent","React","useState","useCallback","useTheme2","Input","getStyles","Slider","min","max","onChange","onAfterChange","orientation","reverse","step","value","ariaLabelForHandle","marks","included","isHorizontal","theme","styles","Boolean","SliderWithTooltip","sliderValue","setSliderValue","onSliderChange","v","onSliderInputChange","e","target","Number","isNaN","onSliderInputBlur","sliderInputClassNames","sliderInputVertical","sliderInputFieldClassNames","sliderInputFieldVertical","container","slider","tooltip","sliderInput","sliderInputField","displayName"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Slider/Slider.tsx"],"sourcesContent":["import { cx } from '@emotion/css';\nimport { Global } from '@emotion/react';\nimport SliderComponent from 'rc-slider';\nimport React, { useState, useCallback, ChangeEvent, FunctionComponent, FocusEvent } from 'react';\n\nimport { useTheme2 } from '../../themes/ThemeContext';\nimport { Input } from '../Input/Input';\n\nimport { getStyles } from './styles';\nimport { SliderProps } from './types';\n\n/**\n * @public\n */\nexport const Slider: FunctionComponent<SliderProps> = ({\n  min,\n  max,\n  onChange,\n  onAfterChange,\n  orientation = 'horizontal',\n  reverse,\n  step,\n  value,\n  ariaLabelForHandle,\n  marks,\n  included,\n}) => {\n  const isHorizontal = orientation === 'horizontal';\n  const theme = useTheme2();\n  const styles = getStyles(theme, isHorizontal, Boolean(marks));\n  const SliderWithTooltip = SliderComponent;\n  const [sliderValue, setSliderValue] = useState<number>(value ?? min);\n\n  const onSliderChange = useCallback(\n    (v: number) => {\n      setSliderValue(v);\n\n      if (onChange) {\n        onChange(v);\n      }\n    },\n    [setSliderValue, onChange]\n  );\n\n  const onSliderInputChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      let v = +e.target.value;\n\n      if (Number.isNaN(v)) {\n        v = 0;\n      }\n\n      setSliderValue(v);\n\n      if (onChange) {\n        onChange(v);\n      }\n\n      if (onAfterChange) {\n        onAfterChange(v);\n      }\n    },\n    [onChange, onAfterChange]\n  );\n\n  // Check for min/max on input blur so user is able to enter\n  // custom values that might seem above/below min/max on first keystroke\n  const onSliderInputBlur = useCallback(\n    (e: FocusEvent<HTMLInputElement>) => {\n      const v = +e.target.value;\n\n      if (v > max) {\n        setSliderValue(max);\n      } else if (v < min) {\n        setSliderValue(min);\n      }\n    },\n    [max, min]\n  );\n\n  const sliderInputClassNames = !isHorizontal ? [styles.sliderInputVertical] : [];\n  const sliderInputFieldClassNames = !isHorizontal ? [styles.sliderInputFieldVertical] : [];\n\n  return (\n    <div className={cx(styles.container, styles.slider)}>\n      {/** Slider tooltip's parent component is body and therefore we need Global component to do css overrides for it. */}\n      <Global styles={styles.tooltip} />\n      <label className={cx(styles.sliderInput, ...sliderInputClassNames)}>\n        <SliderWithTooltip\n          min={min}\n          max={max}\n          step={step}\n          defaultValue={value}\n          value={sliderValue}\n          onChange={onSliderChange}\n          onAfterChange={onAfterChange}\n          vertical={!isHorizontal}\n          reverse={reverse}\n          ariaLabelForHandle={ariaLabelForHandle}\n          marks={marks}\n          included={included}\n        />\n        {/* Uses text input so that the number spinners are not shown */}\n        <Input\n          type=\"text\"\n          className={cx(styles.sliderInputField, ...sliderInputFieldClassNames)}\n          value={`${sliderValue}`} // to fix the react leading zero issue\n          onChange={onSliderInputChange}\n          onBlur={onSliderInputBlur}\n          min={min}\n          max={max}\n        />\n      </label>\n    </div>\n  );\n};\n\nSlider.displayName = 'Slider';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}