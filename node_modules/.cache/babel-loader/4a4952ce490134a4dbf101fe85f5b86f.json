{"ast":null,"code":"export let DashboardSearchItemType;\n/**\n * @deprecated\n */\n\n(function (DashboardSearchItemType) {\n  DashboardSearchItemType[\"DashDB\"] = \"dash-db\";\n  DashboardSearchItemType[\"DashHome\"] = \"dash-home\";\n  DashboardSearchItemType[\"DashFolder\"] = \"dash-folder\";\n})(DashboardSearchItemType || (DashboardSearchItemType = {}));\n\nexport let SearchLayout;\n\n(function (SearchLayout) {\n  SearchLayout[\"List\"] = \"list\";\n  SearchLayout[\"Folders\"] = \"folders\";\n  SearchLayout[\"Grid\"] = \"grid\";\n})(SearchLayout || (SearchLayout = {}));","map":{"version":3,"names":["DashboardSearchItemType","SearchLayout"],"sources":["/home/soula/grafana/public/app/features/search/types.ts"],"sourcesContent":["import { Dispatch } from 'react';\nimport { Action } from 'redux';\n\nimport { SelectableValue, WithAccessControlMetadata } from '@grafana/data';\n\nimport { FolderInfo } from '../../types';\n\nexport enum DashboardSearchItemType {\n  DashDB = 'dash-db',\n  DashHome = 'dash-home',\n  DashFolder = 'dash-folder',\n}\n\n/**\n * @deprecated\n */\nexport interface DashboardSection {\n  id: number;\n  uid?: string;\n  title: string;\n  expanded?: boolean;\n  url: string;\n  icon?: string;\n  score?: number;\n  checked?: boolean;\n  items: DashboardSectionItem[];\n  toggle?: (section: DashboardSection) => Promise<DashboardSection>;\n  selected?: boolean;\n  type: DashboardSearchItemType;\n  slug?: string;\n  itemsFetching?: boolean;\n}\n\n/**\n * @deprecated\n */\nexport interface DashboardSectionItem {\n  checked?: boolean;\n  folderId?: number;\n  folderTitle?: string;\n  folderUid?: string;\n  folderUrl?: string;\n  id: number;\n  isStarred: boolean;\n  selected?: boolean;\n  tags: string[];\n  title: string;\n  type: DashboardSearchItemType;\n  icon?: string; // used for grid view\n  uid?: string;\n  uri: string;\n  url: string;\n  sortMeta?: number;\n  sortMetaName?: string;\n}\n\nexport interface DashboardSearchHit extends DashboardSectionItem, DashboardSection, WithAccessControlMetadata {}\n\nexport interface DashboardTag {\n  term: string;\n  count: number;\n}\n\nexport interface SearchAction extends Action {\n  payload?: any;\n}\n\nexport interface UidsToDelete {\n  folders: string[];\n  dashboards: string[];\n}\n\nexport interface DashboardQuery {\n  query: string;\n  tag: string[];\n  starred: boolean;\n  skipRecent: boolean;\n  skipStarred: boolean;\n  folderIds: number[];\n  datasource?: string;\n  sort: SelectableValue | null;\n  // Save sorting data between layouts\n  prevSort: SelectableValue | null;\n  layout: SearchLayout;\n}\n\nexport type SearchReducer<S> = [S, Dispatch<SearchAction>];\ninterface UseSearchParams {\n  queryParsing?: boolean;\n  searchCallback?: (folderUid: string | undefined) => any;\n  folderUid?: string;\n}\n\nexport type UseSearch = <S>(\n  query: DashboardQuery,\n  reducer: SearchReducer<S>,\n  params: UseSearchParams\n) => { state: S; dispatch: Dispatch<SearchAction>; onToggleSection: (section: DashboardSection) => void };\n\nexport type OnToggleChecked = (item: DashboardSectionItem | DashboardSection) => void;\nexport type OnDeleteItems = (folders: string[], dashboards: string[]) => void;\nexport type OnMoveItems = (selectedDashboards: DashboardSectionItem[], folder: FolderInfo | null) => void;\n\nexport enum SearchLayout {\n  List = 'list',\n  Folders = 'folders',\n  Grid = 'grid', // preview\n}\n\nexport interface SearchQueryParams {\n  query?: string | null;\n  sort?: string | null;\n  starred?: boolean | null;\n  tag?: string[] | null;\n  layout?: SearchLayout | null;\n  folder?: string | null;\n}\n\n// new Search Types\nexport type OnMoveOrDeleleSelectedItems = () => void;\n"],"mappings":"AAOA,WAAYA,uBAAZ;AAMA;AACA;AACA;;WARYA,uB;EAAAA,uB;EAAAA,uB;EAAAA,uB;GAAAA,uB,KAAAA,uB;;AAgGZ,WAAYC,YAAZ;;WAAYA,Y;EAAAA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,KAAAA,Y"},"metadata":{},"sourceType":"module"}