{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { memo } from 'react';\nimport { connect } from 'react-redux';\nimport { useAsync } from 'react-use';\nimport { locationUtil } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { loadFolderPage } from '../loaders';\nimport ManageDashboards from './ManageDashboards';\nimport ManageDashboardsNew from './ManageDashboardsNew';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const DashboardListPage = /*#__PURE__*/memo(({\n  navModel,\n  match,\n  location\n}) => {\n  var _value$pageNavModel;\n\n  const {\n    loading,\n    value\n  } = useAsync(() => {\n    const uid = match.params.uid;\n    const url = location.pathname;\n\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({\n        pageNavModel: navModel\n      });\n    }\n\n    return loadFolderPage(uid).then(({\n      folder,\n      folderNav\n    }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        locationService.push(path);\n      }\n\n      return {\n        folder,\n        pageNavModel: Object.assign({}, navModel, {\n          main: folderNav\n        })\n      };\n    });\n  }, [match.params.uid]);\n  return /*#__PURE__*/_jsx(Page, {\n    navModel: (_value$pageNavModel = value === null || value === void 0 ? void 0 : value.pageNavModel) !== null && _value$pageNavModel !== void 0 ? _value$pageNavModel : navModel,\n    children: Boolean(config.featureToggles.panelTitleSearch) ? /*#__PURE__*/_jsx(Page.Contents, {\n      isLoading: loading,\n      className: css`\n            display: flex;\n            flex-direction: column;\n            overflow: hidden;\n          `,\n      children: /*#__PURE__*/_jsx(ManageDashboardsNew, {\n        folder: value === null || value === void 0 ? void 0 : value.folder\n      })\n    }) : /*#__PURE__*/_jsx(Page.Contents, {\n      isLoading: loading,\n      children: /*#__PURE__*/_jsx(ManageDashboards, {\n        folder: value === null || value === void 0 ? void 0 : value.folder\n      })\n    })\n  });\n});\nDashboardListPage.displayName = 'DashboardListPage';\n\nconst mapStateToProps = state => {\n  return {\n    navModel: getNavModel(state.navIndex, 'manage-dashboards')\n  };\n};\n\nexport default connect(mapStateToProps)(DashboardListPage);","map":{"version":3,"names":["css","React","memo","connect","useAsync","locationUtil","config","locationService","Page","getNavModel","loadFolderPage","ManageDashboards","ManageDashboardsNew","DashboardListPage","navModel","match","location","loading","value","uid","params","url","pathname","startsWith","Promise","resolve","pageNavModel","then","folder","folderNav","path","stripBaseFromUrl","push","main","Boolean","featureToggles","panelTitleSearch","displayName","mapStateToProps","state","navIndex"],"sources":["/home/soula/grafana/public/app/features/search/components/DashboardListPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC, memo } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { useAsync } from 'react-use';\n\nimport { NavModel, locationUtil } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { FolderDTO, StoreState } from 'app/types';\n\nimport { GrafanaRouteComponentProps } from '../../../core/navigation/types';\nimport { loadFolderPage } from '../loaders';\n\nimport ManageDashboards from './ManageDashboards';\nimport ManageDashboardsNew from './ManageDashboardsNew';\n\nexport interface DashboardListPageRouteParams {\n  uid?: string;\n  slug?: string;\n}\n\ninterface DashboardListPageConnectedProps {\n  navModel: NavModel;\n}\ninterface Props extends GrafanaRouteComponentProps<DashboardListPageRouteParams>, DashboardListPageConnectedProps {}\n\nexport const DashboardListPage: FC<Props> = memo(({ navModel, match, location }) => {\n  const { loading, value } = useAsync<() => Promise<{ folder?: FolderDTO; pageNavModel: NavModel }>>(() => {\n    const uid = match.params.uid;\n    const url = location.pathname;\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({ pageNavModel: navModel });\n    }\n\n    return loadFolderPage(uid!).then(({ folder, folderNav }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        locationService.push(path);\n      }\n\n      return { folder, pageNavModel: { ...navModel, main: folderNav } };\n    });\n  }, [match.params.uid]);\n\n  return (\n    <Page navModel={value?.pageNavModel ?? navModel}>\n      {Boolean(config.featureToggles.panelTitleSearch) ? (\n        <Page.Contents\n          isLoading={loading}\n          className={css`\n            display: flex;\n            flex-direction: column;\n            overflow: hidden;\n          `}\n        >\n          <ManageDashboardsNew folder={value?.folder} />\n        </Page.Contents>\n      ) : (\n        <Page.Contents isLoading={loading}>\n          <ManageDashboards folder={value?.folder} />\n        </Page.Contents>\n      )}\n    </Page>\n  );\n});\n\nDashboardListPage.displayName = 'DashboardListPage';\n\nconst mapStateToProps: MapStateToProps<DashboardListPageConnectedProps, {}, StoreState> = (state) => {\n  return {\n    navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n  };\n};\n\nexport default connect(mapStateToProps)(DashboardListPage);\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,IAAoBC,IAApB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,SAAmBC,YAAnB,QAAuC,eAAvC;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,kBAAxC;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAIA,SAASC,cAAT,QAA+B,YAA/B;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;;AAYA,OAAO,MAAMC,iBAA4B,gBAAGX,IAAI,CAAC,CAAC;EAAEY,QAAF;EAAYC,KAAZ;EAAmBC;AAAnB,CAAD,KAAmC;EAAA;;EAClF,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAqBd,QAAQ,CAAgE,MAAM;IACvG,MAAMe,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaD,GAAzB;IACA,MAAME,GAAG,GAAGL,QAAQ,CAACM,QAArB;;IACA,IAAI,CAACH,GAAD,IAAQ,CAACE,GAAG,CAACE,UAAJ,CAAe,aAAf,CAAb,EAA4C;MAC1C,OAAOC,OAAO,CAACC,OAAR,CAAgB;QAAEC,YAAY,EAAEZ;MAAhB,CAAhB,CAAP;IACD;;IAED,OAAOJ,cAAc,CAACS,GAAD,CAAd,CAAqBQ,IAArB,CAA0B,CAAC;MAAEC,MAAF;MAAUC;IAAV,CAAD,KAA2B;MAC1D,MAAMC,IAAI,GAAGzB,YAAY,CAAC0B,gBAAb,CAA8BH,MAAM,CAACP,GAArC,CAAb;;MAEA,IAAIS,IAAI,KAAKd,QAAQ,CAACM,QAAtB,EAAgC;QAC9Bf,eAAe,CAACyB,IAAhB,CAAqBF,IAArB;MACD;;MAED,OAAO;QAAEF,MAAF;QAAUF,YAAY,oBAAOZ,QAAP;UAAiBmB,IAAI,EAAEJ;QAAvB;MAAtB,CAAP;IACD,CARM,CAAP;EASD,CAhBkC,EAgBhC,CAACd,KAAK,CAACK,MAAN,CAAaD,GAAd,CAhBgC,CAAnC;EAkBA,oBACE,KAAC,IAAD;IAAM,QAAQ,yBAAED,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEQ,YAAT,qEAAyBZ,QAAvC;IAAA,UACGoB,OAAO,CAAC5B,MAAM,CAAC6B,cAAP,CAAsBC,gBAAvB,CAAP,gBACC,KAAC,IAAD,CAAM,QAAN;MACE,SAAS,EAAEnB,OADb;MAEE,SAAS,EAAEjB,GAAI;AACzB;AACA;AACA;AACA,WANQ;MAAA,uBAQE,KAAC,mBAAD;QAAqB,MAAM,EAAEkB,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEU;MAApC;IARF,EADD,gBAYC,KAAC,IAAD,CAAM,QAAN;MAAe,SAAS,EAAEX,OAA1B;MAAA,uBACE,KAAC,gBAAD;QAAkB,MAAM,EAAEC,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEU;MAAjC;IADF;EAbJ,EADF;AAoBD,CAvC+C,CAAzC;AAyCPf,iBAAiB,CAACwB,WAAlB,GAAgC,mBAAhC;;AAEA,MAAMC,eAAiF,GAAIC,KAAD,IAAW;EACnG,OAAO;IACLzB,QAAQ,EAAEL,WAAW,CAAC8B,KAAK,CAACC,QAAP,EAAiB,mBAAjB;EADhB,CAAP;AAGD,CAJD;;AAMA,eAAerC,OAAO,CAACmC,eAAD,CAAP,CAAyBzB,iBAAzB,CAAf"},"metadata":{},"sourceType":"module"}