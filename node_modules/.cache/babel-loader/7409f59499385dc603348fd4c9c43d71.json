{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { getDefaultRelativeTimeRange, LoadingState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Button, HorizontalGroup, stylesFactory } from '@grafana/ui';\nimport { getNextRefIdChar } from 'app/core/utils/query';\nimport { dataSource as expressionDatasource, ExpressionDatasourceUID } from 'app/features/expressions/ExpressionDatasource';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ExpressionQueryType } from 'app/features/expressions/types';\nimport { defaultCondition } from 'app/features/expressions/utils/expressionTypes';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { AlertingQueryRunner } from '../../state/AlertingQueryRunner';\nimport { QueryRows } from './QueryRows';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class QueryEditor extends PureComponent {\n  constructor(props) {\n    var _props$value;\n\n    super(props);\n\n    _defineProperty(this, \"runner\", void 0);\n\n    _defineProperty(this, \"queries\", void 0);\n\n    _defineProperty(this, \"onRunQueries\", () => {\n      const {\n        queries\n      } = this;\n      this.runner.run(queries);\n    });\n\n    _defineProperty(this, \"onCancelQueries\", () => {\n      this.runner.cancel();\n    });\n\n    _defineProperty(this, \"onChangeQueries\", queries => {\n      this.queries = queries;\n      this.props.onChange(queries);\n    });\n\n    _defineProperty(this, \"onDuplicateQuery\", query => {\n      const {\n        queries\n      } = this;\n      this.onChangeQueries(addQuery(queries, query));\n    });\n\n    _defineProperty(this, \"onNewAlertingQuery\", () => {\n      const {\n        queries\n      } = this;\n      const defaultDataSource = getDatasourceSrv().getInstanceSettings('default');\n\n      if (!defaultDataSource) {\n        return;\n      }\n\n      this.onChangeQueries(addQuery(queries, {\n        datasourceUid: defaultDataSource.uid,\n        model: {\n          refId: '',\n          datasource: {\n            type: defaultDataSource.type,\n            uid: defaultDataSource.uid\n          }\n        }\n      }));\n    });\n\n    _defineProperty(this, \"onNewExpressionQuery\", () => {\n      const {\n        queries\n      } = this;\n      this.onChangeQueries(addQuery(queries, {\n        datasourceUid: ExpressionDatasourceUID,\n        model: expressionDatasource.newQuery({\n          type: ExpressionQueryType.classic,\n          conditions: [defaultCondition]\n        })\n      }));\n    });\n\n    this.state = {\n      panelDataByRefId: {}\n    };\n    this.runner = new AlertingQueryRunner();\n    this.queries = (_props$value = props.value) !== null && _props$value !== void 0 ? _props$value : [];\n  }\n\n  componentDidMount() {\n    this.runner.get().subscribe(data => {\n      this.setState({\n        panelDataByRefId: data\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.runner.destroy();\n  }\n\n  isRunning() {\n    const data = Object.values(this.state.panelDataByRefId).find(d => Boolean(d));\n    return (data === null || data === void 0 ? void 0 : data.state) === LoadingState.Loading;\n  }\n\n  renderRunQueryButton() {\n    const isRunning = this.isRunning();\n\n    if (isRunning) {\n      return /*#__PURE__*/_jsx(Button, {\n        icon: \"fa fa-spinner\",\n        type: \"button\",\n        variant: \"destructive\",\n        onClick: this.onCancelQueries,\n        children: \"Cancel\"\n      });\n    }\n\n    return /*#__PURE__*/_jsx(Button, {\n      icon: \"sync\",\n      type: \"button\",\n      onClick: this.onRunQueries,\n      children: \"Run queries\"\n    });\n  }\n\n  render() {\n    const {\n      value = []\n    } = this.props;\n    const {\n      panelDataByRefId\n    } = this.state;\n    const styles = getStyles(config.theme2);\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsx(QueryRows, {\n        data: panelDataByRefId,\n        queries: value,\n        onQueriesChange: this.onChangeQueries,\n        onDuplicateQuery: this.onDuplicateQuery,\n        onRunQueries: this.onRunQueries\n      }), /*#__PURE__*/_jsxs(HorizontalGroup, {\n        spacing: \"sm\",\n        align: \"flex-start\",\n        children: [/*#__PURE__*/_jsx(Button, {\n          type: \"button\",\n          icon: \"plus\",\n          onClick: this.onNewAlertingQuery,\n          variant: \"secondary\",\n          \"aria-label\": selectors.components.QueryTab.addQuery,\n          children: \"Add query\"\n        }), config.expressionsEnabled && /*#__PURE__*/_jsx(Button, {\n          type: \"button\",\n          icon: \"plus\",\n          onClick: this.onNewExpressionQuery,\n          variant: \"secondary\",\n          children: \"Add expression\"\n        }), this.renderRunQueryButton()]\n      })]\n    });\n  }\n\n}\n\nconst addQuery = (queries, queryToAdd) => {\n  const refId = getNextRefIdChar(queries);\n  const query = Object.assign({}, queryToAdd, {\n    refId,\n    queryType: '',\n    model: Object.assign({}, queryToAdd.model, {\n      hide: false,\n      refId\n    }),\n    relativeTimeRange: defaultTimeRange(queryToAdd.model)\n  });\n  return [...queries, query];\n};\n\nconst defaultTimeRange = model => {\n  if (isExpressionQuery(model)) {\n    return;\n  }\n\n  return getDefaultRelativeTimeRange();\n};\n\nconst getStyles = stylesFactory(theme => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.primary};\n      height: 100%;\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n    runWrapper: css`\n      margin-top: ${theme.spacing(1)};\n    `,\n    editorWrapper: css`\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius()};\n    `\n  };\n});","map":{"version":3,"names":["css","React","PureComponent","getDefaultRelativeTimeRange","LoadingState","selectors","config","Button","HorizontalGroup","stylesFactory","getNextRefIdChar","dataSource","expressionDatasource","ExpressionDatasourceUID","isExpressionQuery","ExpressionQueryType","defaultCondition","getDatasourceSrv","AlertingQueryRunner","QueryRows","QueryEditor","constructor","props","queries","runner","run","cancel","onChange","query","onChangeQueries","addQuery","defaultDataSource","getInstanceSettings","datasourceUid","uid","model","refId","datasource","type","newQuery","classic","conditions","state","panelDataByRefId","value","componentDidMount","get","subscribe","data","setState","componentWillUnmount","destroy","isRunning","Object","values","find","d","Boolean","Loading","renderRunQueryButton","onCancelQueries","onRunQueries","render","styles","getStyles","theme2","container","onDuplicateQuery","onNewAlertingQuery","components","QueryTab","expressionsEnabled","onNewExpressionQuery","queryToAdd","queryType","hide","relativeTimeRange","defaultTimeRange","theme","colors","background","primary","breakpoints","xxl","runWrapper","spacing","editorWrapper","border","medium","shape","borderRadius"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/QueryEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport {\n  DataQuery,\n  getDefaultRelativeTimeRange,\n  GrafanaTheme2,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Button, HorizontalGroup, stylesFactory } from '@grafana/ui';\nimport { getNextRefIdChar } from 'app/core/utils/query';\nimport {\n  dataSource as expressionDatasource,\n  ExpressionDatasourceUID,\n} from 'app/features/expressions/ExpressionDatasource';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ExpressionQueryType } from 'app/features/expressions/types';\nimport { defaultCondition } from 'app/features/expressions/utils/expressionTypes';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { AlertingQueryRunner } from '../../state/AlertingQueryRunner';\n\nimport { QueryRows } from './QueryRows';\n\ninterface Props {\n  value?: AlertQuery[];\n  onChange: (queries: AlertQuery[]) => void;\n}\n\ninterface State {\n  panelDataByRefId: Record<string, PanelData>;\n}\nexport class QueryEditor extends PureComponent<Props, State> {\n  private runner: AlertingQueryRunner;\n  private queries: AlertQuery[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { panelDataByRefId: {} };\n    this.runner = new AlertingQueryRunner();\n    this.queries = props.value ?? [];\n  }\n\n  componentDidMount() {\n    this.runner.get().subscribe((data) => {\n      this.setState({ panelDataByRefId: data });\n    });\n  }\n\n  componentWillUnmount() {\n    this.runner.destroy();\n  }\n\n  onRunQueries = () => {\n    const { queries } = this;\n    this.runner.run(queries);\n  };\n\n  onCancelQueries = () => {\n    this.runner.cancel();\n  };\n\n  onChangeQueries = (queries: AlertQuery[]) => {\n    this.queries = queries;\n    this.props.onChange(queries);\n  };\n\n  onDuplicateQuery = (query: AlertQuery) => {\n    const { queries } = this;\n    this.onChangeQueries(addQuery(queries, query));\n  };\n\n  onNewAlertingQuery = () => {\n    const { queries } = this;\n    const defaultDataSource = getDatasourceSrv().getInstanceSettings('default');\n\n    if (!defaultDataSource) {\n      return;\n    }\n\n    this.onChangeQueries(\n      addQuery(queries, {\n        datasourceUid: defaultDataSource.uid,\n        model: {\n          refId: '',\n          datasource: {\n            type: defaultDataSource.type,\n            uid: defaultDataSource.uid,\n          },\n        },\n      })\n    );\n  };\n\n  onNewExpressionQuery = () => {\n    const { queries } = this;\n\n    this.onChangeQueries(\n      addQuery(queries, {\n        datasourceUid: ExpressionDatasourceUID,\n        model: expressionDatasource.newQuery({\n          type: ExpressionQueryType.classic,\n          conditions: [defaultCondition],\n        }),\n      })\n    );\n  };\n\n  isRunning() {\n    const data = Object.values(this.state.panelDataByRefId).find((d) => Boolean(d));\n    return data?.state === LoadingState.Loading;\n  }\n\n  renderRunQueryButton() {\n    const isRunning = this.isRunning();\n\n    if (isRunning) {\n      return (\n        <Button icon=\"fa fa-spinner\" type=\"button\" variant=\"destructive\" onClick={this.onCancelQueries}>\n          Cancel\n        </Button>\n      );\n    }\n\n    return (\n      <Button icon=\"sync\" type=\"button\" onClick={this.onRunQueries}>\n        Run queries\n      </Button>\n    );\n  }\n\n  render() {\n    const { value = [] } = this.props;\n    const { panelDataByRefId } = this.state;\n    const styles = getStyles(config.theme2);\n\n    return (\n      <div className={styles.container}>\n        <QueryRows\n          data={panelDataByRefId}\n          queries={value}\n          onQueriesChange={this.onChangeQueries}\n          onDuplicateQuery={this.onDuplicateQuery}\n          onRunQueries={this.onRunQueries}\n        />\n        <HorizontalGroup spacing=\"sm\" align=\"flex-start\">\n          <Button\n            type=\"button\"\n            icon=\"plus\"\n            onClick={this.onNewAlertingQuery}\n            variant=\"secondary\"\n            aria-label={selectors.components.QueryTab.addQuery}\n          >\n            Add query\n          </Button>\n          {config.expressionsEnabled && (\n            <Button type=\"button\" icon=\"plus\" onClick={this.onNewExpressionQuery} variant=\"secondary\">\n              Add expression\n            </Button>\n          )}\n          {this.renderRunQueryButton()}\n        </HorizontalGroup>\n      </div>\n    );\n  }\n}\n\nconst addQuery = (queries: AlertQuery[], queryToAdd: Pick<AlertQuery, 'model' | 'datasourceUid'>): AlertQuery[] => {\n  const refId = getNextRefIdChar(queries);\n\n  const query: AlertQuery = {\n    ...queryToAdd,\n    refId,\n    queryType: '',\n    model: {\n      ...queryToAdd.model,\n      hide: false,\n      refId,\n    },\n    relativeTimeRange: defaultTimeRange(queryToAdd.model),\n  };\n\n  return [...queries, query];\n};\n\nconst defaultTimeRange = (model: DataQuery): RelativeTimeRange | undefined => {\n  if (isExpressionQuery(model)) {\n    return;\n  }\n\n  return getDefaultRelativeTimeRange();\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.primary};\n      height: 100%;\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n    runWrapper: css`\n      margin-top: ${theme.spacing(1)};\n    `,\n    editorWrapper: css`\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius()};\n    `,\n  };\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}