{"ast":null,"code":"import React, { useRef, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\nimport { useUniqueId } from 'app/plugins/datasource/influxdb/components/useUniqueId';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function LazyLoader({\n  children,\n  width,\n  height,\n  onLoad,\n  onChange\n}) {\n  const id = useUniqueId();\n  const [loaded, setLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const wrapperRef = useRef(null);\n  useEffectOnce(() => {\n    LazyLoader.addCallback(id, entry => {\n      if (!loaded && entry.isIntersecting) {\n        setLoaded(true);\n        onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      }\n\n      setIsInView(entry.isIntersecting);\n      onChange === null || onChange === void 0 ? void 0 : onChange(entry.isIntersecting);\n    });\n    const wrapperEl = wrapperRef.current;\n\n    if (wrapperEl) {\n      LazyLoader.observer.observe(wrapperEl);\n    }\n\n    return () => {\n      delete LazyLoader.callbacks[id];\n      wrapperEl && LazyLoader.observer.unobserve(wrapperEl);\n\n      if (Object.keys(LazyLoader.callbacks).length === 0) {\n        LazyLoader.observer.disconnect();\n      }\n    };\n  });\n  return /*#__PURE__*/_jsx(\"div\", {\n    id: id,\n    ref: wrapperRef,\n    style: {\n      width,\n      height\n    },\n    children: loaded && (typeof children === 'function' ? children({\n      isInView\n    }) : children)\n  });\n}\nLazyLoader.callbacks = {};\n\nLazyLoader.addCallback = (id, c) => LazyLoader.callbacks[id] = c;\n\nLazyLoader.observer = new IntersectionObserver(entries => {\n  for (const entry of entries) {\n    LazyLoader.callbacks[entry.target.id](entry);\n  }\n}, {\n  rootMargin: '100px'\n});","map":{"version":3,"names":["React","useRef","useState","useEffectOnce","useUniqueId","LazyLoader","children","width","height","onLoad","onChange","id","loaded","setLoaded","isInView","setIsInView","wrapperRef","addCallback","entry","isIntersecting","wrapperEl","current","observer","observe","callbacks","unobserve","Object","keys","length","disconnect","c","IntersectionObserver","entries","target","rootMargin"],"sources":["/home/soula/grafana/public/app/features/dashboard/dashgrid/LazyLoader.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { useUniqueId } from 'app/plugins/datasource/influxdb/components/useUniqueId';\n\nexport interface Props {\n  children: React.ReactNode | (({ isInView }: { isInView: boolean }) => React.ReactNode);\n  width?: number;\n  height?: number;\n  onLoad?: () => void;\n  onChange?: (isInView: boolean) => void;\n}\n\nexport function LazyLoader({ children, width, height, onLoad, onChange }: Props) {\n  const id = useUniqueId();\n  const [loaded, setLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  useEffectOnce(() => {\n    LazyLoader.addCallback(id, (entry) => {\n      if (!loaded && entry.isIntersecting) {\n        setLoaded(true);\n        onLoad?.();\n      }\n\n      setIsInView(entry.isIntersecting);\n      onChange?.(entry.isIntersecting);\n    });\n\n    const wrapperEl = wrapperRef.current;\n\n    if (wrapperEl) {\n      LazyLoader.observer.observe(wrapperEl);\n    }\n\n    return () => {\n      delete LazyLoader.callbacks[id];\n      wrapperEl && LazyLoader.observer.unobserve(wrapperEl);\n      if (Object.keys(LazyLoader.callbacks).length === 0) {\n        LazyLoader.observer.disconnect();\n      }\n    };\n  });\n\n  return (\n    <div id={id} ref={wrapperRef} style={{ width, height }}>\n      {loaded && (typeof children === 'function' ? children({ isInView }) : children)}\n    </div>\n  );\n}\n\nLazyLoader.callbacks = {} as Record<string, (e: IntersectionObserverEntry) => void>;\nLazyLoader.addCallback = (id: string, c: (e: IntersectionObserverEntry) => void) => (LazyLoader.callbacks[id] = c);\nLazyLoader.observer = new IntersectionObserver(\n  (entries) => {\n    for (const entry of entries) {\n      LazyLoader.callbacks[entry.target.id](entry);\n    }\n  },\n  { rootMargin: '100px' }\n);\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,SAASC,WAAT,QAA4B,wDAA5B;;AAUA,OAAO,SAASC,UAAT,CAAoB;EAAEC,QAAF;EAAYC,KAAZ;EAAmBC,MAAnB;EAA2BC,MAA3B;EAAmCC;AAAnC,CAApB,EAA0E;EAC/E,MAAMC,EAAE,GAAGP,WAAW,EAAtB;EACA,MAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,KAAD,CAApC;EACA,MAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;EACA,MAAMc,UAAU,GAAGf,MAAM,CAAiB,IAAjB,CAAzB;EAEAE,aAAa,CAAC,MAAM;IAClBE,UAAU,CAACY,WAAX,CAAuBN,EAAvB,EAA4BO,KAAD,IAAW;MACpC,IAAI,CAACN,MAAD,IAAWM,KAAK,CAACC,cAArB,EAAqC;QACnCN,SAAS,CAAC,IAAD,CAAT;QACAJ,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM;MACP;;MAEDM,WAAW,CAACG,KAAK,CAACC,cAAP,CAAX;MACAT,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAGQ,KAAK,CAACC,cAAT,CAAR;IACD,CARD;IAUA,MAAMC,SAAS,GAAGJ,UAAU,CAACK,OAA7B;;IAEA,IAAID,SAAJ,EAAe;MACbf,UAAU,CAACiB,QAAX,CAAoBC,OAApB,CAA4BH,SAA5B;IACD;;IAED,OAAO,MAAM;MACX,OAAOf,UAAU,CAACmB,SAAX,CAAqBb,EAArB,CAAP;MACAS,SAAS,IAAIf,UAAU,CAACiB,QAAX,CAAoBG,SAApB,CAA8BL,SAA9B,CAAb;;MACA,IAAIM,MAAM,CAACC,IAAP,CAAYtB,UAAU,CAACmB,SAAvB,EAAkCI,MAAlC,KAA6C,CAAjD,EAAoD;QAClDvB,UAAU,CAACiB,QAAX,CAAoBO,UAApB;MACD;IACF,CAND;EAOD,CAxBY,CAAb;EA0BA,oBACE;IAAK,EAAE,EAAElB,EAAT;IAAa,GAAG,EAAEK,UAAlB;IAA8B,KAAK,EAAE;MAAET,KAAF;MAASC;IAAT,CAArC;IAAA,UACGI,MAAM,KAAK,OAAON,QAAP,KAAoB,UAApB,GAAiCA,QAAQ,CAAC;MAAEQ;IAAF,CAAD,CAAzC,GAA0DR,QAA/D;EADT,EADF;AAKD;AAEDD,UAAU,CAACmB,SAAX,GAAuB,EAAvB;;AACAnB,UAAU,CAACY,WAAX,GAAyB,CAACN,EAAD,EAAamB,CAAb,KAA4DzB,UAAU,CAACmB,SAAX,CAAqBb,EAArB,IAA2BmB,CAAhH;;AACAzB,UAAU,CAACiB,QAAX,GAAsB,IAAIS,oBAAJ,CACnBC,OAAD,IAAa;EACX,KAAK,MAAMd,KAAX,IAAoBc,OAApB,EAA6B;IAC3B3B,UAAU,CAACmB,SAAX,CAAqBN,KAAK,CAACe,MAAN,CAAatB,EAAlC,EAAsCO,KAAtC;EACD;AACF,CALmB,EAMpB;EAAEgB,UAAU,EAAE;AAAd,CANoB,CAAtB"},"metadata":{},"sourceType":"module"}