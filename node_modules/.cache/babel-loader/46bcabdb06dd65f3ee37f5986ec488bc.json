{"ast":null,"code":"import { cloneDeep } from 'lodash';\nimport { variableAdapters } from '../adapters';\nimport { initInspect } from '../inspect/reducer';\nimport { createUsagesNetwork, transformUsagesToNetwork } from '../inspect/utils';\nimport { updateOptions } from '../state/actions';\nimport { toKeyedAction } from '../state/keyedVariablesReducer';\nimport { getEditorVariables, getNewVariableIndex, getVariable, getVariablesByKey } from '../state/selectors';\nimport { addVariable, removeVariable } from '../state/sharedReducer';\nimport { toKeyedVariableIdentifier, toStateKey, toVariablePayload } from '../utils';\nimport { changeVariableNameFailed, changeVariableNameSucceeded, clearIdInEditor, setIdInEditor, variableEditorMounted, variableEditorUnMounted } from './reducer';\nexport const variableEditorMount = identifier => {\n  return async dispatch => {\n    const {\n      rootStateKey\n    } = identifier;\n    dispatch(toKeyedAction(rootStateKey, variableEditorMounted({\n      name: getVariable(identifier).name\n    })));\n  };\n};\nexport const variableEditorUnMount = identifier => {\n  return async (dispatch, getState) => {\n    const {\n      rootStateKey\n    } = identifier;\n    dispatch(toKeyedAction(rootStateKey, variableEditorUnMounted(toVariablePayload(identifier))));\n  };\n};\nexport const onEditorUpdate = identifier => {\n  return async dispatch => {\n    await dispatch(updateOptions(identifier));\n    dispatch(switchToListMode(identifier.rootStateKey));\n  };\n};\nexport const changeVariableName = (identifier, newName) => {\n  return (dispatch, getState) => {\n    const {\n      id,\n      rootStateKey: uid\n    } = identifier;\n    let errorText = null;\n\n    if (!newName.match(/^(?!__).*$/)) {\n      errorText = \"Template names cannot begin with '__', that's reserved for Grafana's global variables\";\n    }\n\n    if (!newName.match(/^\\w+$/)) {\n      errorText = 'Only word and digit characters are allowed in variable names';\n    }\n\n    const variables = getVariablesByKey(uid, getState());\n    const foundVariables = variables.filter(v => v.name === newName && v.id !== id);\n\n    if (foundVariables.length) {\n      errorText = 'Variable with the same name already exists';\n    }\n\n    if (errorText) {\n      dispatch(toKeyedAction(uid, changeVariableNameFailed({\n        newName,\n        errorText\n      })));\n      return;\n    }\n\n    dispatch(completeChangeVariableName(identifier, newName));\n  };\n};\nexport const completeChangeVariableName = (identifier, newName) => (dispatch, getState) => {\n  const {\n    rootStateKey\n  } = identifier;\n  const originalVariable = getVariable(identifier, getState());\n\n  if (originalVariable.name === newName) {\n    dispatch(toKeyedAction(rootStateKey, changeVariableNameSucceeded(toVariablePayload(identifier, {\n      newName\n    }))));\n    return;\n  }\n\n  const model = Object.assign({}, cloneDeep(originalVariable), {\n    name: newName,\n    id: newName\n  });\n  const global = originalVariable.global;\n  const index = originalVariable.index;\n  const renamedIdentifier = toKeyedVariableIdentifier(model);\n  dispatch(toKeyedAction(rootStateKey, addVariable(toVariablePayload(renamedIdentifier, {\n    global,\n    index,\n    model\n  }))));\n  dispatch(toKeyedAction(rootStateKey, changeVariableNameSucceeded(toVariablePayload(renamedIdentifier, {\n    newName\n  }))));\n  dispatch(switchToEditMode(renamedIdentifier));\n  dispatch(toKeyedAction(rootStateKey, removeVariable(toVariablePayload(identifier, {\n    reIndex: false\n  }))));\n};\nexport const switchToNewMode = (key, type = 'query') => (dispatch, getState) => {\n  const rootStateKey = toStateKey(key);\n  const id = getNextAvailableId(type, getVariablesByKey(rootStateKey, getState()));\n  const identifier = {\n    type,\n    id\n  };\n  const global = false;\n  const index = getNewVariableIndex(rootStateKey, getState());\n  const model = cloneDeep(variableAdapters.get(type).initialState);\n  model.id = id;\n  model.name = id;\n  model.rootStateKey = rootStateKey;\n  dispatch(toKeyedAction(rootStateKey, addVariable(toVariablePayload(identifier, {\n    global,\n    model,\n    index\n  }))));\n  dispatch(toKeyedAction(rootStateKey, setIdInEditor({\n    id: identifier.id\n  })));\n};\nexport const switchToEditMode = identifier => dispatch => {\n  const {\n    rootStateKey\n  } = identifier;\n  dispatch(toKeyedAction(rootStateKey, setIdInEditor({\n    id: identifier.id\n  })));\n};\nexport const switchToListMode = key => (dispatch, getState) => {\n  const rootStateKey = toStateKey(key);\n  dispatch(toKeyedAction(rootStateKey, clearIdInEditor()));\n  const state = getState();\n  const variables = getEditorVariables(rootStateKey, state);\n  const dashboard = state.dashboard.getModel();\n  const {\n    usages\n  } = createUsagesNetwork(variables, dashboard);\n  const usagesNetwork = transformUsagesToNetwork(usages);\n  dispatch(toKeyedAction(rootStateKey, initInspect({\n    usages,\n    usagesNetwork\n  })));\n};\nexport function getNextAvailableId(type, variables) {\n  let counter = 0;\n  let nextId = `${type}${counter}`;\n\n  while (variables.find(variable => variable.id === nextId)) {\n    nextId = `${type}${++counter}`;\n  }\n\n  return nextId;\n}","map":{"version":3,"names":["cloneDeep","variableAdapters","initInspect","createUsagesNetwork","transformUsagesToNetwork","updateOptions","toKeyedAction","getEditorVariables","getNewVariableIndex","getVariable","getVariablesByKey","addVariable","removeVariable","toKeyedVariableIdentifier","toStateKey","toVariablePayload","changeVariableNameFailed","changeVariableNameSucceeded","clearIdInEditor","setIdInEditor","variableEditorMounted","variableEditorUnMounted","variableEditorMount","identifier","dispatch","rootStateKey","name","variableEditorUnMount","getState","onEditorUpdate","switchToListMode","changeVariableName","newName","id","uid","errorText","match","variables","foundVariables","filter","v","length","completeChangeVariableName","originalVariable","model","global","index","renamedIdentifier","switchToEditMode","reIndex","switchToNewMode","key","type","getNextAvailableId","get","initialState","state","dashboard","getModel","usages","usagesNetwork","counter","nextId","find","variable"],"sources":["/home/soula/grafana/public/app/features/variables/editor/actions.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\n\nimport { VariableType } from '@grafana/data';\n\nimport { ThunkResult } from '../../../types';\nimport { variableAdapters } from '../adapters';\nimport { initInspect } from '../inspect/reducer';\nimport { createUsagesNetwork, transformUsagesToNetwork } from '../inspect/utils';\nimport { updateOptions } from '../state/actions';\nimport { toKeyedAction } from '../state/keyedVariablesReducer';\nimport { getEditorVariables, getNewVariableIndex, getVariable, getVariablesByKey } from '../state/selectors';\nimport { addVariable, removeVariable } from '../state/sharedReducer';\nimport { AddVariable, KeyedVariableIdentifier, VariableIdentifier } from '../state/types';\nimport { VariableModel } from '../types';\nimport { toKeyedVariableIdentifier, toStateKey, toVariablePayload } from '../utils';\n\nimport {\n  changeVariableNameFailed,\n  changeVariableNameSucceeded,\n  clearIdInEditor,\n  setIdInEditor,\n  variableEditorMounted,\n  variableEditorUnMounted,\n} from './reducer';\n\nexport const variableEditorMount = (identifier: KeyedVariableIdentifier): ThunkResult<void> => {\n  return async (dispatch) => {\n    const { rootStateKey } = identifier;\n    dispatch(toKeyedAction(rootStateKey, variableEditorMounted({ name: getVariable(identifier).name })));\n  };\n};\n\nexport const variableEditorUnMount = (identifier: KeyedVariableIdentifier): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    const { rootStateKey } = identifier;\n    dispatch(toKeyedAction(rootStateKey, variableEditorUnMounted(toVariablePayload(identifier))));\n  };\n};\n\nexport const onEditorUpdate = (identifier: KeyedVariableIdentifier): ThunkResult<void> => {\n  return async (dispatch) => {\n    await dispatch(updateOptions(identifier));\n    dispatch(switchToListMode(identifier.rootStateKey));\n  };\n};\n\nexport const changeVariableName = (identifier: KeyedVariableIdentifier, newName: string): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    const { id, rootStateKey: uid } = identifier;\n    let errorText = null;\n    if (!newName.match(/^(?!__).*$/)) {\n      errorText = \"Template names cannot begin with '__', that's reserved for Grafana's global variables\";\n    }\n\n    if (!newName.match(/^\\w+$/)) {\n      errorText = 'Only word and digit characters are allowed in variable names';\n    }\n\n    const variables = getVariablesByKey(uid, getState());\n    const foundVariables = variables.filter((v) => v.name === newName && v.id !== id);\n\n    if (foundVariables.length) {\n      errorText = 'Variable with the same name already exists';\n    }\n\n    if (errorText) {\n      dispatch(toKeyedAction(uid, changeVariableNameFailed({ newName, errorText })));\n      return;\n    }\n\n    dispatch(completeChangeVariableName(identifier, newName));\n  };\n};\n\nexport const completeChangeVariableName =\n  (identifier: KeyedVariableIdentifier, newName: string): ThunkResult<void> =>\n  (dispatch, getState) => {\n    const { rootStateKey } = identifier;\n    const originalVariable = getVariable(identifier, getState());\n    if (originalVariable.name === newName) {\n      dispatch(toKeyedAction(rootStateKey, changeVariableNameSucceeded(toVariablePayload(identifier, { newName }))));\n      return;\n    }\n    const model = { ...cloneDeep(originalVariable), name: newName, id: newName };\n    const global = originalVariable.global;\n    const index = originalVariable.index;\n    const renamedIdentifier = toKeyedVariableIdentifier(model);\n\n    dispatch(toKeyedAction(rootStateKey, addVariable(toVariablePayload(renamedIdentifier, { global, index, model }))));\n    dispatch(\n      toKeyedAction(rootStateKey, changeVariableNameSucceeded(toVariablePayload(renamedIdentifier, { newName })))\n    );\n    dispatch(switchToEditMode(renamedIdentifier));\n    dispatch(toKeyedAction(rootStateKey, removeVariable(toVariablePayload(identifier, { reIndex: false }))));\n  };\n\nexport const switchToNewMode =\n  (key: string | null | undefined, type: VariableType = 'query'): ThunkResult<void> =>\n  (dispatch, getState) => {\n    const rootStateKey = toStateKey(key);\n    const id = getNextAvailableId(type, getVariablesByKey(rootStateKey, getState()));\n    const identifier: VariableIdentifier = { type, id };\n    const global = false;\n    const index = getNewVariableIndex(rootStateKey, getState());\n    const model: VariableModel = cloneDeep(variableAdapters.get(type).initialState);\n    model.id = id;\n    model.name = id;\n    model.rootStateKey = rootStateKey;\n    dispatch(\n      toKeyedAction(rootStateKey, addVariable(toVariablePayload<AddVariable>(identifier, { global, model, index })))\n    );\n    dispatch(toKeyedAction(rootStateKey, setIdInEditor({ id: identifier.id })));\n  };\n\nexport const switchToEditMode =\n  (identifier: KeyedVariableIdentifier): ThunkResult<void> =>\n  (dispatch) => {\n    const { rootStateKey } = identifier;\n    dispatch(toKeyedAction(rootStateKey, setIdInEditor({ id: identifier.id })));\n  };\n\nexport const switchToListMode =\n  (key: string | null | undefined): ThunkResult<void> =>\n  (dispatch, getState) => {\n    const rootStateKey = toStateKey(key);\n    dispatch(toKeyedAction(rootStateKey, clearIdInEditor()));\n    const state = getState();\n    const variables = getEditorVariables(rootStateKey, state);\n    const dashboard = state.dashboard.getModel();\n    const { usages } = createUsagesNetwork(variables, dashboard);\n    const usagesNetwork = transformUsagesToNetwork(usages);\n\n    dispatch(toKeyedAction(rootStateKey, initInspect({ usages, usagesNetwork })));\n  };\n\nexport function getNextAvailableId(type: VariableType, variables: VariableModel[]): string {\n  let counter = 0;\n  let nextId = `${type}${counter}`;\n\n  while (variables.find((variable) => variable.id === nextId)) {\n    nextId = `${type}${++counter}`;\n  }\n\n  return nextId;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}