{"ast":null,"code":"import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { Input, defaultIntervals, Field } from '@grafana/ui';\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const AutoRefreshIntervals = ({\n  refreshIntervals,\n  onRefreshIntervalChange,\n  getIntervalsFunc = getValidIntervals,\n  validateIntervalsFunc = validateIntervals\n}) => {\n  const [intervals, setIntervals] = useState(getIntervalsFunc(refreshIntervals !== null && refreshIntervals !== void 0 ? refreshIntervals : defaultIntervals));\n  const [invalidIntervalsMessage, setInvalidIntervalsMessage] = useState(null);\n  useEffect(() => {\n    const intervals = getIntervalsFunc(refreshIntervals !== null && refreshIntervals !== void 0 ? refreshIntervals : defaultIntervals);\n    setIntervals(intervals);\n  }, [getIntervalsFunc, refreshIntervals]);\n  const intervalsString = useMemo(() => {\n    if (!Array.isArray(intervals)) {\n      return '';\n    }\n\n    return intervals.join(',');\n  }, [intervals]);\n  const onIntervalsChange = useCallback(event => {\n    const newIntervals = event.currentTarget.value ? event.currentTarget.value.split(',') : [];\n    setIntervals(newIntervals);\n  }, [setIntervals]);\n  const onIntervalsBlur = useCallback(event => {\n    const invalidMessage = validateIntervalsFunc(intervals);\n\n    if (invalidMessage === null) {\n      // only refresh dashboard JSON if intervals are valid\n      onRefreshIntervalChange(getIntervalsFunc(intervals));\n    }\n\n    setInvalidIntervalsMessage(invalidMessage);\n  }, [getIntervalsFunc, intervals, onRefreshIntervalChange, validateIntervalsFunc]);\n  return /*#__PURE__*/_jsx(Field, {\n    label: \"Auto refresh\",\n    description: \"Define the auto refresh intervals that should be available in the auto refresh list.\",\n    error: invalidIntervalsMessage,\n    invalid: !!invalidIntervalsMessage,\n    children: /*#__PURE__*/_jsx(Input, {\n      id: \"auto-refresh-input\",\n      invalid: !!invalidIntervalsMessage,\n      value: intervalsString,\n      onChange: onIntervalsChange,\n      onBlur: onIntervalsBlur\n    })\n  });\n};\nexport const validateIntervals = (intervals, dependencies = {\n  getTimeSrv\n}) => {\n  try {\n    getValidIntervals(intervals, dependencies);\n    return null;\n  } catch (err) {\n    return err instanceof Error ? err.message : 'Invalid intervals';\n  }\n};\nexport const getValidIntervals = (intervals, dependencies = {\n  getTimeSrv\n}) => {\n  const cleanIntervals = intervals.filter(i => i.trim() !== '').map(interval => interval.replace(/\\s+/g, ''));\n  return [...new Set(dependencies.getTimeSrv().getValidIntervals(cleanIntervals))];\n};","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","Input","defaultIntervals","Field","getTimeSrv","AutoRefreshIntervals","refreshIntervals","onRefreshIntervalChange","getIntervalsFunc","getValidIntervals","validateIntervalsFunc","validateIntervals","intervals","setIntervals","invalidIntervalsMessage","setInvalidIntervalsMessage","intervalsString","Array","isArray","join","onIntervalsChange","event","newIntervals","currentTarget","value","split","onIntervalsBlur","invalidMessage","dependencies","err","Error","message","cleanIntervals","filter","i","trim","map","interval","replace","Set"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/DashboardSettings/AutoRefreshIntervals.tsx"],"sourcesContent":["import React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Input, defaultIntervals, Field } from '@grafana/ui';\n\nimport { getTimeSrv } from '../../services/TimeSrv';\n\nexport interface Props {\n  refreshIntervals: string[];\n  onRefreshIntervalChange: (interval: string[]) => void;\n  getIntervalsFunc?: typeof getValidIntervals;\n  validateIntervalsFunc?: typeof validateIntervals;\n}\n\nexport const AutoRefreshIntervals: FC<Props> = ({\n  refreshIntervals,\n  onRefreshIntervalChange,\n  getIntervalsFunc = getValidIntervals,\n  validateIntervalsFunc = validateIntervals,\n}) => {\n  const [intervals, setIntervals] = useState<string[]>(getIntervalsFunc(refreshIntervals ?? defaultIntervals));\n  const [invalidIntervalsMessage, setInvalidIntervalsMessage] = useState<string | null>(null);\n\n  useEffect(() => {\n    const intervals = getIntervalsFunc(refreshIntervals ?? defaultIntervals);\n    setIntervals(intervals);\n  }, [getIntervalsFunc, refreshIntervals]);\n\n  const intervalsString = useMemo(() => {\n    if (!Array.isArray(intervals)) {\n      return '';\n    }\n\n    return intervals.join(',');\n  }, [intervals]);\n\n  const onIntervalsChange = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const newIntervals = event.currentTarget.value ? event.currentTarget.value.split(',') : [];\n\n      setIntervals(newIntervals);\n    },\n    [setIntervals]\n  );\n\n  const onIntervalsBlur = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const invalidMessage = validateIntervalsFunc(intervals);\n\n      if (invalidMessage === null) {\n        // only refresh dashboard JSON if intervals are valid\n        onRefreshIntervalChange(getIntervalsFunc(intervals));\n      }\n\n      setInvalidIntervalsMessage(invalidMessage);\n    },\n    [getIntervalsFunc, intervals, onRefreshIntervalChange, validateIntervalsFunc]\n  );\n\n  return (\n    <Field\n      label=\"Auto refresh\"\n      description=\"Define the auto refresh intervals that should be available in the auto refresh list.\"\n      error={invalidIntervalsMessage}\n      invalid={!!invalidIntervalsMessage}\n    >\n      <Input\n        id=\"auto-refresh-input\"\n        invalid={!!invalidIntervalsMessage}\n        value={intervalsString}\n        onChange={onIntervalsChange}\n        onBlur={onIntervalsBlur}\n      />\n    </Field>\n  );\n};\n\nexport const validateIntervals = (\n  intervals: string[],\n  dependencies: { getTimeSrv: typeof getTimeSrv } = { getTimeSrv }\n): string | null => {\n  try {\n    getValidIntervals(intervals, dependencies);\n    return null;\n  } catch (err) {\n    return err instanceof Error ? err.message : 'Invalid intervals';\n  }\n};\n\nexport const getValidIntervals = (\n  intervals: string[],\n  dependencies: { getTimeSrv: typeof getTimeSrv } = { getTimeSrv }\n) => {\n  const cleanIntervals = intervals.filter((i) => i.trim() !== '').map((interval) => interval.replace(/\\s+/g, ''));\n  return [...new Set(dependencies.getTimeSrv().getValidIntervals(cleanIntervals))];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}