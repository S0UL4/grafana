{"ast":null,"code":"var _th, _th2, _th3, _th4, _th5;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { DeleteButton, LinkButton, FilterInput, VerticalGroup, HorizontalGroup, Pagination } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { config } from 'app/core/config';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\nimport { connectWithCleanUp } from '../../core/components/connectWithCleanUp';\nimport { deleteTeam, loadTeams } from './state/actions';\nimport { setSearchQuery, setTeamsSearchPage } from './state/reducers';\nimport { getSearchQuery, getTeams, getTeamsCount, getTeamsSearchPage, isPermissionTeamAdmin } from './state/selectors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst pageLimit = 30;\nexport class TeamList extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"deleteTeam\", team => {\n      this.props.deleteTeam(team.id);\n    });\n\n    _defineProperty(this, \"onSearchQueryChange\", value => {\n      this.props.setSearchQuery(value);\n    });\n\n    _defineProperty(this, \"getPaginatedTeams\", teams => {\n      const offset = (this.props.searchPage - 1) * pageLimit;\n      return teams.slice(offset, offset + pageLimit);\n    });\n\n    this.state = {\n      roleOptions: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchTeams();\n\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      this.fetchRoleOptions();\n    }\n  }\n\n  async fetchTeams() {\n    await this.props.loadTeams();\n  }\n\n  async fetchRoleOptions() {\n    const roleOptions = await fetchRoleOptions();\n    this.setState({\n      roleOptions\n    });\n  }\n\n  renderTeam(team) {\n    var _team$email, _team$email2;\n\n    const {\n      editorsCanAdmin,\n      signedInUser\n    } = this.props;\n    const permission = team.permission;\n    const teamUrl = `org/teams/edit/${team.id}`;\n    const isTeamAdmin = isPermissionTeamAdmin({\n      permission,\n      editorsCanAdmin,\n      signedInUser\n    });\n    const canDelete = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsDelete, team, isTeamAdmin);\n    const canReadTeam = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRead, team, isTeamAdmin);\n    const canSeeTeamRoles = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRolesList, team, false);\n    const canUpdateTeamRoles = contextSrv.hasAccess(AccessControlAction.ActionTeamsRolesAdd, false) || contextSrv.hasAccess(AccessControlAction.ActionTeamsRolesRemove, false);\n    const displayRolePicker = contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) && contextSrv.hasPermission(AccessControlAction.ActionRolesList);\n    return /*#__PURE__*/_jsxs(\"tr\", {\n      children: [/*#__PURE__*/_jsx(\"td\", {\n        className: \"width-4 text-center link-td\",\n        children: canReadTeam ? /*#__PURE__*/_jsx(\"a\", {\n          href: teamUrl,\n          children: /*#__PURE__*/_jsx(\"img\", {\n            className: \"filter-table__avatar\",\n            src: team.avatarUrl,\n            alt: \"Team avatar\"\n          })\n        }) : /*#__PURE__*/_jsx(\"img\", {\n          className: \"filter-table__avatar\",\n          src: team.avatarUrl,\n          alt: \"Team avatar\"\n        })\n      }), /*#__PURE__*/_jsx(\"td\", {\n        className: \"link-td\",\n        children: canReadTeam ? /*#__PURE__*/_jsx(\"a\", {\n          href: teamUrl,\n          children: team.name\n        }) : /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            padding: '0px 8px'\n          },\n          children: team.name\n        })\n      }), /*#__PURE__*/_jsx(\"td\", {\n        className: \"link-td\",\n        children: canReadTeam ? /*#__PURE__*/_jsx(\"a\", {\n          href: teamUrl,\n          \"aria-label\": ((_team$email = team.email) === null || _team$email === void 0 ? void 0 : _team$email.length) > 0 ? undefined : 'Empty email cell',\n          children: team.email\n        }) : /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            padding: '0px 8px'\n          },\n          \"aria-label\": ((_team$email2 = team.email) === null || _team$email2 === void 0 ? void 0 : _team$email2.length) > 0 ? undefined : 'Empty email cell',\n          children: team.email\n        })\n      }), /*#__PURE__*/_jsx(\"td\", {\n        className: \"link-td\",\n        children: canReadTeam ? /*#__PURE__*/_jsx(\"a\", {\n          href: teamUrl,\n          children: team.memberCount\n        }) : /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            padding: '0px 8px'\n          },\n          children: team.memberCount\n        })\n      }), displayRolePicker && /*#__PURE__*/_jsx(\"td\", {\n        children: canSeeTeamRoles && /*#__PURE__*/_jsx(TeamRolePicker, {\n          teamId: team.id,\n          roleOptions: this.state.roleOptions,\n          disabled: !canUpdateTeamRoles\n        })\n      }), /*#__PURE__*/_jsx(\"td\", {\n        className: \"text-right\",\n        children: /*#__PURE__*/_jsx(DeleteButton, {\n          \"aria-label\": `Delete team ${team.name}`,\n          size: \"sm\",\n          disabled: !canDelete,\n          onConfirm: () => this.deleteTeam(team)\n        })\n      })]\n    }, team.id);\n  }\n\n  renderEmptyList() {\n    return /*#__PURE__*/_jsx(EmptyListCTA, {\n      title: \"You haven't created any teams yet.\",\n      buttonIcon: \"users-alt\",\n      buttonLink: \"org/teams/new\",\n      buttonTitle: \" New team\",\n      buttonDisabled: !contextSrv.hasPermission(AccessControlAction.ActionTeamsCreate),\n      proTip: \"Assign folder and dashboard permissions to teams instead of users to ease administration.\",\n      proTipLink: \"\",\n      proTipLinkTitle: \"\",\n      proTipTarget: \"_blank\"\n    });\n  }\n\n  renderTeamList() {\n    const {\n      teams,\n      searchQuery,\n      editorsCanAdmin,\n      searchPage,\n      setTeamsSearchPage\n    } = this.props;\n    const teamAdmin = contextSrv.hasRole('Admin') || editorsCanAdmin && contextSrv.hasRole('Editor');\n    const canCreate = contextSrv.hasAccess(AccessControlAction.ActionTeamsCreate, teamAdmin);\n    const displayRolePicker = contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) && contextSrv.hasPermission(AccessControlAction.ActionRolesList);\n    const newTeamHref = canCreate ? 'org/teams/new' : '#';\n    const paginatedTeams = this.getPaginatedTeams(teams);\n    const totalPages = Math.ceil(teams.length / pageLimit);\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"page-action-bar\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form gf-form--grow\",\n          children: /*#__PURE__*/_jsx(FilterInput, {\n            placeholder: \"Search teams\",\n            value: searchQuery,\n            onChange: this.onSearchQueryChange\n          })\n        }), /*#__PURE__*/_jsx(LinkButton, {\n          href: newTeamHref,\n          disabled: !canCreate,\n          children: \"New Team\"\n        })]\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"admin-list-table\",\n        children: /*#__PURE__*/_jsxs(VerticalGroup, {\n          spacing: \"md\",\n          children: [/*#__PURE__*/_jsxs(\"table\", {\n            className: \"filter-table filter-table--hover form-inline\",\n            children: [/*#__PURE__*/_jsx(\"thead\", {\n              children: /*#__PURE__*/_jsxs(\"tr\", {\n                children: [_th || (_th = /*#__PURE__*/_jsx(\"th\", {})), _th2 || (_th2 = /*#__PURE__*/_jsx(\"th\", {\n                  children: \"Name\"\n                })), _th3 || (_th3 = /*#__PURE__*/_jsx(\"th\", {\n                  children: \"Email\"\n                })), _th4 || (_th4 = /*#__PURE__*/_jsx(\"th\", {\n                  children: \"Members\"\n                })), displayRolePicker && (_th5 || (_th5 = /*#__PURE__*/_jsx(\"th\", {\n                  children: \"Roles\"\n                }))), /*#__PURE__*/_jsx(\"th\", {\n                  style: {\n                    width: '1%'\n                  }\n                })]\n              })\n            }), /*#__PURE__*/_jsx(\"tbody\", {\n              children: paginatedTeams.map(team => this.renderTeam(team))\n            })]\n          }), /*#__PURE__*/_jsx(HorizontalGroup, {\n            justify: \"flex-end\",\n            children: /*#__PURE__*/_jsx(Pagination, {\n              onNavigate: setTeamsSearchPage,\n              currentPage: searchPage,\n              numberOfPages: totalPages,\n              hideWhenSinglePage: true\n            })\n          })]\n        })\n      })]\n    });\n  }\n\n  renderList() {\n    const {\n      teamsCount,\n      hasFetched\n    } = this.props;\n\n    if (!hasFetched) {\n      return null;\n    }\n\n    if (teamsCount > 0) {\n      return this.renderTeamList();\n    } else {\n      return this.renderEmptyList();\n    }\n  }\n\n  render() {\n    const {\n      hasFetched,\n      navModel\n    } = this.props;\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: navModel,\n      children: /*#__PURE__*/_jsx(Page.Contents, {\n        isLoading: !hasFetched,\n        children: this.renderList()\n      })\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    navModel: getNavModel(state.navIndex, 'teams'),\n    teams: getTeams(state.teams),\n    searchQuery: getSearchQuery(state.teams),\n    searchPage: getTeamsSearchPage(state.teams),\n    teamsCount: getTeamsCount(state.teams),\n    hasFetched: state.teams.hasFetched,\n    editorsCanAdmin: config.editorsCanAdmin,\n    // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user // this makes the feature toggle mockable/controllable from tests,\n\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeams,\n  deleteTeam,\n  setSearchQuery,\n  setTeamsSearchPage\n};\nexport default connectWithCleanUp(mapStateToProps, mapDispatchToProps, state => state.teams)(TeamList);","map":{"version":3,"names":["React","PureComponent","DeleteButton","LinkButton","FilterInput","VerticalGroup","HorizontalGroup","Pagination","EmptyListCTA","Page","TeamRolePicker","fetchRoleOptions","config","getNavModel","contextSrv","AccessControlAction","connectWithCleanUp","deleteTeam","loadTeams","setSearchQuery","setTeamsSearchPage","getSearchQuery","getTeams","getTeamsCount","getTeamsSearchPage","isPermissionTeamAdmin","pageLimit","TeamList","constructor","props","team","id","value","teams","offset","searchPage","slice","state","roleOptions","componentDidMount","fetchTeams","licensedAccessControlEnabled","hasPermission","ActionRolesList","setState","renderTeam","editorsCanAdmin","signedInUser","permission","teamUrl","isTeamAdmin","canDelete","hasAccessInMetadata","ActionTeamsDelete","canReadTeam","ActionTeamsRead","canSeeTeamRoles","ActionTeamsRolesList","canUpdateTeamRoles","hasAccess","ActionTeamsRolesAdd","ActionTeamsRolesRemove","displayRolePicker","avatarUrl","name","padding","email","length","undefined","memberCount","renderEmptyList","ActionTeamsCreate","renderTeamList","searchQuery","teamAdmin","hasRole","canCreate","newTeamHref","paginatedTeams","getPaginatedTeams","totalPages","Math","ceil","onSearchQueryChange","width","map","renderList","teamsCount","hasFetched","render","navModel","mapStateToProps","navIndex","user","mapDispatchToProps"],"sources":["/home/soula/grafana/public/app/features/teams/TeamList.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { NavModel } from '@grafana/data';\nimport { DeleteButton, LinkButton, FilterInput, VerticalGroup, HorizontalGroup, Pagination } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { config } from 'app/core/config';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv, User } from 'app/core/services/context_srv';\nimport { AccessControlAction, Role, StoreState, Team } from 'app/types';\n\nimport { connectWithCleanUp } from '../../core/components/connectWithCleanUp';\n\nimport { deleteTeam, loadTeams } from './state/actions';\nimport { setSearchQuery, setTeamsSearchPage } from './state/reducers';\nimport { getSearchQuery, getTeams, getTeamsCount, getTeamsSearchPage, isPermissionTeamAdmin } from './state/selectors';\n\nconst pageLimit = 30;\n\nexport interface Props {\n  navModel: NavModel;\n  teams: Team[];\n  searchQuery: string;\n  searchPage: number;\n  teamsCount: number;\n  hasFetched: boolean;\n  loadTeams: typeof loadTeams;\n  deleteTeam: typeof deleteTeam;\n  setSearchQuery: typeof setSearchQuery;\n  setTeamsSearchPage: typeof setTeamsSearchPage;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport interface State {\n  roleOptions: Role[];\n}\n\nexport class TeamList extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { roleOptions: [] };\n  }\n\n  componentDidMount() {\n    this.fetchTeams();\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      this.fetchRoleOptions();\n    }\n  }\n\n  async fetchTeams() {\n    await this.props.loadTeams();\n  }\n\n  async fetchRoleOptions() {\n    const roleOptions = await fetchRoleOptions();\n    this.setState({ roleOptions });\n  }\n\n  deleteTeam = (team: Team) => {\n    this.props.deleteTeam(team.id);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  renderTeam(team: Team) {\n    const { editorsCanAdmin, signedInUser } = this.props;\n    const permission = team.permission;\n    const teamUrl = `org/teams/edit/${team.id}`;\n    const isTeamAdmin = isPermissionTeamAdmin({ permission, editorsCanAdmin, signedInUser });\n    const canDelete = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsDelete, team, isTeamAdmin);\n    const canReadTeam = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRead, team, isTeamAdmin);\n    const canSeeTeamRoles = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRolesList, team, false);\n    const canUpdateTeamRoles =\n      contextSrv.hasAccess(AccessControlAction.ActionTeamsRolesAdd, false) ||\n      contextSrv.hasAccess(AccessControlAction.ActionTeamsRolesRemove, false);\n    const displayRolePicker =\n      contextSrv.licensedAccessControlEnabled() &&\n      contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) &&\n      contextSrv.hasPermission(AccessControlAction.ActionRolesList);\n\n    return (\n      <tr key={team.id}>\n        <td className=\"width-4 text-center link-td\">\n          {canReadTeam ? (\n            <a href={teamUrl}>\n              <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"Team avatar\" />\n            </a>\n          ) : (\n            <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"Team avatar\" />\n          )}\n        </td>\n        <td className=\"link-td\">\n          {canReadTeam ? <a href={teamUrl}>{team.name}</a> : <div style={{ padding: '0px 8px' }}>{team.name}</div>}\n        </td>\n        <td className=\"link-td\">\n          {canReadTeam ? (\n            <a href={teamUrl} aria-label={team.email?.length > 0 ? undefined : 'Empty email cell'}>\n              {team.email}\n            </a>\n          ) : (\n            <div style={{ padding: '0px 8px' }} aria-label={team.email?.length > 0 ? undefined : 'Empty email cell'}>\n              {team.email}\n            </div>\n          )}\n        </td>\n        <td className=\"link-td\">\n          {canReadTeam ? (\n            <a href={teamUrl}>{team.memberCount}</a>\n          ) : (\n            <div style={{ padding: '0px 8px' }}>{team.memberCount}</div>\n          )}\n        </td>\n        {displayRolePicker && (\n          <td>\n            {canSeeTeamRoles && (\n              <TeamRolePicker teamId={team.id} roleOptions={this.state.roleOptions} disabled={!canUpdateTeamRoles} />\n            )}\n          </td>\n        )}\n        <td className=\"text-right\">\n          <DeleteButton\n            aria-label={`Delete team ${team.name}`}\n            size=\"sm\"\n            disabled={!canDelete}\n            onConfirm={() => this.deleteTeam(team)}\n          />\n        </td>\n      </tr>\n    );\n  }\n\n  renderEmptyList() {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any teams yet.\"\n        buttonIcon=\"users-alt\"\n        buttonLink=\"org/teams/new\"\n        buttonTitle=\" New team\"\n        buttonDisabled={!contextSrv.hasPermission(AccessControlAction.ActionTeamsCreate)}\n        proTip=\"Assign folder and dashboard permissions to teams instead of users to ease administration.\"\n        proTipLink=\"\"\n        proTipLinkTitle=\"\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  getPaginatedTeams = (teams: Team[]) => {\n    const offset = (this.props.searchPage - 1) * pageLimit;\n    return teams.slice(offset, offset + pageLimit);\n  };\n\n  renderTeamList() {\n    const { teams, searchQuery, editorsCanAdmin, searchPage, setTeamsSearchPage } = this.props;\n    const teamAdmin = contextSrv.hasRole('Admin') || (editorsCanAdmin && contextSrv.hasRole('Editor'));\n    const canCreate = contextSrv.hasAccess(AccessControlAction.ActionTeamsCreate, teamAdmin);\n    const displayRolePicker =\n      contextSrv.licensedAccessControlEnabled() &&\n      contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) &&\n      contextSrv.hasPermission(AccessControlAction.ActionRolesList);\n    const newTeamHref = canCreate ? 'org/teams/new' : '#';\n    const paginatedTeams = this.getPaginatedTeams(teams);\n    const totalPages = Math.ceil(teams.length / pageLimit);\n\n    return (\n      <>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search teams\" value={searchQuery} onChange={this.onSearchQueryChange} />\n          </div>\n\n          <LinkButton href={newTeamHref} disabled={!canCreate}>\n            New Team\n          </LinkButton>\n        </div>\n\n        <div className=\"admin-list-table\">\n          <VerticalGroup spacing=\"md\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th />\n                  <th>Name</th>\n                  <th>Email</th>\n                  <th>Members</th>\n                  {displayRolePicker && <th>Roles</th>}\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{paginatedTeams.map((team) => this.renderTeam(team))}</tbody>\n            </table>\n            <HorizontalGroup justify=\"flex-end\">\n              <Pagination\n                onNavigate={setTeamsSearchPage}\n                currentPage={searchPage}\n                numberOfPages={totalPages}\n                hideWhenSinglePage={true}\n              />\n            </HorizontalGroup>\n          </VerticalGroup>\n        </div>\n      </>\n    );\n  }\n\n  renderList() {\n    const { teamsCount, hasFetched } = this.props;\n\n    if (!hasFetched) {\n      return null;\n    }\n\n    if (teamsCount > 0) {\n      return this.renderTeamList();\n    } else {\n      return this.renderEmptyList();\n    }\n  }\n\n  render() {\n    const { hasFetched, navModel } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>{this.renderList()}</Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'teams'),\n    teams: getTeams(state.teams),\n    searchQuery: getSearchQuery(state.teams),\n    searchPage: getTeamsSearchPage(state.teams),\n    teamsCount: getTeamsCount(state.teams),\n    hasFetched: state.teams.hasFetched,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeams,\n  deleteTeam,\n  setSearchQuery,\n  setTeamsSearchPage,\n};\n\nexport default connectWithCleanUp(mapStateToProps, mapDispatchToProps, (state) => state.teams)(TeamList);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}