{"ast":null,"code":"var _VariableSectionHeade;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineFieldRow, VerticalGroup } from '@grafana/ui';\nimport { VariableSectionHeader } from '../editor/VariableSectionHeader';\nimport { VariableSelectField } from '../editor/VariableSelectField';\nimport { VariableSwitchField } from '../editor/VariableSwitchField';\nimport { VariableTextField } from '../editor/VariableTextField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class IntervalVariableEditor extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onAutoChange\", event => {\n      this.props.onPropChange({\n        propName: 'auto',\n        propValue: event.target.checked,\n        updateOptions: true\n      });\n    });\n\n    _defineProperty(this, \"onQueryChanged\", event => {\n      this.props.onPropChange({\n        propName: 'query',\n        propValue: event.currentTarget.value\n      });\n    });\n\n    _defineProperty(this, \"onQueryBlur\", event => {\n      this.props.onPropChange({\n        propName: 'query',\n        propValue: event.currentTarget.value,\n        updateOptions: true\n      });\n    });\n\n    _defineProperty(this, \"onAutoCountChanged\", option => {\n      this.props.onPropChange({\n        propName: 'auto_count',\n        propValue: option.value,\n        updateOptions: true\n      });\n    });\n\n    _defineProperty(this, \"onAutoMinChanged\", event => {\n      this.props.onPropChange({\n        propName: 'auto_min',\n        propValue: event.currentTarget.value,\n        updateOptions: true\n      });\n    });\n  }\n\n  render() {\n    var _stepOptions$find;\n\n    const {\n      variable\n    } = this.props;\n    const stepOptions = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500].map(count => ({\n      label: `${count}`,\n      value: count\n    }));\n    const stepValue = (_stepOptions$find = stepOptions.find(o => o.value === variable.auto_count)) !== null && _stepOptions$find !== void 0 ? _stepOptions$find : stepOptions[0];\n    return /*#__PURE__*/_jsxs(VerticalGroup, {\n      spacing: \"xs\",\n      children: [_VariableSectionHeade || (_VariableSectionHeade = /*#__PURE__*/_jsx(VariableSectionHeader, {\n        name: \"Interval options\"\n      })), /*#__PURE__*/_jsxs(VerticalGroup, {\n        spacing: \"none\",\n        children: [/*#__PURE__*/_jsx(VariableTextField, {\n          value: this.props.variable.query,\n          name: \"Values\",\n          placeholder: \"1m,10m,1h,6h,1d,7d\",\n          onChange: this.onQueryChanged,\n          onBlur: this.onQueryBlur,\n          labelWidth: 20,\n          testId: selectors.pages.Dashboard.Settings.Variables.Edit.IntervalVariable.intervalsValueInput,\n          grow: true,\n          required: true\n        }), /*#__PURE__*/_jsxs(InlineFieldRow, {\n          children: [/*#__PURE__*/_jsx(VariableSwitchField, {\n            value: this.props.variable.auto,\n            name: \"Auto option\",\n            tooltip: \"Dynamically calculates interval by dividing time range by the count specified.\",\n            onChange: this.onAutoChange\n          }), this.props.variable.auto ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(VariableSelectField, {\n              name: \"Step count\",\n              value: stepValue,\n              options: stepOptions,\n              onChange: this.onAutoCountChanged,\n              tooltip: \"How many times the current time range should be divided to calculate the value.\",\n              labelWidth: 7,\n              width: 9\n            }), /*#__PURE__*/_jsx(VariableTextField, {\n              value: this.props.variable.auto_min,\n              name: \"Min interval\",\n              placeholder: \"10s\",\n              onChange: this.onAutoMinChanged,\n              tooltip: \"The calculated value will not go below this threshold.\",\n              labelWidth: 13,\n              width: 11\n            })]\n          }) : null]\n        })]\n      })]\n    });\n  }\n\n}","map":{"version":3,"names":["React","PureComponent","selectors","InlineFieldRow","VerticalGroup","VariableSectionHeader","VariableSelectField","VariableSwitchField","VariableTextField","IntervalVariableEditor","event","props","onPropChange","propName","propValue","target","checked","updateOptions","currentTarget","value","option","render","variable","stepOptions","map","count","label","stepValue","find","o","auto_count","query","onQueryChanged","onQueryBlur","pages","Dashboard","Settings","Variables","Edit","IntervalVariable","intervalsValueInput","auto","onAutoChange","onAutoCountChanged","auto_min","onAutoMinChanged"],"sources":["/home/soula/grafana/public/app/features/variables/interval/IntervalVariableEditor.tsx"],"sourcesContent":["import React, { ChangeEvent, FormEvent, PureComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineFieldRow, VerticalGroup } from '@grafana/ui';\n\nimport { VariableSectionHeader } from '../editor/VariableSectionHeader';\nimport { VariableSelectField } from '../editor/VariableSelectField';\nimport { VariableSwitchField } from '../editor/VariableSwitchField';\nimport { VariableTextField } from '../editor/VariableTextField';\nimport { VariableEditorProps } from '../editor/types';\nimport { IntervalVariableModel } from '../types';\n\nexport interface Props extends VariableEditorProps<IntervalVariableModel> {}\n\nexport class IntervalVariableEditor extends PureComponent<Props> {\n  onAutoChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.props.onPropChange({\n      propName: 'auto',\n      propValue: event.target.checked,\n      updateOptions: true,\n    });\n  };\n\n  onQueryChanged = (event: FormEvent<HTMLInputElement>) => {\n    this.props.onPropChange({\n      propName: 'query',\n      propValue: event.currentTarget.value,\n    });\n  };\n\n  onQueryBlur = (event: FormEvent<HTMLInputElement>) => {\n    this.props.onPropChange({\n      propName: 'query',\n      propValue: event.currentTarget.value,\n      updateOptions: true,\n    });\n  };\n\n  onAutoCountChanged = (option: SelectableValue<number>) => {\n    this.props.onPropChange({\n      propName: 'auto_count',\n      propValue: option.value,\n      updateOptions: true,\n    });\n  };\n\n  onAutoMinChanged = (event: FormEvent<HTMLInputElement>) => {\n    this.props.onPropChange({\n      propName: 'auto_min',\n      propValue: event.currentTarget.value,\n      updateOptions: true,\n    });\n  };\n\n  render() {\n    const { variable } = this.props;\n    const stepOptions = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500].map((count) => ({\n      label: `${count}`,\n      value: count,\n    }));\n    const stepValue = stepOptions.find((o) => o.value === variable.auto_count) ?? stepOptions[0];\n\n    return (\n      <VerticalGroup spacing=\"xs\">\n        <VariableSectionHeader name=\"Interval options\" />\n        <VerticalGroup spacing=\"none\">\n          <VariableTextField\n            value={this.props.variable.query}\n            name=\"Values\"\n            placeholder=\"1m,10m,1h,6h,1d,7d\"\n            onChange={this.onQueryChanged}\n            onBlur={this.onQueryBlur}\n            labelWidth={20}\n            testId={selectors.pages.Dashboard.Settings.Variables.Edit.IntervalVariable.intervalsValueInput}\n            grow\n            required\n          />\n          <InlineFieldRow>\n            <VariableSwitchField\n              value={this.props.variable.auto}\n              name=\"Auto option\"\n              tooltip=\"Dynamically calculates interval by dividing time range by the count specified.\"\n              onChange={this.onAutoChange}\n            />\n            {this.props.variable.auto ? (\n              <>\n                <VariableSelectField\n                  name=\"Step count\"\n                  value={stepValue}\n                  options={stepOptions}\n                  onChange={this.onAutoCountChanged}\n                  tooltip=\"How many times the current time range should be divided to calculate the value.\"\n                  labelWidth={7}\n                  width={9}\n                />\n                <VariableTextField\n                  value={this.props.variable.auto_min}\n                  name=\"Min interval\"\n                  placeholder=\"10s\"\n                  onChange={this.onAutoMinChanged}\n                  tooltip=\"The calculated value will not go below this threshold.\"\n                  labelWidth={13}\n                  width={11}\n                />\n              </>\n            ) : null}\n          </InlineFieldRow>\n        </VerticalGroup>\n      </VerticalGroup>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}