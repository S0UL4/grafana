{"ast":null,"code":"import { config } from 'app/core/config';\nexport const hiddenReducerTypes = ['percent_diff', 'percent_diff_abs'];\nexport class ThresholdMapper {\n  static alertToGraphThresholds(panel) {\n    if (!panel.alert || config.unifiedAlertingEnabled) {\n      return false; // no update when no alerts\n    }\n\n    for (let i = 0; i < panel.alert.conditions.length; i++) {\n      var _condition$reducer;\n\n      const condition = panel.alert.conditions[i];\n\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      const evaluator = condition.evaluator;\n      const thresholds = panel.thresholds = [];\n      const visible = hiddenReducerTypes.indexOf((_condition$reducer = condition.reducer) === null || _condition$reducer === void 0 ? void 0 : _condition$reducer.type) === -1;\n\n      switch (evaluator.type) {\n        case 'gt':\n          {\n            const value = evaluator.params[0];\n            thresholds.push({\n              value: value,\n              op: 'gt',\n              visible\n            });\n            break;\n          }\n\n        case 'lt':\n          {\n            const value = evaluator.params[0];\n            thresholds.push({\n              value: value,\n              op: 'lt',\n              visible\n            });\n            break;\n          }\n\n        case 'outside_range':\n          {\n            const value1 = evaluator.params[0];\n            const value2 = evaluator.params[1];\n\n            if (value1 > value2) {\n              thresholds.push({\n                value: value1,\n                op: 'gt',\n                visible\n              });\n              thresholds.push({\n                value: value2,\n                op: 'lt',\n                visible\n              });\n            } else {\n              thresholds.push({\n                value: value1,\n                op: 'lt',\n                visible\n              });\n              thresholds.push({\n                value: value2,\n                op: 'gt',\n                visible\n              });\n            }\n\n            break;\n          }\n\n        case 'within_range':\n          {\n            const value1 = evaluator.params[0];\n            const value2 = evaluator.params[1];\n\n            if (value1 > value2) {\n              thresholds.push({\n                value: value1,\n                op: 'lt',\n                visible\n              });\n              thresholds.push({\n                value: value2,\n                op: 'gt',\n                visible\n              });\n            } else {\n              thresholds.push({\n                value: value1,\n                op: 'gt',\n                visible\n              });\n              thresholds.push({\n                value: value2,\n                op: 'lt',\n                visible\n              });\n            }\n\n            break;\n          }\n      }\n\n      break;\n    }\n\n    for (const t of panel.thresholds) {\n      t.fill = panel.options.alertThreshold;\n      t.line = panel.options.alertThreshold;\n      t.colorMode = 'critical';\n    }\n\n    const updated = true;\n    return updated;\n  }\n\n}","map":{"version":3,"names":["config","hiddenReducerTypes","ThresholdMapper","alertToGraphThresholds","panel","alert","unifiedAlertingEnabled","i","conditions","length","condition","type","evaluator","thresholds","visible","indexOf","reducer","value","params","push","op","value1","value2","t","fill","options","alertThreshold","line","colorMode","updated"],"sources":["/home/soula/grafana/public/app/features/alerting/state/ThresholdMapper.ts"],"sourcesContent":["import { config } from 'app/core/config';\nimport { PanelModel } from 'app/features/dashboard/state';\n\nexport const hiddenReducerTypes = ['percent_diff', 'percent_diff_abs'];\nexport class ThresholdMapper {\n  static alertToGraphThresholds(panel: PanelModel) {\n    if (!panel.alert || config.unifiedAlertingEnabled) {\n      return false; // no update when no alerts\n    }\n\n    for (let i = 0; i < panel.alert.conditions.length; i++) {\n      const condition = panel.alert.conditions[i];\n      if (condition.type !== 'query') {\n        continue;\n      }\n\n      const evaluator = condition.evaluator;\n      const thresholds: any[] = (panel.thresholds = []);\n      const visible = hiddenReducerTypes.indexOf(condition.reducer?.type) === -1;\n\n      switch (evaluator.type) {\n        case 'gt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'gt', visible });\n          break;\n        }\n        case 'lt': {\n          const value = evaluator.params[0];\n          thresholds.push({ value: value, op: 'lt', visible });\n          break;\n        }\n        case 'outside_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'gt', visible });\n            thresholds.push({ value: value2, op: 'lt', visible });\n          } else {\n            thresholds.push({ value: value1, op: 'lt', visible });\n            thresholds.push({ value: value2, op: 'gt', visible });\n          }\n\n          break;\n        }\n        case 'within_range': {\n          const value1 = evaluator.params[0];\n          const value2 = evaluator.params[1];\n\n          if (value1 > value2) {\n            thresholds.push({ value: value1, op: 'lt', visible });\n            thresholds.push({ value: value2, op: 'gt', visible });\n          } else {\n            thresholds.push({ value: value1, op: 'gt', visible });\n            thresholds.push({ value: value2, op: 'lt', visible });\n          }\n          break;\n        }\n      }\n      break;\n    }\n\n    for (const t of panel.thresholds) {\n      t.fill = panel.options.alertThreshold;\n      t.line = panel.options.alertThreshold;\n      t.colorMode = 'critical';\n    }\n\n    const updated = true;\n    return updated;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}