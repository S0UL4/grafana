{"ast":null,"code":"var _Icon, _Icon2, _Icon3, _Icon4;\n\nimport { cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Button, Icon, Modal, useStyles2 } from '@grafana/ui';\nimport { Field } from '../Field';\nimport ResourcePicker from '../ResourcePicker';\nimport getStyles from '../ResourcePicker/styles';\nimport { parseResourceURI } from '../ResourcePicker/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction parseResourceDetails(resourceURI) {\n  const parsed = parseResourceURI(resourceURI);\n\n  if (!parsed) {\n    return undefined;\n  }\n\n  return {\n    subscriptionName: parsed.subscriptionID,\n    resourceGroupName: parsed.resourceGroup,\n    resourceName: parsed.resource\n  };\n}\n\nconst ResourceField = ({\n  query,\n  datasource,\n  onQueryChange,\n  setResource,\n  selectableEntryTypes,\n  queryType,\n  resourceUri,\n  inlineField,\n  labelWidth\n}) => {\n  const styles = useStyles2(getStyles);\n  const [pickerIsOpen, setPickerIsOpen] = useState(false);\n  const handleOpenPicker = useCallback(() => {\n    setPickerIsOpen(true);\n  }, []);\n  const closePicker = useCallback(() => {\n    setPickerIsOpen(false);\n  }, []);\n  const handleApply = useCallback(resourceURI => {\n    onQueryChange(setResource(query, resourceURI));\n    closePicker();\n  }, [closePicker, onQueryChange, query, setResource]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Modal, {\n      className: styles.modal,\n      title: \"Select a resource\",\n      isOpen: pickerIsOpen,\n      onDismiss: closePicker // The growing number of rows added to the modal causes a focus\n      // error in the modal, making it impossible to click on new elements\n      ,\n      trapFocus: false,\n      children: /*#__PURE__*/_jsx(ResourcePicker, {\n        resourcePickerData: datasource.resourcePickerData,\n        resourceURI: resourceUri,\n        onApply: handleApply,\n        onCancel: closePicker,\n        selectableEntryTypes: selectableEntryTypes,\n        queryType: queryType\n      })\n    }), /*#__PURE__*/_jsx(Field, {\n      label: \"Resource\",\n      inlineField: inlineField,\n      labelWidth: labelWidth,\n      children: /*#__PURE__*/_jsx(Button, {\n        className: styles.resourceFieldButton,\n        variant: \"secondary\",\n        onClick: handleOpenPicker,\n        type: \"button\",\n        children: /*#__PURE__*/_jsx(ResourceLabel, {\n          resource: resourceUri,\n          datasource: datasource\n        })\n      })\n    })]\n  });\n};\n\nconst ResourceLabel = ({\n  resource,\n  datasource\n}) => {\n  const [resourceComponents, setResourceComponents] = useState(parseResourceDetails(resource !== null && resource !== void 0 ? resource : ''));\n  useEffect(() => {\n    if (resource && parseResourceDetails(resource)) {\n      datasource.resourcePickerData.getResourceURIDisplayProperties(resource).then(setResourceComponents);\n    } else {\n      setResourceComponents(undefined);\n    }\n  }, [datasource.resourcePickerData, resource]);\n\n  if (!resource) {\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: \"Select a resource\"\n    });\n  }\n\n  if (resourceComponents) {\n    return /*#__PURE__*/_jsx(FormattedResource, {\n      resource: resourceComponents\n    });\n  }\n\n  if (resource.startsWith('$')) {\n    return /*#__PURE__*/_jsxs(\"span\", {\n      children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n        name: \"x\"\n      })), \" \", resource]\n    });\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: resource\n  });\n};\n\nconst FormattedResource = ({\n  resource\n}) => {\n  const styles = useStyles2(getStyles);\n\n  if (resource.resourceName) {\n    return /*#__PURE__*/_jsxs(\"span\", {\n      className: cx(styles.truncated, styles.resourceField),\n      children: [_Icon2 || (_Icon2 = /*#__PURE__*/_jsx(Icon, {\n        name: \"cube\"\n      })), \" \", resource.resourceName]\n    });\n  }\n\n  if (resource.resourceGroupName) {\n    return /*#__PURE__*/_jsxs(\"span\", {\n      children: [_Icon3 || (_Icon3 = /*#__PURE__*/_jsx(Icon, {\n        name: \"folder\"\n      })), \" \", resource.resourceGroupName]\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"span\", {\n    children: [_Icon4 || (_Icon4 = /*#__PURE__*/_jsx(Icon, {\n      name: \"layer-group\"\n    })), \" \", resource.subscriptionName]\n  });\n};\n\nexport default ResourceField;","map":{"version":3,"names":["cx","React","useCallback","useEffect","useState","Button","Icon","Modal","useStyles2","Field","ResourcePicker","getStyles","parseResourceURI","parseResourceDetails","resourceURI","parsed","undefined","subscriptionName","subscriptionID","resourceGroupName","resourceGroup","resourceName","resource","ResourceField","query","datasource","onQueryChange","setResource","selectableEntryTypes","queryType","resourceUri","inlineField","labelWidth","styles","pickerIsOpen","setPickerIsOpen","handleOpenPicker","closePicker","handleApply","modal","resourcePickerData","resourceFieldButton","ResourceLabel","resourceComponents","setResourceComponents","getResourceURIDisplayProperties","then","startsWith","FormattedResource","truncated","resourceField"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourceField/ResourceField.tsx"],"sourcesContent":["import { cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { Button, Icon, Modal, useStyles2 } from '@grafana/ui';\n\nimport Datasource from '../../datasource';\nimport { ResourcePickerQueryType } from '../../resourcePicker/resourcePickerData';\nimport { AzureQueryEditorFieldProps, AzureMonitorQuery, AzureResourceSummaryItem } from '../../types';\nimport { Field } from '../Field';\nimport ResourcePicker from '../ResourcePicker';\nimport getStyles from '../ResourcePicker/styles';\nimport { ResourceRowType } from '../ResourcePicker/types';\nimport { parseResourceURI } from '../ResourcePicker/utils';\n\nfunction parseResourceDetails(resourceURI: string) {\n  const parsed = parseResourceURI(resourceURI);\n\n  if (!parsed) {\n    return undefined;\n  }\n\n  return {\n    subscriptionName: parsed.subscriptionID,\n    resourceGroupName: parsed.resourceGroup,\n    resourceName: parsed.resource,\n  };\n}\n\ninterface ResourceFieldProps extends AzureQueryEditorFieldProps {\n  setResource: (query: AzureMonitorQuery, resourceURI?: string) => AzureMonitorQuery;\n  selectableEntryTypes: ResourceRowType[];\n  queryType: ResourcePickerQueryType;\n  resourceUri?: string;\n  inlineField?: boolean;\n  labelWidth?: number;\n}\n\nconst ResourceField: React.FC<ResourceFieldProps> = ({\n  query,\n  datasource,\n  onQueryChange,\n  setResource,\n  selectableEntryTypes,\n  queryType,\n  resourceUri,\n  inlineField,\n  labelWidth,\n}) => {\n  const styles = useStyles2(getStyles);\n  const [pickerIsOpen, setPickerIsOpen] = useState(false);\n\n  const handleOpenPicker = useCallback(() => {\n    setPickerIsOpen(true);\n  }, []);\n\n  const closePicker = useCallback(() => {\n    setPickerIsOpen(false);\n  }, []);\n\n  const handleApply = useCallback(\n    (resourceURI: string | undefined) => {\n      onQueryChange(setResource(query, resourceURI));\n      closePicker();\n    },\n    [closePicker, onQueryChange, query, setResource]\n  );\n\n  return (\n    <>\n      <Modal\n        className={styles.modal}\n        title=\"Select a resource\"\n        isOpen={pickerIsOpen}\n        onDismiss={closePicker}\n        // The growing number of rows added to the modal causes a focus\n        // error in the modal, making it impossible to click on new elements\n        trapFocus={false}\n      >\n        <ResourcePicker\n          resourcePickerData={datasource.resourcePickerData}\n          resourceURI={resourceUri}\n          onApply={handleApply}\n          onCancel={closePicker}\n          selectableEntryTypes={selectableEntryTypes}\n          queryType={queryType}\n        />\n      </Modal>\n      <Field label=\"Resource\" inlineField={inlineField} labelWidth={labelWidth}>\n        <Button className={styles.resourceFieldButton} variant=\"secondary\" onClick={handleOpenPicker} type=\"button\">\n          <ResourceLabel resource={resourceUri} datasource={datasource} />\n        </Button>\n      </Field>\n    </>\n  );\n};\n\ninterface ResourceLabelProps {\n  resource: string | undefined;\n  datasource: Datasource;\n}\n\nconst ResourceLabel = ({ resource, datasource }: ResourceLabelProps) => {\n  const [resourceComponents, setResourceComponents] = useState(parseResourceDetails(resource ?? ''));\n\n  useEffect(() => {\n    if (resource && parseResourceDetails(resource)) {\n      datasource.resourcePickerData.getResourceURIDisplayProperties(resource).then(setResourceComponents);\n    } else {\n      setResourceComponents(undefined);\n    }\n  }, [datasource.resourcePickerData, resource]);\n\n  if (!resource) {\n    return <>Select a resource</>;\n  }\n\n  if (resourceComponents) {\n    return <FormattedResource resource={resourceComponents} />;\n  }\n\n  if (resource.startsWith('$')) {\n    return (\n      <span>\n        <Icon name=\"x\" /> {resource}\n      </span>\n    );\n  }\n\n  return <>{resource}</>;\n};\n\ninterface FormattedResourceProps {\n  resource: AzureResourceSummaryItem;\n}\n\nconst FormattedResource = ({ resource }: FormattedResourceProps) => {\n  const styles = useStyles2(getStyles);\n\n  if (resource.resourceName) {\n    return (\n      <span className={cx(styles.truncated, styles.resourceField)}>\n        <Icon name=\"cube\" /> {resource.resourceName}\n      </span>\n    );\n  }\n  if (resource.resourceGroupName) {\n    return (\n      <span>\n        <Icon name=\"folder\" /> {resource.resourceGroupName}\n      </span>\n    );\n  }\n  return (\n    <span>\n      <Icon name=\"layer-group\" /> {resource.subscriptionName}\n    </span>\n  );\n};\n\nexport default ResourceField;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}