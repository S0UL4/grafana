{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport { languages as prismLanguages } from 'prismjs';\nimport React, { useMemo } from 'react';\nimport { Editor } from '@grafana/slate-react';\nimport { makeValue, SlatePrism, useStyles } from '@grafana/ui';\nimport LogqlSyntax from 'app/plugins/datasource/loki/syntax';\nimport PromqlSyntax from 'app/plugins/datasource/prometheus/promql';\nimport { DataSourceType, isCloudRulesSource } from '../utils/datasource';\nimport { Well } from './Well';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const HighlightedQuery = ({\n  language,\n  expr\n}) => {\n  const plugins = useMemo(() => [SlatePrism({\n    onlyIn: node => node.type === 'code_block',\n    getSyntax: () => language\n  }, Object.assign({}, prismLanguages, {\n    [language]: language === 'logql' ? LogqlSyntax : PromqlSyntax\n  }))], [language]);\n  const slateValue = useMemo(() => makeValue(expr), [expr]);\n  return /*#__PURE__*/_jsx(Editor, {\n    plugins: plugins,\n    value: slateValue,\n    readOnly: true\n  });\n};\nexport const Expression = ({\n  expression: query,\n  rulesSource\n}) => {\n  const styles = useStyles(getStyles);\n  return /*#__PURE__*/_jsx(Well, {\n    className: cx(styles.well, 'slate-query-field'),\n    children: isCloudRulesSource(rulesSource) ? /*#__PURE__*/_jsx(HighlightedQuery, {\n      expr: query,\n      language: rulesSource.type === DataSourceType.Loki ? 'logql' : 'promql'\n    }) : query\n  });\n};\nexport const getStyles = theme => ({\n  well: css`\n    font-family: ${theme.typography.fontFamily.monospace};\n  `\n});","map":{"version":3,"names":["css","cx","languages","prismLanguages","React","useMemo","Editor","makeValue","SlatePrism","useStyles","LogqlSyntax","PromqlSyntax","DataSourceType","isCloudRulesSource","Well","HighlightedQuery","language","expr","plugins","onlyIn","node","type","getSyntax","slateValue","Expression","expression","query","rulesSource","styles","getStyles","well","Loki","theme","typography","fontFamily","monospace"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/Expression.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { Editor } from '@grafana/slate-react';\nimport { makeValue, SlatePrism, useStyles } from '@grafana/ui';\nimport LogqlSyntax from 'app/plugins/datasource/loki/syntax';\nimport PromqlSyntax from 'app/plugins/datasource/prometheus/promql';\nimport { RulesSource } from 'app/types/unified-alerting';\n\nimport { DataSourceType, isCloudRulesSource } from '../utils/datasource';\n\nimport { Well } from './Well';\n\ninterface Props {\n  expression: string;\n  rulesSource: RulesSource;\n}\n\nexport const HighlightedQuery: FC<{ language: 'promql' | 'logql'; expr: string }> = ({ language, expr }) => {\n  const plugins = useMemo(\n    () => [\n      SlatePrism(\n        {\n          onlyIn: (node: any) => node.type === 'code_block',\n          getSyntax: () => language,\n        },\n        { ...(prismLanguages as LanguageMap), [language]: language === 'logql' ? LogqlSyntax : PromqlSyntax }\n      ),\n    ],\n    [language]\n  );\n\n  const slateValue = useMemo(() => makeValue(expr), [expr]);\n\n  return <Editor plugins={plugins} value={slateValue} readOnly={true} />;\n};\n\nexport const Expression: FC<Props> = ({ expression: query, rulesSource }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <Well className={cx(styles.well, 'slate-query-field')}>\n      {isCloudRulesSource(rulesSource) ? (\n        <HighlightedQuery expr={query} language={rulesSource.type === DataSourceType.Loki ? 'logql' : 'promql'} />\n      ) : (\n        query\n      )}\n    </Well>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme) => ({\n  well: css`\n    font-family: ${theme.typography.fontFamily.monospace};\n  `,\n});\n"],"mappings":"AAAA,SAASA,GAAT,EAAcC,EAAd,QAAwB,cAAxB;AACA,SAAsBC,SAAS,IAAIC,cAAnC,QAAyD,SAAzD;AACA,OAAOC,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AAGA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,SAAhC,QAAiD,aAAjD;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AAGA,SAASC,cAAT,EAAyBC,kBAAzB,QAAmD,qBAAnD;AAEA,SAASC,IAAT,QAAqB,QAArB;;AAOA,OAAO,MAAMC,gBAAoE,GAAG,CAAC;EAAEC,QAAF;EAAYC;AAAZ,CAAD,KAAwB;EAC1G,MAAMC,OAAO,GAAGb,OAAO,CACrB,MAAM,CACJG,UAAU,CACR;IACEW,MAAM,EAAGC,IAAD,IAAeA,IAAI,CAACC,IAAL,KAAc,YADvC;IAEEC,SAAS,EAAE,MAAMN;EAFnB,CADQ,oBAKFb,cALE;IAK8B,CAACa,QAAD,GAAYA,QAAQ,KAAK,OAAb,GAAuBN,WAAvB,GAAqCC;EAL/E,GADN,CADe,EAUrB,CAACK,QAAD,CAVqB,CAAvB;EAaA,MAAMO,UAAU,GAAGlB,OAAO,CAAC,MAAME,SAAS,CAACU,IAAD,CAAhB,EAAwB,CAACA,IAAD,CAAxB,CAA1B;EAEA,oBAAO,KAAC,MAAD;IAAQ,OAAO,EAAEC,OAAjB;IAA0B,KAAK,EAAEK,UAAjC;IAA6C,QAAQ,EAAE;EAAvD,EAAP;AACD,CAjBM;AAmBP,OAAO,MAAMC,UAAqB,GAAG,CAAC;EAAEC,UAAU,EAAEC,KAAd;EAAqBC;AAArB,CAAD,KAAwC;EAC3E,MAAMC,MAAM,GAAGnB,SAAS,CAACoB,SAAD,CAAxB;EAEA,oBACE,KAAC,IAAD;IAAM,SAAS,EAAE5B,EAAE,CAAC2B,MAAM,CAACE,IAAR,EAAc,mBAAd,CAAnB;IAAA,UACGjB,kBAAkB,CAACc,WAAD,CAAlB,gBACC,KAAC,gBAAD;MAAkB,IAAI,EAAED,KAAxB;MAA+B,QAAQ,EAAEC,WAAW,CAACN,IAAZ,KAAqBT,cAAc,CAACmB,IAApC,GAA2C,OAA3C,GAAqD;IAA9F,EADD,GAGCL;EAJJ,EADF;AASD,CAZM;AAcP,OAAO,MAAMG,SAAS,GAAIG,KAAD,KAA0B;EACjDF,IAAI,EAAE9B,GAAI;AACZ,mBAAmBgC,KAAK,CAACC,UAAN,CAAiBC,UAAjB,CAA4BC,SAAU;AACzD;AAHmD,CAA1B,CAAlB"},"metadata":{},"sourceType":"module"}