{"ast":null,"code":"import { difference, isEqual } from 'lodash';\nimport React from 'react';\nexport class GraphSeriesToggler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSeriesToggle = this.onSeriesToggle.bind(this);\n    this.state = {\n      hiddenSeries: [],\n      toggledSeries: props.series\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      series\n    } = this.props;\n\n    if (!isEqual(prevProps.series, series)) {\n      this.setState({\n        hiddenSeries: [],\n        toggledSeries: series\n      });\n    }\n  }\n\n  onSeriesToggle(label, event) {\n    const {\n      series,\n      onHiddenSeriesChanged\n    } = this.props;\n    const {\n      hiddenSeries\n    } = this.state;\n\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      // Toggling series with key makes the series itself to toggle\n      const newHiddenSeries = hiddenSeries.indexOf(label) > -1 ? hiddenSeries.filter(series => series !== label) : hiddenSeries.concat([label]);\n      const toggledSeries = series.map(series => Object.assign({}, series, {\n        isVisible: newHiddenSeries.indexOf(series.label) === -1\n      }));\n      this.setState({\n        hiddenSeries: newHiddenSeries,\n        toggledSeries\n      }, () => onHiddenSeriesChanged ? onHiddenSeriesChanged(newHiddenSeries) : undefined);\n      return;\n    } // Toggling series with out key toggles all the series but the clicked one\n\n\n    const allSeriesLabels = series.map(series => series.label);\n    const newHiddenSeries = hiddenSeries.length + 1 === allSeriesLabels.length ? [] : difference(allSeriesLabels, [label]);\n    const toggledSeries = series.map(series => Object.assign({}, series, {\n      isVisible: newHiddenSeries.indexOf(series.label) === -1\n    }));\n    this.setState({\n      hiddenSeries: newHiddenSeries,\n      toggledSeries\n    }, () => onHiddenSeriesChanged ? onHiddenSeriesChanged(newHiddenSeries) : undefined);\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const {\n      toggledSeries\n    } = this.state;\n    return children({\n      onSeriesToggle: this.onSeriesToggle,\n      toggledSeries\n    });\n  }\n\n}","map":{"version":3,"names":["difference","isEqual","React","GraphSeriesToggler","Component","constructor","props","onSeriesToggle","bind","state","hiddenSeries","toggledSeries","series","componentDidUpdate","prevProps","setState","label","event","onHiddenSeriesChanged","ctrlKey","metaKey","shiftKey","newHiddenSeries","indexOf","filter","concat","map","isVisible","undefined","allSeriesLabels","length","render","children"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Graph/GraphSeriesToggler.tsx"],"sourcesContent":["import { difference, isEqual } from 'lodash';\nimport React from 'react';\n\nimport { GraphSeriesXY } from '@grafana/data';\n\nexport interface GraphSeriesTogglerAPI {\n  onSeriesToggle: (label: string, event: React.MouseEvent<HTMLElement>) => void;\n  toggledSeries: GraphSeriesXY[];\n}\n\nexport interface GraphSeriesTogglerProps {\n  children: (api: GraphSeriesTogglerAPI) => JSX.Element;\n  series: GraphSeriesXY[];\n  onHiddenSeriesChanged?: (hiddenSeries: string[]) => void;\n}\n\nexport interface GraphSeriesTogglerState {\n  hiddenSeries: string[];\n  toggledSeries: GraphSeriesXY[];\n}\n\nexport class GraphSeriesToggler extends React.Component<GraphSeriesTogglerProps, GraphSeriesTogglerState> {\n  constructor(props: GraphSeriesTogglerProps) {\n    super(props);\n\n    this.onSeriesToggle = this.onSeriesToggle.bind(this);\n\n    this.state = {\n      hiddenSeries: [],\n      toggledSeries: props.series,\n    };\n  }\n\n  componentDidUpdate(prevProps: Readonly<GraphSeriesTogglerProps>) {\n    const { series } = this.props;\n    if (!isEqual(prevProps.series, series)) {\n      this.setState({ hiddenSeries: [], toggledSeries: series });\n    }\n  }\n\n  onSeriesToggle(label: string, event: React.MouseEvent<HTMLElement>) {\n    const { series, onHiddenSeriesChanged } = this.props;\n    const { hiddenSeries } = this.state;\n\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\n      // Toggling series with key makes the series itself to toggle\n      const newHiddenSeries =\n        hiddenSeries.indexOf(label) > -1\n          ? hiddenSeries.filter((series) => series !== label)\n          : hiddenSeries.concat([label]);\n\n      const toggledSeries = series.map((series) => ({\n        ...series,\n        isVisible: newHiddenSeries.indexOf(series.label) === -1,\n      }));\n      this.setState({ hiddenSeries: newHiddenSeries, toggledSeries }, () =>\n        onHiddenSeriesChanged ? onHiddenSeriesChanged(newHiddenSeries) : undefined\n      );\n      return;\n    }\n\n    // Toggling series with out key toggles all the series but the clicked one\n    const allSeriesLabels = series.map((series) => series.label);\n    const newHiddenSeries =\n      hiddenSeries.length + 1 === allSeriesLabels.length ? [] : difference(allSeriesLabels, [label]);\n    const toggledSeries = series.map((series) => ({\n      ...series,\n      isVisible: newHiddenSeries.indexOf(series.label) === -1,\n    }));\n\n    this.setState({ hiddenSeries: newHiddenSeries, toggledSeries }, () =>\n      onHiddenSeriesChanged ? onHiddenSeriesChanged(newHiddenSeries) : undefined\n    );\n  }\n\n  render() {\n    const { children } = this.props;\n    const { toggledSeries } = this.state;\n\n    return children({\n      onSeriesToggle: this.onSeriesToggle,\n      toggledSeries,\n    });\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,QAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAoBA,OAAO,MAAMC,kBAAN,SAAiCD,KAAK,CAACE,SAAvC,CAAmG;EACxGC,WAAW,CAACC,KAAD,EAAiC;IAC1C,MAAMA,KAAN;IAEA,KAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;IAEA,KAAKC,KAAL,GAAa;MACXC,YAAY,EAAE,EADH;MAEXC,aAAa,EAAEL,KAAK,CAACM;IAFV,CAAb;EAID;;EAEDC,kBAAkB,CAACC,SAAD,EAA+C;IAC/D,MAAM;MAAEF;IAAF,IAAa,KAAKN,KAAxB;;IACA,IAAI,CAACL,OAAO,CAACa,SAAS,CAACF,MAAX,EAAmBA,MAAnB,CAAZ,EAAwC;MACtC,KAAKG,QAAL,CAAc;QAAEL,YAAY,EAAE,EAAhB;QAAoBC,aAAa,EAAEC;MAAnC,CAAd;IACD;EACF;;EAEDL,cAAc,CAACS,KAAD,EAAgBC,KAAhB,EAAsD;IAClE,MAAM;MAAEL,MAAF;MAAUM;IAAV,IAAoC,KAAKZ,KAA/C;IACA,MAAM;MAAEI;IAAF,IAAmB,KAAKD,KAA9B;;IAEA,IAAIQ,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAACG,OAAvB,IAAkCH,KAAK,CAACI,QAA5C,EAAsD;MACpD;MACA,MAAMC,eAAe,GACnBZ,YAAY,CAACa,OAAb,CAAqBP,KAArB,IAA8B,CAAC,CAA/B,GACIN,YAAY,CAACc,MAAb,CAAqBZ,MAAD,IAAYA,MAAM,KAAKI,KAA3C,CADJ,GAEIN,YAAY,CAACe,MAAb,CAAoB,CAACT,KAAD,CAApB,CAHN;MAKA,MAAML,aAAa,GAAGC,MAAM,CAACc,GAAP,CAAYd,MAAD,sBAC5BA,MAD4B;QAE/Be,SAAS,EAAEL,eAAe,CAACC,OAAhB,CAAwBX,MAAM,CAACI,KAA/B,MAA0C,CAAC;MAFvB,EAAX,CAAtB;MAIA,KAAKD,QAAL,CAAc;QAAEL,YAAY,EAAEY,eAAhB;QAAiCX;MAAjC,CAAd,EAAgE,MAC9DO,qBAAqB,GAAGA,qBAAqB,CAACI,eAAD,CAAxB,GAA4CM,SADnE;MAGA;IACD,CAnBiE,CAqBlE;;;IACA,MAAMC,eAAe,GAAGjB,MAAM,CAACc,GAAP,CAAYd,MAAD,IAAYA,MAAM,CAACI,KAA9B,CAAxB;IACA,MAAMM,eAAe,GACnBZ,YAAY,CAACoB,MAAb,GAAsB,CAAtB,KAA4BD,eAAe,CAACC,MAA5C,GAAqD,EAArD,GAA0D9B,UAAU,CAAC6B,eAAD,EAAkB,CAACb,KAAD,CAAlB,CADtE;IAEA,MAAML,aAAa,GAAGC,MAAM,CAACc,GAAP,CAAYd,MAAD,sBAC5BA,MAD4B;MAE/Be,SAAS,EAAEL,eAAe,CAACC,OAAhB,CAAwBX,MAAM,CAACI,KAA/B,MAA0C,CAAC;IAFvB,EAAX,CAAtB;IAKA,KAAKD,QAAL,CAAc;MAAEL,YAAY,EAAEY,eAAhB;MAAiCX;IAAjC,CAAd,EAAgE,MAC9DO,qBAAqB,GAAGA,qBAAqB,CAACI,eAAD,CAAxB,GAA4CM,SADnE;EAGD;;EAEDG,MAAM,GAAG;IACP,MAAM;MAAEC;IAAF,IAAe,KAAK1B,KAA1B;IACA,MAAM;MAAEK;IAAF,IAAoB,KAAKF,KAA/B;IAEA,OAAOuB,QAAQ,CAAC;MACdzB,cAAc,EAAE,KAAKA,cADP;MAEdI;IAFc,CAAD,CAAf;EAID;;AA9DuG"},"metadata":{},"sourceType":"module"}