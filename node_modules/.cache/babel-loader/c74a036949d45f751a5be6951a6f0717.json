{"ast":null,"code":"import { lastValueFrom } from 'rxjs';\nimport { locationUtil } from '@grafana/data';\nimport { getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp, updateNavIndex } from 'app/core/actions';\nimport { createSuccessNotification, createWarningNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/core';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { buildNavModel } from './navModel';\nimport { loadFolder, loadFolderPermissions, setCanViewFolderPermissions } from './reducers';\nexport function getFolderByUid(uid) {\n  return async dispatch => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\nexport function saveFolder(folder) {\n  return async dispatch => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version\n    });\n    dispatch(notifyApp(createSuccessNotification('Folder saved')));\n    locationService.push(`${res.url}/settings`);\n  };\n}\nexport function deleteFolder(uid) {\n  return async () => {\n    await backendSrv.delete(`/api/folders/${uid}?forceDeleteRules=false`);\n    locationService.push('/dashboards');\n  };\n}\nexport function getFolderPermissions(uid) {\n  return async dispatch => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\nexport function checkFolderPermissions(uid) {\n  return async dispatch => {\n    try {\n      await lastValueFrom(backendSrv.fetch({\n        method: 'GET',\n        showErrorAlert: false,\n        showSuccessAlert: false,\n        url: `/api/folders/${uid}/permissions`\n      }));\n      dispatch(setCanViewFolderPermissions(true));\n    } catch (err) {\n      if (isFetchError(err) && err.status !== 403) {\n        var _err$data;\n\n        dispatch(notifyApp(createWarningNotification('Error checking folder permissions', (_err$data = err.data) === null || _err$data === void 0 ? void 0 : _err$data.message)));\n      }\n\n      dispatch(setCanViewFolderPermissions(false));\n    }\n  };\n}\n\nfunction toUpdateItem(item) {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate, level) {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item); // if this is the item we want to update, update it's permission\n\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, {\n      items: itemsToUpdate\n    });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\nexport function removeFolderPermission(itemToDelete) {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, {\n      items: itemsToUpdate\n    });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\nexport function addFolderPermission(newItem) {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission\n    });\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, {\n      items: itemsToUpdate\n    });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\nexport function createNewFolder(folderName) {\n  return async dispatch => {\n    const newFolder = await getBackendSrv().post('/api/folders', {\n      title: folderName\n    });\n    await contextSrv.fetchUserPermissions();\n    dispatch(notifyApp(createSuccessNotification('Folder Created', 'OK')));\n    locationService.push(locationUtil.stripBaseFromUrl(newFolder.url));\n  };\n}","map":{"version":3,"names":["lastValueFrom","locationUtil","getBackendSrv","isFetchError","locationService","notifyApp","updateNavIndex","createSuccessNotification","createWarningNotification","contextSrv","backendSrv","buildNavModel","loadFolder","loadFolderPermissions","setCanViewFolderPermissions","getFolderByUid","uid","dispatch","folder","saveFolder","res","put","title","version","push","url","deleteFolder","delete","getFolderPermissions","permissions","get","checkFolderPermissions","fetch","method","showErrorAlert","showSuccessAlert","err","status","data","message","toUpdateItem","item","userId","teamId","role","permission","updateFolderPermission","itemToUpdate","level","getStore","itemsToUpdate","inherited","updated","post","items","removeFolderPermission","itemToDelete","addFolderPermission","newItem","createNewFolder","folderName","newFolder","fetchUserPermissions","stripBaseFromUrl"],"sources":["/home/soula/grafana/public/app/features/folders/state/actions.ts"],"sourcesContent":["import { lastValueFrom } from 'rxjs';\n\nimport { locationUtil } from '@grafana/data';\nimport { getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp, updateNavIndex } from 'app/core/actions';\nimport { createSuccessNotification, createWarningNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/core';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { FolderState, ThunkResult } from 'app/types';\nimport { DashboardAcl, DashboardAclUpdateDTO, NewDashboardAclItem, PermissionLevel } from 'app/types/acl';\n\nimport { buildNavModel } from './navModel';\nimport { loadFolder, loadFolderPermissions, setCanViewFolderPermissions } from './reducers';\n\nexport function getFolderByUid(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const folder = await backendSrv.getFolderByUid(uid);\n    dispatch(loadFolder(folder));\n    dispatch(updateNavIndex(buildNavModel(folder)));\n  };\n}\n\nexport function saveFolder(folder: FolderState): ThunkResult<void> {\n  return async (dispatch) => {\n    const res = await backendSrv.put(`/api/folders/${folder.uid}`, {\n      title: folder.title,\n      version: folder.version,\n    });\n\n    dispatch(notifyApp(createSuccessNotification('Folder saved')));\n    locationService.push(`${res.url}/settings`);\n  };\n}\n\nexport function deleteFolder(uid: string): ThunkResult<void> {\n  return async () => {\n    await backendSrv.delete(`/api/folders/${uid}?forceDeleteRules=false`);\n    locationService.push('/dashboards');\n  };\n}\n\nexport function getFolderPermissions(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const permissions = await backendSrv.get(`/api/folders/${uid}/permissions`);\n    dispatch(loadFolderPermissions(permissions));\n  };\n}\n\nexport function checkFolderPermissions(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await lastValueFrom(\n        backendSrv.fetch({\n          method: 'GET',\n          showErrorAlert: false,\n          showSuccessAlert: false,\n          url: `/api/folders/${uid}/permissions`,\n        })\n      );\n      dispatch(setCanViewFolderPermissions(true));\n    } catch (err) {\n      if (isFetchError(err) && err.status !== 403) {\n        dispatch(notifyApp(createWarningNotification('Error checking folder permissions', err.data?.message)));\n      }\n\n      dispatch(setCanViewFolderPermissions(false));\n    }\n  };\n}\n\nfunction toUpdateItem(item: DashboardAcl): DashboardAclUpdateDTO {\n  return {\n    userId: item.userId,\n    teamId: item.teamId,\n    role: item.role,\n    permission: item.permission,\n  };\n}\n\nexport function updateFolderPermission(itemToUpdate: DashboardAcl, level: PermissionLevel): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n\n      const updated = toUpdateItem(item);\n\n      // if this is the item we want to update, update it's permission\n      if (itemToUpdate === item) {\n        updated.permission = level;\n      }\n\n      itemsToUpdate.push(updated);\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function removeFolderPermission(itemToDelete: DashboardAcl): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited || item === itemToDelete) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function addFolderPermission(newItem: NewDashboardAclItem): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const folder = getStore().folder;\n    const itemsToUpdate = [];\n\n    for (const item of folder.permissions) {\n      if (item.inherited) {\n        continue;\n      }\n      itemsToUpdate.push(toUpdateItem(item));\n    }\n\n    itemsToUpdate.push({\n      userId: newItem.userId,\n      teamId: newItem.teamId,\n      role: newItem.role,\n      permission: newItem.permission,\n    });\n\n    await backendSrv.post(`/api/folders/${folder.uid}/permissions`, { items: itemsToUpdate });\n    await dispatch(getFolderPermissions(folder.uid));\n  };\n}\n\nexport function createNewFolder(folderName: string): ThunkResult<void> {\n  return async (dispatch) => {\n    const newFolder = await getBackendSrv().post('/api/folders', { title: folderName });\n    await contextSrv.fetchUserPermissions();\n    dispatch(notifyApp(createSuccessNotification('Folder Created', 'OK')));\n    locationService.push(locationUtil.stripBaseFromUrl(newFolder.url));\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}