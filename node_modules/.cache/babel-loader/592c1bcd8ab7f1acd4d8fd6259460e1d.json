{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * @alpha\n * internal interface\n */\n\n/**\n * @alpha\n * Base event type\n */\nexport class BusEventBase {\n  constructor() {\n    _defineProperty(this, \"type\", void 0);\n\n    _defineProperty(this, \"payload\", void 0);\n\n    _defineProperty(this, \"origin\", void 0);\n\n    //@ts-ignore\n    this.type = this.__proto__.constructor.type;\n  }\n\n}\n/**\n * @alpha\n * Base event type with payload\n */\n\nexport class BusEventWithPayload extends BusEventBase {\n  constructor(payload) {\n    super();\n\n    _defineProperty(this, \"payload\", void 0);\n\n    this.payload = payload;\n  }\n\n}\n/*\n * Interface for an event type constructor\n */","map":{"version":3,"names":["BusEventBase","constructor","type","__proto__","BusEventWithPayload","payload"],"sources":["/home/soula/grafana/packages/grafana-data/src/events/types.ts"],"sourcesContent":["import { Unsubscribable, Observable } from 'rxjs';\n\n/**\n * @alpha\n * internal interface\n */\nexport interface BusEvent {\n  readonly type: string;\n  readonly payload?: any;\n  readonly origin?: EventBus;\n}\n\n/**\n * @alpha\n * Base event type\n */\nexport abstract class BusEventBase implements BusEvent {\n  readonly type: string;\n  readonly payload?: any;\n  readonly origin?: EventBus;\n\n  constructor() {\n    //@ts-ignore\n    this.type = this.__proto__.constructor.type;\n  }\n}\n\n/**\n * @alpha\n * Base event type with payload\n */\nexport abstract class BusEventWithPayload<T> extends BusEventBase {\n  readonly payload: T;\n\n  constructor(payload: T) {\n    super();\n    this.payload = payload;\n  }\n}\n\n/*\n * Interface for an event type constructor\n */\nexport interface BusEventType<T extends BusEvent> {\n  type: string;\n  new (...args: any[]): T;\n}\n\n/**\n * @alpha\n * Event callback/handler type\n */\nexport interface BusEventHandler<T extends BusEvent> {\n  (event: T): void;\n}\n\n/**\n * @alpha\n * Main minimal interface\n */\nexport interface EventFilterOptions {\n  onlyLocal: boolean;\n}\n\n/**\n * @alpha\n * Main minimal interface\n */\nexport interface EventBus {\n  /**\n   * Publish single vent\n   */\n  publish<T extends BusEvent>(event: T): void;\n\n  /**\n   * Get observable of events\n   */\n  getStream<T extends BusEvent>(eventType: BusEventType<T>): Observable<T>;\n\n  /**\n   * Subscribe to an event stream\n   *\n   * This function is a wrapper around the `getStream(...)` function\n   */\n  subscribe<T extends BusEvent>(eventType: BusEventType<T>, handler: BusEventHandler<T>): Unsubscribable;\n\n  /**\n   * Remove all event subscriptions\n   */\n  removeAllListeners(): void;\n\n  /**\n   * Returns a new bus scoped that knows where it exists in a heiarchy\n   *\n   * @internal -- This is included for internal use only should not be used directly\n   */\n  newScopedBus(key: string, filter: EventFilterOptions): EventBus;\n}\n\n/**\n * @public\n * @deprecated event type\n */\nexport interface AppEvent<T> {\n  readonly name: string;\n  payload?: T;\n}\n\n/** @public */\nexport interface LegacyEmitter {\n  /**\n   * @deprecated use $emit\n   */\n  emit<T>(event: AppEvent<T> | string, payload?: T): void;\n\n  /**\n   * @deprecated use $on\n   */\n  on<T>(event: AppEvent<T> | string, handler: LegacyEventHandler<T>, scope?: any): void;\n\n  /**\n   * @deprecated use $on\n   */\n  off<T>(event: AppEvent<T> | string, handler: (payload?: T | any) => void): void;\n}\n\n/** @public */\nexport interface LegacyEventHandler<T> {\n  (payload: T): void;\n  wrapper?: (event: BusEvent) => void;\n}\n\n/** @alpha */\nexport interface EventBusExtended extends EventBus, LegacyEmitter {}\n"],"mappings":";;AAEA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA,OAAO,MAAeA,YAAf,CAAgD;EAKrDC,WAAW,GAAG;IAAA;;IAAA;;IAAA;;IACZ;IACA,KAAKC,IAAL,GAAY,KAAKC,SAAL,CAAeF,WAAf,CAA2BC,IAAvC;EACD;;AARoD;AAWvD;AACA;AACA;AACA;;AACA,OAAO,MAAeE,mBAAf,SAA8CJ,YAA9C,CAA2D;EAGhEC,WAAW,CAACI,OAAD,EAAa;IACtB;;IADsB;;IAEtB,KAAKA,OAAL,GAAeA,OAAf;EACD;;AAN+D;AASlE;AACA;AACA"},"metadata":{},"sourceType":"module"}