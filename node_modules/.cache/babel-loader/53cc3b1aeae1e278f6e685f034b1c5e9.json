{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PluginState } from '../types';\nexport class Registry {\n  constructor(_init) {\n    _defineProperty(this, \"ordered\", []);\n\n    _defineProperty(this, \"byId\", new Map());\n\n    _defineProperty(this, \"initialized\", false);\n\n    _defineProperty(this, \"setInit\", init => {\n      if (this.initialized) {\n        throw new Error('Registry already initialized');\n      }\n\n      this.init = init;\n    });\n\n    this.init = _init;\n  }\n\n  getIfExists(id) {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    if (id) {\n      return this.byId.get(id);\n    }\n\n    return undefined;\n  }\n\n  initialize() {\n    if (this.init) {\n      for (const ext of this.init()) {\n        this.register(ext);\n      }\n    }\n\n    this.sort();\n    this.initialized = true;\n  }\n\n  get(id) {\n    const v = this.getIfExists(id);\n\n    if (!v) {\n      throw new Error(`\"${id}\" not found in: ${this.list().map(v => v.id)}`);\n    }\n\n    return v;\n  }\n\n  selectOptions(current, filter) {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    const select = {\n      options: [],\n      current: []\n    };\n    const currentOptions = {};\n\n    if (current) {\n      for (const id of current) {\n        currentOptions[id] = {};\n      }\n    }\n\n    for (const ext of this.ordered) {\n      if (ext.excludeFromPicker) {\n        continue;\n      }\n\n      if (filter && !filter(ext)) {\n        continue;\n      }\n\n      const option = {\n        value: ext.id,\n        label: ext.name,\n        description: ext.description\n      };\n\n      if (ext.state === PluginState.alpha) {\n        option.label += ' (alpha)';\n      }\n\n      select.options.push(option);\n\n      if (currentOptions[ext.id]) {\n        currentOptions[ext.id] = option;\n      }\n    }\n\n    if (current) {\n      // this makes sure we preserve the order of ids\n      select.current = Object.values(currentOptions);\n    }\n\n    return select;\n  }\n  /**\n   * Return a list of values by ID, or all values if not specified\n   */\n\n\n  list(ids) {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    if (ids) {\n      const found = [];\n\n      for (const id of ids) {\n        const v = this.getIfExists(id);\n\n        if (v) {\n          found.push(v);\n        }\n      }\n\n      return found;\n    }\n\n    return this.ordered;\n  }\n\n  isEmpty() {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    return this.ordered.length === 0;\n  }\n\n  register(ext) {\n    if (this.byId.has(ext.id)) {\n      throw new Error('Duplicate Key:' + ext.id);\n    }\n\n    this.byId.set(ext.id, ext);\n    this.ordered.push(ext);\n\n    if (ext.aliasIds) {\n      for (const alias of ext.aliasIds) {\n        if (!this.byId.has(alias)) {\n          this.byId.set(alias, ext);\n        }\n      }\n    }\n\n    if (this.initialized) {\n      this.sort();\n    }\n  }\n\n  sort() {// TODO sort the list\n  }\n\n}","map":{"version":3,"names":["PluginState","Registry","constructor","init","Map","initialized","Error","getIfExists","id","initialize","byId","get","undefined","ext","register","sort","v","list","map","selectOptions","current","filter","select","options","currentOptions","ordered","excludeFromPicker","option","value","label","name","description","state","alpha","push","Object","values","ids","found","isEmpty","length","has","set","aliasIds","alias"],"sources":["/home/soula/grafana/packages/grafana-data/src/utils/Registry.ts"],"sourcesContent":["import { PluginState } from '../types';\nimport { SelectableValue } from '../types/select';\n\nexport interface RegistryItem {\n  id: string; // Unique Key -- saved in configs\n  name: string; // Display Name, can change without breaking configs\n  description?: string;\n  aliasIds?: string[]; // when the ID changes, we may want backwards compatibility ('current' => 'last')\n\n  /**\n   * Some extensions should not be user selectable\n   *  like: 'all' and 'any' matchers;\n   */\n  excludeFromPicker?: boolean;\n\n  /**\n   * Optional feature state\n   */\n  state?: PluginState;\n}\n\nexport interface RegistryItemWithOptions<TOptions = any> extends RegistryItem {\n  /**\n   * Convert the options to a string\n   */\n  getOptionsDisplayText?: (options: TOptions) => string;\n\n  /**\n   * Default options used if nothing else is specified\n   */\n  defaultOptions?: TOptions;\n}\n\ninterface RegistrySelectInfo {\n  options: Array<SelectableValue<string>>;\n  current: Array<SelectableValue<string>>;\n}\n\nexport class Registry<T extends RegistryItem> {\n  private ordered: T[] = [];\n  private byId = new Map<string, T>();\n  private initialized = false;\n\n  constructor(private init?: () => T[]) {}\n\n  setInit = (init: () => T[]) => {\n    if (this.initialized) {\n      throw new Error('Registry already initialized');\n    }\n    this.init = init;\n  };\n\n  getIfExists(id: string | undefined): T | undefined {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    if (id) {\n      return this.byId.get(id);\n    }\n\n    return undefined;\n  }\n\n  private initialize() {\n    if (this.init) {\n      for (const ext of this.init()) {\n        this.register(ext);\n      }\n    }\n    this.sort();\n    this.initialized = true;\n  }\n\n  get(id: string): T {\n    const v = this.getIfExists(id);\n    if (!v) {\n      throw new Error(`\"${id}\" not found in: ${this.list().map((v) => v.id)}`);\n    }\n    return v;\n  }\n\n  selectOptions(current?: string[], filter?: (ext: T) => boolean): RegistrySelectInfo {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    const select = {\n      options: [],\n      current: [],\n    } as RegistrySelectInfo;\n\n    const currentOptions: Record<string, SelectableValue<string>> = {};\n    if (current) {\n      for (const id of current) {\n        currentOptions[id] = {};\n      }\n    }\n\n    for (const ext of this.ordered) {\n      if (ext.excludeFromPicker) {\n        continue;\n      }\n      if (filter && !filter(ext)) {\n        continue;\n      }\n\n      const option = {\n        value: ext.id,\n        label: ext.name,\n        description: ext.description,\n      };\n\n      if (ext.state === PluginState.alpha) {\n        option.label += ' (alpha)';\n      }\n\n      select.options.push(option);\n      if (currentOptions[ext.id]) {\n        currentOptions[ext.id] = option;\n      }\n    }\n\n    if (current) {\n      // this makes sure we preserve the order of ids\n      select.current = Object.values(currentOptions);\n    }\n\n    return select;\n  }\n\n  /**\n   * Return a list of values by ID, or all values if not specified\n   */\n  list(ids?: any[]): T[] {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    if (ids) {\n      const found: T[] = [];\n      for (const id of ids) {\n        const v = this.getIfExists(id);\n        if (v) {\n          found.push(v);\n        }\n      }\n      return found;\n    }\n\n    return this.ordered;\n  }\n\n  isEmpty(): boolean {\n    if (!this.initialized) {\n      this.initialize();\n    }\n\n    return this.ordered.length === 0;\n  }\n\n  register(ext: T) {\n    if (this.byId.has(ext.id)) {\n      throw new Error('Duplicate Key:' + ext.id);\n    }\n\n    this.byId.set(ext.id, ext);\n    this.ordered.push(ext);\n\n    if (ext.aliasIds) {\n      for (const alias of ext.aliasIds) {\n        if (!this.byId.has(alias)) {\n          this.byId.set(alias, ext);\n        }\n      }\n    }\n\n    if (this.initialized) {\n      this.sort();\n    }\n  }\n\n  private sort() {\n    // TODO sort the list\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}