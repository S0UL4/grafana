{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport './transferHandlers';\nimport * as comlink from 'comlink';\nimport { asyncScheduler, observeOn } from 'rxjs';\nimport { createWorker } from './createCentrifugeServiceWorker';\nimport { promiseWithRemoteObservableAsObservable } from './remoteObservable';\nexport class CentrifugeServiceWorkerProxy {\n  constructor(deps) {\n    _defineProperty(this, \"centrifugeWorker\", void 0);\n\n    _defineProperty(this, \"getConnectionState\", () => {\n      return promiseWithRemoteObservableAsObservable(this.centrifugeWorker.getConnectionState());\n    });\n\n    _defineProperty(this, \"getDataStream\", options => {\n      return promiseWithRemoteObservableAsObservable(this.centrifugeWorker.getDataStream(options)).pipe( // async scheduler splits the synchronous task of deserializing data from web worker and\n      // consuming the message (ie. updating react component) into two to avoid blocking the event loop\n      observeOn(asyncScheduler));\n    });\n\n    _defineProperty(this, \"getQueryData\", async options => {\n      const optionsAsPlainSerializableObject = JSON.parse(JSON.stringify(options));\n      return this.centrifugeWorker.getQueryData(optionsAsPlainSerializableObject);\n    });\n\n    _defineProperty(this, \"getPresence\", address => {\n      return this.centrifugeWorker.getPresence(address);\n    });\n\n    _defineProperty(this, \"getStream\", address => {\n      return promiseWithRemoteObservableAsObservable(this.centrifugeWorker.getStream(address));\n    });\n\n    this.centrifugeWorker = comlink.wrap(createWorker());\n    this.centrifugeWorker.initialize(deps, comlink.proxy(deps.dataStreamSubscriberReadiness));\n  }\n\n}","map":{"version":3,"names":["comlink","asyncScheduler","observeOn","createWorker","promiseWithRemoteObservableAsObservable","CentrifugeServiceWorkerProxy","constructor","deps","centrifugeWorker","getConnectionState","options","getDataStream","pipe","optionsAsPlainSerializableObject","JSON","parse","stringify","getQueryData","address","getPresence","getStream","wrap","initialize","proxy","dataStreamSubscriberReadiness"],"sources":["/home/soula/grafana/public/app/features/live/centrifuge/serviceWorkerProxy.ts"],"sourcesContent":["import './transferHandlers';\n\nimport * as comlink from 'comlink';\nimport { asyncScheduler, Observable, observeOn } from 'rxjs';\n\nimport { LiveChannelAddress, LiveChannelEvent } from '@grafana/data';\n\nimport { createWorker } from './createCentrifugeServiceWorker';\nimport { promiseWithRemoteObservableAsObservable } from './remoteObservable';\nimport { CentrifugeSrv, CentrifugeSrvDeps } from './service';\nimport { RemoteCentrifugeService } from './service.worker';\n\nexport class CentrifugeServiceWorkerProxy implements CentrifugeSrv {\n  private centrifugeWorker;\n\n  constructor(deps: CentrifugeSrvDeps) {\n    this.centrifugeWorker = comlink.wrap<RemoteCentrifugeService>(createWorker() as comlink.Endpoint);\n    this.centrifugeWorker.initialize(deps, comlink.proxy(deps.dataStreamSubscriberReadiness));\n  }\n\n  getConnectionState: CentrifugeSrv['getConnectionState'] = () => {\n    return promiseWithRemoteObservableAsObservable(this.centrifugeWorker.getConnectionState());\n  };\n\n  getDataStream: CentrifugeSrv['getDataStream'] = (options) => {\n    return promiseWithRemoteObservableAsObservable(this.centrifugeWorker.getDataStream(options)).pipe(\n      // async scheduler splits the synchronous task of deserializing data from web worker and\n      // consuming the message (ie. updating react component) into two to avoid blocking the event loop\n      observeOn(asyncScheduler)\n    );\n  };\n\n  /**\n   * Query over websocket\n   */\n  getQueryData: CentrifugeSrv['getQueryData'] = async (options) => {\n    const optionsAsPlainSerializableObject = JSON.parse(JSON.stringify(options));\n    return this.centrifugeWorker.getQueryData(optionsAsPlainSerializableObject);\n  };\n\n  getPresence: CentrifugeSrv['getPresence'] = (address) => {\n    return this.centrifugeWorker.getPresence(address);\n  };\n\n  getStream: CentrifugeSrv['getStream'] = <T>(address: LiveChannelAddress) => {\n    return promiseWithRemoteObservableAsObservable(\n      this.centrifugeWorker.getStream(address) as Promise<comlink.Remote<Observable<LiveChannelEvent<T>>>>\n    );\n  };\n}\n"],"mappings":";;AAAA,OAAO,oBAAP;AAEA,OAAO,KAAKA,OAAZ,MAAyB,SAAzB;AACA,SAASC,cAAT,EAAqCC,SAArC,QAAsD,MAAtD;AAIA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,uCAAT,QAAwD,oBAAxD;AAIA,OAAO,MAAMC,4BAAN,CAA4D;EAGjEC,WAAW,CAACC,IAAD,EAA0B;IAAA;;IAAA,4CAKqB,MAAM;MAC9D,OAAOH,uCAAuC,CAAC,KAAKI,gBAAL,CAAsBC,kBAAtB,EAAD,CAA9C;IACD,CAPoC;;IAAA,uCASYC,OAAD,IAAa;MAC3D,OAAON,uCAAuC,CAAC,KAAKI,gBAAL,CAAsBG,aAAtB,CAAoCD,OAApC,CAAD,CAAvC,CAAsFE,IAAtF,EACL;MACA;MACAV,SAAS,CAACD,cAAD,CAHJ,CAAP;IAKD,CAfoC;;IAAA,sCAoBS,MAAOS,OAAP,IAAmB;MAC/D,MAAMG,gCAAgC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,OAAf,CAAX,CAAzC;MACA,OAAO,KAAKF,gBAAL,CAAsBS,YAAtB,CAAmCJ,gCAAnC,CAAP;IACD,CAvBoC;;IAAA,qCAyBQK,OAAD,IAAa;MACvD,OAAO,KAAKV,gBAAL,CAAsBW,WAAtB,CAAkCD,OAAlC,CAAP;IACD,CA3BoC;;IAAA,mCA6BOA,OAAJ,IAAoC;MAC1E,OAAOd,uCAAuC,CAC5C,KAAKI,gBAAL,CAAsBY,SAAtB,CAAgCF,OAAhC,CAD4C,CAA9C;IAGD,CAjCoC;;IACnC,KAAKV,gBAAL,GAAwBR,OAAO,CAACqB,IAAR,CAAsClB,YAAY,EAAlD,CAAxB;IACA,KAAKK,gBAAL,CAAsBc,UAAtB,CAAiCf,IAAjC,EAAuCP,OAAO,CAACuB,KAAR,CAAchB,IAAI,CAACiB,6BAAnB,CAAvC;EACD;;AANgE"},"metadata":{},"sourceType":"module"}