{"ast":null,"code":"export default function messageFromError(error) {\n  var _error$data, _error$data$error, _error$error, _error$error$data, _error$error$data$err, _error$error$data$err2, _error$error$data$err3, _error$error2, _error$error2$data, _error$error2$data$er, _error$error2$data$er2, _error$error3, _error$error3$data, _error$error3$data$er, _error$error4, _error$error4$data, _error$data2;\n\n  if (!error || typeof error !== 'object') {\n    return undefined;\n  }\n\n  if (typeof error.message === 'string') {\n    return error.message;\n  }\n\n  if (typeof ((_error$data = error.data) === null || _error$data === void 0 ? void 0 : (_error$data$error = _error$data.error) === null || _error$data$error === void 0 ? void 0 : _error$data$error.message) === 'string') {\n    return error.data.error.message;\n  } // Copied from the old Angular code - this might be checking for errors in places\n  // that the new code just doesnt use.\n  // As new error objects are discovered they should be added to the above code, rather\n  // than below\n\n\n  const maybeAMessage = ((_error$error = error.error) === null || _error$error === void 0 ? void 0 : (_error$error$data = _error$error.data) === null || _error$error$data === void 0 ? void 0 : (_error$error$data$err = _error$error$data.error) === null || _error$error$data$err === void 0 ? void 0 : (_error$error$data$err2 = _error$error$data$err.innererror) === null || _error$error$data$err2 === void 0 ? void 0 : (_error$error$data$err3 = _error$error$data$err2.innererror) === null || _error$error$data$err3 === void 0 ? void 0 : _error$error$data$err3.message) || ((_error$error2 = error.error) === null || _error$error2 === void 0 ? void 0 : (_error$error2$data = _error$error2.data) === null || _error$error2$data === void 0 ? void 0 : (_error$error2$data$er = _error$error2$data.error) === null || _error$error2$data$er === void 0 ? void 0 : (_error$error2$data$er2 = _error$error2$data$er.innererror) === null || _error$error2$data$er2 === void 0 ? void 0 : _error$error2$data$er2.message) || ((_error$error3 = error.error) === null || _error$error3 === void 0 ? void 0 : (_error$error3$data = _error$error3.data) === null || _error$error3$data === void 0 ? void 0 : (_error$error3$data$er = _error$error3$data.error) === null || _error$error3$data$er === void 0 ? void 0 : _error$error3$data$er.message) || ((_error$error4 = error.error) === null || _error$error4 === void 0 ? void 0 : (_error$error4$data = _error$error4.data) === null || _error$error4$data === void 0 ? void 0 : _error$error4$data.message) || ((_error$data2 = error.data) === null || _error$data2 === void 0 ? void 0 : _error$data2.message) || error;\n\n  if (typeof maybeAMessage === 'string') {\n    return maybeAMessage;\n  } else if (maybeAMessage && maybeAMessage.toString) {\n    return maybeAMessage.toString();\n  }\n\n  return undefined;\n}","map":{"version":3,"names":["messageFromError","error","undefined","message","data","maybeAMessage","innererror","toString"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/utils/messageFromError.ts"],"sourcesContent":["export default function messageFromError(error: any): string | undefined {\n  if (!error || typeof error !== 'object') {\n    return undefined;\n  }\n\n  if (typeof error.message === 'string') {\n    return error.message;\n  }\n\n  if (typeof error.data?.error?.message === 'string') {\n    return error.data.error.message;\n  }\n\n  // Copied from the old Angular code - this might be checking for errors in places\n  // that the new code just doesnt use.\n  // As new error objects are discovered they should be added to the above code, rather\n  // than below\n  const maybeAMessage =\n    error.error?.data?.error?.innererror?.innererror?.message ||\n    error.error?.data?.error?.innererror?.message ||\n    error.error?.data?.error?.message ||\n    error.error?.data?.message ||\n    error.data?.message ||\n    error;\n\n  if (typeof maybeAMessage === 'string') {\n    return maybeAMessage;\n  } else if (maybeAMessage && maybeAMessage.toString) {\n    return maybeAMessage.toString();\n  }\n\n  return undefined;\n}\n"],"mappings":"AAAA,eAAe,SAASA,gBAAT,CAA0BC,KAA1B,EAA0D;EAAA;;EACvE,IAAI,CAACA,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;IACvC,OAAOC,SAAP;EACD;;EAED,IAAI,OAAOD,KAAK,CAACE,OAAb,KAAyB,QAA7B,EAAuC;IACrC,OAAOF,KAAK,CAACE,OAAb;EACD;;EAED,IAAI,uBAAOF,KAAK,CAACG,IAAb,qEAAO,YAAYH,KAAnB,sDAAO,kBAAmBE,OAA1B,MAAsC,QAA1C,EAAoD;IAClD,OAAOF,KAAK,CAACG,IAAN,CAAWH,KAAX,CAAiBE,OAAxB;EACD,CAXsE,CAavE;EACA;EACA;EACA;;;EACA,MAAME,aAAa,GACjB,iBAAAJ,KAAK,CAACA,KAAN,mFAAaG,IAAb,iGAAmBH,KAAnB,0GAA0BK,UAA1B,4GAAsCA,UAAtC,kFAAkDH,OAAlD,uBACAF,KAAK,CAACA,KADN,wEACA,cAAaG,IADb,gFACA,mBAAmBH,KADnB,oFACA,sBAA0BK,UAD1B,2DACA,uBAAsCH,OADtC,uBAEAF,KAAK,CAACA,KAFN,wEAEA,cAAaG,IAFb,gFAEA,mBAAmBH,KAFnB,0DAEA,sBAA0BE,OAF1B,uBAGAF,KAAK,CAACA,KAHN,wEAGA,cAAaG,IAHb,uDAGA,mBAAmBD,OAHnB,sBAIAF,KAAK,CAACG,IAJN,iDAIA,aAAYD,OAJZ,KAKAF,KANF;;EAQA,IAAI,OAAOI,aAAP,KAAyB,QAA7B,EAAuC;IACrC,OAAOA,aAAP;EACD,CAFD,MAEO,IAAIA,aAAa,IAAIA,aAAa,CAACE,QAAnC,EAA6C;IAClD,OAAOF,aAAa,CAACE,QAAd,EAAP;EACD;;EAED,OAAOL,SAAP;AACD"},"metadata":{},"sourceType":"module"}