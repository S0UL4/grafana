{"ast":null,"code":"import { getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification, createSuccessNotification } from 'app/core/copy/appNotification';\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\nexport function getAlertRulesAsync(options) {\n  return async dispatch => {\n    dispatch(loadAlertRules());\n    const rules = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\nexport function togglePauseAlertRule(id, options) {\n  return async dispatch => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({\n      state: stateFilter.toString()\n    }));\n  };\n}\nexport function createNotificationChannel(data) {\n  return async dispatch => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification created')));\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\nexport function updateNotificationChannel(data) {\n  return async dispatch => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification updated')));\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\nexport function testNotificationChannel(data) {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', Object.assign({\n      id: channel.id\n    }, data));\n  };\n}\nexport function loadNotificationTypes() {\n  return async dispatch => {\n    const alertNotifiers = await getBackendSrv().get(`/api/alert-notifiers`);\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n\n      return -1;\n    });\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\nexport function loadNotificationChannel(id) {\n  return async dispatch => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}","map":{"version":3,"names":["getBackendSrv","isFetchError","locationService","notifyApp","createErrorNotification","createSuccessNotification","loadAlertRules","loadedAlertRules","notificationChannelLoaded","setNotificationChannels","getAlertRulesAsync","options","dispatch","rules","get","togglePauseAlertRule","id","post","stateFilter","getSearchObject","state","toString","createNotificationChannel","data","push","error","updateNotificationChannel","put","testNotificationChannel","getState","channel","notificationChannel","loadNotificationTypes","alertNotifiers","notificationTypes","sort","o1","o2","name","loadNotificationChannel"],"sources":["/home/soula/grafana/public/app/features/alerting/state/actions.ts"],"sourcesContent":["import { getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification, createSuccessNotification } from 'app/core/copy/appNotification';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<Promise<void>> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification created')));\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification updated')));\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}