{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { config } from '@grafana/runtime';\nimport { CustomScrollbar } from '@grafana/ui';\nimport { useUnifiedAlertingSelector } from 'app/features/alerting/unified/hooks/useUnifiedAlertingSelector';\nimport { fetchAlertGroupsAction } from 'app/features/alerting/unified/state/actions';\nimport { parseMatchers } from 'app/features/alerting/unified/utils/alertmanager';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from 'app/features/alerting/unified/utils/constants';\nimport { initialAsyncRequestState } from 'app/features/alerting/unified/utils/redux';\nimport { AlertGroup } from './AlertGroup';\nimport { useFilteredGroups } from './useFilteredGroups';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const AlertGroupsPanel = props => {\n  var _alertGroups;\n\n  const dispatch = useDispatch();\n  const isAlertingEnabled = config.unifiedAlertingEnabled;\n  const expandAll = props.options.expandAll;\n  const alertManagerSourceName = props.options.alertmanager;\n  const alertGroups = useUnifiedAlertingSelector(state => state.amAlertGroups) || initialAsyncRequestState;\n  const results = ((_alertGroups = alertGroups[alertManagerSourceName || '']) === null || _alertGroups === void 0 ? void 0 : _alertGroups.result) || [];\n  const matchers = props.options.labels ? parseMatchers(props.options.labels) : [];\n  const filteredResults = useFilteredGroups(results, matchers);\n  useEffect(() => {\n    function fetchNotifications() {\n      if (alertManagerSourceName) {\n        dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n      }\n    }\n\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, alertManagerSourceName]);\n  const hasResults = filteredResults.length > 0;\n  return /*#__PURE__*/_jsx(CustomScrollbar, {\n    autoHeightMax: \"100%\",\n    autoHeightMin: \"100%\",\n    children: isAlertingEnabled && /*#__PURE__*/_jsxs(\"div\", {\n      children: [hasResults && filteredResults.map(group => {\n        return /*#__PURE__*/_jsx(AlertGroup, {\n          alertManagerSourceName: alertManagerSourceName,\n          group: group,\n          expandAll: expandAll\n        }, JSON.stringify(group.labels));\n      }), !hasResults && 'No alerts']\n    })\n  });\n};","map":{"version":3,"names":["React","useEffect","useDispatch","config","CustomScrollbar","useUnifiedAlertingSelector","fetchAlertGroupsAction","parseMatchers","NOTIFICATIONS_POLL_INTERVAL_MS","initialAsyncRequestState","AlertGroup","useFilteredGroups","AlertGroupsPanel","props","dispatch","isAlertingEnabled","unifiedAlertingEnabled","expandAll","options","alertManagerSourceName","alertmanager","alertGroups","state","amAlertGroups","results","result","matchers","labels","filteredResults","fetchNotifications","interval","setInterval","clearInterval","hasResults","length","map","group","JSON","stringify"],"sources":["/home/soula/grafana/public/app/plugins/panel/alertGroups/AlertGroupsPanel.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { PanelProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { CustomScrollbar } from '@grafana/ui';\nimport { useUnifiedAlertingSelector } from 'app/features/alerting/unified/hooks/useUnifiedAlertingSelector';\nimport { fetchAlertGroupsAction } from 'app/features/alerting/unified/state/actions';\nimport { parseMatchers } from 'app/features/alerting/unified/utils/alertmanager';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from 'app/features/alerting/unified/utils/constants';\nimport { initialAsyncRequestState } from 'app/features/alerting/unified/utils/redux';\nimport { AlertmanagerGroup, Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertGroup } from './AlertGroup';\nimport { AlertGroupPanelOptions } from './types';\nimport { useFilteredGroups } from './useFilteredGroups';\n\nexport const AlertGroupsPanel = (props: PanelProps<AlertGroupPanelOptions>) => {\n  const dispatch = useDispatch();\n  const isAlertingEnabled = config.unifiedAlertingEnabled;\n\n  const expandAll = props.options.expandAll;\n  const alertManagerSourceName = props.options.alertmanager;\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups) || initialAsyncRequestState;\n  const results: AlertmanagerGroup[] = alertGroups[alertManagerSourceName || '']?.result || [];\n  const matchers: Matcher[] = props.options.labels ? parseMatchers(props.options.labels) : [];\n\n  const filteredResults = useFilteredGroups(results, matchers);\n\n  useEffect(() => {\n    function fetchNotifications() {\n      if (alertManagerSourceName) {\n        dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n      }\n    }\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, alertManagerSourceName]);\n\n  const hasResults = filteredResults.length > 0;\n\n  return (\n    <CustomScrollbar autoHeightMax=\"100%\" autoHeightMin=\"100%\">\n      {isAlertingEnabled && (\n        <div>\n          {hasResults &&\n            filteredResults.map((group) => {\n              return (\n                <AlertGroup\n                  alertManagerSourceName={alertManagerSourceName}\n                  key={JSON.stringify(group.labels)}\n                  group={group}\n                  expandAll={expandAll}\n                />\n              );\n            })}\n          {!hasResults && 'No alerts'}\n        </div>\n      )}\n    </CustomScrollbar>\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAGA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA,SAASC,0BAAT,QAA2C,gEAA3C;AACA,SAASC,sBAAT,QAAuC,6CAAvC;AACA,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,8BAAT,QAA+C,+CAA/C;AACA,SAASC,wBAAT,QAAyC,2CAAzC;AAGA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SAASC,iBAAT,QAAkC,qBAAlC;;;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAA+C;EAAA;;EAC7E,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;EACA,MAAMa,iBAAiB,GAAGZ,MAAM,CAACa,sBAAjC;EAEA,MAAMC,SAAS,GAAGJ,KAAK,CAACK,OAAN,CAAcD,SAAhC;EACA,MAAME,sBAAsB,GAAGN,KAAK,CAACK,OAAN,CAAcE,YAA7C;EAEA,MAAMC,WAAW,GAAGhB,0BAA0B,CAAEiB,KAAD,IAAWA,KAAK,CAACC,aAAlB,CAA1B,IAA8Dd,wBAAlF;EACA,MAAMe,OAA4B,GAAG,iBAAAH,WAAW,CAACF,sBAAsB,IAAI,EAA3B,CAAX,8DAA2CM,MAA3C,KAAqD,EAA1F;EACA,MAAMC,QAAmB,GAAGb,KAAK,CAACK,OAAN,CAAcS,MAAd,GAAuBpB,aAAa,CAACM,KAAK,CAACK,OAAN,CAAcS,MAAf,CAApC,GAA6D,EAAzF;EAEA,MAAMC,eAAe,GAAGjB,iBAAiB,CAACa,OAAD,EAAUE,QAAV,CAAzC;EAEAzB,SAAS,CAAC,MAAM;IACd,SAAS4B,kBAAT,GAA8B;MAC5B,IAAIV,sBAAJ,EAA4B;QAC1BL,QAAQ,CAACR,sBAAsB,CAACa,sBAAD,CAAvB,CAAR;MACD;IACF;;IACDU,kBAAkB;IAClB,MAAMC,QAAQ,GAAGC,WAAW,CAACF,kBAAD,EAAqBrB,8BAArB,CAA5B;IACA,OAAO,MAAM;MACXwB,aAAa,CAACF,QAAD,CAAb;IACD,CAFD;EAGD,CAXQ,EAWN,CAAChB,QAAD,EAAWK,sBAAX,CAXM,CAAT;EAaA,MAAMc,UAAU,GAAGL,eAAe,CAACM,MAAhB,GAAyB,CAA5C;EAEA,oBACE,KAAC,eAAD;IAAiB,aAAa,EAAC,MAA/B;IAAsC,aAAa,EAAC,MAApD;IAAA,UACGnB,iBAAiB,iBAChB;MAAA,WACGkB,UAAU,IACTL,eAAe,CAACO,GAAhB,CAAqBC,KAAD,IAAW;QAC7B,oBACE,KAAC,UAAD;UACE,sBAAsB,EAAEjB,sBAD1B;UAGE,KAAK,EAAEiB,KAHT;UAIE,SAAS,EAAEnB;QAJb,GAEOoB,IAAI,CAACC,SAAL,CAAeF,KAAK,CAACT,MAArB,CAFP,CADF;MAQD,CATD,CAFJ,EAYG,CAACM,UAAD,IAAe,WAZlB;IAAA;EAFJ,EADF;AAoBD,CAhDM"},"metadata":{},"sourceType":"module"}