{"ast":null,"code":"import { createSelector } from '@reduxjs/toolkit';\nimport { RequestStatus } from '../types';\nimport { pluginsAdapter } from './reducer';\nexport const selectRoot = state => state.plugins;\nexport const selectItems = createSelector(selectRoot, ({\n  items\n}) => items);\nexport const selectDisplayMode = createSelector(selectRoot, ({\n  settings\n}) => settings.displayMode);\nexport const {\n  selectAll,\n  selectById\n} = pluginsAdapter.getSelectors(selectItems);\n\nconst selectInstalled = filterBy => createSelector(selectAll, plugins => plugins.filter(plugin => filterBy === 'installed' ? plugin.isInstalled : !plugin.isCore));\n\nconst findByInstallAndType = (filterBy, filterByType) => createSelector(selectInstalled(filterBy), plugins => plugins.filter(plugin => filterByType === 'all' || plugin.type === filterByType));\n\nconst findByKeyword = searchBy => createSelector(selectAll, plugins => {\n  if (searchBy === '') {\n    return [];\n  }\n\n  return plugins.filter(plugin => {\n    const fields = [];\n\n    if (plugin.name) {\n      fields.push(plugin.name.toLowerCase());\n    }\n\n    if (plugin.orgName) {\n      fields.push(plugin.orgName.toLowerCase());\n    }\n\n    return fields.some(f => f.includes(searchBy.toLowerCase()));\n  });\n});\n\nexport const find = (searchBy, filterBy, filterByType) => createSelector(findByInstallAndType(filterBy, filterByType), findByKeyword(searchBy), (filteredPlugins, searchedPlugins) => {\n  return searchBy === '' ? filteredPlugins : searchedPlugins;\n});\nexport const selectPluginErrors = createSelector(selectAll, plugins => plugins ? plugins.filter(p => Boolean(p.error)).map(p => ({\n  pluginId: p.id,\n  errorCode: p.error\n})) : []); // The following selectors are used to get information about the outstanding or completed plugins-related network requests.\n\nexport const selectRequest = actionType => createSelector(selectRoot, ({\n  requests = {}\n}) => requests[actionType]);\nexport const selectIsRequestPending = actionType => createSelector(selectRequest(actionType), request => (request === null || request === void 0 ? void 0 : request.status) === RequestStatus.Pending);\nexport const selectRequestError = actionType => createSelector(selectRequest(actionType), request => (request === null || request === void 0 ? void 0 : request.status) === RequestStatus.Rejected ? request === null || request === void 0 ? void 0 : request.error : null);\nexport const selectIsRequestNotFetched = actionType => createSelector(selectRequest(actionType), request => request === undefined);","map":{"version":3,"names":["createSelector","RequestStatus","pluginsAdapter","selectRoot","state","plugins","selectItems","items","selectDisplayMode","settings","displayMode","selectAll","selectById","getSelectors","selectInstalled","filterBy","filter","plugin","isInstalled","isCore","findByInstallAndType","filterByType","type","findByKeyword","searchBy","fields","name","push","toLowerCase","orgName","some","f","includes","find","filteredPlugins","searchedPlugins","selectPluginErrors","p","Boolean","error","map","pluginId","id","errorCode","selectRequest","actionType","requests","selectIsRequestPending","request","status","Pending","selectRequestError","Rejected","selectIsRequestNotFetched","undefined"],"sources":["/home/soula/grafana/public/app/features/plugins/admin/state/selectors.ts"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginErrorCode } from '@grafana/data';\n\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const selectDisplayMode = createSelector(selectRoot, ({ settings }) => settings.displayMode);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nconst selectInstalled = (filterBy: string) =>\n  createSelector(selectAll, (plugins) =>\n    plugins.filter((plugin) => (filterBy === 'installed' ? plugin.isInstalled : !plugin.isCore))\n  );\n\nconst findByInstallAndType = (filterBy: string, filterByType: string) =>\n  createSelector(selectInstalled(filterBy), (plugins) =>\n    plugins.filter((plugin) => filterByType === 'all' || plugin.type === filterByType)\n  );\n\nconst findByKeyword = (searchBy: string) =>\n  createSelector(selectAll, (plugins) => {\n    if (searchBy === '') {\n      return [];\n    }\n\n    return plugins.filter((plugin) => {\n      const fields: String[] = [];\n      if (plugin.name) {\n        fields.push(plugin.name.toLowerCase());\n      }\n\n      if (plugin.orgName) {\n        fields.push(plugin.orgName.toLowerCase());\n      }\n\n      return fields.some((f) => f.includes(searchBy.toLowerCase()));\n    });\n  });\n\nexport const find = (searchBy: string, filterBy: string, filterByType: string) =>\n  createSelector(\n    findByInstallAndType(filterBy, filterByType),\n    findByKeyword(searchBy),\n    (filteredPlugins, searchedPlugins) => {\n      return searchBy === '' ? filteredPlugins : searchedPlugins;\n    }\n  );\n\nexport const selectPluginErrors = createSelector(selectAll, (plugins) =>\n  plugins\n    ? plugins\n        .filter((p) => Boolean(p.error))\n        .map(\n          (p): PluginError => ({\n            pluginId: p.id,\n            errorCode: p!.error as PluginErrorCode,\n          })\n        )\n    : []\n);\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}