{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { css } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport memoizeOne from 'memoize-one';\nimport * as React from 'react';\nimport { createRef } from 'react';\nimport { stylesFactory, withTheme2, ToolbarButton } from '@grafana/ui';\nimport { PEER_SERVICE } from '../constants/tag-keys';\nimport { getColorByKey } from '../utils/color-generator';\nimport ListView from './ListView';\nimport SpanBarRow from './SpanBarRow';\nimport SpanDetailRow from './SpanDetailRow';\nimport { createViewedBoundsFunc, findServerChildSpan, isErrorSpan, isKindClient, spanContainsErredSpan } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst getStyles = stylesFactory(props => {\n  const {\n    topOfViewRefType\n  } = props;\n  const position = topOfViewRefType === TopOfViewRefType.Explore ? 'fixed' : 'absolute';\n  return {\n    rowsWrapper: css`\n      width: 100%;\n    `,\n    row: css`\n      width: 100%;\n    `,\n    scrollToTopButton: css`\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      width: 40px;\n      height: 40px;\n      position: ${position};\n      bottom: 30px;\n      right: 30px;\n      z-index: 1;\n    `\n  };\n});\nexport let TopOfViewRefType;\n\n(function (TopOfViewRefType) {\n  TopOfViewRefType[\"Explore\"] = \"Explore\";\n  TopOfViewRefType[\"Panel\"] = \"Panel\";\n})(TopOfViewRefType || (TopOfViewRefType = {}));\n\n// export for tests\nexport const DEFAULT_HEIGHTS = {\n  bar: 28,\n  detail: 161,\n  detailWithLogs: 197\n};\nconst NUM_TICKS = 5;\n\nfunction generateRowStates(spans, childrenHiddenIDs, detailStates) {\n  if (!spans) {\n    return [];\n  }\n\n  let collapseDepth = null;\n  const rowStates = [];\n\n  for (let i = 0; i < spans.length; i++) {\n    const span = spans[i];\n    const {\n      spanID,\n      depth\n    } = span;\n    let hidden = false;\n\n    if (collapseDepth != null) {\n      if (depth >= collapseDepth) {\n        hidden = true;\n      } else {\n        collapseDepth = null;\n      }\n    }\n\n    if (hidden) {\n      continue;\n    }\n\n    if (childrenHiddenIDs.has(spanID)) {\n      collapseDepth = depth + 1;\n    }\n\n    rowStates.push({\n      span,\n      isDetail: false,\n      spanIndex: i\n    });\n\n    if (detailStates.has(spanID)) {\n      rowStates.push({\n        span,\n        isDetail: true,\n        spanIndex: i\n      });\n    }\n  }\n\n  return rowStates;\n}\n\nfunction getClipping(currentViewRange) {\n  const [zoomStart, zoomEnd] = currentViewRange;\n  return {\n    left: zoomStart > 0,\n    right: zoomEnd < 1\n  };\n}\n\nfunction generateRowStatesFromTrace(trace, childrenHiddenIDs, detailStates) {\n  return trace ? generateRowStates(trace.spans, childrenHiddenIDs, detailStates) : [];\n}\n\nconst memoizedGenerateRowStates = memoizeOne(generateRowStatesFromTrace);\nconst memoizedViewBoundsFunc = memoizeOne(createViewedBoundsFunc, isEqual);\nconst memoizedGetClipping = memoizeOne(getClipping, isEqual); // export from tests\n\nexport class UnthemedVirtualizedTraceView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"listView\", void 0);\n\n    _defineProperty(this, \"topTraceViewRef\", /*#__PURE__*/createRef());\n\n    _defineProperty(this, \"getViewRange\", () => this.props.currentViewRangeTime);\n\n    _defineProperty(this, \"getSearchedSpanIDs\", () => this.props.findMatchesIDs);\n\n    _defineProperty(this, \"getCollapsedChildren\", () => this.props.childrenHiddenIDs);\n\n    _defineProperty(this, \"mapRowIndexToSpanIndex\", index => this.getRowStates()[index].spanIndex);\n\n    _defineProperty(this, \"mapSpanIndexToRowIndex\", index => {\n      const max = this.getRowStates().length;\n\n      for (let i = 0; i < max; i++) {\n        const {\n          spanIndex\n        } = this.getRowStates()[i];\n\n        if (spanIndex === index) {\n          return i;\n        }\n      }\n\n      throw new Error(`unable to find row for span index: ${index}`);\n    });\n\n    _defineProperty(this, \"setListView\", listView => {\n      const isChanged = this.listView !== listView;\n      this.listView = listView;\n\n      if (listView && isChanged) {\n        this.props.registerAccessors(this.getAccessors());\n      }\n    });\n\n    _defineProperty(this, \"getKeyFromIndex\", index => {\n      const {\n        isDetail,\n        span\n      } = this.getRowStates()[index];\n      return `${span.traceID}--${span.spanID}--${isDetail ? 'detail' : 'bar'}`;\n    });\n\n    _defineProperty(this, \"getIndexFromKey\", key => {\n      const parts = key.split('--');\n      const _traceID = parts[0];\n      const _spanID = parts[1];\n\n      const _isDetail = parts[2] === 'detail';\n\n      const max = this.getRowStates().length;\n\n      for (let i = 0; i < max; i++) {\n        const {\n          span,\n          isDetail\n        } = this.getRowStates()[i];\n\n        if (span.spanID === _spanID && span.traceID === _traceID && isDetail === _isDetail) {\n          return i;\n        }\n      }\n\n      return -1;\n    });\n\n    _defineProperty(this, \"getRowHeight\", index => {\n      const {\n        span,\n        isDetail\n      } = this.getRowStates()[index];\n\n      if (!isDetail) {\n        return DEFAULT_HEIGHTS.bar;\n      }\n\n      if (Array.isArray(span.logs) && span.logs.length) {\n        return DEFAULT_HEIGHTS.detailWithLogs;\n      }\n\n      return DEFAULT_HEIGHTS.detail;\n    });\n\n    _defineProperty(this, \"renderRow\", (key, style, index, attrs) => {\n      const {\n        isDetail,\n        span,\n        spanIndex\n      } = this.getRowStates()[index];\n      return isDetail ? this.renderSpanDetailRow(span, key, style, attrs) : this.renderSpanBarRow(span, spanIndex, key, style, attrs);\n    });\n\n    _defineProperty(this, \"scrollToSpan\", spanID => {\n      if (spanID == null) {\n        return;\n      }\n\n      const i = this.getRowStates().findIndex(row => row.span.spanID === spanID);\n\n      if (i >= 0) {\n        var _this$listView;\n\n        (_this$listView = this.listView) === null || _this$listView === void 0 ? void 0 : _this$listView.scrollToIndex(i);\n      }\n    });\n\n    _defineProperty(this, \"scrollToTop\", () => {\n      var _topOfViewRef$current;\n\n      const {\n        topOfViewRef\n      } = this.props;\n      topOfViewRef === null || topOfViewRef === void 0 ? void 0 : (_topOfViewRef$current = topOfViewRef.current) === null || _topOfViewRef$current === void 0 ? void 0 : _topOfViewRef$current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    });\n\n    const {\n      setTrace,\n      trace,\n      uiFind\n    } = props;\n    setTrace(trace, uiFind);\n  }\n\n  componentDidMount() {\n    this.scrollToSpan(this.props.focusedSpanId);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    // If any prop updates, VirtualizedTraceViewImpl should update.\n    const nextPropKeys = Object.keys(nextProps);\n\n    for (let i = 0; i < nextPropKeys.length; i += 1) {\n      if (nextProps[nextPropKeys[i]] !== this.props[nextPropKeys[i]]) {\n        // Unless the only change was props.shouldScrollToFirstUiFindMatch changing to false.\n        if (nextPropKeys[i] === 'shouldScrollToFirstUiFindMatch') {\n          if (nextProps[nextPropKeys[i]]) {\n            return true;\n          }\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      registerAccessors,\n      trace\n    } = prevProps;\n    const {\n      shouldScrollToFirstUiFindMatch,\n      clearShouldScrollToFirstUiFindMatch,\n      scrollToFirstVisibleSpan,\n      registerAccessors: nextRegisterAccessors,\n      setTrace,\n      trace: nextTrace,\n      uiFind,\n      focusedSpanId,\n      focusedSpanIdForSearch\n    } = this.props;\n\n    if (trace !== nextTrace) {\n      setTrace(nextTrace, uiFind);\n    }\n\n    if (this.listView && registerAccessors !== nextRegisterAccessors) {\n      nextRegisterAccessors(this.getAccessors());\n    }\n\n    if (shouldScrollToFirstUiFindMatch) {\n      scrollToFirstVisibleSpan();\n      clearShouldScrollToFirstUiFindMatch();\n    }\n\n    if (focusedSpanId !== prevProps.focusedSpanId) {\n      this.scrollToSpan(focusedSpanId);\n    }\n\n    if (focusedSpanIdForSearch !== prevProps.focusedSpanIdForSearch) {\n      this.scrollToSpan(focusedSpanIdForSearch);\n    }\n  }\n\n  getRowStates() {\n    const {\n      childrenHiddenIDs,\n      detailStates,\n      trace\n    } = this.props;\n    return memoizedGenerateRowStates(trace, childrenHiddenIDs, detailStates);\n  }\n\n  getClipping() {\n    const {\n      currentViewRangeTime\n    } = this.props;\n    return memoizedGetClipping(currentViewRangeTime);\n  }\n\n  getViewedBounds() {\n    const {\n      currentViewRangeTime,\n      trace\n    } = this.props;\n    const [zoomStart, zoomEnd] = currentViewRangeTime;\n    return memoizedViewBoundsFunc({\n      min: trace.startTime,\n      max: trace.endTime,\n      viewStart: zoomStart,\n      viewEnd: zoomEnd\n    });\n  }\n\n  getAccessors() {\n    const lv = this.listView;\n\n    if (!lv) {\n      throw new Error('ListView unavailable');\n    }\n\n    return {\n      getViewRange: this.getViewRange,\n      getSearchedSpanIDs: this.getSearchedSpanIDs,\n      getCollapsedChildren: this.getCollapsedChildren,\n      getViewHeight: lv.getViewHeight,\n      getBottomRowIndexVisible: lv.getBottomVisibleIndex,\n      getTopRowIndexVisible: lv.getTopVisibleIndex,\n      getRowPosition: lv.getRowPosition,\n      mapRowIndexToSpanIndex: this.mapRowIndexToSpanIndex,\n      mapSpanIndexToRowIndex: this.mapSpanIndexToRowIndex\n    };\n  }\n\n  renderSpanBarRow(span, spanIndex, key, style, attrs) {\n    const {\n      spanID\n    } = span;\n    const {\n      serviceName\n    } = span.process;\n    const {\n      childrenHiddenIDs,\n      childrenToggle,\n      detailStates,\n      detailToggle,\n      findMatchesIDs,\n      spanNameColumnWidth,\n      trace,\n      hoverIndentGuideIds,\n      addHoverIndentGuideId,\n      removeHoverIndentGuideId,\n      theme,\n      createSpanLink,\n      focusedSpanId,\n      focusedSpanIdForSearch\n    } = this.props; // to avert flow error\n\n    if (!trace) {\n      return null;\n    }\n\n    const color = getColorByKey(serviceName, theme);\n    const isCollapsed = childrenHiddenIDs.has(spanID);\n    const isDetailExpanded = detailStates.has(spanID);\n    const isMatchingFilter = findMatchesIDs ? findMatchesIDs.has(spanID) : false;\n    const isFocused = spanID === focusedSpanId || spanID === focusedSpanIdForSearch;\n    const showErrorIcon = isErrorSpan(span) || isCollapsed && spanContainsErredSpan(trace.spans, spanIndex); // Check for direct child \"server\" span if the span is a \"client\" span.\n\n    let rpc = null;\n\n    if (isCollapsed) {\n      const rpcSpan = findServerChildSpan(trace.spans.slice(spanIndex));\n\n      if (rpcSpan) {\n        const rpcViewBounds = this.getViewedBounds()(rpcSpan.startTime, rpcSpan.startTime + rpcSpan.duration);\n        rpc = {\n          color: getColorByKey(rpcSpan.process.serviceName, theme),\n          operationName: rpcSpan.operationName,\n          serviceName: rpcSpan.process.serviceName,\n          viewEnd: rpcViewBounds.end,\n          viewStart: rpcViewBounds.start\n        };\n      }\n    }\n\n    const peerServiceKV = span.tags.find(kv => kv.key === PEER_SERVICE); // Leaf, kind == client and has peer.service.tag, is likely a client span that does a request\n    // to an uninstrumented/external service\n\n    let noInstrumentedServer = null;\n\n    if (!span.hasChildren && peerServiceKV && isKindClient(span)) {\n      noInstrumentedServer = {\n        serviceName: peerServiceKV.value,\n        color: getColorByKey(peerServiceKV.value, theme)\n      };\n    }\n\n    const styles = getStyles(this.props);\n    return /*#__PURE__*/_jsx(\"div\", Object.assign({\n      className: styles.row,\n      style: style\n    }, attrs, {\n      children: /*#__PURE__*/_jsx(SpanBarRow, {\n        clippingLeft: this.getClipping().left,\n        clippingRight: this.getClipping().right,\n        color: color,\n        columnDivision: spanNameColumnWidth,\n        isChildrenExpanded: !isCollapsed,\n        isDetailExpanded: isDetailExpanded,\n        isMatchingFilter: isMatchingFilter,\n        isFocused: isFocused,\n        numTicks: NUM_TICKS,\n        onDetailToggled: detailToggle,\n        onChildrenToggled: childrenToggle,\n        rpc: rpc,\n        noInstrumentedServer: noInstrumentedServer,\n        showErrorIcon: showErrorIcon,\n        getViewedBounds: this.getViewedBounds(),\n        traceStartTime: trace.startTime,\n        span: span,\n        hoverIndentGuideIds: hoverIndentGuideIds,\n        addHoverIndentGuideId: addHoverIndentGuideId,\n        removeHoverIndentGuideId: removeHoverIndentGuideId,\n        createSpanLink: createSpanLink\n      })\n    }), key);\n  }\n\n  renderSpanDetailRow(span, key, style, attrs) {\n    const {\n      spanID\n    } = span;\n    const {\n      serviceName\n    } = span.process;\n    const {\n      detailLogItemToggle,\n      detailLogsToggle,\n      detailProcessToggle,\n      detailReferencesToggle,\n      detailReferenceItemToggle,\n      detailWarningsToggle,\n      detailStackTracesToggle,\n      detailStates,\n      detailTagsToggle,\n      detailToggle,\n      spanNameColumnWidth,\n      trace,\n      timeZone,\n      hoverIndentGuideIds,\n      addHoverIndentGuideId,\n      removeHoverIndentGuideId,\n      linksGetter,\n      theme,\n      createSpanLink,\n      focusedSpanId,\n      createFocusSpanLink,\n      topOfViewRefType\n    } = this.props;\n    const detailState = detailStates.get(spanID);\n\n    if (!trace || !detailState) {\n      return null;\n    }\n\n    const color = getColorByKey(serviceName, theme);\n    const styles = getStyles(this.props);\n    return /*#__PURE__*/_jsx(\"div\", Object.assign({\n      className: styles.row,\n      style: Object.assign({}, style, {\n        zIndex: 1\n      })\n    }, attrs, {\n      children: /*#__PURE__*/_jsx(SpanDetailRow, {\n        color: color,\n        columnDivision: spanNameColumnWidth,\n        onDetailToggled: detailToggle,\n        detailState: detailState,\n        linksGetter: linksGetter,\n        logItemToggle: detailLogItemToggle,\n        logsToggle: detailLogsToggle,\n        processToggle: detailProcessToggle,\n        referenceItemToggle: detailReferenceItemToggle,\n        referencesToggle: detailReferencesToggle,\n        warningsToggle: detailWarningsToggle,\n        stackTracesToggle: detailStackTracesToggle,\n        span: span,\n        timeZone: timeZone,\n        tagsToggle: detailTagsToggle,\n        traceStartTime: trace.startTime,\n        hoverIndentGuideIds: hoverIndentGuideIds,\n        addHoverIndentGuideId: addHoverIndentGuideId,\n        removeHoverIndentGuideId: removeHoverIndentGuideId,\n        createSpanLink: createSpanLink,\n        focusedSpanId: focusedSpanId,\n        createFocusSpanLink: createFocusSpanLink,\n        topOfViewRefType: topOfViewRefType\n      })\n    }), key);\n  }\n\n  render() {\n    const styles = getStyles(this.props);\n    const {\n      scrollElement\n    } = this.props;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(ListView, {\n        ref: this.setListView,\n        dataLength: this.getRowStates().length,\n        itemHeightGetter: this.getRowHeight,\n        itemRenderer: this.renderRow,\n        viewBuffer: 50,\n        viewBufferMin: 50,\n        itemsWrapperClassName: styles.rowsWrapper,\n        getKeyFromIndex: this.getKeyFromIndex,\n        getIndexFromKey: this.getIndexFromKey,\n        windowScroller: false,\n        scrollElement: scrollElement\n      }), /*#__PURE__*/_jsx(ToolbarButton, {\n        className: styles.scrollToTopButton,\n        onClick: this.scrollToTop,\n        title: \"Scroll to top\",\n        icon: \"arrow-up\"\n      })]\n    });\n  }\n\n}\nexport default withTheme2(UnthemedVirtualizedTraceView);","map":{"version":3,"names":["css","isEqual","memoizeOne","React","createRef","stylesFactory","withTheme2","ToolbarButton","PEER_SERVICE","getColorByKey","ListView","SpanBarRow","SpanDetailRow","createViewedBoundsFunc","findServerChildSpan","isErrorSpan","isKindClient","spanContainsErredSpan","getStyles","props","topOfViewRefType","position","TopOfViewRefType","Explore","rowsWrapper","row","scrollToTopButton","DEFAULT_HEIGHTS","bar","detail","detailWithLogs","NUM_TICKS","generateRowStates","spans","childrenHiddenIDs","detailStates","collapseDepth","rowStates","i","length","span","spanID","depth","hidden","has","push","isDetail","spanIndex","getClipping","currentViewRange","zoomStart","zoomEnd","left","right","generateRowStatesFromTrace","trace","memoizedGenerateRowStates","memoizedViewBoundsFunc","memoizedGetClipping","UnthemedVirtualizedTraceView","Component","constructor","currentViewRangeTime","findMatchesIDs","index","getRowStates","max","Error","listView","isChanged","registerAccessors","getAccessors","traceID","key","parts","split","_traceID","_spanID","_isDetail","Array","isArray","logs","style","attrs","renderSpanDetailRow","renderSpanBarRow","findIndex","scrollToIndex","topOfViewRef","current","scrollIntoView","behavior","setTrace","uiFind","componentDidMount","scrollToSpan","focusedSpanId","shouldComponentUpdate","nextProps","nextPropKeys","Object","keys","componentDidUpdate","prevProps","shouldScrollToFirstUiFindMatch","clearShouldScrollToFirstUiFindMatch","scrollToFirstVisibleSpan","nextRegisterAccessors","nextTrace","focusedSpanIdForSearch","getViewedBounds","min","startTime","endTime","viewStart","viewEnd","lv","getViewRange","getSearchedSpanIDs","getCollapsedChildren","getViewHeight","getBottomRowIndexVisible","getBottomVisibleIndex","getTopRowIndexVisible","getTopVisibleIndex","getRowPosition","mapRowIndexToSpanIndex","mapSpanIndexToRowIndex","serviceName","process","childrenToggle","detailToggle","spanNameColumnWidth","hoverIndentGuideIds","addHoverIndentGuideId","removeHoverIndentGuideId","theme","createSpanLink","color","isCollapsed","isDetailExpanded","isMatchingFilter","isFocused","showErrorIcon","rpc","rpcSpan","slice","rpcViewBounds","duration","operationName","end","start","peerServiceKV","tags","find","kv","noInstrumentedServer","hasChildren","value","styles","detailLogItemToggle","detailLogsToggle","detailProcessToggle","detailReferencesToggle","detailReferenceItemToggle","detailWarningsToggle","detailStackTracesToggle","detailTagsToggle","timeZone","linksGetter","createFocusSpanLink","detailState","get","zIndex","render","scrollElement","setListView","getRowHeight","renderRow","getKeyFromIndex","getIndexFromKey","scrollToTop"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/TraceTimelineViewer/VirtualizedTraceView.tsx"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { css } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport memoizeOne from 'memoize-one';\nimport * as React from 'react';\nimport { createRef, RefObject } from 'react';\n\nimport { GrafanaTheme2, LinkModel, TimeZone } from '@grafana/data';\nimport { stylesFactory, withTheme2, ToolbarButton } from '@grafana/ui';\n\nimport { Accessors } from '../ScrollManager';\nimport { PEER_SERVICE } from '../constants/tag-keys';\nimport { SpanLinkFunc, TNil } from '../types';\nimport TTraceTimeline from '../types/TTraceTimeline';\nimport { TraceLog, TraceSpan, Trace, TraceKeyValuePair, TraceLink, TraceSpanReference } from '../types/trace';\nimport { getColorByKey } from '../utils/color-generator';\n\nimport ListView from './ListView';\nimport SpanBarRow from './SpanBarRow';\nimport DetailState from './SpanDetail/DetailState';\nimport SpanDetailRow from './SpanDetailRow';\nimport {\n  createViewedBoundsFunc,\n  findServerChildSpan,\n  isErrorSpan,\n  isKindClient,\n  spanContainsErredSpan,\n  ViewedBoundsFunctionType,\n} from './utils';\n\ntype TExtractUiFindFromStateReturn = {\n  uiFind: string | undefined;\n};\n\nconst getStyles = stylesFactory((props: TVirtualizedTraceViewOwnProps) => {\n  const { topOfViewRefType } = props;\n  const position = topOfViewRefType === TopOfViewRefType.Explore ? 'fixed' : 'absolute';\n\n  return {\n    rowsWrapper: css`\n      width: 100%;\n    `,\n    row: css`\n      width: 100%;\n    `,\n    scrollToTopButton: css`\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      width: 40px;\n      height: 40px;\n      position: ${position};\n      bottom: 30px;\n      right: 30px;\n      z-index: 1;\n    `,\n  };\n});\n\ntype RowState = {\n  isDetail: boolean;\n  span: TraceSpan;\n  spanIndex: number;\n};\n\nexport enum TopOfViewRefType {\n  Explore = 'Explore',\n  Panel = 'Panel',\n}\n\ntype TVirtualizedTraceViewOwnProps = {\n  currentViewRangeTime: [number, number];\n  timeZone: TimeZone;\n  findMatchesIDs: Set<string> | TNil;\n  scrollToFirstVisibleSpan: () => void;\n  registerAccessors: (accesors: Accessors) => void;\n  trace: Trace;\n  linksGetter: (span: TraceSpan, items: TraceKeyValuePair[], itemIndex: number) => TraceLink[];\n  childrenToggle: (spanID: string) => void;\n  clearShouldScrollToFirstUiFindMatch: () => void;\n  detailLogItemToggle: (spanID: string, log: TraceLog) => void;\n  detailLogsToggle: (spanID: string) => void;\n  detailWarningsToggle: (spanID: string) => void;\n  detailStackTracesToggle: (spanID: string) => void;\n  detailReferencesToggle: (spanID: string) => void;\n  detailReferenceItemToggle: (spanID: string, reference: TraceSpanReference) => void;\n  detailProcessToggle: (spanID: string) => void;\n  detailTagsToggle: (spanID: string) => void;\n  detailToggle: (spanID: string) => void;\n  setSpanNameColumnWidth: (width: number) => void;\n  setTrace: (trace: Trace | TNil, uiFind: string | TNil) => void;\n  hoverIndentGuideIds: Set<string>;\n  addHoverIndentGuideId: (spanID: string) => void;\n  removeHoverIndentGuideId: (spanID: string) => void;\n  theme: GrafanaTheme2;\n  createSpanLink?: SpanLinkFunc;\n  scrollElement?: Element;\n  focusedSpanId?: string;\n  focusedSpanIdForSearch: string;\n  createFocusSpanLink: (traceId: string, spanId: string) => LinkModel;\n  topOfViewRef?: RefObject<HTMLDivElement>;\n  topOfViewRefType?: TopOfViewRefType;\n};\n\ntype VirtualizedTraceViewProps = TVirtualizedTraceViewOwnProps & TExtractUiFindFromStateReturn & TTraceTimeline;\n\n// export for tests\nexport const DEFAULT_HEIGHTS = {\n  bar: 28,\n  detail: 161,\n  detailWithLogs: 197,\n};\n\nconst NUM_TICKS = 5;\n\nfunction generateRowStates(\n  spans: TraceSpan[] | TNil,\n  childrenHiddenIDs: Set<string>,\n  detailStates: Map<string, DetailState | TNil>\n): RowState[] {\n  if (!spans) {\n    return [];\n  }\n  let collapseDepth = null;\n  const rowStates = [];\n  for (let i = 0; i < spans.length; i++) {\n    const span = spans[i];\n    const { spanID, depth } = span;\n    let hidden = false;\n    if (collapseDepth != null) {\n      if (depth >= collapseDepth) {\n        hidden = true;\n      } else {\n        collapseDepth = null;\n      }\n    }\n    if (hidden) {\n      continue;\n    }\n    if (childrenHiddenIDs.has(spanID)) {\n      collapseDepth = depth + 1;\n    }\n    rowStates.push({\n      span,\n      isDetail: false,\n      spanIndex: i,\n    });\n    if (detailStates.has(spanID)) {\n      rowStates.push({\n        span,\n        isDetail: true,\n        spanIndex: i,\n      });\n    }\n  }\n  return rowStates;\n}\n\nfunction getClipping(currentViewRange: [number, number]) {\n  const [zoomStart, zoomEnd] = currentViewRange;\n  return {\n    left: zoomStart > 0,\n    right: zoomEnd < 1,\n  };\n}\n\nfunction generateRowStatesFromTrace(\n  trace: Trace | TNil,\n  childrenHiddenIDs: Set<string>,\n  detailStates: Map<string, DetailState | TNil>\n): RowState[] {\n  return trace ? generateRowStates(trace.spans, childrenHiddenIDs, detailStates) : [];\n}\n\nconst memoizedGenerateRowStates = memoizeOne(generateRowStatesFromTrace);\nconst memoizedViewBoundsFunc = memoizeOne(createViewedBoundsFunc, isEqual);\nconst memoizedGetClipping = memoizeOne(getClipping, isEqual);\n\n// export from tests\nexport class UnthemedVirtualizedTraceView extends React.Component<VirtualizedTraceViewProps> {\n  listView: ListView | TNil;\n  topTraceViewRef = createRef<HTMLDivElement>();\n\n  constructor(props: VirtualizedTraceViewProps) {\n    super(props);\n    const { setTrace, trace, uiFind } = props;\n    setTrace(trace, uiFind);\n  }\n\n  componentDidMount() {\n    this.scrollToSpan(this.props.focusedSpanId);\n  }\n\n  shouldComponentUpdate(nextProps: VirtualizedTraceViewProps) {\n    // If any prop updates, VirtualizedTraceViewImpl should update.\n    const nextPropKeys = Object.keys(nextProps) as Array<keyof VirtualizedTraceViewProps>;\n    for (let i = 0; i < nextPropKeys.length; i += 1) {\n      if (nextProps[nextPropKeys[i]] !== this.props[nextPropKeys[i]]) {\n        // Unless the only change was props.shouldScrollToFirstUiFindMatch changing to false.\n        if (nextPropKeys[i] === 'shouldScrollToFirstUiFindMatch') {\n          if (nextProps[nextPropKeys[i]]) {\n            return true;\n          }\n        } else {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  componentDidUpdate(prevProps: Readonly<VirtualizedTraceViewProps>) {\n    const { registerAccessors, trace } = prevProps;\n    const {\n      shouldScrollToFirstUiFindMatch,\n      clearShouldScrollToFirstUiFindMatch,\n      scrollToFirstVisibleSpan,\n      registerAccessors: nextRegisterAccessors,\n      setTrace,\n      trace: nextTrace,\n      uiFind,\n      focusedSpanId,\n      focusedSpanIdForSearch,\n    } = this.props;\n\n    if (trace !== nextTrace) {\n      setTrace(nextTrace, uiFind);\n    }\n\n    if (this.listView && registerAccessors !== nextRegisterAccessors) {\n      nextRegisterAccessors(this.getAccessors());\n    }\n\n    if (shouldScrollToFirstUiFindMatch) {\n      scrollToFirstVisibleSpan();\n      clearShouldScrollToFirstUiFindMatch();\n    }\n\n    if (focusedSpanId !== prevProps.focusedSpanId) {\n      this.scrollToSpan(focusedSpanId);\n    }\n\n    if (focusedSpanIdForSearch !== prevProps.focusedSpanIdForSearch) {\n      this.scrollToSpan(focusedSpanIdForSearch);\n    }\n  }\n\n  getRowStates(): RowState[] {\n    const { childrenHiddenIDs, detailStates, trace } = this.props;\n    return memoizedGenerateRowStates(trace, childrenHiddenIDs, detailStates);\n  }\n\n  getClipping(): { left: boolean; right: boolean } {\n    const { currentViewRangeTime } = this.props;\n    return memoizedGetClipping(currentViewRangeTime);\n  }\n\n  getViewedBounds(): ViewedBoundsFunctionType {\n    const { currentViewRangeTime, trace } = this.props;\n    const [zoomStart, zoomEnd] = currentViewRangeTime;\n\n    return memoizedViewBoundsFunc({\n      min: trace.startTime,\n      max: trace.endTime,\n      viewStart: zoomStart,\n      viewEnd: zoomEnd,\n    });\n  }\n\n  getAccessors() {\n    const lv = this.listView;\n    if (!lv) {\n      throw new Error('ListView unavailable');\n    }\n    return {\n      getViewRange: this.getViewRange,\n      getSearchedSpanIDs: this.getSearchedSpanIDs,\n      getCollapsedChildren: this.getCollapsedChildren,\n      getViewHeight: lv.getViewHeight,\n      getBottomRowIndexVisible: lv.getBottomVisibleIndex,\n      getTopRowIndexVisible: lv.getTopVisibleIndex,\n      getRowPosition: lv.getRowPosition,\n      mapRowIndexToSpanIndex: this.mapRowIndexToSpanIndex,\n      mapSpanIndexToRowIndex: this.mapSpanIndexToRowIndex,\n    };\n  }\n\n  getViewRange = () => this.props.currentViewRangeTime;\n\n  getSearchedSpanIDs = () => this.props.findMatchesIDs;\n\n  getCollapsedChildren = () => this.props.childrenHiddenIDs;\n\n  mapRowIndexToSpanIndex = (index: number) => this.getRowStates()[index].spanIndex;\n\n  mapSpanIndexToRowIndex = (index: number) => {\n    const max = this.getRowStates().length;\n    for (let i = 0; i < max; i++) {\n      const { spanIndex } = this.getRowStates()[i];\n      if (spanIndex === index) {\n        return i;\n      }\n    }\n    throw new Error(`unable to find row for span index: ${index}`);\n  };\n\n  setListView = (listView: ListView | TNil) => {\n    const isChanged = this.listView !== listView;\n    this.listView = listView;\n    if (listView && isChanged) {\n      this.props.registerAccessors(this.getAccessors());\n    }\n  };\n\n  // use long form syntax to avert flow error\n  // https://github.com/facebook/flow/issues/3076#issuecomment-290944051\n  getKeyFromIndex = (index: number) => {\n    const { isDetail, span } = this.getRowStates()[index];\n    return `${span.traceID}--${span.spanID}--${isDetail ? 'detail' : 'bar'}`;\n  };\n\n  getIndexFromKey = (key: string) => {\n    const parts = key.split('--');\n    const _traceID = parts[0];\n    const _spanID = parts[1];\n    const _isDetail = parts[2] === 'detail';\n    const max = this.getRowStates().length;\n    for (let i = 0; i < max; i++) {\n      const { span, isDetail } = this.getRowStates()[i];\n      if (span.spanID === _spanID && span.traceID === _traceID && isDetail === _isDetail) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  getRowHeight = (index: number) => {\n    const { span, isDetail } = this.getRowStates()[index];\n    if (!isDetail) {\n      return DEFAULT_HEIGHTS.bar;\n    }\n    if (Array.isArray(span.logs) && span.logs.length) {\n      return DEFAULT_HEIGHTS.detailWithLogs;\n    }\n    return DEFAULT_HEIGHTS.detail;\n  };\n\n  renderRow = (key: string, style: React.CSSProperties, index: number, attrs: {}) => {\n    const { isDetail, span, spanIndex } = this.getRowStates()[index];\n    return isDetail\n      ? this.renderSpanDetailRow(span, key, style, attrs)\n      : this.renderSpanBarRow(span, spanIndex, key, style, attrs);\n  };\n\n  scrollToSpan = (spanID?: string) => {\n    if (spanID == null) {\n      return;\n    }\n    const i = this.getRowStates().findIndex((row) => row.span.spanID === spanID);\n    if (i >= 0) {\n      this.listView?.scrollToIndex(i);\n    }\n  };\n\n  renderSpanBarRow(span: TraceSpan, spanIndex: number, key: string, style: React.CSSProperties, attrs: {}) {\n    const { spanID } = span;\n    const { serviceName } = span.process;\n    const {\n      childrenHiddenIDs,\n      childrenToggle,\n      detailStates,\n      detailToggle,\n      findMatchesIDs,\n      spanNameColumnWidth,\n      trace,\n      hoverIndentGuideIds,\n      addHoverIndentGuideId,\n      removeHoverIndentGuideId,\n      theme,\n      createSpanLink,\n      focusedSpanId,\n      focusedSpanIdForSearch,\n    } = this.props;\n    // to avert flow error\n    if (!trace) {\n      return null;\n    }\n    const color = getColorByKey(serviceName, theme);\n    const isCollapsed = childrenHiddenIDs.has(spanID);\n    const isDetailExpanded = detailStates.has(spanID);\n    const isMatchingFilter = findMatchesIDs ? findMatchesIDs.has(spanID) : false;\n    const isFocused = spanID === focusedSpanId || spanID === focusedSpanIdForSearch;\n    const showErrorIcon = isErrorSpan(span) || (isCollapsed && spanContainsErredSpan(trace.spans, spanIndex));\n\n    // Check for direct child \"server\" span if the span is a \"client\" span.\n    let rpc = null;\n    if (isCollapsed) {\n      const rpcSpan = findServerChildSpan(trace.spans.slice(spanIndex));\n      if (rpcSpan) {\n        const rpcViewBounds = this.getViewedBounds()(rpcSpan.startTime, rpcSpan.startTime + rpcSpan.duration);\n        rpc = {\n          color: getColorByKey(rpcSpan.process.serviceName, theme),\n          operationName: rpcSpan.operationName,\n          serviceName: rpcSpan.process.serviceName,\n          viewEnd: rpcViewBounds.end,\n          viewStart: rpcViewBounds.start,\n        };\n      }\n    }\n\n    const peerServiceKV = span.tags.find((kv) => kv.key === PEER_SERVICE);\n    // Leaf, kind == client and has peer.service.tag, is likely a client span that does a request\n    // to an uninstrumented/external service\n    let noInstrumentedServer = null;\n    if (!span.hasChildren && peerServiceKV && isKindClient(span)) {\n      noInstrumentedServer = {\n        serviceName: peerServiceKV.value,\n        color: getColorByKey(peerServiceKV.value, theme),\n      };\n    }\n\n    const styles = getStyles(this.props);\n    return (\n      <div className={styles.row} key={key} style={style} {...attrs}>\n        <SpanBarRow\n          clippingLeft={this.getClipping().left}\n          clippingRight={this.getClipping().right}\n          color={color}\n          columnDivision={spanNameColumnWidth}\n          isChildrenExpanded={!isCollapsed}\n          isDetailExpanded={isDetailExpanded}\n          isMatchingFilter={isMatchingFilter}\n          isFocused={isFocused}\n          numTicks={NUM_TICKS}\n          onDetailToggled={detailToggle}\n          onChildrenToggled={childrenToggle}\n          rpc={rpc}\n          noInstrumentedServer={noInstrumentedServer}\n          showErrorIcon={showErrorIcon}\n          getViewedBounds={this.getViewedBounds()}\n          traceStartTime={trace.startTime}\n          span={span}\n          hoverIndentGuideIds={hoverIndentGuideIds}\n          addHoverIndentGuideId={addHoverIndentGuideId}\n          removeHoverIndentGuideId={removeHoverIndentGuideId}\n          createSpanLink={createSpanLink}\n        />\n      </div>\n    );\n  }\n\n  renderSpanDetailRow(span: TraceSpan, key: string, style: React.CSSProperties, attrs: {}) {\n    const { spanID } = span;\n    const { serviceName } = span.process;\n    const {\n      detailLogItemToggle,\n      detailLogsToggle,\n      detailProcessToggle,\n      detailReferencesToggle,\n      detailReferenceItemToggle,\n      detailWarningsToggle,\n      detailStackTracesToggle,\n      detailStates,\n      detailTagsToggle,\n      detailToggle,\n      spanNameColumnWidth,\n      trace,\n      timeZone,\n      hoverIndentGuideIds,\n      addHoverIndentGuideId,\n      removeHoverIndentGuideId,\n      linksGetter,\n      theme,\n      createSpanLink,\n      focusedSpanId,\n      createFocusSpanLink,\n      topOfViewRefType,\n    } = this.props;\n    const detailState = detailStates.get(spanID);\n    if (!trace || !detailState) {\n      return null;\n    }\n    const color = getColorByKey(serviceName, theme);\n    const styles = getStyles(this.props);\n    return (\n      <div className={styles.row} key={key} style={{ ...style, zIndex: 1 }} {...attrs}>\n        <SpanDetailRow\n          color={color}\n          columnDivision={spanNameColumnWidth}\n          onDetailToggled={detailToggle}\n          detailState={detailState}\n          linksGetter={linksGetter}\n          logItemToggle={detailLogItemToggle}\n          logsToggle={detailLogsToggle}\n          processToggle={detailProcessToggle}\n          referenceItemToggle={detailReferenceItemToggle}\n          referencesToggle={detailReferencesToggle}\n          warningsToggle={detailWarningsToggle}\n          stackTracesToggle={detailStackTracesToggle}\n          span={span}\n          timeZone={timeZone}\n          tagsToggle={detailTagsToggle}\n          traceStartTime={trace.startTime}\n          hoverIndentGuideIds={hoverIndentGuideIds}\n          addHoverIndentGuideId={addHoverIndentGuideId}\n          removeHoverIndentGuideId={removeHoverIndentGuideId}\n          createSpanLink={createSpanLink}\n          focusedSpanId={focusedSpanId}\n          createFocusSpanLink={createFocusSpanLink}\n          topOfViewRefType={topOfViewRefType}\n        />\n      </div>\n    );\n  }\n\n  scrollToTop = () => {\n    const { topOfViewRef } = this.props;\n    topOfViewRef?.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  render() {\n    const styles = getStyles(this.props);\n    const { scrollElement } = this.props;\n    return (\n      <>\n        <ListView\n          ref={this.setListView}\n          dataLength={this.getRowStates().length}\n          itemHeightGetter={this.getRowHeight}\n          itemRenderer={this.renderRow}\n          viewBuffer={50}\n          viewBufferMin={50}\n          itemsWrapperClassName={styles.rowsWrapper}\n          getKeyFromIndex={this.getKeyFromIndex}\n          getIndexFromKey={this.getIndexFromKey}\n          windowScroller={false}\n          scrollElement={scrollElement}\n        />\n        <ToolbarButton\n          className={styles.scrollToTopButton}\n          onClick={this.scrollToTop}\n          title=\"Scroll to top\"\n          icon=\"arrow-up\"\n        ></ToolbarButton>\n      </>\n    );\n  }\n}\n\nexport default withTheme2(UnthemedVirtualizedTraceView);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}