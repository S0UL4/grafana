{"ast":null,"code":"var _Spinner, _div, _h;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { useAsync } from 'react-use';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport { DiffGroup } from '../VersionHistory/DiffGroup';\nimport { DiffViewer } from '../VersionHistory/DiffViewer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const SaveDashboardDiff = ({\n  diff,\n  oldValue,\n  newValue\n}) => {\n  const styles = useStyles2(getStyles);\n  const loader = useAsync(async () => {\n    const oldJSON = JSON.stringify(oldValue !== null && oldValue !== void 0 ? oldValue : {}, null, 2);\n    const newJSON = JSON.stringify(newValue !== null && newValue !== void 0 ? newValue : {}, null, 2); // Schema changes will have MANY changes that the user will not understand\n\n    let schemaChange = undefined;\n    const diffs = [];\n    let count = 0;\n\n    if (diff) {\n      for (const [key, changes] of Object.entries(diff)) {\n        // this takes a long time for large diffs (so this is async)\n        const g = /*#__PURE__*/_jsx(DiffGroup, {\n          diffs: changes,\n          title: key\n        }, key);\n\n        if (key === 'schemaVersion') {\n          schemaChange = g;\n        } else {\n          diffs.push(g);\n        }\n\n        count += changes.length;\n      }\n    }\n\n    return {\n      schemaChange,\n      diffs,\n      count,\n      showDiffs: count < 15,\n      // overwhelming if too many changes\n      jsonView: /*#__PURE__*/_jsx(DiffViewer, {\n        oldValue: oldJSON,\n        newValue: newJSON\n      })\n    };\n  }, [diff, oldValue, newValue]);\n  const {\n    value\n  } = loader;\n\n  if (!value || !oldValue) {\n    return _Spinner || (_Spinner = /*#__PURE__*/_jsx(Spinner, {}));\n  }\n\n  if (value.count < 1) {\n    return _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n      children: \"No changes in this dashboard\"\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [value.schemaChange && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.spacer,\n      children: value.schemaChange\n    }), value.showDiffs && /*#__PURE__*/_jsx(\"div\", {\n      className: styles.spacer,\n      children: value.diffs\n    }), _h || (_h = /*#__PURE__*/_jsx(\"h4\", {\n      children: \"JSON Model\"\n    })), value.jsonView]\n  });\n};\n\nconst getStyles = theme => ({\n  spacer: css`\n    margin-bottom: ${theme.v1.spacing.xl};\n  `\n});","map":{"version":3,"names":["css","React","useAsync","Spinner","useStyles2","DiffGroup","DiffViewer","SaveDashboardDiff","diff","oldValue","newValue","styles","getStyles","loader","oldJSON","JSON","stringify","newJSON","schemaChange","undefined","diffs","count","key","changes","Object","entries","g","push","length","showDiffs","jsonView","value","spacer","theme","v1","spacing","xl"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/SaveDashboard/SaveDashboardDiff.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { ReactElement } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Spinner, useStyles2 } from '@grafana/ui';\n\nimport { DiffGroup } from '../VersionHistory/DiffGroup';\nimport { DiffViewer } from '../VersionHistory/DiffViewer';\nimport { Diffs } from '../VersionHistory/utils';\n\ninterface SaveDashboardDiffProps {\n  oldValue?: any;\n  newValue?: any;\n\n  // calculated by parent so we can see summary in tabs\n  diff?: Diffs;\n}\n\nexport const SaveDashboardDiff = ({ diff, oldValue, newValue }: SaveDashboardDiffProps) => {\n  const styles = useStyles2(getStyles);\n  const loader = useAsync(async () => {\n    const oldJSON = JSON.stringify(oldValue ?? {}, null, 2);\n    const newJSON = JSON.stringify(newValue ?? {}, null, 2);\n\n    // Schema changes will have MANY changes that the user will not understand\n    let schemaChange: ReactElement | undefined = undefined;\n    const diffs: ReactElement[] = [];\n    let count = 0;\n    if (diff) {\n      for (const [key, changes] of Object.entries(diff)) {\n        // this takes a long time for large diffs (so this is async)\n        const g = <DiffGroup diffs={changes} key={key} title={key} />;\n        if (key === 'schemaVersion') {\n          schemaChange = g;\n        } else {\n          diffs.push(g);\n        }\n        count += changes.length;\n      }\n    }\n    return {\n      schemaChange,\n      diffs,\n      count,\n      showDiffs: count < 15, // overwhelming if too many changes\n      jsonView: <DiffViewer oldValue={oldJSON} newValue={newJSON} />,\n    };\n  }, [diff, oldValue, newValue]);\n\n  const { value } = loader;\n  if (!value || !oldValue) {\n    return <Spinner />;\n  }\n\n  if (value.count < 1) {\n    return <div>No changes in this dashboard</div>;\n  }\n\n  return (\n    <div>\n      {value.schemaChange && <div className={styles.spacer}>{value.schemaChange}</div>}\n\n      {value.showDiffs && <div className={styles.spacer}>{value.diffs}</div>}\n\n      <h4>JSON Model</h4>\n      {value.jsonView}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  spacer: css`\n    margin-bottom: ${theme.v1.spacing.xl};\n  `,\n});\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,WAAzB;AAGA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,aAApC;AAEA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,UAAT,QAA2B,8BAA3B;;;AAWA,OAAO,MAAMC,iBAAiB,GAAG,CAAC;EAAEC,IAAF;EAAQC,QAAR;EAAkBC;AAAlB,CAAD,KAA0D;EACzF,MAAMC,MAAM,GAAGP,UAAU,CAACQ,SAAD,CAAzB;EACA,MAAMC,MAAM,GAAGX,QAAQ,CAAC,YAAY;IAClC,MAAMY,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAeP,QAAf,aAAeA,QAAf,cAAeA,QAAf,GAA2B,EAA3B,EAA+B,IAA/B,EAAqC,CAArC,CAAhB;IACA,MAAMQ,OAAO,GAAGF,IAAI,CAACC,SAAL,CAAeN,QAAf,aAAeA,QAAf,cAAeA,QAAf,GAA2B,EAA3B,EAA+B,IAA/B,EAAqC,CAArC,CAAhB,CAFkC,CAIlC;;IACA,IAAIQ,YAAsC,GAAGC,SAA7C;IACA,MAAMC,KAAqB,GAAG,EAA9B;IACA,IAAIC,KAAK,GAAG,CAAZ;;IACA,IAAIb,IAAJ,EAAU;MACR,KAAK,MAAM,CAACc,GAAD,EAAMC,OAAN,CAAX,IAA6BC,MAAM,CAACC,OAAP,CAAejB,IAAf,CAA7B,EAAmD;QACjD;QACA,MAAMkB,CAAC,gBAAG,KAAC,SAAD;UAAW,KAAK,EAAEH,OAAlB;UAAqC,KAAK,EAAED;QAA5C,GAAgCA,GAAhC,CAAV;;QACA,IAAIA,GAAG,KAAK,eAAZ,EAA6B;UAC3BJ,YAAY,GAAGQ,CAAf;QACD,CAFD,MAEO;UACLN,KAAK,CAACO,IAAN,CAAWD,CAAX;QACD;;QACDL,KAAK,IAAIE,OAAO,CAACK,MAAjB;MACD;IACF;;IACD,OAAO;MACLV,YADK;MAELE,KAFK;MAGLC,KAHK;MAILQ,SAAS,EAAER,KAAK,GAAG,EAJd;MAIkB;MACvBS,QAAQ,eAAE,KAAC,UAAD;QAAY,QAAQ,EAAEhB,OAAtB;QAA+B,QAAQ,EAAEG;MAAzC;IALL,CAAP;EAOD,CA3BsB,EA2BpB,CAACT,IAAD,EAAOC,QAAP,EAAiBC,QAAjB,CA3BoB,CAAvB;EA6BA,MAAM;IAAEqB;EAAF,IAAYlB,MAAlB;;EACA,IAAI,CAACkB,KAAD,IAAU,CAACtB,QAAf,EAAyB;IACvB,4CAAO,KAAC,OAAD,KAAP;EACD;;EAED,IAAIsB,KAAK,CAACV,KAAN,GAAc,CAAlB,EAAqB;IACnB,oCAAO;MAAA;IAAA,EAAP;EACD;;EAED,oBACE;IAAA,WACGU,KAAK,CAACb,YAAN,iBAAsB;MAAK,SAAS,EAAEP,MAAM,CAACqB,MAAvB;MAAA,UAAgCD,KAAK,CAACb;IAAtC,EADzB,EAGGa,KAAK,CAACF,SAAN,iBAAmB;MAAK,SAAS,EAAElB,MAAM,CAACqB,MAAvB;MAAA,UAAgCD,KAAK,CAACX;IAAtC,EAHtB,2BAKE;MAAA;IAAA,EALF,GAMGW,KAAK,CAACD,QANT;EAAA,EADF;AAUD,CAlDM;;AAoDP,MAAMlB,SAAS,GAAIqB,KAAD,KAA2B;EAC3CD,MAAM,EAAEhC,GAAI;AACd,qBAAqBiC,KAAK,CAACC,EAAN,CAASC,OAAT,CAAiBC,EAAG;AACzC;AAH6C,CAA3B,CAAlB"},"metadata":{},"sourceType":"module"}