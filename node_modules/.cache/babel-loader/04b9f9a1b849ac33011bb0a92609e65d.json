{"ast":null,"code":"var _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { EventBusSrv } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, getAngularLoader, getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, ConfirmModal, Container, CustomScrollbar, HorizontalGroup, Modal } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { AppNotificationSeverity } from 'app/types';\nimport { PanelNotSupported } from '../dashboard/components/PanelEditor/PanelNotSupported';\nimport StateHistory from './StateHistory';\nimport { TestRuleResult } from './TestRuleResult';\nimport { getAlertingValidationMessage } from './getAlertingValidationMessage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nclass UnConnectedAlertTab extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"element\", void 0);\n\n    _defineProperty(this, \"component\", void 0);\n\n    _defineProperty(this, \"panelCtrl\", void 0);\n\n    _defineProperty(this, \"state\", {\n      validationMessage: '',\n      showStateHistory: false,\n      showDeleteConfirmation: false,\n      showTestRule: false\n    });\n\n    _defineProperty(this, \"onAngularPanelUpdated\", () => {\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"onAddAlert\", () => {\n      var _this$panelCtrl, _this$component;\n\n      (_this$panelCtrl = this.panelCtrl) === null || _this$panelCtrl === void 0 ? void 0 : _this$panelCtrl._enableAlert();\n      (_this$component = this.component) === null || _this$component === void 0 ? void 0 : _this$component.digest();\n      this.forceUpdate();\n    });\n\n    _defineProperty(this, \"onToggleModal\", prop => {\n      const value = this.state[prop];\n      this.setState(Object.assign({}, this.state, {\n        [prop]: !value\n      }));\n    });\n\n    _defineProperty(this, \"renderTestRule\", () => {\n      if (!this.state.showTestRule) {\n        return null;\n      }\n\n      const {\n        panel,\n        dashboard\n      } = this.props;\n\n      const onDismiss = () => this.onToggleModal('showTestRule');\n\n      return /*#__PURE__*/_jsx(Modal, {\n        isOpen: true,\n        icon: \"bug\",\n        title: \"Testing rule\",\n        onDismiss: onDismiss,\n        onClickBackdrop: onDismiss,\n        children: /*#__PURE__*/_jsx(TestRuleResult, {\n          panel: panel,\n          dashboard: dashboard\n        })\n      });\n    });\n\n    _defineProperty(this, \"renderDeleteConfirmation\", () => {\n      if (!this.state.showDeleteConfirmation) {\n        return null;\n      }\n\n      const {\n        panel\n      } = this.props;\n\n      const onDismiss = () => this.onToggleModal('showDeleteConfirmation');\n\n      return /*#__PURE__*/_jsx(ConfirmModal, {\n        isOpen: true,\n        icon: \"trash-alt\",\n        title: \"Delete\",\n        body: _div || (_div = /*#__PURE__*/_jsxs(\"div\", {\n          children: [\"Are you sure you want to delete this alert rule?\", /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"small\", {\n            children: \"You need to save dashboard for the delete to take effect.\"\n          })]\n        })),\n        confirmText: \"Delete alert\",\n        onDismiss: onDismiss,\n        onConfirm: () => {\n          var _this$component2;\n\n          delete panel.alert;\n          panel.thresholds = [];\n\n          if (this.panelCtrl) {\n            this.panelCtrl.alertState = null;\n            this.panelCtrl.render();\n          }\n\n          (_this$component2 = this.component) === null || _this$component2 === void 0 ? void 0 : _this$component2.digest();\n          onDismiss();\n        }\n      });\n    });\n\n    _defineProperty(this, \"renderStateHistory\", () => {\n      if (!this.state.showStateHistory) {\n        return null;\n      }\n\n      const {\n        panel,\n        dashboard\n      } = this.props;\n\n      const onDismiss = () => this.onToggleModal('showStateHistory');\n\n      return /*#__PURE__*/_jsx(Modal, {\n        isOpen: true,\n        icon: \"history\",\n        title: \"State history\",\n        onDismiss: onDismiss,\n        onClickBackdrop: onDismiss,\n        children: /*#__PURE__*/_jsx(StateHistory, {\n          dashboard: dashboard,\n          panelId: panel.id,\n          onRefresh: () => {\n            var _this$panelCtrl2;\n\n            return (_this$panelCtrl2 = this.panelCtrl) === null || _this$panelCtrl2 === void 0 ? void 0 : _this$panelCtrl2.refresh();\n          }\n        })\n      });\n    });\n  }\n\n  async componentDidMount() {\n    if (config.angularSupportEnabled) {\n      await import(\n      /* webpackChunkName: \"AlertTabCtrl\" */\n      'app/features/alerting/AlertTabCtrl');\n      this.loadAlertTab();\n    } else {\n      // TODO probably need to migrate AlertTab to react\n      alert('Angular support disabled, legacy alerting cannot function without angular support');\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.loadAlertTab();\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  async loadAlertTab() {\n    const {\n      panel,\n      angularPanelComponent\n    } = this.props;\n\n    if (!this.element || this.component) {\n      return;\n    }\n\n    if (angularPanelComponent) {\n      const scope = angularPanelComponent.getScope(); // When full page reloading in edit mode the angular panel has on fully compiled & instantiated yet\n\n      if (!scope.$$childHead) {\n        setTimeout(() => {\n          this.forceUpdate();\n        });\n        return;\n      }\n\n      this.panelCtrl = scope.$$childHead.ctrl;\n    } else {\n      this.panelCtrl = this.getReactAlertPanelCtrl();\n    }\n\n    const loader = getAngularLoader();\n    const template = '<alert-tab />';\n    const scopeProps = {\n      ctrl: this.panelCtrl\n    };\n    this.component = loader.load(this.element, scopeProps, template);\n    const validationMessage = await getAlertingValidationMessage(panel.transformations, panel.targets, getDataSourceSrv(), panel.datasource);\n\n    if (validationMessage) {\n      this.setState({\n        validationMessage\n      });\n    }\n  }\n\n  getReactAlertPanelCtrl() {\n    return {\n      panel: this.props.panel,\n      events: new EventBusSrv(),\n      render: () => {\n        this.props.panel.render();\n      }\n    };\n  }\n\n  render() {\n    const {\n      alert,\n      transformations\n    } = this.props.panel;\n    const {\n      validationMessage\n    } = this.state;\n    const hasTransformations = transformations && transformations.length > 0;\n\n    if (!alert && validationMessage) {\n      return /*#__PURE__*/_jsx(PanelNotSupported, {\n        message: validationMessage\n      });\n    }\n\n    const model = {\n      title: 'Panel has no alert rule defined',\n      buttonIcon: 'bell',\n      onClick: this.onAddAlert,\n      buttonTitle: 'Create Alert'\n    };\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(CustomScrollbar, {\n        autoHeightMin: \"100%\",\n        children: /*#__PURE__*/_jsx(Container, {\n          padding: \"md\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            \"aria-label\": selectors.components.AlertTab.content,\n            children: [alert && hasTransformations && /*#__PURE__*/_jsx(Alert, {\n              severity: AppNotificationSeverity.Error,\n              title: \"Transformations are not supported in alert queries\"\n            }), /*#__PURE__*/_jsx(\"div\", {\n              ref: element => this.element = element\n            }), alert && /*#__PURE__*/_jsxs(HorizontalGroup, {\n              children: [/*#__PURE__*/_jsx(Button, {\n                onClick: () => this.onToggleModal('showStateHistory'),\n                variant: \"secondary\",\n                children: \"State history\"\n              }), /*#__PURE__*/_jsx(Button, {\n                onClick: () => this.onToggleModal('showTestRule'),\n                variant: \"secondary\",\n                children: \"Test rule\"\n              }), /*#__PURE__*/_jsx(Button, {\n                onClick: () => this.onToggleModal('showDeleteConfirmation'),\n                variant: \"destructive\",\n                children: \"Delete\"\n              })]\n            }), !alert && !validationMessage && /*#__PURE__*/_jsx(EmptyListCTA, Object.assign({}, model))]\n          })\n        })\n      }), this.renderTestRule(), this.renderDeleteConfirmation(), this.renderStateHistory()]\n    });\n  }\n\n}\n\nconst mapStateToProps = (state, props) => {\n  var _getPanelStateForMode;\n\n  return {\n    angularPanelComponent: (_getPanelStateForMode = getPanelStateForModel(state, props.panel)) === null || _getPanelStateForMode === void 0 ? void 0 : _getPanelStateForMode.angularComponent\n  };\n};\n\nconst mapDispatchToProps = {};\nexport const AlertTab = connect(mapStateToProps, mapDispatchToProps)(UnConnectedAlertTab);","map":{"version":3,"names":["React","PureComponent","connect","EventBusSrv","selectors","config","getAngularLoader","getDataSourceSrv","Alert","Button","ConfirmModal","Container","CustomScrollbar","HorizontalGroup","Modal","EmptyListCTA","getPanelStateForModel","AppNotificationSeverity","PanelNotSupported","StateHistory","TestRuleResult","getAlertingValidationMessage","UnConnectedAlertTab","validationMessage","showStateHistory","showDeleteConfirmation","showTestRule","forceUpdate","panelCtrl","_enableAlert","component","digest","prop","value","state","setState","panel","dashboard","props","onDismiss","onToggleModal","alert","thresholds","alertState","render","id","refresh","componentDidMount","angularSupportEnabled","loadAlertTab","componentDidUpdate","prevProps","componentWillUnmount","destroy","angularPanelComponent","element","scope","getScope","$$childHead","setTimeout","ctrl","getReactAlertPanelCtrl","loader","template","scopeProps","load","transformations","targets","datasource","events","hasTransformations","length","model","title","buttonIcon","onClick","onAddAlert","buttonTitle","components","AlertTab","content","Error","renderTestRule","renderDeleteConfirmation","renderStateHistory","mapStateToProps","angularComponent","mapDispatchToProps"],"sources":["/home/soula/grafana/public/app/features/alerting/AlertTab.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\n\nimport { EventBusSrv } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AngularComponent, config, getAngularLoader, getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, ConfirmModal, Container, CustomScrollbar, HorizontalGroup, IconName, Modal } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { AppNotificationSeverity, StoreState } from 'app/types';\n\nimport { AlertState } from '../../plugins/datasource/alertmanager/types';\nimport { PanelNotSupported } from '../dashboard/components/PanelEditor/PanelNotSupported';\nimport { DashboardModel } from '../dashboard/state/DashboardModel';\nimport { PanelModel } from '../dashboard/state/PanelModel';\n\nimport StateHistory from './StateHistory';\nimport { TestRuleResult } from './TestRuleResult';\nimport { getAlertingValidationMessage } from './getAlertingValidationMessage';\n\ninterface AngularPanelController {\n  _enableAlert: () => void;\n  alertState: AlertState | null;\n  render: () => void;\n  refresh: () => void;\n}\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\ninterface ConnectedProps {\n  angularPanelComponent?: AngularComponent | null;\n}\n\ninterface DispatchProps {}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\ninterface State {\n  validationMessage: string;\n  showStateHistory: boolean;\n  showDeleteConfirmation: boolean;\n  showTestRule: boolean;\n}\n\nclass UnConnectedAlertTab extends PureComponent<Props, State> {\n  element?: HTMLDivElement | null;\n  component?: AngularComponent;\n  panelCtrl?: AngularPanelController;\n\n  state: State = {\n    validationMessage: '',\n    showStateHistory: false,\n    showDeleteConfirmation: false,\n    showTestRule: false,\n  };\n\n  async componentDidMount() {\n    if (config.angularSupportEnabled) {\n      await import(/* webpackChunkName: \"AlertTabCtrl\" */ 'app/features/alerting/AlertTabCtrl');\n      this.loadAlertTab();\n    } else {\n      // TODO probably need to migrate AlertTab to react\n      alert('Angular support disabled, legacy alerting cannot function without angular support');\n    }\n  }\n\n  onAngularPanelUpdated = () => {\n    this.forceUpdate();\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    this.loadAlertTab();\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  async loadAlertTab() {\n    const { panel, angularPanelComponent } = this.props;\n\n    if (!this.element || this.component) {\n      return;\n    }\n\n    if (angularPanelComponent) {\n      const scope = angularPanelComponent.getScope();\n\n      // When full page reloading in edit mode the angular panel has on fully compiled & instantiated yet\n      if (!scope.$$childHead) {\n        setTimeout(() => {\n          this.forceUpdate();\n        });\n        return;\n      }\n\n      this.panelCtrl = scope.$$childHead.ctrl;\n    } else {\n      this.panelCtrl = this.getReactAlertPanelCtrl();\n    }\n\n    const loader = getAngularLoader();\n    const template = '<alert-tab />';\n    const scopeProps = { ctrl: this.panelCtrl };\n\n    this.component = loader.load(this.element, scopeProps, template);\n\n    const validationMessage = await getAlertingValidationMessage(\n      panel.transformations,\n      panel.targets,\n      getDataSourceSrv(),\n      panel.datasource\n    );\n\n    if (validationMessage) {\n      this.setState({ validationMessage });\n    }\n  }\n\n  getReactAlertPanelCtrl() {\n    return {\n      panel: this.props.panel,\n      events: new EventBusSrv(),\n      render: () => {\n        this.props.panel.render();\n      },\n    } as any;\n  }\n\n  onAddAlert = () => {\n    this.panelCtrl?._enableAlert();\n    this.component?.digest();\n    this.forceUpdate();\n  };\n\n  onToggleModal = (prop: keyof Omit<State, 'validationMessage'>) => {\n    const value = this.state[prop];\n    this.setState({ ...this.state, [prop]: !value });\n  };\n\n  renderTestRule = () => {\n    if (!this.state.showTestRule) {\n      return null;\n    }\n\n    const { panel, dashboard } = this.props;\n    const onDismiss = () => this.onToggleModal('showTestRule');\n\n    return (\n      <Modal isOpen={true} icon=\"bug\" title=\"Testing rule\" onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n        <TestRuleResult panel={panel} dashboard={dashboard} />\n      </Modal>\n    );\n  };\n\n  renderDeleteConfirmation = () => {\n    if (!this.state.showDeleteConfirmation) {\n      return null;\n    }\n\n    const { panel } = this.props;\n    const onDismiss = () => this.onToggleModal('showDeleteConfirmation');\n\n    return (\n      <ConfirmModal\n        isOpen={true}\n        icon=\"trash-alt\"\n        title=\"Delete\"\n        body={\n          <div>\n            Are you sure you want to delete this alert rule?\n            <br />\n            <small>You need to save dashboard for the delete to take effect.</small>\n          </div>\n        }\n        confirmText=\"Delete alert\"\n        onDismiss={onDismiss}\n        onConfirm={() => {\n          delete panel.alert;\n          panel.thresholds = [];\n          if (this.panelCtrl) {\n            this.panelCtrl.alertState = null;\n            this.panelCtrl.render();\n          }\n          this.component?.digest();\n          onDismiss();\n        }}\n      />\n    );\n  };\n\n  renderStateHistory = () => {\n    if (!this.state.showStateHistory) {\n      return null;\n    }\n\n    const { panel, dashboard } = this.props;\n    const onDismiss = () => this.onToggleModal('showStateHistory');\n\n    return (\n      <Modal isOpen={true} icon=\"history\" title=\"State history\" onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n        <StateHistory dashboard={dashboard} panelId={panel.id} onRefresh={() => this.panelCtrl?.refresh()} />\n      </Modal>\n    );\n  };\n\n  render() {\n    const { alert, transformations } = this.props.panel;\n    const { validationMessage } = this.state;\n    const hasTransformations = transformations && transformations.length > 0;\n\n    if (!alert && validationMessage) {\n      return <PanelNotSupported message={validationMessage} />;\n    }\n\n    const model = {\n      title: 'Panel has no alert rule defined',\n      buttonIcon: 'bell' as IconName,\n      onClick: this.onAddAlert,\n      buttonTitle: 'Create Alert',\n    };\n\n    return (\n      <>\n        <CustomScrollbar autoHeightMin=\"100%\">\n          <Container padding=\"md\">\n            <div aria-label={selectors.components.AlertTab.content}>\n              {alert && hasTransformations && (\n                <Alert\n                  severity={AppNotificationSeverity.Error}\n                  title=\"Transformations are not supported in alert queries\"\n                />\n              )}\n\n              <div ref={(element) => (this.element = element)} />\n              {alert && (\n                <HorizontalGroup>\n                  <Button onClick={() => this.onToggleModal('showStateHistory')} variant=\"secondary\">\n                    State history\n                  </Button>\n                  <Button onClick={() => this.onToggleModal('showTestRule')} variant=\"secondary\">\n                    Test rule\n                  </Button>\n                  <Button onClick={() => this.onToggleModal('showDeleteConfirmation')} variant=\"destructive\">\n                    Delete\n                  </Button>\n                </HorizontalGroup>\n              )}\n              {!alert && !validationMessage && <EmptyListCTA {...model} />}\n            </div>\n          </Container>\n        </CustomScrollbar>\n\n        {this.renderTestRule()}\n        {this.renderDeleteConfirmation()}\n        {this.renderStateHistory()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularPanelComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {};\n\nexport const AlertTab = connect(mapStateToProps, mapDispatchToProps)(UnConnectedAlertTab);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}