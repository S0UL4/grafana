{"ast":null,"code":"const _excluded = [\"getBounds\", \"tag\", \"resetBoundsOnResize\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { get as _get } from 'lodash';\nimport EUpdateTypes from './EUpdateTypes';\nconst LEFT_MOUSE_BUTTON = 0;\nexport default class DraggableManager {\n  // cache the last known DraggableBounds (invalidate via `#resetBounds())\n  // optional callbacks for various dragging events\n  // whether to reset the bounds on window resize\n\n  /**\n   * Get the `DraggableBounds` for the current drag. The returned value is\n   * cached until either `#resetBounds()` is called or the window is resized\n   * (assuming `_resetBoundsOnResize` is `true`). The `DraggableBounds` defines\n   * the range the current drag can span to. It also establishes the left offset\n   * to adjust `clientX` by (from the `MouseEvent`s).\n   */\n  // convenience data\n  // handlers for integration with DOM elements\n  constructor(_ref) {\n    let {\n      getBounds,\n      tag,\n      resetBoundsOnResize = true\n    } = _ref,\n        rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    _defineProperty(this, \"_bounds\", void 0);\n\n    _defineProperty(this, \"_isDragging\", void 0);\n\n    _defineProperty(this, \"_onMouseEnter\", void 0);\n\n    _defineProperty(this, \"_onMouseLeave\", void 0);\n\n    _defineProperty(this, \"_onMouseMove\", void 0);\n\n    _defineProperty(this, \"_onDragStart\", void 0);\n\n    _defineProperty(this, \"_onDragMove\", void 0);\n\n    _defineProperty(this, \"_onDragEnd\", void 0);\n\n    _defineProperty(this, \"_resetBoundsOnResize\", void 0);\n\n    _defineProperty(this, \"getBounds\", void 0);\n\n    _defineProperty(this, \"tag\", void 0);\n\n    _defineProperty(this, \"handleMouseEnter\", void 0);\n\n    _defineProperty(this, \"handleMouseMove\", void 0);\n\n    _defineProperty(this, \"handleMouseLeave\", void 0);\n\n    _defineProperty(this, \"handleMouseDown\", void 0);\n\n    _defineProperty(this, \"resetBounds\", () => {\n      this._bounds = undefined;\n    });\n\n    _defineProperty(this, \"_handleMinorMouseEvent\", event => {\n      const {\n        button,\n        clientX,\n        type: eventType\n      } = event;\n\n      if (this._isDragging || button !== LEFT_MOUSE_BUTTON) {\n        return;\n      }\n\n      let type = null;\n      let handler;\n\n      if (eventType === 'mouseenter') {\n        type = EUpdateTypes.MouseEnter;\n        handler = this._onMouseEnter;\n      } else if (eventType === 'mouseleave') {\n        type = EUpdateTypes.MouseLeave;\n        handler = this._onMouseLeave;\n      } else if (eventType === 'mousemove') {\n        type = EUpdateTypes.MouseMove;\n        handler = this._onMouseMove;\n      } else {\n        throw new Error(`invalid event type: ${eventType}`);\n      }\n\n      if (!handler) {\n        return;\n      }\n\n      const {\n        value,\n        x\n      } = this._getPosition(clientX);\n\n      handler({\n        event,\n        type,\n        value,\n        x,\n        manager: this,\n        tag: this.tag\n      });\n    });\n\n    _defineProperty(this, \"_handleDragEvent\", event => {\n      const {\n        button,\n        clientX,\n        type: eventType\n      } = event;\n      let type = null;\n      let handler;\n\n      if (eventType === 'mousedown') {\n        if (this._isDragging || button !== LEFT_MOUSE_BUTTON) {\n          return;\n        }\n\n        window.addEventListener('mousemove', this._handleDragEvent);\n        window.addEventListener('mouseup', this._handleDragEvent);\n\n        const style = _get(document, 'body.style');\n\n        if (style) {\n          style.userSelect = 'none';\n        }\n\n        this._isDragging = true;\n        type = EUpdateTypes.DragStart;\n        handler = this._onDragStart;\n      } else if (eventType === 'mousemove') {\n        if (!this._isDragging) {\n          return;\n        }\n\n        type = EUpdateTypes.DragMove;\n        handler = this._onDragMove;\n      } else if (eventType === 'mouseup') {\n        if (!this._isDragging) {\n          return;\n        }\n\n        this._stopDragging();\n\n        type = EUpdateTypes.DragEnd;\n        handler = this._onDragEnd;\n      } else {\n        throw new Error(`invalid event type: ${eventType}`);\n      }\n\n      if (!handler) {\n        return;\n      }\n\n      const {\n        value,\n        x\n      } = this._getPosition(clientX);\n\n      handler({\n        event,\n        type,\n        value,\n        x,\n        manager: this,\n        tag: this.tag\n      });\n    });\n\n    this.handleMouseDown = this._handleDragEvent;\n    this.handleMouseEnter = this._handleMinorMouseEvent;\n    this.handleMouseMove = this._handleMinorMouseEvent;\n    this.handleMouseLeave = this._handleMinorMouseEvent;\n    this.getBounds = getBounds;\n    this.tag = tag;\n    this._isDragging = false;\n    this._bounds = undefined;\n    this._resetBoundsOnResize = Boolean(resetBoundsOnResize);\n\n    if (this._resetBoundsOnResize) {\n      window.addEventListener('resize', this.resetBounds);\n    }\n\n    this._onMouseEnter = rest.onMouseEnter;\n    this._onMouseLeave = rest.onMouseLeave;\n    this._onMouseMove = rest.onMouseMove;\n    this._onDragStart = rest.onDragStart;\n    this._onDragMove = rest.onDragMove;\n    this._onDragEnd = rest.onDragEnd;\n  }\n\n  _getBounds() {\n    if (!this._bounds) {\n      this._bounds = this.getBounds(this.tag);\n    }\n\n    return this._bounds;\n  }\n\n  _getPosition(clientX) {\n    const {\n      clientXLeft,\n      maxValue,\n      minValue,\n      width\n    } = this._getBounds();\n\n    let x = clientX - clientXLeft;\n    let value = x / width;\n\n    if (minValue != null && value < minValue) {\n      value = minValue;\n      x = minValue * width;\n    } else if (maxValue != null && value > maxValue) {\n      value = maxValue;\n      x = maxValue * width;\n    }\n\n    return {\n      value,\n      x\n    };\n  }\n\n  _stopDragging() {\n    window.removeEventListener('mousemove', this._handleDragEvent);\n    window.removeEventListener('mouseup', this._handleDragEvent);\n\n    const style = _get(document, 'body.style');\n\n    if (style) {\n      style.userSelect = null;\n    }\n\n    this._isDragging = false;\n  }\n\n  isDragging() {\n    return this._isDragging;\n  }\n\n  dispose() {\n    if (this._isDragging) {\n      this._stopDragging();\n    }\n\n    if (this._resetBoundsOnResize) {\n      window.removeEventListener('resize', this.resetBounds);\n    }\n\n    this._bounds = undefined;\n    this._onMouseEnter = undefined;\n    this._onMouseLeave = undefined;\n    this._onMouseMove = undefined;\n    this._onDragStart = undefined;\n    this._onDragMove = undefined;\n    this._onDragEnd = undefined;\n  }\n\n}","map":{"version":3,"names":["get","_get","EUpdateTypes","LEFT_MOUSE_BUTTON","DraggableManager","constructor","getBounds","tag","resetBoundsOnResize","rest","_bounds","undefined","event","button","clientX","type","eventType","_isDragging","handler","MouseEnter","_onMouseEnter","MouseLeave","_onMouseLeave","MouseMove","_onMouseMove","Error","value","x","_getPosition","manager","window","addEventListener","_handleDragEvent","style","document","userSelect","DragStart","_onDragStart","DragMove","_onDragMove","_stopDragging","DragEnd","_onDragEnd","handleMouseDown","handleMouseEnter","_handleMinorMouseEvent","handleMouseMove","handleMouseLeave","_resetBoundsOnResize","Boolean","resetBounds","onMouseEnter","onMouseLeave","onMouseMove","onDragStart","onDragMove","onDragEnd","_getBounds","clientXLeft","maxValue","minValue","width","removeEventListener","isDragging","dispose"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/utils/DraggableManager/DraggableManager.tsx"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { get as _get } from 'lodash';\n\nimport { TNil } from '../../types';\n\nimport EUpdateTypes from './EUpdateTypes';\nimport { DraggableBounds, DraggingUpdate } from './types';\n\nconst LEFT_MOUSE_BUTTON = 0;\n\ntype DraggableManagerOptions = {\n  getBounds: (tag: string | TNil) => DraggableBounds;\n  onMouseEnter?: (update: DraggingUpdate) => void;\n  onMouseLeave?: (update: DraggingUpdate) => void;\n  onMouseMove?: (update: DraggingUpdate) => void;\n  onDragStart?: (update: DraggingUpdate) => void;\n  onDragMove?: (update: DraggingUpdate) => void;\n  onDragEnd?: (update: DraggingUpdate) => void;\n  resetBoundsOnResize?: boolean;\n  tag?: string;\n};\n\nexport default class DraggableManager {\n  // cache the last known DraggableBounds (invalidate via `#resetBounds())\n  _bounds: DraggableBounds | TNil;\n  _isDragging: boolean;\n  // optional callbacks for various dragging events\n  _onMouseEnter: ((update: DraggingUpdate) => void) | TNil;\n  _onMouseLeave: ((update: DraggingUpdate) => void) | TNil;\n  _onMouseMove: ((update: DraggingUpdate) => void) | TNil;\n  _onDragStart: ((update: DraggingUpdate) => void) | TNil;\n  _onDragMove: ((update: DraggingUpdate) => void) | TNil;\n  _onDragEnd: ((update: DraggingUpdate) => void) | TNil;\n  // whether to reset the bounds on window resize\n  _resetBoundsOnResize: boolean;\n\n  /**\n   * Get the `DraggableBounds` for the current drag. The returned value is\n   * cached until either `#resetBounds()` is called or the window is resized\n   * (assuming `_resetBoundsOnResize` is `true`). The `DraggableBounds` defines\n   * the range the current drag can span to. It also establishes the left offset\n   * to adjust `clientX` by (from the `MouseEvent`s).\n   */\n  getBounds: (tag: string | TNil) => DraggableBounds;\n\n  // convenience data\n  tag: string | TNil;\n\n  // handlers for integration with DOM elements\n  handleMouseEnter: (event: React.MouseEvent<any>) => void;\n  handleMouseMove: (event: React.MouseEvent<any>) => void;\n  handleMouseLeave: (event: React.MouseEvent<any>) => void;\n  handleMouseDown: (event: React.MouseEvent<any>) => void;\n\n  constructor({ getBounds, tag, resetBoundsOnResize = true, ...rest }: DraggableManagerOptions) {\n    this.handleMouseDown = this._handleDragEvent;\n    this.handleMouseEnter = this._handleMinorMouseEvent;\n    this.handleMouseMove = this._handleMinorMouseEvent;\n    this.handleMouseLeave = this._handleMinorMouseEvent;\n\n    this.getBounds = getBounds;\n    this.tag = tag;\n    this._isDragging = false;\n    this._bounds = undefined;\n    this._resetBoundsOnResize = Boolean(resetBoundsOnResize);\n    if (this._resetBoundsOnResize) {\n      window.addEventListener('resize', this.resetBounds);\n    }\n    this._onMouseEnter = rest.onMouseEnter;\n    this._onMouseLeave = rest.onMouseLeave;\n    this._onMouseMove = rest.onMouseMove;\n    this._onDragStart = rest.onDragStart;\n    this._onDragMove = rest.onDragMove;\n    this._onDragEnd = rest.onDragEnd;\n  }\n\n  _getBounds(): DraggableBounds {\n    if (!this._bounds) {\n      this._bounds = this.getBounds(this.tag);\n    }\n    return this._bounds;\n  }\n\n  _getPosition(clientX: number) {\n    const { clientXLeft, maxValue, minValue, width } = this._getBounds();\n    let x = clientX - clientXLeft;\n    let value = x / width;\n    if (minValue != null && value < minValue) {\n      value = minValue;\n      x = minValue * width;\n    } else if (maxValue != null && value > maxValue) {\n      value = maxValue;\n      x = maxValue * width;\n    }\n    return { value, x };\n  }\n\n  _stopDragging() {\n    window.removeEventListener('mousemove', this._handleDragEvent);\n    window.removeEventListener('mouseup', this._handleDragEvent);\n    const style = _get(document, 'body.style');\n    if (style) {\n      style.userSelect = null;\n    }\n    this._isDragging = false;\n  }\n\n  isDragging() {\n    return this._isDragging;\n  }\n\n  dispose() {\n    if (this._isDragging) {\n      this._stopDragging();\n    }\n    if (this._resetBoundsOnResize) {\n      window.removeEventListener('resize', this.resetBounds);\n    }\n    this._bounds = undefined;\n    this._onMouseEnter = undefined;\n    this._onMouseLeave = undefined;\n    this._onMouseMove = undefined;\n    this._onDragStart = undefined;\n    this._onDragMove = undefined;\n    this._onDragEnd = undefined;\n  }\n\n  resetBounds = () => {\n    this._bounds = undefined;\n  };\n\n  _handleMinorMouseEvent = (event: React.MouseEvent<any>) => {\n    const { button, clientX, type: eventType } = event;\n    if (this._isDragging || button !== LEFT_MOUSE_BUTTON) {\n      return;\n    }\n    let type: EUpdateTypes | null = null;\n    let handler: ((update: DraggingUpdate) => void) | TNil;\n    if (eventType === 'mouseenter') {\n      type = EUpdateTypes.MouseEnter;\n      handler = this._onMouseEnter;\n    } else if (eventType === 'mouseleave') {\n      type = EUpdateTypes.MouseLeave;\n      handler = this._onMouseLeave;\n    } else if (eventType === 'mousemove') {\n      type = EUpdateTypes.MouseMove;\n      handler = this._onMouseMove;\n    } else {\n      throw new Error(`invalid event type: ${eventType}`);\n    }\n    if (!handler) {\n      return;\n    }\n    const { value, x } = this._getPosition(clientX);\n    handler({\n      event,\n      type,\n      value,\n      x,\n      manager: this,\n      tag: this.tag,\n    });\n  };\n\n  _handleDragEvent = (event: MouseEvent | React.MouseEvent<any>) => {\n    const { button, clientX, type: eventType } = event;\n    let type: EUpdateTypes | null = null;\n    let handler: ((update: DraggingUpdate) => void) | TNil;\n    if (eventType === 'mousedown') {\n      if (this._isDragging || button !== LEFT_MOUSE_BUTTON) {\n        return;\n      }\n      window.addEventListener('mousemove', this._handleDragEvent);\n      window.addEventListener('mouseup', this._handleDragEvent);\n      const style = _get(document, 'body.style');\n      if (style) {\n        style.userSelect = 'none';\n      }\n      this._isDragging = true;\n\n      type = EUpdateTypes.DragStart;\n      handler = this._onDragStart;\n    } else if (eventType === 'mousemove') {\n      if (!this._isDragging) {\n        return;\n      }\n      type = EUpdateTypes.DragMove;\n      handler = this._onDragMove;\n    } else if (eventType === 'mouseup') {\n      if (!this._isDragging) {\n        return;\n      }\n      this._stopDragging();\n      type = EUpdateTypes.DragEnd;\n      handler = this._onDragEnd;\n    } else {\n      throw new Error(`invalid event type: ${eventType}`);\n    }\n    if (!handler) {\n      return;\n    }\n    const { value, x } = this._getPosition(clientX);\n    handler({\n      event,\n      type,\n      value,\n      x,\n      manager: this,\n      tag: this.tag,\n    });\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}