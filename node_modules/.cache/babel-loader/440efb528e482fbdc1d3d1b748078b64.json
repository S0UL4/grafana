{"ast":null,"code":"import { map } from 'lodash';\nimport React, { useEffect, useState, memo } from 'react';\nimport { textUtil, rangeUtil } from '@grafana/data';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst PromLink = ({\n  panelData,\n  query,\n  datasource\n}) => {\n  const [href, setHref] = useState('');\n  useEffect(() => {\n    if (panelData) {\n      const getExternalLink = () => {\n        if (!panelData.request) {\n          return '';\n        }\n\n        const {\n          request: {\n            range,\n            interval,\n            scopedVars\n          }\n        } = panelData;\n        const start = datasource.getPrometheusTime(range.from, false);\n        const end = datasource.getPrometheusTime(range.to, true);\n        const rangeDiff = Math.ceil(end - start);\n        const endTime = range.to.utc().format('YYYY-MM-DD HH:mm');\n        const enrichedScopedVars = Object.assign({}, scopedVars, datasource.getRateIntervalScopedVariable(rangeUtil.intervalToSeconds(interval), rangeUtil.intervalToSeconds(datasource.interval)));\n        const options = {\n          interval,\n          scopedVars: enrichedScopedVars\n        };\n        const customQueryParameters = {};\n\n        if (datasource.customQueryParameters) {\n          for (const [k, v] of datasource.customQueryParameters) {\n            customQueryParameters[k] = v;\n          }\n        }\n\n        const queryOptions = datasource.createQuery(query, options, start, end);\n        const expr = Object.assign({}, customQueryParameters, {\n          'g0.expr': queryOptions.expr,\n          'g0.range_input': rangeDiff + 's',\n          'g0.end_input': endTime,\n          'g0.step_input': queryOptions.step,\n          'g0.tab': 0\n        });\n        const args = map(expr, (v, k) => {\n          return k + '=' + encodeURIComponent(v);\n        }).join('&');\n        return `${datasource.directUrl}/graph?${args}`;\n      };\n\n      setHref(getExternalLink());\n    }\n  }, [datasource, panelData, query]);\n  return /*#__PURE__*/_jsx(\"a\", {\n    href: textUtil.sanitizeUrl(href),\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    children: \"Prometheus\"\n  });\n};\n\nexport default /*#__PURE__*/memo(PromLink);","map":{"version":3,"names":["map","React","useEffect","useState","memo","textUtil","rangeUtil","PromLink","panelData","query","datasource","href","setHref","getExternalLink","request","range","interval","scopedVars","start","getPrometheusTime","from","end","to","rangeDiff","Math","ceil","endTime","utc","format","enrichedScopedVars","getRateIntervalScopedVariable","intervalToSeconds","options","customQueryParameters","k","v","queryOptions","createQuery","expr","step","args","encodeURIComponent","join","directUrl","sanitizeUrl"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/components/PromLink.tsx"],"sourcesContent":["import { map } from 'lodash';\nimport React, { FC, useEffect, useState, memo } from 'react';\n\nimport { DataQueryRequest, PanelData, ScopedVars, textUtil, rangeUtil } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  panelData?: PanelData;\n}\n\nconst PromLink: FC<Props> = ({ panelData, query, datasource }) => {\n  const [href, setHref] = useState('');\n\n  useEffect(() => {\n    if (panelData) {\n      const getExternalLink = () => {\n        if (!panelData.request) {\n          return '';\n        }\n\n        const {\n          request: { range, interval, scopedVars },\n        } = panelData;\n\n        const start = datasource.getPrometheusTime(range.from, false);\n        const end = datasource.getPrometheusTime(range.to, true);\n        const rangeDiff = Math.ceil(end - start);\n        const endTime = range.to.utc().format('YYYY-MM-DD HH:mm');\n\n        const enrichedScopedVars: ScopedVars = {\n          ...scopedVars,\n          // As we support $__rate_interval variable in min step, we need add it to scopedVars\n          ...datasource.getRateIntervalScopedVariable(\n            rangeUtil.intervalToSeconds(interval),\n            rangeUtil.intervalToSeconds(datasource.interval)\n          ),\n        };\n\n        const options = {\n          interval,\n          scopedVars: enrichedScopedVars,\n        } as DataQueryRequest<PromQuery>;\n\n        const customQueryParameters: { [key: string]: string } = {};\n        if (datasource.customQueryParameters) {\n          for (const [k, v] of datasource.customQueryParameters) {\n            customQueryParameters[k] = v;\n          }\n        }\n\n        const queryOptions = datasource.createQuery(query, options, start, end);\n\n        const expr = {\n          ...customQueryParameters,\n          'g0.expr': queryOptions.expr,\n          'g0.range_input': rangeDiff + 's',\n          'g0.end_input': endTime,\n          'g0.step_input': queryOptions.step,\n          'g0.tab': 0,\n        };\n\n        const args = map(expr, (v: string, k: string) => {\n          return k + '=' + encodeURIComponent(v);\n        }).join('&');\n        return `${datasource.directUrl}/graph?${args}`;\n      };\n\n      setHref(getExternalLink());\n    }\n  }, [datasource, panelData, query]);\n\n  return (\n    <a href={textUtil.sanitizeUrl(href)} target=\"_blank\" rel=\"noopener noreferrer\">\n      Prometheus\n    </a>\n  );\n};\n\nexport default memo(PromLink);\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,QAApB;AACA,OAAOC,KAAP,IAAoBC,SAApB,EAA+BC,QAA/B,EAAyCC,IAAzC,QAAqD,OAArD;AAEA,SAAkDC,QAAlD,EAA4DC,SAA5D,QAA6E,eAA7E;;;AAWA,MAAMC,QAAmB,GAAG,CAAC;EAAEC,SAAF;EAAaC,KAAb;EAAoBC;AAApB,CAAD,KAAsC;EAChE,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;EAEAD,SAAS,CAAC,MAAM;IACd,IAAIM,SAAJ,EAAe;MACb,MAAMK,eAAe,GAAG,MAAM;QAC5B,IAAI,CAACL,SAAS,CAACM,OAAf,EAAwB;UACtB,OAAO,EAAP;QACD;;QAED,MAAM;UACJA,OAAO,EAAE;YAAEC,KAAF;YAASC,QAAT;YAAmBC;UAAnB;QADL,IAEFT,SAFJ;QAIA,MAAMU,KAAK,GAAGR,UAAU,CAACS,iBAAX,CAA6BJ,KAAK,CAACK,IAAnC,EAAyC,KAAzC,CAAd;QACA,MAAMC,GAAG,GAAGX,UAAU,CAACS,iBAAX,CAA6BJ,KAAK,CAACO,EAAnC,EAAuC,IAAvC,CAAZ;QACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUJ,GAAG,GAAGH,KAAhB,CAAlB;QACA,MAAMQ,OAAO,GAAGX,KAAK,CAACO,EAAN,CAASK,GAAT,GAAeC,MAAf,CAAsB,kBAAtB,CAAhB;QAEA,MAAMC,kBAA8B,qBAC/BZ,UAD+B,EAG/BP,UAAU,CAACoB,6BAAX,CACDxB,SAAS,CAACyB,iBAAV,CAA4Bf,QAA5B,CADC,EAEDV,SAAS,CAACyB,iBAAV,CAA4BrB,UAAU,CAACM,QAAvC,CAFC,CAH+B,CAApC;QASA,MAAMgB,OAAO,GAAG;UACdhB,QADc;UAEdC,UAAU,EAAEY;QAFE,CAAhB;QAKA,MAAMI,qBAAgD,GAAG,EAAzD;;QACA,IAAIvB,UAAU,CAACuB,qBAAf,EAAsC;UACpC,KAAK,MAAM,CAACC,CAAD,EAAIC,CAAJ,CAAX,IAAqBzB,UAAU,CAACuB,qBAAhC,EAAuD;YACrDA,qBAAqB,CAACC,CAAD,CAArB,GAA2BC,CAA3B;UACD;QACF;;QAED,MAAMC,YAAY,GAAG1B,UAAU,CAAC2B,WAAX,CAAuB5B,KAAvB,EAA8BuB,OAA9B,EAAuCd,KAAvC,EAA8CG,GAA9C,CAArB;QAEA,MAAMiB,IAAI,qBACLL,qBADK;UAER,WAAWG,YAAY,CAACE,IAFhB;UAGR,kBAAkBf,SAAS,GAAG,GAHtB;UAIR,gBAAgBG,OAJR;UAKR,iBAAiBU,YAAY,CAACG,IALtB;UAMR,UAAU;QANF,EAAV;QASA,MAAMC,IAAI,GAAGxC,GAAG,CAACsC,IAAD,EAAO,CAACH,CAAD,EAAYD,CAAZ,KAA0B;UAC/C,OAAOA,CAAC,GAAG,GAAJ,GAAUO,kBAAkB,CAACN,CAAD,CAAnC;QACD,CAFe,CAAH,CAEVO,IAFU,CAEL,GAFK,CAAb;QAGA,OAAQ,GAAEhC,UAAU,CAACiC,SAAU,UAASH,IAAK,EAA7C;MACD,CAlDD;;MAoDA5B,OAAO,CAACC,eAAe,EAAhB,CAAP;IACD;EACF,CAxDQ,EAwDN,CAACH,UAAD,EAAaF,SAAb,EAAwBC,KAAxB,CAxDM,CAAT;EA0DA,oBACE;IAAG,IAAI,EAAEJ,QAAQ,CAACuC,WAAT,CAAqBjC,IAArB,CAAT;IAAqC,MAAM,EAAC,QAA5C;IAAqD,GAAG,EAAC,qBAAzD;IAAA;EAAA,EADF;AAKD,CAlED;;AAoEA,4BAAeP,IAAI,CAACG,QAAD,CAAnB"},"metadata":{},"sourceType":"module"}