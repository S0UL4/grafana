{"ast":null,"code":"import { isEmpty, isObject, mapValues, omitBy } from 'lodash';\nimport { getDefaultTimeRange, LoadingState } from '@grafana/data';\nimport store from '../../../core/store';\nimport { clearQueryKeys, lastUsedDatasourceKeyForOrgId, toGraphStyle } from '../../../core/utils/explore';\nimport { getDatasourceSrv } from '../../plugins/datasource_srv';\nimport { toRawTimeRange } from '../utils/time';\nexport const DEFAULT_RANGE = {\n  from: 'now-6h',\n  to: 'now'\n};\nconst GRAPH_STYLE_KEY = 'grafana.explore.style.graph';\nexport const storeGraphStyle = graphStyle => {\n  store.set(GRAPH_STYLE_KEY, graphStyle);\n};\n\nconst loadGraphStyle = () => {\n  const data = store.get(GRAPH_STYLE_KEY);\n  return toGraphStyle(data);\n};\n/**\n * Returns a fresh Explore area state\n */\n\n\nexport const makeExplorePaneState = () => ({\n  containerWidth: 0,\n  datasourceInstance: null,\n  datasourceMissing: false,\n  history: [],\n  queries: [],\n  initialized: false,\n  range: {\n    from: null,\n    to: null,\n    raw: DEFAULT_RANGE\n  },\n  absoluteRange: {\n    from: null,\n    to: null\n  },\n  scanning: false,\n  loading: false,\n  queryKeys: [],\n  isLive: false,\n  isPaused: false,\n  queryResponse: createEmptyQueryResponse(),\n  tableResult: null,\n  graphResult: null,\n  logsResult: null,\n  eventBridge: null,\n  cache: [],\n  richHistory: [],\n  logsVolumeDataProvider: undefined,\n  logsVolumeData: undefined,\n  graphStyle: loadGraphStyle(),\n  panelsState: {}\n});\nexport const createEmptyQueryResponse = () => ({\n  state: LoadingState.NotStarted,\n  series: [],\n  timeRange: getDefaultTimeRange(),\n  graphFrames: [],\n  logsFrames: [],\n  traceFrames: [],\n  nodeGraphFrames: [],\n  tableFrames: [],\n  graphResult: null,\n  logsResult: null,\n  tableResult: null\n});\nexport async function loadAndInitDatasource(orgId, datasourceUid) {\n  var _instance$meta;\n\n  let instance;\n\n  try {\n    instance = await getDatasourceSrv().get(datasourceUid);\n  } catch (error) {\n    // Falling back to the default data source in case the provided data source was not found.\n    // It may happen if last used data source or the data source provided in the URL has been\n    // removed or it is not provisioned anymore.\n    instance = await getDatasourceSrv().get();\n  }\n\n  if (instance.init) {\n    try {\n      instance.init();\n    } catch (err) {\n      // TODO: should probably be handled better\n      console.error(err);\n    }\n  }\n\n  const historyKey = `grafana.explore.history.${(_instance$meta = instance.meta) === null || _instance$meta === void 0 ? void 0 : _instance$meta.id}`;\n  const history = store.getObject(historyKey, []); // Save last-used datasource\n\n  store.set(lastUsedDatasourceKeyForOrgId(orgId), instance.uid);\n  return {\n    history,\n    instance\n  };\n} // recursively walks an object, removing keys where the value is undefined\n// if the resulting object is empty, returns undefined\n\nfunction pruneObject(obj) {\n  let pruned = mapValues(obj, value => isObject(value) ? pruneObject(value) : value);\n  pruned = omitBy(pruned, isEmpty);\n\n  if (isEmpty(pruned)) {\n    return undefined;\n  }\n\n  return pruned;\n}\n\nexport function getUrlStateFromPaneState(pane) {\n  var _pane$datasourceInsta;\n\n  return {\n    // datasourceInstance should not be undefined anymore here but in case there is some path for it to be undefined\n    // lets just fallback instead of crashing.\n    datasource: ((_pane$datasourceInsta = pane.datasourceInstance) === null || _pane$datasourceInsta === void 0 ? void 0 : _pane$datasourceInsta.name) || '',\n    queries: pane.queries.map(clearQueryKeys),\n    range: toRawTimeRange(pane.range),\n    // don't include panelsState in the url unless a piece of state is actually set\n    panelsState: pruneObject(pane.panelsState)\n  };\n}\nexport function createCacheKey(absRange) {\n  const params = {\n    from: absRange.from,\n    to: absRange.to\n  };\n  const cacheKey = Object.entries(params).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v.toString())}`).join('&');\n  return cacheKey;\n}\nexport function getResultsFromCache(cache, absoluteRange) {\n  const cacheKey = createCacheKey(absoluteRange);\n  const cacheIdx = cache.findIndex(c => c.key === cacheKey);\n  const cacheValue = cacheIdx >= 0 ? cache[cacheIdx].value : undefined;\n  return cacheValue;\n}","map":{"version":3,"names":["isEmpty","isObject","mapValues","omitBy","getDefaultTimeRange","LoadingState","store","clearQueryKeys","lastUsedDatasourceKeyForOrgId","toGraphStyle","getDatasourceSrv","toRawTimeRange","DEFAULT_RANGE","from","to","GRAPH_STYLE_KEY","storeGraphStyle","graphStyle","set","loadGraphStyle","data","get","makeExplorePaneState","containerWidth","datasourceInstance","datasourceMissing","history","queries","initialized","range","raw","absoluteRange","scanning","loading","queryKeys","isLive","isPaused","queryResponse","createEmptyQueryResponse","tableResult","graphResult","logsResult","eventBridge","cache","richHistory","logsVolumeDataProvider","undefined","logsVolumeData","panelsState","state","NotStarted","series","timeRange","graphFrames","logsFrames","traceFrames","nodeGraphFrames","tableFrames","loadAndInitDatasource","orgId","datasourceUid","instance","error","init","err","console","historyKey","meta","id","getObject","uid","pruneObject","obj","pruned","value","getUrlStateFromPaneState","pane","datasource","name","map","createCacheKey","absRange","params","cacheKey","Object","entries","k","v","encodeURIComponent","toString","join","getResultsFromCache","cacheIdx","findIndex","c","key","cacheValue"],"sources":["/home/soula/grafana/public/app/features/explore/state/utils.ts"],"sourcesContent":["import { isEmpty, isObject, mapValues, omitBy } from 'lodash';\n\nimport {\n  AbsoluteTimeRange,\n  DataSourceApi,\n  EventBusExtended,\n  ExploreUrlState,\n  getDefaultTimeRange,\n  HistoryItem,\n  LoadingState,\n  PanelData,\n} from '@grafana/data';\nimport { ExplorePanelData } from 'app/types';\nimport { ExploreGraphStyle, ExploreItemState } from 'app/types/explore';\n\nimport store from '../../../core/store';\nimport { clearQueryKeys, lastUsedDatasourceKeyForOrgId, toGraphStyle } from '../../../core/utils/explore';\nimport { getDatasourceSrv } from '../../plugins/datasource_srv';\nimport { toRawTimeRange } from '../utils/time';\n\nexport const DEFAULT_RANGE = {\n  from: 'now-6h',\n  to: 'now',\n};\n\nconst GRAPH_STYLE_KEY = 'grafana.explore.style.graph';\nexport const storeGraphStyle = (graphStyle: string): void => {\n  store.set(GRAPH_STYLE_KEY, graphStyle);\n};\n\nconst loadGraphStyle = (): ExploreGraphStyle => {\n  const data = store.get(GRAPH_STYLE_KEY);\n  return toGraphStyle(data);\n};\n\n/**\n * Returns a fresh Explore area state\n */\nexport const makeExplorePaneState = (): ExploreItemState => ({\n  containerWidth: 0,\n  datasourceInstance: null,\n  datasourceMissing: false,\n  history: [],\n  queries: [],\n  initialized: false,\n  range: {\n    from: null,\n    to: null,\n    raw: DEFAULT_RANGE,\n  } as any,\n  absoluteRange: {\n    from: null,\n    to: null,\n  } as any,\n  scanning: false,\n  loading: false,\n  queryKeys: [],\n  isLive: false,\n  isPaused: false,\n  queryResponse: createEmptyQueryResponse(),\n  tableResult: null,\n  graphResult: null,\n  logsResult: null,\n  eventBridge: null as unknown as EventBusExtended,\n  cache: [],\n  richHistory: [],\n  logsVolumeDataProvider: undefined,\n  logsVolumeData: undefined,\n  graphStyle: loadGraphStyle(),\n  panelsState: {},\n});\n\nexport const createEmptyQueryResponse = (): ExplorePanelData => ({\n  state: LoadingState.NotStarted,\n  series: [],\n  timeRange: getDefaultTimeRange(),\n  graphFrames: [],\n  logsFrames: [],\n  traceFrames: [],\n  nodeGraphFrames: [],\n  tableFrames: [],\n  graphResult: null,\n  logsResult: null,\n  tableResult: null,\n});\n\nexport async function loadAndInitDatasource(\n  orgId: number,\n  datasourceUid?: string\n): Promise<{ history: HistoryItem[]; instance: DataSourceApi }> {\n  let instance;\n  try {\n    instance = await getDatasourceSrv().get(datasourceUid);\n  } catch (error) {\n    // Falling back to the default data source in case the provided data source was not found.\n    // It may happen if last used data source or the data source provided in the URL has been\n    // removed or it is not provisioned anymore.\n    instance = await getDatasourceSrv().get();\n  }\n  if (instance.init) {\n    try {\n      instance.init();\n    } catch (err) {\n      // TODO: should probably be handled better\n      console.error(err);\n    }\n  }\n\n  const historyKey = `grafana.explore.history.${instance.meta?.id}`;\n  const history = store.getObject<HistoryItem[]>(historyKey, []);\n  // Save last-used datasource\n\n  store.set(lastUsedDatasourceKeyForOrgId(orgId), instance.uid);\n  return { history, instance };\n}\n\n// recursively walks an object, removing keys where the value is undefined\n// if the resulting object is empty, returns undefined\nfunction pruneObject(obj: object): object | undefined {\n  let pruned = mapValues(obj, (value) => (isObject(value) ? pruneObject(value) : value));\n  pruned = omitBy<typeof pruned>(pruned, isEmpty);\n  if (isEmpty(pruned)) {\n    return undefined;\n  }\n  return pruned;\n}\n\nexport function getUrlStateFromPaneState(pane: ExploreItemState): ExploreUrlState {\n  return {\n    // datasourceInstance should not be undefined anymore here but in case there is some path for it to be undefined\n    // lets just fallback instead of crashing.\n    datasource: pane.datasourceInstance?.name || '',\n    queries: pane.queries.map(clearQueryKeys),\n    range: toRawTimeRange(pane.range),\n    // don't include panelsState in the url unless a piece of state is actually set\n    panelsState: pruneObject(pane.panelsState),\n  };\n}\n\nexport function createCacheKey(absRange: AbsoluteTimeRange) {\n  const params = {\n    from: absRange.from,\n    to: absRange.to,\n  };\n\n  const cacheKey = Object.entries(params)\n    .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v.toString())}`)\n    .join('&');\n  return cacheKey;\n}\n\nexport function getResultsFromCache(\n  cache: Array<{ key: string; value: PanelData }>,\n  absoluteRange: AbsoluteTimeRange\n): PanelData | undefined {\n  const cacheKey = createCacheKey(absoluteRange);\n  const cacheIdx = cache.findIndex((c) => c.key === cacheKey);\n  const cacheValue = cacheIdx >= 0 ? cache[cacheIdx].value : undefined;\n  return cacheValue;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}