{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { EditorRow } from '@grafana/experimental';\nimport { LabelFilters } from 'app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters';\nimport { OperationList } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationList';\nimport { OperationsEditorRow } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow';\nimport { escapeLabelValueInSelector } from '../../language_utils';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { LokiOperationId } from '../types';\nimport { NestedQueryList } from './NestedQueryList';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const LokiQueryBuilder = /*#__PURE__*/React.memo(({\n  datasource,\n  query,\n  nested,\n  onChange,\n  onRunQuery\n}) => {\n  const onChangeLabels = labels => {\n    onChange(Object.assign({}, query, {\n      labels\n    }));\n  };\n\n  const withTemplateVariableOptions = async optionsPromise => {\n    const options = await optionsPromise;\n    return [...datasource.getVariables(), ...options].map(value => ({\n      label: value,\n      value\n    }));\n  };\n\n  const onGetLabelNames = async forLabel => {\n    const labelsToConsider = query.labels.filter(x => x !== forLabel);\n\n    if (labelsToConsider.length === 0) {\n      await datasource.languageProvider.refreshLogLabels();\n      return datasource.languageProvider.getLabelKeys();\n    }\n\n    const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n    const series = await datasource.languageProvider.fetchSeriesLabels(expr);\n    return Object.keys(series).sort();\n  };\n\n  const onGetLabelValues = async forLabel => {\n    if (!forLabel.label) {\n      return [];\n    }\n\n    let values;\n    const labelsToConsider = query.labels.filter(x => x !== forLabel);\n\n    if (labelsToConsider.length === 0) {\n      values = await datasource.languageProvider.fetchLabelValues(forLabel.label);\n    } else {\n      const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n      const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n      values = result[datasource.interpolateString(forLabel.label)];\n    }\n\n    return values ? values.map(v => escapeLabelValueInSelector(v, forLabel.op)) : []; // Escape values in return\n  };\n\n  const labelFilterError = useMemo(() => {\n    const {\n      labels,\n      operations: op\n    } = query;\n\n    if (!labels.length && op.length) {\n      // We don't want to show error for initial state with empty line contains operation\n      if (op.length === 1 && op[0].id === LokiOperationId.LineContains && op[0].params[0] === '') {\n        return undefined;\n      }\n\n      return 'You need to specify at least 1 label filter (stream selector)';\n    }\n\n    return undefined;\n  }, [query]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(EditorRow, {\n      children: /*#__PURE__*/_jsx(LabelFilters, {\n        onGetLabelNames: forLabel => withTemplateVariableOptions(onGetLabelNames(forLabel)),\n        onGetLabelValues: forLabel => withTemplateVariableOptions(onGetLabelValues(forLabel)),\n        labelsFilters: query.labels,\n        onChange: onChangeLabels,\n        error: labelFilterError\n      })\n    }), /*#__PURE__*/_jsx(OperationsEditorRow, {\n      children: /*#__PURE__*/_jsx(OperationList, {\n        queryModeller: lokiQueryModeller,\n        query: query,\n        onChange: onChange,\n        onRunQuery: onRunQuery,\n        datasource: datasource\n      })\n    }), query.binaryQueries && query.binaryQueries.length > 0 && /*#__PURE__*/_jsx(NestedQueryList, {\n      query: query,\n      datasource: datasource,\n      onChange: onChange,\n      onRunQuery: onRunQuery\n    })]\n  });\n});\nLokiQueryBuilder.displayName = 'LokiQueryBuilder';","map":{"version":3,"names":["React","useMemo","EditorRow","LabelFilters","OperationList","OperationsEditorRow","escapeLabelValueInSelector","lokiQueryModeller","LokiOperationId","NestedQueryList","LokiQueryBuilder","memo","datasource","query","nested","onChange","onRunQuery","onChangeLabels","labels","withTemplateVariableOptions","optionsPromise","options","getVariables","map","value","label","onGetLabelNames","forLabel","labelsToConsider","filter","x","length","languageProvider","refreshLogLabels","getLabelKeys","expr","renderLabels","series","fetchSeriesLabels","Object","keys","sort","onGetLabelValues","values","fetchLabelValues","result","interpolateString","v","op","labelFilterError","operations","id","LineContains","params","undefined","binaryQueries","displayName"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/querybuilder/components/LokiQueryBuilder.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\n\nimport { DataSourceApi, SelectableValue } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\nimport { LabelFilters } from 'app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters';\nimport { OperationList } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationList';\nimport { OperationsEditorRow } from 'app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow';\nimport { QueryBuilderLabelFilter } from 'app/plugins/datasource/prometheus/querybuilder/shared/types';\n\nimport { LokiDatasource } from '../../datasource';\nimport { escapeLabelValueInSelector } from '../../language_utils';\nimport { lokiQueryModeller } from '../LokiQueryModeller';\nimport { LokiOperationId, LokiVisualQuery } from '../types';\n\nimport { NestedQueryList } from './NestedQueryList';\n\nexport interface Props {\n  query: LokiVisualQuery;\n  datasource: LokiDatasource;\n  onChange: (update: LokiVisualQuery) => void;\n  onRunQuery: () => void;\n  nested?: boolean;\n}\n\nexport const LokiQueryBuilder = React.memo<Props>(({ datasource, query, nested, onChange, onRunQuery }) => {\n  const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n    onChange({ ...query, labels });\n  };\n\n  const withTemplateVariableOptions = async (optionsPromise: Promise<string[]>): Promise<SelectableValue[]> => {\n    const options = await optionsPromise;\n    return [...datasource.getVariables(), ...options].map((value) => ({ label: value, value }));\n  };\n\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<any> => {\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n\n    if (labelsToConsider.length === 0) {\n      await datasource.languageProvider.refreshLogLabels();\n      return datasource.languageProvider.getLabelKeys();\n    }\n\n    const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n    const series = await datasource.languageProvider.fetchSeriesLabels(expr);\n    return Object.keys(series).sort();\n  };\n\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>) => {\n    if (!forLabel.label) {\n      return [];\n    }\n\n    let values;\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    if (labelsToConsider.length === 0) {\n      values = await datasource.languageProvider.fetchLabelValues(forLabel.label);\n    } else {\n      const expr = lokiQueryModeller.renderLabels(labelsToConsider);\n      const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n      values = result[datasource.interpolateString(forLabel.label)];\n    }\n\n    return values ? values.map((v) => escapeLabelValueInSelector(v, forLabel.op)) : []; // Escape values in return\n  };\n\n  const labelFilterError: string | undefined = useMemo(() => {\n    const { labels, operations: op } = query;\n    if (!labels.length && op.length) {\n      // We don't want to show error for initial state with empty line contains operation\n      if (op.length === 1 && op[0].id === LokiOperationId.LineContains && op[0].params[0] === '') {\n        return undefined;\n      }\n      return 'You need to specify at least 1 label filter (stream selector)';\n    }\n    return undefined;\n  }, [query]);\n\n  return (\n    <>\n      <EditorRow>\n        <LabelFilters\n          onGetLabelNames={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelNames(forLabel))\n          }\n          onGetLabelValues={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelValues(forLabel))\n          }\n          labelsFilters={query.labels}\n          onChange={onChangeLabels}\n          error={labelFilterError}\n        />\n      </EditorRow>\n      <OperationsEditorRow>\n        <OperationList\n          queryModeller={lokiQueryModeller}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource as DataSourceApi}\n        />\n      </OperationsEditorRow>\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList query={query} datasource={datasource} onChange={onChange} onRunQuery={onRunQuery} />\n      )}\n    </>\n  );\n});\n\nLokiQueryBuilder.displayName = 'LokiQueryBuilder';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}