{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { InlineField, Input, InlineFieldRow, CodeEditor } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SearchEditor({\n  value,\n  onChange\n}) {\n  var _value$query;\n\n  const [json, setJSON] = useState('');\n  const [query, setQuery] = useState((_value$query = value.query) !== null && _value$query !== void 0 ? _value$query : '');\n  useEffect(() => {\n    const emptySearchQuery = {\n      query: '*',\n      location: '',\n      // general, etc\n      ds_uid: '',\n      sort: '',\n      tags: [],\n      kind: [],\n      explain: false,\n      facet: [{\n        field: 'kind'\n      }, {\n        field: 'tags'\n      }],\n      from: 0,\n      limit: 20\n    };\n    setJSON(JSON.stringify(Object.assign({}, emptySearchQuery, value), null, 2));\n  }, [value]);\n\n  const handleSearchBlur = e => {\n    if (query !== value.query) {\n      onChange(Object.assign({}, value, {\n        query\n      }));\n    }\n  };\n\n  const handleSearchEnterKey = e => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n\n    handleSearchBlur(e);\n  };\n\n  const onSaveSearchJSON = rawSearchJSON => {\n    try {\n      var _searchQuery$query;\n\n      const searchQuery = JSON.parse(rawSearchJSON);\n      onChange(searchQuery);\n      setQuery((_searchQuery$query = searchQuery.query) !== null && _searchQuery$query !== void 0 ? _searchQuery$query : '');\n    } catch (ex) {\n      console.log('UNABLE TO parse search', rawSearchJSON, ex);\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(InlineFieldRow, {\n      children: /*#__PURE__*/_jsx(InlineField, {\n        label: \"Query\",\n        grow: true,\n        labelWidth: 12,\n        children: /*#__PURE__*/_jsx(Input, {\n          placeholder: \"Everything\",\n          value: query,\n          onChange: e => setQuery(e.currentTarget.value),\n          onKeyDown: handleSearchEnterKey,\n          onBlur: handleSearchBlur,\n          spellCheck: false\n        })\n      })\n    }), /*#__PURE__*/_jsx(CodeEditor, {\n      height: 300,\n      language: \"json\",\n      value: json,\n      onBlur: onSaveSearchJSON,\n      onSave: onSaveSearchJSON,\n      showMiniMap: false,\n      showLineNumbers: true\n    })]\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","InlineField","Input","InlineFieldRow","CodeEditor","SearchEditor","value","onChange","json","setJSON","query","setQuery","emptySearchQuery","location","ds_uid","sort","tags","kind","explain","facet","field","from","limit","JSON","stringify","handleSearchBlur","e","handleSearchEnterKey","key","onSaveSearchJSON","rawSearchJSON","searchQuery","parse","ex","console","log","currentTarget"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana/components/SearchEditor.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { InlineField, Input, InlineFieldRow, CodeEditor } from '@grafana/ui';\nimport { SearchQuery } from 'app/features/search/service';\n\ninterface Props {\n  value: SearchQuery;\n  onChange: (value: SearchQuery) => void;\n}\n\nexport default function SearchEditor({ value, onChange }: Props) {\n  const [json, setJSON] = useState('');\n  const [query, setQuery] = useState(value.query ?? '');\n\n  useEffect(() => {\n    const emptySearchQuery: SearchQuery = {\n      query: '*',\n      location: '', // general, etc\n      ds_uid: '',\n      sort: '',\n      tags: [],\n      kind: [],\n      explain: false,\n      facet: [{ field: 'kind' }, { field: 'tags' }],\n      from: 0,\n      limit: 20,\n    };\n\n    setJSON(JSON.stringify({ ...emptySearchQuery, ...value }, null, 2));\n  }, [value]);\n\n  const handleSearchBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (query !== value.query) {\n      onChange({ ...value, query });\n    }\n  };\n\n  const handleSearchEnterKey = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n    handleSearchBlur(e as any);\n  };\n\n  const onSaveSearchJSON = (rawSearchJSON: string) => {\n    try {\n      const searchQuery = JSON.parse(rawSearchJSON) as SearchQuery;\n      onChange(searchQuery);\n      setQuery(searchQuery.query ?? '');\n    } catch (ex) {\n      console.log('UNABLE TO parse search', rawSearchJSON, ex);\n    }\n  };\n\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField label=\"Query\" grow={true} labelWidth={12}>\n          <Input\n            placeholder=\"Everything\"\n            value={query}\n            onChange={(e) => setQuery(e.currentTarget.value)}\n            onKeyDown={handleSearchEnterKey}\n            onBlur={handleSearchBlur}\n            spellCheck={false}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <CodeEditor\n        height={300}\n        language=\"json\"\n        value={json}\n        onBlur={onSaveSearchJSON}\n        onSave={onSaveSearchJSON}\n        showMiniMap={false}\n        showLineNumbers={true}\n      />\n    </>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,WAAT,EAAsBC,KAAtB,EAA6BC,cAA7B,EAA6CC,UAA7C,QAA+D,aAA/D;;;;AAQA,eAAe,SAASC,YAAT,CAAsB;EAAEC,KAAF;EAASC;AAAT,CAAtB,EAAkD;EAAA;;EAC/D,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,iBAACM,KAAK,CAACI,KAAP,uDAAgB,EAAhB,CAAlC;EAEAX,SAAS,CAAC,MAAM;IACd,MAAMa,gBAA6B,GAAG;MACpCF,KAAK,EAAE,GAD6B;MAEpCG,QAAQ,EAAE,EAF0B;MAEtB;MACdC,MAAM,EAAE,EAH4B;MAIpCC,IAAI,EAAE,EAJ8B;MAKpCC,IAAI,EAAE,EAL8B;MAMpCC,IAAI,EAAE,EAN8B;MAOpCC,OAAO,EAAE,KAP2B;MAQpCC,KAAK,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAT,CAAD,EAAoB;QAAEA,KAAK,EAAE;MAAT,CAApB,CAR6B;MASpCC,IAAI,EAAE,CAT8B;MAUpCC,KAAK,EAAE;IAV6B,CAAtC;IAaAb,OAAO,CAACc,IAAI,CAACC,SAAL,mBAAoBZ,gBAApB,EAAyCN,KAAzC,GAAkD,IAAlD,EAAwD,CAAxD,CAAD,CAAP;EACD,CAfQ,EAeN,CAACA,KAAD,CAfM,CAAT;;EAiBA,MAAMmB,gBAAgB,GAAIC,CAAD,IAA2C;IAClE,IAAIhB,KAAK,KAAKJ,KAAK,CAACI,KAApB,EAA2B;MACzBH,QAAQ,mBAAMD,KAAN;QAAaI;MAAb,GAAR;IACD;EACF,CAJD;;EAMA,MAAMiB,oBAAoB,GAAID,CAAD,IAA8C;IACzE,IAAIA,CAAC,CAACE,GAAF,KAAU,OAAd,EAAuB;MACrB;IACD;;IACDH,gBAAgB,CAACC,CAAD,CAAhB;EACD,CALD;;EAOA,MAAMG,gBAAgB,GAAIC,aAAD,IAA2B;IAClD,IAAI;MAAA;;MACF,MAAMC,WAAW,GAAGR,IAAI,CAACS,KAAL,CAAWF,aAAX,CAApB;MACAvB,QAAQ,CAACwB,WAAD,CAAR;MACApB,QAAQ,uBAACoB,WAAW,CAACrB,KAAb,mEAAsB,EAAtB,CAAR;IACD,CAJD,CAIE,OAAOuB,EAAP,EAAW;MACXC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCL,aAAtC,EAAqDG,EAArD;IACD;EACF,CARD;;EAUA,oBACE;IAAA,wBACE,KAAC,cAAD;MAAA,uBACE,KAAC,WAAD;QAAa,KAAK,EAAC,OAAnB;QAA2B,IAAI,EAAE,IAAjC;QAAuC,UAAU,EAAE,EAAnD;QAAA,uBACE,KAAC,KAAD;UACE,WAAW,EAAC,YADd;UAEE,KAAK,EAAEvB,KAFT;UAGE,QAAQ,EAAGgB,CAAD,IAAOf,QAAQ,CAACe,CAAC,CAACU,aAAF,CAAgB9B,KAAjB,CAH3B;UAIE,SAAS,EAAEqB,oBAJb;UAKE,MAAM,EAAEF,gBALV;UAME,UAAU,EAAE;QANd;MADF;IADF,EADF,eAaE,KAAC,UAAD;MACE,MAAM,EAAE,GADV;MAEE,QAAQ,EAAC,MAFX;MAGE,KAAK,EAAEjB,IAHT;MAIE,MAAM,EAAEqB,gBAJV;MAKE,MAAM,EAAEA,gBALV;MAME,WAAW,EAAE,KANf;MAOE,eAAe,EAAE;IAPnB,EAbF;EAAA,EADF;AAyBD"},"metadata":{},"sourceType":"module"}