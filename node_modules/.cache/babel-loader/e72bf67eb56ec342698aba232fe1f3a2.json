{"ast":null,"code":"//----------------------------------------------\n// Query\n//----------------------------------------------\nexport let GrafanaQueryType;\n\n(function (GrafanaQueryType) {\n  GrafanaQueryType[\"LiveMeasurements\"] = \"measurements\";\n  GrafanaQueryType[\"Annotations\"] = \"annotations\";\n  GrafanaQueryType[\"RandomWalk\"] = \"randomWalk\";\n  GrafanaQueryType[\"List\"] = \"list\";\n  GrafanaQueryType[\"Read\"] = \"read\";\n  GrafanaQueryType[\"Search\"] = \"search\";\n})(GrafanaQueryType || (GrafanaQueryType = {}));\n\nexport const defaultQuery = {\n  refId: 'A',\n  queryType: GrafanaQueryType.RandomWalk\n}; //----------------------------------------------\n// Annotations\n//----------------------------------------------\n\nexport let GrafanaAnnotationType;\n\n(function (GrafanaAnnotationType) {\n  GrafanaAnnotationType[\"Dashboard\"] = \"dashboard\";\n  GrafanaAnnotationType[\"Tags\"] = \"tags\";\n})(GrafanaAnnotationType || (GrafanaAnnotationType = {}));","map":{"version":3,"names":["GrafanaQueryType","defaultQuery","refId","queryType","RandomWalk","GrafanaAnnotationType"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana/types.ts"],"sourcesContent":["import { DataQuery } from '@grafana/data';\nimport { LiveDataFilter } from '@grafana/runtime';\nimport { SearchQuery } from 'app/features/search/service';\n\n//----------------------------------------------\n// Query\n//----------------------------------------------\n\nexport enum GrafanaQueryType {\n  LiveMeasurements = 'measurements',\n  Annotations = 'annotations',\n\n  // backend\n  RandomWalk = 'randomWalk',\n  List = 'list',\n  Read = 'read',\n  Search = 'search',\n}\n\nexport interface GrafanaQuery extends DataQuery {\n  queryType: GrafanaQueryType; // RandomWalk by default\n  channel?: string;\n  filter?: LiveDataFilter;\n  buffer?: number;\n  path?: string; // for list and read\n  search?: SearchQuery;\n}\n\nexport const defaultQuery: GrafanaQuery = {\n  refId: 'A',\n  queryType: GrafanaQueryType.RandomWalk,\n};\n\n//----------------------------------------------\n// Annotations\n//----------------------------------------------\n\nexport enum GrafanaAnnotationType {\n  Dashboard = 'dashboard',\n  Tags = 'tags',\n}\n\nexport interface GrafanaAnnotationQuery extends GrafanaQuery {\n  type: GrafanaAnnotationType; // tags\n  limit: number; // 100\n  tags?: string[];\n  matchAny?: boolean; // By default Grafana only shows annotations that match all tags in the query. Enabling this returns annotations that match any of the tags in the query.\n}\n"],"mappings":"AAIA;AACA;AACA;AAEA,WAAYA,gBAAZ;;WAAYA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAoBZ,OAAO,MAAMC,YAA0B,GAAG;EACxCC,KAAK,EAAE,GADiC;EAExCC,SAAS,EAAEH,gBAAgB,CAACI;AAFY,CAAnC,C,CAKP;AACA;AACA;;AAEA,WAAYC,qBAAZ;;WAAYA,qB;EAAAA,qB;EAAAA,qB;GAAAA,qB,KAAAA,qB"},"metadata":{},"sourceType":"module"}