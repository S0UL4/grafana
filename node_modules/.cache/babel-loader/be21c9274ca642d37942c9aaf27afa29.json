{"ast":null,"code":"var _div, _div2;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { DataTransformerID, standardTransformers, stringToJsRegex } from '@grafana/data';\nimport { Field, Input } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport class RenameByRegexTransformerEditor extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleRegexChange\", e => {\n      const regex = e.currentTarget.value;\n      let isRegexValid = true;\n\n      if (regex) {\n        try {\n          if (regex) {\n            stringToJsRegex(regex);\n          }\n        } catch (e) {\n          isRegexValid = false;\n        }\n      }\n\n      this.setState(previous => Object.assign({}, previous, {\n        regex,\n        isRegexValid\n      }));\n    });\n\n    _defineProperty(this, \"handleRenameChange\", e => {\n      const renamePattern = e.currentTarget.value;\n      this.setState(previous => Object.assign({}, previous, {\n        renamePattern\n      }));\n    });\n\n    _defineProperty(this, \"handleRegexBlur\", e => {\n      const regex = e.currentTarget.value;\n      let isRegexValid = true;\n\n      try {\n        if (regex) {\n          stringToJsRegex(regex);\n        }\n      } catch (e) {\n        isRegexValid = false;\n      }\n\n      this.setState({\n        isRegexValid\n      }, () => {\n        if (isRegexValid) {\n          this.props.onChange(Object.assign({}, this.props.options, {\n            regex\n          }));\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleRenameBlur\", e => {\n      const renamePattern = e.currentTarget.value;\n      this.setState({\n        renamePattern\n      }, () => this.props.onChange(Object.assign({}, this.props.options, {\n        renamePattern\n      })));\n    });\n\n    this.state = {\n      regex: props.options.regex,\n      renamePattern: props.options.renamePattern,\n      isRegexValid: true\n    };\n  }\n\n  render() {\n    const {\n      regex,\n      renamePattern,\n      isRegexValid\n    } = this.state;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form gf-form--grow\",\n          children: [_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label width-8\",\n            children: \"Match\"\n          })), /*#__PURE__*/_jsx(Field, {\n            invalid: !isRegexValid,\n            error: !isRegexValid ? 'Invalid pattern' : undefined,\n            className: css`\n                margin-bottom: 0;\n              `,\n            children: /*#__PURE__*/_jsx(Input, {\n              placeholder: \"Regular expression pattern\",\n              value: regex || '',\n              onChange: this.handleRegexChange,\n              onBlur: this.handleRegexBlur,\n              width: 25\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form gf-form--grow\",\n          children: [_div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form-label width-8\",\n            children: \"Replace\"\n          })), /*#__PURE__*/_jsx(Field, {\n            className: css`\n                margin-bottom: 0;\n              `,\n            children: /*#__PURE__*/_jsx(Input, {\n              placeholder: \"Replacement pattern\",\n              value: renamePattern || '',\n              onChange: this.handleRenameChange,\n              onBlur: this.handleRenameBlur,\n              width: 25\n            })\n          })]\n        })\n      })]\n    });\n  }\n\n}\nexport const renameByRegexTransformRegistryItem = {\n  id: DataTransformerID.renameByRegex,\n  editor: RenameByRegexTransformerEditor,\n  transformation: standardTransformers.renameByRegexTransformer,\n  name: 'Rename by regex',\n  description: 'Renames part of the query result by using regular expression with placeholders.'\n};","map":{"version":3,"names":["css","React","DataTransformerID","standardTransformers","stringToJsRegex","Field","Input","RenameByRegexTransformerEditor","PureComponent","constructor","props","e","regex","currentTarget","value","isRegexValid","setState","previous","renamePattern","onChange","options","state","render","undefined","handleRegexChange","handleRegexBlur","handleRenameChange","handleRenameBlur","renameByRegexTransformRegistryItem","id","renameByRegex","editor","transformation","renameByRegexTransformer","name","description"],"sources":["/home/soula/grafana/public/app/features/transformers/editors/RenameByRegexTransformer.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataTransformerID,\n  standardTransformers,\n  TransformerRegistryItem,\n  TransformerUIProps,\n  stringToJsRegex,\n} from '@grafana/data';\nimport { RenameByRegexTransformerOptions } from '@grafana/data/src/transformations/transformers/renameByRegex';\nimport { Field, Input } from '@grafana/ui';\n\ninterface RenameByRegexTransformerEditorProps extends TransformerUIProps<RenameByRegexTransformerOptions> {}\n\ninterface RenameByRegexTransformerEditorState {\n  regex?: string;\n  renamePattern?: string;\n  isRegexValid?: boolean;\n}\n\nexport class RenameByRegexTransformerEditor extends React.PureComponent<\n  RenameByRegexTransformerEditorProps,\n  RenameByRegexTransformerEditorState\n> {\n  constructor(props: RenameByRegexTransformerEditorProps) {\n    super(props);\n    this.state = {\n      regex: props.options.regex,\n      renamePattern: props.options.renamePattern,\n      isRegexValid: true,\n    };\n  }\n\n  handleRegexChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const regex = e.currentTarget.value;\n    let isRegexValid = true;\n    if (regex) {\n      try {\n        if (regex) {\n          stringToJsRegex(regex);\n        }\n      } catch (e) {\n        isRegexValid = false;\n      }\n    }\n    this.setState((previous) => ({ ...previous, regex, isRegexValid }));\n  };\n\n  handleRenameChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const renamePattern = e.currentTarget.value;\n    this.setState((previous) => ({ ...previous, renamePattern }));\n  };\n\n  handleRegexBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const regex = e.currentTarget.value;\n    let isRegexValid = true;\n\n    try {\n      if (regex) {\n        stringToJsRegex(regex);\n      }\n    } catch (e) {\n      isRegexValid = false;\n    }\n\n    this.setState({ isRegexValid }, () => {\n      if (isRegexValid) {\n        this.props.onChange({ ...this.props.options, regex });\n      }\n    });\n  };\n\n  handleRenameBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    const renamePattern = e.currentTarget.value;\n    this.setState({ renamePattern }, () => this.props.onChange({ ...this.props.options, renamePattern }));\n  };\n\n  render() {\n    const { regex, renamePattern, isRegexValid } = this.state;\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label width-8\">Match</div>\n            <Field\n              invalid={!isRegexValid}\n              error={!isRegexValid ? 'Invalid pattern' : undefined}\n              className={css`\n                margin-bottom: 0;\n              `}\n            >\n              <Input\n                placeholder=\"Regular expression pattern\"\n                value={regex || ''}\n                onChange={this.handleRegexChange}\n                onBlur={this.handleRegexBlur}\n                width={25}\n              />\n            </Field>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label width-8\">Replace</div>\n            <Field\n              className={css`\n                margin-bottom: 0;\n              `}\n            >\n              <Input\n                placeholder=\"Replacement pattern\"\n                value={renamePattern || ''}\n                onChange={this.handleRenameChange}\n                onBlur={this.handleRenameBlur}\n                width={25}\n              />\n            </Field>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const renameByRegexTransformRegistryItem: TransformerRegistryItem<RenameByRegexTransformerOptions> = {\n  id: DataTransformerID.renameByRegex,\n  editor: RenameByRegexTransformerEditor,\n  transformation: standardTransformers.renameByRegexTransformer,\n  name: 'Rename by regex',\n  description: 'Renames part of the query result by using regular expression with placeholders.',\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}