{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { debounce } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { withTheme, TabbedContainer } from '@grafana/ui';\nimport { SortOrder } from 'app/core/utils/richHistory';\nimport { supportedFeatures } from '../../../core/history/richHistoryStorageProvider';\nimport { RichHistoryQueriesTab } from './RichHistoryQueriesTab';\nimport { RichHistorySettingsTab } from './RichHistorySettingsTab';\nimport { RichHistoryStarredTab } from './RichHistoryStarredTab';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport let Tabs;\n\n(function (Tabs) {\n  Tabs[\"RichHistory\"] = \"Query history\";\n  Tabs[\"Starred\"] = \"Starred\";\n  Tabs[\"Settings\"] = \"Settings\";\n})(Tabs || (Tabs = {}));\n\nexport const getSortOrderOptions = () => [{\n  label: 'Newest first',\n  value: SortOrder.Descending\n}, {\n  label: 'Oldest first',\n  value: SortOrder.Ascending\n}, {\n  label: 'Data source A-Z',\n  value: SortOrder.DatasourceAZ\n}, {\n  label: 'Data source Z-A',\n  value: SortOrder.DatasourceZA\n}].filter(option => supportedFeatures().availableFilters.includes(option.value));\n\nclass UnThemedRichHistory extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: false\n    });\n\n    _defineProperty(this, \"updateSettings\", settingsToUpdate => {\n      this.props.updateHistorySettings(Object.assign({}, this.props.richHistorySettings, settingsToUpdate));\n    });\n\n    _defineProperty(this, \"updateFilters\", filtersToUpdate => {\n      const filters = Object.assign({}, this.props.richHistorySearchFilters, filtersToUpdate, {\n        page: 1 // always load fresh results when updating filters\n\n      });\n      this.props.updateHistorySearchFilters(this.props.exploreId, filters);\n      this.loadRichHistory();\n    });\n\n    _defineProperty(this, \"clearResults\", () => {\n      this.props.clearRichHistoryResults(this.props.exploreId);\n    });\n\n    _defineProperty(this, \"loadRichHistory\", debounce(() => {\n      this.props.loadRichHistory(this.props.exploreId);\n      this.setState({\n        loading: true\n      });\n    }, 300));\n\n    _defineProperty(this, \"onChangeRetentionPeriod\", retentionPeriod => {\n      if (retentionPeriod.value !== undefined) {\n        this.updateSettings({\n          retentionPeriod: retentionPeriod.value\n        });\n      }\n    });\n\n    _defineProperty(this, \"toggleStarredTabAsFirstTab\", () => this.updateSettings({\n      starredTabAsFirstTab: !this.props.richHistorySettings.starredTabAsFirstTab\n    }));\n\n    _defineProperty(this, \"toggleActiveDatasourceOnly\", () => this.updateSettings({\n      activeDatasourceOnly: !this.props.richHistorySettings.activeDatasourceOnly\n    }));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.richHistory !== this.props.richHistory) {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    const {\n      richHistory,\n      richHistoryTotal,\n      height,\n      exploreId,\n      deleteRichHistory,\n      onClose,\n      firstTab,\n      activeDatasourceInstance\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    const QueriesTab = {\n      label: 'Query history',\n      value: Tabs.RichHistory,\n      content: /*#__PURE__*/_jsx(RichHistoryQueriesTab, {\n        queries: richHistory,\n        totalQueries: richHistoryTotal || 0,\n        loading: loading,\n        updateFilters: this.updateFilters,\n        clearRichHistoryResults: () => this.props.clearRichHistoryResults(this.props.exploreId),\n        loadMoreRichHistory: () => this.props.loadMoreRichHistory(this.props.exploreId),\n        activeDatasourceInstance: activeDatasourceInstance,\n        richHistorySettings: this.props.richHistorySettings,\n        richHistorySearchFilters: this.props.richHistorySearchFilters,\n        exploreId: exploreId,\n        height: height\n      }),\n      icon: 'history'\n    };\n    const StarredTab = {\n      label: 'Starred',\n      value: Tabs.Starred,\n      content: /*#__PURE__*/_jsx(RichHistoryStarredTab, {\n        queries: richHistory,\n        totalQueries: richHistoryTotal || 0,\n        loading: loading,\n        activeDatasourceInstance: activeDatasourceInstance,\n        updateFilters: this.updateFilters,\n        clearRichHistoryResults: () => this.props.clearRichHistoryResults(this.props.exploreId),\n        loadMoreRichHistory: () => this.props.loadMoreRichHistory(this.props.exploreId),\n        richHistorySettings: this.props.richHistorySettings,\n        richHistorySearchFilters: this.props.richHistorySearchFilters,\n        exploreId: exploreId\n      }),\n      icon: 'star'\n    };\n    const SettingsTab = {\n      label: 'Settings',\n      value: Tabs.Settings,\n      content: /*#__PURE__*/_jsx(RichHistorySettingsTab, {\n        retentionPeriod: this.props.richHistorySettings.retentionPeriod,\n        starredTabAsFirstTab: this.props.richHistorySettings.starredTabAsFirstTab,\n        activeDatasourceOnly: this.props.richHistorySettings.activeDatasourceOnly,\n        onChangeRetentionPeriod: this.onChangeRetentionPeriod,\n        toggleStarredTabAsFirstTab: this.toggleStarredTabAsFirstTab,\n        toggleactiveDatasourceOnly: this.toggleActiveDatasourceOnly,\n        deleteRichHistory: deleteRichHistory\n      }),\n      icon: 'sliders-v-alt'\n    };\n    let tabs = [QueriesTab, StarredTab, SettingsTab];\n    return /*#__PURE__*/_jsx(TabbedContainer, {\n      tabs: tabs,\n      onClose: onClose,\n      defaultTab: firstTab,\n      closeIconTooltip: \"Close query history\"\n    });\n  }\n\n}\n\nexport const RichHistory = withTheme(UnThemedRichHistory);","map":{"version":3,"names":["debounce","React","PureComponent","withTheme","TabbedContainer","SortOrder","supportedFeatures","RichHistoryQueriesTab","RichHistorySettingsTab","RichHistoryStarredTab","Tabs","getSortOrderOptions","label","value","Descending","Ascending","DatasourceAZ","DatasourceZA","filter","option","availableFilters","includes","UnThemedRichHistory","loading","settingsToUpdate","props","updateHistorySettings","richHistorySettings","filtersToUpdate","filters","richHistorySearchFilters","page","updateHistorySearchFilters","exploreId","loadRichHistory","clearRichHistoryResults","setState","retentionPeriod","undefined","updateSettings","starredTabAsFirstTab","activeDatasourceOnly","componentDidUpdate","prevProps","prevState","snapshot","richHistory","render","richHistoryTotal","height","deleteRichHistory","onClose","firstTab","activeDatasourceInstance","state","QueriesTab","RichHistory","content","updateFilters","loadMoreRichHistory","icon","StarredTab","Starred","SettingsTab","Settings","onChangeRetentionPeriod","toggleStarredTabAsFirstTab","toggleActiveDatasourceOnly","tabs"],"sources":["/home/soula/grafana/public/app/features/explore/RichHistory/RichHistory.tsx"],"sourcesContent":["import { debounce } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Themeable, withTheme, TabbedContainer, TabConfig } from '@grafana/ui';\nimport { SortOrder, RichHistorySearchFilters, RichHistorySettings } from 'app/core/utils/richHistory';\nimport { RichHistoryQuery, ExploreId } from 'app/types/explore';\n\nimport { supportedFeatures } from '../../../core/history/richHistoryStorageProvider';\n\nimport { RichHistoryQueriesTab } from './RichHistoryQueriesTab';\nimport { RichHistorySettingsTab } from './RichHistorySettingsTab';\nimport { RichHistoryStarredTab } from './RichHistoryStarredTab';\n\nexport enum Tabs {\n  RichHistory = 'Query history',\n  Starred = 'Starred',\n  Settings = 'Settings',\n}\n\nexport const getSortOrderOptions = () =>\n  [\n    { label: 'Newest first', value: SortOrder.Descending },\n    { label: 'Oldest first', value: SortOrder.Ascending },\n    { label: 'Data source A-Z', value: SortOrder.DatasourceAZ },\n    { label: 'Data source Z-A', value: SortOrder.DatasourceZA },\n  ].filter((option) => supportedFeatures().availableFilters.includes(option.value));\n\nexport interface RichHistoryProps extends Themeable {\n  richHistory: RichHistoryQuery[];\n  richHistoryTotal?: number;\n  richHistorySettings: RichHistorySettings;\n  richHistorySearchFilters?: RichHistorySearchFilters;\n  updateHistorySettings: (settings: RichHistorySettings) => void;\n  updateHistorySearchFilters: (exploreId: ExploreId, filters: RichHistorySearchFilters) => void;\n  loadRichHistory: (exploreId: ExploreId) => void;\n  loadMoreRichHistory: (exploreId: ExploreId) => void;\n  clearRichHistoryResults: (exploreId: ExploreId) => void;\n  deleteRichHistory: () => void;\n  activeDatasourceInstance: string;\n  firstTab: Tabs;\n  exploreId: ExploreId;\n  height: number;\n  onClose: () => void;\n}\n\ntype RichHistoryState = {\n  loading: boolean;\n};\n\nclass UnThemedRichHistory extends PureComponent<RichHistoryProps> {\n  state: RichHistoryState = {\n    loading: false,\n  };\n\n  updateSettings = (settingsToUpdate: Partial<RichHistorySettings>) => {\n    this.props.updateHistorySettings({ ...this.props.richHistorySettings, ...settingsToUpdate });\n  };\n\n  updateFilters = (filtersToUpdate?: Partial<RichHistorySearchFilters>) => {\n    const filters = {\n      ...this.props.richHistorySearchFilters!,\n      ...filtersToUpdate,\n      page: 1, // always load fresh results when updating filters\n    };\n    this.props.updateHistorySearchFilters(this.props.exploreId, filters);\n    this.loadRichHistory();\n  };\n\n  clearResults = () => {\n    this.props.clearRichHistoryResults(this.props.exploreId);\n  };\n\n  loadRichHistory = debounce(() => {\n    this.props.loadRichHistory(this.props.exploreId);\n    this.setState({\n      loading: true,\n    });\n  }, 300);\n\n  onChangeRetentionPeriod = (retentionPeriod: SelectableValue<number>) => {\n    if (retentionPeriod.value !== undefined) {\n      this.updateSettings({ retentionPeriod: retentionPeriod.value });\n    }\n  };\n\n  toggleStarredTabAsFirstTab = () =>\n    this.updateSettings({ starredTabAsFirstTab: !this.props.richHistorySettings.starredTabAsFirstTab });\n\n  toggleActiveDatasourceOnly = () =>\n    this.updateSettings({ activeDatasourceOnly: !this.props.richHistorySettings.activeDatasourceOnly });\n\n  componentDidUpdate(prevProps: Readonly<RichHistoryProps>, prevState: Readonly<{}>, snapshot?: any) {\n    if (prevProps.richHistory !== this.props.richHistory) {\n      this.setState({\n        loading: false,\n      });\n    }\n  }\n\n  render() {\n    const {\n      richHistory,\n      richHistoryTotal,\n      height,\n      exploreId,\n      deleteRichHistory,\n      onClose,\n      firstTab,\n      activeDatasourceInstance,\n    } = this.props;\n    const { loading } = this.state;\n\n    const QueriesTab: TabConfig = {\n      label: 'Query history',\n      value: Tabs.RichHistory,\n      content: (\n        <RichHistoryQueriesTab\n          queries={richHistory}\n          totalQueries={richHistoryTotal || 0}\n          loading={loading}\n          updateFilters={this.updateFilters}\n          clearRichHistoryResults={() => this.props.clearRichHistoryResults(this.props.exploreId)}\n          loadMoreRichHistory={() => this.props.loadMoreRichHistory(this.props.exploreId)}\n          activeDatasourceInstance={activeDatasourceInstance}\n          richHistorySettings={this.props.richHistorySettings}\n          richHistorySearchFilters={this.props.richHistorySearchFilters}\n          exploreId={exploreId}\n          height={height}\n        />\n      ),\n      icon: 'history',\n    };\n\n    const StarredTab: TabConfig = {\n      label: 'Starred',\n      value: Tabs.Starred,\n      content: (\n        <RichHistoryStarredTab\n          queries={richHistory}\n          totalQueries={richHistoryTotal || 0}\n          loading={loading}\n          activeDatasourceInstance={activeDatasourceInstance}\n          updateFilters={this.updateFilters}\n          clearRichHistoryResults={() => this.props.clearRichHistoryResults(this.props.exploreId)}\n          loadMoreRichHistory={() => this.props.loadMoreRichHistory(this.props.exploreId)}\n          richHistorySettings={this.props.richHistorySettings}\n          richHistorySearchFilters={this.props.richHistorySearchFilters}\n          exploreId={exploreId}\n        />\n      ),\n      icon: 'star',\n    };\n\n    const SettingsTab: TabConfig = {\n      label: 'Settings',\n      value: Tabs.Settings,\n      content: (\n        <RichHistorySettingsTab\n          retentionPeriod={this.props.richHistorySettings.retentionPeriod}\n          starredTabAsFirstTab={this.props.richHistorySettings.starredTabAsFirstTab}\n          activeDatasourceOnly={this.props.richHistorySettings.activeDatasourceOnly}\n          onChangeRetentionPeriod={this.onChangeRetentionPeriod}\n          toggleStarredTabAsFirstTab={this.toggleStarredTabAsFirstTab}\n          toggleactiveDatasourceOnly={this.toggleActiveDatasourceOnly}\n          deleteRichHistory={deleteRichHistory}\n        />\n      ),\n      icon: 'sliders-v-alt',\n    };\n\n    let tabs = [QueriesTab, StarredTab, SettingsTab];\n    return (\n      <TabbedContainer tabs={tabs} onClose={onClose} defaultTab={firstTab} closeIconTooltip=\"Close query history\" />\n    );\n  }\n}\n\nexport const RichHistory = withTheme(UnThemedRichHistory);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}