{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport { countBy } from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport { LinkButton, useStyles } from '@grafana/ui';\nimport { MatcherFilter } from 'app/features/alerting/unified/components/alert-groups/MatcherFilter';\nimport { AlertInstanceStateFilter } from 'app/features/alerting/unified/components/rules/AlertInstanceStateFilter';\nimport { labelsMatchMatchers, parseMatchers } from 'app/features/alerting/unified/utils/alertmanager';\nimport { createViewLink, sortAlerts } from 'app/features/alerting/unified/utils/misc';\nimport { SortOrder } from 'app/plugins/panel/alertlist/types';\nimport { mapStateWithReasonToBaseState } from 'app/types/unified-alerting-dto';\nimport { GRAFANA_RULES_SOURCE_NAME, isGrafanaRulesSource } from '../../utils/datasource';\nimport { isAlertingRule } from '../../utils/rules';\nimport { DetailsField } from '../DetailsField';\nimport { AlertInstancesTable } from './AlertInstancesTable';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ShowMoreInstances(props) {\n  const styles = useStyles(getStyles);\n  const {\n    ruleViewPageLink,\n    stats\n  } = props;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: styles.footerRow,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      children: [\"Showing \", stats.visibleItemsCount, \" out of \", stats.totalItemsCount, \" instances\"]\n    }), ruleViewPageLink && /*#__PURE__*/_jsxs(LinkButton, {\n      href: ruleViewPageLink,\n      size: \"sm\",\n      variant: \"secondary\",\n      children: [\"Show all \", stats.totalItemsCount, \" alert instances\"]\n    })]\n  });\n}\n\nexport function RuleDetailsMatchingInstances(props) {\n  const {\n    rule: {\n      promRule,\n      namespace\n    },\n    itemsDisplayLimit = Number.POSITIVE_INFINITY,\n    pagination\n  } = props;\n  const [queryString, setQueryString] = useState();\n  const [alertState, setAlertState] = useState(); // This key is used to force a rerender on the inputs when the filters are cleared\n\n  const [filterKey] = useState(Math.floor(Math.random() * 100));\n  const queryStringKey = `queryString-${filterKey}`;\n  const styles = useStyles(getStyles);\n  const stateFilterType = isGrafanaRulesSource(namespace.rulesSource) ? GRAFANA_RULES_SOURCE_NAME : 'prometheus';\n  const alerts = useMemo(() => {\n    var _promRule$alerts;\n\n    return isAlertingRule(promRule) && (_promRule$alerts = promRule.alerts) !== null && _promRule$alerts !== void 0 && _promRule$alerts.length ? filterAlerts(queryString, alertState, sortAlerts(SortOrder.Importance, promRule.alerts)) : [];\n  }, [promRule, alertState, queryString]);\n\n  if (!isAlertingRule(promRule)) {\n    return null;\n  }\n\n  const visibleInstances = alerts.slice(0, itemsDisplayLimit);\n  const countAllByState = countBy(promRule.alerts, alert => mapStateWithReasonToBaseState(alert.state));\n  const hiddenItemsCount = alerts.length - visibleInstances.length;\n  const stats = {\n    totalItemsCount: alerts.length,\n    visibleItemsCount: visibleInstances.length\n  };\n  const ruleViewPageLink = createViewLink(namespace.rulesSource, props.rule, location.pathname + location.search);\n  const footerRow = hiddenItemsCount ? /*#__PURE__*/_jsx(ShowMoreInstances, {\n    stats: stats,\n    ruleViewPageLink: ruleViewPageLink\n  }) : undefined;\n  return /*#__PURE__*/_jsxs(DetailsField, {\n    label: \"Matching instances\",\n    horizontal: true,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: cx(styles.flexRow, styles.spaceBetween),\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: styles.flexRow,\n        children: [/*#__PURE__*/_jsx(MatcherFilter, {\n          className: styles.rowChild,\n          defaultQueryString: queryString,\n          onFilterChange: value => setQueryString(value)\n        }, queryStringKey), /*#__PURE__*/_jsx(AlertInstanceStateFilter, {\n          className: styles.rowChild,\n          filterType: stateFilterType,\n          stateFilter: alertState,\n          onStateFilterChange: setAlertState,\n          itemPerStateStats: countAllByState\n        })]\n      })\n    }), /*#__PURE__*/_jsx(AlertInstancesTable, {\n      instances: visibleInstances,\n      pagination: pagination,\n      footerRow: footerRow\n    })]\n  });\n}\n\nfunction filterAlerts(alertInstanceLabel, alertInstanceState, alerts) {\n  let filteredAlerts = [...alerts];\n\n  if (alertInstanceLabel) {\n    const matchers = parseMatchers(alertInstanceLabel || '');\n    filteredAlerts = filteredAlerts.filter(({\n      labels\n    }) => labelsMatchMatchers(labels, matchers));\n  }\n\n  if (alertInstanceState) {\n    filteredAlerts = filteredAlerts.filter(alert => {\n      return mapStateWithReasonToBaseState(alert.state) === alertInstanceState;\n    });\n  }\n\n  return filteredAlerts;\n}\n\nconst getStyles = theme => {\n  return {\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n      margin-bottom: ${theme.spacing.sm};\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin-right: ${theme.spacing.sm};\n    `,\n    footerRow: css`\n      display: flex;\n      flex-direction: column;\n      gap: ${theme.spacing.sm};\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    `\n  };\n};","map":{"version":3,"names":["css","cx","countBy","React","useMemo","useState","LinkButton","useStyles","MatcherFilter","AlertInstanceStateFilter","labelsMatchMatchers","parseMatchers","createViewLink","sortAlerts","SortOrder","mapStateWithReasonToBaseState","GRAFANA_RULES_SOURCE_NAME","isGrafanaRulesSource","isAlertingRule","DetailsField","AlertInstancesTable","ShowMoreInstances","props","styles","getStyles","ruleViewPageLink","stats","footerRow","visibleItemsCount","totalItemsCount","RuleDetailsMatchingInstances","rule","promRule","namespace","itemsDisplayLimit","Number","POSITIVE_INFINITY","pagination","queryString","setQueryString","alertState","setAlertState","filterKey","Math","floor","random","queryStringKey","stateFilterType","rulesSource","alerts","length","filterAlerts","Importance","visibleInstances","slice","countAllByState","alert","state","hiddenItemsCount","location","pathname","search","undefined","flexRow","spaceBetween","rowChild","value","alertInstanceLabel","alertInstanceState","filteredAlerts","matchers","filter","labels","theme","spacing","sm"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rules/RuleDetailsMatchingInstances.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { countBy } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { LinkButton, useStyles } from '@grafana/ui';\nimport { MatcherFilter } from 'app/features/alerting/unified/components/alert-groups/MatcherFilter';\nimport {\n  AlertInstanceStateFilter,\n  InstanceStateFilter,\n} from 'app/features/alerting/unified/components/rules/AlertInstanceStateFilter';\nimport { labelsMatchMatchers, parseMatchers } from 'app/features/alerting/unified/utils/alertmanager';\nimport { createViewLink, sortAlerts } from 'app/features/alerting/unified/utils/misc';\nimport { SortOrder } from 'app/plugins/panel/alertlist/types';\nimport { Alert, CombinedRule, PaginationProps } from 'app/types/unified-alerting';\nimport { mapStateWithReasonToBaseState } from 'app/types/unified-alerting-dto';\n\nimport { GRAFANA_RULES_SOURCE_NAME, isGrafanaRulesSource } from '../../utils/datasource';\nimport { isAlertingRule } from '../../utils/rules';\nimport { DetailsField } from '../DetailsField';\n\nimport { AlertInstancesTable } from './AlertInstancesTable';\n\ninterface Props {\n  rule: CombinedRule;\n  pagination?: PaginationProps;\n  itemsDisplayLimit?: number;\n}\n\ninterface ShowMoreStats {\n  totalItemsCount: number;\n  visibleItemsCount: number;\n}\n\nfunction ShowMoreInstances(props: { ruleViewPageLink: string; stats: ShowMoreStats }) {\n  const styles = useStyles(getStyles);\n  const { ruleViewPageLink, stats } = props;\n\n  return (\n    <div className={styles.footerRow}>\n      <div>\n        Showing {stats.visibleItemsCount} out of {stats.totalItemsCount} instances\n      </div>\n      {ruleViewPageLink && (\n        <LinkButton href={ruleViewPageLink} size=\"sm\" variant=\"secondary\">\n          Show all {stats.totalItemsCount} alert instances\n        </LinkButton>\n      )}\n    </div>\n  );\n}\n\nexport function RuleDetailsMatchingInstances(props: Props): JSX.Element | null {\n  const {\n    rule: { promRule, namespace },\n    itemsDisplayLimit = Number.POSITIVE_INFINITY,\n    pagination,\n  } = props;\n\n  const [queryString, setQueryString] = useState<string>();\n  const [alertState, setAlertState] = useState<InstanceStateFilter>();\n\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const styles = useStyles(getStyles);\n\n  const stateFilterType = isGrafanaRulesSource(namespace.rulesSource) ? GRAFANA_RULES_SOURCE_NAME : 'prometheus';\n\n  const alerts = useMemo(\n    (): Alert[] =>\n      isAlertingRule(promRule) && promRule.alerts?.length\n        ? filterAlerts(queryString, alertState, sortAlerts(SortOrder.Importance, promRule.alerts))\n        : [],\n    [promRule, alertState, queryString]\n  );\n\n  if (!isAlertingRule(promRule)) {\n    return null;\n  }\n\n  const visibleInstances = alerts.slice(0, itemsDisplayLimit);\n\n  const countAllByState = countBy(promRule.alerts, (alert) => mapStateWithReasonToBaseState(alert.state));\n  const hiddenItemsCount = alerts.length - visibleInstances.length;\n\n  const stats: ShowMoreStats = {\n    totalItemsCount: alerts.length,\n    visibleItemsCount: visibleInstances.length,\n  };\n\n  const ruleViewPageLink = createViewLink(namespace.rulesSource, props.rule, location.pathname + location.search);\n\n  const footerRow = hiddenItemsCount ? (\n    <ShowMoreInstances stats={stats} ruleViewPageLink={ruleViewPageLink} />\n  ) : undefined;\n\n  return (\n    <DetailsField label=\"Matching instances\" horizontal={true}>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <MatcherFilter\n            className={styles.rowChild}\n            key={queryStringKey}\n            defaultQueryString={queryString}\n            onFilterChange={(value) => setQueryString(value)}\n          />\n          <AlertInstanceStateFilter\n            className={styles.rowChild}\n            filterType={stateFilterType}\n            stateFilter={alertState}\n            onStateFilterChange={setAlertState}\n            itemPerStateStats={countAllByState}\n          />\n        </div>\n      </div>\n\n      <AlertInstancesTable instances={visibleInstances} pagination={pagination} footerRow={footerRow} />\n    </DetailsField>\n  );\n}\n\nfunction filterAlerts(\n  alertInstanceLabel: string | undefined,\n  alertInstanceState: InstanceStateFilter | undefined,\n  alerts: Alert[]\n): Alert[] {\n  let filteredAlerts = [...alerts];\n  if (alertInstanceLabel) {\n    const matchers = parseMatchers(alertInstanceLabel || '');\n    filteredAlerts = filteredAlerts.filter(({ labels }) => labelsMatchMatchers(labels, matchers));\n  }\n  if (alertInstanceState) {\n    filteredAlerts = filteredAlerts.filter((alert) => {\n      return mapStateWithReasonToBaseState(alert.state) === alertInstanceState;\n    });\n  }\n\n  return filteredAlerts;\n}\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n      margin-bottom: ${theme.spacing.sm};\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin-right: ${theme.spacing.sm};\n    `,\n    footerRow: css`\n      display: flex;\n      flex-direction: column;\n      gap: ${theme.spacing.sm};\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    `,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}