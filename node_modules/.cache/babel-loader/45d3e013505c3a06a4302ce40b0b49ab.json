{"ast":null,"code":"import { uniqBy } from 'lodash';\nimport { useMemo } from 'react';\nexport const useGroupedAlerts = (groups, groupBy) => {\n  return useMemo(() => {\n    if (groupBy.length === 0) {\n      const emptyGroupings = groups.filter(group => Object.keys(group.labels).length === 0);\n\n      if (emptyGroupings.length > 1) {\n        // Merges multiple ungrouped grouping\n        return groups.reduce((combinedGroups, group) => {\n          if (Object.keys(group.labels).length === 0) {\n            const noGroupingGroup = combinedGroups.find(({\n              labels\n            }) => Object.keys(labels));\n\n            if (!noGroupingGroup) {\n              combinedGroups.push({\n                alerts: group.alerts,\n                labels: {},\n                receiver: {\n                  name: 'NONE'\n                }\n              });\n            } else {\n              noGroupingGroup.alerts = uniqBy([...noGroupingGroup.alerts, ...group.alerts], 'labels');\n            }\n          } else {\n            combinedGroups.push(group);\n          }\n\n          return combinedGroups;\n        }, []);\n      } else {\n        return groups;\n      }\n    }\n\n    const alerts = groups.flatMap(({\n      alerts\n    }) => alerts);\n    return alerts.reduce((groupings, alert) => {\n      const alertContainsGroupings = groupBy.every(groupByLabel => Object.keys(alert.labels).includes(groupByLabel));\n\n      if (alertContainsGroupings) {\n        const existingGrouping = groupings.find(group => {\n          return groupBy.every(groupKey => {\n            return group.labels[groupKey] === alert.labels[groupKey];\n          });\n        });\n\n        if (!existingGrouping) {\n          const labels = groupBy.reduce((acc, key) => {\n            acc = Object.assign({}, acc, {\n              [key]: alert.labels[key]\n            });\n            return acc;\n          }, {});\n          groupings.push({\n            alerts: [alert],\n            labels,\n            receiver: {\n              name: 'NONE'\n            }\n          });\n        } else {\n          existingGrouping.alerts.push(alert);\n        }\n      } else {\n        const noGroupingGroup = groupings.find(group => Object.keys(group.labels).length === 0);\n\n        if (!noGroupingGroup) {\n          groupings.push({\n            alerts: [alert],\n            labels: {},\n            receiver: {\n              name: 'NONE'\n            }\n          });\n        } else {\n          noGroupingGroup.alerts.push(alert);\n        }\n      }\n\n      return groupings;\n    }, []);\n  }, [groups, groupBy]);\n};","map":{"version":3,"names":["uniqBy","useMemo","useGroupedAlerts","groups","groupBy","length","emptyGroupings","filter","group","Object","keys","labels","reduce","combinedGroups","noGroupingGroup","find","push","alerts","receiver","name","flatMap","groupings","alert","alertContainsGroupings","every","groupByLabel","includes","existingGrouping","groupKey","acc","key"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/hooks/useGroupedAlerts.ts"],"sourcesContent":["import { uniqBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { Labels } from '@grafana/data';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nexport const useGroupedAlerts = (groups: AlertmanagerGroup[], groupBy: string[]): AlertmanagerGroup[] => {\n  return useMemo(() => {\n    if (groupBy.length === 0) {\n      const emptyGroupings = groups.filter((group) => Object.keys(group.labels).length === 0);\n      if (emptyGroupings.length > 1) {\n        // Merges multiple ungrouped grouping\n        return groups.reduce((combinedGroups, group) => {\n          if (Object.keys(group.labels).length === 0) {\n            const noGroupingGroup = combinedGroups.find(({ labels }) => Object.keys(labels));\n            if (!noGroupingGroup) {\n              combinedGroups.push({ alerts: group.alerts, labels: {}, receiver: { name: 'NONE' } });\n            } else {\n              noGroupingGroup.alerts = uniqBy([...noGroupingGroup.alerts, ...group.alerts], 'labels');\n            }\n          } else {\n            combinedGroups.push(group);\n          }\n          return combinedGroups;\n        }, [] as AlertmanagerGroup[]);\n      } else {\n        return groups;\n      }\n    }\n    const alerts = groups.flatMap(({ alerts }) => alerts);\n    return alerts.reduce((groupings, alert) => {\n      const alertContainsGroupings = groupBy.every((groupByLabel) => Object.keys(alert.labels).includes(groupByLabel));\n\n      if (alertContainsGroupings) {\n        const existingGrouping = groupings.find((group) => {\n          return groupBy.every((groupKey) => {\n            return group.labels[groupKey] === alert.labels[groupKey];\n          });\n        });\n        if (!existingGrouping) {\n          const labels = groupBy.reduce((acc, key) => {\n            acc = { ...acc, [key]: alert.labels[key] };\n            return acc;\n          }, {} as Labels);\n          groupings.push({\n            alerts: [alert],\n            labels,\n            receiver: {\n              name: 'NONE',\n            },\n          });\n        } else {\n          existingGrouping.alerts.push(alert);\n        }\n      } else {\n        const noGroupingGroup = groupings.find((group) => Object.keys(group.labels).length === 0);\n        if (!noGroupingGroup) {\n          groupings.push({ alerts: [alert], labels: {}, receiver: { name: 'NONE' } });\n        } else {\n          noGroupingGroup.alerts.push(alert);\n        }\n      }\n\n      return groupings;\n    }, [] as AlertmanagerGroup[]);\n  }, [groups, groupBy]);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}