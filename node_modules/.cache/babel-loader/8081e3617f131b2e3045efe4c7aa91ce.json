{"ast":null,"code":"import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAsyncFn } from 'react-use';\nimport { locationUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { historySrv } from './HistorySrv';\n\nconst restoreDashboard = async (version, dashboard) => {\n  return await historySrv.restoreDashboard(dashboard, version);\n};\n\nexport const useDashboardRestore = version => {\n  const dashboard = useSelector(state => state.dashboard.getModel());\n  const [state, onRestoreDashboard] = useAsyncFn(async () => await restoreDashboard(version, dashboard), []);\n  const notifyApp = useAppNotification();\n  useEffect(() => {\n    if (state.value) {\n      var _location$state;\n\n      const location = locationService.getLocation();\n      const newUrl = locationUtil.stripBaseFromUrl(state.value.url);\n      const prevState = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.routeReloadCounter;\n      locationService.replace(Object.assign({}, location, {\n        pathname: newUrl,\n        state: {\n          routeReloadCounter: prevState ? prevState + 1 : 1\n        }\n      }));\n      notifyApp.success('Dashboard restored', `Restored from version ${version}`);\n    }\n  }, [state, version, notifyApp]);\n  return {\n    state,\n    onRestoreDashboard\n  };\n};","map":{"version":3,"names":["useEffect","useSelector","useAsyncFn","locationUtil","locationService","useAppNotification","historySrv","restoreDashboard","version","dashboard","useDashboardRestore","state","getModel","onRestoreDashboard","notifyApp","value","location","getLocation","newUrl","stripBaseFromUrl","url","prevState","routeReloadCounter","replace","pathname","success"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/VersionHistory/useDashboardRestore.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAsyncFn } from 'react-use';\n\nimport { locationUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { StoreState } from 'app/types';\n\nimport { DashboardModel } from '../../state';\n\nimport { historySrv } from './HistorySrv';\n\nconst restoreDashboard = async (version: number, dashboard: DashboardModel) => {\n  return await historySrv.restoreDashboard(dashboard, version);\n};\n\nexport const useDashboardRestore = (version: number) => {\n  const dashboard = useSelector((state: StoreState) => state.dashboard.getModel());\n  const [state, onRestoreDashboard] = useAsyncFn(async () => await restoreDashboard(version, dashboard!), []);\n  const notifyApp = useAppNotification();\n\n  useEffect(() => {\n    if (state.value) {\n      const location = locationService.getLocation();\n      const newUrl = locationUtil.stripBaseFromUrl(state.value.url);\n      const prevState = (location.state as any)?.routeReloadCounter;\n      locationService.replace({\n        ...location,\n        pathname: newUrl,\n        state: { routeReloadCounter: prevState ? prevState + 1 : 1 },\n      });\n      notifyApp.success('Dashboard restored', `Restored from version ${version}`);\n    }\n  }, [state, version, notifyApp]);\n  return { state, onRestoreDashboard };\n};\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AAKA,SAASC,UAAT,QAA2B,cAA3B;;AAEA,MAAMC,gBAAgB,GAAG,OAAOC,OAAP,EAAwBC,SAAxB,KAAsD;EAC7E,OAAO,MAAMH,UAAU,CAACC,gBAAX,CAA4BE,SAA5B,EAAuCD,OAAvC,CAAb;AACD,CAFD;;AAIA,OAAO,MAAME,mBAAmB,GAAIF,OAAD,IAAqB;EACtD,MAAMC,SAAS,GAAGR,WAAW,CAAEU,KAAD,IAAuBA,KAAK,CAACF,SAAN,CAAgBG,QAAhB,EAAxB,CAA7B;EACA,MAAM,CAACD,KAAD,EAAQE,kBAAR,IAA8BX,UAAU,CAAC,YAAY,MAAMK,gBAAgB,CAACC,OAAD,EAAUC,SAAV,CAAnC,EAA0D,EAA1D,CAA9C;EACA,MAAMK,SAAS,GAAGT,kBAAkB,EAApC;EAEAL,SAAS,CAAC,MAAM;IACd,IAAIW,KAAK,CAACI,KAAV,EAAiB;MAAA;;MACf,MAAMC,QAAQ,GAAGZ,eAAe,CAACa,WAAhB,EAAjB;MACA,MAAMC,MAAM,GAAGf,YAAY,CAACgB,gBAAb,CAA8BR,KAAK,CAACI,KAAN,CAAYK,GAA1C,CAAf;MACA,MAAMC,SAAS,sBAAIL,QAAQ,CAACL,KAAb,oDAAG,gBAAyBW,kBAA3C;MACAlB,eAAe,CAACmB,OAAhB,mBACKP,QADL;QAEEQ,QAAQ,EAAEN,MAFZ;QAGEP,KAAK,EAAE;UAAEW,kBAAkB,EAAED,SAAS,GAAGA,SAAS,GAAG,CAAf,GAAmB;QAAlD;MAHT;MAKAP,SAAS,CAACW,OAAV,CAAkB,oBAAlB,EAAyC,yBAAwBjB,OAAQ,EAAzE;IACD;EACF,CAZQ,EAYN,CAACG,KAAD,EAAQH,OAAR,EAAiBM,SAAjB,CAZM,CAAT;EAaA,OAAO;IAAEH,KAAF;IAASE;EAAT,CAAP;AACD,CAnBM"},"metadata":{},"sourceType":"module"}