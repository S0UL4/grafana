{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Based on work https://github.com/mohsen1/json-formatter-js\n// License MIT, Copyright (c) 2015 Mohsen Azimi\nimport { isNumber } from 'lodash';\nimport { isObject, getObjectName, getType, getValuePreview, cssClass, createElement } from './helpers';\nconst DATE_STRING_REGEX = /(^\\d{1,4}[\\.|\\\\/|-]\\d{1,2}[\\.|\\\\/|-]\\d{1,4})(\\s*(?:0?[1-9]:[0-5]|1(?=[012])\\d:[0-5])\\d\\s*[ap]m)?$/;\nconst PARTIAL_DATE_REGEX = /\\d{2}:\\d{2}:\\d{2} GMT-\\d{4}/;\nconst JSON_DATE_REGEX = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/; // When toggling, don't animated removal or addition of more than a few items\n\nconst MAX_ANIMATED_TOGGLE_ITEMS = 10;\n\nconst requestAnimationFrame = typeof window !== 'undefined' && window.requestAnimationFrame || (cb => {\n  cb();\n  return 0;\n});\n\nconst _defaultConfig = {\n  animateOpen: true,\n  animateClose: true\n};\n/**\n * @class JsonExplorer\n *\n * JsonExplorer allows you to render JSON objects in HTML with a\n * **collapsible** navigation.\n */\n\nexport class JsonExplorer {\n  // Hold the open state after the toggler is used\n  // A reference to the element that we render to\n\n  /**\n   * @param {object} json The JSON object you want to render. It has to be an\n   * object or array. Do NOT pass raw JSON string.\n   *\n   * @param {number} [open=1] his number indicates up to how many levels the\n   * rendered tree should expand. Set it to `0` to make the whole tree collapsed\n   * or set it to `Infinity` to expand the tree deeply\n   *\n   * @param {object} [config=defaultConfig] -\n   *  defaultConfig = {\n   *   hoverPreviewEnabled: false,\n   *   hoverPreviewArrayCount: 100,\n   *   hoverPreviewFieldCount: 5\n   * }\n   *\n   * Available configurations:\n   *  #####Hover Preview\n   * * `hoverPreviewEnabled`:  enable preview on hover\n   * * `hoverPreviewArrayCount`: number of array items to show in preview Any\n   *    array larger than this number will be shown as `Array[XXX]` where `XXX`\n   *    is length of the array.\n   * * `hoverPreviewFieldCount`: number of object properties to show for object\n   *   preview. Any object with more properties that thin number will be\n   *   truncated.\n   *\n   * @param {string} [key=undefined] The key that this object in it's parent\n   * context\n   */\n  constructor(json, open = 1, config = _defaultConfig, key) {\n    _defineProperty(this, \"_isOpen\", null);\n\n    _defineProperty(this, \"element\", null);\n\n    _defineProperty(this, \"skipChildren\", false);\n\n    this.json = json;\n    this.open = open;\n    this.config = config;\n    this.key = key;\n  }\n  /*\n   * is formatter open?\n   */\n\n\n  get isOpen() {\n    if (this._isOpen !== null) {\n      return this._isOpen;\n    } else {\n      return this.open > 0;\n    }\n  }\n  /*\n   * set open state (from toggler)\n   */\n\n\n  set isOpen(value) {\n    this._isOpen = value;\n  }\n  /*\n   * is this a date string?\n   */\n\n\n  get isDate() {\n    return this.type === 'string' && (DATE_STRING_REGEX.test(this.json) || JSON_DATE_REGEX.test(this.json) || PARTIAL_DATE_REGEX.test(this.json));\n  }\n  /*\n   * is this a URL string?\n   */\n\n\n  get isUrl() {\n    return this.type === 'string' && this.json.indexOf('http') === 0;\n  }\n  /*\n   * is this an array?\n   */\n\n\n  get isArray() {\n    return Array.isArray(this.json);\n  }\n  /*\n   * is this an object?\n   * Note: In this context arrays are object as well\n   */\n\n\n  get isObject() {\n    return isObject(this.json);\n  }\n  /*\n   * is this an empty object with no properties?\n   */\n\n\n  get isEmptyObject() {\n    return !this.keys.length && !this.isArray;\n  }\n  /*\n   * is this an empty object or array?\n   */\n\n\n  get isEmpty() {\n    return this.isEmptyObject || this.keys && !this.keys.length && this.isArray;\n  }\n  /*\n   * did we receive a key argument?\n   * This means that the formatter was called as a sub formatter of a parent formatter\n   */\n\n\n  get hasKey() {\n    return typeof this.key !== 'undefined';\n  }\n  /*\n   * if this is an object, get constructor function name\n   */\n\n\n  get constructorName() {\n    return getObjectName(this.json);\n  }\n  /*\n   * get type of this value\n   * Possible values: all JavaScript primitive types plus \"array\" and \"null\"\n   */\n\n\n  get type() {\n    return getType(this.json);\n  }\n  /*\n   * get object keys\n   * If there is an empty key we pad it wit quotes to make it visible\n   */\n\n\n  get keys() {\n    if (this.isObject) {\n      return Object.keys(this.json).map(key => key ? key : '\"\"');\n    } else {\n      return [];\n    }\n  }\n  /**\n   * Toggles `isOpen` state\n   *\n   */\n\n\n  toggleOpen() {\n    this.isOpen = !this.isOpen;\n\n    if (this.element) {\n      if (this.isOpen) {\n        this.appendChildren(this.config.animateOpen);\n      } else {\n        this.removeChildren(this.config.animateClose);\n      }\n\n      this.element.classList.toggle(cssClass('open'));\n    }\n  }\n  /**\n   * Open all children up to a certain depth.\n   * Allows actions such as expand all/collapse all\n   *\n   */\n\n\n  openAtDepth(depth = 1) {\n    if (depth < 0) {\n      return;\n    }\n\n    this.open = depth;\n    this.isOpen = depth !== 0;\n\n    if (this.element) {\n      this.removeChildren(false);\n\n      if (depth === 0) {\n        this.element.classList.remove(cssClass('open'));\n      } else {\n        this.appendChildren(this.config.animateOpen);\n        this.element.classList.add(cssClass('open'));\n      }\n    }\n  }\n\n  isNumberArray() {\n    return this.json.length > 0 && this.json.length < 4 && (isNumber(this.json[0]) || isNumber(this.json[1]));\n  }\n\n  renderArray() {\n    const arrayWrapperSpan = createElement('span');\n    arrayWrapperSpan.appendChild(createElement('span', 'bracket', '[')); // some pretty handling of number arrays\n\n    if (this.isNumberArray()) {\n      this.json.forEach((val, index) => {\n        if (index > 0) {\n          arrayWrapperSpan.appendChild(createElement('span', 'array-comma', ','));\n        }\n\n        arrayWrapperSpan.appendChild(createElement('span', 'number', val));\n      });\n      this.skipChildren = true;\n    } else {\n      arrayWrapperSpan.appendChild(createElement('span', 'number', this.json.length));\n    }\n\n    arrayWrapperSpan.appendChild(createElement('span', 'bracket', ']'));\n    return arrayWrapperSpan;\n  }\n  /**\n   * Renders an HTML element and installs event listeners\n   *\n   * @returns {HTMLDivElement}\n   */\n\n\n  render(skipRoot = false) {\n    // construct the root element and assign it to this.element\n    this.element = createElement('div', 'row'); // construct the toggler link\n\n    const togglerLink = createElement('a', 'toggler-link');\n    const togglerIcon = createElement('span', 'toggler'); // if this is an object we need a wrapper span (toggler)\n\n    if (this.isObject) {\n      togglerLink.appendChild(togglerIcon);\n    } // if this is child of a parent formatter we need to append the key\n\n\n    if (this.hasKey) {\n      togglerLink.appendChild(createElement('span', 'key', `${this.key}:`));\n    } // Value for objects and arrays\n\n\n    if (this.isObject) {\n      // construct the value holder element\n      const value = createElement('span', 'value'); // we need a wrapper span for objects\n\n      const objectWrapperSpan = createElement('span'); // get constructor name and append it to wrapper span\n\n      const constructorName = createElement('span', 'constructor-name', this.constructorName);\n      objectWrapperSpan.appendChild(constructorName); // if it's an array append the array specific elements like brackets and length\n\n      if (this.isArray) {\n        const arrayWrapperSpan = this.renderArray();\n        objectWrapperSpan.appendChild(arrayWrapperSpan);\n      } // append object wrapper span to toggler link\n\n\n      value.appendChild(objectWrapperSpan);\n      togglerLink.appendChild(value); // Primitive values\n    } else {\n      // make a value holder element\n      const value = this.isUrl ? createElement('a') : createElement('span'); // add type and other type related CSS classes\n\n      value.classList.add(cssClass(this.type));\n\n      if (this.isDate) {\n        value.classList.add(cssClass('date'));\n      }\n\n      if (this.isUrl) {\n        value.classList.add(cssClass('url'));\n        value.setAttribute('href', this.json);\n      } // Append value content to value element\n\n\n      const valuePreview = getValuePreview(this.json, this.json);\n      value.appendChild(document.createTextNode(valuePreview)); // append the value element to toggler link\n\n      togglerLink.appendChild(value);\n    } // construct a children element\n\n\n    const children = createElement('div', 'children'); // set CSS classes for children\n\n    if (this.isObject) {\n      children.classList.add(cssClass('object'));\n    }\n\n    if (this.isArray) {\n      children.classList.add(cssClass('array'));\n    }\n\n    if (this.isEmpty) {\n      children.classList.add(cssClass('empty'));\n    } // set CSS classes for root element\n\n\n    if (this.config && this.config.theme) {\n      this.element.classList.add(cssClass(this.config.theme));\n    }\n\n    if (this.isOpen) {\n      this.element.classList.add(cssClass('open'));\n    } // append toggler and children elements to root element\n\n\n    if (!skipRoot) {\n      this.element.appendChild(togglerLink);\n    }\n\n    if (!this.skipChildren) {\n      this.element.appendChild(children);\n    } else {\n      // remove togglerIcon\n      togglerLink.removeChild(togglerIcon);\n    } // if formatter is set to be open call appendChildren\n\n\n    if (this.isObject && this.isOpen) {\n      this.appendChildren();\n    } // add event listener for toggling\n\n\n    if (this.isObject) {\n      togglerLink.addEventListener('click', this.toggleOpen.bind(this));\n    }\n\n    return this.element;\n  }\n  /**\n   * Appends all the children to children element\n   * Animated option is used when user triggers this via a click\n   */\n\n\n  appendChildren(animated = false) {\n    const children = this.element && this.element.querySelector(`div.${cssClass('children')}`);\n\n    if (!children || this.isEmpty) {\n      return;\n    }\n\n    if (animated) {\n      let index = 0;\n\n      const addAChild = () => {\n        const key = this.keys[index];\n        const formatter = new JsonExplorer(this.json[key], this.open - 1, this.config, key);\n        children.appendChild(formatter.render());\n        index += 1;\n\n        if (index < this.keys.length) {\n          if (index > MAX_ANIMATED_TOGGLE_ITEMS) {\n            addAChild();\n          } else {\n            requestAnimationFrame(addAChild);\n          }\n        }\n      };\n\n      requestAnimationFrame(addAChild);\n    } else {\n      this.keys.forEach(key => {\n        const formatter = new JsonExplorer(this.json[key], this.open - 1, this.config, key);\n        children.appendChild(formatter.render());\n      });\n    }\n  }\n  /**\n   * Removes all the children from children element\n   * Animated option is used when user triggers this via a click\n   */\n\n\n  removeChildren(animated = false) {\n    const childrenElement = this.element && this.element.querySelector(`div.${cssClass('children')}`);\n\n    if (animated) {\n      let childrenRemoved = 0;\n\n      const removeAChild = () => {\n        if (childrenElement && childrenElement.children.length) {\n          childrenElement.removeChild(childrenElement.children[0]);\n          childrenRemoved += 1;\n\n          if (childrenRemoved > MAX_ANIMATED_TOGGLE_ITEMS) {\n            removeAChild();\n          } else {\n            requestAnimationFrame(removeAChild);\n          }\n        }\n      };\n\n      requestAnimationFrame(removeAChild);\n    } else {\n      if (childrenElement) {\n        childrenElement.innerHTML = '';\n      }\n    }\n  }\n\n}","map":{"version":3,"names":["isNumber","isObject","getObjectName","getType","getValuePreview","cssClass","createElement","DATE_STRING_REGEX","PARTIAL_DATE_REGEX","JSON_DATE_REGEX","MAX_ANIMATED_TOGGLE_ITEMS","requestAnimationFrame","window","cb","_defaultConfig","animateOpen","animateClose","JsonExplorer","constructor","json","open","config","key","isOpen","_isOpen","value","isDate","type","test","isUrl","indexOf","isArray","Array","isEmptyObject","keys","length","isEmpty","hasKey","constructorName","Object","map","toggleOpen","element","appendChildren","removeChildren","classList","toggle","openAtDepth","depth","remove","add","isNumberArray","renderArray","arrayWrapperSpan","appendChild","forEach","val","index","skipChildren","render","skipRoot","togglerLink","togglerIcon","objectWrapperSpan","setAttribute","valuePreview","document","createTextNode","children","theme","removeChild","addEventListener","bind","animated","querySelector","addAChild","formatter","childrenElement","childrenRemoved","removeAChild","innerHTML"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/JSONFormatter/json_explorer/json_explorer.ts"],"sourcesContent":["// Based on work https://github.com/mohsen1/json-formatter-js\n// License MIT, Copyright (c) 2015 Mohsen Azimi\n\nimport { isNumber } from 'lodash';\n\nimport { isObject, getObjectName, getType, getValuePreview, cssClass, createElement } from './helpers';\n\nconst DATE_STRING_REGEX =\n  /(^\\d{1,4}[\\.|\\\\/|-]\\d{1,2}[\\.|\\\\/|-]\\d{1,4})(\\s*(?:0?[1-9]:[0-5]|1(?=[012])\\d:[0-5])\\d\\s*[ap]m)?$/;\nconst PARTIAL_DATE_REGEX = /\\d{2}:\\d{2}:\\d{2} GMT-\\d{4}/;\nconst JSON_DATE_REGEX = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/;\n\n// When toggling, don't animated removal or addition of more than a few items\nconst MAX_ANIMATED_TOGGLE_ITEMS = 10;\n\nconst requestAnimationFrame =\n  (typeof window !== 'undefined' && window.requestAnimationFrame) ||\n  ((cb: () => void) => {\n    cb();\n    return 0;\n  });\n\nexport interface JsonExplorerConfig {\n  animateOpen?: boolean;\n  animateClose?: boolean;\n  theme?: string;\n}\n\nconst _defaultConfig: JsonExplorerConfig = {\n  animateOpen: true,\n  animateClose: true,\n};\n\n/**\n * @class JsonExplorer\n *\n * JsonExplorer allows you to render JSON objects in HTML with a\n * **collapsible** navigation.\n */\nexport class JsonExplorer {\n  // Hold the open state after the toggler is used\n  private _isOpen: boolean | null = null;\n\n  // A reference to the element that we render to\n  private element: Element | null = null;\n\n  private skipChildren = false;\n\n  /**\n   * @param {object} json The JSON object you want to render. It has to be an\n   * object or array. Do NOT pass raw JSON string.\n   *\n   * @param {number} [open=1] his number indicates up to how many levels the\n   * rendered tree should expand. Set it to `0` to make the whole tree collapsed\n   * or set it to `Infinity` to expand the tree deeply\n   *\n   * @param {object} [config=defaultConfig] -\n   *  defaultConfig = {\n   *   hoverPreviewEnabled: false,\n   *   hoverPreviewArrayCount: 100,\n   *   hoverPreviewFieldCount: 5\n   * }\n   *\n   * Available configurations:\n   *  #####Hover Preview\n   * * `hoverPreviewEnabled`:  enable preview on hover\n   * * `hoverPreviewArrayCount`: number of array items to show in preview Any\n   *    array larger than this number will be shown as `Array[XXX]` where `XXX`\n   *    is length of the array.\n   * * `hoverPreviewFieldCount`: number of object properties to show for object\n   *   preview. Any object with more properties that thin number will be\n   *   truncated.\n   *\n   * @param {string} [key=undefined] The key that this object in it's parent\n   * context\n   */\n  constructor(\n    public json: any,\n    private open = 1,\n    private config: JsonExplorerConfig = _defaultConfig,\n    private key?: string\n  ) {}\n\n  /*\n   * is formatter open?\n   */\n  private get isOpen(): boolean {\n    if (this._isOpen !== null) {\n      return this._isOpen;\n    } else {\n      return this.open > 0;\n    }\n  }\n\n  /*\n   * set open state (from toggler)\n   */\n  private set isOpen(value: boolean) {\n    this._isOpen = value;\n  }\n\n  /*\n   * is this a date string?\n   */\n  private get isDate(): boolean {\n    return (\n      this.type === 'string' &&\n      (DATE_STRING_REGEX.test(this.json) || JSON_DATE_REGEX.test(this.json) || PARTIAL_DATE_REGEX.test(this.json))\n    );\n  }\n\n  /*\n   * is this a URL string?\n   */\n  private get isUrl(): boolean {\n    return this.type === 'string' && this.json.indexOf('http') === 0;\n  }\n\n  /*\n   * is this an array?\n   */\n  private get isArray(): boolean {\n    return Array.isArray(this.json);\n  }\n\n  /*\n   * is this an object?\n   * Note: In this context arrays are object as well\n   */\n  private get isObject(): boolean {\n    return isObject(this.json);\n  }\n\n  /*\n   * is this an empty object with no properties?\n   */\n  private get isEmptyObject(): boolean {\n    return !this.keys.length && !this.isArray;\n  }\n\n  /*\n   * is this an empty object or array?\n   */\n  private get isEmpty(): boolean {\n    return this.isEmptyObject || (this.keys && !this.keys.length && this.isArray);\n  }\n\n  /*\n   * did we receive a key argument?\n   * This means that the formatter was called as a sub formatter of a parent formatter\n   */\n  private get hasKey(): boolean {\n    return typeof this.key !== 'undefined';\n  }\n\n  /*\n   * if this is an object, get constructor function name\n   */\n  private get constructorName(): string {\n    return getObjectName(this.json);\n  }\n\n  /*\n   * get type of this value\n   * Possible values: all JavaScript primitive types plus \"array\" and \"null\"\n   */\n  private get type(): string {\n    return getType(this.json);\n  }\n\n  /*\n   * get object keys\n   * If there is an empty key we pad it wit quotes to make it visible\n   */\n  private get keys(): string[] {\n    if (this.isObject) {\n      return Object.keys(this.json).map((key) => (key ? key : '\"\"'));\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Toggles `isOpen` state\n   *\n   */\n  toggleOpen() {\n    this.isOpen = !this.isOpen;\n\n    if (this.element) {\n      if (this.isOpen) {\n        this.appendChildren(this.config.animateOpen);\n      } else {\n        this.removeChildren(this.config.animateClose);\n      }\n      this.element.classList.toggle(cssClass('open'));\n    }\n  }\n\n  /**\n   * Open all children up to a certain depth.\n   * Allows actions such as expand all/collapse all\n   *\n   */\n  openAtDepth(depth = 1) {\n    if (depth < 0) {\n      return;\n    }\n\n    this.open = depth;\n    this.isOpen = depth !== 0;\n\n    if (this.element) {\n      this.removeChildren(false);\n\n      if (depth === 0) {\n        this.element.classList.remove(cssClass('open'));\n      } else {\n        this.appendChildren(this.config.animateOpen);\n        this.element.classList.add(cssClass('open'));\n      }\n    }\n  }\n\n  isNumberArray() {\n    return this.json.length > 0 && this.json.length < 4 && (isNumber(this.json[0]) || isNumber(this.json[1]));\n  }\n\n  renderArray() {\n    const arrayWrapperSpan = createElement('span');\n    arrayWrapperSpan.appendChild(createElement('span', 'bracket', '['));\n\n    // some pretty handling of number arrays\n    if (this.isNumberArray()) {\n      this.json.forEach((val: any, index: number) => {\n        if (index > 0) {\n          arrayWrapperSpan.appendChild(createElement('span', 'array-comma', ','));\n        }\n        arrayWrapperSpan.appendChild(createElement('span', 'number', val));\n      });\n      this.skipChildren = true;\n    } else {\n      arrayWrapperSpan.appendChild(createElement('span', 'number', this.json.length));\n    }\n\n    arrayWrapperSpan.appendChild(createElement('span', 'bracket', ']'));\n    return arrayWrapperSpan;\n  }\n\n  /**\n   * Renders an HTML element and installs event listeners\n   *\n   * @returns {HTMLDivElement}\n   */\n  render(skipRoot = false): HTMLDivElement {\n    // construct the root element and assign it to this.element\n    this.element = createElement('div', 'row');\n\n    // construct the toggler link\n    const togglerLink = createElement('a', 'toggler-link');\n    const togglerIcon = createElement('span', 'toggler');\n\n    // if this is an object we need a wrapper span (toggler)\n    if (this.isObject) {\n      togglerLink.appendChild(togglerIcon);\n    }\n\n    // if this is child of a parent formatter we need to append the key\n    if (this.hasKey) {\n      togglerLink.appendChild(createElement('span', 'key', `${this.key}:`));\n    }\n\n    // Value for objects and arrays\n    if (this.isObject) {\n      // construct the value holder element\n      const value = createElement('span', 'value');\n\n      // we need a wrapper span for objects\n      const objectWrapperSpan = createElement('span');\n\n      // get constructor name and append it to wrapper span\n      const constructorName = createElement('span', 'constructor-name', this.constructorName);\n      objectWrapperSpan.appendChild(constructorName);\n\n      // if it's an array append the array specific elements like brackets and length\n      if (this.isArray) {\n        const arrayWrapperSpan = this.renderArray();\n        objectWrapperSpan.appendChild(arrayWrapperSpan);\n      }\n\n      // append object wrapper span to toggler link\n      value.appendChild(objectWrapperSpan);\n      togglerLink.appendChild(value);\n      // Primitive values\n    } else {\n      // make a value holder element\n      const value = this.isUrl ? createElement('a') : createElement('span');\n\n      // add type and other type related CSS classes\n      value.classList.add(cssClass(this.type));\n      if (this.isDate) {\n        value.classList.add(cssClass('date'));\n      }\n      if (this.isUrl) {\n        value.classList.add(cssClass('url'));\n        value.setAttribute('href', this.json);\n      }\n\n      // Append value content to value element\n      const valuePreview = getValuePreview(this.json, this.json);\n      value.appendChild(document.createTextNode(valuePreview));\n\n      // append the value element to toggler link\n      togglerLink.appendChild(value);\n    }\n\n    // construct a children element\n    const children = createElement('div', 'children');\n\n    // set CSS classes for children\n    if (this.isObject) {\n      children.classList.add(cssClass('object'));\n    }\n    if (this.isArray) {\n      children.classList.add(cssClass('array'));\n    }\n    if (this.isEmpty) {\n      children.classList.add(cssClass('empty'));\n    }\n\n    // set CSS classes for root element\n    if (this.config && this.config.theme) {\n      this.element.classList.add(cssClass(this.config.theme));\n    }\n    if (this.isOpen) {\n      this.element.classList.add(cssClass('open'));\n    }\n\n    // append toggler and children elements to root element\n    if (!skipRoot) {\n      this.element.appendChild(togglerLink);\n    }\n\n    if (!this.skipChildren) {\n      this.element.appendChild(children);\n    } else {\n      // remove togglerIcon\n      togglerLink.removeChild(togglerIcon);\n    }\n\n    // if formatter is set to be open call appendChildren\n    if (this.isObject && this.isOpen) {\n      this.appendChildren();\n    }\n\n    // add event listener for toggling\n    if (this.isObject) {\n      togglerLink.addEventListener('click', this.toggleOpen.bind(this));\n    }\n\n    return this.element as HTMLDivElement;\n  }\n\n  /**\n   * Appends all the children to children element\n   * Animated option is used when user triggers this via a click\n   */\n  appendChildren(animated = false) {\n    const children = this.element && this.element.querySelector(`div.${cssClass('children')}`);\n\n    if (!children || this.isEmpty) {\n      return;\n    }\n\n    if (animated) {\n      let index = 0;\n      const addAChild = () => {\n        const key = this.keys[index];\n        const formatter = new JsonExplorer(this.json[key], this.open - 1, this.config, key);\n        children.appendChild(formatter.render());\n\n        index += 1;\n\n        if (index < this.keys.length) {\n          if (index > MAX_ANIMATED_TOGGLE_ITEMS) {\n            addAChild();\n          } else {\n            requestAnimationFrame(addAChild);\n          }\n        }\n      };\n\n      requestAnimationFrame(addAChild);\n    } else {\n      this.keys.forEach((key) => {\n        const formatter = new JsonExplorer(this.json[key], this.open - 1, this.config, key);\n        children.appendChild(formatter.render());\n      });\n    }\n  }\n\n  /**\n   * Removes all the children from children element\n   * Animated option is used when user triggers this via a click\n   */\n  removeChildren(animated = false) {\n    const childrenElement =\n      this.element && (this.element.querySelector(`div.${cssClass('children')}`) as HTMLDivElement);\n\n    if (animated) {\n      let childrenRemoved = 0;\n      const removeAChild = () => {\n        if (childrenElement && childrenElement.children.length) {\n          childrenElement.removeChild(childrenElement.children[0]);\n          childrenRemoved += 1;\n          if (childrenRemoved > MAX_ANIMATED_TOGGLE_ITEMS) {\n            removeAChild();\n          } else {\n            requestAnimationFrame(removeAChild);\n          }\n        }\n      };\n      requestAnimationFrame(removeAChild);\n    } else {\n      if (childrenElement) {\n        childrenElement.innerHTML = '';\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}