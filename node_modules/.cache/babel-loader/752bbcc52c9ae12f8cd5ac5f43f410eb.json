{"ast":null,"code":"export const getNextRefIdChar = queries => {\n  for (let num = 0;; num++) {\n    const refId = getRefId(num);\n\n    if (!queries.some(query => query.refId === refId)) {\n      return refId;\n    }\n  }\n};\nexport function addQuery(queries, query, datasource) {\n  const q = query || {};\n  q.refId = getNextRefIdChar(queries);\n  q.hide = false;\n\n  if (!q.datasource && datasource) {\n    q.datasource = datasource;\n  }\n\n  return [...queries, q];\n}\nexport function isDataQuery(url) {\n  if (url.indexOf('api/datasources/proxy') !== -1 || url.indexOf('api/ds/query') !== -1) {\n    return true;\n  }\n\n  return false;\n}\nexport function isLocalUrl(url) {\n  return !url.match(/^http/);\n}\n\nfunction getRefId(num) {\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  if (num < letters.length) {\n    return letters[num];\n  } else {\n    return getRefId(Math.floor(num / letters.length) - 1) + letters[num % letters.length];\n  }\n}\n/**\n * Returns the input value for non empty string and undefined otherwise\n *\n * It is inadvisable to set a query param to an empty string as it will be added to the URL.\n * It is better to keep it undefined so the param won't be added to the URL at all.\n */\n\n\nexport function getQueryParamValue(value) {\n  return value || undefined;\n}","map":{"version":3,"names":["getNextRefIdChar","queries","num","refId","getRefId","some","query","addQuery","datasource","q","hide","isDataQuery","url","indexOf","isLocalUrl","match","letters","length","Math","floor","getQueryParamValue","value","undefined"],"sources":["/home/soula/grafana/public/app/core/utils/query.ts"],"sourcesContent":["import { DataQuery, DataSourceRef } from '@grafana/data';\n\nexport const getNextRefIdChar = (queries: DataQuery[]): string => {\n  for (let num = 0; ; num++) {\n    const refId = getRefId(num);\n    if (!queries.some((query) => query.refId === refId)) {\n      return refId;\n    }\n  }\n};\n\nexport function addQuery(queries: DataQuery[], query?: Partial<DataQuery>, datasource?: DataSourceRef): DataQuery[] {\n  const q = query || {};\n  q.refId = getNextRefIdChar(queries);\n  q.hide = false;\n\n  if (!q.datasource && datasource) {\n    q.datasource = datasource;\n  }\n\n  return [...queries, q as DataQuery];\n}\n\nexport function isDataQuery(url: string): boolean {\n  if (url.indexOf('api/datasources/proxy') !== -1 || url.indexOf('api/ds/query') !== -1) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function isLocalUrl(url: string) {\n  return !url.match(/^http/);\n}\n\nfunction getRefId(num: number): string {\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n  if (num < letters.length) {\n    return letters[num];\n  } else {\n    return getRefId(Math.floor(num / letters.length) - 1) + letters[num % letters.length];\n  }\n}\n\n/**\n * Returns the input value for non empty string and undefined otherwise\n *\n * It is inadvisable to set a query param to an empty string as it will be added to the URL.\n * It is better to keep it undefined so the param won't be added to the URL at all.\n */\nexport function getQueryParamValue(value: string | undefined | null): string | undefined {\n  return value || undefined;\n}\n"],"mappings":"AAEA,OAAO,MAAMA,gBAAgB,GAAIC,OAAD,IAAkC;EAChE,KAAK,IAAIC,GAAG,GAAG,CAAf,GAAoBA,GAAG,EAAvB,EAA2B;IACzB,MAAMC,KAAK,GAAGC,QAAQ,CAACF,GAAD,CAAtB;;IACA,IAAI,CAACD,OAAO,CAACI,IAAR,CAAcC,KAAD,IAAWA,KAAK,CAACH,KAAN,KAAgBA,KAAxC,CAAL,EAAqD;MACnD,OAAOA,KAAP;IACD;EACF;AACF,CAPM;AASP,OAAO,SAASI,QAAT,CAAkBN,OAAlB,EAAwCK,KAAxC,EAAoEE,UAApE,EAA6G;EAClH,MAAMC,CAAC,GAAGH,KAAK,IAAI,EAAnB;EACAG,CAAC,CAACN,KAAF,GAAUH,gBAAgB,CAACC,OAAD,CAA1B;EACAQ,CAAC,CAACC,IAAF,GAAS,KAAT;;EAEA,IAAI,CAACD,CAAC,CAACD,UAAH,IAAiBA,UAArB,EAAiC;IAC/BC,CAAC,CAACD,UAAF,GAAeA,UAAf;EACD;;EAED,OAAO,CAAC,GAAGP,OAAJ,EAAaQ,CAAb,CAAP;AACD;AAED,OAAO,SAASE,WAAT,CAAqBC,GAArB,EAA2C;EAChD,IAAIA,GAAG,CAACC,OAAJ,CAAY,uBAAZ,MAAyC,CAAC,CAA1C,IAA+CD,GAAG,CAACC,OAAJ,CAAY,cAAZ,MAAgC,CAAC,CAApF,EAAuF;IACrF,OAAO,IAAP;EACD;;EAED,OAAO,KAAP;AACD;AAED,OAAO,SAASC,UAAT,CAAoBF,GAApB,EAAiC;EACtC,OAAO,CAACA,GAAG,CAACG,KAAJ,CAAU,OAAV,CAAR;AACD;;AAED,SAASX,QAAT,CAAkBF,GAAlB,EAAuC;EACrC,MAAMc,OAAO,GAAG,4BAAhB;;EAEA,IAAId,GAAG,GAAGc,OAAO,CAACC,MAAlB,EAA0B;IACxB,OAAOD,OAAO,CAACd,GAAD,CAAd;EACD,CAFD,MAEO;IACL,OAAOE,QAAQ,CAACc,IAAI,CAACC,KAAL,CAAWjB,GAAG,GAAGc,OAAO,CAACC,MAAzB,IAAmC,CAApC,CAAR,GAAiDD,OAAO,CAACd,GAAG,GAAGc,OAAO,CAACC,MAAf,CAA/D;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASG,kBAAT,CAA4BC,KAA5B,EAAkF;EACvF,OAAOA,KAAK,IAAIC,SAAhB;AACD"},"metadata":{},"sourceType":"module"}