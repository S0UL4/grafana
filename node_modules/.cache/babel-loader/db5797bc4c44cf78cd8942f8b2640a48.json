{"ast":null,"code":"import React, { memo, useCallback } from 'react';\nimport { FieldMatcherID, fieldMatchers } from '@grafana/data';\nimport { Input } from '../Input/Input';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const FieldNameByRegexMatcherEditor = /*#__PURE__*/memo(props => {\n  const {\n    options,\n    onChange\n  } = props;\n  const onBlur = useCallback(e => {\n    return onChange(e.target.value);\n  }, [onChange]);\n  return /*#__PURE__*/_jsx(Input, {\n    placeholder: \"Enter regular expression\",\n    defaultValue: options,\n    onBlur: onBlur\n  });\n});\nFieldNameByRegexMatcherEditor.displayName = 'FieldNameByRegexMatcherEditor';\nexport const fieldNameByRegexMatcherItem = {\n  id: FieldMatcherID.byRegexp,\n  component: FieldNameByRegexMatcherEditor,\n  matcher: fieldMatchers.get(FieldMatcherID.byRegexp),\n  name: 'Fields with name matching regex',\n  description: 'Set properties for fields with names matching a regex',\n  optionsToLabel: options => options\n};","map":{"version":3,"names":["React","memo","useCallback","FieldMatcherID","fieldMatchers","Input","FieldNameByRegexMatcherEditor","props","options","onChange","onBlur","e","target","value","displayName","fieldNameByRegexMatcherItem","id","byRegexp","component","matcher","get","name","description","optionsToLabel"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/MatchersUI/FieldNameByRegexMatcherEditor.tsx"],"sourcesContent":["import React, { memo, useCallback } from 'react';\n\nimport { FieldMatcherID, fieldMatchers } from '@grafana/data';\n\nimport { Input } from '../Input/Input';\n\nimport { MatcherUIProps, FieldMatcherUIRegistryItem } from './types';\n\nexport const FieldNameByRegexMatcherEditor = memo<MatcherUIProps<string>>((props) => {\n  const { options, onChange } = props;\n\n  const onBlur = useCallback(\n    (e: React.FocusEvent<HTMLInputElement>) => {\n      return onChange(e.target.value);\n    },\n    [onChange]\n  );\n\n  return <Input placeholder=\"Enter regular expression\" defaultValue={options} onBlur={onBlur} />;\n});\nFieldNameByRegexMatcherEditor.displayName = 'FieldNameByRegexMatcherEditor';\n\nexport const fieldNameByRegexMatcherItem: FieldMatcherUIRegistryItem<string> = {\n  id: FieldMatcherID.byRegexp,\n  component: FieldNameByRegexMatcherEditor,\n  matcher: fieldMatchers.get(FieldMatcherID.byRegexp),\n  name: 'Fields with name matching regex',\n  description: 'Set properties for fields with names matching a regex',\n  optionsToLabel: (options) => options,\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,WAAtB,QAAyC,OAAzC;AAEA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,eAA9C;AAEA,SAASC,KAAT,QAAsB,gBAAtB;;AAIA,OAAO,MAAMC,6BAA6B,gBAAGL,IAAI,CAA0BM,KAAD,IAAW;EACnF,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAwBF,KAA9B;EAEA,MAAMG,MAAM,GAAGR,WAAW,CACvBS,CAAD,IAA2C;IACzC,OAAOF,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;EACD,CAHuB,EAIxB,CAACJ,QAAD,CAJwB,CAA1B;EAOA,oBAAO,KAAC,KAAD;IAAO,WAAW,EAAC,0BAAnB;IAA8C,YAAY,EAAED,OAA5D;IAAqE,MAAM,EAAEE;EAA7E,EAAP;AACD,CAXgD,CAA1C;AAYPJ,6BAA6B,CAACQ,WAA9B,GAA4C,+BAA5C;AAEA,OAAO,MAAMC,2BAA+D,GAAG;EAC7EC,EAAE,EAAEb,cAAc,CAACc,QAD0D;EAE7EC,SAAS,EAAEZ,6BAFkE;EAG7Ea,OAAO,EAAEf,aAAa,CAACgB,GAAd,CAAkBjB,cAAc,CAACc,QAAjC,CAHoE;EAI7EI,IAAI,EAAE,iCAJuE;EAK7EC,WAAW,EAAE,uDALgE;EAM7EC,cAAc,EAAGf,OAAD,IAAaA;AANgD,CAAxE"},"metadata":{},"sourceType":"module"}