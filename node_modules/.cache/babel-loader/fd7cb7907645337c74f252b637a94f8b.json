{"ast":null,"code":"var _FieldValidationMessa;\n\nimport { css } from '@emotion/css';\nimport React, { useCallback, useMemo } from 'react';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { DataTransformerID, standardTransformers } from '@grafana/data';\nimport { createOrderFieldsComparer } from '@grafana/data/src/transformations/transformers/order';\nimport { stylesFactory, useTheme, Input, IconButton, Icon, FieldValidationMessage } from '@grafana/ui';\nimport { useAllFieldNamesFromDataFrames } from '../utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst OrganizeFieldsTransformerEditor = props => {\n  const {\n    options,\n    input,\n    onChange\n  } = props;\n  const {\n    indexByName,\n    excludeByName,\n    renameByName\n  } = options;\n  const fieldNames = useAllFieldNamesFromDataFrames(input);\n  const orderedFieldNames = useMemo(() => orderFieldNamesByIndex(fieldNames, indexByName), [fieldNames, indexByName]);\n  const onToggleVisibility = useCallback((field, shouldExclude) => {\n    onChange(Object.assign({}, options, {\n      excludeByName: Object.assign({}, excludeByName, {\n        [field]: shouldExclude\n      })\n    }));\n  }, [onChange, options, excludeByName]);\n  const onDragEnd = useCallback(result => {\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n\n    if (startIndex === endIndex) {\n      return;\n    }\n\n    onChange(Object.assign({}, options, {\n      indexByName: reorderToIndex(fieldNames, startIndex, endIndex)\n    }));\n  }, [onChange, options, fieldNames]);\n  const onRenameField = useCallback((from, to) => {\n    onChange(Object.assign({}, options, {\n      renameByName: Object.assign({}, options.renameByName, {\n        [from]: to\n      })\n    }));\n  }, [onChange, options]); // Show warning that we only apply the first frame\n\n  if (input.length > 1) {\n    return _FieldValidationMessa || (_FieldValidationMessa = /*#__PURE__*/_jsx(FieldValidationMessage, {\n      children: \"Organize fields only works with a single frame. Consider applying a join transformation first.\"\n    }));\n  }\n\n  return /*#__PURE__*/_jsx(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsx(Droppable, {\n      droppableId: \"sortable-fields-transformer\",\n      direction: \"vertical\",\n      children: provided => /*#__PURE__*/_jsxs(\"div\", Object.assign({\n        ref: provided.innerRef\n      }, provided.droppableProps, {\n        children: [orderedFieldNames.map((fieldName, index) => {\n          return /*#__PURE__*/_jsx(DraggableFieldName, {\n            fieldName: fieldName,\n            renamedFieldName: renameByName[fieldName],\n            index: index,\n            onToggleVisibility: onToggleVisibility,\n            onRenameField: onRenameField,\n            visible: !excludeByName[fieldName]\n          }, fieldName);\n        }), provided.placeholder]\n      }))\n    })\n  });\n};\n\nOrganizeFieldsTransformerEditor.displayName = 'OrganizeFieldsTransformerEditor';\n\nconst DraggableFieldName = ({\n  fieldName,\n  renamedFieldName,\n  index,\n  visible,\n  onToggleVisibility,\n  onRenameField\n}) => {\n  const theme = useTheme();\n  const styles = getFieldNameStyles(theme);\n  return /*#__PURE__*/_jsx(Draggable, {\n    draggableId: fieldName,\n    index: index,\n    children: provided => /*#__PURE__*/_jsx(\"div\", Object.assign({\n      className: \"gf-form-inline\",\n      ref: provided.innerRef\n    }, provided.draggableProps, {\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form gf-form--grow\",\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form-label gf-form-label--justify-left width-30\",\n          children: [/*#__PURE__*/_jsx(Icon, Object.assign({\n            name: \"draggabledots\",\n            title: \"Drag and drop to reorder\",\n            size: \"lg\",\n            className: styles.draggable\n          }, provided.dragHandleProps)), /*#__PURE__*/_jsx(IconButton, {\n            className: styles.toggle,\n            size: \"md\",\n            name: visible ? 'eye' : 'eye-slash',\n            onClick: () => onToggleVisibility(fieldName, visible)\n          }), /*#__PURE__*/_jsx(\"span\", {\n            className: styles.name,\n            title: fieldName,\n            children: fieldName\n          })]\n        }), /*#__PURE__*/_jsx(Input, {\n          className: \"flex-grow-1\",\n          defaultValue: renamedFieldName || '',\n          placeholder: `Rename ${fieldName}`,\n          onBlur: event => onRenameField(fieldName, event.currentTarget.value)\n        })]\n      })\n    }))\n  });\n};\n\nDraggableFieldName.displayName = 'DraggableFieldName';\nconst getFieldNameStyles = stylesFactory(theme => ({\n  toggle: css`\n    margin: 0 8px;\n    color: ${theme.colors.textWeak};\n  `,\n  draggable: css`\n    opacity: 0.4;\n    &:hover {\n      color: ${theme.colors.textStrong};\n    }\n  `,\n  name: css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-size: ${theme.typography.size.sm};\n    font-weight: ${theme.typography.weight.semibold};\n  `\n}));\n\nconst reorderToIndex = (fieldNames, startIndex, endIndex) => {\n  const result = Array.from(fieldNames);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result.reduce((nameByIndex, fieldName, index) => {\n    nameByIndex[fieldName] = index;\n    return nameByIndex;\n  }, {});\n};\n\nconst orderFieldNamesByIndex = (fieldNames, indexByName = {}) => {\n  if (!indexByName || Object.keys(indexByName).length === 0) {\n    return fieldNames;\n  }\n\n  const comparer = createOrderFieldsComparer(indexByName);\n  return fieldNames.sort(comparer);\n};\n\nexport const organizeFieldsTransformRegistryItem = {\n  id: DataTransformerID.organize,\n  editor: OrganizeFieldsTransformerEditor,\n  transformation: standardTransformers.organizeFieldsTransformer,\n  name: 'Organize fields',\n  description: \"Allows the user to re-order, hide, or rename fields / columns. Useful when data source doesn't allow overrides for visualizing data.\"\n};","map":{"version":3,"names":["css","React","useCallback","useMemo","DragDropContext","Draggable","Droppable","DataTransformerID","standardTransformers","createOrderFieldsComparer","stylesFactory","useTheme","Input","IconButton","Icon","FieldValidationMessage","useAllFieldNamesFromDataFrames","OrganizeFieldsTransformerEditor","props","options","input","onChange","indexByName","excludeByName","renameByName","fieldNames","orderedFieldNames","orderFieldNamesByIndex","onToggleVisibility","field","shouldExclude","onDragEnd","result","destination","startIndex","source","index","endIndex","reorderToIndex","onRenameField","from","to","length","provided","innerRef","droppableProps","map","fieldName","placeholder","displayName","DraggableFieldName","renamedFieldName","visible","theme","styles","getFieldNameStyles","draggableProps","draggable","dragHandleProps","toggle","name","event","currentTarget","value","colors","textWeak","textStrong","typography","size","sm","weight","semibold","Array","removed","splice","reduce","nameByIndex","Object","keys","comparer","sort","organizeFieldsTransformRegistryItem","id","organize","editor","transformation","organizeFieldsTransformer","description"],"sources":["/home/soula/grafana/public/app/features/transformers/editors/OrganizeFieldsTransformerEditor.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback, useMemo } from 'react';\nimport { DragDropContext, Draggable, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport {\n  DataTransformerID,\n  GrafanaTheme,\n  standardTransformers,\n  TransformerRegistryItem,\n  TransformerUIProps,\n} from '@grafana/data';\nimport { createOrderFieldsComparer } from '@grafana/data/src/transformations/transformers/order';\nimport { OrganizeFieldsTransformerOptions } from '@grafana/data/src/transformations/transformers/organize';\nimport { stylesFactory, useTheme, Input, IconButton, Icon, FieldValidationMessage } from '@grafana/ui';\n\nimport { useAllFieldNamesFromDataFrames } from '../utils';\n\ninterface OrganizeFieldsTransformerEditorProps extends TransformerUIProps<OrganizeFieldsTransformerOptions> {}\n\nconst OrganizeFieldsTransformerEditor: React.FC<OrganizeFieldsTransformerEditorProps> = (props) => {\n  const { options, input, onChange } = props;\n  const { indexByName, excludeByName, renameByName } = options;\n\n  const fieldNames = useAllFieldNamesFromDataFrames(input);\n  const orderedFieldNames = useMemo(() => orderFieldNamesByIndex(fieldNames, indexByName), [fieldNames, indexByName]);\n\n  const onToggleVisibility = useCallback(\n    (field: string, shouldExclude: boolean) => {\n      onChange({\n        ...options,\n        excludeByName: {\n          ...excludeByName,\n          [field]: shouldExclude,\n        },\n      });\n    },\n    [onChange, options, excludeByName]\n  );\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      if (!result || !result.destination) {\n        return;\n      }\n\n      const startIndex = result.source.index;\n      const endIndex = result.destination.index;\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      onChange({\n        ...options,\n        indexByName: reorderToIndex(fieldNames, startIndex, endIndex),\n      });\n    },\n    [onChange, options, fieldNames]\n  );\n\n  const onRenameField = useCallback(\n    (from: string, to: string) => {\n      onChange({\n        ...options,\n        renameByName: {\n          ...options.renameByName,\n          [from]: to,\n        },\n      });\n    },\n    [onChange, options]\n  );\n\n  // Show warning that we only apply the first frame\n  if (input.length > 1) {\n    return (\n      <FieldValidationMessage>\n        Organize fields only works with a single frame. Consider applying a join transformation first.\n      </FieldValidationMessage>\n    );\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"sortable-fields-transformer\" direction=\"vertical\">\n        {(provided) => (\n          <div ref={provided.innerRef} {...provided.droppableProps}>\n            {orderedFieldNames.map((fieldName, index) => {\n              return (\n                <DraggableFieldName\n                  fieldName={fieldName}\n                  renamedFieldName={renameByName[fieldName]}\n                  index={index}\n                  onToggleVisibility={onToggleVisibility}\n                  onRenameField={onRenameField}\n                  visible={!excludeByName[fieldName]}\n                  key={fieldName}\n                />\n              );\n            })}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nOrganizeFieldsTransformerEditor.displayName = 'OrganizeFieldsTransformerEditor';\n\ninterface DraggableFieldProps {\n  fieldName: string;\n  renamedFieldName?: string;\n  index: number;\n  visible: boolean;\n  onToggleVisibility: (fieldName: string, isVisible: boolean) => void;\n  onRenameField: (from: string, to: string) => void;\n}\n\nconst DraggableFieldName: React.FC<DraggableFieldProps> = ({\n  fieldName,\n  renamedFieldName,\n  index,\n  visible,\n  onToggleVisibility,\n  onRenameField,\n}) => {\n  const theme = useTheme();\n  const styles = getFieldNameStyles(theme);\n\n  return (\n    <Draggable draggableId={fieldName} index={index}>\n      {(provided) => (\n        <div className=\"gf-form-inline\" ref={provided.innerRef} {...provided.draggableProps}>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--justify-left width-30\">\n              <Icon\n                name=\"draggabledots\"\n                title=\"Drag and drop to reorder\"\n                size=\"lg\"\n                className={styles.draggable}\n                {...provided.dragHandleProps}\n              />\n              <IconButton\n                className={styles.toggle}\n                size=\"md\"\n                name={visible ? 'eye' : 'eye-slash'}\n                onClick={() => onToggleVisibility(fieldName, visible)}\n              />\n              <span className={styles.name} title={fieldName}>\n                {fieldName}\n              </span>\n            </div>\n            <Input\n              className=\"flex-grow-1\"\n              defaultValue={renamedFieldName || ''}\n              placeholder={`Rename ${fieldName}`}\n              onBlur={(event) => onRenameField(fieldName, event.currentTarget.value)}\n            />\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nDraggableFieldName.displayName = 'DraggableFieldName';\n\nconst getFieldNameStyles = stylesFactory((theme: GrafanaTheme) => ({\n  toggle: css`\n    margin: 0 8px;\n    color: ${theme.colors.textWeak};\n  `,\n  draggable: css`\n    opacity: 0.4;\n    &:hover {\n      color: ${theme.colors.textStrong};\n    }\n  `,\n  name: css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-size: ${theme.typography.size.sm};\n    font-weight: ${theme.typography.weight.semibold};\n  `,\n}));\n\nconst reorderToIndex = (fieldNames: string[], startIndex: number, endIndex: number) => {\n  const result = Array.from(fieldNames);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result.reduce((nameByIndex, fieldName, index) => {\n    nameByIndex[fieldName] = index;\n    return nameByIndex;\n  }, {} as Record<string, number>);\n};\n\nconst orderFieldNamesByIndex = (fieldNames: string[], indexByName: Record<string, number> = {}): string[] => {\n  if (!indexByName || Object.keys(indexByName).length === 0) {\n    return fieldNames;\n  }\n  const comparer = createOrderFieldsComparer(indexByName);\n  return fieldNames.sort(comparer);\n};\n\nexport const organizeFieldsTransformRegistryItem: TransformerRegistryItem<OrganizeFieldsTransformerOptions> = {\n  id: DataTransformerID.organize,\n  editor: OrganizeFieldsTransformerEditor,\n  transformation: standardTransformers.organizeFieldsTransformer,\n  name: 'Organize fields',\n  description:\n    \"Allows the user to re-order, hide, or rename fields / columns. Useful when data source doesn't allow overrides for visualizing data.\",\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}