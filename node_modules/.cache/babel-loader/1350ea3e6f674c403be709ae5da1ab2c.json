{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { debounce, isNil } from 'lodash';\nimport React, { Component } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { AsyncSelect } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class TeamPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"debouncedSearch\", void 0);\n\n    this.state = {\n      isLoading: false\n    };\n    this.search = this.search.bind(this);\n    this.debouncedSearch = debounce(this.search, 300, {\n      leading: true,\n      trailing: true\n    });\n  }\n\n  search(query) {\n    this.setState({\n      isLoading: true\n    });\n\n    if (isNil(query)) {\n      query = '';\n    }\n\n    return getBackendSrv().get(`/api/teams/search?perpage=100&page=1&query=${query}`).then(result => {\n      const teams = result.teams.map(team => {\n        return {\n          value: team,\n          label: team.name,\n          imgUrl: team.avatarUrl\n        };\n      });\n      this.setState({\n        isLoading: false\n      });\n      return teams;\n    });\n  }\n\n  render() {\n    const {\n      onSelected,\n      className\n    } = this.props;\n    const {\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"user-picker\",\n      \"data-testid\": \"teamPicker\",\n      children: /*#__PURE__*/_jsx(AsyncSelect, {\n        isLoading: isLoading,\n        defaultOptions: true,\n        loadOptions: this.debouncedSearch,\n        onChange: onSelected,\n        className: className,\n        placeholder: \"Select a team\",\n        noOptionsMessage: \"No teams found\",\n        \"aria-label\": \"Team picker\"\n      })\n    });\n  }\n\n}","map":{"version":3,"names":["debounce","isNil","React","Component","getBackendSrv","AsyncSelect","TeamPicker","constructor","props","state","isLoading","search","bind","debouncedSearch","leading","trailing","query","setState","get","then","result","teams","map","team","value","label","name","imgUrl","avatarUrl","render","onSelected","className"],"sources":["/home/soula/grafana/public/app/core/components/Select/TeamPicker.tsx"],"sourcesContent":["import { debounce, isNil } from 'lodash';\nimport React, { Component } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { AsyncSelect } from '@grafana/ui';\nimport { Team } from 'app/types';\n\nexport interface Props {\n  onSelected: (team: SelectableValue<Team>) => void;\n  className?: string;\n}\n\nexport interface State {\n  isLoading: boolean;\n}\n\nexport class TeamPicker extends Component<Props, State> {\n  debouncedSearch: any;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { isLoading: false };\n    this.search = this.search.bind(this);\n\n    this.debouncedSearch = debounce(this.search, 300, {\n      leading: true,\n      trailing: true,\n    });\n  }\n\n  search(query?: string) {\n    this.setState({ isLoading: true });\n\n    if (isNil(query)) {\n      query = '';\n    }\n\n    return getBackendSrv()\n      .get(`/api/teams/search?perpage=100&page=1&query=${query}`)\n      .then((result: { teams: Team[] }) => {\n        const teams: Array<SelectableValue<Team>> = result.teams.map((team) => {\n          return {\n            value: team,\n            label: team.name,\n            imgUrl: team.avatarUrl,\n          };\n        });\n\n        this.setState({ isLoading: false });\n        return teams;\n      });\n  }\n\n  render() {\n    const { onSelected, className } = this.props;\n    const { isLoading } = this.state;\n    return (\n      <div className=\"user-picker\" data-testid=\"teamPicker\">\n        <AsyncSelect\n          isLoading={isLoading}\n          defaultOptions={true}\n          loadOptions={this.debouncedSearch}\n          onChange={onSelected}\n          className={className}\n          placeholder=\"Select a team\"\n          noOptionsMessage=\"No teams found\"\n          aria-label=\"Team picker\"\n        />\n      </div>\n    );\n  }\n}\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,QAAhC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAGA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAYA,OAAO,MAAMC,UAAN,SAAyBH,SAAzB,CAAiD;EAGtDI,WAAW,CAACC,KAAD,EAAe;IACxB,MAAMA,KAAN;;IADwB;;IAExB,KAAKC,KAAL,GAAa;MAAEC,SAAS,EAAE;IAAb,CAAb;IACA,KAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;IAEA,KAAKC,eAAL,GAAuBb,QAAQ,CAAC,KAAKW,MAAN,EAAc,GAAd,EAAmB;MAChDG,OAAO,EAAE,IADuC;MAEhDC,QAAQ,EAAE;IAFsC,CAAnB,CAA/B;EAID;;EAEDJ,MAAM,CAACK,KAAD,EAAiB;IACrB,KAAKC,QAAL,CAAc;MAAEP,SAAS,EAAE;IAAb,CAAd;;IAEA,IAAIT,KAAK,CAACe,KAAD,CAAT,EAAkB;MAChBA,KAAK,GAAG,EAAR;IACD;;IAED,OAAOZ,aAAa,GACjBc,GADI,CACC,8CAA6CF,KAAM,EADpD,EAEJG,IAFI,CAEEC,MAAD,IAA+B;MACnC,MAAMC,KAAmC,GAAGD,MAAM,CAACC,KAAP,CAAaC,GAAb,CAAkBC,IAAD,IAAU;QACrE,OAAO;UACLC,KAAK,EAAED,IADF;UAELE,KAAK,EAAEF,IAAI,CAACG,IAFP;UAGLC,MAAM,EAAEJ,IAAI,CAACK;QAHR,CAAP;MAKD,CAN2C,CAA5C;MAQA,KAAKX,QAAL,CAAc;QAAEP,SAAS,EAAE;MAAb,CAAd;MACA,OAAOW,KAAP;IACD,CAbI,CAAP;EAcD;;EAEDQ,MAAM,GAAG;IACP,MAAM;MAAEC,UAAF;MAAcC;IAAd,IAA4B,KAAKvB,KAAvC;IACA,MAAM;MAAEE;IAAF,IAAgB,KAAKD,KAA3B;IACA,oBACE;MAAK,SAAS,EAAC,aAAf;MAA6B,eAAY,YAAzC;MAAA,uBACE,KAAC,WAAD;QACE,SAAS,EAAEC,SADb;QAEE,cAAc,EAAE,IAFlB;QAGE,WAAW,EAAE,KAAKG,eAHpB;QAIE,QAAQ,EAAEiB,UAJZ;QAKE,SAAS,EAAEC,SALb;QAME,WAAW,EAAC,eANd;QAOE,gBAAgB,EAAC,gBAPnB;QAQE,cAAW;MARb;IADF,EADF;EAcD;;AAtDqD"},"metadata":{},"sourceType":"module"}