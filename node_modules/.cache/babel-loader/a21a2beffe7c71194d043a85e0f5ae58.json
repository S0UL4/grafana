{"ast":null,"code":"import { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, TeamPermissionLevel } from 'app/types';\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member\n};\nexport function buildNavModel(team) {\n  const navModel = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{\n      title: 'Teams',\n      url: 'org/teams'\n    }],\n    children: [// With RBAC this tab will always be available (but not always editable)\n    // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n    {\n      active: false,\n      icon: 'sliders-v-alt',\n      id: `team-settings-${team.id}`,\n      text: 'Settings',\n      url: `org/teams/edit/${team.id}/settings`\n    }]\n  }; // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n\n  if (team === loadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n    navModel.children.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`\n    });\n  }\n\n  const teamGroupSync = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`\n  };\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () => ProBadge({\n      experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge',\n      eventVariant: 'trial'\n    });\n  } // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n\n\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children.push(Object.assign({}, teamGroupSync, {\n      tabSuffix: () => ProBadge({\n        experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge'\n      })\n    }));\n  }\n\n  return navModel;\n}\nexport function getTeamLoadingNav(pageName) {\n  const main = buildNavModel(loadingTeam);\n  let node; // find active page\n\n  for (const child of main.children) {\n    if (child.id.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node\n  };\n}","map":{"version":3,"names":["featureEnabled","ProBadge","config","contextSrv","highlightTrial","AccessControlAction","TeamPermissionLevel","loadingTeam","avatarUrl","id","name","email","memberCount","permission","Member","buildNavModel","team","navModel","img","subTitle","url","text","breadcrumbs","title","children","active","icon","hasPermissionInMetadata","ActionTeamsPermissionsRead","unshift","teamGroupSync","isLoadingTeam","tabSuffix","experimentId","eventVariant","push","featureToggles","featureHighlights","getTeamLoadingNav","pageName","main","node","child","indexOf"],"sources":["/home/soula/grafana/public/app/features/teams/state/navModel.ts"],"sourcesContent":["import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      // With RBAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}