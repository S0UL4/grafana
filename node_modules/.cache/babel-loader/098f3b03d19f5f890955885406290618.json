{"ast":null,"code":"export class PostgresMetaQuery {\n  constructor(target, queryModel) {\n    this.target = target;\n    this.queryModel = queryModel;\n  }\n\n  getOperators(datatype) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8':\n        {\n          return ['=', '!=', '<', '<=', '>', '>='];\n        }\n\n      case 'text':\n      case 'varchar':\n      case 'char':\n        {\n          return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n        }\n\n      default:\n        {\n          return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n        }\n    }\n  } // quote identifier as literal to use in metadata queries\n\n\n  quoteIdentAsLiteral(value) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    // quote_ident protects hyphenated schemes\n    const query = `\nquote_ident(table_schema) IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table) {\n    let query = ''; // check for schema qualified table\n\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time':\n        {\n          query += \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n          break;\n        }\n\n      case 'metric':\n        {\n          query += \" AND data_type IN ('text','character','character varying')\";\n          break;\n        }\n\n      case 'value':\n        {\n          query += \" AND data_type IN ('bigint','integer','double precision','real','numeric')\";\n          query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n          break;\n        }\n\n      case 'group':\n        {\n          query += \" AND data_type IN ('text','character','character varying','uuid')\";\n          break;\n        }\n    }\n\n    query += ' ORDER BY column_name';\n    return query;\n  }\n\n  buildValueQuery(column) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n\n}","map":{"version":3,"names":["PostgresMetaQuery","constructor","target","queryModel","getOperators","datatype","quoteIdentAsLiteral","value","quoteLiteral","unquoteIdentifier","findMetricTable","query","buildSchemaConstraint","buildTableConstraint","table","includes","parts","split","buildTableQuery","buildColumnQuery","type","timeColumn","buildValueQuery","column","buildDatatypeQuery","buildAggregateQuery"],"sources":["/home/soula/grafana/public/app/plugins/datasource/postgres/meta_query.ts"],"sourcesContent":["import QueryModel from './postgres_query_model';\n\nexport class PostgresMetaQuery {\n  constructor(private target: { table: string; timeColumn: string }, private queryModel: QueryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    // quote_ident protects hyphenated schemes\n    const query = `\nquote_ident(table_schema) IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real','numeric')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying','uuid')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}