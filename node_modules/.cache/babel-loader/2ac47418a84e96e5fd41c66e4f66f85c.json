{"ast":null,"code":"var _Tooltip;\n\nimport { css } from '@emotion/css';\nimport React from 'react';\nimport { LoadingState } from '@grafana/data';\nimport { Icon, Tooltip, useStyles } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const PanelHeaderLoadingIndicator = ({\n  state,\n  onClick\n}) => {\n  const styles = useStyles(getStyles);\n\n  if (state === LoadingState.Loading) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"panel-loading\",\n      onClick: onClick,\n      children: _Tooltip || (_Tooltip = /*#__PURE__*/_jsx(Tooltip, {\n        content: \"Cancel query\",\n        children: /*#__PURE__*/_jsx(Icon, {\n          className: \"panel-loading__spinner spin-clockwise\",\n          name: \"sync\"\n        })\n      }))\n    });\n  }\n\n  if (state === LoadingState.Streaming) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"panel-loading\",\n      onClick: onClick,\n      children: /*#__PURE__*/_jsx(\"div\", {\n        title: \"Streaming (click to stop)\",\n        className: styles.streamIndicator\n      })\n    });\n  }\n\n  return null;\n};\n\nfunction getStyles(theme) {\n  return {\n    streamIndicator: css`\n      width: 10px;\n      height: 10px;\n      background: ${theme.colors.textFaint};\n      box-shadow: 0 0 2px ${theme.colors.textFaint};\n      border-radius: 50%;\n      position: relative;\n      top: 6px;\n      right: 1px;\n    `\n  };\n}","map":{"version":3,"names":["css","React","LoadingState","Icon","Tooltip","useStyles","PanelHeaderLoadingIndicator","state","onClick","styles","getStyles","Loading","Streaming","streamIndicator","theme","colors","textFaint"],"sources":["/home/soula/grafana/public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderLoadingIndicator.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme, LoadingState } from '@grafana/data';\nimport { Icon, Tooltip, useStyles } from '@grafana/ui';\n\ninterface Props {\n  state: LoadingState;\n  onClick: () => void;\n}\n\nexport const PanelHeaderLoadingIndicator: FC<Props> = ({ state, onClick }) => {\n  const styles = useStyles(getStyles);\n\n  if (state === LoadingState.Loading) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <Tooltip content=\"Cancel query\">\n          <Icon className=\"panel-loading__spinner spin-clockwise\" name=\"sync\" />\n        </Tooltip>\n      </div>\n    );\n  }\n\n  if (state === LoadingState.Streaming) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <div title=\"Streaming (click to stop)\" className={styles.streamIndicator} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    streamIndicator: css`\n      width: 10px;\n      height: 10px;\n      background: ${theme.colors.textFaint};\n      box-shadow: 0 0 2px ${theme.colors.textFaint};\n      border-radius: 50%;\n      position: relative;\n      top: 6px;\n      right: 1px;\n    `,\n  };\n}\n"],"mappings":";;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,OAAOC,KAAP,MAA0B,OAA1B;AAEA,SAAuBC,YAAvB,QAA2C,eAA3C;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,SAAxB,QAAyC,aAAzC;;AAOA,OAAO,MAAMC,2BAAsC,GAAG,CAAC;EAAEC,KAAF;EAASC;AAAT,CAAD,KAAwB;EAC5E,MAAMC,MAAM,GAAGJ,SAAS,CAACK,SAAD,CAAxB;;EAEA,IAAIH,KAAK,KAAKL,YAAY,CAACS,OAA3B,EAAoC;IAClC,oBACE;MAAK,SAAS,EAAC,eAAf;MAA+B,OAAO,EAAEH,OAAxC;MAAA,+CACE,KAAC,OAAD;QAAS,OAAO,EAAC,cAAjB;QAAA,uBACE,KAAC,IAAD;UAAM,SAAS,EAAC,uCAAhB;UAAwD,IAAI,EAAC;QAA7D;MADF,EADF;IAAA,EADF;EAOD;;EAED,IAAID,KAAK,KAAKL,YAAY,CAACU,SAA3B,EAAsC;IACpC,oBACE;MAAK,SAAS,EAAC,eAAf;MAA+B,OAAO,EAAEJ,OAAxC;MAAA,uBACE;QAAK,KAAK,EAAC,2BAAX;QAAuC,SAAS,EAAEC,MAAM,CAACI;MAAzD;IADF,EADF;EAKD;;EAED,OAAO,IAAP;AACD,CAtBM;;AAwBP,SAASH,SAAT,CAAmBI,KAAnB,EAAwC;EACtC,OAAO;IACLD,eAAe,EAAEb,GAAI;AACzB;AACA;AACA,oBAAoBc,KAAK,CAACC,MAAN,CAAaC,SAAU;AAC3C,4BAA4BF,KAAK,CAACC,MAAN,CAAaC,SAAU;AACnD;AACA;AACA;AACA;AACA;EAVS,CAAP;AAYD"},"metadata":{},"sourceType":"module"}