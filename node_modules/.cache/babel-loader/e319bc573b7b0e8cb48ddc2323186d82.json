{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { find, startsWith } from 'lodash';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { resourceTypeDisplayNames, supportedMetricNamespaces } from '../azureMetadata';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport TimegrainConverter from '../time_grain_converter';\nimport { AzureQueryType } from '../types';\nimport { routeNames } from '../utils/common';\nimport ResponseParser from './response_parser';\nimport UrlBuilder from './url_builder';\nconst defaultDropdownValue = 'select';\n\nfunction hasValue(item) {\n  return !!(item && item !== defaultDropdownValue);\n}\n\nexport default class AzureMonitorDatasource extends DataSourceWithBackend {\n  constructor(instanceSettings) {\n    super(instanceSettings);\n\n    _defineProperty(this, \"apiVersion\", '2018-01-01');\n\n    _defineProperty(this, \"apiPreviewVersion\", '2017-12-01-preview');\n\n    _defineProperty(this, \"listByResourceGroupApiVersion\", '2021-04-01');\n\n    _defineProperty(this, \"defaultSubscriptionId\", void 0);\n\n    _defineProperty(this, \"resourcePath\", void 0);\n\n    _defineProperty(this, \"azurePortalUrl\", void 0);\n\n    _defineProperty(this, \"timeSrv\", void 0);\n\n    this.instanceSettings = instanceSettings;\n    this.timeSrv = getTimeSrv();\n    this.defaultSubscriptionId = instanceSettings.jsonData.subscriptionId;\n    const cloud = getAzureCloud(instanceSettings);\n    this.resourcePath = routeNames.azureMonitor;\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n  }\n\n  isConfigured() {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item) {\n    var _item$azureMonitor, _item$azureMonitor2, _item$azureMonitor3, _item$azureMonitor4, _item$azureMonitor5, _item$azureMonitor6;\n\n    const hasResourceUri = !!(item !== null && item !== void 0 && (_item$azureMonitor = item.azureMonitor) !== null && _item$azureMonitor !== void 0 && _item$azureMonitor.resourceUri);\n    const hasLegacyQuery = hasValue(item === null || item === void 0 ? void 0 : (_item$azureMonitor2 = item.azureMonitor) === null || _item$azureMonitor2 === void 0 ? void 0 : _item$azureMonitor2.resourceGroup) && hasValue(item === null || item === void 0 ? void 0 : (_item$azureMonitor3 = item.azureMonitor) === null || _item$azureMonitor3 === void 0 ? void 0 : _item$azureMonitor3.resourceName) && hasValue(item === null || item === void 0 ? void 0 : (_item$azureMonitor4 = item.azureMonitor) === null || _item$azureMonitor4 === void 0 ? void 0 : _item$azureMonitor4.metricDefinition);\n    return !!(item.hide !== true && (hasResourceUri || hasLegacyQuery) && hasValue(item === null || item === void 0 ? void 0 : (_item$azureMonitor5 = item.azureMonitor) === null || _item$azureMonitor5 === void 0 ? void 0 : _item$azureMonitor5.metricName) && hasValue(item === null || item === void 0 ? void 0 : (_item$azureMonitor6 = item.azureMonitor) === null || _item$azureMonitor6 === void 0 ? void 0 : _item$azureMonitor6.aggregation));\n  }\n\n  applyTemplateVariables(target, scopedVars) {\n    var _item$dimensionFilter;\n\n    const item = target.azureMonitor;\n\n    if (!item) {\n      // return target;\n      throw new Error('Query is not a valid Azure Monitor Metrics query');\n    } // fix for timeGrainUnit which is a deprecated/removed field name\n\n\n    if (item.timeGrain && item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    const templateSrv = getTemplateSrv();\n    const resourceUri = templateSrv.replace(item.resourceUri, scopedVars);\n    const subscriptionId = templateSrv.replace(target.subscription || this.defaultSubscriptionId, scopedVars);\n    const resourceGroup = templateSrv.replace(item.resourceGroup, scopedVars);\n    const resourceName = templateSrv.replace(item.resourceName, scopedVars);\n    const metricNamespace = templateSrv.replace(item.metricNamespace, scopedVars);\n    const metricDefinition = templateSrv.replace(item.metricDefinition, scopedVars);\n    const timeGrain = templateSrv.replace((item.timeGrain || '').toString(), scopedVars);\n    const aggregation = templateSrv.replace(item.aggregation, scopedVars);\n    const top = templateSrv.replace(item.top || '', scopedVars);\n    const dimensionFilters = ((_item$dimensionFilter = item.dimensionFilters) !== null && _item$dimensionFilter !== void 0 ? _item$dimensionFilter : []).filter(f => f.dimension && f.dimension !== 'None').map(f => {\n      var _f$filters;\n\n      const filters = (_f$filters = f.filters) === null || _f$filters === void 0 ? void 0 : _f$filters.map(filter => templateSrv.replace(filter !== null && filter !== void 0 ? filter : '', scopedVars));\n      return {\n        dimension: templateSrv.replace(f.dimension, scopedVars),\n        operator: f.operator || 'eq',\n        filters: filters || []\n      };\n    });\n    return Object.assign({}, target, {\n      subscription: subscriptionId,\n      queryType: AzureQueryType.AzureMonitor,\n      azureMonitor: {\n        resourceUri,\n        resourceGroup,\n        resourceName,\n        metricDefinition,\n        timeGrain,\n        allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        metricNamespace: metricNamespace && metricNamespace !== defaultDropdownValue ? metricNamespace : metricDefinition,\n        aggregation: aggregation,\n        dimensionFilters,\n        top: top || '10',\n        alias: item.alias\n      }\n    });\n  }\n\n  async getSubscriptions() {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    return this.getResource(`${this.resourcePath}/subscriptions?api-version=2019-03-01`).then(result => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId) {\n    return this.getResource(`${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups?api-version=${this.listByResourceGroupApiVersion}`).then(result => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  getMetricDefinitions(subscriptionId, resourceGroup) {\n    return this.getResource(`${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.listByResourceGroupApiVersion}`).then(result => {\n      return ResponseParser.parseResponseValues(result, 'type', 'type');\n    }).then(result => result.filter(t => {\n      for (let i = 0; i < supportedMetricNamespaces.length; i++) {\n        if (t.value.toLowerCase() === supportedMetricNamespaces[i].toLowerCase()) {\n          return true;\n        }\n      }\n\n      return false;\n    })).then(result => {\n      let shouldHardcodeBlobStorage = false;\n\n      for (let i = 0; i < result.length; i++) {\n        if (result[i].value === 'Microsoft.Storage/storageAccounts') {\n          shouldHardcodeBlobStorage = true;\n          break;\n        }\n      }\n\n      if (shouldHardcodeBlobStorage) {\n        result.push({\n          text: 'Microsoft.Storage/storageAccounts/blobServices',\n          value: 'Microsoft.Storage/storageAccounts/blobServices'\n        });\n        result.push({\n          text: 'Microsoft.Storage/storageAccounts/fileServices',\n          value: 'Microsoft.Storage/storageAccounts/fileServices'\n        });\n        result.push({\n          text: 'Microsoft.Storage/storageAccounts/tableServices',\n          value: 'Microsoft.Storage/storageAccounts/tableServices'\n        });\n        result.push({\n          text: 'Microsoft.Storage/storageAccounts/queueServices',\n          value: 'Microsoft.Storage/storageAccounts/queueServices'\n        });\n      }\n\n      return result.map(v => ({\n        value: v.value,\n        text: resourceTypeDisplayNames[v.value.toLowerCase()] || v.value\n      }));\n    });\n  }\n\n  getResourceNames(subscriptionId, resourceGroup, metricDefinition, skipToken) {\n    const validMetricDefinition = startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/') ? 'Microsoft.Storage/storageAccounts' : metricDefinition;\n    let url = `${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups/${resourceGroup}/resources?` + `$filter=resourceType eq '${validMetricDefinition}'&` + `api-version=${this.listByResourceGroupApiVersion}`;\n\n    if (skipToken) {\n      url += `&$skiptoken=${skipToken}`;\n    }\n\n    return this.getResource(url).then(async result => {\n      let list = [];\n\n      if (startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\n        list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\n\n        for (let i = 0; i < list.length; i++) {\n          list[i].text += '/default';\n          list[i].value += '/default';\n        }\n      } else {\n        list = ResponseParser.parseResourceNames(result, metricDefinition);\n      }\n\n      if (result.nextLink) {\n        // If there is a nextLink, we should request more pages\n        const nextURL = new URL(result.nextLink);\n        const nextToken = nextURL.searchParams.get('$skiptoken');\n\n        if (!nextToken) {\n          throw Error('unable to request the next page of resources');\n        }\n\n        const nextPage = await this.getResourceNames(subscriptionId, resourceGroup, metricDefinition, nextToken);\n        list = list.concat(nextPage);\n      }\n\n      return list;\n    });\n  }\n\n  getMetricNamespaces(query) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(this.resourcePath, this.apiPreviewVersion, this.replaceTemplateVariables(query));\n    return this.getResource(url).then(result => {\n      return ResponseParser.parseResponseValues(result, 'name', 'properties.metricNamespaceName');\n    }).then(result => {\n      if (url.includes('Microsoft.Storage/storageAccounts')) {\n        const storageNamespaces = ['Microsoft.Storage/storageAccounts', 'Microsoft.Storage/storageAccounts/blobServices', 'Microsoft.Storage/storageAccounts/fileServices', 'Microsoft.Storage/storageAccounts/tableServices', 'Microsoft.Storage/storageAccounts/queueServices'];\n\n        for (const namespace of storageNamespaces) {\n          if (!find(result, ['value', namespace.toLowerCase()])) {\n            result.push({\n              value: namespace,\n              text: namespace\n            });\n          }\n        }\n      }\n\n      return result;\n    });\n  }\n\n  getMetricNames(query) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(this.resourcePath, this.apiVersion, this.replaceTemplateVariables(query));\n    return this.getResource(url).then(result => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(query) {\n    const {\n      metricName\n    } = query;\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(this.resourcePath, this.apiVersion, this.replaceTemplateVariables(query));\n    return this.getResource(url).then(result => {\n      return ResponseParser.parseMetadata(result, metricName);\n    });\n  }\n\n  validateDatasource() {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.'\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.'\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  isValidConfigField(field) {\n    return typeof field === 'string' && field.length > 0;\n  }\n\n  replaceTemplateVariables(query) {\n    const templateSrv = getTemplateSrv();\n    const workingQuery = Object.assign({}, query);\n    const keys = Object.keys(query);\n    keys.forEach(key => {\n      workingQuery[key] = templateSrv.replace(workingQuery[key]);\n    });\n    return workingQuery;\n  }\n\n}","map":{"version":3,"names":["find","startsWith","DataSourceWithBackend","getTemplateSrv","getTimeSrv","resourceTypeDisplayNames","supportedMetricNamespaces","getAuthType","getAzureCloud","getAzurePortalUrl","TimegrainConverter","AzureQueryType","routeNames","ResponseParser","UrlBuilder","defaultDropdownValue","hasValue","item","AzureMonitorDatasource","constructor","instanceSettings","timeSrv","defaultSubscriptionId","jsonData","subscriptionId","cloud","resourcePath","azureMonitor","azurePortalUrl","isConfigured","validateDatasource","filterQuery","hasResourceUri","resourceUri","hasLegacyQuery","resourceGroup","resourceName","metricDefinition","hide","metricName","aggregation","applyTemplateVariables","target","scopedVars","Error","timeGrain","timeGrainUnit","createISO8601Duration","templateSrv","replace","subscription","metricNamespace","toString","top","dimensionFilters","filter","f","dimension","map","filters","operator","queryType","AzureMonitor","allowedTimeGrainsMs","alias","getSubscriptions","getResource","then","result","parseSubscriptions","getResourceGroups","listByResourceGroupApiVersion","parseResponseValues","getMetricDefinitions","t","i","length","value","toLowerCase","shouldHardcodeBlobStorage","push","text","v","getResourceNames","skipToken","validMetricDefinition","url","list","parseResourceNames","nextLink","nextURL","URL","nextToken","searchParams","get","nextPage","concat","getMetricNamespaces","query","buildAzureMonitorGetMetricNamespacesUrl","apiPreviewVersion","replaceTemplateVariables","includes","storageNamespaces","namespace","getMetricNames","buildAzureMonitorGetMetricNamesUrl","apiVersion","getMetricMetadata","parseMetadata","authType","isValidConfigField","tenantId","status","message","clientId","undefined","field","workingQuery","keys","Object","forEach","key"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/azure_monitor/azure_monitor_datasource.ts"],"sourcesContent":["import { find, startsWith } from 'lodash';\n\nimport { DataSourceInstanceSettings, ScopedVars } from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv } from '@grafana/runtime';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { resourceTypeDisplayNames, supportedMetricNamespaces } from '../azureMetadata';\nimport { getAuthType, getAzureCloud, getAzurePortalUrl } from '../credentials';\nimport TimegrainConverter from '../time_grain_converter';\nimport {\n  AzureDataSourceJsonData,\n  AzureMonitorMetricDefinitionsResponse,\n  AzureMonitorMetricNamespacesResponse,\n  AzureMonitorMetricNamesResponse,\n  AzureMonitorMetricsMetadataResponse,\n  AzureMonitorQuery,\n  AzureMonitorResourceGroupsResponse,\n  AzureQueryType,\n  DatasourceValidationResult,\n  GetMetricNamespacesQuery,\n  GetMetricNamesQuery,\n  GetMetricMetadataQuery,\n} from '../types';\nimport { routeNames } from '../utils/common';\n\nimport ResponseParser from './response_parser';\nimport UrlBuilder from './url_builder';\n\nconst defaultDropdownValue = 'select';\n\nfunction hasValue(item?: string) {\n  return !!(item && item !== defaultDropdownValue);\n}\n\nexport default class AzureMonitorDatasource extends DataSourceWithBackend<AzureMonitorQuery, AzureDataSourceJsonData> {\n  apiVersion = '2018-01-01';\n  apiPreviewVersion = '2017-12-01-preview';\n  listByResourceGroupApiVersion = '2021-04-01';\n  defaultSubscriptionId?: string;\n  resourcePath: string;\n  azurePortalUrl: string;\n  declare resourceGroup: string;\n  declare resourceName: string;\n  timeSrv: TimeSrv;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<AzureDataSourceJsonData>) {\n    super(instanceSettings);\n\n    this.timeSrv = getTimeSrv();\n    this.defaultSubscriptionId = instanceSettings.jsonData.subscriptionId;\n\n    const cloud = getAzureCloud(instanceSettings);\n    this.resourcePath = routeNames.azureMonitor;\n    this.azurePortalUrl = getAzurePortalUrl(cloud);\n  }\n\n  isConfigured(): boolean {\n    // If validation didn't return any error then the data source is properly configured\n    return !this.validateDatasource();\n  }\n\n  filterQuery(item: AzureMonitorQuery): boolean {\n    const hasResourceUri = !!item?.azureMonitor?.resourceUri;\n    const hasLegacyQuery =\n      hasValue(item?.azureMonitor?.resourceGroup) &&\n      hasValue(item?.azureMonitor?.resourceName) &&\n      hasValue(item?.azureMonitor?.metricDefinition);\n\n    return !!(\n      item.hide !== true &&\n      (hasResourceUri || hasLegacyQuery) &&\n      hasValue(item?.azureMonitor?.metricName) &&\n      hasValue(item?.azureMonitor?.aggregation)\n    );\n  }\n\n  applyTemplateVariables(target: AzureMonitorQuery, scopedVars: ScopedVars): AzureMonitorQuery {\n    const item = target.azureMonitor;\n\n    if (!item) {\n      // return target;\n      throw new Error('Query is not a valid Azure Monitor Metrics query');\n    }\n\n    // fix for timeGrainUnit which is a deprecated/removed field name\n    if (item.timeGrain && item.timeGrainUnit && item.timeGrain !== 'auto') {\n      item.timeGrain = TimegrainConverter.createISO8601Duration(item.timeGrain, item.timeGrainUnit);\n    }\n\n    const templateSrv = getTemplateSrv();\n\n    const resourceUri = templateSrv.replace(item.resourceUri, scopedVars);\n    const subscriptionId = templateSrv.replace(target.subscription || this.defaultSubscriptionId, scopedVars);\n    const resourceGroup = templateSrv.replace(item.resourceGroup, scopedVars);\n    const resourceName = templateSrv.replace(item.resourceName, scopedVars);\n    const metricNamespace = templateSrv.replace(item.metricNamespace, scopedVars);\n    const metricDefinition = templateSrv.replace(item.metricDefinition, scopedVars);\n    const timeGrain = templateSrv.replace((item.timeGrain || '').toString(), scopedVars);\n    const aggregation = templateSrv.replace(item.aggregation, scopedVars);\n    const top = templateSrv.replace(item.top || '', scopedVars);\n\n    const dimensionFilters = (item.dimensionFilters ?? [])\n      .filter((f) => f.dimension && f.dimension !== 'None')\n      .map((f) => {\n        const filters = f.filters?.map((filter) => templateSrv.replace(filter ?? '', scopedVars));\n        return {\n          dimension: templateSrv.replace(f.dimension, scopedVars),\n          operator: f.operator || 'eq',\n          filters: filters || [],\n        };\n      });\n\n    return {\n      ...target,\n      subscription: subscriptionId,\n      queryType: AzureQueryType.AzureMonitor,\n      azureMonitor: {\n        resourceUri,\n        resourceGroup,\n        resourceName,\n        metricDefinition,\n        timeGrain,\n        allowedTimeGrainsMs: item.allowedTimeGrainsMs,\n        metricName: templateSrv.replace(item.metricName, scopedVars),\n        metricNamespace:\n          metricNamespace && metricNamespace !== defaultDropdownValue ? metricNamespace : metricDefinition,\n        aggregation: aggregation,\n        dimensionFilters,\n        top: top || '10',\n        alias: item.alias,\n      },\n    };\n  }\n\n  async getSubscriptions(): Promise<Array<{ text: string; value: string }>> {\n    if (!this.isConfigured()) {\n      return [];\n    }\n\n    return this.getResource(`${this.resourcePath}/subscriptions?api-version=2019-03-01`).then((result: any) => {\n      return ResponseParser.parseSubscriptions(result);\n    });\n  }\n\n  getResourceGroups(subscriptionId: string) {\n    return this.getResource(\n      `${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups?api-version=${this.listByResourceGroupApiVersion}`\n    ).then((result: AzureMonitorResourceGroupsResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name', 'name');\n    });\n  }\n\n  getMetricDefinitions(subscriptionId: string, resourceGroup: string) {\n    return this.getResource(\n      `${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups/${resourceGroup}/resources?api-version=${this.listByResourceGroupApiVersion}`\n    )\n      .then((result: AzureMonitorMetricDefinitionsResponse) => {\n        return ResponseParser.parseResponseValues(result, 'type', 'type');\n      })\n      .then((result) =>\n        result.filter((t) => {\n          for (let i = 0; i < supportedMetricNamespaces.length; i++) {\n            if (t.value.toLowerCase() === supportedMetricNamespaces[i].toLowerCase()) {\n              return true;\n            }\n          }\n          return false;\n        })\n      )\n      .then((result) => {\n        let shouldHardcodeBlobStorage = false;\n        for (let i = 0; i < result.length; i++) {\n          if (result[i].value === 'Microsoft.Storage/storageAccounts') {\n            shouldHardcodeBlobStorage = true;\n            break;\n          }\n        }\n\n        if (shouldHardcodeBlobStorage) {\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/blobServices',\n            value: 'Microsoft.Storage/storageAccounts/blobServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/fileServices',\n            value: 'Microsoft.Storage/storageAccounts/fileServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/tableServices',\n            value: 'Microsoft.Storage/storageAccounts/tableServices',\n          });\n          result.push({\n            text: 'Microsoft.Storage/storageAccounts/queueServices',\n            value: 'Microsoft.Storage/storageAccounts/queueServices',\n          });\n        }\n\n        return result.map((v) => ({\n          value: v.value,\n          text: resourceTypeDisplayNames[v.value.toLowerCase()] || v.value,\n        }));\n      });\n  }\n\n  getResourceNames(subscriptionId: string, resourceGroup: string, metricDefinition: string, skipToken?: string) {\n    const validMetricDefinition = startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')\n      ? 'Microsoft.Storage/storageAccounts'\n      : metricDefinition;\n    let url =\n      `${this.resourcePath}/subscriptions/${subscriptionId}/resourceGroups/${resourceGroup}/resources?` +\n      `$filter=resourceType eq '${validMetricDefinition}'&` +\n      `api-version=${this.listByResourceGroupApiVersion}`;\n    if (skipToken) {\n      url += `&$skiptoken=${skipToken}`;\n    }\n    return this.getResource(url).then(async (result: any) => {\n      let list: Array<{ text: string; value: string }> = [];\n      if (startsWith(metricDefinition, 'Microsoft.Storage/storageAccounts/')) {\n        list = ResponseParser.parseResourceNames(result, 'Microsoft.Storage/storageAccounts');\n        for (let i = 0; i < list.length; i++) {\n          list[i].text += '/default';\n          list[i].value += '/default';\n        }\n      } else {\n        list = ResponseParser.parseResourceNames(result, metricDefinition);\n      }\n\n      if (result.nextLink) {\n        // If there is a nextLink, we should request more pages\n        const nextURL = new URL(result.nextLink);\n        const nextToken = nextURL.searchParams.get('$skiptoken');\n        if (!nextToken) {\n          throw Error('unable to request the next page of resources');\n        }\n        const nextPage = await this.getResourceNames(subscriptionId, resourceGroup, metricDefinition, nextToken);\n        list = list.concat(nextPage);\n      }\n\n      return list;\n    });\n  }\n\n  getMetricNamespaces(query: GetMetricNamespacesQuery) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamespacesUrl(\n      this.resourcePath,\n      this.apiPreviewVersion,\n      this.replaceTemplateVariables(query)\n    );\n    return this.getResource(url)\n      .then((result: AzureMonitorMetricNamespacesResponse) => {\n        return ResponseParser.parseResponseValues(result, 'name', 'properties.metricNamespaceName');\n      })\n      .then((result) => {\n        if (url.includes('Microsoft.Storage/storageAccounts')) {\n          const storageNamespaces = [\n            'Microsoft.Storage/storageAccounts',\n            'Microsoft.Storage/storageAccounts/blobServices',\n            'Microsoft.Storage/storageAccounts/fileServices',\n            'Microsoft.Storage/storageAccounts/tableServices',\n            'Microsoft.Storage/storageAccounts/queueServices',\n          ];\n          for (const namespace of storageNamespaces) {\n            if (!find(result, ['value', namespace.toLowerCase()])) {\n              result.push({ value: namespace, text: namespace });\n            }\n          }\n        }\n        return result;\n      });\n  }\n\n  getMetricNames(query: GetMetricNamesQuery) {\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      this.apiVersion,\n      this.replaceTemplateVariables(query)\n    );\n    return this.getResource(url).then((result: AzureMonitorMetricNamesResponse) => {\n      return ResponseParser.parseResponseValues(result, 'name.localizedValue', 'name.value');\n    });\n  }\n\n  getMetricMetadata(query: GetMetricMetadataQuery) {\n    const { metricName } = query;\n    const url = UrlBuilder.buildAzureMonitorGetMetricNamesUrl(\n      this.resourcePath,\n      this.apiVersion,\n      this.replaceTemplateVariables(query)\n    );\n    return this.getResource(url).then((result: AzureMonitorMetricsMetadataResponse) => {\n      return ResponseParser.parseMetadata(result, metricName);\n    });\n  }\n\n  private validateDatasource(): DatasourceValidationResult | undefined {\n    const authType = getAuthType(this.instanceSettings);\n\n    if (authType === 'clientsecret') {\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.tenantId)) {\n        return {\n          status: 'error',\n          message: 'The Tenant Id field is required.',\n        };\n      }\n\n      if (!this.isValidConfigField(this.instanceSettings.jsonData.clientId)) {\n        return {\n          status: 'error',\n          message: 'The Client Id field is required.',\n        };\n      }\n    }\n\n    return undefined;\n  }\n\n  private isValidConfigField(field?: string): boolean {\n    return typeof field === 'string' && field.length > 0;\n  }\n\n  private replaceTemplateVariables<T extends { [K in keyof T]: string }>(query: T) {\n    const templateSrv = getTemplateSrv();\n\n    const workingQuery: { [K in keyof T]: string } = { ...query };\n    const keys = Object.keys(query) as Array<keyof T>;\n    keys.forEach((key) => {\n      workingQuery[key] = templateSrv.replace(workingQuery[key]);\n    });\n\n    return workingQuery;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}