{"ast":null,"code":"import { getDataSourceSrv } from '@grafana/runtime';\nexport const fromDTO = dto => {\n  const datasource = getDataSourceSrv().getInstanceSettings(dto.datasourceName);\n  return {\n    id: dto.ts.toString(),\n    createdAt: dto.ts,\n    datasourceName: dto.datasourceName,\n    datasourceUid: (datasource === null || datasource === void 0 ? void 0 : datasource.uid) || '',\n    // will be show on the list as coming from a removed data source\n    starred: dto.starred,\n    comment: dto.comment,\n    queries: dto.queries\n  };\n};\nexport const toDTO = richHistoryQuery => {\n  const datasource = getDataSourceSrv().getInstanceSettings({\n    uid: richHistoryQuery.datasourceUid\n  });\n\n  if (!datasource) {\n    throw new Error('Datasource not found.');\n  }\n\n  return {\n    ts: richHistoryQuery.createdAt,\n    datasourceName: richHistoryQuery.datasourceName,\n    starred: richHistoryQuery.starred,\n    comment: richHistoryQuery.comment,\n    queries: richHistoryQuery.queries\n  };\n};","map":{"version":3,"names":["getDataSourceSrv","fromDTO","dto","datasource","getInstanceSettings","datasourceName","id","ts","toString","createdAt","datasourceUid","uid","starred","comment","queries","toDTO","richHistoryQuery","Error"],"sources":["/home/soula/grafana/public/app/core/history/localStorageConverter.ts"],"sourcesContent":["import { getDataSourceSrv } from '@grafana/runtime';\n\nimport { RichHistoryQuery } from '../../types';\n\nimport { RichHistoryLocalStorageDTO } from './RichHistoryLocalStorage';\n\nexport const fromDTO = (dto: RichHistoryLocalStorageDTO): RichHistoryQuery => {\n  const datasource = getDataSourceSrv().getInstanceSettings(dto.datasourceName);\n  return {\n    id: dto.ts.toString(),\n    createdAt: dto.ts,\n    datasourceName: dto.datasourceName,\n    datasourceUid: datasource?.uid || '', // will be show on the list as coming from a removed data source\n    starred: dto.starred,\n    comment: dto.comment,\n    queries: dto.queries,\n  };\n};\n\nexport const toDTO = (richHistoryQuery: RichHistoryQuery): RichHistoryLocalStorageDTO => {\n  const datasource = getDataSourceSrv().getInstanceSettings({ uid: richHistoryQuery.datasourceUid });\n\n  if (!datasource) {\n    throw new Error('Datasource not found.');\n  }\n\n  return {\n    ts: richHistoryQuery.createdAt,\n    datasourceName: richHistoryQuery.datasourceName,\n    starred: richHistoryQuery.starred,\n    comment: richHistoryQuery.comment,\n    queries: richHistoryQuery.queries,\n  };\n};\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AAMA,OAAO,MAAMC,OAAO,GAAIC,GAAD,IAAuD;EAC5E,MAAMC,UAAU,GAAGH,gBAAgB,GAAGI,mBAAnB,CAAuCF,GAAG,CAACG,cAA3C,CAAnB;EACA,OAAO;IACLC,EAAE,EAAEJ,GAAG,CAACK,EAAJ,CAAOC,QAAP,EADC;IAELC,SAAS,EAAEP,GAAG,CAACK,EAFV;IAGLF,cAAc,EAAEH,GAAG,CAACG,cAHf;IAILK,aAAa,EAAE,CAAAP,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEQ,GAAZ,KAAmB,EAJ7B;IAIiC;IACtCC,OAAO,EAAEV,GAAG,CAACU,OALR;IAMLC,OAAO,EAAEX,GAAG,CAACW,OANR;IAOLC,OAAO,EAAEZ,GAAG,CAACY;EAPR,CAAP;AASD,CAXM;AAaP,OAAO,MAAMC,KAAK,GAAIC,gBAAD,IAAoE;EACvF,MAAMb,UAAU,GAAGH,gBAAgB,GAAGI,mBAAnB,CAAuC;IAAEO,GAAG,EAAEK,gBAAgB,CAACN;EAAxB,CAAvC,CAAnB;;EAEA,IAAI,CAACP,UAAL,EAAiB;IACf,MAAM,IAAIc,KAAJ,CAAU,uBAAV,CAAN;EACD;;EAED,OAAO;IACLV,EAAE,EAAES,gBAAgB,CAACP,SADhB;IAELJ,cAAc,EAAEW,gBAAgB,CAACX,cAF5B;IAGLO,OAAO,EAAEI,gBAAgB,CAACJ,OAHrB;IAILC,OAAO,EAAEG,gBAAgB,CAACH,OAJrB;IAKLC,OAAO,EAAEE,gBAAgB,CAACF;EALrB,CAAP;AAOD,CAdM"},"metadata":{},"sourceType":"module"}