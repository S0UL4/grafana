{"ast":null,"code":"import React, { memo, useEffect } from 'react';\nimport { CoreApp } from '@grafana/data';\nimport { PromExploreExtraField } from './PromExploreExtraField';\nimport PromQueryField from './PromQueryField';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const PromExploreQueryEditor = /*#__PURE__*/memo(props => {\n  const {\n    range,\n    query,\n    data,\n    datasource,\n    history,\n    onChange,\n    onRunQuery\n  } = props; // Setting default values\n\n  useEffect(() => {\n    if (query.expr === undefined) {\n      onChange(Object.assign({}, query, {\n        expr: ''\n      }));\n    }\n\n    if (query.exemplar === undefined) {\n      onChange(Object.assign({}, query, {\n        exemplar: true\n      }));\n    } // Override query type to \"Both\" only for new queries (no query.expr).\n\n\n    if (!query.instant && !query.range && !query.expr) {\n      onChange(Object.assign({}, query, {\n        instant: true,\n        range: true\n      }));\n    }\n  }, [onChange, query]);\n  return /*#__PURE__*/_jsx(PromQueryField, {\n    app: CoreApp.Explore,\n    datasource: datasource,\n    query: query,\n    range: range,\n    onRunQuery: onRunQuery,\n    onChange: onChange,\n    onBlur: () => {},\n    history: history,\n    data: data,\n    \"data-testid\": testIds.editor,\n    ExtraFieldElement: /*#__PURE__*/_jsx(PromExploreExtraField, {\n      query: query,\n      onChange: onChange,\n      datasource: datasource,\n      onRunQuery: onRunQuery\n    })\n  });\n});\nPromExploreQueryEditor.displayName = 'PromExploreQueryEditor';\nexport const testIds = {\n  editor: 'prom-editor-explore'\n};","map":{"version":3,"names":["React","memo","useEffect","CoreApp","PromExploreExtraField","PromQueryField","PromExploreQueryEditor","props","range","query","data","datasource","history","onChange","onRunQuery","expr","undefined","exemplar","instant","Explore","testIds","editor","displayName"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/components/PromExploreQueryEditor.tsx"],"sourcesContent":["import React, { memo, useEffect } from 'react';\n\nimport { QueryEditorProps, CoreApp } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery, PromOptions } from '../types';\n\nimport { PromExploreExtraField } from './PromExploreExtraField';\nimport PromQueryField from './PromQueryField';\n\nexport type Props = QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions>;\n\nexport const PromExploreQueryEditor = memo((props: Props) => {\n  const { range, query, data, datasource, history, onChange, onRunQuery } = props;\n\n  // Setting default values\n  useEffect(() => {\n    if (query.expr === undefined) {\n      onChange({ ...query, expr: '' });\n    }\n    if (query.exemplar === undefined) {\n      onChange({ ...query, exemplar: true });\n    }\n\n    // Override query type to \"Both\" only for new queries (no query.expr).\n    if (!query.instant && !query.range && !query.expr) {\n      onChange({ ...query, instant: true, range: true });\n    }\n  }, [onChange, query]);\n\n  return (\n    <PromQueryField\n      app={CoreApp.Explore}\n      datasource={datasource}\n      query={query}\n      range={range}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      onBlur={() => {}}\n      history={history}\n      data={data}\n      data-testid={testIds.editor}\n      ExtraFieldElement={\n        <PromExploreExtraField query={query} onChange={onChange} datasource={datasource} onRunQuery={onRunQuery} />\n      }\n    />\n  );\n});\n\nPromExploreQueryEditor.displayName = 'PromExploreQueryEditor';\n\nexport const testIds = {\n  editor: 'prom-editor-explore',\n};\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,QAAuC,OAAvC;AAEA,SAA2BC,OAA3B,QAA0C,eAA1C;AAKA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAIA,OAAO,MAAMC,sBAAsB,gBAAGL,IAAI,CAAEM,KAAD,IAAkB;EAC3D,MAAM;IAAEC,KAAF;IAASC,KAAT;IAAgBC,IAAhB;IAAsBC,UAAtB;IAAkCC,OAAlC;IAA2CC,QAA3C;IAAqDC;EAArD,IAAoEP,KAA1E,CAD2D,CAG3D;;EACAL,SAAS,CAAC,MAAM;IACd,IAAIO,KAAK,CAACM,IAAN,KAAeC,SAAnB,EAA8B;MAC5BH,QAAQ,mBAAMJ,KAAN;QAAaM,IAAI,EAAE;MAAnB,GAAR;IACD;;IACD,IAAIN,KAAK,CAACQ,QAAN,KAAmBD,SAAvB,EAAkC;MAChCH,QAAQ,mBAAMJ,KAAN;QAAaQ,QAAQ,EAAE;MAAvB,GAAR;IACD,CANa,CAQd;;;IACA,IAAI,CAACR,KAAK,CAACS,OAAP,IAAkB,CAACT,KAAK,CAACD,KAAzB,IAAkC,CAACC,KAAK,CAACM,IAA7C,EAAmD;MACjDF,QAAQ,mBAAMJ,KAAN;QAAaS,OAAO,EAAE,IAAtB;QAA4BV,KAAK,EAAE;MAAnC,GAAR;IACD;EACF,CAZQ,EAYN,CAACK,QAAD,EAAWJ,KAAX,CAZM,CAAT;EAcA,oBACE,KAAC,cAAD;IACE,GAAG,EAAEN,OAAO,CAACgB,OADf;IAEE,UAAU,EAAER,UAFd;IAGE,KAAK,EAAEF,KAHT;IAIE,KAAK,EAAED,KAJT;IAKE,UAAU,EAAEM,UALd;IAME,QAAQ,EAAED,QANZ;IAOE,MAAM,EAAE,MAAM,CAAE,CAPlB;IAQE,OAAO,EAAED,OARX;IASE,IAAI,EAAEF,IATR;IAUE,eAAaU,OAAO,CAACC,MAVvB;IAWE,iBAAiB,eACf,KAAC,qBAAD;MAAuB,KAAK,EAAEZ,KAA9B;MAAqC,QAAQ,EAAEI,QAA/C;MAAyD,UAAU,EAAEF,UAArE;MAAiF,UAAU,EAAEG;IAA7F;EAZJ,EADF;AAiBD,CAnCyC,CAAnC;AAqCPR,sBAAsB,CAACgB,WAAvB,GAAqC,wBAArC;AAEA,OAAO,MAAMF,OAAO,GAAG;EACrBC,MAAM,EAAE;AADa,CAAhB"},"metadata":{},"sourceType":"module"}