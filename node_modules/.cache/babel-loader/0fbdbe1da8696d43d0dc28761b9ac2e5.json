{"ast":null,"code":"var _h, _td, _Icon;\n\nimport React, { useState } from 'react';\nimport { ConfirmButton, RadioButtonGroup, Icon } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst adminOptions = [{\n  label: 'Yes',\n  value: true\n}, {\n  label: 'No',\n  value: false\n}];\nexport function UserPermissions({\n  isGrafanaAdmin,\n  onGrafanaAdminChange\n}) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentAdminOption, setCurrentAdminOption] = useState(isGrafanaAdmin);\n\n  const onChangeClick = () => setIsEditing(true);\n\n  const onCancelClick = () => {\n    setIsEditing(false);\n    setCurrentAdminOption(isGrafanaAdmin);\n  };\n\n  const handleGrafanaAdminChange = () => onGrafanaAdminChange(currentAdminOption);\n\n  const canChangePermissions = contextSrv.hasPermission(AccessControlAction.UsersPermissionsUpdate);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n      className: \"page-heading\",\n      children: \"Permissions\"\n    })), /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-group\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form\",\n        children: /*#__PURE__*/_jsx(\"table\", {\n          className: \"filter-table form-inline\",\n          children: /*#__PURE__*/_jsx(\"tbody\", {\n            children: /*#__PURE__*/_jsxs(\"tr\", {\n              children: [_td || (_td = /*#__PURE__*/_jsx(\"td\", {\n                className: \"width-16\",\n                children: \"Grafana Admin\"\n              })), isEditing ? /*#__PURE__*/_jsx(\"td\", {\n                colSpan: 2,\n                children: /*#__PURE__*/_jsx(RadioButtonGroup, {\n                  options: adminOptions,\n                  value: currentAdminOption,\n                  onChange: setCurrentAdminOption,\n                  autoFocus: true\n                })\n              }) : /*#__PURE__*/_jsx(\"td\", {\n                colSpan: 2,\n                children: isGrafanaAdmin ? /*#__PURE__*/_jsxs(_Fragment, {\n                  children: [_Icon || (_Icon = /*#__PURE__*/_jsx(Icon, {\n                    name: \"shield\"\n                  })), \" Yes\"]\n                }) : /*#__PURE__*/_jsx(_Fragment, {\n                  children: \"No\"\n                })\n              }), /*#__PURE__*/_jsx(\"td\", {\n                children: canChangePermissions && /*#__PURE__*/_jsx(ConfirmButton, {\n                  onClick: onChangeClick,\n                  onConfirm: handleGrafanaAdminChange,\n                  onCancel: onCancelClick,\n                  confirmText: \"Change\",\n                  children: \"Change\"\n                })\n              })]\n            })\n          })\n        })\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","ConfirmButton","RadioButtonGroup","Icon","contextSrv","AccessControlAction","adminOptions","label","value","UserPermissions","isGrafanaAdmin","onGrafanaAdminChange","isEditing","setIsEditing","currentAdminOption","setCurrentAdminOption","onChangeClick","onCancelClick","handleGrafanaAdminChange","canChangePermissions","hasPermission","UsersPermissionsUpdate"],"sources":["/home/soula/grafana/public/app/features/admin/UserPermissions.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport { ConfirmButton, RadioButtonGroup, Icon } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\ninterface Props {\n  isGrafanaAdmin: boolean;\n\n  onGrafanaAdminChange: (isGrafanaAdmin: boolean) => void;\n}\n\nconst adminOptions = [\n  { label: 'Yes', value: true },\n  { label: 'No', value: false },\n];\n\nexport function UserPermissions({ isGrafanaAdmin, onGrafanaAdminChange }: Props) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentAdminOption, setCurrentAdminOption] = useState(isGrafanaAdmin);\n\n  const onChangeClick = () => setIsEditing(true);\n\n  const onCancelClick = () => {\n    setIsEditing(false);\n    setCurrentAdminOption(isGrafanaAdmin);\n  };\n\n  const handleGrafanaAdminChange = () => onGrafanaAdminChange(currentAdminOption);\n\n  const canChangePermissions = contextSrv.hasPermission(AccessControlAction.UsersPermissionsUpdate);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Permissions</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <table className=\"filter-table form-inline\">\n            <tbody>\n              <tr>\n                <td className=\"width-16\">Grafana Admin</td>\n                {isEditing ? (\n                  <td colSpan={2}>\n                    <RadioButtonGroup\n                      options={adminOptions}\n                      value={currentAdminOption}\n                      onChange={setCurrentAdminOption}\n                      autoFocus\n                    />\n                  </td>\n                ) : (\n                  <td colSpan={2}>\n                    {isGrafanaAdmin ? (\n                      <>\n                        <Icon name=\"shield\" /> Yes\n                      </>\n                    ) : (\n                      <>No</>\n                    )}\n                  </td>\n                )}\n                <td>\n                  {canChangePermissions && (\n                    <ConfirmButton\n                      onClick={onChangeClick}\n                      onConfirm={handleGrafanaAdminChange}\n                      onCancel={onCancelClick}\n                      confirmText=\"Change\"\n                    >\n                      Change\n                    </ConfirmButton>\n                  )}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,aAAT,EAAwBC,gBAAxB,EAA0CC,IAA1C,QAAsD,aAAtD;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,mBAAT,QAAoC,WAApC;;;;AAQA,MAAMC,YAAY,GAAG,CACnB;EAAEC,KAAK,EAAE,KAAT;EAAgBC,KAAK,EAAE;AAAvB,CADmB,EAEnB;EAAED,KAAK,EAAE,IAAT;EAAeC,KAAK,EAAE;AAAtB,CAFmB,CAArB;AAKA,OAAO,SAASC,eAAT,CAAyB;EAAEC,cAAF;EAAkBC;AAAlB,CAAzB,EAA0E;EAC/E,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAACc,kBAAD,EAAqBC,qBAArB,IAA8Cf,QAAQ,CAACU,cAAD,CAA5D;;EAEA,MAAMM,aAAa,GAAG,MAAMH,YAAY,CAAC,IAAD,CAAxC;;EAEA,MAAMI,aAAa,GAAG,MAAM;IAC1BJ,YAAY,CAAC,KAAD,CAAZ;IACAE,qBAAqB,CAACL,cAAD,CAArB;EACD,CAHD;;EAKA,MAAMQ,wBAAwB,GAAG,MAAMP,oBAAoB,CAACG,kBAAD,CAA3D;;EAEA,MAAMK,oBAAoB,GAAGf,UAAU,CAACgB,aAAX,CAAyBf,mBAAmB,CAACgB,sBAA7C,CAA7B;EAEA,oBACE;IAAA,oCACE;MAAI,SAAS,EAAC,cAAd;MAAA;IAAA,EADF,gBAEE;MAAK,SAAS,EAAC,eAAf;MAAA,uBACE;QAAK,SAAS,EAAC,SAAf;QAAA,uBACE;UAAO,SAAS,EAAC,0BAAjB;UAAA,uBACE;YAAA,uBACE;cAAA,sCACE;gBAAI,SAAS,EAAC,UAAd;gBAAA;cAAA,EADF,GAEGT,SAAS,gBACR;gBAAI,OAAO,EAAE,CAAb;gBAAA,uBACE,KAAC,gBAAD;kBACE,OAAO,EAAEN,YADX;kBAEE,KAAK,EAAEQ,kBAFT;kBAGE,QAAQ,EAAEC,qBAHZ;kBAIE,SAAS;gBAJX;cADF,EADQ,gBAUR;gBAAI,OAAO,EAAE,CAAb;gBAAA,UACGL,cAAc,gBACb;kBAAA,0CACE,KAAC,IAAD;oBAAM,IAAI,EAAC;kBAAX,EADF;gBAAA,EADa,gBAKb;kBAAA;gBAAA;cANJ,EAZJ,eAsBE;gBAAA,UACGS,oBAAoB,iBACnB,KAAC,aAAD;kBACE,OAAO,EAAEH,aADX;kBAEE,SAAS,EAAEE,wBAFb;kBAGE,QAAQ,EAAED,aAHZ;kBAIE,WAAW,EAAC,QAJd;kBAAA;gBAAA;cAFJ,EAtBF;YAAA;UADF;QADF;MADF;IADF,EAFF;EAAA,EADF;AAgDD"},"metadata":{},"sourceType":"module"}