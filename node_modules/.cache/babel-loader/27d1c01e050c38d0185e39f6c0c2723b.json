{"ast":null,"code":"import { contextSrv } from 'app/core/services/context_srv';\nimport { AlertManagerImplementation } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\nimport { instancesPermissions, notificationsPermissions } from './access-control';\nimport { getAllDataSources } from './config';\nexport const GRAFANA_RULES_SOURCE_NAME = 'grafana';\nexport const GRAFANA_DATASOURCE_NAME = '-- Grafana --';\nexport let DataSourceType;\n\n(function (DataSourceType) {\n  DataSourceType[\"Alertmanager\"] = \"alertmanager\";\n  DataSourceType[\"Loki\"] = \"loki\";\n  DataSourceType[\"Prometheus\"] = \"prometheus\";\n})(DataSourceType || (DataSourceType = {}));\n\nexport const RulesDataSourceTypes = [DataSourceType.Loki, DataSourceType.Prometheus];\nexport function getRulesDataSources() {\n  if (!contextSrv.hasPermission(AccessControlAction.AlertingRuleExternalRead)) {\n    return [];\n  }\n\n  return getAllDataSources().filter(ds => RulesDataSourceTypes.includes(ds.type) && ds.jsonData.manageAlerts !== false).sort((a, b) => a.name.localeCompare(b.name));\n}\nexport function getRulesDataSource(rulesSourceName) {\n  return getRulesDataSources().find(x => x.name === rulesSourceName);\n}\nexport function getAlertManagerDataSources() {\n  return getAllDataSources().filter(ds => ds.type === DataSourceType.Alertmanager).sort((a, b) => a.name.localeCompare(b.name));\n}\nconst grafanaAlertManagerDataSource = {\n  name: GRAFANA_RULES_SOURCE_NAME,\n  imgUrl: 'public/img/grafana_icon.svg'\n}; // Used only as a fallback for Alert Group plugin\n\nexport function getAllAlertManagerDataSources() {\n  return [grafanaAlertManagerDataSource, ...getAlertManagerDataSources().map(ds => ({\n    name: ds.name,\n    displayName: ds.name,\n    imgUrl: ds.meta.info.logos.small,\n    meta: ds.meta\n  }))];\n}\nexport function getAlertManagerDataSourcesByPermission(permission) {\n  const availableDataSources = [];\n  const permissions = {\n    instance: instancesPermissions.read,\n    notification: notificationsPermissions.read\n  };\n\n  if (contextSrv.hasPermission(permissions[permission].grafana)) {\n    availableDataSources.push(grafanaAlertManagerDataSource);\n  }\n\n  if (contextSrv.hasPermission(permissions[permission].external)) {\n    const cloudSources = getAlertManagerDataSources().map(ds => ({\n      name: ds.name,\n      displayName: ds.name,\n      imgUrl: ds.meta.info.logos.small,\n      meta: ds.meta\n    }));\n    availableDataSources.push(...cloudSources);\n  }\n\n  return availableDataSources;\n}\nexport function getLotexDataSourceByName(dataSourceName) {\n  const dataSource = getDataSourceByName(dataSourceName);\n\n  if (!dataSource) {\n    throw new Error(`Data source ${dataSourceName} not found`);\n  }\n\n  if (dataSource.type !== DataSourceType.Loki && dataSource.type !== DataSourceType.Prometheus) {\n    throw new Error(`Unexpected data source type ${dataSource.type}`);\n  }\n\n  return dataSource;\n}\nexport function getAllRulesSourceNames() {\n  const availableRulesSources = getRulesDataSources().map(r => r.name);\n\n  if (contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)) {\n    availableRulesSources.push(GRAFANA_RULES_SOURCE_NAME);\n  }\n\n  return availableRulesSources;\n}\nexport function getAllRulesSources() {\n  const availableRulesSources = getRulesDataSources();\n\n  if (contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)) {\n    availableRulesSources.push(GRAFANA_RULES_SOURCE_NAME);\n  }\n\n  return availableRulesSources;\n}\nexport function getRulesSourceName(rulesSource) {\n  return isCloudRulesSource(rulesSource) ? rulesSource.name : rulesSource;\n}\nexport function getRulesSourceUid(rulesSource) {\n  return isCloudRulesSource(rulesSource) ? rulesSource.uid : GRAFANA_RULES_SOURCE_NAME;\n}\nexport function isCloudRulesSource(rulesSource) {\n  return rulesSource !== GRAFANA_RULES_SOURCE_NAME;\n}\nexport function isVanillaPrometheusAlertManagerDataSource(name) {\n  var _getDataSourceByName, _getDataSourceByName$;\n\n  return name !== GRAFANA_RULES_SOURCE_NAME && ((_getDataSourceByName = getDataSourceByName(name)) === null || _getDataSourceByName === void 0 ? void 0 : (_getDataSourceByName$ = _getDataSourceByName.jsonData) === null || _getDataSourceByName$ === void 0 ? void 0 : _getDataSourceByName$.implementation) === AlertManagerImplementation.prometheus;\n}\nexport function isGrafanaRulesSource(rulesSource) {\n  return rulesSource === GRAFANA_RULES_SOURCE_NAME;\n}\nexport function getDataSourceByName(name) {\n  return getAllDataSources().find(source => source.name === name);\n}\nexport function getRulesSourceByName(name) {\n  if (name === GRAFANA_RULES_SOURCE_NAME) {\n    return GRAFANA_RULES_SOURCE_NAME;\n  }\n\n  return getDataSourceByName(name);\n}\nexport function getDatasourceAPIId(dataSourceName) {\n  if (dataSourceName === GRAFANA_RULES_SOURCE_NAME) {\n    return GRAFANA_RULES_SOURCE_NAME;\n  }\n\n  const ds = getDataSourceByName(dataSourceName);\n\n  if (!ds) {\n    throw new Error(`Datasource \"${dataSourceName}\" not found`);\n  }\n\n  return String(ds.id);\n}\nexport function getDatasourceAPIUid(dataSourceName) {\n  if (dataSourceName === GRAFANA_RULES_SOURCE_NAME) {\n    return GRAFANA_RULES_SOURCE_NAME;\n  }\n\n  const ds = getDataSourceByName(dataSourceName);\n\n  if (!ds) {\n    throw new Error(`Datasource \"${dataSourceName}\" not found`);\n  }\n\n  return ds.uid;\n}","map":{"version":3,"names":["contextSrv","AlertManagerImplementation","AccessControlAction","instancesPermissions","notificationsPermissions","getAllDataSources","GRAFANA_RULES_SOURCE_NAME","GRAFANA_DATASOURCE_NAME","DataSourceType","RulesDataSourceTypes","Loki","Prometheus","getRulesDataSources","hasPermission","AlertingRuleExternalRead","filter","ds","includes","type","jsonData","manageAlerts","sort","a","b","name","localeCompare","getRulesDataSource","rulesSourceName","find","x","getAlertManagerDataSources","Alertmanager","grafanaAlertManagerDataSource","imgUrl","getAllAlertManagerDataSources","map","displayName","meta","info","logos","small","getAlertManagerDataSourcesByPermission","permission","availableDataSources","permissions","instance","read","notification","grafana","push","external","cloudSources","getLotexDataSourceByName","dataSourceName","dataSource","getDataSourceByName","Error","getAllRulesSourceNames","availableRulesSources","r","AlertingRuleRead","getAllRulesSources","getRulesSourceName","rulesSource","isCloudRulesSource","getRulesSourceUid","uid","isVanillaPrometheusAlertManagerDataSource","implementation","prometheus","isGrafanaRulesSource","source","getRulesSourceByName","getDatasourceAPIId","String","id","getDatasourceAPIUid"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/utils/datasource.ts"],"sourcesContent":["import { DataSourceInstanceSettings, DataSourceJsonData } from '@grafana/data';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertManagerDataSourceJsonData, AlertManagerImplementation } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\nimport { RulesSource } from 'app/types/unified-alerting';\n\nimport { instancesPermissions, notificationsPermissions } from './access-control';\nimport { getAllDataSources } from './config';\n\nexport const GRAFANA_RULES_SOURCE_NAME = 'grafana';\nexport const GRAFANA_DATASOURCE_NAME = '-- Grafana --';\n\nexport enum DataSourceType {\n  Alertmanager = 'alertmanager',\n  Loki = 'loki',\n  Prometheus = 'prometheus',\n}\n\nexport interface AlertManagerDataSource {\n  name: string;\n  imgUrl: string;\n  meta?: DataSourceInstanceSettings['meta'];\n}\n\nexport const RulesDataSourceTypes: string[] = [DataSourceType.Loki, DataSourceType.Prometheus];\n\nexport function getRulesDataSources() {\n  if (!contextSrv.hasPermission(AccessControlAction.AlertingRuleExternalRead)) {\n    return [];\n  }\n\n  return getAllDataSources()\n    .filter((ds) => RulesDataSourceTypes.includes(ds.type) && ds.jsonData.manageAlerts !== false)\n    .sort((a, b) => a.name.localeCompare(b.name));\n}\n\nexport function getRulesDataSource(rulesSourceName: string) {\n  return getRulesDataSources().find((x) => x.name === rulesSourceName);\n}\n\nexport function getAlertManagerDataSources() {\n  return getAllDataSources()\n    .filter((ds) => ds.type === DataSourceType.Alertmanager)\n    .sort((a, b) => a.name.localeCompare(b.name));\n}\n\nconst grafanaAlertManagerDataSource: AlertManagerDataSource = {\n  name: GRAFANA_RULES_SOURCE_NAME,\n  imgUrl: 'public/img/grafana_icon.svg',\n};\n\n// Used only as a fallback for Alert Group plugin\nexport function getAllAlertManagerDataSources(): AlertManagerDataSource[] {\n  return [\n    grafanaAlertManagerDataSource,\n    ...getAlertManagerDataSources().map<AlertManagerDataSource>((ds) => ({\n      name: ds.name,\n      displayName: ds.name,\n      imgUrl: ds.meta.info.logos.small,\n      meta: ds.meta,\n    })),\n  ];\n}\n\nexport function getAlertManagerDataSourcesByPermission(\n  permission: 'instance' | 'notification'\n): AlertManagerDataSource[] {\n  const availableDataSources: AlertManagerDataSource[] = [];\n  const permissions = {\n    instance: instancesPermissions.read,\n    notification: notificationsPermissions.read,\n  };\n\n  if (contextSrv.hasPermission(permissions[permission].grafana)) {\n    availableDataSources.push(grafanaAlertManagerDataSource);\n  }\n\n  if (contextSrv.hasPermission(permissions[permission].external)) {\n    const cloudSources = getAlertManagerDataSources().map<AlertManagerDataSource>((ds) => ({\n      name: ds.name,\n      displayName: ds.name,\n      imgUrl: ds.meta.info.logos.small,\n      meta: ds.meta,\n    }));\n    availableDataSources.push(...cloudSources);\n  }\n\n  return availableDataSources;\n}\n\nexport function getLotexDataSourceByName(dataSourceName: string): DataSourceInstanceSettings {\n  const dataSource = getDataSourceByName(dataSourceName);\n  if (!dataSource) {\n    throw new Error(`Data source ${dataSourceName} not found`);\n  }\n  if (dataSource.type !== DataSourceType.Loki && dataSource.type !== DataSourceType.Prometheus) {\n    throw new Error(`Unexpected data source type ${dataSource.type}`);\n  }\n  return dataSource;\n}\n\nexport function getAllRulesSourceNames(): string[] {\n  const availableRulesSources: string[] = getRulesDataSources().map((r) => r.name);\n\n  if (contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)) {\n    availableRulesSources.push(GRAFANA_RULES_SOURCE_NAME);\n  }\n\n  return availableRulesSources;\n}\n\nexport function getAllRulesSources(): RulesSource[] {\n  const availableRulesSources: RulesSource[] = getRulesDataSources();\n\n  if (contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)) {\n    availableRulesSources.push(GRAFANA_RULES_SOURCE_NAME);\n  }\n\n  return availableRulesSources;\n}\n\nexport function getRulesSourceName(rulesSource: RulesSource): string {\n  return isCloudRulesSource(rulesSource) ? rulesSource.name : rulesSource;\n}\n\nexport function getRulesSourceUid(rulesSource: RulesSource): string {\n  return isCloudRulesSource(rulesSource) ? rulesSource.uid : GRAFANA_RULES_SOURCE_NAME;\n}\n\nexport function isCloudRulesSource(rulesSource: RulesSource | string): rulesSource is DataSourceInstanceSettings {\n  return rulesSource !== GRAFANA_RULES_SOURCE_NAME;\n}\n\nexport function isVanillaPrometheusAlertManagerDataSource(name: string): boolean {\n  return (\n    name !== GRAFANA_RULES_SOURCE_NAME &&\n    (getDataSourceByName(name)?.jsonData as AlertManagerDataSourceJsonData)?.implementation ===\n      AlertManagerImplementation.prometheus\n  );\n}\n\nexport function isGrafanaRulesSource(\n  rulesSource: RulesSource | string\n): rulesSource is typeof GRAFANA_RULES_SOURCE_NAME {\n  return rulesSource === GRAFANA_RULES_SOURCE_NAME;\n}\n\nexport function getDataSourceByName(name: string): DataSourceInstanceSettings<DataSourceJsonData> | undefined {\n  return getAllDataSources().find((source) => source.name === name);\n}\n\nexport function getRulesSourceByName(name: string): RulesSource | undefined {\n  if (name === GRAFANA_RULES_SOURCE_NAME) {\n    return GRAFANA_RULES_SOURCE_NAME;\n  }\n  return getDataSourceByName(name);\n}\n\nexport function getDatasourceAPIId(dataSourceName: string) {\n  if (dataSourceName === GRAFANA_RULES_SOURCE_NAME) {\n    return GRAFANA_RULES_SOURCE_NAME;\n  }\n  const ds = getDataSourceByName(dataSourceName);\n  if (!ds) {\n    throw new Error(`Datasource \"${dataSourceName}\" not found`);\n  }\n  return String(ds.id);\n}\n\nexport function getDatasourceAPIUid(dataSourceName: string) {\n  if (dataSourceName === GRAFANA_RULES_SOURCE_NAME) {\n    return GRAFANA_RULES_SOURCE_NAME;\n  }\n  const ds = getDataSourceByName(dataSourceName);\n  if (!ds) {\n    throw new Error(`Datasource \"${dataSourceName}\" not found`);\n  }\n  return ds.uid;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}