{"ast":null,"code":"import { isNumber } from 'lodash';\nimport { getBackendSrv } from '@grafana/runtime';\nexport class HistorySrv {\n  getHistoryList(dashboard, options) {\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\n    return id ? getBackendSrv().get(`api/dashboards/id/${id}/versions`, options) : Promise.resolve([]);\n  }\n\n  getDashboardVersion(id, version) {\n    return getBackendSrv().get(`api/dashboards/id/${id}/versions/${version}`);\n  }\n\n  restoreDashboard(dashboard, version) {\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\n    const url = `api/dashboards/id/${id}/restore`;\n    return id && isNumber(version) ? getBackendSrv().post(url, {\n      version\n    }) : Promise.resolve({});\n  }\n\n}\nconst historySrv = new HistorySrv();\nexport { historySrv };","map":{"version":3,"names":["isNumber","getBackendSrv","HistorySrv","getHistoryList","dashboard","options","id","get","Promise","resolve","getDashboardVersion","version","restoreDashboard","url","post","historySrv"],"sources":["/home/soula/grafana/public/app/features/dashboard/components/VersionHistory/HistorySrv.ts"],"sourcesContent":["import { isNumber } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport { DashboardModel } from '../../state/DashboardModel';\n\nexport interface HistoryListOpts {\n  limit: number;\n  start: number;\n}\n\nexport interface RevisionsModel {\n  id: number;\n  checked: boolean;\n  dashboardId: number;\n  parentVersion: number;\n  version: number;\n  created: Date;\n  createdBy: string;\n  message: string;\n}\n\nexport interface DiffTarget {\n  dashboardId: number;\n  version: number;\n  unsavedDashboard?: DashboardModel; // when doing diffs against unsaved dashboard version\n}\n\nexport class HistorySrv {\n  getHistoryList(dashboard: DashboardModel, options: HistoryListOpts) {\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\n    return id ? getBackendSrv().get(`api/dashboards/id/${id}/versions`, options) : Promise.resolve([]);\n  }\n\n  getDashboardVersion(id: number, version: number) {\n    return getBackendSrv().get(`api/dashboards/id/${id}/versions/${version}`);\n  }\n\n  restoreDashboard(dashboard: DashboardModel, version: number) {\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\n    const url = `api/dashboards/id/${id}/restore`;\n\n    return id && isNumber(version) ? getBackendSrv().post(url, { version }) : Promise.resolve({});\n  }\n}\n\nconst historySrv = new HistorySrv();\nexport { historySrv };\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,QAAzB;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AA0BA,OAAO,MAAMC,UAAN,CAAiB;EACtBC,cAAc,CAACC,SAAD,EAA4BC,OAA5B,EAAsD;IAClE,MAAMC,EAAE,GAAGF,SAAS,IAAIA,SAAS,CAACE,EAAvB,GAA4BF,SAAS,CAACE,EAAtC,GAA2C,KAAK,CAA3D;IACA,OAAOA,EAAE,GAAGL,aAAa,GAAGM,GAAhB,CAAqB,qBAAoBD,EAAG,WAA5C,EAAwDD,OAAxD,CAAH,GAAsEG,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAA/E;EACD;;EAEDC,mBAAmB,CAACJ,EAAD,EAAaK,OAAb,EAA8B;IAC/C,OAAOV,aAAa,GAAGM,GAAhB,CAAqB,qBAAoBD,EAAG,aAAYK,OAAQ,EAAhE,CAAP;EACD;;EAEDC,gBAAgB,CAACR,SAAD,EAA4BO,OAA5B,EAA6C;IAC3D,MAAML,EAAE,GAAGF,SAAS,IAAIA,SAAS,CAACE,EAAvB,GAA4BF,SAAS,CAACE,EAAtC,GAA2C,KAAK,CAA3D;IACA,MAAMO,GAAG,GAAI,qBAAoBP,EAAG,UAApC;IAEA,OAAOA,EAAE,IAAIN,QAAQ,CAACW,OAAD,CAAd,GAA0BV,aAAa,GAAGa,IAAhB,CAAqBD,GAArB,EAA0B;MAAEF;IAAF,CAA1B,CAA1B,GAAmEH,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAA1E;EACD;;AAfqB;AAkBxB,MAAMM,UAAU,GAAG,IAAIb,UAAJ,EAAnB;AACA,SAASa,UAAT"},"metadata":{},"sourceType":"module"}