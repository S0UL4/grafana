{"ast":null,"code":"import { debounce } from 'lodash';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { fetchBuiltinRoles, fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport store from 'app/core/store';\nimport { AccessControlAction, ServiceAccountStateFilter } from 'app/types';\nimport { API_KEYS_MIGRATION_INFO_STORAGE_KEY } from '../constants';\nimport { acOptionsLoaded, builtInRolesLoaded, pageChanged, queryChanged, serviceAccountsFetchBegin, serviceAccountsFetched, serviceAccountsFetchEnd, apiKeysMigrationStatusLoaded, stateFilterChanged, showApiKeysMigrationInfoLoaded } from './reducers';\nconst BASE_URL = `/api/serviceaccounts`;\nexport function fetchACOptions() {\n  return async dispatch => {\n    try {\n      if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        const options = await fetchRoleOptions();\n        dispatch(acOptionsLoaded(options));\n      }\n\n      if (contextSrv.accessControlBuiltInRoleAssignmentEnabled() && contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionBuiltinRolesList)) {\n        const builtInRoles = await fetchBuiltinRoles();\n        dispatch(builtInRolesLoaded(builtInRoles));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\nexport function getApiKeysMigrationStatus() {\n  return async dispatch => {\n    const result = await getBackendSrv().get('/api/serviceaccounts/migrationstatus');\n    dispatch(apiKeysMigrationStatusLoaded(!!(result !== null && result !== void 0 && result.migrated)));\n  };\n}\nexport function fetchServiceAccounts({\n  withLoadingIndicator\n} = {\n  withLoadingIndicator: false\n}) {\n  return async (dispatch, getState) => {\n    try {\n      if (withLoadingIndicator) {\n        dispatch(serviceAccountsFetchBegin());\n      }\n\n      const {\n        perPage,\n        page,\n        query,\n        serviceAccountStateFilter\n      } = getState().serviceAccounts;\n      const result = await getBackendSrv().get(`/api/serviceaccounts/search?perpage=${perPage}&page=${page}&query=${query}${getStateFilter(serviceAccountStateFilter)}&accesscontrol=true`);\n      dispatch(serviceAccountsFetched(result));\n    } catch (error) {\n      console.error(error);\n    } finally {\n      serviceAccountsFetchEnd();\n    }\n  };\n}\nconst fetchServiceAccountsWithDebounce = debounce(dispatch => dispatch(fetchServiceAccounts()), 500, {\n  leading: true\n});\nexport function updateServiceAccount(serviceAccount) {\n  return async dispatch => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, Object.assign({}, serviceAccount));\n    dispatch(fetchServiceAccounts());\n  };\n}\nexport function deleteServiceAccount(serviceAccountId) {\n  return async dispatch => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    dispatch(fetchServiceAccounts());\n  };\n}\nexport function createServiceAccountToken(saID, token, onTokenCreated) {\n  return async dispatch => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(fetchServiceAccounts());\n  };\n} // search / filtering of serviceAccounts\n\nconst getStateFilter = value => {\n  switch (value) {\n    case ServiceAccountStateFilter.WithExpiredTokens:\n      return '&expiredTokens=true';\n\n    case ServiceAccountStateFilter.Disabled:\n      return '&disabled=true';\n\n    default:\n      return '';\n  }\n};\n\nexport function changeQuery(query) {\n  return async dispatch => {\n    dispatch(queryChanged(query));\n    fetchServiceAccountsWithDebounce(dispatch);\n  };\n}\nexport function changeStateFilter(filter) {\n  return async dispatch => {\n    dispatch(stateFilterChanged(filter));\n    dispatch(fetchServiceAccounts());\n  };\n}\nexport function changePage(page) {\n  return async dispatch => {\n    dispatch(pageChanged(page));\n    dispatch(fetchServiceAccounts());\n  };\n}\nexport function getApiKeysMigrationInfo() {\n  return async dispatch => {\n    const showApiKeysMigrationInfo = store.getBool(API_KEYS_MIGRATION_INFO_STORAGE_KEY, false);\n    dispatch(showApiKeysMigrationInfoLoaded(showApiKeysMigrationInfo));\n  };\n}\nexport function closeApiKeysMigrationInfo() {\n  return async dispatch => {\n    store.set(API_KEYS_MIGRATION_INFO_STORAGE_KEY, false);\n    dispatch(getApiKeysMigrationInfo());\n  };\n}","map":{"version":3,"names":["debounce","getBackendSrv","fetchBuiltinRoles","fetchRoleOptions","contextSrv","store","AccessControlAction","ServiceAccountStateFilter","API_KEYS_MIGRATION_INFO_STORAGE_KEY","acOptionsLoaded","builtInRolesLoaded","pageChanged","queryChanged","serviceAccountsFetchBegin","serviceAccountsFetched","serviceAccountsFetchEnd","apiKeysMigrationStatusLoaded","stateFilterChanged","showApiKeysMigrationInfoLoaded","BASE_URL","fetchACOptions","dispatch","licensedAccessControlEnabled","hasPermission","ActionRolesList","options","accessControlBuiltInRoleAssignmentEnabled","ActionBuiltinRolesList","builtInRoles","error","console","getApiKeysMigrationStatus","result","get","migrated","fetchServiceAccounts","withLoadingIndicator","getState","perPage","page","query","serviceAccountStateFilter","serviceAccounts","getStateFilter","fetchServiceAccountsWithDebounce","leading","updateServiceAccount","serviceAccount","patch","id","deleteServiceAccount","serviceAccountId","delete","createServiceAccountToken","saID","token","onTokenCreated","post","key","value","WithExpiredTokens","Disabled","changeQuery","changeStateFilter","filter","changePage","getApiKeysMigrationInfo","showApiKeysMigrationInfo","getBool","closeApiKeysMigrationInfo","set"],"sources":["/home/soula/grafana/public/app/features/serviceaccounts/state/actions.ts"],"sourcesContent":["import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { fetchBuiltinRoles, fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport store from 'app/core/store';\nimport { AccessControlAction, ServiceAccountDTO, ServiceAccountStateFilter, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\nimport { API_KEYS_MIGRATION_INFO_STORAGE_KEY } from '../constants';\n\nimport {\n  acOptionsLoaded,\n  builtInRolesLoaded,\n  pageChanged,\n  queryChanged,\n  serviceAccountsFetchBegin,\n  serviceAccountsFetched,\n  serviceAccountsFetchEnd,\n  apiKeysMigrationStatusLoaded,\n  stateFilterChanged,\n  showApiKeysMigrationInfoLoaded,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function fetchACOptions(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        const options = await fetchRoleOptions();\n        dispatch(acOptionsLoaded(options));\n      }\n      if (\n        contextSrv.accessControlBuiltInRoleAssignmentEnabled() &&\n        contextSrv.licensedAccessControlEnabled() &&\n        contextSrv.hasPermission(AccessControlAction.ActionBuiltinRolesList)\n      ) {\n        const builtInRoles = await fetchBuiltinRoles();\n        dispatch(builtInRolesLoaded(builtInRoles));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\nexport function getApiKeysMigrationStatus(): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().get('/api/serviceaccounts/migrationstatus');\n    dispatch(apiKeysMigrationStatusLoaded(!!result?.migrated));\n  };\n}\n\ninterface FetchServiceAccountsParams {\n  withLoadingIndicator: boolean;\n}\n\nexport function fetchServiceAccounts(\n  { withLoadingIndicator }: FetchServiceAccountsParams = { withLoadingIndicator: false }\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      if (withLoadingIndicator) {\n        dispatch(serviceAccountsFetchBegin());\n      }\n      const { perPage, page, query, serviceAccountStateFilter } = getState().serviceAccounts;\n      const result = await getBackendSrv().get(\n        `/api/serviceaccounts/search?perpage=${perPage}&page=${page}&query=${query}${getStateFilter(\n          serviceAccountStateFilter\n        )}&accesscontrol=true`\n      );\n      dispatch(serviceAccountsFetched(result));\n    } catch (error) {\n      console.error(error);\n    } finally {\n      serviceAccountsFetchEnd();\n    }\n  };\n}\n\nconst fetchServiceAccountsWithDebounce = debounce((dispatch) => dispatch(fetchServiceAccounts()), 500, {\n  leading: true,\n});\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\n// search / filtering of serviceAccounts\nconst getStateFilter = (value: ServiceAccountStateFilter) => {\n  switch (value) {\n    case ServiceAccountStateFilter.WithExpiredTokens:\n      return '&expiredTokens=true';\n    case ServiceAccountStateFilter.Disabled:\n      return '&disabled=true';\n    default:\n      return '';\n  }\n};\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    fetchServiceAccountsWithDebounce(dispatch);\n  };\n}\n\nexport function changeStateFilter(filter: ServiceAccountStateFilter): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(stateFilterChanged(filter));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function getApiKeysMigrationInfo(): ThunkResult<void> {\n  return async (dispatch) => {\n    const showApiKeysMigrationInfo = store.getBool(API_KEYS_MIGRATION_INFO_STORAGE_KEY, false);\n    dispatch(showApiKeysMigrationInfoLoaded(showApiKeysMigrationInfo));\n  };\n}\n\nexport function closeApiKeysMigrationInfo(): ThunkResult<void> {\n  return async (dispatch) => {\n    store.set(API_KEYS_MIGRATION_INFO_STORAGE_KEY, false);\n    dispatch(getApiKeysMigrationInfo());\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}