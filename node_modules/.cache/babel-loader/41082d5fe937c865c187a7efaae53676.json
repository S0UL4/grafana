{"ast":null,"code":"import React from 'react';\nimport { JSONFormatter } from '@grafana/ui';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst parseErrorMessage = message => {\n  try {\n    const [msg, json] = message.split(/(\\{.+)/);\n    const jsonError = JSON.parse(json);\n    return {\n      msg,\n      json: jsonError\n    };\n  } catch {\n    return {\n      msg: message\n    };\n  }\n};\n\nexport const InspectErrorTab = ({\n  error\n}) => {\n  if (!error) {\n    return null;\n  }\n\n  if (error.data) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"h4\", {\n        children: error.data.message\n      }), /*#__PURE__*/_jsx(JSONFormatter, {\n        json: error,\n        open: 2\n      })]\n    });\n  }\n\n  if (error.message) {\n    const {\n      msg,\n      json\n    } = parseErrorMessage(error.message);\n\n    if (!json) {\n      return /*#__PURE__*/_jsx(\"div\", {\n        children: msg\n      });\n    } else {\n      return /*#__PURE__*/_jsxs(_Fragment, {\n        children: [msg !== '' && /*#__PURE__*/_jsx(\"h3\", {\n          children: msg\n        }), /*#__PURE__*/_jsx(JSONFormatter, {\n          json: json,\n          open: 5\n        })]\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsx(JSONFormatter, {\n    json: error,\n    open: 2\n  });\n};","map":{"version":3,"names":["React","JSONFormatter","parseErrorMessage","message","msg","json","split","jsonError","JSON","parse","InspectErrorTab","error","data"],"sources":["/home/soula/grafana/public/app/features/inspector/InspectErrorTab.tsx"],"sourcesContent":["import React from 'react';\n\nimport { DataQueryError } from '@grafana/data';\nimport { JSONFormatter } from '@grafana/ui';\n\ninterface InspectErrorTabProps {\n  error?: DataQueryError;\n}\n\nconst parseErrorMessage = (message: string): { msg: string; json?: any } => {\n  try {\n    const [msg, json] = message.split(/(\\{.+)/);\n    const jsonError = JSON.parse(json);\n    return {\n      msg,\n      json: jsonError,\n    };\n  } catch {\n    return { msg: message };\n  }\n};\n\nexport const InspectErrorTab: React.FC<InspectErrorTabProps> = ({ error }) => {\n  if (!error) {\n    return null;\n  }\n  if (error.data) {\n    return (\n      <>\n        <h4>{error.data.message}</h4>\n        <JSONFormatter json={error} open={2} />\n      </>\n    );\n  }\n  if (error.message) {\n    const { msg, json } = parseErrorMessage(error.message);\n    if (!json) {\n      return <div>{msg}</div>;\n    } else {\n      return (\n        <>\n          {msg !== '' && <h3>{msg}</h3>}\n          <JSONFormatter json={json} open={5} />\n        </>\n      );\n    }\n  }\n  return <JSONFormatter json={error} open={2} />;\n};\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,aAAT,QAA8B,aAA9B;;;;;AAMA,MAAMC,iBAAiB,GAAIC,OAAD,IAAkD;EAC1E,IAAI;IACF,MAAM,CAACC,GAAD,EAAMC,IAAN,IAAcF,OAAO,CAACG,KAAR,CAAc,QAAd,CAApB;IACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAlB;IACA,OAAO;MACLD,GADK;MAELC,IAAI,EAAEE;IAFD,CAAP;EAID,CAPD,CAOE,MAAM;IACN,OAAO;MAAEH,GAAG,EAAED;IAAP,CAAP;EACD;AACF,CAXD;;AAaA,OAAO,MAAMO,eAA+C,GAAG,CAAC;EAAEC;AAAF,CAAD,KAAe;EAC5E,IAAI,CAACA,KAAL,EAAY;IACV,OAAO,IAAP;EACD;;EACD,IAAIA,KAAK,CAACC,IAAV,EAAgB;IACd,oBACE;MAAA,wBACE;QAAA,UAAKD,KAAK,CAACC,IAAN,CAAWT;MAAhB,EADF,eAEE,KAAC,aAAD;QAAe,IAAI,EAAEQ,KAArB;QAA4B,IAAI,EAAE;MAAlC,EAFF;IAAA,EADF;EAMD;;EACD,IAAIA,KAAK,CAACR,OAAV,EAAmB;IACjB,MAAM;MAAEC,GAAF;MAAOC;IAAP,IAAgBH,iBAAiB,CAACS,KAAK,CAACR,OAAP,CAAvC;;IACA,IAAI,CAACE,IAAL,EAAW;MACT,oBAAO;QAAA,UAAMD;MAAN,EAAP;IACD,CAFD,MAEO;MACL,oBACE;QAAA,WACGA,GAAG,KAAK,EAAR,iBAAc;UAAA,UAAKA;QAAL,EADjB,eAEE,KAAC,aAAD;UAAe,IAAI,EAAEC,IAArB;UAA2B,IAAI,EAAE;QAAjC,EAFF;MAAA,EADF;IAMD;EACF;;EACD,oBAAO,KAAC,aAAD;IAAe,IAAI,EAAEM,KAArB;IAA4B,IAAI,EAAE;EAAlC,EAAP;AACD,CA1BM"},"metadata":{},"sourceType":"module"}