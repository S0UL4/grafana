{"ast":null,"code":"import { capitalize } from 'lodash';\nimport { receiverTypeNames } from 'app/plugins/datasource/alertmanager/consts';\n// name : count\nexport function extractNotifierTypeCounts(receiver, grafanaNotifiers) {\n  if (receiver['grafana_managed_receiver_configs']) {\n    var _receiver$grafana_man;\n\n    return getGrafanaNotifierTypeCounts((_receiver$grafana_man = receiver.grafana_managed_receiver_configs) !== null && _receiver$grafana_man !== void 0 ? _receiver$grafana_man : [], grafanaNotifiers);\n  }\n\n  return getCortexAlertManagerNotifierTypeCounts(receiver);\n}\n\nfunction getCortexAlertManagerNotifierTypeCounts(receiver) {\n  return Object.entries(receiver).filter(([key]) => key !== 'grafana_managed_receiver_configs' && key.endsWith('_configs')) // filter out only properties that are alertmanager notifier\n  .filter(([_, value]) => Array.isArray(value) && !!value.length) // check that there are actually notifiers of this type configured\n  .reduce((acc, [key, value]) => {\n    var _receiverTypeNames$ty, _acc$name;\n\n    const type = key.replace('_configs', ''); // remove the `_config` part from the key, making it intto a notifier name\n\n    const name = (_receiverTypeNames$ty = receiverTypeNames[type]) !== null && _receiverTypeNames$ty !== void 0 ? _receiverTypeNames$ty : capitalize(type);\n    return Object.assign({}, acc, {\n      [name]: ((_acc$name = acc[name]) !== null && _acc$name !== void 0 ? _acc$name : 0) + (Array.isArray(value) ? value.length : 1)\n    });\n  }, {});\n}\n\nfunction getGrafanaNotifierTypeCounts(configs, grafanaNotifiers) {\n  return configs.map(recv => recv.type) // extract types from config\n  .map(type => {\n    var _grafanaNotifiers$fin, _grafanaNotifiers$fin2;\n\n    return (_grafanaNotifiers$fin = (_grafanaNotifiers$fin2 = grafanaNotifiers.find(r => r.type === type)) === null || _grafanaNotifiers$fin2 === void 0 ? void 0 : _grafanaNotifiers$fin2.name) !== null && _grafanaNotifiers$fin !== void 0 ? _grafanaNotifiers$fin : capitalize(type);\n  }) // get readable name from notifier cofnig, or if not available, just capitalize\n  .reduce((acc, type) => {\n    var _acc$type;\n\n    return Object.assign({}, acc, {\n      [type]: ((_acc$type = acc[type]) !== null && _acc$type !== void 0 ? _acc$type : 0) + 1\n    });\n  }, {});\n}","map":{"version":3,"names":["capitalize","receiverTypeNames","extractNotifierTypeCounts","receiver","grafanaNotifiers","getGrafanaNotifierTypeCounts","grafana_managed_receiver_configs","getCortexAlertManagerNotifierTypeCounts","Object","entries","filter","key","endsWith","_","value","Array","isArray","length","reduce","acc","type","replace","name","configs","map","recv","find","r"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/utils/receivers.ts"],"sourcesContent":["import { capitalize } from 'lodash';\n\nimport { receiverTypeNames } from 'app/plugins/datasource/alertmanager/consts';\nimport { GrafanaManagedReceiverConfig, Receiver } from 'app/plugins/datasource/alertmanager/types';\nimport { NotifierDTO } from 'app/types';\n\n// extract notifier type name to count map, eg { Slack: 1, Email: 2 }\n\ntype NotifierTypeCounts = Record<string, number>; // name : count\n\nexport function extractNotifierTypeCounts(receiver: Receiver, grafanaNotifiers: NotifierDTO[]): NotifierTypeCounts {\n  if (receiver['grafana_managed_receiver_configs']) {\n    return getGrafanaNotifierTypeCounts(receiver.grafana_managed_receiver_configs ?? [], grafanaNotifiers);\n  }\n  return getCortexAlertManagerNotifierTypeCounts(receiver);\n}\n\nfunction getCortexAlertManagerNotifierTypeCounts(receiver: Receiver): NotifierTypeCounts {\n  return Object.entries(receiver)\n    .filter(([key]) => key !== 'grafana_managed_receiver_configs' && key.endsWith('_configs')) // filter out only properties that are alertmanager notifier\n    .filter(([_, value]) => Array.isArray(value) && !!value.length) // check that there are actually notifiers of this type configured\n    .reduce<NotifierTypeCounts>((acc, [key, value]) => {\n      const type = key.replace('_configs', ''); // remove the `_config` part from the key, making it intto a notifier name\n      const name = receiverTypeNames[type] ?? capitalize(type);\n      return {\n        ...acc,\n        [name]: (acc[name] ?? 0) + (Array.isArray(value) ? value.length : 1),\n      };\n    }, {});\n}\n\nfunction getGrafanaNotifierTypeCounts(\n  configs: GrafanaManagedReceiverConfig[],\n  grafanaNotifiers: NotifierDTO[]\n): NotifierTypeCounts {\n  return configs\n    .map((recv) => recv.type) // extract types from config\n    .map((type) => grafanaNotifiers.find((r) => r.type === type)?.name ?? capitalize(type)) // get readable name from notifier cofnig, or if not available, just capitalize\n    .reduce<NotifierTypeCounts>(\n      (acc, type) => ({\n        ...acc,\n        [type]: (acc[type] ?? 0) + 1,\n      }),\n      {}\n    );\n}\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,QAA3B;AAEA,SAASC,iBAAT,QAAkC,4CAAlC;AAMkD;AAElD,OAAO,SAASC,yBAAT,CAAmCC,QAAnC,EAAuDC,gBAAvD,EAA4G;EACjH,IAAID,QAAQ,CAAC,kCAAD,CAAZ,EAAkD;IAAA;;IAChD,OAAOE,4BAA4B,0BAACF,QAAQ,CAACG,gCAAV,yEAA8C,EAA9C,EAAkDF,gBAAlD,CAAnC;EACD;;EACD,OAAOG,uCAAuC,CAACJ,QAAD,CAA9C;AACD;;AAED,SAASI,uCAAT,CAAiDJ,QAAjD,EAAyF;EACvF,OAAOK,MAAM,CAACC,OAAP,CAAeN,QAAf,EACJO,MADI,CACG,CAAC,CAACC,GAAD,CAAD,KAAWA,GAAG,KAAK,kCAAR,IAA8CA,GAAG,CAACC,QAAJ,CAAa,UAAb,CAD5D,EACsF;EADtF,CAEJF,MAFI,CAEG,CAAC,CAACG,CAAD,EAAIC,KAAJ,CAAD,KAAgBC,KAAK,CAACC,OAAN,CAAcF,KAAd,KAAwB,CAAC,CAACA,KAAK,CAACG,MAFnD,EAE2D;EAF3D,CAGJC,MAHI,CAGuB,CAACC,GAAD,EAAM,CAACR,GAAD,EAAMG,KAAN,CAAN,KAAuB;IAAA;;IACjD,MAAMM,IAAI,GAAGT,GAAG,CAACU,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,CAAb,CADiD,CACP;;IAC1C,MAAMC,IAAI,4BAAGrB,iBAAiB,CAACmB,IAAD,CAApB,yEAA8BpB,UAAU,CAACoB,IAAD,CAAlD;IACA,yBACKD,GADL;MAEE,CAACG,IAAD,GAAQ,cAACH,GAAG,CAACG,IAAD,CAAJ,iDAAc,CAAd,KAAoBP,KAAK,CAACC,OAAN,CAAcF,KAAd,IAAuBA,KAAK,CAACG,MAA7B,GAAsC,CAA1D;IAFV;EAID,CAVI,EAUF,EAVE,CAAP;AAWD;;AAED,SAASZ,4BAAT,CACEkB,OADF,EAEEnB,gBAFF,EAGsB;EACpB,OAAOmB,OAAO,CACXC,GADI,CACCC,IAAD,IAAUA,IAAI,CAACL,IADf,EACqB;EADrB,CAEJI,GAFI,CAECJ,IAAD;IAAA;;IAAA,0DAAUhB,gBAAgB,CAACsB,IAAjB,CAAuBC,CAAD,IAAOA,CAAC,CAACP,IAAF,KAAWA,IAAxC,CAAV,2DAAU,uBAA+CE,IAAzD,yEAAiEtB,UAAU,CAACoB,IAAD,CAA3E;EAAA,CAFA,EAEmF;EAFnF,CAGJF,MAHI,CAIH,CAACC,GAAD,EAAMC,IAAN;IAAA;;IAAA,yBACKD,GADL;MAEE,CAACC,IAAD,GAAQ,cAACD,GAAG,CAACC,IAAD,CAAJ,iDAAc,CAAd,IAAmB;IAF7B;EAAA,CAJG,EAQH,EARG,CAAP;AAUD"},"metadata":{},"sourceType":"module"}