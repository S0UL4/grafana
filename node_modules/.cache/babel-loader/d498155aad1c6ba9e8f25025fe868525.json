{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { lastValueFrom, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DataSourceApi, FieldType, MutableDataFrame } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { serializeParams } from '../../../core/utils/fetch';\nimport { apiPrefix } from './constants';\nimport { createGraphFrames } from './utils/graphTransform';\nimport { transformResponse } from './utils/transforms';\nexport class ZipkinDatasource extends DataSourceApi {\n  constructor(instanceSettings) {\n    super(instanceSettings);\n\n    _defineProperty(this, \"uploadedJson\", null);\n\n    _defineProperty(this, \"nodeGraph\", void 0);\n\n    this.instanceSettings = instanceSettings;\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n  }\n\n  query(options) {\n    const target = options.targets[0];\n\n    if (target.queryType === 'upload') {\n      if (!this.uploadedJson) {\n        return of({\n          data: []\n        });\n      }\n\n      try {\n        var _this$nodeGraph;\n\n        const traceData = JSON.parse(this.uploadedJson);\n        return of(responseToDataQueryResponse({\n          data: traceData\n        }, (_this$nodeGraph = this.nodeGraph) === null || _this$nodeGraph === void 0 ? void 0 : _this$nodeGraph.enabled));\n      } catch (error) {\n        return of({\n          error: {\n            message: 'JSON is not valid Zipkin format'\n          },\n          data: []\n        });\n      }\n    }\n\n    if (target.query) {\n      return this.request(`${apiPrefix}/trace/${encodeURIComponent(target.query)}`).pipe(map(res => {\n        var _this$nodeGraph2;\n\n        return responseToDataQueryResponse(res, (_this$nodeGraph2 = this.nodeGraph) === null || _this$nodeGraph2 === void 0 ? void 0 : _this$nodeGraph2.enabled);\n      }));\n    }\n\n    return of(emptyDataQueryResponse);\n  }\n\n  async metadataRequest(url, params) {\n    const res = await lastValueFrom(this.request(url, params, {\n      hideFromInspector: true\n    }));\n    return res.data;\n  }\n\n  async testDatasource() {\n    await this.metadataRequest(`${apiPrefix}/services`);\n    return {\n      status: 'success',\n      message: 'Data source is working'\n    };\n  }\n\n  getQueryDisplayText(query) {\n    return query.query;\n  }\n\n  request(apiUrl, data, options) {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = Object.assign({}, options, {\n      url\n    });\n    return getBackendSrv().fetch(req);\n  }\n\n}\n\nfunction responseToDataQueryResponse(response, nodeGraph = false) {\n  let data = response !== null && response !== void 0 && response.data ? [transformResponse(response === null || response === void 0 ? void 0 : response.data)] : [];\n\n  if (nodeGraph) {\n    data.push(...createGraphFrames(response === null || response === void 0 ? void 0 : response.data));\n  }\n\n  return {\n    data\n  };\n}\n\nconst emptyDataQueryResponse = {\n  data: [new MutableDataFrame({\n    fields: [{\n      name: 'trace',\n      type: FieldType.trace,\n      values: []\n    }],\n    meta: {\n      preferredVisualisationType: 'trace',\n      custom: {\n        traceFormat: 'zipkin'\n      }\n    }\n  })]\n};","map":{"version":3,"names":["lastValueFrom","of","map","DataSourceApi","FieldType","MutableDataFrame","getBackendSrv","serializeParams","apiPrefix","createGraphFrames","transformResponse","ZipkinDatasource","constructor","instanceSettings","nodeGraph","jsonData","query","options","target","targets","queryType","uploadedJson","data","traceData","JSON","parse","responseToDataQueryResponse","enabled","error","message","request","encodeURIComponent","pipe","res","emptyDataQueryResponse","metadataRequest","url","params","hideFromInspector","testDatasource","status","getQueryDisplayText","apiUrl","length","req","fetch","response","push","fields","name","type","trace","values","meta","preferredVisualisationType","custom","traceFormat"],"sources":["/home/soula/grafana/public/app/plugins/datasource/zipkin/datasource.ts"],"sourcesContent":["import { lastValueFrom, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  FieldType,\n  MutableDataFrame,\n} from '@grafana/data';\nimport { BackendSrvRequest, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\n\nimport { serializeParams } from '../../../core/utils/fetch';\n\nimport { apiPrefix } from './constants';\nimport { ZipkinQuery, ZipkinSpan } from './types';\nimport { createGraphFrames } from './utils/graphTransform';\nimport { transformResponse } from './utils/transforms';\n\nexport interface ZipkinJsonData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\nexport class ZipkinDatasource extends DataSourceApi<ZipkinQuery, ZipkinJsonData> {\n  uploadedJson: string | ArrayBuffer | null = null;\n  nodeGraph?: NodeGraphOptions;\n  constructor(private instanceSettings: DataSourceInstanceSettings<ZipkinJsonData>) {\n    super(instanceSettings);\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n  }\n\n  query(options: DataQueryRequest<ZipkinQuery>): Observable<DataQueryResponse> {\n    const target = options.targets[0];\n    if (target.queryType === 'upload') {\n      if (!this.uploadedJson) {\n        return of({ data: [] });\n      }\n\n      try {\n        const traceData = JSON.parse(this.uploadedJson as string);\n        return of(responseToDataQueryResponse({ data: traceData }, this.nodeGraph?.enabled));\n      } catch (error) {\n        return of({ error: { message: 'JSON is not valid Zipkin format' }, data: [] });\n      }\n    }\n\n    if (target.query) {\n      return this.request<ZipkinSpan[]>(`${apiPrefix}/trace/${encodeURIComponent(target.query)}`).pipe(\n        map((res) => responseToDataQueryResponse(res, this.nodeGraph?.enabled))\n      );\n    }\n    return of(emptyDataQueryResponse);\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await lastValueFrom(this.request(url, params, { hideFromInspector: true }));\n    return res.data;\n  }\n\n  async testDatasource(): Promise<{ status: string; message: string }> {\n    await this.metadataRequest(`${apiPrefix}/services`);\n    return { status: 'success', message: 'Data source is working' };\n  }\n\n  getQueryDisplayText(query: ZipkinQuery): string {\n    return query.query;\n  }\n\n  private request<T = any>(\n    apiUrl: string,\n    data?: any,\n    options?: Partial<BackendSrvRequest>\n  ): Observable<FetchResponse<T>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch<T>(req);\n  }\n}\n\nfunction responseToDataQueryResponse(response: { data: ZipkinSpan[] }, nodeGraph = false): DataQueryResponse {\n  let data = response?.data ? [transformResponse(response?.data)] : [];\n  if (nodeGraph) {\n    data.push(...createGraphFrames(response?.data));\n  }\n  return {\n    data,\n  };\n}\n\nconst emptyDataQueryResponse = {\n  data: [\n    new MutableDataFrame({\n      fields: [\n        {\n          name: 'trace',\n          type: FieldType.trace,\n          values: [],\n        },\n      ],\n      meta: {\n        preferredVisualisationType: 'trace',\n        custom: {\n          traceFormat: 'zipkin',\n        },\n      },\n    }),\n  ],\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}