{"ast":null,"code":"import React from 'react';\nimport { SelectBase } from './SelectBase';\nimport { SelectContainer, SelectContainerProps } from './SelectContainer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function Select(props) {\n  return /*#__PURE__*/_jsx(SelectBase, Object.assign({}, props));\n}\nexport function MultiSelect(props) {\n  // @ts-ignore\n  return /*#__PURE__*/_jsx(SelectBase, Object.assign({}, props, {\n    isMulti: true\n  }));\n}\nexport function AsyncSelect(props) {\n  return /*#__PURE__*/_jsx(SelectBase, Object.assign({}, props));\n}\nexport function AsyncMultiSelect(props) {\n  // @ts-ignore\n  return /*#__PURE__*/_jsx(SelectBase, Object.assign({}, props, {\n    isMulti: true\n  }));\n}\nexport { SelectContainer, SelectContainerProps };","map":{"version":3,"names":["React","SelectBase","SelectContainer","SelectContainerProps","Select","props","MultiSelect","AsyncSelect","AsyncMultiSelect"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/Select/Select.tsx"],"sourcesContent":["import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { SelectBase } from './SelectBase';\nimport { SelectContainer, SelectContainerProps } from './SelectContainer';\nimport { SelectCommonProps, MultiSelectCommonProps, SelectAsyncProps } from './types';\n\nexport function Select<T>(props: SelectCommonProps<T>) {\n  return <SelectBase {...props} />;\n}\n\nexport function MultiSelect<T>(props: MultiSelectCommonProps<T>) {\n  // @ts-ignore\n  return <SelectBase {...props} isMulti />;\n}\n\nexport interface AsyncSelectProps<T> extends Omit<SelectCommonProps<T>, 'options'>, SelectAsyncProps<T> {\n  // AsyncSelect has options stored internally. We cannot enable plain values as we don't have access to the fetched options\n  value?: SelectableValue<T> | null;\n  invalid?: boolean;\n}\n\nexport function AsyncSelect<T>(props: AsyncSelectProps<T>) {\n  return <SelectBase {...props} />;\n}\n\ninterface AsyncMultiSelectProps<T> extends Omit<MultiSelectCommonProps<T>, 'options'>, SelectAsyncProps<T> {\n  // AsyncSelect has options stored internally. We cannot enable plain values as we don't have access to the fetched options\n  value?: Array<SelectableValue<T>>;\n}\n\nexport function AsyncMultiSelect<T>(props: AsyncMultiSelectProps<T>) {\n  // @ts-ignore\n  return <SelectBase {...props} isMulti />;\n}\n\nexport { SelectContainer, SelectContainerProps };\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,eAAT,EAA0BC,oBAA1B,QAAsD,mBAAtD;;AAGA,OAAO,SAASC,MAAT,CAAmBC,KAAnB,EAAgD;EACrD,oBAAO,KAAC,UAAD,oBAAgBA,KAAhB,EAAP;AACD;AAED,OAAO,SAASC,WAAT,CAAwBD,KAAxB,EAA0D;EAC/D;EACA,oBAAO,KAAC,UAAD,oBAAgBA,KAAhB;IAAuB,OAAO;EAA9B,GAAP;AACD;AAQD,OAAO,SAASE,WAAT,CAAwBF,KAAxB,EAAoD;EACzD,oBAAO,KAAC,UAAD,oBAAgBA,KAAhB,EAAP;AACD;AAOD,OAAO,SAASG,gBAAT,CAA6BH,KAA7B,EAA8D;EACnE;EACA,oBAAO,KAAC,UAAD,oBAAgBA,KAAhB;IAAuB,OAAO;EAA9B,GAAP;AACD;AAED,SAASH,eAAT,EAA0BC,oBAA1B"},"metadata":{},"sourceType":"module"}