{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { css } from '@emotion/css';\nimport { Global } from '@emotion/react';\nimport { cloneDeep } from 'lodash';\nimport { Map as OpenLayersMap, View } from 'ol';\nimport Attribution from 'ol/control/Attribution';\nimport ScaleLine from 'ol/control/ScaleLine';\nimport Zoom from 'ol/control/Zoom';\nimport { createEmpty, extend, isEmpty } from 'ol/extent';\nimport { defaults as interactionDefaults } from 'ol/interaction';\nimport MouseWheelZoom from 'ol/interaction/MouseWheelZoom';\nimport VectorLayer from 'ol/layer/Vector';\nimport { fromLonLat, toLonLat } from 'ol/proj';\nimport React, { Component } from 'react';\nimport { Subject, Subscription } from 'rxjs';\nimport { DataHoverClearEvent, DataHoverEvent, FrameGeometrySourceMode, getFrameMatchers } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { PanelContextRoot, stylesFactory } from '@grafana/ui';\nimport { PanelEditExitedEvent } from 'app/types/events';\nimport { GeomapOverlay } from './GeomapOverlay';\nimport { GeomapTooltip } from './GeomapTooltip';\nimport { DebugOverlay } from './components/DebugOverlay';\nimport { getGlobalStyles } from './globalStyles';\nimport { defaultMarkersConfig, MARKERS_LAYER_ID } from './layers/data/markersLayer';\nimport { DEFAULT_BASEMAP_CONFIG, geomapLayerRegistry } from './layers/registry';\nimport { TooltipMode } from './types';\nimport { centerPointRegistry, MapCenterID } from './view'; // Allows multiple panels to share the same view instance\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nlet sharedView = undefined;\nexport class GeomapPanel extends Component {\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"panelContext\", {});\n\n    _defineProperty(this, \"subs\", new Subscription());\n\n    _defineProperty(this, \"globalCSS\", getGlobalStyles(config.theme2));\n\n    _defineProperty(this, \"mouseWheelZoom\", void 0);\n\n    _defineProperty(this, \"style\", getStyles(config.theme));\n\n    _defineProperty(this, \"hoverPayload\", {\n      point: {},\n      pageX: -1,\n      pageY: -1\n    });\n\n    _defineProperty(this, \"hoverEvent\", new DataHoverEvent(this.hoverPayload));\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"mapDiv\", void 0);\n\n    _defineProperty(this, \"layers\", []);\n\n    _defineProperty(this, \"byName\", new Map());\n\n    _defineProperty(this, \"getNextLayerName\", () => {\n      let idx = this.layers.length; // since basemap is 0, this looks right\n\n      while (true && idx < 100) {\n        const name = `Layer ${idx++}`;\n\n        if (!this.byName.has(name)) {\n          return name;\n        }\n      }\n\n      return `Layer ${Date.now()}`;\n    });\n\n    _defineProperty(this, \"actions\", {\n      selectLayer: uid => {\n        const selected = this.layers.findIndex(v => v.options.name === uid);\n\n        if (this.panelContext.onInstanceStateChange) {\n          this.panelContext.onInstanceStateChange({\n            map: this.map,\n            layers: this.layers,\n            selected,\n            actions: this.actions\n          });\n        }\n      },\n      canRename: v => {\n        return !this.byName.has(v);\n      },\n      deleteLayer: uid => {\n        const layers = [];\n\n        for (const lyr of this.layers) {\n          if (lyr.options.name === uid) {\n            var _this$map;\n\n            (_this$map = this.map) === null || _this$map === void 0 ? void 0 : _this$map.removeLayer(lyr.layer);\n          } else {\n            layers.push(lyr);\n          }\n        }\n\n        this.layers = layers;\n        this.doOptionsUpdate(0);\n      },\n      addlayer: type => {\n        const item = geomapLayerRegistry.getIfExists(type);\n\n        if (!item) {\n          return; // ignore empty request\n        }\n\n        this.initLayer(this.map, {\n          type: item.id,\n          name: this.getNextLayerName(),\n          config: cloneDeep(item.defaultOptions),\n          location: item.showLocation ? {\n            mode: FrameGeometrySourceMode.Auto\n          } : undefined,\n          tooltip: true\n        }, false).then(lyr => {\n          var _this$map2;\n\n          this.layers = this.layers.slice(0);\n          this.layers.push(lyr);\n          (_this$map2 = this.map) === null || _this$map2 === void 0 ? void 0 : _this$map2.addLayer(lyr.layer);\n          this.doOptionsUpdate(this.layers.length - 1);\n        });\n      },\n      reorder: (startIndex, endIndex) => {\n        var _this$map3;\n\n        const result = Array.from(this.layers);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n        this.layers = result;\n        this.doOptionsUpdate(endIndex); // Add the layers in the right order\n\n        const group = (_this$map3 = this.map) === null || _this$map3 === void 0 ? void 0 : _this$map3.getLayers();\n        group.clear();\n        this.layers.forEach(v => group.push(v.layer));\n      }\n    });\n\n    _defineProperty(this, \"initMapRef\", async div => {\n      this.mapDiv = div;\n\n      if (this.map) {\n        this.map.dispose();\n      }\n\n      if (!div) {\n        this.map = undefined;\n        return;\n      }\n\n      const {\n        options\n      } = this.props;\n      const map = this.map = new OpenLayersMap({\n        view: this.initMapView(options.view, undefined),\n        pixelRatio: 1,\n        // or zoom?\n        layers: [],\n        // loaded explicitly below\n        controls: [],\n        target: div,\n        interactions: interactionDefaults({\n          mouseWheelZoom: false // managed by initControls\n\n        })\n      });\n      this.byName.clear();\n      const layers = [];\n\n      try {\n        var _options$basemap, _options$layers;\n\n        layers.push(await this.initLayer(map, (_options$basemap = options.basemap) !== null && _options$basemap !== void 0 ? _options$basemap : DEFAULT_BASEMAP_CONFIG, true)); // Default layer values\n\n        const layerOptions = (_options$layers = options.layers) !== null && _options$layers !== void 0 ? _options$layers : [defaultMarkersConfig];\n\n        for (const lyr of layerOptions) {\n          layers.push(await this.initLayer(map, lyr, false));\n        }\n      } catch (ex) {\n        console.error('error loading layers', ex);\n      }\n\n      for (const lyr of layers) {\n        map.addLayer(lyr.layer);\n      }\n\n      this.layers = layers;\n      this.map = map; // redundant\n\n      this.initViewExtent(map.getView(), options.view, map.getLayers());\n      this.mouseWheelZoom = new MouseWheelZoom();\n      this.map.addInteraction(this.mouseWheelZoom);\n      this.initControls(options.controls);\n      this.forceUpdate(); // first render\n      // Tooltip listener\n\n      this.map.on('singleclick', this.pointerClickListener);\n      this.map.on('pointermove', this.pointerMoveListener);\n      this.map.getViewport().addEventListener('mouseout', evt => {\n        this.props.eventBus.publish(new DataHoverClearEvent());\n      }); // Notify the panel editor\n\n      if (this.panelContext.onInstanceStateChange) {\n        this.panelContext.onInstanceStateChange({\n          map: this.map,\n          layers: layers,\n          selected: layers.length - 1,\n          // the top layer\n          actions: this.actions\n        });\n      }\n\n      this.setState({\n        legends: this.getLegends()\n      });\n    });\n\n    _defineProperty(this, \"clearTooltip\", () => {\n      if (this.state.ttip && !this.state.ttipOpen) {\n        this.tooltipPopupClosed();\n      }\n    });\n\n    _defineProperty(this, \"tooltipPopupClosed\", () => {\n      this.setState({\n        ttipOpen: false,\n        ttip: undefined\n      });\n    });\n\n    _defineProperty(this, \"pointerClickListener\", evt => {\n      if (this.pointerMoveListener(evt)) {\n        evt.preventDefault();\n        evt.stopPropagation();\n        this.mapDiv.style.cursor = 'auto';\n        this.setState({\n          ttipOpen: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"pointerMoveListener\", evt => {\n      if (!this.map || this.state.ttipOpen) {\n        return false;\n      }\n\n      const mouse = evt.originalEvent;\n      const pixel = this.map.getEventPixel(mouse);\n      const hover = toLonLat(this.map.getCoordinateFromPixel(pixel));\n      const {\n        hoverPayload\n      } = this;\n      hoverPayload.pageX = mouse.pageX;\n      hoverPayload.pageY = mouse.pageY;\n      hoverPayload.point = {\n        lat: hover[1],\n        lon: hover[0]\n      };\n      hoverPayload.data = undefined;\n      hoverPayload.columnIndex = undefined;\n      hoverPayload.rowIndex = undefined;\n      hoverPayload.layers = undefined;\n      const layers = [];\n      const layerLookup = new Map();\n      let ttip = {};\n      this.map.forEachFeatureAtPixel(pixel, (feature, layer, geo) => {\n        const s = layer.__state; //match hover layer to layer in layers\n        //check if the layer show tooltip is enabled\n        //then also pass the list of tooltip fields if exists\n        //this is used as the generic hover event\n\n        if (!hoverPayload.data) {\n          const props = feature.getProperties();\n          const frame = props['frame'];\n\n          if (frame) {\n            hoverPayload.data = ttip.data = frame;\n            hoverPayload.rowIndex = ttip.rowIndex = props['rowIndex'];\n          }\n\n          if (s !== null && s !== void 0 && s.mouseEvents) {\n            s.mouseEvents.next(feature);\n          }\n        }\n\n        if (s) {\n          let h = layerLookup.get(s);\n\n          if (!h) {\n            h = {\n              layer: s,\n              features: []\n            };\n            layerLookup.set(s, h);\n            layers.push(h);\n          }\n\n          h.features.push(feature);\n        }\n      }, {\n        layerFilter: l => {\n          var _hoverLayerState$opti;\n\n          const hoverLayerState = l.__state;\n          return (hoverLayerState === null || hoverLayerState === void 0 ? void 0 : (_hoverLayerState$opti = hoverLayerState.options) === null || _hoverLayerState$opti === void 0 ? void 0 : _hoverLayerState$opti.tooltip) !== false;\n        }\n      });\n      this.hoverPayload.layers = layers.length ? layers : undefined;\n      this.props.eventBus.publish(this.hoverEvent);\n      this.setState({\n        ttip: Object.assign({}, hoverPayload)\n      });\n\n      if (!layers.length) {\n        // clear mouse events\n        this.layers.forEach(layer => {\n          layer.mouseEvents.next(undefined);\n        });\n      }\n\n      const found = layers.length ? true : false;\n      this.mapDiv.style.cursor = found ? 'pointer' : 'auto';\n      return found;\n    });\n\n    _defineProperty(this, \"updateLayer\", async (uid, newOptions) => {\n      var _this$map4;\n\n      if (!this.map) {\n        return false;\n      }\n\n      const current = this.byName.get(uid);\n\n      if (!current) {\n        return false;\n      }\n\n      let layerIndex = -1;\n      const group = (_this$map4 = this.map) === null || _this$map4 === void 0 ? void 0 : _this$map4.getLayers();\n\n      for (let i = 0; i < (group === null || group === void 0 ? void 0 : group.getLength()); i++) {\n        if (group.item(i) === current.layer) {\n          layerIndex = i;\n          break;\n        }\n      } // Special handling for rename\n\n\n      if (newOptions.name !== uid) {\n        if (!newOptions.name) {\n          newOptions.name = uid;\n        } else if (this.byName.has(newOptions.name)) {\n          return false;\n        }\n\n        console.log('Layer name changed', uid, '>>>', newOptions.name);\n        this.byName.delete(uid);\n        uid = newOptions.name;\n        this.byName.set(uid, current);\n      } // Type changed -- requires full re-initalization\n\n\n      if (current.options.type !== newOptions.type) {// full init\n      } else {// just update options\n      }\n\n      const layers = this.layers.slice(0);\n\n      try {\n        var _layers$layerIndex, _layers$layerIndex$ha, _layers$layerIndex$ha2;\n\n        const info = await this.initLayer(this.map, newOptions, current.isBasemap);\n        (_layers$layerIndex = layers[layerIndex]) === null || _layers$layerIndex === void 0 ? void 0 : (_layers$layerIndex$ha = (_layers$layerIndex$ha2 = _layers$layerIndex.handler).dispose) === null || _layers$layerIndex$ha === void 0 ? void 0 : _layers$layerIndex$ha.call(_layers$layerIndex$ha2);\n        layers[layerIndex] = info;\n        group.setAt(layerIndex, info.layer); // initialize with new data\n\n        this.applyLayerFilter(info.handler, newOptions);\n      } catch (err) {\n        console.warn('ERROR', err);\n        return false;\n      } // Just to trigger a state update\n\n\n      this.setState({\n        legends: []\n      });\n      this.layers = layers;\n      this.doOptionsUpdate(layerIndex);\n      return true;\n    });\n\n    this.state = {\n      ttipOpen: false,\n      legends: []\n    };\n    this.subs.add(this.props.eventBus.subscribe(PanelEditExitedEvent, evt => {\n      if (this.mapDiv && this.props.id === evt.payload) {\n        this.initMapRef(this.mapDiv);\n      }\n    }));\n  }\n\n  componentDidMount() {\n    this.panelContext = this.context;\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n\n    for (const lyr of this.layers) {\n      var _lyr$handler$dispose, _lyr$handler;\n\n      (_lyr$handler$dispose = (_lyr$handler = lyr.handler).dispose) === null || _lyr$handler$dispose === void 0 ? void 0 : _lyr$handler$dispose.call(_lyr$handler);\n    }\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (!this.map) {\n      return true; // not yet initialized\n    } // Check for resize\n\n\n    if (this.props.height !== nextProps.height || this.props.width !== nextProps.width) {\n      this.map.updateSize();\n    } // External data changed\n\n\n    if (this.props.data !== nextProps.data) {\n      this.dataChanged(nextProps.data);\n    } // Options changed\n\n\n    if (this.props.options !== nextProps.options) {\n      this.optionsChanged(nextProps.options);\n    }\n\n    return true; // always?\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.map && (this.props.height !== prevProps.height || this.props.width !== prevProps.width)) {\n      this.map.updateSize();\n    }\n  }\n  /** This function will actually update the JSON model */\n\n\n  doOptionsUpdate(selected) {\n    const {\n      options,\n      onOptionsChange\n    } = this.props;\n    const layers = this.layers;\n    onOptionsChange(Object.assign({}, options, {\n      basemap: layers[0].options,\n      layers: layers.slice(1).map(v => v.options)\n    })); // Notify the panel editor\n\n    if (this.panelContext.onInstanceStateChange) {\n      this.panelContext.onInstanceStateChange({\n        map: this.map,\n        layers: layers,\n        selected,\n        actions: this.actions\n      });\n    }\n\n    this.setState({\n      legends: this.getLegends()\n    });\n  }\n\n  /**\n   * Called when the panel options change\n   *\n   * NOTE: changes to basemap and layers are handled independently\n   */\n  optionsChanged(options) {\n    const oldOptions = this.props.options;\n    console.log('options changed!', options);\n\n    if (options.view !== oldOptions.view) {\n      console.log('View changed');\n      this.map.setView(this.initMapView(options.view, this.map.getLayers()));\n    }\n\n    if (options.controls !== oldOptions.controls) {\n      var _options$controls;\n\n      console.log('Controls changed');\n      this.initControls((_options$controls = options.controls) !== null && _options$controls !== void 0 ? _options$controls : {\n        showZoom: true,\n        showAttribution: true\n      });\n    }\n  }\n  /**\n   * Called when PanelData changes (query results etc)\n   */\n\n\n  dataChanged(data) {\n    for (const state of this.layers) {\n      this.applyLayerFilter(state.handler, state.options);\n    }\n  }\n\n  async initLayer(map, options, isBasemap) {\n    var _options, _options2;\n\n    if (isBasemap && (!((_options = options) !== null && _options !== void 0 && _options.type) || config.geomapDisableCustomBaseLayer)) {\n      options = DEFAULT_BASEMAP_CONFIG;\n    } // Use default makers layer\n\n\n    if (!((_options2 = options) !== null && _options2 !== void 0 && _options2.type)) {\n      options = {\n        type: MARKERS_LAYER_ID,\n        name: this.getNextLayerName(),\n        config: {}\n      };\n    }\n\n    const item = geomapLayerRegistry.getIfExists(options.type);\n\n    if (!item) {\n      return Promise.reject('unknown layer: ' + options.type);\n    }\n\n    const handler = await item.create(map, options, this.props.eventBus, config.theme2);\n    const layer = handler.init();\n\n    if (options.opacity != null) {\n      layer.setOpacity(1 - options.opacity);\n    }\n\n    if (!options.name) {\n      options.name = this.getNextLayerName();\n    }\n\n    const UID = options.name;\n    const state = {\n      // UID, // unique name when added to the map (it may change and will need special handling)\n      isBasemap,\n      options,\n      layer,\n      handler,\n      mouseEvents: new Subject(),\n      getName: () => UID,\n      // Used by the editors\n      onChange: cfg => {\n        this.updateLayer(UID, cfg);\n      }\n    };\n    this.byName.set(UID, state);\n    state.layer.__state = state;\n    this.applyLayerFilter(handler, options);\n    return state;\n  }\n\n  applyLayerFilter(handler, options) {\n    if (handler.update) {\n      let panelData = this.props.data;\n\n      if (options.filterData) {\n        const matcherFunc = getFrameMatchers(options.filterData);\n        panelData = Object.assign({}, panelData, {\n          series: panelData.series.filter(matcherFunc)\n        });\n      }\n\n      handler.update(panelData);\n    }\n  }\n\n  initMapView(config, layers) {\n    let view = new View({\n      center: [0, 0],\n      zoom: 1,\n      showFullExtent: true // allows zooming so the full range is visible\n\n    }); // With shared views, all panels use the same view instance\n\n    if (config.shared) {\n      if (!sharedView) {\n        sharedView = view;\n      } else {\n        view = sharedView;\n      }\n    }\n\n    if (layers) {\n      this.initViewExtent(view, config, layers);\n    }\n\n    return view;\n  }\n\n  initViewExtent(view, config, layers) {\n    const v = centerPointRegistry.getIfExists(config.id);\n\n    if (v) {\n      let coord = undefined;\n\n      if (v.lat == null) {\n        if (v.id === MapCenterID.Coordinates) {\n          var _config$lon, _config$lat;\n\n          coord = [(_config$lon = config.lon) !== null && _config$lon !== void 0 ? _config$lon : 0, (_config$lat = config.lat) !== null && _config$lat !== void 0 ? _config$lat : 0];\n        } else if (v.id === MapCenterID.Fit) {\n          var extent = layers.getArray().filter(l => l instanceof VectorLayer).map(l => {\n            var _getSource$getExtent;\n\n            return (_getSource$getExtent = l.getSource().getExtent()) !== null && _getSource$getExtent !== void 0 ? _getSource$getExtent : [];\n          }).reduce(extend, createEmpty());\n\n          if (!isEmpty(extent)) {\n            var _config$zoom;\n\n            view.fit(extent, {\n              padding: [30, 30, 30, 30],\n              maxZoom: (_config$zoom = config.zoom) !== null && _config$zoom !== void 0 ? _config$zoom : config.maxZoom\n            });\n          }\n        } else {\n          console.log('TODO, view requires special handling', v);\n        }\n      } else {\n        var _v$lon, _v$lat;\n\n        coord = [(_v$lon = v.lon) !== null && _v$lon !== void 0 ? _v$lon : 0, (_v$lat = v.lat) !== null && _v$lat !== void 0 ? _v$lat : 0];\n      }\n\n      if (coord) {\n        view.setCenter(fromLonLat(coord));\n      }\n    }\n\n    if (config.maxZoom) {\n      view.setMaxZoom(config.maxZoom);\n    }\n\n    if (config.minZoom) {\n      view.setMaxZoom(config.minZoom);\n    }\n\n    if (config.zoom && (v === null || v === void 0 ? void 0 : v.id) !== MapCenterID.Fit) {\n      view.setZoom(config.zoom);\n    }\n  }\n\n  initControls(options) {\n    if (!this.map) {\n      return;\n    }\n\n    this.map.getControls().clear();\n\n    if (options.showZoom) {\n      this.map.addControl(new Zoom());\n    }\n\n    if (options.showScale) {\n      this.map.addControl(new ScaleLine({\n        units: options.scaleUnits,\n        minWidth: 100\n      }));\n    }\n\n    this.mouseWheelZoom.setActive(Boolean(options.mouseWheelZoom));\n\n    if (options.showAttribution) {\n      this.map.addControl(new Attribution({\n        collapsed: true,\n        collapsible: true\n      }));\n    } // Update the react overlays\n\n\n    let topRight = [];\n\n    if (options.showDebug) {\n      topRight = [/*#__PURE__*/_jsx(DebugOverlay, {\n        map: this.map\n      }, \"debug\")];\n    }\n\n    this.setState({\n      topRight\n    });\n  }\n\n  getLegends() {\n    const legends = [];\n\n    for (const state of this.layers) {\n      if (state.handler.legend) {\n        legends.push( /*#__PURE__*/_jsx(\"div\", {\n          children: state.handler.legend\n        }, state.options.name));\n      }\n    }\n\n    return legends;\n  }\n\n  render() {\n    var _options$tooltip;\n\n    let {\n      ttip,\n      ttipOpen,\n      topRight,\n      legends\n    } = this.state;\n    const {\n      options\n    } = this.props;\n    const showScale = options.controls.showScale;\n\n    if (!ttipOpen && ((_options$tooltip = options.tooltip) === null || _options$tooltip === void 0 ? void 0 : _options$tooltip.mode) === TooltipMode.None) {\n      ttip = undefined;\n    }\n\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Global, {\n        styles: this.globalCSS\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: this.style.wrap,\n        onMouseLeave: this.clearTooltip,\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: this.style.map,\n          ref: this.initMapRef\n        }), /*#__PURE__*/_jsx(GeomapOverlay, {\n          bottomLeft: legends,\n          topRight: topRight,\n          blStyle: {\n            bottom: showScale ? '35px' : '8px'\n          }\n        })]\n      }), /*#__PURE__*/_jsx(GeomapTooltip, {\n        ttip: ttip,\n        isOpen: ttipOpen,\n        onClose: this.tooltipPopupClosed\n      })]\n    });\n  }\n\n}\n\n_defineProperty(GeomapPanel, \"contextType\", PanelContextRoot);\n\nconst getStyles = stylesFactory(theme => ({\n  wrap: css`\n    position: relative;\n    width: 100%;\n    height: 100%;\n  `,\n  map: css`\n    position: absolute;\n    z-index: 0;\n    width: 100%;\n    height: 100%;\n  `\n}));","map":{"version":3,"names":["css","Global","cloneDeep","Map","OpenLayersMap","View","Attribution","ScaleLine","Zoom","createEmpty","extend","isEmpty","defaults","interactionDefaults","MouseWheelZoom","VectorLayer","fromLonLat","toLonLat","React","Component","Subject","Subscription","DataHoverClearEvent","DataHoverEvent","FrameGeometrySourceMode","getFrameMatchers","config","PanelContextRoot","stylesFactory","PanelEditExitedEvent","GeomapOverlay","GeomapTooltip","DebugOverlay","getGlobalStyles","defaultMarkersConfig","MARKERS_LAYER_ID","DEFAULT_BASEMAP_CONFIG","geomapLayerRegistry","TooltipMode","centerPointRegistry","MapCenterID","sharedView","undefined","GeomapPanel","constructor","props","theme2","getStyles","theme","point","pageX","pageY","hoverPayload","idx","layers","length","name","byName","has","Date","now","selectLayer","uid","selected","findIndex","v","options","panelContext","onInstanceStateChange","map","actions","canRename","deleteLayer","lyr","removeLayer","layer","push","doOptionsUpdate","addlayer","type","item","getIfExists","initLayer","id","getNextLayerName","defaultOptions","location","showLocation","mode","Auto","tooltip","then","slice","addLayer","reorder","startIndex","endIndex","result","Array","from","removed","splice","group","getLayers","clear","forEach","div","mapDiv","dispose","view","initMapView","pixelRatio","controls","target","interactions","mouseWheelZoom","basemap","layerOptions","ex","console","error","initViewExtent","getView","addInteraction","initControls","forceUpdate","on","pointerClickListener","pointerMoveListener","getViewport","addEventListener","evt","eventBus","publish","setState","legends","getLegends","state","ttip","ttipOpen","tooltipPopupClosed","preventDefault","stopPropagation","style","cursor","mouse","originalEvent","pixel","getEventPixel","hover","getCoordinateFromPixel","lat","lon","data","columnIndex","rowIndex","layerLookup","forEachFeatureAtPixel","feature","geo","s","__state","getProperties","frame","mouseEvents","next","h","get","features","set","layerFilter","l","hoverLayerState","hoverEvent","found","newOptions","current","layerIndex","i","getLength","log","delete","info","isBasemap","handler","setAt","applyLayerFilter","err","warn","subs","add","subscribe","payload","initMapRef","componentDidMount","context","componentWillUnmount","unsubscribe","shouldComponentUpdate","nextProps","height","width","updateSize","dataChanged","optionsChanged","componentDidUpdate","prevProps","onOptionsChange","oldOptions","setView","showZoom","showAttribution","geomapDisableCustomBaseLayer","Promise","reject","create","init","opacity","setOpacity","UID","getName","onChange","cfg","updateLayer","update","panelData","filterData","matcherFunc","series","filter","center","zoom","showFullExtent","shared","coord","Coordinates","Fit","extent","getArray","getSource","getExtent","reduce","fit","padding","maxZoom","setCenter","setMaxZoom","minZoom","setZoom","getControls","addControl","showScale","units","scaleUnits","minWidth","setActive","Boolean","collapsed","collapsible","topRight","showDebug","legend","render","None","globalCSS","wrap","clearTooltip","bottom"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/GeomapPanel.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { Global } from '@emotion/react';\nimport { cloneDeep } from 'lodash';\nimport { Collection, Map as OpenLayersMap, MapBrowserEvent, PluggableMap, View } from 'ol';\nimport { FeatureLike } from 'ol/Feature';\nimport Attribution from 'ol/control/Attribution';\nimport ScaleLine from 'ol/control/ScaleLine';\nimport Zoom from 'ol/control/Zoom';\nimport { Coordinate } from 'ol/coordinate';\nimport { createEmpty, extend, isEmpty } from 'ol/extent';\nimport { defaults as interactionDefaults } from 'ol/interaction';\nimport MouseWheelZoom from 'ol/interaction/MouseWheelZoom';\nimport BaseLayer from 'ol/layer/Base';\nimport VectorLayer from 'ol/layer/Vector';\nimport { fromLonLat, toLonLat } from 'ol/proj';\nimport React, { Component, ReactNode } from 'react';\nimport { Subject, Subscription } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  FrameGeometrySourceMode,\n  getFrameMatchers,\n  GrafanaTheme,\n  MapLayerHandler,\n  MapLayerOptions,\n  PanelData,\n  PanelProps,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { PanelContext, PanelContextRoot, stylesFactory } from '@grafana/ui';\nimport { PanelEditExitedEvent } from 'app/types/events';\n\nimport { GeomapOverlay, OverlayProps } from './GeomapOverlay';\nimport { GeomapTooltip } from './GeomapTooltip';\nimport { DebugOverlay } from './components/DebugOverlay';\nimport { GeomapHoverPayload, GeomapLayerHover } from './event';\nimport { getGlobalStyles } from './globalStyles';\nimport { defaultMarkersConfig, MARKERS_LAYER_ID } from './layers/data/markersLayer';\nimport { DEFAULT_BASEMAP_CONFIG, geomapLayerRegistry } from './layers/registry';\nimport { ControlsOptions, GeomapPanelOptions, MapLayerState, MapViewConfig, TooltipMode } from './types';\nimport { centerPointRegistry, MapCenterID } from './view';\n\n// Allows multiple panels to share the same view instance\nlet sharedView: View | undefined = undefined;\n\ntype Props = PanelProps<GeomapPanelOptions>;\ninterface State extends OverlayProps {\n  ttip?: GeomapHoverPayload;\n  ttipOpen: boolean;\n  legends: ReactNode[];\n}\n\nexport interface GeomapLayerActions {\n  selectLayer: (uid: string) => void;\n  deleteLayer: (uid: string) => void;\n  addlayer: (type: string) => void;\n  reorder: (src: number, dst: number) => void;\n  canRename: (v: string) => boolean;\n}\n\nexport interface GeomapInstanceState {\n  map?: OpenLayersMap;\n  layers: MapLayerState[];\n  selected: number;\n  actions: GeomapLayerActions;\n}\n\nexport class GeomapPanel extends Component<Props, State> {\n  static contextType = PanelContextRoot;\n  panelContext: PanelContext = {} as PanelContext;\n  private subs = new Subscription();\n\n  globalCSS = getGlobalStyles(config.theme2);\n\n  mouseWheelZoom?: MouseWheelZoom;\n  style = getStyles(config.theme);\n  hoverPayload: GeomapHoverPayload = { point: {}, pageX: -1, pageY: -1 };\n  readonly hoverEvent = new DataHoverEvent(this.hoverPayload);\n\n  map?: OpenLayersMap;\n  mapDiv?: HTMLDivElement;\n  layers: MapLayerState[] = [];\n  readonly byName = new Map<string, MapLayerState>();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { ttipOpen: false, legends: [] };\n    this.subs.add(\n      this.props.eventBus.subscribe(PanelEditExitedEvent, (evt) => {\n        if (this.mapDiv && this.props.id === evt.payload) {\n          this.initMapRef(this.mapDiv);\n        }\n      })\n    );\n  }\n\n  componentDidMount() {\n    this.panelContext = this.context as PanelContext;\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n    for (const lyr of this.layers) {\n      lyr.handler.dispose?.();\n    }\n  }\n\n  shouldComponentUpdate(nextProps: Props) {\n    if (!this.map) {\n      return true; // not yet initialized\n    }\n\n    // Check for resize\n    if (this.props.height !== nextProps.height || this.props.width !== nextProps.width) {\n      this.map.updateSize();\n    }\n\n    // External data changed\n    if (this.props.data !== nextProps.data) {\n      this.dataChanged(nextProps.data);\n    }\n\n    // Options changed\n    if (this.props.options !== nextProps.options) {\n      this.optionsChanged(nextProps.options);\n    }\n\n    return true; // always?\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.map && (this.props.height !== prevProps.height || this.props.width !== prevProps.width)) {\n      this.map.updateSize();\n    }\n  }\n\n  /** This function will actually update the JSON model */\n  private doOptionsUpdate(selected: number) {\n    const { options, onOptionsChange } = this.props;\n    const layers = this.layers;\n    onOptionsChange({\n      ...options,\n      basemap: layers[0].options,\n      layers: layers.slice(1).map((v) => v.options),\n    });\n\n    // Notify the panel editor\n    if (this.panelContext.onInstanceStateChange) {\n      this.panelContext.onInstanceStateChange({\n        map: this.map,\n        layers: layers,\n        selected,\n        actions: this.actions,\n      });\n    }\n\n    this.setState({ legends: this.getLegends() });\n  }\n\n  getNextLayerName = () => {\n    let idx = this.layers.length; // since basemap is 0, this looks right\n    while (true && idx < 100) {\n      const name = `Layer ${idx++}`;\n      if (!this.byName.has(name)) {\n        return name;\n      }\n    }\n    return `Layer ${Date.now()}`;\n  };\n\n  actions: GeomapLayerActions = {\n    selectLayer: (uid: string) => {\n      const selected = this.layers.findIndex((v) => v.options.name === uid);\n      if (this.panelContext.onInstanceStateChange) {\n        this.panelContext.onInstanceStateChange({\n          map: this.map,\n          layers: this.layers,\n          selected,\n          actions: this.actions,\n        });\n      }\n    },\n    canRename: (v: string) => {\n      return !this.byName.has(v);\n    },\n    deleteLayer: (uid: string) => {\n      const layers: MapLayerState[] = [];\n      for (const lyr of this.layers) {\n        if (lyr.options.name === uid) {\n          this.map?.removeLayer(lyr.layer);\n        } else {\n          layers.push(lyr);\n        }\n      }\n      this.layers = layers;\n      this.doOptionsUpdate(0);\n    },\n    addlayer: (type: string) => {\n      const item = geomapLayerRegistry.getIfExists(type);\n      if (!item) {\n        return; // ignore empty request\n      }\n      this.initLayer(\n        this.map!,\n        {\n          type: item.id,\n          name: this.getNextLayerName(),\n          config: cloneDeep(item.defaultOptions),\n          location: item.showLocation ? { mode: FrameGeometrySourceMode.Auto } : undefined,\n          tooltip: true,\n        },\n        false\n      ).then((lyr) => {\n        this.layers = this.layers.slice(0);\n        this.layers.push(lyr);\n        this.map?.addLayer(lyr.layer);\n\n        this.doOptionsUpdate(this.layers.length - 1);\n      });\n    },\n    reorder: (startIndex: number, endIndex: number) => {\n      const result = Array.from(this.layers);\n      const [removed] = result.splice(startIndex, 1);\n      result.splice(endIndex, 0, removed);\n      this.layers = result;\n\n      this.doOptionsUpdate(endIndex);\n\n      // Add the layers in the right order\n      const group = this.map?.getLayers()!;\n      group.clear();\n      this.layers.forEach((v) => group.push(v.layer));\n    },\n  };\n\n  /**\n   * Called when the panel options change\n   *\n   * NOTE: changes to basemap and layers are handled independently\n   */\n  optionsChanged(options: GeomapPanelOptions) {\n    const oldOptions = this.props.options;\n    console.log('options changed!', options);\n\n    if (options.view !== oldOptions.view) {\n      console.log('View changed');\n      this.map!.setView(this.initMapView(options.view, this.map!.getLayers()));\n    }\n\n    if (options.controls !== oldOptions.controls) {\n      console.log('Controls changed');\n      this.initControls(options.controls ?? { showZoom: true, showAttribution: true });\n    }\n  }\n\n  /**\n   * Called when PanelData changes (query results etc)\n   */\n  dataChanged(data: PanelData) {\n    for (const state of this.layers) {\n      this.applyLayerFilter(state.handler, state.options);\n    }\n  }\n\n  initMapRef = async (div: HTMLDivElement) => {\n    this.mapDiv = div;\n    if (this.map) {\n      this.map.dispose();\n    }\n\n    if (!div) {\n      this.map = undefined as unknown as OpenLayersMap;\n      return;\n    }\n    const { options } = this.props;\n\n    const map = (this.map = new OpenLayersMap({\n      view: this.initMapView(options.view, undefined),\n      pixelRatio: 1, // or zoom?\n      layers: [], // loaded explicitly below\n      controls: [],\n      target: div,\n      interactions: interactionDefaults({\n        mouseWheelZoom: false, // managed by initControls\n      }),\n    }));\n\n    this.byName.clear();\n    const layers: MapLayerState[] = [];\n    try {\n      layers.push(await this.initLayer(map, options.basemap ?? DEFAULT_BASEMAP_CONFIG, true));\n\n      // Default layer values\n      const layerOptions = options.layers ?? [defaultMarkersConfig];\n\n      for (const lyr of layerOptions) {\n        layers.push(await this.initLayer(map, lyr, false));\n      }\n    } catch (ex) {\n      console.error('error loading layers', ex);\n    }\n\n    for (const lyr of layers) {\n      map.addLayer(lyr.layer);\n    }\n    this.layers = layers;\n    this.map = map; // redundant\n    this.initViewExtent(map.getView(), options.view, map.getLayers());\n\n    this.mouseWheelZoom = new MouseWheelZoom();\n    this.map.addInteraction(this.mouseWheelZoom);\n    this.initControls(options.controls);\n    this.forceUpdate(); // first render\n\n    // Tooltip listener\n    this.map.on('singleclick', this.pointerClickListener);\n    this.map.on('pointermove', this.pointerMoveListener);\n    this.map.getViewport().addEventListener('mouseout', (evt) => {\n      this.props.eventBus.publish(new DataHoverClearEvent());\n    });\n\n    // Notify the panel editor\n    if (this.panelContext.onInstanceStateChange) {\n      this.panelContext.onInstanceStateChange({\n        map: this.map,\n        layers: layers,\n        selected: layers.length - 1, // the top layer\n        actions: this.actions,\n      });\n    }\n\n    this.setState({ legends: this.getLegends() });\n  };\n\n  clearTooltip = () => {\n    if (this.state.ttip && !this.state.ttipOpen) {\n      this.tooltipPopupClosed();\n    }\n  };\n\n  tooltipPopupClosed = () => {\n    this.setState({ ttipOpen: false, ttip: undefined });\n  };\n\n  pointerClickListener = (evt: MapBrowserEvent<UIEvent>) => {\n    if (this.pointerMoveListener(evt)) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.mapDiv!.style.cursor = 'auto';\n      this.setState({ ttipOpen: true });\n    }\n  };\n\n  pointerMoveListener = (evt: MapBrowserEvent<UIEvent>) => {\n    if (!this.map || this.state.ttipOpen) {\n      return false;\n    }\n    const mouse = evt.originalEvent as any;\n    const pixel = this.map.getEventPixel(mouse);\n    const hover = toLonLat(this.map.getCoordinateFromPixel(pixel));\n\n    const { hoverPayload } = this;\n    hoverPayload.pageX = mouse.pageX;\n    hoverPayload.pageY = mouse.pageY;\n    hoverPayload.point = {\n      lat: hover[1],\n      lon: hover[0],\n    };\n    hoverPayload.data = undefined;\n    hoverPayload.columnIndex = undefined;\n    hoverPayload.rowIndex = undefined;\n    hoverPayload.layers = undefined;\n\n    const layers: GeomapLayerHover[] = [];\n    const layerLookup = new Map<MapLayerState, GeomapLayerHover>();\n\n    let ttip: GeomapHoverPayload = {} as GeomapHoverPayload;\n    this.map.forEachFeatureAtPixel(\n      pixel,\n      (feature, layer, geo) => {\n        const s: MapLayerState = (layer as any).__state;\n        //match hover layer to layer in layers\n        //check if the layer show tooltip is enabled\n        //then also pass the list of tooltip fields if exists\n        //this is used as the generic hover event\n        if (!hoverPayload.data) {\n          const props = feature.getProperties();\n          const frame = props['frame'];\n          if (frame) {\n            hoverPayload.data = ttip.data = frame as DataFrame;\n            hoverPayload.rowIndex = ttip.rowIndex = props['rowIndex'];\n          }\n\n          if (s?.mouseEvents) {\n            s.mouseEvents.next(feature);\n          }\n        }\n\n        if (s) {\n          let h = layerLookup.get(s);\n          if (!h) {\n            h = { layer: s, features: [] };\n            layerLookup.set(s, h);\n            layers.push(h);\n          }\n          h.features.push(feature);\n        }\n      },\n      {\n        layerFilter: (l) => {\n          const hoverLayerState = (l as any).__state as MapLayerState;\n          return hoverLayerState?.options?.tooltip !== false;\n        },\n      }\n    );\n    this.hoverPayload.layers = layers.length ? layers : undefined;\n    this.props.eventBus.publish(this.hoverEvent);\n\n    this.setState({ ttip: { ...hoverPayload } });\n\n    if (!layers.length) {\n      // clear mouse events\n      this.layers.forEach((layer) => {\n        layer.mouseEvents.next(undefined);\n      });\n    }\n\n    const found = layers.length ? true : false;\n    this.mapDiv!.style.cursor = found ? 'pointer' : 'auto';\n    return found;\n  };\n\n  private updateLayer = async (uid: string, newOptions: MapLayerOptions): Promise<boolean> => {\n    if (!this.map) {\n      return false;\n    }\n    const current = this.byName.get(uid);\n    if (!current) {\n      return false;\n    }\n\n    let layerIndex = -1;\n    const group = this.map?.getLayers()!;\n    for (let i = 0; i < group?.getLength(); i++) {\n      if (group.item(i) === current.layer) {\n        layerIndex = i;\n        break;\n      }\n    }\n\n    // Special handling for rename\n    if (newOptions.name !== uid) {\n      if (!newOptions.name) {\n        newOptions.name = uid;\n      } else if (this.byName.has(newOptions.name)) {\n        return false;\n      }\n      console.log('Layer name changed', uid, '>>>', newOptions.name);\n      this.byName.delete(uid);\n\n      uid = newOptions.name;\n      this.byName.set(uid, current);\n    }\n\n    // Type changed -- requires full re-initalization\n    if (current.options.type !== newOptions.type) {\n      // full init\n    } else {\n      // just update options\n    }\n\n    const layers = this.layers.slice(0);\n    try {\n      const info = await this.initLayer(this.map, newOptions, current.isBasemap);\n      layers[layerIndex]?.handler.dispose?.();\n      layers[layerIndex] = info;\n      group.setAt(layerIndex, info.layer);\n\n      // initialize with new data\n      this.applyLayerFilter(info.handler, newOptions);\n    } catch (err) {\n      console.warn('ERROR', err);\n      return false;\n    }\n\n    // Just to trigger a state update\n    this.setState({ legends: [] });\n\n    this.layers = layers;\n    this.doOptionsUpdate(layerIndex);\n    return true;\n  };\n\n  async initLayer(map: PluggableMap, options: MapLayerOptions, isBasemap?: boolean): Promise<MapLayerState> {\n    if (isBasemap && (!options?.type || config.geomapDisableCustomBaseLayer)) {\n      options = DEFAULT_BASEMAP_CONFIG;\n    }\n\n    // Use default makers layer\n    if (!options?.type) {\n      options = {\n        type: MARKERS_LAYER_ID,\n        name: this.getNextLayerName(),\n        config: {},\n      };\n    }\n\n    const item = geomapLayerRegistry.getIfExists(options.type);\n    if (!item) {\n      return Promise.reject('unknown layer: ' + options.type);\n    }\n\n    const handler = await item.create(map, options, this.props.eventBus, config.theme2);\n    const layer = handler.init();\n    if (options.opacity != null) {\n      layer.setOpacity(1 - options.opacity);\n    }\n\n    if (!options.name) {\n      options.name = this.getNextLayerName();\n    }\n\n    const UID = options.name;\n    const state: MapLayerState<any> = {\n      // UID, // unique name when added to the map (it may change and will need special handling)\n      isBasemap,\n      options,\n      layer,\n      handler,\n      mouseEvents: new Subject<FeatureLike | undefined>(),\n\n      getName: () => UID,\n\n      // Used by the editors\n      onChange: (cfg: MapLayerOptions) => {\n        this.updateLayer(UID, cfg);\n      },\n    };\n\n    this.byName.set(UID, state);\n    (state.layer as any).__state = state;\n\n    this.applyLayerFilter(handler, options);\n\n    return state;\n  }\n\n  applyLayerFilter(handler: MapLayerHandler<any>, options: MapLayerOptions<any>): void {\n    if (handler.update) {\n      let panelData = this.props.data;\n      if (options.filterData) {\n        const matcherFunc = getFrameMatchers(options.filterData);\n        panelData = {\n          ...panelData,\n          series: panelData.series.filter(matcherFunc),\n        };\n      }\n      handler.update(panelData);\n    }\n  }\n\n  initMapView(config: MapViewConfig, layers?: Collection<BaseLayer>): View {\n    let view = new View({\n      center: [0, 0],\n      zoom: 1,\n      showFullExtent: true, // allows zooming so the full range is visible\n    });\n\n    // With shared views, all panels use the same view instance\n    if (config.shared) {\n      if (!sharedView) {\n        sharedView = view;\n      } else {\n        view = sharedView;\n      }\n    }\n    if (layers) {\n      this.initViewExtent(view, config, layers);\n    }\n    return view;\n  }\n\n  initViewExtent(view: View, config: MapViewConfig, layers: Collection<BaseLayer>) {\n    const v = centerPointRegistry.getIfExists(config.id);\n    if (v) {\n      let coord: Coordinate | undefined = undefined;\n      if (v.lat == null) {\n        if (v.id === MapCenterID.Coordinates) {\n          coord = [config.lon ?? 0, config.lat ?? 0];\n        } else if (v.id === MapCenterID.Fit) {\n          var extent = layers\n            .getArray()\n            .filter((l) => l instanceof VectorLayer)\n            .map((l) => (l as VectorLayer<any>).getSource().getExtent() ?? [])\n            .reduce(extend, createEmpty());\n          if (!isEmpty(extent)) {\n            view.fit(extent, {\n              padding: [30, 30, 30, 30],\n              maxZoom: config.zoom ?? config.maxZoom,\n            });\n          }\n        } else {\n          console.log('TODO, view requires special handling', v);\n        }\n      } else {\n        coord = [v.lon ?? 0, v.lat ?? 0];\n      }\n      if (coord) {\n        view.setCenter(fromLonLat(coord));\n      }\n    }\n\n    if (config.maxZoom) {\n      view.setMaxZoom(config.maxZoom);\n    }\n    if (config.minZoom) {\n      view.setMaxZoom(config.minZoom);\n    }\n    if (config.zoom && v?.id !== MapCenterID.Fit) {\n      view.setZoom(config.zoom);\n    }\n  }\n\n  initControls(options: ControlsOptions) {\n    if (!this.map) {\n      return;\n    }\n    this.map.getControls().clear();\n\n    if (options.showZoom) {\n      this.map.addControl(new Zoom());\n    }\n\n    if (options.showScale) {\n      this.map.addControl(\n        new ScaleLine({\n          units: options.scaleUnits,\n          minWidth: 100,\n        })\n      );\n    }\n\n    this.mouseWheelZoom!.setActive(Boolean(options.mouseWheelZoom));\n\n    if (options.showAttribution) {\n      this.map.addControl(new Attribution({ collapsed: true, collapsible: true }));\n    }\n\n    // Update the react overlays\n    let topRight: ReactNode[] = [];\n    if (options.showDebug) {\n      topRight = [<DebugOverlay key=\"debug\" map={this.map} />];\n    }\n\n    this.setState({ topRight });\n  }\n\n  getLegends() {\n    const legends: ReactNode[] = [];\n    for (const state of this.layers) {\n      if (state.handler.legend) {\n        legends.push(<div key={state.options.name}>{state.handler.legend}</div>);\n      }\n    }\n\n    return legends;\n  }\n\n  render() {\n    let { ttip, ttipOpen, topRight, legends } = this.state;\n    const { options } = this.props;\n    const showScale = options.controls.showScale;\n    if (!ttipOpen && options.tooltip?.mode === TooltipMode.None) {\n      ttip = undefined;\n    }\n\n    return (\n      <>\n        <Global styles={this.globalCSS} />\n        <div className={this.style.wrap} onMouseLeave={this.clearTooltip}>\n          <div className={this.style.map} ref={this.initMapRef}></div>\n          <GeomapOverlay bottomLeft={legends} topRight={topRight} blStyle={{ bottom: showScale ? '35px' : '8px' }} />\n        </div>\n        <GeomapTooltip ttip={ttip} isOpen={ttipOpen} onClose={this.tooltipPopupClosed} />\n      </>\n    );\n  }\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  wrap: css`\n    position: relative;\n    width: 100%;\n    height: 100%;\n  `,\n  map: css`\n    position: absolute;\n    z-index: 0;\n    width: 100%;\n    height: 100%;\n  `,\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}