{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { featureEnabled } from '@grafana/runtime';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction } from 'app/types';\nimport { UserLdapSyncInfo } from './UserLdapSyncInfo';\nimport { UserOrgs } from './UserOrgs';\nimport { UserPermissions } from './UserPermissions';\nimport { UserProfile } from './UserProfile';\nimport { UserSessions } from './UserSessions';\nimport { loadAdminUserPage, revokeSession, revokeAllSessions, updateUser, setUserPassword, disableUser, enableUser, deleteUser, updateUserPermissions, addOrgUser, updateOrgUserRole, deleteOrgUser, syncLdapUser } from './state/actions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport class UserAdminPage extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onUserUpdate\", user => {\n      this.props.updateUser(user);\n    });\n\n    _defineProperty(this, \"onPasswordChange\", password => {\n      const {\n        user,\n        setUserPassword\n      } = this.props;\n      user && setUserPassword(user.id, password);\n    });\n\n    _defineProperty(this, \"onUserDelete\", userId => {\n      this.props.deleteUser(userId);\n    });\n\n    _defineProperty(this, \"onUserDisable\", userId => {\n      this.props.disableUser(userId);\n    });\n\n    _defineProperty(this, \"onUserEnable\", userId => {\n      this.props.enableUser(userId);\n    });\n\n    _defineProperty(this, \"onGrafanaAdminChange\", isGrafanaAdmin => {\n      const {\n        user,\n        updateUserPermissions\n      } = this.props;\n      user && updateUserPermissions(user.id, isGrafanaAdmin);\n    });\n\n    _defineProperty(this, \"onOrgRemove\", orgId => {\n      const {\n        user,\n        deleteOrgUser\n      } = this.props;\n      user && deleteOrgUser(user.id, orgId);\n    });\n\n    _defineProperty(this, \"onOrgRoleChange\", (orgId, newRole) => {\n      const {\n        user,\n        updateOrgUserRole\n      } = this.props;\n      user && updateOrgUserRole(user.id, orgId, newRole);\n    });\n\n    _defineProperty(this, \"onOrgAdd\", (orgId, role) => {\n      const {\n        user,\n        addOrgUser\n      } = this.props;\n      user && addOrgUser(user, orgId, role);\n    });\n\n    _defineProperty(this, \"onSessionRevoke\", tokenId => {\n      const {\n        user,\n        revokeSession\n      } = this.props;\n      user && revokeSession(tokenId, user.id);\n    });\n\n    _defineProperty(this, \"onAllSessionsRevoke\", () => {\n      const {\n        user,\n        revokeAllSessions\n      } = this.props;\n      user && revokeAllSessions(user.id);\n    });\n\n    _defineProperty(this, \"onUserSync\", () => {\n      const {\n        user,\n        syncLdapUser\n      } = this.props;\n      user && syncLdapUser(user.id);\n    });\n  }\n\n  async componentDidMount() {\n    const {\n      match,\n      loadAdminUserPage\n    } = this.props;\n    loadAdminUserPage(parseInt(match.params.id, 10));\n  }\n\n  render() {\n    const {\n      navModel,\n      user,\n      orgs,\n      sessions,\n      ldapSyncInfo,\n      isLoading\n    } = this.props;\n    const isLDAPUser = user && user.isExternal && user.authLabels && user.authLabels.includes('LDAP');\n    const canReadSessions = contextSrv.hasPermission(AccessControlAction.UsersAuthTokenList);\n    const canReadLDAPStatus = contextSrv.hasPermission(AccessControlAction.LDAPStatusRead);\n    return /*#__PURE__*/_jsx(Page, {\n      navModel: navModel,\n      children: /*#__PURE__*/_jsxs(Page.Contents, {\n        isLoading: isLoading,\n        children: [user && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(UserProfile, {\n            user: user,\n            onUserUpdate: this.onUserUpdate,\n            onUserDelete: this.onUserDelete,\n            onUserDisable: this.onUserDisable,\n            onUserEnable: this.onUserEnable,\n            onPasswordChange: this.onPasswordChange\n          }), isLDAPUser && featureEnabled('ldapsync') && ldapSyncInfo && canReadLDAPStatus && /*#__PURE__*/_jsx(UserLdapSyncInfo, {\n            ldapSyncInfo: ldapSyncInfo,\n            user: user,\n            onUserSync: this.onUserSync\n          }), /*#__PURE__*/_jsx(UserPermissions, {\n            isGrafanaAdmin: user.isGrafanaAdmin,\n            onGrafanaAdminChange: this.onGrafanaAdminChange\n          })]\n        }), orgs && /*#__PURE__*/_jsx(UserOrgs, {\n          user: user,\n          orgs: orgs,\n          isExternalUser: user === null || user === void 0 ? void 0 : user.isExternal,\n          onOrgRemove: this.onOrgRemove,\n          onOrgRoleChange: this.onOrgRoleChange,\n          onOrgAdd: this.onOrgAdd\n        }), sessions && canReadSessions && /*#__PURE__*/_jsx(UserSessions, {\n          sessions: sessions,\n          onSessionRevoke: this.onSessionRevoke,\n          onAllSessionsRevoke: this.onAllSessionsRevoke\n        })]\n      })\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  navModel: getNavModel(state.navIndex, 'global-users'),\n  user: state.userAdmin.user,\n  sessions: state.userAdmin.sessions,\n  orgs: state.userAdmin.orgs,\n  ldapSyncInfo: state.ldap.syncInfo,\n  isLoading: state.userAdmin.isLoading,\n  error: state.userAdmin.error\n});\n\nconst mapDispatchToProps = {\n  loadAdminUserPage,\n  updateUser,\n  setUserPassword,\n  disableUser,\n  enableUser,\n  deleteUser,\n  updateUserPermissions,\n  addOrgUser,\n  updateOrgUserRole,\n  deleteOrgUser,\n  revokeSession,\n  revokeAllSessions,\n  syncLdapUser\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connector(UserAdminPage);","map":{"version":3,"names":["React","PureComponent","connect","featureEnabled","Page","contextSrv","getNavModel","AccessControlAction","UserLdapSyncInfo","UserOrgs","UserPermissions","UserProfile","UserSessions","loadAdminUserPage","revokeSession","revokeAllSessions","updateUser","setUserPassword","disableUser","enableUser","deleteUser","updateUserPermissions","addOrgUser","updateOrgUserRole","deleteOrgUser","syncLdapUser","UserAdminPage","user","props","password","id","userId","isGrafanaAdmin","orgId","newRole","role","tokenId","componentDidMount","match","parseInt","params","render","navModel","orgs","sessions","ldapSyncInfo","isLoading","isLDAPUser","isExternal","authLabels","includes","canReadSessions","hasPermission","UsersAuthTokenList","canReadLDAPStatus","LDAPStatusRead","onUserUpdate","onUserDelete","onUserDisable","onUserEnable","onPasswordChange","onUserSync","onGrafanaAdminChange","onOrgRemove","onOrgRoleChange","onOrgAdd","onSessionRevoke","onAllSessionsRevoke","mapStateToProps","state","navIndex","userAdmin","ldap","syncInfo","error","mapDispatchToProps","connector"],"sources":["/home/soula/grafana/public/app/features/admin/UserAdminPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState, UserDTO, UserOrg, UserSession, SyncInfo, UserAdminError, AccessControlAction } from 'app/types';\n\nimport { UserLdapSyncInfo } from './UserLdapSyncInfo';\nimport { UserOrgs } from './UserOrgs';\nimport { UserPermissions } from './UserPermissions';\nimport { UserProfile } from './UserProfile';\nimport { UserSessions } from './UserSessions';\nimport {\n  loadAdminUserPage,\n  revokeSession,\n  revokeAllSessions,\n  updateUser,\n  setUserPassword,\n  disableUser,\n  enableUser,\n  deleteUser,\n  updateUserPermissions,\n  addOrgUser,\n  updateOrgUserRole,\n  deleteOrgUser,\n  syncLdapUser,\n} from './state/actions';\n\ninterface OwnProps extends GrafanaRouteComponentProps<{ id: string }> {\n  navModel: NavModel;\n  user?: UserDTO;\n  orgs: UserOrg[];\n  sessions: UserSession[];\n  ldapSyncInfo?: SyncInfo;\n  isLoading: boolean;\n  error?: UserAdminError;\n}\n\nexport class UserAdminPage extends PureComponent<Props> {\n  async componentDidMount() {\n    const { match, loadAdminUserPage } = this.props;\n    loadAdminUserPage(parseInt(match.params.id, 10));\n  }\n\n  onUserUpdate = (user: UserDTO) => {\n    this.props.updateUser(user);\n  };\n\n  onPasswordChange = (password: string) => {\n    const { user, setUserPassword } = this.props;\n    user && setUserPassword(user.id, password);\n  };\n\n  onUserDelete = (userId: number) => {\n    this.props.deleteUser(userId);\n  };\n\n  onUserDisable = (userId: number) => {\n    this.props.disableUser(userId);\n  };\n\n  onUserEnable = (userId: number) => {\n    this.props.enableUser(userId);\n  };\n\n  onGrafanaAdminChange = (isGrafanaAdmin: boolean) => {\n    const { user, updateUserPermissions } = this.props;\n    user && updateUserPermissions(user.id, isGrafanaAdmin);\n  };\n\n  onOrgRemove = (orgId: number) => {\n    const { user, deleteOrgUser } = this.props;\n    user && deleteOrgUser(user.id, orgId);\n  };\n\n  onOrgRoleChange = (orgId: number, newRole: string) => {\n    const { user, updateOrgUserRole } = this.props;\n    user && updateOrgUserRole(user.id, orgId, newRole);\n  };\n\n  onOrgAdd = (orgId: number, role: string) => {\n    const { user, addOrgUser } = this.props;\n    user && addOrgUser(user, orgId, role);\n  };\n\n  onSessionRevoke = (tokenId: number) => {\n    const { user, revokeSession } = this.props;\n    user && revokeSession(tokenId, user.id);\n  };\n\n  onAllSessionsRevoke = () => {\n    const { user, revokeAllSessions } = this.props;\n    user && revokeAllSessions(user.id);\n  };\n\n  onUserSync = () => {\n    const { user, syncLdapUser } = this.props;\n    user && syncLdapUser(user.id);\n  };\n\n  render() {\n    const { navModel, user, orgs, sessions, ldapSyncInfo, isLoading } = this.props;\n    const isLDAPUser = user && user.isExternal && user.authLabels && user.authLabels.includes('LDAP');\n    const canReadSessions = contextSrv.hasPermission(AccessControlAction.UsersAuthTokenList);\n    const canReadLDAPStatus = contextSrv.hasPermission(AccessControlAction.LDAPStatusRead);\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {user && (\n            <>\n              <UserProfile\n                user={user}\n                onUserUpdate={this.onUserUpdate}\n                onUserDelete={this.onUserDelete}\n                onUserDisable={this.onUserDisable}\n                onUserEnable={this.onUserEnable}\n                onPasswordChange={this.onPasswordChange}\n              />\n              {isLDAPUser && featureEnabled('ldapsync') && ldapSyncInfo && canReadLDAPStatus && (\n                <UserLdapSyncInfo ldapSyncInfo={ldapSyncInfo} user={user} onUserSync={this.onUserSync} />\n              )}\n              <UserPermissions isGrafanaAdmin={user.isGrafanaAdmin} onGrafanaAdminChange={this.onGrafanaAdminChange} />\n            </>\n          )}\n\n          {orgs && (\n            <UserOrgs\n              user={user}\n              orgs={orgs}\n              isExternalUser={user?.isExternal}\n              onOrgRemove={this.onOrgRemove}\n              onOrgRoleChange={this.onOrgRoleChange}\n              onOrgAdd={this.onOrgAdd}\n            />\n          )}\n\n          {sessions && canReadSessions && (\n            <UserSessions\n              sessions={sessions}\n              onSessionRevoke={this.onSessionRevoke}\n              onAllSessionsRevoke={this.onAllSessionsRevoke}\n            />\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'global-users'),\n  user: state.userAdmin.user,\n  sessions: state.userAdmin.sessions,\n  orgs: state.userAdmin.orgs,\n  ldapSyncInfo: state.ldap.syncInfo,\n  isLoading: state.userAdmin.isLoading,\n  error: state.userAdmin.error,\n});\n\nconst mapDispatchToProps = {\n  loadAdminUserPage,\n  updateUser,\n  setUserPassword,\n  disableUser,\n  enableUser,\n  deleteUser,\n  updateUserPermissions,\n  addOrgUser,\n  updateOrgUserRole,\n  deleteOrgUser,\n  revokeSession,\n  revokeAllSessions,\n  syncLdapUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = OwnProps & ConnectedProps<typeof connector>;\nexport default connector(UserAdminPage);\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,OAAT,QAAwC,aAAxC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAA8EC,mBAA9E,QAAyG,WAAzG;AAEA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACEC,iBADF,EAEEC,aAFF,EAGEC,iBAHF,EAIEC,UAJF,EAKEC,eALF,EAMEC,WANF,EAOEC,UAPF,EAQEC,UARF,EASEC,qBATF,EAUEC,UAVF,EAWEC,iBAXF,EAYEC,aAZF,EAaEC,YAbF,QAcO,iBAdP;;;;AA0BA,OAAO,MAAMC,aAAN,SAA4BzB,aAA5B,CAAiD;EAAA;IAAA;;IAAA,sCAMtC0B,IAAD,IAAmB;MAChC,KAAKC,KAAL,CAAWZ,UAAX,CAAsBW,IAAtB;IACD,CARqD;;IAAA,0CAUlCE,QAAD,IAAsB;MACvC,MAAM;QAAEF,IAAF;QAAQV;MAAR,IAA4B,KAAKW,KAAvC;MACAD,IAAI,IAAIV,eAAe,CAACU,IAAI,CAACG,EAAN,EAAUD,QAAV,CAAvB;IACD,CAbqD;;IAAA,sCAetCE,MAAD,IAAoB;MACjC,KAAKH,KAAL,CAAWR,UAAX,CAAsBW,MAAtB;IACD,CAjBqD;;IAAA,uCAmBrCA,MAAD,IAAoB;MAClC,KAAKH,KAAL,CAAWV,WAAX,CAAuBa,MAAvB;IACD,CArBqD;;IAAA,sCAuBtCA,MAAD,IAAoB;MACjC,KAAKH,KAAL,CAAWT,UAAX,CAAsBY,MAAtB;IACD,CAzBqD;;IAAA,8CA2B9BC,cAAD,IAA6B;MAClD,MAAM;QAAEL,IAAF;QAAQN;MAAR,IAAkC,KAAKO,KAA7C;MACAD,IAAI,IAAIN,qBAAqB,CAACM,IAAI,CAACG,EAAN,EAAUE,cAAV,CAA7B;IACD,CA9BqD;;IAAA,qCAgCvCC,KAAD,IAAmB;MAC/B,MAAM;QAAEN,IAAF;QAAQH;MAAR,IAA0B,KAAKI,KAArC;MACAD,IAAI,IAAIH,aAAa,CAACG,IAAI,CAACG,EAAN,EAAUG,KAAV,CAArB;IACD,CAnCqD;;IAAA,yCAqCpC,CAACA,KAAD,EAAgBC,OAAhB,KAAoC;MACpD,MAAM;QAAEP,IAAF;QAAQJ;MAAR,IAA8B,KAAKK,KAAzC;MACAD,IAAI,IAAIJ,iBAAiB,CAACI,IAAI,CAACG,EAAN,EAAUG,KAAV,EAAiBC,OAAjB,CAAzB;IACD,CAxCqD;;IAAA,kCA0C3C,CAACD,KAAD,EAAgBE,IAAhB,KAAiC;MAC1C,MAAM;QAAER,IAAF;QAAQL;MAAR,IAAuB,KAAKM,KAAlC;MACAD,IAAI,IAAIL,UAAU,CAACK,IAAD,EAAOM,KAAP,EAAcE,IAAd,CAAlB;IACD,CA7CqD;;IAAA,yCA+CnCC,OAAD,IAAqB;MACrC,MAAM;QAAET,IAAF;QAAQb;MAAR,IAA0B,KAAKc,KAArC;MACAD,IAAI,IAAIb,aAAa,CAACsB,OAAD,EAAUT,IAAI,CAACG,EAAf,CAArB;IACD,CAlDqD;;IAAA,6CAoDhC,MAAM;MAC1B,MAAM;QAAEH,IAAF;QAAQZ;MAAR,IAA8B,KAAKa,KAAzC;MACAD,IAAI,IAAIZ,iBAAiB,CAACY,IAAI,CAACG,EAAN,CAAzB;IACD,CAvDqD;;IAAA,oCAyDzC,MAAM;MACjB,MAAM;QAAEH,IAAF;QAAQF;MAAR,IAAyB,KAAKG,KAApC;MACAD,IAAI,IAAIF,YAAY,CAACE,IAAI,CAACG,EAAN,CAApB;IACD,CA5DqD;EAAA;;EAC/B,MAAjBO,iBAAiB,GAAG;IACxB,MAAM;MAAEC,KAAF;MAASzB;IAAT,IAA+B,KAAKe,KAA1C;IACAf,iBAAiB,CAAC0B,QAAQ,CAACD,KAAK,CAACE,MAAN,CAAaV,EAAd,EAAkB,EAAlB,CAAT,CAAjB;EACD;;EA0DDW,MAAM,GAAG;IACP,MAAM;MAAEC,QAAF;MAAYf,IAAZ;MAAkBgB,IAAlB;MAAwBC,QAAxB;MAAkCC,YAAlC;MAAgDC;IAAhD,IAA8D,KAAKlB,KAAzE;IACA,MAAMmB,UAAU,GAAGpB,IAAI,IAAIA,IAAI,CAACqB,UAAb,IAA2BrB,IAAI,CAACsB,UAAhC,IAA8CtB,IAAI,CAACsB,UAAL,CAAgBC,QAAhB,CAAyB,MAAzB,CAAjE;IACA,MAAMC,eAAe,GAAG9C,UAAU,CAAC+C,aAAX,CAAyB7C,mBAAmB,CAAC8C,kBAA7C,CAAxB;IACA,MAAMC,iBAAiB,GAAGjD,UAAU,CAAC+C,aAAX,CAAyB7C,mBAAmB,CAACgD,cAA7C,CAA1B;IAEA,oBACE,KAAC,IAAD;MAAM,QAAQ,EAAEb,QAAhB;MAAA,uBACE,MAAC,IAAD,CAAM,QAAN;QAAe,SAAS,EAAEI,SAA1B;QAAA,WACGnB,IAAI,iBACH;UAAA,wBACE,KAAC,WAAD;YACE,IAAI,EAAEA,IADR;YAEE,YAAY,EAAE,KAAK6B,YAFrB;YAGE,YAAY,EAAE,KAAKC,YAHrB;YAIE,aAAa,EAAE,KAAKC,aAJtB;YAKE,YAAY,EAAE,KAAKC,YALrB;YAME,gBAAgB,EAAE,KAAKC;UANzB,EADF,EASGb,UAAU,IAAI5C,cAAc,CAAC,UAAD,CAA5B,IAA4C0C,YAA5C,IAA4DS,iBAA5D,iBACC,KAAC,gBAAD;YAAkB,YAAY,EAAET,YAAhC;YAA8C,IAAI,EAAElB,IAApD;YAA0D,UAAU,EAAE,KAAKkC;UAA3E,EAVJ,eAYE,KAAC,eAAD;YAAiB,cAAc,EAAElC,IAAI,CAACK,cAAtC;YAAsD,oBAAoB,EAAE,KAAK8B;UAAjF,EAZF;QAAA,EAFJ,EAkBGnB,IAAI,iBACH,KAAC,QAAD;UACE,IAAI,EAAEhB,IADR;UAEE,IAAI,EAAEgB,IAFR;UAGE,cAAc,EAAEhB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEqB,UAHxB;UAIE,WAAW,EAAE,KAAKe,WAJpB;UAKE,eAAe,EAAE,KAAKC,eALxB;UAME,QAAQ,EAAE,KAAKC;QANjB,EAnBJ,EA6BGrB,QAAQ,IAAIO,eAAZ,iBACC,KAAC,YAAD;UACE,QAAQ,EAAEP,QADZ;UAEE,eAAe,EAAE,KAAKsB,eAFxB;UAGE,mBAAmB,EAAE,KAAKC;QAH5B,EA9BJ;MAAA;IADF,EADF;EAyCD;;AA7GqD;;AAgHxD,MAAMC,eAAe,GAAIC,KAAD,KAAwB;EAC9C3B,QAAQ,EAAEpC,WAAW,CAAC+D,KAAK,CAACC,QAAP,EAAiB,cAAjB,CADyB;EAE9C3C,IAAI,EAAE0C,KAAK,CAACE,SAAN,CAAgB5C,IAFwB;EAG9CiB,QAAQ,EAAEyB,KAAK,CAACE,SAAN,CAAgB3B,QAHoB;EAI9CD,IAAI,EAAE0B,KAAK,CAACE,SAAN,CAAgB5B,IAJwB;EAK9CE,YAAY,EAAEwB,KAAK,CAACG,IAAN,CAAWC,QALqB;EAM9C3B,SAAS,EAAEuB,KAAK,CAACE,SAAN,CAAgBzB,SANmB;EAO9C4B,KAAK,EAAEL,KAAK,CAACE,SAAN,CAAgBG;AAPuB,CAAxB,CAAxB;;AAUA,MAAMC,kBAAkB,GAAG;EACzB9D,iBADyB;EAEzBG,UAFyB;EAGzBC,eAHyB;EAIzBC,WAJyB;EAKzBC,UALyB;EAMzBC,UANyB;EAOzBC,qBAPyB;EAQzBC,UARyB;EASzBC,iBATyB;EAUzBC,aAVyB;EAWzBV,aAXyB;EAYzBC,iBAZyB;EAazBU;AAbyB,CAA3B;AAgBA,MAAMmD,SAAS,GAAG1E,OAAO,CAACkE,eAAD,EAAkBO,kBAAlB,CAAzB;AAEA,eAAeC,SAAS,CAAClD,aAAD,CAAxB"},"metadata":{},"sourceType":"module"}