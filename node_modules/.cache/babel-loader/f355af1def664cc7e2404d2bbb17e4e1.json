{"ast":null,"code":"// Metric Math: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html\nexport const METRIC_MATH_FNS = ['ABS', 'ANOMALY_DETECTION_BAND', 'AVG', 'CEIL', 'DATAPOINT_COUNT', 'DIFF', 'DIFF_TIME', 'FILL', 'FIRST', 'LAST', 'FLOOR', 'IF', 'INSIGHT_RULE_METRIC', 'LOG', 'LOG10', 'MAX', 'METRIC_COUNT', 'METRICS', 'MIN', 'MINUTE', 'HOUR', 'DAY', 'DATE', 'MONTH', 'YEAR', 'EPOCH', 'PERIOD', 'RATE', 'REMOVE_EMPTY', 'RUNNING_SUM', 'SEARCH', 'SERVICE_QUOTA', 'SLICE', 'SORT', 'STDDEV', 'SUM', 'TIME_SERIES'];\nexport const METRIC_MATH_STATISTIC_KEYWORD_STRINGS = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount']; // second arguments to SEARCH function\n\nexport const METRIC_MATH_KEYWORDS = ['REPEAT', 'LINEAR', 'ASC', 'DSC']; // standalone magic arguments to functions\n\nexport const METRIC_MATH_OPERATORS = ['+', '-', '*', '/', '^', '==', '!=', '<=', '>=', '<', '>', 'AND', '&&', 'OR', '||'];\nexport const METRIC_MATH_PERIODS = [10, 60, 300, 900, 3000, 21600, 86400];\nexport const language = {\n  id: 'metricMath',\n  ignoreCase: false,\n  brackets: [{\n    open: '[',\n    close: ']',\n    token: 'delimiter.square'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }],\n  tokenizer: {\n    root: [{\n      include: '@nonNestableStates'\n    }, {\n      include: '@strings'\n    }],\n    nonNestableStates: [{\n      include: '@variables'\n    }, {\n      include: '@whitespace'\n    }, {\n      include: '@numbers'\n    }, {\n      include: '@assignment'\n    }, {\n      include: '@keywords'\n    }, {\n      include: '@operators'\n    }, {\n      include: '@builtInFunctions'\n    }, [/[;,.]/, 'delimiter'], [/[(){}\\[\\]]/, '@brackets'] // [], (), {} are all brackets\n    ],\n    keywords: [[METRIC_MATH_KEYWORDS.map(escapeRegExp).join('|'), 'keyword']],\n    operators: [[METRIC_MATH_OPERATORS.map(escapeRegExp).join('|'), 'operator']],\n    builtInFunctions: [[METRIC_MATH_FNS.map(escapeRegExp).join('|'), 'predefined']],\n    variables: [[/\\$[a-zA-Z0-9-_]+/, 'variable'] // $ followed by any letter/number we assume could be grafana template variable\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    assignment: [[/=/, 'tag']],\n    numbers: [[/0[xX][0-9a-fA-F]*/, 'number'], [/[$][+-]*\\d*(\\.\\d*)?/, 'number'], [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number']],\n    // states that start other states (aka nested states):\n    strings: [[/'/, {\n      token: 'string',\n      next: '@string'\n    }], [/\"/, {\n      token: 'type',\n      next: '@string_double'\n    }]],\n    string: [[/{/, {\n      token: 'delimiter.curly',\n      next: '@nestedCurly'\n    }], // escape out of string and into nestedCurly\n    [/\\(/, {\n      token: 'delimiter.parenthesis',\n      next: '@nestedParens'\n    }], // escape out of string and into nestedCurly\n    [/\"/, {\n      token: 'type',\n      next: '@string_double'\n    }], // jump into double string\n    [/'/, {\n      token: 'string',\n      next: '@pop'\n    }], // stop being a string\n    {\n      include: '@nonNestableStates'\n    }, [/[^']/, 'string'] // anything that is not a quote, is marked as string\n    ],\n    string_double: [[/[^\"]/, 'type'], // mark anything not a quote as a \"type\" (different type of string for visual difference)\n    [/\"/, {\n      token: 'type',\n      next: '@pop'\n    }] // mark also as a type and stop being in the double string state\n    ],\n    nestedCurly: [[/}/, {\n      token: 'delimiter.curly',\n      next: '@pop'\n    }], // escape out of string and into braces\n    [/'/, {\n      token: 'string',\n      next: '@string'\n    }], // go to string if see start of string\n    [/\"/, {\n      token: 'type',\n      next: '@string_double'\n    }] // go to string_double if see start of double string\n    ],\n    nestedParens: [[/\\)/, {\n      token: 'delimiter.parenthesis',\n      next: '@pop'\n    }], // escape out of string and into braces\n    [/'/, {\n      token: 'string',\n      next: '@string'\n    }], // go to string if see start of string\n    [/\"/, {\n      token: 'type',\n      next: '@string_double'\n    }] // go to string_double if see start of double string\n    ]\n  }\n};\nexport const conf = {\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: \"'\",\n    close: \"'\"\n  }]\n};\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}","map":{"version":3,"names":["METRIC_MATH_FNS","METRIC_MATH_STATISTIC_KEYWORD_STRINGS","METRIC_MATH_KEYWORDS","METRIC_MATH_OPERATORS","METRIC_MATH_PERIODS","language","id","ignoreCase","brackets","open","close","token","tokenizer","root","include","nonNestableStates","keywords","map","escapeRegExp","join","operators","builtInFunctions","variables","whitespace","assignment","numbers","strings","next","string","string_double","nestedCurly","nestedParens","conf","autoClosingPairs","surroundingPairs","replace"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/metric-math/language.ts"],"sourcesContent":["import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Metric Math: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html\nexport const METRIC_MATH_FNS = [\n  'ABS',\n  'ANOMALY_DETECTION_BAND',\n  'AVG',\n  'CEIL',\n  'DATAPOINT_COUNT',\n  'DIFF',\n  'DIFF_TIME',\n  'FILL',\n  'FIRST',\n  'LAST',\n  'FLOOR',\n  'IF',\n  'INSIGHT_RULE_METRIC',\n  'LOG',\n  'LOG10',\n  'MAX',\n  'METRIC_COUNT',\n  'METRICS',\n  'MIN',\n  'MINUTE',\n  'HOUR',\n  'DAY',\n  'DATE',\n  'MONTH',\n  'YEAR',\n  'EPOCH',\n  'PERIOD',\n  'RATE',\n  'REMOVE_EMPTY',\n  'RUNNING_SUM',\n  'SEARCH',\n  'SERVICE_QUOTA',\n  'SLICE',\n  'SORT',\n  'STDDEV',\n  'SUM',\n  'TIME_SERIES',\n];\n\nexport const METRIC_MATH_STATISTIC_KEYWORD_STRINGS = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount']; // second arguments to SEARCH function\n\nexport const METRIC_MATH_KEYWORDS = ['REPEAT', 'LINEAR', 'ASC', 'DSC']; // standalone magic arguments to functions\n\nexport const METRIC_MATH_OPERATORS = [\n  '+',\n  '-',\n  '*',\n  '/',\n  '^',\n  '==',\n  '!=',\n  '<=',\n  '>=',\n  '<',\n  '>',\n  'AND',\n  '&&',\n  'OR',\n  '||',\n];\n\nexport const METRIC_MATH_PERIODS = [10, 60, 300, 900, 3000, 21600, 86400];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'metricMath',\n  ignoreCase: false,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n    { open: '{', close: '}', token: 'delimiter.curly' },\n  ],\n  tokenizer: {\n    root: [{ include: '@nonNestableStates' }, { include: '@strings' }],\n    nonNestableStates: [\n      { include: '@variables' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@assignment' },\n      { include: '@keywords' },\n      { include: '@operators' },\n      { include: '@builtInFunctions' },\n      [/[;,.]/, 'delimiter'],\n      [/[(){}\\[\\]]/, '@brackets'], // [], (), {} are all brackets\n    ],\n    keywords: [[METRIC_MATH_KEYWORDS.map(escapeRegExp).join('|'), 'keyword']],\n    operators: [[METRIC_MATH_OPERATORS.map(escapeRegExp).join('|'), 'operator']],\n    builtInFunctions: [[METRIC_MATH_FNS.map(escapeRegExp).join('|'), 'predefined']],\n    variables: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'], // $ followed by any letter/number we assume could be grafana template variable\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    assignment: [[/=/, 'tag']],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    // states that start other states (aka nested states):\n    strings: [\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/{/, { token: 'delimiter.curly', next: '@nestedCurly' }], // escape out of string and into nestedCurly\n      [/\\(/, { token: 'delimiter.parenthesis', next: '@nestedParens' }], // escape out of string and into nestedCurly\n      [/\"/, { token: 'type', next: '@string_double' }], // jump into double string\n      [/'/, { token: 'string', next: '@pop' }], // stop being a string\n      { include: '@nonNestableStates' },\n      [/[^']/, 'string'], // anything that is not a quote, is marked as string\n    ],\n    string_double: [\n      [/[^\"]/, 'type'], // mark anything not a quote as a \"type\" (different type of string for visual difference)\n      [/\"/, { token: 'type', next: '@pop' }], // mark also as a type and stop being in the double string state\n    ],\n    nestedCurly: [\n      [/}/, { token: 'delimiter.curly', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n    nestedParens: [\n      [/\\)/, { token: 'delimiter.parenthesis', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}