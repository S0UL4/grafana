{"ast":null,"code":"export const identityOverrideProcessor = (value, _context, _settings) => {\n  return value;\n};\nexport const numberOverrideProcessor = (value, context, settings) => {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n\n  return parseFloat(value);\n};\nexport const displayNameOverrideProcessor = (value, context, settings) => {\n  var _context$field, _context$field$state;\n\n  // clear the cached display name\n  (_context$field = context.field) === null || _context$field === void 0 ? true : (_context$field$state = _context$field.state) === null || _context$field$state === void 0 ? true : delete _context$field$state.displayName;\n  return stringOverrideProcessor(value, context, settings);\n};\nexport const dataLinksOverrideProcessor = (value, _context, _settings) => {\n  return value;\n};\nexport const valueMappingsOverrideProcessor = (value, _context, _settings) => {\n  return value; // !!!! likely not !!!!\n};\nexport const selectOverrideProcessor = (value, _context, _settings) => {\n  return value;\n};\nexport const stringOverrideProcessor = (value, context, settings) => {\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (settings && settings.expandTemplateVars && context.replaceVariables) {\n    return context.replaceVariables(value, context.field.state.scopedVars);\n  }\n\n  return `${value}`;\n};\nexport const thresholdsOverrideProcessor = (value, _context, _settings) => {\n  return value; // !!!! likely not !!!!\n};\nexport const unitOverrideProcessor = (value, _context, _settings) => {\n  return value;\n};\nexport const booleanOverrideProcessor = (value, _context, _settings) => {\n  return value; // !!!! likely not !!!!\n};","map":{"version":3,"names":["identityOverrideProcessor","value","_context","_settings","numberOverrideProcessor","context","settings","undefined","parseFloat","displayNameOverrideProcessor","field","state","displayName","stringOverrideProcessor","dataLinksOverrideProcessor","valueMappingsOverrideProcessor","selectOverrideProcessor","expandTemplateVars","replaceVariables","scopedVars","thresholdsOverrideProcessor","unitOverrideProcessor","booleanOverrideProcessor"],"sources":["/home/soula/grafana/packages/grafana-data/src/field/overrides/processors.ts"],"sourcesContent":["import {\n  DataLink,\n  Field,\n  FieldOverrideContext,\n  SelectableValue,\n  SliderMarks,\n  ThresholdsConfig,\n  ValueMapping,\n} from '../../types';\n\nexport const identityOverrideProcessor = <T>(value: T, _context: FieldOverrideContext, _settings: any) => {\n  return value;\n};\n\nexport interface NumberFieldConfigSettings {\n  placeholder?: string;\n  integer?: boolean;\n  min?: number;\n  max?: number;\n  step?: number;\n}\n\nexport const numberOverrideProcessor = (\n  value: any,\n  context: FieldOverrideContext,\n  settings?: NumberFieldConfigSettings\n) => {\n  if (value === undefined || value === null) {\n    return undefined;\n  }\n\n  return parseFloat(value);\n};\n\nexport const displayNameOverrideProcessor = (\n  value: any,\n  context: FieldOverrideContext,\n  settings?: StringFieldConfigSettings\n) => {\n  // clear the cached display name\n  delete context.field?.state?.displayName;\n  return stringOverrideProcessor(value, context, settings);\n};\n\nexport interface SliderFieldConfigSettings {\n  min: number;\n  max: number;\n  step?: number;\n  included?: boolean;\n  marks?: SliderMarks;\n  ariaLabelForHandle?: string;\n}\n\nexport interface DataLinksFieldConfigSettings {}\n\nexport const dataLinksOverrideProcessor = (\n  value: any,\n  _context: FieldOverrideContext,\n  _settings?: DataLinksFieldConfigSettings\n) => {\n  return value as DataLink[];\n};\n\nexport interface ValueMappingFieldConfigSettings {}\n\nexport const valueMappingsOverrideProcessor = (\n  value: any,\n  _context: FieldOverrideContext,\n  _settings?: ValueMappingFieldConfigSettings\n) => {\n  return value as ValueMapping[]; // !!!! likely not !!!!\n};\n\nexport interface SelectFieldConfigSettings<T> {\n  allowCustomValue?: boolean;\n\n  isClearable?: boolean;\n\n  /** The default options */\n  options: Array<SelectableValue<T>>;\n\n  /** Optionally use the context to define the options */\n  getOptions?: (context: FieldOverrideContext) => Promise<Array<SelectableValue<T>>>;\n}\n\nexport const selectOverrideProcessor = (\n  value: any,\n  _context: FieldOverrideContext,\n  _settings?: SelectFieldConfigSettings<any>\n) => {\n  return value;\n};\n\nexport interface StringFieldConfigSettings {\n  placeholder?: string;\n  maxLength?: number;\n  expandTemplateVars?: boolean;\n  useTextarea?: boolean;\n  rows?: number;\n}\n\nexport const stringOverrideProcessor = (\n  value: any,\n  context: FieldOverrideContext,\n  settings?: StringFieldConfigSettings\n) => {\n  if (value === null || value === undefined) {\n    return value;\n  }\n  if (settings && settings.expandTemplateVars && context.replaceVariables) {\n    return context.replaceVariables(value, context.field!.state!.scopedVars);\n  }\n  return `${value}`;\n};\n\nexport interface ThresholdsFieldConfigSettings {\n  // Anything?\n}\n\nexport const thresholdsOverrideProcessor = (\n  value: any,\n  _context: FieldOverrideContext,\n  _settings?: ThresholdsFieldConfigSettings\n) => {\n  return value as ThresholdsConfig; // !!!! likely not !!!!\n};\n\nexport interface UnitFieldConfigSettings {\n  isClearable?: boolean;\n}\n\nexport const unitOverrideProcessor = (\n  value: boolean,\n  _context: FieldOverrideContext,\n  _settings?: UnitFieldConfigSettings\n) => {\n  return value;\n};\n\nexport const booleanOverrideProcessor = (\n  value: boolean,\n  _context: FieldOverrideContext,\n  _settings?: ThresholdsFieldConfigSettings\n) => {\n  return value; // !!!! likely not !!!!\n};\n\nexport interface FieldColorConfigSettings {\n  /**\n   * When switching to a visualization that does not support by value coloring then Grafana will\n   * switch to a by series palette based color mode\n   */\n  byValueSupport?: boolean;\n  /**\n   * When switching to a visualization that has this set to true then Grafana will change color mode\n   * to from thresholds if it was set to a by series palette\n   */\n  preferThresholdsMode?: boolean;\n  /**\n   * Set to true if the visualization supports both by value and by series\n   * This will enable the Color by series UI option that sets the `color.seriesBy` option.\n   */\n  bySeriesSupport?: boolean;\n}\n\nexport interface StatsPickerConfigSettings {\n  /**\n   * Enable multi-selection in the stats picker\n   */\n  allowMultiple: boolean;\n  /**\n   * Default stats to be use in the stats picker\n   */\n  defaultStat?: string;\n}\n\nexport interface FieldNamePickerConfigSettings {\n  /**\n   * Function is a predicate, to test each element of the array.\n   * Return a value that coerces to true to keep the field, or to false otherwise.\n   */\n  filter?: (field: Field) => boolean;\n\n  /**\n   * Show this text when no values are found\n   */\n  noFieldsMessage?: string;\n\n  /**addFieldNamePicker\n   * Sets the width to a pixel value.\n   */\n  width?: number;\n\n  /**\n   * Placeholder text to display when nothing is selected.\n   */\n  placeholderText?: string;\n}\n"],"mappings":"AAUA,OAAO,MAAMA,yBAAyB,GAAG,CAAIC,KAAJ,EAAcC,QAAd,EAA8CC,SAA9C,KAAiE;EACxG,OAAOF,KAAP;AACD,CAFM;AAYP,OAAO,MAAMG,uBAAuB,GAAG,CACrCH,KADqC,EAErCI,OAFqC,EAGrCC,QAHqC,KAIlC;EACH,IAAIL,KAAK,KAAKM,SAAV,IAAuBN,KAAK,KAAK,IAArC,EAA2C;IACzC,OAAOM,SAAP;EACD;;EAED,OAAOC,UAAU,CAACP,KAAD,CAAjB;AACD,CAVM;AAYP,OAAO,MAAMQ,4BAA4B,GAAG,CAC1CR,KAD0C,EAE1CI,OAF0C,EAG1CC,QAH0C,KAIvC;EAAA;;EACH;EACA,kBAAOD,OAAO,CAACK,KAAf,yEAAO,eAAeC,KAAtB,8DAAO,qBAAsBC,WAA7B;EACA,OAAOC,uBAAuB,CAACZ,KAAD,EAAQI,OAAR,EAAiBC,QAAjB,CAA9B;AACD,CARM;AAqBP,OAAO,MAAMQ,0BAA0B,GAAG,CACxCb,KADwC,EAExCC,QAFwC,EAGxCC,SAHwC,KAIrC;EACH,OAAOF,KAAP;AACD,CANM;AAUP,OAAO,MAAMc,8BAA8B,GAAG,CAC5Cd,KAD4C,EAE5CC,QAF4C,EAG5CC,SAH4C,KAIzC;EACH,OAAOF,KAAP,CADG,CAC6B;AACjC,CANM;AAoBP,OAAO,MAAMe,uBAAuB,GAAG,CACrCf,KADqC,EAErCC,QAFqC,EAGrCC,SAHqC,KAIlC;EACH,OAAOF,KAAP;AACD,CANM;AAgBP,OAAO,MAAMY,uBAAuB,GAAG,CACrCZ,KADqC,EAErCI,OAFqC,EAGrCC,QAHqC,KAIlC;EACH,IAAIL,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKM,SAAhC,EAA2C;IACzC,OAAON,KAAP;EACD;;EACD,IAAIK,QAAQ,IAAIA,QAAQ,CAACW,kBAArB,IAA2CZ,OAAO,CAACa,gBAAvD,EAAyE;IACvE,OAAOb,OAAO,CAACa,gBAAR,CAAyBjB,KAAzB,EAAgCI,OAAO,CAACK,KAAR,CAAeC,KAAf,CAAsBQ,UAAtD,CAAP;EACD;;EACD,OAAQ,GAAElB,KAAM,EAAhB;AACD,CAZM;AAkBP,OAAO,MAAMmB,2BAA2B,GAAG,CACzCnB,KADyC,EAEzCC,QAFyC,EAGzCC,SAHyC,KAItC;EACH,OAAOF,KAAP,CADG,CAC+B;AACnC,CANM;AAYP,OAAO,MAAMoB,qBAAqB,GAAG,CACnCpB,KADmC,EAEnCC,QAFmC,EAGnCC,SAHmC,KAIhC;EACH,OAAOF,KAAP;AACD,CANM;AAQP,OAAO,MAAMqB,wBAAwB,GAAG,CACtCrB,KADsC,EAEtCC,QAFsC,EAGtCC,SAHsC,KAInC;EACH,OAAOF,KAAP,CADG,CACW;AACf,CANM"},"metadata":{},"sourceType":"module"}