{"ast":null,"code":"import { groupBy } from 'lodash';\nimport { FieldType, ArrayVector } from '@grafana/data';\nexport function makeTableFrames(instantMetricFrames) {\n  // first we remove frames that have no refId\n  // (we will group them by refId, so we need it to be set)\n  const framesWithRefId = instantMetricFrames.filter(f => f.refId !== undefined);\n  const framesByRefId = groupBy(framesWithRefId, frame => frame.refId);\n  return Object.entries(framesByRefId).map(([refId, frames]) => makeTableFrame(frames, refId));\n}\n\nfunction makeTableFrame(instantMetricFrames, refId) {\n  const tableTimeField = {\n    name: 'Time',\n    config: {},\n    values: new ArrayVector(),\n    type: FieldType.time\n  };\n  const tableValueField = {\n    name: `Value #${refId}`,\n    config: {},\n    values: new ArrayVector(),\n    type: FieldType.number\n  }; // Sort metric labels, create columns for them and record their index\n\n  const allLabelNames = new Set(instantMetricFrames.map(frame => frame.fields.map(field => {\n    var _field$labels;\n\n    return Object.keys((_field$labels = field.labels) !== null && _field$labels !== void 0 ? _field$labels : {});\n  }).flat()).flat());\n  const sortedLabelNames = Array.from(allLabelNames).sort();\n  const labelFields = sortedLabelNames.map(labelName => ({\n    name: labelName,\n    config: {\n      filterable: true\n    },\n    values: new ArrayVector(),\n    type: FieldType.string\n  }));\n  instantMetricFrames.forEach(frame => {\n    var _valueField$labels;\n\n    const timeField = frame.fields.find(field => field.type === FieldType.time);\n    const valueField = frame.fields.find(field => field.type === FieldType.number);\n\n    if (timeField == null || valueField == null) {\n      return;\n    }\n\n    const timeArray = timeField.values.toArray();\n    const valueArray = valueField.values.toArray();\n\n    for (let x of timeArray) {\n      tableTimeField.values.add(x);\n    }\n\n    for (let x of valueArray) {\n      tableValueField.values.add(x);\n    }\n\n    const labels = (_valueField$labels = valueField.labels) !== null && _valueField$labels !== void 0 ? _valueField$labels : {};\n\n    for (let f of labelFields) {\n      var _labels$f$name;\n\n      const text = (_labels$f$name = labels[f.name]) !== null && _labels$f$name !== void 0 ? _labels$f$name : ''; // we insert the labels as many times as we have values\n\n      for (let i = 0; i < valueArray.length; i++) {\n        f.values.add(text);\n      }\n    }\n  });\n  return {\n    fields: [tableTimeField, ...labelFields, tableValueField],\n    refId,\n    meta: {\n      preferredVisualisationType: 'table'\n    },\n    length: tableTimeField.values.length\n  };\n}","map":{"version":3,"names":["groupBy","FieldType","ArrayVector","makeTableFrames","instantMetricFrames","framesWithRefId","filter","f","refId","undefined","framesByRefId","frame","Object","entries","map","frames","makeTableFrame","tableTimeField","name","config","values","type","time","tableValueField","number","allLabelNames","Set","fields","field","keys","labels","flat","sortedLabelNames","Array","from","sort","labelFields","labelName","filterable","string","forEach","timeField","find","valueField","timeArray","toArray","valueArray","x","add","text","i","length","meta","preferredVisualisationType"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/makeTableFrames.ts"],"sourcesContent":["import { groupBy } from 'lodash';\n\nimport { DataFrame, Field, FieldType, ArrayVector } from '@grafana/data';\n\nexport function makeTableFrames(instantMetricFrames: DataFrame[]): DataFrame[] {\n  // first we remove frames that have no refId\n  // (we will group them by refId, so we need it to be set)\n  const framesWithRefId = instantMetricFrames.filter((f) => f.refId !== undefined);\n\n  const framesByRefId = groupBy(framesWithRefId, (frame) => frame.refId);\n\n  return Object.entries(framesByRefId).map(([refId, frames]) => makeTableFrame(frames, refId));\n}\n\ntype NumberField = Field<number, ArrayVector<number>>;\ntype StringField = Field<string, ArrayVector<string>>;\n\nfunction makeTableFrame(instantMetricFrames: DataFrame[], refId: string): DataFrame {\n  const tableTimeField: NumberField = { name: 'Time', config: {}, values: new ArrayVector(), type: FieldType.time };\n  const tableValueField: NumberField = {\n    name: `Value #${refId}`,\n    config: {},\n    values: new ArrayVector(),\n    type: FieldType.number,\n  };\n\n  // Sort metric labels, create columns for them and record their index\n  const allLabelNames = new Set(\n    instantMetricFrames.map((frame) => frame.fields.map((field) => Object.keys(field.labels ?? {})).flat()).flat()\n  );\n\n  const sortedLabelNames = Array.from(allLabelNames).sort();\n\n  const labelFields: StringField[] = sortedLabelNames.map((labelName) => ({\n    name: labelName,\n    config: { filterable: true },\n    values: new ArrayVector(),\n    type: FieldType.string,\n  }));\n\n  instantMetricFrames.forEach((frame) => {\n    const timeField = frame.fields.find((field) => field.type === FieldType.time);\n    const valueField = frame.fields.find((field) => field.type === FieldType.number);\n    if (timeField == null || valueField == null) {\n      return;\n    }\n\n    const timeArray = timeField.values.toArray();\n    const valueArray = valueField.values.toArray();\n\n    for (let x of timeArray) {\n      tableTimeField.values.add(x);\n    }\n\n    for (let x of valueArray) {\n      tableValueField.values.add(x);\n    }\n\n    const labels = valueField.labels ?? {};\n\n    for (let f of labelFields) {\n      const text = labels[f.name] ?? '';\n      // we insert the labels as many times as we have values\n      for (let i = 0; i < valueArray.length; i++) {\n        f.values.add(text);\n      }\n    }\n  });\n\n  return {\n    fields: [tableTimeField, ...labelFields, tableValueField],\n    refId,\n    meta: { preferredVisualisationType: 'table' },\n    length: tableTimeField.values.length,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}