{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { Select, MultiSelect } from '@grafana/ui';\nimport { AzureQueryType } from '../types';\nimport { findOptions } from '../utils/common';\nimport { Field } from './Field';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst SubscriptionField = ({\n  query,\n  subscriptions,\n  variableOptionGroup,\n  onQueryChange,\n  multiSelect = false\n}) => {\n  const handleChange = useCallback(change => {\n    if (!change.value) {\n      return;\n    }\n\n    let newQuery = Object.assign({}, query, {\n      subscription: change.value\n    });\n\n    if (query.queryType === AzureQueryType.AzureMonitor) {\n      newQuery.azureMonitor = Object.assign({}, newQuery.azureMonitor, {\n        resourceGroup: undefined,\n        metricDefinition: undefined,\n        metricNamespace: undefined,\n        resourceName: undefined,\n        metricName: undefined,\n        aggregation: undefined,\n        timeGrain: '',\n        dimensionFilters: []\n      });\n    }\n\n    onQueryChange(newQuery);\n  }, [query, onQueryChange]);\n  const onSubscriptionsChange = useCallback(change => {\n    if (!change) {\n      return;\n    }\n\n    query.subscriptions = change.map(c => {\n      var _c$value;\n\n      return (_c$value = c.value) !== null && _c$value !== void 0 ? _c$value : '';\n    });\n    onQueryChange(query);\n  }, [query, onQueryChange]);\n  const options = useMemo(() => [...subscriptions, variableOptionGroup], [subscriptions, variableOptionGroup]);\n  return multiSelect ? /*#__PURE__*/_jsx(Field, {\n    label: \"Subscriptions\",\n    children: /*#__PURE__*/_jsx(MultiSelect, {\n      isClearable: true,\n      value: findOptions([...subscriptions, ...variableOptionGroup.options], query.subscriptions),\n      inputId: \"azure-monitor-subscriptions-field\",\n      onChange: onSubscriptionsChange,\n      options: options,\n      width: 38\n    })\n  }) : /*#__PURE__*/_jsx(Field, {\n    label: \"Subscription\",\n    children: /*#__PURE__*/_jsx(Select, {\n      value: query.subscription,\n      inputId: \"azure-monitor-subscriptions-field\",\n      onChange: handleChange,\n      options: options,\n      width: 38,\n      allowCustomValue: true\n    })\n  });\n};\n\nexport default SubscriptionField;","map":{"version":3,"names":["React","useCallback","useMemo","Select","MultiSelect","AzureQueryType","findOptions","Field","SubscriptionField","query","subscriptions","variableOptionGroup","onQueryChange","multiSelect","handleChange","change","value","newQuery","subscription","queryType","AzureMonitor","azureMonitor","resourceGroup","undefined","metricDefinition","metricNamespace","resourceName","metricName","aggregation","timeGrain","dimensionFilters","onSubscriptionsChange","map","c","options"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/SubscriptionField.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, MultiSelect } from '@grafana/ui';\n\nimport { AzureMonitorQuery, AzureQueryEditorFieldProps, AzureMonitorOption, AzureQueryType } from '../types';\nimport { findOptions } from '../utils/common';\n\nimport { Field } from './Field';\n\ninterface SubscriptionFieldProps extends AzureQueryEditorFieldProps {\n  onQueryChange: (newQuery: AzureMonitorQuery) => void;\n  subscriptions: AzureMonitorOption[];\n  multiSelect?: boolean;\n}\n\nconst SubscriptionField: React.FC<SubscriptionFieldProps> = ({\n  query,\n  subscriptions,\n  variableOptionGroup,\n  onQueryChange,\n  multiSelect = false,\n}) => {\n  const handleChange = useCallback(\n    (change: SelectableValue<string>) => {\n      if (!change.value) {\n        return;\n      }\n\n      let newQuery: AzureMonitorQuery = {\n        ...query,\n        subscription: change.value,\n      };\n\n      if (query.queryType === AzureQueryType.AzureMonitor) {\n        newQuery.azureMonitor = {\n          ...newQuery.azureMonitor,\n          resourceGroup: undefined,\n          metricDefinition: undefined,\n          metricNamespace: undefined,\n          resourceName: undefined,\n          metricName: undefined,\n          aggregation: undefined,\n          timeGrain: '',\n          dimensionFilters: [],\n        };\n      }\n\n      onQueryChange(newQuery);\n    },\n    [query, onQueryChange]\n  );\n\n  const onSubscriptionsChange = useCallback(\n    (change: Array<SelectableValue<string>>) => {\n      if (!change) {\n        return;\n      }\n\n      query.subscriptions = change.map((c) => c.value ?? '');\n\n      onQueryChange(query);\n    },\n    [query, onQueryChange]\n  );\n\n  const options = useMemo(() => [...subscriptions, variableOptionGroup], [subscriptions, variableOptionGroup]);\n\n  return multiSelect ? (\n    <Field label=\"Subscriptions\">\n      <MultiSelect\n        isClearable\n        value={findOptions([...subscriptions, ...variableOptionGroup.options], query.subscriptions)}\n        inputId=\"azure-monitor-subscriptions-field\"\n        onChange={onSubscriptionsChange}\n        options={options}\n        width={38}\n      />\n    </Field>\n  ) : (\n    <Field label=\"Subscription\">\n      <Select\n        value={query.subscription}\n        inputId=\"azure-monitor-subscriptions-field\"\n        onChange={handleChange}\n        options={options}\n        width={38}\n        allowCustomValue\n      />\n    </Field>\n  );\n};\n\nexport default SubscriptionField;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AAGA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,aAApC;AAEA,SAA4EC,cAA5E,QAAkG,UAAlG;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,SAASC,KAAT,QAAsB,SAAtB;;;AAQA,MAAMC,iBAAmD,GAAG,CAAC;EAC3DC,KAD2D;EAE3DC,aAF2D;EAG3DC,mBAH2D;EAI3DC,aAJ2D;EAK3DC,WAAW,GAAG;AAL6C,CAAD,KAMtD;EACJ,MAAMC,YAAY,GAAGb,WAAW,CAC7Bc,MAAD,IAAqC;IACnC,IAAI,CAACA,MAAM,CAACC,KAAZ,EAAmB;MACjB;IACD;;IAED,IAAIC,QAA2B,qBAC1BR,KAD0B;MAE7BS,YAAY,EAAEH,MAAM,CAACC;IAFQ,EAA/B;;IAKA,IAAIP,KAAK,CAACU,SAAN,KAAoBd,cAAc,CAACe,YAAvC,EAAqD;MACnDH,QAAQ,CAACI,YAAT,qBACKJ,QAAQ,CAACI,YADd;QAEEC,aAAa,EAAEC,SAFjB;QAGEC,gBAAgB,EAAED,SAHpB;QAIEE,eAAe,EAAEF,SAJnB;QAKEG,YAAY,EAAEH,SALhB;QAMEI,UAAU,EAAEJ,SANd;QAOEK,WAAW,EAAEL,SAPf;QAQEM,SAAS,EAAE,EARb;QASEC,gBAAgB,EAAE;MATpB;IAWD;;IAEDlB,aAAa,CAACK,QAAD,CAAb;EACD,CA1B6B,EA2B9B,CAACR,KAAD,EAAQG,aAAR,CA3B8B,CAAhC;EA8BA,MAAMmB,qBAAqB,GAAG9B,WAAW,CACtCc,MAAD,IAA4C;IAC1C,IAAI,CAACA,MAAL,EAAa;MACX;IACD;;IAEDN,KAAK,CAACC,aAAN,GAAsBK,MAAM,CAACiB,GAAP,CAAYC,CAAD;MAAA;;MAAA,mBAAOA,CAAC,CAACjB,KAAT,+CAAkB,EAAlB;IAAA,CAAX,CAAtB;IAEAJ,aAAa,CAACH,KAAD,CAAb;EACD,CATsC,EAUvC,CAACA,KAAD,EAAQG,aAAR,CAVuC,CAAzC;EAaA,MAAMsB,OAAO,GAAGhC,OAAO,CAAC,MAAM,CAAC,GAAGQ,aAAJ,EAAmBC,mBAAnB,CAAP,EAAgD,CAACD,aAAD,EAAgBC,mBAAhB,CAAhD,CAAvB;EAEA,OAAOE,WAAW,gBAChB,KAAC,KAAD;IAAO,KAAK,EAAC,eAAb;IAAA,uBACE,KAAC,WAAD;MACE,WAAW,MADb;MAEE,KAAK,EAAEP,WAAW,CAAC,CAAC,GAAGI,aAAJ,EAAmB,GAAGC,mBAAmB,CAACuB,OAA1C,CAAD,EAAqDzB,KAAK,CAACC,aAA3D,CAFpB;MAGE,OAAO,EAAC,mCAHV;MAIE,QAAQ,EAAEqB,qBAJZ;MAKE,OAAO,EAAEG,OALX;MAME,KAAK,EAAE;IANT;EADF,EADgB,gBAYhB,KAAC,KAAD;IAAO,KAAK,EAAC,cAAb;IAAA,uBACE,KAAC,MAAD;MACE,KAAK,EAAEzB,KAAK,CAACS,YADf;MAEE,OAAO,EAAC,mCAFV;MAGE,QAAQ,EAAEJ,YAHZ;MAIE,OAAO,EAAEoB,OAJX;MAKE,KAAK,EAAE,EALT;MAME,gBAAgB;IANlB;EADF,EAZF;AAuBD,CA3ED;;AA6EA,eAAe1B,iBAAf"},"metadata":{},"sourceType":"module"}