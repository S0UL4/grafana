{"ast":null,"code":"// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport { round as _round, dropWhile as _dropWhile } from 'lodash';\nimport moment from 'moment-timezone';\nimport { toFloatPrecision } from './number';\nconst TODAY = 'Today';\nconst YESTERDAY = 'Yesterday';\nexport const STANDARD_DATE_FORMAT = 'YYYY-MM-DD';\nexport const STANDARD_TIME_FORMAT = 'HH:mm';\nexport const STANDARD_DATETIME_FORMAT = 'MMMM D YYYY, HH:mm:ss.SSS';\nexport const ONE_MILLISECOND = 1000;\nexport const ONE_SECOND = 1000 * ONE_MILLISECOND;\nexport const ONE_MINUTE = 60 * ONE_SECOND;\nexport const ONE_HOUR = 60 * ONE_MINUTE;\nexport const ONE_DAY = 24 * ONE_HOUR;\nexport const DEFAULT_MS_PRECISION = Math.log10(ONE_MILLISECOND);\nconst UNIT_STEPS = [{\n  unit: 'd',\n  microseconds: ONE_DAY,\n  ofPrevious: 24\n}, {\n  unit: 'h',\n  microseconds: ONE_HOUR,\n  ofPrevious: 60\n}, {\n  unit: 'm',\n  microseconds: ONE_MINUTE,\n  ofPrevious: 60\n}, {\n  unit: 's',\n  microseconds: ONE_SECOND,\n  ofPrevious: 1000\n}, {\n  unit: 'ms',\n  microseconds: ONE_MILLISECOND,\n  ofPrevious: 1000\n}, {\n  unit: 'μs',\n  microseconds: 1,\n  ofPrevious: 1000\n}];\n/**\n * @param {number} timestamp\n * @param {number} initialTimestamp\n * @param {number} totalDuration\n * @returns {number} 0-100 percentage\n */\n\nexport function getPercentageOfDuration(duration, totalDuration) {\n  return duration / totalDuration * 100;\n}\n\nconst quantizeDuration = (duration, floatPrecision, conversionFactor) => toFloatPrecision(duration / conversionFactor, floatPrecision) * conversionFactor;\n/**\n * @param {number} duration (in microseconds)\n * @returns {string} formatted, unit-labelled string with time in milliseconds\n */\n\n\nexport function formatDate(duration) {\n  return moment(duration / ONE_MILLISECOND).format(STANDARD_DATE_FORMAT);\n}\n/**\n * @param {number} duration (in microseconds)\n * @returns {string} formatted, unit-labelled string with time in milliseconds\n */\n\nexport function formatTime(duration) {\n  return moment(duration / ONE_MILLISECOND).format(STANDARD_TIME_FORMAT);\n}\n/**\n * @param {number} duration (in microseconds)\n * @returns {string} formatted, unit-labelled string with time in milliseconds\n */\n\nexport function formatDatetime(duration) {\n  return moment(duration / ONE_MILLISECOND).format(STANDARD_DATETIME_FORMAT);\n}\n/**\n * @param {number} duration (in microseconds)\n * @returns {string} formatted, unit-labelled string with time in milliseconds\n */\n\nexport function formatMillisecondTime(duration) {\n  const targetDuration = quantizeDuration(duration, DEFAULT_MS_PRECISION, ONE_MILLISECOND);\n  return `${moment.duration(targetDuration / ONE_MILLISECOND).asMilliseconds()}ms`;\n}\n/**\n * @param {number} duration (in microseconds)\n * @returns {string} formatted, unit-labelled string with time in seconds\n */\n\nexport function formatSecondTime(duration) {\n  const targetDuration = quantizeDuration(duration, DEFAULT_MS_PRECISION, ONE_SECOND);\n  return `${moment.duration(targetDuration / ONE_MILLISECOND).asSeconds()}s`;\n}\n/**\n * Humanizes the duration for display.\n *\n * Example:\n * 5000ms => 5s\n * 1000μs => 1ms\n * 183840s => 2d 3h\n *\n * @param {number} duration (in microseconds)\n * @return {string} formatted duration\n */\n\nexport function formatDuration(duration) {\n  // Drop all units that are too large except the last one\n  const [primaryUnit, secondaryUnit] = _dropWhile(UNIT_STEPS, ({\n    microseconds\n  }, index) => index < UNIT_STEPS.length - 1 && microseconds > duration);\n\n  if (primaryUnit.ofPrevious === 1000) {\n    // If the unit is decimal based, display as a decimal\n    return `${_round(duration / primaryUnit.microseconds, 2)}${primaryUnit.unit}`;\n  }\n\n  const primaryValue = Math.floor(duration / primaryUnit.microseconds);\n  const primaryUnitString = `${primaryValue}${primaryUnit.unit}`;\n  const secondaryValue = Math.round(duration / secondaryUnit.microseconds % primaryUnit.ofPrevious);\n  const secondaryUnitString = `${secondaryValue}${secondaryUnit.unit}`;\n  return secondaryValue === 0 ? primaryUnitString : `${primaryUnitString} ${secondaryUnitString}`;\n}\nexport function formatRelativeDate(value, fullMonthName = false) {\n  const m = moment.isMoment(value) ? value : moment(value);\n  const monthFormat = fullMonthName ? 'MMMM' : 'MMM';\n  const dt = new Date();\n\n  if (dt.getFullYear() !== m.year()) {\n    return m.format(`${monthFormat} D, YYYY`);\n  }\n\n  const mMonth = m.month();\n  const mDate = m.date();\n  const date = dt.getDate();\n\n  if (mMonth === dt.getMonth() && mDate === date) {\n    return TODAY;\n  }\n\n  dt.setDate(date - 1);\n\n  if (mMonth === dt.getMonth() && mDate === dt.getDate()) {\n    return YESTERDAY;\n  }\n\n  return m.format(`${monthFormat} D`);\n}","map":{"version":3,"names":["round","_round","dropWhile","_dropWhile","moment","toFloatPrecision","TODAY","YESTERDAY","STANDARD_DATE_FORMAT","STANDARD_TIME_FORMAT","STANDARD_DATETIME_FORMAT","ONE_MILLISECOND","ONE_SECOND","ONE_MINUTE","ONE_HOUR","ONE_DAY","DEFAULT_MS_PRECISION","Math","log10","UNIT_STEPS","unit","microseconds","ofPrevious","getPercentageOfDuration","duration","totalDuration","quantizeDuration","floatPrecision","conversionFactor","formatDate","format","formatTime","formatDatetime","formatMillisecondTime","targetDuration","asMilliseconds","formatSecondTime","asSeconds","formatDuration","primaryUnit","secondaryUnit","index","length","primaryValue","floor","primaryUnitString","secondaryValue","secondaryUnitString","formatRelativeDate","value","fullMonthName","m","isMoment","monthFormat","dt","Date","getFullYear","year","mMonth","month","mDate","date","getDate","getMonth","setDate"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/utils/date.tsx"],"sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { round as _round, dropWhile as _dropWhile } from 'lodash';\nimport moment from 'moment-timezone';\n\nimport { toFloatPrecision } from './number';\n\nconst TODAY = 'Today';\nconst YESTERDAY = 'Yesterday';\n\nexport const STANDARD_DATE_FORMAT = 'YYYY-MM-DD';\nexport const STANDARD_TIME_FORMAT = 'HH:mm';\nexport const STANDARD_DATETIME_FORMAT = 'MMMM D YYYY, HH:mm:ss.SSS';\nexport const ONE_MILLISECOND = 1000;\nexport const ONE_SECOND = 1000 * ONE_MILLISECOND;\nexport const ONE_MINUTE = 60 * ONE_SECOND;\nexport const ONE_HOUR = 60 * ONE_MINUTE;\nexport const ONE_DAY = 24 * ONE_HOUR;\nexport const DEFAULT_MS_PRECISION = Math.log10(ONE_MILLISECOND);\n\nconst UNIT_STEPS: Array<{ unit: string; microseconds: number; ofPrevious: number }> = [\n  { unit: 'd', microseconds: ONE_DAY, ofPrevious: 24 },\n  { unit: 'h', microseconds: ONE_HOUR, ofPrevious: 60 },\n  { unit: 'm', microseconds: ONE_MINUTE, ofPrevious: 60 },\n  { unit: 's', microseconds: ONE_SECOND, ofPrevious: 1000 },\n  { unit: 'ms', microseconds: ONE_MILLISECOND, ofPrevious: 1000 },\n  { unit: 'μs', microseconds: 1, ofPrevious: 1000 },\n];\n\n/**\n * @param {number} timestamp\n * @param {number} initialTimestamp\n * @param {number} totalDuration\n * @returns {number} 0-100 percentage\n */\nexport function getPercentageOfDuration(duration: number, totalDuration: number) {\n  return (duration / totalDuration) * 100;\n}\n\nconst quantizeDuration = (duration: number, floatPrecision: number, conversionFactor: number) =>\n  toFloatPrecision(duration / conversionFactor, floatPrecision) * conversionFactor;\n\n/**\n * @param {number} duration (in microseconds)\n * @returns {string} formatted, unit-labelled string with time in milliseconds\n */\nexport function formatDate(duration: number) {\n  return moment(duration / ONE_MILLISECOND).format(STANDARD_DATE_FORMAT);\n}\n\n/**\n * @param {number} duration (in microseconds)\n * @returns {string} formatted, unit-labelled string with time in milliseconds\n */\nexport function formatTime(duration: number) {\n  return moment(duration / ONE_MILLISECOND).format(STANDARD_TIME_FORMAT);\n}\n\n/**\n * @param {number} duration (in microseconds)\n * @returns {string} formatted, unit-labelled string with time in milliseconds\n */\nexport function formatDatetime(duration: number) {\n  return moment(duration / ONE_MILLISECOND).format(STANDARD_DATETIME_FORMAT);\n}\n\n/**\n * @param {number} duration (in microseconds)\n * @returns {string} formatted, unit-labelled string with time in milliseconds\n */\nexport function formatMillisecondTime(duration: number) {\n  const targetDuration = quantizeDuration(duration, DEFAULT_MS_PRECISION, ONE_MILLISECOND);\n  return `${moment.duration(targetDuration / ONE_MILLISECOND).asMilliseconds()}ms`;\n}\n\n/**\n * @param {number} duration (in microseconds)\n * @returns {string} formatted, unit-labelled string with time in seconds\n */\nexport function formatSecondTime(duration: number) {\n  const targetDuration = quantizeDuration(duration, DEFAULT_MS_PRECISION, ONE_SECOND);\n  return `${moment.duration(targetDuration / ONE_MILLISECOND).asSeconds()}s`;\n}\n\n/**\n * Humanizes the duration for display.\n *\n * Example:\n * 5000ms => 5s\n * 1000μs => 1ms\n * 183840s => 2d 3h\n *\n * @param {number} duration (in microseconds)\n * @return {string} formatted duration\n */\nexport function formatDuration(duration: number): string {\n  // Drop all units that are too large except the last one\n  const [primaryUnit, secondaryUnit] = _dropWhile(\n    UNIT_STEPS,\n    ({ microseconds }, index) => index < UNIT_STEPS.length - 1 && microseconds > duration\n  );\n\n  if (primaryUnit.ofPrevious === 1000) {\n    // If the unit is decimal based, display as a decimal\n    return `${_round(duration / primaryUnit.microseconds, 2)}${primaryUnit.unit}`;\n  }\n\n  const primaryValue = Math.floor(duration / primaryUnit.microseconds);\n  const primaryUnitString = `${primaryValue}${primaryUnit.unit}`;\n  const secondaryValue = Math.round((duration / secondaryUnit.microseconds) % primaryUnit.ofPrevious);\n  const secondaryUnitString = `${secondaryValue}${secondaryUnit.unit}`;\n  return secondaryValue === 0 ? primaryUnitString : `${primaryUnitString} ${secondaryUnitString}`;\n}\n\nexport function formatRelativeDate(value: any, fullMonthName = false) {\n  const m = moment.isMoment(value) ? value : moment(value);\n  const monthFormat = fullMonthName ? 'MMMM' : 'MMM';\n  const dt = new Date();\n  if (dt.getFullYear() !== m.year()) {\n    return m.format(`${monthFormat} D, YYYY`);\n  }\n  const mMonth = m.month();\n  const mDate = m.date();\n  const date = dt.getDate();\n  if (mMonth === dt.getMonth() && mDate === date) {\n    return TODAY;\n  }\n  dt.setDate(date - 1);\n  if (mMonth === dt.getMonth() && mDate === dt.getDate()) {\n    return YESTERDAY;\n  }\n  return m.format(`${monthFormat} D`);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}