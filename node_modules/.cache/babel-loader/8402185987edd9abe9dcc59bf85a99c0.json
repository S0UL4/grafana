{"ast":null,"code":"import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport React, { useState } from 'react';\nimport { CoreApp, getDefaultRelativeTimeRange, LoadingState } from '@grafana/data';\nimport { RelativeTimeRangePicker, useStyles2 } from '@grafana/ui';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { QueryEditorRow } from 'app/features/query/components/QueryEditorRow';\nimport { TABLE, TIMESERIES } from '../../utils/constants';\nimport { VizWrapper } from './VizWrapper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const QueryWrapper = ({\n  data,\n  dsSettings,\n  index,\n  onChangeDataSource,\n  onChangeQuery,\n  onChangeTimeRange,\n  onRunQueries,\n  onRemoveQuery,\n  onDuplicateQuery,\n  query,\n  queries,\n  thresholds,\n  onChangeThreshold\n}) => {\n  const styles = useStyles2(getStyles);\n  const isExpression = isExpressionQuery(query.model);\n  const [pluginId, changePluginId] = useState(isExpression ? TABLE : TIMESERIES);\n\n  const renderTimePicker = (query, index) => {\n    var _query$relativeTimeRa;\n\n    if (isExpressionQuery(query.model) || !onChangeTimeRange) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsx(RelativeTimeRangePicker, {\n      timeRange: (_query$relativeTimeRa = query.relativeTimeRange) !== null && _query$relativeTimeRa !== void 0 ? _query$relativeTimeRa : getDefaultRelativeTimeRange(),\n      onChange: range => onChangeTimeRange(range, index)\n    });\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.wrapper,\n    children: /*#__PURE__*/_jsx(QueryEditorRow, {\n      alerting: true,\n      dataSource: dsSettings,\n      onChangeDataSource: !isExpression ? settings => onChangeDataSource(settings, index) : undefined,\n      id: query.refId,\n      index: index,\n      data: data,\n      query: cloneDeep(query.model),\n      onChange: query => onChangeQuery(query, index),\n      onRemoveQuery: onRemoveQuery,\n      onAddQuery: () => onDuplicateQuery(cloneDeep(query)),\n      onRunQuery: onRunQueries,\n      queries: queries,\n      renderHeaderExtras: () => renderTimePicker(query, index),\n      app: CoreApp.UnifiedAlerting,\n      visualization: data.state !== LoadingState.NotStarted ? /*#__PURE__*/_jsx(VizWrapper, {\n        data: data,\n        changePanel: changePluginId,\n        currentPanel: pluginId,\n        thresholds: thresholds,\n        onThresholdsChange: thresholds => onChangeThreshold(thresholds, index)\n      }) : null,\n      hideDisableQuery: true\n    }, query.refId)\n  });\n};\nexport const EmptyQueryWrapper = ({\n  children\n}) => {\n  const styles = useStyles2(getStyles);\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: styles.wrapper,\n    children: children\n  });\n};\n\nconst getStyles = theme => ({\n  wrapper: css`\n    label: AlertingQueryWrapper;\n    margin-bottom: ${theme.spacing(1)};\n    border: 1px solid ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius(1)};\n  `\n});","map":{"version":3,"names":["css","cloneDeep","React","useState","CoreApp","getDefaultRelativeTimeRange","LoadingState","RelativeTimeRangePicker","useStyles2","isExpressionQuery","QueryEditorRow","TABLE","TIMESERIES","VizWrapper","QueryWrapper","data","dsSettings","index","onChangeDataSource","onChangeQuery","onChangeTimeRange","onRunQueries","onRemoveQuery","onDuplicateQuery","query","queries","thresholds","onChangeThreshold","styles","getStyles","isExpression","model","pluginId","changePluginId","renderTimePicker","relativeTimeRange","range","wrapper","settings","undefined","refId","UnifiedAlerting","state","NotStarted","EmptyQueryWrapper","children","theme","spacing","colors","border","medium","shape","borderRadius"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/components/rule-editor/QueryWrapper.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport React, { FC, ReactNode, useState } from 'react';\n\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceInstanceSettings,\n  getDefaultRelativeTimeRange,\n  GrafanaTheme2,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n  ThresholdsConfig,\n} from '@grafana/data';\nimport { RelativeTimeRangePicker, useStyles2 } from '@grafana/ui';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { QueryEditorRow } from 'app/features/query/components/QueryEditorRow';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { TABLE, TIMESERIES } from '../../utils/constants';\nimport { SupportedPanelPlugins } from '../PanelPluginsButtonGroup';\n\nimport { VizWrapper } from './VizWrapper';\n\ninterface Props {\n  data: PanelData;\n  query: AlertQuery;\n  queries: AlertQuery[];\n  dsSettings: DataSourceInstanceSettings;\n  onChangeDataSource: (settings: DataSourceInstanceSettings, index: number) => void;\n  onChangeQuery: (query: DataQuery, index: number) => void;\n  onChangeTimeRange?: (timeRange: RelativeTimeRange, index: number) => void;\n  onRemoveQuery: (query: DataQuery) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n  index: number;\n  thresholds: ThresholdsConfig;\n  onChangeThreshold: (thresholds: ThresholdsConfig, index: number) => void;\n}\n\nexport const QueryWrapper: FC<Props> = ({\n  data,\n  dsSettings,\n  index,\n  onChangeDataSource,\n  onChangeQuery,\n  onChangeTimeRange,\n  onRunQueries,\n  onRemoveQuery,\n  onDuplicateQuery,\n  query,\n  queries,\n  thresholds,\n  onChangeThreshold,\n}) => {\n  const styles = useStyles2(getStyles);\n  const isExpression = isExpressionQuery(query.model);\n  const [pluginId, changePluginId] = useState<SupportedPanelPlugins>(isExpression ? TABLE : TIMESERIES);\n\n  const renderTimePicker = (query: AlertQuery, index: number): ReactNode => {\n    if (isExpressionQuery(query.model) || !onChangeTimeRange) {\n      return null;\n    }\n\n    return (\n      <RelativeTimeRangePicker\n        timeRange={query.relativeTimeRange ?? getDefaultRelativeTimeRange()}\n        onChange={(range) => onChangeTimeRange(range, index)}\n      />\n    );\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <QueryEditorRow<DataQuery>\n        alerting\n        dataSource={dsSettings}\n        onChangeDataSource={!isExpression ? (settings) => onChangeDataSource(settings, index) : undefined}\n        id={query.refId}\n        index={index}\n        key={query.refId}\n        data={data}\n        query={cloneDeep(query.model)}\n        onChange={(query) => onChangeQuery(query, index)}\n        onRemoveQuery={onRemoveQuery}\n        onAddQuery={() => onDuplicateQuery(cloneDeep(query))}\n        onRunQuery={onRunQueries}\n        queries={queries}\n        renderHeaderExtras={() => renderTimePicker(query, index)}\n        app={CoreApp.UnifiedAlerting}\n        visualization={\n          data.state !== LoadingState.NotStarted ? (\n            <VizWrapper\n              data={data}\n              changePanel={changePluginId}\n              currentPanel={pluginId}\n              thresholds={thresholds}\n              onThresholdsChange={(thresholds) => onChangeThreshold(thresholds, index)}\n            />\n          ) : null\n        }\n        hideDisableQuery={true}\n      />\n    </div>\n  );\n};\n\nexport const EmptyQueryWrapper: FC<{}> = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return <div className={styles.wrapper}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    label: AlertingQueryWrapper;\n    margin-bottom: ${theme.spacing(1)};\n    border: 1px solid ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius(1)};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}