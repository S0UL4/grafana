{"ast":null,"code":"var _window$__grafana_pub;\n\nconst monacoPath = ((_window$__grafana_pub = window.__grafana_public_path__) !== null && _window$__grafana_pub !== void 0 ? _window$__grafana_pub : 'public/') + 'lib/monaco/min/vs';\nconst scripts = [[`${monacoPath}/language/kusto/bridge.min.js`], [`${monacoPath}/language/kusto/kusto.javascript.client.min.js`, `${monacoPath}/language/kusto/newtonsoft.json.min.js`, `${monacoPath}/language/kusto/Kusto.Language.Bridge.min.js`]];\n\nfunction loadScript(script) {\n  return new Promise((resolve, reject) => {\n    let scriptEl;\n\n    if (typeof script === 'string') {\n      scriptEl = document.createElement('script');\n      scriptEl.src = script;\n    } else {\n      scriptEl = script;\n    }\n\n    scriptEl.onload = () => resolve();\n\n    scriptEl.onerror = err => reject(err);\n\n    document.body.appendChild(scriptEl);\n  });\n}\n\nconst loadMonacoKusto = () => {\n  return new Promise(resolve => {\n    window.__monacoKustoResolvePromise = resolve;\n    const script = document.createElement('script');\n    script.innerHTML = `require(['vs/language/kusto/monaco.contribution'], function() {\n      window.__monacoKustoResolvePromise();\n    });`;\n    return document.body.appendChild(script);\n  });\n};\n\nexport default async function loadKusto() {\n  let promise = Promise.resolve();\n\n  for (const parallelScripts of scripts) {\n    await promise; // Load all these scripts in parallel, then wait for them all to finish before continuing\n    // to the next iteration\n\n    const allPromises = parallelScripts.filter(src => !document.querySelector(`script[src=\"${src}\"]`)).map(src => loadScript(src));\n    await Promise.all(allPromises);\n  }\n\n  await loadMonacoKusto();\n}","map":{"version":3,"names":["monacoPath","window","__grafana_public_path__","scripts","loadScript","script","Promise","resolve","reject","scriptEl","document","createElement","src","onload","onerror","err","body","appendChild","loadMonacoKusto","__monacoKustoResolvePromise","innerHTML","loadKusto","promise","parallelScripts","allPromises","filter","querySelector","map","all"],"sources":["/home/soula/grafana/public/lib/monaco-languages/kusto.ts"],"sourcesContent":["declare global {\n  interface Window {\n    __monacoKustoResolvePromise: (value: unknown) => void;\n    __grafana_public_path__: string;\n  }\n}\n\nconst monacoPath = (window.__grafana_public_path__ ?? 'public/') + 'lib/monaco/min/vs';\n\nconst scripts = [\n  [`${monacoPath}/language/kusto/bridge.min.js`],\n  [\n    `${monacoPath}/language/kusto/kusto.javascript.client.min.js`,\n    `${monacoPath}/language/kusto/newtonsoft.json.min.js`,\n    `${monacoPath}/language/kusto/Kusto.Language.Bridge.min.js`,\n  ],\n];\n\nfunction loadScript(script: HTMLScriptElement | string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    let scriptEl: HTMLScriptElement;\n\n    if (typeof script === 'string') {\n      scriptEl = document.createElement('script');\n      scriptEl.src = script;\n    } else {\n      scriptEl = script;\n    }\n\n    scriptEl.onload = () => resolve();\n    scriptEl.onerror = (err) => reject(err);\n    document.body.appendChild(scriptEl);\n  });\n}\n\nconst loadMonacoKusto = () => {\n  return new Promise((resolve) => {\n    window.__monacoKustoResolvePromise = resolve;\n\n    const script = document.createElement('script');\n    script.innerHTML = `require(['vs/language/kusto/monaco.contribution'], function() {\n      window.__monacoKustoResolvePromise();\n    });`;\n\n    return document.body.appendChild(script);\n  });\n};\n\nexport default async function loadKusto() {\n  let promise = Promise.resolve();\n\n  for (const parallelScripts of scripts) {\n    await promise;\n\n    // Load all these scripts in parallel, then wait for them all to finish before continuing\n    // to the next iteration\n    const allPromises = parallelScripts\n      .filter((src) => !document.querySelector(`script[src=\"${src}\"]`))\n      .map((src) => loadScript(src));\n\n    await Promise.all(allPromises);\n  }\n\n  await loadMonacoKusto();\n}\n"],"mappings":";;AAOA,MAAMA,UAAU,GAAG,0BAACC,MAAM,CAACC,uBAAR,yEAAmC,SAAnC,IAAgD,mBAAnE;AAEA,MAAMC,OAAO,GAAG,CACd,CAAE,GAAEH,UAAW,+BAAf,CADc,EAEd,CACG,GAAEA,UAAW,gDADhB,EAEG,GAAEA,UAAW,wCAFhB,EAGG,GAAEA,UAAW,8CAHhB,CAFc,CAAhB;;AASA,SAASI,UAAT,CAAoBC,MAApB,EAAuE;EACrE,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC,IAAIC,QAAJ;;IAEA,IAAI,OAAOJ,MAAP,KAAkB,QAAtB,EAAgC;MAC9BI,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAX;MACAF,QAAQ,CAACG,GAAT,GAAeP,MAAf;IACD,CAHD,MAGO;MACLI,QAAQ,GAAGJ,MAAX;IACD;;IAEDI,QAAQ,CAACI,MAAT,GAAkB,MAAMN,OAAO,EAA/B;;IACAE,QAAQ,CAACK,OAAT,GAAoBC,GAAD,IAASP,MAAM,CAACO,GAAD,CAAlC;;IACAL,QAAQ,CAACM,IAAT,CAAcC,WAAd,CAA0BR,QAA1B;EACD,CAbM,CAAP;AAcD;;AAED,MAAMS,eAAe,GAAG,MAAM;EAC5B,OAAO,IAAIZ,OAAJ,CAAaC,OAAD,IAAa;IAC9BN,MAAM,CAACkB,2BAAP,GAAqCZ,OAArC;IAEA,MAAMF,MAAM,GAAGK,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;IACAN,MAAM,CAACe,SAAP,GAAoB;AACxB;AACA,QAFI;IAIA,OAAOV,QAAQ,CAACM,IAAT,CAAcC,WAAd,CAA0BZ,MAA1B,CAAP;EACD,CATM,CAAP;AAUD,CAXD;;AAaA,eAAe,eAAegB,SAAf,GAA2B;EACxC,IAAIC,OAAO,GAAGhB,OAAO,CAACC,OAAR,EAAd;;EAEA,KAAK,MAAMgB,eAAX,IAA8BpB,OAA9B,EAAuC;IACrC,MAAMmB,OAAN,CADqC,CAGrC;IACA;;IACA,MAAME,WAAW,GAAGD,eAAe,CAChCE,MADiB,CACTb,GAAD,IAAS,CAACF,QAAQ,CAACgB,aAAT,CAAwB,eAAcd,GAAI,IAA1C,CADA,EAEjBe,GAFiB,CAEZf,GAAD,IAASR,UAAU,CAACQ,GAAD,CAFN,CAApB;IAIA,MAAMN,OAAO,CAACsB,GAAR,CAAYJ,WAAZ,CAAN;EACD;;EAED,MAAMN,eAAe,EAArB;AACD"},"metadata":{},"sourceType":"module"}