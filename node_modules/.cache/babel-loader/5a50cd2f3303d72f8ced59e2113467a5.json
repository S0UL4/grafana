{"ast":null,"code":"import React from 'react';\nimport { PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { TagsInput } from '@grafana/ui';\nimport { ALL_FOLDER, GENERAL_FOLDER, ReadonlyFolderPicker } from '../../../core/components/Select/ReadonlyFolderPicker/ReadonlyFolderPicker';\nimport { DashList } from './DashList';\nimport { defaultPanelOptions, PanelLayout } from './models.gen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const plugin = new PanelPlugin(DashList).setPanelOptions(builder => {\n  if (config.featureToggles.dashboardPreviews) {\n    builder.addRadio({\n      path: 'layout',\n      name: 'Layout',\n      defaultValue: PanelLayout.List,\n      settings: {\n        options: [{\n          value: PanelLayout.List,\n          label: 'List'\n        }, {\n          value: PanelLayout.Previews,\n          label: 'Preview'\n        }]\n      }\n    });\n  }\n\n  builder.addBooleanSwitch({\n    path: 'showStarred',\n    name: 'Starred',\n    defaultValue: defaultPanelOptions.showStarred\n  }).addBooleanSwitch({\n    path: 'showRecentlyViewed',\n    name: 'Recently viewed',\n    defaultValue: defaultPanelOptions.showRecentlyViewed\n  }).addBooleanSwitch({\n    path: 'showSearch',\n    name: 'Search',\n    defaultValue: defaultPanelOptions.showSearch\n  }).addBooleanSwitch({\n    path: 'showHeadings',\n    name: 'Show headings',\n    defaultValue: defaultPanelOptions.showHeadings\n  }).addNumberInput({\n    path: 'maxItems',\n    name: 'Max items',\n    defaultValue: defaultPanelOptions.maxItems\n  }).addTextInput({\n    path: 'query',\n    name: 'Query',\n    defaultValue: defaultPanelOptions.query\n  }).addCustomEditor({\n    path: 'folderId',\n    name: 'Folder',\n    id: 'folderId',\n    defaultValue: undefined,\n    editor: function RenderFolderPicker({\n      value,\n      onChange\n    }) {\n      return /*#__PURE__*/_jsx(ReadonlyFolderPicker, {\n        initialFolderId: value,\n        onChange: folder => onChange(folder === null || folder === void 0 ? void 0 : folder.id),\n        extraFolders: [ALL_FOLDER, GENERAL_FOLDER]\n      });\n    }\n  }).addCustomEditor({\n    id: 'tags',\n    path: 'tags',\n    name: 'Tags',\n    description: '',\n    defaultValue: defaultPanelOptions.tags,\n\n    editor(props) {\n      return /*#__PURE__*/_jsx(TagsInput, {\n        tags: props.value,\n        onChange: props.onChange\n      });\n    }\n\n  });\n}).setMigrationHandler(panel => {\n  var _panel$options$showSt, _panel$options$showRe, _panel$options$showSe, _panel$options$showHe, _panel$options$maxIte, _panel$options$query, _panel$options$folder, _panel$options$tags;\n\n  const newOptions = {\n    showStarred: (_panel$options$showSt = panel.options.showStarred) !== null && _panel$options$showSt !== void 0 ? _panel$options$showSt : panel.starred,\n    showRecentlyViewed: (_panel$options$showRe = panel.options.showRecentlyViewed) !== null && _panel$options$showRe !== void 0 ? _panel$options$showRe : panel.recent,\n    showSearch: (_panel$options$showSe = panel.options.showSearch) !== null && _panel$options$showSe !== void 0 ? _panel$options$showSe : panel.search,\n    showHeadings: (_panel$options$showHe = panel.options.showHeadings) !== null && _panel$options$showHe !== void 0 ? _panel$options$showHe : panel.headings,\n    maxItems: (_panel$options$maxIte = panel.options.maxItems) !== null && _panel$options$maxIte !== void 0 ? _panel$options$maxIte : panel.limit,\n    query: (_panel$options$query = panel.options.query) !== null && _panel$options$query !== void 0 ? _panel$options$query : panel.query,\n    folderId: (_panel$options$folder = panel.options.folderId) !== null && _panel$options$folder !== void 0 ? _panel$options$folder : panel.folderId,\n    tags: (_panel$options$tags = panel.options.tags) !== null && _panel$options$tags !== void 0 ? _panel$options$tags : panel.tags\n  };\n  const previousVersion = parseFloat(panel.pluginVersion || '6.1');\n\n  if (previousVersion < 6.3) {\n    const oldProps = ['starred', 'recent', 'search', 'headings', 'limit', 'query', 'folderId'];\n    oldProps.forEach(prop => delete panel[prop]);\n  }\n\n  return newOptions;\n});","map":{"version":3,"names":["React","PanelPlugin","config","TagsInput","ALL_FOLDER","GENERAL_FOLDER","ReadonlyFolderPicker","DashList","defaultPanelOptions","PanelLayout","plugin","setPanelOptions","builder","featureToggles","dashboardPreviews","addRadio","path","name","defaultValue","List","settings","options","value","label","Previews","addBooleanSwitch","showStarred","showRecentlyViewed","showSearch","showHeadings","addNumberInput","maxItems","addTextInput","query","addCustomEditor","id","undefined","editor","RenderFolderPicker","onChange","folder","description","tags","props","setMigrationHandler","panel","newOptions","starred","recent","search","headings","limit","folderId","previousVersion","parseFloat","pluginVersion","oldProps","forEach","prop"],"sources":["/home/soula/grafana/public/app/plugins/panel/dashlist/module.tsx"],"sourcesContent":["import React from 'react';\n\nimport { PanelModel, PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { TagsInput } from '@grafana/ui';\n\nimport {\n  ALL_FOLDER,\n  GENERAL_FOLDER,\n  ReadonlyFolderPicker,\n} from '../../../core/components/Select/ReadonlyFolderPicker/ReadonlyFolderPicker';\n\nimport { DashList } from './DashList';\nimport { defaultPanelOptions, PanelLayout, PanelOptions } from './models.gen';\n\nexport const plugin = new PanelPlugin<PanelOptions>(DashList)\n  .setPanelOptions((builder) => {\n    if (config.featureToggles.dashboardPreviews) {\n      builder.addRadio({\n        path: 'layout',\n        name: 'Layout',\n        defaultValue: PanelLayout.List,\n        settings: {\n          options: [\n            { value: PanelLayout.List, label: 'List' },\n            { value: PanelLayout.Previews, label: 'Preview' },\n          ],\n        },\n      });\n    }\n\n    builder\n      .addBooleanSwitch({\n        path: 'showStarred',\n        name: 'Starred',\n        defaultValue: defaultPanelOptions.showStarred,\n      })\n      .addBooleanSwitch({\n        path: 'showRecentlyViewed',\n        name: 'Recently viewed',\n        defaultValue: defaultPanelOptions.showRecentlyViewed,\n      })\n      .addBooleanSwitch({\n        path: 'showSearch',\n        name: 'Search',\n        defaultValue: defaultPanelOptions.showSearch,\n      })\n      .addBooleanSwitch({\n        path: 'showHeadings',\n        name: 'Show headings',\n        defaultValue: defaultPanelOptions.showHeadings,\n      })\n      .addNumberInput({\n        path: 'maxItems',\n        name: 'Max items',\n        defaultValue: defaultPanelOptions.maxItems,\n      })\n      .addTextInput({\n        path: 'query',\n        name: 'Query',\n        defaultValue: defaultPanelOptions.query,\n      })\n      .addCustomEditor({\n        path: 'folderId',\n        name: 'Folder',\n        id: 'folderId',\n        defaultValue: undefined,\n        editor: function RenderFolderPicker({ value, onChange }) {\n          return (\n            <ReadonlyFolderPicker\n              initialFolderId={value}\n              onChange={(folder) => onChange(folder?.id)}\n              extraFolders={[ALL_FOLDER, GENERAL_FOLDER]}\n            />\n          );\n        },\n      })\n      .addCustomEditor({\n        id: 'tags',\n        path: 'tags',\n        name: 'Tags',\n        description: '',\n        defaultValue: defaultPanelOptions.tags,\n        editor(props) {\n          return <TagsInput tags={props.value} onChange={props.onChange} />;\n        },\n      });\n  })\n  .setMigrationHandler((panel: PanelModel<PanelOptions> & Record<string, any>) => {\n    const newOptions = {\n      showStarred: panel.options.showStarred ?? panel.starred,\n      showRecentlyViewed: panel.options.showRecentlyViewed ?? panel.recent,\n      showSearch: panel.options.showSearch ?? panel.search,\n      showHeadings: panel.options.showHeadings ?? panel.headings,\n      maxItems: panel.options.maxItems ?? panel.limit,\n      query: panel.options.query ?? panel.query,\n      folderId: panel.options.folderId ?? panel.folderId,\n      tags: panel.options.tags ?? panel.tags,\n    };\n\n    const previousVersion = parseFloat(panel.pluginVersion || '6.1');\n    if (previousVersion < 6.3) {\n      const oldProps = ['starred', 'recent', 'search', 'headings', 'limit', 'query', 'folderId'];\n      oldProps.forEach((prop) => delete panel[prop]);\n    }\n\n    return newOptions;\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}