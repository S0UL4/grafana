{"ast":null,"code":"import { dateTime } from '@grafana/data';\nexport default class LogAnalyticsQuerystringBuilder {\n  constructor(rawQueryString, options, defaultTimeField) {\n    this.rawQueryString = rawQueryString;\n    this.options = options;\n    this.defaultTimeField = defaultTimeField;\n  }\n\n  generate() {\n    let queryString = this.rawQueryString;\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^()]*)\\)/gi;\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n      if (p1 === 'contains') {\n        return this.getMultiContains(p2);\n      }\n\n      return match;\n    });\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\n\n    if (this.options) {\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n        if (p1 === 'timeFilter') {\n          return this.getTimeFilter(p2, this.options);\n        }\n\n        if (p1 === 'timeFrom') {\n          return this.getFrom(this.options);\n        }\n\n        if (p1 === 'timeTo') {\n          return this.getUntil(this.options);\n        }\n\n        return match;\n      });\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\n    }\n\n    const rawQuery = queryString;\n    queryString = encodeURIComponent(queryString);\n    const uriString = `query=${queryString}`;\n    return {\n      uriString,\n      rawQuery\n    };\n  }\n\n  getFrom(options) {\n    const from = options.range.from;\n    return `datetime(${dateTime(from).startOf('minute').toISOString()})`;\n  }\n\n  getUntil(options) {\n    var _options$rangeRaw;\n\n    if (((_options$rangeRaw = options.rangeRaw) === null || _options$rangeRaw === void 0 ? void 0 : _options$rangeRaw.to) === 'now') {\n      const now = Date.now();\n      return `datetime(${dateTime(now).startOf('minute').toISOString()})`;\n    } else {\n      const until = options.range.to;\n      return `datetime(${dateTime(until).startOf('minute').toISOString()})`;\n    }\n  }\n\n  getTimeFilter(timeFieldArg, options) {\n    var _options$rangeRaw2;\n\n    const timeField = timeFieldArg || this.defaultTimeField;\n\n    if (((_options$rangeRaw2 = options.rangeRaw) === null || _options$rangeRaw2 === void 0 ? void 0 : _options$rangeRaw2.to) === 'now') {\n      return `${timeField} >= ${this.getFrom(options)}`;\n    } else {\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\n    }\n  }\n\n  getMultiContains(inputs) {\n    const firstCommaIndex = inputs.indexOf(',');\n    const field = inputs.substring(0, firstCommaIndex);\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\n\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\n      return '1 == 1';\n    }\n\n    return `${field.trim()} in (${templateVar.trim()})`;\n  }\n\n  escape(inputs) {\n    return inputs.substring(1, inputs.length - 1).split(`','`).map(v => `@'${v}'`).join(', ');\n  }\n\n}","map":{"version":3,"names":["dateTime","LogAnalyticsQuerystringBuilder","constructor","rawQueryString","options","defaultTimeField","generate","queryString","macroRegexp","replace","match","p1","p2","getMultiContains","escape","getTimeFilter","getFrom","getUntil","interval","rawQuery","encodeURIComponent","uriString","from","range","startOf","toISOString","rangeRaw","to","now","Date","until","timeFieldArg","timeField","inputs","firstCommaIndex","indexOf","field","substring","templateVar","toLowerCase","trim","length","split","map","v","join"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/log_analytics/querystring_builder.ts"],"sourcesContent":["import { dateTime } from '@grafana/data';\n\nexport default class LogAnalyticsQuerystringBuilder {\n  constructor(public rawQueryString: string, public options: any, public defaultTimeField: any) {}\n\n  generate() {\n    let queryString = this.rawQueryString;\n    const macroRegexp = /\\$__([_a-zA-Z0-9]+)\\(([^()]*)\\)/gi;\n    queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n      if (p1 === 'contains') {\n        return this.getMultiContains(p2);\n      }\n\n      return match;\n    });\n\n    queryString = queryString.replace(/\\$__escapeMulti\\(('[^]*')\\)/gi, (match, p1) => this.escape(p1));\n\n    if (this.options) {\n      queryString = queryString.replace(macroRegexp, (match, p1, p2) => {\n        if (p1 === 'timeFilter') {\n          return this.getTimeFilter(p2, this.options);\n        }\n        if (p1 === 'timeFrom') {\n          return this.getFrom(this.options);\n        }\n        if (p1 === 'timeTo') {\n          return this.getUntil(this.options);\n        }\n\n        return match;\n      });\n      queryString = queryString.replace(/\\$__interval/gi, this.options.interval);\n    }\n    const rawQuery = queryString;\n    queryString = encodeURIComponent(queryString);\n    const uriString = `query=${queryString}`;\n\n    return { uriString, rawQuery };\n  }\n\n  getFrom(options: any) {\n    const from = options.range.from;\n    return `datetime(${dateTime(from).startOf('minute').toISOString()})`;\n  }\n\n  getUntil(options: any) {\n    if (options.rangeRaw?.to === 'now') {\n      const now = Date.now();\n      return `datetime(${dateTime(now).startOf('minute').toISOString()})`;\n    } else {\n      const until = options.range.to;\n      return `datetime(${dateTime(until).startOf('minute').toISOString()})`;\n    }\n  }\n\n  getTimeFilter(timeFieldArg: any, options: any) {\n    const timeField = timeFieldArg || this.defaultTimeField;\n    if (options.rangeRaw?.to === 'now') {\n      return `${timeField} >= ${this.getFrom(options)}`;\n    } else {\n      return `${timeField}  >= ${this.getFrom(options)} and ${timeField} <= ${this.getUntil(options)}`;\n    }\n  }\n\n  getMultiContains(inputs: string) {\n    const firstCommaIndex = inputs.indexOf(',');\n    const field = inputs.substring(0, firstCommaIndex);\n    const templateVar = inputs.substring(inputs.indexOf(',') + 1);\n\n    if (templateVar && templateVar.toLowerCase().trim() === 'all') {\n      return '1 == 1';\n    }\n\n    return `${field.trim()} in (${templateVar.trim()})`;\n  }\n\n  escape(inputs: string) {\n    return inputs\n      .substring(1, inputs.length - 1)\n      .split(`','`)\n      .map((v) => `@'${v}'`)\n      .join(', ');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}