{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { BusEventBase, BusEventWithPayload, eventFactory } from '@grafana/data';\n\n/**\n * Events\n */\nexport const dsRequestResponse = eventFactory('ds-request-response');\nexport const dsRequestError = eventFactory('ds-request-error');\nexport const toggleSidemenuHidden = eventFactory('toggle-sidemenu-hidden');\nexport const templateVariableValueUpdated = eventFactory('template-variable-value-updated');\nexport const graphClicked = eventFactory('graph-click');\n/**\n * @internal\n */\n\nexport const thresholdChanged = eventFactory('threshold-changed');\n/**\n * Used for syncing queries badge count in panel edit queries tab\n * Think we can get rid of this soon\n */\n\nexport class PanelQueriesChangedEvent extends BusEventBase {}\n/**\n * Used for syncing transformations badge count in panel edit transform tab\n * Think we can get rid of this soon\n */\n\n_defineProperty(PanelQueriesChangedEvent, \"type\", 'panel-queries-changed');\n\nexport class PanelTransformationsChangedEvent extends BusEventBase {}\n/**\n * Used by panel editor to know when panel plugin it'self trigger option updates\n */\n\n_defineProperty(PanelTransformationsChangedEvent, \"type\", 'panel-transformations-changed');\n\nexport class PanelOptionsChangedEvent extends BusEventBase {}\n/**\n * Used internally by DashboardModel to commmunicate with DashboardGrid that it needs to re-render\n */\n\n_defineProperty(PanelOptionsChangedEvent, \"type\", 'panels-options-changed');\n\nexport class DashboardPanelsChangedEvent extends BusEventBase {}\n\n_defineProperty(DashboardPanelsChangedEvent, \"type\", 'dashboard-panels-changed');\n\nexport class PanelDirectiveReadyEvent extends BusEventBase {}\n\n_defineProperty(PanelDirectiveReadyEvent, \"type\", 'panel-directive-ready');\n\nexport class RenderEvent extends BusEventBase {}\n\n_defineProperty(RenderEvent, \"type\", 'render');\n\nexport class ZoomOutEvent extends BusEventWithPayload {}\n\n_defineProperty(ZoomOutEvent, \"type\", 'zoom-out');\n\nexport let ShiftTimeEventDirection;\n\n(function (ShiftTimeEventDirection) {\n  ShiftTimeEventDirection[ShiftTimeEventDirection[\"Left\"] = -1] = \"Left\";\n  ShiftTimeEventDirection[ShiftTimeEventDirection[\"Right\"] = 1] = \"Right\";\n})(ShiftTimeEventDirection || (ShiftTimeEventDirection = {}));\n\nexport class ShiftTimeEvent extends BusEventWithPayload {}\n\n_defineProperty(ShiftTimeEvent, \"type\", 'shift-time');\n\nexport class AbsoluteTimeEvent extends BusEventBase {}\n\n_defineProperty(AbsoluteTimeEvent, \"type\", 'absolute-time');\n\nexport class RemovePanelEvent extends BusEventWithPayload {}\n/**\n * @deprecated use ShowModalReactEvent instead that has this capability built in\n */\n\n_defineProperty(RemovePanelEvent, \"type\", 'remove-panel');\n\nexport class ShowModalEvent extends BusEventWithPayload {}\n\n_defineProperty(ShowModalEvent, \"type\", 'show-modal');\n\nexport class ShowConfirmModalEvent extends BusEventWithPayload {}\n\n_defineProperty(ShowConfirmModalEvent, \"type\", 'show-confirm-modal');\n\nexport class ShowModalReactEvent extends BusEventWithPayload {}\n/**\n * @deprecated use ShowModalReactEvent instead that has this capability built in\n */\n\n_defineProperty(ShowModalReactEvent, \"type\", 'show-react-modal');\n\nexport class HideModalEvent extends BusEventBase {}\n\n_defineProperty(HideModalEvent, \"type\", 'hide-modal');\n\nexport class DashboardSavedEvent extends BusEventBase {}\n\n_defineProperty(DashboardSavedEvent, \"type\", 'dashboard-saved');\n\nexport class AnnotationQueryStarted extends BusEventWithPayload {}\n\n_defineProperty(AnnotationQueryStarted, \"type\", 'annotation-query-started');\n\nexport class AnnotationQueryFinished extends BusEventWithPayload {}\n\n_defineProperty(AnnotationQueryFinished, \"type\", 'annotation-query-finished');\n\nexport class PanelEditEnteredEvent extends BusEventWithPayload {}\n\n_defineProperty(PanelEditEnteredEvent, \"type\", 'panel-edit-started');\n\nexport class PanelEditExitedEvent extends BusEventWithPayload {}\n\n_defineProperty(PanelEditExitedEvent, \"type\", 'panel-edit-finished');","map":{"version":3,"names":["BusEventBase","BusEventWithPayload","eventFactory","dsRequestResponse","dsRequestError","toggleSidemenuHidden","templateVariableValueUpdated","graphClicked","thresholdChanged","PanelQueriesChangedEvent","PanelTransformationsChangedEvent","PanelOptionsChangedEvent","DashboardPanelsChangedEvent","PanelDirectiveReadyEvent","RenderEvent","ZoomOutEvent","ShiftTimeEventDirection","ShiftTimeEvent","AbsoluteTimeEvent","RemovePanelEvent","ShowModalEvent","ShowConfirmModalEvent","ShowModalReactEvent","HideModalEvent","DashboardSavedEvent","AnnotationQueryStarted","AnnotationQueryFinished","PanelEditEnteredEvent","PanelEditExitedEvent"],"sources":["/home/soula/grafana/public/app/types/events.ts"],"sourcesContent":["import { AnnotationQuery, BusEventBase, BusEventWithPayload, eventFactory } from '@grafana/data';\nimport { IconName } from '@grafana/ui';\n\n/**\n * Event Payloads\n */\n\nexport interface ShowDashSearchPayload {\n  query?: string;\n}\n\nexport interface LocationChangePayload {\n  href: string;\n}\n\nexport interface ShowModalPayload {\n  model?: any;\n  modalClass?: string;\n  src?: string;\n  templateHtml?: string;\n  backdrop?: any;\n  scope?: any;\n}\n\nexport interface ShowModalReactPayload {\n  component: React.ComponentType<any>;\n  props?: any;\n}\n\nexport interface ShowConfirmModalPayload {\n  title?: string;\n  text?: string;\n  text2?: string;\n  text2htmlBind?: boolean;\n  confirmText?: string;\n  altActionText?: string;\n  yesText?: string;\n  noText?: string;\n  icon?: IconName;\n\n  onConfirm?: () => void;\n  onAltAction?: () => void;\n}\n\nexport interface DataSourceResponse<T> {\n  data: T;\n  readonly status: number;\n  readonly statusText: string;\n  readonly ok: boolean;\n  readonly headers: Headers;\n  readonly redirected: boolean;\n  readonly type: ResponseType;\n  readonly url: string;\n  readonly config: any;\n}\n\ntype DataSourceResponsePayload = DataSourceResponse<any>;\n\nexport interface ToggleKioskModePayload {\n  exit?: boolean;\n}\n\nexport interface GraphClickedPayload {\n  pos: any;\n  panel: any;\n  item: any;\n}\n\nexport interface ThresholdChangedPayload {\n  threshold: any;\n  handleIndex: any;\n}\n\nexport interface DashScrollPayload {\n  restore?: boolean;\n  animate?: boolean;\n  pos?: number;\n}\n\nexport interface PanelChangeViewPayload {}\n\n/**\n * Events\n */\n\nexport const dsRequestResponse = eventFactory<DataSourceResponsePayload>('ds-request-response');\nexport const dsRequestError = eventFactory<any>('ds-request-error');\nexport const toggleSidemenuHidden = eventFactory('toggle-sidemenu-hidden');\nexport const templateVariableValueUpdated = eventFactory('template-variable-value-updated');\nexport const graphClicked = eventFactory<GraphClickedPayload>('graph-click');\n\n/**\n * @internal\n */\nexport const thresholdChanged = eventFactory<ThresholdChangedPayload>('threshold-changed');\n\n/**\n * Used for syncing queries badge count in panel edit queries tab\n * Think we can get rid of this soon\n */\nexport class PanelQueriesChangedEvent extends BusEventBase {\n  static type = 'panel-queries-changed';\n}\n\n/**\n * Used for syncing transformations badge count in panel edit transform tab\n * Think we can get rid of this soon\n */\nexport class PanelTransformationsChangedEvent extends BusEventBase {\n  static type = 'panel-transformations-changed';\n}\n\n/**\n * Used by panel editor to know when panel plugin it'self trigger option updates\n */\nexport class PanelOptionsChangedEvent extends BusEventBase {\n  static type = 'panels-options-changed';\n}\n\n/**\n * Used internally by DashboardModel to commmunicate with DashboardGrid that it needs to re-render\n */\nexport class DashboardPanelsChangedEvent extends BusEventBase {\n  static type = 'dashboard-panels-changed';\n}\n\nexport class PanelDirectiveReadyEvent extends BusEventBase {\n  static type = 'panel-directive-ready';\n}\n\nexport class RenderEvent extends BusEventBase {\n  static type = 'render';\n}\n\ninterface ZoomOutEventPayload {\n  scale: number;\n  updateUrl?: boolean;\n}\n\nexport class ZoomOutEvent extends BusEventWithPayload<ZoomOutEventPayload> {\n  static type = 'zoom-out';\n}\n\nexport enum ShiftTimeEventDirection {\n  Left = -1,\n  Right = 1,\n}\n\ninterface ShiftTimeEventPayload {\n  direction: ShiftTimeEventDirection;\n  updateUrl?: boolean;\n}\n\nexport class ShiftTimeEvent extends BusEventWithPayload<ShiftTimeEventPayload> {\n  static type = 'shift-time';\n}\n\nexport class AbsoluteTimeEvent extends BusEventBase {\n  static type = 'absolute-time';\n}\n\nexport class RemovePanelEvent extends BusEventWithPayload<number> {\n  static type = 'remove-panel';\n}\n\n/**\n * @deprecated use ShowModalReactEvent instead that has this capability built in\n */\nexport class ShowModalEvent extends BusEventWithPayload<ShowModalPayload> {\n  static type = 'show-modal';\n}\n\nexport class ShowConfirmModalEvent extends BusEventWithPayload<ShowConfirmModalPayload> {\n  static type = 'show-confirm-modal';\n}\n\nexport class ShowModalReactEvent extends BusEventWithPayload<ShowModalReactPayload> {\n  static type = 'show-react-modal';\n}\n\n/**\n * @deprecated use ShowModalReactEvent instead that has this capability built in\n */\nexport class HideModalEvent extends BusEventBase {\n  static type = 'hide-modal';\n}\n\nexport class DashboardSavedEvent extends BusEventBase {\n  static type = 'dashboard-saved';\n}\n\nexport class AnnotationQueryStarted extends BusEventWithPayload<AnnotationQuery> {\n  static type = 'annotation-query-started';\n}\n\nexport class AnnotationQueryFinished extends BusEventWithPayload<AnnotationQuery> {\n  static type = 'annotation-query-finished';\n}\n\nexport class PanelEditEnteredEvent extends BusEventWithPayload<number> {\n  static type = 'panel-edit-started';\n}\n\nexport class PanelEditExitedEvent extends BusEventWithPayload<number> {\n  static type = 'panel-edit-finished';\n}\n"],"mappings":";;AAAA,SAA0BA,YAA1B,EAAwCC,mBAAxC,EAA6DC,YAA7D,QAAiF,eAAjF;;AAiFA;AACA;AACA;AAEA,OAAO,MAAMC,iBAAiB,GAAGD,YAAY,CAA4B,qBAA5B,CAAtC;AACP,OAAO,MAAME,cAAc,GAAGF,YAAY,CAAM,kBAAN,CAAnC;AACP,OAAO,MAAMG,oBAAoB,GAAGH,YAAY,CAAC,wBAAD,CAAzC;AACP,OAAO,MAAMI,4BAA4B,GAAGJ,YAAY,CAAC,iCAAD,CAAjD;AACP,OAAO,MAAMK,YAAY,GAAGL,YAAY,CAAsB,aAAtB,CAAjC;AAEP;AACA;AACA;;AACA,OAAO,MAAMM,gBAAgB,GAAGN,YAAY,CAA0B,mBAA1B,CAArC;AAEP;AACA;AACA;AACA;;AACA,OAAO,MAAMO,wBAAN,SAAuCT,YAAvC,CAAoD;AAI3D;AACA;AACA;AACA;;gBAPaS,wB,UACG,uB;;AAOhB,OAAO,MAAMC,gCAAN,SAA+CV,YAA/C,CAA4D;AAInE;AACA;AACA;;gBANaU,gC,UACG,+B;;AAMhB,OAAO,MAAMC,wBAAN,SAAuCX,YAAvC,CAAoD;AAI3D;AACA;AACA;;gBANaW,wB,UACG,wB;;AAMhB,OAAO,MAAMC,2BAAN,SAA0CZ,YAA1C,CAAuD;;gBAAjDY,2B,UACG,0B;;AAGhB,OAAO,MAAMC,wBAAN,SAAuCb,YAAvC,CAAoD;;gBAA9Ca,wB,UACG,uB;;AAGhB,OAAO,MAAMC,WAAN,SAA0Bd,YAA1B,CAAuC;;gBAAjCc,W,UACG,Q;;AAQhB,OAAO,MAAMC,YAAN,SAA2Bd,mBAA3B,CAAoE;;gBAA9Dc,Y,UACG,U;;AAGhB,WAAYC,uBAAZ;;WAAYA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;GAAAA,uB,KAAAA,uB;;AAUZ,OAAO,MAAMC,cAAN,SAA6BhB,mBAA7B,CAAwE;;gBAAlEgB,c,UACG,Y;;AAGhB,OAAO,MAAMC,iBAAN,SAAgClB,YAAhC,CAA6C;;gBAAvCkB,iB,UACG,e;;AAGhB,OAAO,MAAMC,gBAAN,SAA+BlB,mBAA/B,CAA2D;AAIlE;AACA;AACA;;gBANakB,gB,UACG,c;;AAMhB,OAAO,MAAMC,cAAN,SAA6BnB,mBAA7B,CAAmE;;gBAA7DmB,c,UACG,Y;;AAGhB,OAAO,MAAMC,qBAAN,SAAoCpB,mBAApC,CAAiF;;gBAA3EoB,qB,UACG,oB;;AAGhB,OAAO,MAAMC,mBAAN,SAAkCrB,mBAAlC,CAA6E;AAIpF;AACA;AACA;;gBANaqB,mB,UACG,kB;;AAMhB,OAAO,MAAMC,cAAN,SAA6BvB,YAA7B,CAA0C;;gBAApCuB,c,UACG,Y;;AAGhB,OAAO,MAAMC,mBAAN,SAAkCxB,YAAlC,CAA+C;;gBAAzCwB,mB,UACG,iB;;AAGhB,OAAO,MAAMC,sBAAN,SAAqCxB,mBAArC,CAA0E;;gBAApEwB,sB,UACG,0B;;AAGhB,OAAO,MAAMC,uBAAN,SAAsCzB,mBAAtC,CAA2E;;gBAArEyB,uB,UACG,2B;;AAGhB,OAAO,MAAMC,qBAAN,SAAoC1B,mBAApC,CAAgE;;gBAA1D0B,qB,UACG,oB;;AAGhB,OAAO,MAAMC,oBAAN,SAAmC3B,mBAAnC,CAA+D;;gBAAzD2B,oB,UACG,qB"},"metadata":{},"sourceType":"module"}