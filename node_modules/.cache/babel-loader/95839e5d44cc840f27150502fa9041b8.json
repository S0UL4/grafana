{"ast":null,"code":"const _excluded = [\"children\", \"isFocused\", \"isInvalid\", \"className\", \"htmlFor\", \"tooltip\", \"width\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Icon } from '../Icon/Icon';\nimport { Tooltip } from '../Tooltip';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const FormLabel = _ref => {\n  let {\n    children,\n    isFocused,\n    isInvalid,\n    className,\n    htmlFor,\n    tooltip,\n    width\n  } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  const classes = classNames(className, `gf-form-label width-${width ? width : '10'}`, {\n    'gf-form-label--is-focused': isFocused,\n    'gf-form-label--is-invalid': isInvalid\n  });\n  return /*#__PURE__*/_jsxs(\"label\", Object.assign({\n    className: classes\n  }, rest, {\n    htmlFor: htmlFor,\n    children: [children, tooltip && /*#__PURE__*/_jsx(Tooltip, {\n      placement: \"top\",\n      content: tooltip,\n      theme: 'info',\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-help-icon gf-form-help-icon--right-normal\",\n        children: /*#__PURE__*/_jsx(Icon, {\n          name: \"info-circle\",\n          size: \"sm\",\n          style: {\n            marginLeft: '10px'\n          }\n        })\n      })\n    })]\n  }));\n};\nexport const InlineFormLabel = FormLabel;","map":{"version":3,"names":["classNames","React","Icon","Tooltip","FormLabel","children","isFocused","isInvalid","className","htmlFor","tooltip","width","rest","classes","marginLeft","InlineFormLabel"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/FormLabel/FormLabel.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\nimport { Icon } from '../Icon/Icon';\nimport { Tooltip, PopoverContent } from '../Tooltip';\n\ninterface Props {\n  children: ReactNode;\n  className?: string;\n  htmlFor?: string;\n  isFocused?: boolean;\n  isInvalid?: boolean;\n  tooltip?: PopoverContent;\n  width?: number | 'auto';\n}\n\nexport const FormLabel: FunctionComponent<Props> = ({\n  children,\n  isFocused,\n  isInvalid,\n  className,\n  htmlFor,\n  tooltip,\n  width,\n  ...rest\n}) => {\n  const classes = classNames(className, `gf-form-label width-${width ? width : '10'}`, {\n    'gf-form-label--is-focused': isFocused,\n    'gf-form-label--is-invalid': isInvalid,\n  });\n\n  return (\n    <label className={classes} {...rest} htmlFor={htmlFor}>\n      {children}\n      {tooltip && (\n        <Tooltip placement=\"top\" content={tooltip} theme={'info'}>\n          <div className=\"gf-form-help-icon gf-form-help-icon--right-normal\">\n            <Icon name=\"info-circle\" size=\"sm\" style={{ marginLeft: '10px' }} />\n          </div>\n        </Tooltip>\n      )}\n    </label>\n  );\n};\n\nexport const InlineFormLabel = FormLabel;\n"],"mappings":";;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAoD,OAApD;AAEA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,OAAT,QAAwC,YAAxC;;;AAYA,OAAO,MAAMC,SAAmC,GAAG,QAS7C;EAAA,IAT8C;IAClDC,QADkD;IAElDC,SAFkD;IAGlDC,SAHkD;IAIlDC,SAJkD;IAKlDC,OALkD;IAMlDC,OANkD;IAOlDC;EAPkD,CAS9C;EAAA,IADDC,IACC;;EACJ,MAAMC,OAAO,GAAGb,UAAU,CAACQ,SAAD,EAAa,uBAAsBG,KAAK,GAAGA,KAAH,GAAW,IAAK,EAAxD,EAA2D;IACnF,6BAA6BL,SADsD;IAEnF,6BAA6BC;EAFsD,CAA3D,CAA1B;EAKA,oBACE;IAAO,SAAS,EAAEM;EAAlB,GAA+BD,IAA/B;IAAqC,OAAO,EAAEH,OAA9C;IAAA,WACGJ,QADH,EAEGK,OAAO,iBACN,KAAC,OAAD;MAAS,SAAS,EAAC,KAAnB;MAAyB,OAAO,EAAEA,OAAlC;MAA2C,KAAK,EAAE,MAAlD;MAAA,uBACE;QAAK,SAAS,EAAC,mDAAf;QAAA,uBACE,KAAC,IAAD;UAAM,IAAI,EAAC,aAAX;UAAyB,IAAI,EAAC,IAA9B;UAAmC,KAAK,EAAE;YAAEI,UAAU,EAAE;UAAd;QAA1C;MADF;IADF,EAHJ;EAAA,GADF;AAYD,CA3BM;AA6BP,OAAO,MAAMC,eAAe,GAAGX,SAAxB"},"metadata":{},"sourceType":"module"}