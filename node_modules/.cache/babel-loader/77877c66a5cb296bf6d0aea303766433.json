{"ast":null,"code":"// Copyright (c) 2017 The Jaeger Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Searches the span.references to find 'CHILD_OF' reference type or returns null.\n * @param  {TraceSpan} span The span whose parent is to be returned.\n * @returns {TraceSpan|null} The parent span if there is one, null otherwise.\n */\nexport function getParent(span) {\n  const parentRef = span.references ? span.references.find(ref => ref.refType === 'CHILD_OF') : null;\n  return parentRef ? parentRef.span : null;\n}","map":{"version":3,"names":["getParent","span","parentRef","references","find","ref","refType"],"sources":["/home/soula/grafana/packages/jaeger-ui-components/src/model/span.tsx"],"sourcesContent":["// Copyright (c) 2017 The Jaeger Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { TraceSpan } from '../types/trace';\n\n/**\n * Searches the span.references to find 'CHILD_OF' reference type or returns null.\n * @param  {TraceSpan} span The span whose parent is to be returned.\n * @returns {TraceSpan|null} The parent span if there is one, null otherwise.\n */\nexport function getParent(span: TraceSpan) {\n  const parentRef = span.references ? span.references.find((ref) => ref.refType === 'CHILD_OF') : null;\n  return parentRef ? parentRef.span : null;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAoC;EACzC,MAAMC,SAAS,GAAGD,IAAI,CAACE,UAAL,GAAkBF,IAAI,CAACE,UAAL,CAAgBC,IAAhB,CAAsBC,GAAD,IAASA,GAAG,CAACC,OAAJ,KAAgB,UAA9C,CAAlB,GAA8E,IAAhG;EACA,OAAOJ,SAAS,GAAGA,SAAS,CAACD,IAAb,GAAoB,IAApC;AACD"},"metadata":{},"sourceType":"module"}