{"ast":null,"code":"import { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { useStyles, useTheme2 } from '../../themes/ThemeContext';\nimport { Button } from '../Button';\nimport { Input } from '../Input/Input';\nimport { TagItem } from './TagItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const TagsInput = ({\n  placeholder = 'New tag (enter key to add)',\n  tags = [],\n  onChange,\n  width,\n  className,\n  disabled,\n  addOnBlur,\n  invalid,\n  id\n}) => {\n  const [newTagName, setNewName] = useState('');\n  const styles = useStyles(getStyles);\n  const theme = useTheme2();\n\n  const onNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const onRemove = tagToRemove => {\n    onChange(tags.filter(x => x !== tagToRemove));\n  };\n\n  const onAdd = event => {\n    event === null || event === void 0 ? void 0 : event.preventDefault();\n\n    if (!tags.includes(newTagName)) {\n      onChange(tags.concat(newTagName));\n    }\n\n    setNewName('');\n  };\n\n  const onBlur = () => {\n    if (addOnBlur && newTagName) {\n      onAdd();\n    }\n  };\n\n  const onKeyboardAdd = event => {\n    event.preventDefault();\n\n    if (event.key === 'Enter' && newTagName !== '') {\n      onChange(tags.concat(newTagName));\n      setNewName('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: cx(styles.wrapper, className, width ? css({\n      width: theme.spacing(width)\n    }) : ''),\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: tags !== null && tags !== void 0 && tags.length ? styles.tags : undefined,\n      children: tags === null || tags === void 0 ? void 0 : tags.map((tag, index) => {\n        return /*#__PURE__*/_jsx(TagItem, {\n          name: tag,\n          onRemove: onRemove,\n          disabled: disabled\n        }, `${tag}-${index}`);\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: /*#__PURE__*/_jsx(Input, {\n        id: id,\n        disabled: disabled,\n        placeholder: placeholder,\n        onChange: onNameChange,\n        value: newTagName,\n        onKeyUp: onKeyboardAdd,\n        onKeyDown: e => {\n          // onKeyDown is triggered before onKeyUp, triggering submit behaviour on Enter press if this component\n          // is used inside forms. Moving onKeyboardAdd callback here doesn't work since text input is not captured in onKeyDown\n          if (e.key === 'Enter') {\n            e.preventDefault();\n          }\n        },\n        onBlur: onBlur,\n        invalid: invalid,\n        suffix: newTagName.length > 0 && /*#__PURE__*/_jsx(Button, {\n          fill: \"text\",\n          className: styles.addButtonStyle,\n          onClick: onAdd,\n          size: \"md\",\n          children: \"Add\"\n        })\n      })\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  wrapper: css`\n    min-height: ${theme.spacing.formInputHeight}px;\n    align-items: center;\n    display: flex;\n    flex-wrap: wrap;\n  `,\n  tags: css`\n    display: flex;\n    justify-content: flex-start;\n    flex-wrap: wrap;\n    margin-right: ${theme.spacing.xs};\n  `,\n  addButtonStyle: css`\n    margin: 0 -${theme.spacing.sm};\n  `\n});","map":{"version":3,"names":["css","cx","React","useState","useStyles","useTheme2","Button","Input","TagItem","TagsInput","placeholder","tags","onChange","width","className","disabled","addOnBlur","invalid","id","newTagName","setNewName","styles","getStyles","theme","onNameChange","event","target","value","onRemove","tagToRemove","filter","x","onAdd","preventDefault","includes","concat","onBlur","onKeyboardAdd","key","wrapper","spacing","length","undefined","map","tag","index","e","addButtonStyle","formInputHeight","xs","sm"],"sources":["/home/soula/grafana/packages/grafana-ui/src/components/TagsInput/TagsInput.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { ChangeEvent, KeyboardEvent, FC, useState } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\n\nimport { useStyles, useTheme2 } from '../../themes/ThemeContext';\nimport { Button } from '../Button';\nimport { Input } from '../Input/Input';\n\nimport { TagItem } from './TagItem';\n\nexport interface Props {\n  placeholder?: string;\n  /** Array of selected tags */\n  tags?: string[];\n  onChange: (tags: string[]) => void;\n  width?: number;\n  id?: string;\n  className?: string;\n  /** Toggle disabled state */\n  disabled?: boolean;\n  /** Enable adding new tags when input loses focus */\n  addOnBlur?: boolean;\n  /** Toggle invalid state */\n  invalid?: boolean;\n}\n\nexport const TagsInput: FC<Props> = ({\n  placeholder = 'New tag (enter key to add)',\n  tags = [],\n  onChange,\n  width,\n  className,\n  disabled,\n  addOnBlur,\n  invalid,\n  id,\n}) => {\n  const [newTagName, setNewName] = useState('');\n  const styles = useStyles(getStyles);\n  const theme = useTheme2();\n\n  const onNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setNewName(event.target.value);\n  };\n\n  const onRemove = (tagToRemove: string) => {\n    onChange(tags.filter((x) => x !== tagToRemove));\n  };\n\n  const onAdd = (event?: React.MouseEvent) => {\n    event?.preventDefault();\n    if (!tags.includes(newTagName)) {\n      onChange(tags.concat(newTagName));\n    }\n    setNewName('');\n  };\n\n  const onBlur = () => {\n    if (addOnBlur && newTagName) {\n      onAdd();\n    }\n  };\n\n  const onKeyboardAdd = (event: KeyboardEvent) => {\n    event.preventDefault();\n    if (event.key === 'Enter' && newTagName !== '') {\n      onChange(tags.concat(newTagName));\n      setNewName('');\n    }\n  };\n\n  return (\n    <div className={cx(styles.wrapper, className, width ? css({ width: theme.spacing(width) }) : '')}>\n      <div className={tags?.length ? styles.tags : undefined}>\n        {tags?.map((tag: string, index: number) => {\n          return <TagItem key={`${tag}-${index}`} name={tag} onRemove={onRemove} disabled={disabled} />;\n        })}\n      </div>\n      <div>\n        <Input\n          id={id}\n          disabled={disabled}\n          placeholder={placeholder}\n          onChange={onNameChange}\n          value={newTagName}\n          onKeyUp={onKeyboardAdd}\n          onKeyDown={(e) => {\n            // onKeyDown is triggered before onKeyUp, triggering submit behaviour on Enter press if this component\n            // is used inside forms. Moving onKeyboardAdd callback here doesn't work since text input is not captured in onKeyDown\n            if (e.key === 'Enter') {\n              e.preventDefault();\n            }\n          }}\n          onBlur={onBlur}\n          invalid={invalid}\n          suffix={\n            newTagName.length > 0 && (\n              <Button fill=\"text\" className={styles.addButtonStyle} onClick={onAdd} size=\"md\">\n                Add\n              </Button>\n            )\n          }\n        />\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    min-height: ${theme.spacing.formInputHeight}px;\n    align-items: center;\n    display: flex;\n    flex-wrap: wrap;\n  `,\n  tags: css`\n    display: flex;\n    justify-content: flex-start;\n    flex-wrap: wrap;\n    margin-right: ${theme.spacing.xs};\n  `,\n  addButtonStyle: css`\n    margin: 0 -${theme.spacing.sm};\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}