{"ast":null,"code":"var _div, _div2;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { extend } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { AppEvents } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport DashboardsTable from 'app/features/datasources/DashboardsTable';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class PluginDashboards extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"importAll\", () => {\n      this.importNext(0);\n    });\n\n    _defineProperty(this, \"importNext\", index => {\n      const {\n        dashboards\n      } = this.state;\n      return this.import(dashboards[index], true).then(() => {\n        if (index + 1 < dashboards.length) {\n          return new Promise(resolve => {\n            setTimeout(() => {\n              this.importNext(index + 1).then(() => {\n                resolve();\n              });\n            }, 500);\n          });\n        } else {\n          return Promise.resolve();\n        }\n      });\n    });\n\n    _defineProperty(this, \"import\", (dash, overwrite) => {\n      const {\n        plugin,\n        datasource\n      } = this.props;\n      const installCmd = {\n        pluginId: plugin.id,\n        path: dash.path,\n        overwrite: overwrite,\n        inputs: []\n      };\n\n      if (datasource) {\n        installCmd.inputs.push({\n          name: '*',\n          type: 'datasource',\n          pluginId: datasource.meta.id,\n          value: datasource.name\n        });\n      }\n\n      return getBackendSrv().post(`/api/dashboards/import`, installCmd).then(res => {\n        appEvents.emit(AppEvents.alertSuccess, ['Dashboard Imported', dash.title]);\n        extend(dash, res);\n        this.setState({\n          dashboards: [...this.state.dashboards]\n        });\n      });\n    });\n\n    _defineProperty(this, \"remove\", dash => {\n      getBackendSrv().delete('/api/dashboards/uid/' + dash.uid).then(() => {\n        dash.imported = false;\n        this.setState({\n          dashboards: [...this.state.dashboards]\n        });\n      });\n    });\n\n    this.state = {\n      loading: true,\n      dashboards: []\n    };\n  }\n\n  async componentDidMount() {\n    const pluginId = this.props.plugin.id;\n    getBackendSrv().get(`/api/plugins/${pluginId}/dashboards`).then(dashboards => {\n      this.setState({\n        dashboards,\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      loading,\n      dashboards\n    } = this.state;\n\n    if (loading) {\n      return _div || (_div = /*#__PURE__*/_jsx(\"div\", {\n        children: \"loading...\"\n      }));\n    }\n\n    if (!dashboards || !dashboards.length) {\n      return _div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n        children: \"No dashboards are included with this plugin\"\n      }));\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"gf-form-group\",\n      children: /*#__PURE__*/_jsx(DashboardsTable, {\n        dashboards: dashboards,\n        onImport: this.import,\n        onRemove: this.remove\n      })\n    });\n  }\n\n}","map":{"version":3,"names":["extend","React","PureComponent","AppEvents","getBackendSrv","appEvents","DashboardsTable","PluginDashboards","constructor","props","importNext","index","dashboards","state","import","then","length","Promise","resolve","setTimeout","dash","overwrite","plugin","datasource","installCmd","pluginId","id","path","inputs","push","name","type","meta","value","post","res","emit","alertSuccess","title","setState","delete","uid","imported","loading","componentDidMount","get","render","remove"],"sources":["/home/soula/grafana/public/app/features/plugins/admin/components/PluginDashboards.tsx"],"sourcesContent":["import { extend } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { AppEvents, PluginMeta, DataSourceApi } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\nimport DashboardsTable from 'app/features/datasources/DashboardsTable';\nimport { PluginDashboard } from 'app/types';\n\ninterface Props {\n  plugin: PluginMeta;\n  datasource?: DataSourceApi;\n}\n\ninterface State {\n  dashboards: PluginDashboard[];\n  loading: boolean;\n}\n\nexport class PluginDashboards extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const pluginId = this.props.plugin.id;\n    getBackendSrv()\n      .get(`/api/plugins/${pluginId}/dashboards`)\n      .then((dashboards: any) => {\n        this.setState({ dashboards, loading: false });\n      });\n  }\n\n  importAll = () => {\n    this.importNext(0);\n  };\n\n  private importNext = (index: number) => {\n    const { dashboards } = this.state;\n    return this.import(dashboards[index], true).then(() => {\n      if (index + 1 < dashboards.length) {\n        return new Promise<void>((resolve) => {\n          setTimeout(() => {\n            this.importNext(index + 1).then(() => {\n              resolve();\n            });\n          }, 500);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  };\n\n  import = (dash: PluginDashboard, overwrite: boolean) => {\n    const { plugin, datasource } = this.props;\n\n    const installCmd: any = {\n      pluginId: plugin.id,\n      path: dash.path,\n      overwrite: overwrite,\n      inputs: [],\n    };\n\n    if (datasource) {\n      installCmd.inputs.push({\n        name: '*',\n        type: 'datasource',\n        pluginId: datasource.meta.id,\n        value: datasource.name,\n      });\n    }\n\n    return getBackendSrv()\n      .post(`/api/dashboards/import`, installCmd)\n      .then((res: PluginDashboard) => {\n        appEvents.emit(AppEvents.alertSuccess, ['Dashboard Imported', dash.title]);\n        extend(dash, res);\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  remove = (dash: PluginDashboard) => {\n    getBackendSrv()\n      .delete('/api/dashboards/uid/' + dash.uid)\n      .then(() => {\n        dash.imported = false;\n        this.setState({ dashboards: [...this.state.dashboards] });\n      });\n  };\n\n  render() {\n    const { loading, dashboards } = this.state;\n    if (loading) {\n      return <div>loading...</div>;\n    }\n    if (!dashboards || !dashboards.length) {\n      return <div>No dashboards are included with this plugin</div>;\n    }\n\n    return (\n      <div className=\"gf-form-group\">\n        <DashboardsTable dashboards={dashboards} onImport={this.import} onRemove={this.remove} />\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}