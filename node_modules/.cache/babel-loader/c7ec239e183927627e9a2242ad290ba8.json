{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useDeepCompareEffect } from 'react-use';\nimport { toOption } from '@grafana/data';\nimport { appendTemplateVariables } from './utils/utils';\nexport const useRegions = datasource => {\n  const [regionsIsLoading, setRegionsIsLoading] = useState(false);\n  const [regions, setRegions] = useState([{\n    label: 'default',\n    value: 'default'\n  }]);\n  useEffect(() => {\n    setRegionsIsLoading(true);\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      options: datasource.getVariables().map(toOption)\n    };\n    datasource.getRegions().then(regions => setRegions([...regions, variableOptionGroup])).finally(() => setRegionsIsLoading(false));\n  }, [datasource]);\n  return [regions, regionsIsLoading];\n};\nexport const useNamespaces = datasource => {\n  const [namespaces, setNamespaces] = useState([]);\n  useEffect(() => {\n    datasource.getNamespaces().then(namespaces => {\n      setNamespaces(appendTemplateVariables(datasource, namespaces));\n    });\n  }, [datasource]);\n  return namespaces;\n};\nexport const useMetrics = (datasource, region, namespace) => {\n  const [metrics, setMetrics] = useState([]);\n  useEffect(() => {\n    datasource.getMetrics(namespace, region).then(result => {\n      setMetrics(appendTemplateVariables(datasource, result));\n    });\n  }, [datasource, region, namespace]);\n  return metrics;\n};\nexport const useDimensionKeys = (datasource, region, namespace, metricName, dimensionFilter) => {\n  const [dimensionKeys, setDimensionKeys] = useState([]); // doing deep comparison to avoid making new api calls to list metrics unless dimension filter object props changes\n\n  useDeepCompareEffect(() => {\n    datasource.getDimensionKeys(namespace, region, dimensionFilter, metricName).then(result => {\n      setDimensionKeys(appendTemplateVariables(datasource, result));\n    });\n  }, [datasource, region, namespace, metricName, dimensionFilter]);\n  return dimensionKeys;\n};","map":{"version":3,"names":["useEffect","useState","useDeepCompareEffect","toOption","appendTemplateVariables","useRegions","datasource","regionsIsLoading","setRegionsIsLoading","regions","setRegions","label","value","variableOptionGroup","options","getVariables","map","getRegions","then","finally","useNamespaces","namespaces","setNamespaces","getNamespaces","useMetrics","region","namespace","metrics","setMetrics","getMetrics","result","useDimensionKeys","metricName","dimensionFilter","dimensionKeys","setDimensionKeys","getDimensionKeys"],"sources":["/home/soula/grafana/public/app/plugins/datasource/cloudwatch/hooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useDeepCompareEffect } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\n\nimport { CloudWatchDatasource } from './datasource';\nimport { Dimensions } from './types';\nimport { appendTemplateVariables } from './utils/utils';\n\nexport const useRegions = (datasource: CloudWatchDatasource): [Array<SelectableValue<string>>, boolean] => {\n  const [regionsIsLoading, setRegionsIsLoading] = useState<boolean>(false);\n  const [regions, setRegions] = useState<Array<SelectableValue<string>>>([{ label: 'default', value: 'default' }]);\n\n  useEffect(() => {\n    setRegionsIsLoading(true);\n\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      options: datasource.getVariables().map(toOption),\n    };\n\n    datasource\n      .getRegions()\n      .then((regions: Array<SelectableValue<string>>) => setRegions([...regions, variableOptionGroup]))\n      .finally(() => setRegionsIsLoading(false));\n  }, [datasource]);\n\n  return [regions, regionsIsLoading];\n};\n\nexport const useNamespaces = (datasource: CloudWatchDatasource) => {\n  const [namespaces, setNamespaces] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.getNamespaces().then((namespaces) => {\n      setNamespaces(appendTemplateVariables(datasource, namespaces));\n    });\n  }, [datasource]);\n\n  return namespaces;\n};\n\nexport const useMetrics = (datasource: CloudWatchDatasource, region: string, namespace: string | undefined) => {\n  const [metrics, setMetrics] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.getMetrics(namespace, region).then((result: Array<SelectableValue<string>>) => {\n      setMetrics(appendTemplateVariables(datasource, result));\n    });\n  }, [datasource, region, namespace]);\n\n  return metrics;\n};\n\nexport const useDimensionKeys = (\n  datasource: CloudWatchDatasource,\n  region: string,\n  namespace: string | undefined,\n  metricName: string | undefined,\n  dimensionFilter?: Dimensions\n) => {\n  const [dimensionKeys, setDimensionKeys] = useState<Array<SelectableValue<string>>>([]);\n\n  // doing deep comparison to avoid making new api calls to list metrics unless dimension filter object props changes\n  useDeepCompareEffect(() => {\n    datasource\n      .getDimensionKeys(namespace, region, dimensionFilter, metricName)\n      .then((result: Array<SelectableValue<string>>) => {\n        setDimensionKeys(appendTemplateVariables(datasource, result));\n      });\n  }, [datasource, region, namespace, metricName, dimensionFilter]);\n\n  return dimensionKeys;\n};\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,oBAAT,QAAqC,WAArC;AAEA,SAA0BC,QAA1B,QAA0C,eAA1C;AAIA,SAASC,uBAAT,QAAwC,eAAxC;AAEA,OAAO,MAAMC,UAAU,GAAIC,UAAD,IAAiF;EACzG,MAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAU,KAAV,CAAxD;EACA,MAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAiC,CAAC;IAAEU,KAAK,EAAE,SAAT;IAAoBC,KAAK,EAAE;EAA3B,CAAD,CAAjC,CAAtC;EAEAZ,SAAS,CAAC,MAAM;IACdQ,mBAAmB,CAAC,IAAD,CAAnB;IAEA,MAAMK,mBAAmB,GAAG;MAC1BF,KAAK,EAAE,oBADmB;MAE1BG,OAAO,EAAER,UAAU,CAACS,YAAX,GAA0BC,GAA1B,CAA8Bb,QAA9B;IAFiB,CAA5B;IAKAG,UAAU,CACPW,UADH,GAEGC,IAFH,CAEST,OAAD,IAA6CC,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaI,mBAAb,CAAD,CAF/D,EAGGM,OAHH,CAGW,MAAMX,mBAAmB,CAAC,KAAD,CAHpC;EAID,CAZQ,EAYN,CAACF,UAAD,CAZM,CAAT;EAcA,OAAO,CAACG,OAAD,EAAUF,gBAAV,CAAP;AACD,CAnBM;AAqBP,OAAO,MAAMa,aAAa,GAAId,UAAD,IAAsC;EACjE,MAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAiC,EAAjC,CAA5C;EACAD,SAAS,CAAC,MAAM;IACdM,UAAU,CAACiB,aAAX,GAA2BL,IAA3B,CAAiCG,UAAD,IAAgB;MAC9CC,aAAa,CAAClB,uBAAuB,CAACE,UAAD,EAAae,UAAb,CAAxB,CAAb;IACD,CAFD;EAGD,CAJQ,EAIN,CAACf,UAAD,CAJM,CAAT;EAMA,OAAOe,UAAP;AACD,CATM;AAWP,OAAO,MAAMG,UAAU,GAAG,CAAClB,UAAD,EAAmCmB,MAAnC,EAAmDC,SAAnD,KAAqF;EAC7G,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwB3B,QAAQ,CAAiC,EAAjC,CAAtC;EACAD,SAAS,CAAC,MAAM;IACdM,UAAU,CAACuB,UAAX,CAAsBH,SAAtB,EAAiCD,MAAjC,EAAyCP,IAAzC,CAA+CY,MAAD,IAA4C;MACxFF,UAAU,CAACxB,uBAAuB,CAACE,UAAD,EAAawB,MAAb,CAAxB,CAAV;IACD,CAFD;EAGD,CAJQ,EAIN,CAACxB,UAAD,EAAamB,MAAb,EAAqBC,SAArB,CAJM,CAAT;EAMA,OAAOC,OAAP;AACD,CATM;AAWP,OAAO,MAAMI,gBAAgB,GAAG,CAC9BzB,UAD8B,EAE9BmB,MAF8B,EAG9BC,SAH8B,EAI9BM,UAJ8B,EAK9BC,eAL8B,KAM3B;EACH,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoClC,QAAQ,CAAiC,EAAjC,CAAlD,CADG,CAGH;;EACAC,oBAAoB,CAAC,MAAM;IACzBI,UAAU,CACP8B,gBADH,CACoBV,SADpB,EAC+BD,MAD/B,EACuCQ,eADvC,EACwDD,UADxD,EAEGd,IAFH,CAESY,MAAD,IAA4C;MAChDK,gBAAgB,CAAC/B,uBAAuB,CAACE,UAAD,EAAawB,MAAb,CAAxB,CAAhB;IACD,CAJH;EAKD,CANmB,EAMjB,CAACxB,UAAD,EAAamB,MAAb,EAAqBC,SAArB,EAAgCM,UAAhC,EAA4CC,eAA5C,CANiB,CAApB;EAQA,OAAOC,aAAP;AACD,CAnBM"},"metadata":{},"sourceType":"module"}