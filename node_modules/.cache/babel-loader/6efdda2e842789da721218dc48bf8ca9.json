{"ast":null,"code":"import produce from 'immer';\n// This regex matches URIs representing:\n//  - subscriptions: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572\n//  - resource groups: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources\n//  - resources: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources/providers/Microsoft.Compute/virtualMachines/GithubTestDataVM\nconst RESOURCE_URI_REGEX = /\\/subscriptions\\/(?<subscriptionID>[^/]+)(?:\\/resourceGroups\\/(?<resourceGroup>[^/]+)(?:\\/providers.+\\/(?<resource>[^/]+))?)?/;\nexport function parseResourceURI(resourceURI) {\n  var _matches$groups;\n\n  const matches = RESOURCE_URI_REGEX.exec(resourceURI);\n  const groups = (_matches$groups = matches === null || matches === void 0 ? void 0 : matches.groups) !== null && _matches$groups !== void 0 ? _matches$groups : {};\n  const {\n    subscriptionID,\n    resourceGroup,\n    resource\n  } = groups;\n\n  if (!subscriptionID) {\n    return undefined;\n  }\n\n  return {\n    subscriptionID,\n    resourceGroup,\n    resource\n  };\n}\nexport function isGUIDish(input) {\n  return !!input.match(/^[A-Z0-9]+/i);\n}\nexport function findRow(rows, uri) {\n  for (const row of rows) {\n    if (row.uri.toLowerCase() === uri.toLowerCase()) {\n      return row;\n    }\n\n    if (row.children) {\n      const result = findRow(row.children, uri);\n\n      if (result) {\n        return result;\n      }\n    }\n  }\n\n  return undefined;\n}\nexport function addResources(rows, targetParentId, newResources) {\n  return produce(rows, draftState => {\n    const draftRow = findRow(draftState, targetParentId); // we can't find the selected resource in our list of resources,\n    // probably means user has either mistyped in the input field\n    // or is using template variables.\n    // either way no need to throw, just show that none of the resources are checked\n\n    if (!draftRow) {\n      return;\n    }\n\n    draftRow.children = newResources;\n  });\n}","map":{"version":3,"names":["produce","RESOURCE_URI_REGEX","parseResourceURI","resourceURI","matches","exec","groups","subscriptionID","resourceGroup","resource","undefined","isGUIDish","input","match","findRow","rows","uri","row","toLowerCase","children","result","addResources","targetParentId","newResources","draftState","draftRow"],"sources":["/home/soula/grafana/public/app/plugins/datasource/grafana-azure-monitor-datasource/components/ResourcePicker/utils.ts"],"sourcesContent":["import produce from 'immer';\n\nimport { ResourceRow, ResourceRowGroup } from './types';\n\n// This regex matches URIs representing:\n//  - subscriptions: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572\n//  - resource groups: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources\n//  - resources: /subscriptions/44693801-6ee6-49de-9b2d-9106972f9572/resourceGroups/cloud-datasources/providers/Microsoft.Compute/virtualMachines/GithubTestDataVM\nconst RESOURCE_URI_REGEX =\n  /\\/subscriptions\\/(?<subscriptionID>[^/]+)(?:\\/resourceGroups\\/(?<resourceGroup>[^/]+)(?:\\/providers.+\\/(?<resource>[^/]+))?)?/;\n\ntype RegexGroups = Record<string, string | undefined>;\n\nexport function parseResourceURI(resourceURI: string) {\n  const matches = RESOURCE_URI_REGEX.exec(resourceURI);\n  const groups: RegexGroups = matches?.groups ?? {};\n  const { subscriptionID, resourceGroup, resource } = groups;\n\n  if (!subscriptionID) {\n    return undefined;\n  }\n\n  return { subscriptionID, resourceGroup, resource };\n}\n\nexport function isGUIDish(input: string) {\n  return !!input.match(/^[A-Z0-9]+/i);\n}\n\nexport function findRow(rows: ResourceRowGroup, uri: string): ResourceRow | undefined {\n  for (const row of rows) {\n    if (row.uri.toLowerCase() === uri.toLowerCase()) {\n      return row;\n    }\n\n    if (row.children) {\n      const result = findRow(row.children, uri);\n\n      if (result) {\n        return result;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nexport function addResources(rows: ResourceRowGroup, targetParentId: string, newResources: ResourceRowGroup) {\n  return produce(rows, (draftState) => {\n    const draftRow = findRow(draftState, targetParentId);\n\n    // we can't find the selected resource in our list of resources,\n    // probably means user has either mistyped in the input field\n    // or is using template variables.\n    // either way no need to throw, just show that none of the resources are checked\n    if (!draftRow) {\n      return;\n    }\n\n    draftRow.children = newResources;\n  });\n}\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAIA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GACtB,+HADF;AAKA,OAAO,SAASC,gBAAT,CAA0BC,WAA1B,EAA+C;EAAA;;EACpD,MAAMC,OAAO,GAAGH,kBAAkB,CAACI,IAAnB,CAAwBF,WAAxB,CAAhB;EACA,MAAMG,MAAmB,sBAAGF,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEE,MAAZ,6DAAsB,EAA/C;EACA,MAAM;IAAEC,cAAF;IAAkBC,aAAlB;IAAiCC;EAAjC,IAA8CH,MAApD;;EAEA,IAAI,CAACC,cAAL,EAAqB;IACnB,OAAOG,SAAP;EACD;;EAED,OAAO;IAAEH,cAAF;IAAkBC,aAAlB;IAAiCC;EAAjC,CAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBC,KAAnB,EAAkC;EACvC,OAAO,CAAC,CAACA,KAAK,CAACC,KAAN,CAAY,aAAZ,CAAT;AACD;AAED,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAyCC,GAAzC,EAA+E;EACpF,KAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAwB;IACtB,IAAIE,GAAG,CAACD,GAAJ,CAAQE,WAAR,OAA0BF,GAAG,CAACE,WAAJ,EAA9B,EAAiD;MAC/C,OAAOD,GAAP;IACD;;IAED,IAAIA,GAAG,CAACE,QAAR,EAAkB;MAChB,MAAMC,MAAM,GAAGN,OAAO,CAACG,GAAG,CAACE,QAAL,EAAeH,GAAf,CAAtB;;MAEA,IAAII,MAAJ,EAAY;QACV,OAAOA,MAAP;MACD;IACF;EACF;;EAED,OAAOV,SAAP;AACD;AAED,OAAO,SAASW,YAAT,CAAsBN,IAAtB,EAA8CO,cAA9C,EAAsEC,YAAtE,EAAsG;EAC3G,OAAOvB,OAAO,CAACe,IAAD,EAAQS,UAAD,IAAgB;IACnC,MAAMC,QAAQ,GAAGX,OAAO,CAACU,UAAD,EAAaF,cAAb,CAAxB,CADmC,CAGnC;IACA;IACA;IACA;;IACA,IAAI,CAACG,QAAL,EAAe;MACb;IACD;;IAEDA,QAAQ,CAACN,QAAT,GAAoBI,YAApB;EACD,CAZa,CAAd;AAaD"},"metadata":{},"sourceType":"module"}