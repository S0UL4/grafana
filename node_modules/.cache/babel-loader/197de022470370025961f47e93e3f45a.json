{"ast":null,"code":"var _InlineFormLabel, _InlineFormLabel2, _InfoBox, _InlineFormLabel3, _h, _InfoBox2, _Alert, _div;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { uniqueId } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { onUpdateDatasourceOption, updateDatasourcePluginResetOption, onUpdateDatasourceJsonDataOption, onUpdateDatasourceJsonDataOptionSelect, onUpdateDatasourceSecureJsonDataOption, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { Alert, DataSourceHttpSettings, InfoBox, InlineField, InlineFormLabel, LegacyForms, Select } from '@grafana/ui';\nconst {\n  Input,\n  SecretFormField\n} = LegacyForms;\nimport { InfluxVersion } from '../types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nconst httpModes = [{\n  label: 'GET',\n  value: 'GET'\n}, {\n  label: 'POST',\n  value: 'POST'\n}];\nconst versions = [{\n  label: 'InfluxQL',\n  value: InfluxVersion.InfluxQL,\n  description: 'The InfluxDB SQL-like query language.'\n}, {\n  label: 'Flux',\n  value: InfluxVersion.Flux,\n  description: 'Advanced data scripting and query language.  Supported in InfluxDB 2.x and 1.8+'\n}];\nexport class ConfigEditor extends PureComponent {\n  constructor(props) {\n    var _props$options$jsonDa;\n\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      maxSeries: ''\n    });\n\n    _defineProperty(this, \"htmlPrefix\", void 0);\n\n    _defineProperty(this, \"onResetPassword\", () => {\n      updateDatasourcePluginResetOption(this.props, 'password');\n    });\n\n    _defineProperty(this, \"onResetToken\", () => {\n      updateDatasourcePluginResetOption(this.props, 'token');\n    });\n\n    _defineProperty(this, \"onVersionChanged\", selected => {\n      const {\n        options,\n        onOptionsChange\n      } = this.props;\n      const copy = Object.assign({}, options, {\n        jsonData: Object.assign({}, options.jsonData, {\n          version: selected.value\n        })\n      });\n\n      if (selected.value === InfluxVersion.Flux) {\n        copy.access = 'proxy';\n        copy.basicAuth = true;\n        copy.jsonData.httpMode = 'POST'; // Remove old 1x configs\n\n        delete copy.user;\n        delete copy.database;\n      }\n\n      onOptionsChange(copy);\n    });\n\n    this.state.maxSeries = ((_props$options$jsonDa = props.options.jsonData.maxSeries) === null || _props$options$jsonDa === void 0 ? void 0 : _props$options$jsonDa.toString()) || '';\n    this.htmlPrefix = uniqueId('influxdb-config');\n  } // 1x\n\n\n  renderInflux2x() {\n    const {\n      options\n    } = this.props;\n    const {\n      secureJsonFields\n    } = options;\n    const secureJsonData = options.secureJsonData || {};\n    const {\n      htmlPrefix\n    } = this;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [/*#__PURE__*/_jsx(InlineFormLabel, {\n            htmlFor: `${htmlPrefix}-org`,\n            className: \"width-10\",\n            children: \"Organization\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"width-10\",\n            children: /*#__PURE__*/_jsx(Input, {\n              id: `${htmlPrefix}-org`,\n              className: \"width-20\",\n              value: options.jsonData.organization || '',\n              onChange: onUpdateDatasourceJsonDataOption(this.props, 'organization')\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form\",\n          children: /*#__PURE__*/_jsx(SecretFormField, {\n            isConfigured: secureJsonFields && secureJsonFields.token,\n            value: secureJsonData.token || '',\n            label: \"Token\",\n            \"aria-label\": \"Token\",\n            labelWidth: 10,\n            inputWidth: 20,\n            onReset: this.onResetToken,\n            onChange: onUpdateDatasourceSecureJsonDataOption(this.props, 'token')\n          })\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_InlineFormLabel || (_InlineFormLabel = /*#__PURE__*/_jsx(InlineFormLabel, {\n            className: \"width-10\",\n            children: \"Default Bucket\"\n          })), /*#__PURE__*/_jsx(\"div\", {\n            className: \"width-10\",\n            children: /*#__PURE__*/_jsx(Input, {\n              className: \"width-20\",\n              placeholder: \"default bucket\",\n              value: options.jsonData.defaultBucket || '',\n              onChange: onUpdateDatasourceJsonDataOption(this.props, 'defaultBucket')\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_InlineFormLabel2 || (_InlineFormLabel2 = /*#__PURE__*/_jsx(InlineFormLabel, {\n            className: \"width-10\",\n            tooltip: \"A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example 1m if your data is written every minute.\",\n            children: \"Min time interval\"\n          })), /*#__PURE__*/_jsx(\"div\", {\n            className: \"width-10\",\n            children: /*#__PURE__*/_jsx(Input, {\n              className: \"width-10\",\n              placeholder: \"10s\",\n              value: options.jsonData.timeInterval || '',\n              onChange: onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')\n            })\n          })]\n        })\n      })]\n    });\n  }\n\n  renderInflux1x() {\n    const {\n      options\n    } = this.props;\n    const {\n      secureJsonFields\n    } = options;\n    const secureJsonData = options.secureJsonData || {};\n    const {\n      htmlPrefix\n    } = this;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_InfoBox || (_InfoBox = /*#__PURE__*/_jsxs(InfoBox, {\n        children: [/*#__PURE__*/_jsx(\"h5\", {\n          children: \"Database Access\"\n        }), /*#__PURE__*/_jsxs(\"p\", {\n          children: [\"Setting the database for this datasource does not deny access to other databases. The InfluxDB query syntax allows switching the database in the query. For example:\", /*#__PURE__*/_jsx(\"code\", {\n            children: \"SHOW MEASUREMENTS ON _internal\"\n          }), \" or\", /*#__PURE__*/_jsx(\"code\", {\n            children: \"SELECT * FROM \\\"_internal\\\"..\\\"database\\\" LIMIT 10\"\n          }), /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"br\", {}), \"To support data isolation and security, make sure appropriate permissions are configured in InfluxDB.\"]\n        })]\n      })), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [/*#__PURE__*/_jsx(InlineFormLabel, {\n            htmlFor: `${htmlPrefix}-db`,\n            className: \"width-10\",\n            children: \"Database\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"width-20\",\n            children: /*#__PURE__*/_jsx(Input, {\n              id: `${htmlPrefix}-db`,\n              className: \"width-20\",\n              value: options.database || '',\n              onChange: onUpdateDatasourceOption(this.props, 'database')\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [/*#__PURE__*/_jsx(InlineFormLabel, {\n            htmlFor: `${htmlPrefix}-user`,\n            className: \"width-10\",\n            children: \"User\"\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"width-10\",\n            children: /*#__PURE__*/_jsx(Input, {\n              id: `${htmlPrefix}-user`,\n              className: \"width-20\",\n              value: options.user || '',\n              onChange: onUpdateDatasourceOption(this.props, 'user')\n            })\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form\",\n          children: /*#__PURE__*/_jsx(SecretFormField, {\n            isConfigured: secureJsonFields && secureJsonFields.password,\n            value: secureJsonData.password || '',\n            label: \"Password\",\n            \"aria-label\": \"Password\",\n            labelWidth: 10,\n            inputWidth: 20,\n            onReset: this.onResetPassword,\n            onChange: onUpdateDatasourceSecureJsonDataOption(this.props, 'password')\n          })\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [/*#__PURE__*/_jsx(InlineFormLabel, {\n            htmlFor: `${htmlPrefix}-http-method`,\n            className: \"width-10\",\n            tooltip: \"You can use either GET or POST HTTP method to query your InfluxDB database. The POST method allows you to perform heavy requests (with a lots of WHERE clause) while the GET method will restrict you and return an error if the query is too large.\",\n            children: \"HTTP Method\"\n          }), /*#__PURE__*/_jsx(Select, {\n            inputId: `${htmlPrefix}-http-method`,\n            className: \"width-10\",\n            value: httpModes.find(httpMode => httpMode.value === options.jsonData.httpMode),\n            options: httpModes,\n            defaultValue: options.jsonData.httpMode,\n            onChange: onUpdateDatasourceJsonDataOptionSelect(this.props, 'httpMode')\n          })]\n        })\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-inline\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"gf-form\",\n          children: [_InlineFormLabel3 || (_InlineFormLabel3 = /*#__PURE__*/_jsx(InlineFormLabel, {\n            className: \"width-10\",\n            tooltip: \"A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example 1m if your data is written every minute.\",\n            children: \"Min time interval\"\n          })), /*#__PURE__*/_jsx(\"div\", {\n            className: \"width-10\",\n            children: /*#__PURE__*/_jsx(Input, {\n              className: \"width-10\",\n              placeholder: \"10s\",\n              value: options.jsonData.timeInterval || '',\n              onChange: onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')\n            })\n          })]\n        })\n      })]\n    });\n  }\n\n  render() {\n    const {\n      options,\n      onOptionsChange\n    } = this.props;\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [_h || (_h = /*#__PURE__*/_jsx(\"h3\", {\n        className: \"page-heading\",\n        children: \"Query Language\"\n      })), /*#__PURE__*/_jsx(\"div\", {\n        className: \"gf-form-group\",\n        children: /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form-inline\",\n          children: /*#__PURE__*/_jsx(\"div\", {\n            className: \"gf-form\",\n            children: /*#__PURE__*/_jsx(Select, {\n              \"aria-label\": \"Query language\",\n              className: \"width-30\",\n              value: options.jsonData.version === InfluxVersion.Flux ? versions[1] : versions[0],\n              options: versions,\n              defaultValue: versions[0],\n              onChange: this.onVersionChanged\n            })\n          })\n        })\n      }), options.jsonData.version === InfluxVersion.Flux && (_InfoBox2 || (_InfoBox2 = /*#__PURE__*/_jsxs(InfoBox, {\n        children: [/*#__PURE__*/_jsx(\"h5\", {\n          children: \"Support for Flux in Grafana is currently in beta\"\n        }), /*#__PURE__*/_jsxs(\"p\", {\n          children: [\"Please report any issues to: \", /*#__PURE__*/_jsx(\"br\", {}), /*#__PURE__*/_jsx(\"a\", {\n            href: \"https://github.com/grafana/grafana/issues/new/choose\",\n            children: \"https://github.com/grafana/grafana/issues\"\n          })]\n        })]\n      }))), options.access === 'direct' && (_Alert || (_Alert = /*#__PURE__*/_jsx(Alert, {\n        title: \"Deprecation Notice\",\n        severity: \"warning\",\n        children: \"Browser access mode in the InfluxDB datasource is deprecated and will be removed in a future release.\"\n      }))), /*#__PURE__*/_jsx(DataSourceHttpSettings, {\n        showAccessOptions: true,\n        dataSourceConfig: options,\n        defaultUrl: \"http://localhost:8086\",\n        onChange: onOptionsChange\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"gf-form-group\",\n        children: [_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(\"h3\", {\n            className: \"page-heading\",\n            children: \"InfluxDB Details\"\n          })\n        })), options.jsonData.version === InfluxVersion.Flux ? this.renderInflux2x() : this.renderInflux1x(), /*#__PURE__*/_jsx(\"div\", {\n          className: \"gf-form-inline\",\n          children: /*#__PURE__*/_jsx(InlineField, {\n            labelWidth: 20,\n            label: \"Max series\",\n            tooltip: \"Limit the number of series/tables that Grafana will process. Lower this number to prevent abuse, and increase it if you have lots of small time series and not all are shown. Defaults to 1000.\",\n            children: /*#__PURE__*/_jsx(Input, {\n              placeholder: \"1000\",\n              type: \"number\",\n              className: \"width-10\",\n              value: this.state.maxSeries,\n              onChange: event => {\n                // We duplicate this state so that we allow to write freely inside the input. We don't have\n                // any influence over saving so this seems to be only way to do this.\n                this.setState({\n                  maxSeries: event.currentTarget.value\n                });\n                const val = parseInt(event.currentTarget.value, 10);\n                updateDatasourcePluginJsonDataOption(this.props, 'maxSeries', Number.isFinite(val) ? val : undefined);\n              }\n            })\n          })\n        })]\n      })]\n    });\n  }\n\n}\nexport default ConfigEditor;","map":{"version":3,"names":["uniqueId","React","PureComponent","onUpdateDatasourceOption","updateDatasourcePluginResetOption","onUpdateDatasourceJsonDataOption","onUpdateDatasourceJsonDataOptionSelect","onUpdateDatasourceSecureJsonDataOption","updateDatasourcePluginJsonDataOption","Alert","DataSourceHttpSettings","InfoBox","InlineField","InlineFormLabel","LegacyForms","Select","Input","SecretFormField","InfluxVersion","httpModes","label","value","versions","InfluxQL","description","Flux","ConfigEditor","constructor","props","maxSeries","selected","options","onOptionsChange","copy","jsonData","version","access","basicAuth","httpMode","user","database","state","toString","htmlPrefix","renderInflux2x","secureJsonFields","secureJsonData","organization","token","onResetToken","defaultBucket","timeInterval","renderInflux1x","password","onResetPassword","find","render","onVersionChanged","event","setState","currentTarget","val","parseInt","Number","isFinite","undefined"],"sources":["/home/soula/grafana/public/app/plugins/datasource/influxdb/components/ConfigEditor.tsx"],"sourcesContent":["import { uniqueId } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  SelectableValue,\n  onUpdateDatasourceOption,\n  updateDatasourcePluginResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { Alert, DataSourceHttpSettings, InfoBox, InlineField, InlineFormLabel, LegacyForms, Select } from '@grafana/ui';\n\nconst { Input, SecretFormField } = LegacyForms;\nimport { InfluxOptions, InfluxSecureJsonData, InfluxVersion } from '../types';\n\nconst httpModes = [\n  { label: 'GET', value: 'GET' },\n  { label: 'POST', value: 'POST' },\n] as SelectableValue[];\n\nconst versions = [\n  {\n    label: 'InfluxQL',\n    value: InfluxVersion.InfluxQL,\n    description: 'The InfluxDB SQL-like query language.',\n  },\n  {\n    label: 'Flux',\n    value: InfluxVersion.Flux,\n    description: 'Advanced data scripting and query language.  Supported in InfluxDB 2.x and 1.8+',\n  },\n] as Array<SelectableValue<InfluxVersion>>;\n\nexport type Props = DataSourcePluginOptionsEditorProps<InfluxOptions>;\ntype State = {\n  maxSeries: string | undefined;\n};\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  state = {\n    maxSeries: '',\n  };\n\n  htmlPrefix: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.state.maxSeries = props.options.jsonData.maxSeries?.toString() || '';\n    this.htmlPrefix = uniqueId('influxdb-config');\n  }\n\n  // 1x\n  onResetPassword = () => {\n    updateDatasourcePluginResetOption(this.props, 'password');\n  };\n\n  // 2x\n  onResetToken = () => {\n    updateDatasourcePluginResetOption(this.props, 'token');\n  };\n\n  onVersionChanged = (selected: SelectableValue<InfluxVersion>) => {\n    const { options, onOptionsChange } = this.props;\n\n    const copy: any = {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        version: selected.value,\n      },\n    };\n    if (selected.value === InfluxVersion.Flux) {\n      copy.access = 'proxy';\n      copy.basicAuth = true;\n      copy.jsonData.httpMode = 'POST';\n\n      // Remove old 1x configs\n      delete copy.user;\n      delete copy.database;\n    }\n\n    onOptionsChange(copy);\n  };\n\n  renderInflux2x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n    const { htmlPrefix } = this;\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel htmlFor={`${htmlPrefix}-org`} className=\"width-10\">\n              Organization\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                id={`${htmlPrefix}-org`}\n                className=\"width-20\"\n                value={options.jsonData.organization || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'organization')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.token) as boolean}\n              value={secureJsonData.token || ''}\n              label=\"Token\"\n              aria-label=\"Token\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetToken}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'token')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-10\">Default Bucket</InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-20\"\n                placeholder=\"default bucket\"\n                value={options.jsonData.defaultBucket || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'defaultBucket')}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  renderInflux1x() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as InfluxSecureJsonData;\n    const { htmlPrefix } = this;\n\n    return (\n      <>\n        <InfoBox>\n          <h5>Database Access</h5>\n          <p>\n            Setting the database for this datasource does not deny access to other databases. The InfluxDB query syntax\n            allows switching the database in the query. For example:\n            <code>SHOW MEASUREMENTS ON _internal</code> or\n            <code>SELECT * FROM &quot;_internal&quot;..&quot;database&quot; LIMIT 10</code>\n            <br />\n            <br />\n            To support data isolation and security, make sure appropriate permissions are configured in InfluxDB.\n          </p>\n        </InfoBox>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel htmlFor={`${htmlPrefix}-db`} className=\"width-10\">\n              Database\n            </InlineFormLabel>\n            <div className=\"width-20\">\n              <Input\n                id={`${htmlPrefix}-db`}\n                className=\"width-20\"\n                value={options.database || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'database')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel htmlFor={`${htmlPrefix}-user`} className=\"width-10\">\n              User\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                id={`${htmlPrefix}-user`}\n                className=\"width-20\"\n                value={options.user || ''}\n                onChange={onUpdateDatasourceOption(this.props, 'user')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <SecretFormField\n              isConfigured={(secureJsonFields && secureJsonFields.password) as boolean}\n              value={secureJsonData.password || ''}\n              label=\"Password\"\n              aria-label=\"Password\"\n              labelWidth={10}\n              inputWidth={20}\n              onReset={this.onResetPassword}\n              onChange={onUpdateDatasourceSecureJsonDataOption(this.props, 'password')}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              htmlFor={`${htmlPrefix}-http-method`}\n              className=\"width-10\"\n              tooltip=\"You can use either GET or POST HTTP method to query your InfluxDB database. The POST\n          method allows you to perform heavy requests (with a lots of WHERE clause) while the GET method\n          will restrict you and return an error if the query is too large.\"\n            >\n              HTTP Method\n            </InlineFormLabel>\n            <Select\n              inputId={`${htmlPrefix}-http-method`}\n              className=\"width-10\"\n              value={httpModes.find((httpMode) => httpMode.value === options.jsonData.httpMode)}\n              options={httpModes}\n              defaultValue={options.jsonData.httpMode}\n              onChange={onUpdateDatasourceJsonDataOptionSelect(this.props, 'httpMode')}\n            />\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              className=\"width-10\"\n              tooltip=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency,\n\t\t\t\tfor example 1m if your data is written every minute.\"\n            >\n              Min time interval\n            </InlineFormLabel>\n            <div className=\"width-10\">\n              <Input\n                className=\"width-10\"\n                placeholder=\"10s\"\n                value={options.jsonData.timeInterval || ''}\n                onChange={onUpdateDatasourceJsonDataOption(this.props, 'timeInterval')}\n              />\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n\n    return (\n      <>\n        <h3 className=\"page-heading\">Query Language</h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <Select\n                aria-label=\"Query language\"\n                className=\"width-30\"\n                value={options.jsonData.version === InfluxVersion.Flux ? versions[1] : versions[0]}\n                options={versions}\n                defaultValue={versions[0]}\n                onChange={this.onVersionChanged}\n              />\n            </div>\n          </div>\n        </div>\n\n        {options.jsonData.version === InfluxVersion.Flux && (\n          <InfoBox>\n            <h5>Support for Flux in Grafana is currently in beta</h5>\n            <p>\n              Please report any issues to: <br />\n              <a href=\"https://github.com/grafana/grafana/issues/new/choose\">\n                https://github.com/grafana/grafana/issues\n              </a>\n            </p>\n          </InfoBox>\n        )}\n\n        {options.access === 'direct' && (\n          <Alert title=\"Deprecation Notice\" severity=\"warning\">\n            Browser access mode in the InfluxDB datasource is deprecated and will be removed in a future release.\n          </Alert>\n        )}\n\n        <DataSourceHttpSettings\n          showAccessOptions={true}\n          dataSourceConfig={options}\n          defaultUrl=\"http://localhost:8086\"\n          onChange={onOptionsChange}\n        />\n\n        <div className=\"gf-form-group\">\n          <div>\n            <h3 className=\"page-heading\">InfluxDB Details</h3>\n          </div>\n          {options.jsonData.version === InfluxVersion.Flux ? this.renderInflux2x() : this.renderInflux1x()}\n          <div className=\"gf-form-inline\">\n            <InlineField\n              labelWidth={20}\n              label=\"Max series\"\n              tooltip=\"Limit the number of series/tables that Grafana will process. Lower this number to prevent abuse, and increase it if you have lots of small time series and not all are shown. Defaults to 1000.\"\n            >\n              <Input\n                placeholder=\"1000\"\n                type=\"number\"\n                className=\"width-10\"\n                value={this.state.maxSeries}\n                onChange={(event) => {\n                  // We duplicate this state so that we allow to write freely inside the input. We don't have\n                  // any influence over saving so this seems to be only way to do this.\n                  this.setState({ maxSeries: event.currentTarget.value });\n                  const val = parseInt(event.currentTarget.value, 10);\n                  updateDatasourcePluginJsonDataOption(this.props, 'maxSeries', Number.isFinite(val) ? val : undefined);\n                }}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default ConfigEditor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}