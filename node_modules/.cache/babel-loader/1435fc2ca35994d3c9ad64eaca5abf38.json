{"ast":null,"code":"import $ from 'jquery';\nimport { textUtil, systemDateFormats, LegacyGraphHoverClearEvent, LegacyGraphHoverEvent, DataHoverClearEvent } from '@grafana/data';\nimport { appEvents } from 'app/core/core';\nimport { CoreEvents } from 'app/types';\nexport default function GraphTooltip(elem, dashboard, scope, getSeriesFn) {\n  const self = this;\n  const ctrl = scope.ctrl;\n  const panel = ctrl.panel;\n  const hoverEvent = new LegacyGraphHoverEvent({\n    pos: {},\n    point: {},\n    panel: this.panel\n  });\n  const $tooltip = $('<div class=\"graph-tooltip\">');\n\n  this.destroy = () => {\n    $tooltip.remove();\n  };\n\n  this.findHoverIndexFromDataPoints = (posX, series, last) => {\n    const ps = series.datapoints.pointsize;\n    const initial = last * ps;\n    const len = series.datapoints.points.length;\n    let j;\n\n    for (j = initial; j < len; j += ps) {\n      // Special case of a non stepped line, highlight the very last point just before a null point\n      if (!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null || //normal case\n      series.datapoints.points[j] > posX) {\n        return Math.max(j - ps, 0) / ps;\n      }\n    }\n\n    return j / ps - 1;\n  };\n\n  this.findHoverIndexFromData = (posX, series) => {\n    let lower = 0;\n    let upper = series.data.length - 1;\n    let middle;\n\n    while (true) {\n      if (lower > upper) {\n        return Math.max(upper, 0);\n      }\n\n      middle = Math.floor((lower + upper) / 2);\n\n      if (series.data[middle][0] === posX) {\n        return middle;\n      } else if (series.data[middle][0] < posX) {\n        lower = middle + 1;\n      } else {\n        upper = middle - 1;\n      }\n    }\n  };\n\n  this.renderAndShow = (absoluteTime, innerHtml, pos, xMode) => {\n    if (xMode === 'time') {\n      innerHtml = '<div class=\"graph-tooltip-time\">' + absoluteTime + '</div>' + innerHtml;\n    }\n\n    $tooltip.html(innerHtml).place_tt(pos.pageX, pos.pageY, {\n      offset: 10\n    });\n  };\n\n  this.getMultiSeriesPlotHoverInfo = function (seriesList, pos) {\n    let value, i, series, hoverIndex, hoverDistance, pointTime, yaxis; // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.\n\n    let results = [[], [], []]; //now we know the current X (j) position for X and Y values\n\n    let lastValue = 0; //needed for stacked values\n\n    let minDistance, minTime;\n\n    for (i = 0; i < seriesList.length; i++) {\n      series = seriesList[i];\n\n      if (!series.data.length || panel.legend.hideEmpty && series.allIsNull) {\n        // Init value so that it does not brake series sorting\n        results[0].push({\n          hidden: true,\n          value: 0\n        });\n        continue;\n      }\n\n      if (!series.data.length || panel.legend.hideZero && series.allIsZero) {\n        // Init value so that it does not brake series sorting\n        results[0].push({\n          hidden: true,\n          value: 0\n        });\n        continue;\n      }\n\n      if (series.hideTooltip) {\n        results[0].push({\n          hidden: true,\n          value: 0\n        });\n        continue;\n      }\n\n      hoverIndex = this.findHoverIndexFromData(pos.x, series);\n      hoverDistance = pos.x - series.data[hoverIndex][0];\n      pointTime = series.data[hoverIndex][0]; // Take the closest point before the cursor, or if it does not exist, the closest after\n\n      if (!minDistance || hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0) || hoverDistance < 0 && hoverDistance > minDistance) {\n        minDistance = hoverDistance;\n        minTime = pointTime;\n      }\n\n      value = series.data[hoverIndex][1];\n\n      if (series.stack && value !== null && panel.tooltip.value_type !== 'individual') {\n        lastValue += value;\n        value = lastValue;\n      } // Highlighting multiple Points depending on the plot type\n\n\n      if (series.lines.steps || series.stack) {\n        // stacked and steppedLine plots can have series with different length.\n        // Stacked series can increase its length on each new stacked serie if null points found,\n        // to speed the index search we begin always on the last found hoverIndex.\n        hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);\n      } // Be sure we have a yaxis so that it does not brake series sorting\n\n\n      yaxis = 0;\n\n      if (series.yaxis) {\n        yaxis = series.yaxis.n;\n      }\n\n      results[yaxis].push({\n        value: value,\n        hoverIndex: hoverIndex,\n        color: series.color,\n        label: series.aliasEscaped,\n        time: pointTime,\n        distance: hoverDistance,\n        index: i\n      });\n    } // Contat the 3 sub-arrays\n\n\n    results = results[0].concat(results[1], results[2]); // Time of the point closer to pointer\n\n    results.time = minTime;\n    return results;\n  };\n\n  elem.mouseleave(() => {\n    var _panel$tooltip;\n\n    if ((_panel$tooltip = panel.tooltip) !== null && _panel$tooltip !== void 0 && _panel$tooltip.shared) {\n      const plot = elem.data().plot;\n\n      if (plot) {\n        $tooltip.detach();\n        plot.unhighlight();\n      }\n    }\n\n    dashboard.events.publish(new LegacyGraphHoverClearEvent());\n    dashboard.events.publish(new DataHoverClearEvent());\n  });\n  elem.bind('plothover', (event, pos, item) => {\n    self.show(pos, item); // broadcast to other graph panels that we are hovering!\n\n    if (!dashboard.panelInEdit) {\n      pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();\n      hoverEvent.payload.pos = pos;\n      hoverEvent.payload.panel = panel;\n      hoverEvent.payload.point['time'] = pos.x;\n      dashboard.events.publish(hoverEvent);\n    }\n  });\n  elem.bind('plotclick', (event, pos, item) => {\n    appEvents.emit(CoreEvents.graphClicked, {\n      pos: pos,\n      panel: panel,\n      item: item\n    });\n  });\n  elem.bind('plotleave', () => {\n    if (!panel.tooltip.shared) {\n      return;\n    }\n\n    const plot = elem.data().plot;\n\n    if (plot) {\n      $tooltip.detach();\n      plot.unhighlight();\n    }\n  });\n\n  this.clear = plot => {\n    $tooltip.detach();\n    plot.clearCrosshair();\n    plot.unhighlight();\n  };\n\n  this.show = (pos, item) => {\n    const plot = elem.data().plot;\n    const plotData = plot.getData();\n    const xAxes = plot.getXAxes();\n    const xMode = xAxes[0].options.mode;\n    const seriesList = getSeriesFn();\n    let allSeriesMode = panel.tooltip.shared;\n    let group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat; // if panelRelY is defined another panel wants us to show a tooltip\n    // get pageX from position on x axis and pageY from relative position in original panel\n\n    if (pos.panelRelY) {\n      var _$$scrollTop;\n\n      const pointOffset = plot.pointOffset({\n        x: pos.x\n      });\n\n      if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {\n        self.clear(plot);\n        return;\n      }\n\n      pos.pageX = elem.offset().left + pointOffset.left;\n      pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;\n      const scrollTop = (_$$scrollTop = $(window).scrollTop()) !== null && _$$scrollTop !== void 0 ? _$$scrollTop : 0;\n      const isVisible = pos.pageY >= scrollTop && pos.pageY <= $(window).innerHeight() + scrollTop;\n\n      if (!isVisible) {\n        self.clear(plot);\n        return;\n      }\n\n      plot.setCrosshair(pos);\n      allSeriesMode = true;\n\n      if (dashboard.sharedCrosshairModeOnly()) {\n        // if only crosshair mode we are done\n        return;\n      }\n    }\n\n    if (seriesList.length === 0) {\n      return;\n    }\n\n    if (seriesList[0].hasMsResolution) {\n      tooltipFormat = systemDateFormats.fullDateMS;\n    } else {\n      tooltipFormat = systemDateFormats.fullDate;\n    }\n\n    if (allSeriesMode) {\n      plot.unhighlight();\n      const seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);\n      seriesHtml = '';\n      absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat); // Dynamically reorder the hovercard for the current time point if the\n      // option is enabled.\n\n      if (panel.tooltip.sort === 2) {\n        seriesHoverInfo.sort((a, b) => {\n          return b.value - a.value;\n        });\n      } else if (panel.tooltip.sort === 1) {\n        seriesHoverInfo.sort((a, b) => {\n          return a.value - b.value;\n        });\n      }\n\n      for (i = 0; i < seriesHoverInfo.length; i++) {\n        hoverInfo = seriesHoverInfo[i];\n\n        if (hoverInfo.hidden) {\n          continue;\n        }\n\n        let highlightClass = '';\n\n        if (item && hoverInfo.index === item.seriesIndex) {\n          highlightClass = 'graph-tooltip-list-item--highlight';\n        }\n\n        series = seriesList[hoverInfo.index];\n        value = textUtil.sanitize(series.formatValue(hoverInfo.value));\n        const color = textUtil.sanitize(hoverInfo.color);\n        const label = textUtil.sanitize(hoverInfo.label);\n        seriesHtml += '<div class=\"graph-tooltip-list-item ' + highlightClass + '\"><div class=\"graph-tooltip-series-name\">';\n        seriesHtml += '<i class=\"fa fa-minus\" style=\"color:' + color + ';\"></i> ' + label + ':</div>';\n        seriesHtml += '<div class=\"graph-tooltip-value\">' + value + '</div></div>';\n        plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);\n      }\n\n      self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);\n    } else if (item) {\n      // single series tooltip\n      const color = textUtil.sanitize(item.series.color);\n      series = seriesList[item.seriesIndex];\n      group = '<div class=\"graph-tooltip-list-item\"><div class=\"graph-tooltip-series-name\">';\n      group += '<i class=\"fa fa-minus\" style=\"color:' + color + ';\"></i> ' + series.aliasEscaped + ':</div>';\n\n      if (panel.stack && panel.tooltip.value_type === 'individual') {\n        value = item.datapoint[1] - item.datapoint[2];\n      } else {\n        value = item.datapoint[1];\n      }\n\n      value = textUtil.sanitize(series.formatValue(value));\n      absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);\n      group += '<div class=\"graph-tooltip-value\">' + value + '</div>';\n      self.renderAndShow(absoluteTime, group, pos, xMode);\n    } else {\n      // no hit\n      $tooltip.detach();\n    }\n  };\n}","map":{"version":3,"names":["$","textUtil","systemDateFormats","LegacyGraphHoverClearEvent","LegacyGraphHoverEvent","DataHoverClearEvent","appEvents","CoreEvents","GraphTooltip","elem","dashboard","scope","getSeriesFn","self","ctrl","panel","hoverEvent","pos","point","$tooltip","destroy","remove","findHoverIndexFromDataPoints","posX","series","last","ps","datapoints","pointsize","initial","len","points","length","j","lines","steps","Math","max","findHoverIndexFromData","lower","upper","data","middle","floor","renderAndShow","absoluteTime","innerHtml","xMode","html","place_tt","pageX","pageY","offset","getMultiSeriesPlotHoverInfo","seriesList","value","i","hoverIndex","hoverDistance","pointTime","yaxis","results","lastValue","minDistance","minTime","legend","hideEmpty","allIsNull","push","hidden","hideZero","allIsZero","hideTooltip","x","stack","tooltip","value_type","n","color","label","aliasEscaped","time","distance","index","concat","mouseleave","shared","plot","detach","unhighlight","events","publish","bind","event","item","show","panelInEdit","panelRelY","top","height","payload","emit","graphClicked","clear","clearCrosshair","plotData","getData","xAxes","getXAxes","options","mode","allSeriesMode","group","hoverInfo","seriesHtml","tooltipFormat","pointOffset","Number","isNaN","left","width","scrollTop","window","isVisible","innerHeight","setCrosshair","sharedCrosshairModeOnly","hasMsResolution","fullDateMS","fullDate","seriesHoverInfo","formatDate","sort","a","b","highlightClass","seriesIndex","sanitize","formatValue","highlight","datapoint"],"sources":["/home/soula/grafana/public/app/plugins/panel/graph/graph_tooltip.ts"],"sourcesContent":["import $ from 'jquery';\n\nimport {\n  textUtil,\n  systemDateFormats,\n  LegacyGraphHoverClearEvent,\n  LegacyGraphHoverEvent,\n  DataHoverClearEvent,\n} from '@grafana/data';\nimport { appEvents } from 'app/core/core';\nimport { CoreEvents } from 'app/types';\n\nexport default function GraphTooltip(this: any, elem: any, dashboard: any, scope: any, getSeriesFn: any) {\n  const self = this;\n  const ctrl = scope.ctrl;\n  const panel = ctrl.panel;\n  const hoverEvent = new LegacyGraphHoverEvent({ pos: {}, point: {}, panel: this.panel });\n\n  const $tooltip = $('<div class=\"graph-tooltip\">');\n\n  this.destroy = () => {\n    $tooltip.remove();\n  };\n\n  this.findHoverIndexFromDataPoints = (posX: number, series: any, last: number) => {\n    const ps = series.datapoints.pointsize;\n    const initial = last * ps;\n    const len = series.datapoints.points.length;\n    let j;\n    for (j = initial; j < len; j += ps) {\n      // Special case of a non stepped line, highlight the very last point just before a null point\n      if (\n        (!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null) ||\n        //normal case\n        series.datapoints.points[j] > posX\n      ) {\n        return Math.max(j - ps, 0) / ps;\n      }\n    }\n    return j / ps - 1;\n  };\n\n  this.findHoverIndexFromData = (posX: any, series: any) => {\n    let lower = 0;\n    let upper = series.data.length - 1;\n    let middle;\n    while (true) {\n      if (lower > upper) {\n        return Math.max(upper, 0);\n      }\n      middle = Math.floor((lower + upper) / 2);\n      if (series.data[middle][0] === posX) {\n        return middle;\n      } else if (series.data[middle][0] < posX) {\n        lower = middle + 1;\n      } else {\n        upper = middle - 1;\n      }\n    }\n  };\n\n  this.renderAndShow = (absoluteTime: string, innerHtml: string, pos: { pageX: number; pageY: any }, xMode: string) => {\n    if (xMode === 'time') {\n      innerHtml = '<div class=\"graph-tooltip-time\">' + absoluteTime + '</div>' + innerHtml;\n    }\n    $tooltip.html(innerHtml).place_tt(pos.pageX, pos.pageY, { offset: 10 });\n  };\n\n  this.getMultiSeriesPlotHoverInfo = function (seriesList: any[], pos: { x: number }) {\n    let value, i, series, hoverIndex, hoverDistance, pointTime, yaxis;\n    // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.\n    let results: any = [[], [], []];\n\n    //now we know the current X (j) position for X and Y values\n    let lastValue = 0; //needed for stacked values\n\n    let minDistance, minTime;\n\n    for (i = 0; i < seriesList.length; i++) {\n      series = seriesList[i];\n\n      if (!series.data.length || (panel.legend.hideEmpty && series.allIsNull)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (!series.data.length || (panel.legend.hideZero && series.allIsZero)) {\n        // Init value so that it does not brake series sorting\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      if (series.hideTooltip) {\n        results[0].push({ hidden: true, value: 0 });\n        continue;\n      }\n\n      hoverIndex = this.findHoverIndexFromData(pos.x, series);\n      hoverDistance = pos.x - series.data[hoverIndex][0];\n      pointTime = series.data[hoverIndex][0];\n\n      // Take the closest point before the cursor, or if it does not exist, the closest after\n      if (\n        !minDistance ||\n        (hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0)) ||\n        (hoverDistance < 0 && hoverDistance > minDistance)\n      ) {\n        minDistance = hoverDistance;\n        minTime = pointTime;\n      }\n\n      value = series.data[hoverIndex][1];\n\n      if (series.stack && value !== null && panel.tooltip.value_type !== 'individual') {\n        lastValue += value;\n        value = lastValue;\n      }\n\n      // Highlighting multiple Points depending on the plot type\n      if (series.lines.steps || series.stack) {\n        // stacked and steppedLine plots can have series with different length.\n        // Stacked series can increase its length on each new stacked serie if null points found,\n        // to speed the index search we begin always on the last found hoverIndex.\n        hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);\n      }\n\n      // Be sure we have a yaxis so that it does not brake series sorting\n      yaxis = 0;\n      if (series.yaxis) {\n        yaxis = series.yaxis.n;\n      }\n\n      results[yaxis].push({\n        value: value,\n        hoverIndex: hoverIndex,\n        color: series.color,\n        label: series.aliasEscaped,\n        time: pointTime,\n        distance: hoverDistance,\n        index: i,\n      });\n    }\n\n    // Contat the 3 sub-arrays\n    results = results[0].concat(results[1], results[2]);\n\n    // Time of the point closer to pointer\n    results.time = minTime;\n\n    return results;\n  };\n\n  elem.mouseleave(() => {\n    if (panel.tooltip?.shared) {\n      const plot = elem.data().plot;\n      if (plot) {\n        $tooltip.detach();\n        plot.unhighlight();\n      }\n    }\n    dashboard.events.publish(new LegacyGraphHoverClearEvent());\n    dashboard.events.publish(new DataHoverClearEvent());\n  });\n\n  elem.bind('plothover', (event: any, pos: { panelRelY: number; pageY: number }, item: any) => {\n    self.show(pos, item);\n\n    // broadcast to other graph panels that we are hovering!\n    if (!dashboard.panelInEdit) {\n      pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();\n      hoverEvent.payload.pos = pos;\n      hoverEvent.payload.panel = panel;\n      hoverEvent.payload.point['time'] = (pos as any).x;\n      dashboard.events.publish(hoverEvent);\n    }\n  });\n\n  elem.bind('plotclick', (event: any, pos: any, item: any) => {\n    appEvents.emit(CoreEvents.graphClicked, { pos: pos, panel: panel, item: item });\n  });\n\n  elem.bind('plotleave', () => {\n    if (!panel.tooltip.shared) {\n      return;\n    }\n\n    const plot = elem.data().plot;\n    if (plot) {\n      $tooltip.detach();\n      plot.unhighlight();\n    }\n  });\n\n  this.clear = (plot: { clearCrosshair: () => void; unhighlight: () => void }) => {\n    $tooltip.detach();\n    plot.clearCrosshair();\n    plot.unhighlight();\n  };\n\n  this.show = (pos: any, item: any) => {\n    const plot = elem.data().plot;\n    const plotData = plot.getData();\n    const xAxes = plot.getXAxes();\n    const xMode = xAxes[0].options.mode;\n    const seriesList = getSeriesFn();\n    let allSeriesMode = panel.tooltip.shared;\n    let group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat;\n\n    // if panelRelY is defined another panel wants us to show a tooltip\n    // get pageX from position on x axis and pageY from relative position in original panel\n    if (pos.panelRelY) {\n      const pointOffset = plot.pointOffset({ x: pos.x });\n      if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {\n        self.clear(plot);\n        return;\n      }\n\n      pos.pageX = elem.offset().left + pointOffset.left;\n      pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;\n\n      const scrollTop = $(window).scrollTop() ?? 0;\n      const isVisible = pos.pageY >= scrollTop && pos.pageY <= $(window).innerHeight()! + scrollTop;\n\n      if (!isVisible) {\n        self.clear(plot);\n        return;\n      }\n\n      plot.setCrosshair(pos);\n      allSeriesMode = true;\n\n      if (dashboard.sharedCrosshairModeOnly()) {\n        // if only crosshair mode we are done\n        return;\n      }\n    }\n\n    if (seriesList.length === 0) {\n      return;\n    }\n\n    if (seriesList[0].hasMsResolution) {\n      tooltipFormat = systemDateFormats.fullDateMS;\n    } else {\n      tooltipFormat = systemDateFormats.fullDate;\n    }\n\n    if (allSeriesMode) {\n      plot.unhighlight();\n\n      const seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);\n\n      seriesHtml = '';\n\n      absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat);\n\n      // Dynamically reorder the hovercard for the current time point if the\n      // option is enabled.\n      if (panel.tooltip.sort === 2) {\n        seriesHoverInfo.sort((a: { value: number }, b: { value: number }) => {\n          return b.value - a.value;\n        });\n      } else if (panel.tooltip.sort === 1) {\n        seriesHoverInfo.sort((a: { value: number }, b: { value: number }) => {\n          return a.value - b.value;\n        });\n      }\n\n      for (i = 0; i < seriesHoverInfo.length; i++) {\n        hoverInfo = seriesHoverInfo[i];\n\n        if (hoverInfo.hidden) {\n          continue;\n        }\n\n        let highlightClass = '';\n        if (item && hoverInfo.index === item.seriesIndex) {\n          highlightClass = 'graph-tooltip-list-item--highlight';\n        }\n\n        series = seriesList[hoverInfo.index];\n        value = textUtil.sanitize(series.formatValue(hoverInfo.value));\n\n        const color = textUtil.sanitize(hoverInfo.color);\n        const label = textUtil.sanitize(hoverInfo.label);\n\n        seriesHtml +=\n          '<div class=\"graph-tooltip-list-item ' + highlightClass + '\"><div class=\"graph-tooltip-series-name\">';\n        seriesHtml += '<i class=\"fa fa-minus\" style=\"color:' + color + ';\"></i> ' + label + ':</div>';\n        seriesHtml += '<div class=\"graph-tooltip-value\">' + value + '</div></div>';\n        plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);\n      }\n\n      self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);\n    } else if (item) {\n      // single series tooltip\n      const color = textUtil.sanitize(item.series.color);\n      series = seriesList[item.seriesIndex];\n      group = '<div class=\"graph-tooltip-list-item\"><div class=\"graph-tooltip-series-name\">';\n      group += '<i class=\"fa fa-minus\" style=\"color:' + color + ';\"></i> ' + series.aliasEscaped + ':</div>';\n\n      if (panel.stack && panel.tooltip.value_type === 'individual') {\n        value = item.datapoint[1] - item.datapoint[2];\n      } else {\n        value = item.datapoint[1];\n      }\n\n      value = textUtil.sanitize(series.formatValue(value));\n      absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);\n\n      group += '<div class=\"graph-tooltip-value\">' + value + '</div>';\n\n      self.renderAndShow(absoluteTime, group, pos, xMode);\n    } else {\n      // no hit\n      $tooltip.detach();\n    }\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}