{"ast":null,"code":"var _FeedbackLink, _FlexItem, _Space;\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { CoreApp, LoadingState } from '@grafana/data';\nimport { EditorHeader, EditorRows, FlexItem, InlineSelect, Space } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { FeedbackLink } from '../shared/FeedbackLink';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults, useRawQuery } from '../state';\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderExplained } from './PromQueryBuilderExplained';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const PromQueryEditorSelector = /*#__PURE__*/React.memo(props => {\n  const {\n    onChange,\n    onRunQuery,\n    data,\n    app\n  } = props;\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const query = getQueryWithDefaults(props.query, app);\n  const [rawQuery, setRawQuery] = useRawQuery(); // This should be filled in from the defaults by now.\n\n  const editorMode = query.editorMode;\n  const onEditorModeChange = useCallback(newMetricEditorMode => {\n    var _query$editorMode;\n\n    reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n      newEditor: newMetricEditorMode,\n      previousEditor: (_query$editorMode = query.editorMode) !== null && _query$editorMode !== void 0 ? _query$editorMode : '',\n      newQuery: !query.expr,\n      app: app !== null && app !== void 0 ? app : ''\n    });\n\n    if (newMetricEditorMode === QueryEditorMode.Builder) {\n      const result = buildVisualQueryFromString(query.expr || ''); // If there are errors, give user a chance to decide if they want to go to builder as that can loose some data.\n\n      if (result.errors.length) {\n        setParseModalOpen(true);\n        return;\n      }\n    }\n\n    changeEditorMode(query, newMetricEditorMode, onChange);\n  }, [onChange, query, app]);\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onQueryPreviewChange = event => {\n    const isEnabled = event.currentTarget.checked;\n    setRawQuery(isEnabled);\n  };\n\n  const onChangeInternal = query => {\n    setDataIsStale(true);\n    onChange(query);\n  };\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(ConfirmModal, {\n      isOpen: parseModalOpen,\n      title: \"Query parsing\",\n      body: \"There were errors while trying to parse the query. Continuing to visual builder may loose some parts of the query.\",\n      confirmText: \"Continue\",\n      onConfirm: () => {\n        changeEditorMode(query, QueryEditorMode.Builder, onChange);\n        setParseModalOpen(false);\n      },\n      onDismiss: () => setParseModalOpen(false)\n    }), /*#__PURE__*/_jsxs(EditorHeader, {\n      children: [/*#__PURE__*/_jsx(InlineSelect, {\n        value: null,\n        placeholder: \"Query patterns\",\n        allowCustomValue: true,\n        onChange: ({\n          value\n        }) => {\n          // TODO: Bit convoluted as we don't have access to visualQuery model here. Maybe would make sense to\n          //  move it inside the editor?\n          const result = buildVisualQueryFromString(query.expr || '');\n          result.query.operations = value === null || value === void 0 ? void 0 : value.operations;\n          onChange(Object.assign({}, query, {\n            expr: promQueryModeller.renderQuery(result.query)\n          }));\n        },\n        options: promQueryModeller.getQueryPatterns().map(x => ({\n          label: x.name,\n          value: x\n        }))\n      }), editorMode === QueryEditorMode.Builder && /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(QueryHeaderSwitch, {\n          label: \"Raw query\",\n          value: rawQuery,\n          onChange: onQueryPreviewChange\n        }), _FeedbackLink || (_FeedbackLink = /*#__PURE__*/_jsx(FeedbackLink, {\n          feedbackUrl: \"https://github.com/grafana/grafana/discussions/47693\"\n        }))]\n      }), _FlexItem || (_FlexItem = /*#__PURE__*/_jsx(FlexItem, {\n        grow: 1\n      })), app !== CoreApp.Explore && /*#__PURE__*/_jsx(Button, {\n        variant: dataIsStale ? 'primary' : 'secondary',\n        size: \"sm\",\n        onClick: onRunQuery,\n        icon: (data === null || data === void 0 ? void 0 : data.state) === LoadingState.Loading ? 'fa fa-spinner' : undefined,\n        disabled: (data === null || data === void 0 ? void 0 : data.state) === LoadingState.Loading,\n        children: \"Run queries\"\n      }), /*#__PURE__*/_jsx(QueryEditorModeToggle, {\n        mode: editorMode,\n        onChange: onEditorModeChange\n      })]\n    }), _Space || (_Space = /*#__PURE__*/_jsx(Space, {\n      v: 0.5\n    })), /*#__PURE__*/_jsxs(EditorRows, {\n      children: [editorMode === QueryEditorMode.Code && /*#__PURE__*/_jsx(PromQueryCodeEditor, Object.assign({}, props)), editorMode === QueryEditorMode.Builder && /*#__PURE__*/_jsx(PromQueryBuilderContainer, {\n        query: query,\n        datasource: props.datasource,\n        onChange: onChangeInternal,\n        onRunQuery: props.onRunQuery,\n        data: data,\n        showRawQuery: rawQuery\n      }), editorMode === QueryEditorMode.Explain && /*#__PURE__*/_jsx(PromQueryBuilderExplained, {\n        query: query.expr\n      }), editorMode !== QueryEditorMode.Explain && /*#__PURE__*/_jsx(PromQueryBuilderOptions, {\n        query: query,\n        app: props.app,\n        onChange: onChange,\n        onRunQuery: onRunQuery\n      })]\n    })]\n  });\n});\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';","map":{"version":3,"names":["React","useCallback","useEffect","useState","CoreApp","LoadingState","EditorHeader","EditorRows","FlexItem","InlineSelect","Space","reportInteraction","Button","ConfirmModal","promQueryModeller","buildVisualQueryFromString","FeedbackLink","QueryEditorModeToggle","QueryHeaderSwitch","QueryEditorMode","changeEditorMode","getQueryWithDefaults","useRawQuery","PromQueryBuilderContainer","PromQueryBuilderExplained","PromQueryBuilderOptions","PromQueryCodeEditor","PromQueryEditorSelector","memo","props","onChange","onRunQuery","data","app","parseModalOpen","setParseModalOpen","dataIsStale","setDataIsStale","query","rawQuery","setRawQuery","editorMode","onEditorModeChange","newMetricEditorMode","newEditor","previousEditor","newQuery","expr","Builder","result","errors","length","onQueryPreviewChange","event","isEnabled","currentTarget","checked","onChangeInternal","value","operations","renderQuery","getQueryPatterns","map","x","label","name","Explore","state","Loading","undefined","Code","datasource","Explain","displayName"],"sources":["/home/soula/grafana/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryEditorSelector.tsx"],"sourcesContent":["import React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState } from '@grafana/data';\nimport { EditorHeader, EditorRows, FlexItem, InlineSelect, Space } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\nimport { PromQueryEditorProps } from '../../components/types';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { FeedbackLink } from '../shared/FeedbackLink';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults, useRawQuery } from '../state';\n\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderExplained } from './PromQueryBuilderExplained';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\n\ntype Props = PromQueryEditorProps;\n\nexport const PromQueryEditorSelector = React.memo<Props>((props) => {\n  const { onChange, onRunQuery, data, app } = props;\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n\n  const query = getQueryWithDefaults(props.query, app);\n  const [rawQuery, setRawQuery] = useRawQuery();\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n        newEditor: newMetricEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can loose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newMetricEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onQueryPreviewChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    setRawQuery(isEnabled);\n  };\n\n  const onChangeInternal = (query: PromQuery) => {\n    setDataIsStale(true);\n    onChange(query);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may loose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          changeEditorMode(query, QueryEditorMode.Builder, onChange);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <EditorHeader>\n        <InlineSelect\n          value={null}\n          placeholder=\"Query patterns\"\n          allowCustomValue\n          onChange={({ value }) => {\n            // TODO: Bit convoluted as we don't have access to visualQuery model here. Maybe would make sense to\n            //  move it inside the editor?\n            const result = buildVisualQueryFromString(query.expr || '');\n            result.query.operations = value?.operations!;\n            onChange({\n              ...query,\n              expr: promQueryModeller.renderQuery(result.query),\n            });\n          }}\n          options={promQueryModeller.getQueryPatterns().map((x) => ({ label: x.name, value: x }))}\n        />\n\n        {editorMode === QueryEditorMode.Builder && (\n          <>\n            <QueryHeaderSwitch label=\"Raw query\" value={rawQuery} onChange={onQueryPreviewChange} />\n            <FeedbackLink feedbackUrl=\"https://github.com/grafana/grafana/discussions/47693\" />\n          </>\n        )}\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && <PromQueryCodeEditor {...props} />}\n        {editorMode === QueryEditorMode.Builder && (\n          <PromQueryBuilderContainer\n            query={query}\n            datasource={props.datasource}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            data={data}\n            showRawQuery={rawQuery}\n          />\n        )}\n        {editorMode === QueryEditorMode.Explain && <PromQueryBuilderExplained query={query.expr} />}\n        {editorMode !== QueryEditorMode.Explain && (\n          <PromQueryBuilderOptions query={query} app={props.app} onChange={onChange} onRunQuery={onRunQuery} />\n        )}\n      </EditorRows>\n    </>\n  );\n});\n\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}