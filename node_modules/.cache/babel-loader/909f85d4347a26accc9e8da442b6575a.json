{"ast":null,"code":"import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { DataFrameType } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { Portal, ScaleDistribution, UPlotChart, usePanelContext, useStyles2, useTheme2, VizLayout, VizTooltipContainer } from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapHoverView } from './HeatmapHoverView';\nimport { prepareHeatmapData } from './fields';\nimport { quantizeScheme } from './palettes';\nimport { prepConfig } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const HeatmapPanel = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables\n}) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const {\n    sync\n  } = usePanelContext(); // ugh\n\n  let timeRangeRef = useRef(timeRange);\n  timeRangeRef.current = timeRange;\n  const info = useMemo(() => {\n    try {\n      return prepareHeatmapData(data, options, theme);\n    } catch (ex) {\n      return {\n        warning: `${ex}`\n      };\n    }\n  }, [data, options, theme]);\n  const facets = useMemo(() => {\n    var _info$exemplars, _info$heatmap;\n\n    let exemplarsXFacet = []; // \"Time\" field\n\n    let exemplarsyFacet = [];\n    const meta = readHeatmapRowsCustomMeta(info.heatmap);\n\n    if ((_info$exemplars = info.exemplars) !== null && _info$exemplars !== void 0 && _info$exemplars.length && meta.yMatchWithLabel) {\n      var _info$exemplars2;\n\n      exemplarsXFacet = (_info$exemplars2 = info.exemplars) === null || _info$exemplars2 === void 0 ? void 0 : _info$exemplars2.fields[0].values.toArray(); // ordinal/labeled heatmap-buckets?\n\n      const hasLabeledY = meta.yOrdinalDisplay != null;\n\n      if (hasLabeledY) {\n        var _info$exemplars3;\n\n        let matchExemplarsBy = (_info$exemplars3 = info.exemplars) === null || _info$exemplars3 === void 0 ? void 0 : _info$exemplars3.fields.find(field => field.name === meta.yMatchWithLabel).values.toArray();\n        exemplarsyFacet = matchExemplarsBy.map(label => {\n          var _meta$yOrdinalLabel;\n\n          return (_meta$yOrdinalLabel = meta.yOrdinalLabel) === null || _meta$yOrdinalLabel === void 0 ? void 0 : _meta$yOrdinalLabel.indexOf(label);\n        });\n      } else {\n        var _info$exemplars4;\n\n        exemplarsyFacet = (_info$exemplars4 = info.exemplars) === null || _info$exemplars4 === void 0 ? void 0 : _info$exemplars4.fields[1].values.toArray(); // \"Value\" field\n      }\n    }\n\n    return [null, (_info$heatmap = info.heatmap) === null || _info$heatmap === void 0 ? void 0 : _info$heatmap.fields.map(f => f.values.toArray()), [exemplarsXFacet, exemplarsyFacet]];\n  }, [info.heatmap, info.exemplars]);\n  const palette = useMemo(() => quantizeScheme(options.color, theme), [options.color, theme]);\n  const [hover, setHover] = useState(undefined);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState(false);\n  const isToolTipOpen = useRef(false);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setShouldDisplayCloseButton(false);\n    onhover(null);\n  };\n\n  const onclick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current; // Linking into useState required to re-render tooltip\n\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const onhover = useCallback(evt => {\n    setHover(evt !== null && evt !== void 0 ? evt : undefined);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [options, data.structureRev]); // ugh\n\n  const dataRef = useRef(info);\n  dataRef.current = info;\n  const builder = useMemo(() => {\n    var _dataRef$current, _dataRef$current$heat, _dataRef$current$heat2, _dataRef$current$heat3, _options$filterValues, _options$filterValues2, _options$exemplars$co, _options$exemplars, _options$calculation, _options$calculation$;\n\n    const scaleConfig = (_dataRef$current = dataRef.current) === null || _dataRef$current === void 0 ? void 0 : (_dataRef$current$heat = _dataRef$current.heatmap) === null || _dataRef$current$heat === void 0 ? void 0 : (_dataRef$current$heat2 = _dataRef$current$heat.fields[1].config) === null || _dataRef$current$heat2 === void 0 ? void 0 : (_dataRef$current$heat3 = _dataRef$current$heat2.custom) === null || _dataRef$current$heat3 === void 0 ? void 0 : _dataRef$current$heat3.scaleDistribution;\n    return prepConfig({\n      dataRef,\n      theme,\n      eventBus,\n      onhover: onhover,\n      onclick: options.tooltip.show ? onclick : null,\n      onzoom: evt => {\n        const delta = evt.xMax - evt.xMin;\n\n        if (delta > 1) {\n          onChangeTimeRange({\n            from: evt.xMin,\n            to: evt.xMax\n          });\n        }\n      },\n      isToolTipOpen,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      sync,\n      palette,\n      cellGap: options.cellGap,\n      hideLE: (_options$filterValues = options.filterValues) === null || _options$filterValues === void 0 ? void 0 : _options$filterValues.le,\n      hideGE: (_options$filterValues2 = options.filterValues) === null || _options$filterValues2 === void 0 ? void 0 : _options$filterValues2.ge,\n      exemplarColor: (_options$exemplars$co = (_options$exemplars = options.exemplars) === null || _options$exemplars === void 0 ? void 0 : _options$exemplars.color) !== null && _options$exemplars$co !== void 0 ? _options$exemplars$co : 'rgba(255,0,255,0.7)',\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: (scaleConfig === null || scaleConfig === void 0 ? void 0 : scaleConfig.type) === ScaleDistribution.Log ? +(((_options$calculation = options.calculation) === null || _options$calculation === void 0 ? void 0 : (_options$calculation$ = _options$calculation.yBuckets) === null || _options$calculation$ === void 0 ? void 0 : _options$calculation$.value) || 1) : 1\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, data.structureRev]);\n\n  const renderLegend = () => {\n    var _dataRef$current2, _dataRef$current2$hea, _dataRef$current2$hea2, _dataRef$current3;\n\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n\n    let heatmapType = (_dataRef$current2 = dataRef.current) === null || _dataRef$current2 === void 0 ? void 0 : (_dataRef$current2$hea = _dataRef$current2.heatmap) === null || _dataRef$current2$hea === void 0 ? void 0 : (_dataRef$current2$hea2 = _dataRef$current2$hea.meta) === null || _dataRef$current2$hea2 === void 0 ? void 0 : _dataRef$current2$hea2.type;\n    let isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense((_dataRef$current3 = dataRef.current) === null || _dataRef$current3 === void 0 ? void 0 : _dataRef$current3.heatmap);\n    let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    const countField = info.heatmap.fields[countFieldIdx];\n    let hoverValue = undefined; // seriesIdx: 1 is heatmap layer; 2 is exemplar layer\n\n    if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n      hoverValue = countField.values.get(hover.dataIdx);\n    }\n\n    return /*#__PURE__*/_jsx(VizLayout.Legend, {\n      placement: \"bottom\",\n      maxHeight: \"20%\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: styles.colorScaleWrapper,\n        children: /*#__PURE__*/_jsx(ColorScale, {\n          hoverValue: hoverValue,\n          colorPalette: palette,\n          min: dataRef.current.minValue,\n          max: dataRef.current.maxValue,\n          display: info.display\n        })\n      })\n    });\n  };\n\n  if (info.warning || !info.heatmap) {\n    return /*#__PURE__*/_jsx(PanelDataErrorView, {\n      panelId: id,\n      fieldConfig: fieldConfig,\n      data: data,\n      needsNumberField: true,\n      message: info.warning\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(VizLayout, {\n      width: width,\n      height: height,\n      legend: renderLegend(),\n      children: (vizWidth, vizHeight) => /*#__PURE__*/_jsx(UPlotChart, {\n        config: builder,\n        data: facets,\n        width: vizWidth,\n        height: vizHeight,\n        timeRange: timeRange\n      })\n    }), /*#__PURE__*/_jsx(Portal, {\n      children: hover && options.tooltip.show && /*#__PURE__*/_jsxs(VizTooltipContainer, {\n        position: {\n          x: hover.pageX,\n          y: hover.pageY\n        },\n        offset: {\n          x: 10,\n          y: 10\n        },\n        allowPointerEvents: isToolTipOpen.current,\n        children: [shouldDisplayCloseButton && /*#__PURE__*/_jsxs(_Fragment, {\n          children: [/*#__PURE__*/_jsx(CloseButton, {\n            onClick: onCloseToolTip\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: styles.closeButtonSpacer\n          })]\n        }), /*#__PURE__*/_jsx(HeatmapHoverView, {\n          data: info,\n          hover: hover,\n          showHistogram: options.tooltip.yHistogram\n        })]\n      })\n    })]\n  });\n};\n\nconst getStyles = theme => ({\n  closeButtonSpacer: css`\n    margin-bottom: 15px;\n  `,\n  colorScaleWrapper: css`\n    margin-left: 25px;\n    padding: 10px 0;\n    max-width: 300px;\n  `\n});","map":{"version":3,"names":["css","React","useCallback","useMemo","useRef","useState","DataFrameType","PanelDataErrorView","Portal","ScaleDistribution","UPlotChart","usePanelContext","useStyles2","useTheme2","VizLayout","VizTooltipContainer","CloseButton","ColorScale","isHeatmapCellsDense","readHeatmapRowsCustomMeta","HeatmapHoverView","prepareHeatmapData","quantizeScheme","prepConfig","HeatmapPanel","data","id","timeRange","timeZone","width","height","options","fieldConfig","eventBus","onChangeTimeRange","replaceVariables","theme","styles","getStyles","sync","timeRangeRef","current","info","ex","warning","facets","exemplarsXFacet","exemplarsyFacet","meta","heatmap","exemplars","length","yMatchWithLabel","fields","values","toArray","hasLabeledY","yOrdinalDisplay","matchExemplarsBy","find","field","name","map","label","yOrdinalLabel","indexOf","f","palette","color","hover","setHover","undefined","shouldDisplayCloseButton","setShouldDisplayCloseButton","isToolTipOpen","onCloseToolTip","onhover","onclick","evt","structureRev","dataRef","builder","scaleConfig","config","custom","scaleDistribution","tooltip","show","onzoom","delta","xMax","xMin","from","to","getTimeRange","cellGap","hideLE","filterValues","le","hideGE","ge","exemplarColor","yAxisConfig","yAxis","ySizeDivisor","type","Log","calculation","yBuckets","value","renderLegend","legend","heatmapType","isSparseHeatmap","HeatmapCells","countFieldIdx","countField","hoverValue","seriesIdx","get","dataIdx","colorScaleWrapper","minValue","maxValue","display","vizWidth","vizHeight","x","pageX","y","pageY","closeButtonSpacer","yHistogram"],"sources":["/home/soula/grafana/public/app/plugins/panel/heatmap/HeatmapPanel.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { DataFrameType, GrafanaTheme2, PanelProps, TimeRange } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { ScaleDistributionConfig } from '@grafana/schema';\nimport {\n  Portal,\n  ScaleDistribution,\n  UPlotChart,\n  usePanelContext,\n  useStyles2,\n  useTheme2,\n  VizLayout,\n  VizTooltipContainer,\n} from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { HeatmapHoverView } from './HeatmapHoverView';\nimport { prepareHeatmapData } from './fields';\nimport { PanelOptions } from './models.gen';\nimport { quantizeScheme } from './palettes';\nimport { HeatmapHoverEvent, prepConfig } from './utils';\n\ninterface HeatmapPanelProps extends PanelProps<PanelOptions> {}\n\nexport const HeatmapPanel: React.FC<HeatmapPanelProps> = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables,\n}) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { sync } = usePanelContext();\n\n  // ugh\n  let timeRangeRef = useRef<TimeRange>(timeRange);\n  timeRangeRef.current = timeRange;\n\n  const info = useMemo(() => {\n    try {\n      return prepareHeatmapData(data, options, theme);\n    } catch (ex) {\n      return { warning: `${ex}` };\n    }\n  }, [data, options, theme]);\n\n  const facets = useMemo(() => {\n    let exemplarsXFacet: number[] = []; // \"Time\" field\n    let exemplarsyFacet: number[] = [];\n\n    const meta = readHeatmapRowsCustomMeta(info.heatmap);\n    if (info.exemplars?.length && meta.yMatchWithLabel) {\n      exemplarsXFacet = info.exemplars?.fields[0].values.toArray();\n\n      // ordinal/labeled heatmap-buckets?\n      const hasLabeledY = meta.yOrdinalDisplay != null;\n\n      if (hasLabeledY) {\n        let matchExemplarsBy = info.exemplars?.fields\n          .find((field) => field.name === meta.yMatchWithLabel)!\n          .values.toArray();\n        exemplarsyFacet = matchExemplarsBy.map((label) => meta.yOrdinalLabel?.indexOf(label)) as number[];\n      } else {\n        exemplarsyFacet = info.exemplars?.fields[1].values.toArray() as number[]; // \"Value\" field\n      }\n    }\n\n    return [null, info.heatmap?.fields.map((f) => f.values.toArray()), [exemplarsXFacet, exemplarsyFacet]];\n  }, [info.heatmap, info.exemplars]);\n\n  const palette = useMemo(() => quantizeScheme(options.color, theme), [options.color, theme]);\n\n  const [hover, setHover] = useState<HeatmapHoverEvent | undefined>(undefined);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState<boolean>(false);\n  const isToolTipOpen = useRef<boolean>(false);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setShouldDisplayCloseButton(false);\n    onhover(null);\n  };\n\n  const onclick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current;\n\n    // Linking into useState required to re-render tooltip\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const onhover = useCallback(\n    (evt?: HeatmapHoverEvent | null) => {\n      setHover(evt ?? undefined);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [options, data.structureRev]\n  );\n\n  // ugh\n  const dataRef = useRef(info);\n  dataRef.current = info;\n\n  const builder = useMemo(() => {\n    const scaleConfig = dataRef.current?.heatmap?.fields[1].config?.custom\n      ?.scaleDistribution as ScaleDistributionConfig;\n    return prepConfig({\n      dataRef,\n      theme,\n      eventBus,\n      onhover: onhover,\n      onclick: options.tooltip.show ? onclick : null,\n      onzoom: (evt) => {\n        const delta = evt.xMax - evt.xMin;\n        if (delta > 1) {\n          onChangeTimeRange({ from: evt.xMin, to: evt.xMax });\n        }\n      },\n      isToolTipOpen,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      sync,\n      palette,\n      cellGap: options.cellGap,\n      hideLE: options.filterValues?.le,\n      hideGE: options.filterValues?.ge,\n      exemplarColor: options.exemplars?.color ?? 'rgba(255,0,255,0.7)',\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: scaleConfig?.type === ScaleDistribution.Log ? +(options.calculation?.yBuckets?.value || 1) : 1,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, data.structureRev]);\n\n  const renderLegend = () => {\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n\n    let heatmapType = dataRef.current?.heatmap?.meta?.type;\n    let isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n    let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    const countField = info.heatmap.fields[countFieldIdx];\n\n    let hoverValue: number | undefined = undefined;\n    // seriesIdx: 1 is heatmap layer; 2 is exemplar layer\n    if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n      hoverValue = countField.values.get(hover.dataIdx);\n    }\n\n    return (\n      <VizLayout.Legend placement=\"bottom\" maxHeight=\"20%\">\n        <div className={styles.colorScaleWrapper}>\n          <ColorScale\n            hoverValue={hoverValue}\n            colorPalette={palette}\n            min={dataRef.current.minValue!}\n            max={dataRef.current.maxValue!}\n            display={info.display}\n          />\n        </div>\n      </VizLayout.Legend>\n    );\n  };\n\n  if (info.warning || !info.heatmap) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsNumberField={true}\n        message={info.warning}\n      />\n    );\n  }\n\n  return (\n    <>\n      <VizLayout width={width} height={height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={builder} data={facets as any} width={vizWidth} height={vizHeight} timeRange={timeRange}>\n            {/*children ? children(config, alignedFrame) : null*/}\n          </UPlotChart>\n        )}\n      </VizLayout>\n      <Portal>\n        {hover && options.tooltip.show && (\n          <VizTooltipContainer\n            position={{ x: hover.pageX, y: hover.pageY }}\n            offset={{ x: 10, y: 10 }}\n            allowPointerEvents={isToolTipOpen.current}\n          >\n            {shouldDisplayCloseButton && (\n              <>\n                <CloseButton onClick={onCloseToolTip} />\n                <div className={styles.closeButtonSpacer} />\n              </>\n            )}\n            <HeatmapHoverView data={info} hover={hover} showHistogram={options.tooltip.yHistogram} />\n          </VizTooltipContainer>\n        )}\n      </Portal>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  closeButtonSpacer: css`\n    margin-bottom: 15px;\n  `,\n  colorScaleWrapper: css`\n    margin-left: 25px;\n    padding: 10px 0;\n    max-width: 300px;\n  `,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}