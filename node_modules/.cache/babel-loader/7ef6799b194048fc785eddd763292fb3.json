{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { MutableDataFrame } from '../../dataframe';\nimport { getFieldDisplayName } from '../../field/fieldState';\nimport { FieldType } from '../../types';\nimport { DataTransformerID } from './ids';\nconst DEFAULT_COLUMN_FIELD = 'Time';\nconst DEFAULT_ROW_FIELD = 'Time';\nconst DEFAULT_VALUE_FIELD = 'Value';\nexport const groupingToMatrixTransformer = {\n  id: DataTransformerID.groupingToMatrix,\n  name: 'Grouping to Matrix',\n  description: 'Groups series by field and return a matrix visualisation',\n  defaultOptions: {\n    columnField: DEFAULT_COLUMN_FIELD,\n    rowField: DEFAULT_ROW_FIELD,\n    valueField: DEFAULT_VALUE_FIELD\n  },\n  operator: options => source => source.pipe(map(data => {\n    const columnFieldMatch = options.columnField || DEFAULT_COLUMN_FIELD;\n    const rowFieldMatch = options.rowField || DEFAULT_ROW_FIELD;\n    const valueFieldMatch = options.valueField || DEFAULT_VALUE_FIELD; // Accept only single queries\n\n    if (data.length !== 1) {\n      return data;\n    }\n\n    const frame = data[0];\n    const keyColumnField = findKeyField(frame, columnFieldMatch);\n    const keyRowField = findKeyField(frame, rowFieldMatch);\n    const valueField = findKeyField(frame, valueFieldMatch);\n    const rowColumnField = `${rowFieldMatch}\\\\${columnFieldMatch}`;\n\n    if (!keyColumnField || !keyRowField || !valueField) {\n      return data;\n    }\n\n    const columnValues = uniqueValues(keyColumnField.values);\n    const rowValues = uniqueValues(keyRowField.values);\n    const matrixValues = {};\n\n    for (let index = 0; index < valueField.values.length; index++) {\n      const columnName = keyColumnField.values.get(index);\n      const rowName = keyRowField.values.get(index);\n      const value = valueField.values.get(index);\n\n      if (!matrixValues[columnName]) {\n        matrixValues[columnName] = {};\n      }\n\n      matrixValues[columnName][rowName] = value;\n    }\n\n    const resultFrame = new MutableDataFrame();\n    resultFrame.addField({\n      name: rowColumnField,\n      values: rowValues,\n      type: FieldType.string\n    });\n\n    for (const columnName of columnValues) {\n      let values = [];\n\n      for (const rowName of rowValues) {\n        var _matrixValues$columnN;\n\n        const value = (_matrixValues$columnN = matrixValues[columnName][rowName]) !== null && _matrixValues$columnN !== void 0 ? _matrixValues$columnN : '';\n        values.push(value);\n      }\n\n      resultFrame.addField({\n        name: columnName.toString(),\n        values: values,\n        config: valueField.config,\n        type: valueField.type\n      });\n    }\n\n    return [resultFrame];\n  }))\n};\n\nfunction uniqueValues(values) {\n  const unique = new Set();\n\n  for (let index = 0; index < values.length; index++) {\n    unique.add(values.get(index));\n  }\n\n  return Array.from(unique);\n}\n\nfunction findKeyField(frame, matchTitle) {\n  for (let fieldIndex = 0; fieldIndex < frame.fields.length; fieldIndex++) {\n    const field = frame.fields[fieldIndex];\n\n    if (matchTitle === getFieldDisplayName(field)) {\n      return field;\n    }\n  }\n\n  return null;\n}","map":{"version":3,"names":["map","MutableDataFrame","getFieldDisplayName","FieldType","DataTransformerID","DEFAULT_COLUMN_FIELD","DEFAULT_ROW_FIELD","DEFAULT_VALUE_FIELD","groupingToMatrixTransformer","id","groupingToMatrix","name","description","defaultOptions","columnField","rowField","valueField","operator","options","source","pipe","data","columnFieldMatch","rowFieldMatch","valueFieldMatch","length","frame","keyColumnField","findKeyField","keyRowField","rowColumnField","columnValues","uniqueValues","values","rowValues","matrixValues","index","columnName","get","rowName","value","resultFrame","addField","type","string","push","toString","config","unique","Set","add","Array","from","matchTitle","fieldIndex","fields","field"],"sources":["/home/soula/grafana/packages/grafana-data/src/transformations/transformers/groupingToMatrix.ts"],"sourcesContent":["import { map } from 'rxjs/operators';\n\nimport { MutableDataFrame } from '../../dataframe';\nimport { getFieldDisplayName } from '../../field/fieldState';\nimport { DataFrame, DataTransformerInfo, Field, FieldType, Vector } from '../../types';\n\nimport { DataTransformerID } from './ids';\n\nexport interface GroupingToMatrixTransformerOptions {\n  columnField?: string;\n  rowField?: string;\n  valueField?: string;\n}\n\nconst DEFAULT_COLUMN_FIELD = 'Time';\nconst DEFAULT_ROW_FIELD = 'Time';\nconst DEFAULT_VALUE_FIELD = 'Value';\n\nexport const groupingToMatrixTransformer: DataTransformerInfo<GroupingToMatrixTransformerOptions> = {\n  id: DataTransformerID.groupingToMatrix,\n  name: 'Grouping to Matrix',\n  description: 'Groups series by field and return a matrix visualisation',\n  defaultOptions: {\n    columnField: DEFAULT_COLUMN_FIELD,\n    rowField: DEFAULT_ROW_FIELD,\n    valueField: DEFAULT_VALUE_FIELD,\n  },\n\n  operator: (options) => (source) =>\n    source.pipe(\n      map((data) => {\n        const columnFieldMatch = options.columnField || DEFAULT_COLUMN_FIELD;\n        const rowFieldMatch = options.rowField || DEFAULT_ROW_FIELD;\n        const valueFieldMatch = options.valueField || DEFAULT_VALUE_FIELD;\n\n        // Accept only single queries\n        if (data.length !== 1) {\n          return data;\n        }\n\n        const frame = data[0];\n        const keyColumnField = findKeyField(frame, columnFieldMatch);\n        const keyRowField = findKeyField(frame, rowFieldMatch);\n        const valueField = findKeyField(frame, valueFieldMatch);\n        const rowColumnField = `${rowFieldMatch}\\\\${columnFieldMatch}`;\n\n        if (!keyColumnField || !keyRowField || !valueField) {\n          return data;\n        }\n\n        const columnValues = uniqueValues(keyColumnField.values);\n        const rowValues = uniqueValues(keyRowField.values);\n\n        const matrixValues: { [key: string]: { [key: string]: any } } = {};\n\n        for (let index = 0; index < valueField.values.length; index++) {\n          const columnName = keyColumnField.values.get(index);\n          const rowName = keyRowField.values.get(index);\n          const value = valueField.values.get(index);\n\n          if (!matrixValues[columnName]) {\n            matrixValues[columnName] = {};\n          }\n\n          matrixValues[columnName][rowName] = value;\n        }\n\n        const resultFrame = new MutableDataFrame();\n\n        resultFrame.addField({\n          name: rowColumnField,\n          values: rowValues,\n          type: FieldType.string,\n        });\n\n        for (const columnName of columnValues) {\n          let values = [];\n          for (const rowName of rowValues) {\n            const value = matrixValues[columnName][rowName] ?? '';\n            values.push(value);\n          }\n\n          resultFrame.addField({\n            name: columnName.toString(),\n            values: values,\n            config: valueField.config,\n            type: valueField.type,\n          });\n        }\n\n        return [resultFrame];\n      })\n    ),\n};\n\nfunction uniqueValues(values: Vector): any[] {\n  const unique = new Set();\n\n  for (let index = 0; index < values.length; index++) {\n    unique.add(values.get(index));\n  }\n\n  return Array.from(unique);\n}\n\nfunction findKeyField(frame: DataFrame, matchTitle: string): Field | null {\n  for (let fieldIndex = 0; fieldIndex < frame.fields.length; fieldIndex++) {\n    const field = frame.fields[fieldIndex];\n\n    if (matchTitle === getFieldDisplayName(field)) {\n      return field;\n    }\n  }\n\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}