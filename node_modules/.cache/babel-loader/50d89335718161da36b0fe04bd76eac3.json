{"ast":null,"code":"import { get as lodashGet, isEqual } from 'lodash';\nimport { FrameGeometrySourceMode } from '@grafana/data';\nimport { setOptionImmutably } from 'app/features/dashboard/components/PanelEditor/utils';\nimport { addLocationFields } from 'app/features/geo/editor/locationEditor';\nimport { FrameSelectionEditor } from '../layers/data/FrameSelectionEditor';\nimport { defaultMarkersConfig } from '../layers/data/markersLayer';\nimport { DEFAULT_BASEMAP_CONFIG, geomapLayerRegistry, getLayersOptions } from '../layers/registry';\nexport function getLayerEditor(opts) {\n  return {\n    category: opts.category,\n    path: '--',\n    // Not used\n    defaultValue: opts.basemaps ? DEFAULT_BASEMAP_CONFIG : defaultMarkersConfig,\n    values: parent => ({\n      getContext: parent => {\n        return Object.assign({}, parent, {\n          options: opts.state.options,\n          instanceState: opts.state\n        });\n      },\n      getValue: path => lodashGet(opts.state.options, path),\n      onChange: (path, value) => {\n        const {\n          state\n        } = opts;\n        const {\n          options\n        } = state;\n\n        if (path === 'type' && value) {\n          const layer = geomapLayerRegistry.getIfExists(value);\n\n          if (layer) {\n            console.log('Change layer type:', value, state);\n            const opts = Object.assign({}, options, {\n              // keep current shared options\n              type: layer.id,\n              config: Object.assign({}, layer.defaultOptions) // clone?\n\n            });\n\n            if (layer.showLocation) {\n              var _opts$location;\n\n              if (!((_opts$location = opts.location) !== null && _opts$location !== void 0 && _opts$location.mode)) {\n                opts.location = {\n                  mode: FrameGeometrySourceMode.Auto\n                };\n              } else {\n                delete opts.location;\n              }\n            }\n\n            state.onChange(opts);\n            return;\n          }\n        }\n\n        state.onChange(setOptionImmutably(options, path, value));\n      }\n    }),\n    build: (builder, context) => {\n      if (!opts.state) {\n        console.log('MISSING LAYER!!!', opts);\n        return;\n      }\n\n      const {\n        handler,\n        options\n      } = opts.state;\n      const layer = geomapLayerRegistry.getIfExists(options === null || options === void 0 ? void 0 : options.type);\n      const layerTypes = getLayersOptions(opts.basemaps, options !== null && options !== void 0 && options.type // the selected value\n      ? options.type : DEFAULT_BASEMAP_CONFIG.type);\n      builder.addSelect({\n        path: 'type',\n        name: 'Layer type',\n        // required, but hide space\n        settings: {\n          options: layerTypes.options\n        }\n      }); // Show data filter if the layer type can do something with the data query results\n\n      if (handler.update) {\n        builder.addCustomEditor({\n          id: 'filterData',\n          path: 'filterData',\n          name: 'Data',\n          editor: FrameSelectionEditor,\n          defaultValue: undefined\n        });\n      }\n\n      if (!layer) {\n        return; // unknown layer type\n      } // Don't show UI for default configuration\n\n\n      if (options.type === DEFAULT_BASEMAP_CONFIG.type) {\n        return;\n      }\n\n      if (layer.showLocation) {\n        addLocationFields('Location', 'location.', builder, options.location);\n      }\n\n      if (handler.registerOptionsUI) {\n        handler.registerOptionsUI(builder);\n      }\n\n      if (!isEqual(opts.category, ['Base layer'])) {\n        if (!layer.hideOpacity) {\n          builder.addSliderInput({\n            path: 'opacity',\n            name: 'Opacity',\n            defaultValue: 1,\n            settings: {\n              min: 0,\n              max: 1,\n              step: 0.1\n            }\n          });\n        }\n\n        builder.addBooleanSwitch({\n          path: 'tooltip',\n          name: 'Display tooltip',\n          description: 'Show the tooltip for layer',\n          defaultValue: true\n        });\n      }\n    }\n  };\n}","map":{"version":3,"names":["get","lodashGet","isEqual","FrameGeometrySourceMode","setOptionImmutably","addLocationFields","FrameSelectionEditor","defaultMarkersConfig","DEFAULT_BASEMAP_CONFIG","geomapLayerRegistry","getLayersOptions","getLayerEditor","opts","category","path","defaultValue","basemaps","values","parent","getContext","options","state","instanceState","getValue","onChange","value","layer","getIfExists","console","log","type","id","config","defaultOptions","showLocation","location","mode","Auto","build","builder","context","handler","layerTypes","addSelect","name","settings","update","addCustomEditor","editor","undefined","registerOptionsUI","hideOpacity","addSliderInput","min","max","step","addBooleanSwitch","description"],"sources":["/home/soula/grafana/public/app/plugins/panel/geomap/editor/layerEditor.tsx"],"sourcesContent":["import { get as lodashGet, isEqual } from 'lodash';\n\nimport { FrameGeometrySourceMode, MapLayerOptions } from '@grafana/data';\nimport { NestedPanelOptions, NestedValueAccess } from '@grafana/data/src/utils/OptionsUIBuilders';\nimport { setOptionImmutably } from 'app/features/dashboard/components/PanelEditor/utils';\nimport { addLocationFields } from 'app/features/geo/editor/locationEditor';\n\nimport { FrameSelectionEditor } from '../layers/data/FrameSelectionEditor';\nimport { defaultMarkersConfig } from '../layers/data/markersLayer';\nimport { DEFAULT_BASEMAP_CONFIG, geomapLayerRegistry, getLayersOptions } from '../layers/registry';\nimport { MapLayerState } from '../types';\n\nexport interface LayerEditorOptions {\n  state: MapLayerState;\n  category: string[];\n  basemaps: boolean; // only basemaps\n}\n\nexport function getLayerEditor(opts: LayerEditorOptions): NestedPanelOptions<MapLayerOptions> {\n  return {\n    category: opts.category,\n    path: '--', // Not used\n    defaultValue: opts.basemaps ? DEFAULT_BASEMAP_CONFIG : defaultMarkersConfig,\n    values: (parent: NestedValueAccess) => ({\n      getContext: (parent) => {\n        return { ...parent, options: opts.state.options, instanceState: opts.state };\n      },\n      getValue: (path: string) => lodashGet(opts.state.options, path),\n      onChange: (path: string, value: any) => {\n        const { state } = opts;\n        const { options } = state;\n        if (path === 'type' && value) {\n          const layer = geomapLayerRegistry.getIfExists(value);\n          if (layer) {\n            console.log('Change layer type:', value, state);\n            const opts = {\n              ...options, // keep current shared options\n              type: layer.id,\n              config: { ...layer.defaultOptions }, // clone?\n            };\n            if (layer.showLocation) {\n              if (!opts.location?.mode) {\n                opts.location = { mode: FrameGeometrySourceMode.Auto };\n              } else {\n                delete opts.location;\n              }\n            }\n            state.onChange(opts);\n            return;\n          }\n        }\n        state.onChange(setOptionImmutably(options, path, value));\n      },\n    }),\n    build: (builder, context) => {\n      if (!opts.state) {\n        console.log('MISSING LAYER!!!', opts);\n        return;\n      }\n\n      const { handler, options } = opts.state;\n      const layer = geomapLayerRegistry.getIfExists(options?.type);\n\n      const layerTypes = getLayersOptions(\n        opts.basemaps,\n        options?.type // the selected value\n          ? options.type\n          : DEFAULT_BASEMAP_CONFIG.type\n      );\n\n      builder.addSelect({\n        path: 'type',\n        name: 'Layer type', // required, but hide space\n        settings: {\n          options: layerTypes.options,\n        },\n      });\n\n      // Show data filter if the layer type can do something with the data query results\n      if (handler.update) {\n        builder.addCustomEditor({\n          id: 'filterData',\n          path: 'filterData',\n          name: 'Data',\n          editor: FrameSelectionEditor,\n          defaultValue: undefined,\n        });\n      }\n\n      if (!layer) {\n        return; // unknown layer type\n      }\n\n      // Don't show UI for default configuration\n      if (options.type === DEFAULT_BASEMAP_CONFIG.type) {\n        return;\n      }\n\n      if (layer.showLocation) {\n        addLocationFields('Location', 'location.', builder, options.location);\n      }\n      if (handler.registerOptionsUI) {\n        handler.registerOptionsUI(builder);\n      }\n      if (!isEqual(opts.category, ['Base layer'])) {\n        if (!layer.hideOpacity) {\n          builder.addSliderInput({\n            path: 'opacity',\n            name: 'Opacity',\n            defaultValue: 1,\n            settings: {\n              min: 0,\n              max: 1,\n              step: 0.1,\n            },\n          });\n        }\n        builder.addBooleanSwitch({\n          path: 'tooltip',\n          name: 'Display tooltip',\n          description: 'Show the tooltip for layer',\n          defaultValue: true,\n        });\n      }\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}