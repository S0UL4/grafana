{"ast":null,"code":"import { from, mergeMap } from 'rxjs';\nimport { PluginType } from '@grafana/data';\nimport { DataSourceWithBackend, getDataSourceSrv, getTemplateSrv } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { ExpressionQueryEditor } from './ExpressionQueryEditor';\nimport { ExpressionQueryType } from './types';\n/**\n * This is a singleton instance that just pretends to be a DataSource\n */\n\nexport class ExpressionDatasourceApi extends DataSourceWithBackend {\n  constructor(instanceSettings) {\n    super(instanceSettings);\n    this.instanceSettings = instanceSettings;\n  }\n\n  applyTemplateVariables(query, scopedVars) {\n    const templateSrv = getTemplateSrv();\n    return Object.assign({}, query, {\n      expression: templateSrv.replace(query.expression, scopedVars),\n      window: templateSrv.replace(query.window, scopedVars)\n    });\n  }\n\n  getCollapsedText(query) {\n    return `Expression: ${query.type}`;\n  }\n\n  query(request) {\n    let targets = request.targets.map(async query => {\n      const ds = await getDataSourceSrv().get(query.datasource);\n\n      if (!ds.interpolateVariablesInQueries) {\n        return query;\n      }\n\n      return ds === null || ds === void 0 ? void 0 : ds.interpolateVariablesInQueries([query], request.scopedVars)[0];\n    });\n    let sub = from(Promise.all(targets));\n    return sub.pipe(mergeMap(t => super.query(Object.assign({}, request, {\n      targets: t\n    }))));\n  }\n\n  newQuery(query) {\n    var _query$type, _query$conditions;\n\n    return {\n      refId: '--',\n      // Replaced with query\n      type: (_query$type = query === null || query === void 0 ? void 0 : query.type) !== null && _query$type !== void 0 ? _query$type : ExpressionQueryType.math,\n      datasource: ExpressionDatasourceRef,\n      conditions: (_query$conditions = query === null || query === void 0 ? void 0 : query.conditions) !== null && _query$conditions !== void 0 ? _query$conditions : undefined\n    };\n  }\n\n}\n/**\n * MATCHES a constant in DataSourceWithBackend, this should be '__expr__'\n * @deprecated\n */\n\nexport const ExpressionDatasourceUID = '-100';\nexport const instanceSettings = {\n  id: -100,\n  uid: ExpressionDatasourceUID,\n  name: ExpressionDatasourceRef.name,\n  type: ExpressionDatasourceRef.type,\n  access: 'proxy',\n  meta: {\n    baseUrl: '',\n    module: '',\n    type: PluginType.datasource,\n    name: ExpressionDatasourceRef.type,\n    id: ExpressionDatasourceRef.type,\n    info: {\n      author: {\n        name: 'Grafana Labs'\n      },\n      logos: {\n        small: 'public/img/icn-datasource.svg',\n        large: 'public/img/icn-datasource.svg'\n      },\n      description: 'Adds expression support to Grafana',\n      screenshots: [],\n      links: [],\n      updated: '',\n      version: ''\n    }\n  },\n  jsonData: {}\n};\nexport const dataSource = new ExpressionDatasourceApi(instanceSettings);\ndataSource.meta = {\n  id: ExpressionDatasourceRef.type,\n  info: {\n    logos: {\n      small: 'public/img/icn-datasource.svg',\n      large: 'public/img/icn-datasource.svg'\n    }\n  }\n};\ndataSource.components = {\n  QueryEditor: ExpressionQueryEditor\n};","map":{"version":3,"names":["from","mergeMap","PluginType","DataSourceWithBackend","getDataSourceSrv","getTemplateSrv","ExpressionDatasourceRef","ExpressionQueryEditor","ExpressionQueryType","ExpressionDatasourceApi","constructor","instanceSettings","applyTemplateVariables","query","scopedVars","templateSrv","expression","replace","window","getCollapsedText","type","request","targets","map","ds","get","datasource","interpolateVariablesInQueries","sub","Promise","all","pipe","t","newQuery","refId","math","conditions","undefined","ExpressionDatasourceUID","id","uid","name","access","meta","baseUrl","module","info","author","logos","small","large","description","screenshots","links","updated","version","jsonData","dataSource","components","QueryEditor"],"sources":["/home/soula/grafana/public/app/features/expressions/ExpressionDatasource.ts"],"sourcesContent":["import { Observable, from, mergeMap } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourcePluginMeta,\n  PluginType,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getDataSourceSrv, getTemplateSrv } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\n\nimport { ExpressionQueryEditor } from './ExpressionQueryEditor';\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\n/**\n * This is a singleton instance that just pretends to be a DataSource\n */\nexport class ExpressionDatasourceApi extends DataSourceWithBackend<ExpressionQuery> {\n  constructor(public instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  applyTemplateVariables(query: ExpressionQuery, scopedVars: ScopedVars): Record<string, any> {\n    const templateSrv = getTemplateSrv();\n    return {\n      ...query,\n      expression: templateSrv.replace(query.expression, scopedVars),\n      window: templateSrv.replace(query.window, scopedVars),\n    };\n  }\n\n  getCollapsedText(query: ExpressionQuery) {\n    return `Expression: ${query.type}`;\n  }\n\n  query(request: DataQueryRequest<ExpressionQuery>): Observable<DataQueryResponse> {\n    let targets = request.targets.map(async (query: ExpressionQuery): Promise<ExpressionQuery> => {\n      const ds = await getDataSourceSrv().get(query.datasource);\n\n      if (!ds.interpolateVariablesInQueries) {\n        return query;\n      }\n\n      return ds?.interpolateVariablesInQueries([query], request.scopedVars)[0] as ExpressionQuery;\n    });\n\n    let sub = from(Promise.all(targets));\n    return sub.pipe(mergeMap((t) => super.query({ ...request, targets: t })));\n  }\n\n  newQuery(query?: Partial<ExpressionQuery>): ExpressionQuery {\n    return {\n      refId: '--', // Replaced with query\n      type: query?.type ?? ExpressionQueryType.math,\n      datasource: ExpressionDatasourceRef,\n      conditions: query?.conditions ?? undefined,\n    };\n  }\n}\n\n/**\n * MATCHES a constant in DataSourceWithBackend, this should be '__expr__'\n * @deprecated\n */\nexport const ExpressionDatasourceUID = '-100';\n\nexport const instanceSettings: DataSourceInstanceSettings = {\n  id: -100,\n  uid: ExpressionDatasourceUID,\n  name: ExpressionDatasourceRef.name,\n  type: ExpressionDatasourceRef.type,\n  access: 'proxy',\n  meta: {\n    baseUrl: '',\n    module: '',\n    type: PluginType.datasource,\n    name: ExpressionDatasourceRef.type,\n    id: ExpressionDatasourceRef.type,\n    info: {\n      author: {\n        name: 'Grafana Labs',\n      },\n      logos: {\n        small: 'public/img/icn-datasource.svg',\n        large: 'public/img/icn-datasource.svg',\n      },\n      description: 'Adds expression support to Grafana',\n      screenshots: [],\n      links: [],\n      updated: '',\n      version: '',\n    },\n  },\n  jsonData: {},\n};\n\nexport const dataSource = new ExpressionDatasourceApi(instanceSettings);\ndataSource.meta = {\n  id: ExpressionDatasourceRef.type,\n  info: {\n    logos: {\n      small: 'public/img/icn-datasource.svg',\n      large: 'public/img/icn-datasource.svg',\n    },\n  },\n} as DataSourcePluginMeta;\ndataSource.components = {\n  QueryEditor: ExpressionQueryEditor,\n};\n"],"mappings":"AAAA,SAAqBA,IAArB,EAA2BC,QAA3B,QAA2C,MAA3C;AAEA,SAKEC,UALF,QAOO,eAPP;AAQA,SAASC,qBAAT,EAAgCC,gBAAhC,EAAkDC,cAAlD,QAAwE,kBAAxE;AACA,SAASC,uBAAT,QAAwC,kDAAxC;AAEA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAA0BC,mBAA1B,QAAqD,SAArD;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,uBAAN,SAAsCN,qBAAtC,CAA6E;EAClFO,WAAW,CAAQC,gBAAR,EAAsD;IAC/D,MAAMA,gBAAN;IAD+D,KAA9CA,gBAA8C,GAA9CA,gBAA8C;EAEhE;;EAEDC,sBAAsB,CAACC,KAAD,EAAyBC,UAAzB,EAAsE;IAC1F,MAAMC,WAAW,GAAGV,cAAc,EAAlC;IACA,yBACKQ,KADL;MAEEG,UAAU,EAAED,WAAW,CAACE,OAAZ,CAAoBJ,KAAK,CAACG,UAA1B,EAAsCF,UAAtC,CAFd;MAGEI,MAAM,EAAEH,WAAW,CAACE,OAAZ,CAAoBJ,KAAK,CAACK,MAA1B,EAAkCJ,UAAlC;IAHV;EAKD;;EAEDK,gBAAgB,CAACN,KAAD,EAAyB;IACvC,OAAQ,eAAcA,KAAK,CAACO,IAAK,EAAjC;EACD;;EAEDP,KAAK,CAACQ,OAAD,EAA4E;IAC/E,IAAIC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgBC,GAAhB,CAAoB,MAAOV,KAAP,IAA4D;MAC5F,MAAMW,EAAE,GAAG,MAAMpB,gBAAgB,GAAGqB,GAAnB,CAAuBZ,KAAK,CAACa,UAA7B,CAAjB;;MAEA,IAAI,CAACF,EAAE,CAACG,6BAAR,EAAuC;QACrC,OAAOd,KAAP;MACD;;MAED,OAAOW,EAAP,aAAOA,EAAP,uBAAOA,EAAE,CAAEG,6BAAJ,CAAkC,CAACd,KAAD,CAAlC,EAA2CQ,OAAO,CAACP,UAAnD,EAA+D,CAA/D,CAAP;IACD,CARa,CAAd;IAUA,IAAIc,GAAG,GAAG5B,IAAI,CAAC6B,OAAO,CAACC,GAAR,CAAYR,OAAZ,CAAD,CAAd;IACA,OAAOM,GAAG,CAACG,IAAJ,CAAS9B,QAAQ,CAAE+B,CAAD,IAAO,MAAMnB,KAAN,mBAAiBQ,OAAjB;MAA0BC,OAAO,EAAEU;IAAnC,GAAR,CAAjB,CAAP;EACD;;EAEDC,QAAQ,CAACpB,KAAD,EAAoD;IAAA;;IAC1D,OAAO;MACLqB,KAAK,EAAE,IADF;MACQ;MACbd,IAAI,iBAAEP,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEO,IAAT,qDAAiBZ,mBAAmB,CAAC2B,IAFpC;MAGLT,UAAU,EAAEpB,uBAHP;MAIL8B,UAAU,uBAAEvB,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEuB,UAAT,iEAAuBC;IAJ5B,CAAP;EAMD;;AAxCiF;AA2CpF;AACA;AACA;AACA;;AACA,OAAO,MAAMC,uBAAuB,GAAG,MAAhC;AAEP,OAAO,MAAM3B,gBAA4C,GAAG;EAC1D4B,EAAE,EAAE,CAAC,GADqD;EAE1DC,GAAG,EAAEF,uBAFqD;EAG1DG,IAAI,EAAEnC,uBAAuB,CAACmC,IAH4B;EAI1DrB,IAAI,EAAEd,uBAAuB,CAACc,IAJ4B;EAK1DsB,MAAM,EAAE,OALkD;EAM1DC,IAAI,EAAE;IACJC,OAAO,EAAE,EADL;IAEJC,MAAM,EAAE,EAFJ;IAGJzB,IAAI,EAAElB,UAAU,CAACwB,UAHb;IAIJe,IAAI,EAAEnC,uBAAuB,CAACc,IAJ1B;IAKJmB,EAAE,EAAEjC,uBAAuB,CAACc,IALxB;IAMJ0B,IAAI,EAAE;MACJC,MAAM,EAAE;QACNN,IAAI,EAAE;MADA,CADJ;MAIJO,KAAK,EAAE;QACLC,KAAK,EAAE,+BADF;QAELC,KAAK,EAAE;MAFF,CAJH;MAQJC,WAAW,EAAE,oCART;MASJC,WAAW,EAAE,EATT;MAUJC,KAAK,EAAE,EAVH;MAWJC,OAAO,EAAE,EAXL;MAYJC,OAAO,EAAE;IAZL;EANF,CANoD;EA2B1DC,QAAQ,EAAE;AA3BgD,CAArD;AA8BP,OAAO,MAAMC,UAAU,GAAG,IAAIhD,uBAAJ,CAA4BE,gBAA5B,CAAnB;AACP8C,UAAU,CAACd,IAAX,GAAkB;EAChBJ,EAAE,EAAEjC,uBAAuB,CAACc,IADZ;EAEhB0B,IAAI,EAAE;IACJE,KAAK,EAAE;MACLC,KAAK,EAAE,+BADF;MAELC,KAAK,EAAE;IAFF;EADH;AAFU,CAAlB;AASAO,UAAU,CAACC,UAAX,GAAwB;EACtBC,WAAW,EAAEpD;AADS,CAAxB"},"metadata":{},"sourceType":"module"}