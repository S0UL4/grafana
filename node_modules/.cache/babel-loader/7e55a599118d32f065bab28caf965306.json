{"ast":null,"code":"var _Redirect, _LoadingPlaceholder;\n\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport { Alert, LoadingPlaceholder, withErrorBoundary } from '@grafana/ui';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { EditReceiverView } from './components/receivers/EditReceiverView';\nimport { EditTemplateView } from './components/receivers/EditTemplateView';\nimport { GlobalConfigForm } from './components/receivers/GlobalConfigForm';\nimport { NewReceiverView } from './components/receivers/NewReceiverView';\nimport { NewTemplateView } from './components/receivers/NewTemplateView';\nimport { ReceiversAndTemplatesView } from './components/receivers/ReceiversAndTemplatesView';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, fetchGrafanaNotifiersAction } from './state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { initialAsyncRequestState } from './utils/redux';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst Receivers = () => {\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const isRoot = location.pathname.endsWith('/alerting/notifications');\n  const configRequests = useUnifiedAlertingSelector(state => state.amConfigs);\n  const {\n    result: config,\n    loading,\n    error\n  } = alertManagerSourceName && configRequests[alertManagerSourceName] || initialAsyncRequestState;\n  const receiverTypes = useUnifiedAlertingSelector(state => state.grafanaNotifiers);\n  const shouldLoadConfig = isRoot || !config;\n  useEffect(() => {\n    if (alertManagerSourceName && shouldLoadConfig) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch, shouldLoadConfig]);\n  useEffect(() => {\n    if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME && !(receiverTypes.result || receiverTypes.loading || receiverTypes.error)) {\n      dispatch(fetchGrafanaNotifiersAction());\n    }\n  }, [alertManagerSourceName, dispatch, receiverTypes]);\n  const disableAmSelect = !isRoot;\n\n  if (!alertManagerSourceName) {\n    return isRoot ? /*#__PURE__*/_jsx(AlertingPageWrapper, {\n      pageId: \"receivers\",\n      children: /*#__PURE__*/_jsx(NoAlertManagerWarning, {\n        availableAlertManagers: alertManagers\n      })\n    }) : _Redirect || (_Redirect = /*#__PURE__*/_jsx(Redirect, {\n      to: \"/alerting/notifications\"\n    }));\n  }\n\n  return /*#__PURE__*/_jsxs(AlertingPageWrapper, {\n    pageId: \"receivers\",\n    children: [/*#__PURE__*/_jsx(AlertManagerPicker, {\n      current: alertManagerSourceName,\n      disabled: disableAmSelect,\n      onChange: setAlertManagerSourceName,\n      dataSources: alertManagers\n    }), error && !loading && /*#__PURE__*/_jsx(Alert, {\n      severity: \"error\",\n      title: \"Error loading Alertmanager config\",\n      children: error.message || 'Unknown error.'\n    }), loading && !config && (_LoadingPlaceholder || (_LoadingPlaceholder = /*#__PURE__*/_jsx(LoadingPlaceholder, {\n      text: \"loading configuration...\"\n    }))), config && !error && /*#__PURE__*/_jsxs(Switch, {\n      children: [/*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/notifications\",\n        children: /*#__PURE__*/_jsx(ReceiversAndTemplatesView, {\n          config: config,\n          alertManagerName: alertManagerSourceName\n        })\n      }), /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/notifications/templates/new\",\n        children: /*#__PURE__*/_jsx(NewTemplateView, {\n          config: config,\n          alertManagerSourceName: alertManagerSourceName\n        })\n      }), /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/notifications/templates/:name/edit\",\n        children: ({\n          match\n        }) => (match === null || match === void 0 ? void 0 : match.params.name) && /*#__PURE__*/_jsx(EditTemplateView, {\n          alertManagerSourceName: alertManagerSourceName,\n          config: config,\n          templateName: decodeURIComponent(match === null || match === void 0 ? void 0 : match.params.name)\n        })\n      }), /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/notifications/receivers/new\",\n        children: /*#__PURE__*/_jsx(NewReceiverView, {\n          config: config,\n          alertManagerSourceName: alertManagerSourceName\n        })\n      }), /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/notifications/receivers/:name/edit\",\n        children: ({\n          match\n        }) => (match === null || match === void 0 ? void 0 : match.params.name) && /*#__PURE__*/_jsx(EditReceiverView, {\n          alertManagerSourceName: alertManagerSourceName,\n          config: config,\n          receiverName: decodeURIComponent(match === null || match === void 0 ? void 0 : match.params.name)\n        })\n      }), /*#__PURE__*/_jsx(Route, {\n        exact: true,\n        path: \"/alerting/notifications/global-config\",\n        children: /*#__PURE__*/_jsx(GlobalConfigForm, {\n          config: config,\n          alertManagerSourceName: alertManagerSourceName\n        })\n      })]\n    })]\n  });\n};\n\nexport default withErrorBoundary(Receivers, {\n  style: 'page'\n});","map":{"version":3,"names":["React","useEffect","useDispatch","Redirect","Route","Switch","useLocation","Alert","LoadingPlaceholder","withErrorBoundary","AlertManagerPicker","AlertingPageWrapper","NoAlertManagerWarning","EditReceiverView","EditTemplateView","GlobalConfigForm","NewReceiverView","NewTemplateView","ReceiversAndTemplatesView","useAlertManagerSourceName","useAlertManagersByPermission","useUnifiedAlertingSelector","fetchAlertManagerConfigAction","fetchGrafanaNotifiersAction","GRAFANA_RULES_SOURCE_NAME","initialAsyncRequestState","Receivers","alertManagers","alertManagerSourceName","setAlertManagerSourceName","dispatch","location","isRoot","pathname","endsWith","configRequests","state","amConfigs","result","config","loading","error","receiverTypes","grafanaNotifiers","shouldLoadConfig","disableAmSelect","message","match","params","name","decodeURIComponent","style"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/Receivers.tsx"],"sourcesContent":["import React, { FC, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, RouteChildrenProps, Switch, useLocation } from 'react-router-dom';\n\nimport { Alert, LoadingPlaceholder, withErrorBoundary } from '@grafana/ui';\n\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { EditReceiverView } from './components/receivers/EditReceiverView';\nimport { EditTemplateView } from './components/receivers/EditTemplateView';\nimport { GlobalConfigForm } from './components/receivers/GlobalConfigForm';\nimport { NewReceiverView } from './components/receivers/NewReceiverView';\nimport { NewTemplateView } from './components/receivers/NewTemplateView';\nimport { ReceiversAndTemplatesView } from './components/receivers/ReceiversAndTemplatesView';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, fetchGrafanaNotifiersAction } from './state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst Receivers: FC = () => {\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const dispatch = useDispatch();\n\n  const location = useLocation();\n  const isRoot = location.pathname.endsWith('/alerting/notifications');\n\n  const configRequests = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const {\n    result: config,\n    loading,\n    error,\n  } = (alertManagerSourceName && configRequests[alertManagerSourceName]) || initialAsyncRequestState;\n  const receiverTypes = useUnifiedAlertingSelector((state) => state.grafanaNotifiers);\n\n  const shouldLoadConfig = isRoot || !config;\n\n  useEffect(() => {\n    if (alertManagerSourceName && shouldLoadConfig) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch, shouldLoadConfig]);\n\n  useEffect(() => {\n    if (\n      alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME &&\n      !(receiverTypes.result || receiverTypes.loading || receiverTypes.error)\n    ) {\n      dispatch(fetchGrafanaNotifiersAction());\n    }\n  }, [alertManagerSourceName, dispatch, receiverTypes]);\n\n  const disableAmSelect = !isRoot;\n\n  if (!alertManagerSourceName) {\n    return isRoot ? (\n      <AlertingPageWrapper pageId=\"receivers\">\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    ) : (\n      <Redirect to=\"/alerting/notifications\" />\n    );\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"receivers\">\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        disabled={disableAmSelect}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      {error && !loading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {loading && !config && <LoadingPlaceholder text=\"loading configuration...\" />}\n      {config && !error && (\n        <Switch>\n          <Route exact={true} path=\"/alerting/notifications\">\n            <ReceiversAndTemplatesView config={config} alertManagerName={alertManagerSourceName} />\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/templates/new\">\n            <NewTemplateView config={config} alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/templates/:name/edit\">\n            {({ match }: RouteChildrenProps<{ name: string }>) =>\n              match?.params.name && (\n                <EditTemplateView\n                  alertManagerSourceName={alertManagerSourceName}\n                  config={config}\n                  templateName={decodeURIComponent(match?.params.name)}\n                />\n              )\n            }\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/receivers/new\">\n            <NewReceiverView config={config} alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/receivers/:name/edit\">\n            {({ match }: RouteChildrenProps<{ name: string }>) =>\n              match?.params.name && (\n                <EditReceiverView\n                  alertManagerSourceName={alertManagerSourceName}\n                  config={config}\n                  receiverName={decodeURIComponent(match?.params.name)}\n                />\n              )\n            }\n          </Route>\n          <Route exact={true} path=\"/alerting/notifications/global-config\">\n            <GlobalConfigForm config={config} alertManagerSourceName={alertManagerSourceName} />\n          </Route>\n        </Switch>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(Receivers, { style: 'page' });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}