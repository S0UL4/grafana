{"ast":null,"code":"import { lastValueFrom } from 'rxjs';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { getDatasourceAPIUid, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nexport function prometheusUrlBuilder(dataSourceConfig) {\n  const {\n    dataSourceName\n  } = dataSourceConfig;\n  return {\n    rules: filter => {\n      const searchParams = new URLSearchParams();\n      const params = prepareRulesFilterQueryParams(searchParams, filter);\n      return {\n        url: `/api/prometheus/${getDatasourceAPIUid(dataSourceName)}/api/v1/rules`,\n        params: params\n      };\n    }\n  };\n}\nexport function prepareRulesFilterQueryParams(params, filter) {\n  if (filter !== null && filter !== void 0 && filter.dashboardUID) {\n    params.set('dashboard_uid', filter.dashboardUID);\n\n    if (filter !== null && filter !== void 0 && filter.panelId) {\n      params.set('panel_id', String(filter.panelId));\n    }\n  }\n\n  return Object.fromEntries(params);\n}\nexport async function fetchRules(dataSourceName, filter) {\n  if (filter !== null && filter !== void 0 && filter.dashboardUID && dataSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    throw new Error('Filtering by dashboard UID is only supported for Grafana Managed rules.');\n  }\n\n  const {\n    url,\n    params\n  } = prometheusUrlBuilder({\n    dataSourceName\n  }).rules(filter);\n  const response = await lastValueFrom(getBackendSrv().fetch({\n    url,\n    params,\n    showErrorAlert: false,\n    showSuccessAlert: false\n  })).catch(e => {\n    if ('status' in e && e.status === 404) {\n      throw new Error('404 from rule state endpoint. Perhaps ruler API is not enabled?');\n    }\n\n    throw e;\n  });\n  const nsMap = {};\n  response.data.data.groups.forEach(group => {\n    group.rules.forEach(rule => {\n      rule.query = rule.query || '';\n    });\n\n    if (!nsMap[group.file]) {\n      nsMap[group.file] = {\n        dataSourceName,\n        name: group.file,\n        groups: [group]\n      };\n    } else {\n      nsMap[group.file].groups.push(group);\n    }\n  });\n  return Object.values(nsMap);\n}","map":{"version":3,"names":["lastValueFrom","getBackendSrv","getDatasourceAPIUid","GRAFANA_RULES_SOURCE_NAME","prometheusUrlBuilder","dataSourceConfig","dataSourceName","rules","filter","searchParams","URLSearchParams","params","prepareRulesFilterQueryParams","url","dashboardUID","set","panelId","String","Object","fromEntries","fetchRules","Error","response","fetch","showErrorAlert","showSuccessAlert","catch","e","status","nsMap","data","groups","forEach","group","rule","query","file","name","push","values"],"sources":["/home/soula/grafana/public/app/features/alerting/unified/api/prometheus.ts"],"sourcesContent":["import { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { RuleNamespace } from 'app/types/unified-alerting';\nimport { PromRulesResponse } from 'app/types/unified-alerting-dto';\n\nimport { getDatasourceAPIUid, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nexport interface FetchPromRulesFilter {\n  dashboardUID: string;\n  panelId?: number;\n}\n\nexport interface PrometheusDataSourceConfig {\n  dataSourceName: string;\n}\n\nexport function prometheusUrlBuilder(dataSourceConfig: PrometheusDataSourceConfig) {\n  const { dataSourceName } = dataSourceConfig;\n\n  return {\n    rules: (filter?: FetchPromRulesFilter) => {\n      const searchParams = new URLSearchParams();\n      const params = prepareRulesFilterQueryParams(searchParams, filter);\n\n      return {\n        url: `/api/prometheus/${getDatasourceAPIUid(dataSourceName)}/api/v1/rules`,\n        params: params,\n      };\n    },\n  };\n}\n\nexport function prepareRulesFilterQueryParams(\n  params: URLSearchParams,\n  filter?: FetchPromRulesFilter\n): Record<string, string> {\n  if (filter?.dashboardUID) {\n    params.set('dashboard_uid', filter.dashboardUID);\n    if (filter?.panelId) {\n      params.set('panel_id', String(filter.panelId));\n    }\n  }\n\n  return Object.fromEntries(params);\n}\n\nexport async function fetchRules(dataSourceName: string, filter?: FetchPromRulesFilter): Promise<RuleNamespace[]> {\n  if (filter?.dashboardUID && dataSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    throw new Error('Filtering by dashboard UID is only supported for Grafana Managed rules.');\n  }\n\n  const { url, params } = prometheusUrlBuilder({ dataSourceName }).rules(filter);\n\n  const response = await lastValueFrom(\n    getBackendSrv().fetch<PromRulesResponse>({\n      url,\n      params,\n      showErrorAlert: false,\n      showSuccessAlert: false,\n    })\n  ).catch((e) => {\n    if ('status' in e && e.status === 404) {\n      throw new Error('404 from rule state endpoint. Perhaps ruler API is not enabled?');\n    }\n    throw e;\n  });\n\n  const nsMap: { [key: string]: RuleNamespace } = {};\n  response.data.data.groups.forEach((group) => {\n    group.rules.forEach((rule) => {\n      rule.query = rule.query || '';\n    });\n    if (!nsMap[group.file]) {\n      nsMap[group.file] = {\n        dataSourceName,\n        name: group.file,\n        groups: [group],\n      };\n    } else {\n      nsMap[group.file].groups.push(group);\n    }\n  });\n\n  return Object.values(nsMap);\n}\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,MAA9B;AAEA,SAASC,aAAT,QAA8B,kBAA9B;AAIA,SAASC,mBAAT,EAA8BC,yBAA9B,QAA+D,qBAA/D;AAWA,OAAO,SAASC,oBAAT,CAA8BC,gBAA9B,EAA4E;EACjF,MAAM;IAAEC;EAAF,IAAqBD,gBAA3B;EAEA,OAAO;IACLE,KAAK,EAAGC,MAAD,IAAmC;MACxC,MAAMC,YAAY,GAAG,IAAIC,eAAJ,EAArB;MACA,MAAMC,MAAM,GAAGC,6BAA6B,CAACH,YAAD,EAAeD,MAAf,CAA5C;MAEA,OAAO;QACLK,GAAG,EAAG,mBAAkBX,mBAAmB,CAACI,cAAD,CAAiB,eADvD;QAELK,MAAM,EAAEA;MAFH,CAAP;IAID;EATI,CAAP;AAWD;AAED,OAAO,SAASC,6BAAT,CACLD,MADK,EAELH,MAFK,EAGmB;EACxB,IAAIA,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEM,YAAZ,EAA0B;IACxBH,MAAM,CAACI,GAAP,CAAW,eAAX,EAA4BP,MAAM,CAACM,YAAnC;;IACA,IAAIN,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEQ,OAAZ,EAAqB;MACnBL,MAAM,CAACI,GAAP,CAAW,UAAX,EAAuBE,MAAM,CAACT,MAAM,CAACQ,OAAR,CAA7B;IACD;EACF;;EAED,OAAOE,MAAM,CAACC,WAAP,CAAmBR,MAAnB,CAAP;AACD;AAED,OAAO,eAAeS,UAAf,CAA0Bd,cAA1B,EAAkDE,MAAlD,EAA2G;EAChH,IAAIA,MAAM,SAAN,IAAAA,MAAM,WAAN,IAAAA,MAAM,CAAEM,YAAR,IAAwBR,cAAc,KAAKH,yBAA/C,EAA0E;IACxE,MAAM,IAAIkB,KAAJ,CAAU,yEAAV,CAAN;EACD;;EAED,MAAM;IAAER,GAAF;IAAOF;EAAP,IAAkBP,oBAAoB,CAAC;IAAEE;EAAF,CAAD,CAApB,CAAyCC,KAAzC,CAA+CC,MAA/C,CAAxB;EAEA,MAAMc,QAAQ,GAAG,MAAMtB,aAAa,CAClCC,aAAa,GAAGsB,KAAhB,CAAyC;IACvCV,GADuC;IAEvCF,MAFuC;IAGvCa,cAAc,EAAE,KAHuB;IAIvCC,gBAAgB,EAAE;EAJqB,CAAzC,CADkC,CAAb,CAOrBC,KAPqB,CAOdC,CAAD,IAAO;IACb,IAAI,YAAYA,CAAZ,IAAiBA,CAAC,CAACC,MAAF,KAAa,GAAlC,EAAuC;MACrC,MAAM,IAAIP,KAAJ,CAAU,iEAAV,CAAN;IACD;;IACD,MAAMM,CAAN;EACD,CAZsB,CAAvB;EAcA,MAAME,KAAuC,GAAG,EAAhD;EACAP,QAAQ,CAACQ,IAAT,CAAcA,IAAd,CAAmBC,MAAnB,CAA0BC,OAA1B,CAAmCC,KAAD,IAAW;IAC3CA,KAAK,CAAC1B,KAAN,CAAYyB,OAAZ,CAAqBE,IAAD,IAAU;MAC5BA,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACC,KAAL,IAAc,EAA3B;IACD,CAFD;;IAGA,IAAI,CAACN,KAAK,CAACI,KAAK,CAACG,IAAP,CAAV,EAAwB;MACtBP,KAAK,CAACI,KAAK,CAACG,IAAP,CAAL,GAAoB;QAClB9B,cADkB;QAElB+B,IAAI,EAAEJ,KAAK,CAACG,IAFM;QAGlBL,MAAM,EAAE,CAACE,KAAD;MAHU,CAApB;IAKD,CAND,MAMO;MACLJ,KAAK,CAACI,KAAK,CAACG,IAAP,CAAL,CAAkBL,MAAlB,CAAyBO,IAAzB,CAA8BL,KAA9B;IACD;EACF,CAbD;EAeA,OAAOf,MAAM,CAACqB,MAAP,CAAcV,KAAd,CAAP;AACD"},"metadata":{},"sourceType":"module"}