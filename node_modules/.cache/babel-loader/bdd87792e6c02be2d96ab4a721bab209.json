{"ast":null,"code":"var _h, _div, _div2, _div3, _div4, _div5, _div6, _div7, _div8;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { shuffle } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { reportInteraction } from '@grafana/runtime';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DEFAULT_EXAMPLES = ['{job=\"default/prometheus\"}'];\nconst PREFERRED_LABELS = ['job', 'app', 'k8s_app'];\nconst EXAMPLES_LIMIT = 5;\nconst LOGQL_EXAMPLES = [{\n  title: 'Log pipeline',\n  expression: '{job=\"mysql\"} |= \"metrics\" | logfmt | duration > 10s',\n  label: 'This query targets the MySQL job, filters out logs that don’t contain the word \"metrics\" and parses each log line to extract more labels and filters with them.'\n}, {\n  title: 'Count over time',\n  expression: 'count_over_time({job=\"mysql\"}[5m])',\n  label: 'This query counts all the log lines within the last five minutes for the MySQL job.'\n}, {\n  title: 'Rate',\n  expression: 'rate(({job=\"mysql\"} |= \"error\" != \"timeout\")[10s])',\n  label: 'This query gets the per-second rate of all non-timeout errors within the last ten seconds for the MySQL job.'\n}, {\n  title: 'Aggregate, count, and group',\n  expression: 'sum(count_over_time({job=\"mysql\"}[5m])) by (level)',\n  label: 'Get the count of logs during the last five minutes, grouping by level.'\n}];\nexport default class LokiCheatSheet extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      userExamples: []\n    });\n\n    _defineProperty(this, \"checkUserLabels\", async () => {\n      var _this$props$datasourc;\n\n      // Set example from user labels\n      const provider = (_this$props$datasourc = this.props.datasource) === null || _this$props$datasourc === void 0 ? void 0 : _this$props$datasourc.languageProvider;\n\n      if (provider.started) {\n        const labels = provider.getLabelKeys() || [];\n        const preferredLabel = PREFERRED_LABELS.find(l => labels.includes(l));\n\n        if (preferredLabel) {\n          const values = await provider.getLabelValues(preferredLabel);\n          const userExamples = shuffle(values).slice(0, EXAMPLES_LIMIT).map(value => `{${preferredLabel}=\"${value}\"}`);\n          this.setState({\n            userExamples\n          });\n        }\n      } else {\n        this.scheduleUserLabelChecking();\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.scheduleUserLabelChecking();\n    reportInteraction('grafana_loki_cheatsheet_opened', {});\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.userLabelTimer);\n  }\n\n  scheduleUserLabelChecking() {\n    this.userLabelTimer = setTimeout(this.checkUserLabels, 1000);\n  }\n\n  renderExpression(expr) {\n    const {\n      onClickExample\n    } = this.props;\n\n    const onClick = query => {\n      onClickExample(query);\n      reportInteraction('grafana_loki_cheatsheet_example_clicked', {});\n    };\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: \"cheat-sheet-item__example\",\n      onClick: e => onClick({\n        refId: 'A',\n        expr\n      }),\n      children: /*#__PURE__*/_jsx(\"code\", {\n        children: expr\n      })\n    }, expr);\n  }\n\n  render() {\n    const {\n      userExamples\n    } = this.state;\n    const hasUserExamples = userExamples.length > 0;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      children: [_h || (_h = /*#__PURE__*/_jsx(\"h2\", {\n        children: \"Loki Cheat Sheet\"\n      })), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"cheat-sheet-item\",\n        children: [_div || (_div = /*#__PURE__*/_jsx(\"div\", {\n          className: \"cheat-sheet-item__title\",\n          children: \"See your logs\"\n        })), _div2 || (_div2 = /*#__PURE__*/_jsx(\"div\", {\n          className: \"cheat-sheet-item__label\",\n          children: \"Start by selecting a log stream from the Log browser, or alternatively you can write a stream selector into the query field.\"\n        })), hasUserExamples ? /*#__PURE__*/_jsxs(\"div\", {\n          children: [_div3 || (_div3 = /*#__PURE__*/_jsx(\"div\", {\n            className: \"cheat-sheet-item__label\",\n            children: \"Here are some example streams from your logs:\"\n          })), userExamples.map(example => this.renderExpression(example))]\n        }) : /*#__PURE__*/_jsxs(\"div\", {\n          children: [_div4 || (_div4 = /*#__PURE__*/_jsx(\"div\", {\n            className: \"cheat-sheet-item__label\",\n            children: \"Here is an example of a log stream:\"\n          })), this.renderExpression(DEFAULT_EXAMPLES[0])]\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"cheat-sheet-item\",\n        children: [_div5 || (_div5 = /*#__PURE__*/_jsx(\"div\", {\n          className: \"cheat-sheet-item__title\",\n          children: \"Combine stream selectors\"\n        })), this.renderExpression('{app=\"cassandra\",namespace=\"prod\"}'), _div6 || (_div6 = /*#__PURE__*/_jsx(\"div\", {\n          className: \"cheat-sheet-item__label\",\n          children: \"Returns all log lines from streams that have both labels.\"\n        }))]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"cheat-sheet-item\",\n        children: [_div7 || (_div7 = /*#__PURE__*/_jsx(\"div\", {\n          className: \"cheat-sheet-item__title\",\n          children: \"Filtering for search terms.\"\n        })), this.renderExpression('{app=\"cassandra\"} |~ \"(duration|latency)s*(=|is|of)s*[d.]+\"'), this.renderExpression('{app=\"cassandra\"} |= \"exact match\"'), this.renderExpression('{app=\"cassandra\"} != \"do not match\"'), _div8 || (_div8 = /*#__PURE__*/_jsxs(\"div\", {\n          className: \"cheat-sheet-item__label\",\n          children: [/*#__PURE__*/_jsx(\"a\", {\n            href: \"https://grafana.com/docs/loki/latest/logql/#log-pipeline\",\n            target: \"logql\",\n            children: \"LogQL\"\n          }), ' ', \"supports exact and regular expression filters.\"]\n        }))]\n      }), LOGQL_EXAMPLES.map(item => /*#__PURE__*/_jsxs(\"div\", {\n        className: \"cheat-sheet-item\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"cheat-sheet-item__title\",\n          children: item.title\n        }), this.renderExpression(item.expression), /*#__PURE__*/_jsx(\"div\", {\n          className: \"cheat-sheet-item__label\",\n          children: item.label\n        })]\n      }, item.expression))]\n    });\n  }\n\n}","map":{"version":3,"names":["shuffle","React","PureComponent","reportInteraction","DEFAULT_EXAMPLES","PREFERRED_LABELS","EXAMPLES_LIMIT","LOGQL_EXAMPLES","title","expression","label","LokiCheatSheet","userExamples","provider","props","datasource","languageProvider","started","labels","getLabelKeys","preferredLabel","find","l","includes","values","getLabelValues","slice","map","value","setState","scheduleUserLabelChecking","componentDidMount","componentWillUnmount","clearTimeout","userLabelTimer","setTimeout","checkUserLabels","renderExpression","expr","onClickExample","onClick","query","e","refId","render","state","hasUserExamples","length","example","item"],"sources":["/home/soula/grafana/public/app/plugins/datasource/loki/components/LokiCheatSheet.tsx"],"sourcesContent":["import { shuffle } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport LokiLanguageProvider from '../language_provider';\nimport { LokiQuery } from '../types';\n\nconst DEFAULT_EXAMPLES = ['{job=\"default/prometheus\"}'];\nconst PREFERRED_LABELS = ['job', 'app', 'k8s_app'];\nconst EXAMPLES_LIMIT = 5;\n\nconst LOGQL_EXAMPLES = [\n  {\n    title: 'Log pipeline',\n    expression: '{job=\"mysql\"} |= \"metrics\" | logfmt | duration > 10s',\n    label:\n      'This query targets the MySQL job, filters out logs that don’t contain the word \"metrics\" and parses each log line to extract more labels and filters with them.',\n  },\n  {\n    title: 'Count over time',\n    expression: 'count_over_time({job=\"mysql\"}[5m])',\n    label: 'This query counts all the log lines within the last five minutes for the MySQL job.',\n  },\n  {\n    title: 'Rate',\n    expression: 'rate(({job=\"mysql\"} |= \"error\" != \"timeout\")[10s])',\n    label:\n      'This query gets the per-second rate of all non-timeout errors within the last ten seconds for the MySQL job.',\n  },\n  {\n    title: 'Aggregate, count, and group',\n    expression: 'sum(count_over_time({job=\"mysql\"}[5m])) by (level)',\n    label: 'Get the count of logs during the last five minutes, grouping by level.',\n  },\n];\n\nexport default class LokiCheatSheet extends PureComponent<QueryEditorHelpProps<LokiQuery>, { userExamples: string[] }> {\n  declare userLabelTimer: NodeJS.Timeout;\n  state = {\n    userExamples: [],\n  };\n\n  componentDidMount() {\n    this.scheduleUserLabelChecking();\n    reportInteraction('grafana_loki_cheatsheet_opened', {});\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.userLabelTimer);\n  }\n\n  scheduleUserLabelChecking() {\n    this.userLabelTimer = setTimeout(this.checkUserLabels, 1000);\n  }\n\n  checkUserLabels = async () => {\n    // Set example from user labels\n    const provider: LokiLanguageProvider = this.props.datasource?.languageProvider;\n    if (provider.started) {\n      const labels = provider.getLabelKeys() || [];\n      const preferredLabel = PREFERRED_LABELS.find((l) => labels.includes(l));\n      if (preferredLabel) {\n        const values = await provider.getLabelValues(preferredLabel);\n        const userExamples = shuffle(values)\n          .slice(0, EXAMPLES_LIMIT)\n          .map((value) => `{${preferredLabel}=\"${value}\"}`);\n        this.setState({ userExamples });\n      }\n    } else {\n      this.scheduleUserLabelChecking();\n    }\n  };\n\n  renderExpression(expr: string) {\n    const { onClickExample } = this.props;\n    const onClick = (query: LokiQuery) => {\n      onClickExample(query);\n      reportInteraction('grafana_loki_cheatsheet_example_clicked', {});\n    };\n\n    return (\n      <div className=\"cheat-sheet-item__example\" key={expr} onClick={(e) => onClick({ refId: 'A', expr })}>\n        <code>{expr}</code>\n      </div>\n    );\n  }\n\n  render() {\n    const { userExamples } = this.state;\n    const hasUserExamples = userExamples.length > 0;\n\n    return (\n      <div>\n        <h2>Loki Cheat Sheet</h2>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">See your logs</div>\n          <div className=\"cheat-sheet-item__label\">\n            Start by selecting a log stream from the Log browser, or alternatively you can write a stream selector into\n            the query field.\n          </div>\n          {hasUserExamples ? (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here are some example streams from your logs:</div>\n              {userExamples.map((example) => this.renderExpression(example))}\n            </div>\n          ) : (\n            <div>\n              <div className=\"cheat-sheet-item__label\">Here is an example of a log stream:</div>\n              {this.renderExpression(DEFAULT_EXAMPLES[0])}\n            </div>\n          )}\n        </div>\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Combine stream selectors</div>\n          {this.renderExpression('{app=\"cassandra\",namespace=\"prod\"}')}\n          <div className=\"cheat-sheet-item__label\">Returns all log lines from streams that have both labels.</div>\n        </div>\n\n        <div className=\"cheat-sheet-item\">\n          <div className=\"cheat-sheet-item__title\">Filtering for search terms.</div>\n          {this.renderExpression('{app=\"cassandra\"} |~ \"(duration|latency)s*(=|is|of)s*[d.]+\"')}\n          {this.renderExpression('{app=\"cassandra\"} |= \"exact match\"')}\n          {this.renderExpression('{app=\"cassandra\"} != \"do not match\"')}\n          <div className=\"cheat-sheet-item__label\">\n            <a href=\"https://grafana.com/docs/loki/latest/logql/#log-pipeline\" target=\"logql\">\n              LogQL\n            </a>{' '}\n            supports exact and regular expression filters.\n          </div>\n        </div>\n        {LOGQL_EXAMPLES.map((item) => (\n          <div className=\"cheat-sheet-item\" key={item.expression}>\n            <div className=\"cheat-sheet-item__title\">{item.title}</div>\n            {this.renderExpression(item.expression)}\n            <div className=\"cheat-sheet-item__label\">{item.label}</div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}